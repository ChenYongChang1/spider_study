[{"id": "6990635900858269733", "title": "leetcode每日一题题解——171. Excel 表列序号      （2021年7月30日）", "desc": "leetcode每日一题题解——171. Excel 表列序号 （2021年7月30日） 171. Excel Sheet Column Number Title Description"}, {"id": "6996550065049305095", "title": "题19：删除链表的第N个节点", "desc": "题19：删除链表的第N个节点 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 进阶：你能尝试使用一趟扫描实现吗？ 示例 1： 示例 2： 示例 3： 提示： 解题思路： 利用双指针"}, {"id": "6997970627797712910", "title": "LeetCode寻找两个正序数组的中位数 | 算法练习系列", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 前言 今天来一道数组相关的题目，寻找数组中的中位数，本题的思路不是很难，本文主要是给前端开发人员来个JavaScript版本的解题方法，本"}, {"id": "7004487577361186852", "title": "剑指 Offer 56 - I. 数组中数字出现的次数", "desc": "一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。"}, {"id": "6994687566251458573", "title": "3周攻克数据结构[链表篇-2]", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 DAY8 1. 反转链表 通用的解题思路：链表的题目通常情况下都是用递归去解决，这道题可以用递归和双指针来解决，其实思路都是一样的 看图 👇"}, {"id": "6844903903062917127", "title": "LeetCode 攻略 - 2019 年 7 月下半月汇总（100 题攻略）", "desc": "7 月下半旬攻略 45 道题，目前已攻略 100 题。 自 2019-05-16 开始，jsliang 每天会折腾一道及以上 LeetCode 题目，并将其解题思路记录成文章，发布到 GitHub 和 微信公众号。 【完成】2019/08/15 前。LeetCode 简单难度题…"}, {"id": "6988321035162501150", "title": "LeetCode刷题，有效的括号（20）", "desc": "有效的括号 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。"}, {"id": "6994390663861108773", "title": "3周攻克数据结构[链表篇-1]", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 DAY7 1. 环形链表 单链表的构造方法：👇🏻 方法1：哈希表查询 方法1-1：哈希表延升法：链表记录法，也叫污链表法 方法2：快慢指针 "}, {"id": "7002181445481398308", "title": "递归与栈刷题", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 之前写了JavaScript链表刷题，JavaScript链表刷题（二），JavaScript链表刷题（三），JavaScript链表刷题"}, {"id": "6999805246901846053", "title": "算法（leetode，附思维导图 + 全部解法）300题之（14）最长公共前缀", "desc": "零 标题：算法（leetode，附思维导图 + 全部解法）300题之（14）最长公共前缀 导读： 一 题目描述 二 解法总览（思维导图） 三 全部解法 1 方案1 1)代码： 2 方案2 1)代码： "}, {"id": "6995374872289345549", "title": "LeetCode——最大连续1的个数 III（滑动窗口）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 题目描述 解题思路 定义滑动窗口的左右边界。 定义滑动窗口中连续1的个数（包含K个零） 定义滑动窗口中零的个数。 核心循环体 进入循环的条"}, {"id": "6995538713866403871", "title": "前端算法必刷题系列[85]", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 156. 移动零(move-zeroes) 标签 简单 双指针 题目 leetcode 传送门 给定一个数组 nums，编写一个函数将所有"}, {"id": "7002790878393827336", "title": "学算法刷LeetCode【剑指offer专题】：18. 删除链表的节点", "desc": "题目描述 解题思路 题目中提示这是个蛋链表，单链表的特征就是节点中有一个指向下一个节点的指针，如果要删除一个节点，直接这个节点的前一个节点指向它的下一个节点即可。跳过要删除的节点，这个节点就被删除了。"}, {"id": "6993679779618619428", "title": "LeetCode回文数 | 算法练习系列", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 回文数是一个神奇的存在，它体现了一种对称美，在大自然中到处都是对称的例子，猎豹的四肢，狮子的面部，漂亮的蝴蝶翅膀，等等，从古之前，我们"}, {"id": "6993719829572091940", "title": "前端常见算法题(字符串篇)", "desc": "javascript 前端LeetCode刷题（字符串篇）：主要包含三大类型题目，即翻转字符串、回文串、最长问题"}, {"id": "6988713306127564808", "title": "LeetCode算法学习之--链表--环形链表", "desc": "大家好今天给大家分享下一道 LeetCode 简单难度 的题目 [环形链表](https://leetcode-cn.com/problems/3sum/) 题目 分析 解法一：快慢指针 解法二：Se"}, {"id": "6997782740531675143", "title": "JS算法之斐波那契及青蛙跳台阶", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 斐波那契数列 写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项（即F(N)）。"}, {"id": "6986904449750925326", "title": "LeetCode 18 4Sum (Tag:Array Difficulty:Medium)", "desc": "题目描述 给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？"}, {"id": "6994087218738364453", "title": "前端常见算法题(数组篇)--上", "desc": "javascript 前端LeetCode刷题（数组篇上）：主要包含两大类型题目，即和问题以及位置索引问题"}, {"id": "6992526585400131620", "title": "LeetCode整数反转 | 算法练习系列", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 整数翻转是一道非常经典的算法小题，在日常的工作中可能不会遇到这样的业务，但是解决这种问题的思想非常重要，解决的方法有很多，下面和大家分"}, {"id": "7002468522966122532", "title": "leetcode 678.有效的括号字符串 | 刷题打卡", "desc": "题目链接 双栈法 思路 先简化一下，如果这道题没有*，只有(，)的话，只需要用一个栈就搞定了。 创建一个栈用来存( 遍历字符串，如果当前字符为(就入栈，如果当前字符为)并且栈不为空就出栈一个( 如果最"}, {"id": "6943092291561062436", "title": "3.5w字 | 47道 LeetCode 题目带你看看二叉树的那些套路（下）", "desc": "周末无聊，整理了一下之前做过的LeetCode上的二叉树相关的题目，也方便以后不断回顾，LeetCode的题目总是刷完之后感觉会了，过一段时间又忘了，还是要不断复盘。 5. 经典题目：二叉树的操作 翻转一棵二叉树。示例： 通过翻转之后，二叉树的每一个左右子孩子都发生了交换，所有…"}, {"id": "6996584732423094286", "title": "算法：螺旋矩阵", "desc": "给你一个m行n列的矩阵matrix，请按照顺时针螺旋顺序，返回矩阵中的所有元素，matrix矩阵所有元素范围在[-100, 100]。"}, {"id": "6999503644798222349", "title": "LeetCode题解：28. 实现 strStr()，暴力法，JavaScript，详细注释", "desc": "原题链接：28. 实现 strStr()，https://leetcode-cn.com/problems/implement-strstr/"}, {"id": "6969011330766340127", "title": "LeetCode、217存在重复元素", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 前言 受“王鱼”同学的点拨，从昨天开始刷LeetCode Top精选面试题，为冲击秋招做准备。"}, {"id": "7000181962077896718", "title": "LeetCode-1094. 拼车(JavaScript-差分数组解法）", "desc": "解法：差分数组 前面讲了 前缀和 的方法，利用 前缀和 ，可以得到数组中 num[i] ... nums[j] 任意区间的累加和 而利用 差分数组，可以实现对数据的某个区间段进行频繁的操作，如加减乘除"}, {"id": "7005361790477418533", "title": "js 图的遍历", "desc": "广度优先搜索 力扣题目 简书关于搜索的讲解 以上内容就不做说明了，大神写的非常的清楚明了了。一下是用js实现的搜索 知识点 用一个viseted保存访问过的节点，用一个队列保存需要遍历查找的节点（坐标"}, {"id": "6997806028007931912", "title": "LeetCode 1. 两数之和", "desc": "力扣第一题：两数之和。 题目描述： 一个函数，接收两个参数，一个数组、一个目标数，求出数组中两个元素之和等于目标数的两个数（必有一个有效答案）。 一、暴力 两层遍历，找到答案。 这样写可以，但太暴力，"}, {"id": "7002994503007092749", "title": "leetcode刷题-BFS&DFS", "desc": "leetcode刷题-BFS&DFS 1、完全平方数 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。 给你一"}, {"id": "6964726356542226446", "title": "LeetCode之双指针", "desc": "一般情况下，遍历数组（或者字符串）操作，都是采用单指针从前往后或者从后往前依次访问数组（或者字符串）中的元素。而对于以下情况，只采用单指针处理，则会徒增时间复杂度和空间复杂度："}, {"id": "6943787446505046046", "title": "2w字 | 28道 LeetCode 题目带你看看链表的那些套路", "desc": "1. 链表的概念 在计算机里，不保存在连续存储空间中，而每一个元素里都保存了到下一个元素的地址的数据结构，我们称之为链表（Linked List）。链表上的每一个元素又可以称它为节点（Node），而链表中第一个元素，称它为头节点（Head Node），最后一个元素称它为尾节点（…"}, {"id": "7003570423405215757", "title": "学习笔记：剑指 Offer 04. 二维数组中的查找", "desc": "题目描述 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 "}, {"id": "6943091553250312229", "title": "3.5w字 | 47道 LeetCode 题目带你看看二叉树的那些套路（上）", "desc": "周末无聊，整理了一下之前做过的LeetCode上的二叉树相关的题目，也方便以后不断回顾，LeetCode的题目总是刷完之后感觉会了，过一段时间又忘了，还是要不断复盘。 对于树这个结构，最常见的就是二叉树。我们除了需要了解二叉树的基本操作之外，还需要了解一些特殊的二叉树，比如二叉…"}, {"id": "7002355392973897764", "title": "「字符串」leetcode 14.最长公共前缀（简单）", "desc": "一、了解题目 附上原题链接：14. 最长公共前缀 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 \"\"。 示例 : 二、解题思路 依据以上题意，我们来写下解题思路： "}, {"id": "7003594645485649951", "title": "学习笔记：剑指 Offer 11. 旋转数组的最小数字", "desc": "题目描述 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的"}, {"id": "6989171774957027336", "title": "每天一题，实现flat", "desc": "有时候数组里面的成员依然是数组，那么这个时候如果要对这个数组进行\"压平\"，变成一个一维数组，就是今天要实现的方法（flat）。 问题 具体实现 实现思路 参数： array（Array）：需要压平的数"}, {"id": "6951938260021018632", "title": " JS 实现10进制转换36进制", "desc": "前言我们在平时写代码的时候偶尔会碰到进制转换的问题，常见的有2进制，8进制，10进制，16进制之间的转换，但是36进制却很少听过，这里就让我们用JS来简单尝试一下36进制的实现吧思考36进制数的构成在"}, {"id": "7000015974900432932", "title": "JS算法之链表中倒数第k个节点及反转链表", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 链表中倒数第k个节点 输入一个链表，输出该链表中倒数第k个节点。"}, {"id": "6992116968526446606", "title": "leetcode每日一题题解—— 581. 最短无序连续子数组——2021年8月3日｜8月更文挑战", "desc": "581. 最短无序连续子数组 Title Description Given an integer array nums, you need to find one continuous subarr"}, {"id": "7002476192917897230", "title": "学算法刷LeetCode【剑指offer专题】： 59 - I. 滑动窗口的最大值", "desc": "题目描述 解题思路 还记得59-II.队列的最大值这道题的解法吗？这道题难度是困难 ，实际上理清思路并不难，无非就是滑动窗口+单调度双端队列的结合。我们来一步一步拆解一下： 第一步 总思路：我们准备一"}, {"id": "7007627531981422628", "title": "LeetCode《初级算法》字符串之整数反转 -- JavaScript ", "desc": "LeetCode《初级算法》-- JavaScript 实现； 字符串：整数反转； 解题思路和代码实现；"}, {"id": "7007332489068806181", "title": "每日一道LeetCode  提神醒脑", "desc": "每日一道LeetCode 提神醒脑 此篇文章用来记录自己学习算法的点点滴滴 每天进步一点点 每天努力一点点 每天成长一点点"}, {"id": "7007588265423273991", "title": "「每日一题」通过删除字母匹配到字典里最长单词", "desc": "1. 题目描述 给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。 如果答案不止一个，返回长度最长且字典序"}, {"id": "7007609943528325157", "title": "算法题：LRU缓存机制", "desc": "运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和写入数据 put 。 获取数据 get(key) - 如果密钥 ( key ) 存"}, {"id": "7007369960859107341", "title": "菜鸟前端今日份leetCode算法学习QAQ", "desc": "18届某渣本软件工程专业毕业。稀里糊涂考土木研究生，稀里糊涂复试被踹。20年疫情家里蹲了大半年，经过大学室友引路自学小半年前端21年3月深圳入职工作经验从0到现在的5个月零26天，打算22年年后跳大槽"}, {"id": "7000909761336049671", "title": "不懂动态规划？21道 LeetCode题目带你学会动态规划！", "desc": "本文21道动态规划相关的LeetCode题目节选自CodeTop中考察频率较高的动态规划题目，文章较长，全文约15000字，可以收藏一波嗷~~"}, {"id": "7006993763721543716", "title": "LeetCode第22天🐱‍🏍", "desc": "678. 有效的括号字符串 贪心 设置minCount和maxCount两个计数器 遍历字符串s，维护maxCount的值，当maxCount<0时，即当前位置之前的')'数量大于'('与'*'的数量"}, {"id": "7007292929190428702", "title": "LeetCode第23天🐱‍🏍", "desc": "447. 回旋镖的数量 n个距离点m相等的点，可得到n*(n-1)个回旋镖.用哈希图存储key距离和value出现次数. 70. 爬楼梯"}, {"id": "7006953567042928647", "title": "LeetCode《初级算法》数组之旋转图像 -- JavaScript ", "desc": "LeetCode《初级算法》-- JavaScript 实现； 数组：旋转图像； 解题思路和代码实现；"}, {"id": "7005395411976323102", "title": "【冲冲冲】贪心来当leetcode CEO（算法+优先队列）", "desc": "你是 LeetCode CEO，将要走向巅峰 IPO，为了想拉高股票价格多（割）赚（韭）钱（cai），你要在限定项目次数内尽可能的多挣钱。你的初始资本为 w，做项目空手套白狼不花钱。需要注意的是你"}, {"id": "7006691070528454670", "title": "LeetCode《初级算法》数组之有效的数独 -- JavaScript ", "desc": "LeetCode《初级算法》-- JavaScript 系列； 数组之有效的数独； 题目的总结和实现；"}, {"id": "7006160153657475108", "title": "LeetCode第20天🐱‍🏍", "desc": "1894. 找到需要补充粉笔的学生编号 42. 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。"}, {"id": "7006219498915102756", "title": "【冲冲冲】LeetCode68. 文本左右对齐", "desc": "其实读完这个题，基本上就有个朦胧的思路了。大体区分 3 种情况：1. 当前是最后一行，就左对齐，小于 maxWidth 的话就尾部补齐空格。2. 当前行只有一个单词，左对齐，小于 maxWidth 的"}, {"id": "7005881016753586189", "title": "LeetCode第19天🐱‍🏍", "desc": "11. 盛最多水的容器 双指针，数组第一项和最后一项为初始边界，当左边界小于右边界时，将下一次的左边界右移，反之右边界左移。 25. K 个一组翻转链表"}, {"id": "7006223215953444871", "title": "【冲冲冲】LeetCode1894. 找到需要补充粉笔的学生编号", "desc": "读题 编号为 i 的学生回答问题会消耗 chalk[i] 支粉笔。 如果 剩余粉笔数量 < chalk[i]，那么这第 i 个同学就要补充粉笔。 以上过程可能会重复多轮次。 要求：返回需要补充粉笔的学"}, {"id": "7003227402960633864", "title": "什么，leetcode easy级别？5种解法重拳出击👊🏻", "desc": "就像费曼学习法说的，在理解后要能输出出来，以教促学。今天会有5中解法：普通的两次遍历、双指针、递归、栈、哈希表。发散下思维，对于 easy 的题重拳出击！欢迎点赞评论收藏👍🏻"}, {"id": "7003572682906320904", "title": "LeetCode萌新前端刷题记录", "desc": "7.整数反转 思路 反转：使用JS数组的reverse方法 or 手动倒序取值 区间：使用Match.pow函数得到n次方值 负数：反转过程中用绝对值计算，最后判断原数值是否小于0手动补负号 代码实现"}, {"id": "6999822223372451848", "title": "【LeetCode 233.数字1的个数 】- JavaScript（规律）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 LeetCode 233.数字1的个数 - JavaScript 题目描述 给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 "}, {"id": "7005554200289493029", "title": "LeetCode第18天🐱‍🏍", "desc": "5. 最长回文子串 给你一个字符串 s，找到 s 中最长的回文子串。 1 <= s.length <= 1000 s 仅由数字和英文字母（大写和/或小写）组成"}, {"id": "7000291762962956301", "title": "LeetCode：198. 打家劫舍", "desc": "198. 打家劫舍 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报"}, {"id": "7000744523189977095", "title": "【剑指offer】 二维数组中的查找 、 0～n-1中缺失的数字", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 题目 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入"}, {"id": "6990631860611383310", "title": "二叉树遍历（前序、中序、后序）", "desc": "1 下面为二叉树的数据结构 先序遍历结果(根左右)：1 2 3 4 5 6 中序遍历结果(左根右)：3 2 1 5 4 6 后序遍历结果(左右根)：3 2 5 6 4 1 三种遍历方法区别如下 先序："}, {"id": "7002195333438504997", "title": "学算法刷LeetCode【剑指offer专题】：59-II.队列的最大值", "desc": "题目描述 59-II.队列的最大值 解题思路 思路1(暴力解法) 使用队列的特性尾部插入，头部删除实现 push_back 和 pop_front， 至于寻找最大值，则遍历队列元素，找到最大值就返回，"}, {"id": "6991833383995211807", "title": "leetcode每日一题题解—— 743. 网络延迟时间（2021年8月2日）", "desc": "743. 网络延迟时间 Title Description You are given a network of n nodes, labeled from 1 to n. You are also "}, {"id": "6994818779452538910", "title": "前端常见算法题(链表篇)--下", "desc": "javascript 前端LeetCode刷题（链表篇下）：主要包含两大类型题目，即删除节点问题及特殊链表问题"}, {"id": "6994817991145684999", "title": "前端常见算法题(链表篇)--上", "desc": "javascript 前端LeetCode刷题（链表篇上）：主要包含两大类型题目，即翻转链表问题及分割合并问题"}, {"id": "6996500608337313805", "title": "LeetCode题解：208. 实现 Trie (前缀树)，对象，JavaScript，详细注释", "desc": "原题链接：208. 实现 Trie，https://leetcode-cn.com/problems/implement-trie-prefix-tree/"}, {"id": "6994419323431288839", "title": "前端常见算法题(树篇)--下", "desc": "javascript 前端LeetCode刷题（树篇下）：主要包含一大类型题目，即特殊二叉树相关问题"}, {"id": "6994418340626186253", "title": "前端常见算法题(树篇)--上", "desc": "javascript 前端LeetCode刷题（树篇上）：主要包含两大类型题目，即遍历问题以及二叉搜索问题"}, {"id": "6994087554257518600", "title": "前端常见算法题(数组篇)--下", "desc": "javascript 前端LeetCode刷题（数组篇下）：主要包含两大类型题目，即路径问题以及区间问题"}, {"id": "6994695626600480805", "title": "LeetCode——反转链表（双指针）", "desc": "题目描述 解题思路 采用一个指针指向当前节点，cur节点的初始值为head. 采用另一个指针指向当前节点的前一个节点(pre),该节点的初始值为null. 每当我们修改当前指针的指向的时候，一定要保存"}, {"id": "6979897629664608292", "title": "LeetCode 16 3Sum Closest (Tag:Array Difficulty:Medium)", "desc": "题目描述 给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。 示"}, {"id": "6997798788333043720", "title": "【温故知新】`70. 爬楼梯进阶版` 完全背包🎒问题AC-动态规划实现", "desc": "题目描述 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。 示例 1： 输入： 2 输出： 2 解"}, {"id": "7002063831572676615", "title": "学算法刷LeetCode【剑指offer专题】：09-用两个栈实现队列", "desc": "思路，维护两个栈，分别实现队列的出队和入队。 时间复杂度：O(n) 空间复杂度： O(n) 难易：易"}, {"id": "6995556784458989581", "title": "前端Leetcode系列｜28. 实现 strStr()", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战； 这是力扣系列第4篇，今天来和小伙伴们一起打卡力扣第28题：实现 strStr()。 一、题目描述 实现 strStr() 函数。 给你两"}, {"id": "6996298020660707335", "title": "前端之算法（六）分而治之 ", "desc": "大家好，前面几章我们说了很多的像链表，集合，字典等数据结构，也说了很多的排序和搜索算法，今天我们要聊的是分而治之这种方法，它既不是数据结"}, {"id": "6985884324025499661", "title": "LeetCode——字符串相加（JS实现）", "desc": "题目描述 解题思路 使用两个指针分别指向数字字符串的末尾位置。 使用变量carry记录进位。 当两个记录下标的位置大于等于0，或者进位不等于零的时候都进入循环。 在循环中当使用charAt这个API获"}, {"id": "6969047355421097992", "title": "【LeetCode刷题--剑指Offer】=> 01.两数目之和", "desc": "原题 思路 用 hashMap 存储遍历过的元素和对应的索引。 每遍历一个元素，看看 hashMap 中是否存在满足要求的目标数字。 所有事情在一次遍历中完成（用了空间换取时间）。"}, {"id": "6993958042807042085", "title": "算法（leetode，附思维导图 + 全部解法）300题之（7）整数反转", "desc": "算法（leetode，附思维导图 + 全部解法）300题之（7）整数反转。 我的解法很多 且 很sao，你忍一下~"}, {"id": "6994395856849862670", "title": "前端算法必刷题系列[83]", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 153. 最长有效括号 (longest-valid-parentheses) 标签 动态规划 困难 题目 leetcode 传送门 给你一"}, {"id": "6915421564980690951", "title": "leetcode 加一  &&  公交路线", "desc": "66. 加一 815. 公交路线"}, {"id": "6935439849818161166", "title": "整数反转 | 刷题打卡", "desc": "给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 先依次比较前后两个数的大小，找到第一个最小值，如果…"}, {"id": "6844904086333030407", "title": "Leetcode刷题，有效的括号", "desc": "给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。 有效字符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。 ()[]{}，([{}])，((){[]})，这些都是true。 第一遍看完题没有清晰的思路。看完示…"}, {"id": "6907044013270892552", "title": "我的js算法爬坑之旅- 买卖股票的最佳时机含手续费", "desc": "第七十一天：力扣714题，买卖股票的最佳时机含手续费地址：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-t"}, {"id": "6901224512889552909", "title": "LeetCode题解：455. 分发饼干，贪心for循环，JavaScript，详细注释", "desc": "按照题意，孩子将会始终处于等待状态，而饼干可能出现多个都无法满足孩子胃口的情况。 例如孩子的胃口为5，饼干为[1,2,3,4,5,6]的话，那么必须要从1到5遍历饼干，才可以查找到可以被吃的饼干。 因此可以用for循环遍历饼干，用过一个指针作为遍历孩子的索引，遇到可被食用的饼干…"}, {"id": "6936539657089843236", "title": " 一次就够:只出现一次的数字| 刷题打卡", "desc": "给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 第一眼看到这个题时，似曾相识，和昨天的“存在重复元素”的暴力解法类似，先排序然后依次比较，如果前面一个和后面…"}, {"id": "6856038614158180365", "title": "LeetCode题解：70. 爬楼梯，递归+哈希表，JavaScript，详细注释", "desc": "该题其实就是求解斐波那契数列，可以参考题解【手绘图解】从递归到动态规划，该题解给出的是动态规划解，下面是递归+哈希表解法。"}, {"id": "6886296816476766222", "title": "【一天一大 lee】划分字母区间 (难度:中等) - Day20201022", "desc": "字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。 S 的长度在[1, 500]之间。 S 只包含小写字母 'a' 到 'z' 。"}, {"id": "6844903841482162184", "title": "[leetcode-JavaScript]---19.删除链表的倒数第N个节点", "desc": "给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 给定的 n 保证是有效的。 这道题要用双指针来实现。先用fast指针前进n，然后让slow从head开始和fast一起前进，直到fast到了末尾，此时slow的下一个节点就是要删除的节点。（另外，若fast一开…"}, {"id": "6899682908668166158", "title": "LeetCode题解：17. 电话号码的字母组合，队列，JavaScript，详细注释", "desc": "可以先参考题解回溯+队列 图解中队列部分的动画。 如果输入为23，假设在队列已存储了2的组合['a', 'b', 'c']，要生成23的组合，只需要将当前队列逐个出队，每个元素都合并3对应的字母映射，再重新入队即可。 经过步骤2后，队列中即为为23的所有可能组合，只要将其作为结…"}, {"id": "6896109054574526478", "title": "LeetCode - 1030. 距离顺序排列矩阵单元格", "desc": "LeetCode - 1030. 距离顺序排列矩阵单元格 给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 &#x3C;= r &#x3C; R 且 0 &#x3C;= c &#x3C; C。 另外，我们在该矩阵中给出了一个坐标为 (r0, c0) …"}, {"id": "6917162586442039309", "title": "力扣(LeetCode)刷题，简单+中等题(第30期)", "desc": "力扣(LeetCode)定期刷题，每期10道题，业务繁重的同志可以看看我分享的思路，不是最高效解决方案，只求互相提升。 两次遍历，一次记录字符出现次数，一次找出第一个出现一次的索引。"}, {"id": "6844903879025360903", "title": "前端工程师的 LeetCode 之旅 -- 二分搜索算法 Medium 篇（下）", "desc": "LeetCode 二分搜索算法 Medium 题型讲解。"}, {"id": "6937665325089603620", "title": "了解JavaScript的BigInt:加一 | 刷题打卡", "desc": "给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 一开始我就错了：现将数组遍历转换为字符串，再将字符串转换为数字 + 1，最后再转换为字…"}, {"id": "6935819192717279269", "title": "912.排序数组｜刷题打卡", "desc": "给你一个整数数组 nums，请你将该数组升序排列。 冒泡排序：从序列的一端开始往另一端冒泡，依次比较相邻两个数的大小。 以 [5, 2, 3, 1] 举例，从左往右依次冒泡将大的往右移动按照升序排列。 第一轮第一次比较：5 和 2 比较；发现 5 比 2 大 交换位置。[5, …"}, {"id": "6909375942100156430", "title": "LeetCode题解：92. 反转链表 II，迭代，JavaScript，详细注释", "desc": "参考了官方题解中的方法二: 迭代链接反转，你可以其中的图片理解。 如果你对反转链表不熟悉，可以先尝试206. 反转链表。 使用prev和curr指针进行链表反转，先将两个指针移动到m-1和m位置。 在进行反转的时候，链表会被分成三段，第一段和第三段不变，中间的第二段被反转。 链…"}, {"id": "6936392686966407198", "title": "[LeetCoed 503. 下一个更大元素 II] | 刷题打卡", "desc": "给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。 注意: 输入数组的长度不会超过 …"}, {"id": "6936152391758643230", "title": "[LeetCode164. 最大间距] | 刷题打卡", "desc": "给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。 如果数组元素个数小于 2，则返回 0。 你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。 请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。 本题肯定是需要排序的，但要求时间复杂度O…"}, {"id": "6952667959194025997", "title": "剑指Offer——二叉树中和为某一值的路径（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路这道题属于二叉树的深度优先遍历首先我们要了解DFS的遍历过程当root节点走到null的时候，说明该条路径已经遍历完毕当一条"}, {"id": "6844903905420115975", "title": "LeetCode 1. 两数之和：JavaScript 的三种解法", "desc": "看到题目后最先想到的就是两个循环嵌套，遍历每个元素 x，并查找是否存在一个值与 target - x 相等的目标元素。 为了对运行时间复杂度进行优化，我们可以使用哈希表。一个简单的实现使用了两次迭代。在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，…"}, {"id": "6854573208549621774", "title": "LeetCode题解：206. 反转链表，JavaScript，While循环迭代，详细注释", "desc": "我们需要在遍历旧链表时，将节点1赋值给新链表，再将下一个节点2的next指向新链表中的节点1即可。"}, {"id": "6844903887858565133", "title": "前端工程师的 LeetCode 之旅 -- 二叉树 Easy 篇", "desc": "LeetCode 二叉树 Easy 题型的整理与总结。"}, {"id": "6900525950929207304", "title": "LeetCode题解：121. 买卖股票的最佳时机，一次遍历，JavaScript，详细注释", "desc": "对于第i天的价格来说，当前已知以前所有价格中的最小值，并且第i天只能与其之前的最小价格交易。 如果第i天价格比最小值小，利润必然为负，则无需交易，只要将第i天价格设为最小值。 如果第i天价格比最小值大，则可以计算当前利润并与历史利润对比取最大值。 对于第一天，只需要将当前价格设…"}, {"id": "6912301988885561358", "title": "LeetCode题解：239. 滑动窗口最大值，二叉堆，JavaScript，详细注释", "desc": "该题可使用堆解决，利用了堆能够快速插入和取出元素，并始终能够按要求排序的特点。 创建一个大顶堆，当窗口在数组中移动时，每移出一个元素，就从堆中将其移除，每移入一个元素，就将其加入堆中，这样保证了堆始终存储的是窗口中的元素。 每次将值存入堆后，都从堆中将最大值取出即可得到每个窗口…"}, {"id": "6876450893177454606", "title": "leetcode--旋转数组的最小数字", "desc": "把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。 该数组的引用。注意是在原数组中进行排序，没有新建数组 s…"}, {"id": "6923905448114569229", "title": "LeetCode题解：433. 最小基因变化，双向BFS（beats 99%），JavaScript，详细注释", "desc": "分别以start和end为起点，分别向中间推进，当两者相遇时，即为找到了最短路径。 每次推进都选取两端队列中较小者，能够优化遍历的次数。 BFS需要使用队列，当一端队列元素的下一个变化单词存在于另一端的队列中时，即可认为两者相遇。 使用Map判断单词是否存在于队列中，可以进一步…"}, {"id": "6891789889482801165", "title": "【一天一大 lee】根据数字二进制下 1 的数目排序 (难度:简单) - Day20201106", "desc": "给你一个整数数组 arr 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。 如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。 请你返回排序后的数组。"}, {"id": "6938765180914368519", "title": "622.设计循环队列｜刷题打卡", "desc": "设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。 循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，…"}, {"id": "6890453501193748488", "title": "LeetCode题解：90. 子集 II，递归+for循环+回溯，JavaScript，详细注释", "desc": "使用DFS生成所有可能的排列情况。 每层递归从current开始遍历nums。 将遍历到的值存入subset，并进入下一层递归，表示当前值存在与子集中的情况。 进入下一层递归后，将当前值从subset中弹出，继续遍历数组，表示当前值不存在与子集中的情况。 以输入[1,2,2]为…"}, {"id": "6894978553549422599", "title": "LeetCode - 1122. 数组的相对排序", "desc": "LeetCode - 1122. 数组的相对排序 对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同。未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾。 1. 设定排序规则 其他情况则出现在哈希表中的元素在前。 2. 设计…"}, {"id": "6896852502331785230", "title": "283. 移动零", "desc": "LeetCode - 283. 移动零 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 1. 双指针二次遍历 2. 双指针交换 3. splice + push 4. …"}, {"id": "6882239679186337799", "title": "LeetCode题解：144. 二叉树的前序遍历，使用栈，JavaScript，详细注释", "desc": "对于该题，我们可以首先看前序遍历对应的示意图，图片来自官方题解。 前序遍历最后的输出顺序，就是按照图中的1-2-3-4-5。我们需要做的，其实是如何使用一个栈来实现这个过程。 从图片中，可以看到输出节点的顺序是由浅至深，从左到右。 每次循环时，将栈顶元素弹出1个，之后将其子元素…"}, {"id": "6844903590868287496", "title": "Leetcode之javascript解题(No33-34)", "desc": "Given an array of integers sorted in ascending order, find the starting and ending position of a given target value. Your algorithm's runti…"}, {"id": "6844904153966346254", "title": "《剑指offer》—— 替换空格", "desc": "请实现一个函数，把字符串 s 中的每个空格替换成\"%20\"。 ⚠️注意：正则表达式当中 \\s 表示匹配空格，g 表示全局匹配，如果不熟悉正则表达式，直接去 MDN 上看一看，多练练就会了。 搜索「tony老师的前端补习班」关注我的微信公众号，那么就可以第一时间收到我的最新文章。"}, {"id": "6900179834375569415", "title": "LeetCode题解：860. 柠檬水找零，模拟情境，JavaScript，详细注释", "desc": "零钱只有5元和10元两种。 该题只关心是否足够找零，因此收入时只需要考虑收入的零钱数量即可，至于赚了多少钱无需考虑。 收入5元，此时5元零钱数量加1。 收入10元，此时10元零钱数量加1,5元零钱数量减1。 收入20元，由于5元零钱更加通用，因此若有10元零钱，则找零10元和5…"}, {"id": "6935820989678747655", "title": "1.两数之和｜刷题打卡", "desc": "给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。 直接暴力破解，双层循环，两数相加判断。 分别拿两次循环的数字，判断是不是目标值，并…"}, {"id": "6935800100065116190", "title": "123. 买卖股票的最佳时机 III｜刷题打卡", "desc": "本题跟前面两次的区别，限定了最多只能买两次，且同一天不能多次交易。 本题比较难的是理解思路，整理出状态转移方程。"}, {"id": "6935811501005635598", "title": "238. 除自身以外数组的乘积｜刷题打卡", "desc": "给你一个长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。 第一次遍历计算出当前元素之前乘积，并把结果保存在 list 中。就比如 第二次遍历则是从后往前遍历，…"}, {"id": "6950078722707816485", "title": "剑指Offer——栈的压入、弹出序列（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路本题的思想在于想到模拟栈我们首先定义一个数组用来模拟栈从pushed数组的第一个元素开始进行入栈，如果该元素在popped数"}, {"id": "6884830686369611790", "title": "LeetCode题解：22. 括号生成，递归生成同时过滤，JavaScript，详细注释", "desc": "使用递归生成成对括号。 由于括号必须成对，因此最终左右括号的数量都为括号的对数，即只要左右括号的对数小于对数，即可插入括号。 只有左括号大于右括号时，才可以插入右括号。此时保证了左括号会优先插入，也就保证了括号是成对的。而且右括号的数量自然也小于对数。 当字符串长度等于对数*2…"}, {"id": "6998707022577270798", "title": "「链表」leetcode 237.删除链表中的节点（简单）", "desc": "一、了解题目 附上原题链接：237. 删除链表中的节点 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。 示例： 现有一个链表 -- head = "}, {"id": "6844903889771167752", "title": "LeetCode 攻略 - 2019 年 7 月上半月汇总（55 题攻略）", "desc": "自 2019-05-16 开始，jsliang 每天折腾一道及以上 LeetCode 题目，并将其解题思路记录成文章，发布到 GitHub 和 微信公众号。 2019/08/15 前。LeetCode 简单难度题目 - 完成 100 道简单 LeetCode 题目的题解。 20…"}, {"id": "6994069448957116424", "title": "前端Leetcode系列｜13. 罗马数字转整数", "desc": "今天来和小伙伴们一起打卡力扣第13题：罗马数字转整数。 一、题目描述 罗马数字包含以下七种字符: I， V， X， L例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为"}, {"id": "6936441872113991693", "title": "[leetCode 94.二叉树的中序遍历]｜刷题打卡", "desc": "给定一个二叉树的根节点 root ，返回它的 中序 遍历。 使用递归解题是该题最简单的解法，我写一个函数，传入需要遍历的二叉树的根节点，函数中判断root是否为空结点，是就直接返回一个空数组[],不是空结点就进行操作。操作中分为三部分，第一部分使其定位到最左下的结点(直到空)，…"}, {"id": "6989789225268805639", "title": "算法（leetode，附思维导图 + 全部解法）300题之（3）无重复字符的最长子串", "desc": "标题：算法（leetode，附思维导图 + 全部解法）300题之（3）无重复字符的最长子串 一 题目描述 二 解法总览（思维导图） 三 全部解法 1 方案1 1)代码： 2 方案2 1)代码： 3 方"}, {"id": "7000932485362090014", "title": "「字符串」leetcode 9.判断是否是回文数（简单）", "desc": "一、了解题目 附上原题链接：9. 回文数 给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。 回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如"}, {"id": "6994435150604042247", "title": "算法题-顺时针打印矩阵", "desc": "题目描述 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。 分析：矩阵可以用二维数组来模拟。 示例 ： 题解 方法一：模拟打印"}, {"id": "6995819745953988644", "title": "「栈」leetcode 155.取出最小栈", "desc": "一、了解题目 附上原题链接：155. 最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) —— 将元素 x 推入栈中。 pop() —— 删"}, {"id": "6992970434635366437", "title": "LeetCode 42 Trapping Rain Water (Tag:Array Difficulty:Hard)", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6967153378098937870", "title": "HOT100——寻找两个正序数组的中位数（JS实现）", "desc": "题目描述 解题思路 本题采用双指针的解题方法。 一个指针指向数组1。 一个指针指向数组2。 依次比较两个指针指向的元素的大小，谁小谁加到排序好的数组中，直到一方遍历完，将没遍历完的全部加到排序好的数组"}, {"id": "6992586885902106638", "title": "LeetCode 41 First Missing Positive (Tag:Array Difficulty:Hard)", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6995175994487210020", "title": "「前端刷题」11. 盛最多水的容器", "desc": "给你 n 个非负整数 a1，a2，...，a``n，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i"}, {"id": "6964541421487390734", "title": "剑指Offer——把字符串转换成整数（JS实现）", "desc": "题目描述 解题思路 本题需要考虑的一是数值是由范围的，其次就是正则表达式怎么写，当然本题也可以不使用正则表达式，但是本次题解采用的是正则，因为这样简单易懂。 首先去除字符串两侧的空格。 使用正则表达式"}, {"id": "6983929411657531423", "title": "LeetCode第86题：分隔链表", "desc": "题干 给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。 你应当 保留 两个分区中每个节点的初始相对位置。 实例1"}, {"id": "6991837040962699277", "title": "LeetCode 39 Combination Sum (Tag:Array Difficulty:Medium)｜8月更文挑战", "desc": "前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉得有帮助的话，记得多多点赞关注哦，感谢！ 题目描述 给定一个"}, {"id": "6987217727769280519", "title": "LeetCode 34 Find First and Last Position of Element  (Tag:Array Difficulty:Mid)", "desc": "前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉得有帮助的话，记得多多点赞关注哦，感谢！ 题目描述 给定一个"}, {"id": "6971696625462984711", "title": "HOT100——括号生成（JS实现）", "desc": "题目描述 解题思路 本题采用DFS的思想。 只要有左括号剩余的时候，就将左括号剩余数量-1，然后继续投入DFS。 当左括号的长度小于有括号的长度时，将右括号剩余数量-1，然后继续投入DFS。 实现代码"}, {"id": "6994821895350648863", "title": "LeetCode 51 N-Queens (Tag:Array Difficulty:Hard)", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6941172390973931557", "title": "leetcode ：  3无重复字符最长子串（中等）", "desc": "给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。"}, {"id": "6999988010993319949", "title": "「前端刷题」23. 合并K个升序链表", "desc": "给你一个链表数组，每个链表都已经按升序排列。 请你将所有链表合并到一个升序链表中，返回合并后的链表。   示例 1： 输入： lis"}, {"id": "6938026594812297252", "title": "82.删除排序链表中的重复元素-ii｜刷题打卡", "desc": "给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。 因为可能删除头节点，需要一个哨兵节点。然后需要两个指针，pre 用来定位相同节点的开头前一个指针，cur 用来查找相同节点的结尾 因为删除重复元素时有可能需要删除第一个，首先我们要新建一个哨…"}, {"id": "6882305478303907853", "title": "【一天一大 lee】分割等和子集 (难度:中等) - Day20201011", "desc": "给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。"}, {"id": "6844904070910574600", "title": "前端工程师的 LeetCode 之旅 - 夜喵专场（20）", "desc": "LeetCode夜喵🐱专场（20），涉及到的知识点有：位运算、双指针和动态规划。"}, {"id": "6906378545065525255", "title": "【一天一大 lee】摆动序列 (难度:中等) - Day20201212", "desc": "如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。 例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,…"}, {"id": "6891530929181982733", "title": "【一天一大 lee】单词接龙 (难度:中等) - Day20201105", "desc": "给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则： 每次转换只能改变一个字母。 转换过程中的中间单词必须是字典中的单词。 如果不存在这样的转换序列，返回 0。 所有单词具有…"}, {"id": "6936162945378287653", "title": "[LeetCode: 34. 在排序数组中查找元素的第一个和最后一个位置 +  33. 搜索旋转排序数组] | 刷题打卡", "desc": "所谓的二分算法,就是我们知道当前的候选区间中,一定存在我们要找到的答案,而且我们发现这个区间拥有单调性质此类的性质,那么我们可以不停地缩减候选区间的范围,达到排除无用答案的效果. 二分算法的思路很简单, 但是代码不好实现, 细节过多. 这里作者给出俩个模板, 大家只要分析对应的…"}, {"id": "6890716372205207559", "title": "【一天一大 lee】有效的山脉数组 (难度:简单) - Day20201103", "desc": "给定一个整数数组 A，如果它是有效的山脉数组就返回 true，否则返回 false。 A[0] &#x3C; A[1] &#x3C; ... A[i-1] &#x3C; A[i] A[i] > A[i+1] > ... > A[A.length - 1]"}, {"id": "6936155898591051813", "title": "【LeetCode-hot100系列】4.中位数 |刷题打卡", "desc": "2. 双指针排序 3. 二分查找 遇到每一道算法题，首先去思考它究竟需要怎么样的答案，不要偏题很重要。"}, {"id": "6844903880447246350", "title": "LeetCode尝鲜之大样本统计-看我如何将计算耗时从6秒降到十几毫秒", "desc": "趋于好奇心去尝试了下LeetCode，果不其然，蛮有意思的，随便选了一道题目做，一开始觉得还是蛮容易的，最后提交答案的时候，果然还是有坑，竟然还考察程序运行时间，这么一整，更有意思了。下面以这道题目来讲讲涉及的几个知识点以及解法的不断演进，仅供参考。 一开始，看着题目觉得很容易…"}, {"id": "6912795664183197710", "title": "leetcode 每日打卡 字符串问题 ", "desc": "592. 分数加减运算 正则表达式 正前瞻 exp1(?=exp2)：查找 exp2 前面的 exp1。 exp1(?!exp2)：查找后面不是 exp2 的 exp1。 正则表达式 正后顾 (?&#x3C;=exp2)exp1：查找 exp2 后面的 exp1。(?&#x3C…"}, {"id": "6844903886273118222", "title": "前端工程师的 LeetCode 之旅 -- 双指针技巧 Medium 篇（K-Sum）", "desc": "LeetCode 中 K-Sum 题型的归纳与总结。"}, {"id": "6844903875581837325", "title": "前端工程师的 LeetCode 之旅 -- 二分搜索算法（Easy篇）", "desc": "二分搜索算法的JavaScript实现思路以及 LeetCode 相关题型讲解。"}, {"id": "6844903708753395719", "title": "前端工程师的 LeetCode 之旅 -- 链表 Easy 篇", "desc": "解析 LeetCode 链表专题 Easy 题型。"}, {"id": "6844904100740481037", "title": "我用JS刷LeetCode | Day 12 |  Length of Last Word", "desc": "给定一个仅包含大小写字母和空格 ' ' 的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。 如果不存在最后一个单词，请返回 0 。 说明：一个单词是指仅由字母组成、不包含任何空格字符的 最大子字符串。 分析题目：最后一个单词…"}, {"id": "6920127720009498631", "title": "我的js算法爬坑之旅-找到最小生成树里的关键边和伪关键边", "desc": "第一百零五天：力扣1489题，找到最小生成树里的关键边和伪关键边地址：https://leetcode-cn.com/problems/find-critical-and-pseudo-critica"}, {"id": "6844904202653679624", "title": "【一天一大 lee】用两个栈实现队列 (难度:简单) - Day20200630", "desc": "用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 ) 维护两个栈，第一个栈支持插入操作，第二个栈支持删除操作…"}, {"id": "6897051818439180301", "title": "【一天一大 lee】对链表进行插入排序 (难度:中等) - Day20201120", "desc": "插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。 每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。 插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。 每次迭代中，插入排序只…"}, {"id": "6936061621789949965", "title": "20.有效的括号｜刷题打卡", "desc": "给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 可以先判断下是不是偶数，如果不是那肯定是无效的。 然后可以创建一个栈，和一个左括…"}, {"id": "6895973232336519176", "title": "【一天一大 lee】距离顺序排列矩阵单元格 (难度:简单) - Day20201117", "desc": "给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 &#x3C;= r &#x3C; R 且 0 &#x3C;= c &#x3C; C。 另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。 返回矩阵中的所有单元格的坐标，并按到 (r0,…"}, {"id": "6844903920397975559", "title": "779. 第K个语法符号", "desc": "前端工程师的 LeetCode 之旅 -- 递归题型讲解"}, {"id": "6844903876429086734", "title": "LeetCode 攻略 - 2019 年 6 月汇总（30 题攻略）", "desc": "自 2019-05-16 开始，经过前期的阵痛（做公众号，稳定作息，稳定工作，调整时间……）后，jsliang 开始了持续攻略的 LeetCode。 有印象的小伙伴应该还记得，jsliang 一开始会将 LeetCode 题解发布到 掘金，但是因为掘金的个人主页不支持分标签，文…"}, {"id": "6948308300169969671", "title": "[LeetCode11题盛最多水的容器] | 刷题打卡", "desc": "之前学习的时候有学过双指针算法，但是平时用的不多，这次拿一道力扣的中等题来练练手，巩固一下自己学过的知识。 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (…"}, {"id": "6993698515863994381", "title": "LeetCode 46 Permutations (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6996289062776602637", "title": "算法题---打印从1到最大的n位数", "desc": "算法题---打印从1到最大的n位数 题目描述：输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、"}, {"id": "6993340984524439565", "title": "LeetCode 45 Jump Game II (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6987018712754700324", "title": "LeetCode算法学习之--数组--寻找旋转排序数组中的最小值", "desc": "大家好今天给大家分享下一道 LeetCode 中等难度 的题目[寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/count-of-range-sum/)"}, {"id": "6998494714089439239", "title": "LeetCode 73 Set Matrix Zeroes (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6998175479131799582", "title": "LeetCode-283. 移动零(JavaScript)", "desc": "解法： 还是快慢指针的办法 继续按照之前的套路 快指针找非 0 的，慢指针存非 0 的 快指针找到非 0 的值后，告诉慢指针存一下，慢指针存完后，往前爬一步，等待存下一个 等快指针遍历完数组以后，在数"}, {"id": "6997027294476812318", "title": "LeetCode 59 Spiral Matrix II (Tag:Array Difficulty:Meduim)", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6986933290028498981", "title": "LeetCode 31 Next Permutation (Tag:Array Difficulty:Medium)", "desc": "前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉得有帮助的话，记得多多点赞关注哦，感谢！ 题目描述 实现获取"}, {"id": "6966431964559573023", "title": "HOT100——两数相加（JS实现）", "desc": "题目描述 解题思路 本次使用暴力解法： 拿到链表对应的字符字符串数值，然后将数值反转之后转为BigInt类型，之所以转为BigInt类型的原因在于后期测试用例中有大数形式。 将两个数值相加，然后转为字"}, {"id": "7001489700087152677", "title": "「字符串」leetcode 13.罗马数字转整数（简单）", "desc": "一、了解题目 附上原题链接：13. 罗马数字转整数 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即"}, {"id": "6998130584421662727", "title": "LeetCode 66 Plus One (Tag:Array Difficulty:Easy)", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6981077786022641672", "title": "LeetCode215. 数组中的第K个最大元素", "desc": "215. 数组中的第K个最大元素 题目描述 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。"}, {"id": "6859879886794981389", "title": "前端工程师的 LeetCode 之旅 -- 周赛 201", "desc": "给你一个由大小写英文字母组成的字符串 s 。 s[i] 是小写字符，但 s[i + 1] 是相同的大写字符；反之亦然 。 请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。 请返回整理好的 字符串 。题目保证在给出的约束条…"}, {"id": "6968745727837077517", "title": "🌈JSer LeetCode Trip: 146. LRU Cache", "desc": "PRE 这是我参与更文挑战的第1天，活动详情查看： 更文挑战 146. LRU Cache Design a data structure that follows the constraints o"}, {"id": "6994439738253901837", "title": "LeetCode算法学习之--Queue--滑动窗口最大值", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 大家好今天给大家分享下一道 LeetCode 困难难度 的题目滑动窗口最大值 题目 分析 解法一：暴力双指针(超时) 解法二：双端队列 代码"}, {"id": "6978419497153593352", "title": "LeetCode 数组类型题目做前必看", "desc": "数组类型的题目一般是 给定一个数组nums,要求在数组中查找目标数target、组合其中的元素得到某个值、对该数组进行操作满足要求。 对于某些问题，通常会有一些通用的方法作为其中的一环甚至直接可以"}, {"id": "6962407316469579789", "title": "剑指Offer——数字序列中某一位的数字（JS实现）", "desc": "题目描述 解题思路（数学规律） 本题主要是寻找数学规律，通过暴力的方法肯定是超时的，下面就简单介绍下本题的解题思路，我认为核心还是在于理解将字符串拆分为不同位数的区间。 首先判断n在哪一个区间，区间的"}, {"id": "6967623478514024485", "title": "HOT100——最长回文子串（JS实现）", "desc": "题目描述 解题思路 方法：中心扩散法。 核心：目标字符的左右是否相等。 讨论两种情况：回文子串的长度是奇数的情况和偶数的情况。 循环时，一看是否越界，二看是否相等。 具体思路请看代码注释。 解题代码 "}, {"id": "6844903613303635976", "title": "详解动态规划最少硬币找零问题--JavaScript实现", "desc": "硬币找零问题是动态规划的一个经典问题，其中最少硬币找零是一个变种，本篇将参照上一篇01背包问题的解题思路，来详细讲解一下最少硬币找零问题。如果你需要查看上一篇，可以点击下面链接： 下面让我们开始吧。 给定4种面额的硬币1分，2分，5分，6分，如果要找11分的零钱，怎么做才能使得…"}, {"id": "6994409228307791885", "title": "二叉树刷题(三）", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前面写了比较基础的二叉树题目，有需要的童鞋请冲 二叉树刷题(一）， 二叉树刷题(二），这篇继续刷几道二叉树的题。 一、完全二叉树的节点个数 "}, {"id": "6981468923455619108", "title": "LeetCode347. 前 K 个高频元素", "desc": "LeetCode347. 前 K 个高频元素 题目描述 公众号：手摸手前端进阶 给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。"}, {"id": "6917414975606784008", "title": "leetcode刷题神器 - 本地一行命令执行多个测试用例", "desc": "1. 目录结构 2. 测试用例examples.js 3. 代码code.js 4. 代码执行器及结果判定run.js 5. 执行命令 6. 使用vscode断点调试 使用vscode断点调试代码，启动方式可以选择通过命令行启动，这样就可以给程序传入自定义的参数。"}, {"id": "6989283839818334215", "title": "【LeetCode刷题 不知道能坚持几天 orz...】Day001 14. 最长公共前缀", "desc": "【Day001】用Map或者正则应该还有优化空间，时间复杂度o(n²)，空间复杂度o(n),先到这吧，好困好困睡了睡了... 原题：14. 最长公共前缀 - 力扣（LeetCode）"}, {"id": "6970496252488187935", "title": "LeetCode第524题：通过删除字母匹配到字典里最长单词&最长子序列", "desc": "题干 给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。 如果答案不止一个，返回长度最长且字典序最小的字符"}, {"id": "6986639440441507871", "title": "LeetCode算法学习之--数组--搜索旋转数组", "desc": "大家好今天给大家分享下一道 LeetCode 中等难度 的题目[面试题 10.03. 搜索旋转数组](https://leetcode-cn.com/problems/count-of-range-s"}, {"id": "6971436397563641863", "title": "LeetCode精选Top面试题之x的平方根", "desc": "这是我参与更文挑战的第7天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 今天继续学习LeetCode精选面试题，今天选择第69题进行学习"}, {"id": "6986649440782123022", "title": "LeetCode算法学习之--链表--两两交换", "desc": "大家好今天给大家分享下一道 LeetCode 中等难度 的题目[两两交换链表中的节点](https://leetcode-cn.com/problems/count-of-range-sum/) 题目"}, {"id": "6951683773045932039", "title": "白话递归：由二叉树力扣题总结出来的递归思想", "desc": "最近在刷力扣中二叉树相关题目，发现很多问题都需要用递归来解决，或者说很多问题用递归来解决会比较简单。就结合力扣里的题目来解析递归思想，将递归翻译成大白话，并通过算法题展示给大家，让递归不再难以理解"}, {"id": "6936378038129164319", "title": "力扣 (LeetCode)-栈,括号生成 ｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 栈是一种 后进先出 的有序集合。新添加或待删除的元素都保存在栈的同一端，叫做栈顶，另外一端叫栈底。 如果栈为空的话将返回true，否则就返回false。 clear方法用来移除栈里所有的元素，把栈清空。 ES6新…"}, {"id": "6999427231411879972", "title": "「双指针」leetcode 209.长度最小的子数组（中等）", "desc": "一、了解题目 附上原题链接：209. 长度最小的子数组 给定一个含有 n 个正整数的数组和一个正整数 target 。 找出该数组中满足其和 ≥ target 的长度最小的连续子数组 [numsl, "}, {"id": "6976890648263655432", "title": "你会求《数字范围内的最小公倍数》吗？", "desc": "这是我参与更文挑战的第21天，活动详情查看：更文挑战 题目描述 找到可以被两者以及这些参数之间范围内的所有序列号均分的所提供参数的最小公倍数。 该范围将是一个由两个数字组成的数组，不一定按数字顺序排列"}, {"id": "6844903834167279623", "title": "JS版数据结构第四篇(矩阵)", "desc": "矩阵的定义对于大学学习过《线性代数》这门课程的同学们来讲应该都不会很陌生，如果有同学不了解可以自行查下百度百科。 不多废话,我们直接看题。 题目要求的是我们按照顺时针的顺序从外向内遍历每一个元素,并将他们按顺序返回出来。 可能有些同学不太清除我们是怎样想到通过递归解决这样的问题…"}, {"id": "6937956616650113032", "title": " Leetcode21｜刷题打卡03", "desc": "昨天学习了递归和分治算法，我的学习感受就是：递归的概念挺好理解，但是在解决题目的过程中常常会因为纠结多层函数嵌套，很容易把自己绕进去，在完全理解后才发现其实不用纠结细枝末节，理解函数的作用并且调用就可以了，剩下的思路是让计算机完成的，而不是我的大脑。今天在力扣上找了到链表和递归…"}, {"id": "6990557918156292126", "title": "leetcode20. 有效的括号(Javascript栈标准解法）", "desc": "标准栈解法：判断括号的有效性可以使用「栈」这一数据结构来解决。 我们遍历给定的字符串 ss。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合"}, {"id": "6844904082637848589", "title": "前端工程师的 LeetCode 之旅 -- 178周赛", "desc": "给你一个数组 nums，对于其中一个元素 nums[i]，请你统计数组中比它小的所有数字的数目。 换而言之m，对于每一个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] < nums[i]。 以数组的形式返回答案。 本题数据规模…"}, {"id": "6987758961785044999", "title": "LeetCode算法学习之--二分查找--爱吃香蕉的珂珂", "desc": "大家好今天给大家分享下一道 LeetCode 中等难度 的题目 爱吃香蕉的珂珂](https://leetcode-cn.com/problems/count-of-range-sum/) 题目 分析"}, {"id": "6951270198900949029", "title": "1773. 统计匹配检索规则的物品数量｜刷题打卡", "desc": "本文正在参与掘金团队号上线活动，点击 查看大厂春招职位一、题目描述本题来自1773. 统计匹配检索规则的物品数量二、思路分析把ruleKey映射为数组下标0，1，2，匹配、遍历。三、AC代码forEa"}, {"id": "6939168379869757477", "title": "力扣 (LeetCode)-28. 实现 strStr()｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 力扣 (LeetCode)-104. 二叉树的最大深度，图｜刷题打卡-3月12号 28. 实现 strStr() 实现 strStr() 函数。 给定一个 haystack 字符串和一个 needle 字符串，在…"}, {"id": "6996287501740539940", "title": "LeetCode 56 Merge Intervals (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6986636298698588191", "title": "Leet code(盛水的最大面积) 前端刷题解法记录与思考", "desc": "先看要求 给你一个数组,数组里面的每一项代表水池的高度,求出两个高度之间盛水最高的面积 思路 1.循环数组,将每一种面积情况都求出来 选出面积最大的哪一项 (但性能很差) 2.双指针解法从左边和右边同"}, {"id": "6938343709524099109", "title": "leetcode387字符串中的第一个唯一字符｜刷题打卡04", "desc": "昨天学习了字符串和KMP算法，很惭愧由于自身时间问题，对于KMP算法理解地还不是非常透彻，只是大概地了解了一下算法的作用，所以目前还没法以此作文。今天在力扣上找了几道基础的字符串题练手，希望能先慢慢地巩固字符串的知识，再深入KMP算法。 给定一个字符串，找到它的第一个不重复的字…"}, {"id": "6991659177957392420", "title": "3周攻克数据结构[数组篇-1] ｜8月更文挑战", "desc": "Day1 1. 存在重复元素 示例 👇🏻 方法1：Set结构 方法2：优化版暴力解法 2. 最大子序和 方法1：动态规划 DAY2 1. 两数之和 方法1：爆破 方法2：哈希表查询 2. 合并两个有序"}, {"id": "6991477741447020581", "title": "LeetCode 37 Sudoku Solver (Tag:Array Difficulty:Hard)｜8月更文挑战", "desc": "前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉得有帮助的话，记得多多点赞关注哦，感谢！ 题目描述 编写一个"}, {"id": "6991471028950007844", "title": "「前端刷题」1.两数之和｜ 8月更文挑战", "desc": "题目 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数"}, {"id": "6844904101927469063", "title": "前端工程师的 LeetCode 之旅 -- 周赛 181", "desc": "给你两个整数数组 nums 和 index。你需要按照以下规则创建目标数组： 目标数组 target 最初为空。 按从左到右的顺序依次读取 nums[i] 和 index[i]，在 target 数组中的下标 index[i] 处插入值 nums[i] 。 重复上一步，直到在 …"}, {"id": "6995792199879229448", "title": "「栈/字典」leetcode 20.有效的括号", "desc": "一、了解题目 附上原题链接：leetcode 20. 有效的括号 给定一个只包括 '(' ， ')' ， '{' ， '}' ， '[' ， ']' 的字符串 s ，判断字符串是否有效。 有效字符串需"}, {"id": "6991298176552534030", "title": "「每周一题」前端工程师算法系列(1)-冒泡排序", "desc": "算法的确实是硬伤，但是又不得不学，接下用JavaScript语言来分析常见的算法，力求通俗易懂，如果你觉得不错，或者发现文章中的错误，或者有更好的建议，欢迎提出 后续文章中会涉及：常见排序算法、常见搜"}, {"id": "6978844061687873544", "title": "LeetCode 4 Median of Two Sorted Arrays(Tag:Array Difficulty:Hard)", "desc": "题目描述 给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。 示例 1： 输入：nums1 = [1,3], nums2 ="}, {"id": "6938944967763034120", "title": "[LeetCode240. 搜索二维矩阵 II]｜刷题打卡", "desc": "题目描述示例1：示例2：思路分析AC代码每行二分裁剪法总结从这一题可以看出，算法在很多地方都跟数学扯上了关系"}, {"id": "6957872919078764551", "title": "剑指Offer——数组中的逆序对（JS实现）", "desc": "题目描述 解题思路 我刚开始看到本题，首先想到的是暴力解法，也就是通过for循环进行不断遍历，结果超时。 看了题解才知道，解决逆序对的问题，往往通过归并排序 本题考查的本质还是归并排序，只是在归并排序"}, {"id": "6844903994070941709", "title": "LeetCode 204. 计数质数：JavaScript  实现埃拉托斯特尼筛法", "desc": "看到这个题目，一般人很容易就能想到使用循环，通过暴力遍历的方式检查每一个数是否为质数，并进行计数。 但是这种方法的算法复杂度过高，对于小范围搜索还好，如果是从百万甚至千万的数字中找出所有的质数，这种方法的劣势将极其明显。那我们可以使用埃拉托斯特尼筛法进行质数的查找。 埃拉托斯特…"}, {"id": "6963537407111069733", "title": "读者：西法，记忆化递归究竟怎么改成动态规划啊？", "desc": "我在动态规划专题反复强调了先学习递归，再学习记忆化，最后再学动态规划。 其中原因已经讲得很透了，相信大家已经明白了。如果不明白，强烈建议先看看那篇文章。 尽管很多看了我文章的小伙伴知道了先去学记忆化递"}, {"id": "6844904133292457997", "title": "前端工程师的 LeetCode 之旅 -- 夜喵 24", "desc": "给你一个整数数组 nums 。你可以选定任意的 正数 startValue 作为初始值。 你需要从左到右遍历 nums 数组，并将 startValue 依次累加上 nums 数组中的值。 请你在确保累加和始终大于等于 1 的前提下，选出一个最小的 正数 作为 startVal…"}, {"id": "6990024558140981285", "title": "【LeetCode刷题 不知道能坚持几天 orz...】Day003 26. 删除有序数组中的重复项", "desc": "性能实在是`惨不忍睹` =。= 时间复杂度：o(n),空间复杂度：o(1) 26. 删除有序数组中的重复项 - 力扣"}, {"id": "6844904128615809031", "title": "前端工程师的 LeetCode 之旅 -- 周赛 184", "desc": "给你一个字符串数组 words ，数组中的每个字符串都可以看作是一个单词。请你按 任意 顺序返回 words 中是其他单词的子字符串的所有单词。 如果你可以删除 words[j] 最左侧和/或最右侧的若干字符得到 word[i] ，那么字符串 words[i] 就是 words…"}, {"id": "6887137383050838023", "title": "1024 奇妙冒险全结局 + jsliang 自定义算法题目", "desc": "这个活动有 5 个好结局，其他都是 Bad End，Bad End 需要做 LeetCode 的第 1024 题才能解脱。 觉得文章不错的小伙伴欢迎点赞/点 Star。"}, {"id": "6948039906862219295", "title": " ipad不就是拿来刷题做笔记的吗 | 刷题打卡", "desc": "给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组，并在使用 O(1) 额外空间的条件下完成。 著作权归领扣网络所有。 其实，做题是讲究套路的，这也印证了很多大佬说力扣…"}, {"id": "6935068466202279972", "title": "leecode 刷题 路径总和 | 刷题打卡", "desc": "给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。 说明: 叶子节点是指没有子节点的节点。 给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。 说明: 叶子节点是指没有子节点的节点。 所有…"}, {"id": "6844903917008977928", "title": "LeetCode 攻略 - 2019 年 8 月上半月汇总（109 题攻略）", "desc": "自 2019-05-16 开始，jsliang 开始了 算法与数据结构 攻略（划水）之旅。 jsliang 每天会折腾一道及以上 LeetCode 题目，并将其解题思路记录成文章，发布到 GitHub 和 微信公众号 上。 这里不一一累述。 汇总了【数组】知识点。 攻略了 8 …"}, {"id": "6987271769371443236", "title": "LeetCode 35 Search Insert Position (Tag:Array Difficulty:Easy)", "desc": "前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉得有帮助的话，记得多多点赞关注哦，感谢！ 题目描述 给定一个"}, {"id": "6992130289543675918", "title": "LeetCode无重复字符的最长子串｜8月更文挑战", "desc": "前言 字符串处理在前端或者后端都有着举足轻重的地位，处理好字符串是我们每个人都必须掌握的技能，下面来一道简单的字符串相关的算法题。 LeetCode 无重复字符的最长子串 题目描述 给定一个字符串s，"}, {"id": "6997763570935005191", "title": "LeetCode 64 Minimum Path Sum (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6989623815470841864", "title": "LeetCode算法学习之--数组--爬楼梯", "desc": "大家好今天给大家分享下一道 LeetCode 简单难度 的题目[爬楼梯](https://leetcode-cn.com/problems/linked-list-cycle-ii/) 题目 分析 解"}, {"id": "6938184217868107812", "title": "力扣 (LeetCode)-合并两个有序数组,字典,散列表｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 有时候，一些键会有相同的散列值。不同的值在散列表中对应相同位置的时候，我们称其为 冲突。处理冲突有几种方法：分离链接、线性探查和双散列法 分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。 88.…"}, {"id": "6938924519793000456", "title": "力扣 (LeetCode)-104. 二叉树的最大深度，图｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 图是网络结构的抽象模型。 每个节点都和一个整数相关联，该整数将作为数组的索引。 广度优先搜索算法和深度优先搜索算法，只有一点不同，那就是待访问顶点列表的数据结构。 题：给定一个图G和源顶点v，找出对每个顶点u，u…"}, {"id": "6988808130851241992", "title": "LeetCode算法学习之--链表--环形链表II", "desc": "大家好今天给大家分享下一道 LeetCode 中间难度 的题目环形链表 II 题目 分析 解法一：Map 法 解法二：双指针法 代码借鉴 https://leetcode-cn.com/problem"}, {"id": "6970670522682081294", "title": "LeetCode精选Top面试题之合并两个有序数组", "desc": "这是我参与更文挑战的第6天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 今天继续学习LeetCode精选面试题，今天选择第88题进行学习"}, {"id": "6970243063511777287", "title": "LeetCode精选Top面试题之二叉树的最大深度", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 数据结构中的树还是很重要的，所以本次学习一下树和二叉树."}, {"id": "6992754895614902286", "title": "算法（leetode，附思维导图 + 全部解法）300题之（5）最长回文子串", "desc": "标题：算法（leetode，附思维导图 + 全部解法）300题之（5）最长回文子串 一 题目描述 二 解法总览（思维导图） 三 全部解法 1 方案1 1)代码： 2 方案2 1)代码： 3 方案3 1"}, {"id": "6856541382832717837", "title": "前端工程师的 LeetCode 之旅 -- 周赛 200", "desc": "给你一个整数数组 arr ，以及 a、b 、c 三个整数。请你统计其中好三元组的数量。 如果三元组 (arr[i], arr[j], arr[k]) 满足下列全部条件，则认为它是一个 好三元组 。 其中 |x| 表示 x 的绝对值。 解释：一共有 4 个好三元组：[(3,0,1…"}, {"id": "7000209314069610510", "title": "力扣每日一题 - 获取生成数组中的最大值", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 8.23 - 1646. 获取生成数组中的最大值 题意 示例1： 示例2： 示例3： 分析 本题给出两种方案解决 先循环生成nums数组，"}, {"id": "6991376975193456677", "title": "leetcode每日一题题解—— 1337.矩阵中战斗力最弱的 K 行 （2021年8月1日）", "desc": "1337.矩阵中战斗力最弱的 K 行 Title Description You are given an m x n binary matrix mat of 1's (representing s"}, {"id": "6992058249658761247", "title": "LeetCode题解：173. 二叉搜索树迭代器，递归，JavaScript，详细注释", "desc": "原题链接：173. 二叉搜索树迭代器，https://leetcode-cn.com/problems/binary-search-tree-iterator/"}, {"id": "6984672030092181517", "title": "LeetCode第739题：每日温度", "desc": "题干 请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperat"}, {"id": "6987176879060942862", "title": "LeetCode——两个数组的交集（JS实现）", "desc": "题目描述 解题思路 首先通过集合的方式对数组进行去重。 去重之后遍历其中一个数组，如果该数组在另一个数组中则将其加入到结果数组中。 最后返回结果数组。 解题代码 题目反思 学会使用集合对数组去重。 学"}, {"id": "6987428929501921311", "title": "leetcode 221. 最大正方形 --javascript dp", "desc": "221. 最大正方形 题目 在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。 题解 动态规划（Dynamic Programming, DP） 动态规划"}, {"id": "6987407926541418532", "title": "leetcode 542. 01 矩阵 --javascript DP", "desc": "542. 01 矩阵 题目： 给定一个由 0 和 1 组成的矩阵 mat ，请输出一个大小相同的矩阵，其中每一个格子是 mat 中对应位置元素到最近的 0 的距离。 两个相邻元素间的距离为 1 。 题"}, {"id": "6994074271060344862", "title": "LeetCode 47 Permutations II (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6913086082036793358", "title": "LeetCode题解：264. 丑数 II，暴力法，JavaScript，详细注释", "desc": "使用三个嵌套循环，计算出所有可能的丑数。 由于每层循环都是在上层循环的结果基础上进行计算，因此计算结果并未排序。 将所有丑数从小到大排序，再取出第n个即可。"}, {"id": "6948665985129775117", "title": "LeetCode 733——图像渲染（使用JavaScript语言）｜刷题打卡", "desc": "有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。 给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。 为了完成上色工作，从初始坐标开始，记录初始坐标的上..."}, {"id": "6904183740411412488", "title": "LeetCode题解：45. 跳跃游戏 II，贪心从后向前，JavaScript，详细注释", "desc": "该题是55. 跳跃游戏的加强版。 由于该题保证最终能够到达nums.length - 1位置，我们只要考虑每次都跳跃到当前已知能够到达的最远位置即可。 假设当前已经在某个位置target，只需从前遍历数组，查找最先能够跳跃到当前点的位置，也就是找到了这次跳跃的最大距离。之后将t…"}, {"id": "6844903853951860750", "title": "LeetCode70 —— 爬楼梯", "desc": "假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。 每次可以爬 1 或 2 个台阶。当我们爬 4 个台阶时，就是爬 3 个台阶的方法数，加上爬 2 个台阶的方法数，等于 F(3)…"}, {"id": "6868564028537454606", "title": "LeetCode题解：84. 柱状图中最大的矩形，循环+双指针暴力，JavaScript，详细注释", "desc": "与我的上一个题解LeetCode题解：84. 柱状图中最大的矩形，双循环暴力，JavaScript，详细注释思路相反，该题解的思路是枚举所有高度，然后 枚举所有高度。 使用双指针向两边推进，查找每个高度对应的最大宽度。 计算当前高度对应最大矩形的面积，并与之前存储的最大面积对比…"}, {"id": "6916063737988907022", "title": "数据结构与LeetCode", "desc": "使用栈模拟。 定义了三个指针，根据 cur 的值，依次向后移动三个指针。 方法二：遍历 l1 和 l2, 生成新的链表。 可以使用双指针的解法。使用两个指针，一个在数组的最左边，一个在最右边。对于这道题目而言，怎么移动指针呢？只要移动数值最小的那个指针即可。为什么要移动最小的指…"}, {"id": "6844904115739295752", "title": "手机数字键中字母组合 - JavaScript版", "desc": "给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. 尽管上面的答案是按字…"}, {"id": "6907502887035895821", "title": "【一天一大 lee】找不同 (难度:简单) - Day20201218", "desc": "给定两个字符串 s 和 t，它们只包含小写字母。 字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。 请找出在 t 中被添加的字母。"}, {"id": "6907502259790315533", "title": "【一天一大 lee】单词规律 II (难度:困难) - Day20201217", "desc": "给你一种规律 pattern 和一个字符串 str，请你判断 str 是否遵循其相同的规律。 这里我们指的是 完全遵循，例如 pattern 里的每个字母和字符串 str 中每个 非空 单词之间，存在着 双射 的对应规律。双射 意味着映射双方一一对应，不会存在两个字符映射到同一…"}, {"id": "6910755621764694023", "title": "LeetCode题解：42. 接雨水，栈，JavaScript，详细注释", "desc": "以该题的示例1为例，使用栈的解法，就是直观的去求所有柱子可装水的量。 栈中存储的一直是水桶的左边界和桶底的索引，例如分别会存储索引[1, 2]、[3, 4, 5]、[7, 8, 9]。 需要注意如果桶底元素出栈之后，栈为空，表示无法组成一个桶，例如桶底元素的索引是0，需要退出出…"}, {"id": "6885159149764608008", "title": "【一天一大 lee】比较含退格的字符串 (难度:简单) - Day20201019", "desc": "给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。 注意： 如果对空文本输入退格字符，文本继续为空。 S 和 T 只含有小写字母以及字符 '#'。"}, {"id": "6894060360849063943", "title": "【一天一大 lee】按奇偶排序数组 II (难度:简单) - Day20201112", "desc": "给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。 对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。 你可以返回任何满足上述条件的数组作为答案。 字符串 key 一定可以由字符串 ring 旋转拼出。 另外一个指…"}, {"id": "6893036696259002381", "title": "【一天一大 lee】区间和的个数 (难度:困难) - Day20201107", "desc": "给定一个整数数组 nums，返回区间和在 [lower, upper] 之间的个数，包含 lower 和 upper。 区间和 S(i, j) 表示在 nums 中，位置从 i 到 j 的元素之和，包含 i 和 j (i ≤ j)。 最直观的算法复杂度是 O(n2) ，请在此基…"}, {"id": "6870826222268448781", "title": "LeetCode题解：232. 用栈实现队列，使用两个栈 入队 - O(1)， 出队 - O(n)，JavaScript，详细注释", "desc": "所有元素都存在s1，同时缓存第一个入队元素为队首。 当出队时，先将除队首外的元素都缓存到s2，再将s1仅剩的一个元素pop。 pop完成之后，再将s2缓存的元素依次返回s1。"}, {"id": "6938036619475697695", "title": "20. 有效的括号｜刷题打卡", "desc": "20. 有效的括号 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 在遍历字符串的过程中判断 arr 的最后一个元素是否和 s.charAt(i) 可以组成一…"}, {"id": "6903504913699962888", "title": "【一天一大 lee】任务调度器 (难度:中等) - Day20201205", "desc": "给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。 然而，两个 相同种类 的任务之间必须有…"}, {"id": "6844904073360211975", "title": "前端工程师的 LeetCode 之旅 -- 173周赛", "desc": "给你一个字符串 s，它仅由字符 'a' 和 'b' 组成。每一次删除操作都可以从 s 中删除一个回文子序列。 返回删除给定字符串所有字符（字符串为空）的最小删除次数。 【子序列】定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的…"}, {"id": "6868842811937013774", "title": "LeetCode题解：239. 滑动窗口最大值，双循环暴力，JavaScript，详细注释", "desc": "参考了官方题解的方法一。 遍历每个滑块的起始点。 从起始点开始，遍历后续滑块元素。 对比滑块中元素的最大值，并存入结果。"}, {"id": "6928743155231621134", "title": "过年自律第七天", "desc": "如果不小心网友来到了这里请网友自动飘走，浪费你们时间表示歉意。该系列博客的目的是：想自己作为自律工具趁着过年没事每天刷几道题作为打卡督促的功能，没有什么可参考学习的东西，也不是刷博客量充大佬的目的"}, {"id": "6896655824312074253", "title": "【一天一大 lee】移动零 (难度:简单) - Day20201119", "desc": "给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 题目只限制了在原数组上操作，但是没有限制修改数组长度。"}, {"id": "6844903905923432462", "title": "LeetCode 7. 整数反转：JavaScript 解法之溢出判断你真的考虑全面了吗？", "desc": "看到整数反转这个题，最先联想到先对数值取绝对值，然后除十取余以对整数进行反转，之后再考虑是否需要取负数以及数值范围问题。 写到这，本以为就完成了，测试用例也都通过了。但是！你回想一下题目中的说明： 我们测试上面程序的时候并非在这么苛刻的环境下，所以先得到 result，再判断其…"}, {"id": "6844904085951365133", "title": "前端工程师的 LeetCode 之旅 - 夜喵专场（21）", "desc": "1、从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。 2、从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。 3、重复步骤 2 ，直到你没法从 s 中选择字符。 4、从 s 中选出 最大 的字符，将它 接在 结果字符串的…"}, {"id": "6935780576771178510", "title": "LeetCode 160. 相交链表｜刷题打卡", "desc": "编写一个程序，找到两个单链表相交的起始节点。 在节点 c1 开始相交。 如果两个链表没有交点，返回 null. 在返回结果后，两个链表仍须保持原有的结构。 可假定整个链表结构中没有循环。 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 时间复杂度 : O(m+n)…"}, {"id": "6907130646338994184", "title": "LeetCode题解：127. 单词接龙，BFS+生成所有可能新单词再匹配，JavaScript，详细注释", "desc": "原题链接：127. 单词接龙 使用队列进行BFS，队列中的每个元素都存储当前层的字符串与当前转换长度。 将wordList保存为Set，用于查找每一层转换的单词，如果找到就从Set中删除，以减少遍历次数。 每次循环都出队一个元素，同时生成当前单词所有可能被替换的情况，以单词hi…"}, {"id": "6971333298035359775", "title": "🌈JSer LeetCode Trip: 560. Subarray Sum Equals K", "desc": "PRE 这是我参与更文挑战的第8天，活动详情查看： 更文挑战 560. Subarray Sum Equals K 分析 容易想到 定区间，求区间内的总和，满足要求进行计数 [i, j] 两个变量 时"}, {"id": "6844904093459152904", "title": "前端工程师的 LeetCode 之旅 -- 179周赛", "desc": "给你一个整数 n，请你返回一个含 n 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。 返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。 解释：'pppz' 是一个满足题目要求的字符串，因为 'p' 出现 3 次，且 '…"}, {"id": "6959734294877044772", "title": "Leetcode：反转链表", "desc": "来源：力扣（LeetCode） 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 示例 1： 示例 2： 示例 3： 提示： 链表中节点的数目范围是 [0, 5000] -5000 "}, {"id": "6962692706669690893", "title": "剑指Offer——二维数组中的查找（JS实现）", "desc": "题目描述 解题思路（数学规律） 本题主要是从二维数组的左下角的元素出发，不断的进行移动比较，因为本题给出的二维数组存在一个特点就是，从左小角的元素出发，一列的元素中，上面的元素总是比下面的元素小，一行"}, {"id": "6927880767536267277", "title": " LeetCode题解：297. 二叉树的序列化与反序列化，BFS，JavaScript，详细注释", "desc": "参考了『手画图解』剖析DFS、BFS解法 | 二叉树的序列化与反序列化。 该题实际上并没有严格的要求将二叉树序列化为[1,2,3,null,null,4,5]的形式，只要能够输出为1,2,X,X,3,4,X,X,5,X,X（X表示节点为null），并且重新反序列化为二叉树即可。…"}, {"id": "6909739032649924616", "title": "【一天一大 lee】分发糖果 (难度:困难) - Day20201224", "desc": "老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。 每个孩子至少分配到 1 个糖果。 相邻的孩子中，评分高的孩子必须获得更多的糖果。"}, {"id": "6844904115080806414", "title": "前端工程师的 LeetCode 之旅 -- 周赛 182", "desc": "在整数数组中，如果一个整数的出现频次和它的数值大小相等，我们就称这个整数为「幸运数」。 给你一个整数数组 arr，请你从中找出并返回一个幸运数。 如果数组中存在多个幸运数，只需返回 最大 的那个。 如果数组中不含幸运数，则返回 -1 。 解释：数组中的唯一幸运数是 2，因为数值…"}, {"id": "6934729042872500232", "title": "leetcode.977 有序数组的平方 [双指针]｜刷题打卡", "desc": "给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 若要求时间复杂度为O(n)，也就是只能遍历一次，那必须引入新的变量以空间换时间来完成题解。 注意给定我们的数组是从大到小排序完成的，也就是说数组中每一项平方后最大…"}, {"id": "6944614802593415182", "title": "20210328 LeetCode 每日一题（二叉搜索树迭代器）", "desc": "实现一个二叉搜索树迭代器类 BSTIterator，表示一个按中序遍历二叉搜索树（BST）的迭代器，需包含 hasNext() 方法（返回下一个结点的值）、hasNext()方法（返回是否已遍历完整棵树）。 进阶要求：next() 和 hasNext() 操作均摊时间复杂度为 …"}, {"id": "6844904101021499399", "title": "前端工程师的 LeetCode 之旅 - 夜喵专场（22）", "desc": "给你两个整数数组 arr1 ， arr2 和一个整数 d ，请你返回两个数组之间的 距离值 。 「距离值」 定义为符合此描述的元素数目：对于元素 arr1[i] ，不存在任何元素 arr2[j] 满足 |arr1[i]-arr2[j]| <= d 。 本道题主要考察数组的基本循…"}, {"id": "6893756185690767367", "title": "【一天一大 lee】自由之路 (难度:困难) - Day20201111", "desc": "视频游戏“辐射4”中，任务“通向自由”要求玩家到达名为“Freedom Trail Ring”的金属表盘，并使用表盘拼写特定关键词才能开门。 给定一个字符串 ring，表示刻在外环上的编码；给定另一个字符串 key，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的最少…"}, {"id": "6892761132789366791", "title": "LeetCode题解：77. 组合，回溯+for循环，JavaScript，详细注释", "desc": "该解法参考了46. 全排列的解法LeetCode题解：46. 全排列，回溯，JavaScript，详细注释。 使用DFS生成所有可能的排列情况。 需要使用used数组，标识每个值是否被使用过，同时used的index即为需要排列的数字。 由于subResult和used变量会在…"}, {"id": "6894126976257228813", "title": "1380. 矩阵中的幸运数", "desc": "给你一个 m * n 的矩阵，矩阵中的数字各不相同。请你按任意顺序返回矩阵中的所有幸运数。"}, {"id": "6939163562598203422", "title": "再谈买卖股票的最佳时机|刷题打卡", "desc": "给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。 返回你可以从这笔交易中获取的最大利润。如果你不能获…"}, {"id": "6963196911717187597", "title": "剑指Offer——正则表达式匹配（JS实现）", "desc": "题目描述 解题思路（数学规律） 本题的主流解法包括两种，主要是递归回溯与动态规划，鉴于动态规划不易理解，本文采用递归回溯的方法进行讲解，步骤如下： 1. 判断p字符串是否为空，如果为空则继续判断字符串"}, {"id": "6986912802958999559", "title": "LeetCode 26 Remove Duplicates from Sorted Array (Tag:Array Difficulty:Easy)", "desc": "题目描述 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额"}, {"id": "6913789829570363406", "title": "综合利用各种数据结构", "desc": "448. 找到所有数组中消失的数字 给定一个范围在 1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。 找到所有在 [1, n] 范围之间没有出现在数组中的数字。 48. 旋转图像 给定一个 n × n 的二维矩阵表…"}, {"id": "6935062920301084702", "title": "15. 三数之和｜刷题打卡", "desc": "给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。 刷题打卡第二天，打工人加油。。。"}, {"id": "6934925728718946334", "title": "122. 买卖股票的最佳时机 II｜刷题打卡", "desc": "首先在拿到题，读完没有任何思路。先跟昨天的题对比一下，昨天的股票问题在一个数组内求一个区间的最大值，而本题是求在一个数组内不限定区间个数（区间不能交叉）的和的最大值。 怎么穷举？循环，递归，这两种都不太适合。 思路一：利用“状态”进行穷举，具体到每一天，看看总共有几种可能的“状…"}, {"id": "6913926360965513223", "title": "leetcode 每日打卡 最大人工岛", "desc": "827. 最大人工岛"}, {"id": "6909000886089941006", "title": "LeetCode题解：55. 跳跃游戏，贪心，JavaScript，详细注释", "desc": "该题其实并不需要真正模拟跳跃，而是要知道从第一点开始跳，最远可以达到的索引是多少。 从索引0最多可以跳到2(0+2)，那么0~2都在可到达的范围内。 从索引1最多可到达4(1+3)，即可以到达最后位置。 从索引0最多可以跳到3(0+3)，那么0~3都在可达到的范围内。 从1最多…"}, {"id": "6937942118807633950", "title": "Leetcode18 四数之和 | 刷题打卡", "desc": "给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。 注意：答案中不可以包含重复的四元组。 看到这题，第一…"}, {"id": "6951565063668891685", "title": "剑指Offer——II.平衡二叉树（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路这道题属于二叉树考查深度的问题本题的核心在于知道二叉树的深度怎么求：二叉树的深度 = 左子树的深度与右子树的深度中的最大值 "}, {"id": "6971052667913273351", "title": "🌈JSer LeetCode Trip: 206. Reverse Linked List", "desc": "PRE 这是我参与更文挑战的第7天，活动详情查看： 更文挑战 206. Reverse Linked List Given the head of a singly linked list, reve"}, {"id": "6882599287889330189", "title": "【一天一大 lee】二叉搜索树的最小绝对差 (难度:简单) - Day20201012", "desc": "给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。 树中至少有 2 个节点。"}, {"id": "6913806997800517645", "title": "LeetCode题解：264. 丑数 II，三指针，JavaScript，详细注释", "desc": "参考了详细通俗的思路分析，多解法中的解法三。 1, 1×2, 1×3, 2×2, 1×5, 2×3, 2×4, 3×3, 3×4, 3×5... 我们可以注意到，被乘数的规律和丑数是一样的。 我们可以使用三个指针，分别表示上面三组的被乘数在丑数序列中的位置，也就知道了它当前所需…"}, {"id": "6951223553966637092", "title": "剑指Offer——从上到下打印二叉树III（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路这道题属于二叉树的层次遍历问题首先定义三个数组数组queue用来存放当前层的所有元素指针数组temp充当临时数组，用来存放当"}, {"id": "6937973288077361166", "title": "Leetcode125 验证回文串 | 刷题打卡", "desc": "给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 判断是否是回文串，就相当于该字符串从中间分开的左右两边是不是相等的，可以理解成该字符串是不是关于中心对称的。既然涉及到了左右两边，那么第一想到的应…"}, {"id": "6844903879826489358", "title": "LeetCode偶尔一题 —— 39. Combination Sum（回溯算法系列）", "desc": "大意：给定一组不含重复数字的数组和一个目标数字，在数组中找出所有数加起来等于给定的目标数字的组合。 由于我们需要找到多个组合，简单的使用 for 循环肯定是不行的，这时候我们可以使用回溯算法来解决这个问题。 针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。 确定…"}, {"id": "6904589395987267592", "title": "LeetCode题解：515. 在每个树行中找最大值，BFS，JavaScript，详细注释", "desc": "该题可以使用BFS，逐层遍历二叉树。 使用队列进行遍历，队列中按顺序存储了每一层的节点。 每次循环时，将队列中当前层的节点依次取出，即可在这次循环中，通过不断对比，获取到当前层的最大值。 同时，将当前层每个节点的子节点，依次存入队列尾部，等待下一次遍历处理。 不断重复步骤3、4…"}, {"id": "6844903842287452173", "title": "leetcode第一题，两数之和(Two Sum)，JavaScript实现", "desc": "好好学习，天天向上。不会算法和数据结构的前端不是一个好前端，为了能够让自己的能力得到更多的提升，小弟开始入坑了leetcode的刷题之旅，为日后升职加薪或者跳槽提供更多的能力基础。 闲话少说，开始leetcode的第一题，在讲第一题之前，先了解一下该题。 该题的题目描述是在一个…"}, {"id": "6949099251569786887", "title": "剑指Offer——调整数组顺序使奇数位于偶数前面（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路使用两个数组分别用来存储奇数和偶数使用for循环遍历输入数组的每一个元素当目标元素对2取余为0，说明该元素为偶数，偶数则加入"}, {"id": "6936164728246911007", "title": "[leetcode: 912. 排序数组 (快排思想)] | 刷题打卡", "desc": "快速排序是由东尼·霍尔所发展的一种排序算法。其基本思想是，通过一趟排序将待排区间分隔成独立的两部分，然后分别对这两部分继续进行排序，以达到整个序列有序。 主要是为了让第二步将数组分成俩部分的代码更好实现, 使用do, while的结构会先让i++, 以及j--. i指针的作用是…"}, {"id": "6885336217030754317", "title": "LeetCode 热题 HOT 100 3. 无重复字符的最长子串", "desc": "滑动窗口是字符串或者数组中常见的一种抽象概念，窗口指的是在数组或者字符串中由开始索引、结束索引所组成的一系列元素的集合([l, r) 左闭右开)。而滑动指的是窗口的边界l 、r可以左右移动。比如如果窗口往右移动1位，则变成[l+1, r+1)。 这个case最坏情况时间复杂度是…"}, {"id": "6948417083923234823", "title": "剑指Offer——圆圈中最后剩下的数字（JS实现） ｜刷题打卡", "desc": "本题属于一种数学题。 关键点在于明确什么是约瑟夫环，以及删除第m个元素的下标是多少。"}, {"id": "6994430057244246023", "title": "LeetCode 48 Rotate Image (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6981669301665136653", "title": "LeetCode第160题:相交链表", "desc": "题干 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。 图示两个链表在节点 c1 开始相交： 题目数据 保证 整个"}, {"id": "6844904117563834382", "title": "前端工程师的 LeetCode 之旅 -- 周赛 183", "desc": "给你一个数组 nums，请你从中抽取一个子序列，满足该子序列的元素之和 严格 大于未包含在该子序列中的各元素之和。 如果存在多个解决方案，只需返回 长度最小 的子序列。如果仍然有多个解决方案，则返回 元素之和最大 的子序列。 与子数组不同的地方在于，「数组的子序列」不强调元素在…"}, {"id": "6997770553918488590", "title": "「前端刷题」17. 电话号码的字母组合", "desc": "给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键"}, {"id": "6969858963969933320", "title": "LeetCode精选Top面试题之合并两个有序链表", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 数据结构中的链表还是很重要的，所以本次学习一下链表，做一下总结"}, {"id": "6987300568045715464", "title": "LeetCode 36 Valid Sudoku (Tag:Array Difficulty:Medium)", "desc": "前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉得有帮助的话，记得多多点赞关注哦，感谢！ 题目描述 请你判断"}, {"id": "6986916547348398094", "title": "LeetCode 27 Remove Element (Tag:Array Difficulty:Easy)", "desc": "题目描述 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输"}, {"id": "6991488113667211300", "title": "leetcode刷题-双指针", "desc": "双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。 1. 两数之和 II - 输入有序数组 题目 给定一个已按照 升序排列 的整数数组 numbers ，请你从数组中找出两个数满足相加"}, {"id": "6971442842744913957", "title": "LeetCode 对链表进行插入排序/排序链表（归并）[排序]", "desc": "这是我参与更文挑战的第 8 天，活动详情查看： 更文挑战 对链表进行插入排序（147） 题目描述 从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。每次迭代时，从输入数据中移除一个元素（用"}, {"id": "6936457471934332935", "title": " Leetcode53 最大子序和｜刷题打卡01", "desc": "大三上学期准备转行，可我一直到下学期才开始刷算法，以及准备软件方面的竞赛。在学习过程中，我能明显的感受到和其他人的差距，可能是题目做少了吧。。。所以今天开始第一篇刷题打卡！ 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 …"}, {"id": "6844903880740847629", "title": "前端工程师的 LeetCode 之旅 -- 双指针技巧 Easy 篇", "desc": "LeetCode 双指针使用技巧以及重点题型分析。"}, {"id": "6973114262759669790", "title": "LeetCode第153题：寻找旋转排序数组中的最小值", "desc": "题干 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以"}, {"id": "6844903709537746957", "title": "详解leetcode146题【LRU (最近最少使用) 缓存机制】(附js最优解法！)", "desc": "leetcode 146. LRU (最近最少使用) 缓存机制 从以上分析，要想找到缓存末尾的值，我想到两个办法。 执行get的时候，如果缓存中存在get的数据，则更新缓存顺序，跟以上一样。 以上，是我第一感觉的做法。为什么说是第一感觉，首先，题目要求O(1)的复杂度，所以我不…"}, {"id": "6979890941821714469", "title": "LeetCode 15 3Sum(Tag: Array Difficulty:Medium)", "desc": "题目描述 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意：答案中不可以包"}, {"id": "6906377225814147085", "title": "【leetcode】第 219 场周赛-20201213", "desc": "给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制： 如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。 如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行…"}, {"id": "6939167227748810783", "title": "力扣 (LeetCode)-14. 最长公共前缀｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 力扣 (LeetCode)-104. 二叉树的最大深度，图｜刷题打卡-3月12号 14. 最长公共前缀 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 \"\"。"}, {"id": "6979222981700485150", "title": "LeetCode 11 Container With Most Water(Tag: Array Difficulty: Hard)", "desc": "题目描述 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其"}, {"id": "6844904096550354951", "title": "前端工程师的 LeetCode 之旅 -- 180周赛", "desc": "给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。 解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。 本题主要考察数组的基本操作，两重循环暴力求解。 请你设计一个支持下述操作的栈。 CustomSta…"}, {"id": "6952132760001576967", "title": "1281. 整数的各位积和之差 | 刷题打卡", "desc": "本文正在参与掘金团队号上线活动，点击 查看大厂春招职位一、题目描述本题来自1281. 整数的各位积和之差二、思路分析n分解成每一位，转化成数字，累加、累乘。三、AC代码我这有5中解法，依次是：1.re"}, {"id": "6844904086827958280", "title": "前端工程师的 LeetCode 之旅 -- 174周赛", "desc": "给你一个大小为 m * n 的方阵 mat，方阵由若干军人和平民组成，分别用 0 和 1 表示。 请你返回方阵中战斗力最弱的 k 行的索引，按从最弱到最强排序。 如果第 i 行的军人数量少于第 j 行，或者两行军人数量相同但是 i 小于 j ，那么我们认为第 i 行的战斗力比第…"}, {"id": "6996287501740539940", "title": "LeetCode 56 Merge Intervals (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6999191683019571231", "title": "LeetCode-303. 区域和检索 - 数组不可变(JavaScript)", "desc": "解法： 这里我们采用 前缀和 的解法 啥是前缀和？ 前缀和就是我们需要新建一个数组，叫 preNums preNums[i] 代表着数组 nums 从 0 到 i-1 的值的和 preNums 在初始"}, {"id": "6993211921230987300", "title": "javascript 实现 最长公共前缀和最大子序和", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 之前参加了沸点的每日算法题的活动，这是其中的两道题在此记录一下。（难度：简单） 最长公共前缀 题目描述： 编写一个函数来查找字符串数组中的最"}, {"id": "6982746312764555271", "title": "HOT100——下一个排列（JS实现）", "desc": "题目描述 解题思路 解题代码 启示 学会使用sorted、splice、slice等常用API。 学会引入第三方变量来辅助我们的思路。"}, {"id": "6995579120444768269", "title": "「前端刷题」13. 罗马数字转整数", "desc": "罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 字符 数值 I 1 V 5 X 10 L 50 C 100 D"}, {"id": "6989842324482162719", "title": "LeetCode题解：456. 132 模式，n平方暴力，JavaScript，详细注释", "desc": "原题链接：456. 132 模式，https://leetcode-cn.com/problems/132-pattern/"}, {"id": "6989867285569765390", "title": "LeetCode刷题，函数的独占时间（636）", "desc": "可以用栈进行记录每一个编号id，start入栈，end出栈，获取区间值，使用下一个节点 减去前一个节点的起始点就是前半段区间，后半段区间使用前一个节点结束点范围减去当前点节点结束位置"}, {"id": "6924144947885146125", "title": "🌲有关树遍历的javascript实现【前端-总结-leetcode算法题】", "desc": "二月的第一天，总结一下近段时间刷的有关树遍历的leetcode算法题，希望写完这篇文章的我和看完文章的你都有些收获吧。全篇主要讲的是有关树的遍历，使用前端javascript语言实现。当然有关树的操作还有很多需要的深入理解和总结的。今天就暂时先把树遍历理解全吧。🧐🧐 树是一…"}, {"id": "6991778147683270664", "title": "javascript版数据结构之链表（附：leetCode 2、206、83）", "desc": "1、概念   链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点"}, {"id": "6978464675428040734", "title": "前端从零开始刷leetCode-持续更新", "desc": "场景 很多人会说刷题是为了面试这是结果导向型的没毛病。 更多时候我们要明白为什么要考算法，核心考点是什么？ 我自己作为面试官考算法有哪些考核点 对应异常情况以及边界值的考虑 算法的执行效率，算法之所以"}, {"id": "6989108331675648030", "title": "LeetCode刷题，验证二叉树的前序序列化（331）", "desc": "验证二叉树的前序序列化 序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #"}, {"id": "6997795551597199391", "title": "前端必刷手写题系列 [19]", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 28. 各类继承方式的手写(下) 问题是什么 继承是 OOP (面向对象编程)(Object-oriented programming) "}, {"id": "6972817883298529310", "title": "LeetCode精选Top面试题之将有序数组转换为二叉搜索树", "desc": "这是我参与更文挑战的第8天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 今天继续学习LeetCode精选面试题。"}, {"id": "6969407602362941453", "title": "LeetCode精选Top面试题之反转链表", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 数据结构中的链表还是很重要的，所以本次学习一下链表，做一下总结，"}, {"id": "6999657304190615583", "title": "leetcode刷题-二分查找&分治", "desc": "leetcode刷题-二分查找&分治 1、在一个重复元素的数组中查找key的最左位置 2、x 的平方根 实现 int sqrt(int x) 函数。 计算并返回 x 的平方根，其中 x 是非负整数。 "}, {"id": "6994419483339309069", "title": "前端Leetcode系列｜14. 最长公共前缀", "desc": "这是力扣系列第2篇，今天来和小伙伴们一起打卡力扣第14题：最长公共前缀。 一、题目描述 编写一个函数来查找字符串数组中的最长公共前缀。 如"}, {"id": "6992433638721716237", "title": "LeetCode题解：173. 二叉搜索树迭代器，栈，JavaScript，详细注释", "desc": "原题链接：173. 二叉搜索树迭代器，https://leetcode-cn.com/problems/binary-search-tree-iterator/"}, {"id": "6992220680284700679", "title": "LeetCode 40 Combination Sum II (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。觉"}, {"id": "6989264400683106311", "title": "LeetCode算法学习之--链表--K个组翻转链表", "desc": "大家好今天给大家分享下一道 LeetCode 困难难度 的题目[K 个一组翻转链表](https://leetcode-cn.com/problems/linked-list-cycle-ii/) 题"}, {"id": "6996552925145202695", "title": "算法（leetode，附思维导图 + 全部解法）300题之（11）盛最多水的容器", "desc": "零 标题：算法（leetode，附思维导图 + 全部解法）300题之（11）盛最多水的容器 导读： 一 题目描述 二 解法总览（思维导图） 三 全部解法 1 方案1 1)代码： 2 方案2 1)代码："}, {"id": "6988811442245861407", "title": "leetcode笔记 | 704二分查找 278第一个错误的版本 35搜索插入位置（JavaScript）", "desc": "之前的思路中，mid固定不变，没有参与循环，实际上只实现了一次二分。于是定义数组下标左右端点l、r，采用求l、r平均值的方式确定mid，mid可以随l、r的变化而改变。"}, {"id": "7001680845610156069", "title": "「每日一题」所有奇数长度子数组的和", "desc": "1. 题目描述 给你一个正整数数组arr，请你计算所有可能的奇数长度子数组的和。 子数组定义为原数组中的一个连续子序列。 请你返回arr中所有奇数长度子数组的和 。 示例 1： 示例 2： 2. 解答"}, {"id": "7000191611300741150", "title": "LeetCode 448.找到所有数组中消失的数字】 - JavaScript(哈希表+原地哈希)", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 【LeetCode 448.找到所有数组中消失的数字】 - JavaScript(哈希表+原地哈希) 题目描述 题目分析 这一题和Leet"}, {"id": "7007222153707782181", "title": "leetcode 146.LRU 缓存机制 | 刷题打卡", "desc": "题目链接 哈希表加双链表 思路 其实这道题主要是考察数据结构的使用，为保证存和取的时间复杂度为O(1)，需要用到哈希表和双链表。如果你对这两种数据结构的特性都很熟悉，那不难想到： 使用哈希表存储值，可"}, {"id": "7005095832626135053", "title": "LeetCode——LRU 缓存机制（借助Map）", "desc": "题目描述 解题思路 1: 初始化构造函数 2：实现get方法 判断map中是都有目标key。 没有则返回-1 有，则保存对应的值，然后删除键值对，重新存，然后返回对应的值。这里之所以要进行重新存储，是"}, {"id": "7002411370238967845", "title": "「每日一题」航班预订统计", "desc": "1. 题目描述 这里有n个航班，它们分别从1到n进行编号。 有一份航班预订表bookings，表中第i条预订记录bookings[i] = [firsti, lasti, seatsi]意味着在从fi"}, {"id": "7002780759794647077", "title": "Leetcode165.比较版本号", "desc": "每日leetcode之165比较版本号。列了三种解题方法，双指针一次遍历、atoi函数、stringstream。欢迎怒赞或吐槽之"}, {"id": "7003507230481842213", "title": "「每日一题」最小K个数", "desc": "1. 题目描述 设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。 示例： 2. 解答 1. 排序 2. 堆排序 😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C+"}, {"id": "7006180329983574029", "title": "leetcode 821.字符的最短距离 | 刷题打卡", "desc": "题目链接 双向遍历 基本概念 思路 只遍历一次是不能解决问题的，当从左到右遍历时，只能算出当前字符距离左侧目标字符的距离，不知道右侧的，无法比较取最小值。所以需要遍历两次，一次正向遍历，一次反向遍历。"}, {"id": "7007298481538727966", "title": "学算法刷LeetCode：二叉树的遍历和重建（一）", "desc": "简述二叉树 二叉树是每个节点最多两个分支的树形结构。遍历方式可以从上向下逐层遍历，先访问离根最近的节点，称为广度优先遍历，也可以从根节点开始，向最远的节点遍历，称为深度优先遍历，此外，再根据根节点的访"}, {"id": "7007332462367866916", "title": "学算法刷LeetCode【剑指offer专题】：07.重建二叉树", "desc": "题目描述 解题思路 复习二叉树的前序遍历和中序遍历 学算法刷LeetCode：二叉树的遍历和重建（一） 分析 我们知道，二叉树的前序遍历是先遍历根，再遍历左右子树，因此第一个节点就是根节点。我们的子问"}, {"id": "7003709338996965413", "title": "LeetCode第13天🐱‍🏍", "desc": "面试题 17.14. 最小K个数 排序 slice返回一个新的数组 快排 设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。"}, {"id": "7004990223503327262", "title": "LeetCode题解：897. 递增顺序搜索树，栈，JavaScript，详细注释", "desc": "原题链接：897. 递增顺序搜索树，https://leetcode-cn.com/problems/increasing-order-search-tree/"}, {"id": "7002795498646175752", "title": "LeetCode第11天🐱‍🏍", "desc": "165. 比较版本号 切割版本号进行比较 优化空间复杂度 给你两个版本号 version1 和 version2 ，请你比较它们。"}, {"id": "7003588464931241997", "title": "Villay的Leetcode刷题记录", "desc": "单词长度得最大乘积 给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时， 它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不"}, {"id": "6997927996099133454", "title": "LeetCode 102.二叉树的层次遍历 - JavaScript", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 LeetCode 102.二叉树的层次遍历 - JavaScript 题目描述 给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从"}, {"id": "7000756662613049380", "title": "LeetCode第5天🐱‍🏍", "desc": "881. 救生艇 题目限制每条船只能载两个人，所以可以贪心。对people进行排序，将最瘦的和最胖的组合，与limit进行比较"}, {"id": "6983847493985370142", "title": "用 JavaScript 刷 LeetCode 的正确姿势【进阶】", "desc": "最近总结了些数据结构和算法，希望能对各为 JSer 刷题提供帮助。 此篇文章主要想给大家一些开箱即用的 JavaScipt 版本的代码模板。"}, {"id": "6999566031203074062", "title": "LeetCode49-最大子序和 | 算法练习系列", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 前言 今天来一道处理数组的算法题，求数组中的最大子序和，何为最大子序和，也就是数组中各个子数组的和的最大值，这是我们可以把子数组一一列举出"}, {"id": "7005488399461122079", "title": "学算法刷LeetCode【剑指offer专题】：52. 两个链表的第一个公共节点", "desc": "题目描述 52. 两个链表的第一个公共节点 解题思路 思路一： 前后双指针（数节点） 前后双指针其实指的是一个指针先走 n 步，另一个指针再与前一个指针以相同的速度走。用到这个思路的还有 学算法刷Le"}, {"id": "6983641499229487135", "title": "前端百题斩【027】——解决跨域的常用利器CORS全解", "desc": "根据同源策略，浏览器默认是不允许XMLHttpRequest对象访问非同一站点的资源的，这会大大制约生产力，所以需要有一种机制允许跨域访问资源，然后我们的主角CORS（跨域资源共享）就出现了。"}, {"id": "6844903895949377543", "title": "leetcode基础算法（有效括号）", "desc": "要解决的问题？\"()[]{()}\"=>ture\"([)]\"=>false思路建立字符匹配map；循环数组通过map比较前后两者关系；两者关系也许相等两者关系也许是多层嵌套所以不相等，需要缓存起来后面再"}, {"id": "6844903950194311175", "title": "LeetCode偶尔一题 —— 430. 扁平化多级双向链表", "desc": "遇到问题我们首先要先搞清楚问题到底是什么，然后再想办法解决。对于 链表 的问题其实大部分都不算难，写代码之前最好动动笔在纸上画一下，思路便会清晰很多。 显然，我们需要递归处理 子链表，再把它跟 父链表 拼接在一起。 当然这里有个需要注意的地方，next 、 prev 和 chi…"}, {"id": "6901870863222734856", "title": "【一天一大 lee】计数质数 (难度:简单) - Day20201203", "desc": "统计所有小于非负整数 n 的质数的数量。"}, {"id": "6913150922805755917", "title": "（递归解法、一次玩转递归）24.两两交换链表中的节点", "desc": "题面：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。"}, {"id": "6844904082595905543", "title": "我用JS刷LeetCode | Day 2 | Reverse Integer", "desc": "Given a 32-bit signed integer, reverse digits of an integer. Assume we are dealing with an environment which could only store integers with…"}, {"id": "6878217630994890760", "title": "【一天一大 lee】二叉搜索树中的插入操作 (难度:中等) - Day20200930", "desc": "给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。 注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。 不打断原有子树…"}, {"id": "6937671805112942606", "title": "61.旋转链表｜刷题打卡", "desc": "给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。 如果要旋转得先构造成一个环，然后再找到新的头节点再断开这个环。 举例 1->2->3->4->5 移动 k = 1 位，结果为 5->1->2->3->4。 构成一个环的办法，循环链表获取未节点指…"}, {"id": "6877023802832715790", "title": "leetcode--打印从1到最大的n位数", "desc": "输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。 mapFn（可选）：如果指定了该参数，新数组中的每个元素会执行该回调函数。回调函数接收两个参数，第一个value:数组值，index数组下标。如果m…"}, {"id": "6844904198664880142", "title": " 【一天一大 lee】最接近的三数之和 (难度:中等) - Day20200624", "desc": "给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。"}, {"id": "6899675635401097230", "title": "【一天一大 lee】四数相加 II (难度:中等) - Day20201127", "desc": "给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数…"}, {"id": "6936410203466235911", "title": "日常刷题0x10之未出新手村", "desc": "如果不小心网友来到了这里请网友自动飘走，浪费你们时间表示歉意。该系列博客的目的是：想作为自律工具和朋友一起每天刷几道题作为打卡督促的功能，没有什么可参考学习的东西，也不是刷博客量充大佬的目的"}, {"id": "6936104080741761037", "title": "JS链表-力扣206反转链表｜刷题打卡", "desc": "反转一个单链表。 迭代思路很简单，就是从头往后逐个节点翻转链表。 每遍历到一个节点，就将该节点从链表中断开，让这个节点指针指向已反转部分链表。 这个题，也是一个力扣上的简单题，但是链表的递归还是有点绕的，但递归本质没变，还是从最终的界限开始计算的，也就是从后往前来翻转链表。"}, {"id": "6936061919925108743", "title": "71.简化路径｜刷题打卡", "desc": "以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。Linux/Unix 中的绝对路径 vs 相对路径 请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外…"}, {"id": "6844903881885876238", "title": "前端工程师的 LeetCode 之旅 -- KMP 字符串匹配算法（修正版）", "desc": "修正上一篇中错误的部分匹配表算法的代码实现（感谢网友@sea_ljf及时指正），很抱歉给大家传递了一个错误信息，希望被误导的同学能够看到此篇文章，ε=ε=ε=┏(゜ロ゜;)┛。"}, {"id": "6884813225548857351", "title": "【一天一大 lee】删除链表的倒数第N个节点 (难度:中等) - Day20201018", "desc": "给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 给定的 n 保证是有效的。"}, {"id": "6898143934116003853", "title": "【一天一大 lee】最少数量的箭引爆气球 (难度:中等) - Day20201123", "desc": "在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。 由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。 一支弓箭可以沿着 x 轴从不同点完全垂直地射出。 在坐标 x 处射出一支箭，若…"}, {"id": "6844903877599297544", "title": "前端工程师的 LeetCode 之旅 -- 二分搜索 Medium 篇（上）", "desc": "LeetCode 二分搜索算法专题 Medium 题型讲解。"}, {"id": "6948064626776997924", "title": "5.最长回文子串｜刷题打卡", "desc": "给你一个字符串 s，找到 s 中最长的回文子串。 aba 中心点是 b。 palindromeStr(s, i, i) aa 中心点是两个a中间。 palindromeStr(s, i, i+1) 两种方案得到的字符串与最开始 str 比较，把最长的字符串赋值给 str。这样s…"}, {"id": "6948423783682146317", "title": "6. Z 字形变换 ｜刷题打卡", "desc": "将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。比如输入字符串为 \"PAYPALISHIRING\" 行数为 3 时，排列如下： 题目地址： 6. Z 字形变换 如果 numRows 为 1 时 就是原字符串，直接返回即可。 下面的…"}, {"id": "6919765808210477070", "title": "LeetCode题解：105. 从前序与中序遍历序列构造二叉树，递归+哈希表，JavaScript，详细注释", "desc": "参考了多种解法，逐渐优化（补充国外大佬解法）和动画演示 105. 从前序与中序遍历序列构造二叉树。 每次递归用preorder[preLeft]的值生成一个根节点。 在通过preorder[preLeft]找到其在inorder中的位置rootIndex，计算出子树的前中序遍历…"}, {"id": "6919121708058148877", "title": "我的js算法爬坑之旅-账户合并", "desc": "第一百零二天：力扣721题，账户合并地址：https://leetcode-cn.com/problems/accounts-merge/思路：并查集+去重执行用时：740ms,在所有JavaScri"}, {"id": "6936159879547584526", "title": "[LeetCode 140. 单词拆分 II] | 刷题打卡", "desc": "给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。 分隔时可以重复使用字典中的单词。 你可以假设字典中没有重复的单词。 简单介绍一下, 这题做了两次(一次是刷题过程中…"}, {"id": "6855129007370403848", "title": "LeetCode题解：189. 旋转数组，JavaScript，暴力法，详细注释", "desc": "该题实际上是要求将数组的最后k位，移动到数组的前面。 假设输入: [1,2,3,4,5,6,7] 和 k = 3。 暴力法的第一层循环，每次会取出数组的最后一位。 第二层循环完成了将数组最后一位，移动到数组第一位的过程。"}, {"id": "6844903886138900494", "title": "前端工程师的 LeetCode 之旅 -- 双指针技巧 Medium 篇（滑动窗口算法）", "desc": "滑动窗口算法相关题型的整理以及解题思路的讲解。"}, {"id": "6909265112918392839", "title": "【一天一大 lee】字符串中的第一个唯一字符 (难度:简单) - Day20201223", "desc": "给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。"}, {"id": "6901554903307517960", "title": "【一天一大 lee】拼接最大数 (难度:困难) - Day20201202", "desc": "给定长度分别为 m 和 n 的两个数组，其元素由 0-9 构成，表示两个自然数各位上的数字。现在从这两个数组中选出 k (k &#x3C;= m + n) 个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。 求满足该条件的最大数。结果返回一个表示该…"}, {"id": "6917122315834621960", "title": "我的js算法爬坑之旅- 最长不含重复字符的子字符串", "desc": "第九十七天：剑指offer48题，最长不含重复字符的子字符串地址：https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de"}, {"id": "6902032811428708365", "title": "LeetCode题解：51. N 皇后，回溯+哈希表，JavaScript，详细注释", "desc": "皇后可以攻击同行、同列，以及两个斜边上的所有棋子。 要找到n个皇后，其实就是要在每一行上找到一个皇后，并且所有皇后之间都无法互相攻击。 逐行遍历棋盘，在每一行取一个位置放皇后，将其可攻击的列和斜边信息保存到Set中。 然后查看她是否会和已在棋盘的皇后互相攻击，查看方式就是看她的…"}, {"id": "6870513001280536589", "title": "一天一大 lee(二叉树的层次遍历 II)难度:简单-Day20200906", "desc": "给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历） 可以发现其实广度优先搜索的逻辑更符合本题要要求。"}, {"id": "6881550822136791054", "title": "【一天一大 lee】两数相加 (难度:中等) - Day20201004", "desc": "给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。"}, {"id": "6903504883249315847", "title": "【一天一大 lee】分割数组为连续子序列 (难度:中等) - Day20201204", "desc": "给你一个按升序排序的整数数组 num（可能包含重复数字），请你将它们分割成一个或多个子序列，其中每个子序列都由连续整数组成且长度至少为 3 。 如果可以完成上述分割，则返回 true ；否则，返回 false 。 从前到后遍历 nums，模拟分割子序列，对应遇到的任意元素，其可…"}, {"id": "6844903889188159496", "title": "前端工程师的 LeetCode 之旅 -- 二叉树 Medium 篇（DFS 与 BFS）", "desc": "DFS（深度优先搜索）和 BFS（广度优先搜索）在二叉树遍历中的应用。"}, {"id": "6884038983174193166", "title": "【一天一大 lee】有序数组的平方 (难度:简单) - Day20201016", "desc": "给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。 A 已按非递减顺序排序。"}, {"id": "6950857804148113415", "title": "剑指Offer——构建乘积数组（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路遇到这道题，我首先使用使用双指针，左右遍历遇到第i个元素则停止遍历，然后进行求乘积但是结果超时最终通过对称遍历的方式成功解决"}, {"id": "6844903918745583630", "title": "前端工程师的 LeetCode 之旅 -- 1145、二叉树着色游戏", "desc": "LeetCode 二叉树 Medium 题型"}, {"id": "6909016840354807816", "title": "【一天一大 lee】旋转图像 (难度:中等) - Day20201219", "desc": "给定一个 n × n 的二维矩阵表示一个图像。 将图像顺时针旋转 90 度。 你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。"}, {"id": "6902744214707109895", "title": "LeetCode题解：874. 模拟行走机器人，模拟情境，JavaScript，详细注释", "desc": "参考了图解【模拟行走机器人】。 需要计算的是机器人所有经过的路径点的最大欧式距离的平方。也就是说，如果当前命令是让机器人行走4，机器人会走过1、2、3、4，一共4个位置，每个位置都要计算。 欧式距离的平方，指的是当前坐标到原点(0,0)的距离的平方。 X轴使用数组directi…"}, {"id": "6949704949739552805", "title": "剑指Offer——股票的最大利润（JS实现） ｜刷题打卡", "desc": "前言掘金团队号上线，助你 Offer 临门！ 点击 查看详情题目描述解题思路首先定义一个数组用来存储当天之后股票的价格-今天的价格的最大值遍历每一个元素的同时，取出剩余元素使用JS自带的sort方法，"}, {"id": "6844903823224340487", "title": "我用JS刷LeetCode | Day 1 | Two Sum", "desc": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input wo…"}, {"id": "6938665812928659486", "title": "26. 删除排序数组中的重复项｜刷题打卡", "desc": "26. 删除排序数组中的重复项 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 有两个指针一个指针是写指针 index, 还…"}, {"id": "6844904137507733517", "title": "《剑指offer》 —— 链表中倒数第k个节点", "desc": "输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。 递归到链表结束，回溯到时候开始计数，直到 …"}, {"id": "6844904153970376711", "title": "《剑指offer》—— 合并两个排序的链表", "desc": "输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。 递归比较两个链表，逻辑同上。 搜索「tony老师的前端补习班」关注我的微信公众号，那么就可以第一时间收到我的最新文章。"}, {"id": "6850418115440967693", "title": "LeetCode题解：15. 三数之和，JavaScript双循环+HashMap，详细注释", "desc": "第一层循环用于生成target，target=0-nums[i]，相当于两数之和中的target。 第二层循环套用两数字和的一遍哈希表解法。 该题需要去重，去重的要点是对数组进行排序，排序后的每个数字都已经归类。利用这个特点，可以直接排除掉大于0的数字，因为3个大于0的数字相加…"}, {"id": "6900924383519817741", "title": "【一天一大 lee】重构字符串 (难度:中等) - Day20201130", "desc": "给定一个字符串 S，检查是否能重新排布其中的字母，使得两相邻的字符不同。 若可行，输出任意可行的结果。若不可行，返回空字符串。 S 只包含小写字母并且长度在[1, 500]区间内。 将所有字符规制到哈希表中，且记录每个字符出现的次数，然后当字符单个字符的间隔填充。 注意当重复次…"}, {"id": "6901093817697435656", "title": "【一天一大 lee】在排序数组中查找元素的第一个和最后一个位置 (难度:中等) - Day20201201", "desc": "给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 target，返回 [-1, -1]。"}, {"id": "6847902217408610312", "title": "一天一大 leet(通配符匹配)难度:困难-Day20200705", "desc": "给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。 两个字符串完全匹配才算匹配成功。 s 可能为空，且只包含从 a-z 的小写字母。 p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。"}, {"id": "6898905154695725069", "title": "【一天一大 lee】上升下降字符串 (难度:简单) - Day20201125", "desc": "从 s 中选出最小的字符，将它接在结果字符串的后面。 从 s 剩余字符中选出最小的字符，且该字符比上一个添加的字符大，将它接在结果字符串后面。 重复步骤 2 ，直到你没法从 s 中选择字符。 从 s 中选出最大的字符，将它接在结果字符串的后面。 从 s 剩余字符中选出最大 的字…"}, {"id": "6936455578508230670", "title": "141.环形链表｜刷题打卡", "desc": "给定一个链表，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不…"}, {"id": "6898535301258428423", "title": "【一天一大 lee】完全二叉树的节点个数 (难度:中等) - Day20201124", "desc": "给出一个完全二叉树，求出该树的节点个数。 在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。 若最底层为第 h 层，则该层包含 1~ 个节点。 在本题中按部就班的遍历二叉树是一定可以统计出所有二叉树节点的。"}, {"id": "6844903890505170952", "title": "前端工程师的 LeetCode 之旅 -- 二叉树 Medium 篇（根据遍历序列构造二叉树）", "desc": "LeetCode 二叉树 Medium 难度，经典题型总结与解析。"}, {"id": "6844903934310481927", "title": "LeetCode偶尔一题 —— 14. 最长公共前缀", "desc": "当然，这道题还有其他解法，比如二分法、分治法，官方题解 已经写得非常细致了，这里就不重复写了。 一直在 LeetCode 上刷题，之前还加入了组织，有兴趣加入一起学习的同学可以在下方留言或者关注我的微信公众号「tony老师的前端补习班」并在后台留言，可以进群跟大佬们一起学习。"}, {"id": "6896308763238613005", "title": "【一天一大 lee】加油站 (难度:中等) - Day20201118", "desc": "在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。 如果你可以绕环路行驶一周，则返回出发时加油站的编号…"}, {"id": "6844903518478794759", "title": "一起来刷 LeetCode :D", "desc": "前端也可以用 JS 刷 LeetCode 啦"}, {"id": "6936456009447637023", "title": "203.移除链表元素｜刷题打卡", "desc": "删除链表中等于给定值 val 的所有节点。 举例 1->2->6->3->4->5 要删除值为 2 的节点。 应该先判断 1 的下一个节点是不是 2。 如果是就让 1 的指针指向下一个节点（需要删除的）的下一个节点 1->2->6->3->4->5 => 1->6->3->4-…"}, {"id": "6900923480582127623", "title": "【一天一大 lee】三角形的最大周长 (难度:简单) - Day20201129", "desc": "给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。 如果不能形成任何面积不为零的三角形，返回 0。"}, {"id": "6890379768127193096", "title": "【一天一大 lee】O(1) 时间插入、删除和获取随机元素 - 允许重复 (难度:困难) - Day20201031", "desc": "设计一个支持在平均 时间复杂度 O(1) 下， 执行以下操作的数据结构。 注意: 允许出现重复元素。 insert(val)：向集合中插入元素 val。 remove(val)：当 val 存在时，从集合中移除一个 val。 getRandom：从现有集合中随机获取一个元素。每…"}, {"id": "6890383651058483214", "title": "【一天一大 lee】单词拆分 II (难度:困难) - Day20201101", "desc": "给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。 分隔时可以重复使用字典中的单词。 你可以假设字典中没有重复的单词。 参考单词拆分的逻辑，s这个增加字符求解，递归传…"}, {"id": "6899674895652192264", "title": "【一天一大 lee】最大间距 (难度:困难) - Day20201126", "desc": "给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。 如果数组元素个数小于 2，则返回 0。 你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。 请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。 将所有待比较数值（正整数）统一为同样的数…"}, {"id": "6949808609081425928", "title": "剑指 Offer 12. 矩阵中的路径", "desc": "给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。单词必须按照字母顺序，通过相邻的单元格内的字母构"}, {"id": "6844904071665549326", "title": "前端工程师的 LeetCode 之旅 - 177周赛", "desc": "LeetCode177周赛，本期主要涉及的知识点：日期转化、二叉树、递归和满满的数学知识。"}, {"id": "6912606054975504398", "title": "LeetCode题解：347. 前 K 个高频元素，二叉堆，JavaScript，详细注释", "desc": "该题可使用堆解决，利用了堆能够快速插入和取出元素，并始终能够按要求排序的特点。 创建一个大顶堆，元素按照出现的频次由大到小排序。 遍历数组，统计所有元素出现的频次。 将频次与元素一起存入堆中，所有元素都插入之后，都已按照要求排序。 从堆中取出k次堆顶元素并返回，每次取出后堆还会…"}, {"id": "6844903724838551559", "title": "【javascript实现】几道题目带你学习二叉搜索树", "desc": "二叉搜索树也叫二叉排序树，中序遍历二叉搜索树的结果就是一次递增的遍历。 二叉搜索树的每一个分支的根节点都是他的中间值。根据这个特征，用二分法来将有序数组转换为一颗二叉搜索树。 接下来我们验证下一棵树是否满足二叉搜索树。 思路就是，中序遍历如果满足递增的就行。 用一个max作为验…"}, {"id": "6911907921341349902", "title": "LeetCode题解：剑指 Offer 40. 最小的k个数，二叉堆，JavaScript，详细注释", "desc": "该题可使用堆解决，利用了堆能够快速插入和取出元素，并始终能够按要求排序的特点。 使用JavaScript实现一个二叉堆，并将数组元素依次存入堆中，之后再依次取出k个元素即可。"}, {"id": "6969515866178207751", "title": "HOT100——电话号码的字母组合（JS实现）", "desc": "题目描述 解题思路 本题采用的是DFS的解题思路。 本题的特点在于递归中有循环。 DFS函数接收两个参数，一个是当前字符串，一个是指针，当指针超过了digits的长度的时候，说明可以存储并返回了，然后"}, {"id": "6996668474319716365", "title": "LeetCode 57 Insert Interval (Tag:Array Difficulty:Medium)", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 前言 关于 LeetCode 数组类型题目的相关解法，可见LeetCode 数组类型题目做前必看，分类别解法总结了题目，可以用来单项提高。"}, {"id": "6923551562077831176", "title": "LeetCode题解：433. 最小基因变化，BFS+生成所有可能新基因再匹配，JavaScript，详细注释", "desc": "该题要求从bank中查找基因从start变化到end的最小次数。 基因每次只能变化一个字符。 变化的路径不是唯一的。 使用Set保存bank中的基因，如果其中的基因被使用过，则将其删除，可以避免重复选着。 使用队列进行遍历，队列中按顺序存储了每一层的元素。 每次循环时，将队列中…"}, {"id": "6844904196823580686", "title": "穿上衣服我就不认识你了？来聊聊最长上升子序列", "desc": "最长上升子序列是一个很经典的算法题。有的会直接让你求最长上升子序列，有的则会换个说法，但最终考察的还是最长上升子序列。那么问题来了，它穿上衣服你还看得出来是么？ 如果你完全看不出来了，说明抽象思维还不到火候。经常看我的题解的同学应该会知道，我经常强调抽象思维。没有抽象思维，所有…"}, {"id": "6930791057047158791", "title": "LeetCode题解：1143. 最长公共子序列，动态规划，JavaScript，详细注释", "desc": "图片来自：C++ with picture, O(nm)。 假设text1长度为m，索引为i。text2长度为n，索引为j。 公共子序列要判断每个字母是否相等，dp[i][j]的状态必须由dp[i - 1][j - 1]推导而来，因此我们可以创建一个(m + 1) * (n +…"}, {"id": "6938666758723239972", "title": "「LeetCode51」N皇后｜刷题打卡", "desc": "所谓皇后彼此不能相互攻击的意思是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。例如下面的排列： 之前有讲过如何应用回溯思路来解决全排列问题的，本题其实就是二维空间的全排列问题。解题框架是固定的： 虽然代码行数比较多，但是整体逻辑还是比较清晰的，就是行、列、左上右下、右上左…"}, {"id": "6937195449854099469", "title": "Leetcode 141 是否存在环型链表 | 刷题打卡", "desc": "给定一个链表，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不…"}, {"id": "6844903711290966030", "title": "函数式思维", "desc": "自从大四看了三章《SICP》之后我就自诩为一个函数式编程爱好者，之前也在公司分享过一个 Haskell 的 Topic，效果非常糟糕，讲到后来已经没剩几个人了，只得草草收场。在写这篇文章的时候我突然想起来，之前还发过一个朋友圈，跟人论述我对范畴论一些概念的理解，翻了翻朋友圈找到…"}, {"id": "6949145137884692510", "title": "20210409 LeetCode 每日一题（寻找旋转排序数组中的最小值 II）", "desc": "题目描述原题链接：寻找旋转排序数组中的最小值 II已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7]"}, {"id": "6955681873418780702", "title": "剑指Offer——二叉搜索树的后序遍历序列（JS实现）", "desc": "题目描述 解题思路 本题关键点在于：二叉搜索树的后序遍历序列的最后一个元素是根节点，左子树均小于根节点，右子树均大于根节点 使用递归是本题的解题方法 本题需要额外考虑的情况在于有的序列是没有右子树的，"}, {"id": "6908923156807811085", "title": "【LeetCode】70. 爬楼梯", "desc": "从本题中我们可以学到包含重复子问题，可以采用记忆化的方式，复用计算后的值；并用动态规划的思想，找到动态转移方程，采用循环实现。 以上4阶楼梯举例，选择最后上 1 阶到达，则为 1 + (1+1+1)阶，1 + (2+1)阶，1 + (1+2)阶，括号中的方法，正好是上 3 阶楼…"}, {"id": "6844904085154430984", "title": "我用JS刷LeetCode | Day 5 |  Valid Parentheses", "desc": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. Open brackets must b…"}, {"id": "6844904153970376717", "title": "《剑指offer》—— 求1+2+…+n", "desc": "然而题目中要求不能使用乘除法、for、while、if、else、switch、case 等关键字及条件判断语句（A ? B : C），那么前面两种解法自然就被我们排除掉了，只能用尾递归。 搜索「tony老师的前端补习班」关注我的微信公众号，那么就可以第一时间收到我的最新文章。"}, {"id": "6945465547496620062", "title": "20210330 LeetCode 每日一题（搜索二维矩阵）", "desc": "编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性： 每行中的整数从左到右按升序排列。 每行的第一个整数大于前一行的最后一个整数。 一般来讲题中一旦看到有序字眼，第一反应应该是想到二分查找。这里贴一个笔者常用的二分查找模板： 根据具体的题目要求…"}, {"id": "6865690302380769293", "title": "一天一大 lee(重新安排行程)难度:中等-Day20200827", "desc": "给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。 所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。 如果存在多种有效的行程，你可以按字符自然排序返回最…"}, {"id": "6946207274889117703", "title": "20210331 LeetCode 每日一题（笨阶乘）", "desc": "通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 _ 9 _ 8 _ 7 _ 6 _ 5 _ 4 _ 3 _ 2 * 1。 相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次…"}, {"id": "6946533850654703647", "title": "【算法】[困难]-直方图的水量-动态规划", "desc": "17.21. 直方图的水量 给定一个直方图(也称柱状图)，假设有人从上面源源不断地倒水，最后直方图能存多少水量?直方图的宽度为 1。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的直方图，在这种情况下，可以接 6 个单位的水（蓝色部分表示水）。 感谢 …"}, {"id": "6844903942078332941", "title": "我是如何刷 LeetCode 的？", "desc": "我就是那个 @量子位 答案里面提到的“lucifer 小哥哥”。 我本人从开始准备算法以来，大概经过了几个月的时间，这期间自己成长了很多，从刷题菜鸡，到现在对刷题套路，题型有了自己的理解，感受还是蛮多的。我本人不是算法高手，算是勤能补拙类型。不过经过几个月的学习和练习，不仅面试…"}, {"id": "6992605267003342885", "title": "【温故知新】`53. 最大子序和` 动态规划实现", "desc": "题目描述 解题思路 思路1：动态规划 时间复杂度O(n) 子数组至少包含一个元素；初始化ans为nums[0]; 遍历数组元素： 如果 sum > 0，则说明 sum 对结果有增益效果，则 sum 保"}, {"id": "6996296130917040165", "title": "JS算法之动态规划", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 圆圈中最后剩下的数字 0，1，...，n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后"}, {"id": "6968748633143394318", "title": "LeetCode344、反转字符串", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 前言 受“王鱼”同学的点拨，从今天开始刷LeetCode Top精选面试题，为冲击秋招做准备。"}, {"id": "6995832713592700965", "title": "前端算法必刷题系列[86]", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 158. 回文子串 (palindromic-substrings) 标签 动态规划 中等 题目 leetcode 传送门 给定一个字符串"}, {"id": "6966255059495550990", "title": "LeetCode20、括号匹配", "desc": "栈的前世今生 栈是什么： 是一个后进先出的数据结构 只能在一端（栈顶）增加和删除 push入栈、pop出栈"}, {"id": "6995193346096365575", "title": "前端常见算法题(动态规划篇)--上", "desc": "javascript 前端LeetCode刷题（动态规划篇上）：主要包含两大类型题目，即路径问题及股票问题"}, {"id": "6978425185489649695", "title": "LeetCode 1 Two Sum (Tag:Array  Difficulty:Easy)", "desc": "题目描述 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是"}, {"id": "6935568341322956830", "title": "力扣 (LeetCode)-最大子序和,JavaScript数据结构与算法（数组）｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 使用splice方法，通过指定位置或索引，就可以删除相应位置和数量的元素。 forEach，对数组中的每一项运行给定函数。这个方法没有返回值 reduce方法接收一个函数作为参数，这个函数有四个参数：previo…"}, {"id": "6935212632173445151", "title": "力扣 (LeetCode)-合并两个有序链表,删除排序数组中的重复项,JavaScript笔记｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 21. 合并两个有序链表 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 使用递归来解，将两个链表头部较小的一个与剩下的元素合并，并返回排好序的链表头，当两条链表…"}, {"id": "7002050195487735839", "title": " LeetCode入门指南 之 二叉树 ", "desc": "二叉树的遍历 递归： 数据结构和算法 前序非递归： 中序非递归： 后序非递归： 注意：如果非递归解法难以理解，可以先按照上面的代码结合案例手推一下。重要的还是要先形成模板并记忆，间隔着多做几次也就慢慢"}, {"id": "6844903504583081991", "title": "前端工程师必备十大网站", "desc": "纯干货！前端工程师必备网站，还不赶快收藏？"}, {"id": "6992029581498646564", "title": "3周攻克数据结构[数组篇-2] ｜8月更文挑战", "desc": "DAY3 1. 两个数组的交集 II 方法1：哈希表查询 方法2：双指针 2. 买卖股票的最佳时机 方法1：贪心算法 方法2：动态规划 科普篇 贪心算法：（Greedy Algorithm） 贪心算法"}, {"id": "6992901828400660517", "title": "LeetCode最长回文子串 | 算法练习系列", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 最长回文子串是非常经典的一道算法习题，难度还是有的，做之前一定充分考虑各种情况，要不然就会不断踩坑，特别是字符串有中心点和没中心点的情"}, {"id": "6844903604038402056", "title": "LeetCode 算法题刷题心得（JavaScript）", "desc": "花了十几天，把《算法》看了一遍。然后重新 AC 了一遍 LeetCode 的题并记录下心得。"}, {"id": "6995914574943748109", "title": "LeetCode算法学习之--Stack--接雨水", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 大家好今天给大家分享下一道 LeetCode 困难难度 的题目接雨水 题目 分析 解法一：stack 解法二：暴力法（无法通过 仅仅是提供"}, {"id": "6994042970831847437", "title": "完成LeetCode【螺旋矩阵Ⅱ】这道题之后，我尝试用HTML+CSS+JS动画来还原算法过程。", "desc": "完成LeetCode【螺旋矩阵Ⅱ】这道题之后，我尝试使用HTML+CSS+JS动画将算法过程可视化。"}, {"id": "6990612029463592967", "title": "LeetCode题解：61. 旋转链表，双指针，JavaScript，详细注释", "desc": "原题链接：61. 旋转链表，https://leetcode-cn.com/problems/rotate-list/"}, {"id": "6990918308207788045", "title": "LeetCode算法学习之--数组--旋转数组", "desc": "大家好今天给大家分享下一道 LeetCode 中等难度 的题目[旋转数组](https://leetcode-cn.com/problems/linked-list-cycle-ii/) 题目 分析 "}, {"id": "6983291250589827079", "title": "对操作符优先级和数据存储方式考察题", "desc": "对操作符优先级和数据存储方式考察 这个题目考察了两个知识点 不同数据类型在内存中的存储方式 运算符优先级问题"}, {"id": "6844903919680765966", "title": "LeetCode偶尔一题 —— 832. 翻转图像", "desc": "扫描下方的二维码或搜索「tony老师的前端补习班」关注我的微信公众号，那么就可以第一时间收到我的最新文章。"}, {"id": "6913033086770872328", "title": "我的js算法爬坑之旅-杨辉三角 II", "desc": "第八十七天：力扣119题，杨辉三角II地址：https://leetcode-cn.com/problems/pascals-triangle-ii/思路：杨辉三角取所需位置值执行用时：72ms,在所"}, {"id": "6936188382200463373", "title": "LeetCode题解：309. 最佳买卖股票时机含冷冻期，动态规划，JavaScript，详细注释｜刷题打卡", "desc": "原题链接：309. 最佳买卖股票时机含冷冻期 一共交易(prices.length天，因此可以创建同样长度的dp数组递推，每天有买卖两种状态，dp[i][0]为买，dp[i][1]为卖。 由于买入需要和上一次卖出间隔一天，因此只能在i - 2天已卖出的基础上买入，表示为dp[i…"}, {"id": "6936156440704860197", "title": "[LeetCode473. 火柴拼正方形] | 刷题打卡", "desc": "还记得童话《卖火柴的小女孩》吗？现在，你知道小女孩有多少根火柴，请找出一种能使用所有火柴拼成一个正方形的方法。不能折断火柴，可以把火柴连接起来，并且每根火柴都要用到。 输入为小女孩拥有火柴的数目，每根火柴用其长度表示。输出即为是否能用所有的火柴拼成正方形。 此题为经典的DFS搜…"}, {"id": "6936008555711447054", "title": "JS链表-力扣141及201题｜刷题打卡", "desc": "一直都知道算法对程序员来说很重要，但是自己刷题一直都是断断续续，很难坚持，最近报了个算法班，老师带着刷题，轻松不少，今天来做个小总结。 关于链表数据结构的知识，我们很多人应该在大学的数据结构课程中就已经学习过了，这里做个简单介绍。 每一个节点，分为存储该节点数据的数据域和指向下…"}, {"id": "6935817024929005581", "title": "全网最 low 的整数反转 | 刷题打卡", "desc": "给你一个 32 位的有符号整数 x ，返回 x 中每位上的数字反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。 假设环境不允许存储 64 位整数（有符号或无符号）。 似乎又是很 low 的想法。"}, {"id": "6904840319058067463", "title": "【一天一大 lee】Dota2 参议院 (难度:中等) - Day20201211", "desc": "Dota2 参议院由来自两派的参议员组成。现在参议院希望对一个 Dota2 游戏里的改变作出决定。他们以一个基于轮为过程的投票进行。在每一轮中，每一位参议员都可以行使两项权利中的一项： 参议员可以让另一位参议员在这一轮和随后的几轮中丧失所有的权利。 如果参议员发现有权利投票的参…"}, {"id": "6904076586757128206", "title": "【一天一大 lee】不同路径 (难度:中等) - Day20201209", "desc": "一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。 例如，上图是一个 7 x 3 的网格。有多少可能的路径？"}, {"id": "6844903998089068558", "title": "LeetCode偶尔一题 —— 53. 最大子序和", "desc": "... 一直在 LeetCode 上刷题，之前还加入了组织，有兴趣加入一起学习的同学可以在下方留言或者关注我的微信公众号「tony老师的前端补习班」并在后台留言，可以进群跟大佬们一起学习。"}, {"id": "6844903897400606733", "title": "LeetCode偶尔一题 —— 19. 删除链表的倒数第N个节点", "desc": "给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 用一个数组保存所有的链表节点，遍历完之后可以知道倒数第 n 个链表节点。 时间复杂度 为 O(k)，空间复杂度 为 O(k)，这里 k 为链表长度。 使用两个指针，快指针先遍历 n 个节点，之后两个指针再一起遍…"}, {"id": "6844903875405692942", "title": "删除链表的倒数第N个节点-JS版本", "desc": "1. 题目描述 2. 思路： 3. 单项链表 4. 代码实现题目要求 5. 执行代码 6. 执行过程"}, {"id": "6936161201915166734", "title": "[LeetCode: 1480. 一维数组的动态和] | 刷题打卡", "desc": "开局一道题, 走进前缀和的世界: leetcode: 1480. 一维数组的动态和 所以说, 我们求sum[i]只需要对nums[0 ~ i]的数字求一个和. 代码如下 我们可以发现, 在计算sum[i]的时候, 除了nums[i], 其它的和已经在上一次(sum[i - 1]…"}, {"id": "7001497099334320136", "title": "力扣——87. 扰乱字符串", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 使用下面描述的算法可以扰乱字符串 s 得到字符串 t ： 如果字符串的长度为 1 ，算法停止 如果字符串的长度 > 1 ，执行下述步骤： "}, {"id": "7002137975920263175", "title": "学算法刷LeetCode【剑指offer专题】：30.包含min函数的栈", "desc": "题目描述 30.包含min函数的栈 解体思路 这道题只对时间复杂度有要求，那可以在空间复杂度上放宽。因此，我们可以使用两个栈， 栈1正常实现的 push、pop()、top() 等 API 栈2则用于"}, {"id": "6988058585192202254", "title": "LeetCode——数组中的第K个最大元素（JS实现）", "desc": "题目描述 解题思路 本题思路较为简单，首先对数组按照从小到大进行排序。 使用reverse将数组进行反转。 返回反转数组的第k-1个元素即可。 本次没有采取JS自带的sort，而是自己实现了快速排序。"}, {"id": "7000019513320144910", "title": "【温故知新】`102. 二叉树的层序遍历` 广度优先遍历、队列先进先出的原则", "desc": "题目描述 解题思路 广度优先遍历 特殊情况优先处理 层序遍历利用queue队列的先进先出的原则 定义队列queue并初始化为根节点root; 遍历队列queue 我们定义levelNum为当前层级的节"}, {"id": "7002967243248107551", "title": "斐波那契数  Fibonacci Number 的简单实现", "desc": "Leetcode 第 509 题： 斐波那契数 Fibonacci Number 的 JavaScript 实现"}, {"id": "6994232323247964196", "title": "力扣刷题👊【462. 最少移动次数使数组元素相等 II】", "desc": "题目描述：给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。"}, {"id": "7000271129969426446", "title": "LeetCode11-盛最多水的容器 | 算法练习系列", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前言 今天来一道有意思的算法题--盛最多水的容器，看到这个题目我就想到了以前看到过的短板效应也叫做木桶原理，这个原理就是你盛水的最大量不取"}, {"id": "7006128036756062244", "title": "力扣--100.相同的树", "desc": "给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的"}, {"id": "6993981903825010725", "title": "LeetCode——数组中的第K个最大元素（堆排序-大顶堆）", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 题目描述 解题思路 1. 构建大顶堆 构建大顶堆的第一步是从最后一个非叶子节点开始，一直遍历到根节点. 一个节点的左子节点是 2*n + 1"}, {"id": "6934840493352157197", "title": "力扣 (LeetCode)-两数之和,有效的括号,两数相加｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 1. 两数之和 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能…"}, {"id": "7002454558785929246", "title": "学习笔记：剑指 Offer 06. 从尾到头打印链表", "desc": "题目描述 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 题目示例 题目解析 链表的特点：链表中的每一个元素由一个存储元素本身的节点（即元素的value）和一个指向下一个元素的引"}, {"id": "7002846792098250789", "title": "学算法刷LeetCode【剑指offer专题】：22. 链表中倒数第k个节点", "desc": "题目描述 解题思路 思路一： 遍历，将倒数第k个节点变成正数第 n-k 个节点 单链表算倒数第 K 个节点的难处在于无法从尾向头遍历，只能从头向尾遍历，但是如果我们知道链表的长度 n，知道要返回倒数第"}, {"id": "6992398511471853582", "title": "3周攻克数据结构[数组篇-3]", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 DAY4 1. 重塑矩阵 方法1：双循环 方法2：二维数组一维表示 2. 杨辉三角 方法1：2层遍历求解 科普篇：杨辉三角 规律 对称 每行"}, {"id": "6992494336759824421", "title": "leetcode每日一题题解—— 611. 有效三角形的个数——2021年8月4日", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 611. 有效三角形的个数 Title Description Given an integer array nums, return th"}, {"id": "6995383604855439390", "title": "力扣刷题👊【160. 相交链表】", "desc": "这是我参与8月更文挑战的第 12 天，活动详情查看：8月更文挑战 题目链接 160. 相交链表 题目描述 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。"}, {"id": "6994725719540498463", "title": "前端算法必刷题系列[84]", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前面连续的难题，来几个简单点放松下 154. 和为K的子数组(subarray-sum-equals-k) 标签 中等 hash 题目 le"}, {"id": "7002035008609189924", "title": "算法（leetode，附思维导图 + 全部解法）300题之（17）电话号码的字母组合", "desc": "零 标题：算法（leetode，附思维导图 + 全部解法）300题之（17）电话号码的字母组合 导读： 一 题目描述 二 解法总览（思维导图） 三 全部解法 1 方案1 1)代码： 2 方案2 1)代"}, {"id": "7003585611751751687", "title": "leetcode 215.数组中的第K个最大元素 | 刷题打卡", "desc": "题目链接 站在巨人的肩膀上 思路 直接用原生方法倒叙排序后取值，取巧的办法，哈哈。 代码 快排 利用快排的思想找出第k大的值 思路 快排基本思路： 随便找数组[i, j]里的一个基准值，假设q是该基准"}, {"id": "6992760084560347144", "title": "前端算法必刷题系列[80]", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 148. 接雨水 (trapping-rain-water) 标签 双指针 困难 题目 leetcode 传送门 给定 n 个非负整数表示每"}, {"id": "6999144690830770212", "title": "【leetcode 题解】46题-全排列", "desc": "给定一个不含重复数字的数组 nums ，返回其所有可能的全排列 。你可以按任意顺序返回答案。这题的核心实现逻辑是，将所有的路径都走一遍，不重复不遗漏。"}, {"id": "6844903977251782669", "title": "[leetcode]kmp算法js版", "desc": "题目：给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 回溯两个指针，重新比较，直到needle完全匹配上或haystack字符串循环结束也没有匹配…"}, {"id": "6986657202362646559", "title": "前端算法入门之路（九）(Algorithm算法杂谈）--开课吧门徒计划历程", "desc": "计数排序 统计每一项出现的次数 根据统计的次数循环输出对应的值 应用于值域有限的排序场景中 基数排序 统计低16位每个数字出现的次数，求其前缀和后在temp里排序 统计高16位每个数字出现的次数，求其"}, {"id": "6844904116632715278", "title": "前端工程师的 LeetCode 之旅 - 夜喵 23", "desc": "给你一个整数 n 。请你先求出从 1 到 n 的每个整数 10 进制表示下的数位和（每一位上的数字相加），然后把数位和相等的数字放到同一个组中。 请你统计每个组中的数字数目，并返回数字数目并列最多的组有多少个。 解释：总共有 9 个组，将 1 到 13 按数位求和后这些组分别是…"}, {"id": "6934698775759814663", "title": "年轻人的第一道算法题｜刷题打卡", "desc": "给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。 你可以按任意顺序返回答案。 相等时返回两次循环的索引。 再简单优化一下…"}, {"id": "6937508323986489381", "title": "[LeetCode每日一题：2021.3.9] | 刷题打卡", "desc": "1047. 删除字符串中的所有相邻重复项 给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。 在 S 上反复执行重复项删除操作，直到无法继续删除。 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。 根据题目要求，我们每枚举一个数，就…"}, {"id": "6884390777753960461", "title": "【一天一大 lee】N皇后 II (难度:困难) - Day20201017", "desc": "n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。 给定一个整数 n，返回 n 皇后不同的解决方案的数量。 皇后，是国际象棋中的棋子，意味着国王的妻子。皇后只做一件事，那就是“吃子”。当她遇见可以吃的棋子时，就迅速冲上去吃掉棋子。当…"}, {"id": "6844903677841391623", "title": " TypeScript实现数组相关简单算法", "desc": "算法看起来在离我们一般的开发者不是很近，但是实际上又和我们的开发息息相关。不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。现在想想大学的时候没有好好的学习算法和数据结构真的是后悔的吐血。本文只是简单理解算法，并不会深入的…"}, {"id": "6930514752724533256", "title": "LeetCode题解：63. 不同路径 II，动态规划，JavaScript，详细注释", "desc": "在网格中的任意一点，都有向右和向下两种走法。同时它也是从上方和左方两个位置走过来的。 那么，任意一点的走法数量，等于从起点走到上方和左方点的数量之和。 第一行和第一列都只有一种走法，就是从起点一直走到底。 我们可以用一个二维数组，画出网格中每个点的走法数量，一直递推到终点，终点…"}, {"id": "6844903865549094919", "title": "这十几个链表题型面试必考（详细解析）", "desc": "小鹿不建议你一口气去看完这篇所有的题目和练习，给自己制定一个小计划，我当初整理该题目的时候，每天都计划认真整理一到题目，把每道题分析透，这样才能达到最好的吸收效果。 本篇分为三个阶段，基础练习阶段、进阶练习阶段、加强练习阶段。 首先进行第一个阶段之前，你已经对链表的基础知识能够…"}, {"id": "6972411995152711711", "title": "HOT100——合并K个升序链表（JS实现）", "desc": "题目描述 解题思路 暴力法 首先遍历每一个链表元素，然后将其值存入到一个数组中。 将第一步获得的数组进行排序。 遍历第二步的数组，分别生成节点，然后存入一个临时数组。 以第三步获得的临时数组为基础，依"}, {"id": "6844903905911013384", "title": "基于Java实现LeetCode算法汇总", "desc": "https://github.com/zaiyunduan123/leetcode-java二分查找双指针kSum哈希表字典树字符串尺取法并查集排序数学数组栈链表链表删除链表反转链表合并双向链表二叉树"}, {"id": "6989659402647109645", "title": "【LeetCode刷题 不知道能坚持几天 orz...】Day002 21. 合并两个有序链表", "desc": "Day002 21. 合并两个有序链表 - 力扣（LeetCode） 时间复杂度o(n),空间复杂度不知道js实现的链表这种数据结构怎么算了 =_=!!!"}, {"id": "6935421457304387615", "title": "LeetCode 148. 排序链表｜刷题打卡", "desc": "给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。 对链表自顶向下归并排序的过程如下。 找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用快慢指针的做法，快指针每次移动 2 步，慢指针每次移动 1 步，当快指针到达链表末尾时，慢…"}, {"id": "6917244001036795911", "title": "力扣(LeetCode)刷题，简单题(第10期)", "desc": "力扣(LeetCode)定期刷题，每期10道题，业务繁重的同志可以看看我分享的思路，不是最高效解决方案，只求互相提升。"}, {"id": "6916891877921390599", "title": "LeetCode 第 223 场周赛题解（JavaScript）", "desc": "1720. 解码异或后的数组 简单题，主要考察异或的两个特性。 1721. 交换链表中的节点 是一道链表的题目，我曾经在 https://juejin.cn/post/6844903876206805005 里写过对链表的题目，如何快速的在本地调试，需要的可以参考下。 题目比较…"}, {"id": "6945837543178928141", "title": "20210331 LeetCode 每日一题（子集 II）", "desc": "给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。 本题是LeetCode-78. 子集的变体，仅仅是由条件中 无重复元素 改为了 可能包含重复元素。 在题LeetC…"}, {"id": "6938401503879102494", "title": "消失的“刷题”:找到所有数组中消失的数字 | 刷题打卡", "desc": "给定一个范围在 1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。 找到所有在 [1, n] 范围之间没有出现在数组中的数字。 您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组…"}, {"id": "6938348685017219108", "title": "剑指offer04 最多方式实现二维数组中的查找  |  刷题打卡 ", "desc": "在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 给定 target = 5，返回 true。 给定 target = 20，返回 fal…"}, {"id": "6936156420626710564", "title": "LeetCode 234. 回文链表｜刷题打卡", "desc": "请判断一个链表是否为回文链表。"}, {"id": "6844904086597271559", "title": "我用JS刷LeetCode | Day 6 |  Palindrome Number", "desc": "Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. 判断一个整数是否是回文数。回文数是指正序（从…"}, {"id": "7002495053331431461", "title": "Leetcode1109. 航班预订统计", "desc": "前言 最近leetcode的每日刷题都是前缀和类的，比较有连贯性。没有上来搞个hard打击人。本题用到了差分、前缀和，好记性不烂笔头，笔记之。欢迎点赞👍🏻 读题 有n个航班，起始位置是1。 booki"}, {"id": "7000693793506721799", "title": "LeetCode刷题（1）", "desc": "“这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战” LeetCode 第一题，两数之和 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 tar"}, {"id": "7002949115776598023", "title": "LeetCode题解：143. 重排链表，数组，JavaScript，详细注释", "desc": "原题链接：143. 重排链表，https://leetcode-cn.com/problems/reorder-list/"}, {"id": "7004681253144231966", "title": "LeetCode题解：897. 递增顺序搜索树，递归，JavaScript，详细注释", "desc": "原题链接：897. 递增顺序搜索树，https://leetcode-cn.com/problems/permutations/"}, {"id": "6995063572027932686", "title": "你不知道的 LeetCode 技巧（第一篇）", "desc": "今天来给使用 JS 刷题的朋友分享三个 LeetCode 上你或许不知道的刷题技巧。 今天来给使用 JS 刷题的朋友分享三个 LeetCode 上你或许不知道的刷题技巧。"}, {"id": "7000950015141101581", "title": "LeetCode刷题（2）", "desc": "“这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战” 485. 最大连续 1 的个数 leetcode 官网链接 题目描述 给定一个二进制数组， 计算其中最大连续 1 的个数。 解析 定义"}, {"id": "6994985376150454285", "title": "力扣刷题👊【150. 逆波兰表达式求值】", "desc": "从头开始遍历测试用例的每一个字符串，如果当前的字符是数字，就压入 `stack`；如果当前的字符不是数字（即为运算符），就需要从 `stack` 中执行两次弹出操作，分别得到数字为 `a, b`，然后"}, {"id": "6985035674806124552", "title": "LeetCode刷题，设计循环双端队列（641）", "desc": "设计一个循环双端队列，可以从头尾插入并删除。 解题思路：设置头尾指针，进行位置获取，添加和删除元素，设置一个记录队列元素大小的值。用于判满判空"}, {"id": "7005819277508870181", "title": "leetcode 208.实现 Trie (前缀树) | 刷题打卡", "desc": "题目链接 前缀树 基本概念 什么是前缀树？ 前缀树（Trie）又叫字典树，是一种树形的数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。 前缀树"}, {"id": "6994345536643923976", "title": "小五的算法系列 - 链表", "desc": "本文内容为链表。笔者将带领大家从 js 模拟其实现出发，逐步变化以探索链表的其它形式，最后附上几道习题加深理解及巩固所学。"}, {"id": "6994636656401711117", "title": "力扣刷题👊【605. 种花问题】", "desc": "假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。"}, {"id": "6998354448808411150", "title": "LeetCode49-字母异位词分组 | 算法练习系列", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 前言 今天的算法练习题是字母异位词分组，什么是异位词呢？异位词就是两个单词不同，但组成的单词的字母是完全相同的，就比如aet，eat，ta"}, {"id": "6997008458646028318", "title": "力扣刷题👊【290. 单词规律】", "desc": "这是我参与8月更文挑战的第 16 天，活动详情查看：8月更文挑战 题目链接 290. 单词规律 题目描述 给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。 这里"}, {"id": "7002526426213662734", "title": "学算法刷LeetCode【剑指offer专题】：06. 从尾到头打印链表", "desc": "题目描述 思路 思路一 遍历 遍历节点，将链表的值存到数组里面，这里有两种方法: 存的时候就从数组的头部插入（unshift()），这样直接返回该数组即可。（见解法1） 增加一个新的数组2，遍历链表的"}, {"id": "6997938236605595684", "title": "【LeetCode 233.数字1的个数 】- JavaScript（规律）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 LeetCode 233.数字1的个数 - JavaScript 题目描述 给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 "}, {"id": "7004741805237338148", "title": "leetcode 1663.具有给定数值的最小字符串 | 刷题打卡", "desc": "题目链接 贪心算法 思路 需要找字典序最小的字符串，根据贪心的思路，我就贪最小的，先把长度为n的所有字符都用a填充，然后从后往前替换a，能换z就换z不能就换比他小的字符，直到和为k为止，保证a的数量越"}, {"id": "7005075168544423973", "title": "学算法刷LeetCode【剑指offer专题】：24.反转链表", "desc": "题目描述 解题思路 迭代法 迭代法核心就是遍历链表，然后将指针反转即可。主意更改当前节点指针的时候，需要将它的下一个节点的地址先保存起来，以免丢失。 初始化三个变量，cur 当前节点， 当前节点的前一"}, {"id": "7001130825953591327", "title": "每日题解——2021-8-27", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 295. 数据流的中位数 中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。 例如， [2,3,4] 的中位数是"}, {"id": "6999992768542015525", "title": "前端必刷手写题系列 [21]", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 30. Promise.race 分析 我们之前提到了一个Promise的 api Promise.all, 现在我们实现下 Promis"}, {"id": "7005478094052163592", "title": "二叉树的遍历小结--递归实现", "desc": "前一段时间项目比较紧张，就把力扣刷题停下来了，现在又开始继续刷题了。为什么要刷题呢？最主要的就是面试的时候想去大厂都逃不掉算法，还有就是作为一个程序员要走的更远算法是躲不开的。你不懂算法，数据结构计算"}, {"id": "6948412389918244895", "title": "需要有肌肉记忆的五种排序方法 | 刷题打卡", "desc": "chrome v8 在处理 sort 方法时，使用了插入排序和快排两种方案。当目标数组长度小于 10 时，使用插入排序；反之，使用快排。 所以对我们来说是有必要了解一下这些排序方法的，这些方法有时候也是做其他算法题的基石。 给你一个整数数组 nums，请你将该数组升序排列。"}, {"id": "6967269503793102885", "title": "LeetCode7、整数反转", "desc": "前两天忙着处理其他事情，就单纯看了看算法题，并没有发出来给大家分享，然后现在是打算先刷力扣的简单题，那么今天给广大粉丝带来的是力扣第7题的解题思路和代码，希望大家支持..."}, {"id": "6995835857718476831", "title": "「栈」leetcode 394.字符串编码（中等）", "desc": "一、了解题目 附上原题链接：394. 字符串解码 给定一个经过编码的字符串，返回它解码后的字符串。 编码规则为: k[encoded_string] ，表示其中方括号内部的 encoded_strin"}, {"id": "6995573183571034120", "title": "「前端刷题」12. 整数转罗马数字", "desc": "罗马数字包含以下七种字符： `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。例如， 罗马数字 2 写做 `II` ，即为两个并列的 1。12 写做 `XII` ，即为 `X` + `"}, {"id": "6989803985007804429", "title": "leetcode笔记 | 977有序数组的平方 189旋转数组（JavaScript）", "desc": "双指针 【977】有序数组的平方 Easy (72.54%) 【189】旋转数组 Medium（45.38%）"}, {"id": "6934693591415521293", "title": " 121. 买卖股票的最佳时机｜刷题打卡", "desc": "分析题目：求一个数组中两个值之间的最大差值。 最简单暴力循环，通过两层循环，可以实现对所有的差值进行比较。次数为 n(n-1)/2 换一个思路理解，如果我们在第i天需要获得最大的利润，那么一定是减去在之前[0, i-1]个元素中的最低价格从而得到最大的利润。所以在遍历的时候可以…"}, {"id": "6935283225946226701", "title": "「LeetCode系列」接雨水问题｜刷题打卡", "desc": "给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 根据示例1的图片我们可以比较清晰理解题目：每个柱子宽度为1，所以我们只要计算出每个柱子上面可以积蓄雨水的体积，最后进行求和即可得出总的雨水体积。 对于每个柱子上面的蓄水量，根据木…"}, {"id": "6937296154132480007", "title": "力扣 (LeetCode)-加一，队列 ｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 使用WeakMap来保存私有属性items，并用外层函数（闭包）来封装Queue类。 当我们在浏览器中打开新标签时，就会创建一个任务队列，每个标签都是单线程处理所有任务，被称为事件循环。 浏览器负责多个任务，如渲…"}, {"id": "6986143088590880782", "title": "LeetCode 198. 打家劫舍 --DP", "desc": "198. 打家劫舍 问题描述： 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，"}, {"id": "6995117965138427917", "title": "3周攻克数据结构[栈 / 队列]篇", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 DAY9 1. 有效的括号 方法1：栈匹配法 2. 用栈实现队列 方法1：双栈实现"}, {"id": "6963837339516796941", "title": "剑指Offer——数值的整数次方（JS实现）", "desc": "题目描述 解题思路 本题核心： 当n为奇数和偶数时两种情况的讨论，同时要注意n为0、负数是的情况。 情况1： (2,4) = (2,2) * (2,2) 情况2：(2,5) = (2,2) * (2,"}, {"id": "6949360373904457758", "title": "01背包问题-动态规划", "desc": "前言每次看到 背包问题 就很头疼，干脆把它总结下来。题目描述有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？比如：number = 4,capacit"}, {"id": "6844904146567593997", "title": "前端工程师的 LeetCode 之旅 -- 周赛 185", "desc": "给你一个混合了数字和字母的字符串 s，其中的字母均为小写英文字母。 请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。 请你返回 重新格式化后 的字符串；如果无法按要求重新格式化，则返回一个 空字符串 。 解释：…"}, {"id": "6988906576975233038", "title": "【LeetCode刷题 不知道能坚持几天 orz...】13. 罗马数字转整数", "desc": "力扣刷题 Day0 原题：13. 罗马数字转整数，不知道能坚持几天 orz...题目难度：简单，时间复杂度：o(n), 空间复杂度：o(n)"}, {"id": "7002408928197754910", "title": "「前端刷题」30. 串联所有单词的子串", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 题目 https://leetcode-cn.com/problems/substring-with-concatenation-of-a"}, {"id": "6844903850659282958", "title": "知多一点 LRU 缓存算法", "desc": "hello~亲爱的观众老爷们大家好~最近沉迷 GraphQL 无法自拔，使用的过程中接触到不少的缓存机制，LRU 算法是比较常用的一种，因而对此产生了兴趣。正好之前刷 LeetCode 时完成了这答题，查阅了相关资料后翻看当初的实现，才知道之前是多蠢~因而有了这篇文章，记录下这…"}, {"id": "6953545472074055717", "title": "白话递归2——由二叉树力扣题总结出来的递归思想", "desc": "最近在刷力扣中二叉树相关题目，发现很多问题都需要用递归来解决，或者说很多问题用递归来解决会比较简单。本文主要是结合力扣题目来对递归算法进行总结，轻松写出递归程序。"}, {"id": "6958634752752484388", "title": "剑指Offer——1~n整数中1出现的次数（JS实现）", "desc": "题目描述 解题思路 本题如果采用暴力的方法一定会超时 本题关键在于找规律 规律如下图所示（cur>1,cur=1.cur<1三种情况） 解题代码（模拟队列） 精讲UP主 https://www.bil"}, {"id": "6939164605839048740", "title": "力扣 (LeetCode)-13. 罗马数字转整数｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 力扣 (LeetCode)-104. 二叉树的最大深度，图｜刷题打卡-3月12号 13. 罗马数字转整数 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 把一个小值放在大值的左边，就是做减法，…"}, {"id": "6966796250179960868", "title": "HOT100——无重复字符的最长子串（JS实现）", "desc": "题目描述 解题思路 本题采用双指针 + 哈希表的方式解决问题。 最大值是通过不断更新出来的。 右指针移动到字符串的最后一个元素循环结束。 循环体中首先判断右指针指向的元素是否出现在哈希表中，如果出现了"}]