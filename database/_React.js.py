[{"id": "6931748044731842573", "title": "防抖和节流及对应的React Hooks封装", "desc": "防抖函数，我们需要做的是在一件事触发的时候设置一个定时器使事件延迟发生，在定时器期间事件再次触发的话则清除重置定时器，直到定时器到时仍不被清除，事件才真正发生。 如果事件发生使一个变量频繁变化，那么使用debounce可以降低修改次数。通过传入修改函数，获得一个新的修改函数来使…"}, {"id": "6844904161583054855", "title": "精读《@umijs/use-request》源码", "desc": "与组件生命周期绑定的 Utils 非常适合基于 React Hooks 来做，比如可以将 “发请求” 这个功能与组件生命周期绑定，实现一些便捷的功能。 这次以 @umijs/use-request 为例子，分析其功能思路与源码。 默认自动请求：在组件初次加载时自动触发请求函数，…"}, {"id": "6999557508205379614", "title": "D3.js -- V7.0.0 - Draw a Chart with Gradient", "desc": "在 React 中使用 D3.js 实现曲线图并实现曲线的颜色渐变 svg.append('defs').append('linearGradient')"}, {"id": "6979036356768956452", "title": "[中级]ReactClass组件：看这一篇就够了", "desc": "我们编写的大部分 React 的组件都为class组件，掌握class组件的原理和应用能帮助我们写出更好的代码。"}, {"id": "6981498660353736734", "title": "React15和React16的架构比较（二）", "desc": "上一篇文章聊到React15架构存在不能支撑异步更新的情况以至于需要重构。那么下面来学习一下React16是如何支持异步更新的。"}, {"id": "6844903553182515214", "title": "React Router 4 简介及其背后的路由哲学", "desc": "React Router 4 引入了一种基于 component 的动态路由。 这篇文章中会讨论思考 React Router 背后的哲学，同时也会通过分析 React Router 文档中的示例代码来介绍一下它的语法。 更多 React Router 的介绍请戳 这里。 不想…"}, {"id": "6977258085903515685", "title": "React Hooks性能优化", "desc": "memo、useMemo、useCallback的使用 memo 定义：React.memo 仅检查 props 变更。 当props变更时，及渲染组件(不管子组件是否依赖props)。"}, {"id": "6983559597659258911", "title": "react 官网「核心、高级」总结条目", "desc": "很多时候我认为某些新鲜事物或成熟框架，知晓全面概念比深度掌握在项目业务开发过程中要重要得多。一旦涉及，则需进行官方文档或社区资源进行深入了解。"}, {"id": "6844903629493633038", "title": "React 之受控组件和非受控组件", "desc": "在React中，所谓受控组件和非受控组件，是针对表单而言的。 表单元素依赖于状态，表单元素需要默认值实时映射到状态的时候，就是受控组件，这个和双向绑定相似. 受控组件，表单元素的修改会实时映射到状态值上，此时就可以对输入的内容进行校验. 受控组件只有继承React.Compon…"}, {"id": "6915398787292725261", "title": "写给自己看的React源码解析（一）：你的React代码是怎么渲染成DOM的？", "desc": "最近开始深入学习React的原理了，后面会出一系列关于React原理的文章，基本都是我学习其他前辈的React源码分析以及跟随他们阅读源码时的一些思考和记录，内容大部分非原创，但我会用我自己的方式去总结原理以及相关的流程，并加以补充，当作自己的学习总结。 本系列内容偏向底层源码…"}, {"id": "6912286843824898061", "title": "dumi 1.1 发布，你更好用的组件研发利器！", "desc": "dumi 1.0 是今年的 3 月 2 日发布的，到现在已经过去了 304 天。 在这期间，通过不断地收集反馈、规划功能、迭代研发，我们也准备好了全新的 dumi 1.1 版本，在 2021 年的前夕，和大家分享。 访问 dumi - 移动端组件研发 了解更多。 当一个工具满足…"}, {"id": "6918656909146865672", "title": "从0搭建自己的UI组件库文档平台", "desc": "目前部门内部正在推动工程化建设与技术栈迁移（Preact->React），因此许多旧项目就需要进行重构，原本封装的各种UI组件也都是依赖于Preact框架，且都是单独的npm包形式存在，代码风格各异，没有一个统一的UI组件查询平台，基于此，我们决定建设一个统一的UI组件库。 也…"}, {"id": "6844903910537166862", "title": "React 状态管理使用指南", "desc": "1. 引言 2. 状态管理之 Redux 解决方案 3. 状态管理之 MobX 解决方案 4. 这个 example 长啥样 5. Classic React App with Redux 6. Classic React App with Mobx 7. React Hook…"}, {"id": "6844904000714702856", "title": "一个React版的画图工具", "desc": "之前看到系统自带的画图工具， 感觉挺有意思， 于是用react和canvas实现了个简易画图工具， 不用react也行， 我主要是因为在原来的项目里写的， 所以用了react。 首先给canvas添加mousedown, mousemove, mouseup三个监听事件。 当鼠…"}, {"id": "6844903608144805901", "title": "从高阶函数--->高阶组件", "desc": "今天有幸去参加了下别人公司的分享会，我带着想让个人给我梳理下我对高阶组件了解比较混乱的思路，但分享的内容跟我期望方向不在一个点上，所以结束后我还是想象，我自己来梳理下自己对高阶组件浅显的理解。希望大家给予指导 要讲高阶组件，先让我介绍下高阶函数，这样类比下就很容易理解了。 以及…"}, {"id": "6983553147650179086", "title": "react杂谈之componentDidMount", "desc": "我们日常开发中使用componentDidMount的频率非常高，但是你可能不知道的是它其实是一个会阻塞浏览器渲染的生命周期，"}, {"id": "6844903606420766734", "title": "在webpack-dev-server内添加mock server", "desc": "前端页面已经编排好了，但是后台接口还没准备好，或者是突然出现Bug，这样没办法进行对接测试。 我们希望服务器返回特定类型的数据，以测试某页面在特定条件下是否存在问题，但作为前端我们一般不会接触到后端代码和数据库，每次都找后端添加模拟数据又很麻烦。 为解决这两个问题，最简单的解决…"}, {"id": "6999434205079797790", "title": "React进阶系列之Hooks设计动机", "desc": "当我们由浅入深地认知一样新事物地时候，往往需要遵循 “Why-What-How” 的一个认知过程，这三者往往是相辅相成、缺一不可的。某种层面上，对于一个工程师而言，他/她对 “Why” 的执着程度，很"}, {"id": "6864116214118449160", "title": "React 编码实战 ---- 一步步实现可扩展的架构（2）", "desc": "在 React 编码实战 ---- 一步步实现可扩展的架构（1） 中，我们跟随小白一起，从一个简单的需求实现，一步步考虑 组件复用 和 分层解耦，让代码架构更具有扩展性。今天，我们会进一步跟随小明的建议，继续提高架构的可扩展性。 「我们来一起捋一捋。基于之前的需求，我们是实现了…"}, {"id": "6844904065680277517", "title": "精通React/Vue系列之手把手带你实现一个功能强大的通知提醒框(Notification)", "desc": "本文是笔者写组件设计的第十篇文章, 今天带大家实现一个比较特殊的组件——通知提醒框(Notification)。 该组件在诸如Antd或者elementUI等第三方组件库中也都会出现,主要用来为用户提供系统通知信息的.我们在调用它时并不像其他组件一样，通过引入组件标签来调用。比…"}, {"id": "6949184783473704974", "title": "React中的不可变值", "desc": "什么是不可变值 函数式编程是指程序里面的函数和表达式都能像数学中的函数一样，给定了输入值，输出是确定的。"}, {"id": "6844903561403301896", "title": "webpack-loader实现一个简化版gitbook", "desc": "最近在看weppack-loader，不看不知道，当我翻到markdown-loader的时候，大吃一惊，简直精简的不能再精简了，除去require和export语句，一共就有四行。基本上loader的作用一目了然：在js进入执行之前对其做改动。 babel-loader是最常…"}, {"id": "6844903504016834574", "title": "react + koa2实现的论坛", "desc": "线上地址：点击查看 （访问会有点慢，至于原因，下面会说明） 前端（主要）：reactv15.6.1、react routerv4.2.0、reduxv3.7.2、antdv2.13.0、axiosv0.16.2和处理样式的sass； 后端（主要）：nodev8.3.0、koa2…"}, {"id": "6844903507548438541", "title": "现代化的JS简明表(迷你手册)", "desc": "比对老的写法和当前用 ES6+的写法,为什么现在的更好以及语法自身局限性..当然还列出了一些拓展知识...挺全面的..认真的阅读一遍,绝对有所收获的!!..就是全英文的.哇哈哈哈 ~~~"}, {"id": "6844903639761469453", "title": "React 回忆录（三）使用 React 渲染界面", "desc": "Hi 各位，欢迎来到 React 回忆录！👋 在上一章中，我介绍了 React 框架的“五大特点”：虚拟DOM，组件化，声明式代码，单向数据流和纯粹的 JavaScript 语法。在本章中，我们将谈到 React 是如何渲染 UI 的，以及在这个过程中所表现出的 组件化 思想…"}, {"id": "6937940004282826789", "title": "React组件化", "desc": "在聪明式组件CommentList中对数据进行操作，然后在Comment傻瓜式组件对数据进行展示。 假设上面的例子我们用setInterval替换setTimeout做轮询。Comment组件将会一直渲染，这时候我们用shouldComponentUpdate函数来判断setS…"}, {"id": "6844903712335511560", "title": "create-react-app+mobx入门初体验", "desc": "Decorator是在 声明阶段 实现类与类成员注解的一种语法。 说的直白点Decorator就是 添加 或者 修改 类的变量与方法。 在开始使用mobox，我们还需要纠结一个东西，就是配置环境启用ES7的修饰器语法，当然，如果你不需要修饰器，可以跳过这一部分。 以上代码中，通…"}, {"id": "6844903597671448590", "title": "Redux：全揭秘与入坑指北（中）", "desc": "中间件是插入在用户发射action动作之后到reducer接收到这个动作之前这个时机的处理器，它能完成一些额外的逻辑。 So，我们现在知道了，如果有中间件，会先执行applyMiddleware应用中间件这个方法，并且将createStore、reducer、preloaded…"}, {"id": "6844903550120624136", "title": "2017前端发展回顾", "desc": "译者按： 老技术日趋成熟，新技术层出不穷。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 前端开发在2017年依然持续火热，本文将对热点事件做一个总结。 在前端领域，React一直独占鳌头。2017年又发布了一个重大的版本更新 versio…"}, {"id": "6927259004313960462", "title": "React总结", "desc": "props和state的区别  props是只读属性，不能被修改，是传递给组件的（类似于形参）；state是在组件内被组件自己管理的（类似于在一个函数内声明的变量），包含了随时可能发生变化的数据，由用"}, {"id": "6907182184805695501", "title": "react初学05(函数组件)", "desc": "创建方式函数创建函数组件替代class组件面临的两个问题函数组件没有state函数组件没有生命周期没有stateReactv16.8.0推出HooksAPI其中useState可以解决问题没有生命周期"}, {"id": "6916891273643180040", "title": "1. createElemnt && render（草稿）", "desc": "1. createElemnt &#x26;&#x26; render 所以当child !== \"object\"的时候，child的类型就是ReactText，即string或者number。 为了后面的代码简单和统一，我们使用createTextElement进行包裹，具体…"}, {"id": "6844903575890427918", "title": "preact源码解析", "desc": "preact源码分析，明白preact，也明白了react"}, {"id": "6844903567283748878", "title": "React 中的新旧 Context 简单对比", "desc": "context 是各种前后端框架中经常会用到的一个概念，著名 Node 框架 Koa 更是把 context 玩的尽兴。React 在很早之前就有 context 的概念，虽然是一个实验性质的 API，但 react-redux、react -router 等框架类库却把它玩了…"}, {"id": "6844903822221901838", "title": "【译】缓存 React 中事件监听来提升性能", "desc": "在 JavaScript 中对象和函数是怎么被引用好像不被人重视的，但它却直接影响了 React 的性能。假设你分别创造了两个完全相同的函数，它们还是不相等的。如下： 对象也是同样的情况。（记住 JavaScript 中函数即对象） 如果你其他语言编程经验，你应该熟悉指针的。每…"}, {"id": "6844903560249884686", "title": "What’s new in React 16.3(.0-alpha)", "desc": "React 16.3-alpha 带来了全新的 context API 以及新的 life-cycle methods"}, {"id": "6896822319067430919", "title": "jsx 相关知识   ", "desc": "在React17之前，React是通过jsx描述视图，通过babel-loader转译后变成React.createElement(****) 形式,该函数生成vmode来描述真实dom。将来如果状态发生变化，vdom做出相应的变化，再通过diff算法对比新老vdom 从而做出…"}, {"id": "6844903510866132999", "title": "用 Gatsby 创建一个博客", "desc": "Gatsby 是一个令人难以置信的静态站点生成器，它允许使用React作为渲染引擎引擎来搭建一个静态站点，它真正具有现代web应用程序所期望的所有优点。"}, {"id": "6844903497926721549", "title": "现代 JS 备忘录", "desc": "这里备注了你在现有项目中经常遇到的 JS 常见问题。"}, {"id": "6844903597147160584", "title": "react组件的几个模式", "desc": "使用React已经有一段时间了， React——Facebook库，使用JS构建用户界面。本文试图总结迄今为止实践中所学到的一些模式，同时希望能够帮助到即将迈入奇妙地组件世界的开发者。 正如web服务有静态和动态之分，React组件也有有状态和无状态的区分。有状态组件--在应用…"}, {"id": "6844903520848740360", "title": "前端每周清单第 43 期：2017 JavaScript 回顾、Rust 与 WebAssembly 开发游戏、Node.js 架构模式", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID ： frontshow），及时获取前端每周清单。 Angular 5.1 发布: 本文介…"}, {"id": "6844904023921786887", "title": "Thinking in React Hooks", "desc": ""}, {"id": "6844903567304851464", "title": "前端每周清单第 52 期: Webpack 4.0，GraphQL 安全加固，去中心化的 Web", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 Webpack 4.0.0 发布: 本周…"}, {"id": "6844903585776402446", "title": "bee-mobile 基于 React 的移动端组件库，上线啦！", "desc": "一共拥有50多个组件，已为你需要在项目中使用的很多功能性组件做好准备。"}, {"id": "6844903598061518856", "title": "react-router4的按需加载实践（基于create-react-app和Bundle组件）", "desc": "最近在网上也看到了react-router4的好多种按需加载的方法。 虽然自己的项目不大，但是也要区分前台和后台，如果让访问前台的用户也加载了后台的js代码，还是很影响体验的，所以挑了一种按需加载的方法进行实践（基于create-react-app和Bundle组件）。 这里的…"}, {"id": "6844903888949116942", "title": "React 源码Scheduler（二）React的调度流程", "desc": "本文源码基于 React 16.8.6 (March 27, 2019)，仅记录一些个人阅读源码的分享与体会。 在上一节中，笔者介绍了浏览器中调度算法的种类，并基于此实现了一个简单的时间分片调度。 React 的调度流程借鉴了浏览器中 requestIdleCallback 的…"}, {"id": "6844903606844407815", "title": "聊一聊 redux 异步流之 redux-saga", "desc": "React+ReduxCycle(来源：https://www.youtube.com/watch?v=1QI-UE3-0PU)让我惊讶的是，redux-saga的作者竟然是一名金融出身的在一家房地产"}, {"id": "6896294338738225166", "title": "React类组件", "desc": "读props，构造函数中写了super(props)之后，this.props就是外部数据对象的地址了，直接使用this.props.x就可以访问x属性了。 当接收props变化时，会触发componentWillReceiveProps钩子，该钩子已被弃用。"}, {"id": "6844903934910267399", "title": "React官方教程笔记（React 15 4 X）", "desc": "1. 安装 开始之前可以先去codePen尝试一下，也可以下载这份HTML文件并编辑它来尝试React。 推荐使用React官方提供的Creat React App工具，来快速新建React单页面应用项目。 虽然React可以在没有任何构建工具的情况下进行使用，但在生产环境还是…"}, {"id": "6844903711609716749", "title": "React Fragments – wrapper div终结者", "desc": "hi，大家好，我是Ken，目前就职于GetStream.io，为用户提供个性化可定制的feed流服务。 在过去的几个月里，我一直在开发Winds 2.0，一个开源的RSS阅读器和博客订阅应用。用Node.js, Electron, Redux and React开发，并且截止发…"}, {"id": "6844903661424869384", "title": "[译] 从零开始，在 Redux 中构建时间旅行式调试", "desc": "在这篇教程中，我们将从零开始一步步构建时间旅行式调试。我们会先介绍 Redux 的核心特性，及这些特性怎么让时间旅行式调试这种强大功能成为可能。接着我们会用原生 JavaScript 来构建一个 Redux 核心库以及实现时间旅行式调试，并将它应用到一个简单的不含 React …"}, {"id": "6844903666898452487", "title": "5分钟吃透React Native Flexbox", "desc": "今天我们来聊聊Flexbox，它是前端的一个布局方式。在React Native中是主流布局方式。如果你刚刚入门React Native，或者没有多少前端的技术经验，亦或者对其半知半解，那么这篇文章将很好的帮助你参透Flexbox的整个全貌。 通过这篇文章你将快速吃透整个Fle…"}, {"id": "6844903816005943310", "title": "从实际开发的角度去看react的新特性hooks", "desc": "React v16.7.0-alpha中加入的新特性Hooks。它可以让你在函数式组件中使用state和生命周期。本人花了点时间研究了下，发现网上大部分的教程都是偏向于理论，或者干脆翻译官网和代码，缺少实际使用场景的教程，所以本人根据自己的理解写了这篇从开发角度去看这个hook…"}, {"id": "6844903930262978567", "title": "React scheduler详解(16 6 3)", "desc": "这就是react可以做到在diff的时候，用来做任务分配的机制。因为js是单线程的，所以如果一次执行任务太多的话，如果在这期间用户过来点击个按钮，输入个数字什么的，浏览器可能毫无反应，这样用户可能会以为浏览器卡死啦。 现在浏览器提供了一个接口requestidlecallbac…"}, {"id": "6844903588586602510", "title": "基于 React 的单页应用优化技巧", "desc": "本文内容是基于项目前端框架优化而提炼出的一些比较实用的单页优化小技巧，在此做一下沉淀，希望能帮到在这方面摸索的同学。 前端框架是在 React 16+、react-router v4、webpack v3、Next1.x 之上构建。 Next 是阿里集团电商通用 UI 组件库（…"}, {"id": "6844903730396020743", "title": "React发展历程中找到问题", "desc": "早于0.14x 的时候，ES6还没有普及，所以大家创建一个React的类的时候，都是以函数调用的形式创建的，传入对应的键值对函数执行相应的lifeCycle, state, 和 props。 不用ES6: 方法调用和ES6版本有一个最大的区别，对于ES6来说，我们都知道它必须手…"}, {"id": "6844903593066119182", "title": "又双叒叕抢行了？使用 React 管理你的设计资产", "desc": "这是一个使用 React 生成 Sketch 文件的命令行工具，主要用于生成设计系统(design system)，**简单来说就是使用 代码 生成 设计稿 **。这个跨界的工具提供了一种很新颖的思路，在某些特定情况下有其应用场景。 简言之：代码可以更好地控制设计资产的版本迭代…"}, {"id": "6844903592491483149", "title": "Redux：全揭秘与入坑指北（上）", "desc": "emmm...这是一篇偏重于源码实现的文章,其次是使用的注意事项，阅读请谨慎。 关于state初始值的，在上面相应的代码示例部分已经做出了相应的注释。 另外需要注意的是当我们调用createStore()初始化一个仓库时，可以传入一个preloadedState参数作为crea…"}, {"id": "6844903544009555975", "title": "深入理解React源码 - 首次渲染 II", "desc": "在上一篇中我们分析了整个渲染流程的前奏，即从一个JSX表达式到ReactCompositeComponent的生成过程。最后我们讨论到batchedMountComponentIntoNode()。本篇会从这个函数开始继续打通简单组件渲染的流程。 本篇涉及的文件： rende…"}, {"id": "6844903608022990861", "title": "EasyPack - 也许是最方便的 webpack 构建工具", "desc": "项目中都会用到 webpack,但每个项目的重复配置太多，还经常会因为某个版本升级，导致原先的配置失效，重新花时间去整理。 很多 webpack 工具或者 CLI 都把配置包装起来，不利于二次开发，遂想把webpack配置模块化，简单化，可视化。 EasyPack只专注在构建方…"}, {"id": "6972833245243277342", "title": "React 系列 - 前言", "desc": "React系列前言介绍，旨在用平实的语言和简单的代码来引导初学者进行 React 的学习。加油吧！骚年，让我们开启对 React 的学习吧！"}, {"id": "6972439516703358990", "title": "盘点那些 React Hooks 里常见的问题", "desc": "实际使用中有时候会碰到 Infinite Chain Of Update 这个报错，其实就是你的一段代码引发了「死循环更新」。下面我们来看几个例子👇"}, {"id": "6934333189829689352", "title": "React Hook | 必 学 的 9 个  钩子", "desc": "ReactHook指南什么是Hook？Hook出现解决了什么？什么时候使用Hook?React内置的HookuseState状态管理useState定义/使用完整栗子useEffect生命周期管理定义"}, {"id": "6930200963810590734", "title": "一个倒计时组件引发的问题", "desc": "简简单单，我想实现一个倒计时组件，如下的功能。对比学习 Class 组件和 React Hook 实现方式的区别，不做不知道，一做发现了大玄机。且向下看。 useEffect(()=>{}, []) 表示的是组件加载时会执行的逻辑，[] 空数组表示 useEffect 里面的代…"}, {"id": "6844903782355042312", "title": "React 中的高阶组件及其应用场景", "desc": "所以你可能会发现，当高阶组件中返回的组件是 无状态组件（Stateless Component） 时，该高阶组件其实就是一个 高阶函数，因为 无状态组件 本身就是一个纯函数。 React 中的高阶组件主要有两种形式：属性代理 和 反向继承。 可以发现，属性代理其实就是 一个函数…"}, {"id": "6942517429092220958", "title": "在React应用中使用Dexie.js进行离线数据存储", "desc": "离线存储应用程序数据已成为现代Web开发中的必要条件。内置的浏览器 localStorage 可以用作简单轻量数据的数据存储，但是在结构化数据或存储大量数据方面却不足。 最重要的是，我们只能将字符串数据存储在受XSS攻击的 localStorage 中，并且它没有提供很多查询数…"}, {"id": "6844904089164185607", "title": "前端精神小伙：React Hooks 响应式布局", "desc": "现在稍微大型的站点都会采用H5/PC端 并行，通过nignx获取浏览器的UA信息来切换站点。 但这对于一些企业站点或人手不足的小型项目来说，就很难实现。 通过CSS媒体查询实现响应式布局，是主流方式。 但是，有时在React程序中，需要根据屏幕大小有条件地渲染不同的组件（写媒体…"}, {"id": "6984972296658092063", "title": "深入 JSX(精读React官方文档—21)", "desc": "会编译为： 自闭合的标签形式 会编译为： 指定React元素类型 React必须在作用域内 在JSX类型中使用点语法 用户定义的组件必须以大写字母开头 如果你确实需要一个以小写字母开头的组件，则在JS"}, {"id": "6987004565098856462", "title": "【我的React笔记】02. 一文读懂Redux、React-Redux源码", "desc": "作为 React 最早的「状态管理库」，Redux一直是一个备受争议的存在，有人喜欢它单一的数据流向和方便管理回朔的优点，有人讨厌它 入门demo 的复杂。但整体来看，Redux 依旧是一个让人"}, {"id": "6844903608501141512", "title": "React + Koa 实现服务端渲染(SSR)", "desc": "⚛️React是目前前端社区最流行的UI库之一，它的基于组件化的开发方式极大地提升了前端开发体验，React通过拆分一个大的应用至一个个小的组件，来使得我们的代码更加的可被重用，以及获得更好的可维护性，等等还有其他很多的优点... 通过React, 我们通常会开发一个单页应用（…"}, {"id": "6909265655392894989", "title": "React RFC Server Components是什么，有啥用", "desc": "12月21日，React团队公布了一个新的提案Server Components。 伴随这个提案同时发出的，还有一个小时的视频讲解、可供运行的Demo、详尽的介绍。 可见，React团队很重视这个提案。本文会从如下方面讲解： Server Components是在服务端运行的R…"}, {"id": "6992222833824776228", "title": "图解React源码 - React 工作循环 (workLoop)", "desc": "React的2大工作循环分别是\"任务调度循环\"和\"fiber构造循环\". 本文从宏观角度阐述这两大循环的作用, 以及它们之间的区别和联系."}, {"id": "6993527159440539685", "title": "react如何让组件内部样式私有化", "desc": "最近自己玩着做一个react的项目，组件之间的样式相互干扰，给我造成困扰。 找了好几种方法，感觉不太好用。 直到... //使用 CSS Modules 的方式引入 关键是 在css文件后面加上.mo"}, {"id": "6844903782032097288", "title": "开源 react + koa + mysql 设计的简约风格的个人博客", "desc": "使用 react 有一段时间了, 也想用 react 去写点什么，平时接触最多的就是 blog 了，于是乎借助 antd 这个 UI 框架设计出了一个极其简约风格的 spa 博客。 前后台分离式开发（项目中也包含博客的后台管理系统），为了方便记录后端开发过程，笔者将后端也一起放…"}, {"id": "6954278031464595486", "title": "可能是你见过最专业的表单方案---解密Formily2.0", "desc": "介绍 如果你是还没用过Formily的朋友，可以移步 Formily介绍 了解Formily是如何一步步解决表单问题的，如果是用过Formily的朋友，一定了解Formily过去的定位，也就是 面向复"}, {"id": "6844903561902587918", "title": "[译]简明React Router v4教程", "desc": "React Router v4 是一个完全使用 React 重写的流行的 React 包，之前版本的 React Router 版本配置是使用伪组件也很晦涩难懂。现在 v4 版本的 React Router，所有的东西都 “仅仅是组件”。 选择 router。 创建 route…"}, {"id": "6844903683197501447", "title": "一步一步带你封装基于react的modal组件", "desc": "接下来将一步步带领大家实现一个基本的modal弹窗组件，封装一个简单的动画组件，其中涉及到的一些知识点也会在代码中予以注释讲解。 一. modal组件的实现； 1. 环境搭建 2. modal样式完善 3. modal功能开发 3.1. 添加visible字段控制显隐 3.2.…"}, {"id": "6998704815165407239", "title": "React路由&前端路由浅解析", "desc": "路由基本配置 路由的模糊匹配和严格匹配 嵌套路由 动态路由 路由三个传参方式 路由编程式导航 路由懒加载 路由三种渲染方式 前端路由浅解析"}, {"id": "6997024142931263502", "title": "图解React源码 - Hook 原理(副作用Hook)", "desc": "本节分析了`副作用Hook`从创建到销毁的全部过程, 在`react`内部, 依靠`fiber.flags`和`effect.tag`实现了对`effect`的精准识别."}, {"id": "6975355116580765703", "title": "React系列四：认识组件化开发", "desc": "组件化是一种开发思想，是一种开发思路上的解决方案，只要记住，组件化只是一种思想，并不是一种具体的解决方案。 学习组件化思想以及React的组件化思想。"}, {"id": "6992919744165150751", "title": "白话聊React为何采用函数式编程的不可变数据", "desc": "今天来聊一下React采用函数式编程的理念：不可变数据。 看到标题的你不用担心，你可能在顾虑需要函数式编程的知识，完全不需要，"}, {"id": "6992491288754913310", "title": "react hook上如何在提交后重置input [type=file]", "desc": "需求是，选择了文件后，文件上传成功后，能重置为“未选择任何文件”状态。百度了一圈都没有找到实际有用的操作方式，还是谷歌有效果， 可用方法是提供一个 key 值给 input"}, {"id": "6984253268885159944", "title": "React 中 refs 的常见用法", "desc": "一、String 类型的 Refs 不建议使用，因为 string 类型的 refs 存在一些问题。它已过时并可能会在未来的版本被移除。 二、回调 Refs 如果 ref 回调函数是以内联函数的方式定"}, {"id": "6844903974647103496", "title": "React Hooks 异步操作踩坑记", "desc": "React Hooks 是 React 16.8 的新功能，可以在不编写 class 的情况下使用状态等功能，从而使得函数式组件从无状态的变化为有状态的。 React 的类型包 @types/react 中也同步把 React.SFC (Stateless Functional…"}, {"id": "6970263394897100814", "title": "useState钩子函数实现原理", "desc": "我们都知道useState是用来保存状态的，在调用这个函数的时候需要传入一个初始值，返回值是一个数组，第一个值是状态值，第二个值是设置状态值的函数。 我们先声明一下useState函数，返回一个数组，"}, {"id": "6844903655372488712", "title": "我对 React v16.4 生命周期的理解", "desc": "该方法在getSnapshotBeforeUpdate方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的"}, {"id": "6999458736498540558", "title": "小白学习搭建React基础架构", "desc": "本文档是基于webpack5、node10进行搭建的，确保你的电脑里已经安装了node开发环境 1、初始化react项目 在桌面新建react-demo，同时运行npm init -y，这时可以看到项"}, {"id": "6844903654294716423", "title": "使用Jest进行React单元测试", "desc": "单元测试：指的是以原件的单元为单位，对软件进行测试。单元可以是一个函数，也可以是一个模块或一个组件，基本特征就是只要输入不变，必定返回同样的输出。一个软件越容易些单元测试，就表明它的模块化结构越好，给模块之间的耦合越弱。React的组件化和函数式编程，天生适合进行单元测试 TD…"}, {"id": "6982910282792173598", "title": "React 编码规范", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 前言 规则来源于 eslint-plugin-react 提供的规则，选择出有利于我们当前项目的部分； React 社"}, {"id": "6844903811794862087", "title": "如何搭建一个REACT全家桶框架", "desc": "前端技术发展太快，有些库的版本一直在升级，现在网上的搭建教程不是不全面，就是版本太低，本人综合一些教程和自己的理解，整理了一下，方便大家快速入手react框架。本教程针对刚入门和技术栈转型人员。注：（本教程写于2019-3-29，请注意版本）！！！ 本人也是半路加入react大…"}, {"id": "6969126875574566949", "title": "【译】5种高级React模式", "desc": "像每个React开发者一样，你可能已经问过自己以下问题之一 - 我如何建立一个**可重复使用**的组件以适应不同的使用情况？ - 我如何建立一个具有**简单API**的组件，使其易于使用？"}, {"id": "6844903543573315598", "title": "送给前端开发者的一份新年礼物", "desc": "React 其实只是一个 UI 框架，频繁进行 DOM 操作的代价是很昂贵的，所以 React 使用了虚拟 DOM 的技术，每当状态发生改变，就会生成新的虚拟 DOM 并与原本的进行改变，让变化的地方去渲染。并且为了性能的考虑，只对状态进行浅比较（这是一个很大的优化点）。 Re…"}, {"id": "6844904194348941325", "title": "一天学习React入门后的千字基础总结", "desc": "本文写的仓促，算是一个学习笔记吧，算是一个入门级的学习文章。如果你刚刚入门，那么可能一些入门的视频可能更加适合你。但如果具备一些知识，比如Vue，那么视频就不适合了。建议看完本篇文章在脑海中过一遍映像，在去官网深读，和一些深入文章，想来会有非常好的提升。 新手还是推荐官方的脚手…"}, {"id": "6888597510399623175", "title": "React hooks 最佳实践【更新中】", "desc": "hooks 设计的初衷就是为了使开发更加快捷简便，因此在使用hooks 的时候，我们不应该吝啬使用较多的hooks，例如我们处理不同状态对应不同逻辑的时候，按照写class的逻辑，我们经常会在一个生命周期函数里写下多个逻辑，并用if区分；在写hooks的时候，因为没有shoul…"}, {"id": "6921491766638018573", "title": "一文搞定常用的自定义 React Hooks", "desc": "通过上一篇文章《一文归纳 React Hooks 常用场景》，我们根据使用场景分别进行举例说明，帮助你认识理解并可以熟练运用 React Hooks 大部分特性了。本文则对 hooks 进一步加深，让我们通过自定义一些 hooks，解决我们在平时项目中非常常用的需求场景，做到代…"}, {"id": "7002778097309188127", "title": "ahooks 源码解读系列 - 14", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6844904162472247304", "title": "React组件逻辑复用的那些事儿（Mixins -> HOC+render props -> Hooks）", "desc": "基本每个开发者都需要考虑逻辑复用的问题，否则你的项目中将充斥着大量的重复代码。那么 React 是怎么复用组件逻辑的呢？本文将一一介绍 React 复用组件逻辑的几种方法，希望你读完之后能够有所收获。如果你对这些内容已经非常清楚，那么略过本文即可。 我已尽量对文中的代码和内容进…"}, {"id": "6999877777226727454", "title": "【React】知识梳理：React特性", "desc": "React 是一个用于构建用户界面的 Javascript 库。 React 主要用于构建UI，可以认为 React 是 MVC 中的 V（视图）。"}, {"id": "6871114023849426952", "title": "让你的前端组件混沌一下？", "desc": "混沌即混沌工程，首先我们得知道混沌工程是什么。 混沌工程起源于Netflix公司，Netflix公司的工程师创建了一种验证服务可靠性的测试工具Chaos Monkey。使用这个工具，可以在我们的web系统中随机的制造一些麻烦，比如触发网络异常，流量激增，容器退出等异常，我们可以…"}, {"id": "6997286228148092935", "title": "从零开始学习React-开发环境的搭建", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 其实16年的时候就已经接触到React，那个时候也只是入门，时隔多年，工作上一直"}, {"id": "6844903543514595342", "title": "又到了年度总结的季节 ﹣ 我的 2017 前端开发回顾", "desc": "从最初的失望与后悔，到最后的兴奋与感动，2017年可以算是充满挑战与机遇的一年。虽然我依然是一个非科班学生，但是这没有阻止我转行成为前端工程师，反而成为向前迈进的动力之一。如果没有这些经历，我也不会发现自己对于编程的那份热爱。。。在此，就让我回顾一下这一年在自学编程转行的经历吧。"}, {"id": "6942734513772593188", "title": "React 快速上手", "desc": "大家眼里比较牛的框架，甚至有人说三大框架中只有它能称的上一个完整的框架，因为它包含的东西比较完善，包含模板，数据双向绑定，路由，模块化，服务，过滤器，依赖注入等所有功能。对于刚开始学习使用框架的小伙伴们，可以推荐这个框架，学会之后简直能颠覆之前你对前端开发的认知。使用 Type…"}, {"id": "6844903518915002382", "title": "使用 Redux-Arena 组合 React 组件", "desc": "对于 Redux-Arena 的简要介绍，参考这篇文章。 Github 地址在此。 在 React 的各类组件库中，有时为了提高组件的复用性，某些高阶组件的children需要接收一个渲染函数，而不是一个Element。举一个 React-Virtulized 中的 Infin…"}, {"id": "6844903503337373703", "title": "Luy 1.0 ：一个React-like轮子的诞生", "desc": "前言在过去的一个多月中，为了能够更深入的学习，使用React，了解React内部算法，数据结构，我自己，从零开始写了一个玩具框架。 截止今日，终于可以发布第一个版本，因为就在昨天，我跑通了之前的一个小项目。 详情请阅读原文"}, {"id": "6844903607926538254", "title": "揭秘 React 服务端渲染", "desc": "讲解比较到位的 React SSR 实现"}, {"id": "6844903496060239879", "title": "源码看React setState漫谈（二）", "desc": "前面写过一篇setState漫谈(一)谈论了用户操作到页面渲染的过程，相信大家对React的setState机制有了一定了解。这里我们看看setState在生命周期的各个流程里调用都会发生什么。 结论： componentWillReceiveProps中安心调用，对state…"}, {"id": "6896477968513892359", "title": "React学习笔记（一）", "desc": "首先React的官方定义是用于构建用户界面的 JavaScript 库。 它是一个声明式、高效且灵活的用于构建用户界面的 JavaScript 库。 使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作 “组件(component)”。 …"}, {"id": "6959522380020465701", "title": "React源码解析9-其他组件更新", "desc": "1.portal组件更新 1.api返回的$$type为portal 这个和reactElement处于同等级 ReactDOM.createPortal直接返回的一个对象结构就有children 在"}, {"id": "6844903825078239239", "title": "浅浅谈Redux", "desc": "react-redux，其实就是 redux 的 react 版本，方便 redux 在 react 中使用。 而 redux，是 javaScript 应用状态管理容器，是参考 flux 设计模式的一种实现（vue 的 vuex 也是类似的实现），它独立于各种 web 框架但…"}, {"id": "6844903799342006285", "title": "在cc里用class和function实现counter", "desc": "随着CcFragment支持hook了，私底下有小伙伴问我，在 什么 场景下使用hook，才能体现出hook的精髓，以及什么时候支持useStore和useReducer。 为了进一步解释CcFragment和hook，我们来用cc完成一个有意思的counter示例，让大家进一…"}, {"id": "6844903502808875022", "title": "React v16.0正式版发布", "desc": "我们很高兴的宣布React v16.0发布了，这次版本的新增了一些呼声很高的特性，包括支持render返回数组和字符串、错误处理、portals、自定义DOM属性、优化服务器端渲染以及减少文件大小。"}, {"id": "6844903585524760589", "title": "30行代码实现Redux Callbag副作用隔离", "desc": "在过去很长一段时间里，因为我们经历了React，是React带领我们接触了JS函数式编程，之后Redux带领我们了解了elm思想，函数式编程就这样如春笋般的迅猛发展，但是，因为JS不是正统的函数式编程语言，在处理副作用问题上始终没有一个标准的解决方案来处理我们编程过程中的副作用…"}, {"id": "6844903843218587662", "title": "[译]开发类 redux 库来理解状态管理", "desc": "近几年，应我们的 app 增长的需要，web 应用数量增长迅速，随之而来的还有复杂性。为了使增加的复杂性易于处理，应用某些新增的技巧和模式使得开发者可以更简单的处理以及帮助我们建立更加健壮的应用。 其中一个复杂性增长的主要领域是管理我们应用的状态，因此为了避免这种复杂性，开发者…"}, {"id": "6941232401070850084", "title": "React Router的使用", "desc": "附、1. useParams：通过useParams钩子可以获取到当前route的URL参数的键值对 对象; 2. useHistory：通过useHistory可以实现页面的回退功能，useHistory().goBack()"}, {"id": "6844903760506912775", "title": "react render propsGetter", "desc": "通过上篇的介绍，我们可以把一些常见的属性封装到一个辅助方法里，让我们对这部分的使用更加方便。 但这样并不是非常的完美，因为有些时候我们需要获取其部分属性，还有部分场景下可以追加自己的事件。 需要额外注意的是，前面要追加fn &，因为追加的事件是需要显性定义然后才执行的，而如果是…"}, {"id": "6844903650582593543", "title": "[译] 图解 React Native", "desc": "系列博客:用通俗的语言和涂鸦来解释React术语图解React图解ReactNative(本文)组件、Props和State(待翻译)Props和State深入理解(待翻译)ReactNativevs"}, {"id": "6844903633390141454", "title": "Redux源码简析", "desc": "整个redux的实现就是围绕上面的这三点进行实现的，整个源码量不大，理解了核心概念后去看源码会发现源码的结构逻辑非常清晰，代码中的注释也非常全面，本篇文章会按照如何实现核心概念的方式去阅读源码。(默认你已经会使用redux了) 这是 redux 中唯一使用到 reducer 的…"}, {"id": "6844903713111277582", "title": "React源码系列(三): 从ReactRoot的创建到scheduleWork的执行", "desc": "React16源码阅读系列分享 喜欢的可以点个 watch/start 后面还会更新"}, {"id": "6844903617531478029", "title": "React项目实践系列一", "desc": "因为平台的前端技术选型，因此挑选了React为技术框架。并使用create-react-app快速搭建工程。create-react-app为fackbook官方出品的快速搭建React工程的命令行工具，可以减少写各种配置的过程，似于vue的vue-cli和angular的an…"}, {"id": "6844903510933241870", "title": "[译]React v16（新特性）", "desc": "我们很高兴的宣布React v16.0发布了! 这个版本有很多长期被使用者期待的功能，包括： fragments (返回片段类型) error boundaries（处理错误） portals (挂载方式) custom DOM attributes （支持自定义DOM属性） …"}, {"id": "7002616033651621902", "title": "React diff源码解析", "desc": "DIFF核心函数 -- reconcileChildFibers 目的：生成新fiber diff源于脏检查"}, {"id": "6847902222756347911", "title": "手写一个React-Redux，玩转React的Context API", "desc": "上一篇文章我们手写了一个Redux，但是单纯的Redux只是一个状态机，是没有UI呈现的，所以一般我们使用的时候都会配合一个UI库，比如在React中使用Redux就会用到React-Redux这个库。这个库的作用是将Redux的状态机和React的UI呈现绑定在一起，当你di…"}, {"id": "6910839646000054280", "title": "【前端工程化基础 - CLI 篇】Creact React App 是如何实现的", "desc": "关注公众号玩相机的程序员，第一时间阅读最新文章。 create react app 是 React 官方创建单页应用的方式，为了方便，下文皆简称 CRA。 本文主要就是通过源码分析对上述的理解进行阐述。 如果图片不清晰可以微信搜索公众号 玩相机的程序员，回复 CRA 获取。 0…"}, {"id": "6983968806548799519", "title": "React-如何优雅的写一个组件", "desc": "简单组件-jsx 有状态组件-jsx 使用外部数据（通过 this.props 访问） 组件还可以维护其内部的状态数据（通过 this.state 访问） 当组件的状态数据改变时，组件会再次调用 re"}, {"id": "6982560449204060174", "title": "React 18探秘（上）", "desc": "React17那篇没有任何新特性的博客还历历在目，半年多后，终于等来了17铺路许久的18发布计划，本来想赶紧看看都有些啥，无奈事情略多，一直拖到现在，最近有点点时间，看看18给我们带来了什么。"}, {"id": "6999227216152231949", "title": "React Hooks -useContext/useMemo/useCallback详解（2）", "desc": "这是我参与更文挑战的第22天，活动详情查看: 更文挑战 1, useContext 1, 用法 注意： useContext和createContext 要配合使用 2，说明 接收一个 context"}, {"id": "6844903511478697998", "title": "React源码解析(三):详解事务与更新队列", "desc": "在前两篇文章中，我们分析了React组件的实现，挂载以及生命周期的流程。在阅读源码的过程中，我们经常会看到诸如transaction和UpdateQueue这样的代码，这涉及到React中的两个概念：事务和更新队列。因为之前的文章对于这些我们一笔带过，所以本篇我们基于大家都再熟…"}, {"id": "6983139874400370702", "title": "React - Render Props", "desc": "本文是对React官网Render Props的学习总结。 Render Props Render Props是指 React 组件之间使用一个值作为函数的 prop 共享代码的简单技术。 具有 re"}, {"id": "6844903807994822669", "title": "React 服务端渲染从入门到精通", "desc": "这篇文章是我自己在搭建个人网站的过程中，用到了服务端渲染，看了一些教程，踩了一些坑。想把这个过程分享出来。 我会尽力把每个步骤讲明白，将我理解的全部讲出来。 文中的示例代码来自于这个仓库，也是我正在搭建的个人网站，大家可以一起交流一下。示例代码因为简化，所以与仓库代码有些许出入…"}, {"id": "7002617617987043359", "title": "React 源码解析，构建fiber到输出 DOM树流程。", "desc": "react中的render和commit阶段。 从构建fiber树，到输出DOM树的流程，阶段执行相关工作，生命周期。"}, {"id": "6923596523200741390", "title": "Taro入门学习笔记", "desc": "由于去年公司的小程序有跨端需求，于是陆陆续续做了部分基于Taro开发的小程序任务，后来觉得这段摸索的经历可以稍微整理成笔记，顺便分享给新人做参考。 笔记主要针对没有React/Taro经验的新人，如果内容有不准确的地方，还望指出，会及时更正。 这里直接丢官网文档。 由于公司小程…"}, {"id": "6978426273991229454", "title": "react搭建websocket通信架构", "desc": "前言 随着跨端技术的发展,前端开发职能不再局限于浏览器,而是具备了很多客户端开发的能力,比如桌面应用框架Electorn,移动App框架React native. 一般而言,前端同学对http协议非常"}, {"id": "7002531706959839246", "title": "react-redux使用及源码分析（上）", "desc": "react-redux使用及源码分析（上） 一、为何使用react-redux 使用原生 redux，需要在页面中手动获取state和手动触发action，并且还要自己订阅，以便在state发生变化时"}, {"id": "6937859933698261023", "title": "使用IOC解耦React组件", "desc": "IOC（控制反转）是一种编程思想，可以解耦组件，提高组件复用性。 士兵的武器应该是多种多样的，但是在Soldier类内部依赖了Rifle。 理想的状态是：士兵不依赖具体的武器，弹药库里有什么武器，就用什么武器。 在这种情况下，IOC作为弹药库，就派上了用场。 这一步被称为DI（…"}, {"id": "6844903623080542216", "title": "Airbnb: React Native 从选择到放弃", "desc": "Airbnb 最近在 Medium 上发布了一系列文章详细描述了 Airbnb 与 React Native 从选择到放弃的整个心路历程。 对于字多不看的同学，可以简单看一下我下面的小结。 跨平台，实际上有 95% 以上的共享代码率。 统一的 DSL。根据平台也做具体的差异化实…"}, {"id": "6844904031278596104", "title": "React 组件库搭建指南-打包输出", "desc": "重头戏来了。 宿主环境各不相同，需要将源码进行相关处理后发布至 npm。 本节所有代码可在仓库chapter-3分支中获取。 既然是使用typescript编写的组件库，那么使用者应当享受到类型系统的好处。 这样使用者引入npm 包时，便能得到自动提示，也能够复用相关组件的类型…"}, {"id": "6982433531792195621", "title": "React 18 批量更新减少渲染次数", "desc": "概述 React 18 增加了一个新的优化特性，在代码中无需手动处理，就可以支持更多场景下的批量更新 (batching)。本文将说明什么是批量更新，在 React 18 版本以前它是如何工作的"}, {"id": "6844903921241030664", "title": "基于Vue/React项目的移动端适配方案", "desc": "本文的目标是通过下文介绍的适配方案，使用vue或react开发移动端及H5的时候，不需要再关心移动设备的大小，只需要按照固定设计稿的px值布局，提升开发效率。 下文给出了本人分别使用create-react-app搭建的react（create-react-app）项目和使用v…"}, {"id": "6921595077689081863", "title": "还在用 redux 全家桶么? 不如试试更轻量更简单的结构化 hook?", "desc": "最近一段时间, 国内社区基于 React hook 提炼出了一些用于代替 redux 的状态管理库, 基本思路都是利用 hook 来包装 state 和操作 state 的一些方法, 例如 hox. 本文提到的结构化 structured-react-hook 也是其中一种思路…"}, {"id": "6990228578004631565", "title": "react18 批处理解决不必要的render(译文)", "desc": "[原文地址](Automatic batching for fewer renders in React 18 · Discussion #21 · reactwg/react-18 · GitHub"}, {"id": "6844904191584894989", "title": "Jest+enzyme，写 React 单测有点香也有点坑", "desc": "最近在给项目代码补单测，React 项目，第一反应就是成熟的解决方案 Jest + enzyme。按说读读 API，三两下应该就能写好，然而过程中却有点磕碰，遇到一些始料未及的问题。有些是关于 enzyme 的使用方法问题，有些则是对单测思路的理解不够。现在整理出来给大家参考哈…"}, {"id": "6844903827527860232", "title": "React16.8中Hooks详解", "desc": "纯函数：每次输入的参数一样，那么每次返回的结果都相同。不要改全局变量，不要做ajax请求，不要去做异步操作等"}, {"id": "6859912031392825351", "title": "蒲公英 · JELLY技术周刊 Vol.17: 90 行代码实现 React Hooks", "desc": "作为前端开发，与 Chrome 打交道是家常便饭，我们有必要了解 Chrome 调试工具的更新迭代，对日常开发和调试带来哪些帮助和改善。新 Chrome DevTools 集成了 lighthouse，并且在元素审查面板和性能面板都有一定程度的优化，本文还提供了相关特性的视频演…"}, {"id": "6844903976048017416", "title": "React Hooks：如何安全地使用state", "desc": "放松放松，关于安全，等会我给个例子就会很好理解了。没有例子的辅助，好难一下子说明白，也可能是我的表达能力 So So 吧！ React Hooks 是个好东西，它让你可以用纯函数来实现有状态的组件，从此你不用再纠结组件到底是有状态还是无状态，从而在纯函数和类两种实现间徘徊（当然…"}, {"id": "6844904019161251848", "title": "手写 React 系列第一篇之【初始渲染】", "desc": "刚毕业不久，转行前端，自学半年多，之后去找工作，发现工作机会真的很难找，心里焦急万分。这时候前辈鼓励我，稳定心态，你所需要做的就是投资自己，当工作机会真正来临的时候，能够做到一把抓住就可以了。突然觉得这句话很有道理，我想只要每天都有进步，哪怕一时找不到工作，我也不吃亏，顶多不能…"}, {"id": "6844903811878748167", "title": "中后台项目 - 查询表格业务最佳实践", "desc": "查询表格业务是中后台系统最常用的业务系统之一，我相信该业务场景会在你的项目中会大量出现。既然该此场景在项目中大量的出现，所以对其进行必要的封装会极大的提升业务的复用性以及项目的可维护性。以下是不采取封装可能会带来的问题。 以上的几点总结起来就是不利于项目的维护和形成规范。 该业…"}, {"id": "6844903584836878350", "title": "create-react-app 配置scss,ant-design，装饰器，代理，node支持最新语法，express es6 后端，链接mongodb", "desc": "之后就ok了。你引入一个ant的组件试试就知道了"}, {"id": "6844903637534130183", "title": "【译】使用 Webpack 和 Poi 构建更好的 JavaScript 应用", "desc": "Webpack 是一个将你所有的 JavaScript 文件，图片、字库以及 CSS 等打包到一个依赖关系图的构建工具。这使得你可以在源码中使用 require() 来引用本地文件并且决定在最终的 JavaScript 包中如何处理这些本地文件代码。 Poi 是一个零配置的基于…"}, {"id": "6844903550846238728", "title": "redux 和 mobX对比", "desc": "mobX的学习中，你可以听信关于30分钟快速入门的神话，这毕竟不是对一个语言而言的《7天从入门到精通》系列，因为它真的很简单，并且在这三十分钟过去之后，你唯一需要花的时间就是偶尔翻翻文档就可以自如的使用它了。 3. 内存开销对比: 在写redux的action的时候，总是需要用…"}, {"id": "6844903624548548622", "title": "记一次 React 项目的优化（webpack4 插件的使用）", "desc": "这里记录了自己在开发一个 React 项目时使用 Webpack 优化项目的过程，欢迎大家围观点赞或吐槽。 学习 React 时候，写了个个人博客站点。使用 webpack 作为打包工具，在这之前学习 webpack 时候，知道 webpack 有插件可以做资源压缩、抽离，以达…"}, {"id": "6844903834137919501", "title": "React + Antd实现简单的todolist", "desc": "工作中使用vue居多，今天使用 react 来实现一个简易版的 todolist，顺便熟悉一下antd。 1. 使用create-react-app创建项目 2. 安装antd并配置按需加载和less 3. todoList 2. 新建初始数据data.js TodoItem.…"}, {"id": "6844903520672432141", "title": "分享一个自己开发的 react拖拽排序组件", "desc": "列表拖拽排序在开发中，是经常遇到的一个需求。现有的拖拽排序轮子已经很多了，作者为什么开发一个呢？ 正好作者的项目 yapi 需要用到拖拽排序功能，就做了这么一个轮子，专注于列表的拖动排序，不干其他事情。 大家如果用得上，可以关注下，目前还没有添加任何测试代码，大家想用直接复制源…"}, {"id": "6951272732860350501", "title": "redux-saga", "desc": "参考文档1参考文档2博客文档参考1遇到saga监听函数反复执行问题解决参考redux-saga是通过ES6中Generator实现的，本质是一个可以自执行的generator通过dispatch(ac"}, {"id": "6954288784707944456", "title": "react组件化", "desc": "组件 适用ant-design组件 起步安装 试用button组件 配置按需加载：上边组件如果使用就需要全部引用antd.css ,引用别的组件还得import 参考官网使用 容器组件Vs展示组件 基"}, {"id": "6969923615621906462", "title": "React组件进阶", "desc": "一、组件的props props的作用：接收传递给组件的数据 传递数据，给组件标签添加属性 接收数据 函数组件通过参数props接收数据 类组件通过this.porps接收数据 总结 可以给组件传递任"}, {"id": "6844903782912884744", "title": "React状态管理之Context", "desc": "在平时使用react的过程中，数据都是自顶而下的传递方式，例如，如果在顶层组件的state存储了theme主题相关的数据作为整个App的主题管理。那么在不借助任何第三方的状态管理框架的情况下，想要在子组件里获取theme数据，就必须的一层层传递下去，即使两者之间的组件根本不需要…"}, {"id": "6844903714583494663", "title": "深入浅出理解 React高阶组件", "desc": "如果你不知道 Don't Repeat Yourself 或 D.R.Y，那么在软件开发中必定走不太远。对于大多数开发者来说，它是一个开发准则。在这篇文章当中，我们将了解到如何在 React 当中运用 DRY 原则 —— 高阶组件。开始阐述之前，我们先来认识一下问题所在。 假设…"}, {"id": "6844903744224624648", "title": "React v16.7 正式版发布，但没有 Hooks", "desc": "我们的最新版本包含了 React.lazy 的重要性能修复。 虽然没有更改任何 API，但我们仍将其作为次要版本（Minor）而不是补丁（Patch）发布。 React 遵循语义版本控制。也就是说，我们通常对 bugfix 使用补丁版本，对新功能（非破坏性）使用次要版本。但是，…"}, {"id": "6844904021275181069", "title": "React开发日记-react的服务端渲染框架Next.js 的开发体验", "desc": "但其实我们也不应该修改组件的样式，而是让组件通用。"}, {"id": "6844904077659209742", "title": "React Hooks学习指南", "desc": "它发布于2018年10月份的16.7.0-alpha.0测试版本中，当时Facebook已经在生产中使用了一个月，确保了社区不会面临重大的漏洞和问题。由于对于破坏向后兼容的大型重构往往会出现问题，所以React采用了渐进迁移策略（ gradual migration and a…"}, {"id": "6907488444449030158", "title": "react 監聽 search 變化", "desc": "A 頁面中存在查詢表單，表單的更新能被保存，並且在頁面刷新後，保留參數項。 從 B 頁面跳轉到 A 頁面，並攜帶查詢參數。到達 A 頁面後，能獲得參數。"}, {"id": "6844903781822365710", "title": "循序渐进DIY一个react（二）", "desc": "上面有一个注意点，那就是我们设置元素属性的写法是设置property而不是设置attibute。在DOM里面，property和attribute是两种概念。而设置property意味着只有有效的属性才会生效。 在react中，“react element”是一个术语，指的就是…"}, {"id": "6844903497901555726", "title": "夯实JS系列--变量、作用域和内存问题", "desc": "在ECMAScript中，变量分为基本类型和引用类型两种。 基本类型就是存储简单的数据段。而引用类型指的是那些可能由多个值构成的对象。 在ECMAScript中，基本类型包括：Undefined、Null、Boolean、Number和String。 这些基本类型的对象都是按值…"}, {"id": "6844903497662464013", "title": "[翻譯] Modern Javascript Cheatsheet 中文版", "desc": "本文檔整理了各種現代化 JavaScript 開發過程中經常使用到的腳本。 該份指南的目標並不是放在幫助初學者從零基礎到入門，而是為了幫助那些因為 Javascript 新式語法導致可能很難熟悉現代函數庫使用方式 (以 React 做為舉例) 的開發人員。"}, {"id": "6844903798402449415", "title": "【React总结（二）】使用 Render props 复用代码", "desc": "在 React 当中，我们为了代码的复用，我们通常会封装一个组件。 一个组件通常会包含组件的内容样式组成的业务逻辑。一般情况下，我们会把组件的 js，和 css 放在一个地方，并且像 Linux 的哲学一样，一个组件只做一个事情。 那么我们在了解封装组件的时候，通常开发者们都会…"}, {"id": "6844903495921827848", "title": "《深入理解ES6》阅读笔记 --- 解构：使数据访问更便捷", "desc": "如果你正在开发使用数据驱动的应用，那么这一小节的内容对你来讲，就非常重要了，欢迎来到解构的世界。何为“解构”？当我们定义了很多对象和数组，又必须从中提取有价值的数据时，这种行为在ES6中被称为“解构”，解构分为两种：对象解构和数组解构。如果…"}, {"id": "6844903792102785038", "title": "循序渐进DIY一个react（四）", "desc": "注意:下文中,反复提到\"实例\"一词,如无特别交代,它指的是第三篇章的instance的这个概念。 在react中，“component”概念可以理解为一个身份的象征。假如我们将root virtual DOM节点比作virtual DOM世界的周天子的话，那么“componen…"}, {"id": "6844903828089733133", "title": "[英] Elixir, Phoenix, Absinthe, GraphQL, React 及 Apollo 深度分析", "desc": "If you’re anything like me, at least 3 or 4 of the keywords in the title of this article fall under the category of “things I’ve been wanti…"}, {"id": "6844903587584147470", "title": "React Advanced 备忘", "desc": "在这里重点讲一下shouldComponentUpdate,无论是组件的属性发生变化还是状态发生改变都会执行render方法，在render执行之前要先执行shouldComponentUpdate判断一下是否需要更新，并且这个方法我们经常用来优化我们的组件。 有了 Immut…"}, {"id": "6844903844694982670", "title": "React的记录", "desc": "唯一的会在服务端渲染调起的生命周期钩子函数。 验证对象是否为React元素。返回true或false。 返回一个React元素的函数。 Class.contextType，设置当前组件订阅的context。当找不到Provider的时候使用。context值可以在compone…"}, {"id": "6844903557372575751", "title": "Redux系列01：从一个简单例子了解action、store、reducer", "desc": "不少新接触redux的同学，都觉得无从上手。其实，redux的核心概念就是store、action、reducer三个，理解了这三者这件的联系，就会觉得挺简单的。"}, {"id": "6844903576070946830", "title": "react-bits-CN 中文版的", "desc": "有关React，你需要知道的一切"}, {"id": "6844903607943299079", "title": "根据产品需求迭代出来的一个简单好用的React-Input组件", "desc": "如何编写一个debounce input. 如何发布一个React组件到npm. 这年代都讲究个专利注册，一个好听的名字真的比什么都重要，原谅我臭不要脸的把best这个名字提前占有了！真的是先下手为强啊。^_^ react-best-input经过gzip后大概在6KB左右，由…"}, {"id": "6844903618219343880", "title": "redux-logic源码阅读", "desc": "在用React和Redux做开发时, 都会用到异步的一些东西, 之前更多的用的是redux-thunk或者redux-saga之类的, 但是都有用的不顺的地方, 有一次突然发现redux-logic是一个很不错的解决方案, 用起来也感觉很顺手, 与市面上其他redux中间件不同…"}, {"id": "6844903991302717448", "title": "初识 React Hooks - React 组件定义的变革", "desc": "React 在 16.8 版本中发布了 hooks 特性，通过本篇文章大家会了解到 hooks 的基本概念、作用和优势，以及与 class 类型的组件的区别。 Hooks 意思为钩子，与其他编程语言的定义类似，即在 React 代码执行到特定时期时，会自动调用 hooks 中的…"}, {"id": "6844903672799821832", "title": "redux源码分析", "desc": "Redux is a predictable state container for JavaScript apps. 官网第一句就很全面的介绍了redux。一个可预测的状态管理工具。redux 是如何做到的呢？ 为了篇幅减少些，上面的代码我删掉了部分错误检查。其实都很好理解，…"}, {"id": "6918016363256774669", "title": "从零实现react-router部分组件", "desc": "react-router-native。 react-router提供最基本的路由功能，实际使用的时候我们不会直接安装react-router，而是根据应用运行的环境选择安装react-router-dom（在浏览器器中使⽤用）或react-router-native（在rn中…"}, {"id": "6844903510190850056", "title": "[译]React v16（新特性）", "desc": " "}, {"id": "6917593476989190152", "title": "React复习02-其他常用api", "desc": "可以看到我们对count进行了修改，但是子组件全部重新渲染了，这并不是我们想要的。这时候我们可以使用PureComponent进行改写，只对新增的&#x3C;Child/>进行重新渲染 可以看到，只有count变化了的组件才重新渲染，这无疑提高了性能。 当然我们也可以用shou…"}, {"id": "6844903509159051278", "title": "uiw 1.2.14 发布，基于 React 16 的组件库", "desc": "发布， 高品质的UI工具包，React 16+的组件库。 🐞 Paging组调整样式解决默认样式导致排版问题. - 901e511 📝 docs:更新文档样式. - f773502 🐞 fix: 初始化所有组件初始字体大小. - daeda01 🐞 Checkbox组件…"}, {"id": "6844903760393666568", "title": "实现react-router v4（上）", "desc": "用react-router v4可以实现单页面应用，可以将组件映射到路由上，将对应的组件渲染到想要渲染的位置。 react路由有两种方式：一种是HashRouter，即利用hash实现路由切换。另一种是BrowserRouter，即利用html5 API实现路由的切换。本文是在…"}, {"id": "6969097997850247204", "title": "react项目中使用react-devtools v4（react17.0.2）", "desc": "react-devtools(4.0.6)安装教程 react版本（17.0.2） 此版本的安装方式，不同于chrome插件方式"}, {"id": "6844903807382470670", "title": "【译】函数组件和类组件有什么不同？", "desc": "在很长一段时间内，标准答案是class components提供更多的特性（像state）。但随着Hooks的出现，答案就不再是这样子了。 或许你听说过他们中的一个性能可能更好，哪一个？因为各种的判断标准获取都存在缺陷，所以我们需要小心仔细的得出结论。性能的好坏主要取决于什么？…"}, {"id": "6885000986763460615", "title": " 关于 React 性能优化中 re-render 的那些事", "desc": "其中 A 的子组件 B 和 C 分别通过 props 从 A 拿到 a.b 和 a.c，B 的子组件 E 通过 props 从 B 拿到 a.b.e，E 和 C 组件会分别渲染 a.b.e 和 a.c。如果我们调用 this.setState() 改变 a.b.e 的值： 这样…"}, {"id": "6844903858343264269", "title": "重新学习 React (一) 生命周期，Fiber 调度和更新机制", "desc": "React 有一套合理的运行机制去控制程序在指定的时刻该做什么事，当一个生命周期钩子被触发后，紧接着会有下一个钩子，直到整个生命周期结束。 生命周期代表着每个执行阶段，比如组件初始化，更新完成，马上要卸载等等，React 会在指定的时机执行相关的生命周期钩子，使我们可以有机在程…"}, {"id": "6844903543179067399", "title": "react-router 升级小记", "desc": "最近将公司项目的 react-router 从 v3 版本升到了 v4 版本，react-router v4 跟 v3 完全不兼容，是一次彻底的重写。这也给升级造成了极大的困难，与其说升级不如说是对 router 层重写。之前我也将项目的 react 从 v15 版本升级到了 …"}, {"id": "6844903591195443214", "title": "从单向到双向数据绑定", "desc": "用户最满意的，无非就是界面的操作能实事反应到数据。而实现这种的可以有双向数据绑定、单向数据流的形式。双向数据绑定是，ui行为改变model层的数据，model层的数据变了也能反映到ui上面。比如点击按钮，数字data+1，如果我们自己在控制台再给data+1，那么v层也能马上看…"}, {"id": "6844904154133954568", "title": "React受控组件和非受控组件", "desc": "前面提到，HTML的表单元素(如input、textarea、select等)在react中会维护内部的state；而react本身的数据也是由一个state来维护的，将这两者结合起来，react的state将表示该组件的值的变量的值传入表单内部，作为默认值，待表单内部有修改时…"}, {"id": "6844904138690527240", "title": "使用 AST 解析 React TypeScript Component 接口定义", "desc": "团队使用 TypeScript 进行 React 组件开发。开发组件的同时，需要为组件撰写文档（使用 Markdown 编写文档）。文档中需要对组件的 props 定义进行说明。 在开发组件的时候，是编写组件 props 的接口定义。这时候就希望能够偷懒了，直接抽取组件源代码中…"}, {"id": "6994388373938896903", "title": "走走React这条路-为什么用jsx写而不用纯js写react？", "desc": "React是一个构建用户界面的JavaScript库，简单理解就是通过声明式编程将处理好的数据渲染显示在浏览器上。"}, {"id": "6912046820789075975", "title": "nextjs ssr渲染", "desc": "as的功能,在Link后面加上as可以改变url显示的方式,但是原有的功能不会改变,路径的可选修饰符，该修饰符将显示在浏览器URL栏中。 useCallback 的作用在于利用 memoize 减少无效的 re-render，来达到性能优化的作用。还是那句老生常谈的话，“不要过…"}, {"id": "6844903933626826766", "title": "[译] React 16 生命周期函数：如何以及何时使用它们", "desc": "自从我关于这个主题的第一篇文章以来，React 组件 API 发生了显著的变化。一些生命周期函数已被弃用，一些新的被引入。所以是时候进行更新了！ （看看我是如何抵制开 shouldArticleUpdate 的玩笑的？这些就是约束。） 由于这次生命周期 API 有点复杂，我将这…"}, {"id": "6844903648934248456", "title": "Redux流程分析与实现", "desc": "随着应用程序单页面需求的越来越复杂，应用状态的管理也变得越来越混乱，而Redux的就是为解决这一问题而出现的。在一个大型的应用程序中，应用的状态不仅包括从服务器获取的数据，还包括本地创建的数据，以及反应本地UI状态的数据，而Redux正是为解决这一复杂问题而存在的。 redux…"}, {"id": "6844903604743045133", "title": "如何利用GitHub GraphQL API开发个人博客？", "desc": "作为一个程序员，搭建一个个人博客几乎是所有人的需求，一来比较酷，二来也可以记录自己的学习和生活总结。但如果你不是全栈工程师，实现这个需求还是有点麻烦。后端搭建一套现有的前端框架及前端写API都还是有一定门槛的，当然，如果你是大牛当我没说，哈哈哈！ 下面，我将介绍一个特别简单的方…"}, {"id": "6920420641250213901", "title": "React Hook基础使用以及API", "desc": "Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。Hook 不能在 class 组件中使用 React 需要为共享状态逻辑提供更好的原生途径。 hook可以让你在不编写 class 的情况下使用 state 以及其他的 React 特…"}, {"id": "6844904106482466823", "title": "我所理解的React Fiber架构", "desc": "在 react16 没有正式公布以前，业界的人员以为这次的 react16 就叫做 Fiber，足以说明 Fiber 的重要性。fiber 在英文中意为纤维，此处意为比线程还细的单位。Facebook 取名 Fiber 的意思是为了描述一个比线程更小单位的渲染机制。用一句话来描…"}, {"id": "6920488631589142535", "title": "nextjs开发踩坑笔记一", "desc": "在开始之前，聊聊“屁话”。使用nextjs开发项目会达到一个什么目的？如下： 路由懒加载（不是动态路由的概念）。 这里就完成以上目标，也是热和的（刚刚踩完出来的）。 现假设已存在的路由地址有/、/article、/about，每一个页面都需要请求服务端数据。 首屏服务端渲染是前…"}, {"id": "6900556973788528647", "title": "React Portal传送门 - 将子节点渲染到存在于父组件以外的 DOM 节点", "desc": "默认情况，组件的 render 方法返回一个元素时，会被挂在到最近的 DOM 节点上，也就是其父节点。比如这样 Item 组件会被挂载在 className 为 “wrap” 的 div 节点上，Item 返回的内容会被渲染在 App 组件渲染的区域内。 但是有时候我们希望在父…"}, {"id": "6844903728412114951", "title": "[译]React高级话题之Error Boundaries", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 应用中局部UI中的javascript错误按理说不应该导致整个应用的崩溃。为了帮助React用户解决这种问题，React在16.x.x中引入了新的概念-“error boundary”。 什么是“error bo…"}, {"id": "6907387431658455048", "title": "【React全解5】useRef和createContext/useContext详解", "desc": "在原先的文章中，我们知道了 React 的 state 里的变量的值，只要变量的值发生变化更新了一次，那么就会产生新的变量来等于新的值。 无论我先点击 log 再使 n 值+3，还是先使 n 值+3 再 log。都会打印出 3，原因就是因为 useRef 只有一个变量值贯穿始终…"}, {"id": "7002898476388319269", "title": "手撸组件库之文档工具", "desc": "因为最近失业中，便闲来无事，就整了个React组件库（不想面试），主要不喜欢antd，还有一些其他原因。也发过沸点，也有一些好奇实现方案的，所以便有了本文。"}, {"id": "7000613481816784927", "title": "React 系统复习如何做最高效（8.24直播总结 + 百道高频面试题整理）", "desc": "一 前言 哈喽，大家好，我是 我不是外星人 👽 ，8月24号，我作为分享嘉宾，线上参与了一场 《React 系统复习如何做最高效》 的技术分享，接下来我把直播的内容汇总分享给大家。在分享的过程中，也枚"}, {"id": "6975864046058733576", "title": "从Vue2.0到React17——React开发入门", "desc": "找工作时发现有一些公司是以React作为技术栈的，而且薪资待遇都不错，为了增加生存的筹码，所以还是得去学一下React，增加一项求生技能。本文将带你从Vue2.0出发入门React17。"}, {"id": "6986834120290598942", "title": "微前端落地，悬着的心终于放下了", "desc": "微前端上线总结，复杂、冗余的工程架构进行了微前端架构升级，解决系统工程难度大、团队协作难、扩展能力差等问题。"}, {"id": "6997560918418653198", "title": "vite + react + ts 手摸手做项目系列二 （实战篇）", "desc": "传送门 vite + react + ts 手摸手做项目系列一 （项目配置篇） github地址（github的更新速度比文档要快，文档要追加大量注释）github地址 前言 这篇实战篇文章，我改了很"}, {"id": "6944863057000529933", "title": "「react进阶」一文吃透react-hooks原理", "desc": "之前的两篇文章，分别介绍了react-hooks如何使用，以及自定义hooks设计模式及其实战，本篇文章主要从react-hooks起源，原理，源码角度，开始剖析react-hooks运行机制和内部原理，相信这篇文章过后，对于面试的时候那些hooks问题，也就迎刃而解了。实际r…"}, {"id": "7002500475312406558", "title": "React性能优化总结", "desc": "目前在工作中，大量的项目都是使用react来进行开展的，了解掌握下react的性能优化对项目的体验和可维护性都有很大的好处，下面介绍下在react中可以运用的一些性能优化方式；"}, {"id": "7005483671293542430", "title": "一文带你轻松上手 React Hooks", "desc": "一文带你了解 React Hooks 的由来，轻松掌握其基本用法的同时，丰富一些常用小技巧....."}, {"id": "7005484531054542885", "title": "React 原理分析(一)  —— React 设计思想", "desc": "这里是 React 源码分析系列的第一节。看完这篇文章，你可以理解 React 的设计理念。并对 React 源码有一些初步的了解"}, {"id": "6993139082054336548", "title": "react hooks 万字总结", "desc": "前言 自己在掘金上看了也看了很多关于hooks的文章，感觉都讲得不是很详细。而且也有很多的水文。最近自己打算重学react，系统性的再把hooks给学习一遍。 Hooks is what？ react"}, {"id": "7006176256190316558", "title": "React组件生命周期", "desc": "组件生命周期： getInitialState 初始化this.state的值，只在组件装载之前调用一次 如果是使用ES6，可以在构造函数中初始化状态 getDefaultProps 即预先定义好的对"}, {"id": "7007613737012035592", "title": "React源码解析之Scheduler", "desc": "解析源码前，我们明确几个问题： Scheduler是什么，作用是什么？ Scheduler的出现是为了解决什么问题？ Scheduler是一个任务调度器，它会根据任务的优先级对任务进行调用执行。 在有"}, {"id": "7003500796083961870", "title": "react中引入css的方式有哪几种？区别？", "desc": "一、基本介绍 组件式开发选择合适的css解决方案尤为重要 通常会遵循以下规则： 可以编写局部css，不会随意污染其他组件内的原生； 可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成"}, {"id": "7005076296451489805", "title": "React 小册 ｜ Redux 中间件 👾", "desc": "我们再来回顾一下 Redux 中的数据流 UI —————> action（plain）—————> reducer —————> state —————> UI"}, {"id": "7005088725923266567", "title": "React 小册 ｜ CSS 解决方案", "desc": "本篇主要记录 📝 一下 scss + css modules + antd 样式修改的问题 以及 styled-components这个库的使用 时光机 👾 React 小册 - 起步 JSX ✅ ✅"}, {"id": "7005013415240400910", "title": "React 小册 ｜ 路由管理", "desc": "前端路由有两种实现方式 即 URL 的 `hash` 和 H5 的 `history` URL 的 hash 也就是锚点(#), 本质上是改变 `window.location`"}, {"id": "7005866790903529503", "title": "从底层实现看 React 表单方案演进(上)", "desc": "表单对我们来说是个熟悉的不能再熟悉的概念了，常见于各种信息输入的地方，通过表单用户可以提交数据、修改数据或者实现其他更复杂的交互。今天我们在这里聊聊开发中使用的各种 Form 方案是如何演进的。"}, {"id": "7005805936384147469", "title": "理解一下React生命周期函数", "desc": "生命周期总览 https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/ 黄色框的生命周期是在React17.0已经移除的生命周期函数"}, {"id": "7003658015148605476", "title": "基于 高德 + Windvane 的选址工具，纵享丝滑，对高德选址组件说：走你", "desc": "一、背景 1.1 需求 **多个产品和业务方反应：**高德的选址组件不好用，跟demo一样，能不能换一个？\b 1.2 现有方案缺失 于是我查看了菜鸟可能涉及选址的多个App，发现基本还是使用的高德选址"}, {"id": "7001488018091540488", "title": "antd mobile v5 它悄悄的来了", "desc": "在 React 领域里，一直缺少一套靠谱、好用的移动端组件，蚂蚁的 antd mobile v2 年久失修，几乎无人维护，跟 antd 相差甚远，在设计上，也有很多也已经跟不再符合 Alipay De"}, {"id": "6844903992485478414", "title": "React Suspense + 自定义Hook开启数据请求新方式。", "desc": "React发布了Suspense以后，数据请求又有了新思路，我们可以在视图容器的外层包裹一层Suspense，在内部通过向外throw Promise的方式告知Suspense我们的组件还没有准备好，需要展示Loading状态。 第二项参数所需要的fetcher就是自己定义的返…"}, {"id": "6950971476996522015", "title": "封装一个处理 react 异常的最简 ErrorBoundary 组件 🎅", "desc": "错误边界避免一个组件错误导致整个页面白屏不能使用等情况，使用优雅降级的方式呈现备用的 UI，现在让我实现一个通用的 ErrorBoundary 组件"}, {"id": "6844903557859295245", "title": "从零开始搭建React全家桶环境", "desc": "博客地址：地址Github项目地址:地址创建项目创建目录结构安装Webpack编写Webpack配置文件在config目录下新建文件：我们先来写开发环境下的webpack.config.dev.js一"}, {"id": "6844903602851414024", "title": "Immutable 操作在 React 中的实践", "desc": "在谈及 Immutable 数据之前，我们先来聊聊 React 组件是怎么渲染更新的。 state 的更新一般是通过在组件内部执行 this.setState 操作, 但是 setState 是一个异步操作，它只是执行将要修改的状态放在一个执行队列中，React 会出于性能考虑…"}, {"id": "6885678548971945997", "title": "中后台前端搭建经验总结-技术细节篇（一）", "desc": "交易指挥中心是中台基础基础组件化向智能基础组件化升级的战略项目，同时驱动中台核心业务中心的平台化搭建。一期建成优惠监控、库存、订单、商品四大指挥中心系统以及门户，实现中台系统的从零到一的系统建设。 对于我们的前端团队意义在于，积累面向 B 端中后台系统开发经验，沉淀中后组件，配…"}, {"id": "6844903637454422030", "title": "一个小例子搞懂redux的套路", "desc": "随着JavaScript单页应用开发日趋复杂，管理不断变化的state非常困难，Redux的出现就是为了解决state里的数据问题。在React中，数据在组件中是单向流动的，数据从一个方向父组件流向子组件(通过props)，由于这个特征，两个非父子关系的组件（或者称作兄弟组件）…"}, {"id": "6844904111024930824", "title": "React Hooks 系列之1 useState", "desc": "掌握 React Hooks api 将更好的帮助你在工作中使用，对 React 的掌握更上一层楼。本系列将使用大量实例代码和效果展示，非常易于初学者和复习使用。 前提，需要会使用 React Class 的写法，会使用 setState() 和 props。 下面从第一个例子…"}, {"id": "6919682256277602312", "title": "react-virtualized 中文文档~v9.22.3", "desc": "Grid是一个窗口网格。Grid网格只根据当前的水平/垂直滚动位置渲染填充自身所需的单元格。 |autoContainerWidth|Boolean|否|将内部可滚动的容器宽度设为自动。| |autoHeight|Boolean|否|Grid外部的高度设置为自动。这个属性只能和…"}, {"id": "6844903661684932616", "title": "使用 redux-observable 实现组件自治", "desc": "redux-observable 是 redux 一个中间件，使用了 RxJs 来驱动 action 副作用。与其目的类似的有大家比较熟悉的 redux-thunk 和 redux-saga。通过集成 redux-observable，我们可以在 Redux 中使用到 RxJS…"}, {"id": "6941355856239788069", "title": "React router 原理与实现", "desc": "history是一个第三方js库，借鉴HTML5 history对象的理念，在其基础上又扩展了一些功能，用来管理历史记录，可以兼容不同的浏览器和不同的环境，根据不同的环境提供了三种不同的API。 HashHistory：针对老版本的浏览器，主要通过Hash实现。 MemoryH…"}, {"id": "6844904193602371592", "title": "React Hook 概览与最佳实践", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 React 没有提供将可复用性行为 “附加” 到组件的途径（例如，把组件连接到 store）。 解决此类问题可以使用 render prop…"}, {"id": "6844903716751933448", "title": "Ts + React + Mobx 实现移动端浏览器控制台", "desc": "自从使用 Typescript 写 H5 小游戏后，就对 Ts 产生了依赖（智能提示以及友好的重构提示），但对于其 Type System 还需要更多的实践。 最近开发 H5 小游戏，在移动端调试方面，为求方便没有采用 inspect 的模式。用的是粗暴的 vConsole，用…"}, {"id": "6844903695335817224", "title": "个人博客2.0 Admin System", "desc": "这是Blog2.0的后台管理系统，1.0版本直接用的是Django Admin，可塑性确实不太高。 因为工作中有用Vue独立编写后台的经验，所以这次自己用React手撸了一个后台，用了react + react-router-4 + mobx + Google reCAPTCH…"}, {"id": "6935389549342392357", "title": "[译] React Native性能优化：应该做和不应该做的｜技术点评 ", "desc": "在使用一些框架例如React Native去实际开发移动端应用的时候，性能是一个重要的问题。React Native默认情况下的性能是没有问题的，但是在实际开发React Native的时候，我们也可能会遇到一些性能相关的问题。 这些问题是很难通过组件本身修复去解决的。在这篇文…"}, {"id": "6903109255176388621", "title": "如何在class组件中使用hooks", "desc": "前不久在开发中遇到一个问题，在一个基于class component的react项目，想要使用像hooks里的useEffect这样的函数，来监听某些props的变化，每当这些props变化时，都要执行一遍指定的函数。 如果是在一个使用hooks的组件里，想要实现这样的效果直接…"}, {"id": "6993305153533149221", "title": "\"React\"路由传参的两种方式", "desc": "很多场景下，我们还需要在页面跳转的同时传递参数，在react-router-dom中，提供了两种方式进行传参 * url传参 * 隐式传参"}, {"id": "6844903634812010503", "title": "Re0：在Vue里用Service Worker来搞个中间层（React同理）（超详细）", "desc": "事情是这样的，由于后台给的接口是获取源数据的，一开始只是拿来做一些简单图表的展示。但是后来需求越来越复杂，逻辑嵌套深，需要在各个图表之间串联依赖关系，把这一层放在前端来写太蛋疼了，因为业务代码里太多跟业务逻辑没有关系的代码了。这种情况其实就挺适合用node来做一个中间层来解决这…"}, {"id": "6844903896347852813", "title": "由一道React基础面试题引发的思考", "desc": "之前不经意间看到这道题，据说是阿里p5-p6级别的题目，我们先看一下这道题目，明面上是考察对react的了解深度，实际上涉及的考点很多：bind，arrow function，react各种绑定this的方法，优缺点，适合的场景，类的继承，原型链等等，所以综合性很强。 我们今天…"}, {"id": "6973825401336365086", "title": "react源码解析12.状态更新流程", "desc": "react源码解析12.状态更新流程 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心api"}, {"id": "6966868393546743821", "title": "React的数据流方案", "desc": "mobx一款可以与redux媲美的数据流方案，Flux思想单向数据流方案，以 Redux 为代表，Reactive响应式数据流方案。详细可看mobx 单向数据流实现"}, {"id": "6914838967041032206", "title": "受控组件分析(React & Vue)", "desc": "受控组件：组件的值的更新依赖状态值来更新，一定程度上，组件值是恒等于状态值的。 非受控组件：组件值更新由组件自己维护，需要以操作 DOM 的方式来获取组件的值。 不设置 onChange 事件，输入内容，input 并不会渲染出来。因为 input 值的更新，是依赖状态值来更新…"}, {"id": "6844903541455355917", "title": "2017年前端有什么样变化？即将来临的2018有什么样的期待？", "desc": "在即将过去的2017年里，我们回顾：逃不过的三大框架。React 继续在前端领域占据着主导地位，并在 2017 年发布了最受期待的版本之一 - React 16。 它包含了可以实现异步 UI 渲染的 fiber ..."}, {"id": "6844903856611000328", "title": "spa应用中的路由缓存问题与解决方案", "desc": "通常我们在进行页面前后退时，浏览器通常会帮我们记录下之前滚动的位置，这使得我们不会在每次后退的时候都丢失之前的浏览器记录定位。但是在现在愈发流行的SPA(single page application 单页面应用)中，当我们从父级页面打开子级页面，或者从列表页面进入详情页面，此…"}, {"id": "6844903715564945416", "title": "Webpack devServer.proxy反向代理地址模糊相似规则问题", "desc": "在开发模式下请求数据多少会涉及到它里面提供的devServe.proxy即Node.js的反向代理中间件。 Node.js代理很简单。轻松的配置代理服务器中间件连接，快递，浏览器同步以及更多。 假设当我们访问/api135/abc时，也就是真实地址B服务器/api/abc。 此…"}, {"id": "6844904063868354574", "title": "React进阶(3)-上手实践Redux-如何更改store中的数据", "desc": "......"}, {"id": "6844903710070407181", "title": "Typescript 入门写一个 react 进度条组件", "desc": "如果你写过 react 的组件， 这篇文章对与你来说基本没有什么难度。纯粹的是加上了一点 ts 的知识。 我完全是以学习者的姿态来描述我写组件的过程，很多不严谨的地方请大家指出来哈哈。 也可以打开下面 codeSandbox 看一下源代码。 这是一个普通的 UI 组件，难点主要…"}, {"id": "6910117053194207245", "title": "React造轮子系列--参照AntDesign实现Pagination分页组件", "desc": "总分页数&#x3C;=9条时全部展示，直接渲染出全部页码即可。当总页数>9条时，必定出现省略项...，只是位置有所区别，点击省略项功能参考antd的，默认（+/-）5个页码。 当前页数减去4（4为单边最多出现的兄弟项数量）&#x3C;=1时，渲染1-7的连号页码，尾巴渲染省略.…"}, {"id": "6844904176468639751", "title": "仿antd Form.create实现双向绑定", "desc": "首先来看antd里Form的使用案例。这里class函数使用Form.create()包装，经过Form.create()包装后的组件会自带this.props.form属性，这里用到高阶组件的链式调用（注：高阶组件本身是对装饰器模式的应用，可以利用ES7中的装饰器语法来更优雅…"}, {"id": "6863375905499774983", "title": "React Hook 产生的动机", "desc": "完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。 100% 向后兼容的。 Hook 不包含任何破坏性改动。 现在可用。 Hook 已发布于 v16.8.0。 没有计划从 React 中移除 class。 …"}, {"id": "6844903625240608775", "title": "Redux、rematch、dva的替代品：smox", "desc": "halo，大家好，我是132，第一次发文章hhh背景我们平时在开发React项目中，深深的感受到了Redux的“长得丑，用得烦”，有的人去改造它，如dva、rematch，对Redux包装语法糖，也有"}, {"id": "6989595399443087368", "title": "React中使用Redux", "desc": "React中使用Redux redux是什么?redux是状态管理及更新工具,通过派发action来改变状态,使用redux可以使编写的代码可预测可测试,确保代码是按照我们预期的方向执行的。"}, {"id": "6970394727183024135", "title": "React项目中全局修改css的几个方法", "desc": "希望在尽量少修改源代码的情况下开发一套展示系统，只能对数据进行查看，而不能对数据进行操作，比如增删改。解决方案：入口处增加内联样式、 挂载外部脚本、 自开发Webpack Loader"}, {"id": "6844903699249102862", "title": "学习es7的Decorator(顺带写个react高阶组件)", "desc": "1. Decorator基本知识 在很多框架和库中看到它的身影，尤其是React和Redux，还有mobx中，那什么是装饰器呢。 修饰器（Decorator）是一个函数，用来修改类的行为。不是很理解这种抽象概念，还是看代码讲解实际些。 我们可以在外层套一个函数，只要最后返回的是…"}, {"id": "6844904055630725127", "title": "React和Redux中的不可变性(Immutability)", "desc": "今天我们就来探究一下。 这涉及到Javascript中的一个常规概念Immutability。 点击按钮触发click事件，想items中添加新的项，但页面并没有重新渲染把加入的项显示在页面上。 这是因为数组是引用类型，当使用push方法修改当前数组的时候，react的状态管理…"}, {"id": "6844903839707955208", "title": "react离开页面，自定义弹框拦截，路由拦截", "desc": "项目有个需求是：跳转路由，在离开页面前，需要弹框询问用户是否确定离开。"}, {"id": "6934327042226061320", "title": "手撕源码之—从0实现Redux", "desc": "单向数据流，保证的数据的纯净，不被其他操作污染。 subscribe订阅，会将订阅的函数保存在currentListeners中，然后返回unsubscribe函数取消订阅（就是将订阅的函数从currentListeners中删除）。 dispatch派发action，会先执行…"}, {"id": "6868686477971161096", "title": "ReactHooks:为什么useState+setInterval(n+1)数据没有改变？", "desc": "要弄清为什么setN(n + 1)没有生效，要先了解传入的参数值代表了什么含义。 当我们传入n+1，是在告诉react，下一轮的渲染按照我给的值。 因为n是一个变量，所以要确定下来这个变量到底是多少，即n指代的是哪一个。 如果想要将值置为2，需要触发渲染2中的函数才能做到。也就…"}, {"id": "6958642061549502478", "title": "React组件——class组件和函数组件", "desc": "〇、组件和元素的区别 当你在代码中写了一个<div className=\"red\">这是div</div>后 babel会将其转译为React.createElement(\"div\",{classNa"}, {"id": "6966885394088460295", "title": "React 01 :: State & Props ", "desc": "1. React Component的实现方式 React的Component有两种实现方式，Class和Functional，早期版本，Class的Component功能更为强大，可以实现状态管理与"}, {"id": "6844903987284541448", "title": "使用 HooX 管理 React 状态的若干个好处", "desc": "1. 更拥抱函数式组件 从 React@16.8 的 hook 到 vue@3 的composition-api，基本可以断定，函数式组件是未来趋势。HooX提供了函数式组件下的状态管理方案，以及完全基于函数式写法的一系列 API，让用户更加的拥抱函数式组件，走向未来更进一步。…"}, {"id": "7007435255649042463", "title": "Server Component 思想在应用中心的改良", "desc": "背景 应用中心是一个许多场景都常见的需求。近段时间，React Server Component 逐渐火了起来。虽然暂时没法上生产，但也给应用的实现方式带来了一种可能。本文面向加密应用的场景，对 Se"}, {"id": "7005342465532100644", "title": "百万PV商城实践系列 -\b团队接口请求封装实践", "desc": "简介 本篇文章是商城实践系列的第三篇文章，主要为大家带来在项目开发时对接口请求的一些配置，以及接口映射是如何去做的。"}, {"id": "7007632162224603144", "title": "漫谈 react 系列(一)：初探 react 的工作过程", "desc": "本文使用「署名 4.0 国际 (CC BY 4.0)」 许可协议，欢迎转载、或重新修改使用，但需要注明来源。 现在 react 18 已经进入了快速迭代期 ..."}, {"id": "7004648498423398431", "title": "翻译翻译，什么叫ReactDOM.createRoot", "desc": "我们常常写上ReactDOM.createRoot(root).render(<App />)，那么ReactDOM.createRoot(root)究竟做了什么，让我们来一探究竟"}, {"id": "6995334008603148295", "title": "百万PV商城实践系列 - 前端长列表渲染优化实战", "desc": "在项目中，我们或多或少都会经历一些长列表渲染的难题，本篇文章就为大家详细的解析这类场景的解决方案。内容相对易上手，并不涉及复杂的逻辑，效果立竿见影。还等什么呢，\b快来看看吧。"}, {"id": "7006612306809323533", "title": "React Fiber 简介 —— React 背后的算法", "desc": "React Fiber 简介 —— React 背后的算法 在这篇文章中，我们将了解 React Fiber —— React 背后的核心算法。React Fiber 是 React 16 中新的协调"}, {"id": "7007436000393691150", "title": " 🌮 React 入门学习（十二）-- React 路由跳转", "desc": "1. push 与 replace 模式 默认情况下，开启的是 push 模式，也就是说，每次点击跳转，都会向栈中压入一个新的地址，在点击返回时，可以返回到上一个打开的地址， 就像上图一样，我们每次返"}, {"id": "7007795149245775885", "title": "2021 年的 React 世界", "desc": "2021 年的 React 世界 2021 年，构建 React 应用的最佳方式是什么？自从 2016 年来，都发生了哪些变化？哪些是如今人们每天都在用的库？ 我从 2016 年开始使用 React。"}, {"id": "7003173903103164447", "title": "mdebug 基于React开发的web调试工具", "desc": "mdebug是腾讯新闻TNTWEB团队推出的基于React开发的web调试工具, 沉淀自腾讯新闻微信手q双插件多年的移动web开发实践中。"}, {"id": "7006265559109091342", "title": "🌮 React 入门学习（十一）-- React 路由传参", "desc": "引言 在上一篇中，我们学习了 React 中使用路由技术，以及如何使用 MyNavLink 去优化使用路由时的代码冗余的情况。 这一节我们继续上一篇 React 路由进行一些补充 🍈 1. Switc"}, {"id": "7007432019802079246", "title": "移动WEB开发会用到的 5 个API", "desc": "作为开发人员，经常使用 Web API 来轻松实现复杂的功能，或者创建它们来抽象复杂性。Web API 允许服务之间进行对话，分享信息到朋友圈或显示地图等操作。 可以将用于构建客户端 Web 应用程序"}, {"id": "7006572195660972045", "title": "【微笔记】好的编码习惯对应好的React性能", "desc": "React组件分为两种，类组件和函数式组件。 类组件 当一个组件的 props 或 state 变更，React 会将最新返回的元素与之前渲染的元素进行对比，以此决定是否有必要更新真实的 DOM。当它"}, {"id": "7006117623335223333", "title": "教你三分钟学习一下react基础语法", "desc": "以下代码全部在react脚手架环境下执行 样式处理 函数组件 类的基本使用 extends小练习 类中继承的小练习 类组件的基本语法 将组件拆分到单独的文件中 类组件的状态 类组件state的简写 r"}, {"id": "7000530780057239565", "title": "vue、react函数式编程", "desc": "函数式编程 JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可"}, {"id": "7005365798604636167", "title": " 🌮 React 入门学习（十）-- React 路由 | 文末送礼", "desc": "这是 React 学习发布的第十篇博客，文末准备了小礼品，欢迎大家参与，非常感谢读者的支持！ 引言 在我们之前写的页面当中，用我们的惯用思维去思考的话，可能会需要写很多的页面，例如做一个 tab 栏，"}, {"id": "7006930144266829855", "title": "在Redux中实现Lazy-Load，能让你少写很多dispatch语句", "desc": "1 何为 LazyLoad LazyLoad，用中文来说就是延迟加载或惰性加载。即一个变量，在被调用的时候，才开始加载自身的内容。这样子可以避免首屏加载时间过长导致的体验不佳。在日常开发中，我们经常会"}, {"id": "6989751020255445005", "title": "百万PV商城实践系列 - 前端图片资源优化实战", "desc": "本文主要以商城实例做为切入点，对项目中经常出现的图片资源列举了对应场景下的解决方案，如果项目中碰到非常多的图片资源，那么可以尝试下文中的一些优化方案。"}, {"id": "6990511054224621598", "title": "前端组件化实战之 Button", "desc": "每个前端都应该拥有自己的组件库,就像每个夏天都有西瓜🍉。本期延续上期的组件工程化的主题，夏日炎热，点上一杯杨枝甘露，和洛竹赴一场 Button 开发之约吧。"}, {"id": "7005051399100710949", "title": "可视化生成页面（2）", "desc": "面向开发者，通过可视化方式搭建前端界面。在第一版的基础上，完成了第二版的开发计划，加入了组件的支持，部分样式可视化的支持。"}, {"id": "7006481452925714445", "title": "为什么在 React 中不推荐使用 setCount(count+1) 这种写法", "desc": "这是我们的一个基础组件： 当我们点击按钮的时候， count 的数量会加 1。如果我们的 handleClick 只有一条语句，确实不会有问题，但是如果我们的 handleClick 是如下的格式呢："}, {"id": "6844903512195727373", "title": "React组件：为什么调用顺序是constructor -> willMount -> render -> DidMount", "desc": "虽然常用React、redux编写SPA，但是这一块是如何运作，应该如何优化，还是比较困扰，最近开始阅读程墨的《深入浅出React和Redux》，结合之前读过的React源码和相关源码的文章后，打算从源码的角度，解释下书中的一些内容。 从流程上来看，发现了以前我的想当然错了！就…"}, {"id": "6945069976390729764", "title": "记一次react不正当操作state引发的bug", "desc": "一个表单里，用户对之前填写的数据进行修改，原始数据存在redux里，用户修改后会把redux里的数据进行更新，当内容有修改时保存按钮才可以点击，否则保存按钮处于置灰状态，数据是否有修改是通过componentWillReceiveProps新旧redux中的数据diff操作（用…"}, {"id": "6954636599892279304", "title": "React 中的 this 指向", "desc": "将箭头函数赋值给 ES 类的属性值，这意味着，新实例被创建时，函数就会被重新定义,丢失了JS实例共享原型方法的优势"}, {"id": "6844903917508100103", "title": "小哥哥, React SSR 要不要了解下-实用篇", "desc": "来到皇冠赌场的大家那肯定是丈二的和尚, 摸不着头脑呀. 那么路由就应运而生了, 关于路由的原理建议大家看看这篇文章. 如果你看了还回来了, 那说明还是我们澳门 XXXX 更加的有意思 😹. 那么我们就开始, 创建几个页面. 页面的代码结构如下图所示. 为了便于各个 level…"}, {"id": "6844904160328941576", "title": "React Concurrent Mode 之 Suspense 实践", "desc": "自从三大框架成型之后，各个框架都为提升开发者的开发效率作出了不少努力，但是看起来技术革新都到了一个瓶颈。除了 React 引入了一次函数式的思想，感觉已经没有当初从DOM时代到数据驱动时代的惊艳感了。于是 React 将精力放在了用户体验上，想让开发者在不过多耗费精力的情况下，…"}, {"id": "6844903726642102285", "title": "React Hooks 深入不浅出", "desc": "这个标题可能不太好，但此文章确实不是一篇使用教程，而且也不会覆盖太多点，建议时间充裕的还是应该完整地看下 官网文档。 React Hooks 对于部分人来说可能还是陌生的，但还是阻止不了它成为了当前 React 社区里「最」热门的一个词汇。 一开始了解到这个还是 Dan Abr…"}, {"id": "6844903597386235912", "title": "精读《插件化思维》", "desc": "本周精读内容是 《插件化思维》。没有参考文章，资料源自 webpack、fis、egg 以及笔者自身开发经验。 用过构建工具的同学都知道，grunt, webpack, gulp 都支持插件开发。后端框架比如 egg koa 都支持插件机制拓展，前端页面也有许多可拓展性的要求。…"}, {"id": "6957882251384193055", "title": "React性能优化之useCallback与useMemo", "desc": "随着我们的项目中对于函数式组件和hooks的使用越来越频繁，组件越来越小，我们需要从每一个小点做好性能的优化处理，善用useMemo和useCallback，可以让我们的项目性能得到显著提升"}, {"id": "6916531999214108679", "title": "前端图片裁剪_react-cropper.js之图片跨域处理", "desc": "前后端分离后，图片往往存储在云服务上，导致了前端请求跨域问题CORS。"}, {"id": "6844903945404432397", "title": "在 React 中实现 Angular 的依赖注入", "desc": "最近我一直在写关于Angular的博客，这不是偶然的！ Angular是一个了不起的框架，为前端技术带来了大量创新，背后有一个伟大的社区。 与此同时，我正在开展的项目有各种不同的需求，有时我需要考虑不同的选择。 我过去使用的另一项伟大技术是React。 我不想将它与Angula…"}, {"id": "6844903620400381960", "title": "详解Parcel：快速，零配置web应用打包工具", "desc": "译者按： 新一代Web应用打包工具Parcel横空出世，快速、零配置的特点让人眼前一亮。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 虽然webpack提供了非常多灵活的配置，但是与之带来的是复杂度的提升，而Parcel却非常的简洁。Pa…"}, {"id": "6844903503463186446", "title": "Webpack 核心开发者 Sean Larkin 盛赞 Vue", "desc": "dev.io 近日邀请了 Webpack 核心开发者 Sean Larkin 回答开发者提问，其中几个问提比较有意思，和掘金的小伙伴们分享一下。 有一个开发者问 Sean 如何成为一个热门项目的核心作者。Sean 没有一上来就说该做什么，而是先告诉提问者需要明确自己是否对该项目…"}, {"id": "6968484126785536013", "title": "Create React App From Scratch", "desc": "本文将介绍在不使用create-react-app的情况下如何一步步地新建一个包管理工具为Yarn 2(berry)、构建工具为Webpack、使用Typescript编写的React项目。"}, {"id": "6844903784569634830", "title": "浅谈React Hooks", "desc": "在web应用无所不能的9012年，组成应用的Components也越来越复杂，冗长而难以复用的代码给开发者们造成了很多麻烦。比如： 与其他语言中的class概念差异较大，需要对事件处理函数做bind操作，令人困扰。另外class也不利于组件的AOT compile，minify…"}, {"id": "6865305991475527694", "title": "React Hooks在SD-WAN项目中实践", "desc": "该数据结构是一个通过链表实现的树的结构，整个React的阶段可分为Render Phase、Pre-Commit Phase以及Commit Phase，Fiber的设计初衷是利用浏览器渲染过程中剩余的时间碎片来进行render，而要达到这个目的需要能够对渲染过程的工作进行暂停…"}, {"id": "6950580593939709960", "title": "react进阶（90%+的api）", "desc": "我们用react开发的时候，真正用到的React的api少之又少，基本停留在Component,React.memo等层面,实际react源码中，暴露出来的方法并不少，只是我们平时很少用。但是Reac"}, {"id": "6844903891029475341", "title": "在项目中的更换 React Hooks 注意事项", "desc": "React 官方有说建议使用Hooks来管理你的项目，不过React 也说过不会放弃Class，网上说了一堆Hooks的说法。可是都是复制粘贴居多。 Hooks出了好一段时间了，我今天才去了解，谷歌上也给出了很多解决方案了。 其实hooks的这种写法也不是很新鲜的事，早在ant…"}, {"id": "6844903969500692487", "title": "React踩坑笔记 —— React", "desc": "Webpack提供了自己的导入方式require.include，但同时也支持commonjs规范或AMD规范的require语法，而Node.js使用的就是common.js，ES6的语法Import也会被Babel转化成commonjs格式或者是AMD格式。 JS中的全局调…"}, {"id": "6844903966279483406", "title": "constate 原理解析", "desc": "constate 是一个基于 React Hooks 和 React Context 的轻量级状态管理库。 constate 的主要功能是将自定义 Hooks 的执行结果提升到 Context 中，利用 React Context 通信机制，把结果提供给子组件消费使用，从而实现…"}, {"id": "6844903679284215815", "title": "redux  && react-redux源码解析", "desc": "昨天有人让我把他当小白讲讲redux,我表示理出来的逻辑并不是很明确，他可能是在教我如何写文章吧，我对自己写的东西，并不是很负责，目的一直停留在增强自己的短时间记忆，我会安排时间将之前的文章做逻辑性梳理，当然先从这篇开始。 主要导出getState,dispatch,subsc…"}, {"id": "6844903617212710919", "title": "基于 MobX 构建视图框架无关的数据层-与 Vue 的结合(1)", "desc": "几周前我写了一篇文章描述了 mobx 与 angularjs 结合使用的方式及目的 (老树发新芽—使用 mobx 加速你的 AngularJS 应用)，这次介绍一下如何将 MobX 跟 Vue 结合起来。 我们知道，mobx 跟 vue 都是基于 数据劫持&依赖收集 的方式来实…"}, {"id": "6844903568797859854", "title": "FCC成都社区-React技术专场交流活动", "desc": "一场围绕React技术的高质量、高标准、高干货的技术分享与交流的活动"}, {"id": "6844903504746971143", "title": "Thinking in React Implemented by Reagent", "desc": "本文是学习Thinking in React这一章后的记录，并且用Reagent实现其中的示例。 构造恰当的数据结构 从静态非交互版本开始 追加交互代码 Since you’re often displaying a JSON data model to a user, you…"}, {"id": "6844903636582023176", "title": "[译] 从设计师的角度看 Redux", "desc": "“花哨的后端技术。” “我听说过，但不知道是干什么用的。好像是一个 React 框架？” “是一种在React 应用中存储管理状态的更好方式。” 这个问题我曾问过不下于40个设计师。上面列出的是他们的经典回答。他们中不少人都知道 Redux 是和 React 一起工作的，并且它…"}, {"id": "7008062138241515527", "title": "使用babel-standalone实现动态预览React组件", "desc": "使用babel推出的babel-standalone库进行编译在线编辑的代码，同时输出编译好之后的组件且支持IE11浏览器。"}, {"id": "7006916349322592287", "title": "React render流程解析", "desc": "学习react源码首先从react入口函数开始学习，这篇文章你将学习到如何进行调试代码和学会react render执行流程。"}, {"id": "7006553589699215390", "title": "React基础笔记", "desc": "- Facebook 起草的 JS 扩展语法 - 本质是一个 JS 对象,会被 bable 编译,最终会被转化为 createElement"}, {"id": "7006321216780763149", "title": "How to use React Ref【译】", "desc": "使用 React ref 并真正理解它可以使用在两种不同的场景。一种是作为实例的变量，另一种是DOM。"}, {"id": "7005122334579228679", "title": "构建一个基于react+express多页面网站应用-开发环境(前端篇)", "desc": "[toc] 为什么要自己配置 webpack 目前社区提供的基于webpack的前端打包方案很多 umi create-react-app 等，但是查看对应的文档后，它们所能配置的MPA(多页面应用)"}, {"id": "6924566880120373256", "title": "奇怪的useMemo知识增加了", "desc": "只有在依赖项改变后才会重新计算新的memoizedValue。 我们有个全局context —— AppContext。 由于同学们偷懒，随着项目的迭代，新增的context都选择放在AppContext里，导致AppContext包含的内容越来越多。 现在我们有个Tree组件…"}, {"id": "6994645994625302558", "title": "React 自定义 Hook  倒计时", "desc": "通过React Hook 自定义一个 计时器 Hook。可以满足短信倒计时，支付倒计时等倒计时场景需求。"}, {"id": "6992777460404191268", "title": "再探React Hooks", "desc": "接上文一文读懂React Hooks，本文会继续探索剩余一些API。 useReducer 我们先来看用法const [state, dispatch] = useReducer(reducer,"}, {"id": "6940873220618731551", "title": "React 面试必知必会 Day1", "desc": "1. 什么是 React？ React 是一个开源前端 JavaScript 库，用于构建用户界面，尤其是单页应用程序。它用于处理 Web 和移动应用程序的视图层。React 是由 Facebook 的软件工程师 乔丹·沃克 创建的。React 于 2011 年在 Facebo…"}, {"id": "6975721860780687368", "title": "一个“中用”的前端国际化方案，请注意查收", "desc": "国际化是一件如果你不在意ta，ta会让你很头疼，很痛苦的事情，像是一种习惯，还是早养成为好，等最后再去弄，你会感叹怎么这么多东西要翻译，所以一套整合好的国际化解决方案就很有用"}, {"id": "6844904197331091464", "title": "一文带你看懂 UmiJS （3.x版本）", "desc": "Umi是蚂蚁金服的底层前端框架，我用这个框架也有一段时间了，但是网上umi相关的文章甚少呀，特别对于是3.x版本，本文就来简单介绍一下umi框架。 从3.0版本开始它们的slogan就改成了插件化的企业级前端应用框架，插件这个概念让整个umi框架的扩展性大大提高，插件让框架支持…"}, {"id": "6844904035099623437", "title": "从零搭建完整的React项目模板(Webpack + React hooks + Mobx + Antd) 【演戏演全套】", "desc": "本篇文章讲述从零搭建React中后台项目框架模板，方便快速进行具体项目开发。包括Webpack5.0配置及打包优化、React全家桶使用（React + React-router + Axios + Mobx + Antd）、ESLint等项目开发规范等。 升级项目中全部依赖库…"}, {"id": "6971212915110215717", "title": "React学习第三天---Virtual DOM 及 Diff 算法（实现VirtualDOM）（二）", "desc": "这是我参与更文挑战的第8天 今天我们来学习怎么创建一个Virtual DOM对象，和将virtualDOM对象怎么转化成一个realDOM对象 创建 VirtualDOM 对象 通过上篇文章我们已经知"}, {"id": "6995000587620204574", "title": "React 性能优化：网络性能（自动化按需加载）", "desc": "在性能优化中，有一块很重要的部分 -- 网络性能优化（自动化按需加载）。 什么是自动化按需加载呢？在应用加载的过程中，我们不会将所有的资源一次性加载到前端；而是选择加载页面/功能相关的部分资源。"}, {"id": "6959372766114119688", "title": "深入理解 useEffect 和 useLayoutEffect 中回调函数的执行时机", "desc": "或许你知道 useLayoutEffect 的回调函数是在提交阶段同步执行，但 useEffect 的回调函数是何时执行呢？在虚拟 DOM 树中它们的执行顺序又是怎样的呢？"}, {"id": "6844903624938635272", "title": "为何我们要用 React 来写小程序 - Taro 诞生记", "desc": "自 2017-1-9 微信小程序（以下简称小程序）诞生以来，就伴随着赞誉与争议不断。从发布上线时的不被大多数人看好，到如今的逐渐火热，甚至说是如日中天也不为过，小程序用时间与实践证明了自己的价值。同时于开发者来说，小程序的生态不断在完善，许多的坑已被踩平，虽然还是存在一些令人诟…"}, {"id": "6844903617951072264", "title": "多端统一开发框架 - Taro", "desc": "Taro 支持用 React 的开发方式编写一次代码，生成能运行在微信小程序、H5、App 端(React Native) 等的应用。"}, {"id": "6953921338687881223", "title": "面试官:React 中如何做性能优化? 我:😰 ?😰 ? 😰 ?", "desc": "虽然 React 提供了Virtual DOM/DOM Diff  等优秀的能力来提高渲染性能，但是在实际使用过程中，我们经常会遇到父组件更新，不需要更新子组件的场景，此时必须考虑利用 React 的"}, {"id": "6988379810393227300", "title": "【react】自适应宽度折叠面包屑组件", "desc": "背景 最近项目中需要实现一个自适应宽度并折叠成下拉菜单的面包屑组件，面包屑组件实现已经有很多组件库可以参考，但是宽度自适应折叠需要进行实时计算了。 问题拆解 首先是宽度自适应，需要获取面包屑的显示宽度"}, {"id": "6844904133976129550", "title": "使用 React Hooks 实现仿石墨的图片预览插件（巨详细）", "desc": "最近工作中需要制作一个图片预览的插件，在参考了很多产品（掘金、知乎、简书、石墨等）的图片预览之后，最终还是觉得石墨的比较符合我们的产品需求。 本来以为能在社区中找到相关插件，但想法美好，现实却很骨感，于是便决定自己手撸一个，顺便也学习一下组件的开发流程。 项目最终的实现效果如下…"}, {"id": "6999935646244536351", "title": "react-router-dom API 详解，入门（一）", "desc": "API Hooks（钩子） useHistory 该useHistory钩子，可以进行路由导航。 useLocation 该useLocation钩子返回location表示当前URL对象。您可以将其"}, {"id": "6982434139916107812", "title": "睡前小故事——Diff", "desc": "2021年的某个夏天，太阳依旧很耀眼，路边的知了争相嘶吼，道不出与炎日的情愫。我穿着心爱的人字拖，去xx科技公司应聘。面试官说：前一个面试者很有趣**让我康康你和他比有没有不一样的东西**。"}, {"id": "6844904159485886478", "title": "React + TypeScript + Hook 带你手把手打造类型安全的应用。", "desc": "TypeScript 可以说是今年的一大流行点，虽然 Angular 早就开始把 TypeScript 作为内置支持了，但是真正在中文社区火起来据我观察也就是没多久的事情，尤其是在 Vue3 官方宣布采用 TypeScript 开发以后达到了一个顶点。 本文所使用的所有代码全部…"}, {"id": "6945715972086956039", "title": "React 实现图片上传和展示功能 ", "desc": "该需求涉及到许多零散的知识点，遂以此文做总结记录，下面将介绍思路和具体的实现代码。 通过设置其 multiple 属性和 accept 属性可以使得 input 标签支持多选和仅支持选择 gif、jpg/jpeg 和 png 类型的文件。 当点击标签时，则可以从文件系统中选择照…"}, {"id": "6991782689414053919", "title": "React源码系列之四：hooks之useEffect", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第二篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6927669179260600334", "title": "react项目从新建到部署", "desc": "react 脚手架初始化，社区比较火的有cra（create-react-app）和umi，从以下几点进行对比最终选择了比较贴合项目的umi。 易用性，开箱即用。umi内置了许多功能，可是也带来很多限制，譬如对项目结构的规定提供自己生态的插件需要学习成本，cra初始化简洁选取模…"}, {"id": "6966180503003070500", "title": "React：完整的生命周期及方法", "desc": "组件从被创建到被销毁的过程 被称为 组件的生命周期。在具有许多组件的应用程序中，当组件被销毁时释放所占用的资源是非常重要的。"}, {"id": "6844903807269208072", "title": "[译] 深入 React Hook 系统的原理", "desc": "我们将会一起查看它的实现方法，由内而外地学习 React Hook。 我们都已经听说过了：React 16.7 的新特性，hook 系统，并已在社区中激起了热议。我们都试用过、测试过，对它本身和它的潜力都感到非常兴奋。你一定认为 hook 如魔法般神奇，React 竟然可以在不…"}, {"id": "6850418117534253069", "title": "超详细React Hook实践指南", "desc": "React Hook是React 16.8版本之后添加的新属性，用最简单的话来说，React Hook就是一些React提供的内置函数，这些函数可以让Function Component和Class Component一样能够拥有组件状态（state）以及进行副作用（side …"}, {"id": "6995905433126830093", "title": "晚餐时间带你手写redux/react-redux与常用中间件原理实现｜ 8月更文挑战", "desc": "react进行开发项目时,总是需要一个状态管理工具,在react中redux并非为了react而设计.这样在我们使用的过程中就没有那么方便,所以就有了react-redux,dva之类的解决方案."}, {"id": "6943094258307956766", "title": "面试官叫我手写 redux-thunk", "desc": "学生：方，今天我面试又挂了。 学生：面试官先是问 Redux，我按照你的押题答上来了。但是他又补了一句，你知道 redux-thunk 吗？它有什么用 再简化一点就是：发现 action 是函数就调用它。 还有一种办法是直接发请求，得到数据之后创建「更新数据」的 action。…"}, {"id": "6944858514707709965", "title": "无废话快速上手React路由", "desc": "可以看到，刚开始的路径是 '/' ，然后跳转到 '/home' ，再点击按钮，通过 replace 方法跳转到 /about 页面。最后通过浏览器的回退按钮返回到了 / 页面，说明中间的 /home 没有被存在浏览器的记录里 go 方法顾名思义，是用于跳转到指定路径的。 当参数…"}, {"id": "6959120891624030238", "title": "React 渲染流程", "desc": "想要知道 `React` 的内部运行机制，实际上就是要探索 `React` 如何将组件映射屏幕，以及组件中的状态发生了变化之后 `React` 如何将这些「变化」更新到屏幕上。"}, {"id": "6856745070709473293", "title": "2020年了，还不来点新鲜的node.js项目？", "desc": "使用cookie实现持久化登录, 同时对cookie部署了XSS和CSRF攻击的基础防御措施。 用户上传的房屋信息将采用云上方式存储，避免Datebase压力太大。详细内容看这里：Cloundinary 用户将可以通过提供Google帐户信息来通过Google登录来登录app。…"}, {"id": "6844904153584500749", "title": "React Hooks 系列之3 useContext", "desc": "掌握 React Hooks api 将更好的帮助你在工作中使用，对 React 的掌握更上一层楼。本系列将使用大量实例代码和效果展示，非常易于初学者和复习使用。 今天我们讲讲 Context 对象和 useContext 的使用方法。 考虑这样一种场景，如果组件树结构如下，现…"}, {"id": "6914112105964634119", "title": "深入详解React生命周期", "desc": "React17将只提供别名，取个别名的目的就是恶心你，不让你使用。 getSnapshotBeforeUpdate() 在最近一次的渲染输出被提交之前调用。也就是说，在 render 之后，即将对组件进行挂载时调用。 componentDidUpdate() 会在更新后会被立即…"}, {"id": "6988071129000706061", "title": "React 学习之路由（React Router）", "desc": "本文就 React 周边库 react-router 入手，简要介绍其提供的相关组件使用及示例说明，后续考虑研究一下其源码实现..."}, {"id": "6989072780247433253", "title": "hooks 系列四：useRefs", "desc": "useRef 返回一个可变的 ref 对象，其 current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。"}, {"id": "6992435557456412709", "title": "React 18 用 createRoot 替换 render", "desc": "React 18 提供了两个 root API，被称之为 Legacy Root API 和 New Root API，本文主要对这两个 API 做简单的介绍。"}, {"id": "6844903667900874766", "title": "少侠，留步，图片预览术", "desc": "少年，我看你骨骼精奇，是万中无一的武学奇才，我这有本《图片流》秘籍，见与你有缘，就送于你了。 本文所说的图片流就是读取本地图片，并在页面使用文件流的方式显示出来。 paste事件提供了一个clipboardData属性，是一个DataTransfer类型的对象，前面我们说到，拖…"}, {"id": "6974861465496846372", "title": "React学习第六天---Virtual DOM 及 Diff 算法（类组件的更新）（五）", "desc": "这是我参与更文挑战的第18天 使用setState方法实现类组件更新 先声明有state状态的一个类组件 首先在src/index.js设置一个类组件Alert,设置类组件state有一个Title属"}, {"id": "6995733849141592100", "title": "React源码 - 状态与副作用", "desc": "本节从`fiber`视角出发, 总结了`fiber`节点中可以影响最终渲染结果的 2 类属性(`状态`和`副作用`)."}, {"id": "6844903801120358407", "title": "react-dnd 用法详解", "desc": "本文详细讲解了 react-dnd 的 API 以及用法，并且附上了可供参考的 Demo，希望能够给需要的朋友提供一下帮助。 React DnD 是一组 React 高阶组件，使用的时候只需要使用对应的 API 将目标组件进行包裹，即可实现拖动或接受拖动元素的功能。将拖动的事件…"}, {"id": "6844903865716834318", "title": "基于前端技术生成PDF方案", "desc": "需求分为两步：报告预览和报告生成。 报告预览在前端进行展示，可使用前端技术，如React/Vue等技术栈对其进行还原，数据从服务端获取。 体检报告展示形式如下，格式相对固定，分为四个页面：个人信息页，建议页，原理页，个人信息页与建议页数据来源于服务器。 canvas是HTML5…"}, {"id": "6968748614138986527", "title": "eruda-pixel 前端用了这工具，再也不怕 UI 验收了-原理篇", "desc": "基于移动端调试工具 eruda 开发的一款 UI 高精度还原辅助工具，设计师验收页面利器。 原理是把设计图插入到页面中，降低设计图透明度。然后进行对比。"}, {"id": "6971242638716436487", "title": "浅谈React17事件机制", "desc": "先看官网对17版本的介绍： React v17 中，React 不会再将事件处理添加到 document 上，而是将事件处理添加到渲染 React 树的根 DOM 容器中： 在 React 16"}, {"id": "6844903813070094350", "title": "探React Hooks", "desc": "众所周知，hooks在 React@16.8 中已经正式发布了。而下周周会，我们团队有个同学将会仔细介绍分享一下hooks。最近网上呢有不少hooks的文章，这不免激起了我自己的好奇心，想先行探探hooks到底好不好用。 react hooks在其文档的最开头，就阐明了hook…"}, {"id": "6844903989834678279", "title": "React 中获取数据的 3 种方法：哪种最好？", "desc": "为了保证的可读性，本文采用意译而非直译。 在执行 I/O 操作（例如数据提取）时，要先发送网络请求，然后等待响应，接着将响应数据保存到组件的状态，最后进行渲染。 在 React 中生命周期方法、Hooks和 Suspense是获取数据的方法。接下用事例演示一下如何使用它们并说明…"}, {"id": "6998176775930904607", "title": "React 学习之常用 Redux Middleware", "desc": "虽然在有些场景下需要我们自己去书写中间件来实现某些功能，但大多数情况下，并不需要我们自己去封装，我们只需要使用他人封装好的中间件来辅助开发即可，本文简要说明几个常用的中间件及其原理实现..."}, {"id": "6981009529446088741", "title": "react学习总结(语法篇)", "desc": "一、JSX（即JavaScript+XML） 1.1JSX中嵌入表达式 在 JSX 语法中，你可以在大括号内放置任何有效的 JavaScript 表达式。 1.2JSX也是一个表达式 编译后，JSX "}, {"id": "6844903918779154445", "title": "160行代码实现动态炫酷的可视化图表 - 排行榜", "desc": "这是一个国外大佬在其公司峰会的代码竞赛中写的一个库：react-dynamic-charts，用于根据动态数据创建动态图表可视化。 它的设计非常灵活，允许你控制内部的每个元素和事件。使用方法也非常简单，其源码也是非常精炼，值得学习。 但因其提供了不少API,不利于理解源码。所以…"}, {"id": "6844904176749658126", "title": "从零开始 React Hook实现在线壁纸网站", "desc": "前段时间学习了React的相关知识，尝试使用Class Component和 Hook两种方式进行项目实践，其中Class Component的使用主要围绕生命周期展开，Hook是比较新的函数式实现方式，弱化了生命周期的存在，可能是React未来主推的方式。 尝试使用了官方提供…"}, {"id": "6844903830237397000", "title": "React List - Create React App", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章中的一些链接可能失效，而 jsliang 缺乏精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 Crea…"}, {"id": "6994085055559630879", "title": "React Hooks useEffect多个依赖批量操作", "desc": "useEffect有多个依赖的时候, 会发生多次调用。实现一个批量操作的useEffect函数, 解决多次调用问题。"}, {"id": "6996214286292877326", "title": "JSX核心语法及JSX本质浅析", "desc": "一、JSX核心语法 1.什么是JSX？ JSX是一种JavaScript的语法扩展（eXtension），也在很多地方称之为JavaScript XML，因为看起来就是一段XML语法； 它用于描述我们"}, {"id": "6921981110083665934", "title": "\bReact 团队新年礼物 Server Components 是否为未来前端的发展方向？", "desc": "传统的服务端渲染，返回的是 HTML 的代码片段，而且只在页面一开始加载的时候返回，首次加载结束之后，所有组件其实还是在客户端执行渲染，和没有 SSR 的 APP 是完全一样的，有点像传统的服务端渲染模板，比如 PHP、JSP等。 传统的服务端渲染，所有组件最终还是在客户端的打…"}, {"id": "6987198405420253220", "title": "react 那些省时省力的小插件", "desc": "一. px to rem & rpx (cssrem) 开发移动端还是很有必要的 输入px的时候 会自动转换成rem 我们选取就好，下图： 二. Auto Rename Tag 自动补全修改中闭合标签"}, {"id": "6844903861166014477", "title": "React组件设计模式-组合组件", "desc": "这种模式本质上解决的是组件之间传值的问题。但是它对于传值以及一些内部操控的逻辑封装得更严密。 那么Tab和TabItem自然要进行沟通。很自然的写法是像下面这样 但是，组件之间的交互我们又不希望通过props或者context来实现。希望用法如下面一样简洁。 组件之间通过隐秘的…"}, {"id": "6975051054614315016", "title": "React的路由既能约定又能配置，还能可视化编辑自动生成代码，真好用", "desc": "路由开发费劲？那就理清楚关系，拆分角色，加入可视化操作，那么开发起来就能得劲儿不少，往后开发路由就变得很愉快了。"}, {"id": "6966048717841367071", "title": "探索Table组件虚拟化", "desc": "豆皮粉儿们，又见面了，今天这一期，由字节跳动数据平台的躬冯，带大家深入探索Table组件虚拟化原理及其方案。 前言 列表及表格的虚拟优化不是个新鲜的课题，近期，团队发现：业界对于table虚拟化竟然没"}, {"id": "6992833914104463367", "title": "React 最佳实践：可拖拽侧边栏", "desc": "页面布局也是在实际开发中经常用到的技术。 在大的方面，可以实现整个页面的布局，比如左侧导航、header、footer... 在小的方面，可以是内容布局，比如文章。"}, {"id": "6975406376407269389", "title": "Mock既是盾牌，亦是武器", "desc": "前端不易，善待自己，但求人不如求己来的实际，mock就是盾牌也是武器，帮你扛住压力，为你扫平障碍，保护你。"}, {"id": "6869950884231675912", "title": "Redux异步解决方案之Redux-Thunk原理及源码解析", "desc": "前段时间，我们写了一篇Redux源码分析的文章，也分析了跟React连接的库React-Redux的源码实现。但是在Redux的生态中还有一个很重要的部分没有涉及到，那就是Redux的异步解决方案。本文会讲解Redux官方实现的异步解决方案----Redux-Thunk，我们还…"}, {"id": "6923151396501979143", "title": "浅谈React Fiber--比Thread更精密的并发处理机制", "desc": "1. Fiber 2. React Fiber 3. 为什么Stack reconsiler会导致丢帧 上面的JSX经过编译会变成递归调用的代码，当组件树很深的时候，需要一次性去Diff组件的变化会消耗很长的时间，导致script时间变长。React之前做的优化是类似用 sho…"}, {"id": "6994237421206372365", "title": "总结react生命周期", "desc": "react生命周期汇总，新旧对比，基本常用就剩3个，很好记..............................................................."}, {"id": "6844904055366483981", "title": "React + Node.JS 巧妙实现后台管理系统の各种小技巧（前后端）", "desc": "此后台系统是为了搭配我的另一个项目 School-Partners学习伴侣微信小程序而开发的。是一个采用Taro多端框架开发的跨平台的小程序。感兴趣的可以看一下之前的文章 1. 登录界面 2. 题库管理 3. 修改题库 1. 使用Hook封装API访问工具 2. 实现懒加载通用…"}, {"id": "6844903817981460493", "title": "【译】在 React Hooks 中使用 useReducer 的几种用例", "desc": "React Hook 出来已经有一段时间了，具体的一些用法以及它解决的痛点，可以查看 Dan 的两篇文章 useEffect 完整指南以及编写有弹性的组件进行详细了解。 React Hooks API正式在 React V16.8 版本发布了。这篇博客，主要是介绍了其中 use…"}, {"id": "6966494293242429470", "title": "80行代码实现一个简易版useState", "desc": "不到80行代码实现useState功能，参考卡颂老师在B站发布的视频《React Hooks的理念、实现、源码》，感兴趣的伙伴可以去看下"}, {"id": "6901956745417981959", "title": "当我们讨论 hooks 时到底在讨论什么", "desc": "在使用 React 开发的这段时间里，我最大的感受就是 “这是 React 最好的时代，也是最坏的时代” ！「好」在于 hooks 开启了不一样的开发模式，在思考方式上要求更关注于数据之间的依赖关系，同时书写方式更加简便，总体上提升了开发效率；「坏」在于项目中经常是类组件与函数…"}, {"id": "6995510044192161829", "title": "React的生命周期的使用", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言** 一 初始化阶段 Initialization 也就是以下代码中类的构造方法( constructor() )"}, {"id": "6844903585885470734", "title": "前端进阶系列-目录", "desc": "之前我分享了文章《大厂前端面试考什么》,你们一定很想看答案吧？说实话，答案我是有，在准备面试的时候会时不时翻看，但内容比较多，比较凌乱，也不能指望我在一篇文章中写完。 我打算写一系列文章来进行解答面试中碰到的问题。目前只有目录，赶时间的同学可以根据关键词自行搜索资料"}, {"id": "6942301191191658527", "title": "探索Table组件虚拟化", "desc": "列表及表格的虚拟优化不是个新鲜的课题，近期，团队发现：业界对于 table 虚拟化竟然没有一个相对一劳永逸的解决方案。这是为什么？又该如何解决？在本文中，我们会循序渐进的介绍在 React+AntDesign 技术栈下，团队内部对 Table 组件虚拟化的不同实践思路，分析可能…"}, {"id": "6895533065125232648", "title": "万物皆可快速上手之Electron(第一弹)", "desc": "最近在开发一款桌面端应用，用到了Electron和React。 React作为日常使用比较频繁的框架，这里就不详细说明了，这里主要是想通过几篇文章让大家快速上手Electron以及与React完美融合。 本篇是系列文章的第一篇，主要是给大家分享Electron的一些概念，让大家…"}, {"id": "6998079317745860639", "title": "[Web翻译]了解React中的功能组件与类组件", "desc": "在React的世界里，有两种编写React组件的方式。一种是使用函数，另一种是使用类。最近函数式组件变得越来越流行，那么这是为什么呢？ 这篇文章将帮助你理解函数式组件和类组件之间的区别，通过示例代码逐"}, {"id": "6844903509192605709", "title": "好用的前端API备忘录", "desc": "记住所有API几乎是不可能的，这时候你需要一份备忘录！下面是我收集的最棒的前端备忘录。"}, {"id": "6985064793249939493", "title": "这一次彻底搞懂React中的setState在更新状态是同步还是异步的？", "desc": "问题引入 使用setState的两种形式 函数形式的setState 对象形式的setState 使用过setState之后能否立即获取到状态更新后的值 如何立即获取到状态更新后的值 setState"}, {"id": "6966904110159233031", "title": "个人博客 react 网站实现粒子效果", "desc": "最近想用react做一个个人博客，看到网上好多博客都用了粒子效果，心想，我也要搞一个。react的话，使用`\"react-particles-js\": \"^3.4.1\",` 使用这个包"}, {"id": "6963824048388177933", "title": "tsx手把手自定义messages组件(react、Vue都可用)", "desc": "tsx手把手自定义messages组件，模拟elementUI的message提示组件，自定义属于自己的messages组件。"}, {"id": "6994709324954075143", "title": "React：Class 组件详解", "desc": "创建方式 两种方式创建 Class 组件 ES5方式（过时） ES6方式 对比 ES6 的 class 方式更好 如果浏览器不支持ES6（IE8），用webpack+babel将ES6翻译为ES5即可"}, {"id": "6948077009641668615", "title": "React Hooks 出现后,Render props 还有用么？", "desc": "这样做可以让组件的使用者来决定某一个具体的位置需要渲染什么。 这就使组件非常灵活且高度可重用。 children 就是一个 render prop， 在上面的示例中，children 属性允许组件的使用者渲染自定义的内容。如: 现在，我们开始了解 render props 的作…"}, {"id": "6844903557628428302", "title": "VS Code 折腾记 - (12) 春节前的最后一波插件推荐(前端/协作/主题)", "desc": "emmm，失业之后,只能卷铺盖回家了，待来年开春再战。 回老家卖小吃，顺便学学车(考驾照),利用碎片化的时间扫荡插件。 于是,这篇文章就诞生了... Copy With Imports: 相当牛逼的插件,复制部分引用代码自动引入相关依赖... Vue Theme: 应该有部分人…"}, {"id": "6844903765212921863", "title": "React16.6和Typescript高仿B站Web移动端", "desc": "本项目是一个高仿B站移动端项目，基于我之前搭建过的SSR服务端渲染模板开发，开发的初衷是想使用此模板进行实战，实战后才能说明模板的可靠性。前端大部分都是页面展示，基本上没什么可仿的，看多了就会觉得腻，就选了B站，核心功能在于视频播放和弹幕，主要用于学习和交流，还请B站团队海涵。…"}, {"id": "6999894071971938340", "title": "React进阶系列之Why Hooks", "desc": "本篇我们来深入一个问题，Why React Hooks？ 上一篇我们几乎花了通篇的文字阐述了 Hooks 的设计理念，最后的结论是 函数组件从设计思想上来看，更加契合 React 的理念，这可以作为上"}, {"id": "6847902217261809671", "title": "useCallback/useMemo 的使用误区", "desc": "在编写 React Hook 代码时，useCallback和useMemo时常令人感到困惑。尽管我们知道他们的功能都是做缓存并优化性能，但是又会担心因为使用方法不正确导致负优化。本文将阐述useCallback和useMemo在开发中常见的使用方式和误区，并结合源码剖析原因，…"}, {"id": "6994239814820167711", "title": "React项目多语言国际化：react-i18next插件——本地数据篇", "desc": "react-i18next 是一个强大的React / React Native国际化框架，它基于i18next的React插件。"}, {"id": "6854573213813473294", "title": "微前端到底是什么？提前了解避免采坑", "desc": "准备到项目的收尾阶段，小编终于活过来了。在写这个项目的后期，小编遇到了刷新页面重复调用接口的问题，排查了挺久都没有能找出具体原因。后来询问了组内同事，才知道是微前端的问题。 说实话，小编也是第一次遇到这种类型的问题，于是就去查了下资料，发现有篇文章写的还阔以，借此机会share…"}, {"id": "6844903837761798158", "title": "React Hooks高仿B站Web移动端直播", "desc": "几个月前React Hooks正式发版，在正式发版之前，发布了alpha版本，这时就已经有很多人开始分享React Hooks的使用方式和经验。笔者也是等到了正式发版稳定后才开始学习，这次在原来高仿B站视频弹幕的基础上使用Hooks开发了直播功能 由于一些原因，才引入了Hook…"}, {"id": "6994063346890866702", "title": "图解React源码 - React 应用中的高频对象", "desc": "本章主要列举从 react启动到渲染过程出现频率较高, 影响范围较大 , 它们贯穿整个 react 运行时.如: ReactElement 对象, Fiber对象,Update对象,Hook对象等."}, {"id": "6844904149897723917", "title": "TypeScript 中的代码清道夫：非空断言操作符", "desc": "最近，我学到了一个非常有用的 TypeScript 的操作符：非空断言操作符。它会排除掉变量中的 null 和 undefeind。 在这篇文章中，我将会介绍如何、何时使用这个操作符，并提供一些样式，希望可以对你们有帮助。 TL;DR：在变量后面添加一个 ! 就会忽略 unde…"}, {"id": "6844903999024398343", "title": "Gatsby 入门指南", "desc": "Gatsby 是一个基于 React 的、免费开源的、用于搭建静态站点的框架。 Gatsby 主要的应用的技术是 React 和 GraphQL，利用 Gatsby 搭建一个简单的静态站点，是一个很好的学习过程。本文主要讲解如何从零搭建一个简单的个人博客结构的过程，也是自己学习…"}, {"id": "6844904020948041741", "title": "用了这么长时间的 React useEffect hook，你用对了吗？", "desc": "useEffect 是 React Hooks 的核心，要保证理解它的运行机制和正确的使用方法才能避免这样那样的坑。在以前的工作中，因为它我碰到过无数个坑，比如拿到的值是旧的，该执行的时候不执行，不该执行的时候执行了…… 所以为了避免如上尴尬、节省绞尽脑汁找 bug 的时间、保…"}, {"id": "6844903560325398541", "title": "react-loadable原理浅析", "desc": "有兴趣的同学可以自行研究。 这样，你就会发现只有路由匹配的时候，组件才被import进来，达到了code splitting的效果，也就是我们常说的按需加载，\b代码分块，而不是一开始就将全部组件加载。 可以观察到，点击不同的路由都会加载一个chunk.js，这就是我们所分的块。…"}, {"id": "6872880301723353102", "title": "React Hooks实战沉淀：性能优化", "desc": "最近在做react项目的迁移，从class组件写法迁移至function组件，不得不说hooks的特性对整个代码逻辑复用性的提高还是很不错的。但是新手在接触hooks的时候，如果不了解各个API的特性的话，同样也会埋下许多神坑，后期优化费时费力。 要解决性能问题，关键在于对组件…"}, {"id": "6989800259878649892", "title": "react-redux的3个主要作用", "desc": "已经有了redux为什么还要设计react-redux? UI组件和容器组件 react-redux的核心API 1. Provider：该组件包含的组件能够获取到状态state. 2. connec"}, {"id": "6991715764055048200", "title": "Taro+React Hooks小程序", "desc": "Taro + React Hooks小程序 Taro 简介：京东凹凸实验室出品，Taro 3 可以支持转换到 H5、ReactNative 以及任意小程序平台。"}, {"id": "6978717993328984095", "title": "【react 源码系列】react-router(V5) 解析", "desc": "写这篇文章主要是想加深自己对 react-router 的理解，但看了源码之后，发现源码与现在的一些文章写的不太一样了，可能是版本不同的原因，所以这里我根据最新的 react-router 进行了一次"}, {"id": "6844903996788834318", "title": "90行代码构建属于你的React", "desc": "本文中的实现借助了 snabbdom ，因此如果你的关注点是虚拟DOM的实现或是将虚拟DOM渲染到浏览器的底层实现，本篇文章中并不会涉及到。有些人可能对此感动失望，但是，一口吃不成一个胖子，我们需要一步一步来。 当我学习 React 的时候，我觉得它所做的一切都是魔术，然后我就…"}, {"id": "6898897044295909384", "title": "围观 “33 行代码的 React” ", "desc": "一位伦敦的 Python 工程师 Oliver Russell 最近做了一个好玩的尝试，用 33 行代码 “实现了”React。 由此可见，这个实现的功能还十分有限。只涉及虚拟 DOM 生成、差异比较和真实 DOM 渲染。 全部实现代码如下图所示。 这个实现参考了 Mithri…"}, {"id": "6844903693138001934", "title": "React服务端渲染（前后端路由同构）", "desc": "Web应用是通过url访问某个具体的HTML页面，每个url都对应一个资源。传统的Web应用中，浏览器通过url向服务器发送请求，服务器读取资源并把处理好的页面内容发送给浏览器，而在单页面应用中，所有url变化的处理都在浏览器端完成，url发生变化时浏览器通过js将内容替换。对…"}, {"id": "6930125868639649800", "title": "聊聊H5上点击事件那些事", "desc": "页面上有一个带有全屏蒙层的弹窗A，弹窗的按钮点击之后会创建一个新的带全屏蒙层弹窗B，同时弹窗A消失。弹窗A的按钮上绑定了touchend事件，弹窗B的按钮和蒙层都上绑定了click事件，按钮的click事件会触发一定的业务逻辑，B的蒙层的click事件会让整个弹窗消失，从DOM…"}, {"id": "6982167430093078559", "title": "React18将会发布些什么？—— 自动批处理篇", "desc": "React18 通过默认进行更多的批处理来提供开箱即用（只要升级到18）的表现提升，这篇文章将会解释什么是批处理，以及它之前是怎么工作的，并且现在变成什么样了。"}, {"id": "6844903716949082126", "title": "从美团这篇文章聊聊微前端的聚合问题", "desc": "如果大家听说过“微服务（Microservices）”的概念的话就不难理解“微前端（Micro Frontends）”。和后端应用类似，当一个前端应用变得异常庞大以后，它会变得难以维护，同时也会变得不稳定。将大的应用拆分为小的应用能够让每个专业团队专心负责自己的功能，更易于测试…"}, {"id": "6844903567782854664", "title": "【全是干货】谈谈如何学习一项新技能，没有理论，全是实战", "desc": "评论区有几位同学问我如何学习，今天就单独开篇文章来谈谈吧，欢迎各位大佬在评论区贴上自己的学习方法。 大致看一下官方文档，不要一个一个的仔细研究，太费时间也记不住（别担心，后面有方式帮你记牢），英语不好的（我的英语比较渣）推荐直接使用Chrome+谷歌翻译插件通篇翻译，读懂大概意…"}, {"id": "6994019154688737294", "title": "React学习笔记 - 基础概念(五) 从React Element到Fiber节点", "desc": "React中的每个组件都有一个UI表示形式，我们可以调用从该render ****方法返回的视图或模板。这是我们ClickCounter ****组件的模板： React Elements 模板通过J"}, {"id": "6844904199692484615", "title": "vite 与 react 的结合", "desc": "vite, 法语词, 快的意思. 读音为 /vit/ 先来看看之前的先驱: parcel, rollup, webpack.这些工具的目的便是为了打包, 为了前端能有模块化. 为了前端能承担更复杂的逻辑, 不被后端瞧不起.为了证明js是宇宙第一的语言, 为了.... parce…"}, {"id": "6873528992780648462", "title": "从0开始微操搞定antd+ts+react-app-rewired+react-router+mobx", "desc": "由于工作需要，最近搞了一系列后台数据报表类的可视化项目，在技术选型上使用了antd+ts+ehcarts+mobx，脚手架使用了create-react-app，在整合过程中发现有些关于这方面的文档交代的不是很清楚。在闲下来时，特整理了一些关键步骤，对自己来说也是一个复盘过程，…"}, {"id": "6844903825946624013", "title": "React diff原理探究以及应用实践", "desc": "React通过引入Virtual DOM的概念，极大地避免无效的Dom操作，已使我们的页面的构建效率提到了极大的提升。但是如何高效地通过对比新旧Virtual DOM来找出真正的Dom变化之处同样也决定着页面的性能，React用其特殊的diff算法解决这个问题。Virtual …"}, {"id": "6844903763526828045", "title": "Jest & enzyme 进行react单元测试", "desc": "单元测试（Unit Test）：前端单元测试，在以前也许是一个比较陌生的工作，但是前端在经历了这几年的发展之后，我们对于代码的鲁棒性要求逐渐提升，承载了更多的业务逻辑的同时，作为整个链路上最接近用户的部分，系统崩溃阻塞的成本非常之高。如果你采用的是SSR，那么直接在服务端渲染报…"}, {"id": "6976239698729517087", "title": "写一个简单的JSON Schema，为了应对后台接口细节的口口相传", "desc": "一直以来和后台进行联调这件事都是一件很\"困扰\"的事情，主要是沟通成本太大，其主要集中在接口文档的沟通上。"}, {"id": "6844903933362569224", "title": "React学习(7)-React中的事件处理", "desc": "也就是web浏览器通知应用程序发生了什么事情,例如:鼠标点击,移动,键盘按下等页面发生相应的反馈,它是用户与文档或者浏览器窗口中发生的一些特定的交互瞬间. 这个时候就需要用事件实现了"}, {"id": "6875881579462279175", "title": "useCallback与useMemo源码浅析", "desc": "返回一个memoized的函数，内联回调函数及依赖项数组作为参数传入useCallback,该回调函数只有在依赖项改变的时候才会更新，避免非必要的渲染。我在实际工作中因为用了eslint的一个配置，依赖项自动给加上。 Memoization这里很有必要提下这个。理解为缓存，看了…"}, {"id": "6972449860591370271", "title": "immutable data 是如何优化 React 性能的", "desc": "今天我们解决以下几个问题，什么是immutable data，mutable data带来了哪些问题，immutable data优化了哪些性能？"}, {"id": "6987766180949966878", "title": "react原理：函数组件的更新，hooks原理", "desc": "这篇文章将函数组件的更新，也就是hooks的原理。 函数组件更新的入口为updateFunctionComponent，这个方法主要就是调用了renderWithHooks，而renderWithHo"}, {"id": "6965778053288968199", "title": "React：写组件前你在想什么？", "desc": "如何将 UI 拆分成组件层级？props 和 state 分别担当了什么职责？怎么才能做到最大程度的组件复用？"}, {"id": "6965762945477246983", "title": "React 错误边界（错误捕获）", "desc": "错误边界是一种 React 组件，这种组件可以捕获并打印发生在其子组件树任何位置的 JavaScript 错误，并且，它会渲染出备用 UI，而不是渲染那些崩溃了的子组件树。"}, {"id": "6844904017492082702", "title": "基于react-hooks+Typescript二次封装Antd-Table", "desc": "使用useCallback函数优化，将方法进行缓存，只有当callback的依赖发生变化了才会再次执行fetchData方法。"}, {"id": "6847009771267031048", "title": "React Hooks 原理学习与最佳实践", "desc": "1. 前言 React Hooks 是 React 16.8 引入的新特性，允许我们在不使用 Class 的前提下使用 state 和其他特性。React Hooks 要解决的问题是状态共享，是继 render-props 和 higher-order components 之…"}, {"id": "6930183602646974472", "title": "最佳实践React性能优化", "desc": "1:React.lazy和React.Suspense封装dynamic函数动态引入组件2:PureComponent,memo解决无效渲染问题从上面可以看出只要父组件setstate,子组件无论cl"}, {"id": "6990758126131609631", "title": "React Dialog 组件的个人实践", "desc": "最近项目频繁用到了 dialog ，由于是面向 C 端， 所用的 ui 框架没有样式符合的，因此封装了一个 Dialog 组件，也摸索出了自己的一套实践。本文虽然是面向 react ，但同样的思路可以"}, {"id": "6942031329722630151", "title": "react新版scheduler", "desc": "上节说到了在react16.8版本的scheduler由requestAnimation以及postmessage实现，即对齐frame的方案。根据react官方相关issue的描述，scheduler 中 requestAnimation 构成的循环对CPU的利用率低于新版本…"}, {"id": "6980305577708617741", "title": "onMouseDown和onClick的顺序问题", "desc": "1. 发现问题 onClick事件会引起焦点切换，触发onBlur， 导致点击子组件进行选择等操作的时候会出现自动收起再展开的现象。 2. 解决方案 1.  如果是click子组件导致的onBlur跳"}, {"id": "6844903693301579784", "title": "用 React 编写的基于Taro + Dva构建的适配不同端（微信小程序、H5、React-Native 等）的时装衣橱", "desc": "Taro 是一套遵循 React 语法规范的 多端开发 解决方案。现如今市面上端的形态多种多样，Web、React-Native、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配…"}, {"id": "6965760797427367966", "title": "类组件如何复用逻辑？", "desc": "1. 高阶组件 什么是高阶组件 Higher Order Component (HOC) 高阶组件是 React 应用中共享代码，增加逻辑复用的一种方式。比如 A 组件和 B 组件都需要一个相同的逻辑"}, {"id": "6978995371385028622", "title": "React 函数式组件中使用防抖节流不生效？", "desc": "函数式组件每次渲染结束后，内部的变量都会被释放，重新渲染时所有的变量都会被重新初始化，产生的结果就是每一次都注册和执行了 setTimeout 函数。"}, {"id": "6994270743877926920", "title": "React 最佳实践：亲手码一个「可拖放列表」", "desc": "【可拖放列表】在实际业务中也是一个十分常见的功能，比如通过拖放列表元素进行排序、拖放元素在不同的容器中穿梭等。"}, {"id": "6979422284964429854", "title": "代码分割(精读React官方文档—14)", "desc": "这是我参与更文挑战的第28天，活动详情查看：更文挑战 打包 实例：打包前文件和打包后文件对比 打包前 打包后 代码分割 打包应该注意的问题： 随着应用体积的增加，避免因为体积过大而导致加载过慢的问题。"}, {"id": "6844903507791888397", "title": "react-intl 实现 React 国际化多语言", "desc": "1. 创建国际化资源文件 有了这些资源文件以及相关的封装之后，我们就可以在 LocaleProvider 和 InltProvider 中使用了。 2. 根据语言加载国际化资源 3. 引入 react-intl 的 local data react-intl 在做国际化的时候需…"}, {"id": "6927981303313006599", "title": "React事件委托机制详解", "desc": "这里有一个例子，在React注册之前在document上绑定一个事件（保证自己的事件比React的document事件先触发），然后在真实的dom上绑定一个事件和一个React合成事件。 合成事件回调对象 就会被立马销毁。下面的例子可以证明此事"}, {"id": "6948719208813297678", "title": "大佬，第三方组件的hooks为啥报错了？", "desc": "最近工作中遇到个有意思的问题，记录下从问题发现到解决的过程。 某个需求需要引入一个第三方组件库。 从React文档了解到，这是由于错误使用Hooks造成的。 需要v16.8以上版本的ReactDOM才支持Hooks。 我们项目使用的是v17.0.2，不属于这个原因。 Hooks…"}, {"id": "6982456674590130212", "title": "shouldComponentUpdate优化小技巧", "desc": "随着项目的推进，页面组件越来越多，越来越细。当我们在父组件setState时，可能都会导致若干子组件进行无效的render。因此解决这个问题是我们学习的目的。"}, {"id": "6844904023653400583", "title": "史上最贴心NPM私服搭建辅导", "desc": "在工作中，我们常常会开发很多通用性代码，比如我们之前给大家讲解过的UI库、工具类、公用业务逻辑代码等。这些代码我们如何发挥它的价值呢？这时可将这些库发布到npm，需要的项目安装使用即可，但是发布到公网npm无法保证源码的私密性，这时我们就需要使用到私有npm仓库。 Verdac…"}, {"id": "6871728918643081230", "title": "React 框架生命周期（类组件与函数组件）", "desc": "在学习任何一个框架原理之前，学习它的生命周期是非常必要的，至少可以让我们明白在什么时候该做什么事情。不至于犯一些低级错误。 React 16.8 版本正式发布了 Hook 机制，因此本文会分别讲解 Class Component 生命周期与 Function Component…"}, {"id": "6844903686460686350", "title": "[译]怎样学习React—从初级到高级路线图", "desc": "这个指南是为初学React的朋友写的，在每个部分，我用心收集了最好的视频和文章，让我们学习起来更加容易。 Kent C. Dodds的Beginners guide to React React Router帮助你的单页面应用创建路由，它非常强大并且容易使用。 React的服务…"}, {"id": "6844903784083095559", "title": "React 教程：快速上手指南", "desc": "前端和 JavaScript 是一个奇怪的世界。大量不断推出的新技术的同时，也在被不需要它们的人嘲笑，往往很多人都会这样做。我们有时会对不断涌现的信息、库和讨论感到不知所措，总希望能有一些稳定的东西，就像能让我们可以休整一段时间的避风港。最近 React 似乎有变成 JavaS…"}, {"id": "6979875262095687711", "title": "「RaxJs」 实操入门", "desc": "最近在学习 Rax 官方文档，本人自打前端以来就紧跟尤大大的脚本，对于 react 是零基础。本篇记录个人阅读 Rax 官方文档需要学习的地方，以及记录实战过程遇到的情况。"}, {"id": "6844904200824946696", "title": "从React源码分析渲染更新流程", "desc": "转前端一年半了，平时接触最多的框架就是React。在熟悉了其用法之后，避免不了想深入了解其实现原理，网上相关源码分析的文章挺多的，但是总感觉不如自己阅读理解来得深刻。于是话了几个周末去了解了一下常用的流程。也是通过这篇文章将自己的个人理解分享出来。 在具体的源码流程分析之前，根…"}, {"id": "6844903842539110408", "title": "讲讲吸顶效果与react-sticky", "desc": "之前项目里的头部导航需要实现吸顶效果，一开始是自己实现，发现效果总是差那么一点，当时急着实现功能找来了react-sticky这个库，现在有空便想着彻底琢磨透这个吸顶的问题。 1. 粘性定位 吸顶效果自然会想到position:sticky, 这属性网上相关资料也很多，大家可以…"}, {"id": "6960486099751796766", "title": "探索React异步解决方案之redux-saga", "desc": "redux-saga是一个以redux中间件形式存在的一个库，主要是为了更优雅地管理 Redux 应用程序中的副作用。"}, {"id": "6844904056591220750", "title": "从零开始配置 react + typescript（二）：linters 和 formatter", "desc": "继 从零开始配置 react + typescript（一）：dotfiles 介绍了一些最先配置的 dotfiles，本篇将继续介绍 lint 工具 eslint，stylelint，代码格式化工具 prettier，用 husky + lint-staged 来实现每次 c…"}, {"id": "6921588546700574734", "title": "聊聊 React 组件库的技术选型与设计", "desc": "最近在业务中开发了一套定制化的 C 端组件库，在这个过程中遇到了一些组件库技术选型和设计的问题，在参考公司内外的多个组件库后确定了最终的方案。本文希望通过向读者介绍技术选型的过程中的方案比较和组件库设计中的考量，让读者在组件库的技术选型和设计上有所启发。 事实上，这三种样式方案…"}, {"id": "6882287025400070152", "title": "React 实现倒计时", "desc": "本来是freeCodeCamp上的练手项目25+5clock，嫌麻烦就自己改成了倒计时。倒计时很简单：页面上有默认时间，点击开始，从秒针开始回倒，秒针退至0时，分针回倒1。点击停止，倒计时停止。拿到这"}, {"id": "6965125359755132935", "title": "教你40行代码写一个小型的redux", "desc": "我们将用不到四十行代码写一个属于自己的redux，只模拟部分业务行为，没考虑性能上的问题哟，下面来看看怎么样用那么简洁的代码实现的吧。"}, {"id": "6984729126884081677", "title": "React 学习之认识 HOC 与 Ref", "desc": "React 属性默认值 defaultProps，React 属性类型检查 propTypes, 高阶组件 HOC ，ref 使用与 ref 转发注意点的相关说明"}, {"id": "6971045990371442701", "title": "手写React-hooks核心原理", "desc": "前言 react-hooks 是 React 16.8 的新增特性。它可以让我们在函数组件中使用 state 、生命周期以及其他 react 特性，而不仅限于 class 组件。这篇文章通过手写 re"}, {"id": "6995444802707783687", "title": "Redux原理 ", "desc": "Redux原理 核心逻辑 / API - cerateStore() 形参： reducer函数 preloadedState：预存储的store状态，即原始状态 enhancer（增加store功能"}, {"id": "6844904191853494280", "title": "深入理解React：懒加载（lazy）实现原理", "desc": "现在前端项目基本都采用打包技术，比如 Webpack，JS逻辑代码打包后会产生一个 bundle.js 文件，而随着我们引用的第三方库越来越多或业务逻辑代码越来越复杂，相应打包好的 bundle.js 文件体积就会越来越大，因为需要先请求加载资源之后，才会渲染页面，这就会严重影…"}, {"id": "6844903607062675463", "title": "手把手带你撸一个vue组件库！", "desc": "目前，我们能接触到的模块化组件库真可谓是数不胜数，尤其是vue相关的那更是多如牛毛，譬如element，iview等等，虽然有很多，但是轮子虽多，合不合适自己还不好说，就像买衣服，有件衣服虽然好看，但是貌似容纳不了自身肥胖的身躯那也只能望洋兴叹。当然这时候，量身定做就显得那么重…"}, {"id": "6916792895055855623", "title": "React Hooks（二）:  useCallback 之痛", "desc": "最近 rxjs 作者 ben lesh 发了条推 https://twitter.com/benlesh/status/1195504467707355136?s=21 如此推所示，useCallback 问题非常严重，社区也讨论了很多做法，但仍然有很多问题。 我们发现即使不用…"}, {"id": "6997190765948436494", "title": "React学习第一天", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：更文挑战 介绍react 特点 高效：React通过对DOM的模拟，最大限度地减少与DOM的交互 组件化：React采取组件化开发，极大限度的使组件得到"}, {"id": "6844903696409559053", "title": "企业管理系统前后端分离架构设计  系列一  权限模型篇", "desc": "取这个标题，可能有点膨胀，毕竟看到“架构”这个词，很多人想到的可能是大项目，涉及到分布式，高并发等一些高大上的东西。 前段时间分别用vue和react写了两个后台管理系统的模板vue-quasar-admin和3YAdmin。两个项目中都实现了基于RBAC的权限控制。因为本职工…"}, {"id": "6972160798466506788", "title": "在 React 项目中使用 Emotion （CSS in JS）", "desc": "CSS in JS 已经越来越流行，这边文章主要介绍基于 Emotion 的 CSS in JS 的使用方案。"}, {"id": "6952118323559530504", "title": "ahooks源码分析之usePrevious", "desc": "usePrevious用于保存上一次渲染时的状态。React官方文档提供了一个实现:usePrevious记录的值初始为空，每轮渲染后记录状态值，这样每次渲染返回的便是上一轮渲染时的值。react-u"}, {"id": "6995099596678496270", "title": "React扩展", "desc": "React扩展的一些扩展知识点 setState、lazyLoad、Context、组件优化、PureComponent、错误边界的使用"}, {"id": "6948083602529714184", "title": "使用Redux Toolkit简化Redux", "desc": "了解Redux Toolkit，这是用于高效Redux开发的经过验证的工具集。在本文中，你将看到为什么Redux Toolkit值得React社区更多的关注。 React和Redux被认为是大规模React应用中管理状态的最佳组合。然而，随着时间的推移，Redux的受欢迎程度下…"}, {"id": "6995931029894594573", "title": "reactjs+redux/react-redux+redux-thunk+mongoose的架构系列之入口index.js引入redux(二)", "desc": "react项目业务开发中，我们会遇到很多组件需要共享的数据，最常见的是我们登陆的鉴权token，用户的登录名缓存等等其他的数据。所以我们需要使用到react框架的插件redux来实现。 然后来改造我们"}, {"id": "6897038904914870286", "title": "React的memo和useMemo的作用", "desc": "要想学习useMemo必须要先知道React.memo这两者都有一定的优化作用memo的作用当数据变化时，代码会重新执行一遍，但是子组件数据没有变化也会执行，这个时候可以使用memo将子组件封装起来，"}, {"id": "6955004948442513445", "title": "深入学习react（一） 写个自己的redux", "desc": "不知不觉从vue转到react已经一年了，对于react的认识也从使用迈向了原理，本着学习的态度，写下这个系列，希望大神多多指点，也希望能给学弟学妹们带来一丝丝帮助"}, {"id": "6957945548607324191", "title": "从零搭建React项目脚手架（系列一：基于Axios封装一个带缓存功能的请求方法）", "desc": "出于掌握并分享知识的目的，我决定分为几个系列步骤，逐步搭建一个自己的React项目脚手架。此篇文章是基于Axios封装一个带缓存功能的请求方法"}, {"id": "6882265478476070919", "title": "奈飞Web性能优化", "desc": "1. 减少javascript的大小 最初的页面（注销状态的首页）包含了300kb的JavaScript，包含了React以及Lodash等库。使用Chrome模拟3G链接，加载时间为7s。 由于页面是由简单的HTML元素组成的，React不在是必要的，奈飞团队使用原生java…"}, {"id": "6844903592831238157", "title": "你应该知道的requestIdleCallback", "desc": "我们都知道React 16实现了新的调度策略(Fiber), 新的调度策略提到的异步、可中断，其实就是基于浏览器的 requestIdleCallback和requestAnimationFrame两个API。虽然React是自己实现了一套类似的requestIdleCallb…"}, {"id": "6844903747378741255", "title": "使用react-hook 重写 react-redux", "desc": "react-redux主要提供的功能是将redux和react链接起来。 使用提供的connect方法可以使得任意一个react组件获取到全局的store上的状态。 实现方法是将store存放于由provider提供的context上，在调用connect时， 就可将组件的pr…"}, {"id": "6982946131588153352", "title": "React-Redux 技术分享", "desc": "前言 在上一节 Redux 技术分享 中介绍了 Redux 基本使用以及底层的源码实现。那在实际项目中，如何将 Redux 提供的数据在React 组件中使用呢？这就需要借助于 React-Redux"}, {"id": "6969452281301467143", "title": "深入\"时间管理大师\" —— React Scheduler", "desc": "什么是 Scheduler Scheduler 是内置于 React 项目下的一个包, 你只需要将任务以及任务的优先级交给它, 它就可以帮你进行任务的协调调度. 目前 Scheduler 只被用于 R"}, {"id": "6986259569420795934", "title": "React中的代理（一）", "desc": "本文介绍解决前端跨域的产生原因，通过代理解决跨域问题的基本原理，及react中解决跨域的两种方发（package.json中配置，新建setupProxy.js文件形式配置）。"}, {"id": "6844903692726976519", "title": "多页应用 Webpack4 配置优化与踩坑记录", "desc": "最近新起了一个多页项目，之前都未使用 webpack4，于是准备上手实践一下。这篇文章主要就是一些配置介绍，对于正准备使用 webpack4 的同学，可以做一些参考。 webpack4 相比之前的 2 与 3，改变很大。最主要的一点是很多配置已经内置，使得 webpack 能“…"}, {"id": "6936421130081140744", "title": "React Context源码浅析", "desc": "在React中，有一个valueStack，是一个栈结构，其中会存入Context信息，在beginWork阶段，当Fiber节点为ContextProvider时，会将当前的Context的旧值压入栈，并赋予新值，当此Fiber节点执行到completeWork阶段时，会将旧…"}, {"id": "6931020320606257166", "title": "React-合成事件和原生事件的区别", "desc": "我最近在学校React事件绑定的时候,发现,React绑定有其自身的一套机制,就是合成事件。 React合成事件机制: React并不是将click事件直接绑定在dom上面,而是采用事件冒泡的形式冒泡到document上面,然后React将事件封装给正式的函数处理运行和处理。 …"}, {"id": "6992410257129472031", "title": "react18 的 setState 还是 isBatchingUpdates 嘛？", "desc": "React 是通过管理状态来实现对组件的管理，即使用 this.state 获取 state，通过 this.setState() 来更新 state。"}, {"id": "6992396095242371086", "title": "常用的React生命周期", "desc": "“这是我参与8月更文挑战的第4天，活动详情查看： 8月更文挑战” https://juejin.cn/post/6987962113788493831” 前言 未来的日子，愿你吧自己调至最佳状态"}, {"id": "6913835321046073351", "title": "React Hooks", "desc": "Hooks 体现了 React 在组件内部进行逻辑隔离，不像 class 组件的 state 可自定义和跨组件重用。 只有当依赖项发生改变时，内联回调函数中的值才会得到最新值。否则，内联回调函数中的变量都是之前时侯的值。 当传入空数组时，该返回的 memoized 回调函数一直…"}, {"id": "6844904061615996942", "title": "《精通react/vue组件设计》之配合React Portals实现一个功能强大的抽屉(Drawer)组件", "desc": "本文是笔者写组件设计的第六篇文章,内容依次从易到难,今天会用到react的高级API React Portals,它也是很多复杂组件必用的方法之一. 通过组件的设计过程,大家会接触到一个完成健壮的组件设计思路和方法,也能在实现组件的过程逐渐对react/vue的高级知识和技巧有…"}, {"id": "6976962811347861511", "title": "React系列六：生命周期", "desc": "很多的事物都有从创建到销毁的整个过程，这个过程称之为是 生命周期 ；React 组件也有自己的生命周期，了解组件的生命周期可以让我们在最合适的地方完成自己想要的功能；"}, {"id": "6844904082918899720", "title": "内存泄露分析", "desc": "判断内存占用情况，以 heapUsed为基准。 通过监测performance monitor面板，如果发现内存又缓慢的增加，说明存在内存泄露。 我的情况是大概每隔30s，增加1-2MB内存，虽然不多，但随着时间的增加，网页进程会卡死，因此需要详细分析。 打开chrome下的m…"}, {"id": "6844903616109641736", "title": "一文看懂npm、yarn、pnpm之间的区别", "desc": "npm是Node.js能够如此成功的主要原因之一。npm团队做了很多的工作，以确保npm保持向后兼容，并在不同的环境中保持一致。 npm使用一个名为package.json的文件，用户可以通过npm install --save命令把项目里所有的依赖项保存在这个文件里。 例如，…"}, {"id": "6844903538762448910", "title": "React源码解析(四):事件系统", "desc": "在前面三篇文章中，我们阐述了react组件的构成与生命周期，setState的机制。这次我们来谈谈React的事件处理。 我们通常监听真实DOM。举🌰来说，我们想监听按钮的点击事件，那么我们在按钮DOM上绑定事件和对应的回调函数即可。 遗憾的是若页面复杂且事件处理频率高，那么…"}, {"id": "6968784251609153544", "title": "Antd V4版本中Form resetFields无效", "desc": "问题描述 给表单中的每一个表单项传入一个参数的时候，参数已经传进去了，但是initialValue并没有发生变化。 原因 解决办法 在生命周期函数componentDidUpdate中添加下面的代码即"}, {"id": "6844903757642203144", "title": "从 loading 的 9 种写法谈 React 业务开发", "desc": "这是一篇比较全面讲解 React 的文章，里面很多基础知识希望你自己一边查阅资料一边学习。全文从业务开发中最常用见 loading 效果不同是实现讲起，说下现在前端开发在业务上应该有的思考。 最简单的实现，我们在 Loading 组件内部声明一个状态，通过代码逻辑判断 load…"}, {"id": "6969874579028197413", "title": "【译】你真的应该使用useMemo吗? 让我们一起来看看", "desc": "- 当处理量很大时，应该使用 useMemo - 从什么时候 useMemo 变得有用以避免额外处理，阈值在很大程度上取决于您的应用程序 - 数据在处理非常低的情况下使用 useMemo，可能会有额外"}, {"id": "6844903773828022279", "title": "Next.js踩坑记录", "desc": "几乎一整年没咋写文章，主要是懒，加上工作也挺忙。但是想趁着年底发一篇，希望明年更勤奋一点。其实不是没东西写，就是想深入一个东西还是很困难的，要查各种资料，最终还是懒就是了。 next.js是react的同构库，很多文章里把他当作一个脚手架，也不是不行，但是个人认为next.js…"}, {"id": "6999816458649731103", "title": "react-jsx核心语法", "desc": "这是我参与8月更文挑战的第7，活动详情查看：8月更文挑战 什么是jsx语法？ JSX是一种JavaScript的语法扩展（eXtension），也在很多地方称之为JavaScript XML"}, {"id": "6994003557280137223", "title": "React基础笔记（二）", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 前言 React脚手架 创建项目并启动React项目 第一步，全局安装：npm i -g create-react-app 第二步，切换到想"}, {"id": "6992405747363479588", "title": "React学习笔记：调度器（Scheduler）- 时间切片", "desc": "React18 Alpha版本调度器中，关于时间分片概念和实现的一些介绍，内容包括片长、调度方式、任务调度等"}, {"id": "6970175835856699406", "title": "React无状态组件、有状态组件配合高阶组件的使用", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 一、概念 1. 无状态组件 无状态组件（展示组件，函数式组件）：就是一个函数没有props，没有生命周期， 就是一个简单的视图函数，没有业务逻辑更"}, {"id": "6844903506936070152", "title": "Ant Design Pro", "desc": "开箱即用的中台前端/设计解决方案 构建了一套基于 React 的中后台管理控制台的脚手架，它可以帮助你快速搭建企业级中后台产品原型"}, {"id": "6968821346088255525", "title": "React 单元测试入门指南", "desc": "单元测试是书写组件库必备的，在React中常见的测试库有2个，一个是Enzyme，一个是react-testing-library。"}, {"id": "6994814591624544269", "title": "React基础笔记（三）", "desc": "基本理解 redux、setState、Hooks、lazyLoad 路由懒加载、Fragment、Context适合入门的reactd小白"}, {"id": "6844904167668973576", "title": "使用Intersection Observer API实现视频队列自动播放", "desc": "笔者利用空余时间研究了一下javascript的Intersection Observer API，发现其有很大的应用场景，比如图片或者内容的懒加载，视差动画等。笔者也在之前的文章中详细介绍了3种Observer（观察者）的用法，包括位置监听，dom变化监听以及窗口变化监听，它…"}, {"id": "6884144754993397767", "title": "React with TypeScript 最佳实践", "desc": "本来将介绍在 React 项目中使用 TypeScript 的一些最佳实践。 初始化一个 React with TypeScript 应用程序的最快方法就是使用 facebook 官方脚手架 create-react-app， 它提供了 TypeScript 模板。运行以下面的…"}, {"id": "6844903795445465101", "title": "使用 react Context API 的正确姿势", "desc": "本文介绍一下 React 中常见的 Context API 的使用方式。在使用 Context API 之前，我们还需要知道为啥要使用。❓ 使用 Provider 比较简单直接作为父组件包裹在上层即可。如果组件内部有其他多个组件，这些组件都可以共享 Provider 提供的 s…"}, {"id": "6987222016080232485", "title": "一款使用React、腾讯云开发的TodoList待办事项Web应用", "desc": "最近写了一款基于React脚手架开发的 TodoList 网页应用，主要记录自己的代办事务，方便查看、管理、安排时间，提升效率。 PC Web 端 + 移动端 + 黑暗模式，可日常使用。"}, {"id": "6999444528700588045", "title": "react hook性能优化：memo，useCallback阻止不必要的重新渲染", "desc": "react hook性能优化：memo，useCallback阻止不必要的重新渲染 在react函数组件中修改状态会触发整个函数组件的重载，重载过程中会导致函数中的方法重载和组件重新渲染"}, {"id": "6979935842886385701", "title": "React 18 新特性", "desc": "React 18 alpha版已经发布了，新特性和新的API聚焦在用户体验和性能提升，一起来看看吧~ 安装 Root API Leacy root API： ReactDOM.render() New"}, {"id": "6942800761294159879", "title": "React Hooks 开发体验和思考", "desc": "Hooks则相当于\"逻辑+数据\"，尽量做到状态 和 UI 分离，“有状态的组件没有渲染，有渲染的组件没有状态”。 通俗来说，有UI的组件文件没有useState概念方向，具体问题具体分析）。 个人感觉直接用camelcase可读性会比较好，但是项目要求都用，后者也可以。 对于业…"}, {"id": "6844904056977113101", "title": "超全面详细一条龙教程！从零搭建React项目全家桶（下篇）", "desc": "在本教程的【上篇】中，已经详细说明了React项目相对基础的部分。在【下篇】中，继续讲解React进阶的部分。还没有阅读【上篇】的同学请先在我的公众号中去阅读哦~ 做过vue开发的同学都知道vuex，react对应的工具就是Redux，当然还有一些附属工具，比如react-re…"}, {"id": "6844903649978630158", "title": "React 工程的 VS Code 插件及配置", "desc": "在安装时推荐勾选如图两个选项，这样右键文件夹或文件就可以直接使用 VS Code 打开了，非常方便。 如图点击左侧 EXTENSION 菜单，点击 ... 按钮，选择“从 VSIX 安装...” 即可安装。 感觉自带的代码格式化功能基本够用了，就没安装 Prettier 和 B…"}, {"id": "6991672287162286093", "title": "记一次搭建react-native UI组件库", "desc": "\\ 记一次搭建react-native UI组件库 1，创建一个组织，如图： 1，找到Your organizations 2，创建组织 3，填写信息 2，本地创建： 创建目录@john-ui-kit"}, {"id": "6989531215304851463", "title": "react源码中二进制数值解惑", "desc": "在学习 react 源码中有这样一段代码引起好奇心： 看起来很高大上，二进制数据，其实很好理解，这样可以方便后面做权限的判断工作。举个例子："}, {"id": "6847902217031122951", "title": "React Hooks 中的闭包问题", "desc": "今天中午在领完盒饭，吃饭的时候，正吃着深海鳕鱼片，蘸上番茄酱，那美味，简直无以言表。突然产品急匆匆的跑过来说：“今天需求能上线吧？”我忽然虎躯一震，想到自己遇到个问题迟迟找不到原因，怯怯的回答道：“能...能吧...”，产品听到‘能’这个字便哼着小曲扬长而去,留下我独自一人，面…"}, {"id": "6947168516394975239", "title": "浅析React中的EffectList", "desc": "React中，会遍历EffectList来执行节点操作、生命周期方法、Effect方法，可以把EffectList比作圣诞树上挂的彩灯，而这颗圣诞树就是Fiber树。 为什么会存在EffectList呢？打个比方来说，一颗Fiber树中有一些Fiber节点需要执行compone…"}, {"id": "6932262890195910670", "title": "ReactDOM.render串联渲染链路（一）", "desc": "Fiber是对React核心算法的重构。 在这段源码中主要的操作就是赋值fiberRoot对象，这个对象是通过root._internalRoot赋值，本质上这个对象是一个FiberRootNode对象，其中包含一个current对象，这个对象是FiberNode实例。而 Fi…"}, {"id": "6844903729980768269", "title": "[译]我们为什么要写 super(props)?", "desc": "我听说 Hooks 最近很火。讽刺的是，我想以一些关于 class 组件的有趣故事来开始这个博客。怎样！（皮一下很开心） 这些小坑并不会影响你高效的使用 React，但如果你愿意深入了解下背后的工作原理，你会发现它们非常有意思。 这是第一个。 当然，class fields p…"}, {"id": "6844903508798357511", "title": "React源码解析(二):组件的类型与生命周期", "desc": "在上一篇文章《React源码解析(一):组件的实现与挂载》中，我们阐述了React组件的实现和挂载。现在我们来一起探究组件的生命周期。 我们已经知道，只有在挂载流程开始后，才会触发组件的生命周期，生成ReactElement类型的js对象，通过解析组件对象内部所携带的信息，获得…"}, {"id": "6995008249862815757", "title": " JSX 语法的使用及其注意点", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 在使用react开发项目的时候，基本都会使用到JSX 语法，它的主要特点就是，凡是使用 到JavaScript 的值的地方，都可以插入这种"}, {"id": "6844904126426398734", "title": "浅谈redux、react-redux、redux-saga原理", "desc": "react自从2013年推出到如今已经走过了很多个年头，react生态redux、react-redux、redux-saga也已经成为react开发者的配套标准，使用起来已经相当熟悉，本文简单聊聊redux、react-redux和redux-saga的实现原理。 这张经典的…"}, {"id": "6992030786358607879", "title": "React 最佳实践：处理多个数据源｜ 8月更文挑战", "desc": "当页面数据来自于多个请求时，我们需要先考虑这几点： 请求之间无依赖关系，可以并发进行 请求之间存在依赖关系，需要依次进行 请求完成之前，页面显示 Loading 状态"}, {"id": "6844904052862484487", "title": "使用 React 的 Context API 来管理数据", "desc": "事实上大型应用搭配 Redux 帮助管理复杂的数据流是比较好的选择, 但如果中小型应用想要摆脱 Redux 较多的概念与固定的模板语法, 我们也有新的选择: React V16 版本推出了新版的 Context API, 可以帮助我们使用较低的成本快速管理数据流. Contex…"}, {"id": "6844903650687451144", "title": "通过一个计数器来了解react-redux及其用法", "desc": "react之前在看看的时候工作过，后面到了TX就一直使用vue，react被忘得一干二净，这几天下了一个决心，想把react文档从头到尾重新看一遍，结果发现东西实在是太多了。react，redux，react-redux，react-router...该怎么破？ react-r…"}, {"id": "6950584624108011551", "title": "使用UmiJS框架开发React", "desc": "1、什么是Umi.js?umi，中文可发音为乌米，是一个可插拔的企业级 react 应用框架。你可以将它简单的理解为一个专注性能的类 next.js前端框架"}, {"id": "6844903622459785224", "title": "[译] 更可靠的 React 组件：提纯", "desc": "在函数式编程的术语里，一个 纯函数（pure function） 总是根据某些给定的输入返回相同的输出。让我们看一个简单的纯函数： 对于给定的两个数字，sum() 函数总是返回同样的相加值。 一旦对相同的输入返回不同的输出了，一个函数就变成 非纯（impure） 的了。这种情况…"}, {"id": "6844903735345283085", "title": "React: 高阶组件再理解", "desc": "开始学习 react 的时候，有一个难点，高阶组件。 以前写过一篇不太成熟的文章，这里忙里偷闲再来详细的理解一下。 最出名的高阶组件就是 redux 状态管理的 connect 组件。大家可以取看一看实现的源码。 redux connect 实现源码。 类似于setTimeou…"}, {"id": "6943532108841238535", "title": "React.js的一些笔记", "desc": "一、style React.js 中的元素的 style 属性的用法和 DOM 里面的 style 不大一样，普通的 HTML 中的： 在 React.js 中你需要把 CSS 属性变成一个对象再传给"}, {"id": "6844903606567567367", "title": "simple-react：极简的 React 框架", "desc": "simple-react：极简的 React 框架"}, {"id": "6875262564209524749", "title": "原生html实现一个mini-react-router", "desc": "2、history 路由， url和普通路由没有差异。 如 baidu.com/foo/bar/baz @可选url：目标url，不会检查url是否存在，且不能跨域。如不传该项,即给当前url添加data 利用观察者模式封装简单的listen API。让用户监听到history…"}, {"id": "6844903504847306760", "title": "antd源码解读（6）- Affix", "desc": "这个组件是一个图钉组件，使用的fixed布局，让组件固定在窗口的某一个位置上，并且可以在到达指定位置的时候才去固定。"}, {"id": "6844903574594387981", "title": "React 应用中的性能隐患 —— 神奇的多态", "desc": "基于 React 框架的现代 web 应用经常通过不可变数据结构来管理它们的状态。比如使用比较知名的 Redux 状态管理工具。这种模式有许多优点并且即使在 React/Redux 生态圈外也越来越流行。 这种机制的核心被称作为 reducers。 它们是一些能根据一个特定的映…"}, {"id": "6844903501311508487", "title": "用 Three.js, React 和 WebGL 开发游戏 — SitePoint", "desc": "我正在制作一款名为 “Charisma The Chameleon” 的游戏，它使用 Three.js，React 和 WebGL 开发。这是一篇使用 react-three-renderer (简称 R3R) 结合这些框架的介绍。 SitePoint 上有关于 React 和…"}, {"id": "6844903907085271054", "title": "React 源码中的 Object.seal", "desc": "在 React 和 ReactROM 源码中，xx.development.js 代码都会使用到 Object.seal，主要是对 ref 做属性扩展限制，防止对象的 key 发生变更。 Object.seal() 方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置…"}, {"id": "6844903545334923272", "title": "深入理解React源码 - 首次渲染 III", "desc": "上次我们走完了平台无关的逻辑流程（表层）。简单来说，这个过程把ReactElement[1]封装进ReactCompositeComponent[T] 里面，然后再用它来派生出ReactDOMComponent[ins]. 本篇我会继续讨论ReactDOMComponent[i…"}, {"id": "6844903781902073863", "title": "[react-control-center tutorial 3] 数据驱动视图的灵魂setState", "desc": "可以看到上图里除了setState，还有dispatch、effect，以及3个点，因为cc触发有很多种，这里只提及setState、dispatch和effect这3种能覆盖用户99%场景的方法，期待读完本文的你，能够爱上cc。 前面文章我们介绍cc.startup时说起推荐…"}, {"id": "6844903647155847176", "title": "使用mobx优化React应用程序", "desc": "在这里我将简短地讲述我关于如何通过简单的技巧将网络应用程序的性能提高10倍的故事。 我正在为客户构建基于Web的应用程序。 它是视频的字幕（字幕）审核工具。 所以你有一个视频，你有字幕列表，你想编辑它们。 有一天，我将大型项目加载到应用程序中。 该项目有数百个标题。 该应用程序…"}, {"id": "6844903910096764941", "title": "react解析 render的FiberRoot(三)", "desc": "render函数中的参数element是 传入的组件，containerDOM节点容器，callback是回调函数。ReactDOM.render文档。 container表示DOM元素节点容器, 在上面的代码中会创建一个ReactRoot，然后将它挂载在container容器…"}, {"id": "6903480798822400007", "title": "深入浅出 React -- 生命周期", "desc": "所谓 “封闭”，是针对组件数据改变到组件实际发生更新的过程。在组件自身的渲染过程中，每个组件都只会处理它自身内部的渲染逻辑。在没有数据交流的情况下，组件之间互不干扰 所谓 “开放”，是针对组件间通信的。React 允许开发者基于单向数据流的原则来完成组件之间的通信。组件之间的通…"}, {"id": "6844903506055299085", "title": "React-Navigation库，Redux模块的完全状态管理，标签栏和多重导航器", "desc": "17年2月5日更新到最新版的React-Navigation库接口，和最新版的React-Native框架 发了帖才发现自己傻了，８天前那些人已经为React-Native框架发布了新一版的导航器，这个导航器可能才是最终适合Reactive-Native框架的。"}, {"id": "6844903816953872398", "title": "一个简单的构建React组件动画方案", "desc": "当 CSSTransition 的 in属性值切换时true的时候会依次给chidern 添加 fade-enter, fade-enter-active, fade-enter-done。 当 CSSTransition 的 in属性值切换时false的时候会依次给chide…"}, {"id": "6844903657679388680", "title": "快速入门 TypeScript React Starter 工程", "desc": "WLM-TypeScript-React-Starter 是一个 TypeScript Starter 项目，集成了 [ React + React-Router + Redux + Redux-Thunk ]，旨在为 Web 应用程序开发者提供 “开箱即用” 的 TypeSc…"}, {"id": "6993150359317250085", "title": "这几个关键的数据结构都不会，还怎么学react源码", "desc": "不知道大家在学习react源码的时候有没有这样的感觉：fiber对象的结构太复杂了，不仅是属性繁多，而且有些属性还是个巨复杂的对象。我在学习hooks的时候，这种感觉尤为强烈。那么，这篇文章就以fib"}, {"id": "6989142238273994789", "title": "React基础概念一", "desc": "脚手架 jsx 类式组件 函数式组件 事件处理(this问题的三大方案) 生命周期 通信 setState"}, {"id": "6992849388888391688", "title": "🔥仿天猫放大镜效果的React组件", "desc": "一、基于React+Hooks实现的一个仿天猫的购物放大镜组件 二、使用方法 三、使用注意事项 1.需要将img标签作为子元素传入 四、开放的API 1.offsetLeft 2.shrinkProp"}, {"id": "6844903974244630535", "title": "React无门槛实现拖拽布局、表单设计器", "desc": "现在有很多优秀的拖拽布局工具，表单设计器，layui拖拽布局, Vue-Layout。 我们最近也实现了类似的功能，废话不多说，先把预览贴出来（不知道为什么掘金现在图片不支持gif了，还要自己上传到图床）。 在实现这个的功能的过程中，也走了一点弯路，我们内部1.0版本的时候，使…"}, {"id": "6956035446501539847", "title": "造一个 react-error-boundary 轮子", "desc": "​| 导语 捕获和处理前端组件异常是个十分重要且必要的操作。对于 React 来说，一般用 ErrorBoundary 来实现，今天就带大家一起造一个 react-error-boundary 的轮子"}, {"id": "6922595635396870152", "title": "深入学习并手写 React Ant Design4 表单核心库 rc-field-form", "desc": "最近有一个非常复杂的表单需求，可能需要对表单做“任何事情”，现有的 UI 组件库选用的是 Ant Design 简称 antd 。它的 Form 表单已经帮我们把“表单项校验”、“表单项错误信息”等常见操作全部封装好了。使用起来非常便捷。翻看了 antd Form 源码发现其核…"}, {"id": "6844903957534507021", "title": "呕心沥血，一文看懂 react hooks", "desc": "react hooks 是 React 16.8 的新增特性。 它可以让我们在函数组件中使用 state 、生命周期以及其他 react 特性，而不仅限于 class 组件"}, {"id": "6959885030063603743", "title": "React useState和setState到底是同步还是异步呢？", "desc": "先来思考一个老生常谈的问题，setState是同步还是异步? 再深入思考一下，useState是同步还是异步呢？ 我们来写几个 demo 试验一下。"}, {"id": "6995837375372853278", "title": "react版本markdown编辑器md-editor-rt，支持ssr", "desc": "Markdown编辑器，react版本，支持ssr，支持切换主题，支持prettier美化文本，图片粘贴上传，图片裁剪上传，支持仅预览模式。"}, {"id": "6976903535191392270", "title": "React Hooks 核心实现", "desc": "React Hooks 核心实现：1、每个组件对应一个fiber节点 2、react hooks是按顺序执行的，不能嵌套..."}, {"id": "6953933167321415716", "title": "react自动化构建路由", "desc": "react自动化构建react-router-dom路由 require.context扁平化数据转树形结构"}, {"id": "6877546408925200391", "title": "React调试利器：React DevTools", "desc": "得益于 chrome 浏览器强大的调试能力， console.log 可谓是前端开发中解决未知问题最直接的办法，遇事不决，打个日志，简单粗暴🏈。但是在 React 项目中其实有更好的调试方案，那就是官方（脸书）出的 react devtools ，可以针对性的做一些代码的调试…"}, {"id": "6977223252175241229", "title": "React要更新，就像渣男会变心", "desc": "大家好，我是卡颂。 今天和同事聊天，我说他是个铁憨憨，不会和女生聊天。 他啪的一下跳起来，“我可懂情调了” “哦？那你来句土味情话。” 他清清嗓子，压低了腔调，望向远方，缓缓道： 正当他沉浸在YY的世"}, {"id": "6932622885982846989", "title": "你应该会喜欢的5个自定义 Hook", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 React hooks 已经在16.8版本引入到库中。它允许我们在函数组件中使用状态和其他React特性，这样我们甚至不需要再编写类组件。 实际上，Hooks 远…"}, {"id": "6876685201674600462", "title": "不用try catch，如何机智的捕获错误", "desc": "这是多个feature组合使用后实现的神奇效果，在React源码中被广泛使用。 我们知道，React中有个特性Error Boundary，帮助我们在组件发生错误时显示“错误状态”的UI。 为了实现这个特性，就一定需要捕获到错误。 所以在React源码中，所有用户代码都被包裹在…"}, {"id": "6975453898899193869", "title": "React学习第七天---Virtual DOM 及 Diff 算法（ref属性实现和key比对DOM更新）（六）", "desc": "这是我参与更文挑战的第18天 源码 大家好我是小村儿，我们今天是React的Virtual DOM及diff算法的结尾： 实现ref属性获取元素DOM对象，获取组件实例对象 使用key属性进行节点对比"}, {"id": "6888616874171432973", "title": "从一个需求出发，聊聊useRef三兄弟", "desc": "Vue、React、Angular这一类前端框架的出现使得我们不再需要去手动操作Dom了，回想曾经的JQuery时代，与DOM打交道是最为频繁也最为头疼的，比如我前端入门时期收获最多的书之一就是JavaScript DOM编程艺术。 现在我们和DOM直接打交道的机会少的多了，但…"}, {"id": "6844903958968795149", "title": "React Hooks  你真的用对了吗？", "desc": "从 React Hooks 正式发布到现在，我一直在项目使用它。但是，在使用 Hooks 的过程中，我也进入了一些误区，导致写出来的代码隐藏 bug 并且难以维护。这篇文章中，我会具体分析这些问题，并总结一些好的实践，以供大家参考。 如果使用单个 state 变量，每次更新 s…"}, {"id": "6844903938093744135", "title": "精读《React Hooks 最佳实践》", "desc": "React 16.8 于 2019.2 正式发布，这是一个能提升代码质量和开发效率的特性，笔者就抛砖引玉先列出一些实践点，希望得到大家进一步讨论。 然而需要理解的是，没有一个完美的最佳实践规范，对一个高效团队来说，稳定的规范比合理的规范更重要，因此这套方案只是最佳实践之一。 拥…"}, {"id": "6973174015573786637", "title": "使用useReducer+useContext模拟一个redux", "desc": "背景介绍 在使用React开发项目的时候，通常对于一些全局数据我们都会选择使用redux来进行管理，但是在有些场景却不一定非要使用redux，比如下面的几个场景 部分复杂页面状态需要进行祖孙传递 项目"}, {"id": "7000364975495577614", "title": "React DOM Diff算法", "desc": "这是我参与8月更文挑战的第24天，活动详情查看:8月更文挑战 首先上一段代码 时间在更新，每次更新，虚拟DOM就会进行对比，如果对比出不同，才会重新渲染真实DOM。对比的最小粒度是：标签。（最小粒度："}, {"id": "6974617278784471048", "title": "一起来看 React 18 最新特性", "desc": "React 18 Alpha 以及来了，并没有像 React 17 没有更新很多新特性，V18 作为 React 的下一个大版本将关注点放在了并发模式上也就是谈论了很久的（Concurrent Mod"}, {"id": "6997688923967193095", "title": "【React】动画库：react-transition-group", "desc": "react-transition-group提供了用于定义动画的简单组件，该库并未定义样式本身，而是以有用的方式操作DOM，从而使过渡和动画的实现更加舒适。"}, {"id": "6973267854858649630", "title": "React 面试必知必会 Day7", "desc": "如何在 React 使用样式？ style 属性接受一个小驼峰命名法属性的 JavaScript 对象，而不是一个 CSS 字符串。"}, {"id": "6994618571942805512", "title": "一个Bug，浅入 React 合成事件", "desc": "React 合成事件虽然承袭了事件委托的思想，但它的实现过程比传统的事件委托复杂太多。对 React 来说，事件委托主要的作用应该在于帮助 React 实现了对所有事件的中心化管控。"}, {"id": "6893817287917338632", "title": "🔥基于React全家桶开发「网易云音乐PC」项目实战(一)", "desc": "非常感谢王红元老师的React核心技术实战让我学习到很多 React 的知识。"}, {"id": "6982049654657515550", "title": "简述Vue和React开发体验的异同（UI层）", "desc": "前言 最近刚加入新公司，组内的前端技术栈以vue为主，之前在上家公司写react会多一些，花了几个小时的时间重新过了一遍vue的文档，毕竟已经快三年没接触了。"}, {"id": "6993901549818757151", "title": "React入门八：Context", "desc": "这是我参与8月更文挑战的第七天，活动详情查看：8月更文挑战 \\ 1.思考：App组件要传递数据给Child组件，该如何处理 处理方式：使用props一层层组件往下传递（繁琐） 更好的办法：使用Cont"}, {"id": "7000252707529785381", "title": "解决页面滚动, 🍖ant design的select框和选项分离问题, 同时理解ant的html设计技巧.", "desc": "通过解决我们也学一下ant的html/css设计技巧. 现象 滚动的时候, 这里\"负责人\"的选项和select框已经分离了. 我用的vue版本的, 我看了下react版本的api设计, 我想2个都会出"}, {"id": "6871018004289683463", "title": "多种方式实现自定义 React 路由拦截弹窗", "desc": "在做项目的时候，你的产品可能会提出这样的需求：在某些拥有表单的页面中，如果用户还未保存表单数据，就想去浏览别的页面内容。这时候需要给一个弹窗，提示用户是否需要在未保存数据的情况下跳转页面。 最简单的实现就是使用 react-router 提供的 Prompt 组件来控制是否显示…"}, {"id": "6844903695067381767", "title": "腾讯发布前端组件框架 Omi，全面拥抱 Web Components", "desc": "左(上)边是Omi，右(下)边是 React，Omi 使用 Shadow DOM 隔离样式和语义化结构。 点击这里看执行结果。 Cli 自动创建的项目脚手架是基于单页的 create-react-app 改造成多页的，有配置方面的问题可以查看 create-react-app …"}, {"id": "6844903592587952142", "title": "Flutter教程(一) Flutter简介", "desc": "Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。 Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。简单来说，Flutter是一款移动应用程序S…"}, {"id": "6999923298716876837", "title": "React 18 新特性（三）：渐变更新", "desc": "本文详细介绍了 startTransition、useDeferredValue、useTransition 的用法和使用场景。讲述了低优先级更新的优缺点和启用方式。"}, {"id": "6885115003289436174", "title": "适合Vue用户的React教程，你值得拥有（二）", "desc": "上周小编我写了 适合Vue用户的React教程，你值得拥有，得到了小伙伴们的一致好评，今天这篇文章是这一系列的第二篇文章。今年的9月18日是九一八事变89周年，同时在这一天，Vue3.0正式版发布了。相信很多小伙伴已经看过了Vue3.0相关的很多文章了。今天这篇文章将会对Vue…"}, {"id": "6844903607393845255", "title": "如何阅读大型前端开源项目的源码", "desc": "目前网上有很多「XX源码分析」这样的文章，不过这些文章分析源码的范围有限，有时候讲的内容不是读者最关心的。同时我也注意到，源码是在不断更新的，文章里写的源码往往已经过时了。因为这些问题，很多同学都喜欢自己看源码，自己动手，丰衣足食。 这篇文章主要讲的是阅读大型的前端开源项目比如…"}, {"id": "7005101670858227742", "title": "React与Vue区别", "desc": "1.Vue有更好的渲染优化: React中当某个组件发生变化时，会以该节点为根，重新渲染所有的子组件，如果要避免子组件的重新渲染，可以在生命周期函数shouldComponentUpdate中进行设置"}, {"id": "6977373208370479117", "title": "从Vue2.0到React17——React组件之间的通讯", "desc": "React组件之间的关系可以分为父子关系，跨级关系，非嵌套关系。本文主要介绍一下各种关系的React组件之间是如何通讯的。"}, {"id": "6844903911367639054", "title": "react hooks+redux+immutable.js打造网易云音乐精美webApp", "desc": "大家好，我是神三元。 上次出了服务端渲染的文章，获得了很多大佬的点赞评论，非常开心。之后一段时间有人问我为什么突然在掘金消失了，其实也并没有，这个社区还是经常在关注的，不过，更重要的是，这段时间淡出大家的视野，我决定开始沉淀一些技术上的东西，把之前学到的一些技术栈和对前端工程的…"}, {"id": "7001736764264022029", "title": "Hook API 理念篇", "desc": "本篇文章会介绍Hook API，为了接下来对React底层的解析。 什么是Hook Hook是一些可以让你在函数组件里钩入React state以及生命周期等特性的函数。 Hook 动机 Hook解决"}, {"id": "6866940379866857480", "title": "React16.13.1网抑云实战 （第一周）|  axios封装、轮播图实现、alias别名", "desc": "基于两点：（一）是笔者在企业中是使用react 开发，不过有的处理问题的方案还是比较老旧。举个例子：关于redux 还是使用原始的switch 一通写，比如使用thunk要处理 网络请求的几种状态 包括 加载之前 加载中 记载异常等等，这些都要处理，会有很多相似的看起来很尴尬的…"}, {"id": "6844904004611211277", "title": "React源码解析之FunctionComponent（上）", "desc": "所以我现在暂时还不知道 children 到底是个啥，后面如果有新发现的话，会在「前言」中提到。"}, {"id": "6844903580944580621", "title": "基于React的脚手架搭建", "desc": "为了能够在工作中更加快速的搭建起开发环境，所以在create-react-app的基础之上结合自身公司业务和个人习惯，搭建了个更加方便的脚手架。GitHub地址 按照如上操作即可,然后再添加src/**/*.css在.gitignore文件中。接下来我们希望项目能够监测scss…"}, {"id": "6844903986160467982", "title": "[译] 使用 React Hooks 构建电影搜索应用程序", "desc": "在这篇文章中，我们将使用 React Hooks 构建一个非常简单的应用程序。因此，我们不会在此应用程序中使用任何class 组件。 我将解释一些API的工作原理，以便于使你能在构建其它应用程序时能更得心应手地使用 React Hooks。 我知道，这名字看起来很有创造性...…"}, {"id": "6865127242218635272", "title": "React服务器渲染框架Next.js", "desc": "完善的React项目架构，搭建轻松。比如：Webpack配置，服务器启动，路由配置，缓存能力，这些在它内部已经完善的为我们搭建完成了。 自带数据同步策略，解决服务端渲染最大难点。把服务端渲染好的数据，拿到客户端重用，这个在没有框架的时候，是非常复杂和困难的。有了Next.js，…"}, {"id": "6943226548191232030", "title": "[面不面试都该懂]React的Fiber调度和浏览器的帧", "desc": "能够把可中断的任务切片处理。 能够调整优先级，重置并复用任务。 能够在父元素与子元素之间交错处理，以支持 React 中的布局。 能够在 render() 中返回多个元素。 更好地支持错误边界。 Fiber 调度的主要实现其实就是参考了BOM中的2个比较有意思的API实现的：r…"}, {"id": "6844903618580217864", "title": "react-router 源码浅析", "desc": "用 react-router 也用了比较久了，对他的内部工作方式却只是了解皮毛，而且大部分还是通过别人的博客。最近两周打算自己探究一下他的实现。 注意！因为我只使用过 v3 版本的 react-router，因为对他的使用方式比较熟悉，所以这次解析也是基于这个版本。 聊到这个话…"}, {"id": "6844903649353662477", "title": "TypeScript 3.0重磅发布，新特性详解！", "desc": "今天，微软正式发布 TypeScript 3.0，这是 TypeScript 之旅的一个新的里程碑！ 3.0 虽然是个大版本，但并没有包含太多重大的突破性变更（也就是说升级很容易）。新版本引入了一种新的灵活且可扩展的方式来构建项目、对操作参数列表提供了更强大的支持、新的强制显式…"}, {"id": "6912323884230377485", "title": "Context + Hook + HOC 实现React的状态管理", "desc": "在使用React开发一个应用时，我们有时会遇到组件树中位置不同，层级不同的n多个组件需要状态共享的问题，我们可以使用redux/mobx来管理，当然context也为我们提供一个可行方案。"}, {"id": "6844903689073721351", "title": "NG-ZORRO-MOBILE (Ant Design Mobile of Angular) 移动端UI组件库正式发布", "desc": "NG-ZORRO-MOBILE 是 Ant Design 移动规范的 Angular 实现。 Ant Design 作为服务于企业级产品的设计体系，基于『确定』和『自然』的设计价值观，通过模块化的解决方案，降低冗余的生产成本，用其简单且高效的设计理念，让设计者专注于更好的用户体…"}, {"id": "6864919605853798407", "title": "React SSR 实践过程（三）", "desc": "上一节对资源稍微作了处理，接下来把生产环境配置一下，对js进行按动态加载处理，开发中很多情况下，需要基于路由分包或者对一些比较少用到的库进行分包。 前面webpack.base.js是把服务端和客户端的相同部分抽离出来，现在既然有了生产环境配置，那么就修改一下webpack.b…"}, {"id": "6844903560228896781", "title": "在 React、Vue项目中使用 SVG", "desc": "在一些现代的扁平化设计网站，特别是移动端网站，经常会包含许多简单而清晰的小图标，例如网站图标、用户的默认头像、移动端网页首页底部固定的切换栏等，这些小图标一般都是由美工做好，可能会放到精灵图上，前端再"}, {"id": "6844904202943070222", "title": "为什么React需要Hook？", "desc": "我觉得React在一开始使用类来声明组件，一方面是这个很直观，当你想到状态、方法和渲染函数的集合时，第一反应会是用一个类来承载，另一方面是这也让使用者更好上手，API比较直观容易理解。 类组件的主体是这个类，渲染函数只是其中一部分，但其实并不是每个组件都需要一个复杂的实例，真正…"}, {"id": "6844903831239655437", "title": "【译】如何在 React Hooks 中请求数据？", "desc": "在本文中，我将会向你展示在React中怎样用Hooks来获取数据通过使用state和effect hooks。我们将用众所周知的Hacker News API来获取科技界的热门文章。你也可以实现获取数据的自定义hook，在应用的任何位置复用，也可以作为独立的依赖包在npm上发布…"}, {"id": "6844903825527013390", "title": "TypeScript + Webpack + Koa 搭建 React 服务端渲染", "desc": "最终结果并不是，是由于 resolve.extensions 中我只配置了 ts 和 tsx 结尾的文件类型，但是没有 js 和 jsx 结尾的。修改 webpack.base.js OK, node 服务能在修改后自己重启。 但是发现 require 进来的 serverEn…"}, {"id": "6844903502024540173", "title": "让URLSearchParams帮你生成和解析参数字符串", "desc": "无论在Node.js程序还是HTML前端程序里，我们都免不了像下面这样手工拼URL搜索字符串（URLSearchString，或称QueryString）：如果你逐行阅读上面的代码，不难发现这段程序并"}, {"id": "6844903504838918158", "title": "前端数据层不完全指北 ", "desc": "不知不觉间时间已经来到了 2017 年末尾。 在过去一年中，关于前端数据层的讨论依然在持续升温。不论是数据类型层面的 TypeScript，Flow，PropTypes，应用架构层面的 MVC，MVP，MVVM，还是应用状态层面的 Redux，MobX，RxJS，都各自拥有一批…"}, {"id": "6844903687593132045", "title": "从 Dropdown 的 React 实现中学习到的", "desc": "展开 dropdown menu 后，点击任意地方都应该收起 menu。 展开 dropdown menu 后，点击 menu 内部，不会收起 menu，只有点击 menu 外部，才收起 menu。 在 jQuery 时代，dropdown 是很好实现的，直接用 documen…"}, {"id": "6844903760590798862", "title": "在小程序中使用 React with Hooks", "desc": "Remax 是一个跨多端小程序 React 开发方案，之所以称其为“方案”而非框架是因为这并非一个新的框架，其主要能力就是让 React 能够直接运行在 微信小程序/支付宝小程序/字节跳动小程序/H5（当然这个本来就支持） 等环境。 可能会有人要会问 “React 不是早就可以…"}, {"id": "6946254308375527455", "title": "react-beautiful-dnd快速上手", "desc": "拖拽上下文，这个组件用来包裹我们想要拖拽的列表，&#x3C;Droppable />和&#x3C;Draggable />必须放在这个组件里面。 其中OnDragEnd是拖拽结束事件，是必须要传的参数。 可放置组件，这个组件用来包裹能够被拖动元素放置的列表。 组件内部只接收函数…"}, {"id": "6888664781080051726", "title": "我的React服务端渲染实践", "desc": "最近这段时间因为工作需要，实践了一下服务端渲染(Server Side Render，以下简称SSR）技术，在这个过程中遇到了很多问题，也参考了很多开源框架的解决方案，感觉受益匪浅，于是有了这篇文章，目的是从零开始，教会大家如何搭建一个属于自己的基于 React 的 SSR 框…"}, {"id": "6895882310458343431", "title": "SPA 路由三部曲之核心原理", "desc": "为了配合单页面 Web 应用快速发展的节奏，近几年，各类前端组件化技术栈层出不穷。通过不断的版本迭代 React、Vue 脱颖而出，成为当下最受欢迎的两大技术栈。 仅 7 个月的时间，两个技术栈的下载量就突破了百万，React 甚至突破了千万。不管是现下流行的 React、Vu…"}, {"id": "6999941552634069006", "title": "react hooks项目中的实践", "desc": "引言 本文将介绍一些在日常开发中使用react hooks的心得体会，将着重介绍两个hooks的使用：useState 和 useEffect这两个比较常用的使用方式。 1、在react class组"}, {"id": "7002613993231613966", "title": "React-ref的使用", "desc": "在react里面ref一般用来获取组件的实例或者DOM元素的实例，通常的用法是在父组件获取到子组件的实例，或者子组件内部某个dom元素的实例，现在针对这一需求进行探索： 这里子组件有两种方式创建，第一"}, {"id": "6993847566014103582", "title": "react hooks中， useEffect的依赖为引用类型如何处理？", "desc": "什么是useEffect ？ react推出的，用于执行副作用的钩子 什么是副作用？ 在react组件中， 执行数据请求 、 dom操作，统一称之为副作用 如何使用？ useEffect接收两个参数，"}, {"id": "6993275270866141221", "title": "初探 React - 双缓存 fiber tree", "desc": "虽然知道从 16 版本以后，React 采取了**双缓存 fiber tree**，但一直对**双缓存 fiber tree** 存在的意义不是很理解。琢磨了一段时间，感觉也没有必要采用双缓存 fib"}, {"id": "6998456779998756895", "title": "浅谈React Native之原理篇", "desc": "这是我参与 8 月更文挑战的第 20 天，活动详情查看： 8月更文挑战 前言 要说React Native的原理，我们就不得不先聊聊React了。 React 框架是一个非常优雅、现代的前端开发框架，"}, {"id": "6992415548659204103", "title": "hooks 系列八：hooks 小结", "desc": "到此为止，我们的 hooks 系列只剩下最后一个大案例了。现在我们来对之前的内容做一个回顾。 hooks 是 React 16.8 新增的特性，它可以在不编写 类组件 的情况下使用 state 以及其"}, {"id": "6976997792652722207", "title": "从Vue2.0到React17——React函数组件的生命周期", "desc": "React函数组件中无法使用React类组件的生命周期钩子函数，故要使用React Hook模拟React类组件的生命周期钩子函数。"}, {"id": "6991742616177999885", "title": "React性能优化 | 8月更文挑战", "desc": "react以组件的形式来组织逻辑，组件允许我们将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。因此 React 有一些充满了自身特色的性能优化思路，这些思路基本都围绕“组件性能优化”这"}, {"id": "6844903553291517959", "title": "16年毕业的前端er在杭州求职ing", "desc": "因为曾经看过一篇文章面试分享：一年经验初探阿里巴巴前端社招所以来杭州也是带有目标的，网易！如果能有幸加入阿里，也是非常荣幸的。所以面试总是懒懒散散的，大概一天也就面试一家。 目前的状态是阿里通过了技术面和交叉面，大概下周一总监面+hr面。网易hr面结束了，在等通知，科大讯飞已经…"}, {"id": "6844903714164047879", "title": "看看这些被同事喷的JS代码风格你写过多少", "desc": "现在写代码比以前好多了，代码的格式都有eslint,prettier,babel(写新版语法)这些来保证，然而，技术手段再高端都不能解决代码可读性（代码能否被未来的自己和同事看懂）的问题，因为这个问题只有人自己才能解决。我们写代码要写到下图中左边这样基本上就功德圆满了。 你可以…"}, {"id": "6991430748506947591", "title": "React 基础 - JSX ｜ 8月更文挑战", "desc": "jsx是什么以及如何理解jsx？ jsx转js对象的babel转换器 官方： jsx是JavaScrip 的一种扩展语法。我们推荐在 React 中使用这种语法来描述 UI 信息。JSX 可能会让你想"}, {"id": "6844903846666321934", "title": "一篇文章总结redux、react-redux、redux-saga", "desc": "不愿清醒，宁愿一直沉迷放纵。 不知归路，宁愿一世无悔追逐。 --- 王小波 redux是的诞生是为了给 React 应用提供「可预测化的状态管理」机制。 提供subscribe，dispatch，getState这些方法。 按步骤手把手实战。 不就ok了吗？这就是 react-…"}, {"id": "7004772424700919816", "title": "React组件库搭建流程 （一） -- 开发调试", "desc": "本文主旨是让同学们能快速的搭建起组件库的基础平台，包括文档、部署站点等。站点是基于[dumi](https://d.umijs.org/zh-CN)生成，有兴趣的同学可以深入学习。"}, {"id": "7002135932208381966", "title": "React history 路由模式webpack配置不生效", "desc": "React history 路由模式webpack配置不生效 修改路由模式 把 HashRouter 替换为 BrowserRouter 修改webpack配置, 不过未生效"}, {"id": "7002091475622166536", "title": "帮助你提升react技能的一些资源", "desc": "React.js是[facebook](http://www.facebook.com)的一个开源项目。本文旨在帮助你整理提升react技能的一些资源"}, {"id": "6886290490640039943", "title": "「源码解析 」这一次彻底弄懂react-router路由原理 ", "desc": "个人理解，单页面应用是使用一个html下，一次性加载js, css等资源，所有页面都在一个容器页面下，页面切换实质是组件的切换。 history 可以理解为react-router的核心，也是整个路由原理的核心，里面集成了popState,history.pushState等底…"}, {"id": "7003177688965840904", "title": "React 优先级 lane 与 更新", "desc": "react中工作（遍历fiber，渲染dom），更新 `state` 都和优先级密切相关。 优先级由 `lane` 实现 ，调度工作 由 `Scheduler` 实现，2者优先级会互相转换。"}, {"id": "6844903684422254606", "title": "TypeScript 在 React 中使用总结", "desc": "近几年前端对 TypeScript 的呼声越来越高，Ryan Dahl 的新项目 Deno 中 TypeScript 也变成了一个必须要会的技能，知乎上经常见到像『自从用了 TypeScript 之后,再也不想用 JavaScript 了』、『只要你用过 ES6，TypeScr…"}, {"id": "6992107492364943368", "title": "React源码系列之五：hooks之useCallback，useMemo", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第二篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6844903993072697352", "title": "前端知识库Reactjs系列三（hooks和高阶组件）", "desc": "接着上一小节到内容，下面我们会来详细介绍上一节中提到到相关知识。本节我把reactjs hooks和高阶组件放在一起是因为这两块内容都是组件化中相关的内容。高阶组件使用过reactjs的人都应该有所了解，hooks是reactjs 16.8.0新增的属性。想再老项目中使用 ho…"}, {"id": "6885363665759895560", "title": "前端知识库Reactjs进阶系列（组件的加载过程）", "desc": "最近在项目中遇到react的组件多次渲染的问题，最后虽然顺利解决了但也同时发现了自己对于react生命周期的不熟悉，于是便找出react的文档重新去了解下，重新学习之后总结为以下两个主要知识点：react组件的整个渲染流程 react组件更新的注意点。 constructor：…"}, {"id": "6971044511539527710", "title": "记录一些React笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844903737262080014", "title": "react/react-native性能优化", "desc": "本文适合新手入门，如果是react老玩家可以break或者查漏补缺。 笔者一直觉的性能优化是一个累积的过程，贯穿在你所写的每一行代码中。不注意优化平常或许不会有什么大的问题，但是谁也不知道哪一句会变成压死骆驼的那最后一根稻草，造成世界爆炸💥。 下面是正文，希望能对你有所帮助。…"}, {"id": "6844904126854201357", "title": "简单实现一个 React 组件 keep-alive", "desc": "前言本文示例代码，在线例子已发布npm，地址1、功能说明一般来说，keep-alive至少需要做到两方面：组件状态恢复组件滚动位置恢复2、代码实现思路：在路由中/或者其他地方，函数作为children"}, {"id": "6844903533049970695", "title": "浏览器里的黑天鹅：不可预知的前端变革点", "desc": "『黑天鹅』是这样的事件：难以预测、冲击性大，并且能马后炮地事后分析。少数的黑天鹅事件几乎能解释这个世界上发生的所有事情。难道前端领域的演化也不是循序渐进，而是黑天鹅式的吗？让我们换一种角度回顾一下历史吧… 许多史书、传记都以一种决定论的视角来阐述历史演化的必然性，但实际上对于生…"}, {"id": "6844903776860504078", "title": "react-router4入门教程", "desc": "首先从react-router的npm包开始看起，分别有react-router和react-router-dom，两者的区别在于后者具有一些dom api，比如Link、BrowserRouter、HashRouter。不难发现react-router-dom具有一些在浏览器…"}, {"id": "6944153242809040903", "title": "项目优化实践：Webpack 动态导入 react-toastify ", "desc": "如果你的项目正在使用 react-toastify，可以看看本文。我是最近通过webpack-bundle-analyzer发现的一个问题，其实我们只有某个页面会可能用到弹框，比如你点了收藏之后会有弹框出来。但是通过打包结果和运行得出，每个页面无论有没有使用，一开始都引入了 r…"}, {"id": "6846687599625519111", "title": "🆘 一次理解清楚，为什么使用 React useEffect 中使用 setInterval 获取的值不是最新的", "desc": "这篇文章将通过一个使用 React Hook 常遇到的问题（stale state）入手，尝试理解 Hook 的内部运行逻辑。 废话不多说，直接看示例Sandbox。 你能看出示例代码中存在的问题吗？（如果一眼看出来了，那么继续阅读这篇文章可能不会给你带来收益。）这段代码实际运…"}, {"id": "6844904106289528846", "title": "React suspense用法详解", "desc": "React.suspense是大家用的比较少的功能，它早在2018年的16.6.0版本中就已发布。它的相关用法有些已经比较成熟，有的相对不太稳定，甚至经历了重命名、删除。 下面一起来了解下它的主要用法、场景。 从suspense源码可以看出，suspense捕捉到error后，…"}, {"id": "6844903697760124941", "title": "如何写出更好的 React 代码", "desc": "React使得创建交互式UI变得轻而易举。为应用程序中的每个状态设计简单的视图，当数据发生变化时，React将有效地更新和呈现正确的组件。 在这篇文章中，我将向您展示一些有助于您成为更好的React Developer的技巧。 我将介绍从工具到实际代码风格的一系列内容，它可以帮…"}, {"id": "6982040952412045349", "title": "react之组件通信", "desc": "前言：       最新在做react的B端项目、因为项目中没有用到Redux等数据管理库、所以涉及到了很多组件之前的数据传递和嵌套组件如何传递的方式，温故而知新 特此整理记录一下。 常见的组建通信的"}, {"id": "6844903498299998222", "title": "React 16 更新一览", "desc": "就在今天,React 团队正式发布了 React 16，这次发布带来了哪些内容呢？ React 16 采用了称为“Fiber”的全新的内部架构。官方对 Fiber 的一句话解释是“React Fiber是对核心算法的一次重新实现”。 以前的 React 使用的称为“Stack”…"}, {"id": "6861179098006781965", "title": "[译]React17官方提前说明", "desc": "React 17 版本很不寻常，因为他并没有添加任何面向开发者的功能。而专注于升级简化React本身。 我们正努力开发新的功能，但并不属于本次版本。React 17是我们深度推广的关键所在。 特别的是，React 17 是一个『垫脚石』版本，它会使由一个React版本管理的tr…"}, {"id": "6886346639205662734", "title": "手写react-redux核心原理，再也不怕被问react-redux原理", "desc": "当一个react项目组件层级越来越深，页面越来越多的时候，数据在各个组件层级和页面之间传递的需求就会比较多，很多变量也需要做成可全局管理的。在这个时候，redux和react-redux的使用就很有必要了。它们能帮助我们很方便的进行项目全局性的数据管理。 下面，就写一下我自己对…"}, {"id": "6905234297360220174", "title": "再谈副作用", "desc": "理解副作用是深入理解现代前端框架的前提。 副作用（side-effect）是指让一个函数变得不再纯净（pure）的东西。一个纯净的函数，无论何时何地（any time any wherer）执行，都会得到稳定的结果，这对保障程序的稳定性和性能都有极大的帮助。那么反过来，如果一个…"}, {"id": "6923953408843972616", "title": "React源码理解之reconcileChildrenArray", "desc": "    之前在学习React源码过程中一直对reconcileChildren的reconcileChildrenArray方法很糊，好多次对照着源码看网络的视频、博文都没能形成一个很清晰的认识。这不"}, {"id": "6870786810050510856", "title": "基于 rmc-notification 实现移动端 Toast", "desc": "最近在用 react 做移动端的时候需要一个消息提示的组件，然后我们的 ui 库是用的 MATERIAL-UI ,然后发现 antd-moblie Toast 不错。虽然可以用antd mobile 的组件并且只需要配置按需加载并不会增大多少打包体积，但是总感觉下一个库就用一个…"}, {"id": "6983677465914769421", "title": "React 学习之深入认识 setState", "desc": "React 系列学习之深入认识 setState 🌰 类组件数据更新时，有时候会出现一些与预期结果有差异的问题"}, {"id": "6844903613266034701", "title": "React 快速上手 - 09 数据请求 fetch", "desc": "fetch ... 异常处理要用 try ... catch ... IE 全阵亡，低版本 Safari 兼容问题，Firefox Chrome Opera 如果特性不开的话也会出问题，懂的同学说可以浏览器配置和打 polyfill 补丁，但是这样需要自己做很多工作，如果你的代…"}, {"id": "6964674784101662734", "title": "React：高阶组件(HOC）与 Render Props", "desc": "React中，复用逻辑我们经常采用高阶组件(HOC)的方式，将逻辑封装的在包装函数的内部实现，同样实现这种目的，我们还可以通过render props进行处理"}, {"id": "6844903876781408270", "title": "用最简单的方式画拓扑图！！！", "desc": "类似于拓扑图的配置，原来是使用go.js实现的，类似的库还有antv g6。重构主要是为了提高代码质量，降低维护成本，产品上需要更强的定制化能力（对付产品经理的变态需求），所以经过一番研究之后，最后决定放弃使用现成的库。原因如下： 定制化能力差。只能使用库里定义的api和事件，…"}, {"id": "6844904200309211149", "title": "更贴合hooks的状态管理--hox", "desc": "在之前的React Hooks：初探·实践提到过hooks更符合React编程模型，其中custom hooks更是让人眼前一亮，只能说用过的都说香，但是一直没找到贴合hooks的状态管理，虽然hooks的设计挺多来自于redux，但是redux基本和hooks没有交集，至于m…"}, {"id": "6844903608379523085", "title": "大前端性能总结", "desc": "使用defer延迟脚本执行：使用defer，该脚本会被推迟到整个HTML文档解析完后，再开始执行。被defer的脚本，在执行时会严格按照在HTML文档中出现的顺序执行。使用defer方法，可以提早脚本资源加载 使用async异步加载脚本：该脚本不会阻塞HTML parser，也…"}, {"id": "6931265430459777037", "title": "React 为什么不推荐修改 state？", "desc": "一图胜千言：手绘版："}, {"id": "6912593073067261966", "title": "facebook、twitter、facebook登录、whatsapp分享、微信分享", "desc": "几个概念爬虫所谓爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。html元素图谱对于国外第三方的分享元素图谱，是写在html的head部分，分为以下几个：|Tag|Descriptio"}, {"id": "6844903919760441352", "title": "可靠React组件设计的7个准则之终篇", "desc": "本篇文章重点阐述 可测试和富有意义。因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 尽管 组合、复用 和 纯组件 三个准则在掘金平台似乎不太受欢迎，不过本着有始有终的原则，当然我个人始终还是觉得此篇文章非常优质，还是坚持翻译完了。本篇是最后 可靠R…"}, {"id": "6844903588506894349", "title": "Webpack 4进阶--从前的日色变得慢 ，一下午只够打一次包", "desc": "近期在团队项目里把Webpack升级到4.4.1，过程中发现现存的升级文档十分有限，踩了不少坑，好在升级之后提升还算显著，production场景下第三方依赖打包速度提升76%，development场景下本地服务首次启动提升效果约46%，再次启动提升效果上升至63%。这里将这…"}, {"id": "6844903506797658119", "title": "手把手教你为 React 添加双向数据绑定（一）", "desc": "0. Something To Say 该系列文章计划中一共有三篇，在这三篇文章里我将手把手教大家使用 Babel 为 React 实现双向数据绑定。在这系列文章你将： 该系列文章实现的 babel-plugin-jsx-two-way-binding 在我的 GitHub 仓…"}, {"id": "6844903975834255367", "title": "React.js新手最佳入门指南😁（持续更新中...）", "desc": "Hi~我是Tom，这是我整理的React学习路线，文章许多地方对Vue进行的类比，阅读之前我希望你已经十分熟悉Vue.js。 这将是掘金上最全的React指南，里面涉及到React.js，Redux，路由，cli工具，指南主要是以使用步骤为主，告诉你如何直接实现需求，本指南主要…"}, {"id": "6844903598250262541", "title": "React Suite v3.0 正式版发布 ", "desc": "React Suite 是 HYPERS 前端团队和 UX 团队开源的一套基于 React 的 UI 组件库，能够帮助您快速构建一个企业级应用。 我们在服务于很多企业的过程中发现，不管是大企业，还是中小企业都有一套（或者希望有一套）自己的 VI ，其中产品视觉设计就很重要的一部…"}, {"id": "6844904142821916680", "title": "slate.js从入门到放弃", "desc": "slate.js 和 Draft.js, Prosemirror, Quill一样，都是基于结构化对象，渲染富文本编辑内容。简单的说，富文本编辑器的value不再是html,而是State Object. 看着官网的例子，感觉写个简单的应该不难，正好想认真学习下，也方便定制编辑…"}, {"id": "6844904131505700871", "title": "React性能优化之shouldComponentUpdate、PureComponent和React.memo", "desc": "最近一直在学习关于React方面的知识，并有幸正好得到一个机会将其用在了实际的项目中。所以我打算以博客的形式，将我在学习和开发（React）过程中遇到的问题记录下来。 这两天遇到了关于组件不必要的重复渲染问题，看了很多遍官方文档以及网上各位大大们的介绍，下面我会通过一些demo…"}, {"id": "6844903840811057160", "title": "美少女秃头思考：react服务端渲染", "desc": "富婆来报道，今天想问题想不出来，随手抓了一下头发，没想到啊没想到，我那浓（mei）密(sheng)茂(ji)盛(gen)的秀发又少了好几根，一定要改掉这个想不出来问题就揪头发的坏习惯。你们遇到问题想不出来都会有啥奇特的习惯呢？ 想象一下妙龄美少女长发飘飘变成三毛的形象（科普：女…"}, {"id": "6968486670958247967", "title": "Umi学习记录（一）", "desc": "前言 最近做迭代的时候接触到公司的一个小项目是用的umi框架，所以这里对umi框架做一个简单的介绍，也算是学习笔记吧。 一、关于umi 二、创建umi项目 这里先介绍一下项目的创建，你可以通过 yar"}, {"id": "6844904174384070669", "title": "名符其实的react下一代状态管理器hox", "desc": "自从React16版本发布Hooks以来，大家纷纷上车尝鲜。毫无疑问，Hooks在一定程度上解决了组件间功能和逻辑复用的问题，在组件间的逻辑的封装和复用确实真香，但Hooks在数据状态的共享方法略有不足，虽然可以使用useReducer实现数据状态管理，但在一定程度上是对red…"}, {"id": "6888227508865794062", "title": "微前端项目实战整理（single-spa+react+iframe）（一）", "desc": "做了应用拆分之后，后续的开发看起来就一目了然了，用react + single-spa分别去开发每个子应用和主应用就可以了,但是这里还面临一个问题，那就是剩余暂时不需要改的页面是服务端渲染的ejs+jquery的项目，该怎么加载进新项目的主应用？我最后的方案是额外创建一个ifr…"}, {"id": "6977183551477268511", "title": "使用MutationObserver的自定义React Hooks指南", "desc": "随着React Hooks的引入，React代码库中的可共享代码数量已经爆炸性增长。因为Hooks是React顶部的薄API，开发者可以通过将可重复使用的行为附加到组件上并将这些行为隔离到更小的模块中"}, {"id": "6844904202137763847", "title": "解析 React 性能利器 — Fiber", "desc": "大部分显示器屏幕都有固定的刷新率（比如最新的一般在 60Hz），所以浏览器更新最好是在 60fps。如果在两次硬件刷新之间浏览器进行两次重绘是没有意义的只会消耗性能。 浏览器会利用这个间隔 16ms(一帧)适当地对绘制进行节流，如果在 16ms 内做了太多事情，会阻塞渲染，造成…"}, {"id": "6844903951091892238", "title": "React 兼容 IE 之路", "desc": "是 Object.setPrototypeOf 的问题，Object.setPrototypeOf 说是支持了 IE9-11, 实际在源码里只实现了 11+。具体可参考 https://github.com/paulmillr/es6-shim/blame/master/REA…"}, {"id": "6911114080015089677", "title": "next.js聊天实例|Next/React网页端仿微信", "desc": "简介支持拖拽图片至聊天区域发送、截图粘贴发送等功能。技术栈使用技术：next.js+react+RreduxUI组件库：Antd(蚂蚁金服react组件库)字体图标：阿里iconfont图标库弹窗组件"}, {"id": "6984258516034781192", "title": "【react 源码系列】useMemo 与 useCallback 解析", "desc": "前言 作为 React 的使用者，在尝试对现有代码进行优化的时候，我们可能会尝试使用 useMemo 以及 useCallback 来进行优化，对数据或者函数进行缓存，在下次组件更新时，如果对应的依赖"}, {"id": "6994249413497454605", "title": "图解React源码 - fiber 树构造(基础准备)", "desc": "本节是\"fiber树构造\"的准备篇, 首先在宏观上从不同的视角(\"任务调度循环\", \"fiber树构造循环\")介绍了\"fiber树构造\"在\"React\"体系中所处的位置."}, {"id": "7002802430580637733", "title": "react + gojs", "desc": "gojs在react的使用的粗浅理解总结，鱼骨图和获取图片的实现，如果后续还有其他的学习和理解再编辑调整补充。"}, {"id": "6992390406075842574", "title": "《自顶向下学React源码》学习笔记（一）—— 理念与架构", "desc": "最近在学习react的Fiber架构相关内容，源码学习实在是一件很费劲的事情，正好看到 React技术揭秘，大神讲的还是挺清楚的，听了一遍下来，总算有点门路了，赶紧记录下来，好记性不如烂笔头～"}, {"id": "6975733082561200159", "title": "什么是单元测试，如何去写一个单元测试", "desc": "相信单元测试是属于那种没有用过也听过的技术（如果你是大佬，听过也用过，欢迎提出宝贵的意见🧎‍♀️🧎‍♂️）。那么到底什么是单元测试，单元测试在实际项目开发中能给我们带来什么样的好处？我们站在前端开发的"}, {"id": "6992225481382690829", "title": "Webpack的ModuleFederation原理分析及发散", "desc": "光会用怎么行？尝试分析了一下ModuleFederation黑科技背后的秘密，以及在其原理基础上浪了一把~"}, {"id": "7006317875199737887", "title": "redux、react-redux、redux-saga的使用", "desc": "Redux 是 JavaScript 状态容器，提供可预测化的状态管理。可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。"}, {"id": "6844904025066831879", "title": "[ React ] 面试题汇总", "desc": "1. React 中 keys 的作用是什么？ Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。 有了key属性后，就可以与组件建立了一种对应关系，react根据key来决定是销毁重新创建组件还是更新组件。 key相同，若组件属性有所变化，则…"}, {"id": "6992218385064919071", "title": "小白浅谈：react - ref 的多种使用", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 按惯例看下react官网对ref的介绍：Ref 转发是一项将 ref 自动地通过组件传递到其一子组件的技巧。对于大多数应用中的组件来说，这通"}, {"id": "7001724160443416612", "title": "React学习第十三天", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：更文挑战 配置环境变量 有时候我们要执行一些执行，但是指令文件只是在特定的目录中，如果这些目录在环境变量中配置了，这些目录中的指令文件就可以在系统的任何"}, {"id": "7002545241496502309", "title": "create-react-app 打包时去除 console", "desc": "create-react-app 打包时去除 console 在 webpack.config.js 中找到下图代码的位置，添加配置 如上配置会在打包时将代码中的 console.log 调用都去掉，"}, {"id": "6962449722275528712", "title": "React Fiber原理", "desc": "什么是 React fiber？Fiber 解决了什么问题？Fiber使用链表数据结构，通过浏览器 requestIdleCallback接口，让协调过程实现了可中断执行，分片完成协调任务"}, {"id": "6844904039608500237", "title": "Koa的洋葱中间件，Redux的中间件，Axios的拦截器让你迷惑吗？实现一个精简版的就彻底搞懂了。", "desc": "前端中的库很多，开发这些库的作者会尽可能的覆盖到大家在业务中千奇百怪的需求，但是总有无法预料到的，所以优秀的库就需要提供一种机制，让开发者可以干预插件中间的一些环节，从而完成自己的一些需求。 本文将从koa、axios、vuex和redux的实现来教你怎么编写属于自己的插件机制…"}, {"id": "7002037636454055944", "title": "ahooks 源码解读系列 - 12", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6844903747542482952", "title": "🥒 黄瓜 UI: 一个即插即用的 React 组件库", "desc": "1. 前言 2. 组件化 到现在 三大框架 一统天下, 组件 成了不可或缺的一部分, 各种 UI 库 层出不穷. 最火的还是当属 antd , 于是 我觉得 借鉴 (抄袭) 一波, 开始干活了 3. 搭建项目 原理很简单,先通过 webpack 打包文档, 然后 git add…"}, {"id": "6844903824683958286", "title": "【React深入】深入分析虚拟DOM的渲染原理和特性", "desc": "React的虚拟DOM和Diff算法是React的非常重要的核心特性，这部分源码也非常复杂，理解这部分知识的原理对更深入的掌握React是非常必要的。 本来想将虚拟DOM和Diff算法放到一篇文章，写完虚拟DOM发现文章已经很长了，所以本篇只分析虚拟DOM。 本篇文章从源码出发…"}, {"id": "6954911721324707877", "title": "精读《React Server Component》", "desc": "截止目前，React Server Component 还在开发与研究中，因此不适合投入生产环境使用。但其概念非常有趣，值得技术人学习。 目前除了国内各种博客、知乎解读外，最一手的学习资料有下面两处："}, {"id": "6844904064388431880", "title": "useRequest-蚂蚁中台标准请求 Hooks", "desc": "useRequest 是一个超级强大，且生产完备的网络请求 Hooks，目前已经成为蚂蚁中台最佳实践内置网络请求方案。在蚂蚁内部中台应用，写网络请求，都推荐用 useRequest。 useRequest 可能是目前社区中最强大，最接地气的请求类 Hooks 了。可以覆盖 99…"}, {"id": "6986165918720245791", "title": "React-hooks封装无缝滑动轮播图(js动画，css动画)", "desc": "前言 第一版 无缝滑动原理: 红色的1, 3都是克隆的过渡元素. index从 3 4 动画结束时，马上将指针滑动到1， 这样就可以实现无缝轮播. 下面上js动画伪代码 Carousel.tsx 这样"}, {"id": "7007606687745966093", "title": "来玩TS吗，机都给你开好了", "desc": "实现 Pick 实现 TS 内置的 Pick<T, K>，但不可以使用它。 从类型 T 中选择出属性 K，构造成一个新的类型。 例如： 答案： 实现 Readonly 不要使用内置的Readonly，"}, {"id": "7007048306438176799", "title": "谈谈我这些年对前端框架的理解", "desc": "最早的时候页面是服务端渲染的，也就是 PHP、JSP 那些技术，服务端通过模版引擎填充数据，返回生成的 html，交给浏览器渲染。那时候表单会同步提交，服务端返回结果页面的 html。 后来浏览器有了"}, {"id": "7007622432013942798", "title": "漫谈 react 系列(一)：初探 react 的工作过程", "desc": "现在 react 18 已经进入了快速迭代期，相信再过不久就会出稳定版本，到时我们就可以使用稳定版本提供的新特性 - Concurrent 模式了..."}, {"id": "7007697018827046920", "title": "React hooks，我来带你研究", "desc": "简介 React在16.8版本以上可以使用，hooks优点在于能够更好的复用性，也解决无状态组件的生命周期以及状态管理的问题，替代class，可以通过自定义hook的形式将组件分割的更细粒度，方便拓展"}, {"id": "7007554589364846628", "title": "⚡️ Taro 小程序的用户体验优化 × 7", "desc": "制造想法，探索新奇，跳出空间，你的每个灵感，都足以塑造世界。Shot the moment, Make arts everywhere，开始一个新故事吧 ⚡️"}, {"id": "7008005797984600072", "title": "初尝React 18新特性（上）", "desc": "react 18带来了什么 我总结react18主要包括了3个主要的改动 automatic batching ,也就是自动批处理来减少渲染。 新的功能 startTransition。 新的SSR架"}, {"id": "7008051464056602632", "title": "使用hooks替代redux实践", "desc": "redux究竟好用与否，相信大家都有不同的看法。话不多说，直接往下看。 ps: 具体能否完全代替redux，还有待考证，本文仅提供思路。"}, {"id": "7008028733713956871", "title": "教你七分钟学习一下react基础语法", "desc": "以下代码全部运行在react脚手架环境中 props得传值 父传子 子传父 评论列表案例 兄弟组件通信 父传子，子传孙 Cunsumer和Provider children传值得基本演示 props-"}, {"id": "7008040236844318727", "title": "umi3+ant design pro兼容IE11实例及所遇到的问题分享", "desc": "中台使用umi3+ant design pro搭建，项目需兼容IE11浏览器，分享在兼容时所遇到的问题。"}, {"id": "7007214462813863950", "title": "「React 进阶」 学好这些 React 设计模式，能让你的 React 项目飞起来🛫️", "desc": "一 前言 今天我们来悉数一下 React 中一些不错的设计模式，这些设计模式能够解决一些功能复杂，逻辑复用 的问题，还能锻炼开发者的设计和编程能力，以为多年开发经验来看，学好这些设计模式，那就是一个字"}, {"id": "7007982161814880269", "title": "深入理解Typescript中的extends关键字", "desc": "前言 extends关键字在TS编程中出现的频率挺高的，而且不同场景下代表的含义不一样，特此总结一下： 表示继承/拓展的含义 表示约束的含义 表示分配的含义 基本使用 extends是 ts 里一个很"}, {"id": "7007673044973912072", "title": "自我成长——React生命周期函数", "desc": "自我成长——React生命周期函数 在React的类组件中，官方为其提供了生命周期的概念组件的生命周期大抵分为三个阶段：挂载（mount）、更新（update）、卸载（unmount）。"}, {"id": "7008000638516723719", "title": "适合一些可爱宝看的 React 介绍和环境搭建", "desc": "React 是浏览器环境运行的 JS 库，本质上来说，更为合理或者直观的方式肯定是在 HTML 中使用 <script> 的 src 引入，而我并没有演示这样的方式。"}, {"id": "7007776602587136036", "title": " React 入门学习（十三）-- antd 组件库的基本使用", "desc": "react专栏全部内容已更新于 GIthub，欢迎各位大佬指点！ 引言 在我们学习JavaScript 的时候，我们学习了一个 bootstrap 的组件库。可以让我们快速开发，但是我们现在学习了 R"}, {"id": "7007693492147191839", "title": "基于three.js的太、地、月三体运动", "desc": "天不生牛顿，万古如长夜 —— 中秋佳节念牛顿的一些碎碎念。 文中讨论了真实的世界，拉普拉斯兽，simple-scene-react介绍，以及太地月运动的模拟。"}, {"id": "7007459379725205534", "title": "React 全局状态管理的 3 种底层机制", "desc": "现代前端框架都是基于组件的方式来开发页面。按照逻辑关系把页面划分为不同的组件，分别开发不同的组件，然后把它们一层层组装起来，把根组件传入 ReactDOM.render 或者 vue 的 $mount"}, {"id": "7007779074948988935", "title": "react总结随笔(一)", "desc": "学习react这么久，笔者一直用小本本记录着学习过程，不知不觉都快2万字了。 `` 没想到叭，笔者直接就用vscode写的。🤦‍ 准备将这些文字逐步记录到掘金上，也便于以后回顾。😄 react hoo"}, {"id": "7007748151993958414", "title": "react-router？看这里就够了！", "desc": "为什么需要 react-router router 的来源是 SPA 应用， 也就是我们常用的 ReactJS、VueJS 这种单页面应用。"}, {"id": "7006253866610229256", "title": "React下一代状态管理库——recoil", "desc": "recoil 的 slogan 十分简单：一个react状态管理库（A state management library for React）。它不是一个框架无关的状态库，它是专门为react而生的。"}, {"id": "7007725055287230471", "title": "如何开发一个组件库", "desc": "项目结构 实现组件 1、安装依赖 2、编写 button 组件 3、编写 hello 组件 4、导出组件 使用 parcel 运行项目 1、安装依赖 2、创建 .babelrc 文件 3、创建入口文件"}, {"id": "6844904183955636231", "title": "使用Webpack来做自己的cra脚手架", "desc": "现如今的JavaScript已经出了ES6,ES7甚至许多更高的版本，但是有很多浏览器是不支持这些新的语法，所以需要通过Babel 来将你的新语法编译成浏览器可以理解的旧语法。这是通过 Babel/core模块和babel/perset-env插件完成的。当然Babel还有其他…"}, {"id": "6844903497012346893", "title": "Vue.js 框架成为 WordPress 弃用 React 后的最佳选择", "desc": "上周，WordPress 团队因专利问题而决定停止使用 React 的消息，引发了社区关于新技术框架的讨论。在美中国开发者尤雨溪（英文名：Evan You）的 Vue.js 框架，成为呼声最高的竞争者。"}, {"id": "6844903747080945678", "title": "[译] React 路由和 React 组件的爱恨情仇", "desc": "作为 React 开发者，我们大部分人享用着使用 React Router 为 React 应用的路由带来的便利。 可靠的 浏览历史特征 允许用户在追踪视图状态的同时在应用中导航。 然而在使用 React 路由的时候，如果你的应用程序特定需求变得比你在 web 上的每个教程中看…"}, {"id": "6844903616914915341", "title": "利用 Jest 为 React 组件编写单元测试", "desc": "在上一篇文章中我们介绍了什么是单元测试以及单元测试框架 Jest 的基本用法。在本文中我们会具体聊聊如何用 Jest 为 React 组件编写单元测试。 首先我们要明确的一点，那就是 React 组件的单元测试本质是也是单元测试。因此它也符合我们之前介绍过的单元测试的全部特点。…"}, {"id": "6857794593040449549", "title": "[译] React 测试驱动开发：从用户故事到产品", "desc": "在本文中，我们将采用 测试驱动开发（TDD：test-driven development） 方法，从用户故事到产品开发一个 React 应用。同时，我们将在 TDD 中使用 Jest 和 Enzyme 。一旦完成本教程，你将能够： 我们将创建一个由某些 UI 组件构成的番茄计…"}, {"id": "6844903508534296590", "title": "前端面试&滴滴实习心得", "desc": "从大二下学期放暑假开始（7.14）到8月初，我一直在寻找一份实习，锻炼一下自己，看看学的怎么样。这期间，我相继面试了小米、途牛、滴滴和百度，都拿了实习offer。其中百度拿了两次实习offer，但由于我自身一些原因，都爽约了。（在这里给百度真诚地道个歉，我非常珍视这两次机会，但…"}, {"id": "6844904193505935367", "title": "从零搭建一个react-hooks项目（一）", "desc": "entry可以接收一个字符串作为主入口的文件路径，但只能用于单入口项目。也可以接收一个对象作为入口的文件路径，如下所示 output用来描述打包后的文件应该放到哪，叫什么名字，也有两个基本属性，一个是打包后的文件名，一个是打包后的文件路径，这里我们通过[name].js来获取他…"}, {"id": "6844903510178267150", "title": "如何优雅的设计 React 组件", "desc": "如今的 Web 前端已被 React、Vue 和 Angular 三分天下，一统江山十几年的 jQuery 显然已经很难满足现在的开发模式。那么，为什么大家会觉得 jQuery “过时了”呢？一来，文章《No JQuery! 原生 JavaScript 操作 DOM》就直截了当…"}, {"id": "6844903625823633415", "title": "H5：“同样是返回，我们不一样”", "desc": "有一些 H5 开发者耳熟能详的问题。 比如，老板会问你：“你这个 H5 页面为什么这么卡？为啥 IOS 那么流畅？”， 再比如，业务方会问你：“为什么这个功能你做不了？人家 Native 可以做？”， 再再比如，交互甚至也会经常挑战你：“为什么安卓能做到这样的交互效果，你不可以…"}, {"id": "6844904063612502029", "title": "[React优化]PureComponent 与 memo 存在的意义", "desc": "一旦父组件渲染，所以子组件都要跟着渲染，尽管这个子组件并没有任何改变。在这种情况下，这个子组件的渲染就变得多余。 给Child组件改变shouldComponentUpdate生命周期。 因为没有接受到父组件的props以及自身也没有state，所以直接返回false。 所以我…"}, {"id": "6844903892736557064", "title": "React中class组件bind及性能比较", "desc": "最近小伙伴问了我关于react中class中事件为什么要进行绑定，感觉他对这块的理解比较模糊，特此总结一下。 当我们使用es6的解构，从test中将b解构出来，即将test.b赋值给一个变量b，当我们执行b()时，依据谁调用指向谁的原则，b指向了window，此时window下…"}, {"id": "6844903935409389582", "title": "React源码解析之setState和forceUpdate", "desc": "（7）scheduleWork，篇幅较长，会放在下篇讲。"}, {"id": "6915362671680290823", "title": "React - 模拟编译JSX生成执行代码", "desc": "在 React 中我们会使用 JSX 语法来编写组件，这些 JSX 语法是不能直接被渲染到 DOM 节点上，而是通过 Babel 编译 JSX 代码，来生成可执行代码：React.createElement()。比如下面这段 JSX 代码，经过 Babel 编译后会生成如下代码…"}, {"id": "6844904096353222669", "title": "React Hooks的依赖项", "desc": "有感这篇文章👉函数式编程看React Hooks(二)事件绑定副作用深度剖析，作者写得条理很清晰。 下面延伸一丢丢，还是讲hooks的依赖项。从我自己还原的部分HashRouter代码讲起： 请看代码中的注释部分。是的，我在上述useCallback和useEffect中都没…"}, {"id": "6844903716265574407", "title": "使用 Drag and Drop 给Web应用提升交互体验", "desc": "简单来说，HTML5 提供了 Drag and Drop API，允许用户用鼠标选中一个可拖动元素，移动鼠标拖放到一个可放置到元素的过程。 我相信每个人都或多或少接触过拖放，比如浏览器多标签页之间的可拖放排序、手机中的App可以随便拖放排序等等，Drag and Drop 已经…"}, {"id": "6907164030385782791", "title": "捋一捋React SSR 服务端渲染实现", "desc": "早期的SSR(ServerSideRendering):服务端渲染，在最早期的网页开发时代，就是采用这种形式，由服务端渲染出页面结构，直接返回给客户端，首屏页面直出，SEO也较友好，但页面路由跳转会导"}, {"id": "6844903692710199303", "title": "如何构建一个不到100行的小程序端mini版本redux", "desc": "1. 互联网 toC 应用研发之痛 缺人，缺人，我们缺少高质量前端，这可能是绝大多数技术管理者的诉求。面对系统中漫天的bug，蟑螂一样杀不尽的低级错误，是否总是那么的无能为力。虽然我们有很多测试工具以及自动化测试的库，但是我们依然会困惑于为什么做前端自动化测试实施起来这么难？ …"}, {"id": "6844903509125677069", "title": "组件化必杀技：styled-components 简明教程【附视频下载】", "desc": "23 分钟带你学会现代化的组件样式书写方法：styled-components。 通过将 ES6 中的模板字符串（template literals）特性创造性的运用到 CSS 编码上，styled-components 成了前端社区现象级的 CSS-IN-JS 解决方案，能让…"}, {"id": "6908346086088572941", "title": "flexiwan项目踩坑实践（前端篇）", "desc": "飞冰脚手架的构建方式主要是通过一个核心的miniRender来返回调用react的渲染机制，配合广大的插件机制，只留下一个简单的核心，其他都以插件化的形式进行扩展，微内核广外延的架构还是很值得参考的。"}, {"id": "6844903665807917063", "title": "React源码分析与实现(一)：组件的初始化与渲染", "desc": "阅读源码的方式有很多种，广度优先法、调用栈调试法等等，此系列文章，采用基线法，顾名思义，就是以低版本为基线，逐渐了解源码的演进过程和思路。 react最初的设计灵感来源于游戏渲染的机制：当数据变化时，界面仅仅更新变化的部分而形成新的一帧渲染。所以设计react的核心就是认为UI…"}, {"id": "6844903702533423118", "title": "支援一波 《面试数十人有感》", "desc": "无意间看到原博主的这篇文章，强调基础和原理，略有同感。 嗯哼 ~ 首先， 我们的社会， 是一个竞争的社会，如果你想要更好的工作，更高的薪资，那么你就一定会参与到某种竞争当中，嗯，残酷的竞争。但是很明显，很多人并没有意识到这一点，因为毕竟再怎么坑也多多少少能够收到一些团队的off…"}, {"id": "7000762706949210120", "title": "React-基础语法", "desc": "1.jsx 语法规则 定义：全称: JavaScript XML，\\1. react定义的一种类似于XML的JS扩展语法: JS + XML本质是 React.createElement(compon"}, {"id": "6967950105895206925", "title": "react 实现图片正在加载中 加载完成 加载失败三个阶段的", "desc": "效果 原理解析 图片的事件 图片是有许多的事件的，例如，onload, onerror等,图片只要一加载就会调用onload的事件，不管是加载成功还是加载失败都会调用这个方法。而onerror方法是图"}, {"id": "6967713078477586462", "title": "useReducer —— 是的，数据驱动乃控熵大法", "desc": "（但是，只在封闭系统生效！） 早些时候，我对 hooks 下使用 useReducer 或者一众状态管理库是非常方案的，带上在结合项目仔细思考之下，发现了这一方案的优点，或许结合使用才是最优解 对 u"}, {"id": "6844903938085355527", "title": "React16常用api解析以及原理剖析", "desc": "React 与 Vue 有很多相似之处，React 和 Vue 都是非常优秀的框架，它们之间的相似之处多过不同之处，并且它们大部分最棒的功能是相通的：如他们都是 JavaScript 的 UI 框架，专注于创造前端的富应用。不同于早期的 JavaScript 框架“功能齐全”，…"}, {"id": "6844903807000772621", "title": "[译] 在 React Hooks 中如何请求数据？", "desc": "通过这个教程，我想告诉你在 React 中如何使用 state 和 effect 这两种 hooks 去请求数据。我们将使用总所周知的 Hacker News API 来获取一些热门文章。你将定义属于你自己的数据请求的 Hooks ，并且可以在你所有的应用中复用，也可以发布到 …"}, {"id": "6988041411547365406", "title": "hooks 系列三：useEffect", "desc": "通过 useEffect 的 Hook，可以告诉 React 需要在渲染后执行某些操作；而 useEffect 的第一个参数要求我们传递一个函数，在 React 执行完更新"}, {"id": "6977630897432428551", "title": "快速入门：使用 Next.js 来开发 React 的同构应用", "desc": "随着时代滚滚和技术的不断演变，页面的渲染从服务器端走向前端，带来全新体验的同时也裹挟着不少痛点。前端儿们，现在又该何去何从呢？"}, {"id": "6929741893823643656", "title": "React中使用immer的实践探索｜牛气冲天新年征文", "desc": "对于MOBX，可能并不会陌生。而immer.js也是该开源项目作者的一大力作，用于immutable管理的实践。而今天，会对其做一个简单的小分享。 谈谈为什么会选择immer.js来作为immutable的解决方案，以及一些项目上的小实践。 在这里总结一些优缺点，其实对比是相当…"}, {"id": "6987962184294891557", "title": "React-Router 源码解析", "desc": "背景 在使用 React-Router 开发的时候，会遇到以下一些相关的问题： React-Router 是如何匹配路径组件的； React-Router 是否对 history API 进行了重写，"}, {"id": "6846687601357750280", "title": "React Hook的最全总结（附demo）", "desc": "（阅读指南：建议将每个小demo都手动执行一遍，保证你会不虚此行。） Hook是React 16.8（包括react-dom 16.8）新增的特性，它可以让你在不编写class的情况下使用state及其它的React特性，Hook是一个特殊的函数。 React-router 从…"}, {"id": "6996810820231364622", "title": "React实战项目—04首页数据接口联调", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战。 一、 使用fetch获取轮播图数据 1.1 先测试接口是否正常返回数据 获取数据正常 1.2 完成数据的渲染 轮播图渲染成功 1.3 解决"}, {"id": "6844903638251339789", "title": "React 学习路线图 - 2018版", "desc": "与大家一起在 React 的道路上不断前行，你并不孤单！"}, {"id": "6992410438549897223", "title": "【小白入门】React实现TodoList简易教程（下）", "desc": "接上篇(【小白入门】React实现TodoList简易教程（下）)！ 通过父子组件传值，实现TodoList，包含新增和删除功能。"}, {"id": "6844903573503868941", "title": "React入门---react脚手架", "desc": "React是Facebook研发的一款前端框架(MVC框架：侧重于view层操作)，目前在行业内广泛使用。为了让框架的体积变得更轻量级，设计者们把其定义为“渐进式”框架,也就是: 这样的操作有好处，也有弊端，麻烦的是，开发中我们需要不断的安装各种组件，而且react独有的jsx…"}, {"id": "7002106186568826888", "title": "react 自定义loading组件", "desc": "组件 css 使用 import React from 'react'; import stylus from './stylus.styl'; import classNames from \"cla"}, {"id": "6968089778126323720", "title": "40行代码实现简易版React render", "desc": "这篇文章带大家实现一个简单的render函数，在此之前，你需要对jsx语法和DOM元素的工作原理有基本了解"}, {"id": "6990225266219941895", "title": "react+ts白手起家建个属于自己的项目（一 练手篇）", "desc": "webpack react ts 白手起家建个属于自己的项目, 当前webpack5，start使用 webpack-dev-server, 会报版本兼容问题， webpack server为官方解"}, {"id": "6984267680324780040", "title": "使用 NextJS 和 TailwindCSS 重构我的博客", "desc": "这是笔者第三次重构博客应用。本文主要是笔者记录重构博客所用的知识和记录，希望以后每周或者每两周能够有一篇文章，记录和总结知识。"}, {"id": "6932988466422775821", "title": "使用 React Hooks 时需要注意过时的闭包!", "desc": "Hooks 简化了 React 组件内部状态和副作用的管理。 此外，可以将重复的逻辑提取到自定义 Hooks 中，以在整个应用程序中重复使用。 Hooks 严重依赖于 JS 闭包。这就是为什么 Hooks 如此具有表现力和简单，但是闭包有时很棘手。 使用 Hooks 时可能遇到…"}, {"id": "6844903857550688269", "title": "getDerivedStateFromProps", "desc": "React生命周期的命名一直都是非常语义化的，这个生命周期的意思就是从props中获取state，可以说是太简单易懂了。 可以说，这个生命周期的功能实际上就是将传入的props映射到state上面。 意味着即使你的props没有任何变化，而是父state发生了变化，导致子组件发…"}, {"id": "6844903790198571021", "title": "【React深入】React事件机制", "desc": "下面是我阅读过源码后，将所有的执行流程总结出来的流程图，不会贴代码，如果你想阅读代码看看具体是如何实现的，可以根据流程图去源码里寻找。 组件装载 / 更新。 通过lastProps、nextProps判断是否新增、删除事件分别调用事件注册、卸载方法。 获取document对象。…"}, {"id": "6977710913222770718", "title": "React 合成事件系统源码解析", "desc": "React 的合成事件系统一直是 React 的标志性特性之一，其效果是在开发者和真实事件之间加了一层中间层，面对开发者可以输出符合其设计意图的 API，面对原生事件它可以进行挟持和加工。"}, {"id": "6844903513202409485", "title": "如何用 ESLint 检查 TypeScript 代码", "desc": "ESLint 是一个代码检查工具，主要用来发现代码错误、统一代码风格，目前已被广泛的应用于各种 JavaScript 项目中。 它通过插件化的特性极大的丰富了适用范围，搭配 typescript-eslint-parser 之后，甚至可以用来检查 TypeScript 代码。 …"}, {"id": "6844903716101816333", "title": "精读《怎么用 React Hooks 造轮子》", "desc": "上周的 精读《React Hooks》 已经实现了对 React Hooks 的基本认知，也许你也看了 React Hooks 基本实现剖析（就是数组），但理解实现原理就可以用好了吗？学的是知识，而用的是技能，看别人的用法就像刷抖音一样（哇，饭还可以这样吃？），你总会有新的收获…"}, {"id": "6998877778732908552", "title": "React17中的JSX Transform", "desc": "在React17以前，编译器为了把JSX语法转译成浏览器可以理解的语法，是把JSX转换成 React.createElement(type, props, children) 例如如下代码： 经过JS"}, {"id": "6942813303664017444", "title": "React 面试必知必会 Day3", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6984211655693434893", "title": "与第三方库协同(精读React官方文档—20)", "desc": "集成带有DOM操作的插件 如何解决这个问题 集成JQuery Chosen插件 Chosen对DOM做了哪些操作？ 读取原DOM节点的属性，然后使用行内样式隐藏它。 紧挨着这个select之后增加一个"}, {"id": "6844903508626374663", "title": "前端状态管理请三思", "desc": "最近我开始思考React应用的状态管理。我已经取得一些有趣的结论，并且在这篇文章里我会向你展示我们所谓的状态管理并不是真的在管理状态。 我们来看一个简单的例子。想象这是一个展示用户名称、密码和一个按钮的表单组件。用户会在填写表单后点击提交。如果一切顺利，我们完成了登录，并且有必…"}, {"id": "6961698605740752933", "title": "React 17 hooks 原理（详细解析useEffect源码）", "desc": "从源码阅读上介绍了hooks原理，并对useEffect，useLayoutEffect，useState进行解析"}, {"id": "6844903922574819342", "title": "react-transition-group实现路由切换过渡效果", "desc": "简单介绍：本人实现了一个常见问题列表，点击列表项进入详情页，目标是在页面切换的时候加过渡效果，提升用户体验。 下面来看具体怎么实现吧。 在 react 项目中可使用官网提供的动画过渡库 react-transition-group 来实现切换页面（路由切换）时的过渡效果。 其中…"}, {"id": "6844903919215181832", "title": "手把手带你用next搭建一个完善的react服务端渲染项目（集成antd、redux、样式解决方案）", "desc": "本文参考了慕课网jokcy老师的React16.8+Next.js+Koa2开发Github全栈项目，也算是做个笔记吧。 Next.js 是一个轻量级的 React 服务端渲染应用框架。 当使用 React 开发系统的时候，常常需要配置很多繁琐的参数，如 Webpack 配置、…"}, {"id": "6872223515580481544", "title": "手写 React Hooks", "desc": "Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如，useState 是允许你在 React 函数组件中添加 state 的 Hook。 可能要用到 render props （渲染属性）或者 HOC（高阶组件），但无论是渲染属性，还是高阶组件，都会在原先…"}, {"id": "6844903777766473742", "title": "从零开始React服务器渲染（SSR）同构😏（基于Koa）", "desc": "自前端框架（React,Vue,Angelar）出现以来，每个框架携带不同理念，分为三大阵营，以前使用JQuery的时代已经成为过去，以前每个页面就是一个HTML，引入相对应的JS、CSS，同时在HTML中书写DOM。正因为是这样，每次用户访问进来，由于HTML中有DOM的存在…"}, {"id": "6859738814602280973", "title": "[译]React 17终于发布RC版本了 官方竟说17是个过渡版！", "desc": "半个月前Vue 3.0刚刚发布了rc版本，React就紧随其后发布了rc版本。 不过相比于Vue3对Vue2.x能力的巨大提升，React17对React16.x好像并没有什么很给力的更新。 今天，我们发布了React v17的第一个RC版本。自上一个主要版本的React至今已…"}, {"id": "6844903861161820174", "title": "React组件设计模式-Render-props", "desc": "写业务时，我们经常需要抽象一些使用频率较高的逻辑，但是除了高阶组件可以抽象逻辑，RenderProps也是一种比较好的方法。 RenderProps，顾名思义就是将组件的props渲染出来。实际上是让组件的props接收函数，由函数来渲染内容。将通用的逻辑 抽象在该组件的内部，…"}, {"id": "6970593133557973006", "title": "tiny-react助你看懂react源码", "desc": "tiny-react一个基于React17精简而来的仓库 tiny-react是一个为了简化react源码学习的库，和react17的区别就是少了很多功能，只实现了核心的逻辑，和preact这种rea"}, {"id": "6844904205593870350", "title": "React常见面试题", "desc": "componentWillMount，componentWillReceiveProps, componentWillUpdate准备废除。理由：主要是16 版本 render 之前的生命周期可能会被多次执行。 static getDerivedStateFromProps和 …"}, {"id": "6844903878580764686", "title": "styled-components:前端组件拆分新思路", "desc": "一直在思考React组件如何拆分的问题，直到接触到styled-components，让我有一种如鱼得水的感觉，今天我就给大家分享一下这个库如何让我们的前端组件开发的更优雅，如何保持更合适的组件拆分粒度从而更容易维护。 styled-components是给React量身定制的…"}, {"id": "6982819476110737445", "title": "react视频播放组件", "desc": "安装 使用 页面 属性链接：https://video-react.js.org/components/player/ 来源链接：https://blog.csdn.net/weixin_444334"}, {"id": "6994294048794083365", "title": "React入门九：props深入", "desc": "这是我参与8月更文挑战的第八天，活动详情查看：8月更文挑战 1. children children属性：表示组件标签的子节点。当组件标签有子节点时，props就会有该属性。 1.1 子节点的三种形式"}, {"id": "7000364942587084813", "title": "React Hooks初探（二）", "desc": "hooks引入react里已经很长时间了，在项目中一直使用，文档也没仔细阅读，今天打算再重新看看文档，领略一下当初学习的感受。"}, {"id": "6844904100992155661", "title": "🔥 深度解析！Vue3 & React Hooks 新UI组件原理：Modal 弹窗", "desc": "在某个月黑风高的晚上...没剧刷的我无意想起以前处理的一些弹窗的坑。 然后又无意间刷到“Portal”，才知道Modal的实现还有如此妙的方式，顺而想着干脆把UI组件库的实现原理看完。 1. Modal弹窗的基本原理 我给弹窗类的定义是脱离固定的层级关系，不再受制于层叠上下文的…"}, {"id": "6971215985026007076", "title": "使用React时要避免的 10 大错误", "desc": "本片文章主要讨论React开发最常犯的10个错误---以及如何解决这些错误。 我们主要介绍一下10个最常见的错误。"}, {"id": "6983949906792693791", "title": "提前掌握React 18 ", "desc": "最新最全的React18阿尔法讲解，b站同步视频讲解教程，帮助你提前掌握react18，快人一步。字数够了。"}, {"id": "6927215610552123406", "title": "『前端BUG』—— toFixed四舍五入的不准确性", "desc": "某天，客服告诉我，有客户投诉，说账单金额数据统计不对，同时测试也反馈在IE11浏览器上又是正确的。 经过排查发现是toFixed()引起的。 来看一下toFixed()在chrome、火狐、IE下的不同表现。 可以看到toFixed()的四舍五入在chrome、火狐上并不准确。…"}, {"id": "6993152287946309645", "title": "从 React 到 React 今天就谈 React (2)", "desc": "主要介绍如何实现类似 react fiber，从 React 16开始用 fiber 对 react 进行重构，通过 fiber 引入从根本上解决了 react 在渲染大型 dom 时卡顿的问题"}, {"id": "6844903695910436872", "title": "[译] 以面试官的角度来看 React 工作面试", "desc": "我的部分工作职责是执行所谓的“技术面试”，在面试时我会评估申请“React 前端开发”职位的潜在候选人。 如果你曾经用谷歌搜索“React 面试问题”（或任何其他“[技术]面试问题”），你可能已经看过无数“十大 React 面试问题”，这些问题要么已经过时，要么和“state …"}, {"id": "6971638241409630244", "title": "解读官方博客：React18真的来了", "desc": "9日凌晨1点，React官方博客放出v18最新进展。 官方带来的三条消息 在React18工作计划这篇博文中，官方带来了三条消息。 v18的工作已经在进行中，并且会是下一个主要版本 创建了v18工作组"}, {"id": "6998395693861699598", "title": "react组件复用的几种方式对比", "desc": "包装强化组件复用的方式 Mixin设计模式 Mixin（混入）是一种通过扩展收集功能的方式，它本质上是将一个对象的属性拷贝到另一个对象上面去，不过你可以拷贝任意多个对象的任意个方法到一个新对象上去，这"}, {"id": "7000742887583383583", "title": "深入挖掘React中的state", "desc": "深入挖掘React中的state/setState原理机制。手把手带你实现一份React state逻辑。"}, {"id": "6888473068876857357", "title": "基于React+Topology构建在线绘图工具", "desc": "本文将会带着大家基于React搭建一套属于自己的绘图工具。 项目的地址我已经托管到github上, 欢迎各位大佬批评指教!后面陆续会将完成的功能, 同步更新到我的github博客上。 至于基础布局的代码, 大家可以自由发挥, 本文就不赘述了。如果想直接上手基础功能的话, 可以直…"}, {"id": "7003238273514471455", "title": "React学习笔记一", "desc": "一.三大设计模式：MVC MVP MVVC MVC主要处理逻辑为：View触发事件，controller响应并处理逻辑，调用Model，Model处理完成后将数据发送给View，View更新。所有的通"}, {"id": "6981286661137121310", "title": "React系列九：深入理解setState", "desc": "这节我们将介绍 React 中 setState ，以及在 React 到底是怎么去做这件事情的。希望可以帮助大家真正理解 setState。"}, {"id": "6992475074523561991", "title": "一文读懂React Hooks", "desc": "这是我参与 8 月更文挑战的第 4 天，活动详情查看： 8月更文挑战 什么是React Hooks？ 引自官网： 其实react一直是很推崇使用无副作用的function来实现组件的，class的组件"}, {"id": "6844903727552266254", "title": "2018 前端开发分享", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 查阅网上诸…"}, {"id": "6850037283535880205", "title": "React Hooks 使用总结", "desc": "同时，也为了让 FunctionalComponent 也拥有 ClassComponent 的一些特性。 不能将 hooks 放在循环、条件语句或者嵌套方法内。react 是根据 hooks 出现顺序来记录对应状态的。 只在 function 组件和自定义 hooks 中使用…"}, {"id": "6959774354947178504", "title": "对海报合成业务的尝试", "desc": "在推广业务中，常常会遇到合成带二维码海报分享功能，并且会同时在APP、WEB、小程序都有此功能，各端都需要单独编写，复用能力差，效率低。"}, {"id": "6844904199923187725", "title": "我对 React V16.4 生命周期的理解", "desc": "网上有很多关于 React 生命周期的文章，我也看了不少，为了梳理并加深我对此的理解，所以决定写这篇文章。本文主要梳理目前最新的 V16.4 的生命周期函数。现在 React 最新版本是 16.13，但是生命周期最新版本是 16.4，之后版本的生命周期没有过改动了，本文不涉及 …"}, {"id": "6992093474266808350", "title": "一文带你学懂React前端路由😃", "desc": "React路由介绍 SPA 即单页面web应用。本文是通过一个案例来理解路由的使用，主要是讲前端的路由应用。"}, {"id": "6990183443233505294", "title": "React全家桶之Immutable.js", "desc": "在react中immutablejs的使用 以及immutablejs在复杂项目中带来的开发成本降低"}, {"id": "6986560320315588645", "title": "我是这样搭建React+TS的通用webpack脚手架的（阶段二）", "desc": "回顾上一阶段，搭建了的是一个适配了普通的 js 代码的基础 webpack 框架：我是这样搭建React+TS的通用webpack脚手架的（阶段一）。但是，还存在几个主要问题：没有装载任何 ui 框"}, {"id": "6844904175831089165", "title": "React中常见的TypeScript定义使用", "desc": "..."}, {"id": "6997735545832996878", "title": "React源码 - React Context 原理", "desc": "Context提供了一种直接访问祖先节点上的状态的方法, 避免了多级组件层层传递props. 本文将从`fiber树构造`的视角, 分析`Context`的实现原理."}, {"id": "6943558431018057764", "title": "从中断机制看 React Fiber 技术", "desc": "React 16 开始，采用了 Fiber 机制替代了原有的同步渲染 VDOM 的方案，提高了页面渲染性能和用户体验。Fiber 究竟是什么，网上也很多优秀的技术揭秘文章，本篇主要想从计算机的中断机制来聊聊 React Fiber 技术大概工作原理。 在早期的单任务系统上，用户…"}, {"id": "6844904163789258759", "title": "18 个 React 最佳实践技巧，助你在 520 这一天过得舒心", "desc": "React 是一个用于开发用户界面的 JavaScript 库， 是由 Facebook 在 2013 年创建的。 React 集成了许多令人兴奋的组件、库和框架。 当然，开发人员也可以自己开发组件。 在最佳实践之前，我建议在开发 React 应用程序时使用测试驱动开发（TDD…"}, {"id": "6844903981945208839", "title": "快速打造 react 后台管理系统", "desc": "react-admin 是由 create-react-app 脚手架快速构建，基于 React 生态系统搭建的后台管理系统模板。实现了登陆/注销、路由懒加载、axios封装、简单权限管理等功能，它可以帮助你快速生成管理系统模板，你只需要添加具体业务代码即可 打造一个任何一个项…"}, {"id": "6990167248153346055", "title": "React入门指南： 6张脑图带你入门React", "desc": "马上到了又一年的秋招， 还不会React？ 没关系！ 我这里有最精简的入门指南😄 通过6张脑图带你入门React, React文档相对于刚入门的新人来说, 其跳跃性强, 案例的综合性之高让人读起来都费"}, {"id": "6937833844837974053", "title": "React-Query 让你的状态管理更优雅", "desc": "在使用 React Hooks 编写组件时，我们常需要手动维护来自服务器的处理状态。在日常开发中引起一些麻烦。 处理异步数据时，我们需要考虑很多事情，例如更新，缓存或重新获取。 使用 React-Query 能够更高效的帮你管理服务端的状态。 这是一个适用于 React Hoo…"}, {"id": "6982118000933486599", "title": "结合React上手esbuild（新手适用）", "desc": "下面直接使用esbuild这个打包工具，带大家从零开始制作一个简单的react页面 esbuild是一个比较新的打包工具。。。"}, {"id": "6876242244265836552", "title": "基于React-hook实现的简易前端国际化方案", "desc": "实现 React 项目国际化，不得不提在业界中较受欢迎的库：react-intl，它是雅虎的语言国际化开源项目 formatjs 的一部分，通过其提供的组件和 api 可以在 React 项目中实现多语言支持。 只能应用于视图层，仅支持在jsx文件的内容（即React.Comp…"}, {"id": "6985424564431880222", "title": "React之shouldComponentUpdate的用法", "desc": "为什么要使用shouldComponentUpdate? shouldComponentUpdate的用法 在子组件中： codeSandBox在线演示"}, {"id": "6844903752885862414", "title": "用 Electron 和 React 撸了个功能超全 + 颜值极高的音乐客户端", "desc": "怎么说嘞，我又写了个音乐播放器，不过这次是用 React 写的。之前实习的时候用了两个多月 React，实习结束之后过了两个月就已经快把 React 忘了，所以决定写个项目复习一下。 加上自己之前用 Vue 实现过一个简单的手机端 Web 版音乐客户端，虽然功能还比较全，但是距…"}, {"id": "6844904148370980872", "title": "React + Mobx + Typescript 从0到1打造一款仿网易云音乐APP（一）—— 打造EggJS版API", "desc": "该项目会以 React 全家桶 (会使用 16.8 最新 API 及 hooks) 以及 mobx 数据流方案为基础打造的一款高质量的移动端音乐类 WebApp 。 axios: 用来请求后端 api 的数据。 此篇为第一篇，主要是 网易云 EggJs API 的实现。后面的数…"}, {"id": "6963445160474574885", "title": "现代化 React 路由 Hookrouter 的使用", "desc": "Hookrouter 开发使用路由在单页应用程序页面中导航和初始化状态是至关重要的。Hookrouter 模块为处理 React 应用程序中的路由提供了一个更好方案。"}, {"id": "6990159289251790885", "title": "聊聊React中的key", "desc": "前前言 朋友们好啊，我是来自推啊前端团队的 zhouchao 同学，本次分享的内容是「聊聊React中的key」。如果大家有不同的观点，欢迎在评论区吐槽和指正哦～😝😝😝 为什么要有 key 参考rea"}, {"id": "6844903633109139464", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （上）", "desc": "不得不承认 Vue 的css解决方式非常自然简洁，相比之下 css 一直是 React 的痛。 从旧宠 css modules 到 JSS 的各种衍生，到新宠 styled-components。几十种的解决方式，上百篇的教程和比较，已经说明了一切。大家一直在寻找最好的最适合自…"}, {"id": "6844903865926549511", "title": "浅谈React性能优化的方向", "desc": "本文来源于公司内部的一次闪电分享，稍作润色分享出来。主要讨论 React 性能优化的主要方向和一些小技巧。如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。 减少计算的量。 -> 对应到 React 中就是减少渲染的节点 或者 降低组件渲染的复杂度 利用缓存。-> 对应到 …"}, {"id": "6962196899579297828", "title": "React 小技巧之一：摆脱hooks依赖烦恼", "desc": "可以将`useRef`和`useState`的特性结合起来，构造一个新的`hooks`函数: `useStateRef`"}, {"id": "6998824414129324040", "title": "React学习知识点之原理", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战。 JSX 是JavaScript的扩展语法，React使用它来描述用户界面长成什么样子，虽然它看起来非常像HTML，但它确实是JavaSc"}, {"id": "6844903983744548878", "title": "[译]React核心概念9：状态提升", "desc": "很多情况下我们使用的多个组件需要对同一个数据做出对应的反应。在这里我们推荐把这个共享的状态提升到距离这些组件最近的祖先组件。现在让我们来看看这是怎么工作的。 在本章中，我们将会创建一个温度计算器来计算在给定温度下水是否会沸腾。 首先我们现创建一个BoilingVerdict组件…"}, {"id": "6844903566516158478", "title": "React中Context API的应用", "desc": "在之前react的工程项目中，关于数据流动以及父子组件中数据通信大都是通过react-redux、redux来完成，虽然可以解决问题，但是这种数据管理是较为复杂的，在最新的react16.3中推出了Context API，降低了开发的复杂度。"}, {"id": "6844903497935093768", "title": "浅谈前端中的过早优化问题", "desc": "过早优化是万恶之源。 —— Donald Knuth 还记得大四的软件优化课上，课的主题虽然是关于各种优化手段的，但老师讲的第一门课的 PPT 里依旧给这句话留了独立的一页。在近期的工作中，我就碰到了不少因为“过早优化”带来的麻烦。稍微整理了一下思绪，便有了这篇短文。"}, {"id": "6844903602746556423", "title": "提升现代web app中的页面性能", "desc": "前言，本文翻译自https://docs.google.com/presentation/d/1hBIb0CshY9DlM1fkxSLXVSW3Srg3CxaxAbdocI67NCQ/edit#slide=id.g32e52b1ea6_1_0看到之后感觉讲解的系统清晰明了，实属…"}, {"id": "6844903552821755911", "title": "Understanding The React Source Code - Initial Rendering (Class Component) V", "desc": "英文预览版"}, {"id": "6844903588733419527", "title": "[译] 单向用户界面架构", "desc": "本文对所谓的“单向数据流”架构进行了非详尽的概述。这并不意味着本文应被视为一个初学者教程，它更应该是一个架构之间的差异和特性的概述。最后，我将会介绍一个和其他框架显著不同的新框架。本文仅假设客户端是 Web UI 框架。 当不同的框架使用 “View” 这个术语时，含义可能大不…"}, {"id": "6844903588234264584", "title": "学习配置优先思想", "desc": "以前听过配置优先这个概念，但是从未在开发生产环节中运用这种思想。当然那个时候还是菜鸟，一心想着功能实现。最近的工作中接触到了这个，而且在方方面面都运用了这个概念，本着学习总结的目的就有了这篇文章。 说起来我们前端开发最常接触的配置其实就是各个框架的路由配置，原理我们也不深究，我…"}, {"id": "6844903733587869704", "title": "react-hooks-lib", "desc": "A set of reusable React Hooks. Hooks are a new feature proposal that lets you use state and other React features without writing a class. T…"}, {"id": "6844903607859413000", "title": "对Promise的深情，只好浅谈", "desc": "谢时间拈了眉头的霜花，谢沧桑 喂饱思念的马，谢绵长情话 投射了天涯，带我去探索Promise，让偶在红尘中，啊，不，在Promise中醉一下。 我相信当每个人遇到Promise的那一刻，在你身上产生了一种由内而发的情感，叫作承诺，叫作心动。那么，故事就由此开始了。 Promis…"}, {"id": "6844903504805363719", "title": "从0实现一个tiny react-redux", "desc": "react-redux 是一个连接react和redux的库， 方便把redux状态库在react中使用。 先让我们来个裸的redux 和react结合的例子试试手 样例store（本文都会以这个store为例） 这个store接受一个 type为add的action。 假设…"}, {"id": "6844903711471304717", "title": "在微信小程序中使用redux", "desc": "小程序开发有时难免也会遇到复杂的业务场景，例如跨页面的数据传递，非父子组件的数据同步，多个子孙组件的数据复用等等，此时，global data或者triggerEvent/selectComponent已经无法很好地提供支持，相反，它们会导致业务逻辑代码和模板代码迅速膨胀到难以…"}, {"id": "6844903575999479815", "title": "Minimax 和 Alpha-beta 剪枝算法简介，及以此实现的井字棋游戏（Tic-tac-toe）", "desc": "前段时间用 React 写了个2048 游戏来练练手，准备用来回顾下 React 相关的各种技术，以及试验一下新技术。在写这个2048的过程中，我考虑是否可以在其中加入一个 AI 算法来自动进行游戏，于是我找到了这篇文章：2048-AI程序算法分析，文中介绍了 minimax …"}, {"id": "6844903537961500686", "title": "创建无障碍 React 应用", "desc": "使用 React 库创建可复用的模块组件在项目之间共享是一个非常好的开发方式。但是应该如何确保你的 React 应用适用于所有人？Scott 将通过一个详细且及时的教程来带领我们创建无障碍的 React 应用。 时间回到 2017 年 2 月，我从加拿大的金斯顿坐火车到多伦多。…"}, {"id": "6844903641497731079", "title": "React源码解读之setState", "desc": "法国队时隔20年夺得了世界杯冠军，这个令人兴奋的消息到现在还在我内心不能平息，矫情过后开始着手分析一波，当然了分析的比较拙劣，希望能给学习react的人送去一点启发和希望，写的有所纰漏，不足之处还希望知识储备是我几倍的大牛们们指出。 正如大家一致公认的react是以数据为核心的…"}, {"id": "6844903557058002958", "title": "Redux源码全篇浅读", "desc": "与文件对应的，主要也是介绍 createStore compose combineReducers bindActionCreators applyMiddleware这几个函数。 1. compose 先来看看compose函数，这个比较简单。 其中主要就是对 reduce …"}, {"id": "6945058500804509710", "title": "React（四）进阶", "desc": "import { VisibilityFilters } from '.// 仅返回传入的 state。import { VisibilityFilters } from '.return Object.visibilityFilter: action. subscribe(li..."}, {"id": "6844903536640131086", "title": "前端每周清单第 44 期: 2017 JS 调查报告、REST 接口实时化、ESM 的过去与未来", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID ： frontshow），及时获取前端每周清单。 FCC 废除网络中立法案: 所谓的网络…"}, {"id": "6844903516973039624", "title": "Miox答疑解惑之基于页面的服务体系", "desc": "Miox发布以来，很多小伙伴都在问一个问题：Miox与react-router@4.x到底有什么不同？我在掘金和知乎上都回答了一些，但是不够完整，那么我就来解释下它们的不同点。 这个问题很简单，也许是由于我之前文章标题取的是Miox带你走进动态路由的世界让大家觉得Miox仅仅做…"}, {"id": "6844903605430927373", "title": "浅析Redux源码", "desc": "Redux 由Dan Abramov在2015年创建的科技术语。是受2014年Facebook的Flux架构以及函数式编程语言Elm启发。很快，Redux因其简单易学体积小短时间内成为最热门的前端架构。 单一数据源 - 整个应用的state被储存在一棵object tree中，…"}, {"id": "6844903620882726926", "title": "React 初涉总结", "desc": "来新公司开始用 React 已经两个多月了，当然之前我对 React 也不是一无所知的，对 React 的基础语法、JSX、Virtual Dom 都是有一定的了解。之前用过 Angular、Vue，对组件化开发都掌握的很熟练了，但 React 与 Angular、Vue 还是…"}, {"id": "6961391370405675016", "title": "React 进阶必备：从函数式组件看 Hooks 设计", "desc": "从函数式说起 React 在现有的三大主流框架中是非常“函数式”的语言，小到 setState，render 函数的设计，大到函数组件，周边组件 Redux 等，都蕴含了一定的函数式风格。因此要了解 "}, {"id": "6996946048350437407", "title": "smart-background 自动生成符号背景，让你不再为背景头疼", "desc": "一个快速生成元素背景的react组件 Smart Background An React Component Can Automatically Generate The Background"}, {"id": "6844903584933347335", "title": "webpack4.0打包优化策略(一)", "desc": "happypack提供的loader，是对文件实际匹配的处理loader。这里happypack提供的loader与plugin的衔接匹配，则是通过id=happypack来完成。\b\b 资料:happypack原理解析-淘宝前端\b 将web应用依赖的基础模块抽离出来，打包\b到单…"}, {"id": "6996928420034641934", "title": "react hook倒计时、定时器（短信验证码）", "desc": "用js写计时器实现倒计时功能很简单，但hooks写的话可能不太一样，这里我已经封装成一个组件了，可以直接copy拿去用"}, {"id": "6979138270827544606", "title": "记一次React Context性能优化", "desc": "每一次`context`的更新都会导致使用了该`context`的组件触发`re-render`，即使该组件用`memo`包裹且`props`未改变"}, {"id": "6959886436526981150", "title": "useEffect和useLayoutEffect对比", "desc": "分析useLayoutEffect和useEffect的执行过程，比较二者之间的差异，到底我们什么时候应该使用useLayoutEffect，useEffect可以帮我们解决什么问题"}, {"id": "6844903681096155149", "title": "使用Taro框架开发小程序", "desc": "最近一直在做小程序项目的开发，上手直接就是wepy, 风格跟vue差不多，整体上，还算稳定，开发起来比原生的效率要高一点；很多人也知道，mpvue就是用vue搭建的，但始终觉得，失去了路由的vue，就像失去了灵魂；虽然接下来要给大家安利的框架，也貌似失去了该灵魂- taro框架…"}, {"id": "6884772230170050574", "title": "如何使用React Hooks请求数据并渲染", "desc": "在日常的开发中，从服务器端异步获取数据并渲染是相当高频的操作。在以往使用React Class组件的时候，这种操作我们已经很熟悉了，即在Class组件的componentDidMount中通过ajax来获取数据并setState，触发组件更新。 随着Hook的到来，我们可以在一…"}, {"id": "7000661662256758815", "title": "react-dnd中useDrag的drag和dragPreview", "desc": "react-dnd提供的useDrag可以让dom元素被拖拽，搭配useDrop可以接收拖拽的dom元素。本文讨论的是dragPreview的设置对拖拽视觉效果上的影响。"}, {"id": "6862305213148381198", "title": "React Router v6 使用指南", "desc": "在本教程中，让我们看一下如何使用React Router v6库创建路由。请注意，在撰写本文时，React Router v6仍处于测试阶段。本教程将带你一窥该库即将推出的一些新功能。 如果你有在React应用程序中使用路由的经验，你可能已经知道在过去的几年里Reach Rou…"}, {"id": "6844903674116833294", "title": "redux真的不复杂——源码解读", "desc": "在我实习入职培训的时候，给我培训的老哥就跟我说过，redux的核心源码很简洁，建议我有空去看一下，提升对redux系列的理解。 入职一个多月了，已经参与了公司的不少项目，redux也使用了一段时间，对于redux的理解却一直没有深入，还停留在“知道怎么用，但是不知道其核心原理”…"}, {"id": "6844904167580893192", "title": "哎吗，这个库太搞笑了，我一定要翻译一下", "desc": "当我看了库的介绍之后，我发现作者确实就是在搞笑无疑。来我们看看这个库的简介是怎么写的。 答：是的，所有的 Hook 都支持该模式。我为了确保我的库兼容将来版本的 React，我还特地在测试代码里加了 React.StrictMode 呢！ 答：宁说呢。"}, {"id": "6964943378127519781", "title": "手写React Fiber渲染逻辑 一", "desc": "用React fiber实现react的首次渲染逻辑，深入了解React fiber的整个渲染流程。"}, {"id": "6975859992754651167", "title": "写给进阶玩家的 React 事件系统原理", "desc": "【 简介 】 React 合成事件是 React 模拟原生 DOM 事件所有能力的一个对象，它根据 W3C规范来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口。"}, {"id": "6844903602117410829", "title": "持续更新的前端资源图谱", "desc": "前端资源图谱，更好的管理自己的技术栈。日常工作中可随时翻阅，平日休息中可随时学习。工作生活必备的利器。"}, {"id": "6977944684437962788", "title": "React 毁了 Web 开发（转载）", "desc": "自言 本文并不是为了引发争论或者让大家非要争一个好坏。我仔细阅读该文章之后，发现里面提出的问题是我们常常忽视并且对于构建可持续项目发展的非常重要的问题。 不论是小兵还是leader都应该持续的去注重这"}, {"id": "6844904024693555213", "title": "immer.js 使用文档及在Redux项目中的实践", "desc": "Immer 是 mobx 的作者写的一个 immutable 库，核心实现是利用 ES6 的 proxy，几乎以最小的成本实现了 js 的不可变数据结构，简单易用、体量小巧、设计巧妙，满足了我们对JS不可变数据结构的需求。 无奈网络上完善的文档实在太少，所以自己写了一份，本篇文…"}, {"id": "6994707544484610078", "title": "React：组件", "desc": "类组件和函数组件 Element V.S. Component 元素与组件 什么是组件 能跟其他物件组合起来的物件，就是组件 就目前而言，一个返回 React 元素的函数就是组件 在 Vue 里，一个"}, {"id": "6958347481738379272", "title": "实现一个简单的 React Native", "desc": "上一次，我们成功的把 React 应用渲染到了 Canvas 上面。今天我们野心更大一点，来实现一个简单的 React Native，我们叫他 Extremely Tiny React Nati"}, {"id": "6844903587122774029", "title": "如何写一个拖拽日历组件（附源码）", "desc": "本文会介绍如何写一个可拖拽日历组件，偏重点在于日历组件的功能挖掘以及对于开发过程的一些思考，编码部分会介绍核心部分的实现。代码在最后也会放出来给大家。 要做一个可拖拽日历组件，先得去看一圈市场上已有的日历组件做成什么样了。主要是为了收集功能以及避免重复造轮子。我调研了googl…"}, {"id": "6844903982645641223", "title": "ES6_Extends如何对ES5的继承进行“糖化”", "desc": "公所周知，JS在常规开发语言中。位于技术鄙视链顶端。说JS不好嘛，不是。Node的出现。预示着JS大有统一前后端的趋势。(这只是小弟的一个拙见，勿喷)或者卑微的说一句，JS能在后端也可以展示一下拳脚了。 其中有一点很让其他OOP语言诟病的就是：JS基于Prototype的继承。…"}, {"id": "6904829273777897485", "title": "js 之异步编程", "desc": "js 作为一门单线程的语言，则注定异步编程会是其最核心的内容。设想一下如果 js 不支持异步会怎样？ 代码从上至下顺序执行，遇到计算量较大的算法则发生阻塞，即使后面有非常紧急的事情也只能等着。进而影响到用户的体验。 上方代码在执行了 resolve 方法后会通知其观察者，也就是…"}, {"id": "6844903512355274759", "title": "React的JSX语法简单支持if判断", "desc": "在JSX中支持if判断"}, {"id": "6844903495863123976", "title": "React中如何使用Redux管理数据 ", "desc": "设计store有很多讲究，不能把服务给的数据结构直接作为store，也不能按照view结构来设计store；对于初学者来说是一件很烦恼的事，社区很多都推荐按照设计数据库表结构来设计store，但是很多以项目交付为目标的不可能做得这么标准，所以大家都尽量向标准看齐-_-。 1） …"}, {"id": "6844903507384893454", "title": "基于 React 的 UI 组件库 uiw v1.2.10 发布", "desc": "发布， 高品质的UI工具包，React 16+的组件库。​ 添加Progress组件圆圈效果。 更新Button组件文档。 Button组件添加 resetProps。 修复Progress组件strokeWidth参数问题。 添加Progress组件。 修复Avatar组件在…"}, {"id": "6844903566742650888", "title": "即学即用系列一：纯函数", "desc": "系列第一篇，就从纯函数开始，由于我是前端方向，所以就从JavaScript语言中的纯函数说起。 上面代码中，impure函数不是一个纯函数，因为它的返回结果依赖外部变量a，因为a是有可能变化的，所以我们不能保证impure(2)的值永远是3。虽然impure函数的代码没有变化，…"}, {"id": "6844903585088536584", "title": "Eng  --- React 、 Vue 、 Angular全家桶套餐外的另一种超轻量级实现方式", "desc": "仅有16kb ,却支持 React ,Vue ,Angular 全家桶套餐的主要核心功能 更少更简易的指令/方法实现同样的操作 没有任何组件通信障碍 ， 后台无需专门复杂的路由控制器(1个id1个接口)前后分离 数据状态共享仅需简短的配置， 组件闭包 , 一次编写,处处部署"}, {"id": "6844903501672218638", "title": "React16中的错误处理", "desc": "2017.9.26 由Dan Abramov撰写。 随着React16的发布越来越接近，我们想宣布一些关于在组件内如何处理JavaScript错误的变化。这些变化包括在React16 Beta版本，并将会成为React16的一部分。"}, {"id": "6844903556148019207", "title": "奇舞周刊第 245 期：普通用户与你之间的差距", "desc": "这篇文章结合境外业务特点，从网络优化、前端优化、后端优化几个角度介绍了境外业务在性能优化上的一些实践，重点篇幅放在了网络优化部分。 “你与普通用户之间，更大的差距其实在于计算机技能，这会对你的设计预估能力造成毁灭性的影响。” 要想在工作中让自己过得更舒服一些，你需要创造条件让自…"}, {"id": "6844903861027602439", "title": "React 基础知识总结", "desc": "componentDidUpdate 会在更新后会被立即调用。首次渲染不会执行此方法 当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较， 动画效果。（例如，当 props 未发生变化时，则不会执行网络请求） 参数3：snapshot 如果…"}, {"id": "6844903655393460238", "title": "Redux 进阶 - react 全家桶学习笔记（二）", "desc": "注：这篇是17年1月的文章，搬运自本人 blog... 在上一篇中介绍了 Redux 的各项基础 api。接着一步一步地介绍如何与 React 进行结合，并从引入过程中遇到的各个痛点引出 react-redux 的作用和原理。 不过目前为止还都是纸上谈兵，在日常的开发中最常见异…"}, {"id": "6844903618605219854", "title": "React项目实践系列二", "desc": "上一篇文章说明了使用远程Mock Server，那下一步就是让前端请求Mock环境了。 在项目中便可直接fetch('https://mock.yonyoucloud.com/mock/212/user/getAll')便可。 但是此处会有一个问题，现在在开发环境下是请求Moc…"}, {"id": "6844903560367325198", "title": "react 简单优化", "desc": "由于js的特性（对象在内存中的存储），如果传递的是一个对象，尽量提前声明一个索引指向该对象，避免每次render都重新在内存中生成一个新的对象。 当父组件发生了render，子组件都会重新渲染。很多时候子组件并没有发生任何改变，它接收到父组件传给它的props并没有发生变化，自…"}, {"id": "6844903510325067784", "title": "如何优雅的设计 React 组件", "desc": "如今的 Web 前端已被 React、Vue 和 Angular 三分天下，一统江山十几年的 jQuery 显然已经很难满足现在的开发模式。"}, {"id": "6912358193544822797", "title": "[译]我如何用React JS和Node.js在一周内建立一个电子商务网站（Part-1/3）", "desc": "这个项目来自我跟随的布拉德·特拉弗斯Udemy课程。我以书面形式分享，以反映我的学习。github代码、Udemy课程和演示链接在本系列的末尾提到。 该应用程序将演示一个基本的购物车管理系统，以及处理用户身份验证的简单方法。我们将使用React-Redux进行状态管理，我们将使…"}, {"id": "6930972204976848910", "title": "深入浅出的学习react[学习笔记16]", "desc": "在上一讲从 beginWork 切入，摸索出了 Fiber 节点的创建链路与 Fiber 树的构建链路。本讲将以 completeWork 为线索，去寻觅 Fiber 树和 DOM 树之间的关联，将整个 render 阶段讲透。在此基础上，结合 commit 阶段工作流将会对 …"}, {"id": "6930911848724168718", "title": "深入浅出的学习react[学习笔记15]", "desc": "上一章节对 ReactDOM.render 的调用链路、包括其对应的初始化阶段的工作内容都有了学习和掌握。接下来在此基础上，学习后续的 render 阶段和 commit 阶段。这其中，render 阶段可以认为是整个渲染链路中最为核心的一环，我们反复强调“找不同”的过程，恰恰…"}, {"id": "6844903569301176327", "title": "在React中实现一个组件 ", "desc": "本文简单介绍了如何编写一个React 组件。为了快速演示，文章中出现的示例代码均用 react-create-app 官方推荐的脚手架快速搭建的项目中完成，react-create-app 传送门。 展示型组件是用来展示样式的，他们不绑定任何东西且没有依赖性，通常被实现为无状态…"}, {"id": "6844904120860557320", "title": "React服务端渲染（一）", "desc": "ok!到了这一步，数据已经可以在服务端传入到组件中了，并且通过renderToString方法转化成字符串，到目前我们能做到了根据前端路由来自动渲染静态组件，注意是静态组件，静态组件，静态组件。重要的事情说三遍！ 这个时候用到了上面提到的，承载react组件的字符串模板了。我们…"}, {"id": "6844903496198651917", "title": "前端每周清单第 31 期: iOS 11 Viewport 解析，Preact PWA 性能优化案例，JS 内存泄露分析", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Mastodon 1.6 发布：Masto…"}, {"id": "6844903678118199304", "title": "微信小程序授权登陆方案以及在Taro下利用Decorator修饰器实现", "desc": "利用修饰器Decorator、React的高阶组件HOC以及async/await，劫持当前页面调用接口的声明周期，等待封装好的用户登录逻辑执行完以后，再进行当前声明周期里面其他调用的执行。 在分享助力的场景下，新用户点击分享用户的卡片进来小程序，需要弹出一个授权弹框等用户授权…"}, {"id": "6844903925871722510", "title": "学习React Hooks系列 - useMemo", "desc": "一个场景：父组件改变自身数据，不涉及子组件数据变化，就会在父组件每次render时都渲染子组件。 先说一下shouldComponentUpdate这个生命周期函数，这个函数是通过返回true或false来控制组件是否渲染的，可以有效的避免组件的一些无意义或者重复的渲染，和避免…"}, {"id": "6863832173703593997", "title": "React性能优化的中流砥柱——Immutable数据流", "desc": "本文帮助大家从0了解什么是immutable，以及它有什么作用，是在什么背景下应运而生的。 最重要的是它是我们日常开发中常用的技术之一，与React配合使用的immutable能给我们开发者带来多大的便利，本文会依次讲到。 显然上面例子中的原数组list，被我们不轻易间串改了，…"}, {"id": "6954897101063094285", "title": "React系列之 EventLoop在setState 中的应用", "desc": "相信你已经对React框架各种语法了然于心，能够熟练的应用于各种业务场景，造各种轮子，甚至孰能生巧，各种性能优化，信手拈来。 如何在了解源码后，可以实现具有相同能力的setState呢？"}, {"id": "6881814813501030413", "title": "模拟京东移动端商详主图楼层实现及解析（React Hook+SSR）", "desc": "首屏渲染时在轮播图位置放一张压缩后的图片做背景图，在进入客户端后懒加载真正的轮播图组件，轮播图组件第一张图片加载完成(`onLoad`)后，设置背景图为透明,在减小JS首屏包的大小的同时也优化了用户体验，做完感觉有点打通任督二脉的感觉，感觉真好。"}, {"id": "6844903612867411982", "title": "使用next.js完成从开发到部署", "desc": "next.js 是一个非常棒的轻量级的react同构框架，使用它可以快速的开发出基于服务端渲染的react应用。在next.js 官网推荐的是使用now来部署应用，但是对于国内用户或者说是有特殊需求的用户来说，部署到自定义服务器也许是大多数人希望的。借着近期公司官网改版，顺便分…"}, {"id": "6844904182949019656", "title": "React diff 算法", "desc": "很久以前写过一篇了解虚拟DOM 的文章，主要讲解了vue为什么会使用虚拟 DOM 以及 VUE 的 diff 算法。最近技术栈迁移到了 React，就好好研究了一下 React diff 算法的实现。 在了解 React diff 算法之前，先了解 React Fiber 相关…"}, {"id": "6844903582672650253", "title": "谈谈前端异常捕获与上报", "desc": "Hello，大家好，又与大家见面了，这次给大家分享下前端异常监控中需要了解的异常捕获与上报机制的一些要点，同时包含了实战性质的参考代码和流程。 正所谓百密一疏，一个经过了大量测试及联调的项目在有些时候还是会有十分隐蔽的bug存在，这种复杂而又不可预见性的问题唯有通过完善的监控机…"}, {"id": "6844903798805102600", "title": "React 进阶系列：Hooks 该怎么用", "desc": "之前如果我们需要抽离一些重复的逻辑，就会选择 HOC 或者 render props 的方式。但是通过这样的方式去实现组件，你打开 React DevTools 就会发现组件被各种其他组件包裹在里面。这种方式首先提高了 debug 的难度，并且也很难实现共享状态。 但是通过 H…"}, {"id": "6844903926999826446", "title": "120行代码实现一个交互完整的拖拽上传组件", "desc": "useState、useEffect、useRef是如何替代原生命周期和Ref的。 如何使用React Hooks编写自己的UI组件库。 文章讲了React拖拽上传的精简实现，但直接翻译照搬显然不是我的风格。 于是我又用React Hooks 重写了一版，除CSS的代码总数 1…"}, {"id": "6889815642099335181", "title": "【React Hooks系列】之useMemo", "desc": "由于React的函数式组件使用起来方便（对比class组件），我将重点使用函数组件来运行开发。在这系列博客中，我将分享我所学到Hook系列API的知识。 在class的时代，我们一般是通过pureComponent来对数据进行一次浅比较，引入Hook特性后，我们可以使用Memo…"}, {"id": "6969088115344900127", "title": "React造轮子-自定义组件开发toast, confirm", "desc": "这是我参与更文挑战的第1天 一、toast组件开发 1.1先写UI 效果 1.2 在具体业务中使用 如下图校验用户名密码弹框 通过封装toast组件实现自定义文案, 定时隐藏, 隐藏回调函数 app."}, {"id": "6844903763669417992", "title": "React干货：SPA单页如何规划路由、设计Store、划分模块、按需加载", "desc": "本 Demo 并不采用 CSS Module 来进行 css 模块化，因为编译之后可读性不好，而且增加复杂度和编译时间。使用统一的 css 命名空间约定，我们也可以很简单的防止 css 命名冲突。 使用 Typescript 意味着使用强类型，我们把业务实体中 TS 类型定义分…"}, {"id": "6926845124278222856", "title": "qiankun传值解决方案", "desc": "定义全局状态，并返回通信方法，建议在主应用使用，微应用通过 props 获取通信方法。 子应用：微应用中会自动生成一个全局 model，可以在任意组件中获取主应用透传的 props 的值。"}, {"id": "6844904019714899976", "title": "React Router V5 使用总结", "desc": "对于之前没有接触过 React Router 的同学来说，一定要注意：最新的React Router版本是 V5 。除此之外，还有 V2 V3 V4 版本。其中V4和V5版本的用法和理念基本上是一致的，但是和之前的V2、V3版本有较大差异。 所以在学习之前一定要弄清楚自己使用的…"}, {"id": "6844903683566600206", "title": "精读《12 个评估 JS 库你需要关心的事》", "desc": "特性。 稳定性。 性能。 包生态。 社区。 学习曲线。 文档。 工具。 发展历史。 团队。 兼容性。 趋势。 下面总结一下作者的观点。 当你调研一个 JS 库，功能当然是最重要的，就好比 React 的用于开发 UI 界面非常方便，这是流行起来的一部分因素。 但同时 React…"}, {"id": "6844904015528984583", "title": "原来 React 项目多环境打包是如此的简单", "desc": "在实际项目开发中，前端 er 常常会面对多个环境的接口：开发环境、测试环境、生产环境，所以项目中网络请求的 baseUrl也需要跟随这些环境来变化。 .env：默认。 .env.local：本地覆盖。除 test 之外的所有环境都加载此文件。 .env.development,…"}, {"id": "6844903763317096462", "title": "开源 UI 库中，唯一同时实现了大表格虚拟化和树表格的 Table 组件", "desc": "有这样一个需求，一位 React Suite（以下简称 rsuite）的用户，他需要一个 Table 组件能够像 Jira Portfolio 一样，支持树形数据，同时需要支持大数据渲染。 截止到目前（2019年1月17日）为止，开源 UI 库中没有找到可以支持的组件，所以 r…"}, {"id": "6844904054351462413", "title": "手摸手，打造属于自己的 React 组件库03 — 打包篇", "desc": "在前面的部分，我们使用 React 等相关技术构建了库并对其进行了测试。现在，我们准备对前面的代码进行打包，并将其发布至 NPM，方便其他人使用。 组件库开发到了这里，终于也到了最重要的部分，解决（文档 + 打包）的问题。 在尝试了一些打包库（比如create-react-li…"}, {"id": "6966214877635411982", "title": "你能手写一个 React 吗", "desc": "本文主要通过手写一个简单的 React，旨在了解 Facebook 团队使用两年多时间重构的 Fiber 架构到底做了些什么？从而对 React 基本原理有一个直观的认识。"}, {"id": "6844903608626970631", "title": "Redux-thunk快速入门", "desc": "最近刚刚完成了毕业答辩，我的毕设内容是基于React系列技术栈开发的一个类似Instagram的Web App，戳此看看。开发完后,我惊奇的发现：咦，之前就听说有个叫做redux-thunk的东西，我怎么没用到？业务场景太简单了？于是大概研究了下。。 关于redux-thunk…"}, {"id": "6844903679246467086", "title": "How React Works （一）首次渲染", "desc": "本文将会通过一个简单的例子，结合React源码（v 16.4.2）来说明 React 是如何工作的，并且帮助读者理解 ReactElement、Fiber 之间的关系，以及 Fiber 在各个流程的作用。看完这篇文章有助于帮助你更加容易地读懂 React 源码。初期计划有以下几…"}, {"id": "6902541164931448846", "title": "React SSR 同构入门与原理", "desc": "所谓同构，简而言之就是，第一次访问后台服务时，后台直接把前端要显示的界面全部返回，而不是像 SPA 项目只渲染一个 &#x3C;div id=\"root\">&#x3C;/div> 剩下的都是靠 JavaScript 脚本去加载。这样一来可以大大减少首屏等待时间。 同构概念并不复…"}, {"id": "6982860535045816333", "title": "react 笔记之- useMemo 、useCallck", "desc": "useMemo 和 useCallback 使用 useMemo 和 useCallback ，从使用者的角度讲，useCallback 是针对回调函数callback的，反之，useMemo服务的是"}, {"id": "6844904155220279303", "title": "react 打造页面可视化搭建 1 - 提纲  持续更新", "desc": "编辑器的实现思路是：编辑器生成页面 JSON 数据，服务端负责存取 JSON 数据，并生成对应的模版文件 .jsx ，渲染时从服务端取数据 JSON 交给前端模板 .jsx 处理。"}, {"id": "6854573210638221320", "title": "你这磨人的小妖精——选中文本并标注的实现过程", "desc": "执行getSelection()后，会得到一个selection对象，其中有一个getRangeAt方法可以获取range对象。range对象有几个属性： 基于这一套，服务端只需要存储的信息是：光标起点位置、光标终点位置、所选文字，前端这边完全可以实现所有的需求。下面开始从0到…"}, {"id": "6981285238567616520", "title": "高阶组件(HOC) 之 dva connect 和 forwardRef 同时使用解决方案", "desc": "使用高阶组件(HOC)解决 同一组件既需要 connect 包裹，又需要 forwardRef 拿到 ref 的问题。"}, {"id": "6989815642522124301", "title": "React基础知识（3）——受控组件与非受控组件", "desc": "通过学习《第一个组件》这一节，相信你已经理解了 props 和 state 的区别。这一节，我们会介绍 “受控组件”和“非受控组件”这两个概念。 非受控组件 我们首先看一个简单的例子，现在有一个输入组"}, {"id": "6844903762201411592", "title": "[译] 在你学习 React 之前必备的 JavaScript 基础", "desc": "为了不浪费大家的宝贵时间，在开头申明一下，这篇文章针对的阅读对象是：没有写过 React 或者刚刚才接触 React 并且对于 ES6 的语法不太了解的同学，这是一篇基础入门的文章，在一开始我并没有准备翻译一篇这样的基础文章，但是在阅读完全文之后，我想起自己刚开始学习 Reac…"}, {"id": "6884968140892176397", "title": "【译】build your own react - 知识搬运工", "desc": "最近在学习 react 的源码，但是内，没有什么头绪，也不知道从何看起，一行一行的阅读源码也不是个办法。偶然间 从掘金上看到一篇 React源码揭秘1 架构设计与首屏渲染，发现 pomb 大神的一篇 build-your-own-react 构建一个你自己的 react，迅速激…"}, {"id": "6844903886029848589", "title": "基于Umi的开发方案", "desc": "Umi是阿里的一款基于React的企业级应用框架。本文将会从3个方面介绍下基于Umi的开发方案： umi是一款可插拔的企业级react应用框架，支持约定式路由以及各种进阶路由功能，并以此进行功能扩展，拥有完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务…"}, {"id": "6905166914234875911", "title": "深度探索 styled-components 工作原理", "desc": "现在的前端开发特别是 React 社区, CSS-in-JS 越来越常见了. styled-components 凭借着以下几种特性 脱颖而出: 开发者不再需要费尽脑汁去想 CSS 的类名. 那么, 上面所说的种种, 是如何实现的呢? styled.button 只是 styl…"}, {"id": "6844903685475008526", "title": "未来的组件化标准 —— 浅尝Web Components ", "desc": "Web Components涉及到的内容还是很多的，每一块都有很多东西可以讲，国外的好多大佬已经产出了好多优秀的文章。 本文照常只是简单了解大致内容而不进入深究，了解且会用即可，浅尝辄止。 Web Components本身不是一个规范，而是由W3C提出的另外4个规范的合集。这四…"}, {"id": "6995763964126691341", "title": "React的插件库——redux", "desc": "react-redux是react的一个插件库，能让我们在react中更好的使用redux；其中UI组件中不含任何的store的东西，只是用于展示页面，所有和store联系起来"}, {"id": "6915679844411899917", "title": "React之如何阻止在已卸载的组件上进行setState", "desc": "一般来说，偶尔出现的这个Warning确实不会带来严重的性能问题，但是试想如果是setInterval的句柄没有被正确在卸载周期中进行清理，那即便你的组件销毁了，它也会持续地生效，不仅会造成memory leak，亦会拖慢你项目的响应速度。所以，作为一个严谨的开发者来说，我们在…"}, {"id": "6995583368960147492", "title": "React 学习之 Redux 中间件", "desc": "本文结合 Express Middleware 讲解 Redux Middleware 使用场景、简单原理实现与手写 applyMiddleware 函数......"}, {"id": "6898592963401056264", "title": "十分钟快速上手Recoil", "desc": "​ 一个React 状态管理库。 ​ Recoil 的行为方式和原理与 React 完全一致。将其使用到你的应用程序中能够获得快速且灵活的状态共享。 ​ 派生数据和异步查询均采用纯函数和高效的订阅方式实现。 ​ 通过监听应用程序中所有状态的变化来实现持久化存储、路由、时间旅行调…"}, {"id": "6844904041030352909", "title": "React Hooks 从入门到放弃(一)", "desc": "使用 React Hooks 就不得不提到 React 函数组件。 从官网上的介绍来看, 组件就像 JavaScript 的函数, 它接收一些入参(props), 并返回 React 元素。 在我们最初学习使用 React 框架时, 首先了解的是通过Class书写组件, 这样可…"}, {"id": "6844904128980713485", "title": "React 16.8.6 版本存在内存泄露", "desc": "从上图可以发现在这时间内， nodes 节点一直在增长，很有可能发生了内存泄露。 发现这个节点是直播间里的进房消息，里面是 react 存的 FiberNode 节点，观察了一下里面这些 bi 基本上都是消息元素。 还是消息信息，说明是这个导致 bi 增加的。我们继续展开： 仔…"}, {"id": "6933001059895869447", "title": "ReactDOM.render串联渲染链路（二）", "desc": "前一篇文章ReactDOM.render串联渲染链路（一），我们梳理了渲染链路的初始化阶段和render阶段的前半段，这篇文章我们来看看render阶段的后半段和commit阶段。 前面有说道，在render阶段，这个过程中，穿插了大量了beginWork、completeWo…"}, {"id": "6844903586107916301", "title": "2018 CSS 大会多图见闻录", "desc": "CSS 之于前端有些像厦门之于 IT 界：耳熟能详却又略显小众。那么在厦门召开的第四届 CSS 大会是否能结合碰撞出新的火花呢？跟随着本兼职摄影师来看看吧~ 周六上午的巨幕影厅里，本届 CSS 大会正式拉开帷幕。在现在的前端圈技能树越点越多的大潮下，单单会写代码的前端或许已经不…"}, {"id": "6921879908817829901", "title": "Redux你是个好人，只是我们不合适", "desc": "当聊到React状态管理解决方案，很多人第一反应是Redux。 有React核心团队光环加持。Redux的作者Dan开发初版Redux后便加入React团队。另一位联合作者Andrew也来自React核心团队 合适的出现时机加上大名气，催生Redux相关生态在社区快速发展，成为…"}, {"id": "6966068024478531592", "title": "ReactDOM.render的渲染原理（理解）", "desc": "ReactDOM.render的渲染原理 在react项目中，之所以可以在函数/组件中直接写模板结构，是因为最后babel都会帮我们把这些模板转译成 React.createElemen(config"}, {"id": "6985813506335932429", "title": "这一次，彻底搞懂React生命周期", "desc": "阅读指南 React生命周期流程图 1. getDerivedStateFromProps(props, state) 这个函数是静态的，所以前面要加static. 返回的是什么？ 接收的是什么？ c"}, {"id": "6844903920515416077", "title": "4 个 useState Hook 示例", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 到 React 16.8 目前为止，如果编写函数组件，然后遇到需要添加状态的情况，咱们就必须将组件转换为类组件。 编写 class Thing extends React.Component，将函数体复制到re…"}, {"id": "6888571082400661512", "title": "hox 状态调试神器", "desc": "如果你对 hox 不了解，可以前往官方网站了解一波，如果你想了解 hox 源码，可以看这篇文章hox 源码解读。那么从官方中，我们可以得到 Hox 的相关介绍：下一代的 React 状态管理器，只存在一个 API，那就是 createModel。 官方 issues 也有人问到…"}, {"id": "6844903609667321863", "title": "探索Virtual DOM的前世今生", "desc": "在前端开发过程中，对性能产生最大影响的因素莫过于DOM的重排重绘了，React作为前端框架领跑者，为了有效解决DOM更新开销的问题，采用了Virtual DOM的思路，不仅提升了DOM操作的效率，更推动了数据驱动式组件开发的形成与完善。一旦习惯了数据驱动式开发，再要求我们使用显…"}, {"id": "6935621453400244260", "title": "react.js + xterm.js + websocket + zmodem.js实现webshell", "desc": "xtermjs实现基本的webshell。 结合zmodemjs实现rz命令上传，sz命令下载功能。"}, {"id": "6844903652172234759", "title": "DvaJS的学习之路1 - dva+umi官网例子学习", "desc": "Step 1. 安装 dva-cli@next 并创建应用 先安装 dva-cli，并确保版本是 1.0.0-beta.2 或以上。 Step 2. 配置代理，能通过 RESTFul 的方式访问 http://localhost:8000/api/users 浏览器会自动开启，…"}, {"id": "6844903501168902158", "title": "自己撸了个网易云音乐客户端（Electron, React, MobX, JSS）", "desc": "不吹不黑这大概是目前最好的网易云音乐客户端了吧，精力有限没有适配Windows和 Linux。目前 API 由 Binaryify/NeteaseCloudMusicApi 提供(可能会自己重造轮子，全姿势解锁)。"}, {"id": "6844904132164190221", "title": "用动画和实战打开 React Hooks（二）：自定义 Hook 和 useCallback", "desc": "在第二篇教程中，我们将手把手带你用自定义 Hook 重构之前的组件代码，让它变得更清晰、并且可以实现逻辑复用。在重构完成之后，我们陷入了组件“不断获取数据并重新渲染”的无限循环，这时候，useCallback 站了出来，如同定海神针一般拯救了我们的应用…… 在上一篇教程中，我们…"}, {"id": "6940042028243746823", "title": "前端开发者周刊第三期：各大厂 webpack5 实践", "desc": "前端爱好者周刊 (Github: shfshanyue/weekly)，每周记录关于前端的开源工具、优秀文章、重大库版本发布记录等等。每周一发布，订阅平台如下，欢迎订阅。 Flutter 将成为未来构建 Ubuntu App 的默认选择。原文:Ubuntu Makes Flut…"}, {"id": "6964724560327344165", "title": "【Rematch 源码系列】一、Rematch vs Redux？", "desc": "看完 【译】重新设计 Redux 后，这篇文章会继续聊聊 Rematch 和 Redux 的区别。我将分别用 Redux 和 Rematch 实现一个简易的计数器（Counter），其中 Redux "}, {"id": "6958710255194898446", "title": "Hooks 之 useEffect", "desc": "1.执行每一个 effect 前会对上一个effect进行清除 2.React只会在浏览器绘制后运行effects 3.Effect 会捕获定义它们的那次渲染中的props和state。"}, {"id": "6877801366383755272", "title": "写JavaScript函数不得不知的高级技巧", "desc": "对于我们程序员来说，写函数是再熟悉不过的事情了，不管我们要实现什么样的功能，都需要通过函数来完成。在JavaScript里面，函数拥有非常高的特权，甚至是一等公民，因此也跟Kotlin一样支持多种编程范式。 这边只要给num的值不变，它返回的结果也不会变，而且这个函数执行的过程…"}, {"id": "6844903686804602894", "title": "TradingView + WebSocket 实时推送 K 线脱坑指南", "desc": "0. 竟然被催更了 1. TradingView 是个啥 今天咱们说个比较特别的—— TradingView，这是一个专业的图表库，专门做 K 线图的，而 K 线图是股票、基金等交易所必备的一样东西。项目本身是免费的，但并不开源，官方提供了托管在 Github 上的私有库，开发…"}, {"id": "6978304962061139976", "title": "在react中使用markdown编辑器和md渲染插件", "desc": "安装markdown编辑器插件 for-editor yarn add for-editor 或 npm install for-editor 引入插件 修改样式 editor.less 安装md渲染"}, {"id": "6844904141995638791", "title": "精读《React 性能调试》", "desc": "在数据中台做 BI 工具经常面对海量数据的渲染处理，除了组件本身性能优化之外，经常要排查整体页面性能瓶颈点，尤其是维护一些性能做得并不好的旧代码时。 React 性能调试是面对这种问题的必修课，借助 Profiling React.js Performance 这篇文章一起学习…"}, {"id": "6844903679401656333", "title": "【译】Google - 使用 webpack 进行 web 性能优化（二）：利用好持久化缓存", "desc": "在优化应用体积之后，下一个提升应用加载时间的策略就是缓存。将资源缓存在客户端中，可以避免之后每次都重新下载。 这个方法可以告诉浏览器去下载 JS 文件，并将它缓存，之后使用的都是它的缓存副本。浏览器只会在文件名发生改变（或者一年之后缓存失效）时才会请求网络。 使用 webpac…"}, {"id": "6981623731097436197", "title": "入门级Webpack React配置模板", "desc": "我以前在没有接触create-react-app 和 vue-cli之前都是自己搭建 Webpack 环境，这篇文章算是对搭建环境的总结，记录了搭建一个入门级 react 框架的步骤和代码。"}, {"id": "6844903856053157901", "title": "[译] Redux vs. React 的 Context API", "desc": "React 在 16.3 版本里面引入了新的 Context API —— 说它是新的是因为老版本的 context API 是一个幕后的试验性功能，大多数人要么不知道，要么就是依据官方文档所说，尽量避免使用它。 但是，现在 Context API 摇身一变成为了 React …"}, {"id": "6844903830153330696", "title": "React单元测试实战", "desc": "可保证得到结果的一致性，提高项目、组件稳定性。 开发者按单元测试思路去写代码，可清晰代码结构，提高代码的可读性。 由于笔者开发的项目越来越大，公共组件的复用性高，故其稳定性尤为重要。因此，引入单元测试刻不容缓。 会占用一定的开发成本，增加开发工作量。 旧项目加入单元测试改动很大…"}, {"id": "6844904149746728973", "title": "用动画和实战打开 React Hooks（三）：useReducer 和 useContext", "desc": "随着应用状态越来越复杂，我们迫切需要状态与数据流管理的解决方案。熟悉 React 开发的同学一定听说过 Redux，而在这篇文章中，我们将通过 useReducer + useContext 的组合实现一个简易版的 Redux。首先，我们将带你重新认识“老朋友”useState…"}, {"id": "6948726117591154719", "title": "React事件机制源码浅析", "desc": "React v17里事件机制有了比较大的改动，想来和v16差别还是比较大的。 本文浅析的React版本为17.0.1，使用ReactDOM.render创建应用，不含优先级相关。 React中事件分为委托事件（DelegatedEvent）和不需要委托事件（NonDelegat…"}, {"id": "6896068534611214350", "title": "React Hook 系列(三)：记一次中台项目的Hook沉淀", "desc": "本文旨在分享，React hook 在中大型中台项目中的实践，适合熟悉 React hook 用法的同学，希望能对你有帮助。 1. unstated-next unstated-next 主要是利用 React.createContext 状态共享，将需要注入 Provider…"}, {"id": "6889732571526070279", "title": "如何避免异步请求导致查询页面错乱的问题", "desc": "这篇文章将讨论前端日常开发中常见的异步请求导致页面错乱的问题，总结常见的解决方法。 直接看例子，假设我们正在开发一个管理后台的查询列表页面，页面功能很简单，每次搜索条件变更时触发 Table 列表重新加载和渲染。 Filters 是个受控的搜索组件，接收 value，和 onC…"}, {"id": "6978403159089610765", "title": "这样使用React Context，提高你的工作效率", "desc": "不管你是写React的一两年的程序员老司机，还是刚刚接触React的小白程序员，如果你想掌握React并且使用它来解决各种各样的需求，那么你就一定需要掌握React Context。"}, {"id": "6844903989524299783", "title": "React 函数式组件优化", "desc": "相信大家在日常中使用的最多的还是函数式组件和 React.Component 组件吧，今天就简单的说下函数式组件的两个优化方法。 在谈到函数式组件之前我们先看一个概念 - 纯函数。 引用一段维基百科的概念。 可以看到，纯函数有着相同的输入必定产生相同的输出，没有副作用的特性。 …"}, {"id": "6993236542248632334", "title": "useEffect 第二个参数是否可以用表达式", "desc": "判断第二个参数的源码 其实就是遍历deps数组，对每一项执行Object.is()方法 useEffect 第二个参数是否可以使用 且与或 根据useEffect源码仿写useEffect one ="}, {"id": "6990530029239156750", "title": "为什么 setState 是异步的", "desc": "从 React 的设计来说，setState 分为两个阶段：创建更新、执行更新。 创建更新：setState 首先会创建一个 update，并将 update 入队到当前 fiber.updateQu"}, {"id": "6844903677317103624", "title": "React开发中提升幸福度的一些小技巧", "desc": "又一篇来自日常开发的汇总：各位客官请对号入席，店小二逐一上菜。"}, {"id": "6844903638289252360", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （下）", "desc": "终于有时间静下心学点东西，把这个系列最后一篇填上。 中篇 介绍了 tachyons, 本篇介绍个人的最爱，没有之一：styled-jsx。 zeit 的一系列产品从 now，到 next.js，我算是一个脑残粉。简洁好用是我对 zeit 的项目的印象。而且一套库自成系统，sty…"}, {"id": "6861538848963461133", "title": "深度剖析github star数15.1k的开源项目redux-thunk", "desc": "日益忙碌的一周又过去了，是时候开始每周一次的总结复盘了，今天笔者就来剖析一下github中star数15.1k的开源项目redux-thunk。 作为一名React方向的前端工程师，不管是被面试还是面试别人，大部分都会说起redux-thunk的实现原理，因为它非常经典且有用，…"}, {"id": "6844904045862191118", "title": "2020 Create React App 开始一个UI组件库", "desc": "是什么驱使我准备用Create React App[1] (后文简称CRA)来开发一套UI Component Library呢？因为团队选用了Vue作为基础技术栈，之前习惯了官方开箱即用的Vue-CLI非常便捷即可配置完成构建组件库所需的生产环境，比如这套我们内部使用的woo…"}, {"id": "6844904062681350157", "title": "你不知道的 useRef", "desc": "首先, 我们要实现一个需求 -- 点击 button 的时候 input 设置焦点. 同样的, 我们可以使用 useRef 来实现完全相同的结果. 事实上, 只要你认真读一下官方文档, 就会发现, 它们两个确实不一样. 换句人话说 , useRef 在 react hook 中…"}, {"id": "6879087910487293966", "title": "从0开始微操SSR之nextjs项目实践", "desc": "2、首页打开的速度足够快，这里的足够快，指的是打开首页的时候页面上的数据已经从服务端获取，而不是还需要异步去请求接口。 以上的两点要求，就是SSR(Server Slider Rendering,即服务端渲染)主要解决的两个问题。而关于SSR更多的内容，网络上已经有太多的资源介…"}, {"id": "6938627661098909709", "title": "react源码解析（二）时间管理大师fiber", "desc": "fiber并不是计算机术语中的新名词，他的中文翻译叫做纤程，与进程（Progress）、线程（Thread）、协程（Coroutine）同为执行过程。React Fiber可以理解为：React内部的一套更新机制。支持任务不同优先级，可中断与恢复，并且在恢复之后复用之前的保存状…"}, {"id": "6995150631447035941", "title": "React 源码解析-前言", "desc": "这是我写的第一篇有关react源码的文章，先说一下为啥要写这个系列 从刚开始用vue到自己开始用react已经过去了两年的时间，一直没有深入了解react的源码 看的解析很多，看得多了感觉自己懂了。但"}, {"id": "6844903873312735246", "title": "浅析dva", "desc": "dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架。 学过React的童鞋都知道它的技术栈真的很多，所以每当你使用React的时候…"}, {"id": "6844903681121484807", "title": "小程序 webview 应用实践（演讲内容整理）丨掘金开发者大会", "desc": "大家好，我是转转开放业务部前端负责人张所勇，今天主要来跟大家分享小程序 webview 方面的问题，但我并不会讲小程序的 webview 原理，而我主要想讲的是小程序内如何嵌入 H5。 那么好多同学会想了，不就是用 web-view 组件就可以嵌入了吗，是的，如果咱们的小程序和…"}, {"id": "6911577250328641544", "title": "React类组件基础03-其他API", "desc": "key在列表渲染当中是必要的，用来表示每一条元素的唯一身份标识。 如果我们在遍历数组渲染列表的时候，没有添加key，那么在这段js代码运行在浏览器的时候，会抛出一个警告a key should be provided for list items，告诉我们必须要添加一个key。…"}, {"id": "6844903711229673486", "title": "React源码系列(一): 总结看源码心得及方法感受", "desc": "React16源码阅读系列分享 喜欢的可以点个 watch/start 后面还会更新"}, {"id": "6950943650050392094", "title": "React三大属性之Refs", "desc": "refs是React中用来取得某个JSX组件或者某个DOM中的一些状态值的时候，用来获取节点的方法。在React官方的解释中，它的适用范围如下：React文档中再三强调，请不要过度使用refs，所以当"}, {"id": "6844903498295803917", "title": "超级快的 JavaScript 解析器，可用于生产环境。", "desc": "Cherow is a very fast, standard-compliant ECMAScript parser written in ECMAScript. It strictly follows the ECMAScript® 2018 Language Specif…"}, {"id": "6844903982356234253", "title": "[译]React安装：创建react应用", "desc": "这也是将react集成到现有项目的最简单的方式，当然如果你觉得工具链对你更有帮助的话你也可以使用它。 Create React App 对于学习React来说是一个非常友好的环境，同时这也是使用React创建单页面应用最好的方式。 它帮你搭建了开发环境因此你可以在此环境下使用最…"}, {"id": "6844903554638053390", "title": "深入理解React源码 - 首次渲染 V", "desc": "上次我们看完了自定义组件渲染的表层逻辑。这个过程虽然看似很像简单组件对应的逻辑，但也包含一些其特有的处理：1）一个额外的ReactCompositeComponent 需要被实例化来代表这个自定义的组件（App）；2）App.render()会触发很多个React.create…"}, {"id": "6844903844820811783", "title": "[译] React fiber如何以及为何使用列表来遍历组件树", "desc": "React中，改变检测通常被看作是协调（reconciliation）或者渲染（rendering），而Fiber正是这个机制的一种新的实现。在这个架构之下，可以实现一些有趣特性，如：改善非阻塞渲染，执行基于优先级的更新，以及在后台提前渲染内容。这些特性在并发React哲学中被…"}, {"id": "6844903815892697095", "title": "如何实现一个Interval Hook", "desc": "可能你看过也写过一些 react hook ，不过你对 hook 的种种行为真的了解吗？这篇文章为你剖析 hook 对比 class component “反常” 的那些事儿。 可以注意到我们的 setInterval 是接受一个 dealy 值的, 并且这个值是可以由我们的代…"}, {"id": "6844903625521627150", "title": "Redux-源码解析", "desc": "整个redux的源码非常简单,所以解释很少,看代码就能看明白......"}, {"id": "6844903618982707214", "title": "创建组件再次新增清空状态", "desc": "最近在开发的时候总会遇到这样一个问题：一个列表组件中引入了一个新增组件，点击列表组件的新增按钮，弹出来新增窗口，新增结束之后再次新增，发现窗口还是填写了之前的内容。 为了形象地说明这个问题，举个例子吧，比如现在有一个需求：用一个列表来展示学生信息，并且可以新增学生信息。 可以看…"}, {"id": "6844903504784392205", "title": "谈谈前端通信", "desc": "前端开发者一般很少能从一个更高的角度来看待通信这件事情，希望本文可以引领大家深入探究一下通信，并找到解决前端通信问题的通用思路"}, {"id": "6844903597180715015", "title": "Redux 进阶 -- 编写和使用中间件", "desc": "在上一篇文章 Redux 进阶 -- 优雅的处理 async action 中，阿大通过改善流程对接完成了水果店的升级。 但是阿大又有一个新的想法，他想详细的看看每一个顾客的购买需求来了之后，账本的前后变化。看来又要加一个新角色记录员了。难道要像加采购员那样手动的一个个的加吗？…"}, {"id": "6844903800902254600", "title": "使用React构建精简版本掘金（二）", "desc": "即我上面红框圈住的部分，这部分由于要做页面滚动的时候常驻顶部，个人为了简单省事，采用了ant-design中的Affix组件，另外导航组件我抽离了一个公用组件，从外部传入tags数组。 该部分的实现方式可参考上面tag标签实现部分，基本类似。 头像部分我使用了ant-desig…"}, {"id": "6844903577974997006", "title": "Pinterest 开源其 React UI 组件：Gestalt", "desc": "Gestalt is a set of React UI components that enforces Pinterest’s design language. We use it to streamline communication between designers a"}, {"id": "6844904066892431373", "title": "React入门学习笔记1-在网站中添加React", "desc": "React从一开始就被设计为逐步采用，并且你可以根据需要选择性地使用React。 大多数网站不是、也不需要是单页应用程序，通过仅仅几行代码并且无需使用构建工具，先尝试在网站的一小部分中使用React，然后逐步扩展它的存在，或只将其涵盖在少数动态部件中。 1. 添加一个DOM容器…"}, {"id": "6844903576616042503", "title": "React服务端渲染改造框架(webpack3.11.0 + React16 + koa2)", "desc": "本地开发使用webpack-dev-server，实现热更新，基本流程跟之前react开发类似，仍是浏览器端渲染，因此在编写代码时要考虑到一套逻辑，两种渲染环境的问题。 当前端页面渲染完成后，其Router跳转将不会对服务端进行请求，从而减轻服务端压力，从而页面的进入方式也是两…"}, {"id": "6844903654730760205", "title": "React Native with MobX — 入门", "desc": "在这里，我们将结合MobX和React Native来创建一个简单的列表应用程序。 如果您正在寻找如何开始使用MobX和React Native，那么这应该是一个很好的选择。 想学习React Native？ 查看 React Native Training_._ 要查看最终仓…"}, {"id": "6844903615295913998", "title": "Uber 开源地理可视化工具 Ketoper.gl，加速数据处理", "desc": "Uber 开源其内部可视化工具包 ketoper.gl，这是一个基于 deck.gl 构建的 React 组件，高性能，用于大规模地理定位数据集的可视化探索。它对 GPU 功能的支持允许应用程序立即渲染数百万个数据点。 Uber 提到，为了可视化数据，无论使用哪种开发框架，开发…"}, {"id": "6844903574955098120", "title": "React框架实现移动页面翻译是一种什么体验？", "desc": "我要渲染的内容是一段段的html，用react渲染一段html内容是没有什么难度，使用dangerouslySetInnerHTML 即可。但是可以做到将内容中的英文单词翻译出来，是怎么实现的呢？一起来看一下吧。 事情是这样的... 仔细看，这个属性用的是{{ }}2个括号而不…"}, {"id": "6844903663400386573", "title": "如何编写你自己的 Virtual DOM（二) -- Props和事件", "desc": "很高兴我们可以继续分享编写虚拟DOM的知识。这次我们要讲解的是产品级的内容，其中包括：设置和DOM一致性、以及事件的处理。 在继续之前，我们需要弥补前一篇文章中没有详细讲解的内容。假设有一个没有任何属性（props）的节点： Babel，在处理这个节点的时候会把节点的props…"}, {"id": "7000312880004333575", "title": "使用React hook封装一个Tab切换的函数式组件", "desc": "本文通过react hook，完成一个高度封装的Tab组件，将tab所有相关的操作都进行封装，只留下一个tabSet配置接口。仅仅使用一行代码即可在页面显示Tab组件。"}, {"id": "7003341578009837576", "title": "React 使用 sass 全局变量 （避免重复导入.scss文件） ", "desc": "sass-resources-loader 官方解释： 这个加载器将  **@import** 您的SASS资源放入每个required SASS模块中。因此，您可以在所有SASS样式中使用共享变"}, {"id": "6844903859551207431", "title": "你不必使用Redux：比较prop钻取、Redux和React Context API", "desc": "React应用程序从根本上来说是一棵组件树，可以相互通信数据。在组件之间传递数据通常是无痛的。但是，随着应用程序树的增长，在保持可读代码库的同时传递数据变得更加困难。 这里有一个简单的树，有3个层次。在该树中，节点D和节点E都操纵一些类似的数据：假设用户输入节点D中的一些文本，…"}, {"id": "7003304346171473957", "title": "搭建一个React项目", "desc": "1.新建React项目，根据需要是否选用typescript 2.使用less 1.暴露webpack配置 2.修改webpack.config.js文件,在合适的位置添加以下代码 3.重新启动，测试"}, {"id": "6926143352211521543", "title": "React Fiber 架构简介 ——官方作者文章翻译", "desc": "React Fiber是React核心算法的重新实现，这篇文章阐述了React团队在过去两年中的重点研究。 React Fiber的目标是增强它在动画、渲染和执行上的性能。它首要的特性就是逐渐增强的渲染能力：它可以将渲染工作切割成不同的块并且散布在多个帧上。 其他的关键特性包括…"}, {"id": "6844904165026562056", "title": "【React】深入理解虚拟dom和diff算法", "desc": "在React中，Virtual Dom和diff的结合大大提高了渲染效率。diff算法由最初的O(n^3)复杂度变为了现在的O(n)，那么在这其中都做了哪些事情，本篇文章为你揭晓答案～ Virtual DOM是一种编程概念。在这个概念里，UI以一种理想化的，或者说“虚拟的”表现…"}, {"id": "6844903666906824718", "title": "Next.js 踩坑入门系列（一）— Hello Next.js!", "desc": "说实话，我个人还是觉得文笔越来越不错了，以前的文章都是一个问题闷到天黑，文章写的有点乱由于文章过于庞大导致不是一气呵成的，思路有时候会很混乱。所以我也准备开始写系列文，哈哈，尝试一下嘛~系列文的好处就是每次讲一个点，争取讲的细致一些，希望大家多多指教~ 笔者小白技术栈目前主要是…"}, {"id": "6879796850438717453", "title": "基于 React, 如何实现全局提示？", "desc": "在 Web 项目当中，一个全局的提示组件可能是一个普遍的需求。 当用户做了一些操作，提示组件可以给用户相应的提醒。比如在页面上，用户做了增删操作，需要提示增加/删除成功。 这样一来，只需要在需要提示的地方引入 message, 直接调用它的方法就可以弹出提示信息。 如上面的代码…"}, {"id": "6972381040753147911", "title": "react-router@5.x 嵌套路由鉴权", "desc": "<Route/> 组件渲染优先级 渲染方式有如下三种: render component children 三个属性同时存在 渲染结果 只有render和component 渲染结果 因此,渲染的优先"}, {"id": "6844903763589726222", "title": "一个零配置开箱即用的React/Vue应用自动化构建脚手架", "desc": "在前端技术的日益壮大下，从以前简单的几个文件到现在的一堆文件，各种扩展和工具植入到项目里，使得项目越来越庞大越来越难管理，前端项目也因此而趋于工程化和一体化。日新月异的前端技术已经让前端代码的业务逻辑和交互效果越来越复杂，项目会一直维护和迭代，令开发者更加不易于管理。模块化开发…"}, {"id": "6910823394120302600", "title": "一文掌握 react hook 使用和渲染优化（上篇）", "desc": "react hook其实就是使react函数组件可以使用state的一种方案，当然了不止可以简单的使用state，还提供了一些其他的hook, 这些方法就是 react hook。 除了准备上面代码文件外，还需要安装chrome插件 React Developer Tools …"}, {"id": "6990603677689970718", "title": "React 学习的10个疑问点", "desc": "哪个版本的 React 包含了 Hook？ 从 16.8.0 开始，React 在以下模块中包含了 React Hook 的稳定实现： React DOM React Native React DOM"}, {"id": "6896878775665950733", "title": "使用antd表格组件实现日程表", "desc": "20多天前，遇到一个日程表的业务需求，可以动态增加列、对单元格进行合并，结合公司的jsp项目的已有功能完成单元格的增、删、改操作。进行需求分析整理后，经过了一番查找，发现React版本的antd的表格组件功能很强大，可定制程度很高，可以助我完成这个业务需求的开发。 由于要和js…"}, {"id": "6844903941503729678", "title": "如何在 React 项目中整合 Eslint 和 Prettier", "desc": "当我们来到一个新的团队，或者接手一个新的项目时，一定会遇到代码规范的问题。随着前端应用越来越复杂，代码规范的问题也日益得到大家的重视。本文就带着大家来从 0 开始整合一个 React 前端应用的相关配置。 Eslint 是一个可以检验代码，并给出报告的工具。它的目标是保证代码的…"}, {"id": "6844903671461838862", "title": "Vue与React比较", "desc": "提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。 1. 运行时性能比较 React 和 Vue 都是非常快的，所以速度并不是在它们之中做选择的决定性因素。对于具体的数据…"}, {"id": "6844904202267787277", "title": "React Fiber原理解析", "desc": "React团队重写了React 的核心算法---reconciliation,一般将之前的算法叫stack reconciliation，现在的叫fiber reconciliation。 在React Fiber架构面世之后，引起了不小的轰动。React团队为什么要重写Rea…"}, {"id": "6844904158181474311", "title": "组件库实现按需引入的原理", "desc": "已经有好长时间不在掘金冒泡了，当然也是事出有因，3月份动了一次手术，请了3个月的病假。做完手术就一直躺着，因为伤到了脊柱，在支具的保护下4月低才开始站起来锻炼活动。 发生意外之前，在公司正着手准备做一个内部的ui库，于是就研究了一下一些开源的ui库的方案，这里做一个简单总结和分…"}, {"id": "6990356214823518239", "title": "React-条件渲染", "desc": "前言 对于展示也没来说，通常有好几种展示状态（以列表请求为例）： 当数据为空、接口报错、加载中、数据正常等状态，在渲染的时候需要正确判断并渲染对应的视图，也就是我们今天要讲的条件渲染。不同于 Vue "}, {"id": "6844903729460674567", "title": "在React项目中，如何优雅的优化长列表", "desc": "对于较长的列表，比如1000个数组的数据结构，如果想要同时渲染这1000个数据，生成相应的1000个原生dom，我们知道原生的dom元素是很复杂的，如果长列表通过生成如此多的dom元素来实现，很可能使网页失去响应。 首先我们尝试在React项目中，未做任何优化一次性渲染1000…"}, {"id": "6844903640939888653", "title": "Vue会了吗？来认识一下React吧(上)", "desc": "React作为Facebook 内部开发 Instagram 的项目中，是一个用来构建用户界面的优秀 JS 库，于 2013 年 5 月开源。作为前端的三大框架之一，React的应用可以说是非常的广泛，包括BAT在内的许多大公司很多项目都是基于其开发的。 Vue：除了VDom之…"}, {"id": "6895214607170797582", "title": "React的7种代码异味[译]", "desc": "在本文中，我想分享几个技巧，这些技巧将改善你的React代码。 如果需要把大量的 props 传递到一个组件中，那么很有可能 该组件可再进一步拆分。 问题来了，“大量” 具体是多少呢？答案是 看情况。 像函数一样，一个组件应该只做好一件事，所以考虑下 将组件拆分成多个小组件是否…"}, {"id": "6844904193044512782", "title": "从react hooks“闭包陷阱”切入，浅谈react hooks", "desc": "首先，本文并不会讲解 hooks 的基本用法， 本文从 一个hooks中 “奇怪”（其实符合逻辑） 的 “闭包陷阱” 的场景切入，试图讲清楚其背后的因果。同时，在许多 react hooks 奇技淫巧的文章里，也能看到 useRef 的身影，那么为什么使用 useRef 又能摆…"}, {"id": "6844903767167664135", "title": "全新体验的飞冰 2.0 正式发布", "desc": "距离飞冰正式开源到现在已经接近 10 个月了，在这段时间内，飞冰的用户数和项目数都在持续的增长，同时 github 上的仓库 star 数也悄然间突破 1w+，非常感谢所有使用飞冰以及对飞冰提出反馈建议的同学。同时，针对用户使用过程中的问题，根据优先级和内部规划，在这段时间内我…"}, {"id": "6995897410996158471", "title": "Redux-thunk、Axios", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战。 Redux-thunk介绍 redux-thunk 可以用来延迟action 的派发(dispatch), 这可以处理异步action的派"}, {"id": "6878124264923512839", "title": "React 架构的演变 - 从递归到循环", "desc": "这篇文章是 React 架构演变的第二篇，上一篇主要介绍了更新机制从同步修改为异步，这一篇重点介绍 Fiber 架构下通过循环遍历更新的过程，之所以要使用循环遍历的方式，是因为递归更新过程一旦开始就不能暂停，只能不断向下，直到递归结束或者出现异常。 React 15 的递归更新…"}, {"id": "6967630271881412638", "title": "手写React Fiber渲染逻辑 二", "desc": "用React fiber实现更新渲染逻辑，实现fiber的双缓冲机制，实现类组件、函数组件和Hooks"}, {"id": "6844903718345768973", "title": "react + node + express + ant + mongodb 的简洁兼时尚的博客网站", "desc": "此项目是用于构建博客网站的，由三部分组成，包含前台展示、管理后台和后端。 此项目是基于 react + node + express + ant + mongodb 的，项目已经开源，项目地址在 github 上，喜欢的，欢迎给个 star 。 1. 效果图 前台展示目前只支持…"}, {"id": "6981236856541151262", "title": "轻量且高性能的 React 状态管理库 Jotai", "desc": "Jotai 可以看作是 Recoil 的简化版，使用了 Atom + Hook + Context，用于解决 React 全局数据流管理的问题"}, {"id": "6981264690710052901", "title": "使用umijs开发移动端h5", "desc": "简介 由于最近业务原因，需要开发一些移动端h5页面。之前是使用vue技术栈开发，这里因为一些原因需要使用react技术栈开发，在后台系统方面这里选择的是umijs作为开发框架。所以在h5开发的也选用u"}, {"id": "6845166891682512909", "title": "手写一个Redux，深入理解其原理", "desc": "Redux可是一个大名鼎鼎的库，很多地方都在用，我也用了几年了，今天这篇文章就是自己来实现一个Redux，以便于深入理解他的原理。我们还是老套路，从基本的用法入手，然后自己实现一个Redux来替代源码的NPM包，但是功能保持不变。本文只会实现Redux的核心库，跟其他库的配合使…"}, {"id": "6986261889412136991", "title": "React 状态管理方案对比：Recoil Redux useContext", "desc": "状态管理是前端开发者绕不开的问题，为了解决这个问题，出现了一些优秀的状态管理方案，Redux、Recoil、还有 React 自带的useContext+useReducer，可选的方案太多，以至于会"}, {"id": "6844903988794671117", "title": "由浅到深的React合成事件", "desc": "最近在做一个功能，然后不小心踩到了 React 合成事件 的坑，好奇心的驱使，去看了 React 官网合成事件 的解释，这不看不知道，一看吓一跳... 需要做一个弹窗打开/关闭 的功能，当点击 button 的时候打开，此时打开的情况下，点击弹窗 区域 外，就需要关闭。 很简单…"}, {"id": "6975054217413132325", "title": "Angular 和 React 背后的秘密(上)", "desc": "今天我们不会讨论 Angular 和 React 谁是老大问题，而是讨论在 React 和 Angular 框架中使用到共同点。"}, {"id": "6909986037871673358", "title": "搭建 Next.js + TS + Antd + Redux + Storybook 企业级项目脚手架", "desc": "之所以有该项目呢，是因为日常可能自己需要练手其他 Next.js 项目，又不想每次都重新配置一遍，但基于强迫症正常企业级项目该有的配置觉得不能少了，于是就想开搞一个通用脚手架模板。 说起 Next.js，8 月份写了一篇文章手把手带你入门 NextJs（v9.5），主要是因为网…"}, {"id": "7005092636881076237", "title": "前端实习面试准备--React组件通信", "desc": "父子组件的通信方式？ 跨级组件的通信方式？ 父组件向子组件的子组件通信，向更深层子组件通信： 使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加"}, {"id": "6844903908372905998", "title": "可靠React组件设计的7个准则之SRP", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我不得不进行了分割，本篇文章重点阐述 SRP，即单一职责原则。 我喜欢React组件式开发方式。你可以将复杂的用户界面分割为一个个组件，利用…"}, {"id": "6986816997329731614", "title": "React大型项目状态管理库如何选型？", "desc": "React状态管理库对比，在React大型项目中如何选择状态管理库？本人就使用层面对redux、recoil、zustand、rematch、concent等状态管理库进行了使用分析。"}, {"id": "6904795653243994125", "title": "教你使用Dumi和father-build快速搭建React组件库", "desc": "1. 背景 目前我所在业务组是负责后台管理系统，但是对于使用的组件并没有引入第三方库，全有开发人员自己编写。但是对于Common Project还是处于拷贝的方式。然后萌生了对公共组件库进行管理的想法。这个方式有什么好处呢？ 能够沉淀组内组件，避免重复造轮子的缺陷。 统一维护组…"}, {"id": "6928922445311115278", "title": "“动态换肤” 踩坑记录｜牛气冲天新年征文", "desc": "随着业务的发展，客户的需求也会变得更加多样化，产品后期就需要有自定义界面的能力，于是出现了“动态换肤”的需求。 但是切换主题的方式，经验证并不能很完美的适用于我们微前端项目。 我在接到需求后，经过和公司架构师及其他同事的探讨后，渐渐产出了以下几种方案，一步步踩坑过来。 两种模式…"}, {"id": "6989298558453153823", "title": "React自定义组件应用(父子之间传递数据)", "desc": "React自定义组件应用 通过todos案例来掩饰子向父传递数据和父向子传递数据的方式 1. 拆分组件 2. 静态实现 3. 动态渲染 4. 交互"}, {"id": "6844903570882428935", "title": "React-Native从零搭建App（长文）", "desc": "本文适合有对React家族有一定使用经验，但对从零配置一个App不是很熟悉，又想要从零体验一把搭建App的同学。 我自己就是这种情况，中途参与到项目中，一直没有掌控全局的感觉，所以这次趁着项目重构的机会，自己也跟着从零配置了一遍，并记录了下来，希望能跟同学们一起学习，如果有说错…"}, {"id": "6844903993223839751", "title": "14 个拷贝数组的 JS 技巧", "desc": "为了保证的可读性，本文采用意译而非直译。 数组拷贝经常被误解，但这并不是因为拷贝过程本身，而是因为缺乏对 JS 如何处理数组及其元素的理解。JS 中的数组是可变的，这说明在创建数组之后还可以修改数组的内容。 这意味着要拷贝一个数组，咱们不能简单地将旧数组分配给一个新变量，它也是…"}, {"id": "6991816609174126605", "title": "React入门二：React脚手架的使用 ｜ 8月更文挑战", "desc": "1. React脚手架的意义 脚手架是开发现代Web应用的必备 充分利用Webpack、Babel、Eslint等工具辅助项目开发 零配置，无需手动配置繁琐的工具即可使用 关注业务，而不是工具配置 2"}, {"id": "7002806316058034213", "title": "初入江湖之React四问", "desc": "1. 请简述 React 16 版本中初始渲染的流程 2. 为什么 React 16 版本中 render 阶段放弃了使用递归 3. 请简述 React 16 版本中 commit 阶段的三个子阶段"}, {"id": "6883671829395800072", "title": "React Ref 其实是这样的", "desc": "大家好，我是Mokou，好久没有冒泡了，最近一直在看研究算法和数据结构方面的东西，但是似乎很多前端不喜欢看这种东西，而且目前本人算法方面也很挫，就不献丑了。 当然了，最近也开始研究React了，这篇文章主要是讲述 Ref 相关的内容，如有错误请指正。 在典型的 React 数据…"}, {"id": "6955664681306423327", "title": "从0到1搭建TS+React环境", "desc": "前言 现在写这篇文章的时候，React的版本已经是17.x，Typescript也已经是4.x，webpack也已经到了5.x。而我们组的业务一直都很忙，所以我们的项目模版还是React16.x（不支"}, {"id": "6929196664716525576", "title": "手把手教你使用Redux，猩猩都能看懂的教程", "desc": "那么二者到底是什么关系呢？我们知道，虽然React实际上只是一个UI框架（甚至算不上一个框架，只是一个库），不过它渲染ui的方法很别致，通过jsx生成动态vdom渲染UI，这与传统方式大相径庭，它没有架构、没有模板、没有路由、没有设计模式、也没有数据管理，也就是说，React除…"}, {"id": "6956502097382604813", "title": "react+tsx+better-scroll使用", "desc": "使用react+tsx将better-scroll封装成组件的实践，以及分析为什么better-scroll为什么无法滚动。"}, {"id": "6970715569758666782", "title": "React学习第二天---Virtual DOM 及 Diff 算法（什么是VirtualDOM）（一）", "desc": "前提： 接下来的学习目标是为了写一个toy-react 我们将会了解什么是Virtual DOM Virtual DOM是如何提升操作DOM性能的 如何创建Virtual DOM对象，如何将Virtu"}, {"id": "6974970304187629599", "title": "巧用 hook 解决完业务组件带来的隐藏问题", "desc": "背景 模糊搜索组件（后面称 ES 组件）是整个团队一个十分常用的业务组件。然而，就算我们已经对这个业务组件做了尽可能完善的封装，却还是在组件繁多的回调以及复杂的业务要求中重复踩了很多的坑。"}, {"id": "6981255192662507556", "title": "新的轮子， React 拖拽排序", "desc": "React-Dnd 官网就有一个不错的例子，如果不纠结的话，应该够用。如果你也有其他方面的需求，不妨看看下面几个功能： 1. 支持嵌套     拖拽嵌套应该是一个很常见的功能，而且拖拽应该是可以跨层拖"}, {"id": "6883811396274880526", "title": "【重构】使用 Hooks 让代码更易于变更", "desc": "重构过程中，肯定会遇到新的代码如何做技术选型的问题，要考虑到这套技术的生命力，也就是他是否是更新的技术，还有他的灵活和拓展性，期望能够达到在未来至少 3 年内不需要做大的技术栈升级。我的这次重构经历是把 jQuery 的代码变为 React ，你品品，算是最难，劳动最密集的重构…"}, {"id": "6844903942522929160", "title": "React 中的状态自动保存（KeepAlive）", "desc": "图文无关什么是状态保存？假设有下述场景：移动端中，用户访问了一个列表页，上拉浏览列表页的过程中，随着滚动高度逐渐增加，数据也将采用触底分页加载的形式逐步增加，列表页浏览到某个位置，用户看到了感兴趣的项"}, {"id": "6989524989074472968", "title": "react native 实现灵活的滑块组件", "desc": "react native 实现灵活的滑块组件 实现效果： 组件结构： 滑块底部组件： PanResponder： LinearGradient: 滑块按钮组件： PanResponder: 滑块加减组"}, {"id": "6959899033158549534", "title": "前端异常处理", "desc": "记一次寻找bug的过程.... 忙了一整天，bug都解决的差不多了。看看时间，已经是下午五点半了，寻思还有半个小时做点什么？ 突然想起前两天接到的任务：要求优化前端报错异常捕获。 刚接到这个任务，大脑"}, {"id": "6844903969349697549", "title": "[译] 为什么 React Suspense 将会逆转 Web 应用开发的游戏规则 ？", "desc": "在本篇文章中，我不想太深入解释有关 React Suspense 的实现细节和它内部的工作原理，因为已经有很多优秀的博客文章、视频和讨论做过这些事情了。相反，我更愿意把重点放在 Suspense 将会如何影响在应用开发时我们对加载状态和架构应用的思考。 鉴于有些人可能没有听说过…"}, {"id": "6922684424488222727", "title": "歪门邪道性能优化：魔改三方库源码，性能提高几十倍！", "desc": "本文会分享一个React性能优化的故事，这也是我在工作中真实遇到的故事，最终我们是通过魔改第三方库源码将它性能提高了几十倍。这个第三方库也是很有名的，在GitHub上有4.5k star，这就是：react-big-calendar。 这个工作不是我一个人做的，而是我们团队几个…"}, {"id": "6844904109691109390", "title": "8个问题带你进阶 React", "desc": "高阶组件(HOC) , render props 以及 hook 的对比和用处. 如果以上的问题你都懂的话, 那么你可以关闭这个网页了. 一. 高阶组件(HOC) , render props 以及 hook 的对比和用处. 二. 虚拟 DOM 是什么? 在 React 中, …"}, {"id": "6997581983098339342", "title": "ahooks 源码解读系列 - 4", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6993353424079323149", "title": "React 最佳实践：集成第三方库（D3.js）", "desc": "React 提供了声明式方式，让我们可以更方便清晰的描述 UI ，但是，对于需要依赖真实 DOM 节点的第三方 js 库，例如 D3.js，我们又该怎么在 React 组件中使用呢？"}, {"id": "6844903639119577095", "title": "于是，我们给前端分享会定义了一个未定义的名字", "desc": "我个人私底下是挺喜欢和其他同学扯些和技术有关的话题的，相信和我类似的开发小伙伴们也一定不少。不过在个人有限的经历里，和一对一交（chui）流（bi）时的谈笑风生比起来，很多公司在小组和部门层面的分享相对就会平淡一些了。当然这完全是可以理解的：诸如业务繁忙程度、技术栈迭代速度、团…"}, {"id": "6844903629917257742", "title": "自己动手实现一个前端路由", "desc": "最近工作比较忙，写的比较慢，当我写完这一篇准备发布的时候，发现掘金刚好也有一篇关于前端路由的，而且写的比我详细，不过辛辛苦苦写的总不能删掉吧，再说我的路由风格是纯个人思路实现的，所以还是硬着头皮发了哈。 如果还不了解, 那么请跟我一起来手写一个简单的前端路由, 顺便了解一下. …"}, {"id": "6844903510648045581", "title": "深入React的生命周期(下)：更新(Update)", "desc": "本文是对开源图书React In-depth: An exploration of UI development的归纳和增强。同时也融入了自己在开发中的一些心得。 你或许会问，阅读完这篇文章之后，对工作中开发React相关的项目有帮助吗？实话实说帮助不会太大。这篇文章不会教你使…"}, {"id": "6844903673810649095", "title": "如何打造一款静态开源站点搭建工具", "desc": "诸如github pages的静态托管服务的兴起，静态生成+托管对托管环境要求低、维护简单、可配合版本控制，但又灵活多变，这一系列的优点，使得静态站点生成器在近年有了极大的发展，涌现出一系列优秀的静态站点生成器。 笔者负责整个部门的开源站点搭建，要想提高开发效率，没有一个称手的…"}, {"id": "6924972448777502727", "title": "React 基础入门指南教程 - 翻译 react-book - 第一章 - 基础", "desc": "什么是JSX： JSX 是你在 React 中一直使用的东西，后面让我们解释一下它是什么。 为什么使用它： 你可以选择不使用JSX，但几乎没有人这样做，它确实让你的编程更简单。 JSX 就是很像你在 JavaScript 中写 XML. 这是一个预处理器步骤. 你不必拥有它，但…"}, {"id": "6844903849925443591", "title": "【译】在 React 组件中使用 Refs 指南", "desc": "使用 React 时，我们的默认思维方式应该是 不会强制修改 DOM ，而是通过传入 props 重新渲染组件。但是，有些情况却无法避免修改 DOM 。 React 中的 Refs 提供了一种访问 render() 方法中创建的 React 元素（或 DOM 节点）的方法。 当…"}, {"id": "6844903649504657421", "title": "Git Worktree：解决分支依赖冲突的问题", "desc": "将一个项目不同平台的版本放在 git 仓库的不同分支，是一种常见的做法。比如我最近在考虑开发 Gitview （项目链接 ）的小程序版，计划将原先 React Native 版的代码放到名为 react-native 的分支，小程序版在一个新的名为 weixin 的分支中开发，…"}, {"id": "6844903896398168077", "title": "到底怎么用React的Provider", "desc": "不想看吐槽的，可以直接略过，查看正题。 问题不是存取状态的方式，而是把3面3种方法用了一个遍。嗯，我承认，我佛了。整体项目代码中充斥着这样的代码，据说这项目还是阿里开源的，我佛气！贴个图，口说无凭 getParams 是什么？ 从URL中获取对应参数的值，你没猜错，如果要加一个…"}, {"id": "6844903741674651661", "title": "React生命周期以及注意事项", "desc": "组件的生命主要包括3个阶段： 挂载、更新、卸载，React 16开始还添加了错误处理。 而constructor()用来做一些组件的初始化工作，如定义this.state的初始内容。 在组件挂载到DOM前调用，且只会被调用一次，在这边调用this.setState不会引起组件重…"}, {"id": "6844903811140550663", "title": "react服务端渲染框架Next.js踩坑（二）", "desc": "为了更方便的处理我们的样式，我们选择使用less来处理样式，并使用css modules。css modules很容易学，因为它的规则少，同时又非常有用，可以保证某个组件的样式，不会影响到其他组件。 安装less npm install less @zeit/next-less…"}, {"id": "6900845755914567687", "title": "React Hooks实现自定义表格列", "desc": "在ant design的Table组件基础之上利用react-dnd实现表格列的拖拽排序、并自定义列的显示隐藏。 比如在不同场景下，显示的表格列名不同，展示方式不同，这时外部组件传入的columns可能会发生变化，无法完全交由CustomColumnTable组件控制。此时外部…"}, {"id": "6844903911543816199", "title": "React Hooks会取代Redux吗？", "desc": "自从 React 引入了 Hooks API 以来，关于 React Hooks 是否会取代 Redux 的讨论也越来越多了。本文作者认为 React Hooks 不能取代 Redux，并阐述了该观点的理由。"}, {"id": "6844903878119424008", "title": "React中的单元测试", "desc": "单元测试通过对最小的可测试单元（通常为单个函数或小组）进行测试和验证，来保证代码的健壮性。 单元测试是开发者的第一道防线。单元测试不仅能强迫开发人员理解我们的代码，也能帮助我们记录和调试代码。好的单元测试用例甚至可以充当开发文档供开发者阅读。 单元测试框架中最重要的部分就是将测…"}, {"id": "6847902218696261639", "title": "边学边写nextjs", "desc": "这是一周后的一个感想。这是没有用next之前的页面，http://www.uquwang.net:7890/，这是用next改版后的页面http://www.uquwang.net。大家可以感受一下，那速度简直不是之前能比的，像坐了火箭一样，感动到哭。说到底服务端渲染还是牛逼啊…"}, {"id": "6854573218649505806", "title": "React项目中webpack加载svg", "desc": "一webpack配置安装loaderwebpack.config.js文件配置二Icon组件三使用"}, {"id": "6844903763266764814", "title": "个人React / Koa 项目上线——健身笔记", "desc": "FitNote的诞生是为了更好地记录在力量训练中负重的变化情况，也可以说是力量训练笔记本。 暂时暂未开放注册，有需要可以留言给你开通账号。 前端基于React.js 16.0 +并采用material-ui前端UI框架。 目前项目不复杂，并未使用Redux等状态管理工具。 Re…"}, {"id": "6989941495654514718", "title": "React的props属性检查", "desc": "```javascript import React, {Component} from 'react'; import {View} from \"react-native\"; import {UIT"}, {"id": "6981430591027675144", "title": "简单介绍 react hook", "desc": "Hook 是什么？ 官网一句话介绍：Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React"}, {"id": "6844903589182177288", "title": "react-redux 进阶", "desc": "Action 是把数据从应用（服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。分下边两类. 是一个纯函数，接收旧的 stat…"}, {"id": "6867320463098380295", "title": "JELLY3.0 - 全栈开发的那些事", "desc": "体验：页面整体交互视觉落后、交互体验繁杂。 外网化：需要同时支持内外网用户访问。 稳定性：当前底层技术架构难以满足将来的业务发展。 前端 MVVM 框架采用的是 Nerv，Nerv 是由 JDC·凹凸实验室 打造的类 React 前端框架。目前已广泛运用在京东商城核心业务及 T…"}, {"id": "6844903712616349703", "title": "写给前端开发者不一样的VSCode配置(JS/React)", "desc": "相信越来越多的前端开发者已经迁移到VSCode阵营了，这里不对各大编辑器作比较。因为我怕杠不过各位。^_^ ··· VSCode快速，稳定而且能完美支持TS。 我对开箱即用的编辑器一直存在着好感，但是他们都或多或少的缺少点什么，但是广大的同胞打造的扩展(extensions)完…"}, {"id": "6844904024680955912", "title": "每个开发人员都应该掌握的 11 个控制台命令", "desc": "命令行使我们的生活变得更加轻松，因为我们可以自动化一些常见的任务来提高我们的效率。我们只需要执行一些命令而不需要单击图形用户界面（GUI）就可以把我们想做的事情完成。 Unix shell是命令行解释器或shell，可为类似Unix的操作系统提供命令行用户界面。shell既是交…"}, {"id": "6844903622329761799", "title": "一套比较完整的前端技术选型，需要规整哪些东西，你知道不？", "desc": "1. 背景及现状 随着前端开发复杂度的日益增加，各种优秀的组件框架也遍地开花。同时，我们面临业务规模的快速发展和工程师团队的不断扩张，如何解决资源整合、模块开发、项目部署、性能优化等问题势在必行。 2. 目标 根据背景和现状的分析，我们现制订一个规范化的前端工作流，很好地规范统…"}, {"id": "6980121033072181279", "title": "当React遇到树形穿梭框咋办？", "desc": "本篇文章其实是上篇文章React 5种高级组件模式结合 实际业务需求和同伴们使用需求 所完成的实践篇。本片文章我想阐述的观点是：招无定式,水无常形 上篇文章只是讲述了设计组件时的一些设计模式，设计原理"}, {"id": "6844903693674872840", "title": "前端骨架屏方案小结", "desc": "最近在项目不时有用到骨架屏的需求,所以抽时间对骨架屏的方案作了一下调研,骨架屏的实践已经有很多了,也有很多人对自己的方案作了介绍.在这里按照个人的理解做了一个汇总和分类,分享给大家. 骨架屏就是在页面数据尚未加载前先给用户展示出页面的大致结构，直到请求数据返回后再渲染页面，补充…"}, {"id": "6844903814349193229", "title": "React Hooks 使用详解", "desc": "本文对 16.8 版本之后 React 发布的新特性 Hooks 进行了详细讲解，并对一些常用的 Hooks 进行代码演示，希望可以对需要的朋友提供些帮助。 Hooks 是 React v16.7.0-alpha 中加入的新特性。它可以让你在 class 以外使用 state …"}, {"id": "6995385715672481799", "title": "web如何检测版本更新（一）", "desc": "前言 近期发现每次在大版本上线时，总是要人工在群里或者各渠道通知用户手动刷新页面清理浏览器缓存。用户基数不大的情况下可控。一旦后期用户基数成倍增长后，要通知到每个用户就不是那么容易了。因此新版本上线后"}, {"id": "6943397563114455048", "title": "聊聊 useSWR，为开发提效 - 包括 useSWR 设计思想、优缺点和最佳实践", "desc": "在介绍 useSWR 之前，我们先看一个最简单的带有数据请求的 React 组件。 如果经常写这样的代码，那么肯定会想到自己封装一个 React Hook，该 Hook 以请求函数作为参数。 我们再看看调用方代码，加深对 useFetch 的理解。 如 useFetch 所示，…"}, {"id": "6987227617350909960", "title": "hooks 系列二：useState", "desc": "useState() 用于为函数组件引入状态。纯函数不能有状态，所以使用钩子来引入状态。 简单来讲，useState 就是为函数组件提供了 React state 的功能，现在就可以称为函"}, {"id": "6844904080758800392", "title": "React Hooks源码解析，原来这么简单～", "desc": "从React Hooks发布以来，整个社区都以积极的态度去拥抱它、学习它。期间也涌现了很多关于React Hooks 源码解析的文章。本文（基于v16.8.6）就以笔者自己的角度来写一篇属于自己的文章吧。希望可以深入浅出、图文并茂的帮助大家对React Hooks的实现原理进行…"}, {"id": "6990286697250422815", "title": "汉得开源组件库Choerodon UI 发布1.4.2：稳定支持企业级产品", "desc": "汉得开源组件库Choerodon UI（缩写 C7N UI），拥有开箱即用的高质量 React 组件， 适用于 React 框架项目，符合低代码理念，专为中后台企业项目提高开发效率而生。"}, {"id": "6979463931865595912", "title": "简述React全家桶，Dva，Umi的理解", "desc": "React，Dva，Umi关系简述............................................"}, {"id": "6844903665833099271", "title": "阿里巴巴图表库 Bizcharts 正式开源", "desc": "阿里巴巴于去年开放了它的内部图表库 Bizcharts 初版，在这一年的时间里，Bizcharts 新增了许多特性，并对渲染细节及渲染性能进行大幅度的调优。 目前阿里基本上绝大部分业务的前端用的都是 React 技术栈，而在业务场景中又经常会有图表绘制的需求，所以一个 基于 R…"}, {"id": "6844903647852101639", "title": "再见JQuery，我的老朋友", "desc": "2018年7月25日，Mislav Marohnić发了一条推文，宣布GitHub.com前端已经彻底删除了jQuery（下图）。而且，还自问自答地解释（低调炫耀），删除jQuery之后也没用其他框架，而是全部依赖原生API。 很多人不知道，我和jQuery颇有渊源。大概11年…"}, {"id": "6985053168413442078", "title": "带你徒手用React撸一个日程组件", "desc": "业务背景 先简单描述一下业务场景吧, 就是会调用用户在企业微信或者钉钉这类办公软件里面的日程信息, 在web端给安排日程的展示, 如果日程冲突, 就会展示冲突那天的日程, 让安排人员合理安排时间日程."}, {"id": "6950248553549660191", "title": "深入浅出解析React Router 源码", "desc": "最近组里有同学做了 React Router 源码相关的分享，我感觉这是个不错的选题， React Router 源码简练好读，是个切入前端路由原理的好角度。在分享学习的过程中，自己对前端路由也产生了"}, {"id": "6994677397660368926", "title": "【译文】React 18 简介", "desc": "React 18目前已经在alpha版本阶段，预计今年末会有正式大版本发布，还没学习的小伙伴赶紧点进来看看，来了解concurrent mode、transition以及一些有用的新特性吧！"}, {"id": "6951206227418284063", "title": "React 为什么使用 Lane 技术方案", "desc": "React 为什么使用 Lane 模型替代 ExpirationTime 模型？本文将从 ExpirationTime 存在的问题入手，再加上 Demo 的演示和分析，给出答案。"}, {"id": "6986789427020300324", "title": "react-redux、分模块modules、模拟登录退出流程", "desc": "一、redux的介绍 Redux是JavaScript状态容器, 提供可与策划的状态管理。相当于vue的vuex， 可以跨组件、跨页面推送数据。应用场景如：购物车、会员登录等功能模块。 Redux由F"}, {"id": "6914994241940750343", "title": "如何开发一个 Antd 级联多选控件", "desc": "这篇文章将从零开始介绍如何开发一个 Antd 的级联多选选择器。先看效果： Ant Design 是阿里开源的，“The world's second most popular React UI framework“，不用多介绍，任何使用 React 开发管理后台的前端同学肯定…"}, {"id": "6844903502125203464", "title": "React特性精华", "desc": "目录内容1.JSX语法JSX语法的解析规则是：遇到XML标签<...>，以XML规则解析；遇到代码块{...}，就用JavaScript规则解析；我认为，在JSX中，XML可以理解为是创建虚拟DOM对"}, {"id": "6904514344281866253", "title": "Hook的那些事", "desc": "React16.8发布以来，Hook深入人心，给react开发者带来更多讨论和追捧。社区内从科普Hook Api怎么使用，到讨论出现Hook的动机是什么，到Hook日常使用需要注意坑点，甚至进行横向比较，与class Component比较，是否可替代redux，随着Hook实…"}, {"id": "6844903907076866056", "title": "React Hooks的实现原理和最佳实践", "desc": "React的组件化给前端开发带来了前所未有的体验，我们可以像玩乐高玩具一样将一个组件堆积拼接起来，就组成了一个完整的UI界面，在加快了开发速度的同时又提高了代码的可维护性。但是随着业务功能复杂度提高，业务代码不得不和生命周期函数糅合到一起。这样很多重复的业务逻辑代码很难被抽离出…"}, {"id": "6844903687157088269", "title": "redux-saga源码解析", "desc": "Redux-saga是redux应用的又一个副作用模型。可以用来替换redux-thunk中间件。 redux-saga 抽象出 Effect （影响, 例如等待action、发出action、fetch数据等等），便于组合与测试。 原本redux中action只能是 plai…"}, {"id": "6844903709906829319", "title": " [译] React Hook 介绍 — React 系列教程 Part 1", "desc": "Hook 是一项新的功能提案，可以让你在不编写类的情况下使用状态（state）和其他 React 功能。它们目前处于 React v16.7.0-alpha 阶段，并且在开放式 RFC 中进行着讨论。 这个 useState 新功能将是我们学习的第一个“钩子”，但这个例子仅仅是…"}, {"id": "6844903597994409998", "title": "前面有一个Redux，我们去撩(聊)一下它。", "desc": "管理整个前端项目(单页应用)所有的状态数据，统一把整个应用的状态存到一个地方(store)，保存成一个状态树，修改数据需要派发(dispatch)一个动作(action)通知store修改。组件通过订阅(subscribe)修改事件，获取最新数据来修改自身状态。 整个应用的st…"}, {"id": "6844903541723627533", "title": "React全家桶构建一款Web音乐App实战（四）：专辑页开发及其动画实现", "desc": "上一节开发了推荐页面，这一节实现专辑页面开发、进入动画和图片拉伸动画。话不多说，先看效果图 打开chrome浏览器，地址栏输入QQ音乐官网：https://y.qq.com。打开后点击专辑 这个时候回弹出一个新的窗口，直接关闭它。回到刚才的开发者工具，可以看到有一个请求，这个请…"}, {"id": "6844903519137300488", "title": "React Native 截屏组件", "desc": "截取当前屏幕，跟系统自带的截图一致，只会截取当前屏幕显示的页面内容。如果是ScrollView，那么未显示的部分是不会被截取的。 指定需要截取的组件的ref名称，然后将该ref名称传递给snapshot方法来截取指定组件的内容。如需要截取ScrollView，只需要将”full…"}, {"id": "6844903607532257294", "title": "webpack（2）——配置项详解", "desc": "... 1. mode mode 配置项是 webpack4 新增的配置项，这个配置项是必须的。 当人对于初学者来说，对于 webpack 的优化还有一段距离，首先我们大体了解一下即可。 它还有很多其他的优化默认值，但是效果可能并不美好，因为它针对的某些特定的大型项目，而我们只…"}, {"id": "6901855074536914951", "title": "React 下的同构渲染", "desc": "昨天发布了如何手动实现一个自己的服务端渲染ReacSSR。React的客户端渲染CSR，大家都比较熟悉，我就言简意赅地介绍下。#Client下的webpack配置在当前项目的目录下创建一个webpac"}, {"id": "6844903949250609160", "title": "react 源码解读3 react-dom", "desc": "记录整个应用更新过程当中的应用信息。eg:各种不同类型的expiriationTime,异步调度过程当中的callback 记录节点的各种状态，例如Class Component里的props、state都是记录在fiber对象上的，在fiber更新之后才会更新到Class C…"}, {"id": "6916749313666187278", "title": "实现一个简单的react框架 -- (Fiber架构)", "desc": "本文将从头开始编写一个简单的类 react 框架。用于理解 fiber 原理和 hooks 的实现，轻松地深入React代码库。 我们从编写createElement开始，这个函数主要用于把JSX转换成虚拟DOM（js对象）。这里我们使用@babel/plugin-transf…"}, {"id": "6844904110446084109", "title": "基于react的前后端渲染实例讲解", "desc": "前端技术发展至今，开发者关注的焦点已经从功能和页面呈现效果的实现转变为对用户体验的极致追求。在最近几年间，后端（服务器端，通常指的是node）渲染的概念在业界广泛铺开。后端渲染打破了传统web页面等待服务器返回js文件，client再加载执行的工作流，由服务器直接返回渲染好部分…"}, {"id": "6945425120869482510", "title": "【重识前端】React源码阅读（一）什么是jsx", "desc": "重识前端断断续续也写了大半年了。里面基本上都是个人技术栈的积累，以及面试题的回答。感兴趣的伙伴可以点到我的主页去看。 说说今天的主角-React吧。React的源码之前一直想要去阅读学习的，也确确实实在看了，但是经常看着看着就发困。然后就开始偷懒，从一些周边的开始阅读，比如Re…"}, {"id": "6844903923770195982", "title": "React 现代化测试", "desc": "测试用例的书写是一个风险驱动的行为, 每当收到 Bug 报告时, 先写一个单元测试来暴露这个 Bug, 在日后的代码提交中, 若该测试用例是通过的, 开发者就能更为自信地确保程序不会再次出现此 bug。 前端测试中有两种模型, 金字塔模型与奖杯模型。 金字塔模型自下而上分为单元…"}, {"id": "6957924150367223822", "title": "Hooks中的useEffect", "desc": "useEffect 副作用 ：对环境的改变即为副作用，如修改document.title,useEffect是在render后运行。 用途 ： 作为componentDidMount使用,[ ]作为第"}, {"id": "6844903859052085255", "title": "[译] 如何用 React Hooks 打造一个不到 100 行代码的异步表单校验库", "desc": "表单校验是一件很棘手的事情。深入了解表单的实现之后，你会发现有大量的边界场景要处理。幸运的是，市面上有很多表单校验库，它们提供了必要的表计量（译注：如 dirty、invalid、inItialized、pristine 等等）和处理函数，来让我们实现一个健壮的表单。但我要使用…"}, {"id": "6844903892396834829", "title": "React 设计哲学", "desc": "找到根据这个 state 进行渲染的所有组件。 找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。 该共同所有者组件或者比它层级更高的组件应该拥有该 state。 如果你找不到一个合适的位置来存放该 state，就可以直接创…"}, {"id": "6844903773433921549", "title": "从 0 打造一个 React 的 TS 模板", "desc": "最近导师安排了一个任务，将一个已配置好的React、Webpack4等具有市场上常见功能的模板添加上TypeScript。俗话说：环境配置三小时，Coding不足5分钟。配置环境真的非常浪费时间，因此写个文章记录下，希望能对各位要配置TS的前端们有所帮助。 运行 yarn 或者…"}, {"id": "6844903609109315598", "title": "开源一个ReactNative日历控件", "desc": "一般的甲方都会在一个页面上拖动拖动, 看到一个日历, 就想滑动切换上下周, 由于react-native-calendar-strip没有滑动特性, 并且在这个issue上讨论了好久, 并没有可行的方案. 于是就萌发自己写一个日历插件的冲动. 要开发一个日历控件, 最大的问题就…"}, {"id": "6844903606437543950", "title": "React与Redux整合技术简介", "desc": "1. React中引入react-redux 当然不引用也完全可以（Redux包是必须要引用的），只不过会增加一些开发量，还会带来一些额外的性能开销。 2. 展示组件与容器组件 Redux的React绑定库的基本开发思想是展示组件与容器组件相分离。展示组件只负责页面呈现，不处理…"}, {"id": "6921538824510275597", "title": "写过的一些Hook ", "desc": "在不需要利用state保存数据的场景(如一次性提交的非受控表单)，可以封装一个ref hook。 ..."}, {"id": "6844903729498423303", "title": "ReactNative集成到原生项目", "desc": "如果你的应用会运行在 Android 6.0（API level 23）或更高版本，请确保你在开发版本中有打开悬浮窗(overlay)权限。你可以在代码中使用Settings.canDrawOverlays(this);来检查。之所以需要这一权限，是因为我们会把开发中的报错显示…"}, {"id": "6916754824918728718", "title": "【React学习笔记】puComponent&ref等API ", "desc": "React中key的设置与Vue中相似，因为虚拟DOM的原因，在列表顺序可能改变的情况下，最好用每一项唯一的id作为key。 简单来说，PureComponent 提供了一个具有浅比较的 shouldComponentUpdate 方法,其他和 Component 完全一致。 …"}, {"id": "6844903647709495310", "title": "react源码解析之stack reconciler", "desc": "关于源码解读的系列文章，可以关注我的github的这个仓库, 现在才刚刚写，后续有空就写点。争取把react源码剖析透学习透。有不正确的地方希望大家帮忙指正。大家互相学习，共同进步。 这个章节是stack reconciler的一些实现说明. 它的技术性很强并假定你能完全理解R…"}, {"id": "6844903920683188232", "title": "react技术栈实践", "desc": "最近开发一个全新AB测试平台，思考了下正好可以使用react技术开发。 首先遇到一个概念，redux。这货还真不好理解，大体的理解：Store包含所有数据，视图触发一个Action，Store收到Action后，返回一个新的 State，这样视图就发生变化，State计算过程叫…"}, {"id": "6844903512741019661", "title": "内存管理速成手册", "desc": "这是翻译的内存管理系列的第一篇文章。 更多文章请关注：https://github.com/Jocs/jocs.github.io"}, {"id": "6844903647260868622", "title": "React从零实现-组件渲染和setState", "desc": "在react中组件大体分为两种，一种是一个纯函数，没有生命周期的。另一个通过继承自React.Component的类来实现。 我们先来写一个Component类。 我们完成了一个Component类，同时该类的实例有一个setState函数，用来更新该组件。updateComp…"}, {"id": "6914501873076535304", "title": "[译]【React】Webpack入门 以及 css模块化", "desc": "这是讲CSS模块化系列文章的最后一篇，我将探索如何通过Webpack来建一个静态的React网站。这个静态网站将包含模板：一个主页和一个包含几个React组件的页面。我们来看看他们是怎么运作的。 之前的文章中我们用Webpack快速搭建了一个工程来展示了所有依赖是如何被导入到一…"}, {"id": "6844903618592636942", "title": "[React Native]一款RSS阅读器", "desc": "耗时近两月，一个React Native项目。 1. 引入 2. 功能 3. 主要依赖 4. 后台 同样在leanCloud上编写nodejs云函数，负责部分项目逻辑，如定时更新等功能。 5. 总结 强烈推荐使用redux进行状态管理，redux前期上手可能比较难，但后面绝对能…"}, {"id": "6844903733856305159", "title": "深入理解React", "desc": "对于常用的框架，如果仅限于会用，我觉得还是远远不够，至少要理解它的思想，这样才不会掉入各种坑里面，这篇文章是基于react-lite源码来写的。 在react里面，经过babel的解析后，jsx会变成createElement执行后的结果。 &#x3C;Test name=\"w…"}, {"id": "6844903602255822861", "title": "从一个实战项目来看一下React Native开发的几个关键技术点", "desc": "在进行了2个星期的基础学习（Flexbox,React.js,JSX,JavaScript）之后，想通过一个实战项目来提高ReactNative的开发水平，于是找到了下面这个项目：一.项目介绍这是我在"}, {"id": "6844903600917856263", "title": "基于React+Webpack+Mobx+Less项目搭建指南", "desc": "Webpack 支持零配置，如果 entry 不配置，默认值为 ./src ；如果 output 不写，默认值为 ./dist。 Webpack 在 4.X 版本废弃了 CommonsChunkPlugin，需要使用 optimize.splitChunks 来替换。 extr…"}, {"id": "6901279189010219015", "title": "JSX 初体验", "desc": "举个栗子：点击按钮加1。使用 https://codesandbox.io/ 进行测试 JXS 的条件判断 if...else..."}, {"id": "6844903641111855111", "title": "React之setState", "desc": "使用过React的用户都知道setState是一个管理state的重要方法，下面简单介绍下这个API。 我们知道，this.state是只读的，更新状态不能直接修改，而是通过this.setState方法。这是为什么呢？this.state只是一个对象，我们修改它的值是没有意义…"}, {"id": "6844903607024762887", "title": "[译] ⚛ React 状态管理工具博物馆", "desc": "这篇文章是了解复杂的状态管理系统的罗塞塔石碑（关键所在）。一个打包列表应用中使用的状态管理库基本如下： 当然，你可能对上面的某些库很熟悉，现在你可以运用这些知识来更好地理解其它库。你不仅有机会来领会这些库的细节，还会发现这些库是多么相似。 为了通俗易懂地说明这些库，我选择了一个…"}, {"id": "6844903774012571655", "title": "在 React 代码中使用自动更新的 CRA 环境变量", "desc": "最近写了本《Git 进阶指南》的 Gitbook，但（可能）由于 Gitbook CDN 上的缓存过于顽固，所以需要在访问 Gitbook 时，自动加上清缓存参数 ?v=版本号。 CRA 文档提到 process.env 必须使用 REACT_APP 的前缀 ，所以我们这里命名…"}, {"id": "6844903703149805582", "title": "利用Atomic构建React项目工作流", "desc": "用过 React 的朋友都知道，React 项目文件夹的划分是有很多种的，在 React 官方关于文件结构这个部分给出了一些社区比较常见的构建方式的示例。例如有通过features或者routes进行分组的，也有通过模块类型（type) 划分的。在文档提到了一种针对compon…"}, {"id": "6844903711601328135", "title": "从源码看React.PureComponent", "desc": "React.PureComponent官方文档：https://reactjs.org/docs/react-api.html#reactpurecomponentComponent与PureComp"}, {"id": "6844903758409760781", "title": "使用 React + Rxjs 实现一个虚拟滚动组件", "desc": "在我们的业务场景中遇到这么一个问题，有一个商户下拉框选择列表，我们简单的使用 antd 的 select 组件，发现每次点击下拉框，从点击到弹出会存在很严重的卡顿，在本地测试时，数据库只存在370条左右数据，这个量级的数据都能感到很明显的卡顿了（开发环境约700+ms），更别提…"}, {"id": "6844903817314566152", "title": "ReactJS &Flux &Redux 的设计思想与关系", "desc": "*由于React的“state-view”模式可以让开发者的大脑得到一种“单向流”的舒适体验。那为什么单向流的思维状态更加舒适呢？ 这是因为在单向流状态下，要解决的问题如同一个函数映射，已知什么（比如state）是固定不变的，要得到什么（比如view）是定义明确，而人的思维非常…"}, {"id": "6844904025297518600", "title": "React 源码学习（十二）：Reconciliation", "desc": "在某一时间节点调用 React 的 render() 方法，会创建一棵由 React 元素组成的树。在下一次 state 或 props 更新时，相同的 render() 方法会返回一棵不同的树。React 需要基于这两棵树之间的差别来判断如何有效率的更新 UI 以保证当前 U…"}, {"id": "6844903584539082765", "title": "如何使用 Electron 和 React 构建一个 APP", "desc": "这篇文章主要记录了，使用 Electron 构建的一个 APP 过程的关键步骤和遇到的问题及解决方法。"}, {"id": "6844903597717602317", "title": "常被新手忽略的值赋值和引用赋值（偏redux向）", "desc": "在日常使用redux的时候,当view发出一个action请求并被对应的reducer处理时，有时候store中对应的state值已经变了，但view中未进入componentWillReceiveProps这个生命周期。本文主要解释下这种现象的发生到底是因为什么。 简单值(即…"}, {"id": "6906038557987897351", "title": "认识React及JSX ", "desc": "组价化，模块化。代码容易复用，大型项目非常喜欢react 单向数据流。没有实现数据的双向绑定。数据-》视图-》事件-》数据 2.正常的普通HTML元素要小写。 如果是大写，默认认为是组件 2.style样式中,如果存在多个单词的属性组合,第二个单词开始,首字母大写。否则会报错"}, {"id": "6844904178318344200", "title": "接着上篇讲 react hook", "desc": "Hook 是一个特殊的函数,使用了 JavaScript 的闭包机制，可以让你在函数组件里“钩入” React state 及生命周期等特性。Hook 不能在 class 组件中使用。这也就是我开篇说的函数式组件一把索的原因 Hook 的调用顺序在每次渲染中都是相同的，所以它能…"}, {"id": "6905681104565764103", "title": "build your own React学习笔记", "desc": "读书笔记按照pomb大神中的步骤来划分, 为即将的React源码的学习做好准备. JSX是JavaScript的语法扩展,其本质上是React.createElement的语法糖, 通过babel编译,JSX会转变成React.createElement. 在Step4的per…"}, {"id": "6844903557997527054", "title": "由重构进阶前端开发入门 (四) 面向对象", "desc": "了解了在浏览器环境下，使用 JS 编程的基础概念之后，开始思考如何组织优化自己的代码，从编程技巧上提升开发和维护工作的效率吧。"}, {"id": "6844903582500651016", "title": "React: setState in depth", "desc": "我们都知道调用 setState 改变 state 的结构会导致组件 re-render，但是如果我们在调用 setState 时不改变 state 的结构会导致 re-render 吗？"}, {"id": "6844903645889167368", "title": "Vue: Binding与Watcher", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。接下来的日子我应该会着力写一系列关于Vue与React内部原理的文章，感兴趣的同学点个关注或者Star。 上一篇文章Vue响应式数据: Observe…"}, {"id": "6913558716784738318", "title": "仿小程序路由打造一款react前端路由", "desc": "该方法用于定义路由表，构建SPA项目。支持node端渲染。默认会自动渲染结构到 #root 容器 需要跳转的应用内页面的路径 (代码包路径), 路径后可以带参数。参数与路径之间使用 ? 分隔，参数键与参数值用 = 相连，不同参数用 &#x26; 分隔；如 'path?key=v…"}, {"id": "6844903668504854536", "title": "react-redux源码分析及实现原型（下）", "desc": "上一次我们讲解了Provider、connect、selectorFactory。这次主要分析 connectAdvanced 这个核心API。 上篇讲过 selector 会将新的值和缓存的值做比较，如果变化，将重新求值并返回，如果没变化，返回缓存的旧值。makeSelect…"}, {"id": "6844903513332400142", "title": "uiw 1.3.1 发布，React组件库，祝贺月下载过千了", "desc": "为打造高品质的React UI工具包的理想而奋斗！！！。在这里把掘金当新闻发布平台，如果影响到大家非常抱歉，我还会努力发布更新日志的。 🌟 Timestamp组件添加tzc时区转换。 e787e0c 🐞 修复Tree组件默认展开失效。 92999b6 🐞 修复Timest…"}, {"id": "6844903605829386253", "title": "React性能优化-虚拟Dom原理浅析", "desc": "前言今日早读文章由阿里@Yuying Wu翻译投稿分享。正文从这开始～通过学习React的VirtualDOM的知识，去加速你们的应用吧。对框架内部实现的介绍，比较全面且适合初学者，我们会让JSX更加"}, {"id": "6844903535327330312", "title": "react技术栈实践(从前到后撸一个电影搜集应用)", "desc": "一句话总结redux，我觉的就是将组件之间的纵向的props传递和层级组件间状态关系给打平了，将一种纵向关系转变成多个组件和一个独立出来的状态对象直接交互，这样之后，代码结构确实看上去更加清晰了。 redux强制规范了我们对状态的操作，只能在action和reducer这些东西…"}, {"id": "6844903846926352397", "title": "React 30 秒速学：制作多行文本组件，限制字符数和单词数", "desc": "呈现一个<textarea>元素，该元素使用回调函数将其值传递给父组件。 使用对象解构来设置<textarea>元素的某些属性的默认值。 使用适当的属性渲染<textarea>元素，并使用onChange事件中的callback函数将textarea的值传递给父元素。 呈现限制…"}, {"id": "6844903501059850248", "title": "一份来自 Treebo 的 React 与 Preact PWA 性能分析报告", "desc": "Treebo是一家印度家喻户晓的经济型连锁酒店，在旅游业中占据了价值200亿美元的市场。他们最近开发了一个新的渐进式应用(PWA)作为默认的移动端体验，最开始使用React,但最后在生产环境转向了Preact。"}, {"id": "6844903657679355917", "title": "复杂 React 应用中的TypeScript 3.0实践", "desc": "如果你了解，也许应该知道我已经很久没有编写没有类型系统的JavaScript了，我非常喜欢 React 这个库，更喜欢使用 TypeScript 来编写 React。虽然网络世界中有很多介绍 React 的文章，但极少发现有介绍如何应用 TypeScript 来编写 React。"}, {"id": "6844903892845920269", "title": "React Hook的实现原理和最佳实践", "desc": "React的组件化给前端开发带来了前所未有的体验，但是随着业务功能复杂度提高，业务代码不得不和生命周期函数糅合到一起。这样很多重复的业务逻辑代码很难被抽离出来。"}, {"id": "6844903846528057352", "title": "React中的状态管理---Redux", "desc": "我们以todolist中增加代办事项这个功能为例:为了开发规范一点我们要采取reducer的分片写法,即一个类型数据一个模块不使用react-redux书写规范生产安装redux在src目录下建立st"}, {"id": "6844903577643646990", "title": "精读《Immer.js》源码", "desc": "本周精读的仓库是 immer。 Immer 是最近火起来的一个项目，由 Mobx 作者 Mweststrate 研发。 了解 mobx 的同学可能会发现，Immer 就是更底层的 Mobx，它将 Mobx 特性发扬光大，得以结合到任何数据流框架，使用起来非常优雅。 Immer …"}, {"id": "6953926016083427335", "title": "你应该理解的react知识点（更新于2021-5-10）", "desc": "前言 最近在准备面试。复习了一些react的知识点，特此总结。 开始 React 生命周期 react 16以前的生命周期是这样的 组件在首次渲染时会被实例化，然后调用实例上面的componentWi"}, {"id": "6995445756895182855", "title": "ReactSSR - React服务器渲染", "desc": "ReactSSR - React服务器渲染 概述 客户端渲染（CSR）：服务器端仅返回JSON数据，客户端接收到DATA后将数据与HTML进行组合然后渲染 服务器端渲染（SSR）：服务器直接将需要使用"}, {"id": "6937832776263548935", "title": "React 面试不完全指南：为什么要学数据流管理？", "desc": "很多前端开发都离不开框架，相信你一定听说过\"数据驱动视图\"这句话，意思就是说，我们界面的内容及内容变化都是数据决定的，不管你是用Vue、React还是其他框架，基本都是这个理念。在面试中，面试官经常会"}, {"id": "6861200476185034766", "title": "使用useMemo & useCallback进行性能优化", "desc": "在react 没有新增 hooks 之前，我们可以通过PureComponent、shouldComponentUpdate等方法进行性能优化，那么在hooks中有没有性能优化的方法呢？答案是肯定的。下面我们就来一一进行解答。 下面是官方文档的解释，感觉有些惜字如金，看完之后，…"}, {"id": "6981488003629711368", "title": "React15和React16的架构比较（一）", "desc": "React目前已经成为前端主流框架之一，其成功原因离不开它的设计理念： 而React从版本v15升级到v16后，重构了整个架构，为什么呢？下面来对比一下v15和v16"}, {"id": "6844903943940603911", "title": "☀️学习系列:React实现excel导入导出", "desc": "其实本人不太熟悉ts，所以对于tsx就当做乐呵乐呵。空有ts的后缀，实际上是js（语法）。总共就一个页面，页面地址tsx文件。 onRemove是当移除文件时触发的操作，这里的操作就是清除数据。 accept是接受上传的文件类型。 beforeUpload是上传文件之前的钩子，…"}, {"id": "6844903557812977677", "title": "对 React 组件进行单元测试", "desc": "前端开发的一个特点是更多的会涉及用户界面，当开发规模达到一定程度时，几乎注定了其复杂度会成倍的增长。 无论是在代码的初始搭建过程中，还是之后难以避免的重构和修正bug过程中，常常会陷入逻辑难以梳理、无法掌握全局关联的境地。 而单元测试作为一种“提纲挈领、保驾护航”的基础手段，为…"}, {"id": "6976570756071161869", "title": "react封装Modal弹出框", "desc": "1.需求导向 1.1.需求导向 1.2.实现功能 1.可以底部自定义按钮的样式，文字 2.可以自定义内容 3.使用Esc键可以关闭模态框 4.使用shift可以自动聚焦关闭按钮，使用Enter实现关闭"}, {"id": "6844903981836140552", "title": "「前端发动机」深入 React hooks  — 原理 & 实现", "desc": "React Hooks的基本用法，官方文档 已经非常详细。这是系列的第三篇，探讨一下 hooks 的实现机制。 前两篇文章已经分析过 useState 和 useEffect 的执行机制，想要更加深入的了解 hooks，可以根据 hooks 的相关特点，自己模拟实现一下相关的函…"}, {"id": "7002250197577580552", "title": "React Hook：手动实现useEffect", "desc": "react hook中，为函数组件提供了useEffect钩子，能够在函数组件内部模拟生命周期函数，并可以在内部执行副作用操作，下面来实现一下其基本功能："}, {"id": "6877746183259815949", "title": "记一次使用next.js开发官网经历", "desc": "最近我司官网重构，一个官网配一个后台，目的是动态配置官网内容，以前都是数据库写死的，为了更好的运营网站，体现品牌影响力，于是有了这一次大变革。 需求不复杂，基本就是几大模块的动态设置，产片介绍，新闻，职位等等。 我们都知道，单页应用两大致命缺点，一个就是seo不友好，另一个就是…"}, {"id": "7002233535255805982", "title": "React Hook: 手动实现useState", "desc": "react hook当中提供了useState钩子函数，能够实现在函数当中创建状态和改变状态的方法，并支持多次调用。下面来一步步实现一个简易的useState。"}, {"id": "6844904101088591879", "title": "React 实践揭秘之旅，中高级前端必备(下)", "desc": "上一篇文章我们主要实现了 JSX 在 WebGL 上的渲染与更新，对 虚拟DOM 和 Diff 有了更深的了解，但相比于我们使用的 React，还缺乏了之中很重要的一环 --- 组件模式。 想必大家能认同，React组件(Component)具有 强大的功能，高拓展性和高解耦性…"}, {"id": "6951585684679294989", "title": "React源码解析 之 Fiber的渲染（1）", "desc": "如何生成workInProgress结构上篇通过查看调用栈生成了了一个fiberRoot，从调用updateContainer函数为入口函数，开始执行解析fiberRoot结构。解释一下，此时的chi"}, {"id": "6844903588737597448", "title": "React实战篇（React仿今日头条）", "desc": "上次初学用 react 写了个后台管理，这次便寻思写个移动端的项目。便有了这次的这个项目。 这个项目以前写了个 vue 的版本。有兴趣的可以 点击进入 通过 import() 方法加载组件， 在通过高阶组件处理 import 返回的 Promise 结果。 通过 react-r…"}, {"id": "6969606438377226247", "title": "梳理react-hook源码", "desc": "本片文章主要通过react的源码，分析useState、useEffect和两个钩子函数的内在执行原理。 1. hook组件没有this指针，没有生命周期，setXxxx函数是如何发起更新，进行调度的"}, {"id": "6916308854074507278", "title": "利用HTML5拖放(Drag 和 Drop)实现Table间数据的交互", "desc": "作为开发者，我们总是会不经意间的遇到一些令人头疼的需求。比如五彩斑斓的黑，根据手机壳变换APP的颜色等等，你说怎么办。虽然在一般情况下不会这么棘手，但是有些需求刚拿到的时候还是会一筹莫展。 曾经遇到一个类似这样的需求：A表的数据需要沿用B表中的数据，而且要尽量少的步骤。具体什么…"}, {"id": "6981323055377170462", "title": "React Native Image Picker爬坑记", "desc": "注意 我当前使用的react native 版本为：\"react-native\": \"0.63.4\" React Native Image Picker 简介 安装 链接库 android\\setti"}, {"id": "6960835286100082695", "title": "React之道-软件设计、架构和最佳实践", "desc": "React之道-软件设计、架构和最佳实践 我从2016年就开始使用React，不过在应用架构和设计方面还没能总结出一个最佳实践。 虽然在低层面上有一些最佳实践，但在架构方面，大多数团队都会构建自己的“"}, {"id": "6844903729703944206", "title": " 企鹅辅导课程详情页毫秒开的秘密 - PWA 直出", "desc": "天下武功，唯 (wei) 快(fu) 不(bu) 破(po)。 随着近几年的前端技术的高速发展，越来越多的团队使用 React、Vue 等 MVVM 框架作为其主要的技术栈。以 React 应用为例，从性能角度，其最重要的指标可能就是首屏渲染所花费的时间了。那么今天，我们要给大…"}, {"id": "6844903639815815181", "title": "3YAdmin-专注通用权限控制与表单的后台管理系统模板", "desc": "3YAdmin基于React+Antd构建。GitHub搜索React+Antd+Admin出来的结果没有上百也有几十个，为什么还要写这个东西呢？ 一个后台管理系统的核心我认为应该是权限控制，表单以及错误信息收集这三大块，前两个最为重要。而GitHub上的大多数项目关注点都不在…"}, {"id": "6976493983472025614", "title": "使用 React + IntersectionObserver 实现图片懒加载", "desc": "图片是否进入可视区域 图片进入可视区域后，将 img 标签的 data-src 属性赋值给 src 属性 用于观察元素是否进入可视区域，具体介绍可以看阮一峰老师的文章http://www.ruanyi"}, {"id": "6844904160521879565", "title": "听说你用useState因为异步更新头疼？试试useReducer吧", "desc": "在开发中遇到一个需求，多个接口循环调用，并且接口调用根据用户的不同操作调用方式不同，但是最后都要将所有获取的数据存下来更新视图。例如下面这种： 上述只是简单举例，真实场景一般都会比这个复杂。乍一看这样并没什么不妥，但是问题就是，一旦执行完上述fetch方法后，拿到的result…"}, {"id": "6844903992439341064", "title": "19 个来自 2019 React Conf 的总结", "desc": "React Conf ⚛️已经正式结束。有很多精彩的演讲，人物，活动，当然还有美食。我还在整理整个活动，但是就这次会议而言，这是迄今为止我参加过的最好的活动。 开发者对于社区通常都会保持一颗敬畏之心。大会的志愿者和组织者完成了难以想象的工作，使得每一个参加会议的人都感到宾至如归…"}, {"id": "6844903728764452878", "title": "骚年，Koa和Webpack了解一下？", "desc": "有必要声明下，很多人在没看完这篇文章之后，就评论一些和文章主题不相符的内容。 这篇文章主要讲述的是如何在本地开发环境下通过启动node服务器之后，无缝启动webpack，从而达到前后端配置一体化。 适合做node全栈项目、node中间层，配合前端项目、等等。 实现继承,采用的是…"}, {"id": "6844903811333505031", "title": "Three.js 快速上手以及在 React 中运用", "desc": "之前项目中用到了 3D 模型演示的问题，整理了一下之前学习总结以及遇到的坑。3D 框架有老牌引擎 Three.js 和微软的 Babylon.js 3个基础概念：场景（scene）、相机（camera）和渲染器（renderer）。 相机 camera 的作用是定义可视域，相当…"}, {"id": "6844903760867786759", "title": "在 Create React App 中使用 CSS Modules", "desc": "本文介绍了如何在 Create React App 脚手架中使用 CSS Modules 的两种方式。 此时 Button 组件的背景颜色是红色，但是字体颜色却不是红色，因为使用了 Css Modules 之后，普通的 css 样式就不起效果了，需要用全局的方式编写才可以(:g…"}, {"id": "6927204756905525262", "title": "一文看懂React Hooks", "desc": "React Hooks是从React 16.8版本推出的新特性，目的是解决React的状态共享以及组件生命周期管理混乱的问题。React Hooks的出现标志着，React不会再存在无状态组件的情况，React将只有类组件和函数组件的概念。 众所周知，React应用开发中，组件…"}, {"id": "6994395163044872200", "title": "Electron 预览pdf、ppt", "desc": "Electron 、React 预览在线或本地的 pdf、ppt资源 React 代码基于 React.memo、useMemo的渲染优化"}, {"id": "6995177218083127310", "title": "React基础知识(一)", "desc": "React：用于动态构建用户界面的 JavaScript 库(只关注于视图) 是一个将数据渲染为HTML视图的开源JavaScript库。"}, {"id": "6844903603300204552", "title": "飞冰 2.0 正式发布并支持 Vue 项目开发", "desc": "距离 1.0 正式版发布又过了两个月，飞冰迎来了 2.0 大版本的更新。 详细的飞冰背景和介绍等，请参照 1.0 正式版发布的介绍，这里不再赘述：https://zhuanlan.zhihu.com/p/34265596。 我们当时在 1.0 版本的 slogan 是『海量可复…"}, {"id": "6844904017596776461", "title": "React Hooks教程之基础篇", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 Hooks给Function组件赋能，Function组件也可维护自己的state，不用担心组件通信过程中this指向的问题。 Hooks版…"}, {"id": "6987030497943617544", "title": "react中css作用域问题探究", "desc": "本文主要介绍了在react中，css的作用域的一些场景与解决方案。讨论了产生的原因，导致的问题及解决思路。"}, {"id": "6984724483915382815", "title": "【react】useEffect VS useLayoutEffect", "desc": "TLDR; useLayoutEffect 和 useEffect 的相同点是： 函数签名是一样的； clean up 机制是一样的； 提交 DOM mutation 次数是一样的。 useLayou"}, {"id": "6983496781829144613", "title": "用 antd 两个 DatePicker 组件实现起止时间相互约束的流程", "desc": "一个基于 React 前端技术的项目，两个 DatePicker ，实现起止时间的约束： 开始时间必须小于结束时间，如何实现？"}, {"id": "6844903587508666375", "title": "Redux的前世-今生-来世", "desc": "终于要更新了,第二篇文章就这样在清明节前给大家赶出来,希望你也能有个可以充实自己的假期。这次分享下这个已经很老的前端技术栈(相对于前端发展速度来看),说他老并没有说他的设计理念老,而是说它已经有自己的历史印记了。还记得第一次redux发版已经是2015年6月的事情了,其实它也经…"}, {"id": "6844903683541434381", "title": "手把手带你用85行代码实现一个React.js（详细讲解）", "desc": "啥也不说，先来看看用我们85行的React.js直接替换别人写好的扫雷项目中的React.js，看看效果怎么样？哈哈，是不是正常运行了。 Attention：一定不要被下面辣么多的代码吓到，因为下面辣么多的代码只是每次在上一个commit的基础上添加几行而已，大部分都是重复，只…"}, {"id": "6967026623186993188", "title": "防抖动与节流", "desc": "防抖动与节流 背景 开发环境：react 需求：为了解决加载框与空icon出现时机不对劲的bug。 该bug具体情况： 请求接口到拿到接口数据耗时1分钟，包括参数为空的时候也是1分钟。而空参数时接口会"}, {"id": "6844904150417801224", "title": "基于react/vue开发一个专属于程序员的朋友圈应用", "desc": "今天本来想开源自己写的CMS应用的，但是由于五一期间笔者的mac电脑突然崩溃了，所有数据无法恢复，导致部分代码丢失，但庆幸的是cms的打包文件已上传服务器，感兴趣的朋友可以在文末链接中访问查看。 今天要写的H5朋友圈也是基于笔者开发的cms搭建的，我将仿照微信朋友圈，带大家一起…"}, {"id": "6844904084768587790", "title": "constructor 会执行两次？- 浅淡 React StrictMode", "desc": "我相信很多人和我一样都知道 StrictMode 类似 JavaScript 中的 use strict， 可以让 React 程序在更严格的条件下运行，也已经在项目中使用了它，但是还是不太了解 StrictMode 怎样检测出程序的问题。下面就通过一个问题抛砖引玉，给大家简单…"}, {"id": "6885511137236877325", "title": "拖拽组件：React-DnD用法及源码解析", "desc": "拖拽的业务使用场景已经渗透在了我们各个方面，尤其在移动端方便。侧面拖拽菜单，拖拽卡片交互，拖拽评分等等。 这样的交互使得我们在有限的事件场景中，给予用户更方便的交互操作。大大的提升了用户体验、产品的流畅度。 React-DnD是一组React实用程序，可帮助您构建复杂的拖放界面…"}, {"id": "6892671384976097287", "title": "传统Diff算法为什么时间复杂度要O(n ^3)", "desc": "很多文章提到的都是新旧DOM树需要两两对比，但是没有说清楚为什么。 等等，我相信还有很多种可能。 第一种非常粗暴，第二种是假设所有操作的优先级是相同的。第二种方案也就是我们传统的diff算法的核心方案，下面我们就此展开讨论 很简单，因为树是一种递归的数据结构，需要递归的创建，复…"}, {"id": "6865562336158023688", "title": "文件增量同步之rsync算法", "desc": "之前毕设有用到文件增量同步，于是乎就记录一下。 在A和B两个不同端之间有相似度很高的文件，同时这个文件又比较大。如果通过全量传输来更新，http传输量很大，非常不友好。那么可以通过某些手段，只上传修改的内容，其余内容复用旧文件。 固定分块检测技术：固定分块检测的话，如果某一区域…"}, {"id": "6879560507838169096", "title": "React使用hook判断组件是否卸载", "desc": "上面就会引起一个问题，在小程序一开始进入到index页面，会发送app.ts中getUserInfo的请求，同时也会发送index.js中的getList的请求。当getUserInfo请求率先返回结果时，如果用户未登录，则会重定向至login页面，此时index页面组件已经卸…"}, {"id": "6844903502729183239", "title": "React合成事件和DOM原生事件混用须知", "desc": "如果DOM上绑定了过多的事件处理函数，整个页面响应以及内存占用可能都会受到影响。React为了避免这类DOM事件滥用，同时屏蔽底层不同浏览器之间的事件系统差异，实现了一个中间层——SyntheticEvent。 React并不是将click事件绑在该div的真实DOM上，而是在…"}, {"id": "6911140987737735175", "title": "前端不得不知道的，React新旧生命周期梳理", "desc": "原来（React v16.0前）的生命周期在React v16推出Fiber之后就不合适了，因为如果要开启async rendering，在render函数之前的所有函数，都有可能被执行多次。 禁止不能用比劝导开发者不要这样用的效果更好，所以除了shouldComponentU…"}, {"id": "7001668009597075470", "title": "React--setState 同步与异步更新", "desc": "浅析 React 中 setState 的同步更新和异步更新策略，结合 async/await 总结出现场景和使用情况。"}, {"id": "6844903986080776206", "title": "手把手带你搭建React16+Router+Redux-saga+Antd后台管理系统", "desc": "7.接口是java服务端的Api，暂时就不抽出来了，所以项目是无法正常登陆的，项目会提供UI视觉稿，有对应需求的可以借阅参考。最后说一句，redux-saga真香~~~ 安装成功之后，直接在要访问的build文件夹中运行http-server命令即可打开本地服务环境。也可自行配…"}, {"id": "6940935634915688484", "title": "用React从零实现一个Antd4 Form表单 | 项目复盘", "desc": "​ 在cms后台管理系统中，大家一定绕不开对Form表单的使用，接下来我们就来详细解析下Antd4 Form的背后实现以及数据仓库的知识。其实Form表单就做了以下几件事情： ​ 在一个Form表单里，有很多input、radio等数据项，而这些input、radio要做成受控…"}, {"id": "6985382953748693006", "title": "hooks 系列 - 前言", "desc": "目前网络上有许多学习资料，[React 官方学习网站](https://zh-hans.reactjs.org/docs/hooks-intro.html) 中的内容，讲述虽然详细，但是在例子上，较为"}, {"id": "6983555401983721479", "title": "React 技术栈开发总结 一", "desc": "前言 本文是对近期使用 React 技术栈在开发页面时，常见场景实现点上的一些总结，故编写此文分享给大家。关于文中功能代码在实现上，若读者有更好的想法，欢迎文末下方留言交流。 JSX 中使用 swit"}, {"id": "6844903592520843277", "title": "浅入浅出图解domDIff", "desc": "我们常说的虚拟DOM是通过JS对象模拟出来的DOM节点,domDiff是通过特定算法计算出来一次操作所带来的DOM变化。 react和vue中都使用了虚拟DOM，vue我只停留在使用层面就不多说了，react了解多一些，就借着react聊聊虚拟DOM。 干前端的都知道DOM操作…"}, {"id": "6844903930044874760", "title": "React+Typescript项目踩踩坑坑", "desc": "然后也用 koa2+typescript 搭了一个简单的 api 后台服务，只是用来验证 Axios 封装Api 的使用，还有个人 node.js 玩耍需要🙃，并不涉及数据库操作等。。。代码可以戳 这里 然后，这只是一个空模版，用来验证一些东西，只有少数简单 demo 页面，…"}, {"id": "6844903681763049485", "title": "React性能分析利器来了，妈妈再也不用担心我的React应用慢了", "desc": "默认打开Profiler什么都没有，要点击录制按钮进行记录（跟chrome的performance挺像）。 看上去像一个柱状图，每一个柱子代表一次commit，他的颜色和高度对应执行时长，越高颜色越黄代表时间越长，反之越短。 火焰图部分会以一个类似树形的结构显示一次commit…"}, {"id": "6990636543308202015", "title": "react中 useEffect和useLayoutEffect区别", "desc": "useEffect 基本上90%的情况下,都应该用这个,这个是在render结束后,你的callback函数执行,但是不会block browser painting,算是某种异步的方式吧,但是cla"}, {"id": "6978773849198297102", "title": "聊聊 React Hooks 中的那些心智负担", "desc": "前段时间跟几个做 React 的前端朋友谈及 React Hooks 中的心智负担问题，他们竟然说没有感受到。 我突然就有点自闭了？难道是我自己的问题？"}, {"id": "6979146131028574245", "title": "Redux-Saga妈妈级教程（下）", "desc": "7，redux-saga提供的取消任务方法，任务并发方法以及任务竞赛方法（cancel，all，race） cancel方法 如下cancel方法代码示例： 首先，根saga启动cancelFork任"}, {"id": "6968982632465956901", "title": "react源码解析3.react源码架构", "desc": "react源码解析3.react源码架构 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心a"}, {"id": "6972991860423786503", "title": "React学习第五天---Virtual DOM 及 Diff 算法（diff算法完成DOM更新）（四）", "desc": "这是我参与更文挑战的第12天 接下来学习是关于更新DOM元素，VirtualDOM的对比。前面完成了虚拟DOM到真实DOM的渲染工作，接下来进入Diff算法阶段。 节点类型相同的情况 我们准备两段JS"}, {"id": "6876030404789436429", "title": "为什么 React17-rc.2 要发布新的 jsx 转换逻辑", "desc": "对于这种变动，我举双手赞成。不过，我最感兴趣的还是，为什么要用新的转换语法呢？在React 的 RFC-0000 文档中，我们可以找到详细的原因。 React 最开始的设计是围绕着 class 组件来的，而随着 hooks 的流行，使得函数组件也变得越来越流行了。其中一些主要考…"}, {"id": "6932377091027501070", "title": "使用 react 的 hook 实现一个 useRequest", "desc": "当请求比较多时，每次都要重复这样的操作。这里我们可以利用 react 提供的 hook，自己来封装一个useRequest。 umi 框架中已经有实现了一个 useRequest 方法，useRequest-umi-hook，他这里实现的功能很多，我们只实现一个基本的功能，其他…"}, {"id": "6955428469912109070", "title": "第一个react项目的简单总结", "desc": "最近有幸参与了公司某运营平台的项目，之前从没用react做过项目的我也第一次真正使用react进行了项目开发。花了两天左右时间学习就开肝了。本文主要对项目中的一些技术点进行总结回顾。 项目搭建和打包 "}, {"id": "6844903509502984206", "title": "流形：我是如何面试一位前端工程师", "desc": "最近面试不少，发现团队同学面试的问题以纯知识点为主，提问方式很机械。对于现在前端面试总是被人吐槽面试与实际的工作完全不搭边，和面试官面试方式有很大关系。这篇文章主要是记录我是如何面试，以分享给大家作参考。希望对你有用。 很多面试者的简历中一定会写各种『精通』，这是非常有自信的表…"}, {"id": "6844903614721458189", "title": "写一个属于你的前端脚手架工具", "desc": "创建项目目录后执行npm init按照提示完成初始化项目。 安装。 项目初始化完成后，创建bin文件和commands文件。bin文件为可执行命令入口目录，commands则负责编写一些命令交互。 1.program.parse(process.argv) 可以解析执行init…"}, {"id": "6844904153563529223", "title": "Medux+React+Antd4+Hooks+Typescript开箱即用通用后台(上)", "desc": "本项目主要用来展示如何将 @medux 应用于 web 后台管理系统，光看UI界面你可能看不到太多闪光点，也没有太多特别之处，网上这样的开源后台前端系统也很多，甚至你分分钟就能自己搭建一个，因为通用化的后台界面无非就是这样子。然而系统的架构理念、代码的组织风格、工程的模块化、路…"}, {"id": "6844903513605029896", "title": "4 张动图解释为什么（什么时候）使用 Redux", "desc": "本文描述了什么时候开始使用 Redux。作者描述了在构建一个真实 React APP 时，从没有使用 Redux 到使用 Redux 的过程以及收获。 首先，并不是所有的 React 应用程序都需要使用 Redux。事实上，大多数非常简单的 React 应用程序根本不能从 Re…"}, {"id": "6994710727894728735", "title": "React：Hooks原理", "desc": "最简单的 useState 实现 useState 用法 示例 点击button后，会执行+1 分析这一过程 在进行首次渲染时，会render <App/>，调用App()，得到虚拟DIV，并创建页面"}, {"id": "6969090374182633502", "title": "React 08 :: Override Webpack", "desc": "前言 使用create-react-app创建的react项目，默认隐藏了对webpack的控制，但是有的时候我们有需要去改写一些对于webpack的设置，这是就需要对webpack的设置进行over"}, {"id": "6844903848255946766", "title": "React组件设计实践总结05 - 状态管理", "desc": "今天是 520，这是本系列最后一篇文章，主要涵盖 React 状态管理的相关方案。 前几篇文章在掘金首发基本石沉大海, 没什么阅读量. 可能是文章篇幅太长了？掘金值太低了？ 还是错别字太多了? 后面静下心来想想，写作对我来说是一种学习和积累的过程, 让我学习更全面更系统性去描述…"}, {"id": "6869194991848292359", "title": "（下）手摸手教你大厂都在用 React+TS+Antd 快速入门到NodeJS全栈项目实战（附源码）", "desc": "redux 相当于一个数据库，可以当成一个本地的数据库使用，react-redux可以完成数据订阅，redux-thunk可以实现异步的action，redux-logger是redux的日志中间件。 redux 的核心概念：将需要修改的state都存入到store里，发起一个…"}, {"id": "6979806351010562078", "title": "React -- Grid 栅格布局， 两行代码实现响应式", "desc": "Grid 栅格布局； 用户端商品列表页面的最佳实践方案；不建议直接使用grid，使用UI框架的更方便一点，如果非要自己写，也不建议写css，而是使用Grid的库。下面使用AntD和Materrial."}, {"id": "6920521739453612040", "title": "react经典面试题之this.setState", "desc": "react是当下非常流行的前端框架，如果你是一个react开发者，当你出去面试时大概会有80%以上的概率会被问到setState相关问题。比如setState是同步还是异步，setState批量更新时如何实现的等等。 很多同学可能给出的答案是setState是异步更新，其实不然…"}, {"id": "6997225951717228557", "title": "实现一个简单的 react", "desc": "本文章从 `createElement` 函数讲起，然后一步一步完成了一个简单的 Fiber 、 Reconclie 、 commitRoot 等 react 的核心部分，最终实现一个 react。"}, {"id": "6973189354948657188", "title": "React Hooks 使用全面详解", "desc": "参考文章： https://juejin.cn/post/6844903985338400782 https://juejin.cn/post/6844903958968795149 https://"}, {"id": "6992226822679167006", "title": "增强 JSX｜ 8月更文挑战", "desc": "JSX 是 React 推荐使用的一种用于描述 UI 的语法。在经过 babel 等工具的处理之后，JSX 会被转换成为普通的 JavaScript 代码。"}, {"id": "6898636993560117256", "title": "React全家桶 - React Hooks", "desc": "1. React Hooks 2. 解决的问题 3. 注意事项 4. useState useState会返回一对值：当前状态和一个让你更新它的函数，你可以在事件处理函数中或者其他一下地方调用这个函数。它类似class组件的this.setState，但是它不会把新的state…"}, {"id": "6844903559327154189", "title": "（译）React ⚛️  新的 Context API", "desc": "这不再是一个 实验性的 API，并且它更符合 工程化 的理念，目前它已成为 React 一级棒的 API。 React 中的 context API 相信大家都知道吧，可能跟大伙一样，当看到 React 的官方文档是这样时，都不敢直接使用它。 ⚠️ 注意，这里的改变包括 中断，…"}, {"id": "6844903990396715022", "title": "Next.js部署web同构直出应用全指南（MobX + TypeScript）", "desc": "Zeit在2019/07发布了Next.js 9 该版本最吸人眼球的两个Feature分别是 Built-in Zero-Config TypeScript Support 和 File system-Based Dynamic Routing 即零配置内置TypeScript…"}, {"id": "6844904020859944974", "title": "React Markdown 编辑及渲染解决方案", "desc": "之前用的富文本编辑框，感觉格式特别乱，写出来的文章布局根本没眼看，代码高亮也没找到合适的。所以一直想着把富文本改为markdown。 我们需要写文章和看文章，所以得有markdown编辑器插件和markdown渲染插件。 github上有很多插件，我最终选定的是for-edit…"}, {"id": "6844903668521811976", "title": "改造React DOM！FB将推React Fire计划", "desc": "昨天，React 开发者、Redux 和 Create React App 作者之一的 Dan Abramov gaearon 在 GitHub 上的 React issue 上宣布了一个名为 React Fire 的规划，他表示这个项目旨在使 React DOM 更现代化，目…"}, {"id": "6844903594232135694", "title": "【翻译】React 16.3 新的生命周期和context api", "desc": "一段时间以前，我们写了一篇文章有关我们即将升级我们遗留的生命周期方法，包含着我们慢慢的迁移的策略。在React 16.3.0这个版本中，为了慢慢迁移，我们增加了一些新的生命周期。我们也推荐了一些被长期期待的一些特性：一个官方的context api，一个 forwarding …"}, {"id": "6844903741557063688", "title": "Android攻城狮前端遇坑指南", "desc": "第一种和第二种是两种常见的函数定义方法，第一种是箭头函数，第二种是普通函数。推荐用箭头函数 忽略箭头函数的内部细节，我们发现其实箭头函数就是匿名函数。再来看看匿名函数是如何执行的 聪明的你应该发现问题了，第一种箭头函数传参就相当于匿名函数立即执行。讲清楚了为什么会立即执行，看下…"}, {"id": "6944553937672339469", "title": "React", "desc": "1.1从CDN引入react：两个文件，一个后缀react,一个后缀react-dom，cjs和umd是模块定义。（一般不使用CDN引用方式） ③进入项目目录，yarn start启动项目。 2.初次尝试使用react实现点击按钮+1的功能。 3.面试题：6个6，setTime…"}, {"id": "6844903799341973518", "title": "[译]Rendering React components to the document body", "desc": "React一个比较好用的功能是其简单的API，一个组件可以简单到一个return了组件结构的render函数。除了一个简单的函数之外，我们还有了一段有用且可复用的代码片段。 不过有时候可能会受到限制。 特别是，实际上这个API返回的是一个没有限制dom挂载在何处的组件，这就使得…"}, {"id": "6844903638578659341", "title": "可维护的 React 程序之项目结构梳理", "desc": "很少很少见过有人讨论「项目结构」这个话题，究其原因是大部分同学认为这并不如写代码重要。 有趣的是 JS 在 Node 加持的前端中，文件作为一个「模块」的方式已经深入了前端开发的各个层面，简单的来说就是：一个文件可以被称为一个模块。如何组织项目中的文件目录，文件摆放位置，变得极…"}, {"id": "6844903570370740237", "title": "[译] 为你的 React 应用制作 SVG 图标库", "desc": "目前来说，使用 SVG 是为应用创建图标库的最好方法。通过 SVG 制作出来的图标是可缩放且可调整的，同时也是离散的，这意味着它们可以进行增量加载或更新。而与之相反，使用字体进行构建的图标是不能进行增量加载/更新的。仅这一点就使 SVG 图标成为了那些依赖于代码分离和增量部署的…"}, {"id": "6844903560170176525", "title": "深入理解React源码 - 界面更新 VII（正式版）", "desc": "上次我们聊完了Transaction核心类和它的一个实例ReactDefaultBatchingStrategyTransaction。然而这个Transaction 实例仅仅是一个开始 。 本篇中，我们将探究其它的Transaction 实例。看懂了这些，界面更新逻辑的轮廓就…"}, {"id": "6899388486701285383", "title": "React开发环境搭建、项目创建、命令使用", "desc": "由于项目组前端紧缺的原因，一个后端开发安排了前端开发任务，之前有用过VUE开发过后端页面，这么说来还是有经验的，借此记录一下React开发环境搭建过程。 1、百度搜索Node.js下载即可看到官网地址，打开可以看到如图，这里根据自己电脑操作系统选择下载安装包，往下滑可选历史版本…"}, {"id": "6844903712121438216", "title": "利用 Atomic 构建 React 项目工作流", "desc": "Atomic 是一套指导设计前端组件（Components）架构的方法。在我们的日常工作中，如何更好的划分和管理前端组件常常会是我们碰到的问题。Atomic 通过一系列设计思想和原则，可以很好指导我们的项目架构。用 Atomic 作者自己的话说，这套设计方法的灵感是来自于自己曾…"}, {"id": "6844903619989340167", "title": " 重读redux源码(一)", "desc": "对于react技术栈的前端同学来说，redux应该是相对熟悉的。其代码之精简和设计之巧妙，一直为大家所推崇。此外redux的注释简直完美，阅读起来比较省事。原本也是强行读了通源码，现在也忘得差不多了。因为最近打算对redux进行些操作，所以又开始重读了redux，收益匪浅。 关…"}, {"id": "6844903888919724046", "title": "React Hooks使用实例（二）", "desc": "React的useState方法来实现自定义的Hooks，从而达到复用的目的。 我们知道，不管在做什么样的前端项目，列表页肯定是存在的，那如何获取列表的数据呢？大部分情况下我们都是在每个模块内部自己实现一个获取数据的方法，然后调用setState来更新数据。那有没有更好的方式可…"}, {"id": "6844903513030393864", "title": "uiw 1.3.1 发布，兼容 React 16.1.1", "desc": "发布， 高品质的UI工具包，React 的组件库。 🌟 添加Timestamp时间戳组件。- 685b3de 🌟 添加CopyToClipboard复制到剪切板组件。 - 9868d80 🌟 Card组件添加footer支持。 - 76e5303 🐞 Carousel组…"}, {"id": "6844903497905733639", "title": "React技术栈实现XX点评App-Demo", "desc": "项目内容不多，就涉及到三个页面，主要是为了学习新的知识。项目中用的redux-saga也是前天才学习的。项目的架构也是最近在各种探讨研究。还求大神多指点~ 开发react-redux这一套，我个人的理解是 Redux体现的是代码分层、职责分离的编程思想,逻辑与视图严格区分。 而…"}, {"id": "6844903497612132366", "title": "react-native添加启动屏（ios & android）", "desc": "react-native在启动的时候会有瞬间的白屏出现，ios白屏时间会很短，安卓要相对长一些，大概1-3s时间。这是react-native的工作机制决定的。 react-native在启动时会装载js bundle到内存并渲染界面，这段时间界面是一个空View. 上面的过程…"}, {"id": "6844903940178313230", "title": "React Hook 实战指南！（2）", "desc": "本次实例是利用Ant Design快速构建的，所以界面不一定好看，大家可以看到我的组件划分的层级很平，甚至还有点不合理，哈哈，其实是为了更好的展示Hook多个场景的使用的，请大家忽略组件这么划分是否实用。 操作有点快，其实就是描述了这个应用的功能，可以新建todo，编辑todo…"}, {"id": "6844903894275866632", "title": "React 对象源码解析-带你走进高级程序员的世界", "desc": "本系列文章基于 React v16.8.6，每周分享2-3篇精华文章，每篇文章都是 React 中的一个关键点。欢迎评论交流。 从编译后的代码可以看到，需要有一个 React对象，JSX 编译之后就是用的 React.createElement 来创建 render 树，所以 …"}, {"id": "6943884664239030303", "title": "记一次在react项目中使用头像裁剪插件react-avatar-editor的经历", "desc": "由于最近在使用React写移动端项目，其中有一个需求是做一个头像裁剪功能（可以本地选择图片裁剪，也可以拉取远程图片进行裁剪）。 于是风风火火的去GitHub找相关插件。按star量来找，找到如下几个插件。 我一开始是做完了本地选取图片裁剪，然后接图片上传接口就直接成功。但到我使…"}, {"id": "6844903640428199943", "title": "React源码解读之componentMount", "desc": "作为初级码农不该天花乱坠大讲情怀，一开始入坑了几天对于很多地方充满了爱迪生般的诸多疑问(莫名把自己夸了一波，XD)，所以打算看一波源代码，这个过程可以说是非常曲折，本人智商不高，看了四五遍部分源码后，一脸懵逼，于是在接下来的一周内处于浑浑噩噩，若即若离的抽离状态，于是放弃了解读…"}, {"id": "6943585426762367012", "title": "如何实现自己的react（1）启动配置", "desc": "前言：使用react及相关技术栈进行日常业务的开发已近两年了，从开始单纯的利用setState()进行数据处理，到了解redux的状态管理，使用hooks，和pureComponent等稍显优化的操作。 虽然已经学习过react的生命周期（v16.4之前和v16.4之后），了解…"}, {"id": "6918919172562878478", "title": "React: Lottie 动画初体验和优化策略", "desc": "lottie 是 Aribnb 开源一个主要面向 Web、iOS、Android、React Native、Windows 的动画库，可以实时渲染After Effects动画，并以Bodymovin作为json导出，允许应用程序像使用静态图像一样轻松使用动画，一款协同合作的高…"}, {"id": "6994263544120213518", "title": "前端入门React 三大属性之一 State", "desc": "理解什么是 state ? 首先 我们用最通俗易懂的话来理解， 比如 每个人都有自己的状态 ， 每个人的状态 都会影响 他的行为， 那么， 我们将这句话放到 react 中去理解，把人看作是 组件，组"}, {"id": "6844903615652610055", "title": "深入框架本源系列 —— Virtual Dom", "desc": "众所周知，操作 DOM 是很耗费性能的一件事情，既然如此，我们可以考虑通过 JS 对象来模拟 DOM 对象，毕竟操作 JS 对象比操作 DOM 省时的多。 从上述例子中，我们一眼就可以看出先前的 ul 中的第三个 li 被移除了，四五替换了位置。 当然在实际操作中，我们还需要给…"}, {"id": "6905661755150565384", "title": "React 编写私有 UI 组件库（上）之组件库发布完整流程", "desc": "只要在写前端代码就避免不了使用流行的 UI 组件库，例如 ElementUI 、 Ant Design 。但是我们只停留在使用层面上的话，未免显得肤浅。因此作者一直都想编写一个属于自己的 UI 组件库。 前端工程：组件库基础结构、打包组件库、发布组件库、发布组件库文档。 语言层…"}, {"id": "7000997808060776485", "title": "react入门笔记 一", "desc": "state和props state: 使用setState来更新state可以触发dom更新 类组件中，state的更新化只能在construct中 state的更新是异步的：调用setState后，"}, {"id": "6986903702854434853", "title": "你不懂的react-hook都在这里", "desc": "Hooks的基本使用 Hooks解决的问题 函数组件不能拥有自己的状态(state)。在hooks之前的函数组件是无状态的，都是通过props的来获取父组件的状态，但是hooks提供了useState"}, {"id": "6994712206101184549", "title": "React：Hooks 详解", "desc": "useState 使用状态 注意事项1——不可局部更新 如果state是一个对象，能否部分setState？ 不可以，示例代码 添加...user，复制之前属性 因为setState不会帮我们合并属性"}, {"id": "6989979946546380830", "title": "基于Webpack5实现微前端架构", "desc": "通过Webpack提供的新能力来初步体验一下微前端的开发流程~ 它为团队协作代码共享提供了新的方式，同时在本文中我们也会顺便了解到如何用更加容易维护的方式来管理Webpack的配置。"}, {"id": "6937560479795511303", "title": "走进 React Fiber 的世界", "desc": "Fiber 是对 React 核心算法的重构，facebook 团队使用两年多的时间去重构 React 的核心算法，在 React16 以上的版本中引入了 Fiber 架构，其中的设计思想是非常值得我们学习的。 我们知道，在浏览器中，页面是一帧一帧绘制出来的，渲染的帧率与设备的…"}, {"id": "6844904012790104077", "title": "21个让React 开发更高效更有趣的工具", "desc": "为了保证的可读性，本文采用意译而非直译。 下列工具中的重要性与排序无关。 有没有想过你的应用程序的哪些包或哪部分代码所占总大小的多少? Webpack Bundle Analyzer可以帮助咱们分析。 Webpack Bundle Analyzer创建一个实时服务器，并提供依赖…"}, {"id": "6992772354854109221", "title": "redux-saga:运用~原理分析~理解设计目的", "desc": "前言 之前在理解redux-thunk和redux-promise?从学习redux中间件开始介绍了redux的中间件机制以及分析了redux-thunk和redux-promise两个常用的中间件源"}, {"id": "6986220138013917220", "title": "【周末充电~】来探究一下redux-saga的实现", "desc": "前言 以前，由于技术栈的原因我很少使用redux。因为开始我认为hooks下不分青红皂白的盲目使用redux显然是非常不明智了。我一直认为我们应该把主要精力放到主要的事情上，不应该给项目引入的额外的复"}, {"id": "6989902048464633864", "title": "react中的setState真的是异步执行的吗？", "desc": "在开发中，我们经常需要在修改 state 的值之后获取到更新后的 state 。但是却发现在使用 setState 之后，通过 this.state.xx 引用的是修改前的值，所以我们就以为 reac"}, {"id": "7002619680804306952", "title": "React - 扩展", "desc": "1.setState setState更新状态的2种写法 (1). setState(stateChange, [callback])------对象式的setState 1.stateChange为"}, {"id": "6984616593498046495", "title": "react + tyepscript 项目的尝试", "desc": "失败记录 关于 react + typescript 项目更新 dependencies 或更新 yarn 都会遇到无法解决的问题 步骤 第一步, 创建项目 npx create-react-app "}, {"id": "6965302793242411021", "title": "React的性能优化(useMemo和useCallback)的使用", "desc": "一、业务场景 1、使用类定义一个父组件 2、定义一个子组件 3、定义一个孙子组件 4、上面几个组件是比较标准的react的类组件,函数组件也是类似的，当你在父组件中点击按钮，其实你仅仅是想改变父组件内"}, {"id": "7000028364023169032", "title": "【React】知识梳理：组件的生命周期", "desc": "React生命周期图 React的生命周期从广义上分为以下三个阶段（挂载、渲染、卸载）。包括16.4更新的新的生命周期。"}, {"id": "6858276396968951822", "title": "受控和非受控组件真的那么难理解吗？(React实际案例详解)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆。 最近都没怎么输出了😂，不是停更通知就是\"软文\"，还是有点不好意思的。问题不大，我道(皮)谦(厚)咯😄。 所以今天咱再来聊点技术相关的东西吧，也就是本篇的标题——受控和非受控组件。 写这篇文章的原因是呆呆在写HOC…"}, {"id": "6844903753284321294", "title": "如何实现一个react-router路由拦截（导航守卫）", "desc": "正如其名，vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。 当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。 在这里，我们可以看到，vue在所有的路由跳转前，在before…"}, {"id": "6981278606169210916", "title": "一个动画演示代码的工具，答应我以后别再讲不清代码的逻辑了", "desc": "我之前因然叔文章中的动画影响，心血来潮写了一个小工具，可以通过编程的方式快速的设计整个动画，这次我想试试用这个工具还原一下“大帅老猿”的动画"}, {"id": "6954289707610046500", "title": "react-router", "desc": "react-router 使用react-router-dom进行路由 模式使用 HashRouter ：哈希模式 BrowserRouter： 路由参数 Redirect ：跳转 dva redux"}, {"id": "6844903903570427918", "title": "这些 UI 框架都存在对比度问题 - WCAG", "desc": "作为一个 UI 框架开发者，越来越多的人反馈给我同一个问题：网页中一些链接的对比度有些低，导致在个别显示器上存在看不清的问题。对一些服务于中后台产品的 UI 框架来说，中老年的老板是一个特殊的群体，往往视力都没那么好，所以网页上文本的对比度就显得尤为重要。 这是一个知名 UI …"}, {"id": "6844903694631174158", "title": "为什么ReasonReact是编写React的最佳方式", "desc": "你是否使用 React 来构建用户界面？好吧，我也是。接下来你会了解为什么要使用 ReasonML 来写 React 应用。 如果你有深入了解 React，你会发现它的一些主要原则对 JavaScript 来说是陌生的，让我们就 不可变性，函数式编程原则，特别是类型系统来讨论一…"}, {"id": "6844904032130039821", "title": "react脚手架+antd-mobile的项目配置", "desc": "引入 react-app-rewired 并修改 package.json 里的启动配置。由于新的 react-app-rewired@2.x 版本的关系，你还需要安装 customize-cra。 1. antd-mobil的按需引入"}, {"id": "6844903984835248136", "title": "深入理解 React Hooks", "desc": "Hook 是 React 16.8 中的新增功能。它们允许您在不编写类的情况下使用状态和其他 React 功能。HOOKS 只能在函数组件中使用 React.memo 是一个高阶的组件。它类似于 React.PureComponent 。不同的是，它只对组件接受的 props …"}, {"id": "6974361005048479781", "title": "React之ref相关使用解析", "desc": "使用React.forwardRef来获取传递给它的ref，然后转发到button的DOM上，在使用MyBtn的组件就可以获取底层DOM节点button的ref; ref的创建场景有如下几种： 上面例"}, {"id": "6904871562856415240", "title": "三篇短文让你学会 NextJS（二）", "desc": "上篇入门了next的路由系统，今天我们继续聊next这个框架。主要聊三个话题：CSS组件样式问题/数据请求/SEO信息配置CSS样式导入首先，我们来看一下全局样式的导入。在项目目录下新建一个style"}, {"id": "6904499520735084557", "title": "基于 React 的 mini-router 组件库开发", "desc": "mini-router 是基于 React 的轻量前端路由组件库，目的是帮助大家理解前端路由库的开发原理和配合 React 开发路由组件的实践过程。适合刚学习前端和 React 开发的同学，作为深入理解前端路由知识领域的学习。 一般路由库中会提供两种路由模式，分别是：哈希路由和…"}, {"id": "6970193137838850061", "title": "浅谈react-redux基本使用", "desc": "参考资料： https://juejin.cn/post/6844903846666321934#heading-5 https://juejin.cn/post/692650936059612366"}, {"id": "6844903951674900494", "title": "React学习笔记", "desc": "React是用于构建用户界面的JavaScript库。由FaceBook开发的，能简单，快速，高效地开发复杂和交互式的Web和移动UI。优点体现在开发效率、维护、组合扩展、生态、组件化思想等。现在，React有一个很大的支持社区。 声明式。配合使用JSX，以声明式编写UI, 使…"}, {"id": "6844903623609024519", "title": "React jsx 中写更优雅、直观的条件运算符", "desc": "在这篇文字中我学到了很多知识，同时结合工作中的一些经验也在思考一些东西。比如条件运算符 在jsx中书写条件语句我们经常都会使用到的就是三目运算符(?:)也叫内联条件运算符，可能大家都有体会三目运算符并不是一种直观的书写方式。特别是在复杂情况下时。 经过尝试确实是可行的，于是我做…"}, {"id": "6844903784162787342", "title": "浅谈 React Hooks（一）", "desc": "随着不久前 React@16.8.0 的发布，Hooks 也算是正式来到了幕前。个人觉得对React来说，Hooks 可以算是一个里程碑式的功能。本文不会详细介绍 Hooks，如果对 Hooks 还不是很了解的，可以先看下 Introducing Hooks。 简单来说 Hoo…"}, {"id": "6844903638108733454", "title": "基于React 源码深入浅出setState:setState异步实现", "desc": "在React启示录里我们说setState是异步的，我们在代码中也展示了这种特性，那么FB的工程师们是如何实现呢，本文将基于React的源码进一步揭开这层面纱。 3. 基于第二点的说明，再回头看看官网对function的写法，我们知道为什么这个函数的第一参数叫 preState…"}, {"id": "6844904053982363656", "title": "假期无聊，不如写写简单版React", "desc": "各位小伙伴，春节假期已过大半，这个春节应该是历年来过的最安静的一个春节了吧，天天家里蹲，吃了睡，睡了吃，没想到不出门竟然成了对社会最大的贡献。废话不多说，开始说正题。 相信很多人都用过react开发项目，也有很多人好奇页面中明明没有直接用到React，但是页面却必须引入Reac…"}, {"id": "6844903988383449096", "title": "(翻译)用react-spring以react hook组件的形式编写动画", "desc": "React Spring具有基于钩子和基于组件的API，这里将专门针对所有动画使用具有基本状态的钩子，建议先学习React Hooks相关知识。 在下面App.js文件中，使用了react-spring库中的UseSpring和animated，UseSpring是一个可以设置…"}, {"id": "6844903814869467149", "title": "使用 Hooks 创建异步组件", "desc": "这样我们能够用 React 进一步的实践函数响应式编程（FRP）。类似的模式并不新鲜，几年前 Cycle.js 就已经这么做了： 不同的是，Cycle.js 偏爱 Hyperscript，React 则是 JSX，也没有使用 FRP 框架或者 Observable（RxJS 或…"}, {"id": "6913855613466329096", "title": "Jest + RTL VS Cypress，一次掌握两种React测试写法。", "desc": "参考自cypress官方提供的博客：文章链接，博客提供了一个很好的例子帮助我们从Jest+React Testing Library到Cypress + cypress-react-unit-test迁移。通过阅读本文，可以理解两个库的React单测入门。 在用Jest那一套进…"}, {"id": "6844904039755300872", "title": "React生命周期", "desc": "React组件的生命周期实际是提供给React用于将React元素构建渲染挂载到真实的Dom节点的各个时期的钩子函数。各个生命周期函数提供，使得在开发组件时可以控制各个时期执行不同的操作，如异步的获取数据等。 constructor()：需要在组件内初始化state或进行方法绑…"}, {"id": "6844903551370543117", "title": "React系列之高阶组件HOC实际应用指南", "desc": "Higher-Order function（高阶函数）大家很熟悉，在函数式编程中的一个基本概念，它描述了这样一种函数：这种函数接受函数作为输出，或者输出一个函数。比如常用的工具方法reduce，map等都是高阶函数 通俗的语言解释：当我们用一个容器（w）把React组件包裹，高…"}, {"id": "6847902225524752391", "title": "react学习总结(二)：关于react路由那些事儿", "desc": "路由放到前面说，同时也是我开始学习react最先想要搞懂的。因为我们写的前端页面毕竟只有一个，随着业务增加，或者根据UI设计图，N个页面，驱动N个页面流通的便是<路由>不知道说法有没有问题，个人理解。毕竟很多文档讲到前端路由，都会从他的起源开始说。 至少，路由搞懂以后，对于之后…"}, {"id": "6844904048366190600", "title": "《深入浅出React和Redux》学习笔记（三）", "desc": "对于非常巨大的代码库和庞大的组织，MVC框架很快变得很复杂。每新增一个功能时，对代码的修改很容易引入新的Bug,不同模块之间的依赖关系让系统变得“脆弱且不可预测”。 removeListener函数：和on函数做的事情相反，删除一个挂在此EventEmitter对象特定事件的处…"}, {"id": "6844903558547177480", "title": "通过GitHub Blame深入分析Redux源码", "desc": "... Redux的文件结构并不复杂，每个文件就是一个对外导出的函数，依赖很少，分析起来也比较容易，只要会用Redux基本上都能看懂本文。"}, {"id": "6844903510203596814", "title": "React.js 小书 Lesson3 - 前端组件化（二）：优化 DOM 操作", "desc": "看看上一节前端组件化（一）：从一个简单的例子讲起我们的代码，仔细留意一下 changeLikeText 函数，这个函数包含了 DOM 操作，现在看起来比较简单，那是因为现在只有 isLiked 一个状态。由于数据状态改变会导致需要我们去更新页面的内容，所以假想一下，如果你的组件…"}, {"id": "6844903638578495495", "title": "React v16.3之后的组件生命周期函数", "desc": "React v16.3虽然是一个小版本升级，但是却对React组件生命周期函数有巨大变化，这个话题其实应该早就讲一讲，一直忙，拖到今天才有机会和大家分享一下。 React v16.0刚推出的时候，是增加了一个componentDidCatch生命周期函数，这只是一个增量式修改，…"}, {"id": "6844903544076648461", "title": "深入理解React源码 - 简单组建渲染 II (英文)", "desc": "UnderstandingTheReactSourceCode — InitialRendering(SimpleComponent)IIPhotobyJezTimmson UnsplashInthe"}, {"id": "6844903543451680781", "title": "Advanced-react-patterns(1)", "desc": "本文主要是为了学习最近比较热门的advanced-react-pattern，希望借助该项目，学习一些比较实用的 React 写法，优化代码结构。 http-server: 可以帮助我们在本地快速启动一个server,默认端口号是 8080，可以理解为静态资源服务器。(这只是个…"}, {"id": "6941615724070699044", "title": "渲染流程", "desc": "其中 React 主要的工作是组件实现、更新调度等计算工作；而 ReactDOM 提供了在网页上渲染的基础。 也正因为这样的拆分，当 React 向 iOS、Android 开发时，只需要通过 React Native 提供 Native 层的元素渲染即可完成。 虚拟 DOM …"}, {"id": "6941534924650332174", "title": "解读Redux中间件源码", "desc": "目的：将所有的middleware串联在一起，并保证最后一个执行的是dispatch(action)。 compose方法:从左到右组合多个函数。 思路：用compose方法组合函数，封装最后一个函数作为dispatch(action)方法。 给每个middleware都传递s…"}, {"id": "6844903733705310221", "title": "React怎样从函数中辨别类", "desc": "当你render一个<Greeting />的时候，你不需要关心它是如何定义的。 在两种情况下React的目标都是获取被渲染的节点（在这个例子中就是，<p>Hello</p>）。但是具体的步骤取决于Greeting是怎样定义的。 正如我之前文章所说的，不知道这些你也能使用Rea…"}, {"id": "6844903567594110989", "title": "[英] 深入理解React源码－界面更新（DOM树）IX", "desc": "Last time we went through the process from setState() to the updating of a single DOM. We also analyzed the diffing algorithm, which is far…"}, {"id": "6844903559343898631", "title": "React 要出新 Context API 了", "desc": "一个月前，React 团队 从 yarn，rust 和 Ember 的 rfcs 仓库 受到启发，建立了一个自己的 rfcs 仓库。仓库第一个 PR 来自 Andrew Clark（React 团队核心成员），PR 标题为 New version of context"}, {"id": "6844903943584104456", "title": "React基础（一）", "desc": "React.js是一个构建页面UI的库。 一个组件的显示形态和行为有可能是由某些数据决定的。而数据也可能发生改变的。 React.js提供一种非常高效的方式帮助我们做到数据和组件显示形态之间的同步。 React.js 只是个UI库，提供UI层面的解决方案，在实际项目中，需要借助…"}, {"id": "6844903590927007757", "title": "React 生态系统", "desc": "来源：GitChat-Yeh. 引言 要了解React的思想，还得从下面这张图说起。 The State-Action-Model (SAM) Pattern 话说2016年2月的一篇文章no-more-mvc-frameworks描述了一种新的函数式、响应式模型，而它的思想来…"}, {"id": "6844903853943422984", "title": "[React Hooks 翻译] 3-8 State Hook", "desc": "Hook出来以前，函数组件和无状态组件是等价的，但是Hook出来以后，函数组件也可以有状态了，此时二者并不等价。所以我们现在更喜欢使用函数组件这个名字 什么是Hook？Hook就是一个钩子函数，用Hook就能从函数组件里hook到React state和生命周期。比如useSt…"}, {"id": "6844903983752953864", "title": "[译]React核心概念11：以React的方式思考", "desc": "在我们看来React是构建大型快速反应的Web应用的首选方式。我们已经在Facebook和Instagram里面证实了React能够运行地非常完美。 React最棒的部分之一是引导我们思考如何构建一个应用。在本章中，我们将会带领你领略使用React构建产品搜索应用的全过程。 想…"}, {"id": "6844903983664857096", "title": "[译]React核心概念6：条件渲染", "desc": "React中的条件渲染与JavaScript一致。使用JavaScript运算符（如if或条件运算符）来创建代表当前状态的元素，之后让React更新UI以匹配它们。 现在我们来创建一个Greeting组件来根据用户是否已经登录展现上面两个组件之一。 上面的例子根据isLogge…"}, {"id": "6844904048361996302", "title": "《深入浅出React和Redux》学习笔记（二）", "desc": "分而治之：每个小的组件只关注实现单个功能，但这些功能组合起来，也能满足复杂的实现需求。 拆分组件最关键的就是确定组件的边界，每个组件都应该独立的存在。 组件的划分要满足高内聚(High Cohesion)和低耦合(Low Coupling)的原则。 高内聚：把逻辑紧密相关的内容…"}, {"id": "6912730765868400648", "title": "一、认识 react", "desc": "React是什么呢？这里我们来看一下官方对它的解释：用于构建用户界面的 JavaScript 库。 而Angular在国内并不是特别受欢迎，尤其是Angular目前的版本对TypeScript还有要求的情况下。 Vue和React是国内最为流行的两个框架，而他们都是帮助我们来构…"}, {"id": "6844903504289480718", "title": "深入理解 JavaScript 复制", "desc": "之前已经在JavaScript“深浅复制”上踩过很多坑了，没想到这两天在 redux 上把这个坑又踩了一遍。想来或许还有很多人在这部分有很多困惑，所以谨以此记录，共勉。 踩过这些坑之后，我个人以为网络上的“深浅复制”概念给很多人都造成了误导。我们姑且抛弃“深浅复制”的概念，在J…"}, {"id": "6844903638364585991", "title": "redux中间件的源码的一些理解", "desc": "只有二十多行的代码，却非常精简middleware的设计有点特殊，是一层层包裹的匿名函数，最后会形成_dispatch=mid1(mid2(mid3(...(store.dispathch)))),将"}, {"id": "6844903769386254344", "title": "React 测试指南", "desc": "对于一个 Web 应用来说，理想的测试组合应该包含大量单元测试（unit tests），部分快照测试（snapshot tests），以及少量端到端测试（e2e tests）。参考测试金字塔，我们构建了前端应用的测试金字塔。 针对程序模块进行测试。模块是软件设计中的最小单位，一…"}, {"id": "6844903694991884296", "title": "React服务端渲染（代码分割和数据预取）", "desc": "前几节已经把项目基本骨架和路由搭建好了，但作为实际项目开发，这些还是不够的。随着业务的增大，应用层序代码也随之增大，如果把所有代码都打包到一个文件里面，首次加载会导致时间相对变长，增加流量（对移动端来说）。应用程序包含很多页面，某一时刻用户只会访问一个页面，用户未访问的页面代码…"}, {"id": "6850037275968536584", "title": "React 与前端开发的那些年", "desc": "在导航栏中有“新好友”、“新消息”和“新动态”三个功能按钮，这其实功能挺简单，但却经常出 BUG，比如“收到新消息后，新消息的图标上数字没有正确更新”等问题。 大家可以先猜一下导致这个问题可能的原因。 2.「应用程序的状态较为分散，无法追踪和维护」。 2.已有前端框架开发的「复…"}, {"id": "6844903705708331022", "title": "Omi 拥抱 60FPS 的 Web 动画", "desc": "Omi 框架 正式发布了 → omi-transform。 作为 Omi 组件化开发特效运动解决方案，让你轻松在Omi项目里快速简便支持CSS3 Transform设置。css3transform 是经受过海量项目洗礼的，作为移动 Web 特效解决方案，在微信、手Q兴趣部落、日…"}, {"id": "6844903918120468488", "title": "React 中 render 函数的执行时机", "desc": "在刚开始学习 React 的时候，我认为组件的 state 或者 props 改变时，就会触发组件的 render 函数执行。后来我通过一系列的试验发现，state 不改变也可以触发 render 函数的执行，props 改变了也不一定触发 render 函数的执行，下面通过一…"}, {"id": "6844904062882676743", "title": "《精通react/vue组件设计》之5分钟教你实现一个极具创意的加载(Loading)组件", "desc": "本文是笔者写组件设计的第八篇文章, 今天带大家用5分钟实现一个极具创意的加载(loading)组件.涉及的核心知识点主要是css3相关特性, 如果大家非常熟悉,可直接跳过介绍直接看正文. 通用型组件: 比如Button, Icon等. 布局型组件: 比如Grid, Layout…"}, {"id": "6861527942070009869", "title": "[Concent小课堂]认识组合api，换个姿势撸更清爽的react", "desc": "composition api（组合api） 和 optional api（可选api） 两种组织代码的方式，相信大家在vue3各种相关的介绍文里已经了解到不少了，它们可以同时存在，并非强制你只能使用哪一种，但组合api两大优势的确让开发者们更倾向于使用它来替代可选api。 以…"}, {"id": "6844903554306539528", "title": "从1.8万篇文章中脱颖而出45个最棒的 React.js 学习指南（2018版）", "desc": "作者研究了近1.8万篇 React.js 文章得出这篇总结，全文既包含 React 入门，进阶和综合应用专题，也包括对路由、React Native、动画、PWA等内容的专题介绍，其中还不乏各大公司团队在前端重构的经验以及热门美剧《硅谷》在 react native 上的尝试……"}, {"id": "6844903735135584264", "title": "数据可视化，BizCharts图表库入坑历程", "desc": "作为一个前端打字员，除了绿茶婊之外，最讨厌的就是图表：一个让我伤心，一个让我难过；比这更讨厌的就是文档写得不清不楚的图表库（大概率是九年义务教育期间没有学好语文），让我又爱又恨！所以本篇博文会比较枯燥，只简单描述一下使用BizCharts的过程，当然，重要的是总结遇到的坑（遵从…"}, {"id": "6844903989180366856", "title": "React Hooks技术最佳实践（二）", "desc": "useEffect是除useState之外使用最常用的Hooks之一，它可以用来管理副作用，替代传统class组件中的componentDidMount和componentWillUnmount方法或是根据依赖项来执行代码。 useEffect的用法并不复杂，但是如果对于它的执…"}, {"id": "6883670059291115534", "title": "深入浅出之 swr", "desc": "目录解析参数依赖处理全局配置请求数据逻辑回调处理循环请求缓存处理总结解析参数从API来看,接收3个参数,我们再看看源码从这段代码可以看出,调用可以传fetcher,也可以不传fetcher,可以将fe"}, {"id": "6914489464131846158", "title": "一眼就懂的 React 调度算法", "desc": " react的调度，采用优先级调度（Priority），代码量大且复杂，看了下fre中的调度实现（最短剩余时间优先），比较精简且适合快速学习。问题产生：GUI渲染线程与JS引擎是互斥的，所以需要避免j"}, {"id": "6919800368046178318", "title": "前端学习笔记（十八）--React学习-4", "desc": "今天在油管看慕课网的 React 教程(出口转内销。 1. 各种小细节 因为看过文档，就简单过一遍。顺便也学到了很多小细节。 1. 为什么很多时候没有看到对 React 的引用，也要导入 React 原因其实我应该是知道的，但是一时间没有联系起来。 因为这些文件里都有 JSX …"}, {"id": "6844903866299842567", "title": "一种让小程序支持JSX语法的新思路", "desc": "React社区一直在探寻使用React语法开发小程序的方式，其中比较著名的项目有Taro，nanachi。而使用React语法开发小程序的难点主要就是在JSX语法上，JSX本质上是JS，相比于小程序静态模版来说太灵活。本文所说的新思路就是在处理JSX语法上的新思路，这是一种更加…"}, {"id": "6844903664197320718", "title": "JavaScript集成Sentry", "desc": "在我们公司之前的应用场景里，很多项目都是使用kibana来做信息统计。但是我们无法清楚的知道应用的运行状态是怎么样的。当某个客户在使用我们开发产品时，如果报错、崩溃。用户只能向客服寻求帮助，再交接给我们的开发人员进行复现、修复。其中因为不清楚具体的数据，开发人员是在复现时会非常…"}, {"id": "6967351047027326989", "title": "React 03 :: Redux状态管理(续) -- 使用thunk中间件", "desc": "前言 上一篇中，我们介绍了Redux的一些基础知识，还有基本实现，还介绍了如何实现同步和异步的Action与ActionCreator。 如果还没有看上一篇的小伙伴，可以去看看一看我的上一篇帖子。 h"}, {"id": "6972370161290444808", "title": "什么是react hooks", "desc": "这是我参与更文挑战的第11天，活动详情查看： 更文挑战 Hooks的许多卖点之一是避免了类和高阶组件的复杂性。然而有些人觉得Hooks可能会导致另外的问题。虽然不需要再担心绑定上下文，现在我们需要担心"}, {"id": "6844903687375028237", "title": "做一个跑通前后端的`豆瓣租房`移动端webApp", "desc": "最近学了react，一直想做一个项目，没有什么好的主意。因为自己也要租房住，就想到了租房App这个idea，参考豆瓣租房小程序，着手了这样一个简陋的前后端项目😄。 项目技术栈react+react-router+react-redux，用create-react-app脚手架…"}, {"id": "6919115403146821639", "title": "写给自己看的React源码解析（二）：setState是同步还是异步的？", "desc": "这个问题相信是大部分的人刚开始学习React的时候，第一个碰到的问题，对我来说，学习的教程里就只是告诉我直接使用setState是异步的，但是在一些比如setTimeout这样的异步方法里，它是同步的。 我那时候就很疑惑，虽然想要一探究竟，但是为了尽快上手React，还是以应用…"}, {"id": "6911203492610867214", "title": "【react】走进React核心团队", "desc": "当我第一次来到Facebook的React团队工作时，我有点茫然不知所措。从外部看，React核心团队规模看起来很庞大！但事实是，像Eli White和Sebastian McKenzie这样的人都是React Native团队的人。当你想到React的时候，你会想起很多著名的…"}, {"id": "6958422818820210702", "title": "前端基础笔记-react(一)", "desc": "1、配置开发环境 node -v 查看node版本 npm install create-react-app -g 全局安装create-react-app create-react-app my-p"}, {"id": "6844903848834760712", "title": "React 高阶组件（HOC）实践", "desc": "我们在调试代码时，经常都需要打印 props，所以可以将打印逻辑封装起来。 组件中的获取数据的逻辑也可以抽离成 HOC，需要传入 url， param 两个参数。 由于数据请求是异步的，为了不让用户看到一片空白，当数据请求还没有返回时，展示 Loading 组件。 如果一个组件…"}, {"id": "6989077214364958727", "title": "React 基础学习（一）", "desc": "PS：由于工作的原因，基本使用的是vue，想要自学react，就萌生了边学边做笔记的的想法，这样也算督促自己，也方便随时查看，想用的时候就直接能上手了。"}, {"id": "6844904105278701581", "title": "useReducer就是useState的升级版", "desc": "useReducer是useState的替代方案。它接收一个形如（state, action） => newState的reducer,并返回当前的state以及与其配套的dispatch方法。（如果你熟悉Redux的话，就已经知道它如何工作了。） 在某些场景下，useRedu…"}, {"id": "6960843735714234405", "title": "学使用React+TypeScript+styled项目搭建", "desc": "目录 使用create-react app (简称cra) CSS reset 配置SCSS 配置styled-component 用React Router添加底部导航 引入SVG lcon 创建项"}, {"id": "6844903998768545800", "title": "一文说清「VirtualDOM」的含义与实现", "desc": "随着 React 的兴起，Virtual DOM 的原理和实现也开始出现在各大厂面试和社区的文章中。其实这种做法早在 d3.js 中就有实现，是 react 生态的快速建立让它正式进入了广大开发者的视角。 ⚠️ 整理后的代码和效果图均存放在github.com/dongyuan…"}, {"id": "6988810756116447262", "title": "手写傻瓜式 React 全家桶之 React-Redux", "desc": "上一篇手写了 Redux 源码，同时也说明了 Redux 里头是没有 React 相关的 API，这篇咱们来写下 React-Redux，那么 React，Redux 以及 React-Redux 关"}, {"id": "6870291409841160206", "title": "React源码解析-React.createElement", "desc": "从上面代码可以看出createElement最后返回了ReactElement对象，createElement传入了三个参数：typeconfigchildrentype：指的是ReactElemen"}, {"id": "6844903679418433550", "title": "聊聊React v16.3的UNSAFE类生命周期", "desc": "不知道小伙伴有没有注意到，自从react更新到16.3版本后，以前使用的componentWillMount、componentWillReceiveProps、componentWillUpdate三个生命周期函数都有eslint报警，让我们使用UNSAFE_前缀的新的生命周…"}, {"id": "6996844477855825933", "title": "03 - 对比react15 、16，一个组件的一生该如何度过（下）？", "desc": "本篇主要对比了，React 15 与 React 16的生命周期在挂载、更新、卸载阶段的流程、区别。并总结了相关函数的使用特点、注意事项。通过对生命周期的学习对比，从现象看本质，了解React..."}, {"id": "6845166891665719303", "title": "魔力的一页大屏flash插件直播", "desc": "原有的项目是用的layui+jq搭建。现在将大屏部分独立出来； flash部分，完全脱离文档流，独立的窗口。不可以在上面定位任何的图标。这就导致很多功能无法去实现。 flash容易卡死在网页上，当用户频繁操作时。 flash视频音量的控制，实际上是控制整个计算机系统的音量，并不…"}, {"id": "6975054155203215391", "title": "React和React Native页面级崩溃处理：componentDidCatch(错误边界)", "desc": "部分 UI 的 JavaScript 错误不应该导致整个应用崩溃，为了解决这个问题，React 16 引入了一个新的概念 —— 错误边界。 错误边界是一种 React 组件，这种组件可以捕获发生在其子"}, {"id": "6945279178371514376", "title": "[React Hooks长文总结系列一]初出茅庐，状态与副作用", "desc": "React Hooks在我的上一个项目中得到了充分的使用，对于这个项目来说，我们跳过传统的类组件直接过渡到函数组件，确实是一个不小的挑战。在项目开发过程中也发现项目中的其他小伙伴（包括我自己）有时候会存在使用不当的情况，因此对官方的几个钩子函数做一个较为全面的总结。 我们知道，…"}, {"id": "6992742212769415199", "title": "React中redux的使用", "desc": "redux的基本使用 为什么要使用Redux 在项目中使用reudx redux的中间件 开发一个redux中间件"}, {"id": "6844903509121302536", "title": "组件库设计实战系列：复杂组件设计", "desc": "一个成熟的组件库通常都由数十个常用的 UI 组件构成，这其中既有按钮（Button），输入框（Input）等基础组件，也有表格（Table），日期选择器（DatePicker），轮播（Carousel）等自成一体的复杂组件。 这里我们提出一个组件复杂度的概念，一个组件复杂度的主…"}, {"id": "6844903501143752718", "title": "手把手教你用React实现一个简单的个人博客", "desc": "这个项目其实功能很简单，就是常见的主页、博客、demo、关于我等功能。 页面样式都是自己写的，黑白风格，可能有点丑。不过还是最低级的 CSS ，准备到时候重构 ~ antd：部分组件懒得自己写。。 由于不是使用 React 脚手架生成的项目，所以每个东西都是自己手动配置的。。。…"}, {"id": "6898953691983069198", "title": "as 的 用法", "desc": "有时候会遇到一些情况，你会比 TypeScript 更了解 某个值的详细信息。通常这会发生在你清除地知道 一个实体 具有 比 它 现有类型更确切的类型。 通过类型断言 这种方式可以告诉编辑器，“相信我，我知道自己在干嘛。”类型断言好比其他语言的类型转换，但是不进行特殊的数据检查…"}, {"id": "6857707115524390926", "title": "使用React框架之扩展webpack", "desc": "1. 插件安装 2. 配置config 3. 命令重写 4. 一个模版"}, {"id": "6844903903805308936", "title": "React Hooks 深入系列 —— 设计模式", "desc": "本文是 React Hooks 深入系列的后续。此篇详细介绍了 Hooks 相对 class 的优势所在, 并介绍了相关 api 的设计思想, 同时对 Hooks 如何对齐 class 的生命周期钩子作了阐述。 React 的 logo 是一个原子图案, 原子组成了物质的表现。…"}, {"id": "6844904062060593165", "title": "《精通react/vue组件设计》之实现一个健壮的警告提示(Alert)组件", "desc": "本文是笔者写组件设计的第七篇文章, 今天带大家实现一个自带主题且可关闭的Alert组件, 该组件在诸如Antd或者elementUI等第三方组件库中都会出现,主要用来提供系统的用户反馈. 通用型组件: 比如Button, Icon等. 布局型组件: 比如Grid, Layout…"}, {"id": "6844903793683857421", "title": "一个很有意思的hook库：react-hanger", "desc": "千呼万唤始出来，React Hooks终于在React 16.8版本中发布稳定版了。最近逛github发现了一个很有意思的库：react-hanger。 如果对Hooks还不怎么了解的同学，建议去看一下官方文档：Introducing Hooks. 我们都知道，在Hooks之前…"}, {"id": "6844903837971529741", "title": "[译] Elixir、Phoenix、Absinthe、GraphQL、React 和 Apollo：一次近乎疯狂的深度实践 —— 第一部分", "desc": "不知道你是否和我一样，在本文的标题中，至少有 3 个或 4 个关键字属于“我一直想玩，但还从未接触过”的类型。React 是一个例外；在每天的工作中我都会用到它，对它已经非常熟悉了。在几年前的一个项目中我用到了 Elixir，但那已经是很早以前的事情了，而且我从未在 Graph…"}, {"id": "6844903902500880392", "title": "从零开始，揭秘React服务端渲染核心技术", "desc": "在早几年前，jquery算是一个前端工程师必备的技能。当时很多公司采用的是java结合像velocity或者freemarker这种模板引擎的开发模式，页面渲染这块交给了服务器，而前端人员负责用jquery去写一些交互以及业务逻辑。但是随着像react和vue这类框架的大火，这…"}, {"id": "6844903924483244039", "title": "基于react开发的带富文本编辑功能的思维导图编辑器开源啦", "desc": "这个项目用到了我开发的思维导图类库blink-mind,支持以插件的方式定制任何想要的需求。 思维导图节点的文本编辑器是基于slate的富文本编辑器，类似于medium的编辑体验。 2. 移动整个画布 3. 节点之间可以通过拖动移动位置"}, {"id": "6844903905302675470", "title": "从写一个分页表格来讲讲react hook怎么玩", "desc": "React hook已经出来已经很长时间，之前一直没有去了解，最近花时间看一下，还是颇有感触，使用React开发也已经有挺长时间，在开发过程中，对组件的拆分，自认做得还是比较细致，小到一个标题都会拆分成一个组件，但是对于一些组件相同逻辑的处理，一直做得不太到位，于是乎总是会在类…"}, {"id": "6844903638230368269", "title": "基于react-intl实现手动国际化切换", "desc": "国际化是一个很常见的需求，之前没有这方面的相关经验，所以决定练一下手。正好最近在写一个react骨架（新项目可直接移植的骨架），上网查了一下，常用的解决方案是yahoo的react-intl库，大致效果如下。 首先解决静态国际化，即根据浏览器的语言，自动加载对应的语言模板。这里…"}, {"id": "6844903609411305479", "title": "react-router原理之路径匹配", "desc": "本文的目的是讲清楚react-router如何根据浏览器中的url来渲染不同的组件的，至于url是如何改变的（Link组件）请参见下一篇react-router原理之Link跳转。 react-router提供了专门的路由匹配方法matchPath(位于packages/rea…"}, {"id": "6903683446774693902", "title": "React 学习笔记", "desc": "返回一个 state，以及更新 state 的函数。 在初始渲染期间，返回的状态 (state) 与传入的第一个参数 (initialState) 值相同。 setState 函数用于更新 state。它接收一个新的 state 值并将组件的一次重新渲染加入队列。 在后续的重新…"}, {"id": "6991729939850461221", "title": "手写实现 createStore、bindActionCreators、combineReducers", "desc": "React 学习之 Redux 篇：代码实现 createStore， bindActionCreators 以及 combineRucers 方法"}, {"id": "6844903685508562951", "title": "React 高阶组件其实很简单", "desc": "React 高阶组件，其实没有想象的那么复杂。"}, {"id": "6844903602960465928", "title": "React 组件生命周期函数里 setState 调用分析", "desc": "React组件的生命周期函数和 setState 方法都是最基础的至少，但是如果把组件的生命周期和 setState 放在一起看就会有一连串的问题：生命周期函数里可以 setState 吗？什么时候 setState 合适呢？阅读完《深入React技术栈》第一和第三章，得出以下心"}, {"id": "6889889647061630990", "title": "React Router 入门与原理", "desc": "在 React 技术栈的学习过程中， React Router 已经成了一个必需品。它是完整的 React 路由解决方案。 本文还是希望读者不仅仅学会 React Router 的使用，更加要理解它的实现原理。 1、 React Router 理论篇：详细讲解 React Ro…"}, {"id": "6981722235933294600", "title": "React项目实战（上）", "desc": "拉勾教育图书电商项目实战 - 上 技术栈介绍 页面布局使用Ant Design组件库进行操作 客户端 前端框架：React 路由管理：react-router-dom 用户界面：antd（UI组件库）"}, {"id": "6844903704894636039", "title": "React 进阶之选择合适的组件类型", "desc": "最近项目基本都是用 React，今天总结分享 React Component 常见的几种形式，如果你在写 React 时经常不知道怎么拆分代码，这篇文章或许对你有所帮助。 为了更充分理解 React，先搞懂平时写的 JSX 是什么。初学的时候有比较大困惑，这是一门新语言吗？大部…"}, {"id": "6844903701342060557", "title": "React 16.x折腾记 - (5) 记录用React开发项目过程遇到的问题(Webpack4/React16/antd等)", "desc": "闲话不多说,直入主题,有兴趣的可以瞧瞧,没兴趣的止步,节约您的时间. 翻了一些Stack Overflow上的问答和文档,发现还是有的. 因为用了mobx,实在不想用高阶函数的写法(一堆括号)。 我是直接配置babelrc的. 跟随最新babel 7,装上这个依赖即可支持 看到…"}, {"id": "6844903841998045198", "title": "如何开发React UI组件库", "desc": "组件开发过程中没什么技术难点，主要是样式处理。"}, {"id": "6844903663777873928", "title": "React 16.x折腾记 - (4) 侧边栏联动Tabs菜单-增强版(结合Mobx)", "desc": "虽然还有一些什么mobx-router这类可以整合自定义浏览历史对象,但是我不想用。 所以跳转都是从外部触发了，有不对之处请留言，谢谢阅读。"}, {"id": "6977500020740194318", "title": "react源码解析20.总结&第一章的面试题解答", "desc": "react源码解析20.总结&第一章的面试题解答 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx"}, {"id": "6884101335294148616", "title": "React入门", "desc": "> (2)作用：将父组件传递过来的**`props`**映射到子组件的**`state`**上，组件内部就不用再通过**`this.props.xxx`**获取属性值了，统一通过**`this.state.xxx`**获取。映射就相当于拷贝了一份父组件传过 来的**`props…"}, {"id": "6844904066275868685", "title": "npx create-react-app xxx创建项目报错的解决办法", "desc": "根据React官方文档（上图）可以发现，此时并不需要安装create-react-app工具，只要你的node >= 8.10 && npm >= 5.6，就可以直接使用npx create-react-app命令来创建项目。 此时的我还是懵逼的，仔细检查了版本信息和命令，发现…"}, {"id": "6972554833735712781", "title": "《React 面试必知必会》Day5", "desc": "1. 协调（reconciliation）是什么？ 当一个组件的 props 或 state 发生变化时，React 通过比较新返回的元素和之前渲染的元素来决定是否有必要进行实际的 DOM 更新。"}, {"id": "6987197729046790175", "title": "React核心原理浅析", "desc": "本文对React的核心原理进行分析, 包括JSX、Diffing、Fiber、Time Slice等, 并且对React原理的学习方法进行了总结和建议."}, {"id": "6844903553765474311", "title": "2017 年崛起的 JS 项目", "desc": "和 2016年 一样，又到了我们回顾 2017年 Javascript 领域发展与变化的时候。 通过对比各项目过去 12 个月在 GitHub 上新增 star 数量，来评估其在 2017 年度的受关注程度，进而选出 2017 年度 JavaScript 领域崛起的明星项目。 …"}, {"id": "6844903733998911501", "title": "200行代码实现简版react", "desc": "现在(2018年)react在前端开发领域已经越来越🔥了，我自己也经常在项目中使用react，但是却总是好奇react的底层实现原理，多次尝试阅读react源代码都无法读下去，确实太难了。前不久在网上看到几篇介绍如何自己动手实现react的文章，这里基于这些资料，并加入一些自…"}, {"id": "6844903954539626510", "title": "react Hook之useMemo、useCallback及memo", "desc": "useMome、useCallback用法都差不多，都会在第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行，并且这两个hooks都返回缓存的值，useMemo返回缓存的变量，useCallback返回缓存的函数。 React.memo 为高阶组件。它与React.P…"}, {"id": "6993490630542360612", "title": "React入门七： 组件通讯", "desc": "这是我参与8月更文挑战的第六天，活动详情查看：8月更文挑战 1.组件通讯介绍 组件是独立且封闭的单元，默认情况下只能使用组件自己的数据。 在组件化过程中，我们将一个完整的功能拆分成多个组件，以便更好地"}, {"id": "6974050069146255391", "title": "React 面试必知必会 Day9", "desc": "1. 什么是切换组件？ 切换组件是一个渲染许多组件中的一个组件。我们需要使用对象来将 props 值映射到组件。 例如，一个切换组件可以根据 page props 显示不同的页面。"}, {"id": "6844903680978714638", "title": "[electron]终极奥义 五千字教程丢给你", "desc": "本文包含打包、自动更新、简易API、调试、进程通信等相关知识点，内容较多，可能会引起不适，请酌情查看（手动滑稽）。 electron是由Github开发，是一个用Html、css、JavaScript来构建桌面应用程序的开源库，可以打包为Mac、Windows、Linux系统下…"}, {"id": "6844903635017531405", "title": "VS Code 折腾记 - (14) 再来推荐一波大前端适用系列 (Node/React/Vue/小程序/主题/代码体验等) 的插件", "desc": "依旧是那句话,好的插件需要作者去创造,时间去迭代... Markdown Header Coloring : 给Markdown的标题区域添加一个亮瞎眼的颜色... 这里也不比较其他编辑器乃至IDE了,好不好用,用了就知道。 有不对之处请留言,会及时更正..."}, {"id": "6999555493647613989", "title": "【React】系列（一）", "desc": "一 React Class 组件中请求可以在 componentWillMount 中发起吗？为什么？ 看情况，如果是服务端渲染会拿不到数据。 componentWillMount方法的调用在cons"}, {"id": "6844904151487348749", "title": "万字总结记录我的React学习路程(附各个代码参考)", "desc": "本文是自己最近再学习React的总结和记录。尽力把每个示例代码都写了出来，尽力写的通俗易懂一些，也算是锻炼自己的讲述能力，据说给别人讲的话学的会更快，所以写下此文。 传送门 好像没用，本地都可以......... 在constructor设置状态。使用setState来改变状态…"}, {"id": "7004102013180968973", "title": "使用CRA搭建React脚手架", "desc": "通过cra来创建一个企业开发脚手架，包含antd，状态管理，请求，路由，权限，国际化，单元测试，nginx配置，docker打包和发布。"}, {"id": "7003150810943078431", "title": "ahooks 源码解读系列 - 15", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "7000206806156836901", "title": "jol-player，从需求到开源发布，一款轻量级，功能强大的react播放器", "desc": "使用 TypeScript 开发，提供完整的类型定义文件，主题，组件，定制能力，强大的 API 和回调函数， 体积小，80kb"}, {"id": "6983978778858881060", "title": "前端路由及React-Router解读", "desc": "本文来自推啊前端团队 刘爽 同学，主要介绍一下 前端路由相关内容和解读一下React-Router源码。"}, {"id": "6844904068435935240", "title": "2020 年你应该知道的 React 库", "desc": "React 已经诞生很久了，自从它诞生开始，围绕组件驱动形成了一个非常全面的生态，但是来自其他编程语言或者框架的开发人员很难找到要构建一个 React 系统的所有组件。如果你是来自于像 Angular 这样的框架的开发者，你可能已经习惯了框架包含了所需要的所有功能， 然而对于 …"}, {"id": "7000242572249530376", "title": "像学vue一样学习react，系列二（react组件）", "desc": "组件的定义 函数式组件一般使用于静态组件，不包含点击等事件 类组件使用于事件比较多的情况下 组件之间的交互 组件传参 (父->子) 父组件father.js 子组件child.js 组件传参 (子->"}, {"id": "7003586393091866637", "title": "关于useEffect的理解", "desc": "React16.8新增的useEffec这个hook函数就是处理副作用的。\\ 所谓的“副作用”，举个通俗一点的例子，假如感冒了本来吃点药就没事了，但是吃了药发现身体过敏了，而这个“过敏”就是副作用。 "}, {"id": "6988009229873315871", "title": "React源码系列之二：React的渲染机制", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第二篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6960600407437639688", "title": "React Fiber 原理剖析", "desc": "得益于 Virtual Dom 的应用，虚拟 Dom 是一种 HTML DOM 节点的抽象描述，存在 JS 中的结构对象中，当渲染时通过 Diff 算法，找到需要变更的节点进行更新，这样就节省了不必要"}, {"id": "6966868393546743821", "title": "React的数据流方案", "desc": "mobx一款可以与redux媲美的数据流方案，Flux思想单向数据流方案，以 Redux 为代表，Reactive响应式数据流方案。详细可看mobx 单向数据流实现"}, {"id": "6941973271210360845", "title": "面试官叫我手写 Redux - 1", "desc": "学生：是线下面试，给我电脑问我能不能写。我写不出来，老尴尬了 方：你如果想要理解一个库，最好就是先自己写一个类似的库，然后把自己的代码跟它的代码做对比。 学生：我看看 Redux 官网（10秒钟后）官网说 Redux is a predictable state contain…"}, {"id": "6932114518281551880", "title": "React , React-Hook, Redux", "desc": "32. React 元素: 也就是虚拟DOM. 组件: 返回元素的一个函数, vue里面一个构造选项可以表示一个组件. 如果传入一个字符串div, 就会创建一个虚拟dom. react-dom.development.js:13231 Uncaught Error: Objec…"}, {"id": "6844903614800986119", "title": "手把手教你在小程序里使用 Redux", "desc": "这里跟 reducer 里面的要区分，这里是可以对数据进行一系列处理的，我们通过 createAction 创建一个 action , 该方法主要有两个参数，第一个参数 type 表示 action 的类型，第二个参数 payloadCreator 是一个 function，处…"}, {"id": "6906362653724606478", "title": "重启React02--谈谈state和让你头大的生命周期", "desc": "首先需要明确的是setState的异步并不是内部代码的异步，setState本身和代码的执行过程同步，只是在部分事件和情况下因为调用事件本身执行顺序和event loop的原因导致的一些问题，要想避免在无论什么时候都可以实时得到state中的值最好的办法就是获取使用它的第二个参…"}, {"id": "6844903744207847437", "title": "为什么redux要返回一个新的state引发的血案", "desc": "博主在面试的过程中，面试官问 : “看你简历，Vue和React都使用过，你能说一下 Vue和React的区别嘛？”, 然后吧唧吧唧说了一下，于是！血案发生了，当我答道Vuex和Redux的时候，面试官问了一句，为什么Redux总是要返回一个新的 state ？返回旧的 sta…"}, {"id": "6844904162304458760", "title": "React Hooks 系列之6 useMemo", "desc": "掌握 React Hooks api 将更好的帮助你在工作中使用，对 React 的掌握更上一层楼。本系列将使用大量实例代码和效果展示，非常易于初学者和复习使用。 上一章，我们学习了 useCallback 来进行性能优化，关于性能优化还有另一个 hook api，那就是 us…"}, {"id": "6844903895949377544", "title": "Typescript结合React实践", "desc": "Typescript是JavaScript的一个超集，主要提供了类型系统和对es6的支持。本人使用ts编写react将近3个月的时间，中间踩了不少坑，从刚开始的觉得ts没有必要到现在觉得ts真香。在这里对使用ts编写react的心得做一下总结。 一个好的代码习惯是常常对自己写的…"}, {"id": "6844903656773386254", "title": "漫谈前端性能 突破 React 应用瓶颈", "desc": "性能一直以来是前端开发中非常重要的话题。随着前端能做的事情越来越多，浏览器能力被无限放大和利用：从 web 游戏到复杂单页面应用，从 NodeJS 服务到 web VR/AR、数据可视化，前端工程师总是在突破极限。随之而来的性能问题有的被迎刃而解，有的成为难以逾越的盾墙。 这篇…"}, {"id": "6844904202104209415", "title": "React技术揭秘2-2 双缓存机制", "desc": "通过上一节的学习，我们了解了Fiber是什么，知道Fiber节点可以保存对应的DOM节点。 相应的，Fiber节点构成的Fiber树就对应DOM树。 那么如何更新DOM呢？这需要用到被称为“双缓存”的技术。 当我们用canvas绘制动画，每一帧绘制前都会调用ctx.clearR…"}, {"id": "6917535948255756301", "title": "React  + TypeScript 怎么设置全局方法 & 全局变量", "desc": "在使用时可直接使用 this 来调用， 即 this.myFn()。 但是尴尬的事情发生了，由于项目中使用的是 TypeScript，因此会报错 Property 'myFn' does not exist on type 'Window &#x26; typeof globa…"}, {"id": "6954735308600508453", "title": "Dva中实现异步effect的原理分析", "desc": "dva框架中如何实现的利用redux-saga实现model中effects函数的异步处理，以及其源码分析"}, {"id": "6867077120691011591", "title": "深究useState的原理", "desc": "如上所示，当我们调用 myUseState 函数的时候，就可以达到与之前一样的效果，为了确保 n 值的变化，所以必须要把 x 放在函数的外面。但是很显然上面的代码是有问题的，因为如果我们有多个变量的话，也就是使用多次 myUseState ，一个单一的 x 中间值并不能存放我们…"}, {"id": "6959463412313096222", "title": "React高级前端面试---React Fiber", "desc": "通过React源码学习React Fiber的核心架构，源码基于React最新版本17.0.2，除了Fiber，也可以了解到其他关于React最新的源码及思想"}, {"id": "6972172870164152333", "title": "React - 优化长列表", "desc": "前言 在业务场景下，我们经常会遇到在一个滚动容器中渲染一组数据列表的需求。如果数据比较少，一次性全部渲染到列表中，在体验上感觉不出有什么问题，但对于较长的列表，比如通过接口查询到 1000 条数据，如"}, {"id": "6910802025445851143", "title": "Node全栈开发框架Blitz", "desc": "目的自从前端和后端分离之后，一个产品的实践好像变的不那么容易，因为你必须要找一个懂后端的人，通常是javaPHP，这意味开发成本加大。不过有人可能会说我能力强，node性能太垃圾，然而产品初期最关键的"}, {"id": "6844904055727194120", "title": "深入浅出React并发模式", "desc": "React Fiber架构有一定的复杂度，如果硬着头皮去啃源码，我们会深陷于庞大的代码量和实现细节之中，往往学不到什么东西。 React并发模式是ReactFiber架构的重要应用，本文不贴任何React源码，纯粹使用文字帮助大家从并发模式的角度去理解React Fiber架构…"}, {"id": "6844903608308236296", "title": "React Fiber架构", "desc": "写了一篇关于React Fiber架构的文章，详细介绍了React16的整体优化思路，及大致的实现过程， https://zhuanlan.zhihu.com/p/37095662"}, {"id": "6975038954710466567", "title": "用于React的集成设计和开发环境", "desc": "欢迎来到乌托邦🏝 Utopia是一个React的集成设计和开发环境。它使用React代码作为真理的来源，让你通过编辑代码和使用一套设计工具对组件进行实时修改。它是早期的软件，但你今天就可以尝试它，看一"}, {"id": "6988793355253596191", "title": "React脚手架入门", "desc": "React应用(基于react脚手架) react脚手架 用来帮助程序员快速创建一个基于xxx库的模板项目 包含了所有需要的配置(语法检查、jsx编译、devServer...)"}, {"id": "6844904174417608712", "title": "useRef使用总结", "desc": "下图是useRef的demo效果图，通过“一个父组件嵌套一个子组”件来总结一些知识点。 ref对象与自建一个{current：‘’}对象的区别是：useRef会在每次渲染时返回同一个ref对象，即返回的ref对象在组件的整个生命周期内保持不变。自建对象每次渲染时都建立一个新的。…"}, {"id": "6955736879106883597", "title": "如何做到修改了node_module中的包，却不受重新安装的影响", "desc": "我们可以通过使用patch-package来对项目中的插件进行修改，补丁可以同步共同开发的前端人员。最优雅的修改开源插件包的方案！"}, {"id": "6844903854174109703", "title": "精读《Function Component 入门》", "desc": "1. 引言 如果你在使用 React 16，可以尝试 Function Component 风格，享受更大的灵活性。但在尝试之前，最好先阅读本文，对 Function Component 的思维模式有一个初步认识，防止因思维模式不同步造成的困扰。 2. 精读 也就是，一个返回了…"}, {"id": "6991673327580348424", "title": "hooks 系列七：自定义 hook", "desc": "当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 hook 都是函数，所以也同样适用这种方式。"}, {"id": "6986203259341914120", "title": "React17.x版本源码调试/debug", "desc": "通过下载react源码，是不可以直接进行react的源码调试。需要对源码进行打包，生成react、react-dom打包后的代码，然后link到自己项目中。"}, {"id": "6991385361477795876", "title": "React 入门笔记", "desc": "最近开始学 React，发现与 Vue 和 Angular 相比，React 非常容易上手，在此记录一下学习 React 的一些笔记。"}, {"id": "6956859693205553183", "title": "技术周刊 · 2021-04-30", "desc": "> 假期愉快~~~~~~~~ 小编推荐 如何打造流程可扩展、高生产力的前端研发平台 ES 拾遗之赋值操作与原型链查找 Chrome 90 将默认使用 HTTPS React 精读《React Serv"}, {"id": "7006920643304226824", "title": "React Hook 学习笔记", "desc": "React在16.8版本中发布了新的 React Hook特性，新特性的目的是降低组件代码量， 将逻辑相关代码放到一个函数内，将逻辑不相关代码放到不同函数内，并不在区分是否是第一次render。下面是"}, {"id": "6907189103151087623", "title": "第一个React项目做完了，谈谈自己对hooks的思考", "desc": "本文不会有React具体应用的内容，只是一些对于hooks跟之前的类组件的比较，对于hooks本身的思考。 笔者在今年的8月份入职现在的公司，从原来的vue转为React。因为公司还存在一些比较老的项目，所以前期并没有完全投入到React的项目开发当中。从10月份开始，参与了一…"}, {"id": "6996108995467411464", "title": "web如何检测版本更新（二）", "desc": "前言 上篇文章提到方案一有个弊端，获取hash值方式的扩展性不高，要按不同项目的实际情况去取。而且如果项目其他成员不知道这个逻辑并且在打包后在你取值的前面去插入一个script标签，那么就是一首凉凉，"}, {"id": "6916829760169607176", "title": "2020 前端技术发展回顾", "desc": "2020终究是一个不平凡的一年，我们经历了太多坎坷与磨炼。甚至受COVID-19疫情的影响，Chrome浏览器罕见的断更了，Chrome82就此缺席。但Web生态依旧保持了欣欣向荣的活力，一大批新特性"}, {"id": "6988471347802275854", "title": "useEffect 与 useLayoutEffect的区别", "desc": "前置知识 我们可以将 React 的工作流程划分为几大块： render 阶段：主要生成 Fiber节点 并构建出完整的 Fiber树 commit 阶段：在上一个render 阶段中会在 rootF"}, {"id": "6948011958075392036", "title": "如何实现一个高度自适应的虚拟列表", "desc": "近期在某平台开发迭代的过程中遇到了超长List嵌套在antd Modal里加载慢，卡顿的情况。于是心血来潮决定从零自己实现一个虚拟滚动列表来优化一下整体的体验。 首先我们需要定义几个变量/名称。 vListContainer 为可视区域的容器，具有 overflow-y: au…"}, {"id": "6999906442052370445", "title": "封装一个异常状态下显示的通用组件", "desc": "1. 出发点 因为自己在公司原有项目上的维护，有时候因为与后端获取数据过程当中，因为种种原因获取失败，这里有可能是后端的问题，也可能是前端的问题。一旦获取失败，前端页面就会直接性的崩溃（白屏不显示，页"}, {"id": "6979127131104083976", "title": "mobx 的原理以及在 React 中应用", "desc": "一般来说，redux 是一个设计规范、严格的单向数据流框架，适用于大型项目。而 mobx 一种更灵活的、适合于中小型应用的数据层框架。"}, {"id": "6912309761066729485", "title": "我与hooks的这一年, 万字长文总结", "desc": "这一年注定是不平凡的一年，经历了疫情在家两个月封城。刚好 hooks 出来了，学习了一下，发现真香，根本停不下来，分享一下用了将近一年的心得，在 2020 年最后一天上了末班车 useState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为一个 …"}, {"id": "7006893745312366622", "title": "When to useLayoutEffect in React【译】", "desc": "useEffect在渲染绘制到屏幕后异步运行, 而useLayoutEffect渲染绘制到屏幕前同步运行."}, {"id": "7005108615124090887", "title": "How to useState in React【译】", "desc": "本教程逐步介绍 React 中的 useState , 并通过大量示例来帮助您开始使用 React Hook 进行状态管理。"}, {"id": "6975529028996300836", "title": "React 面试必知必会 Day13", "desc": "1. React 的常见文件夹结构是什么？ React 项目文件结构有两种常见做法。 按特性或路由分组：* 一种常见的项目结构方式是将 CSS、JS 和测试放在一起，按特性或路由分组。"}, {"id": "6984319032744755237", "title": "关于Create-react-app 以及 react-app-rewired原理浅究", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 前言 ceate-react-app （下面简称cra）相信使用 React 技术栈的小伙伴都很熟悉，无论是从刚开"}, {"id": "6987767549656039437", "title": "react原理：协调算法，reconcile(diff算法)", "desc": "讲解完函数组件和类组件是如何计算状态更新之后，这篇文章讲一下reconcile的流程，也就是我们俗称的diff算法。 类组件的diff入口在finishClassComponent中 对于函数组件，会"}, {"id": "6998763055685304356", "title": "在React 18中自动批处理以减少渲染次数(译文)", "desc": "原文地址：在React 18中自动批处理以减少渲染次数  概述 React 18增加了开箱即用的性能改进，默认做了更多的批处理，不再需要在应用程序或库代码中手动批处理更新。这篇文章将解释什么是批处理，"}, {"id": "6844904144055042055", "title": "React为什么需要Hook", "desc": "自从React 16.8发布Hook之后，笔者已经在实际项目中使用Hook快一年了，虽然Hook在使用中存在着一些坑，但是总的来说它是一个很好的功能，特别是在减少模板代码和提高代码复用率这些方面特别有用。为了让更多的人了解和使用Hook，我决定写一系列和Hook相关的文章，本篇…"}, {"id": "6926753852339257357", "title": "2021 推荐给 React 开发者的 Visual Studio Code 插件及配置", "desc": "在安装时推荐勾选下图两个标红的选项，这样安装成功后，鼠标单击右键文件夹或文件就可以直接使用 VS Code 打开了，非常方便。 由于在银行软开，平时开发只能在内网进行，需要考虑插件的离线安装。参考了简单的 VSCode 插件离线安装方法，发现官方已经很贴心的提供了在线下载插件的…"}, {"id": "6844903827276038152", "title": "一个较为完备的 antd 可视化编辑器实现", "desc": "在 pages/coms/xxx 里面定义一个组件的可用配置，然后即可在主界面中选择组件后在右侧\"属性编辑区\"中编辑属性。 但是 table 里可以还可以嵌套其他组件，每行每列，想想是不是头疼。。如下图 这样之后这里就会变成一个可以放置其他子元素的坑，具体不展开了，这里的逻辑比…"}, {"id": "6888262413016432647", "title": "React 架构的演变 - Hooks 的实现", "desc": "React Hooks 可以说完全颠覆了之前 Class Component 的写法，进一步增强了状态复用的能力，让 Function Component 也具有了内部状态，对于我个人来说，更加喜欢 Hooks 的写法。当然如果你是一个使用 Class Component 的老…"}, {"id": "6844904205371588615", "title": "前端面试必考题：React Hooks 原理剖析", "desc": "首先，功利点来说：目前前端框架三分天下：React、Vue、Angular，而 React 自从 v16.8.0 版本正式推出 React Hooks 概念后，风势已经从原来的类组件猛地转向函数组件，这是一个在设计模式、心智模型层次，且非常近期的革新，因此只要是你谈到自己会 R…"}, {"id": "6992771308157141022", "title": "图解React源码 - React 应用的3种启动方式", "desc": "本章节介绍了react应用的 3 种启动方式: legacy模式, concurrent模式和blocking模式. 它们作为react应用的入口, 与reconciler中的\"输\"阶段相衔接."}, {"id": "6977671094710829063", "title": "React 18 带来了什么-官方即将支持状态保持", "desc": "由于现在 React18 还没正式发布太多的文档，很多概念和内容是我从多个来源拼凑而来，里面包含了很多我个人的理解，可能到 React18 正式发布的时候，会有些许错误，写这个文章仅仅是满足一下猎奇"}, {"id": "6844903955659489288", "title": "React项目实现全局 loading 以及错误提示", "desc": "然而，对于一个大型项目，如果每请求一个 api 都要写以上类似的代码，显然会使得项目中重复代码过多，不利于项目的维护。因此，下文将介绍全局存储 loading 状态的解决方案。 本节介绍与之后小节代码实现部分相关的基础知识，如已掌握，可直接跳过🚶🚶🚶。 装饰器（Decor…"}, {"id": "6971369842511183909", "title": "React-hooks学习小结", "desc": "这是我参与更文挑战的第1天，活动详情查看：更文挑战 Hook 在 class 内部是不起作用的。 什么时候用hooks？ 编写组件时需要添加一些state时，而不想使用class组件时 useSate"}, {"id": "6844903649689206791", "title": "React Native 在「元气阅读」的实践", "desc": "经历了三个多月的集中开发，阅文集团旗下二次元产品「元气阅读」APP 终于在各大应用商店上架了。「元气阅读」APP 大部分的功能模块基于 React Native 开发，整个开发过程前端团队趟了不少 React Native 的坑，同时也积累了不少实践心得，与大家一起分享。 在使…"}, {"id": "6844903701065400333", "title": "React 16.6 发布，一大波新功带你看未来的 React 开发方式", "desc": "最近（2018-10-23）React官方发布了16.6版本，开放了一堆新的功能，而这其中的一些新功能，代表这未来的React开发方式，让我们来一起窥探未来吧。 做过code-splitting的同学能闻到熟悉的味道。以前我们要用第三方包或者自己处理异步过程，现在，React原…"}, {"id": "6995363908739399687", "title": "图解React源码 - fiber 树渲染", "desc": "本节分析了\"fiber 树渲染\"的处理过程, 位于\"reconciler 运作流程\"中的输出阶段, 具体从\"渲染前, 渲染, 渲染后\"三个方面分解了\"commitRootImpl\"函数."}, {"id": "6991394840537726990", "title": "使用 Rollup 搭建 React + TypeScript 脚手架", "desc": "在众多打包工具中，Webpack 在公司项目中是使用范围最广的了，但是像 Vue、React、Vite 等类库都是使用 Rollup 作为打包工具的。Rollup 在打包 JavaScript 库的能"}, {"id": "6982529143334404103", "title": "React学习十一天---React源码之准备工作和JSX是怎么转化为ReactElement的（一）", "desc": "这是我参与更文挑战的第27天，活动详情查看： 更文挑战 前言 前面我们学习了React核心算法，现在我们接下来阅读React的源码 配置React源码本地调试环境 JSX转换为ReactElement"}, {"id": "6986204025427492895", "title": "react调度的理解", "desc": "1.为什么需要调度？ 大家都知道 JS 和渲染引擎是一个互斥关系。如果 JS 在执行代码，那么渲染引擎工作就会被停止。假如我们有一个很复杂的复合组件需要重新渲染，那么调用栈可能会很长调用栈过长，再加上"}, {"id": "6881421908873740296", "title": "深入 react 技术栈（一）", "desc": "目前，已经有很多大大小小的入门 React 的教程，它们会介绍一些基本概念和用法，那些内容可以让你方便地带你进入 React 世界。但这篇文章除了详细阐述基本概念外，还会帮助你从了解 React 到熟悉其原理。 在 React 底层，主要对合成事件做了两件事：事件委派和自动绑定…"}, {"id": "6999524080374743077", "title": "react初体验", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 哈喽大家好，今天我们来学习react，相信很多的对react的大名已经不陌生了吧?前端三大主流框架之一 react介绍 React 使创建交"}, {"id": "6844904021187117069", "title": "Redux 包教包会（一）：介绍 Redux 三大核心概念", "desc": "前端应用的状态管理日益复杂。随着大前端时代的到来，前端愈来愈注重处理逻辑，而不只是专注 UI 层面的改进，而以 React 为代表的前端框架的出现，大大简化了我们编写 UI 界面的复杂度。虽然 React 提供了 State 机制实现状态管理，也有诸如“状态提升”等开发约定，但…"}, {"id": "6844903721596387341", "title": "NPM生态报告，React和Vue的差距居然这么大？", "desc": "作者爬取了 https://www.npmjs.com 上所有公开仓库的数据。从这些数据中分析了过去一年下载量最大的npm包排名；常见前端框架热、构建工具下载热度对比；以及各种常见框架的生态现状。这些数据帮助我们了解Npm现有生态，也帮助我们进行前端技术选型。 NPM这个东西大…"}, {"id": "6974675882841473038", "title": "闲D没事，写了一个还算“中用”的React 脚手架，叫Moderate", "desc": "一款基于react的脚手架，初步整合了Cocos引擎，针对一些常见业务下功夫，在平平无奇的地方，做一些普普通通的事情。"}, {"id": "6844904023808540680", "title": "关于React Hooks和Immutable性能优化的实践，我写了一本掘金小册", "desc": "最近，我的第一本小册《React Hooks 与 Immutable 数据流实战》在掘金成功上线。各位期待的粉丝朋友久等了，两个月之前的计划一直拖到了现在，也经常在 GitHub 的 issue 区也能感受到大家焦急的心情，实在非常抱歉，不过万幸的是，它终于成功地问世了。 上线…"}, {"id": "6992844684804522020", "title": "我在G6关系图上用React画出了自定义节点", "desc": "G6如果我不用默认图形的话，真的很难受，我只需要“亿点点”的addShape，数据绑定什么的？不存在的。 于是就有了这个库 @antv/g6-react-node，让你开发自定义节点像是开发react"}, {"id": "6844903843151478791", "title": "React精髓！一篇全概括(急速)", "desc": "一个人并不是生来要给打败的，你尽可以把他消灭掉，可就是打不败他。 JSX中，可以使用花括号{}嵌入任意的JavaScript合法表达式，如：2 + 2、user.firstName、formatName(user)都是合法的。示例如： JSX本身也是一种表达式，所以它可以像其他…"}, {"id": "6844904127110053895", "title": "用动画和实战打开 React Hooks（一）：useState 和 useEffect", "desc": "自从 React 16.8 发布之后，它带来的 React Hooks 在前端圈引起了一场无法逆转的风暴。React Hooks 为函数式组件提供了无限的功能，解决了类组件很多的固有缺陷。这篇教程将带你快速熟悉并掌握最常用的两个 Hook：useState 和 useEffec…"}, {"id": "7002914053169348615", "title": "React学习心得", "desc": "React是流行的javascript框架之一，在2019年及以后将会更加流行。React于2013年首次发布，多年来广受欢迎。它是一个声明性的、基于组件的、用于构建用户界面的高效javascript"}, {"id": "6872505128939683848", "title": "Webpack5 跨应用代码共享 - Module Federation", "desc": "Webpack 5 的消息尽管已经出来了许久，但是正式版一直还未发布。Webpack 5 的 ChangeLog 中，除了常规的性能优化、编译提速之外，有一个比较让人期待的功能就是 Module Federation。Module Federation 可以强行翻译成「模块联邦…"}, {"id": "6939117135331328030", "title": "React Native 0.64 发布，已在 iOS 支持 Hermes", "desc": "今天，我们发布了 React Native 0.64，该版本在 iOS 上提供了对 Hermes 的支持。 Hermes 是为了运行 React Native 而优化的开源 JavaScript 引擎。它通过降低内存使用率、减小打包体积以及减少应用从启动到可使用所花费的时间来优…"}, {"id": "7004678485788590111", "title": "记录react+node+mongodb项目部署到服务器的过程", "desc": "[toc] 前言 我之前只做过web前端开发，对服务器相关的东西是纯小白，这篇文章仅用来记录学习。 常用Linux命令 购买服务器 我的服务器信息： 阿里云轻量服务器：2G运行内存 2核 60G硬盘 "}, {"id": "6994329326745288740", "title": "你会用的three.js", "desc": "简介 Three.js， WebGL 与 OpenGL 提到 Three.js，就必须说一下 OpenGL 和 WebGL。 OpenGL 大概许多人都有所听闻，它是最常用的跨平台图形处理开源库。 W"}, {"id": "6889264500977958920", "title": "🏆 技术专题第六期 | 谈谈 React 17 的那些事！", "desc": "第四期技术专题|聊聊微前端在大家积极的参与下圆满结束。同时第五期技术专题|聊聊分布式的那些事也正在有条不紊的展开了，那歇了有一阵的前端大佬们想必也早已手痒了，别急，技术专题第六期也来啦！这一期我们一起来聊下刚刚发布的 React 17！ React 起源于 Facebook 的…"}, {"id": "6844903999083118606", "title": "简单易懂的 React useState() Hook 指南（长文建议收藏）", "desc": "状态是隐藏在组件中的信息，组件可以在父组件不知道的情况下修改其状态。我更偏爱函数组件，因为它们足够简单，要使函数组件具有状态管理，可以useState() Hook。 本文会逐步讲解如何使用useState() Hook。此外，还会介绍一些常见useState() 坑。 可以找…"}, {"id": "6844903986420514823", "title": "React Concurrent 模式抢先预览下篇: useTransition 的平行世界", "desc": "上篇文章介绍了 Suspense, 那么这篇文章就讲讲它的好搭档 useTransition。如果你是 React 的粉丝，这两篇文章一定不能错过。 我们知道 React 内部做了翻天覆地的优化，外部也提供了一些紧凑的新 API，这些 API 主要用来优化用户体验。React …"}, {"id": "6950997088947666951", "title": "Recoil：Facebook 新一代的 React 状态管理库", "desc": "本文主要介绍facebook出的状态管理库Recoil（非react官方）。其优点避免类似Redux和Mobx这样的库带来的开销。规避Context 的局限性。整体介绍 Redux、Mobx、Hox"}, {"id": "6982115636093091847", "title": "React 系列十：受控组件和非受控组件", "desc": "这节我们将介绍 `React` 中受控组件和非受控组件的概念及其使用。 本文会向你介绍以下内容： - 什么是受控组件/非受控组件 - 受控组件 - 非受控组件"}, {"id": "6976311315891486756", "title": "React学习第九天---React & Fiber（创建任务队列和完成任务调度逻辑\"requestIdelCallback“）（二）", "desc": "这是我参与更文挑战的第20天 大家好我是小村儿，在上节Fiber算法开发环境的基本配置，大家也可以看源码跟着学习，还介绍了一下核心API 'requestIdelCallback',介绍了Fiber核"}, {"id": "6917629321112731662", "title": "为什么要在函数组件中使用React.memo？ - 七日打卡", "desc": "这里提一下，如果大家看到这个标题有所疑惑的话，可以花点时间看一下本篇文章。反之呢如果是看到标题第一时间就反映出结论的话，就可以去get其他文章的知识点了 点击按钮，改变App组件内的值。App组件和B组件全都发生更新 but理想异常丰满的，现实十分骨干的。 不知道大家有没有发现…"}, {"id": "6993973502852202503", "title": "React Fiber 架构原理", "desc": "Fiber 原理 在 Fiber 出现之前 React 存在什么问题 在 React 16 之前的版本对比更新 VirtualDOM 的过程是采用 Stack 架构实现的，也就是循环加递归。这种对比方"}, {"id": "6983560297529212964", "title": "react 官网「Hooks」总结条目", "desc": "很多时候我认为某些新鲜事物或成熟框架，知晓全面概念比深度掌握在项目业务开发过程中要重要得多。一旦涉及，则需进行官方文档或社区资源进行深入了解。"}, {"id": "6994018166347137031", "title": "React Context", "desc": "作用 无需为每个组件手动添加props，就能在组建树间进行数据传递的方法。 使用 优点 避免属性层层传递 API React.createContext 创建一个conText对象。当 React 渲"}, {"id": "6844903679644958728", "title": "深入探究Immutable.js的实现机制（一）", "desc": "本文是我正在更新的深入探究immutable.js系列的第一篇。 Immutable.js 由 Facebook 花费 3 年时间打造，为前端开发提供了很多便利。我们知道 Immutable.js 采用了持久化数据结构，保证每一个对象都是不可变的，任何添加、修改、删除等操作都会…"}, {"id": "6844904183426973703", "title": "【KT】轻松搞定Redux源码解读与编程艺术", "desc": "在本文开始之前，唠叨几句话吧，那就是本文有点长，且有部分源码等；前几天有幸和寒雁老哥聊了一小会，他说我现在已经懂怎么写文章阶段，建议下一个阶段能稳下来，然后去写一些有深度的东西，而不是浮在表面上；上周六去听了同公司已出书的挖坑的张师傅的技术写作分享。 于是我沉默了一下，听了一些…"}, {"id": "6844903869609148430", "title": "这一次彻底搞定 useReducer - useContext使用", "desc": "上篇文章结尾提到过使用useReducer，可以帮助我们集中式的处理复杂的state管理。但如果我们的页面很复杂，拆分成了多层多个组件，我们如何在子组件触发这些state变化呢，比如在LoginButton触发登录失败操作？ 这篇文章会介绍如何使用另外一个高阶Hook-useC…"}, {"id": "6960242931298992141", "title": "原来Redux的原理这么简单", "desc": "熟悉React的开发者并不陌生Redux是什么,一个状态管理容器，简单来说就是帮助前端存储交互的数据的容器。 笔者今天聊的就是如何手写一个Redux，破除那些把Redux神话的同学么。 了解Redux"}, {"id": "6976176113705811975", "title": "【React】全家桶项目实践", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 选择任何一门语言学习都是有时间和金钱的成本的，那么React值不值得学习呢？我们应该从以下几个方面考虑： 1) 使用组件化开发方式，符合现代Web"}, {"id": "6963480203637030926", "title": "如何应用 SOLID 原则整理 React  代码之单一原则", "desc": "SOLID 原则的主要是作为关心自己工作的软件专业人员的指导方针，另外还为那些以经得起时间考验的设计精美的代码库为荣的人。 今天，我们将从一个糟糕的代码示例开始，应用 SOLID 的第一个原则，看看它"}, {"id": "6956397155363848228", "title": "为什么「不变的虚拟 DOM」可以避免组件重新 Render", "desc": "本文将从 JSX 和虚拟 DOM 说起，讲述什么是「不变的虚拟 DOM」。再根据 React 调和阶段的伪代码，将底层原理呈现出来。"}, {"id": "6967241317508513805", "title": "记：利用React.createPortal开发项目Modal组件", "desc": "4月底刚刚入职新公司，在经过一周的熟悉后，开始参与了一个项目的需求实现。（写bug才是最快融入团队的方式） 需求: 给xx页面（h5）用户输入信息后新增一个二次确认弹窗。 接到的第一个需求是在某个页面"}, {"id": "6999569090108981261", "title": "手写React点击拖拽导入组件", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 实现功能 组件基于React-Typescript项目开发 是关于导入Excel文件格式的具体实现 支持点击以及拖拽导入 导入后解析文档数据"}, {"id": "6844904119358980110", "title": "memo、useMemo及useCallback解析", "desc": "前言 在hooks诞生之前，如果组件包含内部 state，我们都是基于 class 的形式来创建组件。 在react中，性能优化的点在于： 调用 setState，就会触发组件的重新渲染，无论前后 s"}, {"id": "6844904000387563533", "title": "1w字 | 从零开始的React服务端渲染", "desc": "随着前端技术栈和工具链的迭代成熟，前端工程化、模块化的趋势也愈发明显，在这波前端技术浪潮中，涌现了诸如React、Vue、Angular等基于客户端渲染的前端框架，这类框架所构建的单页应用（SPA）具有渲染性能好、可维护性高等优点。但也同时带来了两个缺陷： 与传统web项目直接…"}, {"id": "6870316361726787591", "title": "FormRender 开源第二弹：一站式表单解决方案", "desc": "本文旨在介绍 Form Render （FR）这个阿里开源表单解决方案。简述它想解决的问题，我们的理念和解法，这半年走过的路，以及 FR 的未来规划 所见即所得的表单设计器，拖拖拽拽完成表单的开发。并可自由定制成符合自身喜好的独特设计器 这个未来其实以近在眼前。FormRend…"}, {"id": "6844903843189243917", "title": "React组件设计实践总结02 - 组件的组织", "desc": "一个复杂的应用都是由简单的应用发展而来的, 随着越来越多的功能加入项目, 代码就会变得越来越难以控制. 本文章主要探讨在大型项目中如何对组件进行组织, 让项目具备可维护性. 1. 组件设计的基本原则 2. 基本技巧 3. 组件的分类 4. 目录划分 5. 模块 6. 拆分 7.…"}, {"id": "6981073640364179492", "title": "在Next.js项目中获取动态数据的3种方法及对比", "desc": "本文介绍了Next.js中动态获取数据的3种方法，比较了它们并分析了各方法适用的需求场景。"}, {"id": "6995949283371548708", "title": "React 性能优化：React DevTool & Chrome DevTool", "desc": "如何借助工具来发现性能问题，对 React 进行调优？ 在日常的开发中，我们主要借助两个工具： React DevTool & Chrome DevTool"}, {"id": "6844903661114507271", "title": "前端插拔式 SPA 应用架构实现方案", "desc": "随着互联网云的兴起，一种将多个不同的服务集中在一个大平台上统一对外开放的概念逐渐为人熟知，越来越多与云相关或不相关的中后台管理系统或企业级信息系统曾经或开始采用了这种「统一平台」的形式。同时，前端领域保持着高速发展，早期的 jQuery+Backbone+Bootstrap 的…"}, {"id": "6844903651824123912", "title": "前端也要会的数据结构 （不定期更新篇）", "desc": "一说到前端大家脑子里只有，布局、展示数据、修改样式等等。可是数据是哪里来的呢？后端给的后端给的。数据的结构呢？后端给啥用啥。 这就是前端的一个软肋。我们的业务让我们并不需要过深入的了解数据结构，数据结构和算法是一个程序员的基础。无论是前端开发还是后端开发、还是AI机器学习大数据…"}, {"id": "6997733793134018590", "title": "【Rematch 源码系列】五、Rematch v2, a big step", "desc": "从这篇文章开始，我们来了解一下 Rematch v2。 在说 v2 之前，先给大家说说我加入 Rematch 的经历。 现在回想起来，也没想到自己会成为 Rematch"}, {"id": "6844903733659189255", "title": "不吹不黑比对下React与Vue的差异与优劣", "desc": "react与vue的比较一直是一个比较引战与容易引起争议的话题，或许每个前端都或多或少的参与到过这场辩论中，但是在这场巨大的辩论中产出的有价值的内容却一直比较稀缺。在这里我无意再次引起争吵，只是结合我自己的经验希望尽可能客观的阐述一些我认为的两个框架上一些差别与优劣。事实上如果…"}, {"id": "6946079446956769293", "title": "为了学习dva：支付宝前端架构方案，我把它翻了个底朝天", "desc": "我们都知道前端近几年发展速度非常快，当你还在舒适的CRUD-ING时，睁开眼已经是一个另一个世界，所以我必须得抬头看看这dva究竟是啥。 基于redux，redux-saga和react-router的轻量级前端框架。 反正牛逼就是了。 目前不支持。 方案：store和sele…"}, {"id": "6844903983761326088", "title": "[译]React高级指引2：代码分割", "desc": "大多数React应用都会使用Webpack，Rollup或Browserify来打包代码文件。打包是一个引入文件并把它们合并到一个文件的过程，最终形成一个bundle。这个bundle可以在网页上被加载一整个应用。 如果你使用Create React App，Next,js，G…"}, {"id": "6844903863951048711", "title": "用react撸个日历的轮子", "desc": "几乎之前我经手的所有项目，都有用到日期选择器或者日历的控件，datetimepicker、calendar.js，都是基于JQ的控件。 奈何产品爸爸总提一些UI和交互上的需求，改这些控件的源码不好改啊！碰巧看了一篇用原生js撸日历的文章，传送链接，写的非常棒啊，挺受启迪的我，就…"}, {"id": "6945737660937797640", "title": "Hooks源码系列(一) 代数效应", "desc": "try ... handle"}, {"id": "6844903655548649486", "title": "React源码阅读：setState", "desc": "本文主要介绍一些React的设计思想和相关概念，不管是想要阅读源码还是想深入了解React的同学看过来呀。欢迎指出错误，一起探讨一起进步。 最终显示的结果也是3，怎么样，是不是很吃惊呢。会产生这样的结果是因为setState在React合成事件中是异步的，他会把多次的状态更新整…"}, {"id": "6917452347980152840", "title": "【重学React】什么是JSX？", "desc": "Vue，小程序，Angular，React他们都是类MVVM框架，在框架中View这一层，他们往往采用了和THML标签耦合的方式来开发，实现数据和逻辑同步操作。前三者都使用了模板语法，唯独React并没有采用模板，而是用了JSX来渲染页面。 模板就是一个字面意思，就是一个模板，…"}, {"id": "6844903609025445902", "title": "用纯前端的方式来实现图片转字符画", "desc": "最近花了几天时间，做了一个图片转字符画的工具，一开始想做成用服务器来生成图像的形式，但是后来发现可以不依赖服务器生成图片，顺便还能把项目托管到 Github Pages 上，因此就把项目做成了纯前端的形式。 仓库地址 演示地址 欢迎star，谢谢！"}, {"id": "6901988659386384391", "title": "React 源码解析（二） —— React.Children", "desc": "借用官网的话，React.Children.map 的作用就是在每个子节点上调用一个函数，如果 children 是一个数组，它将遍历并为数组中的每个子节点调用该函数。如果子节点为 null 或是 undefined，则此方法将返回 null 或是 undefined，而不会返…"}, {"id": "6844903862319611918", "title": "五分钟，简单聊一聊React Component的发展历程", "desc": "随着 react 最新的一个大版本中，给我们带来了 Hooks：React v16.8: The One With Hooks，从而将 Function component 的能力提高了一大截，成功的拥有了可以与 Class component 抗衡的能力。但话说回来，虽然 H…"}, {"id": "6844903618651389960", "title": "与你探索classnames模块内部实现", "desc": "在写react的时候动态写入class比较繁琐很啰嗦，记得有个模块可以来解决这个问题，于是乎找到了这个模块叫“classnames”，再者好奇这个模块的体积大小，然后对其进行了源码分析。 好吧。 代码并不多，删掉空白行和注释只有仅仅37行的代码，我将在代码里以注释的形式讲解代码…"}, {"id": "6844903713199357960", "title": "轻松发布 react 组件到 npm", "desc": "如果你平时想发布一个自己的 React 组件，发现它并没有和发布其他 JavaScript 库一样简单，首先它得对 JSX 进行转化，并且得使用 babel 把语法转化为 ES3，还得忽略掉一些项目里已用到的库，如 react、react-dom 等等，还得编写 TypeScr…"}, {"id": "6844903654726582279", "title": "JSX 这么6？", "desc": "本文会先解释一下JSX的工作原理，再介绍一下如何用“不寻常”的方式来使用JSX。如果你已经了解了JSX的工作原理，可以跳过第一部分。如果你只想学一些实用的东西，那可以跳过第二部分。 上周，我发了一条这样的动态： 可以看出大家都很喜欢，他们评论区里纷纷留言：“呕”，“这都做了些什…"}, {"id": "6844903719323041800", "title": "GatsbyJS 入门（二）：如何以 Starter 快速架构网站", "desc": "上次我们提到 GatsbyJS，它是一个可以获取任意数据，并生成静态化网站的系统。这一次，就让我们以 Calpa 的技术博客作为例子来开始架构网站吧。"}, {"id": "6844903810343649293", "title": "React Bind Handle的思考", "desc": "在平时的开发里面，总会碰到handle绑定的问题。如果你和我一样懒或者思考过，你会觉得这个过程实在是太烦了吧。这里记录一下我的思路和历程。 这里以一个按钮的点击事件来做示例。 这个例子的目的是点击按钮触发clickHandler来让计数器加1。我们可以用两种不同的方式来触发这个…"}, {"id": "6844903617070268430", "title": "鹅厂优文 | ReactJS一点通", "desc": "导语 | 当React 刚开始红的时候，一直觉得 JSX 的设计思想极其独特，属于革命性的创新，它性能出众，代码逻辑却非常简单，所以，受到很多开发者的关注和使用，认为它可能是将来 Web 开发的主流工具。 React 最早起源于 Facebook 的一个内部项目，因为公司对现有…"}, {"id": "6959809776016424996", "title": "React Hooks-03 Hook API", "desc": "HooK API useStat、useEffect、useReducer、useRef、useCallback、useMemo等"}, {"id": "6844903501550583815", "title": "React 开发实战（一）- Repeat 组件", "desc": "最近在写一个面向 React 初学者的系列教程玩转 React，内容对有 React 开发经验的同学来说可能太过于基础和啰嗦，不太感兴趣。所以我打算同时开始另外一个系列文章《React 开发实战》。该系列主要面向有 React 开发经验的同学，更侧重 React 实战，每一篇文…"}, {"id": "6844903726054899726", "title": "一个被写烂的redux计数小例子", "desc": "Action 本质上是 JavaScript 普通对象。action 内必须使用一个字符串类型的 type 字段来表示将要执行的动作，但是这样有多少action就需要写多少action，所以这里需要action creator, 这个action构造函数返回一个js对象，当然这…"}, {"id": "6844903597163937805", "title": "从npm迁移到yarn", "desc": "项目迁移背景，问题解决"}, {"id": "6844903826831441934", "title": "[译] 对 React 组件进行单元测试", "desc": "单元测试是一门伟大的学科，它可以减少 40% - 80% 的 bug。单元测试的主要好处有: 改善应用的结构和可维护性。 通过在实现细节之前关注开发人员体验（API），可以获得更好的 API 和可组合性。 提供快速的文件保存反馈，告诉你更改是否有效。 这可以替代 console…"}, {"id": "6844903792081649677", "title": "『小帮厨』- React+AntD项目实战", "desc": "学习React不久，觉得实战才是检验自己学习程度的最好方法，也顺便加深一下自己对React的理解，于是做了这么一个小项目分享一下。 作为一个单页面项目，第一步当然是搭建页面路由了，因为是一个菜谱项目，所以路由还是比较多的，这里我把路由的结构都放在config文件下，在NavLe…"}, {"id": "6975413771846025252", "title": "组件与props (精读React官方文档—04)", "desc": "这是我参与更文挑战的第17天，活动详情查看：更文挑战 组件的概念 解读 组件是独立可复用的代码片段，这种代码片段接收props参数并返回React元素。 函数组件与类组件 函数组件 函数组件的本质就是"}, {"id": "6844903560056930311", "title": "CSS in Typescript", "desc": "使用typescript无非就是因为它的代码约束和提示能力. 以react为例: 正如一开始所说, 使用typescript无非就是因为它的代码约束和提示能力, 那么, 第三种才是我们的最优解. typings-for-css-modules-loader是一个webpack …"}, {"id": "6930860373830696973", "title": "逐步拆解React组件—Lazyload懒加载", "desc": "在平时开发的时候我们总会遇到长列表，因为本身web在长列表的性能并不是特别好；加之web本身受到网络波动影响特别大，在首屏同时加载过多的内容会导致卡顿不流畅响应速度慢等问题。对此我们常用懒加载机制来进行优化。 懒加载也叫延迟加载，指的是在长网页中延迟加载dom(jquery时期…"}, {"id": "6984037719219372068", "title": "react hooks之useState", "desc": "hooks作为react提出的一个新概念已经有一段时间了, 它的诞生让函数式组件重焕新生, 然而应该怎么用呢?class 函数式组件, 我们该如何选择呢?相信这篇文章能带给你一些思考"}, {"id": "6935790852476239886", "title": "在 React 中使用 Immer 管理不可变状态", "desc": "在 React 中，使用不可变状态可以快速且高效地比较更改前后的状态树。因此，每个组件可在执行任何成本很高的 DOM 操作之前，决定是否重新渲染。 像 Redux 这样流行的状态管理库也遵循着相同的理念。当我们使用 reducers（译者注：根级的 reduce 函数 redu…"}, {"id": "6844903566553923591", "title": "React Router 使用总结", "desc": "使用 React 开发单网页应用时，React Router 必不可少。刚开始接触 React Router 时，跟着文档一步步做，虽然有些概念不太理解，但最终还算是完成了项目。后来阅读了 你不知道的 React Router 4 这篇文章，意识到先前在项目中的某些用法中的用法…"}, {"id": "6844903912965701645", "title": "antd design pro+hooks+typescript项目实战指南", "desc": "源码附在文章末尾, 注意查收。 做为一个基于antd-design-pro和react hooks打造的后台管理系统项目，该项目利用了antd-design-pro提供的权限认证、配置化路由、页面布局组件、面包屑等功能，完成了登录、首页、产品、用户几大模块的开发。由于个人感觉a…"}, {"id": "6844903635747340296", "title": "彻彻底底教会你使用Redux-saga(包含样例代码)", "desc": "最近将项目中redux的中间件，从redux-thunk替换成了redux-saga，做个笔记总结一下redux-saga的使用心得，阅读本文需要了解什么是redux，redux中间件的用处是什么？如果弄懂上述两个概念，就可以继续阅读本文。 redux是遵循函数式编程的规则，上…"}, {"id": "6844903799098703880", "title": "React State Hooks的闭包陷阱，在使用Hooks之前必须掌握", "desc": "出现这样的情况主要原因是：useEffect 是异步的，也就是说我们执行 useEffect 中绑定的函数或者是解绑的函数，**都不是在一次 setState 产生的更新中被同步执行的。**啥意思呢？我们来模拟一下代码的执行顺序： 在我们点击来 clear 之后，我们调用了 s…"}, {"id": "6844903728374546445", "title": "webpack4之splitchunksPlugin拆拆拆--项目实践", "desc": "其他的非公共代码。 all: 不管文件是动态还是非动态载入，统一将文件分离。当页面首次载入会引入所有的包 async： 将异步加载的文件分离，首次一般不引入，到需要异步引入的组件才会引入。 initial：将异步和非异步的文件分离，如果一个文件被异步引入也被非异步引入，那它会被…"}, {"id": "6844904129136082952", "title": "react+antDesign+antd-theme-generator实现线上主题换肤功能", "desc": "项目架构create-react-app+antDesign+redux说明公司需要开发一个线上换肤功能,考虑复杂性,还是觉得通过插件可以直接改变antDesign的primary值,实现改一个颜色就"}, {"id": "6991152074306093069", "title": "016.React生命周期", "desc": "旧生命周期 1.生命周期图 2.渲染流程 (1).初始化阶段 由ReactDOM.render()触发...新生命周期...废弃生命周期"}, {"id": "6978163955734691877", "title": "正确的使用create-react-app(cra脚手架)创建TypeScript的新项目", "desc": "今天想在react脚手架中系统性的写一下ts的相关特性时， 因为记得cra脚手架是有typescript版本的。 查阅文档后，文档中提供了下面命令 但是在使用上面命令后，生成的项目居然不是ts模板的，"}, {"id": "6958394444190056456", "title": "在使用memo之前", "desc": "有很多描写React性能优化的文章 一般而言，如果某些state更新缓慢的话，你需要： 验证是否正在运行一个生产环境的构建。（开发环境构建会刻意地缓慢一些，极端情况下可能会慢一个数量级） 验证是否将树"}, {"id": "6844903621893554183", "title": "精读《React 八种条件渲染》", "desc": "介绍了八种 React 条件渲染方式。 这样对 React 渲染效率有提升。 将组件赋值到变量，就可以在 return 前任意修改它了。 但三元运算符产生嵌套时，理解成本会变得很高。 这个是最常用了，因为代码量最少。 高阶组件，就是返回一个新组件的函数，并且接收一个组件作为参数…"}, {"id": "6844903649659846669", "title": "JS 装饰器，一篇就够", "desc": "在 ES6 中增加了对类对象的相关定义和操作（比如 class 和 extends ），这就使得我们在多个不同类之间共享或者扩展一些方法或者行为的时候，变得并不是那么优雅。这个时候，我们就需要一种更优雅的方法来帮助我们完成这些事情。 在面向对象（OOP）的设计模式中，decor…"}, {"id": "6844904187206041608", "title": "Umi hooks =>aHooks 实用代码片段整理", "desc": "3. 依赖请求：ready 4. 手动暂停请求：cancel 5. 手动刷新：refresh 8. 请求过程中的loading 9. 当请求未返回时，默认的data数据 10. 请求参数变化触发接口请求：refreshDeps 11. 格式化返回的结果：formatResult…"}, {"id": "6844904116209057800", "title": "2020 年 React 状态管理", "desc": "React hooks 的引入无疑改变的了 state 管理的现状。 在此之前，很难在组件之间共享 state 相关的逻辑。现在，我们可以很简单的通过抽象一个 hook 来处理（例如：useUserLogin）。 这就引出了问题，为什么我们还需要状态管理框架？在这篇文章中，我将…"}, {"id": "6943390036993769502", "title": "避免React生命周期的那些坑坑洼洼", "desc": "要避免生命周期的坑，就需要先了解React有那些生命周期？在React的不同版本生命周期的钩子函数也大同小异。React的生命周期分为三个挂载、更新、销毁阶段，不同的阶段触发不用的钩子函数。接下来我们就一一来看看。 constructor是类的构造函数，在组件初始化的时候只会执…"}, {"id": "6844903682455109640", "title": "2万5千字大厂面经 | 掘金技术征文", "desc": "简历不是一份记流水账的东西，而是让用人方了解你的亮点的。 平时有在做一些修改简历的收费服务，也算看过蛮多简历了。很多简历都有如下特征 以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。除非你呆过大厂或者教育背景不错或者技术栈符合人家要求了，否则基本就是看运气约面试了。 …"}, {"id": "7007022379176034334", "title": "React 18 新特性 startTransition", "desc": "译文📖 前言 在React18，我们介绍一种新的API——startTransition，它可以帮助你的web应用迅速响应，即使在大型模块的更新场景，也能保持迅速响应。这个新API通过一种“trans"}, {"id": "7003170721866203150", "title": "jsplumb + React 实现可拖拽流程图", "desc": "大致介绍下文章内容 这周接到了新需求，大致就是需要实现一个可拖拽，可连线的类似流程图的一个东西。技术不精，望大佬们轻喷！"}, {"id": "6844903985338400782", "title": "React Hooks 详解 【近 1W 字】+ 项目实战", "desc": "如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以直接在现有的函数组件中使用 Hooks 1. 类组件的不足 综上所述，如果不注意的话，很容易写成第三种写法，导致性能上有所损耗。 2. Hooks 优势 副作用的关注点…"}, {"id": "7007259152728719374", "title": "基于Rollup创建一个插件开发脚手架", "desc": "如果需要项目脚手架请看这里 一 初始化 新建一个文件夹 react-scaffold 运行yarn init -y 初始化项目 安装相关依赖 rollup项目打包工具 rollup-plugin-ba"}, {"id": "6984291978884153358", "title": "Dan Abramov 访谈实录", "desc": "文章超过 1.5w 字，文中包含了大量的专业概念与启发性思想，通读大约需要 30 分钟。建议先收藏下来，慢慢阅读。最后祝大家都能够有所收获！"}, {"id": "7004816788676427813", "title": "弄清react路由——从源码开始(一)", "desc": "阅读源码是提升编程功底和深层次理解原理的不二方法，强烈建议大家初次学习源码就拿前端路由开始。因为路由组件可以说和我们开发项目息息相关了，而且其源码结构也非常清晰，可以说是初识源码的绝佳例子。 reac"}, {"id": "6995497136510992414", "title": "React状态管理的一些思考（上篇）", "desc": "随着SPA单页面应用复杂度的提高，状态也会变大，管理状态的难度也会增加。为了更好的管理应用的状态，或许会考虑状态使用react状态管理的库，但是该考虑和如何选择？"}, {"id": "6999927573480210469", "title": "React入门学习（四）-- diffing 算法", "desc": "前言 diff 算法是 React 提升渲染性能的一种优化算法，在 React 中有着很重要的地位，也不止于 React ，在 Vue 中"}, {"id": "6955636911214067720", "title": "「react进阶」一文吃透react事件系统原理", "desc": "一 前言 今天我们来一起探讨一下React事件原理，这篇文章，我尽量用通俗简洁的方式，把React事件系统讲的明明白白。 我们讲的react版本是16.13.1 , v17之后react对于事件系统会"}, {"id": "7005555772385919013", "title": "渐进式React源码解析-实现Ref Api", "desc": "深入浅出React源码，利用最精简的代码，最通俗易懂的方式，渐进式打开React内部不为人知的一面。"}, {"id": "7003596804256333855", "title": "react页面水印的实现🐸", "desc": "react页面水印的实现， 为什么选用svg 而不是cavans？ 因为cavans 在高分辨率屏幕下，需要根据 devicePixelRatio做宽高的适配，不然就会很模糊，而svg是矢量图"}, {"id": "6844904132109664264", "title": "Vue3 究竟好在哪里？（和 React Hook 的详细对比）", "desc": "这几天 Vue 3.0 Beta 版本发布了，本以为是皆大欢喜的一件事情，但是论坛里还是看到了很多反对的声音。主流的反对论点大概有如下几点： 在我看来，Vue 黑暗的一天还远远没有过去，很多人其实并没有认真的去看 Vue-Composition-Api 文档中的 动机 章节，本…"}, {"id": "6885957893724569613", "title": "我在工作中写React，学到了什么？", "desc": "我工作中的技术栈主要是 React + TypeScript，这篇文章我想总结一下如何在项目中运用 React 的一些技巧解决一些实际问题，本文中使用的代码都是简化后的，不代表生产环境。生产环境的代码肯定比文中的例子要复杂很多，但是简化后的思想应该是相通的。 那么比如在路由发生…"}, {"id": "7006296408231788581", "title": "React复合组件信息通信", "desc": "一、组件通信方案之属性传参 属性传参方案适用于父子组件通信 父组件在调用子组件的时候，基于属性的方式，把信息传递给子组件（默认是单向数据流） 也可以基于回调函数的方式来实现子组件修改父组件的内容 父组"}, {"id": "6970845778713509919", "title": "「React进阶」漫谈React异步组件前世与今生", "desc": "一 前言 今天我们聊一聊React中的异步组件的现况和未来，异步组件很可能是未来从数据交互到UI展示一种流畅的技术方案，所以既然要吃透React，进阶React，就有必要搞懂异步组件。 老规矩，我们还"}, {"id": "6844903577220349959", "title": "前端面试考点多？看这些文章就够了（2019年6月更新版）", "desc": "金三银四跳槽季，offer快到碗里来，前端面试考点众多，而网上各个知识点的博客文章又太多，看的眼花缭乱……所以便整理了一下常见知识点的精华文章，每个知识点的文章控制在3篇以内，尽量覆盖该知识点的下容易被面试到的所有内容，文章都是之前自己读过的，确定是精华干货。文章会一直更新，也…"}, {"id": "6986824393653485605", "title": "如何设计可视化搭建平台的组件商店？", "desc": "之前一直在做 lowcode 和可视化相关的项目，也围绕可视化技术输出了一系列技术文章，今天我继续和大家来聊聊可视化平台相关的话题——组件商店。这个需求其实很早在我开源 H5-Dooring 之后就有"}, {"id": "7000953114345881637", "title": "😲 React 入门学习（七）-- 脚手架配置代理", "desc": "引言 React 本身只关注于页面，并不包含发送 Ajax 请求的代码，所以一般都是集成第三方的包，或者自己封装的 自己封装的话，比较麻烦"}, {"id": "6940422320427106335", "title": "「react进阶」一文吃透React高阶组件(HOC)", "desc": "React高阶组件(HOC)，对于很多react开发者来说并不陌生，它是灵活使用react组件的一种技巧，高阶组件本身不是组件，它是一个参数为组件，返回值也是一个组件的函数。高阶作用用于强化组件，复用逻辑，提升渲染性能等作用。高阶组件也并不是很难理解，其实接触过后还是蛮简单的，…"}, {"id": "6844903872176062472", "title": "react hooks 实现动态表单存储", "desc": "在上个月里, 公司承接了一个项目, 由我主编前端代码. 看似挺简单的一些需求, 以为写起来不会很难, 于是乎就屁颠屁颠的开始搭建框架, 用公司前端前辈造好的轮子, 基于 react 开发的 @Gdjiami/cli 初始化项目, 简单的项目搭建好后, 就开始页面的开发了. 这就…"}, {"id": "6845166891825102861", "title": "React Hooks , 这次一定会！", "desc": "useEffect 就是监听每当依赖变化时，执行回调函数的存在函数组件中的钩子函数。 effect在render后按照前后顺序执行。 effect在没有任何依赖的情况下，render后每次都按照顺序执行。 可以把 useEffect Hook 看做 componentDidMo…"}, {"id": "6844903700205404174", "title": "【译】10个有趣的JSCSS库（2018.10）", "desc": "Tutorialzine每月都会给我们精心挑选优秀的web开发资源，这些资源可以帮助我们解锁最新和最炫酷的网络开发姿势。前端er,让我们一起先睹为快吧！ WatermelonDB是用于构建React和React Native应用程序的下一代数据库。快速，高度可扩展-从数百到数万…"}, {"id": "6943516809706340389", "title": "useEffect完整指南(二)", "desc": "count仅是一个数字而已。他不是神奇的“watcher”，“proxy”，或者其他任何东西，他就是一个普通的数字像下面这个一样： 我们组件第一次渲染的时候，从useState()拿到conut的初始值0。当我们调用setCount(1) , react会再次渲染组件，这次的c…"}, {"id": "6991497287671218189", "title": "020.React配置代理", "desc": "React本身只关注界面，并不包含发送ajax请求的代码 前端应用需要通过ajax请求与后台进行交互 react应用需要集成第三方ajax库或自己封装库 常用的ajax库配置代理的方法"}, {"id": "6844904120906694669", "title": "React Hook源码解析（三）", "desc": "深入了Hook的源码。本文将以useState和useEffect为主，总结一下Hook的相关内容， 组件首次挂载的时候，依次执行四行useXXX的代码，生成4个hook对象，按照顺序形成完整的hook链，挂载在Fiber对象的memorizedState属性上。hook对象上…"}, {"id": "6844904181967372295", "title": "[前端进阶]从零搭建属于你的脚手架", "desc": "大部分前端选手，也包括我自己，经常都是vue-cli，或者create-react-app一把梭。不得不承认这些著名的脚手架写的确实好，能够给我们做项目提速。但是久而久之很容易进入自己的舒适区，最近不是很流行“跳出舒适区”吗？而且各大培训机构都做贩卖焦虑，就为了可以让更多的人可…"}, {"id": "6991476551267123231", "title": "018.使用React脚手架创建React应用", "desc": "一.使用create-react-app创建应用 react脚手架 用于快速创建一个基于React库的模板项目 包含了所有需要的配置（语法检查、jsx编译、devServer等） 下载好所有相关依赖 "}, {"id": "6844903781805752328", "title": "react fiber 主流程及功能模块梳理", "desc": "若state.nums初始值为0，在非并发模式下，最终会更新到2，因为setState是同步的；而在并发模式下，nums最终仍然为1，因为第二个setState任务无法加入调度器；来源1和来源3都是调度任务，在react调度器中，调度任务不能同时出现两个或以上；为什么有这个规则…"}, {"id": "6980139644125970462", "title": "错误边界(精读React官方文档—16)", "desc": "什么是错误边界？ 解读 错误边界指的是部分UI导致的JS错误导致整个应用崩溃，React为防止这种问题的发生引入 了错误边界，错误边界是一种组件，这种组件可以检测发生在其子组件树任何位置的JS错误，并"}, {"id": "6844903612775137294", "title": "中国行政区划信息JS库china-location", "desc": "经常会在一些项目中用到地址选择的东西，特别是在一些在线商城要填写收货地址的时候，省市区3个联动的下拉列表是最常用的。然后我也突然有一天在一个小项目中要有收货地址时，突然发现好像没有一个现成的库(要能直接npm install xxx)去使用😰，然后在github去搜了一圈，确…"}, {"id": "6844904184538464269", "title": "前端问答整理", "desc": "link 是一种 html 标签，它没有兼容性问题，而且可以通过 js 的 DOM 操作动态的引入样式表。 @import 是css提供的一种引入样式表的语法，不可以动态加载，不兼容ie5以下。 由于link 是html标签，所以它引入的样式是在页面加载时同时加载的，@impo…"}, {"id": "6844903827926155272", "title": "这次我要上SSR", "desc": "项目源码拉了就跑Gif预览效果SSR：服务端渲染，在服务端将首屏的html直接返回给客户端SEO：让各爬虫能爬到首屏的内容，匹配到搜索关键字，提高在百度谷歌的排序加快首屏速度，不再是加载完js然后Re"}, {"id": "6844903982851162126", "title": "父组件伸手子组件的方式总结", "desc": "1. 前言 现在每天写的最多的就是组件了，必不可少地会碰到处理组件之间数据传递的问题。涉及到父子组件通信的话一般分为子组件获取父组件的数据以及方法和父组件获取子组件的数据以及方法。这篇文章就是总结react，vue父组件如何伸手获取子组件的数据以及调用子组件方法的。 2. re…"}, {"id": "6844903907433381901", "title": "你想知道的 React 组件设计模式这里都有(下)", "desc": "上一篇介绍了三种设计模式，包括1.容器与展示组件 2.高阶组件 3.render props。 React 的 Context 接口提供了一个无需为每层组件手动添加 props ，就能在组件树间进行数据传递的方法。 在一个典型的 React 应用中，数据是通过 props 属性…"}, {"id": "6844904046311161864", "title": "React源码解读【三】任务调度", "desc": "每个人，最终都会成为历史演化历程中的炮灰。如今互联网上各处充斥焦虑浮躁，万事不能尽美，实为恶性循环。 React 设计体系如人类社会一般，拨动时间轮盘的那一刻，你便成了穿梭在轮片中的一粒细沙，角逐过程处处都需要亮出你的属性，你重要吗？你无可替代吗？你有特殊权限吗？没有，那不好意…"}, {"id": "6844903805570514958", "title": "React Hooks的学习笔记", "desc": "有一天我在逛Medium的时候，突然发现了一篇介绍React Hooks的文章，我认真看了一遍后，计划好好了解一下它。 在学习Hooks之前，官网上说了Hooks是完全可用的（v16.8.0），并没有破坏性变更，而且完全向后兼容，与其说是一种新API，不如说是React Tea…"}, {"id": "6904230104617418765", "title": "React16系列：船新的context", "desc": "众所周知 react 推荐的一个重要思想就是单向数据流，整个 react 应用要遵循数据从上到下的方向传递。这就造成了在多层组件嵌套的情况下，父组件的数据要传给最底层的组件的话就要经过多层中间组件的 props，造成了大量冗余的 props 声明（称为 props drilli…"}, {"id": "6844903664499294221", "title": "如何写出更好的 React 代码？", "desc": "使用 React 可以轻松创建交互式界面。为应用中的每个状态设计简单的视图，当数据变化时，React 会高效地更新和渲染正确的组件。 这篇文章中，我会介绍一些使你成为更好的 React 开发者的方法。包括从工具到代码风格等一系列内容，这些都可以帮助你提升 React 相关技能。…"}, {"id": "6921717173903851533", "title": "深入浅出的学习react[学习笔记11]", "desc": "时下 React 16 乃至 React 17 都是业界公认的“当红炸子鸡”，相比之下 React 15 似乎已经是一副黯淡无光垂垂老矣的囧相了。 在这样的时代背景下，愿意自动自发地了解 React 15 的人越来越少，这是一个令人心碎的现象。毕竟有位伟人曾经说过，“以史为镜，…"}, {"id": "6844903613266034701", "title": "React 快速上手 - 09 数据请求 fetch", "desc": "fetch ... 异常处理要用 try ... catch ... IE 全阵亡，低版本 Safari 兼容问题，Firefox Chrome Opera 如果特性不开的话也会出问题，懂的同学说可以浏览器配置和打 polyfill 补丁，但是这样需要自己做很多工作，如果你的代…"}, {"id": "6844903680903217160", "title": "[译] 深入理解 Props 和 State", "desc": "React Native vs. Cordova、PhoneGap、Ionic，等等 (待翻译) 在上篇文章中，我们介绍了组件、props 和 state 。 props 和 state 的区别相当明显，确定何时使用 props 和 state 似乎也很简单。举个例子，屋顶的颜…"}, {"id": "6844904009501769735", "title": "React Hooks 源码解析（4）：useEffect", "desc": "1. useEffect 简介 对于第二点，首先，针对 Class Component 来说，我们写 React 应用时经常要在组件的各种生命周期中编写代码，如在 componentDidMount 和 componentDidUpdate 中发送 HTTP 请求、事件绑定、甚…"}, {"id": "6988741694493556744", "title": "React离开路由时确认弹窗", "desc": "​  一、离开路由弹出弹窗 最近做一个h5的需求，要求在用户页面返回时如果操作了就弹出一个弹窗，来提示用户是否保存此页面所操作的内容。 之前做过vue的路由守卫，但是react的还是第一次做，就记录一"}, {"id": "6844903668039286797", "title": "一次TypeScript, React, Node, MongoDB的模板式前后端分离开发实践", "desc": "在大概1年前接触了typescript之后, 日渐被它所吸引. 甚至一个简单的本地测试文件node ./test.js有时也会切到ts-node ./test.ts. 在同样的时间节点之前, 还是会不时地去学学node, mongodb相关的. 可是, 由于懒(需)惰(求), …"}, {"id": "6994306022659588104", "title": "react 子组件向父组件传值简单示例", "desc": "父组件 ​ data即为要向子组件 ExpressionTree 组件传递的值， 子组件 ​ ​ node.props.title，就相当于this.props.title，onSelect api "}, {"id": "6844903527039533064", "title": "进阶 Javascript 生成器", "desc": "我曾一度认为没有必要去学习 Javascript 的生成器( Generator )，认为它只是解决异步行为的一种过渡解决方案，直到最近对相关工具库的深入学习，才逐渐认识到其强大之处。可能你并没有手动去写过一个生成器，但是不得不否认它已经被广泛使用，尤其是在 redux-sag…"}, {"id": "6844904046201929735", "title": "React Hooks 从入门到放弃(二)", "desc": "作者最初使用React Hooks的场景就是用Hooks重构现有的 Class 组件。 按照上面的暴力输出思路和官网提供的HooksAPI, 我们将一个 Class 组件改造成了 Function + Hooks 组件试试。 看上去好像没什么问题, 有一种重构代码大功告成的感觉…"}, {"id": "6885163621358403597", "title": "React 中的虚拟 DOM 和 diff 算法", "desc": "本篇内容将会探究 React 中的虚拟 DOM 和 diff 算法，明白大致原理，并了解如何简单实现 虚拟 DOM 树。 为什么需要虚拟 DOM（Virtual DOM）呢？我们先来看看真实的 DOM 的问题。 列表中的数据依次是 1，2，3。现在需要把数据替换成 4、5、6、…"}, {"id": "6844904099679305741", "title": "React组件 纯组件 函数组件 高阶组件", "desc": "如果你想写的组件只包含一个 render 方法，并且不包含 state，那么使用函数组件就会更简单。我们不需要定义一个继承于 React.Component 的类，我们可以定义一个函数，这个函数接收 props 作为参数，然后返回需要渲染的元素。 shouldComponent…"}, {"id": "6844903764843823112", "title": "React 组件生命周期详解", "desc": "本文详细介绍了 React 生命周期的用法以及各个阶段的生命周期进行，并且用实例代码做了详细演示。代码位置 在 React 组件挂载之前被调用，实现 React.Component 的子类的构造函数时，要在第一行加上 super(props)。 如果没有初始化状态（state）…"}, {"id": "6993254126305951752", "title": "在React Native中使用SVG-教程与示例", "desc": "当你在开发React Native应用程序时，你可能会被要求实现图标。现在，简单的方法是简单地提取图标的.png 或.jpeg 文件，并在React Native的Image 组件中使用它。这将为你带"}, {"id": "6844903614264115213", "title": "前端配置工程师", "desc": "create-react-app中webpack配置学习"}, {"id": "6844903591950417928", "title": "redux中间件之redux-thunk", "desc": "redux的核心概念其实很简单：将需要修改的state都存入到store里，发起一个action用来描述发生了什么，用reducers描述action如何改变state tree 。创建store的时候需要传入reducer，真正能改变store中数据的是store.dispa…"}, {"id": "6844904185817726983", "title": "web端断点续传的思路和实现", "desc": "看过一道面试题要求实现断点续传，当时脑海大致想了一下实现思路，没完全想通，感觉涉及的知识点挺多，于是花了些时间用react和nodejs实现了一个简易版，并梳理了实现思路和用到的知识点。 demo可以在此处下载，另外，推荐使用chrome本身的网络限速来方便的测试断点续传功能。…"}, {"id": "6844904082021285895", "title": "react系列 react router", "desc": "其实在我思考react-router的用处时候，我有些愣住。 这不是理所当然的吗！react-router可以是组件路由啊,它可以，额，它可以... 在不清楚react-router的用处的时候，可以先假设没有react-router会怎样。那么，我们编写一个复杂应用会有什么改…"}, {"id": "6844904029160472590", "title": "根据 React 历史来聊如何理解虚拟 DOM", "desc": "最近我发现很多面试题里面都有「如何理解虚拟 DOM」这个题，我觉得这个题应该没有想象中那么好答，因为很多人没有真正理解虚拟 DOM 它的价值所在，我这篇从虚拟 DOM 的诞生过程来引出它的价值以及历史地位，帮助你深入的理解它。 本质上是 JavaScript 对象，这个对象就是…"}, {"id": "6844903558110806024", "title": "为create-react-app配置ESLint", "desc": "按理说，eject前后配置不变，只不过是将配置弹出，npm start 应该可以直接运行，但是却报了ESLint的错误。 一开始我以为是eslint-config-alloy/react的问题，然后重新手写了一些配置依然会报错，证明不是eslint-config-alloy/r…"}, {"id": "6844904081517985799", "title": "React中使用CodeMirror实现SQL编辑器基本功能", "desc": "最近有这样一个需求，网页中需要做一个SQL编辑器，要求有一些基本的SQL编辑器功能，最后选中基于比较完善的CodeMirror来开发相关功能。本片文章涵盖的基本功能包括CodeMirror在React中的引入、输入联想、执行选中部分SQL等功能。因为项目基于React来开发，所…"}, {"id": "6844903774868226062", "title": "为什么我们要添加 super(props) ？", "desc": "我听说 Hooks 成了新的焦点。但是呢，我想通过这篇博客来介绍下class声明组件有趣的地方。意下如何？ 下面内容无法提高你的React使用技巧。但是，当你深入探究事物是如何运行时，将会发现它们所带来的喜悦之情。 首先来看看第一个例子。 这是在2015年，在React0.13…"}, {"id": "6844903805839114254", "title": "在Canvas中使用React Hooks", "desc": "在本文中，我将使用React Hooks创建一个html canvas 画图网站，我将使用create-react-app脚手架从零开始构建项目。最后这个应用程序有诸如清除、撤销和使用localStorage基本功能。 本文我将向您展示任何构建自定义Hooks和在普通的Hook…"}, {"id": "6844903688985657357", "title": "KOA2  compose 串联中间件实现（洋葱模型）", "desc": "Koa 是当下主流 NodeJS 框架，以轻量见长，而它中间件机制与相对传统的 Express 支持了异步，所以编码时经常使用 async/await，提高了可读性，使代码变得更优雅，上一篇文章 NodeJS 进阶 —— Koa 源码分析，也对 “洋葱模型” 和实现它的 com…"}, {"id": "6844903633637605383", "title": "「 ThoughtWorks面试 —— 一次愉快的技术交流 | 掘金技术征文」", "desc": "作为一名前端程序猿，ThoughtWorks的面试在一定程度上冲击了我的认知，面试过程中不仅让我了解了自身优势，也对自己不足有了很深的认知，抛开面试结果来说，整个面试过程就是一次愉快的技术交流。 很久以前就对TW有所了解，由于自己的不自信和一些其他原因一直不敢尝试，最近收到了朋…"}, {"id": "6896654871143907335", "title": "React 函数式组件性能优化", "desc": "减少重新render的次数。因为进入diff算法后，判断到组件是Updating状态，如果shouldComponentUpdate()返回false,就直接停止diff，所以也不会执行render，减少性能开销 减少计算的量。主要是减少重复计算，对于函数式组件来说，每次 re…"}, {"id": "6937474904375689224", "title": "造一个 react-error-boundary 轮子", "desc": "朋友们好啊，我是海怪，刚才老板对我说：海怪，发生甚么事了，怎么页面白屏了？我说：怎么回事？给我发了几张截图。我打开控制台一看： 哦！原来是昨天，有个后端年轻人，说要和我联调接口，我说：可以。然后，我说：小兄弟，你的数据尽量按我需要的格式来： 踏不服气，他说你这个没用，我说我这个…"}, {"id": "6844904020230799373", "title": "React源码解读【二】更新创建", "desc": "我们曾探寻过物种起源，我们也想象过未来要去向何方。一个程序，它也有生与死，轮回不止 React 的鲜活生命起源于 ReactDOM.render ，这个过程会为它的一生储备好很多必需品，我们顺着这个线索，一探婴儿般 React 应用诞生之初的悦然。 首先看到 react-dom…"}, {"id": "6985368156936077343", "title": "用React 360构建一个VR应用", "desc": "作为一个技术主管，你可能知道虚拟现实及其各种应用。视频游戏、网络和移动应用程序等都可以从VR的惊人功能中获得好处。 如果你的下一个开发目标是创建VR应用程序，并且你熟悉React生态系统，你很幸运。你"}, {"id": "6985347283810418702", "title": "React的使用", "desc": "React React概述 React是一个用于构建用户界面的好JavaScript库。用户界面：HTML页面 React主要用来写HTML页面，或构建web项目。 组件是React最重要的内容 Re"}, {"id": "6981752205053263885", "title": "简单的 hooks", "desc": "1，为什么 react 要搞 hooks？ 想要复用一个有状态组件太麻烦， react 的核心思想是将一个页面拆成多个可复用的组件，并且用由上而下的单项数据流形式将这些组件都串联起来。如果在大型项目中"}, {"id": "6844903605086978062", "title": "TypeScript+Webpack+React组件库开发采坑实记", "desc": "本文为配置TypeScript+Webpack+React，开发UI组件库时遇到的坑以及相对应的解决方案记录，适合相关同学进行查阅解决问题。 此三类配置和选择会同时导致某一类问题，因此这三类不作为分类标准，仅作为读者思考的方向，我们下面会根据具体的问题和错误以及对应的解决方案来…"}, {"id": "6969428539267350564", "title": "浅析React Hooks", "desc": "React 的有两套 API：类（class）API 和基于函数的钩子（hooks） API，官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较\"轻\"，而类比较\"重\"。而且，钩子"}, {"id": "6844903955592380430", "title": "AntDesign Form 和 Table 组件套用，实现行数据的验证、添加和删除", "desc": "开发中有这样的需求，需要对单元格中每一项进行校验，并提供新增行和删除行的操作。 因为 Form 组件可以很方便的对数据进行校验，所以就想到了套用 From 组件和 Table 组件来实现这个需求。能实现需求中的所有功能点，但是方案并不完美，小伙伴们可以借鉴一下👉链接在这里。 …"}, {"id": "6934682500811718693", "title": "手撕源码之—从1实现react-redux", "desc": "接下来我们来实现另外一个库react-redux，主要作用就是用来简化在react中使用redux的流程。 引入connect方法，用来将store里的state、定义的action和组件进行绑定，注入组件的props中。 connect方法是一个高阶函数，传入mapState…"}, {"id": "6844903775149228046", "title": "React Scheduler 源码详解（2）", "desc": "上次讲述了任务的优先级，以及如何根据优先级（过期时间）加入任务链表,今天来分析一下如何在一个合适的时机去执行任务。 上文讲到要用requetAnimationFrame去模拟requestIdleCallback，但requetAnimationFrame有个缺点，就是当前ta…"}, {"id": "6847902223419047944", "title": "react-slide-routes，最简单的 React Router 动态切换路由方案", "desc": "开发 React + React Router 项目时，想实现一个路由跳转时、滑动切换路由页面的效果。 提着两把西瓜刀从 GitHub 一路砍到 Stack Overflow，楞是没找到一个简单易用的解决方案。 其实 react-transition-group 是一个提供基础…"}, {"id": "6981836039463632932", "title": "React：记账本08---优化：使用svg-sprite-loader、svgo-loader 封装svg-icon组件", "desc": "需求分析 项目引用了大量的svg-icon图表，正常react使用icon要这样： 现在想类似element一样，通过某个组件一行引入，类似： 过程中使用到2个loader： svg-sprite-l"}, {"id": "6844904078435155982", "title": "dva源码分析", "desc": "dva是基于react的二次封装，在工作中经常用到，因此有必要了解一下其中的实现。本文将从源码层面分析dva是如何将redux、redux-saga、react-router等进行封装的。 我们从这几个api开始，了解dva是如何封装react应用的。 整个dva项目使用ler…"}, {"id": "6915776631034511367", "title": "react 基于 flv.js 封装简单的播放器（四）", "desc": "这次我已经把这个简单的直播器完成了，接下来就是自己使用，如果有改善的或者有 bug 什么的就接着记录。 今天主要说一下我解决 safari 浏览器全屏的问题。上次我也说了基于前面的代码，在 chrome 中是没有什么问题的，但是在 safari 浏览器中就会出现只有中间一小块有…"}, {"id": "6844903709374152718", "title": "React测试框架之enzyme", "desc": "Enzyme是由Airbnb开源的一个React的JavaScript测试工具，使React组件的输出更加容易extrapolate 。Enzyme的API和jQuery操作DOM一样灵活易用，因为它使用的是cheerio库来解析虚拟DOM，而cheerio的目标则是做服务器端…"}, {"id": "6844903604164395021", "title": "详解展示组件和容器组件的区别和应用", "desc": "在使用React中，你是否会出现过一个文件的代码很多，既存在应用数据的读取和处理，又存在数据的显示，而且每个组件还不能复用。 首先我们来看一个容器组件和展示组件一起的例子吧。 大家可以看到这个例子是没有办法复用的，因为数据的请求和数据的展示都在一个组件进行，要实现组件的复用，我…"}, {"id": "6844903943017857031", "title": "React源码解析之scheduleWork（上）", "desc": "从本篇开始，我们就正式进入React的核心调度算法—Fiber调度机制。 利用FiberRoot的pendingInteractionMap属性和不同的expirationTime，获取每次schedule所需的update任务的集合，记录它们的数量，并检测这些任务是否会出错。…"}, {"id": "6844903774289395719", "title": "Form 表单组件的设计之路", "desc": "前端的Form 表单主要用于解决数据获取、数据校验、数据赋值 这三大类问题。这篇文章里面的提供的解决方案能够比较完美的用在 React 框架上，但是解决问题的思路相信应该是可以使用于任何框架语言。 中后台的表单组件已经不仅仅有 input 和 select，可能还扩展到 范围选…"}, {"id": "6913532066156494855", "title": "React 源码之架构总览(三大核心包)", "desc": "react包, 平时在开发过程中使用的绝大部分api均来自此包(不是所有). 在react启动之后, 正常可以改变渲染的基本操作有 3 个. 以上setState和dispatchAction都由react包直接暴露. 所有要想 react 工作, 基本上是调用react包的 …"}, {"id": "6844904176003055630", "title": "你不知道的React Hook", "desc": "自 React16.8 正式发布React Hook之后，已经过去了5个版本（本博客于React 16.13.1版本时发布）。自己使用Hook已经有了一段时间，不得不说在最初使用Hook的时候也进入了很多误区。在这篇文章中，我会抛出并解答我遇到的一些问题，同时整理对Hook的心…"}, {"id": "6844903761660346375", "title": "对于封装react组件的一些思考", "desc": "由于近期在涉及到封装组件的时候遇到了一些问题，于是我认真地了解了一下react封装组件过程中应该要涉及和思考到的一些问题，写了下来。（以下主要是针对UI组件，由于水平有限不保证内容正确性，仅仅是一些个人的思考） 组件可以将UI切分成一些的独立的、可复用的部件，这样就只需专注于构…"}, {"id": "6844903668781678600", "title": "五分钟 Styled-components 高级实用技巧", "desc": "回到2013年，React凭空出世。但是在那时，我们会想，oh shit! 我们好不容易分离了HTML/CSS/JS, 为什么出现了JSX，我们又需要把HTML和JS耦合在一起？React 创造了 HTML in JS. 在React中，我们知道，一切即组件。那既然HTML能在…"}, {"id": "6844903587542368264", "title": "前端面试问题小汇集", "desc": "要有套路。如何引导面试官问你擅长的领域就看自我介绍了。学历专业简述、项目细说、兴趣特长一句带过。 即使没有实际地阅读过源码，也要找别人分享的博客去了解其中的原理。 Vuex 其实是一个针对 Vue 特化的 Flux，主要是为了配合 Vue 本身的响应式机制。当然吸取了一些 Re…"}, {"id": "6844903763946242055", "title": "react 设计模式与最佳实践", "desc": "本文是阅读米凯莱·贝尔托利 《React设计模式与最佳实践》 一书的读书笔记，支持作者请点这里购买。 废话不少说，直接上干货的哈。 在 React 里，有一种情况是，我们经常需要根据条件判断决定是否渲染某些组件。就像是这样： 当条件判断变得更复杂的请求下，我们可以使用方法和计算…"}, {"id": "6844904190850891783", "title": "如何在react hooks中请求数据(译)🦄", "desc": "在本教程中，我会向您展示如何使用state和effect在 React with Hooks 中获取数据。我们将使用Hacker News API从科技界获取热门文章。您还将实现用于数据获取的自定义 hook，该 hook 可在应用程序中的任何位置重用或作为独立节点程序包发布在…"}, {"id": "6916531902773985294", "title": "create-react-app核心源码解读", "desc": "create-react-app是大家常用的用来创建react项目的脚手架，它的设计理念和实现思路值的我们学习。我研究了一下create-react-app源码，并把它的核心功能模块梳理出来。下面是这"}, {"id": "6844903682891333640", "title": "深入探究immutable.js的实现机制（二）", "desc": "本文是深入探究immutable.js系列的第二篇。 上一篇我们研究了 Immutable.js 持久化数据结构的基本实现原理，对其核心数据结构Vector Trie进行了介绍，并着重探究了其中的位分区机制。采用位分区的根本原因是为了优化速度，而对于空间的优化， Immutab…"}, {"id": "6844904008646131725", "title": "学用Hooks写React组件——基础版移动端无缝轮播图组件", "desc": "答：核心思想是利用视觉上的感觉，在用户无感的情况下切换回去，也就是快速回滚。为了达成这个目的，就是在最后一个轮播图的后面加上第一个轮播图，当从最后一个切换到第一个时，先切换到备用的第一个，然后快速回滚到真正的第一个轮播图。第一个同理，可能有点绕，可以看图理解： 布局思路就是这样…"}, {"id": "6998928263573667876", "title": "React setState在Legacy模式下的表现", "desc": "分析 在非函数式更新state情况下,setState存在批量更新的优化方式,对于相同的state在一次更新中只有最后一个setState生效,类似于Object.assign. 批量更新时函数的ex"}, {"id": "6900950298773159944", "title": "小技巧|在React中防范XSS攻击", "desc": "跨站点脚本（XSS）攻击是一种将恶意代码注入网页然后执行的攻击。这是前端Web开发人员必须应对的最常见的网络攻击形式之一，因此了解攻击的工作原理和防范方法非常重要。 在本文中，我们将查看几个用React编写的代码示例，这样您也可以保护您的站点和用户。 对于我们所有的示例，我们将…"}, {"id": "6935621064517451812", "title": "react  ssr 服务端渲染入门", "desc": "与传统的web项目直接获取服务端渲染好的HTML不同，单页面应用使用JavaScript在脚本客户端生成HTML来呈现内容，用户需要等待JS解析执行完成后才能看到页面，这就使得白屏加载时间变长，影响用户体验。 对于单页面应用，当搜索引擎的爬虫爬取网站HTMl文件时，通常情况下单…"}, {"id": "6912061407961808903", "title": "【KT】sugard自定义主题皮肤实践踩坑总结", "desc": "在今年 3 月，我们研发团队决定联合视觉团队，共同打造一套符合自身业务的 UI 组件库，毕竟迭代需求过程中，视觉对于 UI 组件的也是有规范的，当研发与视觉统一规范之后，是否可以整一波 UI 组件库呢？于是项目从立项到落地再到文档的补全上线，前后花了近半年的时间。有幸参与此 U…"}, {"id": "6844904118423650318", "title": "记录一次React+TypeScript的开发历程", "desc": "第四行：下载TypeScript相关。 第七行：下载Webpack所需要的loader。 而开发过程中的scss代码均保存为.scss文件，webpack就可以自动将其编译输出为css文件。 就可以让webpack监听项目目录，这样当文件发生变动时，webpack就可以自动将文…"}, {"id": "6923559086759870477", "title": "react hooks 实现生命周期", "desc": "|class组件|Hooks组件||----|----||constructor|useState||getDerivedStateFromProps|useState里面update函数||comp"}, {"id": "6982385422953349156", "title": "如何搭建一个简易的 Web Terminal（一）", "desc": "前言 在介绍本篇文章的时候，先说一下本篇文章的一些背景。笔者是基于公司的基础建设哆啦A梦（doraemon）一些功能背景写的这篇文章，不了解、有兴趣的同学可以去 袋鼠云 的 github 下面了解一下"}, {"id": "6844903683931504647", "title": "为什么你应该放弃React老的Context API用新的Context API", "desc": "通过在父组件上声明getChildContext方法为其子孙组件提供context，我们称其ProviderComponent。注意必须要声明Parent.childContextType才会生效，而子组件如果需要使用context，需要显示得声明Child.contextTy…"}, {"id": "6844903740852404238", "title": "react 高阶函数详解(附送彩蛋)", "desc": "主要是学习react\b中的一些经验总结，如果你觉得对你有帮助，可以给个赞github。 有状态组件：组件内部状态发生变化，需要state来保存变化。 无状态组件：组件内部状态是不变的，用不到state。建议写成函数组件 组件设计思路：通过定义少部分有状态组件管理整个应用的状态变…"}, {"id": "6950301479412432903", "title": "Angular 和 React 从概念到使用对比", "desc": "概念框架与库Angular是一个框架，而React是一个库。React 本身不允许创建Web应用程序，因为它旨在创建视图（因此在MVC中为“ V”）。"}, {"id": "6899606617747095566", "title": "React SSR源码剖析", "desc": "也没有执行render之后的生命周期，组件没有被完整地“渲染”出来。因此，另一部分渲染工作仍然要在客户端完成，这个过程就是 hydrate"}, {"id": "6996927128381947935", "title": "浅谈 state hooks 的同步和“异步”", "desc": "场景 最近在一个上传组件中遇到一个疑惑，如下伪代码： 一开始以为，此处的 setter 是异步的，所以担心在后面操作的时候，获取不到最新的值。然而，在下面操作的时候，却发现拿到的是最新值，不免心生疑惑"}, {"id": "6911601119898959885", "title": "localStorage使用总结", "desc": "一、什么是localStorage、sessionStorage在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题("}, {"id": "6844903519410094088", "title": "-webkit-overflow-scrolling:touch属性副作用--QQ内置浏览器空白处理", "desc": "唯独QQ内置浏览器出现了不可预见的bug：向下/向上快速滑动页面的时候，页面会出现空白，等滑动结束后内容显示；安卓无此问题。 表达下我自己的看法：百度不是全能的，偶尔谷歌一下，也可以发现新大陆..."}, {"id": "6844903555472556040", "title": "[译] 构造函数已死，构造函数万岁！", "desc": "尽管无状态函数组件（SFCs）是一件趁手的神兵利器，但 ES6 类组件仍旧是创建 React 组件及其状态和生命周期钩子函数的默认方式。 假设一个 ES6 类组件如下例所示（只展示简化过的部分代码）。 在 constructor 中初始化 state，并于 componentD…"}, {"id": "6938014186106683429", "title": "全网react基础知识整理", "desc": "这个是我最近在跟尚硅谷学习react，里面的一些文字都是老师的备注，我只是把学的东西和老师的资料，按照我自己比较喜欢的方法，整理了一下，方便自己在开发项目中能快速查看资料。 BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。 HashRou…"}, {"id": "6844903789284032526", "title": "为什么react-redux没有更新hooks API", "desc": "去年年底，出于兴趣，研究了一波 redux 和 react-redux 的源码，除了在原理上的理解之外，让我较为好奇的一点就是：React-Redux到目前为止都没有对 Hooks 进行支持。从使用角度上来讲，出现一个类似： 说明了总体上社区对于 Hooks 的接受度是很高的，…"}, {"id": "6844903599621799944", "title": "别人写的CSS，你敢用吗？", "desc": "大多数web开发者认为只要不使用别人的 JS，安全就会有保证。殊不知“黑客”已经开始在 CSS 上做手脚了。 在浏览器设置中用户可以禁用 JS，但是 CSS"}, {"id": "6937950873507233806", "title": "卧擦，这就是 React 服务端渲染？", "desc": "访问 http://localhost:3000 即可查看我们的应用程序了。 页面（page） 根据其文件名与路由关联。例如，pages/about.js 被映射到 /about。 在你的项目中的 pages 目录创建一个 about.js 。 1：在 pages 文件夹中新建…"}, {"id": "6989109674721640462", "title": "React 基础学习（二）", "desc": "脚手架是开发 现代Web应用 的必备；（注意：现代Web应用不再是直接创建一个文件夹，里面写个html页面，再加几个css，js就行了的，要考虑代码的规范，项目的打包上线、应用场景等等...，因此就需"}, {"id": "6903408452769415181", "title": "CRA 为什么要做成“黑盒”", "desc": "最近，在搭建某个业务系统的过程中，我选用了react作为主要的技术栈。和同事的业务交流中，我提到了“黑盒”这个词汇。在我司同事的强烈要求（火锅承诺）下，就有了今天这篇《CRA为什么要做成“黑盒”》。#"}, {"id": "6891177506524561416", "title": "一文总结React如何更新和优化", "desc": "本篇是偏向手册类型的总结性文章。 平时在写React时，遇到最频繁的场景就是组件的更新了，也总是避免不了考虑是否要对组件的更新进行优化，因此归纳总结一下，一方面有助于理清思路，避免混淆众多的API；另一方面也可以当作复习。 第一部分主要讲 React 最基本的更新方式，其他复杂…"}, {"id": "6844903649387216903", "title": "React 服务端渲染原理及过程", "desc": "服务端渲染在久远的 JSP、PHP 时期就已经在使用了，但是在单页面应用大行其道的情况下，却依然有着各种各样的方案来支持，因为服务端渲染确实有着很多好多好处，尤其是 Node 和三大框架相结合 的前后端同构，前后端共用一套代码，更是将单页应用的便利和服务端渲染的好处相结合，这里…"}, {"id": "6996901274604011551", "title": "React使用过程知识点随手记", "desc": "本人主要使用后端Java语言，也对前端react有兴趣，作为一个新手，未能进行系统的前端学习，因此，此文只能将使用React过程的一些零散的步骤过程记录下来，以便查询，如有错误，请指正。 0.crea"}, {"id": "6903790904801230856", "title": "React学习笔记（1）", "desc": "1. 创建react项目 2. 环境介绍 3. React和Vue文件结构 4. React —— JSX语法 5. React —— 组件 react的组件名不能小写开头，首字母需要大写，其他的随意。否则会警告，且不显示 组件的引入方式也和vue那些差不多，使用ES6的imp…"}, {"id": "6844903885484605453", "title": "AntD使用timePicker封装时间范围选择器（React hook版）", "desc": "基本就是通过disabledHours、 disabledMinutes、disabledSeconds分别判断结束时间大于开始时间，这里设置的最小时间差为0s。"}, {"id": "6930888640847413261", "title": "深入理解React协调算法", "desc": "React是一个用于构建界面的JavaScript库。它的核心是跟踪组件状态变化并将更新后的状态更新到屏幕上。在React中，我们把这个过程称为 reconciliation (协调)。通过调用setState方法，React检查状态或属性是否已更改，并在UI层上更新。 这是一…"}, {"id": "6889216059832958990", "title": "SSR 它到底香不香？细数 SSR 的利与弊", "desc": "网络链路上，由服务端发出接口请求，将返回数据随 HTML 响应内容一次性传递到客户端，比 CSR 二次请求更快。并且服务端网络传输速度更快（可以有更大带宽）、通信路径更短（可以同机房部署）、通信效率也更高（可以走 RPC） 客户端拿到这种 HTML 只能立即渲染出一页空白，二次…"}, {"id": "6844903503626764302", "title": "数据流架构学习笔记(二)-Redux", "desc": "初期参加工作开发项目时，使用React Native + Flux进行手机应用跨平台开发，在上一篇博文中数据流架构学习笔记(一)-Flux 对Flux做了一次总结，本文是我对数据流管理架构学习总结的第二篇数据流架构学习笔记(二)-Redux，是我在工作过程中对项目使用Redux…"}, {"id": "6844903557339037709", "title": "一个简洁且强大的状态管理库 - iFlow", "desc": "以React为主的开发过程中，用过主流的两大状态管理工具Redux和Mobx。但在我使用它们时，逐渐地感觉到了一些不太好的地方：Redux使用过程有点冗余和拖沓，而尽管Redux也有中间件，但Redux带来的收益和它官方说的一样：仅仅只是一个纯的状态容器而不是状态管理；而基于O…"}, {"id": "6844903649966030855", "title": "ReactNative 触控逻辑浅析", "desc": "一个View只要通过了俩个触摸事件的申请，就可以成为一个响应者。然后可以获取到触摸点的对应值和所在组件的相关信息。当滑动的时候，就可以得到滑动后的相关信息。当释放的时候，可以把本次滑动的信息更新到状态中或者释放状态更新这个数据。 在ReactNative的触摸事件处理过程中，从…"}, {"id": "6903262767495512078", "title": "一种chrome trace排查白屏问题的方法", "desc": "问题发生在前不久。刚开发完的功能被测试人员发现了问题。如下图所示，在两个页面跳转过程中，会出现闪一下白屏的情况。于是我开始排查这个问题。 由于前后两个页面都是移动端APP内的页面，因此使用chrome进行调试。 第一步，在手机上开启USB开发者模式。从APP中进入要调试的网页。…"}, {"id": "6844904133778997256", "title": "一个跨平台前端框架@medux", "desc": "原创框架@medux 是一个可以对接不同UI框架的通用前端框架，它包含统一的状态管理、路由管理、模块化管理、结构化管理等职能，可以广泛运行于支持 JS 运行时的平台上。 该框架是react-coat的升级版本，脱离了UI框架，不再捆绑react。"}, {"id": "6844903673324109831", "title": "Koa2和Redux中间件源码研究", "desc": "在Koa2中，中间件被存放在一个数组中。 使用koa中，最常见的就是app.use(fn)，use函数部分源码如下所示。首先中间件必须是个函数。若是generator函数，则需要进行转化。最后把该中间件推入middelaware数组中。 当调用app.listen函数时，实际上…"}, {"id": "6844903615803424781", "title": "【翻译】使用React、 Redux 和 SVG 开发游戏（三）", "desc": "在上一部分，你创建了你需要的其他游戏元素（Heart，FlyingObj和CannonBall）。然后让玩家能够点击按钮来开始游戏。你还使用CSS来让你的飞行物运动起来。 尽管有这些功能已经很酷了，但是他们还不足以完成这个游戏。你还需要让你的加农炮发射炮弹并攻击飞行物。你需要实…"}, {"id": "6844904050907938824", "title": "React 性能优化：虚拟DOM阐述", "desc": "学习React的虚拟DOM，并使用这些知识来提升你的应用程序的速度。通过这篇对框架内部实现友好入门的介绍中，我们将揭开JSX的神秘面纱，向您展示React如何做出渲染决策，解释如何查找瓶颈，并分享一些避免常见错误的技巧。 React不断震撼前端世界，而且没有衰退迹象的原因之一是…"}, {"id": "6844903537378328583", "title": "React 官方文档 FAQ 常见问题参考解决", "desc": "React 官方文档的新增章节，参考解决 React 使用当中最常见的一些问题，现已翻译完毕。本站将持续与React官方文档同步更新，欢迎关注，欢迎继续支持React中文社区建设，欢迎加入docschina.org"}, {"id": "6844903734850355214", "title": "【译】setState 是如何知道该做什么的？", "desc": "当然，React重新渲染状态为{ clicked: true }并且会返回<h1>Thanks</h1>元素以更新DOM。 更新DOM听起来像是React DOM负责的。但是我们调用了this.setState()，不是从React DOM中来的。我们的React.Compon…"}, {"id": "6844903822481965064", "title": "js运行机制浅析", "desc": "众所周知，js是一门单线程的语言。主要同他的用途有关，同一个时间只能做一件事儿，作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM，这决定了它只能是单线程，否则会带来很复杂的同步问题。 由于javaScript的资源加载是按序进行的，javaScri…"}, {"id": "6844903713581056013", "title": "React源码系列(四):  Fiber Tree && commit", "desc": "React16源码阅读系列分享 喜欢的可以点个 watch/start 后面还会更新"}, {"id": "6844903561755639821", "title": "Redux源码浅析", "desc": "最近一段时间公司比较闲下来，故抽空学了react + redux。在react方面，鉴于有Vue的经验，很多东西概念上还是很统一的，例如Virtual Dom props JSX等。区别在于react没有像Vue那样那么多的api，更多的是用纯粹的JavaScript去解决，在…"}, {"id": "6844903561378136078", "title": "利用yeoman构建项目generator", "desc": "yeoman是一个可以帮助开发者快速开启一个新项目的工具集。yoeman提出一个yeoman工作流的概念，通过脚手架工具（yo），构建工具（grunt gulp等）和包管理器（npm bower等）的配合使用让开发者专注于业务的解决上而不是其他小事情。在yeoman的官网中可以…"}, {"id": "6844903733621424142", "title": "React源码系列(五): 新 ContextAPI", "desc": "React16源码阅读系列分享 喜欢的可以点个 watch/start 后面还会更新 emmm 这一篇略水"}, {"id": "6915371504947429383", "title": "React复习01 - 组件通信与生命周期", "desc": "应该将setState视为请求而不是更新组件的命令。为了更好的感知性能，React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效。所以setState是异步的。 首先我们创建好的Context对象MyContext具有两个属性…"}, {"id": "6844903853943422989", "title": "[React Hooks 翻译] 4-8 Effect Hook", "desc": "可以将useEffect Hook视为componentDidMount，componentDidUpdate和componentWillUnmount的组合。 有时，我们希望在React更新DOM之后运行一些额外的操作。如： 这些操作不需要清理，也就是说可以运行它们并立即忘记…"}, {"id": "6844903543367811086", "title": "react-aomini（第三弹），赢在小巧，性能方面，干翻react-redux还是可以的", "desc": "到目前为止，react-aomini最大的特点就是简单粗暴（react-aomini是个人写的一个谈不上框架的小框架，不了解的可以看看我之前写的两篇博文，react-redux？mobx？或许我需要更加小巧玲珑的和小巧玲珑的react框架（第二弹）正式命名--aomini），大…"}, {"id": "6844903636112244750", "title": "[译] 单元素组件模式简介：使用 React 或其它组件库创建可靠组件的规则和实践", "desc": "使用 React 或其它基于组件的库创建可靠构建模块的规则和最佳实践。 在 2002 年 — 当我开始构建网页的时候 — 包括我在内的大多数开发者都使用 <table> 标签来构建网页布局。 直到 2005 年，我才开始遵循网页标准。 我了解了语义化和无障碍性，然后开始使用正确…"}, {"id": "6844903854002143240", "title": "实现一个react系列二：渲染组件", "desc": "在上一节JSX和虚拟DOM中，我们了解了react中的JSX到虚拟dom，以及如何将虚拟dom渲染成真实的dom。在这一节中，我们将会了解react中组件是如何渲染的。 通过类定义组件时，是需要继承React.component的，我们第一步就从React.Component的…"}, {"id": "6931910678387441672", "title": "react服务端渲染（一）", "desc": "服务端渲染：在服务端把你想要渲染的内容直接拼接成html字符串，然后返回给客户端渲染。 客户端渲染：在浏览器端加载解析html完成之后，再去执行js代码，由js代码把你想要渲染的内容插入到页面中。 所以，我们在开发中，到底要使用哪一种渲染方式，要根据具体的业务场景来订，不到万不…"}, {"id": "6854573215688327175", "title": "create-react-app 一些常用的自定义配置", "desc": "Create React App 是一个官方支持的创建 React 单页应用程序的方法。它提供了一个零配置的现代构建设置。 虽然开箱即用，但是开发中我们还是少不了做一些修改，下面总结了一些常用的配置。 包括项目入口文件、静态目录、项目构建输出目录、配置proxy文件... 可以…"}, {"id": "6938323748898471949", "title": "Vue开发者如何上手React", "desc": "从上面知道他们两者实际上都是在处理视图层的问题。 我们思考一下，如果没有React和Vue，那么在一个传统的 JavaScript 应用中，我们需要观察数据发生了什么变化， 并且为了让 DOM 保持最新的状态还必须对它进行更改。 比如：通过JQuery来获取到对应的DOM然后修…"}, {"id": "6844903679415894024", "title": "React高级组件精讲", "desc": "为了保证的可读性，本文采用意译而非直译。 高阶函数是以函数为参数，并且返回也是函数的的函数。类似的，高阶组件（简称HOC）接收 React 组件为参数，并且返回一个新的React组件。高阶组件本质也是一个函数，并不是一个组件。高阶组件的函数形式如下： 代码很简单，但当其它组件也…"}, {"id": "6844903822758772749", "title": "Antd 是怎么使用 React 制作 notification 组件的", "desc": "简介通过了解antd的制作方法以及观看源码，完成组件的简单实现；目录中心思想notificationcomponentnoticecomponentnotificationclassmessageco"}, {"id": "6844903667011682317", "title": "react在安卓下输入框被手机键盘遮挡问题", "desc": "问题概述  今天遇到了一个问题，在安卓手机上，当我要点击输入“店铺名称”时，手机软键盘弹出来刚好把输入框挡住了；挡住就算了，关键是页面还不能向上滑动，整个手机窗口被压为原来的二分之一左右；    然后"}, {"id": "6881815526121668616", "title": "react & taro 报错 _createSelectorQuery is not defined", "desc": "tarov3引入taro-ui3.0.0版本，编译成H5，部分组件在处理事件时会报错_xxxisnotdefined以  AtAccordion 组件为例，该组件使用了Taro.createSelec"}, {"id": "6844903790412300302", "title": "关于React Hooks，你不得不知的事", "desc": "React Hooks是React 16.8发布以来最吸引人的特性之一。在开始介绍React Hooks之前，让咱们先来理解一下什么是hooks。wikipedia是这样给hook下定义的： 通俗来说，Hook(钩子)就是通过拦截软件和系统内部函数调用和消息通信来增强原有功能的…"}, {"id": "6844904095136874509", "title": "干货 - 记录一次有意义的页面和代码优化", "desc": "集卡属于互动类型的游戏，此页面有9个弹窗，其中有同时出现的5个弹窗的情况，且如果同时出现必须按照指定顺序弹出。 遇到复杂的交互逻辑，数据结构可以帮助理清思路，抽象逻辑，完成稳定可靠的代码。在这次交互中，弹框要一个个按照顺序弹出，可以虑有序队列。但是弹框的弹出和关闭属于事件。在上…"}, {"id": "6844904166746243086", "title": "关于创建React App的8个有趣事实", "desc": "Create React App是搭建React项目的快速方法。这样我们可以重点放在代码上，而不是构建工具上。 Facebook保证其所有基础组件（Webpack，Babel，ESLint，Jest等）可以无缝地协同工作。 如果你想从TypeScript的React项目开始，只…"}, {"id": "6844903842279063565", "title": "React Hooks 深入系列", "desc": "在以下 demo 中, useEffect 的第二个参数传入 [], 希望的是 useEffect 里的函数只执行一次(类似在 componentDidMount 中执行一次, 但是注意这里仅仅是类似, 详细原因见上一条注意项), 页面上每隔 1s 递增 1。 但这样达到我们预…"}, {"id": "6844904159829819400", "title": "【译】为 REST API 创建可复用的 React Query 组件", "desc": "每次实现一个新的 UI 组件时，我都是先实现布局，然后，mock 数据用于 defaultProps，并提供一个空的点击监听模拟用户交互。然后，用真实的数据替换掉 mock 的函数和 props。 为了实现那些需要从服务端获取数据数据的组件，我一次次的重复着相同的操作。使用和配…"}, {"id": "6984375229380296717", "title": "Vuer眼中的React", "desc": "喊着\"Rethinking Best Practices\"诞生的React（燃起来了，兄弟们），也着实从开发模式的层面上取得了突破性的成绩，而作为独立开发者的尤大搞出来的Vue，也一样很酷。"}, {"id": "6844903912609169422", "title": "[译]React v16.9 新特性", "desc": "今天我们发布了 React 16.9。它包含了一些新特性、bug修复以及新的弃用警告，以便与筹备接下来的主要版本。 React v16.9 不包含破坏性更改，而且旧的生命周期方法在此版本依然沿用。但是，当你在新版本中使用旧的生命周期方法时，会提示如下警告： 正如警告所示，对于每…"}, {"id": "6844904036433395720", "title": "基用React Hooks + Antd快速实现一个列表页", "desc": "突然发现上一篇文章已经是半年之前了，最近一直在沉迷工作，每天就到掘金看看涨涨姿势。但是领导最近突然跟我说你hooks用的挺多的嘛，要不做个组内技术分享吧。所以又捡起了笔头写了一个类似普及Hooks的文章= = 话说回来，现在我已经不再使用class 组件（除非一些旧项目 或者 …"}, {"id": "6844903711139954702", "title": "使用70行代码配合hooks重新实现react-redux", "desc": "react-hooks 是 react 官方新的编写推荐，我们很容易在官方的 useReducer 钩子上进行一层很简单的封装以达到和以往 react-redux \\ redux-thunk \\ redux-logger 类似的功能，并且大幅度简化了声明。 这 70 行代码是一…"}, {"id": "6844904099389915144", "title": "🔥手撸JS系列:手写一个简易版REACT SSR框架", "desc": "在介绍SSR之前，我们可以先了解CSR。那什么是CSR呢？CSR即Client Side Render在我们传统的REACT/VUE项目中采取的是单页(SPA)方式，即只有一个html,结构大致如下: 所有的页面元素都是由打包后的bundle.js渲染出来的。 如上图 clie…"}, {"id": "6844904067718709262", "title": "redux 实现原理", "desc": "我们都知道在React中，数据在组件中是单项绑定的。父组件向子组件传递数据可以通过props，但是兄弟组件之间传递数据就比较麻烦。redux 就可以解决这一问题。 redux 是将整个应用的state存储在一个公共的store文件当中，组件可以通过分发（dispatch）一个动…"}, {"id": "6844903775186976775", "title": "[译] 将 React 作为 UI 运行时", "desc": "大多数教程把 React 称作是一个 UI 库。这是有道理的，因为 React 就是一个 UI 库。正如官网上的标语所说的那样。 我曾经写过关于构建用户界面会遇到的难题一文。但是本篇文章将以一种不同的方式来讲述 React — 因为它更像是一种编程运行时。 本篇文章不会教你任何…"}, {"id": "6948979480358551583", "title": "React之setState原理", "desc": "点击一次，最终this.state.count的打印结果是1，页面展示的是2。通过现象看，三次setState只是最后一次setState生效了，前两次都setState无效果。因为假如把第一次setState改为+3，count打印结果为1，展示结果为2，没有发生变化。而且没…"}, {"id": "6844903731843055630", "title": " [译]React高级话题之Refs and the DOM", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 在典型的React数据流中（自上而下的数据流），props是父组件与子组件打交道的唯一途径。为了与子组件交互，你需要给子组件传递一个新的props，促使它重新渲染。然而，有不少的场景需要我们在这种props主导型…"}, {"id": "6844903570555273229", "title": "高性能迷你React框架 anu1.3.0 发布", "desc": "anujs1.3.0是一款高性能React-like框架，是目前世界上对React16兼容最好的迷你库。 自React16起，相继推出createContext，createPortal, createRef与createResource等新API，表明官方正积极由纯view库…"}, {"id": "6844904049494622222", "title": "教你如何实现一个简易的 redux.js 和 redux 中间件", "desc": "首先我们要弄清楚 reduxjs 的思想、作用是什么，这样我们才能开始下一步的构思。在我看来 reduxjs 核心就是一种单一数据源的概念，数据存储在一个函数的 state 变量中，只能通过固定的方法去修改和获取 dispatch()、getState()。 在 SPA 应用中…"}, {"id": "6844903602616533005", "title": "react 版跳棋", "desc": "最近在学校闲着也是闲着，打算复习一下react，想写点什么东西，最后决定写一个跳棋打发闲暇的时光。最后按照自己设想的写完了，由于是基于create-react-app的架子，不能放在codepen上有一点遗憾，不过本文最后给了线上地址和github地址，大家感兴趣可以看看，欢迎…"}, {"id": "6844903917629734926", "title": "[译]JavaScript中的development模式怎么实现", "desc": "译注： 忽略了一些内容，还是强烈建议阅读下原文吧。 随着你的 JavaScript 应用越来越复杂，你很可能会在 development 和 production 模式下，分别加载和执行不同的代码逻辑。 能够在 development 和 production 模式下，分别打包…"}, {"id": "6844903665111662605", "title": "React-Redux 源码解析 一（createStore）", "desc": "我们会发现currentReducer 其实是一个function, 而且需要两个参数: currentState , action. currentReducer 返回的值赋值给currentState, 由createStore 传入参数的分析得知，preloadedSta…"}, {"id": "6844904196724572167", "title": "洞悉细节！react 16.8.6源码分析-2 组件构造与获取调用栈", "desc": "作为一个前端页面仔和需求粉碎机，在日常的工作中重复雷同的业务需求，能够获得的提高是很有限的。要想跳出此山中，开阔新视野，笔者墙裂建议大家阅读市面上顶尖开源库的源码。这是学习和掌握js语言特性的绝佳机会(前端发展到现在，大型应用高度依赖框架，正常情况下普通开发者是没有机会接触底层…"}, {"id": "6844904064271007758", "title": "React基础篇（六）React中绑定事件的注意点", "desc": "1前言在React中，事件的名称都是React中提供的，因此名称的首字母必须厉害例如然后为事件提供的处理函数如下2为button设置点击事件2.1无参数的点击事件或者是2.2有参数的点击事件2.3点击"}, {"id": "6844903623822934030", "title": "React-源码解析-生命周期(自定义组件)", "desc": "createClass 是创建自定义组件的入口方法，负责管理生命周期中的 getDefaultProps。该方 法在整个生命周期中只执行一次，这样所有实例初始化的 props 将会被共享。 mixin，设置初始化 defaultProps，返回构造函数。 mountCompon…"}, {"id": "6844903897987809287", "title": "虚拟Dom与Diff的简单实现", "desc": "都9102年了，或许这类的文章已经出现了很多，但依旧自己做一个记录吧。如若您愿意阅读更多我的个人笔记，可以访问 我的博客 或 我的博客仓库. 虚拟 Dom（virtual Dom）正如其名，它并不是真正的 Dom 对象，但可以根据虚拟 Dom 来转换为真正的 Dom 对象。 这…"}, {"id": "6844903622870827021", "title": "[译] 更可靠的 React 组件：从\"可测试的\"到\"测试通过的\"", "desc": "如何确保一个组件如期望的工作呢？你可以说：“我都自己手动试过的呀。” 如果你打算对每个组件的每个改动都手动验证的话，或早或晚的，你就会跳过这项苦差事了，而小的瑕疵早晚也会出现。 这就是对组件的自动化验证，也就是单元测试（unit test），为何重要的原因。单元测试保证了每次对…"}, {"id": "6844903586749480973", "title": "软硬件分享", "desc": "分享我的开发软件，包括常用软件 和 chrome 插件等，让开发事半功倍 XD"}, {"id": "6844903668794261517", "title": "试用React语法的多端框架Taro问题汇总", "desc": "全局请求的需求，官方未有最佳方案。理应app.tsx是最合适的地方，但是该组件的Provider组件内写的任何组件都会被Taro替换掉。我目前是通过在app.tsx里通过store.dispatch(action)发送全局异步请求 不可以使用 ... 拓展操作符给组件传递属性，…"}, {"id": "6844903919382970375", "title": "next.js从0到1", "desc": "目前spa项目已经很火了，基于vue、react。但是随之而来的也有两个问题比较困扰使用者： 2、CSR 项目的 SEO 能力极弱，在搜索引擎中基本上不可能有好的排名。因为目前大多数搜索引擎主要识别的内容还是 HTML，对 JavaScript 文件内容的识别都还比较弱。 所以…"}, {"id": "6894192995990667277", "title": "从0学习React", "desc": "因为 JSX 语法上更接近 JavaScript 而不是 HTML，所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。 例如，JSX 里的 class 变成了 className，而 tabindex 则变…"}, {"id": "6844903645272604686", "title": "React从零实现-介绍和准备", "desc": "在React的实现中，有几种写法需要了解。 我们这里使用直接赋值的方法，而不是使用setAttribute来给dom添加Attribute，是为了保证只有有效的Attribute才能被赋值。这里涉及到attribute和property的区别。 这里的name是property…"}, {"id": "6844903518852251656", "title": "前端每周清单第 42 期：V8 的执行流与优化， Pinterest 的 PWA 实践， Rust 与 WebAssembly 应用", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点，开发教程，工程实践，深度阅读，开源项目，巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID ： frontshow），及时获取前端每周清单。 Rust 默认可以编译为 WebAss…"}, {"id": "6844903512741003277", "title": "uiw 1.3.0 发布，基于 React 的组件库", "desc": "发布， 高品质的UI工具包，React 的组件库。 👣 格式化Input组件代码。 47cb6b8 📝 Tree组件添加selectedKeys实例。 99e9829 ⛑ Tree组件添加测试用例。 db00000 🐞 修复Tree组件selectedKeys不更新问题。…"}, {"id": "6844903716886167566", "title": "redux中间件浅析", "desc": "在redux的流程中，会存在一些特殊的需求，比如打印action的信息来进行调试，或者要处理一个异步请求。中间件就是为了处理这些特殊的需求而存在的。在redux的流程中，action creator 和 reducer 都是纯函数，action creator返回一个包含typ…"}, {"id": "6932763604492140557", "title": "useEffect和useLayoutEffect源码浅析", "desc": "以下源码浅析的React版本为17.0.1，使用ReactDOM.render创建的同步应用，不含优先级相关。 函数组件的Effect信息保存在函数组件Fiber节点的updateQueue字段，updateQueue为一个单向环形链表。 Fiber.updateQueue.l…"}, {"id": "6844904200506179591", "title": "React（官方文档总结）", "desc": "有助于防止XSS，因为ReactDom在呈现之前，会转义JSX中嵌入的任何值，所以不会注入未在程序中编写的任何内容。 react元素是不可变的，通过有状态组件（见下文）时元素可变化。 无状态组件：纯函数，不更改传入的值（返回一个新的值），相同输入返回相同结果。 3、在生命周期函…"}, {"id": "6844903615425937415", "title": "React性能优化方案之PureRenderMixin", "desc": "在运行之前，先让react项目启动起来，然后打开开发者调试面板，在console中输入Perf.start()开始检测，在页面上进行若干的操作以后，执行Perf.end()，终止检测操作，然后执行Perf.printWasted()，在console中会打印出操作过程的一个列表…"}, {"id": "6844903505627463688", "title": "ReactNative模仿网易云音乐手机客户端，兼容安卓和IOS两个平台", "desc": "React Native 模仿网易云音乐手机客户端，兼容安卓和IOS两个平台。 音乐播放，包括CD动画，歌词同步等。 react-native上手不难，熟悉react，看react-native文档，看下开源项目就可以开始开发，就是向下兼容比较差，可能这个版本用的别人的组件下个…"}, {"id": "6844903580835512327", "title": "Create React App中的代码分割实践", "desc": "在上一次开发一个大型的SPA网站的时候，因为加载了大量的第三方库，导致webpack打包出来的bundle.js异常的大，时候祭出了code splite来减少js的大小了。所谓的Code splite其实就是所谓js的懒加载。因为我们的技术栈使用react + redux +…"}, {"id": "6844903638410723336", "title": "React 回忆录（二）为什么使用 React？", "desc": "Hi 各位，欢迎来到 React 回忆录！👋 在本章中，我将介绍 React 框架的五大特点：虚拟DOM，组件化，声明式代码，单向数据流和纯粹的JavaScript语法。但在介绍这五大特点之前，让我们先简要说明一下 React 出现的时代背景。 01. React 出现的时代…"}, {"id": "6844903501605109773", "title": "前端每周清单第 33 期：React 16 发布与特性介绍，Expo AR 教程，ExtJS 从崛起到沉寂", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 React 16 正式发布：本周，期待已久…"}, {"id": "6844903679598805006", "title": "聊聊React v16.3的UNSAFE类生命周期", "desc": "不知道小伙伴有没有注意到，自从react更新到16.3版本后，以前使用的componentWillMount、componentWillReceiveProps、componentWillUpdate三个生命周期函数都有eslint报警，让我们使用UNSAFE_前缀的新的生命周…"}, {"id": "6948781569167343630", "title": "理解React渲染机制--- 从浏览器渲染DOM入手", "desc": "小结：之所以这样进行，是因为浏览器是单线程运行的，在同一时间，最好不要阻塞主线程的运行。 因为浏览器是单线程运行的，所以对于一些数据的获取，最好异步或后续执行，所以需要componentDidMount/useEffect生命周期函数。 解决办法是，将图片的初始化状态设置为fa…"}, {"id": "6844904191136104461", "title": "React的生命周期", "desc": "1. React的生命周期分类 2. 组件挂载或卸载过程 组件挂载时最基本的过程，这个过程主要做的时组件状态的初始化。挂载是将组件对应的DOM元素生成好之后将其挂到DOM树上的过程 其中componentWillMount方法会在render方法之前执行，而componentD…"}, {"id": "6844903874260631559", "title": "react koa rematch 打造一套服务端渲染架子。", "desc": "本次讲述的内容主要是 react 与 koa 搭建的一套 ssr 框架，是在别人造的轮子上再添加了一些自己的想法和完善一下自己的功能。仓库地址： SSR与传统 SPA（Single-Page Application - 单页应用程序）相比，服务器端渲染(SSR)的优势主要在于：…"}, {"id": "6920171907580952590", "title": "React CSS模块化解决方案--styled-components使用", "desc": "styled-components是一个css in js 类库。 可以防止css样式污染、组件更改时更容易定位到相关的样式。 它使用标签模板来对组件进行样式化。它移除了组件的样式之间的映射。这意味着，当你定义一个样式时，实际上只是创建了一个普通的React组件，定义的样式也附…"}, {"id": "6844903693205110791", "title": "React.js 一次动画性能的简单优化", "desc": "前段时间公司产品为了拉新活动，仿照Facebook的Creators页面决定制作一套自己的HelpCenter页面。 这个页面的重点在于每张卡片都需要独立计算位置以及独立进行动画，因此对性能要求很高。 第一个版本是在实习的时候写的，因为要赶时间配合其他组同时上线，因此在整体上没…"}, {"id": "6844903710812798984", "title": "【React 实战教程】从0到1 构建 github star管理工具", "desc": "在日常使用github中，除了利用git进行项目版本控制之外，最多的用处就是游览各式的项目，在看到一些有趣或者有用的项目之后，我们通常就会顺手star，目的是日后再看。但是当我们star了许多项目之后，回过头想找一个的项目就会发现，很难在短时间内找到它，官方也并没有提供很好的管…"}, {"id": "6844903731931119624", "title": "React 特性剪辑(版本 16.0 ~ 16.9)", "desc": "在 18年的 JSConf Iceland 上, Dan 神提到 Concurrent Render 涉及到 CPU 以及 IO 这两方面。 Time Slicing 对应解决左侧的问题, Suspense 对应解决了右侧的问题。它们共同要解决的是的提升用户体验, 在更多的场景…"}, {"id": "6844903856967516168", "title": "[译] 用 React 制作线性代数教程示例：网格与箭头", "desc": "本文是“JavaScript 线性代数”教程的一部分。 最近我撰写了这个线性代数系列的开篇之作。在新篇开始动笔前，我有了一个想法：使用 React 开发一个项目，来为这个系列的所有示例提供可视化功能一定很好玩！本系列的所有代码都存放于此 GitHub 仓库，本文相关代码的提交记…"}, {"id": "6905420422238437389", "title": "Say Bye to useState", "desc": "前言：在最近的业务组件中，我完全使用useReducer代替了useState，并且因此感受到较大的开发快感，以至于我觉得所有关联性高的状态都应该用useReducer聚合在一起管理，应该尽可能地使用useReducer来代替useState。 我们先说下useState哪里不…"}, {"id": "6844903737144655886", "title": "React 服务器端渲染和客户端渲染效果对比", "desc": "最近在学习 React 的服务端渲染，于是使用 Express+React 写了一个 Demo，用于对比和客户端渲染的差异。github 地址 2、我们可以看到，首屏数据很快的就显示出来了，可是页面的进度条却还在加载中（因为客户端 js 很大）。 3、当进度条加载完成后，页面才…"}, {"id": "6942299319609327624", "title": "React中setState是同步还是异步的？", "desc": "react内部为了优化setState()的批处理，会对setState()进行合并，并且对相同属性的设置只保留最后一次的设置，类似于函数Object.assign()。 在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断…"}, {"id": "6844903634434523143", "title": "react-native动态姿态tab组件", "desc": "在APP中免不了要使用tab组件,有的是tab切换,也有的是tab分类切换. 这些组件分成下面两种. 第一种非常简单,同时大多数第三方组件都能达到效果.这里重点讲述第二种,我们要让第二种组件不仅能左右滑动,同时还能够在点击的时候自动滑动,将点击的位置滑动到正中间. 我们先来分析…"}, {"id": "6844903930506248199", "title": "react+webpack4搭建前端项目（二）react全家桶的使用", "desc": "react-router-dom: 基于react-router，加入了在浏览器运行环境下的一些功能，例如：Link组件，会渲染一个a标签，BrowserRouter和HashRouter组件。显而易见react-router-dom功能更丰富，所以选择react-router…"}, {"id": "6844903636925939720", "title": "如何为React应用添加国际化", "desc": "3、提供特定于地区的内容，如日期、货币和数字。 在本文中，我将只关注前端部分。我们将开发一个简单的通用React应用程序: react-i18n ，在此基础上提供全面的国际化支持。 react-i18n 技术架构： 1、用 Express 作为web服务器 2、webpack …"}, {"id": "6890185546438541326", "title": "ReactHooks v16.8新特性", "desc": "React Hooks就是用函数的形式代替原来的继承类的形式，并且使用预函数的形式管理state，有Hooks可以不再使用类的形式定义组件了。这时候你的认知也要发生变化了，原来把组件分为有状态组件和无状态组件，有状态组件用类的形式声明，无状态组件用函数的形式声明。那现在所有的组…"}, {"id": "6844903590180421639", "title": "基于 React 的高质量坦克大战复刻版", "desc": "坦克大战当年红遍大江南北，很多和我一样的九零后应该都有着对这个游戏的记忆。现在显示器分辨率越来越高，使用矢量图来实现像素风格游戏，可以获得非常高的展现质量。该复刻版是我花了很长时间折腾的坦克大战复刻版"}, {"id": "6844903629686571016", "title": "webpack结合reactjs、vuejs项目中图片处理", "desc": "这篇文章主要整理一下自己在使用 webpack 结合 vuejs 或 reactjs 开发过程中图片的处理方法。 项目打包之后（假定输出目录为 dist），除了 index.html，将所有的静态资源上传至 cdn，而并非打包之后所有静态资源都在应用服务器上。 不适合我。 它会…"}, {"id": "6844903565014761480", "title": "用React写一个数字华容道，你需要知道的秘密", "desc": "年末了。哦，不，要过年了。以前只能一路站到公司的我，今早居然是坐着过来的。新的一年，总要学一个新东西来迎接新的未来吧，所以选择了一直未碰的那个据说是全宇宙最牛逼的前端框架-React，在上下班的地铁上看了两天官方教程，so what。光看不练假把式，于是就想着做个什么，偶然看到…"}, {"id": "6844903593032548360", "title": "[译] React 中的 Immutability：可变对象并没有什么问题", "desc": "没什么不对的，真的。可变对象没有任何问题。 当然，在涉及并发情况时会有问题。但这是最简单的开发方法，和编程中许多问题一样，这是一种折衷。 函数式编程和 immutability 等概念很流行，都是很酷的主题。但就 React 而言，immutability 会给你一些实际的好处…"}, {"id": "6844903901515218951", "title": "React 之快速深入 stateless component(无状态组件) 和 class component (类组件)", "desc": "渲染10000个无状态组件和类组件，几乎无差别，或者说差别小以至于在生产环境中无需考虑这点. **注意:**浅比较只能直接比较原始类型，父组件传递的props是对象时，每次更新(不论值变不变)都是返回一个新对象，（哪怕值没变），新旧对象不同，引用不用，所以浅比较失败。"}, {"id": "6844903559377453064", "title": "[翻译]map和reduce，处理数据结构的利器", "desc": "现如今JavaScript有许多问题，但是词法并不是其中之一。不管是三元运算符，还是map/reduce等ES6方法，亦或是扩展运算符（...）都是非常强大的工具。 除了能够保证可读性以及准确性，这些方法还有助于实现不可变性，因为这些方法会返回新的数据，而处理前的原始数据并不会…"}, {"id": "6919444447999000584", "title": "React Hooks - 复习", "desc": "使用useState会返回两个东西，一个是你创建的状态state，一个是更新state的函数setstate。 setState中更新的方法有两种，一种是直接更新，不依赖于之前的状态；另一种是函数式更新，依赖于之前的状态。 useEffect有种类似类组件中的component…"}, {"id": "6844904001511653383", "title": "React传-1", "desc": "计划用半年的时间去深入 React 源码并记录下来，本文是系列文章第一章，前面大多数会以功能为主，不会涉及太多事务机制与流程，后半部分以架构、流程为主。这个是一个水到渠成的事情。看的越多，对其理解的广度就越大，深度也随之沉淀，在深入的同时站在作者的角度去思考，能够脱离源码照葫芦…"}, {"id": "6844903989503344648", "title": "React Hooks与setInterval", "desc": "Hooks出来已经有段时间了，相信大家都用过段时间了，有没有小伙伴们遇到坑呢，我这边就有个setInterval的坑，和小伙伴们分享下解决方案。 因为Effect的第二个参数为[]，没有依赖,Effect只会执行一次。setInterval中拿到的是第一次渲染时的闭包count…"}, {"id": "6844903769369477134", "title": "React Fiber源码分析 第二篇（同步模式）", "desc": "7.接着requestWork会判断是否正在渲染中，防止重入。剩余的工作将安排在当前渲染批次的末尾，如果正在渲染直接返回后， 因为已经把root加上到Schedule里面了，依然会把该root执行 8.performWork首先执行findHighestPriorityRoot…"}, {"id": "6844903504037822472", "title": "前端每周清单第 35 期：Vue.js 2.5 发布、微前端概念详解、浏览器扩展开发实践", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Vue.js 2.5 发布：本周 Vue.…"}, {"id": "6844903541518270471", "title": "Jest基于dva框架的单元测试最佳实践", "desc": "其中yield call(YCUserInfoPlugin.setUserToken, res.data)这是调用一个NativeModule方法，在执行测试的时候，你可能会发现会报找不到YCUserInfoPlugin的setUserToken方法，各位看官不急，因为这个是写…"}, {"id": "6844903850428596231", "title": "React app SEO优化之预渲染", "desc": "谷歌已经明确表示，他们会在抓取你的网站之前运行你的JavaScript代码。准确地说，他们的爬虫(crawler)中运用 Chrome 41浏览器打开网站，和真实用户用浏览器打开一样！但是还有其他搜索引擎和社交媒体网站可能并不会这么做。 我知道人们太关心搜索引擎优化了，总是试图…"}, {"id": "6844903665501732877", "title": "从 0 到 1 实现 React 系列 —— 5.PureComponent 实现 && HOC 探幽", "desc": "使用 PureComponent 是优化 React 性能的一种常用手段，相较于 Component, PureComponent 会在 render 之前自动执行一次 shouldComponentUpdate() 函数，根据返回的 bool 值判断是否进行 render。其…"}, {"id": "6844903501546389518", "title": "七分设计感的纯React-Native项目Mung", "desc": "1. Mung：是一个基于React-Native编写，使用豆瓣开源API开发的一个项目。 2. 功能概述 数据保存 ：支持断网加载缓存数据。 主题换肤 ：现在只支持切换主题颜色，本项目没几张图片。 查看电影详情 ：支持查看电影详情包括评论。 一键搜索： 支持标签和语句查找相关…"}, {"id": "6844904133749637133", "title": "@medux 基础概念速览", "desc": "欢迎您开始 @medux 之旅，建议您依次阅读以下 4 篇文章，这将耗费您大约 30 分钟。 假设你了解过 Redux或者别的Flux框架，那么应当知道 Store、State、Reducer、Action、Dispatch 是什么意思。没错，在 @medux 中它们依然受用，…"}, {"id": "6844904019480018952", "title": "前端代码质量优化交流（2）", "desc": "在一个团队中，代码质量问题真是一直备受操心的问题，总想通过种种规则来规范code的问题。但是事与愿违，一切的根源还是来自于每个人的自我要求。我一直说一句话，语言很灵活，想怎么写都可以。但是从团队中或一个负责人的角度出发，需要谨慎。 先说说code review的问题吧。这个事情…"}, {"id": "6844904190683119623", "title": "从测试看react源码_scheduler", "desc": "这是从测试看react源码的第一篇，先从一个独立的 Scheduler 模块入手。正如官方所说，Scheduler模块是一个用于协作调度任务的包，防止浏览器主线程长时间忙于运行一些事情，关键任务的执行被推迟。用于 react 内部，现在将它独立出来，将来会成为公开API 如果你…"}, {"id": "6844903999557091342", "title": "React Native转小程序引擎Alita：引入Typescript支持", "desc": "Alita(https://github.com/areslabs/alita/)在处理React语法的时候，采用了一种运行时处理JSX的技术，相对于社区流行的编译时方案，在JSX语法的支持上更加完备，关于运行时处理JSX的原理，详情请看。 简单来讲运行时方案，把小程序看成是底…"}, {"id": "6844903749744328712", "title": "一次现网翻车经历与总结", "desc": "0. 前言 还是和平时一样，做完需求，测试通过，愉快地上线。运营侧在大推，推了好几天。突然有一天，都来反馈说页面自己弹出dialog而且关不掉： 1. 开始第一次排查 都上线几天，突然出事，可以肯定的是，不是业务的bug。剩下的原因：现网资源被更改、npm包被更新。跑了一下主分…"}, {"id": "6844903825552179207", "title": "从一个小Demo看React的diff算法", "desc": "React的虚拟Dom和其diff算法，是React渲染效率远远高于传统dom操作渲染效率的主要原因。一方面，虚拟Dom的存在，使得在操作Dom时，不再直接操作页面Dom，而是对虚拟Dom进行相关操作运算。再通过运算结果，结合diff算法，得出变更过的部分Dom，进行局部更新。…"}, {"id": "6844903811832643591", "title": "react服务端渲染框架Next.js踩坑（三）", "desc": "这节课我们来完成头部、首页的代码和使用axios进行数据请求。 CNode社区所有页面的头部都是一样的，所以我们需要把头部代码抽出来当成公用组件 Header。 我们在components目录下创建文件夹Header，在Header下创建 index.js 和 style.le…"}, {"id": "6844903667298533383", "title": "实战：React全家桶仿PC端《快看漫画》(部分)", "desc": "最近在学习React，为了在学习的同时巩固一下所学内容，决定仿一个《快看漫画》的网页；由于学习进度及时间问题，我只实现了网站的部分功能：登录与退出、对应漫画关注/取关、关键词搜索等。 项目写了一个星期，写的时候觉着自己写了好多呀；写完之后就发现怎么才这么点。。。但是就这么一点点…"}, {"id": "6944692005687705630", "title": "React学习笔记二", "desc": "一  Virtual DOM 1.1 什么是虚拟DOM JavaScript中，虚拟DOM就是一个Object对象，并且至少包含标签名(tag)，属性(props)和子元素(children)这三个属"}, {"id": "6844903861862268942", "title": "redux源码解析", "desc": "redux的源码是我阅读过的一些库的源码中，相对简单的。如果大家的感兴趣强烈推荐大家亲自阅读一下。 本文为了方便理解抛开了一些容错处理以及边缘条件的判断。 combineReducers是redux中内置的工具函数，目的是将多个reducer函数合并为一个最终的reducer函…"}, {"id": "6844903815460683784", "title": "基于react的hash路由简易实现", "desc": "在SPA项目中，如果展示页面繁多，根据前端工程化理论中组件化思想，我们通常会将不同的页面，按照功能，职责等进行划分。 这个时候，每个页面，就需要一个相应的路由去对应。 现在react社区中已经有react-router这个成熟的轮子，我们可以直接引入并使用。 但具体hash路由…"}, {"id": "6844903607263821832", "title": "使用Immutable js的一点体会", "desc": "项目中一直在使用Immutable js，最开始使用Immutable js，我的内心是抗拒的，简单的对象操作整得那么复杂，有必要吗。随着后面开发对数据操作非常频繁的项目后，渐渐发现了Immutable的闪光点； 可以看到，多层次的对象转为Immutable的Map对象时，只有…"}, {"id": "6949822429870948388", "title": "性能优化 - 何时用useMemo及useCallback", "desc": "useCallback和useMemo不一定能提升性能。抽象（以及性能优化）都伴随着代价。采用AHA编程法则，直到确实需要抽象或优化时才去做，这样可以避免承担了成本却不能获得收益的情况。"}, {"id": "6844903598183153677", "title": "使用react-router v4和react-transition-group实现页面路由切换动画效果", "desc": "近期有个react移动端项目，想要在页面切换中实现动画，设想是页面左右滑入滑出。路由是使用react-routerv4版本，所以第一时间去官网上找示例：animated-transitions<CSS"}, {"id": "6844904131396632589", "title": "如何使用React Hooks获取数据？", "desc": "这是我在《the Road to React》的作者Robin Wieruchu的博客中看到的一篇关于如何使用React Hooks获取数据的一篇文章，之所以想翻译，是觉得这篇文章可以循序渐进地为读者介绍，在不同的场景下如何使用正确的React Hooks，如果您对React …"}, {"id": "6908540615315685384", "title": "【React全解6】useReducer的使用详解和代替Redux", "desc": "前面已经介绍了useState 的详细用法，我们可以在函数组件和类组件中使用 useState 来创建变量和对象。使得页面能够及时的更新 UI 等等。接下来介绍一个 useState 的复杂版本--useReducer 在页面中显示 n 的值，且按下按钮后会触发响应的操作使 n…"}, {"id": "6844903665153605640", "title": "基于react的录音及音频曲线绘制的组件开发", "desc": "最近由于工作需要，需要在react上用到一个录音的功能，录音主要包含开始录音，暂停录音，停止录音，并将频谱通过canvas绘制出来。起初开发时找了一个现成的包，但是这个第三方的包不支持暂停功能，也不支持音频转码，只能输出audio/webm格式，所以自己在周末决定重新写一个关于…"}, {"id": "6844903983790686215", "title": "[译]React高级指引6：Fragments", "desc": "React一个常用的模式是组件返回多个元素。Fragment可以为你的子元素分组而不需要在DOM上为它们添加额外的节点。 还有一种短语法可以用来声明它们。 一个常用的模式是组件返回一列子元素。让我们来看看下面这个React片段： 为了使渲染出的HTML能够有效展示，<Colum…"}, {"id": "6913909282010300423", "title": "React整体感知", "desc": "当我们由浅入深地认知一样新事物的时候，往往需要遵循 Why > What > How 这样一个认知过程。它们是相辅相成、缺一不可的。而了解了具体的 What 和 How 之后，往往能够更加具象地回答理论层面的 Why，因此，在进入 Why 的探索之前，我们先整体感知一下 Wha…"}, {"id": "6844903983786524680", "title": "[译]React高级指引4：异常捕获边界(Error Boundaries)", "desc": "过去，组件内出现JavaScript异常时会导致React内部的state被破坏并且在下一次渲染时抛出 可能无法跟踪的 异常。这些错误基本上都是有早期代码（非React组件代码）造成的，但是React并没有提供能够优雅地在组件中处理和回复这些异常的方法。 在部分UI中出现的Ja…"}, {"id": "6954619426368913445", "title": "简易实现React useState", "desc": "前置知识：本文默认你已经用过hooks 使用set时会发生什么 首先我们肯定知道会修改我们的状态，会对比dom，如果dom发生变化，会进行dom渲染 我们先看看看useState的特点 简易实现use"}, {"id": "6917095787344166919", "title": "【分享】2021 年对 React 前端程序员的 10 个代码最佳实践建议", "desc": "1. 组织好项目目录结构 在 React 项目中，没有强制规定目录的结构，但是有一个好的规范，可以让你更好地组织代码，也能更好的进行代码后期维护。 这里有个建议：经常被重复利用的 Component（组件）要抽出来，放到一个同一个目录下。 这样的代码好理解，好维护。 2. 让你…"}, {"id": "6921325620219609101", "title": "深入浅出的学习react[学习笔记10]", "desc": "在过去的十年里，前端技术日新月异 。从最早的纯静态页面，到 jQuery 一统江湖，再到近几年大火的 MVVM 框架——研发模式升级这件事情对于前端来说，好像成了某种常态。其实研发模式不断演进的背后，恰恰蕴含着前端人对 “DOM 操作” 这一核心动作的持续思考和改进。而虚拟 D…"}, {"id": "6905926677805826056", "title": "React Hooks 状态管理器 Hox 源码解读", "desc": "React Hooks 正式发布已经快 2 年了，它的特性让前端打工人又多了一种搬砖姿势，特别是它的函数式编程风格、声明式副作用处理、逻辑层抽取能力，以及灵活的自定义 Hooks 能力，用起来特别香！那该用哪一款状态管理器和它搭配呢，我发现蚂蚁正好开源了一款：hox，完全是按 …"}, {"id": "6844903825610932238", "title": "[译] 2019 前端工具调研", "desc": "和往年一样，本年度调研的目的也很简单。是为了了解整个行业中，常见前端工具现有的知识和使用水平。 我非常感谢你能抽出时间来参与。每一份回答都能为前端社区提供一份更有代表性的样本。 去年，5461 名前端研发花时间回答了 24 个关于不同前端工具的问题。 受访者回答了三个关于 Ja…"}, {"id": "6920842427221671943", "title": "用高阶组件，渲染属性，React Hook 实现组件复用", "desc": "通过高阶函数，渲染属性，hook 都可以实现代码复用，实现的方法大同小异；在自定义 Hook 大放异彩的时候，也请不要忘记高阶函数，渲染属性这些可以复用逻辑的方法。"}, {"id": "6844903955797901319", "title": "CMS全栈项目之Vue和React篇（下）（含源码）", "desc": "由于每一个技术点实现的细节很多，建议先学习相关内容，不懂的可以和我交流。如果只想了解vue或react相关的内容，可以直接跳到文章的第4部分。 Koa 应用程序是一个包含一组中间件函数的对象，它是按照类似堆栈的方式组织和执行的。我们可以使用koa提供的use接口和async函数…"}, {"id": "6844903827615776775", "title": "看了就会的next.js路由", "desc": "pages是next.js中非常重要的一个目录，其中每一个js文件就代表一个页面，但是有两个例外，一个是上一篇文章中用到的_app.js,一个是_document.js。我们在pages下再创建一个a.js和test/b.js，然后看看效果 我们可以发现next.js会将pag…"}, {"id": "6977397653654994975", "title": "React页面：我不想帮组件管理它的状态", "desc": "让组件管理自己的状态？看似理所当然，但在日常开发中我们通常在不自觉的情况下已经避开了这种设计模式。本文介绍了一个大家关注比较少的 Hook API，但是它在我们的组件设计开发中起到了非常大的作用。"}, {"id": "6970951346816188430", "title": "zustand状态管理器与观察者模式", "desc": "zustand状态管理器及同类库对比 特性 不需要像redux那样在最外层包裹一层高阶组件，只绑定对应关联组件即可（当在其他组件/方法修改状态后，该组件会自动更新） 异步处理也较为简单，与普通函数用法"}, {"id": "6930834317127974925", "title": "【译】请拿走 2021 年在 React 项目中使用 Tailwind CSS 的最佳安装指南", "desc": "这是一个快速教程，教您如何为您的 React 项目使用 Tailwind CSS。 运行下面的命令去创建 tailwind.js 文件，这是 tailwind 的默认配置文件。 这些命令将确保您使用的是最新版本的 tailwind，PostCSS 和 Autoprefixer。…"}, {"id": "6844903605070200846", "title": "从零开始搭建React应用（一）——基础搭建", "desc": "webpack4的cli(command line interface)已经移动到webpack-cli了，如果要使用CLI,你需要安装webpack-cli，具体使用可以查看webpack-cli的文档。 由于Babel默认只转换新的JavaScript句法（syntax），…"}, {"id": "6950830945398341668", "title": "用 Plop 解放你的双手，尽情摸鱼吧！", "desc": "自定义脚手架可以提高开发过程中创建重复文件的效率。Yeoman 以及 Plop 是常见脚手架开发工具，今天带大家学习如何用 Plop 自定义一个属于自己的脚手架。"}, {"id": "6844903975725400078", "title": "React基础(10)-React中编写样式CSS(styled-components)", "desc": "React是一个构建用户界面的js库,从UI=render()这个等式中就很好的映射了这一点,UI的显示取决于等式右边的render函数的返回值. 因为在render方法中声明样式化组件，每次都会动态渲染创建一个新的组件。这意味着React必须在每个后续渲染中丢弃并重新计算DO…"}, {"id": "6983524092464857096", "title": "React 源码之render概览", "desc": "概览 本章我们将要揭开render的神秘面纱，揭示React render阶段是怎样构建Fiber树。 首先，我们来看下render的调用栈： render阶段始于performSyncWorkOnR"}, {"id": "6844903661093519368", "title": "企业级React项目的个人构建总结", "desc": "距离上篇文章已经好长一段时间了，这两个星期公司派驻到京东方这边出差负责入驻项目团队的前端工作。这段时间从零搭建一下前端项目，这次给的时间比较充裕，思考的也比较多。以前也常有搭过前端项目，但是给的时间都比较紧，因此很多问题都忽略掉了。这次正好对以前的进行一次优化，并总结了一些经验…"}, {"id": "6844903684829085709", "title": "搭建Typescript+React项目模板(1) --- 项目初始化", "desc": "8 . 配置tsconfig 9 . 项目启动"}, {"id": "6844903588603363341", "title": "react-router-dom 的 HashRouter 也就这么回事儿", "desc": "我们使用React开发项目的时候，基本上是单页面应用，也就离不开路由。路由看似神秘，当我们简单的模拟一下它的核心功能后，发现也就这么回事儿。本文就详细的介绍一下react-router-dom 的HashRouter的核心实现逻辑。 HashRouter是一个大的容器，它控制着…"}, {"id": "6931206890005200909", "title": "多层级使用useContext", "desc": "Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。 Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。 先使用 createContext 创建一个 Context 对象。…"}, {"id": "6844904002006548494", "title": "玩玩服务端渲染之 Next.js", "desc": "基于 Vue 的服务端渲染 SSR 框架 Nuxt.js。 不知道为什么，把项目放在 nginx 下新建的 html 文件夹下( /usr/local/etc/nginx/html/next-test ) 启动项目和 nginx，浏览器访问一直都是 502（单页面 SPA 的倒…"}, {"id": "6933474632213200904", "title": "react-tiga-swiper 好用到爆的swiper组件", "desc": "先放上轮子的地址 react-tiga-swiper，求star。"}, {"id": "6945808822308962317", "title": "Redux如何实现state变化触发页面渲染？", "desc": "Context 对象 提供的Provider组件允许消费组件订阅 context 的变化，一旦变化它内部的所有消费组件都会重新渲染，会产生性能问题。 我们知道 Redux 是一个单一的状态机，它只关注state的变化，至于视图层怎么变化，关键在于React-redux。"}, {"id": "6979917891227516964", "title": "react学习总结(安装篇)", "desc": "一、在html中开始一个react 步骤 1： 添加一个 DOM 容器到 HTML 步骤 2：添加 Script 标签，引入react文件 前两个标签加载 React。第三个将加载你的组件代码。 步骤"}, {"id": "6844903712503103496", "title": "小册上新：Taro 多端开发实现原理与项目实战", "desc": "学习一门技术的最好方法，就是在实践中使用它。 Taro 也是如此。Taro 是由京东凹凸实验室打造的一套遵循 React 语法规范的多端统一开发框架。他们为此专门撰写了一本小册子，主要介绍从 0 到 1 构建一个电商平台的实战过程。 我们通过一个从前端到后台的完整实践，可以经历…"}, {"id": "6844903598292205576", "title": "[译] 优化 WEBPACK 以更快地构建 REACT", "desc": "如果您的 Webpack 构建缓慢且有大量的库 —— 别担心，有一种方法可以提高增量构建的速度！Webpack 的 DLLPlugin 允许您将所有的依赖项构建到一个文件中。这是一个取代分块的很好选择。该文件稍后将由您的主 Webpack 配置，甚至可以在共享同一组依赖项的其他…"}, {"id": "6844903940178313224", "title": "React Hook 实战指南！（4）", "desc": "在这一篇内容中，我们一起来看一下其他的Hooks在业务中的使用。 有这些就足够了呢，而且useEffect可以多次使用，每次第二个参数传入监听的数据后，可以根据监听的数据是否变化决定是否执行，多么智能。 啧啧啧，真是甩往常的update阶段的钩子函数五条街都不知道，比如如果我们…"}, {"id": "6844903700687749133", "title": "高级 Vue 组件模式 (8)", "desc": "在第七篇文章中，我们对 toggle 组件进行了重构，使父组件能够传入开关状态的初始值，同时还可以传入自定义的状态重置逻辑。虽然父组件拥有了改变 toggle 组件内部状态的途径，但是如果进一步思考的话，父组件并没有绝对的控制权。在一些业务场景，我们期望父组件对于子组件的状态，…"}, {"id": "6844903554407202824", "title": "RN中布局样式的写法", "desc": "运行一下可以看到 log出来的style2和style1的属性。 3. styled-components Styled Components：让样式也成为组件 | alloyteam. emmm ，无需引入第三方库 感觉好多了。缺点当然是不支持原CSS写法。 5. react…"}, {"id": "6953229670460915725", "title": "我的 React 状态管理进化之路 | 创作者训练营第二期", "desc": "前言 自我加入工作后，就一直在学习、使用 react。react 是流行的前端框架，极致简洁的 JSX 语法，深深的吸引着我，它像是一个好朋友，伴我同行，并肩作战。本文主要描述本人使用 react 进"}, {"id": "6980922475110481927", "title": "010.setState的使用", "desc": "ok为了修改state，我们复习了类class、this指向、原型链、事件绑定，结果state修改，React竟然他喵的不买账，好家伙让我们来看看React本身对状态改变是怎么要求的"}, {"id": "6844903693985251341", "title": "IMWeb Conf2018 Native跨端融合总结", "desc": "“一次编写，到处运行”(Write once, run anywhere, WORA)，最早是Sun公司在跨平台方面的宣传口号，也代表着我们作为开发人员对于效率的极致追求。近几年随着移动互联网的快速发展，移动终端设备的软硬件、操作系统、开发工具链和技术社区等日趋成熟完善，在前端…"}, {"id": "6844903696401186824", "title": "使用typescript开发react-native踩坑记录", "desc": "我用rn开发了一个项目后，就迫不及待的准备在下个项目中开始介入ts了，但是完事开头难，遇到了好多问题，主要在配置上...我自己想了办法解决，但是感觉不完美，希望掘金ts大佬指导下，另外react-native的坑在上个项目也让我见识了，不是一般的多，怪不得现在还没发布1.0版本…"}, {"id": "6844903776147472397", "title": "把 React 作为 UI 运行时来使用", "desc": "很多教程都把 React 作为一个 UI 库来引入。这是很有道理的，因为 React 本身就是一个 UI 库。就像官网上所说的那样。 我曾经写过关于构建用户界面中遇到的挑战的文章。但是本文将会用另外一种方式来讲述 React —— 因为它更像是一种编程运行时。 本文不会教你任何…"}, {"id": "6844903878442352653", "title": "React中的Refs", "desc": "在react的16.3及以后的版本中，可以在实例的构造函数中使用React.createRef()方法来创建ref, 并将其赋值给实例对象的自定义属性，以便于在整个组件中都可以使用， 然后再将其附加给原生HTML元素或Class类组件的ref属性上。 当 ref 被传递给 re…"}, {"id": "6948404488260550669", "title": "【重识前端】React源码阅读（三）4千字告诉你 Fiber 初始化", "desc": "在第一章中，我们解读到ReactDOM.render之后就没有继续了。因为我看了一下设计到了Fiber的一些知识，所以在第二章补充了Fiber的基础知识之后，我将Fiber拆分成四块来讲 我们现在直接进入Fiber的初始化。Action！ 回顾一下之前学习JSX的时候，阅读到R…"}, {"id": "6980695753555443726", "title": "React学习记录", "desc": "React中的7种hooks介绍：useEffect、useMemo和useCallback，useState和useReducer，Context.Provider和Context.Consumer"}, {"id": "6844903652323229703", "title": "函数的柯里化与Redux中间件及applyMiddleware源码分析", "desc": "PS：敏感的同学应该看出来了，这个和ES5的bind函数的实现很像。先来一段我自己实现的bind函数 chain是一个数组，数组的每一项是一个函数，该函数的入参是next，返回另外一个函数。数组的每一项可能是这样"}, {"id": "6844903640256233486", "title": "create-react-app集成Prettier", "desc": "进入前端工作也有一些时间了，我们的前端开发也从必须经过千千万万的配置到执行某某一切就可以开始工作了。 我想每个人接触到create-react-app的时候都是惊讶的，原来开始一个应用可以这么简单。 我曾经写过好几页的wiki，上面写满了各种编码规范，甚至常见的情况似乎是通过会…"}, {"id": "6844903558215630855", "title": "快速搭建你的 github pages 个人博客 —— 基于 Create-React-App 的单页面应用实践", "desc": "相信各位github资深玩家们都有自己基于 github pages 搭建的个人站点。官方推荐的静态站点生成器是 Jekyll，关于 Jekyll 的使用感兴趣的各位请自行 google，这里就不赘述了。本文主要介绍下基于 Create-React-App 搭建个人博客的相关实…"}, {"id": "6847902224144662541", "title": "一文搞定 React Hooks  API", "desc": "工作结束，又到了愉快的总结时间。 vue3 beta 版本发布之后，大家都说借鉴了 React Hooks，一直使用 vue 开发项目的我也来跟风学习下。 React 官方文档看起来实在费劲，自己总结了常见的几个 Hook用法，希望能帮助大家理解。 如果 state 是一个对象…"}, {"id": "6844903859912261639", "title": "在 React 16 中从 setState 返回 null 的妙用", "desc": "在 React 16 中为了防止不必要的 DOM 更新，允许你决定是否让 .setState 更来新状态。在调用 .setState 时返回 null 将不再触发更新。 我们将通过重构一个 mocktail （一种不含酒精的鸡尾酒）选择程序来探索它是如何工作的，即使我们选择相同…"}, {"id": "6844903781897879565", "title": "React Fiber 数据结构揭秘", "desc": "此章节会通过两个 demo 来展示 Stack Reconciler 以及 Fiber Reconciler 的数据结构。 首先用代码表示上图节点间的关系。比如 a1 节点下有 b1、b2、b3 节点, 就可以把它们间的关系写成 a1.render = () => [b1, b…"}, {"id": "6844903901049651207", "title": "react 常用生命周期", "desc": "接收两个参数 下一次拿到的props和下一次拿到的state。 这个周期是render渲染前的最后一个周期 代表是否render(除开componentWillUpdate将要废弃)。 在最后一定要返回一个false代表不渲染 否则会出现意想不到的影响。 在return fal…"}, {"id": "6844903681121484807", "title": "小程序 webview 应用实践（演讲内容整理）丨掘金开发者大会", "desc": "大家好，我是转转开放业务部前端负责人张所勇，今天主要来跟大家分享小程序 webview 方面的问题，但我并不会讲小程序的 webview 原理，而我主要想讲的是小程序内如何嵌入 H5。 那么好多同学会想了，不就是用 web-view 组件就可以嵌入了吗，是的，如果咱们的小程序和…"}, {"id": "6997293392493281316", "title": "React脚手架（下）redux等常用方法的学习", "desc": "React下篇的学习地址，里面包括了redux、接口跨域的解决方法、less在react中的使用。。"}, {"id": "6844903720942059528", "title": "深度与广度，我们该如何选择？求高手指点", "desc": "先简单介绍一下自己 15年本科毕业 通信工程（和计算机属于兄弟专业吧） 毕业后通过关系，进入了某地级市的电信公司，工作一年后果断辞职，偷偷摸摸的就辞职了，还被父母骂了好几次，进入了前端领域，进入前端领域前自学了几个月，因为在电信上班真的是太闲了，跟我性格不太相符。 2016年8…"}, {"id": "6844903962324238344", "title": "ant-design-pro实战篇：快速搭建属于你的项目", "desc": "Ant Design Pro 是一个企业级中后台前端/设计解决方案，它秉承 Ant Design 的设计价值观，致力于在设计规范和基础组件的基础上，继续向上构建，提炼出典型模板/业务组件/配套设计资源，进一步提升企业级中后台产品设计研发过程中的『用户』和『设计者』的体验。 简而…"}, {"id": "6844903910809813005", "title": "可靠React组件设计的7个准则之组合和复用", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我对文章进行了分割，本篇文章重点阐述 组合和复用。因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 组合（com…"}, {"id": "6955737927276036133", "title": "深入学习react（二） 写个自己的react-redux", "desc": "hello,大家好今天让我们一起实现下自己react-redux吧！文本较长，建议收藏，好了开启我们进步的一天吧！"}, {"id": "6977951928516870181", "title": "React 源码学习之 commit 阶段", "desc": "前言 commitRoot 方法是 commit 阶段工作的起点。 commitRoot(root)方法中的 root 参数 FiberRootNode。 调度 useEffect useEffect"}, {"id": "6844903910746882055", "title": "React最新16.9，支持组件性能评估！", "desc": "React团队在8月9日发布了最新的16.9版本，本文简单介绍一下在新版本中都有哪些变更和需要注意的地方。 在16.9版本中使用componentWillMount、componentWillReceiveProps和componentWillUpdate将会收到React发出…"}, {"id": "6844904016388816904", "title": "精读《正交的 React 组件》", "desc": "搭配了合适的设计模式的代码，才可拥有良好的可维护性，The Benefits of Orthogonal React Components 这篇文章就重点介绍了正交性原理。 所谓正交，即模块之间不会相互影响。想象一个音响的音量与换台按钮间如果不是正交关系，控制音量同时可能影响换…"}, {"id": "6844903582433542151", "title": "JavaScript基础: 类与继承", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 许久已经没有写东西了，因为杂七杂八的原因最近一直没有抽出时间来把写作坚持下来，感觉和跑步一样，一旦松懈下来就很难再次捡起来。最近一直想重新静下心来写…"}, {"id": "6844903666038603789", "title": "React 后台管理模板", "desc": "GitHub主页|预览地址功能封装了dva框架的数据流转，简单的请求可以不用在model和service中定义封装了数据模模拟，可以独立于后台开发前台功能封装了分页请求，简化并规范了分页逻辑封装了fe"}, {"id": "6917177472135987207", "title": "React-Redux【七日打卡】", "desc": "实际项目中，需要权衡是直接使用Redux还是用React-Redux。 UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。 如果一个组件既有 UI 又有业务逻辑，那怎么办？回答是，将它拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将…"}, {"id": "6987024488491646983", "title": "【新的征途】—— react学习之react-router", "desc": "前言 话不多说,全文干货。这是一篇以简洁精准为主题的文章,旨在帮助自己以及大家在使用react-router时可以快速学习并使用到项目当中。 基本使用 react-router给我们提供了一些最基本的"}, {"id": "6959948160525565960", "title": "谈谈JSX的编译原理", "desc": "说起JSX，几乎无人不知：它在React扮演着描述了UI界面、关联渲染逻辑的重要角色。但JSX如何被编译、又如何变成一个个的元素呢。本文对JSX编译结果分析，加深对React里JSX编译背后原理的理解"}, {"id": "6995374346319429645", "title": "React 性能优化：避免重复计算", "desc": "在介绍 Reselect 的之前，我们首先要知道 Selector 这个概念，那么什么是 Selector 呢？"}, {"id": "6844903684560666637", "title": "Redux for react native 指南", "desc": "如果要看理论的童鞋点击这里 redux中文文档 或者 redux官方文档 ，本文不会太刻意去介绍大篇幅的理论，本文不做框架之间的对比，只给想学redux的童鞋提供实质的、高效的、易理解的学习参考资源，分享自己在学习过程中的得到。文章更新完后会比较长，请耐心阅读理解，仔细品味。不…"}, {"id": "6953435678239621156", "title": "Redux 源码专精系列视频【免费高清完整版】", "desc": "免费视频课来了！本次推出的精品免费课程是我的《Redux 源码专精》17 集完整版视频。 课程目录如下..."}, {"id": "6844903596970999815", "title": "关于Rollup那些事", "desc": "下一代打包工具，这是rollup对自己的定位。如今的前端领域，构建工具并不缺少，每个前端工程师都用过或者听过webpack。可以看到的是像React、Vue等框架的构建工具使用的都是rollup。既然如此，这些框架为什么会选择rollup？它的特性是什么？面对不同场景，我们要怎…"}, {"id": "6899266513665163278", "title": "React 为何要使用链表遍历 Fiber 树", "desc": "在源码中 reconciliation 阶段也被视为 \"render\" 阶段. 在该阶段, React 会遍历整个组件树, 并且进行如下操作: 上述所有操作被称为 Fiber 内部工作(work inside Fiber). 需要完成的工作类型取决于 React Element…"}, {"id": "6982512988498427912", "title": "高阶组件(精读React官方文档—19)", "desc": "核心 高阶组件不用关心数据是如何渲染的，只用关心逻辑即可。 被包装的组件不用关心数据是怎么来的，只用负责渲染即可。 最后渲染的是高阶组件返回的组件。 一个例子看懂高阶组件的用法 解读 高阶组件是一种函"}, {"id": "6844903605477064717", "title": "傻瓜式入门Redux", "desc": "Redux 是一个 JavaScript 应用状态管理的库，当项目很复杂的时候，属性传递已经达不到我们预期，可以使用Redux 解决数据传递问题，统一状态管理。换句话说，Redux就是用来处理和管理应用的状态/数据。 Redux的核心是一个store ，就是保存数据的地方，可以…"}, {"id": "6844903696074047501", "title": "ReactSSR样式及SEO", "desc": "简单说一下React SSR中样式处理和更优雅的SEO"}, {"id": "6844903560128249870", "title": "[翻译]在 React 中抛弃 .bind(this)", "desc": "——在 React 组件中抛弃 .bind(this)。 这将会成为历史。 假设你经常在使用 React，你或许会不得不写类似于 .bind(this) 的代码，当然，我知道： 这看上去真的丑 这在代码中占用了额外的空间 幸好，JavaScript 有一些提案中的特性可以让 .…"}, {"id": "6844903510249570312", "title": "服务端渲染与 Universal React App", "desc": "随着 Webpack 等前端构建工具的普及，客户端渲染因为其构建方便，部署简单等方面的优势，逐渐成为了现代网站的主流渲染模式。而在刚刚发布的 React v16.0 中，改进后更为优秀的服务端渲染性能作为六大更新点之一，被 React 官方重点提及。为此笔者还专门做了一个小调查…"}, {"id": "6844903965465772039", "title": "React源码分析：Scheduler", "desc": "首先查看README文件，官方介绍Scheduler是在浏览器环境中对任务进行协作调度的一个库。因此实际上，这个库跟react并没有关联，它只是实现了对一连串的任务进行排序，然后在适当的时间去执行任务的这样一个功能。 1. 任务优先级 在SchedulerPriorities文…"}, {"id": "6944326558643388429", "title": "react hooks总结", "desc": "参数：useEffect需要你传入一个回调函数，一个用于监听的数据。最后，你有时候需要在第一个回调函数中写一个return,传入一个回调函数,用在组件被销毁的时候使用, 参数：它需要两个或者三个参数，第一个一般固定式reducer，也就是对传入的值进行各种操作的地方。第二个是要…"}, {"id": "6844903984038150152", "title": "Why saga", "desc": "在 react/redux 体系下的项目，在处理副作用（前端主要表现在异步问题）时，总是无脑上 redux-sage，前人铺的路总是香的，但是前人为什么走这条路呢？今天我们来挖挖他的前世今生。 在开始之前，先讲讲为什么出现 redux 。 话说随着 web2.0 时代的到来，前…"}, {"id": "6969525943148740615", "title": "react入门记录", "desc": "react入门 一、基础入门体验 1、初体验 2、raect脚手架 3、JSX初体验 3.1 createElement()的问题 繁琐不简洁，不够优雅 不够直观，很难一言识别出所描述的结构 3.2 "}, {"id": "6933038127326068749", "title": "【微笔记】React Fiber 不完全详解", "desc": "在react15中，更新过程是同步的。当我们调用setState更新页面的时候，React 会遍历应用的所有节点，计算出差异，然后再更新 UI。整个过程是一气呵成，不能被打断的。 如果页面元素很多，组件树很大的时候，因为更新过程是同步地一层组件套一层组件，逐渐深入的过程，在更新…"}, {"id": "6914218236212936718", "title": "使用react写个自己的博客", "desc": "一直想着写一个自己的博客网站，但是害怕没时间维护，最后选择白嫖github，使用react从零搭建一个项目，尽量多使用react全家桶系列技术，熟悉熟悉react，累积经验。博客地址, 源码地址。 从初学react到工作至今，还没有写过react项目，所以这次必须使用react…"}, {"id": "6844903558232408071", "title": "简化React中的Action的写法，不要中间件，不写dispatch", "desc": "功能很简单，却需要些这么多actionType, reducer里面还有那么多case分支。而最烦的是action，直觉上我们是希望能够写普通的function,而不用强行写上dispatch和getState, 一个action调用另一个action竟然也不能直接调用。虽然我…"}, {"id": "6844903687110787086", "title": "Create React App 2.0 华丽登场", "desc": "Create React App 是由官方所维护的开发工具，主要提供了专属于 React 开发环境的前置工作。简单来说，就是不需要安装或设定像 Webpack、Babel 这类的构建工具，而是由 CRA 替你预设且隐藏的。最主要的好处即是让开发者可以专注在程式开发，节省了繁杂的…"}, {"id": "6844903949229621261", "title": "React高级指引与Hooks笔记", "desc": "我的文笔不太好，大部分内容会通过代码演示来叙述。 本文章仅代表个人观点。 React文档的高级指引中除开无障碍后的第一个篇幅就是说明代码分割，通常我们敲代码都是通过export导出，import导入。通过打包后的生产环境包会一次性加载所有模块。代码分割实际上是一种优化手段 Re…"}, {"id": "6844903780140449805", "title": "循序渐进DIY一个react（一）", "desc": "假设我大学本科毕业论文的课题是［依据react现有的思想DIY一个react］，我会怎么实现呢？作为一个react老用户的我，我常常有这样的疑问。那好，现在，我就在这根据现有的react概念和思想，循序渐进地DIY一个简单版的react。一来，为自己立下一个react研究进程的…"}, {"id": "6844903709638393870", "title": "从React Redux的实际业务场景来看有限状态机", "desc": "上一篇讲到了一个简单的，利用了有限状态机的前端实现Promise。Promise的有限状态机除了start以及finish两个状态，其核心的三个状态其实就是一个异步行为的三种状态：PENDING、FULFILLED、REJECTED。通过异步行为的状态转移，Promise提供了…"}, {"id": "6924589844605861895", "title": "React-redux的使用和实现", "desc": "connent()接受2个参数，都是可以省略的。第一个参数是将store中的state映射到props中，第二个是将一些actions映射到组件的props中 下面的一种方式就是和上面我们使用函数是一样的，内部底层也是这样简化对象的。 组件数据自上而下的传递，让我们想到了rea…"}, {"id": "6844903513571459085", "title": "关于webpack热更新出现`Nothing hot updated`的解决方案", "desc": "今天同事反馈为什么我们的项目突然之间不能热更新了？于是我试了一下，咦，果然不能热更新了。然后试了好几个版本，发现原来热更新已经好久都不能使用了。现在是不能回滚到很老的版本的了(之前webpack做过一个很大的配置优化)，那么只能在这个新版本下找到问题的根源所在。好在所有的代码都…"}, {"id": "6883736391181107214", "title": "前端造轮子【5】- 简易 redux", "desc": "在日常的项目开发中，状态管理库一定是必不可少的，今天，本文将带领大家深入了解 redux 内部的实现原理，相信在阅读完本文之后，你会对状态管理库有更加深入的认识。 可以看到，这里 count 一开始是没有初始值的。但我们并不知道用户将设置怎样的初始值，所以为了解决这个问题，这里…"}, {"id": "6844903578004373517", "title": "2018，如何成为一名React Native开发者？", "desc": "本文除了介绍如何学习react native之外，更多的讨论了如何学习这一本质问题。其中Don’t just consume, create一语道破学习的本质是输出，要多输出。"}, {"id": "6844904033560297479", "title": "「React」制作波纹按钮 Ripple Button", "desc": "模仿 Google Material 点击波纹效果。 使用 react-spring 动画库。 其中 .g-ripple 用来模拟波纹效果。"}, {"id": "6844903570999869448", "title": "ReactNative——react-native-video实现视频全屏播放", "desc": "react-native-video是github上一个专用于React Native做视频播放的组件。这个组件是React Native上功能最全最好用的视频播放组件，还在持续开发之中，虽然还有些bug，但基本不影响使用，强力推荐。 本篇文章主要介绍下怎么使用react-na…"}, {"id": "6844903847899430926", "title": "剖析 React 源码：render 流程（二）", "desc": "这是我的剖析 React 源码的第三篇文章，如果你没有阅读过之前的文章，请务必先阅读一下 第一篇文章 中提到的一些注意事项，能帮助你更好地阅读源码。 此篇文章内容衔接 render 流程（一），当然不看上一篇文章也没什么问题，因为内容并没有强相关。 现在请大家打开 我的代码 并…"}, {"id": "6991746832191733797", "title": "React 生命周期", "desc": "react的生命周期，以及对比vue生命周期相关的个人思考。 react的生命周期，以及对比vue生命周期相关的个人思考。"}, {"id": "7001432800796606477", "title": "setState详细解析", "desc": "1.为什么使用setState 开发过程中我们不能直接通过修改state的值来让界面发生更新。 我们修改state之后，希望React根据最新的State来重新渲染界面，但是下面这种对state进行直"}, {"id": "6844903633742462983", "title": "webpack 4 ：从0配置到项目搭建", "desc": "webpack4发布以来，我写项目都是用脚手架，即使再简单的项目，真的是really shame。。虽然道听途说了很多 webpack4 的特性，却没有尝试过，因为它给人的感觉就是，em...很难。但是今天我从最简单的部分开始，一点点搭建起一个项目。 而 webpack4 的 …"}, {"id": "6919666596382244878", "title": "React Hooks(三): concurrency", "desc": "按照 andrew clark 在 https://reactpodcast.com/70 所述，react hooks 即使说不上是百分百为了 concurrent mode 设计，也绝大部分是为了 concurrent mode 设计，这样保证一旦 concurrent m…"}, {"id": "6999237749052014600", "title": "浅析React Hooks原理", "desc": "React Hooks原理 React Hooks 简介 React Hooks 是 React 16.8 以及之后版本的产物，React Hooks 就是一堆钩子函数，不同的钩子函数提供了不同的功能"}, {"id": "6844903604453654536", "title": "[译]揭秘 React 服务端渲染 ", "desc": "让我们来近距离接触一个能够让你使用 React 构建 universal 应用的特性——React 服务端渲染( Server-Side Rendering )。 服务端渲染（以下简称 SSR ）是一个将通过前端框架构建的网站通过后端渲染模板的形式呈现的过程。 能够在服务端和客…"}, {"id": "6844903616155746318", "title": "回答在职前端的疑问：平时工作是主抓业务还是主抓技术？", "desc": "确实，你已经从新手变成了一个「熟手」，也可以胜任公司的工作安排。 只不过总觉得在日复一日地重复昨天的自己。 我也有过这种阶段。我说一下我的应对措施。 将代码分为「业务代码」和「技术代码」是一种简单的二分法。但是实际情况可能并不是这样。我的经验中还有第三种代码，就是「业务技术代码…"}, {"id": "6962428405404925989", "title": "使用redux-toolkit简化react中redux的操作", "desc": "一、基本使用 1、官网地址 2、在项目中直接安装 3、查看@reduxjs/toolkit的依赖包 其中自动集成了thunk处理异步的包 4、在store文件夹下创建一个activity/slice."}, {"id": "6844903623336558606", "title": "AntD 打怪笔记", "desc": "1. 双向绑定数据到this.props.form 字段name这时会与this.props.form.name双向绑定，不需要onChange去显式地控制值，在submit的时候，所有包装过得字段都会出现在form的属性里。 不过如果想实现表单的联动，只能通过onChange…"}, {"id": "6844903726684061710", "title": "[译] React 的今天和明天（图文版） —— 第二部分", "desc": "嗨。我的名字是 Dan。我在 React Team 工作，这是我第一次参加 React 大会。 （掌声） 刚才 Sophie 讲述了这三个问题，我想大多数的开发者在 React 开发过程中都会遇到这些问题。当然，我们可以逐一来解决这些问题。我们可以尝试独立地去解决这些问题。但是…"}, {"id": "6979774462308646942", "title": "Context(精读React官方文档—15)", "desc": "Context有什么作用？ 解读 通过Context可以让组件树之间进行数据传递，并且不需要手动添加props. 何时使用Context？ 例如下面的例子，通过theme属性手动调整一个按钮组件的样式"}, {"id": "6844904047951118350", "title": "【译】再见了，整洁的代码", "desc": "那是一个深夜。 我的同事刚刚检查完他们花了一整个周所完成的代码。当时我们正在做一个图形编辑器，已经实现了通过拖动边缘的小手柄来调整矩形和椭圆形等形状的功能。 代码运行起来没问题。 但是代码里有很多重复的地方。每个形状（例如矩形或椭圆形）都有一组不同的手柄，当我们沿不同方向拖动手…"}, {"id": "6844903566197407758", "title": "React项目模板-从项目搭建到部署", "desc": "前一段时间做了一个小项目，时间比较紧，就一个人月。最终希望能够通过微信公众号链接启动应用。 项目的业务细节就不多说了，主要是想分享一下做这个项目技术方面的一些经验。 参考范围大致三种：AngularJS，Angular，React。 没错，它们是一个东西，但也不是一个东西。好了…"}, {"id": "6844903518357159949", "title": "React Fiber初探", "desc": "React 16版本已经推出多时，提出了包括Portal，异常边界等新特性，最重要的是重写了调和算法，推出了新版本算法实现-Fiber，于是博主历时三周，在业余时间学习Fiber架构实现和源码，对Fiber整体有了初步了解，并总结分享出来，若对一些源码不感兴趣，大可跳过，另博主…"}, {"id": "6844904121116393486", "title": "总结自己使用过的Hooks数据流方式", "desc": "云谦大佬可能全身心投入UmiJS开发，已经有很长一段时间没更新了，但是我觉得作为一个集成度非常高的优秀数据流管理。"}, {"id": "6968273906532630541", "title": "React 06 :: I18N", "desc": "前言 i18n（其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数）是“国际化”的简称。 在React中，可以使用i18next来支持i18n，本篇文章为大"}, {"id": "6850037270541434894", "title": "基于react来实现一个虚拟列表", "desc": "在工作中，我们经常会以列表的形式来展示内容，当时如果列表项很多的话，在pc端我们会考虑用分页的形式来解决长列表带来的性能问题。但是如果是在移动设备，为了用户体验，我们通常是用长列表的形式来展示，用户只需上下滑动来浏览。这时如果不做处理，而是一次加载全部的数据，那么当数据量过大的…"}, {"id": "6988531672241143821", "title": "React事件处理", "desc": "原声事件是浏览器层面的事件 自定义事件是纯组件实现的一种机制 首先，是不是所有的回调函数都需要用useCallback进行封装呢？     -是否需要使用useCallback和函数复杂度没有必然关系"}, {"id": "6844903930044874766", "title": "React列表keep-alive的一种写法", "desc": "应该有其他实现方法，本文也只是“伪实现”。。。"}, {"id": "6844903850567008270", "title": "[译] React Hooks: 没有魔法，只是数组", "desc": "我是 React 新特性 Hooks 的粉丝。但是，在你使用 React Hooks的过程中，有一些看上去 很奇怪的限制 。在本文里，对于那些还在为了理解这些限制而苦苦挣扎的同志，我尝试通过一些列图表的方式，来解释为什么会存在这些限制。 我听说很多同学都对hooks像魔法一般的…"}, {"id": "6844903734154100750", "title": "引入外部js脚本加载慢与页面白屏问题", "desc": "最近做的一个项目需要引入一个外部的第三方js脚本。由于这是一个关于渲染3D建筑的脚本，所以体积比较大，大概有2M，加载完成也得要个好几秒，网速慢的时候十几秒都有可能。 之前也遇到脚本加载慢的问题，但是没这么慢，所以这次就特别写个文章记录一下我的解决过程。 首先上两张项目已完成的…"}, {"id": "6926889249883029517", "title": "react-hook的存在是否可以完全替代redux", "desc": "react-redux主要提供的功能是将redux和react的组件关联起来。使用提供的connect方法可以使得任意一个react组件获取到全局的store。 实现方法是将store存放于由provider提供的context上，在调用connect时， 就可将组件的prop…"}, {"id": "6981354456235376648", "title": "antd的默认清除select选中的内容", "desc": "前几周在项目上遇到一个可以让人接受却又让用户使用很不舒服的问题。 在创建信息的时候需要几个下拉列表选择内容，当我选择之后确定或取消，按照用户的操作应该是再次点击创建后打开的弹窗后，所有的select框"}, {"id": "6844904045488898055", "title": "react组件通信", "desc": "使用 React.createRef() 创建 Refs，并通过 ref 属性附加至 React 元素上。通常在构造函数中，将 Refs 分配给实例属性，以便在整个组件中引用。 将回调函数传递给 React元素 的 ref 属性。这个函数接受 React 组件实例 或 HTML…"}, {"id": "6844903655372488717", "title": "基于React的表单开发的分析(下)", "desc": "上周我写了一篇文章: 基于React的表单开发的分析(上), 主要讲解我们在后台系统开发中 关于新建、编辑、详情这三个页面的异同点以及开发的要点，并最后有提到这期总结一个基于Antd的表单公用组件的设计与实现。 ... TextPreview => 自定义的表单组件, 它和In…"}, {"id": "6844903961346965511", "title": "[双语译文] 开发模式是如何工作的", "desc": "如果你的 JavaScript 代码库已经达到的中等复杂度, 你也许可以选择在 development 和 production 打包和运行不同的代码. If your JavaScript codebase is even moderately complex, you pr…"}, {"id": "6844903969274200071", "title": "从React16生命周期到React fiber架构", "desc": "之前回看React文档时，发现React已经更新到了v16.7.0版本，想起之前官方所提过的将会在未来v17.0 版本中移除componentWillMount，componentWillReceiveProps，componentWillUpdate,因此在这里简单记录一下移…"}, {"id": "6844904046831075342", "title": "来看看 vue3.0 跟 React16 + HOOK的源码对比 哪个香？（2）", "desc": "effect也就是在React中我们常说的side effect，在React中类似像componentDidMount这样的生命周期方法中，因为可能会执行setState这样的方法而产生新的更新，我们称为side effect即替代。本身FunctionalComponent…"}, {"id": "6844903637513142285", "title": "基于React 源码深入浅出setState:官方文档的启示录", "desc": "children need to be re-rendered with the updated state. This is the primary server responses. 翻译: setState()通过队列的形式保存组件状态并告诉React这个组件和他的子组件…"}, {"id": "6844903798645719053", "title": "使用 Hooks 简化受控组件的状态绑定", "desc": "文章中大量用到了 ES6 语法，比如解构赋值和函数参数默认值、剩余参数、展开语法、箭头函数等。 React 在 16.8 版本中推出了 Hooks，它允许你在“函数组件”中使用“类组件”的一些特性。 React 本身提供了一些 Hooks，比如 useState、useRedu…"}, {"id": "6844903886436696077", "title": "一篇即可了解react16前后的生命周期", "desc": "在react16的之前生命周期其实主要分为四个阶段：组件初始化、组件挂载、组件更新、组件卸载。 在该阶段组件中的构造方法 constructor() 接受 props 接收父组件传下来的 props。还可以在 constructor() 内部定义定义this.state 的初始…"}, {"id": "6844903641933938702", "title": " React SSR 企业级方案最佳实践", "desc": "背景： 在使用react来开发SSR服务端渲染项目，有些不适应，如果能像vue-cli一样的简单上手脚手架工具，egg企业级架构及代码规范；对于新手来说，体验效果会更好。最终决定使用Next.js作为React的SSR渲染，Koa作为后端渲染，达到同构渲染，同构开发。 分析： …"}, {"id": "6844903519946817544", "title": "recompose", "desc": "recompose可以看做React技术栈的lodash，提供了许多用于创建react函数式组件和高阶组件的工具函数，包括compose、branch、withState、withStateHandlers等 compose方法和之前redux源码中的compose方法一模一样…"}, {"id": "6981111807637209124", "title": "015.高阶函数-函数柯里化", "desc": "高阶函数&柯里化 高阶函数：如果一个函数复合下面2个规范中任何一个，那函数就是高阶函数。 若A函数，接收的参数是一个函数，那么A就可以称为高阶函数 若A函数，调用的返回值依然是一个函数，那么A就可以称"}, {"id": "6844903903612387335", "title": "源码解析 React Hook 构建过程", "desc": "2018 年的 React Conf 上 Dan Abramov 正式对外介绍了React Hook，这是一种让函数组件支持状态和其他 React 特性的全新方式，并被官方解读为这是下一个 5 年 React 与时俱进的开端。从中细品，可以窥见React Hook的重要性。今年…"}, {"id": "6844903988467351565", "title": "Immutable.js结合React的使用", "desc": "immutable.js 是 Facebook 开源的一个项目，用于实现 javascript 的数据不可变，解决引用带来的副作用。 不变的数据(Immutable Data )一旦创建就无法更改，从而可以简化应用程序开发，进行防御性复制，并可以使用简单的逻辑实现高级的备忘和更…"}, {"id": "6844904180574846984", "title": "移除react项目中prop-types代码", "desc": "在开发环境中，这些代码会帮我们校验prop的类型，这无疑是很有用的。 在产品环境中我们并不需要这些校验。 通过查看prop-types的源码，了解到当process.env.NODE_ENV === 'production'时prop-types为了我们移除了类型校验。 看到这…"}, {"id": "6844903816215658504", "title": "阅读React16源码有感", "desc": "自从React的内部实现改为Fiber之后，源码就变得相当晦涩，啃了一个月之后，稍微总结的了一点经验、阅读时的误区、以及为什么很多次看不下的原因，但是我相信，这些经验可以成为我将来阅读源码的过程中最大的武器。我相信阅读源码并从中提炼知识是最好的学习方式。 1. 模块化阅读，不能…"}, {"id": "6844904002841214989", "title": "Remux - Redux多实例的解决方案", "desc": "一类是以函数式编程为代表的 redux，特点是通过单 store 与约定状态为不可变数据结构，使得状态易追踪与回溯，可预期。 一类是以响应式编程为代表的 mobx，特点是允许对状态进行直接修改，通过 observable 对 view 进行更新。 单store 在跨项目复用存在…"}, {"id": "6922065684134363150", "title": "在React中使用Cesium进行三维显示的最佳实践（一）", "desc": "Cesium 是目前唯一且流行的GIS三维显示库了，下面简单介绍如何在react引入并简单使用。 使用create-react-app 创建一个带typescript的模板项目，然后直接eject。 官方有教程 https://cesium.com/docs/tutorials…"}, {"id": "6844903614129913863", "title": "源码分析 @angular/cdk 之 Portal", "desc": "最近在学习 React 时，发现 React 提供了 Portals 技术，该技术主要用来把子节点动态的显示到父节点外的 DOM 节点上，该技术的一个经典用例应该就是 Dialog 了。设想一下在设计 Dialog 时所需要的主要功能点：当点击一个 button 时，一般需要在…"}, {"id": "6844903630663843848", "title": "React16.x中的服务端渲染（SSR）", "desc": "简要介绍：为了SEO和加快首屏加载速度，React提供了服务端渲染（Server Side Render）。本文结合express，来介绍一下React16.x中的SSR。 单页应用将UI层和内容都由javascript来渲染，搜索引擎或网页爬虫需要完成的HTML结构，因此单页…"}, {"id": "6926314756697489421", "title": "简单梳理Redux的源码与运行机制 ", "desc": "前几天写了一篇react另一个状态管理工具Unstated的源码解析。 开启了我的看源码之路。想一想用了好长时间的redux，但从没有深究过原理，遇到报错更是懵逼，所以就啃了一遍它的源码，写了这篇文章， 分享我对于它的理解。 这里实现的是一个点击按钮加减数字的效果，点击触发的行…"}, {"id": "6844903566017036301", "title": "来聊聊怎么写react-native上的样式吧", "desc": "不久之前我重构了一个古老的项目，总结了一些js方面的想法，不过对于一个前端项目而言不仅仅只由js组成的嘛，上学的时候老师和我说HTML+CSS+JS对应的是页面的骨架、皮肤和肌肉。既然骨架我们有了，肌肉也聊完了，今天我们就来聊聊“皮肤”吧。 由于我重构的是一个react-nat…"}, {"id": "6894519762353979405", "title": "怎么理解虚拟dom？", "desc": "现在web前端的开发，对于MVVM框架的运用，那是信手拈来，用的飞起。一个xxx-cli工具，就能初始化一套模板，再填充业务代码，打包部署即可。但是会用，是一个方面，大家有没有底层深入思考一下，这些框架核心的技术突破点在哪里？解决了哪些问题？作为一个爱主动学习的童鞋，我们得花点…"}, {"id": "6890552952704991245", "title": "从原型链到PureComponent源码", "desc": "最近在逛React商场的时候，突然遇到了PureComponet，本来想扫一眼就过去的，但是看了她一眼就把我迷住了，瞬间对她产生了极大的兴趣，但是哥哥又没胆子在大庭广众之下找她要vx，于是通过各方关系，终于加到了PC小姐姐的微信。在深入交流♂后，我发现这个小姐姐不仅很好看，而且…"}, {"id": "6844903540515667981", "title": "Mobx —— React状态管理另一条路", "desc": "Redux 开启了前端状态管理大门，但是对于一些比较小的应用，使用 Redux 反而增加了开发复杂度，这时候，我会选择使用 Mobx 来进行状态管理。 Mobx是一个通过函数响应式编程，让状态管理更加简单和容易拓展的库。 Anything that can be derived…"}, {"id": "6844903782334087176", "title": "精读《React PowerPlug 源码》", "desc": "1. 引言 React PowerPlug 是利用 render props 进行更好状态管理的工具库。 React 项目中，一般一个文件就是一个类，状态最细粒度就是文件的粒度。然而文件粒度并非状态管理最合适的粒度，所以有了 Redux 之类的全局状态库。 同样，文件粒度也并非…"}, {"id": "6907232251013464078", "title": "快速上手React(终章)", "desc": "2. 重绘 3. jsx 转化的过程 1. tree diff 对于 跨层级操作的dom,React 没有直接把 左侧的A 拷贝到右侧的D中，而是 创建A 创建B 创建C 删除原来的A，B，c,因此，尽量避免跨层级操作dom元素。 2. component diff 3. el…"}, {"id": "6844903684833296398", "title": "搭建Typescript+React项目模板(4) --- 项目打包", "desc": "经过前面的初始化，提升开发体验和集成了一堆工具，调整了项目结构等等之后，我们是时候考虑进行项目打包了。 0. 添加打包路径工具 该配置项指定了打包路径和打包后的js文件名，在webpack的配置项中，output是必须有的。 以后指定打包文件存放路径的时候就可以直接使用这个工具…"}, {"id": "6844903682060861454", "title": "我的源码阅读之路：redux源码剖析", "desc": "用过react的小伙伴对redux其实并不陌生，基本大多数的React应用用到它。一般大家用redux的时候基本都不会单独去使用它，而是配合react-redux一起去使用。刚学习redux的时候很容易弄混淆redux和react-redux，以为他俩是同一个东西。其实不然，r…"}, {"id": "6905741901477691399", "title": "React 实现一个简单的 SSR", "desc": "为了学习一下 React 实现 SSR 的整体过程，并了解过程中会遇到哪些坑，所以着手写了这篇文件，记录一下。 note：项目中依赖还是比较多的，感兴趣的小伙伴可以去我的 github 仓库查看具体代码。 首先我们用 Express 来搭建一个服务，后续用来渲染 React 组…"}, {"id": "6844903569712234509", "title": "[译] 测试 React & Redux 应用良心指南", "desc": "前端只是一层薄薄的静态页面的时代已经一去不复返了。现代 web 应用程序变得越来越复杂，逻辑也持续从后端向前端转移。然而，当涉及到测试时，许多人都保持着过时的心态。如果你使用的是 React 和 Redux，但是由于某些原因对测试你的代码不感兴趣，我将在这里向你展示如何以及为什…"}, {"id": "6844903507774930957", "title": "1分钟读完《我希望在深入 React 之前知道这些》", "desc": "Canberk Morelli 是 OpsGenie 的一名前端工程师，正在使用 React 构建公司内部项目。通过这篇文章可以使初学者不要犯同样的错误。 每次state 改变或者传入新的 props 都会调用 shouldComponentUpdate。 shouldComp…"}, {"id": "6871871744983400462", "title": "React学习笔记 --- 受控组件和非受控组件及ref", "desc": "一、不可变数据的力量示例代码效果所以，我们在开发中不应该修改state中的数据后再执行setState方法，这样界面是不会执行render函数的参考React文档-性能优化所以上述的应进行如下的修改："}, {"id": "6903923522804908045", "title": "深入浅出 React -- 组件数据流", "desc": "在 React 组件中，props（入参）或者 state （状态）发生改变，UI 也会相应的更新。 组件更新不止来自自身状态的改变，而两个组件之间建立数据上的连接，实现组件间的通信，它的背后是 React 数据流解决方案。下面将会从各方面说明当前实践中 React 数据通信的…"}, {"id": "6844903859928711176", "title": "OpenLayers实现小车的轨迹查询的功能", "desc": "这是自己当时刚从后端切到前端时，实现的第一个功能，当时都没有接触过前后端分离的开发模式，更不知道react,抱着现学现做的态度做的.....，可能有需要的同学，做个参考吧。"}, {"id": "6844903856199958542", "title": "深入浅出React核心源码解析(1) jsx与babel的背后", "desc": "开发过至少一个基于react的完整项目。 熟悉标准js基础。 了解适当的数据结构，起码要知道什么是栈，什么是队列。 只要能满足上述的条件，那么这个系列就是适合你阅读的。 大家可能都知道，使用create-react-app创建出的项目可以直接在js文件里书写react组件，或者…"}, {"id": "6936741808059711518", "title": "受控组件与非受控组件（二）", "desc": "讲非受控组件之前，我们先理解Refs and the DOM的概念。 在React的典型数据流中，props是父子组件的唯一交互方式。要修改子组件，就要通过修改props来重新渲染子组件。而refs属性，则提供了在典型数据流以外，强制修改子组件的方式。被修改的子组件可能是一个D…"}, {"id": "6844903566407106573", "title": "理解React组件的生命周期", "desc": "React提供了很多钩子函数使我们可以在合适的时间、合适的节点更新组件的状态，这些钩子是生命周期函数，想要使用React，我们必须掌握在钩子中可以做什么，不可以做什么。 ？？首先大家想一下在哪里发送请求比较合适componentWillMount、componentDidMou…"}, {"id": "6844903607750524941", "title": "Portal in React Native: RN 弹出层解决方案", "desc": "js一统天下😳"}, {"id": "6844903577765281806", "title": "使用import配合React-Router进行code split", "desc": "代码分片可以让你把应用分成多个包，使你的用户能逐步加载应用而变得流行起来。在这篇文章中，我们将会看一下什么是代码分片和怎么去做，了解怎么去配合React Router去实现它。 现在是2018年。你的用户不需要为了一小块内容而去下载整个应用。如果一个用户下载所有的代码，仅仅是为…"}, {"id": "6844903693150584845", "title": "精读《Epitath 源码 - renderProps 新用法》", "desc": "很高兴这一期的话题是由 epitath 的作者 grsabreu 提供的。 前端发展了 20 多年，随着发展中国家越来越多的互联网从业者涌入，现在前端知识玲琅满足，概念、库也越来越多。虽然内容越来越多，但作为个体的你的时间并没有增多，如何持续学习新知识，学什么将会是个大问题。 …"}, {"id": "6844903992393203720", "title": "学会使用react高阶组件(HOC)优化你的代码～", "desc": "😊文章略长，做好心里准备哦，建议阅读15分钟。 适用范围广，它不需要es6或者其它需要编译的特性，有函数的地方，就有HOC。 Debug友好，它能够被React组件树显示，所以可以很清楚地知道有多少层，每层做了什么。 在下面很多案例中用到了装饰器(@)，这里提前说明下，修饰器…"}, {"id": "6844903648275726350", "title": "Ant-design dropdown 源码学习", "desc": "原生dom可以很容易的实现简单的dropdown，却很难满足我们的各种需求，因此各式各样的dropdown第三方实现就出现了。ant-design是基于react实现的一组UI组件，我们选择对其中的dropdown进行分析。 实现时需要注意的几个问题：什么时候弹出下拉选项， 下…"}, {"id": "6844904024764841997", "title": "[译]在React中实现条件渲染的7种方法", "desc": "借助React，我们可以构建动态且高度交互的单页应用程序，充分利用这种交互性的一种方法是通过条件渲染。 条件渲染一词描述了根据某些条件渲染不同UI标签的能力。在React文档中，这是一种根据条件渲染不同元素或组件的方法。此概念通常被应用到如下情况中： 在本文中，我们将研究在Re…"}, {"id": "6936393405878501384", "title": "React组件化-02-组件间通信Context", "desc": "Context 提供了⼀个⽆需为每层组件⼿动添加 props，就能在 组件树 间进⾏数据传递的⽅法。 Context设计的⽬的是为了共享那些 全局 的数据，例如当前认证的⽤户、主题等。 ThemeBtn中如果是通过 this.context使用value的值 的话，那么在组件中…"}, {"id": "6844903496504868871", "title": "ES6 | 用模块封装代码", "desc": "模块是自动运行在严格模式下并且没有办法退出运行的JavaScript代码。与共享一切框架相反的是，在模块顶部创建的变量不会自动被添加到全局共享作用域，这个变量仅在模块的顶级作用域中存在，而且模块必须导出一些外部代码可以访问的元素，如变量或函数。模块也可以从其他模块导入绑定。 模…"}, {"id": "6844903538150096903", "title": "你所不知道的 Typescript 与 Redux 类型优化", "desc": "自从 Redux 诞生后，函数式编程在前端一直很热；去年7月，Typescript 发布 2.0，OOP 数据流框架也开始火热，社区更倾向于类型友好、没有 Redux 那么冗长烦琐的 Mobx 和 dob。 然而静态类型并没有绑定 OOP。随着 Redux 社区对 TS 的拥抱…"}, {"id": "6844904177106157575", "title": "用hooks写个登录表单", "desc": "最近尝试用React hooks相关api写一个登陆表单，目的就是加深一下对hooks的理解。本文不会讲解具体api的使用，只是针对要实现的功能，一步一步深入。所以阅读前要对 hooks有基本的认识。最终的样子有点像用hooks写一个简单的类似redux的状态管理模式。 一个简…"}, {"id": "6844903640939888648", "title": "关于React项目中动画不生效的一些思考", "desc": "我最近做的React项目中需要做这样的一个组件来展示数据。 根据不同的数值，这个蓝色的条显示的宽度不同。 这个其实很简单，用正常的react的编程思维，我只要根据数据动态的计算它的宽度，循环生成相应的节点就行了。 这样就实现如上图所示的功能显示，但是现在又有个需求，就是需要那个…"}, {"id": "6844903897136381966", "title": "实现一个简单的react-redux", "desc": "redux主要目的就是为了解决多处对同一状态修改带来的问题，而反映到react上就是多个层级不同的组件对同一个状态的操作。首先，需要让子组件有方法去访问到统一个状态，在react中刚好context就是做着个事情的，但是如果要进行状态变更的话就需要修改到context里面的状态…"}, {"id": "6844903587030515719", "title": "让 BAT Offer 不再难拿", "desc": "最近有幸受老师邀请，总结一篇关于应届生校招求职的文章，我将它分享出来，希望可以帮助到跟我曾经一样找工作迷茫的同学。"}, {"id": "6844903870280253453", "title": "create-react-app 源码学习（上）", "desc": "对于前端工程构建，很多公司、BU 都有自己的一套构建体系,比如我们正在使用的 def，或者 vue-cli 或者 create-react-app，由于笔者最近一直想搭建一个个人网站，秉持着呼吸不停，折腾不止的原则，编码的过程中，还是不想太过于枯燥。在 coding 之前，搭建…"}, {"id": "6844903864521457678", "title": "React + Redux 实现的个人博客", "desc": "本项是使用 React 实现的个人博客，使用了 Redux 做数据管理，webpack 做包管理工具，后端使用的是 Ruby On Rails 提供的接口。"}, {"id": "6844903907311747086", "title": "React setState流程解析【前端每日一题-22】", "desc": "接触react后，在项目开发过程当中，发现setState的是异步方法，需要在回调函数中才能获得真正的值。 查阅相关文章后，才得知，并非如此。另外两种setState同步的做法。 调用setState后，会把我们想要更新的state压进一个待更新队列(即内部实例的_pendin…"}, {"id": "6844903564611944456", "title": "[译] 样式组件 v3.1.0：大幅性能提升并支持服务端流式渲染", "desc": "在生产环境，一种新的 CSS 注入机制意味着更快的客户端渲染。 🔥 服务端流式渲染可以加快首屏渲染时间！ 🔥🔥 这个补丁出来很久了，并有很长的历史。差不多一年半前 Sunil Pai 发现一个新的，却广泛未知的 DOM API： insertRule。它允许人们以惊人的速…"}, {"id": "6844904145841815559", "title": "React 组件与设计模式之一", "desc": "组件化已然成为构建前端应用的指导思想了 —— 将整个庞大的应用拆分成各个小的功能模块，再将功能模块划分到页面，每个实际的页面再由独立的功能单元（组件）组装而成。在整个过程中，组件扮演着最基础而又最重要的角色。既然组件是构建应用的基础，为了比较全面的了解组件以及组件的设计模式，下…"}, {"id": "6844903560031764488", "title": "从history api看主流框架的路由机制", "desc": "讲解路由的原理"}, {"id": "6844903648288309255", "title": "Express, Koa, Redux中间件的区别,写法和执行流程", "desc": "1. 区别 Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。 中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对…"}, {"id": "6921293273260621837", "title": "【React学习笔记】Hook&React Router", "desc": "函数组件注意点：Hook（钩子函数）只有在函数式组件中能使用hook,在类式组件中不能使用hook?常用hookuseState另一点需要注意的是，useState多次调用set方法不会自动合并！！！"}, {"id": "6844903858523602957", "title": "React 30 秒速学：制作模态框组件", "desc": "可通过事件控制的模态组件。 要使用该组件，只导入一次Modal，然后通过将一个布尔值传递给isVisible属性来显示它。 使用对象解构来设置模态组件的某些属性的默认值。 定义keydownHandler方法，用于处理所有键盘事件，可以根据你的需要使用它来调度动作（例如，当按下…"}, {"id": "6844903984889610253", "title": "前端知识库Reactjs基础系列一", "desc": "近几年前端可以说是飞速发展，从虚拟dom到flux单项数据流，这些对于前端可以说是跨时代到发展，对于前端开发者来说不仅仅是挑战也是大到机遇，如果你想成为一名顶尖到前端开发工程师，那我认为掌握这些概念和由此孕育而出到框架是必不可少的。anglurjs ，vuejs ，reactj…"}, {"id": "6844903728751853581", "title": "如何理解package.json中的proxy字段？", "desc": "这个proxy字段目前我只了解到可以与create-react-app的react-scripts结合使用:Proxying API Requests in Development，react-scripts应该是基于HTTP_PROXY环境变量做了一些封装。 人们通常从将服务…"}, {"id": "6844903971509764110", "title": "20行代码实现redux，50行代码实现react-redux", "desc": "实现了redux的createStore方法，代码没几行，应该能看懂吧。 把导入redux的代码换成myredux即可，其他使用和redux一样。当然，redux的中间件并没有实现。 而且还需要把<Consumer>通过props传到<Container/>里。 使用方法，和r…"}, {"id": "6913534573791936519", "title": "react服务端渲染: cookie如何透传给后端，后端如何设置cookie", "desc": "如果是浏览器客户端请求的后端接口，response是可以直接被浏览器读取到的，就不需要我们做什么事情了。 用户信息存cookie的原因是不安全，也不建议的。当然前提用户信息存在隐私数据，解决方案是存在session中，cookie只是存session id。 我的博客cooki…"}, {"id": "6844904105287270407", "title": "React_核心概念", "desc": "1. 什么是JSX 每个JSX元素必须要有结束（XML规范）。自结束也可以 2. 在JSX中嵌入表达式 普通对象，不可以作为子元素。会报错 3. react元素的不可变性 1. 创建一个组件 2. 组件的属性 组件无法改变自身的属性。 之前学习的React元素（JSX），本质上…"}, {"id": "6844903587881943048", "title": "react 版本的 interactjs", "desc": "想在 React 中更好的使用interactjs吗，现已支持拖拽、缩放、多手势..."}, {"id": "6844903760989257735", "title": "通过简单的示例来理解React Hook", "desc": "This hook makes it easy to dynamically change the appearance of your app using CSS variables. You simply pass in an object containing key/v…"}, {"id": "6847902221623885837", "title": "边学边写nextjs-3 redux + 数据联动", "desc": "到了redux状态管理后，感觉之前的目录都没发看了，所以重构一下吧。 之前的目录结构有点乱，对于一个项目来说不是一个好事。不说多人合作，一个人维护也够呛。 因为改动太大， 我就不一一把文件写出来了，挑几个重点的说下。 因为大部分前端框架都是从src开始的，而且next打包后会在…"}, {"id": "6844903542092906504", "title": "技术雷达之「微前端」- 将微服务理念扩展到前端开发 | 《前端的逆袭》知乎专栏", "desc": "本文共计约 7k 字，预计阅读时间 15mins 微前端的缘由：单体应用与微服务架构 微服务架构带来了哪些好处？ 那么前端的现状呢？ —— 臃肿的前端 微前端的定义 - 将微服务理念扩展到前端开发 拆分微前端所带来的好处 微前端的核心思想 微前端的可选实践方案 页面优化与实例"}, {"id": "6948675199667535902", "title": "React相关框架性能优化", "desc": "对于2021年居然面试还问class的生命周期也是不敢苟同，前端学的东西多又杂，个人认为用class类写组件已经被淘汰了，详见上一篇文章： hooks组件与class组件对比. React.memo：使得 React 在更新组件之前进行 props 的比对，若 props 不变…"}, {"id": "6920083271326498824", "title": "开始学习React啦（四）", "desc": "一、refref的值根据节点的类型而有所不同：当ref属性用于HTML元素时，构造函数中使用React.createRef()创建的ref接收底层DOM元素当ref属性用于自定义class组件时，re"}, {"id": "6844904073951461390", "title": "React 夜点心：memo", "desc": "今天的夜点心关于 React 的 memo 方法。 上面的代码中，App 组件是应用的根组件；Display 接受一个字符串 name 和一个数字 value 作为属性，每次组件重渲染的时候会在控台打印出这两个属性的值。 这次，用来显示十位数的组件每次都跟着父组件一起重新渲染了…"}, {"id": "6844903606991192078", "title": "react + express 撸一个图床应用", "desc": "emmmmm... 第一次用 react + express 做了个稍微有点儿用的东西 —— 图床。 emmmmm... 同时也是第一次在掘金发文章求(pian) Star ，想想都有些小激动呢~ 当然好用，然而直到我发现上传至微博图床的图片在某些不知所以然的情况下就挂了，挂了…"}, {"id": "6844903917977862158", "title": "实现一个简单版React Router v4理解其原理", "desc": "对于React-Router的实现原理，参考自Build your own React Router v4这篇英文原文，另外，React-Router底层库history的源码也值得一读。 接下来是关于React-Router v4的一个简单版实现，通过这个实现来理解路由的原理…"}, {"id": "6844904024504795150", "title": "React 源码学习（十一）：Scheduling", "desc": "即便你的组件以 function 的方式声明，在 React 中你也并不会直接调用他们。每个组件返回一个该渲染什么的描述，该描述会包含开发者写的组件如 <LikeButton> 和 平台特定的组件如 <div>。由 React 决定在未来的某个时间点展开 <LikeButton…"}, {"id": "6844903713174192141", "title": "名字随便起——es6 Proxy ", "desc": "0. 前言 先丢个大家都看过的阮一峰es6链接。最常用的方法： 类似Object.defineProperty的set和get，拦截set和get操作进行一些其他逻辑。但是proxy操作的是一个新的代理对象，是对原对象的一个代理。 1. 拦截展示结果 最近做一个活动页，reac…"}, {"id": "6844903545443975182", "title": "React水印组件，支持图片水印，文字水印", "desc": "React水印组件，支持图片水印，文字水印。支持左上、左下、右上、右下、居中等位置 ，支持任意位置。"}, {"id": "6934536311579607048", "title": "再再再重构一次表单组件", "desc": "上图只是一个简单的示意，应该还需要诸如password的小眼睛，下拉菜单的小箭头等等UI层面的辅助结构。诸如上图的这些辅助结构可以通过配置传入，有值时显示，无值时不显示，另外还需要配套api，按照需求调用它们 配置是死的，怎么配置就输出什么样的结构，但并不能满足产品需求。很多场…"}, {"id": "6844904046264844296", "title": "【译】理解React hooks内部原理", "desc": "我们都已经听说过它（指Hooks）。这个React16.7中的新的hook系统在社区中引起非常多的争议。我们都已经试用并且测试过它，对于它以及它的潜力都感到非常的兴奋。当你思考hooks的时候，会觉得他们有种魔力，不知为何，React甚至能够在不暴露组件实例的情况下管理你的组件…"}, {"id": "6844903653778669582", "title": "如何直观的在JavaScript中管理状态", "desc": "让我们探索状态管理中的范式转换【译者注：关于范式转换，请戳这里】，用状态机和状态图来直观的设计系统。 我接触状态管理已经有一段时间了。而且已经尝试过了各种各样的状态管理库：Flux，Reflux，Redux，Dva，Vuex，Mobx以及我自己的库。 争论哪一个库是更高效的解决…"}, {"id": "6844903497633103879", "title": "一个轻量的React日历组件", "desc": "简约风格日历组件。"}, {"id": "6961012489794355230", "title": "jsx核心知识详情", "desc": "1.认识jsx ​ jsx实际上是JavaScript语法上的一个扩展，也是JavaScript XML的缩写。它的作用就是用来描述我们的用户界面，使有关界面的代码更好的与JavaScript代码融合"}, {"id": "6916081489130029064", "title": "深入浅出的学习react[学习笔记4]", "desc": "在对 React 15 的生命周期有了系统的掌握和理解的基础上，我们接着对 React 16 以来的生命周期进行剖析。通过对比新旧两个版本生命周期之间的差异，来探寻变化背后的原因。 关于 React 16 以来的生命周期，下图是目前公认的比较优秀的流程大图。我们先来看 Reac…"}, {"id": "6844903592843804680", "title": "带你了解redux与react-redux", "desc": "看着写了这么多，其实就是为了拿到字符串INCREMENT和DECREMENT。 reducer是一个纯函数，相同的输入有相同的输出，不同的输入得到不同的输出。它必须遵守以下几点 其实就相当于state变成了一个只是可读的状态，不可更改，返回了计算后的新的状态，原状态不变。 Re…"}, {"id": "6844903811140550670", "title": "react服务端渲染框架Next.js踩坑（一）", "desc": "next.js是react的同构库，用它可以快速搭建一个react服务端渲染的框架，相比于直接用react配置服务端渲染简单了不少。对于没写过SSR项目，想要尝试一下的同学是个挺好的选择。 本次项目基于cnode社区API，实现一个完整的SSR项目，主要的技术用到了React …"}, {"id": "6844903842924986375", "title": "React 穿透获取被高级组件装饰的目标组件实例", "desc": "React 中常规的父子组件通信都是通过 props 进行的，子组件通过 props 来接收父组件传递的状态值以及方法，从而响应视图的更新以及事件的执行。 在不同的业务场景中也会存在非常规的通信方式，例如需要在父组件中调用子组件属性或者方法，这个时候就需要获取子组件的实例来解决…"}, {"id": "6844903543736893453", "title": "「React & Vue」优雅而炫酷的 Dropdown 组件，极大提高交互效果和操作愉悦性。", "desc": "适用于 React 的优雅而炫酷的 Dropdown 组件。 在线示例：https://xbt1.github.io/effect-dropdown-react/ Vue 版本：https://github.com/XBT1/effect-dropdown-vue/"}, {"id": "6844903583456952327", "title": "初体验egg-vue-singal-page", "desc": "egg在koa框架的基础上进行了封装，并集合了现今热门的vue、react框架，支持服务端渲染，可以说是全端开发的一个优秀实践。关于demo和api，可以在官网自行查看。这里只对本人觉得比较有意思的一些点进行总结。 egg为了统一前后端代码的构建，对webpack进行了进一步的…"}, {"id": "6953911186635096072", "title": "react学习笔记——路由", "desc": "react中的路由和vue中的路由理念大致相似，但由于两大框架的不同，有一定差别。 就像Vue有Vue-router，react也有自己的路由实现：React-touter react-router-"}, {"id": "6898569392892674062", "title": "删除", "desc": "无无"}, {"id": "6844903570685329415", "title": "awesome npx ", "desc": "在gayhub闲逛时，不知怎么突然想看看create-react-app（以下简称 create）的源码，来到项目主页，无意中瞄到README.md好像发生了一点小小的变化。 这个 npx 是什么鬼，突然想起来前几天好像也在一些 npm 的工具包上看到过这个玩意儿，但是没有注意…"}, {"id": "6844903702038478862", "title": "[译] 为数字优先新闻编辑室开发文本编辑器", "desc": "如果你和美国的大多数人一样，几乎每天都会使用某个文本编辑器。无论是基本的 Apple Notes，还是像 Google Docs、Microsoft Word 或 Mediumz 等更高级的东西，我们的文本编辑器都允许我们记录和呈现我们重要的想法和信息，使我们能够以最吸引人的方…"}, {"id": "6909651165303013383", "title": "reactjs-base-interview", "desc": "*1. 初始渲染阶段：*这是组件即将开始其生命之旅并进入 DOM 的阶段。 *2. 更新阶段：*一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。 *3. 卸载阶段：*这是组件生命周期的最后阶段，组件被销毁并从 DOM 中…"}, {"id": "6903794734310326286", "title": "React类组件基础01-JSX和部分常用API", "desc": "React 认为渲染逻辑本质与其他UI逻辑内在耦合，比如，在UI中需要绑定处理时间、在某些时刻状态发生变化时需要通知到UI，以及需要在UI中展示准备好的数据。 React 不强制要求使用JSX，但是大多数人发现，在JavaScript代码中奖JSX和UI放在一起时，会在视觉上有…"}, {"id": "6844903846653722632", "title": "探索react hook的诞生背景和实现过程", "desc": "最近终于是下定决心将我负责的一个公司内部系统由react v15.4.1升级到v16.8.6。v16.8.6中最被推崇的一个特性应该就是react hook了，实际上手后为能更顺手的使用也是花了2个多小时的时间把react hook的实现源码看了一遍。 要在这个组件中触发更新要…"}, {"id": "6844903734095380487", "title": "[译]react的setState如何知道该做什么 --Dan Abramov", "desc": "当然，react会在下一个{clicked: true}状态的时候re-render组件并且更新DOM去返回<h1>Thanks</h1>元素。 更新DOM听起来似乎是React DOM在负责处理。但是我们调用的是this.setState，这个api是来自react，并非是R…"}, {"id": "6844903566776205319", "title": "面试分享：专科半年经验面试阿里前端P6+总结(附面试真题及答案)", "desc": "年底由于种种原因想换一份工作，但由于太忙，没认真搞简历，也没怎么复习基础，导致很多本来会的都没敢往简历上写。于是写了一个简版的简历挂在Boss直聘上，准备年过完再认真筹备这件事情。 balabala....，好久没面试过，自我介绍居然显得很紧张，说了一些简历上没有的东西，比如之…"}, {"id": "7000714253854310431", "title": "React Hooks初探（三）", "desc": "hooks引入react里已经很长时间了，在项目中一直使用，文档也没仔细阅读，今天打算再重新看看文档，领略一下当初学习的感受。"}, {"id": "7005745490029445134", "title": "React-antd的按需引入+自定主题", "desc": "React-antd的按需引入+自定主题 我们需要对 create-react-app 的默认配置进行自定义，这里我们使用 react-app-rewired （一个对 create-react-ap"}, {"id": "6844904017487724557", "title": "React SSR 详解【近 1W 字】+ 2个项目实战", "desc": "是指将单页应用（SPA）在服务器端渲染成 HTML 片段，发送到浏览器，然后交由浏览器为其绑定状态与事件，成为完全可交互页面的过程。（PS：本文中的 SSR 内容都是围绕同构应用来讲的） 更快的首屏加载速度：无需等待 JavaScript 完成下载且执行才显示内容，更快速地看到…"}, {"id": "6952674285311754276", "title": "精读《DOM diff 最长上升子序列》", "desc": "在 精读《DOM diff 原理》 一文中，我们提到了 Vue 使用了一种贪心 + 二分的算法求出最长上升子序列，但并没有深究这个算法的原理，因此特别开辟一章详细说明。另外，最长上升子序列作为一道算法"}, {"id": "6993924213094662174", "title": "React Hook 最佳实践", "desc": "React Hook 自己在使用过程中遇到的一些问题，和类组件的异同，解决问题的思路和方法，还有最佳实践的总结，希望可以帮助大家更加深入了解 React Hook"}, {"id": "6996312731519303687", "title": "React setState 同步异步的魅力", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 在之前的一篇文章【React setState 异步真的只是为了性能吗？】中为大家简述了 React setState 异步的一些更"}, {"id": "6955287500311150605", "title": "懒加载 React 长页面 - 动态渲染组件", "desc": "长页面在前端开发中是非常常见的。例如下图中的电商首页，楼层数据来自运营人员在后台的配置，楼层数量是不固定的，同时每个楼层可能会依赖更多翻页数据。在这种情况下，如果一次性将页面全部渲染，可想而知，"}, {"id": "6886240723595689997", "title": "基于 qiankun 的 CMS 应用微前端实践", "desc": "LOOK 直播运营后台工程是一个迭代了 2+ 年，累计超过 10+ 位开发者参与业务开发，页面数量多达 250+ 的“巨石应用”。代码量的庞大，带来了构建、部署的低效，此外该工程依赖内部的一套 Regularjs 技术栈也已经完成了历史使命，相应的 UI 组件库、工程脚手架也被…"}, {"id": "6844903779154804744", "title": "Taro 多端开发的正确姿势：打造三端统一的网易严选（小程序、H5、React Native）", "desc": "笔者所在的趣店 FED 早在去年 10 月份就已全面使用 Taro 框架开发小程序（当时版本为 1.1.0-beta.4），至今也上线了 2 个微信小程序、2 个支付宝小程序。 之所以选用 Taro，解决微信小程序原生开发的痛点是一方面，另一方面团队也有多端统一开发的诉求，Ta…"}, {"id": "7003249831435042853", "title": "react-redux使用及源码分析（下）", "desc": "react-redux使用及源码分析（下） 上节主要讲解了 react-redux 在类组件和函数组件中的用法，本节主要分析一下如何自己实现一个 react-redux 1、Provider 组件的实"}, {"id": "6940287134154637326", "title": "【金三银四】React 面试常见问题", "desc": "React.createClass 是 React 最传统、兼容性最好的方法。该方法构建一个组件对象, 当组件被调用时，就会创建几个组件实例 ES6 class 方式和 createClass 类似，只是从调用内部方法变成了用类来实现。 无状态组件创建时始终保持一个实例，避免了…"}, {"id": "6994992409075515428", "title": "React 18 如何支持 Strict Effects", "desc": "React 18 在严格模式下支持 Strict Effects，但需要对组件中的 effect 做一些调整。本文只涵盖了一些最常见的场景，但并不是详尽的列表。"}, {"id": "6885868639489589262", "title": "React v17.0 正式发布！", "desc": "微信搜索“印记中文”公众号，将为你带来最前沿的前端资讯。 今天，我们宣布 React 17 正式发布！在此之前，我们在 React 17 RC 的博文中已经介绍了 React 17 发布的意义以及包含的变化。此文是针对那篇文章的简单总结，如果你已阅读过那篇博文，此文可略过。 R…"}, {"id": "6997032386462482469", "title": "浅谈前端状态管理的进化", "desc": "如何重新思考前端状态设计？还有，为什么必须要凑够50字？是考虑对排版友好吗哈哈哈哈哈哈哈哈哈哈哈哈哈"}, {"id": "6997052050903138334", "title": "用 Next.js 做服务端渲染， React 农民工快速搬砖必学", "desc": "在新兴性前端农民工日益增加的时代，为了更好的搬砖，`next` 成了 `React` 项目在做服务端渲染不得不学的一个框架，前端为什么要做服务端渲染，一搜索引擎 `SEO` 优化，二 减少首屏渲染时间"}, {"id": "7002541621828911117", "title": "从源码理解setState（React15.6.0）", "desc": "React：setState执行机制，setState同步异步表现形式成因，setState连续设置对象参数只生效最后一次设置问题原因"}, {"id": "6864410873709592584", "title": "基于React+Koa实现一个h5页面可视化编辑器－Dooring | 🏆 技术专题第三期征文", "desc": "前段时间笔者一直忙于数据可视化方面的工作，比如如何实现拖拽式生成可视化大屏，如何定制可视化图表交互和数据导入方案等，这块需求在B端企业中应用非常大，所以非常有探索价值。 本篇文章并非和数据可视化相关，而是通过抽象技术底层，将其应用于H5页面可视化搭建上，通过技术的手段实现拖拽式…"}, {"id": "6981728346937753630", "title": "揭秘React异步获取数据进化历程", "desc": "本篇文章，以模拟获取热门文章为例，阐述 React 异步获取数据的进化历程(useEffect -> useReducer -> custom hook -> Suspense)"}, {"id": "6898235695245197325", "title": " Web 架构师如何做性能优化？", "desc": "当我们讨论「应用架构」的时候，可以理解为通过以下几个部分组合来构建网站。 Component model 组件模型。 Rendering and loading 渲染和加载。 Routing and transitions 路由和过渡。 Data/state managemen…"}, {"id": "6917919659480055815", "title": "前端学习笔记（十六） --React 学习-2", "desc": "今天（指两天）继续学习 React。 1. 事件 可以看到：①onclick成为了onClick。②函数不能用引号 在 React 中，通常是在元素初始化的时候添加监听器，而不是用 addEventListener，因为操作的基本都是 React 元素而不是 DOM 元素。 c…"}, {"id": "6844903681154875406", "title": "初识react(三)在 react中使用redux来实现简版计数器", "desc": "reducers->index.js是主入口文件，因为可能有好多个reducer。 是一个宏文件，保存计数器动作的类型，说白了就是加、减操作。贴代码看的更具体 由于我们只有一个计数器的reducer，所以默认导出就可以。当有多个reducer，会在这个文件进行合并，后面再讲。 …"}, {"id": "6945274797878149151", "title": "React生命周期详解", "desc": "本文是对于React生命周期的整理，内容是《React工程师修炼指南》中生命周期部分的笔记，只拥有自己的日常复习。 挂载阶段（Mounting）：这个阶段会从组件的初始化开始，一直到创建组件完成并且渲染到真实的Dom中。 更新阶段（Updating）：这个阶段从组件更新开始，一…"}, {"id": "6844903648217006088", "title": "关于React的高阶组件", "desc": "高阶组件是什么？乍一听，感觉是个很高级的概念，但是不要被这个名词吓到，说简单点 就是给已有的一个组件外面“包一层”。 我们知道 “高阶函数” 是传入函数作为参数， 高阶组件 其实就是传入 组件作为参数，并返回一个新组件。 高阶组件的作用是什么？项目开发当中，通常我们会把一些公用…"}, {"id": "6844903564951683085", "title": "前端每周清单第 51 期: React Context API 与模式变迁, Webpack 与 Web 优化, AI 界面生成", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 Chrome 即将标识所有的 HTTP …"}, {"id": "6844903830618898440", "title": "Function Component 与 Class Component 有何不同？", "desc": "有段时间，这个问题标准回答是 class 组件提供了访问更多特性的权限(比如state），随着 Hooks 发布，那就不是这样了。 或许，你听过他们中哪个性能更好这样的问题，性能取决于你的代码做了什么而不是你选择用 function 还是class 组件。实际上这两者之间的性能…"}, {"id": "6844903896389779469", "title": "受控组件与非受控组件", "desc": "在设计React 组件的时候，一定要注意数据来源，确保每一个数据都只有一个数据源。比如一个 state 不能既受 setState 的改变，又受 props 的变化而变化（比如componentWillReceiveProps 或是 getDerivedStateFromPro…"}, {"id": "6950098597333434404", "title": "记一次H5开发中翻的车", "desc": "在H5开发过程中使用antd-mobile的pullToRefresh组件上拉加载不生效的一趟奇怪翻车之旅"}, {"id": "6919715943216054285", "title": "create-react-app 中使用 antd@4.x", "desc": "现在我们安装 craco 并修改 package.json 里的 scripts 属性。 然后在项目根目录创建一个craco.config.js 用于修改默认配置。 按照 配置主题 的要求，自定义主题需要用到类似 less-loader 提供的 less 变量覆盖功能。我们可以…"}, {"id": "6921986041541263374", "title": "react的生命周期有哪些？有什么需要注意的地方?", "desc": "react的生命周期有哪些？有什么需要注意的地方?react的生命周期这里我们以reactv16.3为准先上一张图图片从图中我们可以看出来react生命周期分为三个部分mounting装载处理upda"}, {"id": "6844903577530400781", "title": "【React Native填坑之旅】撸一个简易聊天表情组件-ChatUI", "desc": "一、需求笔者是做直播类App的，近期项目准备用ReactNative对直播间进行改造，其中涉及一个基础的功能点就是在直播间中点击一个按钮，弹出输入框进行快速发言，这个输入框有自定义的表情。Google"}, {"id": "6844903558534397960", "title": "状态管理神器 moox 发布 1.0 beta版本", "desc": "moox 是基于 redux 开发的高性能状态管理机。 我是开源项目 YApi 作者，moox 是自己在使用 redux 过程中生成的灵感，麻烦各位 star 下github。 moox 封装了 redux 的 action, reducer 到一个文件。 model 结构如下…"}, {"id": "6844903606068445198", "title": "关于react中setState的深入理解", "desc": "在react中，通常通过state或props，来控制整个组件的状态。一旦state或props发生改变，整个组件会被重新渲染。在setState的理解上，可能会存在一些误区。 总结，并不是所有的组件状态都应该用setState进行管理。用setState进行管理会造成很多不需…"}, {"id": "6950250798312128548", "title": "React生命周期看这个就够了", "desc": "React生命周期看起来的勾子很多，各种状态的不同调用，实际上是指可以分为三类：初始化阶段，更新阶段和销毁阶段。下面我们就围绕着这三个阶段来详细讲解一下。生命周期完整流程图：第一个阶段：初始化阶段首先"}, {"id": "6844903687060455431", "title": "CSS魔法堂：改变单选框颜色就这么吹毛求疵！", "desc": "是否曾经被业务提出\"能改改这个单选框的颜色吧！让它和主题颜色搭配一下吧！\"，然后苦于原生不支持换颜色，最后被迫自己手撸一个凑合使用。若抛开input[type=radio]重新开发一个，发现要模拟选中、未选中、不可用等状态很繁琐，而涉及单选框组就更烦人了，其实我们可以通过lab…"}, {"id": "6980642653121544223", "title": "邂逅react", "desc": "简介 原生前端开发存在的问题 在传统的开发模式中，我们过多的去操作界面的细节，也就是使用DOM API或JQuery去操作界面中的元素 DOM操作会存在兼容性问题，而过多的兼容性代码比较冗余 DOM操"}, {"id": "6844903668353859591", "title": "每天阅读一个 npm 模块（5）- ee-first", "desc": "今天阅读的模块是 ee-first，通过它我们可以在监听一系列事件时，得知哪一个事件最先发生并进行相应的操作，当前包版本为 1.1.1，周下载量约为 430 万。 源码中对参数的校验主要是通过 Array.isArray() 判断参数是否为数组，若不是则通过抛出异常给出提示信息…"}, {"id": "6844903554046492686", "title": "前端每周清单第 48 期：Slack Webpack 构建优化，CSS 命名规范与用户追踪，Vue.js 单元测试", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 ECharts 4.0 发布: 2018…"}, {"id": "6844903569053712398", "title": "深入理解React源码 - 界面更新（DOM树）IX", "desc": "上次我们走完了从setState()到单个DOM更新的流程，并简单的分析了diffing算法。这个分析显然不够，因为diffing算法是为更为复杂的情况而设计。"}, {"id": "6919360441139331080", "title": "【翻译】React 服务端组件", "desc": "这回约稿又得到来自字节跳动数据平台的的“阳羡”关于React最新特性的文章翻译 。 本周，React 团队发布了零打包体积的 React 服务端组件[1]（Server Components），旨在用服务端驱动的心理模型实现现代 UX。这与组件的服务器端渲染（SSR）有很大的不…"}, {"id": "6844904121200295943", "title": "简单通透理解: 为什么不建议使用 index 作为 key 值", "desc": "今天探讨一个我们前端面试中经常会遇到的一个问题. 使用 index 作为 key 值有什么问题呢? 在我们日常开发中我们经常会和 key 值打交道. 但是我们扪心自问, 真的理解 key 吗? 我想大多数朋友可能会有些许犹豫. 初学者开发过程中, 可能很难理解 key 值存在的…"}, {"id": "6844903740487516167", "title": "React虚拟DOM的好处", "desc": "关于React提供的虚拟DOM的好处有一些困惑和误解需要阐明。 我们总是或多或少的听说过直接操作DOM是低效和缓慢的。然而，我们几乎没有可用的数据来支持这个观点。关于React虚拟DOM的令人愉悦的地方在于web开发过程中，它采用了更加高效的方式来更新view层。 我们把使用R…"}, {"id": "6844903602893520910", "title": "react、react-router、redux 也许是最佳小实践", "desc": "这是一个小小的有关react的小例子，希望通过一个小例子，可以让新手更好的了解到react、react-router4.0、redux的集中使用方法。 这是基于create-react-app来开发的，一种简单的快速创建 React web 项目的方式是使用 Create Re…"}, {"id": "6844903591304511496", "title": "如何应对线上的偶现问题", "desc": "作为最接近用户的前端，每每出现问题当然首当其冲，如果必现也就罢了，Debug 或者 抓包什么的反正各种手段，是自己的问题解决问题，不是自己的问题，也方便甩锅出去。但是如果这个项目恰好还复杂度高、链路长、关联方很多，并且这个问题还是 偶现 的 线上 问题，无异于在开动的火车上排查…"}, {"id": "6844903811929079822", "title": "[译] React 中的调度", "desc": "在现代的应用程序中，用户界面通常要同时处理多个任务。例如，一个搜索组件可能要在响应用户输入的同时自动补全结果，一个交互式仪表盘可能需要在从服务器加载数据并将分析数据发送到后端的同时更新图表。 所有这些并行的步骤都有可能导致交互界面响应缓慢甚至无响应，拉低用户的满意度，所以让我们…"}, {"id": "6844903569447976974", "title": "基于React版本16.2.0的源码解析（一）：组件实现（小白也可读）", "desc": "水平有限，如果有错误和疏忽的地方，还请指正。 总的说起来，无论多复杂的操作，都只是先进行虚拟DOM的JS计算，把这个组件对象计算好了以后，再一次性的通过Diff算法进行渲染或者更新，而不是每次都要直接操作真实的DOM。 在即时编译的时代，调用DOM的开销是很大的。而Virtua…"}, {"id": "6844903908335173645", "title": "React 之 Hook", "desc": "React 提供了一些方法来实现组件的选择性渲染或复用，如 Render Props、高阶组件 等，但这些方法组成的组件也带来了“嵌套地狱”的问题，复杂了组件的结构，增大了阅读理解代码的难度。React 提供了自定义 Hook 来解决上面提到的问题。 在一些复杂的组件中往往都包…"}, {"id": "6844903833848528909", "title": "React 源码解析之ReactElement", "desc": "核心就是通过 ?type 来识别这是个 ReactElement，后会看到很多类似的类型。 你可以..."}, {"id": "6977183426201944094", "title": "React Native相机介绍", "desc": "简介 对于React Native应用程序来说，与相机、QR扫描和文本识别一起工作是一个复杂的问题。这是一个需要在原生开发中操作相机的大量工作。如果你在React Native的跨平台移动开发中，在操"}, {"id": "6844903630160527367", "title": "《React Native跨平台移动应用开发》读后鬼扯 ", "desc": "这本书和别名写的一样，手把手教你学RN，和很多入门的书籍很相似，按照本书的章节一步一步来，肯定对RN的开发会有一定的了解。但是它也一本某些内容注定会落伍的书，因为RN还在不断的更新中，不排除会有破坏性的更新导致某些章节内容在RN最新版下是错误的，这个都是废话。 现实中，Andr…"}, {"id": "6844903696350838792", "title": "高级 Vue 组件模式 3", "desc": "如果熟悉 react 的读者这里可能马上就会想到 HOC（高阶组件） 的概念，而且这也是 react 中一个很常见的模式，该模式能够提高 react 组件的复用程度和灵活性。在 vue 中，我们是否也有一些手段或特性来提高组件的复用程度和灵活性呢？答案当然是有的，那就是 mix…"}, {"id": "6844904000593068046", "title": "React FiberRoot创建流程", "desc": "fiber 是当前整个 react 核心部分，其中包含了大量的计算机知识。如果阅读 react 的源码能让人感觉到无力。 每次版本更新，核心部分的函数总是要动那么一动。从 15, 到 16 到 16.8、16.9 到现在的 16.10，包括现在已经改版的 vue3.0 着实让人…"}, {"id": "6925373921013432334", "title": "缓存 React 事件监听器来提高性能", "desc": "在 js 里面有个不被重视的概念：对象和函数的引用，而这个却直接地影响了 React 的性能。如果你打算创建两个相同的函数，但是却又不相等。你可以试着：（译者注：无法在markdown中插入代码，请查看原文代码！） 对象也是这样的。 如果你学过其他语言，可能会熟悉指针。每次你创…"}, {"id": "6976972550429638669", "title": "带你了解react的diff算法", "desc": "概述 react中diff算法的出现极大地减少了了浏览器修改Dom的性能损耗，diff通过算法算出需要修改的最小节点，并把该节点进行替换，而不是连着父节点一起修改，操作数据结构是永远比操作dom来的快"}, {"id": "6844903903121637384", "title": "🍸 flooks: 可能是最简单的 React Hooks 状态管理器", "desc": "一个 React Hooks 状态管理器。也许是最简单的那个。^_^ 接收一个名称字符串和一个 model 对象，初始化 model。 model 对象需包含一个 state 对象和一个 actions 函数。 一个 React Hook。接收一个名称，返回初始化后的 mode…"}, {"id": "6944675904039682079", "title": "React ref & useRef 完全指南", "desc": "在这篇文章中，你将学习如何使用React.useRef()钩子来创建持久的可变值(也称为references或refs)，以及访问DOM元素。 useRef(initialValue)接受一个参数(引用的初始值)并返回一个引用(也称为ref)。引用只是一个具有特殊属性curre…"}, {"id": "6844903661605224455", "title": "你可能会用到的一个路由适配器 ", "desc": "你是不是在想，这需求俺根本不用koa、koa-router，原生的node模块就可以搞定。 需要我们自己去解析路径。 路径的解析和逻辑的书写耦合在一块。如果未来有更多更复杂的需求需要实现，那就gg了。 通过上面的处理，路径的解析倒是给koa-router处理了，但是整体的写法还…"}, {"id": "6861210679689674766", "title": "React学习笔记 --- 邂逅React", "desc": "一、React产生的原因官方对它的解释：用于构建用户界面的JavaScript库1.2使用原生开发产生的问题需要去处理兼容性的问题，这是十分麻烦的，而且过多兼容性代码会导致代码的冗余既要界面中的数据和"}, {"id": "6844903846917980168", "title": "React 30 秒速学：制作输入框、密码可见、滑块组件、下拉选择器、复选框组件", "desc": "输入框组件，使用回调函数将其值传递给父组件。 使用对象解构来设置<input>元素的某些属性的默认值。 使用适当的属性渲染一个<input>元素，并使用onChange事件中的callback函数将输入值传递给父元素。 使用“显示”按钮呈现密码输入字段。 使用React.use…"}, {"id": "6844904080557490189", "title": "hooks中实现class的setState的效果", "desc": "setState有回调函数，可以取得最新的state，而hooks的useState没有回调，不能立即取得最新值，这是由于useState的Capture value的特性造成的，网上解释挺多的，这里就不展开了。 实际上，到这里差不多就完了，要完全实现setState的功能即在…"}, {"id": "6844903848172060685", "title": "前端中台系统常见问题剖析与解决方案", "desc": "在2019年5月11日的那个周末，我在FDCon 2019大会上进行一次有关中台领域的分享，分享的标题是《业务实现标准化在中台领域的探索》，并在现场发布了RCRE这个库，并介绍了如何使用RCRE来解决中台业务开发所面临的各种问题。 会后看了一些同学的吐槽，可能是我分享方式的问题…"}, {"id": "6979126855739637790", "title": "React 中的 VirtualDOM - 实现一个精简版的VirtualDOM", "desc": "VirtualDOM是什么 Virtual DOM 对象就是DOM对象的JavaScript表现形式，就是使用JavaScript对象来描述DOM对象信息 上面代码转化为jsx代码 环境搭建 配置we"}, {"id": "6968347415271178254", "title": "实现简单react-redux", "desc": "实现react-redux 关键api Provider 组件 使组件层级中的 connect() 方法都能够获得 Redux store 原理是通过 react 中context这个api conn"}, {"id": "6844903588494311431", "title": "[译] 关于 SPA，你需要掌握的 4 层", "desc": "每个成功的项目都需要一个清晰的架构，这对于所有团队成员都是心照不宣的。 试想一下，作为团队的新人。技术负责人给你介绍了在项目进程中提出的新应用程序的架构。 我选择 FaceBook 开源的构建工具 Create React App，使用 Flow 来进行类型检查。简单起见，先忽…"}, {"id": "6919689074148114440", "title": "react源码(一)：实现createElement和render函数", "desc": "因为react依赖JSX语法，所以最开始需要对JSX的执行过程做大致介绍。至于JSX的相关基础知识，请参照JSX官网。 3.运行代码时，浏览器执行createElement，得到虚拟DOM，也就是react元素。其实react元素就是一个纯粹的JavaScript对象，描述了会…"}, {"id": "6844903914198794253", "title": "【译】使用 MongoDB，React，Node 和 Express（MERN）构建一个全栈应用", "desc": "当我想从前端开发人员进阶到全栈开发人员时，我很难找到一篇文章，包含了我所需要学习的全部概念。 例如对数据库的了解，熟悉一门后端语言，如何将前后端整合，这些对于我来说，还有些陌生。这就是促使我完成这篇文章的原因：解决这个问题，以帮助我自己和其他前端工程师。 本文末尾包含了整个项目…"}, {"id": "6903138697072508935", "title": "深入浅出 React -- JSX", "desc": "以小写字母开头的元素代表一个 HTML 内置组件，比如 &#x3C;div> 或者 &#x3C;span> 会生成相应的字符串 'div' 或者 'span' 传递给 React.createElement（作为参数）。大写字母开头的元素则对应着在 JavaScript 引入或…"}, {"id": "6844903813548113934", "title": "React Hooks 的用法", "desc": "最近在写React项目的时候遇到了一些state logic重用的问题，由于react里面对于state的定义是组件的生命周期只存在与组件自身内，如果要实现组件与组件之前的通信，传统的做法是通过将组件交互的那一部分state代码上升到共同的parent组件上去，在parent里…"}, {"id": "6844904203110858759", "title": "react+laravel从零开始构建chatbot（001一个简单的echo聊天机器人）", "desc": "笔者曾经开发过对话式机器人，包括软件及硬件。过去服务端用的是express，前端用的是vue。硬件用的是全志+乐鑫。现在，笔者重新开始写对话式机器人，前端用react（hooks），后端用laravel（PHP）。此次并不编写硬件方面的代码。 1、出于对成本的考虑。python…"}, {"id": "6844903862478831623", "title": "为什么要使用React Hooks?(5分钟实例)", "desc": "React Hooks在React v16.8正式稳定版中加入。 接下来是一个5分钟的例子将你带入hooks，让我们一起了解吧。 我们的例子是 一个按钮带有是否激活状态，当点击的时候切换颜色。 我们可以传递自定义的 onClick 事件 和 text属性。 但是，如果我们想要当…"}, {"id": "6903853128735850503", "title": "深入源码解析 React 中的调度算法", "desc": "在 React16 版本中重写了新的fiber架构，其中引入了新的调度算法，在以前的版本中 React 进行虚拟 DOM 的diff是不会进行中断的，会占用大量的执行时间，导致渲染被延后、页面卡顿，所以在新的fiber架构中，React 团队希望能够通过一个个小的异步任务来执行…"}, {"id": "6844904051713261582", "title": "【译】React条件渲染", "desc": "在 React 中使用条件渲染并不困难。在 JSX 中——用于 React 的语法扩展——您可以使用纯 JavaScript，其中包括 if else 语句、三元操作符、 switch case 语句等等。在条件渲染中，React 组件根据一个或多个条件决定将返回哪些 DOM …"}, {"id": "6844903695218376718", "title": "server-side-events(SSE)开发指南（Node）", "desc": "SSE是介于websocket、长短轮训之外的一种服务端推送的方式，用数据流的形式发送文本数据，可想象成网络视频的文字版。他的好处有 基于HTTP协议（WebSocket 是一个独立协议），无需对其做额外处理。还能享受HTTP2带来的优势 详细对比，这里我选择尝试将一个原本基于…"}, {"id": "6844903858607652872", "title": "Mobx, 化繁为简的艺术", "desc": "Using mobx to Saving Your Life... 在开发中大型应用的时候,与 React 配合使用的数据状态管理库除了有 Redux, 我们还有了新选择 -- Mobx, Mobx 是一款提供函数响应式编程的数据状态管理库, 相比于 Redux 的复杂而沉重,…"}, {"id": "6844903957827944462", "title": "Github OAuth第三方接入", "desc": "所谓认证就是如何证明你是你自己的方式，一般来说证明你是你自己的方式就是通过身份证；而互联网中的认证通常用用户名和密码来证明你是你自己。 所谓授权举个例子就是：你在安装手机应用的时候，应用会申请权限，你同意这个权限申请的过程就叫做授权。同理，在oauth中，被授权方会收获一定的权…"}, {"id": "6844903769898139661", "title": "React Fiber源码分析 第三篇（异步状态）", "desc": "到了这时候， 已经把新的回调替换正在进行的回调到回调列表。 2.优先级高于目前的回调任务， 将目前的回调任务从列表中移除， 并将callBackID设为传入的回调， 接下来的路线与上面一致，一直到animationTick函数，因为 postMessage比setTImeout…"}, {"id": "6844903657977167879", "title": "react-native添加购物车抛物线效果", "desc": "一个react-native组件，模仿添加购物车抛物线效果."}, {"id": "6844903701828616206", "title": "记一次基于react、cra2、typescript的pwa项目由开发到部署（二）", "desc": "在上一篇文章记一次基于react、cra2、typescript的pwa项目由开发到部署（一）中，我们了解到了create-react-app 给我们提供了哪些pwa支持，也了解到了有哪些不足。虽然create-react-app会帮我们自动生成一个service-worker…"}, {"id": "6844903678206279688", "title": "WEB实例：开发一个聊天室应用", "desc": "这篇文章介绍如何使用 Vue.js 以及 chatkit 快速的开发一个聊天室应用，chatkit 提供了一系列 api 用以更方便的开发聊天功能，源码地址. yarn add express cors pusher-chatkit-server 启动服务。 开发完成后，使用 …"}, {"id": "6844903811882958855", "title": "用React实现一个简易的markdown博客应用", "desc": "一个使用 React 编写的、基于 markdown 的博客应用。 Write Down 的文章仅支持使用 markdown 进行编写。其中 markdown 语法标准为 GFM，且额外支持几种功能，如 Emoji 表情、上下标文字等（具体可到 Demo 里的 full fea…"}, {"id": "6844903618819129351", "title": "从零开始React项目架构(三)", "desc": "好，让我们执行命令行执行npm run mock, 看到命令行输出app started at port 3000 说明启动成功了。我们可以发起请求来看看是不是我们home.js里面模拟数据。 好了，现在让我们在新的命令行里面执行npm start运行项目。在浏览器查看是否有l…"}, {"id": "6986626780874407967", "title": "初学react之redux", "desc": "一、状态管理一直是我们绕不开的一个点，之前出了一期vue的状态管理vuex的用法，这期出一个react的状态管理redux。首先需要了解两个点，第一个是actions，第二个是reducers, ac"}, {"id": "6844903635034308622", "title": "想要一份senior工作，务必要读 React 源代码吗？", "desc": "这段面试了一些。很多公司都会甩这个问题给你：读过 React 的源代码吗？ 答曰：没读过。瞬间感到自己的自信心掉了一块。网上也不乏各种分析源代码的文章和精读，只是我还是没有那个勇气和兴趣去读如此成熟的一个库的源代码，甚至想读也不知从何读起。 于是跑上 Reddit 发了一贴，想…"}, {"id": "6844903608035573774", "title": "深入浅出contenteditable富文本编辑器", "desc": "富文本编辑器一直是前端领域的一个天坑，但若不是深入接触编辑器开发的工程师，却不一定清楚富文本编辑器到底坑在哪里，作为有幸和编辑器打了一年交道的前端，今天来聊聊Web富文本编辑器的那些事。 这是使用最久的传统富文本编辑器实现方式，这种实现方式的优势很明显，contentedita…"}, {"id": "6844903665883430920", "title": "蚂蚁金服移动端可视化解决方案 F2 3.2 正式发布", "desc": "F2，一个专注于移动，开箱即用的可视化解决方案，完美支持 H5 环境同时兼容多种环境（node, 小程序，weex）。完备的图形语法理论，满足你的各种可视化需求。专业的移动设计指引为你带来最佳的移动端图表体验。 在“准确、有效、清晰、美”的可视化原则的基础之上，结合移动设备特性…"}, {"id": "6844903863267360781", "title": "React + GraphQL + apollo-client技术栈简要介绍(基于官方文档v2.5)", "desc": "欢迎进入我的博客阅览此文章。 你可以使用create-react-app快速创建一个React应用，不熟悉create-react-app的小伙伴可以先行了解。 也可以在codesandbox上在线搭建React项目。方便快捷！ 你可以在github上fork graphpac…"}, {"id": "6844903742588846087", "title": "如何用 React 做服务端渲染", "desc": "服务端渲染的一些优缺点这里就不说了，相信大家都已经非常清楚地知道了，本文意在讲述如何将一个简单的浏览器端渲染的 React SPA 循序渐进地升级为支持服务端渲染。 在搭建服务端渲染应用之前我们现在搭建一个基于浏览器端渲染的单页应用，该单页应用包含简单的路由功能。 会很明显的发…"}, {"id": "6971681156932567070", "title": "umi使用proxy代理解决跨域问题", "desc": "什么是跨域 客户端在访问与自己域名不同的服务端时，就会造成跨域。 比如： 用node起了一个http://localhost:8080 的服务； 那么在这个服务器下访问的网页也就是默认在 http:/"}, {"id": "6844903805826367502", "title": "从零开始学习 React 高阶组件", "desc": "React 高阶组件也叫做 React HOC(High Order Component), 它是react中的高级技术, 用来重用组件逻辑。 但高阶组件本身并不是React API。它只是一种模式，这种模式是由react自身的组合性质必然产生的。 那么在学习高阶组件之前有一个…"}, {"id": "6844904132654923789", "title": "记录一下react脚手架+redux+antd v4 实现登录鉴权，多级路由的学习过程", "desc": "前两天学习了下React,特记录下学习过程，react新手有哪里可以优化的往大佬留言指点，小弟万分感谢！项目初始化1、react脚手架删除多于文件src留下App.js以及index.js，并把对应引"}, {"id": "6844903597524664334", "title": "深入React高阶组件(HOC)", "desc": "HOC(全称Higher-order component)是一种React的进阶使用方法，主要还是为了便于组件的复用。HOC就是一个方法，获取一个组件，返回一个更高级的组件。 在React开发过程中，发现有很多情况下，组件需要被\"增强\"，比如说给组件添加或者修改一些特定的pro…"}, {"id": "6844903695281307662", "title": "浅说虚拟列表的实现原理", "desc": "本文以 react-virtual-list 组件为基础进行分析了虚拟列表的一种实现方案"}, {"id": "6950997676838092831", "title": "umi学习笔记", "desc": "umi中dva的使用首先我们在使用react的时候在早些时候都会使用redux来作为全局状态管理，并且我们都知道redux的学习难度是相对vue中的vuex来说是高于后者的，并且个人感觉使用体验也不如"}, {"id": "6844903546115063821", "title": "react异步加载组件实现解析", "desc": "react+webpack对于react开发，相信已经是一个大众套餐了，至于其他的parcel或者rollup或者其他一些构建框架我也没仔细用过，也不太熟，听说parcel上github短时间内已经上万颗星了，很流弊的样纸，不过这都不是我们本文重点，呵呵。本文重点是模块的异步加…"}, {"id": "6984400815721021454", "title": "[React源码系列3]React组件初渲染原理", "desc": "一、组件 二、React组件 2.1 函数组件 2.2 类组件 三、组件的初渲染原理 3.1 函数组件 3.2 类组件 3.3 组件初渲染原理 3.4 函数组件的挂载 3.5 类组件的挂载 3.5.1"}, {"id": "6960838224797237284", "title": "10个react安全最佳实践", "desc": "10个react安全最佳实践 在找保护React应用程序的最佳方法？那你找对地方了！ 我创建了这个React安全最佳实践清单，用以帮助你和你的团队发现并解决React应用中的安全问题。我展示如何自动测"}, {"id": "6844903517971283975", "title": "vitual-dom原理与简单实现", "desc": "目前广为人知的React和Vue都采用了virtual-dom，Virtual DOM凭借其高效的diff算法，让我们不再关心性能问题，可以随心所欲的修改数据状态。在实际开发中，我们并不需要关心Virtual DOM是如何实现的，但是理解Virtual DOM的实现原理确实有必…"}, {"id": "6890466173314564104", "title": "微前端项目实战整理（single-spa+react+iframe）（二）", "desc": "以上就是一个最简单的single-spa子应用的打包入口文件，并没有增加什么功能，只是最简单的给react单页应用加上了single-spa的生命周期，因此不管是新开发的react应用还是老的react代码改为single-spa子应用，我们都只需要把webpack打包的入口文…"}, {"id": "6844903758439120903", "title": "使用immutable优化React", "desc": "React在减少重复渲染方面确实是有一套独特的处理办法，那就是虚拟DOM，但显然在首次渲染的时候React绝无可能超越原生的速度，或者一定能将其它的框架比下去。尤其是在优化前的React，每次数据变动都会执行render，大大影响了性能，特别是在移动端。 在初始化渲染时，我们需…"}, {"id": "6936836700003598366", "title": "React 核心概念", "desc": "上面这个例子将会在浏览器中展示 \"Hello, ling!\" 。 React 并不强制使用 JSX，但是大部分人觉得将 JSX 和 UI 放在一起时，能提升视觉效果，并且可以使 React 提示更多的错误和警告。 元素是构成 React 应用的最小砖块，与浏览器的 DOM 元素…"}, {"id": "6963559556366467102", "title": "为什么要用Hooks？", "desc": "在 React 引入 Hooks 之前，我们要实现组件功能复用，常用技巧无非 HOC 和 Render Props 。下面就这两个技巧简单说一下，毕竟我们的重点是 Hooks 高阶组件（HOC） 高阶"}, {"id": "6956508977882464264", "title": "Recoil入门", "desc": "Recoil作为在《React Europe 2020 Conference》上，Facebook内部释出的状态管理库，我想很多人对此都是充满兴趣的，所以花了几天时间整理了一些资料，做个入门分享。"}, {"id": "6935243279575302151", "title": "React 虚拟化长列表", "desc": "今天在整一个项目的时候，遇到一个长列表展示的优化问题。当时想的是进行数据分页，但是需要去和后台进行沟通。我的原则是尽量不麻烦别人，因此我搜索了一些方案，最后在react官方上获取到了解决方法——虚拟化"}, {"id": "6984674920357691405", "title": "React之路-State & 生命周期", "desc": "改装之前的计时器案例 我们希望只编写一次代码，便可以让 Clock 组件自我更新,所以需要使用state, state 是私有,并且完全受控于当前组件 使用state实现组件的自我更新 修改函数组件成"}, {"id": "6844903718098305037", "title": "React进阶小册", "desc": "通过写一篇react小册来查缺补漏。 使用ReactDOM.render,第一个参数传入JSX语法糖，第二个参数传入container,能简单实现在document上创建h1 dom节点。 所以ReactDOM.render的时候，看似引入的React没有用，但必须引入因为用到…"}, {"id": "6926397937425596423", "title": "如何在ReactHooks获取数据？[译文]", "desc": "在本文中，我想要向你介绍怎样通过state和effecthooks在React的Hooks用法中获取数据。我们将在科技界使用广为人知的Hacker News API来获取热门文章。你也可以使用你自己的方法来获取hooks data，你可以在你的应用中复用或者发布到npm的库中作…"}, {"id": "6844904003432611854", "title": "从 UX 与 DX 来谈一谈 React  SWR", "desc": "自从 9102 年初 react 推出了 Hook 之后，我就开始在私人项目中先行了。不得不说的是，react Hook 的确足够“跨时代”。大量的文章研读以及伴随着项目中组件的改造，对Hook 的优点，缺点，以及本身的机制也有一定的了解。 如果你是 Hook 初学者，建议先阅…"}, {"id": "6844903869894524942", "title": "[三元学React]使用react-transition-group开发React动画", "desc": "首先利用CSSTransition进行单个元素的动画开发。 今天解锁了react使用动画的新姿势，记录一下，希望对大家有帮助。"}, {"id": "6994815342014889991", "title": "02 - 对比react15 、16，一个组件的一生该如何度过（上）？", "desc": "以 React 的基本原理为引子，对 React 15、React 16 两个版本的一生（生命周期）该如何度过进行探讨。通过比对和总结，搞清楚一个又一个的“Why”，来了解更改组件生命周期背后的故事。"}, {"id": "6898512934100533261", "title": "React全家桶之React基础(推荐新手必看)", "desc": "它被称为JSX,是一个JavaScript的语法扩展.我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。 React 认为渲染逻辑本质上与其他 …"}, {"id": "6898514785856389127", "title": "React全家桶之组件化设计、高阶组件、高阶组件应用、Context、设计自己的组件", "desc": "修改 src/App.js，引入 antd 的按钮组件。 修改 src/App.css，在文件顶部引入 antd/dist/antd.css。 此时我们需要使用react-app-rewired(一个对 create-react-app 进行自定义配置的社区解决方案).引入 r…"}, {"id": "6956558536273100831", "title": "React-Sortable-HOC", "desc": "安装 使用 效果 踩坑 已经排过序的图片无法拖动，未排序的图片拖动报错 页面一加载就报错，无法拖动图片 批量上传图片多次调用接口导致请求canceled 用到的部分API SortableContai"}, {"id": "6844904104469217287", "title": "React Fiber架构", "desc": "React Fiber是对React核心算法的重新实现。这是一个正在进行中的项目。到目前为止（指2016年），React团队已经对此进行了为期两年的研究和调研。 React Fiber的目标是增加React对动画，布局和手势等领域的是适配性（suitability）。React…"}, {"id": "6844903785781788680", "title": "React Hooks入门: 基础", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励，希望大家多多关注呀！React 16.8中新增了Hooks特性，并且在React官方文档中新增加了Hooks模块介绍新特性，可见React对Hooks…"}, {"id": "6922439744378896397", "title": "写给自己看的React源码解析（四）：React事件系统的实现原理", "desc": "React有着独特的事件机制-合成事件，React的初学者肯定碰到过这种问题，使用event.stopPropagation();，却还是无法禁止当前组件的事件冒泡，这就是React的事件机制的原因，它并不与DOM事件相同。 DOM事件流属于比较基础的知识点，本文不会详细的再叙…"}, {"id": "6952822890454581262", "title": "虚拟DOM和Diff算法", "desc": "1. React中的虚拟DOM 我们知道虚拟DOM在数据驱动视图更新中有着至关重要的作用，但是我们如果直接理解虚拟DOM可能有有点费劲，我们现在来思考一个问题，来逐步思考虚拟DOM到底怎么来的又解决了"}, {"id": "6844903693570015245", "title": "前端状态管理与有限状态机", "desc": "当下前端流行的框架，都是用状态来描述界面(state => view),可以说前端开发实际上就是在维护各种状态(state)，这已经成为目前前端开发的共识。 理想情况下，ViewModel 是纯函数，给定相同的 Model，产出相同的 View。 state => view 很…"}, {"id": "6953532183826923551", "title": "React-router-dom 路由", "desc": "路由单页面应用（SPA）的优点？ 整个应用只有一个完整的页面，多组件 点击页面中的链接不会刷新页面，只会页面局部刷新 数据通过Ajax请求，在页面异步展示 路由的理解 一个路由就是一个映射关系（key"}, {"id": "6844903842547499015", "title": "react hook——你可能不是“我”所认识的useEffect", "desc": "官网已经介绍过，这里再啰嗦一次。useEffect是一个用来执行副作用hook，第一个参数传入一个函数，每一次render之后执行副作用和清除上一次副作用，该函数的返回值就是清除函数。第二个参数是一个数组，传入内部的执行副作用函数需要的依赖，当这几个依赖有一个要更新，effec…"}, {"id": "6913087055169847309", "title": "一文掌握 react hook 使用和渲染优化（下篇）", "desc": "如果你对react hook或者或者react调试不熟悉建议先看上篇。 除了准备上面代码文件外，还需要安装chrome插件 React Developer Tools （react开发者工具，这里提供的连接需要翻墙，如果不能翻墙的童鞋可以自行百度下载）。 上面的意思差不多可以理…"}, {"id": "6844903602746556429", "title": "使用web-component搭建企业级组件库", "desc": "前端目前比较主流的框架有react，vuejs，angular等。 比如ant-design是基于react搭建的UI组件库，而elementUI则是基于vuejs搭建的组件库。 虽然目前社区有相关工具，提供框架之间的转化服务，比如讲vuejs组件转化为react组件。 但是毕…"}, {"id": "6914526886102040589", "title": "GeeTest in React", "desc": "极验「行为验证」是一项可以帮助你的网站与APP识别与拦截机器程序批量自动化操作的SaaS应用。它是由极验开发的新一代人机验证产品，它不基于传统“问题-答案”的检测模式，而是通过利用深度学习对验证过程中产生的行为数据进行高维分析，发现人机行为模式与行为特征的差异，更加精准地区分人…"}, {"id": "6844903834200866829", "title": "探索 React 组件之间的生命周期", "desc": "React 组件的生命周期，相信大家都非常熟悉了，无非那么几个函数，官方文档已经写得非常清楚了。（那还有什么好说的？浪费感情！合上！） 一般我们所讨论的，都是单个组件的生命周期。如果是多个组件之间呢？比如父子组件？兄弟组件？各个周期又是什么样的？异步路由的情况呢？前阵子新出的 …"}, {"id": "6844904030217437192", "title": "2019,我的React技术之路", "desc": "react hooks出了有一段时间，hooks的各种用法也渐渐被大家所了解，在体验过hooks写法之后，对于react，又有了新的感受，那就是大道至简，react又一次从写法层面上革新了我们对于面向UI编程的理解。 于是我选择在保证业务稳定的情况下，将后台项目中用到的各个组件…"}, {"id": "6914303308479856648", "title": "react 基于 flv.js 封装简单的播放器（二）", "desc": "没想到今天使用一个小时的时间并没有做多少。主要是把声音和全屏给弄上了。 这里我使用的是 antd 中的，并没有自己封装。下面看看对应的 css 代码： 接下来是全屏，目前只支持 chrome ，由于我全屏的方案要改，因为我发现这种全屏以后自定义的样式也发生了改变，所以我不使用系…"}, {"id": "6844903635449544711", "title": "基于React搭建一个简易版豆瓣", "desc": "之前写过一篇基于vue搭建一个简易版豆瓣的文章，近来接触到React，于是将该项目用React重写了一遍，用于体验两者在实际开发中的异同。本文会简述项目情况及构建项目过程中遇到的一些零散的问题，以作记录，见识浅薄，若有错漏处还望指正。 项目简介：基于React搭建简易版豆瓣，实…"}, {"id": "6935052064938524679", "title": "制作一个命令式的 React 弹出层组件 (适用 React Native)", "desc": "对于弹出层组件，React Portals 无疑是提供了一种很好的解决方案(Protal相关也可以看这里)。 如果没有 Portal的话弹出层要怎么处理呢，比如React Native环境中？ 我们来解决这个问题。 Modal的本质就是一个在组件树上拥有更高显示层级的view，…"}, {"id": "6989815706518814734", "title": "React基础知识（2）——第一个组件", "desc": "本节主要解释什么是组件，以及怎样写组件。这是 React 和 Ant Design 的使用基础，只有学会了这些内容，才能理解后面的知识。如果你对 React 已经有所了解，可以跳过这一节。 组件的概念"}, {"id": "6844903922834866190", "title": "译：react-grid-layout", "desc": "当使用layouts，提供越多的断点越好，特别是最大的断点。如果提供了最大的断点，栅格布局将尝试有显示有这个布局。 <ResponsiveReactGridLayout> 和<ReactGridLayout>都是通过width在拖拽事件中计算位置。可以使用高阶组件WidthPr…"}, {"id": "6901274923763761166", "title": "<react-router-dom>React路由四个常用api", "desc": "useHistoryuseLocationuseParamsuseRouteMatchuseHistory可以用来页面跳转useLocation获得当前路径信息useParams获得当前参数useRo"}, {"id": "6844903805432102919", "title": "你不知道的 requestIdleCallback", "desc": "本文副标题是 Request Schedule 源码解析一。在本章中会介绍 requestIdleCallback 的用法以及其缺陷, 接着对 React 团队对该 api 的 hack 部分的源码进行剖析。在下一篇中会结合优先级对 React 的调度算法进行宏观的解释。 Re…"}, {"id": "6844903670924967949", "title": "electron写一个简单host切换工具", "desc": "作为一个开发人员，工作中需要经常进行host切换，快速在不同环境中进行开发测试，阿里内部有个iHost，用起来简单顺手，可惜并没有开放，离开后没有找到一款更好的用的host切换工具，索性自己写一个。项目已经开源 代码地址 , 欢迎吐槽。 因为是桌面应用，作为一个前端开发，目前的…"}, {"id": "6844903605489631245", "title": "一个基于 React 开发的PC端音乐App", "desc": "🎵一个基于 React 开发的PC端音乐App。 同时支持 Mac 与 Windows 系统。下载地址 项目使用 electron 作为外壳，webpack 作为打包工具，核心技术包括 React + Redux + React-router v4 + antd，简单实现了一…"}, {"id": "6955280918407807006", "title": "初识 useEffect Hook", "desc": "从一个 bug 讲起 之前在一次需求中，需要在组件挂载时监听事件、处理对应逻辑，于是自然的想到这样写： 大家能看出上面的代码哪里有问题吗？🤔 问题在于 handleLoginSuccess 方法中获取"}, {"id": "6844903549864787975", "title": "webpack v3 结合 react-router v4 做 dynamic import — 按需加载（懒加载)", "desc": "dynamic import不知道为什么有很多叫法，什么按需加载，懒加载，Code Splitting，代码分页等。 总之，就是在SPA，把JS代码分成N个页面份数的文件，不在用户刚进来就全部引入，而是等用户跳转路由的时候，再加载对应的JS文件。 这样做的好处就是加速首屏显示速…"}, {"id": "6869920189916381198", "title": "React源码解析-React.Children", "desc": "前言：本文章是基于16.13.1的react版本。相较于之前版本，去除了pool的概念，并且代码上在函数的调用方面也做了精简和优化，使我们理解源码上更方便。React.Children是顶层API之一"}, {"id": "6943575812746510366", "title": "React hooks基本使用", "desc": "hooks 可能把 class 组件拆分成小组件。 useEffect(fn) 接受一个函数，fn 再组件渲染到屏幕之后才会执行。如果有返回值，则返回一个清除副作用的函数，否则不返回 一般是不需要同步执行的，不会阻塞浏览器的渲染。如果需要同步执行 可以使用 useLayoutE…"}, {"id": "6844903651014606862", "title": "[译] 用 React 和 Vue 创建了两个完全相同的应用后，发现了这些差异", "desc": "在工作中使用 Vue 一段时间后，对它的工作原理有了相当深入的了解。然而，我很想知道篱笆另一边的草地是什么样 - React。 我已经阅读了 React 文档，也观看了一些教程视频，虽然它们都很棒，但我真正想知道的是 React 与 Vue 到底有什么不同。这里的「不同」不是指…"}, {"id": "6844903702562603016", "title": "在 React 和 Vue 中尝鲜 Hooks", "desc": " "}, {"id": "6908589971074973709", "title": "react fiber概念及原理", "desc": "最近在读react v16的源码，准备写一些东西记录一下成果，仅供参考。 距离react v16版本发布已经有一段时间了，很多人对fiber已经有了初步的认识，对于fiber解决的问题也大致了解。此文主要是解释fiber是什么东西以及fiber的工作原理，并不涉及fiber解决…"}, {"id": "6854573215008686087", "title": "Suspense，一种容易被忽略的性能优化技术", "desc": "Suspense技术起初是为了加载异步组件，但逐渐应用到了所有异步过程中。其中，异步请求是Suspense最主要的使用场景。在不远的将来(React17/Vue3.1)，基于Suspense的开发模式将成为主流，同时用户体验也会随着Suspense的使用得到优化。 Suspen…"}, {"id": "6932391125789622279", "title": "useState和useReducer源码浅析", "desc": "以下原理浅析的React版本为17.0.1，使用ReactDOM.render创建的同步应用，不含优先级相关。 函数组件会调用renderWithHooks函数，这个函数主要会标记当前渲染的currentlyRenderingFiber节点，并判断该使用哪一个HooksDisp…"}, {"id": "6957223727658434568", "title": "女友 React 30 问 -- JSX 是什么？", "desc": "引子 今天有个同学问我，我们在写 React 项目的时候，文件后缀为什么是 .jsx？ 我愣了一下，不是 .jsx，也可以是 .tsx 啊，你问这个是啥意思嘞。他接着说，我们写的这些都是 js 文件，"}, {"id": "6844904136694054926", "title": "React实现一个添加商品规格SKU，生成合并表格的功能", "desc": "一个大概的商品规格SKU添加的功能大概就差不多了，后面的话还有对表单数据进行处理，大家可以自行研究。"}, {"id": "6991810222520008717", "title": "React 中级三部曲 ｜ 8月更文挑战", "desc": "第四节： React组件通讯 1， React组件通讯介绍 组件是独立且封闭的单元，默认情况下，只能使用组件自己的数据，一个完整的功能拆分成多个组件，而在这个过程中，多个组件之间不可避免的要共享数据，"}, {"id": "6844903760028762125", "title": "React 异步组件", "desc": "之前写过一篇 Vue 异步组件的文章，最近在做一个简单项目的时候又想用到 React 异步组件，所以简单地了解了一下使用方法，这里做下笔记。 传统的 React 异步组件基本都靠自己实现，自己写一个专门的 React 组件加载函数作为异步组件的实现工具，通过 import() …"}, {"id": "6844903605984559118", "title": "[译] 为什么需要在 React 类组件中为事件处理程序绑定 this", "desc": "背景图源来自 Kaley Dykstra 并发布在 Unsplash 上，源代码图像生成自 carbon.now.sh。 在使用 React 时，您难免遇到受控组件和事件处理程序。在自定义组件的构造函数中，我们需要使用 .bind() 来将方法绑定到组件实例上面。 在这篇文章中…"}, {"id": "6994458773448294436", "title": "2021.08.09 | create-react-app", "desc": "`create-react-app` 是官方支持的一个React脚手架，他可以帮助开发者快速构建一个React程序。 脚手架的作用是帮我们生成一个通用的目录结构，并且将我们所需的工程环境配置好。"}, {"id": "6844903769126207501", "title": "React16.7升级Web音乐App", "desc": "只要是做开发的都要保持一颗积极学习的心，不管是前端领域还是后端领域，不过前端学习新技术的间隔时间要比后端长。作为Java出身的我深有体会o(╯□╰)o 时至今日，create-react-app更新到了2.x的版本了，主要是升级了它所依赖的许多工具，这些工具已经发布了包含新特性…"}, {"id": "6942741238114156574", "title": "Blitz.js 全栈开发 (1.1)：基于 Next.js 的下一代 React 全栈框架", "desc": "苦 JS 生态久已。在 2020 年后，一直徘徊于该为自己构建怎样的技术栈，迟迟没有太多落地成果——库太多了，一个小场景就能有很多个解决方案；方向也太多了，哪怕大前端三个字，现今都能拆分为很多的细分领域。直到遇到了 Rome，看到社区已经开始尝试整合重构 Node 生态的前端工…"}, {"id": "6844903506676203534", "title": "使用合适的设计模式一步步优化前端代码", "desc": "现在业务迭代，需要我们在page.init()初始化代码块的最后增加一些功能，同时不影响原先的功能。按照正常的写法，我们可能会像下面这样写： 这样写是可以解决我们的需求，但是这样的代码是具有侵略性的，我们不得不在原先的代码的合适位置新增我们需要的代码。但我们思考一个问题，如果我…"}, {"id": "6844903768975212551", "title": "基于 React & TypeScript & Webpack 的微前端应用模板", "desc": "在 Web 开发导论/微前端与大前端一文中，笔者简述了微服务与微前端的设计理念以及微前端的潜在可行方案。微服务与微前端，都是希望将某个单一的单体应用，转化为多个可以独立运行、独立开发、独立部署、独立维护的服务或者应用的聚合，从而满足业务快速变化及分布式多团队并行开发的需求。如康…"}, {"id": "6881542811464761358", "title": "基于自然流布局的H5编辑器brick design 介绍篇", "desc": "brickdesign的一些疑问brickdesign是什么？brickdesign是一款开源的，基于自然流布局设计，支持多维组件拖拽嵌套组合的H5编辑器。组件就像高楼大厦中的每一块砖，它建设复杂炫酷"}, {"id": "6844904018532270094", "title": "一款设计到极致的 React 表单组件", "desc": "经常开发中后台项目的同学肯定都经历过大型表单的折磨，几十个甚至上百个表单元素足以让我们欲仙欲死，这可真是个体力活。特别当你选择 React 作为技术框架的情况下，这满屏幕的 onChange 简直是一个噩梦。 当然我们还是有追求的，肯定不会屈服于此。社区内有很多的解决方案，比如…"}, {"id": "6904151074622734344", "title": "React TypeScript 清单 – 如何给 Hooks 设置类型 🚜", "desc": "TypeScript 可以对代码进行静态类型检查，以使其更加健壮和易于理解。 让我们开始吧. useState hook 允许你在 React 中管理状态。 相当于 Class 组件中的this.state 要在useState hook 上设置类型，你需要将状态类型传递给&#…"}, {"id": "6844903509343600653", "title": "Preact：一个备胎的自我修养", "desc": "前一段时间由于React Licence的问题，团队内部积极的探索React的替代方案，同时考虑到之后可能开展的移动端业务，团队目标是希望能够找到一个迁移成本低，体量小的替代产品。经过多方探索，Preact进入了我们的视野。从接触到Preact开始，一路学习下来折损了许多头发，…"}, {"id": "6844903848201584647", "title": "WebSockets实战：在 Node 和 React 之间进行实时通信", "desc": "Web 为了支持客户端和服务器之间的全双工（或双向）通信已经走过了很长的路。这是 WebSocket 协议的主要目的：通过单个 TCP 套接字连接在客户端和服务器之间提供持久的实时通信。 WebSocket 协议只有两个议程：1）打开握手，2）帮助数据传输。一旦服务器和客户端握…"}, {"id": "6947972635124842503", "title": "React SSR详解", "desc": "认识SSR1.为什么需要SSR呢?单页面富应用的局限:之前我们开发的应用程序，如果右键直接查看源代码，可以看到上面几乎没有什么内容但是我们为什么可以看到大量的内容呢？因为当我们请求下来静态资源之会执行"}, {"id": "6844904045560217608", "title": "React Hooks 实现一个搜索功能", "desc": "React Hook useEffect has a missing dependency: 'featchList'. Either include it or remove the dependency array 我们来看这句话 ==如果你指定了一个 依赖列表 作为 us…"}, {"id": "6844903703921573901", "title": "37行代码构建无状态组件通信工具-让恼人的Vuex和Redux滚蛋吧！", "desc": "很多前端开发者认为，Vuex和Redux是用来解决组件间状态通信问题的，所以大部分人仅仅是用于达到状态共享的目的。但是通常Redux是用于解决工程性问题的，用于分离业务与视图，让结构更加清晰，从而达到易于维护的目的。也就是 Flux(这里我之前翻译的Flux深度解读)架构所解决…"}, {"id": "6844903589601607693", "title": "react-router 源代码学习笔记", "desc": "使用 react-router 也有一段时间了，现在基于官方文档以及源码做一下总结。 文章略长 ^_^ 如果有不正确的地方，请务必指正。 Router 是一个公共的接口组件，有一个必须的参数 history。通过 history 库中的不同的 createXXXHistory …"}, {"id": "6844903875657334792", "title": "React系列之高阶组件", "desc": "背景高阶组件的概念意思是:高阶组件是一个函数，它接受一个组件并返回一个新组件利用函数带你理解高阶组件举个例子🌰:假设我们现在需要实现一个登陆注册功能，为了方便，我们把用户（user）存在localSt"}, {"id": "6921725735300235272", "title": "react-router学习笔记", "desc": "路由这个概念最早出现在后端，通过⽤户请求的url导航到具体的html⻚⾯。 现在的前端路由不同 于传统路由，它不需要服务器解析，⽽是可以通过hash函数或者history API来实现。 这整个过程都是在同 ⼀个⻚⾯中实现的，不涉及⻚⾯间的跳转，这也就是常说的单⻚应⽤（spa）…"}, {"id": "6844903730693799950", "title": "开发 React Native APP —— 从改造官方Demo开始（1）", "desc": "RN的生态圈很火爆，但是很难找到一个开箱即用的 React Native APP Demo。目前存在的 Demo 要么过于简单，比如 React Native 官网提供的 Demo AwesomeProject ，这个 Demo 只提供了最简功能，对于路由（导航组件）、状态管理…"}, {"id": "6985329921782448135", "title": "React的StateHook的使用与说明", "desc": "引用官方示例 在没有使用 state 的时候为“无状态组件”，引入后称为“函数组件” 在函数式组件中使用 state 等价的 class 示例 调用 useState 方法的时候做了什么？： 示例中 "}, {"id": "6844903597000359943", "title": "一名2018年应届生的美团前端校招面试之旅", "desc": "首先介绍一下本文的主角：一名18年应届生，普通二本，学习能力一般，技术能力更是一般，前端小白，但是在努力学习中。 从17年秋招开始我便向美团投了简历，也参加了在线笔试，但是输的很惨淡，笔试没过后，来继续在武汉找了家小公司实习。春招开启之际，我尝试过投了斗鱼（没有获得面试机会），…"}, {"id": "6844903872033456135", "title": "用react hooks构建一个todoList", "desc": "构建一个简单的todoList用react和react hooks.这是一个很好的教程对于初学者和中级开发人员. 当我创建一个新的react 组件,我喜欢首先编写的HTML和CSS。 粘贴下面的CSS到 App.css里面，然后你也可以修改它，修改成你喜欢的样子。 现在,我们有…"}, {"id": "6844903604843708424", "title": "深入浅出理解Redux", "desc": "它认为：Web应用是一个状态机，视图与状态一一对应。从架构层面来说，通常希望UI跟数据、逻辑分离，直观体现就是：UI = render(state) 现在的Web应用涉及大量数据交互、异步操作等，无疑都在增加前端的复杂性，需要维护的state也越来越多。而Redux就是试图让每…"}, {"id": "6896361994167828494", "title": "JSX 是如何一步步变成DOM元素的？", "desc": " 在React日常开发中,我们习惯了用JSX描述React组件的内容。关于JSX本身的语法，大家都不会陌生。我来创建一个简单的react组件，用来唤醒大家脑海中的知识。看到这段代码，大家想想JSX的本"}, {"id": "6844903592348893197", "title": "从零开始：用REACT写一个格斗游戏(一)", "desc": "最近为了熟悉Bone框架，就准备用react写一个简单的格斗游戏练练手。目前用2天时间完成了游戏的前期准备工作。可以控制人物前进，后退，攻击，跳跃，发动技能等操作，但是总觉得操作起来有一点不流畅。接下来还准备完善人物的更多动作与连招，并且加入2个人物互相攻击后的扣血，僵直等，还…"}, {"id": "6844903703510515719", "title": "10分钟了解react引入的hooks", "desc": "“大家好，我是谷阿莫，今天要将的是一个...”，哈哈哈，看到这个题我就想到这个开头。最近react 官方在 2018 ReactConf 大会上宣布 React v16.7.0-alpha(内测) 将引入 Hooks。所以我们有必要了解 Hooks，以及由此引发的疑问。 当然，…"}, {"id": "6844903728990912526", "title": "讲道理，React中，我们为什么需要写 super(props)？", "desc": "这篇文章源自 Dan 的博客。 现在的热点是 hooks，所以 Dan 决定写一篇关于 class 组件的文章 😂。 文章中描述的问题，应该不会影响你写代码；不过如果你想深入研究 React 是怎么工作的，这篇文章可能会对你有帮助。 2015 年初的时候，React 0.13…"}, {"id": "6844903619381182472", "title": "React Native 组件生命周期 ", "desc": "React Native中的component跟Android中的activity，fragment等一样，存在生命周期，下面先给出component的生命周期图"}, {"id": "6844903678369873927", "title": "完全理解React Fiber", "desc": "目前看过讲的最清楚全面的一篇，想看源码之前先过一下，会容易很多。"}, {"id": "6923082951492272135", "title": "想做前端开发，试试这款React组件库 ", "desc": "今天给大伙推荐一个React UI组件库MATERIAL-UI。MATERIAL-UI是一款用来实现Google的Material Design风格UI界面的框架，也是首个React的UI工具集之一。 控制面板示例：这是一个含有任务栏和迷你变体抽屉的最小化管理面板。这个图表由 …"}, {"id": "6844904149453111304", "title": "【译】什么是React Hooks？", "desc": "在2018年10月的React Conf上引入了React Hooks，作为在React函数组件中使用state和副作用的一种方式。尽管功能组件以前被称为函数无状态组件（FSC），但它们最终能够与React Hooks一起使用状态。因此，许多人现在将它们称为函数组件。 在本演练…"}, {"id": "6893318093146161159", "title": "【React全解0】React起步+JSX语法", "desc": "直接在里面搜索React即可。 理论上优先使用umd，同时支持Node.js和浏览器。最新的模块规范是使用import和export关键字。 import ... from ..."}, {"id": "6989794710982230053", "title": "怎么样在 React Hooks 中批量使用 useRef ?", "desc": "本文主要讨论了怎么样批量使用 useRef，主要有两种方式，一种 是使用数组循环赋值ref后使用，另一种则是组件抽离方式。在某些场景下，还是非常有必要的。"}, {"id": "6844904175671705614", "title": "应用connected-react-router和redux-thunk打通react路由孤立", "desc": "在我们开发过程中，很多时候，我们需要让组件共享某些数据，虽然可以通过组件传递数据实现数据共享，但是如果组件之间不是父子关系的话，数据传递是非常麻烦的，而且容易让代码的可读性降低，这时候我们就需要一个 state（状态）管理工具。常见的状态管理工具有 redux，mobx，这里选…"}, {"id": "6989591963313897480", "title": "React 创建元素", "desc": "原生js创建：document.createElement React.createElement 用 React 的 createElement 来创建 React DOM。 其中 createEl"}, {"id": "6895990479272935431", "title": "React Fiber 是什么？", "desc": "React 15 以及之前的版本有一个主要的问题 —— 虚拟 dom 的 diff 操作是同步完成的。 这就意味着当页面上有大量 DOM 节点时，diff 的时间可能过长，从而导致交互卡顿，或者直接没有反馈。 这就引出了 React Fiber 来处理这样的问题。 为了保证阅读…"}, {"id": "6969115083582799885", "title": "学习 React 第一节课：基础", "desc": "作为学习 React 的第一节课，包含了：如何创造一个组件、props、state、lifecycle 等基础的讲解"}, {"id": "6956503303094009893", "title": "React-Router源码小问答", "desc": "React-router是我们开发过程中，经常使用的库。在不接触源码的基础上，我们可能会对默写写法，props接收到的值产生疑惑。这片文章就是为你解惑的。"}, {"id": "6914089940649246734", "title": "React源码系列五：React Scheduler调度原理第二篇", "desc": "上篇文章中，我们详细分析了React Scheduler的原理。如果对这一部分不清楚的，请移步React源码系列五：React Scheduler调度原理第一篇，接下来，我们开始分析Scheduler在React中是如何使用的。 1. scheduleUpdateOnFiber…"}, {"id": "6950563275733991432", "title": "React Hook中useState的基本使用加实例", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。"}, {"id": "6942128690121670663", "title": "​基于UmiJS的自动化Fetch请求生成插件", "desc": "在2021年的今天，在大部分项目中已经抛弃了原先荒漠式的接口写法，很多项目都有意识的拆分成了很多个单独的function函数进行维护，每次写接口的时候不是在页面上套路一堆的$axios...等等与视图逻辑的代码。而是有意义的写成Promise&#x3C;R>返回值的函数，通过e…"}, {"id": "6844903958499049479", "title": "函数式编程看React Hooks(二)事件绑定副作用深度剖析", "desc": "本教程不讲解 React Hooks 的源码，只用最简单的方式来揭示 React Hooks 的原理和思想。 （我希望你看本文时，已经看过了上面一篇文章，因为本文会基于你已经了解部分 hooks 本质的前提下而展开的。例如你懂得 hooks 维护的状态其实是一个由闭包提供的。）…"}, {"id": "6844903504276881416", "title": "写给前端应届生的职业规划建议", "desc": "【前言】 近一年多的时间，笔者在公司中担任过应届生导师、实习生导师、应届生项目导师等一系列导师角色。期间，笔者发现一些即将和准备成为前端攻城狮的同学其实并没有明确前端真正的核心和定位，也没有给自己制定一个学习和发展的方向。当初选择前端这个职业，也仅仅只是为了找一份工作而已。笔者…"}, {"id": "6844903697667850248", "title": "自定义文件上传功能实现方法", "desc": "本文采用的是vue框架，但是不管什么框架，原理是相通的，所以希望大家不要将自己的格局局限在 框架里。 说句题外话，最近尤雨溪说要开发vue 3.0 了，而且听说变动挺大的。我倒是觉得其实没什么大不了的。我准备趁着这个机会学习一下React，然后找个小项目实践一下。毕竟学习vue…"}, {"id": "6844903713031585799", "title": "如何实现一个 鼠标点击特效的 chrome插件", "desc": "在这个年代，不用chrome都不好意思说自己是敲代码的。特别是前端，chrome对于前端来说简直是调试利器，不可或缺的存在。不得不说chrome的功能是极其强大的，其中最亮眼的功能莫过于扩展程序(浏览器插件)，国内各大浏览器品牌也都纷纷“效仿”，今天就为大家带来一次chrome…"}, {"id": "6980532300949749791", "title": "Refs转发(精读React官方文档—17)", "desc": "什么是Ref转发？ 转发refs到DOM组件 下面的组件是一个渲染原生DOM元素button的FancyButton组件 Ref转发是一个可选特性，其允许某些组件接收ref,并将其向下传递给子组件。 "}, {"id": "6844903587215048711", "title": "浅谈React中的diff", "desc": "diff算法在React中处于主导地位，是React V-dom和渲染的性能保证，这也是React最有魅力、最吸引人的地方。 React一个很大一个的设计有点就是将diff和V-dom的完美结合，而高效的diff算法可以让用户更加自由的刷新页面，让开发者也能远离原生dom操作，…"}, {"id": "6941994861239205918", "title": "React 性能优化实践 - 精细化渲染", "desc": "我们主要说说如何减少不必要的 render Function，减少不必要的组件函数吊用。 在 Components-setting-General 中打开 Highlight updates when components render. 在 Components-settin…"}, {"id": "6844903613421076494", "title": "一个可拖拽的React标签组件", "desc": "最近的项目里需要实现一个标签组件，内部标签可任意拖动排序。网上搜了一圈发现几乎没有现成的基于react的组件能很好的满足需求。 它很好用，最短只要几行代码；又很灵活，你可以进行添加、修改、删除、排序等操作，可以在一个标签里放任何东西，可以设置任何你想要的样式（该组件本身并不包含…"}, {"id": "6901250964775567374", "title": "译：使用 TypeScript，React，ANTLR 和 Monaco Editor 创建一个自定义 Web 编辑器(一)", "desc": "在本文中，我将介绍 Web 编辑器是如何工作的，并且我们将创建一个自定义语言。 我们要构建的语言编辑器很简单。它声明一个 TODO 列表，然后将一些预定义的指令应用于它们。我将这种语言称为 TodoLang。以下一些示例是这个语言的说明： 我们可以使用 COMPLETE TOD…"}, {"id": "6986678206434639885", "title": "类型脚本。对React最有用的五种实用类型", "desc": "类型脚本。对React最有用的五种工具类型 Iskander Samatov 关注 7月18日- 3分钟阅读 在这篇文章中，我将介绍在React应用中实用的五种TypeScript实用类型。 什么是实"}, {"id": "6925751842034941959", "title": "函数式组件与类组件有何不同？", "desc": "1、首先是第一次渲染，由于 onBtnClick 函数被返回，在 return 之前，onBtnClick、setNum、foo、print、num 早就都被放到了闭包里面。可以自行分析一下引用的指向。最重要的是此时闭包里面 num 只能是1。 2、点击 onClick，这时会…"}, {"id": "6966221174757916709", "title": "react-hooks详解", "desc": "1 关于hook 1.1 为什么使用hook 在react类组件（class）写法中，有setState和生命周期对状态进行管理，但是在函数组件中不存在这些，故引入hooks（版本：>=16.8），使"}, {"id": "6844904166695911437", "title": "理解：为什么React事件处理中要绑定this", "desc": "笔者刚换了家公司，公司用React框架，所以需要学习。目前大部分普通程序员身上所反映出来的通病就是，公司需要什么，就很快的去学习什么，对于知识的把握与理解程度，仅限于囫囵吞枣，当然更多的是项目紧赶时间，碰到问题，能百度就绝不去想（PS：哪有时间去想那么多为什么，赶快搞完下班）。…"}, {"id": "6989924992825704456", "title": "React 基础学习 - JSX基础语法（三）", "desc": "二、能够使用JSX创建react元素 三、能够在JSX中使用JavaScript表达式 四、能够使用JSX的条件渲染和列表渲染 五、能够给JSX添加样式 JSX就是推荐使用创建react的元素的方法，"}, {"id": "6844903871374950407", "title": "[三元学Redux]Redux中间件(thunk+saga应用)", "desc": "Redux的中间件，处于Action和Reducer之间，将中间某个过程拦截一下，进行一些处理再继续正常执行，这就是中间件的功能。 对于异步请求的代码，我们最好将它们放到Redux中间件里面。 当项目复杂到一定规模的时候，我们希望让各个模块尽可能的实行单一职责，比如React作…"}, {"id": "6962691280862183461", "title": "React组件详解(组件生命周期，组件间各种通信)等", "desc": "1. react组件化 ​ 目前的前端三大框架的核心都是采用组件化的思想。 组件化提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。 任何的应用都可以被抽象为一个组件树 组件化"}, {"id": "6844903587462529038", "title": "初识Material-UI", "desc": "“设计是创造的艺术，我们的目标就是要满足不同的人类需要。人们的需要会随着时间发展，我们的设计，实践，以及理念也要随之提升。我们在自我挑战，为用户创造了一个可视化语言，它整合了优秀设计的经典原则和科学与技术的创新。这就是Material Design。” —— 关于Materia…"}, {"id": "6844904052589854728", "title": "React服务端渲染SSR，加快首屏渲染", "desc": "服务端渲染听起来高大上，其实也就那么回事，如果网站不是用于商业用途，也不需要被网站收录，那就还是乖乖用正常普通的方式写写就完事了，除非自己想装逼一下，那可以玩一下。以下就是我的装逼时间了~~🙃 加快首屏渲染。因为用户从发送一个网站请求到接收请求，无非就是就是有js/css下载…"}, {"id": "6844903669922545671", "title": "React项目样式管理规范", "desc": "总结实际开发中的经验，形成一套基于React的前端项目中的样式管理规范，传统样式管理规范与新思想的结合。"}, {"id": "6844903713614594061", "title": "[译] React Hooks 揭秘：数组解构融成魔法", "desc": "我超喜欢 React 新出的这个 Hooks API。而在使用它时却有一些奇怪的规则。为了那些纠结于为什么要有这些规则的人，在这里我会以模型图的方式来向你们展示这个新的 API。 这篇文章主要讲述的是关于 React hooks 这项新 API，此时这个提案仍处于 alpha …"}, {"id": "6844903975192379399", "title": "VNode与Component", "desc": "在前面两篇文章中，我们研究了VNode的基础知识，了解了如何使用VNode描述并渲染视图，实现了递归diff和循环diff两种方案，并在循环diff中给出了一种简单的调度器实现方案。本文将紧接上两篇文章，一步一步思考并实现将VNode封装成组件。 排在后面文章内会大量采用前面文…"}, {"id": "6844903594211147784", "title": "[JS性能优化]函数去抖(debounce)与函数节流(throttle)", "desc": "这是个老生常谈的话题了，之所以还搬出来讲讲，原因之一是之前根本就没在意，近期面临的一些问题需要用到这两个小技巧；原因之二，这两个技巧带来的优化不小；原因之三，顺便复习一下闭包。 第一种和第三种情况，事件短时间内被频繁出发，如果在事件中有大量的计算，频繁操作DOM，资源加载等重行…"}, {"id": "6844903593925935112", "title": "如何从零入门React？实战做个FM应用吧", "desc": "面试造航母，工作拧螺丝，新公司面试技术官要求会react技术栈。 答：没，只使用过Vue。 答：可以（一脸笃定）... 南慕容，北乔峰，降龙十八掌，斗转星移，先接招再说。辗转反侧，开始了React的学习。然而公司项目暂时并没有用到React...Orz，不过为了提升实战经验，还…"}, {"id": "6844903696866738183", "title": "React 的几种条件渲染以及选择", "desc": "针对以上三种情况, react渲染列表的时候要正确判断并渲染出相应的视图, 也就是条件渲染. 不同于vue的v-if, v-show等框架提供的api, react的条件渲染都是js原生的再加上一点点的hack. 比如react文档提到的. if/else, && 和三目等等.…"}, {"id": "6962856944130326558", "title": "useState改变值之后立刻获取最新的状态", "desc": "基本案例 当我们点击按钮时，控制台打印的还是上一次的值0，而不是最新的2 因为在react合成事件中改变状态是异步的，出于减少render次数，react会收集所有状态变更，然后比对优化，最后做一次变"}, {"id": "6844903696879321096", "title": "让react用起来更得心应手——(React 基础简析)", "desc": "3. ReactDom.render(vnode,root)会将其渲染出到页面root中: 4. ReactDom.render原理简析： 类组件消除了函数声明组件的问题，也是现在写react的正常语法。 个人使用一种框架时总有一种想知道为啥这样用的强迫症，不然用框架用的不舒服…"}, {"id": "6844903646375706638", "title": "分享一个打造react-native壳,react肉的跨平台三端通吃的APP的记录", "desc": "这里有关于react和native的知识点"}, {"id": "6939072321374126110", "title": "如何实现一个mini版的React（二）", "desc": "蓝色框框里面看到React.createElement收的第一个参数不是dom节点了，变成一个组件，第二个参数就是传入class组件里面的props。"}, {"id": "6969080167859748894", "title": "滚动懒加载图片-React实现", "desc": "目前有一个新的 IntersectionObserver API，可以自动\"观察\"元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区"}, {"id": "6844903733998911496", "title": "重拾React: React 16.0", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励，希望大家多多关注呀！从今年年初离开React开发岗，React就慢慢淡出我的学习范围。现在想重拾一下React相关的知识，可能文章所提及的知识点已经算…"}, {"id": "6844904096432914439", "title": "深入react组件初始挂载", "desc": "在v0.8.0版本中，react组件初始挂载实现是相对简单的。总体可以划分为两部分来阐述：组件实例化和（真正的）组件挂载。因为先理解组件实例化，再理解组件挂载会比较好。所以，我先介绍组件实例化，后介绍（真正的）组件挂载流程。 在搞懂什么是react组件之前，我们不妨先了解一下“…"}, {"id": "6844904133388926983", "title": "electron + react开发一个简易的markdown云盘系列", "desc": "electron是一款可以让前端程序员开发桌面应用程序的技术（库），比如打开窗口，访问系统文件等等。还可以很好的和前端框架集成。 由于这个项目是本人毕设，借鉴于imook张轩老师的课程，基于此进行深度研究。代码写的不是很精简，希望各位进行矫正。 接下来就可以使用命令npm ru…"}, {"id": "6920153099092885511", "title": "别责怪框架：我使用 AngularJS 和 ReactJS 的经验", "desc": "在过去的几年里，网站进化成了复杂的网页应用。曾经的互联网只涉及到简单的商业信息展现，而如今，看看 Facebook、Slack、Spotify 以及 Netflix，互联网正在改变你的社交和生活方式。随着互联网的发展，前端开发这个行业达到了全新的高度，并得到了前所未有的重视。 …"}, {"id": "6844903930032291854", "title": "React-router路由的实现原理，看这里", "desc": "准备发布一个react系列造轮子文章，事关Redux,React-Redux,Redux-Saga等，就是人狠话不多,不一定按顺序发布，也可能会有别的文章穿插。 先看看react-router-dom是怎么实现的?它的功能一个index.js就可以,不需要别的特别多的组件来阐述…"}, {"id": "6844903577865945096", "title": "JSX，了解一下？", "desc": "JSX是React中特有的东东，全称 Javascriptのxml。 看起来就是一个普通的html标签不是？嗯。。。慢着。。。看看做左边，我们将这个html标签赋给了一个js变量! 嘿，这就是JSX的功能了。我们说JSX的全称应该翻译为Javscriptのxml（Javscri…"}, {"id": "6844904128301252616", "title": "深入React Fiber架构的reconciliation 算法", "desc": "本文将会带你深入学习React的新架构－Fiber和新的reconciliation 算法的两个阶段。我们将会深入探讨一下React更新state和props，处理子组件的具体细节。 React是一个用于构建用户界面的javascript类库。它的核心机制是对组件状态进行变更检…"}, {"id": "6844903833559121927", "title": "React 源码解析之总览", "desc": "平常我们对外（后端、产品或其他前端）总喜欢说用的是 React 框架，可是我们并不都熟悉 React 内部是怎么运行的。事实上，当 Facebook 将 React 和 ReactDOM 分包发布后，React 就不仅仅是前端框架了，15版本后 react 源码越来越少，而 R…"}, {"id": "6951328185539624967", "title": "如何优雅的在React项目中使用高德地图", "desc": "如何优雅的在React项目中使用高德地图目前的使用1、裸游(1) 引入高德 JS API(2)、开发业务逻辑缺点需要在index.html手动引入高德JS API存在大量冗余代码，无法跨项目使用2、使"}, {"id": "6844904048731111431", "title": "[译] 定制 create-react-app：如何制作自己的模版", "desc": "TL;DR： 有多种可用的工具能帮助开发者构建不同种类的网站和应用。其中之一就是 Create React App(CRA)，该 CLI 工具帮助 JavaScript 开发者不用配置就能创建 React 应用。可即便是应用了 CRA 这么棒的工具，开发者仍需要稍作调整，增加 …"}, {"id": "6844903920222142472", "title": "学用Hooks写React组件——基础版Select组件", "desc": "通过React提供的createPortal来实现render body的方式渲染到body节点下，解决方案一的问题。 这里我们当然选择了render body的方案，整个组件思路是：点击显示组件，通过定位显示组件的位置来计算下拉框应该出现的位置。下拉框选中或者点击屏幕其他地方…"}, {"id": "6992098216732786696", "title": "搞定React路由传参", "desc": "之前在工作中开发一个react项目的时候遇到路由传参的问题，当时因为基础不好，解决这个问题用了好久，还产生了一个bug，特此记录一下。"}, {"id": "6844903583536644109", "title": "[译] 热爱 JavaScript，但是讨厌 CSS ？", "desc": "一个读者留言说他自己写起 JS 和 React 来觉得很有趣，但是当要处理样式的时候，他就很沮丧。 编程是有趣的，解决问题也是有趣的。当你经历千辛万苦让你的程序正确运行的时候，这种感觉，简直不可思议。 然而，哦，糟糕，是 CSS。你的 App 运行得很好，就是样式有点糟糕，那么…"}, {"id": "6844904106880925704", "title": "Creat-React-App 奇妙之旅", "desc": "最近一年多工作中，都在用vue进行开发，但心中一直对react有念念不忘。于是最近又想把react拎出来捣鼓一番。业界中总有vue好还是react更优的讨论（好比php是最美的语言哈哈哈哈哈），我觉得都挺好，vue的指令真的香，react一切皆组件的思想真的是高（如今有了hoo…"}, {"id": "6985439923612418055", "title": "React之PureComponent的用法", "desc": "PureComponent有什么用？ PureComponent的基本原理 重写了shouldComponentUpdate方法。 对组件的新/旧 state和props中的数据进行浅比较，如果没有变"}, {"id": "6844903886407352334", "title": "从setState, forceUpdate, unstable_batchedUpdates看React的批量更新", "desc": "setState同步异步问题，React批量更新一直是一个比较模糊的问题，本文希望从框架设计的角度说明一下这个问题。 React有个UI = f(data) 公式：UI是由data推导出来的，所以在写应用的时候，我们只需要关心数据的改变，只需data ---> data'， 那…"}, {"id": "6992019239154483237", "title": "你不知道的setState", "desc": "可能很多同学都觉得setState不就是一个同步执行的函数吗？怎么还会有异步情况。但是在一些情况下setState确实存在异步执行的情况。 首先向大家先简单介绍一下setState的使用： setSt"}, {"id": "6844904195665952775", "title": "React ref 多场景使用教程(附demo)", "desc": "React16.8 后，我们就不断的拥抱 Hook 开发，在组件化开发已经成为我们必不可缺的开发方式时，ref 的使用就显得尤为重要。 但是 class 开发依旧被大部分人所使用，所以我们来分析几种使用 ref 的场景。 下面通过这几种场景分析：如何在 父组件 调用 子组件内部…"}, {"id": "6983535049954197512", "title": "关于Typescript在前端的体验漫谈", "desc": "最近两年，Typescript逐渐成为前端项目的标配，甚至出现了Typescript即将接管JS世界的段子。 大部分前端开发者也陆陆续续从React、Vue、Angular开发生态中接触到了TS"}, {"id": "6844904191282905101", "title": "精读《use-what-changed 源码》", "desc": "使用 React Hooks 的时候，经常出现执行次数过多甚至死循环的情况，我们可以利用 use-what-changed 进行依赖分析，找到哪个变量引用一直在变化。 那么恭喜你，写出了一个最简单的死循环。这个场景里，我们本意是利用 useEffect 将 props.styl…"}, {"id": "6844903775455412238", "title": "【译】如何从头开始搭建React,Webpack4,Babel7工程", "desc": "这是一篇非常适合新手的教程。 webpack是一款非常强大的工具，学习webpack不仅可以用于搭建React项目，它适用于任何前端工程。 webpack提取原始的React组件，用于生成（几乎）每个浏览器都能理解的JavaScript代码。 现在你不需要为webpack定义配…"}, {"id": "6844903855109439496", "title": "手把手带你用react hook撸一遍class组件的特性", "desc": "react hook是继16.6的Suspense、lazy、memo后的又一巨大的令人兴奋的特性。然后有各种文章说了hook的优缺点，其中缺点包括：没有直接替代getSnapshotBeforeUpdate、componentDidUpdate生命周期的hook、不能像cla…"}, {"id": "6844904111071035405", "title": "React Hooks：初探·实践", "desc": "其实按照我自己的看法：React Hooks是在函数式组件中的一类以use为开头命名的函数。 这类函数在React内部会被特殊对待，所以也称为钩子函数。 解决为什么要使用hooks的问题，我决定从hooks解决了class组件的哪些痛点和hooks更符合react的组件模型两个…"}, {"id": "6844904175038562317", "title": "React技术细节手册 - React Hook 的运行原理和让人困惑的秘密", "desc": "一. Hooks 为什么只能写在 FCComponent 内 ? React 怎么知道的 ? 二. React useState如何在没有 Key 的情况下只通过初始值来判断读写的是哪个 State ? 不得不说这个重要的细节, 官方却给了个模棱两可的答案. 跟 State 一…"}, {"id": "6844904148823998477", "title": "create-react-app做了什么", "desc": "create-react-app(v3.7.2)可以很快很方便初始化一个react开发项目，这个东西到底是怎样运作的，做了哪些处理呢？今天揭开内部秘密。源码用到的一些有用的第三方库也列了出来，方便以后大家在自己的cli中使用。 最终处理成@xxx/cra-template或者@…"}, {"id": "6889763592947564551", "title": "Recoil 用法及原理浅析", "desc": "Recoil 还在实验阶段，不能在生产环境使用。目前文章分析的版本是 0.0.13 Hooks 组件的状态管理。目前不能在类组件里面使用。使用 useHooks 读写状态和订阅组件。 支持 ts。 向后兼容 React，支持 React 并行模式。 Recoil 的状态和衍生状…"}, {"id": "6844903910897893389", "title": "React学习(5)-React中组件的数据-props", "desc": "将一个大的应用按照功能结构等划分成若干个部分(组件),对每个部分(组件)进行分开管理,与组件相关的东西放在一起,达到高内聚的目的,而不同组件又各自独立管理达到低耦合的效果。 PropType提供了一系列的验证方法,用于确保组件接收到的数据类型是有效准确的,一旦传入的prop值类…"}, {"id": "6844904169359294477", "title": "前端错误监控", "desc": "onerror可以捕获到宏任务抛出的错误，微任务比如：Promise，和async函数抛出的错误是捕获不到的。 对于本域的js抛出的错误，onerror包含了详情的错误信息。对于其他域的js抛出的错误，只会在msg中显示简单的 Script error。 我们就可以获得其他域j…"}, {"id": "6844903662209204237", "title": "【译】通过Recompose库掌握React函数组件", "desc": "声明：这不是一篇介绍React基础知识的文章，需要熟悉React相关知识 多年来，我逐渐意识到开发高质量的React应用的唯一正确途径，是编写函数组件。 在本文中，我将简要介绍函数组件和高阶组件。之后，我们将深入研究臃肿的React组件，将之重构为由多个可组合的高阶组件的优雅方…"}, {"id": "6844903734644834312", "title": " [译]React高级话题之Forwarding Refs", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 一般意义来说，React组件就是要隐藏它们的实现细节，包括自己的UI输出。而其他引用了<FancyButton>的组件也不太可能想要获取ref，然后去访问<FancyButton>内部的原生DOM元素button…"}, {"id": "6844903668634877966", "title": "发布 umi 2.0，可插拔的企业级 react 应用框架", "desc": "距离 umi 1.0 发布 已有半年，umi 在这段时间做了大量的重构和改进，438 个 commit，20 个 beta 版本，今天正式发布 2.0 版本，并调整定位为可插拔的企业级 react 应用框架。 umi，中文可发音为乌米，是一个可插拔的企业级 react 应用框架…"}, {"id": "6878657952564117512", "title": "React性能优化与setState详解 | 掘金技术征文-双节特别篇", "desc": "当更新 style 属性时，React 仅更新有所改变的属性。"}, {"id": "6844904095682134029", "title": "使用 React Testing Library 和 Jest 完成单元测试", "desc": "在2020的今天，构建一个 web 应用对于我们来说，并非什么难事。因为有很多足够多优秀的的前端框架（比如 React，Vue 和 Angular）；以及一些易用且强大的UI库（比如 Ant Design）为我们保驾护航，极大地缩短了应用构建的周期。 但是，互联网时代也急剧地改…"}, {"id": "6844903871588859917", "title": "【墙裂推荐】Talking about hooks", "desc": "可以简单的理解为，React 和 Vue 为了解决相同的问题，基于不同的技术实现了相似的API。所以本文也将结合两种框架各自的特点，简单讲讲个人对Hooks的理解。 为了回答这个问题，我们先看看之前和现在的React组件划分产生了哪些变化。 1. 既然本来就有函数组件，开始为什…"}, {"id": "6844904121389023239", "title": "深度理解Hook规则", "desc": "简单来说Hooks规则就是我们在使用Hooks编写程序的时候需要遵循的规范。 我们接下来将会举一个错误的例子,并且将会展开分析为什么不能这么写, 这么写会导致什么错误发生。 我们都知道在组件中使用state hooks和effect hooks,靠的是Hook的调用顺序,这样R…"}, {"id": "6844904089231458317", "title": "浅谈umi3的微内核体系", "desc": "利益无关，刚好看到umi3发布了，其中的微内核特性挺吸引我的，于是就趁机看了一下，一探究竟。最近一次听说微内核还是鸿蒙系统，虽然还没看到影子。。。 umi3的代码组织的主要核心就是插件体系，插件驱动整个内核运转，跟webpack有点像，但是又借鉴了babel的配置方式，有pre…"}, {"id": "6844903666256723982", "title": "让 Markdown 中的代码可以实时运行", "desc": "在我们前端团队中，技术相关的文档都采用 Markdown 编写， 文档中往往会伴随很多示例代码，我们希望大家在阅读文档的时候，可以运行示例代码，看到效果。 让 Markdown 中的代码可以运行，并预览效果。 代码可以在线编辑。 不影响整个文档流的布局。 支持 React, 支…"}, {"id": "6845166891703468045", "title": "Echarts 地图 之 全国和省级切换", "desc": "这个问题推给你需求方。最后的结论是就用echarts官方的数据，可是 没有市级的数据，市级数据这个功能就被砍掉了。"}, {"id": "6984229569473544223", "title": "React 组件性能优化的15种方式", "desc": "React 组件性能优化的核心是减少渲染真实DOM 节点的频率，减少 Virtual DOM对比的频率。 1. 组件卸载前进行清理操作 在组件中为 window 注册的全局事件, 以及定时器, 在组件"}, {"id": "6900561695060525070", "title": "React Hook 很香吗 ", "desc": "2018年6，7月的时候，我曾经在一位IOS同事的带领下，使用了 React Native 为公司做了一款数据分析相关的App ，而后又相继使用了 React 写了一个后台应用，在此期间深受那位同事的开发模式启发，对模块化，组件化，组件高度复用 ... 等都有了新的理解与认识；…"}, {"id": "6943615245768196110", "title": "图说React渲染流程", "desc": "本文通过图解的方式尝试生动的叙述React渲染组件的过程.前置知识react渲染模式Concurrent 模式 异步渲染模式,实现了基于任务的时间切片等特性legacy 模式 同步渲染模式,现在主要的"}, {"id": "6844903641816498184", "title": "关于React的ref", "desc": "可以看到, 我们也可以直接使用回调的方式来获取ref，其实个人感觉这种方式更简单，但是至于作者为什么放弃了这种方式，我目前还不清楚。~我觉得是因为跨组件传递很麻烦吧~。 我们还看到，代码中，onRef方法可以直接把 ref传给上层组件,那么，如果想使用 新版本api将 ref传…"}, {"id": "6983846620450258975", "title": "入门 React Hooks 实战解析", "desc": "useState、useReducer、useEffect、useContext、自定义hook的用法知多少？"}, {"id": "6844903725241204743", "title": "2019年 React 新手学习指南 – 从 React 学习线路图说开去", "desc": "本文根据 React 开发者学习线路图（2018） 结构编写了很多新手如何学习 React 的建议。2019 年有标题党的嫌疑，但是 2018 年剩下的时间不多，我相信文中提到的这些技术 2019 年也不会过时。所以本文完全可以作为 2019 年 React 学习指南。文章中包含"}, {"id": "6844903877246976008", "title": "「学习笔记」ReactHooks入门", "desc": "本文是本人在学习ReactHooks记录的学习笔记，内容不仅限于文档中的内容，涉及了Hooks源码相关。如果有错误，还请及时指正。 逻辑复用，如果使用高阶组件等特性，较为复杂。 传统的函数组件无法存储state状态。 Hooks允许在函数组件中，调用React的功能。 使用自定…"}, {"id": "6948422543288041503", "title": "搞清 React 的 ref", "desc": "写了一段时间的 react，99%都在写 state、prop，对 ref 特别不熟悉，前几天做一个需求，想用 ref 实现父组件捞子组件的某个状态值，结果失败了，特此整理ref相关内容。"}, {"id": "6844903590734086157", "title": "用Vue.js开发原生应用选择Weex还是NativeScript?", "desc": "Vue.js是一个很好的框架！它有一个友好的学习曲线，结合了最好的React的组件方法和Angular的模板。尽管如此，Vue.js仍然有一个限制，它还不能像React的React Native，Vue.js目前还没有稳定、广泛采用的方法来开发原生应用程序。 不过，这肯定会改变…"}, {"id": "6844903961590235150", "title": "【webpack】从零搭建一个属于自己的react框架", "desc": "事例一：我们在使用react的时候，会用create-react-app命令下载一个react的模板，然后开始在里面实现各种功能。 事例二：前几个月的时候，我偶然发现飞冰官网，浏览后觉得不错，并在其上面下载了几个模板。 本文将按照我自己的一个想法、以react模板样式为基准，就…"}, {"id": "6844904202062282760", "title": "React技术揭秘2-1 Fiber架构", "desc": "在前一章讲解React16的新架构时，我们提到的虚拟DOM在React中有个正式的称呼——Fiber。在之后的学习中，我们会逐渐用Fiber来取代React16虚拟DOM这一称呼。 在React15及以前，Reconciler采用递归的方式创建虚拟DOM，递归过程是不能中断的。…"}, {"id": "6844903575668129800", "title": "由屎色自行车棚引发的思考", "desc": "有一天，我走在路上，看到了一个屎色的自行车棚。车棚颜色饱满，让我不禁停下了脚步。在阳光的照射下甚至感觉闻道了什么莫名的味道。 我对着大爷笑了笑作为回应，然后转身走开。 简短的回答是：你不需要关心这个问题。 长一点的解释是：拥有建造一个自行车棚的能力并不代表你就要阻止别人建造一个…"}, {"id": "6954730567401209886", "title": "✋手摸手系列(一/2)： vite react typescript reactHook mobx(非脚手架)（从0开始）：路由和权限搭建", "desc": "通过参考 umi 的wrapper设计，自己撸一套 react 路由拦截，鉴权处理，支持管道模式，加油💪"}, {"id": "6844903778324316167", "title": "Why React Hooks", "desc": "上面是两个最简单的 function component 和 class component 的对比，首先从行数上来看，3 << 7。 Function Component 仅仅是一个普通的 JS 函数，Class Component 因为 ES2015 不支持 class 的…"}, {"id": "6844903544085020680", "title": "关于 React 那些小知识点儿", "desc": "关于 react 的那些知识点儿"}, {"id": "6887099167458459655", "title": "react hooks源代码总体运行初解（一）", "desc": "你所看到的只有这些hooks的定义，而其值的实现方式都是以var dispatcher = resolveDispatcher()；再由这个dispatcher去调用对应的不同的事件，对于resolveDispatcher()方法的实现也会看得一头雾水，ReactCurrent…"}, {"id": "6844904160794673159", "title": "React第二篇 React语法", "desc": "4. 元素渲染 值得注意的是 React DOM 首先会比较元素内容先后的不同，而在渲染过程中只会更新改变了的部分。 5. 组件和Props 6. React生命周期 8. 条件处理"}, {"id": "6844903557200609287", "title": "React 中 setState() 为什么是异步的？", "desc": "不知道大家有没有过这个疑问，React 中 setState() 为什么是异步的？我一度认为 setState() 是同步的，知道它是异步的之后很是困惑，甚至期待 React 能出一个 setStateSync() 之类的 API。同样有此疑问的还有 MobX 的作者 Mich…"}, {"id": "6844903716387029000", "title": "[译] 10 个有趣的 JSCSS 库（2018.11）", "desc": "Tutorialzine每月都会给我们精心挑选优秀的web开发资源，这些资源可以帮助我们解锁最新和最炫酷的网络开发姿势。前端er,让我们一起先睹为快吧！ 鹅厂出品，下一代 Web 框架，去万物糟粕，合精华为一。让 JSX, Web Components, Proxy, Stor…"}, {"id": "6844903732593819656", "title": "React浅谈setState", "desc": "为什么是setState，因为对于大家而言，大多数使用react的新手或者初学者，大多会直接接触到setState，而且这个方法也可能是接触最多的操作方法。那么要想详细了解setState究竟在React中做了什么事情，就需要深入了解一下。而在最新的React 16版本中，Re…"}, {"id": "6973259743112462367", "title": "从零开始使用TS加hooks封装一个简单组件", "desc": "前言：最近工作刚刚接手React项目，封装一个组件是学习React中最基础的一个部分，那么让我们动手来写一个简单的React组件吧！"}, {"id": "6844903830103179272", "title": "必会的next.js自定义App和Document", "desc": "一文中，我们曾经写过一个_app.js来引入antd的css,在这里我们对除了引入antd.css其他事情什么都没做，引入antd.css之后，它就会在全局生效。 对比这一段代码，这里从next/app中多引入了一个Container组件，并在中间重新写了一个MyApp类，继承…"}, {"id": "6844904162354790408", "title": "过去的历史，和一点点未来 UI 框架的幻想", "desc": "记得 13 年刚开始接触前端的时候，最兴奋的是用原生 JS 手写了一个左右漂浮的广告，那时候 jQuery 大行其道，现在回过头看，这或许是通过 JS 间接操作 UI 的起点，jQuery 的核心部分也是对 Dom 对象的包装，通过正则匹配来处理 CSS HTML，网上到处都是…"}, {"id": "6872896296307392519", "title": "蒲公英 · JELLY技术周刊 Vol.22: npm i react-router@6.0.0-beta.0", "desc": "Text Fragments（文本片段）是 Chromium 80+ 的新功能。使用 Text Fragments，我们可以在 URL 中指定文本片段作为锚点。当浏览器打开一个带有 Text Fragments 的 URL 时，浏览器会对匹配到的文本进行强调，引起用户的注意。 …"}, {"id": "6995518202721599501", "title": "React使用svg-sprite-loader引入svg", "desc": "ERROR in [at-loader] ./lib/icon.tsx:2:21 TS2307: Cannot find module './icons/alipay.svg' or its"}, {"id": "6897446623376408589", "title": "React 灵魂 23 问，你能答对几个？", "desc": "useEffect 会捕获 props 和 state。所以即便在回调函数里，你拿到的还是初始的 props 和 state。如果想得到“最新”的值，可以使用 ref。 update 阶段，每次调用 setState，链表就会执行 next 向后移动一步。如果将 setStat…"}, {"id": "6985068487479656461", "title": "React 中的 forwardRef 究竟该怎么用？", "desc": "想必大家在学习React的时候对转发 ref 这个概念很模糊，看了这篇文章后应该会豁然开朗吧，应该吧?"}, {"id": "6844903497427763213", "title": "react-native-splash-screen集成实践（ios & android）", "desc": "react-native在启动的时候会有瞬间的白屏出现，ios白屏时间会很短，安卓要相对长一些，大概1-3s时间。这是react-native的工作机制决定的。 react-native在启动时会装载js bundle到内存并渲染界面，这段时间界面是一个空View. 上面的过程…"}, {"id": "6844903602117410824", "title": "[React技术专栏]实现React理解React（下）", "desc": "如果还没有阅读 实现React理解React（上），请先阅读。 第2部分将接着我们上次讲到的内容。这篇文章将着重于改进我们简单的待办事项列表。当前的实现由一组函数组成，它们呈现完整的应用，并包含一个管理我们状态的简单store。但是，我们需要做一些事情来改进我们的应用。 这里是…"}, {"id": "6844903582840422413", "title": "Pastate: 响应式 react state 管理框架", "desc": "Pastate 是一个响应式 react state 管理框架，实现了对 state 的异步响应式管理。Pastate 是一个精益框架，它对很多高级概念进行了友好封装，这意味着你不必学习一些难以理解的概念，就可以在一个简单的应用中便捷地使用 pastate。在应用变得逐渐复杂的…"}, {"id": "6844904051973455886", "title": "React 生命周期的打怪升级之路", "desc": "截止目前为止 React 已经发布了 v16.12.0 版本, React 生命周期也是日常开发低头不见，抬头见的狗子，可惜狗子它变了。 v16.3 版本之前， React 中的更新操作是同步的，这可能会导致性能问题。 举个例子，假如有一个庞大的模块里面嵌套超级多的组件，一旦最…"}, {"id": "6903889352792014855", "title": "React-组件化开发", "desc": "1、组件化定义整个逻辑其实可以看做一个整体，那么我们就可以将其封装成一个组件：我们说过ReactDOM.render第一参数是一个HTML原生或者一个组件；所以我们可以先将之前的业务逻辑封装到一个组件"}, {"id": "6844903989524316168", "title": "JS_Module模式深入了解一下", "desc": "模块模式是一种常用的代码模式。它简单实用，但是也有一些“优雅”的使用方式，没有得到开发者的重视。所以，这篇文章，带大家来重温一下基层的用法，并且介绍一些比较优雅的使用方式。 我们来简单回顾一下什么是module pattern。如果你对基础知识比较熟悉的话，可以跳过这部分，直接…"}, {"id": "6844903666596446221", "title": "FEDAY2018游记", "desc": "819跑到广州参加了第四届的FEDAY，有很多干货也有很多安利，趁热打铁整理一下笔记。 每次FEDAY基本上是网红们的聚会，本次见到了hax(贺师俊)，CatChen(陈广琛)，张克军，Aimingoo（周爱民），还有各业务线的负责人，Uber数据可视化团队的何珊，京东商城的谢…"}, {"id": "6844904050819858439", "title": "React — 端的编程范式", "desc": "dvajs 是 Alibaba 针对于 react/redux 技术栈基于 elm 概念编写的一套脚手架。 两年前因为 antd 开始接触了这套脚手架。我的确很需要这套脚手架，对于新手来说，整合 react / redux / react-redux / react-route…"}, {"id": "6844903503966502926", "title": "实战react技术栈+express前后端博客项目（8）-- 前端管理界面标签管理+后端对应接口开发", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 由于该博客内容是开发和发文同步连载，所以在随着开发的进行，会修改之前的开发代码。 对于权限认证之前我们只做了一部分权限管理，在前端页面发生跳转的时…"}, {"id": "6915279429019107341", "title": "React基本使用", "desc": "可以看出this的值为undefined。 解决办法有两种，第一种采用bind this的方式将this绑定在实例上。 第二种采用静态方法使this指向实例。 event.preventDefault() 阻止默认行为,使得a标签失去原有的能力。 如何理解呢？我们来看看even…"}, {"id": "6844904046201929741", "title": "【译】UI Events（W3C Working Draft, 30 May 2019）", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 这个文档定义了UI Events的相关规范。UI Events继承了定义在DOM中的DOM Event objects。UI Events 的相关规范将会被那些负责处理用户交互行为（比如：通过鼠标和键盘来输入信息…"}, {"id": "6844904136282996749", "title": "基于free texture pack 完成一个图片精灵命令", "desc": "Whywebpack配置下的react项目，目前自己没有找到一个好的插件可以快速生成精灵图部分小图标会可以转base64合并入代码中，大图标却不方便转base64公司的项目绝大多数使用环境是弱网，所以"}, {"id": "6844903601844781070", "title": "React生命周期了解一下", "desc": "componentWillMount 在渲染前调用,在客户端也在服务端。 componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一…"}, {"id": "6844903704961744910", "title": "react-virtualized 组件的虚拟列表实现", "desc": "react-virtualized 是一个功能非常强大的库，其提供了 Grid、List、Table、Collection 以及 Masonry 等 五个主要组件，覆盖了常见场景下的长列表数据渲染。本文将着重分析其在虚拟列表上的实现。"}, {"id": "6844903504553705479", "title": "React-Sight - 支持 Fiber、React Router、Redux 的 React 组件可视化工具", "desc": "React-Sight 是支持 Fiber、React Router、Redux 的 React 组件可视化工具，它能够将 React 组件以树状方式层次化地可视化呈现给开发者。目前 React Sight 提供了 Chrome 插件，不过需要开发者首先安装 React Dev"}, {"id": "6844903630420590606", "title": "webpack之babel配置和HMR", "desc": "webpack 是前端开发最常用的模块打包器之一，我们可能是使用github上提供的脚手架如react-boilerplate，也有可能根据自己的项目来写webpack配置。无论你是属于哪一种情况，你还是要熟悉webpack的相关配置才能更好的使用它。 接下来主要介绍webpa…"}, {"id": "6844903589509333006", "title": "手写那些年用过的React路由", "desc": "之前没有前后端分离的时候，路由几乎都是针对后台而言的，有人说掌控了路由就相当于占了主权地位，我觉得这句话是不为过的。因为路由才能决定你的页面从哪里来，到哪里去。现在的前后端分离项目，路由几乎都给了前端处理，比如你经常使用的vue-router，react-router，今天就r…"}, {"id": "6844903778160738317", "title": "如何 Think in Hooks", "desc": "正当中国人民还沉浸在过年的忙碌中，在世界的另一头，React 团队的小伙伴们一点也没闲着，他们写了 一篇博客 ，并借此正式发布了 Hooks —— 一个官方宣传了好久、开发者们也期待了好久的新特性。 Hooks 正式发布于 v16.8.0，但由于官方团队的 一点点小失误，在 v…"}, {"id": "6844903543216799757", "title": "Introducing Hyperapp 1.0", "desc": "1 KB JavaScript library for building frontend applications."}, {"id": "6844903586908864519", "title": "走源码路线，浅谈react的一些思路", "desc": "你已经成功启动了一个react项目。 最早的版本，react和react-dom这俩个是放在一起的，后来因为各种架构的优点，互补互惠。将react-dom给拆分出来，react相当于库的核心，其他的衍生的react库都如同女朋友一样偎在他身边。可以随时更换随时使用。 难着不会，…"}, {"id": "6937213983099191310", "title": "【译】编写整洁 React 代码的简单实践", "desc": "整洁的代码不仅仅是能运行的代码，整洁的代码易于阅读，简单易懂，条理清晰。在本文中，我们将介绍八种编写 React 整洁代码的方法。 这篇文章仅提供了一些建议，如果不赞同也没有关系，这些实践对我个人编写 React 代码很有帮助。让我们开始吧！ 在条件渲染中，如果只有条件为 tr…"}, {"id": "6927177640293957645", "title": "React Server Components 介绍  亮点", "desc": "【静态】在最早的时候是根本没有前端或者后端的概念的。当时就是用 Dreamweaver 写 html 静态页面，然后部署到一台电脑的 IIS (Internet Information Services) 上。当请求这个页面时，返回这个 html 文件。 【模版】再后面一点，服…"}, {"id": "6962548653630160909", "title": "React版记账项目总结", "desc": "环境搭建 进入create-react-app的官网,根据步骤运行: yarn global add create-react-app@3.4.1 yarn create react-app mone"}, {"id": "6844903702763945991", "title": "react16.7.0-alpha hooks的api介绍", "desc": "如果你之前对于Hooks没有了解，那么你可能需要看下概述部分。你或许也可以在一些常见的问题中找到有用的信息。 返回有状态值，以及更新这个状态值的函数。 在初始渲染的时候，返回的状态(state)与作为第一个参数(initialState)传递的值相同。 setState函数用于…"}, {"id": "6844903605225406471", "title": "React div 实现一个 textarea", "desc": "看到 React，又要多加一句：切，跟用什么库有什么关系。实际上在使用的时候，我还是遇到了一点微小的麻烦。 在 textarea 中，所有内容都会变成文本，但是在 div 中，我们很容易受到转义的影响。"}, {"id": "6844903832263065607", "title": "React事件处理之连蒙带猜", "desc": "所在的前端小组要求组内成员每周轮流分享，眼看这周就轮到我了，便思考如何能顺利得\"混过\"这次分享。 得和工作搭点边，一点不搭\"ga\"的话意义不大。得通俗易懂，源码啥的太难了担心组员们听不懂(其实是自己看不懂源码)。希望以后... 想起了之前遇到过的，有些疑惑的 React的事件问…"}, {"id": "6904656397171228680", "title": "React学习笔记（2）Router", "desc": "渲染后也就是一个 a 标签。但是在写的时候尽量还是选择Link,因为Link内部做了一些特殊的处理，可以实现很多操作。它的 to、query、hash属性会被组合在一起并渲染为 href 属性。 NavLink 和 Link 的差别在于，它有内置方法，只要点击，就会触发添加上类…"}, {"id": "6844903779372908557", "title": "Fusion组件库是如何支持多语言能力的", "desc": "随着国际化发展，多语言的需求越来越常见，单一的语言已经远不能满足需求了。作为一个组件库，支持多语言也是基本能力。 多语言功能的本质其实是文本的替换，一个词汇“OK”，在英文语境下是“OK”，日语语境下是“確認”，中文语境下可能是“确定”也可能是“确认”“好的”等等。 本文将以简…"}, {"id": "6941309092858331143", "title": "手把手教你React Hooks", "desc": "1. useState 因为每次状态更新，React内部都会重新生成一个useState函数，一次更新对应一个useState函数，所以最新的一次更新只能拿到上次更新完的state值，如果要拿到最新的状态值需要借助下一个hook（useEffect），继续往下看... 2. u…"}, {"id": "6844903736352079880", "title": "使用React-Hooks开发聊天室之2.0版本", "desc": "React 在前端界大行其道将近三年了，他带来的数据与 UI 绑定的优势，让我们告别了 jQuery 和 DOM，让我们把注意力集中到单向数据流上，我们可以把一大个 web app 拆分成小的，独立的，可重用的组件， 两年前我刚刚接触 React，自学开发了聊天室第一版，当时对…"}, {"id": "6844903508727201799", "title": "阿里云前端周刊 - 第 31 期", "desc": "1. 利用 Dawn 工程化工具实践 MobX 数据流管理方案 项目在最初应用 MobX 时，对较为复杂的多人协作项目的数据流管理方案没有一个优雅的解决方案，通过对MobX官方文档中针对大型可维护项目最佳实践的学习和应用，把自己的理解抽象出一个简单的todoMVC应用，供大家交…"}, {"id": "6844904174451163143", "title": "关于React JSX", "desc": "最近团队里的PM想要给项目都加上埋点，然后问题由此产生。 就一个简单的埋点。嗯，就这样，大家都懂。 埋点就是，用来统计各种事件数据传递。比如说页面访问量，按钮的点击，代码的错误日志的统计...... 项目就是一个react项目。。。 老大希望能够有一种统一、优雅、不侵入业务的方…"}, {"id": "6844903654521045000", "title": "React 16.x折腾记 - (2) 实现路由动效过渡,并解决过程中奇奇怪怪的问题", "desc": "希望对小伙伴有所帮助。"}, {"id": "6844903614243323918", "title": "协程在RN中的实践", "desc": "本篇并不是 ScrollView 的新轮子, 而是对比两种实现方式的差别, 来认识coroutine. 要实现的是一个对 RN 中 ScrollView 的封装, 给它添加一个隐藏的 Header, 具有下拉刷新功能. 假设你已经对 js 的 Iterators and gen…"}, {"id": "6844903625790062599", "title": "🚀HeyUI完成国际化支持啦🌏🇨🇳🐼", "desc": "距离上一次的TextEllipsis两周，终于又要迎来一次大的变动了。 是的，我终于把HeyUI的国际化写完了，还顺便把整个网站翻译了一遍。 总之，花费大半个月的时间。 😂😂， 默默回首我的端午假期..... 首先，我们已经有了英文版的系统啦。 HeyUI默认使用中文，如果…"}, {"id": "6844903774641733640", "title": "【连载】浅析React生命周期之一：挂载阶段", "desc": "学习React有一个很重要的概念需要弄清楚，那就是React组件的生命周期，以及它跟 setState 所引起的 React生命周期钩子的调起情况。React 生命周期分为挂载阶段、更新阶段和卸载阶段。下面我将使用 create-react-app 做一个简单的分析，React…"}, {"id": "6936578296545017892", "title": "React Fiber 架构学习", "desc": "最近读的几篇 react 文章，老文章读来也有收获。 React 用来比较两个元素树，决定哪部分需要改变的算法。 React 在更新时，有些元素的属性和状态是没有改变的，全部更新一遍会造成浪费，导致处理速度变慢，使用更多的资源等，这就需要一些优化手段，而这些优化就是 recon…"}, {"id": "6844903742014226445", "title": "『React Navigation 3x系列教程』之React Navigation 3x开发指南", "desc": "随着React Navigation逐渐稳定，Navigator也被光荣的退休了。在React Native生态环境中需要一款可扩展且易于使用的导航组件，Navigator 自然胜任不了，这时React Native社区便孕育出了一个开源导航组件React Navigation…"}, {"id": "6971406007989698568", "title": "[React源码系列1]React中的JSX", "desc": "一、什么是JSX 二、React中的JSX 2.1 React元素 2.2 JSX表达式 2.3 JSX属性 像class需要写成className，for需要写成htmlFor 2.4 JSX表示对"}, {"id": "6844903846636945415", "title": "React 30 秒速学：把数组数据渲染为列表、表格", "desc": "通过数组渲染元素列表。 使用 isOrdered prop 的值有条件地渲染<ol>或<ul>列表。 使用Array.prototype.map将data中的每个项目渲染为<li>元素，给它一个由其索引和值的串联产生的key。 默认情况下，省略 isOrdered prop 以…"}, {"id": "6844903548883304462", "title": "翻译：展示组件和容器组件", "desc": "我找到了一个当我们在写react应用时非常有用的模式。如果你写过一段时间的react，你可能已经发现了它。这篇文站很好的解释了它，但是我想补充一些观点。 如果将组件划分为两类，你会发现组件重用起来更加容易。我把这两类称为Container和Presentational。也有其他…"}, {"id": "6844903601689591815", "title": "React 深入系列５：事件处理", "desc": "Web应用中，事件处理是重要的一环，事件处理将用户的操作行为转换为相应的逻辑执行或界面更新。在React中，处理事件响应的方式有多种，本文将详细介绍每一种处理方式的用法、使用场景和优缺点。 点击Button的事件响应函数是一个匿名函数，这应该是最常见的处理事件响应的方式了。这种…"}, {"id": "6844903620454907918", "title": "Redux源码分析--数据中心篇", "desc": "在如今的前端浪潮中，React和Redux有着举足轻重的地位。React，Redux再加上用于链接他们的代码库就足矣让一些没有足够经验的开发者迷失到代码的海洋里，很容易让程序员们培养成一种别人怎么写我就怎么写的编码习惯，难怪许多大神会说这是最好的时代但也是最坏的时代。 今天我想…"}, {"id": "6844903620526211086", "title": "react-native 0.56.0版本更新日志", "desc": "欢迎来到2018年6月发布的React Native！超过53个贡献者自3月份以来共提交了768次提交 - 我们非常感谢你们每一个人。 正如你将在一秒钟内看到的那样，这个新版本有一些重要的突破性变化，需要大量的额外努力才能达到稳定的0.56。这是6月从每月发布周期中跳过的主要原…"}, {"id": "6844903705565724679", "title": "揭开React中server-side rending的神秘面纱", "desc": "Server-Side Rendering :SSR 是一种前端框架能够在后端渲染出HTML的能力。那些能够在客户端和服务端完成渲染的应用就叫做universal app 为了理解为什么需要SSR，这里我们需要了解下web应用在过去十年内的发展史。SSR与SPA(Single …"}, {"id": "6911962323636879367", "title": "react组件开发进阶实用技巧", "desc": "如组件内需要共享一些数据，可以使用 react.createContext 配合 react.useContext 进行组件跨层级数据透传。"}, {"id": "6844903834678984717", "title": "React-hooks 简介", "desc": "在之前的 React 版本中，组件分为两种：函数式组件（或无状态组件(StatelessFunctionComponent)）和类组件，而函数式组件是一个比较的纯洁的 props => UI 的输入、输出关系，但是类组件由于有组件自己的内部状态，所以其输出就由 props 和 …"}, {"id": "6948693277868556324", "title": "react浅析", "desc": "1. react 16 版本生命周期有哪些? 2. props 和 state 的区别? 3. setState 是同步的还是异步的? 4. react hook 不要在循环, 条件或嵌套函数中调用 hook, 确保总是在你的 React 函数的最顶层以及任何 return 之…"}, {"id": "6844903709017636871", "title": "React(二)-组件和数据", "desc": "const Div = ( )=>React.createElement('div',... ) 该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 Java…"}, {"id": "6844903513756008461", "title": "浅入浅出Vue", "desc": "本篇主要是一些vue的学习总结。开始写的原因——也是工作中，对于它的使用，逐渐增多了。并且也觉得是时候做一个总结。其实，我也算是三大框架的使用者啦！！！从最早期的angular，中期的react，直至vue。那么，就此开始做一个总结。如果你喜欢我的文章，欢迎评论，欢迎Star~…"}, {"id": "6844903497624715278", "title": "从Preact了解一个类React的框架是怎么实现的(二): 元素diff", "desc": "首先欢迎大家关注我的掘金账号和Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 其实我在阅读React源码的时候，真的非常痛苦。React的代码及其复杂、庞大，阅读起来挑战非常大，但是这却又挡不住我们的React的原理…"}, {"id": "6942806811032420382", "title": "React的初体验", "desc": "在最近一段时间，经常被人问起React，脑子里面只是存在一个JSX的概念，何况在毕业一年半的时间里，工作日常中只接触到Vue，对Vue再熟悉不过。但是React框架具体怎么玩？真是一知半解。 于是便下定决心来把React学一学，看看这葫芦里到底装的什么药。 React 事件的命…"}, {"id": "6942781095293222948", "title": "React生态介绍", "desc": "声明式React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件，数据驱动视图。以声明式编写 UI，可以让你的代码更加可靠"}, {"id": "6948599218034606117", "title": "造一个 react-contenteditable 轮子", "desc": "当时试了一下确实很好玩，于是每次都可以在妹子面前秀一波操作，在他们惊叹的目光中，我心里开心地笑了——嗯，又让一个不懂技术的人发现到了程序的美🐶，咳咳。 一直以来，我都觉得这个属性只是为了存在而存在的，然而在今天接到的需求之后，我发现这个感觉没什么用的属性竟然完美地解决了我的需…"}, {"id": "6844903537030201351", "title": "Webpack实战-构建同构应用", "desc": "同构应用是指写一份代码但可同时在浏览器和服务器中运行的应用。 搜索引擎无法收录你的网页，因为展示出的数据都是在浏览器端异步渲染出来的，大部分爬虫无法获取到这些数据。 对于复杂的单页应用，渲染过程计算量大，对低端移动设备来说可能会有性能问题，用户能明显感知到首屏的渲染延迟。 为了…"}, {"id": "6844903624603090952", "title": "深入理解React的组件状态", "desc": "这几天在阅读徐超老师的《React 进阶之路》，然后在看看自己之前的《React Native移动开发实战》，发现之前我自己的书部分写的比较的浅显，最近打算对基础部分进行升级，加大基础部分，特别是React基础部分的讲解，并对React Native提供的组件部分进行升级。"}, {"id": "6844903865867845645", "title": "[译] 构建大型 React 应用程序的最佳实践", "desc": "本文将介绍构建大型 React 应用程序的步骤。在使用 React 创建单个页面应用程序时，代码库很容易变得杂乱无章。这导致了很难对应用程序进行调试，甚至使更新或扩展代码库变得更加困难。 在 React 生态系统中有很多不错的库可以用来管理应用程序的某些方面，本文将深入介绍其中…"}, {"id": "6844903833202589709", "title": "React 进阶之高阶组件", "desc": "具体而言，高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。 通常我们写的都是对比组件，那什么是对比组件呢？对比组件将 props 属性转变成 UI，高阶组件则是将一个组件转换成另一个组件。 高阶组件在 React 第三方库中很常见，比如 Redux 的 …"}, {"id": "6844903854593540103", "title": "用惰性加载优化 React 程序😴", "desc": "惰性加载是一种优化 Web 应用和移动应用的旧技术。非常直截了当 —— 如果在某一时刻资源没有被查看或需要，就不要渲染它们。例如，如果我们有一个要显示的文章列表，开始时应该只渲染视口上的内容。这意味着其他元素将在以后按需呈现（当它们位于视口中或即将在视口上时）。 大多数时候，我…"}, {"id": "6844903591459848205", "title": "大二新人的一次搜狐前端实习电面", "desc": "暑假想找一份实习，碰巧看到了学长的搜狐内推，就把自己的没有诚意的简历投了过去，过了一个多星期收到了电话面试的邮件(十分怀疑是学长面子比较大)。 Promise 本质是一个状态机。每个 promise 只能是 3 种状态中的一种：pending、fulfilled 或 rejec…"}, {"id": "6844904166393905165", "title": "React组件生命周期", "desc": "1. 不安全钩子函数 2. 挂载过程 3. 更新过程 shouldComponentUpdate(nextProps,nextState)说render重要那是因为render函数决定渲染什么, 而shouldComponentUpdate函数重要那是因为它决定了一个组件什么时…"}, {"id": "6844903811165732877", "title": "分享三个React组件", "desc": "简单介绍三个React组件吧。 自动管理图片的loading和error状态, 并显示不同提示. 图片浏览器, 可以放大/移动/切换等. 已集成到Image中, 可以通过preview={false}关闭预览功能. 可固定表头及两侧的表格. 还有一点就是antd的表格功能太强大…"}, {"id": "6983695638206611493", "title": "react笔记", "desc": "useEffect 可选第二个参数，这个参数是什么作用呢？如果 count 的值是 5，而且我们的组件重渲染的时候 count 还是等于 5，React 将对前一次渲染的 [5] 和后一次渲染的 [5"}, {"id": "6844904166704447502", "title": "React有关的一些考点总结", "desc": "key值的作用是给同级的元素添加一个唯一标识，因为在React diff算法中，是根据key值来判断元素是否是新增还是移动等等，减少了不必要的元素重渲染。React 还需要借助 Key 值来判断元素与本地状态的关联关系。 shouldComponentUpdate 方法是用来判…"}, {"id": "6906376659310477319", "title": "【React全解4】useEffect--在函数组件中使用生命周期函数", "desc": "React V 16.8.0 推出的 Hooks API，其中 React.useState 可以解决问题。 React V 16.8.0 推出的 Hooks API，React.useEffect 可以模拟生命周期函数。 可以看见，无论我点击多少次按钮使得 n,m 值发生变化…"}, {"id": "6844903556605034509", "title": "深浅拷贝与react之immutable.js", "desc": "深拷贝和浅拷贝只针对像Object,Array这样的复杂对象，对于基本的数据类型，则不存在深拷贝和浅拷贝的区别。浅拷贝只是复制了对象的一层属性，而深拷贝则是递归复制了所有的层级。 浅拷贝只能拷贝引用，指向的还是原来的对象，自然也会影响原来的对象。深拷贝则是在堆（数据结构老师讲过…"}, {"id": "6844903912223293447", "title": "[译] React v16.9.0 and the Roadmap Update", "desc": "今天我们正式发布了 React 16.9. 这次更新包含了一些新的特性，bug的修复，还通过增加一些废弃 api 的警告去帮助开发者更好的为新的大版本迭代做准备 React 16.9 不包含破坏性的更改, 这些老的 api 名称 任然可以在这个版本中使用。 但是当你使用这些方法…"}, {"id": "6844903833898844173", "title": "使用React构建精简版本掘金（五）", "desc": "Redux通过reducer解析action。reducer是一个普通的js函数，接受action作为参数，然后返回一个新的state。 Redux应用只维护一个全局的状态对象，存在Redux的store中。程序任何时候都不能直接去修改状态state，如果需要修改state，必…"}, {"id": "6844903635843809294", "title": "Flux 深度解读(翻译)", "desc": "FLux 是 facebook 用于构建 Web 客户端的一种应用架构。它利用单向数据流，来帮助复杂的 React 组合组件的状态管理。它是一种模式，而不仅仅是一个框架，你可以不需要写任何新代码来将 Flux 直接应用到你的应用当中。 基于 Flux 的应用程序需要包含三个主要…"}, {"id": "6844903501542375431", "title": "源码看React 事件机制", "desc": "对React熟悉的同学都知道，React中的事件机制并不是原生的那一套，事件没有绑定在原生DOM上，发出的事件也是对原生事件的包装。 那么这一切是怎么实现的呢？ 首先还是看我们熟悉的代码 这是我们在React中绑定事件的常规写法。经由JSX解析，button会被当做组件挂载。而…"}, {"id": "6844903864785731597", "title": "react源码浅析(六)：到期时间的计算规则", "desc": "react主要把到期时间分为两种：异步任务到期时间与交互动作的到期时间。在这之前需要了解一下一些重要的函数，react的到期时间与系统的时间ms不是1：1的关系，低优先级异步任务的两个时间间隔相差不到250ms（相当于25个单位的 到期时间）的任务会被设置为同一个到期时间，交互…"}, {"id": "6935737152663715877", "title": "React question", "desc": "React下一代调和算法Fiber会通过开始或停止渲染的方式优化应用性能，其会影响到componentDidWillMount的触发次数。对于componentDidWillMount这个生命周期函数的调用次数会变得不确定，React可能会多次频繁调用componentDidW…"}, {"id": "6918214402101477389", "title": "深入 React Fiber 内部", "desc": "从 React 16 开始，React 重新实现了 reconciliation 算法，它被称为 Fiber Reconciler。在 React 16 之前你可能听说过 virtualDOM，那是老的 reconciliation 算法，老的 reconciler 算法使用了…"}, {"id": "6951598310591299591", "title": "react---hooks", "desc": "1.react的hooks是干什么的说白了，就是拿function当组件，因为之间用react定义组件用的class关键字，人家嫌麻烦，代码量太大，就折腾了这货，直接一个function就是一个组件。"}, {"id": "6844903564720996359", "title": "窥探React - 源码分析", "desc": "所谓知其然还要知其所以然. 本文将分析 React 15-stable的部分源码, 包括组件初始渲染的过程和组件更新的过程.在这之前, 假设读者已经: 首先, 我们找到React在Github上的地址, 把15-stable版本的源码copy下来, 观察它的整体架构, 这里首先…"}, {"id": "6844903586170667015", "title": "Ant design的Notification源码分析", "desc": "notification就是通知提醒框，在系统四个角显示通知提醒信息。经常用于以下情况： 较为复杂的通知内容。 带有交互的通知，给出用户下一步的行动点。 系统主动推送。 先来看一下notification的API。 可以看到，notification的API在antd的组件中可…"}, {"id": "6844904202599137287", "title": "手写一个简易的Hooks风格多模块Redux", "desc": "在用React开发项目时，多多少少需要状态管理，各种状态管理库层出不穷。但有时候一个项目不需要太重的状态管理库。React 16.8后推出了Hooks写法，我们可以利用这一个新特性，手写一个Hooks风格的简易多模块Redux。 我们创建了StateContext和Dispat…"}, {"id": "6844903656332984334", "title": "Uber开源Fusion.js：一个基于插件架构的通用Web框架", "desc": "可能很多人都不知道，Uber其实开发了很多基于Web的应用程序，可能有数百个，而且这个数字还在不断增加中，它们中的大部分被用在公司内部，用于管理各种业务。 我们知道，Web技术变化得很快，而最佳技术实践也在不断发展。为数百名Web工程师提供高质量的框架和功能，同时又要保持Web…"}, {"id": "6844903587970023431", "title": "移动端手势库AlloyFinger源码分析", "desc": "AlloyFinger 是由腾讯前端团队 AlloyTeam 出品的一个小巧轻量级的移动端手势库，整个手势库的代码不超过400行，却支持绝大多数的手势操作，能够满足日常的开发需求。AlloyFinger传送门： AlloyFinger。 手机移动端浏览器提供了4种触摸事件：to…"}, {"id": "6844903805021224968", "title": "使用React构建精简版本掘金（三）", "desc": "本篇文章为使用React构建精简版本掘金系列第三篇，想看前两篇的话，请查看第一篇,第二篇。 主要包含点赞数量显示、评论数量、收藏按钮，分享链接等。由于要常驻在左侧，且页面滚动过程中位置不变，故使用fixed定位方式，并且使用ant-design中的Avatar,Badge,Ic…"}, {"id": "6968430824588836877", "title": "学完Hooks，你会爱上React", "desc": "1.Hook的优势 Hooks的概念是React 16.8的新增特性，他可以让我们在不编写class的组件的情况下还能使用state以及其他的一些React特性。Vue3的Composition AP"}, {"id": "6844903779293200391", "title": "React 出海应用 首屏加载时间从20S降到10S以下 血泪史", "desc": "最近在做一个基于mobile app的漫画的项目，面向印尼市场。 上线后，基本测试没有问题，打开也挺顺畅。但是google analytics却反馈加载平均19s！ OMG～～于是开展了一系列的探索。。 首先说说技术栈，用的是create-react-app,redux,rea…"}, {"id": "6844903682354446344", "title": "用 React 开发小程序的探索之路 （演讲内容整理）| 掘金开发者大会", "desc": "大家好，我叫李伟涛，来自凹凸实验室。今天跟大家分享的主题是用 React 开发小程序的探索之路 。 在目前市面上已经有非常多的小程序开发框架，其中的佼佼者如 wepy 以及 mpvue ，他们都是非常优秀的小程序开发框架。但是它们都有一个共同的特点，都是通过类 vue 语法的小…"}, {"id": "6896353934525497357", "title": "React的useContext的使用", "desc": "使用useContext在改变一个数据时，是通过自己逐级查找对比改变的数据然后渲染，而不是通过数据响应式来监控变量的。"}, {"id": "6893675335888404493", "title": "蒲公英 · JELLY技术周刊 Vol.29: 前端智能化在阿里的那些事", "desc": "React 17 中引入了新的 JSX 语法转换机制，好处除了书写 JSX 时不再需要提前引入 React 对象外，还做了一些性能优化和概念简化的工作。如 key 独立于其它 props 而单独传递，不建议在函数式组件中使用 defaultProps 等。文章介绍了相关背景和大…"}, {"id": "6937099371536695333", "title": "SEO 在 SPA 站点中的实践", "desc": "本文从 SPA 站点实现 SEO 作为切入点, 先后介绍了 SEO 的基本原理, SEO 在 SPA 站点中的 4 种实践案例, 并结合 create-react-doc SPA 框架进行完整的 SEO 实践。 观察基于 create-react-doc 搭建的文档站点, 发现…"}, {"id": "6925298809924747272", "title": "先不要看HOOKS原理了，你真的知道useEffect运行的顺序吗？", "desc": "在异步套异步会怎么样？中，为什么产生的异步副作用会只update不刷新。"}, {"id": "6960548967541112868", "title": "在nextjs中捣腾一下暗黑主题", "desc": "在nextjs中对antd的亮白和暗黑主题切换实践。源码https://github.com/imzbf/nextjs-start"}, {"id": "6907498065846861831", "title": "什么是 TypeScript 4.1 中的模板字面类型？", "desc": "写了这么多年 TypeScript，最大的感触就是它非常易于理解——特别是对于具有 Java 背景的人。 但是，在听说了 TypeScript 4.1（该语言最近的重大更新）的新闻之后，我还是为新鲜的特性感到惊奇。 我不认为我是个无知的例外。 在利用该新闻作为机会来深入了解类型…"}, {"id": "6955156360820424712", "title": "React lazy 懒加载和权限拦截器", "desc": "初学React，在路由方面遇到了很多问题：路由的代码拆分、路由的懒加载、路由守卫等等。今天主要讲讲我是怎么解决这三方面的问题的。也望各位大佬们指点指点... 首先使用命令行安装下列npm包： 这是我的"}, {"id": "6844903700989739021", "title": "腾讯 Omi 生态发布", "desc": "Omi 4.0 发布至今，收到了大量的意见和建议以及真刀真枪的 PR，虽然现在接受 Omi 都是外国友人，但是随着 IE 市场份额的慢慢消失，可以遇见的未来，国人也会慢慢拥抱 Omi。Omi Team 经过一个星期的努力，终于完成了核心的生态的构建，用来服务海量的开发者，当然这…"}, {"id": "6985921304700387364", "title": "React 学习之 PureComponent 与 React.memo", "desc": "React 组件渲染优化，纯组件 PureComponent 与 React.memo 函数原理分析与简单实现，从而避免一些不必要的渲染，以及相关注意点提点"}, {"id": "6844904007018741774", "title": "React组件封装思路拓展", "desc": "如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。 在我的一些文章中，不管是自己写的还是翻译国外优秀开发人员博客的。其中一个主线就是，了解了JS基础，来进行前端模块化实践。尤其现在前端比较流行的框架React、Vue都是提倡进行对页面利用组件进行拆分。这其实就是MVVM的设…"}, {"id": "6844904180755202055", "title": "基于Bpmn-js的流程设计器校验实现", "desc": "它根据一组已定义的规则来验证您的图表，并将其报告为错误或警告。它可以从命令行检查您的BPMN图，或者通过bpmn-js-bpmnlint将其集成到我们的BPMN建模器中： 库的核心是用于检测BPMN图中某些模式的规则。每个规则都是由一段代码定义的，该代码可以检测并报告从丢失标签…"}, {"id": "6995742588121088031", "title": "React-setState函数必须掌握的pendingState状态", "desc": "最近开始从vue转向react，当然是从最基础开始一步一步踏实学起。 当使用到setState这个Api碰到了一点有意思的疑惑，用一个浅显易懂的Demo结合源码来看一看。"}, {"id": "6844903700436107278", "title": "浅析前端状态管理", "desc": "前端技术的发展日新月异，vue,react，angular等的兴起，为我们带来了新的开发体验。但随着技术的革新，以及前端页面复杂度的提升，对应有localStorage，eventBus，vuex，redux，mobx，rxjs等数据存储和管理的方案，所以觉得研究状态管理还是很…"}, {"id": "6961927044326227976", "title": "极简的方式实现一个Antd一样message组件 ", "desc": "在React项目里，像message这样的需要额外插入节点的组件要怎么极（最）简（懒）的实现，又要优雅一点，显得不那么像小学生呢？"}, {"id": "6982429854440357918", "title": "菜鸟读代码记录（一）", "desc": "阅读别人的代码是工作和学习的重要一环，本系列是我阅读一些项目代码时的心路历程的记录。限于个人能力和经验，文中肯定存在各种各样的不足，请多多指教。 作为系列的第一篇，本文中的被害者是一个名为rc-fie"}, {"id": "6844904190469210125", "title": "15 个很有用的自定义 React Hooks", "desc": "React 提供了自定义 Hooks 的特性，我们可以根据这个特性创建出很多有意思的功能，今天就来分享一些个人认为还不错的 Hooks，共计 15 个。 useClippy 是一个用来读取或写入粘贴板的自定义 Hook，支持 TypeScript。 useWindowSize …"}, {"id": "6973168097922383903", "title": "react项目Jest+Enzyme单元测试集成至gitlab-下篇", "desc": "上一篇文章我们介绍了从零搭建至集成到gitlab 中，认真看上一篇文章的同学知道我们在代码提交前进行了pre-commit，单测不通过的代码是不行进行提交的，但是这只是进行本地的一个控制，还是有很多手"}, {"id": "6844903798029172743", "title": "前端数据层的探索与实践（一）", "desc": "在使用redux的过程中，由于业务复杂度的提升，store里面存储的数据越来越多，通常会有多层次的嵌套和重复数据。同时在与后端交互的过程中，我们经常会讨论是否要按照UI的层次结构来返回数据，结果被后端驳回，因为如果后端从数据库中取到数据后，还要特意为前端加一层转换，一来是考虑到…"}, {"id": "6909628194425405447", "title": "函数组件---React Hooks", "desc": "不要在循环，条件或嵌套函数中调用 Hook, 确保总是在你的 React 函数的最顶层调用他们。 不要在普通的 JavaScript 函数中调用 Hook。你可以： 官方还提供了 linter插件 用来强制hooks的使用规则。 返回一个 state，以及更新 state 的函…"}, {"id": "6844903520492060686", "title": "React + Canvas 像素风格取色器", "desc": "有时候我们需要通过图片去获得具体像素的颜色。而强大的 Canvas 为我们提供了现成的接口。 这个功能其实并不难，只不过我们需要正确的理解 Canvas 并学会利用它的 API 。 我不会详细得写下每一个步骤，但是你可以一边参照源码，一边配合这篇教程进行阅读。 首先，我们需要基…"}, {"id": "6844903744933625864", "title": "React-router4源码浅析", "desc": "router作为当前盛行的单页面应用必不可少的部分，今天我们就以React-Router V4为例，来解开他的神秘面纱。本文并不专注于讲解 Reacr-Router V4 的基础概念，可以前往官方文档了解更多基础知识 Q1. 为什么我们有时看到的写法是这样的 Q2. 为什么v4…"}, {"id": "6844903696845766663", "title": "学react哪家强，阿宽带你看React的生命周期", "desc": "学习一个框架，最重要的莫过于对生命周期的理解了。嗯，很懵，但是人傻就是要多看书，多看掘金上的优秀文章，看了两篇React生命周期的文章之后，大概也能懂得个大概。就记录一下吧 ～ 1 . 当使用 ES6 classes 编写 React 组件时，其实就是调用内部方法 create…"}, {"id": "6844904015424126990", "title": "使用React制作一个滑动轮播展示组件", "desc": "这是一个展览列表的滑动轮播组件，点击左右按钮就可以进行左右滑动，每次可以滑动指定的数量，以及可以指定展示多少行的内容。 因为本人采用的是React + Typescript来做项目的，大家如果有看不懂也没关系的！换成普通的html跟js也差不多的。 这是一个将要用于展示的数据列…"}, {"id": "6844903634673598478", "title": "WebRTC点对点通讯架构设计", "desc": "这是我在公司内部的一次分享，想要让小伙伴对WebRTC都有所了解，并且可以上手去做一个基于webrtc的应用。虽然几乎所有人都知道，webrtc是一个浏览器端内置的点对点接口，甚至是准标准了。但是，到底怎么利用这一个已经不是新特性，但是很不幸的是，不少人对这东西还是只停留在听说…"}, {"id": "6844903662171455496", "title": "RN开发-使用pushy进行热更新", "desc": "RN开发-使用pushy进行热更新"}, {"id": "6844903519955189774", "title": "Typescript+React+Redux-Observable脚手架", "desc": "强类型的JavaScript，提高编码、debug效率 facebook开源库，基于JSX语法创建组件 可预测状态容器，最流行的react状态管理方案 虚拟化容器，一键打包部署发布 npm install -g typescript git clone git@github.c…"}, {"id": "6844903607540645896", "title": "React 快速上手 - 03 脚手架创建项目 一切都是组件", "desc": "通过脚手架创建项目 运行项目 了结项目结构 动手创建组件"}, {"id": "6844903571060228103", "title": "react 热区匡选、图片裁剪组件", "desc": "如何快速实现一个某宝商家后台热区匡选功能？"}, {"id": "6844903801317490701", "title": "《深入react技术栈》之表单", "desc": "在react中，提出了受控与非受控组件，对比我们之前的做法，非受控组件就相当于我们之前的版本，没有默认值，或者一般将初始状态进行设定，而受控组件指的是为其指定默认值以及为事件绑定与控件对应的值。 在react建议中，一般都建议我们写受控组件，这样应用的状态以及数据可以实时把握，…"}, {"id": "6844903598288011272", "title": "Redux 高级 -- 源码分析", "desc": "如果没有设置最初的 state，第二个参数也可以传 enhancer，也是会正确执行的。 接下来我们一个个来看 store 对象里的这些成员。 dispatch 只接收一个参数，那就是 action，最终返回这个 action。 可以看出,我们传进去的参数 reducer 必须…"}, {"id": "6844903925661827086", "title": "「 React TS3 专题」从创建第一个 React TypeScript3 项目开始", "desc": "关于 React、TypeScript 的介绍和其在前端的重要地位，想必大家都很清楚吧，在这里笔者就不介绍了。你也许会问为什么要基于 TypeScript3 构建 React ？不同的人也许有不同的答案，由于 TypeScript3 和 React 分别来自微软和Faceboo…"}, {"id": "6844903740944695310", "title": "用 nodejs 写一个命令行工具 \b：创建 react 组件的命令行工具", "desc": "上周，同事抱怨说 react 怎么不能像 angular 那样，使用命令行工具来生成一个组件。对呀，平时工作时，想要创建一个 react 的组件，都是直接 copy 一个组件，然后做一些修改。为什么不能将这个过程交给程序去做呢？当天晚上，我就仿照 angular-cli 的 a…"}, {"id": "6844903788927516680", "title": "浅谈 React Hooks（二）", "desc": "在上一篇文章中，我们谈到 Hooks 给 React 带来的一些在开发体验上的改变，如果你已经开始尝试 React Hooks，也许你会跟我一样碰到一个令人疑惑的地方，如果没有的话，那就再好不过啦，我就权当做个记录，以便他人之需。 看到onClick绑定的那个匿名函数了吗？这样…"}, {"id": "6844903917814284295", "title": "进击React源码之磨刀试炼1", "desc": "clone一份yck大神带注释的源码(版本16.8.6)或者去imooc购买课程可以看jocky大神课程对应的源码（当然感觉没时间看视频或者经费紧张的小伙伴可以先研究博客，自己感觉这样下来学到东西会更多），当然自己也得有一份官方的源码，这里我clone了16.9.0的。 进入r…"}, {"id": "6976879651897475103", "title": "理解React Hook 之 useCallBack", "desc": "前言 刚写完一篇对useMemo的理解，赶紧趁热写写我对useCallBack的理解 useMemo 和 useCallBack 的区别 简单来说，useMemo为了解决不必要重复渲染的方法，特地缓存"}, {"id": "6844903624695349262", "title": "用react全家桶+antDesign写了一个习惯管理项目", "desc": "项目github地址项目初衷该项目从创建自己第一个习惯开始，每天一签到，签到后可以发表这一天的心得体会，这些心得体会会公布在社区，其他用户可以对某一条心得体会进行收藏和评论；旨在通过每天的记录和不断的"}, {"id": "6844903510497034254", "title": "React 异常处理", "desc": "在React 15.x版本及之前版本中，组件内的UI异常将中断组件内部状态，导致下一次渲染时触发隐藏异常。React并未提供友好的异常捕获和处理方式，一旦发生异常，应用将不能很好的运行。而React 16版本有所改进。本文主旨就是探寻React异常捕获的现状，问题及解决方案。 …"}, {"id": "6844904056545083405", "title": "React before16.3与after 16.3的生命周期详解以及简单应用场景", "desc": "constructor( props )：React的构造函数一般用来初始化state和为事件处理函数绑定实例，如果需要引入订阅或者副作用则请使用componentDidMount。 componentWillMount( )：它在render之前被调用，但不要在这里加入thi…"}, {"id": "6844903544915689480", "title": "[译] redux-recompose 介绍：优雅的编写 Redux 中的 action 和 reducer", "desc": "去年一年做了不少 React 和 React Native 项目的开发，而且这些项目都使用了 Redux 来管理组件状态 。碰巧，这些项目里有很多具有代表性的开发模式，所以趁着我还在 Wolox，在分析、总结了这些模式之后，开发出了 redux-recompose，算是对这些模…"}, {"id": "6844903591908474887", "title": "Redux 入门 -- 基础用法", "desc": "一天，程序员阿大（化名）想要去买水果吃，发现小区周围居然没有水果店，于是就打算自己开一个水果店赚点小钱。 阿大分析了一下水果店的营业模式。其实就是处理每一位顾客的需求，然后记账看看每天的盈亏。那么抽象成程序就是监听顾客的行为，并把每个行为的结果都记在账上，这正好是 redux …"}, {"id": "6844903812633722887", "title": "使用React构建精简版本掘金（四）", "desc": "该页面从布局来说分左右两部分，左边有分为输入框和已发表内容部分。 我这里采用了ant-design中的input作为输入框，而掘金是采用了可编辑的div来实现输入内容,通过设置contenteditable=\"true\"实现，感兴趣的小伙伴可查阅相关资料。 发布按钮的disab…"}, {"id": "6961700531228114980", "title": "react-redux 源码解析（3） -- Connect（下）", "desc": "react-redux 源码解析 --- connectAdvanced 、ConnectFunction、checkForUpdates"}, {"id": "6904889804442632200", "title": "React Hook 学习笔记之-useEffect", "desc": "一般来说,业务组件经常会遇到要通过发起ajax请求来获取业务数据并且执行初始化操作的场景。 在使用class component编程时,我们就可以在class component提供的生命周期钩子函数(比如componentDidMount,constructor等)执行这个操…"}, {"id": "6844903892984004615", "title": "漫谈 Webpack 之服务端渲染、客户端渲染和同构", "desc": "页面由服务端直接返回给浏览器，路由为服务端路由，URL 的变更会刷新页面，原理与 ASP，PHP 等传统后端框架类似。 页面在 JavaScript，CSS 等资源文件加载完毕后开始渲染，路由为客户端路由，也就是我们经常谈到的 SPA（Single Page Applicati…"}, {"id": "6844903606714368007", "title": "Babel知识体系浅谈", "desc": "Babel是一个JavaScrpit的编译器，从宏观的角度来看，它有三个运行阶段：解析，转化，生成。基本上如果不设置配置文件.babelrc，Babel运行的结果便是 const babel = code => code ，通过读取代码，最后生成一样的代码。Babel的最核心的…"}, {"id": "6844903606743728135", "title": "配置式支持权限管理的 React 路由组件", "desc": "支持权限管理的配置式 React 路由，支持字符串，数组，函数等类型权限传入，自动判断当前路由权限，无权限自动跳转至配置的页面（如登陆页），配合 react-intl-context 及 react-sider 轻松创建多语言版本企业级中后台管理项目。"}, {"id": "6844903651610214407", "title": "从 0 到 1 实现 React 系列 —— 4.优化 setState 和 ref 的实现", "desc": "看源码一个痛处是会陷进理不顺主干的困局中，本系列文章在实现一个 (x)react 的同时理顺 React 框架的主干内容(JSX/虚拟DOM/组件/生命周期/diff算法/setState/ref/...)"}, {"id": "6844903513093308424", "title": "React 中的 Render Props", "desc": "最近 render props 在外网挺火，在逛 medium 的时候看到好几篇文章都是关于它的，由于笔者目前在做毕业设计，业务逻辑上不难实现，所以在这个过程中更多的考虑去尝试一些新的东西。在详细阅读了几篇文章后笔者也在自己的项目中用上了render props，这里就说说在这…"}, {"id": "6844903823387918349", "title": "React源码解析之Commit第二子阶段「mutation」(中)", "desc": "前言在上篇文章中，我们讲了「mutation」子阶段的插入(Placement)操作，接下来我们讲更新(Update)和删除(Deletion)操作：一、commitWork()作用：对DOM节点上的"}, {"id": "6844903635646677005", "title": "为什么我们从Angular 2迁移到Vue.js（为什么我们没有选择React）", "desc": "在Rever（www.reverscore.com），我们刚刚使用Vue.js发布了我们的Web客户端的新版本。经过641次提交和16周的紧张开发，我们非常自豪之前做出的决定。 8个月前，我们的前端在使用Angular 2.确切地说，它使用的是Angular 2 beta 9.…"}, {"id": "6844903615052644365", "title": "[译] 使用 styled-components 的 React 服务端渲染极简指南", "desc": "本指南旨在分享服务端渲染的 React App 中使用 style-components 的核心原则。当你意识到把 styled-components 集成到你的程序中是多么的完美，它的美才真正凸显出来。除此之外，styled-components 还很容易集成到使用其他样式方…"}, {"id": "6844903647034212365", "title": "React菜鸟入门之setState", "desc": "作为一名入职前基本没有接触过React的小菜鸟，在接手的第一个练手项目中，很快就遇到了许多React初学者都会遇到的问题-setState。 最初的设想是先通过this.setState设置state中的数据，然后再取用this.state。当然，结果不出所料的悲剧了。。苦思不…"}, {"id": "6844903576918032392", "title": "React生命周期简明宝典", "desc": "1. constructor ES6中每个类的构造函数，要创建一个组件的实例就要调用相应的构造函数。 但是并不是每个组件都要定义自己的构造函数，比如无状态的React组件。一个组件调用构造函数，往往是为了两个目的： 2. componentWillMount 3. render…"}, {"id": "6844903496521613325", "title": "基于PhantomFlow的自动化UI测试", "desc": "一个项目最终会经过快速迭代走向以维护为主的状态，在合理的时机以合理的方式引入自动化测试能有效减少人工维护成本。 另一方面，当我们需要对代码进行重构或者完善，在修改结束时我们如何确定项目仅仅是被重构了，而不是被改写了？此时测试将是一根救命稻草，它是一个衡量标准，告诉开发人员这么做…"}, {"id": "6844903679389073421", "title": "Redux专题：实用", "desc": "Redux是一套精巧而实用的工具，这也是它在开发者中如此流行的原因。 所以对待Redux，最重要的就是熟练使用它的主要API，一旦将它了然于胸，就会对Redux的设计思想有一个全局的认识，也就能清楚的判断自己的应用需不需要劳驾Redux出手。 需要注意：咱们默认将Redux和R…"}, {"id": "6844903686997557261", "title": "Create React App 2.0: 集成Babel 7,Sass...", "desc": "2.0版本之前是1.5.2， 1.5.2版本是2018年2月份发布的，时隔半年之多终于迎来了一次革命性的大改变。 虽然React本身不需要任何构建依赖性，但编写一个没有快速测试运行器，生产minizer和模块化代码库的复杂应用程序可能具有挑战性。从第一个版本开始，Create …"}, {"id": "6844903752999108615", "title": "知根知底setState", "desc": "setState作为react中使用最频繁的一个API，在这里简单分享它的实现机制。 网上有很多讲解fiber的文章大多在描述fiber的算法。实际上fiber包含数据结构和算法，按照v16之前的版本理解，fiber在源码中表示虚拟DOM的一个节点 第一个setState也就到…"}, {"id": "6844903520500449288", "title": "React中组件通信的几种方式", "desc": "1. 父组件向子组件通信 2. 子组件向父组件通信 3. 跨级组件通信 4. 没有嵌套关系的组件通信"}, {"id": "6974031463826063373", "title": "基于react的字符串模板替换html方案解析", "desc": "本篇主要介绍基于react框架，对定制化的场景中，将后端返回的特殊格式的字符串文本，进行局部的样式高亮（变颜色，字体大小等）的方案解析。"}, {"id": "6995014479226339358", "title": "useSelector、useDispatch替代connect  ｜8月更文挑战", "desc": "1. react-redux 之 Hooks api 1.1 useState 的缺点 useState可以用最简单的方式更新状态，但是状态更新的逻辑（例如上面例子中的加减一运算）散落在业务代码中，不"}, {"id": "6844903714797420552", "title": "GatsbyJS 入门（一）：打造开箱即用的现代化前端网站", "desc": "GatsbyJS 是一个现代化开发网站的网站产生系统，拥有完整、丰富且开源的生态圈。它利用 React + GraphQL 产生的多页面应用，让前端工程师，编辑，用户都感到满意。就让我们一步步地探索这个系统吧。"}, {"id": "6862494892569051143", "title": "如何快速构建React组件库", "desc": "目前团队内已经有较为成熟的 Vue 技术栈的 NutUI 组件库[1] 和 React 技术栈的 yep-react 组件库[2]。然而这些组件库大都从零开始搭建，包括 Webpack 的繁杂配置，Markdown 文件转 Vue 文件功能的开发，单元测试功能的开发、按需加载的…"}, {"id": "6884047587649781767", "title": "jsx组件样式隔离的最佳实践", "desc": "前言在当今前端开发中，组件化研发模式已然是大行其道，各种基于组件化的搭建系统更是层出不穷，在提升业务研发效率的同时，组件化面临着一个痛点—组件样式隔离的问题。一个组件可能会被多个业务页面所使用，如果不"}, {"id": "6989086731026825253", "title": "基于AntDesign实现的React.js自定义可编辑表格，带翻译功能", "desc": "基于React+AntDesign实现的一个自定义的可编辑表格，主要用于数据库表字段的编辑、带翻译功能，稍作修改后也可复用到其他地方"}, {"id": "6920473687908941831", "title": "Create React App 源码揭秘", "desc": "Create React App是一个官方支持的创建React单页应用程序的脚手架。它提供了一个零配置的现代化配置设置。 平时工作中一部分项目使用的React，使用之余也需要了解其脚手架实现原理。 下面先做一些前备知识了解。 Monorepo是管理项目代码的一个方式，指在一个项…"}, {"id": "6940793969571790878", "title": "如何做一份专业的前端技术周刊 | 项目复盘", "desc": "最近掘金有一个活动是项目复盘，想来我做前端技术周刊已经有一个月了，于是过来分享下项目经历。 先贴一下项目的 Github 地址：shfshanyue/weekly，使用 Gatsby 与几个手写脚本构成的静态网站。 这是山月最近在做的一个项目: 前端技术周刊，旨在做业内最具专业…"}, {"id": "6844903605783232526", "title": "create-react-app 源码解析之react-scripts", "desc": "上一篇我们已经讲了 create-react-app里面创建package.json安装依赖并且拷贝可运行的demo等步骤。传送门 这一篇我们来讲一下 create-react-app里面的启动服务等部分，就是平时我们安装完依赖之后，启动开发服务:npm start。这一块涉及…"}, {"id": "6844903828945387528", "title": "React组件间通信", "desc": "react因为组件化，使得组件间通信十分的重要。本文就来简单介绍一些常见的react组件间传递的内容。 我将归纳为以下几种关系来详述:父组件与子组件之间，子组件与父组件之间，发布者与订阅者模式（context），兄弟组件间，redux也是一种组件管理的方法，但是redux状态管…"}, {"id": "6978779492323950622", "title": "深入认识React中的setState", "desc": "在hooks没出现之前，可以说是大部分组件都是使用类组件进行编写，那么在类组件中如果自己的状态需要修改那肯定要使用setState方法，本文章就深入剖析setState中的一些可能会坑的地方。"}, {"id": "6844903975897006093", "title": "React 路由的使用方法", "desc": "安装依赖安装路由模块：npmireact-router-dom-S基本路由首先我们新创建一个react项目(create-react-appdemo)用来演示并且删去不需要的代码，新建几个JS页面用来"}, {"id": "6844903828702101518", "title": "【中后台应用】从表单抽象到表单中台", "desc": "相信前端开发的同学，对表单其实并不陌生，而且时至今日，表单应用的编写因为React、Vue等框架的出现，也变得更加地便捷了。在前端工作中，有着很多中后台应用-表单的开发工作量，笔者自己深陷其中，所以为了让头发别掉得太快，重新去理解了表单这个东西，从而重新去思考和设计表单的开发模…"}, {"id": "6985157019632140301", "title": "React - Fiber", "desc": "本文转载自这可能是最通俗的 React Fiber(时间分片) 打开方式这篇文章。 为什么要引入 Fiber 架构 React 为什么要引入 Fiber 架构？ 看看下面的火焰图，这是React V1"}, {"id": "6932011302055477262", "title": "【KT】vscode插件开发例子系列（二）", "desc": "输入一个前缀，会得到一个或多个提示，然后回车带出很多代码。 上一个例子: 自定义侧边栏+面板虽然可以实现我们的功能，但是还是有些缺点的，毕竟我们需要根据文件路径来动态生成我们的面板内容。 首先需要明确的是：vscode有一个 vscode.workspace.rootPath，…"}, {"id": "6875331180191973383", "title": "React Hooks的丑陋一面", "desc": "在这篇文章中，我将分享我对React Hooks的观点，正如这篇文章的标题所暗示的那样，我不是一个忠实的粉丝。 让我们来分析一下React官方的文档中描述的放弃类而使用钩子的动机。 好吧，我可以同意 this 在你刚开始使用Javascript的时候可能会有点混乱，但是箭头函数…"}, {"id": "6929699562697261064", "title": "react技术栈：从原理到源码", "desc": "继续阅读之前，如果没看过这篇讲框架的文章，建议先去瞄几眼，后面的讨论中涉及到其中的概念便不再重复。 本次发布主要包括前两章，其余部分后续会陆续补齐。 react是一个ui library，使用组件构建可交互ui，并会在数据发生变化时及时更新。 我们先看一下react最初的设计思…"}, {"id": "6844903667418546190", "title": "Next.js 踩坑入门系列（二）— 添加Antd && CSS", "desc": "个人对于脚手架的UI有一种执念，如果搭建出来就是一个首页＋a标签跳转，实在不是我这个处女座的风格，因此第二步我就想引用UI框架 —— ant-design，相信很多使用react的开发者用的也都是这个UI框架吧。因为以前自己在配制的时候也经常采坑，所以还是在这里记录一下~ 既然…"}, {"id": "6947874258324946952", "title": "「超详细React项目搭建教程二」集成 Webpack5/React17", "desc": "在上一章节中我们已经使用 TypeScript/ESlint/Prettier/EditorConfig/stylelint,搭建好了前端规范的基础设施。这篇文章将会使用 webpack5 构建一个 React 应用。 因为这些能帮助我们提高代码质量。我们还会 使用 npm i…"}, {"id": "6966875463754973197", "title": "【react】事件绑定与传参", "desc": "class中的方法默认不会绑定this，所以如果事件处理函数中使用到了this，必须手动绑定this。官方介绍了四种方法： 第一种 在构造函数中绑定 优点：性能较好，只生成一个方法实例， 缺点：不能携"}, {"id": "6977349336044666917", "title": "学习一下Electron，据说很简单", "desc": "这么一来，“中用”的`Moderate`就初步集成了`Electron`，直接一行命令就能打包成一个pc和mac端都能用的应用，美滋滋，但请同学们相信，这只是第一部分🤭，敬请期待。"}, {"id": "6844903496928477197", "title": "react都这么无情了，vue还是那么有义，4种父子组件数据双向传递大法", "desc": "自定义事件可以用来创建自定义的表单输入组件，使用 v-model 来进行数据双向绑定。看看这个：input v-model=\"something\" 这个我们直接用v-model像表单那样绑定就直接可以进行父子组件双向绑定了。在v-model的语法糖里封装了v-on:input …"}, {"id": "6844903585164034055", "title": "前端入行的这三年 | 掘金技术征文", "desc": "本文将分享我的个人工作经历，介绍自己选择前端行业的考虑以及近四年的职业发展和技术规划。在自己专业不佳的情况下，自己获得了自己比较满意的一个现状。 我毕业的大学不是985、211，就普通的一本，专业是信息管理与系统系下电子商务专业，，于2014年毕业，毕业后在一家创业公司一直从事…"}, {"id": "6865902468274847751", "title": "转换hooks的开发建议", "desc": "使用hooks开发有一阵时间了，几乎是从推出后就尝试使用，一路走来，一顿毒打，踩了不少坑，也逐渐体会到了hooks模式下，开发方式的变化，不得不说还是要吹一波的。 接触到的最开始就是MaterialUI了，当时hooks模式正式发布后，MaterialUI也推了一版，并且官方文…"}, {"id": "6844904053781037064", "title": "基于jsoneditor二次封装一个可实时预览的json编辑器组件(react版)", "desc": "通过实现一个json在线编辑器,来学习如何一步步封装自己的组件(不限于react,vue,原理类似). 在介绍组件设计思路之前,有必要介绍一下著名的SOLID原则. S 单一功能原则: 规定每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来。所有它的服务都应该严密…"}, {"id": "6992097701860999176", "title": "React基础概念二", "desc": "受控组件和非受控组件 高阶函数&柯里化函数 高阶组件(HOC) forwardRef高阶组件 传送门Portal Fragment & 空标签 StrictMode React中Css推荐写法..."}, {"id": "6957217489038082056", "title": "React中Props的浅对比", "desc": "上一周去面试的时候，面试官我PureComponent里是如何对比props的，概念已经牢记脑中，脱口而出就是浅对比，接着面试官问我是如何浅对比的，结果我就没回答上来。 趁着周末，再来看看源码里是如何"}, {"id": "6844903624565325832", "title": "对React、Redux、React-Redux详细剖析", "desc": "相信很多新手朋友们对于React、Redux、React-Redux这三者之间的关系和区别肯定有很多不解和疑惑。这里我们就来详细的剖析一下它们吧。 React-Redux：连接组件和数据中心，也就是把React和Redux联系起来。 React主要就是用来实现UI界面的，是一个…"}, {"id": "6979487316117028894", "title": "React系列八：非父子组件通信", "desc": "这节我们将介绍 React 中非父子组件的通信，父子组件间的通信可通过 props 和回调函数完成，随着应用程序越来越大,使用 props 和回调函数的方式就变得非常繁琐了，这节介绍非父子组件间通信。"}, {"id": "6844904006154715150", "title": "React Hooks 在蚂蚁金服的实践", "desc": "一个 React 项目，是由无数个大大小小的组件组合而成的。在 React 的世界中，组件是一等公民。而我们平时拆分组件的依据无非是：尽量的复用代码。 组件是 UI + 逻辑的复用，你不能将 UI 和逻辑拆开。比如 Antd 的 Cascader 级联选择 组件，内置了样式和级…"}, {"id": "6844903913880027150", "title": "使用 React Hooks + Context 打造简版 Redux", "desc": "React Hooks 在 React@16.8 版本正式发布。我最近在一两个公司的内部项目中也开始用起来尝尝鲜。 不了解 Hooks 的同学先撸一遍文档。本文不对 Hooks 做详细介绍，只阐述一种使用 Hooks 的思路。 一般我们写 React 如果不是特别大的应用，前后…"}, {"id": "6883099504480878600", "title": "基于自然流布局的H5编辑器brick design 项目篇", "desc": "开源地址:https://github.com/brick-design/react-visual-editor项目简介brickdesign设计之初目标是作为一个通用的库，可以让使用者以react组"}, {"id": "6862624266723000328", "title": "解析 useEffect 和 useLayoutEffect", "desc": "两个 effect hook 是 React 提供给用户处理副作用逻辑的一个窗口，比如改变 DOM、添加订阅、设置定时器、记录日志以及执行其他各种渲染过程中不允许出现的操作。 这样会每次组件更新后都会执行，有点类似于 componentDidUpdate，但请不要用 class…"}, {"id": "6997295164259565575", "title": "React 类组件", "desc": "React.Component 类组件的写法,的基础使用，也可以理解为ES6 的class语法，渲染到试图。"}, {"id": "6844903934801215501", "title": "【译】不要再问我React Hooks能否取代Redux了", "desc": "在Google中搜索会发现，大家经常问这些问题。 “React Hooks是否会取代Redux？”，最简单的回答是“不一定”。 更细致但礼貌的答案是“嗯，那取决于你正在做的项目类型”。 我更倾向于告诉大家的答案是“我不确定你是否知道你在说什么”。有几个原因可以说明，为什么“Re…"}, {"id": "6932735614001348616", "title": "Vite & Pnpm 让前端开发如丝一般顺滑", "desc": "随着 Vite2.0 的发布，充满好奇心的我也去 Vite 官方文档谈了一探究竟。刚好又看到了一篇关于新型包管理工具 Pnpm 的文章，Vite 的文档里也明确的描述了对Pnpm的支持。索性将二者整合一起来开发了一个简单的 demo，开发的感受可谓如丝一般顺滑。 一个开发服务器…"}, {"id": "6844903645612343303", "title": "create-react-app源码解读", "desc": "最近把vue-cli@2.x和create-react-app 的源码都看了一遍。由于现在官方推荐使用vue-cli@3.0，改动比较大，所以就不写关于vue-cli的了（据说是因为vue-cli@2.x创建项目时操作有点太复杂了，于是犹雨溪大大就借鉴了create-react…"}, {"id": "6844903635474710541", "title": "[翻译]阮一峰webpack教程（Demo集合）", "desc": "Webpack用于构建Javascript模块脚本来给浏览器使用的前端工具。 Webpack允许多个入口文件存在，在多页面的app中很有用，每个页面有不同的入口文件。 加载器(Loaders)是一些预处理器，用于在Webpack的构建过程前，将你app里的一些资源文件进行转换。…"}, {"id": "6857673031016251406", "title": "代数效应与React", "desc": "React核心团队成员Sebastian Markbåge（React Hooks的发明者）曾说：我们在React中做的就是践行代数效应（Algebraic Effects）。 那么，代数效应是什么呢？他和React有什么关系呢。 代数效应是函数式编程中的一个概念，用于将副作用…"}, {"id": "6959836844657737736", "title": "React源码解析10-completeunitofwok", "desc": "1.作用 1.根据是否中断和错误的类型采用不同的处理方法 在renderRoot中我们catch到workloop的错误，我们只是给节点进行相应的标记，然后继续循环 具体的处理还是在completeu"}, {"id": "6844903710049435662", "title": "react 脚手架,了解下？", "desc": "这里，受 Vue-cli 和 create-react-app 的启发，我做了这样一个 react 的脚手架 handy-cli，让你一键搭建项目，快速开始。 可以选择在代码保存或者提交代码的时候校验,为了代码更快的编译，在提交时校验比较好。提交代码校验的相关配置在 packa…"}, {"id": "6868059509156216845", "title": "如何打造一个 3D 效果的魔方 | 🏆 技术专题第三期征文", "desc": "当我们遇到一个较难问题的时候，把它逐步分解，转化为我们熟悉的内容，问题就很容易得到解决。 在 3D 空间中转换最重要几个形态的是平移，旋转与缩放，接下来将会介绍与制作一个 3D 效果立方体相关的 CSS 属性及函数。 一个立方体，必然存在于一个 3D 空间，首先需要使用 CSS…"}, {"id": "6910489036754944013", "title": "前端项目搭建部署全流程（四）：脚手架与业务模块构建", "desc": "继上一篇文章之后一个简单的React项目模板已经搭建好了，这篇文章主要写一下简易脚手架以及业务模块的生成命令行，以往我们使用较多的是vue-cli、create-react-app等开源脚手架，但是这些脚手架不一定符合我们当前使用的环境（比如公司的通用脚手架），这个时候我们就需…"}, {"id": "6844903921199284231", "title": "不只是同构应用（isomorphic 工程化你所忽略的细节）", "desc": "不管是服务端渲染还是服务端渲染衍生出的同构应用，现在来看已经并不新鲜了，实现起来也并不困难。但是社区上相关文章质量良莠不齐，很多只是“纸上谈兵”，甚至有的开发者认为：同构应用不就是调用一个 renderToString（React 中）类似的 API 吗？ 讲道理确实是这样的，…"}, {"id": "6844903858439733261", "title": "【译】在 React 中处理状态的替代方法：URL", "desc": "如何在 React App 中管理全局状态，是所有类库之间一直争论不休的事情。然而，依我拙见，我们使用 URL 和 react-router 也可以做同样的事情。 在单页面应用中，URL 并不重要。大多数情况下，它只是一个请求所有资源的站点。 当你访问 https://myAp…"}, {"id": "6899601273646137357", "title": "关于 React 的一些疑点思考", "desc": "对于 React, 有一些比较难理解的知识点, 在通过阅读源码时, 都可以大概了解. 虚拟 DOM, 实际上就是使用 JS 在其内部维护了一个对象, 是真正的 DOM 对象到 JS 对象的映射. 比如说一个 div 标签可以这么表示: 诸如 React、Vue 这样的库, 都在…"}, {"id": "6844904068549181448", "title": "听说你还在用HOC？一键改成Hooks行不行", "desc": "在React的使用中，开发者总是以一种“懒惰”的精神来进行着组件化，模块化的工作，从最开始的mixins，到HOC，render props，无一不是为了这个目的而奋斗，可是它们又有弊病，从16.8开始，React Hooks横空出世，HOC的多层嵌套，props的覆盖等问题也…"}, {"id": "6914101649766105096", "title": "聊一聊 React 生命周期", "desc": "读完本文希望能对React的组件生命周期有一定的了解，编写React代码的时候能够更加得心应手 ^_^。 把一些数据结构销毁掉以节约内存，防止后台任务一直运行。 捕捉错误。 有一定的规律，比如在某件事情发生之前调用的会用xxxWillxxx，而在这之后发生的会用xxxDidxx…"}, {"id": "6844903641069912078", "title": "react 理解装饰器", "desc": "Decorator模式并不严重依赖于创建对象的方式，而是关注扩展其额外功能。我们使用了一个单一的基本对象并逐步添加提供额外功能的Decorator对象，而不是仅仅依赖于原型继承。这个想法是：向基本对象添加属性或者方法，而不是进行子类化 ，因此它较为精简。 通常情况下我们需要一个…"}, {"id": "6844903797534261261", "title": "React教程：组件，Hooks和性能", "desc": "正如 我们的React教程的第一部分 中所指出的，开始使用 React 相对容易。首先使用 Create React App（CRA）初始化一个新项目，然后开始开发。不过遗憾的是，随着时间的推移，代码可能会变得难以维护，特别是在你不熟悉 React 的情况下。组件有可能会变大，…"}, {"id": "6844903566801534990", "title": "React源码分析 - 事件机制", "desc": "React的事件机制还是很好玩的，其中模拟事件传递和利用document委托大部分事件的想法比较有意思。 _updateDOMProperties是事件参数处理的入口，只要注意enqueuePutListener这个方法就好了，这是注册事件的入口函数。registrationN…"}, {"id": "6937337191144095774", "title": "react17源码浅析", "desc": "React17自去年十月发布以来，出现了几个比较重要的变化。首先，17作为一个过渡版本，其明确了在react中的定位，即：承上启下，作为渐进式框架的首版本，在后续的18、19等版本中会进行渐进升级而不是强制进行硬切换；其次，17结合最新的浏览器的特性做了一些更改和优化，比如对合…"}, {"id": "6844903888873586701", "title": "react 原生构建 SSR 框架及 NSR 实践方案的思考", "desc": "不但可以减少首屏渲染的请求数，而且对搜索引擎的蜘蛛抓取很有效果。 node服务从java获取数据，node主要通过页面路由来判断需要加载哪个路由的初始化数据，非命中路由不做任何处理，这一阶段的耗时主要取决于node服务与java服务的通信时间。 同构代码中componentDi…"}, {"id": "6844903495938605069", "title": "一篇包含了react所有基本点的文章", "desc": "去年，我写了一本关于学习React.js的小书，原来是大约100页。 今年我要挑战自己，把它归纳为一篇文章。 本文不会涵盖什么是React，或者为什么要学习它。 相反，这是面向已经熟悉JavaScript并熟悉DOM API基础知识的人，对React.js的基础知识的介绍。 以…"}, {"id": "6844903588557225992", "title": "react性能优化", "desc": "下面三种小方法本质都是进行代码的压缩，使文件比较小。 此图为react内部组件更新原理图。 当组件的 props 和 state 改变时，React 通过比较新返回的元素 和 之前渲染的元素 来决定是否有必要更新DOM元素。当二者不相等时，则更新 DOM 元素 scu表示sho…"}, {"id": "6844903693502906381", "title": "vue开发黑科技--利用引用类型的值处理复杂数据的编辑", "desc": "现在前端框架和之前的前端开发方式有一个重要的区别————基于数据驱动。我们不需要再去关注dom本身，而是将主要精力放在如何操作数据上面。实际开发中，可以抽象成 既然全部在完数据， 数据类型、算法就跑不掉了。 本片介绍一个基于引用类型的vue黑科技， 在使用vue开发的时候可以更…"}, {"id": "6921559837549690887", "title": "理解React：Fiber架构和新旧生命周期", "desc": "1）浏览器的整体渲染是多线程的，包括GUI渲染线程、JS引擎线程、事件触发线程、定时触发器线程和异步http请求线程。页面绘制和JS运算是互斥的线程，两者不能同时进行。 2）React15使用JS的函数调用栈(Stack Reconciler)递归渲染界面，因此在处理DOM元素…"}, {"id": "6844903909694111752", "title": "为什么函数组件也需要引入 React？", "desc": "随着新版本React正式引入了hooks，函数式组件的使用会变得更加普遍，但是不知道你有没有注意过，我们有时候在代码中明明没有使用React，仍然需要在头部写上import React from \"React\"。 我们看到，代码中除了开头引入时出现了React，其它地方都没有其…"}, {"id": "6844903538053611527", "title": "关于react我的理解与总结", "desc": "用脚本进行DOM操作的代价很昂贵。有个贴切的比喻，把DOM和JavaScript各自想象为一个岛屿，它们之间用收费桥梁连接，js每次访问DOM，都要途径这座桥，并交纳“过桥费”,访问DOM的次数越多，费用也就越高。 因此，推荐的做法是尽量减少过桥的次数，努力待在ECMAScri…"}, {"id": "6844903599240134670", "title": "React 深入系列5：事件处理", "desc": "Web应用中，事件处理是重要的一环，事件处理将用户的操作行为转换为相应的逻辑执行或界面更新。在React中，处理事件响应的方式有多种，本文将详细介绍每一种处理方式的用法、使用场景和优缺点。 点击Button的事件响应函数是一个匿名函数，这应该是最常见的处理事件响应的方式了。这种…"}, {"id": "6930972385558396941", "title": " 深入浅出的学习react[学习笔记17]", "desc": "关于 Fiber 架构的实现原理和编码形态，前面已经洋洋洒洒地分析了 3 讲 。在前面的 3 讲里，通过对整个 ReactDOM.render 所触发的渲染链路进行了分析和串联，由此把 Fiber 架构在实现层面的大部分要点都捋了一遍。之所以花这么大篇幅，一方面是因为这部分知识…"}, {"id": "6930971927955800071", "title": " 深入浅出的学习react[学习笔记18]", "desc": "相信不少人在进阶 React 的过程中都会或多或少地了解到这样一件事情：React 有着自成一派的事件系统，它和DOM 原生事件系统不一样。但具体不一样在哪，却很少有人能够一五一十地说清楚。 我们知道，对于不同的知识，需要采取不同的学习策略。就 React 事件系统来说，它涉及…"}, {"id": "6930966842273955854", "title": "深入浅出的学习react[学习笔记19]", "desc": "已经有过铺垫。从本讲开始，将在此基础上针对 Redux 进行更加系统和深入的学习。 可以快速上手。 何谓“系统”的学习？系统的一个前提就是建立必要的学习上下文，尝试理解事情的来龙去脉。 这些年常常会见到这样一种情况：很多人对 Redux 的基本操作很熟悉，甚至对它的运作机制也有…"}, {"id": "6844903945966452750", "title": "React源码解析（一）：这些React的API你都知道吗", "desc": "Vue、React和Angular成为了前端工作者最常用的三大框架。分析其源码，对我们技术的提升有着至关重要的作用，我们先分析React源码，本篇文章将从其最常用的API说起 在React中，我们经常编写JSX，JSX和JS最大的不同就是：在JSX中，可以写HTML的代码。那么…"}, {"id": "6844903503400288270", "title": "由一行文本输入框引发的思考", "desc": "文章是关于React组件之表单单行文本输入框的一些思考。可能大家第一反应都是，不就是一行<input/>嘛，没什么特别的吧？如果说到输入框的值的话，可能圈子里上大多数封装好的ReactUI组件库中使用的方式无非都是在组件中通过 Props传值给Input组件，然后在Input组…"}, {"id": "6844903871341395982", "title": "React组件的受控和非受控", "desc": "1. 儿子示例 2. 表单示例 1. 设置优先级，优先采用外部的值还是内部的值 2. 对比，内部外部哪个改变了用哪个，两个都改变，还是优先级... 1. 完全非受控 2. 完全受控"}, {"id": "6844903512137007112", "title": "用 Gatsby 创建一个博客", "desc": "Gatsby 是一个令人难以置信的静态站点生成器，它允许使用React作为渲染引擎引擎来搭建一个静态站点，它真正具有现代web应用程序所期望的所有优点。它通过在构建时通过服务器端渲染将动态的 React 组件呈现为静态 HTML 内容。这意味着您的用户可以获得静态站点的所有好处…"}, {"id": "6844903588456726541", "title": "全新的 React Context API", "desc": "在一个经典的 React 应用中，组件之间通信是常用到的技术方案。在父子组件之间通常通过 props 来传递参数，而非父子组件就比较麻烦了，要么就一级一级通过 props 传递，要么就使用 Redux or Mobx 这类状态管理的状态管理库，但是这样无疑增加了应用的复杂度"}, {"id": "6844903508626374669", "title": "前端状态管理请三思", "desc": "最近我开始思考React应用的状态管理。我已经取得一些有趣的结论，并且在这篇文章里我会向你展示我们所谓的状态管理并不是真的在管理状态。 我们来看一个简单的例子。想象这是一个展示用户名称、密码和一个按钮的表单组件。用户会在填写表单后点击提交。如果一切顺利，我们完成了登录，并且有必…"}, {"id": "6844904037825921031", "title": "【译】React hooks: 不是魔法，只是数组", "desc": "我是新的hooks API的超级粉丝。然而，在使用hooks的时候有一些奇怪的限制。在这里，我将为那些对于理解这些规则有困难的人，呈现一个模型来解释如何去思考新的API。 我听闻有些人对于新的hooks API的“魔力”感到非常困惑，因此我想我会至少在使用级别揭秘这个语法是怎么…"}, {"id": "6844903734003138567", "title": "React 老版本的context API使用对比", "desc": "Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。 在一个典型的 React 应用中，数据是通过 props 属性由上向下（由父及子）的进行传递的，但这对于某些类型的属性而言是极其繁琐的（例如：地区偏好，UI主题），这是应用…"}, {"id": "6844903778227847175", "title": "浅谈 React 中 key", "desc": "上周在处理项目的时候，由于之前项目中引用的是 cdn 中的生产环境的 React 所以导致所有在开发环境中应该暴露的 warnning 都被屏蔽了，上周修改了 webpack 的配置把 React 改为 develop 的时候，就出现了一堆下列的报错： 意思是： 数组或迭代器中…"}, {"id": "6844903581787619335", "title": "[译] 我们能从 Redux 源码中学到什么？", "desc": "我总是听人说，想拓展开发者自身视野就去读源码吧。 所以我决定找一个高质量的 JavaScript 库来深入学习。 我选择了 Redux，因为它的代码比较少。 这篇文章不是 Redux 教程，而是阅读源码后的收获。如果你对学习 Redux 感兴趣，强烈推荐你去看 Redux 教程…"}, {"id": "6844903688373305358", "title": "redux源码解读（简单易懂版）", "desc": "写这篇文章是因为我所有能搜索到的文章都太！复！杂！了！，一上来就做了个todo list，并且使用了一大堆react-redux已经封装好的方法，所有的一切对我来说都是黑盒的，并且藕合度非常低，我根本不知道为什么这样写最后就会那样，有时候甚至这样写根本不能得到那样的结果，然而由…"}, {"id": "6844903810591113224", "title": "React 组件自动化测试与持续集成指北（2）", "desc": "上文 主要提到了一些 React 组件测试的基本方法论，接下来我们聊一下实际上是怎么实施组件的测试以及自动化的。 首先先生成一个 snapshot 通过 props 测试是一个很重要的测试过程，下吗我们设置 <Input /> 的 props 为 'test' ,测试组件是否表…"}, {"id": "6844903665812111373", "title": "React源码分析与实现(二)：状态、属性更新 -> setState", "desc": "setState的源码比较简单，而在执行更新的过程比较复杂。我们直接跟着源码一点一点屡清楚。 注释部分说的很明确，setState后我们不能够立即拿到我们设置的值。 诊断代码的逻辑非常简单，其实功能就是Object.assign() ,但是从上面代码我们可以看出react源码中…"}, {"id": "6844903560421834760", "title": "前端每周清单第 50 期: AngularJS and Long Term Support, Web 安全二三论，React 与 Clean Code", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 TypeScript 2.7 发布: 本…"}, {"id": "6844903508899004429", "title": "Redux、MobX 数据流的总结", "desc": "使用 redux-thunk、 redux-saga、 redux-observable、 MobX制作同样的一个小项目，以分析他们的异同。"}, {"id": "6844903981618036743", "title": "React性能优化： 剑走偏锋(二)", "desc": "上一次, 我们介绍了使用forceUpdate来重写shouldComponent生命周期(React性能优化： 剑走偏锋(一)). 这一次我们继续这个话题. react提供了一个PureComponent, 也是重写了shouldComponentUpdate, 不过它做的是…"}, {"id": "6922340460136513549", "title": "「react缓存页面」从需求到开源（我是怎么样让产品小姐姐刮目相看的）", "desc": "最近在开发业务项目的时候，产品小姐姐突然来到我身边，然后就对着电脑一顿操作，具体场景大致是这样的。 如上图所示，当在数万级别的数据中，选择一条，点击查看，跳转到当前数据的详情页，当点击按钮返回返回来，或者是浏览器前进后退等其他操作，返回到列表页的时候。要记录当前列表的位置。也就…"}, {"id": "7005103860029063175", "title": "使用 react 新建一个 react 项目", "desc": "搭建环境 执行命令: npx create-react-app my-app --typescript 进入项目文件夹: cd my-app run: yarn start 多语言配置 react-i"}, {"id": "6994989737626828830", "title": "万字总结，React Hooks 初探", "desc": "“这是我参与8月更文挑战的第6天，活动详情查看： 8月更文挑战” 1. React Hooks诞生之前 Hook 是 React 16.8 的新增特性，它可以让我们在不编写class的情况下使用sta"}, {"id": "6844903550552637454", "title": "技术胖155集前端视频教程-全部免费观看", "desc": "大家好，我就是技术胖，2017年我在下班时间录制了200集左右的视频教程，现在贡献155集免费观看，希望可以帮助前端小伙伴学习（点击下面链接免费观看）。需要说明的是本人还是一线奋战的前端程序员，不是专业讲师，所以教程难免有所纰漏和错误，还请多多理解和指正。这些视频都是本人原创，…"}, {"id": "6996958355914752036", "title": "升级Yarn 2，摆脱node_modules", "desc": "node项目中最臭名昭著的莫过于node_modules文件夹，这个糟糕的结构动辄使你的文件数目增加几万甚至几十万，无论是安装还是删除，都要消耗大量时间，并且占据大量inode结点。"}, {"id": "6998075434093477925", "title": "react英雄指南", "desc": "1.2.1. react react组件的生命周期、常见hook的使用、render触发的条件、react的合成事件系统、什么是高阶组件hoc、key的作用、context的用法和使用场景、错误边界用"}, {"id": "6844904072168865800", "title": "终于搞懂 React Hooks了！！！！！", "desc": "解决了的问题是：当我们一个函数组件想要有自己维护的state的时候，不得已只能转换成class。这样很麻烦！ 😄1. 重点： useState的初始值，只在第一次有效 我当时反正没有当回事，直到遇到了坑... 🌰2. 举个例子： 😄 1. 就是相当于全局作用域，一处被修改…"}, {"id": "6935261498822361119", "title": "如何编写神奇的「插件机制」，优化基于 Antd Table 封装表格的混乱代码 ｜ 技术点评", "desc": "功能虽然已经实现了，也记录在了 给 Antd Table 组件编写缩进指引线、子节点懒加载等功能 这篇文章中。不过我个人感觉意义不大，对功能代码不感兴趣的同学完全可以跳过。 这篇文章我想聊聊我在这个需求中，对代码解耦，为组件编写插件机制的一些思考。 指引线的逻辑分散在 rewr…"}, {"id": "6989620511579832328", "title": "如何优雅的在微信小程序使用 SVG 字体图标", "desc": "本文通过一次简单的项目重构，总结项目中小程序使用 SVG 多色图标的方案，目的是为了实现在小程序中能够正常使用 SVG 多色图标，并且也为内容越来越多独立站点的项目积累经验，毕竟各个项目具有相关性。"}, {"id": "6917648021794586631", "title": "轻松教你搞定组件的拖拽, 缩放, 多控制点伸缩和拖拽数据上报", "desc": "由于我们的技术栈采用的是 React, 目前还没有一个成熟库可以同时支持自由拖拽和缩放, 我们不得不用 react-dragable 和 react-resiable两个库来实现拖拽和缩放, 但是这样我们要维护的数据结构就相当复杂了(当然vue生态有成熟的vue-dragabl…"}, {"id": "6987652377931153421", "title": "从零实现一个简化版React Fiber", "desc": "介绍Fiber实现思路，以及相关知识点屏幕刷新率、帧等，然后手把手教你实现一个简单的Fiber算法。"}, {"id": "7004366179741466631", "title": "REACT虚拟DOM渲染原理「四」", "desc": "JSX的渲染机制 1.1、 第一步基于babel-preset-react-app语法包，把jsx语法转换为React.createElement(...)格式「元素节点会变成这个格式」 标签名：例如"}, {"id": "6991650159935356935", "title": "看完 React 哲学，我悟了", "desc": "通过我的血泪史，我们看一下 `React` 哲学到底是说的什么，它都是如何解决我上述的痛点的，我又因此悟到了什么？"}, {"id": "7005391034003750925", "title": "状态数据管理简单使用(context、mobx、redux)", "desc": "状态数据管理简单使用（context、mobx、redux） Context 创建 Context 对象 提供 Context 对象 订阅 Context 对象 消费 Context 对象 更多详细使"}, {"id": "7000567272079097870", "title": "Why React Needs Keys, Why It Matters", "desc": "You might wonder why this topic pops up now, the concept of Keys has been there for a long time."}, {"id": "6994380928613089293", "title": "深入浅出svelte.js", "desc": "最近有一个官网页，打算用svelte体验一下，顺便学习了一下svelte(发音：[svelt])，整体来说，svelte是比较简洁的，上手很快。不过与其说是一个前端框架，不如说是一个“dom操作编译器"}, {"id": "7006210203301445669", "title": "react-router-dom使用及源码实现", "desc": "react-router-dom使用及源码实现 React-router-dom 是专门用于web应用的路由解决方案。 1、Router、Link、Route 1.1、基本使用 首先编写一个简单的示例"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "7001346915971366919", "title": "React组件中this指向问题", "desc": "概要 在初次使用React时，经常会遇到this丢失的问题。下面总结几种React中绑定this的方法。 首先看下面的代码： 如果之前是使用Vue开发的话，很容易写成这样，但是在react中，这样写，"}, {"id": "7003238672984178724", "title": "使用 antd 的 form 组件来自定义提交的数据格式", "desc": "最近使用antd UI 的表单提交数据,数据里面有的是数组，有的是对象。提交的时候还要去校验参数，让人非常头疼。在我仔细看完文档之后，发现 antd 的 form 组件做的非常不错，这些需求通通不是问"}, {"id": "6844903796888305671", "title": "[译]你可以在JSX中使用console.log吗？", "desc": "可是上面的代码并不可以得到他们想要的结果，浏览器会把这段代码 console.log(this.props.todos) 当做纯文本在界面展示出来 。 先不急着解释这个为什么不行的原因，让我们先看几个在JSX中正确使用console.log的方法。 这个方法有用的原因是, 布尔…"}, {"id": "6875256432365207559", "title": "React全家桶高仿「饿了么」APP-上", "desc": "团队合作临摹饿了么移动端APP，选择了现在比较热门的React框架，虽然项目功能还不完善，但是在开发的过程中涵盖了React大部分的主要知识点，适合新手入门，熟悉框架，快速上手。我主要负责其中的发现页面、订单页面、登录页面，下面我简单总结下各个页面承载的功能和知识点，同时针对使…"}, {"id": "6844903792106799118", "title": "React中this丢失的解决方法", "desc": "在ES6中可以在构造函数中，直接将当前组件（或者叫类）的实例与函数绑定。"}, {"id": "6966627713943601160", "title": "React：了解 Virtual Dom 及其策略", "desc": "为什么需要 Virtual Dom ？什么是 Virtual Dom ？React 的策略又是什么？"}, {"id": "6844904190553096199", "title": "漫谈受控与非受控组件", "desc": "以上是 React 官网对受控组件与非受控组件的一次解释，大学刚刚毕业时候，看到这一段， 实在有些难以接受，在我看来，既然已经选择使用了 React ,就应该完全彻底的使用受控组件，为什么开发者会有直接使用 DOM 节点开发的的非受控组件。当时在 vue 中，并没有这种设定。同…"}, {"id": "6844903512493555725", "title": "由React Router引起的组件重复渲染谈Route的使用姿势", "desc": "React Router 4 把Route当作普通的React组件，可以在任意组件内使用Route，而不再像之前的版本那样，必须在一个地方集中定义所有的Route。因此，使用React Router 4 的项目中，经常会有Route和其他组件出现在同一个组件内的情况。例如下面这…"}, {"id": "6844903704877858830", "title": "以中间件，路由，跨进程事件的姿势使用WebSocket", "desc": "通过参考koa中间件，socket.io远程事件调用，以一种新的姿势来使用WebSocket。 能注册的事件有onclose，onerror，onmessage，onopen。用的比较多的是onmessage，从服务器接受到数据后，会触发message事件。通过注册相应的事件处…"}, {"id": "6920136754968133640", "title": "Redux原理以及中间件的实现", "desc": "中间件来实现。 首先我们要明白每一个中间件，需要保存上一个下一个中间件的执行过程(next)，又需要保存接受action。"}, {"id": "6844904158722703374", "title": "记：create-react-app安装webpack版本错误", "desc": "不是create-react-app本身的问题，需要手动解决。"}, {"id": "6844904105979150350", "title": "聊一聊--视图层 React 组件的层级设计", "desc": "自己在最近的开发工作中，面对一些可能很多前端同学都会遇到的问题，有了一些心得体会。 所以有了这篇文章，想来和大家聊一聊该如何设计和抽象我们的 React 组件。 视图组件，即我们使用 React 来表现视图层的这一部分。 它们最重要的特点就是：它们和业务没有一毛钱关系。 它们的…"}, {"id": "6901321326100348942", "title": "使用脚手架 快速开发 React组件 npm包 (基于TSDX)", "desc": "默认支持CommonJS、UMD、ES Module打包方式。（要开发通用的NPM包，这些的支持是必要的，不然你还得自己搞） 自带开发环境、编译脚本。 开发NPM包你必须要解决的一个问题：开发时有地方调试，发布时再build &#x26; pub（如果每次调试前都要build，…"}, {"id": "6844903990551904264", "title": "React + TypeScript 练习：中国历史人物数据概览", "desc": "之前有个想法，就是怎么把历史上有明确出生和死亡时间的人通过图表展示他们的历程，在这个历程中可能会发现一些好玩的东西。再加上刚好没怎么用过 React，还有 TypeScript 最近比较火，那就练练手。 使用的数据均来自中國歷代人物傳記資料庫（CBDB），我筛选了其中有明确出生…"}, {"id": "6844903597205880845", "title": "react配合antd组件实现的管理系统demo", "desc": "前言：此文需要有一定react，redux基础，具体学习资料请科学上网。 webpack的import动态加载的模块的函数，import(参数)，参数为模块地址。 注意：import后会返回一个promise对象。 本demo使用的是router4,官方文档演示为单行Route…"}, {"id": "6844903945739960333", "title": "如何优雅的使用react hooks来进行状态管理", "desc": "在使用react和redux的过程中，一直有一个问题，哪些状态需要放在redux中，状态需要保存在组件内的local state中，此外不合理的使用redux可能会带来状态管理混乱的问题，此外对于local state局部状态而言，react hooks提供了一个比class中…"}, {"id": "6844903972273127437", "title": "React源码解析之completeUnitOfWork", "desc": "前言：(1)关于completeUnitOfWork()在哪里使用到，请看下React源码解析之workLoop中的二、performUnitOfWork(2)本文需要了解的基础知识①workInPr"}, {"id": "6844903646484774925", "title": "利用File，Drop&Drag，XHR2实现图片拖拽上传", "desc": "这三个事件都是在被拖动元素上触发的。当拖动开始时会先触发dragstart事件，然后在拖动的过程中会持续触发drag事件，当拖动停止时（无论被拖动元素是否放到了有效的放置目标）都会触发dragend事件，这三个事件类似鼠标的移动事件mousestart，mousemove，mo…"}, {"id": "6918733952920485901", "title": "一个可调整顺序、宽度的react table组件 -- npm", "desc": "最近做个人项目的时候需要一个可以具有拖拽排序功能以及可调整表格列宽功能的表格组件，但是项目本身没有使用antd组件库，所以也就没有直接使用antd的table组件。在进行了调查之后使用react-dnd封装了一个具有拖拽排序以及可调整表格列宽功能的table组件。在项目中使用还…"}, {"id": "6844903587076636680", "title": "[译] 拖放库中 React 性能的优化", "desc": "我为 React 写了一个拖放库 react-beautiful-dnd 🎉。Atlassian 创建这个库的目的是为网站上的列表提供一种美观且易于使用的拖放体验。你可以阅读介绍文档: 关于拖放的反思。这个库完全通过状态驱动 —— 用户的输入导致状态改变，然后更新用户看到的内…"}, {"id": "6844904016225255432", "title": "你好，前端路由", "desc": "hash 是 URL 中 hash (#) 及后面的那部分，常用作锚点在页面内进行导航，改变 URL 中的 hash 部分不会引起页面刷新。通过 hashchange 事件监听 URL 的变化，改变 URL 的方式只有这几种： 通过window.location改变URL。 h…"}, {"id": "6844903507934330888", "title": "揭秘 React 状态管理", "desc": "React 作为 View 层很好地解决了视图层渲染问题，但是却缺乏有效的状态管理，在构建大型的前端应用就会显得十分乏力时，本文将会介绍一下我对 React 状态管理方案的理解，并通过例子介绍 Flux，Redux，Mobx 方案。"}, {"id": "6844903501504446477", "title": "React 内部机制探秘 - React Component 和 Element（文末附彩蛋demo和源码）", "desc": "这篇文章比较偏基础，但是对入门 React 内部机制和实现原理却至关重要。算是为以后深入解读的一个入门，如果您已经非常清楚: 的流程，可以直接略过此文。 在几个月前，谷歌的前端开发专家 Tyler McGinnis 在其个人 twitter 账号上发布了 这样一条推文，引发了对…"}, {"id": "6844903501290536973", "title": "玩转 React（三）- JavaScript代码里写HTML一样可以很优雅", "desc": "这是《玩转 React》系列的第三篇，看到本篇的标题，了解过 React 的同学可能已经大致猜到我要讲什么了，本篇中要讲的内容对于刚接触 React 的同学来说，可能有些难以接受，但希望你能坚持学下去，这是 Facebook 的前端大神们为前端开发做出的革命性创新。 这是从 R…"}, {"id": "6933530246755352590", "title": "React Components, Elements, and Instances", "desc": "最近读的几篇 react 文章，老文章读来也有收获。 Components 是创建的组件。 Instances 是创建的组件的实例，比如，创建了一个&#x3C;Button />组件，在&#x3C;Form />中使用了很多次，那么每一个就是一个实例。 Elements 是一个…"}, {"id": "6946748169644408862", "title": "React - Ref的创建与使用", "desc": "因为这些章节比较分散，对于想要系统学习 Ref 的同学来说，可能阅读成本比较高昂。加上这些知识之间的贯通性，放在一起做比较可以加深对它的理解。 接下来我会按照自己的理解组织文章脉络，有兴趣的小伙伴直接按顺序阅读即可，相信到最后会对 Ref 有新的认识。 先来看下 ref 出现的…"}, {"id": "6844903927125639182", "title": "react-redux入门", "desc": "React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。 React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。后…"}, {"id": "6844903668605681672", "title": "PoPo数据可视化周刊第一期", "desc": "PoPo数据可视化 聚焦于Web数据可视化领域, 发现前端可视化领域有意思的内容. 涵盖前端可视化领域最新资讯, 开源可视化库的发布更新消息, 可视化案例分析与讲解, 可视化技术文章, 可视化大神的日常, 可视化八卦等等...不想错过前端可视化领域的精彩内容, 就快快关注我们吧…"}, {"id": "6915385812574011400", "title": "【React学习笔记】jsx & create-react-app脚手架", "desc": "React只用来生成虚拟Dom，ReactDom用来将虚拟Dom转换成真实Dom元素。 表达式直白来说是会有返回值的代码，如变量、运算符、函数调用，而语句如if、while等不会产生返回值。 具有一定独立功能的数据与方法的封装，对外暴露接口，有利于代码的复用，且不用担心冲突问题…"}, {"id": "6909321263211085832", "title": "React Hook学习笔记", "desc": "Hook是什么？Hook是一个特殊的函数，它可以让你在函数组件里“钩入”React的特性，在不编写class的情况下使用state以及其他的React特性。 优点 Hook可以让你在不需要修改组件结构的情况下复用状态逻辑；Hook可以将组件中相互关联的部分拆分为更小的函数（比如…"}, {"id": "6920765064383299598", "title": "【ReactLive】：React 组件在线编辑器", "desc": "1.ReactLive是什么？能做什么？ReactLive能实现React组件级的在线编辑、预览功能。ReactLivebringsyoutheabilitytorenderReactcomponen"}, {"id": "6844903656127479822", "title": "轻松开发企业级中后台项目，顺手掌握工程化的react开发架构", "desc": "中后台 SPA 完整项目脚手架。 这是一个不断迭代的项目，与时俱进的中后台项目。 如果对你的项目搭建有帮助的话，随手给个星，感谢。 基于 antd 提供了表单，表格，上传的高阶组件。统一了以上场景的公共业务"}, {"id": "6844903730903515150", "title": "前端技术周刊 2018-12-03：DOM", "desc": "Chrome 71 开始将试用 SXG 功能，它是由 IETF 提出，Web Package 协议规范下的 Signed HTTP Exchanges 功能的缩写。该技术使得一个第三方服务器可以直接向用户提供可靠资源，且不用与原站共享 HTTPS 证书密钥。🔗 Safari …"}, {"id": "6946394767341142052", "title": "React - 性能优化", "desc": "React 内部已经使用了很多技巧优化了 UI 的更新和 DOM 操作。大部分情况下，我们不需要特意去做针对 React 的性能优化。尽管如此，以下依然是一些可以提升速度的方法。 React 默认包含了很多警告信息，以便在开发过程中提示一些有用的反馈。然而这些信息包的体积并不算…"}, {"id": "6844903550087069709", "title": "奇舞周刊第 243 期：你慌了吗？深度学习自动生成 HTML 代码", "desc": "本文列举了 2018 年可能会持续发展的 12 个设计趋势，如果你想让你的产品有着更优秀的体验、更突出的竞争力，不妨在这12个趋势上多花点心思。 前端通过组件实现了跨业务的复用，后端接口如何相应地提高开发效率呢？GraphQL，就是应对复杂场景的一种新思路。 如何用前端页面原型…"}, {"id": "6844904145858592775", "title": "在 react 中使用 vue 的状态管理", "desc": "我是要介绍一个新的 react 全局共享状态管理器，它和 vue 组件的状态管理一起同工之妙。 在 react 状态管理领域，react-redux 可谓是只手遮天了，基于 flux 思想实现，小巧，immutable 的思想让数据变化可控。但 immutable 所带来的编程…"}, {"id": "6844903543711727624", "title": "Redux中间件实现机制", "desc": "Redux 引入中间件机制，其实就是为了在 dispatch 前后，统一“做爱做的事”。。。 例如我想在dispatch(action)发起前打印出日志，发起后再打印出日志以供调试，中间件就是干这事的。 中间件会在每次dispatch的时候执行！！！每次dispatch都会重新…"}, {"id": "6844903621092638728", "title": "飞冰：Iceworks 自定义模板支持布局定制（v2.3.0 版本）", "desc": "新增了自定模板配置布局的功能，不仅仅是只能配置颜色，这次增加了布局的功能，你可以通过修改配置实现个性化的定制需求。同时会记录你的配置，便于下一次选择。 未来自定义模板还会支持 Redux Mbox 等框架的选择， 详细介绍可查看 https://github.com/aliba…"}, {"id": "6844903653287936013", "title": "算法中对数量级的一点理解", "desc": "数量级是指数量的尺度或大小的级别,每个级别之间通常有固定的比例,如10,2,1000,1024,e(欧拉数),大约等于 2.71828182846 的超越数，即自然对数的底）。 需要特别注意的是：数量级应用范围必须是正数或自然数！尽管负数也可以计算数量级，没有实际的意义。比如：…"}, {"id": "6930971681578024968", "title": "深入浅出的学习react[学习笔记21]", "desc": "本讲将结合 Redux 应用实例与 applyMiddleware 源码，对 Redux 中间件的实现原理进行分析。在此基础上，对“面向切面”这一经典的编程思想建立初步的认识。 在分析中间件实现原理之前，先来认识一下中间件的用法。 介绍 createStore 函数时，已经简单…"}, {"id": "6844903638154870791", "title": "ice飞冰管理系统初体验，react-redux简单入门", "desc": "ice-admin-template项目地址：ice-admin-templateice框架ice使用:启动调试服务:npmstart构建dist:npmrunbuild目录结构:react-rout"}, {"id": "6844903668332888078", "title": "mobx-简单可扩展的状态管理库", "desc": "Computed values是可以使用pure function 从state中推倒出的值。mobx会自动更新它并在它不实用是将其优化掉 MobX为现有的数据结构(如对象，数组和类实例)添加了可观察的功能。 使用 .observe(callback) 来观察值的改变。 上述如…"}, {"id": "6844903861539307533", "title": "动手实现简单版的 React（一）", "desc": "这一年陆陆续续、跌跌撞撞看过一些实现 react 的文章，但是还没有自己亲自动手过，也就谈不上深入理解过，希望能够通过代码和文字帮助鞭策自己。 这个系列至少会实现一个 React 16 之前的简单API，对于 React Fiber 和 React Hooks 尽量会有代码实现…"}, {"id": "6844903728999317512", "title": "[英][官方] Mozilla 发布 Firefox Reality 在 VR 世界中体验 Web", "desc": "Earlier this year, we shared that we are building a completely new browser called Firefox Reality. The mixed reality team at Mozilla set ou…"}, {"id": "6844903592009302029", "title": "聊聊 Redux 和 Koa 的中间件", "desc": "我理解的中间件是一种能够将数据进行管道化处理的编程技术，每个中间件负责处理一部分数据，最终组合成一条具有数据处理能力的管道。这种编程技术最早可能来自于函数式编程领域，在前端技术领域中最知名的应用案例当属于 Redux 和 Koa 这两个库，网上有很多分析两个库关于中间件的源码实…"}, {"id": "6844903508504756237", "title": "你可能不知道DOM编程", "desc": "我们都知道操作dom慢，那它为什么慢呢？有什么办法优化呢？"}, {"id": "6844903668412579854", "title": "如何将 Elixir 模块风格应用在 JS 中", "desc": "展开原文Moving your code towards a more functional style can have a lot of benefits – it can be easier to reason about, easier to test, more de…"}, {"id": "6844903598103461902", "title": "函数式编程的几个概念", "desc": "本篇文章是自己对于JavaScript函数式编程一书的读书笔记。利用underscore框架介绍函数式编程几个概念。 repeatedly是函数式编程的一个典型思维，将值变成函数。 react和redux里面用了大量的返回其他函数的函数。包括高阶组件，applyMiddlewa…"}, {"id": "6844903588930519048", "title": "[译] React & Redux 顶级开发伴侣", "desc": "React 已成为近年来最炙手可热的前端开发框架。围绕 React 生态涌现了一系列趁手的辅助开发工具，它们的出现能进一步提高我们的开发效率。要知道，我们也一直期望使用的开发工具可以 如果你刚踏入 React 开发大门，那对你来说下面介绍的工具包都还蛮有用，它们可以在调试应用或…"}, {"id": "6844903574795714574", "title": "前端每周清单第 54 期: SwiftNIO, 自定义 vue-router, Web 缓存与 GraphQL 必知必会", "desc": "前端每周清单专注大前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 苹果开源了 Swift 版 Netty…"}, {"id": "6936615547626848269", "title": "解决BizCharts偶尔会有两个tooltip问题", "desc": "其中，G2是以数据驱动，具有高度的易用性和扩展性的可视化图形语法。而BizCharts是基于antv的G2进行了一层封装，并且实现按需加载，使得图表可以以组件的形式进行调用，方便我们在 React 环境下使用 G2。 有bizCharts-tooltip情况下，只有在图表未加载…"}, {"id": "6844903594290855944", "title": "React和React Native事件系统详解：和谐共存", "desc": "已经有很多帖子解释了如何使用React的事件处理系统，但是并没有多少帖子是在解释他们是“如何工作”的。最近我一直在研究React Native，我和“事件处理”的斗争过程提醒我了了解_巧合_是多么的重要。因此，我决心收集尽可能多的有关React事件处理的信息：以下是我在[源代码…"}, {"id": "6844903587194093581", "title": "react组件的生命周期", "desc": "组件是一个类，当它被使用的时候实例化，然后挂载到页面中。 组件内属性不可以更改，只能通过父组件传递。 单页应用中，切换页面原组件需要销毁释放资源，如果原组件中有定时器等不能销毁时，需要在componentWillUnmount中清理资源占用，手动销毁定时器。"}, {"id": "6936739478149005319", "title": "React hooks 深度使用总结", "desc": "这半年来重度使用了react，有的项目中完全使用了hooks，还记得使用react从刚开始的懵懵懂懂，跌跌撞撞，到现在的游刃有余，一路走来真是觉得万分煎熬啊，因为我以前工作中更多的是用vue，有vue的使用经验，所以拾起react也没那么难，但也没并不轻松。 工作中，有的项目r…"}, {"id": "6844903665292017672", "title": "React专题：可变状态", "desc": "React使用一个特殊的对象this.state来管理组件内部的状态。 然后开发者就可以通过描述状态来控制UI的表达。 一般我们会在constructor生命周期钩子初始化状态。 也可以直接用属性初始化器的写法，看起来更加简洁。 然后通过this.setState()来改变状态…"}, {"id": "6844903607410622478", "title": "[译] React 中的 dumb 组件和 smart 组件", "desc": "当你开始起步学习 React，很快就会接触到组件（Component）的概念，正是这一概念让 React 脱颖而出。创建不同的组件并将它们嵌套在一起，就能构建出一个应用。听起来再简单不过了，但真实情况还会更复杂些。有两种不同类型的组件，称之为 smart 组件和 dumb 组件…"}, {"id": "6918731129059016717", "title": "深入浅出的学习react[学习笔记7]", "desc": "许多人对于React-Hooks这块的知识缺乏自信，至少在面试场景下，当聊到 React-Hooks 的时候，很少人能够像聊 Diff 算法、Fiber 架构一样滔滔不绝、言之有物。那么问题出在哪里呢？大概是在学习的方法和途径上。 提起 React-Hooks，可能很多人的第一…"}, {"id": "6844903814806536205", "title": "使用 Hooks 实现一个简单的状态管理器", "desc": "“状态管理”是 React 中绕不开的一个话题。因为 React 中数据是自上（祖先组件）而下流动的，当层级较深的组件需要访问祖先组件的状态时，通常需要把该状态通过多个组件传递下去。组件必须要传递该组件实际上并不使用的状态，导致组件之间耦合严重，有悖于组件的设计原则。这时候，我…"}, {"id": "6936443373351862302", "title": "面试官，别再问我React-Router了！每一行源码我都看过了！", "desc": "此处介绍一下React-Router的核心原理。特别细致的标点符号的不予讨论。 React-Router其实最核心的东西是Route组件和由统一作者开发的History库来建立的。接下来跟着镜头一起走进神秘的ßReact-Router世界吧。 一起建一个简单的示例吧。先用rea…"}, {"id": "6844903906082816008", "title": "React 源码系列 | ref 功能详解 | 源码 + 实战例子 | 你可能并不真正懂 ref", "desc": "<StringRef /> 是由 React.createlElement 产生的一个对象，自身不是实例，所以它和 this 存在区别。 这样从父组件就可以拿到子组件了。 过 1s 之后输入框会自动 focus。 这仅仅是构建了一种结构，渲染要交给 react dom。 打一个…"}, {"id": "6844903801736921095", "title": "React 组件模式学习总结", "desc": "如上 容器组件，就是负责获取用户数据，然后以props的形式传递给展示组件ProductList来渲染。容器组件也不会在页面中渲染出具体的DOM节点，因此，它通常就充当数据源的角色。目前很多常用的框架，也都采用这种组件形式。如：React Redux的connect(), Re…"}, {"id": "6920527825652957197", "title": "Redux知识点记录", "desc": "1、可以清楚的知道state为什么改变，在哪儿改变。把action和state串起来开发一些函数，这就是reducer 唯一改变state的方法是触发action，action是一个用于描述发生事件的普通对象。 这样确保了视图和网络请求都不能直接修改state，相反它们只能表达…"}, {"id": "6884859008998621191", "title": "react-redux源码剖析", "desc": "顾名思义react-redux是对于redux的延伸以及功能的扩展具体，那我们先来说说redux目前存在的问题redux目前存在的问题1、每个组件都需要进行订阅并且进行强制更新操作2、如果要获取sto"}, {"id": "6844903549349036046", "title": "[阿里国际UED]唯快不破，让nodejs再快一点", "desc": "Node.js(服务端)的角度来看，JS本身的执行时间至关重要，如果执行时间从30ms降到3ms, 理论上QPS就能提升10倍，换句话说，以前要10台服务器才能扛住的流量现在1台服务器就能扛住，而且响应时间更短.那到底Node端如何做性能优化呢?"}, {"id": "6844903621855838222", "title": "浅看小程序", "desc": "2017年1月份小程序正式登场，我也和社团小伙伴们一起做了一些小程序，也有一些经验的积累。小程序本身以便捷轻量、贴近native使用体验为核心，成为了微信新的流量领地。从wepy到mpvue，也有多种小程序开发框架孕育而生，这些框架的诞生也意味着，微信小程序本身的开发体验并不能…"}, {"id": "6966957094775816229", "title": "antd Upload上传报Uncaught TypeError: items.map is not a function错误", "desc": "使用antd里面的Upload来上传文件，写好之后运行报错。。。 代码是这样的： 造成这个问题的原因是，因为在上传了一个文件之后，会有产生一个新的fileList，但是这个新的fileList没有回传"}, {"id": "6844903667783434254", "title": "React中如何优雅的使用UEditor", "desc": "本文将介绍笔者在React的项目中使用百度的富文本编辑器Ueditor的过程。注意本文不提供一条龙式的使用方法，只是将使用过程中的一些实现思路进行总结，供以参考。react项目中导入ueditor，会存在各种不正交的问题，需要注意。 首先在ueditor官网下载最新安装包，然后…"}, {"id": "6844903710850547725", "title": "react-router v4 路由规则解析", "desc": "react-router升级到4之后，跟前面版本比有了很大的差别。 例如包的拆分，动态路由等详细的差别就不说了，各位大神的总结也很到位，详细可以点击看看，All About React Router 4这篇文章。 此外还有个差别是路由规则的变化。 一直有着上个版本的习惯，所以稍…"}, {"id": "6844904051339952141", "title": "React Suspense for Data", "desc": "目前Suspense尚处于实验阶段，大部分文档还没有被翻译。我基于目前的官方文档，对Suspense作一些介绍。 Suspense是React16.6版本中新增的组件，允许我们等待一些代码的加载，并在等待时声明加载状态。 Suspense for Data是一个新的特性。允许您…"}, {"id": "6970603493870534693", "title": "react库的那些重要的Change ", "desc": "React的从v15至今的一些重要版本变更，从lifecycle到api，再到hook......."}, {"id": "6949092569275957256", "title": "React中Diff算法源码浅析", "desc": "React中Diff算法又称为调和算法，对应函数名为reconcileChildren，它的主要作用是标记更新过程中那些元素发生了变化。"}, {"id": "6905429705231433741", "title": "React 的四种常见通信场景", "desc": "context 相当于一个全局变量，是一个大容器，我们可以把要通信的内容放在这个容器中，这样一来，不管嵌套有多深，都可以随意取用。"}, {"id": "6844903855088467975", "title": "React hooks 的尝试使用", "desc": "React Hooks出来也已经挺久了，一直苦于没有机会去尝试。这次不用不知道，一用吓一跳，用hooks写页面和组件真的是太爽啦！再也不用写冗余的类，不用维护复杂的state和考虑异步的setState，不用考虑this的指向，不用细想在哪个生命周期里执行复杂的逻辑，写起来只能…"}, {"id": "6991703778739093541", "title": "React从零开始——一个详细的范例", "desc": "范例说明 接下来我们要通过一个简单的案例，详细的学习React的内容 如上图所示，两个按钮，点击加号按钮，数字加一，点击减号按钮，数字减一 代码结构 使用create-react-app创建一个工程，"}, {"id": "6919000621278625806", "title": "「开源」🌓 一个切换黑夜/白天模式的 Hook", "desc": "You can import the darkmode as a react component. with a toggle button as ui. | toggle | The function for toggling the darkmode. | () => vo…"}, {"id": "6844903798817685511", "title": "【译】懒加载组件", "desc": "React 16.6 的新发布带来了一些只需很小努力就能给React组件对增加了很多力量的新特性。 其中有两个是 React.Suspense 和 React.lazy(), 这个很容易用在代码分割和懒加载上。 这篇文章关注在如何在 React 应用中使用两个新特性和他们给 R…"}, {"id": "6844903605632253966", "title": "使用webpack搭建react开发环境", "desc": "npm i -D 是 npm install --save-dev 的简写，是指安装模块并保存到 package.json 的 devDependencies中，主要在开发环境中的依赖包. 如果使用webpack 4+ 版本，还需要安装 CLI。 非全局安装下的打包。 webp…"}, {"id": "6844904145879564296", "title": "聊一聊Diff算法（React、Vue2.x、Vue3.x）", "desc": "web UI中DOM节点跨层级的移动操作特别少，可以忽略不计。 拥有相同类型的两个组件将会生成相似的树形结构，拥有不同类型的两个组件将会生成不同树形结构。 对于同一层级的一组自节点，他们可以通过唯一id进行区分。 react对树的算法进行了分层比较。react 通过 updat…"}, {"id": "6844903743524175885", "title": "React 16.x折腾记 - (9) 基于Antd+react-router-breadcrumbs-hoc封装一个小巧的面包屑组件", "desc": "有不对之处请留言,会及时修正,谢谢阅读。"}, {"id": "6844903743121522702", "title": "前端技术周刊 2018-12-17：React 机理", "desc": "npm 发布了 2018 年的 JavaScript 与 npm 报告。其中，JavaScript 成为世界上最受欢迎的编程语言，最主要的原因之一为 JavaScript 拥有最多可用的库，多个库的下载量有了变化：React 增速放缓、Vue 和 GraphQL 维持高增速、B…"}, {"id": "6844904190364352526", "title": "React新旧版本生命周期变化", "desc": "v16.4版本的生命周期只是改动了getDerivedStateFromProps()的调用情形， 只要是可能会触发组件更新的情况（New props， setState(), fourceUpdate()），就会调用该生命周期函数。 1. componentWillMount…"}, {"id": "6921515879553302536", "title": "【Swyx Wang】React”发行版”与前端“元框架”——前端框架进入“部署时代”", "desc": "and The Deployment Age of JavaScript Frameworks. Feb 19 2020 James K Nelson最近提出了一个有趣的观点。 如果你和我一样，不确定什么是bootloader，谷歌说 \"bootloader是在任何操作系统运行…"}, {"id": "6844903866148847623", "title": "【译】使用 React，TypeScript 和 Webpack 开始一个项目", "desc": "我会通过这篇文章，为大家讲述，如何使用 React，TypeScript 和 Webpack 来构建一个项目。 这是一篇关于如何使用 React，TypeScript 和 Webpack 来构建一个非常基础的项目的教程。您可以继续阅读，或者直接在 github 上面查看示例代码…"}, {"id": "6844904199952547853", "title": "React 应用性能优化的 6 条建议", "desc": "我第一次学习 React 时，就知道了所有的可以提高性能的小技巧。直到现在，主要的性能优化手段就是避免协调（React 通过前后的对比来决定 DOM 是否需要更新）。 这篇文章中，我将会列举几个简单的方法，通过简单的开发技巧提升 React 应用的性能。这并不意味着你应该一直使…"}, {"id": "6950107121811718180", "title": "React - 高阶组件", "desc": "高阶组件就是接收一个组件作为参数，并返回一个新组件的函数。 代码复用，逻辑抽象，抽离底层准备（bootstrap）代码 - 渲染劫持 - State 抽象和更改 - Props 更改"}, {"id": "6844904136425766925", "title": "从 Redux 设计理念到源码分析", "desc": "Redux 也是我列在 THE LAST TIME 系列中的一篇，由于现在正在着手探究关于我目前正在开发的业务中状态管理的方案。所以，这里打算先从 Redux 中学习学习，从他的状态中取取经。毕竟，成功总是需要站在巨人的肩膀上不是。 话说回来，都 2020 年了还在写 Redu…"}, {"id": "6844903810561736717", "title": "记一次 React + Koa + Mysql 构建个人博客", "desc": "由于一直在用 vue 写业务，为了熟悉下 react 开发模式，所以选择了 react。数据库一开始用的是 mongodb，后来换成 mysql 了，一套下来感觉 mysql 也挺好上手的。react-router、koa、mysql 都是从0开始接触开发的，期间遇到过很多问题…"}, {"id": "6934719314734317576", "title": "在React中，你一定会遇到的setState", "desc": "只要使用React的小伙伴，一定接触到setState这个API，地位不言而喻但要使用好一定要抓住三个关键词：合并更新、同步异步、不可变值咋一看，有些小伙伴可能云里雾里~别急，我挨个解释1.setSt"}, {"id": "6898874335247728648", "title": "蒲公英 · JELLY技术周刊 Vol.31: Who's Next？面向 AI 的 React 应用开发", "desc": "作为一名前端，是否曾为需求中的瀑布流布局想破脑阔？就算用上 JS 第三方库，却对效果和性能不满意？CSS Grid Layout 规范 Level 3 中，为 Grid-template-columns 和 Grid-template-rows 属性新增了 masonry 属性…"}, {"id": "6844903541866250247", "title": "Vue2 技术栈归纳与精粹", "desc": "Vue是一款高度封装的、开箱即用的、一栈式的前端框架，既可以结合webpack进行编译式前端开发，也适用基于gulp、grunt等自动化工具直接挂载至全局window使用。本文成文于Vue2.4.x版"}, {"id": "6844903880845688839", "title": "React服务端渲染探秘: 5.node作中间层及请求代码优化", "desc": "其实任何技术都是与它的应用场景息息相关的。这里我们反复谈的SSR，其实不到万不得已我们是用不着它的，SSR所解决的最大的痛点在于SEO，但它同时带来了更昂贵的成本。不仅因为服务端渲染需要更加复杂的处理逻辑，还因为同构的过程需要服务端和客户端都执行一遍代码，这虽然对于客户端并没有…"}, {"id": "6966889423212544013", "title": "dva的学习", "desc": "今天注意到，公司的项目使用了dva搭建了项目，于是思考学习一下dva。dva是一个基于redux和redux-saga的数据流方案，它还内置了react-router和fetch，所以也可以理解为一个"}, {"id": "6844903821433372680", "title": "精读《Scheduling in React》", "desc": "1. 引言 这次介绍的文章是 scheduling-in-react，简单来说就是 React 的调度系统，为了得到更顺滑的用户体验。 毕竟前端做到最后，都是体验优化，前端带给用户的价值核心就在于此。 2. 概述 这是一个测试性能的 Demo，随着输入框字符的增加，下方图表展示…"}, {"id": "6981368990555701261", "title": "从Vue到React —— React 开发相关知识点", "desc": "前言 前端项目是由一个个页面组成的，对于Vue来说，一个页面是由多个组件构成的，页面本身也是一个路由组件。对于React来说也是如此。Vue会提供一系列技术支持来完成一个组件的开发，可以从这一系列技术"}, {"id": "6844904175579447304", "title": "ReactHooks源码解析之useEffect", "desc": "前言举个例子来讲解下React.useEffect()：当执行App()时，会调用useEffect(xxx)，因为是useEffect()的第一次调用，所以此时会执行源码里的mountEffect("}, {"id": "6844903608660525069", "title": "从0到1快速构建基于create-react-app的脚手架", "desc": "create-react-app 是业界最优秀的 React 应用开发工具之一，本文会带你从0到1创建基于create-react-app的工程。 这个设置会压缩你的CSS，并通过Autoprefixer自动将供应商前缀添加到它中，你不必担心了各个浏览器的兼容问题了。 view…"}, {"id": "6844903559138394125", "title": "利用StoryBook开发UI组件管理", "desc": "最近掐指一算发现本月还有篇技术博文没写~,虽然随便拿一篇日常积累的文章，或者把最近重构的一些点拿出来讲都可以糊弄过去，但是我决定还是搞一点事情。。。 近期就有一个需求是这样的，我手里进行的一个重构项目里，有一些组件我想抽离，给未来其它项目使用，然后我还需要开发两个前端项目，他们…"}, {"id": "6844903973497864206", "title": "浏览器剪贴板API的应用", "desc": "剪贴板在生产力平台上有很高的使用频率。剪贴板API在主流的浏览器上也已经有了不错的支持率。基于前端技术的生产力工具就需要考虑接入这些的能力。 在浏览器的onpaste事件中，可以取到一个DataTransfer类型的字段event.clipboardData。通过它就可以获取的…"}, {"id": "6844903590373359630", "title": "受控组件与非受控组件", "desc": "受控组件与非受控组件：是否受状态控制。 但是结果和我们想象的不一样：输入框不能输入值。这是因为input的value取的是state中的val。但是val的值一直是空。 受状态控制的组件，必须要有onChange方法，否则不能使用. 简单功能实现，输入框值，与显示值统一。这就是…"}, {"id": "6919734535966720008", "title": "学习使用umi和dva，实现数据共享", "desc": "其中，model 就是把所有跟 redux 相关的 reducer 整合到一个model文件中，通过 namespace 区分 model ，通过 state 存储数据，通过 subscriptions 实现 history 的监听，通过 effect 发起异步操作，通过 re…"}, {"id": "6844903920431529997", "title": "React中使用TypeScript", "desc": "typescript中引入外部插件除了要引入插件本身还要引入它的声明@types，@type统一管理第三方库的声明文件。 原因是必需使用 RuoteComponentProps,。 ts中React的组件中使用props或者state的时候，需要给组件传两个参数：指定类型（ty…"}, {"id": "6914902070135488520", "title": "实现一个简单的react框架 -- (无Fiber架构)", "desc": "本文教你如何实现一个类 react 15 的框架，在实现的过程中了解 react 的生命周期函数，异步setState 这些是如何实现的。 JSX 是一种 JavaScript 的语法扩展，运用于React架构中。在 react 中 jsx 会被转换为虚拟DOM。 什么是虚拟D…"}, {"id": "6844903568416178184", "title": "用RxJS和react开发mac地址输入框", "desc": "RxJS应用了’流‘的思想，同时具有事件和时间的概念。RxJS也可以用于处理异步流程，比起Promise具有可取消和可延迟，重试等优点。这篇文章讲述了如何应用RxJS和react开发一个Mac 地址输入框。该输入框支持输入过滤和限制，光标位置控制，冒号自动插入等功能。"}, {"id": "6844903625517432846", "title": "『技术分享』-- 我的第一个 RN 项目-趣闻", "desc": "之前利用自己的业余时间入门了微信小程序，并写了一个入门项目 我的第一个微信小程序-趣闻 ，整体效果和之前写的 kotlin-android 版的 趣闻 模块和功能上没有什么区别。不得不说，相比较 Android ，小程序开发起来真的是很舒服，完善的 API和封装全面的组件，安装…"}, {"id": "6847902215986921486", "title": "React基础性总结(一)：组件的生命周期及执行顺序", "desc": "本文作为React总结系列的第一篇文章，会总结组件的生命周期及执行顺序，涉及内容比较基础。在后面的系列文章中则会总结React Hooks等内容。 仅在render()方法前被调用一次，如果在该方法中调用了setState方法去改变组件的状态值，那么调用render()后，将会…"}, {"id": "6844903506659246088", "title": "React中简单的数据图形化——学习如何制作一个进度条", "desc": "学习如何用React + SVG矢量图画的矩形在React应用程序中制作图形化数据"}, {"id": "6844903623818739720", "title": "React-源码解析-DOM模型", "desc": "当node为空时,说明node不存在,则初始化一个空的组件. ReactEmptyComponent.create(instantiateReactComponent)。 当node类型为字符串或者数字时,则初始化文本组件,ReactNativeComponent.create…"}, {"id": "6844903621948080136", "title": "[译] 更可靠的 React 组件：组合及可重用性", "desc": "I. 组合 组合（composition）是一种通过将各组件联合在一起以创建更大组件的方式。组合是 React 的核心。 幸好，组合易于理解。把一组小的片段，联合起来，创建一个更大个儿的。 让我们来看看一个更通用的前端应用组合模式。应用由头部的 header、底部的 foote…"}, {"id": "6844903810582708231", "title": "React 高级应用 -- 高阶组件 Heigher Order Component", "desc": "GitHub 学习 Demo。 高阶组件 是 React 中重用组件的主要实现方式。但高阶组件本身并不是 React API，它只是一种模式。 具体而言，高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。 简单地说，就是在不污染输入组件的情况下，输出一个功…"}, {"id": "6844904113709252615", "title": "'假的'必学必会之 React学习笔记一", "desc": "之前的文章里面我根据一些材料，整理了很多相关的基础知识。但是都是相当理论化的。现在开始是完全记录我的react学习的一个笔记整理。"}, {"id": "6844903735420796942", "title": "react-whc-notification", "desc": "支持React、Vue、React-Native、H5的消息通知组件库，支持一对多发送通知、主要解决跨组件以及页面之间的通信问题"}, {"id": "6844903582341267464", "title": "[译][A crash course in WebAssembly] 为什么WebAssembly这么快", "desc": "这是WebAssembly系列文章的第五部分，说明了它的快速之处。如果您还没有阅读其他文章，我们建议您从头开始。 在上一篇文章中，我解释说使用WebAssembly或JavaScript进行编程不是一种是或不是的选择。我们并不期望太多的开发人员会编写完整的WebAssembly…"}, {"id": "6844903647894044685", "title": "React 简单实现（一）", "desc": "React 是一款用于构建用户界面的 JavaScript 库。它以声明式编写 UI，创建拥有各自状态的组件，再由组件构成更加复杂的界面。 这个对象就是虚拟 DOM 对象，最后通过 ReactDOM.render 方法将虚拟 DOM 解析渲染到页面上。下面我们就分别来实现 cr…"}, {"id": "6844903534849163272", "title": "React + Redux 做的OW组队移动端Web", "desc": "初衷想学习React的项目开发，想把能用到的都用一遍，就把大杂烩全都融汇进去，做了一个简单入门的React一条龙项目GitHubhttps://github.com/zxj963577494/Over"}, {"id": "6844904041466560520", "title": "关于组件", "desc": "每一个React项目都会有一个根组件(当然是针对单页面的项目)。比如我们经常使用的叫做 App的组件。 ReactDOM负责将根组件挂载在指定的DOM元素上，一般我们指定的是 id为app的div上。 React中组件的转译之路。 React中我们直接使用的jsx语法来写组件，…"}, {"id": "6949854935148134430", "title": "性能优化 - 解决重新渲染之前，先解决渲染慢的问题", "desc": "如果页面中有渲染时的卡顿，先不要去减去不必要的重新渲染。更重要的是利用分析工具找到渲染慢的原因，解决它之后，再去看是否有不必要重新渲染的问题。"}, {"id": "6844903605732900872", "title": "「ReStory」在 Markdown 中自由书写 React 组件 （Beta）", "desc": "我们在开发一个小小的 React 组件库，但是我们遇到了一个大难题，那就是为我们的组件库书写一个合理的文档。 作为组件文档，我们非常希望我们的组件用例代码能够展现出来，是的我们在书写文档的时候，能够有直观的交互体验。 为了达到这一点，我开发一款文档构建工具 ReStory。如果…"}, {"id": "6844903496043479047", "title": "分享一个React-kit", "desc": "一个 react 脚手架, 由 vue-cli 改编而来。"}, {"id": "6844903537646764039", "title": "redux v3.7.2源码解读与学习之 createStore(核心方法)", "desc": "createStore 是redux中最核心的代码，下面我们一步一步来实现一个简易版的 createStore。 下面我们来一一的实现这个几个方法的内容。 代码很简单，现在调用 store.getState() 试试吧，是不是得到了 [\"Use Redux\"] 这个值呢。 掉一…"}, {"id": "6844903607867817992", "title": "Understanding React `setState` 翻译", "desc": "reacr组件通常都包含状态。状态可以是任何东西，想象一下使用场景：一个用户是否进行了登陆，根据账户的激活状态来展示准确的用户名。或者 是一系列博客文章。或者一个模态框是否打开以及其中的哪个标签是激活状态的。包含状态的React组件其渲染也依赖于这些状态。当组件的状态发生改变，…"}, {"id": "6844903640986025992", "title": "ThinkJS 项目中 React 同构实践", "desc": "编者注：一直以来使用SPA框架最大的问题是对搜索引擎不友好，虽然Google已经支持了抓取JS渲染后的页面，不过还是要照顾下国内的各家浏览器。随着React和Vue的流行，同构的概念慢慢被提出来，它最"}, {"id": "6844903660737003534", "title": "Reim 不是另一个「Redux」", "desc": "If you have been paying attention to Twitter past few weeks, you may have noticed the spiking rival between Redux and Mobx. In fact quite s…"}, {"id": "6909361121367916551", "title": "React实现一个简易可拖曳的Div组件", "desc": "实现思路为点击div时，记录点击事件中鼠标相对于浏览器窗口可视区域的X，Y坐标，未松开鼠标移动时同样记录X，Y坐标，并计算出此次移动的距离与上次距离的差距，得出结果赋值到top属性和left属性上，达到预期效果前提是position为absolute。"}, {"id": "6979900304208691231", "title": "[学习笔记]Redux的学习笔记", "desc": "1.Redux是一个专门用于做状态管理的JS库（不是react插件库） 2. 它可以用在React，Angular，vue等项目中，但基本与React配合使用"}, {"id": "6844904057312657415", "title": "写一个简单的病毒蔓延模拟器——为什么国家让你新型肺炎疫情期间呆在家里？", "desc": "今年春节响应国家号召呆在家里，呆了几天之后想出一个问题：为什么新型肺炎爆发，政府要大家尽量呆在家里、出门戴口罩或者限制出行...... 答案当时是减轻传染概率。 那各种防御措施，能达到什么效果呢？各种措施，做与不做的差别是什么呢？为了更直观的感受。 我写了一个简单的病毒蔓延模拟…"}, {"id": "6844903919726886926", "title": "快速了解 React Hooks 原理", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 React 早期版本，类组件可以通过继承PureComponent来优化一些不必要的渲染，相对于函数组件，React 官网没有提供对应的方法来缓存函数组件以减少一些不必要的渲染，直接 16.6 出来的 Reac…"}, {"id": "6844903806111596552", "title": "移动端适配深度探究", "desc": "既然是适配我们开始肯定要有一个参考屏幕，这里我们先提前确定下面所有的例子都是以iphone6的屏幕（宽度为375px）为参照。通常设计稿是2倍的设计稿，所以我们拿到的设计稿设计稿最终宽度为750px。 屏幕适配最终的目标或者说本质就是实现 等比缩放。 为什么要有个基准？因为我们…"}, {"id": "6844904058231193614", "title": "《精通react/vue组件设计》之5分钟实现一个Tag(标签)组件和Empty(空状态)组件", "desc": "本文是笔者写组件设计的第五篇文章,之所以会写组件设计相关的文章,是因为作为一名前端优秀的前端工程师,面对各种繁琐而重复的工作,我们不应该按部就班的去\"辛勤劳动\",而是要根据已有前端的开发经验,总结出一套自己的高效开发的方法.作为数据驱动的领导者react/vue等MVVM框架的…"}, {"id": "6919352365246054408", "title": "React Dev Inspector, 提升开发效率的神器！", "desc": "豆皮粉们，又见面了，这一期，我邀请到了字节跳动数据平台的腿长一米八sonacy小哥哥。他要给大家带来一个非常非常非常好用的插件！听说牛逼的人都在用它！这款插件防脱发效果非常非常好！是什么呢？让我们揭晓吧！ 有没有遇到看到别人项目，想看看实现却因为项目结构太深，而花了1个小时以上…"}, {"id": "6866029310533173255", "title": "在Vue和React中使用ECharts的多种方法", "desc": "俗话说：“工欲善其事，必先利其器”。现如今已经有许多成熟易用的可视化解决方案，例如ECharts，AntV等等。我们可以把这些解决方案比作是一套套成熟的“工具”，那我们如何将这些“工具”应用于当前最热门的两个前端框架中呢？ 不慌，现在我们就以ECharts为例，来尝试“工具”的…"}, {"id": "6948017180038414349", "title": "深入浅出react-router原理", "desc": "自己手写实现react-router，彻底掌握react-router原理，我将以这样的顺序进行。 利用H5 API实现路由的切换,HTML5规范给我们提供了一个history接口，HISTORY给我们提供了两个方法一个事件： history.pushState()和histo…"}, {"id": "6844903734787440647", "title": "React Hook 提高代码复用性", "desc": "代码复用一直是程序员所追求的，本文主要讲解如何利用 React Hook 提高代码的复用性。 Hook 是 React 新特性，让你不用写 class，也可以使用 React 的 state 以及其他功能。目前该特性发布在 v16.7.0-alpha 版本中，所以还不推荐在生产…"}, {"id": "6844903668609712142", "title": "如果你也刚入门React，来一起学习吧", "desc": "First thing first，这里我们利用create-react-app（需要nodejs环境）来创建这个项目，毕竟比较方便嘛，有其他创建项目和服务的方式也可以使用。 那我们开始吧，cd mycode & npm start。 我们启动后会看到这个界面，这是脚手架自带的…"}, {"id": "6915312944125313038", "title": "React 懒加载渐进性过渡效果（Typescript）", "desc": "新项目中，使用 Typescript + React(Hooks) 进行开发。项目需要使用图片懒加载功能，就对之前封装的 react-lazyimg-component(v0.0.2) 组件进行重构。在保持原有功能基础上，做了一些优化，和改进。react-lazyimg-com…"}, {"id": "6844903504578871304", "title": "使用 webpack 优化资源", "desc": "在前端应用的优化中，对加载资源的大小控制极其的重要，大多数时候我们能做的是在打包编译的过程对资源进行大小控制、拆分与复用。 本片文章中主要是基于 webpack 打包，以 React、vue 等生态开发的单页面应用来举例说明如何从 webpack 打包的层面去处理资源以及缓存，…"}, {"id": "6844903894422814733", "title": "React服务端渲染与同构实践", "desc": "前两年服务端渲染和同构的概念火遍了整个前端界，几乎所有关于前端的分享会议都有提到。在这年头，无论你选择什么技术栈，不会做个服务端渲染可能真的快混不下去了！最近刚好实现了个基于 React&Redux 的同构直出应用，赶紧写个文章总结总结压压惊。 在了解实践过程之前，让我们先明白…"}, {"id": "6844903624225587208", "title": "React+GraphQL入门", "desc": "最近刚完成一个新项目，闲着没事，想着学点新东西（做前端的人都懂，技术更新实在太快了，不学容易out）,听说GraphQL现在开始火起来，大有取代传统Restful API的方式的趋势，所以我决定学学。 由于GraphQL只是一套规范，不能直接使用，但社区有了很多编程语言的实现，…"}, {"id": "6929123222369615885", "title": "深入react技术栈--React生命周期", "desc": "React组件的生命周期根据广义定义描述,可以分为挂载, 渲染和 卸载这几个阶段。 当渲染后的组件需要更新时, 我们会重新去渲染组件,直至卸载。 组件挂载是最基本的过程,这是过程主要做的组件状态的初始化。比如 我们看到 propTypes 和 defaultProps 分别代表…"}, {"id": "6896284548355588109", "title": "React Form表单的简单实现", "desc": "阅读antd这部分源码之后，发现antd3和antd4在表单的实现思路还是有很大的差异的。 antd3的设计思路是需要实现表单数据的收集、校验、提交等特性。通过使用高阶组件进行扩展。高阶组件给表单组件传递一个input组件的包装函数用于接管input组件的输入事件，并统一管理表…"}, {"id": "6844903508009811981", "title": "面向未来的前端数据流框架 - dob", "desc": "我们大部分对内产品，都广泛使用了 dob 管理前端数据流，下面隆重介绍一下。 dob 是利用 proxy 实现的数据依赖追踪工具，利用 dob-react 与 react 结合。 dob 的核心思想大量借鉴了 mobx，但是从实现原理、使用便捷性，以及调试工具都做了大量优化。 …"}, {"id": "6844903665577279496", "title": "TypeScript在react项目中的实践", "desc": "前段时间有写过一个TypeScript在node项目中的实践。 在里边有解释了为什么要使用TS，以及在Node中的一个项目结构是怎样的。 但是那仅仅是一个纯接口项目，碰巧赶上近期的另一个项目重构也由我来主持，经过上次的实践以后，尝到了TS所带来的甜头，毫不犹豫的选择用TS+Re…"}, {"id": "6905750218537598983", "title": "Slate 介绍分析与实践", "desc": "Slate 是一个使用 TypeScript 开发的富文本编辑器开发框架，诞生于 2016 年，作者是 Ian Storm Taylor。它吸收了 Quill，Prosemirror，Draft.js 的优点，核心数据模型十分精简，具有高度的可扩展性，最新版本为 v0.60.1…"}, {"id": "6844903746325970952", "title": "React 16.x折腾记 - (11) 结合Antd菜单控件(递归遍历组件)及常规优化", "desc": "我的思路是直接递归,写成一个函数式组件. 有不对之处请留言,会及时修正,谢谢阅读."}, {"id": "6844903876219371534", "title": "基于React.Suspense和React.lazy的前端性能优化", "desc": "文章放在库存好久了。。。 React16.6于2018年10月份发布，该版本带来了许多新的特性同时赋予给React更强大的功能。其中最为显著的两个特性是 React.Suspense和 React.lazy。这两个特性，将React的代码分割和懒加载带到了一个新的高度。使用这两…"}, {"id": "6918686302850744334", "title": "React基本认识（七日打卡）", "desc": "在学习和使用React之前，对React有一个基本的认识，会让你更快地学习React的内容，也会更快地掌握React的使用方式。React是什么React是一个声明式，高效且灵活的用于构建用户界面的J"}, {"id": "6993703164495003685", "title": "React中的setState是异步的,第二个参数为回调函数", "desc": "举个简单例子说明setState是异步的以及其回调函数的使用.点击改变state的数据,如果需要在改变成功之后执行代码,需要把执行代码写入setState的回调函数内"}, {"id": "6952805851144912910", "title": "深入React Fiber", "desc": "- 当react遍历tree的时候，在execStack里面干这件事 - 当updates到来的时候，他们在eventQueue里干这件事(调用setState) - 只有当execStack为空了，"}, {"id": "6844904003692675079", "title": "redux和react-redux从实现到理解", "desc": "我们在使用react进行开发时，通常会搭配react-redux进行状态管理，react-redux其实是基于redux封装的，使开发者更方便的使用redux管理数据，所以要明确redux完全可以单独使用。我们要学习react-redux首先要先学习redux。 我们先来看一下…"}, {"id": "6844903849858203656", "title": "React（1）之——React入门", "desc": "React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。 npm install -g create-react-app下载官方的脚手架工具crea…"}, {"id": "6844904182403563527", "title": "React Hooks：正确运用Memoization（记忆化）解决性能问题", "desc": "React在大多数使用场景中已经足够高性能。如果你的应用足够快并且没有任何渲染问题，那么就没必要往下看了。不要尝试去解决假想的渲染问题，所以在提高性能之前，确认下你是不是熟悉React Profiler。 如果你已经明确知道加载慢的问题在哪，Memoization是最好的尝试方…"}, {"id": "6844903545028739086", "title": "正则表达式，理解这些就够了", "desc": "正则、要点"}, {"id": "6844903504050552839", "title": "Vue v2.5 调整和更新不完全详解", "desc": "近日，Vue v2.5 发布，除了对 TypeScript 的更好的支持外，还有一些功能和语法的调整，你需要了解。"}, {"id": "6844903545905348616", "title": "Mac配置React-Native开发环境", "desc": "安装相关软件HomebrewNodebrewinstallnode注意：安装完node如果用npm安装其他包时进度缓慢可以设置npm镜像：React-Native集成环境sudonpminstall-"}, {"id": "6844903607834263566", "title": "Jest-Vue-Report", "desc": "最近一直再忙公司项目的优化与重构，在写ui组件库，有阵子没出来写写文章和大伙儿交流交流啦，自己还是比较喜欢和热爱代码或者黑科技的童鞋一起沟通沟通，说不定在沟通过程中会时不时某个点或者某个经历能和大家产生共鸣。 小编一直是Vuejs和java的忠实粉丝，已经准备好了在全栈攻城狮的…"}, {"id": "6938755968566198302", "title": "React Testing library 101 （二）", "desc": "书接上文，上篇说到了 React Testing library 的安装和最基本用法。本篇继续深挖一些较复杂的场景。 开始 RTL 测试前，我们稍微回顾一下 Jest 的 Mock 测试。 先来说 mock 函数注入。我们写一个最最基础的 repeatTen 函数，功能就是调用…"}, {"id": "6844903895672553486", "title": "React之路由篇", "desc": "在 react-router-dom 中我们常用到的方法有：HashRouter ，BrowserRouter，Route，Link，Redirect，Switch。但是它内部是怎么实现的呢？ HashRouter 中存放着 location 与 history ，Route，…"}, {"id": "6974558009309528095", "title": "react源码解析14.手写hooks", "desc": "react源码解析14.手写hooks 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心ap"}, {"id": "6844903616017334286", "title": "干货--手把手撸vue移动UI框架：侧边菜单", "desc": "最近面试发现很多前端程序员都从来没有写过插件的经验，基本上都是网上百度。所以打算写一系列文章，手把手的教一些没有写过组件的兄弟们如何去写插件。本系列文章都基于VUE，核心内容都一样，会了之后大家可以快速的改写成react、angular或者是小程序等组件。这篇文章是第一篇，写的…"}, {"id": "6970674049131216904", "title": "手写react全家桶 (ts) - 持续更新", "desc": "手写react全家桶，深入了解背后实现原理。通过ts强类型辅助理解其类型结构。目前实现的有react，hook，react-router-dom。后续会持续更新文章。"}, {"id": "6844903565027180551", "title": "[译] React 16.3(.0-alpha) 新特性", "desc": "Context API 一直很神秘 —— 本来它是一个官方推出的、文档化的 API，但开发者们又提醒我们尽量不要用这个 API，因为这个 API 还没完全确定下来，以后可能会再作修改，而且文档尚不完备。不过，是时候让它发光发热了，RFC 流程已经通过了，新的 API 代码也已经…"}, {"id": "6941237169453269023", "title": "useState原理", "desc": "useState用法脑补一下点击button后会发生什么会使页面上的n变量由0变成1脑补之后问自己几个问题执行setN的时候会发生什么?n会变吗？App()会重新执行吗？如果App()会重新执行，那么"}, {"id": "6844903714218590216", "title": "一个hooks的“奇异”用法", "desc": "React hooks最激动人心的部分无疑是自定义hook，充满了无限的可能和可复用性，同时让代码前所未有得清晰。 即可。 今天写了一个奇异的custom hooks，奇异之处在于返回了组件。 会不会觉得好烦？ 我就想用一下弹层，怎么又要定义 visible 的 state，又…"}, {"id": "6844903597268795399", "title": "深入React v16新特性（一）", "desc": "React自发布v16版本以来已经有半年了，至今最新的是v16.3。从 v16 开始增加了较多新的API。相较于之前纯净的API设计，变化可以说是非常大了。可以看出 facebook 的 React 团队已经解决了之前的大多数问题，现在开始为 React 设计新的 API 、增…"}, {"id": "6844903648082788359", "title": "redux之compose", "desc": "redux 是状态管理库，与其他框架如 react 是没有直接关系，所以 redux 可以脱离 react 在别的环境下使用。由于没有和react 相关逻辑耦合，所以 redux 的源码很纯粹，目的就是把如何数据管理好。而真正在 react 项目中使用 redux 时，是需要有…"}, {"id": "6971678007031234591", "title": "【意译】React 18 的更新以及计划", "desc": "更新 我们已经开始开发 React 18 版本，这将是我们的下一个主要版本。 我们创建了一个Working Group（工作组），帮助社区为逐步采用 React 18 中的新功能做。 我们已经发布了 "}, {"id": "6934623291030306829", "title": "开源个 react 多行缩略组件, 支持自定义缩略符、尾文本过滤、缩略回调、富文本等", "desc": "入职头条快一年，平常工作中，不止一次听到 UI 反馈，头条 App 内的 h5 上偶尔会出现下面这样的体验 bug。 在缩略符 “...” 前面会小概率出现标点符号，看起来很不雅观。这么长时间这个问题一直没解决，因为自己手头的业务有点多也就没去关注这个他人需求。 最近刚好弄完绩…"}, {"id": "6844903805608263694", "title": "《深入react技术栈》之样式处理", "desc": "对于样式中的与大小相关的值，react进行了优化处理，我们直接使用数字即可，不用写px单位。 在我们不使用库之前，需要自己动态拼接classname的字符串。源文件也非常简单，其下载量也说明其使用频率比较高，参考源码：链接 css模块化的方案主要有两种，分别为行内样式以及结合j…"}, {"id": "6925692480616824846", "title": "从0开始搭建一个React开发框架", "desc": "在公司入职也很久了，发现很多下面的同学都不理解我们所用开发框架是如何搭建起来的，为了加强小伙伴们的基础功底，所以有了这篇文章。 此次我会带领大家一步步的来搭建一个开发框架，一共分四篇文章来写。 此时运行yarn webpack,会发现在dist目录下生成一个main.js文件，…"}, {"id": "6844904083321520142", "title": "webpack 中实现自动识别 CSS Modules", "desc": "其原理就是将 CSS 文件中的每个 className 按照一定的规则映射为另一个唯一的字符串，以保证 className 在全局作用域内不会重复和冲突。配置方法也很简单，只需要在 webpack 的 css-loader 中添加一个 modules 配置项即可，具体请参考 c…"}, {"id": "6844904074257629198", "title": "React用户安全的第一道防线", "desc": "当你在写 JSX 时，其实你在调用createElement方法。 createElement 会返回一个对象，我们称此对象为React的 元素（element），它告诉 React 下一个要渲染什么。你的组件（component）返回一个它们组成的树（tree）。 这样看起来…"}, {"id": "6844903605384773646", "title": "精读《重新思考 Redux》", "desc": "本周精读内容是 《重新思考 Redux》。 《重新思考 Redux》是 rematch 作者 Shawn McKay 写的一篇干货软文。 dva 之后，有许多基于 redux 的状态管理框架，但大部分都很局限，甚至是倒退。但直到看到了 rematch，总算觉得 redux 社区…"}, {"id": "6844903745067679757", "title": "React 16.x折腾记 - (10) UmiJS 2.x + antd 重写后台管理系统记录的问题及解决姿势", "desc": "有些必须需要props.children带上一些属性或者样式来保证我想要的效果."}, {"id": "6844903662884487181", "title": "React中使用UEditor", "desc": "本文将介绍笔者在React的项目中使用百度的富文本编辑器Ueditor的过程。注意本文不提供一条龙式的使用方法，只是将使用过程中的一些实现思路进行总结，供以参考。react项目中导入ueditor，会存在各种不正交的问题，需要注意。 首先在ueditor官网下载最新安装包，然后…"}, {"id": "6844903761899585549", "title": "React性能优化总结", "desc": "初学者对React可能满怀期待，觉得React可能完爆其它一切框架，甚至不切实际地认为React可能连原生的渲染都能完爆——对框架的狂热确实会出现这样的不切实际的期待。让我们来看看React的官方是怎么说的。React官方文档在Advanced Performanec这一节，这…"}, {"id": "6844904050509660167", "title": "React@16.8.6原理浅析（源码浅析）", "desc": "React 采用 monorepo 的管理方式。仓库中包含多个独立的包，以便于更改可以一起联调，并且问题只会出现在同一地方。 packages 包含元数据（比如 package.json）和 React 仓库中所有 package 的源码（子目录 src）。如果你需要修改源代码…"}, {"id": "6931727121819631623", "title": "React - 针对表格中输入框性能优化思路", "desc": "如今React在开发者中越来越普及，组件化的思想极大地提高了我们的开发效率。但在开发的时候，由于需求快速迭代，且急忙上线，我们可能较少地考虑React的一些性能问题，这篇文章主要讲一个自己的需求优化经验 接到一个在代码层面看不合理，但实际使用上确实很合理的交互，即将一整个 ta…"}, {"id": "6844903843545743374", "title": "react源码-事件监听", "desc": "这是我们在React中绑定事件的常规写法。经由JSX解析，button会被当做组件挂载。而onClick这时候也只是一个普通的props。 绑定的重点是这里的listenTo方法。看源码(ReactBrowerEventEmitter) 对于同一个事件，例如click有两个事件…"}, {"id": "6910544571629830157", "title": "如何优雅的消灭掉react生命周期函数", "desc": "在react应用里，存在一个顶层组件，该组件的生命周期很长，除了人为的调用unmountComponentAtNode接口来卸载掉它和用户关闭掉浏览器tab页窗口，该顶层组件是不会有被销毁的时机的，它一直伴随着整个应用，所以我们都会在该组件的componentDidMount函…"}, {"id": "6924326246973669389", "title": "useEffect和useLayoutEffect的区别", "desc": "react hook面世已经有一段时间了，相信很多人都已经在代码中用上了hooks。而对于 useEffect 和 useLayoutEffect，我们使用的最多的应该就是useEffect。那他们两个到底有什么不一样的地方？ 这两个函数的使用方式其实非常简单，他们都接受一个函…"}, {"id": "6872701669642076168", "title": "React高阶组件详解", "desc": "React高阶组件高阶组件1.认识高阶函数2.高阶组件的定义3.高阶组件应用场景4.高阶组件的意义4.ref的转发(获取函数式组件DOM)PortalsPortals的使用FragmentFragme"}, {"id": "6844904177265541128", "title": "NextJS 预渲染时 Axios 转发元数据", "desc": "现在很多网站都使用了前后端的分离的架构，前后端可以不在一台服务器上，前端为了保证 SEO，必须使用预渲染，SSG 或 SSR 技术。而我的站点则使用了 NextJS 的 SSR 技术。在渲染端预渲染页面时首先会调用 Axios 实例去请求接口。但是有一个问题。在渲染端请求的头部…"}, {"id": "6844903829691957261", "title": "next.js小结", "desc": "antd 阿里系提供的UI Framework，这个就不说了.@zeit/next-less 由next.js官方推荐样式解决方案，也有scss,css,stylus的，这个可自行去官网查看，less-vars-to-js这个用来配置主题，在next.config.js中进行配…"}, {"id": "6972386597794742309", "title": "从0实现一个简单create-react-app", "desc": "1. 准备工作 1.源码调试 2.创建项目 3.模拟流程 2.实现自己的简单cra 1. 项目初始化 2.实现create-react-app包 3.实现cra-template包 4. 实现reac"}, {"id": "6844903582102192142", "title": "漫谈 React 组件库开发（二）：组件库最佳实践", "desc": "一个系统拥有大量的业务场景和业务代码，相似的页面和代码层出不穷，如何管理和抽象这些相似的代码和模块，这肯定是诸多团队都会遇到的问题。 不断的拷代码？还是抽象成 UI 组件或业务组件？显然后者更高效。 那么现在就面临一个选择：一是选择 React 生态中已有的组件库，例如 ant…"}, {"id": "6844904021984018439", "title": "React Hook 系列(二)：自定义hook的一些实践", "desc": "从React 16.8 稳定版hook发布近一年多，使用hook并不普遍，原因可能有两方面: 一、官方并没有完全取代class；二、迭代项目完全hook话需要成本，官方也不推荐。恰巧新项目伊始，就全面采用hook，这也是写这篇文章的原由，接上一篇 ，这篇主要是自定义hook的一…"}, {"id": "6844903902253432845", "title": "[译] React Hooks  越来越火了，它会取代传统的 Redux 吗？", "desc": "React Hooks 自推出之后，收到了不少追捧， 很多问题也随之而来。 我认为： 不会. 在我看来，相比于传统的Class Component, Hooks 并没有提供什么新的状态功能，只不过是对原有的 API 做了增强。 相比之前，Hoos 更加简洁，也提升了原生 API…"}, {"id": "6844903999351554056", "title": "React 记录 - 使用 TS 编写 React 项目(1)", "desc": "引言：TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个严格超集，并添加了可选的静态类型和使用看起来像基于类的面向对象编程语法操作Prototype。因此，我们可以像编写强类型语言（java, dart）等编码方式来编写javascrip…"}, {"id": "6885897074412683272", "title": " 特效页面：排名多场景组件的设计", "desc": "本文主要是分享在一个涉及到本人排名在多种情况下所处位置不同的具体实践。 针对设计稿提供效果，共有8种情况，分别是4个节点的4种，5个节点的4种。 从dom出发，简单的处理方案时，按照4+4的方式，将每个节点都放在视图中，然后控制其样式以及显示隐藏。 因此，只需要知道用户的排名以…"}, {"id": "6998708457683550239", "title": "React基础+脚手架笔记", "desc": "react是一个将数据渲染为HTML视图的开源JavaScript库 React的优点 采用组件化模式，声明式编码，提高开发效率及组件复用率 在React Native中可以使用Re"}, {"id": "6925699823597273102", "title": "国际化方案，从umi2.x升级到umi3.x", "desc": "1. 引论 目前umi已经发布到3.x的版本，项目升级后，发现以前的国际化方案不是很适用于目前大量使用hook的react项目。现在直接从umi/locale中使用formatMessage，umi会在控制台告警： 2. locales升级 接着，需要在src目录下创建loca…"}, {"id": "6844903959635705870", "title": "Next.js 实践总结 - 登录授权验证最佳方案", "desc": "登录逻辑很简单，也没什么可说的，无论是什么系统，登录模块应该都是必不可少的，那么我就来说一下我这边开发过程中遇到的一些问题和总结吧。一般来说，对于商业系统或者博客类系统，登录有两种场景。 第二种，用户登录过系统，系统保存用户的授权信息，在一定的时间内，不会再进行登录，用户进来直…"}, {"id": "6975122686846435342", "title": "试用React 18 Alpha版", "desc": "试用React 18 Alpha版 React团队最近发布了React 18的新alpha版本。这个新版本的主要新增功能是提高你的React应用程序的性能的并发功能。 你已经可以在React 18中尝"}, {"id": "6921659113210380302", "title": "React常见性能优化方案", "desc": "React.lazy 函数能让你像渲染常规组件一样处理动态引入（的组件）。 由于memo使用的是Object.is()进行，只能比较一层（浅比较），如果props嵌套较深是无法识别到组件变化的，所以很多时候我们需要深比较，但是常规深比较涉及到大量递归算法，严重影响性能，但是借助…"}, {"id": "6844903986512789517", "title": "在 React 如何实现一套优雅的 Toast 组件", "desc": "在业务开发中，特别是移动端的业务，Toast 使用非常频繁，几乎涵盖所有操作结果反馈的交互：如提交表单成功、验证表单失败提示、loading 态提醒...，这种轻量且使用较为频繁的组件，我们要求它使用足够简单，不侵入业务代码，即用即丢，基于这些要求，Toast 组件的实现方式也…"}, {"id": "6844904025154945032", "title": "利用React 自定义Hooks实现业务逻辑复用实例", "desc": "React Hooks 除了可以给函数式组件赋予状态和生命周期管理外，最重要的一点是可以把共用的逻辑处理代码抽离出来给不同的视图组件进行使用，它的目的和 HOC 和 Render Props 基本相同。这篇文章将以请求远程API数据为例，最后抽离出公共的数据请求的自定义 hoo…"}, {"id": "6844903680320208903", "title": "在React中使用百度地图api的一系列demo", "desc": "因为之前工作的关系，会频繁的使用各种地图，例如百度地图，高德地图，谷歌地图等。所以想整理一下，写一个在react中根据不同的需求使用地图api的各种demo集合，所以先以百度地图为例。 本文将根据官网显示的demo列表，一个一个实现在react中的使用方法。文章内容较长，将会持…"}, {"id": "6967236634563575844", "title": "2021-05-27 choerodon-ui中查询表单的封装", "desc": "使用方式 先定义一个dataSet数据集 然后，传入QueryMoreBar的几个必须属性props，dataSet、queryFunction等 运行yarn start命令就可以看到页面了 Que"}, {"id": "6844903682505441288", "title": "初识react(五) 数据流终极解决方案 dva(零配置)", "desc": "基于 redux、redux-saga 和 react-router 的轻量级前端框架。 当此类行为会改变数据的时候可以通过 dispatch 发起一个 action，如果是同步行为会直接通过 Reducers 改变 State ，如果是异步行为（副作用）会先触发 Effect…"}, {"id": "6844903588334927879", "title": "react-router了解一下", "desc": "react-router是做SPA(不是你想的SPA)时，控制不同的url渲染不同的组件的js库。用react-router可以方便开发，不需要手动维护url和组件的对应关系。开发时用react-router-dom，react-router-dom里面的组件是对react-r…"}, {"id": "6844903850013360142", "title": "Create React app 引用中使用绝对路径", "desc": "随着Create React App 3的发布，我们现在引入组件或对象时可以使用绝对路径（absolute import),而不需要eject项目。 哈利路亚。 也许不用我解释你也知道这一利好，不过我还是总结一下好处。 根据官方文档的解释，在你项目的根目录下创建jsconfig…"}, {"id": "6983855025424433159", "title": "React 源码之diff算法", "desc": "概览 从本章开始我们将进入react的diff算法阶段，在正式进入此阶段之前，先了解下react diff算法的设计动机。 设计动机 在某一时间节点调用 React 的 render() 方法，会创建"}, {"id": "6844903507892387848", "title": "React 从青铜到王者系列教程之倔强青铜篇", "desc": "前端大陆乃是技术界近年来新兴起的板块，随着人们对网站交互和性能越来越高，前往前端大陆修炼Javascript的召唤师如过江之鲫，数不胜数，前端奇人异士之多，故修炼之法林林总总，俱不相同，Web前端的未"}, {"id": "6844904093463363591", "title": "精读《Suspense 改变开发方式》", "desc": "很多人都用过 React Suspense，但如果你认为它只是配合 React.lazy 实现异步加载的蒙层，就理解的太浅了。实际上，React Suspense 改变了开发规则，要理解这一点，需要作出思想上的改变。 我们结合 Why React Suspense Will B…"}, {"id": "6844904009220931598", "title": "React Hooks工程实践总结", "desc": "最近在项目中基本上全部使用了React Hooks,历史项目也用React Hooks重写了一遍，相比于Class组件，React Hooks的优点可以一句话来概括：就是简单，在React hooks中没有复杂的生命周期，没有类组件中复杂的this指向，没有类似于HOC,ren…"}, {"id": "6971601879717380104", "title": "React Router 入门", "desc": "路由，是我一直都不太了解的部分，但是在 React 开发网页中，又是经常用到的。碰巧自己的项目又刚好被路由弄得头昏眼"}, {"id": "6987724400946577444", "title": "React 通过 antd-ui 上传图片使用方法，整理如下", "desc": "效果图展示如下，关于大量的叙述就放在注释当中了，为了减少疑惑，代码是以整段形式写入，可以自行调试修改"}, {"id": "6844903513856671758", "title": "妈妈再也不用担心我不会webpack了2", "desc": "之前写了一篇妈妈再也不用担心我不会webpack了，这次继续对其进行补充。本文依旧是遵循直观易懂的规则进行书写。希望对大家有帮助。如果不太熟悉webpack可以先看看之前的文章妈妈再也不用担心我不会webpack了。下面我们由浅入深来介绍webpack的使用 path其实是no…"}, {"id": "6844903728273686541", "title": "Taro实践 - 深度开发实践体验及总结", "desc": "凹凸实验室的 Taro 是遵循 React 语法规范的多端开发方案，Taro 目前已对外开源一段时间，受到了前端开发者的广泛欢迎和关注。截止目前 star 数已经突破11.7k，还在开启的 Issues 有 200多个，已经关闭700多个，可见使用并参与讨论的开发者是非常多的。…"}, {"id": "6844903632702275598", "title": "一起学习造轮子（三）：从零开始写一个React-Redux", "desc": "这个库是可以选用的。实际项目中，应该权衡一下，是直接使用 Redux，还是使用 React-Redux。后者虽然提供了便利，但是需要掌握额外的 API，并且要遵守它的组件拆分规范。 本文对于react-redux的用法不会过多介绍，重点仍然放在源码实现上。如果还不太了解如何使用…"}, {"id": "6844903978061266957", "title": "react中props和state有什么区别?", "desc": "setState()会对一个组件的 state 对象安排一次更新。当 state 改变了，该组件就会重新渲染。 props（“properties” 的缩写）和 state 都是普通的 JavaScript 对象。它们都是用来保存信息的，这些信息可以控制组件的渲染输出，而它们的…"}, {"id": "6844903559889158151", "title": "React构建个人博客", "desc": "在学习react的过程中，深深的被react的函数式编程的模式所吸引，一切皆组件，所有的东西都是JavaScript。React框架其实功能很单一，主要负责渲染的功能，但是社区很活跃，衍生出了很多优秀的库和工具。个人觉得，想要做好一个项目，往往需要其他库和工具的配合，例如red…"}, {"id": "6844903958381608974", "title": "【React系列】手把手带你撸后台系统（Redux与路由鉴权）", "desc": "侧边导航栏（Sidebar）我们实现了根据配置渲染菜单项，现在我们要继续完善它的功能：导航高亮与鉴权。我们通过redux管理我们Sidebar的状态，想要redux的store可用，我们必须使用它的<Provider />和connect()： <Provider />的作用是…"}, {"id": "6844903571192823816", "title": "redux-saga 初识", "desc": "，如果感兴趣或者对美股感兴趣可以加我微信: xiaobei060537, 一起交流 😝。 redux-saga 是一个管理 Redux 应用异步操作的中间件，功能类似redux-thunk + async/await, 它通过创建 Sagas 将所有的异步操作逻辑存放在一个地…"}, {"id": "6893843468742426632", "title": "React hooks使用经验", "desc": "1. 函数式更新 除了常规的setState(value)的方式去更新状态以外，setState还可以接收一个函数来更新状态。这种更新状态的方式通常使用在新的 state 需要通过使用先前的 state 计算得出的场景。 但是依赖项设置后会导致每次改变发生时定时器都被重置，这并…"}, {"id": "6992459660691259422", "title": "react + upload多个图片拖拽排序", "desc": "基于 react + ant design 的upload组件，实现上传图片以及拖动图片排序的功能。"}, {"id": "6844903651555835912", "title": "初识React：仿网易公开课（react+antd）", "desc": "在这个项目中，我使用了react-redux来管理数据的状态，但是并没有连接数据库，所以界面一刷新，store里面的state就全部清零了。这导致我一开始用location跳转就一直保存不了数据，纠结了半天，于是就百度了一下，最后发现可以使用 react-router-dom …"}, {"id": "6844904019228360717", "title": "使用 GG-Editor 开发脑图应用", "desc": "本项目是基于 GG-Editor 进行开发的脑图应用，基本上是一个较为完整的应用了，可以说已经预先给你们把坑踩过了，另外本项目所有代码基本可以很快速的实现一个流程图应用，因为基本的 API 使用上是相同的。 另外，本文不会过多的讲述官方文档有的内容，会注重于使用上。 下面我们快…"}, {"id": "6844904105815572493", "title": "react+echarts实现全国客户数据展示", "desc": "数据可视化一直都是一个流行的话题。我们平时做项目可能就避免不了与图图表表打交道。所幸的是现在有许多优秀成熟的数据图表库，例如Echarts和Highcharts，我们可以在里面寻找自己需要的图表，方便快捷~ 假设我们有这样一个需求：把统计到的全国客户数据，利用可视化的方案展示出…"}, {"id": "6992415442111299597", "title": "React中的事件处理，受控组件，高阶函数和函数柯里化", "desc": "1.1.2.3.a.b.4.通过event.<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.<script src=\"./js/react.development.<script src=\"./..."}, {"id": "6992415425371832356", "title": "React中组建实例的三大属性(state,props,refs)", "desc": "1.1.2.3.1.2.<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.<script src=\"../js/react.development.<script src=\"../js/react..."}, {"id": "6992406031577907213", "title": "react setState(updater, [callback]) 改变state对象的值", "desc": "@[toc] 一、文章参考 react 修改state为对象中的某一个属性值 State & 生命周期 setState API介绍 二、正确地使用 State setState(updater, ["}, {"id": "6992402948705746981", "title": "react配置代理", "desc": "react配置代理方案 带注解，告诉您各个配置的含义 方案一 直接在package.json中设置proxy属性 方案二 在src目录下创建文件setupProxy.js文件"}, {"id": "6844904132696866830", "title": "create-react-app 按需引入 antd 组件, 更改主题配置", "desc": "create-react-app 创建一个 react 项目. 然后引入 antd. antd 官网的流程需要自行写配置文件. 与 webpack 相结合. 当然这种做法也无不妥. 但是如果你也想一观背后别有洞天的代码. 那就看下去! 如果, 在配置过程中遇到问题, 可参照对应…"}, {"id": "6994833349772574728", "title": "react-virtualized使用", "desc": "react-virtualized使用, 长列表优化 完成地址列表页面，且有侧边字母导航，使用List"}, {"id": "6966904305370529805", "title": "React源码--ReactElement学习笔记", "desc": "ReactElement是什么？ ReactElement主要使用Object.defineProperty设置属性 Object.defineProperty 描述对象descriptor的属性有哪"}, {"id": "6908627532048924679", "title": "React  组件化", "desc": "使用组件化的网页开发方法， 组件之间的通信是个避免不了的话题。组件之间的通信方式也是多种多样，现在我们就来介绍一种使用Context进行跨层级的通信的方式。 首先， 一般我们会先在一个单独的文件中， 比如context.js。定义如下的变量： 然后在祖先组件中，使用Provid…"}, {"id": "6942662493118414861", "title": "dva分析", "desc": "不显示安装history或者指定老版本history进行安装。否则自己安装history是使用history5"}, {"id": "6844903773106601991", "title": "Chat-React基于react的聊天会话组件", "desc": "userInfo 你必须为这个参数定义userId和 avatar属性,也可以添加一些你需要属性。 emoji 如果设置emoji参数为false,则不显示emoji。如果你想添加更多的emoji,您可以设置这个参数为数组，内容为你所添加的emoji。"}, {"id": "6844903687895138317", "title": "React HOC高阶组件详解", "desc": "High Order Component（包装组件，后面简称HOC），是React开发中提高组件复用性的高级技巧。HOC并不是React的API，他是根据React的特性形成的一种开发模式。 在React的第三方生态中，有非常多的使用，比如Redux的connect方法或者Re…"}, {"id": "6844903813678120967", "title": "react组件通讯通识篇", "desc": "本文为入门级别的技术文章以及读书笔记，大佬请忽略。demo地址：链接 父组件向子组件通讯是我们开发中非常常见，其方式也一般是props属性最直接方便，当然这里指的是直接就是父子组件关系的。 这里只希望提示大家一点，如果你有需要，不要直接修改传入属性的值，如果你尝试直接修改会有提…"}, {"id": "6939740399770533901", "title": "react-redux状态管理", "desc": "众所周知，React中数据通信是单向的，即父组件可以通过props向子组件传递数据，而子组件却不能向父组件传递数据。要实现子组件向父组件传递数据的需求，需要父组件提供一个修改数据的方法，当页面越来越多的时候，数据的管理就会变得异常复杂。 并且，每次数据的更新都需要调用setSt…"}, {"id": "6844903792253616141", "title": "Function 与 Classes 组件的区别在哪？", "desc": "以前，一个标准答案是说 classes 提供更多的功能（例如 state）。有了 Hooks，便不是这样了。 可能你听过其中一个性能更好。哪一个？许多这样的性能基准都存在缺陷，所以我会小心地从中得出结论。性能主要取决于代码而不是选择一个 function 或者 一个 class…"}, {"id": "6850037270779543559", "title": "Malagu 框架开发 React 应用新体验", "desc": "Malagu 是基于 TypeScript 的 Serverless First、可扩展和组件化的应用框架。 Malagu React 组件是对 React 框架的集成，将 React 框架通用的功能进行了一定的封装，比如渲染到 Dom 树、路由的定义、上下文扩展等等。 安装完…"}, {"id": "6844904024462884871", "title": "解读 React v16+ 最新生命周期使用场景", "desc": "触发时间(v16.4修正)：组件每次被render的时候，包括在组件构建之后(虚拟dom之后，实际dom挂载之前)，每次获取新的props或state之后。 每次接收新的props之后都会返回一个对象作为新的state，返回null则说明不需要更新state. getDeriv…"}, {"id": "6844903513198166030", "title": " 【React】setState详解", "desc": "这四次输出，按常理来说分别是: 1，2，3，4。但是，实际输出为: 0, 0, 2, 3。 在分析之前，需要知道setState的一些关键点。 多次setState函数调用产生的效果会合并。 上面两块代码的效果是一样的。如果每次调用都引发一次生命周期更新，那性能就会消耗很大了。…"}, {"id": "6844903687492468744", "title": "聊一聊 React 中更新 ui 视图的几种方式", "desc": "刚为祖国母亲庆完生，眼看假余额就要不足了，小伙伴们玩的是否开心呢，反正我是死宅在家，没出去玩，在家也没好好学习，实属惭愧。这不，今天和大家分享下关于 react 驱动 ui 更新的几种方式，都说 react 是单向数据流，数据驱动 ui，那么你知道在 react 中有几种驱动视…"}, {"id": "6925705351375355912", "title": "扔掉你的Class吧，Hooks太香了（一）", "desc": "Hook 是React16.8中新增的特性，它可以让你不编写class组件的情况下使用诸如state，生命周期等特性。 为了解决这类问题，也有出现过一些解决方案，如render props、高阶组件、Context等，它们都会导致组件树形成嵌套地狱（有点像回调函数和flutte…"}, {"id": "6974736411857518605", "title": "全网最全React源码调试傻瓜式教程", "desc": "还在纠结怎么阅读React源码吗？调试！还在苦苦思索怎么调试React源码吗？全网最全React源码调试傻瓜式教程。"}, {"id": "6844903837778575374", "title": "React 异步数据管理思考", "desc": "异步数据管理一直是前端的一个重点和难点，可以这么说，80%的 web 应用会有异步数请求据并在 UI 中消费，并且在相当多的 web 应用中，处理异步数据是它的核心业务逻辑。 在 React 的生态圈中，大部分人把异步数据使用状态管理维护，比如使用 Redux，用异步 Acti…"}, {"id": "6844903549663444999", "title": "React组件的DidMount事件里的setState事件", "desc": "运行这段代码，我们可以看到屏幕里打印的是0、0、2、3。 我们可以看到，如果处于批量更新阶段内，就会把所有更改的操作存入pending队列，当我们已经完成批量更新收集阶段，我们读取pengding队列里的操作，一次性处理并更新state。那么根据上面的执行结果，我们大概可以猜到…"}, {"id": "6942762282220781604", "title": "在 React 中如何防止代码爆炸", "desc": "在写了很长一段时间的 useState, useEffect 之后，发现 Functional Component 确实比 Class Component 更加方便，模糊了生命周期的概念，也没有很多令人上头 UNSAFE 方法。但是真正让我想要防止代码爆炸的其实是一条 lint…"}, {"id": "6915664914346573831", "title": "react-dnd 多层嵌套使用", "desc": "不做具体react-dnd的api讲解，如有需要请查看官网文档，描述很清晰。 由于数据是循环嵌套的，因此我们分为2个组件来实现，分别为list和item，再包含一个入口的文件。"}, {"id": "6844903802164740110", "title": "React 渲染优化：diff 与 shouldComponentUpdate", "desc": "我曾经对 shouldComponentUpdate 的用途不解。react 的卖点之一，是通过 diff 虚拟节点树，减少对真实节点的操作，所以我以前以为既然 diff 了，那就自然知道节点有没有更新了，diff 是根据 setState 的内容进行的，那 shouldCom…"}, {"id": "6961006341347344421", "title": "【Rematch 源码系列】零、重新设计 Redux", "desc": "本文翻译自 Rematch 作者 Shawn 的 Redesigning Redux。到目前为止，如何做状态管理难道不是一个已解决的问题吗？直觉上，开发者似乎知道：状态管理本应简单，实际却更难了。在这"}, {"id": "6844903822272397319", "title": "深入理解 React 的 Virtual DOM", "desc": "React在前端界一直很流行，而且学起来也不是很难，只需要学会JSX、理解State和Props，然后就可以愉快的玩耍了，但想要成为React的专家你还需要对React有一些更深入的理解，希望本文对你有用。 在复杂的前端项目中一个页面可能包含上百个状态，对React框架理解得更…"}, {"id": "6844903821995409422", "title": "借助Github Page把你的React项目部署到线上环境", "desc": "我今天来讲解下利用github page是来部署你的前端项目。 注意这里是新建普通仓库，不需要创建github.io类型的仓库，关于github.io类型仓库如果读者还不了解可自行百度了解，这里提供笔者利用github.io+hexo搭建的Flutter进阶之旅专栏给大家参考F…"}, {"id": "6865515467331764238", "title": "尝试让 Draft.js 支持简单的表格功能", "desc": "成功的案例有 Overleaf，简历生成器 Resumake。"}, {"id": "6964000438886596621", "title": "React Suspense & ErrorBoundary", "desc": "Suspense 不是一个数据请求的库，而是一个机制。这个机制是用来给数据请求库向 React 通信说明某个组件正在读取的数据当前仍不可用。"}, {"id": "6844903568403611655", "title": "react-navigation使用介绍及UI组件外实现统一跳转", "desc": "react-navigation是React Native中非常著名的一个页面导航库，可以实现各种页面跳转，它是React Native社区总结出来的精华。有了这个库，我们可以实现类似iOS中UINavigationController的导航效果、常见的tabBar页面和And…"}, {"id": "6844903639958437895", "title": "基于React的全屏滑动插件react-fullslip", "desc": "一年多没上自己的github。。没想到这个插件还真有人用，还有人点了星，提了issues，我已经把issues中的问题都解决了。。今后也会积极更新这个插件，欢迎使用！大家一起找 bug！ 新增了导航点可添加自定义图片的参数。 插件已经上传npm. 这里我定义了两个组件,Full…"}, {"id": "6844903913427042311", "title": "[译]深入解读 React 核心之组件篇", "desc": "本系列涵盖了使用 React 的所有知识，分为上、中、下三篇。此为中篇，本篇主讲 React 组件。 本系列涵盖 React v16.9，但更多的是 React 全面解析，具体 React v16.9 新特性可查看 [译]React v16.9 新特性。 上篇主讲 React …"}, {"id": "6844903849082224653", "title": "十个案例学会 React Hooks", "desc": "在 React 的世界中，有容器组件和 UI 组件之分，在 React Hooks 出现之前，UI 组件我们可以使用函数，无状态组件来展示 UI，而对于容器组件，函数组件就显得无能为力，我们依赖于类组件来获取数据，处理数据，并向下传递参数给 UI 组件进行渲染。在我看来，使用 …"}, {"id": "6917642831238692878", "title": "React Hooks 使用实践 | 七日打卡", "desc": "目前来说，每个前端团队都有自己对 React Hooks 的使用偏好，在基于 hooks 的数据流管理或许没有所谓的最佳实践，但是开发过程中还是有一些准则可以参考。当你不熟悉一个新东西的时候，你就该去看它的文档。 React Hooks 是完全不同以往的心智模型，从使用开始我们…"}, {"id": "6905229862856818695", "title": "React中共享组件逻辑的三种方式", "desc": "废话少说，这三种方式分别是：render props、高阶组件和自定义Hook。下面依次演示 这属于在 TimeOnPage组件内部硬编码，还没有达到封装复用的目标。看看render props怎么做？ 接上文，在TimeOnPage里定义一个值为函数的prop，想渲染什么组件…"}, {"id": "6844903558207258631", "title": "基于React跑一个简易版九宫格抽奖", "desc": "这个布局相信大家都很熟悉吧，特别是看过阮一峰Flex 布局教程：实例篇的童鞋们，是不是倍感亲切。 没错，我们这个布局是基于flex完成的，主要思路是纵横元素的分离。 整个九宫格区域应该是一个定宽高（其实不定也无所谓）的块元素，将每一行(row)纵向排列。 每一行都是一个row，…"}, {"id": "6844903599244312589", "title": "React 深入系列7：React 常用模式", "desc": "本篇是React深入系列的最后一篇，将介绍开发React应用时，经常用到的模式，这些模式并非都有官方名称，所以有些模式的命名并不一定准确，请读者主要关注模式的内容。 1. 受控组件 React 组件的数据流是由state和props驱动的，但对于input、textarea、s…"}, {"id": "6991665381790203912", "title": "React 最佳实践：完成一个列表需求叭｜ 8月更文挑战", "desc": "列表页面是实际开发中最最常见的场景，它是一堆数据的集合的展示，开发列表主要需要考虑的技术点：获取数据后的展示以及对数据的缓存"}, {"id": "6844903633989943309", "title": "H5数字键盘组件适配React/Angular/Vue", "desc": "为什么不直接使用系统键盘？H5键盘和H5页面完美适配，没有挤压页面的问题解决系统键盘不支持autofocus的问题自定义键盘布局，定制化输入体验产品需求你怕不怕这个轮子有什么好？支持原生JS、Reac"}, {"id": "6844903848746680327", "title": "有点东西的React+Node开源博客", "desc": "如果你喜欢的话, 就随意折腾吧. 只需保留下图的 注释即可 : )"}, {"id": "6976878236429090824", "title": "以demo的方式理解React PureComponent/Component/函数式组件", "desc": "面试题中经常会遇到，React.PureComponent 和 React.Component 有什么区别, React官网也已经给出了答案 可以整理出两个点 React.PureComponent"}, {"id": "6844903976165441543", "title": "记一次React应用同构(SSR)", "desc": "因为每次访问端口都依赖于静态资源，所以每次修改代码查看效果都需要webpack重新编译，开发过程中相对麻烦。 hydrate在浏览器端对存在元素挂载监听事件。React希望服务端渲染的内容与浏览器渲染的内容一致。同时，React可以对文字内容的不一致进行修补，但我们最好不要人为…"}, {"id": "6976497813672689672", "title": "React + Koa 实现文件断点续传", "desc": "断点续传 什么是断点续传 断点续传，指的是在上传/下载的过程中，由于网络或其他原因导致上传/下载终断。可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传/下载。用户可以节省"}, {"id": "6914089356474974222", "title": "如何设计路由权限？", "desc": "新年快乐，我又来更新了~今天的主题是路由权限。对于react中的路由权限管理，react-router并没有给我们提供任何API操作，需要我们单独封装一个组件。对于路由的权限管理，我们要考虑的点很多，"}, {"id": "6906871781890457613", "title": "快速上手React(下)", "desc": "0.React生命周期1.组件的复用render-props模式鼠标跟随效果render-props模式的children写法高阶组件（HOC）修改高阶组件别名displayName效果传递props"}, {"id": "6867041652070940680", "title": "你可能并不需要redux", "desc": "前言我们回想下我们为什么准备用redux，是否我们的交互已经复杂到难以维护，是否存在复杂的共享状态，是否存在复杂的组件间交互，如果并没有以上的复杂度，我们也许并非需要redux。我个人也在业务中用过r"}, {"id": "6844903678306959368", "title": "【译】快速入门ES6解构以及rest参数语法", "desc": "我们首先会讨论如何在ES6中对数组以及对象使用解构（destructing）和rest参数语法。然后我们接下来再看一些例子，并且讨论一些quiz。 如果我们每次都要显式地书写{ keys: newVariable }，那未免过于啰嗦了。所以我们可以采用简写的形式： 显然，如果你…"}, {"id": "6844903636812693511", "title": "我们要的是一个简单的react-router路由", "desc": "习惯了 vue-router 路由的用法，再用react-router总感觉挺麻烦的。 管它有没有，轮子我已经造好了，请收下react-concise-router。 react-concise-router 是一个基于 react-router v4.x 封装的一个路由插件。…"}, {"id": "6844903713019002894", "title": "ReactNative升级0.56.0注意问题", "desc": "当前项目react-native的版本是0.53.3，因为最近在做一系列性能优化的工作，于是计划升级一下RN的版本，升级至0.56.0。 其他升级问题可参考这篇文章,也可在评论区与我进行沟通。"}, {"id": "6947639615599673374", "title": "react hooks报错: Rendered fewer hooks/Rendered more hooks", "desc": "当然了, 我只是举个例子, 毕竟我们用react进行开发, 这么样的一个需求, 无论如何也不会这么写, 毕竟任何技能你熟练到一定程度, 想犯错反而是个比较困难的事, 这不是凡尔赛哈, 我想写这个报错的例子也还是想了一下才写出来的... 不要在循环, 条件或者嵌套函数中调用hoo…"}, {"id": "6844903565199163400", "title": "深入理解React源码 - 界面更新（单个DOM元素） VIII", "desc": "界面更新本质上就是数据的变化。React把所有会动的东西收敛到状态(state)，使得大部分的界面任务都可以用一个姿势搞定 没错，我说的是 setState()。本文会揭示setState()的内部实现，并通过改变在改变单一DOM元素属性来一探diffing算法的实现细节。 在…"}, {"id": "6942397914782105637", "title": "useEffect进阶指南（下）", "desc": "所以useEffect的更新机制完成依靠我们传入的依赖，只要在useEffect里使用到的状态值都必须在依赖中声明，让React内部进行依赖更新。 所以，当依赖的状态变得多起来的时候，难免会让我们在性能方面有所担心。 上面的例子，我们把[]作为useEffect的依赖，就是说e…"}, {"id": "6844903603551879181", "title": "reactjs 史上最详细的解析干货", "desc": "一. State和Props     state是状态机。     应该包括：那些可能被组件的事件处理器改变并触发用户界面更新的数据，譬如需要对用户输入,服务器请求或者时间变化等作出响应。     不"}, {"id": "6844903518445240333", "title": "如何编写一个 Redux 中间件", "desc": "要想实现一个 redux 中间件我们必须了解 redux 的基本实现原理。本文将从 redux 源码入手，重点讲解 applyMiddleware 如何将中间件串联执行。只有理解了底层原理我们才可以游刃有余的写出一个 redux 中间件。 可以看见 createStore 的三…"}, {"id": "6844903694647951368", "title": "基于React+Mobx类知乎文章方面的单页应用", "desc": "项目比较杂，只挑重点的说。 登录接口有两种，一种是用react-router路由驱动，比如/login跳转至登录页，另一种是在Mobx全局创建一个可观察的login对象，如果是没有登录状态在首页点赞、收藏、回复评论等向后端请求会返回一个403状态码触发可观察login对象弹出登…"}, {"id": "6909336426693787662", "title": "react学习", "desc": "一、react类组件setStatesetState(updater,[callback])updater:更新数据FUNCTION/OBJECTcallback:更新成功后的回调FUNCTION异步"}, {"id": "6922700044650938376", "title": "React Hooks Api 基本用法（自用）文档", "desc": "useState作用：函数组件添加状态useEffect作用：给没有生命周期的组件，添加结束渲染的信号,render之后延迟执行useLayoutEffect作用：给没有生命周期的组件，添加结束渲染的"}, {"id": "6844903753263349773", "title": "react小知识(1) - 这个defaultProps可以删掉吗?", "desc": "实际业务中，由于组件render方法中，直接使用了list.map, 所以当list为undefined, 会导致程序报错。 因此，在开发第一个react版本时，对App.defaultProps进行了定义。这段代码对保障程序的可用性，有重要的意义。 搜索引擎返回的结果，对我理…"}, {"id": "6952443578719141924", "title": "react全家桶系列-react基础", "desc": "一、jsx语法规则二、创建函数式的组件（执行React.render(, document.getElementById('test') )）之后发生了什么三、创建类式组件（执行React.rende"}, {"id": "6896055585662795783", "title": "React hook奇淫技巧-模拟同步函数", "desc": "最近在项目中做多情况下的触发接口请求（按钮触发，实时触发等）的最佳代码实践整理时，发现为了处理 清空条件->重新搜索 这个情况，会增加很多代码，让可读性变得很差。那是否有什么办法能对其进行优化呢？ 这里我们可以看到在input内输入内容后点击搜索，请求的方法内的获取的searc…"}, {"id": "6844903959430168589", "title": "基于 React 和 Redux 的 API 集成解决方案", "desc": "在前端开发的过程中，我们可能会花不少的时间去集成 API、与 API 联调、或者解决 API 变动带来的问题。如果你也希望减轻这部分负担，提高团队的开发效率，那么这篇文章一定会对你有所帮助。 文章中会讲述集成 API 时遇到的一些复杂场景，并给出对应解决方案。通过自己写的小工具…"}, {"id": "6844903843105521678", "title": " [译】Redux入门教程（二）", "desc": "11. 重构reducer 12. Redux的store方法 13. 连接React和Redux 14. Redux store的方法 15. App component 和Redux store 16. List component 和 Redux state 17. Fo…"}, {"id": "6844903696875126792", "title": "React新Context API在前端状态管理的实践", "desc": "众所周知，React的单向数据流模式导致状态只能一级一级的由父组件传递到子组件，在大中型应用中较为繁琐不好管理，通常我们需要使用Redux来帮助我们进行管理，然而随着React 16.3的发布，新context api成为了新的选择。 可以看到，Redux的数据流其实非常简单，…"}, {"id": "6844903909186617357", "title": "React fiber源码理解", "desc": "前言我们知道，ReactFiber是Reactv16中新的reconciliation引擎，是React团队用时2年对StackReconciler版本的核心算法进行的重写。它的主要目标是实现虚拟DO"}, {"id": "6844903790592655368", "title": "18 Best React UI Component Libraries / Frameworks for 2019", "desc": "React is open-source JavaScript library that helps you build a top interface for both the web as well as mobile apps. It combines convenien…"}, {"id": "6844903640491098126", "title": "React Native 在 Airbnb(译文)", "desc": "在Android，iOS，Web和跨平台框架的横向对比中，React Native本身是一个相对较新且快速开发移动的平台。两年后，我们可以肯定地说React Native在很多方面都是革命性的。这是移动设备的范例转变，我们能够从中受益很多。然而也有明显的痛点，它的优点不仅仅是这…"}, {"id": "6844903534509424647", "title": "Struct@2, 优雅的，高度自定义的数据校验库", "desc": "Why社区中有很多数据校验库，各功能不一。有些库有你想要的功能，有些库又没有。有写库又喜欢定义自己的模板，然后这些模板改着改着就成了MagicString(魔符)例如这样的模板:现在是大前端时代，讲究"}, {"id": "6844903501638664205", "title": "实战react技术栈+express前后端博客项目（2）-- 前端react-xxx、路由配置", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 首先我们在项目/app/reducers下新建一个index.js，用于导出所有的reducer。 也用于将admin、front等reducer…"}, {"id": "6844903630047281165", "title": "react 按照一级路由 分包加载", "desc": "利用React Loadable 和 import，将react项目按照一级路由进行拆包（后期也能方便以二级路由进行拆包），并探究了React Loadable原理，以及import是如何异步加载js。"}, {"id": "6844904131144974344", "title": "从零搭建一个全栈项目（五）—— react重构客户端", "desc": "react重构客户端代码。 这种写法虽然可行，但是一样的东西复制了好多遍，不是一个好的代码改有的。所以将这部分改为node获取pages目录下的所有文件，然后全部添加到plugins中： 2. babel优化 3. 设置了webpack别名 我这里只设置了公共代码的别名 @co…"}, {"id": "6844903874822668302", "title": "指尖前端重构（React）技术调研分析", "desc": "React是当前前端应用最广泛的框架。三大SPA框架 Angular、React、Vue比较。 Angular出现最早，但其在原理上并没有React创新的性能优化，且自身相对来说显得笨重。 Vue出现最晚，其核心原理学习了React，只是语法形式的变化，关系上来说React是开…"}, {"id": "6844903940178313229", "title": "React Hook 实战指南！（3）", "desc": "众所周知，因为React本身只是View层的框架，对于整体业务架构来说是有缺失的，所以我们经常会在React应用中接入Flux、Redux等架构模式，当然也可以选择使用Mobx（类似Vuex）等集成工具。 就拿使用较广的Redux架构来说，在React中实现后，往往需要将sto…"}, {"id": "6844903839909281799", "title": "快速理解React的开发思想", "desc": "但是REACT个人觉得正是因为他难用，或者说，代码风格更加趋近于原生JS,尤其是ES6的面向对象的编程思想，可以一边开发，一边提升自己的原生js熟练程度，不至于过度产生框架依赖。 采用纯js开发思想，由于没有JSX编译 ， 所以 暂时使用 模版字符串 做替代。 1. 理解数据驱…"}, {"id": "6844903625592946701", "title": "前端技术周刊 2018-06-22：Webpack 生存指南", "desc": "Nodejs 发布了六月安全更新，建议开发者更新到 10.4.1 版本，包含对 HTTP/2 拒绝服务攻击、TLS 拒绝服务等的预防。🔗 五月底，欧盟的通用数据保护协议 GDPR 进入强制执行阶段，用户数据采集方式的不合规将导致欧盟追责，此举将影响各大全球化公司。对用户隐私的…"}, {"id": "6844903625832038407", "title": "Redux 知识点梳理和实践", "desc": "之前在有道云笔记上写过一篇 Redux 学习实践的文章，附带了一个小 Demo。由于一段时间没看 Redux，加上之前缺乏足够的练习，现在想重构个人博客，使用 Redux 进行状态。现在不得不回头再看看 Redux 相关东西。这里顺便记录下学习笔记，一来便于回顾，二来希望对他人…"}, {"id": "6844903538288492551", "title": "3秒钟快速搭建一个react多页应用", "desc": "本文主要阐述了如何使用dawn快速搭建一个react多页面应用"}, {"id": "6844903508689289229", "title": "Decorator 简介及实战", "desc": "用过Java的朋友都知道，装饰器（Decorator)是一种十分非常方便改变类运行是行为的一种方式，例如在 Spring 框架中我们用到比较多的注解（@Autowired), 通过它可以自动实例化对象，从而可以精简代码。装饰器是典型的 AOP(Aspect-Oriented-P…"}, {"id": "6844903623235747847", "title": "函数式编程尝试之俄罗斯方块", "desc": "Redux里的Reducer对应update，这是唯一一个能对状态进行更改的地方，而且fsharp本身默认都是immutable的，所以你也无法对状态在其他任何地方进行更改；在redux里会用immutablejs来做，但是个人使用发现挺麻烦。 Program就是把init, …"}, {"id": "6844903870213308430", "title": "React复习进阶 - 高阶组件的使用/配置装饰品模式/新版context的使用", "desc": "所谓高阶组件即使是接受一个组件作为参数,返回一个新组件的函数,用于提高组件的\"自身能力\",提高组件复用性1.普通高阶组件HOC函数将父级属性乡下传递,并追加新属性,为Dumb添加样式和newName同"}, {"id": "6844903511746936839", "title": "React.Children.forEach 源码分析", "desc": "我们在编写 React 的时候, 经常会遇到 React.Children.map(...) 这种写法. 然而 es6 中明明有对等的函数, 为什么还要有这个? 要想搞明白, 来看看源码吧"}, {"id": "6844903592323710989", "title": "React v16升级小记", "desc": "相对来说从React15.x升级到React16.2并没有太大的挑战，而在React16.3之后的版本将迎来更多变化，以及周围生态的更新，包括新生命周期函数及New Context API，每一个的变化都不可掉以轻心。"}, {"id": "6844903510937616398", "title": "大道至简之redux源码分析", "desc": "1. 背景 对于大型复杂应用程序来说，我们经常需要共享某些组件的状态或者一个组件需要改变另外一个组件的状态。 如果没有一个合适的管理工具管理状态，很快就会变成一团乱。使用 redux 的开发者越来越多，但背后 redux 原理和为什么用 redux 很多人其实并不清楚。如果我们…"}, {"id": "6844903621121802254", "title": "深入理解javascript系列(十四):纯函数", "desc": "虽然我是计算机方向毕业的学生，但是认识到纯函数，还是在学react的时候... 相同的输入总会得到相同的输出，并且不会产生副作用的函数，就是纯函数。 我们可以通过一个是否会改变原始数据的两个同样的功能的方法来区别纯函数与非纯函数之间的不同。 希望有能有这么一个函数，能够获取到引…"}, {"id": "6844903913414459400", "title": "小哥哥小姐姐看过来，这里有个组件库需要您签收一下", "desc": "1. 前言 一直以来都想做个组件库，一方面是对工作中常遇问题的总结，另一方面也确实能够提升工作效率（谁又不想造一个属于自己的轮子呢~），于是乎就有了本文的主角儿rn-components-kit。 市面上web的UI组件库如此之多，react相关的有antd，vue相关的有el…"}, {"id": "6992134116938350599", "title": "react-uni-comps 使用文档", "desc": "pc 和 h5 通用组件集合,只包含结构和行为封装，不定义任何样式. 安装 npm / yarn 安装 components TransitionElement (组件加载/show/hide tra"}, {"id": "6993695528923971620", "title": "React基础笔记（一）", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：[8月更文挑战] React基础笔记，本文作为本人学习总结之用，同时分享给大家，适合入门的react小白"}, {"id": "6844904103592591368", "title": "前端渣渣开发UI公共组件的新认识", "desc": "前段时间，组里决定做一个跨项目、跨业务的 UI 组件库，原因是我们部门的产品越来越多，且每个产品设计到多端（如 Web/Mobile/PC/Android 等）而为了快速响应目标，决定做一套统一且可视化的，拥有部门特色的 UI 组件库。 视觉已经给出了所有组件样式、交互效果，而…"}, {"id": "6863774364396060679", "title": "文件上传下载攻略，断点续传等等那些事儿", "desc": "一开始在知乎发文章，后来感觉知乎平台不太合适我，于是就来掘金啦。 前端通过input获取到用户选择的文件，放入FormData中，设置 content-type 为 multipart/form-data发送给服务端。服务端通过cookie/token/...等等信息，再对文件…"}, {"id": "6844903634036064270", "title": "React如何渲染大数据量的列表？", "desc": "我们经常会遇到这种需求，根据数据展示列表。这种代码估计你已经撸过成百上千次了。 但如果你需要同时展示成千上万条数据呢，必然会造成浏览器卡顿，丢帧，甚至卡死的问题。 本文将介绍利用react-virtualized来高效渲染大数据量列表。 以上每条数据都包含 id、用户名、图片、…"}, {"id": "6844903593443590151", "title": "React实现的超高仿豆瓣电影", "desc": "nginx 开启 gzip 后加载速度已明显提升。。。 基于 React 的超高仿豆瓣电影 PC 版，实现了 主页，电影页，人物页，排行榜，短评页，长评页，影讯&购票页，分类页，排行榜页，搜索页，404 页。 store vs. state 本项目有一个很大的（特）缺点就是所有…"}, {"id": "6911271634095570958", "title": "去哪儿网 QRN 兼容升级方案 ", "desc": "React Native 0.63 已经发布，为我们带来了一些非常令人兴奋的新功能的同时，也让人头疼的，因为升级它并不是那么容易。 尤其是遇到大版本更新，Java、iOS 和 Android 三端的配置构建文件都有非常大的变动，有时候三者的配置文件又互相耦合在一起，往往牵一发而…"}, {"id": "6885866020297244686", "title": "深入 react 技术栈（二）", "desc": "近期在工作过程中遇到了 react 状态管理的问题，后面查阅了一些文章，发现关于 useState 的原理解析比较少。所以这篇文章从讲解原理出发，到简单实现，并列出代码示例。希望能给大家带来一些帮助，今后遇到状态管理的问题都能迎刃而解。 class 组件经常会使人们难以理解，并…"}, {"id": "6844903512149606407", "title": "Miox带你走进动态路由的世界", "desc": "最近，我们团队开源了一套沉淀了2年的前端SPA架构框架，主要是用来解决动态路由的问题。我们的思路来源于后端，采用中间件的设计模式来架构整个框架。我们的原则是让大家快速开发一个SPA单页应用，只关心业务逻辑，其他的行为都可以帮助处理掉。 其实我们的开源比较匆忙，从很多方面看还是有…"}, {"id": "6844903632991682567", "title": "Taro实践 - TOPLIFE小程序 开发体验", "desc": "前阵子，来自我们凹凸实验室的遵循 React 语法规范的多端开发方案 - Taro 终于对外开源了，欢迎围观star（先打波广告）。作为第一批使用了 Taro 开发的TOPLIFE小程序的开发人员之一，自然是走了不少弯路，躺了不少坑，也帮忙找过不少bug。现在项目总算是上线了，…"}, {"id": "6844903538280103950", "title": "Mobx React  最佳实践", "desc": "在这一篇文章里，将展示一些使用了mobx的React的最佳实践方式，并按照一条一条的规则来展示。在你遇到问题的时候，可以依照着这些规则来解决。 这篇文章要求你对于mobx的stores有基本的理解，如果没有的话请先阅读官方文档。 永远记住，你的stores代表着你的UI状态，这…"}, {"id": "6844904106616684557", "title": "精读《React Router v6》", "desc": "React Router v6 alpha 版本发布了，本周通过 A Sneak Peek at React Router v6 这篇文章分析一下带来的改变。 一个不痛不痒的改动，使 API 命名更加规范。 而在 v6 版本中，render 与 component 方案合并成了…"}, {"id": "6903805279483297805", "title": "React 合成事件和 DOM 原生事件混用", "desc": "昨天面试被问到一个元素同时绑定 React 合成事件和 DOM 原生事件的问题。首先来说，我在项目中真的没遇到过这样的场景，我也没想到要用的那些场景中。 先来说说 React 合成事件是怎么回事。 React 的事件系统沿袭了事件委托的思想。在 React 中，除了少数特殊的不…"}, {"id": "6883087269004050440", "title": "比较 NW.js 和 Electron", "desc": "如果你希望基于 Web 技术创建一个本地桌面应用，再开源社区中有两个选择：NW.js（原 node-webkit）和 Electron（原 atom-shell）。这两者如何选择并不显而易见。这就是我创建本文对两者进行细致比较的原因。希望这对你选择合适的工具构建你的新应用有帮助…"}, {"id": "6844903921480105991", "title": "[译] 如何使用 React hooks 获取 api 接口数据", "desc": "在本教程中，我想向你展示如何使用 state 和 effect 钩子在React中获取数据。 你还将实现自定义的 hooks 来获取数据，可以在应用程序的任何位置重用，也可以作为独立节点包在npm上发布。 如果你对 React 的新功能一无所知，可以查看 React hooks…"}, {"id": "6844904084323958798", "title": "深入react的setState机制", "desc": "关于react的setState机制，我相信有两个术语是人尽皆知的，那就是“批量更新”和“异步执行”。其实这两个术语都是在描述同一件事。为什么这么说呢？因为深入过源码的人就知道，“批量更新”是因，“异步执行”是果。世人都喜欢看表象和结果，所以一般情况下，我就用“异步执行”或者“…"}, {"id": "6844903959241424910", "title": "如何理解服务端渲染？", "desc": "为了更好的理解服务端渲染，我们可以将服务端渲染与客户端渲染对比着来看。 前端做视图和交互，后端只提供接口数据，前端通过ajax向服务端请求数据，获取到数据后通过js生成DOM插入HTML页面，最终渲染给用户。页面代码在浏览器源代码中看不到。 做到了前后端分离，在团队开发中只要负…"}, {"id": "6869220236886245383", "title": "搭建 umi + qiankun + antd 的微前端平台", "desc": "银行项目，需要一个前端中台，承载各项目组开发的应用，本篇文章是在工作实践后所写，还是具有一定可借鉴性的，至于官网已经有相关内容还专门写这么一篇，还是因为在实践中官网中的部分不完善，导致搭建过程异常坎坷。 现在还差个指向子应用的路由。 担心大家不会，此处还提供一个在已经配置好了的…"}, {"id": "6989227681933967397", "title": "React 源码阅读 - Fiber", "desc": "上一篇文章我们给出了一个例子，但是只说了 React.createElement, 留下了 ReactDOM.render。ReactDOM.render 内含的操作就非常多了，所以必须进行拆解。 我"}, {"id": "6844904142326988808", "title": "React Hook之useState、useEffect和useContext", "desc": "一周的砖又快搬完了，又到了开心快乐的总结时间~这两周一直在 hook 函数的“坑”里，久久不能自拔。应该也不能叫做“坑”吧，还是自己太菜了，看文档不仔细，很多以为不重要，但在实际应用中却很关键的点总是被自己忽略。所以我准备多花点时间，把官网的一些 hook 函数，再回过头看一遍…"}, {"id": "6844904035523231752", "title": "react-grid-layout 栅格布局", "desc": "React-Grid-Layout 是只提供给 React 组件并且不需要使用 JQuery 的栅格布局系统，类似的像：Packery 和 Gridster，但 RGL 是响应式的，并且支持 breakpoints 断点，用户可以自定义设置断点，也可以由 RGL 自动生成。来自…"}, {"id": "6844904178582552583", "title": "基于create-react-app快速搭建react项目", "desc": "​ 项目搭建是基于create-react-app脚手架的，以前开发过程中，也曾自己搭建过一些脚手架，由于水平有限，对于webpack实在玩不熟，最后考虑到效率和普及性，决定还是使用官方脚手架，再做一些适应性调整。好了，话多说，首先本地安装node之后(可以安装一下yarn)命…"}, {"id": "6844903818073899022", "title": "一次react-router + react-transition-group实现转场动画的探索", "desc": "1. Introduction 在日常开发中，页面切换时的转场动画是比较基础的一个场景。在react项目当中，我们一般都会选用react-router来管理路由，但是react-router却并没有提供相应的转场动画功能，而是非常生硬的直接替换掉组件。一定程度上来说，体验并不是…"}, {"id": "6844903702466134029", "title": "关于前端组件化、状态管理规范化的思考", "desc": "说起前端组件化是这几年老生常谈的话题，笔者就不在这里对前端组件化思想的发展史、优劣做详细的介绍。今天主要与大家分享一下，笔者在开发中从初期的小项目，到后期的项目功能迭代，功能模块越来越多，项目越来越大，组件化规范制定不够完善，多人团队协作开发导致的一些问题，与笔主自己处理的方案…"}, {"id": "6952807928231362597", "title": "组件库文档工具 dumi 的介绍与对比及踩坑小结", "desc": "一、概述 上周将团队内的组件文档从 docz 迁移到dumi，迁移成本大概一到两天，在此给大家做个 dumi 的简单介绍。 二、组件库文档工具 本节会先对比市面上用得多的以下三个组件库文档库，以说明迁"}, {"id": "6844903841876410375", "title": "搭建 react + typescript + ant design 开发环境", "desc": "9102 年了，前端工程化发展在 nodejs 的基础上已经发展的非常完善了，各种前端构建辅助工具层出不穷。ES6 编译器 babel，css 辅助工具 postcss / sass / less，代码风格检测工具 eslint / prettier / stylelint，g…"}, {"id": "6844903841217904648", "title": "react-router中的exact和strict", "desc": "每次用配置react路由都会考虑是否应该给给<Route>组件加上exact或strict。下面妹子将于自认为比较清晰的方式列举出来什么场景需要加和不加。 exact默认为false，如果为true时，需要和路由相同时才能匹配，但是如果有斜杠也是可以匹配上的。 而strict是…"}, {"id": "6844903649643069454", "title": "React 的 PureComponent Vs Component", "desc": "IndexPage has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please …"}, {"id": "6925631006460346376", "title": "HTML5拖放详解", "desc": "1. 拖放的基本概念 拖（drag）放（drop）是 HTML5 标准的组成部分，拖放是一种常见的特性，即抓取对象以后拖到另一个位置，任何元素都可以被拖放。 2. 拖放的几个事件 需求说明：如上图，这是一个常见的三栏布局，要求图中箭头部分可上下、左右拖动，使得三个box可以根据…"}, {"id": "6882262783224709128", "title": "从react hooks state不更新问题中,重新认识闭包", "desc": "前段时间在项目的函数组件中使用了hook的useEffect, 类似于下面这个App函数组件。 useEffect内部闭包中的这个定时器打印的count始终是1，即使onClick事件触发了很多次。我就很好奇了，为啥count拿不到最新值？经过不断的google，终于找到一篇文…"}, {"id": "6925665796106485767", "title": "React Fiber为什么使用链表来设计组件树", "desc": "Fiber架构主要有两个阶段, reconciliation(协调)和commit(提交)。协调阶段通常称为渲染阶段。此时会发生： 这些被称为Fiber的内部活动。 如果React同步遍历整个组件树，一次的更新操作过多，执行的时间可能会超过16ms以上, 会导致视觉上的卡顿。 …"}, {"id": "6844903854769700871", "title": "React+Typescript 实现一个简单的豆瓣电影应用", "desc": "这里还有 electron 版本 douban-movie-electron，目前还在施工中👷..."}, {"id": "6844903600989143054", "title": "[译] 如何写出更好的 React 代码？", "desc": "写出更好的 React 代码的 9 条实用提示：了解代码检查、propTypes、PureComponent 等。 使用 React 可以轻松创建交互式界面。为应用中的每个状态设计简单的视图，当数据变化时，React 会高效地更新和渲染正确的组件。 这篇文章中，我会介绍一些使你…"}, {"id": "6882185415426293774", "title": "用Hooks的方式打开React-Redux", "desc": "在 React 全面转型 Hooks 的时候，会发现 react hooks 也能简单实现 flux 数据流的逻辑，让人不禁有些激动，然后又去看了下React-Redux的官方文档，原来这事情去年就已经被包办了，React-Redux 早已全面拥抱了 Hooks ，今天就来炒一…"}, {"id": "6844903726046511112", "title": "你可能需要的一本前端小册：Vue 项目构建与开发入门", "desc": "最近抽时间写了一本关于 Vue 的小册：《Vue 项目构建与开发入门》，前前后后断断续续花了大概两个月的时间。作为 Vue 的第一批用户，同时也作为一名专栏作者，虽然我之前写过好几篇关于 Vue 的文章，但是该小册是我第一本系统性介绍 Vue 项目构建与开发相关知识的书籍，也是…"}, {"id": "6893680913742462989", "title": "如果没有virtual dom，react会怎样？", "desc": "在2016年，如果react火起来的时候，没有virtualdom，会怎样？你还会选择使用react吗？这是一个历史假设问题。但今天来看，这个问题却非常有趣，因为，在经历对react的狂热追捧之后，我"}, {"id": "6844904104133656584", "title": "4个问题带你进阶React Hooks", "desc": "相信大部分人都已经在使用 React hooks 了，但是在开发过程中，我们要 知其然知其所以然。整理了一下最近使用 React hooks 遇到的一些问题，并附上详细答案，如果想要更加深入了解，推荐阅读文章中推荐的一些文章。 1. 组件复用逻辑难 没有hooks之前使用 re…"}, {"id": "6865490815846875150", "title": "rc-redux-model 让你使用redux更简单", "desc": "相信大家都了解 redux，并且也认同这种数据流的方式（毕竟不认同，你也不会用嘛~），然，世间万物，皆有利弊。 本身我使用 redux 并不会有什么所谓的“痛点”，因为 redux 默认只支持同步操作，让使用者自行选择处理异步，对于异步请求 redux 是无能为力的。可以这么说…"}, {"id": "6994311172375707661", "title": "ant design 的树形控件异步数据加载方法", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 在我们在使用ant design 的ui库的时候，会有用到树形控件的需求，因此需要加载相应的树形数据，下面讲述一下异步数据加载的方式方法。 "}, {"id": "6844904147309821966", "title": "React.js和Vue.js的语法并列比较", "desc": "React.js和Vue.js都是很好的框架。而且Next.js和Nuxt.js甚至将它们带入了一个新的高度，这有助于我们以更少的配置和更好的可维护性来创建应用程序。但是，如果你必须经常在框架之间切换，在深入探讨另一个框架之后，你可能会轻易忘记另一个框架中的语法。在本文中，我总…"}, {"id": "6944877951838060580", "title": "前端开发者周刊(山月周刊)第 5 期：如何高效组织 npm script", "desc": "前端爱好者周刊 (Github: shfshanyue/weekly)，每周记录关于前端的开源工具、优秀文章、重大库版本发布记录等等。每周一发布，订阅平台如下，欢迎订阅。 code . 可以使用 VS Code 快速打开当前目录 苏伊士运河货船搁浅，每天损失四亿美元。埃及有关部…"}, {"id": "6844903762750898184", "title": "TaroEcharts-各种图表在Taro中的实践", "desc": "随着React的快速发展，我们也越来越接受它的写法和思想，如今小程序如火中天，普通的编译模式早已不适应开发者的需求。人们在不断的寻求一种React能够在小程序中编译的语言框架，因此Taro便诞生了。宇宙中最强的执行官。它支持使用 React 的开发方式来编写可以同时在微信小程序…"}, {"id": "6844903956464795655", "title": "React学习(9)-React中发送Ajax请求以及Mock数据", "desc": "前言在React中,render函数返回的结果,取决于组件的props和state我们都知道UI页面上的数据不是写死的,往往是从后端的数据接口中拿到然后将真实的数据填充到页面上那么应该在哪个生命周期函"}, {"id": "6937156414590681124", "title": "前端开发者周刊第二期：ESM 深入图解", "desc": "前端爱好者周刊 (Github: shfshanyue/weekly)，每周记录关于前端的开源工具、优秀文章、重大库版本发布记录等等。每周一发布，订阅平台如下，欢迎订阅。 国家航天局发布由我国首次火星探测任务天问一号探测器拍摄的高清火星影像图，总共有两张黑白图像与一张彩色图像。…"}, {"id": "6844903929671598087", "title": "新手学习 react 迷惑的点(一)", "desc": "网上各种言论说 React 上手比 Vue 难，可能难就难不能深刻理解 JSX，或者对 ES6 的一些特性理解得不够深刻，导致觉得有些点难以理解，然后说 React 比较难上手，还反人类啥的，所以我打算写两篇文章来讲新手学习 React 的时候容易迷惑的点写出来，如果你还以其他…"}, {"id": "6844903600368386061", "title": "高效阅读Github源代码", "desc": "三种办法。如果你主要看前端项目的代码，直接看第三种。1，用Chrome插件Octotree，左侧会出现树形结构，方便你浏览源代码。地址：https://chrome.google.com/websto"}, {"id": "6850418111326846983", "title": "Rollup打包React组件库并发布到npm私服", "desc": "背景公司的前端组件库经过前端好几位大佬搞了个基于React、Antdesign二次扩展的库，之前设想是每个业务模块基于公共的组件库维护各自的业务组件库，经过几个周期之后，发现已经不可控了，每个业务模块"}, {"id": "6844904153257508878", "title": "彻底搞懂React源码调度原理（Concurrent模式）", "desc": "自上一篇写关于diff的文章到现在已经过了二十天多，利用业余时间和10天婚假的闲暇，终于搞懂了React源码中的调度原理。当费劲一番周折终于调试到将更新与调度任务连接在一起的核心逻辑那一刻，忧愁的嘴角终于露出欣慰的微笑。 最早之前，React还没有用fiber重写，那个时候对R…"}, {"id": "6844903512669700109", "title": "为什么源码分析味同嚼蜡？浅析技术写作中的思维误区", "desc": "优秀的技术社区每天都会生产出不少干货内容，《XX 框架源码分析》就是其中的一类。然而，这类文章往往叫好不叫座，人气常常不如《手把手教你 XX》。真的是我们太浮躁了吗？本文希望用另一种角度看待这个问题。 中国的大学课堂以照本宣科而著称，而各个学校自己编写的大学教材也是出了名的枯燥…"}, {"id": "6980165069447364615", "title": "React➕TypeScript", "desc": "引入React 这种引入方式被认为是最可靠的一种方式，推荐使用 另一种引入方式： 需要添加额外的配置：\"allowSyntheticDefaultImports\": true, tsconfig.js"}, {"id": "6931165175911776269", "title": "同步的 ReactDOM.render，异步的 ReactDOM.createRoot", "desc": "这三种模式中，我们经常使用的是legacy模式，这种模式在渲染是触发的是同步的渲染链路。blocking模式是legacy模式到concurrent模式的一个过渡，之所以会有这个模式是因为，React团队希望提供渐进的迁移模式，而不是断崖式的切换模式。concurrent模式是…"}, {"id": "6943566842132693028", "title": "React Router 的原理是什么？", "desc": "以下又是一篇学习笔记。 history 是一个第三方库，用来兼容在不同浏览器、不同环境下对历史记录的管理，封装了浏览器内置的 History API 和 Location API。 特点：适用高版本浏览器。 技术：利用HTML5里面的history。 前进：使用 pushSta…"}, {"id": "6984806952488402958", "title": "React - 基础知识点", "desc": "1. this 上面的例子中，onSubmit后跟的是箭头函数，this本来就指向 SingleSelectComponent 组件的实例，所以不需要修改 this，而onChange后边跟的是 th"}, {"id": "6844903843436691463", "title": "基于react-grid-layout实现可视化拖拽", "desc": "做前端的小伙伴们可能会经常遇到做一个自定义dashboard这样的需求。 那么什么是自定义dashboard呢？自定义dashboard其实就是一个自定义面板，用户能够在面板上自由的拖拽，新增，删除组件。组件可以是各种echarts图形，也可是各种数据表格。通过各个组件的拖拽组…"}, {"id": "6844903645339713549", "title": "在react中使用svg的各种骚姿势", "desc": "兼容性也不是什么大问题. 当然, 如果你的网站还是需要兼容这些旧式的浏览器, 社区上也有对应的方案, 比如张鑫旭的一些SVG向下兼容优雅降级技术 如果每个svg要前端画, 对前端要求较高. 直接把代码复制到项目css中, 定制你的标签样式, 参考阿里官方的文章, 使用起来简单粗…"}, {"id": "6997376632960843806", "title": "手写简易版react-redux connect函数", "desc": "手写react-redux的connect函数，redux，react-redux，connect，mapStateToProps，mapDispachToProp"}, {"id": "6869230316620349447", "title": "Function组件(Hooks)  vs  Class组件", "desc": "简单来说，就是能够通过function组件+hooks来完成class组件的工作。所以我们不免要拿class和hooks进行对比。 class组件实例化一次，使用到的props/state都是通过this去获取，而this是可变的(mutable),所以在生命周期中所拿到的都是…"}, {"id": "6844904015524790279", "title": "浅谈 setState 更新机制", "desc": "了解 React 同学想必对setState函数是再熟悉不过了，setState也会经常作为面试题，考察前端求职者对 React 的熟悉程度。 在此我也抛一个问题，阅读文章前读者可以先想一下这个问题的答案。 针对上述问题，先进行一个简单的复现验证。 实际验证结果如下所示，每次点…"}, {"id": "6909387010185232398", "title": "如何在React应用中实现“使用GitHub登录”", "desc": "我遇到一个场景，该场景需要在React 应用中实现“使用Github登录”功能。虽然这听起来很简单，但在尝试做这件事时，你可能会遇到一些麻烦。因此，本文的目的是提供一个指南，帮助你在你的应用程序中实现这样的功能。让我们现在就开始吧！ 按照此处提供的步骤登录到你的Github帐户…"}, {"id": "6844903695063187470", "title": "个人博客2.0 FE", "desc": "这是我写的第二个博客网站。第一版是在今年(2018年)3月份完成的，用的Bootstrap + Django. 待第二版数据迁移完毕后，第一版会开源。 至于为什么写第二版，是因为还有很多自己想表达的东西没有在第一版呈现。 2.0版本是一个基于React + Node的前后端分离…"}, {"id": "6891848244972748807", "title": "React Concurrent Mode三连：是什么/为什么/怎么做", "desc": "最近发布的React v17.0没有包含新特性。 究其原因，v17.0主要的工作在于源码内部对Concurrent Mode的支持。所以v17版本也被称为“垫脚石”版本。 本文会详细介绍Concurrent Mode的来龙去脉，以及这套体系从底层架构到上层API的实现。 由于跨…"}, {"id": "6993604339273039879", "title": "ant design 的table组件实现全选功能", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 开发需求：点击按钮对列表数据进行全选和反选的功能。 使用react框架开发前端项目的时候，使用的是ant design的前端ui组件库， 使"}, {"id": "6844904157892050957", "title": "React Hooks 系列之4 useReducer", "desc": "掌握 React Hooks api 将更好的帮助你在工作中使用，对 React 的掌握更上一层楼。本系列将使用大量实例代码和效果展示，非常易于初学者和复习使用。 截止目前我们已经学习了3个hook api，useState, useEffect, useContext。接下来…"}, {"id": "6844903938408333320", "title": "🎉  React Suite 4.0 版本发布", "desc": "开学了，又是一个新的起点。伴着丝丝凉爽的秋风，React Suite 迎来了 4.0 版本的发布。从 2019 年 3 月份开始设计 V4 版本，经历了 6 个多月的开发与测试，讨论与争执，终于完成了所有的计划。 春种一粒粟，秋收万颗子，在这个收获的季节，我们为大家准备了一系列…"}, {"id": "6844903517488939021", "title": "我为什么从Redux迁移到了Mobx", "desc": "Redux是一个数据管理层，被广泛用于管理复杂应用的数据。但是实际使用中，Redux的表现差强人意，\b可以说是不好用。而同时，社区也出现了一些数据管理的方案，Mobx就是其中之一。 这是Redux给自己的定位，但是\b这其中存在很多问题。 首先，Redux做了什么？看Redux的…"}, {"id": "7004402189254787079", "title": "setState为什么有同步异步两种情况？从原理解释。", "desc": "原理一句话简述：收集state，延迟更新应用。 在无法接管函数时，每次setState都会更新应用。 ​ 可以理解为，react能掌控的，则是\"异步\"(延迟更新)，无法掌控，则是同步更新。"}, {"id": "6992897895900905503", "title": "解析常用的React Hook", "desc": "为什么有了Hook？ 组件之间的复用状态逻辑 React 是构建用户界面的 JavaScript 库"}, {"id": "6914167815469531143", "title": "基于React全家桶开发「网易云音乐PC」项目实战(三)", "desc": "随机播放 ... 顺序播放 ... 非常感谢王红元老师的React核心技术实战让我学习到很多 React 的知识。"}, {"id": "6844903812595974157", "title": "React: 内存泄露常见问题解决方案", "desc": "本篇文章首先回顾一下什么是内存泄露，然后看两个 demo 观察 react 出现内存泄露的具体情况。 程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。 对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越…"}, {"id": "6844904184597184519", "title": "从零开始创建一个React(Umi+AntD)项目", "desc": "整合常用组件、插件的前端应用框架。开箱即用，有封装好的布局可以直接应用。 丰富的组件库。 输出版本信息表示 NodeJS 安装成功。 会在文件夹中生成 package.json 等文件，Umi 项目的依赖、启动命令等都已配置完成。 Umi UI 支持在网页上为应用添加现成的模版…"}, {"id": "6943180792948326430", "title": "React 面试必知必会 Day4", "desc": "1. createElement 和 cloneElement 的区别是什么？ JSX 元素将被转换为 React.createElement() 函数以创建 React 元素，这些元素将用于 UI 的对象表示。而 cloneElement 用于克隆元素并将新的 props 传…"}, {"id": "6869572872122810381", "title": "Monaco Editor VS CodeMirror", "desc": "CodeMirror 是一款非常老牌的Web编辑器，目前已经发展到 v6 版本，不过 v6 仍处于测试阶段，今天笔者以5.57.0版本进行介绍。Monaco Editor 相较就年轻得多了，尽管如此而它的名气却一点都不小；只因它与VSCode 使用的同一款核心代码。接下来笔者将…"}, {"id": "6844903953168072717", "title": "基于React的简单权限设计", "desc": "前端进行权限控制只是为了用户体验，对应的角色渲染对应的视图，真正的安全保障在后端。 用户若记住了某个 url，直接浏览器输入，不论该用户是否拥有访问该页面的权限，均能进入页面。 若页面初始化时（componentDidMount）进行接口请求，后端会返回 403 的 HTTP …"}, {"id": "6895655198975819784", "title": "React hooks 和 Antd Form ", "desc": "在一个 Function 组件中，使用 Ant Design 的组件 Form，实现搜索关键字的功能。主要代码如下： 每一次输入框的内容改变，getData 就会被调用，于是频繁发送请求。正常是希望输入完成之后，点击“搜索”按钮或者输入回车再发送搜索请求。getData 中使用…"}, {"id": "6927619414095298573", "title": "细烤 useEffect", "desc": "前段时间烧烤哥一直深陷业务的泥潭不能自拔，终于在过年之前忙完，有时间写写文章总结一下知识了。看了一下，距离上一篇文章已经一个季度了，真的就是季刊了😂。烧烤哥后面会好好写文章的，尽量伪装自己成高产博主。 还记得在之前的《烤透 React Hook》一文中，我们曾深入探究过 Re…"}, {"id": "6844904037280661518", "title": "来自《React Hooks 与 Immutable》小册作者'神三元'的灵魂拷问", "desc": "然后我看了评价感觉好像挺不错的，就买了(反正也不贵)，加群了以后感觉作者很用心，不过最近项目一直在用Vue做PC端，就没怎么看这个小册，寻思忙完这段时间，过年的时候看。 心血来潮的我决定是时候要给大家好好科普一下了，这么好用的东西应该尽快让大家都上手啊，不然作者心灰意冷了不继续…"}, {"id": "6950692243485229086", "title": "React源码解析之 Fiber结构的创建", "desc": "当前React版本基于V17.0.2版本，本篇主要介绍fiberRoot结构的创建。通过debugger源码，划出fiberRootNode结构图。"}, {"id": "6989578263525851143", "title": "vscode配置react样式模块化开发代码提示", "desc": "一、配置css模块化的代码提示 1、关于css模块化开发可以参考文档，参考文档，这样写代码没样式名的提示也不是很友好的，以下配置可以提示类名的方式 2、安装依赖包 、在tsconfig.json中配置"}, {"id": "6959834563895902245", "title": "react 权限控制方案实践", "desc": "react 权限控制方案实践 权限控制是项目中，特别是后台管理项目中比较常见的功能了 结合实际的项目需求，讲讲在react中是如何实现权限控制的 背景 项目使用umi搭建 需求： 根据不同角色权限配置"}, {"id": "6844903583138201613", "title": "React高阶组件", "desc": "如果你需要注入多个mixins,其中一个是自己的，另外的可能是第三方的。那有可能在两个mixins里使用了相同名称的方法，这会使得其中的一个不起作用，而你能做的只有修改其中一个方法的名称。另一方面，一个mixins一开始可能是非常简单的，仅仅需要实现某一个功能，但当业务越加的复…"}, {"id": "6955450783798312997", "title": "React基本使用方法", "desc": "React元素的基本创建方法：创建了一个ele的ReactDom（虚拟dom），并调用ReactDom.Render()函数渲染页面。"}, {"id": "6844904065004994574", "title": "React-开发中解决公共代码方案", "desc": "公共代码解决方案今天主要谈一下，react组件开发中对于多个组件中使用同一代码段的解决方案，即公共代码的提取方案主要组件学生组件学生列表组件模拟数据模块方案一：自定义Hook组件结构方案二：高阶组件组"}, {"id": "6844903626184507405", "title": "状态管理库 MobX 和 react", "desc": "MobX 是一个独立的组件，可以配合各种框架使用，由于项目中需要使用 react & MobX。下面来详细了解一下 State 是每一个应用程序的核心部分，而使用一个不合规范的 State 则是让你的应用充满 bug 和失控的不二法门，或者就是局部变量环绕，让你的 state …"}, {"id": "6985041084640395278", "title": "React之路-事件处理", "desc": "react的事件处理 事件命名采用小驼峰命名 handleGetdata,而在使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串 阻止默认事件使用preventDefault(e"}, {"id": "6844903613534306318", "title": "精读《Typescript2.0 - 2.9》", "desc": "2.0-2.8，2.9 草案. 我发现，许多写了一年以上 Typescript 开发者，对 Typescript 对理解和使用水平都停留在入门阶段。造成这个现象的原因是，Typescript 知识的积累需要 刻意练习，使用 Typescript 的时间与对它的了解程度几乎没有关…"}, {"id": "6844903497192865800", "title": "重构与模式（二）——发布订阅模式与中介者模式实际使用", "desc": "实际开发过程中我们遇到过的先发布后订阅的场景为：我们有一个展示用户信息的头部导航模块，这个模块依赖于获取用户信息的模块来显示用户头像，但是获取用户信息是异步的，在头部信息trigger之后，我们的头部模块才加载完并listen（我们的模块用了惰性加载）。 为了满足这个需求，我们…"}, {"id": "6844903508731248654", "title": "🌅 使用 Dawn 快速搭建 React 项目！", "desc": "开发一个 React 项目，通常避免不了要去配置 Webpack 和 babel 之类，以支持 commonjs 或 es 模块及各种 es 新语法，及进行 jsx 语法的转义。当然也可以用 create-react-appp 脚手架快速创建一个 react 项目，但与此同时 …"}, {"id": "6968099797618294821", "title": "React Hooks 事件绑定排坑指南", "desc": "以事件防抖为例，列举 React Hooks 在事件绑定中存在的几个常见的坑，并给出简单的解决方案，有遇到相同问题的同学可以参考一下"}, {"id": "6844904077638238216", "title": "理解 React Fiber & Concurrent Mode", "desc": "今天我们主要来讲下，React concurrent mode 是如何解决第一个问题的，第二个问题会在后面的代码实战文章再仔细讲下。 题。 这个问题的本质是，浏览器的 main thread 是单线程的，短时间大量 CPU consuming 的 task 被加到了 call …"}, {"id": "6844904147100123144", "title": "Redux的createStore实现", "desc": "使用过react的同学应该对Redux这个东西有所了解。他是一种「全局状态管理」的思想(对, 这里我觉得它是一种思想, 因为对于React来说, 其实Redux内部并没有什么需要与React兼容的东西, react-redux 库里才有), 它信奉的是: 这其实对我们是一种约束…"}, {"id": "6844903709906829326", "title": "摆脱redux繁琐操作，搭建mobx框架", "desc": "React 和 MobX 是一对强力组合。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而MobX提供机制来存储和更新应用状态供 React 使用。官网传送 一个经常被问到的问题就是，如何不使用单例来组合多个 stores 。它们之间如何通信呢？ 答案就是…"}, {"id": "6844903496643264526", "title": "如何管理一个前端基础架构团队 - AdRoll", "desc": "在过去的几年中，AdRoll已经从的一个不起眼的产品功能单一的创业公司发展成为拥有一套多样化产品的全球营销平台（https://www.adroll.com/product）。 随着公司的发展，我们做了大量的工作，以为用户界面开发搭建坚实的基础。在这篇文章中，我们讨论在多个开发团"}, {"id": "6844903935312920583", "title": "[React服务端渲染系列]原理篇", "desc": "客户端渲染与服务端渲染的主要区别为：CSR的页面渲染是JS负责执行的，而SSR则是服务端直接返回HTML进行渲染的，如JSP。 如我们直接通过Webpack打包构建之后生成的页面结构如图所示，整个页面初始的时候只有一个react-body的主容器，并没有输出完整的HTML。页面…"}, {"id": "6844903566868496391", "title": "webpack工程化集成React技术栈（一）", "desc": "项目开始前，我们先聊一聊关于项目的一些说明。该项目起始于2017年初，当时公司主要技术栈为gulp+angular，鉴于react的火热的生态，在公司决定研发bss管理系统时选用react开发，目的也是为react native打下基础，以解决后期公司大前端技术栈的逐步成熟。（…"}, {"id": "6844903990136668174", "title": "其实你会发现redux并没那么难！", "desc": "是一个数据仓库，一个应用中store是唯一的，它里面封装了state状态，当用户想访问state的时候，只能通过store.getState来取得state对象。 action描述了一个更新state的动作，它是一个对象，其中type属性是必须有的，reducer会根据type…"}, {"id": "6844903925234008077", "title": "React源码解析-组件的初始化与挂载（一）", "desc": "React 是笔者的主要技术栈之一，难免想探索一下内部的一些机制实现，笔者会从组件的初始化与挂载、任务调度、组件类型和生命周期、事务、事件、hook等方向进行学习解析（基于 16.8.6 版本），也是第一次进行源码解析的写作，如有欠妥之处，欢迎朋友们不吝指正和讨论，共同学习进步…"}, {"id": "6844903638578495496", "title": "React 的 HOC 以及的 Render Props", "desc": "重复是不可能的，这辈子都不可能写重复的代码 当然，这句话分分钟都要被产品打脸，天天喊着改需求，老哥，这里改下可好？ 所以，我们需要抽象，封装重复的功能或者逻辑，这样改需求，也不用到处改 React 高级组件有两种方式: 使用高阶组件( Higher Order Componen…"}, {"id": "6844904079596978183", "title": "renderProps使用", "desc": "即使用了render这个prop的组件，接受一个函数来渲染元素，即父组件控制这部分的显示内容，而不是组件内部去实现自己的渲染逻辑。而父组件渲染的元素使用的数据是子组件内部控制的状态。 data即为SearchList组件内部的state。 你可能会想到把列表放到父组件去维护，渲…"}, {"id": "6844903586372009997", "title": "Mvvm 前端数据流框架精讲", "desc": "本次分享是带大家了解什么是 mvvm，mvvm 的原理，以及近几年产生了哪些演变。 同时借 mvvm 这个话题拓展到对各类前端数据流方案的思考，形成对前端数据流整体认知，帮助大家在团队中更好的做技术选型。 Mvvm 是指双向数据流，即 View-Model 之间的双向通信，由 …"}, {"id": "6885512165696995335", "title": "React专题-chapter2", "desc": "Note1：当我们要改变组件数据的时候，不能直接用this.state = xxx这种方式来修改，如果这样做react.js就没法知道你修改了组件的状态，他也就没法更新页面。所以，一定要使用React.js提供的setState方法，它接受一个对象或者函数作为参数。 Note3…"}, {"id": "6844903615220416519", "title": "手把手教你React Native实战从 React到Rn《二》", "desc": "了解相关更多技术，可参考《学习React Native必看的几个开源项目》，接下来 我们来聊一聊相关的React。 Rn是基于React的设计，了解 React有助于我们开发RN应用，React希望将功能分解华，让开发变得像搭积木一样，快速而且具有可维护性。 很多时候，前端有一…"}, {"id": "6844903849078030349", "title": "React HOC（高阶组件）", "desc": "我们写的纯函数组件只负责处理展示，很多时候会发现，由于业务需求，组件需要被“增强”，例如响应浏览器事件等。如果只有一两个组件我们大可以全部重写为class形式，但如果有许多组件需要进行相似或相同的处理（例如都响应浏览器窗口改变这个事件）时，考虑到代码的复用性，很容易想到用函数处…"}, {"id": "6935718543212150815", "title": "如何实现一个mini版的React（一）", "desc": "2、然后就要开始写代码了，首先分析下。实现一个迷你版的react需要哪些步骤 1).React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。 接下来。index.js里面引入刚刚写的 React 和 r…"}, {"id": "6844903925544386573", "title": "十分钟，带你了解React 16.8的useState和useEffect", "desc": "Hooks是==React 16.8==新增的特性，并且他是向后兼容的，facebook也坦言没有计划会在React中移除class组件。你完全可以不使用hooks，一直使用class组件。 React hooks允许你在非class组件中使用state和React其他的特性：…"}, {"id": "6844903906867167246", "title": "React调度器原理解析", "desc": "在React16的新版本，使用了Fiber重新实现了React的核心算法，带来了杀手锏增量更新功能。它有能力将整个更新任务拆分为一个个小的任务，并且能控制这些任务的执行。 这篇文章主要对调度器原理进行解析。 大家都知道 JS 和渲染引擎是一个互斥关系。如果 JS 在执行代码，那…"}, {"id": "6844904047296643085", "title": "React源码解析之updateClassComponent（下）", "desc": "在上篇 React源码解析之updateClassComponent（上） 中，我们讨论了更新ClassComponent的第一种情况— —「类实例（class instance）未被创建」的情况。 (5) 执行checkShouldComponentUpdate()，检查是否…"}, {"id": "6844903843877109774", "title": "我们或许不需要 Redux 这个库", "desc": "《我们或许不需要...》系列如果是做轮子就没有意义了, 此系列目的是通过简单的代码, 对原有库的设计思路进行概括提取, 最终从理解其理念到更高效的开发项目的过程. 将 state 和 disptch 对象转换为 props 注入至组件中, 而不是由组件去引用外部的对象, 这样组…"}, {"id": "6844903768056659976", "title": "React事务的一些理解", "desc": "学习React有一段时间了，刚接触不久对于React神奇的操作很好奇，迫不及待看了源码看过几遍源码总是一知半解，最近有时间再次学习React的相关知识，比如setState, componentDidMount等，意识到了之前被忽略提及的知识点，那就是React内部的事务，个人…"}, {"id": "6844903734724526093", "title": " React+webpack+es6的环境配置及demo改写", "desc": "最近在家闲得无聊，所以打算折腾一下react。在此之前，我是一个vue的重度使用用户，但是看到react确实非常火爆，所以也就趁此机会去了解一下react，增长一下见识。 学习react的参考资料，很大一部分来自 @阮一峰 的React入门实例教程。但是阮大神是用传统的scri…"}, {"id": "6844903693314162701", "title": "高阶组件 + New Context API = ?", "desc": "1. 前言 继上次小试牛刀尝到高价组件的甜头之后，现已深陷其中无法自拔。。。那么这次又会带来什么呢？今天，我们就来看看【高阶组件】和【New Context API】能擦出什么火花！ 2. New Context API Context API其实早就存在，大名鼎鼎的react…"}, {"id": "6844903773760913421", "title": "记一次preact迁移到react16.6.7的经历", "desc": "0. 前言 preact作为备胎，但是具有体积小，diff算法优化过的特点，简单活动页用上它是不错的选择。但是考虑到react令人兴奋的新特性，preact并没有按时更新去完全支持它，更严重的是一些babel插件、一些库配合preact会有问题。所以，还是不得不迁移了。 1. …"}, {"id": "6844903655447986189", "title": "Redux 基础 - react 全家桶学习笔记（一）", "desc": "注：这篇是16年10月的文章，搬运自本人 blog... 首先要明确一点，虽然 redux 是由 flux 演变而来，但我们完全可以并且也应该抛开 react 进行学习，这样可以避免一开始就陷入各种细节之中。 所以推荐使用 jsbin 进行调试学习，或者使用 create-re…"}, {"id": "6889216661908357133", "title": "快速复习和理解React Hooks的基本用法，面试好帮手", "desc": "之前阅读了一些 Hook 概览后就开始写业务代码了，但是发现还是有很多细节没记住，掌握不牢，不知道等。于是“抄书”，写写笔记，便于快速复习。 setState 函数用于更新 state。它接收一个新的 state 值并将组件的一次重新渲染加入队列。在后续的重新渲染中，useSt…"}, {"id": "6940972679197360165", "title": "react hook", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性 2. useEffect useEffect 会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。React 将在组件更新前刷新上一轮渲染…"}, {"id": "6913900261060640781", "title": "React 装饰器报错", "desc": "由于新的 react-app-rewired@2.x 版本的关系，你需要还需要安装 customize-cra。"}, {"id": "6844903784418639886", "title": "react源码浅析(三)：ReactElement", "desc": "开发环境下，key和ref会存在于react元素的props上，但是获取到的值为undefined，并报错。在生产环境下，key和ref不会存在于react元素的props上的。 ... 通过Ref属性的取值器对象的isReactWarning属性检测是否含有合法的Ref，在开…"}, {"id": "6844903496546795527", "title": "我从Angular 2转向Vue.js, 也没有选择React", "desc": "JavaScript angular2 Vue react"}, {"id": "6913808573864607757", "title": "React（博客系列一），环境搭建", "desc": "工作一年多了，一直想有个自己的博客，因为懒，所以一直拖着。今天开个篇，用React+TypeScript（野生学的，勿喷😀）搭建一个自己的博客系统，博客会持续完善，所以文章也会一直更新✈✈✈"}, {"id": "6896111787255529485", "title": "初识React", "desc": "native端：react-dom会将jsx最终渲染成原生的控件（比如Android中的Button，iOS中的UIButton）。"}, {"id": "6907123177617358856", "title": "React高阶组件的用法", "desc": "高阶组件（HOC）是React中用于复用组件逻辑的一种高级技巧。HOC自身不是ReactAPI的一部分，它是一种基于React的组合特性而形成的设计模式。具体而言，高阶组件是参数为组件，返回值为新组件"}, {"id": "6844903981597065230", "title": "React性能优化： 剑走偏锋(一)", "desc": "合理的数据设计, 只传递组件依赖的数据. 使用Memo. 重写shouldComponentUpdate生命周期. 等等手段, 都有助于提升项目的性能. 这些手段中, 最容易想到, 也最容易实现的, 就是重新shouldComponentUpdate方法. 一个页面的容器组件,…"}, {"id": "6844903586963390478", "title": "我是工业聚，可以来问我任何问题！", "desc": "工业聚的 AMA, 欢迎大家参与"}, {"id": "6844903741196337160", "title": "你用过 PropTypes 的这些类型检查么？", "desc": "从React15.5起，React.PropTypes被移入到单独的package中。react提供了一个package(prop-types)去检查props的类型。 在多人开发时，当被人使用自己定义的组件时，有可能出现类型传错的情况，而在自己的组件上加上prop-types…"}, {"id": "6844903606424961038", "title": "Redux技术架构简介（二）-- 异步实现", "desc": "1. 中间件（Middleware） 为了解决上面提到的问题，我们需要引入中间件的概念。 中间件执行的时机是在action发起之后，reducer执行之前。 即在dispatch一个action之后，经过一系列的中间件处理过程，再进行reducer。 本质上，中间件就是对dis…"}, {"id": "6943505370312605703", "title": "前端异常方案整理", "desc": "前端监控主要包括行为监控、异常监控、性能监控。这篇是异常监控。 在组件最外层（APP）包裹一个收集错误的高阶组件。将收集到的错误日志通过img标签上传到数据库中。错误日志在展现在数据中心，如果遇到页面crash的情况，会把该错误的报错信息和url发送提示。 一个监控系统，大致可…"}, {"id": "6844903512329945095", "title": "React Navigation 的个人分析与融合", "desc": "Learn once, navigate anywhere. The Navigation Prop 主要用于 Action 的分发，这部分在后面讨论。我们首先根据 Router 和 View 分析一下模块的内置导航器（Navigator）。 Router 可以认为是 Reac…"}, {"id": "6844903637416673294", "title": "json-server结合mockjs模拟REST API(react)", "desc": "开发的时候，前后端不论是否分离，接口多半是滞后于页面开发的。所以建立一个REST风格的API接口，给前端页面提供虚拟的数据，是非常有必要的。json server 作为模拟工具，因为设置简单，容易上手。本文以react生态做一个整体的项目搭建结构，结合mockjs模拟数据有需要…"}, {"id": "6844903966296244237", "title": "理解JS函数调用和\"this\"", "desc": "关于JS函数是如何调用的困惑了很多年，尤其是在JS函数中this的语法机制很让人头疼。 在我看来，如果理解核心函数的调用机制，同时验证一些以核心函数为基础的其他实现方式的运行机制，关于上述所说的问题就会迎刃而解。 首先，让我们来解析一些核心函数的调用机制的重点---Functi…"}, {"id": "6844903497205284877", "title": "ReactDOM 是如何把组件渲染到 DOM 中的？", "desc": "当我们在开发 React 项目中，第一次调用 ReactDOM.render 的时候都发生了什么呢？ 今天就从源码角度来追踪一下这个问题（主要看流程， 而不纠结与细节）。 首先我们可以从 ReactDOM 的入口文件 ReactDOMStackEntry.js 中找到 rend…"}, {"id": "6844903599235940360", "title": "React 深入系列3：Props 和 State", "desc": "组件根据props和state两个参数，计算得到对应界面的UI。可见，props 和 state 是组件的两个重要数据源。 本篇文章不是对props 和state 基本用法的介绍，而是尝试从更深层次解释props 和 state，并且归纳使用它们时的注意事项。 **一句话概括，…"}, {"id": "6906347138234777608", "title": "交互导入模式", "desc": "1. 本文主题： 2. 使用场景 ⚠️： 只有在交互前无法预取资源才应该在第一代码进行交互时加载。 应用程序可能需要通过客户端的JavaScript SDK来支持与服务的认证。这些SDK有时会很大，JS执行成本很高，如果用户不打算登录，我宁可不急于在前期加载它们。相反在用户点击…"}, {"id": "6844903877213421576", "title": "[译](A => B) !=> (B => A)", "desc": "componentWillReceiveProps的文档声明，当props作为重新渲染的结果发生变化时，将调用componentWillReceiveProps。有些人认为这意味着“如果componentWillReceiveProps被调用，那么props一定是已经改变”，但…"}, {"id": "6963924294527090724", "title": "React源码解析17-理念", "desc": "来自卡颂课程的笔记 1.大体流程 架构分为这三大模块 2.怎么快速响应 1.计算能力-cpu 2.请求接口返回速度-io 解决方法 1.浏览器1000/60=16.6ms 一帧 这一帧需要执行js脚本"}, {"id": "6844903846888603656", "title": "React中的状态管理---Mobx", "desc": "Mobx是一个功能强大，上手非常容易的状态管理工具。redux的作者也曾经向大家推荐过它，在不少情况下可以使用Mobx来替代掉redux。"}, {"id": "6844903509016444942", "title": "Node with React: Fullstack Web Development 课程手记（二）——Google OAuth", "desc": "OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。常见的采用微信、QQ、微博、Facebook、Google账号登陆网站的过程都是采用了OAuth技术。这一章我们会以使用Google账号登陆第三方网站为例，展示如何…"}, {"id": "6844904195087138824", "title": "从零搭建简单的React开发环境-02", "desc": "2.路由配置这一章我们开始配置路由,我们的应用在尾部有三个页签,分别对应首页,购物车和个人中心三个页面在本章节我们实践以下内容如何使用react全家桶配置路由如何按需加载antd并使用图标组件如何在r"}, {"id": "6844903991776657416", "title": "Retalk 3.0，最简单的 Redux 框架，更简单一点", "desc": "Retalk 3.0，现在 —— 像写 React 一样来写 Redux。 极简 Redux - 与 React 组件相同的语法。 只有 3 个 API - setStore()、withStore()、<Provider>。 异步 model - 对 model 进行代码分割…"}, {"id": "6844903700700348429", "title": " Hooks一览", "desc": "Hooks是一个React中的新提案，他可以让你在不使用Class的情况下使用state和其他的React特性。Hooks 目前已经发布在 v16.7.0 alpha 版本，且正在开放的RFC讨论。 Hooks是向后兼容的，这篇文档将向React开发者提供一个概览。 这是一个计…"}, {"id": "6844903623592247309", "title": "React-源码解析-setState运行机制", "desc": "以代码注释的方式整理setState的执行流程用class的方式创建React组件,需要继承React.Component,而setState()方法就绑定在他的原型上面发现setState()上有两"}, {"id": "6844903577815613447", "title": "Uber网站国际化的工程实践(CMS篇)", "desc": "Uber每个地区的网页内容都不一样。以前是每个地方的团队自己搭小网站，高峰时有1500多个小网站。这些小网站的域名十分繁杂，当地用户想要去网站上了解当地的最新消息，都不知道如何下手。 为了解决这个问题，Uber团队做了个统一的的内容管理系统（Content Management…"}, {"id": "6844903983660679175", "title": "[译]React核心概念5：事件处理", "desc": "处理React元素的事件与处理DOM元素上的事件十分相似，它们仅有一些语法上的区别。 React上的另一个不同之处在于你不能返回false去阻止默认行为，必须显示地调用preventDefault才能阻止默认行为。 在这里，e是一个合成事件。React根据W3C规范来定义这些合…"}, {"id": "6844903726189117447", "title": "Omi 入坑指南 The second floor 初步接触", "desc": "PS：由于Omi 使用了Shadow Dom 所以你使用小程序开发的时候会有种很熟悉的感觉，一说小程序就有种想揍打微信团队的冲动，做的微信开发者工具简称要人命，体验不是一般的差。 就会很明白的知道 之前的 my-app 是怎么来的。就是 define (string,xxx)中…"}, {"id": "6844903507691044877", "title": "1996-2017，JavaScript 简史", "desc": "在2017年，JavaScript的开发可以让新手使用语言，让许多老手瘫痪并且不确定从哪里开始或者选择哪条路径才是正确的。人们经常深究最新的和最伟大的，没有真正了解为什么它是如此伟大（或者为什么它可能不是如此）。了解JavaScript的历史可以帮助认识它现在的状态。"}, {"id": "6844903886453473287", "title": "React单元测试策略及落地", "desc": "市面关于React单元测试的文章，普遍停留在“可以如何写”和介绍工具的层面，既未回答“为何必须做单元测试”，也未回答“单元测试的最佳实践”两个关键问题。本文正是要对这两个问题作出回答。"}, {"id": "6844903545330728968", "title": "Understanding The React Source Code — Initial Rendering (Simple Component) III", "desc": "原文发表在博客 http://holmeshe.me/"}, {"id": "6844903497691824136", "title": "数据流架构学习笔记(一)-Flux", "desc": "由iOS原生开发转到React Native开发，再接着慢慢开始学习前端开发，真心觉得搞技术太难了这句话太正确了。当前正在开发的项目中使用了Vue+Vuex+Electron来实现桌面应用开发，在学习了Vuex之后，决定对之前学的各种数据流管理架构做一个系统的总结，所以接下来我…"}, {"id": "6844903586241986574", "title": "React基础——更快的开发", "desc": "Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. Hot Module Replace…"}, {"id": "6844903624645017607", "title": "从零开始React项目架构(六)", "desc": "我们借助它，就能很容易地开发出自己的脚手架了。 yeoman将根据我们写的generator来执行构建代码。 3. 初始化项目 没有发布上线的npm包，我们只需要在根目录执行npm link，然后我们就可以在新文件中使用yo generator-zero-react构建我们的项…"}, {"id": "6844903510312484871", "title": "ES6中的元编程部分 - Proxies", "desc": "在我ES6元编程的第三也是最后一章，让我们尽可能近地来看一下ES6的反射特征：Proxies。"}, {"id": "6844903496525807630", "title": "[译] 离线友好的表单", "desc": "网络不佳时网页表单的表现通常并不理想。如果你试图在离线状态下提交表单，那就很可能丢失刚刚填好的数据。下面就看看我们是如何修复这个问题的。 太长，勿点：这里是本文的 CodePen Demo。 随着 Service Workers 的推行，现在开发者们甚至可以实现离线版的网页了。…"}, {"id": "6844903608421449741", "title": "@xunlei/vuex-connector Vue 生态中的容器组件 store 连接器", "desc": "基于 Vue 生态实现的 Vuex store connector，借鉴 React 容器组件和展示组件的模式。之前在掘金专栏文章《致敬 React: 为 Vue 引入容器组件和展示组件》详细说明了为什么要写容器组件，以及如何在 Vue 中编写容器组件，这个轮子帮你快速实践起来"}, {"id": "6844903601484070920", "title": "从零开始创建一个React应用", "desc": "为引导和规范众成翻译服务及众成翻译用户的行为，特制定本用户协议。凡访问、浏览众成翻译网站或向众成翻译提交信息，必须首先同意此协议和其他由众成翻译发布的协议。如果您不同意此协议，请停止使用众成翻译网站。 众成翻译网（以下简称“众成翻译”）为北京了了科技有限公司独立拥有，…"}, {"id": "6844904102879576078", "title": "React中的Refs与Refs的转发", "desc": "Refs 提供了一种可以便捷访问DOM元素和React组件实例的方式。可以通过Refs强制执行一些实例方法。例如：控制input标签的焦点管理、控制视频组件（<video/>标签）的播放管理。 String 类型的Refs. （已过时，不建议使用） 在标签处为ref赋值。如下 …"}, {"id": "6844903857424711694", "title": "React 生命周期的演变之路", "desc": "综上可以看出，React 16.3之前的生命周期非常完整，基本涵盖了组件生命的每一个周期。为什么要变呢？其实主要是性能问题，具体有以下几点原因 例如：在componentWillMount 中放置事件绑定和异步请求函数，在服务端渲染时，组件不会触发componentWillUn…"}, {"id": "6844903696942235656", "title": "详解JavaScript中的this", "desc": "相信javascript中的this会使很多同学在工作学习中产生困惑，笔者也同样是，经过阅读各种资料及实际工作中的应用，做了以下梳理，主要内容包括长期以来大家对this的错误认识及this的绑定规则，箭头函数、实际工作场景中遇到的问题，希望对于有此困惑的你能有所帮助。 下面示例…"}, {"id": "6844903730198872078", "title": "Why Do React Elements Have a ?typeof Property?", "desc": "Dan Abramov posted new post. It has something to do with security."}, {"id": "6844903545720799245", "title": "Bright UI v0.1.0：一套简约优雅的React组件库", "desc": "基于TypeScript构建，已包含常用组件，并且持续更新中。"}, {"id": "6844903666458034190", "title": "《HelloGitHub》第 29 期", "desc": "分享、推荐 GitHub 上好玩、容易上手的项目，帮你找到编程的乐趣。欢迎 Star 和推荐项目。"}, {"id": "6844903561449439245", "title": "（翻译）React Scope介绍", "desc": "随着React应用程序复杂度的增长，components、state 、props的复杂性也变得越来越高。上个月，一些开发人员和我对于这个问题建立了解决方案。我们决定开发Chrome的插件React Scope，它提供了开发人员的React应用程序组件的分层树视图。 React…"}, {"id": "6844904137348349960", "title": "React中是如何通过?typeof防止XSS攻击的", "desc": "React的核心机制：虚拟DOM。我们平时写的JSX，实际上babel会帮我们转成React.createElement，用来生成虚拟DOM树。以下是源码部分。 ?typeof是个symbol值，不支持symbol的环境会是一个特殊数字，为什么是这个数字？据说因为 0xeac…"}, {"id": "6953631225437224990", "title": "React setState数据更新机制", "desc": "为什么使用setState 在React 的开发过程中，难免会与组件的state打交道。使用过React 的都知道，想要修改state中的值，必须使用内部提供的setState 方法。为什么不能直接使"}, {"id": "6934564130179252232", "title": "Redux的核心原理，其实很简单", "desc": "Redux是基于Facebook提出的Flux架构设计出来的。Flux不是一个框架或者库，可以认为Redux是Flux的一种实现形式。Flux架构强调数据应该是单向的数据流。 Store（数据层）：存储应用的数据状态，store的变化最终会映射到View上。 单向数据流的优势在…"}, {"id": "6845166890374037512", "title": "浅析Ant Design中表单是如何实现的", "desc": "前言市面上的React表单组件一大堆，都很好使，最近打算开发一个小的ui库，表单组件自己写肯定很复杂，于是选择了用AntDisign的表单实现，虽然没自己写，但是搞清原理还是重要的那么其实是一个标题党"}, {"id": "6978749888804700174", "title": "我对React Native 的一些看法", "desc": "RN 简介 React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，支持i"}, {"id": "6844904081320837133", "title": "初探 Ant Design of React", "desc": "antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。 以笔者的经验来看，Ant Design 设计体系下的产品设计理念、使用方式、底层技术、周边工具都保持着高度一致，工具不是越多越好，有一套好用顺手的就行，UI框架千千万，…"}, {"id": "6924972128475283470", "title": "如何比较 NextJS 和 Create-React-App 这两个工具", "desc": "在 2021 年创建新的React项目时，有两个明确的选择：NextJS 或 Create-React-App。Gatsby 已经失宠了。 由于大规模构建缓慢，NextJS成为更好的静态站点生成器。 让我们回顾一下 NextJS 和 Create-React-App的优缺点，我…"}, {"id": "6844904090535723016", "title": "前端渣渣对使用react hooks进行重构的新认识", "desc": "看出问题了吗，A、B、C 组件，每次在请求、渲染之前，都要判断当前 reducer 中 tabs 的值。真实业务复杂程度相对较高，举个例子，组件 B 的逻辑可能是这样的 👇 这个是最难受的一个问题，因为真的时间紧，我不想改动原先的代码，所以我用了一个很蠢的办法，就是在 red…"}, {"id": "6844903828878262286", "title": "尽量使用 useReducer，不要使用 useState", "desc": "当开发者们开始在他们的应用中使用 React Hooks API 时，很多人一开始都会把 useState 作为他们的状态管理工具。 然而，我强烈认为 useReducer 比 useState 更适合做状态管理。 接下来我分别对三点进行阐述。 这篇文章大部分观点只是我的主观看…"}, {"id": "6907921391077572622", "title": "助力ssr，使用concent为nextjs应用加点料", "desc": "nextjs是一个非常流行的 React 服务端渲染应用框架，它很轻量，简单易上手，社区活跃，所以当我们使用react写一个需要ssr(server side render)的应用的话，基本都会首选nextjs，concent是一个新生代的react状态管理方案，它内置依赖收集…"}, {"id": "6915326703136931847", "title": "React（博客系列二），路由传参的几种方式", "desc": "1.params（动态路由）方式地址栏可见，与拼接的地址不一样（不会有问号），刷新仍然存在路由配置跳转传参页面取值props取值使用hooks取值简单介绍一下路由里面几个hooks的用法，以下是控制台"}, {"id": "6844903619456663565", "title": "[译] 为何前端开发如此不稳定", "desc": "我们都知道这样一个笑话：在你学会一项前端技术的时候，另外三项新技术已经发布了。不仅如此，你刚学会的那个也已经被弃用了。 我们却不常看到有解释为什么会这样。 典型的解释（来源于 reddit 的 r/programming 频道）这似乎与前端开发者天生不耐烦，追逐流行与能力有限相…"}, {"id": "6844903896767283207", "title": "React性能优化小贴士", "desc": "平常在完成业务功能开发后，不知道你是否还会精益求精，做一些性能优化方面的工作呢？React框架中有一些性能优化相关的注意事项，如果平常不怎么关注的话，可能就很容易忽略掉。接下来的这篇文章，将围绕工作中会用到的几种性能优化的相关经验进行介绍。 在渲染列表结构数据的时候，使用key…"}, {"id": "6979026302623809573", "title": "无障碍辅助功能(精读React官方文档—13)", "desc": "这是我参与更文挑战的第27天，活动详情查看：更文挑战 什么是无障碍辅助功能？ 解读 标准和指南 WCAG 网络内容无障碍指南（Web Content Accessibility Guidelines，"}, {"id": "6895359777090732046", "title": "useState 原理", "desc": "执行setN 的时候，n 并不会马上变，而是稍会儿变。 可以看到，App() 确实会重新执行，重新执行useState(0),每次n是不同的。"}, {"id": "6844903944188231687", "title": "useContext Hook 是如何工作的", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 所有这些新的React Hook之间都有一个宗旨：就是为了使函数组件像类组件一样强大。 useContext hook 与其它几个有点不一样，但它在特定场景下还是很有用的。 React 的 Context AP…"}, {"id": "6893505476870045709", "title": "jest使用技巧及避坑指南", "desc": "jest使用技巧及避坑指南jest是什么jest是js端的单元测试框架，特别是结合enzyme能够很方便地实现对react的组件测试，作为组件的单元测试也非常好用。jest怎么用1.新增配置可以直接在"}, {"id": "6844903882179477517", "title": "实战项目后对 React Hooks 总结", "desc": "useState 只接收一个参数 inital value，并看不出有什么特殊的地方。 比如 经常看到这样的写法。 所以 useState 就是为了给函数式组件添加一个可以维护自身状态的功能。 那么现在，当 activeUser 状态改变的时候我们会发现又打印出了 改变状态 这…"}, {"id": "6993892003326984200", "title": "react-create-app项目报 'Import in body of module; reorder to top  import/first'", "desc": "代码如下： 找了一下，原因找到了，第6行的代码应该放在前一行代码的前面。 哈哈，项目终于正常运行了。"}, {"id": "6844904202246815752", "title": "React技术揭秘1-5 调试源码", "desc": "上一节我们了解了源码的文件目录，这一节我们看看如何调试源码。 即使版本号相同（当前稳定版为16.13.1），但是facebook/react项目master分支的代码和我们使用create-react-app创建的项目node_modules下的react项目代码还是有些区别。…"}, {"id": "6844903698921947144", "title": "React 源码分析", "desc": "React 开发一年多，最近仔细研究了 React 源码，在这里总结一下原理。React 源码比较复杂不适合初学者去学习。所以本文通过实现一套简易版的 React，使得理解原理更加容易（本文基于 React v15）。包括： React 的代码还是非常复杂的，虽然这里是一个简化…"}, {"id": "6950447819396218911", "title": "【我的React笔记】 01. 战术后仰：什么是 React-Router 呀", "desc": "借助history库实现监听路由，内部支持hash和bowser两种路由变化。使用react-router-dom时首先选择的就是BrowserRouter或HashRouter，对应h"}, {"id": "6844903681318453255", "title": "[译] React Profiler 介绍", "desc": "React 16.5 添加了对新的 profiler DevTools 插件的支持。这个插件使用 React 的 Profiler 实验性 API 去收集所有 component 的渲染时间，目的是为了找出你的 React App 的性能瓶颈。它将会和我们即将发布的 时间片 特…"}, {"id": "6903767677567762446", "title": "同学，请专业点，用Hooks解耦UI组件吧", "desc": "当我们的应用逐渐庞大，假设有n个组件要使用同样的数据。 为了减少重复请求，我决定使用LocalStorage缓存服务端数据。 怎么可能，让我们将数据请求部分抽离为一个自定义hook——useSomeData。 我们的应用越来越复杂，我决定上Redux。 某天我决定赶时髦上Gra…"}, {"id": "6844904103836041229", "title": "基于Hook实现redux，真香!", "desc": "react-hook的出现让我们对无状态组件又有了一些新的认知,特别是它还提供各种各样的hook,比如useReducer,useRef,useEffect,useMemo,useCallback,useState,useContext.... 在开发中,大家肯定用过Redux…"}, {"id": "6924498607655616520", "title": "如实使用 Node 开发一款命令行工具", "desc": "最近山月开发了一个从任意 URL 解析内容并生成 markdown 的小客户端工具: markdown-read。用以我个人公众号的内容获取及一些优质内容的整理收藏，欢迎 Star、下载及使用。 最初印象大致是 ls，pwd 这些能够在终端执行的系统命令，这样的命令有很多，数不…"}, {"id": "6844903895680942088", "title": "记一个复杂组件（Filter）的从设计到开发", "desc": "貌似在面试中，你如何设计一个 react/vue 组件，貌似已经是司空见惯的问题了。本文不是理论片，更多的是自己的一步步思考和实践。文中会有很多笔者的思考过程，欢迎评论区多多交流和讨论。 从需求讨论、技术方案探讨到编码、到最终的测试，经历过了很多次的脑暴，也遇到过非常多的坑，其…"}, {"id": "6844903667779239949", "title": "如何使用webpack构建Ueditor", "desc": "由于种种原因，我们选择了Ueditor作为我们的富文本编辑器选型。 Ueditor不支持模块化，所以无法在代码中使用import去引入。一开始我们在项目中是将Ueditor的js文件直接通过script标签引入，在React的代码里直接使用window.UE去使用编辑器。但是这…"}, {"id": "6854573216409583623", "title": "JS核心理论之《React基础概念与虚拟DOM》", "desc": "JSX，既不是字符串也不是HTML，本质上是一个 JavaScript 的语法扩展，且更接近于JavaScript，是通过React.createElement()创建的一个对象，称为React 元素。 React 不强制使用JSX，但将标记与逻辑放在一起形成组件，实现关注点分…"}, {"id": "6895322363357822984", "title": "展望 react-cache，一个 React 官方的处理数据副作用方案", "desc": "我自认不比写 React 的人更懂 React ，因此相关的哲学理念层面上的思考、相比传统方式的优劣的讨论我就不献丑了，请大家自行阅读这篇 官方文档 ，这篇文章只介绍 react-cache 的使用方式和原理。 相信做过 React 代码分割的同学基本上对 Suspense 都…"}, {"id": "6844903893650898958", "title": "React 组件开发实践", "desc": "基于 React 的组件化开发方式，为富前端 web 应用提供大量技术实践，社区逐渐形成了稳定的组件规范，本文从 API 层面归纳出 6 种组件类型，分析其优缺点和适用场景，为日常组件开发提供一个方法指南。6 种类型分别为结构型组件、样式型组件、组合型组件、配置型组件、受控型组…"}, {"id": "6844903497398222855", "title": "一些非常有用的 VSCode 扩展", "desc": "HtmlTagWrap这个扩展可让你选择一个单词、句子或多行文本，并用指定的html标签包起来（快捷键：Alt+W或Option+W）React.jscodesnippets如果你正在使用React."}, {"id": "6844903615996362766", "title": "React.js绑定this的5种方法", "desc": "this在javascript中已经相当灵活，把它放到React中给我们的选择就更加困惑了。下面一起来看看React this的5种绑定方法。 如果你使用的是React 15及以下的版本，你可能使用过React.createClass函数来创建一个组件。你在里面创建的所有函数的…"}, {"id": "6916502605225000968", "title": "JS 实现复制到剪贴板 | 七日打卡", "desc": "前阵子接到一个开发任务，是复制网页上的图片，并粘贴到的聊天工具中。这是一个很常见的操作，在日常工作中我们经常通过 QQ 截图、 Ctrl + C 将图片复制到聊天框。 github 上几个高 star 的 js 复制库，比如 clipboard.js、copy-to-clipb…"}, {"id": "6844903681935015944", "title": "初识react(四) react中异步解决方案之 redux-saga", "desc": "redux-saga 是一个 redux 的中间件，而中间件的作用是为 redux 提供额外的功能。 由于在 reducers 中的所有操作都是同步的并且是纯粹的，即 reducer 都是纯函数，纯函数是指一个函数的返回结果只依赖于它的参数，并且在执行过程中不会对外部产生副作用…"}, {"id": "6844904099670917128", "title": "万字长文+图文并茂+全面解析 React 源码 - render 篇", "desc": "今天想了比较久的时间，准备开启这一系列的文章，旨在对 React 系列的源码进行深度解析，其中包含但不限于 react、react-dom、react-router... 等一系列优秀的 React 系列框架，最后再一一实现这些框架的简易版本。 本篇文章将会是对 react 和…"}, {"id": "6844903646480580615", "title": "webpack怎么能只是会用呢,核心中的核心tapable了解下?", "desc": "1. tapable 同样的，在使用tap*注册监听时，传递的第一个参数，也只是一个标识，并不会在程序运行中产生任何影响。而第二个参数则是回调函数 3. Sync*类型的钩子 串行同步执行,第一个注册的回调函数会接收call传进来的所有参数,之后的每个回调函数只接收到一个参数,…"}, {"id": "6844903678852202504", "title": "通俗易懂的Redux了解下", "desc": "Redux让我脑仁疼，感觉搞不定他。因为Redux对我而言太抽象了，所以我用通俗易懂地方法去思考Redux，感觉能够理解Redux一些了。 本文代码仓库，在此文件夹之中。 讲道理我要用import和export的写法来学习Redux，但是node有些es6还是不支持的，为了简单…"}, {"id": "6844903684837474312", "title": "搭建Typescript+React项目模板(5) --- 团队规范", "desc": "这篇文章的每一步都基于vscode这款编辑器，如果你使用的不是vscode，那么就需要自行集成相关插件及其配置。 该文章只是简单介绍各各代码检测的流程，至于配置项则需要读者自行前往对应的lint官网自己查看、配置需要的。 一般在项目中用到typescript作为开发工具的都是大…"}, {"id": "6844903811090219016", "title": "【译】如何在React Hooks中获取数据？", "desc": "在本教程中，我想通过state和effect hook来像你展示如何用React Hooks来获取数据。我将会使用Hacker News的API来获取热门的技术文章。你将会实现一个属于你自己的自定义hook来在你程序的任何地方复用，或者是作为一个npm包发布出来。 如果你还不知…"}, {"id": "6976509325846151204", "title": "React框架基础 - 1、基础理论", "desc": "本模块带你学习React的常用语法，包含JSX语法、组件化开发、生命周期和模板语法等；帮你学习并建立组件化开发的思想，掌握React组件创建的语法规则，熟悉组件间传值、组件插槽的用法，帮助你实现基于组"}, {"id": "6844903608941543438", "title": "给在校同学的几个建议", "desc": "Vim 被誉为\"编辑器之神\"，这可不是虚的。 在我用了 vim 半年之后，我建议我身边的每一位程序员都去学习 vim 。 因为一旦你学会了 vim 的操作，你就像中了毒一样，你会讨厌鼠标，讨厌在你敲着敲着键盘，突然又要去移动光标，因为把手从键盘移动到鼠标上的时间远远大于手指在键…"}, {"id": "6889789735016972295", "title": "React JSX原理与实现学习报告", "desc": "最近在学习“winter手把手带你实现ToyReact”课程，这是第一节课的学习报告心得，记录一下学习历程ToyReact顾名思义即实现一个玩具react，也就是一个极简react，通过这个极简rea"}, {"id": "6968820472431509535", "title": "探究React Hooks的背后原理", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 简单的用法如以下代码所示。 如上。我们可以用u"}, {"id": "6844903671394729992", "title": "React源码分析与实现(三)：实操DOM Diff", "desc": "众所周知，React中最为人称赞的就是Virtual DOM和 diff 算法的完美结合，让我们可以不顾性能的“任性”更新界面，前面文章中我们有介绍道Virtual DOM，其实就是通过js来模拟dom的实现，然后通过对js obj的操作，最后渲染到页面中，但是，如果当我们修改…"}, {"id": "6844903601723146254", "title": "[译] MobX 背后的基础原理", "desc": "不久之前 Bertalan Miklos 写了一篇很好的博文，比较了 MobX 和基于 proxy 的 NX-framework。这篇博文不仅证明了 proxy 的可行性，更好之处在于其触及了 MobX 中一些非常基础但通常又被隐藏的概念。迄今为止我还尚未详细阐述过这些概念，所…"}, {"id": "6844903830203678727", "title": "[译] 5种方法将React类组件转换为具有React Hooks的功能组件", "desc": "在React的最新alpha版本中，引入了一个新概念，它被称为Hooks。React引入Hook可以用来解决许多问题，如Hooks 介绍中所阐述的那样，它主要用作类(class)的替代方案。使用Hooks，我们可以创建使用状态(state)和生命周期方法的功能组件。 钩子是个相…"}, {"id": "6844903583670861831", "title": "如何开发一个可爱的CLI（二）", "desc": "在系列的上一篇《如何开发一个可爱的CLI（一）》中，我给大家讲述了如何开发一个生成、渲染、转换样板文件（Boilerplate）的简单脚手架工具。本文，将是愉快的进阶环节 —— 如何基于webpack写一个 “零配置” 的命令行工具（暂且命名为lovely-cli.），实现以下…"}, {"id": "6844903779704242190", "title": "随行付微服务前端开发框架React Admin", "desc": "React-Admin是基于React16.x、Ant Design3.x的管理系统架构。 采用前后端分离，内置了许多管理系统常用功能，通过一些脚本、封装帮助开发人员快速开发管理系统，集中精力处理业务逻辑。 一般的互联网公司内部或者对外都会有大量的管理系统，传统公司一般有后端开…"}, {"id": "6844903647218761736", "title": "从 0 到 1 实现 React 系列 —— 3.生命周期和 diff 算法", "desc": "本系列文章在实现一个 (x)react 的同时理顺 React 框架的主干内容(JSX/虚拟DOM/组件/生命周期/diff算法/...)"}, {"id": "6844903636942716935", "title": "响应式 React Native Echarts 组件", "desc": "近年来，随着移动端对数据可视化的要求越来越高，类似 MPAndroidChart 这样的传统图表库已经不能满足产品经理日益变态的需求。前端领域数据可视化的发展相对繁荣一些，通过 WebView 在移动端使用 Echarts 这样功能强大的前端数据可视化库，是解决问题的好办法。 …"}, {"id": "6844903576997724167", "title": "如何理解 React 高阶组件(HOC)?", "desc": "如何理解 React 高阶组件, 并运用到自己的项目中去？"}, {"id": "6951281765411455012", "title": "使用react-cropper对图片进行裁剪上传", "desc": "最近开发轮播图管理功能，为了使上传的图片符合轮播图的尺寸，在上传时需要将图片裁剪成一定的比例后才能上传。这里记录一下使用 antd 的 Upload 上传组件和 react-copper 实现图片裁剪"}, {"id": "6844903729611669511", "title": "history源码解析-管理会话历史记录", "desc": "history是由Facebook维护的，react-router依赖于history，区别于浏览器的window.history，history是包含window.history的，让开发者可以在任何环境都能使用history的api（例如Node、React Native等…"}, {"id": "6954582683850637343", "title": "react-走近useCallback的“坑” ", "desc": "React 的hook的使用在实际项目中非常常见，useCallback在性能优化方面做了提升，但是使用不利可能导致“适得其反”"}, {"id": "6844904201089187854", "title": "关于 React Hooks 的 useState 的原理解析", "desc": "因此，React 不允许出现 if...else.."}, {"id": "6844903981651591175", "title": "React系列: setState的工作原理", "desc": "在hooks出现之前, setState是唯一的方式来改变组件的内部state. 本文梳理一下, setState的工作原理和执行流程. 批量行为：React会合并多次setState操作为一次执行. 异步：setState调用后，会调用其updater.addState，最终…"}, {"id": "6961398889635119111", "title": "深入react合成事件与原生事件", "desc": "1. 原生事件 原生事件就是js的原生事件，如通过document.addEventListener来设置的监听事件。 在react中即使有自己的一套事件机制（见下面合成事件），但有时候的业务场景我们"}, {"id": "6844904201122906125", "title": "定制一个可以react和vue共存的ts项目", "desc": "2. main开始 1. src/layouts/index.tsx 2. src/menu/interface.ts （仅为demo） 3. src/menu/index.ts 5. src/services/index.ts 6. src/layouts/index/ind…"}, {"id": "6947881456752394271", "title": "在微前端中，antd icon createFormIconfontCN 的本地化问题", "desc": "对于内网开发者，无法连接外网，因此也就无法使用外链。 而如果我们使用 public 静态化的方式，能较好地解决图标资源本地化的问题。 我一开始也是使用此方法。 但对于微前端应用开发者（比如说我们）， public 静态化的方式，仍无法满足我们解决图标资源本地化的问题。因为子应用…"}, {"id": "6844903599932178439", "title": "帮助你开始理解async/await", "desc": "一边学习前端，一边通过博客的形式自己总结一些东西，当然也希望帮助一些和我一样开始学前端的小伙伴。 async/await使用同步的思维，来解决异步的问题。 async可以直接接收传递的变量，但是peomise的then是独立作用，如果要取值，就要将部分数据暴露在最外层，在 th…"}, {"id": "6844903834104365063", "title": "[译] 基于虚拟DOM(Snabbdom)的迷你React", "desc": "React 是 JavaScript 社区的新成员，尽管 JSX （在 JavaScript 中使用 HTML 语法）存在一定的争议，但是对于虚拟 DOM 人们有不一样的看法。 对于不熟悉的人来说，虚拟 DOM 可以描述为某个时刻真实DOM的简单表示。其思想是：每次 UI 状态…"}, {"id": "6973656861572923405", "title": "一起了解基于React的服务端渲染&同构", "desc": "这是我参与更文挑战的第14天，活动详情查看 更文挑战 概念分析： 服务端渲染（SSR） 更好的⾸屏性能 更利于 SEO，爬虫可以直接抓取已渲染的内容 客户端渲染 前后分离，⻚⾯的交互 同构：服务端和客"}, {"id": "6844904110366392333", "title": "React源码解析之commitRoot整体流程概览", "desc": "那本篇文章就来整体看下commitRoot()/commitRootImpl()的整体流程，之后的文章再细讲内部各个function的源码。 具体的源码解析，我们在以后的文章里讲。 (3) commitRoot()的核心函数是commitRootImpl()，接下来就来看下它的…"}, {"id": "6844904163340468231", "title": "[书籍精读]《React进阶之路》精读笔记分享", "desc": "书籍介绍：《React进阶之路》详细介绍了React技术栈涉及的主要技术。本书分为基础篇、进阶篇和实战篇三部分。基础篇主要介绍React的基本用法，包括React 16的新特性；进阶篇深入讲解组件state、虚拟DOM、高阶组件等React中的重要概念，同时对初学者容易困惑的知…"}, {"id": "6962563203029008414", "title": "关于 react-router- dom 的使用 和 原理", "desc": "react-router 使用 1、 安装 用最大的 HashRouter / BrowserRouter 来包裹组件 当使用switch组件的时候就会从上到下找到合适的组件 叫独占路由 如果不写 p"}, {"id": "6857110861371146247", "title": "SPA 的 SEO 方案对比、最终实践", "desc": "React开发的SPA就是一种CSR方案，如图所示，在到达浏览器之前的html页面是没有内容的，要等到浏览器执行相应异步请求获取数据填充后才显示界面。 基本原理： 在服务端起一个node应用，浏览器到来时，先拦截执行部分 js 异步请求，提前将数据填充到 html 页面中返回浏…"}, {"id": "6844903861614805000", "title": "函数化的React Hooks", "desc": "在2018年React Conf大会上，React团队讲解了目前大家使用React开发过程存在的一些问题并推出了一个令人激动的概念：React Hooks，并介绍hooks如何解决这些问题。刚好我所在的团队前端使用的是react+ts+node这套技术栈，前段时间将react版…"}, {"id": "6844903669435990024", "title": "React+Webpack性能优化", "desc": "例如这样就可以直接使用React的压缩版本，每次构建时不必再次解析。还可以通过别名引用文件，而不必再打长长的引用路径： 但这样的缺点是会无法使用Tree-Shaking，所以一般对React这种整体性比较强的库使用比较好，而像lodash这样的工具库还是使用Tree-Shaki…"}, {"id": "6844904175206137864", "title": "你真的懂React Hook吗？（结合源码解析）", "desc": "读这篇文章的前提是你已经对React Hook有所了解的情况下，如果你还没有了解，请先移步官网学习一下。 最好不要去网上看别人的总结之类的，无非就是超的官网的，而且这样会让你的认知从一开始就走偏。 使用的话React官网已经讲得很详细了，这里就不多赘述了。 所以，结合一下。我个…"}, {"id": "6893880106100457480", "title": "从0搭建react ssr并部署serverless", "desc": "掘金用vue，知乎、简书用react实现ssr，淘宝网用kissy，京东用nerv，对于seo需求很大的项目，ssr是必须的。 开发环境：webpack-dev-server启动csr的8888端口，koa启动server的3333端口，通过webpack处理react项目的入…"}, {"id": "6844903840299352072", "title": "你再也不用使用 Redux、Mobx、Flux 等状态管理了", "desc": "这个库的作者希望使用 React 内置 API ,直接实现状态管理的功能。看完这个库的说明后，没有想到代码可以这个玩。短短几行代码，仅仅使用 React Hooks ，就实现了状态管理的功能。 看完之后，第一想法就是翻译成中文，分享给其他人。提交 Pull Request 后，…"}, {"id": "6844903888278011917", "title": "关于 Next.js 开发实践过程中的一些总结（bug问题整理）", "desc": "如果你满足上面的几条，那么选择Nextjs是不错的选择。仁者见仁智者见智，Nextjs并不全是优点，也有不足之处，比如约束性较强，路由必须按照规则书写等等。但是，瑕不掩瑜，确实Nextjs在React SSR这一块算是最成熟的解决方案了。 关于Nextjs如何使用以及脚手架的一…"}, {"id": "6875862700811878407", "title": "React列表中的key属性", "desc": "最高效的学习方法就是把知识讲给别人听。 本来是个很简单的问题，但是感觉还是应该记一下，里面涉及到很多细节都可能成为一个知识盲区。 代码打印出 [2, 4, 6, 8, 10]。 在 React 中，把数组转化为元素列表的过程是相似的。 你可以通过使用 {} 在 JSX 内构建一…"}, {"id": "6985913850981777416", "title": "贴合业务地聊下react diff", "desc": "贴合业务地聊下react diff 前言 目前我搜索到关于react diff的文章有两个问题： 1.不少文章直接讲diff算法，甚至还会和Vue2/Vue3的diff算法做对比。这样的角度太学术了，"}, {"id": "6847902222936702989", "title": "从npm init 搭建React企业级项目", "desc": "1. webpack4相关依赖 2. babel7 所以 @babel/plugin-transform-class-properties 变成 @babel/plugin-proposal-class-properties，当它进入 Stage 4 后，会把它命名回去。 Ba…"}, {"id": "6844903538301075464", "title": "dva + antd + mockjs 实现用户管理", "desc": "也有不少使用axio的 具体优缺点还没研究。"}, {"id": "6844903977482469383", "title": "React.js 快速上手开发知识梳理", "desc": "我们可以很直观的将有一个复杂的页面分割成若干个独立的组件，每个组件包含自己的 html 结构、样式和js逻辑，然后再将这些组件组合，即可完成一个复杂的页面。这样既减少了逻辑的复杂度，又实现了代码的重用； model ：data（defineProperty GETTER/SET…"}, {"id": "6844903952664756237", "title": "React的几种条件渲染", "desc": "对于一个展示页面来讲，有好几种展示状态，在React中，可以根据不同的状态，渲染组件。也就是条件渲染。不同于Vue的v-if,v-show等框架提供的api，React中的条件渲染的工作方式与JavaScript中条件工作的方式相同。 使用变量来存储元素，这样可以有条件地渲染组…"}, {"id": "6933219707734458381", "title": "浅析 requestIdleCallback", "desc": "最近在研究 React Fiber 相关的知识，上一篇文章 浅谈对 React Fiber 的理解 简单提到了 requestIdleCallback， React 源码中 polyfill 了这个方法，了解它对 Fiber 也能有进一步理解。本篇会深入介绍下这个方法。 req…"}, {"id": "6844903905629831176", "title": "详解 Diff 算法以及循环要加 key 值问题", "desc": "上一篇文章我简述了什么是 Virtual DOM，这一章我会详细讲 Diff 算法以及为什么在 React 和 Vue 中循环都需要 key 值。 Web 界面其实就是一个 DOM 树的结构，当其中某个部分发生变化的时候，实质上就是对应的某个 DOM 节点发生了变化。而在 Re…"}, {"id": "6844903648800014350", "title": "create-react-app 创建项目有关 less 的若干问题", "desc": "重新 npm start，项目可以正常启动。 Ant Design 默认的 iconfont 文件托管在 iconfont.cn 并默认使用平台提供的 alicdn 地址，公网可访问使用。 最新的 iconfont 文件可以到 此链接 下载。 由于项目使用的是 create-r…"}, {"id": "6970522012074655757", "title": "从源码角度来聊聊React的生命周期（上）", "desc": "学习源码的目的 很多时候我们总是会纠结要不要学源码，会不会被卷之类的问题，但是要我看，学不学还是在于自己，无论你是出于什么样的目的来学，总之学到了就是你自己的。从功利的角度来说，学习源码就是为了面试，"}, {"id": "6844903873220444174", "title": "vscode & iterm2 & Chrome 配置等", "desc": "1. gif录制软件 kap 2. 终端iterm2 3. homebrew 🖥官网 4. Keycastr 5. CheatSheet 6. Google Chrome 插件 7. vscode 🖥官网 8. Sip Pro 屏幕取色工具 9. typora Markdo…"}, {"id": "6894430381328728077", "title": "React源码分析 -  Hooks 设计初探", "desc": "从概念上讲，Hooks 是 React 16.8 才全面支持的一个新特性，全面拥抱函数，能够使开发者在不使用 Class 的前提下使用状态和 React 其他的功能，从此函数式组件的地位直线飙升，不再仅仅是纯函数。 从写法上讲，Hooks 是一堆名为 useXXX 的函数，且这…"}, {"id": "6912312960459210760", "title": "React官方推荐单测库testing-library简介和入门", "desc": "从React官方网站看测试概览。提到了两个比较重要的工具，一个是Jest、一个是React测试库。 Jest是一个JavaScript测试运行器。它允许你使用jsdom操作DOM。尽管jsdom只是对浏览器工作表现的一个近似模拟，对测试React组件来说它通常也已经够用了。 R…"}, {"id": "6986617531599421470", "title": "React中ref的使用", "desc": "ref React中的ref表示引用refreference。 使用场景：直接使用dom元素的某个方法，或者直接使用自定义组件中的某个方法。 作用于内置的html组件，得到的是真实的dom ref作用"}, {"id": "6844903753498230798", "title": "精读《setState 做了什么》", "desc": "setState 是 React 框架最常用的命令，它是用来更新状态的，这也是 React 框架划时代的功能。 通过 how-does-setstate-know-what-to-do 这篇文章，可以解开这个秘密。 setState 函数是在 React.Component 组…"}, {"id": "6844903955923746830", "title": "react hooks 和 react-redux hooks 应用场景", "desc": "useState是react自带的一个hook函数，它的作用就是用来声明状态变量。 第[1]项是可以改变状态值的方法函数。 使用useEffect，可以直接在函数组件内处理生命周期事件。 如果你熟悉 React class 的生命周期函数， Redux 的核心概念是，组件发出 …"}, {"id": "6844903861728051208", "title": "webpack手动搭建React项目", "desc": "之前也是一般选用框架自带的脚手架工具，趁着端午有时间，主动配置一下webpack & react，当然以上只是一些简单的配置，更复杂的配置还需要修改webpack配置，有时间再补充。接下来配置webpack & vue。"}, {"id": "6844903502641102855", "title": "解读 Redux 中间件的原理", "desc": "Redux 的中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，换而言之，原本 view -> action -> reducer -> store 的数据流加上中间件后变成了 view -> action -> middleware -> re…"}, {"id": "6935976293523521549", "title": "容易混淆的umi创建命令", "desc": "在 react 开发中，不得不提的就是 umijs 框架。这个框架把 react 全家桶打了一个包，整合在了一起。让开发者不必苦于配置初始开发环境。在 umijs2.x 升级到 umijs3.x 之后，在创建新项目的命令也发生了变化，让人容易模糊，而且 npm 和 yarn 的…"}, {"id": "6964216741425594382", "title": "React Hooks", "desc": "React Hooks? 使用过React的兄弟们都知道，在React中有两种组件：函数式组件和类组件。在React16.8之前，函数式组件是不能玩ref和state的，就连生命周期都不能使用，最主要"}, {"id": "6996928041871998989", "title": "02. 从零开始，新建一个啥都有的React项目（Eslint）", "desc": "1. 安装 Eslint 和 Eslint 的 typescript 插件 2. 安装airbnb规则插件及扩展（目前使用人数最多的规则就是airbnb） 3. 新建.eslintrc.js文件，自定"}, {"id": "6986920491122425892", "title": "React hook 中止 pending API 请求", "desc": "AbortSignal and AbortController, cancel pending api request in react hook"}, {"id": "6844903938001469448", "title": "使用 enzyme + jest 测试 React 组件", "desc": "jest 是 Facebook 推出的测试工具，enzyme 是airbnb 推出的 React 测试类库，使用两者可以很好地测试 React 组件。 其中 babel-jest 是自动使用 babel 编译文件。 运行测试命令就可以看到测试通过的界面。 这样就可以像之前的测试…"}, {"id": "6844903875456008206", "title": "React 新特性 Hooks 讲解及实例(三)", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 使用 Context ,首先顶层先声明 Provier 组件，并声明 value 属性，接着在后代组件中声明 Consumer 组件，这个 Consumer 子组件，只能是唯一的一个函数，函数参数即是 Cont…"}, {"id": "6844903592835432455", "title": "React 应用设计之道 - curry 化妙用", "desc": "使用 React 开发应用，给予了前端工程师无限“组合拼装”快感。但在此基础上，组件如何划分，数据如何流转等应用设计都决定了代码层面的美感和强健性。 同时，在 React 世界里提到 curry 化，也许很多开发者会第一时间反应出 React-redux 库的 connect …"}, {"id": "6966067460755685406", "title": "React：浅谈谈 JSX ", "desc": "JSX 可能会使人联想到模板语言，但它却是一颗语法糖。在 React 中配合使用，可以很好地描述 UI 应该呈现出它应有交互的本质形式。"}, {"id": "6844903561390718990", "title": "React编程思想", "desc": "能够按照构建的方式来思考web app的实现，是React众多优点之一。在这篇文章中，我们将引导你进行使用React构建可搜索产品数据表的思考过程。 想象一下，我们已经有了一个JSON API和来自设计师的设计稿。如下图所示： 我们要做的第一件事就是给设计稿中的每个组件（和子组…"}, {"id": "6844904070453395469", "title": "React.forwardRef的应用场景及源码解析", "desc": "ref 的作用是获取实例，可能是 DOM 实例，也可能是 ClassComponent 的实例。 React.forwardRef存在的意义就是为了解决以上问题。"}, {"id": "6984770548073299976", "title": "React源码学习系列（一）", "desc": "本文记录一些react17.0.2源码学习过程中的一些知识。 入口目录 react-main packages react index.js 1. React.Component 和 React.Pu"}, {"id": "6844903814286278670", "title": "react页面引导组件, 支持语音播报", "desc": "页面引导在用户第一次访问网站能过提供很好的提示, 下面介绍基于react写的一个页面引导的组件. <Guide/>组件还需要有: 遮罩层、提示框、内容区、语音功能, 4个部分. 提示框应该再遮罩层之上, 它的z-index大于遮罩层的.提示框还要考虑页面空余空间,确定摆放位置,…"}, {"id": "6844903736565825549", "title": "React 服务端渲染方案完美的解决方案", "desc": "最近在开发一个服务端渲染工具，通过一篇小文大致介绍下服务端渲染，和服务端渲染的方式方法。在此文后面有两中服务端渲染方式的构思，根据你对服务端渲染的利弊权衡，你会选择哪一种服务端渲染方式呢？ 使用 React 构建客户端应用程序，默认情况下，可以在浏览器中输出 React 组件，…"}, {"id": "6844903641699057671", "title": "手把手教你用vue搭建个人站", "desc": "其实一个最简单的个人站，就是许多的HTML页面，你只要可以用HTML写出来就可以，然后挂到Github pages上。但这并不是我想要的。 也有许多的人会选择用Vuepress，Hexo，Wordpress，Jekyll等等这样的博客框架来搭建自己的博客，我也都尝试过，有很多的…"}, {"id": "6844903625467265032", "title": "微信公众号-- 微信分享功能（分享到朋友和朋友圈显示图片和简介）", "desc": "并没有什么效果，原因：微信对自定义分享内容作了限制，最终还是要依靠配置wx.config。"}, {"id": "6844903697743347719", "title": "让react用起来更得心应手——（react-router原理简析）", "desc": "前台路由:页面的显示由前台js控制，在url的路径中输入哈希值是不会往后台发送请求的，所以前台可以通过将哈希和页面进行映射从而控制渲染显示哪个页面。 但是这种方法有一个问题，如果再按一次回车键，它是会向后台发送请求的，如果后台路由没有相应的匹配，那么会报404的错误，一般需要后…"}, {"id": "6844903623810383885", "title": "[译] Airbnb 在 React Native 上下的赌注（一）：概述", "desc": "在 2016 年，我们在 React Native 下了一个大赌注。两年后，我们准备与大家分享我们的经验并说明接下来的计划。 这是我们系列博客文章中的第一篇，其中概述了我们在 React Native 这方面的经验以及 Airbnb 移动端以后会发展成什么样子。 当 Airbn…"}, {"id": "6893667742063460365", "title": "SSR 与当年的 JSP、PHP 有什么区别？", "desc": "两种资源分开部署，把静态资源部署至 Web 服务器或 CDN，应用服务器只部署动态资源。如此这般，静态资源响应更快了（浏览器缓存、CDN 加速），应用服务器压力更小了，皆大欢喜 也就是说，HTML 视图结构的创建和维护工作，可以由服务端完成，也可以在客户端完成，都依赖服务数据。…"}, {"id": "6844903865913966600", "title": "React Hook 实践小结", "desc": "hello~亲爱的观众老爷们大家好~最近负责重构某个内部系统，既然是内部系统，那当然可以尽情搞事情，分析需求后决定采用 React 最新版本进行重构。既然是最新的版本，那当然是使用 Hooks 进行开发了。开发的过程并非一帆风顺，但也算是踩过不少坑也重新爬出来了，小结后有了这篇…"}, {"id": "6844903809232158734", "title": "基于React.Suspense和React.lazy的前端性能优化", "desc": "React16.6于2018年10月份发布，该版本带来了许多新的特性同时赋予给React更强大的功能。其中最为显著的两个特性是 React.Suspense和 React.lazy。这两个特性，将React的代码分割和懒加载带到了一个新的高度。使用这两个特性，你可以做到的是在真…"}, {"id": "6844903913422848008", "title": "当 Kotlin 爱上 React， 会发生什么反应", "desc": "说起 Kotlin，听说过的大部人第一反应是一门开发 Android 的语言。不得不说 Google 对 Kotlin 的宣传远远的大于了 Kotlin 的创始公司 Jetbrains 。 Kotlin 不仅仅是能写Android，而且可以写服务端，可以说只要可以写Java的地…"}, {"id": "6936113538238775333", "title": "前端典型面试题：为什么 React 选择使用 JSX ？", "desc": "之前在《从理解React框架开始，开启金三银四面试之旅。》中说过，对React框架的理解是我们对日常工作、技术的探索和总结。打好了地基，接下来我们用一个具体的面试问题“为什么React选择使用JSX？"}, {"id": "6844903713975304199", "title": "抛开 Vue、React、JQuery 这类第三方js，我们该怎么写代码？", "desc": " "}, {"id": "6844903766030827534", "title": "结合具体场景，聊聊 React 的状态管理方案", "desc": "1. 引子 虽然 React 的状态管理是一个老生常谈的问题，网上和社区中也能搜到相当多的资料。这里还是想梳理下从我接触 React 开始到现在对状态管理的一些感想。 所有的新技术的出现和流行都是为了解决特定的场景问题，这里也会以一个非常简单的例子作为我们故事的开始。 上述的场…"}, {"id": "6906384065331462158", "title": "React使用Quill 富文本自定义格式刷功能&复制图片&采坑", "desc": "原文地址由于业务功能，需要实现当用户在富文本里进行可以格式化操作，内容粘贴操作的时候，如果用户复制的是图片，需要将图片上传服务器后，插入到文本内；看似合情合理的要求，却有很多坑。开始使用安装react"}, {"id": "6908885098699948040", "title": "移动端input“输入框”常见问题及解决方法", "desc": "在移动端文本框存在这各种各有的问题，不是跑偏找不到自己的位置就是失去了焦点软键盘回不去，奇奇怪怪的问题总是让人头疼，痛一次就算了，不能次次痛啊，那我就来总结一下，希望能够帮助到你我他 1. ios中，"}, {"id": "6844903535440560141", "title": "从时间旅行的乌托邦，看状态管理的设计误区", "desc": "Redux 的状态管理理念非常优雅，随之附带的时间旅行调试支持也非常酷炫。但这个特性是否是传说中的银弹，又会给使用者带来什么额外的负担呢？让我们重新思考一下吧。 在 2015 年的 React Europe 会议上，Dan Abramov 展示了通过 Redux DevTool…"}, {"id": "6948233242981957640", "title": "「超详细React项目搭建教程六」集成 Redux/Typescript", "desc": "话说实践出真知,下面我们通过 Redux 实现一个用户名的添加和删除。以便加深我们对 Redux 的理解 状态我们尽量简化，因为我们主要专注于 Redux Store 以及 React 组件如何以强类型的方式进行交互。 注意，我们没有给payload 明确类型，因为 actio…"}, {"id": "6844903975276249095", "title": "基于create-react-app打包编译自己的第三方UI组件库并发布到npm", "desc": "这篇文章主要是总结一下我们在工作中如何为公司开发内部的第三方UI组件，并通过npm install的方式安装的一些步骤和思路。在学习完这套发布方法后大家也可以快速的发布自己的UI库到npm，供他人使用，就比如elementUI或者Ant Design。 此时我们就可以用npm …"}, {"id": "6988413561168986125", "title": "React 源码之状态更新（二）", "desc": "渲染及更新 经过前面这么多章的铺垫，今天我们终于可以看看React的起点ReactDOM.render，在React18之前这是唯一入口函数，在React18中新增了createRoot().rend"}, {"id": "6844904037876236296", "title": "React Router v5.1.x中的新功能", "desc": "useParams可以帮助我们。在各层组件中，轻松访问router的params参数。 在V5.1版本之前，我们需要通过props.match获取路由参数。对于更深层的组件还需要使用高阶组件withRouter。 在V5.1版本中，由于useParams的引入，我们可以轻松获取…"}, {"id": "6991831893012381704", "title": "React Hooks原理与实践", "desc": "什么是React Hooks？ 首先需要了解react组件的概念 react组件分为以下几种： 1、功能组件（无状态组件） Functional (Stateless) Component，功能组件也"}, {"id": "6859354172127936526", "title": "（上）手摸手教你大厂都在用 React+TS+Antd 快速入门到NodeJS全栈项目实战（附源码）", "desc": "React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。 单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。 React 本身没有全家桶，只做UI界面。 提供了无缝切换到 React Nati…"}, {"id": "6898292945867571207", "title": "手写React核心原理，再也不怕面试官问我react原理", "desc": "1. 项目基本准备工作 以这样的方式使用ReactDOM，说明他有render这个方法。 好了，现在我们给每一个 元素打上 一个标记 ，这样的话 就可以通过这个标记 辨别出与其他 元素的关系，也可以直接通过这标记找到该元素了。 4. 重构render方法 默认传入的elemen…"}, {"id": "6998334684815949831", "title": "redux-saga英雄指南", "desc": "redux-saga redux-saga是什么，解决了什么痛点？什么是saga?什么是Effect？执行dispath(action)时，react-saga经历了什么过程？"}, {"id": "6967738672279994382", "title": "React17源码解读—— 事件系统", "desc": "读完本篇文章你将明白为什么是React的合成事件SyntheticEvent， 以及React如何模拟浏览器的捕获和冒泡。   在学习React的合成事件之前，我们先复习下浏览器的事件系统，以及代理委"}, {"id": "6968664212348338206", "title": "forwardRef和useImperativeHandle的使用", "desc": "forwardRef React.forwardRef字面意思理解为转发Ref，它会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。其主要作用是： 1.转发"}, {"id": "6847902224287285255", "title": "深入源码剖析componentWillXXX为什么UNSAFE", "desc": "从v16.3.0开始如下三个生命周期钩子被标记为UNSAFE。 这三个钩子经常被错误使用，并且现在出现了更好的替代方案（这里指新增的getDerivedStateFromProps与getSnapshotBeforeUpdate）。 React从Legacy模式迁移到Concu…"}, {"id": "6998462438781747236", "title": "[译]如何使用React hooks构建音频播放器", "desc": "前言 今天我们将使用HTMLAudioElement接口构建一个基本的React音频播放器组件。这个播放器拥有播放列表，可以暂停、滑动、跳转到上一首或下一首曲目。而且每首曲子都具有不同的动画背景颜色。"}, {"id": "6854573219127492622", "title": "React学习—React漫谈", "desc": "React基于Virtual DOM实现了一个SyntheticEvent(合成事件)层，我们定义的处理器会接收一个SyntheticEvent对象的实例，它完全符合W3C标准，不会存在任何IE的兼容性问题。并且与原生的浏览器事件一样拥有同样的接口，同样支持事件的冒泡机制，我门…"}, {"id": "6888262631360135175", "title": "【译】值得推荐的十大React Hook 库", "desc": "React Hook来了，并在暴风雨中占领了React社区。自最初发布以来已经有一段时间了，这意味着有很多支持库。在搜索与React相关的内容时，很难不看到“ hook”这个词语。如果你还没有遇到的话，应该尽快将它们加入代码库学习起来。它们将使您的编码生活变得更加轻松和愉快。 …"}, {"id": "6844903711685214222", "title": "精读《React Hooks》", "desc": "React Hooks 是 React 16.7.0-alpha 版本推出的新特性，想尝试的同学安装此版本即可。 React Hooks 要解决的问题是状态共享，是继 render-props 和 higher-order components 之后的第三种状态共享方案，不会产…"}, {"id": "6995446514881396773", "title": "【React】Antd4.x 优化 按需引用、自定义主题", "desc": "引言 在antd4.x的文档中，只提及了如何进行自定义主题，在3.x的文档中提到了可以用react-app-rewired这个包修改react的默认配置的方式配合babel-plugin-import"}, {"id": "6844903562095362056", "title": "你需要Mobx还是Redux？", "desc": "在过去一年，越来越多的项目继续或者开始使用React和Redux开发，这是目前前端业内很普遍的一种前端项目解决方案，但是随着开发项目越来越多，越来越多样化时，个人又有了不同的感受和想法。是不是因为已经有了一个比较普遍的，熟悉的项目技术栈，我们就一直完全沿用呢，有没有比他更适合的…"}, {"id": "6844903858662014983", "title": "深入浅出 React Hooks", "desc": "Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。 假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解…"}, {"id": "7005136884187791391", "title": "React进阶初探01--高阶组件", "desc": "从0开始学React。阅读React官方文档中关于 高阶组件 部分的内容，对其中部分概念的记录笔记和个人理解"}, {"id": "6978377073735761934", "title": "你真的了解React Hooks吗?", "desc": "你真的了解React Hooks吗? ReactHooks从发布到现在也已经有年头了, 它的发布确实带来了很多革命性的变化, 比如大家更频繁的使用了functional component, 甚至以前"}, {"id": "6862493682252283912", "title": "React 17 要来了，非常特别的一版", "desc": "在 v17 之前，不同版本的 React 无法混用（事件系统会出问题），所以，开发者要么沿用旧版本，要么花大力气整个升级到新版本，甚至一些常年没有需求的长尾模块也要整体适配、回归测试。考虑到开发者的升级适配成本，React 维护团队同样束手束脚，废弃 API 不敢轻易下掉，要么…"}, {"id": "6995469771219156999", "title": "React 组件的性能优化", "desc": "1、组件卸载前进行把定时器清理工作 2、通过memo 保证子组件数据没有更新的情况下，不随着父组件的状态更新。可以传入第二个参数，自定义比较逻辑。 3、使用组件懒加载，减少bundle 体积大小，优化"}, {"id": "6945015156933918734", "title": "最受欢迎的5个React动画库", "desc": "React是用于构建用户界面的库。对于React前端开发人员而言，从动画文本或图像到复杂的3D动画，在网页上实现动画是您日常工作不可或缺的一部分。动画可以在构建React应用程序时帮助改善整体用户体验。 在本文中，我们将比较排名前五的5个React动画库，并对每个库的流行度，开…"}, {"id": "6955285122463563813", "title": "React#31 error，让我熬夜让我秃", "desc": "记录一个让人头秃的bug的解决过程。没有夜生活全拜这个bug所赐。。。。。。。。。。。。。。。。。。。。"}, {"id": "6844904129769242632", "title": "从零搭建中后台框架的核心流程", "desc": "随着 React 生态的快速发展，社区基于 React 的状态管理方案层出不穷，这意味着很多方案开发者依然要做很多选择，没有约定的团队，沟通成本和跨团队协作成本，以及长期的维护是非常高的，这时候统一一套开发模式就显得尤为重要。 本文将介绍如何从零开始搭建一个高可复用的后台框架，…"}, {"id": "6970948874240262180", "title": "细说react useEffect闭包陷阱", "desc": "一段因为useEffect导致的闭包问题代码，useEffect的依赖项数组为空，其内部注册一个点击事件，该点击事件的回调函数会产生闭包问题"}, {"id": "6943491898606616590", "title": "如何利用 console 输出有助于调试问题的日志?", "desc": "在我设计 structured-react-hook 的时候我就想要实现一款具有实际使用价值的 logger 插件, 这个想法最早来自于 redux-logger. 但 redux-logger 只能输出通过 action 触发的一些状态变更, 在实际开发中, 状态是一个应用的…"}, {"id": "6999463624125218830", "title": "掘金小册8月系列直播第四期 ｜ 系统学习React，怎么做最高效？", "desc": "React 是当前非常流行的用于构建用户界面的 JavaScript 库，也是目前最受欢迎的 Web 界面开发工具之一。那么，想要系统学习React，怎么做才最高效呢？"}, {"id": "6924232276012171272", "title": "使用 Structured-React-Hook 编写\"真 ` 易于维护和扩展\"的组件(一)", "desc": "在我的前两篇文章中, 提到了解决组件扩展性的第三条路线, 有别于当下标准件封装和 CV 大法的新思路. 我将在本文聚焦于这第三条路线. 小明是一个雄心勃勃刚刚入行满 1 年的前端工程师, 虽然经验不多, 但是他已经成为了他所在的团队的核心人物. 某日小明接到一个需求, 需要开发…"}, {"id": "7000930607958065182", "title": "react源码解析之Component和PureComponent", "desc": "在react v16.8.0版本之前，我们总是习惯大多数的使用 React.Component 来创建一个组件，那么 React.Component 是怎么来的呢？"}, {"id": "6932278035831848974", "title": "2021 年你应该使用的 9 个 React Hook 的库", "desc": "Hooks 在刚发布的时候就迅速占领了 React 社区，而且它现在已经有了很多支持 Hook 的库。如果你在搜索引擎中搜索 React，已经很难不出现 Hook 这个关键字了。如果你现在还没有使用 Hook，你要抓紧在你的项目代码中加入 hook了，因为它实在是可以让你的编程…"}, {"id": "6981742595802136583", "title": " 🍟React 知识体系之 JSX", "desc": "在日常的 React 开发工作中，我们已经习惯了使用 JSX 来描述 React 的组件内容。关于 JSX 语法本身，相信每位 React 开发者都不陌生 JSX 到底是什么 JSX 到底是什么，我们"}, {"id": "6844903998139400200", "title": "Redux + React-router 的入门📖和配置👩🏾‍💻教程", "desc": "React 是单向数据流，数据通过 props 从父节点传递到子节点。如果顶层的某个 props 改变了， React 会重新渲染所有的子节点。注意⚠️：props 是只读的（即不可以使用 this.props 直接修改 props），它是用于在整个组件树中传递数据和配置。 每…"}, {"id": "6985132798541561869", "title": "我给 react-use 贡献了一个 useHash", "desc": "在基于 hash 模式的web单页应用中，经常需要读写 hash 中的查询参数，例如从 hash 查询参数中读取商品ID。在 React 应用中，如果直接解析`window.location.hash"}, {"id": "6998161726852038687", "title": "【📔 前端小笔记】在React工程中食用Jest单测能力", "desc": "本文简单介绍了Jest测试框架在React工程中的使用，辅以一些问题的探索和插件推荐，欢迎大家食用 👏～"}, {"id": "6981711232470515725", "title": "两种 JavaScript 时间分片技术", "desc": "React Fiber 的出现，在前端社群普及了时间分片的计算优化技术。我曾试着去学习 Fiber 的源码实现，然而最终得到的结论是这个技术只有在面试的时候应付面试官刁难有用，其对于日常开发，甚至是熟"}, {"id": "6967615162048053256", "title": "Fiber实现原理解析", "desc": "Fiber是React实现更新的新算法，React16之前的版本比对更新虚拟DOM的过程是采用循环递归方式来实现的，这种比对方式有一个问题，就是一旦任务开始进行就无法中断，如果应用中数组数量庞大，主线"}, {"id": "6977560604571598861", "title": "技术期刊 · 天生江水向东流 | 深入 React 18 工作组;Google 出品的 CSS 课程;轻量级 Postman 工具;十分钟弄懂用户画像", "desc": "蒲公英 · JELLY技术期刊 Vol.41 观海志 Google 出品的 CSS 课程 梗概：本课程将系统地介绍 CSS 基础，适用于初学者和高阶开发人员，通过学习课程的各个模块，您将会了解 CSS"}, {"id": "6991863591750074376", "title": "react-从零开始搭建项目-webpack-dev-server", "desc": "上一篇 react-从零开始搭建项目-webpack配置 前言 上一篇我们简单打包了一个使用了import及JSX语法的react组件并取得了成功，这一篇我们主要来解决一下以下这个问题： 为什么用cr"}, {"id": "7002027649673789453", "title": "React Fiber的出现", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 🥸问题 JavaScript 引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待 如果 JavaScript"}, {"id": "6864843574148923406", "title": "分享我的 ToyReact 学习与实现", "desc": "本篇文章适合使用React一年左右的小伙伴阅读。我希望它可以作为一把开启React源码大门的钥匙。我将会从搭建环境开始, 一步一步带着大家完成一个简易的React框架。代码我将会托管到我的github上, 供大家在阅读的过程中作为参考。 为了更加直观的展示效果, 我们可以将打包…"}, {"id": "6844903714591866894", "title": "优雅的在 react 中使用 TypeScript", "desc": "react中的组件从定义方式上来说，分为类组件和函数式组件。 这是因为我们使用 class properties 语法对state做初始化时，会覆盖掉Component<P, S>中对state的readonly标识。 是的。只要在组件内部使用了props和state，就需要在…"}, {"id": "6844903569611554823", "title": "使用css实现任意大小，任意方向， 任意角度的箭头", "desc": "，右侧箭头 这样的箭头。 一般用css来实现： 因为这是利用div的border-top, border-right，然后通过旋转div来实现的。 这里有个问题： 假如需要一个角度为120度的箭头怎么办呢？ 由于border-top, border-right一直是90度， 所…"}, {"id": "6844903748641226759", "title": "MobX - 基于响应式的状态管理", "desc": "MobX 是 Redux 之后的一个状态管理库，它相较于 redux 更轻量，整体是一个观察者模式的架构，存储 state 的 store 是被观察者，使用 store 的组件是观察者。MobX 可以有多个 store 对象，并且 store 使用的 state 是可以改变的。…"}, {"id": "6942668198646906917", "title": "react 实时获取元素动态宽高", "desc": "相关知识链接：ResizeObservergetBoundingClientRectreact-hooksExample自定义 hooks组件部分应用"}, {"id": "6844903636141621255", "title": "骚年，来一起聊聊React Portals吧", "desc": "先还原一下产品需求吧。 在这个功能模块中，A组件控制第一级tabs的展示，B组件控制第二级tabs的展示，C组件负责展示当前激活的tab内容；点击组件C中的标题列表的某一项（如左图所示），即在这个模块中展开右图的列表详情D。且该详情D会在此模块中撑满宽高显示。 组件C的大概结构…"}, {"id": "6978763425312669726", "title": "Antd+braft-editor实现动态增减富文本", "desc": "本文将介绍在React项目中基于Antd的Form去使用Braft-editor实现富文本的动态新增和删除。"}, {"id": "6844904105471655949", "title": "useState源码解析", "desc": "可以看到这个dispatch就是dispatchAction绑定了对应的Fiber和queue。最后return： 他们基本的操作是一致的，就是根据render和update.action来创建新的state，并赋值给Hook.memoizedState以及Hook.baseS…"}, {"id": "6844903721042870286", "title": "webpack性能优化(上)", "desc": "通常我们的项目会有开发环境和生产环境，而开发环境我们配置的目标是构建更快，模块热替换，能从chrome控制台报错信息对应的源码的错误处(source map)等。生产环境我们更加关注chunk分离，缓存，安全，tree shaking等优化点。 当然对于开发和生产环境的配置文件…"}, {"id": "6844903670572662797", "title": "开源｜蚂蚁金服 AntV G6 2.1：一路伴你同行", "desc": "AntV 是蚂蚁金服全新一代数据可视化解决方案，主要子产品包括 G2、G6、F2。此前我们已经相继发布过AntV的相关开源消息与版本迭代，包括《开源|蚂蚁金服开源AntV F2：一个专注于移动，开箱即用的可视化解决方案》、《蚂蚁金服开源：数据驱动的高交互可视化图形语法G2》，《…"}, {"id": "6844903977243377677", "title": "换个角度，结合高阶函数聊聊React的useMemo和useCallback", "desc": "useCallback和useMemo是其中的两个 hooks，本文旨在通过解决一个需求，结合高阶函数，深入理解useCallback和useMemo的用法和使用场景。 之所以会把这两个 hooks 放到一起说，是因为他们的主要作用都是性能优化，且使用useMemo可以实现us…"}, {"id": "6954748214062874631", "title": "React 中 ref 的常用方式", "desc": "1.refs 是什么？refs的常用的使用方式；refs createRef，useRef的使用方式"}, {"id": "6906011163516272653", "title": "【React全解2】React生命周期函数含义及使用", "desc": "将newState的每个属性和this.state作对比，某个不等就更新，否则不更新。 React.PureComponent:这个是上面自己判断是否要更新的语法糖，如果继承的是 React.PureComponent 而不是 React.Component。那么它会自己判断是…"}, {"id": "6844903924076396557", "title": "React源码解析之Update和UpdateQueue", "desc": "一、Update位置：Update位置如下（详情请看React源码解析之ReactDOM.render()）：updateContainer()—>updateContainerAtExpiratio"}, {"id": "6931187032857575438", "title": "「Tips」副作用与位运算", "desc": "最近在看这篇文章，从文章中了解到在Fiber节点中，与Fiber节点关联的effects，被编码在节点的effectTag字段之中。但是一个组件可能有多个副作用，那么React是如何通过一个字段判断要执行多个副作用的呢？ effectTag默认值是0。在updateClassI…"}, {"id": "6844904160907755527", "title": "React进阶(6)-react-redux的使用", "desc": "总之：UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。 如果一个组件既有 UI 又有业务逻辑，那怎么办？可以将它拆分成下面的结构：外面是一个容器组件，里面包了一个UI 组件。前者负责与外部的通信，将数据传给后者，由后者渲染出视图。 这也是之前我们将todolist组件…"}, {"id": "6844903598648721421", "title": "React Native日期时间选择组件", "desc": "本次示例代码在 Component11文件夹中。请不要吝啬你们的Star！ 微信不让跳转外链，可以点击查看原文来查看外链GitHub内容。"}, {"id": "6896712959389597703", "title": "React使用useEffect与useLayoutEffect的区别", "desc": "useEffect是每次render之后就会调用的函数，可以代替之前的三个钩子useEffect可以接受两个参数案例要想知道+1操作这个app什么时候第一次渲染，可以使用useEffect,第二个参数"}, {"id": "6844903624884109325", "title": "Redux-saga-整理", "desc": "takeEvery 允许多个 fetchData 实例同时启动, 在某个特定时刻, 尽管之前还有一个或多个fetchData尚未结束, 我们还是可以启动一个新的fetchData任务-->意思就是只用调用了 FETCH_REQUESTED action的时候就会启动 fetch…"}, {"id": "6971322042280837151", "title": "React 和他的朋友们 Webpack(1)", "desc": "webpack 在 webpack 中，将所有类型文件都视为模块，然后使用不同模块加载器进行加载不同类型文件。 构建工具的历史 最开始用的工具是 grunt，配置起来稍微复杂，构建起来需要一定时间，他"}, {"id": "6844903911732543495", "title": "React SPA 应用 hash 路由如何使用锚点", "desc": "当我们在做 SPA 应用的时候，为了兼容老的浏览器（如IE9）我们不得不放弃 HTML5 browser history api 而只能采用 hash 路由的这种形式来实现前端路由，但是因为 hash 被路由占据了，导致本来不是问题的锚点功能却成了一个不大不小的问题。 经过我自…"}, {"id": "6974751900163899422", "title": "Ref在React中的交叉用法", "desc": "首先说明下什么是Ref Ref 转发是一项将 ref 自动地通过组件传递到其一子组件的技巧。对于大多数应用中的组件来说，这通常不是必需的。但其对某些组件，尤其是可重用的组件库是很有用的 ref在hoo"}, {"id": "6844903747928195079", "title": "[译] 5 款工具助力 React 快速开发", "desc": "本文将会介绍 5 款工具，可加速 React UI 组件和应用程序的开发工作。 React 非常适合快速开发具有出色的交互式 UI 的应用程序。React 组件是创建用于开发不同应用的隔离的、可复用的模块的很棒的方法。。 虽然一些最佳实践有助于开发更好的应用程序，但正确的工具可…"}, {"id": "6844903598120239118", "title": "包教包会Redux", "desc": "这是一个计数器，点击按钮，可以让数字加一或者减一。两个按钮在Counter组件里，显示数字的在Number组件里。 首先分析这个需求，点击button，改变数字，Number组件重新渲染。 可抽象为，派发一个动作，改变状态，执行方法。 store是个对象，负责提供getStat…"}, {"id": "6992935103286640671", "title": "【Rematch 源码系列】三、Plugin factory 和 core plugins", "desc": "上篇介绍了 rematch core，这篇文章来详细介绍一下 rematch 的插件机制以及两个核心插件"}, {"id": "6844904004678336526", "title": "前端知识库Reactjs基础系列四react-router", "desc": "在开发spa项目中，前端路由是一个无法绕开的技术，在整个spa前端架构中我觉的掌握前端路由配置，状态管理以及异步请求的封装是最基本的能力。本文主要介绍react-router对于react项目的作用，以及基本配置。 React Router 是完整的 React 路由解决方案。…"}, {"id": "6871940895470518279", "title": "探索 React Hooks底层设计", "desc": "在React16之前，大家写的都是ClassComponent，所有的函数式组件都是纯函数，并没有自己的一份状态，只可以通过 props ，在React16后，React官方推出了 Fiber 架构以及 Hooks，Hooks增强了函数式组件，再也不是纯函数了，组件可以管理一份…"}, {"id": "6844903802194100238", "title": "不了解一下React16.3的新生命周期？", "desc": "React16.3.0开始，生命周期进行了一些变化。本文主要介绍React16.3.0之后的生命周期。 16版本之前的react组件的生命周期相信大家已经很熟悉。16版本的react对组件的生命周期函数进行了一些修改,下面进行详细说明。 constructor生命周期，如不需要…"}, {"id": "6844903748339236878", "title": "Webnovel 国际化实践", "desc": "Webnovel（起点海外项目）在今年开始了国际化的脚步，在刚刚上线的版本当中加入了对印尼、马来西亚和菲律宾语言及内容的支持。在做国际化的过程中，我们遇到了不少问题，这篇文章就重点分享一下这些问题以及它们的解决方案。 在开始之前，我们先明确两个概念： 国际化和本地化。国际化（i…"}, {"id": "6844904133019828231", "title": "React setState是同步还是异步的", "desc": "setTimeout和原生事件中，可以立即拿到更新结果。也就是同步 在合成事件和生命周期中，不能立即拿到更新结果。也就是所谓的“异步” 究竟是同步更新还是异步更新，取决于代码的执行环境。React定义了一个内部变量executionContext(默认为NoContext)，在…"}, {"id": "6904563143612039176", "title": "React类组件基础02-组件间通信和生命周期", "desc": "如果不借助第三方库，原生react是只支持单向流动：父级可以向子级通过props的方式发送state和回调函数，而子级不能向父级发送事件或者修改父级的props。所以如果子级想要修改父级组件的状态（也就是数据），只可以通过父级传递下来的回调函数进行执行。 借助上一篇笔记中最后写…"}, {"id": "6844903700855521293", "title": "React 单元测试策略及落地 #一篇就够系列", "desc": "写好的单元测试，对开发速度、项目维护有莫大的帮助。前端的测试工具一直推陈出新，而测试的核心、原则却少有变化。与产品代码一并交付可靠的测试代码，是每个专业开发者应该不断靠近的一个理想之地。本文就围绕测试讲讲，为什么我们要做测试，什么是好的测试和原则，以及如何在一个 React 项…"}, {"id": "6919348248943542285", "title": "从源码解析react合成事件如何阻止事件传播", "desc": "最近一直在看react、reactDom源码，深深被Facebook这群大佬所折服。在这个过程中，不仅是学习了react源码，更是对js有了全新的认识，以至于会产生JavaScript还可以这样写的感慨。 。 然后最近去面了一家公司，面试官问了我一个问题，react如何阻止事件…"}, {"id": "6844903842237120520", "title": "揭开Redux神秘面纱：手写一个min-Redux", "desc": "react和状态管理redux是紧密结合的，而本身又没有任何联系。react可以不使用redux管理状态，redux也可以脱离react独立存在。随着react的项目越来越复杂，state变的繁重，各种prop和state的转变让我们在开发过程中变得头晕眼花，react本来就是…"}, {"id": "6844903736335138830", "title": "【译】为何我们要写super(props)？", "desc": "我听说现在Hooks是新的热点。讽刺地是，我想描述类的相关事实作为这片博客的开始。那是怎么样的呢？ 这些坑对于有效地使用React并不重要。但如果你想更深入地了解事物的工作原理，你可能会发现它们很有趣。 这是第一个。 2015年React 0.13增加了对纯类的支持时，就计划了…"}, {"id": "6908717268943765517", "title": "如何理解react中的setState一定要用不可变值?", "desc": "this.setState是class组件一个重要的概念，他并不在函数组件中，因为函数组件根本没有this我们直接进入正题为什么说setState一定要用不可变值？可能很小伙伴不理解，什么是不可变值？"}, {"id": "6844903935585550343", "title": "React前端项目国际化", "desc": "最近公司项目做国际化，需要至少支持英语和中文两种语言。希望在改动最小的情况下完成任务，尽量避免二次开发。经过调研+实际验证，成功达到目标，写这篇文章记录下我的实现过程。 公司项目用的React，因此初始选择的React-intl。这个库提供React组件和API来格式化日期、数…"}, {"id": "6850037266762039304", "title": "styled-components, 这次一定会！", "desc": "styled-components,这次一定会！产生原因用js写所有的趋势react致力于用js写所有html以及逻辑相关的代码部分，既然如此，何不用js写css控制组件样式呢？styled-comp"}, {"id": "6844903537592238088", "title": "React16+Redux+Router4+Koa+Webpack服务器端渲染（按需加载，热更新）", "desc": "开发环境使用webpack-dev-server做后端服务器，实现不刷新页面的热更新，包括组件和reducer变动的热更新。 生产环境使用koa做后端服务器，与前端公用createApp代码，打包后通过读取文件获得createApp的方法，然后通过react-loadable按…"}, {"id": "6844904159917916174", "title": "recoiljs 快速入手后总结", "desc": "fb 针对 react 新出的状态管理框架， 大概瞄了一下，按照官网的说法，是小、更加Reactish，最重要的是 不破坏 code-splitting，为什么不用 provider 呢，粗粒问题， 这些细节还没深入去看，现在先简单说下怎么入手。 上面是官网的解释，可以认为是衍…"}, {"id": "6844904021820440590", "title": "Form使用总结", "desc": "中后台领域中，数据录入是一个重要的场景，在该场景中form（表单）扮演一个重要的角色。表单中涉及到大量的交互，主要表现在以下几个方面： ... 我们从一个简单登录页的例子说起，来总结form是如何使用的。 我们直接使用react的受控组件模式，对每个输入项的状态保存在组件sta…"}, {"id": "6844903662205009934", "title": "小邵教你玩转Generator+co/async await", "desc": "Generator是一个生成器，生成出一个迭代器，主要是用来控制异步流程的，目前在现有的库中还是比较少看到generator的，目前主要使用generator的是redux-saga这个库，koa1.0也是用generator，但是现在都改为async/await。 那么下面我…"}, {"id": "6986597522248728584", "title": "给antd的Table组件添加总计和平均值", "desc": "前言 遇到一个需求，应该挺常见但是我却没怎么遇到，也费了不少功夫也解决，记录一下。 需求很简单，是个后台管理系统项目，要做个表格，（什么，这么简单，直接组件库里面复制一下Tabel不就完事了) 哈哈，"}, {"id": "6908731502557659149", "title": "React状态管理：从Context API到Recoil", "desc": "上面的写法使得组件之间耦合非常强，一旦组件结构需要发生变化，则需要大幅修改传递逻辑，灵活性和可维护性都十分低。此外，由于将 state 提升到了”全局“，那么当 state 改变后，所有的子组件，包括一些以前并没用到这些 state 的组件也要跟着 re-render，若子组件…"}, {"id": "6908300336629284872", "title": "一个 React 项目多个 Layout ", "desc": "熟悉 React 的同学可能都知道，在单页应用 (SPA：single-page application) 项目中，默认只有一个入口文件。为了更友好的 SEO 和首次页面渲染的效率，我们一般会选择服务端渲染（SSR：server side render）方案。当下最流行的 SS…"}, {"id": "6844904149834792973", "title": "react-router实现按需加载", "desc": "chunkhash是文件的hash码，因为hash码比较长，所以这里只取前五位。 我们需要让路由动态加载组件，需要将 component 换成 getComponent。首先将路由拆出来，创建一个根路由 rootRoute： 对应于以前的 component 属性，但是这个方法…"}, {"id": "6844903856690724872", "title": "谈谈React虚拟DOM和diff算法", "desc": "以上3种方式都是使用原生DOM API，都可以实现效果，但是性能上会存在差异。造成差异的原因多种多样，可能取决于元素类型，列表长度，甚至浏览器版本（万恶的IE）。因此应当根据当前环境灵活选用不同的DOM操作方式，但这无疑增加了开发难度，不利于工程师专注实现当前业务。 使用Rea…"}, {"id": "6877165871693987847", "title": "React.js |错误边界组件", "desc": "错误边界是一种 React 组件，可以捕获并打印发生在其子组件树任何位置的 JavaScript 错误，并且渲染出备用 UI。错误边界在渲染期间、生命周期和整个组件树的构造函数中捕获错误。 这是两种生命周期方法。只要class组件用了任意一种，那它就变成一个错误边界组件 你也可…"}, {"id": "6844903621096652807", "title": "深入理解 Redux 中间件", "desc": "最近几天对 redux 的中间件进行了一番梳理，又看了 redux-saga 的文档，和 redux-thunk 和 redux-promise 的源码，结合前段时间看的redux的源码的一些思考，感觉对 redux 中间件的有了更加深刻的认识，因此总结一下。 Redux本身就…"}, {"id": "6844904105895264270", "title": "记一次react前端项目打包优化", "desc": "前文分析通过控制台判断加载资源时间还有资源大小通过webpack-bundle-analyzer来分析主要是哪些模块过大优化优化echarts优化echarts相关代码优化src文件react-loa"}, {"id": "6844903808699662343", "title": "React状态管理大乱斗，横向对比Dva,Rematch,Mirror", "desc": "可能你会说，用 Class 呀，不喜欢，我喜欢 FP 风格。我想说，这是状态管理框架非 React UI 框架，不要为了流行 FP 就皆 FP，就象当年 JS 流行面向对象编程，把面向过程说成洪水猛兽。 还支持 SPA(单页) + SSR(服务器渲染)一键切换。 语法简洁性上，…"}, {"id": "6844903581435297806", "title": "React ref 指北教程", "desc": "React，Vue 等前端框架的出现之前 Web 页面交互完全依靠频繁的 Dom 操作实现，在那个刀耕火种的年代 Jquery 作为一个便捷的实现 Dom 操作的库便走上了神坛，成为了 Web 开发工程师必备技能。幸运的是 Web 2.0 时代，React 和 Vue 等前端框…"}, {"id": "6844903793981652999", "title": "一次完整的react hooks实践", "desc": "React在16.8版本正式发布了Hooks。关注了很久，最近正好有一个小需求，赶紧来试一下。 需求很简单，部门内部的一个数据查询小工具。大致长成下面这样： 用户首次访问页面，会拉取数据展示。输入筛选条件，点击查询后，会再次拉取数据在前端展示。 关于React hooks的相关…"}, {"id": "6940112080741597197", "title": "这是一篇写给初学者的 React 学习建议", "desc": "学习 React 可能是许多前端开发者今年的首要任务。在这篇文章中，我想给初学者一个全面的概述，告诉他们如何在不被其他技术栈干扰的情况下学习React。 学习是没有捷径的，你必须要有耐心，学习新知识是一种挑战，对于我而言，我是一名开发人员，总是有新的知识点需要我去学习。如果你想…"}, {"id": "6931717995576164365", "title": "深入浅出React-样式处理及组件通信", "desc": "所谓 css in js, 就是在 js 中写css. React是以组件组合的形式组织的。所以在嵌套关系上,就会有四种不同的可能性: 我们就常以 发布/订阅模式来举例子, 这里我们用 node.js Events模块来实现。 我们在处理事件的过程中需要注意, componen…"}, {"id": "6844903800671600653", "title": "【译】更好地设计 React 组件", "desc": "在我为一次会议准备技术演讲的过程中，我想花点时间和大家分享我在设计 React 组件模式上一些感悟。组件是 React 的核心，理解它对于设计一个良好的项目架构是十分重要的。 文中的图表是从一个非常棒的演讲（来自 Michael Chan）得到的。我强烈推荐去看他的视频 当你第…"}, {"id": "6895631964062580743", "title": "前端工程化-React 项目搭建", "desc": "以前写过一篇如何从零开始创建 React 项目（三种方式),但是介绍的不太详细,这次重新写一篇文章，从头介绍如何用最新版本的 webpack、babel 等各种工具来搭建一个 React 项目，同时对用的对每一个包都做一下简要介绍。 首先我们本地安装新建目录，初始化项目，同时安…"}, {"id": "6844904129798602765", "title": "在Fiber架构中，React为什么使用和如何使用单链表", "desc": "这篇文章主要是探索React reconciler的新实现-Fiber中的work loop。在文本中，我们对比和解释了【浏览器的call stack】和【React Fiber架构自己实现的stack】之间的不同。 为了自学和回馈社区，我花费了大量的时间去做web技术的逆向工…"}, {"id": "6870310874968489991", "title": "React Hooks学习总结", "desc": "首先，本文只是本人在学习react-hooks的知识汇总，个人描述偏少，借鉴的文章较多。所有参考的文章都在文末列出，如果看过本篇意犹未尽，可以具体阅读其他的参考文章。 大型组件很难拆分和重构，也很难测试。 业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。 组件类引入了…"}, {"id": "6844903709315432462", "title": "通过 recompose 实现 react router4 权限", "desc": "近期做了一个 spa的单独项目中,有个需求就是希望根据登录人来看下,这个人是不是有权限进入当前页面。虽然服务端做了进行接口的权限，但是每一个路由加载的时候,都要去请求这个接口太浪费了。 router 早期版本有进入路由的钩子函数可以实现这一点，但是 router4 去掉了采取了…"}, {"id": "6844903773094019080", "title": "详解从 0 发布 react 组件到 npm 上", "desc": "我发布了我的第一个 npm 组件，一个基于 react 的 3d 标签云组件。在这途中我也是遇到了很多的坑，花在完善整个发布流程的时间远多于写这个组件本身的时间，所以我记录下我觉得一个正常的 react 组件的发布流程 npm init 是生成初始的 package.json …"}, {"id": "6916795027515506695", "title": "【七日打卡】浅析如何兼容新旧版 React Context", "desc": "前段时间，由于需要封装一个类 v-model 的 React 组件，这个组件需要传 field 字段，此字段需要传入取值的字符串路径。此时，当在 input 中输入时，会同步修改数据源中 name；当修改数据源中 name 值时，也会同步到 input 组件。由于 div 内可…"}, {"id": "6921591003073740813", "title": "React16后一些重要的API和概念", "desc": "1. 组合和继承 React 有十分强大的组合模式。React推荐我们使用组合而非继承来实现组件间的代码重用。 通过 JSX 嵌套，实现组件之间的组合。 2. Context Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。 Co…"}, {"id": "6844904012911738894", "title": "帮你更好了解React---手写简版React", "desc": "1. 原生组件处理逻辑 2. function函数处理逻辑 3. class组件处理方法 4. 完整代码请前往https://github.com/XinYueXiao/wxy-react查看"}, {"id": "6844903698187943950", "title": "React 中执行 setState 时怎么保证你取到的上一次state是正确的？", "desc": "查阅资料发现，在多次调用setState（）时，React 并不会同步处理这些setState（）函数，而是做了一个“批处理”——如果使用对象作为参数传递给setState，React 会合并这些对象。 而同样的情况下，当你给setState（）传入一个函数时，这些函数将被放进…"}, {"id": "6844903890370953229", "title": "render、children、component傻傻分不清楚", "desc": "render属性能使你便捷的渲染内联组件或是嵌套组件，你可以给这个属性传入一个函数，当路由的路径匹配时调用。同时，render属性也会接受所有由route传入的所有参数。 children属性是这三个属性中比较特殊的一个，它的值为一个函数，当Route有children属性时，…"}, {"id": "6844903801913081864", "title": "React-代码复用(mixin.hoc.render props)", "desc": "以下是React官方的一个例子，我会采用不同的封装方法来尝试代码复用，例子地址。 组件在 React 是主要的代码复用单元，但如何共享状态或一个组件的行为封装到其他需要相同状态的组件中并不是很明了。 随着鼠标在屏幕上移动，在一个 p的组件上显示它的 (x, y) 坐标。 由于组…"}, {"id": "6874152374148005896", "title": "[Concent速成] (1) 定义和共享模块状态", "desc": "[Concent速成]是一个帮助新手极速入门concent的系列文章，0障碍地学习和理解concent状态管理思路。 虽然学习和使用过redux和mbox之类的状态管理库，阅读此篇文章会更容易理解，但是没有使用过任何状态管理库的用户也能极速入门concent，真正的0障碍学会使…"}, {"id": "6844903952262266888", "title": "react按需加载和ReactTransitionGroup页面过渡共同使用产生的问题", "desc": "1.react-router官网推荐使用的按需加载实现是loadable，测试后发现会出现白屏、无法跳转的情况，所以此处决定修改按需加载方案为React.lazy。 细心的你可能已经发现了，如果没有类似于vue的out-in这样的动画模式控制的话，过渡动画是只能同时执行，然后需…"}, {"id": "6844903735039131656", "title": "React（三）：受控组件与非受控组件", "desc": "在HTML当中，像<input>,<textarea>, 和 <select>这类表单元素会维持自身状态，并根据用户输入进行更新。但在React中，可变的状态通常保存在组件的状态属性中，并且只能用 setState() 方法进行更新。 我们通过使react变成一种单一数据源的状…"}, {"id": "6974925974886416420", "title": "react源码解析15.scheduler&Lane", "desc": "react源码解析15.scheduler&Lane 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.j"}, {"id": "6844903655695450126", "title": "详解Vue Native", "desc": "译者按： 一家叫GeekyAnts的印度公司开发了Vue Native，基于React Native实现。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 尽管整个JavaScript社区对Vue的情感是比较微妙的(不懂为啥)，但也不能阻止我…"}, {"id": "6981722921303539725", "title": "React项目实战（下）", "desc": "拉勾教育图书电商项目实战 - 下 构建首页搜索框布局 core文件夹新建搜索框组件 使用Form组件，组件内部有三个解构：选择分类、文本框、搜索按钮 设置表单为横向、默认选择分类、去除空隙 最后把搜索"}, {"id": "6844903740802072583", "title": "React全家桶+Koa+TS+mongoDB+Antd实现的简单TodoList", "desc": "源码地址,如果觉得还不错,欢迎star让我有更多动力来继续学习和分享预览效果写在开头的话WriteaTodoanddoitReactTypeScriptKoaMongoDBWebpackReact-R"}, {"id": "6844904194571239437", "title": "React Router源码分析", "desc": "发现react-route用Link或Push跳转时,没有刷新页面,但是Url变了，而且点击浏览器自动的返回按钮，Url变了但是页面不刷新，怎么做到的呢？于是本妹子就从这个方向研究了下react-route的源码，给小伙伴们分享下。 通过pushState来达到url变但页面不…"}, {"id": "6844903567304851470", "title": " React Native年度总结报告(2017-2018)", "desc": "在过去的一年中React Native经历了从v0.40到v0.52的十几次的版本迭代，我们看到在这十几次的版本迭代中React Native的组件库在不断地壮大，在新引进的组件中既有FlatList、SectionList等具有更高性能的列表组件，也有与时俱进的用于适配全屏幕…"}, {"id": "6844904015659008014", "title": "升级到 React Router 4 并实现动态加载和模块热替换", "desc": "项目中的 Route 使用了System.import(/* webpackChunkName: \"example\" */ './example.js)来实现模块的动态加载，也就是根据组件打包成多个 bundle，只有在点击到对应的 Route 时，这个 bundle 才会被加…"}, {"id": "6844903718417072142", "title": "React 16.x折腾记 - (7) 基于React+Antd封装聊天记录(用到React的memo,lazy, Suspense这些)", "desc": "一方面当做笔记,一方面可以给有需要的人; 有兴趣的小伙伴可以瞅瞅。 有不对之处请留言,会及时修正,谢谢阅读。"}, {"id": "6844903736351916046", "title": "创建 React 组件三种“姿势”", "desc": "React 世界中，组成一个页面的最小单元为一个个组件，很显然如何合理的创建它们是个非常关键的点。下面介绍一下我对三种创建组件方式的理解与总结。 当函数式的创建一个组件之后，显然它已经注定了没法再拥有自己的 State 了，只能 “无脑” 的去获取属性内容并展示，因为函数式组件…"}, {"id": "6844903854249607175", "title": "React16.8中关于children和render props的认知", "desc": "一、组件的创建方式 1、使用createClass方式创建(已经被淘汰了) 2、类组件 3、函数组件(比较推荐的方式) 二、组件的调用方式(使用children) 1、简单的引用 2、组件中传递htm"}, {"id": "6896774515406143501", "title": "useEffect", "desc": "可以在effect内部直接访问state变量、或者props，而不用添加特殊的api来读取它，state（props）已经保存在函数的作用域中。hooks引入了javascript的闭包机制。 每个effect函数都属于一次特定的渲染。 每次重新渲染都会生成新的effect，替…"}, {"id": "6951409325550075935", "title": "看一看antd 中 select/dropdown 等组件的下拉框", "desc": "项目中使用 select 组件，点击 select 出现下拉框的状态时，滑动页面下拉框不固定在 select 组件的下方。于是开始思考：antd 是怎么实现下拉框的，下拉框跟随滚动是怎么实现的？"}, {"id": "6844903549013327880", "title": "React 高阶组件介绍", "desc": "HoC 不属于 React 的 API，它是一种实现模式，本质上是一个函数，接受一个或多个 React 组件作为参数，返回一个全新的 React 组件，而不是改造现有的组件，这样的组件被称为高阶组件。开发过程中，有的功能需要在多个组件类复用时，这时可以创建一个 Hoc。 上述代…"}, {"id": "6962123373283377166", "title": "React Hooks学习笔记", "desc": "如果你和我一样都是React新手，相信这篇文章的内容可以帮助你学习React Hooks，详细介绍了每个Hooks的作用和使用方法，以及使用案例。欢迎收藏、点赞、转发哦~"}, {"id": "6844903781348409357", "title": "React通过redux缓存列表数据以及滑动位置，回退时恢复页面状态", "desc": "在使用React和React-router实现单页面应用时，会有这样一个场景：从列表页面点击某项条目进入详情页，然后回退至列表页面时，列表页面会重新刷新，不仅数据重新获取了，滚动条也回到了顶部。用户要继续查看剩余数据的话，需要重新滑动到之前点击的那个条目，如果列表做了分页的话就…"}, {"id": "6844904159901122574", "title": "html5 Audio 标签自定义样式 手把手教你用react封装一个audio组件", "desc": "1audio简介audio是html5新标签audio用来定义声音，比如音乐或其他音频流2此篇文章背景3看看一般浏览器默认样式和设计稿的差别之处浏览器默认（谷歌）一般设计稿4开始需求分析播放器有播放暂"}, {"id": "6844904169493512205", "title": "react-复习（1）setState到底是异步还是同步?", "desc": "其实造成setState的异步并不是由内部的异步代码引起的，在本身的执行过程中时同步的，但是合成事件和生命周期函数的调用顺序在更新之前，导致在内部不能直接得到更新后的值。我们可以利用setState的第二个参数callback得到最新的值，代码如下： 需要值得注意的是在控制台中…"}, {"id": "6854573205349367815", "title": "看不懂你打我系列；REACT-SSR 服务端渲染", "desc": "先附上github地址https://github.com/hzfvictory/react-ssr,方便大家更容易理解，不然后面很多地方会一头雾水。 由于页面显示过程要进行JS文件拉取和React代码执行，在这个渲染过程中至少涉及到两个 HTTP请求周期（html+js），所…"}, {"id": "6844903560648507400", "title": "React全家桶构建一款Web音乐App实战（九）：皮肤切换", "desc": "这一节是这款React Web音乐App实战的最后一节：皮肤切换功能。皮肤切换是Web音乐App中一个与核心无关的功能，加入这个功能可以为应用增添不少趣味性 字体图标制作完成后会有一份icomoon.zip包，解压后将里面fonts目录下的4个文件重命名为icomusic，然后…"}, {"id": "6844903957957967885", "title": "函数式编程看React Hooks(一)简单React Hooks实现", "desc": "函数式强调在逻辑处理中不变性。面向对象通过消息传递改变每个Object的内部状态。两者是截然不同的编程思想，都具有自己的优势，也因为如此，才使得我们从 class 组件 转化到 函数组件式，有一些费解。 从 react 的变化可以看出，react 走的道路越来越接近于函数式编程…"}, {"id": "6981103016157921294", "title": "一个异想天开的个人工作台", "desc": "基于 vscode 架构，利用 【依赖注入】【多进程】等思想实现的一款小工具，工具还处于萌芽阶段，架构待完善，依托 vscode 现学现卖"}, {"id": "6844903767897292807", "title": "Next.js页面渲染的优化方案", "desc": "在过去一年的工作中我所使用的js框架是Next.js,尽管这个框架在前后端同构方面有着绝佳的体验，但是当页面js文件过大以及preload过多的时候还是会出现页面跳转卡顿和渲染阻塞等比较糟糕的用户体验问题。由于我之前既不知道这个框架的工作原理，自然也就不知道如何去优化它。乘着农…"}, {"id": "6844903636783333390", "title": "使用React开发App管理平台系统", "desc": "基于create-react-app手脚架创建的项目，使用React.js进行开发的App管理平台系统Web前端工程。"}, {"id": "6971045126302859295", "title": "记录一些React路由的笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6934961092170874888", "title": "【个人笔记】重读React官网doc需要注意并记住的点——基础篇", "desc": "React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS（cross-site-scripting, 跨站脚本）攻击。 与浏览器的 DOM 元素…"}, {"id": "6956233938750685220", "title": "让你彻底搞懂React类组件", "desc": "一.原生js中的类 二、js类 2.1类解释 当我们在控制台打印实例对象时，会看到类似于这样的代码，Person{}，这代表是Person的实例对象，因为打印一个{}，并不能辨别是什么。当给类添加属性"}, {"id": "6950648458978000926", "title": " React Hooks自定义hooks", "desc": "自定义hooks是在react-hooks基础上的一个拓展，可以根据业务需要制定满足业务需要的hooks，更注重的是逻辑单元。"}, {"id": "6844903505346461709", "title": "好久不见，我总感觉欠你点什么", "desc": "好久不见，后台有收到朋友留言，问前端周刊是不是不做了？实际上不是，我在酝酿更好的内容提供形式！经过两个月的精心准备，很高兴跟大家宣布：我又回来了，并且给关注前端周刊的同学准备了礼物，前端周刊明天开始提供新的内容形式：定期推送 3 到 5 分钟主题聚焦的短视频教程，文章也会继续写…"}, {"id": "6971328345711755272", "title": "React Hooks 之 useReducer", "desc": "React Hooks 之 useReducer 对于复杂的state操作逻辑，嵌套的state对象，推荐使用useReducer const [state, dispatch] = useReduc"}, {"id": "6961332597465022495", "title": "React生命周期。", "desc": "〇、对于一个普通的div创建过程，有着如下的步骤： const div=document.createElement(\"div\")：div的create/construct div.textConte"}, {"id": "6844903507305168904", "title": " React中如何使用setState第二个参数来处理set后的数据", "desc": "楼主在最近的业务开发中刚刚接触使用了react，发现react里的setstate方法是异步执行的，那么我们该怎么让我们的代码使用的是setState后的数值呢，本文将给出楼主搜集的方案。 1.在setState中的调用的stateFunction()函数不会立即执行，调用的时…"}, {"id": "6844903618059960328", "title": "使用模块化工具打包自己开发的JS库", "desc": "小程序的模块化采用了Commonjs规范。也就是说，我需要提供一个monitor.js文件，并且该文件需要支持Commonjs，从而可以在小程序的入口文件app.js中导入： 但是考虑到代码量，为了降低耦合度，我还是倾向于把代码拆分成不同模块，最后把所有JS文件打包成一个mon…"}, {"id": "6844903569196335112", "title": "Flutter 体验 —— Widget 的状态管理", "desc": "Flutter 的设计思想是将视图与数据分离，思路颇似 React。本文简述了有关 Flutter 状态管理的一些要点。"}, {"id": "6847902195099107341", "title": "基于 Storybook 5 打造 Style 组件库开发与文档站建设小结", "desc": "前阵子一直和组里的小伙伴共同“造轮子”，开发并维护了一套 PC 端 React UI 组件库，经过了一段时间的折腾，组件库从之前的 0.x、1.x 再到最近发布的 2.0.beta 的一个过程，这其中很多东西值得拿出来分享和讨论，有好的有失败的，今天就把组件库开发过程中的 DE…"}, {"id": "6906010439755235336", "title": "【React全解1】React组件、props、state&setState", "desc": "props为外部数据，只允许使用的组件读取props外部数据，不允许写。因为这不符合React的规范，要修改数据，也只能由该props数据的主人来修改。 若要修改props数据，可通过函数调用，在该props数据的主人的组件中对props进行修改。 this.state.n+=…"}, {"id": "6844903869533650952", "title": "听说redux和react-redux在写项目中更配哦", "desc": "写完上面的代码，就实现了把Counter组件与store仓库连接起来的操作了。最后的最后，我们就把index.js入口文件再修改一下，让所有组件都可以连接到store吧 好了，好了，写了这么多，大家看的也累了，感谢大家耐心的观看了。"}, {"id": "6919701991149010958", "title": "React 生命周期详细梳理", "desc": "1. 组件初始化(Initialization)阶段 2. 组件的挂载(Mounting)阶段 3. 组件的更新(Updation)阶段 在讲述此阶段前需要先明确下 react 组件更新机制。setState引起的 state 更新或父组件重新 render 引起的 props…"}, {"id": "6930984162329853960", "title": "深入浅出的学习react[学习笔记23]", "desc": "React 应用也是前端应用，如果之前知道了一些前端项目普适的性能优化手段，比如资源加载过程中的优化、减少重绘与回流、服务端渲染、启用 CDN等，那么这些手段对于 React 来说也是同样奏效的。 不过对于 React 项目来说，它有一个区别于传统前端项目的重要特点，就是以 R…"}, {"id": "6844903976471642120", "title": "剖析React内部运行机制-「译」React组件、元素和实例", "desc": "组件与它们实例以及元素之间的区别困扰着很多的React初学者。为什么会有三种不同的术语来指代屏幕上的东西？ 如果你是一个React新手，你以前可能只使用过组件类和实例。比如，你通过创建一个class来声明一个Button。app执行过程中，在屏幕中你会得到这个组件的几个实例，每…"}, {"id": "6844903953524604941", "title": "Next.js 实践总结 - 如何catch服务端请求错误", "desc": "最近用自己的脚手架做了几个项目，项目上线之后陆续在考虑优化相关的事情，并且想把一些自己使用Next.js的实践总结一个点一个点的抽离成解决方案。计划大概如下，先写哪个后写哪个就看准备完成程度了，我会在自己代码使用没问题之后总结发布： 【强调一下】： 这里catch的是服务端请求…"}, {"id": "6844903634476466184", "title": "从 0 到 1 实现 React 系列 —— JSX 和 Virtual DOM", "desc": "看源码一个痛处是会陷进理不顺主干的困局中，本系列文章在实现一个 (x)react 的同时理顺 React 框架的主干内容(JSX/虚拟DOM/...)"}, {"id": "6910908673900412935", "title": "React 跨组件通信", "desc": "由于 React 是一个组件化框架，那么基于组件树的位置分布，组件与组件之间的关系，大致可分为 4 种。 父与子：父组件包裹子组件，父组件向子组件传递数据。 兄弟：两个组件并列存在于父组件中，需要数据进行相互传递。 无直接关系：两个组件并没有直接的关联关系，处在一棵树中相距甚远…"}, {"id": "6844903910470057997", "title": "几种 react 组件的代码复用（mixin-HOC-render props -Hooks）", "desc": "Mixin（混入）是一种通过扩展收集功能的方式，它本质上是将一个对象的属性拷贝到另一个对象上面去，可以拷贝多个属性到一个对象上，为了解决代码复用问题。 常用的方法：JQuery 的 extend 方法。 高阶组件可以看作 React 对装饰模式的一种实现，高阶组件就是一个函数，…"}, {"id": "6844903837757603854", "title": "打造前端团队的 React CLI 工具", "desc": "对于 Angular，有官方的 Angular CLI。 对于 Vue，有官方的 Vue CLI。 对于 React，有官方的 Create React App。 Angular CLI 和 Vue CLI 是官方推荐的 CLI 工具，可直接在生产环境中使用，但 Create …"}, {"id": "6844903861015019528", "title": "Element(React)源码分析系列4--Radio组件", "desc": "学习就好比是座大山，人们沿着不同的路登山，分享着自己看到的风景。你不一定能看到别人看到的风景，体会到别人的心情。只有自己去登山，才能看到不一样的风景，体会更加深刻。一千个读者就有一千个哈姆雷特，但是莎士比亚心中的哈姆雷特肯定只有一个。就好比element源码只有一个，但每个人看…"}, {"id": "6844903774226481166", "title": "箭头函数正在正在破坏我们的 React 组件……", "desc": "JS 类中的箭头函数只是语法糖，在编译之后，它将出现在构造函数中，在实例化时创建并分配，这就是为什么我们没有在原型中看到这些方法。在使用箭头函数（而不是手动 bind）的情况下，每次使用组件时都会创建一个全新的函数，这会对应用程序的性能和内存使用产生负面影响。"}, {"id": "6844903640423989256", "title": "vue.js 实践总结（二）Render 函数", "desc": "上一篇说了项目搭建和结构，这篇说说vue 的render 函数，比较核心的概念。去年写过一点react，所以知道render 函数是用来创建虚拟dom 的，那个时候写 jsx 还是不亦乐乎的。列出几个问题作为这篇的结构： 这个问题是由于当前写的组件没注册为vue 组件，或者组件…"}, {"id": "6844903840404226061", "title": "前端技术 | react-router，去中心化式路由", "desc": "1.静态路由 vs. 动态路由 在Web前端开发中，我们经常会需要处理页面路由问题。习惯上，路由信息会在一个地方集中配置好，我们可以称之为“静态路由”，或者叫“中心化式路由”。以react-router v3版本为例，代码类似下面这样： 可以看到，在程序的顶层组件上配置好了所有…"}, {"id": "6844904142570258445", "title": "React源码解析之Commit最后子阶段「layout」(附Commit阶段流程图)", "desc": "前言今天我们来看下Commit最后子阶段「layout」的源码：一、commitLayoutEffects()作用：①循环effect链，针对不同的fiber类型，进行effect.destroy()"}, {"id": "6844904031714820110", "title": "前端安全", "desc": "cross site script 跨站脚本攻击，是一种代码注入攻击，攻击者在目标网站注入恶意代码，当被攻击者登录网站时就会执行这些恶意代码，这些脚本可以获取cookie,session tocken，或者其他敏感网站信息。 xss攻击的本质是：恶意代码未经过滤，与网站正常的代…"}, {"id": "6946128114552406047", "title": "setState源码分析", "desc": "在使用React进行业务开发的时候setState可以对组件的数据进行更新并且触发页面的渲染.本文从源码角度梳理在调用setState的相关处理逻辑.前置知识React多平台渲染React在设计上使用"}, {"id": "6844903960415830023", "title": "在React组件中使用本地SVG文件", "desc": "首先说一下我的使用场景：这是一个和使用 webpack 工具管理的React项目，现在我已经下载了几个 .svg 文件到本地，准备直接在React项目中导入并使用这些SVG文件。 如果你的项目不是React或者不是使用webpack管理，那么这篇博客可能不能确切解决你的问题，但…"}, {"id": "6844903609243549710", "title": "简化异步redux控制中间件redux-order", "desc": "在上面的例子里，我们创建了异步的redux请求。例子中定义了LOGIN、LOGIN_SUCCESS、LOGIN_FAIL三个action，依次代表请求发出、请求成功、请求失败。在发出一个异步promise请求后，首先触发了LOGIN,假如请求成功则进入LOGIN_SUCCESS…"}, {"id": "6844903503509323790", "title": "Mirror 源码解读", "desc": "Mirror 是一个 react、redux 及 react-router 的封装。Mirror 的代码简单易懂，适合初学者掌握 redux 开发之后有一定实践后阅读。"}, {"id": "6844903601656037390", "title": "使用 React 构造 Optimistic UI", "desc": "Metor 的 Optimistic UI 了解吗？"}, {"id": "6844903510425731086", "title": "React异常处理", "desc": "在React0.15版本及之前版本中，组件内的UI异常将中断组件内部状态，导致下一次渲染时触发隐藏异常。React并未提供友好的异常捕获和处理方式，一旦发生异常，应用将不能很好的运行。而React16"}, {"id": "6844903506705416205", "title": "zzz周刊 - 第1025期 - 龙猫", "desc": "别了，Firebug！ - 资讯 - 伯乐在线 随着下月 Firefox Quantum 的发布，是时候和 Firebug 说告别了。虽然这是一个悲伤的消息，但是 Firebug 的所有功能已经集成在 Firefox DevTools 中了 V8 JavaScript Engi…"}, {"id": "6844903560165982216", "title": "在 React 工程中利用 Mota 编写面向对象的业务模型", "desc": "简述React是一个「视图层」的UI框架，以常见的MVC来讲React仅是View，而我们在编写应用时，通常还需要关注更加重要的model，对于React来讲，我们常常需要一个「状态管理」库。然而，目"}, {"id": "6844903711236423688", "title": "React源码系列(二): 从jsx到createElement", "desc": "React16源码阅读系列分享 喜欢的可以点个 watch/start 后面还会更新"}, {"id": "6844904048366190606", "title": "《深入浅出React和Redux》学习笔记（四）", "desc": "React负责视图，Redux管理状态。 按角色组织(Organized by Roles):在MVC中，应用代码分为Controller、Model、View，分别代表三种不同角色，把对应角色的代码放入对应目录中的组织代码方式。 每个基本功能对应一个功能模块，每个功能模块对应…"}, {"id": "6844903628906430477", "title": "React v16.3之后的组件生命周期函数", "desc": "React v16.3虽然是一个小版本升级，但是却对React组件生命周期函数有巨大变化，这个话题其实应该早就讲一讲，一直忙，拖到今天才有机会和大家分享一下。 React v16.0刚推出的时候，是增加了一个componentDidCatch生命周期函数，这只是一个增量式修改，…"}, {"id": "6844903511461740551", "title": "icepy/fighting", "desc": "这是一个react工程项目，开箱即用，它拥有如下配置，如果这不是你喜欢的，可以随时移除。 【请求库】: https://github.com/axios/axios 【UI组件库】: https://ant.design/index-cn 【icon图标库】: iconfont…"}, {"id": "6844903573210447880", "title": "【移动战略说•第七期】前端开发技术专场", "desc": "本次活动我们将跟大家共同探讨前端技术的前沿发展"}, {"id": "6944663904165298206", "title": "setState执行机制", "desc": "3、更新时会把每个组件的更新合并，每个组件只会触发一次更新的生命周期。 在react的生命周期和合成事件中，react仍然处于他的更新机制中，这时isBranchUpdate为true。 按照上述过程，这时无论调用多少次setState，都会不会执行更新，而是将要更新的stat…"}, {"id": "6844903535436365832", "title": "Webpack自动化构建实践指南", "desc": "由于现在的博客是使用wordpress搭建，自己得经常修改过一些代码，但是修改第三方源码真的比较痛苦，于是决定计划开始使用React + Node.js / Python开发新博客项目，最终替换当前博客代码，方便以后博客的维护和更新，也能实现自我开发技术，架构设计，解决问题能力…"}, {"id": "6943489322033086471", "title": "过 React.memo 来优化函数组件", "desc": "memo 是一个可以优化组件性能的高阶组件。 大家都知道，对于函数组件来说，只要函数被调用就意味着这个函数组件会被重新渲染。 有的人就会说了，能不能像纯类组件(PureComponent)一样，先判断 state 和 props 是否改变，再决定是否重新渲染（调用 render…"}, {"id": "6942501478103777316", "title": "# Hooks — react-16.8", "desc": "它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性. 以下是 react 自带的 hooks , 其他 hooks 属于自定义 hooks."}, {"id": "6844903593863020552", "title": "优雅地乱玩Redux: Getting Started", "desc": "1. 调用store.dispatch(action) 可以在任何地方调用这个函数，只要引用store进来就可以了. 2. Reducer接收Action 3. Root Reducer会将所有sub reducer的结果给结合起来并返回 4. Redux会保存最后结合起来了的…"}, {"id": "6844903930262978568", "title": "react top level 翻译", "desc": "React.PureComponent is similar to React.Component. The difference between them is that React.Component doesn’t implement shouldComponentUpd…"}, {"id": "6844903827305398280", "title": "Virtual-DOM的理解", "desc": "在说Virtual-DOM之前，我们来先说下什么是DOM，DOM从字面上来理解是文档对象模型。 而从上面的定义总结来看，DOM是接口，这个接口可以操作文档。"}, {"id": "6844903623005044743", "title": "context来了，也许该放手redux or mobx...", "desc": "老铁，学不动了？不要慌，耽误不了你几分钟...(说谎脸，汗) 使用react的同胞们，也许都苦恼过其状态管理以及组件之间的数据传递和共享（笨重的方式通过props依次往子组件传递）。 这时候，redux（mobx类似）出现了，我们累死累活的从水深火热中解放了（第三方的库相对较复…"}, {"id": "6844903559759134734", "title": "Github Stars Repositories 标签管理器", "desc": "纯前端的实现，没有服务器和数据库，你的 Github 就是一切。 本项目发布版使用 Vue 开发，源码在 dev 分支。也有 React 开发版本，源码在 react-dev 分支，仅用作练习。 界面风格模仿 Astral，支持中英文切换。"}, {"id": "6844903806090608647", "title": "精读《useEffect 完全指南》", "desc": "1. 引言 工具型文章要跳读，而文学经典就要反复研读。如果说 React 0.14 版本带来的各种生命周期可以类比到工具型文章，那么 16.7 带来的 Hooks 就要像文学经典一样反复研读。 Hooks API 无论从简洁程度，还是使用深度角度来看，都大大优于之前生命周期的 …"}, {"id": "6859528127010471949", "title": "React Fiber 源码解析", "desc": "在 React v16.13 版本中，正式推出了实验性的 Concurrent Mode，尤其是提供一种新的机制 Suspense，非常自然地解决了一直以来存在的异步副作用问题。结合前面 v16.8 推出的 Hooks，v16.0 底层架构 Fiber，React 给开发者体验…"}, {"id": "6844903983710994446", "title": "大前端团队代码规范", "desc": "随着团队人数的增加，每个人的代码编写喜好不同，代码风格也迥然不同。如果有一个大家的统一的愿意遵守的代码规范，肯定事半功倍，提高效率，避免代码Review和重构。 其中一部分规则参考了 腾讯alloyteam团队的代码规范，如有错误，请指出，将会非常感谢。 坚持好的代码风格规范，…"}, {"id": "6844903984998809614", "title": "将 React 渲染到嵌入式液晶屏", "desc": "我们都知道，React 最大的卖点之一，就是 Learn once, write anywhere 的通用性。但如何才能在浏览器之外，甚至在 Node.js 之外，用 React 渲染 UI 呢？本文将带你用 React 直通嵌入式驱动层，让现代前端技术与古老的硬件无缝结合。 …"}, {"id": "6844904074433789959", "title": "10分钟教你手写8个常用的自定义hooks", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。本文是一篇以实战为主的文章，主要讲解实际项目中如何使用hooks以及一些最佳实践，不会一步步再介绍一遍react hooks的由来和基本使用，…"}, {"id": "6997780311488593951", "title": "我是如何一步步封装一个React Context Composer", "desc": "React的状态管理方案有很多，比如Redux、Mobx、Recoil等。这里，我们不讨论各家状态管理方案的优劣，将目光聚焦于在使用Context时遇到的一个多层嵌套的问题。"}, {"id": "6998826492960440334", "title": "React学习知识点之组件", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战。 组件 是否受控 非受控组件 表单数据交由DOM节点管理，特点是表单数据在需要时要进行获取，不能实时获取，代码实现比较简单 受控组件 表单"}, {"id": "6998798042631520270", "title": "[React]--组件封装、父子组件传值、redux持久化保存公共数据、类v-model实现", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战。 一、 react中父子组件传值 1. 一个搜素组件利用父子组件传值实现隐藏显示功能 1. 传递样式可以通过display：none，来隐藏"}, {"id": "7002625878144319501", "title": "React项目 鉴权功能", "desc": "React项目 鉴权功能 场景： 有的页面需要用户先登录才可以访问 有的功能需要用户先登录才可以使用 有的功能需要确认用户是否拥有权限"}, {"id": "7002265285541511204", "title": "React 源码阅读 - 渲染", "desc": "React 源码阅读 - 渲染 什么是渲染阶段 渲染的工作由渲染器 （Renderer）来完成，这个阶段被称作 commit 阶段，这个阶段将会把提交的信息渲染到页面上，也就是上一个阶段我们”协调“了"}, {"id": "6989858922337140750", "title": "react中setState是同步的还是异步，看完这篇就全明白了", "desc": "你真的理解setState吗？ setState真的是异步的吗？ 这两天自己简单的看了下 setState 的部分实现代码，在这边给到大家一个自己个人的见解，可能文字或图片较多，没耐心的同学可以直接跳"}, {"id": "6844903718387875847", "title": "脑阔疼的webpack按需加载", "desc": "随着单页应用发展的越来越庞大，拆分js就是第一要务，拆分后的js，就可以根据我们需求来有选择性的加载了。 这里就添加了一句，chunkFilename而已，chunkFilename的作用就是用来给拆分后的chunk们起名字的配置项。 还是只打包出了一个main.js，毫无变化…"}, {"id": "6844903890467454989", "title": "React小技巧汇总", "desc": "使用 React.js 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。此文章是长篇大论你只有耐得住寂寞，禁得住诱惑才会有所成长。 1. 父组件向子组件通信 2. 子组件向父组件通信 3. 跨级组件通信 4. 没有嵌套关系的组件通信 下面demo中点击父…"}, {"id": "7001722516997668901", "title": "02 手摸手教学-React中的state和setState?", "desc": "1 事件、state与setState 2、实现累加的功能 (状态的使用1) 3、实现双向数据绑定 (状态的使用2) 4、state的简写 5、setState是异步的"}, {"id": "6844903728818946062", "title": "打造属于你自己的instagram! 全栈项目(react + egg.js)", "desc": "注：此项目纯属个人瞎搞，与instagram无任何关系。 因前后端不同端口原因，为解决跨域。前端\b工程启动了devServer，需先启动后端工程"}, {"id": "6844903636749778958", "title": "你真的理解setState吗？", "desc": "这两天自己简单的看了下 setState 的部分实现代码，在这边给到大家一个自己个人的见解，可能文字或图片较多，没耐心的同学可以直接跳过看总结(源码版本是16.4.1)。 、performWorkOnRoot、performSyncWork、performAsyncWork这四…"}, {"id": "7004459443597344775", "title": "React插槽使用", "desc": "需求 我们自己写了个组件，引用组件时想要在组件中写入内容，并且写入的内容可以被组件识别、控制，用过Vue的同学肯定会立刻想到slot插槽，react也支持插槽功能，下面我们用react开发一个支持插槽"}, {"id": "6844903943902855176", "title": "【长文慎入】一文吃透 React SSR 服务端渲染和同构原理", "desc": "前段时间一直在研究react ssr技术，然后写了一个完整的ssr开发骨架。今天写文，主要是把我的研究成果的精华内容整理落地，另外通过再次梳理希望发现更多优化的地方，也希望可以让更多的人少踩一些坑，让跟多的人理解和掌握这个技术。 相信看过本文（前提是能对你的胃口，也能较好的消化…"}, {"id": "7004320100224335902", "title": "《React全家桶：前端开发与实例详解》读书笔记1", "desc": "第 1 章　第一个React Web应用程序 一、React组件 React组件是继承React.Component类的ES6类，render()是React组件唯一必需的方法，该方法的返回值是渲染到"}, {"id": "6844904050236850184", "title": "React高阶组件(HOC)的入门📖及实践💻", "desc": "作为前端小白中的一员，没接触过 React 高阶组件，首次看到这个名字时不明觉厉 😱，甚至有种“从入门到放弃”的想法。 然 🦢，通过深入学习后发现它实际上是一个概念十分简单，但却非常常用的东西。它的作用是能实现代码复用和逻辑抽象、对 state 和 props 进行抽象和操…"}, {"id": "6844903613714661390", "title": "自定义react-navigation的TabBar", "desc": "在某些情况下，默认的react-navigation的tab bar无法满足开发者的要求。这个时候就需要自定义一个tab bar了。本文就基于react-navigtion v2来演示如何实现一个自定义tab bar。 这里主要处理的是再android里，当界面中有输入框，唤起…"}, {"id": "6896856146410209288", "title": "重学 React 的笔记", "desc": "React 是一个用于构建用户界面的JS 库，具有组件化、声明式、DOM性能优化等优点。是一个渐进式的框架。 React 专注于 View 层的解决方案，就是在使用React 的时候，只要告诉React 需要的视图长什么样，或者告诉React 在什么时间点，把视图更新成什么样就…"}, {"id": "6847902218889379847", "title": "【react进阶（二）】:教你正确理解、合理使用Redux及Redux的源码分析", "desc": "单一数据源：整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。 State是只读的：唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。 使用纯…"}, {"id": "6920265023009292296", "title": "前端学习笔记（二十） --React Hook 学习", "desc": "学习材料为 react 文档。 1. Hook 介绍 Hook 的意思是把 state 和生命周期函数用“钩子”钩过来，让函数组件也能使用 state。以及提供其他各种特性使得函数组件比 class 组件更好用，以解决 class 组件的各种问题。比如说： 组件复用：class…"}, {"id": "6844903632500949000", "title": "我们为什么需要指令", "desc": "最近看到大漠的一个视频【为什么需要指令】，他是这么回答的：因为指令可以拓展HTML的功能（在Angular中）。我认为他说的观点没错误，但是其实没有抓住最根本的原因，拓展HTML的功能只是表面现象..."}, {"id": "6844903694626979853", "title": "前端性能之JavaScript成本（2018）", "desc": "原文是在Medium上面看到的，Chrome工程师Addy Osmani发布的一篇文章，这位的Medium上面的自我介绍里面有一句Passionate about making the web fast，和这篇文章的主体可以说非常契合了。 最近在做一个服务端渲染的项目，到底页面…"}, {"id": "6844903700163477517", "title": "高级 Vue 组件模式 (7)", "desc": "到目前为止，仅从 toggle 组件自身的角度来看，它已经可以满足大多数的业务场景了。但我们会发现一个问题，就是当前 toggle 组件的状态对于调用者来说，完全是黑盒状态，即调用者无法初始化，也无法更改组件的开关状态，这在一些场景无法满足需求。 对于无法初始化开关状态的问题，…"}, {"id": "6977183647463899166", "title": "用React和Firebase创建一个健身追踪器", "desc": "在这篇文章中，我们将使用React和Firebase构建一个健身追踪器网络应用，这两种技术使我们能够高效率地开发网络应用。 这篇文章将使你能够自己用React和Firebase构建全栈应用。如果你知道"}, {"id": "6844903534954020878", "title": "Parcel,0配置打包typescript和react", "desc": "平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。 现在很多人…"}, {"id": "6844903863955226631", "title": "React Hooks（30分钟全掌握）", "desc": "Hooks是React 16.8新增加的特性，Hooks可以让你不写class组件就能使用state和其他React特性。 useState是要学的第一个'Hooks'，上面就是简单的使用案例。 Hooks是向后兼容。上面的例子👆中，按钮每点击一次数字加1。其中useStat…"}, {"id": "6844903552704315400", "title": "Redux 和 Mobx 哪个更适合你？", "desc": "从 Redux 和 Mobx 官方的介绍很容易可以看出，它们都是用来管理应用的 state。但是它们有什么区别呢？刚好最近把之前使用 Reudx 做的 React 项目使用 Mobx 重构了，那么就来总结一下吧。"}, {"id": "6844903670845276168", "title": "react-Router  及源码分析", "desc": "在看啦一遍源码后，发现不管出什么问题都可以轻松找到原因啦，哇咔咔Router安装http-server，react-router-dom，path-to-regexp将路径转换为正则目的当你点击不同路"}, {"id": "6977188521631039525", "title": "使用create-react-app脚手架按需加载antd", "desc": "当我们做项目时，有时只会用到几个常用的Ui组件,但是你并不想把整个antd包引入进来，这时你可以尝试下按需引入antd的相关组件: 直接引入，首先安装npm install antd --save，安"}, {"id": "6920139761030168583", "title": "React一些简单的学习记录", "desc": "react中使用JSX，是一个 JavaScript 的语法扩展。我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式，这里对jsx不做过多的介绍，下面是jsx介绍网站 组件可以重复使用，并且不用担心使用冲突。减少很多的冗余代…"}, {"id": "6918343199543181325", "title": "React 源码解读之 Concurrent 模式（更新插队）", "desc": "上篇讲述了 Concurrent 模式中关于时间切片的实现方式，本文来讲讲 Concurrent 模式中另外一个特性：更新插队。我们先来看一个例子： 我们的页面中渲染了一个按钮以及 4000 个 Item 函数组件，每个函数组件中添加了一段比较耗时的循环语句。useEffect…"}, {"id": "6929854562287222791", "title": "深入讲解 React 中的 state 和 props 更新", "desc": "我给 ClickCounter 组件添加了 componentDidUpdate 钩子，这个钩子会在 commit 阶段被调用。 在之前我写了一篇深入介绍 React Fiber的文章，在那篇文章中我介绍了 React 团队为什么要重新实现 reconciliation 算法、…"}, {"id": "6844903656286846984", "title": "12 个极具启发性的 React 开源应用程序", "desc": "在过去几年里，React 已经成为一个广受欢迎的 JavaScript 库和开发人员生态系统。有成千上万的软件项目使用 React，其中许多项目在 Github 上公开发布。本文就来看看其他开发人员使用 React 做了什么，并深入了解他们如何编写代码，这很有趣，也很有启发性"}, {"id": "6844903668580352007", "title": "React-HOC了解一下", "desc": "最近在公司接了一个老项目迁移React。在组件开发过程中，发现有一些组件的处理逻辑很类似。想在某一个地方来统一处理。进过思考和分析，发现HOC(higher-order component)很适合完成此类工作。 再次来总结HOC的概念和基本用法。 针对React开发来讲，com…"}, {"id": "6844904158114349069", "title": "从零开始用React搭建自己的技术博客，遇到的问题", "desc": "前段时间，我花了些时间跟着教学视频自学了React，所以也想着自己用所学的技术做一个个人博客网站。 我也不多废话，直接列出自己在开发过程中所用的技术和遇到的一系列问题以及解决办法。我相对于大多数刚学React，也想做一个练手项目的同学而言，我的个人经验可能很有启发意义；因为我遇…"}, {"id": "6844903663324905485", "title": "如何编写你自己的 Virtual DOM", "desc": "为了构建你自己的 Virtual DOM，你只需要知道两件事，甚至你都不必深入 React 或者其它 Virtual DOM 实现的源码。因为它们都太庞大和复杂了 —— 但是实际上 Virtual DOM 的主要部分可以用少于 50 行代码实现。50 行！！！ 两个概念： Vi…"}, {"id": "6844903650729394190", "title": "可视化搭建前端工程 - 阿里飞冰了解一下", "desc": "做完了这个页面做下个，新建文件，复制代码，注册路由... \"海量可复用物料，通过 GUI 工具极速构建中后台应用\"。 飞冰是一套综合解决方案，用来极速构建中后台应用（其实也可以做非中后台应用）。 可以做到极速是通过『海量可复用物料』和『GUI 开发工具』实现的。 在整个流程中，…"}, {"id": "6844903918577664007", "title": "2019年了，整理了N个实用案例帮你快速迁移到React Hooks", "desc": "在React Conf 2018宣布React Hooks后，我第一时间开始尝试使用React Hooks，现在新项目基本不写Class组件了。对我来说，它确实让我的开发效率提高了很多，改变了已有的组件开发思维和模式. 我在React组件设计实践总结04 - 组件的思维中已经总…"}, {"id": "6995840303814934565", "title": "React 小册 ｜ 轻巧快艇 Hooks", "desc": "无论是函数式还是类组件 都没有谁优谁劣之分 两者是思维模式上的转变 类组件是面向对象的模式 而函数式组件是函数式编程的模式"}, {"id": "7000744621315719176", "title": "Vite + React && 原理浅析 + 踩坑指南", "desc": "Vite 原理浅析以及在项目中的实际应用。 本次的分享仅限于参考，学习，并不保证在前端高速发展，日新月异的情况下有没有过时。如有不对的点欢迎各位大佬指出，有什么不足的地方也请大家担待。"}, {"id": "6921293543017283598", "title": "React和DOM的那些事-节点更新", "desc": "点击进入React源码调试仓库。 React的更新最终要落实到页面上，所以本文主要讲解DOM节点（HostComponent）和文本节点(HostText)的更新，对于前者来说更新是props的更新，对后者来说更新是文字内容的更新。 commitWork是节点更新的入口。 co…"}, {"id": "6999615590688260110", "title": "Next.js与React服务端渲染", "desc": "React服务端渲染 Next.js不了解一下？ 最近在一个资讯类的项目中用了Next.js服务端渲染，体验了一把服务端渲染的速度，首屏直出，渲染速度666。"}, {"id": "6963466553601835044", "title": "一文彻底搞懂 DvaJS 原理", "desc": "Dva 是什么 dva 首先是一个基于redux和redux-saga的数据流方案，然后为了简化开发体验，dva 还额外内置了react-router和fetch，所以也可以理解为一个轻量级的应用框架"}, {"id": "6990630774131130398", "title": "使用 Vite 尝鲜 React 18", "desc": "React 18 目前已经开放 alpha 版本可以供我们体验了，那为了更方便快捷的体验 React 18 新特性，今天使用 Vite 搭建一个简易版的 React 开发环境，帮助我们快速尝鲜。"}, {"id": "6998374465973256206", "title": "React生命周期，看这一篇就够辣。", "desc": "在使用类组件开发时，我们可以在生命周期方法中执行一些业务逻辑。拿生命周期又有哪些阶段呢？ 挂载阶段：当组件实例被创建并插入DOM中时 constructor() static getDerivedSt"}, {"id": "6991645668934680584", "title": "浅谈React合成事件", "desc": "React合成事件是指将原生事件合成一个React事件，之所以要封装自己的一套事件机制，目的是为了实现全浏览器的一致性，抹平不同浏览器之间的差异性。比如原生onclick事件对应React中的onCl"}, {"id": "7003355037313761310", "title": "React 性能优化最佳实践", "desc": "React 组件性能优化最佳实践 React 组件性能优化的核心是减少渲染真实 DOM 节点的频率，减少 Virtual DOM 比对的频率。"}, {"id": "7005561455802056711", "title": "react 常见问题总结", "desc": "一、基本知识点 jsx 语法与html 差异 1、class 需要用 className 代替 2、label 中的for 需要 htmlFor 代替 3、style 值以对象形式使用 4、渲染列表以"}, {"id": "6918912097560559630", "title": "扒一扒React计算状态的原理", "desc": "点击进入React源码调试仓库。 一旦用户的交互产生了更新，那么就会产生一个update对象去承载新的状态。多个update会连接成一个环装链表：updateQueue，挂载fiber上， 然后在该fiber的beginWork阶段会循环该updateQueue，依次处理其中的…"}, {"id": "6920897301116354574", "title": "React和DOM的那些事-节点新增算法", "desc": "点击进入React源码调试仓库。 本篇是详细解读React DOM操作的第二篇文章，文章所讲的内容发生在commit阶段。 插入DOM节点操作的是fiber节点上的stateNode，对于原生DOM类型的fiber节点来说stateNode存储着DOM节点。commit阶段插入…"}, {"id": "6979410699453726727", "title": "可视化搭建移动端店铺解决方案", "desc": "前言 经过许久的深思熟虑与探索，同时也借鉴了行业内不错的产品（如：有赞，H5-Dooring等），但跟列举的产品还是有区别的（先卖个关子，后面再讲有哪些区别）。其实这种功能在零售系统（目前我所在公司是"}, {"id": "6844903568487497741", "title": "《React源码解析》系列完结！", "desc": "距离第一篇《React源码解析(一)》已经过去将近4个月的时间，由于是我第一次进行源码解析相关的写作，思路和文笔还不够成熟。一百多天以来，我基于读者反馈反思这几篇文章中的不足，同时也在不断学习借鉴其他优秀作者的写作方法和写作思路。最终总结出对于自己的源码写作来说，需要改进的几点…"}, {"id": "6894914653479960583", "title": "基于React全家桶开发「网易云音乐PC」项目实战(二)", "desc": "前言项目初始化前言-vscode&chrome插件(可选)如果已经安装过了可以选择跳过，以下都是可选的，当然不安装也没问题为了更便捷的开发项目，推荐安装以下vscode插件ESLint:代码风格检查工"}, {"id": "6994071684739235853", "title": "聊聊react useEffect 的使用心得", "desc": "先了解一下useEffect 函数的各个参数分别是什么, 为什么要写这个参数, 不写有什么问题? 上面是一个 useEffect 函数完整的写法, 来分析一下useEffect, 其中useEffec"}, {"id": "6862869137710907405", "title": "面向复杂场景的表单解决方案", "desc": "1. 背景 云音乐 B 端业务场景非常多，B 端业务相对于 C 端业务产品生命周期更长而且更注重场景的的梳理。很多时候开发 B 端业务都是拷贝之前的代码，这样增加了很多重复而且枯燥的工作量。 中后台系统其实可以拆分成几个比较通用的场景：表单、表格、图表，其中表单涉及到联动、校验…"}, {"id": "6917799654520258573", "title": "ReactFiber节点的更新入口：beginWork", "desc": "React的更新任务主要是调用一个叫做workLoop的工作循环去构建workInProgress树，构建过程分为两个阶段：向下遍历和向上回溯，向下和向上的过程中会对途径的每个节点进行beginWork和completeWork。 本文即将提到的beginWork是处理节点更新…"}, {"id": "6901915524171563015", "title": "浅谈React Hook的使用及原理", "desc": "2019年React Hook是React生态圈里边最火的新特性了。它改变了原始的React类的开发方式，改用了函数形式;就是用函数的形式代替原来我们写的那种继承component类的形式，有状态的组件都可以使用函数的形式定义它，原来的那种有状态组件和无状态组件就不那么说了，有…"}, {"id": "6844903624011677710", "title": "React在线编辑国际化文本", "desc": "有时候修改一个字段，查找就花费了很大的时间功夫。 这个时候 tiny-i18n 中的 @tiny-i18n/react-live 就可以发挥它的力量了，可以帮助我们在线可视化修改、新增国际化字段。 对 i18n 转换方法进行包装，转换成包含特殊字符（包裹）的字符串；同时对 Re…"}, {"id": "6844903591530987533", "title": "一步一步分析Redux源码🙂", "desc": "最近做项目遇到了一些复杂数据处理，侧面体会到一个良好的数据层设计对一个项目的稳定性和可维护性是多么的重要。于是想以源码分析的方式总结一下当前的数据管理方式，首选redux。 我们可以通过Redux 的官方文档来了解其设计思想。 http://cn.redux.js.org/. …"}, {"id": "6844903669775745032", "title": "Serlina - 一個漸進式的 React 服務器渲染框架", "desc": "A progressive React serverside-rendering framework. I love using Next.js, but most of my projects need to use our own web server framework …"}, {"id": "6844903599235923976", "title": "React 深入系列2：组件分类", "desc": "React 组件有很多种分类方式，常见的分类方式有函数组件和类组件，无状态组件和有状态组件，展示型组件和容器型组件。好吧，这又是一篇咬文嚼字的文章。但是，真正把这几组概念咬清楚、嚼明白后，对于页面的组件划分、组件之间的解耦是大有裨益的。 函数组件(Functional Comp…"}, {"id": "6844903749941461000", "title": "进阶组件之render props中进行公共属性的对象封装", "desc": "我们经常需要把一些常见的组件属性封装到一个对象里，然后在渲染属性中使用。 从上面的例子中，我们可以看到onClick属性，在switch组件以及button组件都传入了一个事件属性并绑定了同一个函数。这部分可以优化为下面的方式。 本文涉及到的技巧非常简单，主要是将render …"}, {"id": "6901277463704584206", "title": "React的组件化开发", "desc": "如果现在需要我们开发一个大型的页面，如果我们将所有的处理逻辑放在一起，那么这个页面的逻辑就会变得极为复杂且不利于后续管理。但是如果我们把一个界面 拆分 成一个个小的模块和功能。每个功能块完成属于自己独立的功能，那么之后整个页面的管理和维护就变得非常容易了。 无论是Vue还是Re…"}, {"id": "6844903687949647886", "title": "mp-redux：解耦小程序中的业务与视图，让测试更容易", "desc": "一个用于小程序和轻量级H5应用的状态管理工具， 使用方法是一个简化版本的Redux。之所以是适用于轻量级应用，主要是因为没有实现组件间的数据共享。因此不适合于复杂，庞大的前端应用。 状态都应该放在页面的根容器去管理，分发到各个子组件。以便更好的控制业务逻辑 拷贝 /mp-red…"}, {"id": "6844903621331517454", "title": "Redux复杂应用（一）：浅谈状态管理", "desc": "作者在毕业之后进入了猪厂工作，正是在网易有数产品中认识了redux这个库。从前端开发的角度来说，网易有数作为一个工具型web产品，是一个开发中充满挑战，富含乐趣的产品。 在这之前，作者对于博客的积累可以说微乎其微，决心有所改变，对于redux应用也很感兴趣，于是心中萌生了这么一…"}, {"id": "6945361438437277727", "title": "[React Hooks长文总结系列三]为所欲为，制作“穷人版”的redux", "desc": "在离职之后，我开始静下心来，思考原来在繁重的业务开发节奏中无暇思考的一些问题，本期的主题是纯函数钩子useReducer和共享状态钩子useContext。 在react中，reducer函数是一个很重要的概念。它表示一个接收旧状态，返回新状态的函数。 在上述例子中，reduc…"}, {"id": "6844904095296258056", "title": "理解 JavaScript 中的闭包", "desc": "闭包是 JavaScript 的难点之一。大多数教程只告诉你，闭包就是一个函数中的另一个函数，但这只是闭包的表象。本篇文章就带你透过表象，看看闭包的本质。 上面这段代码并不是纯正的闭包。x 定义在全局作用域中，所以并不能保证它不被修改。说到这里要提一下，JavaScript 是…"}, {"id": "6909271269867257869", "title": "给 React 穿上美丽的‘嫁衣’", "desc": "今天的题目，猛一看是不是很惊讶！啥玩意儿就给React穿上嫁衣了？莫慌！简单来说，就是怎么给React定义主题颜色，也就是我们今天的主题。创建React项目首先，使用React脚手架创建一个React"}, {"id": "6909066162491899918", "title": "React - 组件的生命周期", "desc": "卸载过程（Unmount），组件从DOM中删除的过程。 三种不同的过程，React库会依次调用组件的一些成员函数，这些函数称为生命周期函数。所以，要定制一个React组件，实际上就是定制这些生命周期函数。 我们先来看第一个constructor，也就是ES6中每个类的构造函数，…"}, {"id": "6844903591925252103", "title": "react-native-whc-calendar跨平台个性化日历组件", "desc": "支持iOS、android可按日，月，年生成日期支持单选多选。。。。。"}, {"id": "6926420847338979336", "title": "道、法、术、器：React 服务端渲染", "desc": "在开始之前我们需要先来搞清楚一个问题：什么是服务端渲染？在以往的概念里，渲染的工作更多的是放在客户端进行的，那么为什么现在我们要让服务端来做这个工作？服务端渲染和客户端渲染有什么不同之处吗？其实服务端"}, {"id": "6844903756753027079", "title": "[译]React Hooks-概览", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 Hooks是React中一个向后兼容的特性。这篇文档将会为React老手们提供一个Hooks特性的概览。 一. 什么是Hook? Hooks是一个函数。它能像钩子一样，让你在函数组件的内部也能“钩住”React …"}, {"id": "6844903508525711368", "title": "对React一些原理的理解", "desc": "随着项目开发的深入，不可避免了遇到了一些问题。刚开始出现问题时很懵，不知道该怎么解决，原因就是对React的原理理解的不够透彻，不知道问题出在哪。在解决问题的过程中，也逐渐深入了解了React的一些原理，这篇文章就来分享一下我对React一些原理的理解。 本文是《使用React…"}, {"id": "6908617982407081992", "title": "手写简易React Hooks", "desc": "在 React 16.8 版本出现了React Hooks， 目标是让函数组件能彻底取代Class组件， ⼲掉state、⽣命周期这些概念。它可以让你在不编写 Class 的情况下使用 state 以及其他的 React 特性。 useState 唯一的参数就是初始 state…"}, {"id": "6844903715770466311", "title": "[译] Netflix 的 Web 性能案例研究", "desc": "提纲：Web 性能优化没有银弹。简单的静态网页得益于使用极少 JavaScript 代码的服务端渲染。库的谨慎使用可以为复杂的页面带来巨大的价值。 Netflix 是最受欢迎的视频流服务之一。自 2016 年在全球推出以来，公司发现许多新用户不仅通过移动设备完成注册，而且还使用…"}, {"id": "6844903566801371149", "title": "React源码分析 - 组件初次渲染", "desc": "React也写了有一段时间了，不了解下ta的原理都不好意思和别人说自己会React...所以看了一些源码分析的文章，自己也撸了一遍React的源码【真是有点绕】，算是搞明白了React的原理。 但是最近给一个妹纸解释React原理的时候，把她说蒙圈了...很受伤，本着面向妹纸编…"}, {"id": "6844903855373697031", "title": "改造create-react-app 通过npm命令动态打包文件", "desc": "前言 因为公司有需求需要在做成通过 npm 命令动态打包某个文件，有一些页面是相同的可以被继承的，这样不会导致以后有一些共同的地方修改需要每一个项目都修改一遍比较麻烦（以后项目多了就太残酷了😱😱） 这"}, {"id": "6844903793759354893", "title": "react同构实践——实现自己的同构模板", "desc": "正常的网页运行，需要生成dom，在dom树loaded之后由js绑定相关的dom事件，监听页面的交互。服务端并不具备dom的执行环境，因而所有的服务端渲染其实都是返回了一个填充了初始数据的静态文本。在react中，除了常用的render这个用于生成dom的方法，还提供了rend…"}, {"id": "6844903655292796935", "title": "React 16.x折腾记 - (3) 结合Mobx实现一个比较靠谱的动态tab水平菜单,同时关联侧边栏", "desc": "实现的思路有点绕,有更好的姿势请留言,谢谢阅读。"}, {"id": "6912008293007228936", "title": "React 算法之堆排序", "desc": "二叉堆是一种特殊的堆, 二叉堆是完全二叉树或者近似完全二叉树. 堆排序是利用二叉堆的特性, 对根节点(最大或最小)进行循环提取, 从而达到排序目的(堆排序本质上是一种选择排序), 时间复杂度为O(nlog n). 父节点的值>=子节点的值(最大堆), 父节点的值&#x3C;=子…"}, {"id": "6902602035275759629", "title": "React-Router-Dom中文翻译 1：快速开始", "desc": "要在Web App中开始使用React Router，您需要一个React Web App。如果您需要创建一个，我们建议您尝试create-react-app。这是一个非常流行的工具，可以实现和React Router的完美配合。 首先，安装create-react-app并使…"}, {"id": "6844903502741766152", "title": "antd源码解读（1）-index.js", "desc": "既然上面都已经抛出，为什么这里还需要再次抛出，不过好像是跟什么环境和打包之后的一些操作有关，所以这里一两次抛出。这个地方还需要向大家请教。"}, {"id": "6844903858523783176", "title": "React 30 秒速学：制作星级评分组件", "desc": "定义一个名为“Star”的组件，它将根据父组件的状态为每个星形呈现适当的外观。 在StarRating组件中，使用React.useState()钩子来定义rating和selection状态变量，初始值为props.rating（如果无效或未传入，则为 0 ）和 0 。 创建…"}, {"id": "6911090800499638286", "title": "学习react原理(一)", "desc": "用js对象表示dom信息和结构，当状态变更的时候，重新渲染这个js的对象结构，这个js对象称为虚拟dom。 dom操作很慢，小操作都可能导致重绘，非常消耗性能，相比于dom，js对象操作起来更加快，而且更简单。通过diff算法对比新旧虚拟dom之间的差异，可以批量，最小化的操作…"}, {"id": "6844903928614797319", "title": "在 React 和 umi.js 中使用 Handsontable 电子表格组件", "desc": "Handsontable 是一个带有电子表格外观的JavaScript数据网格组件。它可以轻松地与任何数据源集成，并提供许多有用的功能，如数据绑定、验证、排序或强大的上下文菜单。 @handsontable/react 是 Handsontable 的官方 React 包装器，…"}, {"id": "6908656614895517709", "title": "React-Route的基本实现", "desc": "这里可能会想为什么需要包裹一层Router组件，因为之前我们说过，history模式只是前端路由的一种实现方式还有hash模式等，但是对外提供的组件需要保持一致。 成功就返回对应的组件，如果失败就返回null, 由于react对于null元素不进行渲染，所以就实现了只渲染匹配到…"}, {"id": "6844903549004939272", "title": "React全家桶构建一款Web音乐App实战（六）：排行榜及歌曲本地持久化", "desc": "上一节使用Redux管理歌曲相关数据，实现核心播放功能，播放功能是本项目最复杂的一个功能，涉及各个组件之间的数据交互，播放逻辑控制。这一节继续开发排行榜列表和排行榜详情，以及把播放歌曲和播放歌曲列表的持久化到本地。步入主题 使用chrome浏览器切换到手机模式输入QQ音乐移动端…"}, {"id": "6844903782434734093", "title": "React入门系列 - 5. 表单与变量的关联", "desc": "5. 表单与变量的关联 在了解表单的时候，我们需要了解一个概念受控组件和非受控组件。 受控组件就是React可以控制这个组件内部所有的东西，比如设置控件的value,可以监听到这个组件改变事件onChange。但是，有些Html控件无法让React控制，典型的就是input t…"}, {"id": "6844904159360073742", "title": "React.createElement", "desc": "本文主要学习React.createElement()API的应用。在学习之前，我们需要知道React的几个基础核心概念，React Element，React Component，React Instance不熟悉的童鞋推荐阅读下文。 React Components, El…"}, {"id": "6844903833601048589", "title": " React: 事件处理和绑定方法", "desc": "注意要显式调用 bind(this) 将事件函数上下文绑定要组件实例上，这也是 React 推崇的原则：没有黑科技，尽量使用显式的容易理解的 JavaScript 代码。 React 实现了一个“合成事件”层（synthetic event system），这个事件模型保证了和…"}, {"id": "6844903502045511688", "title": "【翻译】React v16.0 官方博客升级指引", "desc": "我们非常激动地宣布 React v16.0 发布了！这些变更包含了一些存在已久的特性，包括碎片（fragments），错误边界，portals，支持自定义 DOM 属性，提升[服务端渲染]以及减小库的大小。"}, {"id": "6844903848910258183", "title": "做一个基于react-scripts的脚手架", "desc": "create-react-app作为facebook官方的react脚手架是相当好用的。主要设计原理是将配置好的如Webpack，Babel，ESLint，合并到react-scripts这npm包中，用户就可以开箱即用。很多开发者都在这基础上进行改造开发。注意react-sc…"}, {"id": "6844903600456466445", "title": "redux源码解读", "desc": "因为就得去实习了。所以打算开始补补坑。比如自己阅读源码的计划。所以今天来聊聊redux的源码。后续会有redux-thunk和react-redux的源码阅读。搞定这些的话，就开始阅读一个node的库的源码了，比如eventproxy和anywhere。 ，applyMiddl…"}, {"id": "6844904116951449613", "title": "基于React Hook实现图片的裁剪", "desc": "最近做了个电子报项目，用户可在上传的报刊版面图上划出一个个区域，通过OCR图文识别技术，识别出区域文字信息，然后编辑成一条条新闻，可在PC端和手机端点击版面图，查看新闻详情。 ⚠️关键技术点： 用Canvas如何绘制出裁剪框。 本文主要介绍裁剪框的实现过程。 🔥小贴士：如果您…"}, {"id": "6844903625211248647", "title": "走在JS上的全栈之路(二)(1/2)", "desc": "可能你也发现题目出现了1/2，因为如果介绍 GraphQL 和 MySQL 一起，容易忽略掉中间的很多细节过程，还有篇幅本身问题，我准备把他们拆开来说，我仔细想了下，我先从前端的角度看 GraphQL 如何耦合到我们的项目中，看看它能为我们带来什么并且解决了什么问题(虽然拆开说…"}, {"id": "6844903607494508551", "title": "React组件生命周期", "desc": "React组件在生命周期里面大概有两种情况，一种是初次渲染，一种是状态更新导致再次渲染。咱们从组件生命周期的每一步可进行的操作的角度来了解一下。 构造函数在组件初次渲染的时候只运行一次，构造函数里面进行的操作大概有上述代码的三种操作。 在组件挂载之前调用一次。在这个函数里面你可…"}, {"id": "6844903636582006798", "title": "[译] 从设计师的角度看 Redux", "desc": "“花哨的后端技术。” “我听说过，但不知道是干什么用的。好像是一个 React 框架？” “是一种在React 应用中存储管理状态的更好方式。” 这个问题我曾问过不下于40个设计师。上面列出的是他们的经典回答。他们中不少人都知道 Redux 是和 React 一起工作的，并且它…"}, {"id": "6844903543590109198", "title": "深入理解React源码 - 首次渲染 I", "desc": "界面更新本质上就是数据的变化。通过把所有会动的东西收敛到状态(state)，React提供了一个非常直观的前端框架。我也比较喜欢review基于React代码，因为我一般都是从数据结构开始看，这样可以在钻到细节代码之前建立对整个逻辑的初步理解。我也经常会好奇React的实现方式…"}, {"id": "6844903759714353166", "title": "【译】容器组件 (Container Components)", "desc": "对我的代码有最深远影响的一个React模式叫 container component 模式。 Jason Bonta 讲了如何建立高性能组件（High Performance Components），这个演讲讲的就是 container components。 这就是其中的概念…"}, {"id": "6844903677333864462", "title": "非面试向跨域实践详解", "desc": "笔者经常在前端开源群答疑,加上之前的招聘面试经历。发现许多新手前端在问起跨域问题的解决方案,一套一套的,可是实际遇到跨域问题了就不知道怎么解决了。这次写这篇文章从实践角度聊一聊跨域问题。 出于浏览器的同源策略限制，浏览器会拒绝跨域请求。 这就是跨域问题的产生原因,同源策略是用于…"}, {"id": "6844903641703251982", "title": "函数式编程及其在react中的应用", "desc": "开头：初衷是想写一篇介绍redux的分享，结果阅读源码时发现看懂源码还必须先对函数式编程有一点的了解，结果写着写着就变成了一篇介绍函数式编程的文章，也罢... 这篇文章里我将略去一大堆形式化的概念介绍，重点展示在 JavaScript 中一些常见的写法，从例子讲述到底什么是函数…"}, {"id": "6844903844560781325", "title": "React性能优化之Context", "desc": "先来说说Context的作用现在组件之间的通信规范是：父->子：属性绑定props子->父：事件广播（vue之类的emit）react那还是调用父类的props[fn]仅仅是父子两个组件之间这没有问题"}, {"id": "6844903725413187592", "title": "React Conf 2018 专题 —— \t React Today and Tomorrow Part II 视频中英双语字幕", "desc": "简单介绍一下视频的内容，该视频是 React Conf 2018 的开场演讲，题目为 React Today and Tomorrow。 本视频为该演讲的第二部分，在上个视频中 Sophie Alpert 对 React Today 做出了总结并引出了当前 React 面临的三…"}, {"id": "6844903637450244109", "title": "一个很简短的 JS 生成器入门和用法参考", "desc": "在写其他 js 代码时会经常用到 debugger 的东西，能够让当前运行的函数暂停住。生成器函数里的 yield 关键词也能使得函数暂停运行，同时还能用来做数据的输入输出（如果是 debugger，只能手动去逐个 inspect 变量）。 yield 可以当作“断点”。yie…"}, {"id": "6868917159901593614", "title": "由零开始使用 Webpack 来搭建 React 项目", "desc": "今天动动手回顾下 Webpack 基本配置，搭了个 React 项目脚手架，做下笔记。 本文适合有了解过 Webpack 基础配置的人阅读，因为有些基础配置和流程我就不做详细解释了。 babel-loader：使用 Babel 和 webpack 来转译 JavaScript …"}, {"id": "6844903592453734408", "title": "从源码全面剖析 React 组件更新机制", "desc": "React 把组件看作状态机(有限状态机), 使用state来控制本地状态, 使用props来传递状态. 前面我们探讨了 React 如何映射状态到 UI 上(初始渲染), 那么接下来我们谈谈 React 时如何同步状态到 UI 上的, 也就是: 这篇文章会为你解答这些问题. …"}, {"id": "6921576719484715015", "title": "JSX的使用注意点", "desc": "1必须在脚手架环境或者webpack环境下使用浏览器本身是不识别jsx的需要经过babel的转换才能渲染到页面上2React必须导入jsx的本质实际上还是使用React.createElemenrt去"}, {"id": "6844903557724897293", "title": "ES2018新特性", "desc": "AtthelatestTC39meetingthenewfeaturesthatwillmakeitintothe“ECMAScript®2018LanguageSpecification”(ES20"}, {"id": "6844903871345623053", "title": "React 的未来，与 Suspense 同行", "desc": "自从 React 团队发布他们的 16.x 愿景以来，已经风靡了整个社区。它添加了一些非常酷的东西：Hooks、惰性加载、Suspense 和缓存 API。 这不是又一篇关于如何编写 Hook 的文章，而是对 React 未来的期待！如果你从没有听说过 React Hooks …"}, {"id": "6844903849082241037", "title": "React setState源码阅读", "desc": "不卖关子，先揭晓答案，4 次 log 的值分别是：0、0、2、3。 若结果和你心中的答案不完全相同，那下面的内容你可能会感兴趣。 同样的 setState 调用，为何表现和结果却大相径庭呢？让我们先看看 setState 到底干了什么。 setState 只在合成事件和钩子函数…"}, {"id": "6930979537685577742", "title": "深入浅出的学习react[学习笔记22]", "desc": "React-Router 是 React 场景下的路由解决方案，本讲将学习 React-Router 的实现机制，并基于此提取和探讨通用的前端路由解决方案。 完成快速上手。 本着尽快进入主题的原则，这里用一个尽可能简单的 Demo 作为引子来帮助大家快速地把握 React-Ro…"}, {"id": "6844903607045718029", "title": "[译] 深入 React 高阶组件", "desc": "本文面向想要探索 HOC 模式的进阶用户，如果你是 React 的初学者则应该从官方文档开始。高阶组件（Higher Order Components）是一种很棒的模式，已被很多 React 库证实是非常有价值的。在本文中，我们首先回顾一下 HOC 是什么、有什么用、有何局限，…"}, {"id": "6844903505564549133", "title": "React 模态框秘密和“轮子”渐进设计", "desc": "今天上午组内小朋友们谈到 React 实践，提到 React 模态框（弹窗）的使用。我发现很多一些 React 开发者对于 React 模态框的具体设计思路和实现存在一些疑惑。因而特写此文，分享我对模态框这个“重要且典型”的前端交互，在 React 框架里实现的一些想法。准备时…"}, {"id": "6844903843315073037", "title": "跟着 React 官方文档学 Hooks", "desc": "这篇文章两个月之前写的，看了一下官网文档没啥变化，就发出来了。如果有什么错误，欢迎指出~ 多个useState时，React依赖于每次渲染时钩子的调用顺序都是一样的(存在与每个组件关联的“存储单元”的内部列表存放JavaScript对象)，从而实现钩子与状态的一一对应关系。 s…"}, {"id": "6844904205954580487", "title": "react之生命周期API的总结", "desc": "这是一片记录react生命周期的文章。博主最近在重读react官网，想对react有更深度的理解。如果你同样对react这个优秀的框架抱有兴趣，欢迎联系我一同探讨！！文中有描述含混不清和错误的地方，望不吝赐教，直接指出 1. 基础概念 Unmounting：组件卸载。即他的父组…"}, {"id": "6844903701585330183", "title": "React v16.6 新特性介绍", "desc": "10月23日，React发布了16.6版本，在此版本中带来了一些非常有用的新特性。主要的新特性包括: React.memo() 是能作用在简单的函数组件，类似于React.PureComponent对于class组件的作用。它本质上是一个高阶函数，达到的效果就是，自动帮组件执行…"}, {"id": "6844903641527091207", "title": "【翻译】如何在React中使用async/await (componentDidMount Async)", "desc": "create-react-app 构建的项目支持开箱即用。 但是如果你想在自己搭建的webpack配置的项目中使用，你可能会遇到 regeneratorRuntime is not defined 的异常错误。 如果你遇到了这个错误还想在React中使用async/await,…"}, {"id": "6844903586019672077", "title": "讲讲今后 React 异步渲染带来的生命周期变化", "desc": "如果说你是一位经验丰富的 React 工程师，看到这边文章讲的是 React 的生命周期，已经看过无数篇关于 React 生命周期的文章的你，可能有关闭页面的想法。 请不要急着退出，我想讲一些不一样的、来自未来的。 大家都知道，现在关于 React 生命周期的解析、教程、深入解…"}, {"id": "6861607533950435336", "title": "react-router-dom 源码浅析", "desc": "​ 上篇文章中介绍了 React Router 的一些基本用法，这一篇文章将对其源码进行浅析。在本篇幅中，也会搞清楚上篇有关的几个问题： ​ ok，在这以前，你需要先在github 上 clone 一份react-router代码，目前最新版本是 5.2.0。 ​ 文件目录在这…"}, {"id": "6844904111889088525", "title": "一文搞懂长列表优化和虚拟滚动", "desc": "写在前面还⭐的基于react-hooks和react-virtualized写的虚拟滚动搭配上拉下滑加载的scroll组件🌟🌟https://github.com/DavidWong9785/reac"}, {"id": "6960860120381128735", "title": "React事件绑定时this指向问题解决以及事件传参", "desc": "React事件绑定中的this指向问题 当时如果这是我有一个需求，我点击以下按钮，来获取我们state中的数据。 这里为什么会出现这个问题呢？因为btnfun()函数并不是我们主动调用的，而是当触发b"}, {"id": "6850418118141935624", "title": "React实战 - 如何更优雅的使用 Antd 的 Modal 组件", "desc": "当然，一般来说，我们写的 Modal 不会像官网里的例子这么的简单，毕竟这么简单的话会更倾向于使用类似于 Modal.confirm 等 API 直接调用弹出就好了。我们可能会对 Modal 进行二次封装，里面写一些代码逻辑及可能是固定的譬如 title 直接写在组件内，然后把…"}, {"id": "6844903909937381389", "title": "react-router源码解析", "desc": "上篇文章介绍了前端路由的两种实现原理，今天我想从react-router源码分析下他们是如何管理前端路由的。因为之前一直都是使用V4的版本，所以接下来分析的也是基于react-router v4.4.0版本的（以下简称 V4），欢迎大家提出评论交流。Let's get star…"}, {"id": "6844904006079217672", "title": "超性感的React Hooks（二）再谈闭包", "desc": "如果你一天没有真正理解它，你就应该继续学习它。 曾经我去找工作面试的时候，我最讨厌别人问我闭包，因为我说不清楚。现在我面试别人了，却又最爱问闭包，因为闭包真的能直接的检验你对JS的理解深度。可能够回答上来的人真的很少。 两年以来我面试过估计200多人，其中技术能力最强的是阿里P…"}, {"id": "6978808528391634958", "title": "为 react 添加双向绑定 hook", "desc": "为 react 添加双向绑定 hook 最近换了一家新公司，用的技术栈react为主，所以上周紧急的看了一下react相关的文档，也对照文档写了几个 demo，不过在开发阶段我的体验还是蛮差的。 生态"}, {"id": "6897948438730637326", "title": "基于antd开发的一个可编辑表格组件", "desc": "组件简介基于antd的Table、Form、等组件封装的一个可编辑表格组件，支持单行编辑、多行编辑，编辑之后数据自动保存更新，简化控件之间的联动实现，简化表格类数据编辑啥也不说了直接上代码：基础使用，"}, {"id": "6980653621230714887", "title": "2020 动手写个 react (3)", "desc": "今天分享一下在 React 如何创建一个组件 组件可能是函数还可能是类，我们知道只要继承 Component 类就是 react 的组件。"}, {"id": "6844903891432112142", "title": "为 React 赋能的 concent 是什么，何以值得一试？", "desc": "concent是一个专为react提供状态管理服务的框架，提炼现有各大框架的精华，以及社区公认的最佳实践，通过良好的模块设计，既保证react的最佳性能又允许用户非常灵活的解耦UI逻辑与业务逻辑的关系，从整体上提高代码的可读性、可维护性和可扩展性。 concent对模块的定义是…"}, {"id": "6996715913684713486", "title": "build-your-own-react系列（一）", "desc": "前言 作为这个系列的开端，这个个系列是笔者想学习React源码时找到的博客外网博客，其中所有的内容都是根据外网博客整理而来，这里附上外网链接，英文能力过关的同学可以直接略过我整理的博客，去拜读大佬的原"}, {"id": "6844903654256803847", "title": "React 16.x折腾记 - (1) React Router V4 和antd侧边栏的正确关联及动态title的实现", "desc": "一如既往,实战出真理，有兴趣的可以瞧瞧,没兴趣的大佬请止步于此。 公司最近打算重构整个后台管理系统，把老的两个系统整合在一起。 说做就做,用最新的webpack4 搭了个架子,开始折腾(因为比较新,更新依赖很容易出问题)。 等项目完毕再把脚手架放出来,估计webpack5都出来…"}, {"id": "6922286595290693646", "title": "重构B端 😭 表单篇", "desc": "随着业务的庞大。B端的业务越来越重，导致后面的需求越来越难满足，人在工位坐，锅从天上来，一个小前端就地开启了重构之旅 1. 梳理待重构的B端 上面是待重构 B端 的结构图，由 PHP 编写，利用约定的字段上传 JSON 文件，让 Controller 读取文件配置 在 DB 生…"}, {"id": "6844904178121179149", "title": "动态刻度可视化组件实现", "desc": "之前有个网友问我了一个很有价值的问题, 有关实现数据可视化的问题, 但是这个可视化问题不是一般的柱状图, 折现图之类的,而是不规则刻度的数据可视化.所以笔者思考了一下决定自己实现一个动态刻度可视化组件的方案, 来解决这一类的需求. 以上就是笔者挖掘的通用需求,当然有其他需求也可…"}, {"id": "6977183772345106446", "title": "开始使用React Cosmos", "desc": "简介 React的众多卖点之一是，用户可以构建组件并在特定的代码库中重复使用它们。在React Cosmos开发工具的帮助下，你可以进一步发挥这一功能。 React Cosmos用于构建孤立的、可扩展"}, {"id": "6844903970150809614", "title": "开发一个前端系统生成工具的实现思路", "desc": "最近两三个月的时间，老大一直带着我们进行前端系统生成工具的开发任务，目前在开发2.0的版本，1.0版本只是简陋的跑起来了，并且上线了一个项目，细节和功能还很不完善。2.0的版本基本完成80%左右。 期间一直想记录实现一个生成工具的开发的过程，但前期从0~1的开发过程中，我们并不…"}, {"id": "6976912405355823111", "title": "列表&Key(精读React官方文档—08)", "desc": "React中将元素转换为列表 类似map的方法 渲染多个组件 将数组中的每个元素变为li标签 把整个 listItems 插入到 <ul> 元素中，然后渲染进 DOM： 基础列表组件 把上面介绍的例子"}, {"id": "6911481579651268616", "title": "umi-request 统一异常处理实践", "desc": "本人在工作中用到了 umi-request，百度谷歌搜了一遍，感觉都没找到超过 3 篇合适且含代码的文章，因此只能自行实践总结了。 umi-request 与 axios &#x26; xhr 不太一样，它是基于 fetch 实现的，因此它只有在网络错误的情况下，才会抛出错误（…"}, {"id": "6990162313256894471", "title": "各流派 React 状态管理对比和原理实现", "desc": "1. 前言 在 React 诞生之初，Facebook 宣传这是一个用于前端开发的界面库。在大型应用中，如何处理好 React 组件通信和状态管理就显得非常重要。 为了解决这一问题，Facebook "}, {"id": "6999850326333325343", "title": "8月更文挑战｜react手写实现渲染JSX普通版", "desc": "React是用于构建用户界面的`JavaScript`库， 起源于`Facebook`的内部项目，目前在前端社区也是非常的流行作者也用了很久，这段时间阅读了部分react渲染的核心源码"}, {"id": "6999886777666240548", "title": "React 小册 ｜ Redux 入门 👾", "desc": "Redux 由 Flux 演变而来 是一套管理公共状态的第三方工具 虽然不是 React 官方开发 但已经成为 React 管理状态事实上的标准"}, {"id": "7005586803843399688", "title": "React中setState究竟是异步的还是同步的？", "desc": "setState()的使用注意： 1.不要直接修改state 2.state在React的合成事件中更新是异步的 当我第一次点击时，调用了handleChangeCount的方法，然后调用this.s"}, {"id": "6984547134062198791", "title": "最熟悉的陌生人rc-form", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ rc-form 是谁? 我们也许会经常使用例如 Ant Design、Element UI、Vant 等第三方组件库来"}, {"id": "6991765115150270478", "title": "写给vue转react的同志们（4）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "7003236484350246943", "title": "React 、vue 中Key 的作用", "desc": "虚拟DOM中key 的作用： 旧虚拟DOM中找到了与新虚拟DOM相同的Key： 1.若虚拟DOM中内容没变，直接使用之前的真实DOM 2.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中"}, {"id": "7001441619123798029", "title": "React useEffect 使用指南", "desc": "useEffect 是在 React 文档中介绍的第二个 React hook。 从命名可知，与 Effect 副作用有关，什么是副作用？useEffect 的调用时机又是什么呢？"}, {"id": "7005870036724219912", "title": "React 鼠标事件 之 div 拖动", "desc": "React 鼠标事件 之 div 拖动 ===需要关注的三个方法=== onMouseDown 按下 onMouseMove 拖动 onMouseUp 抬起 实现步骤 设置window 按下 抬起事件"}, {"id": "6996316715525079076", "title": "React 入门学习（一）-- 基础知识以及 jsx语法", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 先附上React官网 ，有很多问题都要通过查询官方文档来解决，要学会查文档~ 一、React 简介 1. 关于 React 整几个面试题来"}, {"id": "7000953198487797791", "title": "在前端中，如何更好地做技术选型？", "desc": "大家好，我山月。 由于业务需求，我需要一个 React 的弹框组件，我应如何快速选择一个合适的 npm 库？ 一、搜索 在错误的网址进行搜索，事倍功半: 某度 在正确的网址进行搜索，事半功倍: npm"}, {"id": "7004091434613604389", "title": "useEffect 课堂笔记", "desc": "useEffect 可以说是 React hooks API 中最常用的一个函数了，它接收两个参数： 副作用回调函数 依赖项数组 其中，回调函数执行的次数完全依赖于依赖项数组，会出现以下三种情况。"}, {"id": "7003256927820087333", "title": "前端开发之高阶函数", "desc": "前言 高阶组件在React圈子中是一个很常见的概念，React奉行原则之一就是使用纯函数编程。 但是在Vue圈子大家看起来讨论得比较少，在Vue这边推崇是易用、渐进式开发，所以我们在开发Vue的时候看"}, {"id": "7004075356000878605", "title": "JSX的基础语法和使用「三」", "desc": "一、Vue和React的区别 Vue是MVVM，React是MVC Vue中的视图层是基于template来实现的，并基于Vue-template-compiler来实现模板编译解析「把模板语法虚拟D"}, {"id": "6999070506984931359", "title": "React 入门学习（三） -- 生命周期 LifeCycle", "desc": "引言 在 React 中为我们提供了一些生命周期钩子函数，让我们能在 React 执行的重要阶段，在钩子函数中做一些事情。那么在 Reac"}, {"id": "6996808176381198366", "title": "React入门学习（二） -- 面向组件编程", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 一、组件的使用 当应用是以多组件的方式实现，这个应用就是一个组件化的应用 渲染类组件标签的基本流程 React 内部会创建组件实例对象 调"}, {"id": "6943769360758472735", "title": "打通任督二脉的前端环境变量 — env", "desc": "环境变量 （environment variables）这个概念，在前端工程化盛行之时，便悄悄的进入了前端的视野。前端远古时代没有工程化的概念，开发环境、测试环境、生成环境全靠大家手动配置。而现如今 webpack 、 snowpack 、 rollup 等打包工具大行其道，我…"}, {"id": "6989158134530965512", "title": "我们是如何封装项目里的共用弹框的", "desc": "项目里的弹框越来越多，业务模块共用的弹框也比较多。在刚开始的阶段，有可能不是共用的业务弹框，我们只放到了当前的业务模块里。随着迭代升级，有些模块会成为通用弹框。"}, {"id": "6889247428797530126", "title": "我在工作中写React，学到了什么？性能优化篇", "desc": "我工作中的技术栈主要是 React + TypeScript，这篇文章我想总结一下如何在项目中运用 React 的一些技巧去进行性能优化，或者更好的代码组织。 性能优化的重要性不用多说，谷歌发布的很多调研精确的展示了性能对于网站留存率的影响，而代码组织优化则关系到后续的维护成本…"}, {"id": "6844903709927800846", "title": "30分钟精通React Hooks", "desc": "——拥有了hooks，你再也不需要写Class了，你的所有组件都将是Function。 ——拥有了Hooks，生命周期钩子函数可以先丢一边了。 ——既然Class都丢掉了，哪里还有this？你的人生第一次不再需要面对this。 这样看来，说React Hooks是今年最劲爆的新…"}, {"id": "6903888714926129159", "title": "React-组件间通信", "desc": "Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。 创建一个 Context 对象。 当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 co…"}, {"id": "6844903991239802893", "title": "React数据流与PureComponent", "desc": "自顶向下，单向数据流是React的特点之一，state被对应的组件所拥有，state只能向下传递。 当组件内部使用setState更新state数据时，组件会调用render()方法，因为我们改变了组件的内部状态。 可以看到有Father2、Son1、Son2组件调用了rend…"}, {"id": "6844903502259437582", "title": "Immutable.js - 可持久化数据结构以及结构分享", "desc": "将数据视为不可变，将给你带来很多好处。事实上，这是也React背后的原理：React的元素是不可变的。 但是用Immutable.js有什么好处呢？"}, {"id": "6844903726348500999", "title": "以jq为案例看套餐服务---外观模式", "desc": "套餐服务--外观模式，属于大类结构型设计模式的一种，通常是为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口让使用者对子系统的接口更加容易访问。 备注：本文的案例以es5为主，部分会涉及jq的代码，大家理解思想就好。如果你有es6以及目前三大框架的实例应用案例，欢迎分…"}, {"id": "6844903622208454670", "title": "Parcel React 开发服务器热更新实战", "desc": "Parcel 是 Web 应用打包工具，适用于经验不同的开发者。它利用多核处理提供了极快的速度，并且不需要任何配置。 官网教程没有实现devSever和动态更新相结合具体部署步骤。 本文通过极少的配置项实现基于Parcel打包，React开发环境实时热更新，作为官网教程的延申。…"}, {"id": "6844903510232809479", "title": "魔幻语言 JavaScript 系列之 call、bind 以及上下文", "desc": "从一行代码来看看 JavaScript 是一门多魔幻的语言，顺便谈谈 JavaScript 中的 call、apply 和 bind"}, {"id": "6844903871077171214", "title": "【译】开始学React — 一个概括性的演练教程", "desc": "我一开始学Javascript的时候就听说过React了，但是我得承认当我看了一眼React后，它吓到我了。我看到了一堆HTML混合着Javascript，然后我想，这不是我们努力避免的事情吗？React到底有什么大不了的？ 没有过多关注React，相反，我只是关注于学习Van…"}, {"id": "6844903640952471565", "title": "React组件详解", "desc": "众所周知，组件作为React的核心内容，是View的重要组成部分，每一个View页面都由一个或多个组件构成，可以说组件是React应用程序的基石。在React的组件构成中，按照状态来分可以分为有状态组件和无状态组件。 所谓无状态组件，就是没有状态控制的组件，只做纯静态展示的作用…"}, {"id": "6844904004015620104", "title": "React学习笔记——初识React Hooks篇", "desc": "——拥有了hooks，你再也不需要写Class了，你的所有组件都将是Function。 ——拥有了Hooks，生命周期钩子函数可以先丢一边了。 ——既然Class都丢掉了，哪里还有this？你的人生第一次不再需要面对this。 从这些点来看，函数组件无疑是更好的选择，没有任何副…"}, {"id": "6844903587798073351", "title": "React 组件设计", "desc": "对于不会随时态发生变化的 State, 我们则称为值， 基于这点, 可以将组件分为无状态有值, 无状态无值, 有状态有值, 有状态无值 四类 UI 组件. 由此我们可以推测出, 在一个应用系统中, 不仅仅是状态的管理更是对值的管理. 没有自身状态, 同时也不接受外部传值的纯 U…"}, {"id": "6844904094323179528", "title": "React Hook 不完全指南", "desc": "React Hook是React16.8.0版本之后提出的新增特性，由于之前的项目都不怎么用到React，因此也就匆匆了解一下，最近因为换工作，主要技术栈变为React了，所以需要着重研究一下React的一些特性以更好地应用到项目开发中和更好地进行知识沉淀。 Hook是一个特殊…"}, {"id": "6844903694769586184", "title": "管理系统的登录控制？手写一个发布订阅模型！", "desc": "最近做了一个后台的项目，既然是后台管理系统，登录的控制自然是少不了的。 接到需求——后台系统！花了几乎半天搞出来了Webpack配置、搞出来了React Router、搞出来了 React 代码基本的结构，下一步就是搞所谓的“登录逻辑”了。 虽然离开React有些时日了，但是它…"}, {"id": "6844903503379300365", "title": "函数式编程在Redux/React中的应用", "desc": "本文简述了软件复杂度问题及应对策略：抽象和组合；展示了抽象和组合在函数式编程中的应用；并展示了Redux/React在解决前端状态管理的复杂度方面对上述理论的实践。这其中包括了一段有趣的Redux推导。"}, {"id": "6946212656067903496", "title": "面试必备--节流和防抖", "desc": "防抖(debounce)原理实现注意细节函数中this的指向问题函数的参数如何获取应用场景scroll事件滚动出发搜索框输入查询表单验证按钮提交事件浏览器窗口缩放等等节流(throttle)原理实现时"}, {"id": "6912829351239090183", "title": "React中的Hooks", "desc": "HooksuseEffectHook认识useEffectHookuseEffect可以来帮助我们完成一些类似于class中生命周期的功能事实上，向我们之前的话，在class组件里面，我们可能会在co"}, {"id": "6946077591325376519", "title": "万物皆组件，带你一文详解react-router渲染的三种方式", "desc": "react-router中奉⾏⼀切皆组件的思想，路由器-Router、链接-Link、路由-Route、独占-Switch、重定向-Redirect都以组件形式存在。 Route渲染优先级：children>component>render。 三者能接收到同样的[route p…"}, {"id": "6946077576821473310", "title": "基于redux的弹窗类组件设计与实现（超级干货总结）", "desc": "弹窗类组件的要求弹窗内容在A处声明，却在B处展示。react中相当于弹窗内容看起来被render到⼀个组件⾥⾯去，实际改变的是⽹⻚上另⼀处的DOM结构，这个显然不符合正常逻辑。但是通过使⽤框架提供的特定API创建组件实例并指定挂载⽬标仍可完成任务。 传送⻔，react v16之…"}, {"id": "6844903502007762951", "title": "《Node.js在CLI下的工程化体系实践》成都OSC源创会分享总结", "desc": "关键点在于package.json里面的bin字段。模块全局安装，对于类unix系统，在/usr/local/bin目录创建软链接；对于windows系统，在C:\\Users\\username\\AppData\\Roaming\\npm目录创建软链接。 模块局部安装，会在项目内的.…"}, {"id": "6844903655993245703", "title": "eventbus-cjs 基于JavaScript装饰器（Decorator）实现的通信库", "desc": "1. 安装 vue-cli 3.x 以默认支持 Decorator。 2. 引入 eventbus-cjs 3. 使用 欢迎大佬们吐槽。"}, {"id": "6844903565111083022", "title": "[英] 深入理解React源码－界面更新（单个组件）VIII", "desc": "UI updating, in its essential, is data change. React offers a straightforward and intuitive way to program front-end Apps as most moving pa…"}, {"id": "6844903570668519431", "title": "追溯 React Hot Loader 的实现", "desc": "如果你使用 React ，你可以在各个工程里面看到 Dan Abramov 的身影。他于 2015 年加入 facebook，是 React Hot Loader 、React Transform、redux-thunk、redux-devtools 等等的开发者。同样也是 R…"}, {"id": "6956855741701423117", "title": "React合成事件？", "desc": "react合成事件指的是react用js模拟了一个Dom事件流。（fiber树模拟Dom树结构） 合成事件的事件流在fiber树中发生捕获和冒泡。 从点击输入框开始 当你点击input输入框，reac"}, {"id": "6844903777460289550", "title": "[译] React v16.8： 含有Hook的版本", "desc": "Hook 可以让我们不用写一个 class 就能使用 state 和其他的 React 特性。我们也可以构建我们自己的 Hook 来在组件之间共享可重复使用的有状态逻辑。 Hook 介绍解释了我们向 React 添加 Hook 的原因。 Hook 概览 是一个对内置 Hook …"}, {"id": "6844903949447725069", "title": "react学习笔记——react构建在线调色工具", "desc": "作为前端攻城狮，日常工作中难免要写CSS，写CSS时，就一定会涉及到色彩的选择，这时，我们一般会在一些设计的网站上查找配色素材。这样的网站或者工具有很多，但是“不折腾就难受”的性子，利用业余时间，使用react开发了一个简易的色彩在线调试工具。 工具包含提供了常用的色板和渐变色…"}, {"id": "6844903620870144008", "title": "使用 React 新的 Context Api 来做状态管理", "desc": "A react state management library using new context api. 中文介绍，点击这里 npm i mini-context-store --save More examples click here A react compone…"}, {"id": "6977742804843921444", "title": "let还是const", "desc": "导语 已React 为例，聚焦在一个类的方法中。 然后，拔剑吧！少年，是熟悉的味道。 正文 0 劝人多用const 是好的，但下面的观点多多少少有点像耍流氓。 既然函数执行完它都没有变，就应该声明为常"}, {"id": "6844903636498120717", "title": "React component re-render", "desc": "这两天在看项目的渲染优化题，决定总结一下，发现不论是代码写法和组件规划以及列表之间的交互，都是有可能会引起性能问题的罪魁祸首。 但是大家都知道，react的实现思想就是virtual DOM，每次state的改变都会引起re-render，不管state里的值是否真正用到了组件…"}, {"id": "6844903697558798350", "title": "React Native 小记 - TouchableOpacity 单次点击无效", "desc": "一般是焦点问题，解决方法：即在 ScrollView 标签内，根据情况设置其 keyboardShouldPersistTaps 属性值为 always 或者 handled 。详细解决过程如下： 收到测试人员提交的 Bug：帐号密码输入完毕按返回键关闭键盘后，点击登录没反应，…"}, {"id": "6844903640948441101", "title": "React 回忆录（四）React 中的状态管理", "desc": "Hi 各位，欢迎来到 React 回忆录！👋 在上一章中，我介绍了使用 React 渲染界面元素的方法，以及在这个过程中蕴含的“组件化”想想。在本章中，我们将把目光聚焦于 React 组件内部的状态管理，去认识或重新思考以下三个核心概念： 01. React 中的数据 进一步…"}, {"id": "6868881559689756686", "title": "实名反对 Redux，因为我有更好的 immutable 状态管理器", "desc": "研究状态管理也算不短时间，对状态管理的本质也渐渐有了自己的认识。在状态管理器领域，有两大流派，即以 redux 为代表的 immutable 流派和以 mobx 为代表的 mutable 流派。从数据流的纯粹性讲，我们更喜欢 immutable，但从写代码的便捷性讲，我们更喜欢…"}, {"id": "6844903606181691405", "title": "ReactNative开发的一些经验", "desc": "本文主要是本人从Android原生到开发出一套完整的RN模块嵌入原生的经验。 他们二者是RN的数据核心。state主要是自身数据更新，props主要是父组件传入到子组件中使用，也会有自身的默认props。 对于props，建议一般都传入子组件，防止以后进行修改。特定的flag则…"}, {"id": "6844903901708337166", "title": "React基础(4)-理清React的工作方式", "desc": "对于JS,JQ的实现方式,主要工作是在操作DOM,获取元素,添加事件,执行操作。对于简单的业务实现,是没有什么问题的,但是当DOM结构层级比较深,要进行一些复杂的逻辑操作时,此时,不断的操作DOM就变得非常恶心了的,这里并不是忽视原生JS,即使有了一些上层的框架简化了操作,但核…"}, {"id": "6844903782422151175", "title": "React干货(二)：提取公共代码、建立路由Store、Check路由参数类型", "desc": "路由是程序状态的切片。路由中包含的信息越多越细，程序的切片就能越多越细。 路由是程序的状态机。跟 ReduxStore 一样，路由也是一种 Store，我们可以称其为 RouterStore，它记录了程序运行的某些状态，只不过 ReduxStore 存在内存中，而 Router…"}, {"id": "6844903591384203272", "title": "Swoole+React 实现的聊天室", "desc": "本人为了更加便利的开发，自行实现了中间件，封装了请求数据体，利用jwt实现api的token验证，集成了Laravel的ORM，再次封装了一套适合api编写流程的数据请求流程，具体可以看App/Base目录下的Model类，具体开发步骤详见代码即可。 其余功能可以添加.....…"}, {"id": "6943849016442486815", "title": "纳米级拆解网易云音乐-开篇-走马灯", "desc": "三月过去了好几周,这天终于丢下了寒冬腊月的影子,慢慢开始热了起来,晴天真好,可以看到故事里的小黄花,又可以抖擞抖擞精神开始折腾起来了. 万事开头难,难上加难就是上来就啃一块硬骨头. 之所以选它做第一个组件除了它有点难度之外,还因为这家伙天天在我眼前滚滚滚,我没法不注意到它. -…"}, {"id": "6844903916958810120", "title": "基于React 框架开发 DragScroll组件-(1)", "desc": "最近在开发一个思维导图的库blink-mind-react，在开发这个库的过程中，由于思维导图区域需要可以在视图里面自由移动，实现DragScroll效果。所以开发了这么一个组件。 这是因为在实现思维导图的过程中一些特别的需求需要，暂且不表。 它最开始的size，暂时写死成一个…"}, {"id": "6844904056838684679", "title": "React源码解析之updateHostComponent和updateHostText", "desc": "跟一、updateHostComponent中的(4)相似，文本节点直接渲染出来即可。"}, {"id": "6903891134557519879", "title": "React-Hooks API介绍", "desc": "不要在循环、条件或是嵌套函数中调用Hook;因为React在为组件每次渲染时，保存和读取数据是依赖Hook的执行按顺序来进行的。Hooks会记录下调用的次序以及入参和出参，一旦顺序出错，那么在再次渲染时对应的返回值就会出现问题。 不要在普通的JS函数中调用Hook。Hook只能…"}, {"id": "6898615432870264840", "title": "如何快速搭建一个react项目", "desc": "省时省力，只需专注代码，无需做webpack，babel等配置，create-react-app预先配置好了且隐藏了该配置. 看到这里，你应该对如何使用create-react-app如何搭建一个项目有一个大致的了解了，下期将讲述怎么使用该框架，并会写一些简单的demo从而达到…"}, {"id": "6844903704236130318", "title": "如何开发一个识别二维码的Chrome插件？", "desc": "话说我又写了一个小工具，一个可以读取网页上二维码信息的 Chrome 插件。为什么要做这样一个插件呢，因为平时在浏览网页的时候，经常会碰到需要扫描二维码的情况，而我又不想掏出手机扫一扫。掏出手机经常会打断我的学习/工作常态，还有些时候比如扫描 keynote 二维码，在手机上并…"}, {"id": "6897019195285110791", "title": "业务实践篇2：基于antd的table表格excel简单导出实践", "desc": "食用前提：对antd，react有一定的基础。 antd中table组件的属性介绍在antd官网有详细的介绍。这里主要介绍本文用到的属性。 column.title：列头显示文字。 column.dataIndex：列数据在数据项中对应的路径，这里用的是string类型，故解释…"}, {"id": "6881940688997613575", "title": "React入门（上）", "desc": "React.js 是一个用于构建用户界面的 JavaScript 库,页面的元素由jsx编写生成。 创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。 高效 −React通过对DOM的模拟通过对DOM的模…"}, {"id": "6844903982347845639", "title": "[译]React安装：在现有项目上使用React", "desc": "react是希望被大众逐步接受为初衷所设计的框架，因此你可以在项目中按照需求来使用react，即使知识添加一些零星的交互也是可行的。 大部分的网站项目都不是一个单一页面的应用，你可以在项目中通过几行代码使用react来扩展你的项目或者制作一些可动态使用的组件。 在本节中将会展示…"}, {"id": "6844903503324938254", "title": "antd源码解读（3）- Button", "desc": "Button包括了两个组件，Button与ButtonGroup。"}, {"id": "6844903846821494791", "title": "【译】什么是React Hooks", "desc": "React Hooks 于 2018年10月的React Conf 中引入，作为在 React 函数组件中使用状态和生命周期的一种方法。虽然函数组件之前被称为 无状态组件（FSC） ，但是 React Hooks 的出现，使得这些函数组件可以使用状态。因此，现在许多人将它们视为…"}, {"id": "6844903668806844424", "title": "使用 TypeScript 改造构建工具及测试用例", "desc": "最近的一段时间一直在搞TypeScript，一个巨硬出品、赋予JavaScript语言静态类型和编译的语言。 第一个完全使用TypeScript重构的纯Node.js项目已经上线并稳定运行了。 第二个前后端的项目目前也在重构中，关于前端基于webpack的TypeScript套…"}, {"id": "6844903814177226759", "title": "React组件「设计模式」快速指南", "desc": "函数组件是纯 UI 组件，也称作傻瓜组件, 或者无状态组件。渲染所需要的数据只通过 props 传入, 不需要用 class 的方式来创建 React 组件, 也不需要用到 this 关键字，或者用到 state 什么情况下不使用函数组件？ 如果你需要用到 react 生命周期…"}, {"id": "6844903640512086029", "title": "React源码阅读：概况", "desc": "本文主要介绍一些React的设计思想和相关概念，不管是想要阅读源码还是想深入了解React的同学看过来呀。欢迎指出错误，一起探讨一起进步。 React的相关代码都放在packages里。 React的主要特性就是各种组合而成的组件。由不同人编写的组件可以组合使用，并且实现组件的…"}, {"id": "6906758421430108167", "title": "useEffects", "desc": "useEffect，顾名思义，就是执行有副作用的操作，你可以把它当成componentDidMount, componentDidUpdate, and componentWillUnmount 的集合。它的函数声明如下 需要注意的是，这里的useEffect的第二个参数必须传…"}, {"id": "6844903639799037966", "title": "前端状态管理框架之Redux", "desc": "随着应用程序单页面需求的越来越复杂，应用状态的管理也变得越来越混乱。应用的状态不仅包括从服务器获取的数据，还包括本地创建的数据，以及反应本地UI状态的数据，而Redux正是为解决这一复杂问题而存在的。 用Redux官网的话来概括什么是Redux：Redux是针对JavaScri…"}, {"id": "6850418111775145991", "title": "前端路由、服务端渲染路由以及后端路由", "desc": "因为我们是前端对路由应该加一重视，路由的重要性，代表了就跟你是不是有跳槽的勇气一样。如果连跳槽的勇气都没有，拿什么谈未来？路由就是一次页面的跳槽。是通往理想的道路。搞搞清楚路由之前先要搞明白，路由需要哪些基础知识。 我们知道路由需要的基础知识，就是浏览器url的变化。即我们需要…"}, {"id": "6844903629007093767", "title": "react 之 state 对象", "desc": "接下来，我们就可以在 react 组件内部的 render 方法定义虚拟 DOM 元素时使用挂载在类组件上的 state 对象。 这样，页面上就可以看到，在 root 节点下面已经有一个子节点 p，并且 p 节点显示的内容为 0。 在 react 中提供了一个 setState…"}, {"id": "6971216152944967710", "title": "react源码解析8.render阶段", "desc": "react源码解析8.render阶段 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心ap"}, {"id": "6922399822603370503", "title": "「React」SwipeAction 滑动操作", "desc": "当手指触摸屏幕时候触发，即使已经有一个手指放在屏幕上也会触发。 当手指在屏幕上滑动的时候连续地触发。在这个事件发生期间，调用preventDefault()事件可以阻止滚动。 当手指从屏幕上离开的时候触发。 在 touchmove 中判断滑动时的pageX(记为currentX…"}, {"id": "6911643478183116807", "title": "【译】如何使用 React Ref", "desc": "使用 React ref 和真正理解它轼两回事。说实话，我不确定我是否正确地理解了到目前为止的一切，因为它不像 state 或副作用那样经常使用在 React 中，因为它的 API 在 React 的过去确实经常改变。在这个 React Ref 指南中，我想给你一步一步的介绍 …"}, {"id": "6844903645809475597", "title": "React从零实现-节点创建和渲染", "desc": "暂时可以先把这个当做React中虚拟节点的概念，后面会有一些变化，这里先看做是虚拟节点。上节也提到过babel-plugin-transform-react-jsx 会帮助我帮将JSX转换成以下形式： 函数createElement的第一个参数字符串标签名（此处先忽略组件的情况…"}, {"id": "6844903565681491982", "title": "[译]React全新的Context API", "desc": "翻译水平有限，部分内容比较晦涩，因此可能错误较多，请理解或指教。 介绍用于解决现有局限性的全新Context API。 通常情况下，React里面的数据是按照top-down（parent to child）的顺序，通过props来传递的。但有些时候，跳过多个抽象层级来传递一些…"}, {"id": "6901472816474882055", "title": "在React中随机生成图形验证码", "desc": "各个方法在输入框中定义一个位置存放图形完整代码方便复制粘贴"}, {"id": "6844904024412553229", "title": "React 源码学习（十）：Fiber", "desc": "Fiber 是 React 16 中新的协调引擎。他的主要目的是使 Virtual DOM 可以进行增量式渲染。了解更多 从数据结构来理解 Fiber ，他其实是一个链表数据结构，分别通过 return ， child ， sibling 连接着另一个 Fiber 。同样的也可…"}, {"id": "6844903551550881800", "title": "2017年 JavaScript 框架回顾 -- 前端框架", "desc": "对于 JavaScript 社区来说，npm 的主要功能之一就是帮助开发者发掘所需的 npm Registry 中的库和框架。npm 强大的搜索功能能够帮助找到一组相关的软件包，同时其内置的的文档和使用统计信息，可以帮助开发者决定使用哪一种软件包。"}, {"id": "6844903645943873549", "title": "学习React之前你需要知道的的JavaScript基础知识", "desc": "在我的研讨会期间，更多的材料是关于JavaScript而不是React。其中大部分归结为JavaScript ES6以及功能和语法，但也包括三元运算符，语言中的简写版本，此对象，JavaScript内置函数（map，reduce，filter）或更常识性的概念，如：可组合性，可…"}, {"id": "6844903540977041421", "title": "Mobx浅析与实践", "desc": "对Mobx及响应式编程的一些理解，react结合Mobx的简单实践"}, {"id": "6844903503412854792", "title": "实战react技术栈+express前后端博客项目（6）-- 使用session实现免登陆+管理后台权限验证", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 上一篇文章中，我们已经实现了前后端的登录功能。问题大家可能都已经发现了，当刷新页面的时候，之前登录过的现在得重新登录。显然，这个并不是我们想想要的…"}, {"id": "6844903613265870862", "title": "【翻译】使用React、 Redux 和 SVG 开发游戏（一）", "desc": "这段太长别看：在这系列教程中，你将学会如何使用React和Redux去控制一堆SVG元素来制作一个游戏。这一个系列所带给你的知识也可以让你使用React和Redux去制作其他的动画和特效，并不仅限于游戏。你可以在这里找到第一部分的全部代码：Aliens Go Home - Pa…"}, {"id": "6844903506688606222", "title": "react结合redux和react-router开发大型应用实现按需加载（code spliting）", "desc": "国内基本没有认真介绍这方面的文章，我来介绍下我的设计"}, {"id": "6844903727824896007", "title": "React源代码解析（2）：组件的挂载", "desc": "jsx语法是如何解析为虚拟dom的,接下来我将聊聊虚拟dom是如何挂载到真实dom上的。 我读的是React^15.6.2的源代码,因为最新的React^16.6.3版本，引入了Fiber架构,因为时间有限,Fiber我暂时没弄的太明白，但是它主要作用是优化组件的更新，所以不影…"}, {"id": "6844903605821161479", "title": "你需要Mobx还是Redux？", "desc": "在过去一年，越来越多的项目继续或者开始使用React和Redux开发，这是目前前端业内很普遍的一种前端项目解决方案，但是随着开发项目越来越多，越来越多样化时，个人又有了不同的感受和想法。是不是因为已经"}, {"id": "6844904029391175687", "title": "React-16.9新特性", "desc": "一、新弃用重命名Unsafe生命周期方法弃用javascript:URLs弃用“Factory”组件二、新特性用于测试的一部函数act()使用<React.Profiler>进行性能评估三、显著的bu"}, {"id": "6844903568202268685", "title": "parcel-v1.6.0更新日志（翻译）", "desc": "文章是Parcel的主要开发者devongovett写的, 很值得一看, 于是翻译并发布出来. Parcel更新很迅速. Parcel v1.6.0是继v1.5.0三周后的一个重大更新, 其中包括超过15项新特性, 大量的bugfix和改进. 较为突出的有: ⚛️ 默认支持R…"}, {"id": "6844903639786455047", "title": "React源码阅读：虚拟DOM的初始化", "desc": "本文的主要目的是阅读源码的过程中做下笔记和分享给有需要的小伙伴，可能会有纰漏和错误，请读者自行判断，头一次写阅读代码的文章，可能写得有点乱，有什么问题欢迎一起探讨一起进步。 React的版本为16.4，主分支的代码，只贴出部分关键代码，完整代码请到Github查看。 在阅读源码…"}, {"id": "6844903615434342407", "title": "在实际业务中如何灵活运用受控组件与非受控组件", "desc": "在 web 开发中经常会用表单来提交数据， react 中实现表单主要使用两种组件：受控和非受控。两者的区别就在于组件内部的状态是否是全程受控的。受控组件的状态全程响应外部数据的变化，而非受控组件只是在初始化的时候接受外部数据，然后就自己在内部维护状态了。这样描述可能比较抽象，…"}, {"id": "6844903505908465677", "title": "Redux的函数式编程思想", "desc": "控制流框架Redux是研究函数式编程的极佳实例，因此网络上对其语句分析的文章众多，但绝大多数是描述具体实现，而本文尝试利用函数式编程的数学抽象来映射Redux的编程理念。首先给出函数式编程的基础抽象概"}, {"id": "6844903703913168903", "title": "中介者设计模式——业务实践", "desc": "中介者设计模式和观察者设计模式一样，都是通过消息的收发机制实现的，在观察者模式中，一个对象既可以是消息的发送者也是消息的接收者，对象之间信息交流依托于消息系统实现解耦。而中介者模式中消息发送送方只有一个，就是中介对象，而且中介对象不能订阅消息，只有那些活跃对象（订阅者）才可订阅…"}, {"id": "6844903510954213383", "title": "前端每周清单第 39 期: OpenAI 与 gRPC, \bGitlab 的 Vue 年度总结，GraphQL\b 技术栈漫游", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 React 16.1.0 发布: 本周 R…"}, {"id": "6844903544642863111", "title": "从 React 到 Reason", "desc": "如果你是一个 React 爱好者，开始在各种站点听到有人谈论 Reason 这个新语言，也看见 Jordan（React 作者）说 ReasonReact 将是未来，但你却是不知道从哪下手，那么这篇小教程就是为你准备的。 ps. 有条件的话还是尽量看 Reason 和 Reas…"}, {"id": "6844903638192619533", "title": "如何使用JavaScript控制台改进工作流程", "desc": "作为Web开发人员，很有必要了解如何调试代码。后台开发我们经常使用外部库来记录日志，并在某些情况下格式化显示日志，前端我们会使用断点和控制台，但是我们浏览器的控制台比我们想象的要强大得多。 当我们考虑控制台时，首先想到的是console.log，对吧？但是它比我们想像中使用的方…"}, {"id": "6844904158462476302", "title": "复杂表单分组以及递归失去焦点bug复盘", "desc": "在问题列表中，标准化问题之后，在子问题是输入框修改提交时，需要向上修改列表以及全局的答案对象，而这一过程中可能会导致输入框的丢失焦点的问题。 1 每次修改都要改全局的答案对象，但是在某些特殊题目，比如输入框带有图片类型的时候，会是通过key修改变量的方式，而不是纯函数编程思路的…"}, {"id": "6844903641908789262", "title": "详解Vue Native", "desc": "一家叫GeekyAnts的印度公司开发了Vue Native，基于React Native实现。"}, {"id": "6949728745984884749", "title": "react router页面跳转二次确认弹框及样式、业务逻辑自定义", "desc": "我们在编辑页面时如果需要跳走通常会需要给用户提示，怎么在这个二次确认处自定义样式，加入当前页面的业务逻辑呢？"}, {"id": "6935107313934172168", "title": "React中组件间的通信方式", "desc": "特别注意通过学习React组件间的通信方式，笔者总结以下两个重要的知识点高层级传递给低层级—高层级用非函数如：父传子''低层级传递给高层级''—高层级用函数（callback）如：子传父props传递"}, {"id": "7000264227873095687", "title": "React 入门学习（五）-- 认识脚手架", "desc": "简介 这篇文章主要围绕 React 中的脚手架，来解决一下几个问题 灵魂三问：是什么？为什么？怎么办？ 什么是脚手架？ 为什么要用脚手架？"}, {"id": "6844903944204845070", "title": "技术胖的2019新版React全家桶免费视频（84集）", "desc": "一共84集，从5月4日开始录制，到9月18日完成，5个月时间。如果是一个专业讲师，这进度你会说太慢了，但我的视频都是下班后录制的。今天是个不错的日子，也是我的生日（84年9月18日），标志着我正式进入35岁。在这个特殊的日子里，我献给大家我这将近半年的努力成果，希望更多的小伙伴…"}, {"id": "7005122035286278152", "title": "React hook 实现弹窗", "desc": "平时项目使用弹窗，用 npm 仓库的就可以。 或者antd design 的也不错。 我尝试用react hook 实现一个弹窗。 参数配置参考蚂蚁文档的部分。"}, {"id": "6844903922453200904", "title": "2019年17道高频React面试题及详解", "desc": "以下面试题来源于github项目前端面试指南,那里有超过200道高频前端面试题及答案,目前拥有1400star. 组件化: 其中以 React 的组件化最为彻底,甚至可以到函数级别的原子组件,高度的组件化可以是我们的工程易于维护、易于组合拓展。 天然分层: JQuery 时代的…"}, {"id": "7000593057783480328", "title": "8月更文挑战 | react手写实现渲染虚拟结构Fiber版", "desc": "1、为什么会出现fiber？ 因为在V16版本以前的架构方式在渲染结构包括在更新过程是没有优先级区分的，那么也就是说当你"}, {"id": "6986901019187740708", "title": "如何理解 React 16 事件", "desc": "React 有自己的事件系统，和 DOM 原生的事件系统是完全不一样的，但是到底哪里不一样，和 DOM 原生的事件有什么区别和联系，今天我们来探讨一下。"}, {"id": "7003489634994880520", "title": "useState 源码细致解析", "desc": "事实上，useState 的原理一点也不复杂，我也会努力,让只要使用过 React 的朋友就能看懂。"}, {"id": "7006672325139496996", "title": "create-react-app项目中homepage与PUBLIC_URL的羁绊", "desc": "事情的起因是这样的，在一次用create-react-app构建的项目中，我在项目中同时设置了homepage与PUBLIC_URL的，导致了一系列的异常..."}, {"id": "7005121781057421320", "title": "PC端react实现一键复制图片功能", "desc": "PC端react实现一键复制图片功能 背景：要求前端实现生成二维码并实现一键复制图片， 粘贴的效果图如下： 本文用到的工具库： qrcode.react、b64-to-blob、html2canvas"}, {"id": "6993980747040161799", "title": "大屏可视化项目——李白的流浪地图", "desc": "先放一个预览地址：点击查看效果 gif预览： 适配屏幕 算法 Wp为页面有效宽度，Hp为页面有效高度。 页面左右居中，上下居中。 若页面宽/高＞16/9，就左右留白。若页面宽/高＜16/9，就上下留白"}, {"id": "6844903993278201870", "title": "React 开发必须知道的 34 个技巧【近1W字】", "desc": "通过es6新增class的属性创建的组件此组件创建简单. React 16.3版本后，使用此方法来创建ref。将其赋值给一个变量，通过ref挂载在dom节点或组件上，该ref的current属性,将能拿到dom节点或组件的实例 子组件通过React.forwardRef来创建，…"}, {"id": "6844903975112671239", "title": "这可能是最通俗的 React Fiber(时间分片) 打开方式", "desc": "写一篇关于 React Fiber 的文章， 这个 Flag 立了很久，这也是今年的目标之一。 最近的在掘金的文章获得很多关注和鼓励，给了我很多动力，所以下定决心好好把它写出来。 我会以最通俗的方式将它讲透, 因此这算是一篇科普式的文章。不管你是使用React、还是Vue，这里…"}, {"id": "7004001470882250788", "title": "REACT脚手架的深入探究「二」", "desc": "一、修改默认的端口号 1.1、通过start.js文件修改默认端口号 通过观察package.json文件我们可以发现，在执行yarn start命令的时候，其实是在执行scripts目录下的star"}, {"id": "6844903857135304718", "title": "你要的 React 面试知识点，都在这了", "desc": "摘要： 问题很详细，插图很好看。 React是流行的javascript框架之一，在2019年及以后将会更加流行。React于2013年首次发布，多年来广受欢迎。它是一个声明性的、基于组件的、用于构建用户界面的高效javascript库。 以下是面试前必须了解的话题。 声明式编…"}, {"id": "7006945844041629733", "title": "React源码一：Fiber", "desc": "本系列的文章参考的源码是ReactV17 React架构 React@16之前 在React16之前，react的架构主要大致分为两层： Reconciler： 主要职责是对比查找更新前后的变化的组件"}, {"id": "7005970554524008456", "title": "React Hook使用和自定义Hook", "desc": "一：Hook概念篇 1.hook简介 Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。Hook 为已知的 Rea"}, {"id": "6901466406823575560", "title": "🎉我点了页面上的元素，VSCode 乖乖打开了对应的组件？原理揭秘。", "desc": "在大型项目开发中，经常会遇到这样一个场景，QA 丢给你一个出问题的链接，但是你完全不知道这个页面 &#x26; 组件对应的文件位置。 react-dev-inspector 就是应此需求而生。 可以在 预览网站 体验一下。 需要加一个 webpack loader 去遍历编译前…"}, {"id": "6910863689260204039", "title": "🔖TypeScript 备忘录：如何在 React 中完美运用？", "desc": "一直以来，ssh 身边都有很多小伙伴对 TS 如何在 React 中运用有很多困惑，他们开始慢慢讨厌 TS，觉得各种莫名其妙的问题降低了开发的效率。 其实如果运用熟练的话，TS 只是在第一次开发的时候稍微多花一些时间去编写类型，后续维护、重构的时候就会发挥它神奇的作用了，还是非…"}, {"id": "7004098802870730766", "title": "React 组件如何获取 redux store 中的状态", "desc": "在 redux 当中，用下面两种方式都可以获取到 store 中的状态：在组件里面调用 store.getState() 方法或用 `mapStateToProps` 把状态映射到组件的 props"}, {"id": "6986202846903402503", "title": "组长让我把所有state都放Redux里", "desc": "大家好，我是卡颂。 在我们React进阶源码群里，除了React外，状态管理是最常讨论的话题。 诡异的是，有多个群友说过类似的话： 他们觉得不对，又不知道如何反驳。 今天我们来聊聊Redux、Mobx"}, {"id": "6844903610061422606", "title": "React组件生命周期详解", "desc": "constructor是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor( )方法。当存在constructor的时候⚠️必须手动调用super方法。如果在construc…"}, {"id": "6875608268908003335", "title": "🌈 React 函数式组件优化", "desc": "1. React 性能优化思路 减少重新 render 的次数。 减少计算的量。主要是减少重复计算，对于函数式组件来说，每次 render 都会重新从头开始执行函数调用。 在使用类组件（class）的时候，使用的 React 优化 API 主要是：shouldComponent…"}, {"id": "6844904087561977869", "title": "小册上新 | React SSR 服务端渲染原理解析与实践", "desc": "作者接触并学习React SSR是由于工作的需要，后又经过一段时间的深入学习和实践，当时也恰巧业内还没有基于koa2的React SSR开发骨架，所以干脆写成一个开源项目 zz.js，技术栈是react+node+koa2+webpack。 期间查阅了大量的文章，最终还是需要通…"}, {"id": "6844904118914383885", "title": "搞懂React源码系列-React Diff原理", "desc": "时隔2年，重新看React源码，很多以前不理解的内容现在都懂了。本文将用实际案例结合相关React源码，集中讨论React Diff原理。使用当前最新React版本：16.13.1。 在讨论Diff算法前，有必要先介绍React Fiber，因为React源码中各种实现都是基于…"}, {"id": "6909021437139517454", "title": "React服务端渲染(ssr)之Next.js框架", "desc": "Nextjs是React生态中非常受欢迎的SSR（serversiderender——服务端渲染）框架，只需要几个步骤就可以搭建一个支持SSR的工程（_Nextjs_的快速搭建见Next.js入门）。"}, {"id": "6844903722095476749", "title": "数据产品的前端技术选型的思考", "desc": "数据产品首先也是一个web工程，这里不谈是react还是vue，个人认为凭喜好即可。本文想说说关于高交互，多维数据分析，多图表展示的产品如何选择工具库，以及有哪些库可以用。 主流的web图表库有：echarts；highcharts；D3js；antv（G2，G6，F2）基于D…"}, {"id": "6933491090817286152", "title": "Rax App 研发框架背后的思考", "desc": "Rax 答疑群经常会有类似这样的问题：”我的 rax 版本是 1.1.4，想要使用小程序原生组件应该怎么做？“，从这个问题不难看出， 站在使用者的视角来看，Rax 发展到今天已经不再只有类 React DSL 驱动多端渲染这一单点特性，而是更加多元化的跨端解决方案，是更加立体的…"}, {"id": "6883108068398202893", "title": "小白篇--了解 useCallback 和 useMemo", "desc": "使用 hook 也有一段时间了，但是 useCallback 和 useMemo 还不是傻傻分不清（虽某种程度上可以相互相当）和具体使用场景，遂整理一下。 返回一个 memoized 回调函数。（缓存函数） 返回一个 memoized 值。(缓存值) useCallback(f…"}, {"id": "6844903710078795789", "title": "理解 React Hooks", "desc": "一句话总结 React Hooks 就是在 react 函数组件中，也可以使用类组件（classes components）的 state 和 组件生命周期，而不需要在 mixin、 函数组件、HOC组件和 render props 之间来回切换，使得函数组件的功能更加实在，更…"}, {"id": "6844903605795815437", "title": "迷你 JS 框架 Hyperapp 源码解析", "desc": "Hyperapp 是最近热度颇高的一款迷你 JS 框架，其源码不到 400 行，压缩 gzip 后只有 1kB，却具有相当高的完成度，拿来实现简单的 web 应用也不在话下。整体实现上，Hyperapp 的思路与 React 比较类似，都是借助 Virtual DOM 来实现高…"}, {"id": "6844903693033144333", "title": "基于React的PC网站前端架构分析", "desc": "最开始接触前端的时候，是从简单的html、css、js开始的，当时盛行的WEB理念是结构样式行为相分离，即html、css、js分离，独立开发，互相之间通过link和script来互相调用。 最开始我所接触到的小项目，都是直接将html、css、js等静态资源直接部署到服务器上…"}, {"id": "6947935618529755173", "title": "React 搭建待办事项项目", "desc": "作为一只前端菜鸟，本篇文章旨在记录自己的学习心得，如有不足，还请多多指教，谢谢大家。 最近有在了解一些 React 相关知识，于是使用 React 搭建了一个待办事项项目，谨以此文做个记录。 首先要你需要在你的机器上安装 Node >= 8.10 和 npm >= 5.6。no…"}, {"id": "6844904152775016456", "title": "How to fetch data with React Hooks?", "desc": "在这篇教程中，我将通过React Hooks中的useState、useEffect来展示如何获取后端数据。您也可以实现一个自定义的Hook在您应用程序中的任何地方进行复用，或者亦可单独作为一个独立的node package发到npm。 先看一段代码，我们使用了useEffec…"}, {"id": "6955473207986126862", "title": "配置React开发格式化工具指南与避坑", "desc": "前言： 开发项目之前，定下良好的开发规范，能帮助我们规范流程，避免因为偷懒等因素，造成后期项目难以维护，commit log难以阅读等问题。"}, {"id": "6844904099339567117", "title": "React-Redux原理简析与源码解析", "desc": "自从我学习过高阶组件，大家流传的就是connect()就是一个高阶组件，所以在我长久的认知中，认为connect()仅仅是一个从context中筛选出state，传入给子组件的简单高阶组件我个人用re"}, {"id": "6938022201933168654", "title": "用React实现一个红绿灯", "desc": "灯的个数、颜色、持续时间、闪烁时间、灯光次序都可配置，如：lights=[{color: '#fff', duration: 10000, twinkleDuration: 5000}, ... ] 考虑用hooks实现，单个灯可以提取成单个组件，用父组件控制灯的亮灭，可设定当…"}, {"id": "6844903828957954061", "title": "使用 React + Koa 从零开始一步一步的带你开发一个 36kr SSR 案例（二）", "desc": "本来在上周就想写下这篇文章，但是在学习的过程中，越来越觉得之前的很多思路需要修改，所以就下定决心，等我重构完这个项目之后再写第二篇教程。 看过我第一篇文章的朋友们应该已经大致了解了 react ssr 的基本思路了，如果没有第一篇文章的同学建议先看教程一，但是只是掌握这些还是远…"}, {"id": "6844903759730966542", "title": "React Suite 做了一个有意思的决定", "desc": "从 React Suite 3（以下简称 rsuite）发布以来一直保持着每周发布一次的频率，添加了许多必要的功能，也改进了许多交互和 API 使用上的体验，但还是不可能做到面面俱到，比如 Chart 在 rsuite 组件库中没有。 社区有非常多的优秀的库，如果您在产品中使用…"}, {"id": "6871091677705682952", "title": "React Router 使用教程", "desc": "Router可以看做一个容器，真正的路由是通过Route来定义的，Route组件定义了URL路径与组件的对应关系。我们可以同时使用多个Route组件。路由匹配以及组件加载都是异步完成的 Router组件的history属性，用来监听浏览器地址栏的变化，并将URL解析成一个地址对…"}, {"id": "6844904084110049293", "title": "React实战 Tree组件简单实现", "desc": "这个简单树组件也是自己为了熟悉react而做的，所以只是简单实现了基本功能，但是做完之后感觉其中也有很多需要自己总结的地方。其中还有几个未解决的问题自己在解决之后会修改这篇博文。话不多少，首先来看看我们到底要实现什么效果 我们的目标很简单，就是实现这样一个功能就行了，但是注意需…"}, {"id": "6844903776105529351", "title": "让你的React表单操作更优雅（formik+yup）", "desc": "在介绍formik之前，我们先来说说日常操作form表单中的一些痛点。 当我们想要访问表单中的input控件的值时，通常有两种操作，一种是使用ref去得到dom结构，第二种是使用state存储value。首先，针对于第一种情况，虽然使用ref能够让我们很方便的获取到dom节点，…"}, {"id": "6844903598933934088", "title": "【转】react-css-modules详解", "desc": "在React中写样式有多种方式，比较常见的有 CSS modules,这种方法将css样式和组件放在一起，然后组件中直接应用，目录结构： 具体示例： css mudules in react 可以看出通过模块应用的样式都是通过这样的形式： css modules本身需要css-…"}, {"id": "6977553790475960351", "title": "状态提升(精读React官方文档—10)", "desc": "这是我参与更文挑战的第23天，活动详情查看：更文挑战 为什么需要状态提升？ 首先创建一个判断水是否沸腾的组件BoilingVerdict 添加第二个输入框 解读 我们希望的是当一个输入框的值发生变化的"}, {"id": "6844904068230414343", "title": "解决使用Antd打包时icons文件全部引入问题", "desc": "今天像往常一样打包更新完文件后准备更新我的博客时，发现打完包之后的首页文件特别大，仔细想想首页也没用到多少模块，肯定是有些不应该打包的东西也打进去了。于是用了 webpack-bundle-analyzer 插件查看打包后的文件的详细情况。 文件把整个 @ant-design/…"}, {"id": "6844903973585944589", "title": "详解 react diff", "desc": "react diff 是从 fiber 树的 Root 节点开始，从上往下一层一层的对新老节点进行 比较。期间组件的 key 以及 type 决定是否需要复用老的节点。节点的 index 最终决定了 dom 是否需要被移动。没有被复用的节点会被删除，也就不需要对其子树进行 di…"}, {"id": "6959541682530435109", "title": "React学习笔记——使用Redux进行状态管理", "desc": "Redux是什么 首先要分清楚几个容易混淆的概念Redux、react-redux、Flux。 Flux和Redux Flux和Redux是同一个层级的概念，他们都是用于React状态管理的一套架构模"}, {"id": "6844903570664341512", "title": "使用React搭建个人博客", "desc": "以前我是用 hexo + next 来搭建自己的博客，但最近学习了 React 后，深深地被它的组件化开发思想所吸引，刚好寒假放假有时间，所以我就用 React 搭建了一个自己的博客。React 实际上只是对应 MVC 中的视图层，要想搭建一个完整的应用，仅有 React 是不…"}, {"id": "6896748497714806798", "title": "深入浅出浏览器中的ES modules", "desc": "主流浏览器陆续都已经开始支持es modules,此外一些Bundless的工具，比如snowpack、vite等。此外给予浏览器的ESM也可以实现一些前端微服务，本文主要介绍一下什么是浏览器中的ESM 从上图可以看出来，主流的Edge, Chrome, Safari, and…"}, {"id": "6909362918828179469", "title": "react fiber如何生成", "desc": "在之前的一篇文章中react fiber概念及原理，介绍了react v16中fiber扮演了什么样的一个角色，以及它的工作原理。概念和原理只能让你有一个初步的认识，想要深入的了解fiber，那么必须要从源码入手，看看fiber具体的实现是怎样的。接下来的内容将结合思维导图和代…"}, {"id": "6951366350572879903", "title": "react+flexible适配移动端项目的配置", "desc": "react+flexible适配移动端项目的配置1.安装flexible2.安装 sass-loader node-sass3.安装 postcss-px2rem4.在 node_modules/co"}, {"id": "6911860144431169550", "title": "轻量级的React状态管理——co-store", "desc": "co-store类比custom hooks，强调以功能为最小单元去创建store，当且仅当你的功能需要在全局或组件间共享状态时才有必要去定义store，否则尽可能地收敛状态到对应的组件内。然后通过组合组件去生成UI，通过组合hooks去定制逻辑。 通过定义mapStateTo…"}, {"id": "6844903842572828679", "title": "【译】为什么 React16 对开发人员来说是一种福音", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 就像人们对更新移动应用程序和操作系统感到兴奋一样，开发人员也应该对更新框架感到兴奋。不同框架的新版本具有新特性和开箱即用的技巧。 下面是将现有应用程序从 React 15 迁移到 React 16 时应该考虑的…"}, {"id": "6844904170286219278", "title": "react 打造页面可视化搭建 4  -实现拖拽自定义容器大小 持续更新", "desc": "可视化搭建的项目要求元素可以像做图软件一样随意的拖动改变大小那怎么实现这个功能呢？先来一个简单的版本吧？基础js事件mouseDown:鼠标的键钮被按下mousemove:鼠标在目标的上方移动mous"}, {"id": "6844904099331178509", "title": "[译]提升你react和js编码的5个技巧", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 两周前，我开始做一个新项目，有些代码已经写好了。然而，没有最佳实践可遵循。当你开始做一个新项目时，重要的是一起定义基础和最佳实践/指南，团队将遵循此基础来编写最佳代码：可维护，易读，易于理解。 …"}, {"id": "6844903521343504398", "title": "[译] 使用 Render props 吧！", "desc": "更新：我提交了一个 PR 到 React 官方文档，为其添加了 Render props。 更新2：添加一部分内容来说明 “children 作为一个函数” 也是相同的概念，只是 prop 名称不同罢了。 我认为，高阶组件模式 作为一个在许多基于 React 的代码中流行的代码…"}, {"id": "6844903834767097870", "title": "拥抱 React Hooks", "desc": "我们知道，React 提供的单向数据流以及组件化帮助我们将一个庞大的项目变为小型、独立、可复用的组件。但有时，我们无法进一步拆分很复杂的组件，因为它们内部的逻辑是有状态的，无法抽象为函数式组件。所以有时我们可能会写出非常不适合复用性开发的： 但谢天谢地，Hooks 的出现，让我…"}, {"id": "7000306705833656350", "title": "为什么要使用useReducer，而不是useState?", "desc": "useState 在某些场景下，useState更新数据的效果并不是令人满意【总感觉有一些延迟】：例如：需要更新的数据是一个对象： 这样在重新setUser的时候，user变量并没有及时更新并渲染到组"}, {"id": "6933572604594913293", "title": "React 组件类型定义的区别：JSX.Element vs ReactNode vs ReactElement", "desc": "很多人可能在使用 TypeScript 编写 React 应用的时候会对三种不同的函数返回值类型产生困惑，不明白它们之间的区别以及应该什么时候使用哪一种类型才比较严谨。 类组件的 render 成员函数会返回 ReactNode 类型的值，而且 PropsWithChildre…"}, {"id": "6865560196224286728", "title": "React框架相关知识", "desc": "使用脚手架工具create-react-app配置项目环境在使用前需要确认node有没有安装安装npminstall-gcreate-react-app创建react应用create-react-ap"}, {"id": "6968731793839095844", "title": "程序员活跃的是语言中枢 —— 抽象与结构关系", "desc": "抽象 我们常见的，最能体现抽象思维的例子，就是语言 我们说出’牛‘的时候，会有一头真的牛从天而降么？不会！ 公孙龙说出：”白马非马，可乎？“的时候，不管是’白马‘和’马‘都不会从天而降！ 因为这些概念"}, {"id": "6995814591963856927", "title": "React Hook最佳实践(附规范化组件模板)", "desc": "React的用法千千万，Hook是React16.8版本新增的特性，让开发者在使用函数的情况下也可以编写有状态组件。此篇文章的目的是先结合Demo梳理官方常用Hooks的功能特点以及适用场景，最后探讨"}, {"id": "6844903518524932103", "title": "程序员简历怎么写？ResumeX — 一个极简主义且独具创意的简历方案", "desc": "本文阅读需要大约 5 分钟。分为两个部分： Part 1: 讲讲我个人对于过去经手过的简历的一些看法。一家之言，欢迎不同意见。 Part 2: 分享一款自造的简历方案。 入行时间虽然不久，但经常有机会帮老板看简历、面试前端方向的候选人，沉淀了一些想法。还有一部分是找我推荐的亲朋…"}, {"id": "6995446993481023524", "title": "react propTypes && Typescript", "desc": "最近看官方的文档，看到了 使用 PropTypes 进行类型检查 这一章节，看完之后发现这玩意和typeScript 很类似，所以查找了一些资料，发现他们是可以互相转换的，下面来看一些例子： 基本类型"}, {"id": "6844903504478208007", "title": "Slate.js - 革命性的富文本编辑框架", "desc": "相信很多同学即便没有接触过富文本编辑领域，也一定听说过【富文本编辑是天坑，千万不要碰】的说法——是的，富文本编辑是天坑，但 Slate 能很好地帮助你。下面会介绍富文本编辑的复杂度所在，以及 Slate 的解决方式。 富文本编辑领域和常规的前端开发相比，有个非常微妙的区别：在这…"}, {"id": "6977992027459813407", "title": "新手专享：超详细的redux和react-redux手把手教程", "desc": "前言 进了富途后，被要求用react来维护和开发新项目。这对于一直使用Vue的我来说需要好一段学习时间，在用react开发项目中，也用到redux，一开始我以为这玩意跟vuex差不多用法，结果却不是。"}, {"id": "6844903951721037837", "title": "React高频面试题梳理，看看怎么答？(上)", "desc": "前段时间准备面试，总结了很多，下面是我在准备React面试时，结合自己的实际面试经历，以及我以前源码分析的文章，总结出来的一些 React高频面试题目。 以前我写的源码分析的文章，并没有很多人看，因为大部分情况下你不需要深入源码也能懂得其中原理，并解决实际问题，这也是我总结这些…"}, {"id": "6989217144814698509", "title": "React 中的useReducer是个什么东西", "desc": "写在前面 如果你想深入学习React，借助它解决自己遇到的各种业务场景，那么你就需要了解useReducer。 结合我自己的学习心得和使用经验，写下这篇博客跟大家分享useReducer最简单的知识点"}, {"id": "6986524270843133965", "title": "React 学习之 React 事件", "desc": "React 中的事件，指的是 React 内部封装 DOM 组件中的事件，如 onClick, onFocus等，而非我们自己通过 props 传递的属性，并在子组件中手动触发的事件"}, {"id": "6890313279508332558", "title": "​如何编写优雅的React组件思考和实践 | 🏆 技术专题第六期征文", "desc": "大家好呀，我是wangly19，这次分享的是我十月下的文章。正巧赶上了掘金的征文系列，希望大家能多多支持我。 在学习React的两个月内，我大部分时间反而在阅读vant-ui @vue3的源码，不得不说有了一些很大的帮助，不论是一些思想上的提升还是作用于项目中的体验，其实大部分…"}, {"id": "6844903873342078990", "title": "一文速览React全栈", "desc": "本文依次介绍 组件、JSX、Virtual DOM、Flux架构、Redux、react-redux和性能优化。 1. 组件 组件是React的基石，所有的React应用程序都是基于组件的。 用这种方式，就实现了一个React的组件，在其他的组件中，可以像HTML标签一样引用它…"}, {"id": "6844903681029046280", "title": "【译】你可能不需要Moment.js", "desc": "Moment.js是一个很棒的时间和日期库，具有许多牛X的方法，平时npm install了之后就是干，但是如果您的Web应用程序对性能上有很高的要求，可能会由于其复杂的API和大小会导致巨大的性能上的比不要的开销。 如果您没有使用时区，而只使用了moment.js中的一些简单…"}, {"id": "6954619382546825253", "title": "[译] React 列表拖拽库 - React-Beautiful-DND教程", "desc": "React-Beautiful-DND 教程 `React Beautiful DND` 让 `React` 可以优雅以及简易实现列表拖拽效果。我的名字是 Alex，是`React Beautiful"}, {"id": "6844904057094537223", "title": "ncov肺炎疫情地图(React版)", "desc": "看见了许多大佬都在写疫情可视化工具，所以我也按耐不住了。希望能为疫情的防控做出一点点微薄的贡献。 通过docker的Dockerfile文件制作为镜像，然后通过nginx来进行部署。"}, {"id": "6844903809274085389", "title": "React 之 Refs 详解", "desc": "在介绍 Refs 之前，我们先来了解两个概念：受控组件 和 不受控组件。 在HTML中，表单元素（如 input、textarea、select）之类的表单元素通常可以自己维护state，并根据用户的输入进行更新。而在React中，可变状态（mutable state）通常保存…"}, {"id": "6897911576053940231", "title": "探索 React 合成事件", "desc": "React 目的在于解决：构建随着时间数据不断变化的大规模应用程序。 合成事件 4 个常见问题。 React 合成事件（SyntheticEvent）是 React 模拟原生 DOM 事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器。它根据 W3C 规范 来定义合成…"}, {"id": "6999141302247882788", "title": "React学习第六天", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：更文挑战 React 混合 react提供了组件的目的是为了复用虚拟DOM，所以react提供了混合的技术是为了复用组件的功能 在ES5中，我们可以通过"}, {"id": "6998407938859597860", "title": "react-router英雄指南", "desc": "1.2.6. react-router、阐述hashHistory与browserRouter的区别、阐述Router和Route相关api的使用、如何渲染多层级路由"}, {"id": "6844903927213719565", "title": "使用React Hooks + 自定义Hook封装一步一步打造一个完善的小型应用。", "desc": "今天分享一下利用React Hooks实现一个功能相对完善的todolist。 有了界面以后，接下来就要获取数据。 这里我新建了一个api.js专门用来模拟接口获取数据，这里面的逻辑大概看一下就好，不需要特别在意。 这里我们封装了个withDelay方法用来包裹函数，模拟异步请…"}, {"id": "6886680584874934280", "title": "如何使用React Testing Library和Jest测试React应用", "desc": "写测试通常都会被认作一个乏味的过程，但是这是你必须掌握的一个技能，虽然在某些时候，测试并不是必要的。然后对于大多数有追求的公司而言，单元测试是必须的，开发者对于代码的自信会大幅提高，侧面来说也能提高公司对其产品的信心，也能让用户使用得更安心。 在 React 世界中，我们使用 …"}, {"id": "6844904064392626183", "title": "手摸手实现一个轻量级可扩展的模态框(Modal)组件", "desc": "本文是笔者写组件设计的第九篇文章, 今天带大家实现一个轻量级且可灵活配置组合的模态框(Modal)组件, 该组件在诸如Antd或者elementUI等第三方组件库中都会出现,主要用来提供系统的用户反馈. 通用型组件: 比如Button, Icon等. 布局型组件: 比如Grid…"}, {"id": "6844903889309794317", "title": "基于 React 的滚动条方案", "desc": "这两个库都是跨平台的，都是直接操作 dom 的，跨平台不是不好，肯定是好，但是在 React 的世界，要处理状态的同步，通常都是通过状态或属性来控制，虽然可以用个 React 包裹上面两个库，提供 React 版本，但是总是觉得不那么完美。 查了一下，PC 触摸板可以出发 on…"}, {"id": "6966890515555942414", "title": "react路由的搭建", "desc": "React Router 是 React 社区最受欢迎的路由库，当你需要在一个有多个页面的 React 应用程序中根据 URL 来导航到对应的页面时，就可以用 React Router 来处理这个问题"}, {"id": "6887471865720209415", "title": "彻底搞定react路由跳转动画的优化方案", "desc": "本文探究的方案是基于一次react-router + react-transition-group实现转场动画的探索这篇文章里的例子，补充了原文没有提到的点，结合实际开发中遇到的问题，优化解决了一些棘手的问题，可以说是当前最全最优方案。推荐先看完那篇文章后，再来探究本文讨论的技…"}, {"id": "6844904167220183047", "title": "移动端适配的最佳实践", "desc": "移动端适配我们需要做哪些事情?一个最佳实践除了设置viewport和rem基准值，随着iPhone手机的不断升级，我们不得不正视以下2个问题：安全区域适配识别刘海屏关于viewpoint-fit在切入"}, {"id": "6844903589668716557", "title": "react、redux、react-redux之间的关系", "desc": "当渲染一个组件的数据是通过props从父组件中获取时，通常情况下是 A --> B，但随着业务复杂度的增加，有可能是这样的：A --> B --> C --> D --> E，E需要的数据需要从A那里通过props传递过来，以及对应的 E --> A逆向传递callback。组…"}, {"id": "6844904100128112648", "title": "解决React应用界面开发常见痛点（一）业务逻辑与UI分离", "desc": "在编写一个react组件前，我们一定要弄清两件事。 UI：组件的具体展示元素，通俗点就是组件的长相。接受到合理的数据就可以展示出一个合格的组件。 业务逻辑：获取数据、发送请求等等有比较明确的独特业务的逻辑。 在编写react组件的时候，经常会出现业务逻辑相似，UI基本相同的组件…"}, {"id": "6844904167786414093", "title": "[译]SWR 文档 - 远程数据请求的React Hooks封装", "desc": "SWR是提供远程数据请求的React Hooks库。 SWR是由stable-while-revalidate的首字母组成，是由HTTP RFC 5861普及的缓存失效策略。SWR优先返回缓存数据(stable)，然后再发送远程请求(revalidate)，最后更新最新的数据。…"}, {"id": "6932425746493210632", "title": "定时器踩坑！为什么用了React Hook之后倒计时不动了？", "desc": "React从16.8.0版本开始支持Hook，这让我们可以在函数组件里使用state以及其他的React特性，这给大家带来了很多便利，同时也增加了一些学习成本，其中定时器的使用就会让很多童鞋感到困扰。 运行后会发现count从10变成9之后就不再减一，从控制台打印的count看…"}, {"id": "6844903668563574798", "title": "Next.js 踩坑入门系列（三）— 目录重构&&再谈路由", "desc": "其实对于开发来说没区别，但是项目庞大以后，一个路由对应一个js文件，但是如果页面很复杂其实不是这个React组件也会很复杂，不是很符合组件化理念，后期也不好维护啊。而且，肯定要加redux的，这样的话就更加混乱了。所以现在趁着还清醒，赶快重新构建一下~ 我其实是想边学Next.…"}, {"id": "6864126627643817997", "title": "React-router 简明教程", "desc": "其他还有 &#x3C;MemoryRouter> 内存路由组件、&#x3C;NativeRouter> Native的路由组件、&#x3C;StaticRouter> 静态路由组件这些路由组件，其中 MemoryRouter 主要用在 ReactNative 这种非浏览器的环境…"}, {"id": "6987763840079364127", "title": "react原理：合成事件机制", "desc": "这篇文章讲解以下react的合成事件机制。一提到合成事件，有些人可能就会简单的认为，react合成事件就是为我们提供了一个兼容不同浏览器的事件对象。但其实合成事件机制并没有这么简单，比如看下面的代码输"}, {"id": "6955419663689842724", "title": "Headless UI 和 hooks 的一点思考", "desc": "hooks 的好处是可以自定义 hooks，将业务逻辑封装在自定义的 hooks 里。同时 hooks 的出现，催生了 Headless UI"}, {"id": "6844903703137239054", "title": "react高仿掘金移动版，支持服务端渲染", "desc": "react-juejin一个高仿的掘金，大部分是按照掘金的ui来实现的，个别地方就根据自己想法修修改改，只做了移动端的部分，还做pc的部分就要花太多时间了，支持服务端渲染、pwa等，写这个项目主要是对"}, {"id": "6945340668134817806", "title": "如何更规范你的前端项目工程", "desc": "一、关于.editorconfig的配置(统一编辑器风格) 1、为什么要有.editorconfig 用于跨编辑器保持同一份代码风格,打个比方,你开发的编辑器是vscode设置的缩进是2个字符,你同事"}, {"id": "6989062338058027044", "title": "react中useReducer", "desc": "useReduce 他是useState的代替方案,它接受一个存函数(state,action) =>newState的reducer并返回当前的 state 以及与其配套的 dispatch 方法。"}, {"id": "6939022886032113701", "title": "闭包和闭包在 React 中的问题", "desc": "MDN 对闭包的定义是这样的，可以说 JavaScript 每个函数都是一个闭包。闭包包含函数本身和函数的作用域，对于定义在全局的函数，它就包含函数本身和函数内部变量还有全局变量的引用 每次渲染，调用函数组件，回调函数通过闭包去获取本次渲染的 state 和 prop，这个导致…"}, {"id": "6996171870546427912", "title": "【青训营】-React · setState你需要了解的三件事", "desc": "划重点 不要直接修改state state更新可能是异步的在React掌控内是异步(生命周期, react合成事件内),此外都是同步(宏任务,微任务,原生事件);异步的目的在于批量更新 state更新"}, {"id": "6844903653677989902", "title": "通过了解 Redux 简单源码，掌握 Redux 数据流原理", "desc": "在项目中用 Redux 的时候，有时候就觉得会用，但是不明白为什么这样用。导致在 debug 的时候，无法快速的 debug 出原因。而且 Redux 的源码也不复杂，暴露出来的只有 5 个 API，可以作为很好的阅读源码的开端，所以在这里很开心可以和大家一起来探索 Redux…"}, {"id": "6874615753174155272", "title": "React高级玩家指南", "desc": "在jsx中，也可以使用.表达式来引入React组件，如果你在一个类型中声明了很多React组件，这样做会很方便引用，同时也避免命名的冲突。 在开发复杂业务时经常会碰到需要在运行时选择组件类型，比如通过prop来决定渲染哪个组件，要实现这样的功能需要注意，必须先要把它赋值给一个大…"}, {"id": "6996057204017070116", "title": "【青训营】- React · JSX语法", "desc": "从React用户的视角来看,React最大的特点之一就是JSX 在JSX 语法中，你可以在大括号内{}放置任何有效的 JavaScript 表达式; 换而言之, React会执行{}中的代码。 而 J"}, {"id": "6963194774908043294", "title": "深入浅出搞定React系列（一）：JSX代码是如何“摇身一变”成为DOM的？", "desc": "普通开发者“逆袭”机会：一个好的框架，就是最好的老师 深挖一个优质的前端框架，吃透其底层原理 跟框架作者学架构思想、学编码规范、学设计模式"}, {"id": "6925239227999322119", "title": "逐步拆解React组件—Swipe轮播图", "desc": "当前位置在如图，位置3上，红色箭头即手机可视区。 再进行右移动，完成第二次的无缝。左移同理 这里通过把组件拆分为Swipe和SwipeItem两个组件，Swipe为主要容器，SwipeItem为子项，Swipe验证children是否为SwipeItem组件，布局上采用了fle…"}, {"id": "6900735030121725960", "title": "React源码分析 - 详解 Commit 阶段", "desc": "React16 引入 Fiber 架构后，将整个调度分为了两个阶段 render &#x26; commit，在 render 阶段，React 会计算 DOM 的更新，并将所有需要更新的 fiber 整理成一个 effect list，在 commit 阶段中， React …"}, {"id": "6844903540788297736", "title": "NodeJs爬虫抓取古代典籍，共计16000个页面心得体会总结，附带对应的React+ Redux 前端 和 Koa2服务端代码", "desc": "之前研究数据，零零散散的写过一些数据抓取的爬虫，不过写的比较随意。有很多地方现在看起来并不是很合理 这段时间比较闲，本来是想给之前的项目做重构的。 后来 利用这个周末，索性重新写了一个项目，就是本项目 guwen-spider。目前这个爬虫还是比较简单的类型的， 直接抓取页面，…"}, {"id": "6844903727464185863", "title": "React Hooks 实用指南", "desc": "在React Conf 2018会议中，Dan Abramov 介绍了 React Hooks。官方的描述为 React没有一种将可重用的行为附加到组件的方法(例如链接到store)。如果您使用过一段时间，您可能会使用render props和height-order comp…"}, {"id": "6844903586535571463", "title": "React中setState真的是异步的吗", "desc": "在学习react的过程中几乎所有学习材料都会反复强调一点setState\b是异步的,来看一下react官网对于setState的说明。 如果你熟悉react，你一定知道最后的输出结果是0，而不是1。 codesandbox。 结果似乎有点出人意料，三种方式只有在div上绑定的\b…"}, {"id": "6844903752466432013", "title": "手把手教你写一个可以发布到 npm 的 React 插件", "desc": "前言一般情况下，我们写React项目，用create-react-app脚手架开发比较方便，但是如果要写一个插件的话，用三方脚手架就显得有点臃肿了，我们可以自己配置一个符合我们开发的简单工具，本文教你"}, {"id": "6844903580999090184", "title": " 一种方便的跨域开发解决方案", "desc": "现在越来越多的 Web 项目都采取前后端分离的开发方式，也就是在开发过程中前端工程运行在一个 node server 上，同时提供 REST API 的后端工程作为独立的服务运行在另一个 server 上，这样前后端通过 HTTP 请求进行通信的时候就会遇到跨域的问题，跨域是怎…"}, {"id": "6844903816748335118", "title": "从零开始搭建一个 React + Mobx + React Router 脚手架", "desc": "本文详细介绍了如何从零开始搭建一个 React 开发的脚手架，包含如何添加 Redux 以及 React Router 的环境。 本文代码地址：react-mobx-starter。 建议将代码拉下来之后，配合本文一起查看，效果更佳。 最近将脚手架中的 babel 配置更新到了…"}, {"id": "6847037166342635527", "title": "react - 使用json做form表单", "desc": "根据数据结构生成简单的表单，再写一个回调函数，请求后台即可。 可以看到，这里有一个JSONToForm组件，这个组件我们实现下，就可以了。我的实现组件代码 这里用到了antd做form的主要渲染，然后我们要做的就是改成json渲染的形式。 然后把这个json化再传给后台，后台管…"}, {"id": "6844904190309826567", "title": "设计一款简单实用的 image 组件", "desc": "<img />可以说是开发过程中极其常用的标签了。但是很多同学都是<img src=\"xxx.png\" />一把梭，直到 UI 小姐姐来找你谈谈人生理想： 图片加载失败，加载备选图片或展示error占位符。 现在让我们直接从第三阶段开始，看看如何使用少量代码打造一个易用性、封装…"}, {"id": "6844904122387283981", "title": "Concent 2.4发布, 最小粒度观察与渲染组件单元", "desc": "在阅读mobx文档时，为了适配最新的函数组件，除了暴露一个api名为useObserver，还发现暴露了另外一个比较有意思的组件Observer，支持更精细的控制渲染单元，大概用起来的姿势是这样的。 如果我们需要进一步切割渲染范围，改变了哪个属性的值就仅渲染与这个属性相关的视图…"}, {"id": "6966129028826660871", "title": "深入 React hooks 一点点 - React 学习笔记", "desc": "useCallback 和 useMemo 作为 React hooks 中较为常用的 hooks，自带缓存的机制让其成为了使用 react hooks 时常用的优化手段。"}, {"id": "6844903701685993485", "title": "ES5和ES6及继承机制", "desc": "这几天在学习react的时候学习到ES6的 class extends 继承方式，就复习一下ES5的继承机制，并整理下来。 也就是说A.prototype是A的原型对象，A是构造函数，B是A的实例，原型对象（A.prototype）是 构造函数（A）的一个实例。而此时this指…"}, {"id": "6897763694491631624", "title": "编译型 JSS 框架 Linaria 的原理", "desc": "Linaria 是一个近似于 styled-components 和 emotion JSS 框架，不同点在于， styled-components 和 emotion 是一个 运行时 方案，而 Linaria 是一个 编译期 + 运行时 方案。 运行时的 JSS 方案必须内置…"}, {"id": "6844903581095575560", "title": "常用的前端设计模式，让你写出更优雅的代码", "desc": "写代码容易，写出优雅的代码难，写易于维护的、容易扩展的、结构清晰的代码应该是每位开发者努力的目标，而学习设计模式，合理的的使用能让我们离这个目标更进一步。最近看了《Javascript 设计模式与开发实践》这本书, 一言以蔽之，真不错的一本书，在这里总结一下书中介绍的主要的在 …"}, {"id": "6934326406314737672", "title": "表格请求数据组件（ant design 版）", "desc": "那就是上面是搜索，下面是带分页的表格。ant design 组件库已经非常贴心的帮我们把表格组件和分页组件封装在了一起。我们只需要修改 column、dataSource 等属性就可以实现不同的页面。写的页面多了，会发现在仍然有一些重复逻辑，那就是请求数据的逻辑：页码修改的时候…"}, {"id": "6948438359060512782", "title": "React17中dom-diff", "desc": "React17中的DOM-DIFF算法单节点比较多节点比较1.单节点比较两个节点相同的条件是type和key都相同插入：Placement=2更新：Update=4插入并更新：PlacementAnd"}, {"id": "6922748733134209032", "title": "React Portal - 弹出层的优秀解决方案", "desc": "对于需要使用弹出层的需求 ，Portal可以说是提供了一种完美的解决方案。相比于React Native中的实现更多的使用Modal或者绝对定位，Portal实在是简易友好得多。 对话框，确认提示框，悬浮窗这些组件，一般都要做一个比当前视图层层级更高的View，但是现有的方案都…"}, {"id": "6976399679730745357", "title": "react源码解析17.context", "desc": "react源码解析17.context 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心ap"}, {"id": "6981676251396177933", "title": "从小学数学聊前端框架设计", "desc": "大家好，我是卡·小学生·颂。 很开心还有不到10天小学就放暑假了，到时候打农药被人喷了就能说： “我妈只准我放假玩，手有点儿生” 说回前端。 其实前端框架是个很简单的东西，大部分框架的工作原理可以用一"}, {"id": "6953164014574632967", "title": "70行代码实现react 的 keep-alive", "desc": "背景 如果您使用过Vue，那么您会知道它具有一个非常好的组件（keep-alive），它可以保持组件的鲜活状态以避免重复渲染。 有时，我们希望列表页面在进入详细信息页面后缓存页面状态。当详细信息页面返"}, {"id": "6844903944297136135", "title": "90行代码，15个元素实现无限滚动", "desc": "IntersectionObserver API 的用法，以及如何兼容。 如何在React Hook中实现无限滚动。 如何正确渲染多达10000个元素的列表。 无限下拉加载技术使用户在大量成块的内容面前一直滚动查看。这种方法是在你向下滚动的时候不断加载新内容。 当你使用滚动作为…"}, {"id": "6996559213577109534", "title": "图解React源码 - Hook 原理(状态Hook)", "desc": "本节分析`状态Hook`即`useState`的内部原理, 从`同步,异步`更新理解了`update`对象的合并方式, 最终结果存储在`hook.memoizedState`供给function使用."}, {"id": "6844903640902156301", "title": "React 16 加载性能优化指南", "desc": "关于 React 应用加载的优化，其实网上类似的文章已经有太多太多了，随便一搜就是一堆，已经成为了一个老生常谈的问题。 但随着 React 16 和 Webpack 4.0 的发布，很多过去的优化手段其实都或多或少有些“过时”了，而正好最近一段时间，公司的新项目迁移到了 Rea…"}, {"id": "6844904085024407566", "title": "好想用Typescript+React hooks开发啊!（嘴对嘴解释）", "desc": "在 src/App.tsx 内引用我们的案例组件，在 src/example.tsx 写我们的案例组件。 可以让函数式组件拥有状态管理特性，类似 class 组件中的 this.state 和 this.setState ，但是更加简洁，不用频繁的使用 this 。 你可以把 …"}, {"id": "7001771805278994439", "title": "react-router-dom 实战（二）", "desc": "尝试不实用React Router 当 URL 的 hash 部分（指的是 # 后的部分）变化后，<App> 会根据 hash 来渲染不同的 <Child>。看起来很直接，但它会随着业务的发展很快会变"}, {"id": "6976593900521816072", "title": "从Vue2.0到React17——React类组件的生命周期", "desc": "本文详情介绍了React类组件的生命周期和生命周期钩子函数的应用，利用生命周期钩子函数对React组件更新频率进行优化。"}, {"id": "6844904197008130062", "title": "手写React的Fiber架构，深入理解其原理", "desc": "熟悉React的朋友都知道，React支持jsx语法，我们可以直接将HTML代码写到JS中间，然后渲染到页面上，我们写的HTML如果有更新的话，React还有虚拟DOM的对比，只更新变化的部分，而不重新渲染整个页面，大大提高渲染效率。到了16.x，React更是使用了一个被称为…"}, {"id": "6967879161809633317", "title": "基于React全家桶开发「网易云音乐PC」项目实战(四)", "desc": "hello大家好我是「风不识途」，如果首次阅读本系列请点击，正在学习React的小伙伴可以克隆该项目，参考学习，尝试做一些小功能，下面我们开始完成本系列最重要的音乐播放器列表▶需要完成内容如下↓；"}, {"id": "6999439532265308167", "title": "React 18 服务端升级", "desc": "一直以来，React 在服务端上并不支持 Suspense。这在 React 18 中有所改变，选择不同的 API 来支持不同级别的 Suspense"}, {"id": "6844903651291447309", "title": "三十分钟掌握Webpack性能优化", "desc": "Webpack是现在主流的功能强大的模块化打包工具，在使用Webpack时，如果不注意性能优化，有非常大的可能会产生性能问题，性能问题主要分为开发时打包构建速度慢、开发调试时的重复性工作、以及输出文件质量不高等，因此性能优化也主要从这些方面来分析。本文主要是根据自己的理解对《深…"}, {"id": "7000637501774200868", "title": "react组件父传子异步传参", "desc": "父组件异步请求拿到数据，子组件接收此数据 react通过监听state内的值来获取props vue是也是通过监听props进行获取"}, {"id": "6875511961312821255", "title": "umi中后台项目实践", "desc": "中后台项目一般都有较强的页面结构或者逻辑一致性，页面比如像搜索、表格、导航菜单、布局，逻辑方面比如像数据流，权限。 如果基于Webpack封装这些功能就需要比较大的前期工作，Umi则以路由为基础，并以此进行功能扩展，包含微前端、组件打包、请求库、hooks 库、数据流等。基于此…"}, {"id": "6991656792639930382", "title": "浅析React17 diff 算法源码|8月更文挑战", "desc": "本文以 React 17.0.3 版本为例。从源码上浅析 React diff 算法。Fiber/执行过程/Dom diff"}, {"id": "7000667315628933127", "title": "使用three.js 画地球🌍", "desc": "先看看基础效果叭 demo地址 前言 本章我们将做一个可拖拽,开始时自传,点击城市可以动的地球demo 首先需要知道什么是 three.js。 简单的说，three.js 是一个非常优秀的 WebGL"}, {"id": "6864438643727433741", "title": "react-hooks如何使用？", "desc": "1. 什么是react-hooks? 以上就是react-hooks主要的api,接下来我会和大家分享一下这些api的用法，以及使用他们的注意事项。 1 react-hooks可以让我们的代码的逻辑性更强，可以抽离公共的方法，公共组件。 2 react-hooks思想更趋近于函…"}, {"id": "7000680849720999973", "title": "Hook的常用方法", "desc": "useState 使用场景：函数组件中需要用到状态值，类似react类组件的state 默认值：useState()括号后面，可传入值，也可以传函数，该函数只会渲染一遍 useReducer 它接收一"}, {"id": "6844903991491444744", "title": "[实战] 为了学好 React Hooks, 我抄了 Vue Composition API, 真香", "desc": "前几篇文章都在讲 React 的 Concurrent 模式, 很多读者都看懵了，这一篇来点轻松的，蹭了一下 Vue 3.0 的热度。讲讲如何在 React 下实现 Vue Composition API(下面简称VCA)，只是个玩具，别当真。 实现 'React' Compo…"}, {"id": "6844904116284555271", "title": "redux、mobx、concent特性大比拼, 看后生如何对局前辈", "desc": "redux、mobx本身是一个独立的状态管理框架，各自有自己的抽象api，以其他UI框架无关（react, vue...），本文主要说的和react搭配使用的对比效果，所以下文里提到的redux、mobx暗含了react-redux、mobx-react这些让它们能够在reac…"}, {"id": "6844904116830011399", "title": "react+flexible适配移动端项目的配置", "desc": "1. 安装flexible 5. 引入 lib-flexible，在项目入口文件 index.js 里 引入 lib-flexible"}, {"id": "6844903936889978888", "title": "从零配置React全家桶", "desc": "在熟练的使用各种脚手架工具生成项目的同时，你是否还记得项目最初的样子。本文将从零开始，带领大家搭建一个React全家桶系列的项目结构，在完成功能的同时，会讲解具体每一项的配置的含义以及延伸的知识点。如果你以后在项目配置中遇到什么问题，不妨回来看看，或许能找到答案。 由于构建相关…"}, {"id": "6844903807151767560", "title": "排名前301道ReactJS面试问题与解答", "desc": "试题范围涉及 React.js 核心、React Router、React Redux、React 测试和 React 国际化等。"}, {"id": "6844903781679759367", "title": "从 React render 谈谈性能优化", "desc": "本文将从 render 函数的角度总结 React App 的优化技巧。需要提醒的是，文中将涉及 React 16.8.2 版本的内容(也即 Hooks），因此请至少了解 useState 以保证食用效果。 正文开始。 当我们讨论 React App 的性能问题时，组件的渲染速…"}, {"id": "6931906944072417294", "title": "react-jwchat，一个简单的web聊天组件", "desc": "react-jwchat是一个简单的web聊天组件，基于react实现，用于方便快捷的搭建web聊天功能UI，这个项目是受另外一个vue的聊天组件启发创建的，想在react里也能通过简单快捷的方式构建聊天UI，目前这个项目还有很多的不足，希望各路大手多多指教。"}, {"id": "6844903605485453320", "title": "[译] 使用 Puppeteer 和 Jest 测试你的 React 应用", "desc": "端到端测试可以帮助我们确保 React 应用中所有的组件都能像我们预期的那样工作，而单元测试和集成测试做不到这样。 Puppeteer 是 Google 官方提供的一个端到端测试的 Node 库，它向我们提供了基于 Dev Tools 协议封装的上层 API 接口来控制 Chr…"}, {"id": "6844903575613620238", "title": "react搭建后台管理（react初窥）", "desc": "本来是想写一个 类似 Vue仿今日头条 那样的项目来入手, 后来又寻思还不如写个后台管理呢。 于是乎便开始捣鼓起来了。 redux-actions: 用来创建action的，而且生成相关reducers的时候也不要写 switch/case 或 if/else 了，主要是方便。…"}, {"id": "6844903695012872199", "title": "[React.js]组件卸载如何自动取消异步请求", "desc": "某次路过同事的工位，刚好看到同事在写面试评价，看到里面有一个问题：组件卸载时自动取消异步请求问题，不及格。 然而这个写法并没有真的abort掉fetch请求，只是不去响应fetch成功之后的结果而已，这完全没有达到取消异步请求的目的。 于是我去问了问同事，如何真正abort掉一…"}, {"id": "6844903635885752333", "title": "如何搭建一个功能复杂的前端配置化框架(一)", "desc": "现在很多公司主要业务是c端，拥有巨大用户和流量的同时，b端业务不可或缺，CRM，CMS，运营配置化管理平台，数据可视化平台，各种审批平台。这些系统都有几个共同的特点：需求多，变化快，查询页，列表页，提交页面。而这些页面都是相似的，UI要求低，功能简单。所以我们能不能开发一套配置…"}, {"id": "6844903608043962381", "title": "Redux + Immutable.js 性能优化", "desc": "众所周知，在使用 Redux 时最麻烦的一个部分就是 reducer 的编写，由于 Redux 要求状态是 immutable 的，也就是说，发生变化的状态树一定是一个新的引用。 所以 reducer 经常会写成这样： 很多人会称之为深克隆，其实并不是，这个过程既不是深克隆也不…"}, {"id": "6914591310808629261", "title": "理解 React Suspense", "desc": "要了解一个技术首先要理解技术代表的含义才能更加容易的去理解背后的想法。 那么带入一下在react里suspense就是一种对组件怀疑的组件，这么说可能有点抽象让我们继续深入。 官方对 Suspense 功能最简单的描述，Suspense 允许我们在组件可以完成渲染之前渲染点东西…"}, {"id": "6889066250454958088", "title": "【React Hooks系列】之useReducer", "desc": "由于React的函数式组件使用起来方便（对比class组件），我将重点使用函数组件来运行开发。在这系列博客中，我将分享我所学到Hook系列API的知识。 React 本身不提供状态管理功能，通常需要使用外部库。这方面最常用的库是 Redux。 Redux 的核心概念是，组件发出…"}, {"id": "6844903510455107598", "title": "不吹不黑聊聊前端框架--尤雨溪知乎Live整理", "desc": "最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈"}, {"id": "6844903520064258055", "title": "写给新人的React快速入门手册", "desc": "setState函数是react中较为重要也是使用频率较高的一个api，它接受最多两个参数，第一个参数是要修改的state对象，第二个参数为一个回调函数，会在state更新操作完成后自动调用，所以setState函数是异步的。 shouldComponentUpdate是一个非…"}, {"id": "6844903981412515847", "title": "React 生命周期(v16.0前 和 v16.4)", "desc": "constructor是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法(调用一次)。 并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor()方法。当存在constructor的时候必须手动调用super方法。 在组件挂载之…"}, {"id": "6844903634069618696", "title": "[译] React 实现条件渲染的多种方式和性能考量", "desc": "JSX 是对 JavaScript 强大的扩展，允许我们来定义 UI 组件。但是它不直接支持循环和条件表达式（尽管添加 条件表达式已经被讨论过了）。 如果你想要遍历一个列表来渲染多个组件或者实现一些条件逻辑，你不得不使用纯 Javascript，你也并没有很多的选择来处理循环。…"}, {"id": "6937703818419240973", "title": "伪傻React Hook只在最顶层使用", "desc": "React 在 V16.8 中引入 Hook 的概念。它又是 React 的一项重大革新。 使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。 Hook 在无需修改组件结构的情况下复用状态逻辑。 官方也推荐使用 Hook 进行开发，但是它有有一些限制，那就是…"}, {"id": "6844903760611770382", "title": "可配置组件库Fusion Design 了解一下", "desc": "前不久那篇爆🔥的文章 阿里重磅开源中后台UI解决方案 Fusion,相信大家很多人都看过。不少同学使用过 Fusion Design。 Fusion Design 整个体系还是比较庞大的。接下来笔者从一个小白的角度科普 Fusion Design. @alifd/next (…"}, {"id": "6844903919018049543", "title": "TS + React Hooks TodoMVC", "desc": "TodoMVC是一个示例项目，它使用目前流行的不同JavaScript框架的来实现同一个Demo，来帮助你熟悉和选择最合适的前端框架。 Redux是遵循 Flux 模式的一种实现，是一个状态管理库，适用于 React，Angular，VueJs 等框架或库，而不是局限于某一特定…"}, {"id": "6844903542868672520", "title": "react-router browserHistory刷新页面404问题解决", "desc": "使用React开发新项目时，遇见了刷新页面，直接访问二级或三级路由时，访问失败，出现404或资源加载异常的情况，本篇针对此问题进行分析并总结解决方案。 那么我们怎么处理才能正常访问，各页面路由呢？博主追踪溯源，查找文档配置后解决了问题，本篇就是对整个解决问题过程的总结。 在使用…"}, {"id": "6844903869437181960", "title": "这一次彻底搞定 useReducer - 基础概念", "desc": "useReducer是React提供的一个高级Hook，它不像useEffect、useState、useRef等必须hook一样，没有它我们也可以正常完成需求的开发，但useReducer可以使我们的代码具有更好的可读性、可维护性、可预测性。 reducer的概念是伴随着Re…"}, {"id": "6844903549667672078", "title": "从零开始学D3js：在react中搭建d3力导向图", "desc": "是一个能够制作精美、复杂图表的数据可视化库。 是一个由数据驱动的数据可视化库，要把数据绑定到DOM上，然后才能展示。 是一个基于Html、CSS、svg/canvas的js数据可视化库。 能够拖拽。 整个图都将在div里绘制。 在【完整代码】中已经构造了节点和连线，但那是基于后…"}, {"id": "6844904152712085512", "title": "ReactHooks源码解析之useState及为什么useState要按顺序执行", "desc": "(2) hook.queue是hook的更新队列，我们需要更新的值就在queue.last. eagerState/action中："}, {"id": "6844903999104106509", "title": "精读《React Conf 2019 - Day2》", "desc": "这是继 精读《React Conf 2019 - Day1》 之后的第二篇，补充了 React Conf 2019 第二天的内容。 第二天的内容更为精彩，笔者会重点介绍比较干货的部分。 Fast refresh 是更好的 react-hot-loader 替代方案，目前仅支持 …"}, {"id": "6850418113062649869", "title": "[Next.js] 简化 CSS 开发", "desc": "px 自动转 rem。 全局变量 和 mixin 必须在每一个用到的文件中手动 import，太麻烦。 为了避免冲突，脚本检测到 @zeit/next-sass 配置后会自动禁用内置的模块化功能，所以不需要考虑兼容问题。 修改 _app.tsx 中的 import 路径，重启。…"}, {"id": "6979052137787424776", "title": "在 React 框架中集成可视化编辑器", "desc": "创建 React 应用 创建 React 应用的最简单的方法是使用 创建 React App, 如使用npx 包运行工具: npm init react-app arjs-react-designer"}, {"id": "6844904038668976142", "title": "React 之实战总结", "desc": "组件可以写成单标签或者双标签两种形式。如下： 1. 在标签中添加方法及函数体，也是和初始的事件最接近的方式： 2. 在class组件中添加方法（需要重新绑定this）： 3. 定义属性，在其内部添加方法（简单，this的绑定不会变）： 4. 第四种添加事件方式 5. React…"}, {"id": "6844903507544244232", "title": "React Native App应用架构设计", "desc": "在上一篇介绍了React Native开发环境搭建，我们已经可以在本地成功运行一个helloword应用了，本节将开始详细分析如何搭建一个React Native App应用架构，并支持完整本地运行预览。 现在已经有很多脚手架工具，如ignite，支持一键创建一个React N…"}, {"id": "6844904055702028296", "title": "《精通react/vue组件设计》之快速实现一个可定制的进度条组件", "desc": "这篇文章是笔者写组件设计的第四篇文章,之所以会写组件设计相关的文章,是因为作为一名前端优秀的前端工程师,面对各种繁琐而重复的工作,我们不应该按部就班的去\"辛勤劳动\",而是要根据已有前端的开发经验,总结出一套自己的高效开发的方法.作为数据驱动的领导者react/vue等MVVM框…"}, {"id": "6844903538770837512", "title": "React全家桶构建一款Web音乐App实战（三）：推荐页开发及公用组件封装", "desc": "接着上一节内容，这一节抓取QQ音乐移动Web端推荐页面接口和PC端最新专辑接口数据。通过这些接口数据开发推荐页面。首先看一下效果图 用chrome浏览器打开手机调试模式，输入QQ音乐移动端地址：https://m.y.qq.com。打开后点击Network，然后点击XHR，可以…"}, {"id": "6844903838109925390", "title": "[译] 使用 React 和 ImmutableJS 构建一个拖放布局构建器", "desc": "『拖放』这一类的行为存在着巨大的用户需求，例如构建网站（Wix）或交互式应用程序（Trello）。毫无疑问，这种类型的交互创造了非常酷的用户体验。如果再加上一些最新的 UI 技术，我们可以创建一些非常好的软件。 我想构建一个能让用户使用一系列可定制 UI 组件来构建布局的拖放布…"}, {"id": "6844903669301788685", "title": "dva框架使用详解及Demo教程", "desc": "在前段时间，我们也学习讲解过Redux框架的基本使用，但是有很多同学在交流群里给我的反馈信息说，redux框架理解上有难度，看了之后还是一脸懵逼不知道如何下手，很多同学就转向选择使用dva框架。其实dva框架就是一个redux框架与redux-saga等框架的一个集大成者，把几…"}, {"id": "6844904102573375495", "title": "纯手动搭建 React 项目", "desc": "到这里一个最基本的 React 项目就已经搭建起来了, 但如果只是这些配置简单配置肯定是远远不够的, 上面只是为了说明其实要搭建一个 React 基础项目还是很简单的, 剩下的工作就是不断的根据具体需求扩充项目配置。下面开始会简单根据需要对项目的配置进行扩展, 比如："}, {"id": "6944861676491505677", "title": "帧对齐方案react scheduler", "desc": "这一部分主要讨论的是如何实现帧对齐，而不会过多的去探究旧版方案的调度流程。如果想了解可以直接看源码，或者去到这里scheduler 上图为chrome performance面板中获取到的各个帧的截图，红框的长度表示一帧间隔，同一个红框当中执行的requestAnimation…"}, {"id": "6983528138529570823", "title": "React 源码之commit 阶段", "desc": "commit 阶段 上一节我们讲完了render阶段，本章节我们将要进入commit阶段的学习。 在进入章节之前要牢记几件事： 用于副作用的effectList单项链表已形成，rootFiber.fi"}, {"id": "6844903714356985870", "title": "React 重要的一次重构：认识异步渲染架构 Fiber ", "desc": "熟悉 react 的朋友都知道，在 react 中有个核心的算法，叫 diff 算法。web 界面由 dom 树组成，不同的 dom 树会渲染出不同的界面。react 使用 virtual dom 来表示 dom 树，而 diff 算法就是用于比较 virtual dom 树的…"}, {"id": "6921940282883719175", "title": "深入面试系列1：React复用组件逻辑", "desc": "有面向对象设计经验的程序员第一反应肯定是设计一个拥有统计组件点击次数方法的父类，然后任意的组件类再去继承这个父类。 但是在React生态中，我们推荐使用组合的方式来代替继承实现组件之间的逻辑复用。接下来，我将通过高阶组件（high order component）、render…"}, {"id": "6844904018540511240", "title": "为什么不能在 JSX 里直接写 console.log？", "desc": "本文从「为什么不能直接在 JSX 里面写 console.log」这个问题出发，分析了 React的元素渲染机制，并介绍了几种在JSX 执行 console.log 语句的姿势，最后还介绍了 React 项目中调试代码的其他姿势。 本文适合 React 初学者阅读，如果你已经可…"}, {"id": "6947941202936791076", "title": "React 源码解析之协调过程（二）", "desc": "上篇文章介绍了 React 协调过程中 beginWork 阶段的前半部分，这篇文章我们来介绍后半部分。 首先会通过 workInProgress.tag 来判断当前处理的 FiberNode 是哪种类型，并针对不同的类型调用不同的 update 方法。这些方法虽然名字差别很大…"}, {"id": "6918262676539834382", "title": "【七日打卡】React中state状态更新那些事", "desc": "最近听到很多小伙伴面试题上都会碰到一道比较经典的React批量更新(状态合并)的题目，每个人都有各的答法，但其实很少有人能够非常好的给出这一题目的答案，如果你刚好在准备明年跑路，那么这一题看了可能会给你无形中给与一个帮助。 上述题中，主要问的知识点就是React的渲染更新问题，…"}, {"id": "6844904130880733191", "title": "react/antd -- 让antd的跑马灯支持自轮播的时间", "desc": "让antd的跑马灯支持自轮播的时间; 官网那边不能设置轮播的时间，也没有手动切换案例，下面我们给他添加一个补丁吧."}, {"id": "6844903889301405704", "title": "基于React实现高度简洁的Form表单方案", "desc": "最近项目里在做我们自己的组件库，关于表单这块，如何实现一个更简单的表单方案，是我们一直在讨论的问题，之前项目里习惯用 ant-design 的 Form 表单，也觉得蛮好用的，我们希望能做出更简洁的方案。 ...... 手写 value 和 onChange，除非你的系统里只有…"}, {"id": "6844903541270642701", "title": " 2017 JavaScript 主流框架性能总结 ", "desc": "作为一名JavaScript开发者，你也许已经接触到了众多框架，甚至在众多框架之中你已经熟练掌握了一两个。之前我偏爱框架，它降低了我的开发难度。但是在经历了那么多优秀的前端的概念变革，从Virtual-DOM到状态管理，我也在想，对于框架的本身，它们的性能到底如何，对于不同类型…"}, {"id": "6931187413331116046", "title": "React Minified React error #130 错误解决方案", "desc": "调试不方便——因为本地开发（mac系统）没问题，但是部署到linux测试环境就有问题了。 错误提示不友好——无法精确得知错误的地方。 经过分析，原因应该是由于本地开发的时候，MAC对文件名大小写不敏感，而linux对大小写敏感，所以会产生本地没问题，测试环境有问题的现象。 二分…"}, {"id": "6883348909797130253", "title": "如何通过命令行生成React组件代码", "desc": "你可以通过编写一个node.js脚本来获取所需的组件模板并生成这些文件，而不是每次都手工编写它们，从而节省大量时间。 目前有一些npm包可供你下载并试用，但是这种方法的额外好处是你可以根据一个项目调整组件模板以适应您和您的团队的需要。 让我们首先在项目的根文件夹中创建一个目录，…"}, {"id": "6844904032469778446", "title": "你需要知道的 JavaScript 类(class)的这些知识", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JavaScript 使用原型继承:每个对象都从原型对象继承属性和方法。 在Java或Swift等语言中使用的传统类作为创建对象的蓝图，在 JavaScript 中不存在，原型继承仅处理对象。 原型继承可以模拟…"}, {"id": "6864204617152987150", "title": "基于React SSR实现的仿MOO音乐风格的音乐网站，支持PWA", "desc": "[2020-10-28] 项目支持 webpack 5 打包。 PWA 支持。支持PWA的浏览器可以安装到桌面 主要思想参考的是 NextJS。首屏服务端渲染时，调用组件的 getInitialProps(store)方法，注入 redux store，getInitialPr…"}, {"id": "6979852079560917000", "title": "React 并发功能体验-前端的并发模式已经到来。", "desc": "React 是一个开源 JavaScript 库，开发人员使用它来创建基于 Web 和移动的应用程序，并且支持构建交互式用户界面和 UI 组件。React 是由 Facebook 软件工程师 Jord"}, {"id": "6916143613155999751", "title": "「react-pdf」在react中预览pdf", "desc": "但是此时页面出现了两个滚动条，不是我们想要的效果，而且也存在浏览器兼容问题，因此，换用react-pdf 实现这一功能。先上一个修改好的效果图： 注意：效果图上的分页是结合antd的Pagination来实现的。"}, {"id": "6959861045103968292", "title": "使用Global State Hook取代Redux", "desc": "从1年半前开始使用React Hook，看着大串大串的reducer方法，我在做项目的时候在想，redux这样的模式是否过于繁琐，比如说给管道写数据，非得调用一个dispatch方法...."}, {"id": "6847902215827374094", "title": "利用 React 高阶组件实现一个面包屑导航", "desc": "React 高阶组件就是以高阶函数的方式包裹需要修饰的 React 组件，并返回处理完成后的 React 组件。React 高阶组件在 React 生态中使用的非常频繁，比如react-router 中的 withRouter 以及 react-redux 中 connect …"}, {"id": "6991306379956846606", "title": "React 最佳实践：动态表单｜ 8月更文挑战", "desc": "基于 React 和 Ant Design 实现动态表单，表单列表内容从服务器端拉取，表单元素根据用户选择动态显示。"}, {"id": "6977375943610499108", "title": "React 18——[译文]新功能:startTransition", "desc": "在React 18中，我们引入了一个新的API，即使你你的应用在大屏幕更新，也能保持更新。 这个新的API让你通过将特定的更新标记为 \"transitions \"来大幅改善用户互动。React将让你在"}, {"id": "6910586045050388488", "title": "【React系列】React基础", "desc": "高阶组件接受一个已有组件作为参数，返回新的组件。一般高阶组件不会有自己的 UI展现，只是为封装的组件提供额外的功能或者数据。"}, {"id": "6844903782799638541", "title": "手把手教你造一个基于React的markdown编辑器", "desc": "笔者在18年年末的时候接到一个开发任务——搭建一个AI项目的开放平台，其中的产品文档为转化为HTML格式的markdown文档。考虑到文档的即时更新，将文档信息做成了Ajax接口的形式。因此管理后台只需将textarea表单的内容通过markdown解析器进行HTML格式转化，…"}, {"id": "6844903587819044877", "title": "React@16.3 全新的Context API进阶教程", "desc": "最近看了下React16.3的新文档，发现官方悄悄地改了很多东西了。其中我最感兴趣的自然就是这个全新的Context API了。所以写了这篇文章来总结分享一下。其他的变动在这篇文章里或许会提及。 Context API是React提供的一种跨节点数据访问的方式。众所周知，Rea…"}, {"id": "6987028616689221668", "title": "React 中 setState的对象、数组的操作", "desc": "​ 先看以下代码 react hook只用了useState钩子函数来给函数（无状态）组件添加状态，状态值为什么不是最新的？其原因是「Capture Value」 特性； 援引文章 精读《useEff"}, {"id": "6924506511511126029", "title": "React中使用Context的3种方式", "desc": "个人理解转成大白话：Context提供了一个局部的全局作用域，使用Context则无需再手动的逐层传递props。 导入useContext钩子函数,该函数接收createContext()的返回值,返回的结果为该context的当前值,当前的 context 值由上层组件中距…"}, {"id": "6844903772943024141", "title": "[译] Virtual Dom 和 Diff 算法在 React 中是如何工作的？", "desc": "我曾经尝试去深层而清晰地去理解 Virtual-DOM 的工作原理，也一直在寻找可以更详细地解释其工作细节的资料。 由于在我大量搜索的资料中没有获取到一点有用的资料，我最终决定探究 react 和 react-dom 的源码来更好地理解它们的工作原理。 我不会说太多关于 DOM…"}, {"id": "6844904157833347079", "title": "React Router 基本使用及实际项目使用详解", "desc": "在我的项目中App是作为我的根组件的，我编写基本路由就在App组件内，这里根据实际项目来写，有的是写在单独的router组件里。 在App.jsx中引入了react-router-dom库中的BrowserRouter设置别名为Router，与BrowserRouter相对应的…"}, {"id": "6902277882950156302", "title": "React 学习之 Class 组件 生命周期", "desc": "你无论点击多少次页面都没有变化。而控制台一直都在 log ，即每次都在 render 。这是为什么？ 每次 setState 都会产生新对象，即使对象的内容相同。 {n:1} 和 {n:1} 不是同一个对象。 React 发现对象不同，将会 render 渲染组件，在DOM D…"}, {"id": "6951729112301961247", "title": "从源码角度看 React Function Component 渲染过程", "desc": "前言本节我们通过 ReactDOM.render 渲染一个简单的函数组件来了解 React 底层的初渲染流程和运行机制。代码示例：2、代码调试：打开浏览器控制台 - Sources - 找到 reac"}, {"id": "6844903746820915213", "title": "使用 react 和 rxjs 打造的虚拟列表组件", "desc": "在业务场景中，你是不是遇到过数据太多，成千上万条数据在一个列表中渲染，造成页面卡顿的场景，vist 就是来解决你列表数据过大的而造成的性能问题的。"}, {"id": "6844903543518789639", "title": "精读《dob - 框架使用》", "desc": "本系列分三部曲：《框架实现》 《框架使用》 与 《跳出框架看哲学》，这三篇是我对数据流阶段性的总结，正好补充之前过时的文章。 本篇是 《框架使用》。 现在我们团队也在重新思考数据流的价值，在业务不断发展，业务场景增多时，一个固定的数据流方案可能难以覆盖所有场景，在所有业务里都用…"}, {"id": "6923070024559099918", "title": "【译】一文看懂 React useEffect hook 的用法", "desc": "来源: Joseph Mawa. What is useEffect hook and how do you use it?.2020年6月30日 这是我关于 react hook 系列的第三篇文章。如果你还没有看前两篇，请按照下面的链接来看。 钩子是一个函数，它可以让你在不编…"}, {"id": "6981110738588958727", "title": "014.React中收集表单数据", "desc": "非受控组件:对于所有输入组件，现用现取为非受控组件 这类组件一般较多使用ref 受控组件:随着输入维护状态是受控组件 一般较多使用oChange事件,ref有性能上的缺陷 推荐使用受控组件"}, {"id": "6981108979120209951", "title": "013.React中事件处理", "desc": "不废话直接展翅 总结 1.通过onXxx属性指定事件处理函数（注意大小写） a. React中使用的自定义（合成）事件，而不是使用的原生DOM事件 ——为了更好的兼容性 b. React中事件是通过事"}, {"id": "6844903891163676686", "title": "React & Redux in TypeScript - 静态类型指南", "desc": "概述：最近在学习 react&TypeScript，发现有许多的组件模式和方法需要去梳理和总结。所以选择一些文章用于沉淀和思考，记录下一些知识点，和大家探讨。"}, {"id": "6844903934599905288", "title": "React入门进阶系列二", "desc": "就像我们在Vue中的template下书写组件一样，往往需要额外添加一个顶层元素div作为根元素来包裹template标签下的元素，因为组件只能有一个根元素,也就是说<template></template>下面必须只有一个根元素。template自身没有很特别的意义,我们可以…"}, {"id": "6844903590327222280", "title": "React16的性能优化", "desc": "React早期的优化都是停留于JS层面（vdom的create/diff），诸如减少组件的复杂度（Stateless），减少向下diff的规模(SCU)，减少diff的成本(immutable.js)"}, {"id": "6844903510622863367", "title": "你可能不知道的 6 个 babel 语法", "desc": "由于要整理基于 babel@7 的 babel preset \"babel-preset-af-react\"，故而对 babel 插件进行了一遍完整的梳理。期间发现一些之前不熟悉或是新引入的语法，个人觉得挺有用，介绍如下。"}, {"id": "6844903612800303117", "title": "用 SOLID 原则保驾 React 组件开发", "desc": "本世纪初，美国计算机专家和作者 Robert Cecil Martin 针对 OOP 编程，提出了可以很好配合的五个独立模式；后由重构等领域的专家 Michael Feathers 根据其首字母组合成 SOLID 模式，并逐渐广为人知，直至成为了公认的 OOP 开发的基础准则。…"}, {"id": "6894930355157991438", "title": "手写一个react-redux，原理一目了然", "desc": "react-redux的功能如下：Provider为后代组件提供storeconnect为组件提供数据和变更方法数据变化时自动更新组件了解react-redux的功能移步这里下面我们开始实现react"}, {"id": "6844904021619130375", "title": "React事件机制三---事件分发", "desc": "根据前两篇文章我们得到了事件的注册与回调函数存储的流程。事件最终被React注册到了document上，而注册到document上的事件的侦听器是React的提供的一个分发方法。 当事件在原事件对象被触发的时候，document会代理到事件，而后dispatchEvent方法就…"}, {"id": "6844904034554347533", "title": "100 行代码实现类似 dva 的 redux 简易封装", "desc": "redux 原生写法实现功能需要写大量的 action、reducer 模板代码，对于复杂项目来说模板代码太多，且 action 文件和 reducer 文件等不停切换，开发体验较差。大家一般都会封装简化。 比如 dva 的实现方式，引入了 effects，把 state、ef…"}, {"id": "6971057370998931464", "title": "React Hooks ", "desc": "功能介绍 React Hooks对函数型组件进行增强, 比如让函数型组件可以存储状态，又比如 可以拥有处理副作用的能力. 让开发者在不使用类组件的情况下, 实现相同的功能. 在一个组件当中，只要不是把"}, {"id": "6844904085456420877", "title": "React 函数式组件优化（续）", "desc": "在之前的一篇文章React 函数式组件优化中，提到可以利用 useCallback 来将函数记忆化，以达到每次传给子组件的都是同一个函数，避免子组件函数重复执行，提升性能。 针对函数的记忆化，除了使用 useCallback 之外，还能使用 useMemo。 在实际的工作中，我…"}, {"id": "6844903650343518222", "title": "我用Vue和React构建了相同的应用程序，这是它们的差别", "desc": "作者｜SunilSandhu译者｜无明在工作中使用了Vue之后，我已经对它有了相当深入的了解。同时，我也对React感到好奇。我阅读了React的文档，也看了一些教程视频，虽然它们很棒，但我真正想知道"}, {"id": "6971236382098325518", "title": "React随笔", "desc": "React中的状态提升概括来说,就是将多个组件需要共享的状态提升到它们最近的父组件上.在父组件上改变这个状态然后通过props分发给子组件."}, {"id": "6844904182877683720", "title": "初识React", "desc": "开始实习后公司技术栈是偏React的，说起来也是惭愧，一个学前端的小崽崽居然这么久都没有用过，这几天开始学习了一下其实个人感觉React还是比Vue用的舒服一些(理解层面上)，说起来毕竟前者的维护社区团队可是脸书呀。好了废话不多说了总结一下React基础(结合官网顺序，附带上自…"}, {"id": "6844903872922648589", "title": "React学习篇-JSX（手写一个JSX的插件）", "desc": "学习和阅读 vue 源码有段时间了，最近在尝试去学习 react，由于眼前项目使用不上 react，并不想一股脑的学习它的 API（长时间不用还是会忘），所以此次的学习过程打算换种方式，对于 react 涉及到的每个点尝试逐个深入，了解其解析过程及整个框架的思路。 对于每个点的…"}, {"id": "6844903621302173703", "title": "[译] 从零开始，在 Redux 中构建时间旅行式调试", "desc": "在这篇教程中，我们将从零开始一步步构建时间旅行式调试。我们会先介绍 Redux 的核心特性，及这些特性怎么让时间旅行式调试这种强大功能成为可能。接着我们会用原生 JavaScript 来构建一个 Redux 核心库以及实现时间旅行式调试，并将它应用到一个简单的不含 React …"}, {"id": "6844904054351462408", "title": "手摸手，打造属于自己的 React 组件库02 — 测试篇", "desc": "在第一部分，我们基于 create-react-app 构建了项目的基础结构。对于一个组件库来说，不仅要有简单，实用的组件，每一个组件的质量也是至关重要。而单元测试，正是提升软件质量的一种有效的手段。在本文中，不仅会在之前的项目中完成单元测试的配置，还会带着大家一起走进单元测试…"}, {"id": "6844903810406547464", "title": "React 组件自动化测试与持续集成指北（1）", "desc": "本文主要介绍基于 React 框架的项目，在对自己封装组件或者是通过 HOC ， render props 的方式在第三方 UI 组件库（e.g. Ant Design）的基础上封装的公共组件的自动化测试技术选型以及在项目中的实践 在多人协作的项目中，特别是项目团队中，会有多个…"}, {"id": "6935716130409414669", "title": "体验小程序 react hook——实现列表加载", "desc": "函数页面配置函数组件配置数据加载写一个列表加载组件功能分析空状态下拉刷新上拉加载加载完成提示加载截流实现方案使用小程序的下拉刷新和上拉加载功能抽象空状态组件自定义effect抽象加载方案列表组件代码1"}, {"id": "6844903502985068558", "title": "[译] React 16 带来了什么以及对 Fiber 的解释", "desc": "React 核心算法的更新已经进行了多年了 —— 这次更新提供了一个从底层重写了 React 的 reconciliation 算法（译注：reconciliation 算法，是 React 用来比较两棵 DOM 树差异、从而觉得哪一部分应当被更新的算法）。React将维护相同…"}, {"id": "6844903728835739655", "title": "React 16.x 蓝图[双语版]", "desc": "你可能在之前的文章和演讲中已经听说过这些特性, 比如 \"Hooks\", \"Suspense\", 和 \"Concurrent Rendering\". 在该博文中, 我们将看一下怎么将它们融合在一起和它们在 React 稳定版中可用的预期时间线. You might have he…"}, {"id": "6844904052711489550", "title": "重新开坑，在 react 中使用 composition API", "desc": "emmm大家好，那个，虽然最近新型肺炎，搞的人心惶惶，没啥动力写码其实我也没啥可写的了，但是闲着也是闲着，然后记起来smox弃坑了还有一堆星星，想着怎么重新开坑背景smox弃坑，不是我任性，而是hoo"}, {"id": "6844903650028945416", "title": "React 16.0+ 新特性初探(How to use)", "desc": "我技术没有大牛的水平，所以我写文章并不是为了吸引人，一方面是记录自己新学的东西，写出来觉得自己的理解也会加深；另一方面是让比我还入门的人找到个非常合适的入门文章。我喜欢配上一些Demo，这样不太明白的人才能看懂，受教人群不一样，大牛可以去看官方文档说明，小白可以看看demo感受…"}, {"id": "6844903537642569742", "title": "基于react16 webpack3 搭建前端spa基础框架 react-router的4种异步加载方式", "desc": "这两天看了下react的文档，准备搭建一套适用的基本react开发架子。 由于我一直使用的是vue，很少使用过react进行项目的开发，因此此构建主要参考的是vue的项目经验。 react和vue的开发模式很像，同样的组件化，模块化，统一状态管理机制，路由 ... 等等，因此我…"}, {"id": "6844903768861982727", "title": "React Fiber源码分析 第一篇", "desc": "这里我们知道是同步更新 即 expirationTime = 1. 紧接着调用了updateContainerAtExpirationTime"}, {"id": "6844903854006337549", "title": "[译]React中的用户认证(登录态管理)", "desc": "本文主要展示在当下 React 应用开发中，怎么使用 Context 和 Hooks 来管理用户的认证(也就是登录态)。 嗯，最终的代码大概就长这样。大多数 需要进行用户认证管理的应用，都可以使用类似上面的逻辑来管理用户登录状态。当用户访问我们应用中的某个需要登录后才能访问的页…"}, {"id": "6844903602511675405", "title": "中间件（middleware）", "desc": "在我们日常开发中，越来越多看到了中间件这个词，例如Koa，redux等。这里就大概记录一下Koa和redux中间件的实现方式，可以从中看到中间件的实现方式都是大同小异，基本都是实现了洋葱模型。 作为TJ大神的作品，真不愧是号称基于 Node.js 平台的下一代 web 开发框架…"}, {"id": "6844903651622780941", "title": "iview 升级指南 —— MenuItem 篇", "desc": "循例是该先聊聊新特性的。Menu 有四个关联的组件，分别为：Menu、MenuItem、SubMenu、MenuGroup， 这些组件的新旧版本之间并没有太大差异，向后兼容的很好，理论上可以平滑升级。 新版本只有 MenuItem 增加了一个特性：支持链接模式，可以通过向组件传…"}, {"id": "6920402963122880519", "title": "react 脚手架 react-liter-cli", "desc": "在做vue项目的时候感觉到vue-cli目录结构很清晰，更好的支持配置，所有想做一个类似于vue-cli的react版本，并封装成脚手架，发布到npm上以便于以后使用1.脚手架安装1.全局安装脚手架命"}, {"id": "6844903545884377095", "title": "[译] Redux 的工作过程", "desc": "在学习了一些 React 后开始学习 Redux，Redux 的工作过程让人感到很困惑。 这些术语看起来非常陌生。 所以在这篇文章中我将用一种有利于大家理解的反向剖析的方法去揭开 Redux 怎样工作的神秘面纱。在 上一篇 中，在提出专业术语之前我将尝试用简单易懂的语言去解释 …"}, {"id": "6844903667410305032", "title": "浅谈React16框架 - Fiber", "desc": "作者|赵慧杰前言React实现可以粗划为两部分：reconciliation（diff阶段）和commit(操作DOM阶段)。在v16之前，reconciliation简单说就是一个自顶向下递归算法，"}, {"id": "6844903581384966152", "title": "React + Redux 性能优化（二）工具篇： Immutablejs", "desc": "我猜你更关心的是是否值得使用 Immutablejs，这里先放上结论：推荐使用；但不一定必须使用。如果推荐指数最低一分最高十分的话，那么打六分。 无论是在 react 还是 redux 中，pure 都是非常重要的概念。理解什么是 pure 有助于我们理解我们为什么需要 Imm…"}, {"id": "6844903576238555150", "title": "Redux vs Mobx系列(-)：immutable vs mutable", "desc": "**注意：**我会写多篇文章来比较说明redux和mobx的不同，redux和mobx各有优缺点, 如果对React/Mobx/Redux都理解够深刻，我个人推荐Mobx(逃跑。。。) React社区的大方向是immutable， 不管是用immutable.js 还是函数式编…"}, {"id": "6844904160890994695", "title": "React进阶(5)-分离容器组件,UI组件(无状态组件)", "desc": "至今为止,关于React中的组件已经接触到了有很多,用类class声明的组件,函数式funtion关键字声明的组件,以及样式组件(styled-components),对于前面几节当中已经用Redux"}, {"id": "6934881286527909896", "title": "从0到1开发可视化拖拽H5编辑器(React)", "desc": "​ 年前年后比较闲，于是用React做了一个简单的lowcode平台，功能如上面动图所示。接下来按照完成功能点介绍下，主要包括： ​ lowcode平台挺常见的，目前网上做的比较成熟且通用的有兔展、易企秀、码卡、图司机等，但是为了个性化的设置，比如要访问本公司的数据库，很多公司…"}, {"id": "6998086416836067365", "title": "React 18 Suspense 的变化", "desc": "在 React 16.x 版本中支持了 Suspense 功能，但是那时并没有完美支持 Suspense。在 React 18 版本中，Suspense 会更符合渲染模型，本文对此做了一些介绍。"}, {"id": "6844904068431740936", "title": "从0到1教你搭建前端团队的组件系统（高级进阶必备）", "desc": "随着vue/react这类以数据驱动为主的web框架的不断完善和壮大，越来越多的前端团队开始着手搭建内部的组件库。虽然目前市面上已经有很多功能强大且完善的组件库供我们使用，比如基于react的开源组件库ant-design，material，又比如基于vue的开源组件库elem…"}, {"id": "7005745475198386213", "title": "基于create-react-app 适配移动端方案", "desc": "我平时的技术栈是vue，最近在react的时候发现基于create-react-app搭建的项目有不少坑(react大佬请绕路)，首先公司如果没有固定的手脚架的话就需要自己搭建项目，npm各种的库，难"}, {"id": "7004754412501467173", "title": "关于Recoil的atom跨RecoilRoot交互的二三事", "desc": "关于React的状态管理库Recoil，如何跨RecoilRoot组件且不使用override属性为false的数据交互分享"}, {"id": "6960493325061193735", "title": "Hi~ 这将是一个通用的新手引导解决方案", "desc": "组件背景 不管是老用户还是新用户，在产品发布新版本、有新功能上线、或是现有功能更新的场景下，都需要一定的指导。功能引导组件就是互联网产品中的指示牌，它旨在带领用户参观产品，帮助用户熟悉新的界面、交互与"}, {"id": "7001522150507020295", "title": "React基础篇", "desc": "React基础篇 一、setState 1.正确使用setState setState(partialState, callback) partialState: object| function 用"}, {"id": "6995918802546343973", "title": "8月更文挑战｜讲讲React中的传参方式", "desc": "今天来分享一下最近对react应用的总结，主要方向是react在中可以使用的几种传参方式和spa应用中常用的几种传参方式"}, {"id": "6989235408970186783", "title": "Chrome团队：如何曲线拯救KPI", "desc": "大家好，我是卡颂。 当聊到Chrome，你第一反应是啥？ 市占率第一的浏览器？鼎鼎大名的V8引擎？浏览器调试的标配——DevTools？ 对于Chrome团队成员来说，第一反应很可能是这两个指标（KP"}, {"id": "6998287682593882142", "title": "(开源)给图片编辑器添加了【撤销重做】功能", "desc": "一款开源图片编辑器，采用React + Typescript + React-knova 框架开发."}, {"id": "6844903715669999629", "title": "一年半经验，百度、有赞、阿里前端面试总结", "desc": "人家都说，前端需要每年定期出来面面试，衡量一下自己当前的技术水平以及价值，本人17年7月份，毕业到现在都没出来试过，也没很想换工作，就出来试试，看看自己水平咋样。 以下为我现场面试时候的一些回答，部分因人而异的问题我就不回答了，回答的都为参考答案，也有部分错误的地方或者不好的地…"}, {"id": "6997174976654606367", "title": "[React]优化fetch加载loading，图片懒加载，分类页封装", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战。 一、fetch加载loading 效果如下 二、图片懒加载 三、新建一个分类页面 3.2 左侧导航栏 6. 右侧详情子路由 项目地址"}, {"id": "7005841142566633486", "title": "React15完整功能实现（mount&&update&&patch）", "desc": "1，React15实现原理 1.1，挂载阶段 1，将挂载虚拟dom元素根据其类型（文本类型节点，原生标签类型节点，组件类型节点）生成对应的组件类实例（文本组件类实例，通用组件类实例，合成组件类实例）"}, {"id": "6995070859840847902", "title": "React 小册 ｜ 起底 JSX", "desc": "写在前面 本系列是博主在学习 React 过程中 阅读如下文档做出的笔记 如果有错误 希望在评论区指出哦 🤩🤩🤩 预计将会更新如下内容 React 小册 - 起步 JSX ✅ ✅ React 小册 -"}, {"id": "6975880358071894053", "title": "React-我们村刚通网之虚拟 DOM（一）", "desc": "本文从什么是虚拟 DOM、为什么使用虚拟 DOM、虚拟 DOM 的实现原理等 3 个角度对虚拟 DOM 进行讲述。"}, {"id": "7001713115079376904", "title": "01 手摸手教学-React中的JSX语法-你真的会JSX吗?", "desc": "01 jsx初体验 02 jsx的注意点 1、JSX的特点 JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。 它是类型安全的，在编译过程中就能发现错误。 使用 JSX 编写模"}, {"id": "7003628658862604302", "title": "如何在React + TypeScript 声明带有children的Props", "desc": "声明带有children的Props，有很多种方式。 ReactNode 直接在prop上手动添加children属性 假如children是可选的，可以添加一个可选标记? 不过，不建议这种方式，因为"}, {"id": "6939766434159394830", "title": "我打破了 React Hook 必须按顺序、不能在条件语句中调用的枷锁", "desc": "这个限制在开发中也确实会时常影响到我们的开发体验，比如函数组件中出现 if 语句提前 return 了，后面又出现 Hook 调用的话，React 官方推的 eslint 规则也会给出警告。 其实是个挺常见的用法，很多时候满足某个条件了我们就不希望组件继续渲染下去。但由于这个限…"}, {"id": "6844903632488366088", "title": "2018上半年掘金微信群日报优质文章合集：前端篇", "desc": "逐步学习什么是递归？通过使用场景来深入认识递归。 前端性能优化之路——图片篇。 今年的文章量比去年又多了好多，看来大家在掘金越来越活跃啦！可以Mark起来慢慢看～不过呢小饼还是建议大家到微信群里看每日小报，毕竟每天消化一两篇会更加有用，日积月累就会有很大的收益。反而积攒到一起的…"}, {"id": "7003606793775480862", "title": "【组件开发系列】骨架屏", "desc": "一期的开发中，我们把基础的常用的组件基本都完成了。二期计划将一些不太常用但是能提升交互体验组件纳入开发计划，比如骨架屏，比如步骤条等。组件开发系列第一篇，让我们一起来实现一个骨架屏组件的开发吧。"}, {"id": "6844903764411809806", "title": "React 用axios 获取遍历json 引入swiper轮播图", "desc": "结构展示：功能展示：1.使用swiper轮播插件，2.自动轮播，当前图片高亮小按钮首先引入swiper和配置环境1.npminstall--saveswiper2.在src文件夹index.js下引入"}, {"id": "6844903983757131789", "title": "[译]React高级指引1：无障碍", "desc": "网络无障碍辅助功能（也成为a11y）能够被任何人使用的网站功能。无障碍辅助功能是允许辅助性技术解释网站所必需的。 React通过使用标准HTML技术支持构建无障碍辅助网站。 网络内容无障碍指南( Web Content Accessibility Guidelines ) 为构…"}, {"id": "6844903941554061319", "title": "实现一个 react-router", "desc": "本文将用尽可能容易理解的方式，实现最小可用的 react-router v4 和 history，目的为了了解 react-router 实现原理。 在开始阅读本文之前，希望你至少使用过一次 react-router，知道 react-router 的基本使用方法。 1. Ro…"}, {"id": "6844903605330247688", "title": "自建最轻量的react+webpack+es6架构", "desc": "1. react和react-dom是react项目的基础 2. webpack4.x后版本在配置上有些改变如: rules, use 3. 注意样式的loader顺序, use: ['style-loader', 'css-loader'], 反过来的话会报错"}, {"id": "6844903700423524366", "title": "React事件机制 - 源码概览（下）", "desc": "批处理合成事件入口是runEventsInBatch这个方法首先会将当前需要处理的events事件，与之前没有处理完毕的队列调用accumulateInto方法按照顺序进行合并，组合成一个新的队列，因"}, {"id": "6844903556802150408", "title": "React全家桶构建一款Web音乐App实战（八）：搜索功能开发", "desc": "先为Search组件编写容器组件Search，以便操作状态管理中的数据。在container目录下新建Search.js，代码如下 回到components下search中的Search.js。在search组件的constructor中定义以下几个state 在上述代码中，搜…"}, {"id": "6954602233296060423", "title": "React Hook组件在销毁的时候进行业务处理", "desc": "开发场景： 当我们使用react的hook组件的时候想要在组件销毁的时候做一些事件， 解决方案： 我们可以使用react的Effect hook， Effect hook的第一个参数可以return一"}, {"id": "6844904131027550221", "title": "React源码解析之Commit第二子阶段「mutation」(下)", "desc": "我们还是只考虑HostComponent和ClassCpmonent的情况，该方法也是一个深度优先遍历的算法逻辑，所以你必须知道该算法逻辑，才能看得懂while (true) { }里面做了什么。 然后就是一直循环，直到调用return，跳出无限循环。"}, {"id": "6844904121246416910", "title": "React 500 问", "desc": "1. 什么是 React 是一个开源用于构建用户页面，特别是单页应用的 JavaScript 库，主要专注于 Web 和移动应用的视图层。一开始是 facebook 工程师 Jordan Walke 负责开发，2011 年首次用于 facebook 的新闻推送中，并在 2012…"}, {"id": "6844904049112776718", "title": "[译] 用 Auth0 保证 React 应用安全", "desc": "Auth0 是一个全球领先的 Identity-as-a-Service (IDaaS) 服务商，为数以千计的企业客户提供现代身份认证解决方案。除了经典的 “用户名密码认证过程” 外，Auth0 也允许你增加诸如 “社交媒体登录” 、 “多因子认证”、 “无密码登录” 等等特性…"}, {"id": "6941208382225580069", "title": "React项目搭建", "desc": "使用TS创建项目： create-react-app . --template typescript 1. CSS相关配置 2. 使用styled-components"}, {"id": "6844903501865156621", "title": "使用 react 总结", "desc": "最近学了一些 react 和es6 的一些知识，并且使用 react 写了一个 TodoList 项目===>预览 && 源码 感觉学的挺多的，并且遇到的坑也不少😂，说实话，一开始学 react 看到 jsx 语法有点不适应，说好的结构和行为分离呢😁，不过随着通过一个项目的…"}, {"id": "6844903592806055950", "title": "从零开始：用REACT写一个格斗游戏(二)", "desc": "今天也没什么事，所以就准备继续完善这个小游戏。第一次点进来的同学可以看看上篇。今天给人物增加了攻击扣血，被击打僵直等，顺便还给人物增加了一个转转转的技能，不过可能图没有扣好，转转转显得有点鬼畜。 怎么实现人物攻击让敌人掉血呢，首先我们先要判断攻击究竟有没有打在敌人身上。当人物攻…"}, {"id": "6844903720304525320", "title": "深度解读 2018 JavaScript 趋势报告（含视频）", "desc": "Hello 我是 Randy. 🤣今天在这个视频里，我要带大家一起看看 The State of JavaScript 2018 的调查结果。 The State of JavaScript 是一个由 Raphaël Benitte 和 Sacha Greif, 以及 Mic…"}, {"id": "6844903890811355150", "title": "[译]使用100行代码创建react Hooks聊天室", "desc": "我们会考虑服务器用作黑盒子。 不要担心它的是否完美工作，因为我们将使用简单的套接字与它进行通信。 所有样式都包含在一个CSS文件中，可以复制到 src 目录。 应用程序中使用的所有样式都是 在存储库中链接 。 好的，我们希望让我们的开发环境准备好开始编写代码。 首先，React…"}, {"id": "6844903798456975367", "title": "聊一聊cc的变化侦测和hook实现", "desc": "在回答这个问题之前，我想了下，尤大的那一段采访回答的确非常符合我的心境，首先呢，我们的项目也在大量的过使用redux或者dva,我自己私底下也了解过mobx，可是切换为react-control-center的确让我们的代码更加简洁和更容易维护与扩展，而且比redux多了很多非…"}, {"id": "6844903689212149773", "title": "三分钟，帮你从Redux的深渊解脱", "desc": "由于在h5空间项目中受尽了Redux的折磨，在pad空间的项目中，我们尝试使用Redux的替代品。现在我们向大家推荐Rematch作为React项目中的状态管理工具"}, {"id": "6883034808855822343", "title": "React 从〇开始 入坑", "desc": "JSX语法是一种类似于html标签的语法，它的作用相当于是让我们在JavaScript代码中直接写html代码，但是JSX不完全是html，它是JavaScrip 的一种扩展语法，它具有JavaScript的全部能力，我们还可在JSX代码中插入变量或者表达式，用JSX语法写出来…"}, {"id": "6844903538196234253", "title": "Redux入门", "desc": "本文尝试解释Redux是如何运作的。我们将用Redux创建一个小案列。如果你正在找靠谱的Redux文档，可以去看官方文档。 来自官方文档的描述：Redux是一个可预测的JavaScript状态容器。换句话说，Redux就是用来处理和管理应用的状态/数据。 现在我们来一步一步来解…"}, {"id": "6844903878081642509", "title": "react+mobx实现兼容IE9的CMS系统过程中的经验总结", "desc": "因为想要尝试用 mobx 并且也想自己试着搭建脚手架，所以在开发此项目时并没有使用比较成熟的脚手架如：ant-design-pro，所以在开发过程中遇到了很多问题，在此记录，希望能帮助到其它开发者。 经过此项目我将这个项目的脚手架开源，欢迎大家使用和提建议。 线上的项目无法在 …"}, {"id": "6844903551395692552", "title": "从0实现一个tiny-redux", "desc": "讲真，redux已经很小了，去掉注释代码也就300行吧，注释写的也是非常详细了。 redux 更多的是对思维上的变化：数据改变 + 视图更新 二者分开，各自管理自己。 redux 是这样的一个流程：触发一个action --> redux做一些逻辑，返回state --> 触发…"}, {"id": "6844903602075467789", "title": "[React技术专栏]实现React理解React（上）", "desc": "当第一次接触React会有很多的困惑。文章将介绍React和它的基本理念。 通过阅读文章你将会对于为什么需要React和Redux或者其他状态容器有一个更好的理解。 学习时你不需要使用 JSX，ES6/ES*， Webpack，热加载，理解虚拟DOM，甚至不需要使用React自…"}, {"id": "6844903712125616136", "title": "我的源码阅读之路：redux源码剖析（上）", "desc": "用过react的小伙伴对redux其实并不陌生，基本大多数的React应用用到它。一般大家用redux的时候基本都不会单独去使用它，而是配合react-redux一起去使用。刚学习redux的时候很容易弄混淆redux和react-redux，以为他俩是同一个东西。其实不然，r…"}, {"id": "6903809790221221902", "title": "React 函数组件学习笔记", "desc": "更合适的名字可能是\"afterRender\",useEffect 在浏览器渲染完成后执行。 调用顺序很重要，每次渲染时必须保证顺序完全一致。React 中也不允许出现下面的代码 Context 即上下文，全局变量是全局的上下文，上下文是局部的全局变量。 useContext 里…"}, {"id": "6981718581230714888", "title": "React：记账本04---详情页", "desc": "详情页 需求： 按日期，按收入支出，分类展示记录 CategorySection 可以复用money页的 展示记录 1. 读取records 使用useRecords hook里的record 我们的"}, {"id": "6844903721596354573", "title": "js错误处理权威指北", "desc": "接着我上一篇文章，我想谈谈异常。我肯定你之前也听过——异常是个好东西。一开始，我们害怕异常，毕竟写bug容易被人喷。其实通过修bug，我们实际上学会了下次开发怎么避免这个bug并且可以做得更好。 在生活中，我们常说吃一堑长一智。但对于打代码来说，有些不一样。我们的编译器和一些工…"}, {"id": "6917541581047316493", "title": "React中的Virtual DOM", "desc": "Virtual DOM之于React，就好比一个虚拟空间，React的所有工作几乎都是基于Virtual DOM完成的。其中，Virtual DOM模型负责底层框架的构建工作，它拥有一整套的Virtual DOM 标签，并负责虚拟节点及其属性的构建、更新、删除等工作。那么Vir…"}, {"id": "6844903597138771981", "title": "React.createClass vs extends Component", "desc": "当今 React 比较流行，可能会有很多的新手和我一样遇到这个问题： var MyClass = React.createClass({...}); 和 class MyClass extends React.Component{...} 之间的区别是什么？那么今天带大家一起学…"}, {"id": "6844903597130563591", "title": "超大型 JavaScript 应用的设计哲学", "desc": "前两天情封大大给我推荐了一篇文章，问我是否有意翻译分享一下。乍一看这个才发表两天的文章就有6000多次鼓掌（现在快一万了），快速扫了全文感觉是篇很棒的演讲，便决定开始干，于是，真正的痛苦便开始了。"}, {"id": "6844904021489090573", "title": "在 D2 做主持人是怎样一种体验？", "desc": "17 年的时候，作为一名实习生，在西溪园区作为签到组的志愿者参加了一次 D2。当看到今年 D2 举办的消息，抱着结识大佬和省门票钱（划掉）的心态，忍不住又报了名，11.19 号的时候收到通知，成为了主持组的一名志愿者，当时内心十分惶恐。 白霸天 小姐姐作为主持人组的 BOSS，…"}, {"id": "6844903660871221255", "title": "[译] SpaceAce 了解一下，一个新的前端状态管理库", "desc": "开发前端应用的大家都知道，状态管理是开发中最重要，最具挑战性的一部分。目前流行的基于组件的视图库，如 React，包括功能齐全的（最基本的）状态管理能力。它们使应用中的每个组件都能够管理自己的状态。这对于小型应用程序来说足够了，但你很快就会感到挫败。因为决定哪些组件具有状态以及…"}, {"id": "6844903519938412552", "title": "Parcel 打包示例 - React HelloWorld", "desc": "使用 Parcel 打包的 React HelloWorld 应用。GitHub 地址: https://github.com/justjavac/parcel-example/tree/master/react-helloworld 0. 新建目录 1. 初始化 npm 2.…"}, {"id": "6844903923413680141", "title": "使用 React Hooks 代替 Redux", "desc": "上述这些特征点已经足以说服很大一部分人升级他们的 React 应用。 但是总是感觉少了点什么。 A JavaScript library for building user interfaces. 但是 UI 如果脱离了数据，基本上也就是耍流氓了。 所以有 Redux、Mbox…"}, {"id": "6844903892430372878", "title": "集成React Redux Webpack", "desc": "Action：描述当前发生了什么的普通对象，是改变state的唯一方法。其中type属性是必须的，表示Action的名称。 Action创建函数: 就是生成Action的方法。 Reducer: 是一个纯函数，接受Action和当前State作为参数，描述了应用如何更新stat…"}, {"id": "6844903990673539080", "title": "[译]React高级指引8：与第三方库协同", "desc": "React可以在任何web应用中使用。它可以与其他应用相互嵌套。本章将会介绍一些常用的嵌套的例子，主要侧重于jQuery和Backbone。但是使用这些的思想同样可以应用到其他整合案例中。 React无法感知到在React之外DOM改变。它根据内部虚拟DOM的改变来更新，但是如…"}, {"id": "6844903541505523720", "title": "React：开始构建前你所需的基础知识", "desc": "你是不是对React充满好奇，并且还没有机会学习它？或者你已经尝试过，却挣扎于核心概念的掌握？又或者你已经学习过基础，但是想巩固一下知识？无论你是以上哪种类型，这篇文章都适合你。"}, {"id": "6844903655410237447", "title": "微信小程序之如何使用自定义组件封装原生 image 组件", "desc": "图片未加载完成时先展示占位图，等到图片加载完毕后再展示实际的图片。 假如图片链接有问题（比如 404），依然展示占位图。甚至你还可以增加点击图片再次加载的功能。（例如知乎） 然鹅，小程序原生组件 image 并没有提供这些常用功能... 在小程序没还没推出自定义组件功能时，只能…"}, {"id": "6844903853440106509", "title": "React生命周期 (V16.3之前与之后）", "desc": "componentWillMount： 预装载函数，不能进行修改state的操作，即使做了，也不会进行新数据状态的渲染。在该函数中做的操作，都可以提前到构造函数中。 render： 渲染函数，唯一的一定不能省略的函数，必须有返回值，返回null或false表示不渲染任何DOM元…"}, {"id": "6844903624225587213", "title": "[译] React性能优化-虚拟Dom原理浅析", "desc": "本文译自《Optimizing React: Virtual DOM explained》，作者是Alexey Ivanov和Andy Barnov，来自Evil Martians’ team团队。 译者说：通过一些实际场景和demo，给大家描述React的Virtual Do…"}, {"id": "6910032329041772557", "title": "React系列之setState", "desc": "本文将围绕setState展开以下相关知识点setState的基础语法setState是同步还是异步的？为什么setState在react中要设计为异步的？代码验证一，setState的基础语法：第一"}, {"id": "6844903889607606280", "title": "使用 vue-asyn-manager 管理 Vue 应用中的异步调用", "desc": "不知道大家对 React Suspense 是否有过关注，也许 Suspense 让人比较激动的是在服务端的流式渲染，然而从目前来看，React Suspense 的功能其实就是个 Loadable。当然啦这是我个人的看法，不过这不是今天的重点，今天的重点是介绍如何在 Vue …"}, {"id": "6902705153447559175", "title": "React入门教程：概述和演练", "desc": "react入门的基本指南. 本演练教程将使你从零开始在React中构建应用程序，并且学习state，props 和 components 从我一开始学习javascript的时候，我就一直在听说react，但是我承认我看了一会，它吓到我了。我看到了看起来像一堆HTML 和 Ja…"}, {"id": "6844903781998526471", "title": "React 实现一个简单实用的 Form 组件", "desc": "这已经是比较简单的登录页，一些涉及到详情编辑的页面，十多二十个组件也是常有的。一旦组件多起来就会有许多弊端： 不易于维护：占据大量篇幅，阻碍视野。 可能影响性能：setState的使用，会导致重新渲染，如果子组件没有相关优化，相当影响性能。 表单校验：难以统一进行表单校验。 .…"}, {"id": "6907496262510739463", "title": "为什么 react-hook 函数不允许在if中使用，要按顺序写", "desc": "随着 react-hook 正式发布，大家一夜之间都爱上了这个小家伙。useState, useEffect, useMemo ... 大家体验了它们的姿势之后，都深表喜欢。极大的减少了组件的代码量，让组件看起来干净整洁。但使用时想必大家都出现了疑惑为什么这些函数要按顺序写。比…"}, {"id": "6844904147364347912", "title": "React.js 结合 Next.js 的入门与 Snapaper 完全重构", "desc": "申请季开始进入尾声... 前段时间有幸和「哈陆 Halu」一位去年刚入学加拿大滑铁卢大学的 dalao 通过交换友情链接认识了，他的博客链接是 → https://halu.lu ，保存在「伙伴」栏目名为「無位小站」。借着讨论 Nuxt.js 的机会和他聊了一聊，了解了一些他参…"}, {"id": "6844903638461054983", "title": "React Native vs. Cordova, PhoneGap, Ionic etc", "desc": "最近在网络上看到(译)图解 React这篇介绍 React 的文章。用比喻以及插画的形式科普 React 的相关术语还是蛮有趣的。于是乎自己就翻译了文章原作者讲述 React 术语系列文章中的其余两篇——《What is React Native？》和《React Native…"}, {"id": "6844903814777028622", "title": "React 源码学习（八）：组件更新", "desc": "上面代码看来，一个是不替换组件的情况下更新组件，另一个则是直接更新 markup 标记。我们按照顺序一个个看过来吧，先看到 ReactCompositeComponent.receiveProps ： 关于 DOM 操作一系列的方法这里不准备做解读，可以直接查看源码 core/…"}, {"id": "6844903991306878983", "title": "React Hooks - useState 的使用方法和注意事项", "desc": "在上一篇中介绍了 React Hooks 的基本概念，初识 React Hooks - React 组件定义的变革，这一篇将介绍 useState Hook，使用它可以给函数式组件添加状态支持，另外还会介绍使用它的一些注意事项。 在本示例中，我们将展示一个正方形，然后通过设置 …"}, {"id": "6981720174344798244", "title": "React：记账本05---数据持久化与数据展示", "desc": "数据持久化 为什么要做数据持久化？ 因为不持久，数据存在内存，一刷新就没有了 这样可以实现整个项目不同页面数据的统一 怎么做？ 使用自定义Hooks 结合 Localstorage 标签页数据持久化 "}, {"id": "6920886135333847047", "title": "setState小总结", "desc": "如何获取setState后的值方法一方法二为什么不能用this.state.XXX=新值的方式更新数据？当执行setState时，会将需要更新的state合并后放入状态队列，而不会立即更新this.s"}, {"id": "6943037879778017287", "title": "20行代码实现React全局状态共享", "desc": "最近在使用 redux 做项目时，发现其 connect , reducer 等写法十分让人苦恼。给我们带来便利的同时产生了大量的模板代码。虽然一些大佬觉得其设计非常有逻辑且易维护，但其大量的模板代码及设计思路确实会让一些人心烦意乱。我思考了一下，有没有办法可以跳过 dispa…"}, {"id": "6844903622531088397", "title": "React 状态管理：状态与生命周期", "desc": "在《React 状态管理：从 Props 和 State 说起》一篇中，我们介绍了一个 React 组件状态管理的基础：props 和 state，以及这两个对象对 React 组件渲染的影响。在这一篇里，我们来看看这两个对象在组件的生命周期中，是如何与组件相互作用的。 生命周…"}, {"id": "6957516297055764488", "title": "React学习笔记(二) 组件", "desc": "组件允许我们将代码拆分为独立可复用的代码片段，这是一个十分重要的概念................"}, {"id": "6844903550623940615", "title": "对服务端渲染的一次完全实践", "desc": "我们还可以自己写逻辑 通过context来处理302、404等。但这里我不需要。。。。。，为什么呢？ 我对路由的处理流程上面的思维导图有说明，就是在nginx中多配一个代理。 上面说server端初始化数据的时候还有一个登陆问题没说。 到这一步，访问域名，就能够正确展示服务端渲…"}, {"id": "6844903813908791309", "title": "react组件抽象通识篇", "desc": "为什么会提到一个抽象组件的概念，其实我们称其为高复用组件更好，因为其实在业务开发中很多时候会有这样的场景，我们的某部分功能是可以共用给其他部分的，但这部分又不太可能脱离组件或者某个基准数据存在。于是，我们需要将这部分代码进行一定的抽象或者说设计。 混入在其他编程语言中非常常见，…"}, {"id": "6844903617128824846", "title": "再厉害的魔术也比不上真正的redux", "desc": "其它组件可以通过订阅store中的状态(state)来刷新自己的视图. redux的数据源是创建reducer时，传进去的initState。 为了避免state被随意篡改，redux通过dispatch reducer来更改数据。 最近在研究redux，欢迎指出问题。后续更新…"}, {"id": "6844903619377152007", "title": "转行前端一年回顾+一点学习心得", "desc": "全文比较长，列个大纲一、Whychoosefront-end二、2017.01-2017.05（自学）三、2017.06.01-2018.06.01（工作一年）1.勤奋2.养生3.学英语4.输出5.杂"}, {"id": "6844903840584564743", "title": "React实现简单易用Toast", "desc": "很多项目中需要实现app中常见的提示效果Toast。这个效果看似简单，实现起来也容易，为了方便，将它封装成npm组件，方便后续使用。 首先是支持多个提示，不同提示定制化也可以不同。取名为Notice。 Notice外面还有个容器组件，用来装载Notice并且，暴露一些方法给To…"}, {"id": "6844904128267698190", "title": "「 React 」系列，手动实现一个 redux 与 react-redux", "desc": "由于公司项目的技术栈是 React，与之配套的公共状态管理的库是 Redux，最近也研究了其中的原理。由于我之前是硬背 Redux 的用法，时间搁久了总是忘记如何使用。每次要用的时候，就去翻文档，不仅效率低下，用起来也感觉到恶心自己了。搞清楚了背后的机制，写起来就很顺手。相信大…"}, {"id": "6844903635868991501", "title": "我与小程序的故事以及小程序框架选型", "desc": "这是一篇我与小程序的故事，但小程序的过去却与我无关。 曾经与她错失交臂，但愿一切还来得及。 毕业后的两年内，一直在创业公司工作，但自己却错过了很多创业风口，如区块链和小程序，唯独跟风了机器学习，但这是一条漫长的路，需要潜心学术否则很难做出成绩，我曾在现公司AI Labs的某部门…"}, {"id": "6861564965116084238", "title": "React常用Hooks API源码解析", "desc": "自己在使用hooks API的过程中经常会遇到一些问题，有的时候是对API的理解上的，有的时候是对为什么会这样而疑惑的，所以花了几天的时间查阅了一些资料翻看了源码，在这里做下总结，也算是一些个人理解的经验分享吧。主要是介绍hooks实现的三个要点，以及基于三要点的常用API源码…"}, {"id": "6972434435878682655", "title": "[译] Inside Fiber： 深入了解React的新协调算法", "desc": "React是一个用于构建用户界面的JavaScript库。它的核心机制是跟踪组件的state变化并将更新后的state显示到屏幕上。在React中这个过程叫做协调(reconciliation)。我们"}, {"id": "6984051159837360164", "title": "打造一个你自己的 React", "desc": "打造你自己的 React —— Didact 我们将遵循 React 源码的体系结构，但不不带所有的优化和非必要的特性，一步一步地从零开始重写 React。原文作者将这个简版的 React 命名为 D"}, {"id": "6986652815112273933", "title": "React Effect这些细节你必须得掌握", "desc": "React Effect这些细节你必须得掌握 1、React-Hooks 里面effect钩子相当于react class里面哪几个生命周期？"}, {"id": "6844903571083755533", "title": "2017 前端技术发展回顾", "desc": "HTML 5.2 发布。 毫无疑问，这是 Vue.js 在流行中飞速发展的一年。 前端 HTML & CSS 开发者和前端应用程序开发者之间的巨大区别终于被认知，并重新定义。 作为使用 web 技术构建应用程序的前端 JavaScript 开发者变得越来越好，也越来越糟。 今年…"}, {"id": "6877848372586217486", "title": "使用React Hooks代替class Component的六个原因", "desc": "大多数人已经熟悉了Class Component 的写法，继续使用是一个很简单的方式。 1. 当一个函数组件变大，你不需要对他进行Class Component 的重构 一般来说，我们在拆分页面时，会抽离一些组件，其中部分只依赖于props，也就是我们常说的木偶组件，随着功能的…"}, {"id": "6904575724233949191", "title": "react-admin-plus 正式开源, 欢迎star", "desc": "基于react、ant-ui、typescript的前端微服务框架。欢迎star。 先说一下我做这个项目的初衷，其实市面上已经有几款类似的产品了，但是总结起来就是：乱，杂。所以自己打算重新写一个类似的项目。本着简约至上的原则，加上react带给我的方便，开发了这个项目。 本人做…"}, {"id": "6915998278915981326", "title": "你知道 react-color 的实现原理吗", "desc": "ReactColor 是一个优秀的 React 颜色选择器组件，官方给了多种布局供开发者选择。 笔者常用的主题为 Sketch，这种主题涵盖了颜色面板、推荐色块、RGB颜色输入等功能，比较完善。但是最近在写一个富文本编辑器，编写过程中遇到了一些问题，比如用户在点击推荐色块时，编…"}, {"id": "6854573214749294600", "title": "React Hook测试指南", "desc": "要理解单元测试，我们先来给测试下个定义。用最简单的话来说测试就是：我们给被测试对象一些输入（input），然后看看这个对象的输出结果（output）是不是符合我们的预期（match with expected result）。而在软件工程里面有很多不同类型的测试，例如单元测试（…"}, {"id": "6955740697081151524", "title": "webpack5 手动搭建React TS项目", "desc": "webpack5 手动搭建React TS项目 1. 前言 2. 初始化项目 找一个空白的目录然后执行下面代码: 3. 初始化typeScript配置 新建一个tsconfig.json文件，我这里直"}, {"id": "6844903752982331405", "title": "手把手教你快速搭建专属的storybook", "desc": "Storybook是一个辅助UI控件开发的工具。通过story创建独立的控件，让每个控件开发都有一个独立的开发调试环境。 Storybook的运行不依赖于项目，开发人员不用担心由于开发环境、依赖问题导致不能开发控件。 Storybook支持的框架覆盖主流的框架（React、Vu…"}, {"id": "6932646893461700621", "title": "2021 年学习 React 的所需要的 JavaScript 基础", "desc": "在理想的情况中，您可以先了解所有有关 JavaScript 和 web 开发的知识，然后再深入了解React。 但是，我们没有办法这样，如果等你把所有 JavaScript 的知识都掌握了再去学习 React，就会浪费很多时间。 如果您已经有一些使用 JavaScript 的经…"}, {"id": "6992213592619614245", "title": "React 高级三部曲 ｜ 8月更文挑战", "desc": "第七节：React原理揭秘 为什么setState() 更新数据是异步的？ 知道JSX语法的转化过程吗？ 说出React组件的更新机制？ 如何对React组件进行性能优化？ React的虚拟DOM和D"}, {"id": "6895262415919775758", "title": "React的时间简史 | 🏆 技术专题第六期征文", "desc": "首先，失踪人口正式回归，近来遇到些事情导致原定的系列计划搁置，深表抱歉，后续会正常迭代。 React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，…"}, {"id": "6844904066435252238", "title": "精通React/Vue系列之实现一个全局提示(Message)组件", "desc": "本文是笔者写组件设计的第十一篇文章, 今天带大家实现一个同样比较特殊的组件——全局提示(Message)组件。 由于全局提示组件的设计原理和笔者上一篇写的精通React/Vue系列之手把手带你实现一个功能强大的通知提醒框(Notification)是类似的，区别主要是布局和配置…"}, {"id": "6990664042402545672", "title": "React学习之Redux", "desc": "Redux 官方文档对它的定义是：一个可预测的 JavaScript 应用状态管理容器，本文就简单聊一聊吧~"}, {"id": "6844903796250771464", "title": "🔱 快速上手三大基础 React Hooks", "desc": "useState 允许我们在函数式组件中维护 state，传统的做法需要使用类组件。举个例子🌰，我们需要一个输入框，随着输入框内容的改变，组件内部的 label 标签显示的内容也同时改变。下面是两种不同的写法： useEffect 是专门用来处理副作用的，获取数据、创建订阅、…"}, {"id": "6927490083348348936", "title": "手摸手搞一个划词高亮组件 | 牛气冲天新年征文", "desc": "转眼，今天已经是大年29了。而我已经在家打了两天王者了（还没放假了好兄弟们辛苦了，打工人牛逼--超大声） 为啥要写这篇文章？额...这要从两幅图片说起。 打王者打的把自己打自闭了😭，于是乎跑到掘金打算看看究竟是谁今天还在上班（嘿嘿）。 再于是乎发现又有征文活动，故心存歹意的我…"}, {"id": "6844903772968206350", "title": "让动画变得更简单之FLIP技术", "desc": "我一开始也有这个疑惑，但是当我实际实现一个动画的时候，比如开头的那个卡片动画，这个疑问就立即得到了解答。 但除此之外，还有一部分你无法明确的初始态(First)或结束态（Last）的动画，比如开头那个卡片动画，除非你限定死了每个卡片的尺寸以及整体页面的尺寸，否则你无法明确当你任…"}, {"id": "6844903710993170445", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi+四期vueX的使用+图片上传+富文本编译器", "desc": "1."}, {"id": "6903716561031430158", "title": "react组件化——context", "desc": "首先大家要明白一些概念，首先是 react 组件间传递数据是通过 props 向下（也就是想子组件传递），是单向传递的，从父级一层一层地通过 props 地向下传递到子子孙孙，有的时候我们组件一层一层的嵌套多层，这样这种方式一层一层传递麻烦，我们可不可以进行跃层传递，这就会用到…"}, {"id": "6844903636187742221", "title": "一个基于 redux 和 redux-saga 的数据流方案 | DvaJS", "desc": "30分钟上手@dva 2.x"}, {"id": "6844903648321863688", "title": "发布你的第一个 React 组件到 npm", "desc": "平时总会在项目中引用各种社区的 React 组件，也会在自己的项目中封装可重用的组件，但是一直不知道怎么把组件发布到 npm。正好最近项目对 Toast 的需求比较大，搜索后也没发现可用的轻量级组件，于是干脆自己撸一个发到 npm 练手。 在编写一个社区组件之前，最重要的一点是…"}, {"id": "6844903954984206343", "title": "React源码解析（二）：关于React.Children，你了解多少？", "desc": "在react.development.js中，找到关于map方法的所有函数，在需要的地方打上断点，我们看它是如何执行的。 上面的两种情况的返回值就是调用函数时接收的变量值。 然后返回的result就是我们在控制台输出的结果。 这时候，传入的展开数组函数方法变得不一样了，我们还是…"}, {"id": "6844903609923026957", "title": "Web Bundler CheatSheet, 选择合适的构建打包工具", "desc": "题注：Web Bundler CheatSheet 属于 Awesome-CheatSheet 系列，盘点数个常用的开发打包工具清单。欢迎加入阿里南京前端团队，欢迎关注阿里南京技术专刊了解更多讯息。 工欲善其事，必先利其器，当我们准备开始某个 Web 相关的项目时，合适的脚手架…"}, {"id": "6844903767780016135", "title": "基于React Context Api 和 Es6 Proxy的状态管理", "desc": "近几个月的工作中，有遇到一些场景：基本不需要全局的状态管理，但页面级的，肯定需要在一些组件中共享，引入Redux这类状态管理库有点繁琐，直接通过props传递的话，写起来总觉得不是那么优雅。刚好项目中React版本比较新，就试了下Context Api，代码大致如下： 这里已一…"}, {"id": "6907202230932553742", "title": "推荐使用并手写实现redux-actions原理", "desc": "第一次见到主要是接手公司原有的项目，发现有之前的大佬在处理redux的时候引入了它。 发现也确实 使得 在对redux的处理上方便了许多，而我为了更好地使用一个组件或者插件，都会去去尝试阅读源码并写成文章 ，这个也不例外。 综上所示，我们难免会觉得 increment 和 re…"}, {"id": "6844903888110223367", "title": "小哥哥, React-SSR 要不要了解下-基础篇", "desc": "咱也不知道这会儿写这个出来算不算过时, 反正就想写写. 至于有没有人看, 看完点不点赞, 点完赞会不会实践. 咱也不敢问呀, 随手写写吧~ 到了 9102 年, 作为前端扛把子的 React 依然炙手可热. 周边的各种生态更是红的发烫. 每天应付完各种业务需求真的想舒舒坦坦躺上…"}, {"id": "6844904200657174542", "title": "React从15.x升至16.13.1", "desc": "1. React16废弃点 2. 小改动点 之前一些代码，由于使用短路运算，所以className可能会接受到Boolean值。这时，React是会提示红色警告。 有一些旧代码，在get方法中使用ReactDom.findDOMNode获取节点来计算宽高属性，达到动态变化的效果…"}, {"id": "6844903554516254727", "title": "组件的划分", "desc": "本篇主要来聊一聊组件的划分的那些事。现在的前端开发，都是围绕着组件展开的。我们逐渐意识到，理解组件化的含义，清楚组件划分的规则至关重要。如何做到组件与组件之间的耦合度尽量的小，如何完成子组件和父组件的划分，或许，是我们开发一个优秀的系统前，需要去认真思考的问题。 本篇文章主要使…"}, {"id": "6844903736846843912", "title": "建站四部曲之前端显示篇（React+上线）", "desc": "本系列分为四篇：建站四部曲之后端接口篇（SpringBoot+上线）建站四部曲之Python数据爬虫篇(selenium)建站四部曲之前端显示篇（React+上线）建站四部曲之移动端篇（Android"}, {"id": "6844903618454224910", "title": "深入浅出React和Redux", "desc": "组件不应该改变prop的值，state存在的目的就是让组件来改变的。 this.setState()函数所做的事情，首先是改变this.state的值，然后驱动组件更新过程。 装载过程Mount：组件第一次在DOM树中渲染的过程。 componentWillMount comp…"}, {"id": "6923092714074406925", "title": "React初探", "desc": "这是我步入前端领域的第一站，也是我第一次在这个平台上面写文章。在简单了解 html、css、js 的相关语法和原理之后，花了差不多两个月的时间学习了 React 框架。在学 React 的最初，是想和前面一样跟着 MDN 的文档来学习的。然而，看了没多久就放弃了，因为看文档学习…"}, {"id": "6844903671482810382", "title": "基于React 源码深入浅出setState:深度刨析updater的结构和原理", "desc": "在上一篇 详细了解了setState的一些机制和原理，同时对 updater 也作了简单的解释，这篇文章我们将详细了解这个updater的数据结构和调用堆栈. 实际的 enqueueSetState(inst, payload, callback)只有三个参数，第四个参数是为默…"}, {"id": "6844903842438447112", "title": "react解析 React.Children(二)", "desc": "getPooledTraverseContext 和 releaseTraverseContext 中的代码, 引入了对象重用池的概念。这个概念的用处就是维护一个大小固定的对象重用池，每次从这个池子里取一个对象去赋值，用完之后就将对象上的属性清空然后丢回池子。维护这个池子的用意…"}, {"id": "6844903792501063693", "title": "如何在受控表单组件上使用 React Hooks", "desc": "React Hooks 是一个闪亮的新提案，将优化 90% 的 React 代码。 根据 Dan Abramov 的说法，Hooks 是 React 的未来。 这听起来不错，但什么是 Hooks，它们将如何帮助我编写更好的代码？ 很高兴你这么问。 Hooks 允许你访问函数组件…"}, {"id": "6922735450335477774", "title": "Hook 入门", "desc": "Hook 是 React 16.8 的新增特性，是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。 详细参考 How Are Function Components Different from Classes?, 感兴趣的同学可以直接看原文。…"}, {"id": "6844903543392976910", "title": "React Native Expo开发的OW移动端项目", "desc": "项目基于Expo的 React Native 构建技术。 exp publish用于发布 JS Bundle 文件，用于热更新应用，更改 app.json 文件的版本号，icon 之类，用户安装的 App 会自动同步发布时版本所改动的内。参考资料 1 参考资料 2"}, {"id": "6931274850820915207", "title": "create-react-app 项目中使用antd-mobile（按需引入）", "desc": "react-app-rewired2.* 以后，不支持injectBabelPlugin的方式，所以需要安装customize-cra。 项目重新启动就可看到效果了。"}, {"id": "6844903700805189639", "title": "用纯 DOM 的方式结合 Puppeteer 自动生成网页骨架屏", "desc": ".. a. 前两者的前提都是需要开发者自己编写骨架屏代码 b. 饿了么的做的比较强大了，还有 UI 界面专门调整骨架屏 只支持 history 模式."}, {"id": "6844903605598683143", "title": "React v16 与 Webpack v4 的多特性模板项目", "desc": "题注：欢迎加入阿里南京前端团队，欢迎关注阿里南京技术专刊了解更多讯息。 React & Webpack Boilerplate V4 是笔者前端常用模板集锦项目 fe-boilerplate 的一部分，尽可能地使用无异议的工具，提供直观且简洁明了的方式；相较于 create-r…"}, {"id": "6844903909702500359", "title": "代码分离和懒加载", "desc": "入口起点：使用 entry 配置手动地分离代码。 防止重复：使用 SplitChunksPlugin 去重和分离 chunk。 动态导入：通过模块中的内联函数调用来分离代码。 入口起点的方式较为简单，但会导致依赖包被重复加载的问题，这时我们可以使用SplitChunksPlug…"}, {"id": "6890019457872166926", "title": "React源码解读 | React.PureComponent实战篇", "desc": "前言PureComponent通过浅比较props和state来防止页面不必要的渲染，本文是实验篇，通过React例子，以实验的方式验证PureComponent一些优化以及规避方式实验渲染过滤Pur"}, {"id": "6844903591946223624", "title": "React组件抽象", "desc": "组件抽象指的是让不同组件公用同一类功能，可以说成组件功能复用，在不同的设计理念下，有许多抽象方法，而对于React，主要有两种：mixin和高阶组件。mixin在createClass中可以使用，但在ES6 classes中已抛弃（因为它存在很多副作用），但是我们可以通过dec…"}, {"id": "6844903730366677006", "title": "maka.js，基于react、redux 的前端框架", "desc": "maka.js,基于react、redux 的前端框架，框架简化了很多技术概念，更多从生态设计角度考虑一个复杂系统应该如何实现。 特别适合做中后台系统，github源码中有example."}, {"id": "6844903741196500999", "title": "React 之 Redux", "desc": "1. 随着 JavaScript 单页应用开发日趋复杂,管理不断变化的 state 非常困难 2. Redux的出现就是为了解决state里的数据问题 3. 在React中，数据在组件中是单向流动的 4. 数据从一个方向父组件流向子组件(通过props)，由于这个特征，两个非父…"}, {"id": "6844903545364283406", "title": "安利一个React同构渲染脚手架 —— razzle", "desc": "客户端渲染：页面在 JavaScript，CSS 等资源文件加载完毕后开始渲染，路由为客户端路由，也就是我们经常谈到的 SPA（Single Page Application）。 服务端渲染：页面由服务端直接返回给浏览器，路由为服务端路由，URL 的变更会刷新页面，原理与 AS…"}, {"id": "6876206438998343693", "title": "chocolate-ui", "desc": "Storybook是一个辅助UI控件开发的工具。通过story创建独立的控件，让每个控件开发都有一个独立的开发调试环境。 防止分支大幅偏离主干，如果不是持续继承，主干又在大幅更新，导致以后的代码集成比较困难。 发布订阅模式：订阅者（Subscriber）把自己想订阅的事件注册（…"}, {"id": "6844903637513142286", "title": "React-简单通用的抛物线动画", "desc": "一个简单通用的React抛物线动画demoUsageparabola方法简易试图"}, {"id": "6918904989158998029", "title": "从零搭建一个react-hooks项目（五）", "desc": "注意：thread-loader 需要 style-loader 之后，这是因为 thread-loader 后的 loader 没法存取文件也没法获取 webpack 的选项设置。"}, {"id": "6903706817142980622", "title": "黑盒续集 | 如何在 CRA 黑盒中争取主动权？", "desc": "之前分享了“CRA为什么要做成黑盒”的内容，见上篇。之前我们聊到，之所以在Vue和React中实现黑盒功能，其目的很明确，就是方便版本升级后，我们所开发的项目的依赖会自动跟随升级。但是，一旦打破这种约"}, {"id": "6844903573466120206", "title": "React-redux源码分析", "desc": "React-redux源码总共分为两部分，第一是Provider，第二是connect。 即通过context api将store传到子组件里面去。 写的其实比较绕，但是理解起来不难，首先createConnect方法只相当于一个包装而已，将高阶组件connectHOC,以及一…"}, {"id": "6844904064740769805", "title": "React Hooks数据管理", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性，以及数据状态共享。 useEffect代替常用生命周期函数，useEffect跟 class 组件中的 componentDidMount、c…"}, {"id": "6926071149826670599", "title": "react性能新姿势", "desc": "写过react项目的同学，都经历过react性能优化，一般的方法是缓存某些计算，或者使用purecomponent、memo等方法减少不必要的组件渲染，以及使用context替代props透传等，下面探讨一种能从开始开发项目时就能保证页面性能的方法。 大多数的项目堆砌react…"}, {"id": "6979587398627753997", "title": "初学react之组件传值", "desc": "一、在使用react的时候，组件传值是一个非常重要的知识点，组件传值一般有父子组件传值、兄弟组件传值（我们常用的），那么接下来上代码。 二、总结 其实组件传值的思想大该都差不多，大家有个印象，以后容易"}, {"id": "6979500335760932872", "title": "React高阶组件-总结", "desc": "React高阶组件 索引 在React组件的构建过程中，常常有这样的场景，有一类功能需要被不同的组件公用，此时，就涉及抽象的话题，在不同设计理念下，有许多的抽象方法，而针对React，我们重点讨论两种"}, {"id": "6844903506311135240", "title": "[译] 响应式脑电波—如何使用 RxJS、Angular、Web 蓝牙以及脑电波头戴设备来让我们的大脑做一些更酷的事", "desc": "几个月前，我偶然间发现了一台蓝牙智能脑电波头戴设备。我突然意识到它的巨大潜力，使用它可以做一些超级酷的事情：使用 Web 蓝牙，可以直接用大脑与网页进行通讯！ 脑电波 ( Electroencephalography，简称 EEG ) 本质上是监控脑电活动的一种方式。它通常需要…"}, {"id": "6844904177236181006", "title": "带你初学React之Class组件生命周期函数(二)", "desc": "React根据我们上面的思想，也做了优化，使用React.PureComponent代替React.Component;PureComponent 会在 render 之前对比新 state 和旧 state 的每一个 key，以及新 props 和旧 props 的每一个 k…"}, {"id": "6844903769495322632", "title": "一起动手造轮子: Redux + React Redux", "desc": "今天和大家一起实现下 Redux 以及 React Redux 的最核心的功能，理解了它们的基本实现可以帮助大家更好的使用这些库，也可以帮助大家更好的理解这些库的源码(阅读本文之前，默认大家已经对这两个库的基本 api 有所了解了哈～)。本文用到的完整代码在这里：redux-an"}, {"id": "6844903805541318670", "title": "React入门到使用", "desc": "当你觉得原生js代码乱七八糟的时候，那就是要体验一下React。（秘籍在最后） 踢开React的大门。 React 的核心思想是：封装组件。 各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。 组件及其生命周期、样式、路由、网络请求、事件处理、数据存储和传递。 …"}, {"id": "6844903753141878797", "title": "React Router从V2/V3到V4的变化", "desc": "React Router v4几乎重写了v2/v3，相比于v3变化较大，包括Router/Route的改变，组件嵌套的方式，路由的生命周期，Swicth和Redirect等组件都改变较多，新版本的react router更偏向组件化，基本上与React的思想一致。 在v4中,提…"}, {"id": "6945348081403559966", "title": "一个懒加载和虚拟滚动的复杂案例", "desc": "原先在表格列表中是切换列表页面的时候才存一次tableSource到localStorage，为了保险需要在点阅片跳转的时候再存一次当时的页数。避免从阅片界面选中了其他页码的列表项后，改动了tableSource，又回到表格列表点击跳转时传错误的tableSource而非表格此…"}, {"id": "6844904155165753352", "title": "react+webpack4.x搭建前端项目（六）webpack的多模块打包配置", "desc": "多app打包的意思是：多个模块单独打包，模块之间的资源互相不依赖，某一模块的资源打包在该模块下。这是和多页面最不大的不同，打包资源再多页面之间其实是公用的，bundle包资源也具有相互依赖的特征 这里不具体讲述修改的代码细节了，值只贴一下关键代码。 其它详细配置这里不多说了，详…"}, {"id": "6844904036945100807", "title": "如何更高效、方便的在React.js中操作State", "desc": "flatten state目的是就是把数据扁平化，更加方便我们对数据的操作，flatten就是类似于使用HashMap的形式，在JavaScript中我们可以使用Object。 在这里我们以React为例子，在ReactHooks中我们经常对数据进行操作，但是如果操作的是一个对…"}, {"id": "6844903858523619335", "title": "React 30 秒速学：制作文件拖放组件", "desc": "为此组件创建一个名为dropRef的引用。 使用React.useState()钩子来创建drag和filename变量，分别初始化为false和空字符串。变量dragCounter和drag用于确定是否正在拖动文件，而filename用于存储被删除文件的名称。 创建handl…"}, {"id": "6844904040531230733", "title": "Stook-rest：React 异步数据管理思考", "desc": "八个月前，我曾经写过一篇文章 React 异步数据管理思考，当时我认为使用 React Hooks 管理异步数据是一个更好的选择。半年来我在项目中一直使用这种解决方案，发现这种方案的有点很多：TypeScript 支持度好、代码量少且可读性好、Loading 状态获取容易等。缺…"}, {"id": "6844904195074555912", "title": "React Hooks 手把手体验", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使用 Hook…"}, {"id": "6844904070822494215", "title": "揭开React Hooks神秘面纱", "desc": "React Hooks是React 16.8的新增特性，它可以让你在不编写类的情况下使用state和其他React功能。hook翻译过来就是“钩子”，即在函数式组件中“钩入”React state以及生命周期等特性的函数。一个简单的hook类似于 那么，为什么会有React H…"}, {"id": "6844903599240118280", "title": "React 深入系列6：高阶组件", "desc": "1. 基本概念 高阶组件是React 中一个很重要且比较复杂的概念，高阶组件在很多第三方库（如Redux）中都被经常使用。在项目中用好高阶组件，可以显著提高代码质量。 高阶组件的定义类比于高阶函数的定义。高阶函数接收函数作为参数，并且返回值也是一个函数。类似的，高阶组件接收Re…"}, {"id": "6844903588989239303", "title": "react高阶组件", "desc": "高阶组件不是组件，而是一个普通的函数，传入一个组件，返回一个新的组件。 昵称和手机号可以不改变，内容改变。 当填写用户名和手机号后刷新页面，用户名和手机号依然存在。实现：将这两个值保存到localstorage中，刷新后重新加载。 1.如果还需要手机号，qq号等和usernam…"}, {"id": "6844903505832968206", "title": "antd源码解读（7）- Breadcrumb", "desc": "Antd的面包屑组件是一个能够结合路由进行跳转页面的组件，其中对于路由的支持是react-router@3以及react-router@4。"}, {"id": "6844903560052752392", "title": "使用React进行组件库开发", "desc": "最近针对日常业务需求使用react封装了一套[组件库], 大概记录下整个开发过程中的心得。由于篇幅原因，在这里只对开发过程中比较纠结的选型和打包等进行讨论，后续再对具体组件的封装进行讨论。"}, {"id": "6938705486116028429", "title": "使用webpack搭建react项目", "desc": "在之前有一篇使用react搭建vue项目的文章，现在来说一下用webpack搭建react项目，按照我个人来说，搭建react项目比vue项目坑多一点。下面的文章会一一说明，废话不多说，直接开干rea"}, {"id": "6844903850353442830", "title": "React16.8定义上下文的3种方式", "desc": "1、在某些场景下，你想在整个组件树中传递数据，但却不想手动地在每一层传递属性。你可以直接在 React 中使用强大的contextAPI解决上述问题 2、在一个典型的 React 应用中，数据是通过 props 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而…"}, {"id": "6844903713287438344", "title": "可能是基于 Hooks 和 Typescript 最好的状态管理工具", "desc": "未能找到一个完美满足这两点的，所以我决定自己造了一个：叫 Stamen。 首先是 简单易用，并且适合中大型项目，Stamen 的 Api 设计借鉴了 dva、mirror、rematch，但却更简单，主要借鉴了它们的 model 的组织方式：state、reducers、eff…"}, {"id": "6978096183373725710", "title": "react最好用的属性之context", "desc": "一、当我们父组件中嵌套了非常多子组件，然后子组件的数据又依赖父组件的传入，然后子组件中又嵌套孙组件，那么想要在父组件中传值给孙组件就是个技术活了，如果一直用props传的话，那就是套娃一样了，所以我们"}, {"id": "6844903543485235207", "title": "深入理解React源码", "desc": "UnderstandingTheReactSourceCode — InitialRendering(SimpleComponent)IPhotobyGerrievanderWalton Unspla"}, {"id": "6844903498190946311", "title": "从Facebook的React框架事件学习一下开源协议", "desc": "前一阵子由于Facebook BSD+PATENTS License的原因，Apache项目禁止使用带该license的代码，引人注目的就是Facebook的React前端框架。 后来在知乎上看到百度内部也要求在半年内完成内部产品的转型，如下图所示。 最近又看到Facebook…"}, {"id": "6921720981278949390", "title": "深入浅出的学习react[学习笔记12]", "desc": "当项目的数据流乱作一团的时候，层层排查到最后，会发现始作俑者往往是 setState——工作机制太复杂，文档又不说清楚，只能先“摸着石头过河”。 久而久之，setState 的工作机制渐渐与 React 调和算法并驾齐驱，成了 React 核心原理中区分度最高的知识模块之一。接…"}, {"id": "6844903744778272775", "title": "React组件的State", "desc": "我们的组件都是使用ES6的class定义的，所以组件的属性其实也就是class的属性（更确切的说法是class实例化对象的属性，但因为JavaScript本质上是没有类的定义的，class只不过是ES6提供的语法糖，所以这里模糊化类和对象的区别）。 在ES6中，可以使用this…"}, {"id": "6908982676921794574", "title": "如何使用React.Children的map方法制作一个Tabs组件?", "desc": "近期在学习React的源码，其中讲到有关于React的一些api内部的实现。看到了React.Children，觉得不错，于是手动使用它来实现一个简单的Tabs组件，废话不多说直接开撸。"}, {"id": "6844903917235470350", "title": "基于React 框架开发 DragScroll组件-(3)", "desc": "在开发思维导图控件blink-mind-react的时候，有一个需求是：当点击展开和折叠某个节点的时候，需要展开和折叠的icon的位置（相对于视口的位置）不要发生变化。 这个思维导图组件是放在DragScroll组件里面的，因为思维导图需要可以拖动到视口的任何区域进行查看。在开…"}, {"id": "6844904137901998094", "title": "React 源码解析（一） —— Virtual DOM", "desc": "Virtual DOM 的主要思想就是模拟 DOM 的树状结构，在内存中创建保存映射 DOM 信息的节点数据，在由于交互等因素需要视图更新时，先通过对节点数据进行 diff 后得到差异结果后，再一次性对DOM 进行批量更新操作，这就好比在内存中创建了一个平行世界，浏览器中 DO…"}, {"id": "6844903648179257351", "title": "React中的Context和Portals用法", "desc": "React16.3更新了很多新的内容：生命周期、Context、React.createRef()、Portals等等。对于更新飞快的前端来说，我们应该已经习惯了要不断学习╮(╯▽╰)╭。本文将介绍官方文档两个结合新内容Context和Portals。 在传统的React应用中…"}, {"id": "6844903497830236167", "title": "前端每周清单第 32 期：React 开源协议更新、JS 完整编年史、Vue 组件通信", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Facebook 宣布重置 React，J…"}, {"id": "6844903617661501454", "title": "IMVC（同构 MVC）的前端实践", "desc": "内容来源：2017 年 3 月 11 日，携程研发高级经理古映杰在“携程技术沙龙 | 新一代前端技术实践”进行《IMVC（同构 MVC）的前端实践》演讲分享。IT 大咖说（微信id：itdakashuo）作为独家视频合作方，经主办方和讲者审阅授权发布。 随着 Backbone …"}, {"id": "6916062942114873351", "title": "react学习（1）-从hooks开始", "desc": "前言了解过react的同学都知道，react分类组件和函数组件，本篇作为react学习的的第一篇文章，是为了记录react中函数组件的基本知识，从项目生成开始，逐步记录react语法，组件传值，hoo"}, {"id": "6844903866194984974", "title": "React入门-井字游戏实现与完善", "desc": "前段时间换了家外企工作, 空闲时间比较多。 虽然我是做Java后端的，但是老外喜欢搞敏捷开发和全栈，所以也要写前端，既然是老外，那肯定是喜欢用React的，然而我之前从来没写过React，只能从基础一步一步来了。 井字游戏是React官方的入门实战教程的案例来的，在这里。 都是…"}, {"id": "6844903599240118285", "title": "React 深入系列4：组件的生命周期", "desc": "组件是构建React应用的基本单位，组件需要具备数据获取、业务逻辑处理、以及UI呈现的能力，而这些能力是要依赖于组件不同的生命周期方法的。组件的生命周期分为3个阶段：挂载阶段、更新阶段、卸载阶段，每个阶段都包含相应的生命周期方法。因为是深入系列文章，本文不会仔细介绍每个生命周期…"}, {"id": "6844903577056444429", "title": "窥探React-源码分析(二)", "desc": "上一篇文章讲到了React 调用ReactDOM.render首次渲染组件的前几个过程的源码, 包括创建元素、根据元素实例化对应组件, 利用事务来进行批量更新. 我们还穿插介绍了React 事务的实现以及如何利用事务进行批量更新的实现. 这篇文章我们接着分析后面的过程, 包括调…"}, {"id": "6844903668035092494", "title": "自己手撸一个符合Promise/A+的Promise", "desc": "Promise是什么，相信不用说了，写过js的人或多或少都接触过。刚开始用Promise的时候，总感觉这种写法非常的怪异，但是当慢慢熟悉的时候，发现一切都是那么和谐。 我自己理解的Promise用来解决异步回调嵌套的问题，它代表了异步操作的一种结果。它是一种状态机，从实现上来说…"}, {"id": "6844903798033350664", "title": "前端数据层的探索与实践（二）", "desc": "数据模型是Redux-ORM的核心。根据实际业务，我们会定义很多的数据模型，通过定义模型的静态属性字段field对实体进行建模。一个模型代表一张表，模型的名字用静态属性modelName定义，模型的属性用静态属性field定义，这些数据模型都继承于Model。模型的属性fiel…"}, {"id": "6844903661835927566", "title": "React项目中Uncontrolled Component的运用", "desc": "实际上，uncontrolled思想的运用已经远远超出了form元素的范畴，合理的使用uncontrolled component可以很大程度的简化代码，提高项目的可维护性。本文将结合几个常用的例子，总结个人在项目实践中对uncontrolled思想的运用。如有错误，欢迎指出。…"}, {"id": "6844904045686030350", "title": "深入浅出 Create React App", "desc": "本文差点难产而死。因为总结的过程中，多次怀疑本文是对官方文档的直接翻译和简单罗列；同时官方文档很全面，全范围的介绍无疑加深了写作的心智负担。但在最终的梳理中，发现走出了一条与众不同的路，于是坚持分享出来。 希望本文除了能带领我们再次了解 Create React App(后文简…"}, {"id": "6844904114242093064", "title": "如何快速的成为 Ant Design 的 contributor", "desc": "大家好，我是 Rustin。今天想跟大家介绍下如何快速的成为 antd 的贡献者，希望能够对想要加入 antd 社区贡献的同学有帮助！ 此博客在 GitHub 上公开发布. 如果您有任何问题或疑问，请在此处打开一个 issue。 其实 antd 几乎不需要做任何的介绍，大家都知…"}, {"id": "6844903510765469709", "title": "那些不明觉厉的一行javascript代码", "desc": " "}, {"id": "6844903768182489102", "title": "Redux Hero Part 4：每个英雄都需要一个大反派（一种有趣的方式介绍 redux-saga）", "desc": "当你想到像 《勇者斗恶龙》（Dragon Warrior） 或 《最终幻想》（Final Fantasy） 这样经典的 RPG 游戏时，你就会发现这些类型的游戏内容是在一张大地图上面四处游荡然后与遇到的怪物展开战斗。 但是为了让英雄轻松些，英雄是不会在每一次前进操作的时候都会碰…"}, {"id": "6844903939167649799", "title": "react中Hooks浅析", "desc": "我们知道，functional component在使用的时候有一些限制，比如需要生命周期、state的时候就不能用functional component。而有了Hooks，你就可以在funtional component里，使用class component的功能:prop…"}, {"id": "6844903585952563213", "title": "在React里使用\"Vuex\"", "desc": "一直是Redux的死忠党，但使用过Vuex后，感叹于Vuex上手之快，于是萌生了写一个能在React里使用的类Vuex库，暂时取名Ruex。 与vuex一样，使用单一状态树(一个对象)包含全部的应用层级状态(store)。 actions:Action 提交的是 mutatio…"}, {"id": "6844903715271344136", "title": "[译] 我们是怎样把 Carousell 的移动端 Web 体验搞快了 3 倍的？", "desc": "Carousell 是一个在新加坡开发的移动分类广告市场，并在包括印度尼西亚、马来西亚和菲律宾在内的许多东南亚国家开展业务。我们在今年年初为一批用户推出了我们移动 Web 端的渐进式网页应用（PWA）] 版本。 在本文中，我们将分享 (1) 我们想要建立更快的 Web 端体验的…"}, {"id": "6866334823162576904", "title": "如何创建一个React项目", "desc": "前言：今天来从零开始创建一个react项目，顺便也深入了解一下webpack，package等项目配置方面的知识~1.初始化项目首先我们新建一个文件夹用来存放项目文件，可以在该文件中新建src文件用来"}, {"id": "6866623202030944269", "title": "React学习笔记 --- 组件化开发(上）", "desc": "​ 如果我们将一个页面中所有的处理逻辑全 部放在一起，处理起来就会变得非常复杂， 而且不利于后续的管理以及扩展。 ​ 但如果，我们讲一个页面拆分成一个个小 的功能块，每个功能块完成属于自己这部 分独立的功能，那么之后整个页面的管理 和维护就变得非常容易了。 有了组件化的思想，我…"}, {"id": "6844903702164144141", "title": "【React源码解读】- 组件的实现", "desc": "打开项目并跑起来以后，暂不关心项目结构及语法糖，看到App.js里，这是一个基本的react组件 我们console一下，看看有什么结果。 可以看到，<App/>组件其实是一个JS对象，并不是一个真实的dom。 上面有我们很熟悉的props,ref,key,我们稍微修改一下co…"}, {"id": "6939165883788951560", "title": "又是个class和fn组件心智模型上的区别", "desc": "它渲染了一个利用setTimeout来模拟网络请求,然后显示一个确认警告的按钮。例如,如果props.user 是Qsj ,它会在三秒后显示 look here! Qsj ,非常简单 然而这两个代码片段还是有略微的不同，仔细的看看他们。 在这个例子中，第一个行为是正确的。如果我…"}, {"id": "6844903845491916808", "title": "React Hooks 之 useIntersectionObserver", "desc": "本文使用React Hooks 构建一个监听DOM元素曝光的Custom Hooks，主要功能是监听DOM元素是否在规定内曝光，从而可以完成曝光打点。 过去我们监听DOM元素都是通过监听scroll事件来监听目标元素是否在可视区，这样我们需要获取目标元素的一些数据。这样似乎很麻…"}, {"id": "6844903713765589000", "title": "逐行阅读redux源码（二）combineReducers", "desc": "通过对 action 中的 type 的判断，我们可以用来确定当前 reducer 是对指定 type 的 action 进行响应，从而对初始的 state 进行一些修改，获得修改之后的 state 的。从之前我们在 createStore 中看到的情况： 每次 reducer…"}, {"id": "6844904185280856078", "title": "React 框架基础（setState、合成事件、受控组件）", "desc": "React 是一个用于构建用户界面的 JavaScript 库。数据改变时 React 能有效地更新并正确地渲染组件。 我们写 React 就是创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI 界面。 组件拥有动态渲染 name 的功能，name 字段是使用该组件的地方…"}, {"id": "6918695759936225288", "title": "前端学习笔记（十七）--React学习-3", "desc": "今天（指2天）把 React 文档高级指引部分看完了。感觉 React 文档写的很分散，顺序太乱了，看完感觉没学到什么。 再把 hook 部分看完，就去看慕课网的教程了。 1. 生命周期 2. context context 用于存放大量的组件都需要的数据，如用户信息，语言，等…"}, {"id": "6898937616402481166", "title": " 🌞手写React，我悟了| 掘金年度征文", "desc": "按找上面的渲染方式，当需要渲染的元素多的时候，在一帧（16.6ms）内无法渲染完毕就会造成浏览器的卡顿。 要想个办法优化，在React中，选择的是把一个大的任务才分成很多小的任务，在浏览器空闲的时候执行每个小的任务。这就是React的并发模式。 这个函数会在每次浏览器空闲的时候…"}, {"id": "6844904014627209229", "title": "什么是React Hook？它到底香不香？", "desc": "1. Hook 简介 在官网的描述是这样的：Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 本文将主要针对开发React Hook的动机，即为什么需要它进行讲述，同样这也是React Ho…"}, {"id": "6844903765976285197", "title": "使用react+next实现服务端渲染", "desc": "服务端渲染，是指页面的渲染和生成由服务器来完成，并将渲染好的页面返回客户端。而客户端渲染是页面的生成和数据的渲染过程是在客户端（浏览器或APP）完成。"}, {"id": "6907143661985726478", "title": "Midway Hooks 1.0 - 更快的全栈开发方案", "desc": "Midway Hooks 是一个更快的全栈开发方案。通过 Serverless + Hooks For Node.js + 一体化 Api 调用的特性，开发者在研发流程中仅需关注业务逻辑，即可高效完成应用的交付。 📦 跨前端框架. 支持 React / Vue3 / ICE.…"}, {"id": "6844903670010609678", "title": "WEB实战：使用MERN技术栈开发项目", "desc": "本文介绍如何使用 MERN 技术栈开发一个前后端分离的电商项目，水平有限，不足之处，请指出，Github。 这里的逻辑跟管理后台主要的区别在于请求的数据接口不同，以及页面的UI不同，具体实现，UI交互等按个人而定。 功能开发完毕后，使用 yanr build 将前端以及管理后台…"}, {"id": "6938779990578167816", "title": "基于Antd 3/4的B端配置化表单解决方案", "desc": "B端中台项目开发中，表单的开发，是家常便饭的事儿。一般会涉及到大量的重复性工作： 前端编写表单同时，复杂场景下还需要配置一些结构下发前端来解析、服务端也需要编写字段校验规则。 伴随业务变更、复杂化、场景动态化视图（现在负责的项目中，工单系统，常规下几百个表单项，复杂场景下100…"}, {"id": "6844904005307465735", "title": "聊一聊 React Hook", "desc": "Hook 中文的意思是钩子。其实，在计算机编辑领域有专业解释。看看来自维基百科的解释： React Hook 咱是不是就可以这样理解： react 组件加载、渲染、卸载过程中的拦截处理程序。 只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。 只能在 Rea…"}, {"id": "6844903894389096455", "title": "【小入门】react极简入门", "desc": "本文为react入门介绍，一些基本的概念和知识点，仅供未使用过react童鞋了解参考，若已使用过react，则此文对你可能毫无价值。 定渲染对应的 UI 界面。React 能充分利用很多函数式方法去减少冗余代码。此外，由于它本身就 是简单函数，所以易于测试。可以说，函数式编程才…"}, {"id": "6844903557125111816", "title": "前端每周清单第 49 期：Webpack 4 Beta 尝鲜，React Windowing 与 setState 分析，Web Worker 实战", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 iOS 11.3 与 macOS 10.…"}, {"id": "6844904118272655374", "title": "摹写react-router-dom库，简单实现！", "desc": "这一辑我决定摹写一个基于Hash实现的react路由库，但是鉴于browserRouter很简单也就顺便一起摹写了。 1、我先将要实现的文件归类导出一下，原谅我默默地装一下大（年龄大）佬（不用装就是老）。 接下来我来实现一下Link，其实细细分析一下来看，其实这个东西只不过是个…"}, {"id": "6844903590205587470", "title": "react-router知多少(一)", "desc": "我们只让入口文件干一件事，即渲染真实DOM到挂载元素上。 需要注意的是Router依然遵循JSX tag嵌套时的单一入口规则，So如果有多个平级的子元素需要用一层div或则其它什么的给包起来。 这样就完成了/的自动补全功能。 Router最重要的功能之一就是监听hash值，一旦…"}, {"id": "6844904111683420173", "title": "React框架必须掌握的核心基础知识(一) —— JSX语法与组件属性", "desc": "React起源于Facebook的内部项目，因为该公司对市场上所有JavaScript MVC框架都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，于是就在2013年5月开源了。 React 使用 JSX 来替代常规的JavaSc…"}, {"id": "6941683774153293837", "title": "React 中后台系统多页签实现 ｜ 项目复盘", "desc": "本项目是我现在所在部门的项目，是一个企业级中后台管理系统，包括系统管理、角色权限体系、基于 Activiti 的工作流引擎等很多开箱即用的功能。项目包括前后端，后端是我们部门自研的基于 Spring 的企业级 Java 框架，前端是 React 技术栈，当时还是 v15 版本。…"}, {"id": "6844903815762673671", "title": "【React深入】从Mixin到HOC再到Hook", "desc": "前端发展速度非常之快，页面和组件变得越来越复杂，如何更好的实现状态逻辑复用一直都是应用程序中重要的一部分，这直接关系着应用程序的质量以及维护的难易程度。 本文介绍了React采用的三种实现状态逻辑复用的技术，并分析了他们的实现原理、使用方法、实际应用以及如何选择使用他们。 Mi…"}, {"id": "7002559715477553165", "title": "React + Antd + Webpack开发配置", "desc": "基于React 17.0.2、Ant Design 4.16.12以及Webpack 5.51.1。"}, {"id": "6844903624162672648", "title": "强大的 VS Code", "desc": "Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义快捷键、括号匹配和颜色区分、代码片段、代码对比 Diff、GIT命令 等特性，支持插件扩展，并针对网页开…"}, {"id": "6996846391108567077", "title": "面试官：“宝子，setState 是同步还是异步的呀？”", "desc": "这一次，我将带你一次性搞懂 React 中常见的 setState 原理。 setState 本身的默认行为 在进入主题之前，你肯定需要先学会 React 的基本使用。"}, {"id": "7005846199479566344", "title": " 深入理解React虚拟DOM", "desc": "一、什么是虚拟DOM 虚拟DOM可以看做一棵模拟了DOM树的JavaScript对象树。比如： 二、为什么使用虚拟DOM 在传统的 Web 应用中，我们往往会把数据的变化实时地更新到用户界面中，于是每"}, {"id": "6890738145671938062", "title": "玩转react-hooks,自定义hooks设计模式及其实战", "desc": "自从react16.8，react-hooks诞生以来，在工作中一直使用hooks，一年多的时间里，接触的react项目，渐渐使用function无状态组件代替了classs声明的有状态组件，期间也总结了一些心得。尤其对于近期三个月的项目里，一点点用自定义hooks来处理公司项…"}, {"id": "7002925871308750861", "title": "快速使用 Docker 上手 Sentry-CLI - 玩转 Source Maps 使用 (create-react-app)", "desc": "使用 sentry-cli 上传 source maps 时，您需要设置构建系统以创建版本(release)并上传与该版本对应的各种源文件。要让 Sentry 对您的堆栈跟踪进行解码，请同时提供：要部"}, {"id": "6999964997048598542", "title": "如何实现git-diff效果", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 需求背景 DMS DaemonSet（bigo k8s系统）发布，会在每个节点部署一个pod"}, {"id": "6923792712197996557", "title": "React中的高优先级任务插队机制", "desc": "点击进入React源码调试仓库。 在React的concurrent模式下，低优先级任务执行过程中，一旦有更高优先级的任务进来，那么这个低优先级的任务会被取消，优先执行高优先级任务。等高优先级任务做完了，低优先级任务会被重新做一遍。 我们用一个具体的例子来理解一下高优先级任务插…"}, {"id": "7005454297592758280", "title": "React前端加速开发工具的学习笔记", "desc": "最近入坑了React，并且学习了一些前端工程化的设置。在这里记录一下， 从头开始。 npm install --save-dev --save-exact prettier 装好之后 echo {}>"}, {"id": "6966242922278682632", "title": "React Router 5 完整指南", "desc": "React Router 是 React 社区最受欢迎的路由库，当你需要在一个有多个页面的 React 应用程序中根据 URL 来导航到对应的页面时，就可以使用 React Router 来处理这个问"}, {"id": "7004015951800713253", "title": "React源码流程", "desc": "流程 入口 ReactDOM.render(<App />, rootNode) 同步 ReactDOM.createRoot(rootNode).render(<App />) 异步 ensureR"}, {"id": "7005764152413126687", "title": "react-redux", "desc": "react-redux 了解 1、什么是redux 官方解释：redux 是 js 应用的可预测状态的容器。 可以理解为全局数据状态管理工具（状态管理机），用来做组件通信等。 2、为什么使用redux"}, {"id": "6939698161116479496", "title": "仿 Mac 个人网站开发 ｜项目复盘", "desc": "一、前言1.1灵感来源早年有幸看到国外大佬做的一个基于Web的WindowsXP桌面娱乐系统,那时刚好有搭建一个个人博客的想法,所以就想是否可以基于WEB实现一个仿MacUI的个人博客,以应用的形式来"}, {"id": "6881493149261250568", "title": "Facebook 新一代 React 状态管理库 Recoil", "desc": "在 React Europe 2020 Conference 上， Facebook 软件工程师 Dave McCabe 介绍了一个新的状态管理库 Recoil。 Recoil 现在还处于实验阶段，现在已经在 Facebook 一些内部产品中用于生产环境。毕竟是官方推出的状态管…"}, {"id": "6935584878071119885", "title": "React 性能优化 | 包括原理、技巧、Demo、工具使用", "desc": "⁣React 的工作流程是什么？我们可以在哪些阶段进行性能优化呢？ 如果 React 项目中出现了卡顿，我们可以采用哪些性能优化技巧？ 如何通过 React Profiler 定位性能问题？"}, {"id": "6922444987091124232", "title": "深入React合成事件机制原理", "desc": "点击进入React源码调试仓库。 由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。 为此，React提供了一种“顶层注册，事件收集，统一触…"}, {"id": "6953804914715803678", "title": "React Scheduler 为什么使用 MessageChannel 实现", "desc": "React Scheduler 为什么使用 MessageChannel 呢？为什么不使用 setTimeout 或 requestAnimationFrame 实现呢？"}, {"id": "7002115913688285191", "title": "深入Fiber，概述react新的协调算法（reconciliation）", "desc": "深入Fiber，概述react新的协调算法（reconciliation） 虚拟DOM react文档对机制提供了一个全面的概述：react元素，生命周期，render方法"}, {"id": "6906532032826834958", "title": "React组件生命周期", "desc": "组件生命周期1.1生命周期创建时效果1.2生命周期更新时1.2.1setState()效果1.2.2forceUpdate()1.2.3props()效果1.3生命周期卸载时作用：做一些清理工作比如："}, {"id": "6844903942648758285", "title": "超强实战模板Rva-react-template介绍", "desc": "Rva-react-template是在universal-redux-template迭代开发，并在10+线上产品运用过的实战型react模板。使用Redux + React-router + Express构建，支持服务端/客户端同构。不管是入门React，还是进阶，或者构…"}, {"id": "6844903741280223240", "title": "解密 React element 的 ?typeof 属性", "desc": "每个 React element 都有一个 ?typeof 属性，而他们的值都是一个 Symbol 类型，并且还是统一对 React.element 进行查询。那么，这个诡异的属性有着什么样的使命呢？"}, {"id": "6844903506378227720", "title": "从Preact了解一个类React的框架是怎么实现的(三): 组件", "desc": "首先欢迎大家关注我的掘金账号和Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 其实我在阅读React源码的时候，真的非常痛苦。React的代码及其复杂、庞大，阅读起来挑战非常大，但是这却又挡不住我们的React的原理…"}, {"id": "6844903506009128974", "title": "create-react-app不用eject的定制方案", "desc": "Tweak the create-react-app webpack config(s) without using 'eject' and without creating a fork of the react-scripts. All the benefits of cr…"}, {"id": "6844903776113917965", "title": "setState是如何知道该怎么做的？", "desc": "很明显，React会随着新的{ clicked: true} 状态重渲染组件(component)，更新DOM，匹配返回 <h1>Thanks</h1> 元素(element)。 似乎很简单。不过问题来了，是 React 干的还是 React DOM 干的？ 更新DOM听起来像…"}, {"id": "6844903764072087566", "title": "React 小案例 用户评论", "desc": "功能展示：1.用户可输入用户名2.输入评论内容3.点击发布4.用户名和用户评论会被显示在列表里，第一个评论在最上面5.且显示本条评论离现在过去了多长时间6.鼠标放在事件上方可显示删除键，点击删除，删除"}, {"id": "6844903551336972301", "title": "【译】如何构建React组件？", "desc": "编程是一项非常复杂的工程，尤其要编写干净整洁的代码更为困难。我们需要考虑很多问题—变量命名、函数作用域、异常处理、安全保障、性能监控等等。在编程中，变量命名唯一还是一件比较困难的事情，我倾向于编写松散耦合且高度聚合的组件。如果从面向对象或者函数式编程的角度来说，也会遇到同样的问…"}, {"id": "6844903613777575944", "title": "Redux解读", "desc": "reducer是一个纯函数。给定当前state树和要处理的action的函数，返回新的state树。 initialState 初始化状态。 获取store中当前的状态。 分发一个action，并返回这个action。这是唯一能改变store中数据的方式，且触发listener…"}, {"id": "6844903846729220103", "title": "一个播放器引发的思考——谈谈React跨组件通信", "desc": "为了更好的理解此问题，接下来我们通过一个简单的栗子说明。 我们通过在祖先组件的state定义相应的状态，并把修改state的方法传递给了子组件，那么当一个子组件通过调用updatePlayState后，它所设置的新状态亦可通过react本身的state更新机制传递给其他的子组件…"}, {"id": "6844903894078717959", "title": "React 源码Scheduler（三）React的调度算法实现", "desc": "本文源码基于 React 16.8.6 (March 27, 2019)，仅记录一些个人阅读源码的分享与体会。 在上两节中，笔者介绍了在浏览器中存在的 requestAnimationFrame 和 requestIdleCallback 两种调度方法及在 React 中一个任…"}, {"id": "6844903681708523534", "title": "React 官方发布性能分析插件Profiler", "desc": "写在最前：欢迎你来到“UC国际技术”公众号，我们将为大家提供与客户端、服务端、算法、测试、数据、前端等相关的高质量技术文章，不限于原创与翻译。 React 16.5 新增了对开发工具（DevTools）性能分析插件（profiler plugin）的支持。该插件通过 React…"}, {"id": "6844903512627740680", "title": "前端每周清单第 40 期: JS 的 Core 与 Cost，Node 内存溢出调试，Software 2.0", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Atom 发布代码协同工具 Teletyp…"}, {"id": "6844903617728610312", "title": "Redux应用多人协作的思路和实现", "desc": "由于redux更改数据是dispatch(action)，所以很自然而然想到以action作为基本单位在服务端和客户端进行传送，在客户端和服务端用数组来存放action，那么只要当客户端和服务端的action队列的顺序保持一样，reducer是纯函数的特性可以知道计算得到的st…"}, {"id": "6844903853947617288", "title": "[React Hooks 翻译] 5-8 Hook规则", "desc": "钩子是JavaScript函数，但在使用它们时需要遵循两个规则。我们提供了一个 linter 插件来自动执行这些规则 不要在循环、条件和嵌套的函数中调用Hook。 遵循此规则可以确保每次组件render时都以相同的顺序调用Hook。这是React能在多个useState和use…"}, {"id": "6844903504197206024", "title": "React Native三端融合在沪江的应用实践", "desc": "内容来源：2017年3月11日，沪江web前端开发工程师陈达孚在“中生代技术&iTechPlus年度大会（上海）”进行《基于react native三端融合的应用和实践》演讲分享。IT大咖说作为独家视频合作方，经主办方和讲者审阅授权发布。 ReactNative给前端提供了一套…"}, {"id": "6844903615518212109", "title": "React 16.4新特性发布", "desc": "2. getDerivedStateFromProps 修复bug 这种方式在之前同步渲染的时候是没有问题的， 但是为了支持新的还未启用的fiber异步渲染机制， 现在， getDerivedStateFromProps在组件每一次render的时候都会触发，也就是说无论是来自…"}, {"id": "6844903640432377869", "title": "vue、react隐式实例化", "desc": "这是一篇几个月前写的文章，那时候理解也不是特别透彻，但还是搬运到掘金发一遍。 可以看的出来，我们的需求是想有一个组件能像html原生的alert一样，在需要的地方能够直接去调用，而不是需要把message组件写进节点中。 react相当明显地创建了一个class，vue表面上好…"}, {"id": "6844903711488081933", "title": "[译] 如何用函数式 CSS 简化样式工作", "desc": "Do you dread styling your apps? Fear that a change might break the styles you crafted through many hours of labour? I'm here to tell you th…"}, {"id": "6905272731298693127", "title": "Hooks基本使用", "desc": "useState 方法作用和class的 this.state 提供的功能完全相同。 唯一参数就是初始state，返回值是一个数组，数组第一个项目是变量，第二项是的改变改值的方法。 该 Hook 接收一个包含命令式、且可能有副作用代码的函数。 在函数组件主体内（这里指在 Rea…"}, {"id": "6844903538212995086", "title": "【译】针对 Airbnb 清单页的 React 性能优化", "desc": "简要：可能在某些领域存在一些触手可及的性能优化点，虽不常见但依然很重要。 我们一直在努力把 airbnb.com 的核心预订流程迁移到一个使用 React Router 和 Hypernova 技术的服务端渲染的单页应用。年初，我们推出了登陆页面，搜索结果告诉我们很成功。我们的…"}, {"id": "6844903641782960136", "title": "[译] 设计 React 组件 API", "desc": "多年来，我致力于一系列处理组件 API 和构建应用程序、库的模式。以下是一系列如何设计组件 API 的想法、观点和建议，这会让组件更灵活、更具有组合性、更容易理解。这些规则都不是硬性的，但它们帮助我想明白了如何组织和创建组件。 正如 React 库本身的目标是 最少化 API …"}, {"id": "6864127055903227912", "title": "React hooks 简明教程", "desc": "useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 AP…"}, {"id": "6844903854681620493", "title": "重新 Think in Hooks", "desc": "我之前写过 一篇博客，介绍了 Class 组件的各个生命周期钩子函数在 Hooks 中对应的方案。那时 Hooks 刚刚发布，开发者最关心的莫过于代码的迁移问题，也就是怎么把现有的 Class 组件改造成 Hooks 的方式。 尽管这种方式非常的直观有效，但很快我们就发现，事情…"}, {"id": "6844903727309013000", "title": "[译]React高级话题之Render Props", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 如果一个组件有一个render属性，并且这个render属性的值为一个返回React element的函数，并且在组件内部的渲染逻辑是通过调用这个函数来完成的。那么，我们就说这个组件使用了render props…"}, {"id": "6988450132928757768", "title": "React事件绑定", "desc": "React绑定事件有其自身的一套机制： 几乎所有的事件代理到document，达到性能优化的目的 对于每种类型的事件，拥有统一的分发函数dispatchEvent 事件对象(event)是合成对象(S"}, {"id": "6956867425874739237", "title": "Vue 2.0->React 从响应式到更新原理｜小册免费学", "desc": "写在前面 本文是阅读React Hooks 与 Immutable 数据流实战的心得文章，站在一个vue使用者的视角学习解读React项目。本人学习React的项目生猛了点，上来直接看React项目，"}, {"id": "6844904071137067021", "title": "React源码解析之completeWork和HostText的更新", "desc": "前言：在React源码解析之completeUnitOfWork中，提到了completeWork()的作用是更新该节点（commit阶段会将其转成真实的DOM节点）本文来解析下completeWor"}, {"id": "6871468285348151309", "title": "Block Tree in React: 在 React 中实现 Block Tree", "desc": "BlockTreeinVue3Vue3中通过编译找到静态节点实现了BlockTree的优化，想在React中实现当然不能想编译，要想runtime，所以我们来看看runtime-core源码中的是怎样"}, {"id": "6855517432790908936", "title": "带你彻底掌握React Hook的API特性", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 react-hook可以使用函数来声明一个有状态的组件。 函数式编程。使用函数来生命组件，不用再使用class关键字来声明组件。使代码写法简…"}, {"id": "6844903593749774344", "title": "redux中间件", "desc": "提到中间件，你可能会想到Express和Koa等服务端框架，没想到也没关系，这句话是我装逼用的。 有这样一个问题？我们之前用的Redux都是在Action发出之后立即执行Reducer,计算出state,这是同步操作。如果想异步操作呢？即过一段时间再执行Reducer怎么办？这…"}, {"id": "6844903624674377741", "title": "浅谈前端响应式设计（一）", "desc": "现实世界有很多是以响应式的方式运作的，例如我们会在收到他人的提问，然后做出响应，给出相应的回答。在开发过程中笔者也应用了大量的响应式设计，积累了一些经验，希望能抛砖引玉。 响应式编程（Reactive Programming）和普通的编程思路的主要区别在于，响应式以推（push…"}, {"id": "6844903702852009997", "title": "从Mixin到hooks，谈谈对React16.7.0-alpha中即将引入的hooks的理解", "desc": "为了实现分离业务逻辑代码，实现组件内部相关业务逻辑的复用，在React的迭代中针对类组件中的代码复用依次发布了Mixin、HOC、Render props等几个方案。此外，针对函数组件，在React v16.7.0-alpha 中提出了hooks的概念，在本身无状态的函数组件，…"}, {"id": "6844904160412827662", "title": "使用Medux改造单页应用(SPA)为服务器同构渲染(SSR)", "desc": "服务器渲染(Server-Side Rendering)并不是一个复杂的技术，而 服务器渲染 与 服务器同构渲染 则是2个不同的概念，重点在于：同构，要做到一套代码完美的运行在浏览器与服务器之上不是一件简单的事情，目前业界也没有特别满意的方案，都需要或多或少的对不同的环境做差异…"}, {"id": "6844903977541173261", "title": "React 组件之间通信(数据传递)的几种方式", "desc": "在我们使用 React 中，不可避免的要进行组件之间的通信(数据传递)。 事实上，在组件间进行通信时，这些通信方式都可以使用，区别只在于使用相应的通信方式的复杂程度和个人喜好，选择最合适的那一个。 当然，自己实现组件间的通信还是太难以管理了，因此出现了很多状态管理工具，如 re…"}, {"id": "6981273902215331854", "title": "React的事件处理函数", "desc": "在react中实现事件处理，有如下几种方式，每种方式做了比较。例如 constructor 函数中 bind 绑定等..."}, {"id": "6844903759814869000", "title": "React&CSS3: 写一个 spinner 圆形加载动画", "desc": "最近业务和设计稿需要需要写一个加载的动画，然后就决定构建一个 react 的 spinner 圆圈⭕️旋转的加载动画。 需要先构建一个圆，然后做一个循环旋转的动画，然后在动画的过程中切割圆的部分环，达到上图的效果。 这里我们来了解一下 clip-path 的使用方法，最开始这个…"}, {"id": "6981259923388629000", "title": "React: useState是怎么回事？", "desc": "useState实现 最简单的useState 查看连接 首次渲染render 调用App,得到虚拟DIV，根据虚拟div创建真实div 用户点击Button，调用setN(n+1),再次render"}, {"id": "6844903687320502280", "title": "React组件之Clock", "desc": "由于笔者之前是做移动端开发，React的组件的概念跟iOS和Android的View的概念基本一致，甚至一些方法可以对应的上，如componentDidMount和componentWillUnmount可对应Android View中的onAttachedToWindow和o…"}, {"id": "6847902220441255944", "title": "React源码之组件的实现与首次渲染", "desc": "本文讲 组件如何编译 以及 ReactDOM.render 的渲染过程。 babel 将 React JSX 编译成 JavaScript. 每个标签的创建都调用了 React.createElement. 贯穿源码，常见的两种数据结构，有助于快速阅读源码。 是 React.c…"}, {"id": "6844903589861654535", "title": "基于react + redux的Bone框架", "desc": "Bone的使用很简单，上手也很快。如果你想用react搭建一个项目，不妨跟着我试试使用Bone。 bone-cli 是 Bone 提供的本地命令行工具，用来完成项目创建、本地开发和项目打包等功能。执行 OK，这样Bone就安装成功了。 我们可以快速创建一个项目，bone sta…"}, {"id": "6844903983790702606", "title": "[译]React高级指引5：Refs转发", "desc": "但这在绝大部分组件中不是必需的。但是这对某些组件来说会非常有用，尤其是在某些可复用的第三方组件库中。常见的场景我们将在下面的内容描述。 React组件隐藏了它们的实现细节，包括它们的渲染输出。使用FancyButton的其他组件通常不需要获取它内部的button DOM元素的r…"}, {"id": "6844903869441376269", "title": "这一次彻底搞定useReducer-reducer基础篇", "desc": "useReducer是React提供的一个高级Hook，它不像useEffect、useState、useRef等必须hook一样，没有它我们也可以正常完成需求的开发，但useReducer可以使我们的代码具有更好的可读性、可维护性、可预测性。 reducer的概念是伴随着Re…"}, {"id": "6844904019152863240", "title": "React Hook 01 - 官网简翻", "desc": "此文仅为官网部分材料整理供个人使用，大家直接看 React Hook 官网 介绍，不要看这里。 只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用 只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以…"}, {"id": "6970191426214690823", "title": "React的 setState (类异步)批量更新的原理及迷你版实现", "desc": "前言 setState 有一个“怪异”的现象，就是调用该方法修改state时，有时候看起来同步执行，有时候看起来是异步执行，这也是面试常问的一个点。为什么会出现这种情况呢？今天我就来为大家讲解一下"}, {"id": "6847902215383089166", "title": "react hook尝鲜", "desc": "react因其难理解、组件结构冗余一直被定义为大型应用框架，对此也一直react官方一直在改进，推出了无状态组件也称 函数式组件 ，让我们抛弃不用在写麻烦的class、render。但是我们日常开发中大部分组件都跟业务关联，拥有自己的状态，函数式组件因其无状态一直没有进到我们视…"}, {"id": "6844904015759671309", "title": "React源码解析之FunctionComponent（下）", "desc": "前言：在React源码解析之FunctionComponent（中）中，讲到了reconcileSingleElement()和reconcileSingleTextNode()：接下来，我们讲rec"}, {"id": "6844903797676834823", "title": "React Ways1——函数即组件", "desc": "函数即组件，顾名思义，就是一个函数就可以是一个组件。 这就像偶像剧的剧情一样毫无惊喜——并非如此。 其次，在实际的开发场景下，囿于当前的浏览器形势，我们产出的代码更多时候需要兼容到 es5 这个没有 class 概念的标准。 好的，现在我们无须担心函数即组件这个概念的准确性了。…"}, {"id": "6844903901188063239", "title": "【译】了解 useReducer", "desc": "useReducer 是 React 16.8.0 中为数不多由官方提供的 React Hook 之一。它接受一个 reducer 函数 ，以及一个初始的应用程序状态，然后返回当前应用程序的状态，和一个调度函数（dispatch）。 这样有什么好处？一个好主意是让我们试着想象一…"}, {"id": "6980119649304182814", "title": "006.函数式组件", "desc": "举个🌰 执行react渲染之后发生了啥 React解析组件标签，找到component组件。 发现组件式使用函数定义的，随后调用该函数，将返回的虚拟DOM转成真实DOM呈现在页面上"}, {"id": "6844903713740423176", "title": "ReactNative三端同构实战", "desc": "本文讲解了React Native三端同构的应用场景、实现原理，并对比了目前成熟的实现方案react-native-web和reactxp，以及接入它们的实践经验。"}, {"id": "6844903556231725063", "title": "高品质 React UI 组件", "desc": "A high quality UI Toolkit, A Component Library for React 16+. 💘 Visit the https://github.com/shawn2016/isui.git website for more informati…"}, {"id": "6844903857235951623", "title": "摩拜前端周刊第10期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜【JS进阶】你真的掌握变量和类型了吗地址:https://juejin.i"}, {"id": "6844903673756123144", "title": "使用装饰者模式做有趣的事情", "desc": "装饰者模式是一种为函数或类增添特性的技术，它可以让我们在不修改原来对象的基础上，为其增添新的能力和行为。它本质上也是一个函数(在javascipt中，类也只是函数的语法糖)。 我们来假设一个场景，一个自行车商店有几种型号的自行车，现在商店允许用户为每一种自行车提供一些额外的配件…"}, {"id": "6844903496408383495", "title": "San - 一个传统的MVVM组件框架", "desc": "前置声明：这个框架是 @董睿 大神开发的，我只是转发一下文章而已。"}, {"id": "6908627112148762632", "title": "(翻译)构建你自己的虚拟DOM", "desc": "构建你自己的虚拟DOM，你需要知道2个事情。你不需要理解 React，或者深入其他虚拟DOM的实现源码。他们太过庞大和复杂，事实上，虚拟DOM的核心代码的实现甚至可以少于50行代码。 虚拟DOM是任意一种真实DOM的表现。 当你修改了虚拟DOM树，我们会得到一棵新的树。算法会比…"}, {"id": "6844903505338040328", "title": "normalizr API", "desc": "Normalizes input data per the schema definition provided. 根据提供的schema定义规范化输入数据。 data: required Input JSON (or plain JS object) data that ne…"}, {"id": "6844903712192725006", "title": "【译】你可能不需要派生状态", "desc": "翻译这篇文章的起因是因为在一次需求迭代中错误的使用了getDerivedStateFromProps这个生命周期导致子组件的state被循环重置，于是翻到了这篇文章，然后就开启的翻译之旅。 在很长一段时间，生命周期componentWillReceiveProps是用来响应pr…"}, {"id": "6844903775409274888", "title": "React-setState杂记", "desc": "从结论和图都可以得出， setState是一个batching的过程， React官方认为， setState会导致re-rederning， 而re-rederning的代价是昂贵的， 所以他们会尽可能的把多次操作合并成一次提交。以下这段话是Dan在Issue中的回答： 同步…"}, {"id": "6926872845133971469", "title": "《深入浅出React和Redux》(2) - Redux", "desc": "Redux是Flux理念的一种实现。 关于Flux理念可以通过类比MVC模式来做简单理解。 MVC模式中，用户请求先到达Controller，由Controller调用Model获得数据，然后把数据交给View，按照这种模式，MVC应该也是一个controller->model…"}, {"id": "6844903986240159757", "title": "[译]如何实现一个实时预览的React编辑器", "desc": "你是否好奇过那些像 codesandbox 和 codepen 的 在线 react 编辑器是如何实现的？你是否用过 semantic react 或 react styleguidist，直接在浏览器中修改上面的例子，就能实时预览。 这周末我终于将零碎的概念汇总到了一起并实现…"}, {"id": "6844903598745190413", "title": "深入React v16新特性（二）", "desc": "之前写了深入React v16 新特性（一），如果之前没看过的可以先阅读，里面先介绍的 v16 比较简单基础的 API，代码仓库在这篇文章里有。本篇内容有： ，Facebook 花了近一年的时间，几乎重写了整个 React 的底层架构就是为了引入 fiber。那 fiber 是…"}, {"id": "6966955869527343135", "title": "代码抽象：抽象成公共组件", "desc": "要实现如下图所示的效果 最开始是这样写的： 但是这样写很容易就发现，代码出现了大量的重复，所以这里可以把代码抽象成一个公共组件。 抽象流程： 提取出重复的代码 将不一样的地方封装成变量 预设参数 抽取"}, {"id": "6977286938927562760", "title": "启动Antd  design  pro + Umi 的项目，访问项目遇到Umi UI 连接失败的问题~", "desc": "前言 启动Antd design pro + Umi 的项目，访问项目遇到 Umi UI 连接失败的问题，经反复研究后，找出问题所在，在这里记录一下，防止以后忘记了。 调试一： 点击 以下按钮 2.U"}, {"id": "6967909036003950629", "title": "React的Hooks学习", "desc": "useState 用法：const [state, setState] = useState(initialState); initialState：state的初始值 setState：用于更新st"}, {"id": "6950547343288582158", "title": "React Hooks概念及使用", "desc": "react-hooks是react16.8以后，react新增的钩子API，目的是增加代码的可复用性，逻辑性，弥补无状态组件没有生命周期，没有数据管理状态state的缺陷。"}, {"id": "6844903892015120398", "title": "如何编写更好的React组件", "desc": "不知道有没有同学跟我一样，学习了很多react源码，却还是写不出更优雅的代码。我们知道了dom-diff原理，了解setState是如何更新状态的，然后呢？还是会写出难以维护的代码甚至bug一堆。 很多时候你写出bug不是因为你不懂dom-diff,而是因为你的属性和状态胡乱命…"}, {"id": "6903323814306775054", "title": "react|next.js全局自定义弹窗组件RLayer", "desc": "介绍灵感：rlayer.js在开发及设计上参考了之前的vlayer自定义弹框组件。内置30+参数配置、10+弹框类型、7+动画效果，提供极简的调用方式及漂亮的皮肤。快速引入在需要使用弹窗的页面引入rl"}, {"id": "6980132458679238663", "title": "React组件 之 组件库如何支持多国语", "desc": "在工作中，我们组的所有项目都是多国语，当然并没有将其抽离出来，每次都是通过拷贝拷贝的方式实现。鉴于这一次编写React组件库的机会，将该组件纳入到组件库中。 1.效果 2.常规组件 下面实现一个正常的"}, {"id": "6844904063536988174", "title": "手动搭建react webapp脚手架，快速开发武汉疫情h5页面", "desc": "由于此次疫情影响，只能呆在家中，最近在掘金看见好多疫情h5项目，例如山月大佬的《武汉肺炎疫情实时动态省市地图开发》，刚好最近有点时间，就用自己之前搭建好的的react移动端框架，快速搭建开发了一套h5页面，分享给大家。 项目集成了react全家桶，集成移动端开发适配，例如1px…"}, {"id": "6855129007852109837", "title": "React源码系列一：React相关API", "desc": "1. React顶层API 列表 React的源码实际上并没有多少复杂的内容，它将mobile和pc公用的模块提取出来，而核心其实是在React-Dom和React-native中。在React的源码中，下面都是我们熟悉的API,但是我们这里只分析重点API。Hook相关API…"}, {"id": "6844903695344222215", "title": "React Native图片缓存组件", "desc": "今天介绍一个React Native的图片缓存组件 react-native-rn-cacheimage ，纯JS实现，所以兼容性很好。 大家都知道，其实React Native 的 Image 组件在 iOS 端实现了缓存，而android 端仍未实现，而且，就算实现了 iO…"}, {"id": "6927539702434103303", "title": "React:Redux/Redux-thunk/react-redux使用", "desc": "redux的是一个集中式的数仓，适用于多个组件数据源的情况，维护同一个数据样本，保持各个组件的一致性。 使用到这个UI组件时外层会有一个provider提供store，connect的作用就是将store的state和dispath与UI组件的属性做一个一一映射。"}, {"id": "6844903753640853512", "title": "利用React 16.6新特性优化应用性能", "desc": "利用懒加载(Lazy Loading)优化页面性能不是什么新概念，不过React 16.6可以使用React.lazy与Suspense让原生React实现Lazy Loading大大的简化。 动态导入目前只是TC39的一个提案，不是JS（ES）标准的一部分。该功能可以动态化加…"}, {"id": "6947604024434622472", "title": "如何实现一个简单的基于React的在线编辑预览组件", "desc": "随着时间的推移，在线IDE应用越来越多，功能也越来越完善。比如 ... 于是乎，就对这些在线IDE的实现原理产生了好奇，自己也想尝试实现一个类似的功能。这里有一篇文章详细讲述了codesandbox的实现原理：传送门 我们尝试实现一个这样的功能，左边输入代码、右边预览效果。 我…"}, {"id": "6936846407051509774", "title": "docusaurus搭建博客，利用GitHub Actions自动部署GitHub Pages", "desc": "部署之后的项目https://yingwinwin.github.io/可能国外站点不稳定，有时候就会进不去，不知道是自己家网不好还是什么原因。 配置文件是docusaurus.config.js，在里面修改一些主页的展示，这里的部分自己改一改都知道是什么意思了。我在这个文件中…"}, {"id": "6844903505900077063", "title": "React 开发中面临的九个重要抉择", "desc": "在 React 开发的过程中我们常常会遇到一些抉择，下面我将选取其中一些个人认为重要的抉择来一一分析。但请记住以下所说的都只是的建议，可能有一些方面也没有考虑到，大家还是需要依据实际情况自己选择最合适的，切勿随波逐流。 当开始React开发之前，你或你的团队必须先考虑选择什么样…"}, {"id": "6844903678973837319", "title": "react-native 0.57 版本更新日志", "desc": "欢迎来到React Native版本的0.57版!这个版本解决了许多问题，并有一些令人兴奋的改进。我们再次跳过了一个月发布，通过扩展发布候选阶段关注质量，并且兼容之前的版本 这个版本包括599提交由73个不同的贡献者!为了响应反馈，我们准备了一个只包含用户影响的更改的变更日志。…"}, {"id": "6924131512224841736", "title": "React 为循环创建的元素绑定事件处理并传参", "desc": "设想我们现在有一个很长很长的数组，要根据这个数组来循环创建一组元素，每个元素上需要绑定点击事件处理程序；我们需要在事件处理函数中拿到当前被点击元素对应的数组项信息。 在循环中，通常我们会为事件处理函数传递额外的参数。例如，若 id 是你要删除那一行的 ID，以下两种方式都可以向…"}, {"id": "6844903588775329799", "title": "深入浅出Webpack", "desc": "Entry:入口,Webpack执行构建的第一步将从Entry开始，可抽象成输入。 Module:模块,在Webpack里一切皆模块，一个模块对应一个文件。Webpack会从配置的Entry开始递归找出所有依赖的模块。 Chunk:代码块，一个Chunk由多个模块组合而成，用于…"}, {"id": "6861785863698055175", "title": "React冒泡和阻止冒泡的应用", "desc": "最近在写react的项目，需要手写一个自定义的菜单，和antd的menu不同，需要点击一级菜单后弹出类似一个Drawer展示二级和三级菜单，且菜单样式自定义，都在一个Drawer里展示。 其中难点在于点击一级菜单时弹出Drawer，点击除Drawer和一级菜单项之外的dom，D…"}, {"id": "6875521310181556231", "title": "React源码系列四：React Fiber 架构", "desc": "1. 为什么使用Fiber 如果使用过React15的人，可能大致了解，其实15版本是基于Stack Reconcilation。它是递归、同步的方式。栈的优点在于用少量的代码就可以实现diff功能。并且非常容易理解。但是它也带来了严重的性能问题。接下来，我们了解一下原因。 G…"}, {"id": "6883069688541085704", "title": "React编程模型中组合的魅力 · Custom Hooks", "desc": "我们知道React专注于构建UI界面多年，文档上对自己的定位也十分清晰，A JavaScript library for building user interfaces, 所以当你越深入React你可能越会发现，React的编程模型更趋向于组合。举个UI例子，贴图，比如我们要…"}, {"id": "6844903865217728519", "title": "React Hooks + Context打造简易redux", "desc": "为解决多层嵌套不同层级组件之间props数据传递，这种数据传递及其繁杂，而且后期不易进行维护，为避免driling式数据通讯，可以采用redux进行数据通讯。在新版本React 16.8.6中Context为我们带来新的通讯方式。 React.createContext函数：创…"}, {"id": "6990627441769185287", "title": "使用React+redux+Node.js+MongoDB开发后台管理系统【开发】", "desc": "操作数据库 使用mongoose插件操作mongoDB 新建一个mongoose.js文件，用来写 mongoose 代码 运行$ node mongoose.js 后输出： Successful c"}, {"id": "6900533792101662734", "title": "create-react-app 4.0.0的新功能", "desc": "Create React App是创建单页React应用（SPA）的推荐方式。它是React官方支持的，它提供了一个现代化的构建设置，无需配置。 有了它，你可以用一个命令来引导一个现代的React应用。由于Create React App同时支持 npm 和 yarn，因此该命…"}, {"id": "6844904110173454349", "title": "axios在react里面的使用", "desc": "上面这个vue的拦截例子，做了request请求拦截和response响应拦截，其实vue和react里面的拦截代码都是一样的，如果需要使用，可以直接拿过来用即可。"}, {"id": "6982067002194001957", "title": "从0到1搭建React+TypeScript+webpack项目【1】", "desc": "下载脚手架 创建一个项目 该模版包含了全套正常运行 React 所需的包和配置，无需再额外手动安装 typescript 等，其中还包含了自动化测试文件以及PWA所需文件等，可自行根据需求增删。 创建"}, {"id": "6844903615627264007", "title": "[译文] 现代 js 框架存在的根本原因", "desc": "我曾见过很多很多人盲目地使用（前端）框架，如 React，Angular 或 Vue等等。这些框架提供了许多有意思的东西，然而通常人们（自以为）使用框架是因为： 它们适合做单页应用。 但这些都不是使用框架的根本原因。 假设你正在设计这样一个 Web 应用：用户可以通过群发电子邮…"}, {"id": "6844903646535139336", "title": "React服务端渲染+pm2自动化部署", "desc": "本文是直接着手SSR部分的并通过实战讲述自己遇到的一些问题和方案，需要大家有一定的React,node和webpack基础能力。skr，skr。 首先我们需要知道SSR对于SPA的好处，优势是什么。 更好的SEO（Search Engine Optimization），SEO是…"}, {"id": "6844904165630541837", "title": "初探 nextjs 服务端渲染框架", "desc": "getStaticProps （静态生成）：在构建时获取数据 。 getStaticPaths （静态生成）：指定 动态路由 以根据数据进行预渲染。 getServerSideProps （服务器端渲染）：在每个请求上获取数据。 getInitialProps （服务器端渲染）…"}, {"id": "6912324884852916231", "title": "Electron+React 快速搭建一个桌面应用", "desc": "**1、Electron：**electron是一个使用js，html和css等的web技术创建原生桌面应用的框架，他基于chromium和node.js，构建的应用可以在Mac，windows和Linux三个平台上运行。 2、React和react-router在该项目中负责…"}, {"id": "6844903824323248136", "title": " 图像延迟加载  && 列表图顺序加载", "desc": "图片延时加载十分重要，尤其是对于移动端用户。 从理论上来看，图像延迟加载机制十分简单，但实际上却有很多需要注意的细节。 此外，有多个不同的用例均受益于延迟加载。 首先，我们来了解一下在 HTML 中延迟加载内联图像。 延迟加载是一种在加载页面时，延迟加载非关键资源的方法， 而这…"}, {"id": "6844903663576547335", "title": "React专题：生命周期", "desc": "生命周期，顾名思义，就是从生到死的过程。 而生命周期钩子，就是从生到死过程中的关键节点。 每到关键节点，我们总希望有一些沉思时刻，因为这时候做出的决策会改变人生的走向。 React组件也一样，它会给开发者一些沉思时刻，在这里，开发者可以改变组件的走向。 React花了两年时间祭…"}, {"id": "6987561807002992677", "title": "关于React函数组件的一些日常调试与性能优化技巧", "desc": "此文比较适合想要优化React项目，却不知道如何下手的人阅读。介绍了常见的调试工具和优化手段以及整个优化的思考过程。 背景 最近在工作中遇到了一些React的性能问题。 需求点击一个添加商品按钮"}, {"id": "6844903655401848846", "title": "React16源码之React Fiber架构", "desc": "React定位是一个构建用户界面的JavaScript类库，使用JavaScript开发UI组件，支持多种方式渲染组件，输出用户界面。 React基础模块（这个模块定义了React的基础API及组件相关内容。对应我们开发页面时引入的 'react' 模块） 渲染模块（这个模块对…"}, {"id": "6867820839266418702", "title": "React组件通信开发知识点总结", "desc": "这里，React 组件也可以订阅到 context 变更。这能让你在 函数式组件 中完成订阅 context 由于在表单元素上设置了 value 属性，因此显示的值将始终为 this.state.value，这使得 React 的 state 成为唯一数据源。 select标签…"}, {"id": "6844903606043279367", "title": "【翻译】Webpack 4 教程：从0配置到生产模式", "desc": "这个流行的模块打包工具进行了大规模的升级。 webpack4，有什么更新？大幅度的性能优化，零配置和明智的默认配置。 给中大型项目提供一个配置文件不是什么大问题。你甚至无法离开它。然而，对于一些较小型应用来说就有点麻烦了，尤其是你在心血来潮想开始做一些好玩的app的时候。 简要…"}, {"id": "6934472644938956814", "title": "「学习笔记」构建你自己的React", "desc": "重写React, 遵循React代码中的架构, 但是没有进行优化。基于React16.8, 使用hook并删除了所有与类相关的代码。 首先回顾一些React的概念，下面是一个简单的React应用程序。一共三行代码，第一行定义了一个React元素, 第二行获取了DOM节点, 最后…"}, {"id": "6844903778404007943", "title": "React 16.8 版本: 带 Hooks 的版本", "desc": "Hooks 允许你在不编写 class 的情况下使用状态(state)和其他 React 特性。 你还可以构建自己的 Hooks, 跨组件共享可重用的有状态逻辑。 Hooks 介绍 解释了我们给 React 添加 Hooks 的原因。 Hooks 概览 是对内置 Hooks 的…"}, {"id": "6844903669352103944", "title": "React专题：事件", "desc": "用户需要与UI产生交互，所以UI需要一个反应机制，用户执行特定操作，就触发特定的回调函数，开发者再把这个机制挂载到DOM元素上。 DOM事件开发者再熟悉不过了，没了它页面就是死的。 不夸张的说，React是一个UI虚拟机一样的存在，在被挂载到页面上之前，UI在React的全权掌…"}, {"id": "6942763241890119688", "title": "React解密：useReducer()的用法及优势", "desc": "包括但不限于以上三种。 reducer 相对于 useState 可以更好的描述“如何更新状态”。 比如：reducer 能够读取相关的状态、同时更新多个状态。 【组件负责发出 action，reducer 负责更新状态】的解耦模式， 使得代码逻辑更加清晰。代码行为更加可以预测…"}, {"id": "6904284428072124430", "title": "学习react（five day）", "desc": "小结：在JSX中，当你创建一个元素的时候，必须包含一个特殊的key属性， key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。 同vue中v-for中的：key差不多，元素key要放在就近数组的上下文，就是在那里循环…"}, {"id": "6844903808363921416", "title": "React 高阶组件", "desc": "我们对上图进行组件拆分，可以分为外部modal提示框组件和内部信息两个组件。 外部modal组件是不变的，但是内部的内容，我们可能在不同的地方会显示不同的效果。如下图。 所以我们有必要去封装一个外部的modal提示框组件，去包裹不同的内部组件。 我们新建几个文件。 A组件就是我…"}, {"id": "6867710713754812423", "title": "React源码系列三：React.Render流程 二 之更新", "desc": "在上一篇文章中，我们解析了render流程中FiberRoot的生成。而这一篇着重于在render步骤中执行的另一部分内容。会涉及到队列、更新等信息。但是不会着重于这部分，后续会进行学习。 2. unbatchedUpdates 什么是批处理，例如我们常使用的setState,…"}, {"id": "6906393905558880264", "title": "useStores-基于 useContext 对 Mobx 进行封装并全局管理 React 状态", "desc": "在理解状态管理的概念之前，你必须认识到什么是状态。在 React 中，状态就是你的应用程序的数据层。当谈到 React 和帮助它管理状态的库时，你可以说状态是一个包含你的应用程序正在处理的数据的对象。例如，如果你想在你的应用程序上显示一个项目列表，则状态将包含你打算要显示的项目…"}, {"id": "6969711933796810760", "title": "React中css、css模块化、css-loader3版本配置模块化", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战, React中css、css模块化、css-loader3版本配置模块化"}, {"id": "6844903618903015437", "title": "RN自定义组件封装 - 神奇移动", "desc": "1. 前言 最近盯上了app store中的动画效果，感觉挺好玩的，嘿嘿~ 恰逢周末，得空就实现一个试试。不试不知道，做完了才发现其实还挺简单的，所以和大家分享一下封装这个组件的过程和思路。 2. 需求分析 哇，这个动画是不是很有趣，很神奇。为此，可以给它取个洋气的名字：神奇移…"}, {"id": "6844903849900113933", "title": "React 30 秒速学：制作轮播组件", "desc": "使用React.setState() hook 来创建active状态变量，并给它一个值'0'（第一项的索引）。 使用style对象来保存各个组件的样式。 使用React.setEffect() hook 使用setTimeout将active的值更新为下一个项的索引。 构造p…"}, {"id": "6844903810591096840", "title": "你还没有听过React不完全手册？😱😱", "desc": "setState 只在 React 合成事件和钩子函数中是“异步”的，在原生DOM事件和定时器中都是同步的。 问题：如果使用 pureComponent 只能进行浅比较，如果修改了原数据再更新，就会导致地址值一样从而不会更新。但实际需要更新。 总结：使用以上方式，可以减少不必要…"}, {"id": "6844903556772954126", "title": "快速搭建你的 github pages 个人博客 —— 基于 Create-React-App 的单页面应用实践", "desc": "相信各位github资深玩家们都有自己基于 github pages 搭建的个人站点。官方推荐的静态站点生成器是 Jekyll，关于 Jekyll 的使用感兴趣的各位请自行 google，这里就不赘述了。本文主要介绍下基于 Create-React-App 搭建个人博客的相关实…"}, {"id": "6844904012970459143", "title": "React 组件复用进化史", "desc": "你可能会写一个有状态的组件，然后你的同事可能添加一个读取这个组件state的mixin。几个月之后，你可能希望将该state移动到父组件，以便与其兄弟组件共享。你会记得更新这个mixin来读取props而不是state吗？如果此时，其它组件也在使用这个mixin呢？ 无法保证两…"}, {"id": "6844903989314584590", "title": "关于react 中间件 react-sage 和 react-thunk的使用", "desc": "我们在使用react 的状态管理 redux的时候，必不可少的需要使用到中间件，做个笔记总结一下关于个人使用这两个中间件的心得。 上面代码中，对store.dispatch进行了重定义，在发送 Action 前后添加了打印功能。这就是中间件的雏形。 中间件就是一个函数，对sto…"}, {"id": "6844903514011861006", "title": "用 Jest 测试 JavaScript 应用", "desc": "Jest 是 FaceBook 用来测试 JavaScript 应用的一套测试框架，这些应用当然也包括了 React 应用。它的优点之一是自带了对 React 的支持，同时也很容易支持其它框架。 从最简单的开始，我们可以看看如何用 Jest 测试纯 JS 项目。"}, {"id": "6896836985592381448", "title": "React读取Excel——js-xlsx 插件的使用", "desc": "刚好项目中遇到了前端解析 excel 的需求，所以就尝试使用了一下，这里将使用方法和遇到的问题简单记录一下。 1. 安装依赖 2. 在项目中引入 3. 定义上传 input accept 属性定义了上传文件支持的类型，onChange 操作中的 importExcel 方法定义…"}, {"id": "6844904063545376776", "title": "React基础篇（五）css样式的使用", "desc": "1前言在JSX中，如果需要写行内样式，不能为style设置字符串的值，而是应该写成在一个使用案例中上一篇中有写到，未设置样式前设置style样式后列表中条目的组件ReactDOM.render渲染使用"}, {"id": "6844903620979195917", "title": "[译] 更可靠的 React 组件：单一职责原则", "desc": "单一职责原则（SRP - single responsibility principle）是编写 React 组件时的基础原则。 所谓职责可能指的是渲染一个列表、显示一个时间选择器、发起一次 HTTP 请求、描绘一幅图表，或是懒加载一个图片等等。组件应该只选择一个职责去实现。当…"}, {"id": "6844903702180921357", "title": "微内核架构在大型前端系统中的应用（微前端）", "desc": "由一群尽可能将数量最小化的软件程序组成，他们负责提供、实现一个操作系统所需要的各种机制和功能。这些最基础的机制，包括了底层地址空间管理，线程管理，与进程间通讯。 将系统的实现，与系统的基本操作规则区分开来。它实现的方式是将核心功能模块化，划分成几个独立的进程，各自运行，这些进程…"}, {"id": "6844903752973942792", "title": "从代码实践潜入React内部，深入diff", "desc": "本文有一定的技术含量，要对React公共API以及它如何分为核心，渲染器和协调(和解，reconciler)程序有很深的理解。如果你对React代码库不是很熟悉，请首先阅读代码库概述。 它还假设你了解React组件的实例和元素之间的差异。 stack reconciler用于1…"}, {"id": "6844904157837524999", "title": "Redux + React-Redux + Redux-Thunk 在 React 实际项目开发中使用详解", "desc": "Redux 是搭配 React 项目开发中最常用的状态管理库，大家知道在我们 React项目开发时，组件的公用数据状态(如用户信息等)，可能多组件都会用到，如果组件间的关系比较明确(如父子关系)，传递还比较方便，但如果关系不明确或者毫无关系，这时候就非常麻烦了，但借助我们的Re…"}, {"id": "6986975714822062116", "title": "React源码系列之一：Fiber", "desc": "前言 本次React源码参考版本为17.0.3。 React架构前世今生 查阅文档了解到， React@16.x是个分水岭。 React@15及之前 在16之前，React架构大致可以分为两层： Re"}, {"id": "6994767057774444574", "title": "React源码系列之八：React的diff算法", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第八篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6995306667298521118", "title": "React实战项目--02电商系统底部导航、router", "desc": "一、项目结构 这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战。 底部导航栏的基本样式就好了 二、使用flex布局完成导航栏静态 静态效果已完成 二、配置主页的子路由 第一个子路由配置完成 "}, {"id": "6956471966526079012", "title": "写给vue转react的同志们（1）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "6844904034218803208", "title": "技术胖手摸手作程序员专属博客-44集视频+3万字长文", "desc": "嗨！大家好，我是技术胖。 我的博客就使用的教程中的程序，你可以先进行预览一下，预览页面。 我原来的博客是使用的Vuepress ，纯静态网页，也有很多不方便的地方，所以自己作了这个博客程序。 如果你也想用React相关技术作一个网站，我觉的学习这个教程，一定可以做出来，并且可以…"}, {"id": "6963599049442197540", "title": "react+antd 使用脚手架动态修改主题色", "desc": "最近做了一个需求，后台管理系统添加一个可以动态修改ant-design主题色。查询了大多数的文章，发现基本都是抄来抄去，而且文章记录的也一点也不详细。刚刚把这个功能做完了，顺便记录一下如何去修改主题色"}, {"id": "6990228876081233928", "title": "初探 React - 双缓存 fiber tree", "desc": "虽然知道从 16 版本以后，React 采取了双缓存 fiber tree，但一直对双缓存 fiber tree 存在的意义不是很理解。琢磨了一段时间，感觉也没有必要采用双缓存 fiber tree，"}, {"id": "6869328999659601934", "title": "React 基础教程与实战", "desc": "在React的官方博客中明确阐述了 React 不是一个 MVC 框架，而是一个用于构建组件化 UI 的库，是一个前端界面开发工具。所以顶多算是 MVC 中的 V（view）。React 并没有重复造轮子，而是有很多颠覆性的创新，具体的特性如下： JSX就是 Javascrip…"}, {"id": "6844903580860678158", "title": "面试分享：2018阿里巴巴前端面试总结 | 掘金技术征文", "desc": "脑子混了记得不多了，记得多少就记录多少吧。。。。 最开始的思路是用定时器实现，最后没有想的太完整，面试官给出的答案是用requestAnimationFrame。 由于之前没有用过这个 API 所以是现学的。 注：requestAnimFrame 和 定时器一样也头一个类似的清…"}, {"id": "6998432802450440200", "title": "【知识点】PropTypes提供的验证器", "desc": "通常，我们在项目中使用自定义组件时，需要对组件的props进行类型检测。而React提供了专门的库，可以校验组件的props类型，也可以做一些特定的限制。"}, {"id": "6997569740688326664", "title": "React--10: 组件的三大核心属性3:refs与事件处理", "desc": "这是我参与8月更文挑战的第18天，活动详情查看:8月更文挑战 1. 字符串形式的ref 首先这种形式是不推荐使用的。 过时 API：String 类型的 Refs： 如果你之前使用过 React，你可"}, {"id": "6844903829704540174", "title": "剖析 React 源码：先热个身", "desc": "我 fork 了一份 16.8.6 版本的代码，并且会为读过的代码加上详细的中文注释。等不及我文章的同学可以先行阅读 我的仓库，并且在阅读本系列文章的时候也请跟着阅读我注释的代码。因为版本不同可能会导致代码不同，并且我不会在文章中贴上大段的代码，只会对部分代码做更详细的解释，其…"}, {"id": "6999923012526932004", "title": "React组件测试，尝试一下", "desc": "经过测试的组件是可靠的，可测试的组件架构是合理的，如果一个组件难以编写测试用例，只能证明组件的设计是糟糕的；编写组件用例的同时，可以帮助组件开发者发现问题，调整代码使架构更加合理。"}, {"id": "6872905077493858312", "title": "react基础知识总结（持续更新ing...）", "desc": "jsx 语法是一种 JavaScript 语法扩展，在 React 中可以方便地用来描述 UI。比如下面就是一段 jsx 语法 在jsx语法中，循环渲染是利用数组的遍历 map() 方法返回一个集合。 遍历时必须有唯一索引 key 提高遍历的效率。一个元素的 key 最好是这个…"}, {"id": "6844903924609056776", "title": "技术胖的React Hooks免费视频教程（11集） 2小时轻松搞定新特性", "desc": "2019年React Hooks是React生态圈里边最火的新特性了。它改变了原始的React类的开发方式，改用了函数形式;它改变了复杂的状态操作形式，让程序员用起来更轻松;它改变了一个状态组件的复用性，让组件的复用性大大增加。如果你是React的粉丝者或者正在使用React开…"}, {"id": "6996105825945124878", "title": "react 项目单元测试技术方案", "desc": "Why The more your tests resemble the way your software is used, the more confidence they can give yo"}, {"id": "6997607114893950989", "title": "微前端入门篇 | 详解微前端演变(附源码)", "desc": "什么是微前端 各个开发团队都可以自行选择技术栈不受同一项目中其它团队影响; 各个交付产物都可以被独立使用，避免和其它交付产物耦合; 各个交付产物中的样式不会污染到其它组件; 各个交付产物都可以自由使用"}, {"id": "6992742721291026439", "title": "React入门五：事件处理", "desc": "这是我参与8月更文挑战的第四天 1. 事件绑定 React事件绑定语法与DOM事件语法相似 如法：on+事件名称 = {事件处理程序} 如：onClick={()=>{ }} 注意：事件采用了驼峰命名"}, {"id": "6992013452134842376", "title": "react-diff算法详解 | 8月更文挑战", "desc": "前言 本文是我阅读《深入React技术栈》所写的总结笔记。如果您觉得本站的markdown代码高亮不友好，建议您查看：github原文 reconciliation调和，是react中最为核心的模块，"}, {"id": "6992369894125731854", "title": "react-从零开始搭建项目-配置各种webpack-loader", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 上一篇 react-从零开始搭建项目-webpack-dev-server 前言 上一篇我们通过配置webpack-dev-server完成"}, {"id": "6844903619767042055", "title": "Taro 学习笔记", "desc": "Taro 是凹凸实验室出品的一套 React 语法规范的多段开发解决方案。主旨在于使用一套代码，通过不同的编译类型，编译为成不同平台的应用。（目前支持：小程序、H5） 安装 Taro 提供的 cli 工具。 Taro 本身提供的 API。 Taro 建议使用 px 、 百分比 …"}, {"id": "6844903733566898183", "title": "ES 6 装饰器与 React 高阶组件", "desc": "关于 Decorator 到底是 ES 6 引入的还是 ES 7 引入的我也不是很明白了，两种说法都有，这种问题懒得纠结了……在用的时候发现这个东西很好用，平常用处可能不大，但是结合 React 就很好使了。接下来就讲一讲。 我搭建了一个 React 开发环境，结合 babel…"}, {"id": "6844903887845982221", "title": "React 新特性 Hooks 讲解及实例(四)", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 上述在函数组件中没有办法使用它们，取而代之的是 useRef Hooks。 大家可能会想到 state 也可跨越渲染周期保存，但是 state 的赋值会触发重渲染，但是 ref 不会，从这点看 ref 更像是类…"}, {"id": "6913930906520518664", "title": "react 基于 flv.js 封装简单的播放器（一）", "desc": "这里用到了 svg 图片，我从阿里图标上下载的。 还有很多工作没做，明天继续。"}, {"id": "6844903679179358216", "title": "redux, koa, express 中间件实现对比解析", "desc": "如果你有 express ,koa, redux 的使用经验，就会发现他们都有 中间件（middlewares）的概念，中间件 是一种拦截器的思想，用于在某个特定的输入输出之间添加一些额外处理，同时不影响原有操作。 最开始接触 中间件是在服务端使用 express 和 koa …"}, {"id": "6844903901829971982", "title": "本地离线预览 React/Vue 等开源工具官方文档网站", "desc": "外网访问组件库官方文档网站、React 官方等文档网站太慢，解决办法，是将他们克隆到本地预览，即可离线预览，速度也快。 将文档克隆到本地，通过 sgo 工具预览本地各种文档的。"}, {"id": "6844903919252930573", "title": "剖析 Antd Table 组件的错位和性能问题", "desc": "零. 开门见山的 Bug 解决方案 该写固定的 width，height 就写固定 width，height 。（修复简单，但这样 table 就不灵活，没法针对动态变化高度） 针对简单场景，可以用 setTimeout 在 mounted 之后触发下文的 syncFixedT…"}, {"id": "6895372133837307918", "title": "Rax.js体验记录", "desc": "所以我再提issue 为什么我要说再..."}, {"id": "6954724708029825037", "title": "正式发布一款可cmd命令安装的React.js项目脚手架——FastReactApp", "desc": "前言 今天，篇幅可能比较短，主要介绍最近这段时间开发的一款脚手架——FastReactApp。这是一款基于Parcel2 开发的React.js项目脚手架。虽然比不上正在前端界火爆的Vite以及占据稳"}, {"id": "6908191124104577037", "title": "使用React Hooks代替Redux进行状态管理和进行异步请求, 基于Typescript", "desc": "目前网上有一种观点, 即可以使用 React Hooks 完全取代 Redux 进行状态管理。个人认为对于一些比较大的前端项目, 会有相当一部分状态需要在各个模块中进行数据共享和操作共享。由于 Redux 的 dispatch action 过程是通过匹配 type 字符串的方…"}, {"id": "6926833458929287181", "title": "React不使用滚动插件实现移动端日期选择器", "desc": "需要做一个只包含年月的日期选择器，但目前大多数的日期选择器中，手指滑动使用了better-scroll插件作为移动端滚动插件,需要先安装依赖better-scroll，这无疑会增加项目的体积，所以决定自己实现一个不使用插件的日期选择器。 布局代码如下，css样式代码会在后面完整…"}, {"id": "6927552473657933838", "title": "如何使用react-router自定义confirm", "desc": "理论上基于beforeunload事件，显然是可以自定义的。带着这个问题我们去查看 react-router 的官方文档，我们可以在每个 Router 组件下面找到这样一个属性： A function to use to confirm navigation. Defaults…"}, {"id": "6927530064867229703", "title": "使用 Hook 实现一个 Redux", "desc": "使用 React 的时候，比较常见的状态管理工具就是 Redux，虽然 Redux 写的代码特别多，但是不可否认的是 Redux 的设计原则中的数据不可变这条原则，其实完美的契合了 React。因而在 Redux 中广泛使用，再加上丰富的中间件，比如 redux-thunk，r…"}, {"id": "6984614633172959245", "title": "react ts 创建过程", "desc": "react 搭建过程，结合typescript ，详解目录结构，小白初学，有不足请弥补，谢谢各位大佬"}, {"id": "6844903573470347277", "title": "问了23000名开发者，得出这份Javascript年终盘点", "desc": "导语：2017年全世界范围内，最受开发者欢迎的JS框架是...... 开门见山，我们在全世界范围内，调查了超过 23000 名开发者，得出了这份17 年 JavaScript 调查报告。 这份调查报告揭示了很多值得中国开发者（没错，说的就是你）参考的信息，从 2018 年的技术…"}, {"id": "6844903870246699022", "title": "Redux工作流及工程化编码指南", "desc": "首先明确React是什么，根据官方的定义，React仅仅是一个视图层的框架，解决的是数据与模板的渲染问题，但是并没有提供数据的状态管理方案，这在大型项目中是一个非常大的痛点。比如说: 凡是复杂一些的应用都会有这样组件树的结构，那么非父子组件如何传递数据呢？比如标记上蓝色的组件与…"}, {"id": "6844903905449476103", "title": "React Hooks实践--抽离组件中的可复用逻辑", "desc": "系统中的若干个页面需要展示表格数据，其中某些表格数据过多需要分页查询，而某些不用。 为了实现本文第一行中提到的需求，需要将表格数据加载和分页控制分割开来，使得分页这部分功能可插拔。"}, {"id": "6844903752890073095", "title": "构建自己的React UI组件库(三)：文档编写", "desc": "该系列文章将跟随作者的开发进度持续更新。 本系列文章尽可能多的涉及到每个步骤、每个文件和每个更新。 本系列文章中，整个项目的开始基于官方提供的 creat-react-app 进行react构建，所有内容将使用最新的库版本进行开发。 UI组件库必备的内容，就是文档的编写，而这也…"}, {"id": "6984598597786402829", "title": "React之路-组件&Props", "desc": "组件 组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。 函数组件和class组件 函数组件(js函数) ES6"}, {"id": "6991491561733226527", "title": "React 初级三部曲 ｜ 8月更文挑战", "desc": "1， 什么是React React 是一个用于构建用户界面的JavaScript库， 用户界面： HTML页面 React 主要用来写HTML页面，或构建Web应用 如果从MVC的角度来看，React"}, {"id": "6844903990497378318", "title": "React SSR  + express 构建简单服务端渲染Demo", "desc": "服务器端渲染(ssr)：用户请求服务器，服务器上直接生成 HTML 内容并返回给浏览器。 在服务器端，判断是服务器环境，通过操作js对象，把virtual Dom通过renderToString 或 renderToStaticMarkup映射成字符串输出。通过url请求，在真…"}, {"id": "6992415414827843592", "title": "React第一次的笔记整理", "desc": "1.1.2.3.4.5.1.1.1.2.3.1.1.2.1.1.2.3.2.1.全称:JavaScript XML 2.react 定义的一种类似于XML的js扩展语法：js+XML本质是React.createElement(component,props,…children)..."}, {"id": "6863266370411298823", "title": "React源码解析-事件系统", "desc": "前言本文章是基于16.13.1的react版本。故里面有部分代码逻辑和16.8.6以及之前的版本已经发生较大差异，看本文之前，欢迎大家先看下以下链接，了解reactv17.0版本都做了那些升级和变更。"}, {"id": "6927177468063416328", "title": "不定日拱卒-优雅地实现列权限", "desc": "行权限：是否对单条数据有可见权限，例如：一个人只能看到自己创建的数据而看不到其他人的数据。行权限基本上是由服务端控制 列权限：是否对某些特定的字段有可见权限，例如：普通用户看不到「成本价」这个字段，而管理员可以看到，尽管他们都能看到同样的 10 个商品。通常情况下，列权限需要前…"}, {"id": "6844903848390164488", "title": "React 造轮子系列：Icon 组件思路", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 本轮子是通过 React + TypeScript + Webpack 搭建的，至于环境的搭建这边就不在细说了，自己动手谷歌吧。当然可以参考我的源码。 这里我也是通过别人学的，主要做些总结及说明造各个轮子的一种…"}, {"id": "6844904206042660877", "title": "react: setState的工作原理", "desc": "1. 实现DOM元素的挂载 2. 实现状态的更新 3. 实现setState更新队列"}, {"id": "6953889685076705311", "title": "NextJS - React 服务器端渲染框架", "desc": "介绍 Next.js 是 React 服务端渲染框架，用于构建 SEO 优化的 SPA 应用程序，具有以下特点： 基于页面的路由系统，无需配置，并支持动态路由 支持两种渲染方式，静态生成（SSG）和服"}, {"id": "6844903586191638541", "title": "[译] 写给前端开发者的 GraphQL 指南", "desc": "不管你的应用是复杂还是简单，你总是要从远程服务器获取数据。在前端，这意味着和某个端点进行 REST 连接、转化并缓存服务器应答以及重新渲染 UI。多年以来，REST 是 API 的标配，但是在过去的一年内，一种名为 GraphQL 的新 API 技术凭借它优秀的开发体验和叙述性…"}, {"id": "6878302498205990919", "title": "初学React，需要了解哪些知识点？", "desc": "1. 声明式编程 2. React 元素 3. 逻辑与模板结合 4. CSS in JavaScript"}, {"id": "6969142744665030663", "title": "「✍ useCallback和usePersistFn」", "desc": "前言 编写自定义hook的时候，开发者往往需要考虑很多东西来保证易用性和健壮性，下面我将列举一些编写时常见的问题和我的解决方案。 Begin 重复的渲染/执行 以一个简单的「整数倒计时」useCoun"}, {"id": "6894180064297451533", "title": "React旧版本与React16中生命周期的区别", "desc": "3.React16并没有删除这三个钩子函数，但是不能和新增的两个钩子函数（getDerivedStateFromProps、getSnapshotBeforeUpdate）混用。 componentDidMount。 componentDidUpdate。 shouldComp…"}, {"id": "6844903910503776269", "title": "react实现antd线上主题动态切换功能", "desc": "由于最近公司有多个主题的共存性，所以需要实现线上主题切换的功能，所以本文主要描述的是基于create-react-app之上的主题切换。 有考虑过根据用户选择的主题在切换的时候选择加载页面css文件的区分方案，但是考虑到这种形式需要在页面切换的时候去reload，因为htmlD…"}, {"id": "6923161480804171790", "title": "写给自己看的React源码解析（五）：前端必学-Redux中间件的实现原理", "desc": "中间件的内容其实不属于React源码相关，属于Redux相关。但是中间件的原理是一个非常重要的知识点，它是我们前端开发解决一些业务问题时的利器。很多前端应用的架构都是使用中间件为基础搭建的。 本文不会介绍Redux相关的内容，只关注于中间件的实现原理。 本文将是我学习react…"}, {"id": "6983867114784292872", "title": "React 「Hooks」总结", "desc": "简介 Hook 是可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。使用 「函数声明组件」时，用的就是Hook 特点： 完全可选的。可以在一些组件中尝试 Hook，"}, {"id": "6844903625739730957", "title": "彻底弄懂 React Native 性能优化的来龙去脉", "desc": "前言最近在进行RN项目重构，通过查阅各种资料，从RN底层出发，思考总结了一些从react到react-native的性能优化相关问题Performance·ReactNative请先认真查看官方文档（"}, {"id": "6844904081673175053", "title": "React 实现列表拖动效果", "desc": "当我们想在 React 中实现一个列表拖动的效果的时候，有很多的第三方库（React dnd）可以借鉴，但是学习第三方库也是一个成本，或者拖动本身并不复杂，只需要第三方库的某一个 api 。这样情况下，我们可以自己实现一个。 1. 使用 React 的鼠标事件 2. 判断拖放的…"}, {"id": "6844903651333390343", "title": "可视化界面编辑器设计", "desc": "界面是一棵组件树。 界面编辑器就是对这棵组件树进行编辑和持久化的工具。 编辑器维护这颗树的数据，对外开放增删改查，撤销重做等接口。 未来甚至可以做到通过不同的播放器来适配不同的平台。 组件可以通过组件编辑器的接口知晓是否处于编辑状态。 编辑状态下，组件可以提供交互编辑自己的输入…"}, {"id": "6844903566767816711", "title": "使 React Native App 更具原生质感", "desc": "今天向大家推荐我的开源项目，一款为 react-native 打造的原生导航库。由于导航方式是用原生组件实现的，所以体验会比 react-navigation 稍好，此外，同样的原因，使得 react-native 业务模块可以和原生业务模块完美契合。 这款导航库名为 reac…"}, {"id": "6844903577874333704", "title": "从零开始实现React（一）：JSX和虚拟DOM", "desc": "React是前端最受欢迎的框架之一，解读其源码的文章非常多，但是我想从另一个角度去解读React：从零开始实现一个React，从API层面实现React的大部分功能，在这个过程中去探索为什么有虚拟DOM、diff、为什么setState这样设计等问题。 Vue的API设计非常简…"}, {"id": "6991652307536445448", "title": "React学习｜8月更文挑战", "desc": "写在前面 react如何学 对于有Vue开发经验的同学来说，react很多可以类比着Vue中的一些语法来学习，但一定要注意他们之间的区别，比如useState，可以类比着Vue中的ref，reacti"}, {"id": "6994705317665882143", "title": "React：入门", "desc": "如何引入 React 有两种方式 从 CDN 引入 React CND引入（注意顺序） cjs 和 umd 的区别 cjs 全称 CommonJS，是 Node.js 支持的模块规范 umd 是统一模"}, {"id": "6870376090297171975", "title": "【面试官】React router dom 原理你知道吗", "desc": "History 是 HTML5 新出的API，允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录。主要特性是可以在不刷新整个页面的情况下修改站点的URL。像 vue-router 、react-router-dom 都是基于这个特性来实现路由的跳转的。 这里还有个事件可以…"}, {"id": "6974335495484473351", "title": "react -- @redux-requests、axios 对登陆失效的处理", "desc": "@redux-requests、axios 对登陆失效的处理； axios本身并不能处理中止情况，和智能终止，以及节流缓存等功能，我们在使用@redux-requests就可以发挥它的特性，来看下吧。"}, {"id": "6844903861430255630", "title": "构建工具篇 - react 的 yarn eject 构建命令都做了什么", "desc": "前段时间，一直在研究 react 技术栈，对于项目的构建方面，又有一定的特殊需求，通过 npx create-react-app [filename] 安装以后，发现没有 webpack 相关的配置的目录，在读了 react 官方文档后，发现通过 yarn eject 可以弹出…"}, {"id": "6844903909547311118", "title": "Hook引起对函数式组件的思考", "desc": "没有setState异步刷新render，只需要通过解构拿到你的值(get)和响应(set)，一切看起来都是那么的优雅，下面我们来具体看下Hooks的这种思想如何引起我们对函数式组件的思考。 可以发现除了 visible 这个必要的变量外，想要控制modal就必须要有open和…"}, {"id": "6844903927066918920", "title": "关于React-Admin 的一点开发实践总结", "desc": "React-admin是一个基于React，Material UI的后台管理框架。在刚到公司的时候，导师为了让我尽快上手React又不敢分配核心需求给我写，所以就让我先做一个管理平台消息发放的后台管理系统，主要使用的就是React-admin框架。 （如果想详细了解React-…"}, {"id": "6864995163878457357", "title": "React学习笔记 --- React脚手架", "desc": "项目中可能会需要使用如babel、webpack、gulp。配置它们转换规则、打包依赖、热更新等等一些的内容，相对比较复杂"}, {"id": "6994633953512521736", "title": "关于React16 Fiber的 二三事", "desc": "前言：最新在学习React16 内部原理的事项，为了更好的记录学习，梳理学习内容，把内容更新如下啦～ React16 Fiber的前生React15使用的递归有何弊端？ 思路：在React15 的版本"}, {"id": "6844903833420693512", "title": "浅谈react diff实现", "desc": "有很多文章讲过react的diff算法，但要么是晦涩难懂的源码分析，让人很难读进去，要么就是流于表面的简单讲解，实际上大家看完后还是一头雾水，因此我将react-lite（基于react v15）中的diff算法实现稍微整理了一下，希望能够帮助大家解惑。 对于react dif…"}, {"id": "6844903854396407815", "title": "React中使用外部样式的3种方式", "desc": "1、css-in-js是一种使用 js 编写 css 样式的 css 处理方案。它的实现方案有很多，比如styled-components、polished、glamorous(paypal 开源的，不再维护)、radium、emotion等等。 2、其中最成熟的便是style…"}, {"id": "6844903981211189261", "title": "剖析React内部运行机制-「译」React Fiber 架构", "desc": "React Fiber是React核心算法的持续再实现，这是React团队两年多研究的成果。 React Fiber的目标是增强其在动画、布局和手势等领域的适用性。它的主要特性是增量渲染：能够将渲染工作分割成块，并将其分散到多个帧中。 其他关键功能包括暂停、中止或重启更新工作的…"}, {"id": "6874488636776448008", "title": "[译] 构建你自己的React", "desc": "现在，我们将要遵循 React 代码的体系结构，一步步的实现我们自己的 React 版本。但是本次并不会将优化以及非必要的特性加入进来。 如果你有阅读过我以前任何一篇 构建你自己的 React 文章，这次的不同点在于，本次构建是基于 React 的16.8版本，所以这意味着我们…"}, {"id": "6902718306243854350", "title": "React实验室|随意设置key会导致BUG", "desc": "本文初稿写于2020年12月5日react版本为Reactv17.0.1适合读者:使用react151617版本的读者原创声明:本文原创,转载请标注掘金地址即可BUG复现官方文档文档中的demo1使用"}, {"id": "6904527116526223374", "title": "scrollIntoView 失效调研与替换方案", "desc": "今天需要做一个点击icon滑动到文章评论区的功能，采用了scrollIntoView，发现在移动端偶现失效了。 据这篇博文描述是由于滑动过程中进行了原生事件的监听就会阻断事件继续执行。 因此替换成 scollTo，发现滑动有改善，但是还是有定位不准的问题。 上面的方法都试了一遍…"}, {"id": "6937170174944477220", "title": "React 实际开发中常用框架", "desc": "项目根目录创建一个 config-overrides.js 用于修改默认配置。"}, {"id": "6844903684833280014", "title": "搭建Typescript+React项目模板(2) --- 提升开发体验", "desc": "sass是一款css预处理语言，支持变量，嵌套，mixin和导入等功能，可以极大地方便和简化css写法。 css module是针对css类名作用域做出限定的一种规范，用以解决css类名冲突的问题，此外还能避免一些爬虫进行数据爬取(当然厉害的爬虫除外)，同等的还有BEM规范。 …"}, {"id": "6844903544462524424", "title": "阿里国际UED | 打造高可靠高性能React同构服务端渲染方案", "desc": "随着React的兴起, 结合Node直出的性能优势和React的组件化，React同构已然成为趋势之一。享受技术福利的同时，直面技术挑战，在复杂场景下，挑战10倍以上极致的性能优化。"}, {"id": "6931557834316316686", "title": "React + Typescrpit + Webpack搭建项目", "desc": "很早就想从npm init开始纯手工搭个React项目（以前常常都是直接脚手架或者ctrl+C ctrl+V前人搭好的改改就继续用了），刚好最近工作上要写个demo，就想着趁机来操作（摸鱼）一手，顺便记录一下。 尽管现在各种脚手架已经很多很方便了，诸如vue-cli、creat…"}, {"id": "6844904143044214791", "title": "让最简单的 React Hooks 状态管理器 → 更简单一点", "desc": "1. flooks 是什么？ 虽然它号称最简单（好吧其实就我号称的），但似乎也没有那么简单，粗一看还是不容易一眼看明白。 2. flooks 1.0 有什么问题 当初为了简化使用，使用了 useModel() 传入字符串的方式，从而无需引入文件获取 model。但重新考虑后，这…"}, {"id": "6869650649621987336", "title": "从源码对react-router v5进行原理分析(一)", "desc": "官方文档中对react-router的介绍是: 组件是React强大的声明式编程模型的核心. React Router是一组以声明方式与你的应用程序组合起来的导航组件集合. 不管你是否想要为你的web应用添加可书签的url, 或是在React Native中添加一个可组合的导航…"}, {"id": "6844903503064743943", "title": "基于 react, redux 最佳实践构建的 2048", "desc": "前段时间 React license 的问题闹的沸沸扬扬，搞得 React 社区人心惶惶，好在最终 React 团队听取了社区意见把 license 换成了 MIT。不管 React license 如何，React 都是一个值得好好学习的优秀视图库。 本项目算不上什么大型项目…"}, {"id": "6844903609868484621", "title": "react 知识梳理（二）：手写一个自己的 redux", "desc": "提起 Redux 我们想到最多的应该就是 React-redux 这个库，可是实际上 Redux 和 React-redux 并不是同一个东西, Redux 是一种架构模式，源于 Flux。具体介绍请看这里，或者这里，或者还有这里。 React-redux 是 Redux 思想…"}, {"id": "6844903822884601864", "title": "React 服务端渲染", "desc": "为了解决这些问题，我们可以采用服务端渲染的方式。使用服务端渲染，我们不能走回老路，所以产生了Vue的next.js和React的next.js等框架。但是，所谓“授人以鱼不如授人以渔”，我们不仅要学会使用第三方框架，还要学习其中的原理！ 服务端渲染，服务端将HTML以字符串的形…"}, {"id": "6850418113595801614", "title": "HOC高阶组件", "desc": "我们在开发的过程中，很多时候会遇到有一部分逻辑的组件我们反复的使用，我们如果在函数中遇到这样的问题，我们的做法是自己封装一个公共方法。在使用的时候调用这个方法，我们只要调用公共方法即可，这样减少很多冗余的代码，在后期维护简单 我们根据上面的思想，对于组件，我们也可以将逻辑相同的…"}, {"id": "6844903846997655560", "title": "React模版打印", "desc": "打印函数封装实现逻辑:获取react元素对应的html,构建一个iframe,把html和css注入进去,调用iframe的printapi实现打印效果printElement.js调用打印函数弹窗打"}, {"id": "6844903873249820685", "title": "React学习(1)-create-react-app", "desc": "尽管三者实现业务最终的目的都能达成一致,但是各有特色,其中任何一框架,个人觉得,都博大精深,可圈可点,要学习的内容有很多,我也仅仅是浅尝辄止而已. 视图层框架(在大型项目中,光用react是不行的,还得配合一些数据层的框架帮助我们解决一些组件之间的父子组件传值的问题,react…"}, {"id": "6844903501189890055", "title": "手把手教你写一个react validator", "desc": "应用场景在日常工作中，做为一个前端码农,经常需要与用户\"交流\"，用到最多的\"通迅工具\"莫过于表单了,说起表单，那么就少不了验证写在前面在做一件事情前，我们要遵循三个原则WHY为什么要做WHO谁来做HO"}, {"id": "6844903893281800206", "title": "从Mixins到HOC再到React Hooks", "desc": "我们都知道在业务开发的过程中，如果完全不同的组件有相似的功能，这就会产生横切关注点（cross-cutting concerns）问题。 在React中，存在一些最佳实践去处理横切关注点的问题，可以帮助我们更好地进行代码的逻辑复用。 针对这个问题，在使用createReactC…"}, {"id": "6847902217010315277", "title": "【万字长文】React Hooks的黑魔法", "desc": "React在18年推出了hooks这一思想，以一种新的思维模式去构建web App。我们都知道，React认为，UI视图是数据的一种视觉映射，即UI = F(data)，F需要负责对输入数据进行加工、并对数据的变更做出响应。 React给UI的复用提供了极大的便利，但是对于逻辑…"}, {"id": "6844903856321626126", "title": "TypeScript 中使用React Hook", "desc": "从 React V 16.8.0 和 React Native 0.59.0 版本开始, 引入了React Hook的概念。React Hook 在开发支持就考虑到了类型，所以很多Hook函数可以直接推断出他们的参数、返回值等类型，但也有一些场景需要我们显示声明类型。阅读本文前…"}, {"id": "6844903730697994247", "title": "2019年如何撸一个Cloud Studio插件？", "desc": "当我问公司前端组的同事玩不玩CS的时候，他一脸懵逼地反问你是说“CF”吗，我忘了这些年轻人可能都没玩过“反恐精英(Counter-Strike)”,随后给他们丢了一个链接--Cloud Studio。Cloud Studio，是2018年4月上线的一款基于浏览器的集成式开发环境…"}, {"id": "6890908687238430728", "title": "Why,Reack Hooks", "desc": "类组件是通过继承而来的，本身就包含很多内置API可以调用，比如state和生命周期。所以对应的，类组件相对而言比较重，学习成本也相对高一些。并不适合所有场景都去使用。 相对于类组件，函数组件更轻巧，灵活，易于维护。React Hooks的出现，让函数组件可以选择性的实现类组件中…"}, {"id": "6844903733306867720", "title": "React-router、antd实现同步浏览器地址高亮对应菜单", "desc": "React 是目前主流的前端开发框架，目前前端流行的框架是 Angular,Vue,React，具体选型看项目需求而定。 antd 是基于 React 开发的组件库，有蚂蚁金服团队退出，目前使用人数较多，组件也比较多，文档也很友好。 本次我做的就是使用 antd 的 Menu …"}, {"id": "6844903826940493831", "title": "create-react-app中配置antd按需加载、less、proxy、路径别名、高阶组件装饰器", "desc": "1. 安装 http-proxy-middleware 2. 在src目录下新建 setupProxy.js并且写入: 3. 重启服务试一试"}, {"id": "6844904078045282312", "title": "react的新特性之react-hooks", "desc": "最近组内大佬给小编安排了一个任务，整理一份关于react-hooks的简单的使用教程。 看到消息的时候有点欣喜，因为小编之前就想整理，奈何抵不过惰性，正好趁着这次机会，把hooks相关的知识点学习并巩固一下（虽然没有用过，但是期待在以后的项目中尝试）。 这篇文章会围绕hook的…"}, {"id": "6844903566205779975", "title": "网易音乐版轮播-react组件版本", "desc": "此版本轮播图为仿照网易云音乐PC播放器上首页的轮播。 网易的轮播特殊的地方就在于，如果你滑动不相邻的两张图片，其过渡效果并不是滑动过渡，而是一个跳出过渡，此方面原理与最开始设计轮播排版时候有极大关联。 此轮播为纯react环境下的es6写法，通过对state中数组的重组排列，配…"}, {"id": "6844903943886094344", "title": "《React最佳实践系列》之css篇", "desc": "首先，facebook提出CSS in js的概念，这很奇怪。 我们多年来所学的知识都在宣扬关注点分离的重要性，不应该将标记和css混在一起。但是React行内样式的提出，试图改变关注点分离这一概念。使其从技术分离向组件分离转变。 React将组件作为应用架构的基础单元，通过组…"}, {"id": "6844903747622027277", "title": "尝鲜用 React Hook + Parcel 构建真心话大冒险简单页面", "desc": "几天前，我女票和我说他们新人培训需要一个《真心话大冒险》的界面，想让我帮她写一个。我说好呀，正好想到最近的 React Hook 还没有玩过，赶紧来试试，于是花了一个晚上的时间，其实是俩小时，一个小时搭建项目，一个小时写。 首先我们创建一个文件夹，做好初始化操作。 安装好依赖，…"}, {"id": "6844904144432529415", "title": "React Context中的性能优化", "desc": "许多人将React Context用作某种内置的redux。 他将所有全局状态合并到一个大的对象中，得到一个'单一数据源'，并把它塞进provider。 然后他找到子组件，调用useContext并挑选需要的属性。 所有事情看起来都很完美，直到有一天，他发现他的应用慢到难以使用…"}, {"id": "6844903894120661005", "title": "浅析 Rematch 源码", "desc": "入职后公司用的技术栈还是 react，但状态管理由我原本熟悉的 redux 进化成了在 redux 基础上封装而成的 rematch。用起来也着实方便不少，减少了很多样板代码的编写，同时也不用引入中间件来管理异步的 action 了，但在用起来的过程中难免就会引起了我对 rem…"}, {"id": "6844903874197880840", "title": "react-redux@7.1.0 useSelector: 别啦 connect", "desc": "React-redux 7.1发版啦。 因为在新的项目中用到了hooks，但是用的时候react-redux还处于alpha.x版本的状态。用不了最新的API，感觉不是很美妙。好在，这两天发布了7.1版本。 现在来看看怎么用这个新的API。 这个是干啥的呢？就是从redux的s…"}, {"id": "6981777277558194183", "title": "React与D3的结合", "desc": "基于React、D3开发类似UML建模工具里面表之间关系的图形界面，图形界面这块定下来采用的是D3的最新版本V7"}, {"id": "6954352486312312845", "title": "【万字长文】React hooks 源码详解", "desc": "前言 其实了解react的源码，并不是一件高成本的事，它的内部架构没有大家想象中的那么难，而阅读源码的收获，却是远远大过了成本，能够学习到其中优秀的设计模式和数据架构，并对业务中的熟练度有非常大的提升"}, {"id": "6979429327217623048", "title": "Fiber 树的构建", "desc": "我们先来看一个简单的 demo： ```javascript import * as React from 'react'; import * as ReactDOM from 'react-dom"}, {"id": "6850418109636050958", "title": "react的setState到底是同步还是异步？", "desc": "看完这个例子，也许很多小伙伴会下意识的以为setState是一个异步方法，但是其实setState并没有异步的说法，之所以会有一种异步方法的表现形式，归根结底还是因为react框架本身的性能机制所导致的。因为每次调用setState都会触发更新，异步操作是为了提高性能，将多个状…"}, {"id": "6844903668660043783", "title": "漂亮的实力派  Ant Design Pro 2.0 正式发布", "desc": "1.0 发布之后，Ant Design Pro 受到了业界广泛关注和使用，GitHub 上 star 数一路增长到 11,686 个，在蚂蚁金服内部也落地数百个中后台应用。 在这 8 个月内，2.0 研发计划也在持续进行中，在给 V2 版本发起过 PR 的 38 位贡献者帮助下…"}, {"id": "6896304919851368461", "title": "更骚的create-react-app开发环境配置craco", "desc": "背景使用CRA脚手架创建的项目，如果想要修改编译配置，通常可能会选择npmruneject弹出配置后魔改。但是，eject是不可逆操作，弹出配置后，你将无法跟随官方的脚步去升级项目的react-scr"}, {"id": "6844903557783633927", "title": "Hello！umi", "desc": "umi（中文名：五米）是我目前的工作重点，正在全力开发中，从写下第一行代码开始算起已有数月。但从闲聊和邮件中发现不少人还不能准备地理解 umi 是啥、能做啥，于是趁着代码写累了，聊聊 umi 的一些情况。 umi 是工具吗？是。但不仅仅是。我给 umi 的定位是开发框架，目前包…"}, {"id": "6976018053599330340", "title": "前端工程化实践 - React项目配置预发环境和生产环境（三）", "desc": "这是我参与更文挑战的第8天，活动详情查看：更文挑战 一、前言 前端工程化实践 - 项目初始化（一） 前端工程化实践 - 多人开发分支管理、git记录提交规范（二） 完成项目初始化后，首先我们配置下项目"}, {"id": "6844904158349246477", "title": "Single-Spa微前端落地（含nginx部署）", "desc": "0. 关于 最近一段时间，由于未来工作中涉及工业应用较多，并且考虑以后需要将工业应用在同一系统进行展示，希望有一个突破口可以解决这个问题，即在一个总项目中展示不同的工业应用，每个工业应用是一个单独的项目，由于工业应用可能由于不同团队进行开发，应用开发技术栈最好没有限制，单一前端…"}, {"id": "6999540250091454495", "title": "基于react和typescript的webpack5 升级参考-2021.8.19", "desc": "前言 webpack5 现在的最新版本已经是5.5了，相对来说比较稳定，但是截止到2021.08.19，React的相关脚手架工具create-react-app最近一次更新仅仅是在14天前，comm"}, {"id": "6983570939342487565", "title": "[深入24] Fiber", "desc": "(一) 前置知识 (1) 一些单词 (2) 进程和线程 进程 正在执行的应用程序 线程 应用程序中的 ( 代码执行器 ) 进程和线程的关系 线程跑在进程中，一个进程可能有多个线程，而一个线程只能属于一"}, {"id": "6844903971857907720", "title": "面试官：你怎么优雅管理 CSS？", "desc": "借由这个面试题目， 我们来了解 css 管理方式一共有几种。 佛性选手, 复制粘贴一把梭. 方案一. 命名空间 + BEM 规范 原理：强行增加一个最外层的命名空间将底部样式包裹起来。 样式名遵循 BEM 规范， 让维护者可以从类名就分辨出 dom 上的嵌套情况。方便维护， 如…"}, {"id": "6844903742211375117", "title": "Taro：将已有微信小程序转换为多端应用", "desc": "在距离 Taro 1.1 发布 之后一个月，经历了 500 多次提交和 17 个预览版本的迭代之后，我们有信心在今天发布 Taro 1.2 正式版。 就像博客大战时代博客服务商提供了「搬家」工具一样，Taro 现在也提供了「搬家」工具让你方便地入驻 Taro 社区。转换原有微信…"}, {"id": "6844903619913842696", "title": "React中型项目的优化实践", "desc": "整个项目大概有60+个页面，用到的组件大概150+，package里面的依赖大概有70+个，应该勉强算得上是一个中型的React的项目了。 打包时间约150s，打包完之后的资源gzip之后约1.2m，尽管之前分离了一些公用依赖，但是index包的体积达到了600+还是令人难以接…"}, {"id": "6844904053953019911", "title": "硬核开源，使用 react-hooks 手写 ant-design-pro，搭配 node 完整api", "desc": "最开始的时候，我需要一个 react 开发的 amdin 模版，在开源社区寻找了一边之后，比较中意 ant design pro 的 UI，当我一堆操作把 ant desgin pro 的代码拉下来研究之后，发现内容是在太多了，除了 react、redux 之外，还包含了 um…"}, {"id": "6844903968456310797", "title": "聊一聊状态管理&Concent设计理念", "desc": "随着应用的规模越来越大，功能越来越复杂，组件的抽象粒度会越来越细，在视图中组合起来后层级也会越来越深，能够方便的跨组件共享状态成为迫切的需求。 状态也需要按模块切分，状态的变更逻辑背后其实就是我们的业务逻辑，将其抽离出来能够彻底解耦ui和业务，有利于逻辑复用，以及持续的维护和迭…"}, {"id": "6999422102508044302", "title": "React学习第七天", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：更文挑战 redux redux严格按照flux思想实现的一套框架，实现了单一数据流向。 组成部分 redux由四部分组成 action 组件发布的消息"}, {"id": "6989182520495439880", "title": "React学习之实现React Router导航守卫", "desc": "我们知道，Vue 给我们提供了几个钩子函数来让我们在路由跳转前或跳转后做一些事，但 React 却并没有给我们提供这些钩子函数，本文就试着来实现一下类似的路由守卫功能"}, {"id": "6916671327415828488", "title": "一起走进React核心团队", "desc": "当我刚来Facebook的React团队工作时，我不确定接下来的工作会怎么样。 表面看，React核心团队似乎很大！但事实证明，像Eli White和Sebastian McKenzie这样的人都在React Native团队。 考虑加上那些维护开源库的维护者，比如Chakra…"}, {"id": "6844903671969349645", "title": "用微前端的方式搭建类单页应用", "desc": "微前端由ThoughtWorks 2016年提出，将后端微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。 美团已经是一家拥有几万人规模的大型互联网公司，提升整体效率至关重要，这需要很多内部和外部的管理系统来支撑。由于这些系统之…"}, {"id": "6992124235485282311", "title": "【小白入门】React实现TodoList简易教程（上） | 8月更文挑战", "desc": "React入门基础，撸一个TodoList熟悉熟悉基本语法。对于新手来说，先从简单开始，从简单的开发去巩固react的基本语法和开发思想。"}, {"id": "6844903616231260174", "title": "ES6 系列之箭头函数", "desc": "我们先来回顾下箭头函数的基本语法。 本篇我们重点比较一下箭头函数与普通函数。 箭头函数没有 this，所以需要通过查找作用域链来确定 this 的值。 这就意味着如果箭头函数被非箭头函数包含，this 绑定的就是最近一层非箭头函数的 this。 我们的需求是点击一个按钮，改变该…"}, {"id": "6983273957734481933", "title": "React的小顶堆排序法", "desc": "前言 想要了解react源码，还是得要了解一丢丢的算法，周末学习一个堆排序里面的小顶堆。 为什么要了解堆排序，因为react17源码里任务优先级调度，采用的就是小顶堆。 基础知识 假如一个数组[1,2"}, {"id": "6998506888304263199", "title": "React 算法之调和算法", "desc": "`reconcilerChildren`函数(函数中的算法被称为调和算法),分别对单节点和数组节点进行对比. 比较对象是`reactElement`对象和`fiber`对象."}, {"id": "6844904131795091464", "title": "React源码揭秘1 架构设计与首屏渲染", "desc": "《xx行代码带你实现迷你React》，《xx行代码实现React hook》这样短小精干的文章。如果你只是想花一点点时间了解下React的工作原理，我向你推荐 这篇文章，非常精彩。 《React Fiber原理》，《React expirationTime原理》这样摘录Reac…"}, {"id": "6844904015390572557", "title": "Ant Design从无到有，带你体悟大厂前端开发范式", "desc": "做前端，不是在折腾就是在折腾的路上。 不同的场景我们有不同的应对方案，业务和通用组件的开发也有所差异，这篇文章借助Ant Design，一起体悟大厂在开发类似通用组件或类库时，如何定义规范，如何实施协同开发方案，怎么把控开发过程等。到正文前，先来看看我们封装这样一个库前需要做那…"}, {"id": "6891577820821061646", "title": "React Hooks原理探究，看完不懂，你打我", "desc": "在类定义中，我们可以使用到许多 React 特性，例如 state、 各种组件生命周期钩子等，但是在函数定义中，我们却无能为力，因此 React 16.8 版本推出了一个新功能 (React Hooks)，通过它，可以更好的在函数定义组件中使用 React 特性。 3、状态与U…"}, {"id": "7000765250551152671", "title": "React生命周期", "desc": "1.引出生命周期 unmountComponentAtNode() 卸载组件 componentDidMount（）组件挂载完毕 componentWillReceiveProps （） 组件将要接受"}, {"id": "6995105000523317278", "title": "【React】useContext与useReducer结合实现状态管理", "desc": "useContext 可以考虑这样一个场景，如组件树的机构如下图所示，在App组件中我们实现了用户登录，而登录状态需要组件都需使用，如A、B、C等组件需要拿到登录态从而响应用户的操作。如果使用prop"}, {"id": "6988814701865992222", "title": "React 路由的基本使用", "desc": "1. 路由的基本使用 明确好界面中的导航区、展示区 导航区的a标签改为Link标签 <Link to=\"/xxxxx\">Demo</Link> 展示区写Route标签进行路径的匹配 <Route pa"}, {"id": "6844903761484185613", "title": "在 Create React App 中启用 Sass 和 Less", "desc": "本文介绍了如何在 Create React App 脚手架中启用 Sass 和 Less。 关于创建 create-react-app 项目请查看： create-react-app 的安装与创建。 关于在 less 和 sass 如何在 create-react-app 启用…"}, {"id": "6993691681367261198", "title": "（一）react+springboot+mongodb win环境建立", "desc": "react+springboot+mongodb环境准备 1.开发环境：后台idea202101，激活，前台vscode 2.安装git，Git-2.32.0.2-64-bit.exe，配置邮箱"}, {"id": "6991784184809259045", "title": "webpack5从0到1搭建一个react项目的实现步骤| 8月更文挑战", "desc": "这篇文章主要介绍了使用webpack5从0到1搭建一个react项目的实现步骤，文中通过示例代码介绍的非常详细，希望通过这篇文章，你也可以从0到1 构建项目"}, {"id": "6926432527980691470", "title": "浅谈对 React Fiber 的理解", "desc": "本文作为自己深入学习 React Fiber (Reactv16.8.6)的理解，本篇仅介绍大致流程，Fiber 详细源码本文不作细节描述。 首先要知道的是，JavaScript 引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待。 在这样的机制下…"}, {"id": "6844904196446093326", "title": "可能是你见过最好的 React Hooks 库", "desc": "ahooks 是由蚂蚁 umi 团队、淘系 ice 团队以及阿里体育团队共同建设的 React Hooks 工具库。ahooks 基于 React Hooks 的逻辑封装能力，提供了大量常见好用的 Hooks，可以极大降低代码复杂度，提升开发效率。 ahooks 致力成为和 a…"}, {"id": "6844904168495251463", "title": "如何干掉知乎的全部DIV", "desc": "如果直接选择所有div再遍历删除的话，div的子孙节点也被删除了。有什么办法能在保留整棵DOM树层级关系的前提下，只删除div节点呢？ 我陷入了沉思。。。。。 知乎是React写的，React用JSX来表示页面层次结构，JSX在编译时会被babel转换为React.create…"}, {"id": "6844904016351232008", "title": "竞态请求的Redux中间件解决方案", "desc": "这个问题来源于一次无意中在项目里发现的bug，场景是组件会在切换项目后重新渲染，每次重渲染后，组件挂载完毕会请求对应的当前项目的数据，存到store中展示到页面上。 切换到B项目，请求发出了但还没回来，这时候再切换到A项目。那么现在同时存在两个请求，先前的请求B和新的请求A。 …"}, {"id": "6844903789959315470", "title": "深度理解 React Suspense", "desc": "本文介绍与 Suspense 在三种情景下使用方法，并结合源码进行相应解析。 在 16.6 版本之前，code-spliting 通常是由第三方库来完成的，比如 react-loadble(核心思路为: 高阶组件 + webpack dynamic import), 在 16.…"}, {"id": "6887935122562613261", "title": "记录：React 项目总结", "desc": "历时三个月，终于和小伙伴们 “肝” 完了一阶段的项目，收获还是挺多的。但是由于这是我们第一次在正式项目中完全使用 React 进行开发，前期项目搭建的时候没有足够的经验，导致我们在进行项目优化的时候遇到了一些局限性，只能选择一些退而求其次的方式。 下面我就根据这次的整个开发过程…"}, {"id": "6844904196425121800", "title": "styled-components 运行原理", "desc": "styled-components 结合 React 框架使用，能让其支持 CSS in JS 的写法。比如： 以上是 SC（styled-components 简称，下同）的一个简单用法，它很方便的创建了一个 Button 组件，然后你就可以在任何地方使用这个组件。 这一切是…"}, {"id": "6989797760169934856", "title": "React入门修行", "desc": "JSX JSX是什么？ 组件中return的内容就是JSX 浏览器天然支持JSX吗？ 为什么使用虚拟DOM？ 什么是虚拟DOM 本质上是JS 和 DOM 之间的一个映射缓存 形态上表现为一个能够描述 "}, {"id": "6978304166154207239", "title": "React 源码解读之 Automatic Batching", "desc": "React 团队给出了 React 18 版本的计划，其中提到了一个优化：Automatic Batching。本文是对该优化的一个讨论。"}, {"id": "6844903608874434574", "title": "React 16 加载性能优化指南", "desc": "关于 React 应用加载的优化，其实网上类似的文章已经有太多太多了，随便一搜就是一堆，已经成为了一个老生常谈的问题。 但随着 React 16 和 Webpack 4.0 的发布，很多过去的优化手段其实都或多或少有些“过时”了，而正好最近一段时间，公司的新项目迁移到了 Rea…"}, {"id": "6987765899298078727", "title": "react原理：类组件的状态更新", "desc": "这篇文章会分别讲解一个类组件是如何创建和更新的，也就是类组件的初次挂载和后续更新的流程。 首先看更新类组件的入口：updateClassComponent 上面的注释已经把各个函数的调用阶段说的比较明"}, {"id": "6917977478371737614", "title": "React props属性【七日打卡】", "desc": "如果需要在组件之间进行传值，那么props属性就起到了这个作用,在React中props和state是两个非常重要的属性。 state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state…"}, {"id": "6925366736053075982", "title": "没有 Redux，让全局数据更简单", "desc": "笔者是一个有5年开发经验的前端工程师。从接触前端就一直使用Redux，对Redux也算有点心得。今天分享个小Tip给大家😌。慢慢臃肿的ReduxStore从欣赏到慢慢嫌弃Redux的存在让前端开发变得"}, {"id": "6844903527840497678", "title": "真的假的？vscode 也能画思维导图？", "desc": "之前开源的思维导图库blink-mind的框架基本上写完了。正所谓轮子搞定了，不造出辆车出来溜溜弯怎么行呢，不然怎么知道这轮子是否好使呢。 于是做了这么个vscode的思维导图扩展，验证下这个库的可用性，另外确实工作中也会用的到这个扩展，后面也会一直投入时间去维护这个插件，让这…"}, {"id": "6970832922181894158", "title": "react源码解析7.Fiber架构", "desc": "react源码解析7.Fiber架构 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心api"}, {"id": "6922730929525882894", "title": "[高级]列表优化之虚拟列表", "desc": "工作中，我们经常会遇到列表项。这次我们就来介绍一种虚拟列表的优化方法来解决数据量大的时候列表的性能问题。"}, {"id": "6844903502720794638", "title": "从React脚手架工具学习React项目的最佳实践（上）：前端基础配置", "desc": "这篇文章不是聊React这门技术本身，而是关于如何维护好一个React项目。 文本可能会涉及一些Webpack的基础知识，如果你还不太了解Webpack的用法的话，可以从我之前的一篇文章《Webpack 速成》入门，深入浅出，童叟无欺。 编程领域中的“脚手架（Scaffoldi…"}, {"id": "6916499657279569928", "title": "React路由介绍【七日打卡】", "desc": "在React SPA项目开发过程中，路由跳转必不可少。本篇博文主要介绍下React中路由相关知识。 在React中，常用的有两个包可以实现这个需求，那就是react-router和react-router-dom。本文主要针对react-router-dom进行说明。 然后我们…"}, {"id": "6844904097179500552", "title": "EventEmitter3 模块的使用经验及骚操作", "desc": "EventEmitter3 模块是一款经过优化的高性能 EventEmitter，而 EventEmitter 是一种发布/订阅模式的实现方式，通过使用 EventEmitter 我们能够在前端代码中创建自定义的事件机制。 在我们编写复杂的逻辑时，可能会受制于框架、上下文、工具…"}, {"id": "6844903581259137031", "title": "手拉手，用Vue开发动态刷新Echarts组件", "desc": "因为生产需要（其实是懒），所以本教程使用了 vue-cli进行了项目的基础结构搭建。 直接使用npm进行安装。 到此，准备工作已经完成了。 因为被《React编程思想》这篇文章毒害太深，所以笔者开发组件也习惯从基础到高级逐步迭代。 静态组件要实现的目的很简单，就是把Echart…"}, {"id": "6968739546997456926", "title": "在React中书写TypeScript必须眼熟的类型定义", "desc": "在 React 中书写 Typescript 相关包 @types/react 和@types/react-dom 前置类型 元素相关 ReactElement ReactChild&ReactTex"}, {"id": "6844903799312613384", "title": "React 怎么实现 Vue 的 <keep-alive> 组件", "desc": "如果你用过 Vue，那肯定知道它有一个非常好用的组件（keep-alive）能够保持组件的状态来避免重复重渲染。 有时，我们希望在列表页面进入详情页面后，缓存列表页面的状态；当从详情页面返回列表页面时，列表页面还是和切换前一样。 这实际上挺难实现的，因为 React 中的组件一…"}, {"id": "6844903861011005448", "title": "React 事件绑定有好几种方式，我快懵了", "desc": "事件处理程序(Event handlers)就是每当有事件被触发时决定要执行的动作或行为。 在 React 应用中，事件名使用小驼峰格式书写，意思就是 onclick 要写成 onClick。 React 实现的合成事件机制给 React 应用和接口带来了一致性，同时具备高性能…"}, {"id": "6844903762193022990", "title": "Taro v1.2.7开发一个微信小程序下来的要点梳理及爬坑姿势", "desc": "在Taro 0.x的时候就写过一个小玩意,虽然没什么人玩. 最近正好看到Taro 1.2.x已经发布了 类React风格的小程序框架,部分地方针对小程序做了妥协.找点东西试试水,看看改进如何了. 就会缺失你自己加进去的特性,导致编辑器会提示有错误信息.. 开发模式和真机调试可以…"}, {"id": "6937987108371955719", "title": "前端如何优雅的设置一个无侵入式埋点", "desc": "前端应用AOP思想优雅的设置一个无侵入式埋点。业务代码和埋点代码是完全不相关的两块逻辑，这个时候却需要强行组织在一起，导致诸多问题。。。"}, {"id": "6844903942942359560", "title": "nginx服务器配置React的Browser路由模式，并避免出现404", "desc": "请求 http://localhost:8080/login 上的资源的时候，服务器会默认搜索当前目录下的login文件夹里的资源。但是logIn这个目录其实是不存在的，往往在刷新浏览器的时候，会==404Not fund==； 我这里在服务器配置了二级目录 react 作为请…"}, {"id": "6844904194105671687", "title": "React 开发者常见的 3 个错误", "desc": "关于前端开发，我最开心的事情就是总有新的东西可以学习。但我们可能一辈子都在掌握各种编程语言、库和框架，但仍然一无所知。 因为我们都在学习，这也意味着我们都容易犯错误。没关系，我们的目的是变得更好。如果你犯了一个错误并从中吸取教训，你就做得很好！但是如果你没有学到任何新的东西，并…"}, {"id": "6974946280178974756", "title": "再学 React Hooks (二）：函数式组件性能优化", "desc": "React Hooks 和函数式组件让我们更加方便地开发 React 应用。本文将介绍函数式组件性能优化的几个方法。"}, {"id": "6844903998168776712", "title": "React Hooks 在全局状态管理中的实践", "desc": "不知从何时起，状态管理成了一个前端项目的标配，不论有无需要，我们都会引入诸如MobX、Redux库来管理我们应用的状态。但如果我们回头想想之前项目中的某些架构，不免感叹，为何我的项目功能间设计耦合如此之紧，为什么这部分根本不需要抽离的公共状态却抽离了，又为何组件的状态和UI耦合…"}, {"id": "6844903507573784589", "title": "深入探讨前端组件化开发", "desc": " "}, {"id": "6987347926536159239", "title": "React遗漏的知识点", "desc": "*受控组件 V.S 非受控组件 *React 有哪些生命周期函数？分别有什么用？（Ajax 请求放在哪个阶段？） 链接 初始化 挂载 更新 卸载阶段 在componentDidMount这个里面发送a"}, {"id": "6938421072794484772", "title": "有关Hook实现getDerivedStateFromProps的小思考", "desc": "用类组件有一个很方便的生命周期就是getDerivedStateFromProps，我用这个生命周期最主要的还是实现一些受控组件。 但是函数组件没有生命周期的概念，所以自然也没有这个方法了，但是细心的同学一定可以看到官方文档上是有解答过这个问题的。 在看官方解答之前，先了解一下…"}, {"id": "6975490406288982023", "title": "React路由系列-初始路由", "desc": "一、React Route介绍 使用React构建的单页面应用，使用路由实现页面跳转。在React中，常用的两个包可以实现这些需求，那就是React-router和React-router-dom（r"}, {"id": "6975473448667906061", "title": "React16 全家桶学习笔记 2.0", "desc": "温故而知新，勤能补拙，一遍学不会就多学几遍。 这次学习的是 【智能社】React合集（经典课程升级版+精通Hook） 课程。 边学习边记录。"}, {"id": "6918266445373636621", "title": "React学习----路由懒加载", "desc": "React 使用webpack 打包时，会生成一个main.js的文件。当页面组件增多时，main.js 也跟着变大，从而减慢页面的加载速度。使用 compression-webpack-plugin 配合 nginx，将文件压缩，这种方法可行，但是加载首页的时候，效果还是不理…"}, {"id": "6844903698506711053", "title": "函数式的 setState 是 React 的未来", "desc": "更新：我在React Rally上就此主题进行了后续讨论。虽然这篇文章更多的是关于“函数式的 setState”模式，但更多的是关于深入理解setState。 React在JavaScript中推广了函数式编程，这导致了大量的框架采用了React使用的基于组件的UI模式。如今，…"}, {"id": "6904438522749386759", "title": "react-dev-inspector使用指南（踩坑）", "desc": "react项目中有这样一个款插件react-dev-inspector,用来解决什么问题呢？就是，当一个已经上线的项目出现了一个bug的时候，如果你对该项目不是非常熟悉，那么你就需要从来去捋一遍代码，还要非常费劲的去找到该处的代码位置，那么react-dev-inspector…"}, {"id": "6863642635916017671", "title": "深入 React Hooks 原理", "desc": "React 在 v16.8 提供了 Hook 特性，React Hooks 通过增强函数式组件，为 Function Component 注入一些功能，例如 useState 让原本的 Stateless Function Component 有了状态。 接下来我们从 useS…"}, {"id": "6844903703950934029", "title": " React Hooks 可以为我们带来什么，及为什么我觉得React才是前端的未来", "desc": "简单说明一下，react hooks 是一个已经在提议中的新功能，预计会随着React 16.7.0一起发布。 如果我们有一个需要共享的状态，需要在多个组件之间传递。我们会怎么做？ 可以看到代码重复的部分非常多，只有文字显示的不同而已。 这里就需要用到HOC了。 Compone…"}, {"id": "6963627974033670151", "title": "开发 React 项目这个姿势最舒服", "desc": "主要是改造一个旧的 React 项目之后的大概总结，第一次发文，欢迎大家找茬挑毛病，知道这的人说话最好听了，挑刺儿的声音都是悦耳的～"}, {"id": "6883352163620388878", "title": "基于react的九宫格抽奖组件", "desc": "通常我们在做调查问卷，购买商品的时候，商家为了吸引客户，增加与客户之间的互动，会引导客户前往一个九宫格抽奖界面，点击中间的抽奖按钮后，整个抽奖池会循环地给奖品添加动态样式，实现跑马灯的效果，最终停在某一个奖品格子上，确定抽奖结果。 现在网上流行的解决方案，要么使用canvas实…"}, {"id": "6981846070347169806", "title": "浅谈react-router", "desc": "一.react-router依赖 react-router依赖于react-router-dom 所以使用react-router必须先得安装react-router-dom 二.react-rout"}, {"id": "6844903673709985805", "title": "babel 用法及其 .babelrc 的配置详解，想做前端架构，拒绝一知半解", "desc": "babel 用法及其 .babelrc 的配置详解，想做前端架构，拒绝一知半解"}, {"id": "6844903519741296648", "title": "【译】Ant Design 3.0 驾到", "desc": "14 个月前我们发布了 Ant Design 2.0。期间我们收到了 200 多位贡献者的 PR，经历了大约 4000 个提交和超过 60 个版本 GitHub 上的 star 数也从 6k 上升到了 20k。 自 2015 年以来的 GitHub star 趋势。 今天，我们…"}, {"id": "6844903848889466894", "title": "antd-virtual-select 万条数据流畅滚动渲染", "desc": "antd 的 Select 组件不支持大数据量的下拉列表渲染，下拉列表数量太多会出现性能问题. antd-virtual-select 基于 antd 封装实现，替换原组件下拉列表，只渲染几十条列表数据，随下拉列表滚动动态刷新可视区列表状态，实现万条以上大数据量列表高性能渲染。…"}, {"id": "6964674784101662734", "title": "React：高阶组件(HOC）与 Render Props", "desc": "React中，复用逻辑我们经常采用高阶组件(HOC)的方式，将逻辑封装的在包装函数的内部实现，同样实现这种目的，我们还可以通过render props进行处理"}, {"id": "6940997754780925982", "title": "React 实践 - 高德地图集成使用", "desc": "AMap 对象构造需要传一个 DOM 元素。让挂载显示出来。"}, {"id": "6844904080163209224", "title": "React结合AntD、Node的编写简单的管理系统", "desc": "我首先是完成了登陆页面，因为第一次使用React写项目，所以踩了很多坑。这里的话，因为自己还是身为一个设计生，所以也尽量不让自己的页面丑陋，很多时候还会去想怎么样会好看点，logo也就是我自己随便设计了一个，背景是一个GIF，也利用animate.css放了点自我感觉还Ok的动…"}, {"id": "6844903943286292493", "title": "react hook用法及实现原理", "desc": "useState 的替代方案。它接收一个形如 (state, action) => newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。（如果你熟悉 Redux 的话，就已经知道它如何工作了。） 在某些场景下，useReduc…"}, {"id": "6844903942371934215", "title": "React中级指南-01 如何在React中使用Redux", "desc": "Redux是一个用来管理管理数据状态和UI状态的JavaScript应用工具。随着JavaScript单页应用（SPA）开发日趋复杂，JavaScript需要管理比任何时候都要多的state（状态），Redux就是降低管理难度的。（Redux支持React，Angular、jQ…"}, {"id": "6844904003206135815", "title": "antd源码解读（9）- Form", "desc": "如果有对高阶组件有想要深入的请移步这里，我们这里不做过多的深究。接下来我们直接看这个函数的代码 具体在react官网上面也有相应的解释，使用了这个方法就能够将传入组件的静态方法也完全拷贝到高阶函数返回的组件中。 从现在看来之前代码中的formWrapper就是一个接受传入组件，…"}, {"id": "6844903556584046599", "title": "webpack之代码拆分 ", "desc": "作为当前风头正盛的打包工具，webpack风靡前端界。确实作为引领了一个时代的打包工具，很多方面都带来了颠覆性的改进，让我们更加的感受到自动化的快感。不过最为大家诟病的一点就是用起来太难了。 要想愉快的使用，要使用n多的配置项，究其原因在于文档的不够详细、本身默认集成的不足。 …"}, {"id": "6976276705367293965", "title": "React 同构", "desc": "这是我参与更文挑战的第18天，活动详情查看： 更文挑战。 前言 React 同构，需要实现以下功能： 在服务端根据 React 组件生成 html 数据脱水和注水 服务器端管理Redux Store "}, {"id": "6916146106569064455", "title": "从零开始创建react项目", "desc": "注意：registerServiceWorker注册的service worker 只在生产环境(正式环境)中生效。 当对react-script配置好的构建工具和配置项不满意时使用这个命令，他将命令运行的脚本js分离出来，输入命令时指向的是这些脚本，你可以根据情况调整这些代码…"}, {"id": "6844904097754120199", "title": "前端渣渣记一次排查万恶之源IE兼容性的问题", "desc": "昨天晚上，本来舒舒服服的躺在被窝睡觉，睡前一看企业邮箱，哦豁，好家伙，给我报了四个BUG，我再进入一看，映入眼前的是 : 360兼容模式下，在A页面点击按钮无法跳转、IE浏览器在B页面点击返回按钮无效果，停留在当前页面、C页面弹窗按钮，点击之后，弹窗没关闭，点击无效果... 什…"}, {"id": "6844903647801802766", "title": "关于Vue和React区别的一些笔记", "desc": "这篇文章记录我在使用Vue和React的时候，对他们的不同之处的一些思考，不仅局限于他们本身，也会包括比如 Vuex/Redux 等经常搭配使用的工具。因为涉及到的内容很多，可能下面的每一个点都能写成一篇文章，这次先简单做一个概要，等我有空做一个详细的专题出来。 为什么 Rea…"}, {"id": "6844903605359607821", "title": "React的平凡之路，或许我们才刚刚上路", "desc": "上面写的代码不多，主要就是简单写了个jsx的语法，然后通过render进行了渲染而已。 只支持多行注释，{/* ... */}，不过很少写注释 按照上面的代码可以直观的看到一些具体的区别，那么心急吃不了臭豆腐，赶紧开始继续往下写吧。就这点东西才不是react的两把刷子呢，下面有…"}, {"id": "6844903761962336269", "title": "GatsbyJS 入门（三）：从零开始架构 React 静态网站", "desc": "GatsbyJS 提供了一个简单易用的命令行工具，我们可以透过它来构建一个基本的 React 网站，并实时看到修改代码所带来的变化。"}, {"id": "6844903970150809607", "title": "Fiber与循环diff", "desc": "在上一篇文章VNode与递归diff中，我们了解了VNode的作用，如何将VNode映射为真实DOM，并通过递归实现了diff操作，最后研究了三种不同的diff方式带来的性能差异。 本文将紧接上文，研究如何通过循环的方式实现diff，并在此基础上实现对应的调度系统，从而理解Re…"}, {"id": "6844904114627821581", "title": "React源码解析之Commit第一子阶段「before mutation」", "desc": "(1) 根据fiber的tag即类型，进行不同的操作。主要看FunctionComponent和ClassComponent这两种情况。 (2) 如果是FunctionComponent的话，则执行commitHookEffectList()，该方法稍后解析。 (3) 如果是C…"}, {"id": "6844904015654813703", "title": "使用 react intl 实现 React 组件国际化", "desc": "React Intl 用于国际化 React 组件，提供 React 组件和 API 来格式化日期，数字，字符串（包括单复数和翻译） 。这次只用它实现文本翻译。 先安装： npm install react-intl --save 。 载入语言环境数据。React Intl 依…"}, {"id": "6918712057118507015", "title": "setState同步异步之谜", "desc": "setState 的更新是同步还是异步，一直是人们津津乐道的话题。不过，实际上如果我们需要用到更新后的状态值，并不需要强依赖其同步/异步更新机制。在类组件中，我们可以通过this.setState的第二参数、componentDidMount、componentDidUpdat…"}, {"id": "6844903730551193607", "title": "快速利用 vue 或者 react 开发 chrome 插件", "desc": "最近写了一个可以利用 vue 或者 react 快速开发 chrome 插件的 boilerplate，只需要使用我之前写的 bigroom-cli 工具，就可快速简单地进行启动、打包、编译等，同时也支持保存代码后，插件自动更新，页面自动刷新。 因为项目内部使用 webpack…"}, {"id": "6844903698338938888", "title": "让react用起来更得心应手——（react-redux）", "desc": "在没有redux出来之前，父组件和子组件之间，平行组件之间传递和修改状态，需要将状态和修改状态的方法逐级往下传，组件嵌套过深则很容易出现管理混乱的问题。所以redux就是为了解决状态管理而诞生的。 中间件原理：在原来的dispatch方法外包装一层函数，扩展其他功能，又能保证原…"}, {"id": "6844903813350948877", "title": "使用 React Hooks + Context 打造简版 Redux", "desc": "React Hooks 在 React@16.8 版本正式发布。我最近在一两个公司的内部项目中也开始用起来尝尝鲜。 不了解 Hooks 的同学先撸一遍文档。本文不对 Hooks 做详细介绍，只阐述一种使用 Hooks 的思路。 一般我们写 React 如果不是特别大的应用，前后…"}, {"id": "6844904079156592647", "title": "React源码解析之HostComponent的更新(上)", "desc": "接上篇 React源码解析之completeWork和HostText的更新 ，本文讲解下HostComponent多次渲染阶段的更新（下篇讲第一次渲染阶段的更新）。 「第一次渲染阶段」放在下篇文章讲。 主要是执行了diffProperties()方法，可能你会有疑惑：为什么不…"}, {"id": "6844903592839610376", "title": "React-Router看这里", "desc": "从事前端工作的第一个项目便是和同事协作构建一个大型SPA——企业后端管理平台，应用架构类似于企业微信·管理平台。使用React技术栈来完成前端开发，React-Router成为了必不可少的利器，无刷新的组件切换让用户体验更佳。 看了许多学习文档，也在工作中进行了实践，此文用于总…"}, {"id": "6845166890369843207", "title": "对React中组件通信的一些小思考", "desc": "前言最近一直都在思考，如何写React能最舒服，从最初的繁琐的Redux到Context，同级组件间的数据交流逐渐的简单了起来，但有时候也会写多余的代码，让我又在想，如何才能让组件间的简单的交流更纯粹"}, {"id": "6844903972591894535", "title": "React错题本---题1——使用useState更新状态失败", "desc": "听说每个好学生都会有个错题本，大概这就是我和大佬之差距吧... 但是！现在！为了接近大佬，我也决定开始记录错题了！虽然学了一年前端才开始写博客，虽然直到找工作才开始写博客。但是，我相信，只要肯开始，就一定不晚！ emmmm.......应该，也许，可能不晚吧.... 在做自己的…"}, {"id": "6899622027133616136", "title": "React源码解析之手写实现JSX、虚拟DOM、组件、生命周期、diff、setState", "desc": "React是前端最受欢迎的框架之一，解读其源码的文章非常多，但是我想从另一个角度去解读React：从零开始实现一个React，从API层面实现React的大部分功能，在这个过程中去探索为什么有虚拟DOM、diff、为什么setState这样设计等问题。 Vue的API设计非常简…"}, {"id": "6844904039293911054", "title": "【译】React团队的技术准则", "desc": "我React团队工作的这段时间，很幸运能够看见 Jordan、Sebastian、Sophie 和其他团队成员是如何解决问题的。在本文中，我会把从他们身上学到的，浓缩为一篇较高层次的技术准则。这些准则未必详细。它们都是我对React团队的观察和整理 —— 其他团队成员或许有其他…"}, {"id": "6978284406653845541", "title": "React哲学(精读React官方文档—12)", "desc": "这是我参与更文挑战的第25天，活动详情查看：更文挑战 引入React哲学 从设计稿开始 假设我们已经拥有了以下几个东西 一个能够返回JSON数据的API 设计师提供的组件设计稿 第一步：将设计好的UI"}, {"id": "6875498016107659271", "title": "React Hooks详解", "desc": "这个组件仅仅实现了一个可点击的button，可以看到代码已经很复杂了。基于此问题。在介绍Hooks之需要知道什么是函数组件。 但是这种组件有很大的局限，须是纯函数，不能包含状态，也不支持生命周期方法，因此无法取代类。为了解决函数组件能使用状态，于是React团队推出了Hooks…"}, {"id": "6844903729682972680", "title": "react设计--他怎么知道是类组件还是函数组件", "desc": "(直到最近，这是使用状态等功能的唯一方法。) 在这两种情况下，React的目标是获取渲染节点（本例中，是<p> Hello </ p>）。 就像在我之前的帖子中一样，你不需要知道this在React中的所作所为。多年来我一直都不知道。请不要把它变成面试问题。事实上，这篇文章更多…"}, {"id": "6844903759005351949", "title": "使用 React + Rxjs 实现一个虚拟滚动组件", "desc": "在我们的业务场景中遇到这么一个问题，有一个商户下拉框选择列表，我们简单的使用 antd 的 select 组件，发现每次点击下拉框，从点击到弹出会存在很严重的卡顿，在本地测试时，数据库只存在370条左右数据，这个量级的数据都能感到很明显的卡顿了（开发环境约700+ms），更别提…"}, {"id": "6896707305639772168", "title": "React 简单而美好：Scheduler 的内外双循环设计", "desc": "内循环，外循环。以内循环为主的国内国际双循环https://baike.baidu.com/item/%E5%9B%BD%E5%86%85%E5%9B%BD%E9%99%85%E5%8F%8C%E5%BE%AA%E7%8E%AF/53222121 最近看了两本书 《解构现代化：…"}, {"id": "6844903959316922376", "title": "搭建一套好用的react项目架构", "desc": "每个路由配置都是一个对象，包含path、exact、（component|render|children）属性，从app.jsx中可以知道，路由配置对象就是route的属性列表。"}, {"id": "6844903574091071502", "title": "React性能优化之使用 ImmutableJS 不可变数据", "desc": "众所周知，组件化是 React 的最大特性，所以我们需要关注组件的优化。 我们在子组件 ColorShow 中的 componentDidUpdate 勾子里打印一些东西，表明在组件重新 render 了。运行如下 如动图可知，我们其实只需要你点击几次的那块区域改变，但是子组件…"}, {"id": "6844903582311907341", "title": "前端菜鸟帝都面试记 super | 掘金技术征文", "desc": "在前面几篇文章中谈了美团、春雨医生、今日头条、第四范式、玩吧，我觉得很有收获的几家公司，现在把其他几家不错的公司面试经历分享给大佬们。 在狗年附近大大小小的面试了10多家公司，大公司和小公司都有。 D 轮 + 公司： 百度外卖，美团外卖，今日头条商业广告部门。 看中前端基础的，…"}, {"id": "6921300663087398919", "title": "新的JSX转换方式——React 官方博客翻译", "desc": "虽然React 17没有什么新特性的出现，但是它提供了新版的JSX转换方式。在这篇文章里，我们会阐述它是什么以及如何体验它。 浏览器没有办法直接理解JSX的语法，所以大多数的React用户都依靠像Babel和TypeScript这样的工具将JSX代码转化成为普通的JavaScr…"}, {"id": "6844903685110120461", "title": "beeshell：开源的 React Native 组件库", "desc": "beeshell 是一个 React Native 应用的基础组件库，基于 0.53.3 版本，提供一整套开箱即用的高质量组件，包含 JavaScript（以下简称 JS）组件和复合组件（包含 Native 代码），涉及前端（FE）、iOS、Android 三端技术，兼顾通用性…"}, {"id": "6854573210663387149", "title": "Hooks 之手写 useTitle", "desc": "React Hooks 正凭借其 Function Component 的特性，已经在实际项目中被广泛应用，而对于逻辑是重复且可被复用的组件，借助第三方 React Hooks 库来加快开发效率无疑是正确的选择。 以上库中，都包含了 useTitle 这个 hook 函数，调用…"}, {"id": "6844903645226467335", "title": "在线代码编辑器 Codemirror 的轻量级 React 组件", "desc": "🌱 自动根据 mode 配置加载 mode 文件。 🚀 快速简单的配置 API。 需要 codemirror 资源，在指定某些语言模式和主题时经常会出现这种情况。 只需设置模式，语言资源就会自动延迟加载。 Licensed under the MIT License."}, {"id": "6991991162965852197", "title": "浅谈react hook", "desc": "用react native开发了一段时间的app之后，对react hook的使用也有了一些学习总结，下面从三个维度对hook学习进行记录"}, {"id": "6922050558886936589", "title": "写给自己看的React源码解析（三）：Fiber架构下更新链路以及Concurrent模式实现原理", "desc": "本文内容涉及到很多渲染链路中的原理以及源码方法，所以在看本文之前，需要对于React的render渲染流程有大致的了解。不清楚的同学可以先看我的第一篇源码解析文章。 本文主要解析fiber架构更新链路的双缓冲模式以及Concurrent模式下时间切片，优先级的实现原理。 双缓冲…"}, {"id": "6844903800134713357", "title": "使用React构建精简版本掘金（一）", "desc": "这个脚手架会自动帮助我们搭建基础工程，同时安装React项目的各种必要依赖，如果在过程中出现网络问题，请尝试配置代理或使用其他 npm registry。 需要对整个项目重新配置，这里使用了react-app-rewired （一个对 create-react-app 进行自定…"}, {"id": "6905938801106157581", "title": "你真的会用setState吗？", "desc": "不知道你们心里是否有上面代码的答案了呢？不错，正确输出是：0 0 2 3。那可能刚开始学React的童鞋就会问了？为什么前面都是0，后面的正常加了了？那这个setState究竟是同步的还是异步的了？那么，接下来就为你解答心中的疑惑=。= setTimeout 同步更新，引发两次…"}, {"id": "6844903645230661645", "title": "[译] 图解 React Native", "desc": "React Native vs. Cordova、PhoneGap、Ionic，等等 (待翻译) 在上一篇文章中，我们介绍了什么是 React 以及是什么使得它如此特别。今天我们将介绍 React Native: 它是做什么的，它出自何处，它和 React 有哪些不同之处，以及…"}, {"id": "6924972128475283470", "title": "如何比较 NextJS 和 Create-React-App 这两个工具", "desc": "在 2021 年创建新的React项目时，有两个明确的选择：NextJS 或 Create-React-App。Gatsby 已经失宠了。 由于大规模构建缓慢，NextJS成为更好的静态站点生成器。 让我们回顾一下 NextJS 和 Create-React-App的优缺点，我…"}, {"id": "6987045486158938149", "title": "React 学习之 Hook", "desc": "React 16.8 之前，只能类组件才能拥有状态，React 16.8 之后，Hook 的出现极大地简化了我们编写代码的方式与可读性，本文则简要介绍 Hook 的基本使用与注意要点..."}, {"id": "6844904119677747213", "title": "1、前端页面如何优雅的显示PDF：原理说明", "desc": "1. Getting Started"}, {"id": "6863624907452841998", "title": "React Hooks自定义一个图片懒加载hooks", "desc": "图片懒加载也是一个老生常谈的话题了，假如一个网站的图片很多，如果不对图片做懒加载处理，那么一打开这个页面，所有的图片都会向服务器发起资源请求，势必会出现资源浪费的情况（如果用户打开了这个网站，并没有往下面下方浏览，只是停留在了当前的这个位置，然后退出了网页，那么那些不需要展示的…"}, {"id": "6844903509628813326", "title": "你可能不知道的 JavaScript 代码规范", "desc": "良好的代码规范，能够提高代码的可阅性，使得项目维护更友好。除了自己设定一个规范外，我们也可以借鉴一下现在流行的代码规范，让我们成长之后，再去看细节。"}, {"id": "6844903666919407630", "title": "ReactNative仿某租车软件", "desc": "循例都要介绍下React-Native，下面简称RN。 RN是让你使用Javascript编写的原生移动应用。它在设计原理上和React一致，通过声明式的组件机制来搭建丰富多彩的用户界面。 1. 搭建RN环境 其实文档上面写得很清楚，很友好的分了开发平台跟目标平台，基本上按着上…"}, {"id": "6878573796761010184", "title": "[译]-100行代码从零实现 Facebook 的 Recoil 库 | 掘金技术征文-双节特别篇", "desc": "Recoil 是围绕着 “atoms” 这个概念构建的。Atoms 是组成整个状态中的原子性的一部分，你可以在组件中订阅它或更改它的值。 开始，我将创建一个叫做 Atom 的类 ，用来包裹一些值 T 。我加了一些辅助方法 update 和 snapshot 允许你获得或更改 A…"}, {"id": "6844903712347930638", "title": "[译] 理解 React Hooks", "desc": "我强烈推荐大家观看这个开场演讲，在这个演讲里，大家可以了解到我们尝试使用 Hooks 提案去解决的问题。不过，花费一个小时看视频也是时间上的巨大投入，所以我决定在下面分享一些关于 Hooks 的想法。 我们知道组件和自上而下的数据流可以帮助我们将庞大的 UI 组织成小型、独立、…"}, {"id": "6856025053931569166", "title": "揭秘React useEffect", "desc": "下面是关于React的useEffect的快速解释！我的假设是你已经熟悉了React中类组件的工作方式，所以我将解释一下hooks的等价物是什么 🚀。 让我们直接说吧。 在React中，使用的两种最常见的生命周期方法是 componentDidMount 和 componen…"}, {"id": "6854573215478611975", "title": "React和Vue语法并排比较：状态管理", "desc": "这是有关React和Vue语法比较的第二篇文章。在本文中，将比较两种生态系统中最著名的状态管理库（Redux和Vuex）的语法。"}, {"id": "6909381552342302733", "title": "换一个角度来审视React", "desc": "如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。 时间不早了，该干点正事了，咱们书归正转。 我们在接触一个人或者一件事，可能会经历是什么👉为什么👉怎么办，也就是What => Why =>How三部曲。 所以，我们该篇文章也按着这个流程来。 在和一些刚接触框架的新前端…"}, {"id": "6989423117005226014", "title": "组件三大核心属性", "desc": "学习React的三大核心属性state,props,refs的理解及其使用场景和注意要点。。。。。。。"}, {"id": "6904514150223839240", "title": "Ant-Design从v3升级到v4的Form适配", "desc": "还记得3.0版本升级到4.0版本还是上午刚发生的事情，现在看到antd的版本已经是4.9.2了，离5.0还会远吗！要跟上脚步，体验最新的性能、视觉和神坑。😿😿😿 升级的说明文档涵盖了所有的修改点，其中Form的修改说明文档针对Form使用不同的详细说明。 虽然antd提供…"}, {"id": "6844903561373941774", "title": "前端框架的新星-Hyperapp 1.0简介", "desc": "在这个React, Vue, Angular三足鼎立的前端框架圈（其实React, Vue也不能算是框架），其实也出现了非常不错的库，因为被前三者的光芒所掩盖，所以并不太为人知。今天就要向你们介绍其中一个：Hyperapp。 历时了将近一年的时间，Hyperapp1.0终于发布…"}, {"id": "6844903544777097229", "title": "react骨架屏", "desc": "一个可以自动生成react骨架屏的webpack loader. 菊花的loading图太low，骨架屏更美观。公司UI不愿意为设计骨架屏图片（在一个小公司，UI也比较少）！后来我想了一下能不能通过webpack自动生成骨架屏，有了这个想法之后我就开始动手设计了,发现是可行所以…"}, {"id": "6914954002366988296", "title": "mobx-react@7.x 的使用", "desc": "mobx-react@7.x相较于mobx-react@6.x有很大改变, api 也有所不同. 因此写法有改变. 另外本例子是基于react@17.0.1+react hooks+mobx@6.x + mobx-react@7.x+ typescript创建的. mobx-r…"}, {"id": "6989204609722122247", "title": "React中渲染DOM 三元表达式中多个三元表达式判断", "desc": "​ 我想在判断等于4后再进行进一步判断，然后渲染三个dom结构，但发现只能写一个，写多了就会报错。 ​ 于是尝试解决，发现这样虽然不报错了，然是有警告，下面两行的dom结构是渲染不出来的 ​ 后来想到"}, {"id": "6844903669293400072", "title": "Electron 应用如何利用 create-react-app 从 0 到 1", "desc": "此教程适用于了解 React，想要学习 Electron，但是不知如何将 React 添加至 Electron 中的同学。 1. 初始化 首先利用 facebook 官方的create-react-app创建一个基础项目。你可以根据你平时喜欢的包管理工具安装： 2. 删除 Se…"}, {"id": "6844903614348001294", "title": "[英] 为什么整个前端开发行业如此不稳定？", "desc": "We all know the meme: by the time you’ve learned one front-end technology, another three have just been released. Also, that one you just l…"}, {"id": "6844903701425979405", "title": "记一次基于react、cra2、typescript的pwa项目由开发到部署（一）", "desc": "上一篇“记录一次基于vue、typescript、pwa的项目由开发到部署”，发布后，忙于秋招的楼主我，终于有时间来写这篇文章。最近秋招也挺顺利，拿到了网易广州岗的offer，对目前想留在广州发展的我来说真是太合适不过了。在最近的反思中，楼主我也意识到了自己存在过于急功近利的毛…"}, {"id": "6844903497255616520", "title": "从React到React Fiber", "desc": "Fiber是一种轻量的执行线程，同线程一样共享定址空间。线程靠系统调度，并且是抢占式多任务处理，Fiber则是自调用，协作式多任务处理。"}, {"id": "6844903750658686983", "title": "【译】React Fiber Architecture", "desc": "React Fiber 是 React 核心算法的持续重新实现。它是React 团队超过两年的研究结果。 React Fiber 的目的是增强对类似动画、布局和手势操作这些场景的适应性。他的头个特性是渐进式渲染：将渲染工作拆分成块并将其分散到多个帧的能力。 其他主要特性包括在新…"}, {"id": "6844903688461516814", "title": "使用Performance对页面进行分析优化(实战篇)", "desc": "这篇文章将介绍下实际使用performance对页面进行优化的过程。总的来说，chrome performance工具让我们更方便的发现在代码运行过程中的问题在哪里，便于对一些可能注意不到的问题进行定位、分析和优化。原文首发于个人博客 首先，我们对进入整个详情页进行分析，整个页…"}, {"id": "6907428761499762696", "title": "如何使用 react + antd 实现后台管理系统的二级菜单", "desc": "一、效果介绍话不多说，咱们先来上一张图看看效果具体效果展示二、准备工作1、创建项目2、安装需要的依赖3、创建项目基本结构4.设计主界面5.设计主布局页面结合UI库的Layout组件layout/mai"}, {"id": "6911864446633639950", "title": "React Hooks实现网易云音乐PC版", "desc": "Gitee源码地址Hooks项目地址首先看看实现的功能首页UI歌曲详情页面歌单详情页面专辑详情页面详情页的播放和添加歌单音乐播放器列表歌曲单曲循环以下是一些核心代码react-router-dom中的"}, {"id": "6979980298524196901", "title": "why React 函数式组件", "desc": "最近工作一直用的class组件，很久没碰函数式组件了，现在做个总结，也算是温习了。打算这波回顾之后就用函数式组件。 先说why not class class组件有他的优势，比如模板傻瓜式，很容易上手"}, {"id": "6844903576909643789", "title": "Rematch 一个更好用的 Redux", "desc": "这个项目起因是为了尝试一下rematch，它是一个基于 Redux 的状态管理框架，感觉跟 Vuex 有点相似，用以来比 Redux 简便很多，核心就是 model，dispatch 和 reducers，比 Redux 更好理解, 且无需配置就可使用 Redux Devtoo…"}, {"id": "6844903726612742157", "title": "React 16.x 路线图公布，包括服务器渲染的 Suspense 组件及Hooks等", "desc": "你可能已经在之前的博文和演讲中听说过“Hooks”，“Suspense” 和 “Concurrent Rendering”等功能。 在这篇文章中，我们将看看如何组合使用它们，并给出它们在 React 稳定版中的预计可用时间表。 这些时间都是预估的，细节可能随着我们的进展而变化。…"}, {"id": "6844904190016225288", "title": "React Hooks 温故而知新", "desc": "React Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其它的 React 特性。 这段代码实现了一个简单的计数器功能，点击按钮使 count 增加，同时使页面标题的显示与 count 的变化同步。这里引入了 …"}, {"id": "6911590325409005582", "title": "react hooks基本使用方法", "desc": "1. eject是讲react-script集合起来,方便了我们运行单页面程序,但如果我们要编译多页面,就需要修改react-script ,但它已经被封装起来不方便改动,所以有了eject,使用eject可以将react-script拆开到项目根目录方便我们修改,react-…"}, {"id": "6942738290667700231", "title": "useEffect 完整指南(一)", "desc": "但有时候当你使用useEffect你总觉得哪里不对劲，你会嘀咕你可能遗漏了什么。他看起来像class的生命周期，但真的是这样子吗？你会发觉下面几个问题： 但我们开始使用hooks的时候，我也同样被上面的这些问题所困惑。在我经历了一下“啊哈！”的开窍时刻，我想把这些分享给你。这篇…"}, {"id": "6844903597436747784", "title": "React 深入系列４：组件的生命周期", "desc": "组件是构建React应用的基本单位，组件需要具备数据获取、业务逻辑处理、以及UI呈现的能力，而这些能力是要依赖于组件不同的生命周期方法的。组件的生命周期分为3个阶段：挂载阶段、更新阶段、卸载阶段，每个阶段都包含相应的生命周期方法。因为是深入系列文章，本文不会仔细介绍每个生命周期…"}, {"id": "6844903607414816776", "title": "React16——看看setState过程中fiber干了什么事情", "desc": "下图是一个典型的create-react-app创建的项目，其中Text.js是我新增的子组件，在App.js中引用到。 接着，执行了updater上的enqueueSetState方法，每一个实例都会有一个updater（更新器），updater的作用在下面介绍，在当前App…"}, {"id": "6844904196097966088", "title": "React—复合组件信息传递", "desc": "父组件调用子组件，通过属性传递props,属于单向数据传递，即只能是父组件向子组件传递属性，反过来不可以。 父组件通过属性的方式把能操作自己状态的方法传递给子组件，然后子组件拿到方法进行操作，通过方法修改相应的信息。底层还是基于属性传递 把后代需要用到的属性和方法，放到祖先元素…"}, {"id": "6844903497612132365", "title": "React Native 配置自定义字体", "desc": "本想着配置自定义字体不是什么大坑，官网文档找了一下，没有。遂关键字：“React Native 配置自定义字体”这么一搜。都是一样的文章，作者名却是各式各样，真是天下文章大家抄。然而试了一下并不好用。 （这里使用最新的RN 0.48.4 测试） 这里想一下React Nativ…"}, {"id": "6844903957714698254", "title": "实现react中的createElement和react-dom中的render", "desc": "大家都很清楚知道React是一个用于构建用户界面的JavaScript库，可以书写jsx编译成真正的DOM插入到要显示的页面上。下面我们做一些准备工作了解jsx变成DOM的过程，进而自己去实现一遍。 这就是一个React对象，也就是虚拟DOM。接下来我们打开babel官网，输入…"}, {"id": "6844903638515597325", "title": "AJAX API三驾马车: Axios vs . jQuery和Fetch", "desc": "如果你曾经使用过类似 Angular 框架的经验，你会发现这些框架集成了开发一个应用应该具备的所有功能，例如用于进行HTTP调用的服务(Angular 中的 $HTTP )。 React 是一个视图层框架，用于构建用户界面。在 MVC 架构中，它仅仅负责视图部分。在实际的开发过…"}, {"id": "6844904058461880334", "title": "在React应用程序中用RegEx测试密码强度", "desc": "尽管一些组织认为应该由用户选择健壮的用户名和密码来保护自己，但是开发人员可以通过将规则包含在程序的设计中来帮助进行良好的密码选择。例如，开发人员可以通过加入进度条、百分比或颜色，来帮助用户在输入密码时规定密码的质量。 许多人都知道弱密码很短，并且包含字母或数字，但绝不会同时包含…"}, {"id": "6997578178566979591", "title": "React 路由", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 安装： cnpm install react-router-dom --save ReactRouter三大组件： Router：所有路由"}, {"id": "7001658244514971679", "title": "React如何捕捉错误", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 背景 错误在我们日常编写代码是非常常见的 举个例子，在react项目中去编写组件内JavaScript代码错误会导致 React 的内部状"}, {"id": "6923835053029982221", "title": "React中的任务饥饿行为", "desc": "点击进入React源码调试仓库。 本文是在React中的高优先级任务插队机制基础上的后续延伸，先通过阅读这篇文章了解任务调度执行的整体流程，有助于更快地理解本文所讲的内容。 饥饿问题说到底就是高优先级任务不能毫无底线地打断低优先级任务，一旦低优先级任务过期了，那么他就会被提升到…"}, {"id": "6844903806715559943", "title": "必须要会的 50 个 React 面试题", "desc": "如果你是一位有抱负的前端程序员并准备面试，那么这篇文章很适合你。本文是你学习和面试 React 所需知识的完美指南。 JavaScript 工具缓慢而稳定地在市场中扎根，对 React 的需求呈指数级增长。选择合适的技术来开发应用或网站变得越来越有挑战性。其中 React 被认…"}, {"id": "6919302952486174733", "title": "深入理解React Diff算法", "desc": "点击进入React源码调试仓库。 上一篇扒一扒React计算状态的原理 之后，我们来分析一下Diff的过程。 fiber上的updateQueue经过React的一番计算之后，这个fiber已经有了新的状态，也就是state，对于类组件来说，state是在render函数里被使…"}, {"id": "6998443880311947301", "title": "🔥 你不可能知道的React Hook 自定义懒加载组件", "desc": "概念 必要性 一、用户流失率（用户体验） 二、耗费带宽资源 区别于路由懒加载 懒加载前置知识 lazyloadTop：需要懒加载的元素达到内容顶部的距离。 clientHeight/offsetHei"}, {"id": "7004002556728836132", "title": "react/vue中的key有什么作用？（key的内部原理是什么？）", "desc": "# react/vue中的key有什么作用？（key的内部原理是什么？） 为什么遍历列表时，key最好不要用index? 1. 虚拟DOM中key的作用： 2. 用index作为key可能会引发的问题"}, {"id": "6844904036013965325", "title": "8k字 | Redux/react-redux/redux中间件设计实现剖析", "desc": "一. redux的实现 在一切开始之前，我们首先要回答一个问题：为什么我们需要redux，redux为我们解决了什么问题？只有回答了这个问题，我们才能把握redux的设计思路。 React作为一个组件化开发框架，组件之间存在大量通信，有时这些通信跨越多个组件，或者多个组件之间共…"}, {"id": "6922302846524194829", "title": "一篇长文帮你彻底搞懂React的调度机制原理", "desc": "点击进入React源码调试仓库。 Scheduler作为一个独立的包，可以独自承担起任务调度的职责，你只需要将任务和任务的优先级交给它，它就可以帮你管理任务，安排任务的执行。这就是React和Scheduler配合工作的模式。 对于多个任务，它会先执行优先级高的。对于单个任务，…"}, {"id": "7001012332927287310", "title": "[译]2022年前端最佳开发策略", "desc": "这篇文章的写作目的具有一定挑战性、观点倾向性和发人深省性。它涵盖了许多您很可能不知道的新鲜内容和想法。 内容 介绍 计算机或智能手机上有多少个内核？ 浏览器使用多少个内核？ Web Workers A"}, {"id": "7002973476730601502", "title": "【React】知识梳理：React中使用CSS样式的五种方法", "desc": "由于 React的JSX语法 ，能在React中使用样式的方式有很多，这里主要介绍在React中经常使用CSS样式的五种方法。主流推荐CSS Modules和Styled Components。"}, {"id": "6923486209155497991", "title": "Concurrent模式下React的更新行为 - 优先级模型", "desc": "点击进入React源码调试仓库。 作为构建用户界面的JavaScript库，React以提升用户交互体验为核心，而实现这一目标较为重要的一点是优先响应用户交互触发的更新任务，其余不那么重要的任务要做出让步，我们把用户交互触发的任务称为高优先级任务，不那么重要的任务称为低优先级任…"}, {"id": "7002580143826796575", "title": "web前端高级 - React从入门到进阶之JSX简介", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 一、JSX是什么？ 二、为什么使用JSX 搞清楚这个问题后，我们就开始学习 JSX 吧！ 三、在JSX中嵌入表达式 四、JSX 特定属性 "}, {"id": "6998130329429114916", "title": " React Hooks的使用", "desc": "使函数组件可以进行存储状态 类组件的不足 同一组相干逻辑拆分到多个生命周期中，一个生命周期中有多个不相干的逻辑 this指向问题 useState 每次修改，App函数都会执行 useState方法可"}, {"id": "6916790300853665800", "title": "React中的优先级", "desc": "UI产生交互的根本原因是各种事件，这也就意味着事件与更新有着直接关系。不同事件产生的更新，它们的优先级是有差异的，所以更新优先级的根源在于事件的优先级。 一个更新的产生可直接导致React生成一个更新任务，最终这个任务被Scheduler调度。 所以在React中，人为地将事件…"}, {"id": "6922062693545279502", "title": "React源码  commit阶段详解", "desc": "点击进入React源码调试仓库。 当render阶段完成后，意味着在内存中构建的workInProgress树所有更新工作已经完成，这包括树中fiber节点的更新、diff、effectTag的标记、effectList的收集。此时workInProgress树的完整形态如下：…"}, {"id": "7002435265037860871", "title": "结合 React Router 看 React Navigation", "desc": "1 前言 RN 菜鸟一枚，才开始入手，所以该文章适合新手或者基础开发者观看，希望能对你有所帮助。 在使用 React 开发 web 端页面时，会使用 React Router 进行路由管理，那么在 R"}, {"id": "7005000863089426468", "title": "实现react库的核心API", "desc": "我们用react来编写组件的时候，都是以jsx的形式写编写视图层，除此之外，还可以通过createElement这个方法来编写组件，createElement是react库核心的API之一。 crea"}, {"id": "6921314234508771335", "title": "React hooks 的基础概念：hooks链表", "desc": "当函数组件进入render阶段时，会被renderWithHooks函数处理。函数组件作为一个函数，它的渲染其实就是函数调用，而函数组件又会调用React提供的hooks函数。初始挂载和更新时，所用的hooks函数是不同的，比如初次挂载时调用的useEffect，和后续更新时调…"}, {"id": "6867745889184972814", "title": "烤透 React Hook", "desc": "我们来研究一下最近天天都在使用 React Hook。说起 Hook，烧烤哥也用了好一阵子了，但是一直不知道 Hook 背后到底是怎么运作的，在出现 Bug 的时候只能靠一半猜一半试来解 Bug，这显然是不行的。所以，今天开始就让我们来把 React Hook 慢慢烤透，以便在…"}, {"id": "6844903636468776968", "title": "Redux 概要教程", "desc": "Redux 是一个面向 JavaScript 应用的状态管理工具。它可以帮助我们写出更清晰，更容易测试的代码，并且可以使用在任何不同的环境下。Redux 是 Flux 的一种实现，它简化了 Flux 繁琐的 store 而采用单一数据源的方式，大大减小了状态管理的复杂度。相比 …"}, {"id": "6911332842081353735", "title": "分享一个单页应用cookie互串的解决方案", "desc": "客户在浏览器的两个页签里先后使用不同的账号(先 A 后 B)登录了我们的系统，发现账号 B 加完车未结算，切换到账号 A 所在的页签里点击结算，结果账号 B 的钱被扣了。 由于我们系统里的 cookie 是种在了同一个域名下，所以后登录的账号 B 会替换掉先登录的账号 A，这样…"}, {"id": "6844903603434422279", "title": "React 15.6 升级 React 16.2 小记", "desc": "React 16 已经发布很久了，但是维护的一个很简单的项目使用的还是 React 15.6。 由于想使用React 16.2 中的 Fragment 的特性，便决定升级。 由于本来项目中使用的就是 React 4， 所以没有升级 react-router-dom 这个包。 检…"}, {"id": "6911352835590324238", "title": "React事件机制-之-事件初始化", "desc": "整个注册过程就是为了设置这些变量，这些变量是合成事件和原生事件的对应关系、plugin的对应关系;这些变量在后续的 DOM 操作中会扮演比较重要的角色。 extractEvents是一个方法，用来根据具体真实触发的事件类型等参数，返回对应的事件对象，也可以返回null表示当前事…"}, {"id": "6844903635558596616", "title": "为 MobX 开启 Time-Travelling 引擎", "desc": "注意：本文并非 mobx-state-tree 使用指南，事实上全篇都与 MST(mobx-state-tree) 无关。 了解 mobx-state-tree 的同学应该知道，作为 MobX 官方提供的状态模型构建库，MST 提供了很多诸如 time travel、hot r…"}, {"id": "6844903625756508174", "title": "杭州 GraphQLParty 第五场-GraphQL 基于 SPA 架构的工程实践文字版", "desc": "本文为 2018 年 6 月 9 日，宋小菜与 Coding 共同举办的第一届 GraphQLParty ，下午第五场国内某大型电商前端开发专家邓若奇的演讲稿，现场反响效果极好，对于想要尝试 GraphQL 和在公司初步实践的团队有很大的借鉴意义。 大家好，我是阿里的邓若奇。我…"}, {"id": "6950996872853258277", "title": "React Hooks 浅析", "desc": "什么是react-hooksuseState使用状态usestate 返回一个数组，第一个参数用来读取，第二个参数用来写useState的参数可以是一个具体的值，也可以是一个函数用于判断复杂的逻辑，函"}, {"id": "6844903775405244423", "title": "为什么React元素有一个?typeof属性？", "desc": "之后方法会返回一个对象给你，我们称此对象为React的 元素(element)，它告诉React下一个要渲染什么。你的组件(component)返回一个它们组成的树(tree)。 如果你用过React，对type、 props、 key、 和 ref应该熟悉。 但 ?type…"}, {"id": "6844903556252729351", "title": "从0到1设计一个react-spa后台应用", "desc": "下面围绕下面这张图，谈谈如何构建一个基本的react-spa应用框架。 使用SPA必然要说到按需加载，目前最简洁优雅的方案是使用webpack3 + react-router4 + react-loadable, 原理就是 webpack 的 Dynamic Imports。 …"}, {"id": "6887017610228170760", "title": "React中使用useState()导致的问题记录", "desc": "场景一: 更新 state 的一个对象（或数组）属性的某个子属性或值。 场景二: 在setTimeout中更改state。"}, {"id": "6875299911269810184", "title": "React入门-Component", "desc": "react通过类class来定义组件component，同时，该类需要继承extend React.Component。 在 React.Component 的子类subclass中必须要有render属性，其他所有的属性都是可选的。 每个组件都有一些生命周期方法lifecyc…"}, {"id": "6844904137327394824", "title": "React Suite 4.4.0 版本发布 🎉，带来了一些新特性", "desc": "家人们啊 👨‍👩‍👧‍👦，React Suite 又双叒叕更新了 🎉，在这全球新冠病毒的笼罩下，希望本次 V4.4.0 发布的新特性能给大家带来一丝丝心情上的改变 😄。 为什么有这个功能？ 我们看看一个使用场景：一个表格如果一页要显示100 行数据，表格自动高度，表…"}, {"id": "6943850220673302535", "title": "低代码平台的小小探索之动态表单系统", "desc": "由于时间关系，目前主要实现了Input、TextArea、InputNumber组件。 是创建表单列表的入口，主要实现CRUD，以及更新状态的功能。 最初的原因是为了提升开发效率，简单的表单需求可以通过页面的配置直接生成，不需要额外编写代码，就可以实现业务需求。 实质是源于低代…"}, {"id": "6844903633599856654", "title": "做有追求的coder - Redux进阶compose方法的实现与解析", "desc": "这是函数式编程中的方法，为了方便，被放到了 Redux 里。 当需要把多个 store 增强器(中间件) 依次执行的时候，需要用到它。 (arguments): 需要合成的多个函数。预计每个函数都接收一个参数。它的返回值将作为一个参数提供给它左边的函数，以此类推。例外是最右边的…"}, {"id": "6844903509058387976", "title": "对前端状态管理的个人理解", "desc": "前端状态管理请三思 在这篇文章中提到了前端状态管理的一种思路，也就是使用有限状态自动机来管理前端状态。初读时我没有深入思考以至于鲁莽的认为又是一篇描述函数式中的条件执行来替代 switch 的文章，进而给出了想当然的回复，非常不好意思，所以知耻后苦搜索相关的内容，在 React…"}, {"id": "6943568234385768461", "title": "从零搭建React+ts+webpack项目", "desc": "webpack.DllPlugin: 将模块预先编译，在第一次编译时将配置好的需要预先编译的模块编译在缓存中。第二次编译的时候，解析到这些模块就直接使用缓存"}, {"id": "6844903551412502535", "title": "使用Parcel、Typescript、Mobx撸一个简单的React脚手架", "desc": "项目地址：parcel-typescript-react-boilerplate 欢迎批评指正，顺手点个星呗，另外赠送一个代码生成器，根据表结构生成单表的CURD页面，然后根据实际的业务手动修改即可：react-admin-generator 2017年底给开发者最大的惊喜非 …"}, {"id": "6844903508987101197", "title": "玩转 React（六）- 处理事件", "desc": "前面的文章介绍了 React 的 JSX 语法、组件的创建方式、组件的属性、组件的内部状态以及组件的生命周期。另外，还顺带说了各个知识点要重点注意的事情，以及我在项目实践中的一些经验。如果你觉得对自己有帮助，可以通过 玩转 React（一）- 前言 中的文章目录进行阅读。 另外…"}, {"id": "6949372925732454437", "title": "React嵌套组件的构建顺序", "desc": "解决这个问题，首先要从组件挂载开始。下面是一个只有DOM元素的组件 Parent 这里我们可以看到传入组件和元素的差别，同样是渲染一个div元素，在组件中，React分成了两步去构建。那如果传入的是多个组件呢？ 可以看到，子组件Child的构建和父组件是分离的，并且是在父组件构…"}, {"id": "6844903588158783496", "title": "分享一个用 react+flask+scrapy 自建的漫画网站", "desc": "访问localhost:3000 over ..... soul_manga_spider.py定义了三种抓取方式，REQ_TYPE分别对应不同的url类型：单个漫画，单个页面的所有漫画，以及全部漫画。还有一个is_update参数用于表明是否只抓取最近更新的页面url然后做增…"}, {"id": "6844903606399811591", "title": "译：如何构造我的JavaScript文件?", "desc": "看到英文技术文档、快哭了。含着泪也要把他读完。 很多人都在问我怎么写我的JavaScript——好吧，这是一个谎言，没人问我，但是如果他们这么做了，我想指出这篇文章。在使用了多年的PHP之后，在阅读了干净代码(和其他书籍)之后，我在多年中采用了我的代码风格。是的，PHP，不要敲…"}, {"id": "6844903831034134542", "title": "React学习文档阅读（一）", "desc": "你可以放心地在 JSX 当中使用用户输入，React DOM 在渲染之前默认会 过滤 所有传入的值。它可以确保你的应用不会被注入攻击。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS(跨站脚本) 攻击。 Babel 转译器会把 JSX 转换成一个名为 Reac…"}, {"id": "6844903543443308558", "title": "redux-form性能优化", "desc": "组件过多渲染导致! 更改一个输入框导致所有输入框都重新渲染。 下面代码我在FormMembers里遍历了fields，所以FormMembers重新渲染时会导致fields全部重新渲染。"}, {"id": "6844903553073414151", "title": "做个简单的 React-Native application 处理旧书", "desc": "一个简单的 React-Native(0.53) application，只有两页面。 React-Native(0.53) 有些依赖很难下载成功。（翻墙 + 看脸） Icons 下载完，用不了。（react-native link） run ios 不明报错。（删除 ios/…"}, {"id": "6844903501709967367", "title": "采用 gatsbyjs 搭建的 React 新官网", "desc": "快了不少。"}, {"id": "6844904003407446029", "title": "一文学会 React Hooks", "desc": "hooks的出现使得原来要用类声明组件的方式变为函数式声明,原来有状态和无状态,现在一律都为无状态组件了.也让单元测试更加方便.正因为没有了类的声明方式,也就没有了生命周期.但是声明周期是我们一直以来在react非常重要的概念.不管是react还是vue.声明周期一直是很重要的…"}, {"id": "6859550244456267783", "title": "React 一些知识点", "desc": "2、pwa === Progressive web application 渐进式web应用。根据manifest.json来访问 5、class 类中就有一个constructor构造函数。组件在创建时，第一个执行的函数就是constructor函数。 (2)、可以与其他框架…"}, {"id": "6844903602411012109", "title": "RN自定义组件封装 - 拖拽选择日期的日历", "desc": "1. 前言 由于最近接到一个需要支持拖拽选择日期的日历需求，做出来感觉体验和效果都还不错，所以今天想跟大家分享一下封装这个日历组件的过程。 2. 调研开始 由于之前吃过RN在安卓上性能表现不佳的亏，深深地怀疑这东西做出来能在安卓上跑么，尤其是日期要实时地随着手指滑动的位置发生变…"}, {"id": "6906002621429973000", "title": "React源码学习日记01-理念", "desc": "React是用于构建用户界面的JavaScript库,简单来说是一个ui库,用一个函数公式表示为:fn(props)-> UI. 如何解决这些制约? -- React16 采用了 异步可中断更新来解决这些制约."}, {"id": "6844903983669067784", "title": "[译]React核心概念7：列表&keys", "desc": "首先让我们来回顾以下怎么在JavaScript中转换列表。 在下面的代码中，我们使用map()函数让数组中的每一个数字乘2。在这之后我们将通过map()返回的新数组赋值给doubled并将其打印出来： 打印出来的是[2, 4, 6, 8, 10]。 在React中，将数组转换成…"}, {"id": "6844903497196896269", "title": "从0实现一个tinyredux", "desc": "讲真，redux已经很小了，去掉注释代码也就300行吧， 大家可以去读一下， 注释写的也是非常详细了。 redux 更多的是对思维上的变化：数据改变 + 视图更新 二者分开，各自管理自己。 现在，让我们从无到有！！ redux 是这样的一个流程：触发一个action --> r…"}, {"id": "6844903518453645319", "title": "React 整洁代码最佳实践", "desc": "本文主要介绍了适用于现代 React 软件开发的整洁代码实践，顺便谈谈 ES6/ES2015 带来的一些好用的“语法糖”。 整洁代码代表的是一种一致的编码风格，目的是让代码更易于编写，阅读和维护。通常情况下，开发者在解决问题的时候，一旦问题解决就发起一个 Pull Reques…"}, {"id": "6844903957320433672", "title": "React-Hooks 各类函数的用法", "desc": "useState 是 react 自带的一个 hook 函数，它的作用就是用来声明状态变量。 useState 这个函数接收的参数是我们的状态初始值（initial state）， 它返回了一个数组，这个数组的第[0]项是当前的状态值， 第[1]项是可以改变状态值的方法函数。 …"}, {"id": "6844903762234966023", "title": "Concent, born for react -2", "desc": "一个可预测、0入侵、渐进式、高性能的增强型状态管理方案，poweryourreact！点击此处了解更多"}, {"id": "6916844522202726408", "title": "React Context 基本了解", "desc": "当组件所属组件树中没有匹配到 Provider，设置的默认初始值 defaultValue 才会生效。 如果是将 undefined 传递给 Provider 的 value 时，默认初始值 defaultValue 不会生效。"}, {"id": "6894525087723520007", "title": "关于 React setState 的最新理解", "desc": "众所周知，React 提供的 setState() 是一个“异步”执行的函数，为什么要加引号呢？因为 setState() 并不是真正意义上的异步函数，这里的“异步”指的是把多个 setState 合并到一起进行一次性的更新，而不是像 setTimeout() 这类的函数。下面…"}, {"id": "6844903988681261070", "title": "[译]React高级指引7：高阶组件", "desc": "在React中高阶组件(HOC)是用于复用组件逻辑的一种高阶技巧。高阶组件自身并不是React API的一部分。它是基于React组合特性而设计的一种模式。 具体来说，高阶组件就是一个接收组件作为参数并返回一个新组件的函数。 组件将props转化成UI，而高阶组件则将组件转化成…"}, {"id": "6940965853772906527", "title": "React应用mount时全流程解析", "desc": "前端框架React、Vue以及Angular已经三分天下数年。Angular因为版本升级造成的困扰，在国内已经几乎淡出前端人员的视野。可以说在国内是React和Vue在平分天下。而用过React的人都觉得它要比Vue香，它的声明式UI、用JavaScript编写组件间逻辑的灵活…"}, {"id": "6844903648309280782", "title": "React生态渐进系列-React-Router", "desc": "首先,确实很久没有写过文章了,感觉很多东西需要重新梳理一遍,所以首先从React项目的基础生态圈,开始慢慢的梳理这些前端项目的知识点.这次便详细的梳理一下路由的知识点. 提到前端的路由就必须提到单页应用,目前单页应用已经慢慢深入到所有的项目中,除了以前老旧的项目,新的项目基本上…"}, {"id": "6844903573520809998", "title": "走一波react的自测 ", "desc": "每日,每一段时间都在问自己自己干了什么，看一下自己知道什么，希望在不断进步的时候，不断更新。 这是将近大半年的第一次react自测。 PS:有些概念自问自答只是精炼我自己的看法，有不对请大家不吝指出。 没有，函数内部可以使用 async/await 的语法糖。 因为即使是声明为…"}, {"id": "6900066135161438215", "title": "React17升级，消除jsx语法报错", "desc": "本文简单介绍React17升级时，.tsx里jsx语法报错的解决方法。 本文关键词：React17、typescript、jsx。 原因是React17提供了全新的，重构过的jsx转换。当你使用create-react-app创建新的应用，并支持typescript且使用了es…"}, {"id": "6916023220214693895", "title": "深入浅出的学习react[学习笔记3]", "desc": "React 生命周期已经是一个老生常谈的话题了，然而，大多数的入门教材在设计上往往追求的是“简单省事、迅速上手”，这就导致许多人对于生命周期知识的刻板印象为“背就完了、别想太多”。当然“背就完事儿”这样简单粗暴的学习方式，或许可以帮助你理解“What to do”，到达“How…"}, {"id": "6844903504876683277", "title": "React作者的构思和演绎（翻译）", "desc": "我通过这篇文章试图阐述我对React模型的理解，阐述我们是如何用【演绎推导】来帮助我们得到最后的设计。当然，这里有很多的前置条件是有争议的，而且这篇文章中的例子是有缺陷和漏洞。但这是我们正式地去规范化"}, {"id": "6844904072571535373", "title": "疫情在家闲无事，不如学习一门成熟框架（react），自我心得。", "desc": "react如何像vue等框架一样，动态的改变数据， 拿到数据。"}, {"id": "6844903984134619149", "title": "（译）Fiber 架构之于 React 的意义", "desc": "Fiber 架构主要有两个阶段：reconciliation / render（协调/渲染） 和 commit（提交阶段）。在源代码中 reconciliation 阶段通常被划归为 render阶段。 这个阶段 React遍历组件树执行一下工作： 上述所有活动都涉及到 Fib…"}, {"id": "6921722941080076295", "title": "深入浅出的学习react[学习笔记13]", "desc": "我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。 这段话里有 4 个字值得细细品味，那就是“快速响应”，这 4 个字可以说是 React 团队在用户体验方面最为要紧的一…"}, {"id": "6844903630034698254", "title": "webpack 快速构建 React 学习环境（2）-- 热更新", "desc": "上一篇文章 《webpack 快速构建 React 学习环境（1）》中介绍了构建一个最简单开发环境，这里接着完善这个开发环境，让它用起来更加的趁手。 上一节搭建的开发环境不能热加载，每次文件改动后都需要重新编译，手动刷新页面。虽然使用 webpack --watch 命令在文件…"}, {"id": "6844903601530224647", "title": "我很懒,什么都没留下系列 之 教你上手React服务端渲染（React SSR）&& HMR", "desc": "网上关于React的SSR也很多，但都不够详细，有的甚至让初学者一头雾水。不过这篇文章我将一步步详细的介绍，从0开始配置React SSR，让每个看到文章的人都能上手。 接下来，我们先来看看wepack-dev-server 以及 模块热替换(Hot Module Replac…"}, {"id": "6844903496379039757", "title": "ReactNative快速入门笔记", "desc": "如果运行报错，可以文章最后找寻解决方案。 首先需要了解一些基本的React的概念，比如JSX语法、组件、state状态以及props属性。 还需要掌握一些React Native特有的知识，比如原生组件的使用。 你可以新建一个项目，然后用上面的代码覆盖你的index.ios.j…"}, {"id": "6844903680873857032", "title": "Redux专题：中间件", "desc": "Redux暴露非常少的API，优雅的将单向数据流落地。但有这些，Redux的作者Dan Abramov仍然觉得远远不够。一个工具的强大之处体现在它的扩展能力上。Redux的中间件机制让这种扩展能力同样变的异常优雅。 中间件在前端的意思是插入某两个流程之间的一段逻辑。具体到Red…"}, {"id": "6844903496341258247", "title": "重新思考 drag 和 drop", "desc": "先介绍一下 react-beautiful-dnd 拖拽是一个直观地移动和重排方式。我们已经在 Atlassian 的官方仓库上发布了 react-beautiful-dnd，它能够使表单在在网页中的拖放变得更加漂亮、自然和容易。"}, {"id": "6899705486904393735", "title": "useReducer", "desc": "useReducer 是 useState 的替代方案，是 useState 的复杂版。 在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 useRe…"}, {"id": "6844903696346677262", "title": "高级 vue 组件模式 2", "desc": "我们需要实现的需求是能够使使用者通过 <toggle> 组件动态地改变包含在它内部的内容。 熟悉 vue 的童鞋可能马上会想到不同的解决方案，比如使用 slot 并配合 v-if，我们这里采用另外一种方法，利用 vue 提供的 provide/inject 属性按照复合组件的思…"}, {"id": "6844903997904519181", "title": "barm 一个前端微服务的胶水方案", "desc": "其中 WebApp 随着各行各业业务的不断发展，仅仅 SPA 应用已经很难满足现有的迭代开发；各类微服务方案开始被提上议程，其中以 web-components 为基础的微服务方案关注度较高。 barm 是一个渐进式、微服务胶水方案，基于 web-components，并且对 …"}, {"id": "6924198671332409351", "title": "一文看透虚拟DOM(Virtual DOM)", "desc": "虚拟DOM（Virtual DOM）的本质就是一个对象，这个对象有三个属性，tag，attrs，children。们可以用这个对象来表示页面中的节点。 想象一下这样的一个场景，如果我们要在网页中绘制一个表格，我们遍历后端给的数据然后，创建对应的标签插入到页面中，如果此时后端所给…"}, {"id": "6844904178825822222", "title": "react-手把手教你构建一个简单的ssr环境", "desc": "SSR大家都很熟悉，就是服务端渲染，无非就是输出html，但是node不识别jsx、tsx，于是我们需要babel。下面复习下babel。 就两个文件就可以了哈。 但是为啥SSR项目里面都没有业务代码呢，因为我们可以通过node把SPA里面的ssr目录copy过来，然后自动执行…"}, {"id": "6844904126434770952", "title": "做一个单纯的react-image显示组件[with headers]", "desc": "最近项目上有一个需求，在显示图片的时候，需要传递自定义的头部就行认证。google了一番之后，发现没有现成的组件库可以使用【也可能是我没找到】，所以请求图片只能采用xhr方式来异步加载。下面就是在做这个组件库时的一些笔记，主要关注以下两个点： 因为要取到图片的原始尺寸，使用im…"}, {"id": "6857397790633689096", "title": "React Hooks初体验", "desc": "昨天开始学习react，时隔这么久终于学习上了目前应该市场使用率最多的前端框架，之前一直使用vue，当初就告诉自己先熟练使用好一个，先别急着都学，到现在感觉用基本用了不少时间的vue，是时候接触react了，并没有谁高谁低，只有需要，你这个项目需要它你就得学习它，正好公司最近要…"}, {"id": "6844903685378555911", "title": "开始测试React Native App（下篇）", "desc": "在开始测试React Native App（上篇）中编写了redux-upload-queue针对Reducer和Action Creator的单元测试，测试代码可以在这里查阅。这篇文章基于开始测试React Native App（上篇）继续完成集成测试以及E2E测试。 在Ac…"}, {"id": "6951280723063996429", "title": "antd表单onChange阶段未更新", "desc": "antd 表单onchange函数中获取不到最新的数据，通过 setTimeout或官网提供的 normalize 获取最新的值"}, {"id": "6958631222499082270", "title": "Hooks中的useMemo", "desc": "Memo 理解React.useMemo前要先理解React.Memo 先看代码: 渲染结果如下所示，点击按钮update n时，虽然child的值不影响，但是child组件里的log还是被打印出来了"}, {"id": "6844903540490518541", "title": "Mobx 初探", "desc": "更多详细介绍，请移步官网细阅。 可能我们都比较熟悉Redux,简而言之Mobx是比Redux更有力的和React结合使用的助手。"}, {"id": "6981802479767781383", "title": "React：记账本07---自定义Hooks总结", "desc": "项目中自定义Hooks 有三个hooks： useTags useUpdate useRecords 1. useTags 主要是对tags进行处理的逻辑 useState 使用useState初始化"}, {"id": "6844903710833786887", "title": "从人类行为的角度理解状态管理", "desc": "人从出生到死亡走的这段路程，称为生命周期。 应用从启动到关闭经历的这段过程，也称为生命周期——因此这是一个仿生概念，基于相应结构的应用也会有与人类相似的行为特点。 初接触时，我们会为如何去更好的在这个过程中去实践状态管理焦头烂额，纠结于不同架构的各个节点对应的职责，特别是在涉及…"}, {"id": "6937938837582643213", "title": "【个人笔记】重读React官网doc需要注意并记住的点——Hook篇", "desc": "Hook 是 React 16.8 的新增特性。 Hook 不会影响你对 React 概念的理解。 恰恰相反，Hook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。Hook 提供了一种更强大的方式来组合他们…"}, {"id": "6844903506948653063", "title": "精读前后端渲染之争", "desc": "简洁的语言让我们明白什么前后端渲染的优缺点各在哪里，可谓一篇不错的文章"}, {"id": "6844903566516158471", "title": "react.js初学者常见问题，老鸟也可能遇到😅", "desc": "举个栗子：如果您尝试渲染，则React将忽略上述内容，您将收到警告：还有一个更大的问题是当你命名你的组件为button或img时，React会忽略你的组件渲染一个原生的htmlbutton或img注意"}, {"id": "6844903512132976647", "title": "uiw 1.2.17 发布，基于 React 16 的组件库", "desc": "发布， 高品质的UI工具包，React 16+的组件库。 🐞 修复没有代码检测文件匹配*.css。 5712887 🌟 添加 .editorconfig 文件. d82dabf 📝 Tree组件添加文档。 c459fe7 🌟 添加新的组件Tree。 b10f140 🐞…"}, {"id": "6939693704772861959", "title": "动手实现mini React (三)", "desc": "我们将从头开始一步一步重写React。遵循真实的React代码中的架构，但没有所有的优化和非必要的功能。 通过图片，是不是有一种豁然开朗的感觉？把JSX转换为fiber树。我们都知道Concurrent Mode是把我们第一讲中的不可中断的递归变为异步可中断方式去处理每一个节点…"}, {"id": "6904604081680547847", "title": "React V17.0源码 学习笔记(一)", "desc": "调用 legacyCreateRootFromDOMContainer(contaiber,forceHydrate) 初始化 root。 将 root 赋值给 container._reactRootContainer,取出 root 中的_internalRoot 作为 f…"}, {"id": "6844903704890441735", "title": "我们为什么需要 lock 文件", "desc": "从 Yarn 横空出世推出 lock 文件以来，已经两年多时间了，npm 也在 5.0 版本加入了类似的功能，lock 文件越来越被开发者们接收和认可。本篇文章想从前端视角探讨一下我们为什么需要 lock 文件，以及它的一些成本与风险，当然其中一些观点对于后端也是适用的。 软件…"}, {"id": "6955100189271015455", "title": "（一）撸起袖子就是干 - 先把项目跑起来", "desc": "什么都不想，先搭建前后端项目并实现通信。 前端项目：create-react-app 后端项目：express-generator"}, {"id": "6844903704512970765", "title": "react -> antd （Table 与 Cascader 平级数据转树形实操）", "desc": "如果你刚开始学习前端或者 React，将 UI 框架作为你的第一步可能不是最好的主意。 (这是引用antd官网的一句话)，虽然说一开始用antd作为UI框架对新手来说并不是很好，但是如果工作需要呢，那就不得不这样做了。 下面我就挑两个常用而且对新手稍微有点难度组件来进行讲解，分…"}, {"id": "6939797635846897695", "title": "React全家桶-03-react中的路由", "desc": "直接上代码，欧哒欧哒欧哒..."}, {"id": "6844904085313814536", "title": "React源码解析之HostComponent的更新(下)", "desc": "前言：在上篇React源码解析之HostComponent的更新(上)中，我们讲到了多次渲染阶段的更新，本篇我们讲第一次渲染阶段的更新一、HostComponent(第一次渲染)作用：(1)创建DOM"}, {"id": "6844903669981249544", "title": "React Native开发封装Toast与加载Loading组件", "desc": "在App开发中，我们避免不了使用的两个组件，一个Toast，一个网络加载Loading，在RN开发中，也是一样，React Native官方并没有提供者这两个常用组件，需要开发者自己根据需求来自定义。作者就在其他组件的基础上在进行二次封装，使用起来更加简单，更具扩展性，同学们只…"}, {"id": "6844904036831854605", "title": "你还不懂的React高阶指引？", "desc": "在这里我们有一个mouse组件，可以监测到鼠标的位置，然后我们引用了这个组件，在外面加个一个h1标题，但我们还是没能去改变mouse组件里面的内容，如何渲染mouse组件出p之外的内容，我们继续往下看，举个例子，假设我们有一个 <Cat> 组件，它可以呈现一张在屏幕上追逐鼠标的…"}, {"id": "6844903569653497864", "title": "React 全新的 Context API", "desc": "Context API 可以说是 React 中最有趣的一个特性了。一方面很多流行的框架（例如react-redux、mobx-react、react-router等）都在使用它；另一方面官方文档中却不推荐我们使用它。在 Context API 的文档中有下面这段话： The …"}, {"id": "6844903502594981902", "title": "实战react技术栈+express前后端博客项目（5）-- 前后端实现登录功能", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 接上篇，我们登录界面已经画完了，登录功能，涉及到异步请求。所以大致我需要需要如下几个action。请求发起action，请求结束action，错误…"}, {"id": "6844903969488125965", "title": "React踩坑笔记 —— 差分算法（一）", "desc": "React提供了声明式的API，以至于我们不需要担心每次更新具体发生了什么更改。这使得我们开发应用变得很容易，但始终无法清楚React内部是如何实现的。本文解释了在 “差分算法” 中如何做出选择，使得组件更新，在足够快的高性能应用中仍然可以预测。 万变不离其宗，对于一个HTML…"}, {"id": "6844903961531547655", "title": "React源码解析-任务调度（二）", "desc": "上篇分析了组件的初始化，原本想把挂载方式也一块解析下，发现这挂载嵌在了任务调度的最后一个环节，而这任务调度实属复杂，本篇就浅析一下这个任务调度。 推出之前，React 用的是 Stack Reconciler，它是自顶向下递归渲染及更新的，持续占用主线程并且是无法中断的，主线程…"}, {"id": "6844903519984582663", "title": "Redux 的简化版本 unistore", "desc": "Preact 的作者在简化 React 以后，现在又推出了 Redux 的简化版本 unistore，简化得非常漂亮，大爱！"}, {"id": "6844903813753602061", "title": " react之bind函数到组件通识篇", "desc": "在说起react的函数绑定之前，我们有必要了解下bind函数的作用是什么，函数的执行的上下文以及其默认的this是指向的哪里？有点抽象？那么你可以去看下下面的两个方法的执行会有什么区别吧。 如果你猜不出结果，可以看下我的codePen链接：链接,这是为什么呢？这是因为上下文不同…"}, {"id": "6844903685403705358", "title": "react-native第二弹来了！", "desc": "这里涉及到比较常用的几个api：navigate，goback，reset以及携带参数的页面跳转。接下来我们详细了解一下我如何使用这几个API。 这里涉及到一个问题，如果我们到了某个页面并不想让他回去呢？即要将当前页面设为初始页面，这时候要用到reset了。我简单封装了一下。 …"}, {"id": "6844903585323417614", "title": "[译] 使用 React、Redux 和 SVG 开发游戏 — Part 1", "desc": "TL;DR: 在这个系列里，您将学会用 React 和 Redux 来控制一些 SVG 元素来创建一个游戏。通过本系列的学习，您不仅能创建游戏，还能用 React 和 Redux 来开发其他类型的动画。您可以在这个 GitHub 仓库: Aliens Go Home - Par…"}, {"id": "6844903561013231630", "title": "基于 React + Webpack 的音乐相册项目（上）", "desc": "1、安装 npm，安装成功后，在终端输入 npm -v 可以查看它的版本。 安装完成之后，输入npm list --depth=0 -global 可以查看版本。 imageDatas.json 里面的代码请参照项目的源代码。 4、根据图片的文件名，生成图片URL。 主要的代码…"}, {"id": "6844903585306640398", "title": "[译]在JavaScript中创建WebAssembly模块实例", "desc": "WebAssembly是在Web上运行代码的新方法。有了它，你可以用 C/C++ & Rust 等语言编写模块，并在浏览器中运行它们。 但是，目前模块无法独立运行。随着浏览器对ES模块化的支持，预计会发生变化。一旦到位，WebAssembly模块将或许可以能够与其他ES模块使用…"}, {"id": "6844903665187160078", "title": "读Redux源码02 - createStrore", "desc": "Redux的核心功能基本都在 createStrore 中，我们使用Redux也由此方法开始，可以说是最为重要的一个方法，下面我们就来了解一下createStore究竟是怎么工作的。 reducer (func) 纯函数，接收当前状态树 state 和 发起的 action 两…"}, {"id": "6844903501290536968", "title": "玩转 React（二）- 新型前端开发方式", "desc": "这是《玩转 React》系列的第二篇。在该篇中，我们来了解下，React 的出现到底给我们的开发方式带来了什么样的变化。 我的感触可以用一个字来形容，爽！主要爽在以下两个方面。 React 是一个视图层的框架，所谓视图层就是我们在网页上能看到的部分。在传统的方式中，我们通过编写…"}, {"id": "6844904051713245198", "title": "打造一个 redux 数据流方案 --- 名为 demacia", "desc": "目的：打造一个简单的 redux 数据流方案，实现功能类似与 dva，但仅仅只是对 redux 进行封装，简化 redux 使用流程和难度。最终目的肯定是为了提升开发效率和加深自己对 redux 源码的理解能力和运用能力 仓库名称叫 demacia，有没有熟悉的既视感，对，就是…"}, {"id": "6844903605728706568", "title": "react中使用swiper", "desc": "最近的react项目需要使用轮播图，自然而然的就想到了swiper，一直想通过npm安装的方式来使用，但是网上找了很多，资料很少，于是就暂时通过在index.html里直接引用swiper的js和css文件的方式来加载，下面来说一下具体的步骤和使用方法。 首先说一下我这里使用的…"}, {"id": "6915036451436494856", "title": "从 React Refs 说起", "desc": "Refs一个专业术语提供了一个可访问DOM或React元素的方式简单点说，提供了可手动获取并直接操作DOM的方式比如input元素聚焦文件上传功能等而干活的是ref属性ClassComponent类组"}, {"id": "6844903588867604487", "title": "[译] How to NOT React：React 中常见的反模式与陷阱", "desc": "什么是反模式？反模式是软件开发中被认为是糟糕的编程实践的特定模式。同样的模式，可能在过去一度被认为是正确的，但是现在开发者们已经发现，从长远来看，它们会造成更多的痛苦和难以追踪的 Bug。 作为一个 UI 库，React 已经成熟，并且随着时间的推移，许多最佳实践也逐渐形成。我…"}, {"id": "6844903676914614286", "title": "从源码看React异常处理", "desc": "这个阶段主要做的工作拿到reconciliation阶段产出的所有更新工作，提交这些工作并调用渲染模块（react-dom）渲染UI。完成UI渲染之后，会调用剩余的生命周期函数，所以异常处理也会在这部分进行 我们现在可以知道，React内部其实也是通过 try...catch.…"}, {"id": "6904830810168229896", "title": "React 学习之 Hooks", "desc": "当我们希望用函数组件代替 class 组件时将面临两个问题。 那么 React v16.8.0 推出了 Hooks API 用来解决以上问题。 表示引用一个状态，第一个参数用来读，第二个参数用来写。 其实就是 setN 把新值放到一个储存点， useState 会去储存点取新值…"}, {"id": "6844903730475696135", "title": "[英] React 是如何通过一个函数分辨 Class 的？", "desc": "(Until recently, that was the only way to use features like state.) When you want to render a <Greeting />, you don’t care how it’s defined…"}, {"id": "6924935585232748552", "title": "关于React你需要知道的13件事 - aimforsimplicity.com", "desc": "我已经使用React一年多了。我也正在进行培训，帮助人们从头开始学习Redux。 我注意到，在每次训练中，我一遍又一遍地解释着一些相同的概念。 如果你想“谈论React”的话，我认为这些概念是必不可少的。如果你正处于学习的中间阶段，你可能有兴趣阅读这篇文章。 Angular或E…"}, {"id": "6844903534941437960", "title": "杂谈 CSS IN JS", "desc": "关注点分离（separation of concerns）原则多年来大行其道，实践中一般将 HTML、CSS、JavaScript 分开编写维护，早期框架 angularjs 即是如此，直到 React 争议中问世，引领关注点混合趋势，驱使开发者重新审视 CSS 工程化发展。 …"}, {"id": "6904198921686679565", "title": "深入分析react scheduler", "desc": "scheduler模块react为了实现fiber架构新增的一个模块，主要用来实现任务的拆分和调度执行。 scheduler是一个独立的模块，暴露了一些任务调度相关的方法，可以直接调用。 scheduleCallback可以认为是 scheduler 的入口方法，用于添加任务。…"}, {"id": "6844903506860572685", "title": "手把手教你为 React 添加双向数据绑定（二）", "desc": "0. Something To Say 该系列文章计划中一共有三篇，这是第二篇。在这三篇文章里我将手把手教大家使用 Babel 为 React 实现双向数据绑定。在这系列文章你将： 该系列文章实现的 babel-plugin-jsx-two-way-binding 在我的 Gi…"}, {"id": "6890022665621667847", "title": "React源码解读 | React.PureComponent原理篇", "desc": "前言PureComponent通过浅比较props和state来防止页面不必要的渲染，本文是原理篇，通过React源码，解读PureComponent中浅比较规则的具体实现版本react 16.6.1"}, {"id": "6844903545544835080", "title": "ES5和ES6的this", "desc": "整理一下javascript（包括ES3、ES5、ES6）中的this问题。 在ES 6，我们大部分函数的写法都是使用箭头函数(arrow function)，它的this不同于ES 5。 谢谢阅读，如有谬误，恳请斧正。"}, {"id": "6844903630596767757", "title": "精读《React 的多态性》", "desc": "本周精读的文章是：surprising-polymorphism-in-react-applications，看看作者是如何解释这个多态性含义的。 读完文章才发现，文章标题改为 Redux 的多态性更妥当，因为整篇文章都在说 Redux，而 Redux 使用场景不局限于 Rea…"}, {"id": "6844903598015397901", "title": "探索 Redux4.0 版本迭代 论基础谈展望（对比 React context）", "desc": "Redux 在几天前（2018.04.18）发布了新版本，6 commits 被合入 master。从诞生起，到如今 4.0 版本，Redux 保持了使用层面的平滑过渡。同时前不久， React 也从 15 升级到 16 版本，开发者并不需要作出太大的变动，即可“无痛升级”。但…"}, {"id": "6917448534258089998", "title": "React- Fiber架构", "desc": "JavaScript是单线程的，浏览器是多线程的。对于多线程的浏览器，除了要处理JavaScript线程以外，还需要处理包括事件系统、定时器/延时器、网络请求等各种各样的任务线程。其中，包括负责处理DOM的UI渲染线程。JavaScript线程是可以操作DOM的。 如果渲染线程…"}, {"id": "6844903503442214926", "title": "[译] Javascript 中多样的 this", "desc": "本文将尽量解释清楚 JavaScript 中最基础的部分之一：执行上下文（execution context）。如果你经常使用 JS 框架，那理解 this 更是锦上添花。但如果你想更加认真地对待编程的话，理解上下文无疑是非常重要的。 我们可以像平常说话一样来使用 this。例…"}, {"id": "6972531156403585037", "title": "React Hooks总结记录", "desc": "为什么要有React Hook 组件很难复用状态逻辑 复杂组件难以理解，尤其是生命周期函数 React组件一直是函数，使用Hook完全拥抱函数"}, {"id": "6844903920326672392", "title": "一步步发布自己的npm包", "desc": "做开发也有段时间了，一直在github上找寻别人发布的包，运用到自己的项目中。但是一直对怎样制作npm包，以及发布，和最后安装使用上的整个流程不了解。趁着最近项目上线，刚好有空闲时间可以搞个demo玩玩。 最新的一个项目是Vue+element-ui，要不就做一个自己的UI框架…"}, {"id": "6844903505400954888", "title": "React框架16版中的错误边界", "desc": "React框架16版已经出了，许多变化令人兴奋。其中有一个功能让我感到兴奋，那就是改良过的错误处理方法。之前的版本在渲染网页过程中，如果发生了运行时错误，那整个React框架就会处于一种被破坏的状态。"}, {"id": "6844903940174118919", "title": "React Hook 实战指南！（1）", "desc": "Hook是React在16.8以上版本新增的API，此概念一出就引起界内强烈的反响，尤大大也悄咪的整出了vue-hook来跟风一波。 构造类组件有一定的难度，尤其是生命周期在16.4版本更新后，不仅钩子函数难以掌握（名字都老长了，还新增了static静态方法来充当钩子函数），生…"}, {"id": "6844903613676912647", "title": "React 快速上手 - 10 类型检查 PropTypes", "desc": "如果父组件没有设置并传入 name ，defaultProps 将确保 this.props.name 将有一个默认值。"}, {"id": "6844903976748449800", "title": "Hyrule - electron app 开发实践", "desc": "electron分为主进程(main)和渲染进程(renderer)，主进程可以跟操作系统打交道，渲染进程可以说跟页面打交道(webapp)，因此只需要在主进程创建一个window来跑页面即可。 github仓库分为了public和private, 而public仓库的文件可以…"}, {"id": "6844903864429182990", "title": "react源码浅析(六)：多次执行setState的更新机制", "desc": "注意本文将与之前的文章2-6-2、对类组件执行updateClassComponent紧密相关。 回顾类组件的实例化，给出一些setState相关的准备工作。 。 setState是依赖enqueueSetState来执行更新的,enqueueSetState代码在下面的分析中…"}, {"id": "6844903711534383117", "title": "本地动态mock方案探索", "desc": "说到前端开发中的mock，即假数据，我们都知道它是用来解决前端开发的闭环调试或测试用的一种技术手段，就是当真正的服务端api没有开发完成，只有接口文档的情况下前端可以先行完成功能开发和测试。mock方案既可以放在服务端，也可以放在本地。 服务端的mock通常需要专门开启一个mo…"}, {"id": "6844903847710703629", "title": "React JsBarcode使用", "desc": "百度,google搜了一下,发现很多教怎么用的,就是没有封装组件的. 实际这个东西,用起来还是很简单的. 今天正好封装了个组件. 今天算是写react的第三个月了.react还是比较好上手的. 这种用classname找的方法.感觉不好. 这种有点不明白.看起来也不是想要的. …"}, {"id": "6926191246126006285", "title": "前端学习笔记（二十五）--懒加载", "desc": "1. setState 的批处理 react 会把一次更新中触发的所有 setState 合并起来一起渲染，而不是先改变第一个 state，重新渲染一次，再改变第二个 state，再重新渲染一次。 因此 setState 表现为异步。 2. redux 中的 dispatch …"}, {"id": "6844904162124103693", "title": "React Hooks的花样玩法", "desc": "React Hooks是react 最新的编程范式，我们可以容易地写出更加简单和可扩展的代码。最近看了jsconf(https://www.youtube.com/watch?v=J-g9ZJha8FE)的会议分享后，觉得有很多代码实现思路都可以在自己的项目中借鉴，所以根据自己…"}, {"id": "6844903496727134221", "title": "去哪儿网迷你React的研发心得", "desc": "去哪儿网迷你React是年初立项的新作品，在这前，去哪儿网已经深耕多年，拥有QRN（react-native的公司制定版），HY（基于React的hybird方案）， yo(基于React的移动UI库)，QRN-web(基于React的三端合一移植方案)，此外，像机票等部门也大规"}, {"id": "6844903880464007175", "title": "浅析状态管理库 - mobx的原理以及 仿写自己的状态管理库", "desc": "mobx 是一个非常优雅的状态管理库，具有相当大的自由度，并且使用非常简单。 mobx还有一个很唬的能力就是执行时的依赖收集，他能知道你在autorun，computed中使用了哪些数据，并在数据变动后触发执行。 可以看到当前的observable被存进derivation中，…"}, {"id": "6935718934490546184", "title": "react17中的concurrent mode(并发模式是什么样的)", "desc": "​ 视频课程的目的是为了快速掌握react源码运行的过程和react中的scheduler、reconciler、renderer、fiber等，并且详细debug源码和分析，过程更清晰。 ​ react17开始支持concurrent mode，这种模式的根本目的是为了让应用…"}, {"id": "6844903696359227399", "title": "了解一下Refs", "desc": "refs是React组件中非常特殊的props，可以附加在任何一个组件上。组件被调用时会新建一个该组件的实例，而refs就会指向这个实例。 在react\\lib\\ReactBaseClasses.js文件中，可以看出每个组件都存在refs属性。 想要获取当前React组件的实例…"}, {"id": "6844903497012363272", "title": "WordPress+React+dva 打造单页面博客", "desc": "由WordPress提供json(安装插件JSON API),React做前端视图,这意味着你可以继续使用WordPress强大的CMS管理系统. 不需要修改WordPress就可以使用使用. WordPress 后台演示 账号 guest 密码 guest (会定时清理数据库…"}, {"id": "6844903601094000648", "title": "快速在create-react-app框架添加sass支持", "desc": "一开始参考官网文档，添加sass语法的支持，adding-a-css-preprocessor-sass-less-etc，折腾半天，但是程序并没有按照预期执行，虽然可以监听到改变，但是页面的样式并没有应用上。 登陆按钮的样式并没有应用上设置的样式。 OK，已经正确显示了。 但…"}, {"id": "6844903510207627277", "title": "React.js 小书 Lesson4 - 前端组件化（三）：抽象出公共组件类", "desc": "这个是一个组件父类 Component，所有的组件都可以继承这个父类来构建。它定义的两个方法，一个是我们已经很熟悉的 setState；一个是私有方法 _renderDOM。_renderDOM 方法会调用 this.render 来构建 DOM 元素并且监听 onClick …"}, {"id": "6844903639048273927", "title": "浅谈前端响应式设计（二）", "desc": "Observable是一个集合了观察者模式、迭代器模式和函数式的库，提供了基于事件流的强大的异步处理能力，并且已在 Stage1草案中。介绍的 Rxjs是 Observable的一个实现，它是ReactiveX众多语言中的 JavaScript版本。 在 JavaScript中…"}, {"id": "6844904120864751623", "title": "React服务端渲染（二）", "desc": "意思是让前后端路由保持一致或存在某一对应关系，访问一个地址之后，前端路由和后端路由能够相对应上，保证渲染的组件一致，保证数据一致。 这就是打开一个网页的路由流程图。 前后端路由的匹配方法react-router已经给出，match方法。 这是一个中间件，每次对后端的请求都会走这…"}, {"id": "6859559340320882695", "title": "CyanX 基于ReactHook的状态管理器，遵循函数式编程的理念，极简、可扩展设计哲学，1分钟上手", "desc": "CyanXCyanX是一款基于ReactHook的，针对函数式组件的极简、可扩展的状态管理器设计哲学——任何状态，无论在哪都应该简单快速地获得特性极简，1分钟上手，两行代码无限层级叠加，告别组件之间复"}, {"id": "6844903583104630792", "title": "前端每周清单第 56 期: D3 5.0，深入 React 事件系统，SketchCode 界面生成", "desc": "前端每周清单专注大前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 D3 5.0: D3 5.0 作为大版…"}, {"id": "6844903785068757006", "title": "循序渐进DIY一个react（三）", "desc": "在正式进入实现之前，我们先来了解一下几个概念。首先，“映射”这个概念已经在“第一篇文章里”里面介绍过了，这里就不在赘述了。我们来讲讲这里所说的“整树”和“协调”到底指的是什么？ 熟悉react的读者都知道，完整的react应用是可以用一颗组件树来表示的。而组件树背后对应的归根到…"}, {"id": "6844903590679543815", "title": "我们一起来分析Redux源码", "desc": "最近做项目遇到了一些复杂数据处理，侧面体会到一个良好的数据层设计对一个项目的稳定性和可维护性是多么的重要。于是想以源码分析的方式总结一下当前的数据管理方式，首选redux。 我们可以通过Redux 的官方文档来了解其设计思想。http://cn.redux.js.org/. 本…"}, {"id": "6844903501592526855", "title": "React.PureComponent 配上 ImmutableJS 才更有意义", "desc": "这是我在 React V15.3.0 刚发布的时候写的一篇文章，现在还有借鉴意义。当时刚添加 PureComponent，好多同学以为有了这个就不用考虑性能问题了，实际上因为 React 检查 state 变化的原理，很多情况虽然数据没变但是依然会重新渲染。"}, {"id": "6844903624678572046", "title": "浅谈前端响应式设计（二）", "desc": "上一篇博客提到了几种响应式的方案，以及它们的缺点。本文将介绍Observable以及它的一个实现，以及它在处理响应式时相对于上篇博客中的方案的巨大优势（推荐两篇博客对比阅读）。 Observable是一个集合了观察者模式、迭代器模式和函数式的库，提供了基于事件流的强大的异步处理…"}, {"id": "6844903501340868622", "title": "开源库：最大化重用代码 react-nativeish", "desc": "Intended for use with redux-sagas, but they are not installed by default (*blueprints for sagas are installed.) jest with enzyme Dependenci…"}, {"id": "6844903693129629704", "title": "借助 Turbolinks 实现不间断的网页音乐播放器", "desc": "在网页切换时要想实现音乐播放器的不间断播放，常见的有这么几种解决方案：SPA，pajax，iframe。 以上这几种我都没用过，所以今天只介绍我自己在项目中尝试的一种解决方案，用 Turbolinks。这种方案可用于传统的非前后端分离的网站。 先来了理解一下 Turbolink…"}, {"id": "6844903648196034573", "title": "Redux源码浅析", "desc": "state 在什么时候，由于什么原因，如何变化已然不受控制。 通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。 使用纯函数来执行修改 纯函数意味着依赖单一，我们只需要派发一个用于描述state变化的action即可。 这让时间旅行、记录和热更新成…"}, {"id": "6844903581477240846", "title": "[英] 用ConditionerJS懒加载JS模块", "desc": "LinkingJavaScriptfunctionalitytotheDOMcanbearepetitiveandtedioustask.Youaddaclasstoanelement,findall"}, {"id": "6844903762398560263", "title": "「每日一瞥 📰 」0107 ~ 0111", "desc": "React.lazy + Suspense 可以检测到组件树中的所有懒加载的组件，并根据其加载状态调用 fallback。其中的实现原理与 React Error Boundaries 是类似的，而 React Error Boundaries 的实现原理又与 try-catc…"}, {"id": "6844903733659172872", "title": "起始：React 项目构建的最小单元", "desc": "我很喜欢 JSX ，它的灵活性给我带来了足够的想象力，但是从优化的角度来说，它也并没有像 Template 那么好处理，可我依然喜欢它。这是一篇从零开始入门 React 的小书，没有华丽的词藻，只是用心为初学者提供一份可读的参考，如有兴趣的话，不妨听我娓娓道来。 在构建一个 R…"}, {"id": "6844903576880300045", "title": "一个 react 的小项目方便查看 github 上的笔记", "desc": "平时写了一些笔记放在 github 上，为了能够手机随时查看，故写了这个小项目，如果大家喜欢，希望大家 star 下，感谢大家支持。另外，本人觉得该项目不适合新手作为 react 系列学习，请另找其他优质项目。 一个基于 GitHub Pages 和 GitHub Api，无需…"}, {"id": "6844903614243143693", "title": "扬帆起航：从命令式编程到函数响应式编程", "desc": "首先，我认为前端开发做好2件事情就够了：**1.渲染界面，2.根据用户输入渲染界面。**其中渲染界面可以利用React之类的库来完成，它们提供了一种从state映射到view的方式，你只需要管理好state即可，渲染view的工作丢给它们去完成。而根据用户输入渲染界面这部分会比…"}, {"id": "6844903901531996167", "title": "了不起的Virtual DOM(二): 使用TypeScript开发简易Virtual DOM库", "desc": "首先欢迎大家关注、点赞、收藏我的掘金账号和Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。之前的文章我们介绍了MV*框架的历史以及React引入Virtual DOM所带来的新的解决思路，俗话说，百闻不如一见，百见不如…"}, {"id": "6844903758325891080", "title": "React入门系列 - 2 编写第一个Hello world的React程序", "desc": "create-react-app项目 [点击前往Github] 是facebook推出的入门初始化项目，适合新手第一次使用，无需进行各种配置，完美的实现了开箱即用理念。 npx命令是npm在5.x版本之后推出的一个增强功能，它帮助开发者可以临时下载项目进行执行之后，会自动删除这…"}, {"id": "6844903630579957774", "title": "从闭包函数的变量自增的角度 - 解析js垃圾回收机制", "desc": "感觉每一道都可以深入研究下去，单独写一篇文章，包括不限于闭包，原型链，从url输入到页面展示过程，页面优化，react和vue的价值等等。 因为times变量一直被引用，没有被回收，所以，每次自增1。 按照JavaScript里垃圾回收的机制,是从root(全局对象)开始寻找这…"}, {"id": "6844903519716114445", "title": "【译】React 应用性能调优", "desc": "作为一个 web app 来说，它的代码量是非常小的，大概只有 10,000 行。这是一个基于 Webpack 的 React/Redux 应用，有一个比较轻量的后端 Node 服务(基于 Express 和 MongoDB)。我们 90% 的代码都在前端。在 Github 上…"}, {"id": "6844904002069463048", "title": "React.js 新手快速入门 - 进阶篇", "desc": "你可以理解为是懒加载，就是在需要的时候才加载组件插件。配置步骤如下： 同学们可以自己对着项目修改调试。 在React里已经有了HOC（Higher-Order Components）的概念,也就是高阶组件，高阶组件其实是返回另外一个组件，产生的新的组件可以对属性进行包装，甚至重…"}, {"id": "6940822422887071752", "title": "扫清dva的知识盲点", "desc": "仅有 5 个 API，其用法我们会在之后详细介绍。 支持 HMR，支持模块的热更新。 支持 SSR (ServerSideRender)，支持服务器端渲染。 支持 Mobile/ReactNative，支持移动手机端的代码编写。 支持 TypeScript，支持 TypeScr…"}, {"id": "6844903685097537544", "title": "打包优化实践(如何Code Spliting)", "desc": "介绍了三种 Code Spliting 的方法并进行实践。"}, {"id": "6979029904318791693", "title": "实现react createElement所遇见的问题", "desc": "最近在深入理解reactJs的底层原理，但是在实现createElement API遇见问题，希望寻求帮助与解惑。"}, {"id": "6844903606009724936", "title": "维护百万级别JavaScript代码量的项目是一种什么样的体验?", "desc": "2016年我在Facebook的Reactteam实习，当时做的项目之一是deprecate`React.createClass`这个API在FB内部的使用。我用几周时间写了一个codemod(rea"}, {"id": "6913057684346880008", "title": "React 算法之栈操作", "desc": "来自 wiki 上的解释: 堆栈(stack)又称为栈或堆叠, 是计算机科学中的一种抽象资料类型, 只允许在有序的线性资料集合的一端(称为堆栈顶端top)进行加入数据(push)和移除数据(pop)的运算. 因而按照后进先出(LIFO, Last In First Out)的原…"}, {"id": "6844903722154196999", "title": "React 16.x折腾记 - (8) 基于React+Antd封装选择单个文章分类(从构建到获取)", "desc": "拓展部分我们需要的东东,有兴趣的瞧瞧,没兴趣的止步.. 不对之处请留言,会及时修正.谢谢阅读."}, {"id": "6844903545288785928", "title": "react一键式脚手架，喜欢vue-cli的coder可以看过来", "desc": "store下工厂化store，redux-thunk实现异步，返回function类型的可变action,redux-logger开启日志服务。"}, {"id": "6946078192062955534", "title": "【避坑指“难”】ant-desigh+prolayout布局，修改面包屑的分隔符，百度搜遍了都找不到办法，今天终于解决了", "desc": "ProComponents前端小伙伴对此是又爱又恨啊，一些属性配置实在隐藏的太深了，搜索引擎翻了个遍，难道全世界只有我想改面包屑的分隔符吗，简直是难为胖虎。 到这里，开篇的那张图的面包屑就实现了。 接下来就开始改面包屑的“瞎子摸鱼游戏”。 俗话说的话，想解决问题，就追溯到问题的…"}, {"id": "6844903582106386446", "title": "webpack v4 从dev到prd", "desc": "Node.js 4 is no longer supported. Source Code was upgraded to a higher ecmascript version. development 模式给你极致的开发体验，包含浏览器调试相关工具，极快的增量编译，丰富全面…"}, {"id": "6844903863003119624", "title": "13行代码实现状态管理工具", "desc": "本文需要先行了解 Hooks 的基础知识。 React 状态管理实现有两种，一种是 Flux 架构的，例如 Redux，其通过 Context 实现全局状态共享；另一种是响应式的，例如 Mobx，通过可观测对象和 HOC 实现状态共享。 在 Hooks 出来后，之前的通过 pr…"}, {"id": "6844903503417049101", "title": "实战react技术栈+express前后端博客项目（7）-- 前端管理界面用户查看功能+后端对应接口开发", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 常规操作，这里之所以保存了pageNum状态树以及list信息，是为了防止每次进入页面都需要重新获取下数据。做一个缓存的优化。 界面编码部分比较简…"}, {"id": "6949349219308142599", "title": "从shouldComponentUpdate看React性能优化", "desc": "先来看个问题：当组件改变（状态、属性或其他）时，其子组件会重新渲染吗？解答过程：这里需要分三种情况一、当组件的props改变时在官网中可以看到，一个组件就像是一个函数，接受props作为参数，返回一个"}, {"id": "6844903762738282510", "title": "【译】手摸手写一个你自己的 React Router v4", "desc": "我还记得我最初开始学习前端路由时候的感觉。那时我还年轻不懂事，刚刚开始摸索SPA。从一开始我就把程序代码和路由代码分开对待，我感觉这是两个不同的东西，它们就像同父异母的亲兄弟，彼此不喜欢但是不得不在一起生活。 在过去的几年里，我有幸能够将路由的思想传授给其他开发人员。不幸的是，…"}, {"id": "6844903622212321288", "title": "从零开始React项目架构(五)", "desc": "作为一个项目而言，单元测试应该是必备的一部分，也是最容易被大家忽略的一部分，这篇文章就介绍一下jest 和 enzyme。 这篇文章我们介绍了在项目中加入单元测试, 简单写了一些测试例子。"}, {"id": "6844903921031315464", "title": "如何把 alibaba Rax 组件转换到 React 下", "desc": "这一套开发体系，看起来很完美，一次开发，三端运行。但是真实在开发的时候，就不是这么完美了。由于毕竟是跑在 weex 上的，而不是浏览器。所以在开发方式上也很难直接从 web 端的开发方式平移过去，为了实现跨端运行，所以在样式上只实现了 Css 的子集， DOM API 也是如此…"}, {"id": "6844903798406643725", "title": "用Jest和Enzyme测试React组件", "desc": "测试是应用生产过程中不可缺少的一个环节，开发人员在编码时总有考虑不周全或者出错的情况，而测试则是通过对比实际结果与预期结果来找出问题和缺陷，从而确保软件的质量。本文主要介绍了在最近在工作中用Jest和Enzyme来测试React 组件的过程和容易踩坑的地方。 单元测试： 测试单…"}, {"id": "6844903631192326151", "title": "Retalk，Redux 从未如此简单", "desc": "Retalk 是 Redux 的一个最佳实践，简单、流畅而智慧。 极简 Redux 实践：只需要 state 和 actions，简洁清晰。 只有两个 API：createStore 与 withStore，再无其它繁杂概念。 异步引入 model：对 models 进行代码分…"}, {"id": "6844903586892251144", "title": "我们来一步一步分析koa2的源码🙂", "desc": "最近想做一个关于NodeJS 服务端相关的总结，思前想后觉得可以从源码分析作为切入点。于是首先便选择了koa2. 注：由于书写习惯原因 ，下文中所有出现koa的字眼 皆指的是koa2.x版本。如果是1.x版本则用koa1.x标明。 https://github.com/koaj…"}, {"id": "6844903958926868487", "title": "React.lazy与bundle-loader?lazy", "desc": "React 16已经出一段时间了，React 16.6中新推出的 React.lazy 不知道大家是否已经开始使用？它与以前webpack中用的 bundle-loader?lazy 又有什么区别？希望这篇文章能够分享清楚。 我们都知道单页应用中，webpack会将所有的JS、…"}, {"id": "6844904166008045582", "title": "用React写一个简单的todoList", "desc": "初学React，方式无外乎是去慢慢的啃官方文档，就和啃一个白馒头一样，不配点料的话早晚会把自己噎死。 所以边啃文档再抹上点demo就很有必要，既能助消化，也能回味无穷。 这是一个很常见的demo，功能就是简单的增删操作，但里面包含了React中诸多概念，事件处理、条件渲染、列表…"}, {"id": "6977203911799406628", "title": " React-render阶段——completeWork", "desc": "递归阶段的归阶段, `completeWork`的目的就是为了创建好对应的`dom`节点插入对应的父级节点的`dom`节点, 为其添加副作用标识, 再`commit`阶段将对应的节点展示到页面上并执行"}, {"id": "6844904032914374663", "title": "React组件惰性渲染浅析", "desc": "惰性渲染其实是一种渲染优化方式之一，简单来说一个React组件，比如Drawer抽屉组件，开始是抽屉是不显示的，也就是说visible这个prop如果初始为false的话，那么在render里就return null，也就是说这个抽屉组件就不渲染，dom树中就没有对应的结构。然…"}, {"id": "6866808176851976199", "title": "从Vue到React/Redux的学习，小黑的我一步一步过来", "desc": "我学习react的时间并不长，如果下面有讲得不好，希望大家指点一下，谢谢了。 讲Vue和React的区别的文章太多太多了，这篇文章主要也不是讲这个的，就随便说说。 至于使用Vue还是使用React，这个见仁见智。喜欢哪个就用哪个（其实是公司用哪个你就得用哪个）。Vue学习起来比…"}, {"id": "6844903877666406413", "title": "React单页应用中使用react-router-v4自定义页面离开确认弹框的方法", "desc": "产品需求是在某个页面表单有信息输入或变更，用户未保存要离开该页面时，自定义提示用户提示，如果用户确认离开则跳转到新页面，否则留在当前页。 在react单页应用中，需要根据用户的选择来是否跳转页面，也就是需要阻塞浏览器的页面跳转，类似标签点击后的return false效果，待到…"}, {"id": "6844904114824937485", "title": "使用React严格模式避免过时的代码和副作用", "desc": "在本文中，我们将研究如何使用React的严格模式来获得有关开发期间过时的API和副作用的额外警告。 严格模式是用于突出显示应用程序中潜在问题的工具，它不会呈现任何可见的UI。 它只用于激活对其后代的额外检查和警告。 严格模式不会影响生产环境。 在上面的代码中，带有 'foo' …"}, {"id": "6844903567891890190", "title": "React new context API 的一次实践", "desc": "不用redux了，用react的new context API试试看，折腾了两天，把过程和感想跟大家分享下。 其中ContextProvider是数据的发布方，而ContextConsumer是数据的订阅方。 ContextProvider是数据的发布方。它拥有一个名为valu…"}, {"id": "6844903703858675720", "title": "[译] 深入理解 React 高阶组件", "desc": "在你听到 Don't Repeat Yourself或者 D.R.Y 这样（中邪一样）的口号之前你是不会在软件开发的钻研之路上走得很远的。有时候实行这些名言会有点过于麻烦，但是在大多数情况下，（实行它）是一个有价值的目标。在这篇文章中我们将会去探讨在 React 库中实现 DR…"}, {"id": "6844903687588954119", "title": "HTML5 Drag and Drop 的一些总结", "desc": "Drag and drop 的整个生命周期如上所示，在整个周期中，有 drag source 和 drop target 两类 component，需要将 drag source 的 draggable 属性置为 true，才能被拖动 (对 drop target 没有要求)，…"}, {"id": "6844903534513618952", "title": "React+Redux仿Web追书神器", "desc": "项目的初始结构和说明已罗列如上。 项目最初始是参考 react-pxq 初始化的。 刚开始我差不多用一个星期多学习了 Github 上的 从零开始学 ReactJS（ReactJS 101），基本上每一天看个 1-2 章，玩的也很开心，浅显易懂，适合初学者阅读。 虽然列了众多核…"}, {"id": "6844903983769714696", "title": "[译]React高级指引3：Context", "desc": "context提供了一种数据传输方式，它使得数据可以直接通过组件树传递而不需要在每一个层级上手动地传递props。 在典型的React应用中，数据是通过props自上而下（父组件传递给子组件）传递的，但是对于同时被许多组件所需要的某些props（如个人偏好，UI主题）来说，使用…"}, {"id": "6844904039679787015", "title": "Stook：极简主义的 React 状态管理库", "desc": "一年前，2018 年 9 月左右, React hooks 刚发布，那时 hooks 还不是稳定 Api，只能在 16.7.0-alpha.0 版本能用。那时我就预感到，基于 hooks 状态管理解决方案会逐渐崛起，当时我基于 hooks 创建一个我认为理想的状态管理库：sta…"}, {"id": "6844903728730865672", "title": "redux-saga 原理浅析", "desc": "笔者最近在做一些后台项目，使用的是Ant Design Pro，其使用了redux-saga处理异步数据流，本文将对redux-saga的原理做一个简单的解读，并将实现一个简易版的redux-saga。 在redux-saga中，saga是指一些长时操作，用generator函…"}, {"id": "6844903575584243720", "title": "如何写一个可爱的脚手架 (一)", "desc": "体验过上述工具的同学，有没有发现他们都有一个共同点——提供了一个可供快速开发的样板文件（boilerplate）。本文就将从样板文件入来进行阐述。通过本文，你将学到： public/manifest.json: 这是PWA 的一部分，用来描述应用相关的信息。以前开发cordov…"}, {"id": "6844903591371636750", "title": "深入Preact源码分析（4.20更新）", "desc": "jsx要转化成virtualDOM，首先经过babel，再经过h函数的调用形成virtualDOM。具体如下 相当于react得createElement()，jsx经过babel转码后是h的循环调用，生成virtualDOM。 通过源码中h的函数定义也可以看见。h的函数第一个…"}, {"id": "6936011059337641998", "title": "React 函数式组件和类组件[Dan]", "desc": "函数式组件捕获了渲染所用的值。（Function components capture the rendered values.） 直接看结论可能有点不知所云。 看一个组件，使用setTimeout模拟网络请求，点击button之后警告提示关注某人（user），user从pro…"}, {"id": "6844903603094700046", "title": "200行代码写一个简易的dva", "desc": "在美团实习的时候，第一次接触到dva这样的react框架，回学校的时候，就想有机会自己实现一下这样的框架，虽然自己水平有限，但是可以试一试哈。 目标是实现dva model的同步和异步 dispatch action。 上述就是 dva 对 state 的更新， 通过dispa…"}, {"id": "6959395238729220126", "title": "React源码解析6-类组件的更新", "desc": "1.路口方法 beginWork() 判断组件更新是否可以优化 根据节点类型分发处理不同更新逻辑 根据expirationTime等信息判断节点是否可以跳过 2.tag判断不同方法 1.函数组件 直接"}, {"id": "6949452617491677192", "title": "给我5分钟！教你写出干净清爽的 React 代码", "desc": "作为React开发人员，我们都希望编写更简洁、更容易阅读的代码。在这篇指南中，我总结了七种最重要的方法，你可以从今天开始编写更干净的React代码，让构建React项目和检查代码变得更容易。一般来说，"}, {"id": "6870301798993920014", "title": "React + TypeScript ：Chrome书签共享拓展程序实践", "desc": "像笔者本身团队中就有很多网站需要存储（还有很多没有截图到...），如果有新同学入职的话，还需要将这些网站一个个分享。非常不方便，该系统可以将需要的网站进行分类存储，将自己团队的同学拉入一个组中，达到共享书签的目的。 用户关系：管理员、普通用户。 别问为什么用React+Ts，问…"}, {"id": "6844903624691154952", "title": "React拾遗：Render Props及其使用场景", "desc": "第一次见到这个语法时，大多会很惊讶，因为日常代码里props.children必然是字符串或者元素。但事实上props.children可以是函数，只要最终生成的render的返回值是dom元素就行。例如： 虽然没有实际意义，但这即是一个 render props。当然rend…"}, {"id": "6979223517866754084", "title": "React（六）：列表&key", "desc": "使用 Javascript 中的 map() 方法来遍历 numbers 数组。将数组中的每个元素变成 <li> 标签，生成新数组 listItems： 但是会看到一个警告 a key should "}, {"id": "6844904048219406350", "title": "React【 Router 】", "desc": "调用 history.pushState() 或者 history.replaceState() 不会触发 popstate 事件. popstate 事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用 history.back()、hi…"}, {"id": "6844904036496310286", "title": "React Suite 4.2.0 版本发布，2020 新年新气象 🎉", "desc": "React Suite 首先在这里祝福大家新年行大运 🎉，事事都顺心 ❤️️。我们也会在新的一年里为大家带来更多特性，帮助更多开发者快速构建更优质的产品。 在 2019 年的 11 月份我们发了 4.1 版本，两个月后的今天为大家带来 4.2 版本的更新。接下来为大家介绍一下…"}, {"id": "6844903508299235335", "title": "ReactJS 底层揭秘系列教程 | 掘金翻译计划", "desc": "本库包含 ReactJS 内部工作原理的说明。实际上，我在调试整个代码库时，将所有的逻辑放在可视化的流程图上，对它们进行分析，然后总结和解释主要的概念和方法。我已经完成了 Stack 版本，现在我在研究下一个版本 —— Fiber。本教程由掘金翻译计划译者贡献。"}, {"id": "6844903846548865037", "title": "React Hook 不完全指南", "desc": "该 Hook 接收一个包含命令式、且可能有副作用代码的函数. 在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。 使用 useEf…"}, {"id": "6844903689975496711", "title": "用typescript撸个前端框架InDiv", "desc": "有个同事跟我说：需求还是不够多，都有时间造轮子了。。。 这个轮子从18年4月22造到18年10月12日，本来就是看了一个文章讲前端框架的路由实现原理之后，想试着撸一个路由试试，结果越写越多，到最后就莫名其妙变成了个mvvm框架了。顺便写了个比较渣的文档和服务端渲染。。。 名字其…"}, {"id": "6844903588431560711", "title": "React 深入系列２：组件分类", "desc": "React 组件有很多种分类方式，常见的分类方式有函数组件和类组件，无状态组件和有状态组件，展示型组件和容器型组件。好吧，这又是一篇咬文嚼字的文章。但是，真正把这几组概念咬清楚、嚼明白后，对于页面的组件划分、组件之间的解耦是大有裨益的。 函数组件(Functional Comp…"}, {"id": "6954595499261296654", "title": "React函数式组件的性能优化", "desc": "优化思路 主要优化的方向有2个： 减少重新 render 的次数。因为在 React 里最重(花时间最长)的一块就是 reconction(简单的可以理解为 diff)，如果不 render，就不会 "}, {"id": "6869634418663751694", "title": "React-hooks入坑指南", "desc": "如果你是在使用React >= 16.8的版本，那么你可以使用hooks在编写你的组件，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 提供代码逻辑复用的另一种选择（自定义 Hook），其他选择Render Props、HOC、mixi…"}, {"id": "6949930546461933575", "title": "React useRef() 小记", "desc": "本文主要介绍了使用React.useRef()钩子来创建持久的可变变量（也称为引用或refs）以及访问DOM元素。"}, {"id": "6919777977832046605", "title": "开始学习React啦（三）", "desc": "一、组件生命周期所谓的生命周期就是指某个事物从开始到结束的各个阶段，当然在React中指的是组件从创建到销毁的过程在这个过程中的不同阶段调用的函数，即生命周期本质就是一个函数，到了特定时机会自动执行通"}, {"id": "6844903779658465293", "title": "[译] X 为啥不是 hook？", "desc": "但是像 React.memo() 和 <Context.Provider>，这些 API 它们不是 Hooks。一般来说，这些 Hook 版本的 API 被认为是 非组件化 或 反模块化 的。这篇文章将帮助你理解其中的原理。 注：这篇文章并非教你如何高效的使用 React，而是…"}, {"id": "6844904160794509320", "title": "React第三篇 单页应用开发", "desc": "3. AntD UI框架使用"}, {"id": "6844904143396536334", "title": "实现一个简单的不能再简单的React vdom", "desc": "前一段时间一直在学习React相关的东西，然后找了一个很火，但又不是很难的切入点。那就是vdom。 我觉得vdom就是一个普通的js对象，只不过它是通过一定的结构来约束。就是把一个真实的dom给抽象化。 我们不再需要操作dom而是直接修改这个js对象，就可以映射到真实的dom上…"}, {"id": "6844903689908420622", "title": "[译] Immer 下的不可突变数据和 React 的 setState", "desc": "Immer 是为 JavaScript 不可突变性打造的一个非常棒的全新库。之前像 Immutable.js 这样的库，它需要引入操作你数据的所有新方法。 它很不错，但是需要复杂的适配器并在 JSON 和 不可突变 之间来回转换，以便在需要时与其他库一起使用。 Immer 简化…"}, {"id": "6847902216234369037", "title": "简单的例子理解react-redux原理及实现", "desc": "本文会通过一个简单的例子讲解react-redux的使用及其原理，并且该例子会用redux和react-redux都写一遍，对比其不同来加深理解。 我们要实现的例子很简单，就是页面上有一个按钮和一个数字，点击add按钮的时候，数字会加1。虽然是个极简的例子，但已经包括了数据的响…"}, {"id": "6944920495246540837", "title": "react17.0.1 按需引入 antd", "desc": "在 552 行左右，sass-loader 下方，file-loader 上。 有些教程在test: /.less$/中会配置浏览器相关的信息。本人在配置后打包会提示不要在这上面配置相关信息。所以删除了，并不影响使用。 这里的resolve-url-loader是和解析url相…"}, {"id": "6997228208990978084", "title": "03. 从零开始，新建一个啥都有的React项目（webpack别名配置）", "desc": "1. 配置webpack别名有什么用？ 设置别名可以让后续引用的地方减少路径的复杂度，如../../src/pages/a.tsx 就可以写为 @/pages/a.tsx 2. 要配置哪些东西？ 先简"}, {"id": "6997243662446886925", "title": "[React 2021新书]105、处理状态", "desc": "处理state 上一小结我们学习了属性props，可以在组件中读取和渲染属性。Props Props不能修改 Props 的问题是它不能被修改. 我们一起来查看以下这段代码，看有什么问题: 上例中尝试"}, {"id": "6997242770553307167", "title": "[React 2021新书]106、方法和绑定", "desc": "方法 下面我们看看如何给组件添加方法。方法可以和submit, click, change等事件绑定。 React里的事件 注意，React改变了事件的大小写。文本on被添加到事件名称的前面。还有事件"}, {"id": "6844903924558741518", "title": "你也许不需要 devDependencies", "desc": "敢问 9102 年的前端同学们，上次你折腾依赖和构建配置是为了什么，又花了多少时间呢？对于现在前端项目中常令人诟病的开发环境稳定性问题，笔者认为 NPM 的一个设计难辞其咎，那就是 devDependencies。 毫无疑问，这是条伟大的命令。少了 npm install，估计…"}, {"id": "6915299544741707783", "title": "Lottie 在 React（0.13.3 版本） 项目中实践", "desc": "前言事情的起因是在掘金中看到「网易云音乐大前端」团队分享的【剖析lottie-web动画实现原理】，开始学习如何使用Lottie并在项目中运用Lottie网址：http://airbnb.io/lot"}, {"id": "6844903927624925191", "title": "React骚操作之技巧篇", "desc": "想了半小时，实在不知道开头应该怎么写，就随便写点内容填充一下，以显得不那么空虚。 话说回来，react是很多前端切图仔的吃饭家伙，更深入的了解其特性有助于我们更好的吃饭。前端时间我在重新学习react的时候，发现了一些比较有趣的行为，总结一波看看有没有引起大家的共鸣。 运行之后…"}, {"id": "6967364133998034981", "title": "React Hooks——基础解析", "desc": "Hooks的由来 React Hooks 是从 v16.8 引入的又一开创性的新特性，它可以让我们在不编写class的情况下使用state以及其他React特性。 Hooks的出现是为了解决React"}, {"id": "6884962743196057608", "title": "React中函数组件和类组件的差异", "desc": "关于react中的函数组件和类组件，相信网上有很多文章都有介绍过其中的差异，不过我在实际使用中发现了一些细微的差异，导致我个人认为类组件使用门槛较低，但逻辑相对复杂。使用函数组件门槛较高，但是能适当简化逻辑。由于我之前使用过vue，所以文中也会加入一些与vue的对比。 reac…"}, {"id": "6844903953499422727", "title": "React中的Virtual DOM是什么", "desc": "Virtual DOM 本质上是JavaScript对象，是对真实DOM的的一种描述方式。 即JS对象模拟的DOM结构，将DOM变化的对比放在JS层来做。让UI渲染变成 UI = f(data)的形式。 所以，Virtual DOM 其实是一个JS对象，类似JSON格式，Rea…"}, {"id": "6844903684833280013", "title": "搭建Typescript+React项目模板(3) --- 整理项目和杂项", "desc": "在上一篇提升开发体验中，我们一下子集成了一堆插件和功能进去，导致项目结构比教混乱，重点问题就在webpack的相关配置项目录build文件夹中，所以今天的工作较为轻松，重点就是进行项目结构整理，然后再进行一些杂项的添加。 那么当前最先需要做的工作就是进行build文件夹下web…"}, {"id": "6896425153354432526", "title": "React Hooks 学习笔记—— useMemo ? useRef ?", "desc": "在一个 function 组件中使用 echarts 生成图表。大概思路如下: 这时候 Linter 会提示需要把 option 加到 effect 的依赖列表里面。加进入之后呢？Linter 又会提示，对 option 变量的依赖会导致每一次渲染时都会触发 effect，建议…"}, {"id": "6844903570056151047", "title": "CSS攻击：记录用户密码", "desc": "简单的CSS代码，甚至不符合图灵完备的语言，但是也能成为一些攻击者的工具，下面简单介绍一下如何使用CSS去记录用户的密码。但是这些CSS脚本会出现在第三方CSS库中，所以使用第三方CSS库也需要谨慎，确保代码安全。 input[type=\"password\"]是css选择器，作…"}, {"id": "6917584248337596423", "title": "React高阶组件(HOC)解析及实践", "desc": "基于上一遍关于React组件通信文章中，有关任意组件间数据通信：Redux、Redux-mobx、Redux-saga的解读，对于Redux生态圈中，中间件是如何拓展到Redux中的机制，勾起个人的兴趣。 高阶组件(HOC higher-Order Component) 是Re…"}, {"id": "6874915878526255117", "title": "useState 与useReducer源码浅析", "desc": "react hooks源码 感觉有点复杂。现在只能学习用法和写个简易版的hooks。 在此之前，想先了解下几个出现的名词 没有自己的state和生命周期函数。接受一个props，只是纯props展示组件，不涉及状态的更新 有自己的state和生命周期函数。比如下面的内部的状态会…"}, {"id": "6844904019387744264", "title": "14个你不知道的 JavaScript 技巧", "desc": "人们通常认为 JavaScript 是一门很容易上手的语言，但是要做到精通却不简单。是的，这是因为 JavaScript 是一种非常古老且非常灵活的语言。它充满了神秘的语法和过时的功能。到目前为止，我已经使用 JavaScript 多年了，但是还是时不时就会发现一些我不知道的隐…"}, {"id": "6844903780111253512", "title": "通过 React Hooks 声明式地使用 setInterval", "desc": "接触 React Hooks 一定时间的你，也许会碰到一个神奇的问题: setInterval 用起来没你想的简单。 老实说，这些朋友也不是胡扯。刚开始接触 Hooks 的时候，确实还挺让人疑惑的。 但我认为谈不上 Hooks 的毛病，而是 React 编程模型和 setInt…"}, {"id": "6904894197015248910", "title": "React-blog 搭建属于自己的博客", "desc": "在试图搭建一个完全属于自己且自主可控的博客之前，我使用过 wordpress 和 Hexo 等傻瓜式的博客。但这类可少量客制化的博客并不能完完全全满足我的需求，我希望我自己的博客在我手中完全可控，一丝一毫都可以被我掌握，这样才显得安心和舒适。作为一个开发者，自己的博客其实就是自…"}, {"id": "6844903656710471694", "title": "[译] 如何向带有插槽的 React 组件传递多个 Children", "desc": "假如你需要写一个可以重复使用的组件。可是呢，名为 children 的 prop 不能解决这个需求。这个组件得有能力接收不止一个 children，而且这些 children 的放置还不是相邻的，而是按照需求而定。 可能你在写的是带有一个标题、一个边栏和一个内容区块的名为 La…"}, {"id": "6844903832061739022", "title": "七分设计感的纯React项目Mung", "desc": "1. Mung：是一个基于React编写，使用豆瓣开源API开发的一个项目。 2. 功能概述 数据保存 ：支持断网加载缓存数据。 主题换肤 ：现在只支持切换主题颜色，本项目没几张图片。 查看电影详情 ：支持查看电影详情包括评论。 一键搜索： 支持标签和语句查找相关的电影。 3.…"}, {"id": "6844904050727583751", "title": "初试Mobx——让状态管理自动化", "desc": "前端的场景越来越复杂，现阶段，新项目都会采用Vue、Angular、React之一来管理数据到视图的映射关系，它们都有自己管理组件状态、生命周期的独特机制，但是在复杂场景下，还是会采用像Vuex、Ngrx、Redux这样的状态容器来管理重要的全局状态。 我工作最主要用的还是Re…"}, {"id": "6844903958381592589", "title": "如何让你的 React 『变慢』？探析 Array Diff 的一些边角特性", "desc": "当你看到这个标题的时候，一定很好奇，React 不是很快么？为啥会变慢呢？在写这篇文章之前，我也是这么认为的，但是当我去看了一下 React 有关 Array 的 Diff 之后，我才认识到其实 React 如果你用的不正确，那么是会变慢的。 React Diff 算法相信大家…"}, {"id": "6894597372199600141", "title": "setState总结", "desc": "React 组件中的数据可以来源于使用者，也可以组件自身维护。使用者传递的数据就是组件的属性 （props），而组件自身维护的数据就是组件的状态（state）。 React 中的哲学：数据属于谁，谁才有权力更改。 对于使用者传递过来的 props，组件自然是没有权利更改的；对于…"}, {"id": "6936172217424314382", "title": "React Testing library 101 （一）", "desc": "Testing-library 是 React 官方推荐的单元测试库，对标的是 Airbnb 的 Enzyme。我试着用现在流行的一套话术体系（发现问题、分析问题、解决问题）来解释一下 Testing-library 的特点： OK，一句话解释就是 Testing-librar…"}, {"id": "6844903567770255367", "title": "前端神器：一行命令，React 组件转 Vue 组件！", "desc": "简介对于react-to-vue工具，转化的是基本的reactcomponent，而不是全部的react应用。而基本reactcomponent的定义更多是基于props和state来渲染的组件，其中"}, {"id": "6844903752487403534", "title": "html里列表滑动删除的实现如此简单", "desc": "做web开发经常会遇到列表操作, 如果不涉及移动端, 那么在列表上放几个按钮, 用户点击就完事了, 如果是移动端, 受限于屏幕宽度, 操作按钮太多会影响布局, 所以在移动端列表的滑动操作比较常见. 本文以地址管理为demo, 用react实现, 其实不管是什么框架, 涉及到的大…"}, {"id": "6844903842795143182", "title": "React: 关于React通信方式", "desc": "如果父组件设置了context，那么它的子组件都可以直接访问到里面的内容，它就像这个组件为根的子树的全局变量。 父组件可以通过 getChildContext 方法返回一个对象，这个对象就是子树的 context，提供 context 的组件必须提供 childContextT…"}, {"id": "6911882207296487432", "title": "不可避免的问题：React 的路由如何抽离？", "desc": "在React开发中，不可避免地要使用路由配置。那么问题来了！对于路由配置你是否还记得？如果将路由抽离出来统一管理，你有解决方案吗？接下来我们通过三点掌握路由的抽离配置：基本路由配置路由如何抽离特有的A"}, {"id": "6844903585814315021", "title": "前端每周清单年度总结与盘点", "desc": "在过去的八个月中，我几乎只做了两件事，工作与整理前端每周清单。虽然每周的内容不多，读完不过五分钟；却需要数十倍的时间去翻译、整理、发布，更多上数倍的时间阅读、跟踪各大平台的资讯、文章等。不得不承认，当兴趣式阅读变成了任务式，会磨去些原有的乐趣；并且，在这个知识爆炸的时代，乱花渐…"}, {"id": "6844903648376389639", "title": "SVG 的使用", "desc": "说到性能优化，常见的一种方式就是压缩图片，通常图片最多压缩到原文件的 50%。而且如果一个图标有 7 种颜色呢？那么设计就得给出 7 种颜色的图片，前端代码也得引用不同的 7 个路径。。。想想都觉得复杂。 SVG 图完美地解决了这一痛点，大小仅为原文件 10% 左右。还可以通过…"}, {"id": "6847902224794943495", "title": "大前端项目代码重用，也许lerna是最好的选择", "desc": "我前段时间参与了一个react为主的大前端项目，覆盖Web、Android、Ios三个平台。由于整个业务逻辑侧重在手机端，且Web端也是到了项目中期才开始启动，我分别以react-native和react分开建了两个项目。 可是，后端微服务集群是同一个，两个项目调用的API大多…"}, {"id": "6844903508198555655", "title": "关于Create React App不支持装饰器的终极无伤解决方案", "desc": "之前发过一篇解决这个问题的文章，但是对create react app 都是有侵入的。 这里提出一个我觉得是最OK的解决方案，一波带走。 找到node_modules/react-scripts/config/webpack.config.dev.js文件。 观察其JSX|JS…"}, {"id": "6844904070994460685", "title": "Create React App 学习-7.使用Public文件夹及代码分割", "desc": "该public文件夹包含HTML文件，因此可以对其进行调整，例如，设置页面标题。在编译过程中，包含有编译过的代码的<script>标签将会被自动添加进来。 我们建议在JavaScript文件中importassets，就像引入样式、图片和字体那样。该机制提供了许多好处： 脚本和…"}, {"id": "6844903680408289287", "title": "【译】Google - 使用 webpack 进行 web 性能优化（三）：监控和分析应用", "desc": "即使你可以通过配置 webpack 使得应用尽可能小，追踪它并且知道它包含什么仍然是很重要的。否则，你可能安装了一个让应用大了两倍的依赖却浑然不觉。 这节就来讲几个可以帮助你深入分析 bundle 的工具。 为了监控你的应用大小，可以在开发过程中使用 webpack-dashb…"}, {"id": "6919331995298316296", "title": "使用JSX开发React应用", "desc": "在这些阶段中使用了哪些工具，你有什么体会。 在上面的代码中，我们根据登录的状态，在界面上显示不同的UI。这种方式想必前端开发人员都能信手拈来。 那么，用纯React框架要怎么编写代码呢？例程如下，使用React框架开发web应用需要引入两个包react.js和react-dom…"}, {"id": "6935977956385030151", "title": "手把手讲解，从零实现react hooks", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。常用的hook有useState，useMemo，useCallback，useEffect，useLayoutEffect，useConte…"}, {"id": "6867416989665591304", "title": "# React Hooks 详解之 useState", "desc": "Hooks 的最大的作用就是可以让你在不编写class的情况下使用state以及其他的 React 特性。而 useState 的功能就是让你在函数式组件中使用 state。 在上面的代码中，Counter组件是一个函数式组件，通过 useState 传入一个初始值，然后返回了…"}, {"id": "6965701925798936606", "title": "React源码解析25-schedule工作原理", "desc": "1.主要功能是时间切片和优先级调度 1.时间切片 时间切片的本质是模拟实现requestIdleCallback 浏览器一帧执行的任务，除去浏览器重排/重绘还有四个是可以用来执行我们的js的 只有re"}, {"id": "6844903590956367879", "title": "一个简单易用的webpack4多页面脚手架配置加学习", "desc": "前言：以前刚接触webpack的时候还是1，当时大概过了下文档操作了一下当时写的一些注释。后来开发的时候基本写react都是用的create-react-app或者找别人的搭好的脚手架用。所以趁着这段时间的间隙加上webpack4刚出也不算久，重新学习加复习下webpack的一…"}, {"id": "6844903665296211975", "title": "React Context API: 轻松管理状态", "desc": "使用最新的 React Context API 管理状态非常容易。现在就跟随我一起学习下它和 Redux 的区别以及它是如何使用的吧。 综述：React Context API 在 React 生态系统中并不是个新鲜事物。不过，在 React 16.3.0 版本中做了一些改进。…"}, {"id": "6945243310499823623", "title": "React - 类组件", "desc": "与 Vue 不同，React 没有 SFC(.vue)，它的组件，只是一个一个 JS 文件。 Consumer - 消费者，它们专门消费生产者生产的数据，它需要嵌套在生产者下面。才能通过回调的方式拿到共享的数据源 看，是不是很方便，并不需要一层一层的往下传递了，但是，还是有些问…"}, {"id": "6844904195124887565", "title": "学习React Hooks和TypeScript打造的仿Antd的UI组件库", "desc": "欢迎一起学习，提issue，一起merge新功能。"}, {"id": "6916375591856341005", "title": "SSR在左，React Server Component在右", "desc": "要解释这些问题，我们先来看看Web渲染的发展历程。 随着时间的发展，这种模式的问题也逐步凸显。 从用户体验上来说，每次在页面上点击一个tab切换，都有可能是返回一个完整的Html，浏览器会重新刷新一次，这种体验是很难受的，因为有可能你在页面上勾选了一些状态会在刷新之后完全消失掉…"}, {"id": "6904527116526223374", "title": "scrollIntoView 失效调研与替换方案", "desc": "今天需要做一个点击icon滑动到文章评论区的功能，采用了scrollIntoView，发现在移动端偶现失效了。 据这篇博文描述是由于滑动过程中进行了原生事件的监听就会阻断事件继续执行。 因此替换成 scollTo，发现滑动有改善，但是还是有定位不准的问题。 上面的方法都试了一遍…"}, {"id": "6947569679313403918", "title": "造一个 react-infinite-scroller 轮子", "desc": "无限滚动是一个开发时经常遇到的问题，比如 ant-design 的 List 组件里就推荐使用 react-infinite-scroller 配合 List 组件一起使用。 假如我们想自己实现无限滚动，难免要去查 scroll 事件，还要搞清 offsetHeight, sc…"}, {"id": "6992141096440561701", "title": "Reat Hooks 【进阶2】", "desc": "useState 与 setState的区别 useState 与 useReducer的区别 effect 的依赖频繁变化，该怎么办？ useRef、createRef的区别及使用..."}, {"id": "6844903929004687368", "title": "React源码解析之ExpirationTime", "desc": "在React中，为防止某个update因为优先级的原因一直被打断而未能执行。React会设置一个ExpirationTime，当时间到了ExpirationTime的时候，如果某个update还未执行的话，React将会强制执行该update，这就是ExpirationTime…"}, {"id": "6857530062489518093", "title": "对于React Hook的思考探索", "desc": "最近一直在学React相关的东西，React基于组件的编码方式，让写界面省了不少事儿。难怪现在Flutter，Compose都开始拥抱这种开发方式。顺便也重拾起了荒废已久的js，js经过这几年的更新已经变得像一门新语言了，还支持了class这个语法，让我们熟悉面向对象开发的人更…"}, {"id": "6847902219904221191", "title": "使用react搭建组件库：react+typescript+storybook", "desc": "1. 安装组件库 2. 组件库配置eslint 3. 引入依赖 4. 编写组件 5. 删除多余文件+引用组件 6. 运行项目 shouldExtractLiteralValuesFromEnum：storybook爬取组件属性的时候会自动把type类型的属性自动展开。 prop…"}, {"id": "6844904081656381453", "title": "React + Antd 实现后台管理系统", "desc": "声明式编码 (只需要声明在哪里做什么，而无需关心如何实现，比如数组原型上的那些高阶函数。编程式实现：需要以具体代码表达在哪里做什么，如何实现，比如 for 循环之类的。)"}, {"id": "6912240636435365901", "title": "自定义移动端视频组件", "desc": "因在 APP Webview 内使用 video 标签会被浏览器劫持，导致在各机型上表现不一致。为了使 APP Webview 播放表现更一致，决定自定义 video 组件。 由于 iOS 在全屏状态下会使用原生的视频控制组件，所以在全屏状态下，Android、iOS 在全屏状…"}, {"id": "6844903982977007630", "title": "webpack4+react16+react-router-dom4从零配置到优化，实现路由按需加载(下)", "desc": "上一篇介绍了下webpack的一些配置，接下来讲下reactRouter4里面关于路由的一些配置，如何做到模块的按需加载，这也是常用的一种优化网站性能的方式。 首先在创建React项目的时候，我们一般要引入两个包，react 和 react-dom， 那么 react-rout…"}, {"id": "6977183329091059725", "title": "React 钩子。好的，坏的，和丑的", "desc": "Hooks在React 16.8发布时突然出现，其崇高目标是改变我们编写React组件的方式。尘埃落定，Hooks已经很普遍了。Hooks成功了吗？ 最初的市场宣传将Hooks作为一种摆脱类组件的方式"}, {"id": "6844904023208755207", "title": "用react-create-app搭建一个类似vue的初始项目（eslint，prettier，rouer）", "desc": "不废话了，这次直接开干。也是我逐步的搭建过程。当手记了 总结看最后。 src/index.js 是 JavaScript 入口点。 有vue经验的那么就直接很好理解。并且对文件进行部分修改。我初步干完是这样样子的。剩下这么写文件。 这里注意，只是初次修改。后面还需要引入路由和r…"}, {"id": "6844903921505271822", "title": "拖拽组件 react-dnd 的使用方法", "desc": "React DnD 是一组 React 高阶组件，使用的时候只需要使用对应的 API 将目标组件进行包裹，即可实现拖动或接受拖动元素的功能。 type: 拖拽类型，接收拖拽元素的type一致时才可接收拖拽。type的类型可以是 string，symbol，也可以是用一个函数来返…"}, {"id": "6919853708935184398", "title": "函数式组件 ref 的解决方案", "desc": "对于 React 中需要强制修改子组件的情况，React 提供了 Refs 这种解决办法，使得我们可以操作底层 DOM 元素或者自定的 class 组件实例。除此之外，文档（v17.0.1）对函数式组件另有描述: 不能在函数式组件上使用ref属性，因为他们没有实例。 在函数式组…"}, {"id": "6967273308446261262", "title": "React 02 :: Redux状态管理", "desc": "0. 什么是Redux？ 一套状态管理工具。 1. 你不一定需要Redux 阮一峰老师在他的Redux系列教程里面对于你是否需要Redux有过非常精辟的论述。 这个是阮一峰老师的系列教程，一共有两篇，"}, {"id": "6844903700209598477", "title": "笔记：React 中关于 key 的一点总结", "desc": "译 ：当您使用React时，您可以在单个时间点将该render()函数视为创建React元素树。在下一个状态或道具更新时，该render()函数将返回一个不同的React元素树。然后，React需要弄清楚如何有效地更新UI以匹配最新的树。 react中的key属性是一个特殊的属…"}, {"id": "6844903678244044813", "title": "React router动态加载组件-适配器模式的应用", "desc": "本文讲述怎么实现动态加载组件，并借此阐述适配器模式。 以上是最常见的React router。在简单的单页应用中，这样写是ok的。因为打包后的单一js文件bundle.js也不过200k左右，gzip之后，对加载性能并没有太大的影响。 但是，当产品经历多次迭代后，追加的页面导致…"}, {"id": "6942288911737716773", "title": "前端开发者周刊第四期：使用 React 写命令行工具", "desc": "前端爱好者周刊 (Github: shfshanyue/weekly)，每周记录关于前端的开源工具、优秀文章、重大库版本发布记录等等。每周一发布，订阅平台如下，欢迎订阅。 考古工作者在三星堆遗址新发现 6 座三星堆文化祭祀坑，目前已出土金面具残片、巨青铜面具、青铜神树、象牙等重…"}, {"id": "6864231140929863694", "title": "30分钟教你写出自己的useState", "desc": "今天我们就来探讨一下React Hook其中一条规则，手把手教你实现一个简易的useState，在实现的过程中，你就会明白Hook 规则存在的意义。 其中规则2不难理解，因为本来Hooks就是为React发明的东西，当然就只能在React函数中调用，这里我们重点讨论规则1。 不…"}, {"id": "6916439520116211726", "title": "react 引入fiber之后的diff算法", "desc": "众所周知，react diff算法是在更新时，根据state的更新，计算出变化的节点，再渲染。那么diff是通过什么和什么对比呢，又是如何对比的呢？ react做的就是对比上面的1和4，最终生成2，最后将2渲染到页面中。 diff算法就是发生在reconcile这个阶段，rec…"}, {"id": "6844903661672333326", "title": "React-Router底层原理分析与实现", "desc": "对于React-Router是针对React定义的路由库，用于将URL和component进行匹配。 其实上诉的操作就是只是针对前端简单路由+historyModule的升级处理。 其中的操作也是类似的。 由于React-Router版本之间的处理方式有些差别，所以就按最新版本…"}, {"id": "6844903727543877645", "title": "redux探索：rematch", "desc": "Dva是蚂蚁金服开源的一个数据流管理方案，基于redux和redux-saga，简化了开发体验。Dva是一揽子的解决方案，可以使用侵入性很强的dva-cli来快速搭建项目，提供了路由层面的适配；也可以使用dva-core来引入核心的代码，减少侵入性。 rematch的灵感来自于…"}, {"id": "6971441404874604557", "title": "React 服务端渲染 Next.js", "desc": "1、Next 整体介绍 Next.js 是 React 服务端渲染应用框架. 用于构建 SEO 友好的 SPA 应用. 支持两种预渲染方式, 静态生成和服务器端渲染. 基于页面的路由系统, 路由零配置"}, {"id": "6987764619439767560", "title": "react原理：render阶段整体认识", "desc": "ReactDOM.render这篇文章中提到过react更新流程中的render阶段。render阶段这个名字，很容易让人们认为这是react会在这个阶段渲染页面，其实不然，render阶段是reac"}, {"id": "6844904137209937927", "title": "Suspense & SWR", "desc": "这篇是我在组内做的一次技术分享的讲稿。没怎么修改就直接分享出来了。 React 16.6 添加了一个 <Suspense> 组件，可以用来在 lazy load 的时候显示加载中的状态。 后来 React 想，这 Suspense 既然能用来等待 lazy load 的 Pro…"}, {"id": "6993176767758352392", "title": "01 - JSX 代码如何成为 DOM 的？", "desc": "(,,･∀･)ﾉ゛hello 大家好，这是我对react进行深入学习和解析的第一篇内容，漫漫前端路，仍是不归途啊，再接再厉，共勉之。说到本篇，这里介绍了JSX的定义，使用说明，背后的原理等。"}, {"id": "6844903496827797512", "title": "前端工程-从原理到轮子之JS模块化", "desc": "本篇介绍的是JS模块化。 JS模块化是随着前端技术的发展，前端代码爆炸式增长后，工程化所采取的必然措施。目前模块化的思想分为CommonJS、AMD和CMD。有关三者的区别，大家基本都多少有所了解，而且资料很多，这里就不再赘述。 拆分。将js代码按功能逻辑拆分成多个可复用的js…"}, {"id": "6844904040929689608", "title": "mobx在react如何使用？3分钟学会！", "desc": "这边文章主要目的呢。是搭建一个react和mobx的demo。能够了解mobx在react应用中如何使用的。我会用大白话的形式写这个文章； 文末有react 和react-native 的两个集成mobx的项目demo。react-native的实现思路和下面一样。 安装好上面…"}, {"id": "6927206574561705992", "title": "深入react技术栈-书本学习摘要", "desc": "之前一直没有学习关于react技术栈有关的东西, 这次利用寒假准备春招来学习一下。 React 是 facebook开源的javaScript库。 React把用户页面抽象成一个组件, 如按钮组件 button, 对话组件 dialog。 开发者通过组合这些组件, 最终得到功能…"}, {"id": "6862660262995066894", "title": "[译]React v17.0的6大变化", "desc": "8月10日，React发布了React v17的第一个RC版本，令人惊讶的是，即使从React的主要正式版本发布已经过去了三年，新版本也没有添加任何新功能。根据React团队的说法，这是为了使开发人员更容易更新React。但是React团队称，他们正在为v17之后的版本进行一些…"}, {"id": "6949167847507492901", "title": "React必知必会(一)——探究React核心概念", "desc": "前言在学习一个语法或框架的时候，总有一些关键的概念或认知，需要牢记于心。这些概念看起来很简单，寥寥数语，但却往往隐含着优秀的设计理念和实践精髓；一起探究React核心概念。"}, {"id": "6865106035527385095", "title": "蒲公英 · JELLY技术周刊 Vol.19 从零开始的 Cloud IDE 开发", "desc": "TypeScript 4.0 正式发布啦！官方团队在这一版本中加入了如可变参数元组类型、构造函数的类属性推断、短路分配运算符、自定义 JSX Factories 等多项激动人心的特性，同时官方站点也进行了重写，看上去更加清爽。在 Stackoverflow 的开发者报告中，Ty…"}, {"id": "6844903606273966088", "title": "从navigator到react-navigation进阶教程", "desc": "随着react-navigation逐渐稳定，Navigator也被光荣的退休了。在React Native生态环境中需要一款可扩展且易于使用的导航组件，Navigator 自然胜任不了，这时React Native社区便孕育出了一个开源导航组件react-navigation…"}, {"id": "6961726714590265381", "title": "React —— 组件实例的三大核心属性 state，props，refs", "desc": "React —— 组件实例的三大核心属性 state，props，refs 组件实例的三大核心属性: state，props，refs"}, {"id": "6992959486788894733", "title": "React Hooks 三部曲 ｜ 8月更文挑战", "desc": "1, 为什么会有Hooks? React组件创建的方式有两种，一种是类组件，一种是纯函数组件，根据组件的设计原理，组件不要变成复杂的容器，最好只是数据流的管道，然后开发者根据需要，组合各种管道即可。也"}, {"id": "6992895962096074782", "title": "使用useState与发布订阅机制实现React状态管理", "desc": "前言 笔者的React项目是在umi的基础上开发的，并主要使用的umi提供的@umijs/plugin-model 作为状态管理工具，但在项目开发过程中，有些时候在组件外使用全局状态，简单的方式是将需"}, {"id": "6844903766991306766", "title": "React生态，dva源码阅读", "desc": "dva的思想还是很不错的，大大提升了开发效率，dva集成了Redux以及Redux的中间件Redux-saga,以及React-router等等。得益于Redux的状态管理,以及Redux-saga中通过Task和Effect来处理异步的概念，dva在这些工具的基础上高度封装，…"}, {"id": "6844904191933218823", "title": "不可不知的react模糊搜索与结果高亮", "desc": "随着vue、react等框架等广泛使用，前端对数据处理的需求越来越多，处理的数据量也越来越大。今天我就接到这么一个需求，为了减少对后端的请求次数，提高性能，前端实现对数据进行轻量的模糊搜索与检索结果的高亮显示。talk is cheap，show me code，咱们闲话少说，…"}, {"id": "6844903844313464839", "title": "用 flex 布局和 React Hooks 实现一个思维导图", "desc": "学习 React 时做的练手项目，基于纯 Hooks 和 flex 布局实现的思维导图。 所有组件都是函数组件，由 Hook 实现事件、状态等的管理。除了 useState、useEffect 等基本操作外，还实现了： 利用 useReducer 和 useContext 的结…"}, {"id": "6844904019333398536", "title": "React搭建移动端基础项目", "desc": "1. 创建项目 2. 安装项目使用的技术库 3. 定义或者修改脚手架的配置 4. 编写一个实时获取根FontSize大小的js 5. 配置本地代理 7. 部署项目 8. 代码部署到服务器上"}, {"id": "6844903776931807239", "title": "React hooks 对应 ClassComponent 中的生命周期与 api ", "desc": "useEffect可以代替的生命周期为componentDidMount,componentWillUnMount和componentDidUpdate使用useEffect完成componentDi"}, {"id": "6844903648116359175", "title": "使用 Eject 方式在 create-react-app 中使用 Ant Design of React", "desc": "修改 src/App.js ，引入 antd 的按钮组件。 修改 src/App.css，在文件顶部引入 antd/dist/antd.css。 在文件顶部引入 antd/dist/antd.css实际上加载了全部的 antd 组件的样式（对前端性能是个隐患）。 至此使用 Ej…"}, {"id": "6844904198820069390", "title": "基于React Hooks、Ant Design打造网易云音乐播放器", "desc": "本项目灵感来源于掘金-Vue全家桶高仿网易云音乐mac客户端版,在掘金看到这篇文章,笔者刚开始学习React,便打算使用最新的hooks来实现一遍，加深理解。特此感谢晨曦时梦见兮提供的vue版本。 React、React-Router、React-Redux、Redux-thu…"}, {"id": "6844904046529085447", "title": "React开发日记-React Hook/Mobx 数据状态管理对比", "desc": "1 使用 context api + useReducer的方式，可以完成大部分状态管理的需求，适合全局状态较为简单的项目，但尚未解决ssr数据同步问题。"}, {"id": "6987202350494515230", "title": "React + Highcharts实现不重叠的气泡图", "desc": "使用React + Highcharts实现不重叠的气泡图，效果类似于D3的bubble chart"}, {"id": "6844903571222167566", "title": "bio: 一站式前端开发工具", "desc": "前端开发一站式解决方案。 使用 bio，您将只需关注业务逻辑，无需关注脚手架配置信息，即可快速完成前端开发。 额外的，bio 提供了 eslint、styleint 检测、mock 服务。 初始化项目目录。 在本地安装脚手架，以确保脚手架存在。脚手架安装在 bio 缓存目录（/…"}, {"id": "6844903678650875917", "title": "React 进阶设计与控制权问题", "desc": "控制权——这个概念在编程中至关重要。比如，“轮子”封装层与业务消费层对于控制权的“争夺”，就是一个很有意思的话题。这在 React 世界里也不例外。表面上看，我们当然希望“轮子”掌控的事情越多越好：因为抽象层处理的逻辑越多，业务调用时关心的事情就越少，使用就越方便。可是有些设计…"}, {"id": "6872003091047120909", "title": "React-useTypescript!", "desc": "在React v16.8新增了Hook，它提供了在函数组件中访问状态和React生命周期等能力，这些函数可以在程序的各个组件之间复用，达到共享逻辑的目的。 之前在React中, 我们只能通过 Higher Order Components(高阶组件)跟Render Props(…"}, {"id": "6947969446501679117", "title": "React+Antd实现可增删改表格", "desc": "最近写了一个小东西，模仿自己原先用vue写的项目改成react语法。写了一个可编辑的表格，期间磕磕碰碰的，打算把bug记录下。先把效果图和代码贴上去，主要用的是react+antd"}, {"id": "6844903798389882893", "title": "React中理解并使用Redux", "desc": "​ 在React中的组件是无法直接更动state(状态)的包含值，要透过setState方法来进行更动，这有很大的原因是为了Virtual DOM(虚拟DOM)的所设计，这是其中一点。另外在组件的树状阶层结构，父组件(拥有者)与子组件(被拥有者)的关系上，子组件是只能由父组件以…"}, {"id": "6938377903847505950", "title": "css实现数字切换动画（封装成React组件）", "desc": "我把0~9的数字全部列出来，排成一列，然后再根据需要展示的数字去对这个数字列进行定位，再利用transition过渡效果实现数字切换动画。 大家有什么建议，或者其他的实现思路，欢迎在评论区分享。"}, {"id": "6844903602230657037", "title": "新手搭建简洁的Express-React-Redux脚手架", "desc": "我发现网上的很多新手教程都并不是完全针对新手的，新手在使用起来也是丈二的和尚摸不到头脑，最近想用node做后端，react做前端搭建一个小系统，想把过程记录下来，从头开始搭建脚手架，绝对适合新手（本人也就是个前端小白）。既然是针对新手，那么就除去那些复杂的内容，什么服务端渲染之…"}, {"id": "6949948027683471374", "title": "React - Router", "desc": "react - 基于 Web 端的 router 根据不同的url规则，给用户展示不同的视图(页面)"}, {"id": "6844903623600635912", "title": "React 知识梳理（三）：手写一个自己的 React-redux", "desc": "上一次我们简单了解了一下 redux（文章在这里），今天我们来结合 React，实现自己的 React-redux。 我们看到，现在 head ，和 body 内的文案都是我们写死的，这样并不利于我们的开发，因为这些值我们无法改变，现在我们想点击下边按钮的时候，改变相应的文案，…"}, {"id": "6932423881319940103", "title": "一文看懂react17中任务更新的优先级", "desc": "​ 视频课程的目的是为了快速掌握react源码运行的过程和react中的scheduler、reconciler、renderer、fiber等，并且详细debug源码和分析，过程更清晰。 ​ requestIdleCallback是在浏览器重绘重排之后，如果还有空闲就可以执行…"}, {"id": "6882208201689792519", "title": "用 React 实现计算器（freeCodeCamp练手)", "desc": "题目要求是做一个计算器出来，要求实现加减乘除这些基本的功能，点击=出结果，点击AC清空。一开始的难点在于：把数字拼凑起来。比如点击4，再点击9，就代表49。想了一下，决定用字符串拼合的方式做：点击4，"}, {"id": "6844903599995092999", "title": "如何设计实现一个React UI组件库——Ant Design源码阅读与浅析", "desc": "在我们进行日常的项目开发的过程中，我们经常会遇到使用一些通用的UI组件库如BootStrap、Ant Design等。作为成熟的UI组件库，它能够提供提供一整套UI组件用来满足使用需求，能大大减少开发成本。 在使用了他人提供的组件库后，我自然就会有兴趣去了解一下别人开发的组件库…"}, {"id": "6844903574850256904", "title": "ReactNative实现Toast", "desc": "对于Android开发工程师来说，Toast在熟悉不过了，用它来显示一个提示信息，并自动隐藏。在我们开发RN应用的时候，我门也要实现这样的效果，就一点困难了，倒也不是困难，只是需要我们去适配，RN官方提供了一个API ToastAndroid，看到这个名字应该猜出，它只能在An…"}, {"id": "6844904065877409800", "title": "从Next.js到服务端渲染的学习", "desc": "在next.js里提供了一个静态异步方法：getInitialProps,它能异步获取JS普通对象并绑定在props上，通过这个方法我们就可以在服务的获取接口数据。 观察上面代码，会发现还有一个req对象，它指代的为服务的的request对象，但是作为一个前后端分离的独立前端工…"}, {"id": "6844903938068611079", "title": "React源码解析之FiberRoot", "desc": "熟悉它的属性及作用，并且【留个印象】就好，大部分属性在其他文章中都有用到。"}, {"id": "6844903956959739912", "title": "React 中 Context 的使用", "desc": "React中Context的使用context一般情况下，数据在组件中，要一级一级的传递，单向数据流，比如Parent组件中的theme值，需要在Item组件中使用，就需要我们从Parent中向下传递"}, {"id": "6942033157294129159", "title": "写给前端工程师看的函数式编程对话 - 5", "desc": "方：嗯，讲一讲「对象」吧。我们常说的对象，其实是「哈希表」，大概长这样： 方：没错，但是这很好优化，可以通过提供内置的对象构造器来优化，也可以通过编译器优化，这些优化都不是我们需要讨论的内容。 学生：了解。 方：目前我们是在复习上节课的内容， 好让你相信，不管多么复杂的数据结构…"}, {"id": "6844903597776306190", "title": "图解Redux中middleware的洋葱模型", "desc": "最近翻出了之前分析的 applyMiddleware 发现自己又看不懂了😳，重新看了一遍源代码，梳理了洋葱模型的实现方法，在这里分享一下。 applyMiddleware 函数最短但是最 Redux 最精髓的地方，成功的让 Redux 有了极大的可拓展空间，在 action …"}, {"id": "6977184089862307854", "title": "在React中使用svg文件的正确姿势", "desc": "开发中遇到的问题： 日常的开发中，我们经常会用到SVG的文件，但是很多时候，我们可能是把SVG当成图片来使用，这种方式其实会失去一些使用SVG的优势"}, {"id": "6844904009753427981", "title": "《reactHook+Typescript 从入门到实践》年底让这篇文章带你飞", "desc": "... ... React 全家桶的东西不详细讲解带过 ... // ERROR: Cannot find name 'jQuery'. 安装 antd， react-router-dom， 。。。 useEffect 在执行 DOM 更新之后调用它。在这个 effect 中，…"}, {"id": "6987714071801888798", "title": "React Diff 算法源码阅读笔记", "desc": "导读 React Diff 的过程发生在 beginWork 内，每个节点被 Diff 的时机基本上都是在其父节点状态更新快结束后发生的，其关键函数是一个叫 reconcileChildren 的函数"}, {"id": "6931278434991636488", "title": "React Hooks 使用小结", "desc": "React Hooks已经出来很久了，有人早已拥抱hooks，有人class大法如此好，何必hooks，也有人左手hooks，右手class。但是从掘金，知乎，博客以及面试等地方可以发现，hooks是无法避免的一个话题，好像不用hooks你就是上个世纪的人了（流下了前端卑微的泪…"}, {"id": "6844903560488943629", "title": "使用 React 和 Django REST Framework 构建你的网站", "desc": "此专栏我会不定期分享一些 Django 最前沿的文章，内容偏重技巧、经验的归纳总结，来源暂时有： Medium Twitter 知名博主 如果大家感兴趣，请一定点个关注，给我一些动力，毕竟翻译整理是需要时间的，谢谢大家 -- 原文地址：Creating websites usi…"}, {"id": "6844903567728312333", "title": "React 从青铜到王者系列教程之倔强青铜篇", "desc": "前端大陆乃是技术界近年来新兴起的板块，随着人们对网站交互和性能越来越高， 前往前端大陆修炼 Javascript 的召唤师如过江之鲫，数不胜数，前端奇人异士之多，故修炼之法林林总总，俱不相同， Web 前端的未来尚无定论，内部却已起了门户之见， 幸而前端圈核心门派正道大昌，人气…"}, {"id": "6844903535436365838", "title": "Webpack自动化构建实践指南", "desc": "由于现在的博客是使用wordpress搭建，自己得经常修改过一些代码，但是修改第三方源码真的比较痛苦，于是决定计划开始使用React + Node.js / Python开发新博客项目，最终替换当前博客代码，方便以后博客的维护和更新，也能实现自我开发技术，架构设计，解决问题能力…"}, {"id": "6844903576750260238", "title": "GraphQL & Relay 初探", "desc": "距离Facebook发布新版Relay（Relay Modern）已经快一年时间了，但相关的中文资料与实践案例依然不是很多。究其原因，可能和官方文档不够详细有关。本文通过对GraphQL与Relay的浅析，希望能降低其上手难度，同时也便于判断，自己的业务是否适合使用Relay框…"}, {"id": "6977139519590137892", "title": "react源码解析19.手写迷你版react", "desc": "react源码解析19.手写迷你版react 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核"}, {"id": "6913660426848829453", "title": "React Router 学习笔记", "desc": "路由的原本是一个后端的概念，源于服务器，在服务端中路由描述的是 URL 与处理函数之间的映射关系。通过不同的路由来请求不同的资源。 在浏览器地址栏切换不同的 URL 时，每次都要向后台服务器发出请求，服务器响应请求，给浏览器发送相应的资源，浏览器页面也会进行刷新。 举个例子：比…"}, {"id": "6980549102945714213", "title": "基于React+Echart的大屏监控", "desc": "基于React的大屏监控 技术栈 React ReactRouter Echarts 项目介绍 此项目是为了熟悉前端可视化同时学习Echarts而写 页面布局结合了Flex与Grid 使用rem匹配不"}, {"id": "6980503638401630215", "title": "不常见的面试题", "desc": "瞎总结， 大家请绕道， 最近面试比较郁闷， 就整理一下自己碰到的题，多年老菜鸡一枚，业务写多了，就丢弃了很多理论知识，这是罪，得改"}, {"id": "6844903796464861192", "title": "日常抄书之一次性搞懂解React生命周期", "desc": "1. 初步了解React生命周期 React生命周期可以分为挂载、更新、卸载三个阶段。主要可以分为两类： 组件的挂载是最基本过程，这个过程主要做初始化。在这初始化个过程中componentWillMount会在render方法之前执行，而componentDidMount方法会…"}, {"id": "6977183729944887333", "title": "React Intl: 将你的React应用程序国际化", "desc": "随着全球化程度的提高，为不同地区和地域的广泛受众编写React应用程序意味着要让它可以跨语言访问。 通过国际化功能，React Intl库提供了将文件文本正确翻译成其他语言的机制。 在本指南中，我们将"}, {"id": "6844903877246976008", "title": "「学习笔记」ReactHooks入门", "desc": "本文是本人在学习ReactHooks记录的学习笔记，内容不仅限于文档中的内容，涉及了Hooks源码相关。如果有错误，还请及时指正。 逻辑复用，如果使用高阶组件等特性，较为复杂。 传统的函数组件无法存储state状态。 Hooks允许在函数组件中，调用React的功能。 使用自定…"}, {"id": "6844903925884125198", "title": "如何使用useReducer Hook", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 看到“reducer”这个词，容易让人联想到Redux，但是在本文中，不必先理解Redux才能阅读这篇文章。咱们将一起讨论“reducer”实际上是什么，以及如何利用useReducer来管理组件中的复杂状态，…"}, {"id": "6953866924065292318", "title": "记录一下redux和@connect装饰器的基本用法", "desc": "新手一枚，记录一下redux、@connect装饰器和调试工具的基本用法，都是基础用法，更加深入的还在学习，"}, {"id": "6947875008840466463", "title": "「超详细React项目搭建教程三」集成 CSS/Less/Sass/Antd", "desc": "在上一篇文章中，我们使用 TypeScript/ESLint/Webpack 搭建了一个 React 应用。这篇文章中,我们继续在上一篇文章的基础上加入 CSS/Less/Sass/Antd 当然！样式肯定是不会生效的。因为组件根本不知道container是在哪里被定义的。 s…"}, {"id": "6844903892019331086", "title": "在React中实现点击空白区域关闭指定元素的实现", "desc": "当我们自定义了一个弹出组件时，一个常见的需求就是要点击除了这块弹出层之外的空白区域将这个弹出层关掉。你可能会说，这还不简单，利用事件冒泡机制，在document上加一个监听事件用来关闭这个弹出层，然后在弹出层和呼出弹出层的点击事件上阻止冒泡不就好了嘛！ 嗯，如果在普通html页…"}, {"id": "6844903953742708744", "title": "HooX: 基于Hook的React状态管理工具", "desc": "关于react hook我就不多介绍了。hook提供了抽象状态的能力，自然而然让人想到可以基于hook抽离全局状态。其天生自带轮子光环，所以社区也出现了不少基于hook的状态管理工具，比如说前阵子飞冰团队出的icestore，亦或者这个stamen，不过相对来说我更喜欢的还是这…"}, {"id": "6844903567636070408", "title": "前端开发大杀器hey-cli，全局支持vue react es6开发部署", "desc": "其实，这是一个集成的webpack脚手架。 现今网络上，相信关于webpack的配置，大家也看了不少，基本上比较流行的框架大家都推荐使用webpack来开发部署。 前面有vue-cli的工具，后有ant-design的，大家都基本上帮我们把webpack的那一些配置配置好。 可…"}, {"id": "6844903721688629256", "title": "(译)React hooks：它不是一种魔法，只是一个数组——使用图表揭秘提案规则", "desc": "我是一名hooks API的忠实粉丝，然而它对你的使用会有一些奇怪的约束，所以我在本文中使用一个模型来把原理展示给那些想去使用新的API却难以理解它的规则的人。 本文提到的 Hooks API 还处于实验阶段，如果你需要的是稳定的 React API 文档，可以从这里找到。 我…"}, {"id": "6844903497222062087", "title": "给 Web 开发人员推荐的文档生成工具", "desc": "工欲善其事必先利其器，在此给 Web 开发人员推荐几款优秀的开源文档生成工具，希望能对大家有所帮助。"}, {"id": "6844903726084259848", "title": "像呼吸一样自然：React hooks + RxJS", "desc": "思路清奇！"}, {"id": "6995058293328576525", "title": "走走React这条路-见识一下组件实例三大属性state、props、refs！", "desc": "函数式组件适用于简单组件的定义，我们可以简单认为只需要根据传入的props展示数据而不需要涉及state状态的操作的组件归类为简单组件，也叫无状态组件"}, {"id": "6844904049427349512", "title": "边写边学系列（四）—— Gatsby 搭建炫酷屌炸天的个人博客", "desc": "说来巧得不行，前两天正好买了本《唐诗三百首》附赠了一个电子书《了不起的盖茨比》，我心想现在淘宝卖书的都开始送编程书了咋呢？😄，结果人家是本小说，虽然我没读过，但是好像还很有名。不过没关系，作为一名前端 Coder，没读过《了不起的盖茨比》不要紧，但是 《静态站领域 NB 的 …"}, {"id": "6943148190174707748", "title": "React中PureComponent和Component的区别", "desc": "在今天之前,一直都是处于边学习边用react开发项目的过程中，起初一直以为 PureComponent 和 Component 功能是一样的，只是 PureComponent 与 Component 相比提升了性能，但是为什么提升性能以及两者之间又有什么不同没有去进行深入的了解…"}, {"id": "6844903993852837902", "title": "一个React项目总结（toB）", "desc": "一个toB的智能制造项目，分为分析端和管理端。分析端涉及到各种图表展示，通过时间范围来控制显示内容；管理端主要是大量表单&表格。（第一次正经用react进行开发，学习了一个星期就开工咯( ╯□╰ )） （可以download到本地，install依赖，然后直接启动。我把业务代码…"}, {"id": "6917422830145503240", "title": "React state属性【七日打卡】", "desc": "本篇博文主要梳理state属性的应用场景及应用实例。 React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。 React 里，只需更新组件的 state，然后根据新的 state 重新渲染用…"}, {"id": "6865182299941109774", "title": " Webpack构建library时的踩坑经历", "desc": "随着组件化、模块化意识地不断增强，越来越多同学开始构建npm包来供业务复用了。问题是构建出的package在使用时，会抛出ReactDOM找不到的异常，后来通过查看构建出的源码，结合webpack打包原理，找到了解决方案。 ## 案发现场 首先，我们回顾一下案发现场。 ``` …"}, {"id": "6844903639748722696", "title": "一个简单的Node-React-Koa用户管理增删改查小demo", "desc": "作为一个前端小新手，在尝试了一段时间的react前端工作后，就想尝试用node编写web服务，假装自己很厉害。在看了一段时间的node教程+express教程+koa教程等，就开始准备自己写一个小demo。 一个简单的用户列表页面，顶部有查询，添加用户按钮，列表中有删除，编辑用…"}, {"id": "6995743945602891784", "title": "React学习笔记：调和器（Recociler）- Fiber reconclier", "desc": "由于stack reconciler中存在任务打断实现成本过高等问题，React从16版本开始，把fiber reconclier 变成了默认的 reconciler，需要注意的时，此时并没有开启并发"}, {"id": "6844903602645909518", "title": "精读《async/await 是把双刃剑》", "desc": "本周精读内容是 《逃离 async/await 地狱》。 终于，async/await 也被吐槽了。Aditya Agarwal 认为 async/await 语法让我们陷入了新的麻烦之中。 其实，笔者也早就觉得哪儿不对劲了，终于有个人把实话说了出来，async/await 可…"}, {"id": "6845166890990452744", "title": "React Hooks为我们带来了什么", "desc": "目前组件化开发思想已经成为了前端的主流。三大框架(Vue, React, Angular)都是组件化开发最好的引领者。 社区有很多的文章告诉我们如何做组件划分，应该遵循哪些原则。并且在做项目的过程中你也一定有一些自己的关于组件划分的心得体会。 所有的这些，归根结底，都是在教导我…"}, {"id": "6844903583725387783", "title": "vuejs单页应用的权限管理实践", "desc": "在众多的B端应用中,简单如小型企业的管理后台,还是大型的CMS,CRM系统,权限管理都是一个重中之重的需求,过往的web应用大多采取服务端模板+服务端路由的模式,权限管理自然也由服务端进行控制和过滤.但是在前后端分离的大潮下,如果采用单页应用开发模式的话,前端也无可避免要配合服…"}, {"id": "6844903593762357261", "title": "react技术栈全家桶（总结及感悟）", "desc": "react确实是一个神奇而优雅的框架。在从事react项目之前，一直是在做angular的，angular是一个全面和庞大的框架，在起初设计的时候什么都有，复杂程度也很高，所以用angular做项目基本上不需要其他的辅助库来配合。但是react项目真的是不一样了，要是只会一个r…"}, {"id": "6844903576112726029", "title": "typescript-react-webpack4 起手与踩坑", "desc": "webpack4正式版发布也有一段时间了, 为了从实际中感受变化, 于是以typescript, react, 结合之前翻译的一篇文章webpack-4.0更新日志（翻译）, 搭建一个可供项目使用的框架. ...... 我是由另一个项目升级过来的, 因为原项目没用babel, …"}, {"id": "6844903791947431949", "title": "前端技术周刊 2019-03-04：React 性能优化", "desc": "iOS 12.2 和 Safari 12.1 中包含了更新的智能跟踪预防模块，它将完全防止采用跨站追踪技术的第三方改变顶级域名中的 Cookie，只能在用户最后交互 30 天内通过 Storage Access API 完成 Cookie 读取；document.cookie …"}, {"id": "6983525816298651656", "title": "React 源码之冒泡阶段", "desc": "冒泡阶段 冒泡阶段的起始函数是completeUnitOfWork。 在上一章我们知道了beignWork完成成Fiber节点的创建，diff算法，调用render阶段的部分生命周期函数。 我们这一章"}, {"id": "6844904176892248072", "title": "React 初次渲染源码剖析", "desc": "答：当项目复杂时 Fiber 树拥有很多很多的节点，如果通过遍历每个节点的方式去运行当前节点副作用的话时间复杂度会上升，所以在构建树的时候通过判断每个节点的 effectTag 将副作用关联起来生成一个链表可以有效的降低时间复杂度提升程序效率。 答：副作用处理 componen…"}, {"id": "6844903504675340296", "title": "在 Create-React-App 中使用 TypeScript(汉化)", "desc": "这篇快速入门指南将告诉你 如何将 TypeScript 和 React 联系起来. 我们将使用 create-react-app 工具来快速建立项目. 我们假设你已经在使用 Node.js 和 npm. 你也应当有一些 React 基础知识 的了解. 我们将要使用 create…"}, {"id": "6844903855239462925", "title": "[译]React中的用户认证(登录态管理)", "desc": "本文主要展示在当下 React 应用开发中，怎么使用 Context 和 Hooks 来管理用户的认证(也就是登录态)。 嗯，最终的代码大概就长这样。大多数 需要进行用户认证管理的应用，都可以使用类似上面的逻辑来管理用户登录状态。当用户访问我们应用中的某个需要登录后才能访问的页…"}, {"id": "6844903510631251975", "title": "使用 Typescript 踩 react-redux 的坑", "desc": "然后竟然没想到在项目刚开始就深陷大坑--搭建react-redux项目流程，一下内容就是记录我是怎样从这个深坑中爬出来的过程。 从项目创建之后就掉坑里了。。。 然后就开始报错了。。。 哇心态爆炸，都不知道怎么写这个断言。。。然后我想起了antd的一个例子，写的是React.Re…"}, {"id": "6844904133523144718", "title": "react 原生实现头像滚动播放", "desc": "现在。。。 憋说话，先看看效果。 感觉很简单呀，直接渲染，transform就可以了，嗯嗯，是的没错。 渲染出来，获取元素，然后添加css，美中不足衔接不是很顺畅，不过还是做出来了。 一次性返回几百条数据，什么鬼，难道还直接渲染吗，我的天，100多个，渲染出来，那酸爽，得了吧，…"}, {"id": "6952807912435777567", "title": "在typescript和react hook下如何更好的管理API", "desc": "背景在前后分离的业务场景下，如今客户端与服务端的桥梁是那一个个API。今天, 我们聊聊在typescript和 react hooks的技术栈下，如何更好的管理api。先分析一下在使用API时，我们需"}, {"id": "6869309803248746503", "title": "candys-tool 中后台前端页面配置化引擎", "desc": "candys-tool是基于react开发的中后台前端页面配置化引擎工具。其主要功能是实现页面的可视化配置化开发，只需要处理页面字段，以及业务逻辑，无需代码开发。工具中的各种模版引擎会处理好页面的数据"}, {"id": "6844903903058739213", "title": "React 源码系列-Component、PureComponent、function Component 分析", "desc": "给 PureComponent 重新指向构造函数之后，_assign 复制对象属性时， Component 构造函数不会覆盖 PureComponent 构造函数，看下面的例子就明白了。 把 PureComponent 变成 Component，userInfo 可正常变化。"}, {"id": "6898147400456601608", "title": "React 传送门 - 实现Dialog弹窗组件", "desc": "protal不仅可以实现一些弹窗，对话框组件，在使用到地图Api,图表的业务场景下也是很实用的，一般而言，地图的层级一般是比较高的，对于地图封装的一些方法例如滚动，禁止滚动等场景下，地图的滚动事件和浏览的的滚动事件可能会发生冲突，此时可以通过将地图挂载其他的节点中，已避免事件冲…"}, {"id": "6844903911396999182", "title": "create-react-app初探", "desc": "然后，将.js文件后缀改成.ts重启development server即可。 CRA除了能帮我们构建出一个React的SPA项目(generator)，充当脚手架的作用。还能为我们在项目开发，编译时进行构建，充当builder的作用。可以看到生成的项目中的package.js…"}, {"id": "6844903591845724167", "title": "React 深入系列３：Props 和 State", "desc": "组件根据props和state两个参数，计算得到对应界面的UI。可见，props 和 state 是组件的两个重要数据源。 本篇文章不是对props 和state 基本用法的介绍，而是尝试从更深层次解释props 和 state，并且归纳使用它们时的注意事项。 **一句话概括，…"}, {"id": "6844903621369298957", "title": "[译] Vue.js 还是 React？你会选择哪一个？为什么？", "desc": "两者之间的区别很有意思，但不仅仅局限于 JSX 与 Templates 或者丰富的 API 与少量的 API 的区别。React 和 Vue 两者之间的选择可能导致截然不同的结果，这一点在你一开始选择的时候可能并没有意识到。当选择一个框架的时候，一个重要的问题是「我希望项目的复…"}, {"id": "6921320490409836551", "title": "react hooks + mobx  usage of summary", "desc": "随着react 从 v16.8 开始，加入 FC 写法，持续升级至如今的 v17，mobx 也又 mobx v4/v5 -> v6，当前 mobx v16 版本可以很好的支持 react hooks 方式，市面上同样存在着其他优秀的数据管理工具，比如 recoil。"}, {"id": "6844903783470727181", "title": "从0到1，一步步开发React的loading组件，并发布到npm上", "desc": "没有发布过npm包的同学，可能会对NPM对开发有一种蜜汁敬畏，觉得这是一个很高大上的东西。甚至有次面试，面试官问我有没有发过npm包，当时只用过还没写过，我想应该挺难的，就小声说了没有，然后就让我回去了o(╯□╰)o。 其实，在现在的我看来，npm包就是一个我们平时经常写的一个…"}, {"id": "6908603290406092814", "title": "React 路由原理", "desc": "实际开发时我们并不会直接使用 react-router，而是在网页应用中使用 react-router-dom，在native 中对应使用 react-router-native。由于一直是做网页开发，此处也主要针对 react-router-dom 的源码进行分析，安装该依赖…"}, {"id": "6844903732157612039", "title": "[译] React 是如何区分 Class 和 Function 的 ?", "desc": "如果 Greeting 是一个函数，React 需要调用它。 无论哪种情况 React 的目标都是去获取渲染后的节点（在这个案例中，<p>Hello</p>）。但具体的步骤取决于 Greeting 是如何定义的。 就像我 上一篇博客 中提到的，你并不需要知道这个才能高效使用 R…"}, {"id": "6896637837895008263", "title": "精通 React SSR 之 API 篇", "desc": "最基础的 SSR API，输入 React 组件（准确来说是ReactElement），输出 HTML 字符串。之后由客户端 hydrate API 对服务端返回的视图结构附加上交互行为，完成页面渲染： 而React 16 改用单节点校验来复用（服务端返回的）HTML 节点，不…"}, {"id": "6844903929549963271", "title": "react ssr原理", "desc": "待续..."}, {"id": "6844904179404636167", "title": "小卢碎碎念之 React Hooks", "desc": "此文主要是个人在使用了 react hooks 一段时间后， 对于 react hooks 的理解，也是一个碎碎念。各位大佬如果觉得有什么问题可以提出来讨论讨论，也接受批评哦~ 本质上看，好像每一个Hooks都是一个函数吼。 所以， 写/用法上肯定会与普通函数有些区别。 如果说…"}, {"id": "6909054199200219143", "title": "Hook 探究指南", "desc": "组件化给前端带来前所未有的流畅体验，我们可以使用这些组件拼装我们的完整的 UI 界面。开发提速的同时也提高了可维护性。但是随着业务功能复杂度的提高，越来越多的重复逻辑代码出现，我们不得不复制粘贴、不得不维护多处代码。为了解决这个问题，React 团队不断探究逻辑复用方案：从 M…"}, {"id": "6854573218628370440", "title": "使用react的context实现一个简单i18n", "desc": "写到这，我想起来webpack的ignore的plugin，加载多语言配置，肯定会将所有的语言全都load，假如你只需要cn，那么其他的语言包对你来说都是没有用的。经常见的就是moment这个，你会使用ignorePlugin忽略它，然后再手动引入 走到这，一个简单的i18n就…"}, {"id": "6920776589911261197", "title": "[译]深入理解React中的函数组件与类组件", "desc": "在React世界中，有两种编写React组件的方式。 一个使用函数，另一个使用类。 最近，函数组件变得越来越流行，那为什么呢？ 首先，明显的区别是语法。就像它们的名称一样，函数组件只是返回JSX的普通JavaScript函数。类组件是一个JavaScript类，它扩展了具有re…"}, {"id": "6943871649691205646", "title": "React入门 Ref", "desc": "上一篇博客我大概记录了一下react官方文档中关于核心概念的一些内容和想法。 从这篇博客开始继续去阅读高级指引，本次博客的主题就是React中的Ref。 Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。 在典型的 Reac…"}, {"id": "6844903858083201037", "title": "深入浅出 标签模板字符串 和 💅styled-components 💅", "desc": "在React 组件设计实践总结 03 - 样式的管理一文中吹了一波 styled-components 后，本文想深入来了解一下 styled-components 的原理. 如果你对 styled-components 还不了解，建议先阅读一下官方文档或前面的文章. 1. 处…"}, {"id": "6883363083314528270", "title": "翻译|immutability-helper使用文档", "desc": "本文基本等于直接翻译了immutability-helpergithub官方md，如果有兴趣也可直接点击链接跳转过去。 immutability-helper作为react-addons-update的一个替代，对于react中的状态使用可谓是帮助甚多，但是一直没有找到真正的官…"}, {"id": "6878652168577122311", "title": "React组件化设计下篇", "desc": "注意 useForm 是React Hooks的实现，只能用于函数组件。 安装rc-field-form,yarn add rc-field-form。 弹窗类组件的要求弹窗内容在A处声明，却在b处展示。react中相当于弹窗内容看起来 被render到一个组件里面去，实际改变…"}, {"id": "6896438096011739149", "title": "redux-thunk源码笔记", "desc": "此文是本人学习笔记，如有错误请指出，谢谢。原生Redux只支持同步数据流，当我们要进行异步请求数据的时候要使用redux-thunk，redux-thunk的源码非常精简，只有十几行"}, {"id": "6844903712977059854", "title": "React 16.x折腾记 - (6)  基于React 16.x+ Antd 3.x封装的一个声明式的查询组件(实用强大)", "desc": "但是感觉mobx没有想象中的好用,看到umi 2.x了，就着手又开始重构了。 此篇文章是我针对我们的搜索条件抽离的一个组件,仅供参考。 为了降低复杂度,子组件不考虑dva来维护状态,纯靠props和state构建,然后统一把构建的表单数据向父级暴露.."}, {"id": "6947866788096901157", "title": "react数据共享（context/react-redux/typescript版）", "desc": "Css模块化方式一直接将style.css改名为style.module.css使用import style from './style.module.css的方式引起使用<div className"}, {"id": "6844903901137764365", "title": "React Hooks与Redux的配合及状态管理方案", "desc": "Hooks面世已有一段时间，但目前在状态管理方面，还未正式推出官方解决方案。因此目前社区中hooks主要有这么三种方案来解决应用的状态管理问题 在这几个方案之中，个人认为暂时最有前景的就是第一种方案：Redux-React-Hooks，现已在Facebook incubator…"}, {"id": "6906867474608685063", "title": "从 Route 源码分析 children、component、render 区别和使用场景", "desc": "children 可以是一个方法或者是一个组件。 render是一个执行的方法。 component是一个组件。 children 只能是一个函数。 component 这个用的最多，设置需要渲染组件，不过千万不要当成函数使用，不然会消耗性能，不断创建销毁组件。 childre…"}, {"id": "6844903574938320909", "title": "CSS Modules", "desc": "CSS命名规范，基本又是每个团队都要面临的问题，规范必定会出一则，但最后能严格执行的，始终是一件很难的事。 这套法则注重 CSS 语义的表达和管理，初衷就是为了方便区分样式模块的归属，也方便日后复用，有点像 BEM 方法。但缺点也很明显：难理解，命名需要花额个的时间考虑其独特性…"}, {"id": "6844903510685777934", "title": "10集视频让你入门React构建和路由操作", "desc": "10集图文+视频的形式，让你掌握React项目的构建和路由操作。 希望帮助更多的前端爱好者学习。"}, {"id": "6844903651333373959", "title": "基于React的表单开发的分析(上)", "desc": "本文主要讲解后台系统与表单相关的页面开发，并分析如何才能更好地、高效地开发。 Ant Design是个服务于企业级产品的UI框架，主要可以用于中后台系统,它有基于React、Vue和Angular的实现。个人感觉Antd还是很强大的,API相当完善、全面，基本能实现你想要的各种…"}, {"id": "6844903639119577095", "title": "于是，我们给前端分享会定义了一个未定义的名字", "desc": "我个人私底下是挺喜欢和其他同学扯些和技术有关的话题的，相信和我类似的开发小伙伴们也一定不少。不过在个人有限的经历里，和一对一交（chui）流（bi）时的谈笑风生比起来，很多公司在小组和部门层面的分享相对就会平淡一些了。当然这完全是可以理解的：诸如业务繁忙程度、技术栈迭代速度、团…"}, {"id": "6953820644694097950", "title": "小卷子搬砖记之React开荒(一)", "desc": "react白菜一颗，人老了脑子不好用，就多写一写，愿能坚持更新下去 背景和特性 传统ui操作关注细节太多 程序状态多，不好跟踪和维护 react：始终整体刷新页面，无需关心细节 一个新概念 组件：re"}, {"id": "6844903608215945229", "title": "精读《现代 js 框架存在的根本原因》", "desc": "组件化。 拥有强大的开源社区。 拥有大量第三方库解决大部分问题。 拥有大量现成的第三方组件。 拥有浏览器拓展/工具帮助快速 debug。 友好的支持单页应用。 不，这些都不是根本原因，最多算前端框架的营销手段。作者给出的最根本原因是： 解决 UI 与状态同步的难题。 作者假设了…"}, {"id": "6844903504427892750", "title": "Redux 异步数据流方案对比", "desc": "而在实际业务中往往有大量异步场景，最原始的做法是在 React 组件 componentDidMount 的时候初始化异步流，通过 callback 或者 promise 的方式在调用 dispatch(action)，这样做把 view 层和 model 层混杂在一起，耦合严…"}, {"id": "6844903498346135565", "title": "React-Redux源码分析", "desc": "Redux，作为大型React应用状态管理最常用的工具，其概念理论和实践都是很值得我们学习，分析然后在实践中深入了解的，对前端开发者能力成长很有帮助。本篇计划结合Redux容器组件和展示型组件的区别对比以及Redux与React应用最常见的连接库，react-redux源码分析…"}, {"id": "6844903876483612680", "title": "搭建自己的React+Typescript环境（二）", "desc": "optimize-css-assets-webpack-plugin：在webpack打包时优化压缩css代码，主要使用 cssnano 压缩器。 webpack.splitChunks：webpack 4 最大的改动就是废除了 CommonsChunkPlugin 引入了 o…"}, {"id": "6993346576437477384", "title": "React中dangerouslySetInnerHTML属性将HTML字符串解析为html代码", "desc": "react中将HTML字符串解析为html代码标签属性:dangerouslySetInnerHTML的用法"}, {"id": "6884139364956241927", "title": "react基础教程之hook，redux（vue&react本就可学其一会其一）", "desc": "写在前面：本来是想写一篇从vue快速转到react的基础教程的，但是最近事情确实蛮烦人。每天断断续续的写也实在没心情写下去了 最基础的那部分也可以直接看react的文档吧，router等状态好点一定会补上的。函数编程的下篇也一定会补上的 react和vue其实很相似，掌握了一个…"}, {"id": "6844903775040176135", "title": "React是如何区分class和function的？", "desc": "(一直到 最近Hooks出现之前，这是唯一可以使用有(如state)功能的方法。) 但是React本身是要考虑两者之间的区别的。 但如果Greeting是一个class，React需要先用new操作实例一个对象，然后调用实例对象的render方法。 两种类别React的目的都是…"}, {"id": "6970603492167647240", "title": "React-render阶段——beginWork", "desc": "React源码render阶段,创建workInProgress, 循环调用beginWork创建当前工作单元的第一个子Fiber节点全流程"}, {"id": "6844904196823580685", "title": "React16 了解源码系列（一）", "desc": "总所周知，react源码不是一般的多，直接阅读react源码，真的是劝退... 虽然没有更完，但是写得相当精彩，反正我是看了还想看那种。（有点崔更了，哈哈） 在了解react架构之前，我们还需要了解一下浏览器渲染原理，主流的浏览器刷新频率为60Hz，即每（1000ms / 60…"}, {"id": "6844904025515786247", "title": "useTypescript-React Hooks和TypeScript完全指南", "desc": "React v16.8 引入了 Hooks，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。这些功能可以在应用程序中的各个组件之间使用，从而易于共享逻辑。Hook 令人兴奋并迅速被采用，React 团队甚至想象它们最终将替换类组件。 以前…"}, {"id": "6934192230475235335", "title": "手把手教你构建一个基于 React、TypeScript 的初始项目", "desc": "每次开始新的 React 项目都需要重新配置？这篇文章，我将带大家从头开始搭建一个基于 React、TypeScript 的初始项目，并做出一些配置，请在开始前安装好 Node 环境以供操作。 新建一个文件夹，命名 my-project，我们这里使用 create-react-…"}, {"id": "6844903756904022023", "title": "React Scheduler 源码详解（1）", "desc": "自从react 16出来以后，react fiber相关的文章层出不穷，但大多都是讲解fiber的数据结构，以及组件树的diff是如何由递归改为循环遍历的。对于time slicing的描述一般都说利用了requestIdleCallback这个api来做调度，但对于任务如何调…"}, {"id": "6859310522836189198", "title": "Redux，React-Router接入Hooks", "desc": "从概念上讲，selector 函数与 connect 的 mapStateToProps的参数是差不多一样的。selector 函数被调用时，将会被传入Redux store的整个state，作为唯一的参数。每次函数组件渲染时， selector 函数都会被调用。useSele…"}, {"id": "6844903503496740871", "title": "React系列---React（一）初识React", "desc": "React系列---React（一）初识React"}, {"id": "6844904057207783431", "title": "⚛️ Re: 从零开始的 React 再造之旅", "desc": "React 是目前最流行的前端框架，很多读者用 React 很溜，但想要深入学习 React 的原理就会被官方源码仓库浩瀚如烟的代码绕的晕头转向。今天我们通过不依赖任何第三方库的方式，抛弃边界处理、性能优化、安全性等弱相关代码手写一个基础版的 React，供大家学习和理解 Re…"}, {"id": "6844903616512262151", "title": "前端常用开发工具的路径解析配置", "desc": "题注：本文是 Webpack CheatSheet | Webpack 基础与实践清单的一部分，项目代码可以参考 fe-boilerplate | 多技术栈前端项目模板。 毫无疑问，这样繁多的引用不可避免地会导致代码之间耦合度的增加，使得更难以重构或者优化。在适当地模块划分的基…"}, {"id": "6844904048450076679", "title": "AMP 开发体验洗白之路", "desc": "「用户体验 > 开发体验」Google AMP 的设计准则毫不掩饰地标记了它的核心观念，从一开始就承认了它对开发者的不友好。 「Webnovel m 站」作为国内首批使用 AMP 技术的产品「关于 AMP，Webnovel 都做了什么？」之一，结论上创造了显著提升的性能数据，过…"}, {"id": "6844903607821664270", "title": "React-Typescript 单元测试：Jest + Enzyme", "desc": "按道理说官配用起来会更舒服才是，结果接连碰壁，加上雷同情况的资料确实有点少，只能填一下。 0. 目前遇到的问题 首先脚手架肯定不是cra（cra用户请直接用官方封装的测试就行），我们肯定会使用自己定制的脚手架。当我们在选用Jest做单测时，出现了几个问题： 第二点简直硬伤，直接…"}, {"id": "6953381180989243428", "title": "React 源码学习之 React 设计思想", "desc": "React 设计理念 从 React 官网 我们可以看到这样一句话： 我们知道目前主流浏览器刷新频率为 60Hz，即每（1000ms / 60Hz）16.6ms 浏览器刷新一次。在这 16.6ms 要"}, {"id": "6844903607519690765", "title": "实现Google带截图功能的web反馈插件", "desc": "几乎所有的APP应用包括Web应用都需要一个意见反馈，这样才能了解用户对产品的意见和建议，以便于不断提升完善自己的产品。目前的反馈组件一般有两种，一种是打开一个反馈页面填写表单，另一种则是通过弹窗来完成，相比较而言第二种更加方便，而且更加容易组件化。 由于本人比较喜欢谷歌的ma…"}, {"id": "6844904088631509000", "title": "React 服务端渲染实战，Next 最佳实践", "desc": "如果你的站点或者公司未来的站点需要用到服务端渲染，那么本文将会是非常适合你的一篇入门实战实践教学。本文采用 next 框架进行服务器渲染框架的搭建，最终将完成几个目标： 本文的最终目标是所有人都能跟着这篇教程搭建自己的（第）一个服务端渲染项目，那么，开始吧。 在 next 中，…"}, {"id": "6914679786166026247", "title": "react 基于 flv.js 封装简单的播放器（三）", "desc": "今天的一个小时只做了全屏和退出全屏。网上有很多文章，我就是复制粘贴，可是即便如此我也遇到了前所未有的问题，当然错误产生的原因还是自己的无知，只不过经过这次，再次告诉我，当出现原本不该出现错误的时候，这个时候一定要记得仔细看官网或者别人写的博客，而不是“瞟一眼”。当然最好是在看别…"}, {"id": "6844904106344087566", "title": "Handsontable自定义渲染", "desc": "在源码 src/editors/_baseEditor.js line 118 中(^\"6.2.2\")，如果不是字符串，它就stringify了一下，所以我们可以修改一下这个判断，来正常显示我们的数据。"}, {"id": "6850418110374592520", "title": "如何写一个nx schematic plugin？", "desc": "玩过Angular的同学都知道Angular作为一个Framework，拥有一套完备的生态，还集成了强大的CLI。而React则仅仅是一个轻量级的Library，官方社区只定义了一套组件的周期规则，而周边社区可以基于此规则实现自己的组件，React并不会提供给你一套开箱即用的方…"}, {"id": "6844903806556176398", "title": "【译】2019 年 JavaScript 开发者应该都在用的 9 个棒的技巧", "desc": "又一年过去了，JavaScript 也一直在变化进步着。这儿列举了一些小技巧帮你在 2019 年写出更简洁，高效的可拓展的代码。下面共列举了 9 个讲究使用的小技巧来帮助你成为更好的开发者。 1. async / await 如果你还陷入到回调地狱中，那么你应该回到 2014 …"}, {"id": "6903910716382642184", "title": "学习react 第四天", "desc": "React 的事件对象 e 会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过 bind 的方式，事件对象以及更多的参数将会被隐式的进行传递。"}, {"id": "6844903503899394055", "title": "[译] Vue 2.5 发布了", "desc": "我们很高兴宣布 Vue 2.5 Level E 的发布！本次发布包括多个功能提升并且我们推荐你查看发布说明来获取完整详细信息。 在这篇文章中，我们将重点介绍一些更重要的的变化：更好的 TypeScript 集成，更好的错误处理，更好地支持单文件组件中的功能组件以及与环境无关的服务"}, {"id": "6844903726918926344", "title": "【漫画】内存管理速成教程", "desc": "我一直很佩服那些能将复杂原理讲得通俗易懂的人，Lin Clark 女神 就是其中一个，拜读完她新发布的系列文章“通俗漫画介绍 SharedArrayBuffers”之后，深深为之折服，文章不仅一如既往地通俗易懂，作者亲自画的图更是和文章相得益彰。"}, {"id": "6844903561323610126", "title": "你听过 react Fragments吗？🙄", "desc": "React 中常见模式是为一个组件返回多个元素。为了包裹多个元素你肯定写过很多的 div 和 span，进行了不必要的嵌套，增加了浏览器的渲染压力。Fragments 可以让你聚合子元素列表，并且不增加额外节点。 15以前，render 函数的返回必须有一个根节点，否则报错，为…"}, {"id": "6844903732061143054", "title": "[译] 写给 React 开发者的自定义元素指南", "desc": "最近我需要构建 UI 界面，虽然现在 React.js 是我更为青睐的 UI 解决方案，不过长时间以来我第一次没有选择用它。然后我看了浏览器内置的 API 发现使用自定义元素（也就是 Web 组件）可能正是 React 开发者需要的方案。 自定义元素可以具有与 React 组件…"}, {"id": "6952876811223040014", "title": "一个 Vuer 初学 React", "desc": "前言 学了几天 React hook了，虽然还没有打过几行代码但是还是小有感触，记录一下。 作为一个 Vuer，深深感到 Vue 与 react hook 的思维太不一样了，它们完全是两种思维方式。 "}, {"id": "6844903688562016263", "title": "使用 React+TypeScript+Firebase 实现的 Chrome Extension 总结", "desc": "此文粗略记录用 React+TypeScript+Firebase 实现一个用来统计 Gitlab Spent Time 的 Chrome Extension 的过程。 当初想写这个扩展的动机，是源于我们公司将项目管理平台从 Redmine 切换到了 GitLab，GitLab…"}, {"id": "6844903504973135880", "title": "React 服务端渲染框架 Next.js 基于 Gank api 实战", "desc": "鉴于最近 vue 相关的文章写的比较多，抽出时间写点 react 的项目，当时用 react 还是 v15 现在都 v16 了，感慨跟不上所有框架的节奏（玩笑话），框架的本质都是大同小异的，每次高 star 框架更新看一下 change 是个好习惯。 Nuxt 文档里有写到灵感…"}, {"id": "6844903617648918535", "title": "所谓的 Virtual DOM 到底是什么？", "desc": "首发地址在知乎，由于个人精力有限，可能无法在此进行快速回应。 最近写了一个 ng-vdom 的 POC，用于将 Virtual DOM 对象渲染为原生 Angular 内容。 希望大家不要对 POC 有太多的误解，换句话说，不要有太大的期望。 通过最近（以及不那么近）的诸多问题…"}, {"id": "6844903665816305672", "title": "单页面路由原理及实现", "desc": "下面让我们来实现一个简单的路由系统。该路由系统将基于React进行书写。在写之前，我们先仔细想下，我们应该从哪方面入手。这是最终实现的效果simple-react-router-demo 不论是前端还是后端路由，我们都可以通过一种路由匹配加匹配后回调的方式来实现。如果没有理解也…"}, {"id": "6844903641741000717", "title": "微信小程序调起键盘性能优化", "desc": "在小程序中，我们经常有调起键盘的操作场景，但是在不同的场景下解决方案不尽相同，还是需要具体问题具体分析。 最近在项目中有一个需求，是从列表页点击评论按钮进入详情页时，在加载完页面后自动调起键盘进入评论状态。从需求来看，我们应该在onReady函数中调起键盘，因为onReady函…"}, {"id": "6844903606970384397", "title": "微信支付大规模前端开发背后，如何用外包解决困境", "desc": "内容来源：2017年6月24日，腾讯前端高级工程师郭润增在“腾讯Web前端大会 TFC 2017”进行《微信支付大规模前端外包实战》演讲分享。IT 大咖说（微信id：itdakashuo）作为独家视频合作方，经主办方和讲者审阅授权发布。 业务高速发展离不开各种配套运营系统的高效…"}, {"id": "6844903729821384711", "title": "React源代码解析（3）：组件的生命周期", "desc": "这一章可能比较长，因为这一章我会把生命周期,transaction,setState放到一起说明. 在上一章对于组件的挂载已经做了详细的说明，但是涉及到组件生命周期部分被略过.接下来我将对其深入解析. 组件的挂载涉及到二个比较重要的生命周期方法componentWillMoun…"}, {"id": "6844904143916630030", "title": "【THE LAST TIME】从 Redux 源码中学习它的范式", "desc": "【THE LAST TIME】 一直是我想写的一个系列，旨在厚积薄发，重温前端。 也是给自己的查缺补漏和技术分享。 范式概念是库恩范式理论的核心，而范式从本质上讲是一种理论体系。库恩指出：按既定的用法，范式就是一种公认的模型或模式。 而学习 Redux，也并非它的源码有多么复杂…"}, {"id": "6844903686536183822", "title": "「译」代码优化策略 — Idle Until Urgent", "desc": "几周前，我正着手查看我网站的一些性能指标。具体来说，我想看看我在我们最新的性能标准，即首次输入延迟 （FID）上的表现。由于我的网站只是一个博客（并没有运行很多 JavaScript ），所以我希望我能看到一个相当不错的结果。 小于 100 毫秒的输入延迟通常被用户视为即时响应…"}, {"id": "6844903700859715597", "title": "immutability因React官方出镜之使用总结分享！", "desc": "之前项目中遇到数据拷贝、引用之间数据层级嵌套过深，拷贝的值相互之间影响的问题，后来引入了immutability-helper，使用过程中的一些总结，跟大家分享下，至于为什么不是immutable，请看下文分解，这里是@IT·平头哥联盟，我是首席填坑官——苏南。 但是通常我们使…"}, {"id": "6912341481587998727", "title": "React Hooks 第二期：聊聊发请求这件事", "desc": "  发请求这件最简单的事情，只要接触web编程都会经常接触的一个环节，但是怎么做好请求一直都是个值得思考的问题，我都很难讲清楚为什么要使用hooks。关于ReactHooks也看了不少文章，但是始终没"}, {"id": "6844903605800009736", "title": "[译] React性能优化：Virtual Dom原理浅析", "desc": "本文译自《Optimizing React: Virtual DOM explained》，作者是Alexey Ivanov和Andy Barnov，来自Evil Martians’ team团队。 Optimizing React: Virtual DOM explained…"}, {"id": "6844903654340706317", "title": "\b从使用到原理，手撸一个自己的redux中间件", "desc": "而中间件（middleware）就是一个可插拔的机制，如果想找扩展某个功能，比如添加日志，在更新前后打印出state状态，只需要将日志中间件装到redux上即可，于是便有了日志功能，当不想使用时可再拿掉，非常方便。 先说说用法，只有会用了，再说原理。 redux-thunk中间…"}, {"id": "6844903605225390087", "title": "React 中集成 Markdown编辑器", "desc": "采用上述方式，发现并没有明显效果，可能资源资源版本过低。所以推荐下面一种方式。当然也可以将本地资源推送到自己的CDN上使用。 拷贝https://github.com/Houfeng/mditor/tree/master/packages/embed/dist目录下的资源到本地…"}, {"id": "6844903497435971592", "title": "译：Facebook将修改React、Jest、Flow 与 Immutable.js授权许可（重磅）", "desc": "社区经历了数周对React授权许可的争议和失望后，终于迎来了希望的曙光。React开发团队决定在React 16的发布中修改React及相关开源项目的授权许可。诚如React开发团队所说，他们希望将授权许可的争议抛下，重新回归最重要的事情上去。"}, {"id": "6994417850609827848", "title": "解决react+Antd@4 中Form表单中的input的回显木有东西", "desc": "​  今天敲代码的时候用antd4，在form表单里想实现一个数据的回显，显示到input框中，所以我就用了最原始的办法 ​  但是我发现这样出来是没有数据的 ​  然后我就马不停蹄的开始对着度娘各种"}, {"id": "6907909107521437710", "title": "react 入门笔记1", "desc": "一：react入门安装CDN引入方式：https://www.bootcdn.cn/此处可以找到相对应到cdn资源，只截了一小块，有兴趣到可以进去查看推荐使用npm方式：npmi-gcreate-re"}, {"id": "6850418116011409421", "title": "React HOC 反向继承实现 路由参数同步", "desc": "sync-query❄️使用 React 高阶组件，实现 React state 和 路由参数之间的同步源码地址https://github.com/NeoYo/sync-query安装yarn ad"}, {"id": "6844903703560847368", "title": "都8102年了！是时候有个新的状态容器取代redux了！", "desc": "rako是一个声明式、可预测、可拓展、高内聚、简单且强大的JavaScript状态容器。 rako的设计源于最简单的OOP编程，虽然简单但是极具表现力。 与直接定义profile特别相似，只不过用了一个function包裹了profile,更新使用了传入的参数update，但是…"}, {"id": "6844903713283457037", "title": "我理想中的状态管理工具", "desc": "现已存在许多成熟的状态管理解决方案：Redux、Mobx、Mobx-state-tree，还有基于 Redux 的 Dva.js、Rematch... 但对于我个人来说，理想的状态管理工具只需同时满足两个特点： 要做到这两点其实并不简单。 我碰巧写写过一个类似状态管理库，叫 m…"}, {"id": "6844903669842853896", "title": "学习React，从攻克JSX开始", "desc": "吐槽：虽然JSX出发点是好的，而且写起来也很简单，但是对于要在JS中写类HTML格式的内容，我的内心是排斥的，感觉非常不习惯。这不是我熟知的web开发啊！有种在开发app的感觉，一个个自定义的组件。 第二个参数[props]其实就是各种属性，我们在JS中怎么写属性的，在这里就怎…"}, {"id": "6844903943592476686", "title": "React基础（二）生命周期函数", "desc": "没有显示定义，也会自动添加。 如果显示定义了构造函数，必须在构造函数的第一行执行super（props），否则无法在构造函数中拿到this对象。 只做两件事。 在constructor函数不要调用setState方法。可以直接this.state对state赋值 要避免在构造函…"}, {"id": "6863739994855604237", "title": "React学习笔记 --- jsx核心语法（下）", "desc": "一、在属性中使用变量基本使用此时在界面上就已经出现了一张图片但是这个图片可能比较大，所以我们可以使用如下几种方式来修改这张图片的大小通过css来进行设置浏览器要解析CSS代码浏览器需要缩放图片所以这种"}, {"id": "6844903651358539789", "title": "react-native 使用leanclound消息推送", "desc": "1.注册：为应用程序申请消息推送服务。此时你的设备会向APNs服务器发送注册请求。2. APNs服务器接受请求，并将deviceToken返给你设备上的应用程序 3.客户端应用程序将deviceToken发送给后台服务器程序，后台接收并储存。 5. 获取deviceToken,…"}, {"id": "6844903507993051149", "title": "Redux学习笔记", "desc": "所有的状态存放在Store。组件每次重新渲染，都必须由状态变化引起。 用户在 UI 上发出action。 reducer函数接收action，然后根据当前的state，计算出新的state。 随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何…"}, {"id": "6844904021514256392", "title": "React的事件机制一 --- 注册", "desc": "关于事件，相信都不陌生。 我们再DOM上绑定事件，并给定一个处理函数。在DOM上事件触发的时候，会执行处理函数。 当然也有另外一种事件绑定机制---代理。 一般我们再用ul元素的时候，我们的事件一般是绑定在li的父元素ul上，这样让ul来代理li的事件，这样只用绑定一次即可，而…"}, {"id": "6844903541354528776", "title": "前端每周清单第 45 期: Safari 支持 Service Worker, Parcel 完整教程, 2017 前端大事件", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 Safari 支持 Service Wo…"}, {"id": "6844903989520105479", "title": "🎉 React Suite 4.1.0 版本发布，支持 RTL", "desc": "React Suite 在两个月前发布了 4.0 版本，支持 Dark 模式，让越来越多的开发者注意到它是一个注重国际化与可访问性的 UI 组件库。在两个月后的今天迎来了 4.1 版本发布，在本次版本中我们新增与改进了一些组件，同时让组件支持 Right-to-left (RT…"}, {"id": "6844903606315925517", "title": "从源码理解Redux和Koa2的中间件机制", "desc": "Redux和Koa的中间件机制相关源码都很精简。 正文我将直接引用部分源码，并加以注释来帮助我们更清晰的理解中间件机制。 本来不想写这么长来着，但希望更多大家能够更简单的理解，就多贴了些源码，毕竟代码远比文字更好理解，下面我用logger和thunk的源码(简化)来做承接上文的…"}, {"id": "6950109627723972622", "title": "Redux应用二：多个reducer合成一个根reducer", "desc": "多个reducer应用，配合redux-thunk一个页面或一个组件都有单独的reducer通过combineReducers将多个reducer和成一个reducer组件的store，index为出"}, {"id": "6844903502041333773", "title": "open-dingtalk/which-language-demo", "desc": "look me, we can just do more demo. guess, u select which one ? 钉钉开发社区有数以万计的企业服务开发者，你的公开演示程序，可以有很高机会曝光让其他的开发者学习，使用，甚至可以在这里认识更多志同道合的开发者。 使用[语…"}, {"id": "6844903940035706888", "title": "React hooks的使用小结", "desc": "我们都知道，在React中一切都是组件，而组件的创建方式有多种。如果你是久经战场的React开发者，那你肯定知道createclass创建组件的方式，但是这种方式已经过时了。目前常用的两种创建组件的方式是使用es6的class来创建组件，我们称为类组件，以及使用普通的函数来创建…"}, {"id": "6939088731299119117", "title": "React输入拼音触发搜索", "desc": "在打造search组件时会经常使用到input组件，但这有一个就是当用户输入拼音时便触发搜索功能有时候这并不是我们想要的。 这时候就需要引入我们的 compositionstart，compositionend，这两个都是input身上的函数，可以理解为其身上的生命周期函数，会…"}, {"id": "6844903537369939981", "title": "How to use CircleCI for GitHub Pages Continuous Deployment", "desc": "使用 CircleCI 自动构建 Gatsby 等静态站点生成器并自动部署。"}, {"id": "6844903861703065607", "title": "React教程之Redux状态管理", "desc": "虽然是react的一个状态管理库，可以单独使用，接下来我们详细讲解下底层代码。 废话不多讲，先说下基本的知识点。 actions 是通过 store.dispatch(action)改变 state的唯一方法，不能直接通过 this.state = {} 来直接改变 state…"}, {"id": "6844903625785868302", "title": "MobX入门 TodoList", "desc": "one more time one more chance. 一歩重头学前端, MobX入门。 MobX用于简单、可扩展的状态管理。通常搭配 React 使用，但不只限于 React。如何你厌烦了 Redux 繁杂的模板代码和 API，那么可以尝试下 MobX。网上好像流传： …"}, {"id": "6844903847073153032", "title": "前端小白的成长之路(序)", "desc": "一直计划准备一些博客，种种原因搁浅（主要还是懒。。。），正好公司的项目重构完，组件库和基础逻辑都封装好了，剩下的开发大多其实是繁复的代码组装的体力活，重要的是我司进入敏捷开发节奏后，突然就不忙了，哈哈哈...遂给自己开了这个专栏，一是为了督促自己记录下编写过程和一些踩的坑，跟大…"}, {"id": "6844903844900503565", "title": "【译】函数式的React", "desc": "React 是现在最流行的 JavaScript 库之一。使用 React 可以非常轻松地创建 Web 用户交互界面。 它的成功有很多因素，但也许其中一个因素是清晰有效的编程方法。 在 React 的世界中，UI 是由一个一个组件所组成的。组件可以组合在一起以创建其他组件， 应…"}, {"id": "6844903550556848141", "title": "React系列——React Fiber 架构介绍资料汇总（翻译+中文资料）", "desc": "React Fibre是React核心算法正在进行的重新实现。它是React团队两年多的研究成果。 React Fiber的目标是提高其对动画，布局和手势等领域的适用性。它的主体特征是增量渲染：能够将渲染工作分割成块，并将其分散到多个帧中。 其他主要功能包括在进行更新时暂停，…"}, {"id": "6844903498245488654", "title": "写给前端看的架构文章(1)：MVC VS Flux", "desc": "前言在学习React.js的过程中，曾经最让我苦恼的事情是，我需要给自己一个使用这个框架的理由。因为随着学习经验的和工作经验的增长，你会发现类似的技术总是会此消彼长的出现，如果这只是另一个轮子怎么办？加之学习的成本、项目改造的成本甚至周围人来适应…"}, {"id": "6844903845458345997", "title": "[译]编写react组件最佳实践", "desc": "我最开始学习react的时候，看到过各种各样编写组件的方式，不同教程中提出的方法往往有很大不同。当时虽说react这个框架已经十分成熟，但是似乎还没有一种公认正确的使用方法。过去几年中，我们团队编写了很多react组件，我们对实现方法进行了不断的优化，直到满意。 本文介绍了我们…"}, {"id": "6844903802013745159", "title": "编写有弹性的组件", "desc": "当大家开始学习 React 时，常常问到风格指南。虽然呢，项目中应用一致的规则，是个不错的主意，但是很多规则挺随意的——所以 React 对这些并没有强烈的意见。 你可以使用不同的类型系统，使用函数声明或者箭头函数，也可以对你的属性按字母序或任何你愿意的其他顺序来排序。 这样的…"}, {"id": "6844903566801551374", "title": "React源码分析 - 组件更新与事务", "desc": "在React中，组件的更新本质上都是由setState操作改变state引起的。因此组件更新的入口在于setState，同样经过撸源码和打断点分析画了以下的组件更新的流程图： 这里需要注意enqueueUpdate中根据batchingStrategy.isBatchingUp…"}, {"id": "6844903717544656909", "title": "如何构建通用存储中间层", "desc": "开门见山地说，这篇文章【又】是一篇安利软文~，安利的对象就是 tua-storage。 顾名思义，这就是一款存储数据的工具。 日常开发中，在不同的平台下由于有不同的存储层接口，所以往往导致相同逻辑的同一份代码要写几份儿。 在 React-Native 的场景下，使用的又是 As…"}, {"id": "6844903519468666893", "title": "Airbnb 近期对房源展示页面的性能优化", "desc": "从渲染、滑动、点击、输入各个方面提升页面性能"}, {"id": "6844903512120229901", "title": "[译]react模式", "desc": "无状态函数 是定义高度可复用组件的绝妙方法。它们不保存状态，它们仅仅是函数。 它们得到传入的props和context. 它们可以定义函数块内的局部变量。 但使用其他函数可以得到相同的结果。 它们也可以定义defaultProps, propTypes和contextTypes…"}, {"id": "6844903715355230222", "title": "React中 `锁定`this的N种‘facade pattern’模式", "desc": "由于本文是主要介绍React中锁定this的N种方法，不会过多的介绍this多面性的原因，相信大家应该都知道词法作用域和动态作用域。并且也知道在es6之前我们依然有很多种方式，去锁定this的指向（call, apply, bind）。接下来我们也会结合这些方式，在React中…"}, {"id": "6844903560589623310", "title": "用 react+moox 五分钟写一个 todomvc 应用", "desc": "使用 react, redux 开发一个应用是非常复杂的，moox 是基于 redux 的高性能状态管理机，简化了 redux 模板代码和提高了效率，本篇教程将带领大家在五分钟时间做一个 todomvc 应用。 store 通过 getStore 方法获取，传给 Provide…"}, {"id": "6844903618512977927", "title": "生鲜 B2B 技术平台的前端团队该如何搭建（B2B 技术共享第七篇）", "desc": "线下越重，线上需要越轻，这个轻指的是轻便轻巧和简洁易用，通过前面几章小菜技术与产品历史介绍，我们了解到 B2B 生鲜领域在线下是如此之重，那么在交易场景线上化的过程中，端的移动化就势在必行，试想一下，让菜市场摊位老板人手一台笔记本点开网页选购支付，让采购销售抱着电脑去拜访客户，…"}, {"id": "6844903672665604104", "title": "DvaJS的学习之路2 - umi@2 + dva，完成用户管理的 CURD 应用", "desc": "最近一个月来使用 dva 对公司存量项目进行重构，比较少时间写文章了。随着9月开学季节的到来，最近在使用的几个开源项目都迎来了重大更新。首先就是 umi 终于迎来了 2.0 版本，具体介绍可以查看 发布 umi 2.0，可插拔的企业级 react 应用框架。随之而来的是使用 u…"}, {"id": "6844903976836530189", "title": "React 初学者需要知道的一些知识", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 可以给每个方法加上.bind(this)来解决 this 指向的问题，因为大多数教程都告诉你这样做。如果你有几个受控组件，那么constructor(){}中就会有一大堆代码。 ES6 的箭头函数使用词法作用域…"}, {"id": "6992396038346637349", "title": "总结react-router-dom", "desc": "React Router建立在history之上，一个history知道如何去监听浏览器地址栏的变化，并解析这个URL转化为 location 对象，router 使用它匹配到路由，正确渲染对应的组件"}, {"id": "6844904147746029581", "title": "React 中渐进式加载图片", "desc": "你是否好奇 Medium 是如何加载图片的？或许，你已经注意到图片是分多个步骤加载渲染的。首先，显示一张模糊版本的图片，然后，用全尺寸的图片替换掉。 我们可以把图片加载技术分为两个不同的功能。 1. 懒加载 懒加载是一种非常好的技术，它可以明显提升网站的性能。 想象一下，你写了…"}, {"id": "6844904100891459591", "title": "函数式组件 && React Hook", "desc": "Class组件是我们现在最常见的组件用法，它拥有组件内的状态和生命周期等一些特性。Class组件是最常见的React组件写法，它需要声明一个class并去继承 react 的Component 类。类组件使用范围广泛，它拥有内部状态、生命周期等一系列方法。 函数式组件写法更加简…"}, {"id": "6968740862587043853", "title": "使用React构建多端容器", "desc": "本文就如何设计多端容器做出实现方案。本文指的多端并非是跨端，多端容器泛指容器提供统一能力，以供下游应用在多种环境下的容器加载并正常运行。各端容器提供的能力可能不同，下游也无需关心上层实现及依赖，"}, {"id": "6883375052692291598", "title": "React监听事件执行的方法中如何获取最新的state", "desc": "我们要知道在handleClick函数中拿到的count和函数外拿到的count已经不是同一个东西了，函数内的count在开始监听document.addEventListene的时候已经确定了。"}, {"id": "6844904135603699719", "title": "前端实现曝光埋点方案 - React HOC + Intersection Observer", "desc": "首先曝光埋点是指记录某个商品（dom元素）出现在指定视图下的频率，平台可通过大数据分析出用户的习惯，从而达到增加用户的购买力的效果。 dom滑动至可视区域，印入脑海的第一种方案是监听滚动事件，通过Element.getBoundingClientRect() 计算目标元素与视图…"}, {"id": "6936864901126160392", "title": "React fiber 架构浅析", "desc": "是通过递归更新子组件 。由于递归执行，所以更新一旦开始，中途就无法中断。当层级很深时，递归更新时间超过了16ms，用户交互就会卡顿。 通过把diff算法分成很多小片。当一个小片执行完成时，由浏览器判断是否有时间继续执行新任务，没时间就终止执行，有时间就检查任务列表中有没有新的、…"}, {"id": "6916716317013868558", "title": "我是如何在 Nextjs 项目中使用Storybook驱动组件开发的？", "desc": "在使用 React开发组件时经常会有一些苦恼，比如当一个组件的复杂度逐步上升时，它所拥有的状态不容易追溯；当需要查看某种状态的组件时，可能需要手动更改组件的属性或是更改接口返回的数据（数据驱动的组件）等等。于是我就去了解并学习 Storybook，然后组织了一次分享会，这也是我…"}, {"id": "6844904132143218696", "title": "精读《React Error Boundaries》", "desc": "Error Boundaries 是 React16 提出来用来捕获渲染时错误的概念，今天我们一起读一读 A Simple Guide to Error Boundaries in React 这篇文章，了解一下这个重要机制。 static getDerivedStateFro…"}, {"id": "6910845760657424397", "title": "基础-搭建react项目教程", "desc": "本文详细的介绍如何从头开始搭建一个react项目，帮助新人了解项目搭建流程和打包流程。 需要注意包版本问题，不同版本代表着不同的代码。如果包版本不同启动项目时可能会出现未知错误。 Node.js 是能够在服务器端运行 JavaScript 的开放源代码、跨平台 JavaScri…"}, {"id": "6844903636787544071", "title": "2018年6月前端面试经历(下)", "desc": "mountComponent 负责管理生命周期中的 getInitialState、componentWillMount、render 和 componentDidMount。 updateComponent 负责管理生命周期中的 componentWillReceivePro…"}, {"id": "6990319489183121444", "title": "BLoc模式在React中使用-业务逻辑组件的独立使用", "desc": "使你的业务逻辑独立于UI组件 最初，业务逻辑组件（BLoC）模式是由谷歌引入的，作为处理Flutter应用程序中状态的解决方案。它允许你通过将业务逻辑与UI组件分离来减少UI组件的工作负荷。 随着时间"}, {"id": "6970232548756553742", "title": "react mobx状态管理 基本使用", "desc": "参考链接： https://juejin.cn/post/6844903766949363726 Mobx官方文档 前言 Mobx是一个透明函数响应式编程（Transparently Function"}, {"id": "6844903856850092046", "title": "【译】你要的 React 面试知识点，都在这了", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 React是流行的javascript框架之一，在2019年及以后将会更加流行。React于2013年首次发布，多年来广受欢迎。它是一个声明性的、基于组件的、用于构建用户界面的高效javascript库。 以下…"}, {"id": "6844904016724361229", "title": "三步完成Ant  Design Pro 的主题切换", "desc": "Ant Design Pro 是一个非常优秀的开箱即用的中台前端/设计解决方案，私以为有些地方过度封装，当然这是见仁见智的看法。项目中遇到需要切换主题的需求，研究了一下，最后得到了比较完美的结果。 主题切换分为两个部分，一个是 Ant Design 组件的主题切换，另一个是自定…"}, {"id": "6951702941933764622", "title": "react hooks 初步使用（一）", "desc": "一、前言那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，我觉得自己会永远生猛下去，什么也锤不了我。二、关于HooksHook 是 React 16."}, {"id": "6844903952916414478", "title": "React实现滚动加载", "desc": "项目中有两个页面有很多Echarts画的图，进去的时候特别卡，使用了滚动加载之后流畅很多，用户体验大幅提升。 另外滚动加载还有很多其他用途，比如：滚动翻页，无线翻滚，图片出现在视口才请求。。。 1. 传统方案 在滚动加载的组件中我们需要在state中添加一个字段表示正在加载中，…"}, {"id": "6844903560895791117", "title": "尝试自己动手用react来写一个分页组件", "desc": "点赞关注不要钱，有你的支持更温暖。"}, {"id": "6844903609281445896", "title": "如何将 Vue 组件转成 React 组件？", "desc": "🛠️ 👉 Try to transform Vue component(jsx syntax) to React component"}, {"id": "6904137923613392910", "title": "React setState 同步or异步？", "desc": "setState 在生命周期和合成事件中是异步；在原生事件和异步方法里是同步；(异步方法里主要是涉及到js事件循环的宏任务和微任务。) setState 异步实际上是生命周期和合成事件在更新之前被调用，导致他们拿到的数据不是更新后的值。 setState 在生命周期和合成事件中…"}, {"id": "6913833728015859720", "title": "React 新旧生命周期", "desc": "不建议在 shouldComponentUpdate() 中进行深层比较或使用 JSON.stringify()。这样非常影响效率，且会损害性能"}, {"id": "6844903881676161031", "title": "【译】21 项优化 React App 性能的技术", "desc": "在 React 内部，React 会使用几项巧妙的小技术，来优化计算更新 UI 时，所需要的最少的更新 DOM 的操作。在大多数情况下，即使你没有针对性能进行专项优化，React 依然很快，但是仍有一些方法可以加速 React 应用程序。本文将介绍一些可用于改进 React 代…"}, {"id": "6844903910759464973", "title": "[译] 如何用React Hooks构建可复用的动画组件", "desc": "Restration Hooks取悦了开发人员。但对我来说，我已经开始对Hooks 感到疲劳。 React Hooks的示例，而不仅仅是“新方法”。正如大家根据本文的标题所猜测的，这个示例是一个动画。但机缘巧合下我改变了我的看法。 我正在开发一个使用网格中的卡片的阵营应用程序。…"}, {"id": "6916813213522722823", "title": "【重学React】生命周期", "desc": "React生命周期react生命周期使用是开发过程中必不可少的地方，但是往往大多时候对生命周期的使用并不是那么自由自在，大部分可能在集中在,react在迭代的过程中，抛弃了很多周期，也新增了一些好用的"}, {"id": "6844904175973695496", "title": "构建 B 端组件（区块）库的一些思考", "desc": "最近在公司主要负责构建基于 Fusion 的 B 端 React 组件库。前端与 UED 通过产品调研和问题抽象，总结出符合我们业务场景的最佳交互范式，然后前端根据这些范式沉淀出相应的组件库，旨在提升 B 端产品的交互统一性以及开发者的开发效率。下面记录一下在开发过程中对 B …"}, {"id": "6844904015965192205", "title": "一次Toast组件引发的思考", "desc": "最近组内有一个新项目，需要用的Toast这样一个组件。心里想，这样的组件，还不是分分钟就搞定呀。然后一头砸进去了开始写。 然后再调用的地方，发现如果我需要使用Toast，那么我使用的地方都得引入一下，这显然很不友好。 有一个 list 去存储所有相关事件。 这样我们就可以在AP…"}, {"id": "6847902222831845384", "title": "用 Babel JSX 扩展来创造响应式 Ant Design 表单解决方案", "desc": "大家好，两年前我曾经发布过一篇文章《使用新一代js模板引擎NornJ提升React.js开发体验》，第一次尝试推广我创作的可扩展模板引擎 NornJ 。 这个想法随后就被实施：babel-plugin-nornj-in-jsx，并继续应用于公司部门内的多个实际项目中。Babel…"}, {"id": "6890462707305152520", "title": "看不到的React", "desc": "看不到的ReactReact的JSX语法JSX语法与原生语法的不同之处JSX原生class类名classNameclassstyle需要写对象直接写字符串JSX语法中使用变量JSX的编译依靠babel"}, {"id": "6911553330825297928", "title": "nextjs与antd及环境变量组合", "desc": "demo里有一个examples里有一个with-ant-design-less的例子，把它里面的东西拷贝到创建的项目里。 有人可能问这不是多此一举吗，我直接把demo的例子里的内容拷贝出来npm install不就行了。为什么自己还要去创建一下。 原因是有可能因为版本的原因导…"}, {"id": "6844904112178331661", "title": "React Hook源码解析（二）", "desc": "主要分析了Hook在React中是如何保存的，以及Hook的更新过程。本文中，我们将通过下面两个问题，继续深入研究Hook，以弥补上文中略过的一些细节。 我们点击一次button，最终页面上会输出多少呢？熟悉React的朋友们，很快就会得到答案：3。 在上一篇源码解析中，这部分…"}, {"id": "6844903950789902349", "title": "React源码解析之scheduleWork（下）", "desc": "同时，还可以中断正在执行的任务，优先执行优先级比当前高的任务(scheduleCallbackForRoot())，之后，还可以继续之前中断的任务，而React16 之前调用setState()，必须等待setState的update队列全部调度完，才能进行之后的操作。 sch…"}, {"id": "6844904137239298055", "title": "模拟react虚拟节点转换真实节点", "desc": "Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。执行步骤： 接下来会做一个简单的模拟过程。"}, {"id": "6844903848339832839", "title": "用React hooks写了一个日历组件，来看看？", "desc": "在最近的项目中，大量的尝试了react hooks，我们的组件库用的是Next，除了一个地方因为要使用Form + Field的组合，所以使用了class组件，经过了这个项目，也算是总结一些使用的经验，所以准备自己封装一个日历组件来分享一下。以下也会通过git中的commit记…"}, {"id": "6844903560979677192", "title": "关于前端数据&逻辑的思考", "desc": "这是一个老生常谈的问题了，从16年起前端除了构建工具，讨论的最多的就是组件化了，把视图按照一定规则切分为若干模块过程就是组件化，那么组件化的重点就是那个规则。 我之前的项目里多数这两种情况都存在，举个简单的例子，对于app的登录模块来说就是一个典型的按功能分组，而对于一个列表就…"}, {"id": "6844903636577812493", "title": "[译]Webpack 4 — 神秘的SplitChunksc插件", "desc": "这是我的一个粗略尝试，通过一个常见的例子来理解和帮助你使用 SplitChunksPlugin 选项。 作为早期的爱好者，我试图理解代码分割 (Code-Spliting) 背后的魔法。文档说 splitChucnks 接受'initial', 'async', 'all'。我…"}, {"id": "6909755918284980237", "title": "React基础学习笔记", "desc": "1. 前言 当前全球最火的前端框架，由 Facebook 推出并进行维护，社区强大，国内的一二线互联网公司大部分都在使用 React 进行开发，还衍生了ReactNative和React VR这些比较好用的框架。 2. React 开发环境搭建(React 17) 3. 脚手架…"}, {"id": "6844903889196548104", "title": "我们大多数情况下需要getDerivedStateFromProps吗", "desc": "我很不喜欢在代码里写componentWillReceiveProps，因为这样会导致子组件太过灵活，你并不知道何时就改掉了子组件的state。但是，当子组件需要根据父组件更新的props中的某个属性来更新自身的state来做到重新渲染子组件时，我又只能鬼使神差的写下这么一段自…"}, {"id": "6844904033434484743", "title": "React 事件机制源码学习笔记", "desc": "从一个简单需求开始。 点击按钮弹出一个对话框，再次点按钮关闭对话框。点击对话框外的空白区域也可以关闭对话框。 但实际上的效果并不是我们想要的，点击 Dialog 依旧会关闭。 1、通过 e.target 判断。 React 基于 Virtual Dom 实现了一个事件合成的机制…"}, {"id": "6844903606194274318", "title": "React是UI的未来，你怎么看？", "desc": "当前 UI 领域新技术层出不穷，更迭迅速。在众多技术中，本文的作者格外青睐 React，认为 React 将会是开发者的终极选择。 我们曾经认为太阳围绕地球运行，把瘟疫看作神对人类的惩罚，而现在我们坚信 MVC 架构和双向数据绑定就是构建 Web UI 程序的最佳方式。 过去，…"}, {"id": "6938338888792408078", "title": "React虚拟dom与diff算法", "desc": "虚拟dom（Virtul DOM）。通过模拟DOM中的真实节点中的对象属性与方法，生成属于React自己的dom，再通过底层的render方法将其渲染成真实的DOM节点。 React使用JSX编写虚拟DOM对象。 直接更新页面上真实的 dom 成本很高，耗费性能大，virtua…"}, {"id": "6844903629271334925", "title": "《现代前端技术解析》读后鬼扯", "desc": "本书就像它前言中提到的那样，是一本以现代前端技术思想与理论为主要内容的书，类似于大学刚入学发的那本专业培养大纲，总结和梳理了整个前端开发体系，让我们站在一个全局的角度去看待前端这个领域，展示了可供我们深入探索的各个方向。 这类书籍写起来不容易，没把握好很容易就变成博客合集。这本…"}, {"id": "6844903661655556110", "title": "React组件隔离", "desc": "同一个页面引用多个相同的自定义公共组件(该类组件拥有自己的Redux)并且这些组件之间有交互。 在一个页面中存在两个相同的公共组件(A)，在页面处理中，对A组件进行操作，有一些重要的数据被存入到A组件的对应的Redux中。 如果该页面只存在一个A组件，不管进行如何的操作，数据都…"}, {"id": "6844903997506060301", "title": "React之childExpirationTime", "desc": "中有提到 React 利用 childExpirationTime，来跳过子树的遍历及渲染，本文讲下 childExpirationTime 的含义和作用。 由于 React 的更新是从FiberRoot开始的，所以当某一节点发生更新时，React 会向上遍历，直至找到Fibe…"}, {"id": "6844903621809668104", "title": "Redux中的编程艺术", "desc": "这段代码，蕴含着很多知识。 首先是通过闭包对内部变量进行了私有化，外部是无法访问闭包内的变量。其次是对外暴露了接口来提供外部对内部属性的访问。这其实是典型的“沙盒模式”。 沙盒模式帮我们保护内部数据的安全性，在沙盒模式下，我们只能通过return出来的开放接口才能对沙盒内部的数…"}, {"id": "6844904175583625230", "title": "React 如何封装原生事件对象", "desc": "然后在 SyntheticEvent 的构造函数中通过 this.constructor.Interface 拿到这个 EventInterface，接着开始按照EventInterface为实例对象设置属性。 最后处理一下事件的默认状态，比如默认动作已经被取消，比如已经组织了…"}, {"id": "6844903669385658376", "title": "蚂蚁金服 AntV 发布 G6 2.1 -- 一路同行", "desc": "光阴荏苒，转瞬间，夏去秋来。自 2018.06.06 开源至今的短短三个月，G6 的使用量爆炸式增长，活跃系统数从 100 个飙升至近 1000 个。我们取得了一定的成绩，获得了不少的赞许和认同，在此感谢各位的支持和信任。同时，G6 暴露出了不少问题。主要集中在以下三方面： 文…"}, {"id": "6844903676935405581", "title": "Iceworks 2.8.0 发布，自定义你的 React 模板", "desc": "自定义模板顾名思义即是定制自己的模板，相对社区已有的各类 React 模板，大多数是全家桶的形式，内置了很多功能和页面集合，所谓开箱即用；但在实际使用过程中，我们会发现，下载模板进行相应的初始化之后，在开始业务前，要做的第一件事情就是删、删、删，删掉不需要的多余页面和相应的配置…"}, {"id": "6844904117341519885", "title": "一套基于react&react-native技术栈实现的前端模版项目,欢迎学习交流！", "desc": "react-templates是一套基于react&react-native技术栈实现的前端模版项目，项目共分为五个分支(master分支除外)，涵盖了常见的前端项目类型，如管理系统项目(admin分支和single-spa-admin分支)、移动web端项目(webapp分支…"}, {"id": "6844903502834040839", "title": "传送门：React Portal", "desc": "React v16增加了对Portal的直接支持，今天我们就来聊一聊Portal。似乎所有说React Portal都直接用Portal这个单词，没听过这词的朋友可能觉得不知所云，其实，Portal可以有一个很形象的翻译——“传送门”。"}, {"id": "6953271178081337352", "title": "[个人主页搭建] 一、项目架构和登录验证实现", "desc": "一个实训的全栈项目,react+node+mongodb,及时记录复盘总结反思。 这一期实现了登录验证，搭建起了后端的基本框架。"}, {"id": "6844903505673584654", "title": "React Native 模仿网易云音乐手机客户端，兼容安卓和IOS两个平台", "desc": "老规矩，先上图~😄 点击名称可跳转相关项目网站😄😄 react@16.0.0-alpha.12 react-native@0.48.2 react-native-scrollable-tab-view@0.7.4(可滚动切换tab页面组件) react-native-sw…"}, {"id": "6844903780194975752", "title": "React Hooks 梳理", "desc": "自 React 16.8 发布以后，在已有项目中，把 package.json 中的 react 和 react-dom 版本一升，就可以抄起 Hooks 开干了。笔者目前已经在项目中开始了实操，但不妨先总结下官方文档中一些值得梳理的点。 也就是说，create 的叫法就不太符…"}, {"id": "6914928269267566599", "title": "「React系列」源码解析之基础渲染", "desc": "Object.defineProperties 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。Object.defineProperties | MDN hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有…"}, {"id": "6937942282331127844", "title": "Vue and React 都挺好  ", "desc": "写下此文，主要是与掘友分享，同时开启个人前端“重构”思维。开发项目如果你是一个人做或者你是carry前端的那个人，技术选型肯定是第一步了（这里不考虑已有的项目，因为屎山会坍陷），Vue或者React应"}, {"id": "6844903953721737224", "title": "react代码分片", "desc": "React开发过程中，大部分都是单页面应用，不做代码分片的话，所有的js文件都打成一个庞大的bundlejs文件，随着项目内容的不断增多，首屏空白时间就会变得越来越长。 因此可以对代码进行分片，打包时生成多个js文件，每次页面只请求所需要的js文件，用户体验大大提升。 1. 代…"}, {"id": "6844903614754848781", "title": "构建你自己的 redux-saga", "desc": "知乎上已经有不少介绍 redux-saga 的好文章了，例如 redux-saga 实践总结、浅析 redux-saga 实现原理、Redux-Saga 漫谈。本文将介绍 redux-saga 的实现原理，并一步步地用代码构建 little-saga —— 一个 redux-s…"}, {"id": "6844903671407312910", "title": "React Components之间的通信方式了解下", "desc": "父=>子，通过父元素的render既可改变子元素的内容。 子=>夫，通过父元素传入子元素中的props上挂载的方法，让子元素触发父元素中的方法，从而进行通信。 上回说到JSX的用法，这回要开讲react组件之间的一个沟通。那么什么是组件？我知道英文是Component，但这对我…"}, {"id": "6844903630055669773", "title": "React Diff理解", "desc": "一提到React，学过的人都会想到提高性能的两大神奇特色：虚拟DOM & diff算法。React diff作为Virtual DOM的加速器，其算法的改进优化是React整的界面渲染的基础，以及性能提高的保障。虽然开发中不需要知道其运行机制，但是理解之后有助于更好的理解Rea…"}, {"id": "6885572825072173070", "title": "React源码中如何实现受控组件", "desc": "今天我们站在框架开发者的角度来聊聊如何实现受控组件。 在onChange中会更新num，num作为value prop传递给&#x3C;input/>，达到value受控的目的。 我相信大部分同学第一个想法是：这没有什么难的，将value prop与其他attribute pr…"}, {"id": "6844903660707659783", "title": "可视化构建工具探索之Vue Cli3.0 & 阿里飞冰", "desc": "安装了最新的Vue CLI。打开Terminal，输入： 点击页面列表右侧对应的+号，即可选择对应框架下的物料源，将在该页面目录下生成一侧Component文件夹，存放下载的组件资源，配置路之后，即可生效。 package.json 文件 keywords 字段增加 ice-s…"}, {"id": "6844904050165547022", "title": "Antd踩坑 — 当子组件是 function component 时使用 wrappedComponentRef", "desc": "父组件想拿到子组件的 ref，使用 antd 的 Form.create() 包装子组件之后，可以通过包装后的组件的 wrappedComponentRef 拿到子组件的实例。但是因为子组件是一个 function component 没有实例，导致不能在子组件上使用 wrap…"}, {"id": "6844903971664953352", "title": "CSR、SSR、Prerender 原理全解密", "desc": "在了解这些概念之前，我们要先了解一个熟知的概念，那就是 SPA(Single Page Application)，没错，就是大家熟知的单页应用，其实 CSR、SSR、Prerender 都是基于 SPA，关于 SPA 的概念我就不多阐述了。 即，渲染过程全部交给浏览器进行处理，…"}, {"id": "6889314677528985614", "title": "React源码系列五：React Scheduler调度原理第一篇", "desc": "React源码分析所有文章均属原创，是结合网上别人的总结和分析源码所得。我觉得文章可能不是写的最好的一篇，但一定敢确定是比较详细的一篇。如果哪些地方不正确，请指正，因为自己也是小白一枚。 Scheduler模块我认为是比较困难的一部分，每次想啃这部分的时候，都想找理由退缩。幸运…"}, {"id": "6844903993047531533", "title": "谈一谈在React项目中使用css-in-js方案", "desc": "简单来说,传统的前端方案推崇\"关注点分离\"原则，HTML、CSS、JavaScript 应该各司其职，进行分离。 而在react项目中，更提倡组件化方案，自然形成了将HTML、CSS、JavaScript集中编写管理的方式。 但是这种写法的弊端在于，react中的style仅仅…"}, {"id": "6998459447760666654", "title": "React进阶系列之JSX", "desc": "React 作为一个优秀的前端框架，在架构上融合了数据驱动视图、组件化、函数式编程、面向对象、Fiber 等经典设计哲学，在底层技术选型上涉及了 JSX、虚拟 DOM 等经典解决方案，在周边生态上至少"}, {"id": "6950476836841193479", "title": "React-redux从0到1的过程", "desc": "1.redux工作原理 1.React components是我们自己定义的组件 2.React components会把需要做的事告诉Action Creators需要做什么 3.Action Cr"}, {"id": "6844903784078901262", "title": "React SSR（服务器端渲染） 细微探究", "desc": "renderToNodeStream支持直接渲染到节点流。渲染到流可以减少你的内容的第一个字节（TTFB）的时间，在文档的下一部分生成之前，将文档的开头至结尾发送到浏览器。 当内容从服务器流式传输时，浏览器将开始解析HTML文档，有的文章称此 API的渲染速度是 renderT…"}, {"id": "6918310496106250248", "title": "React项目文件结构介绍【七日打卡】", "desc": "本篇博文主要探讨React项目中合理的文件结构。 仅仅是安装了react中最常用的 react / react-dom 组件，其余的并没有安装，所以在项目开发中，我们根据需要，可能还会安装：redux react-redux react-router-dom prop-type…"}, {"id": "6844903801996984334", "title": "React 系列一 之 TodoList", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章中的一些链接可能失效，而 jsliang 缺乏精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 通过编写…"}, {"id": "6965036258011643917", "title": "React中Refs的几种用法", "desc": "React.createRef() 1.创建锚点对象 使用React.createRef()后是创建一个Object对象，这个对象的属性为空，__proto__指向的是Object的原型函数 2.在标"}, {"id": "6844903680777388039", "title": "如何快速解决繁杂的国际化替换", "desc": "最近参与公司两个国外项目，项目需要对中文替换为葡语和英语，项目重要、时间紧张，正常开发完后需要对中文词条替换成一个方法。 但是查找和修改其中的错误也是一个极其痛苦的过程，人总是不满足于现在，希望可以更好。 同事用的方法是读取文件中的内容，然后根据正则匹配到中文片段，然后进行替换…"}, {"id": "6992123570465800229", "title": "React测试-Enzyme学习", "desc": "三种渲染方式 enzyme支持三种方式的渲染： shallow：浅渲染，是对官方的Shallow Renderer的封装。将组件渲染成虚拟DOM对象，只会渲染第一层，子组件将不会被渲染出来，因而效率非"}, {"id": "6844903749358452744", "title": "在单页应用中，如何优雅的监听url的变化", "desc": "单页应用的原理从早起的根据url的hash变化，到根据H5的history的变化，实现无刷新条件下的页面重新渲染。那么在单页应用中是如何监听url的变化呢，本文将总结一下，如何在单页页面中优雅的监听url的变化。 单页应用的原理，在我们的上一篇文章中React-Router源码…"}, {"id": "6864869694390665224", "title": "手动实现一个 react-router-dom", "desc": "我们日常中使用 react 开发项目，那么一定会跟 react-rouer 打交道，但是由于 react 路由的设计和用法，使得很多刚使用 react 的同学在接触到react-router的时候就会很蛋疼，不知道其匹配的机制和原理。 脚手架工具初始化一个项目，为了方便测试，将…"}, {"id": "6844904071933984776", "title": "《彻底掌握redux》之开发一个任务管理平台（上）", "desc": "redux是上手react开发的必经之路，也是目前react项目中使用的最流行状态管理库。虽然我们不使用redux也可以通过react的state和父子props进行基本的数据通信和项目开发，但是对于一个大型项目而言，往往考虑的更多的是代码结构和组件之间的通信，我们需要一种很优…"}, {"id": "6939549462008168455", "title": "初识fiber", "desc": "首先可以看一个16版本前和16版本之后即fiber架构之后的动画对比demo 可以看到stack(fiber架构之前)的示例，动画卡顿、掉帧非常严重，而fiber示例则很丝滑， 要解释stack为什么"}, {"id": "6992019421363453960", "title": "React中的ref总结", "desc": "React中的ref 用处 操作组件、子组件的属性 常用场景举例： 如何获取原生HTML元素属性、方法？ 如何在父组件中获取子组件的属性、方法？ 如何在父组件中直接获取子组件中的原生HTML元素？ R"}, {"id": "6844904166062571534", "title": "使用create-react+app --typescript配置less以及immer数据流", "desc": "在config文件夹中打开webpack.config.js文件，在此文件里面，getStyleLoaders函数接受两个参数，第一个为传入css-loader的Options，第二个为可选，就是需要添加的loader，最后返回配置后的loader数组。我们添加如下代码： 需要…"}, {"id": "6844903555891986445", "title": "从零开始最小实现 react 服务器渲染", "desc": "That’s all."}, {"id": "6844903496974647304", "title": "亿万级访问量下的前端同构直出实践", "desc": "兴趣部落项目自2014年至今，一直都是采用的是前端渲染的模式，这种模式就是页面html是一个空壳，首屏的内容需要css和js都加载完成后，请求cgi获得数据后再渲染给用户。这种模式的好处是可以让后端和前端的工作完全分离，给日常的开发和维护带来很大的便利。 我们在现在的工作模式上…"}, {"id": "6844903545246842893", "title": "JSON看这篇就行了", "desc": "在标准中都使用了双引号。因为所有的属性必须在双引号内。但是布尔值或者数字可以不用引号。 在设计JSON 的时候，我们都能看见可扩展和不可扩展的JSON结构。其中最主要的就2种，一种为扁平化数据，还有结构层次。 那么我们就可以看出2种设计的问题，第二种无法扩展有木有！！而且。。他…"}, {"id": "6844903667695353869", "title": "Iceworks 2.7.0 发布，海量图表供你选择", "desc": "阿里巴巴图表库 Bizcharts 正式开源 Bizcharts 是基于 G2 引擎的 React 版本的封装。 Bizcharts 的语法设计非常贴切 React 的使用方式，图表的各个部分都拆分成了独立的 React 类，如：<Tooltip /> 代表提示信息， <Axi…"}, {"id": "6975120273213227021", "title": "你可能错过的5个React Material UI功能", "desc": "这些功能将改变你使用Material UI的工作方式 作为一名前端工程师，Material-UI是我最喜欢的React组件的造型选项。它圆滑的设计和优雅的风格使它从众多的产品中脱颖而出。 也就是说，我"}, {"id": "6844903617292402701", "title": "初见React，一步一个坑", "desc": "说在前头：新入职公司，react还不是很熟悉，就开始了官网重构的项目，刚开始开发速度很慢，而且语法也很多不规范的地方，在这里总结一下开发中遇到的坑。 这样就会使NPM包里的文件正常加载了。 原来这些都是打包后的文件！为了使打包后的样式生效，需要使用extract-text-we…"}, {"id": "6844903742391713806", "title": "图片裁剪上传示例（node + react）", "desc": "因为公司内部平台非常多，很多开发的站点地址没有一个统一的入口，所以作者基于 egg + mongodb + redies + umi +antd 搭建了一个简单的入口平台。 由于各个平台各有特点如果能输入名字的话还是不太好区分，logo上传必然是一个必须的功能。 一起来看一下整…"}, {"id": "6967885529631162382", "title": "React基础篇（一）", "desc": "一、React入门 1.React简介 Facebook开源的一个js库 一个用来动态构建用户界面的js库(只关注于视图(View)) 2.React的特点 声明式编码 组件化编码 一次学习，随处编写"}, {"id": "6920788310877028365", "title": "1.开篇(听说你还在艰难的啃react源码)", "desc": "​ 本教程目标是打造一门严谨(严格遵循react17核心思想)、通俗易懂(提供大量流程图解，结合demo、视频教程)的react源码解析课程，争取做到最容易理解，学起来效率最高的教程。在视频教程中，会带着大家一步一步断点调试。学完本课程后，你对react的理解会上升一个档次，如…"}, {"id": "6844903858221613069", "title": "Next.js 配置 react-intl 实现语言国际化", "desc": "使用Next.js的主要目的是实现SSR优化SEO，当然在使用过程中遇到过很多问题。非常感谢 luffyZh 分享的文章，让我少走很多弯路。（Tip：刚开始搭建的同学, 建议先去看 luffyZh 和 官方文档 了解基础知识再来看本文章哦 #^.^# ）。 言归正传，antd官…"}, {"id": "6844903757868695566", "title": "用少量代码实现redux核心部分及其演化历史", "desc": "接下来我们试着一个一个去实现。当然这其中包括了为什么需要redux的历史演化的过程，总的用了十几个commit来完成了这篇文章，基本上每个commit实现TODO list中的一个计划（在这墙裂推荐你使用source tree这个工具来查看各个commit都干了啥，修改了啥，对…"}, {"id": "6844903983023292430", "title": "React v16.9  H5 template", "desc": "仓库地址：https://gitee.com/dreamer2011/react-h5-template1、前言本项目适用于移动端H5混合开发的React项目，功能包括：采用VW，字体自动适配，默认按"}, {"id": "6844904051004407815", "title": "React Hook 一些用法", "desc": "useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。"}, {"id": "6864478797492649998", "title": "React SSR 实践过程（二）", "desc": "前面已经把react ssr环境配置，数据同构，路由同构弄好了，接下来需要对资源进行处理。因为一个项目，不可能只有html js嘛，所以还需要对常用的资源处理一下。 css in js的方法库还是挺多的，styled-components也挺好用的，如果没用过可以试试。 在服务…"}, {"id": "6844903934591500296", "title": "React Hooks 源码解析（1）：类组件、函数组件、纯组件", "desc": "1 Class Component VS. Functional Component 根据 React 官网，React 中的组件可分为函数式组件（Functional Component）与类组件（Class Component）。 而函数式组件在以往我们也称其为无状态组件（…"}, {"id": "6844903731595739143", "title": "仿写美团酒店日期选择组件(小程序、React-Native)", "desc": "小程序这一块，是使用一个页面去完成这个选择的动作，而在App上的表现，是从底部弹出来的，好奇的我还去看了美团移动端页面这个组件的表现，也有一些差异。 整体上来说，功能是一样的，选日期，入店-离店日期。 1号星期5，我知道，那这周的星期天，也就是这周的第一天的日期是可以推算出来的…"}, {"id": "6969188665532612639", "title": "react Context上下文使用基本介绍", "desc": "前言 Context 通过组件树提供了一个传递数据的方法（类似一个简易的redux来存放公共数据），从而避免了在每一个层级手动的传递 props 属性。 有部分小伙伴应该使用props属性进行组件向下"}, {"id": "6844903655468957709", "title": "微前端的设计理念与实践初探", "desc": "微服务与微前端，都是希望将某个单一的单体应用，转化为多个可以独立运行、独立开发、独立部署、独立维护的服务或者应用的聚合，从而满足业务快速变化及分布式多团队并行开发的需求。如康威定律(Conway’s Law)所言，设计系统的组织，其产生的设计和架构等价于组织间的沟通结构；微服务…"}, {"id": "6844903753233989645", "title": "【React v16.6 新特性】使用 React.Suspense 替换 react-loadable", "desc": "当前大部分 React 应用需要使用 code splitting 的时候，都选择使用优秀的 react-loadable 来处理检测代码段是否已加载。然而，随着React v16.6 的发布，我们有一个非常难得的机会 ，可以删除我们的第三方依赖！ React.Suspense"}, {"id": "6948959158783705124", "title": "「超详细React项目搭建教程八」使用 Redux-thunk实现Redux异步操作", "desc": "在上一篇文章中，我们在项目中集成了的同步 Redux.在本篇文章中，我们将在 Redux 中使用异步 actions 优化我们的代码State我们先来回忆下我们的 store 类型so? 我们的 st"}, {"id": "6893853567497863181", "title": "React井字棋改进", "desc": "这篇文章并不是React教程。 主流前端框架：Vue, React, Angular，工作这两年用过一次Ag,其它都在使用Vue,只有React接触的实在是少。今天下班之余打开 React官网 想轻过一遍教程,看过教程的都知道上面提供了一个井字棋游戏实现的教程，官网那里也写的超…"}, {"id": "6844903648225411080", "title": "使用create-react-app添加css modules、sasss和antd", "desc": "create-react-app是facebook的官方脚手架，对于个人开发者和中小型公司快速创建项目非常推荐。react的CSS解决方案有很多，这里我技术选型时用css modules和sass，然后配合antd使用通用组件库。但是create-react-app原生并不支持…"}, {"id": "6911871665999708173", "title": "如何把 Next.js 项目部署到服务器?", "desc": "Next.js是什么?Next.js是一个用于生产环境的React框架。Next.js为您提供生产环境所需的所有功能以及最佳的开发体验：包括静态及服务器端融合渲染、支持TypeScript、智能化打包"}, {"id": "6974687147332730911", "title": "React 11 :: 优化加载速度", "desc": "前言 本篇文章主要介绍加载React应用程序加载速度的两种方法：服务端加载SSR (Server Side Rendering)与Code Split。 本文将提供两个Repo： Code Split"}, {"id": "6968628591005270024", "title": "react源码解析2.react的设计理念", "desc": "react源码解析2.react的设计理念 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心"}, {"id": "6876608049793105933", "title": "react 如何快速刷新当前状态？ ", "desc": "它会破坏浏览器自带的前进后退按钮的操作，也就是push遗留下来的东西, 这会导致用户迷惑。 根据第二个问题，我们可以得出一个结论，再次渲染的时候不能有一个无数据的空白期，既然如此的话，要么数据请求特别快（在本地硬盘、内存等），要么之前的数据压根就不经行清空。 解决方法两个 重新…"}, {"id": "6844903553140539399", "title": "快速掌握react-motion动画库", "desc": "react-motion是一个强大的react动画库"}, {"id": "6844903857173037064", "title": "react 不eject扩展webpack", "desc": "使用 create-react-app 生成项目，不会有 webpack 的配置项，要导出 webpack，必须使用 react-script eject，但这是一个单向操作，eject 后，就无法恢复了。如果只是修改一些简单的配置，eject 是没有必要的。"}, {"id": "6953996455015088158", "title": "你知道为什么类组件的实例拥有类的箭头函数方法，却没有普通函数方法吗？今天全懂。", "desc": "欲诚其意者，先致其知，致知在格物。物格而后知至，知至而后意诚，意诚而后心正，心正而后身修，身修而后家齐，家齐而后国治，国治而后天下平。-- 礼记-大学。 就像这句哲理一样我可能并不知道其意思，但我觉得"}, {"id": "6844903581196386317", "title": "React文档精读（上篇）", "desc": "上回我们解释了什么是JSX，JSX是React中对Javascript语法的延伸，它允许我们使用JSX tag来构建一个虚拟DOM作为真实DOM的小型描述文档（它本身是一个Javascript对象）。 其中，一个JSX tag就是一个React Element。 我们说过JSX…"}, {"id": "6847902197112373256", "title": "从0开始，手把手教你使用React开发答题App", "desc": "React 框架的优雅不言而喻，组件化的编程思想使得React框架开发的项目代码简洁，易懂，但早期 React 类组件的写法略显繁琐。React Hooks 是 React 16.8 发布以来最吸引人的特性之一，她简化了原有代码的编写，是未来 React 应用的主流写法。 本文…"}, {"id": "6844903890186403854", "title": "React学习(3)-不可不知的JSX", "desc": "虽然错误的写法不会报错,它会将button认为是一个html普通的标签元素. 上面是把页面中的某一个模块(搜索),把与之相关的组件集中放在一个对象下管理,当然在实际开发中,因人而异了,要是看到别人这么写,也不要觉得怪怪的. 对于label与input使用时,要注意的一些地方."}, {"id": "6844903764608942093", "title": "走近Fusion组件——无限滚动", "desc": "Fusion Next（包名@alifd/next）是一个基于 React 实现，面向 PC 端的可配置组件库。为阿里集团2000+个项目服务的同时，沉淀出了不少基础组件，现在已经达到50+。这个系列将通过实际需求场景，来介绍Fusion组件库的各种有意思的功能、分析实现原理，…"}, {"id": "6844903983757131784", "title": "一小时入门React", "desc": "注意：在点击事件中，不要直接调用函数，如果需要传递参数，使用箭头函数,jsx中所有dom事件必须用驼峰命名。如下： 1.1. 条件渲染 1.2. 循环渲染 react中所有的东西都是组件，从定义类型组件分为函数式组件和class组件两种，从功能上区分又有容器组件和ui组件，根据…"}, {"id": "6844903698926141453", "title": "发布一个react组件——react-read-pdf，用于在移动端展示PDF文件", "desc": "PC端的浏览器对于PDF文件的展示没有太大的问题，给定一个PDF的链接，就可以用浏览器默认的展示样式来展示和渲染PDF文件的内容。比如一个\"http://www.baidu.com/test/pdf\"。 如何在移动端展示这个文件。为了在移动端展示和渲染PDF文件的内容，本文在p…"}, {"id": "6844903910826573838", "title": "[译]深入解读 React 核心之元素篇", "desc": "本系列涵盖了使用 React 的所有知识，分为上、中、下三篇。此为上篇，本篇主讲 React 元素渲染。 本系列涵盖 React v16.9，但更多的是 React 全面解析，具体 React v16.9 新特性可查看 [译]React v16.9 新特性。 上篇主讲 Reac…"}, {"id": "6948605515068866590", "title": "useMemo和useCallback的使用场景", "desc": "我们知道当父组件发生重新渲染时，其所有（状态、局部变量等）都是新的。一旦子组件依赖于父组件的某一个对象变量，那么无论对象是否发生变化，子组件拿到的都是新的对象，从而使子组件对应的 diff 失效，依旧会重新执行该部分逻辑。在下面的例子中，我们的副作用依赖项中包含了父组件传入的对…"}, {"id": "6844904177223598093", "title": "深入理解React：事件机制原理", "desc": "React 有一套自己的事件系统，其事件叫做合成事件。为什么 React 要自定义一套事件系统？React 事件是如何注册和触发的？React 事件与原生 DOM 事件有什么区别？带着这些问题，让我们一起来探究 React 事件机制的原理。为了便于理解，此篇分析将尽可能用图解代…"}, {"id": "6920602937064423432", "title": "React 一些知道最好不知道也行的点", "desc": "setState() 函数用于更新组件的状态，有对象式和函数式两种写法。 函数式写法可以直接从参数接收到当前组件的 state 和 props，更方便对状态进行处理。无论哪种写法，setState() 的第二个参数都可以接收一个回调函数。 setState() 对状态的更新是异…"}, {"id": "6844903812226875400", "title": "干掉一切warning？！", "desc": "大意如此。 原来字符集合里面，你所以为的大多数特殊符号都不需要转义，于是项目在webpack编译过程的lint阶段就报了一个warning，本着不放过任何一个warning的原则，我们继续进行下面的研究。 eslint中文站介绍eslint是著名的前Yahoo大牛Nichola…"}, {"id": "6844904050505302023", "title": "React@16.8.6原理浅析（概念介绍）", "desc": "对于同一层次的一组子节点，它们可以通过唯一的 id 进行区分。 概念：按照我的理解就是 更新 -> DOM 变化 这之间的流程，它包括了diff 算法。 如果整个应用很大，会导致 js 的执行长期占据主线程，浏览器无法及时响应用户的操作，进而导致页面显示的卡顿。 我们可以发现 …"}, {"id": "6945342316987023391", "title": "React项目实战小结", "desc": "需求场景：现在想要封装一个input框，在点击列表的某个项目时，将项目name带过去，传递给封装的input框，动态赋值并且可以修改； 再一个就是需要在父组件拿到子组件的封装好的input的值。(更多关于antd3.x迁移到4.x请看https://ant-design.git…"}, {"id": "6844903620354261005", "title": "react-native android状态栏", "desc": "react-native 开发App的时候难免会遇到状态，栏的，背景颜色和字体颜色与App内容页面，色调适配，间言之就是将状态栏颜色与App颜色一致，使用户界面更加整体。 透明状态栏，状态栏背景颜色透明，状态栏颜色与App颜色一致，用户界面更加整体。 透明状态栏很常见，大多数的…"}, {"id": "6844904052556300301", "title": "react Hooks 实践总结", "desc": "setState 这里接受的参数除了一个给定的值外，还可以接受一个函数。例如 setState 会对值进行比较，如果 prevValue 跟这次的 value 相等的话（比较只是进行了浅比较），将不会触发更新。如果想强制每次更新，可以自定义一个hooks，例如 initialS…"}, {"id": "6844904046956904455", "title": "Angular 记录 - 如何在全局中设计一个路由信息的收集器", "desc": "在传统的页面开发中，我们通过在浏览器中输入不同的页面路径，来访问不同的的 html 页面。但在 SPA（single page application）页面，我们的框架通过匹配不同的路由地址，来按照一种约定的规则动态将我们页面里的内容替换为我们在模板中编写的内容。 在业务设计中…"}, {"id": "6844903971895656456", "title": "你可能不知道的 React Hooks", "desc": "React Hooks 虽然很好用，但是如果不能深入的理解它，很可能造成内存泄露等问题，此文通过 12 个例子让你深入浅出"}, {"id": "6844903510148907016", "title": "为什么我们需要reselect", "desc": "这个UnusedComp 组件关心这样的几个props： a, b, c, f(a,b), h(b, c), g(a, c), u(a, b, c), 其中f, h, g, u分别是一个函数。 关于这几个计算的值， 我们应该怎么处理呢？ 这样我们的组件简单了， 只需要直接取值渲…"}, {"id": "6907070018254143502", "title": "React的context用法", "desc": "Context提供了一个无需为每层组件手动添加props，就能在组件树间进行数据传递的方法。数据流向下传递，由最高层级的组件注入数据，在任一子组件进行接收。使用context,我们可以避免通过中间元素"}, {"id": "6844903919588474888", "title": "React源码解析之RootFiber", "desc": "比如ClassComponent中的state和props的状态就是记录在Fiber对象上的。 this上的state和props是根据Fiber对象的state、props更新的。 这实际上也方便了ReactHooks，因为hooks是为FunctionalComponent…"}, {"id": "6844903567334047752", "title": "在React JS中使用D3 JS", "desc": "在这个博客中，我们将看到如何使用ReactJS和D3JS绘制简单的折线图。 如果您对ReactJS不熟悉，请查看 官方ReactJS网页。您还可以通过步骤视频系列查看我们的 Learn ReactJS。 D3.js 是一个Javascript库，用于创建交互式动态可视化。 让我…"}, {"id": "6844903824935616519", "title": "基于react的lazy-load懒加载实现", "desc": "在图片应用较为频繁的项目（官网，商城，桌面壁纸项目等）中，如果我们单纯地给每个img标签附加src标签或者给dom节点添加background-image赋值为图片真实地址的话，可想而知浏览器是需要下载所有的图片资源，相当占用网速，这使得我们的网页加载的十分缓慢。 于是，关于解…"}, {"id": "6844903617820885006", "title": "从零开始React项目架构(二)", "desc": "eslint 的配置规则有很多，可以按照自己喜欢的方式来，网上也有很多很好的规则，这里就不一一介绍了。 然后我们 npm start下，又是和Hello World相见的时候了。"}, {"id": "6912793948259876877", "title": "React 算法之链表操作", "desc": "来自 wiki 上的解释: 链表（Linked list）是一种常见的基础数据结构, 是一种线性表, 但是并不会按线性的顺序存储数据, 而是在每一个节点里存到下一个节点的指针(Pointer).由于不必须按顺序存储，链表在插入的时候可以达到 O(1)的复杂度, 但是查找一个节点…"}, {"id": "6844903782044663815", "title": "React组件化复用的一些技巧", "desc": "假如我们有一个Layout组件，那么一般来说这个组件主要接收的就是children，把它放在主要内容的部分，然后组件本身的节点来控制布局，那么这个时候如果我们这个布局包含两个部分呢，比如还有一个header部分，是跟主要内容有明显区分的。 这应该是我们比较常见的方式，我们通过把…"}, {"id": "6844904127382700039", "title": "关于的react/react-native项目的一些重构/优化心得", "desc": "之前一直都在一个小公司工作，用react-native开发一个商场项目。由于没人指导、经验不足，前期很是埋了一些坑，后面痛定思痛决定对项目进行大幅度重构。给自己设下了若干目标，可惜还没来得及全部实现，公司就因为疫情倒闭了。这里分享一部分自己的心得，希望能给同样在踩坑的同学一些帮…"}, {"id": "6844903608706662413", "title": "让Vue也可以使用Redux", "desc": "上周末看Vuex源码，突发灵感，为什么都是Vuex啊。 这是一个用于帮助Vue使用Redux管理状态的插件。Redux是一个非常流行的状态管理工具。vue-with-redux为大家提供一个可以在Vue环境下使用Redux的途径。这回带来不同的开发体验。 Note: 你并不需要…"}, {"id": "6844903887422373901", "title": "React 项目从JavaScript 到 TypeScript 的无痛迁移", "desc": "TypeScript其与JavaScript的区别是提供的静态类型系统，一些错误可以再编译阶段尽早的发现和解决，提高了代码的健壮性，增强了代码的可读性以及可维护性，动态类型一时爽 代码重构火葬场之前很流行的一句话也可以很好的解释他们的区别，也正式这个原因开始把既有项目迁移到Ty…"}, {"id": "6854573208121802759", "title": "React Hooks 知识点总结", "desc": "React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）。有一些解决此类问题的方案，比如 render props 和 高阶组件。但是这类方案需要重新组织你的组件结构，这可能会很麻烦，使你的代码难以理解。 组件常常在 componentDidMo…"}, {"id": "6955741173575057416", "title": "入坑React Hook", "desc": "React Hook的出现，把我们从面向生命周期编程中解放出来，让我们可以更好的关注我们的业务逻辑。"}, {"id": "6844903776755810312", "title": "Fusion Next 之 Upload 上传组件设计思路", "desc": "Upload 组件设计的目标是解决用户上传文件的便利性，但是中后台 Upload 组件的场景是多种多样的，所以可扩展能力是 Upload 组件不可忽视的另一方面。 这段代码功能: 先选择一个文件，再点提交 POST 一个文件到一个接口。代码虽然不多，但是在实际使用中值得吐槽的点…"}, {"id": "6844903669725413383", "title": "关于最近开发小程序中踩过的那些坑", "desc": "作为一个二流前端也有段时间了，每天沉溺于项目功能代码很多积累到最后只成了模糊的印象。 很不巧，我这个人记性不太好。 不过有句话是这么说的，好记性不如烂笔头，在这个年代当然不需要烂笔头了，但道理是一样的，得有个地方做积累与沉淀，无论是以后翻看还是分享都是可以拿出手的。 废话说够了…"}, {"id": "6844903527836286989", "title": "一篇文章告诉你React里为什么不能用index作为key", "desc": "当我们传入id作为index的时候，，点击reverse后，此时的key变成了3，2，1，根据react的diff算法，react还是能分辨出只需要移动子节点即可完成更新，因此input也随之变化。 那说了这么多，其实对于index作为key我们是不推荐的，除非你能够保证他们不…"}, {"id": "6844904040619311111", "title": "🔥[译] 正交React组件的好处", "desc": "#1. 为什么好的系统设计是重要的？ 在5年前，我正在为一家欧洲初创公司开发跨平台移动应用。初期的功能是易于实现的，进展顺利。 6个月过去，需要不断的在现有功能上添加新的功能，随着时间的推移，对现有模块的更改越来越困难。 在部分需求上，开始拒绝某些新的功能和更新，因为它们将需要…"}, {"id": "6844903657880698887", "title": "状态管理器这么火，让我们来做一个简单的redux原理解析吧(vuex类似)", "desc": "redux状态管理器，实质上就是一个单例模式。我们来实现一个简单的redux模型，实现之前我们要先熟悉它的用法。 其它组件可以通过订阅store中的状态(state)来刷新自己的视图. 下面我们按照这个思想来想想怎么做。 用文字来描述一下，一个唯一的仓库里，有一个私有属性sta…"}, {"id": "6944312020825014302", "title": "React-函数组件和类组件", "desc": "所谓类组件，就是基于 ES6 Class 这种写法，通过继承 React.Component 得来的 React 组件。以下是一个典型的类组件： 组件的属性props是只读的，调用者可以传递参数到props对象中定义属性，调用者可以直接将属性作为组件内的属性或方法直接调用。往往…"}, {"id": "6844904180205764615", "title": "哪些UI库支持暗模式？", "desc": "如今，黑暗模式是Web，桌面和移动应用程序中经常需要使用的功能。 通过增加可定制的界面来提高开发者对UI库的使用体验是非常重要的，可以带动很多开发者使用特定的UI库。 以下是一些支持暗模式的已知UI库。 React JS的Material Design UI框架在GitHub上…"}, {"id": "6925308376976982029", "title": " React服务端渲染二三事", "desc": "服务端直出HTML会让首屏较快展现，且利于SEO。但所有页面的加载都需向服务端请求，如果访问量较大，会对服务器造成压力。此外，页面之间的跳转，页面局部内容的变动都会引起页面刷新，体验不够友好。 只有首次进入或刷新时需要请求服务器，页面之间的跳转由JS脚本完成，响应较快。但由于服…"}, {"id": "6844903608157208590", "title": "pwa+webpack，初探与踩坑", "desc": "我们都知道pwa是一个新技术.，依靠缓存，离线了还能正常跑，而且秒开。我把以前原生写的小游戏迁移到react，再迁移到webpack+react，最后再升级到pwa。具体介绍不多说，我们开始撸吧。 webpack攻略有很多，不啰嗦了，简单介绍一些重点。记住几个点：入口entry…"}, {"id": "6844904100266508301", "title": "这些点可能是你初学React时需要了解的", "desc": "最近在学习React，这过程中遇到过许多不明白的地方，因此总结出来分享给大家。了解了这些知识后学习React更加容易上手。 下面的各种概念我都没有写得很深入，只是给大家一个引子，方便大家在学习的过程中更加体系化，我相信这些都是大家在学习React的时候必定会去了解的知识。 每个…"}, {"id": "6930508120208867341", "title": "管窥React Fiber", "desc": "React Fiber，简单来说就是一个从React v16开始引入的新协调引擎，用来实现Virtual DOM的增量渲染。 说人话：就是一种能让React视图更新过程变得更加流畅顺滑的处理手法。 我们都知道：进程大，线程小。而Fiber（纤维）是一种比线程还要细粒度的处理机制…"}, {"id": "6844903597105217543", "title": "react-native技术的优劣", "desc": "从2017年初开始到现在，使用React-Native做项目已经一年了。我们做的是一款IM软件，嵌入在一个手机游戏平台的工程内部。之所以要采用react-native（后文简称RN）框架重构它，是因为现在游戏大厅上的所有游戏都是热更新的，为了也能让这个IM软件实现实时更新，减少…"}, {"id": "6844903793356701710", "title": "记一次bem命名规范使用优化方案", "desc": "为了简化bem规范的使用复杂度，我借鉴了几个框架的方法，打造了一款比较简单易用的插件库css-bem(https://github.com/snowzijun/css-bem)。"}, {"id": "6844903619897065480", "title": "为什么你应该尝试@reach/router", "desc": "最近react-router的一个作者另外写了一个类react-router的组件@reach/router，尝试后感觉太棒了。如果你的项目只是web端的话我认为可以把你的react-router换掉了。 下面是我到目前看到的所有非常好的点。 小，就4kb,压缩后比react-…"}, {"id": "6844903590901841928", "title": "借助webpack对项目进行分析优化", "desc": "由于项目过于庞大，老旧。目前项目包含了打包过慢，冗余文件过多等诸多问题。文章中会一步步介绍我是如何通过webpack进行分析，定位并解决这几点问题的。告别刀耕火种，向坏代码说再见！"}, {"id": "6844903592353087502", "title": "组件复用那些事儿 - React 实现按需加载轮子", "desc": "组件化在当今前端开发领域中是一个非常重要的概念。著名的前端类库，比如 React、Vue 等对此概念都倍加推崇。确实，组件化复用性（reusability）和模块性（modularization）的优点对于复杂场景需求具有先天优势。组件就如同乐高积木、建筑石块一般，一点点拼接构…"}, {"id": "6844903711123177486", "title": "create-react-app+mobx入门初体验", "desc": "Decorator是在 声明阶段 实现类与类成员注解的一种语法。 说的直白点Decorator就是 添加 或者 修改 类的变量与方法。 在开始使用mobox，我们还需要纠结一个东西，就是配置环境启用ES7的修饰器语法，当然，如果你不需要修饰器，可以跳过这一部分。 以上代码中，通…"}, {"id": "6995484253756588068", "title": "React Hooks 万字总结", "desc": "前言 在刚接触前端MV* 框架时最开始接触的就是React，当时还是在所谓的'大厂'，但当时还早，所以接触的是14这个版本，后来从这边离开以后进入了创业公司，为了快速迭代，技术从React转到了Vue"}, {"id": "6844903969341308935", "title": "你还是在用Redux来管理组件状态吗?", "desc": "可以和Redux分离使用，只需在用到的地方添加状态，相当于一个局部的全局状态。 Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。 也就是说，使用Context来管理我们的“全局”状态是再好不过的了。 而useCont…"}, {"id": "6933790751377752078", "title": "用更简单的方式从零手写一个react-router", "desc": "至于react-router帮助我们实现了什么东西我就不过多阐述了,这个直接移步官方文档,我们下面直接聊实现另外:react-router源码有依赖两个库path-to-regexp和history,"}, {"id": "6844904004955144200", "title": "React 路由守卫和全局loading控制", "desc": "在前后端分离的项目中，我们通常会遇到实现前端路由权限的需求以及全局loading效果的需求，在Vue项目中，我们可以通过路由守卫beforEach、afterEach这个两个钩子函数来实现进入一个路由时的全局loading效果。而vue-router也提供了灵活的路由配置项允许…"}, {"id": "6844904182936240135", "title": "React技术揭秘1-6 深入理解JSX", "desc": "JSX作为描述组件内容的数据结构，为JS赋予了更多视觉表现力。在React中我们大量使用他。在深入源码之前，有些疑问我们需要先解决： 带着这些疑问，让我们开始这一节的学习。 相信作为React的使用者，你已经接触过JSX。如果你还不了解他，可以看下官网对其的描述。 JSX在编译…"}, {"id": "6946076966676070430", "title": "【避坑指“难”】全网最全面的-基于React实现PDF预览功能（react-pdf-js VS react-pdf）", "desc": "到这里，基本上已满足90%的业务场景，你可以下班了。 某些场景下，请求链接是需要带请求头header的，这是为了告知后端，用户是从某一入口进来的，这种情况下请求头参数就是一个标识作用。随着业务的扩展，我们可能有会开放不同的入口给不同场景下的用户使用，在此条件下，链接跳转的方式就…"}, {"id": "6868052512688046093", "title": "羚珑视频编辑器开发总结", "desc": "羚珑平台在静态类的设计中，已经取得了相应的成绩。在这个基础上结合当前大环境，我们认为可以去做一些动态类的设计，将动画和音效转化为可储存，可移植，可复用的数据。从而用户进行创作的时候，可以通过相对很简单的方式去使用这些高品质的动画和效果。 视频编辑器的主要作用是用户可以通过操作静…"}, {"id": "6844904159137775629", "title": "React Hooks 学习笔记", "desc": "2019 年开始，在使用React的时候，已经逐步从 Class 组件，过渡到函数组件了。虽然函数组件十分便捷，但是在使用函数组件的时候，还是有一些疑惑的地方，导致有时候会出现一些奇奇怪怪的问题。在这里，我想通过官网和博客文章以及自己的一些积累，整理下最佳实践，以备不时之需。 …"}, {"id": "6844903777296711688", "title": "为什么顺序调用对 React Hooks 很重要？", "desc": "在 React Conf 2018 上，React团队提出了Hooks提案。 如果你想知道什么是 Hooks，及它能解决什么问题，查看我们的讲座(介绍)，理解React Hooks(常见的误解)。 当你阅读文档时，不要错过关于最重要的部分——创造属于你自己的Hooks！太多的人…"}, {"id": "6844903810608054280", "title": "精读《编写有弹性的组件》", "desc": "1. 引言 这次通过 Writing Resilient Components 一文，了解一下什么是有弹性的组件，以及为什么 Function Component 可以做到这一点。 2. 概述 相比代码的 Lint 或者 Prettier，或许我们更应该关注代码是否具有弹性。 …"}, {"id": "6897600416352043015", "title": "useAxios-使用TypeScript封装react-hook公共请求函数", "desc": "使用react函数组件搭配react-hook外加typeScript这样的组合方式去完成功能需求已经有一年多的时间了，对hook从陌生到熟悉的过程中个人也感觉受益良多。不得不说，react-hook采用声明式的语法定义相关变量，独立于函数存放的方式去引入状态并进行控制的代码逻…"}, {"id": "6844903901662019592", "title": "剖析 React 源码：组件更新流程（一）", "desc": "这是我的剖析 React 源码的第五篇文章。这篇文章开始将会带着大家学习组件更新过程相关的内容，尽可能的脱离源码来了解原理，降低大家的学习难度。 在另外的两篇文章中你可以学习到如何调和组件及渲染组件的过程。 想必大家都知道大部分情况下多次 setState 不会触发多次渲染，并…"}, {"id": "6976416087600693255", "title": "条件渲染 (精读React官方文档—07)", "desc": "这是我参与更文挑战的第20天，活动详情查看：更文挑战 引言 观察下面两个组件 再创建一个 Greeting 组件，它会根据用户是否登录来决定显示上面的哪一个组件。 这个示例根据 isLoggedIn "}, {"id": "6897641069920387085", "title": "多条文字切换滚动实现（React、JS）", "desc": "constructor内部主要记录了滚动文字的基本信息，重要的两个参数是sloganIndex，sign。 希望互相学习，非常感谢。"}, {"id": "6959811685238620191", "title": "React生命周期的变化和为Fiber架构的准备", "desc": "Fiber 是 React 16 对 React 核心算法的一次重写，我们先get一个点： Fiber 会使原本同步的渲染过程变成异步的"}, {"id": "6920029086391910408", "title": "React官方状态管理Recoil-api详细用法", "desc": "Recoil作为facebook官方提出的状态管理，与react结合度还是很不错。 使用Recoil，您可以创建一个数据流图，数据从atoms（共享状态）通过selectors（纯函数）一直注入到React组件。atoms是组件可以预订的状态单位。selectors可以同步或异…"}, {"id": "6844903649341079559", "title": "理解TypeScript", "desc": "TypeScript是JavaScript的一个超集，扩展了JavaScript的语法，本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。任何现有的JavaScript程序可以不加改变的在TypeScript下工作,等同于ES时代的JS。TypeScript是为大型应…"}, {"id": "6918927117090570254", "title": "taro-designer 可视化拖拽的技术点整理", "desc": "突然间可视化拖拽的风好像在前端的各个角落吹起，自己也鼓捣了一下，代码基本开发完毕，做一下整理。 公司有一部分业务是做互动的开发，比如签到、礼品兑换等。由于互动的业务需要快速迭代，并且需要支持H5、微信小程序、以及淘宝小程序，因此前端采用了taro作为基础框架来满足多端的需求。因…"}, {"id": "6895984646597967879", "title": "React源码解读 | React.cloneElement分析", "desc": "React.cloneElement 方法时不时遇到，多次翻阅官网文档，对其使用方式仍是一知半解，因此，深入源码层，寻找调用方案。此文将从源码层分析总结React.cloneElement 的使用方法"}, {"id": "6844903853884702728", "title": "React造轮系列：对话框组件 - Dialog 思路", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 本文是React造轮系列第二篇。 本轮子是通过 React + TypeScript + Webpack 搭建的，至于环境的搭建这边就不在细说了，自己动手谷歌吧。当然可以参考我的源码。 对话框一般是我们点击按钮…"}, {"id": "6844903718215761934", "title": "详解js原型，构造函数以及class之间的原型关系", "desc": "1. prototype 2. proto 3. constructor 当对象在访问属性和方法的时候，会现在自身查找，如果没有才回去原型中找。（一级一级传递 形成了原型链） 替换原型对象的时候，替换之前构造函数创建的对象A和替换之后创建的对象B，A和B的原型是不一致的。 所有…"}, {"id": "6999462367373312037", "title": "react自定义hook函数", "desc": "在react类组件中，有组件间可共享逻辑时，一般用高阶组件的方式对公共逻辑进行复用，在react函数组件中，hook提供了自定义hook函数的方案来对公共逻辑进行复用。 下面可以通过一段表单受控组件中"}, {"id": "6912445602647244814", "title": "轻松掌握React Hooks底层实现原理", "desc": "由于最近业务较忙，2020年搞懂React原理系列文章最终篇直到现在才在业余时间抽空完成。之前在公司内部已有过一次PPT形式的分享，但经过一段时间对hooks的深度使用，对其又有了更深一些了解，故本次加上新内容并以文章形式再分享一次。 读懂源码只是第一步，弄懂其功能的代码实现方…"}, {"id": "6844903656127463438", "title": "webpack4实操笔记", "desc": "webpack四个核心概念搭建环境及配置基本框架全局安装文件夹初始化文件夹/文件环境局部安装配置基础配置配置package.json简化命令行配置本地服务器（设置默认页面为dist里面的内容）加载CS"}, {"id": "6844903503257665543", "title": "MobX：MobX 和 React 十分钟快速入门", "desc": "MobX 是一种简单的、可扩展的、久经考验的状态管理解决方案。 这个教程将在十分钟内向你详解 MobX 的所有重要概念。MobX 是一个独立的库，但是大部分人将它和 React 共同使用，所以本教程将重点讲解他们的结合使用。"}, {"id": "6844903972117938183", "title": "Gatsby精粹，面向未来的blog", "desc": "安装全局 gastby 命令行，通过这个初始化脚手架。 还吧时间格式化了以下，它能做的远不止这些 还包括 sort、filter、skip 和 limit 等参数对数据做处理. 详情可看文档 可以 通过 await 或者 直接 .then (res => { ... }) 我是…"}, {"id": "6844903586728509453", "title": "优雅地减少redux请求样板代码", "desc": "使用Redux进行开发时，遇到请求，我们往往需要很复杂的过程，并且这个过程是重复的。我们往往会把一个请求拆分成三个阶段，对应到三个Action Type中去，并且配合redux-thunk中间件，将一个异步action进行拆分，分别对应请求的三个阶段。如下所示： 同时，我们需要…"}, {"id": "6844904002136588296", "title": "React.js 新手快速入门 - 开山篇", "desc": "在阅读之前，会有一些小伙伴觉得疑惑，作者怎么写前端文章了呢，作者不是专注后端Java吗？这是怎么了？其实不然，在4年前，那个时候还没有流行vue和react，身为后端程序员的我们，不管是java还是php程序员，都是需要写前端的，不过那个时候的前端没有现在那么多东西。我们一般叫…"}, {"id": "6985029236818116639", "title": "react: 不一样的 ant design", "desc": "react ant design的许多样式与提供的api或者属性都与项目不是很匹配, 这边就这些内容进行整理"}, {"id": "6984994589794893860", "title": "React项目性能优化", "desc": "优化目标：减少组件不必要的diff和重渲染 使用mobx observer 组件状态发生改变，以该组件为根节点的组件树上的所有子孙组件都会进入diff，使用了oberser的组件只有在状态改变时才会d"}, {"id": "6974963914144661540", "title": "react中组件的状态-state", "desc": "组件的状态-state 在react中更新一个组件的办法就是更新state，state更新之后组件重新渲染 创建一个组件 创建一个接口，用来定义state 给组件添加状态 初始化state 更新sta"}, {"id": "6844903663337472008", "title": "浅尝辄止，React是如何工作的", "desc": "React除了是MVC框架，数据驱动页面的特点之外，核心的就是他很\"快\"。 按照普遍的说法：\"因为直接操作DOM会带来重绘、回流等，带来巨大的性能损耗而导致渲染慢等问题。React使用了虚拟DOM，每次状态更新，React比较虚拟DOM的差异之后，再更改变化的内容，最后统一由R…"}, {"id": "6844904192658636808", "title": "从零构建React项目（一）：构建基础框架", "desc": "填写完项目基本信息会生成一个package.json文件。 @babel/preset-env 主要作用是对我们所使用的并且目标浏览器中缺失的功能进行代码转换和加载 polyfill。在不进行任何配置的情况下，它所包含的插件将支持所有最新的JS特性(ES2015,ES2016等…"}, {"id": "6844903619410542600", "title": "深度解析 create-react-app 源码", "desc": "这段时间公司的事情变得比较少，空下了很多时间，作为一个刚刚毕业初入职场的菜鸟级程序员，一点都不敢放松，秉持着我为人人的思想也想为开源社区做点小小的贡献，但是一直又没有什么明确的目标，最近在努力的准备吃透react，加上react的脚手架工具create-react-app已经很…"}, {"id": "6844904000614039560", "title": "编写合格的React组件", "desc": "众知React应用是一种基于组件的架构模式, 复杂的UI可以通过一些小的组件组合起来, 站在软件工程的角度这样的开发方式会提高开发效率, 程序的健壮性和可维护性。 但在实际组件的编写中我们通常会遇到一个问题: 复杂的组件往往具有多种职责, 并且组件之间的耦合性很高, 我们越写越…"}, {"id": "6844903929533349902", "title": "150行hook实现React滚动恢复", "desc": "在实际开发中，往往会碰到一些场景，在一个鼠标滚轮滚动过一定位置的列表中，点击一个具体的列表项，跳到了这个列表项的详情页，当返回的时候，为了保持良好的用户体验，希望在回到列表的时候，还能回到之前列表滑动到过的位置。 在chrome 46之后，history引入了scrollRes…"}, {"id": "6844904013297631240", "title": "react->Ant Design->form表单控件按需加载实现", "desc": "react折腾系列之一：如何在ant框架下，Form表单中实现getFieldDecorator包装控件的按需加载。 文笔有限，代码才是程序员的真爱。相信看完下方的几行简单的代码和其中的注释，大家对本文要描述的问题，会有比较清晰的了解。 ps:当然，很多情况下，你可能只需要实现…"}, {"id": "6926081240940412941", "title": "React(一)", "desc": "注意不要使用push、pop、shift、unshift、splice等方法修改数组类型的状态，因为这些方法都是在原数组的基础上修改，而concat、slice、filter会返回一个新的数组。 因为setState是异步合并更新的，所以setState传递一个对象，如果要更新…"}, {"id": "6844903837791158279", "title": "React Hooks 源码解析（译）", "desc": "我们都知道，新的React Hook系统在社区中引起的反响很大。我们已经尝试和测试过，并且对它及其潜力感到十分兴奋。当你想到hooks时会觉得他们很神奇，不暴露你的实例，React就能管理你的组件（不使用this关键字）。那么React到底是怎么做到的呢？ 今天我将会深入Rea…"}, {"id": "6844903962403946503", "title": "React 监听页面是否切出，避免多余请求", "desc": "页面需要定时发送请求，获取数据，而且这个请求是一个公共请求，应用中所有页面都会进行这样一个操作。所以假如用户打开五个页面，那五个页面都会发送请求，即便用户看不到其余的4个。这种多余的请求会加重服务端的压力。 浏览器里在当前标签页切换时，会触发 visibilitychange …"}, {"id": "6844903735412391944", "title": "React  是如何分辨函数式组件和类组件的？", "desc": "本文中通过探讨这个问题，涉及到了JavaScript中大量的重要概念像原型、原型链、this、类、继承等，通过思考这个问题对这些知识进行一个回顾，不失为一个好的学习方法，但如果你只是想知道这个问题的答案，就像作者说的那样，直接滚动到底部吧。 限于本人水平有限，翻译不到位的地方，…"}, {"id": "6906413937701584910", "title": "React学习摘要", "desc": "React.js 不是一个框架，它只是一个库。它只提供 UI （view）层面的解决方案。在实际的项目当中，它并不能解决我们所有的问题，需要结合其它的库，例如 Redux、React-router 等来协助提供完整的解决方法。 这种方式是不合法的。因为 class 是 Java…"}, {"id": "6844903830270771214", "title": "给React-Router添加路由页面切换时的过渡动画", "desc": "使用过Vue2的同学们应该都知道<transition>这个内置组件，它可以帮我们添加过渡动画，之前一直用它来给Vue-Router路由的跳转添加转场动画，使用起来非常便捷。那在React中应该如何给路由切换添加过渡动画呢？ 关于react-transititon-group与…"}, {"id": "6844903869873389576", "title": "[三元学React]React组件的生命周期函数", "desc": "constructor也是组件在某一个时刻会调用的方法，但是它是ES6语法的一部分，并不是react组件的特性，因此不算作react组件的生命周期函数。 首先是Initialization,初始化state和props的数据，在constructor函数中会接收props、初始…"}, {"id": "6844903808523304967", "title": "初探React Hooks & SSR改造", "desc": "React v16.8 发布了 Hooks，其主要是解决跨组件、组件复用的状态管理问题。 在 class 中组件的状态封装在对象中，然后通过单向数据流来组织组件间的状态交互。这种模式下，跨组件的状态管理变得非常困难，复用的组件也会因为要兼容不同的组件变得产生很多副作用，如果对组…"}, {"id": "6844904071254540301", "title": "react-navigation 5.x安装的坑", "desc": "The libraries we will install now arereact-native-gesture-handler, react-native-reanimated, react-native-screens and react-native-safe-area…"}, {"id": "6844903999993446413", "title": "React Hooks", "desc": "有时候会出现在多个组件里面都出现重复的逻辑代码的情况，我好像遇到这种情况比较多的是在ComponentDidMount生命周期函数里面，有时候需要拿异步的数据或者其他的一些状态会在各个组件里面重复写。 函数式编程（这个算不算优点呢。。。。） 使用const [count, se…"}, {"id": "6844904174002372616", "title": "聊一聊ReactDOM.render", "desc": "最近在重读React的源代码学习的同时就想写一个关于React创建更新的系列文章便于更好的记录学习。本系列是基于React v16.13.1 (March 19, 2020)版本。 通常是如下图使用，在提供的 container 里渲染一个 React 元素，并返回对该组件的引…"}, {"id": "6918996871646183437", "title": "React v17.0新特性——官方介绍翻译", "desc": "今天，我们正式发布了React 17版本。之前我们已经在the React 17 RC blog post一文中详细地描述了React v17 的地位和其中相对与之前版本的改变。这篇文章是对于这个post简单的摘要，所以如果你已经阅读过了RC这篇文章，就可以跳过当前这篇。 Re…"}, {"id": "6876659994448625671", "title": "【react】react hook运行原理解析", "desc": "我们会把useState,useReducer和useEffect等等称之为“hook”。确切来说，hook是一个javascript函数。 从数据类型的角度来说，hook对象是一个“纯javascript对象(plain javascript object)”。从数据结构的角…"}, {"id": "6844903853725319175", "title": "[译] 用 React Hooks 和调试工具提升应用性能", "desc": "在构建 React 应用时，你会发现随着嵌套组件增多，用户界面的某些部分开始变得缓慢迟滞。这是因为，被改变 state 的元素在组件树中的层级越高，浏览器需要重绘的组件越多。 本文将告诉你如何通过备忘（memoization）技术避免不必要的重绘，让你的 React 应用快如闪…"}, {"id": "6921466557268754446", "title": "深入 React 的 setState 机制", "desc": "本篇写的 setState（涉及源码部分）是针对 React15 版本，即是没有 Fiber 介入的；为了方便看和写，所以选择旧版本，Fiber 写起来有点难，先留着将会写。setState 在 React 15 的原理能理解，16 版本的也是大同小异。 虽然已经用 React…"}, {"id": "6902490275084500999", "title": "react hook是什么以及解决了哪些问题？", "desc": "关于react hook是什么以及产生的原因，react官方已经在2018年的react conf上做了详细的说明。有兴趣的可以看官方视频React Today and Tomorrow and 90% Cleaner React With Hooks 根据react官方的说法…"}, {"id": "6992832182024667173", "title": "使用env-cmd为React设置build环境变量", "desc": "通常一个项目会有多个版本，如开发版、测试版、生产版。 在React中，使用yarn start启动的默认是开发版，build后默认是生成版。 如下，是React的ProcessEnv类型： 那么，如果"}, {"id": "6844903686443909133", "title": "如何开发一个百分比饼状图动画", "desc": "我先是用CSS3做发现做不到这种效果，然后尝试用Canvas，做到一半发现也不合适而且有模糊的问题遂放弃。最后决定用SVG！"}, {"id": "6947654580003930125", "title": "Fiber架构", "desc": "一 Fiber之前的React下面代码实现了一个简单的react手写打印出的element如下：效果如下：jsx标签化是嵌套的结构，如代码所示，最终会编译成递归执行的代码，要想中断递归是很困难的。即r"}, {"id": "6844903941323358215", "title": "React学习(8)-React中组件的生命周期", "desc": "前言为了进一步了解React的工作过程,已经晓得了怎么编写React组件,知道了React的数据流,那么是时候学习React组件的生命周期了,每个组件都包含生命周期方法,生命周期如同四季更替,一个人的"}, {"id": "6987762621520805925", "title": "useMemo的替代方案", "desc": "如果state更新缓慢 确保程序运行在生产环境中 确保state没有放在比实际需要更高的位置 通过react开发工具等方法检测导致二次渲染的原因 在高开销的子树上或其他需要的地方包裹useMemo 可"}, {"id": "6844903630428979207", "title": "Vue响应式数据: Observer模块实现", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。接下来的日子我应该会着力写一系列关于Vue与React内部原理的文章，感兴趣的同学点个关注或者Star。 之前的两篇文章响应式数据与数据依赖基本原理和…"}, {"id": "6844903749899517966", "title": "createBottomTabNavigator开发指南", "desc": "createBottomTabNavigator相当于iOS里面的TabBarController，屏幕下方的标签栏。如图： RouteConfigs(必选)：路由配置对象是从路由名称到路由配置的映射，告诉导航器该路由呈现什么。 BottomTabNavigatorConfig…"}, {"id": "6844903497436004360", "title": "使用dva的一些体悟", "desc": "dva是支付宝前端团队时常维护的一个开源项目，会维护，维护，维护！！它集成了redux ， react-router ， 可能还用到了TypeScript等等，看github上说是基于react的最佳实践，使用下来确实感觉挺不错的。组件我没有用antd而是自己写的。 首先你需要…"}, {"id": "6844903717620154376", "title": "在 Create React App 项目中使用 Prettier", "desc": "如果你只想知道如何在 WebStorm 或 VS Code 中，使用 Prettier 去自动格式化代码，那就一拉到底，直奔主题吧。 Prettier 是一个「武断的」（官网用词：opinionated）代码格式化工具。 它只提供了很少的配置项，剩下的一切，你都不用管了，主要是…"}, {"id": "6844903840404209678", "title": "前端技术 | dva，美貌与智慧并存", "desc": "然后呢，蚂蚁金服的一位架构师sorrycc很迷这位美女，正巧刚开发了一款前端框架没有名字，作为一个向女神献礼的项目，dva框架就此诞生。 当然，也不是完全没有新东西，其中有一个Subscription好像之前没有见过，这是一种数据源订阅机制，数据源可以是键盘输入事件、路由变化、…"}, {"id": "6844903871492571144", "title": "React 新特性 Hooks 讲解及实例(二)", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 Hook 是 React 16.8 的新增特性。它可以让你在不编写 类组件 的情况下使用 state 以及其他的 React 特性。 以上代码很好理解，点击按钮让 count 值加 1。 接下来我们使用 use…"}, {"id": "6844904023812734984", "title": "（译）通过编写简易版本的虚拟DOM，来理解虚拟DOM 的原理", "desc": "个人专栏 ES6 深入浅出已上线，深入ES6 ，通过案例学习掌握 ES6 中新特性一些使用技巧及原理，持续更新中，←点击可订阅。 为了保证的可读性，本文采用意译而非直译。 要构建自己的虚拟DOM，需要知道两件事。你甚至不需要深入 React 的源代码或者深入任何其他虚拟DOM实…"}, {"id": "6844903782787088392", "title": "React + Koa 实现服务端渲染(SSR) Part II", "desc": "react-loadable已经好久没维护了，而且跟最新的webpack4+，还有babel7+都不兼容，还会有Deprecation Warning，如果你使用koa-web-kitv2.8及之前的版本的话，webpack build的时候会出现warning，而且可能还有一…"}, {"id": "6916850550399041543", "title": "【译】React DND（Drag and Drop for React）-概述", "desc": "React DND 和大多数其他的拖拽组件不同，你刚开始使用的时候你可能会有些害怕。但是，一旦你了解了其设计核心的一些概念，它就会变得很好理解。我建议你在阅读该文档剩余部分之前先看看这些概念。 其中一些概念类似于Flux和Redux架构。这不是巧合，因为React DnD在内部…"}, {"id": "6933473087526699015", "title": "你真的应该在React中使用 useMemo吗? 让我们一起来看看(译)", "desc": "我们的一些开发人员最近提出了一个问题，什么时候我应该在 React 中使用 useMemo？这是一个非常好的问题。在本文中，我们将使用一种科学的方法，定义一个假设，并在 React 中使用现实生活中的基准对其进行测试。 请继续阅读，了解 useMemo对性能的影响。 UseMe…"}, {"id": "6907054067420233742", "title": "React动效，真的有这么丝滑么", "desc": "“能快速看到编码效果”是很人选择从事前端岗位的初衷。 每个前端萌新都有个实现酷炫动效的理想。 使用React技术栈如何才能快速实现酷炫动效？今天向大家推荐一个动效库 —— Framer motion。 Framer motion的核心API是motion的组件。每个HTML和S…"}, {"id": "6867862227722960904", "title": "Creat React App 从 0 搭建基于 antd mock Redux Toolkit 的 admin 中后台解决方案 (一)", "desc": "从目前实际的背景来看，关于项目中的 中后台管理系统 也就是咱们平常所谓的 admin 项目。不得不提的就是花裤衩偶像 和唐金洲偶像。等等。单从 react 技术栈来看的话呢，想必我们第一想到的就是 antd 系列 ，包括 最近一段时间研究了下它们的源码，有一种规范在。值得深入探…"}, {"id": "6905148951540793351", "title": "F7 移动端组件最佳实践指南", "desc": "本文是对Framework-React中部分特殊组件的一次最佳实践。如有错误欢迎指正! 如果在Tab中要使用带有特殊定位组件, 例如 Fab ToolBar 等等, 需要按照对应的结构编写代码。 React版本的sheetModal 顶部是不带handler的。因此如果我们使用…"}, {"id": "6899074330056261639", "title": "前端项目搭建部署全流程（一）：搭建React项目", "desc": "前段时间突发一个想法，想尝试从零开始搭建一个React项目模板，发布到GitHub，再编写脚手架命令拉取模板以及编写脚本命令快速生成业务模块，然后再用这个模板结合之前的一套组件库，完成编译打包运行一些列操作，再就是另外一个大事，用基于这个项目模板与组件库构建的项目，搭建自动化构…"}, {"id": "6964653615256436750", "title": "React22-diff算法", "desc": "1.时间复杂度 最好的算法都是o(n3) n为元素个数 如果每个元素都去diff的话复杂度很高 所以react做出啦三个限制 1.只对同级元素进行diff，不用对另一个树的所有元素进行diff 2.t"}, {"id": "6844903604583661582", "title": "探索 create-react-app 源码", "desc": "之前公司有个大佬写了个类似 create-react-app 的脚手架，用来创建公司的项目。一直不知道里面实现的原理，借此机会一探 create-react-app 源码，了解下里面运行的机制。 大家不要一看到源码就害怕不敢去看，现在这么优秀项目都开源了，加上各种IDE支持很好…"}, {"id": "6844903589379309582", "title": "一些冷门的js操作", "desc": "大家学习的时候，一开始小白，然后接触到进阶的东西的时候，发现一切得心应手，有的人可能开始说精通了。突然有一天，发现了一些基于很基础的东西的骚操作，就开始怀疑人生：wtf JavaScript？ 如果没有遇到被某些东西打击到或者见识到新的世界，可能永远的，就感叹：jQuery真好…"}, {"id": "6844903593741402125", "title": "有了GraphQL，你可以扔掉Redux了", "desc": "“什么？”你发出惊叫。“GraphQL 是一个服务端查询语言，Redux 是一个客户端状态管理库，这两个风马牛不相及的东西怎么能互相代替？！” 这是个好问题。坐稳扶好了，因为我将正面回答，挑战你的三观。 迁移到 React 回答之前，先听我讲一下故事背景。早在 2016 …"}, {"id": "6844903858443927566", "title": "react 组件库搭建记录", "desc": "stories/pages 目录，用于存放 storybook 所有相关页面， stories/config.js 作为页面配置在入口文件 index.stories.js 中进行引用并根据该配置渲染出所有相关页面，同时假设我们 storybook 有一级目录 基本 且目录下有…"}, {"id": "6844903650381266952", "title": "下拉菜单「点击外面关闭」的终极解决方案", "desc": "场景：react项目。 网上千篇一律的帖子又会说了，在下拉菜单的最外层Div再添加一个addEventListener监听点击事件，事件内只写一个e.stopPropagation()。 然后看着功能还凑合，也实现了业务需求，就那么放着了。 但是还遇到一个问题，那就是e.sto…"}, {"id": "6904472183628627976", "title": "codemirror defineMode自定义高亮", "desc": "Mode的主要作用就是对行文本进行词法分析进而进行文本标识(高亮)，当然了主要功能也是基础功能，大部分mode的设计要求远远不止对文本进行高亮，同时，某种语言的复杂程度也影响着mode的复杂程度。 CodeMirror设计了状态对象(state Object)，该对象是唯一的，…"}, {"id": "6844903959866392583", "title": "create-react-app 使用技巧及源码分析", "desc": "现在大部分 react 项目都是基于 create-react-app 初始化的，对于普通的项目，使用默认的 webpack 配置完全够用。今天讲讲 create-react-app 的使用技巧和源码分析。 代码写多了会发现 webpack 每次启动都很慢，可以通过删除配置、添…"}, {"id": "6844903784016003079", "title": "React 16 新特性全解（上）", "desc": "本次系列分上下两篇文章，上主要介绍从v16.0~ 16.4的新特性，下主要介绍16.5~16.8。下面就开始吧~ 本篇文章较长预计需要15min（当然主要是因为demo太多），大家可以搞点瓜子边啃边看。最好能留出一只手自己在codePen上自己调试一下。 React 15: 只…"}, {"id": "6897181116920496141", "title": "用 React Hooks 实现返回顶部按钮 ？", "desc": "背景在最近的业务中，产品提了一个需求，在页面的右下角添加一个返回顶部的按钮。由于前端UI框架用的是AntDesignPro，因此很自然地去AntDesign组件库寻找有没有类似的组件。AntDesig"}, {"id": "6860388976008626183", "title": "React v17.0 RC版本发布：无新特性（译）", "desc": "2020年8月10日作者 DanAbramovandRachelNabors今天我们发布了React17的第一个RC版本。距离上一个主要版本发布已经过去了两年半，即使按照我们的标准这也是一个很长的时间"}, {"id": "6969769682429542436", "title": "React Hooks时代的代码组织", "desc": "根据代码的用途而不是代码的性质拆分业务逻辑 ，使用这种形式组织代码，随着项目需求的增加与变更，代码维护思路应当会相当清晰。"}, {"id": "6946159311798140942", "title": "React的入门学习", "desc": "React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。 render 返回了一个 React 元素（本质上就是一个对象），这是一种对渲染内容的轻量…"}, {"id": "6844903590666960903", "title": "前端开发碎碎念", "desc": "2333，怎么都是关于Vue的问题。。。我真没黑Vue开发者，不过也可以看出，Vue的小白受众的确比较多。 现在基于Vue，React的SPA单页应用开发，都倾向于采用webpack的模块化构建方案。可能大多数人，开发一个项目，会使用脚手架工具（vue-cli, create-…"}, {"id": "6844903912940503054", "title": "React入门系列一", "desc": "ps：我已经断断续续看了一星期的官方文档，总体来讲，我觉得文档写的很详细，详细的程度以致于我觉得有很多啰嗦的话(哈哈)，所以一边敲案例，一边做自己的总结性的归纳。 5.Babel 转译器会把 JSX 转换成一个名为 React.createElement() 的方法调用。 元素…"}, {"id": "6844903542453436423", "title": "[译]在 React & Redux 中使用 AJAX 轮询", "desc": "正如生活不总是给予你所需之物，你所用的 API 也不总是支持流式事件。因此，当你需要把一些有时序依赖的状态从服务端同步到客户端时，一个常用的 “曲线救国” 方法就是使用 AJAX 进行接口轮询。我们大部分人都知道使用 setInterval 并不是处理轮询的 “最佳人选”，不过…"}, {"id": "6844903688935325704", "title": "谈，前端框架的『御剑之道』", "desc": "剑，是剑客的武器，而现代前端工程师的剑可以理解为前端框架(当然不止是前端框架，但今天我们只谈前端框架)。 所谓御剑之道，指的是如何驾驭所有前端框架。对，你没有看错，是所有，而不是某一个。 如果是介绍如何驾驭某一个框架，那么本文的标题可能就要改成“御剑之术”，但本文介绍的是“御剑…"}, {"id": "6876250055838433294", "title": "React more Reactive", "desc": "Reactive 就是响应式，在现在已经算是个老概念了。为什么说 more reactive 呢，其实本文最终的主旨还是要给还没有开始接触 Hooks 或者对于 Hooks 不是那么感冒的同学安利一下。Hooks 不光是一组 API，他背后承载的是 React 团队想要宣导的一…"}, {"id": "6844903544659640327", "title": "从0开始实现 react-router", "desc": "react-router 已经经历了好几个版本的大更新。 在这里我们打算参照v4.0的设计思想 创一个轮子: tiny-router 现代浏览器提供了 提供了对history栈中内容的操作的api。 重要的有 pushState, replaceState。 这将使浏览器地址栏…"}, {"id": "6902304059361853447", "title": "React Hooks你真的会用了吗？", "desc": "这里当点击按钮以后会引起num变化从而重新渲染header和footer两个子组件，造成多余的render性能损耗。 我们都知道react的组件会根据 state和props属性(父组件传递的) 的变化而发生重新re-render渲染，这里用memo或者useMemo包裹以后,…"}, {"id": "6844903666940379144", "title": "React骚操作——jsx遇到template-directive", "desc": "“React 和 Vue 哪个更好？” 论坛上经常看到这样的问题，然后评论区就直接开战了。也有朋友转行做前端，问我该学React还是Vue。几年前，可能确实有必要考虑下到底该选择哪一个，毕竟前端圈子这么乱，谁又知道Vue能走多远？React会不会不维护了呢？可现在两者生态都很不…"}, {"id": "6844903623177011214", "title": "一起学习造轮子（二）：从零开始写一个Redux", "desc": "Redux是JavaScript状态容器，提供可预测化的状态管理。本文将会详细介绍Redux五个核心方法 createStore，applyMiddleware，bindActionCreators，combineReducers，compose的实现原理，最后将自己封装一个小…"}, {"id": "6844903652197400590", "title": "[译] 组件、Prop 和 State ", "desc": "React Native vs. Cordova、PhoneGap、Ionic，等等 (待翻译) 今天我们来学习 React 里最重要的三个概念: 组件、prop 和 state ，以及 prop 和 state 之间的区别。 如同之前的文章，我还是会尝试用通俗的语言来解释这些…"}, {"id": "6844903597386252296", "title": "Modern Javascript Cheatsheet 简体中文版（持续更新中）", "desc": "Modern Javascript Cheatsheet 整理了在当前项目经常需要查阅的Javascript知识，并给出了常见的代码示例。 它在github上有一万多个star。之前的中文翻译还停留在６个月前，没有进行更新。 为此，Breword翻译小组对最新版本的文档进行了翻…"}, {"id": "6844903581217210375", "title": "精读《前端数据流哲学》", "desc": "本系列分三部曲：《框架实现》 《框架使用》 与 《数据流哲学》，这三篇是我对数据流阶段性的总结，正好补充之前过时的文章。 本篇是收官之作 《前端数据流哲学》。 写这篇文章时，很有压力，如有不妥之处，欢迎指正。 同时，由于这是一篇佛系文章，所以不会得出你应该用 某某 框架的结论，…"}, {"id": "7000032943129231374", "title": "React Fiber 类型的结构", "desc": "Fiber 需要注意的地方： 组件第一次运行时为 fibet mount阶段；后续更新为 fiber update阶段。 函数组件 mount 时 fibet.tag 为 IndeterminateC"}, {"id": "6908710486716940301", "title": "React组件化开发", "desc": "函数组件是使用function来进行定义的函数，只是这个函数会返回和类组件中render函数返回一样的内容。 数组或 fragments：使得render方法可以返回多个元素。(fragments:React.Fragment,如果不想返回数组可以将子元素用&#x3C;Reac…"}, {"id": "6977183638886547493", "title": "在React Native中创建一个弹出式模态", "desc": "模态是改善用户界面的一个伟大工具。从本质上讲，模态是一个出现在另一个屏幕之上的屏幕，将用户的注意力引向关键信息或引导他们进入流程中的下一个步骤。一个激活的模态会使原来的屏幕失效，而原来的屏幕仍然是可见"}, {"id": "6844903542034006030", "title": "compositionEvent组合事件，来填补React input输入框onchange事件的坑", "desc": "以上这段代码，相信大家再熟悉不过了，react controlled组件的最简单的栗子，controlled input组件。首先我们来说一说React的事件，包括上面我们使用的onChange事件，都属于React的合成事件，也就是非浏览器原生的，它是对浏览器原生事件的封装事…"}, {"id": "6844904050513674253", "title": "React@16.8.6原理浅析（hooks）", "desc": "我们可以发现 hooks 的定义非常简单，只是获取了 dispatch 然后调用 dispatcher 对应的 useState 属性，其它 hooks 也是类似，比如 useEffect 是调用 dispatcher 的 useEffect 属性。 接着我们就需要看看 dis…"}, {"id": "6844903802005356552", "title": "优雅的实现动态加载 css、js", "desc": "给大家分享的是 dynamic-file，完美实现以上需求，使用也很方便。 umd规范，无任何依赖，动态加载js、css文件返回一个promise。 前端开发过程中，经常需要加载一些外部资源，类似各种sdk，css主题。有时我们不希望在head中声名，因为这个文件可能只在某些页…"}, {"id": "6844903599793766413", "title": "RN几种脚手架工具的使用和对比（react-native-cli、create-react-native-app、exp）", "desc": "本文档将持续更新，欢迎指正1、react-native-cli2、create-react-native-app安装使用使用create-react-native-app来创建APPcreate-re"}, {"id": "6844903906309308424", "title": "剖析 React 源码：组件更新流程二（diff 策略）", "desc": "这是我的剖析 React 源码的第六篇文章。这篇文章连接上篇，将会带着大家学习组件更新过程相关的内容，并且尽可能的脱离源码来了解原理，降低大家的学习难度。 三篇文章并没有强相关性，当然还是推荐阅读下 前一篇文章。 组件更新归结到底还是 DOM 的更新。对于 React 来说，这…"}, {"id": "6844903908867833863", "title": "[译]5个技巧：避免React Hooks 常见问题", "desc": "在这篇文章里，我们来探索下 React Hooks 的常见问题，以及怎么来避免这些问题。 React Hooks 是在 2018年10月提出 ，并且在2019年2月 发布 。自从 React Hooks 发布以后，很多开发者都在项目中使用了Hooks，因为Hooks确实在很大程…"}, {"id": "6844904194827091975", "title": "UmiJS-NestJS | 微前端子应用前期项目策划", "desc": "根据实际场景去探索更优的方案是我们应该去积极面对的。那么面对着越来越大型的项目。例如TOB 的前端开发，我们往往会遇到一些困境 随着微前端的兴起，慢慢业内开始对之进行探索，不断的挖坑踩坑。针对以上或者不仅仅是以上的痛点。我们决定尝试以小组 为单位，集体实践。那么我们需要面对的问…"}, {"id": "6844904008855846926", "title": "基于 React 的可视化编辑平台实践", "desc": "目前，我们的校园在线招聘业务有大量的企业定制化需求，企业在英才校园做招聘，同时也希望有自己的招聘主页，每年都会招聘一部分兼职同学来开发这类的招聘主页，这类招聘主页通常不复杂，但是如果全部需要前端同学实现的话，还是很耗时费力的，我们希望能通过技术手段不断的提升这类业务的交付效率。…"}, {"id": "6844903825220829198", "title": "[译]React函数组件和类组件的差异", "desc": "在以前，通常认为区别是，类组件提供了更多的特性(比如state)。随着 React Hooks 的到来，这个说法也不成立了(通过hooks，函数组件也可以有state和类生命周期回调了)。 或许你也听说过，这两类组件中，有一类的性能更好。哪一类呢？很多这方面的性能测试，都是 有…"}, {"id": "6844903814194003975", "title": "React Demo Two - TodoList 升级", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章中的一些链接可能失效，而 jsliang 缺乏精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 本次 D…"}, {"id": "6905934872276271111", "title": "完结撒花！三篇短文让你学会 NextJS（三）", "desc": "前两篇文章：三篇短文让你学会NextJS（一）三篇短文让你学会NextJS（二）今天继续聊聊next服务端渲染，重点是API路由和Next.config.js配置。#API路由API路由的目的就是为了"}, {"id": "6909287148864667662", "title": "前端面试复习系列之react-hooks", "desc": "监听深度依赖的值变化自动取消api请求setState过后立即获取新值定时器当自己尝试写过几个自定义的hook之后，想必都能感受到hook给开发者带来的便利，这种感觉就像写了一个逻辑层面的jsx一样，"}, {"id": "6844903553631272967", "title": "基于create-react-app 和 koa2 快速搭建react同构渲染项目总结", "desc": "前段时间业余做了一个简单的古文网 ，但是项目是使用React SPA 渲染的，不利于SEO，便有了服务端渲染这个需求。后面就想写个demo把整个过程总结一下，同时也加深自己对其的理解，期间由于工作，过程是断断续续 。总之后来就有了这个项目吧。关于服务端渲染的优缺点，vue服务端…"}, {"id": "6850418112383975432", "title": "基于echarts的知识图谱可视化实践 （封装组件）", "desc": "公司是做知识图谱领域的，需要展示可视化的知识图谱，在我入职之前后端的小哥哥们写了一套 d3 版本的知识图谱，代码杂乱无章，各种嵌套，不加工具函数都有 1000 多行代码，无论从代码性能还是可维护性上说都很不友好。于是，决定重新寻找方案实现这块内容。 代码写的杂乱无章不是 d3 …"}, {"id": "6987763327279562783", "title": "react源码：应用入口：ReactDOM.render", "desc": "这篇文章来看一下react应用的入口：ReactDOM.render的流程。ReactDOM.render主要做了三件事：创建整个应用的根fiber节点：fiberRoot，合成事件的处理以及挂载应用"}, {"id": "6844903901443915784", "title": "React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n) ，那么 O(n^3) 和 O(n) 是如何计算出来的？", "desc": "这里的n指的是页面的VDOM节点数，这个不太严谨。如果更严谨一点，我们应该应该假设 变化之前的节点数为m，变化之后的节点数为n。 React 和 Vue 做优化的前提是“放弃了最优解“，本质上是一种权衡，有利有弊。 React 和 Vue都不会检测到，就会发生莫名其妙的问题。 …"}, {"id": "6857053770167353358", "title": "一步一步搭建React+TypeScript后台管理项目", "desc": "1.使用create-react-app创建一个基于typescript的项目2.进入项目并启动3.引入 antdindex.css文件中引入样式，组件按需引入即可引用示例4.下载react-rout"}, {"id": "6981083532093292580", "title": "《复习计划一》你应该在五分钟内掌握的 this 规则", "desc": "五大规则 箭头函数由外层作用域决定 如果 new 关键词出现，会创建新的对象，this 指向新创建的函数 显示绑定（通过 apply、call、bin"}, {"id": "6911975175806255118", "title": "React 避免不必要的更新(函数组件)", "desc": "使用memo()对函数组件进行缓存，使其只有在props变化时重新执行。 当组件执行时，会对组件中的所有变量重新初始化。如下代码： 每次点击 increment 按钮都会出发 myComponent 组件的执行，从而导致 data 的从新初始化。而 List 组件发现 data…"}, {"id": "6896077941391032328", "title": "【译】怎样学习React ", "desc": "让我们看看如何通过正确的顺序学习React，来减少障碍。正确学习React的方法是。。。实话说，他因人而异。但是仍然有一些建议给众多学习React的开发者。封装我们开始谈论封装。这个抽象的例子来自： "}, {"id": "6844903567518629896", "title": "React Native——自定义下拉刷新上拉加载的列表", "desc": "在移动端开发中列表页是非常常见的页面，在React Native中我们一般使用FlatList或SectionList组件实现这些列表视图。通常列表页都会有大量的数据需要加载显示，这时候就用到了分页加载，因此对于列表组件来说，实现下拉刷新和上拉加载在很多情况下是必不可少的。 本…"}, {"id": "6900558966556721160", "title": "React 16.8 [工作原理详解]", "desc": "我们今天不分享 React 具体语法，组件， 通信 ，Ref ，Portals ，Context ，Hoc ，Hook 等等知识点，这些东西，大家细致的看一下官方文档都可以熟悉的进行开发任务，而今天我想谈谈 React 的工作原理 。 ... .... Virtual DOM …"}, {"id": "6844903965797122061", "title": "React Hooks 的钩子够用吗？", "desc": "今天，我们要来聊一聊 React Hooks 官方当前提供的 useXXX 到底够不够用，是否能满足我们日常的开发需求。 是的，一点都没错。用过 useState 的同学应该都知道，原来的 this.setState，现在可以用 useState 的返回值中的方法 setXXX…"}, {"id": "6979886043994521613", "title": "002.react基础案例", "desc": "1.创建html文件 引入React的三个常用包 2.准备一个容器 3.创建虚拟DOM并渲染 总结注意点"}, {"id": "6844903903272632334", "title": "React + TypeScript 开发Switch组件", "desc": "学习如何使用原生HTML的复选框来开发一个React开关组件，在这个过程你将会学到许多React复选框相关的知识。 下面是IOS向世界推出的UI组件，人们把它称之为Switch或者Toggle。 在IOS推出Switch之前，网页中的布尔输入只有复选框。复选框当然依旧可以在今天…"}, {"id": "6844903791720923150", "title": "[译] JSX 的替代方案", "desc": "如今，JSX 已经是一个非常受欢迎的框架模版了，它的应用也不仅仅局限于 React（或其他 JSX 衍生模版）。但是，如果你并不喜欢它，或者有某些想要避免使用它的项目，或者只是好奇不使用 JSX 该如何书写 React 代码的时候，该怎么办呢？最简单的方法就是去阅读官方文档，但…"}, {"id": "6844904005055807496", "title": "如何用useContext + useReducer实现redux功能", "desc": "在hooks没有出来之前，Redux毫无疑问是众多React项目首选的状态管理方案，在项目创建之前，需要做好文件夹分割。 只会简单的应用，不知道该怎么统一代码了。 可以参考 redux 写一个CombineReducer, 用 Array.prototype.reduce 很好…"}, {"id": "6901089942580150280", "title": "如何理解SSR的hydrate过程？", "desc": "ReactCSR：水车模型当初在理解ReactCSR时做过一个比喻，把单向数据流比作瀑布模型：（摘自深入React）单组件的微观视角下，我们把props理解为水管（数据通道），接收外部传递进来的数据（"}, {"id": "6844903782342459400", "title": "React 渲染 Markdown 的方法", "desc": "Markdown 提供了编写文章的方便，我们可以透过 Remarkable，Marked 等一些解析 Markdown 工具来获取 HTML，然后透过 React 原生的 dangerouslySetInnerHTML 方法直接放到组件里面。"}, {"id": "6844903811413196814", "title": "react-dva学习 --- 用实例来入门", "desc": "异步操作只需要在app.model里面增加effects属性就可以了。"}, {"id": "6844904047443443725", "title": "React性能优化", "desc": "在我们平常的 React 开发中，我们肆无忌惮的编写着代码，项目刚开始可能没什么大问题，但是随着项目越来越大，功能越来越多，问题就慢慢的就凸显出来了。为了让项目能够正常、稳定的运行，我们在编写代码的时候应该多思考，代码该怎么划分、该怎么编写。 React.PureCompone…"}, {"id": "6933141646464778253", "title": "i18n（Internationalization）", "desc": "进行下一步之前，我们要先引入语言文件包，这里我使用中文、英文两种语言，文件是json格式的，所以引入了中文版zh.json和英文版en.json。其实就是普通的json对象，两个文件的结构一样，只有最后的值不同，一个是中文一个是英文。 i18next的基本原理是Context，…"}, {"id": "6906007507531038727", "title": "【React全解3】React.useState原理详解，一次性搞懂useState", "desc": "useState 有两个状态，一个是 n，另外一个是 setN。 setN 是修改数据 n 的，将修改后的 n 存入 state。 setN 修改数据后一定会触发&#x3C;App/>的重新渲染（re-render）。 useState 一定会从 state 读取最新的 n 值…"}, {"id": "6844903834582515720", "title": "React项目实战（三）尝试实现一个拉动刷新组件", "desc": "分析：我们需要实现两个方向（向下拉动，向上滑动）上的拉动刷新，考虑完成 PullDownRefresh 和 PullUpRefresh 两个组件的编写。思考其中细节： offsetHeight 是一个DOM属性。它有时被称为一个元素的物理/图形的尺寸，或是一个元素的边界框（bo…"}, {"id": "6844903589547081741", "title": "EventEmitter：从命令式 JavaScript class 到声明函数式的华丽转身", "desc": "新书终于截稿，今天稍有空闲，为大家奉献一篇关于 JavaScript 语言风格的文章，主角是函数声明式开发。 我们对一个简易的，面向对象的 EventEmitter 系统，一步步改造为函数式风格。并结合实例来说明函数式的优秀特性。 相信“函数式”这个概念对于很多前端开发者早已不…"}, {"id": "6844903843990372365", "title": "React实现浏览器打印指定内容", "desc": "近期着手项目任务的打印功能，在此作个记录，本文介绍基于React的一种调用浏览器打印页面指定内容的方法。 整体思路： 通过构建一个隐藏的元素（该元素包裹需打印的内容），当打印行为触发时，将页面其他的一些不需要打印的元素隐藏，然后将需打印的元素追加到body中，打印完成后，再恢复…"}, {"id": "6844903716093427720", "title": "基於 GatsbyJS 的博客系统正式开源：gatsby-starter-calpa-blog，及其使用方法", "desc": "感谢各位这些年来阅读我的博客文章，以及优化博客系统框架，现在，我将为你带来一个前后端彻底分离，而且可以一键启动的博客框架。 透过这个腳手架，你可以快速建立一个如同 Calpa's Blog 的博客系统。 最佳化 iPhone 6/7/8 环境，支持 iPad 等平板环境，以及 …"}, {"id": "6844903577060638734", "title": "如何在原生微信小程序中实现数据双向绑定", "desc": "首先，要使数据双向绑定，应该避免过多的数据源。 在数据从上到下自然流动的情况下，如果每个组件中都维护它们自己的数据，而又要保持它们数据值的一致，这虽然可以做到，但实现过程并不会简单。 但是也没必要说为了有一个统一的数据源就使用 mobx 或 redux 来全局管理数据，这就有点…"}, {"id": "6844904099004022797", "title": "事件处理与合成事件（react）", "desc": "React 事件的命名采用小驼峰式（camelCase），而不是纯小写。 使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。 Web应用中，事件处理是重要的一环，事件处理将用户的操作行为转换为相应的逻辑执行或界面更新。在React中，处理事件响应的方式有…"}, {"id": "6844903683994419207", "title": "开始测试React Native App（上篇）", "desc": "我是测试小白，小小白，小小小白，最近想在成了一定规模的项目中引入测试，于是找了许些资料学习，现在已经在项目中成功引入。于是想在思路明朗和记忆深刻的时候总结下学习路径以及写测试中遇到的难点、坑点、注意点。给自己的近段学习成果做个总结，同时也希望能帮助到和我一样初入测试的人。 Re…"}, {"id": "6953262469032706061", "title": "简易版 React-Router 实现", "desc": "上一篇简单的介绍了react-router 的使用方法和基本的API，对于react-router几个重要的API做了源码解读。这篇就实现一个简易版的 react-router"}, {"id": "6969117536436617247", "title": "React useReducer + Context 在TS更友好的使用方式", "desc": "我们在创建createContext，setGlobalState的默认值为抛出错误， 默认值仅在组件的树中没有匹配的 Provider 时被使用，正常情况下，默认值都会被覆盖，没被覆盖是不符合我们预"}, {"id": "6844904093811474440", "title": "hooks 实现简易版 react-redux", "desc": "1. 我们需要实现什么 2. 确定我们的用法 4. 实现 useDispatch 5. 实现 useSelect 做完之后，我们发现，如果我的store里面的值怎么改变都不会重新触发 re-render， 应为对于组件而言，他并没有状态改动，store一直是没有变化的。那么我们…"}, {"id": "6844904048965976072", "title": "react实现移动端下拉菜单", "desc": "项目中要实现类似与vant的DropdownMenu:下拉菜单。看了vans 的效果 其实也没什么难度，于是动手鲁了一个这样的组件。 项目的技术栈为react全家桶+material UI + ant Design mobile。 每次点击不同的tab时 都会自动的渲染curr…"}, {"id": "6844903847547109389", "title": "React Hooks 之 useFetch", "desc": "1. try / catch问题 在开发代码时，我们发送后端请求后接受到的数据，需要使用try/catch来捕获错误。而每次捕获出的错误可能需要打印出来以检测bug。这样我们每次都会写同样的代码，这样在开发过程中很不友好。同时有些同学不习惯使用 try/catch 来捕获错误，…"}, {"id": "6844903904002441230", "title": "怎么给新手解释 react 的 spa 应用锚点跳转的问题", "desc": "单页面应用，在同一个页面使用 hash 跳转到页面不同位置(锚点跳转)。此功能是不正常的。 还可以看看前人发的 issue 参见：https://github.com/ReactTraining/react-router/issues/394。针对这个问题也有相应解决方案： 如…"}, {"id": "6844904002254012430", "title": "后生，React-Hooks了解一下", "desc": "如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。如果你感觉有问题，也欢迎在评论区评论，三人行，必有我师焉 如果是你一个React开发者，或多或少接触了React 16.8的一些新特性。例如：React.memo()、React.lazy、React.Suspense等一些…"}, {"id": "6844903536656908296", "title": "D2 - 打造高可靠与高性能的React同构解决方案", "desc": "随着React的兴起, 结合Node直出的性能优势和React的组件化，React同构已然成为趋势之一。享受技术福利的同时，直面技术挑战，在复杂场景下，挑战10倍以上极致的性能优化。"}, {"id": "6844903625420963854", "title": "Airbnb弃用之后，我们还应该用React Native吗？", "desc": "作者｜CharlieCheever译者｜无明编辑｜覃云近日，Airbnb发表了一组由5篇博文组成的系列文章（https://medium.com/airbnb-engineering/react-na"}, {"id": "6844903682476245000", "title": "Redux的中间件Middleware不难，我信了^_^", "desc": "Redux的action和reducer已经足够复杂了，现在还需要理解Redux的中间件。为什么Redux的存在有何意义？为什么Redux的中间件有这么多层的函数返回？Redux的中间件究竟是如何工作的？本文来给你解惑，Redux中间件从零到“放弃”。 本文的参考网站只有二个，…"}, {"id": "6876356146282627086", "title": "「代码解决方案」 之管理系统功能代码总结", "desc": "没有对数据进行扩展处理，一个值一个变量。例如：获取数据详情返回的多个对象，便依次存储多个对象，这样在参数变更时，便要不停地补充参数，如果你使用的是react，就会发现大量的state还没有注释它是用来干什么的，不管对于维护者，还是初入者都是不友好的，其实我们可以存储在一个变量里…"}, {"id": "6844903917747175438", "title": "React学习(6)-React中组件的数据-state", "desc": "并且大篇幅的讲到setState这个函数需要知道的,可接收两种类型的参数,一个是对象,另一个是函数,以及这两种方式的区别,如何划分组件的状态数据,原则上是尽可能的减少组件的状态。以及最后的props与state的灵魂对比 虽然可以简单的用几句话概括props与state的作用,…"}, {"id": "6844903577224232967", "title": "星级评价组件--引发对React组件的思考", "desc": "星星填充的写法与tiny-rate类似，也是两层元素的叠加来模拟星星填充的效果，与之不同的是我给每颗星星(item)上都添加了点击事件，为了兼容我们在移动端的使用。点击每颗星星时，获取其序号，通过css3d的calc来计算出应该变化的宽度，从而达成星星填充的效果。 另外，由于☆…"}, {"id": "6844903502460780551", "title": "前端每周清单第 34 期：Vue 现状盘点与 3.0 展望，React 代码迁移与优化，图片优化详论", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Microsoft 宣发面向 iOS 与 …"}, {"id": "6844903566193197070", "title": "React Native——ListView的使用详解", "desc": "简单说它就是一个列表组件，用来显示列表视图，类似Android中的ListView，iOS中的UITableView。作为列表组件，ListView是非常常用的。虽然官方文档中指出ListView已经过期，指定FlatList和SectionList替代ListView来使用，…"}, {"id": "6844903560459583496", "title": "在 React 工程中利用 Mota 编写面向对象的业务模型", "desc": "React 是一个「视图层」的 UI 框架，以常见的 MVC 来讲 React 仅是 View，而我们在编写应用时，通常还需要关注更加重要的 model，对于 React 来讲，我们常常需要一个「状态管理」库。然而，目前大多数针对 React 的状态管理库都是「强依赖」过多的侵…"}, {"id": "6844903573055078408", "title": "react 知识梳理（一）", "desc": "观察以上代码，我们可以知道，每个 DOM 其实都只包含了三个信息：标签名称、属性、子元素。因此，每个 DOM 元素，我们都可以用一个 js 对象来标示。上面这段代码我们可以这样表示： 在 React 中，我们使用 React.createElement 来将上面的这种 js 对…"}, {"id": "6911522592331399182", "title": "React学习-- 路由，Redux简单应用，aixos封装", "desc": "操作下来，真心觉得，没有 Vue 路由好用。。。。 测试，即可。 简单实现，修改，获取数据管理数据。跟vuex一样吧。 完成。 1、 React 路由就是个坑。本人打包部署服务器时，跳转路由后刷新一直空白。 放 nginx 配置下，无果。。。。百般折腾下，终于找到 https:…"}, {"id": "6844904021753331719", "title": "vscode  配置 react jsx 标签自动补全", "desc": "1、编辑器文件--首选项--设置2、搜索emmet,然后在setting.json中配置，选择工作区3、增加上{   \"emmet.includeLanguages\":{   \"javascript\""}, {"id": "6844903693419053064", "title": "React SSR重构踩坑记录(持续更新)", "desc": "场景：第一次在node中直接使用import Story from '../js/containers/story';就会报这个错误。 错误说明：node本身使用的是commonjs的语法，支持的模块引入和导出方式为require以及module.export，然而es6定义的…"}, {"id": "6844903668446150669", "title": "react-redux源码分析及实现原型（上）", "desc": "redux作为大型应用的状态管理工具，如果想配合react使用，需要借助react-redux。 当应用状态发生变化，触发监听器。 那么，如果想要将react和redux搭配使用，就需要react组件可以根据redux中所存储的状态（store）更新view。 并且可以改变st…"}, {"id": "6844903902995824654", "title": "使用React HOC优雅得实现分层权限的路由", "desc": "游客访问除登陆页以外的页面时自动跳到登陆页。 分析需求可以得到游客、会员、管理员的权限逐层递增的。管理员的权限范围包含普通用户的权限范围，普通用户的权限范围包含游客权限范围。"}, {"id": "6844903656714665998", "title": "Webpack 4.x搭建react开发环境", "desc": "必要依赖一览(npm install) 安装好。 babel系列是干什么用的呢？是为了支持es6以上的高级语法的编译。但是因为react有jsx这个东西存在，所以单纯的babel是不够的，此外要让babel作用于webpack，需要给webpack添加一个loader（以前版本…"}, {"id": "6920424288122044424", "title": "如何在React项目中使用ECharts图表库", "desc": "在项目的开发中，对于我们前端开发人员而言，总是无法避免需要对数据进行可视化分析和设计的需求。但事实上，如果单纯的依靠Html5 Canvas想要快速地创建简洁，美观，炫酷的可视化作品难度极大且可维护性差。而现如今随着技术的迭代更新发展，已经出现很多可靠，易用，操作便捷，可交互，…"}, {"id": "6844903600444047368", "title": "回调地狱", "desc": "异步JavaScript或使用回调的JavaScript很难直观地得到正确的结果。很多代码最终看起来像这样： 回调地狱的原因是，当人们试图以一种从上到下的视觉方式执行JavaScript的方式编写JavaScript时。很多人犯这个错误！在C，Ruby或Python等其他语言中…"}, {"id": "6867820617770401806", "title": "react+ts+antdesign 踩坑实录", "desc": "首次尝试使用react，用react+ts+antdesign做了个项目，初学者的坑都踩了遍，将项目过程中的踩坑记录了下来，不得不感叹react hook真的好用诶。貌似多写点介绍才能显示在缩略图中哦，强迫症迫使我啰嗦加字滴答滴答"}, {"id": "6844904005152276487", "title": "React 的生命周期变化", "desc": "React 从 v16.3 开始，对生命周期进行了渐进式的调整。废弃了一些生命周期方法和添加了一些新的生命周期方法。 虽然废弃了这几个生命周期方法，但是 React 为了遵循版本兼容，所以 v16.3 并没有删除这三个方法，并且还增加了UNSAFE_componentWillM…"}, {"id": "6918602124804915208", "title": "【react】初探server component", "desc": "2020年的12月21日，react官方对外宣布了一个还处于打磨阶段的新特性：“React server component”。官网的blog上对于“React server component”的简短描述也赫然于屏幕上： 仅仅凭【Zero-Bundle-Size】寥寥数语，我…"}, {"id": "6964197768877326366", "title": "React 数据管理之 Flux", "desc": "背景 在 2014 年的Rethinking Web App Development at Facebook会议上，Facebook 首次公开了 Flux 和 React。"}, {"id": "6890147688910700557", "title": "Recoil - React 状态管理库", "desc": "说到 React 状态管理库，大家已经习惯了使用 Redux，所以在开始介绍 Recoil 之前，我们先来看个使用场景，对比下两个库的设计思想和实现方式。 左边为所有 Item 信息列表，并且可以增加新项。 中间画布展示所有 Item。Item 可以拖动，拖动时右边属性实时更新…"}, {"id": "6924550573945520136", "title": "舍弃redux，基于swr的通用数据流方案", "desc": "在对新项目进行技术选型的时候，针对数据流做了一些思考记录。 大量的文章分析了redux、mobx等数据流方案的优缺点，在我看来，方案的选择离不开业务。 而在react hooks 之后，又涌现了很多优秀的解决方案如：SWR等。 当数据不需要共享，那它就应该只属于某个组件，保持它…"}, {"id": "6844903605850341390", "title": "react中使用swiper", "desc": "欢迎大家访问我的博客OECOM，与我一起探讨前端。 最近的react项目需要使用轮播图，自然而然的就想到了swiper，一直想通过npm安装的方式来使用，但是网上找了很多，资料很少，于是就暂时通过在index.html里直接引用swiper的js和css文件的方式来加载，下面来…"}, {"id": "6871875867346698247", "title": "自己实现一个自定义React项目脚手架「ReactCli」", "desc": "首先为什么想到自己实现一个React脚手架呢？是因为之前刚接触create-react-app时，觉得不太灵活。虽然文件目录很清晰，但是还是觉得不如VueCLI的可以自定义配置更加灵活。当然React官方提供了可以暴露配置的命令npm run eject，说再多不如自己实现一个…"}, {"id": "6977611757774700580", "title": "React系列实战篇：留言功能（二）", "desc": "学到这里，我们把上面案例给修改一下，不要通过原始的 html 加 CDN 的方法引入 React，我们来采用 React 给我们提供的脚手架来改写一下上次的内容。"}, {"id": "6844904054917693453", "title": "《精通react/vue组件设计》之用纯css打造类materialUI的按钮点击动画并封装成react组件", "desc": "作为一个前端框架的重度使用者,在技术选型上也会非常注意其生态和完整性.笔者先后开发过基于vue,react,angular等框架的项目,碧如vue生态的elementUI, ant-design-vue, iView等成熟的UI框架, react生态的ant-design, m…"}, {"id": "6859292592195158030", "title": "typescript实战总结之实现一个互联网黑白墙", "desc": "笔者上一篇文章 TS核心知识点总结及项目实战案例分析 主要写了typescript的用法和核心知识点总结, 这篇文章将通过一个实际的前端案例来教大家如何在项目中使用typescript. 该项目是一个响应式网站, 针对PC端和H5均做了一定的适配, 接下来我们将正对该网站做一次…"}, {"id": "6974592814998880286", "title": "React中的不可变性及JSX简介 (精读React官方文档—02)", "desc": "这是我参与更文挑战的第15天，活动详情查看：更文挑战 为什么不可变性在React中非常重要？ 不可变性指的是不直接修改数据，而是使用新的数据替换旧的数据。 不可变性带来的优势： 撤销和回退操作在开发中"}, {"id": "6844903669305966599", "title": "Redux-saga框架使用详解及Demo教程", "desc": "在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（Effect 可以看作是 redux-saga 的任务单元）。Effects 都是简单的 Javascript 对象，包含了要被 Saga middleware 执行的信息（打个比方，你可…"}, {"id": "6844903929495420941", "title": "如何优雅的在 Material UI 中使用 form", "desc": "Material UI 可能在国内的公司和前端圈子里并不火热，因为他们有 antd，诚然 antd 确实是一套非常好的企业级解决方案，阿里也是这么为其定位的，但是其作为一个单纯的 UI 框架其实过于复杂了，过于封装了，会让使用者经常感觉到不自由，并且会让代码的重复度和 UI 的…"}, {"id": "6951709960833564708", "title": "useState源码阅读，如果useState第二个返回值传入一个函数会发生什么？", "desc": "如果useState第二个返回值传入一个函数会发生什么？ 带着问题这，通过react源码来了解一下useState的执行过程，以及阅读源码的一些思考的过程"}, {"id": "6844904180918779912", "title": "是时候放弃react-router，拥抱route状态化了", "desc": "上面都是比较简单的例子，在真实项目中路由往往还和业务逻辑息息相关，获取数据还有前置依赖和冲突，再考虑到路由权限、逻辑重用、模块化、路由守护、条件判断等等，让集中配置式路由不堪重负，到后面写出来到配置文件谁都看不明白了。 典型到案例就是 react-router，它将路由逻辑分散…"}, {"id": "6844903766907437070", "title": "Next.js 脚手架进阶 —— 部署上线", "desc": "最近经常有人在前几篇关于Next.js的文章里问我如何部署项目，并且还有小伙伴尝试使用这个脚手架编写项目，真的是非常开心和感谢大家啊，写的不怎么样，希望志同道合的小伙伴可以多提意见，我好改进～。不过我如果说我也没部署过你们会不会打我？哈哈，不要着急，今天咱们就撸一发部署上线～满…"}, {"id": "6844903618294841357", "title": "浅谈混合应用的演进", "desc": "开篇想以这样的方式开头，从 APP 开始火到现在，前端同学就一直想要写 APP，各方技术也是为了让前端同学写上 APP 操碎了心。 为什么要前端同学来写 APP，站在整个技术链上来看，都是在做页面呈现，页面交互，对于技术而言只是将产品在不同的端上进行呈现，所以很早之前就有提倡说…"}, {"id": "6864776382241898509", "title": "带着问题看React新生命周期", "desc": "弃用的生命周期方法，经常被误解和滥用，是不安全的。如： 1：在 componentWillMount 中获取数据可以避免第一次渲染为空的状态。实际上，这是不对的，因为 React 总是在 componentWillMount 之后立即执行 render。如果在 componen…"}, {"id": "6919404272887169038", "title": "React系列  上", "desc": "写在前面本文如果想快速过一遍可以直接跳到每个知识点的总结，同时本文保持更新中···1，react中pureComponent与Component 区别shouldComponentUpdate： 我们"}, {"id": "6844903730089820168", "title": "「译」React Fiber 那些事: 深入解析新的协调算法", "desc": "React 是一个用于构建用户交互界面的 JavaScript 库，其核心 机制 就是跟踪组件的状态变化，并将更新的状态映射到到新的界面。在 React 中，我们将此过程称之为协调。我们调用 setState 方法来改变状态，而框架本身会去检查 state 或 props 是否…"}, {"id": "6962510941980360741", "title": "React基本使用", "desc": "hello React 使用JSX语法 下载此插件 卸载此插件 JSX语法练习 组件基础 组件实例属性state 简写如下： 组件实例属性props"}, {"id": "6867867393683636237", "title": "React Time Slice（-） -   requestIdleCallback polyfill", "desc": "React 从 v16.0.0 开始，实现了异步渲染模式（Concurrency Mode），解决了之前 Stack Reconciler 采用同步更新的问题。异步渲染，实际上就是将一个大的渲染任务，分成很多个小的任务，每个任务执行完就交出主线程，使得其他线程可以处理其他事情（…"}, {"id": "6844904121749733389", "title": "深入react的state和props更新", "desc": "这篇文章用一个由parent component和children component组成的例子来讲述fiber架构中react将props传递给子组件的处理流程。 在我先前的文章中 深入React Fiber架构的reconciliation 算法 提到要想理解更新流程的技术…"}, {"id": "6844903670685892616", "title": "React专题：操作DOM", "desc": "React存在的意义就是状态与UI分离，使开发者不知有DOM，无论魏晋。 不过有些状态是无法与UI分离的，比如说表单的聚焦，复杂的动画等等。 怎么办？在React完全控制DOM之前，它还是给开发者留了后门。 每一个class组件实例化的时候都会挂载一个refs属性，它就是用来存…"}, {"id": "6844903913494151181", "title": "React Hook起飞指南", "desc": "16.8目前放出来了10个内置hook，但仅仅基于以下两个API，就能做很多事情。所以这篇文章不会讲很多API，也不会讲API的基本用法，只把这两个能做的事情讲清楚，阅读全文大概5-10分钟。 这两个api就是hook世界里的镰刀和锤子，看似简单的两个api实际上所代表的，是相…"}, {"id": "6844903665791139848", "title": "初识react(二) 实现一个简版的html+redux.js的demo", "desc": "整个应用的state都被存储在一个仓库中，我们称之为store,整个应用只能有一个store。 唯一改变state的方法就是dispatch(action)，即派发动作。 store就是保存数据的地方，可以看成一个容器。整个应用只能有一个store action必须是一个对象,…"}, {"id": "6844903845965856782", "title": "React项目实战（四）滚动的数字", "desc": "分析：我们要实现一个数字滚动效果，保证每个位上的数字都至少滚动一周，滚动效果是自下往上。让我们先思考一下几个细节： 说一下我的思路历程吧，我一开始居然没想到用动画来实现，而是用setTimeout递归地插入每个位上的数字，写完之后才发现没有实现滚动。然后又search了一下滚动…"}, {"id": "6959192326128271390", "title": "初探Fiber架构", "desc": "在讲Fiber之前先来了解下Fiber的前生Stack Reconciler 调和又译为协调，协调过程的官方定义如下： Virtual DOM是一种编程概念，这个概念里UI以一种理想化的或者说虚拟的表"}, {"id": "6844903762444681229", "title": "学习 React 前你需要知道些什么", "desc": "如果你正在看这篇文章，你很可能已经知道 React 是啥了。React 的学习曲线陡峭是众所周知的，很多人在开始学习 React 时都一头雾水，笔者自然也不例外。究其原因，是因为我们在学习 React 的时候，要学的并不仅仅只是 React 这个库本身。React 自身只是一个…"}, {"id": "6844903544558977037", "title": "React + Redux 性能优化（一）：理论篇", "desc": "本文的叙事线索与代码示例均来自High Performance Redux，特此表示感谢。之所以感谢是因为最近一直想系统的整理在 React + Redux 技术栈下的性能优化方案，但苦于找不到切入点。在查阅资料的过程中，这份 Presentation 给了我很大的启发，它的很…"}, {"id": "6844903712935116807", "title": "React和Vue中，是如何监听变量变化的", "desc": "把react源码和自己刚刚创建的项目关联起来，之前build源码到build文件夹下面，然后cd到react文件夹下面的build文件夹下。里面有node_modules文件夹，进入此文件夹。发现有react文件夹和react-dom文件夹。分别进入到这两个文件夹。分别运行ya…"}, {"id": "6844903603958726669", "title": "React&Redux实战", "desc": "一个天气预报React应用"}, {"id": "6844903850403430407", "title": "上拉加载&&判断用户滑到底部", "desc": "一般我们的做法是判断scrollTop和clientHeight对比scrollHeight,得出是否在底部。 但是这种做法在移动端会有各种各样的问题，包括浏览器版本，ios，Android。 此方法非常简单，只需要为元素生成一个IntersectionObserver,并且监…"}, {"id": "6977146350752399374", "title": "表单(精读React官方文档—09)", "desc": "这是我参与更文挑战的第22天，活动详情查看：更文挑战 表单基本介绍 举例 解读 该表单具有默认的HTML表单行为，实现这种效果的方式，在React中是通过受控组件的方式。 受控组件 让前一个例子在提交"}, {"id": "6988379829661859877", "title": "关于React如何实现keepAlive的探索", "desc": "做了挺多中后台的项目，碰到过最多的是列表跳转详情，然后再从详情跳转到列表。这时候，就有个需求，从详情页跳转回列表需要显示原来的位置"}, {"id": "6844904202049699848", "title": "React技术揭秘1-4 源码的文件目录", "desc": "那么架构是如何体现在源码的文件结构上呢，让我们一起看看吧。 这些API是全平台通用的，它不包含ReactDOM、ReactNative等平台特定的代码。在NPM上作为单独的一个包发布。 Scheduler（调度器）的实现。 源码中其他模块公用的方法和全局变量，比如在shared…"}, {"id": "6844904122412433422", "title": "【译】用 Enzyme 测试使用 Hooks 的 React 函数组件", "desc": "React 函数组件本质上是一个返回 React Element 的简单函数。这是 React v16.8 中最值得期待的功能，通过 Hooks 的文档，我们知道使用 Hooks 可以在无状态的函数组件中注入 state 和生命周期方法，让组件变成 stateful。Hooks…"}, {"id": "6949369334846193701", "title": "从零开始实现一个react-02-JSX和虚拟dom", "desc": "1.React文件：title会被babel转译成虚拟dom接着来看下引入的React:编译后，打开浏览器，在localhost:1234端口可见：2.ReactDom的render方法:1.字符串："}, {"id": "6844904024244912142", "title": "React性能优化指南", "desc": "它与普通组件是一样的，只是对负责 shouldComponentUpdate——它对状态和 props 数据进行浅层比较。如果先前的状态和 props 数据与下一个 props 或状态相同，则组件不会重新渲染。 在对比先前的 props 和状态与下一个 props和状态时，浅层…"}, {"id": "6844903586590097416", "title": "[译] Don’t call me, I’ll call you：使用 Redux-Saga 管理 React 应用中的异步 action （上）", "desc": "在接下来的两篇文章中，我想谈谈在 React 应用中使用 Redux-Saga 进行异步 action 管理的基础和进阶方法。我会说明为什么我们会在 AppsFlyer 项目中使用它，以及它可以解决什么问题。 本篇文章主要介绍 Redux-Saga 相关的基本概念，下篇专门讨论…"}, {"id": "6915385596093906951", "title": "【React学习笔记】组件间通信&生命周期", "desc": "组件间通信在React.js中，数据是从上自下流动（传递）的，也就是一个父组件可以把它的state/props通过props传递给它的子组件，但是子组件不能修改propsReact.js是单向数据流！"}, {"id": "6844903507791708168", "title": "七进七出React高阶组件", "desc": "想想以前用原生和jQuery的项目，上千行的code映入眼帘，瞬间有种昏死过去的冲动。代码难以维护，改一个bug可能出现N个bug，真的是很痛苦。于是乎组件化成为了当前前端开发的主流技术。angular、vue和react很好的帮我们实现了组件化。 但是我们常常也会遇到一种情况…"}, {"id": "6844903808338755597", "title": "对于Redux源码的一些理解", "desc": "Redux很早前看过源码，不得不说Redux是一个有用的架构，接触过Redux对于之后理解React-Redux有很大的帮助。最近学习了一段时间后打算重新学习下，一方面为了总结和归纳，另一方面分享给大家，如果有什么不足之处希望各位大牛的纠错和指正。本文主要包含如下几个分析点： …"}, {"id": "6844903590499352583", "title": "redux简单实现与分析", "desc": "随着单页开发日趋复杂，管理不断变化的state非常困难。在React中，数据在组件中是单向流动的。数据从一个方向父组件流向子组件(通过props)，但是，两个非父子关系的组件（或者称作兄弟组件）之间的通信就比较麻烦（可以通过父给子传递方法，子通过这个方法修改父的数据，后父传给另…"}, {"id": "6844903697156145160", "title": "怎样在React-redux应用中使用Firebase实时数据库", "desc": "Tags: react, react-redux, react-router, firebase. 最近在自学React, 在Safari online books这个平台上看了一套React的视频教程，非常幸运的是这位主讲把代码开源了。有兴趣的可以在这下载源码https://…"}, {"id": "6844903753078800397", "title": "ReactFiber在并发模式下的运行机制", "desc": "新一年又开始了，React过去一年悄悄实现了Suspense，带来了React Hooks ,源码也大变换了。因此好有必须重新阅读一下，看它是如何实现这些功能，及未来准备开放的并发渲染功能。"}, {"id": "6844903942837501959", "title": "React Hooks 你不来了解下？", "desc": "最近在看 React 的新语法—— React Hooks，只能一句话概括：React 语法真的是越来越强大，越写代码越少。 以前 React 组件可以看成是： 无状态组件（function定义）和有状态组件（class 定义），React Hooks 出现之后，我们基本所有的…"}, {"id": "6914841190194118664", "title": "学习记录-week2（React Router）", "desc": "在古老的 web 开发领域，从一个页面跳转到另一个页面，通常会从服务器重新请求对应的页面。比如，我们从一个购物网站的商品列表页 www.shop.com ， 跳转到商品详情页 www.item.com 。 在访问 www.shop.com 时，会请求 shop.html 以及相…"}, {"id": "6844903509385543687", "title": "antd源码解读（8.2）- 番外篇 Trigger 之 index.js 完整篇", "desc": "这个组件的index文件就有很多代码，590行代码，而且在头部引入的额外文件特别的多，所以我们这一个组件就先从这些额外的组件中开始吧，先看看这些外部方法能够做些什么。 Creates a portal. Portals provide a way to render child…"}, {"id": "6844903544760320014", "title": "又是一年D2：颇具匠心的中台技术修养", "desc": "杭州、西溪、冬、烟雨朦胧，又是一年阿里 D2。同样的会场，同样的人，但却是不一样的感受。 这届 D2 的主题是“匠心”，令笔者最为触动的词是“中台”，而笔者今年关注了 D2 新加入的主题“前端技术管理”，关注了团队与个人的“技术修养”问题，因此，结合几个关键词，给这篇文章起了一…"}, {"id": "6844903713518288904", "title": "破界！Omi生态omi-mp发布，用小程序开发生成Web", "desc": "Omi 框架是微信支付线研发部和 AlloyTeam 开源的通用 Web 组件化框架，基于 Web Components，用来开发 PC、手机浏览器或者微信、手Q webview 的 Web 页面。自今年5月开源以来，该项目共获得 Star 数 5000+，贡献者 29 人。经…"}, {"id": "6844903939997958158", "title": "React高阶组件以及应用场景", "desc": "如果一个函数 接受一个或多个函数作为参数或者返回一个函数 就可称之为 高阶函数。 如果一个函数 接受一个或多个组件作为参数并且返回一个组件 就可称之为 高阶组件。 所以你可能会发现，当高阶组件中返回的组件是 无状态组件（Stateless Component） 时，该高阶组件其…"}, {"id": "6844903496479670280", "title": "聊聊React高阶组件(Higher-Order Components)", "desc": "使用 react已经有不短的时间了，最近看到关于 react高阶组件的一篇文章，看了之后顿时眼前一亮，对于我这种还在新手村晃荡、一切朝着打怪升级看齐的小喽啰来说，像这种难度不是太高同时门槛也不是那么低的东西如今可不多见了啊，是个不可多得的 zhuangbility的利器，自然不…"}, {"id": "6844904167882883086", "title": "React 小细节整理", "desc": "1. Purecomponent和Componment PureComponent通过prop和state的浅比较来实现shouldComponentUpdate。浅比较(shallowEqual)，即react源码中的一个函数。 PureComponent中浅比较这个数组的引…"}, {"id": "6844903496186068999", "title": "React中的样式: 从外联样式到 Styled Components — SitePoint", "desc": "虽然使用React构建应用程序在许多方面已经达到了一定程度的标准化，但是样式仍然是一个有许多解决方案的领域。 每种方案都有其优点和缺点，并没有明确的最佳选择。 在这篇文章中，我会简要介绍关于React组件在Web应用程序是是如何组织样式的。当然，我也会介绍下styled-com…"}, {"id": "6844903944452309005", "title": "React高阶组件使用笔记", "desc": "这篇文章没有堆砌太多的概念，如果对React高阶组件不了解可以先移步：高阶组件 - React，这里是React官方对高阶组件的介绍。写这篇文章之前也在网上翻看了一些高阶组件的相关，结合自己对高阶组件的使用经验，谈谈对它的一些看法。 关于mixin，文章里也就不再多做介绍了，它…"}, {"id": "6951754466009825310", "title": "从源码角度看 useEffect、useLayoutEffect", "desc": "前言本节我们从源码角度分析 useEffect、useLayoutEffect 两个 React Hook API，你将掌握：useEffect、useLayoutEffect 各自的实现原理；use"}, {"id": "6844903609046401032", "title": "React 同构应用 PWA 改造实践", "desc": "最近在给我的博客网站 PWA 升级，顺便就记录下 React 同构应用在使用 PWA 时遇到的问题，这里不会从头开始介绍什么是 PWA，如果你想学习 PWA 相关知识，可以看下下面我收藏的一些文章。"}, {"id": "6991777131722178591", "title": "react中的ref", "desc": "通俗点来讲ref的使用类似于我们写标签的时候的id，比如我们要实现如下的这个简单页面 左边的框的内容当点击按钮的时候会alert，而右边的框则是失去焦点的时候alert 我们一半情况下要通过docum"}, {"id": "6844903656836300807", "title": "谈谈 React 新的生命周期钩子", "desc": "在 React 16.3 中，Facebook 的工程师们给 React 带来一系列的新的特性，如 suspense 和 time slicing 等，这些都为 React 接下来即将到来的异步渲染机制做准备，有兴趣的可以看 Sophie Alpert 在 JSConf Ice…"}, {"id": "6844903617728610317", "title": "Virtual Dom算法实现笔记", "desc": "网上关于virtual dom（下面简称VD）的博客数不胜数，很多都写得很好，本文是我初学VD算法实现的总结，在回顾的同时，希望对于同样初学的人有所启发，注意，这篇文章介绍实现的东西较少，见谅。 很多代码来自github库：hyperapp，几百行代码的库，拥有了redux和r…"}, {"id": "6870298090948493325", "title": "蒲公英 · JELLY技术周刊 Vol.21 -- 技术周刊 · React Hooks vs Vue 3 + Composition API", "desc": "该篇文章内容可以加深读者对JavaScript基础知识的理解，通过对Loadsh潜在安全漏洞及其修复方案的分析，可以帮助读者对原型污染的产生、原型污染攻击方式及相关防范措施进行深入了解，涉及到的知识点包括但不限于：Object 原型、原型、原型链、NodeJS 相关问题、Obj…"}, {"id": "6844903507401637896", "title": "前端每周清单第 37 期：Bootstrap 4 必知必会、2017 Vue.js 报告、Graphcool 开源框架", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 再见，Firebug: Firebug 是…"}, {"id": "6907061748990214152", "title": "【viewjs】实现react项目中富文本内容图片预览功能", "desc": "实现思路为，将后端返回的是html的字符串的img标签统一增加一个类名view-imgw，可以通过document.querySelectorAll('.view-img')找到这些图片的dom队列，遍历并增加配置即可。"}, {"id": "6921591489487175694", "title": "升级React项目", "desc": "技术服务于业务！如果现有项目的技术框架不算太过陈旧，并能很好支撑业务，则没有必要盲目将项目架构更新到最新版本。但本着时刻学习的心态，并且新版本框架有着更好的执行效率，在合理需求范围内，我们将更新相关项目的技术框架。 1. 相关更新框架明细 2. 项目框架更新顺序 先核心包（re…"}, {"id": "6901670765003800584", "title": "学习react（two day） JSX", "desc": "因为JSX中不能使用if else语句，但是可以用三元表达式。 React推荐使用内联样式，我们可以使用camelCase语法来设置内联样式，React会在指定元素数组后面自动添加px。"}, {"id": "6844903573608726536", "title": "vue.js原理初探", "desc": "vue.js是一个非常优秀的前端开发框架，不是我说的，大家都知道。本人也使用过vue.js开发过移动端SPA应用，还是学习阶段，经验尚浅，能力有限。不过我也懂得只会使用轮子不知所以然是远远不够的，凭自己浅薄的见识，斗胆写一篇略微深入的一点文章。 首先我现在的能力，独立阅读源码还…"}, {"id": "6844903822880407559", "title": "为什么我们如此需要 Immutable Data", "desc": "Immutable 意为「不可变的」。在编程领域，Immutable Data 是指一种一旦创建就不能更改的数据结构。它的理念是：在赋值时，产生一个与原对象完全一样的新对象，指向不同的内存地址，互不影响。 当我们需要对一个对象进行修改时，直接在原对象上进行变更很方便，也很节省内…"}, {"id": "6844903729645256717", "title": "Vue技巧：无渲染组件", "desc": "Vue技巧：无渲染组件最近，使用Vue开发组件时遇到了这样一个问题：开发的组件所能够自定义的props比较多，导致使用该组件时需要传入太多属性，数据、样式控制什么的属性都在一起了，看起来很不美观，像下"}, {"id": "6844904025888915464", "title": "从零实现一个React:Luster(一):JSX解析器", "desc": "这是之前在掘金发的两条沸点，懒得写了，直接复制过来作为前言了。然后这个项目可能之后还会继续写，增加一些路由或者模板引擎的指令什么的，但是再过没多久寒假就有大块时间了就可能不摸这个鱼去开其它坑了，随缘吧。所以先写JSX的解析器吧，这个部分也比较独立 最近心情比较低落，摸鱼也摸到恐…"}, {"id": "6936502349913391117", "title": "你还在把 react 当黑盒吗？", "desc": "俗话说得好, 知其然更要知其所以然, 我相信现在大部人都用过react, 但是对其中的原理又了解多少?今天这篇文章就是为了介绍react的原理。文中不会涉及过多的源码, 但是里面的内容都是依据源码(v16.13.1)解析而来, 大家可以把这篇文章当作一篇科普类文章来阅读。如果发…"}, {"id": "6844903504960569357", "title": "RegularJS 作者对前端模板技术的总结", "desc": "regularJS 作者精心制作，有助于对 MVVM 类模板技术的理解。"}, {"id": "6975436217907167263", "title": "React Hooks 实践总结", "desc": "什么是 React Hooks Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 React Hooks 要解决"}, {"id": "6844903634665209863", "title": "React Native组件之VirtualizedList", "desc": "React Native（简称RN）列表是基于ScrollView实现的，也就是可以滚动的，然而RN并没有直接使用IOS或Android的原生列表组件，这是因为RN真正调用native代码的过程是异步的，二Native的渲染要求必须同步渲染的。 在早期版本中，对于列表情况RN采…"}, {"id": "6844903917155778568", "title": "React+H5拖放api 实现拖放功能", "desc": "公司web项目有个需求，需要实现在列表内和列表之间进行元素拖放排序的功能。 项目是使用react开发的，所以起初是想找一个react拖放插件来实现，于是百度了几个拖放插件，光看了看用法就挺麻烦的（说实话，也没太仔细看）。因为需要的不只是一个拖放的展示效果，还需要收集到拖放后的新…"}, {"id": "6844903637659959304", "title": "[译] 关于 React Motion 的简要介绍 ", "desc": "React 很棒，在过去的几周里，我用它玩得很开心，所以我决定尝试一下React Motion。一开始 API 就让我感到有困惑和棘手，但是最终一切开始变得有意义，不过这需要时间。遗憾的是，我在网上找不到合适的 React Motion 教程，所以我决定把这篇文章写出来，不仅是…"}, {"id": "6844903591933640711", "title": "React16 升级指南", "desc": "React16 新特性介绍及跳坑指南"}, {"id": "6844903905973764110", "title": "React系列之Redux 源码探索", "desc": "阅读redux源码，可以让我们在实践中更好使用和扩展它，甚至封装出类似dva这样的数据流方案。 首先enhancer在缺省条件下，如果preloadedState是个函数，则将其视为enhancer。 2. nextListeners及currentListeners 对lis…"}, {"id": "6844903849149349896", "title": "初探react技术栈（一）", "desc": "react最近已经开始使用react技术栈了，从头开始搭建项目，有必要的记录一下配置的过程以及项目分层的思路，这次后台项目采用的主要采用react-create-app脚手架以及AntDesignUI"}, {"id": "6844903807315345416", "title": "React中Hooks", "desc": "1. 前言 Hooks是React16.8版本中的新特性，它可以在不使用class声明的组件中使用state和React特性。 Hooks的使用完全根据我们的需要进行选择用还是不用。 Hooks是完全向下兼容。 Hooks现在完全可用，已经发布与v16.8.0。 Hooks的出…"}, {"id": "6844903501517029389", "title": "实战react技术栈+express前后端博客项目（1）-- 整体项目结构搭建", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 简单说下app里面react的项目结构。对于component，container这里不必多说了。saga用于对所有异步action的处理。 re…"}, {"id": "6895643103588253709", "title": "Mobx State Tree (MST) 踩坑记录", "desc": "最近使用MST比之前又深入一些，发现很多高级功能伴随着很多坑。如果不用这些高级功能，又总感觉没又把MST用到位，先记录下来，后面再琢磨。 我接触到MST后做的第一个应用是用它来替换掉一个基于Mobx的框架，当时没有用纯Mobx替换的原因是感觉MST的Opinioned更符合我的…"}, {"id": "6844904110257340424", "title": "React Hooks 详解", "desc": "n在App被调用后每次都会变化，但是setN()却不会改变n。 由于所有数据都存在一个_state中，所以会冲突。 可以使用数组去解决_state重复问题。 报错信息：React has detected a change in the order of Hooks calle…"}, {"id": "6844903967135105038", "title": "理解JS中的原型(Prototypes)", "desc": "在JS中，对象是有很多key和value构成的一种数据存储结构。例如，如果想描述一个人的基本信息，可以构建一个拥有firstName和lastName的对象，并且分别被赋值为北宸和范。在JS对象中的key的值是String类型的。 此时有些开发会说，为什么不用var perso…"}, {"id": "6844903696040460295", "title": "一款快速搜索Chrome书签的插件", "desc": "A Chrome extension for searching bookmark quickly."}, {"id": "6844903825912889357", "title": "【译】TypeScript中的React Render Props", "desc": "和之前的文章一样，本文也要求你对render props有一些知识背景，如果没有官方文档可能会对你有很大的帮助。本文将会使用函数作为children的render props模式以及结合React的context API来作为例子。如果你想使用类似于render这样子的rend…"}, {"id": "6844903805474062350", "title": "关于 SSR 内容一致性的问题", "desc": "如果大家不了解 Gatsby 是什么，我这里简单介绍一下，它是一个基于 React 的静态页面构建工具。开发者通过编写页面模板（其实就是 React 组件）和配置文件，Gatsby 就能为指定的数据文件（可以是 Markdown 等）创建页面。 开发过程中我一直使用的是 ser…"}, {"id": "6844903662930624526", "title": "React专题：不可变属性", "desc": "React是用来解决状态同步的，但它却有一个与this.state并驾齐驱的概念。 这就是this.props。 this.props是组件之间沟通的一个接口。 原则上来讲，它只能从父组件流向子组件，但是开发者有各种hack技巧，基本上近亲之间沟通是不成问题的。 this.pr…"}, {"id": "6903864544880230407", "title": "手写简易React", "desc": "本项目主要功能是将 JSX 渲染到页面上。 Babel是一个工具链，主要用于在当前和较旧的浏览器或环境中将ECMAScript 2015+代码转换为JavaScript的向后兼容版本。 babel-loader是负责与Babel对话的 webpack loader。同时 Bab…"}, {"id": "6981740791035068453", "title": "React：记账本06---记账页中输入数字模块和坑", "desc": "记账页有一个输入数字模块 需求： 点击数字键盘，可以显示相应的数字 点击清空，清空显示区 点击ok保存当前记录 键盘布局 1. 布局和样式 2.Wrapper 包括2部分，output和键盘，采用fl"}, {"id": "6981739777506672676", "title": "2021-07-06 React组件中Class组件和函数组件的生命周期", "desc": "Class组件的生命周期 React组件的生命周期分为三个阶段 1）挂载阶段（Mounting），这个阶段会从组件的初始化开始，一直到组件创建完成并渲染到真实的DOM中 2）更新阶段（Updating"}, {"id": "6869691481256787981", "title": "React系列：一个简化版react 核心API", "desc": "官网上这么解释React的“用于构建用户界面的JavaScript库”，React 使用声明式组件化的方式编写UI，让你的代码更加可靠，且方便调试。 React使用 JSX 来替代常规的 JavaScript。 JSX 是一个看起来很像XML的JavaScript语法扩展。 J…"}, {"id": "6844903625039282189", "title": "React前奏，函数式编程基本概念", "desc": "在React中，UI是用纯函数表示的，并且在构造DOM时，是以声明式（与此相对的，是命令式）的方式。而声明式的编程是函数式编程更广义的一部分。所以，先熟悉函数式的编程，很有必要。 数据在应用程序中，在不改变原生数据结构的前提下，在此基础上拷贝后进行编辑。 在此基础上，就会有浅拷…"}, {"id": "6917259909838946311", "title": "前端学习笔记（十五） --React 学习-1 ", "desc": "今天开始学习 React。终于学到框架部分了。 1. React 介绍与基本配置 React 属于 mvc 框架的 v（view）层。是一个 JS 库。 React 可以根据需求换安装方式，小项目可以使用 cdn。较大项目则可以用专门的工具链。 这里使用 create-reac…"}, {"id": "6896251356097544206", "title": "Lingui.js—React 前端国际化工作流解决方案", "desc": "js 日期国际化，轮子满天飞，ECMAScript 推出原生Intl对象后，百花齐放的局面才开始迅速向原生靠拢... 并直接导致 moment.js 的弃坑 ，进化向了 luxen.js。采用js原生API的国际化日期库(day.js) 开始涌现，并以\"玲珑小巧、相恨建晚的真香…"}, {"id": "6844903844111974414", "title": "React Hooks早知道", "desc": "initialState 不必须是对象，实际上不鼓励是对象，根据实际数据相关性，进行分组和分离。这样也更利于之后代码重构，抽取相关逻辑成一个自定义 Hook 每次都是创建了新的 effect 替换之前的。"}, {"id": "6981478318826586125", "title": "React：记账本03---标签页", "desc": "tags标签页 目标预览： 标签页可以查看所有标签，并且增加标签 点击某一具体标签后，可以编辑或删除标签 封装useTags.tsx 自定义hooks，将所有和tags操作相关的，放进来 先放一个us"}, {"id": "6844903858527797262", "title": "React 30 秒速学：制作选项卡组件", "desc": "定义一个TabItem组件，将它传递给Tab并通过在props.children中识别函数的名称来删除除了TabItem外的不必要的节点。 使用React.useState() hook 将bindIndex状态变量的值初始化为props.defaultIndex。 使用Arr…"}, {"id": "6844903573692628999", "title": "看完你也想编写自己的 react 插件", "desc": "图片懒加载是项目中常用的功能，然而现有 react 懒加载组件库，用着都不是很爽了 😝。概括一下有如下几点： 没有只针对 image 懒加载组件。多数组件库都内置了模块、组件、脚本、iframe 懒加载功能，而弱化了 image 懒加载功能。 不支持动画显示效果。 不灵活，可…"}, {"id": "6844904196546756621", "title": "另辟蹊径搭建阅读React源码调试环境-支持所有React版本细分文件断点调试", "desc": "若要高效阅读和理解React源码，搭建调试环境是必不可少的一步。而常规方法：使用react.development.js和react-dom.development.js调试，虽然方便，但无法知道每段代码属于哪个细分文件，所以本文将介绍一种取巧的方法搭建便于调试React源码的…"}, {"id": "6844903891130122248", "title": "React源码解析之React.Component()/PureComponent()", "desc": "（4）我以为React.Component()里面实现componentWillMount()、render()等内部方法，其实并没有。 React.Component()只涉及了props/context/refs/updater/isReactComponent/setSt…"}, {"id": "6985515677075390495", "title": "React学习之路（2）--state", "desc": "这一次主要分享了react中的state，state在react组件中是最重要的属性之一，他保存着组件的状态，改变state的值只能通过setState方法"}, {"id": "6985469660514746398", "title": "React实现类Vue中的v-slot作用域", "desc": "从没想过组件还能这样用！！！开启React组件不一样的使用姿势！！！走过路过不要错过~~~啦啦啦啦啦~~~~~"}, {"id": "6844903567187574797", "title": "一个前端er使用浏览器打印功能快速制作PDF简历", "desc": "先弄个大概的样子，把简历制作成html的形式，如果要放服务器上面，建议最好就是对移动端做上适配，这样的话，手机发自己网址出去的时候，对方可以在手机上快速浏览。 完成之后，在浏览器打开后，调出打印预览cmd+p/ctrl+p，先初步看看效果，记得要勾上选项里面的背景图形。mac下…"}, {"id": "6916093678696005639", "title": "为什么React不再使用Mixin", "desc": "虽然组件的原则就是模块化，彼此之间相互独立，但是有时候不同的组件之间可能会共用一些功能，共享一部分代码。所以React提供了mixins这种方式来处理这种问题（主要用于使用createReactCla"}, {"id": "6927516663826874376", "title": "今天让你彻底搞懂setState到底是同步还是异步", "desc": "而这段代码的输出结果，第一个 console.log 会输出 data ，而第二个 console.log 会输出 setTimeout 。也就是第一次 setState 的时候，它是异步的，第二次 setState 的时候，它又变成了同步的。是不是有点晕？不慌，我们去源码中看…"}, {"id": "6844904058596114439", "title": "Concurrent UI Patterns", "desc": "目前 Concurrent 尚处于实验阶段，大部分文档还没有被翻译。我基于目前的官方文档，对 Concurrent 作一些介绍。 上一篇是关于React Suspense for Data的介绍。介绍了 Suspense for Data 模式和现有的数据请求方式的一些区别。大…"}, {"id": "6844903910180667405", "title": "react HRM 热更替, 看这篇就够了...", "desc": "注意: 没有进一步的步骤，这已经足够热重载更改来响应组件，但是它们的内部组件状态将不会被保留，因为组件的新副本已被挂载，并且其状态将被重新初始化。 保存在状态存储(例如Redux)外部的状态显然不会丢失。"}, {"id": "6844903731104858126", "title": "从一次react异步setState引发的思考", "desc": "0. 前言 一个异步请求，当请求返回的时候，拿到数据马上setState并把loading组件换掉，很常规的操作。但是，当那个需要setState的组件被卸载的时候(切换路由、卸载上一个状态组件)去setState就会警告： 问题fix。 1. 不想一个个改了 项目肯定不是简简…"}, {"id": "6844903605850341389", "title": "Redux中文文档阅读总结——快速入门", "desc": "Redux 是 JavaScript 状态容器，提供可预测化的状态管理。 随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state（状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，…"}, {"id": "6844904006645448712", "title": "[译]函数组件和类组件到底哪里不同", "desc": "一度，两者的区别在于类组件能提供更多的能力（比如局部的状态）。但是有了Hooks之后，情况却有所不同了。 也许之前你听说性能也是两者的差别。但是哪个性能更好？不好说。我一直很谨慎地对待这类结论，因为很多性能测试都是不全面的。性能主要还是在于代码的逻辑而非你选择了函数组件或者类组…"}, {"id": "6844903872490635278", "title": "react中的错误处理", "desc": "对invokeGuardedCallback的封装，当执行完invokeGuardedCallback之后，通过hasError判断是否发生了错误，并调用clearCaughtError返回错误对象，并清空hasError、caughtError。然后将返回的错误存储到reth…"}, {"id": "6991460821033287687", "title": "React知识点汇总 | 8月更文挑战", "desc": "React17 生命周期 什么是副作用 withRouter的用途 PureComponent和Component的区别 React.creatRef和ref的使用 表单组件分类-受控组件和非受控组件"}, {"id": "6844904030477484045", "title": "初探dva——购物车实战", "desc": "dva已经在src/utils/request.js中为我们封装了fetch请求。所以我们可以新建src/services/products.js来封装一个向后台请求商品数据的方法 在实际开发中，由于存在向后端请求商品数据，可能不能第一时间拿到商品数据，所以往往在数据加载的过程…"}, {"id": "6844903857105944589", "title": "React 条件渲染方法大全", "desc": "我们经常使用js对象 key...value 的形式存储内容，使用 . 操作符来取的相应的值（这是一种hash表），如果我们将这个与 react component 结合就会发生奇妙的反应： 当我初次接触到这种写法的时候，最直观的感觉就是这就是 switch 的替代（alter…"}, {"id": "6991439161114755109", "title": "React组件通信之打怪升级", "desc": "💕本周的内容是React组件间的通信。一共分为四类：context、React.createContext、redux、react-redux。"}, {"id": "6956112009284812836", "title": "React-路由原理", "desc": "路由是跟据不同的url地址展示不同的页面 后端路由 服务端解析url地址，发送数据，但是每一次切换都需要重新刷新页面，对用户体验不好 前端路由 用户在点击切换路由的时候不需要重新刷新页面，路由由前端维"}, {"id": "6859125809655840776", "title": "编写高质量可维护的代码：优化逻辑判断", "desc": "if else、switch case 是日常开发中最常见的条件判断语句，这种看似简单的语句，当遇到复杂的业务场景时，如果处理不善，就会出现大量的逻辑嵌套，可读性差并且难以扩展。 下面我们会分别从 JavaScript 语法和 React JSX 语法两个方面来分享一些优化的技…"}, {"id": "7001429666259009572", "title": "React Dashboard Pro - 开箱即用的一站式仪表板解决方案", "desc": "React Dashboard Pro 开箱即用的一站式仪表板解决方案 只需简单几步即可拥有动态仪表板功能 React Dashboard Pro 解决的是\"千人千面\"的B端几乎都要用到的……"}, {"id": "7003890931342508062", "title": "初窥REACT脚手架「一」", "desc": "认识React脚手架以及基于脚手架初始化一个项目，将webpack配置项暴露出来，便于后期进行二次配置"}, {"id": "6991645449719382047", "title": "React实践指南", "desc": "状态逻辑复用 在使用React Hooks之前，我们一般复用的都是组件，对组件内部的状态是没办法复用的，而React Hooks的推出很好的解决了状态逻辑的复用，而在我们日常开发中能做到哪些状态逻辑的"}, {"id": "6844904056939347976", "title": "593集前端视频教程全部免费 抗击疫情 身体力行", "desc": "我是技术胖，在全国新冠疫情的笼罩下，很多小伙伴不敢出门（我们小区已经戒严，每家只发一个通行证，每天只可以外出一小时），可能很多小伙伴会因此丢掉工作，技术胖作为一个还有100万房贷要还的程序员，经济上实在没办法帮助太多，但也要身体力行，抗击疫情，尽自己所能作点什么。 所以我在这里…"}, {"id": "7001535323284963365", "title": "🍚 React 入门学习（九）-- 消息订阅发布", "desc": "引言 在昨天写的 Github 案例中，我们采用的是 axios 发送请求来获取数据，同时我们需要将数据从 Search 中传入给 App，再由 App 组件再将数据传递给 List 组件"}, {"id": "6924349424701276167", "title": "做了N+1个企业项目之后, 我总结了这些React必备插件", "desc": "为了提高大家开发 React 项目的效率, 笔者结合自己的实际工作经验, 汇总如下React项目常用插件. 1. 状态管理 2. UI组件库 React desktop 基于React的JavaScript库，旨在将本机桌面体验带入网络，其中包含许多macOS Sierra和W…"}, {"id": "7001776879531196424", "title": "[边写边学系列] — 超级好用的文档站建站框架 Docusaurus", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 要写这篇文章，起因是一个小伙伴来求助我，说 React 社区感觉没有类似于 VuePress 的文档站工具或者框架。然后 VuePre"}, {"id": "6881395120617291783", "title": "适合Vue用户的React教程，你值得拥有", "desc": "小编日常工作中使用的是Vue,对于React只是做过简单的了解，并没有做过深入学习。趁着这个双节假期，小编决定好好学一学React,今天这篇文章就是小编在学习React之后，将React与Vue的用法做的一个对比，通过这个对比，方便使用Vue的小伙伴可以快速将Vue中的写法转换…"}, {"id": "6992510603533221901", "title": "2024年的前端怎么干活", "desc": "大家好，我是卡颂。 最近Stackoverflow2021开发者报告发布，其中有一项吸引我的注意： 在所有框架（不仅是前端），Svelte是最受欢迎的。 这里倒不是说Svelte是最多人使用的，另一项"}, {"id": "7001411229323362335", "title": "React SSR 服务器渲染原理解析与实践", "desc": "一、为什么使用服务器端渲染。 1. 客户端渲染 2.服务器端渲染 3. 使用 SSR 技术的主要因素 首屏等待: CSR 项目的 TTFP（Time To First Page）时间比较长 S"}, {"id": "6974651532637634568", "title": "Vue基操会了，还有必要学React么？", "desc": "这是我参与更文挑战的第12天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 一个Vue coder 对React的尝鲜？"}, {"id": "6999177453134577678", "title": "盘点React 代码优化的 N 种方法", "desc": "本文盘点了几个在 React 优化方面的地方：使用 React 本身提供的优化方法；React 里几种会影响性能的用法；关于不可变数据等。"}, {"id": "7000546387288916005", "title": "React 数据管理之 Redux", "desc": "通过本文将了解：Redux 产生的背景、Redux 简化了哪些问题、Redux 如何解决依赖更新、Redux 的插件原理。"}, {"id": "6948748617817522206", "title": "React Hooks 万字总结", "desc": "近期抽时间对 React hooks 系统的学习了一下，发现真香，根本停不下来，分享一下用了将近一年的心得。 useState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为一个 setFn。 不要在循环、条件或嵌套函数中调用 Hook。 所以总结…"}, {"id": "7002146790023626788", "title": "使用Fuse.js将动态搜索添加到React应用", "desc": "Fuse.js是一个轻量级的搜索引擎，可以在用户的浏览器中的客户端运行。让我们看看如何使用它来轻松地为React应用添加搜索功能。 何时使用Fuse.js 搜索功能对很多类型的网站都很有用，可以让用户"}, {"id": "7006893620762509348", "title": "【前端 | 实践】记一次简单的分页请求", "desc": "实习的过程中第一次接触到了分页请求的相关知识：为什么要做分页？前端如何配合后端同学做分页？需要注意哪些地方？"}, {"id": "7007587946639392805", "title": "JSX 是如何映射为 DOM 的", "desc": "JSX 是一个 JavaScript 的语法扩展，它可能会使人联想到模板语言，但它具有 JavaScript 的全部功能"}, {"id": "7006860064858308645", "title": "react-redux", "desc": "1.求和案例_redux精简版 2.求和案例_redux完整版 3.求和案例_redux异步action版 4.求和案例_react-redux基本使用 5.求和案例_react-redux优化 6."}, {"id": "6844904165500518414", "title": "React Hooks 最佳实践", "desc": "在过去的几个月里，React Hooks 在我们的项目中得到了充分利用。在实际使用过程中，我发现 React Hooks 除了带来简洁的代码外，也存在对其使用不当的情况。 在这篇文章中，我想总结我过去几个月来对 React Hooks 使用，分享我对它的看法以及我认为的最佳实践…"}, {"id": "6844903508450213901", "title": "组件库设计实战系列：组件分类、文档管理与打包发布", "desc": "在上篇《重新设计 React 组件库》中我们从宏观层面一起探讨了结构自由且数据解耦的 React 组件库应当如何设计，在本文中让我们从具体实践的角度来看如何将这样的设计落地。 在传统的组件库设计中，组件分类一直都不是一个必选项，大多数人都认为一个组件究竟是属于组件类还是控件类，…"}, {"id": "6844903881470803976", "title": "[译] 编写 React 组件的 10 个建议", "desc": "写一个公用的组件很难，你必须细心地考虑很多问题，比如应该暴露出哪些 props。 本文将简要的介绍 API 设计中的一些最佳实践，以及编写 React 组件的 10 条参考规则。 API （Application Programming Interface）是两段代码或者两个应…"}, {"id": "6844903893294383111", "title": "在React中，为什么列表组件中列表项需要key？", "desc": "List列表组件在我们的项目中是最为常见的一种组件形式。你可以在比如刷微博抖音、购物车等等，这种列表状的场景很多很多。想象一下，如果带有大量视频或图片的应用中，当你滚动的时候，程序会不断的加载它们，这可能会对应用的性能产生影响。 那么，在React中，你知道在渲染列表的时候，每…"}, {"id": "6945317957442469924", "title": "[React Hooks长文总结系列二]渐入佳境，性能调优与自定义钩子", "desc": "这一节，将会主要介绍两个钩子：useCallback和useMemo，以及对自定义hooks的理解。 这段代码其实会引发严重的bug，打开network面板，我们将看到浏览器在疯狂向后台发请求。 这是因为重渲染的时候，上述的fetchDetail函数会被重新创建一遍，并放到de…"}, {"id": "6919081485634895886", "title": "【翻译】如何在 React 中书写更好的函数组件", "desc": "我们知道，在 React 中搭配 Hooks 使用函数组件进行开发使我们的开发工作变得更加轻松。然而，组件函数自身拥有复杂性和陷阱。因此，有时候我们很难写出可读的、可优化复用的函数组件。今天，我们将会通过5个简单例子来帮助我们做到这一点。 这个组件接收一个 items 数组，排…"}, {"id": "6844903847438073863", "title": "带着问题看 react-redux 源码实现", "desc": "Redux作为通用的状态管理器，可以搭配任意界面框架。所以并搭配react使用的话就要借助redux官方提供的React绑定库react-redux，以高效灵活的在react中使用redux。下面我们一起看看是react-redux如何灵活高效的 在开始之间还是大概提一下red…"}, {"id": "6844903713610399752", "title": "【译】Flux入门", "desc": "TL;DR 当我在努力学习Flux时，我希望有人告诉我：它并不简单，也没有好的文档可以查，并且有许多灵活组件。 如果你的应用程序需要处理动态数据（dynamic data）的话，那么答案就是yes，你可能需要使用Flux。 如果你的应用程序仅仅是无需共享状态静态视图（stati…"}, {"id": "6844903592906719245", "title": "Redux 入门 -- 处理 async action", "desc": "在上一篇文章 Redux入门 -- 拆分 reducer 中，阿大通过 redux 的 bindReducers 方法将水果店的业务分治成功，店铺也越做越大。以至于有顾客开始想要买一些进口的水果生鲜。 阿大考虑了一下，决定继续拓展这个店铺，从事进口商品的销售。首先是顾客的需求行…"}, {"id": "6844903753561145352", "title": "「每日一瞥 📰 」1224 ~ 0104", "desc": "当我们最最开始做前端开发的时候，JavaScript 文件自然就一个个罗列在一起，通过 script 标签引入到 html 里。当然，即使在现在，我们也还是会在写一些 Demo 时使用这样的方式。 如今，我们有了如 Webpack、Parcel 等 Module bundler…"}, {"id": "6844903621197299726", "title": "[转] 如何实现 React 写小程序-1", "desc": "随着大前端蓬勃发展, 冒出越来越多的端, 最火的当数最近出现的微信小程序. 但是无论是 微信小程序 , 还是 支付宝小程序, 或者 快应用 都有一个明显的缺点, 虽然他们还是按照一定的 js html css 标准作为开发方式, 但是他们都与当前所有主流技术有相当大的壕沟. 虽…"}, {"id": "6844903536157786126", "title": "2017前端技术发展回顾", "desc": "前端领域在 2017 年再次以狂热的节奏向前发展。以下列出过去的一年中最值得关注的一系列事情…"}, {"id": "6844903712322748429", "title": "hook!", "desc": "在react conf 2018上，react发布了一个新的提案hook。稳定的正式版可能要等一两个月之后才能出来，目前可以在v16.7.0-alpha上试用到rfc上各种提问。 这是一个比class更直观的新写法，在这个写法中react组件都是纯函数，没有生命周期函数，但可以…"}, {"id": "6895186062717485063", "title": "用Gatby和Netlify创建个人网站", "desc": "费了好大劲做出的一个toy project，使用Gatby和Netlify部署个人站点，可以做成个人博客或者在线简历。中文网页里关于Gatby和Netlify的信息不太多，希望可以帮到有兴趣尝试的同学。 项目代码在我的Git. Gatsby 是一个基于 React 的免费、开源…"}, {"id": "6844903612749987854", "title": "React 快速上手 - 08 redux 状态管理 react-redux", "desc": "今天我会快速的过一下 redux 知识，然后讨论下 适用性，最后为了让大家能快速学习，简化了官方的经典 Demo todo ，跟着我做一遍就行。 这张图是 Flux 官网的，画的很好。 1. 安装 chrome 插件 2. 配置代码 3. 开启插件"}, {"id": "6844903747156443143", "title": "react进阶组件之Render Props小结", "desc": "Render props作为共享组件逻辑的一种有效模式，此模式借助state和辅助参数，可以提供ui的更好的灵活性。 在我们的组件中，我们都需要定义一个render方法，在这个方法中定义我们需要渲染的部分。 那么基于以上的认知，我们可以进一步把渲染组件的部分通过属性得到。设置一…"}, {"id": "6844903541824307213", "title": "走进snabbdom—Vue2背后的Virtual-DOM的机制", "desc": "snabbdom是一个Virtual-DOM的实现库，它专注于使用的简单以及功能和的模型化，并在效率和性能上有着很好的表现。如果你还不知道什么是Virtual-DOM技术，它是一种网页中通过diff算法来实现网页修改最小化的方法，react底层使用了这样的机制来提高性能。 从V…"}, {"id": "6844903984168173576", "title": "想了解JS数据类型转换吗？不用找了，这里都有", "desc": "今天在遇到一个开发中的问题，在进行一个简单的后台字段展示的时候，莫名其妙的出现问题。在定位问题的时候，发现一个判断value>0?A操作:B操作。因为在后台定义字段时候，明确说明，value的值是一个数字并且>0(肯定有值)，所以上述的判断没有任何的毛病。 但是上线之后，发现有…"}, {"id": "6906695074492055559", "title": "React函数组件基础01 - hooks & router", "desc": "要知道state和setState都是component类的属性和方法，所以不能在函数式组件中直接使用state和setState。因此在React 16.8 之后新增了一个新特性：Hook。Hook可让我们在不编写class的情况下使用state和其他React特性： con…"}, {"id": "6844903850676060168", "title": "[React Hooks 翻译] 2-8 初探Hooks", "desc": "这个例子上一篇有提到过，这里useState就是一个Hook（待会会讨论什么是Hook）。我们在函数内部调用这个Hook，给组件添加了一个内部state，在re-render的时候React会保留这个state。 useState的唯一的参数是state的初始值。这个初始值不必…"}, {"id": "6844903521339310088", "title": "react和immutable偶遇的那些事", "desc": "在项目中经常会遇到一些问题，比如把一个对象赋值给另外一个对象后，如何实现修改被赋值的对象而原对象不变；一般做法是copy，而copy又分为shallowCopy（浅拷贝）和 deepCopy（深拷贝）；shallowCopy对于层级比较深的对象来说然并*用，那么只能用deepC…"}, {"id": "6844903574892380167", "title": "基于React的可编辑在线简历模板", "desc": "技术栈为纯React。接下来介绍一些稍微重要的技术点： 试想，平时的 react 组件的 children 都是我们写好内容并控制更新，而不是交给用户去随意更改。就算是可以随意更改的 <input> 组件，它的初始值也是一个 html 的 attribute 而不是 dom 的…"}, {"id": "6844903575655546888", "title": "react-motion + react-router = ?", "desc": "react-motion 是一个提供缓动函数的库..."}, {"id": "6844903569116659726", "title": "D3js之初窥", "desc": "最近在做一个项目, 图表是一个比较重要的功能, 但是之前并没有接触过可视化相关的东西, 当然不可能自己造一个轮子. 社区里有很多优秀的图表库: echarts, g6, highcharts, chartjs以及d3等等. 首先我们的项目重点并不在数据呈现, 也就是highch…"}, {"id": "6844903550846238733", "title": "前端每周清单第 47 期：NPM 年度报告与 2018 展望，Airbnb React Router 实践", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 NPM 发布 2017 JavaScri…"}, {"id": "6844903591363215373", "title": "如何升级一个旧项目", "desc": "在公司中接手导师很早以前开发的一个系统，需要在其基础上进行权限审核以及新需求的开发。 因为导师代码写的很漂亮，啃了一段时间源码加对源码做系统注释，对于新需求的迭代还是很顺利的进行下去并学到了很多东西。 因为一些不可描述的原因，接到一个任务就是完成近期的需求后考虑对系统做一次升级…"}, {"id": "6844903577501040647", "title": "JS 装饰器解析", "desc": "随着 ES6 和 TypeScript 中类的引入，在某些场景需要在不改变原有类和类属性的基础上扩展些功能，这也是装饰器出现的原因。 作为一种可以动态增删功能模块的模式(比如 redux 的中间件机制)，装饰器同样具有很强的动态灵活性，只需在类或类属性之前加上 @方法名 就完成…"}, {"id": "6844903825929666567", "title": "用 TypeScript 编写一个 React 服务端渲染库（1）", "desc": "2、开发时主要访问这个服务，接受客户端的 HTTP 请求，并将 jsx 代码渲染成 HTML 字符串的服务。"}, {"id": "6844903566738456590", "title": "Markdown-Navbar —— 可能是最好用的markdown文章导航组件", "desc": "为读者显示文章目录点击目录跳转到文章对应内容分享带锚点hash值的url给读者gitrepoInstallorUsageScreenshotsOptionsPropertyDataTypeDefaul"}, {"id": "6844903557359992845", "title": "谈谈 react 中的 key", "desc": "如果你用过 react，并且曾经尝试遍历数组来渲染一个组件，就应该遇到过上面的提示。因为提示的等级为 Warning，而非 Error，所以很多开发同学可能就不会去在意，包括我自己。在前几天开发一个需要动态渲染的组件时，才发现的了 key 的妙用，也因此打算研究下 key 到底…"}, {"id": "6844903617460174861", "title": "react-native-vector-icons进阶教程（自定义iconfont使用）", "desc": "React Native大火大热，其中为了解决图标，易于修改，换颜色，高清等需求，你还是选择切多套png来适配吗？答案当然是否定的！不知从何时起，扁平化图标成为潮流，iconfont也应运而生，最先接触iconfont已是多年前的事了，那时候只知道怎么在web上使用，它带来的便…"}, {"id": "6844903641074106381", "title": "react 高阶组件的代理模式", "desc": "看了以前的装饰器的理解和预加载数据的装饰器一定有疑问，为什么这么写装饰器。来看看下面的文章描述： 一个高阶组件只是一个包装了另外一个组件的 react 组件。 当然其中实现的方法主流的包括我们上面提到的，属性代理和反向继承两种方法。 高阶组件有很多知识点，后续补上，本次为了给前…"}, {"id": "6844903538611453960", "title": "React同构与极致的性能优化", "desc": "注： 本文为第12届D2前端技术论坛《打造高可靠与高性能的React同构解决方案》分享内容，已经过数据脱敏处理。 随着React的兴起, 结合Node直出的性能优势和React的组件化，React同构已然成为趋势之一。享受技术福利的同时，直面技术挑战，在复杂场景下，挑战10倍以…"}, {"id": "6844904125746921485", "title": "react 不用插件实现数字滚动", "desc": "突然要实现个数字滚动效果，网上一搜，一大堆都是用组件的。我只是想实现个简单的效果而已，决定还是自己搞搞吧。"}, {"id": "6844904190549098504", "title": "【React】Hooks全解之逐个击破", "desc": "Ⅰ. useState 我们无法局部setState，因为react函数组件不会帮我们合并属性。解决办法是使用react提供的...语法将原属性拷贝并放在更新值之前。 因为setState(obj)中obj如果是在原来的对象上进行修改，那么对象的地址没有更改，react会将这个…"}, {"id": "6844903876705910798", "title": "React源码简析(版本React-15.2.0)", "desc": "1. transaction事务 简单地说，一个Transaction 就是将需要执行的 method 使用 wrapper 封装起来，再通过 Transaction 提供的 perform 方法执行。而在 perform 之前，先执行所有 wrapper 中的 initial…"}, {"id": "6871121258835083278", "title": "React全家桶-基础入门", "desc": "React 是一个用于构建用户界面的 JAVASCRIPT 库。 React 主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。 React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。 1.…"}, {"id": "6962497368524603428", "title": "React源码研习（一）", "desc": "入口文件 packages/react/src/React.js shared/ReactVersion.js 输出react当前版本 shared/ReactSymbols.js react常量命名"}, {"id": "6844903696141139976", "title": "React简易版老虎机", "desc": "一直很忙很少有空写点东西，难得闲下来，还是记录下作为怀念。关于React看过文档，很多东西还在摸索中。没想到来到掘金的第一篇文章既然是关于React的，觉得不错的点个赞，哪里需要改进还望各路大大指点！。 2、点击开始获得停下的位置，需要重置的当前状态。实际中要：从接口获取礼物i…"}, {"id": "6969542522120962055", "title": "React入门笔记 - Hooks", "desc": "什么是Hook？ State Hook 官方代码实例与分析。 useState与组件渲染。 实例分析在props里传入函数。"}, {"id": "6844903638377185288", "title": "Redux源码分析--bindActionCreators篇", "desc": "这是Redux源码分析系列的第四篇文章，当这篇文章结束之后Redux源码分析系列也该告一段落了。这篇文章主要想谈谈bindActionCreators这个函数的实现原理，为了更好的理解这个函数我会恰当地引入一些应用代码。 1. ActionCreator创建动作 在深入分析源码…"}, {"id": "6844903940916510727", "title": "模块化react和redux应用", "desc": "当我们开始一个新的应用的时候，有件事情是一定要考虑清楚的，因为随着项目的增大，我们需要创建的项目结构和大小都越来越复杂，一个好的代码结构能够给我们省事不少。本篇会以todo应用为代表进行项目文件的划分，因为每个框架问世的时候都会用todo进行展示。 上图就是按角色进行代码的划分…"}, {"id": "6844904004275666958", "title": "绿色的React16❤生命周期❤之实践出真知", "desc": "测试这个流程，我们把所有的生命周期罗列起来并打印所有的生命周期。"}, {"id": "6844903593561063437", "title": "如何编写一个前端框架之七－客户端路由(译)", "desc": "这是编写前端框架系列的最后一章。本章，我将会讨论前端路由和后端路由的不同以及为什么他们应被区别对待。 网页无非是后端渲染，前端渲染或者两者混合渲染。不管怎样，一个半复杂的网页不得不处理路由。 对于后端渲染，路由是由后端处理的。当 URL 路径改变或者请求参数改变的时候会输出一个…"}, {"id": "6844903618680897549", "title": "JavaScript News and Updates (May 2018) – codeburst", "desc": "React is love. React is life. The popularity of this JavaScript library from Facebook doesn’t stop growing, so we’ve prepared three article…"}, {"id": "6844903504683728904", "title": "写在2017的前端数据层不完全指北", "desc": "不知不觉间时间已经来到了 2017 年的末尾，在过去的一年中，关于前端数据层的讨论依然在持续升温。不论数据类型层面的 TypeScript，Flow，PropTypes，应用架构层面的 MVC，MVP，MVVM，还是应用状态层面的 Redux，MobX，RxJS，都各自拥有一群…"}, {"id": "6915229700243587079", "title": "Redux中间件原理", "desc": "在说redux中间件原理之前，先来看一下redux不使用中间件之前如何处理网络请求的数据分为几个阶段：1.在组件中调用DidMount生命周期，发起异步请求2.得到数据后，加入到action中，通过d"}, {"id": "6844903917944324109", "title": "React源码--执行fixtures中的项目", "desc": "在React源码（版本：16.8.6）中有一个fixtures目录，在该目录中放着的是作者写的一些测试demo。在这篇文章中我们探索一些如何执行这些demo。 fixtures-普通翻译：n. 固定装置（fixture的复数形式）；卡具；固定附物，固定附着物；固定财产 本文以f…"}, {"id": "6844903637500559367", "title": "Angular6 开发探索 - 知乎日报", "desc": "最近利用空余时间研究学习了前端“三剑客”之 —— Angular。Angular 是一个开发平台。它能帮你更轻松的构建 Web 应用。Angular 集声明式模板、依赖注入、端到端工具和一些最佳实践于一身，为你解决开发方面的各种挑战。"}, {"id": "6921905842337873928", "title": "【React学习笔记】Redux，React-redux，Redux-thunk的使用", "desc": "ReduxRedux的使用createStore中传入reducer,reducer是一个函数，有两个参数state和action，通过判断action的判断来对state执行不同的操作；Reduxa"}, {"id": "6844903780207558670", "title": "React 单页程序 转 SEO 渲染踩到各种深坑。", "desc": "React.js 一般晚上的教程都是React + webpack + Router 来搭建的项目。都是单页项目，我们将他称为SPA项目。 最近有一个项目一开始是使用React.js来的SPA项目，可是后面发现我们这种类型的家居生活馆的项目来说还是要做SEO，这操作的。 由于项…"}, {"id": "6844904196718739469", "title": "洞悉细节！react 16.8.6源码分析-1 报错和warning", "desc": "作为一个前端页面仔和需求粉碎机，在日常的工作中重复雷同的业务需求，能够获得的提高是很有限的。要想跳出此山中，开阔新视野，笔者墙裂建议大家阅读市面上顶尖开源库的源码。这是学习和掌握js语言特性的绝佳机会(前端发展到现在，大型应用高度依赖框架，正常情况下普通开发者是没有机会接触底层…"}, {"id": "6844903872218005517", "title": "next.js  初试", "desc": "服务端渲染（SSR: Server Side Rendering）,html页面由服务器渲染好，客户端请求的是完整的html页面。 egg，php，jsp等都是良好的服务端渲染技术。 seo优化。 优化首屏加载速度：相比加载单页应用，只需加载当前页面内容，不用加载大量的js。 …"}, {"id": "6844903569032740877", "title": "Redux Middleware中间件源码 分析", "desc": "Redux是可预测的状态管理框架。它很好的解决多交互，多数据源的诉求。 Redux设计理念有三个原则： 1. 单一数据源 2. State只读 3. 使用纯函数变更state值。 正常的一个同步数据流为：view层触发actionCreator，actionCreator通过s…"}, {"id": "6844904073343270920", "title": "尝试一下useStateOnce, 当你试着初始化一个重状态的时候", "desc": "如果客官喜欢就点一颗小星星吧, 谢谢啦^_^. 升级react useState钩子函数能力，让状态只被初始化一次，特殊适合传入一些比较重的状态场景使用，从而节省函组件重复渲染期间初始化重状态的开销。 如果用户传入一个重状态给useState,在每一渲染期间都会被初始化。 Co…"}, {"id": "6876344478186078215", "title": "React入门", "desc": "本文适合未实操过react项目，想要学习react看过一遍官网的react新手，可以借此文章更通畅地结合官网学习。笔者写Vue，因此有一些用法会和vue对比说明一下。关于react的理解还不透彻，如有"}, {"id": "6844903858716540936", "title": "手写React Router", "desc": "History.forward():指向浏览器会话历史中的下一页，跟浏览器的前进按钮相同。 History.go(): 可以跳转到浏览器会话历史中的指定的某一个记录页。 History.pushState():pushState可以将给定的数据压入到浏览器会话历史栈中，该方法接…"}, {"id": "6844904181493415950", "title": "【React 原理（一）】实现 createElement 和 render 方法", "desc": "在 React 中，我们都知道可以写 jsx 代码会被编译成真正的 DOM 插入到要显示的页面上。这具体是怎么实现的，今天我们就自己动手做一下。 返回的这个对象就是虚拟 DOM 了。 REACT_ELEMENT_TYPE 的值是一个 Symbol 类型，代表了一个独一无二的值。…"}, {"id": "6844903537038589959", "title": "唯快不破，让nodejs再快一点", "desc": "注： 本文为第12届D2前端技术论坛《打造高可靠与高性能的React同构解决方案》分享内容，已经过数据脱敏处理。 很多前端工程师在做页面性能调优的过程中，极少关注代码本身的执行效率，更多关注的是网络消耗，比如资源合并减少请求数、压缩降低资源大小、缓存等. 我并不觉得这不合理，相…"}, {"id": "6979421840473063438", "title": "levi_react总结", "desc": "主流的虚拟DOM库都有一个h函数，用于降虚拟DOM，转化为真实DOM, react通过babel把jsx转换成h函数形式，即： react_createElement函数， 最后调用render函数将"}, {"id": "6845166891237900296", "title": "React 事件机制", "desc": "我们先话短说，React 的事件机制其实使用了 事件委托 的方式，React 在内部自己实现了浏览器中对应事件的合成事件，web 浏览器中，浏览器在生成虚拟 dom 树的时候，解析出的合成事件挂载到 document 上 (native 中不是很了解)，部分事件仍然在 dom …"}, {"id": "6844903698427019277", "title": "面试还问redux？那我从头手撸源码吧（中间件）", "desc": "昨天的文章手写了一版redux的核心源码，redux库除了数据的状态管理还有一块重要的内容那就是中间件，今天我还是尝试将此部分源码完成。 而中间件（middleware）就是一个可插拔的机制，如果想要扩展某个功能，比如添加日志，在更新前后打印出state状态，只需要将日志中间件…"}, {"id": "6844903624343027726", "title": "ejs 浅析", "desc": "ejs是一种历史悠久的模版，具有简单、性能好、使用广泛的特点。虽然没有vue、react这些项目流行，但还是有使用的场合和学习的价值。这里会介绍ejs项目的源码。使用方法详见项目的readme，或者这里。 ejs是字符串模版引擎，生成的是字符串，其实可以被用到非常多的地方，只要…"}, {"id": "6844903838957174797", "title": "通俗易懂地理解Redux", "desc": "React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。理解这个是理解React和Redux的前提。 一般构建的React组件…"}, {"id": "6844903637165031432", "title": "CNoder 应用迁移记 | 掘金技术征文", "desc": "converter 参数相当于在使用 react+redux 技术栈里面的使用 connect 函数包裹组件时的 mapAction 和 mapState 参数,将返回值作为 builder 参数对应的回调函数第二个入参 vm."}, {"id": "6950922911477825543", "title": "浅见React hook其一", "desc": "1.hook是什么？Hook 是 React 16.8 的新增特性，它可以让我们在不编写class的情况下使用state以及其他的React特性（比如生命周期）。我们先来思考一下class组件相对于函"}, {"id": "6844903943600865288", "title": "React状态管理之Redux", "desc": "Redux 是JavaScript状态容器，提供可预测化的状态管理。 跟React没有关系。 你可能不需要使用Redux，但是在以下情况，建议使用Redux。 Action是一个对象，里面包含了View想要改变state的信息。 Action中必须有type字段，表示Actio…"}, {"id": "6927270967722901517", "title": "使用nextjs实现通过web控制屏幕亮度", "desc": "nircmd 可以方便地调用windows的系统功能。 我们建立一个页面，用来调节windows的屏幕亮度。 这样，可以发现屏幕就暗下来了。 api有了，接下来是建立前端页面。前端页面需要一个UI库，所以先添加UI库。 这样，就可以通过滑动条来改变屏幕的亮度。 但是，它只能设置…"}, {"id": "6844903502385250311", "title": "实战react技术栈+express前后端博客项目（4）-- 博客首页代码的编写以及redux-saga的组织", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 因为将来我们会以标签来作为路由，展示不同标签页下的文章列表，所以当没有匹配到url没有匹配到对应标签的时候，我们显示404页面。 首页部分主要包括…"}, {"id": "6844903517681876999", "title": "reduce与redux中compose函数", "desc": "Your task is to write a higher order function for chaining together a list of unary functions. In other words, it should return a function …"}, {"id": "6844903762293702669", "title": "PureComponent 使用注意事项以及源码解析", "desc": "本文简要介绍了 React 中 PureComponent 与 Component 的区别以及使用时需要注意的问题，并在后面附上了源码解析，希望对有疑惑的朋友提供一些帮助。 先介绍一下 PureComponent，平时我们创建 React 组件一般是继承于 Component，…"}, {"id": "6844903576267931655", "title": "【翻译】基于 Cypress 测试 React 应用", "desc": "两周(原文发布于2017/11/6)以前，Cypress 开源了并且适用于任何人。 Cypress 是一个工具，它使得你的端对端测试写起来更快。 我们将把 Cypress 与我们的项目之一--Eedi 集成在一起。 Eedi 是英国教师、学生及家长的绝佳教育平台。关键是，任何使…"}, {"id": "6921312816162930702", "title": "深入浅出的学习react[学习笔记9]", "desc": "不要在循环、条件或嵌套函数中调用 Hook。 原则 1 无须多言，React-Hooks 本身就是 React 组件的“钩子”，在普通函数里引入意义不大。而对于原则2，相信很多人在它身上栽过跟头，或者说至今仍然对它半信半疑。其实，原则 2 中强调的所有“不要”，都是在指向同一个…"}, {"id": "6844903549420175367", "title": "从0实现一个tiny react(一)", "desc": "。。 学习一个库的最好的方法就是实现一个， 实际react的代码可能相去甚远。 react组件可以完全不用JSX， 用纯js来写。 JSX语法经过babel转化就是纯js代码， 譬如： 这两种是等效的。 babel 通过babylon 来把JSX转化为js react 中vir…"}, {"id": "6926517169601642503", "title": "React Hooks 奇技淫巧 —— 副作用, 闭包 与 Timer", "desc": "作者：ICBU 东墨本文假设你具有以下知识或者使用经验：React>=16.9ReactClassComponentReactFunctionalComponentReactHooks,主要是useS"}, {"id": "6844904006461079559", "title": "如何构建自己的 react hooks", "desc": "我们组的前端妹子在组内分享时谈到了 react 的钩子，趁此机会我也对我所理解的内容进行下总结，方便更多的同学了解。在 React 的 v16.8.0 版本里添加了 hooks 的这种新的 API，我们非常有必要了解下他的使用方法，并能够结合我们的业务编写几个自定义的 hook…"}, {"id": "6844904096927842311", "title": "对Redux中间件的理解", "desc": "在createStore时传入applyMiddleware函数，而applyMiddleware参数正是中间件，这样在每次diapatch的时候会先执行中间件的逻辑。 在了解中间件如何使用后，我们再来看一下它是如何实现的，首先我们来看下中间件的具体写法。 参数store与ac…"}, {"id": "6907076423303839758", "title": "React原理---组件更新机制", "desc": "首次加载渲染触发点击根组件会触发所有组件,点击左侧父组件1时会触发局部更新,只更新当前组件与子组件,不会触发父组件"}, {"id": "6844903693880393741", "title": "你不知道的Virtual DOM（一）：Virtual Dom 介绍", "desc": "目前最流行的两大前端框架，React 和 Vue，都不约而同的借助 Virtual DOM 技术提高页面的渲染效率。那么，什么是 Virtual DOM ？它是通过什么方式去提升页面渲染效率的呢？本系列文章会详细讲解 Virtual DOM 的创建过程，并实现一个简单的 Dif…"}, {"id": "6844903506516639757", "title": "React Render Array 性能大乱斗", "desc": "现在关于 React 最新 v16 版本新特性的宣传、讲解已经“铺天盖地”了。你最喜欢哪一个 new feature？ 截至目前，组件构建方式已经琳琅满目。那么，你考虑过他们的性能对比吗？这篇文章，聚焦其中一个小细节，进行对比，望读者参考的同时，期待大神斧正。 先上结论：在我们…"}, {"id": "6844903550166941710", "title": "深入理解React源码 - 首次渲染 IV", "desc": "咱们在上几篇讲完了简单组件的渲染过程。这次我们用一个自定义组件（我们平时开发用的那种）来探索渲染流程的更多支线。 本篇涉及的文件：和第一篇还有第二篇一样 如果本篇涉及的函数和代码在之前详细讨论过，我会用{}来做引用 App非常像我在最开始给出来的的那个组件，我们上次觉得这个组件…"}, {"id": "6947511717316263943", "title": "React Hook简单使用案例", "desc": "这篇文章分享两个使用React Hook以及函数式组件开发的简单示例。 Button组件应该算是最简单的常用基础组件了吧。我们开发组件的时候期望它的基础样式能有一定程度的变化，这样就可以适用于不同场景了。第二点是我在之前做项目的时候写一个函数组件，但这个函数组件会写的很死板，也…"}, {"id": "6844903773077274632", "title": "React Fiber源码分析 第四篇（归纳总结）", "desc": "其他的几乎没有任何影响，我们还是照常的写着原来的代码，然后我们就感觉到网页性能更高了一些。 要回答这个问题，需要回头看javascript是单线程的知识点。 单线程一次只能做一件事， 在原来的React中， 如果一次更新的时间比较长，那么用户就会感觉到卡顿，也就是丢帧了。 打个…"}, {"id": "6844903510962601992", "title": "又一篇React实践【v16.0 +】", "desc": "路漫漫其修远兮，吾将上下而求索。 背景 完全是出于实践的目的，在一个小业务中，将最新的react工程撸了一遍。【虽说是小业务，两个人也开发了近一周，七个工作日。】 贡献 于是有了这篇文章和【开箱即用】的脚手架工程，其中Options的选项，可以自行移除。不过好消息是这个脚手架工…"}, {"id": "6844904174560231437", "title": "学习React哲学的一次实践", "desc": "不完全和原文步骤一致。 一个展示颜色的小应用。 共8种色系，红橙黄绿蓝青紫灰。每种色系下有更详细的颜色展示。 点击卡片切换色系，展示颜色列表，点击某个颜色可改变卡片的颜色。 鼠标悬浮展示颜色的名称和十六进制值，点击可复制值到剪贴板。 从UI和交互两个方面来梳理一下主要组件的功能…"}, {"id": "6844903927230496781", "title": "react源码解析  1 基础", "desc": "react16react16的更新完全重写核心代码，升级不用调兼容引入fiber，从根本上解决js单线程运行如果计算量太大导致的动画卡帧和交互卡顿的问题内容设计react简单apireact更新创建u"}, {"id": "6844903917638123527", "title": "[译]JavaScript中的development模式怎么实现", "desc": "译注： 忽略了一些内容，还是强烈建议阅读下原文吧。 随着你的 JavaScript 应用越来越复杂，你很可能会在 development 和 production 模式下，分别加载和执行不同的代码逻辑。 能够在 development 和 production 模式下，分别打包…"}, {"id": "6844903863951032334", "title": "深入浅出redux知识", "desc": "redux状态管理的容器。 为了防止自己手动调用 store.dispatch ，一般会使用redux的这个 bindActionCreators 方法来自动绑定 dispatch 方法，用法如下。 这个库是连接库，用来和react和redux进行关联的，上面使用redux的时…"}, {"id": "6844903577513639943", "title": "小尝试！腾讯新闻React同构直出的优化实践", "desc": "就是为了“性能”！！！ 按照经验来说，直出，能够减少20% - 50%不等的首屏时间，因此尽管增加一定维护成本，前端们还是前赴后继地在搞直出。 除此之外，有些特定的业务做直出能够弥补前后端分离带来的SEO问题。像这次选取的腾讯新闻，大多数页面首屏其实都是直出的（但肯定不是Re…"}, {"id": "6844903570538496014", "title": "超越react16", "desc": "一个文本框用于输入，波浪图显示react app的组件渲染情况，时钟显示帧与帧之间的性能，绿色优秀，红色表示卡顿。 从这张图可以看到，随着输入的增多，时钟出现红色，性能也越来越差。主要的问题是输入与react组件的更新是同步的，输入文字之后立即更新，性能非常差。 解决的思路就是…"}, {"id": "6844903692961857543", "title": "[译] 为数字优先新闻编辑室开发文本编辑器", "desc": "如果你和美国的大多数人一样，几乎每天都会使用某个文本编辑器。无论是基本的 Apple Notes，还是像 Google Docs、Microsoft Word 或 Mediumz 等更高级的东西，我们的文本编辑器都允许我们记录和呈现我们重要的想法和信息，使我们能够以最吸引人的方…"}, {"id": "6844903608425660429", "title": "React 快速上手 - 04 基础特性 JSX、Props、State、Lifecycle、Event、Style", "desc": "掌握 react 的基础特性 * 语法 JSX * 属性 Props * 状态 State * 生命周期 Lifecycle * 事件 Event * 样式 Style"}, {"id": "6844903503563849741", "title": "AccountSystem 一个小型库存管理系统", "desc": "该项目采用前后端分离技术，前端使用React全家桶，项目整体框架使用dva，dva是一个将redux、redux-saga 和 react-router 等进行封装的前端框架，方便项目配置及代码管理；后端使用express + mongoose 进行后端业务处理及数据库操作。 …"}, {"id": "6844903732988084238", "title": "[英][官方] react-redux 6.0 发布", "desc": "🎉 This is our first big release supporting the new Context API added in React 16.4! No more blocked updates! As such, we now require React…"}, {"id": "6844903848893644807", "title": "重读redux源码(二)", "desc": "作为前端状态管理器，这个比较跨时代的工具库redux有很多实现和思想值得我们思考。在深入源码之前，我们可以相关注下一些常见问题，这样带着问题去看实现，也能更加清晰的了解。 redux 的优缺点。 关于优缺点，太主观了大家见仁见智。 redux中间件相关，洋葱模型是什么，常见中间…"}, {"id": "6844903827288621069", "title": "[译] 如何使用 RxJS 6 + Recompose 在 React 中构建 Github 搜索功能", "desc": "本篇文章适合有 React 和 RxJS 使用经验的读者。以下仅仅是我个人在设计下面这个 UI 时觉得有用的模式，在此分享给大家。 没有 Class，没有生命周期钩子，也没有 setState。 所有代码都可以在我 Github 上找到。 master 分支是一个已完成的项目，…"}, {"id": "6844903518453628941", "title": "React 整洁代码最佳实践", "desc": "作为开发人员不能仅仅满足于代码可以工作，而应该让代码更易于编写，阅读和维护，这篇文章介绍了很多 clean code 在 React 应用开发上的最佳实践。"}, {"id": "6844903711710380046", "title": "React Hooks (Proposal)", "desc": "在 React v16.7.0 alpha 版本里，提出了一个新的 Feature Proposal ：Hooks ，对社区以及以后前端发展所带来的影响是巨大的。 Hooks 是 React 内部组件中的一系列特殊函数，直观带来的改变是引入state、生命周期函数、或者其他 R…"}, {"id": "6844903628939984910", "title": "React使用新版Context构建组件树工具注入", "desc": "本文章基于React@16.3.0，讲解我是如何使用新版Context api做工具注入的。github地址 而每个组件对于工具的依赖也不相同，那么则会有相当多的库引入语句。 当然，这种方式还可以对统一对组件树中的一些常量进行管理，需要的时候就注入到props中使用。"}, {"id": "6977369422928379935", "title": "初学react之props", "desc": "一、在react中，我们的组件是需要可配置的，那么props就是用于配置我们的组件了 上面组件中我们通过props获取了两个属性值，用于渲染到我们的页面，那么我们父组件调用子组件时是怎样子的呢 子组件"}, {"id": "6844903663412969479", "title": "谷歌推出最新AngularJS升级工具，可快速迁移至Angular", "desc": "众所周知，AngularJS 和 Angular 虽说是一脉相承，但其实是两个不同的产品：AngularJS 指的是 Angular 2.0 之前（即 AngularJS 1.x）的版本，Angular 指 Angular 2.0 之后的版本，由于 Angular 不兼容 An…"}, {"id": "6844904047883845646", "title": "react hook 初体验", "desc": "useState 就是一个hook，它可以给组件添加内部state,它会返回一对值，当前状态和跟新它的函数。这个函数类似于class组件的this.setState 。 useEffect 默认情况下在每次更新之后都会执行，使用useEffect可以方便的访问state或其他p…"}, {"id": "6844903601517625352", "title": "React开发中遇到的问题总结", "desc": "在使用React开发项目过程中，踩过很多坑，在踩坑填坑过程中也学到了不少知识。现就将之前遇到的问题总结下来，一来可以让自己对这些知识点加深印象，二来也可以帮助更多的人在遇到同样的问题时可以少走弯路。 var value=this.state.value.slice();复制一个…"}, {"id": "6844903545032933383", "title": "移动端自制音乐播放器--React", "desc": "因为项目是基于React，所以下面的源码基本都是在播放器组件中抽出来的，不过无论在什么框架下开发，逻辑是一样滴。 先从简单的开始讲起吧，说到播放器几个常用的操作按钮肯定少不了，但是最重要的是那一个可以拖动的播放条。 进度条的大致原理就是获取音频的当前播放时长以及音频总时长的比例…"}, {"id": "6919425877029699592", "title": "React Hooks：优化性能", "desc": " 几种方法是：更改组件状态更改组件道具让我们看一个示例，由状态发生更改而重新渲染。当用户单击按钮时，我们调用setCount()方法，该方法将用新的count 来重新渲染组件。在函数组件中，重新渲染意"}, {"id": "6844903809110523911", "title": "前端技术周刊 2019-03-25：React Hooks", "desc": "V8 7.4 发布。此版本支持了 JIT-less 启动模式 、WebAssembly Threads 以及私有类成员属性语法 #field，并优化了函数形参实参数不匹配、原生访问器读写、流式解析等场景的性能表现。🔗 Chrome 74 起，将试验性支持 kv-storage…"}, {"id": "6844903508706066445", "title": "深入React的生命周期(上)：出生阶段(Mount)", "desc": "本文是对开源图书React In-depth: An exploration of UI development的归纳和增强。同时也融入了自己在开发中的一些心得。 你或许会问，阅读完这篇文章之后，对工作中开发React相关的项目有帮助吗？实话实说帮助不会太大。这篇文章不会教你使…"}, {"id": "6922797108026146829", "title": "react-fiber架构", "desc": "如果你只依赖于[内置]调用堆栈，它将继续工作直到堆栈为空。。。 如果我们可以随意中断调用堆栈并手动操作堆栈帧，那不是很好吗？这就是 React Fiber 的目的。 Fiber 是堆栈的重新实现，专门用于 React 组件。 你可以将单个 Fiber 视为一个虚拟堆栈帧。 1.…"}, {"id": "6844903580906815495", "title": "轻松开发React组件和造轮子指北", "desc": "前言本文将给大家分享以下内容：轻松开发一个react组件手写一个组件模板template并借助yeoman开发脚手架轻松开发一个react组件很多前端开发者在开发react组件的时候往往不知从何下手，"}, {"id": "6844903680613826568", "title": "解密传统组件间通信与React组件间通信", "desc": "本文节选自我的新书《React 状态管理与同构实战》，感兴趣的同学可以继续阅读本书，这本书由我和前端自身技术侯策合力打磨，凝结了我们在学习、实践 React 框架过程中的积累和心得。除了 React 框架使用介绍以外，着重剖析了状态管理以及服务端渲染同构应用方面的内容。同时吸取…"}, {"id": "6952018342081216548", "title": "React组件类型拾遗", "desc": "自从2013年 React 开源以来，关于 React 组件的讨论层出不穷。一些组件类型在发展中逐渐淘汰，而另一些组件类型和组件设计模式逐渐沉淀下来，并演变为约定成俗的为 React 应用程序标准"}, {"id": "6844903760167174151", "title": "[译] 如何测试 React Hooks ？", "desc": "对于即将来临的 React Hooks 特性，我听到最常见的问题都是关于测试的。我都能想像出你测试这种时的焦虑： 该 Enzyme 测试用例适用于一个存在真正实例的类组件 Accordion，但当组件为函数式时却并没有 instance 的概念。所以当你把有状态和生命周期的类组…"}, {"id": "6844903575336779789", "title": "React Portal的前世今生", "desc": "通常在设计这些模态窗的时候，会把整个DOM结构尽量渲染在HTML位置比较顶层的地方，比如body。这样相对来说样式的自由度会比较高。 但是在React的整体框架下，它的数据流向是自上而下的，如果你的modal中的内容依赖父级的数据，那可能就要将对应的组建挂载在依赖组建里面。当然…"}, {"id": "6844903800130502669", "title": "【译】精挑细选的一份 React 性能问题优化的清单", "desc": "我们今天将会用一个具体的例子一步步的解决 React 的一些常见的性能问题。 首先，我会直接给你看项目中问题，并给出问题相应的解决方法。这样做，就和我们实际上的项目差别不大了（在一些概念上）。 这篇文章并不是长篇大论，相反地，我们讨论一些东西都是今后你们马上就能用到的。 为了是…"}, {"id": "6844903646342168589", "title": "记录一个前端架构的想法", "desc": "首先说说工作场景。目前做的项目是微信h5相关的，选择的是react那一套的技术栈。 现在前端js中，基本上已经是普及了模块化的概念，从很早的seajs、requirejs到现在的es自带的模块化系统，已经是越来越完善。 都是通过import的方式很方便的来引用各个模块里面方法，…"}, {"id": "6935806243093250062", "title": "React 类组件源码浅析", "desc": "虽然现在都是使用函数组件，但是类组件还是有函数组件无法替代的地方，比如一些独有的生命周期、很方便的存一些变量而不需要一大堆useRef、实例的方法调用更方便。 以下源码浅析React版本为17.0.1。 类组件的Fiber节点由父级节点进入reconcileChildren方法…"}, {"id": "6844903543502012429", "title": "浅析Redux 的 store enhancer", "desc": "相信大家都知道Redux的middleware（中间件）的概念，Redux通过middleware可以完成发送异步action（网络请求）、打印action的日志等功能。相对而言，Redux的store enhancer的概念，很多人并不是很清楚。 1. 基本概念及使用 其中，…"}, {"id": "6925735514788069389", "title": "肝了一个月，终于把个人网站项目开源啦，来看看吧", "desc": "使用Gin 来做后台的接口API服务。 使用 Ant Design Umi TypeScript React Hooks 搭建，现在支持文章的查看，创建，编辑。 使用 Ant Design Next.js TypeScript React Hooks 搭建，现在支持文章的查看,…"}, {"id": "6844903634518409230", "title": "浅谈前端响应式设计（一）", "desc": "现实世界有很多是以响应式的方式运作的，例如我们会在收到他人的提问，然后做出响应，给出相应的回答。在开发过程中我也应用了大量的响应式设计，积累了一些经验，希望能抛砖引玉。 响应式编程（Reactive Programming）和普通的编程思路的主要区别在于，响应式以推（push）…"}, {"id": "6844903552238747661", "title": "React全家桶构建一款Web音乐App实战（七）：歌手列表及详情开发", "desc": "歌手页分两块，上部分是歌手分类，下部分就是对应的歌手列表。在歌手列表接口中有一个key参数，改参数就是对应的歌手分类，它是由第一栏分类和第二栏分类拼接而成的。在QQ音乐官网的歌手列表页面中通过浏览器调试工具查看DOM结构可以查看到分类对应的key值 在效果图中每个分类都是一行显…"}, {"id": "6844904121200295943", "title": "简单通透理解: 为什么不建议使用 index 作为 key 值", "desc": "今天探讨一个我们前端面试中经常会遇到的一个问题. 使用 index 作为 key 值有什么问题呢? 在我们日常开发中我们经常会和 key 值打交道. 但是我们扪心自问, 真的理解 key 吗? 我想大多数朋友可能会有些许犹豫. 初学者开发过程中, 可能很难理解 key 值存在的…"}, {"id": "6844904135473528839", "title": "肝完这份前端毒鸡汤，你就是赚到了（篇幅较长，建议收藏慢慢细品）", "desc": "最近看到一份非常有意思的前端知识点清单整合，然后就滋生了一个想法emmmm.... 小编根据清单重新画了一个图，然后决定对下方这个图罗列的知识点做一个系统的整合（征服欲燃起了熊熊大火）。工作之余，小编花了大概一周多的时间整理，篇幅较长，建议收藏慢慢细品。 js的变量，说白了就相…"}, {"id": "6998718183674757134", "title": "React 小册 ｜ 废旧立新 新老生命周期", "desc": "在 `React16` 前 React 采用`同步渲染`的方式 每次组件更新 都会构建一颗新的 dom 树 然后进行 diff 实现对 dom 的定向更新 但是这个过程 是一个十分耗时的递归过程"}, {"id": "7005137097321365534", "title": "Fiber 架构的工作原理", "desc": "之前的文章，总结了关于新/老 Fiber 的架构方案，以及能够解决什么问题。 接下来一起来看看他的工作原理，以及如何看源码打debugger。 Fiber架构的工作原理 Fiber的含义 含义一： 我"}, {"id": "6979061382415122462", "title": "写给vue转react的同志们（3）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "6920226262174826503", "title": "React和DOM的那些事-节点删除算法", "desc": "点击进入React源码调试仓库。 本篇是详细解读React DOM操作的第一篇文章，文章所讲的内容发生在commit阶段。 Fiber架构使得React需要维护两类树结构，一类是Fiber树，另一类是DOM树。当删除DOM节点时，Fiber树也要同步变化。但请注意删除操作执行的…"}, {"id": "7002224646485442574", "title": "web前端高级 - React从入门到进阶之初识React", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 一、什么是React？ 二、React的特点 三、React的安装及使用 官网下载react库到本地 直接使用CDN地址引入 通过npm安"}, {"id": "6896712416928169991", "title": "React 实现简易的图片拖动排序", "desc": "在 web 页面中，如果需要改变多个元素的位置，可以通过元素拖动来实现。HTML5中加入了一个全局属性draggable，通过设置该属性的值为 true/false 来控制元素是否可拖动。需要注意的是： 链接和图片默认是可拖动的，可以通过将 draggable 设置为false…"}, {"id": "6937491452838559781", "title": "「源码解析」一文吃透react-redux源码（useMemo经典源码级案例）", "desc": "使用过redux的同学都知道,redux作为react公共状态管理工具，配合react-redux可以很好的管理数据,派发更新，更新视图渲染的作用，那么对于 react-redux 是如何做到根据 state 的改变，而更新组件，促使视图渲染的呢，让我们一起来探讨一下，reac…"}, {"id": "6942720798335434766", "title": "React 组件设计指南", "desc": "在我过往的经历里, 在面试与被面之间通常都会夹杂一些关于组件设计方面的问题, 但通常面试官和候选人都只能通过一些实际的项目经历来就设计进行讨论, 相比服务端面试中可能还涉及一些设计原则和基本思路, 但是在前端的面试过程中, 设计似乎成了一种经验. 显然不是, 因为经验是对过去问…"}, {"id": "6997016044447629349", "title": "React 18  startTransition", "desc": "在 React 18 中引入了一个新的 API，它可以帮助我们的应用程序保持较高的响应，即便是在页面上有大量更新的时候。这个新的 API 支持我们把特定的更新标记为 \"transition\"。"}, {"id": "6952509261519781918", "title": "useEffect你真的会用吗？", "desc": "最近在公司搬砖的过程中遇到了一个bug，页面加载的时候会闪现一下，找了很久才发现是useeffect的依赖项的问题，所以打算写篇文章总结一下，希望对看到文章的你也有所帮助。"}, {"id": "7005410454709207054", "title": "【Rematch 源码系列】六、Rematch type system", "desc": "系列的最后一篇，让我们来聊聊 Rematch 背后的类型系统，这是我在 Rematch 团队的主要贡献，重构它的时候遇到了不少问题，有一些得到了解决，有一些权衡之后采取了”独特“的设计"}, {"id": "6998061573524684831", "title": "setup vs 5 react hooks,助你避开\"沟\"中陷阱", "desc": "序言 本文主题围绕setup来展开，既然提到了setup就离不开composition api这个关键词，准确的说setup是由composition api带出来的概览."}, {"id": "6987590834761760775", "title": " requestIdleCallback 让你的代码避开高峰", "desc": "这个 API 我第一接触到还是在了解 React 的 fiber 实现时，接触到这个 requestIdleCallback。fiber 将耗时的任务切分为一个一个小任务然后来执行。"}, {"id": "6981641681611259911", "title": "Rax.js+Ts+ESlint「旅游官网」实战项目", "desc": "在此之前对 Rax.js 官方文档 进行 学习阅读 对 Rax 框架大致了解，之后进行实战项目的练习和熟悉。"}, {"id": "6844903692756336653", "title": "深拷贝的终极探索（90%的人都不知道）", "desc": "划重点，这是一道面试必考题，我就问过很多面试者这个问题，✧(≖◡≖✿)嘿嘿首先这是一道非常棒的面试题，可以考察面试者的很多方面，比如基本功，代码能力，逻辑能力，而且进可攻，退可守，针对不同级别的人可以"}, {"id": "6844903910977568776", "title": "ReactRouter-V5免费图文视频教程（我免费，有培训机构什么事，就出！）", "desc": "最近一直有培训机构加我微信和QQ对我进行辱骂，我出免费视频，你培训机构怎么了，市场那么大，你赚钱还不准人家自愿作免费吗？我就出，每周三集免费视频教程，目标1000集。 React Router 是一个基于React之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时…"}, {"id": "6986833880460296223", "title": "中国人中庸之道，中国人造的框架呢？", "desc": "大家好，我是卡颂。 都说中国人讲究中庸之道，中国人造的框架讲究么？ 本文会从原理层面讲解Vue是如何在运行时与编译时之间保持中庸的平衡。 UI = fn(state) 几乎所有前端框架工作原理都能用如"}, {"id": "7005129812981317668", "title": "React 合成事件详解", "desc": "React 合成事件： 1. 注册 2. 触发 3. 合成事件和原生事件的执行顺序 仅用于自身学习记录，往后认知深入时，会继续补充"}, {"id": "6998449117726769183", "title": "Taro 正式发布 3.3 版本：支持使用 H5 标签与框架 DevTools", "desc": "Taro 3.3 最重要的特性就是支持使用 H5 标签进行开发，让开发者在小程序环境中复用部分的 Web 生态。进一步地提升开发者的开发体验，Taro 对 React DevTools 和 Vue D"}, {"id": "6999838407409025037", "title": "（建议收藏） React Hooks 源码解毒", "desc": "干货。旨在进阶的小伙伴更快一步突破。 同时也希望帮助大家面试…… 另外，可爱吧（咦，最近换画风了。。）"}, {"id": "7002393166758281247", "title": "React组件三大核心属性 - Refs", "desc": "refs的理解 组件内的标签可以定义ref属性来标识自己，就比如原生中通过document获取dom元素的方法，这里ref获取的是虚拟"}, {"id": "6999803203088810021", "title": "react初体验", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 安装react的环境 最后利用脚手架建立项目demo01 （关于create-react-app很慢的问题）由于某原因,在拉取各种资源时,"}, {"id": "7000624001714241550", "title": "React-Router原理浅析", "desc": "前前言 hello各位小伙伴，我是来自推啊前端团队的 jarvis。 今天跟大家简要分享一下React-Router原理。 1. 原理初探 借助history库实现监听路由，内部支持hash和bows"}, {"id": "6947856296771223589", "title": "精读《DOM diff 原理详解》", "desc": "DOM diff 作为工程问题，需要具有一定算法思维，因此经常出现在面试场景中，毕竟这是难得出现在工程领域的算法问题。 无论出于面试目的，还是深入学习目的，都有必要将这个问题搞懂，因此前端精读我们就专门用一个章节说清楚此问题。 Dom diff 是所有现在框架必须做的事情，这背…"}, {"id": "6960262593265025031", "title": "React快速暴力入门", "desc": "React快速暴力入门 React 作为如今三大框架之一，在进行了短期的学习后，整理了一些笔记，做一下分享： （新人一个，多多包涵）"}, {"id": "6995077640566603789", "title": "使用 Electron 开发桌面应用", "desc": "Electron是使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。本文是对Electron开发过程做的一个经验总结，便于回顾和交流。"}, {"id": "6844903849166110728", "title": "可能是你需要的 React + TypeScript 50 条规范和经验", "desc": "1. 注释 2. 引用组件顺序 3. 引号 4. 缩进 5. 分号 除了代码块的以外的每个表达式后必须加分号。 6. 括号 下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, fina…"}, {"id": "7006097751310073887", "title": "学习总结：React  redux  &  Hook  redux", "desc": "一个网站能留住一名用户的时间只有 8S，如果你在 8S 内不能吸引住用户，或者网站出现了问题，那么你将彻底地丢失这名用户。"}, {"id": "6969548134347177998", "title": "React 状态管理的终极方案 - 不要管理", "desc": "开发者普遍认为状态是组件的一部分, 但是同时却又在剥离状态上不停的造轮子, 这不是很矛盾么? 对于一个最简单的文本组件而言 你觉得应该把 text 从 Text 组件中剥离么? 如果你的直觉告诉你不应"}, {"id": "6973222013028532237", "title": "【第一批吃螃蟹】试用 React 18 ！", "desc": "React 团队最近发布了 React 18 的 alpha 版本。这个版本主要是增强 React 应用程序的 并发渲染 能力，你可以在 React 18 中尝试体验以下几个新特性..."}, {"id": "7003147575809277982", "title": "一文掌握 useRef", "desc": "在 React 数据流中，props 是父组件和子组件交互的唯一方式。要修改一个子组件，必须使用新的 props 去重新渲染它。而 refs 提供了另一种方式。"}, {"id": "6996032490691362830", "title": "从Vue2.0到React17——React路由入门(二)", "desc": "React作为一个MVVM框架，路由功能是必不可少的，回顾我们在使用Vue Router的过程中，最常用的一些功能是路由页面的渲染，路由页面内容的添加，路由地址的配置，路由跳转，路由传参、嵌套路由等等"}, {"id": "6844903870213292045", "title": "掘金最污的 React16.x 图文视频教程(2万5千字长文-慎入)", "desc": "这是一门免费课程，写文章和录制视频这个我花了1个半月时间，如果你觉的不错可以给一个赞。文章和视频中会详细讲解React的基础知识，React版本是16x，也是目前最新版本(我课程录制开始的日期是2019年5月4日)。今年的目标是录制100集前端免费视频教程，可能大部分都会在Re…"}, {"id": "7000792544913129486", "title": "React从0到1基础总结", "desc": "一、React简介 React的基础大体包括下面这些概念： 组件 JSX Virtual DOM Data Flow 二、React浏览器开发环境 搭建浏览器开发环境一共用了3个库：react、rea"}, {"id": "6844903726201700365", "title": "ES6 完全使用手册", "desc": "此外还要注意这里不一定就是正式进入规范的语法。 1. let 和 const 在我们开发的时候，可能认为应该默认使用 let 而不是 var，这种情况下，对于需要写保护的变量要使用 const。 然而另一种做法日益普及：默认使用 const，只有当确实需要改变变量的值的时候才使…"}, {"id": "6947835848813445128", "title": "我在react里写vue3 ,还写了自定义hooks和Hoc构建了响应式 ", "desc": "自从vue3.0正式发布之后，vue3.0核心响应式部分被单独抽离成@vue/reactivity包，也就是说，我们可以脱离vue框架之外，单独使用@vue/reactivity做一些其他的愉快的事😊，于是乎笔者突发奇想，为何不用@vue/reactivity在react中，…"}, {"id": "6844903704450039815", "title": "年终回顾，为你汇总一份「前端技术清单」", "desc": "记得年初的时候我给自己制定了一个学习计划，现在回顾来看完成度还不错。但仍有些遗憾，一些技术点没有时间去好好学习。 在学习中我发现，像文章这样的知识往往是碎片化的，而前端涉及到的面很多，如果不将这些知识有效梳理，则无法形成体系、相互串联。最后有一种东懂一块，西了解一点的感觉。因此…"}, {"id": "6995344002367094791", "title": "日常优化，React 避免不必要的重复渲染", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 前言 大家在用 React 开发时，有没有遇到过这样的问题“我们有时候只想更新单个组件，却触发了大量无关组件的渲染”，正常情况，我们只想重"}, {"id": "6909271104440205326", "title": "React 事件系统工作原理", "desc": "React 为我们提供了一套虚拟的事件系统，这套虚拟事件系统是如何工作的，笔者对源码做了一次梳理，整理了下面的文档供大家参考。 在 React事件介绍 中介绍了合成事件对象以及为什么提供合成事件对象，主要原因是因为 React 想实现一个全浏览器的框架， 为了实现这种目标就需要…"}, {"id": "6844904098634924046", "title": "制作渐变背景生成器 - React State和Event教程", "desc": "Hello, 今天教你写一个渐变背景生成器。我会用这个例子来解释 react 的 state，状态管理，还有事件处理。 这个小工具提供了两个颜色选择器，分别可以选择渐变的两个颜色，渐变的角度是 75 度，线性渐变。另外还有一个重置按钮可以把渐变恢复成初始值。 它的值不会发生变化…"}, {"id": "6977890638880571405", "title": "组合VS继承(精读React官方文档—11)", "desc": "这是我参与更文挑战的第24天，活动详情查看：更文挑战 包含关系 其他组件将任意组件作为子组件传递给上面我们定义的组件中 解读 有时候也可以不使用children prop，例如下面的这种情况 解读 特"}, {"id": "6972341002522591246", "title": "react源码解析11.生命周期调用顺序", "desc": "react源码解析11.生命周期调用顺序 视频课程（高效学习）：进入课程 课程目录： 1.开篇介绍和面试题 2.react的设计理念 3.react源码架构 4.源码目录结构和调试 5.jsx&核心a"}, {"id": "6844903497666658318", "title": "如何管理一个前端基础架构团队 - AdRoll - 众成翻译", "desc": "在过去的几年中，AdRoll已经从的一个不起眼的产品功能单一的创业公司发展成为拥有一套多样化产品的全球营销平台。 随着公司的发展，我们做了大量的工作，以为用户界面开发搭建坚实的基础。在这篇文章中，我们讨论在多个开发团队间所共享的人在前端项目中的影响。"}, {"id": "6844903606550790157", "title": "使用 React + Koa 打造一个轻量级的博客系统，调用语雀API接口实现", "desc": "使用 React 和 Koa 实现了一个博客系统，该项目依赖于 语雀 提供的接口来实现。"}, {"id": "6844903608484364302", "title": "一款破产版脚手架的诞生", "desc": "前些天一直在学习入门Webpack，后来尝试了自己搭建一下一个简单的React开发环境，后来就在想可不可以自己写一个简单的脚手架，以免每次搭建一个简单的开发环境都需要自己一个个的配置，这样很麻烦，使用create-react-app的话，配置一大堆可能不会用到的功能，比较冗余，…"}, {"id": "6844903677908484109", "title": "Iceworks 2.7.0 发布，海量图表供你选择", "desc": "阿里巴巴图表库 Bizcharts 正式开源 Bizcharts 是基于 G2 引擎的 React 版本的封装。 Bizcharts 的语法设计非常贴切 React 的使用方式，图表的各个部分都拆分成了独立的 React 类，如：<Tooltip /> 代表提示信息， <Axi…"}, {"id": "6844904001213874184", "title": "团队 React 代码规范制定", "desc": "团队中每个开发人员的水平不同，技术关注点不同，如果没有一份代码规范的参照和约束，那么项目中的代码将会风格迥异，难以维护，为保证代码质量和风格统一，特此拟定一份《团队React 代码规范》，这样整个团队的开发人员可以参照这份代码规范进行编码，从而让团队的代码风格统一，利于维护。如…"}, {"id": "6844903592193687559", "title": "Redux 入门 -- 拆分 reducer", "desc": "在上一篇文章 Redux 入门 -- 基础用法中，阿大用 redux 开起了水果店。 谁知道水果店生意越来越好，于是阿大开始拓展业务，不仅卖水果，还卖起了生鲜，于是有了水果部和生鲜部。 但是阿大并不想看各个部门的分账本，他只想看一个总账本就好了。刚好 redux 提供了 com…"}, {"id": "6869909602490646542", "title": "React16.13.1网抑云实战 （第二周）| 播放条组件、路由配置、Api项目双部署", "desc": "不过打包的时候如果遇到一些问题，比如 webpack的一些配置问题。可能需要注释掉 个人项目，下班时间写，更新慢见谅。正如上文所说，已经部署上线，请关注 http://101.201.148.180/"}, {"id": "6844903823895429127", "title": "import按需加载react类组件时引发的bug", "desc": "由于项目工程特别大，使用了import函数与@loadable/component结合进行组件的动态加载，从而实现Code Splitting的效果。 刚看到问题的时候一脸懵逼，内心wtf呀，这是什么鬼，什么造成了这个加载报错，仔细看这个报错的调用栈是调用@loadable/c…"}, {"id": "6844903673345081358", "title": "[译] CSS 变量和 JavaScript 让应用支持动态主题", "desc": "大家好！在这篇文章中我准备讲一讲我在 Web 应用中创建动态主题加载器的方法。我会讲一点关于 React、Create-React-App、Portals、Sass、CSS 变量还有其它有意思的东西。如果你对此感兴趣，请继续阅读！ 我正在开发的应用是一个音乐应用程序，它是 Sp…"}, {"id": "6924659724965117966", "title": "React Hooks ", "desc": "1. 不可局部更新 如果state是一个对象，是不可以合并属性的。 看代码所示，当我点击按钮时，它会把名字改为 Mark ，但是 age 会显示不见， 这就是因为它不会局部更新，不会帮我们合并属性，因此需要我们自己加上。 2. 地址会变 setState(obj)，如果obj地…"}, {"id": "6844904046403272717", "title": "React源码解析之updateClassComponent（上）", "desc": "前言：本篇文章给大家带来的是updateClassComponent()的讲解，即ClassComponet的更新流程：一、updateClassComponent作用：更新ClassComponen"}, {"id": "6912328085010382862", "title": "React Hooks 第一期：聊聊useCallback", "desc": "  如果你不知道hooks是什么，不妨先看看官方文档是怎么解释的。  我想先从useCallback聊起，因为它不影响我们的代码逻辑，主要面向于对性能要求较高或者有强迫症的同学。而这个看上去挺简单的h"}, {"id": "6844903554562392078", "title": "JavaScript 2018: 你需要和不需要深入的 - The New Stack", "desc": "JavaScript 现今已发展成熟 -- 我们也不再是在页面上做一些小小的互动元素了，而是使用 JavaScript 构建整个大型应用。 当然，这也使得其比过去更为复杂， 在这个变化万千的 JavaScript 生态系统中，我们也已难以知道整个系统到底有多大。"}, {"id": "6844903825145511950", "title": "我们或许不需要 classnames 这个库", "desc": "如代码所述, 我们最后用了简单的一个语法就达到了目的, 简约便捷. 如注释, 性能基本无区别, 使用 join(' ') 略好一些, 但是都可以忽略不计."}, {"id": "6915286302757912589", "title": "详解 React 16 生命周期", "desc": "上一篇文章详解 React15 生命周期中，我们从挂载、更新、卸载三个阶段来介绍 React 15 的生命周期。本篇我们也将同样从这三个阶段来介绍 React16 的生命周期并对比 React 15 和 React 16 两个版本的差异。 React 16 基于 React 1…"}, {"id": "6844903997401202702", "title": "基于中间件思想设计可扩展的UI组件库", "desc": "在UI组件库的过程中，有一个经常会考虑到的问题是，使用者在使用这个UI库的过程中，可能不满意库默认提供的表现和行为，需要对默认的表现和行为进行自己的定制。 评价一个库是否好用的一条标准是可扩展性。 评价一个库可扩展性是否优秀的一个很重要的原则是：通过增加代码来实现新功能或者改变…"}, {"id": "6844903806585569293", "title": "从一个 bug 探究 React 里面 state 的更新机制", "desc": "最近同事遇到一个 react 组件延迟渲染的问题，最后发现是由于对状态的更新理解不到位导致。具体问题描述： 上面的代码乍一看没有问题，但是当改变 roleId 的时候，会发现 data 里面的值没有改变，而且发现改变 roleId 时候，data 改变是上一次的结果，存在延迟（…"}, {"id": "6936475531302928392", "title": "【译】简单的 React 代码整洁之道｜技术点评", "desc": "整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。 在本文中，我们将研究八种代码整洁之道。 在阅读这些建议时，要记住这些只是建议！ 如果你不同意它们中的任何一个，那也完全没关系。 以下这些实践，个人觉得对我自己编写 React 代码很有帮助。 1. 仅对一…"}, {"id": "6844904032708853767", "title": "[译] React Hooks 底层解析", "desc": "对于 React 16.7 中新的 hooks 系统在社区中引起的骚动，我们都有所耳闻了。人们纷纷动手尝试，并为之兴奋不已。一想到 hooks 时它们似乎是某种魔法，React 以某种甚至不用暴露其实例（起码没有用到这个关键词）的手段管理了你的组件。那么 React 究竟捣了什…"}, {"id": "6844904004242112525", "title": "React  如何封装一个简单的组件", "desc": "转眼,从接触react到现在,有一年多的时间了. 从一开始cv,学习语法,到现在自己写功能组件,封装. 分享一些心得. 1. Component 有人会说,还有constructor呢. 实际上,我这个几乎没用到. state的定义,函数的定义,都在constructor里面.…"}, {"id": "6844903636787527687", "title": "前端路由实现及 react-router v4 源码分析", "desc": "react-router 目前作为 react 最流行的路由管理库，已经成为了某种意义上的官方路由库（不过下一代的路由库 reach-router 已经蓄势待发了），并且更新到了 v4 版本，完成了一切皆组件的升级。本文将对 react-router v4（以下简称 rr4） …"}, {"id": "6949860753268703269", "title": "React 错误边界组件", "desc": "React中的未捕获的 JS 错误会导致整个应用的崩溃，和整个组件树的卸载。从 React16 开始就是这样。但是同时React也引入了一个新的概念——错误边界。定义，是什么错误边界仍然是一种组件，可"}, {"id": "6844903599173173255", "title": "用Flow提升前端健壮性", "desc": "很简单，重复上面的步骤，搞清楚result包含的数据，在测试的时候确保其数据跟原先的相同。 ... 没有东西可以在代码层面保证 某个变量，某个函数 跟预期的一致。 Flow是个JavaScript的静态类型检查工具，由Facebook出品的开源码项目，问世只有两三年，是个相当年…"}, {"id": "6975032054874374174", "title": "元素渲染 (精读React官方文档—03)", "desc": "这是我参与更文挑战的第16天，活动详情查看：更文挑战 元素是什么？ 解读 React元素的本质是对象。 React DOM会负责将这个对象更新到DOM中，来和React元素保持一致。 组件和元素是不同"}, {"id": "6923738103970529288", "title": "React 源码解读之 Custom Renderer", "desc": "从React的渲染流程我们知道，JSX 会先转为一颗 Fiber Tree，然后通过 Renderer 渲染成页面。对于 Web 平台，这个 Renderer 就是 react-dom，对于 Native 平台，这个 Renderer 就是 react-native。当然，我们…"}, {"id": "6911497890822029326", "title": "浅析react-router-config的使用", "desc": "通过阅读源码，我们可以看到renderRoutes的逻辑实际上是接收路由表routes后，判断并初始化extraProps和switchProps，接着渲染了Switch组件,switchProps作为Switch组件的props传入，Switch组件的子元素通过将routes…"}, {"id": "6844903809257308173", "title": "Render Props and Hooks", "desc": "简而言之，只要一个组件中某个属性的值是函数，那么就可以说改组件使用了 Render Props 这种技术。听起来好像就那么回事儿，那到底 Render Props 有哪些应用场景呢，让我们还是从简单的例子讲起，假如我们要实现一个打招呼的组件，一开始可能会这么实现： 然后如果还要…"}, {"id": "6844904112459350029", "title": "React useEffect中使用定时器所产生的闭包陷阱", "desc": "其实关于这个问题在知乎和百度上都有提及，但是在掘金上却没有详细的文章，因此准备出一篇文章来解决在useEffect中如何使用定时器。有一篇文章写得特别好，如果大家想深入理解可以点击此链接 使用 React Hooks 声明 setInterval 你会惊讶的发现你不仅value…"}, {"id": "6844903592864776199", "title": "ReactNative干货分享——视频播放器App", "desc": "前文中我已经介绍过了react-native-video这个库并且用它实现了一个全屏播放的demo，基本上把实现全屏的原理讲解清楚了。本篇文章是在前作的基础上重新撰写一个简单的视频播放器App，分享并总结一下个人的经验。 播放器的UI参考了腾讯视频、爱奇艺等主流播放器，主要参照…"}, {"id": "6844903701933473799", "title": "关于 React Hooks 的简单介绍", "desc": "不久前，react在新的16.7.0-alpha.0版本中推出了新的hooks函数，其作用就是让你可以不用类组件就可以使用react的state和其他功能。大家都知道，class的写法有的时候很繁琐，比如其中的this问题等等。本篇文章主要介绍函数包括这几个useState、u…"}, {"id": "6844903936558628871", "title": "制定专属自己的 React Hooks", "desc": "Hooks 是 16.7.0-alpha 新加入的新特性，目的解决状态逻辑复用，使无状态组件拥有了许多状态组件的能力，如自更新能力(useState)、访问ref(useRef)、上下文context(useContext)、更高级的setState(useReducer)及周…"}, {"id": "6924663189581856775", "title": "从零打造组件库", "desc": "组件库，一套标准化的组件集合，是前端工程师开发提效不可或缺的工具。 业内优秀的组件库比如 Antd Design 和 Element UI，大大节省了我们的开发时间。那么，做一套组件库，容易吗？ 答案肯定是不容易，当你去做这件事的时候，会发现它其实是一套体系。从开发、编译、测试…"}, {"id": "6883729053027844109", "title": "react-router知识点总结", "desc": "Link中to属性可以直接传入一个对象react-router-configreact-router-config基本配置将所有的路由配置放到一个地方进行集中管理使用:react-router-con"}, {"id": "6844903646547853319", "title": "React ref 的前世今生", "desc": "众所周知，React 通过声明式的渲染机制把复杂的 DOM 操作抽象成为简单的 state 与 props 操作，一时圈粉无数，一夜间将前端工程师从面条式的 DOM 操作中拯救出来。尽管我们一再强调在 React 开发中尽量避免 DOM 操作，但在一些场景中仍然无法避免。当然 …"}, {"id": "6844903521154924552", "title": "[译] 听说你想学 React.js ？", "desc": "首先，你需要接受一个事实，就是为了使用 React 你需要学习除了 React 之外更多的知识。这是件好事，React 这个库在某些场景下使用是非常棒的，但它并不能解决所有问题。 而且，请先确认你现在是否在学习 React，这主要是为了不让你对学习 React 本身感到困惑。一…"}, {"id": "6844903981345423367", "title": "【译】仅使用 Context 和 Hooks 来管理 React 应用的状态", "desc": "基于该文章，很多人（实际上是两个）提出了有关如何仅使用 Context 和 Hooks 在 React 应用程序中管理 State 的问题，这让我对这个问题产生了一些研究。 因此，对于本文，我们将使用一种模式来管理状态，该模式使用两个非常重要的 Hooks （ useConte…"}, {"id": "6926788052150288391", "title": "告别树形杈杈树，实现无限级多选下拉", "desc": "带着这个问题看下面↓↓↓树形结构通过filter过滤出name==天津||name==河北？在树形结构上，我们操作元素是很复杂的，需要很多循环和递归，每次寻找都要遍历，子级查找父级也很繁琐，怎么才能一"}, {"id": "6918262676539834382", "title": "【七日打卡】React中state状态更新那些事", "desc": "最近听到很多小伙伴面试题上都会碰到一道比较经典的React批量更新(状态合并)的题目，每个人都有各的答法，但其实很少有人能够非常好的给出这一题目的答案，如果你刚好在准备明年跑路，那么这一题看了可能会给你无形中给与一个帮助。 上述题中，主要问的知识点就是React的渲染更新问题，…"}, {"id": "6844904135062470663", "title": "2020年你还没听过JAMStack？", "desc": "最近在研究JAMStack的一些相关内容，发现这的确是个好东西，所以想写一篇文章把这个概念分享给还不了解JAMStack的同学。本篇文章主要包含以下的内容： JAMStack中的JAM其实是三个词的缩写，它们分别是JavaScript, APIs以及Markdown。而Stac…"}, {"id": "6844903945228255239", "title": "前端开发技术栈推荐", "desc": "本文以React为核心，至于Vue和Angular暂时不考虑，所以不做过多评论，如果大家发现它们也有特别的优势，欢迎补充，互通有无。 1. 工具 1.1. 基础 1.1.1. yarn/npm 推荐yarn，速度更快，使用更简便，支持workspace等高级特性。 二者都要设置…"}, {"id": "6943163194483408926", "title": "Blitz.js 一体化开发 (1.2)：与 Next.js 进行权衡", "desc": "Blitz 是基于 Next.js 的，因此几乎支持 Next.js 的所有功能。有关差异的更多信息，请参见此处：为什么是 Blitz 而非 Next.js。 预渲染，每页支持静态生成 (SSG) 和服务端渲染 (SSR)。 自动代码拆分，可更快地加载页面。 客户端路由具有优化…"}, {"id": "6844904033438679048", "title": "React高阶组件HOC", "desc": "高阶组件是一个函数，接收一个组件，然后返回一个新的组件。 这个问题很简单，为什么我们需要react/vue/angular？使用框架最核心的原因之一就是提高开发效率，能早点下班。同理，react高阶组件能够让我们写出更易于维护的react代码，能再早点下班~ 举个栗子，ES6支…"}, {"id": "6921859508260044814", "title": "React Context最佳实践加源码解析", "desc": "在一个典型的React应用中, 数据都是通过props属性自顶向下传递的, 也就是我们通常所说的父传子。但是在某些场景下(换肤), 很多底层的子组件都是需要接收来自于顶层组件的换肤属性, 这会让我们的代码中有很多显示传递props的地方。Context 提供了一种在组件之间共享…"}, {"id": "6844903540792508429", "title": "用React-Native+Mobx做一个迷你水果商城APP", "desc": "最近一直在学习微信小程序，在学习过程中，看到了wxapp-mall这个微信小程序的项目，觉得很不错，UI挺小清新的，便clone下来研究研究，在看源码过程中，发现并不复杂，用不多的代码来实现丰富的功能确实令我十分惊喜，于是，我就想，如果用react-native来做一个类似这种…"}, {"id": "6992247457006485535", "title": "React.PropTypes.xxx控制台报错说xxx是undefined", "desc": "BodyIndex.usernum: React.PropTypes.在之前的版本之中，我们可以通过React.PropTypes这个API访问React内置的一些类型来检查props，在15.5.1.import BodyChild from '.export default ..."}, {"id": "6844904066397503502", "title": "深入react合成事件系统", "desc": "首先，合成事件这个名词是从“Synthetic Event”翻译过来的，在react的官方文档和源码中，这个术语狭义上是指合成事件对象,一个普通的javascript对象。而在这里，我们谈论的是由众多不同类型事件的合成事件对象组成的合成事件系统(React’s Event Sy…"}, {"id": "6941290537160802312", "title": "【KT】谈谈日常写代码中关于设计模式的一些思考", "desc": "那么在当前场景下，这个资源预览组件已经不能符合我们的期望；在历史旧接口无法改动的情况下，结合现有新增接口以及考虑之后可能会存在更多种数据结构来源，所以采用适配器模式，对多种数据结构进行适配，从而满足需求。 原先设计，该组件专门为此数据源结构服务，当该组件的数据源多一种结构时，就…"}, {"id": "6942683673900613663", "title": "面试官叫我手写 Redux - 2", "desc": "可以看到，appContext 主要是用来初始化 appState 和 setAppState 的。目前我们使用 App 的 state 当做全局 state，其实是有很大的性能问题的 显然，大部分人不会给每个后代组件都加缓存。 如此一来，就消除了对 App 的 state 的…"}, {"id": "6977183702384115719", "title": "用Tailwind CSS为React组件命名", "desc": "你对创建你自己的可主题的React组件库感兴趣吗？也许你想完全控制你的项目的调色板，并希望有大量不同的主题提供给你的用户。也许你只是一个业余爱好者，想锻炼一下自己的创意肌肉。无论你在哪个阵营，都可以在"}, {"id": "6844904195175219214", "title": "基于react-router实现的一个媲美原生路由动画效果的Router", "desc": "在使用React开发web页面的时候，一般都会使用react-router来实现路由功能，相较于native路由流畅丝滑的体验，web页面切换起来会很生硬。作为从 iOS 转前端的我来说，尤其不能接受，因此，在 react-router 的基础上，写了一个 Router 库 r…"}, {"id": "6844903935942082567", "title": "React入门指南(学习笔记)", "desc": "首先不能否认React.js是全球最火的前端框架(Facebook推出的前端框架)，国内的一二线互联网公司大部分都在使用React进行开发，比如阿里、美团、百度、去哪儿、网易 、知乎这样的一线互联网公司都把React作为前端主要技术栈。 React的社区也是非常强大的,随着Re…"}, {"id": "6844903617569259534", "title": "code-rhythm：写了个vscode扩展，让代码更有快感", "desc": "代码补全不过是一个提示说明，也许作为一个为了提高效率的懒人，需要的是：直接给出demo，即改即用。 snippets + demo的小工具，让写代码更带感。 即看即用. A：直接卸载扩展，会随同将对应的代码示例删除。 目前测试vscode的禁用插件功能，可能由于异步机制存在问题…"}, {"id": "6997292264204533791", "title": "React脚手架（上）API 的学习", "desc": "React的基础使用，但是 这个主要是脚手架的学习。vsc插件：①切实同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。"}, {"id": "6844904037620400136", "title": "Redux 包教包会（三）：使用容器组件和展示组件近一步分离组件状态", "desc": "在这一部分中，我们会提出 “容器组件” 和 “展示组件” 的概念，“容器组件” 用于接管 “状态”，“展示组件” 用于渲染界面，其中 “展示组件” 也是 React 诞生的初心，专注于高效的编写用户界面。 Redux 的出现，通过将 State 从 React 组件剥离，并将其…"}, {"id": "6977201217504182280", "title": "【React】setState的批处理", "desc": "简要分析了setState批处理的特点及react采用批处理更新的原因，以及如何避免在批处理机制下拿到“不想要”的state值"}, {"id": "6844903842853683207", "title": "基于 Electron + React 的超高颜值喜马拉雅客户端 - Mob 诞生记", "desc": "最近一个月沉迷喜马拉雅无法自拔，听相声、段子、每日新闻，还有英语听力，摸鱼学习两不误。上班时候苦于没有桌面端，用网页版有些 bug，官方也不搞一个，只好自己动手了。样式参考了一下 Moon FM /t/555343，颜值还过得去，自我感觉挺好 😜😜😜 Mob(モブ), 异…"}, {"id": "6844904137348349960", "title": "React中是如何通过?typeof防止XSS攻击的", "desc": "React的核心机制：虚拟DOM。我们平时写的JSX，实际上babel会帮我们转成React.createElement，用来生成虚拟DOM树。以下是源码部分。 ?typeof是个symbol值，不支持symbol的环境会是一个特殊数字，为什么是这个数字？据说因为 0xeac…"}, {"id": "6844903876286480392", "title": "「React」函数组件与Class组件有何本质不同？", "desc": "本文引申与Dan Abramov的博文, How Are Function Components Different from Classes?, 感兴趣的同学可以直接看原文。 本文在Dan的文章的基础，做了一些自己的思考。 当点击button，延迟3s后，两个组件都会在控制台…"}, {"id": "6844903850277601293", "title": "如何在常见业务场景中使用React Hook", "desc": "了解redux的同学应该知道react-redux中的Provier组件，通过Provider组件可以实现将写好的store进行状态分发到下级任意一个子组件中。其实去查看Provier的实现源码，可以发现正好是使用了react的context属性，所以我们在这里同样使用Reac…"}, {"id": "6936189368709152775", "title": "React 基础语法总结（一）  ", "desc": "把虚拟 DOM 变成真实 DOM，然后处理属性... setState 触发，会执行 render 函数，render 中又触发 setState ... 无限循环，形成死递归 在高阶组件中，一般来说，子类继承父类，先执行父类的方法，在执行子类的方法。 useState 的替代…"}, {"id": "6844903795978141704", "title": "「每日一瞥 📰 」0218 ~ 0308", "desc": "根据我个人的实践来看，在 H5 项目中，useReducer 可以很好的按照 Redux 的模式完成许多工作，同时又可以不引入 Redux 的依赖。那么大佬们是怎么说的呢？ Matt Hamlin 的文章 useReducer, don't useState 对这个问题进行了讨…"}, {"id": "6988836933073895438", "title": "markdown编辑器和展示", "desc": "学习这个是为了编写博客系统做准备，完全去编写一个 markdown 编辑器，在目前的环境下不是特别必要，所以只是简单的使用"}, {"id": "6892047558881837069", "title": "谨慎将处于同个useEffect dependences之中且有逻辑关联的state放在多个useEffect", "desc": "本文是个人在使用React hook中地经验总结之一，也是对useEffect使用的思考之一。本文总结起来正如标题（确实有点长）： state也是指useState返回的state。接下来根据场景说明。 如此有两个下拉框，当其中有任何一个变动时都会进行汇报（真实场景中即发出请求…"}, {"id": "6844903926903341064", "title": "React冷门但很好用的知识点", "desc": "最近在重读React官方文档，盘点一些不常用但有用的知识点。如果有啥说的不好的地方，欢迎指正！ getSnapshotBeforeUpdate()为React生命周期函数， 在render()之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生…"}, {"id": "6844903587466706951", "title": "React Router v4 入坑指南", "desc": "距离React Router v4 正式发布也已经过去三个月了，这周把一个React的架子做了升级，之前的路由用的还是v2.7.0版的，所以决定把路由也升级下，正好“尝尝鲜”... 江湖传言，目前官方同时维护 2.x 和 4.x 两个版本。（ヾ(｡ꏿ﹏ꏿ)ﾉﾞ咦，此刻相信机智如…"}, {"id": "6844903511600136206", "title": "React-Native之Android(6.0及以上)权限申请", "desc": "main0.jpg为什么Android要申请权限效果main.jpgmain1.jpgmain2.jpg前提开始没时间解释了，直接可以运行看效果解释的也很清楚ReactNative项目"}, {"id": "6844903639253778445", "title": "为 react-router 写一个可以缓存的 Route", "desc": "在 上一篇文章 中介绍了前端路由的实现及 react-router-v4（以下简称 rr4） 的源码分析，目前阶段 rr4 已经基本垄断了 react 生态圈的路由，虽然 v4 版本成功完成了一切皆组件的蜕变，但其实它本身还有诸多问题，比如 keep-alive。 keep-a…"}, {"id": "6902602488474501133", "title": "React-Router-Dom中文翻译 2：主要组件", "desc": "导航，比如&#x3C;Link>，&#x3C;NavLink>和&#x3C;Redirect>，我们还喜欢将导航组件视为“路由导航”。 您在您的React app中使用时，您应该从react-router-dom中导入Web应用程序中所要使用的所有组件。 每个React Rou…"}, {"id": "6844903993966231566", "title": "React源码解析之workLoop", "desc": "看下beginWork()。completeUnitOfWork()会在后面文章中解析。 通常判断子节点的更新是要遍历子树来获取信息的，但 React 非常聪明地在子节点产生更新的时候，设置上 childExpirationTime，并最终在父节点上设置一个优先级最高的 chi…"}, {"id": "6877011192469979144", "title": "对react hook的一般理解", "desc": "当村口的狗叫了,其它的狗也跟着叫了,但它们不知道为什么叫. react hook是什么?引入官网的话，react hook是react16.8新增的新特性，它可以让你在不编写class的情况下，使用state以及其他react特性。 在react组件有class组件和funct…"}, {"id": "6899634344814444558", "title": "React项目升级", "desc": "在这个月我经历了一次react项目版本升级的工作，当然不紧紧就是react升级，是所有package.json文件内的所有依赖都要升级。 当时升级的时候有点迷茫。担心项目会不会跑不起来，应该就react版本是15.6，antd是2.xx 版本。 以前也有一次升级经历，只是个vu…"}, {"id": "6877357158665551886", "title": "洞悉细节！react 16.8.6源码分析-5 hooks API", "desc": "作为一个前端页面仔和需求粉碎机，在日常的工作中重复雷同的业务需求，能够获得的提高是很有限的。要想跳出此山中，开阔新视野，笔者墙裂建议大家阅读市面上顶尖开源库的源码。这是学习和掌握js语言特性的绝佳机会(前端发展到现在，大型应用高度依赖框架，正常情况下普通开发者是没有机会接触底层…"}, {"id": "6854573218558050318", "title": "命令行解析工具arg.js源码解读", "desc": "最近在读 nextjs 源码，看到命令行参数解析工具用的 arg.js，用法比较简单，源码也只有 100 多行，相对于command.js来说，更加容易阅读和理解，于是便精读每一行代码，并试图了解其原理，本篇文章也主要用于解析arg.js原理。 定义一个 flagSymbol …"}, {"id": "6844903504570515470", "title": "React, TypeScript 写游戏探索", "desc": "1. React的优势 如果渲染的多了结构复杂了,阅读就会十分困难。现在的代码风格就能够一目了然的看到所有运行的组件 2. React的劣势 其中子弹也可以继承至飞行物使得飞行物等可以衍生更多子类。React中各组件只能继承至React.Component,可采用HOC高阶组件…"}, {"id": "6844903800243765256", "title": "重拾JSX", "desc": "React.createElement语法糖JSX是一种JavaScript的语法拓展，可以使用它来进行UI的展示：我们一般会在组件的render方法里使用JSX进行布局和事件绑定:React的核心机"}, {"id": "6844903496391589896", "title": "关于 Facebook 的 React 专利许可证 - 陈皓", "desc": "随着Apache、百度、Wordpress都在和Facebook的React.js以及其专利许可证划清界限，似乎大家又在讨论Facebook的这个BSD+PATENT的许可证问题了。"}, {"id": "6946077099203493919", "title": "【避坑指“难”】复选框☑️勾选，按钮可点击。常用于注册页、须知页，同意XXX协议（内含material-ui的坑）", "desc": "在项目中经常会有这样需求，特别是在H5移动端，成了家常便饭，今天来详细讲讲代码实现过程。 下面放上主要代码，主要逻辑在于复选框checkbox和按钮button，上面的文字布局就不赘述喽。 由于使用的是material-ui，所以部分组件名字和antd是有区别的，大家举一反三就…"}, {"id": "6854573210789216263", "title": "React学习-初入React世界", "desc": "React 是 Facebook 在 2013 年开源 JavaScript 库。它把界面抽象成一个个组件，通过组合这些组件，开发者可以得到功能丰富的页面。同时引入了 JSX 语法，使得复用组件变得容易，且结构清晰。并且有了组件这层的抽象，代码和真实渲染目标分离，除了可以在浏览…"}, {"id": "6844903969299382280", "title": "react MPA 多页配置", "desc": "create-react-app 默认创建的是 SPA 应用，随着代码量的增加，build 后的 js 文件会越来越大。网上有很多拆分大的 js 文件的方案，但其实把 SPA 拆分成 MPA 也未尝不是一种解决方案。下面是 react 多页面配置过程，以备忘。"}, {"id": "6844904133024022542", "title": "用 Jest 和 Enzyme 测试 React I", "desc": "这篇文章将会介绍如何设置并使用 Jest 和 Enzyme 测试通过 Create React App (CRA) 创建的 React 应用。对于那些从头开始的人我们会给出一些建议。但是，不会涉及太多有关 React 的知识。 Jest 和 Enzyme 是两个不同，但又相互相…"}, {"id": "6844903520403980301", "title": "Parceljs和Webpack在React项目上打包速度对比", "desc": "最近这几天前端圈子估计都被Parceljs刷屏了。Parceljs主要特点为： 在Parcejs的官方网站上给出了与其它的打包工具的构建速度的对比结果，但是并没有给出测试的项目地址，所以花了点时间在React上做了下面的测试。 两个项目都非常小，一共只有4个组件。引入了reac…"}, {"id": "6844903647982125063", "title": "react 服务端(ssr) 框架next.js开发个人网站分享", "desc": "利用react服务端框架next.js写的博客，喜欢就给个Star支持一下。 只能看不能修改接口哦。如果为false则调不到接口，需要自己去写接口。 关于演示不能上传图片，不能发表文章或者修改属于正常情况，因为只是为了展示。 关于路看不到发布文章路由和后台管理也属于正常情况，可…"}, {"id": "6954716237918109710", "title": "react hooks ", "desc": "1：hooks和类组件或者function component的区别 react认为ui是数据的视图映射，V = f(props,state)；f 函数对于输入的数据进行加工和处理。相比较传统的cla"}, {"id": "6966151274467164191", "title": "如何在React Native中构建一个简单的游戏", "desc": "简介 今天我们将学习如何使用React Native制作一个游戏。因为我们使用的是React Native，这个游戏将是跨平台的，这意味着你可以在Android、iOS和网络上玩同一个游戏。然而，今天"}, {"id": "6907541473290354702", "title": "详解 React 15 生命周期", "desc": "接下来我们会分挂载、更新和卸载三个阶段来对 React 15 的生命周期进行讲解。 在挂载阶段，组件实例会被创建并插入到 DOM 中。其生命周期调用顺序如下： 在组件挂载之前，会调用它的构造函数，只会被调用一次。 通过给 this.state 赋值对象来初始化内部 state。…"}, {"id": "6844903700368982029", "title": "前端解读面向切面编程(AOP)", "desc": "面向对象(OOP)作为经典的设计范式，对于我们来说可谓无人不知，还记得我们入行起始时那句经典的总结吗-万事万物皆对象。 是的，基于OOP思想封装、继承、多态的特点，我们会自然而然的遵循模块化、组件化的思维来设计开发应用，以到达易维护、可扩展、高复用的目的。 既然OOP这么多优点…"}, {"id": "6933089946765000711", "title": " 初探 React Server Components", "desc": "声明：文章约3500字，阅读需要10分钟左右。 长期以来，web开发中有一个没有定论的问题，是 \"瘦\"客户端，还是“胖”客户端。这个问题放到 React 的生态中依然存在。React 主要以客户端为中心，对服务端的利用很少。在 2020 年底，React 团队共享了他们最近在这…"}, {"id": "6844903679204524040", "title": " redux 时间旅行，你值得拥有！", "desc": "顾名思义，就是可以随时穿越到以前和未来，让应用程序切换到任意时间的状态。我们都知道，一般应用状态都很复杂，创建、维护、修改和弄明白有哪些行为会影响状态都不是一件容易的事儿。 整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存…"}, {"id": "6922643449019629575", "title": "Virtual DOM 及 Diff 算法", "desc": "1. JSX 到底是什么 使用 React 就一定会写 JSX，JSX 到底是什么呢？它是一种 JavaScript 语法的扩展，React 使用它来描述用户界面长成什么样子。虽然它看起来非常像 HTML，但它确实是 JavaScript 。在 React 代码执行之前，Bab…"}, {"id": "6968774049430241293", "title": "详解React setState同+异步机制", "desc": "React官方文档在描述setState的时候提到了三点注意事项： 不要直接修改State State的更新可能是异步的 State的更新会被合并 我们来一一分析为什么有这3点限制。 不要直接修改st"}, {"id": "6844903774331338765", "title": "[官方] React 16.8 发布了", "desc": "WithReact16.8,ReactHooksareavailableinastablerelease!WhatAreHooks?HooksletyouusestateandotherReactfe"}, {"id": "6844904023733043214", "title": "React使用踩坑记", "desc": "记录工作中使用react+ antd-design遇到的各种坑，持续更新。平时写文章恨自己吐不出来东西，这篇文章恰恰相反了，anyway，大家看完之后可以有则改之，无则加勉"}, {"id": "6844903694496956424", "title": "React最佳实践尝试（三）", "desc": "将定义好的interface统一放到typings目录下面。 前端组件写完了之后，别忘了对应的node中的路由和ssr的代码。 最后访问localhost:7999/demo页面就可以查看效果了。 第一个页面构建完毕之后，我们可以在写一个复杂一点的todolist页面来检查一下…"}, {"id": "6844904080255483912", "title": "redux 原理以及实现", "desc": "这个状态管理器只能管理 count，不通用. 修改 count 之后，使用 count 的地方不能收到通知。 我们可以使用发布-订阅模式来解决这个问题。我们用个函数封装一下这个 redux 到这里我们完成了一个简单的状态管理器。 我们修改状态，在订阅的地方监听变化，可以实现监听…"}, {"id": "6946499643710636045", "title": "React Hooks系列（一）：常用Api的使用方法", "desc": "Hook 是 React 16.8 的新增特性。它解决了函数组件只能做视图渲染的限制，可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 1. useState 2. useEffect 3. useRef 4. useMemo、useCal…"}, {"id": "6844903737215975432", "title": "【面试进阶】React组件设计模式（一）", "desc": "我们一般编写组件，都会这么去做，list包裹item，循环展示item。数据放在list组件中，item作为一个无状态组件，只做他的展示。 数据交互通过props传递，点击+-会改变购物车里的数据。 现在需求来了，双12来了（就在昨日），所有商品8折优惠。 这意味着我们需要修改…"}, {"id": "6844903873434370055", "title": "[译] 理解 React 中的高阶组件", "desc": "在我的上一篇文章中，我们讨论了 React 中的类型检查（type-checking）；我们了解了如何在 React 组件中指定 props 的类型，尽管是在用 JS 编写代码。 在这篇文章中，继续研究 React，我们将学习 React 中的 HOC。 HOC 是 React…"}, {"id": "6844903692995395592", "title": "更好用的 Redux", "desc": "首先要明确的是，Redux 并不是 React 独有的一个插件，它是顺应前端组件化开发潮流而诞生的一种状态管理模型，你在 Vue 或者 Angular 中也可以使用这个模型。 自身具有的状态：例如一个 Button 组件自身含有一个计数状态 count，表示自己被点击的次数。 …"}, {"id": "6844903956968128525", "title": "React 中 lazy, Suspense 以及错误边界(Error Boundaries)的使用", "desc": "React.lazy 接受一个函数，这个函数内部调用 import() 动态导入。它必须返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。 根据官方文档所说，在 react 16 以后，任何未被错误边界…"}, {"id": "6953248957585686565", "title": "Antd v4 表单控件数据绑定问题解析", "desc": "问题 1 : Form组件数据管理的时候， 如何不显式的给 传递 onChange方法的 ? antd的<Form/>组件，自带数据域管理，所以不需要在 <Input/> 去显示的添加onChange"}, {"id": "6844903800801771534", "title": "在 create-react-app 中启用装饰器语法", "desc": "本文简单介绍了一下如何在 create-react-app 中启用装饰器语法的两种方式。 项目中就会展示出各种配置文件。 重新运行项目，即可正常使用装饰器语法。 打开项目的 node_modules 文件夹，找到 babel-preset-react-app 目录。打开目录下 …"}, {"id": "6844903516939485197", "title": "VS Code 折腾记 - (11) 再来一波插件推荐!(代码片段,框架,Node,touchbar,TS,Git,数据库,python!!)", "desc": "我看到很多人会在一些插件下面辱骂.说什么万年不更新,辣鸡插件卸载不掉. 真心替那些作者不值,浪费自己生命造福社区的人却不被尊重还辱骂,贼寒心... NPM Dependency Links : 这个就是方便你在初始化脚手架项目之后想了解某些模块,点击直接调到npm 模块发布页面…"}, {"id": "6844904054347268103", "title": "手摸手，打造属于自己的 React 组件库01 — 基础篇", "desc": "2020年，作为一名普通前端打字员，我平时工作的主要目标还是使用 React 构建应用程序。去年一直想建立一个属于自己的 NPM 库，用于沉淀自己的业务组件、Hooks，但是由于很多概念都不是很了解的缘故，又感觉这个目标有点遥不可及。 但是其实只要明白一些原理和细节之后，构建自…"}, {"id": "6915785177855688717", "title": "react-quill 富文本编辑器中自定义图片插入（图片上传）", "desc": "但是，编辑器中插入图片时，编辑器默认的处理是将图片转成base64保存，提交后端时请求数据太大，给数据库带来压力。 因此，进行改善，将图片先上传到数据库，使富文本编辑器里插入的img标签，src属性变成一个链接地址。具体效果见如下图： 在富文本配置的toolbar中增加hand…"}, {"id": "6844904148387758093", "title": "基于腾讯地图react-qmap的优化->better-react-qmap", "desc": "react-qmap的作者固定了腾讯地图的版本号，仅仅支持传入一个KEY值。因此我们在使用react-qmap时候，无法使用高级版本的功能和地图的插件功能。 better-react-qmap为了解决react-qmap这个问题，使用apiVersonSrc将key值替换为腾讯…"}, {"id": "6924540465841143815", "title": "前端国际化, React 项目多语言：React-i18next 本地化数据 && 请求后台数据", "desc": "根据 resources 上面的注释，把 resources 部分提取到 json 文件中，然后 import 引入。 目前为止，还没有用到 i18next-xhr-backend , 这个插件可以使你的 json 文件放到 public 目录下使用（下例 Locales JS…"}, {"id": "6844903982683389965", "title": "React.PureComponent（React组件优化之浅比较）", "desc": "React.PureComponent（React组件优化）React.PureComponent：setStart有个小毛病好了！我们先通过一个小案例感受一下PureComponent部分源码,Pu"}, {"id": "6844903826864996365", "title": "面向复杂场景的高性能表单解决方案", "desc": "当时实现这样的需求，没有用到任何第三方表单解决方案，纯用redux实现，写了很多很多重复而复杂的面条代码，包括，表单的数据收集，字段校验等等，代码可维护性极低，最终迫使我开始真正深入表单领域，探索最佳的表单解决方案。 慢慢的，接触了集团内部和业界很多优秀的表单解决方案，它们的核…"}, {"id": "6985913461125414925", "title": "React 源码之状态更新（一）", "desc": "state更新概览 在React中有那些行为可以触发状态更新： ReactDOM.render：在legacy模式下的HostRoot new ReactDOMRoot('').render：conc"}, {"id": "6883403233310539790", "title": "react组件优化之React.memo", "desc": "我的上一个项目尝试使用了react16.0进行开发，并全线使用hooks-api，开发时由于没有注意react组件渲染机制，导致项目的性能大大低于预期。开发一时爽，完成后才发现对于react的hooks只是机械性的使用，未能得其精髓，在又一次的react16.0的学习中，看到了…"}, {"id": "6844903543715921927", "title": "前端项目重构的些许收获", "desc": "这个项目开始之初，赶时间上线。很多地方基本没怎么管代码规范，直到一期完毕回过头来看之前写的代码，不忍直视。为了之后接手的人能更加轻松，也为了自己之后debug更加顺手，边开始二期的部分需求，边重构一期的部分代码，还是有部分收获。 之前的架构是react-router2，后面换成…"}, {"id": "6844904033187004423", "title": "改造antd的Modal组件使其可拖拽", "desc": "最近几个月在做一个react的项目，项目做到了百分之八十，然后业务要求项目里面的模态框可以拖拽，呵呵，早不提，晚不提，偏偏现在提，尽管我心里骂了一万遍，可是还是只能老老实实搞啊，毕竟谁叫人家是上帝，吾"}, {"id": "6863444288048234503", "title": "[译]动态导入、代码分割、延迟加载和错误边界", "desc": "本文是有关如何使用动态导入(dynamic import)的详细指南，该功能可实现代码分隔和延迟加载，另外还介绍了如何使用错误边界(error boundaries)来捕获错误。 import()当前处于TC39流程的第4阶段，在JavaScript中以类函数的方式加载模块。 …"}, {"id": "6844904105920430094", "title": "react 国际化方案react-i18n-auto，全自动化webpack+babel插件", "desc": "国际化对于某些大型公司很常见的业务，他们基本也都有自己的一套国际化规范，但对于小公司而言可能并没有这些需求，平时也不太注重。如果有需求，通常解决的方法就是使用 react-intl ,react-i18next等一些现有的npm包。以下是我大致了解的方案，以react-intl…"}, {"id": "6844903573453537287", "title": "React - setState源码分析（小白可读）", "desc": "setState()并不总是立即更新组件，它可能会进行批处理或者推迟更新。这使得在调用setState（）之后立即读取this.state成为一个潜在的隐患。 去源码里面看实现是比较靠谱的方式。 不管这里看不看得懂都没关系了，马上进入源码的世界。 如果不处于批量更新模式，对所有…"}, {"id": "6844903633662771207", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （中）", "desc": "上篇 介绍了 React 现在流行的 CSS 解决方案。本篇就直接进入主题详细讲讲我最喜欢的解决方式之一：tachyons 0. 选择标准 1. tachyons 在我的经验，只是瞥一眼文档很少人会对 tachyons 上来就感冒的，真正感受到它的魅力是在使用中。我是看了一段现…"}, {"id": "6844903952798973960", "title": "react-router路由", "desc": "MemoryRouter 在内存中管理 history ，地址栏不会变化。在 reactNative 中使用。 在原来的 create-react-app 脚手架中，是通过 package.json 配置文件来配置代理的。但是，在新版的脚手架中，通过 package.json …"}, {"id": "6844903697407803406", "title": "提高React开发效率的5个工具", "desc": "React非常适合快速开发具有漂亮交互式UI的应用程序。React组件是创建隔离和可重用构建块的好方法，可以用于开发不同应用程序。 一些最佳实践有助于开发更好的应用程序，但正确的工具可以使开发过程更快。以下是5（+）个有用的工具，可以加快组件和应用程序的开发效率。 1. Bit…"}, {"id": "6981276295720075294", "title": "小白入门：编写一个炒鸡简单的react函数组件", "desc": "hook需要了解 本文要做的是一个Alert弹窗，可以通过组件调用或者js调用来显示，然后通过点击确定按钮关闭，看起来十分简单，但首先第一步，我们需要了解hook，但本文不会讲解hook，还没看过ho"}, {"id": "6844903584006406158", "title": "React 服务端渲染与同构", "desc": "近日实现了一个 React 同构直出的模板 React Isomophic，开箱即用。 该模板支持 Koa2 + React + React Router + Redux + Less 。 传统的 SPA 开发模式由于其页面渲染全部放在了客户端，从而导致了一些一直以来难以解决的…"}, {"id": "6844903558739918855", "title": "（译）React 组件设计模式基础", "desc": "随着 React 在前端开发中越来越流行，各种各样的设计模式及新概念亦层出不穷。本文旨在总结 React 开发中一些常见的设计模式。 React 组件可以是有状态的，在其生命周期内可以操纵并改变其内部状态；React 组件也可以是无状态的，它仅接受来自父组件传入的 props，…"}, {"id": "6948418001490149406", "title": "React 表格组件设计——基础布局", "desc": "在前端中后台项目中，表格是最常见也是最基础的数据组件。表格主要以二维栅格的形式呈现，能够清晰明了地展示数据。 在基于表格的项目开发中，我们经常遇到的一个问题，就是如何平衡功能的完备性与可拓展性。功能完备的表格，比如常用的 Antd Table ，能够满足我们业务开发的大部分场景…"}, {"id": "6844904020381794312", "title": "你能在 JSX 中使用 console.log 吗？", "desc": "这样做将不会在控制台上打印出你所期望的 todos 信息，它只会在浏览器中渲染出字符串 console.log(this.props.todos)。 首先，JSX 不是原生的 JavaScript，也不是 HTML，它是一种拓展语言。 相同的，.jsx 最终会被编译为原生的 .…"}, {"id": "6844903957425324046", "title": "「前端发动机」深入 React hooks — useEffect", "desc": "React Hooks的基本用法，官方文档 已经非常详细。本文的目的，是想通过一个简单的例子详细分析一些令人疑惑的问题及其背后的原因。这是系列的第二篇，主要讲解 useEffect。 官方文档中说，可以将 useEffect 的回调和清理副作用的机制，类比成 class 组件中…"}, {"id": "6844903846884409352", "title": "React完美实现可配置转盘", "desc": "最近在做一些h5活动的需求，发现用到转盘的机会很大。 额，因为gif压缩了，所以画质有点。。。呵呵，没关系的 传入一个奖品数组. 能够在点击转的按钮时候做一些判断是否可以开转. 开转后有一个回调，用于请求奖品返回. 转动结束/中奖回调. 转动按钮，背景图可配置. 这里主要是两张…"}, {"id": "6844903590096535566", "title": "使用新一代js模板引擎NornJ提升React.js开发体验", "desc": "当前的前端世界中有很多著名的开源javascript模板引擎如Handlebars、Nunjucks、EJS等等，相信很多人对它们都并不陌生。 早在几年前Backbone等mv*框架流行的时候，js模板引擎遇到了它们的春天，因为Backbone可以支持选配用户自己喜好的模板，并…"}, {"id": "6844903785106522119", "title": "TypeScript In ICE", "desc": "TypeScript 是 JavaScript 的 强类型 版本。 提供了 静态类型系统 和支持 最新的不断发展的 JavaScript 新特性。 在编译期去掉类型和特有语法，生成 纯粹的 JavaScript 代码。 由于最终在浏览器中运行的仍然是 JavaScript，所以…"}, {"id": "6897205750763651085", "title": "Next.js +Egg.js+React博客项目部署详解", "desc": "1. 项目结构 blog：博客项目前端工程，所用技术栈为Next.js + React Hooks + Antd + Axios。 service：博客项目后端服务，所用技术栈为Egg.js。 admin：博客后台管理系统，所用技术栈为Create-React-App + Re…"}, {"id": "6844903856426450958", "title": "改造百度ueditor", "desc": "富文本编辑是管理后台（cms）系统中的重要功能，编辑器的选择也非常多，如今大多编辑器都是走的简约路线，遇上挑剔的客户就无法满足他们的需求。百度的ueditor作为一款重量级的编辑器，提供了强大的功能，并且从word中直接copy到编辑器中的还原效果也非常好，但是由于官方已经很久…"}, {"id": "6844903978291953672", "title": "React组件和组件数据通信", "desc": "React 也是数据驱动的，当数据发生变化时，视图就会自动发生变化（视图是数据的映射）。组件中的数据有两个来源：props 和 state，其中 props 就是组件被使用时接收的行内属性，是从外部传入的数据，而 state 是组件的私有数据，组件定义时就需要创建；"}, {"id": "6923073253988810765", "title": "React渲染 - 流程概述", "desc": "1.本文附上了react.render树状图.xmind，此为作者查看/调试react的渲染源码时做的结构笔记。可以下载进行一些函数定位，一些函数代码位置较深且存在部分依赖，以此关联上下文是个不错的选择。 3.设置了几个大标题，提前介绍一下有关react的函数，二、三 目录可直…"}, {"id": "6844903537684512775", "title": "图解setState", "desc": "首先的猜想是 store 改变后，redux 在某处调用了 setState，通知了 react。 看了下代码发现确实如此，调用 dispatch action 会触发一个 onStateChange 的函数 (这个函数在 connect 的时候就被注册到 store 了, s…"}, {"id": "6953410991623241758", "title": "React源码解析 之 Fiber的渲染（3）终", "desc": "completeWork 相比较beginWork阶段来说，completeWork阶段，处理就比较简单了。同样的，对于completeWork，也是通过workInProgress.tag来判断，走"}, {"id": "6844903693259636750", "title": "React服务端渲染实现（基于Dva)", "desc": "图中左侧是浏览器端看到的页面源码。其中红色框标识的3个部分，是SSR需要关注的重点内容。 最简单的是中间一个框，它是服务端渲染的App的内容部分。 第一个是分片（splitting）代码文件。即SSR Server必须要知道，浏览器要正确展示这个页面，需要包含哪些分片的js代码…"}, {"id": "6844903792803053576", "title": "记一次大型React项目的国际化方案探索", "desc": "提起React项目国际化，首先想到著名的 react-intl 库，这个库提供了针对组件、日期、数字、字符串等多种国际化方法。使用方法也很简单： 使用 react-intl 中内置的组件或方法替换需要做多语言的字符串、时间等，具体可参考 API文档。 完成之后发现初始化的时候可…"}, {"id": "6844903552431685646", "title": "React Native 网络层分析", "desc": "在使用React Native开发中，我们熟练的采用JavaScript的方式发送请求的方式发送一个请求到服务端，但是处理这个请求的过程其实和处理Web应用中发送的请求的过程是不一样的。因为处理这个请求的目标不是浏览器，而是嵌入这个应用的原生操作系统。 在处理React Nat…"}, {"id": "6844903806170300423", "title": "React性能优化：PureComponent的使用原则", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励，希望大家多多关注呀！react的部分持续更新中... React15.3中新加了一个PureComponent类，取代之前的PureRenderMix…"}, {"id": "6844904182915432455", "title": "精读《用 React 做按需渲染》", "desc": "BI 平台是阿里数据中台团队非常重要的平台级产品，要保证报表编辑与浏览的良好体验，性能优化是必不可少的。 当前 BI 工具普遍是报表形态，要知道报表形态可不仅仅是一张张图表组件，与这些组件关联的筛选条件和联动关系错综复杂，任何一个筛选条件变化就会导致其关联项重新取数并重渲染组件…"}, {"id": "6991394202001080350", "title": "你知道 React setState 的原理吗？", "desc": "大家都知道，在 React 中是通过 setState 来更新类组件的状态的，但是你真的了解其运行机制吗？"}, {"id": "6844903704437456909", "title": "阅读源码后，来讲讲React Hooks是怎么实现的", "desc": "React 16.7-alpha中新增了新功能：Hooks。总结他的功能就是：让FunctionalComponent具有ClassComponent的功能。 虽然最新的class语法可以用handler = () => {}来快捷绑定，但也就解决了一个声明的问题，整体的复杂度…"}, {"id": "6844904167728021512", "title": "精读《recoil》", "desc": "Recoil 是 Facebook 公司出的数据流管理方案，有一定思考的价值。 Recoil 是基于 Immutable 的数据流管理方案，这也是它值得被拿出来看的最重要原因，如果要用 Mutable 方式管理 React 数据流，直接看 mobx-react 就足够了。 断点…"}, {"id": "6844904046260666381", "title": "React-Redux 100行代码简易版探究原理。", "desc": "各位使用 react 技术栈的小伙伴都不可避免的接触过redux + react-redux的这套组合，众所周知 redux 是一个非常精简的库，它和 react 是没有做任何结合的，甚至可以在 vue 项目中使用。 它就是利用闭包管理了 state 等变量，然后在 dispa…"}, {"id": "6982362318822703112", "title": "【React】react快捷键:Webstorm中快速创建react组件", "desc": "文章总结整理了一些webstorm中react组件快速创建的方法，方便于日常工作中react的便捷开发。"}, {"id": "6991470029736771615", "title": "react子父组件相互通信传值系列之——父组件传值与函数给子组件 | 8月更文挑战", "desc": "react子父组件相互通信传值系列之——父组件传值与函数给子组件 | 8月更文挑战 写在前面： 本系列你将能学到： 父组件传值与函数给子组件，在子组件可使用父组件的值与函数； 子组件传值与函数给父组件"}, {"id": "6886766652667461646", "title": "React组件到底什么时候render啊", "desc": "今天我们React源码交流群里有个小伙伴提出个有趣的问题，觉得自己对React运行流程理解很到位的同学，可以来看看。 render。即调用render函数，根据返回的JSX创建新的fiber。 bailout。即满足一定条件时，React判断该组件在更新前后没有发生变化，则复用…"}, {"id": "6996185552953278477", "title": "ref的三种使用方法", "desc": "ref ref属性可以帮助我们获取子组件的实例或者DOM对象，进而对子组件进行修改。 使用场景： 希望直接使用dom元素中的某个方法，或者希望直接使用自定义组件中的某个方法。 ref的注意事项 ref"}, {"id": "6963096630262235167", "title": "基于React的富文本编辑器-Braft Editor使用", "desc": "antd 是基于 Ant Design 设计规范实现的 高质量 React 组件库，我们倾向于只提供符合该规范且带有视觉展现的 UI 组件，也尽量不重复造轮子。 如果要在React项目中使用富文本编辑"}, {"id": "6844904148429701128", "title": "最新React Native环境搭建(从0到打包APK)", "desc": "Python 2.x ， 必须安装2.x 的版本。"}, {"id": "6906676903302709262", "title": "漫谈 React Fiber", "desc": "React 实现了使用 Virtual DOM 来描述 UI 的方式，通过对比两棵树的差异最小化的更新 DOM，这样使得用户的代码变的傻瓜，但是同时也来带了一些问题。这个核心的问题就在于 diff 计算并非是免费的，在元素较多的情况下，整个 diff 计算的过程可能会持续很⻓时…"}, {"id": "6844903990958784526", "title": "React Hooks 源码解析（3）：useState", "desc": "在写本文之前，事先阅读了网上了一些文章，关于 Hooks 的源码解析要么过于浅显、要么就不细致，所以本文着重讲解源码，由浅入深，争取一行代码也不放过。那本系列讲解第一个 Hooks 便是 useState，我们将从 useState 的用法开始，再阐述规则、讲解原理，再简单实现…"}, {"id": "6844903571322847245", "title": "如何学习一门编程语言或框架", "desc": "年关刚过，相信已经有不少同学看着肚腩，习惯性地开始制定新年的运动计划了。在这种时候如果你还看到了这篇文章，说明你是热爱学习（工作不饱和）的。大鱼大肉，满腹油腻之时看干货并不合时宜，所以本次就翻译一篇指导大家怎么学习编程语言或框架的软文，来作为开启大家新年学习之门的润滑剂吧。 由…"}, {"id": "6844903597252034567", "title": "又双叒叕一个Ant Design的Vue轮子(vue-antd-ui)", "desc": "周边生态，组件数量及质量都是略胜一筹，至于样式，每个人的审美不一样，就不加评判了，不过个人还是喜欢antd的。 github搜索关键词 vue ant 共93条结果，搜索vue ant-design也有51条结果。 希望让Vue开发者也能享受到Ant Design的优秀设计，技…"}, {"id": "6985840134046351367", "title": "前端单元测试学习（1）—— 单测入门之react单测项目初步", "desc": "初步学习单元测试，首先熟悉一些单元测试的一些概念和相关的一些过往经验，用自己熟悉的技术先搭建起我们后面要用的单测项目"}, {"id": "6844903887598534670", "title": "可能你的react函数组件从来没有优化过", "desc": "当父组件执行render的时候，避免不了C组件的渲染和C函数的执行（如果不在外面加判断的话：{isShowC && <C />}）。当到了C组件的时候，会浅比较C组件前后props值。如果props每一个属性值都一样，会跳过函数组件C的执行，减少了不必要的渲染，达到了性能优化。…"}, {"id": "6844903575999479821", "title": "阅文前端技术选型", "desc": "本文为阅文体验设计 YUX 成员出品，请尊重原创，转载请联系阅文体验设计微信公众号 ( id: YUX_design ) 获取授权，并注明作者、出处和链接。 介绍阅文，了解阅文，包括团队，包括技术。 一、技术选型总策略「 企业收益最大化」 对于前端团队，可以实现企业收益最大化的…"}, {"id": "6844904161117487118", "title": "Recoil - Facebook 官方 React 状态管理器", "desc": "说到状态管理器，轮子满天飞。在 Class 时代，redux 与 mobx 几乎占据了全部市场，几乎没有没用过 redux 的同学。随着 Hooks 的诞生，新的一批轮子应运而生，其中有代表性的有 unstated-next、constate 等等。 当然无论什么轮子，要解决的…"}, {"id": "6877794770387730445", "title": "如何拆解React巨石应用？qiankun | 🏆 技术专题第四期征文", "desc": "项目引用的npm包很多，业务代码也很多，有着向巨石应用发展的趋势。巨石应用的一些典型问题如下：构建效率低下、dev-server 占用内存大甚至内存泄露、维护成本急剧增加。 项目主框架升级成本高，要兼容旧代码。 项目里的某些业务几乎不再迭代，但每个版本依然会被打包构建，每次构建…"}, {"id": "6844903587768696839", "title": "利用Electron构建桌面应用", "desc": "只需五分钟，就会Electron。 Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和 Node.js 合并到同一个运行时环境中，打包出可以运行在Mac，Windows和…"}, {"id": "6938748693319254030", "title": "初识 React Fiber 设计 | 技术点评", "desc": "Fiber 是 React 的一种新的 reconciler 设计，这种新的架构采用 scheduling 来解决之前 stack reconciler 的一些问题以及一些历史遗留问题。React 从 v16.0.0 版本开始使用 fiber reconciler 来渲染和更新…"}, {"id": "6926431428251123725", "title": "创建一个Typescript+React项目[笔记]", "desc": "因为之前有遇到node版本过高导致一些包依赖有问题，所以我本地node版本不是很高。如果你准备用我的笔记来搭建项目，可以比我这个版本高。但是遇到一些什么问题建议自行去谷歌下～ 创建react项目和vue项目一样，两大框架都有自己的脚手架来帮助你快速创建带有基础功能的项目。因为是…"}, {"id": "6864923865412435981", "title": "React基础语法总结(二)", "desc": "这个警告是告诉我们需要在列表展示的jsx中添加一个key."}, {"id": "6844903987133562888", "title": "React进阶(1)-理解Redux", "desc": "在一些开发者眼里,项目里要是没有用到Redux,就觉得很low,要么把Redux捧得高高在上,要么说都已经快0202年了,都用React hook了,鄙视得不行,个人觉得完全没有必要. 如果改为右边的Redux处理方式,将红色圆圈组件的状态数据放到一个Store仓库当中集中进行…"}, {"id": "6981434531492397064", "title": "初学react之事件", "desc": "一、在学习react中，事件绑定是必不可少的，那么react中的事件绑定是怎样子的呢，上代码 上面代码看起来好像也还可以，没啥毛病，好像也符合我们平常的js写法，但是在react这里就有问题了，为什么"}, {"id": "6844903788680069128", "title": "[译] 在 JSX 代码中可以加入 console.log 吗？", "desc": "这样写不会在控制台打印出期望的内容。而是在浏览器上渲染出 console.log(this.props.todos) 这个字符串。 我们先来看一些很直接的解决方案，然后我们将会解释原理。 我们必须记住：JSX 不是原生的 JavaScript，也不是 HTML。它是一种语法扩展…"}, {"id": "6844903957546926094", "title": "从上传组件 引发的用React Hooks来实现的思考过程", "desc": "小明咔哧咔哧搬砖实现... 小明：卒... 小明继续改进，试试高阶组件... 小明继续搬砖..."}, {"id": "6844903741770956808", "title": "（译）React-Router4的变化", "desc": "首先，这篇文章的目的并不是为了重新叙述一遍React-Router4的文档。接下来我要说的内容，将会覆盖React-Router的大多数API，但是真正的目的是揭开React-Router4成功的模式和策略。 如果你喜欢直接看demo来了解，请点击此链接查看。 React-Ro…"}, {"id": "6844903726654685192", "title": "70个react-native flex布局栗子，肯定有你要的", "desc": "在开发中，flex布局用的非常频繁，每次使用的时候都编写自己私有的flex样式会比较麻烦。当然了，因为react-native开发中样式也是一个对象，可以预设一些常用的flex样式， 使用的时候直接用即可。 ...... 其中，对于子容器的属性，可以自己根据需要添加即可，譬如，…"}, {"id": "6844904001171898381", "title": "项目实战中的 React 性能优化", "desc": "在优化方面，Webpack 能做的很多，比如压缩混淆之类。 可以看 Webpack 官网的 IgnorePlugin 介绍，他就是拿 moment 举例子的.... 说起首屏优化，不得不提的一个就是服务端优化。现在的 SPA 应用是利用 JS 脚本来渲染。在脚本执行完之前，用户…"}, {"id": "6920479302853083150", "title": "项目工程化-通用代码生成", "desc": "最近刚刚完成了一个前端To C的项目，想着把搭建的框架抽成一个脚手架的template，说起脚手架，不得不提的就是业界的老大哥yeoman,还有就是最近几年比较火的create-react-app、vue-cli、angular-cli,相对与专业度而言，后面三款是针对于单一的…"}, {"id": "6920422554154827789", "title": "【译】React  容器组件和展示组件相分离的思想", "desc": "Presentational and Container Components. Mar 23, 2015 在编写React应用时，有一个简单的模式我觉得非常有用。如果你已经做了一段时间的React，你可能已经发现了它。这篇文章很好地解释了它，但我想再补充几点。 如果你把你的组…"}, {"id": "6844903710158487565", "title": "逐行阅读redux源码（一) createStore", "desc": "这会帮助你更快的理解。 从图中可以大概了解，通过user触发(dispatch)的行为(action)，redux会在通过middleware以及reducer的处理后更新整个状态树(state)，从而达到更新视图view的目标。这就是Redux的工作流程，接下来让我们慢慢细说…"}, {"id": "6844904179379470350", "title": "记一次react项目报文全局加密过程", "desc": "前言存在问题解决思路项目架构react+axios改造引入加解密模块crypto-browserify加解密方法封装对axios请求方法进行改造，以post方法为例koa2加解密改造加解密方法封装(基"}, {"id": "6844903837933764615", "title": "React相关知识点：关于Redux", "desc": "注：其实 A --> B --> C --> D --> E 这种情况，React不使用props层层传递也是能拿到数据的，使用Context即可。 通过 subscribe(listener) 返回的函数注销监听器。 必须拥有type属性,用来描述发生什么,action通过r…"}, {"id": "6844903736783945742", "title": "基于 Next.js 脚手架实现仿掘金编辑器", "desc": "前面写了一系列文章都是关于Next.js的，顺便还搭建了个脚手架方便使用，反正目前来看可能用Next的人不多，也无所谓啦本来就是自己为了学习才开始写文章的。以学代练，基础知识已经准备的差不多了，开始应用了～我对掘金的新建文章编辑文章内容非常喜欢，正好前一段一直在弄文本编辑器相关…"}, {"id": "6844903679099666446", "title": "盘点 React 16.0 ~ 16.5 主要更新及其应用", "desc": "大约一年前，React 团队发布了 React 16.0。时至今日，已更新到 16.5 。这其中有不少激动人心的特性(如 Fiber 架构的引入、新的周期函数、全新 Content API、Fragment、Error Boundary、Portal 等)都值得开发者跟进"}, {"id": "6844903586757885959", "title": "React 的内联函数和性能", "desc": "我和妻子近期完成了一次声势浩大的装修。我们迫不及待地想向人们展示我们的新意。我们让我的婆婆来参观，她走进那间装修得很漂亮的卧室，抬头看了看那扇构造精巧的窗户，然后说：“居然没有百叶窗？”😐 我们的新卧室；天哪，它看起来就像一张杂志的照片。而且，没有百叶窗。 我发现，当我谈论 …"}, {"id": "6844903910285508621", "title": "React 源码系列 | React Children 详解 | Children 中 key 内部生成原理", "desc": "React 中一个元素可能有 0 个、1 个或者多个直接子元素，React 导出的 Children 中包含 5 个处理子元素的方法。 源码都在 packages/react/src/ReactChildren.js 中。 map 的用法：第一个参数是要遍历的 children…"}, {"id": "6844903765187772430", "title": "「每日一瞥 📰 」0114 ~ 0118", "desc": "第 9 版 ECMAScript 标准，官方称为 ECMAScript 2018（或简称 ES2018），已于 2018 年 6 月发布。从 ES2016 开始，ECMAScript 规范每年都会发布新版本，但添加的功能少于以前的主版本。最新版本发布了 4 个新的 RegExp…"}, {"id": "6909350598979387399", "title": "用户类型判断小结", "desc": "用户类型判断ts需要进行类型推断enum类型尽可能初始直接赋值，后续维护时便于更新api请求需要放在try/catch中梳理逻辑，本例中需设置loding来确保页面加载正确，否则就出现显示Enterp"}, {"id": "6844903839632474126", "title": "使用Node+React实现简单CRUD", "desc": "这次使用react+antd+fetch写前端，node+express+mysql写后端，实现简单的react+node增删改查。 前端主要使用antdUI框架，完成数据的展示。"}, {"id": "6844903629472661517", "title": "详细介绍React模态框组件react-modal", "desc": "该组件实现了模态框的一些效果。 这是react-modal官网的配置参数。"}, {"id": "6844903496756527118", "title": "【译】2017 年 9 月：15 个有趣的 JS 和 CSS 库", "desc": "迎来了金秋 9 月，在这收获的季节，Tutorialzine 又为我们带来了哪些新鲜、有趣的前端资源呢？前端开发者们，一起来看看有木有你需要的前端库。"}, {"id": "6882627345518166024", "title": "React 状态——Redux（上）", "desc": "一个可预测的 JavaScript 应用状态管理容器（容器即为Store）。 Store：保持状态，分发状态给 View，使得 View 根据这些状态渲染不同的内容。 Reducers：响应不同的动作，负责更新 Store 中状态的 JavaScript 函数。 在 React…"}, {"id": "6844903586527182861", "title": "React源码分析", "desc": "打印一下这个组件，发现其实是一个js对象，而不是真实的dom。 我们声明了一个组件，继承了Component，它的原型上有setState等方法。 我们在react类和我们平时写的js类都一样，唯一的区别在与react类多了一个render()方法，输出类似“这是A组件”的结构…"}, {"id": "6844903914123329549", "title": "使用 React Hooks + Context 打造一个类vuex语法的简单数据管理。", "desc": "React Hooks 是目前社区非常火热的一个新的特性，vue 3.0也引入了hooks，这个特性 在 React16.8 版本正式发布。 这篇文章不过多介绍hooks的基础用法，相关的文章一大堆，个人非常推荐把精读周刊里关于hooks的文章全部看一遍。 最近公司做了一个新项…"}, {"id": "6896376551815053319", "title": "React项目搭建及React基本介绍（Class组件）", "desc": "（CRA无需安装或配置 Webpack 或 Babel 等工具。 它们是预先配置好并且隐藏的，因此你可以专注于代码，需要自定义及修改可以使用eject命令暴漏webpack配置文件） 关于npm的用法不过多介绍，自行搜索相关文档。 React应用通常使用JSX语法编写程序（不是…"}, {"id": "6844903605879717895", "title": "Guess.js：Google的数据驱动改进前端体验的工具库", "desc": "近日，Google 在 I/O 大会上推出了 Web 数据驱动工具包 Guess.js，详情请看下文。 Guess.js 是什么？ Guess.js 是在 Web 上用于实现数据驱动提升用户体验的库和工具的集合。 Guess.js 主要用于探索以下方面的数据分析驱动在用户体验中…"}, {"id": "6985173026971058190", "title": "React学习之路（1）--学习环境", "desc": "1、前言 本人是一名刚好三年经验的前端开发人员，主要的技术栈是Vue。学习react的动机有以下两点： 1、通往高级前端开发的路上React和Vue都是要精通的。 2、面试的时候选择面更广（大厂用re"}, {"id": "6985364650195943432", "title": "React State & 生命周期", "desc": "函数封装的时钟组件 Clock组件需要一个定时器每秒来更新 其实我们希望Clock组件做到自我更新，那么我们就用到了state这个属性，state与props类似，但是state是私有的，完全受控于当"}, {"id": "6844903830841196552", "title": "React Hooks了解一下？超简单入门Hooks", "desc": "以上代码写了一个简单的计数器组件，管理了一个count状态（就是一个名字叫count的数据），在组件加载完成后，执行定时器，将count状态每秒+1，在组件要被卸载之前清除定时器(不清除会一直占用内存，可能导致内存泄漏)。这里添加定时器和卸载定时器都是通过生命周期钩子来实现的，…"}, {"id": "6844903759017934856", "title": "React入门系列 - 3 state与props", "desc": "我们要认识到，React中的组件其实是一个函数，所以state是函数内部的私有变量，外部其他组件或者方法都是无法直接访问到内部的state。 而state主要被设计用于维持组件内部私有状态。 初始化state需要在class中constructor进行。 在这个代码中，我们初始…"}, {"id": "6844903602704629774", "title": "从传统动画到react动画过渡", "desc": "之前放假在家的时候，群里有一个朋友问我，有没有无缝轮播的思路，百度了一下，原来无缝轮播指的是传统轮播图中最后一张轮播图下一张是第一张轮播图，不会穿过中间的轮播图。 其实思路是很简单的，但是仔细一想这里有个不好的点，就是这句代码。 我们移动了装载图片的容器造成左移，但是最后又把它…"}, {"id": "6910583228759801863", "title": "React系列之生命周期", "desc": "提纲如下：1，说说react的生命周期？2，说说react的生命周期方法？一，react的生命周期react的生命周期分为三个阶段，分别是初始化挂载阶段、更新阶段以及卸载阶段。个人见解：不管react"}, {"id": "6844903783655276557", "title": "为什么函数式组件需要引进 React？", "desc": "在编写组件时，最让我迷惑的是在我编写纯函数组件，为什么没有在代码里面调用 React 都需要导入 React。经过一番调研，我发现是因为 JSX 转译的设定。这篇文章将会讲述我的调研经历和一点反思。"}, {"id": "6844903842866282509", "title": "react——jsx源码解析", "desc": "为了让大家深刻理解 JSX 的含义。有必要简单介绍了一下 JSX 稍微底层的运作原理，这样大家可以更加深刻理解 JSX 到底是什么东西，为什么要有这种语法，它是经过怎么样的转化变成页面的元素的。 每个 DOM 元素的结构都可以用 JavaScript 的对象来表示。你会发现一个…"}, {"id": "6844903846540492807", "title": "react.js避免在input/textareah中输入(setState)时重新渲染整个页面", "desc": "咬人猫背景：在<TextArea>的onChange方法中使用setState来保存value的话，会导致输入卡顿，原因是用户在输入时，一直在setState，导致整个页面一直重新渲染主页面：解决方法"}, {"id": "6844903497515679758", "title": "「实战」纯React实现的拖拽组件", "desc": "首先恭喜React可以“回归”开源世界，Facebook协议中夹带私货的做法实在是让人摸不着头脑。 react作为一套工具，易用程度很高，我们可以用它做出很多牛逼的玩意。那么今天我就造了一个轮子。 「拖拽组件」作为每一个平台都有的组件，已经拥有各种各样的实现，今天我为大家带来的…"}, {"id": "6857673031016251406", "title": "代数效应与React", "desc": "React核心团队成员Sebastian Markbåge（React Hooks的发明者）曾说：我们在React中做的就是践行代数效应（Algebraic Effects）。 那么，代数效应是什么呢？他和React有什么关系呢。 代数效应是函数式编程中的一个概念，用于将副作用…"}, {"id": "6995744573989322789", "title": "React 性能优化：异步渲染（时间切片&渲染挂起）", "desc": "React 15 以及之前的版本有一个主要的问题 —— 虚拟 DOM 的 diff 操作是同步完成的。 这就意味着当页面上有大量 DOM 节点时，diff 的时间可能过长，从而导致交互卡顿、没有反馈。"}, {"id": "6956524792564432926", "title": "React Hooks的学习", "desc": "1、为什么学习hooks，hooks是什么，hooks有什么作用? Hook 是React16.8的新增特性，它是一个特殊的函数，可以让你“钩入” React 的特性，可以在不用编写class组件的情"}, {"id": "6907052045262389255", "title": "React Testing Library使用总结", "desc": "React Testing Library是基于DOM Testing Library构建的，它提供了一些用于处理React components的api。(如果使用Create React App创建的项目，那么它已经支持使用React Testing Library编写测试…"}, {"id": "6997243856034988039", "title": "【青训营】- React-Redux · 极简教程", "desc": "前言: react-redux 就是为了让 redux 更好的和 react 融为一体. 其核心API 就是 Provide 和 connect, 以及 后来可以 替代 connect 的 react"}, {"id": "6934641639277199374", "title": "低代码开发平台构建实践 - Moria项目分享", "desc": "春节期间在家闲来无事，开发了一个可视化的低代码开发平台，在此分享给大家。 项目取名为 Moria，原意为托尔金的小说中矮人在中土世界建立的庞大地下城市，包含巨大的坑道网络、屋室、矿坑及大殿。在此象征该平台可构建业务复杂的庞大应用（离目标还有点远）。 项目目前只开发出了UI层，数…"}, {"id": "6872931804362309640", "title": "Antlr4 前端应用与实践", "desc": "1. 背景 在前端开发中，通常提到语法解析等功能，一般都是由后端负责提供接口，前端调用；或者如果要执行也是直接扔给服务端去处理；但是在一些特殊的情况下，譬如使用编辑器的时候，往往需要具备一些错误提醒、自动完成等的功能；虽然市面上也有现成的编辑器可以直接拿来使用，但是在一些特殊或…"}, {"id": "6844903606743744526", "title": "基于Webpack搭建React开发环境", "desc": "在任意目录下，新建一个文件夹作为你的项目文件夹，命名随意。随后使用命令行工具，切换到该文件夹，键入npm init进行初始化（遇到的问题一直回车就好了），初始化完成之后可以看到生成了一个package.json文件。 随后在该项目文件夹下新建两个文件夹：/dist和/src，其…"}, {"id": "6935615397303418894", "title": "React服务端渲染原理|中间层篇", "desc": "之前我们说过浏览器和服务端通信的时候，node作为中间层负责渲染页面，数据从真正的数据服务器中获取。 我们这里来分析一下我们前面的代码是否实现了中间层的概念。我们前面存储的src/public/index.js就是我们客户端要运行的代码，可以发现这里请求服务的接口请求的是jav…"}, {"id": "6976041931738447886", "title": "react 高阶组件HOC", "desc": "高阶组件是参数为组件，返回值为新组件的函数。 组件是将 props 转换为 UI，而高阶组件是将组件转换为另一个组件。像 Redux 的 connect 和 Relay 的 createFrag。"}, {"id": "6844903955739197447", "title": "[译]如何结合React Hooks来使用Redux", "desc": "React-redux 发布了 7.1.0 版本的 hooks 。 这意味着我们可以使用 React 的最新最佳实践。 Hooks 让我们为相同的功能编写更少的代码。我们需要编写的代码越少，我们就可以越快地启动应用程序。 这是一个非常基本和传统的 Redux 连接组件。您会如何…"}, {"id": "6844903799853678605", "title": "基于 React.js 和 Node.js 的 SSR 实现方案", "desc": "传统的服务端渲染可以使用Java，php 等开发语言来实现，随着 Node.js 和相关前端领域技术的不断进步，前端同学也可以基于此完成独立的服务端渲染。 即：当前页面的内容是服务器生成好给到浏览器的。 右键点击 -> 显示网页源代码，如果页面上的内容在HTML文档里，是服务端…"}, {"id": "6927475526202294285", "title": "细嚼慢咽 Typescript +  React17 +Eslint + Git hook 工作流", "desc": "那时候 create-react-app 还没有官方的 ts 版本。 eslint 和 tslint 还没合并在一起。 大部分项目都在用 ts-loader + eslint + tslint + webpack + babel 混用的工作流。 每次修改了一点代码，都会将 ts…"}, {"id": "6844903778928476174", "title": "[译] 延迟加载 React Components (用 react.lazy 和 suspense)", "desc": "虽然在 React 16.8.1 中终于面世的 hooks 引人瞩目，但在去年发布的 16.6.0 版本里也包含了一个吸引人的新特性，可以让我们在不依赖第三方库的情况下简化对延迟加载（lazy loading）的处理。 让我们看看如何借助这个特性改善应用性能，并构建更好的用户体…"}, {"id": "6996908762280198175", "title": "React 之 react-redux 的前世今生", "desc": "前景回忆 React下setState的同步异步渲染问题 问题1：setState是异步还是同步渲染页面？useState是异步还是同步渲染页面？ 问题2：setState 什么时候会是同步渲染页面，"}, {"id": "6976619114924245029", "title": " “这是页面书签，等我回来记得滚回原样奥”", "desc": "简单讲就是你从当前页面进行滚动浏览，当“出去一趟”再回来的时候，要复原这个滚动位置，就好像一本书的书签一样。"}, {"id": "6880101107486425102", "title": "​React太劝退，通过anu学合成事件", "desc": "相信React开发者或多或少听说过React有合成事件（SyntheticEvent）这一概念。 合成事件这块源码代码量多、耦合了很多其他逻辑，读起来很劝退。 最近刚好在改一个anu的bug，发现anu的合成事件实现的简单易懂。为什么不通过anu来学合成事件呢？ 以上是面向开发…"}, {"id": "6870061962496049166", "title": "如何定制统一规范的可快速开发前端应用框架", "desc": "最终汇总整理成一个开源项目。欢迎大家拍砖。项目地址： 还是弄一个样板项目, 放在仓库, 当有新项目时就拉下来, 揉揉改改, 更新依赖, 开干. 可是无论你采用哪种方式, 随着时间的推移, 这些项目最后都变的面目全非, 在各项目组的配置工程师的超神发挥下, 各种配置, 组件五花八…"}, {"id": "6976498230485860382", "title": "创建 React + Flask 前后端分离项目", "desc": "该教程将指引创建一个简单的，但功能齐全的 React-Flask 项目。 前置依赖 请在继续教程之前，按照说明安装这三个包。"}, {"id": "6844903544277958669", "title": "React全家桶构建一款Web音乐App实战（五）：歌曲状态管理及播放功能实现", "desc": "什么是Redux？Redux是一个状态的容器，是一个应用数据流框架，主要用作应用状态的管理。它用一个单独的常量状态树（对象）来管理保存整个应用的状态，这个对象不能直接被修改。Redux中文文档见http://www.redux.org.cn 在我们的应用中有很多歌曲列表页，点击…"}, {"id": "6844903800650596365", "title": "React中的受控组件和非受控组件学习总结", "desc": "故事：Form表单是前端开发过程中经常使用的功能， 在使用react 表单时，都会遇到受控组件或者非受控组件。当我听到这两个关键词的时候确实有点懵逼，不知道啥意思，因此记录下来，作为自己的学习目标 1. 可以通过在初始state中动态设置value值 2. 每当表单的值发生变化…"}, {"id": "6954288467874414628", "title": "React 入门", "desc": "React入门 安装官方脚手架 ，后边的脚手架更加好用，但由于官方推荐开始先试试 初始化—创建项目 运行 JSX:看起来是js和html的混合体，但实际上html也是由js实现 组件定义 state和"}, {"id": "6844904069740363789", "title": "面试官我想做个Reacter(React路由)", "desc": "欢迎关注公众号，大家一起共同交流和进步。"}, {"id": "6930237506747269127", "title": "React Redux", "desc": "用户通过action creator创建action并派发dispatch action。 store收到之后自动调用相应的reducer，传入当前的state和收到的action，返回新的state。 state一旦发生变化，会调用监听函数，通知订阅了store的组件（sto…"}, {"id": "6949420944901275655", "title": "理解React中key的作用", "desc": "这个问题涉及react渲染机制和diff算法，在state或props变化的情况下，会造成渲染。渲染时会生成新的虚拟dom，react根据规则对新旧虚拟dom进行对比，更新变化的部分。 • 递归对比子节点，当子节点是列表时，通过key和props来判断。如果key一致，则更新和…"}, {"id": "6844903737530515470", "title": " [译]React高级话题之Context", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 在典型的React应用中，数据是通过props，自上而下地传递给子组件的。但是对于被大量组件使用的固定类型的数据（比如说，本地的语言环境，UI主题等）来说，这么做就显得十分的累赘和笨拙。Context提供了一种在…"}, {"id": "6920843987876053006", "title": "[译]写给Vue用户的React指南", "desc": "在过去的三年里，我在不同项目中使用 React 和 Vue 。 上个月我写了一篇文章 《为什么我相比vue更喜欢React》。后来我参加了 Adam Wathan 的《Full Stack Radio》（一个podcast访谈）。谈起了从一个Vue开发者的观点看React。 我…"}, {"id": "6921184040737308680", "title": "React Server Component 可能并没有那么香", "desc": "前段时间 React 团队发布了一项用于解决 React 页面在多接口请求下的性能问题的解决方案 React Server Components。当然该方案目前还在草案阶段，官方也只是发了视频和一个示例 demo 来说明这个草案。 官方在视频和 RFC 中说明了产生这个方案的主…"}, {"id": "6844903589647745032", "title": "React Render Props 模式", "desc": "Render Props模式是一种非常灵活复用性非常高的模式，它可以把特定行为或功能封装成一个组件，提供给其他组件使用让其他组件拥有这样的能力，接下来我们一步一步来看React组件中如何实现这样的功能。 1. 组件普通数据传递 下面的代码很平常，我们绝大多数代码都是这样。 2.…"}, {"id": "6844903838676172807", "title": "react基础学习和react服务端渲染框架next.js踩坑", "desc": "React作为Facebook 内部开发 Instagram 的项目中，是一个用来构建用户界面的优秀 JS 库，于 2013 年 5 月开源。作为前端的三大框架之一，React的应用可以说是非常的广泛。这里讲一个react服务端渲染的框架-next.js踩坑过程。 react基…"}, {"id": "6844903708933750797", "title": "hippy-react 三端同构 — 路由", "desc": "1. 背景介绍 Hippy 提供了 Navigator 组件，用于页面导航、跳转。 但是 Navigator组件有比较大的局限性， 该组件通过启动一个新的 Hippy 实例实现，在 2.0 下实例之间可能无法互相通信，iOS 上也必须作为根节点包裹所有子组件，使用有很大限制。 …"}, {"id": "6844903602234851341", "title": "在React中index作为key是反模式的", "desc": "我们都知道在React中，在渲染相邻同级元素(siblings)时需要给每一个item指定相应的key作为唯一标识符，如一组li,为了方便在页面发生变化是，即render树进行diff时，没有发生变化的element就不做更改。 但是在使用key的时候，很多人都习惯用列表的索引…"}, {"id": "6844903625462906893", "title": "理解 es7 async await", "desc": "开始进行 react 项目，需要用到 es7 的 async 和 await 来替代以前的 promise 的方法q请求接口。在这里学习一下和大家一起分享。 在讲 promise 之前我们也需要先了解一下，我们平时在处理接口成功和失败的时候的处理方法如下。👇 如果我们有多个异…"}, {"id": "6844903730899484686", "title": "手把手带你上react-router的history车", "desc": "接上一篇history源码解析-管理会话历史记录，本篇教你手写history，重在理解其原理。 history是由Facebook维护的，react-router依赖于history，区别于浏览器的window.history，history是包含window.history的…"}, {"id": "6844903689291825165", "title": "像 vuejs 一样，watch React组件props变化", "desc": "A higher-order component that adds watch props features to the react component https://github.com/hellosean1025/watch-props"}, {"id": "6844903677300326414", "title": "[译]基于create-react-app打造代码规范化的React项目", "desc": "前端开发规范的执行要由上到下，软硬兼施，除了成员们要有自觉性，最好在项目中配置代码规范化/格式化工具。我在配置这些工具时，踩了不少坑，后来看到这篇文章。从头到尾，轻松地将所有工具配置好。推荐规范化的项目，拒绝杂乱无章的代码风格，Keep your code clean!"}, {"id": "6844903741687234567", "title": "下一代状态管理系统 - Ractor", "desc": "Ractor 仅仅包含三个基本概念，您只需要熟悉这三样东西就能彻底掌握 Ractor 的用法。 和其他库有所区别， Ractor 的事件系统和逻辑系统是分开的，需要单独创建。一般情况下，您只需要为你的 App 创建一个事件系统。 类似 Redux 的 action，不过 Rac…"}, {"id": "6844903814307250190", "title": "精读《react-easy-state 源码》", "desc": "1. 引言 react-easy-state 是个比较有趣的库，利用 Proxy 创建了一个非常易用的全局数据流管理方式。 上手非常轻松，通过 store 创建一个数据对象，这个对象被任何 React 组件使用时，都会自动建立双向绑定，任何对这个对象的修改，都会让使用了这个对象…"}, {"id": "6915262894632337416", "title": "react 模版文件", "desc": "前言react模版文件,每次写组件需要复制的模版内容01.class类型的jsx02.function类型的jsx03.class类型的tsx04.function类型的tsx"}, {"id": "6844903694215938062", "title": "React最佳实践尝试（二）", "desc": "配置完成之后，接下来就要考虑打包启动以及前后端同构的架构方面的问题了。 首先我的整体思路是：根据webpack.ssr.config.js配置文件，将前端代码打包进node层供node做SSR使用，然后前端正常启动webpack-dev-server服务器即可。 这样基本上we…"}, {"id": "6976961196607930381", "title": "美化一下我们的Antd菜单吧，让每次点击都有波纹效果", "desc": "效果就是宁缺毋滥的，有时恰到好处的点缀，会起到意想不到的效果，内外兼修，才是最佳的实现，赶紧加上试试。"}, {"id": "7002600031643500581", "title": "react hooks 实践总结", "desc": "背景 hooks对我们习惯了生命周期的前端同学来说，有一些很难理解的地方，e.g. 1 什么是side effect？ 2 hooks如何调用组件生命周期的钩子？ 3 为什么需要手动优化性能，怎么手动"}, {"id": "6995396219161804831", "title": "react 函数式组件和类组件引发对于 props 和 this.props 可变不可变的探讨。", "desc": "前言 当我在网上搜这个问题 函数式组件和类组件的区别 的时候，看到的都是关于大神这篇文章的复制，最主要的一个问题就是讨论就是类组件的 this 是可变的，函数组件的 props 是不可变的。"}, {"id": "7002534244471799839", "title": "React进阶  | 8月更文挑战", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 DRY原则：Don't Repeat Yourself React 组件，单一职责原则 每个组件只做一件事； 如果组件变得复杂，那么应该拆分"}, {"id": "6844903750713212942", "title": "[译] 为什么我放弃了 React 而转向 Vue。", "desc": "最近，在 Github 上 Vue.js 比 React 获得更多的 star。该框架受欢迎程度近期飙升，并且由于它并没有类似于 Facebook（React）或者 Google（Angular）这样的公司支持，看到它从不知名的地方崛起，着实让人惊讶。 回顾过去的光辉岁月，在 …"}, {"id": "7002560403402129415", "title": "React中为什么要绑定事件", "desc": "先看看下面的例子： 在将 man 绑定到 foo 之前，foo 是一个常规函数，没有引用 'name'，因此，当你调用 this.name时，它不会打印任何内容。 但是，当我们将 man绑定到 foo"}, {"id": "7003590781776691230", "title": "useState 更新流程", "desc": "从源码角度查看有趣的 useState 的更新流程（触发更新到 state 保存是详细介绍，其他简略），做个学习记录"}, {"id": "6951300894684577823", "title": "使用 Tailwind CSS 一年后，我的一些感受", "desc": "Tailwind CSS 在过去两年的流行程度一直保持一个高速增长的态势，尤其是2020年，更是各大论坛/社区热烈讨论的话题。"}, {"id": "6844904101445124110", "title": "详解 useCallback & useMemo ", "desc": "本文详细的讲述了 useCallback 与 useMemo 的使用场景，以及有哪些使用中常遇到的问题与采坑点。"}, {"id": "6972899857518313509", "title": "带你手写一套React Hooks好不好？ 简单易懂不怕面试被问的那种（二）。", "desc": "这次写 useEffect 和 useReducer 了。 放心吧，到这比看官网要管用得多。 加油加油加油！"}, {"id": "6844903748351819790", "title": "五星推荐的系列文章清单", "desc": "按课程小节整理了 Dan Abramov 两套课程的代码，已上传 github。Building React Applications with Idiomatic Redux 课程中，有部分老旧的代码，在 router v4 下不能正常运行，在这份练习代码中，支持了 v4。 …"}, {"id": "7000978370116714526", "title": "React 项目搭建记录", "desc": "创建项目 安装eslint 初始化一个eslint文件 我们可以根据项目的需求，来选则相应的配置。执行完毕之后可以看到项目的根目录多了一个 .eslintrc.js 文件。 Eslint 支持多种格式"}, {"id": "6982010092258328583", "title": "React 18 中新的 Suspense SSR 架构", "desc": "概述 React 18 将包括对 React 服务器端渲染（SSR）性能的架构改进。这些改进是实质性的，并且是几年来工作的结晶。这些改进大多是在幕后进行的，但有一些选择性机制你需要注意，特别是如果你不"}, {"id": "6994355922399297549", "title": "React源码系列之七：React的合成事件", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第七篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "7003302799714811918", "title": "input type=\"file\"相同文件只能触发一次onChange", "desc": "input type=\"file\" 发现问题： 当上传不同的图片时，事件触发正常，但是上传刚刚上传过的图片，事件不触发。 分析问题： onChange事件的触发标准是value值发生变化。所以每次操作"}, {"id": "7000024775061930015", "title": " React Router 全面整理", "desc": "1. 使用说明 React router 只是一个核心库，在具体使用时应该基于不同的平台要使用不同的绑定库。比如：我们要在浏览器中使用"}, {"id": "6994952865131266079", "title": "React电商项目--01项目搭建", "desc": "一、使用create-react-app脚手架搭建项目 项目运行成功 配置webstorm支持react语法提示 删除项目不必要的文件 在index.html中加入一些移动端的适配属性 开始配置 二、"}, {"id": "6844903583859621901", "title": "3月前端知识集锦", "desc": "JS相关深入理解javascript原型和闭包EventLoop必知必会（六道题）网络现状：性能提升指南【网络协议】Web协议未来优化指南不要混淆nodejs和浏览器中的eventloopJavaSc"}, {"id": "6844903587043082247", "title": "面试官:既然React/Vue可以用Event Bus进行组件通信,你可以实现下吗?", "desc": "本文标题的题目是由其他问题延伸而来,面试中面试官的常用套路,揪住一个问题一直深挖,在产生这个问题之前一定是这个问题. 我们大体上都会有以上回答,接下来很可能会问到如何实现Event(Bus),因为这个东西太重要了,几乎所有的模块通信都是基于类似的模式,包括安卓开发中的Event…"}, {"id": "7001534599448756231", "title": " 记一次基于react项目的一次优化", "desc": "按需加载 随着生产项目的持续功能迭代，前端代码体积会不断增加，导致加载时间越来越长。 其实我们看build出来的文件就不难看出其实他把我们的所编写的代码模块大部分都打包到一个文件中 为了减少加载时间，"}, {"id": "6844903956146028557", "title": "React学习笔记（二）—— 事件、this指向、数据赋值", "desc": "在render中创建一个button按钮，绑定事件跟js是一样的，都是onClick，但是不能用\"\"，要用{}。 如果添加了（）表示执行方法，页面加载的时候直接执行。 这样时候的this指向这个组件。也可以在return中添加{}，在{}中写js，如： 注意console.lo…"}, {"id": "6844903543451680776", "title": "Advanced-react-patterns(2)", "desc": "文本是 ADVANCED-REACT-PATTERNS 第二篇。 首先外层是一个 Toggle组件，包括着内部的子组件。因为外层组件包裹的命名比较清晰。 注意这中间有不太常见的组件使用方式。 Toggle组件是一个 component 类, On 是它的属性，不过既然作为组件使…"}, {"id": "6844903619062415367", "title": "关于一次线上出错的思考--如何规避线上程序崩盘", "desc": "近日在工作中由于疏忽问题导致某个客户的系统直接崩盘，极大的影响了用户使用产品的体验。在经过修改之后，不得不思考下在日常开发中的一些坏习惯以及如何规避这些日常问题了。"}, {"id": "6844903591480655886", "title": "[译] 使用 React、Redux 和 SVG 开发游戏 - Part 2", "desc": "TL;DR: 在这个系列里，您将学会用 React 和 Redux 来控制一些 SVG 元素来创建一个游戏。通过本系列的学习，您不仅能创建游戏，还能用 React 和 Redux 来开发其他类型的动画。源码请参考 GitHub 仓库：Aliens Go Home - Part …"}, {"id": "6844903983656468493", "title": "[译]React核心概念3：组件&props", "desc": "概念上来说，组件就好像是JavaScript里的函数。它们能够接受任意的入参（称作props）并返回描述屏幕展示UI的React元素。 定义组件最简单的方法就是写一个JavaScript函数。 不用担心，这是一个可使用的组件，因为它接收了一个带有数据的props（也可以用pro…"}, {"id": "6844903510408953864", "title": "React.js 小书 Lesson3 - 前端组件化（二）：优化 DOM 操作", "desc": "看看上一节前端组件化（一）：从一个简单的例子讲起我们的代码，仔细留意一下 changeLikeText 函数，这个函数包含了 DOM 操作，现在看起来比较简单，那是因为现在只有 isLiked 一个状态。由于数据状态改变会导致需要我们去更新页面的内容，所以假想一下，如果你的组件依"}, {"id": "6844903569494114318", "title": "Render Props - New pattern in React", "desc": "在软件开发的过程中Code Reuse和可读性一直是开发人员致力于解决的问题，在React社区中，以往出现了很多的Pattern来解决这个问题，例如Mixin，HOC等等。Render Props是React社区中里提出的另外的一种Pattern。由React Router的C…"}, {"id": "6844903635747356680", "title": "Redux源码分析--Reducer篇", "desc": "前两篇文章分别分析了Redux中间件，以及Redux的数据中心的源码，如今已经对Redux这个库有一定程度的了解了。目前可以说主菜都已经上齐了，剩下的只能算是饭后甜点了，而今天的甜点是combineReducers这个函数。 1. 模块化reducer 我们写代码的时候也有这种…"}, {"id": "6844903501596737543", "title": "Preact 源码解析之元素创建流程", "desc": "Preact 作为实现大部分 React 的接口，并且专注于轻量的框架。本文作为 Preact 源码解读系列的第二篇，比较简短，将介绍 Preact 如何将 JSX 代码转义成 DOM 输出的流程"}, {"id": "6844903497347891207", "title": "Redux 的问题：React、MobX 和 Realm 能解决吗？", "desc": "没有任何工具对于每一种情况都是完美的，并不建议彻底放弃 Redux。Redux 很棒，但随之而来的是创建附加的样板代码，所以业界出现很多整合的开源方案，或者干脆尝试一下 MobX。总之，选择最合适的方案，就像是 Redux 的作者写到的，你可能不需要 Redux。"}, {"id": "6844903846540492813", "title": "前端小知识10点（2019.5.18）", "desc": "本人实际上是less文件里多写了个逗号。。。。😅 onKeyDown 事件的 ctrlKey 是 control 键，keyCode=13 是 enter 回车键。"}, {"id": "6844903640600150029", "title": "React-Demo 部分重构", "desc": "最近在做从vue=>react的迁移性学习，然后找到了阮一峰老师在15年写的《React入门实例教程》，讲的内容丝丝入扣，里面所透露的思想也让我收获颇多。 关于react的安装不再多表，因为想快速的开始练习。我用的是create-react-APP这个脚手架帮助安装 这只是我的…"}, {"id": "6844903497071067150", "title": "react 生命周期方法模拟器", "desc": "可以通过输入props或state参数来观察生命周期方法的运行情况。"}, {"id": "6844903983652274189", "title": "[译]React核心概念2：渲染元素", "desc": "不想浏览器的DOM元素，React元素是便于构建的普通对象。React DOM负责更新DOM以匹配React元素。 因为在标签内部的所有元素都由React DOM管理，所以我们将这个<div>标签称作根节点。 使用React构建的应用通常有一个单独的根DOM节点。但如果您要在现…"}, {"id": "6844903866643775502", "title": "react组件中的this的一点理解", "desc": "this.handleClick2 指向当前组件的 handleClick2 这个函数, 而此时 this.handleClick2 中这个 . 点返回的不是一个函数，而是一种特殊的引用类型的值(this,\"handleClick2\",true), 此时再去调用 handleC…"}, {"id": "6844903613400104968", "title": "RSUITE (React Suite) is a set of react component libraries for enterprise system products", "desc": "RSUITE (React Suite) is a set of react component libraries for enterprise system products. Built by HYPERS front-end team and UX team, main…"}, {"id": "6844903560417640462", "title": "【译】如何使用statecharts来模拟redux应用的行为", "desc": "事实证明，这种描述状态和从一个状态转变为另一个状态的事件的想法是一个深入研究的概念。例如，StateCharts提供了描述被动应用程序行为的可视化形式，例如用户界面。 在本文中，我将讨论如何将Redux应用程序的行为从组件，容器或中间件（我们通常保留这种逻辑的地方）中解耦出来，…"}, {"id": "6844903636007387150", "title": "React的组件模式", "desc": "受到我正为Meetup准备的技术分享启发，我打算花些时间分享下我所了解的React组件模式。组件是React的核心，因此了解如何利用它们对于构建优秀的设计结构至关重要。什么是组件根据React官网的介"}, {"id": "6844903504910221320", "title": "zzz周刊-第1024期-千与千寻", "desc": "要闻ZEIT – Next.js 4: React 16 and styled-jsx 2本周发布的 Next.js 4 版本全面支持 React 16，并且针对其内置的样式引擎 styled-jsx 进行了更新，添加了对于动态样式的支持。而在迁移到了新的 React 版本之后…"}, {"id": "6844903501215039495", "title": "使用 Dawn 构建 React 项目", "desc": "开发一个 React 项目，通常避免不了要去配置 Webpack 和 babel 之类，以支持 commonjs 或 es 模块及各种 es 新语法，及进行 jsx 语法的转义。当然也可以用 create-react-appp 脚手架快速创建一个 react 项目，但与此同时 …"}, {"id": "6997219450378256414", "title": "ahooks 源码解读系列 - 3", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6844903753200451592", "title": "[译] React 16.6 懒加载(与预加载)组件", "desc": "React 16.6添加了一个新的特性: React.lazy(), 它可以让代码分割(code splitting)更加容易。 接下来通过一个股票App Demo， 来学习如何使用React.lazy这个新特性并了解为什么要使用它。 我们创建了一个股票Web App，App展…"}, {"id": "6985425164976521253", "title": "组件实例的三大核心属性——state、props、refs", "desc": "组件实例的三大核心属性——state、props、ref学习笔记 对state、props、ref的理解及例子"}, {"id": "6844904162497757192", "title": "React + TypeScript 从零开发Popup组件并发布到 npm", "desc": "上篇文章中介绍了如何从 0 到 1 搭建一个 React 组件库架子，但为了一两个组件去搭建组件库未免显得大材小用。 这次以移动端常见的一个组件 Popup 为例，以最方便快捷的形式发布一个流程完整的 npm 包。 如果对你有所帮助，欢迎点赞 Star 以及 PR。 如果有所错…"}, {"id": "6919667933861904392", "title": "React Hooks（四）： immutable", "desc": "正值 tuple&#x26;record 进入 stage2，正好将放了半年的草稿更新一波。 对于比较复杂的 React 单页应用，性能问题和 UI 一致性问题是我们必须要考虑的问题，这两个问题和 React 的重渲染机制息息相关。本文重点讨论如何控制重渲染来解决 React …"}, {"id": "6997676565425455135", "title": "React 路由（一）", "desc": "#注：大量截图动图。 一 基础路由 （1）路由链接：Nav和NavLink是Nav NavLink是Nav的一个特定版本，NavLink可以有高亮的效果，可以设置选中的className. 可以看出 "}, {"id": "6889824743889829902", "title": "React Hooks系列】之useRef", "desc": "由于React的函数式组件使用起来方便（对比class组件），我将重点使用函数组件来运行开发。在这系列博客中，我将分享我所学到Hook系列API的知识。 useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回…"}, {"id": "6844903905382367245", "title": "谈谈React事件机制和未来(react-events)", "desc": "当我们在组件上设置事件处理器时，React并不会在该DOM元素上直接绑定事件处理器. React内部自定义了一套事件系统，在这个系统上统一进行事件订阅和分发. 具体来讲，React利用事件委托机制在Document上统一监听DOM事件，再根据触发的target将事件分发到具体的…"}, {"id": "6977526737076912136", "title": "React Hook组件在销毁的时候进行业务处理", "desc": "开发场景： 当我们使用react的hook组件的时候想要在组件销毁的时候做一些事件， 解决方案： 我们可以使用react的Effect hook， Effect hook的第一个参数可以return一"}, {"id": "6889825025638006797", "title": "Vue转React两个月来总结的性能优化方法", "desc": "换了新公司，工作中使用的技术栈也从Vue换到了React，作为一个React新人，经常的总结和思考才能更快更好的了解这个框架。这里分享一下我这两个月来使用React总结的一些性能优化的方法。 因为目前公司的项目是全面拥抱hooks的，所以只会涉及function组件写法，不包含…"}, {"id": "6993847676999729182", "title": "React hooks 之 React.memo useMemo useCallback", "desc": "先说一句，react hooks里，大多情况下比较都是浅比较，比如useEffect的浅比较是使用Object.is(arg1, arg2)来比较两个值，想必其他钩子也是如此，这种情况下，如果是基本类"}, {"id": "6934136033970028551", "title": "从零开始搭建一个React项目", "desc": "$\\quad$ 在项目所在路径，使用create-react-app . --template typescript创建项目，注意：项目名称中不能包括大写字符。 执行 yarn start命令，yarn就会帮我们打开浏览器窗口，看到我们自己的项目。如下图： 即可阻止弹窗。 内置…"}, {"id": "6989955213280935943", "title": "React中开启代理的两种方式", "desc": "react开启代理的两种方式 先说一下为什么需要代理？ 先说一下为什么需要代理？比如说，在本地写一个端口为5000的服务器时，当我们通过端口3000去发生请求，会出现跨域的问题"}, {"id": "6961226488066605064", "title": "从 React 源码中学到的非递归先序遍历和后序遍历算法", "desc": "在计算机学科中，树的遍历算法是数据结构课程的基础内容。掌握先序遍历和后序遍历对理解 React 内部流程非常有帮助，比如：React 调和阶段是先序遍历（先执行父组件的 Render，再执行子组件的。"}, {"id": "6844903944796258317", "title": "解析React Diff 算法", "desc": "传统的diff算法是使用循环递归对节点进行依次对比，复杂度为O(n^3),效率低下。 针对树结构(tree diff)：对UI层的DOM节点跨层级的操作进行忽略。（数量少） 针对组件结构(component diff)：拥有相同类的两个组件生成相似的树形结构，拥有不同类的两个组…"}, {"id": "6942687170800910350", "title": "搭建React源码调试环境", "desc": "1. 搭建项目 2. 克隆源码 v17.0.2 3. 将源码放在 src 目录下 debug-react/src 4. 修改 webpack alias 配置文件 debug-react/config/webpack.config.js 5. 配置webpack和eslint中…"}, {"id": "6844903903981469703", "title": "Redux with Hooks", "desc": "React在16.8版本为我们正式带来了Hooks API。什么是Hooks？简而言之，就是对函数式组件的一些辅助，让我们不必写class形式的组件也能使用state和其他一些React特性。按照官网的介绍，Hooks带来的好处有很多，其中让我感受最深的主要有这几点： 函数式组…"}, {"id": "6975077361779736606", "title": "用react脚手架写了一个无趣且无用demo", "desc": "记录一下第一次用react脚手架写了一个demo的过程。一个可以改变图标颜色，动画效果的demo。。。"}, {"id": "6999432773719031839", "title": "React进阶系列之数据流", "desc": "数据流 React 的核心特征是 数据驱动视图，这个特征在业内有一个非常有名的函数式来表达： React 的视图会随着数据的变化而变化，我们说的组件通信其实就是组件之间建立的数据上的连接，这背后是一套"}, {"id": "6959822036550041613", "title": "基于react+antd+dva 构建后台管理系统", "desc": "hello，大家好今天让我们来搭建个基于react的前端系统架构吧！主要使用react脚手架+antd+dva"}, {"id": "6844903966736646157", "title": "React Hooks最佳技术实践（一）", "desc": "React 16.8版本发布于2019年2月6号，它带来了Hooks特性，能够让我们不编写class的情况下也能使用state以及其他的React特性。一个新技术的诞生必然会影响原来的思维模式，在最初的应用中也会碰见很多意想不到的场景和陷阱，这就需要我们在使用他们前清楚的知道哪…"}, {"id": "6844903905504002062", "title": "生产模式下禁止React Developer Tools、Redux DevTools的使用", "desc": "React Developer Tools、Redux DevTools 可以给开发人员在研发阶段调试程序带来极大的方便。 但是，很多人忽略了一点：上了生产环境后，把一些代码细节轻易让外部人员获取，并不是好事。 在此基础上，遍历所有window.__REACT_DEVTOOLS…"}, {"id": "6844903709558718472", "title": "前端 SPA 单页应用数据统计解决方案 (ReactJS / VueJS)", "desc": "下面： 我们就将待验证的场景实现出来看看，到底会不会触发。 这样类似一个拦截器一样，在路由跳转之前把 百度统计的代码再次家再一次。 同样，Vue-router 的项目也是类似。"}, {"id": "6883099149517094926", "title": "从class到hooks,让你顺利过渡", "desc": "一、ReactHooks之前class组件的写法     基于组件化的开发是当前前端项目中最基本的概念之一。在Hooks提出之前，React项目中写组件的两种形式分别为：函数式组件和Class类组件。"}, {"id": "6844903501290536967", "title": "React 的性能优化（一）当 PureComponent 遇上 ImmutableJS", "desc": "在我们的印象中，React 好像就意味着组件化、高性能，我们永远只需要关心数据整体，两次数据之间的 UI 如何变化，则完全交给 React Virtual Dom 的 Diff 算法 去做。以至于我们很随意的去操纵数据，基本优化shouldComponentUpdate 也懒得…"}, {"id": "6908215061576318983", "title": "(翻译)深入了解：React hooks是怎么工作的", "desc": "从根本上说，hooks是一种相对简单的方式去封装状态行为和用户行为。React 是第一个使用 hooks 的，然后广泛地被其他框架所接受，比如：Vue、Svelte，甚至在一般的js函数。但是，hooks 函数式的设计需要对javascript的闭包有一个深刻的理解。 这里，我…"}, {"id": "6844903821496287245", "title": "React 中无用但可以装逼的知识", "desc": "最近看了Dan Abramov的一些博客，学到了一些React的一些有趣的知识。决定结合自己的理解总结下。这些内容可能对你实际开发并没有什么帮助，不过这可以让你了解到更多React底层实现的内容以及为什么要怎样实现。可以让你跟别人有更多的谈资，当然，也可以在某些场合装一下逼。那…"}, {"id": "6890720764505358344", "title": "[译]全栈 Todolist-client 篇(React Typescript)", "desc": "在 server 文件夹平行目录下，直接使用 create-react-app 的 typescript 模板来创建。 最终的代码可以按照这个顺序查看,1-5的顺序查看，master 汇集了最终的完善的代码。 也可以观察集群的具体数据，点击 METRICS 还有更详细的图表，c…"}, {"id": "6901310912347504648", "title": "React学习日记", "desc": "如果我们需要使用 JSX，则 标签的 type 属性需要设置为 text/babel。"}, {"id": "6844903661366165512", "title": "React高级指南之高阶组件", "desc": "这个需要大家对diff算法有所了解，如果从 render 返回的组件等同于之前render函数返回的组件，React将会迭代地通过diff算法更新子树到新的子树。如果不相等，则先前的子树将会完全卸载。 高阶组件可以把所有属性传递给被包裹组件，但是ref除外，因为ref不是一个真…"}, {"id": "6844903696908697608", "title": "【译文】构建大型 Redux 应用的五个建议", "desc": "为什么翻译这篇文章，是因为本文中给出的建议和我在实际项目中的实践不谋而合，更彻底也更优秀。所以特别想分享给大家。 当项目规模逐渐增大之后，入门文档和教程级别的项目代码的局限性会逐渐显现出来，并且你会遇到在小型应用中不会遇到的问题。更致命的地方在于，如果想要解决这些问题，需要对整…"}, {"id": "6844903518826938382", "title": "如何提高你的 React 应用的性能", "desc": "本文旨在总结常见的性能缺陷，以及如何来避免这些缺陷。 性能问题在web应用开发中不是什么新鲜事。 我们每个人都有这样的时刻，当你把一个新的Component组件放到你的app中，你会突然发现你尝试的每一个用户交互动作都与期望的效果有很明显的滞后。有时，你可以重复使用多个同样的组…"}, {"id": "6844903534689796110", "title": "基于React的大文件上传组件的开发详解", "desc": "对于一个中小型企业的小项目或者个人项目来说，使用第三方的存储服务也许昂贵了点，且如果上传的文件涉及到隐私的话也是不安全的（各种方案都是因项目而异的）。本文主要讲解在不使用WebUploader，plupload等库的情况下，使用html5的File API来解决大文件上传的问题…"}, {"id": "6844904116523630600", "title": "基于 React、TS 的聊天室 monorepo 实战", "desc": "最近在思考如何编写高质量的 React 项目，刚好接到聊天室的需求，于是决定写一篇关于 React、TS 的实战教程，采用 monorepo+lerna 管理包。如何关注代码质量与规范的同时，快速实现需求。 接下来，带着大家快速开发一个 Web 版聊天室。心急的小伙伴可以直接看…"}, {"id": "6844903876882071560", "title": "react+web版聊天|仿微信网页聊天实战", "desc": "采用react全家桶技术 react+react-dom+react-router-dom+redux+react-redux+nodejs等技术混合开发的仿微信web端聊天室reactWebChat项目，实现了聊天记录右键菜单、发送消息、表情(动图)，图片、视频预览，浏览器截…"}, {"id": "6844903984893788167", "title": "React路由实现项目中的导航栏功能", "desc": "一.前言之前我有介绍过使用vue路由来实现项目中的导航栏功能,在本案例中将以最基本的启发模型来使用React路由实现同样的功能,除此之外我还会介绍React的脚手架二.React脚手架我使用的开发工具"}, {"id": "6844904104066547726", "title": "React Hook源码解析（一）", "desc": "React Hook已经正式发布了一段时间了。我在项目中也进行过尝试，一个很直观的感受：写起来很爽。但是一直没有深入了解过其实现原理。本文将尝试从源码层面，了解React hooks的原理。本文所指的React版本为：v16.12.0 Hook 是 React 16.8 的新增…"}, {"id": "6844903892522631175", "title": "React中setState的用法", "desc": "这种方式是我们最常用到的修改state的方式. 将setState()认为是一次请求而不是一次立即执行更新组件的命令。为了更为可观的性能，React可能会推迟它，稍后会一次性更新这些组件。React不会保证在setState之后，能够立刻拿到改变的结果。 setState()不…"}, {"id": "6844903593791717384", "title": "Fabric - 构建在线图片编辑器", "desc": "编辑器和图库的整合，使得设计变得更加容易了。项目的初心也很明确，回馈给社区一份好的设计工具，提高设计圈的创造力。 目前的版本有裁剪、文本、滤镜三种功能，后期还会继续迭代，用来增强用户体验和丰富功能。 整个项目是围绕React + Fabric.js来构建的，此外还使用了Redu…"}, {"id": "6935019757028507678", "title": "在 React 中实现 keep alive", "desc": "什么是keepalive在Vue中，我们可以使用keep-alive包裹一个动态组件，从而缓存不活跃的实例，而不是直接销毁他们：这对于某些路由切换等场景非常好用，例如，如果我们需要实现一个列表页和详情"}, {"id": "6844904048362160136", "title": "《深入浅出React和Redux》学习笔记（一）", "desc": "编译完成后，浏览器会自动打开一个网页，指向本机地址：http://localhost:3000/. React的首要思想是通过组件(component)来开发应用。 组件(component):能够完成某个特点功能的独立的、可重用的代码。 基于组件的应用开发是广泛使用的软件开发…"}, {"id": "6945088810111893511", "title": "如何实现自己的react（3）组件", "desc": "一开始完全没有任何参照的时候，我自己想着“要如何实现react的组件”，着实有些摸不着头脑。先从比较简单的函数式组件开始： 根据控制台信息，我们可以发现当传入函数组件时，vDom的tag从字符串变成了一个函数，这个函数就是我们自定义的函数组件，而attrs就是我们要传入的pro…"}, {"id": "6844903510530588686", "title": "基于flux和observer相结合的思想的数据管理器", "desc": "Redux和MobX是前端领域最前沿的两个状态管理library，前者遵循Flux思想，后者独树一帜，不过可以认为继承了observer思想。这篇文章基于对这两种思想和两个库的讨论，提出了一种管理数据的思想，以应对特殊情况下对数据管理的需求。"}, {"id": "6864877515006017550", "title": "初始React", "desc": "假设有一个需求，点击按钮改变文本的值。 render的第一个参数如果需要换行的话一般会加上()，第一个参数必须是一个dom节点，不能多个节点，否则报错。上面的h2标签和button标签都被包括在div中，div作为一个根节点。"}, {"id": "6945004048391077918", "title": "react学习笔记(自己看)", "desc": "虚拟DOM的工作原理是通过js对象模拟DOM节点。为了提升代码的抽象能力、避免人为的DOM操作、降低代码整体风险等因素引入了虚拟DOM。 虚拟DOM就是Plain Object。以React为例，render函数中JSX会被babel编译成React.createElement…"}, {"id": "6844904003545858062", "title": "如何用一个定时器维护多个需要实时更新的效果", "desc": "之前在做一个IM的模块，有一个撤回消息后两分钟之内可以重新编辑的功能，项目是用react做的，按照正常的思路，只需传入一个消息撤回的时间markTime，然后用现在时间Date.now()去判断是否已经超时两分钟。然而理想总是美好的，由于没有去触发react的重新渲染机制，即使…"}, {"id": "6844903549873504270", "title": "如何在React组件“外”使用父组件的Props？", "desc": "在写SDK项目的时候碰到一个问题：在直播间初始化SDK时使用默认主题，在专题页初始化SDK时使用其它主题。默认主题在打包时挂在全局环境下供多个页面使用，定制主题需要在初始化SDK的时候传入。 实现起来很简单，判断是否有定制主题，有就使用定制主题，没有就使用默认主题。项目下的基本…"}, {"id": "6844903568034660365", "title": "用 jest 单元测试改善老旧的 Backbone.js 项目", "desc": "对于早期的前端 SPA 项目，Backbone.js + Require.js 是一种常见的技术组合，分别提供了基础的 MVC 框架和模块化能力。 对于这样的既有项目，在之前的文章中也进行过分析，常常面临依赖不清、封装混乱，以及缺乏测试等问题；对之进行维护和新需求开发时，结合其…"}, {"id": "6844903700775845896", "title": "ReasonML 脚手架", "desc": "ReasonML脚手架编辑器推荐使用VSCode的一款ReasonML插件：reason-vscode使用clone这个项目进入项目的根目录，运行yarn&yarnstart"}, {"id": "6844903558039470087", "title": "深入理解React源码 - 界面更新 VI", "desc": "从某种程度来说，优雅，高效的界面更新是React的核心竞争力。在深入理解React里用来加速界面更新的各种奇技淫巧（比如virtual DOM和Diffing算法）之前，我们需要先了解上述技巧的打开方式，Transaction。 本篇涉及的文件： renderers/share…"}, {"id": "6844903573768110093", "title": "reselect的替代者repure", "desc": "在为什么我们需要reselect 我们阐述了 reselect的必要性。 其中fab = f(a, b), hbc = h(b, c), gac = g(a, c), uabc = u(a, b, c)。 对于这样的组件，我们只需要存储状态a， b， c， 对于fab， hbc…"}, {"id": "6943971290864844836", "title": "如何实现自己的react（2）虚拟dom和render", "desc": "React提供了createElement这个方法来创建虚拟dom元素，具体格式在1中提到过了，所以我们需要自己实现一个createElement方法，来返回我们需要的标签名、属性和子节点。 为了将虚拟dom转化成真实dom，定义了一个名为mountComponent的方法来接…"}, {"id": "6844903620324884487", "title": "游戏", "desc": "游戏过程"}, {"id": "6936742948184784926", "title": "受控组件与非受控组件（三）", "desc": "非受控组件指的是表单的数据不再由React组件进行管理，而是交给DOM节点处理，可以使用refs属性来从DOM节点中获取到数据。 非受控组件将代码存储在真实的DOM节点中，可以节省很多代码。 受控组件的特点是它和state是类似双向绑定的，也就是通过state可以实时拿到表单中…"}, {"id": "6898880647406977037", "title": "react hook 基础属性整理", "desc": "使用useState来定义及初始化一个状态；使用const定义一个数组，第一个参数是定义的状态，useState里的内容为赋予的值；第二个参数是setXX，用来修改定义的状态；如const [XX, setXX]=useState(\"\"),这就是定义了XX为一个字符串。 给没有…"}, {"id": "6844903956280262663", "title": "[译]创建 React 组件的10条准则", "desc": "要创建供多人使用的组件是很难的，组件包含属性（props），如果这些属性要作为公开 API 的一部分，那就必须非常仔细地考虑组件应该接受哪些属性。 本文会简要介绍 API 设计中的一些最佳实践，以及帮助你开发出优秀组件的 10 条准则。 API （Application Pro…"}, {"id": "6844903550947082254", "title": "redux源码解析之五部曲(why:对外暴露了5个api)——第一部曲createStore.js", "desc": "概述：redux是利用闭包，来达到状态的共享操作(个人认为)。 为什么先讲createStore呢，根据代码书写逻辑，一般都把创建store这一部放在入口文件里（一步一步反推）。 //就暴露了5个对外接口，开不开心。只有这么点api 习惯很思维很难改。。。 那我们就看看源码cr…"}, {"id": "6844903503261859847", "title": "【翻译】React@16 官方文档翻译——Portals", "desc": "Portals 提供了一种很好的将子节点渲染到父组件以外的 DOM 节点的方式。 第一个参数（child）是任何可渲染的 React 子元素，例如一个元素，字符串或碎片。第二个参数（container）则是一个 DOM 元素。"}, {"id": "6912841474657189896", "title": "React中高阶组件", "desc": "高阶组件认识高阶函数高阶组件和高阶函数非常的类似，所以学习高阶组件之前先认识一下高阶函数高阶函数的维基百科定义，至少满足以下条件之一接受一个或多个函数作为参数返回一个函数JavaScript中比较常见"}, {"id": "6844903558999982087", "title": "React进阶系列: Render Props 从介绍到实践", "desc": "render props是一个组件间共享代码逻辑的小技巧, 通过props传递函数来实现。有许多库(比如React Router, React Motion)都使用了这个技巧。 组件有一个叫做render的prop, 值是一个返回React元素的函数, 在组件内部调用这个函数渲…"}, {"id": "6844903856338370574", "title": "React 30 秒速学：制作倒计时组件", "desc": "渲染倒数计时器，在达到零时打印消息。 使用对象解构来设置hours，minutes和secondsprop 的默认值。 使用React.useState()钩子来创建time，paused和over状态变量，并将它们的值分别设置为传递的props，false和false的值。 …"}, {"id": "6928574472655994893", "title": "React Hooks 理解", "desc": "1. useState 2. useReducer 3. 如何代替Redux 4. UseContext 5. useEffect 6. uselayoutEffect 7. useMemo 8. useCallback 9. useRef 10. forwardRef"}, {"id": "6844903894061940750", "title": "memoize-one在React中的应用", "desc": "不同类型业务要求的性能标准各不相同。如果对一个 ToB 的后台管理系统要求首屏速度以及 SEO，显然不合理也没必要。 第一要考虑的不是如何去优化，而是值不值得去优化，React 性能已经足够优秀，毕竟“过早优化是魔鬼”，情况总是“可以，但没必要”。 作为一个开发人员，深入了解工…"}, {"id": "6939496376736677918", "title": "NextJS 极速上手", "desc": "如果你是使用react的开发者，想要生成服务端渲染和静态的网页，可以使用Next框架，它基于react的，可以让你使用react的技术来开发。 为什么要用服务端渲染和静态生成？它们都是预渲染的，核心是为了做搜索引擎优化，让用户能在搜索引擎里搜索跟你网站相关的关键字时候，你的网站…"}, {"id": "6929874111627952142", "title": "深入react技术--React与DOM, refs", "desc": "从 React 0.14版本后, React将 React中涉及DOM的操作剥离开,目的是为了抽象React,同时适用于web端和移动端。 react-dom 包提供了DOM特定的方法,可以在你的应用程序的顶层使用,如果你需要的话,也可以作为React模型之外的特殊的操作DOM…"}, {"id": "6885550980764467214", "title": "为什么useEffect会被延迟5000ms执行？", "desc": "本文记录了在使用React Hooks 的过程中，useEffect遇到的问题，解决方案，以及从源码角度对产生的问题进行剖析。 本文假设读者已经对React Hooks有相关了解，也有使用过useEffect的经验。如果读者还未了解过，可以阅读官网文档Hooks at a Gl…"}, {"id": "6886653370170343432", "title": "超详实！带你一步步搭建Electron10+React16+Antd4架构工程", "desc": "Electron是一个基于Chromium和 Node.js，可以使用 HTML、CSS和JavaScript构建跨平台应用的技术框架，兼容 Mac、Windows 和 Linux。虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制，网页应用无法…"}, {"id": "6844903508571848717", "title": "Redux 异步流最佳实践", "desc": "真实业务开发我们需要处理异步请求，比如：请求后台数据，延迟执行某个效果，setTimout, setInterval 等等，所以当 Redux 遇到异步操作的时候，又该如何处理呢。"}, {"id": "6959121146629324807", "title": "React-v17生命周期总结", "desc": "react 从 v16 开始，像是跨入了新的时代，性能和新的 API 都令人瞩目。重新认识 React，从重新认识生命周期开始。"}, {"id": "6844904046252261384", "title": "【Concent杂谈】精确更新策略", "desc": "一晃就到2020年了，时间过得真的是飞快，伴随着q群一些热心小伙伴的反馈和我个人实际的业务落地场景，Concent已进入一个非常稳定的运行阶段了，在此开年之际，新开一个杂谈系列，会不定期更新，用于做一些总结或者回顾，内容比较随心，想到哪里写到哪里，不会抬拘于风格和形式，重在探讨…"}, {"id": "6844903923673726984", "title": "揭开react-loadable的神秘面纱", "desc": "react-loadable是什么？我们首先看看官方说明通过hoc给组件提供动态加载功能，在实际业务开发中，经常遇到性能优化的问题，其中有一个优化的点，就是通过动态加载组件来减少首屏的size，在re"}, {"id": "6844904169539633166", "title": "React Hooks 系列之8 custom Hook", "desc": "掌握 React Hooks api 将更好的帮助你在工作中使用，对 React 的掌握更上一层楼。本系列将使用大量实例代码和效果展示，非常易于初学者和复习使用。 截至目前，学习了官方的这么多 hooks api，我们也可以创造一些自己的 hooks，甚至官方也在鼓励开发者将组…"}, {"id": "6844903593250668552", "title": "React 设计模式和场景分析", "desc": "其中涉及到 React 组件复用、轮子设计相关话题，并配合相关场景实例进行了分析。这些内容都算是 React 设计模式，一提到 Design Patterns，读者大可不必恐惧，事实上这都是 React 开发应用灵活性的体现。今天这篇文章，我们继续通过一个场景，循序渐进，通过一…"}, {"id": "6844903598883618829", "title": "ReactNative干货分享——自定义iconfont图标的使用", "desc": "在开发App的过程中我们会用到各种图标，经实践发现一个问题，在React Native中使用图片来显示图标加载会非常慢，经常出现图标留白，半天才加载出来的情况。这种时候使用字体图标就能够很好解决这个问题。与图片相比，使用字体图标有哪些好处呢？ React Native中使用字体…"}, {"id": "6844904202636918791", "title": "React Hooks 加持下的函数组件设计", "desc": "过去，React 中的函数组件都被称为无状态函数式组件(stateless functional component)，这是因为函数组件没有办法拥有自己的状态，只能根据 Props 来渲染 UI ，其性质就相当于是类组件中的 render 函数，虽然结构简单明了，但是作用有限。…"}, {"id": "6844903753347252237", "title": "「译」如何以及为什么 React Fiber 使用链表遍历组件树", "desc": "为了教育我自己和社区，我花了很多时间在Web技术逆向工程和写我的发现。在过去的一年里，我主要专注在Angular的源码，发布了网路上最大的Angular出版物—Angular-In-Depth。现在我已经把主要精力投入到React中。变化检测已经成为我在Angular的专长的主…"}, {"id": "6844903508370718727", "title": "关于react diff 算法（译文）", "desc": "React是由facebook开发，用于构建用户界面的js类库，以提升性能为设计理念。在本文中，我将为大家介绍在React中的diff算法，以及它的渲染机制，以便于你能够更好的优化你的程序。 在深入了解实现细节之前，了解React如何工作是很重要的。 在任何时候，你可以将UI描…"}, {"id": "6844904101348655118", "title": "React Hook的日常使用，创建一个可排序表格组件", "desc": "我花了一些精力来创作本文，以及熬夜编写本文的示例程序，以便您能在阅读之后可以实践参考，阅读后如果觉得对您有帮助，可以关注作者、收藏和点赞本文，这是对作者写出优质文章最大的鼓励了。 在本文中，我将创建一种可重用的方法来对 React 中的表格数据进行排序功能，并且使用React …"}, {"id": "6844903741741596680", "title": "结合 Google quicklink，react 项目实现页面秒开", "desc": "对于前端资讯比较敏感的同学，可能这两天已经听说了 GoogleChromeLabs/quicklink 这个项目：它由 Google 公司著名开发者 Addy Osmani 发起，实现了：在空闲时间预获取页面可视区域内的链接，加快后续加载速度。 如果你没有听说过 Addy Os…"}, {"id": "6844903629577535501", "title": "【译】React v16.4.0：你可能并不需要派生状态（Derived State）", "desc": "很长一段时间，componentWillReceiveProps生命周期是在不进行额外render的前提下，响应props中的改变并更新state的唯一方式。在16.3版本中，我们介绍了一个新的替代生命周期getDerivedStateFromProps去更安全地解决相同的问题…"}, {"id": "6844903588053909518", "title": "Parcel上手与React简单开发环境搭建", "desc": "我从不关注代码之外的东西，因为我相信有人会帮我做这些..."}, {"id": "6844903502557216775", "title": "React v16.0正式版发布", "desc": "我们很高兴的宣布React v16.0发布了，这次版本的新增了一些呼声很高的特性，包括支持render返回数组和字符串、错误处理、portals、自定义DOM属性、优化服务器端渲染以及减少文件大小。 同时也支持返回字符串。 在此之前，React在渲染时运行错误会导致渲染中断，接…"}, {"id": "6844903507124846606", "title": "[成都线下活动] 2017 成都 Web 前端交流大会", "desc": "FreeCodeCamp社区一直以为成都技术爱好者以及用户提供一个开放的交流环境为目的，我们特筹办freeCodeCamp【2017成都WEB前端交流大会】，为成都前端圈的技术工程师、爱好者提供一场前所未有的饕餮盛宴。在此，我们向您发出诚挚的邀请，此次盛会期待您的参与！"}, {"id": "6844903570626609165", "title": "css3-filter 上手试试", "desc": "css3-filter 是一个利用 filter 属性实现的滤镜功能的简单 demo。 其实可以直接使用 antd 的，这里我就自己简单写了一个。 首先构造出我们要的 DOM 结构： 就是构造出一个容器，然后定义用来滑动的线条，再定位上去一个以左侧起点 为准的左侧线条，在这个左…"}, {"id": "6844903621906137102", "title": "React项目实践系列三", "desc": "由于项目并非十分庞大，因此按照功能划分。（涉及Redux的文章会后期写） 页面开发。目前项目页面并不算多，仅有接近二十个页面。在containers文件夹中前期区分好容器组件及展示组件。当写到一定程度，拆分出项目的公共组件，放入components文件夹中。 状态管理。在Red…"}, {"id": "6844903542696722440", "title": "构建可扩展的 React Redux 应用第一部分 - React 组件设计", "desc": "由于 React 和 Redux 本身的灵活性，要摸索出一套最佳实践需要很多经验积累。当功能达到几十上百个时，项目要如何组织？如何降低代码耦合度？要怎样才能在业务需求变动时较少地改动？如何让代码可测试？如何保持性能？"}, {"id": "6844903540863795213", "title": "2017前端发展回顾", "desc": "老技术日趋成熟，新技术层出不穷。"}, {"id": "6844903608710856711", "title": "React 快速上手 - 05 组件渲染控制", "desc": "掌握常见渲染控制 * 并列 * 条件判断 * 三目运算 * 循环 * 嵌套循环 * 空组件 * ref引用"}, {"id": "6920504540567437319", "title": "[译]React生命周期方法--深入理解", "desc": "别担心，你并不孤单。在我第一次编写React应用时，我遇到了很多情况导致我不得不退一步重新学习React的生命周期方法来让自己能够继续开发。 在开始之前，我想让你明白的是最新版本的React已经决定在React 17版本移除一些不安全的旧的生命周期方法。在这个博文中我们在不会学…"}, {"id": "6844903556508598280", "title": "深入理解React源码 VI－英文预览版", "desc": "To some extent, the sophisticated and efficient UI updating is what makes React React. Before we dive into the mechanisms that empower the …"}, {"id": "6844903649450311687", "title": "[译]React 的生命周期的使用场景", "desc": "作者：Scott DomesFollow Front-End/Mobile Developer @ MuseFind. 翻译：johannlai 上名这个图片，就是 React 组件的生命周期，从形成 (pre-mounting)到销毁 (unmounting)的过程。 Rea…"}, {"id": "6844903589849071630", "title": "当我们谈论Virtual DOM时，我们在说什么——etch源码解读", "desc": "首先我们有必要介绍一下etch。 etch是atom团队下的开源项目，是一套非常简洁然而功能十分完善的virtualDOM机制。我在偶然的情况下接触到了这个开源项目，在读README时为它简洁的设计而惊叹，而在阅读源码的过程中也为它巧妙的实现而赞叹。 个人觉得etch针对是一个…"}, {"id": "6844903890320637959", "title": "react子元素的渲染逻辑", "desc": "react发现个有趣的问题，在下面四种写法中，只有第一种会渲染demo显示demo显示hello不显示任何信息不显示任何信息why?发生上面的原因是因为源码里createElement函数"}, {"id": "6844903506017533965", "title": "Mozilla: Firefox Quantum 发布后，Firebug 将由开发者工具取代", "desc": "和 Firebug 说再见啦"}, {"id": "6844903641942327303", "title": "React Web开发中常见的异常提示以及解决方案", "desc": "使用React 开发web app的过程中，总会有踩坑的时候，针对常见的各种异常提示，作以下汇总，以便帮助大家避免少踩坑 汇总中会有相关对应的错误异常栗子用法 这个异常基本上是开发过程中最常见的异常了，引发异常的使用场景也有很多，举几个栗子： 未初始化state的属性值便直接使…"}, {"id": "6844903891713130503", "title": "手摸👋，带你理解 React 高阶组件", "desc": "首先说一下，不会这个也可以完成很多需求，但是拥有这个思维模式后，相信你写的代码就更加优雅，。高阶组件是学习 React 的一大难点，我开始也卡了很久，被绕晕，理解不了，但是写过几次后就觉得它的设计是如此精巧，让人叹服。 不知道你用过高阶函数没，其实高阶组件是一个套路，就是把函数…"}, {"id": "6844903983958458381", "title": "10 mins 带你入门 React Hooks", "desc": "useState 的用法很简单，传入一个初始 state，返回一个 state 以及修改 state 的函数。 setCount 就相当于 setState ，可以传入一个新的状态或者函数。例如: 为了防止我们不必要的渲染，useEffect 加入第二个参数, 只有在 coun…"}, {"id": "6844904049976819725", "title": "关于 React 单元测试的一点思索", "desc": "关于单元测试的内容很多，关于 React 单元测试的内容也不少，在官方文档中，配套测试库中，都存在大量的实例示范，但核心问题依然存在，仅仅告诉开发者工具如何使用，对应该测什么、不应该测什么却着墨不多。本文以个人视角，讨论 React 项目中单元测试的落地。 正式开始讨论之前，先…"}, {"id": "6844903581091528711", "title": "Redux vs Mobx系列(二)：衍生属性", "desc": "其中money = price * count。 页面组件逻辑依然很简单，获取对应数据展示就可以了。 问题来了，现在我要调整一下 售价 updateInprice。 updateInprice 应该怎么写呢？ waht ？？我调整一个售价， 需要改这么多？？是的， 当您 调整数…"}, {"id": "6844903605930033166", "title": "[简单翻译+再加工] 从头开始创建一个 React 应用", "desc": "并不详细介绍 React 的写法。主要内容是 如何从无到有，创建并运行起来一个 React 应用。 React 简介 一句话介绍： React 是用于构建用户界面的 JavaScript 库。针对的是 View 层。 虽然 …"}, {"id": "6844903592160133127", "title": "基于react/vue的移动端终极适配方案（更新css-modules配置）", "desc": "2018-4-16日更新css-modules配置，前面步骤不变，可直接跳到第七步。 移动端适配最接近完美的解决方案在react中的使用方式。本文只讲create-react-app创建的项目如何配置，具体每个插件的用途和使用方法请先查阅大漠先生的文章，我相信大漠先生的文章已经…"}, {"id": "6890471535295856654", "title": "快如闪电的 react-refresh ", "desc": "热更新的意思是不用刷新页面，简单的讲，就是使用 react 编写代码时，能让修改的部分自动刷新。但这和自动刷新网页是不同的，因为 hot-loader 并不会刷新网页，而仅仅是替换你修改的部分，也就是 without losing state"}, {"id": "6844903715921477640", "title": "setState异步、同步与进阶", "desc": "在 React 日常的使用中，一个很重要的点就是，不要直接去修改 state。例如：this.state.count = 1是无法触发 React 去更新视图的。因为React的机制规定，一个state的更新，首先需要调用 setState 方法。 这样便能触发重新渲染。稍有经…"}, {"id": "6992588246785982494", "title": "图解React源码 - reconciler 运作流程", "desc": "本节从宏观上分析了react-reconciler包的核心逻辑, 并将其分为了 4 个步骤: 1. 输入, 2.注册调度任务, 3.执行任务回调, 4.输出."}, {"id": "6844904008402862094", "title": "useEffect 和 useLayoutEffect 的区别", "desc": "在 React hook 中，useEffect 用来取代 componentDidMount 和 componentDidUpdate。主要作用是当页面渲染后，进行一些副作用操作（比如访问 DOM，请求数据）。 而 useLayoutEffect 的作用和 useEffect…"}, {"id": "6844904086819569672", "title": "React Hooks完全上手指南", "desc": "createClass不需要处理this的指向，到了Class Component稍微不慎就会出现因this的指向报错。 不是所有组件都需要处理生命周期，在React发布之初Function Component被设计了出来，用于简化只有render时Class Componen…"}, {"id": "6998322725294964743", "title": "ahooks 源码解读系列 - 6", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6867338827418042375", "title": "关于useEffect的一切", "desc": "本文接下来将深入源码，带你了解这些知识。 这，就是关于useEffect的一切。 其中，只有渲染器会执行渲染视图操作。 对于浏览器环境来说，只有渲染器会执行类似appendChild、insertBefore这样的DOM操作。 答案是：他会为需要更新的内容对应的fiber（可以…"}, {"id": "6844904167472005134", "title": "React源码揭秘3 Diff算法详解", "desc": "在上一篇文章这里我们讲到，在render阶段的beginWork函数中，会将上次更新产生的 Fiber 节点与本次更新的 JSX 对象（对应ClassComponent的this.render方法返回值，或者FunctionComponent执行的返回值）进行比较。根据比较的结…"}, {"id": "7001383328473415687", "title": "React hooks 实时搜索更新数据 ", "desc": "有这么一个需求，有一个输入框，当用户在输入框中输入关键字时进行实时搜索，且最后返回结果匹配最后的输入词。 拆分一下需求，有这么几个关键点 实时自动搜索 结果匹配最后的关键词 再继续拆分，还需要以下几个"}, {"id": "6947282563916365855", "title": "React路由实践，你选择静态路由还是动态路由？", "desc": "最近开始学习React的， 作为一只从Vue转世而来的React萌新，首当其冲的就是对路由的执着了， Vue在路由这一块的中心化，以及父子路由用的太顺手了， 一下子接受不了React教程中的路由写法， 所以想在React中也实现中心化的路由。 但通过教程还是可以看出，首先Rea…"}, {"id": "6976112265938354189", "title": "动态表单（上）—— 别再滥用动态表单了", "desc": "在开发表单时常见的有两种做法：一种是通过配置代码的方式，而另一种则是通过组件组合的方式。通过配置代码生成的表单，我们称之为动态表单（Dynamic Form），而通过组件组合生成的表单，我们称之为普通"}, {"id": "6987334429840506894", "title": "react-grid-layout核心功能实现", "desc": "react-grid-layout是基于react的网格布局系统，支持视图的拖拽和缩放，操作十分灵活。"}, {"id": "6930542093840416776", "title": "用react-query解决你一半的状态管理问题", "desc": "在陈年的老项目中，通常用Redux、Mobx这样的全局状态管理方案无差别对待他们。 这类状态通常保存在组件内部。 当状态需要跨组件层级传递，通常使用Context API。 再大范围的状态会使用Redux这样的全局状态管理方案。 返回的数据通常作为状态保存在组件内部（如App组…"}, {"id": "6987763092604059655", "title": "react源码阅读：整体认识", "desc": "看react源码有一段时间了，写篇文章总结一下，也希望能帮到大家。这是react原理系列的第一篇，主要讲解一下react的基本架构，让大家有一个整体的认识。 什么是fiber，为什么要使用fiber "}, {"id": "6844904174774124557", "title": "你需要了解的React Router(hash模式）实现原理", "desc": "单页Web应用（single page web application，SPA），就是只有一张Web页面的应用。是只加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。而React、Vue就是构建单页应用的前端主流框架。 通过监听路由的变化，去匹配路由…"}, {"id": "6844904008562262023", "title": "JSX AS DSL? 写个 Mock API 服务器看看", "desc": "这几天打算写一个简单的 API Mock 服务器，老生常谈哈？其实我是想讲 JSX, Mock 服务器只是一个幌子。 我在寻找一种更简洁、方便、同时又可以灵活扩展的、和别人不太一样的方式，来定义各种 Mock API。后来我发现了 JSX 在领域问题描述的优势和潜力，当然这可不…"}, {"id": "6991734367760416804", "title": "React源码之Hooks", "desc": "没有破坏性改动 在我们继续之前，请记住 Hook 是： 完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。 100% 向后兼容的"}, {"id": "6991488685787054116", "title": "探究 ReactNode 和 ReactElement 的关系", "desc": "最近在学习的 React 的时候碰见了一点小问题，其原因是 ReactNode 和 ReactElement 引起的报错，为此我花了点时间探究了一下。"}, {"id": "6864871906567749645", "title": "在 React 中自定义 Hooks 的应用场景", "desc": "自定义 Hooks 其实就是在现有 React 提供的 Hooks 上做一层封装，实现一些更有针对性的逻辑，或者可以将一些比较通用的业务逻辑做一个封装。 下面将列举一些我们在 Class 组件内常用的生命周期如何用 Hooks 来实现。 上述就属于一个简单的自定义 Hooks，…"}, {"id": "6860275004597239815", "title": "React17新特性：启发式更新算法", "desc": "北京时间8月11日凌晨，React团队发布了React17第一个RC版本。该版本的最大特性是“无新特性”。 遥想从v15到v16，React团队花了两年时间将源码架构中的Stack Reconciler重构为Fiber Reconciler，事情一定没有这么简单。 事实上，这次…"}, {"id": "6844904049146331150", "title": "React 函数式组件和类组件的区别，不是只有state和性能！", "desc": "函数组件性能比类组件好，但是在现代浏览器中，闭包和类的原始性能只有在极端场景下才会有明显的差别。 性能主要取决于代码的作用，而不是选择函数式还是类组件。尽管优化策略有差别，但性能差异可以忽略不计。 而下面会重点讲述：React的函数式组件和类组件之间根本的区别： 在心智模型上。…"}, {"id": "6844903561910812685", "title": "babel之配置文件.babelrc入门详解", "desc": "官方解释,是下一代JavaScript 语法的编译器。 既然是下一代Javascript的标准，浏览器因版本的不同对此会有兼容性问题，JavaScript的新的方法都不能使用，但是目前我们在项目开发一直提倡使用最新的语法糖编写，不但能减少代码量，而且async,await等新特…"}, {"id": "6981327610097696775", "title": "umijs的国际化——中英文转换", "desc": "这是我参与新手入门的第1篇文章 ok,话不多说，让我们进入正题吧！ 一、 配置国际化 将此代码放入umirc.ts即可打开国际化的大门。 二、创建各国语言文档 src 下创建文件夹locales 创建"}, {"id": "6844904190431461383", "title": "细聊Concent & Recoil , 探索react数据流的新开发模式", "desc": "之前发表了一篇文章 redux、mobx、concent特性大比拼, 看后生如何对局前辈，吸引了不少感兴趣的小伙伴入群开始了解和使用 concent，并获得了很多正向的反馈，实实在在的帮助他们提高了开发体验，群里人数虽然还很少，但大家热情高涨，技术讨论氛围浓厚，对很多新鲜技术都…"}, {"id": "6844903924302888973", "title": "React性能优化的8种方式了解一下？", "desc": "react凭借virtual DOM和diff算法拥有高效的性能，除此之外也有很多其他的方法和技巧可以进一步提升react性能，在本文中我将列举出可有效提升react性能的几种方法，帮助我们改进react代码，提升性能。但是我们不必一定要在项目中使用这些方法，但是我们有必要知道…"}, {"id": "6934541343935234061", "title": "基于 CRA 快速搭建 React 组件库", "desc": "1. 初始化项目 create-react-app + TS 2. 支持编译 Sass 添加 reset 全局样式，可参考 normalize.css 库，它提供了跨浏览器的高度一致性。 3. 编写 Button 组件 ButtonHTMLAttributes 是 button…"}, {"id": "6983372742825345061", "title": "React学习十二天---React源码解读之React16架构和使用的技术介绍（二）", "desc": "项目源码 前言 前面我们做好了源码调试环境，学习了JSX转化为createElement的过程，现在我们接下来了解一下： React16所采用的架构，对一个架构的整体了解 从数据结构方面了解Fiber"}, {"id": "6964672595950534693", "title": " 写了3个月React，我学到了什么？", "desc": "新环境从Vue转到了React技术栈，这个过程还是比较有趣的。 在React中会看到与Vue很多相似的地方，也有一些不同的地方，学习过程中遇到一些疑惑，做了记录。"}, {"id": "6955861815884513288", "title": "基于qiankun微前端实战+部署粗略笔记（跳过原理）", "desc": "基于qiankun微前端实战+部署笔记（跳过原理） 纯个人qiankun实战学习笔记，不谈原理只记操作过程，内容难免有纰漏部分，敬请不吝赐教批评指正。"}, {"id": "6984667855115517988", "title": "React系列实战篇：增加登录（四）", "desc": "我们这次学了一些新内容，我们需要将之前的改版。 首先我们需要登录页面，并且通过HOC（高阶组件）添加鉴权功能。加上路由跳转，完善页面。"}, {"id": "6925303281828757518", "title": "从JSX到渲染页面，中间发生了什么😯【React Plan】", "desc": "最近在学习React过程中，对JSX的理解不是很清楚，只知道JSX是一种可以通过Bable转译成一个名为 React.createElement() 函数调用的JavaScript 语法扩展。还有为什么通过把一个 React 元素，和根 DOM 节点传入 ReactDOM.re…"}, {"id": "6868164601201033230", "title": "Umi@3.0+Ts+Antd@4.0从零搭建后台项目工程", "desc": "umi 和 antd 升级有一段时间了，一直准备用这个插件式开发套件新建一个项目，用来体验下这个框架的优点。因为这个 umi 升级完成之后，文档写的略微对新手不太友好（比如我这样的菜鸡）。在新建一个基础架构的过程中也遇到了不少问题，把解决过程记录下，像大家分享下！ 首先 umi…"}, {"id": "6973822025395601439", "title": "React 系列一：Hello React", "desc": "前言 这节我们将教你如何导入 React 并带领你编写出一个简单的 React 页面。为更好的用户体验，请您移至我们官网小和山的菜鸟们 (https://xhs-rookies.com/) 进行学习，"}, {"id": "6907479093101461512", "title": "如何利用Qrcode制作一个二维码生成器?", "desc": "玲琅满目的二维码在我们的都市和朋友圈中随处可见, 很多平台都提供了定制二维码的服务, 那么作为一名程序员, 我们如何自己实现一个简单的二维码生成器呢? 接下来笔者就来带大家一起利用Qrcode实现一个二维码生成器. 笔者不会介绍二维码的详细实现原理, 因为相关文章很多, 我们从…"}, {"id": "6989800751153283103", "title": "React 框架选择指北 （Next.js、Gatsby、Create React App）", "desc": "目前 React 有三个较为流行的框架可供我们选择即：Create React App、Gatsby、Next.js，下面我将逐一对比他们之间的优劣和不同。"}, {"id": "6990185707285250062", "title": "使用 Context 避免深层属性传递", "desc": "前言 最近在项目发现了一些看起来很神奇的代码，一个组件 A 的方法通过 props 传到组件 B，然后到组件 C，再到组件 D，再到组件 E，最后到组件 D， 简直是千层饼😂"}, {"id": "6844903877460901896", "title": "探索Angular,React,Vue的2019年趋势比较", "desc": "笔者从15年初识用node.js搭建Web前端，后又因老东家接了一些国内的外包项目，慢慢偏向了移动端。16年初有幸通过带我的技术大佬，偶然接触了前端框架并在公司推广那时候发展最成熟的Angular。对于我们这种从Web服务端搬迁过来做移动端的来说，Angular这个成熟的框架确…"}, {"id": "6990916203011112967", "title": "react原理：completeWork阶段", "desc": "这篇文章讲一下render阶段的第二部分：completeUnitOfWork。 react的render阶段，会按照先序遍历的顺序构建fiber树，当workInProgress指针来到一个叶子节点"}, {"id": "6844903648795836424", "title": "我为什么要立刻放弃 React 而使用 Vue？", "desc": "......."}, {"id": "7006481452925714445", "title": "为什么在 React 中不推荐使用 setCount(count+1) 这种写法", "desc": "这是我们的一个基础组件： 当我们点击按钮的时候， count 的数量会加 1。如果我们的 handleClick 只有一条语句，确实不会有问题，但是如果我们的 handleClick 是如下的格式呢："}, {"id": "7006197298145591326", "title": "React 架构之Render阶段", "desc": "本篇文章学习React源码，根据每个阶段进行源码debugger学习。 这里提供如何在本地打debugger：https://github.com/sunkuangdong/react_origin_"}, {"id": "7000180503340908557", "title": "在校学生课余时间用React肝出一款个人博客系统，前台+后台管理，求指点！", "desc": "1. 前言 之前我使用hexo搭建过个人博客。hexo很强大，渲染页面速度快，支持markdown语法，可以一键部署，还可以扩展各种插件。 但hexo搭建的是静态页面，每次更新文章，都要重新生成静态页"}, {"id": "6992006476558499853", "title": "React 中 setState 是一个宏任务还是微任务？", "desc": "最近有个朋友面试，面试官问了个奇葩的问题，也就是我写在标题上的这个问题。 能问出这个问题，面试官应该对 React 不是很了解，也是可能是看到面试者简历里面有写过自己熟悉 React，面试官想通过这个"}, {"id": "6950063294270930980", "title": "「React进阶」 React全部api解读+基础实践大全(夯实基础2万字总结)", "desc": "很多同学用react开发的时候，真正用到的React的api少之又少，基本停留在Component,React.memo等层面,实际react源码中，暴露出来的方法并不少，只是我们平时很少用。但是Re"}, {"id": "7006115669171240967", "title": "(原创)基于React Hooks实现表单双向数据绑定", "desc": "Vue的双向数据绑定让表单控制变得很方便。本文是基于React Hooks实现Vue的v-model指令的一个解决方案，让大家也可以像Vue一样控制表单。"}, {"id": "7003257639199064100", "title": "开箱即用的React项目模板", "desc": "每天都在不间断的写业务，React 项目做了一个又一个，好多年了，没有一套自己的项目模板，本文将详细介绍如何搭建一套React项目模板，真正做到开箱即用。"}, {"id": "7006219335639236621", "title": "React+Typescript实现倒计时Hook", "desc": "1、对setInterval做了Hook化封装 2、实现倒计时Hook 3、写个demo看一下效果"}, {"id": "7006232426443702303", "title": "一个示例检验对 React Diff 的理解", "desc": "通过这个例子我们可以观察不同实现方式对子组件的影响。根据子组件挂载和卸载打印的日志，你能清楚的知道为什么输出内容不一样你就算学明白 React Diff 机制了。"}, {"id": "7006533557308882975", "title": "精读《React — 5 Things That Might Surprise You》", "desc": "1. 使用之前的状态设置状态是不可预测的 状态管理是 React 的基础，虽然useState可能是最常见的钩子，但可能对其实际行为有些不了解。 让我们来看看以下组件： 在用户单击按钮后，您希望计数器"}, {"id": "7004714103545528351", "title": "React Server Components 实战场景分析", "desc": "关于 React Server Components（下文统称为RSC） 的概念本文不做赘述，React官方有相关说明，感兴趣的同学可以参考以下地址： 官方地址：https://www.youtube"}, {"id": "7007339041225965576", "title": "教你五分钟学习一下react基础语法", "desc": "以下代码全部在react脚手架环境中执行 合成事件的说明 setState的使用 受控组件的说明 多个受控组件的说明 多个受控组件处理的优化 属性名表达式 受控组件的巩固 非受控组件的演示 ref用来"}, {"id": "7003605263131344932", "title": "vite + react + ts 手摸手做项目系列三 （权限篇）", "desc": "传送门 我为什么坚持六点起床 vite + react + ts 手摸手做项目系列一 （项目配置篇） # vite + react + ts 手摸手做项目系列二 （实战篇） 前言 项目中的权限问题在面"}, {"id": "7000589186898231333", "title": "掘金一下 | 从零开发一款基于 webview 的 vscode 扩展", "desc": "英雄多起于市井，高楼皆起于平地。再伟大的软件也都是从 Hello World 开始的，本文尽量用最简洁的语言描述一个基于 webview 的 vscode 插件的诞生。"}, {"id": "7006604966475350047", "title": "TypeScript interface使用实践", "desc": "你将学会 通过一个简单的例子来实践interface的用法，加深对interface的理解 面向对象 对TypeScript有一定掌握程，了解\"鸭子类型\"，使用react技术栈的同学 难度系数 ⭐⭐ "}, {"id": "7007043649250787336", "title": "祖传项目封装组件库", "desc": "前言 随着企业内部开发的项目逐渐增多,组件的维护工作变得愈益困难. 前端同学通常会面临的困境之一.开发完了A项目,在A项目下封装了大量的公共组件.当B项目启动时,由于设计风格相似,以至于A项目的很多组"}, {"id": "7000551946029858830", "title": "【前端可视化】如何在React中优雅的使用ECharts🍉", "desc": "随着前端的飞速发展，近年来数据可视化越来越火，有些公司的业务跟地图、位置、大数据等脱离不开关系，所以数据可视化甚至成了单独的一门前端行业。本文就带你使用可视化框架之ECharts。"}, {"id": "7006229279348539428", "title": "【功能实现】多个批量操作的链式实现", "desc": "以往我再开发表格的多个批量处理的操作的时候，都是挨个实现，提取部分公共函数。最近在做需求设计的时候，我灵感一现，后知后觉的发现，批量处理如果后续的操作是一致的，是不是可以做成一套完整的流程。"}, {"id": "7003610990331838478", "title": "React 开发必须知道的 34 个技巧【近1W字】", "desc": "本文摘自于火狼1大神 React 开发必须知道的 34 个技巧【近1W字】 前言 React 是前端三大框架之一,在开发中也是一项技能; 本文从实际开发中总结了 React 开发的一些技巧技巧,适合 "}, {"id": "7007346279340572686", "title": "React 架构 Render 阶段 第二篇", "desc": "上一篇主要是说流程，大概的流程是什么样子的，经历了哪些函数。 本篇开始要具体讲解递归阶段，逐步分解。如有不对之处还望指出，共同进步，谢谢～ 深入理解JSX JSX对于开发人员应该并不陌生，React也"}, {"id": "6986931545252560933", "title": "React 学习之渲染过程", "desc": "渲染：生成用于显示的对象，以及将这些对象形成真实的 DOM 对象。本文简要描述一下 React 节点初次渲染与节点更新的流程..."}, {"id": "6844903768220237831", "title": "React hooks实践", "desc": "最近要对旧的项目进行重构，统一使用全新的react技术栈。同时，我们也决定尝试使用React hooks来进行开发，但是，由于React hooks崇尚的是使用(也只能使用)function component的形式来进行开发，而不是class component，因此，整个开…"}, {"id": "6844903695327445005", "title": "渔人和Rxjs的故事,这次一定教会你前端必会的Rxjs", "desc": "这篇文章可在我的 github 中查看，如果你觉得写的还可以，Please送上你宝贵的star. 写在最前面：你一定要坚持看完这个故事，看完你一定会懂Rxjs.千万不要觉得故事情节没有《盗墓笔记》好看而放弃。因为臣妾实在是只能把枯燥的程序写成这个很（挺）有（简）趣（陋）的故事了…"}, {"id": "6870404532652736526", "title": "分享口琴的简单推导", "desc": "在托斯恩散步, 偶然发现一个小女孩在门口玩耍, 一双肥嘟嘟的小手拿着一把贴着硬纸的木梳吹着。布希曼心里一亮，回去后，根据中国古代笙和罗马笛的发音和吹奏原理，用象牙雕刻成“药丸筒”似的口琴，这就是世界上最早的口琴。 对于初学口琴的人来说, 最难的应该是气息与音准的把握了。气息可以…"}, {"id": "6994307665924980767", "title": "hooks 系列九：hooks 实战", "desc": "我们学完了 react-hooks 的一些基础内容，现在是我们的一个实战环节。 项目的功能与我们的 React 教程内容相似。具体可参考"}, {"id": "6844903593078685709", "title": "怎样学习React？当然是自己动手实现一个React啦", "desc": "深入学习一个框架最直接的方式，就是弄明白框架的原理。React无疑是一个非常值得学习其原理的框架，它设计简单，没有引入任何新的概念，一个组件就是一个方法或一个类。 但是要完整弄明白React的源码并不简单，React的代码有数万行，特别是在引入Fiber架构后，在React简单…"}, {"id": "6930529765048713229", "title": "[译] 为什么 React Hooks 是错误的抽象", "desc": "在开始之前, 我想表达我对 React 团队多年来所付出的努力的感激。他们创建了一个很棒的框架，从很多方面来说，它是我对现代 Web 开发的引路人。他们为我铺平了道路，让我确信我的想法是正确的，如果没有他们的聪明才智，我不可能得出这些结论。 在今天的文章中，我将提出我所观察到的…"}, {"id": "6844903637769011213", "title": "[译] 图解 React", "desc": "React Native vs. Cordova、PhoneGap、Ionic，等等 (待翻译) 如果你是一名设计师，你所在的团队使用(或正在考虑使用)的技术是 React ，或者你只是单纯对 “React” 比较好奇的话，那么本文就是为你而准备的。 在文本中，我只使用朴实的语…"}, {"id": "6997322410722590734", "title": "【功能实现】开关控制相似结构中不同内容的展示", "desc": "最近在做开发设计的时候，对于已有功能添加新功能的需求，进行了沉思，以往在已有需求上进行功能叠加，会对部分条件判断进行新增或者整合，那么就会有一个问题，整合操作会影响现有功能。"}, {"id": "6844903824990142472", "title": "React16：Hooks总览，拥抱函数式 (这大概是最全的React Hooks吧)", "desc": "React官网和2018年的React conf上都提到了动机这个东西，那么出现hooks的动机是什么？是什么推动了hooks的出现？先来看一下Hooks的动机。 React没有提供可复用性行为“附加”到组件的途径，在写类组件的时候，一个类是一个闭包并且state在组件间传递并…"}, {"id": "6844904198899761160", "title": "使用TypeScript + React发布组件到Npm", "desc": "最近封装了项目中使用的React地图组件，摸爬滚打发布到npm上；学到的知识点也比较散，如TypeScript、Commit规范/版本语义化、React组件测试、Npm发布更新、Readme模板、组件文档搭建等，有的知识点也是浅尝辄止（一知半解😱），先记录下来，后期有时间深挖…"}, {"id": "6977350382716452900", "title": "换个角度思考 React Hooks", "desc": "从 Vue 迁移到 React ，不太习惯 React Hooks 的使用？ 也许换个角度思考 Hooks 出现的意义会对你有所帮助。"}, {"id": "6844904047313420295", "title": "捕获 React 异常", "desc": "韩国某著名男子天团之前在我们平台上架了一张重磅数字专辑，本来是一件喜大普奔的好事，结果上架后投诉蜂拥而至。部分用户反馈页面打开就崩溃，紧急排查后发现真凶就是下面这段代码。 这行 if (obj.expertTags && creator.expertTags.length ) …"}, {"id": "6943430853972852750", "title": "那些年错过的React组件单元测试（上）", "desc": "关于前端单元测试，其实两年前我就已经关注了，但那时候只是简单的知道断言，想着也不是太难的东西，项目中也没有用到，然后就想当然的认为自己就会了。 两年后的今天，部门要对以往的项目补加单元测试。真到了开始着手的时候，却懵了 😂 我以为的我以为却把自己给坑了，我发现自己对于前端单元…"}, {"id": "6844903750323142670", "title": "你说你学不动啦，看 Redux 作者怎么说？", "desc": "编者按：今天这篇文章是 React 团队成员、Redux 作者 Dan Abramov 新编写的一篇文章，这篇文章非常不错。在 2019 到来之际，谨以此文祝大家元旦快乐！ 大家总以为我懂得许多东西，而实际情况并不是这样的。我不是在抱怨什么，这也不是什么坏事。 （尽管少数派有来…"}, {"id": "6973548253027500039", "title": "Mobx基本使用", "desc": "Mobx中文文档的介绍 浏览器支持情况 Mobx >= 5 版本运行在任何支持 ES6 Proxy的浏览器 Mobx 4 可以运行在任何支持ES5的浏览器上，而且也将持续地维护 Mobx 5"}, {"id": "6891242214324699143", "title": "轻烤 React 核心机制：React Fiber 与 Reconciliation", "desc": "React Fiber 是 React v16.x 推出船新架构，而 Reconciliation 是 React 的 Diff 算法，两者都是 React 的 核心机制。本文将会来研究一下 React Fiber 和 Reconciliation，看看 Fiber 到底是什么…"}, {"id": "6953807616082460702", "title": "从 0 搭建一个前端项目，我们要做什么？", "desc": "一、项目启动 了解需求背景 了解业务流程 二、项目搭建初始化 本案例使用脚手架 create-react-app 初始化了项目。此脚手架有利有弊吧，项目目录结构简洁，不需要太关心 webpack 令人"}, {"id": "6997020924205596702", "title": "关于 useState 你需要知道的一切", "desc": "初始化 懒惰初始化 首先来看下这两个的区别，第一个是函数执行，相当于 所以在 re-render 时每次都执行，但是 rows 的值是不变的，除非调用 setRows ； 第二个是函数定义，只会在初始"}, {"id": "6875222549446262798", "title": "React Hooks 常见问题及解决方案", "desc": "相信看完本文，你可以得到需要的答案。 每次点击 p 标签，count 都会 + 1，setCount 会触发函数组件的渲染。函数组件的重新渲染其实是当前函数的重新执行。 在函数组件的每一次渲染中，内部的 state、函数以及传入的 props 都是独立的。 点击修改按钮，将对象…"}, {"id": "6968686271447171079", "title": "用react手写一个简单的日历", "desc": "以前写过vue版本的日历，昨天晚上写了react的版本。支持定义日历的排放顺序，以周几作为开始。如下图： 先看效果：https://rodchen"}, {"id": "6846687592692318221", "title": "CSS 之使用径向渐变实现卡券效果", "desc": "前几天，同事接到一个积分商城项目，其中有一个卡券兑换礼品功能。我想了一会没什么好的思路，就忙自己的项目去了。但想到以后自己可能也会遇到类似的需求，所以周末学习整理了下几种卡券效果的实现。"}, {"id": "6844903511835017230", "title": "[译] 2017 年比较 Angular、React、Vue 三剑客 ", "desc": "为 web 应用选择 JavaScript 开发框架是一件很费脑筋的事。现如今 Angular 和 React 非常流行，并且最近出现的新贵 VueJS 同样博得了很多人的关注。更重要的是，这只是一些新起之秀。 那么我们如何选择使用哪个框架呢？列出他们的优劣是极好的。我们将按照…"}, {"id": "6992127228322512933", "title": "setState为什么是异步的", "desc": "点击这里进入react原理专栏 写这篇文章的灵感来自于今天刚刚看到的一篇文章：React 中 setState 是一个宏任务还是微任务？。这篇文章讲的还挺好的，推荐大家看一看。那么，这里我来说一下自己"}, {"id": "6979651690488135717", "title": "性能优化竟白屏，难道真是我的锅？", "desc": "项目日渐“强壮”，优化方法之一是采用 React 框架提供的 `Reat.lazy()` 按需加载，测试过程中，QA同学一口咬定是我的优化代码导致了白屏，且看我如何狡辩～"}, {"id": "6994351939894902798", "title": "使用Mobx管理React应用的状态", "desc": "首先，经过深思熟虑、反复思考决定选择Mobx作为新项目的状态管理工具，原因主要为：Mobx贯彻了响应式编程，代码更加的轻量简洁，且天然支持多store独立共存。"}, {"id": "6958995912957886500", "title": "谈谈React Fiber与分片", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 谈谈React Fiber与分片 React的理念和Fiber的出现 从React的Doc上"}, {"id": "6995834232350179336", "title": "当设计模式遇上 Hooks", "desc": "「设计模式」是一个老生常谈的话题，但前端领域对于设计模式的探讨热度并不是很高，当设计模式碰上 Hooks，会有什么神奇的火花呢"}, {"id": "6844903842392309768", "title": "React组件设计实践总结01 - 类型检查", "desc": "最近准备培训新人, 为了方便新人较快入手 React 开发并编写高质量的组件代码, 我根据自己的实践经验对React 组件设计的相关实践和规范整理了一些文档, 将部分章节分享了出来. 由于经验有限, 文章可能会有某些错误, 希望大家指出, 互相交流. 由于篇幅太长, 所以拆分为…"}, {"id": "6966495816429076516", "title": "前端导出Excel在线指北", "desc": "具体功能为 `导出Excel + 多个Sheet + 可合并的多行表头` 代码部分采用 `React+TS` 作为工具进行编写"}, {"id": "7001441394661277703", "title": "React 18：关于 React JS 最新版本你需要知道的事情", "desc": "期待已久的 React 18 版本终于发布了。它的团队终于公布了 React 18 的 alpha 版本及其计划。在这里了解新功能。"}, {"id": "6959734530513207326", "title": "React新特性为啥产出这么慢？江郎才尽啦？", "desc": "有人曾说：每过一年，前端的入行难度提升一倍。 难度提升很大程度源于前端技术飞快的更新导致新技术加速出现，老技术加速淘汰。 但是，这里有个奇葩：React。 作为前端领域最广为人知的技术之一，React"}, {"id": "6956553061221269534", "title": "如何封装不被嫌弃的组件SDK", "desc": "你在一家小互联网公司做前端。最近公司发展势头不错，已经有了稳定的商业模式。老板决定尝试付费推广~~~"}, {"id": "6844903612787720206", "title": "TypeScript 2.8下的终极React组件模式", "desc": "如果你了解我，你就已经知道我不编写没有类型定义的javascript代码，所以我从0.9版本后，就非常喜欢TypeScript了。除了有类型的JS，我也非常喜欢React库，所以当把React和Typescript 结合在一起后，对我来说就像置身天堂一样:)。整个应用程序和虚拟…"}, {"id": "6993927186419810318", "title": "React 实用库：react-beautiful-dnd", "desc": "React-Beautiful-DND，一个强大的拖拽包，能够优雅的做出丰富的拖拽页面应用，适用于列表之间拖拽的场景，支持移动端，且简单易上手。"}, {"id": "6844903688297775112", "title": "如何轻松拿到淘宝前端 offer | 掘金技术征文", "desc": "如果你要面试一些大厂，(这里以个人经历的淘宝面试为例)，准备肯定是需要的，就算是网上的各种技术大神，从繁忙的业务项目中脱离，回答一些具体的技术问题时，在没有准备的情况下，也很难回答的出色，毕竟这不像他们写文章或者回答问题时有充足的查阅、消化和总结的时间。 嗯，回到正题，那么我们…"}, {"id": "7001039360778829854", "title": "react入门笔记二(React Hooks)", "desc": "react入门笔记之React Hooks。此篇文章主要介绍了 useState, useEffect和useContext"}, {"id": "6844903605850341383", "title": "毕业一年左右的前端妹子面经总结", "desc": "先想清楚你辞职想去的下一家的初衷是什么，是加薪资、提升技术 or 换个工作环境。根据你自己的真实情况，投简历的时候针对性地看看公司的招聘要求，先看看符合度是多少，以免遇到要求极度不符合又没有在商量好的前提下去面试了，最后的结果可能就是你还不错，但是不符合我们公司的要求。 准备工…"}, {"id": "6846687604096630792", "title": "使用WebGL去实现一个拖拽式UI代码生成App", "desc": "UI（User Interface），即用户界面，是软件和用户之间进行交互和信息交换的媒介，实现信息的内部形式与人类可接受形式间的转换。UI开发一般需要经过UI设计、UI实现两个过程。UI设计是对软件的交互、操作逻辑、界面的设计，通常由UI设计师和交互设计师按照用户对软件的…"}, {"id": "6844904079181905927", "title": "React Hook + TS 购物车实战（性能优化、闭包陷阱、自定义hook）", "desc": "本文涉及到的代码已经整理到 github 仓库中，用 cra 搭建了一个示例工程，关于性能优化的部分可以打开控制台查看重渲染的情况。 勾选、全选与反选。 根据选中项计算总价。 首先我们请求到购物车数据，这里并不是本文的重点，可以通过自定义请求 hook 实现，也可以通过普通的 …"}, {"id": "6844903665203953672", "title": "深入理解 TypeScript", "desc": "正如你所见，TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以及可维护性；同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。 TypeScript Deep Dive 是一本很好的开源书，从基…"}, {"id": "6844903648804208654", "title": "你真的了解前端路由吗？", "desc": "hash：可能是大多数人了解的模式，主要是基于锚点的原理实现。简单易用 browser：即使用html5标准中的history api通过监听popstate事件来对dom进行操作。每次路由变化都会引起重定向 memory：这种实现是在内存中维护一个堆栈用于管理访问历史的方式，…"}, {"id": "6844904170256891912", "title": "React 之我见：JSX，虚拟 DOM，Diff 算法，setState，state 和 props 梳理", "desc": "本文主要梳理一下我对 React 框架基础内容的认识，之后也会总结一些深度内容的认识。当然，笔者水平也有限，如果你发现不妥之处，望斧正！ 因为可以进行组件化开发？社区强大？使用的人多？有很多好用的第三方库和插件？适用于单页面应用开发？这些都不是最本质的原因。 最本质的原因是保持…"}, {"id": "6992397641594175496", "title": "react使用react-hot-loader 局部热更新", "desc": "Q：webpack-dev-server 已经是热加载，为何还要在 react 项目还要安装 react-hot-loader 呢？ A：其实这两者的更新是有区别的，webpack-dev-serve"}, {"id": "6865579348070989837", "title": "基于 SSR/SSG 的前端 SEO 优化", "desc": "前段时间对项目做了 SEO 优化，到现在才来写总结。我们知道，常规用 Vue/React 开发的是 SPA 应用，但是天然的单页面应用 SEO 就是不好，虽然说现在也有各种技术可以改善了，比如使用预渲染，但也都存在各种缺点。但是即使这样，也抵不住 Vue/React 这类框架的…"}, {"id": "6844904045908328462", "title": "Diff到底是怎么更新的？这个小玩具将Diff的过程可视化了出来", "desc": "我当时回答的不是特别好，所以后来专门上网研究了一下。 网上有许多介绍diff算法的文章，但是一大坨文字配上大量源码，让人实在没有看下去的欲望。于是乎，我做了这个小工具，希望大家可以轻松了解Diff更新的过程。 实现的原理很简单，我自己动手实现了一个基于纯js对象的diff算法（…"}, {"id": "6844903555938123783", "title": "《React 学习之道》The Road to learn React (简体中文版)", "desc": "《React 学习之道》这本书使用路线图中的精华部分用于传授 React，并将其融入一个独具吸引力的真实世界 App的具体代码实现。 如何掌握 React 存在特别多的路线图。本书提取这些路线图中的精华部分，并将其融入于一个具体的应用程序当中。您将会构建一个属于自己的 Reac…"}, {"id": "6844903798775758861", "title": "实现SSR服务端渲染", "desc": "前段时间寻思做个个人网站，然后就立马行动了。 个人网站如何实现选择什么技术方案，自己可以自由决定。 刚好之前有大致想过服务端渲染，加载速度快，还有 SEO 挺适合个人网站的。 所以就自己造了个轮子用 koa+react 来实现 SSR 服务端渲染。 最初听说有单页面的服务端渲染…"}, {"id": "6844903944003518471", "title": "Hooks的使用方法和实现原理", "desc": "Hooks 是 React 函数组件内一类特殊的函数（通常以 \"use\" 开头，比如 \"useState\"），使开发者能够在 function component 里依旧使用 state 和 life-cycles，以及使用 custom hooks 复用业务逻辑。 大型组件很…"}, {"id": "6844903688465547277", "title": "浅析 React / Vue 跨端渲染原理与实现", "desc": "当下的前端同学对 React 与 Vue 的组件化开发想必不会陌生，RN 与 Weex 的跨界也常为我们所津津乐道。UI 框架在实现这样的跨端渲染时需要做哪些工作，其技术方案能否借鉴乃至应用到我们自己的项目中呢？这就是本文所希望分享的主题。 什么是跨端渲染呢？这里的「端」其实并…"}, {"id": "6983927106640019464", "title": "useCallback、useMemo、memo用法和区别", "desc": "用法由来 当数据重新赋值时，整个组件会刷新渲染，当数据功能复杂且多，且部分数据无需刷新时，会被强制刷新，造成性能浪费，也可能会产出bug。那么这时候就需要用上useCallback和useMemo来缓"}, {"id": "6844903585545715719", "title": "2017年前端工作小结，个人踩坑之旅，前端学习者的杂谈", "desc": "写多少项目就得写多少css，我曾一度轻视它，认为实现预期效果便是大胜利，滥用各类选择器，命名杂乱无章，为了解决bug，而写入行内式，然后在工作中顺利的发展成为一名css上的残障人士，偶尔面对曾经写过的css，总是无语凝噎，但这种情况在近期得到了控制。 BEM命名法：在初学前端时…"}, {"id": "6946008649026240519", "title": "那些年错过的React组件单元测试（下）", "desc": "上篇文章我们已经了解了前端单元测试的背景和基础的jestapi，本篇文章我会先介绍一下Enzyme，然后结合项目中的一个真实组件，来为它编写测试用例。 上一篇中我们其实已经简单介绍了enzyme，但这远远不够，在本篇的组件测试用例编写中，我们有很多地方要用到它，因此这里专门来说…"}, {"id": "6986866850088878111", "title": "react标签属性类型、是否必填、默认值的设定", "desc": "我们定义了一个类组件之后，我们会从props中获取传进来的值，但我们正常情况下希望传进来的值的属性是可以被限定的，包括这一项是否是必填项，如果没有传默认值是什么之类的。 我们可以通过 类名.propT"}, {"id": "6994806361393463304", "title": "React高级特性", "desc": "1 函数组件 2 非受控组件 3 Portals 4 context 5 异步组件 6 shouldComponentUpdate(简称SCU) 7 PureComponent"}, {"id": "6884801072821927944", "title": "使用Context处理React全局共享数据", "desc": "用Context管理数据，更贴切React原生语法，并且新版ContextAPI性能也得以提升，之前旧版的Context发生改变时，并不能准确的知道具体有哪些子组件需要更新，需要所有组件更新（内部会有小优化去bailout跳过）,新版ContextAPI更多像是一种依赖收集，将…"}, {"id": "6844903608715067400", "title": "手把手实战react + storybook组件库", "desc": "在UI组件库的开发过程中，如何方便的展示组件，测试组件，编写文档呢？storybook就提供了这样一种工具，利用它我们可以更方便地进行UI组件开发。最近一直在研究react，react和storybook的碰撞会是怎么样的呢。下面将从零开始，运用storybook手把手撸一个r…"}, {"id": "6844903923455623176", "title": "React Hooks 源码模拟与解读", "desc": "这样在每次执行的时候，就能够通过闭包的形式 来保存 value。 不过这个还是不符合 react 中的 useState。因为在实际操作中会出现多次调用，如下。 因此当重新渲染 App 的时候，再次执行 useState 的时候传入的参数 kevin , 0 也就不会去使用，而…"}, {"id": "6844903566767849480", "title": "为你的 VS Code 搭建远程开发环境", "desc": "开篇先说一下自己遇到的烦恼，介绍下写这篇文章的背景。我有一台低配的 MacBook 和 一台性能强悍的台式机。之前自己都是在 Mac 上跑前端项目的，那台台式机基本上处于闲置状态，偶尔用来看看文档。后来随着自己需要做服务端开发，有时候需要同时跑前后端数个项目，那台低配 Mac …"}, {"id": "6844904154649853960", "title": "React fiber 架构详细解读 16.13.1版本", "desc": "本文是一篇入门级源码分析类文章，对于源码了解较深者也可以阅读本文多多指点笔者一二。 其实我们在初始化生成fiber结构时，我们会给每个节点都标记成新增节点，此处我们会判断节点是否有firstEffect，如果有那么这便是子节点的副作用，即子节点，并且把它挂载到副节点上，继续判断…"}, {"id": "6918007377023205384", "title": "(译)深入了解React Fiber的内部", "desc": "我们知道ReactDom在后台构建DOM树，并将应用渲染到屏幕上。但是ReactDom是怎么构建DOm树的？当app的state改变时，它是如何更新树？ 在这篇文章中，我开始从React在15.0.0之前如何构建DOM树，这个模型的陷阱以及在16.0.0的新模型中如何解决这些问…"}, {"id": "6844903864341102599", "title": "React中的Component 和 PureComponent", "desc": "当点击pop按钮时控制台会依次打印 changeArr (4) [1, 2, 3, 4]， changeArr (4) [1, 2, 3] ...... 但是render函数不执行， 因为PureComponent实现的shouldComponentUpdate()认为值的引用…"}, {"id": "6844903814676348935", "title": "【React】戏说组件式百度图表的由来及简单逻辑", "desc": "在众多数据可视化产品中，Echarts可谓中流砥柱，其功能的强大、灵活在图表界的水平以顶尖来形容，个人感觉一点也不过分；我作为一名前端开发人员，也经常用Echarts来解决公司或个人项目中的图表需求，甚是得心应手；不得不说，在我从事研发工作多年以来，还能保持着一头乌黑的短发，E…"}, {"id": "6844903600452452366", "title": "reselect源码解读", "desc": "最近偶然想起了reselect这个库，因为面试今日头条的时候，面试官有问到，当时也回答上来了。只是有点好奇这个库是怎么做到记忆，从而达到缓存的。所以打开它的github看了一下，发现代码量不多，而且实现逻辑不难。所以就趁热写下这篇reselect源码阅读。 开始讲解代码前，我觉…"}, {"id": "6844903666973949965", "title": "React专题：组件", "desc": "刀耕火种时期的前端，HTML描述页面结构，CSS描述样式，JavaScript描述功能。它们彼此是分离的。 然而这种方式却满足不了开发者对代码复用的需求。 近几年各大前端框架做了很多探索，其中组件化就是最璀璨的成果之一。 一个组件就是一个功能模块，所有的前端元素都封装在组件内部…"}, {"id": "6936742970448150559", "title": "动手实现mini React (二)", "desc": "我们将从头开始一步一步重写React。遵循真实的React代码中的架构，但没有所有的优化和非必要的功能。 回顾上一篇文章中的render函数，我们发现直到渲染完后，才会停止。如果element很大，则它可能会阻塞主线程太长时间。而此时如果浏览器需要执行高优先级的操作（例如处理用…"}, {"id": "6844903890790383623", "title": "React: Hooks入门-手写一个 useAPI", "desc": "下面是官网文档的链接，基础知识掌握不牢靠的朋友可以再看看，官网的文档可以说是非常完整和浅出了。我的文章主要讨论具体的几个 hooks 的具体使用场景。 通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 …"}, {"id": "6844903517287612424", "title": "React Diff 算法 - 众成翻译", "desc": "React 是 facebook 出的一个前端框架. 设计的关键处就是性能问题。在本文中，我主要是介绍 Diff 算法以及 React 渲染 ，这样你可以更好的优化你的应用程序。"}, {"id": "6979126855739637790", "title": "React 中的 VirtualDOM - 实现一个精简版的VirtualDOM", "desc": "VirtualDOM是什么 Virtual DOM 对象就是DOM对象的JavaScript表现形式，就是使用JavaScript对象来描述DOM对象信息 上面代码转化为jsx代码 环境搭建 配置we"}, {"id": "6844903542419898382", "title": "如何优雅地在React项目中使用Redux", "desc": "前言或许你当前的项目还没有到应用Redux的程度，但提前了解一下也没有坏处，本文不会安利大家使用Redux概念首先我们会用到哪些框架和工具呢？ReactUI框架Redux状态管理工具，与React没有"}, {"id": "6844903622388482061", "title": "React Fiber 初探", "desc": "React Fiber是对React核心算法的重构，2年重构的产物就是Fiber Reconciler。"}, {"id": "6844903568269393928", "title": "redux middleware 源码分析", "desc": "在业务中需要打印每一个 action 信息来调试，又或者希望 dispatch 或 reducer 拥有异步请求的功能。面对这些场景时，一个个修改 dispatch 或 reducer 代码有些乏力，我们需要一个可组合的、自由增减的插件机制，Redux 借鉴了 Koa 中 mi…"}, {"id": "6844903508567654413", "title": "这可能是史上最全的菜鸟前端面试题了", "desc": "记录了很多非常有用的面试题，对于面试非常有帮助"}, {"id": "6844903872968802312", "title": "React Hooks简单业务场景实战（非源码解读）", "desc": "React Hooks 是React 16.7.0-alpha 版本推出的新特性。从 16.8.0 开始，React更稳定的支持了这一新特性。 它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 如果说promise是JavaScript异…"}, {"id": "6904537943604461575", "title": "深入浅出 React -- Hooks 的动机和概览", "desc": "完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。 100% 向后兼容的。 Hook 不包含任何破坏性改动。 现在可用。 Hooks 已发布于 v16.8.0。 React Hooks 是 React 团队…"}, {"id": "6844904127495929870", "title": "React 状态管理的几种方式示例", "desc": "提供 subscribe，dispatch，getState 这些方法。 主要是为了展示 redux 的一个工作流程，并没有把状态挂载在最顶层，详细完整版可以参考阮一峰老师的代码：Redux Counter Example。 Redux 是一款状态管理库，并且提供了 react…"}, {"id": "6844903799132258318", "title": "React高阶组件初探(1)", "desc": "它的设计思想很像设计模式中的装饰者模式，为任何需要某些数据或者逻辑代码的对象提供所需然后返回。有关装饰者设计模式的解读欢迎参考我的语雀专辑：装饰者模式 主要解决数据共享或者代码逻辑共享，提高代码可复用性、可维护性。 非常常见的是一个系统中已经登录的用户，我们是具有一定的用户信息…"}, {"id": "6844903704173215751", "title": "理解 React Hooks", "desc": "上周，Sophie Alpert 和 Dan Abramov 在 React Conf 2018 中 提出了 hooks 这个概念，让我们一起来看看 Hooks 在解决一个什么问题。"}, {"id": "6844903601383407624", "title": "react-native + mobx 入门到放弃", "desc": "作为一个刚开始看react-native的小白，找到的源码我都看不太懂，还有涉及redux的知识。后面同事介绍mobx，因此记录一下学习过程。 务必多看几遍，下面开始。 安装好所需的环境。 至此RN的demo可以正常启动。 依赖安装完成。 在根目录下创建mobxDemo文件夹。…"}, {"id": "6844904133036605453", "title": "使用 React Hooks 定制一个多级下拉的 TextArea 组件（巨详细）", "desc": "最近在业务中遇到了一个关于 多级下拉 需求，需要将后端树状数据显示在 textarea 上，同时 textArea 中也能对数据进行处理，转化为能进行多级选择树状数据。 拿问卷星的多级下拉举个例子，如下图所示，用户可以在 textArea 框进行多级下拉的数据的编写，第一行代表…"}, {"id": "6955886685510959135", "title": "React-router-dom 5.x 和 lazy懒加载 实现多层路由嵌套", "desc": "实现路由嵌套网上可以找到各种方法，在react-router-dom3.x和4.x的时候路由的嵌套是差不多的，但在5.x的时候路由嵌套变得不一样了，这也是我踩了两天坑找到的解决方案： 这是我的reac"}, {"id": "6844904101961007117", "title": "ES5和ES6函数你不知道的区别【面试篇】", "desc": "另外深圳前端求坑，有坑的大佬麻烦内推一下。 1. PolyFill 4.Hooks避免了类所需的大量开销，例如在构造器中创建类实例和绑定事件处理程序的开销。 2.使用Hooks的不需要在使用高阶组件，渲染道具和上下文的代码库中普遍存在的深层组件树嵌套。使用较小的组件树，Reac…"}, {"id": "6844903896767266823", "title": "基于React+Antd的多Tab架构", "desc": "企业后台布局常采用多tab的方式，即可通过不同tab之间的切换访问已打开的页面，如下图所示。后台管理系统中一种常见的场景为从列表页到详情页展示，多tab的形式能够更好的满足这种业务场景，尤其在不同的tab页有对比的情况下。 我们可以通过每个标签记录不同的路由的形式，即<tab,…"}, {"id": "6949033972017922084", "title": "create-react-app 支持IE（IE11/IE10/IE9）", "desc": "create-react-app创建项目之后无法在IE上正常访问。 react17版本的兼容ie9 10，可以把react-scripts的版本由4版本降到3版本，然后再执行npm run eject"}, {"id": "6844904179136200712", "title": "react hooks与class组件对比🚀", "desc": "函数组件中不能拥有自己的状态（state）。在hooks之前函数组件是无状态的，都是通过props来获取父组件的状态，但是hooks提供了useState来维护函数组件内部的状态。 函数组件中不能监听组件的生命周期。useEffect聚合了多个生命周期函数。 class组件中生…"}, {"id": "6979246070471589924", "title": "React SSR 的实现", "desc": "react ssr 其中的SSR指的是在服务端渲染组件。而组件可以在服务端渲染的根本原因就是虚拟 DOM，我们一般使用jsx来编写react组件，但其实jsx是一个"}, {"id": "6844903581674373127", "title": "Nerv - 京东高性能前端框架", "desc": "Nerv 是一款由京东凹凸实验室打造的高性能类 React 前端框架，具有极佳的性能、全面兼容IE8、支持服务器端渲染等特性，并已在核心业务中广泛使用。"}, {"id": "6879307427557146632", "title": "TypeScript怎么写React Hooks | 掘金技术征文-双节特别篇", "desc": "React Hooks 可以说是 React 新版本里比较重要的特性了，函数式组件的风格，易于管理的业务 Hooks 封装，不错的性能都是 Hooks 带来的好处。随着技术栈的更新，怎么用 TypeScript 来写 React Hooks 组件又是一个小难题，这边分享一些实战…"}, {"id": "6844903904040189960", "title": "如何在 React Hooks 项目中进行状态管理？", "desc": "1. 选手入场 一提起 React 状态管理，很多人就提也不想提。 Redux: 1 号选手，人气最高的一个，得与 react-redux 一同使用。自己不管异步，所以常听到的什么 redux-thunk、redux-saga 是其下属，专门擦屁股的。特点就是难用，如果按照官方…"}, {"id": "6919282527324602382", "title": "React & Vue2 Butterfly图编排——让数据更自由地驱动DAG流程图", "desc": "Butterfly是由阿里云-数字产业产研部孵化出来的的图编辑器引擎，由咱们部门以及其他开发者共同维护开发，具有使用自由、定制性高的优势，已支持集团内外上百张画布，不夸张的说，我觉得可以算的上“杭州余杭区最自由的图编辑器引擎”。 可是，由于大多数用户对于原生的jquery操作还…"}, {"id": "6844903680915800077", "title": "从路由原理出发，深入阅读理解react-router 4.0的源码", "desc": "react-router等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面。路由的本质就是页面的URL发生改变时，页面的显示结果可以根据URL的变化而变化，但是页面不会刷新。通过前端路由可以实现单页(SPA)应用,本文首先从前端路由的原理出发，详细介绍了前端路由…"}, {"id": "6894963612687958024", "title": "你知道useRef可以实现哪些功能吗？", "desc": "之前其实对于useRef使用的并不多，但在最近公司的新项目开发中，碰到了许多需要使用useRef来解决的业务场景，顺便也对useRef好好的研究了一番，以此文作为学习的总结。 注意：本文只介绍现在hooks中的useRef、forwardRef以及useImperativeHa…"}, {"id": "6844903620744314893", "title": "QQ音乐：React v16 新特性实践", "desc": "自从去年9月份 React 团队发布了 v16.0 版本开始，到18年3月刚发布的 v16.3 版本，React 陆续推出了多项重磅新特性，并改进了原有功能中反馈呼声很高的一些问题，例如 render 方法内单节点层级嵌套问题，提供生命周期错误捕捉，组件指定 render 到任…"}, {"id": "6844903959237230605", "title": "【React系列】动手实现一个react-redux", "desc": "react-redux 是 redux 官方 React 绑定库。它帮助我们连接UI层和数据层。本文目的不是介绍 react-redux 的使用，而是要动手实现一个简易的 react-redux，希望能够对你有所帮助。 首先思考一下，倘若不使用 react-redux，我们的 …"}, {"id": "6844903607964270606", "title": "记一次XX前端面试", "desc": "距离自己被外派(俗称外包)出去，已经过了快五个月，工作的话，很闲。人啊，一定保持好的习惯，懒惰是会上瘾，日常摸鱼，怀疑人生，我是谁，我在哪，我要干什么。 中午吃饭的时候，收到了boss直聘的一条消息，XX发来一个信息，是一个前端职位，问我是否感兴趣，讲道理，我还是很诧异的，一是…"}, {"id": "6844903869378641933", "title": "React性能测量和分析", "desc": "上一篇文章讲了 React 性能优化的一些方向和手段，这篇文章再补充说一下如何进行性能测量和分析, 介绍 React 性能分析的一些工具和方法. 进行任何性能优化的前提是你要找出’性能问题‘，这样才能针对性地进行优化。我觉得对于 React 的性能优化可以分两个阶段: 1. 分…"}, {"id": "6992909985021689887", "title": "React必知必会(二)-React Hooks实践", "desc": "但单就观察我们公司几个团队中的代码，发现用法千奇百怪，有不少错用、滥用的情况，理解的不是很透彻。我整理了一些供大家鉴赏，避免踩坑；"}, {"id": "6844903608555667469", "title": "论如何实现一个完美的Select组件", "desc": "下拉列表组件Select可以是前端使用频率最高的UI组件之一。正因此，原生HTML也存在这一标签。但由于对UI的较高追求及统一规范，我们往往不会去使用即不好看又不统一的原生Select标签，而是自己实现。能够写出一个“多数场景下能用”的Select组件，并没有什么难度。直到遇到…"}, {"id": "6844903504557916173", "title": "移动端踩坑之旅-ios下fixed失效，软键盘等", "desc": "最近一个项目掉进了移动端的大坑，包括ios下fixed布局，h5唤起键盘等问题，作为一个B端程序员，弱项就是浏览器的兼容性和移动端的适配(毕竟我们可以要求使用chrome)，还好这次让我学习了一下相关知识。让我们一起来看一下我怎么挣扎出这个大坑的。 先看一下要做什么，也就是一个…"}, {"id": "6844903713866252296", "title": "ES6 系列之我们来聊聊装饰器", "desc": "我们可以在 Babel 官网的 Try it out，查看 Babel 编译后的代码。 我们可以看到 Babel 构建了一个 _applyDecoratedDescriptor 函数，用于给方法装饰。 顺便注意这是一个 ES5 的方法。 此时传入 _applyDecorated…"}, {"id": "6990338818129788935", "title": "react+ts白手起家建个属于自己的项目（二  应用篇）", "desc": "目标 1、配置路由 使用react-router-dom 官方文档 https://reactrouter.com/web/guides/quick-start 项目目录 app.jsx代码 home"}, {"id": "6844904122550845448", "title": "精读《@types react 值得注意的 TS 技巧》", "desc": "从 @types/react 源码中挖掘一些 Typescript 使用技巧吧。 泛型可以指代可能的参数类型，但指代任意类型范围太模糊，当我们需要对参数类型加以限制，或者确定只处理某种类型参数时，就可以对泛型进行 extends 修饰。 问题：React.lazy 需要限制返回…"}, {"id": "6982219930905575432", "title": "TypeScript + React 个人最佳实践(WIP持续补充中)", "desc": "React + TypeScript 个人最佳实践；本文最初发布于个人博客：https://moltemort.top/post/typescript-react-ge-ren-zui-jia-shi"}, {"id": "6844903588200726535", "title": "JavaScript 装饰器极速指南", "desc": "Decorators 是ES7中添加的JavaScript新特性。熟悉Typescript的同学应该更早的接触到这个特性，TypeScript\b早些时候已经支持Decorators的使用，而且提供了ES5的支持。\b\b本文\b会对Decorators做详细的讲解，相信你会体验到它给…"}, {"id": "6844903694870265870", "title": "React 中同构（SSR）原理脉络梳理", "desc": "随着越来越多新型前端框架的推出，SSR 这个概念在前端开发领域的流行度越来越高，也有越来越多的项目采用这种技术方案进行了实现。SSR 产生的背景是什么？适用的场景是什么？实现的原理又是什么？希望大家在这篇文章中能够找到你想要的答案。 服务器端渲染：用户请求服务器，服务器上直接生…"}, {"id": "6844903850646700045", "title": "Next.js 服务端渲染框架实战", "desc": "第一次在掘金上发布文章，本着学习的态度，将自己运用Next.js开发服务端渲染的项目复原总结出来，巩固知识点，也可以跟同行探讨下技术。（文章不断完善中...） 公司原有项目基于PHP和jQuery混合开发的，提出重构需求。但是后端技术栈由PHP更替为Java微服务,前端技术栈也…"}, {"id": "6937843682829828109", "title": "技术期刊 · 扬帆截海行 | 前后端协作模式面临革新;跳动的 React Fiber;系统设计是前端的基础课;机器学习是新时代的魔法", "desc": "距离上次和大家见面，已是有些时日，不知道有多少人还记得小助手一直在「凹凸实验室」等着大家呢？本期蒲公英作为辛丑牛年的首刊，也希望可以和大家一同犇牛年，在新年里牛气冲天。"}, {"id": "6981993522396135461", "title": "记录：React Router知识点总结(一)", "desc": "前置知识：浏览器记录历史和跳转 这部分大多数人都有了解，这里简单总结一下勾起你们的记忆： 无刷新跳转有两种模式：window.history.pushState(replaceState)和locat"}, {"id": "6844903806128357383", "title": "使用 React + Koa 从零开始一步一步的带你开发一个 36kr SSR 案例（一）", "desc": "也许你看过其他的ssr教程都会先说一说spa和ssr的区别以及优缺点，但是我相信能点进来看的小伙伴们肯定是对这两个概念有过了解的，也无需我在这里多费口舌。不懂的可以直接看这里 首先我们创建一个react-ssr文件夹, 执行git init初始化git仓库，添加如下目录和文件。…"}, {"id": "6879414380472533000", "title": "React中的样式和动画", "desc": "Vue在CSS上虽然不能称之为完美，但是已经足够简洁、自然、方便了，至少统一的样式风格不会出现多个开发人员、多个项目采用不一样的样式风格。 当然，我们可以通过原生的CSS来实现这些过渡动画，但是React社区为我们提供了react-transition-group用来完成过渡动…"}, {"id": "6944245558865297415", "title": "在bigo前端实习三个月的总结", "desc": "1. 团队协作 在家或者在学校的时候，一直都是自己独立地开发项目，前后端都是自己一个人梭哈，怎么写，任凭自己主宰，在这种独自一人开发的模式中，对于团队协作模式可谓是一无所知。 后来，实习期间，经过几次版本的迭代之后，对于团队协作开发模式已经有了整体上的认知。例如一个项目的需求周…"}, {"id": "6844903869604986888", "title": "这一次彻底搞定useReducer-使用篇", "desc": "我们在第一篇文章中介绍了JavaScript中的reducer以及他的一些特点，对reducer不熟悉的小伙伴可以先看看第一篇。 React Hook功能正式发布之后，允许在function component中拥有state和副作用（useEffect）。官方提供了两种sta…"}, {"id": "6844903709579673607", "title": "2. React-Router的基本使用", "desc": "1. Context - React跨组件访问数据的利器 3. react-router-dom源码揭秘 - BrowserRouter 今天再给大家带来一篇翻译文章。 这篇文章，是我们react-router-dom源码揭秘系列的第二篇文章。同样是预备知识。 想看第一篇文章的…"}, {"id": "6844903873656832014", "title": "搭建自己的React+Typescript环境（一）", "desc": "然后在webpack.common.js中简单的配置入口(entry)跟输出(output)。 接着在根目录下再新建src文件夹，用来存放主要代码，并新建index.js，随便写点东西。 webpack4中提供了 mode 配置选项，告知 webpack 使用相应模式的内置优化…"}, {"id": "6844903571197018126", "title": "要做软件工程师，而不是前端工程师", "desc": "最近几个月一直有些事情没有想通，但可幸的是，有些问题的答案逐渐开始明朗起来了。好久没写文章，籍此献上一篇短文。 当初准备毕业的时候，其实并没有想过要当前端工程师，毕竟当时基本都是全栈（PHP + jQuery）。但由于并不是科班出身（大学读Business），自信心不足，以及机…"}, {"id": "6923064139266916365", "title": "Virtual DOM本来是做什么用的", "desc": "对于Virtual DOM这个概念应该是人尽皆知才对，那就是为了减轻浏览器的DOM操作，带来性能的提升，然后它带来了一个良好的副作用，那就是实现了跨平台的渲染。 跨平台本来只是它的副作用，但是很多人却把它理解成了VDom的设计目的，这种本末倒置的认知使很多人对VDom的优化作用…"}, {"id": "6984779312087957512", "title": "React 源码阅读 - 准备工作", "desc": "下载源码 首先，去 Github 找到 React 的源码库，然后 fork 到自己的库。 以我的 fork 库为例： 然后，再添加一下主库： 可以使用以下命令从主库更新代码： 安装依赖 推荐使用 y"}, {"id": "6844903814743474183", "title": "理解 React 轻量状态管理库 Unstated", "desc": "在React写应用的时候，难免遇到跨组件通信的问题。现在已经有很多的解决方案。 自身状态管理短板的补充。而Redux和Mbox这两个库本身并不是为React设计的，对于一些小型的React应用 比较重。 Unstated是基于context API。也就是使用React.cre…"}, {"id": "6981267893388312583", "title": "从首次渲染了解React Fiber架构", "desc": "从首次渲染了解React Fiber架构，一起学习fiber架构以及lanes架构下的reactjs。"}, {"id": "6844904003831070727", "title": "前后端分离下前端权限处理", "desc": "权限在我看来指的是某个用户是否能够访问某个接口。对应到前端，即使某个用户访问了一个本不应该让他看到的页面，在访问接口时不具备权限，这样即使进入了页面，也不能看到相应的数据。但是我们前端要做的工作就是让用户在访问这个页面的时候，直接就收到提示，没有权限。 但现在许多项目中页面路由…"}, {"id": "6844904122588594184", "title": "路由页面跳转后状态保存实践", "desc": "“路由页面跳转后状态保存”指的是在开发业务需求过程中经常会碰到的一种情况——在一个页面（通常是表格页）进行一顿猛如虎的操作之后，点击某一项详情进入另外一个页面之后再返回（点击后退按钮），上一页还可以保持原先的状态不变（页面、搜索词等）。 主要是为了用户体验。试想一下当你辛辛苦苦…"}, {"id": "6844903635751534605", "title": "前端实现弹幕效果的方法总结(包含css3和canvas的实现方式)", "desc": "之前在一个移动端的抽奖页面中，在抽奖结果的展示窗口需要弹幕轮播显示，之前踩过一些小坑，现在总结一下前端弹幕效果的实现方式。 1. css3实现乞丐版的弹幕 其中如果I）中和II）中的属性发生变化会发生reflow(回流)，如果仅仅III）中的属性发生改变，只会发生repaint…"}, {"id": "6844903507225477127", "title": "vscode 前端插件推荐", "desc": "推荐一波常用的 vscode 前端插件，让你的写代码的效率提高"}, {"id": "6934660187668086791", "title": "基于 react + electron 开发及结合爬虫的应用实践🎅", "desc": "此时我们可以运行yarn start 将之前的react起始页通过桌面程序的方式打开，也可以通过执行yarn build 将我们的桌面程序打包生成.exe文件进行安装 over。 ipcMain 和 ipcRenderer 都是 EventEmitter类的一个实例。而Even…"}, {"id": "6990896895077908487", "title": "通过CRA (create-react-app) 和 craco+craco-alias 创建的typescript模版项目如何设置alias path ", "desc": "问题背景： 使用cra创建的项目每一次重启都会重置tsconfig.json, 导致在tsconfig.json设置的别名失效。 解决方法 方法1 启动项目之后，手动修改tsconfig.json 文"}, {"id": "6892604247893147656", "title": "React15和React16生命周期对比，初识Fiber", "desc": "1. 初始化阶段 2. 更新阶段 3. 卸载阶段 这里需要注意的是更新阶段，componentWillReceiveProps是由父组件触发的更新，只要父组件更新，子组件的该生命周期就会被执行，跟props无关。同是，shouldComponentUpdate可以用来做性能优化…"}, {"id": "6980231770058784781", "title": "React系列实战篇：留言功能（三）", "desc": "我们使用了 React 组件间通信的相关知识，组件化的内容将之前的实战案例进行改版，优化之前的实战方案。"}, {"id": "6856947122894274574", "title": "React hooks中swr的原理和源码解析", "desc": "swr是一个hook组件，可以作为请求库和状态管理库，本文主要介绍一下在项目中如何实战使用swr，并且会解析一下swr的原理。从原理出发读一读swr的源码 首先从缓存中取数据，然后去真实请求相应的数据，最后将缓存值和最新值做对比，如果缓存值与最新值相同，则不用更新，否则用最新值…"}, {"id": "6844904157829136398", "title": "React Hooks 使用详解及实际项目中遇到的坑", "desc": "一. useState 1. useState基本使用 2. 使用push，pop，splice等直接更改数组对象的坑 正确的方法应该是使用数组解构生成一个新数组，在数组后面加上我们新增的随机数达成数组新增项，使用filter数组过滤方法来实现我们删除其中项的操作。 3. 每次…"}, {"id": "6961767095298342925", "title": "react+node实现大文件的断点续传", "desc": "实际项目中可能有这样的需求，如上传入库比较大的Excel表格数据、上传影音文件等。如果文件体积比较大，或者网络条件不好时，上传的时间会比较长，有的时候用户遇到断网，甚至有的用户文件传到一半不想继续等待"}, {"id": "6984684563985334280", "title": "Next.js基础文档摘要", "desc": "React官方文档上面提到过Next.js，Dan大师也提到过，但是对Next.js还是一知半解，所以Next.js的灵魂到底什么，这引导着我去阅读了一下Next.js的基础文档。"}, {"id": "6978387361755299870", "title": "写一个在线制作图编辑器", "desc": "写一个在线制作图编辑器,由于最近项目要支持，图形编辑这么一个需求，希望可以自定义图标，连接线等等功能"}, {"id": "6844903925598912525", "title": "使用concent，体验一把渐进式地重构react应用之旅", "desc": "上周天气其实不是很好，记得下了好几场雨，不过北京总部大厦的隔音太好了，以致于都没有感受到外面的风雨飘摇，在工位上正在思索着整理下现有代码时，接到一个普通的需求，大致是要实现一个弹窗。 左侧有一个可选字段列表，点击任意一个字段，就会进入右侧。 右侧有一个已选字段列表，该列表可以上…"}, {"id": "6971218181310709768", "title": "记录一些React扩展内容的笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844904046839463950", "title": "react 移动端下拉刷新", "desc": "pullDownRefresh选项，用来配置下拉刷新功能。当设置为 true 或者是一个 Object 的时候，开启下拉刷新，可以配置顶部下拉的距离（threshold）来决定刷新时机，以及回弹停留的距离（stop） 监听 pullingDown 事件，刷新数据。并在刷新数据完…"}, {"id": "6917073781412331533", "title": "React原理解析第一篇：核心概念", "desc": "作为一个构建用户界面的库，React的核心始终围绕着更新这一个重要的目标，将更新和极致的用户体验结合起来是React团队一直在努力的事情。为什么React可以将用户体验做到这么好？我想这是基于以下两点原因： Fiber架构和Scheduler出色的调度模式可以实现异步可中断的更…"}, {"id": "6844903744652443661", "title": "这，就是飞冰物料", "desc": "最近在讨论“飞冰物料”的时候，有位设计专家对飞冰“区块” 的概念提出争议，认为区块这个词在她看来不容易理解，观点是社区没有区块这个概念，只听说过区块链没听说过区块，建议我们将“区块”改成“场景”，由于当时我们在会议，没有花过多的时间去讨论这件事请。那么，这里引申出来的一个问题是…"}, {"id": "6844904015747104775", "title": "深度挖掘Concent的effect，全面提升useEffect的开发体验", "desc": "在hook还没有诞生时，我们通常都会在class内置的生命周期函数componentDidMount、componentDidUpdate、componentWillUnmount书写副作用逻辑。 这样的类似代码是你100%一定曾经写过的，表达的含义也很简单，组件初次挂载完毕时…"}, {"id": "6969335440839016455", "title": "详解4种不同的React组件设计模式", "desc": "作为React的使用人员，本人在做组件库开发时，一般会思考以下下问题： 怎么才能让组件适配更多的使用场景？ 怎么才能设计出比较简单并且合理的API，让它变得易用？"}, {"id": "6982925334010134542", "title": "解决：Warning: Instance created by useForm is not connect to any Form element.", "desc": "问题描述 Ant Design组件库 Modal组件里面使用Form组件的时候，遇到如下图错误 github.com 上有很多对这个问题的描述。比如 https://github.com/ant-de"}, {"id": "6844904054351462413", "title": "手摸手，打造属于自己的 React 组件库03 — 打包篇", "desc": "在前面的部分，我们使用 React 等相关技术构建了库并对其进行了测试。现在，我们准备对前面的代码进行打包，并将其发布至 NPM，方便其他人使用。 组件库开发到了这里，终于也到了最重要的部分，解决（文档 + 打包）的问题。 在尝试了一些打包库（比如create-react-li…"}, {"id": "6900363133702995975", "title": "[译]-你的 React 组件的闻起来怎么样？", "desc": "传递多个 props 到一个组件中暗示着也许这个组件应该被拆分。 你可能会问多少才算太多呢？嗯....“看情况”。你也许会面对这样一种情况，一个组件有着 20 或更多个 props ，但是你依然感到没问题，因为这个组件只做一件事。不过，当你被一个有太多 props 的组件给绊住…"}, {"id": "6846687604130185230", "title": "React 中的不可变数据 — Immer", "desc": "Immer 是一个不可变数据的 Javascript 库，让你更方便的处理不可变数据。 不可变数据概念来源于函数式编程。函数式编程中，对已初始化的“变量”是不可以更改的，每次更改都要创建一个新的“变量”。 Javascript 在语言层没有实现不可变数据，需要借助第三方库来实现…"}, {"id": "6938015375946678302", "title": "React 构建聊天界面", "desc": "项目创建React体验开箱即用实现步骤-目录定义基于antd.design-pro脚手架在layouts添加聊天界面布局在pages目录添加聊天界面文件结构配置访问路由config/routes.js"}, {"id": "6906439652048273422", "title": "React 项目中 axios 的封装和API接口的管理", "desc": "在react项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御XSRF等。如果还对axios不了解的，可以移步axios…"}, {"id": "6956164682876977188", "title": "qiankun下子应用keep-alive的方案与原理", "desc": "keep-alive 先说下keep-alive的效果，首次在某个容器内渲染一个子应用，然后路由切换，容器渲染其他子应用。路由再次切回，容器渲染之前的子应用并且保留之前子应用的状态。 这种听起来很简单"}, {"id": "6887838157874659341", "title": "React Hook 从入门应用到编写自定义 Hook", "desc": "每次提及 Hook 时，只能说得出 useState 以及 useEffect 来。是得好好总结总结，全面认识 Hook 。 自定义 Hook ，常见 Hook 的实现。 React Hooks 的意思是，组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码\"钩\"进…"}, {"id": "6976089047093641247", "title": "React系列五：创建React组件", "desc": "这节我们将介绍 React 中组件的类别，以及如何创建和使用组件。组件(Components) 让你可以将用户界面分成独立的，可复用的小部件，并可以对每个部件进行单独的设计。"}, {"id": "6906401150929469453", "title": "React Hook 快速上手", "desc": "在React Hook出现之前的版本中，组件主要分为两种：函数式组件和类组件。其中，函数式组件通常只考虑负责UI的渲染，没有自身的状态也没有业务逻辑代码，是一个纯函数。而类组件则不同，类组件有自己的内部状态，界面的显示结果通常由props 和 state 决定，因此它也不再那么…"}, {"id": "6885207101052813319", "title": "微信H5 React + Umi 开发实践总结", "desc": "最近一直在做H5公众号的需求，使用的技术栈如标题，从立项目到稳定增长阶段，前端使用React随着业务需求从0到1把项目搭建起来，get了很多React+H5+微信场景下的知识点，把最近的实践总结下，有需要使用React上手微信H5的可以参考，大家一起交流哈😀。 React+H…"}, {"id": "6890810591968477191", "title": "谈谈我对服务端渲染(SSR)的理解", "desc": "在阅读文章之前，让我们先明白几个概念。 SPA（Single Page Application）： 单页面应用程序，是前后端分离时提出的一种解决方案。在一个应用或者站点中，只有一个完整的html页面，这个页面有一个容器root节点，可以把需要加载的代码片段插入到该容器中。 SP…"}, {"id": "6844903832888016903", "title": "react实现一个分页、搜索高阶组件", "desc": "先感谢掘金这个平台让我可以看到别人的思想，别人的智慧。说真的，在这个平台上还是看到了许多有营养的文章。目前的我是产不出像大佬那样富有营养的文章，那就记录一点我在工作中的事情，如有说错的地方或是有不合理的地方，希望各位大佬指出。 项目的背景是做一个总管理后台，我的那个项目直接用的…"}, {"id": "6844903688801107976", "title": "React服务端渲染（项目搭建）", "desc": "目前单页面应用（SPA）很是流行，同时也带了一些问题，如SEO不友好，首屏在网络较差的情况下加载慢。为了解决这些问题仿佛又回到了传统web开发模式上去了，回去是不可能的，已经入坑了是不可能回去的。React作为一个SPA应用开发框架同时也支持服务端渲染，本系列文章将从以下几点介…"}, {"id": "6863336367309455373", "title": "手把手带你入门 NextJs（v9.5）", "desc": "Next.js 之前用过一次，这次是重新做个小回顾，现在最新版本已经到了 9.5.3，有些 API 也同以前有点不同了，网上大部分教程也都是旧版本 v7 的比较多，故打算写下简单的教程，绝对详细的带你入个小门。 比如创建 pages/about/about.js，那么访问地址为…"}, {"id": "6926441875784073223", "title": "[实践向] 从小白视角实现React的Fiber架构", "desc": "创作本篇博客的初衷是，在浏览社区时发现了https://pomb.us/build-your-own-react/这篇宝藏文章，该博主基于react16之后的fiber架构实现了一套react的简易版本，非常有助于理解react工作原理。但是苦于只有英文版本，且偏向理论。 本着…"}, {"id": "6900700792391467021", "title": "记一次给create-react-app提的PR", "desc": "前些日子, 在项目发布的过程中CI突然报错了。我一看日志, 原来是来自于一段css代码的报错, 内容大致如下: 本文就以上三个问题, 与大家展开讨论。 既然错误是与css有关的, 那么我们自然是找到webpack中关于css处理的部分。根据排除法, 我最后把目光锁在了以下代码:…"}, {"id": "6844903585453441032", "title": "抱歉，学会 Proxy 真的可以为所欲为", "desc": "Proxy 是 JavaScript 2015 的一个新特性，下面让我们看看他实现哪些有趣的东西。 在 JavaScript 里，我们通常用一个对象来表示枚举值。 但这往往是不安全，我们希望枚举值： 如果不存在的话，报错。 不允许动态设置，否则报错。 不允许删除，否则报错。 我…"}, {"id": "6922311138847752200", "title": "奇思妙想，动手 DIY 你的浏览器主页", "desc": "大家好我是鱼皮，前段时间上线了一个程序员必备的浏览器主页，得到了很多同学的好评。 其实项目本身不需要复杂的技术，相反，仅需要一点点前端基础就可以完成。 1. 需求分析 在开发一个项目之前，要明确自己的目标。 我要做的很简单，就是一个精简的浏览器主页。虽然火狐、Chrome 的默…"}, {"id": "6954661977469747213", "title": "万字长文详解如何搭建一个属于自己的博客（纯手工搭建💪💪）", "desc": "因为本身自己几年前就搭建了自己的博客系统，那时候博客系统前端基本上都是基于vue的，而现在用的react偏多，于是用react对整个博客系统进行了一次重构，还有对以前存在的很多问题进行了更改与优"}, {"id": "6844903844711759880", "title": "React组件设计实践总结04 - 组件的思维", "desc": "在 React 的世界里”一切都是组件“， 组件可以映射作函数式编程中的函数，React 的组件和函数一样的灵活的特性不仅仅可以用于绘制 UI，还可以用于封装业务状态和逻辑，或者非展示相关的副作用, 再通过组合方式组成复杂的应用. 本文尝试解释用 React 组件的思维来处理常…"}, {"id": "6844904022143434766", "title": "Redux 包教包会（二）：引入 combineReducers 拆分和组合状态逻辑", "desc": "在这一部分中，我们将趁热打铁，运用上篇教程学到的 Redux 三大核心概念来将待办事项的剩下部分重构完成，它涉及到将 TodoList 和 Footer 部分的相关代码重构到 Redux，并使用 Redux combineReducers API 进行逻辑拆分和组合，使得我们可…"}, {"id": "6844903543346839560", "title": "React应用架构设计指南", "desc": "在上一篇我们介绍了Webpack自动化构建React应用，我们的本地开发服务器可以较好的支持我们编写React应用，并且支持代码热更新。本节将开始详细分析如何搭建一个React应用架构。 现在已经有很多脚手架工具，如create-react-app，支持一键创建一个React应…"}, {"id": "6888474653992419335", "title": "蒲公英 · JELLY技术周刊 Vol 27: 平平无奇 React 17", "desc": "伴随着 WebAssembly 的面世，越来越多的 Javascript 工具选择使用 Rust 语言来开发。众所周知，Javascript 是单线程的，基于事件循环和垃圾回收机制；而 Rust 则是基于静态类型、没有垃圾回收机制且支持多线程的。那么，使用 Rust 开发 we…"}, {"id": "6990619022358233102", "title": "使用React+redux+Node.js+MongoDB开发后台管理系统【环境】", "desc": "1.用户登陆 2.表单增删改查【动态交互】 ---用express+mongoDB+react搭建的简单后台管理系统"}, {"id": "6854573220931207181", "title": "重学Hooks——useEffect", "desc": "以下展示了count改变的来源，并非是通过事件监听或是事件绑定或是代理等对count本身做出的改变，而是重新创建了一个count， 新创建的count值是最后一次改变的state中的count. 我们发现，每次调用的count和handleAlertClick，都是重新创建的c…"}, {"id": "6844903815586512910", "title": "基于Ant Design的可编辑Tree的实现", "desc": "最近在用Ant Design写一个后台，遇到的需求就是实现一个可动态增减和编辑子节点的Tree。GitHub上看了一圈，没好用和合适的。索性就基于Ant Design中的Tree组件写一个。实现的效果如下： 主要的就是借助 TreeNode 的 title 属性，它的类型是st…"}, {"id": "6981396644390993933", "title": "Taro 3.x  + taro-ui + typescript + dva 搭建微信小程序", "desc": "taro + taro-ui cli工具安装 查看taro版本信息 项目初始化 npm 5.2+ 也可在不全局安装的情况下使用 npx 创建模板项目： 运行项目 dva dva 首先是一个基于 red"}, {"id": "6977367229960552455", "title": "React父组件调用子组件的方法", "desc": "在React中，我们经常在子组件中调用父组件的方法，一般用props回调即可。但是有时候也需要在父组件中调用子组件的方法，通过这种方法实现高内聚。有多种方法，请按需服用。"}, {"id": "6844903666860687373", "title": "前端使用puppeteer 爬虫生成《React.js 小书》PDF并合并", "desc": "知道这启动浏览器打开页面关闭浏览器主流程后，再来看几个API。 2.4 知道了以上这些API后，就可以开始写主程序了。 简单说下：实现功能和主流程。从上面React.js小书截图来看。 1、打开浏览器，进入目录页，生成0. React 小书 目录.pdf 2、跳转到1. Rea…"}, {"id": "6974543111108165663", "title": "React认知--hooks和hooks轮播图案例", "desc": "一、hooks介绍和应用场景 hooks是16.8之后出现的新特性，React团队希望，组件不要变成复杂的容器，最好只是数据流的管道。开发者根据需要，组合管道即可。组件最佳的写法是函数，而不是类。Re"}, {"id": "6844903591484866568", "title": "Webpack 4 使用指南", "desc": "最近想学一学Webpack,在网上看了很多相关文章,但是Webpack更新的太快了,很多文章都不适用weback新的版本,我从头开始研究了一番,在这里和大家分享交流一下,有错误的地方请指出. webpack-dev-server 等... 一 . 搭建一个webpack项目 W…"}, {"id": "6844903590339821575", "title": "「面经：面试 ThoughtWorks | 掘金技术征文」", "desc": "我是一名web前端程序员，说真的TW的面试真的很有意思，也很有心意，让我在整个面试过程中不仅仅了解到自己的优势，并且看到了自己的不足之处，先不说面不面得上，面试的过程都是一次很不错的经历。 早在大学里，就对于TW有了解，技术大牛，极客思想，扁平化管理，出国经历。非常的吸引我这样…"}, {"id": "6844903589907808269", "title": "styled-components：一本通", "desc": "虽然在vue这样的框架里我们能在.vue文件里将css、js、html写在一起，但实际上它们的联系很弱，特别是js和css，它们完全无法沟通。 而styled-components很好的解决了这个问题，通过它，我们能让整个css架构跟着组件走，而不再仅仅是貌合神离的被放置在一个…"}, {"id": "6844903609776209927", "title": "React 快速上手 - 07 前端路由 react-router", "desc": "0. 安装 1. 先跑一个简单例子 2. 基础使用 BrowserRouter 是需要服务端配合, 是基于html5的pushState和replaceState的，很多浏览器不支持，存在兼容性问题。 需要匹配的将要被重定向路径。 若为真，重定向操作将会把新地址加入到访问历史记…"}, {"id": "6977921862923714574", "title": "网易云音乐练手总结", "desc": "1. 轮播图和歌词解析，歌曲播放 2. 熟练函数式组件以及相关的库使用 3. 封装各种工具函数，加强"}, {"id": "6844904193958887431", "title": "由浅入深React的Fiber架构", "desc": "目的是初识fiber并实现react基础功能，请带着下面几个问题去阅读此文。 JavaScript是单线程运行的。在浏览器环境中，他需要负责页面的JavaScript解析和执行、绘制、事件处理、静态资源加载和处理。而且只能一个任务一个任务的执行，如果其中某个任务耗时很长，那后面…"}, {"id": "6916752751875751943", "title": "React导航守卫介绍【七日打卡】", "desc": "在前面《React路由介绍》博文中，介绍了React路由相关知识，在实际项目开发过程中，路由之间的跳转必定涉及权限、用户是否登陆等限定条件的判定，故需要导航守卫来完成这一事项。 正如其名，vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。 当一个导航触发…"}, {"id": "6844903874692661255", "title": "Deep In React 之浅谈 React Fiber 架构（一）", "desc": "2016 年都已经透露出来的概念，这都 9102 年了，我才开始写 Fiber 的文章，表示惭愧呀。不过现在好的是关于 Fiber 的资料已经很丰富了，在写文章的时候参考资料比较多，比较容易深刻的理解。 React 作为我最喜欢的框架，没有之一，我愿意花很多时间来好好的学习他，…"}, {"id": "6844903711991414791", "title": "[译] React 的今天和明天 I —— 现状和问题", "desc": "早上好。大家好，欢迎来到 React 大会。今天来到这里我感到非常激动。我非常高兴可以给你们做开场演讲。 我是 Sophie Alpert，个人主页是 sophiebits.com。我是 Facebook 的 React 核心小组的开发经理。 你们正在使用的 React 做的很…"}, {"id": "6844904164531634190", "title": "vue-router和react-router使用的异同点", "desc": "当路经匹配到/user/name时。name组件渲染到user.vue中的router-view的位置，uer组件渲染到App.vuew的router-view的位置 params当<Route to='/user/:id'/ component={user}>，访问/user…"}, {"id": "6990635194415841288", "title": "React 18 新特性（一）：自动批量更新", "desc": "本文介绍了 React 18 的自动批量更新特性，和之前版本的批量更新进行了对比。并且使用代码模拟了批量更新的不同实现思路。"}, {"id": "6919629280012042254", "title": "深挖React的completeWork", "desc": "点击进入React源码调试仓库。 每个fiber节点在更新时都会经历两个阶段：beginWork和completeWork。在Diff之后（详见深入理解React Diff原理），workInProgress节点就会进入complete阶段。这个时候拿到的workInProgr…"}, {"id": "6986177658614710309", "title": "React-Hook 原理实现", "desc": "文章导读： React-Hook 基本使用 useState 实现 useCallback 实现 useMemo 实现 useReducer 实现 useContext 实现 useEffect 实现"}, {"id": "6927460378519535629", "title": "即将回家过年，一个“批量下载”需求，差点翻了车!｜牛气冲天新年征文", "desc": "需求是这样的：点击一个下载按钮，批量下载多份zip资料，举个🌰，点击按钮，后端返回一个下载地址 Url 的数组，然后，需要前端一次性触发下载。 因为下载地址和当前系统不是同域！！这是浏览器的安全机制。 而且这个下载，页面还有抖动，这方案算是废了。 然后我就想到了iframe,…"}, {"id": "6981831831112908831", "title": "一名中/高级前端工程师的自检清单-React 篇", "desc": "你真的了解 React 吗？我们在面试中往往涉及 React 时，第一个问题就是“解释 React 是什么”。解释一种技术是什么，在面试中也是非常常见的引起 话题的题目。本篇文章我就带你掌握这一类概念"}, {"id": "7004480139660623879", "title": "如何强制更新一个Hooks组件", "desc": "~~~jsx const [updater,setUpdater] = useState(0); function forceUpdate(){ setUpdater(updater => updat"}, {"id": "6993989302052978725", "title": "React源码系列之六：hooks之useContext", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第二篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6998827833187385358", "title": "React--13:引出生命周期", "desc": "这是我参与8月更文挑战的第20天，活动详情查看:8月更文挑战 例子： 点击按钮，文字从0变为1，再从1变为0 点击按钮，让组件消失 给按钮加点击事件 卸载组件 API：unmountComponent"}, {"id": "7005756611079733256", "title": "Immutable.js与React和Redux实践", "desc": "转载至Immutable.js与React和Redux实践 本篇文章将聚焦Immutable与Redux的项目实践，将从多方面阐述Immutable及Redux：包括什么是Immutable，为什么需"}, {"id": "7004394903643881503", "title": "react 配置代理", "desc": "const proxy = require('http-proxy-middleware') module.exports = function(app){ app.use( proxy('/"}, {"id": "7000175917842563086", "title": "56 个NPM 包解决 16 个 React 问题", "desc": "React 是用于构建用户界面的 JavaScript 库，它不仅是一个前端 UI 开发框架，更是一套完整的前端开发生态体系。 虽然 React 没有包含所有的解决方案，但是我们可以从繁荣的生态系统中"}, {"id": "6976212516850532365", "title": "从Vue2.0到React17——React中实现Vue指令", "desc": "Vue提供了一些列的指令，帮助我们快速开发组件，如最常用的`v-model`、`v-show`、`v-if`、`v-for`，这些指令的功能在React中是如何提供的。"}, {"id": "7007246038322905101", "title": "使用antd的upload组件上传", "desc": "上传文件 设定只准上传一个文件 文件数据存放 使用upload组件 upload API配置： fileProps 调用后端接口上传 uploadFile上传文件后，返回地址URL， saveNeed"}, {"id": "6965303670154100773", "title": "React核心成员表示：JSX就是个错误", "desc": "近日，在一场关于JSX的讨论中，React核心成员Sebastian Markbåge（Hooks作者）表示： 他更推崇SwiftUI语法，并认为JSX就是个错误。 JSX最早由Facebook提出并"}, {"id": "6992493698667773960", "title": "这一次，理解透彻常用React性能优化", "desc": "性能优化--keys 渲染中keys的作用 key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。在ReactDiff算法中React会借助"}, {"id": "6999916983252680717", "title": "Sentry 安装到 React/Web 项目并支持 source-map/trace", "desc": "1. 安装并配置命令行工具 安装 sentry-cli 如果安装比较慢可以查看 新建配置文件 .sentryclirc 在工程根目录下新建 .sentryclirc 文件, sentry_cli 会默"}, {"id": "6997553507779739656", "title": "[React]优化滚动，分类页数据对接", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战。 一、使用IScroll优化滚动效果及回弹 优化滚动和回弹成功 二、分类栏接口数据渲染 2.1 数据获取 2.2 点击分类菜单切换子路由 2"}, {"id": "6997601527162470407", "title": "这一把子彻底搞懂 setState 原理", "desc": "​先回忆一下上一篇：面试官：“宝子，setState 是同步还是异步的呀？” 这上一篇中，我们基本搞清楚了原理流程，那具体的代码是如何实现的呢？"}, {"id": "7001880120231362596", "title": "Redux & React-Redux全局状态管理（学习）", "desc": "Redux & React-Redux全局状态管理Redux & React-Redux全局状态管理"}, {"id": "6961664628526940174", "title": "当面试官问自定义Hook的时候他想知道什么", "desc": "前言 在听到这么一个问题的时候，首先脑海中总体思路是这样子的： 认识自定义Hook的基本概念 能够使用自定义Hook进行复用逻辑的封装 了解自定义Hook的最佳实践与工作原理 进一步深入Hook底层原"}, {"id": "6937178868671315981", "title": "什么时候用useCallback与useMemo", "desc": "useCallback与useMemo在react中用来缓存函数与对象，但性能优化也会有成本，缓存过多时会占用内存过多，垃圾回收器不会及时释放，变成了负优化。因此，在大多数情况都不应该使用。 1. 子组件使用useEffect，并且依赖父组件传进来的props 子组件Foo使用…"}, {"id": "6844903613458825224", "title": "五月前端知识集锦（每月不可错过的文章集锦）", "desc": "PS：星号表示需要翻墙。"}, {"id": "6995445860213620773", "title": "集成式SSR框架 - Next.js", "desc": "集成式SSR框架 - Next.js NextJS介绍 react服务器端渲染应用框架，用于构建SEO有好的SPA / 单页应用，解决SEO不友好和首屏页面加载慢的问题 支持两种渲染方式，静态生成（预"}, {"id": "6844903639782260749", "title": "从零开始搭建React应用（二）——React应用架构", "desc": "上一篇文章——从零开始搭建 React 应用（一）——基础搭建讲述了如何使用 webpack 搭建一个非常基础的 react 开发环境。本文将详细讲述搭建一个 React 应用的架构。 在我们开发过程中，很多时候，我们需要让组件共享某些数据，虽然可以通过组件传递数据实现数据共享…"}, {"id": "6844903874172551182", "title": "React项目国际化(antd)多语言开发", "desc": "而且，国际化方案往往与具体的技术栈是绑定的。 本国际化方案仅针对 React 技术栈，且不会涉及服务端国际化内容。 载入语言环境数据。 React Intl 依赖这些数据来支持单复数和相对时间格式化的功能。 虽然我只用到了文本翻译的功能，以为就不需要加载这些数据，但后来发现这是…"}, {"id": "6872752069766283271", "title": "不看看react-router源码？真的懂路由咩", "desc": "司尘(抢先回答)：就是实现浏览器在不刷新界面的情况下，切换界面。 这个模式就是基于HTML5的History接口，理所当然兼容性会差一点。 我们路由场景就只有：前进、后退、指定到某个页面。那么对应到的方法我们就落列一下： React-router中将上面的History类的构建…"}, {"id": "6844903583368871943", "title": "React Native面试知识点", "desc": "当调用 setState 时，React会做的第一件事情是将传递给 setState 的对象合并到组件的当前状态。 这将启动一个称为和解（reconciliation）的过程。 和解（reconciliation）的最终目标是以最有效的方式，根据这个新的状态来更新UI。 为此，…"}, {"id": "6844903693607763975", "title": "Typescript配合React实践", "desc": "使用ts写React代码写了将近三个月，从刚开始觉得特别垃圾到现在觉得没有ts不行的一些实践以及思考。 如果按部就班的写React就体会不到使用ts的乐趣，如果多对代码进行优化，进行重构，在业务中实践比较好的一些方案就会体会到ts真正的乐趣，但是ts也在过程中给我带来了痛苦，在…"}, {"id": "6985851079321714725", "title": "React入门教程 - state和setState概述", "desc": "概述 本文主要讨论下React中state的使用，以及setState的使用。 定义 state可以被视为React组件中的一个数据集合，这些数据用于记录组件中的可变状态"}, {"id": "6992735662038319134", "title": "《自顶向下学React源码》学习笔记（二）—— Diff算法与状态更新的实现", "desc": "了解了React Fiber架构的原理和基本过程，看一些关键问题上的具体实现也会更加有条理了～ 本文就React中的Diff算法与状态更新具体是如何实现的做个总结，一起来看吧～"}, {"id": "6844903704261312520", "title": "动画浅析React事件系统和源码", "desc": "本文通过对React事件系统和源码进行浅析，回答“为什么React需要自己实现一套事件系统？”和“React的事件系统是怎么运作起来的？”两个问题。React为了性能和复用，采用了事件代理，池，批量更新，跨浏览器和跨平台兼容等思想，将事件监听挂载在document上，构造合成事…"}, {"id": "6973675293147938824", "title": "react面试题：你知道useEffect 与 useLayoutEffect 有什么区别？", "desc": "前言：自从react16.8推出hooks以来，hooks也被越来越多的人使用，面试中也不可避免的会被问到。那么hooks中的useEffect 与 useLayoutEffect 到底有什么区别呢？"}, {"id": "6844904178024710157", "title": "React Hooks + TypeScript 实战记录", "desc": "React 一直都提倡使用函数组件，但是有时候需要使用 state 或者其他一些功能时，只能使用类组件，因为函数组件没有实例，没有生命周期函数，只有类组件才有。 Hooks 是 React 16.8 新增的特性，它可以让你在不编写 class 的情况下使用 state 以及其他…"}, {"id": "6992408029308289054", "title": "React 最佳实践：基于路由实现分步操作", "desc": "在复杂表单的实现中，经常会用到分步操作，基于路由实现的分步操作，可以在刷新页面时依然停留，用户可以根据路由直接定位到准确步骤页面。"}, {"id": "6844904196110548999", "title": "推荐几个 React 性能优化工具", "desc": "可以前往 https://codesandbox.io/s/react-profiler-example-o75nc?fontsize=14&hidenavigation=1&theme=dark 在线编辑效果。 Profiler 是 React 中的一个组件，由 B. Vau…"}, {"id": "6975681282613182500", "title": "State与生命周期 (精读React官方文档—05)", "desc": "这是我参与更文挑战的第18天，活动详情查看：更文挑战 state是私有的。 解读 官方对state的介绍很重要，我们必须要知道state是私有的，并且完全受控于当前组件。 将函数组件转换为类组件 创建"}, {"id": "6942438427291811870", "title": "React 面试必知必会 Day2", "desc": "如果你尝试直接更新状态，React 组件并不会重新渲染。 正确的做法是使用 setState() 方法。"}, {"id": "6844904169090842638", "title": "从零搭建 React 开发 H5 模板", "desc": "Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。Hook 只能再 Function Component 里面声明。 接收一个 context 对象并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <MyContex…"}, {"id": "6948367577621987342", "title": "18个好用的自定义react hook", "desc": "这是我阅读ahooks源码后，写下的笔记，如果有错漏的地方还请指正。 1. useCreation 分析，组件重新渲染时，需要判断依赖项是否变化而重新执行factory函数，则我们可以知道依赖项和factory返回的内容需要持久化。factory函数只有在依赖项变化和首次渲染时…"}, {"id": "6844903828886650893", "title": "React Demo Three - 简书&掘金", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章中的一些链接可能失效，而 jsliang 缺乏精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 岁月如梭…"}, {"id": "6930890691107094542", "title": "深入浅出的学习react[学习笔记14]", "desc": "由于 ReactDOM.render 的内容比较多，所以拆分为上中下三部分来讲解。 在上一章节，我们站在宏观角度对 Fiber 的架构分层和迭代动机有了充分的把握。从本章节开始，将以首次渲染为切入点，拆解 Fiber 架构下 ReactDOM.render 所触发的渲染链路，结…"}, {"id": "6908273717143404558", "title": "create-react-app 配置 less 并模块化", "desc": "使用umi框架久了，全家桶用的很舒服，也习惯了less。今天突然兴趣来了，使用create-react-app新建个项目写点demo，css的写法真的是难受，就想自己配置下，没想到还折腾了好一会才行，记录一下，有遇到相同情况的朋友可以作为参考。 这一版的create-react…"}, {"id": "6844903889846665223", "title": "React 事件系统介绍及源码分析", "desc": "对象池是什么？ 对象池其实就是一个集合，里面包含了我们需要的对象集合，这些对象都被对象池所管理，如果需要这样的对象，从池子里取出来就行，但是用完需要归还。 什么时候使用对象池? 初始化、实例化的代价高，且有需求需要经常实例化，但每次实例化的数量又比较少的情况下，使用对象池可以获…"}, {"id": "6844903656190377997", "title": "以Referer方案写一个图片防盗链服务并实现网页端\"破解\"", "desc": "same-origin 对于同源的请求会发送引用地址，但是对于非同源请求则不发送引用地址信息。 strict-origin 在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS->HTTPS)，但是在降级的情况下不会发送 (HTTPS->HTTP)。 strict-or…"}, {"id": "6844903504914415629", "title": "基于 WeUI 的 React 组件库 mt-weui-react 发布了", "desc": "目前社区没有较为优秀的 weui+react 框架，而我们使用的是 React0.13 的老版本，新版 React 框架并不兼容，weui 虽然提供了标准的视觉规范组件，但并没有封装成运用于项目的UI交互组件。 所以我们决定自己维护开发一套基于 weui+React 的组件库，…"}, {"id": "6844903695386148871", "title": "CSS in JS 很棒, 但是如何方便的处理CSS伪类", "desc": "CSS in JS 很棒, 但是如何方便的处理伪类(Pseudo-classes)? react-dom-pseudo 提供一个类似 react-motion 方式的组件，方便的为 react-dom 对象提供类似 CSS 的伪类. 如果我们项目较大，需要切分模块，CSS in…"}, {"id": "6844903879717421064", "title": "React学习(2)-深入浅出JSX", "desc": "既然前端UI显示就是HTML,CSS,javascript,那么把实现一个功能的所有代码放在一个文件里管理,也是一种宏观上代码的封装,模块化处理. 使用JSX并不是倒退,它只是一个语法糖而已,虽然在React中,不强制要求使用JSX,但是官方却推荐使用. 其实,你可把这些自定义…"}, {"id": "6844903635516653582", "title": "使用ES6让你的React代码提升到一个新档次", "desc": "ES6使您的代码更具表现力和可读性。 而且它与React完美配合！ 现在您已了解更多基础知识： ✨ 现在是时候将你的ES6技能提升到一个新的水平！ ✨"}, {"id": "6844903991801806856", "title": "🔥🔥🔥史上超详细preact hook源码逐行解析了解一下", "desc": "preact hook 作为一个单独的包preact/hook引入的，它的总代码包含注释区区 300 行。 前面提到，hook在preact中是通过preact/hook内一个模块单独引入的。这个模块中有两个重要的模块内的全局变量：1、currentIndex：用于记录当前函数…"}, {"id": "6982557545873604622", "title": "useEffect常见踩坑记录", "desc": "作为一个react初学者，最近开始尝试使用hooks 在使用useEffect这个api的时候是真的踩了不少坑 踩坑场景一：事件绑定 刚开始我的思路是这样的 1. useEffect 初始化时监听 d"}, {"id": "6844903605384773639", "title": "分析阿里前端-自动化架构思路-react", "desc": "先说写题外话，现在前端这个行业，已经从原始时代走进了基于node.js的自动化开发时代。 我们曾经写代码像是反翻垃圾桶，你想要什么插件就需要浪费很多时间去寻找资源，找不到的话只好自己造轮子，或者自己封装一个，就像我曾经就拿着自己的移动硬盘，里面装满了我封装的原生js插件，和一些…"}, {"id": "6844903685575835662", "title": "ReactNative字体大小不随系统字体大小变化而变化", "desc": "在开发react-nativeApp时，相信大家都应该遇到过这样的问题：用户设置了系统的字体大小之后，导致自己的APP布局紊乱，甚至有些内容会被切掉/隐藏，这对于用户来讲，是非常不好的用户体验。 那么，我们应该如何解决这个问题呢？今天这篇文章，就给大家介绍几种解决方案。 在re…"}, {"id": "6844904144432529416", "title": "React组件的本质", "desc": "也许你已经使用React很长时间了，你使用优雅的jsx语法和React hooks来构建组件，最终构成页面。 事实是每秒，控制台中都会将App和Text一起打印出来。 React组件只是函数。如果你在React项目中使用过TypeScript的话， 这意味着一个React函数组…"}, {"id": "6844903895609802766", "title": "[译] 使用 Cypress 进行 React 应用的端到端测试", "desc": "当我还是一个初级开发者的时候我经常害怕测试我的应用。测试并不容易。但是在正确工具的帮助下，编写测试代码绝对能够变得更容易和有趣。 Cypress 是一个端到端的 JavaScript 测试框架，它使设置、编写、运行、调试测试变得非常简单。 如果你已经尝试过类似 Puppetee…"}, {"id": "6949117174111813662", "title": "一文彻底搞懂 DvaJS 原理", "desc": "dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架。"}, {"id": "6927526272822149128", "title": "react hooks", "desc": "一：简要ReactHooks是React16.8的新增特性。可以在不编写class的情况下使用state以及其他react特性。解决了React组件共享以及组件生命周期管理混乱复杂的问题。标志了rea"}, {"id": "6938790422806265886", "title": "React 网络请求 对接登录 API", "desc": "任何一个系统，提供交互能力的前提，需要通过网络进行数据传递到落地。 最原始的网络请求，浏览器进行可以通过 XMLHttpRequest 对象发起请求。现在有很多网络请求模块，对 XMLHttpRequest 进行了封装，最常用的 Axios Axios 使用于前端浏览器和 No…"}, {"id": "6844904003302768653", "title": "组件设计 —— 重新认识受控与非受控组件", "desc": "React 官网中对非受控组件与受控组件作了如图中下划线的边界定义。一经推敲, 该定义是缺乏了些完整性和严谨性的, 比如针对非表单组件(弹框、轮播图)如何划分受控与非受控的边界? 又比如非受控组件是否真的如文案上所说的数据的展示与变更都由 dom 自身接管呢? 在非受控组件中,…"}, {"id": "6844903507980468237", "title": "React 中的各种组件", "desc": "在 React 中，一切皆是组件，因此理解组件的工作流与核心尤为重要。 我们有多种创建组件的方式（不仅 Component），很多时候选择使用哪种组件的创建方式是值得深入考究的；同时对于 React 中有太多的组件概念，无状态组件、高阶组件… 常常也是让新手一头雾水，因此本文也…"}, {"id": "6844903508534099975", "title": "dva值得一试", "desc": "使用React技术栈管理大型复杂的应用往往要使用Redux来管理应用的状态，然而随着深度使用，Redux也暴露出了一些问题。如编写页面配套（action、reducer）过于繁琐、复杂，组件之间耦合较深、不够扁平化、调用action creator发起动作破坏action纯洁性…"}, {"id": "6925950289409392647", "title": "《深入浅出React和Redux》(1) - React基础", "desc": "React技术依赖的技术栈比较多，比如，转译JavaScript代码需要使用Babel，模块打包工具要使用Webpack，定制build过程需要grunt或者gulp。create-react-app命令可以免去配置这些技术栈的麻烦，自动生成一个基本的react-app模版项目…"}, {"id": "6844903734204432398", "title": "Hooks概览（译）", "desc": "Hooks是React v16.7.0-alpha中加入的新特性。它可以让你在class以外使用state和其他React特性。你可以在这里看到关于它的一些讨论。 Hooks 向后兼容。本页向有经验的 React 用户提供 Hooks 的概览。 这是一个快节奏的概览。如果你感到…"}, {"id": "6844903649391411214", "title": "react16-reactDom.render流程分析", "desc": "距离react16发布已经过去很久了，facebook开发团队耗时2年多，究竟做了什么呢。从下面两张图中可以很直观的看出，react16带来的性能优化 造成这样的现象主要是因为：单个网页由js、UI渲染线程、浏览器事件触发线程、http请求线程、EventLoop轮询的处理线程…"}, {"id": "6844903850659282957", "title": "[React Hooks 翻译] 1-8 介绍Hooks", "desc": "Hooks 是 React 16.8的新特性。使用Hooks，我们不用去写Class也能使用state，还有一些其他的React特性。 useState是我们第一个接触到的Hook，没看懂这个例子也没关系。后面会继续介绍。 你可以在下一页直接开始学习Hooks。在这篇文章中，我…"}, {"id": "6844903603824492557", "title": "[译] 使用 React, Redux, and SVG 开发游戏 - 第 3 部分", "desc": "提示： 在这个系列中，你将学习如何使用 React 和 Redux 控制一堆 SVG 元素来创建一个游戏。这个系列所需要的知识同样也可以使你创建使用 React 和 Redux 的其他类型的动画，而不只是游戏。你能够在下面的 GitHub 仓库中找到文章中开发的最终代码：Ali…"}, {"id": "6844903930267172877", "title": "react router 答疑", "desc": "exact 为true的时候，也就是你的url必须和location.pathname 一致，才会匹配。 此例中，match.path的返回值将是 \"/users/:userId\"。 而match.url 的返回值将是:userId的值，例如\"users/5\"。 请注意上面官方…"}, {"id": "6844903569921933319", "title": "Redux源码浅析系列(一)：`CreateStore`", "desc": "使用react+redux开发有一段时间了，刚开始使用并没有深入了解其源码，最近静下心来，阅读了一下，感触颇深。 本系列主要从createStore,combineReducer,compose,applyMiddleware几个方面进行讲解。本系列不会详细讲解redux的用法…"}, {"id": "6900517270356049927", "title": "react hooks源代码总体运行初解（二）", "desc": "这一篇幅将具体介绍react自带的所有的react hooks源码的实现,文章的讲解主要集中在路径packages/react-reconciler/ReactFiberHooks.new.js，此文章需要你花费起码半个小时带上思考专心得看完，一定会有技术上的收获。 包含了存储…"}, {"id": "6865851312182034440", "title": "React Native是怎么渲染出原生组件的", "desc": "最近工作需要研究了一下React Native 的工作流程，理了一下 React Native 是怎么把控件最终渲染在屏幕上的。 这里会调用RN的 renderApplication 方法。触发 ReactNativeType 的 render 方法。 ReactNativeT…"}, {"id": "6900584831705415694", "title": "React.js中JSX的原理与关键实现", "desc": "在开始开发之前，我们需要创建一个空项目文件夹。 此文件为入口文件。 此文件为主要逻辑文件。 在dist文件夹下创建html文件，然后引入main.js，打开html文件就可以看到效果了。"}, {"id": "6844904121871368205", "title": "封装React.createElement，使页面创建元素的时候添加唯一属性", "desc": "最近接到一个测试同学的需求，为了方便UI自动化定位，他们希望给每个html元素添加一个唯一标示。目前我们使用的是react，所以下面方法主要针对react用户。 那其实答案已经有了，只要改变一下React.createElement，增加额外的props就能解决这个需求了；但需…"}, {"id": "6844903967244156935", "title": "React 核心API", "desc": "JSX 是一种 JavaScript 的语法扩展，其格式比较像模版语言，但事实上完全是在 JavaScript 内部实现的。 组件时抽象的独立功能模块，react 应用程序由组件构建而成。 函数组件通常无状态，仅关注内容展示，返回渲染结果即可。 如果组件中数据会变化，并影响页面…"}, {"id": "6844903559218069518", "title": "深入理解React源码 －界面更新（Transactions） VII", "desc": "英文预览版"}, {"id": "6844903616415793159", "title": "前端妹纸的进阶之路——redux源码分析", "desc": "第一次看源码，并没有想象中的难哈，主要是redux的源码比较少，理解起来也比较简单。看过之后，感觉更深入的理解了redux思想和函数式编程的理念，建议大家可以去看一下嘻嘻，看完之后肯定会有收获的。 我是对照着网上别人看过的源码笔记看的，写这篇文章的原因呢，是想总结一下，因为我记…"}, {"id": "6844903623676313614", "title": "Redux源码分析--中间件篇", "desc": "上一篇文章介绍了Redux的数据中心，并分别讲解了数据中心为开发者提供的各种接口，了解到要触发状态的更新就需要调用dispatch方法来分发action。然而store提供的dispatch方法只能够用来分发特定格式的action。 如果我们想要更强大的功能怎么办？如果我们想要…"}, {"id": "6844903714621407239", "title": "redux 源码解析与实际应用", "desc": "enhancer是一个高阶函数，用于增强create出来的store，他的参数是createStore，返回一个更强大的store生成函数。（功能类似于middleware）。 我们mobile仓库中的storeCreator其实就可以看成是一个enhancer，在create…"}, {"id": "6844903507829456909", "title": "Netflix functions without client-side React, and it's a good thing", "desc": "A few days ago Netflix tweeted that they'd removed client-side React.js from their landing page and they saw a 50% performance improvement.…"}, {"id": "6844903507523272711", "title": "react fiber", "desc": "In order to do any of this, we first need a way to break work down into units. In one sense, that's what a fiber is. A fiber represents a u…"}, {"id": "6844903590184615944", "title": "“Introducing Rekit Studio: a real IDE for React and Redux development”", "desc": "一个专门用来构建react全家桶的IDE..."}, {"id": "6844904023703683086", "title": "React 源码学习（九）：“脱胎换骨”", "desc": "历时近 6 年之久，从 0.3.0 (May 29, 2013) 至 16.8.6 (March 27, 2019) 整个 React 框架已经经历了可以说是“脱胎换骨”，具体更新内容细节可以移步至 CHANGELOG.md 查看。 回看 v0.3 ，源码存放在 src 目录下…"}, {"id": "6995252528556277796", "title": "JS的状态管理库——redux", "desc": "redux 之前在学习react的时候，兄弟组件之间传状态都是要通过父组件来进行传递。redux可以解决这个问题，它可以让某个组件的状态跟其他组件进行共享"}, {"id": "6998106991818178596", "title": "面试官：用React写一个进度条叭。", "desc": "只是用定时器简单的实现了，若要有更好的性能需求，请使用css动画animation。 效果图 JS CSS 记录记录！"}, {"id": "6995436560887857189", "title": "React 设计模式", "desc": "三大模块 我们创建一个Holle World，看一下浏览器的调用栈。你会发现react执行了一大堆函数，我们将这些函数分成调度、协调、渲染三大模块，这三大模块就是接下来要研究的。 设计理念 在学习之前"}, {"id": "6956893345750712350", "title": "从 React 转换到 Next.js 的五个理由", "desc": "构建于 React 之上的 Next.js 旨在为 React 的一些问题提供解决方案，同时也通过引入一些现代的内置解决方案来促进应用程序开发。"}, {"id": "6975825597092069389", "title": "React学习第八天---React & Fiber算法(核心API”requestIdleCallback“的认知和旧版Stack问题，Fiber认知)（一）", "desc": "这是我参与更文挑战的第20天 大家好我是小村儿，在上节我们结束了TinyReact的实现，接下来我们学习React16中用到的被称为Fiber算法，我们会花几个篇章搞明白什么是Fiber算法！！！ 开"}, {"id": "6844904057400737806", "title": "React Hooks 究竟有多慢？", "desc": "自从 Hooks 诞生以来，官方就有考虑到了性能的问题。添加了各种方法优化性能，比如 memo、hooks deps、lazy initilize 等。而且在官方 FAQ 中也有讲到，Function 组件每次创建闭包函数的速度是非常快的，而且随着未来引擎的优化，这个时间进一步…"}, {"id": "6982472629814820872", "title": "简述Vue和React开发体验的异同（状态层）", "desc": "接上篇文章，本文我们来聊聊对于状态这块，Vue和React有何异同。 先说关键词命名，在Vue中，通过声明data来定义内部变量，data翻译为中文是数据的意思，这也"}, {"id": "6996966168003100679", "title": "react函数式组件setInterval更新state无效？", "desc": "新手上路总是有很多坑，react 函数式组件 setInterval 更新 state无效。 react hook setInterval functional 定时器 函数式组件"}, {"id": "6967626390380216334", "title": "浅谈react 虚拟dom，diff算法与key机制", "desc": "参考文章： https://juejin.cn/post/6844903824683958286 《深入React技术栈》 1.虚拟dom 原生的JS DOM操作非常消耗性能，而React把真实原生J"}, {"id": "6979821923085582372", "title": "关于React的Key导致的bug总结", "desc": "柯南带你解密一个常见的bug，并随之浅入diff算法，并进行深入思考和场景延伸，掌握react key的作用"}, {"id": "6844903569552834568", "title": "TypeScript 实践", "desc": "TypeScript 是有类型定义的 JS 的超集，包括 ES5、ES5+ 和其他一些诸如泛型、类型定义、命名空间等特征的集合，为了大规模 JS 应用而生。对于 TypeScript 本身，更多信息请参考《TypeScript 体系调研报告》。本文只记录 TypeScript …"}, {"id": "6931704771963256846", "title": "我知道的 React 一些原理", "desc": "本文用于记录最近学习的 React 原理，如果有错误或者不严谨的地方，烦请给予指正，十分感谢。如果喜欢或者有所启发，欢迎点赞，对作者也是一种鼓励。如果还有 React 相关的原理没有写进来，欢迎留言补充，我会持续更新。谢谢 🙏 先讲一下前置知识：事件委托。事件委托利用的是事件…"}, {"id": "6995128040342683685", "title": "React源码系列之九：React的更新机制", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第九篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6994609627736309796", "title": "react中解决跨域, 区分dev和production环境", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战。 一、react中解决跨域 1. 在package.json中配置代理模式 然后在页面中，不要输入域名即可自动代理请求，从而解决跨域问题 效"}, {"id": "6867459287720361991", "title": "我厂实习生写的React Hooks常用API源码解析", "desc": "实习期间接触的大多为React相关的项目，在使用hooks API的过程中经常会遇到一些问题，有的时候是对API的理解上的，有的时候是对为什么会这样而疑惑的，所以花了几天的时间查阅了一些资料翻看了源码，在这里做下总结，也算是一些个人理解的经验分享吧。各个版本的hooks源码可能…"}, {"id": "6948226424427773983", "title": "React Router 入门完全指南(包含 Router Hooks)🛵", "desc": "众所周知，React 是一个用于构建用户界面的 JavaScript 库,它是单页面应用(SPA). 单页面应用,顾名思义:只有一个页面，它是没有路由导航机制的. 这时候往往需要一种路由机制，以便在不同的视图之间切换而不用刷新整个网页. React-Router 就是一个扩展 …"}, {"id": "6844903837661134855", "title": "剖析 React 源码：render 流程（一）", "desc": "这是我的剖析 React 源码的第二篇文章，如果你没有阅读过之前的文章，请务必先阅读一下 第一篇文章 中提到的一些注意事项，能帮助你更好地阅读源码。 现在请大家打开 我的代码 并定位到 react-dom 文件夹下的 src 中的 ReactDOM.js 文件，今天的内容会从这…"}, {"id": "6990667421950410766", "title": "[译]真实React项目中CSS与CSS-in-JS的性能比较", "desc": "前言 在真实应用中（而不是简单的todo类型应用）单独加载的 CSS 文件与CSS-in-JS文件，性能相差多少？本文作者从网络、覆盖率、Lighthouse性能、性能分析、用户交互比较等多方面进行分"}, {"id": "6998076034310471694", "title": "React全家桶学习笔记", "desc": "用了大概12天时间对react有了一个初步的认识，相比vue感觉还是复杂一些尤其是redux，学的时候挺懵逼的.....可能是我太菜了。建议学react的小伙伴还是要结合官方文档，而且不要看一些很老的"}, {"id": "6994971529045868580", "title": "React--1：创建虚拟DOM的两种方式", "desc": "这是我参与8月更文挑战的第10天，活动详情查看:8月更文挑战 问题： 为什么React要推出 jsx ？ js语法怎么创建虚拟DOM ？ 接下来我们分别用 js 和 jsx 创建一个span标签中包裹"}, {"id": "7000924160721420319", "title": "antd table 滚动加载数据实现", "desc": "antd table 滚动加载数据实现：直接在Table组件外面包一个div，通过这个div的滚动事件onScrollCapture来实"}, {"id": "7002490184906309639", "title": "redux & react-redux", "desc": "纯函数、 redux 、 react-redux、 react-redux数据共享示例、 redux-saga"}, {"id": "7006721469908516901", "title": "How to use React memo【译】", "desc": "React 的备忘录 API 可用于优化 React 函数组件的渲染行为。 我们先通过一个示例组件来说明问题，然后通过 React 的 memo API 来解决。"}, {"id": "7006688258650275853", "title": "How to useEffect in React【译】", "desc": "在本教程中，您将了解有关 React 的 useEffect Hook 的所有内容及可能存在的渲染情况。"}, {"id": "6844903504528556040", "title": "React源码解析(一):组件的实现与挂载", "desc": "当我们能够熟练运用React进行前端开发时，不免会对React内部机制产生浓厚的兴趣。组件是什么？是真的DOM吗？生命周期函数的执行依据又是什么呢？ 本篇，我们先来研究React组件的实现与挂载。 上述代码写完后，我们就得到了<A />这个组件，那么我们接下来先弄清楚<A />…"}, {"id": "6984316045863436319", "title": "React 系列十二：React - Router", "desc": "react-router 是一组以声明方式与您的应用程序组合的导航组件，换句话，react-router 是 React 体系中的路由库，它通过管理 URL，实现组件的切换和状态的变化"}, {"id": "6970495764170539039", "title": "useEffect钩子实现原理", "desc": "useEffect这个钩子函数是用来模拟生命周期函数的。调用这个函数的时候他的第一个参数必须是一个函数，第二个参数可以不传也可以传递一个数组，当不传递的时候组件当中任何一个数据发生变化的时候useEf"}, {"id": "6844904180428046343", "title": "小伙伴遇到这个问题说不想干前端了——一次Chrome翻译造成的玄学bug", "desc": "前排提示，现在掘金发文的时候有违禁词会发不出去。所以花了半小时发文章，反复使用二分法排除定位违禁词语，能发出去说明前面内容没问题，然后再加一点内容继续试。我还在发文章的时候，就看见200浏览了，给200个小伙伴道歉，那时候还在试敏感词中，文章内容不完整，现在已经好了，可以回头看…"}, {"id": "6844903901603299335", "title": "技术胖Redux免费视频教程 2万字长文章 24集视频", "desc": "通过React基础教程的学习，我相信你一定对React有了很好的了解，也可以制作出一些简单的React项目（注意我这里说的是简单的项目）。为什么你只能做出一些简单的项目那?因为React就是一个简单的轻量级的视图层框架。 React当中的组件通信和状态管理是特别繁琐的，比如子组…"}, {"id": "6975120676982095886", "title": "React 面试必知必会 Day12", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6844903510538977287", "title": "图解ES6中的React生命周期", "desc": "前言React生命周期一、初始化阶段1、设置组件的默认属性2、设置组件的初始化状态3、componentWillMount()4、render()5、componentDidMount()二、运行中阶"}, {"id": "6988446977541275661", "title": "React的diffing算法(面试题)", "desc": "React的diffing算法 经典面试题： react/vue 中的key有什么作用? ( key的内部原理是什么? ) 为什么遍历列表时，key最好不要用index?"}, {"id": "6996879819472371719", "title": "redux-saga中关于channel的那片学问", "desc": "前言 之前闲的无聊，听歌之余去看了下redux-saga的官网，看到Channel章节时让我深感启发，原来redux-saga针对不同的需求场景设计了不同类型的通道 ，学习这些通道的用法之余，我还看了"}, {"id": "6963032224316784654", "title": "使用react的7个避坑案例", "desc": "在React中，我们可以创建一个很多内容的组件，来执行我们的各种任务，但是最好是保证组件精简 -- 一个组件关联一个函数。这样不仅节约你的时间，而且能帮你很好地定位问题。"}, {"id": "6979480649212100622", "title": "React18有哪些变化？", "desc": "React18的升级策略是「渐进升级」，包括名声在外的并发渲染等在内的新能力都是可选的，不会立刻对组件行为带来任何明显的破坏性变化。"}, {"id": "6990579843612033031", "title": "hooks 系列六：hook 规则", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 Hook 本质就是 JavaScript 函数，但是在使用它"}, {"id": "6889238969616171022", "title": "前端组件化埋点的实践", "desc": "开始正文前先介绍一下相关概念，熟悉的读者可以略过。 前端埋点：一种收集产品数据的方式，它的目的是上报相关行为数据，相关人员以数据为依据来分析产品在用户端的使用情况，根据分析出来的结果辅助产品优化、迭代。 BI：商业智能，公司内部做数据分析相关的部门。 平时我们在完成基础的业务需…"}, {"id": "6997196252580413447", "title": "React--9: 组件的三大核心属性2:props与构造器", "desc": "这是我参与8月更文挑战的第16天，活动详情查看:8月更文挑战 1. 添加构造器 上一篇文章的例子，更改一下，添加构造器。当然，这个构造器写不写都可以 思考几个问题 props 传给super和不传的区"}, {"id": "6969536778927603725", "title": "用 ObjectComponent 重新定义 React 组件", "desc": "前言 今天在公司内部完成了应用框架的第一个版本, 然后又开始回顾之前写的 structured-react-hook 这个库, 其实关于名字我一直很纠结, 我始终在思考, 这种定义 react 组件的"}, {"id": "6883800272787750920", "title": "Linaria 也许是现在 React 最佳的 JSS 方案", "desc": "React 社区一直在探索各种 JSS 方案，比如现在比较出名的 styled-components ，但他们或多或少都有些问题存在，但是社区对 JSS 方案的探索一直没有停下，而现在看上去最像最佳方案的是 Linaria 库。翻了下这个库相关的中文资料几乎没有，于是写了这篇与…"}, {"id": "6844903734032482317", "title": "React战记之玩转Flex布局(上篇--容器属性)", "desc": "零、前言不废话了，留图镇楼：一、搭建React项目：1.创建+scss配置2.搭建静态页面2.1：.Flex矩形div(默认长宽1000*300px)2.2--数据准备：2.3--数据填充2.5--生"}, {"id": "6844903631154577421", "title": "基于React+Redux的SSR实现", "desc": "今天我们将构建一个使用Redux的简单的React应用程序，实现服务端渲染(SSR)。该示例包括异步数据抓取，这使得任务变得更有趣。 在开始编写应用之前，需要我们先把环境编译/打包环境配置好，因为我们采用的是es6语法编写代码。我们需要将代码编译成es5代码在浏览器或node环…"}, {"id": "6844903503857451022", "title": "全栈 React + GraphQL 教程", "desc": "GraphQL 是一种新的 API 定义和查询语言，有可能成为新的 REST。它使 UI 组件易于声明式地获取数据，而不必关注后端实现细节。GraphQL 作为一种强大的抽象，可以加快应用开发速度，使代码更容易维护。"}, {"id": "6844903774444601357", "title": "把 setState 整明白", "desc": "加入新团队后，团队项目使用了React Native。刚开始接触React Native，除了学习React Native的使用，更要了解React.js这个框架，才能更好的使用。而React框架中，笔者一开始就感觉奇妙的，就是这个看似同步，表现却不一定是同步的setState…"}, {"id": "6844903552377159688", "title": "我们编写 React 组件的最佳实践", "desc": "刚接触 React 的时候，在一个又一个的教程上面看到很多种编写组件的函数，尽管那时候 React 框架已经相当成熟，但是并没有一个固定的规则去规范我们去写代码。 在过去的一年里，我们在不断的完善我们的做法，直到满意为止。 本文会列出我们自己在使用的最佳实践，不管你是刚入门的新…"}, {"id": "6844904184047730701", "title": "React 组件的单元测试", "desc": "单元测试是一门非常伟大的学科，它可以减少40%-80%的 bug。同时，还有以下几个重要的好处： 改善应用的结构和可维护性。 在具体实现之前，让开发者更加关注开发体验，从而实现更好的 API 和更好的组合能力。 每当保存文件不管是否正确，都会提供快速的反馈。这可以避免使用 co…"}, {"id": "6844903589786157063", "title": "为什么React组件点击事件回调函数会需要绑定this", "desc": "js里面的this绑定是代码执行的时候进行绑定的，而不是编写的时候，所以this的指向取决于函数调用时的各种条件。"}, {"id": "6844903919311650829", "title": "React 列表组件中 key 的作用", "desc": "1. 列表组件中无 key 代码思路很简单，当我点击按钮时，移除一个列表项。由于不指定显式的 key 值，那么 React 将默认使用索引 index 用作为列表项目的 key 值，所以用索引 index 作为 key 值，与组件列表中无 key 是一样的。下面来分析，当点击按…"}, {"id": "6926417795877961735", "title": "react奇淫意巧之 - 传送门  - react Portals", "desc": "Portals 是什么翻译过来是传送门，就是将你的Dom节点传送到你指定的地方，现在这么说你可能还是不清晰，我们举个例子。假如你现在在业务中，signal组件中点击后想弹出一个弹窗，但是你的弹窗又不能"}, {"id": "6844904084068106248", "title": "重磅宣布, concent 2.0发布, 依赖收集&惰性计算", "desc": "夜已经很深了，这个时间宣布2.0版本算是一个抢先预告吧，接下来的一个月里会重点开始更新文档以及铺开更多的示例了。 如果在1.*版本里，我们操作ClassComp组件实例或者FnComp组件实例的toggle hidden按钮，其实视图里已经不再使用到user这个属性了，但是我们…"}, {"id": "6844903840148357128", "title": "react 服务端渲染", "desc": "ssr就是服务器渲染好前端页面然后推送到前端进行展示的一个过程。 在单页应用中，是无法很好的支持seo的，所以很多方法是将入口页面用普通的html编写然后剩下的用单页应用的形式，这样就显得不是一个整体的项目。 如果已经按照我刚刚的目录创建好文件了，那么我们可以直接开始配置了。 …"}, {"id": "6844903703128834062", "title": "使用Jest对React全家桶(react-saga, redux-actions, reselect)的单元测试", "desc": "本文主要对react全家桶应用的单元测试提供一点思路。 请注意，大坑(尴尬的自问自答)。文档未提及对redux-saga1.0.0-beta.0的支持情况，所以如果按文档提示去安装则在测试时会有run异常，我们在issue中发现解决方案。 根目录下新建xxx.js文件，在脚本命…"}, {"id": "6914662392286674952", "title": "React Hooks的使用", "desc": "Hook 是 React 16.8 的新增特性，它可以让我们在不编写class的情况下使用state以及其他的React特性（比如生命周期）。（函数式组件与类组件的区别https://juejin.cn/post/6844904049146331150#heading-2）注意…"}, {"id": "6844903808779157517", "title": "配置化页面渲染系统设计和实践", "desc": "随着大数据、监控系统、分析系统等概念逐渐在各大小公司中普及后，开发一个前端系统以展示和控制的需求则变得十分常见，所以我们也不例外。在开始着手开发之前，事实上我们已经考察甚至长时间使用过一些不同类型的类似系统，如监控报表系统 Grafana、数据分析系统 Zeppline……"}, {"id": "6922743676984623118", "title": "React生命周期钩子函数", "desc": " 前言所谓的生命周期就是指某个事物从开始到结束的各个阶段，就好像是把人的出生到死亡分成一个个阶段，你肯定是在出生阶段起名字，而不会在成年或者死亡的阶段去起名字。当然在React.js中指的是组件从创建"}, {"id": "6844903629581713416", "title": "webpack 快速构建 React 学习环境（1）", "desc": "React 官方有一套脚手架工具，是初学者的最好选择，可以让初学者集中注意力在 React 本身。 本人对脚手架有点儿抵触（可能主要是对未知的恐惧），从开始学习 React 就走了自己搭建开发环境的路线，这里总结下搭建过程，希望能帮助和我一样不愿使用脚手架工具，但又急需一个练习…"}, {"id": "6916119009830109191", "title": "简单实现react router", "desc": "可将路径转化为对应的正则... 哪两个不咋用先过了... 到这里其实可以看出Router组件内创建了一个history路由管理器,并把操作的history对象 页面当前信息的location对象 放到了上下文中,而Route组件使用了上下文 ,在Route组件内接受了我们的配置…"}, {"id": "6847902214271287304", "title": "create-react-doc — 基于 React 的文档站点生成工具", "desc": "Create React Doc 是一个使用 React 的 markdown 文档站点生成工具。就像 create-react-app 一样，开发者可以使用 Create React Doc 来开发、部署 markdown 站点或者博客而无需关心站点环境配置信息。 建站理念:…"}, {"id": "6844903542923198478", "title": "2017前端技术大盘点", "desc": "临近2017的尾声，总是希望来盘点一下这一年中前端的发展。到目前为止，前端的井喷期也快临近尾声了。并不像几年前一样，总是会有层出不穷的新东西迸发出来。同时，前端技术也慢慢的趋于稳固，自成一套体系。 我们何处说起？自然是离不开那三驾马车。 自从2015年，react的问世，开始了…"}, {"id": "6844903776864698381", "title": "React组件单元测试", "desc": "1. 为什么要进行自动化测试 当我们编写一个组件的时候，要怎么保证组件功能能达到预期呢？你可能回答：我可以人工测试。但是当经历三四次迭代，当有多人协调开发，当进行重构的时候，如何能快速的验证组件是否依然正确执行？这正是需要自动化测试的原因。无论经历多少次迭代，好的自动化测试都能…"}, {"id": "6994260903193477128", "title": "React 18 严格模式支持 Strict Effects", "desc": "随着 React 18 的发布，StrictMode 增加了对 Strict Effects 的支持。在严格模式下，React 会对新安装的组件调用两次 effect。"}, {"id": "6973884136968683551", "title": "使用React 360创建虚拟现实（VR）体验", "desc": "React的虚拟现实（VR）体验？ 😮 这真的有可能吗？是的。随着React 360的引入，现在可以使用JavaScript创建虚拟现实体验。 如今在设备中如何使用VR 在介绍什么是React 360"}, {"id": "6844903650251243534", "title": "单枪匹马撸个聊天室, 支持Web/Android/iOS三端", "desc": "该项目起始于2015年底, 也是我刚开始学习 JavaScript 的时候, 当时仅仅是想做个练手项目. 后面随着在前端领域的深入学习, 也一直在更新技术栈, 目前已经是重构后的第五个版本 得益于 node.js 和 react-native 的出现, 使得 jser 的触手伸…"}, {"id": "6867690349746847752", "title": "想要成为前端Star 吗？一首歌时间将React/Vue 应用Docker 化", "desc": "然而在近两年的编程生涯，在每一次产品迭代中，渐渐体会到了容器化其魅力所在。 应用部署从刀耕火种，到DevOps崛起，原来不止前端在迅捷发展。接下来，我将用一首歌的时间，带大家真实的体验一番Docker容器化。 1. 朴素的Dockerfile 首先准备一个有标准运行指令的Web…"}, {"id": "6932718420488093709", "title": "vscode插件实战—好用的项目命令辅助工具来了", "desc": "为什么会开发这个插件呢？原因是: 在项目组中，每个人对于启动命令、打包命令等各有各自的“规范”，到底叫 npm run dev 还是叫 npm run start 才是合理？在跨项目之间切换，常常要去阅读 README.md 文档，甚至于无文档的情况下，需要去查看 packag…"}, {"id": "6933036276660731912", "title": "2021 年你应该尝试的 8 个 React 库", "desc": "1. react-select 代表了一种开发功能强大的 react.js 组件的全新方式，这些组件在完全可定制的同时开箱即用。 灵活的数据处理方法，具有可定制的功能。 灵活结合 emotion 这个库**(一个 css in js 的强大的库** ). 组件注入API，用于完…"}, {"id": "6844903928316821517", "title": "使用npm发布一个react组件（踩坑实践）", "desc": "本文主要记录本人在使用 NPM 发布具有样式的 react组件 时的完整实践流程，在这过程中踩了许多坑，花在完善发布脚手架的时间远多于开发组件的时间，于是记录下整个过程，希望能给大家提供帮助。 发布 react组件 的脚手架搭建。 开发组件。 打包组件，并在测试项目中引入打包组…"}, {"id": "6844903805713121294", "title": "从零到一，用 Electron 开发桌面效率工具", "desc": "Electron 已经不算新技术，最早是 github 从 Atom 编辑器衍生出来的框架。通过编写 Javascript, HTML, CSS 能快速编译出跨系统的桌面 app。Electron 的出现使得作为前端开发工程师的我们输出范围更广。 分享最近用 Electron …"}, {"id": "6904519156029194254", "title": "跟着官方文档能学懂Hooks就怪了", "desc": "慢慢熟练以后，发现Hooks的执行时机和生命周期又有些不同。比如componentWillReceiveProps对应哪个Hooks？ React官方也发现了这个问题，在React要重写文档了讲到，React要基于Hooks重写文档。 视图可以看作状态经过函数的映射。 用户与界…"}, {"id": "6844904150505881613", "title": "《明日方舟》签到效果实现", "desc": "而在游戏里面，似乎采用了静态贴图，这可能是由于手游没有这样的交互动作，所以显得有些差强人意。 这一次，我们试着在 web 里面实现类似的效果。 步骤分为 4 步。 1. 分层 分开两层图层，数字层与网格层。 让数字层放在网格层之上，大概就是这种感觉。 实际 dom 的排列顺序保…"}, {"id": "6997170361640943653", "title": "【青训营】- React · useMemo & useCallback", "desc": "前言 默认情况下, 父组件的状态(state)发生变化,不仅会重新渲染自己,还会重新渲染其子组件。 因此，React 发明了 useMemo & useCallback 来帮助你减少不必要的渲染。 此"}, {"id": "6907546624441090055", "title": "从Context源码实现谈React性能优化", "desc": "我会尽量将文章写的通俗易懂。但是，要完全理解文章内容，需要你掌握这些前置知识： 如果你还不具备前置知识，可以先阅读React技术揭秘。 Context的实现与组件的render息息相关。在讲解其实现前，我们先来了解render的时机。 聊过。在这里再概括下： 在React中，每…"}, {"id": "6997769583717253133", "title": "新老react 架构对比", "desc": "这里讨论了react15与react16 的不同，react16的出现主要解决了什么问题。React为了践行“构建快速响应的大型 Web 应用程序”理念做出了什么改变"}, {"id": "7000370463188713480", "title": "保姆级GitHub Actions部署React应用的快速入门", "desc": "最近在做基于react项目做一个低代码构建平台，使用Create React App脚手架创建的项目提交GitHub时，想通过GitHub Pages部署站点。然而，一知半解的我，趟了两天的坑啊..."}, {"id": "6986254236350676999", "title": "两周一个小组件之List组件", "desc": "两周一个组件系列文章将会介绍一个个 mini 版的 react 组件的建造过程及其中的一些心得感悟，mini 版的 react 组件会参考社区中优秀的开源组件库，理解其组件的实现原理。"}, {"id": "6974973679985917966", "title": "React系列三：React脚手架", "desc": "这节我们将介绍如何通过 `React` 脚手架创建一个 `React` 工程并进行编写内容，不用像 `Hello React` 那样在 `html` 中编写 `React` 代码。"}, {"id": "6844903705452478478", "title": "三年前端，面试思考（二）", "desc": "没有想到上一篇 《三年前端，面试思考》 有这么多前端同学看到。 在评论区也有很多鼓励和质疑的声音，而且群里面交流的同学两天就达到了700人。 群里有同学问了很多问题，同时希望我再分享一些面试技巧，在这篇文章中我也一并梳理出来。 p6，p7 是个坎。我理解的 p7-技术专家，在某…"}, {"id": "6919104746867556365", "title": "vite 尝鲜", "desc": "怀揣着好奇，面向 GitHub 编程的我非常熟练地打开了 vite 的 GitHub 主页。浏览完 readme 后，有几个地方给我留下了非常深刻的印象： 打包后的文件为：react-dom.js 和 react.js。 浏览器会解析入口文件，自动根据入口文件的 import …"}, {"id": "6953561016319868965", "title": "混乱是进步的阶梯 —— ESM规范的崛起【上】", "desc": "前言 前端发展到如今，社区生态已经非常丰富。 在无数开源大神的努力下，很多前端开发的痛点（比如静态类型检查、浏览器兼容性）早已有了事实上的标准解决方案（比如TS、babel）。 然而，在这繁荣之下，有"}, {"id": "6844904096059621389", "title": "React-Router v6 新特性解读及迁移指南", "desc": "18年初，React Router的主要开发人员创建一个名为Reach Router的轻量级替代方案。 目前 v6已是测试最后一版，估计新的特性不出意外就是下面这些了。 &#x3C;Switch>重命名为&#x3C;Routes>。 &#x3C;Route>的新特性变更。 嵌套…"}, {"id": "6875135569018486797", "title": "深入探索前端路由，手写 react-mini-router", "desc": "前端路由一直是一个很经典的话题，不管是日常的使用还是面试中都会经常遇到。本文通过实现一个简单版的 react-router 来一起揭开路由的神秘面纱。 前端路由本质上是什么。 前端路由里的一些坑和注意点。 hash 路由和 history 路由的区别。 Router 组件和 R…"}, {"id": "6965007666850562085", "title": "React Hook与闭包", "desc": "useState 反直觉异步更新问题 先说结论：setTimeout里访问的num是闭包里的变量，这在一开始函数执行后就被保存下来了，下一次state更新后，再次render是生成了一个新的函数作用域"}, {"id": "7005844045851263006", "title": "React Native(TypeScript)单元测试", "desc": "测试工具选型：Jest + testing-library jest是一个开源的javascript单元测试框架，集成了测试执行器、断言库、spy、mock、snapshot和测试覆盖率报告"}, {"id": "6995807718808223758", "title": "关于React Hooks使用", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 1 为什么使用 React Hooks 我们先来个简单例子看看,现在我们做过超级超级简单的例子:点击按钮数字增加1 先用我们原来的做法(用"}, {"id": "6844904084999241735", "title": "React 实践揭秘之旅，中高级前端必备(上)", "desc": "之前面试三部曲简明地梳理了前端知识结构体系，浅尝辄止。这个系列则要进一步研究和领会 内在的奥妙。今天打算以一个比较新颖的角度切入，深入地梳理下 React 的内部实现。 1. 有利于大家在 React 日常业务使用中更加得心应手； 2. 也可将领会到的思想融会贯通，拓展到其它领…"}, {"id": "6965732983781195807", "title": "大道理小聪明系列 - Redux + Hooks 工程实践一则", "desc": "有了 Hooks 的加持能够让我们的 Redux React 项目更加简洁、易懂、扩展性更强。而且 Hooks API 在 Redux 的最佳实践建议中目前是 Level 2 的强烈推荐使用级别。"}, {"id": "6844904133430870024", "title": "轻松理解为什么不用Index作为key", "desc": "将由两个结构极为简单的实例向大家展示，使用index作为key出现的bug，和正确赋值key的区别所在。并对此进行分析。 这样写似乎不会报错？的确，这样写确实没有任何语法上的问题。 但是，一旦我们对遍历好的item项再做操作，结果与我们想象的将会大不相同。 我们在代码中给每个i…"}, {"id": "6916354407030325256", "title": "React Hooks(一): From Redux to Hooks", "desc": "如今的 react 的状态管理工具基本上分为 redux 和 mobx 两个流派，mobx 基本上大家都是使用官方的 mobx 库，但是对于 redux 却衍生数不胜数的 redux 框架。如redux-saga, dva, mirror, rematch等等，这么多 redu…"}, {"id": "6844904202255220750", "title": "React实战之React+Redux实现一个天气预报小项目", "desc": "经过一段时间的React学习，React和Vue的开发确实有很大的不同，但是都是基于数据驱动视图，因此上手没有很大的难度，这次用React+Redux开发一个天气预报小项目。源码地址：https://github.com/BeichenloveNancy/React-study…"}, {"id": "6844904079164964878", "title": "精读《useRef 与 createRef 的区别》", "desc": "useRef 是常用的 API，但还有一个 createRef 的 API，你知道他们的区别吗？通过 React.useRef and React.createRef: The Difference 这篇文章，你可以了解到何时该使用它们。 其实原文就阐述了这样一个事实：useR…"}, {"id": "6979858489451479047", "title": "前端渣渣阿宽带你正确入门学习 Webpack", "desc": "我曾想，该如何学习 Webpack，我上网去搜，很多教程，诸如 Webpack 傻瓜式指南、Webpack 入门体验、Webpack 花式入门教程，我都粗略看了一下，都不错，但没能找到属于自己学习之路"}, {"id": "6844904147922190349", "title": "Hooks & Mobx 只需额外知道两个 Hook，便能体验到如此简单的开发方式", "desc": "本文主要讲解了下我平时在工作开发中遇到的关于 Hooks 的一些缺点和问题，并尝试配合 Mobx 解决这些问题的经历。我觉得两者的配合可以极大的降低开发过程中有可能出现的问题以及极大的提高开发体验，而且学习成本也是非常的低。如果你对 Hooks 以及 Mobx 有兴趣，想知道更…"}, {"id": "6986324390556205069", "title": "React 学习之 Portals 与错误边界处理", "desc": "Portals 可以说是 插槽，但 不同于 Vue 中的 slot，它指的是将一个 React 元素渲染到指定的容器 (真实 DOM) 中 比如说，Modal 组件一般默认直接作为 body 的真实"}, {"id": "6983290530436218888", "title": "使用antd-form-render配置各类表单", "desc": "基于react,antd v4 搭配antd-form-render可以轻松实现各类表单 一行一列布局 一行多列布局 等间距排列 (常用于列表页面的搜索等) 4.表单联动"}, {"id": "6986159088736403487", "title": "React 中使用拖拽", "desc": "前言 在 HTML5 还未普及之前，实现拖拽的大致思路是监听鼠标移动相关事件，来拖动目标元素到页面的任意位置，这要求目标元素必须满足绝对定位、脱离文档流才可以被移动，伪代码如下： HTML5 标准出来"}, {"id": "6992043386744078343", "title": "React事件通信", "desc": "写在前面 React组件之间的通信一般分为下面几种情况： 父子组件之间的通信 非嵌套组件之间的通信 父子组件之间的通信 这是最简单也是最常用的一种通信方式：父组件通过向子组件传递 props，子组件得"}, {"id": "7000157701435031566", "title": "CSS IN JS在React中的使用", "desc": "为什么会有CSS IN JS 解决CSS的局限性，例如缺乏动态功能、作用域和可移植性 CSS IN JS的优点 让CSS拥有独立的作用域，防止CSS样式泄漏到组件外部，引起样式冲突 让组件具有可移植性"}, {"id": "6844903909148852237", "title": "可靠React组件设计的7个准则之封装", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我对文章进行了分割，本篇文章重点阐述 封装。因本人水平有限，文中部分翻译可能不够准确，如果您有更好的想法，欢迎在评论区指出。 耦合是决定组件…"}, {"id": "6994792782963408903", "title": "React——context", "desc": "前言 Context被翻译为上下文，在编程领域，这是一个经常会接触到的概念，在 React 的官方文档中，Context被归类为高级部分(Advanced)，属于React的高级API。下面就来说一说"}, {"id": "6983594135378722829", "title": "React学习—生命周期", "desc": "前言 该篇为笔者学习React时整理下来的学习笔记，主要讲述React组件的生命周期以及其常用的一些生命钩子函数和这些钩子函数的执行时机。 内容 React生命周期 首先看官方提供的React组件生命"}, {"id": "6932008282554892302", "title": "深入了解React中state和props的更新", "desc": "在本文中我们会看到React如何处理state的更新。以及如何构建effects list。我们会详细介绍render（渲染）阶段以及commit（提交）阶段发生的事情。 更新state属性。 调用render方法并比较子节点。 更新React元素的props。 更新元素的te…"}, {"id": "6844903846913769479", "title": "React-Hooks(附demo)", "desc": "在react的今天和明天系列文章中，react开发人员介绍了class组件存在的三个问题。 在class组件中通过HOC和render props中来实现组件的逻辑复用。这会带来一个问题，当我们拆分出很多细小的组件再将它们组合到一起，如果在chrome打开react的扩展，会发…"}, {"id": "6924578176882442254", "title": "amis在bigo人工智能训练平台落地实践", "desc": "amis 是由百度开源的一个低代码前端框架，基于React，它使用 JSON 配置来生成页面，可以减少页面开发工作量，极大提升效率。 经历了长时间的实战考验：amis 在百度内部得到了广泛使用，在 5 年多的时间里创建了 3.8 万页面，从内容审核到机器管理，从数据分析到模型训…"}, {"id": "6942090099899236360", "title": "React：理解函数组件与类组件", "desc": "在 React 中，有两种组件的写法。一种是函数组件，另一种是类组件。最近函数式组件越来越流行，这是为什么呢？ 首先，最明显区别是语法不同。函数组件只是一个普通的 JavaScript 函数，它可以返回 JSX。类组件是一个继承 React.Component 的 JavaSc…"}, {"id": "6854573220470013966", "title": "React Router 官方文档翻译", "desc": "React Router是React的官方路由库，可以用于web端，node.js服务端，和React Native。React Router是一个React组件、hooks和工具函数的集合。 react-router：包含了React Router的大多数核心功能，包括路由匹…"}, {"id": "6854573219421585416", "title": "为什么要拥抱React Hooks", "desc": "什么是ReactHooksHooks是React16.8新增的特性，在你不需要写class组件的情况下，就赋予了函数式组件state状态管理及生命周期函数的特性Hooks的优势allin函数式编程在你"}, {"id": "6959181514676535304", "title": "重学虚拟DOM", "desc": "虚拟DOM本质上是js和DOM之间的一个映射缓存，他在形态上表现为能够描述真实DOM及其属性信息的js对象，所以对于虚拟DOM来说我们知道把握住两点即可： 1、虚拟DOM是js对象 2、虚拟DOM是对"}, {"id": "6995151476389576734", "title": "【Rematch 源码系列】四、Third-Party plugins", "desc": "上篇介绍了 rematch 的插件机制以及其核心的两个插件。除了这两个插件外，rematch 团队其实还开发了不少第三方插件，这篇文章主要介绍 immer 和 loading 插件"}, {"id": "6844903618848669709", "title": "React性能优化方案之PureComponent", "desc": "之前的一篇文章React性能优化方案之PureRenderMixin，是对react的shouldComponentUpdate的方法进行重写去优化。但自从React15.3中新加了一个 PureComponent 类，易于在自己的组件使用，只需要将Component 换成 P…"}, {"id": "6995136890521255973", "title": "Angular与React，哪个更好用？", "desc": "Angular vs React : 比较最基本的东西 我是React和Angular的新手（Angular的新手），我想对两者进行比较（每次一点点）。我将会边走边更新，但这里是我的起点。这假设应用程"}, {"id": "6847902215936409607", "title": "记一次InputNumber组件扩展", "desc": "最近在做Json编辑器时，使用到InputNumber,但是ant-design的InputNumber不是在Input组件内部实现的，很多Input的扩展功能（如addonAffter ,suffix,prefix等）都没有。然后编辑器的表单字段需要支持addonAfter这…"}, {"id": "6844903613857267719", "title": "响应式数据与数据依赖基本原理", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 国内前端算是属于Vue与React两分天下，提到Vue，最令人印象深刻的就是双向绑定了，想要深入的理解双向绑定，最重要的就是明白响应式数据的原理。这…"}, {"id": "6947676213175386126", "title": "【译】编写简洁 React 组件的简单小技巧", "desc": "在这篇文章中，我们会回顾一些简单的技巧，它们将帮助我们编写更简洁的 React 组件，并且更好地扩展我们的项目。 首先，让我们从一个应该避免的反模式开始。除非有明确的理由这样做，否则应该避免在组件树中使用扩展操作符传递props，比如：{ ...props }。 通过这种方式传…"}, {"id": "6850418121442852872", "title": "React-Router源码解读", "desc": "目前负责的项目中有一个微信网页，用的是react技术栈。在该项目中增加了一个微信分享功能后，线上ios出现了问题，经排查，定位到了react的路由系统。 这次线上bug，让我决定，先拿react-router-dom开刀，看看它内部到底干了点啥，以解心头之恨。 前端目前用到的就…"}, {"id": "6986232488720859167", "title": "React项目（toB）一期总结", "desc": "一个react项目的总结，从零搭建到业务开发遇到的问题的总结和优化（封装公共组件），其中附有react模版地址。"}, {"id": "6889441769164341261", "title": "【React Hooks系列】之useEffect", "desc": "由于React的函数式组件使用起来方便（对比class组件），我将重点使用函数组件来运行开发。在这系列博客中，我将分享我所学到Hook系列API的知识。 effect（副作用）是react函数组件用来替代生命周期的函数。你可以把 useEffect Hook 看做 compon…"}, {"id": "6929859835370405901", "title": "使用G6绘制服务依赖关系图", "desc": "一套业务系统通常会依赖多个中台提供的不同服务，如搜索服务、文件上传服务、推荐服务等。而各个中台服务又依赖不同的基础引擎服务。其依赖服务众多，关系复杂，就会很难维护管理。为了便于管理和直观的显示依赖服务"}, {"id": "6911870195719995406", "title": "React 算法之位运算", "desc": "网络上介绍位运算的文章非常多(如MDN 上的介绍就很仔细). 温故知新, 对位运算的基本使用做一下简单的总结. 归纳在javascript中使用位运算的注意事项. 列举在react源码中, 对于位运算的高频使用场景. 位运算直接处理每一个比特位(bit), 是非常底层的运算, …"}, {"id": "6900703477480685582", "title": "谈谈对 React 新旧生命周期的理解", "desc": "在写这篇文章的时候，React 已经出了 17.0.1 版本了，虽说还来讨论目前 React 新旧生命周期有点晚了，React 两个新生命周期虽然出了很久，但实际开发我却没有用过，因为 React 16 版本后我们直接 React Hook 起飞开发项目。 但对新旧生命周期的探…"}, {"id": "6904527927191601166", "title": "React Router — BrowserRouter 源码浅析及原理分析", "desc": "ps. 源码均进行了删减，将判断、报错等部分代码移除；文章比较长，有兴趣的同学可以阅读，也可以直接跳到总结直接了解 React Router 的实现原理 ps. setPrompt 一般只有在服务端渲染或者调用 &#x3C;Prompt> 组件的时候才会用到，所以在本例中 co…"}, {"id": "6955069130256941070", "title": "同一事件中多次setState时react setState的源码", "desc": "问题 又一次的bug，不多说了，都是泪，这里直接贴一下“有问题的代码”吧 简单说一下这段代码的逻辑： 点击parent组件执行onClick事件，此事件会通过async/await拿到一个变量。 执行"}, {"id": "6844903892442939405", "title": "关于antd如何在表单外点击触发表单验证的问题", "desc": "需求：由于业务需要，表单过大的问题，我把表单和提交按钮分开成了两个组件，如图：涉及知识点：子传父，ref的使用解决思路：1.点击按钮时告知父级这一行为：按钮组件传送门：https://www.kanc"}, {"id": "6915327386556825607", "title": "redux-saga用法总结", "desc": "在saga任务中，如果yield了一个普通数据，saga不作任何处理，仅仅将数据传递给yield表达式（把得到的数据放到next的参数中），因此，在saga中，yield一个普通数据没什么意义。 saga需要你在yield后面放上一些合适的saga指令（saga effects…"}, {"id": "6844904070927384583", "title": "全栈面试汇总周刊 | 第十一期", "desc": "在我的博客 shfshanyue/blog 会对比较难的问题进行讲解。"}, {"id": "6844903539962036238", "title": "Webpack实战-管理多个单页应用", "desc": "上一节3-9为单页应用生成HTML中只生成了一个 HTML 文件，但在实际应用中一个完整的系统不会把所有的功能都做到一个网页中，因为这会导致这个网页性能不佳。 实际的做法是按照功能模块划分成多个单页应用，每个单页应用生成一个 HTML 文件。并且随着业务的发展更多的单页应用可能…"}, {"id": "6844903607502913550", "title": "学会它（Nextjs），前端也可以和PHP程序员一样了", "desc": "话说 PHP 是世界上“最好”的语言，我不是 PHPer ，所以今天我们的主角不是 PHP ，而是前端（Nextjs）。那么问题来了，Nextjs 是什么？ 说直白了：Next.js 是一个基于 React 实现的服务端渲染框架。 好了，今天我们就来聊聊 Next.js 实现。"}, {"id": "6844903587722575879", "title": "webpack中的热刷新与热加载", "desc": "相信大部分的vue开发者都是从vue-cli开始的，很多初学者欢快的跑着vue项目却不敢改随意改变vue-cli的配置（毕竟webpack确实很复杂，vue-cli也做了很多工作来优化初学者的体验）。 相比之下react没有提供一个比较健壮的脚手架了(至少没有明显地被我找到，望…"}, {"id": "6844903810574319623", "title": "使用React Hooks你可能会忽视的作用域问题", "desc": "其实React Hooks已经推出来一段时间了，直到前一阵子才去尝试了下，看到的一些博客都是以API的使用居多，还有一些是对于原理的解析。而我这篇文章想写的是关于React Hooks使用中的作用域问题，希望可以帮助到曾经有过困惑的你。 useEffect接受两个参数：一个函数…"}, {"id": "6946116118687776799", "title": "2021-04-01 React Hook进一步理解", "desc": "只能在函数最外层调用Hook。不要再循环、条件判断或者子函数中调用 只能在React的函数组件中调用Hook或者在自定义的Hook中调用。不要再其他Javascript函数中调用 setState函数用于更新state。接收一个新的state值并将组件的一次重新渲染加入队列；当…"}, {"id": "6844904056389894158", "title": "[译]如何用React Hooks获取数据", "desc": "在这个教程中，我想向您展示如何通过state和effect钩子来获取数据。我们将会使用广为人知的Hacker News API从科技世界获取流行文章。通过这篇文章，你也能为数据获取实现自己的自定义hook,它可以在你的应用中的任何地方被复用或者发布到npm作为一个独立的node…"}, {"id": "6844903760532078606", "title": "React小知识(3) - 国际化中碰到的问题", "desc": "react的国际化方案，可以说是十分成熟了。 react-intl 一用上，文本，日期、货币统统搞定。 这里想和大家交流的并不是如何使用 react-intl ，抑或如何在 redux 框架中去使用。 而是一个小知识，如何在 placeholder 等属性中支持多语言，并且你只…"}, {"id": "6844903871676956686", "title": "react事件系统之事件触发", "desc": "对于点击事件调用的是simpleeventplugin上的extractEvents函数，该函数会传入的参数是dispatchConfig, targetInst, nativeEvent, nativeEventTarget，其中dispatchConfig是由topLeve…"}, {"id": "6844903801074221063", "title": "React Hooks 札记", "desc": "自从 React 16.8 版本正式发布 React Hooks 以来已经过去一个多月了，而在这之前国内外对于 Hooks API 的讨论也一直是如火如荼地进行着。有些人觉得 Hooks API 很好用，而有些人却对它感到十分困惑。但 Dan Abramov 说过，就像 Rea…"}, {"id": "6844904003466166285", "title": "React源码解读【一】API复习与基础", "desc": "四年，如人生小溪中的一洼清水，如历史长河中的一点水滴，而却就是这四年，我完成了从懵懂到成熟的蜕变。回首这四年，有过创业，有过生病，有过说不出的苦楚，也有过让我笑不间断的喜悦。 那年的背包，依然在背着；那年的代码，依然还在用类似的逻辑实现着；一件好的东西总会让我爱不释手，reac…"}, {"id": "6844903725408976910", "title": "大白话解析 redux 、 redux-thunk 、redux-saga 和 react-redux", "desc": ""}, {"id": "6844903734716137479", "title": "Next.js 脚手架进阶 — 封装fetch && 增加中间件", "desc": "第一，我在另一个脚手架express-react-scaffold里使用的就是axios,秉着学习新东西的想法，想自己封装一下fetch。 第二，个人觉得fetch的功能更为强大，因为fetch是原生支持的API，更加的底层，所以可扩展性更好，经过封装扩展过后的fetch应该是…"}, {"id": "6844903791104376840", "title": "React Suspense 尝鲜", "desc": "如同字面意思，Suspense 让组件遇到异步操作时进入“悬停”状态，等异步操作有结果时再回归正常状态。 值得一提的是目前版本 (截止至 react@16.8) 还不支持服务端渲染，但还是会在以后的版本上支持的。 Suspense 异步加载数据截止到目前都是不稳定的版本，根据 …"}, {"id": "6844903805411147790", "title": "React项目实践（一）从框架配置讲起", "desc": "components: 放置公共展示组件。单纯负责将获取的Props传来的数据进行展示 containers: 容器组件，主要负责数据的获取，业务相关的交互等内容。 layouts: 在前端页面中通常有可以复用的页面布局，比如导航，底部菜单是固定的。我们可以通过一个写一个高阶组…"}, {"id": "6844903700717109261", "title": "React的新引擎—React Fiber是什么？", "desc": "当浏览器的主线程长时间忙于运行一些事情时，关键任务的执行可以能被推迟。 为了展示这个问题，我做了一个demo，为了使星球一直转动，主线程需要每16ms被调用一次，因为animation是跑在主线程上的。如果主线程被其他事情占用，假如占用了200ms，你会发现animation会…"}, {"id": "6844904185364742152", "title": "setState同步OR异步", "desc": "setState()更新状态的两种写法setState(updater,[callback])函数方式：setState(stateChange,[callback])对象方式：案例setState的"}, {"id": "6844903983660662791", "title": "[译]React核心概念4：state&生命周期", "desc": "我们来看看上节中编写的计时器。目前我们只学习了一种方式来更新UI，那就是调用ReactDOM.render()来改变渲染输出。 在本节中，我们将学习如何封装Clock组件并使其能够被复用。并且Clock组件将会设置自己的计时器并且每秒更新一次。 首先，我们可以封装Clock组件…"}, {"id": "6844903983652438023", "title": "[译]React核心概念1：JSX简介", "desc": "这个有趣的语法既不是一个字符串也不是一个HTML标签。 这种语法被称为JSX，是Javascript的一种扩展语法。我们推荐在React中使用JSX去编写我们的UI界面。也许你会觉得JSX很像是模板语言，但是它具有JavaScript的全部功能。 JSX创建了React的元素，…"}, {"id": "6844903632513531918", "title": "给 smox 加上翅膀，不断进步的 react 状态管理", "desc": "halo大家好，我是132这段时间，一直沉迷smox的迭代，然后又发布新版本了上一篇文章（查看这里），已经简单阐述了smox，文章中也有人提到中间件机制，今天这篇文章可能稍稍复杂些，主要是smox两个"}, {"id": "6930969181609263112", "title": "深入浅出的学习react[学习笔记20]", "desc": "在上一讲尝试对 Redux 源码进行拆解，认识了 Redux 源码的基本构成与主要模块，并深入了解了 createStore 这个核心模块的工作逻辑。这一讲将更进一步，针对 dispatch 和 subscribe 这两个具体的方法进行分析，分别认识 Redux 工作流中最为核…"}, {"id": "6844903727258681351", "title": "React 2019年路线图发布！Hooks明年第一季度上线", "desc": "你可能在之前的一些文章和演讲中听过“Hooks”、“Suspense”和“并发渲染”等新特性。 在这篇文章中，我们将介绍它们在 React 稳定版中的预期发布时间表。 发布时间表 React 16.6: 用于代码拆分的 Suspense（已发布） React 16.7: Rea…"}, {"id": "6844903541601992718", "title": "用 TypeScript 和 css-in-js 的方式写 react app", "desc": "Create react app with TypeScript & css-in-js. Init a project: Adding css-in-js module: Creating a style file at ./MyComponent/MyComponent-s…"}, {"id": "6949084304244736037", "title": "类组件和函数组件", "desc": "函数组件类组件<Welcome/>会被翻译成什么?<div/>会被翻译为React.createElement('div)<Welcome/>会被翻译为React.createElement(Welc"}, {"id": "6844903616331907085", "title": "React+Redux+中间件", "desc": "在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。 ViewModel…"}, {"id": "6844903587982606349", "title": "[译] React 中的受控组件和非受控组件", "desc": "如果初涉 React 应用开发，你可能曾嘀咕过：“受控组件和非受控组件是啥？”。那么我建议你额外花点时间先看看官网的文档。 在 React 应用中之所以需要受控组件和非受控组件，起因于<input>、<textarea> 和 <select> 这类特定的 DOM 元素默认在 D…"}, {"id": "6844903597168132103", "title": "react-copy-write 基于新 Context 和 immer 的 React 状态管理库", "desc": "react-copy-write 一个比较新的 React 状态管理库，通过 immer 实现了可变状态接口和部分 reselect 记忆功能。可通过下图快速了解该库的整体架构： 新的 Context 给出多个 API 解决了深层传递数据的笨重。 其中 Provider 提供的…"}, {"id": "6844903593821093901", "title": "Redux 进阶 -- 优雅的处理 async action", "desc": "在上一篇文章 Redux 入门 -- 处理 async action 中，阿大通过请了一个采购员完成了耗时的进口商品的售卖。 但是，阿大同时也发现了一个问题：顾客要买水果生鲜的话需要找销售员，要买进口水果生鲜的话要找采购员，这样的话，顾客需要找不同的人，很麻烦。阿大想了想，能不…"}, {"id": "6844903613962289159", "title": "【翻译】使用React、 Redux 和 SVG 开发游戏（二）", "desc": "译者：如果你安装npm包过程中出现错误，请尝试更新npm自身至最新的版本之后再次安装。 在上一部分中，你使用create-react-app初始化了项目，安装并配置了redux来管理游戏的状态。在那之后，你学会了如何在React中制作SVG组件。我们做了多个组件比如天空组件、陆…"}, {"id": "6844903560367308814", "title": "（译）解密 ES6 语法下 React Class类的内存使用", "desc": "现在已经有许多优秀的文章以不同的方式介绍使用 ES6 语法写类方法。这些文章多数提及了此类方法的表现力(例如执行速度)，但我并没有看到其中有专注于内存影响的篇幅。 最近，这个话题在 Axel Rauschmayer 的推动下，被重新提起。对此，许多人表达了他们的观点与想法，但显…"}, {"id": "6844903697177133070", "title": "[译]理解react之setState", "desc": "组件状态(state)是一种持有，处理和使用信息的方式。state包含的信息仅作用于一个给定组件的内部，并允许你根据它实现组件的一些逻辑。state通常是一个POJO(Plain Old Java[Script] Object)对象,改变它是使得组件重新render自己的方式之…"}, {"id": "6844903573793292302", "title": "【译】展示型组件和容器型组件(作者：Dan Abramov，Redux的开发者)", "desc": "在开发React应用的时候，我发现了一种极其简单的开发模式。如果你已经用过一段时间的React，你也许已经发现了它。这篇文章已经讲的很好了，但是我想补充几点。 如果你将组件分为两类，你会发现它们更容易被复用和理解。我把这两类称为容器型组件 和 展示型组件 ，但是我也听说过其他名…"}, {"id": "6918732763818360839", "title": "深入浅出的学习react[学习笔记8]", "desc": "在之前的文章学习中，我们探究了 React-Hooks 的来头，并理解了其背后的“设计动机”。接下来我们来构建对 React-Hooks 的整体认知。 在章节的主体部分，将会通过一系列的编码实例来帮助你认识 useState、useEffect 这两个有代表性的 Hook，这一…"}, {"id": "6844903602129993736", "title": "那些前端MVVM框架是如何诞生的", "desc": "简述框架的演进过程（纯属扯淡）"}, {"id": "6844903583725387789", "title": "在使用Redux前你需要知道关于React的8件事", "desc": "状态管理是很复杂的.视图层工具库,如React,允许我们在组件内部管理状态.但它只能扩展到具体某一个组件.React仅仅是一个视图层库.最终你决定(把状态管理)迁移到一个更为成熟的解决方案,如Redux.接下来我想在这篇文章中指出在跳上Redux的列车前,你应该了解清楚的有关R…"}, {"id": "6844903556416274440", "title": "React-Redux v5 源码分析", "desc": "我们知道，Redux是一个独立的状态管理工具，如果想要和React搭配使用，就要借助React-redux。关于它的工作原理网上的教程很多，我大致讲一下，之后主要是分析源码： 好了，以上是Redux的工作。那么，结合React，我们会如何使用呢？ 如果我们直接将store作为最…"}, {"id": "6844903495946993672", "title": "回敬尾巴是阿里的某资深：手撸一个基于html字符串模板的Virtual DOM", "desc": "之前发表了HTMLStringParser，但是撸完之后觉得没完，顺着逻辑可以撸出一个Virtual DOM，于是就继续撸了。这篇文章在HTMLStringParser的基础上，全面阐释了撸一个Virtual DOM的全部逻辑思路，并且有源码可以参考。"}, {"id": "6993185678481686535", "title": "React ref 从原理到应用", "desc": "前言 提到 ref或者 refs 如果你用过React 16以前的版本，第一印象都是用来访问DOM或者修改组件实例的,正如官网所介绍的这样: 然后到了React 16.3出现的 createRef 以"}, {"id": "6986157463225499684", "title": "Typescript 实现一个可在 React 项目中使用的简单依赖注入系统", "desc": "什么是依赖注入？在说依赖注入之前，我们发现有个概念叫做 “控制反转”经常一起出现，它们有何区别呢？本文将带你实现一个可在 React 项目中使用的简单依赖注入系统"}, {"id": "6918896729366462471", "title": "一文归纳 React Hooks 常用场景", "desc": "React 在 v16.8 的版本中推出了 React Hooks 新特性。在我看来，使用 React Hooks 相比于从前的类组件有以下几点好处： 关于这方面的文章，我们根据使用场景分别进行举例说明，帮助你认识理解并可以熟练运用 React Hooks 大部分特性。 与 c…"}, {"id": "6844903862898262024", "title": "webpack4 的30个步骤打造优化到极致的 react 开发环境，如约而至", "desc": "本篇所有代码线上代码react-webpack4-cook,翻译过来叫：webpack4和react的乱炖，可以跟着代码进行配置，之前有很多坑，线上代码都已经被解决了 。如果对您有帮助，不妨给个star.点赞关注不迷路 一篇文章不写前言总感觉不太正式，大概介绍下我是怎么完成一个…"}, {"id": "6844903601416978439", "title": "面试官: 实现双向绑定Proxy比defineproperty优劣如何?", "desc": "双向绑定其实已经是一个老掉牙的问题了,只要涉及到MVVM框架就不得不谈的知识点,但它毕竟是Vue的三要素之一. 可以实现双向绑定的方法有很多,KnockoutJS基于观察者模式的双向绑定,Ember基于数据模型的双向绑定,Angular基于脏检查的双向绑定,本篇文章我们重点讲面…"}, {"id": "6844903682283143181", "title": "[译] 理解 JavaScript 中的执行上下文和执行栈", "desc": "如果你是或者想成为一名 JavaScript 开发者，你必须知道 JavaScript 程序内部是如何执行的。理解执行上下文和执行栈对于理解其他 JavaScript 概念（如变量声明提升，作用域和闭包）至关重要。 正确理解执行上下文和执行栈的概念将使您成为更出色的 JavaS…"}, {"id": "7001263366836584456", "title": "React基础", "desc": "React安装 React可以直接下载使用,也可以使用React CDN库,地址如下 通过npm或者yarn在已有项目中添加React支持"}, {"id": "6995356910962606093", "title": "React 18: Start Transition", "desc": "React provides \"startTransition\" feature to let us as developers decide which event is urgent."}, {"id": "6961000054018539550", "title": "React 代码共享最佳实践方式", "desc": "在React中实现逻辑复用通常有以下几种方式：Mixin、高阶组件(HOC)、修饰器(decorator)、Render Props、Hook。本文主要就以上几种方式的优缺点作"}, {"id": "7004754021542002718", "title": "React 基础", "desc": "1 React 入门 1 React 简介 2 hello_React.html 3 虚拟dom与真实dom 4 jsx语法规则 5 js表达式 vs js语句 diff算法"}, {"id": "6987249332424704030", "title": "高德+React实现H5版高德打车-司机接驾-行程中 汽车行驶功能", "desc": "跟着我一起来实现吧!！👊 1. 首先需要实现的是路径规划，通过起点和终点规划一条小车需要行驶的路线，且路线分为最快捷、最经济、最短距离、考虑实时路况"}, {"id": "6978190158252212254", "title": "react-router v6 用起来", "desc": "首先要声明的是 react-router 目前是beta版本，但是距离上次发布已经一年多没动静了，至于为什么迟迟没发布的原因可以看这个issue 本人的个人博客已经由v5升至v6版本，各位如果有新的项"}, {"id": "6903335881227108366", "title": "我是如何阅读源码的", "desc": "最近写了很多源码分析相关的文章，React、Vue 都有，想把我阅读源码的一些心得分享给大家。 说到看源码，很多人都有个误区，觉得看源码必须要到 github 上把完整的代码 clone 下来，认为只有把完整的代码下载下来，才能开始愉快的学习。 这里我们先拿 React 举例，…"}, {"id": "6982539854223507492", "title": "突破Hooks所有限制，只要50行代码", "desc": "大家好，我是卡颂。 你是否很讨厌Hooks调用顺序的限制（Hooks不能写在条件语句里）？ 你是否遇到过在useEffect中使用了某个state，又忘记将其加入依赖项，导致useEffect回调执行"}, {"id": "7002588419754819614", "title": "React--5: 类的相关复习", "desc": "这是我参与8月更文挑战的第31天，活动详情查看:8月更文挑战 1. 创建一个类 红色的代表实例对象是谁new出来的。蓝色的是实例对象。 为什么他要把，谁缔造的也显示出来呢？ 如果还有一个类Dog，我们"}, {"id": "7004054750182244360", "title": "Hook API 使用篇", "desc": "本篇将重点介绍 Hook API 的具体使用方式。之后的文章会介绍原理。 useState 我们首先使用Hook来声明一个state，这是不管做什么都需要的一个API。 调用 useState 方法的"}, {"id": "7001862851858006024", "title": "React Hooks学习笔记", "desc": "什么是Hooks Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 为什么要用Hooks 代码可读性好，易于维护"}, {"id": "6973456385665138725", "title": "setInterval 和 hooks 撞在一起，翻车了~", "desc": "事情是这样子的，周末加班赶项目，踩坑了一个关于setInterval 和 hooks的问题，特记录一下，也许对朋友你有帮助呢~"}, {"id": "6971646147706241054", "title": "CRA+react-app-rewired搭建reactH5架子", "desc": "前言 这篇文章主要通过 create-react-app 脚手架配合 react-app-rewired 添加一些额外的webpack配置搭建一个基于vw的H5架子"}, {"id": "6934144158332354567", "title": "我后悔没有在自己成为 React 开发者之前做的 6 件事情", "desc": "React 是一个很好的适合我们去学习的工具，它让我们能够以我们自己的方法编写代码完成任务。但即使它的功能很强大，它也有着不少的限制。 对于新的开发者而言，其实并没有明确的指南告诉我们，某一个场景最适合用哪一个工具。这让每一个问题都有各种各样的解决方案，而我也同样掉到了这个坑里…"}, {"id": "6844903504054599694", "title": "React + Mobx构建React-Cnode", "desc": "前一阵子，我刚写了篇React全家桶实战，介绍了下我用react全家桶构建一个react webapp的中遇到的一些问题。后来，我发现了mobx。然后静下心去看一看它的文档。发现很有趣，所以我把这个项目用mobx重构了一次。旧的版本是用react全家桶，就是react+redu…"}, {"id": "6844903505614880776", "title": "组件库设计实战系列：重新设计 React 组件库", "desc": "从宏观的角度来讲，只有对具体业务的良好抽象才能真正提高一个团队的开发效率，又囿于不同产品所面临的不同业务需求，当我们抽丝剥茧般地将一个个前端项目抽象到最后一层，那么剩下的就只有按钮、输入框、对话框、图标等这些毫无业务意义的纯 UI 组件了。 选择或开发一套适合自己团队使用的 U…"}, {"id": "6844903769671467015", "title": "「每日一瞥 📰 」0121 ~ 0125", "desc": "今天我们来探讨下，如何使用 React Hooks 来简化和统一我们的代码逻辑。 通常情况下，如果你对「贫血模型」有一定的恪守，就不会（也不应该）在组件内找到很多业务逻辑，它的最佳归宿应该是为我们提供视图渲染的能力。即使存在一些逻辑，通常也应该是样式计算、向后兼容性、一些最小的…"}, {"id": "6898208628054949896", "title": "简单实现 Recoil 的状态订阅共享", "desc": "Recoil 是一个新的 React 状态管理库，现在还处于试验阶段，它提出了分散式的原子化状态管理，提供 Hooks 式的 API 用于设置和获取状态，并使组件订阅状态。本文简单的实现了 Recoil 中使多个组件共享并订阅某个 state 的原理。 组件 Com1 ，Com…"}, {"id": "6844903497746350087", "title": "React - 为什么我不再使用setState？", "desc": "几个月前，我开始停止使用React的 setState 。我并不是不再需要组件状态，而且不再用React来管理我的组件状态。"}, {"id": "6844903508584448014", "title": "组件库设计实战系列：国际化方案", "desc": "放眼全球，中国整体的互联网技术实力毫无疑问仅次于美国并领先剩余所有的国家一大截。但如果我们非要找出一个中国互联网公司做得不够优秀的地方，那么产品国际化一定是其中之一。虽然我们也拥有诸如 AliExpress，天猫国际等成功案例，但不得不说大部分中国公司在选择出海后，都没有能够收…"}, {"id": "6844903621323145230", "title": "[译] 更可靠的 React 组件：合理的封装", "desc": "耦合（coupling） 是一种表示组件之间依赖度的系统特征。根据依赖的程度，可以区分出两种耦合： 在设计系统结构和组件间关系的时候，应以松耦合为目标。 反之，紧耦合的系统就没有上述便利。主要的缺点就在于无法轻易修改一个大量依赖其他组件的组件。甚至一个简单的改变都会导致连锁的修…"}, {"id": "6844903711995592718", "title": "React Conf 2018 专题 —— \t React Today and Tomorrow Part I 视频中英双语字幕", "desc": "翻译字幕的难度远超过了我的预估，首先是听力方面，有些单词实在听不出来，第二个困难就是视频太长了，精校需要花费大量时间，所以决定逐步翻译，先把 Sophie 的演讲（10 分钟左右）翻译出来，光棍节在星巴克坐了一上午才校对翻译完毕。 简单介绍一下视频的内容，该视频是 React …"}, {"id": "6870408862562779144", "title": "重学JavaScript（六）what's this", "desc": "正如标题所言，今天想和大家分享一下什么是this。this是JavaScript中一个常见的关键词，举一个比较简单例子可能方便你阅读下面的内容。 在上面对话中，我们使用了第三人称她来指代米娅莫拉苏娜丹妮谢莉红这个人，我今天要讲的this其实和这个第三人称有一定的相似性。而且根据…"}, {"id": "6914178779862532109", "title": "React中的key", "desc": "​ 为什么指定key值之后可以带来上述的收益？一切要先从React的渲染策略说起。 ​ 我们知道React的工作机制是维护一棵虚拟DOM树（JS对象），其结构与浏览器中的DOM树保持某种映射关系。每次组件更新（props、state、context等发生变化时）会先生成一棵新的…"}, {"id": "6844904183783489544", "title": "React SSR 工程化最佳实践（基于 koa 和 context api）", "desc": "自从 react vue angular 等 mvvm 前端框架问世之后，前后端分离使得分工更加明确，开发效率显著提高。 由以前的后端渲染数据吐页面变成了前端请求数据，渲染页面，所以在客户端渲染中必须先下载服务器的 js css 文件再进行渲染。这需要一定的时间，中间的白屏对用…"}, {"id": "6927183452060155918", "title": "揭秘react hook黑魔法", "desc": "react hooks推出也有很长一段时间了，我相信很多项目的代码里面都有着 hooks 的身影。那么你在用的时候有没有问过自己，为什么一个函数能记住状态？为什么 hook 写在if else中会有 warning ？下面我们来一点点的扒一扒 hook 的实现原理。 我们用的最…"}, {"id": "6844903668441939975", "title": "React.js和Vue.js有感—前端开发组件化思想的局部要点理解", "desc": "无论是vue还是react，核心思想离不开组件化，而组件化中，脱离了传统的操作DOM对UI状态的改变，更进一步通过对数据的操作来改变UI状态，避免了直接操作DOM的繁琐和易出现的bug。 而组件化中的关键两点就是组件的props和state，说直白一点就组件的属性和状态。这两点…"}, {"id": "6844903865125453838", "title": "React Hooks 在列表页中的实践", "desc": "在本文中，我想向大家介绍 React Hooks 在列表页中的实践，主要是通过 useReducer 和 useEffect 来实现的。以及表达一下我对 React Hooks 的理解与思考。 如果你还不知道 React 的这个新特性 React Hooks，那么点击 Hook…"}, {"id": "6934498125960708103", "title": "加加 React 30 问 -- 1. setState 是同步还是异步", "desc": "1. setState 是同步还是异步 回到上面这个例子，无论是同步还是异步，我们都能在视图中得到我们想要的更新过后的结果，而当我们需要做一些依赖更新过后的值的操作，本身就不应该编写在 setState 之后。 在业务中一旦需要考虑这个特性，大概率都是写法出问题了，推荐按照正规…"}, {"id": "6971044702179033119", "title": "记录一些React脚手架配置代理笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6930987620059054087", "title": "深入浅出的学习react[学习笔记25]", "desc": "经过前面的学习，从基础到原理再到生产实践，于此我们对 React 也建立起了一个系统且深入的认知。前不久，React 17 版本正式面世，但 React 17 到底意味着什么，或许有不少人会感到一头雾水。因此，在专栏的最后一讲，先来一起聊聊面向未来的 React——React …"}, {"id": "6844903566994309128", "title": "React Native——使用SectionList改造电影列表", "desc": "在上篇文章《ReactNative——使用FlatList实现豆瓣电影列表》中我们用FlatList实现了一个豆瓣电影的列表页。本篇我们使用SectionList将两个电影列表页改为一个分组的列表页，学习一下SectionList的用法。 SectionList是用于多个分组的…"}, {"id": "6971044881628135432", "title": "记录一些React需要安装的内容笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844904005982748685", "title": "先下手为强，在 fre 中疯狂 suspense", "desc": "halo，大家好，我是132，今天闲着没事，对suspense和context进行了封装因为我一直对尺寸有超高的强迫症，所以frecore只提供最最最核心的机制比如，我提供promise的内部捕获，但"}, {"id": "6844904086215589901", "title": "【译】Next.js 9.3 getStaticProps，getStaticPaths和getServerSideProps的新API概述", "desc": "在pages文件夹中的文件名中添加一个括号[]以启用动态路由。(pages/posts/[pid].js)"}, {"id": "6844903696409559048", "title": "「译」React 项目结构和组件命名之道", "desc": "React 作为一个库，不会决定你如何组织项目的结构。这是件好事，因为这样我们有了充分的自由去尝试不同的组织方式并且选取最适合我们的方式。但是从另一个角度讲，这可能会让刚刚上手 React 的开发者产生些许困惑。 我将会在本文为大家展示我已经使用过一段时间并且效果不错的方式，这…"}, {"id": "6844903577064833037", "title": "那些激动人心的React,Webpack,Babel的新特性对于我们开发体验带来哪些提升", "desc": "写在开头: 在怀着激动和忐忑的心情写出团队第一篇文章时,这个兴奋感一方面来自团队组建以来这是我们首次对外部开启一扇窗,另一方面我们也会持续听取意见,维持一个交流的心态。 但是除去这个我们翘首以盼的改变外,也同样有很多我们值得一提的东西。 我们先从编译文件开始我们看看Babel …"}, {"id": "6844903661403897870", "title": "[译] 2018 来谈谈 Web Component", "desc": "对很多人来说，组件已经成为他们开发工作中的核心概念。组件提供了一种健壮的模型，允许我们用一个个更小的更简单的封装好的部件来搭建出复杂的应用程序。组件的概念在 Web 上已经存在一段时间了，比如在 JavaScript 生态的早期，Dojo Toolkit 已经在它的 Dijit…"}, {"id": "6844903607523868680", "title": "还在用 Redux，要不要试试 GraphQL 和 Apollo？", "desc": "前段时间刷 Twitter 的时候看到大 V 纷纷提到 Apollo，预测它将在 2018 年崛起。正巧碰上有使用 GraphQL 的机会，在大概翻了下 Apollo 的文档之后，我下定决心在新的前端项目里尝试下抛开已经熟悉的 Redux，完全使用 Apollo 来写数据层。一…"}, {"id": "6844903777925857294", "title": "使用 React Hooks 声明 setInterval", "desc": "如果你玩了几小时的 React Hooks，你可能会陷入一个烦人的问题：在用 setInterval 时总会偏离自己想要的效果。 老实说，我觉得这些人是有一套的，至少为此困惑了。 然而我发现这不是 Hooks 的问题，而是 React编程模型 和 setInterval 不匹配…"}, {"id": "6929423413832335367", "title": "React 源码解析之协调过程（一）", "desc": "在React 源码解读之首次渲染流程中我们讲到了 React 在首次渲染过程（其实更新过程也一样）中存在 Render 和 Commit 两大阶段，其中 Render 阶段又可称为协调阶段，它包括 beginWork 和 completeWork，本文着重讲讲 beginWor…"}, {"id": "6897038502517555207", "title": " 模仿antd4从零到一实现rc-field-form", "desc": "后台开发中，表单的需求非常的频繁。面对大量的表单需求，antd提供的Form组件提供的功能足够强大，学习成本也非常的低。 请带着以上这些问题，跟我一起对Form组件的核心依赖rc-field-form进行了源码学习与仿造。 食用方式：跟着文章动手实现属于你自己的表单组件，同时比…"}, {"id": "6844904019660537869", "title": "走进React Fiber 架构", "desc": "当react刚推出的时候，最具革命性的特性就是虚拟dom，因为这大大降低了应用开发的难度，相比较以往告诉浏览器我需要怎么更新我的ui，现在我们只需要告诉react我应用ui的下个状态是怎么样的，react会帮我们自动处理两者之间的所有事宜。 这让我们可以从属性操作、事件处理和手…"}, {"id": "6864176533549318152", "title": "React SSR 实践过程（一）", "desc": "可能我们如果在公司不是基础架构方面工作，基本不会让我们去做react ssr这些事儿，一般都是公司框架都已经搞好了。但是，作为往高级开发努力的人来说，react ssr还是非常有必要去了解去实践的。 文章会贴一些代码，但是不会全贴（篇幅会太长），每一部分的完整代码，都可以到gi…"}, {"id": "6987595856161538085", "title": "React实战之如何实现一个长列表：antd源码解读", "desc": "长列表渲染是前端领域较为常见的渲染需求，通常是指，当我们面对一个数据量较大的列表时，不能一次性直接获取并渲染全部内容（因为这样速度会很慢，影响用户体验），而是采用一些技术，能够让列表的内容逐步地呈现。"}, {"id": "6873795871708807175", "title": "react Hook", "desc": "把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate）的子组件时，它…"}, {"id": "6844903591690534926", "title": "Semver(语义化版本号)扫盲", "desc": "最近Github 10周年在朋友圈里沸沸扬扬刷屏，小编在工作中却惊讶的发现不少同事对版本号中的beta和rc没有概念，使用npm install package@next时，也不清楚next代表的含义。于是，决定写一篇文章科普一下由 Github 起草的Semver(语义化版本…"}, {"id": "6926359111126908936", "title": "React 全家桶：React CLI + Ant Design + Less +  axios + react-router + redux 搭建中后台项目", "desc": "使用 babel-plugin-import（推荐）。 该操作为永久性，不可逆的。 使用 babel-plugin-import 的 style 配置来引入样式，需要将配置值从 'style': 'css' 改为 'style': true，这样会引入 less 文件。 安装完…"}, {"id": "6952670594341175310", "title": "React源码解析 之Fiber的渲染（2）beginWork", "desc": "beginWork 阶段React源码系列React源码解析之 Fiber结构的创建React源码解析 之 Fiber的渲染（1）beginWork阶段从调用的代码中来看，beginWork最终返回的"}, {"id": "6990935682025783333", "title": "PC端  React使用高德地图实现点击事件标记经纬度", "desc": "react项目地图功能 使用 react-amap 插件 实现点击地图某个位置 获取经纬度并标记该地点功能"}, {"id": "6937832776263548935", "title": "React 面试不完全指南：为什么要学数据流管理？", "desc": "很多前端开发都离不开框架，相信你一定听说过\"数据驱动视图\"这句话，意思就是说，我们界面的内容及内容变化都是数据决定的，不管你是用Vue、React还是其他框架，基本都是这个理念。在面试中，面试官经常会"}, {"id": "6844904006070829069", "title": "超性感的React Hooks（一）：为何她独具魅力", "desc": "正如标题所示，我准备写一系列文章介绍React Hooks。 过去大半年里，我将React Hooks应用到了许多大型项目，其中5个全新重构，其他项目由于时间关系少量使用。 截止目前为止，其中一个项目useState使用2053次。 在大量使用了React Hooks之后，我有…"}, {"id": "6844903703707648013", "title": "React Native 重构路线图发布", "desc": "今年 6 月中旬，FB 曾宣布他们将 大规模重构 React Native，目的是为了让 React Native 更轻量，更适应 JavaScript 生态圈的发展。今天，Facebook 正式公开了他们计划的一些细节。"}, {"id": "6844903636774961165", "title": "实施微前端的六种方式", "desc": "微前端架构是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。 由此带来的变化是，这些前端应用可以独立运行、独立开发、独立部署。以及，它们应该可以在共享组件的同时进行并行开发——这些组件可以通过 NP…"}, {"id": "6994321590062153759", "title": "antd 基础组件 React Component RC-Tree 数据整理", "desc": "antd 基础组件 React Component RC-Tree 源码路径 src/Tree.tsx 处理数据 入口 getDerivedStateFromProps Tree Node 处理逻辑 "}, {"id": "6979132493333004319", "title": "【学习笔记】React+React全家桶学习笔记", "desc": "React+React全家桶 包括JSX语法，React-Router，Redux等，包含代码以及链接"}, {"id": "6844903566381940744", "title": "聊一聊我对 React Context 的理解以及应用", "desc": "Context被翻译为上下文，在编程领域，这是一个经常会接触到的概念，React中也有。 在React的官方文档中，Context被归类为高级部分(Advanced)，属于React的高级API，但官方并不建议在稳定版的App中使用Context。 不过，这并非意味着我们不需要…"}, {"id": "6994595437109837831", "title": "React入门十：组件的生命周期", "desc": "这是我参与8月更文挑战的第九天，活动详情查看：8月更文挑战 1. 生命周期概述 意义：组件的生命周期有助于理解组件的运行方式、完成更复杂的组件功能、分析组件的错误原因。 组件的生命周期：组件从创建到挂"}, {"id": "6844904135091814407", "title": "React hooks 怎样做防抖？", "desc": "防抖（debounce）是前端经常用到的一个工具函数，也是我在面试中必问的一个问题。团队内部推广React hooks以后，我在面试中也加入了相关的题目。如何实现一个useDebounce这个看起来很基础的问题，实际操作起来却让很多背代码的小伙伴漏出马脚。 围绕一个主题不断切换…"}, {"id": "6844903982725349390", "title": "你想知道的关于 Refs 的知识都在这了", "desc": "Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。 管理焦点，文本选择或媒体播放。 触发强制动画。 集成第三方 DOM 库。 1. createRef createRef 是 React16.3 版本中引入的。 使用 Rea…"}, {"id": "6844903999074746381", "title": "团队 React 代码规范制定", "desc": "团队中每个开发人员的水平不同，技术关注点不同，如果没有一份代码规范的参照和约束，那么项目中的代码将会风格迥异，难以维护，为保证代码质量和风格统一，特此拟定一份《团队React 代码规范》，这样整个团队的开发人员可以参照这份代码规范进行编码，从而让团队的代码风格统一，利于维护。如…"}, {"id": "6844904055840440334", "title": "超全面详细一条龙教程！从零搭建React项目全家桶（上篇）", "desc": "React是近几年来前端项目开发非常火的一个框架，其背景是Facebook团队的技术支持，市场占有率也很高。很多初学者纠结一开始是学react还是vue。个人觉得，有时间的话，最好两个都掌握一下。从学习难度上来说，react要比vue稍难一些。万事开头难，但是掌握了react对…"}, {"id": "7006523370779115527", "title": "React 部分hooks的使用及注意", "desc": "React官方关于hooks的介绍是：hooks让我们可以在不使用class component的情况下使用 state 和 其他React特性，"}, {"id": "6982010663237320735", "title": "React18将会发布些什么？——前置篇", "desc": "开箱即用的提升（升级到18即可获得的能力）: 自动批处理、Suspense 组件的 SSR 支持、Concurrent Features 等..."}, {"id": "6989893050117914632", "title": "前端项目接入单元测试一", "desc": "一、单元测试发展 1、为什么要有单元测试 软件测试是一种实际输出与预期输出之间的审核或者比较过程 测试可以尽早发现BUG 测试可以提高代码质量 测试可以让我们自信地重构 2、手动的测试代码(或者叫肉眼"}, {"id": "6844904016581754888", "title": "Create React App无eject配置（react-app-rewired 和 customize-cra）", "desc": "Create React App（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。 使用 create-react-ap…"}, {"id": "6844903921442373639", "title": "使用React Hooks模拟生命周期", "desc": "在 React 16.8 之前，函数组件只能是无状态组件，也不能访问 react 生命周期。hook 做为 react 新增特性，可以让我们在不编写 class 的情况下使用 state 以及其他的 react 特性，例如生命周期。接下来我们便举例说明如何使用 hooks 来模…"}, {"id": "6844903617342734344", "title": "面试官: 你为什么使用前端框架?", "desc": "最开始学习前端框架的时候(我第一个框架是 React)并不理解框架能带来什么,只是因为大家都在用框架,最实际的一个用途就是所有企业几乎都在用框架,不用框架就 out 了. 组件化: 其中以 React 的组件化最为彻底,甚至可以到函数级别的原子组件,高度的组件化可以是我们的工程…"}, {"id": "6995343139699589128", "title": "React--2: jsx", "desc": "这是我参与8月更文挑战的第11天，活动详情查看:8月更文挑战 1. jsx了解 全称：JavaScript XML react定义的是一种类似于 XML 的 JS 扩展语法 JS + XML 本质是 "}, {"id": "6854573217445740557", "title": "使用React-Router实现前端路由鉴权", "desc": "React-Router是React生态里面很重要的一环，现在React的单页应用的路由基本都是前端自己管理的，而不像以前是后端路由，React管理路由的库常用的就是React-Router。本文想写一下React-Router的使用，但是光介绍API又太平淡了，而且官方文档已…"}, {"id": "6844903588720820231", "title": "关于React v16.3 新生命周期", "desc": "当然，这个更替是缓慢的，在整个16版本里都能无障碍的使用旧的三生命周期，但值得注意的是，旧的生命周期（unsafe）不能和新的生命周期同时出现在一个组件，否则会报错“你使用了一个不安全的生命周期”。 旧的生命周期十分完整，基本可以捕捉到组件更新的每一个state/props/r…"}, {"id": "6997830859789172772", "title": "react ssr 搭建", "desc": "csr(客户端渲染) & ssr(服务端渲染) & nsr & esr(边缘渲染) csr: 页面内容的渲染来自于服务端返回的js脚本和ajax请求的数据的执行。csr的出现实现了前后端架构分离。cs"}, {"id": "6996567343992143909", "title": "react navigation使用介绍", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战  在很久之前，RN中文网说推荐用react-navigation替代navigator作为新的导航库，从RN 0.43版本开始，官方就已经"}, {"id": "6989854926901870599", "title": "hooks 系列五：useCallback", "desc": "把内联回调函数及依赖项数组作为参数传入 useCallback ，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性"}, {"id": "6989298558453153823", "title": "React自定义组件应用(父子之间传递数据)", "desc": "React自定义组件应用 通过todos案例来掩饰子向父传递数据和父向子传递数据的方式 1. 拆分组件 2. 静态实现 3. 动态渲染 4. 交互"}, {"id": "6994994449860427806", "title": "图解React源码 - fiber 树构造(对比更新) - 全网最走心的fiber解读之一", "desc": "本节演示了更新阶段`fiber树构造(对比更新)`的全部过程, 跟踪了创建过程中内存引用的变化情况. 与`初次构造`最大的不同在于`fiber节点`是否可以复用."}, {"id": "6844903682023096328", "title": "多端统一开发框架 Taro 1.0 正式发布", "desc": "在 2018.6.7 我们对外开源了 多端统一开发框架——Taro。 Taro 是一个多端统一开发框架，它支持使用 React 的开发方式来编写可以同时在微信小程序、Web 、React Native 等多个平台上运行的应用，帮助开发者提升开发效率，改善开发体验，降低多端研发成…"}, {"id": "6844903655770963976", "title": "前端工程不了解？带你踩坑加爬坑。", "desc": "由于webpack在4.0后，新增mode配置项，它为我们默认设置了production。但是该警告并没有影响build的结果暂且忽略。 可以看到dist目录已经生成了名为my-first-webpack.bundle.js文件。 OK，最基本的配置已经完成，接下来引入Reac…"}, {"id": "6987942449242963976", "title": "进来了解一下 React hooks", "desc": "React hooks 的入门笔记 React v16.8+ 版本增加了 hooks，笔者认为这极大的改变了 React 的开发模式，并且这是有利的。本文主要记录useState..."}, {"id": "6844903718089916429", "title": "面试官问：能否模拟实现JS的bind方法", "desc": "用过React的同学都知道，经常会使用bind来绑定this。 那么面试官可能会问是否想过bind到底做了什么，怎么模拟实现呢。 先看一下bind是什么。从上面的React代码中，可以看出bind执行后是函数，并且每个函数都可以执行调用它。 眼见为实，耳听为虚。读者可以在控制台…"}, {"id": "6981074430474780679", "title": "从 html 实现一个 react🎅", "desc": "基于 html+js 实现最简 react ，从基本代码理解 并发模式 + fiber，不要错过👊👊👊"}, {"id": "6991654777436241956", "title": "在命令行里也能用 React", "desc": "用过 React 的同学都知道，React 作为一个视图库，在进行 Web 开发的时候需要安装两个模块。 react 模块主要提供了组件的生命周期、虚拟 DOM Diff、Hooks 等能力，以及将"}, {"id": "6844903716756127751", "title": "你想要的全平台全栈开源项目 - Vue、React、小程序、Android原生、ReactNative、java后端", "desc": "很多人还不太明白项目到底是干什么的，还有很多疑问。为此我们整理了两篇简单的文档介绍： 最近几天跟多位大佬沟通，对项目未来发展、使命和规划有了新的理解和计划。 目前正在快马加鞭筹建团队，邀请了经验丰富的架构师指导，每个技术栈都会由该领域专业的大佬把关，尽全力做精品开源项目，为大家…"}, {"id": "6993154734580301832", "title": "React 最佳实践：如何实现原生对话框（Portals）", "desc": "在实际开发中，我们大多会选择直接使用 Antd 的对话框组件，其实 Antd 对话框的实现也是基于 React Portals 这个特性。"}, {"id": "6925342156135596046", "title": "react diff算法理解总结", "desc": "从代码可以看出，React通过先判断key是否相同，如果key相同则判断type是否相同，只有都相同时一个DOM节点才能复用。 由于本次更新时只有一个p，属于单一节点的Diff，会走上面介绍的代码逻辑。 同级多个节点的Diff，一定属于下面3中情况的一种或多种。 带着第一轮遍历…"}, {"id": "6885162791632633870", "title": " React 函数式组件的性能优化", "desc": "React 中最重的（时间开销最大的）一块就是 reconciliation ，翻译为调和、和解。reconciliation 的最终目标是以最有效的方式，根据新的状态来更新 UI，我们可以简单地理解为 diff。如果不发生 render，就不会发生 reconciliatio…"}, {"id": "6948333466668777502", "title": "新版react context实践总结", "desc": "react context的api解决的问题是祖先元素与子孙元素的通信问题，在日常的实践中，用到context的地方还是很多的，在新版的context出来之前旧版的context存在着一定的缺陷，主要"}, {"id": "6998140727368613901", "title": "react -fiber概念", "desc": "React Fiber是对react核心算法的一次重新实现。这里我们主要讨论了fiber的基本概念。"}, {"id": "6865495375382806535", "title": "5858快到家 React+hooks+redux项目实战 ", "desc": "​ 秋招正当时，没有一个拿得出手的React实战项目怎么能行？笔者最近恰好读到了神三元大佬在掘金的React Hooks 与 Immutable 数据流实战，研究了一下大神的项目 顿时灵感来了，便使用React简单仿造了一下58到家的APP。 要开发一个项目应用时，我们应该先理…"}, {"id": "6844903618680881165", "title": "前端开发-领域驱动设计", "desc": "随着我们解决的场景越来越专业化和复杂化，大型SPA应用的流行，前端承担的职责越来越多。代码的质量和系统的完整性越来越难把握。很容易导致迭代着迭代着发现代码改不动了。最后只能新起炉灶，重新开发。归根到底在于复杂度的失控，本文会尝试分析其中的问题以及从前端如何应用领域模型开发的角度…"}, {"id": "6982773625271091230", "title": "10分钟理解REACT概念", "desc": "10分钟理解REACT概念 对于将要学习react的你和正在学习react的你 会有帮助的"}, {"id": "7004781938917507079", "title": "前端实习面试准备--React组件基础", "desc": "React事件机制 JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 document 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统"}, {"id": "6984228391159332901", "title": "你想知道的Redux和React-Router都在这里", "desc": "你想知道的Redux和React-Router都在这里 此篇文章主要说明 Redux 和 React-Router 基本用法。"}, {"id": "6844903861161820167", "title": "React组件设计模式-Provider-Consumer", "desc": "我们都知道，基于props做组件的跨层级数据传递是非常困难并且麻烦的，中间层组件要为了传递数据添加一些无用的props。 而React自身早已提供了context API来解决这种问题，但是16.3.0之前官方都建议不要使用，认为会迟早会被废弃掉。说归说，很多库已经采用了 co…"}, {"id": "6844903602545229837", "title": "关于MV*模式的一己之见，科普向", "desc": "mvc是一套设计模式的组合，最初是用于解决客户端图形界面应用程序的模块化问题。 由于用户界面逻辑的更改往往要比业务逻辑更频繁，并且在某些情况下，应用程序需要以不同的方式来显示同一数据等...诸多问题下，解决方案mvc就此诞生。 三者依赖和调用关系可以参考下图，主要是懒得画。 依…"}, {"id": "6844903847341604878", "title": "react无状态组件方式实现无需打包的npm包", "desc": "1. 实现方式: 2. 外层框架: 3. 生成内容方式: 4. 生成内容: 5. 回调函数:"}, {"id": "6844903624976384008", "title": "Redux-Middleware-源码解析", "desc": "一个action的执行顺序:A(action) -> B(action) -> C(action) -> store.dispatch(action),先从内到外生成新的func,然后由外向内执行."}, {"id": "6844903591870726157", "title": "在react项目中使用freactal做状态管理", "desc": "单页应用还是需要一个状态管理器，之前尝试过redux，后来觉得它的写法太繁琐了，还需要装各种依赖，弃之，使用一个较为简单的freactal。 2.1 providerState 用于往store里面添加数据。 可以理解为freactal虽然支持书写多个store，但是数据的来源…"}, {"id": "6844903498425827335", "title": "Preact 源码解析之 setState 相关流程", "desc": "Preact 作为实现大部分 React 的接口，并且专注于轻量的框架，本文作为 Preact 源码解读系列的第一篇，将介绍一些关于 Preact 的在调用 setState 后相关操作的基础源码。"}, {"id": "6844903623239942158", "title": "[译] 更可靠的 React 组件：清楚易懂的可表达性", "desc": "不要低估代码可读性的重要。你有多少次曾纠结于混乱的代码中，每个字都看懂了，但就是猜不出什么意思呢？ 相比于真正写代码，开发者们花费了大把的时间去阅读和理解代码。编码活动中的 75% 的时间都在理解代码，20% 的时间用来修改既有的代码，仅仅只有 5% 的时间是在写新的代码。 把…"}, {"id": "6844903845118607367", "title": "怎样才能构建优秀的React组件？", "desc": "通俗理解：在几年前端开发，应用系统中的功能模块之间是相互依赖、高度耦合。例如：修改A模块，就先找到跟A模块相关联的其他模块，注意修改A模块会对其他模块造成的影响；组件化不是一门新技术，它是一种思想。旨于构建纯粹的模块（称为组件化，进行组件化的模块为组件），模块单一功能原则，以此…"}, {"id": "6844903503886827533", "title": "Vue 2.5 正式发布 – TypeScript 集成优化，更好的错误处理，SFC 里的 Functional Support 及 SSR 支持更多的环境", "desc": "3.0 快出了，💊"}, {"id": "6844903636980482061", "title": "从 0 到 1 实现 React 系列 —— 组件和 state|props", "desc": "看源码一个痛处是会陷进理不顺主干的困局中，本系列文章在实现一个 (x)react 的同时理顺 React 框架的主干内容(JSX/虚拟DOM/组件/...)"}, {"id": "6844904048366190599", "title": "《深入浅出React和Redux》学习笔记（五）", "desc": "重点关注的是，React组件的渲染性能优化。 React利用Virtual DOM来提高渲染性能，虽然每次页面更新都是对组件的重新渲染，但并不是将之前渲染的内容全部抛弃重来，借助Virtual DOM,React能够计算出DOM树最少的修改，这就是React在默认情况下都渲染很…"}, {"id": "6844903508722843656", "title": "React-Redux-Typescript-Immutable实现贪吃蛇小游戏", "desc": "近些日子比较清闲，想着用学到的东西重新写个版本，于是V2就来了（https://caohuilin.github.io/Snake_React_v2/） React生态圈技术实现网页版贪吃蛇小游戏。模拟游戏机界面，传统的游戏模式，找回小时候的回忆！ 贪吃蛇大家都不陌生了，吃掉一…"}, {"id": "6902223902479482894", "title": "从0开始React", "desc": "React是用于构建用户界面的Javascript库（并不是框架）需要Redux/React-router。（描述页面状态的数据结构） 只是视图层框架，大型项目还需要数据框架。 可以在项目中大量复用，周边生态完善(UI库,路由库)，脚手架工具和项目模板省去了配置webpack时…"}, {"id": "6844903918305017864", "title": "[sweep-it] 分享我学习和使用React的历程", "desc": "前言：几天前我发了两个沸点，是关于我学习和使用React，并创建的一个minesweeper游戏。发现大家挺喜欢的，因此，我写了这一篇文章，以此来记录自己的历程，也希望对大家有一点点帮助。 学习一门新的技术，最好的开始就是阅读官方文档，然后才开始自己的实践。因此，我的学习步骤可…"}, {"id": "6844903640927633421", "title": "React.createClass和extends Component的区别", "desc": "后一种方法使用ES6的语法，用constructor构造器来构造默认的属性和状态。 React.createClass：通过proTypes对象和getDefaultProps()方法来设置和获取props. React.Component：由于使用了 ES6，这里会有些微不同…"}, {"id": "6844903792593354765", "title": "[英] Scheduling in React", "desc": "In modern applications, user interfaces often have to juggle multiple tasks at the same time. For example, a search component might need to"}, {"id": "6844903617552449549", "title": "redux 源码详解", "desc": "Store (数据层) : 用来存在应用的状态(数据)，一旦发生变动,就要提醒view更新页面。 定义. Action 是把数据从应用（译者注：这里之所以不叫 view 是因为这些数据有可能是服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。它是 …"}, {"id": "6844903616352878606", "title": "深入理解Vue之模板", "desc": "Vue编译器读取一个组件的template，将会经过如下阶段：parsing, optimizing, codegen, render function, VNode。 最后生成的VNode将会由虚拟DOM处理来创建一个真实Dom。 模板首先会被编译器编译成AST树, AST包…"}, {"id": "6844903703238049806", "title": "React Suite 3.4.0 版本更新，支持 TypeScript", "desc": ""}, {"id": "6844903614494801933", "title": "利用 React Native 打造视频点播应用", "desc": "It seems like a fitting time to review our journey as we approach the one year mark. Whether the way is rugged or easy? Here is the report."}, {"id": "6844903906309341191", "title": "React学习笔记——中间件原理篇", "desc": "react已经出来很久了，其生态圈之庞大，一锅炖不下！各种react-xx，已让我们不堪重负，github上随便一个demo，引入的模块至少都是五指之数+。看着头疼，嚼之无味……。 其它的，看情况学习和了解，我也很菜，以上感悟都是针对初学者，希望可以减少他们在学习过程中接触过多…"}, {"id": "6844903832086921223", "title": "[译] 我多希望在我学习 React.js 之前就已经知晓这些小窍门", "desc": "自从 2013 年 5 月 29 日发布初始版本以来，React.js 迅速抢占互联网。很明显，包括我在内的很多开发者都从这一神奇的架构中获益。 在 Medium 中有很多关于 React.js 的教程，我真希望在初学 React.js 的时候，其中能有一篇能告诉我下面所列的一…"}, {"id": "6963086046720425992", "title": "手把手教你写React虚拟列表", "desc": "1.背景 在开发过程中，总是遇到很多列表的显示。当上数量级别的列表渲染于浏览器，终会导致浏览器的性能下降。如果数据量过大，首先渲染极慢，其次页面直接卡死。当然，你可以选择其他方式避免。例如分页，或者下"}, {"id": "6844903933463265293", "title": "用 React Hooks 的方式使用 react-dnd", "desc": "之前写过一篇 react-dnd 用法的文章，里面写的可能比较啰嗦了，但是内容比较详细，很多 API 都罗列了出来。目前 React Hooks 出来了，react-dnd 也做了对应的更新，所以本篇使用 React Hooks + TypeSscript 对 react-dn…"}, {"id": "6844903587458334733", "title": "Immutable.js了解一下？", "desc": "本篇只是对Immutable.js的简单介绍，后续会继续分享其具体实践应用。 Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。Immutable 实现的原理是 Pe…"}, {"id": "6997036467289587726", "title": "react源码解析之react-dom", "desc": "本文手动实现react-dom，掌握render函数的实现，实现组件的渲染原理及方法。 React 本身只是一个 DOM 的抽象层，使用组件构建虚拟 DOM。"}, {"id": "6989804204218908685", "title": "flooks v4，自动优化，按需更新。最简单 React Hooks 状态管理器", "desc": "flooks v4 将背后的更新核心逻辑进行了全部重写，彻底解决了 \"模块化\" 方案联动更新的问题，从而实现了对更新颗粒度的精细控制。"}, {"id": "6844903680030801933", "title": "VScode 插件工具集，不求全但求好", "desc": "根据调查发现，VScode 和 sublime 是前端开发者比较喜欢的 IDE 。“工欲善其事，必先利其器”，我是一个爱折腾的工具控，刚开始用 VScode 的时候，装了一堆的插件，导致只要开启 VScode 再接上大屏，我的 Mac 就会强烈的反抗，风扇一直呼啸，😳😳..…"}, {"id": "6984612818293096478", "title": "Next.js简单使用教程", "desc": "Next.js 是一个轻量级的 React 服务端渲染应用框架。 优点：1. 零配置 2. 混合模式： SSG 和 SSR 3. 增量静态生成 4. 支持 TypeScript 5.快速刷新"}, {"id": "6915043349560819726", "title": "记一次商业级项目的技术选型、思考、及落地（含完整实践）", "desc": "这是我第一次尝试将项目启动过程的思考及实践通过文字比较完整的记录下来，记录得过程也是一波三折，因为许多技术点都是新的尝试，例如Nextjs、 recoil、react-query等，在写下来之前需要先了解并知道为何选择它、熟悉它并完成基础的集成工作，然后才能兼顾理论和可实操性。…"}, {"id": "6989054367064129573", "title": "React中的createContext和useContext", "desc": "使用createContext的正确姿态 本文介绍一下 React 中常见的 Context API 在class和Hook中的使用方式。在使用 Context API 之前，我们还需要知道为啥要使用"}, {"id": "6988804236398034980", "title": "【源码分析】react-redux", "desc": "啃了一周的react-redux源码，了解内部如何提升性能，和一些没怎么注意到的坑，在此记录一下~~"}, {"id": "6926502144556302343", "title": "无框架 组件化", "desc": "只要一提到组件化，我相信大多数同学，必然会想到 react, vue, angular… 这样的前端框架。 我们都知道 HTML，CSS，JS 分别对应网页中的结构，样式，行为。 假设现在有个功能是：一个红色按钮，点击这个按钮输出alert-text属性上的文案。 明显看出站在…"}, {"id": "6996531237976293383", "title": "React 源码阅读 - 协调", "desc": "什么是协调 Reconciliation 协调，也可以翻译成调和，他主要负责找出哪些组件发生了变化，鼎鼎大名的 diff 算法就是在这个阶段使用的。协调阶段即可以生成 Fiber，也可以更新 Fibe"}, {"id": "6952545904087793678", "title": "写给 Vue 开发的 React 上手指南", "desc": "作为 React 和 Vue 的双修玩家，写点东西用来沉淀自己的对于单项数据流、函数式组件和虚拟 DOM 等概念。"}, {"id": "6964733032393605127", "title": "React 你知道 useMemo，useCallback 和 useEffect，useLayoutEffect 的依赖数组，含义不同么？", "desc": "任何逻辑，都可以拆分成这样的模型： 事件引起状态的变化，状态的变化又发起新的事件 “当 xxxx 发生时，xxxx 的数据会发生改变”，事件在前，状态在后，它是什么样的形式呢？ 引用 cycle.js"}, {"id": "6844903601211604999", "title": " 致敬 React: 为 Vue 引入容器组件和展示组件", "desc": "如果你使用过 Redux 开发 React，你一定听过 容器组件（Smart/Container Components） 或 展示组件（Dumb/Presentational Components），这样划分有什么样的好处，我们能否能借鉴这种划分方式来编写 Vue 代码呢？这篇…"}, {"id": "6984308963265216519", "title": "手写redux核心原理", "desc": "本文从零实现一个简单的 redux ，主要内容在于redux 的设计思路及实现原理 redux 是一个状态管理器，里面存放着数据，比如我们创建 store.js，在里面我们存放着这些数据，只需要在任何"}, {"id": "6901906409361768456", "title": "React Hook丨真正的逻辑复用", "desc": "说起逻辑复用，熟悉 react 小伙伴们一口道出了 HOC [高阶组件] 。没错，高阶组件可以实现逻辑复用，在 hook 之前 react 还有挺多不错的方案。那么，让我们来浅谈 HOC 与 自定义 hook。 在 Vue 中有不错的 v-model.trim 语法糖【自动去掉…"}, {"id": "6844903833043206158", "title": "React List - React Router", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章中的一些链接可能失效，而 jsliang 缺乏精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 通过切换…"}, {"id": "6844903570882428935", "title": "React-Native从零搭建App（长文）", "desc": "本文适合有对React家族有一定使用经验，但对从零配置一个App不是很熟悉，又想要从零体验一把搭建App的同学。 我自己就是这种情况，中途参与到项目中，一直没有掌控全局的感觉，所以这次趁着项目重构的机会，自己也跟着从零配置了一遍，并记录了下来，希望能跟同学们一起学习，如果有说错…"}, {"id": "6934111371642535944", "title": "react服务端渲染（二）", "desc": "在关于react服务端渲染的上篇文章里面，已经把基本环境搭建完成。现在将把react-router-dom和redux集成进去。 然后在服务端和客户端入口分别配置路由，注意：这里服务端和客户端所用的路由组件不一样。 至此，管理服务端渲染的路由配置全部完成。 然后创建自己的red…"}, {"id": "6844903677904289806", "title": "飞冰 - ICE Design Pro 使用指南", "desc": "目前在飞冰中，我们提供了 21 套模板(后续会持续的增加)，可以在 Iceworks 的模板界面根据需求选择合适的模板进行初始化项目，然后基于区块快速搭建页面进行二次开发，减少各种环境配置和 UI 编写的时间，从而提高开发效率。 然而，这些模板或多或少都有各自的模板特征，基于不…"}, {"id": "6977198580687699999", "title": "【React】setState的批处理", "desc": "简要分析了setState批处理的特点及react采用批处理更新的原因，以及如何避免在批处理机制下拿到“不想要”的state值"}, {"id": "6844904032859865102", "title": "手把手教你如何使用swr体验react.Susponse", "desc": "大家好，我是来自重庆的一个精神小伙，今年毕业，来了掘金已经有不少时间了，但从没写过一篇文章，这是我的第一篇掘金文章，写得不好之处希望大佬们能指出。 useSWR 接受一个 key 和一个异步请求函数 fetch 作为参数。 key 是数据的唯一标识符，通常是 API URL，并…"}, {"id": "6844903573105573895", "title": "React源码分析 - Diff算法", "desc": "蓝色框框的部分分别是Diff算法的核心代码updateChildren以及processUpdates，通过Diff算法获取了组件更新的updates队列之后一次性进行更新。 《深入React技术栈》这本书对Diff算法的解释比较好。其实只要记住几个原则以及在具体的计算upda…"}, {"id": "6844903618424864775", "title": "VS Code: ant design snippets 插件", "desc": ""}, {"id": "6844903504457252877", "title": "JavaScript 性能优化", "desc": "前端工程师不但要保证完成界面的规划与开发，并且同时需要保证代码的质量，其中Javscript的运行速度则变得非常重要，此篇文章从工程师的角度入手，结合了开发者工具进行分析, 总结了一些常用的优化手段和法则.... - 小亦俊"}, {"id": "6976941958535053348", "title": "React-配置代理跨域", "desc": "两种： 第一种：这种方案只能配置一个服务器的代理跨域 在package.json文件下添加：proxy：'xxxxx' //服务器的地址 这里的调用api的地址使用你服务端的地址即可。 第二种：可以对"}, {"id": "6844903598497742861", "title": "基于Koa2/React的NodeJS全栈开发框架", "desc": "Github上的脚手架实在太多，可能大多数都是只专注在前端的web开发，例如流行的React生态中的create-react-app和Vue生态中的Vue-cli, 但是可能作为像我一样的全栈开发，一个只关注在前端开发的脚手架满足不了所有的需求，我们可能需要开发更复杂的全栈JS…"}, {"id": "6973197288902492190", "title": "[React源码系列2]React元素渲染原理", "desc": "一、元素渲染 1.1 React元素 1.2 元素的渲染原理 二、源码实现 2.1 createElement children的处理 传入多个儿子，将props.children处理成数组 传入一个"}, {"id": "6912280245055782920", "title": "React 算法之深度优先遍历", "desc": "对于树或图结构的搜索(或遍历)来讲, 分为深度优先(DFS)和广度优先(BFS). 深度优先遍历: DFS(英语:Depth-First-Search,DFS)是一种用于遍历或搜索树或图的算法. 来自 wiki 上的解释(更权威): 当节点v的所在边都己被探寻过, 搜索将回溯到…"}, {"id": "6989869680227778568", "title": "浅谈 React Key", "desc": "为什么要有 key 参考react官方文档的说法，在递归一个数组时，如果没有其他技术的接入，会根据前后两棵树，从前往后的进行1对1的比较，没有任何复用的逻辑。当我们遇到是在数组最前面增加一项时，rea"}, {"id": "6844903651836690440", "title": "小程序redux性能优化，提升三倍渲染速度", "desc": "最近用户反馈我们的小程序很卡，打开商品列表需要四五秒时间，带着这个疑问，我决定对小程序做个全面的性能优化，要做性能优化，必须先理清以下三个关键点。 在阅读案例分析前，建议能先了解小程序的工作原理和性能关键点。 小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独…"}, {"id": "6844903942296436749", "title": "「前端发动机」深入 React hooks — useState", "desc": "React Hooks的基本用法，官方文档 已经非常详细。本文的目的，是想通过一个简单的例子详细分析一些令人疑惑的问题及其背后的原因。这是系列的第一篇，主要讲解 useState。 我们期望，useEffect 只执行一次，且后续每隔 1s，count 自动 + 1。然而， 实…"}, {"id": "6844903536585621518", "title": "React全家桶构建一款Web音乐App实战（二）：字体图标制作及页面路由搭建", "desc": "颜色可以随意设置。如果使用普通图片，图片颜色已经是设计好的，如果要换颜色需要借助工具来对图片进行修改 制作字体图片首先我们需要svg图片。svg图片可以从iconfont阿里矢量图标库自行选择。笔者已经下载了项目需要的svg图片 借助一个叫iconmoon的网站。浏览器地址上输…"}, {"id": "6974292277057290271", "title": "React是什么?(精读React官方文档—01)", "desc": "这是我参与更文挑战的第14天，活动详情查看：更文挑战 React是什么？ 什么是组件？ React.component子类 解读： 组件接收的参数叫做props. render方法返回的结果就是渲染到"}, {"id": "6844903498044145672", "title": "后jQuery时代", "desc": "在MV*框架兴起，前端告别刀耕火种进入工程化的今天，还没来得及学习Angular，Facebook就带着react框架降临，不久vue.js又在这些框架打得火热的时候脱颖而出，各种框架充斥着我们的视觉神经，好像操作DOM来写前端的思想已经退出了历史舞台。而jQuery作为那个年…"}, {"id": "6844903629342638093", "title": "Redux其实很简单（原理篇）", "desc": "在上一篇文章中，我们通过一个示例页面，了解到Redux的使用方法以及各个功能模块的作用。如果还不清楚Redux如何使用，可以先看看Redux其实很简单（示例篇），然后再来看本文，理解起来会更加轻松。 那么在这一篇文章中，笔者将带大家编写一个完整的Redux，深度剖析Redux的…"}, {"id": "6844903648728711175", "title": "原生 JavaScript 实现 state 状态管理系统", "desc": "在软件工程中，状态管理已经不是什么新鲜概念，但是在 JavaScript 语言中比较流行的框架都在使用相关概念。传统意义上，我们会保持 DOM 本身的状态甚至声明该状态为全局变量。不过现在，我们有很多状态管理的宠儿供我们选择。比如 Redux，MobX 以及 Vuex，使得跨组…"}, {"id": "6962903603656785957", "title": "一文搞懂React中props导致的更新", "desc": "简单的谈一谈，组件究竟在什么情况下会更新以及useCallback、useMemo。为什么必须50字。"}, {"id": "6995855512570953764", "title": "ahooks 源码解读系列", "desc": "前阵子了解到了 ahooks 这个库（好像了解的有点晚🤦‍♂️），粗略看了看文档，感觉这个东西有点赞啊"}, {"id": "6894204813970997256", "title": "十五分钟读懂React 17 | 🏆 技术专题第六期征文", "desc": "为了写这篇文章请教了 【React高手】 莎士比亚老师。 稍后奉上。。。。等等等 ​ 作为时下最火的前端框架之一，React每次发版都会带来创新的改变，如React最早提出虚拟DOM、React 16引入fiber架构，再到后来React 16.8提出令人耳目一新的Hooks，…"}, {"id": "6991106201161318437", "title": "浅谈React 高阶组件", "desc": "前文 5、6月一直忙着自己的琐事，7月（7月31也还是7月嘛）抽空整理一下旧的内容，有之前的读者提到想了解下高阶组件这块的知识点，就刚好整理了一下。 高阶组件 HOC(HigherOrderCompo"}, {"id": "6844904160760987655", "title": "React系列-轻松学会Hooks(中)", "desc": "❗️❗️HOC、Render Props 等基于组件组合的方案，相当于先把要复用的逻辑包装成组件，再利用组件复用机制实现逻辑复用。自然就受限于组件复用，因而出现扩展能力受限、Ref 隔断、Wrapper Hell……等问题 ❗️注意上面的代码，有个 index=0 的操作，因为…"}, {"id": "6844903815594901512", "title": "[译] 2019 React Redux 完全指南", "desc": "想要理解 Redux 完整的工作机制真的让人头疼。特别是作为初学者。 术语太多了！Actions、reducers、action creators、middleware、pure functions、immutability、thunks 等等。 你可以花几个小时阅读博客以及尝…"}, {"id": "6993126357941092365", "title": "React必知必会(三)-React Hooks优劣代码鉴赏", "desc": "但单就观察我们公司几个团队中的代码，发现用法千奇百怪，有不少错用、滥用的情况，理解的不是很透彻。我整理了一些供大家鉴赏，避免踩坑；"}, {"id": "6998924455984496671", "title": "[译/React]Redux DevTools 扩展的使用说明", "desc": "可以在浏览器网上商店中下载安装该扩展, store普通用法 对于基础的redux store只加添加"}, {"id": "6844903975838285838", "title": "一文彻底搞懂react hooks的原理和实现", "desc": "当使用 Hook 特性编写组件的时候时候，总能感觉到它的简洁和方便。当然，「天下没有免费的午餐」，它牺牲了可读性并且存在内存泄漏风险（最后有提到）。但这并不妨碍探索它的魔力。 在正式开始前，希望您读过 Hook 的文档或者在项目使用过它。但如果只对函数编程感兴趣，也可能有所收获…"}, {"id": "7000288219711406110", "title": "React中key的作用？", "desc": "React的Diffing 算法 当对比两颗树时，React 首先比较两棵树的根节点。不同类型的根节点元素会有不同的形态。 比对不同类型的元素 当根节点为不同类型的元素时，React 会拆卸原有的树并"}, {"id": "6958360065577320485", "title": "rushjs+pnpm之monorepo初探", "desc": "rushjs pnpm管理monorepo的初探，主要是简单介绍rushjs还有pnpm在monorepo中的一些简单实践，并逐步演示创建管理一个monorepo项目"}, {"id": "6999788894648533023", "title": "React学习第八天", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：更文挑战 观察者模式解决组件间通信问题 使用观察者解决组件间通信，分成两步 在一个组件中，订阅消息 在另一个组件中，发布消息 发布消息之后，订阅的消息回"}, {"id": "6875681311500025869", "title": "React 架构的演变 - 从同步到异步", "desc": "写这篇文章的目的，主要是想弄懂 React 最新的 fiber 架构到底是什么东西，但是看了网上的很多文章，要不模棱两可，要不就是一顿复制粘贴，根本看不懂，于是开始认真钻研源码。钻研过程中，发现我想得太简单了，React 源码的复杂程度远超我的想象，于是打算分几个模块了剖析，今…"}, {"id": "6980563420386951175", "title": "探索React Hook", "desc": "我是小憨憨，一个持续性学习，不间断写bug的前端工程师。Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React特性。"}, {"id": "6844903977058844686", "title": "React VS Vue：2020年选哪个更好？", "desc": "Javascript 框架以及 HTML 和 CSS 已成为每个现代软件项目前端开发的重要组成部分。 2020 年将会是为你的 Web 项目选择正确的 javascript 框架的又一个年头。 如果你正在阅读本文，相信你对下一个程序的技术栈感到困惑。确定它并不容易，本文旨在解决…"}, {"id": "6931749943359062023", "title": "思想篇 - 通过 hooks 的出现，反思组件化开发存在的问题", "desc": "前言声明：此文不包含和hooks相关的所有的内容因为在react项目当中使用了hooks，vue2.x项目当中没有hooks，在现有的开发模式当中我们运用最多的还是组件化开发模式，但是在日渐复杂的业务"}, {"id": "6897493546169794574", "title": "Antd4+umi3新版教程安排", "desc": "大家好，我是大圣github:https://github.com/shengxinjing，最近@愚道授权我，来更新ant-design官方的实战教程，原则上保持之前教程的体系解构，更新到antd4"}, {"id": "6844903582622285831", "title": "React Fiber", "desc": "react在进行组件渲染时，从setState开始到渲染完成整个过程是同步的（“一气呵成”）。如果需要渲染的组件比较庞大，js执行会占据主线程时间较长，会导致页面响应度变差，使得react在动画、手势等应用中效果比较差。 为了解决这个问题，react团队经过两年的工作，重写了r…"}, {"id": "6985044540965158949", "title": "「井字棋」小游戏 - Rax 进阶重构", "desc": "在之前实现的 Rax 旅游网站的基础上，利用 React 官方井字棋小游戏进行 Rax重构和进阶优化完善升级小游戏项目的功能点。"}, {"id": "6984822327670210596", "title": "理解redux-thunk和redux-promise?从学习redux中间件开始", "desc": "前言 上一篇文章写了关于redux的作用以及redux和react-redux两个插件的API，但redux中有一个API:applyMiddleware并没有说明，因为涉及到redux的中间件概念，"}, {"id": "6974566384663527460", "title": "React系列实战篇：留言功能（一）", "desc": "我们学到这里，通过之前学习的JSX语法，和React一块，就可以简单的使用 HTML 的代码实现一个简单的留言页面。"}, {"id": "6844903576754634760", "title": "理解Redux中间件", "desc": "Redux文档没有说enhancer就是applyMiddleware,applyMiddleware只是Redux提供给我们的一个中间件加载器而已，如果有特殊场景我们也可以做一个像applyMiddleware的中间件加载器，就是要按照Redux的规范来写。 比如我们的enh…"}, {"id": "6844903704131272712", "title": "Chrome Extension Starter Kit", "desc": "UsageClonethisrepositoryRunyarn&yarnwatchOpenChrome.Gotochrome://extensionsmanagementpage,ClickLoadu"}, {"id": "6844903550133207053", "title": "深入理解React源代码 IV （英文预览版）", "desc": "We have completed the rendering process of a simple component. This time we are going to explore more ramifications of this process by disc…"}, {"id": "6844903558106578958", "title": "基于Decorator的React高阶组件的思路分析与实现", "desc": "在深入react 技术栈一书中，提到了基于Decorator的HOC。而不是直接通过父组件来逐层传递props，因为当业务逻辑越来越复杂的时候，props的传递和维护也将变得困难且冗余。 书里对基于Decorator的HOC没有给出完整的实现，在这里实现并记录一下实现的思路。 …"}, {"id": "6844903568156131341", "title": "React系列之一起认识Render Prop", "desc": "写过react项目的应该都碰到过，不同组件复用相同代码的问题，在react早期使用React.createClass创建组件的时代，我们经常使用的是mixins来实现代码复用。比如有个组件A，它用来实时的获取鼠标的位置。 很容易是吧~但委屈的是react16之后就不再支持mix…"}, {"id": "6844903681159086093", "title": "从 0 到 1 实现 react - onChange 事件以及受控组件", "desc": "该系列文章在实现 cpreact 的同时理顺 React 框架的核心内容"}, {"id": "6844903654726582286", "title": "在React中跨组件分发状态的三种方法", "desc": "当我问自己第一百次时，我正在研究一个典型的CRUD屏幕：“我应该将状态保留在这个组件中还是将其移动到父组件？”。 如果需要对子组件的状态进行轻微控制。您可能也遇到了同样的问题。 让我们通过一个简单的例子和​​三种修复方法来回顾它。前两种方法是常见的做法，第三种方法不太常规。 为…"}, {"id": "6844903575525523464", "title": "基于React的可编辑在线简历模板", "desc": "- 可以对每个字段进行编辑 - 可以对列表字段随意添加移动删除 - 可以直接使用 markdown 的 []() 语法来插入链接 - 可以上传本地头图 - 可以保存为 PNG, PDF, HTML 三种格式"}, {"id": "6844903704047403021", "title": "【英】我们为什么需要在 React Components 的 event handlers 中绑定 this", "desc": "While working on React, you must have come across controlled components and event handlers. We need to bind these methods to the component …"}, {"id": "6844903731482329096", "title": "Omi 入坑指南 第四场 Router", "desc": "我们只需要在我们的组件中加入入口文件omi-router可能能拥有一个全局的router变量。我测试后看看是不是。 看来install并不是我想象中那样是create的生命周期,所以我们的代码要修改一下。 还有我们这里app-intro是我们web components里面定义…"}, {"id": "6844903496232206343", "title": "react 写的一个快递查询、电影头条", "desc": "在掘金潜水也有很长的时间了，首先说下本猿是17年刚刚毕业的一只，实习半年多了，因为对React感兴趣，也有幸找到一份关于React的工作，工作中写的是门户网站，移动端出于自己的好奇，利用create-"}, {"id": "6844903983744565261", "title": "[译]React核心概念10：组合vs继承", "desc": "React拥有功能强大的组合模式，我们推荐使用组合而非继承来实现代码的复用。 在本章中，我们将要讨论几个React新手经常会遇到的关于继承的问题并展示我们如何使用组合解决它们。 某些组件不能预先知道它的子元素是怎样的，这对于类似于SideBar或Dialog这类容器组件来说是十…"}, {"id": "6844903686821380103", "title": "Reason Powerplug", "desc": "Reason PowerPlug is a set of reuseable components and functors for reason react. This project is inspired by react-powerplug."}, {"id": "6844903811992010759", "title": "看懂火星文(三)", "desc": "括号可以提供分组的功能。/a+/, 标示a出现多次。/(ab)+/, 则是将ab作为一组，表示ab出现多次。 使用括号可以实现数据提取和替换操作。我们以匹配日期(yyyy-mm-dd)为例 match接受一个正则表达式作为参数。如果正则表达式中有g标示, 将返回与完整正则表达式…"}, {"id": "6945058846792482829", "title": "React（一）起步", "desc": "减少对DOM进行操作，引入了虚拟DOM，如：先将节点内容从A-B,B-A，React会认为A变成B，然后又从B变成A ，不发生任何变化。react.js react-dom.js browser.<meta name=\"viewport\" content=\"width=devic..."}, {"id": "6914182462482415629", "title": "使用 shouldComponentUpdate方法? [React]", "desc": "你听说React是一个很快的前端框架，决定试一试。然后你找了个样例开始了React之旅，这时你注意到shouldComponentUpdate和PureRenderMixin，通过google找到一些技巧让React变得更快。但是React真的快吗？ 答案是React确实很快.…"}, {"id": "6844903801615286279", "title": "[React翻译]Refs and the DOM", "desc": "一般情况在一个正常的dataflow中，父组件总是将data通过props传给子组件，然后子组件re-render。但是有的时候我们想立即修改一个react子组件或一个DOM，那该怎么办呢？ 不要使用ref去做可以声名的事情。比方说不要让Dialog组件暴露open()和clo…"}, {"id": "6844903504306257934", "title": "实战react技术栈+express前后端博客项目（9）-- 前端管理界面发表文章功能+后端对应接口", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 后端都比较常规。对于路由设计以及model大家可以自行查看源码 由于定义为技术博客，所以这里我们只支持md语法。使用remark-react插件将…"}, {"id": "6844903502850818056", "title": "玩转 React（四）- 创造一个新的 HTML 标签", "desc": "在第二篇文章 《新型前端开发方式》 中有说到 React 有很爽的一点就是给我们一种创造 HTML 标签的能力，那么今天这篇文章就详细讲解下 React 是如何提供这种能力的，作为前端开发者如何来运用这种能力。 在第三篇文章 《JavaScript代码里写HTML一样可以很优雅…"}, {"id": "6844903828391723016", "title": "前端小知识10点（2019.4.14）", "desc": "注意：如果 props 和 state 包含复杂的数据结构，React.PureComponent 可能会因深层数据不一致而产生错误的否定判断，即 state、props 深层的数据已经改变，但是视图没有更新。 我们都知道，当 state、props 状态改变时，React 会…"}, {"id": "6877773443715203079", "title": "优雅的实现React中的动画过渡", "desc": "动画的本质，无非就是一个状态样式到另一个状态样式的过渡。最简单的动画组件，我们只需要指定两个状态的样式（进入的样式，离开的样式），以及一个开关（控制状态），即可完成。 实现一组动画的过渡。我们只需要在多个最简单的动画组件的基础之上，设置一个统一的开关，统一控制，多个动画组件动画…"}, {"id": "6987634893748437023", "title": "基于 Creat React App 创建项目", "desc": "使用 Create React App 初始化项目 使用 prettier 规定项目风格 使用 commitlint 规定 commit message 自定义 create-react-app"}, {"id": "6912239567978528782", "title": "2020 最后一篇技术文：可爱的乌咪 UmiJS", "desc": "马上就要告别2020，认真打工的一年也接近尾声。作为本年度最后一篇技术文，我左思右想，最后选题定为UmiJS，读作‘乌咪’，听起来也太可爱了。这款Umi框架是集React各种优势于一身，出自阿里旗下的"}, {"id": "6844904095468224519", "title": "体验concent\b依赖收集，赋予react更多想象空间", "desc": "concent v2版本的发布了，在保留了和v1一模一样的api使用方式上，内置了依赖收集系统，支持同时从状态、计算结果和副作用3个维度收集依赖，建立其精确更新路径，当然也保留了v1的依赖标记特性，支持用户按需选择是让系统自动收集依赖还是人工管理依赖，大多数场景，推荐使用自动收…"}, {"id": "6844903684296409102", "title": "Airbnb 爱彼迎房源详情页中的 React 性能优化", "desc": "在一些容易被忽视但又非常重要的场景，可能会有许多严重影响性能却很容易解决的问题。 本文介绍了 Airbnb web 端访问量最大的页面之一——房源详情页的 react 性能优化过程，其中用到的方法、工具和经验心得。"}, {"id": "6844904094012801032", "title": "你知道SSR,你知道怎么实现SSR吗?", "desc": " 预·SSR是什么?服务端渲染（ServerSideRender）网页是通过服务端渲染生成后输出给客户端SSR特点众所周知使用SSR是为了优化SEO零·怎么实现SSR?对我们的代码资源进行分块处理,分"}, {"id": "6844903781956583437", "title": "记一次 Ant Design Menu组件的使用与深入", "desc": "1. 需求 左右不对齐,这也太丑了吧,这要是放任不管要被怼的。 2. 排查问题 发现我的菜单里少了一个 min-width ,也就是说antd在某一步给官方的demo添加了style属性,而没有给我的菜单添加。 直接来吧,先来一个MutationObserver,详情看MDN文…"}, {"id": "6953263179052875784", "title": "前端路由及React-Router", "desc": "什么是路由 通常会在网络工程里面听到路由这个词，前端工程化后路由的概念用语页面的跳转，浏览器监测到路由的变化在页面显示路由所对应的页面。在早期，路由的概念时根据URL的变更重新渲染页面布局和内容的过程"}, {"id": "6844903906451914759", "title": "为什么会出现React Hooks?", "desc": "如果你从来没有对这两个问题都给出一个令人信服的答案，那么当你深入到具体问题时，你就没有足够的坚实的基础。关于React Hooks，这些问题值得令人思考。当Hooks发布时，React是JavaScript生态系统中最流行、最受欢迎的前端框架。尽管React已经受到高度赞扬，R…"}, {"id": "6844903651035578376", "title": "实现基于React的全局提示组件Toast", "desc": "Toast 不需要同页面一起被渲染，而是根据需要被随时调用。 Toast 是一个轻量级的提示组件，它的提示不会打断用户操作，并且会在提示的一段时间后自动关闭。 Toast 需要提供几种不同的消息类型以适应不同的使用场景。 Toast 的方法必须足够简洁，以避免不必要的代码冗余。…"}, {"id": "6966809509637390344", "title": "【react】报错：Maximum update depth exceeded", "desc": "出现此问题的原因是超出了最大更新深度，react循环执行50次setState会报这个错误，多是因为在componentDidUpdate钩子中更新了state导致，比如如下代码： 这段代码的本意是为"}, {"id": "6936127552738033672", "title": "React 面试筹备不完全指南", "desc": "我对 React 的使用有很多经验了，写过几个项目，也有了自己的思考和理解，但是，在面试的时候，是不是又这样的情况呢？知道这个知识点，但不能准确完整地表达、不知道该如何描述，但当面试官提起的时候，又能记忆起来，说，“对对对，就是那个，我刚确实不知道该怎么讲”。肚子里有东西，却在…"}, {"id": "6844903912663678990", "title": "可靠React组件设计的7个准则之纯组件", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我对文章进行了分割，本篇文章重点阐述 纯组件和几乎纯组件 。因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 在…"}, {"id": "6844903649970241549", "title": "今天的考核题目: 你知道React和Vue的区别吗? skr，skr", "desc": "博主面了几家公司，看简历上写着使用Vue.js框架，就会问，你能说一说 vue 和 react的区别吗 ？react 听过，没用过，所以就只能尴尬的说不怎么了解react。这不，最近刚学了react (不断爬坑中)，同时看了些博客文章，当一回搬运工，如有错误，请指出 ～ Rea…"}, {"id": "6844904017957486600", "title": "使用 useContext 封装自己的状态管理（十几行代码）", "desc": "一个项目，一个复杂的逻辑，我觉得状态管理显得尤为的重要，状态管理的好不好，直接体现了一个项目的逻辑性、可读性、维护性等是否清晰，易读，和高效。 从最早的类组件使用 this.state, this.setState 去管理状态，到 redux , subscribe, disp…"}, {"id": "6890143470925643790", "title": "React Hooks系列】之自定义Hook", "desc": "由于React的函数式组件使用起来方便（对比class组件），我将重点使用函数组件来运行开发。在这系列博客中，我将分享我所学到Hook系列API的知识。 通过自定义 Hook，可以将组件逻辑提取到可重用的函数中。 可以理解成Hook就是用来放一些重复代码的函数。 下面我将做手动…"}, {"id": "6844903907387244558", "title": "虚拟列表的实现", "desc": "虚拟列表即只渲染可视区域的数据，使得在列表数据庞大的情况下，只显示可视区域的数据，顶部和底部不可见的区域以一个空的dom来代替（留白），这样就能大量减少dom的渲染量，使得列表能够流畅地无限滚动，这在移动端是十分重要的。 实现虚拟列表的方案主要是计算出可视区域要显示哪些数据，然…"}, {"id": "6844903704269684743", "title": "Next.js 踩坑入门系列（七） —— 其他相关知识", "desc": "获取数据，依然是Next与普通的React SPA应用不同的地方，React应用基本都有自己的路由组件（当然大部分是react-router），我们可以通过路由组件为我们提供的方法，比如react-router的onEnter()方法或者universal-router的bef…"}, {"id": "6861829306357252109", "title": "学用Hook写React组件——通用弹出层", "desc": "如上所述，主要的实现方式就createPortal、render、appendChild三种方式，appendChild无法直接监听销毁和创建过程，render的方式无法在内部读取到context，并且需要处理切换页面的销毁。最终选择createPortal的方式。 对于函数，…"}, {"id": "6844903698917752839", "title": "前端优化常用技术心得", "desc": "从建立http连接开始，到页面展示到浏览器里，经历了加载、执行、渲染，重构的几个阶段。将分享下我自己的心得和其他人的优秀经验。 浏览器是友善的客户端，对同域名并发请求是有数量限制，过去浏览器一般是2个，支持H5的一般是6个；并且服务器端是可以关闭请求。 有朋友不理解，为什么不是…"}, {"id": "6936481207299506213", "title": "react解决input 限制中文输入长度问题（中文计算为2个字符）", "desc": "不能直接使用input 的maxLength, 因为它会将中文计算为一个字符长度。 为了实现将中文计算为2个字符长度+输入框中最多只能有maxLength 个字符的效果，我们需要实时监听用户输入的长度，其中中文计算为2个字符，非中文计算为1个字符。 1. 判断是否输入中文 当用…"}, {"id": "6881934772285898765", "title": "antd-mobile之ListView用法详解", "desc": "ListView组件是antd-mobile中的列表展示组件，适用于显示同类的长列表数据类型，对渲染性能有一定的优化效果。官网地址: https://mobile.ant.design/components/list-view-cn/. 在开发前端页面中，无论是手机端还是PC端…"}, {"id": "6977704206355333150", "title": "React学习第十天---React & Fiber（构建Fiber对象第二阶段）（四）", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 项目代码, 大家可以持续跟进学习，共勉！！！ 前言 大家好我是小村儿，前面一篇文章我们已经完成了virtualDOM对象的Fiber对象的构建，"}, {"id": "6883358045293068301", "title": "JSX是如何转换成DOM的", "desc": "以下内容如涉及到侵权，请联系我，我会尽快删除本文章。jsx是一个什么东东？官方回答，jsx是js的扩展，并且具有js的所有能力要知道jsx=>dom的过程，要先知道一个概念babel，那么babel又"}, {"id": "6844903678952865800", "title": "Taro下利用Decorator快速实现小程序分享", "desc": "关于微信分享逻辑微信小程序下开发转发有两个途径在Page的onLoad里面定义wx.showShareMenu()显示当前页面的转发按钮使用button的open-type=share让用户点击按钮触"}, {"id": "6844903589953929229", "title": "一幅图明白React-Redux的原理", "desc": "最近在学 React-Native，卡在 React-Redux 上了，费了些时间和功夫，对其原理和数据流向了解了一点儿，画了幅图，解释下。希望看这篇文章的人最好对 Redux 有些了解，假如不了解，可以去看下阮一峰的文章。有些解释是个人理解，不是很严谨，假如有错误的地方，烦请…"}, {"id": "6844903613270065159", "title": "精读《用160行js代码实现一个React》", "desc": "现在网上有很多react原理解析这样的文章，但是往往这样的文章我看完过后却没有什么收获，因为行文思路太快，大部分就是写了几句话简单介绍下这段代码是用来干嘛的，然后就贴上源码让你自己看，有可能作者本人是真的看懂了，但是对于大部分阅读这篇文章的人来说，确是云里雾里。 讲解一个框架的…"}, {"id": "6990257838530494472", "title": "React Ref 基本了解", "desc": "Refs 的产生 Refs 使用场景 管理焦点，文本选择或媒体播放。 触发强制动画。 集成第三方 DOM 库。 Ref 的四种方式 React v16.3 版本之前使用字符串（string ref）或"}, {"id": "7000164574129291301", "title": "react脚手架", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 脚手架是什么？ 传统的脚手架指的是建筑学的一种结构：在搭建楼房、建筑物时，临时搭建出来的一个框架 编程中提到的脚手架，其实是一种工具，可以帮"}, {"id": "6918616199295647752", "title": "React组件生命周期【七日打卡】", "desc": "在组件的整个生命周期中，随着该组件的props或者state发生改变，其DOM表现也会有相应的变化。 一个组件就是一个状态机，对于特定地输入，它总返回一致的输出。 一个React组件的生命周期分为三个部分：实例化、存在期和销毁时。 constructor是ES6对类的默认方法，…"}, {"id": "6844903549264986119", "title": "React 中常见动画的实现方式", "desc": "现在，用户对于前端页面的要求已经不能满足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo…"}, {"id": "6877137890968535054", "title": "深入了解 rc-field-form", "desc": "对于经常使用 react 开发的朋友来说，antd 应该不陌生。开发中经常遇到的表单大多会使用 antd 中的 Form 系列组件完成，而 rc-field-form 又是 antd Form 的重要组成部分，或者说 antd Form 是对 rc-field-form 的简单…"}, {"id": "6844903886734524423", "title": "使用 React Hooks 重构你的小程序", "desc": "一直关注小程序开发的朋友应该会注意到，最开始小程序就是为了微型创新型业务打造的一个框架，最多只能运行 1m 的包。可是后来发现很多厂商把越来越多的业务搬到了小程序上，小程序的能力也在不断地开放，变得越来越强大。于是后来打包限制上升到了 2m，然后引入了分包，现在已经已经可以上传…"}, {"id": "6991407664525737998", "title": "日常知识点集合之react", "desc": "1. 生命周期 2.React组件通信如何实现 3.react中hooks的理解 4. react基础 5.react-router 6.redux 7.redux的工作流程 8.性能优化"}, {"id": "6844903587479289863", "title": "[译] 为 JavaScript 程序员准备的 Flutter 指南", "desc": "Flutter 是一款用同一套代码构建高性能、高保真的 iOS 及安卓应用的跨平台移动端应用 SDK。 文本希望能快速为 JavaScript 开发者们提供一个简练的入门指南，我会试着以 JS 与 npm 生态系统来类比 Flutter / Dart 与 Pub 包库。 我在 …"}, {"id": "6987322029640777764", "title": "React中组件的生命周期(详细)", "desc": "组件的生命周期 理解 组件从创建到死亡经历的一些特定的阶段 React组件中包含一系列钩子函数(生命周期回调函数)，会在特定的时刻调用"}, {"id": "6885911421167599623", "title": "深入理解styled-components运行机制", "desc": "前些天看到塔希同学分享的《Linaria 也许是现在 React 最佳的 JSS 方案》文章后, 让我对JSS的理解又更进了一步, 为了更加深入地了解JSS, 我花了几天的时间阅读了各个JSS库的源码, 在阅读的过程中, 写下了这篇文章, 分享给大家。 如果对大家有帮助, 给个…"}, {"id": "6964257086859378724", "title": "React17 事件系统 更改 & 16 之前事件系统介绍", "desc": "一. Breaking change 1. 事件委托不再挂到 document 上 react 17 delegation 二. React 16 事件系统 1. React事件系统 1-1. Rea"}, {"id": "6998349658724499492", "title": "React大项目", "desc": "主要内容 React数据传递 redux React-redux 其他 学习目标 第一节 react数据传递 react 中组件之间数据传递 1. 父传子 2. 子传父(状态提升) 3. 兄弟之间传递"}, {"id": "6844903712285016071", "title": "浅析 React Fiber", "desc": "在 react 进入大家视野之初，Virtual DOM（VDOM）的概念让人眼前一亮，在操作真正的 DOM 之前，先通过 VDOM 前后对比得出需要更新的部分，再去操作真实的 DOM，减少了浏览器多次操作 DOM 的成本。这一过程，官方起名 reconciliation，可翻…"}, {"id": "6844904025620480013", "title": "当AOP和react愉快玩耍的时候，我的代码量更少了", "desc": "AOP(面向切面编程)针对业务中的一些关键点/关键时刻所做的事情(即切面)进行抽离，抽离的是代码执行的过程中的某个关键步骤。简单来说，AOP关注的是什么时间点下的什么行为/定义。 我们可以看见，OOP是通过继承来复用一些和父类共有的属性，如果有差异的话，那就在该子类的proto…"}, {"id": "6844903825493639182", "title": "【译】TypeScript中的React高阶组件", "desc": "高阶组件（HOCs）在React中是组件复用的一个强大工具。但是，经常有开发者在结合TypeScript使用中抱怨道很难去为其设置types。 这边文章将会假设你已经具备了HOCs的基本知识，并会根据由浅入深的例子来向你展示如何去为其设置types。在本文中，高阶组件将会被分为…"}, {"id": "6844904054817030158", "title": "基于TypeScript与React Hooks开发的通用组件库", "desc": "2019年以来，越来越多的公司与项目都选择使用强类型语言TypeScript作为主要语言，可以预见的是2020年TypeScript将成为前端开发所需要具备的能力之一。 目前前端工程师使用最多的无疑问是微软开源的VSCode，它本身提供的功能并不多，但是通过支持插件的方式使得其…"}, {"id": "6862508677182685191", "title": "蒲公英 · JELLY技术周刊 Vol.18 关于 React 那些设计", "desc": "自从 iOS13 自带支持深色模式（dark mode）以来，就一直为大家所关注，仿佛支持深色模式已经成为现代移动应用和网站的一个潮流，这不得不证明 iOS 的影响力之强大。本文就 Web、APP、Flutter 如何来实现深色模式适配，进行了深入地剖析。其中 Web 适配最终…"}, {"id": "6844903934616666125", "title": "React 源码系列 | React Context 详解", "desc": "目前来看 Context 是一个非常强大但是很多时候不会直接使用的 api。大多数项目不会直接使用 createContext 然后向下面传递数据，而是采用第三方库（react-redux）。 一个顶层数据，想要传递到某些深层组件，通过 props 逐层传递将会非常繁琐，使用 …"}, {"id": "6844904201072574472", "title": "H5 分包实现首屏加载时间优化", "desc": "在 dom渲染 之前用户看到的都是白屏，在 下载渲染图片 后，用户才能看到完整的页面。首屏秒开优化就是要减少这个过程的耗时。 扣除网络差的原因，对首屏启动速度影响最大的就是网络请求。由于业务需求，导致我们不得不引入很多第三方包来实现功能，这些包恰恰会容易影响到网络请求。 你的包…"}, {"id": "6844903827489947661", "title": " next.js+koa2+antd环境轻松搭建", "desc": "前言使用自定义的方式搭建next环境创建项目目录mkdirnext-learncdnext-learnnpm/yarn初始化npm进行初始化：npminityarn进行初始化:yarninitnext"}, {"id": "6912100548607115271", "title": "React组件封装和逻辑复用新解", "desc": "如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。 时间不早了，该干点正事了，咱们书归正转。 作为一名合格的Reacter来说，组件封装这个技能点就和相声演员口中的说学逗唱一样，是需要刻在骨子里的基本功。 而React官方为我们提供了一些常规的操作方式，其中不乏HOC,Re…"}, {"id": "6844903698447990798", "title": "使用CSS自定义属性构建骨架屏", "desc": "设计Web上的加载状态常常被忽略或被认为是事后考虑。性能不仅是前端开发人员的职责，构建与慢速连接一起工作的体验也是设计挑战。 虽然前端开发人员需要注意一些事情，比如压缩和缓存，但是设计人员必须考虑UI处于“加载”或“离线”状态时的外观和行为。 随着我们对移动体验的期望发生变化，…"}, {"id": "6981351594235265055", "title": "基于 react + typescript 实现 tree 组件", "desc": "基于 react + typescript 实现 tree 组件 支持单元测试 支持打开关闭 支持取消全选 支持动态加载 支持拖动排序 process line 1.1 创建项目,安装依赖 1.2 w"}, {"id": "6844903789389070350", "title": "与DvaJS风云对话，是DvaJS挑战者？还是又一轮子？", "desc": "DvaJS 和 React-coat 都是 React+Redux+Redux-router 生态的框架，都是把传统MVC的调用风格引入MVVM，两者诸多地方颇为相似。 DvaJS已经广为人知，上线已经好几年了，从文档、稳定性、测试充分度、辅助工具等方面都自然比 react-c…"}, {"id": "6844903667905069070", "title": "javascript性能优化", "desc": "大家都知道，浏览器在解析DOM树的时候，当解析到script标签的时候，会\b阻塞其他的所有任务，直到该js文件下载、解析执行完成后，才会继续往下执行。因此，\b这个时候浏览器就会被阻塞在这里，如果将script标签放在head里的话，\b那么在该js文件加载执行前，用户只能看到空白…"}, {"id": "6893752138594254862", "title": "React Hooks初步踩坑坑", "desc": "大家好，我是踩坑小星球。作为一个 Component 拥护者，迈出一小步踩下 Hook ，看看它到底是个啥玩意儿。 useState管理状态，这里有一点需要注意，当你使用 useState 的 set方法的时候，旧状态不会自动 merge到新状态中去，也就是 set 所改变的是…"}, {"id": "6915972825211731982", "title": "浅谈React Server Components", "desc": "最近react个官方团队推出了最新的 React Server Components 这项技术。这篇文章将对其相关知识点进行介绍。 客户端渲染（Client Side Rendering) 应该是前端最熟悉的一种模式了。从前端的发展历程上看，富客户端目前也已经成为现代前端应用的…"}, {"id": "6911858781043294222", "title": "蒲公英 · JELLY技术周刊 Vol.36: 你好 Hooks，再见 2020", "desc": "使用 CSS 构建布局时，如何做好短文本内容与长文本内容的兼容，是每位优秀前端工程师的基本修养，当清楚地知道文本长度变化是否会影响界面布局时，可以避免很多不必要的问题。 在 React 支持使用 Hooks 编写组件后，越来越多的同学已完全投入 Hooks 的怀抱，本文总结了五…"}, {"id": "6992763139645243405", "title": "React Ts 项目配置 Axios", "desc": "React Hooks Ts Axios 主要看 ./src/api 和 ./src/model 目录。 ./src/api/api.ts 本文件创建 axios 实例，通过给实例添加请求和响应拦截，"}, {"id": "6844903560988082184", "title": "React 16.3来了：带着全新的Context API", "desc": "React在版本16.3-alpha里引入了新的Context API，社区一片期待之声。我们先通过简单的例子，看下新的Context API长啥样，然后再简单探讨下新的API的意义。 文中的完整代码示例可在笔者的GitHub上找到，点击传送门。 需要安装16.3-alpha版…"}, {"id": "6844904054192078855", "title": "React中引入Vue3的@vue/reactivity 实现响应式状态管理", "desc": "React的状态管理是一个缤纷繁杂的大世界，光我知道的就不下数十种，其中有最出名immutable阵营的redux，有mutable阵营的mobx，react-easy-state，在hooks诞生后还有极简主义的unstated-next，有蚂蚁金服的大佬出品的hox、hoo…"}, {"id": "6844904074211491847", "title": "支持动态路由的 React Server Side Rendering 实现", "desc": "1. 前言 Server Side Rendering（SSR）：服务端渲染，简而言之就是后台语言通过模版引擎生成 HTML 。实现方式依赖于后台语言，例如 Python Flask 的 Jinja、Django 框架、Java 的 VM、Node.js 的 Jade 等。 C…"}, {"id": "6844903710724718606", "title": "3. react-router-dom源码揭秘 - BrowserRouter", "desc": "今天开始，我们开始揭开react-router-dom神秘的头盖骨，哦不，面纱。 在此之前，我们需要了解一些预备知识：React的context和react-router-dom的基本使用。需要复习的同学请移步： 下面是我跟小S同学一起阅读源码的过程。 大家可以参照这个思路，进…"}, {"id": "6984949525928476703", "title": "六个问题助你理解 React Fiber", "desc": "React Fiber 是Facebook花费两年余时间对 React 做出的一个重大改变与优化，是对 React 核心算法的一次重新实现。"}, {"id": "6844903775203753991", "title": "给2019前端的5个建议", "desc": "2019 农历新年即将到来，是时候总结一下团队过去一年的技术沉淀。过去一年我们支撑的数据相关业务突飞猛进，其中两个核心平台级产品代码量分别达到30+万行和80+万行，TS 模块数均超过1000个，协同开发人员增加到20+人。由于历史原因，开发框架同时基于 React 和 Ang…"}, {"id": "6844903600926228493", "title": "四月前端知识集锦（每月不可错过的文章集锦）", "desc": "PS：星号表示需要翻墙。"}, {"id": "6992733298493489183", "title": "还不会Hook？一份React Hook学习笔记", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 1. Hook简介 Hook 是 React 16.8.0 版本增加的新特性，可以在函数组件中使用 state 以及其他的 React 特性"}, {"id": "6994674140825272334", "title": "React 18 新特性（二）：Suspense & SuspenseList", "desc": "本文介绍了 React 18 版本中 Suspense 组件和新增 SuspenseList 组件的使用以及相关属性的用法。并且和 18 之前的版本做了对比，介绍了新特性的一些优势。"}, {"id": "6979030364454912014", "title": "在线对话 React.js 核心开发者", "desc": "有谁能比 React 核心开发者更懂 React 呢？7月5日，字节跳动 Web Infra 团队联合技术中台前端团队，邀请了 React.js 的核心开发者 Dan Abramov 线上为大家分享。"}, {"id": "6844904021233238024", "title": "你真的了解 React 生命周期吗", "desc": "该生命周期钩子的作用： 将父组件传递过来的 props 映射 到子组件的 state 上面，这样组件内部就不用再通过 this.props.xxx 获取属性值了，统一通过 this.state.xxx 获取。映射就相当于拷贝了一份父组件传过来的 props ，作为子组件自己的状…"}, {"id": "7002504713639837732", "title": "react路由重定向Redirect使用", "desc": "需求 路由页面结构 1、原生版本 index.js 父路由routerStudy.js 总结 2、在react-router-config插件内使用Redirect"}, {"id": "6999401846368370696", "title": "React 列表渲染", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 数组渲染 组件式循环 循环汇总等等。。"}, {"id": "7002156010248863752", "title": "字节前端青训营笔记--React实战", "desc": "React 类组件，函数组件 1.index.js调用render()函数； 2.React调用App组件； 3.App组件将变量articles作为props传入ArticleList组件； 4.A"}, {"id": "6999320694978772999", "title": "万字总结 React 知识点 来看看你会了没？", "desc": "Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用"}, {"id": "6854573212018147342", "title": "源码篇（二）：手写react版mini源码分析框架。附送简单版react源码。", "desc": "本文适合0.5~3年的react开发人员的进阶。 react的源码，的确是比vue的难度要深一些，本文也是针对初中级，本意让博友们了解整个react的执行过程。 上一篇，从mini源码分析vue，也许深度比较一般，但是也花了好几天的时间去汇总，明白一个博主的不易。这是笔者第一篇…"}, {"id": "6933018383961194509", "title": "你可能不知道的流式 React Hooks（关于组织代码的最佳实践）", "desc": "这次的分享结合我在项目中使用 full hooks-based React Components 的一些经验，给大家介绍一些我所认为的 React Hooks 最佳实践。 首先还是简单回顾一下 React Hooks。 先看传统的 React Class-based Compo…"}, {"id": "7001645745594400776", "title": "React组件三大核心属性 - State", "desc": "state的理解 React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，"}, {"id": "7005742676066697247", "title": "React路由相关知识点", "desc": "NavLink与封装NavLink Switch的使用 解决多级路径刷新页面样式丢失的问题 路由的严格匹配与模糊匹配 Redirect的使用 嵌套路由 向路由组件传递参数 编程式路由导航 Browse"}, {"id": "6950848507817230349", "title": " 2021 年移动端的开发的几点经验", "desc": "1.微信 sdk 2. 产品适老化 3. Css适配刘海屏幕安全区 4. 细嚼慢咽 Typescript + React17 +Eslint + Git hook 工作流"}, {"id": "6984233636295868447", "title": "如何设计实现H5营销页面搭建系统", "desc": "近几年，low code、no code、pro code等越来越多的出现在我们的视野中。抱着不被卷的心态 🐶，我决定来深入探索一下。"}, {"id": "6972099403213438984", "title": "写给vue转react的同志们（2）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "6974637014540877831", "title": "React Hooks与异步任务队列结合，纯干货", "desc": "当异步任务队列与React Hooks碰上，会擦出怎样的火花呢？Hooks真的能处理好连续多任务吗？本文将会详细讨论，并给出完美解决方案，优雅，解耦，高扩展，易维护。"}, {"id": "6991733157464637476", "title": "Toolkit学习笔记：如何用Toolkit改造你的Redux", "desc": "一款官方的redux工具包，旨在成为编写Redux的标准库。解决了在编写标准Redux的时候出现的一些常见问题。"}, {"id": "6856961446228525064", "title": "React 基础入门项目练习", "desc": "目前项目用的是mock数据，账号可以随意输入。 这个是目前我自己用到的这样来定义，目录结构根据自己需求即可。 为什么封装axios？ 首先，我们使用axios作为请求方式，各方面性能吧都不错。其次，在单页应用中，涉及到的请求会非常多，对于请求拦截、响应拦截、错误统一处理等常规操…"}, {"id": "6959864177657643038", "title": "进击的Redux", "desc": "网上Redux入门教程很多，但是为啥这么使用，却百思不得解。今天写一篇关于Redux的文章，帮助大家了解Redux为啥这么写，以及内部做了啥。"}, {"id": "6966379734099820581", "title": "react条件渲染，循环，父子组件传值，生命周期, 插槽，React.lazy懒加载优化", "desc": "react条件渲染，循环，父子组件传值，生命周期, 插槽，React.lazy搭配Suspense懒加载优化"}, {"id": "6877012518183632910", "title": "带你快速了解React Hooks", "desc": "Hook 是 React 16.8 的新增特性。 Hooks本质上就是一类特殊的函数，它们可以为你的函数型组件（function component）注入一些特殊的功能，让您在不编写类的情况下使用 state(状态) 和其他 React 特性。 状态逻辑难以复用： 业务变得复杂…"}, {"id": "6844903604394917896", "title": "走在JS上的全栈之路(一)", "desc": "首先声明下写这篇文章的初衷，自己也还是在全栈之路探索的学徒而已。写系列文章其一是记录下自己在搭建整站中的一些心得体会(传说有一种武功是学了就会忘记的，那就是写代码。。。)，其二是希望与各位读者交流下其中遇到的坑和设计思路，怀着向即将出现的留言区学习的心态来此~~ 同构应用本身的…"}, {"id": "6967959680341508126", "title": "React 源码学习之 render 阶段", "desc": "前言 当前 React 共有三种模式： legacy 模式： ReactDOM.render(element, rootNode)。这是当前 React app 使用的方式。当前没有计划删除本模式，但"}, {"id": "6924949740144558087", "title": "关于 React 函数组件实现父子组件/组件间通信的三种方法, props, context,  函数组件函数化", "desc": "为了将 Father 中的 state 传递到 Child1 中, 你需要利用 Props 层层透传 2 层组件. 你会发现这和一些写的很烂的函数有类似的效果 clac2 clac3 都可能实现了一部分自身的逻辑, 但是在整个大的逻辑链中, 他们却承担了将 father1 传递…"}, {"id": "6986202337161248805", "title": "React 源码阅读 - JSX 最终变成了什么", "desc": "JSX 相信大家在看到 React 源码的时候，可能或多或少都会有一些疑惑，到底从哪里开始看呢？ 我打算以 JSX 作为起点，因为刚开始学写 React 代码的时候，也是从 JSX 开始的。 JSX "}, {"id": "6985152595677413406", "title": "从源码角度来聊聊React的生命周期（下）", "desc": "正是这些让我们对 React 组件的一生有了一个直观的认知。hooks 也确实开启了一种全新的使用方式，但是生命周期总是贯穿其中，正是应了那句`生命周期虐我千百遍，我依然待之如初恋`"}, {"id": "6962956173532200974", "title": "React函数式组件", "desc": "React 中关于 函数式组件 与 类组件 的对比，意在探究为什么React推荐使用函数式组件的原因"}, {"id": "7005451097116508174", "title": "React的hook函数", "desc": "useState()方法 数据驱动UI 引入方法: 声明方法： 函数组件 类组件 原始数据的改变，不能驱动的UI的改变，只有在state里面的数据改变才能改变UI state只有通过set方法才能改变"}, {"id": "6895793195624431630", "title": "有点意思的gif动图生成平台开发实战(二)", "desc": "笔者之前利于业余时间开发了一个gif动图生成平台, 具体开发背景我也在上一篇文章手把手教你撸一个能生成抖音风格动图的gif制作平台中介绍过了, 我们今天继续来实现该平台, gif动图平台的实现方式比较将完全用前端的手段来实现, 所以大家在接下来的内容中会发现很多有意思的前端插件…"}, {"id": "6844904055618158600", "title": "从零开始配置 react + typescript（一）：dotfiles", "desc": "之前我写过一篇文章 搭建 react + typescript + ant design 开发环境，现在看来很多内容都已经过时了。但是我看到前不久还有读者给我这篇文章点赞，不更新的话总感觉坑了它们，有点过意不去。但是，如果现在让我再去配置那套环境，我肯定不会再像那篇文章那样配置…"}, {"id": "6862870521257263117", "title": "React hooks——前后端交互处理分页", "desc": "秋招正当时，笔者想着提高一波自己的React实战能力。恰好最近读到了神三元在掘金的React Hooks 与Immutable 数据流实战。于是，在这个夏天，听着神三元云音悦的歌曲，借着这份小册，使用react+hooks简单仿造了一下极客时间的app。 我认为，对于一个优秀的…"}, {"id": "6986112416283131918", "title": "React项目中，如何把数据导出到Excel文件", "desc": "无论是做项目还是自己学习过程中，我们可能会遇到导出数据的需求，比如导出数据到Excel文件。 为了方便大家的学习和开发，这里介绍一种导出数据到Excel文件的方法"}, {"id": "6897074413871562765", "title": "React Hook丨这两个hook加ts，如虎添翼", "desc": "useContext 可以实现状态共享，useReducer 可以实现犹如 redux 状态管理器 dispatch 的功能 。 这样一来，我们就可以拿这两个hook来实现一个简单的状态管理器了。 在项目中，我们可能会有多个状态需要共享，我们可能会在登录后异步请求获取用户信息，…"}, {"id": "6926333952714080264", "title": "【KT】vscode插件开发例子系列（一）", "desc": "vscode 插件我也没搞过啊，这是让我“迎难(男)而上”了！好了，废话不多说，直接开始吧。 怎么说呢，在做之前，也在网上搜过一些文章，奈何大部分都停留在 install + hello world 阶段，意思就是教你如何安装，然后写一个 hello world 简单的小 de…"}, {"id": "6844903749844992014", "title": "你可能不知道的React用法🔥", "desc": "React作为前端最🔥的框架之一，但是有的时候我们仅限于能用的阶段，有一些高级用法，我们在日常开发中却很少涉足。但是一旦用起来，我们就能发现它的方便和强大之处，我们就会越来越发现我们已经离不开它了！这就像是刚用React时，我内心是拒绝的，但是现在我已经离不开它了，越来越不能…"}, {"id": "6844904018817318926", "title": "React Hook 系列(一)：彻底搞懂react hooks 用法（长文慎点）", "desc": "react 不同组件用法。 react hook 相比以前带来什么。 react hook 的用法。 1. 功能（无状态）组件 2. 类（有状态）组件 3. 渲染组件 容器型组件一般是有状态组件。 4. 高阶组件 HOC 主要是抽离状态，将重复的受控组件的逻辑抽离到高阶组件中，…"}, {"id": "6992215510104408101", "title": "react子父组件相互通信传值系列之子组件传值与函数给父组件", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 写在前面： 本系列你将能学到： 父组件传值与函数给子组件，在子组件可使用父组件的值与函数； （该章链接：https://juejin.cn/"}, {"id": "6898597728754860045", "title": "react项目搭建-路由(react-router-dom)-按需加载(react-loadable)-请求封装(fetch)-整合UI框架(蚂蚁ant)", "desc": "使用官网脚手架搭建项目，接下来我们要去找一个合适路由(react-router-dom)，react是没有提供路由这个模块的不像angular什么都给你整好了，所以需要发动群众的智慧。翻阅了一些资料，大家用的比较多的就是react-router这个包，作者还是很良心的，分了几个…"}, {"id": "6844903929134710798", "title": "react高阶组件", "desc": "“高阶组件”虽然名为“组件”，其实是一个函数，只不过这个函数比较特殊，它接受至少一个 React 组件为参数，并且能够返回一个全新的 React 组件作为结果，换句话说说，这个新产生的 React 组件是对作为参数的组件的包装。 上面的函数withDoNothing就是一个高阶…"}, {"id": "6844903813376114701", "title": "React Loops 尝鲜", "desc": "你会发现使用 loops 后，只是替换了之前的 map 方法，以一个 <For /> 标签的形式来遍历数据，of 属性中写入需要遍历项，as 则类似于 map 方法中的回调函数。但其实内部做了很多优化和封装。 值得注意的是，在使用第一种方法时，为了 diff 算法优化，我们必须…"}, {"id": "6844903877586731021", "title": "react+redux+react-router-dom脚手架搭建(node服务【可选】)", "desc": "之前的 multi-spa-webpack-cli 只是为 React + antd 模板提供了开发时必要的环境，对于实际的开发并没有什么用处。 为了更贴近实际开发，本次 React + antd 模板完善了一些功能。 node 服务集成（可选）。 node 服务和 React…"}, {"id": "6844903792392028174", "title": "taro多端实践初探", "desc": "历史的发展，小程序风行一时，安卓/ios/H5/微信小程序/支付宝小程序/头条小程序，产品经理让你适配这么多，你的心情如何呢？然而总会有人给咱们造出合适的工具，解放生产力，一次编码，多端运行。开始探索之旅吧！ 进入对应目录，执行命令启动。 列表渲染搞定。 增加一个isSwitc…"}, {"id": "6844903598074118158", "title": "react代码拆分之react loadable源码浅析", "desc": "在做个人网站的js拆分打包时，最终的解决方案是看着网上的教程手写了Bundle高阶组件来动态加载需要的组件。对于它的运用也仅仅是把路由拆开，访问不同的顶级路由进行动态加载，并没有对其原理进行深入的理解。直到看到了React 的加载 loading 库——react-loadab…"}, {"id": "6844903616046694408", "title": "Redux源码解读", "desc": "作为React全家桶的一份子，Redux为react提供了严谨周密的状态管理。但Redux本身是有点难度的，虽然学习了React也有一段时间了，自我感觉算是入了门，也知道redux的大概流程。但其背后诸如creatstore,applymiddleware等API背后到底发生了…"}, {"id": "6910569831267827720", "title": "React知识点总结", "desc": "传入函数，不会被合并。 必须手动操作dom,不能使用state。如上传文件。 如下：modal渲染到了body里面。 使用Portals将modal渲染到body第一层。 如下：modal就在body第一层了。 第二步：将需要共享的数据放到ThemeContext.Provid…"}, {"id": "6943506214265307172", "title": "小试牛刀 React ", "desc": "react 在浏览器中用 JavaScript 实现了一套 DOM Api,底层用 DOM Diff 算法来更新有差异的部分,大大提升了性能。 在开发模式下运行应用程序。打开 http://localhost:3000 在浏览器中查看。 如果进行编辑，页面将重新加载。您还将在控…"}, {"id": "6949105555512229925", "title": "React虚拟DOM和diff算法", "desc": "虚拟DOM是一种编程思想，它是用JS对象(树形结构)模拟出真实DOM所需要的内容。 在此之前，先了解下浏览器是怎么渲染html页面的。"}, {"id": "6844903626125623304", "title": "前端测试：Part II （单元测试）", "desc": "我们在Part1里已经说过，但与那测试就是测试单元的代码，不管这些单元是函数、模块还是类。多数人认为测试应该以单测为主，但我不这么认为，如果你同意也没有问题。我会一遍一遍又一遍地在这一系列文章中强调，你怎测试都行，只要你写了足够多的测试，让你对你的上线有信心就行。 不管你写多少…"}, {"id": "6943443015415365640", "title": "hello React ~", "desc": "声明式设计 −React采用声明范式，可以轻松描述应用。 高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。 灵活 −React可以与已知的库或框架很好地配合。 JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但…"}, {"id": "6844903725727744008", "title": "[译]React高级话题之高阶组件", "desc": "本文为意译，翻译过程中掺杂本人的理解，如有误导，请放弃继续阅读。 具体来说，HOCs其实就是一个函数。只不过这个函数跟编程语言中普通的函数不同的是，它接受一个React组件作为输入，返回了一个新的React组件。 我们从转化的角度可以这么说：“如果说，React组件是将prop…"}, {"id": "6844903703560847367", "title": "快速学习RN之属性props和状态state(二)", "desc": "在react-native run-android执行成功跑起来后,如果想修改页面和修改代码逻辑后看效果,不需要像原生一样,再run一次,安卓的项目如果moudle比较多的话building的时间真的是很长. 我个人理解,该属性的值是在父组件中引用子组件时候指定的,该属性是子组…"}, {"id": "6844903811295739917", "title": "React 源码学习（一）：HTML 元素渲染", "desc": "JSXTransformer.js 会将 type=\"text/jsx\" 的形式转换成 React.DOM.h1 的函数形式。 objMapKeyVal 是个工厂函数，他最终会返回一个“键”与 obj 对应的对象“值”则是 func 的执行结果。 ReactDOM 对象中的“键…"}, {"id": "6980101236175405070", "title": "005.jsx语法规则", "desc": "介绍 全称：JavaScript XML react定义的一种类似于XML的JS扩展语法：JS+XML 本质 js语句与表达式 jsx练习"}, {"id": "6844903560044363790", "title": "React+Mobx+Koa2+LeanCloud 搭建个人版TodoList", "desc": "最近在看Mobx和Koa相关的内容，实践初出真知，我们来做一个小项目实践一下。最容易想到的就是Todolist了，这次我们做得稍微实用一点，放到自己的vps上日常用用也是不错的~ 因为项目比较简单，bundler我用的是parcel，一行配置都不用写确实很爽，编译速度也非常快。…"}, {"id": "6844903731948060686", "title": "(译)React是如何区分Class和Function？", "desc": "(直到最近 hooks-intro，这是使用state等特性的唯一方法。) 但是，作为 React本身 是会认为这两个是有不同之处的。 在这两种情况下，React的目标是获取渲染节点（本例中，是<p> Hello </ p>），但确切的步骤取决于Greeting的类型。 事实上…"}, {"id": "6844903906166702087", "title": "【DailyENJS第7期】掌握 React 函数式组件", "desc": "DailyENJS 致力于翻译优秀的前端英文技术文章，为技术同学带来更好的技术视野。 多年来，我意识到开发高质量React应用程序的唯一正确方法是编写无状态的函数式组件。 在本文中，我将简要介绍函数式组件和高阶组件。在此之后，我们将深入研究将膨胀的React组件重构为由多个可组…"}, {"id": "6844904019777814536", "title": "Preact（React）核心原理详解", "desc": "在前端界，React 一定是我们耳熟能详的前端开发框架之一，它的出现可以说是带给了我们全的 Web 开发体验，其中也带来了许多新的概念：JSX、virtual-dom、组件化、合成事件等。当我们想从源码层面去研究它的原理时，由于 React 的源码的庞大和晦涩难懂，这也会变得异…"}, {"id": "6994734778964508702", "title": "[译]深入了解React中的state和props更新", "desc": "在我的上篇文章 Inside Fiber: 深入了解React新协调算法中介绍了理解更新过程细节的所需的基础知识，我将在本文中描述这个更新过程。 我已经概述了将在本文中使用的主要数据结构和概念，特别是"}, {"id": "6985075178392780830", "title": "从 React 到 React 今天就谈 React (1)", "desc": "React 是一个用于构建用户界面的 JavaScript 库。官方用 3 个短语给出 React 的特征，声明式、组件化和一次开发处处开花。"}, {"id": "6998461064329297927", "title": "React进阶系列之生命周期", "desc": "React 生命周期已经是一个老生常谈的话题了，几乎没有哪一门 React 入门教材会省略对组件生命周期的介绍。然而，入门教材在设计上往往追求的是“简单省事、迅速上手”，这就导致许多同学对于生命周期知"}, {"id": "6974419506059804685", "title": "「译」React 面试必知必会 Day10", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6873129484669861901", "title": "基于f2从零实现移动端可视化编辑器", "desc": "笔者之前花了大量的时间在思考如何设计和实现H5页面可视化编辑器H5-Dooring，从第一个版本到现在经历了很多次版本迭代和优化，也收到了很多宝贵的建议，目前刚好完成了移动端数据可视化的基本设计和落地方案，在这里特地总结和复盘一下。 在开始正式实现之前笔者先对H5数据可视化做一…"}, {"id": "6971228585503916068", "title": "利用高阶组件(HOC)思想实现更优雅的modal框", "desc": "利用HOC组件实现更优雅的打开Modal框，解决了开发中定义了重复变量的问题，也使得代码的可读性增强。"}, {"id": "6844903816857403405", "title": "那些年，自己没回答上来的react面试题", "desc": "那个时候刚学react，不知道面试官说的元素是什么，现在知道了，就是虚拟dom嘛。。。 React 元素不是真实的 DOM 元素，它仅仅是 js 的普通对象（plain objects），所以也没办法直接调用 DOM 原生的 API。上面的 JSX 转译后的对象大概是这样的： …"}, {"id": "6844904020809629710", "title": "一杯茶的时间，上手 React 框架开发", "desc": "React（也被称为 React.js 或者 ReactJS）是一个用于构建用户界面的 JavaScript 库。起源于 Facebook 内部项目，最初用来架设 Instagram 的网站，并于 2013 年 5 月开源。React 性能较高，并且它的声明式、组件化特性让编写…"}, {"id": "6975041237266989086", "title": "Redux-Saga妈妈级教程（上）", "desc": "1，Redux-Saga简述： redux-saga是redux的中间件，主要负责处理从action派发到更新store装填中间具有副作用行为的处理。 2，开始使用Redux-Saga 下面是reac"}, {"id": "6991297178849263630", "title": "认识React的虚拟Dom（1） | 8月更文挑战", "desc": "前端技术的快速发展，让现在的vue、react成为主流框架 一开始的静态页面，到后来的jquery，到现在的vue、react，mvvm、mvc前端开发模式都使用了虚拟dom 但纵观主流框架好像也是对"}, {"id": "6844903981999718407", "title": "React Concurrent 模式抢先预览上篇: Suspense the world", "desc": "2019.10.24, 在 React Conf 2019 首日， React 官方正式发布了关于 Concurrent 模式的第一个早期社区预览文档, 正式和 React 的大众开发者见面, 令人兴奋。 跟去年的 React Hooks 一样, 尽管 Concurrent 还…"}, {"id": "6974791788632473607", "title": "React 面试必知必会 Day11", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6844904090032406536", "title": "写React Hooks前必读", "desc": "最近团队内有同学，由于写react hooks引发了一些bug，甚至有1例是线上问题。团队内也因此发起了一些争执，到底要不要写hooks？到底要不要加lint？到底要不要加autofix？争论下来结论如下： 团队再出一篇必读文档，必须要求每位同学，先读再写。 因此便有了此文。 …"}, {"id": "6993551551696470030", "title": "对于react 的 useState你真的理解对了吗?", "desc": "前言: 为什么要写这篇文章, 在我自己学习react hooks 的时候, 对于setState的理解并不是很升入, 在开发一年多后, 偶然看到一个机构讲解useState 的时候, 颠覆了我对use"}, {"id": "6883769015458594823", "title": "React要重写文档了", "desc": "Vue和React，谁才是更好的选择，这个争论似乎从未停过。但在一点上，双方粉丝似乎达成了难得的一致： Vue文档比React文档好太多。 React开发者对此的解释是：Vue是国人开发的嘛，写出来的文档当然更符合中国人看啦。 但从#3308来看，似乎全球React开发者都苦文…"}, {"id": "6972937559626219534", "title": "React 面试必知必会 Day 6", "desc": "如何在 React 中对 props 进行验证？ 当应用程序运行在开发模式时，React 会自动检查我们在组件上设置的所有 props，以确保它们具有正确的类型。"}, {"id": "7000347579342913544", "title": "react学习笔记", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 一、 组件划分原则 解耦： 降低单一模块/组件的复杂度。 复用：保持组件一致性，提升开发效率。 组件颗粒度需要避免过大或过小。 一个独立的"}, {"id": "6967156733412114445", "title": "React实现高性能Tree组件", "desc": "1. 背景 之前在重构项目的所涉及到的组件中，Tree组件占据了半壁江山。而该组件的产生，也是由该项目演化未来。虽然该项目后来停止了，但是所累积的设计经验确是延续下来了的。在组件库中，我结合了虚拟列表"}, {"id": "6957702300244639780", "title": "使用 node 和 socket 实现在线聊天室", "desc": "使用最简的讲解，实现在 h5 端通过 socket 实现在线聊天室的功能，服务端基于 node 实现。"}, {"id": "6916317848386142216", "title": "【React Hooks】掌握及对比常用的8个Hooks（优化及使用场景）", "desc": "有一段时间没写文章了，总结记录一下个人常用的或个人认为该掌握的八个React Hooks。如果算上自定义Hooks，应该是九个的，但本篇文章就不展开了。我来网易之前是刚学的React框架，当时看了一天公司项目，然后发现得去看一下React Hooks，看了一个周末，做了点总结，…"}, {"id": "6989022564043456543", "title": "「React进阶」只用两个自定义 Hooks 就能替代 React-Redux ?", "desc": "前言 之前有朋友问我，React Hooks 能否解决 React 项目状态管理的问题。这个问题让我思索了很久，最后得出的结论是：能，不过需要两个自定义 hooks 去实现。那么具体如何实现的呢？ 那"}, {"id": "6952696734078369828", "title": "React + TypeScript实践", "desc": "❗️准备知识 :熟悉 React熟悉 TypeScript (参考书籍：2ality's guide, 初学者建议阅读：chibicode's tutorial）熟读 React 官方文档 TS部分熟"}, {"id": "7005899039875006500", "title": "教练，怎么在vue项目里写react？", "desc": "1.前言 我承认了我是标题党，本篇文章是在vue项目里写tsx的一篇介绍。作为一个reacter，目前的业务天天使用vue2+ts让我十分的不舒服。我对于vue也不是很熟悉，想回到我的react时代。"}, {"id": "6991728251034959885", "title": "vite + react + ts 手摸手做项目系列一 （项目配置篇）", "desc": "前言 说好的教程终于来了，文章主要带大家打造一个 react spa 的项目，使用的技术栈是 vite+react+ts,vite 的快想必我就不用介绍了，用过的都说好， react + ts 已经成"}, {"id": "6989764387275800607", "title": "React 中的一些  Router 必备知识点", "desc": "前言 每次开发新页面的时候，都免不了要去设计一个新的 URL，也就是我们的路由。其实路由在设计的时候不仅仅是一个由几个简单词汇和斜杠分隔符组成的链接，偶尔也可以去考虑有没有更“优雅”的设计方式和技巧。"}, {"id": "6844904134303301645", "title": "抄笔记：尤雨溪在Vue3.0 Beta直播里聊到了这些…", "desc": "在4月21日晚，Vue作者尤雨溪在哔哩哔哩直播分享了Vue.js 3.0 Beta最新进展。 1. 全新文档RFCs 所有的进度和文档都将在全新RFCs文档可以看到。 2. 六大亮点 Performance：性能更比Vue 2.0强。 Tree shaking support：…"}, {"id": "6995455392075481118", "title": "React 状态管理策略? 不, 应该是 React 组件管理策略", "desc": "前言 在我的前几篇文章中, 我提到了现行 React 状态管理策略上的失败, 和社区的混乱, 在这篇文章中, 我会进一步剖析为什么 React 状态管理诉求的本质, 以及现行官方和社区策略的不可取的原"}, {"id": "7006609303469555743", "title": "redux你用对了吗？", "desc": "redux中什么是纯函数，以及为什么reducer需要返回一个全新的 state ？从源码角度分析了需要返回全新state的原因，最后引入了immer库，方便高效的使用redux"}, {"id": "7001281736235548680", "title": "🍏 React 入门学习（八）-- GitHub 搜索案例", "desc": "引言 本文主要介绍 React 学习中 Github 搜索案例，这个案例主要涉及到了 Axios 发送请求，数据渲染以及一些中间交替效果的实现"}, {"id": "7005365307099316261", "title": "React Hooks工具库 aHooks 解析之usePersistFn", "desc": "前言 aHooks 是阿里巴巴开源的一个React Hooks库，其中有很多hooks实现得很巧妙，一起来看看吧，本文的主角是usePersistFn。 这里是usePersistFn文档 usePe"}, {"id": "6997376981599780878", "title": "React状态管理一些思考（中篇）--Redux", "desc": "Redux是Dan Abramov在2015年发布，是React生态里最火的状态管理库，源码十分的简洁，但是其扩展的\b生态却十分丰富，设计思想非常🐂，下面让我们一起来学习..."}, {"id": "7002250258826657799", "title": "说一说 Fiber", "desc": "虚拟DOM 在 React 中有个正式的称呼——Fiber。在之后的学习中，我们会逐渐用`Fiber`来取代 React16虚拟DOM 这一称呼。"}, {"id": "6978654109893132318", "title": "手写系列-实现一个铂金段位的 React", "desc": "本文实现简单版本的 React，参考 React 16.8 的基本功能，包括虚拟 DOM、Fiber、Diff 算法、函数式组件、hooks 等。"}, {"id": "6963053793613185031", "title": "「React进阶」探案揭秘六种React‘灵异’现象", "desc": "前言 今天我们来一期不同寻常的React进阶文章，本文我们通过一些不同寻常的现象，以探案的流程分析原因，找到结果，从而认识React，走进React的世界，揭开React的面纱，我深信，更深的理解，方"}, {"id": "6908895801116721160", "title": "「react进阶」年终送给react开发者的八条优化建议(篇幅较长，占用20-30分钟)", "desc": "笔者是一个 react 重度爱好者，在工作之余，也看了不少的 react 文章, 写了很多 react 项目 ,接下来笔者讨论一下 React 性能优化的主要方向和一些工作中的小技巧。送人玫瑰，手留余香，阅读的朋友可以给笔者点赞，关注一波 。 陆续更新前端文章。 方向分别加以探…"}, {"id": "7003962958753562654", "title": "渐进式React源码解析--State源码", "desc": "解析React中setState执行流程，实现React中的setate出发页面重新渲染再到最终实现合成事件和异步更新。 深入浅出React State机制，让你彻底搞懂React中的State。"}, {"id": "7001331980704940040", "title": "React 小册 ｜ 周边推荐（个人导向篇）", "desc": "本文排名严格按照个人喜好 🤖 并会按着喜好一直更新哦 😈 有其他推荐的可以在评论区安利哦 👾 传送门 🤖 React 小册 - 起步 JSX ✅ ✅ React 小册 - 扬帆起航 ✅ ✅ React"}, {"id": "7001904493113638920", "title": "曝光前东家的微前端体系技术规划", "desc": "主要以Umi为基本生态圈，实现各种微前端父子交互和响应，探索更好的技术方案，规划一个内部前端的技术方案，目的是优化业务和更好的开发体验。"}, {"id": "7000661432673140772", "title": " 🌈 React 入门学习（六）-- TodoList 案例", "desc": "引言 TodoList 案例在前端学习中挺重要的，从原生 JavaScript 的增删查改，到现在 React 的组件通信，都是一个不错的"}, {"id": "6960556335092269063", "title": "一名 vueCoder 总结的 React 基础", "desc": "从入门开始，react 系列的，会边学边写，从基础 -> hooks -> 源码 -> 面试题等等，也会写一些自己转变的过程，一起学习啦。"}, {"id": "6968743238106611742", "title": "React 07 :: configuration with environment", "desc": "前言 这篇文章来介绍一下，react中的换件变量，以及如何配置不同的环境，例如：Development，Staging，Testing，Production。 话不多说，先来share一下这篇文章的r"}, {"id": "6844903720610693127", "title": "了解JavaScript中的Memoization以提高性能,再看React的应用", "desc": "我们渴望提高应用程序的性能，Memoization是JavaScript中的一种技术，通过缓存结果并在下一个操作中重新使用缓存来加速查找费时的操作。 在这里，我们将看到memoization的用法以及它如何帮助优化应用的性能。 如果我们有CPU密集型操作，我们可以通过将初始操作…"}, {"id": "6844903762985779213", "title": "重拾React: Context", "desc": "对于React开发者而言，Context应该是一个不陌生的概念，但是在16.3之前，React官方一直不推荐使用，并声称该特性属于实验性质的API，可能会从之后的版本中移除。但是在实践中非常多的第三方库都基于该特性，例如：react-redux、mobx-react。 如上面的…"}, {"id": "6994719021514014751", "title": "编写一个react todo小项目", "desc": "react学习-编写一个todo小项目,可以新增查看代办事项，并标记为已完成，未完成。记录每日工作情况"}, {"id": "6946130973801070605", "title": "UmiJs初认识", "desc": "现在已经跑起来了，就两行命令就开启一个项目。这时候pages下面只有index.tsx, 我们添加一个登陆页吧 路由，我们用约定式路由，也就是根据pages下面的文件自动生成路由，不用手动去管理。 这时加一个login.tsx吧, 假设页码写好了，这时候我们需要进行请求，我们配…"}, {"id": "6844904024248958983", "title": "切换路由用React hooks恢复滚动条位置或回到顶部", "desc": "事实是用过react hooks之后就两个字：真香！，再也不想写class组件了。 想要学习react hooks的同学请查看官网, 掘金上大佬写的文章也很多。 写这篇文章原因是在使用react-router的时候，通过history.push或者Link的方式切换路由，如果组…"}, {"id": "6844903807751553037", "title": "React项目实践（二）一个登录页面的状态迁移", "desc": "这次谈谈一个登录页面的设计。在之前写过的项目中，我都是把表单放在一个页面也没有考虑到用户等待过程中的loading提示。这次重新规划一下，将展示组件与控制拆分，同时用状态机实现状态管理 前几天刚好看到一篇文章前端状态管理请三思,觉得挺有意思的，原文作者利用状态机的思想，预先设想…"}, {"id": "6979498689110736909", "title": "React（七）：表单", "desc": "受控组件 React 组件 的 state 成为“唯一数据源”，并且组件还控制着用户输入过程中表单发生的操作。就叫做“受控组件”。 textarea 在 React 中，<textarea> 使用 v"}, {"id": "6971404973469138957", "title": "【Rematch 源码系列】二、Rematch core", "desc": "在讲解 rematch core 之前，先回顾一下 rematch 的代码结构： 根据以上结构，我将 rematch 拆分为如下几个组成部分： 再回想一下 rematch 的引用语句"}, {"id": "6844903828580483079", "title": "我们或许不需要 React 的 Form 组件", "desc": "相信写过 React 项目的人都已经非常熟练, 受控组件就是: 把一个 input 的 value 和 onChange 关联到某一个状态中. 行业内极力推崇单向数据流的方案, 我在之前的项目中一直以 redux + immutable 作为项目管理, 项目也一直稳定运行, 直…"}, {"id": "6844904165907365901", "title": "最容易理解的react-redux 入门实战讲解", "desc": "本文旨在通过大白话讲解一个最简单的使用 react-redux 作为状态管理器的demo，来帮助大家更快的在自己的项目中去集成react-redux 这个库。 2. React-Redux 基本使用 Action 是把数据从应用传到 store 的有效载荷; 它是 store …"}, {"id": "6882284978210766861", "title": "聊一聊React（一）：思想", "desc": "在相当长的一段时间里，Facebook网站的聊天栏有一个bug：当用户看到了新消息提示，点开后却没有新消息。开发们多次尝试修复，在以为自己已经修复的情况下，问题却又再次出现。 消息处理函数很庞大且有大量DOM操作，而一个页面里会有多个聊天会话，因为使用了双向数据绑定，就很难跟踪…"}, {"id": "6884061468019392525", "title": "大众点评星星评分PC+mobile解决方案-精确到小数级-react组件", "desc": "背景现在的大多数评分组件是精确到半颗星星的，例如：antd的评分组件 但是如果遇到精确细节的产品，他会要求成这样精确到小数位 大众点评也是这样的 想要做到细致到小数的效果要怎么做呢？我找了大量素材没有"}, {"id": "6844904122974470151", "title": "混子前端React diff探究", "desc": "通过 diff 算法，React 可以找出新老 Virtual DOM Tree 的最小差异集，下一步就是要把这些变化通过最少步骤更新到真是DOM节点上，React 把构造新Virtual DOM -> 执行diff算法 -> 更新老Virtual DOM -> 更新真实DOM…"}, {"id": "6844903649420771342", "title": "JS之父和JSON之父：JavaScript的下一站", "desc": "7 月 11 日，FullStack 2018 在伦敦举行，JavaScript 之父 Brendan Eich 和 JSON 之父、“JavaScript：The Good Parts”的作者 Douglas Crockford 一同出席，并就 JavaScript 的未来发…"}, {"id": "6844904200170635272", "title": "正确姿势学习React知识体系", "desc": "学习react，必须看官方文档，从源头学习；那么，我们在看别人的文章时，就能辨别“真假”。 查看https://reactjs.org/versions/此页面，我们可以知道从v16.8到v16.13.1的文档并未更新，只更新了日志。所以我们可以放心的查看16.13.1的文档（…"}, {"id": "6844903616411598856", "title": "从零开始React + Dva + ant.design开发项目—路由", "desc": "之前发现了蚂蚁金服的ant.design，感觉这个框架有完整的设计交互规范，组件库丰富，交互友好，代码质量高，稳定性好，然后就一直想要在项目中使用下这个框架，但是之前一直都是用VUE的不怎么会React。今天学习了下怎么去使用React以及Dva，在学习的过程中碰到了以下几个路…"}, {"id": "6914956252250374152", "title": "数据可视化平台umi+dva+antd", "desc": "Please give me a Star if you like this project.Thank you so much."}, {"id": "6900058068374650887", "title": "「科普」前端工程师简史", "desc": "互联网的飞速发展，催生了很多高薪职业，程序员便是其中佼佼者。 在程序员群体中，前端岗位以其门槛低（相对其他技术岗位）、工资高（相对非互联网行业）、发展好（薪酬涨幅高）受到广大有为打工人的青睐。 这一切还得从互联网上古时期的一场战争谈起。 1993年，美国伊利诺伊大学NCSA开发…"}, {"id": "6844904146869420046", "title": "从零开始封装一个属于自己的UI框架（一）  --前期准备工作思考篇", "desc": "针对我们经常遇到的业务场景或者UI进行封装，可以让我们在遇到相同或者类似的业务场景时可以快速复用，并且对一些常用UI组件进行封装可以让我们降低对于基本UI的关注度，并且自己去封装一些组件也是极好的学习方式，也便于我们对于业务的理解，所以这就是我选择自己封装组件库的原因。 作为一…"}, {"id": "6950083400489238564", "title": "精读《高性能表格》", "desc": "每个前端都想做一个完美的表格，业界也在持续探索不同的思路，比如钉钉表格、语雀表格。笔者所在数据中台团队也对表格有着极高的要求，尤其是自助分析表格，需要兼顾性能与交互功能，本文便是记录自助分析表格高性能"}, {"id": "6996671312450060318", "title": "使用Next.js实现React SSR的优雅降级", "desc": "React SSR最成熟的开源框架是Next.js，这么多年保持着强劲的生命力， 降级是SSR必须要考虑的一个问题。"}, {"id": "6982807518393139214", "title": "React 系列十一：高阶组件以及组件补充", "desc": "什么是高阶组件呢？相信很多同学都听说过，也用过高阶函数，它们非常相似，所以我们可以先来回顾一下什么是高阶函数。 高阶函数的维基百科定义：至少满足以下条件之一："}, {"id": "6993687849858138120", "title": "react同构渲染+实战", "desc": "1.1 认识同构 1.1.1 前后端分离的历史与发展 前后端不分离（JSP MVC）-> 前后端分离（AJAX）-> SPA(前端路由)-> SSR(前端后端渲染同构) 1.1.2 同构渲染的出现 问"}, {"id": "6844903998986649608", "title": "应战Vue3 setup，Concent携手React出招了！", "desc": "正文开始之前，先预览一个生产环境的setup 示例，以示这是一个生产环境可用的标准特性。 在Function-based API文章里说得很清楚了，setup API 受 React Hooks 的启发，提供了一个全新的逻辑复用方案，能够更好的组织逻辑，更好的在多个组件之间抽取…"}, {"id": "6854573214111268877", "title": "Antd Pro V5初体验", "desc": "cut..."}, {"id": "6991664114720309278", "title": "你真的完全了解setState嘛", "desc": "setState到底是同步还是异步？ 其实setState可能表现为异步更新也可能表现为同步更新 异步更新情况 生命周期中 合成事件中 首先得了解一下什么是合成事件，react为了解决跨平台，兼容性问"}, {"id": "6982892105844654087", "title": "通过map解决导航路由递归问题", "desc": "问题描述 数据源 通过map进行递归操作 ,解决前端项目中需要将数据结构为树的数据源转换为路由导航的问题。"}, {"id": "6995187050160848909", "title": "记录一次对React项目优化", "desc": "公司项目是React项目,到我手上时需要进行一些优化,下面是只针对代码的优化,其实代码层面的优化还是比较方便的,网上文章比较多"}, {"id": "6974214390941745160", "title": "React 系列二：核心JSX语法", "desc": "这节我们将教你一个有趣的标签语法，他既不是字符串也不是 `HTML`，他被称为 `JSX`，是一个 `JavaScript` 的语法扩展，我们建议在 `React` 中配合使用 `JSX`。"}, {"id": "6933126664608202766", "title": "react-beautiful-dnd新版拖拽组件你值得拥有", "desc": "0、玩玩demo官方demodemo集合,总有一款适合你~1、安装2、总体一览-瞄一眼官方图|名称|中文名|作用/写法||---------------|----------|------------"}, {"id": "6970075421522001928", "title": "Vue vs React，语法差异之处", "desc": "最近在用React写一个项目，所以对比Vue的常用语法，写一些两者的区别。不深入探讨，只是简单的记录常用的语法。"}, {"id": "6991466750311153695", "title": "react-从零开始搭建项目-项目框架搭建", "desc": "前言 平时在创建react项目时，我们总喜欢用脚手架，因为这样可以快速搭建起项目。但是弊端也是有的，比如不太容易理解项目为什么要这样搭建，也可能搞不清楚各部分代码是如何配合的，所以我想尝试自己从零开始"}, {"id": "6967227767851057183", "title": "下一代 React Native 会是什么样的？— Recos", "desc": "React Native 性能差，那我们就去重新造一个轮子，思路有了，就差实现了，努努力，干一票大的。"}, {"id": "6977296943332458532", "title": "react - 实现一个密码强度检测器", "desc": "密码强度文件校验器； 注册帐号的时候我们需要对用户当前的密码强度进行一个评估，这个过程我们需要做一个检测器，最好写的灵活点，这样方便产品修改规则。"}, {"id": "7000926273308475422", "title": "ahooks 源码解读系列 - 11", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6949788098465103886", "title": "React的操作系统梦，任重而道远", "desc": "1. 简要回顾下React从16～21年的迭代历程2. React为什么对新特性（Concurrent Mode）有这么大执念 3.为什么当前社区项目/库要升级到Concurrent Mode比较难"}, {"id": "6844903780035592205", "title": "面试官问：JS的继承", "desc": "用过React的读者知道，经常用extends继承React.Component。 面试官可以顺着这个问JS继承的相关问题，比如：ES6的class继承用ES5如何实现。据说很多人答得不好。 要弄懂extends继承之前，先来复习一下构造函数、原型对象和实例之间的关系。 其中这…"}, {"id": "6844903673403801607", "title": "前端性能优化—js代码打包", "desc": "现在的 web 应用，内容一般都很丰富，站点需要加载的资源也特别多，尤其要加载很多 js 文件。js 文件从服务端获取，体积大小决定了传输的快慢；浏览器端拿到 js 文件之后，还需要经过解压缩、解析、编译、执行操作，所以，控制 js 代码的体积以及按需加载对前端性能以及用户体验…"}, {"id": "6997681607981137956", "title": "React Filber架构前置知识", "desc": "本篇文章来自官网的学习，如果对官网的Diff已经掌握的同学可以跳过。 Fiber架构设计动力 我们知道React会有两棵树。这两棵树会交替运行，进行UI渲染。官网也给出了两个树的大概生成流程。 在某一"}, {"id": "6844903646476369928", "title": "puppeteer初探", "desc": "puppeteer 是一个Chrome官方出品的headless Chrome node库。它提供了一系列的API, 可以在无UI的情况下调用Chrome的功能, 适用于爬虫、自动化处理等各种场景 创建一个最新的自动化测试环境。使用最新的 JavaScript 和浏览器功能，可…"}, {"id": "6995561579169185822", "title": "使用react修改ant design默认样式|自定义", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 本章将通过从修改ant design 的 Input 组件默认样式着手，讲解如何自定义自己的样式，以达到举一反三，可以修改任意ant de"}, {"id": "6932281228334727181", "title": "这篇文章教你如何根据业务封装自定义hooks", "desc": "请注意：对React中一些重复的逻辑进行封装并不是封装公共的方法，而是一些组件内部重复的逻辑加以封装，使之可以重复使用。 关于公共hooks的封装，阿里开源的ahook有不少可以使用的hook，当然也有关于对antd使用的hook，可是每个项目的逻辑或许只差一步，就无法使用。所…"}, {"id": "6844903687496663047", "title": "Flutter从入门到寄几玩儿", "desc": "毕竟前端出生，找(qi)到(shi)了(bing)感(mei)觉(ru)后(men)，其实就是一个UI框架，只不过他的引擎基于C++,底层基于Skia渲染，DartVM虚拟机以及Text and so on... 2018年6月21日Google发布Flutter首个relea…"}, {"id": "6882699381414461447", "title": "React 架构的演变 - 更新机制", "desc": "前面的文章分析了 Concurrent 模式下异步更新的逻辑，以及 Fiber 架构是如何进行时间分片的，更新过程中的很多内容都省略了，评论区也收到了一些同学对更新过程的疑惑，今天的文章就来讲解下 React Fiber 架构的更新机制。 可以注意到 Fiber 节点有个 al…"}, {"id": "6898569401176424456", "title": "React丨用户体验丨hook版 lazy loading", "desc": "React.lazy 和 React.Suspense 是一对好兄弟，它两就可以完成一个优雅的懒加载方案，让我们来看看它们在 hook 中的使用吧。 上面报错说的是需要与 React.Suspense 配合做 loading 或者占位符，所以说它们是好兄弟，形影不离 。那我们来…"}, {"id": "6844903604013252621", "title": "打造跳跃音波播音乐放器(Electron+Nodejs+React)", "desc": "Electron可以让我们使用html,css,javascript来搭建跨平台（Windows、macOS、Linux）的桌面应用。下面通过Electron+Nodejs+React来实现一个支持播放在线音乐及本地音乐的播放器。播放器设计风格为windows的Fluent D…"}, {"id": "6844903784729018382", "title": "React16时代，该用什么姿势写 React ?", "desc": "接下来将针对影响较大，使用频率较高的更新点逐一讲解。 我们知道，对 React 组件的性能优化，shouldComponentUpdate函数是很重要的一啪，所以 React 才会在 React.Component的基础上增加了React.PureComponent，但是对于非…"}, {"id": "6844903667426918408", "title": "揭密React setState", "desc": "setState(updater, callback)这个方法是用来告诉react组件数据有更新，有可能需要重新渲染。它是异步的，react通常会集齐一批需要更新的组件，然后一次性更新来保证渲染的性能，所以这就给我们埋了一个坑： 那就是在使用setState改变状态之后，立刻通…"}, {"id": "6844903657926819854", "title": "在 React 中使用 Redux", "desc": "本文会通过三种方式实现一个简单到不能呼吸的计数器小例子，先用 React 实现，再慢慢引入 Redux 的内容，来了解什么是 Redux、为什么要使用 Redux 以及如何简单地使用 Redux。 上面这个例子用 React 实现起来非常简单，初始化一个 creact-reac…"}, {"id": "6989815428256137230", "title": "React生命周期浅析", "desc": "一、React组件生命周期 1、constructor constructor参数接受两个参数props,context 可以获取到父组件传下来的的props,context,如果你想在constru"}, {"id": "6918589906675728391", "title": "玩一下低代码框架amis，并动手封装一个表情输入框组件", "desc": "amis： 前端低代码框架，通过 JSON 配置就能生成各种后台页面，极大减少开发成本，甚至可以不需要了解前端。 这句是来自它git上的一句描述，字面意思说：”不需要了解前端仅通过一些json配置就能搞出各种mis后台页面“，嗯...看起来挺吊的。但是它真的有这么吊嘛，我们一起…"}, {"id": "6844903925405974536", "title": "AntDesign表单的理解与使用", "desc": "虽然 react 没有内置的表单验证逻辑，但是我们可以使用 react 组件库 AntDesign 中的表单组件 Form 来实现这一需求。 在 Form.Item 中设置校验规则，在表单提交或表单输入变化时，通过执行 this.props.form.validateField…"}, {"id": "6844903946016784392", "title": "自己写个React渲染器: 以 Remax 为例(用React写小程序)", "desc": "上个月蚂蚁金服前端发布了一个新的框架 Remax, 口号是使用真正的、完整的 React 来开发小程序. 对于原本的 React 开发者来说 'Learn once, write anywhere' , 和 ReactNative 开发体验差不多，而对于小程序来说则是全新的开发…"}, {"id": "6946461614099038222", "title": "Next.js 入门指南", "desc": "SPA（Single Page Application）： 单页面应用程序，是前后端分离时提出的一种解决方案。在一个应用或者站点中，只有一个完整的html页面，这个页面有一个容器root节点，可以把需要加载的代码片段插入到该容器中。 SPA的工作原理：采用的前端路由跳转子页面系…"}, {"id": "6982434894634811405", "title": "初探 react 18 ", "desc": "主要关于React18新增的功能，ssr，startTransition，automatic batching"}, {"id": "6985040166750683144", "title": "React 中高阶组件的基本使用", "desc": "前言 不学不知道，一学吓一跳。这react跟vue相比，真是太能融合了。就拿这个高阶组件来说，里面融合了函数式组件，类组件，兄弟组件的状态提升，父子组件传值。还用到了函数柯里化这个思想，真是太牛X了，"}, {"id": "6844903661483589645", "title": "2018，React Native第三方组件库汇总", "desc": "移动跨平台框架React Native经过4年的发展，其生态已经变得异常丰富，在使用React Native开发项目的过程中，为了提高开发效率，我们经常会借鉴一些使用使用率比较高的开源库，根据大众的需求，对这些使用较高的 React-Native UI 库，我们做一个简单的总结…"}, {"id": "6875115591154270221", "title": "setState是同步还是异步", "desc": "在React16.8之前，React通过this.state来访问state，通过this.setState()方法来更新state。当this.setState()被调用的时候，React会重新调用render方法来重新渲染UI。state是React中的重要概念。React…"}, {"id": "6844903645201465357", "title": "webpack + Vue + Hbuilder 打包成App，混合app开发，一个人搞定", "desc": "Hbuilder 官网推荐的UI组件是Mui, 自己定义了方法，剥去了jquery方法，反正我没多少用过，一脸懵逼 ，毕竟学习成本又加重了。 vue react的热门程度我在这里也不说了，看招聘网站可想而知。"}, {"id": "6993641980974596109", "title": "图解React源码 - Scheduler 调度原理", "desc": "在 React 运行时中, 调度中心(位于scheduler包), 是整个 React 运行时的中枢(其实是心脏), 所以理解scheduler调度, 就基本把握了 React 的命门."}, {"id": "6997217837274103838", "title": "React源码 - React 合成事件", "desc": "从架构上来讲, SyntheticEvent打通了从外部`原生事件`到内部`fiber树`的交互渠道, 使得`react`能够感知到浏览器提供的`原生事件`, 进而做出响应, 修改`fiber树`."}, {"id": "6993980489463758855", "title": "[源码-react01] ReactDOM.render01", "desc": "导航 [react] Hooks [封装01-设计模式] 设计原则 和 工厂模式(简单抽象方法) 适配器模式 装饰器模式 [封装02-设计模式] 命令模式 享元模式 组合模式 代理模式 [React "}, {"id": "6999645972288503844", "title": "xdm, Vue 和 React", "desc": "简单对比了一下 Vue 和 React 写之前那是心血来潮，觉得那必定是一番惊天动地的事业，写完后小丑就是自己，下次补上"}, {"id": "6948752328715403300", "title": "浅探 Web Worker 与 JavaScript 沙箱", "desc": "自从 2014 年 HTML5 正式推荐标准发布以来，HTML5 增加了越来越多强大的特性和功能，而在这其中，工作线程（Web Worker）概念的推出让人眼前一亮，但未曾随之激起多大的浪花，并被在其随后工程侧的 Angular、Vue、React 等框架的「革命」浪潮所淹没。…"}, {"id": "6844904000043614222", "title": "如何对 React 函数式组件进行优化", "desc": "本文只介绍函数式组件特有的性能优化方式，类组件和函数式组件都有的不介绍，比如 key 的使用。另外本文不详细的介绍 API 的使用，后面也许会写，其实想用好 hooks 还是蛮难的。 有过 React 函数式组件的实践，并且对 hooks 有过实践，对 useState、use…"}, {"id": "6938400967234863111", "title": "lowcode之H5可视化搭建项目", "desc": "关于可视化搭建，可以看这篇文章：页面可视化搭建工具前生今世。 面向开发者和普通用户，快速生成H5页面。有时候低代码比无代码更能提高生产力，脱离“复制粘贴”式的组件复用。对运营人员来说可以快速搭建一个营销页面，对开发来说可以方便的添加、组合组件，结合少量代码去复用之前组件。 大部…"}, {"id": "6992773906272616485", "title": "Performance Thinking on Front End (Reactjs)", "desc": "In this article, I talk the performance thinking on Front End, especially ReactJS."}, {"id": "6844904137390292999", "title": "基于react搭建一个通用的表单管理配置平台（vue同）", "desc": "熟悉我的朋友可能会知道，我一向是不写热点的。为什么不写呢？是因为我不关注热点吗？其实也不是。有些事件我还是很关注的，也确实有不少想法和观点。 但我一直奉行一个原则，就是：要做有生命力的内容。 这篇文章是一篇应用性极强的文章，我们通过一个实际的应用场景，去解决某一类的问题，提供一…"}, {"id": "7005222645708881951", "title": "How to use React Context & How to useContext in React【译】", "desc": "React Context & useContext 使用指南，以及useContext的最佳实践。"}, {"id": "6987561439636488228", "title": "一文读懂Redux、React-Redux源码", "desc": "前前言 朋友们好啊，我是来自推啊前端团队的 jarvis 同学，本次分享的内容是「解读Redux、React-Redux源码」。如果大家有不同的观点，欢迎在评论区吐槽和指正哦～😝😝😝 写在前面 作为 "}, {"id": "6996267155893436446", "title": "图解React源码 - Hook 原理(概览)", "desc": "本节分析了\"fiber\"与\"hook\"的内在关系, 通过\"renderWithHooks\"函数, 把\"Hook\"链表挂载到了\"fiber.memoizedState\"之上."}, {"id": "6844903614759043079", "title": "一步一步的了解webpack4的splitChunk插件", "desc": "webpack4出了两个月，发现大家包括我对splitChunk的使用都还是在摸索阶段。我也看了挺多别人的配置demo，都觉得不太满意或者没得到太好的解惑，issue 下面的问题也没什么人回复，只能自己操作了，顺便记录下来，如果大家有更好的，欢迎评论区留下地址。 maxAsyn…"}, {"id": "7004105857457717256", "title": "React 的 UA模块之 jwt 的保存技术 的实现思路", "desc": "可以用storage API，也可使用传统 cookie，后者似乎更合理 实现基本的UA模块，有好几部分的复杂性（分别有相应的工具） 它们包括： 使用 storage API 保存jwt数据 使用co"}, {"id": "6994624240771153927", "title": "图解React源码 - fiber 树构造(初次创建) - 全网最走心的fiber解读之一", "desc": "本节演示了初次创建`fiber树`的全部过程, 用18张过程图片, 跟踪了创建过程中内存引用的变化情况, 助你深入理解fiber构造原理."}, {"id": "6962508951090888712", "title": "React全家桶从搭建到部署(超全面)", "desc": "自己搭建的基于 React + Redux + Antd + Immutable 的前端项目,同时支持单元测试和集成测试, 支持CI 以及 docker部署，目前还在不断完善中，希望大佬们捧场给个 S"}, {"id": "6988805492642578463", "title": "使用轻服务+React 快速搭建 Web 站点", "desc": "字节内部的轻服务已经对外放开测试，尝试后发现整个开发部署流程如丝般顺滑。因此写了这篇小文，记录一下使用的大致流程。"}, {"id": "6993139933573546021", "title": "图解React源码 - React 中的优先级管理", "desc": "React内部对于优先级的管理, 根据功能的不同分为LanePriority, SchedulerPriority, ReactPriorityLevel等3 种类型."}, {"id": "6986417899317493773", "title": "react背诵", "desc": "一、state相关 1、setState 不可变值（数组修改不能使用 push pop splice 等，这样违反了不可变值，会影响 shouldCompententUpdate 判断） 可能是异步更"}, {"id": "6989424199819821064", "title": "React + Hooks + TypeScript + Ant Design Demo 项目", "desc": "React + Hooks + TypeScript + Ant Design Demo 项目 本地node版本v12.13.1 应用使用Create React App脚手架"}, {"id": "6971655993390317598", "title": "官方警告，react18已经来了", "desc": "18他来了 什么，react18都来啦，不敢相信，react17都还没捂热，18突然就来了，没有一点点防备，就是这么惊喜，react官网已经放出react18的介绍了，还是不信的话，你点点链接瞧瞧官宣"}, {"id": "6996845154040545288", "title": "ahooks 源码解读系列 - 2", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6844904099595419655", "title": "一盏茶的时间，快速捕获JS中常用的方法（细心整理，持续更新ing）", "desc": "不知不觉上班一周辽～趁着大好周末，小编挣扎着从床上爬起来，决定对前端日常编程中常用到的一些方法做一个系统的整合。 有些人或许会觉得忘了百度就完事儿，no no no！这事儿小编真的亲践过好多次，百度一次记住了还好，记不住下次碰着了还得找度娘简直是拉低工作效率。 本次整理希望可以…"}, {"id": "6924452249426984973", "title": "分享写JS中可能会用到的12个技巧和插件", "desc": "前言本文的例子都是经过实践后,总结的一些比较实用的技巧,如果疑惑或者错误,欢迎指正!thenby多重排序github地址场景:需要对数据进行多重排序当然如果单纯的从小大排序,在这里例子中还可以这么写:"}, {"id": "6983217650016976932", "title": "react hooks", "desc": "这篇文章 通过数组的方式阐述了 hooks 为什么不能写在 条件语句和循环语句中。但是实际上 hooks 并不是真的是数组的形式组织的。"}, {"id": "6844903958364815373", "title": "【React系列】手把手带你撸后台系统（架构篇）", "desc": "本系列文章将介绍从零开始搭建一个高可复用的后台架构系统，让每一个人都能轻松搭出自己的后台。系统功能包含登录授权、路由鉴权与组件化，涉及react-router与react-redux的应用。系统最终实现的效果： 创建一个React App，目测有3到4种方法，这是官网文档的说明…"}, {"id": "7005844045851263006", "title": "React Native(TypeScript)单元测试", "desc": "测试工具选型：Jest + testing-library jest是一个开源的javascript单元测试框架，集成了测试执行器、断言库、spy、mock、snapshot和测试覆盖率报告"}, {"id": "6942659949054918664", "title": "setState异步真的只是为了性能吗？", "desc": "updater 函数中接收的 state 和 props 都保证为最新。updater 的返回值会与 state 进行浅合并。 setState() 的第二个参数为可选的回调函数，它将在 setState 完成合并并重新渲染组件后执行。通常，我们建议使用 componentDi…"}, {"id": "6844903603111460872", "title": "《React in patterns》 中文版来了", "desc": "《React in patterns》是一本非常棒的 React 开源书 GitHub 上有将近 9k 的 stars 注: 此书并非 React 入门书，而是作者对 React 的一些思考与理解"}, {"id": "6999437729243070495", "title": "ahooks 源码解读系列 - 7", "desc": "这个系列是将 ahooks 里面的所有 hook 源码都进行解读，通过解读 ahooks 的源码来熟悉自定义 hook 的写法，提高自己写自定义 hook 的能力，希望能够对大家有所帮助。"}, {"id": "6844903600309665799", "title": "React v16.3 版本新生命周期函数浅析及升级方案", "desc": "一个月前，React 官方正式发布了 v16.3 版本。在这次的更新中，除了前段时间被热烈讨论的新 Context API 之外，新引入的两个生命周期函数 getDerivedStateFromProps，getSnapshotBeforeUpdate 以及在未来 v17.0 …"}, {"id": "6982550110572052493", "title": "React 源码解读(一)", "desc": "前言 Hello, 大家好！ 这是我参与新手入门的第2篇文章 本系列是基于 React17.0.0"}, {"id": "6995530540854214664", "title": "React的使用图片：通过symbol引用svg的组件化的使用", "desc": "React的使用图片：通过symbol引用svg的组件化的使用 效果 Codepen：svg-in-react 可以通过名称快速选用图标。 原理 普通项目中，一般引入svg是通过webpack进行打包"}, {"id": "6988780780524666894", "title": "webpack 中引入 react", "desc": "导入基础包 react 要用 babel-loader 编译，需要导入 @babel/preset-react 需要在 webpack.config.js 里面配置如下： 需要在 babel.conf"}, {"id": "7005585995026399240", "title": "React表单验证-------formik+yup", "desc": "vue element-ui vant-ui vue vee-validate 组件库 纯原生 Input formik"}, {"id": "6844904098613952520", "title": "使用nodeJs开发自己的图床应用", "desc": "本文主要复盘笔者的nodeJS，通过一个线上的实战案例来总结node生态常用的技术点和最佳实践。后面会花费大概一个月的时间输出3篇以实战为主的nodeJs项目，本文是第一篇，主要介绍如何使用nodeJs开发一个图床应用。该项目对于测试和个人服务型网站非常实用，大家可以基于此扩展…"}, {"id": "6979062280893759496", "title": "从Demo开始进入React世界", "desc": "React React-Router Jest cra新建项目 首先，我们暂时不必直接使用webpack来自己搭建一个项目，因为这太过费时，我们的目的是先能写 你可以直接复制我上面的代码片段，去创建一"}, {"id": "6844903625634889741", "title": "Taro实践 - 快速开发【知乎】多端应用", "desc": "1. Taro 简介 Taro 是由凹凸实验室打造的一套遵循 React 语法规范的多端统一开发框架。 使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、App 端等）运行的代码。目前 Taro 支持编译出支…"}, {"id": "6976908817841799198", "title": "学习 React 第二节课：进阶", "desc": "作为学习 React 的第二节课，包含了：Refs、Context、HOC、Hooks 等进阶使用的讲解"}, {"id": "6919638401641611271", "title": "一文搞定 React 路由", "desc": "boolean 类型，对路径末尾斜杠的匹配。如果为 true，path 为 '/page1/' 将不能匹配 '/page1' 但可以匹配 '/page1/one'。；如下所示 如果路由 Route 外部包裹 Switch 时，路由匹配到对应的组件后，就不会继续渲染其他组件了。但…"}, {"id": "6920110573418086413", "title": "15分钟快速理解qiankun的js沙箱原理及其实现", "desc": "qiankun框架为了实现js隔离，提供了三种不同场景使用的沙箱，分别是 snapshotSandbox、proxySandbox、legacySandbox。 从名字上我们可以理解快照就是给你着一张相片，来记录你此刻的状态。qiankun的快照沙箱是基于diff来实现的，主要…"}, {"id": "6888677412280729613", "title": "如何利用AOP+IOC思想解构前端项目开发", "desc": "本文将通过 TypeClient 架构来阐述如何利用AOP+IOC思想来解构前端项目的开发。 首先声明，AOP+IOC思想的理解需要有一定的编程架构基础。目前，这两大思想使用的场景，基本都在nodejs端，在前端的实践非常少。我本着提供一种新的项目解构思路的想法，而非推翻社区庞…"}, {"id": "6977222726490521636", "title": "React学习第十天---React & Fiber（构建Fiber对象）（三）", "desc": "这是我参与更文挑战的第24天，活动详情查看： 更文挑战 前言 大家好我是小村儿，上一节我们实现了创建任务队列，添加任务，使用requestIdelCallbackapi利用浏览器空闲时间实现任务的调度"}, {"id": "6968777636801675301", "title": "React18，不远啦？", "desc": "在React前不久的一次PR #21488中，核心成员Brian Vaughn对React内一些API、以及内部flag作出调整。 其中最引人注目的改动是：React入口增加createRoot AP"}, {"id": "6844903497419194382", "title": "[译] React、Jest、Flow 和 Immutable.js 将使用 MIT 许可证", "desc": "下周，我们将根据 MIT 许可证重新授权我们的开源项目 React，Jest，Flow 和 Immutable.js。我们正在重新评估这些项目，因为 React 是 Web 生态上开源软件的基础，我们不希望以非技术原因阻碍进步。 这个决定是经过几周的失望和我们社区的犹疑而产生的…"}, {"id": "6844903922100862989", "title": "react + typescript 项目的定制化过程", "desc": "如果要使用 react 的话，对新手来说，首选脚手架大概就是使用由 facebook 官方出的脚手架 create-react-app 了（传送门 👉create-react-app中文文档）。 create-react-app 将 webpack 的配置，lint 的配置，…"}, {"id": "6969008166684246029", "title": "基于hooks api手写dva----useModel", "desc": "基本原理就是使用useContext创建全局状态，useReducer创建dispatch去更新state，主要对dispatch做了封装 组件中哪里需要就引入useModel"}, {"id": "6927150271118196749", "title": "React Hook 笔记", "desc": "本文用于记录自己学习和使用 React Hook 笔记。 Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。Hook 在 class 内部是不起作用的。但你可以使用它们来取代 class 。 …"}, {"id": "6932019702159917064", "title": "diff算法(妈妈再也不担心我的diff面试了)", "desc": "​ 视频课程的目的是为了快速掌握react源码运行的过程和react中的scheduler、reconciler、renderer、fiber等，并且详细debug源码和分析，过程更清晰。 ​ 在render阶段更新Fiber节点时，我们会调用reconcileChildFib…"}, {"id": "6998778029665157157", "title": "nextTick与setState的对比", "desc": "在现代前端框架中，最火的就是vue和react了。现代前端框架的流行极大的提高了前端开发的工程能力和效率上的提高以及解决复杂和通用问题时生态所提供的解决方案。vue和react都是通过数据驱动视图，那"}, {"id": "6995347758823505933", "title": "8月更文挑战 ｜Hook 之 useContext 使用", "desc": "了解useContext之前，可以先了解一下Context Context Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法 Context 主要应用场景"}, {"id": "6844903781813993486", "title": "【React深入】setState的执行机制", "desc": "以下几个问题是我们在实际开发中经常会遇到的场景，下面用几个简单的示例代码来还原一下。 3.更新时会把每个组件的更新合并，每个组件只会触发一次更新的生命周期。 由于源码比较复杂，就不贴在这里了，有兴趣的可以去github上clone一份然后按照下面的流程图去走一遍。 1.将set…"}, {"id": "6947573426076778533", "title": "使用hooks写React组件注意的5个地方", "desc": "Hook是React16.8开始新增的特性。虽然React官方文档已经作出了针对React hooks的相关概念的讲解，但是光看官方文档是很难将hooks使用好的，在编写hooks的过程中很容易跳进陷阱和错误。本文总结了5个不好的地方。 在函数组件中我们可以使用useState…"}, {"id": "6985362485725364237", "title": "一篇看懂位运算在 React 中的应用", "desc": "今天会聊什么是 Bitfield ，用于 BitField 来处理多状态，以及 BitField 在 React 项目中的应用的。"}, {"id": "6844904013595410440", "title": "让我们坐上 Hooks 的托马斯小火车", "desc": "在 React 16 中，除去 Fiber 架构外，Hooks 是最令人激动的一个特性，相比于 class component，Hooks 加持后的 function component 在写法与思路上都大有不同，很多时候显得更为简洁与清爽（熵更低，弱化生命周期的概念），同时解…"}, {"id": "6844903682358657031", "title": "三大图表库：ECharts 、 BizCharts 和 G2，该如何选择？", "desc": "最近阿里正式开源的BizCharts图表库基于React技术栈，各个图表项皆采用了组件的形式，贴近React的使用特点。同时BizCharts基于G2进行封装，Bizcharts也继承了G2相关特性。公司目前统一使用的是ECharts图表库，下文将对3种图表库进行分析比对。 成…"}, {"id": "6844903830484680717", "title": "脑壳疼的react组件可视化", "desc": "Storyshots: 快照测试。 Specs: 交互测试。 Notes: 在 story 中添加备注。 Info: 用于创建 css 框架手册。 Readme: 将 markdown 导入为 story。 actions: 显示事件的 event 对象。 Intl: 添加 l…"}, {"id": "6844904116687208462", "title": "精读《React Hooks 数据流》", "desc": "React Hooks 渐渐被国内前端团队所接受，但基于 Hooks 的数据流方案却还未固定，我们有 “100 种” 类似的选择，却各有利弊，让人难以取舍。 本周笔者就深入谈一谈对 Hooks 数据流的理解，相信读完文章后，可以从百花齐放的 Hooks 数据流方案中看到本质。 …"}, {"id": "6844903601660264462", "title": "拖拽组件：React DnD 的使用", "desc": "学习 React DnD 的最初原因是阅读《如何写一个拖拽日历组件》附的源码时，看不懂拖拽组件 React DnD 的相关代码，于是行动力极强地学习了React DnD这个组件。 DragDropContextProvider 与 DragDropContex 类似，用 Dra…"}, {"id": "6844903939092348936", "title": "【长文慎入】一文吃透  react  事件机制原理", "desc": "上个月有幸研究了 react 事件机制这个知识点，并且在公司内部把自己的理解进行了分享。现在趁还算热乎赶紧的整理下来，留住这个长脸的时刻。 主要分为4大块儿，主要是结合源码对 react 事件机制的原理 进行分析，希望可以让你对 react事件机制有更清晰的认识和理解。 当然肯…"}, {"id": "6932080364550619143", "title": "React 表单源码阅读笔记", "desc": "实际上广义上的表单并不是特别好界定，维基上讲表单是一系列带有空格的文档，用于输写或选择。更具体的，在网页中表单主要负责数据采集的功能，我们下文中所提到的表单都指后者。如下图展示的是 Google 个人资料中配置页面更改姓名的表单： 表单通过适当的 UI &#x26; 交互，将用…"}, {"id": "6844904024378982413", "title": "你真的知道 React Portal 吗？", "desc": "你知道 react portal 的前身今世么？这篇文章将会告诉你答案。 Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案。一个 portal 的典型用例是当父组件有 overflow: hidden 或 z-index 样式时，但你需要子组件…"}, {"id": "6988465501047357471", "title": "手写傻瓜式 React 全家桶之 Redux", "desc": "一、什么是 Redux **可预测：**实际上指的是纯函数（每个相同的输入，都会有固定输出，并且没有副作用）这个是由 reducer 来保证的，同时方便了测试 状态容器： 在 web 页面中，每个 D"}, {"id": "6948604603994751013", "title": "谈谈React Hooks 与Vue3.0 Function based API的区别？", "desc": "hi~ 豆皮粉儿. 又见面啦~ React Hooks 是 React16.8 引入的新特性，支持在类组件之外使用 state、生命周期等特性。 Vue Function-based API 是 Vue3.0 最重要的 RFC (Requests for Comments)，将…"}, {"id": "6971580192577830920", "title": "React学习第四天---Virtual DOM 及 Diff 算法（VirtualDOM转化成RealDOM）（三）", "desc": "这是我参与更文挑战的第8天 前面我们已经将virtualDOM转化为真实DOM了，但是这些真实DOM是没有任何属性的，接下来我们就为真实DOM添加属性 为真实DOM添加属性 分析： 这些属性全部存储在"}, {"id": "6968666544914038820", "title": "细节齐全的 SOA —— hooks 组件或可尝试", "desc": "SOA —— 面向服务架构 是一种组件封装方式，本质上是对 功能单元的拆分，这一点与传统组件只拆分视图和内部逻辑（无法高效调用外部状态逻辑）的方式不同 而 React 如果要想实现 SOA，就需要从 "}, {"id": "6844903991730503687", "title": "精读《Hooks 取数 - swr 源码》", "desc": "fetch 的兼容性已经足够好，足以替换包括 $.post 在内的各种取数封装。 原生用得久了，发现拓展性更好、支持 ssr 的同构取数方案也挺好，比如 isomorphic-fetch、axios。 对于数据驱动场景还是不够，数据流逐渐将取数封装起来，同时针对数据驱动状态变化…"}, {"id": "6991467672370151455", "title": "React 性能优化篇", "desc": "7.3.1 React 组件性能探寻 React Devtools （react中的性能分析工具）推荐 React v16.5.0+（开发模式） React Developer Tools V3.3."}, {"id": "6844903833764642830", "title": "从源码剖析useState的执行过程", "desc": "代码非常简单，点击button使count+3，count的值会显示在屏幕上。 一. 前置知识 1. 函数组件和类组件 我们来看一个简单的Greeting组件，它支持定义成类和函数两种性质。在使用它时，不用关心他是如何定义的。 如果 Greeting 是一个函数，React 需…"}, {"id": "6844903936353107982", "title": "useEffect Hook 是如何工作的", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 想象一下:你有一个非常好用的函数组件，然后有一天，咱们需要向它添加一个生命周期方法。 呃... 刚开始咱们可能会想怎么能解决这个问题，然后最后变成，通常的做法是将它转换成一个类。但有时候咱们就是要用函数方式，怎…"}, {"id": "6965747225154732069", "title": "React 组件性能优化最佳实践", "desc": "React 组件性能优化的核心是减少渲染真实 DOM 节点的频率，减少 Virtual DOM 比对的频率。 1. 组件卸载前进行清理操作 在组件中为 window 注册的全局事件，以及定时器，在组件"}, {"id": "6844903941528879118", "title": "React Hooks下的全局状态管理", "desc": "React Hooks 是 React 16.7.0-alpha 版本推出的新特性，旨在解决组件间共享状态逻辑的问题。 **useState: **允许在 function 组件中，声明和改变状态。在此之前，只有 class 组件可以。（useImmer） **useEffec…"}, {"id": "6844903647168430094", "title": "[译]如何使用React生命周期方法", "desc": "当 React 渲染一个组件的是你，首先进入该方法。 Note：componentWillMount()是唯一一个在render()之前调用的生命周期方法。因此是在服务端渲染中唯一被调用的方法。 可以在该方法中使用this.setState()但是不一定触发重新渲染。 当该方法…"}, {"id": "6931902782131666951", "title": "React Server Components到底行不行？", "desc": "前段时间 React 团队发布了一项用于解决 React 页面在多接口请求下的性能问题的解决方案 React Server Components。当然该方案目前还在草案阶段，官方也只是发了视频和一个示例 demo 来说明这个草案。 React Server Component是…"}, {"id": "6939443536651616293", "title": "带你从0到1实现一个 mini 版本的 react", "desc": "实现 createElement 方法。 实现 render 方法。 首先复习一些基础概念。如果你已经知道 react、JSX、DOM 元素是如何工作，可以跳过这一步。 以上代码就使用纯 javascript 实现了 react 的最简应用（前面3行代码）。 1. create…"}, {"id": "6844903585826897933", "title": "【译】React的8种条件渲染方法", "desc": "本文是译者第一次做完整的全篇翻译，主要目的是学习一下这类文章的写作风格，所以挑了一篇相对入门、由浅入深的文章，全篇采用直译，即使有时候觉得作者挺啰嗦的，也依然翻译了原文内容。 相较于Javascript，JSX是一个很好的扩展，它允许我们定义UI组件。但是，它不提供条件、循环表…"}, {"id": "6844903986487623687", "title": "精读《React Conf 2019 - Day1》", "desc": "React Conf 2019 在今年 10 月份举办，内容质量还是一如既往的高，如果想进一步学习前端或者 React，这个大会一定不能错过。 希望前端精读成为你学习成长路上的布道者，所以本期精读就介绍 React Conf 2019 - Day1 的相关内容。 总的来看，Re…"}, {"id": "6844903859937280014", "title": "剖析 React 源码：调度原理", "desc": "这是我的剖析 React 源码的第四篇文章，之前的文章都是具体剖析代码，但是觉得这种方式可能并不是太好。因此从这篇文章开始，我打算把在源码中学习到的内容单独写成一篇文章，这样对于读者来说可能更加的友好。 大家都知道 JS 和渲染引擎是一个互斥关系。如果 JS 在执行代码，那么渲…"}, {"id": "6844904163717939207", "title": "关于react结合redux使用，或许你还应该掌握这些（图文结合，悉心整理）", "desc": "前段时间小编委托组内小哥又给自己梳理了一遍react结合redux使用的知识点（因为懒，翻文档不如白嫖来的开心呀），主要涉及使用的注意事项和使用流程，涉及的中间件以及如何处理异步数据等。完后，小编觉得有必要对这次的知识点做一个系统的整理，造（wu）福(ren)大(zi)众(di…"}, {"id": "6966031128545361950", "title": "图文结合讲解React17、Vue2.0、Vue next Diff算法原理及实现", "desc": "讲述React17、Vue2.0、Vue3.0 virtual dom部分对于新旧节点的复用算法，也成diff算法。"}, {"id": "6844903589123457031", "title": "面试官: 你了解前端路由吗?", "desc": "前端路由是现代SPA应用必备的功能,每个现代前端框架都有对应的实现,例如vue-router、react-router。 我们不想探究vue-router或者react-router们的实现，因为不管是哪种路由无外乎用兼容性更好的hash实现或者是H5 History实现，与框…"}, {"id": "7002022468420370445", "title": "React组件三大核心属性 - Props", "desc": "props的介绍 当React遇到的元素是用户自定义的组件，它会将JSX属性作为单个对象传递给该组件，这个对象称之为“props”。"}, {"id": "6970961123335995406", "title": "2021年 React项目推荐的和应该放弃的技术方案", "desc": "很多人会在页面初始化时修改根字体大小，然后全部用rem布局，还自以为挺聪明，这是阿里给国内前端带来的恶性，看看阿里系产品在iPad上的糟糕表现，就知道这个方案有多么糟糕。"}, {"id": "6979955410736267278", "title": "SolidJS硬气的说：我比React还react", "desc": "大家好，我是卡颂。 最近刷推时，有个老哥经常出现在前端框架相关推文下。 我想：“老哥你哪位？” 一查，原来是个框架作者，作品叫SolidJS。 翻翻框架介绍，这句话成功吸引我的注意： 我琢磨您不会是R"}, {"id": "6930758273863778317", "title": "Hooks 邂逅 Mobx，代码变得更丝滑了", "desc": "React 16.8 正式推出 Hooks 至今已经两年多了，有些朋友却一直觉得这是个新技术，对上手使用 Hooks 仍然处于观望状态，即使大多数使用React 技术栈的公司，他们所开发的项目也是多数采用React.Component的形式。 还有些朋友想要使用 React H…"}, {"id": "7002414597768478751", "title": "【译】React DND（Drag and Drop for React）-教程", "desc": "本文在翻译过程中确保意思传达准确的前提下，会加入很多作者的个人解释（会在括号中写，像这样）和自己的一些吐槽，不喜欢的可以看原版 时隔半年，重新点开 React-dnd 官网来，是因为最近真的"}, {"id": "6895966927500345351", "title": "React Hook丨用好这9个钩子，所向披靡", "desc": "Hook 出来后，相信很多小伙伴都自己跃跃欲试，对于喜欢用react的，又喜欢Hook的，本篇文章将会与你一起玩转Hook。 useEffet 我们可以理解成它替换了componentDidMount, componentDidUpdate, componentWillUnmo…"}, {"id": "6973675487977537549", "title": "React 面试必知必会 Day8", "desc": "1. 你如何实现服务器端渲染或SSR？ React 已经具备了在 Nod e服务器上处理渲染的能力。有一个特殊版本的 DOM 渲染器，它与客户端的模式相同。"}, {"id": "6844904205564526600", "title": "阿姨，React源码好难懂，我不想努力了", "desc": "应届生小A：在学校用React + antd做过后台管理系统，熟悉React技术栈。 两年前端小B：公司技术栈是React，都用了一年了，我React贼六。 五年前端老C：带团队把公司的粪坑项目用React重构了。React对我来说就跟呼吸一样容易。 小A、小B、老C：要不学学…"}, {"id": "6844903679976275976", "title": "ES6、ES7、ES8特性一锅炖(ES6、ES7、ES8学习指南)", "desc": "ES全称ECMAScript，ECMAScript是ECMA制定的标准化脚本语言。目前JavaScript使用的ECMAScript版本为ECMAScript-262。 ECMAScript 标准建立在一些原有的技术上，最为著名的是 JavaScript (网景) 和 JScr…"}, {"id": "6997236325929713694", "title": "【青训营】- Redux · 极简教程", "desc": "前言: Redux : JS 应用的状态容器，提供可预测的状态管理, 当你有数据需要全局统一管理,并且渲染时, 你可以考虑她。 知识点: createStore 创建store reducer 初始化"}, {"id": "6952673382928220191", "title": "哇擦！他居然把 React 组件渲染到了命令行终端窗口里面", "desc": "也许你之前听说过前端组件代码可以运行在浏览器，运行在移动端 App 里面，甚至可以直接在各种设备当中，但你有没有见过: 前端组件直接跑在命令行窗口里面！"}, {"id": "7002905693825007652", "title": "深入了解react hook是怎么实现的", "desc": "hook从根本上来讲是封装状态和代码逻辑的一种简单方法。最初是在react中引入，并且已经被他框架接受，比如vue，svelte，甚至被封装为一个纯js库。hook的js设计模式需要对javascri"}, {"id": "7004350976706478116", "title": "Sentry For React 完整接入详解(2021 Sentry v21.8.x)前方高能预警！三万字，慎入！", "desc": "Sentry 的 React SDK 支持自动报告错误和异常。SDK 是 @sentry/browser 的包装器，增加了与 React 相关的功能。 @sentry/browser 中可用的所有方法"}, {"id": "6995777099004903461", "title": "从Vue2.0到React17——React路由入门(一)", "desc": "React作为一个MVVM框架，路由功能是必不可少的，回顾我们在使用Vue Router的过程中，最常用的一些功能是**路由页面的渲染**，**路由页面内容的添加**，**路由地址的配置**，**路由"}, {"id": "6995440094341496868", "title": "React 小册 ｜ 扬帆起航 基础语法", "desc": "> 注：本章节的 demo 都以`类组件 + TS`为例 等下一章 hook 章节后都为函数式组件 > UI 库 统一使用 `antd` https://ant.design/components/"}, {"id": "6844903924441284615", "title": "React路由鉴权", "desc": "上一篇文章中有同学提到路由鉴权，由于时间关系没有写，本文将针对这一特性对vue和react做专门说明，希望同学看了以后能够受益匪浅，对你的项目能够有所帮助，本文借鉴了很多大佬的文章篇幅也是比较长的。 单独项目中是希望根据登录人来看下这个人是不是有权限进入当前页面。虽然服务端做了…"}, {"id": "7001034167697801253", "title": " 前端单元测试-jest入门实践", "desc": "前言 单元测试是用来测试程序中一小块功能的，比如说一个函数、一个类。它能很显著地提高项目的代码质量，降低出现 Bug 的频率，并且也利于维护代码。 话虽如此，但是绝大多数人是不愿意去写单测的。。不过不"}, {"id": "6844903988073070606", "title": "35 道咱们必须要清楚的 React 面试题", "desc": "虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和。 类组件可以使用其他特性，如状态 state 和生命周期钩子。 当组件只是接收 pro…"}, {"id": "6844903881390964744", "title": "从头开始，彻底理解服务端渲染原理(8千字汇总长文)", "desc": "大家好，我是神三元，这一次，让我们来以React为例，把服务端渲染(Server Side Render，简称“SSR”)学个明明白白。 这一部分来简要实现一个React组件的SSR。 一. SSR vs CSR 废话不多说，直接起一个express服务器。 启动之后打开loc…"}]