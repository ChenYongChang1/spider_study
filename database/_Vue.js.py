[{"id": "6989531907075604510", "title": "vue中 高德\\百度 地图的引用", "desc": "vue中如何使用高德地图和百度地图： 1、官方js包的引入 2、全局变量的声明 3、地图的加载和使用"}, {"id": "6999160169938550820", "title": "一篇文章搞定Vue中的混入mixin！", "desc": "Vue-mixin(混入) 1.官方定义： 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选"}, {"id": "6899432348266283022", "title": "vue3 避坑指南：解决 dev 和 prod 坏境下逻辑不一致问题", "desc": "最近在开发 element3 的时候，遇到了一个问题，打包后的代码会报错，和在 dev 坏境下的代码行为不一致。 赶紧要到 demo，先跑了 dev 环境。嗯，没啥问题 然后又跑了 prod 坏境。 嗯，果然出现问题了 但是问题就发生在这里，我们通过上面的案例已经知道，组件实例…"}, {"id": "6923126521821560846", "title": "vue3 最佳实践", "desc": "以上是我认为 vue3 非常重要，也非常棒的特性。当然vue3还有很多新特性也没必要一一列举，感兴趣自己去读官网就好了。 这样看其实没什么问题，但是某一天需要复用一段逻辑时，就开始头疼了，因为你会发现一段完整的逻辑散落在 data、methods、watch、computed……"}, {"id": "6917483898582597639", "title": "基于 Vue 3.x 的 Form render", "desc": "我们在写一些常规后台页面的时候，避免不了是需要经常和表单打交道。所以可以想偷懒的小伙伴可能会考虑有没有办法不去做表单工程师?用代码解决重复的人肉工作，没错，我们可以通过 JSON Schema 来描述我们的表单信息，这比重复的写表单控件可方便多了。 但是 JSON Schema…"}, {"id": "6903797748106330126", "title": "Vue3新特性一览，快速掌握", "desc": "以及一些其他地方学习v3的一些学习记录与心得，如果有理解不到地方欢迎大家指正。 1. data的变化 在v3版本中将data的返回值进行了标准化，只接受返回Object的Function, 而在v2版本中同时支持返回Object和返回Object的Function。 2. mi…"}, {"id": "6844903695327445005", "title": "渔人和Rxjs的故事,这次一定教会你前端必会的Rxjs", "desc": "这篇文章可在我的 github 中查看，如果你觉得写的还可以，Please送上你宝贵的star. 写在最前面：你一定要坚持看完这个故事，看完你一定会懂Rxjs.千万不要觉得故事情节没有《盗墓笔记》好看而放弃。因为臣妾实在是只能把枯燥的程序写成这个很（挺）有（简）趣（陋）的故事了…"}, {"id": "6991102360323899406", "title": "实现Vue插件过程中遇到的问题", "desc": "场景介绍 最近做H5遇到了一个场景：每个页面需要展示一个带有标题的头部。一个实现思路是使用全局组件。假设我们创建一个名为TheHeader.vue的全局组件，伪代码如下： 创建好全局组件后，在每个页面"}, {"id": "6957162843468726280", "title": "是时候从vue2  迁移到 vue3了  （系列一）", "desc": "1.v-for 中的 Ref 数组 非兼容 在 Vue 2 中，在 v-for 里使用的 ref attribute 会用 ref 数组填充相应的 $refs property。当存在嵌套的 v-fo"}, {"id": "6981279655131086879", "title": "vue3和vue2如何写一个用函数控制组件开关的组件", "desc": "其中写了一个函数弹窗，但是vue2还好，vue3啊，翻死了官网文档都找不到。现在大家百度，得到的很多都是通过createApp控制写的。但是都没有做一件事，那么就是如果保证单例模式。但是实际上，通过翻"}, {"id": "6844904118494953480", "title": "Vue实现的聊天系统可线上访问了", "desc": "如果在使用中发现什么问题希望大家提出宝贵的意见哟。欢迎大家留下宝贵的意见。 上传文件都还没有完成。 webRTC相关使用可能不稳定。 由于代码优化不够加上水管服务器，第一次访问可能会比较慢请耐心等待。 如发现问题请告诉我哟。 好友之间聊天，支持问题、图片、表情、音视频通话以及白…"}, {"id": "6992513502942363684", "title": "vue修饰符(事件修饰符、v-model修饰符、键盘修饰符、自定义键盘修饰符)", "desc": "事件修饰符 .stop:阻止事件冒泡，相当于调用了 event.stopPropagation()方法 .prevent: 阻止默认行为，相当于调用了 event.preventDefault()方法"}, {"id": "6844903775665127437", "title": "用150行代码实现Vuex 80%的功能", "desc": "本文github仓库代码地址，欢迎star，谢谢。 从运行结果来看，运行正常，没有问题。接下来看看一步一步实现的过程: 一. 完成最简单的通过vuex定义全局变量，在任何一个页面可以通过this.$store.state.count可以直接使用 二. vuex中的getter方…"}, {"id": "6844903581405937678", "title": "你应该要知道的Vue.js", "desc": "支持开发期组件的热重载。 客户端激活， Vue 在浏览器端接管由服务端发送的静态 HTML，使其变为由 Vue 管理的动态 DOM，为确保混合成功，客户端与服务器端需要共享同一套数据。在服务端，可以在渲染之前获取数据，填充到 stroe 里，这样，在客户端挂载到 DOM 之前，…"}, {"id": "7001324126648401934", "title": ".env和.env.[mode]和.env.[mode].local的优先级", "desc": "对于vue-cli项目的环境变量配置文件，如果它们中有定义重名的变量，则取值优先级由高到低如下： .env.[mode].local 文件中的定义 .env.[mode] 文件中的定义 .env.lo"}, {"id": "6997792097084375054", "title": "Vue中v-for时为什么要绑定key？", "desc": "我们都知道，Vue很大的一个特点就是双向数据绑定，数据一旦改变，那么页面就渲染新的数据呈现在页面上。 但是对于用v-for渲染的列表数据来说，数据量可能一般很庞大，而且我们经常还要对这个数据进行一些增"}, {"id": "7003170507335925797", "title": "vue 手写文件上传", "desc": "1 文件上传简单版 1 input type=\"file\" https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file 2"}, {"id": "6993235655446757383", "title": "浅谈Vue数据劫持", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 Hello 大家好，我是vike,今天我们一起来看看Vue2中数据劫持"}, {"id": "6997695745398669348", "title": "Vue3.0源码解析「reactive」篇 — 1.包概述以及全局变量", "desc": "包概述 reactive 这个包在 vue 内部被嵌入到vue的渲染器中(@vue/runtime-dom)，也可以单独抽离使用。 下方为整个reactive的文件结构，忽略掉 _tests_ 测试文"}, {"id": "6844904164812652551", "title": "十分钟快速上手NutUI", "desc": "当然了，最后这个组件库还应该有持续的更新和维护。我们找了很多组件进行分析测评。先来看一下这一期关于 NutUI 的上手结果。 NutUI 从2017年开始发版，所有组件均是从京东的业务中抽离出来，然后不断整合修复，最终发展成型。专业的标准设计稿保证一致性，优秀的组件自动化测试和…"}, {"id": "6981626251236605989", "title": "elementUI级联动态加载，编辑时回显问题", "desc": "编辑表格数据时，有个级联数据需要回显...父组件拿到后端返回数据，调用子组件中setAreaShow方法"}, {"id": "6941177732810309663", "title": "Vue3 登录注册模态框 ｜项目复盘", "desc": "而这段时间内都是在学习 Vue 3.0 且也完全重构了该项目，记录学习下重构的过程与思考。 学了就要用。本次是在学习 Vue3 后就在项目中全面使用，其中也碰到不少需要规避的坑，也尝试着阅读部分源码，收获满满😁"}, {"id": "6844903741355753479", "title": "vue生命周期", "desc": "自然界的万事万物都会有一个生命周期，比如人，生老病死，比如石头，沉淀风化，最后成为泥土。 生，开始，从未知到存在。我们可以把beforeCreate()，看作一个组件生命的开始 但是，在降临之前，是不是要找一个合适的地点，el挂载点就显得非常重要了，所以在created()之后…"}, {"id": "6844903576020451342", "title": "Vue组件开发小结", "desc": "那么如何达到这样的效果呢，我们可以分几步来循序渐进地完成。 业务组件的颗粒度最大可以为一个feature，一个feature就是一个可以独立上线特性，例如文章的评论点赞功能。我们可以想象有一个开关，打开就有这个feature，关闭就没有，且不会造成联动的影响。 Vue的组件基本…"}, {"id": "6844903783009353736", "title": "浅析Vue 中 $nextTick 机制", "desc": "因为Vue是异步驱动视图更新数据的，即当我们在事件中修改数据时，视图并不会即时的更新，而是等在同一事件循环的所有数据变化完成后，再进行视图更新。类似于Event Loop事件循环机制。 在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后DOM。…"}, {"id": "6844904082956615688", "title": "Vue 父子组件通信", "desc": "本篇文章将要总结的是Vue中父子组件之间的通信方式。 那在vue中父子组件之间的关系是怎么构成的呢，或者说哪个组件可以称为是父组件，哪个组件又可以称为是子组件呢。 在我的理解中，父子组件的关系构成也比较简单。 使用vue-cli工具构建的项目中，我们经常会在一个组件中注册引用另…"}, {"id": "6898512833865220104", "title": "技术提炼｜盘点那些Vue项目中的优秀实践-PC控制台篇", "desc": "之前一直忙于公司业务扩展后的填需求，现在终于有机会好好总结下在项目中一些优秀的实践，希望也会对你的开发有所启发。 对于一个控制台项目，他总有些登录后就不会再修改的部分，比如侧边菜单栏、顶部底部导航栏，在Vue中，我们可以通过嵌套路由来实现。这样做，在页面切换时，用户体验会更加平…"}, {"id": "6984971376830464031", "title": "Vue概述及基本使用", "desc": "1.vue概述 尤雨溪：Vue.js的创建者 2014年2月，Vue.js正式发布 2015年10月27日，正式发布1.0.0 2016年4月27日，发布2.0的预览版本 1.1. Vue 是什么？ "}, {"id": "6960223873841250318", "title": "第04期 调整界面布局", "desc": "1、调整项目主题色 /src/css/quasar.variables.scss 文件中，将主题色修改为 #086491 看效果： 在这里需要说明下，Quasar框架的特点就是，在VSCode中修改了"}, {"id": "6899267681959018510", "title": "JS树结构操作:查找、遍历、筛选、树结构和列表结构相互转换", "desc": "经常有同学问树结构的相关操作，也写了很多次，在这里总结一下JS树形结构一些操作的实现思路，并给出了简洁易懂的代码实现。本文内容结构大概如下：一、遍历树结构1.树结构介绍JS中树结构一般是类似于这样的结"}, {"id": "6844903583536660494", "title": "[译] 使用 Web3 和 Vue.js 来创建你的第一个以太坊 dAPP（第二部分）", "desc": "欢迎回到这个很棒的系列教程的第二部分，在个教程中我们要亲身实践，创建我们的第一个去中心化应用（decentralized application）。在第二部分中，我们将介绍 VueJS 和 VueX 的核心概念以及 web3js 与 metamask 的交互。 如果你错过了第一…"}, {"id": "6844903518378147853", "title": "Webapck+Vue多页面商城模板", "desc": "Vue官方提供了Vue-Cli脚手架，集成了Webpack的环境，上手开发和构建非常方便。但Vue-cli适用于单页应用，而平常做的项目中往往都是多页的，网上看了很多Webpack多页面的配置，中间遇到很多坑，自己看文档，对着做出了这个多页面的商城模板。 项目开源在Github…"}, {"id": "6997409644930924558", "title": "Vue3实现列表循环", "desc": "今天小编和大家一起在Vue的路上探索，要实现的功能是这样的。现将默认 数组内的渲染到页面上，然后点击按钮之后，将文本框内的数据添加到列表上"}, {"id": "6997364299433771039", "title": "vue 2.0 理解 watch", "desc": "要理解watch 的实现过程，先看下watch 的几种使用方式 一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()"}, {"id": "6994813892728160270", "title": "细读Vue2.6.14 Core 源码(2): After Vue", "desc": "细读 Vue2.6.14 Core 源码(2): After Vue 介绍 Vue 构造函数声明之后做的处理。"}, {"id": "6844904000744079374", "title": "Vue 中 filter 与 computed 的区别与用法", "desc": "最近遇到一个很不错的候选人，经验丰富，有技术亮点，但在一些细枝末节问题上没有回答的很好，最终还是被刷了。面试过程中有一个问题我印象特别深刻：Vue 中filter与computed属性的区别，可惜候选人在现场没有回答上，这里总结一下： 1. 触发时机不同 computed 属性…"}, {"id": "6916382183788085255", "title": "七日打卡-Vue中$nextTick()用法解析", "desc": "这段代码并不难理解，但是控制台回抛出一个'innerHTML' of null的错误，因为此时页面并未完成渲染，它并没有获取到div元素，这里涉及到一个Vue的重要概念：异步更新队列。 Vue在观察到数据变化时并不是直接更新DOM，而是开启一个队列，并缓冲同一事件循环中发生的所…"}, {"id": "6984237768973123592", "title": "【Vue】对比两个form表单，并将有差异的项标成红色", "desc": "页面代码如下： 表单内容定义如下： 注意：此处的diffStyle不能单独定义，然后直接绑定到页面的class中，因为对比完以后，如果存在有差异的项，在改变样式时会全局修改而不只是修改有差异的那一项；"}, {"id": "6844903953767874574", "title": "在vue中实现tab标签切换页面功能", "desc": "在导航条上，默认打开一个页面（列表页面），当点击列表项，打开一个详情页面，需添加到标签导航中，同时显示当前标签的页面内容，继续点击列表项，添加标签到导航中，依次类推，效果如上图。 在一些后台系统中，见过类似的功能，是利用 iframe标签添加链接的方式，实现这个功能。那么在vu…"}, {"id": "6844904040816476174", "title": "Vue.js 中的片段", "desc": "在本文中将会给你介绍一个令人兴奋的概念，它将帮你精通 Vue.js 。 为了实现 Web 上的可访问性，你需要设计每个人都可以使用的页面、工具和技术。 这里的“所有人”包括有着听觉、认知、神经、身体、语言和视觉障碍的人。 为了使诸如屏幕阅读器之类的辅助技术能够解释网页和应用程序…"}, {"id": "6844903826198102030", "title": "[深入探索] VueJS Scoped CSS 实现原理", "desc": "使用VueJS进行应用开发, 脱离不了对应用间的模块进行拆分, 将大块界面拆解为组件的过程. 我们可以很方便的在单文件中使用<template>块维护组件的视图, 使用<script>维护组件的逻辑部分, 使用<style>维护组件的样式. 在我们编写 VueJS 组件样式时,…"}, {"id": "6975047761112596494", "title": "SPA(单页面应用)", "desc": "1.什么是单页面应用 整个程序只有一个完整的.html文件,其他所谓的页面,其实仅仅是组件而已 2.普通多页面应用 VS 单页面应用 普通多页面应用 单页面应用 请求次数 每切换一次页面,都要重新请求"}, {"id": "6992913441816084493", "title": "如何理解Vue中的修饰符.sync", "desc": "1.几个vue中比较重要的修饰符: .stop , .prevent , keypress.enter , .sync @click.stop = \"xxx\" @click.prevent=\"xxx\""}, {"id": "6881640108634669063", "title": "现场教学，优雅地处理基于 Vue CLI 项目中的 async await 异常", "desc": "使用 errorCaptured 来调用 async 函数。 使用 plugin 或 loader 在打包的时候统一包裹 try catch。 相比较这两者，显然后者更好，因为它甚至连 errorCaptured 都不需要写。但是，实际中，使用 loader 并不是这么简单，例…"}, {"id": "6844904116532019214", "title": "vue-loading插件开发+npm部署", "desc": "作为一个开发萌新，一直秉承着轮子的搬运工，时而感叹着搬运真爽原则，哈哈哈哈，见笑了各位。但是，摸着良心说，我内心对那些开发插件的大牛，有着一颗赤诚的敬畏之心。很羡慕他们有能力能造福大家，省去了大部分开发的时间。 所以我决定也要学习着开发一个属于自己的插件，并且发布到npm可以造…"}, {"id": "6914125427770556423", "title": "[动态表单 jformer] 实现表单数据获取和表单提交", "desc": "jformer是一个动态表单呈现组件，只需要传递json数据就可以显示出界面和功能，使用jformer实现表单数据获取和提交有两种方法方法1数据从动态表单组件外部读取，并将结果赋给表单的v-model"}, {"id": "6844903700591280141", "title": "vue router路由自定义后退事件，并通知下个路由为后退", "desc": "开发过程中发现router和history都不会提供后退事件标识，并且很多时候我们并不想要后退历史，而是后退页面层级。 并且在页面跳转过程中如果使用go(-1)，back()这种事件还容易出现循环后退这种场景。如：z->a->b->a；在这样情况如果在a，b中使用后退，将会按照…"}, {"id": "6844903590734086157", "title": "用Vue.js开发原生应用选择Weex还是NativeScript?", "desc": "Vue.js是一个很好的框架！它有一个友好的学习曲线，结合了最好的React的组件方法和Angular的模板。尽管如此，Vue.js仍然有一个限制，它还不能像React的React Native，Vue.js目前还没有稳定、广泛采用的方法来开发原生应用程序。 不过，这肯定会改变…"}, {"id": "6844903575668129800", "title": "由屎色自行车棚引发的思考", "desc": "有一天，我走在路上，看到了一个屎色的自行车棚。车棚颜色饱满，让我不禁停下了脚步。在阳光的照射下甚至感觉闻道了什么莫名的味道。 我对着大爷笑了笑作为回应，然后转身走开。 简短的回答是：你不需要关心这个问题。 长一点的解释是：拥有建造一个自行车棚的能力并不代表你就要阻止别人建造一个…"}, {"id": "6844904038840926215", "title": "如何用上webpack/gulp/rollup，搭建一个基于Vue的UI库脚手架", "desc": "出于开发调试方便的考虑，现在直接把包打进了node_modules中去，正式使用时按需修改build/const.js中LIB_ROOT的值。 秘密藏在ouput配置项里，webpack既可以打包一般的网站应用，也可以打包出支持多种环境下使用的类库。libraryTarget声…"}, {"id": "6844904104167243789", "title": "Vue命令式弹窗组件如何实现？我很好奇😯😯😯", "desc": "想必大家都用一些前端框架中诸如MessaBox或者Toast的组件，此类组件往往不需要我们显式的在使用组件的位置编写布局代码就能展示全局的弹框类组件。 你有没有好奇这个效果是怎么实现的呢，接下来我们就来实现一下类似的Loading加载中效果。 将div标签添加到body中。 L…"}, {"id": "6844903504922837006", "title": "深入认识vue-cli：能做的不仅仅是初始化vue工程", "desc": "在讨论区有许多类似的问题： “vue-cli当中如何配置sass？” “vue-cli中如何修改devServer的端口？” “vue-cli中发现项目跑不起来” …… vue-cli说：“这锅我不背。”"}, {"id": "6844904125990174727", "title": "Vue组件嵌套时生命周期函数触发顺序是什么？", "desc": "使用过 Vue 的大家，对于生命周期一定都很熟悉，在官方文档一开始，就给我们介绍了 Vue 的生命周期有哪些，是怎么样的顺序。这个难不倒大家。 如果有的话，就让我们一起动动手来确认下这个简单的问题吧。 beforeCreate：在实例初始化之后，数据观测 (data obser…"}, {"id": "6952521164430245919", "title": "vue的组件化的理解之单独拆分的组件&组件的封装（以el-table组件的二次封装举例）", "desc": "什么是组件化组件化是一种思想，就是拆分的意思，通俗而言，就是大而化小（没有小而化了）、方便管理。比如咱们中国地大物博，人口众多不好管理，所以就拆分成许多省、直辖市、自治区，方便管理。写代码也是一样，如"}, {"id": "6854573210994901005", "title": "怎么安装Vue Devtools调试工具插件？", "desc": "Vue Devtools是Vue官方推出的浏览器插件，可以算是Vue开发调试神器，它可以让你能够在浏览器实时的编辑数据并立即看到其反映出来的变化，让你告别console大法。非常好用，谁用谁知道，Vue开发必备，强烈推荐！ 因为众所周知的原因，Google Chrome商店无法…"}, {"id": "6844903621168283655", "title": "用proxy实现一个更优雅的vue", "desc": "其实不是真正的数组方法，而是被修改过的,这些都是因为 Object.defineProperty() 提供的能力有限，无法做到完美。 这样，我们就实现初步的双向绑定了，整个代码大概只有50行。其实还可以更少， 但是我觉得实现这些，刚好可以不多不少帮我我们理解vue的本质。 本文…"}, {"id": "6922616517586583560", "title": "vue项目中，下载pdfjs压缩包,将pfdjs作为静态资源的方式使用pdfjs", "desc": "1. 下载pdfjs的压缩包，并根据需求更改源代码，删除不必要的部分 2. 在组件中测试： 3. 遇到报错信息：file origin does not match viewer’s 4. 遇到报错信息：Uncaught SyntaxError: Unexpected toke…"}, {"id": "6844903577152913416", "title": "前端框架 Quasar-Framework 简介", "desc": "Quasar允许开发者在只写一次代码的情况下发布到多个平台 website, PWA ,Mobile App 和 Electron App 在使用Quasar的时候, 你甚至不需要Hammerjs, Momentjs, 或者Bootstrap, Quasar框架内包含了已经这些…"}, {"id": "6844904135343472648", "title": "Vue3.0 Beta笔记（侧重Performance提升原因和Composition API）", "desc": "昨晚（北京时间2020年4月22日），Vue作者Evan You（尤雨溪）在前端圈的B站直播间分享了关于'Vue3.0 Beta'的一些新的特性和进展。（在此附附上掘金录播链接：https://juejin.im/e/vue-3） 本文，是个人记录的一些笔记，更关注与侧重Per…"}, {"id": "6844903906053455879", "title": "基于 QWebChannel 的前端通信方案", "desc": "最近笔者在工作中接触了一些基于 Qt 桌面端混合应用的开发。本文将结合自身在开发中的一些经历，将从前端的角度探讨 QWebChannel 在 client 端实例化的本质，以及如何将 QWebChannel 集成到 Vue.js 等类似前端框架中。 你首先需要能够充分理解 JS…"}, {"id": "6844903614096343047", "title": "为什么defineProperty不能检测到数组长度的“变化”", "desc": "区别我们先讲完属性类型后再来看。 [[Configurable]] 字面理解是表示属性是否可配置——能否修改属性；能否通过delete删除属性；能否把属性修改为访问器属性。 [[Enumerable]]能否通过for-in循环返回该属性。 第1、第2种对于属性的赋值是一样的，不…"}, {"id": "6844904185100664840", "title": "初探 Quasar", "desc": "偶然在 v2ex 看到一个关于 electron-vue boilerplate 的帖子，评论区有人推荐了 quasar 这个框架，去官网看了看，一套代码可以同时搞 SPA，PWA，BEX，SSR，Hybrid Mobile App 和 Multi-platform Deskt…"}, {"id": "6844903508785758215", "title": "【译】vue 自定义指令的魅力", "desc": "在你初次接触一个新的Javascript框架时，会像第一次进糖果店的孩子一样。给啥拿啥，而更直接点，有些东西可以让你更容易成为一个开发者。不可避免的是，我们在用框架时都会有一个同感，就是总有些场景是框架不能帮我们完成的。 Vue框架的漂亮之处在于它的功能非常强大，虽然这个框架的…"}, {"id": "6996283865836814350", "title": "细读Vue2.6.14 Core 源码(3): initGlobalAPI", "desc": "细读Vue2.6.14 Core 源码(3): initGlobalAPI initGlobalAPI 函数内部详解。"}, {"id": "6856649733290377224", "title": "试着为vue项目添加单元测试（一）", "desc": "模拟用户操作，先于用户发现问题。 让我们看看上面代码中这个wrapper的dom，方便更好的理解。 本文仅代码个人观点，若有写的不合适的地方，欢迎批评指正。"}, {"id": "6905914393926565901", "title": "Vue3源码解析（computed-计算属性）", "desc": "在Vue2中我们已经对计算属性了解的很清楚了，在Vue3中提供了一个computed的函数作为计算属性的API,下面我们来通过源码的角度去分析计算属性的运行流程。 在最开始使用函数重载的方式允许computed函数接受两种类型的参数：第一种是一个getter函数, 第二种是一个…"}, {"id": "6981063118034042888", "title": "Vue全家桶 & 原理 router 和vuex源码解析", "desc": "Vue全家桶 & 原理 vue-router vuex [vue-router源码](\\1. vue-router 2. vuex 3. vue-router源码 4. vuex源码) [vuex源码"}, {"id": "6990237380372332551", "title": "vue实现v-model", "desc": "为什么使用v-model? v-model作为双向绑定指令也是vue两大核心功能之一，使用非常方便，提高前端开发效率。在view层，model层相互需要数据交互，即可使用v-model。 v-mode"}, {"id": "6844903764873199630", "title": "element ScrollBar滚动组件源码深入分析", "desc": "scrollbar组件根目录下包括index.js文件和src文件夹，index.js是用来注册Vue插件的地方，没什么好说的，不了解的童鞋可以看一下Vue官方文档中的 插件，src目录下的内容才是scrollbar组件的核心代码，其入口文件是main.js。 在开始分析源码之…"}, {"id": "6967268904968126478", "title": "Vue 之 父子组件通信与事件触发（最全实用总结）", "desc": "Vue中最基础的就是组件，包括了父子组件传参，父子组件事件调用触发等内容，本文几乎囊括了Vue中父子组件之间大部分的操作，我们在程序开发过程中对于此部分内容基本上是可以游刃有余了。各位 加油！"}, {"id": "6993618279675723806", "title": "第四讲 检索模型-前端开发-Vue高阶版", "desc": "1、回顾 在 Vue 高阶的版本中，我们已经开发了首页的搜索功能和新闻推荐功能，接下来就是完善搜索了，原本的搜索功能只包含模糊查询，因此我们还要再添加多两种搜索模式：全文索引和自定义分词查询，其中，自"}, {"id": "6896271820052234247", "title": "蒲公英 · JELLY技术周刊 Vol.30: 此路不通？Vue 3 新提案 Ref-sugar", "desc": "造轮子是程序猿前进的基本动力，文本编辑器更是很多程序猿都尝试挑战过的关卡，本文以作者视角阐述了富文本编辑器的演化历程，从 UEditor、CKEditor 开始，从技术角度揭示其中内涵，并将其分为了 3 个阶段，如果你正在富文本编辑器的坑内，非常推荐深入了解一下。 最近 Vue…"}, {"id": "6844904003759767565", "title": "vue核心原理学习", "desc": "最近想深入了解一下vue.js（后面简称vue）的核心原理，无意中看到了一个用于学习vue原理的项目。在深入了解之后，发现它短小精悍，对于渐进式地了解vue的核心原理的实现大有帮助，于是乎就正式开始了对它探索之旅。 概念代表着人类意识上的共识。所以，要想通过沟通交流来产生一些成…"}, {"id": "6844903714726084621", "title": "用Vue开发仿旅游站webapp项目总结 （下）", "desc": "接触vue不久的朋友应该会有收获。此项目也才是萌新做的第二个Vue项目，使用了脚手架工具（vue-cli2.x非3），前辈老手们有时间看的话，有写得不好的地方还请多多指导！~ 前提假设，在脚手架中，我们跟路由引入全局的方法一致去在全局中引入Vuex。创建一个文件夹store，在…"}, {"id": "6885587863720132615", "title": "CSS BEM & Vue Scoped & Vue CSS Module 食用指南", "desc": "昨天在群里看到大家对CSS BEM和CSSmodule的讨论，激起了我的好奇心，我也想通过这篇文章向更多人科普一下CSS BEM / CSS Module / scoped 在代码中到底是个啥，他们究竟在做些什么。 首先我们需要了解这句话 —— CSS的影响是全局的。 但是更多…"}, {"id": "6844903635042697229", "title": "vue-cli配置环境变量", "desc": "通常会有测试服务器和正式服务器环境之分,我们请求的域名也得区分,所以通过proces.env.NODE_ENV来区分环境变量,通过这个能够全局访问的参数,我们可以处理很多需要环境处理不同的操作. 上面的process.env.NODE_ENV是vue-cli默认配置的,有时候我…"}, {"id": "6960214322328895495", "title": "第02期 创建项目环境", "desc": "1、开头 Quasar的官网地址：https://quasar.dev/ 我也找到了中文网站:http://www.quasarchs.com/ 对于英文不太好的同学，可以直接看中文网站。 首先来看如"}, {"id": "6904599922206179336", "title": "[element-ui源码]element-ui有哪些内置的directives?", "desc": "1.回顾directives基础(1)钩子函数一个指令定义对象可以提供如下几个钩子函数：bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。inserted：被绑定元素"}, {"id": "6933404758673883150", "title": "ElementUI表格分页组件封装", "desc": "模板中写的话，如果业务表格很多，template不够简洁，而且模板列也不能很好的做到复用。所以考虑到使用columns来动态渲染配置列。 下面都以EleTable来命名封装的Table组件。 1. Table属性 与el-table属性保持一致，通过v-bind=\"$attrs…"}, {"id": "6904662623619547144", "title": "我是如何在vue+element-ui的项目中封装dialog组件", "desc": "由于 Vue 基于组件化的设计，得益于这个思想，我们在 Vue 的项目中可以通过封装组件提高代码的复用性。根据我目前的使用心得，知道 Vue 拆分组件至少有两个优点： 1、代码复用。2、代码拆分 上述代码存在的问题非常多，首先当我们的弹窗越来越多的时候，我们会发现此时需要定义越…"}, {"id": "6844904062240948231", "title": "字节跳动面试官：请说一下vuex工作原理（重点就几行代码而已啦）", "desc": "不知为何掘金的文章最近都流行以 \"字节跳动面试官\" 作为开头，不蹭一波都不好意思说逛过掘金了。23333 最近是真到了面试的季节，那么就说一下 Vuex 的源码吧。看完你会发现，Vue和Vuex的实现原理主要就那么几行代码。 这里无非就是劫持了对象的get和set方法。在所代理…"}, {"id": "6968670953836380196", "title": "Electron+Vue3 MAC 版日历开发记录(1)", "desc": "在工作之余，写一个基于 Electron + Vue 3 + Vite，边学边开发一个 M ac 版日历📅️。"}, {"id": "6844903773089824781", "title": "Vue经典开源项目汇总", "desc": "Vue.js（读音 /vjuː/, 类似于 view）是一套用于构建用户界面的渐进式框架，主要用于快速的构建前端界面，与其它大型的前端框架不同，Vue被设计为可以自底向上逐层应用。 相比Angular.js来说，Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项…"}, {"id": "6913855965792043021", "title": "Vue3 Compiler 优化细节，如何手写高性能渲染函数", "desc": "Vue3 的 Compiler 与 runtime 紧密合作，充分利用编译时信息，使得性能得到了极大的提升。本文的目的告诉你 Vue3 的 Compiler 到底做了哪些优化，以及一些你可能希望知道的优化细节，在这个基础上我们试着总结出一套手写优化模式的高性能渲染函数的方法，这…"}, {"id": "6844903822809104392", "title": "【译PPT/必读】尤雨溪：Vue 3.0的设计原则", "desc": "2019年11月11号在Vue Toronto 2019会议上，@尤雨溪做了关于《Design Principles of Vue 3.0》的分享。 本PPT作者@尤雨溪，翻译作者：黑叔666。 译文：尽管Vue可以确保组件树级别的更新最少，但它仍然是每个组件实例中的完全dif…"}, {"id": "6983617884425551879", "title": "vue 实现跑马灯效果(无缝滚动)", "desc": "vue实现的一个跑马灯(无缝滚动)组件。支持图片、文字、左右滚动和滚动速度调节。 项目上用到一个跑马灯的组件（支持文字、图片的无缝滚动），没有找到开源的合适的组件，索性自己实现一个。"}, {"id": "6844904093429792782", "title": "12 种使用 Vue 的最佳做法", "desc": "随着 VueJS 的使用越来越广泛，出现了几种最佳实践并逐渐成为标准。在本文中，主要分享在平时开发中一些有用资源和技巧，废话少说，我们开始吧。 在需要操纵数据时，将key属性与v-for指令一起使用可以让程序保持恒定且可预测。 这是很有必要的，这样Vue就可以跟踪组件状态，并对…"}, {"id": "6989500697246957604", "title": "vite+vue3+ts eslint 不生效的(终极解决办法)", "desc": "本人之前试了好多方法都不行，最后这个方法可以让eslint生效了。。。。少啰嗦看东西。。。。。。。。"}, {"id": "6844904032868253710", "title": "蘑菇街PC首页瀑布流实践", "desc": "瀑布流， 又称瀑布流式布局，是比较流行的一种网站页面布局。视觉表现为宽度相等高度不定的元素组成的参差不齐的多栏布局，随着页面向下滚动，新的元素附加到最短的一列而不断向下加载。 ​瀑布流本质上就是寻找各列之中高度最小的一列，并将新的元素添加到该列后面，只要有新的元素需要排列，就…"}, {"id": "7002055362341765134", "title": "【VUE】动画封装使用说明", "desc": "动画封装：如果部分效果在页面里应用较多，可以对该类动画进行自定义封装，让代码可复用，以方便日后调用。"}, {"id": "6994463434817404965", "title": "通过调试Vite解决动态配置问题", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 背景 按照vue3文档使用Vite模板的方式初始化了一个项目，但在配置动态配置项时发现不生效，于是展开了一次深入浅出的问题调试之旅。"}, {"id": "6844904195825336334", "title": "好消息，Vue3官方文档出中文版的啦！", "desc": "咦奇怪，我记得以前好像没有这个选项的呀。赶紧点开看看有没有中文： 太棒了！还是尤大对咱好，感动得我热泪盈眶，虽然有可能压根就不是他翻译的。 映入眼帘的就是这么一段标题，把不该翻译的都给翻译了，一度让我怀疑是不是用谷歌翻译的。 叫组合式API还真有点不太习惯，还有把RFC变成征求…"}, {"id": "6844903589278646285", "title": "面试题：你能写一个Vue的双向数据绑定吗？", "desc": "Vue的双向数据绑定的原理相信大家也都十分了解了，主要是通过Object对象的defineProperty属性，重写data的set和get函数来实现的,这里对原理不做过多描述，主要还是来实现一个实例。为了使代码更加的清晰，这里只会实现最基本的内容，主要实现v-model，v-…"}, {"id": "6937120983765483528", "title": "手写Vue2.0源码（三）-初始渲染原理｜技术点评 ", "desc": "前言 今天是个特别的日子 祝各位女神女神节快乐哈 封面我就放一张杀殿的帅照表达我的祝福 哈哈 此篇主要手写 Vue2.0 源码-初始渲染原理 上一篇咱们主要介绍了 Vue 模板编译原理"}, {"id": "6918672538646102029", "title": "Vue3+Ts+Vite购物车实战", "desc": "这是一篇实战经验分享文章，其中的一些具体的功能点为了简化就前端实现了，没有后端支持，主要目的是学习Vue3+Typescript的环境下结合Vuex@4.x以及Vue-Router@4.x的开发。大致需求是模拟实现购物车功能，功能比较简单，但还是当作一些简化版的项目来进行开发的…"}, {"id": "6844903892921106445", "title": "仿肯德基宅急送App-Vue实战", "desc": "Vue学习有一段时间了，就想着用Vue来写个项目练练手，弄了半个月，到今天为止也算勉强能看了。 购物车列表的显示和隐藏以及清空按钮是通过数据fold来决定的，购物车列表是通过计算属性listshow来实现，清空按钮也是通过设置count属性来实现，这样都达到了不用操作dom就可…"}, {"id": "6996962803416481823", "title": "vue入门：router路由简介与使用", "desc": "本教程为入门教程，如有错误，请各位前端大佬指出。 1.什么是路由  Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。路由实际"}, {"id": "6999797825294827528", "title": "人类高质量vue学习笔记（三）", "desc": "我们登录系统的后台，发现有左侧的菜单栏、头部的管理员信息、中间的数据信息、底部的友情链接等，我们可以把这些不同的页面布局看成一个个的组件，然后像拼积木一样把他们拼起来，这些组件就构成了一个完整的页面。"}, {"id": "6993500668891758605", "title": "vue3 初始化流程源码学习", "desc": "前言 准备一个demo 这段代码中的 createApp 和 mount 两个函数就可以完成 vue 的初始化流程，从这里也能看到分成了两个部分: 一个是创建 app 实例，一个是对这个实例进行挂载。"}, {"id": "6936061897892429855", "title": "vue2.x知识汇总，收藏给自己看。", "desc": "computed是响应式的，methods并非响应式。 computed是带缓存的，只有依赖数据发生改变，才会重新进行计算，而methods里的函数在每次调用时都要执行。 如果声明的计算属性计算量非常大的时候，而且访问量次数非常多，改变的时机却很小，那就需要用到computed…"}, {"id": "6844903715355230222", "title": "React中 `锁定`this的N种‘facade pattern’模式", "desc": "由于本文是主要介绍React中锁定this的N种方法，不会过多的介绍this多面性的原因，相信大家应该都知道词法作用域和动态作用域。并且也知道在es6之前我们依然有很多种方式，去锁定this的指向（call, apply, bind）。接下来我们也会结合这些方式，在React中…"}, {"id": "6949135071853215751", "title": "# Vue内部原理（四）| 小册免费学", "desc": "与依赖收集相关的模块是：Dep实例负责维护属性的依赖列表，Watcher就是Dep实例维护的观察者队列中的观察者那么什么是依赖呢？用到数据的地方就是依赖。实际上这个依赖指的是watcher，收集依赖就"}, {"id": "6949174320354557982", "title": "看Vue.js源码引发的思考——Webpack sideEffects", "desc": "前言一般来说，笔者在看源码的时候都会先过一遍代码的依赖库，这样一来我们就会对眼前的这堆逻辑到底在干一个什么事情有一个大致的轮廓，然后再深入代码逻辑的时候就是填充骨架，肉体的思想工作了。当我在看Vue."}, {"id": "6844903775291850760", "title": "Vue源码探究-类初始化函数详情", "desc": "随着初始化函数的执行，实例的生命周期也开始运转，在初始化函数里可以看到每个模块向实例集成的功能，这些功能的具体内容以后在单独的文章里继续探索。现在来详细看看类初始化函数的详细代码。 头部注入的一些方法是在生命周期运行中开始初始化的功能，之前在核心类实现的文章中有提到过，在这里不…"}, {"id": "6904860496479518733", "title": "最近复习了一下es，看了一下es11的es11的私有属性", "desc": "看了es11的私有属性让我感觉到又回到了C#时代的，没找到es的标签，我就发到vue上去了classAnimal{//公共属性name;//私有属性，私有属性，外面访问不了#age;#weight;c"}, {"id": "6844903866392117262", "title": "vue 状态管理（三）", "desc": "我们修改 state，然后刷新浏览器，状态又变化原来的了，因为 state 是存在内存中的，为了点击刷新，状态不回到原来的，就需要 Vuex 提供的插件功能，当然插件还能实现其他复杂的功能。 Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutati…"}, {"id": "6897951205692030984", "title": "小菜鸡的成长之路（vuex-vue组件通讯、事件车、vuex）", "desc": "课程目标组件通信方式回顾Vuex核心概念和基本使用回顾购物车案例模拟实现Vuex组件内的状态管理流程Vue最核心的两个功能：数据驱动和组件化。组件化开发给我们带来了：更快的开发效率更好的可维护性每个组"}, {"id": "6844904094755209224", "title": "vue源码分析（三）解密new Vue()之前做了哪些不为人知工作(第一篇)", "desc": "我们之前就说过vue是核心源码都是存放在src目录下面，接下来我们就看看src/core/index.js文件做了什么操作。 我们可以看看这里调用了一个initGlobalAPI(Vue) 方法，并且传入了一个vue对象作为参数，我们一步一步来，先看一下vue对象的来源文件（s…"}, {"id": "6844903506055266318", "title": "Vue源码详解之nextTick：MutationObserver只是浮云，microtask才是核心！", "desc": "博主对nextTick 以及 event loop讲的很深入 虽然最后 UI render 的部分 还是有些懵，但是获益匪浅"}, {"id": "6948783871273992229", "title": "[vue源码笔记]vue2.x-Object变化监听", "desc": "所谓数据驱动就是开发者只关心数据的变更，而数据的变更将自动触发相应的视图更新，这样就大大降低了开发者需要关注的点，有利于形成统一的开发模式，提升效率。 具体到vue中数据驱动是怎么实现的呢?"}, {"id": "6937887412307787806", "title": "vue 3.0学习之旅1", "desc": "看到这个提示，突然就灵光一闪，vue-cli升级失败原因可能之前是yarn安装导致的？于是乎，按这个命令用yarn升级了一下，果然好使了，电脑上同时用npm 和yarn可能就有这个坑..."}, {"id": "6937702220552994823", "title": "重学Vue【响应式对象】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 Vue.js实现响应式原理的核心是利用ES5的 Object.defineProperty，而 IE8 …"}, {"id": "6917074120479866887", "title": "Vue.js2 最佳实践", "desc": "文档较长，可按需耐心反复阅读。其中带（官）的是直接引用了 Vue 官方的风格指南。针对 Vue 性能优化相关内容，单独在内容后进行了标注，可通过搜索“性能优化”四个字查找。 封装常用功能和配置，规范代码编写，保证输出的一致性，方便前端人员在此基础上快速开发新项目的业务模块。 模…"}, {"id": "6844904045639909389", "title": "Vue基础知识系列(七)自定义指令", "desc": "自定义全局指令脚下留心在自定义全局指令的时候，需要使用Vue.directive来完成，一共有三个，分别是：bind、inserted、updatedbind:在自定义样式的时候，放到bind中，只执"}, {"id": "6960551718920814628", "title": "Vue源码阅读01 —— 前期工作准备", "desc": "本菜菜开始阅读源码啦！大家可以一起阅读~深入思考内部的原理，看出个所以然来！ 01篇主要介绍了Flow类型检查和Vue源码的目录分析，从目录开始进入正题！"}, {"id": "6844904137457418253", "title": "[译]Composition API  RFC （一）", "desc": "介绍Composition API：基于函数的APIs，允许我们灵活组合组件逻辑。 我们都喜爱Vue，因为它简单易学，并使构建中小型应用变得简单。但是随着Vue使用者的增加，许多开发者同样使用Vue构建大型项目 - 需要多个开发者的团队开发，经过反复斟酌并需要维护很长时间的项目…"}, {"id": "6948401795563520031", "title": "let、块级作用域、const定义变量和var定义变量区别及注意事项", "desc": "let声明变量不存在变量提升。即：变量在声明前使用会报错，使用var声明变量在使用前不会报错，打印为undefined； let声明变量会造成暂时性死区。即：在使用let声明变量前使用变量，会报错，直到使用let声明后会正常打印 报错：在a变量声明前不可使用；这个例子中虽然使用…"}, {"id": "6948355469727498271", "title": "深入理解 Vue 数据响应式", "desc": "“响应”，中文的意思也就是“回应”。比如，别人叫你一声或者给你发消息，你回复了他，这个过程就叫响应。 这也是 Vue 最独特的特性之一 —— 非侵入性的响应式系统。 当我们把一个对象作为 data 选项传入 Vue 实例，Vue 会遍历 data 中的所有属性，并用 Objec…"}, {"id": "6948626378967220261", "title": "render函数是什么", "desc": "render函数内部接收一个函数叫做createElement函数内容（注意：官方的名字叫“h”，我把它写成createElement更直观一点，这个可以自己命名）。 1. render函数如何使用 里面有一个h2的标签，还有一个class=box，还有内容为Hello Wor…"}, {"id": "6844903558991593485", "title": "使用 SVG 图标: (2) 编写 Webpack plugin", "desc": "在上篇文章中，主要讨论了 gulp-svg-sprites 的使用以及 Icon 组件的编写。上文中我们是手动复制 SVG symbol 文件的内容粘贴到 index.html。这样操作起来十分不方便，所以在本篇文章中我们通过编写 webpack 插件去实现操作的自动化。 1.…"}, {"id": "6986465633114259469", "title": "uni-app开发微信小程序和h5应用", "desc": "最近，有个需求需要开发H5应用和微信小程序。如果针对不同的平台开发自己的一套代码，那将是一件很糟糕的事情：如果下次需要兼容支付宝小程序、快应用，那工作量随着平台的添加而快速增加。所以选择uni-app"}, {"id": "6936871299234922509", "title": "原来也没有那么难！Vue商城开发 | 技术点评", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 使用Vue开发商城全流程的界面设计，如首页，产品展示，购物车，下单，会员界面等。（首页开发，用户管理，实现产品，新闻页面，购物，和订单处理） Vue.js入门，数据绑定，表单和双向数据绑定，条件和循环指令，样式绑…"}, {"id": "6966867112878931981", "title": "vue加入购物车动画", "desc": "加入和移除购物车的交互动画，使用css3 和 vue transition组件的钩子函数控制元素的移动位置"}, {"id": "6938176673292484615", "title": "Vue 3.0 $emit 之后发生了什么", "desc": "对 Vue 3 双向绑定 感兴趣的掘友，可以阅读 聊一聊 Vue 3 双向绑定是如何工作的 这篇文章。本文阿宝哥将以一个简单的示例为切入点，带大家一起一步步探索 $emit 之后发生了什么。阅读完本文之后，你将会掌握 Vue 3 自定义事件背后的原理。 在以上示例中，我们先通过…"}, {"id": "6844904100446863373", "title": "（4.2万字🔥🔥🔥重启2020）“从零到部署”Vue全栈电商应用系列教程---正式完结", "desc": "Vue 一开始完全是尤雨溪的一个个人兴趣项目。2013 年的时候他还在 Google Creative Lab，那时候前端框架还处于比较草莽的阶段，React 刚刚发布还没几个人知道，最成熟的是 AngularJS (Angular1)。他当时一方面是想自己实现一个简单的框架练…"}, {"id": "6993990148752932872", "title": "vue中的key到底有什么用？", "desc": "key是什么 在vue中，我们经常使用的指令其中必定有key，我们先看看vue的官网文档中是怎么定义key这个指令的 vue使用的虚拟dom，不直接操作dom元素，在操作虚拟dom的时候又使用了dif"}, {"id": "6966013285497831431", "title": "介绍一下 Vue Conf 21 大会上：尤大提到 script setup 语法！", "desc": "如果你最近使用Vite和Vue3工作，你会注意到，在 Vue 组件中会使用这种<srcript>语法。 你"}, {"id": "6994958935853629453", "title": "vue入门：简单指令介绍", "desc": "这是我参与 8 月更文挑战的第 11 天，活动详情查看： 8月更文挑战 1.为什么使用vue 业务越来越复杂，更多操作在前段进行。 渐进式 不需要操作dom 双向绑定 环境构建方便 组件开发 社区活跃"}, {"id": "6985116801822621727", "title": "对比一下Vue2和Vue3的组件通信实现", "desc": "Vue框架有一大特色，就是组件化。 即我们可以把一个复杂的页面，拆分成一个个独立的组件，这样子更加便于维护和调试"}, {"id": "7004746225236836360", "title": "初窥 webpack+vue+ts+jquery", "desc": "webpack+vue+ts+jquery 学习，并简单理解一下。 TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。"}, {"id": "6981219380696711198", "title": "vue3讲解setup，ref，reactive和watch语法", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 一、setup函数的特性以及作用 可以确定的是 Vue3.0 是兼容 Vue2.x 版本的 也就是说我们再日常工作"}, {"id": "7004392157897293832", "title": "Vue.js 3.0的那些事", "desc": "Vue.js 3.0和2.x的区别 源码组织方式的变化 Vue.js 3.0源码采用TypeScript重写，大型项目的开发都推荐使用类型化的语言，在编码的过程中帮我们检查类型问题，比如给函数传参，类"}, {"id": "7005121073532370958", "title": "vue2.6版本源码阅读-Vue.use()全局api", "desc": "Vue.use()源码阅读 - Vue.use()通常用于开发自定义plugin使用，比如 1. 添加全局混入（vue-router、vuex等官方插件均在install函数中调用Vue.mixin("}, {"id": "6992493380815028232", "title": "vue 管理后台table封装", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 最近开了新的项目，简单说了自己的table封装。 问题分析 为什么封装 首先为什么封装，是因为追求技术吗，不，是因为懒，不想一直的去粘贴复制"}, {"id": "6973848448080543758", "title": "【学习笔记】一文学会使用Vuex", "desc": "VueX是适用于在Vue项目开发时使用的状态管理工具。Vue为这些被多个组件频繁使用的值提供了一个统一管理的工具——VueX。"}, {"id": "6963876125428678693", "title": "✨✨✨ V3-Admin 使用文档", "desc": "V3-Admin 是一个中后台管理系统基础解决方案，基于 Vue3、TypeScript、Element-Plus 和 Vue-Cli 4.5"}, {"id": "7004126324704935966", "title": "简易的vue-router实现(一)", "desc": "手写vue router的超级简化版本，仅供参考学习思路，想要了解更多请查看vue router源码"}, {"id": "6978831511164289055", "title": "Vue业务系统落地单元测试", "desc": "从工程中安装、vsCode调试单元测试、gitHook拦截，覆盖率解读等，还有重要的模块设计拆分原则、重构方法、代码规范，帮助更好的落地单元测试。"}, {"id": "6995434629154996232", "title": "利用lerna管理多框架日历组件", "desc": "在构思日历组件开发时就想着能够为多框架的用户提供支持，所以就有了react/vue/小程序版本，正因为有了这多框架的维护需求，所以引入了lerna，顺便当做熟悉lerna的demo。"}, {"id": "6873752140855279624", "title": "或许这就是下一代组件库", "desc": "自 react、vue 等数据驱动的框架流行以来，诞生了许多相关组件库，但这些组件库的编程模式基本都是大同小异，虽然这些年都在不断迭代，但除了功能更加丰满，长相更加好看之外，也基本上没有什么质的变化。在 material、antd 等垄断地位下，也很少有个人或公司去选择做组件库…"}, {"id": "6922708116165361671", "title": "Vue | 国际化i18n使用(普通js中使用)", "desc": "1. 在src > main.js 中引入vue-i18n ps：其实国际化用上了vue-i18n之后，并没有什么难点。最让人痛苦的就是项目里用到的文字太多太多了，需要一个个提取出来变成变量，真是令人头秃的工作。"}, {"id": "6987334063086370823", "title": "Vue的初级详解", "desc": "终于可以搞应聘必备的Vue了！ 项目的搭建，目标一：搞出一个使用Vue的项目 创建步骤 搜索@vue/cli → 点击绿色started、安装 打开vs code ，新开一个终端，直接进入一个目录 c"}, {"id": "6991664554128179207", "title": "重新过Vue文档---数据与方法（一）", "desc": "vue可以干啥 什么是组件？ 文档看到这句话，想起有次面试官问我怎么理解组件的，感觉没有回答好下次这样回答应该听起来比较专业吧。 平时项目写组件比较随意，偶尔会直接在子组件请求的数据。之后写代码要规范"}, {"id": "6844904129320468488", "title": "深入浅出Vue实例事件方法（简单易学）", "desc": "大家好，我是六六。今天分析关于Vue实例事件相关的方法。与事件相关的实例方法有四个，vm.$on,vm.$emit,vm.$once,vm.$off。这四个方法都挂载到Vue的prototype属性上，接下里我们详细的讲一讲： 1. vm.$on 监听当前实例上的自定义事件。事…"}, {"id": "6891637775763210253", "title": "Vue源码之mixin", "desc": "可以看到此时是往全局options也就是Vue.options中扩展我们传入的内容东西。 这里就是将Vue.options和组件定义的options合并成组件的options。 在src/core/util/options.js中，mergeOptions 主要功能就是把 pa…"}, {"id": "6844904117865807879", "title": "vue-baidu-map简单实现地图找房", "desc": "处理的，而 static 里面的图片是被直接复制到 dist/static 下面的。 地图拖动或缩放时时监听地图缩放等级，以及地图中心点，去请求对应层级的数据，为了避免数据多余影响效率和性能，每次请求只请求可视区域内的数据。清除上一层级的标记点，添加新的标记点 本人第一篇博客，…"}, {"id": "6844903557351620621", "title": "基于vue开发微信活动页-总结篇", "desc": "相信大家都有接到过做活动页的需求吧，并且而且大部分情况下是基于微信环境的。在这样的背景下，vue方便快捷的生产模式似乎比其他框架要更占优。 一般开发一个活动单页需要用到的技术有Vue/Vue-router/axios/sass/webpack，看似好像挺多的，但其实vue-cl…"}, {"id": "6977564056852889614", "title": "从VUE源码看生命周期过程", "desc": "vue的初始化阶段，根据生命周期我们可以知道，可以总结为四个阶段： 初始化阶段 模版编译阶段 节点挂载阶段 卸载阶段"}, {"id": "6978272344926060552", "title": "Vue进阶（幺肆肆）：Vue项目设置生产环境取消console、debugger语句控制台输出", "desc": "开发过程中，经常需要使用console.log、console.info、alert等操作来输出内容，测试代码，而在生产环境之中，这些打印的东西最好是不要显示、特别是用户名、密码相关。一个个去删除、注释显然是很麻烦的一件事，所以我们可以通过修改配置变量，实现在开发环境打印，而生产..."}, {"id": "6854573217038893070", "title": "也许是最清楚的Vue3Reactive响应式原理逻辑讲解", "desc": "本篇文章主要讲解vue响应式原理的逻辑，也就是vue怎么从最开始一步步推导出响应式的结构框架。 先从头构建一个简单函数推导出Vue3的Reactive原理，最后再进行源码的验证。 当原本price=5变为price=20后total应该变为40，但是实际total并不会改变。 …"}, {"id": "6938013731779510280", "title": "vue父子组件传值与兄弟传值", "desc": "主要方法，使用vue里面的ref属性，在父组件中调用this.$refs.son1获得子组件，再通过该方法调用子组件内的方法使其获得数据，子组件中必须定义其相应的方法。 @FatherEvent=\"get_msg_by_son\"表示，当子组件触发FatherEvent事件时，会…"}, {"id": "6857686524797026312", "title": "从0开始用vue-cli3+ts打造一个leaflet+supermap的地图组件npm包（二）构建一个基础地图", "desc": "介绍leaflet介绍1.整理项目文件夹1.1整理项目目录1.2准备构造地图文件夹2.开始打造地图组件2.1安装leaflet插件2.2开始准备着手开发3.开始开发地图组件3.1编写地图组件的模版->"}, {"id": "6844903775501565959", "title": "Element 指令clickoutside源码分析", "desc": "clickoutside是Element-ui实现的一个自定义指令，顾名思义，该指令用来处理目标节点之外的点击事件，常用来处理下拉菜单等展开内容的关闭，在Element-ui的Select选择器、Dropdown下拉菜单、Popover 弹出框等组件中都用到了该指令，所以这个指…"}, {"id": "6874876597984296974", "title": "通过一个demo学习Vue 3 Composition API", "desc": "9月18日，Vue 3.0正式发布。其中，Composition API可谓是新版本的一大亮点。本文将通过一个小demo简单介绍Composition API的主要功能和使用方式。同时，我们将使用Vue团队发布的一个新的构建工具Vite作为这个小demo的构建工具。 Vue 3…"}, {"id": "6900876768404570119", "title": "【vue系列】活动抽奖来一波", "desc": "最近有个需求-活动抽奖，比较别扭的是奖品不是9个，12个，而是7个。正面展示所有奖品，其中一个奖品，第9次抽必得，其它的正常抽奖。这个需求本身不难，主要是这是第一次做抽奖，有些未知感。项目上线了，赶紧记录下，方便日后查看。 但是抽奖效果，是顺时针的转动 0，1，2，3，6，5，…"}, {"id": "6844903527962116103", "title": "NProgress.js+Axios模仿YouTube顶部加载条（超小的全局顶部进度条）", "desc": "一、前语二、用法安装(npm)npminstall--savenprogress基本用法显示进度条-NProgress.start()设置百分比-NProgress.set()增加一点点-NProgr"}, {"id": "6895208548181540871", "title": "Vue全家桶系列之Vue组件化 (后面含Vue3.0)", "desc": "在本章内容中，面试官经常会问如下内容，带着这些问题，来看本文章。学习完后，可以再来思考如何回答。 在开发中,可能会存在没有关系的组件通信,比如有个博客内容显示组件,还有一个表单提交组件,我们现在提交数据到博客内容组件显示,这显示有点费劲. 子组件定义 slot 插槽，但并未具名…"}, {"id": "6844903502280556558", "title": "vue移动助手实践（一）——基于vue的换肤功能", "desc": "1. 色值的选取 2. scss 的一些小众用法(多变量CSS值的批量设置) 3. 全局事件巴士的应用 推荐大家看下蚂蚁金服的设计指引，里面对常见的交互和界面设计有一套不错的指引和建议，喜欢看书的也可以看看《写给大家看的设计书》。 一个很直接的思路，我们需要在各个view页面里…"}, {"id": "6885722234133217288", "title": "系统刷JavaScripit 构建前端体系(语法篇)", "desc": "基础篇语法var变量提升let与var区别const声明数据类型UndefinedNullBoolean|数据类型|转换为true的值|转换为false的值||--------:|----------"}, {"id": "6987395776385122312", "title": "Vue前后端交互", "desc": "1. 前后端交互概述与URL地址格式 1.1. 接口调用方式 原生ajax 基于jQuery的ajax fetch axios 1.2. url 地址格式有哪些 传统的url Restful形式的ur"}, {"id": "6844903969827848200", "title": "分析 Vue 的观察者模式（上）", "desc": "最近又鼓起勇气鼓捣 vue 源码，然后不经意间瞅了瞅最早开始学习 vue 源码时跟着撸的一个 vue-observer 的实例，发现自己对于观察者模式还是有些不太明白。因此，在学习了《JavaScript 设计模式》的“观察者模式”一篇后，总算有了一点灵感。目前趁灵感还在，在此…"}, {"id": "6877202931973079053", "title": "Object.defineproperty和proxy在项目中的妙用", "desc": "之前说过，现在在用vue替换原来的jq老项目，采用的是分批次的重构，现在重构告一段落，准备进行一个阶段性的总结，其中让自己比较满意的点就是对Object.defineproperty和proxy的使用，提升了团队的开发体验，以及观察者模式的深入理解。废话不多说，开始正题！ 原来…"}, {"id": "6844903725337673736", "title": "StateShot - 无侵入的历史状态管理库", "desc": "在前端的富交互编辑中，稳定的撤销 / 重做功能是用户安全感的一大保障。设计实现这样的特性时有哪些痛点，又该如何解决呢？StateShot 凝聚了我们在这个场景下的一些思考。 每次 push 的时候塞进去一个页面状态的全量深拷贝，然后在 undo / redo 的时候把相应的状态…"}, {"id": "6933852528987602957", "title": "Vue3的Composition API简易实现-computed", "desc": "前言vue3的reactivity源码地址reactivity响应式系统实现的compositionAPI有:computed默认不执行,通过lazy=true是去判断多次取值时要实现缓存,通过dir"}, {"id": "6847902220034408461", "title": "vue+CodeMirror+垂直双栏布局", "desc": "resize: vertical;就可以限定只调整高度了. 啊无视这个背景颜色，这是我chrome插件的问题。 这里还存在无法固定底栏的问题,下次查查如何才能将一个div的底栏固定在一个高度,希望可以解决."}, {"id": "6844903977948053517", "title": "Vue 组件通信 12 种解决方案", "desc": "1. 通过属性传值 props props 可以是数组或对象，用于接收来自父组件的数据。 2. 使用修饰符 .sync 修饰符 .sync 是 2.3.0+ 新增，它对 props 起到了一种修饰的作用，使用 .sync 进行修饰的 props 意味子组件有修改它的意图，这种情…"}, {"id": "6844903826399428615", "title": "Vue源码该如何入手？", "desc": "这是一个对Vue.js源码解析的系列，会持续更新，欢迎关注；话不多说，下面我们就从怎么读Vue.js源码开始。 一. 源码目录 1. compiler compiler模块包含Vue.js了所有编译相关的代码。它包括把模板解析成AST语法树，AST语法树优化，代码生成等功能。 …"}, {"id": "6844903510472032264", "title": "Vue 2.0的学习笔记： Vue实例和生命周期_Vue, Vue 2.0学习笔记 教程_w3cplus", "desc": "Vue实例是进入Vue的第一步，创建一个Vue的实例也是学习Vue的起点。实际上，Vue框架的入口就是Vue实例，其实就是框架中的ViewModel，它包含页面中的业务处理逻辑、数据模型等，它的生命周"}, {"id": "6950581085491167246", "title": "Vue 之computed计算属性的理解与实践", "desc": "介绍computed的基本用法 基本用法 一 基本用法 二 配合vuex使用 基本用法 三 配合 vuex使用， 及使用mapState， 还想写一些其他的属性 基本用法 四 修改 computed "}, {"id": "6844903585814315021", "title": "前端每周清单年度总结与盘点", "desc": "在过去的八个月中，我几乎只做了两件事，工作与整理前端每周清单。虽然每周的内容不多，读完不过五分钟；却需要数十倍的时间去翻译、整理、发布，更多上数倍的时间阅读、跟踪各大平台的资讯、文章等。不得不承认，当兴趣式阅读变成了任务式，会磨去些原有的乐趣；并且，在这个知识爆炸的时代，乱花渐…"}, {"id": "6935440371014959140", "title": "Vue源码解析(nextTick实现原理&变化侦测注意事项&变化侦测API实现)", "desc": "在使用Vue.js开发的时候，如果我们要根据数据状态操作正确的DOM，那么我们一定和nextTick()方法打过交道，它是Vue.js中一个比较核心的一个方法，在这一章节中我们来介绍Vue.js中nextTick是如何实现的。 由于nextTick涉及到许多与异步相关联的知识，…"}, {"id": "6854573222051430413", "title": "Vuex 五分钟带你初识Vuex|基础", "desc": "官方概念：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex文档地址 换句话说：就是帮助我们储存多个组件共享的数据，方便存取我们和修改，将数据或者状态进行集中式管理…"}, {"id": "6920470941562585102", "title": "Vue使用protobuf与后台交互", "desc": "vue打包后只会保留js,css,html文件所以需要把*.proto文件转化成*.js文件整体思想封装一个request.js来统一管理发起的请求（pb格式的请求）把接口统一封装到api文件夹中使用"}, {"id": "6844903773526032398", "title": "Vue + Element UI + Lumen 实现通用表格功能 - 分页", "desc": "最近在做一个前后端分离的项目，前端使用 Vue+ Element UI，而后端则使用 Lumen 做接口开发，其中分页是必不可少的一部分，本文就介绍如何基于以上环境做一个简单、可复用的分页功能。 后端做的事情不多，只需要接受几个参数，根据参数来获取数据即可。 然后就可以根据这两…"}, {"id": "6906787719738097677", "title": "③ Vue基础语法-属性绑定🤞", "desc": "可以发现，绑定 title 属性已经被修改为 toString 方法的 return 值了。 v-bind在绑定class和style内联样式属性时，除了支持字符串之外，还可以直接使用对象或数组。 这是因为，操作元素的 class 列表和内联样式是数据绑定是一个常见需求。所以，…"}, {"id": "6854573217982611464", "title": "教练，我想从零做一个自己的ui组件库", "desc": "很多时候面对日常的工作业务需求，或者面对新项目时往往都是npm i element-ui -S安装element或者Ant的组件库，但如果自己想要面对特殊的需求需要定制组件往往需要不断修改，改完又往往忘记了整理，最后就是不断的重复。 你所写的每一个 vue 文件都可以视为一个组…"}, {"id": "6844903981496401934", "title": "Vue 3.0 —— Watch 与 Reactivity 代码走读", "desc": "本篇文章以一个很简单小例子打断点入口开始分析，情况很单一，仅仅是一个简单的 object，没有涉及到组件实例，目的也很简单：搞清楚三者之间的工作流程、同时熟悉一些概念。 所以代码走读也分为三个部分，来分别参数这三个过程。 这么做是为了缓存提高查找性能，因为对于一个嵌套对象，是需…"}, {"id": "6882374446389133325", "title": "Vue源码之入口new Vue做了啥", "desc": "Vue.js ⼀个核⼼思想是数据驱动。所谓数据驱动，是指视图是由数据驱动⽣成的，我们对视图的修改，不会直接操作 DOM，⽽是通过修改数据简言之就是js对象数据格式。DOM 变成了数据的映射，我们所有的逻辑都是对数据的修改，⽽不⽤碰触 DOM，便于维护的同时提升了性能。 寻找入口…"}, {"id": "6932486607924625422", "title": "Vue.nextTick源码解析", "desc": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 Vue.nextTick与vm.$nextTick方法作用是一样的，区别是后者回调的this会自动绑定到调用它的实例上。 Vue 实现响应式并不是数据发生变化之后 DOM 立即…"}, {"id": "6919305305608323080", "title": "vue-事件总线event bus", "desc": "第一种局限于只能在父子组件中传递，如果要在兄弟组件之间传递就要用到事件总线event bus或者vuex来实现。这里讨论的是event bus这种实现方式。 为了方便观察，以上实现了一个嵌套路由，helloworld页面嵌套了posts页面，我们在helloworld页面放按钮…"}, {"id": "6844903572333674503", "title": "仅有1.4kb ! 兼容全部浏览器的组件化渲染插件  Eng-NOS", "desc": "1. 只需学习4个指令就能完成所有常规页面的 数据渲染操作 2. 拥有世界顶尖的性能 远超所有主流已知同类JS组件化渲染工具 3. 对于传统页面 有兼容需求 ,又渴望组件化渲染 , 还想要极低的学习曲线的项目 , 你还在等什么 !?"}, {"id": "6844903622275252231", "title": "笔记：配合 Vue.js 配置 Webpack（一）Vue.js，Webpack 和 Webapck Dev Server 的基本配置", "desc": "把自己博客上访问最高的一篇内容重写了一遍，为 Webpack 4.12.0 和 Vuejs 2.5.16 做了更新。手动从 npm 新建项目开始，一直到配合 Webpack 完成 Vue.js 的热重载（HMR）结束，比 2016 年时候写的原文更长了点..."}, {"id": "6956427012089053214", "title": "进击中的Vue 3——“新能源车电池范围计算器”开源项目", "desc": "今天，我们给大家带来的是一个基于vue3的开源项目：电动车电池范围计算器。这是一个workshop，通过完成该项目，我们可以直观的感受到vue3的强大，了解一些项目最佳实践。 项目的背景是当前备受关注"}, {"id": "6903515773475258376", "title": "给项目组实习生做技术培训的教案 -（Vue、Gitlab、Vue3、demo）", "desc": "1. 项目搭建 1.1. 创建 1.2. 配置 1.2.1. router 1.2.1.1. 导航守卫 1.2.2. vuex 1.2.3. axios 1.2.3.1. 请求拦截器 1.2.3.2. 响应拦截器 2. 提升开发质量和开发幸福度的 vue 功能 2.1. dir…"}, {"id": "6844903877213421582", "title": "webpack打包出来的vue异步组件分析", "desc": "React和Vue都是可以实现组件的异步加载的，React最新的版本已经有了React.lazy和Suspense来动态引入组件，以前网上都是使用webpack提供的插件来进行异步加载组件的。 但是该文章分析的是Vue的异步组件加载。 第一，工作上刚好碰到了需要对Vue实现的组…"}, {"id": "6915731848190492686", "title": "vue 封装多行间隔表头组件", "desc": "分享封装了一个 vue 表格组件，如若有更好的想法，请指导基本的多行间隔表头实现功能 组件代码<template><script><style>"}, {"id": "6925030011560787975", "title": "手撕Vue源码全过程(上)", "desc": "1.构建自定义Vue实例效果2.提取元素到内存接上编写效果3.查找指令和模板4.编译指令数据HTML继上添加js继上添加效果5.编译模板数据6.监听数据变化"}, {"id": "6971629637600460836", "title": "简单总结Vue进入/离开过渡&动画", "desc": "这是我参与更文挑战的第9天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： css过渡 一般只需要设置两个： css动画"}, {"id": "6844904081442471944", "title": "如何在vue的项目中写一个简易的网页弹幕", "desc": "最近整了一个个人网站，没啥内容于是就想弄个弹幕玩玩充实一下网站。 .danmuBox就是容器了,.danmu就是一条条的弹幕。其中messageList显然就是所有弹幕的集合了，至于styleList就是弹幕播放的核心了，它将用来控制整个弹幕的播放流程。 其实到这里我的逻辑应该…"}, {"id": "6844903696346677262", "title": "高级 vue 组件模式 2", "desc": "我们需要实现的需求是能够使使用者通过 <toggle> 组件动态地改变包含在它内部的内容。 熟悉 vue 的童鞋可能马上会想到不同的解决方案，比如使用 slot 并配合 v-if，我们这里采用另外一种方法，利用 vue 提供的 provide/inject 属性按照复合组件的思…"}, {"id": "6844904154431766536", "title": "Vue CLI 源码探索 [二]", "desc": "Vue CLI 源码探索 [六] 探索下 Vue CLI 的插件机制，内容较多，请慢慢看。涉及如下插件（@vue/cli-plugin-vuex/router/babel/typescript/eslint） 上一节，我们完成了 vue create <app-name> 命令…"}, {"id": "6844903712498941960", "title": "eventBus（封装） 一个巧妙的解决vue同级组件通讯的思路", "desc": "如果在你项目中需要多处用到同级组件通讯，而又不想去写繁琐的vuex，可以参考这个小思路。本人在写项目中琢磨出来的，感觉挺好用，分享一下。 注释已经很详细了，也很简单，不再过多阐述。 引入 BusOn 挂载在组件的mixins上。 引入 BusEmit 发起同级组件通讯。 不用每…"}, {"id": "6844903618038988813", "title": "Vue + TypeScript 尝鲜体验", "desc": "适用Vue.version<2.5&&Vue.version>=2.2其实我个人一开始很讨厌TypeScript这个东西，就是因为讨厌Java的啰里巴嗦，突然在我眼前出现了JavaScript，便爱上"}, {"id": "6889022739425230861", "title": "全栈之路Vue.js系列（二）之Vue.js指令", "desc": "在上一篇文章我们大致介绍了以下Vue.js的基本情况，其中我们简单介绍了一些Vue.js的指令，而这些指令是Vue.js的基础，今天我们就来详细了解一下Vue.js的指令。 我们之前说过Vue支持双向绑定，当我们更改数据时视图也会发生变化，v-once是用于一次性绑定，当数据第…"}, {"id": "6977390663906279438", "title": "【Vue2.x 源码学习】第二十二篇 - dep 和 watcher 关联", "desc": "【Vue2.x 源码学习】第二十二篇 - dep 和 watcher 关联；介绍了依赖收集的必要性；介绍了 Watcher 和 Dep 的作用；实现了 Watcher 类和 Dep 类；"}, {"id": "6844903696355033095", "title": "高级 vue 组件模式 6", "desc": "之前的五篇文章中，switch 组件一直是被视为内部组件存在的，细心的读者应该会发现，这个组件除了帮我们提供开关的交互以外，还会根据当前 toggle 的开关状态，为 button 元素增加 aria-expanded 属性，以 aira 开头的属性叫作内容增强属性，它用于描述…"}, {"id": "6935258160605331470", "title": "SpringBoot+Vue豆宝社区前后端分离项目手把手实战系列教程10---前端首页顶部导航", "desc": "本项目实战教程配有免费视频教程，配套代码完全开源。手把手从零开始搭建一个目前应用最广泛的Springboot+Vue前后端分离多用户社区项目。本项目难度适中，为便于大家学习，每一集视频教程对应在Github上的每一次提交。"}, {"id": "6971474441721085960", "title": "Vue： 构造选项学习笔记", "desc": "Vue的选项式API包含以下部分：Data、DOM、生命周期钩子，资源、组合、杂项。本篇主要用来记录学习的，主要涉及这些API的类型、限制条件，并且举一些例子来更好理解。"}, {"id": "6977361144168218632", "title": "vue指令v-on和事件修饰符的使用", "desc": "事件修饰符： 如： 阻止冒泡：.stop 取消默认事件：.prevent 匹配回车触发：.enter alt+回车触发：.alt.enter 匹配空格触发：.space等等 事件修饰符可以串联使用，如.stop.小demo： 涉及： 1.vue实参形参的传递与使用 / data字..."}, {"id": "6844903512183144462", "title": "最新vue-cli 2.9.1的webpack存在问题", "desc": "由此可知 在最新版本的vue-cli中webpack版本更新到v3.6.0了。 既然更新了 那就我们就重新开下webpack的配置项。 这里的autoOpenBrowser对应false ,既然我们要改动那就直接改为true就可以。然后在重启下服务 就可以自启动服务了 其中的p…"}, {"id": "6969554880365068325", "title": "vue2+版本学习之使用defineProperty方式简单实现数据响应式", "desc": "思考：vue2中怎么对data中的数据进行响应式处理，怎么对模板进行编译，将数据初始化到数据对应的视图中，此处是全量更新，怎么在数据变化后精准更新相应的视图？"}, {"id": "6969505723898150943", "title": "vue-ssr 服务端渲染 — 简易的构建", "desc": "简易的服务端渲染 基础的服务端渲染需要安装几个比较重要的模块 在根路径下创建文件 server.js 简易的服务端 首先需要构建一个简易的服务器，因为是服务端渲染，所以需要在服务端返回 html 代码"}, {"id": "6844903613597220877", "title": "干货--手把手撸vue移动UI框架： 提示弹窗（toast）", "desc": "在我们平时的移动端开发中，使用最多，频率最好的可能就是今天咱们要写这个toast组件了；他可以在请求错误、表单验证等情境下使用，而这个组件有可能也是最容易实现的一个组件。咱们今天一步一步的来抽象一个这样的组件，方便平时开发中使用。Github源码（不麻烦的话帮忙start，请各…"}, {"id": "6902307666748997639", "title": "vue源码小韩初篇", "desc": "初来乍到请多关注～❤️首先把vue的源码copy的地址告诉你们：https://github.com/vuejs/vue地址告诉你们了，你们肯定要clone下来瞅一眼，那么命令行输入：gitclone"}, {"id": "6844903872985743373", "title": "VUE源码浅析（一.VUE构造函数）", "desc": "最近一直忙于找实习，一直奔波于北京和学校两地之间，很荣幸能加入一家小公司，由于之前一直使用的React，现在的公司用VUE，所以花费了两天时间学习了VUE的基本使用，这两天心血来潮准备看看VUE的源码，我只是一个大二的初生牛犊，有错误的地方还望大家指出来，我们共同学习。喜欢的请…"}, {"id": "6844904019782205453", "title": "VueX快速使用", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。（可以理解为一个临时的可共用的一个对象）我们可以在所有的组件访问它。 我们可以把他理解为一个仓库，他里面存储着一些工具，而组件是工人，在工人需要仓库里的工具的时候，就需要通过一系列的规范操作去获取它。 state：…"}, {"id": "6977183387022950436", "title": "将Vue.js与新的JavaScript框架相比较", "desc": "随着前端设计对于一个应用程序的成功变得越来越重要，与最好的前端框架合作也变得更加必要。 找到最好的框架来解决项目中的具体问题，可以提供更好的前端设计和用户体验，帮助品牌和开发者吸引和保留更多的用户。 "}, {"id": "6844903632500949000", "title": "我们为什么需要指令", "desc": "最近看到大漠的一个视频【为什么需要指令】，他是这么回答的：因为指令可以拓展HTML的功能（在Angular中）。我认为他说的观点没错误，但是其实没有抓住最根本的原因，拓展HTML的功能只是表面现象..."}, {"id": "6844903620022910989", "title": "[译] 前端开发框架的实战对比（2018 年更新）", "desc": "本文是是对 2017 年 12 月发表的 前端开发框架的实战对比 一文的更新。 在对比中，我们将展示不同框架之间去实现几乎相同的 实战示例应用 有怎样的差别。 实战应用——不只是一个 \"todo\" 应用。一般来说，\"todo\" 应用无法充分的传达构建一个真实应用所需要的知识和观…"}, {"id": "6844903571255721992", "title": "Giog (github issues blog) - 轻量级博客系统（built width vue ssr and koa)", "desc": "修改配置文件 config/config.js."}, {"id": "6854573210290257933", "title": "vue2.0中事件修饰符的使用", "desc": "如果需要在内联语句处理器中访问原生DOM事件。可以使用特殊变量$event，把它传入到methods中的方法中。 在Vue中，事件修饰符处理了许多DOM事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。 冒泡事件：嵌套两三层父子关…"}, {"id": "6844903700163477517", "title": "高级 Vue 组件模式 (7)", "desc": "到目前为止，仅从 toggle 组件自身的角度来看，它已经可以满足大多数的业务场景了。但我们会发现一个问题，就是当前 toggle 组件的状态对于调用者来说，完全是黑盒状态，即调用者无法初始化，也无法更改组件的开关状态，这在一些场景无法满足需求。 对于无法初始化开关状态的问题，…"}, {"id": "6977019148693929991", "title": "Vue：模板、指令与修饰符", "desc": "Vue模板语法 模板的三种写法 Vue完整版，写在HTML里 Vue完整版，写在选项里 Vue非完整版，配合xxx.vue文件 在另一个文件中引用 模板语法 展示内容 表达式 HTML 内容 假设 d"}, {"id": "6977007146378461215", "title": "【Vue2.x 源码学习】第二十一篇 - 依赖收集的过程分析", "desc": "本篇，主要介绍了 Vue 依赖收集的过程分析；vue 的使用；dep 、watcher依赖收集大致过程；"}, {"id": "6844903510098591757", "title": "Vue.js SSR Step by Step (3) - 改造 vue/webpack 脚手架 ", "desc": "通过前面两篇文章，写了一个简单的支持 vue 同构的 webpack 配置，但是还没有 dev server，不能热更新和实时编译，用于开发还是非常的麻烦。 Vue 官方的 webpack 脚手架只是针对客户端的，功能强大，配置齐全。所以在这个官方脚手架的基础上改了一个支持 #…"}, {"id": "6912822605472858119", "title": "前端分页 + 搜索 + 支持多选显示操作按钮项", "desc": "效果图支持多选显示操作按钮项✔️代表显示❎代表隐藏编辑只针对每一行显示上代码"}, {"id": "6844903824470048782", "title": "Vue 组件间通信方法汇总", "desc": "除了使用 Vuex 方法外，vue 提供了各种各样的组件间通信的方案。文章整理一下父子组件、兄弟组件、祖先后代组件间是如何通信的。 💬 子组件有时需要与父组件进行沟通，沟通的方式就是子组件 emit 事件，父组件通过监听这个事件来做进一步动作。而父组件与子组件通信则使用 pr…"}, {"id": "6844903821903298568", "title": "Vue的mergeOptions函数分析-上", "desc": "Vue的mergeOptions函数的主要作用是用于合并选项(将俩个选项对象合并成一个)，它是用于实例化和继承的核心函数。这也是为什么我们要去分析它。并且与函数相关的选项合并策略也都在一个文件里，定义在/src/core/util/options.js文件中。 因为Vue的核心…"}, {"id": "6844903845085052936", "title": "atom-design(Vue.js移动端组件库)手势组件介绍", "desc": "使用Carousel来实现轮播图，每个一级子节点都会当成一个轮播滑块.传送带组件参考比较流行的swiper来设计，swiper.js是通过自定义的复制副本个数，在头尾各自添加头部副本和尾部副本，滑动至最后一个和首个滑块的时候判断手势方向translate来切换到副本位置. 只需…"}, {"id": "6942418963661848607", "title": "《如何理解 Vue 的 .sync 修饰符》", "desc": "Vue 修饰符 .sync 的功能是：当一个子组件改变了一个 props 值时，这个变化也会同步到父组件中所绑定。"}, {"id": "6844903966170431496", "title": "彻底搞懂Vue中keep-alive的魔法(下)", "desc": "上一节对keep-alive组件的分析，是从我画的一个流程图开始的。如果不想回过头看上一节的内容，可以参考以下的简单总结。 和普通组件一致，当父在创建真实节点的过程中，遇到keep-alive的组件会进行组件的初始化和实例化。 实例化会执行挂载$mount的过程，这一步会执行k…"}, {"id": "6945412230565330974", "title": "尝试封装基础组件-button｜小册免费学", "desc": "在业务仔的生活中，经常就是使用各种组件去堆页面。使用第三方的组件库，有时候不能满足项目的样式需求，所以需要封装项目的基础组件库，本文所写的就是一个简单的小案例。 目前实现的这个button的Demo涵盖的功能其实并不全面，参照elementUi,button组件中应该存在图标，…"}, {"id": "6844903919512977422", "title": "无限滚动分页加载   vue好用插件vue-infinite-scroll   列表无限滚动加载", "desc": "先放个美女的他拍照，养养眼 ~ 哈哈哈😄 准备这一波的学习，刚入职场学习的东西太多，没听过的，没接触过的太多了，希望我的这些分享能分享给刚入职场的前端人员。"}, {"id": "6987054372706320392", "title": "前端Vue+iView 后端nestjs+mySql实战项目", "desc": "前言 本人应届小菜鸡一枚，主要往前端方向发展。来到掘金分享第一篇文章，基于Vue+Nestjs框架的美食工厂实战项目。个人认为这个实战项目比较适合学习及巩固Vue基础，以及适应前后端的交互。话不多说，"}, {"id": "6991485898823041055", "title": "重学vue之vue生命周期｜8月更文挑战", "desc": "图片摘自 vue官方网站 ok,我会跟据这张图片+代码尽量把vue的生命周期说明白 new Vue() 创建一个vue实例，只有创建了vue实例，才会有vue生命周期。在vue项目中，每一个vue组件"}, {"id": "6945324578805645342", "title": "如何优雅在vue3中编写命令式Confirm组件", "desc": "在编写7享项目的时候，我发现一个编写问题，就是我的自定义弹窗组件会在项目中会多次重复调用，并且使用起来不方便。比如我使用组件的地方要先import组件进来，组件注册，再然后给组件加ref引用，最后调用组件的方法来控制状态。那有什么办法可以通过简单方式来调用自己的组件了呢？ 答案…"}, {"id": "6844904055681220616", "title": "修改vue源码实现动态路由缓存  动态路由", "desc": "官网解读：我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个…"}, {"id": "6844903791553150989", "title": "Vue $dispatch 和 $broadcast 详解", "desc": "$dispatch 和 $broadcast 作为一对情侣 💑属性，在 Vue 1.0 中主要用来实现基于组件树结构的事件流通信 —— 通过向上或向下以冒泡的形式传递事件流，以实现嵌套父子组件的通信。但是由于其显功能缺陷，在 Vue 2.0 中就被移除了。虽然 Vue 官网已…"}, {"id": "6884209228849807368", "title": "Vue: v-model 语法糖", "desc": "Vue: v-model 语法糖「「难度：🌟」」「「口味：巧克力」」经常使用v-model却不知道它的原理 做个备忘栗子:使用V-model 双向数据绑定事件时原理:只是一个语法糖所以在组件里使用的时"}, {"id": "6923927107357671438", "title": "Vue 原理之图解 Diff 流程", "desc": "本文衔接上篇 Vue 原理之从新建实例到 Diff ，对 Vue Diff 算法进行深入解析。 通过三个典型的例子，来理解 Diff 算法对不同情况的处理流程（多图预警）。最后结合源码进行疑点分析。 作用：找到最小差异部分的 DOM 进行更新，减少 DOM 重绘重排。 比较对象…"}, {"id": "6883122206214193159", "title": "Vue3 文档阅读 —— reactivity 响应式基础", "desc": "Vue 3.0 终于发布了，具体更新内容详见 v3.0.0。官网地址 Vue，但内容还都是英文的，毕竟刚发布嘛，中文内容还没那么快。 索性不如自己阅读仓库文档，看看 Vue3 都给我们带来了哪些具体变化。 reactive 相当于 Vue 2.x 中的 Vue.observab…"}, {"id": "6995742675617972231", "title": "vue3学习 --- 父子组件通信", "desc": "如果我们一个应用程序将所有的逻辑都放在一个组件中，那么这个组件就会变成非常臃肿且难以维护。所以组件化的核心思想应该是对组件进行拆分，拆分成一个个小的组件, 再将这些组件组合嵌套，形成我们最终的应用程序"}, {"id": "6925716428775489549", "title": "如何管理Vue中缓存页面", "desc": "本文主要围绕这两个问题探讨，后文用问题一和问题二指代。 当随着业务逻辑变得复杂，路由栈也逐渐升高，理论上用户可以无限的路由下去，不可避免的我们需要管理这些缓存在内存中的页面数据，页面数据包含两部分，Vue实例和对应的Vnode。查看 Vue 源码中src/core/compon…"}, {"id": "6911236502127116302", "title": "⑥ Vue的生命周期🤞", "desc": "beforeCreate：在实例初始化之后，数据观测 (Data Observer) 和 event/watcher 事件配置之前被调用。 created：在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)、属性和方法的运算，w…"}, {"id": "6844903600032858125", "title": "Vue项目全局配置微信分享实践", "desc": "这个项目为移动端项目，主要用于接入公众号服务。项目采用两种登录方式，微信授权登录以及账号密码登录。对于移动端项目而言，为了便于项目扩展以及提供开发热更新速度，项目分为不同的模块，每个模块是一个单页面应用。页面分为两种，一种是需要用户登录之后才能浏览，另一种是用户无需登录即可浏览…"}, {"id": "6927205175862132749", "title": "【Vue3源码】从源码层面观察vue的变化", "desc": "Vue3发布已经有段时间了，相比Vue2做了特别多的优化。但具体好在哪里呢，除了开发者用得爽之外，框架底层的优化需要我们通过研究源码才能有切身体会。 本文主要是通过源码层面来对比 Vue3 和 Vue2，思考与总结新的 Vue3 做了哪些优化，这些优化好在哪里。 1. 初始化 …"}, {"id": "6844904065680293896", "title": "五个实例帮你快速入门Vue", "desc": "本文分别通过使用Vue中的五个知识点:基础知识、组件化知识、工程化知识、路由(vue-router)以及状态管理(vuex)分别实现TodoList。虽然使用了Vue中不同的知识点，但是最终实现的效果基本都是相同的，所以从外观上看也是一个实例。 当然本文只是包含了Vue中很小的…"}, {"id": "6985052692049723428", "title": "发现el-input在el-table-column slot=\"header\"中输入不了的bug", "desc": "原文地址： https://www.jianshu.com/p/f9ee03084e14 ;el-input 输入不了文字了？看看怎么解决的。"}, {"id": "6966132850986860551", "title": "vue项目优化与上线部署", "desc": "一.项目优化策略 2.第三方库启用CDN 3.Element-ui组件按需加载 4.首页内容定制 5.路由懒加载 1.生成打包报告 1.1通过vue-cli的UI面板直接查看 1.2通过命令行参数生成"}, {"id": "6844903825078222855", "title": "Vue中的scoped及穿透方法", "desc": "css一直有个令人困扰的作用域问题：即使是模块化编程下，在对应的模块的js中import css进来，这个css仍然是全局的。为了避免css样式之间的污染，vue中引入了scoped这个概念。 在vue文件中的style标签上，有一个特殊的属性：scoped。当一个style标…"}, {"id": "6949138186886971429", "title": "从0搭建Vite + Vue3 + Element-Plus + Vue-Router + ESLint + husky + lint-staged", "desc": "为何使用 Vite？如何从0搭建Eleme-Plus +Vue3.0全家桶开发环境、多语言化并集成 ESLint +husky +lint-staged 完成代码的检查及代码 git 提交规范校验。"}, {"id": "7005770352840146957", "title": "「免费开源」基于Vue和Quasar的前端SPA项目crudapi后台管理系统实战之模块管理（十四）", "desc": "因此本文主要介绍表单模块管理相关内容。属于同一类型的表单可以添加到同一个模块，比如字典相关的表建立“字典”模块，用户相关的表建立“用户管理”模块，模块在首页直接展示，用户可以快速的操作对应的表单。"}, {"id": "6844904020864139278", "title": "面试官：聊聊对Vue.js框架的理解", "desc": "今年OKR定了一条KR是每一个季度进行一次前端相关技术的分享，还有十几天就到2020年了，一直忙于业务开发，没有时间准备和学习高端话题，迫于无奈，那就讲讲平时使用频率较高，却没有真正认真的了解其内部原理的 Vue.js 吧。 由于本文为一次前端技术分享的演讲稿，所以尽力不贴 V…"}, {"id": "6986906747202093064", "title": "前端权限——登录权限", "desc": "应用场景 需要通过登陆来评定某些页面是否被展示时 实现思路 路由导航守卫router.beforeEach配合登陆凭证token及登录用户信息"}, {"id": "6998061147349860366", "title": "Vue3组件库-消息提示组件", "desc": "Vue3组件库-消息提示组件 简易消息提示 自定义消息提示 函数调用消息提示 简易消息提示 - 自定义消息提示 - 函数调用消息提示"}, {"id": "6997980474535051272", "title": "Vue组件通信最全篇 | 8月更文挑战", "desc": "Vue组件通信全篇,从Vue2到Vue3再到Vuex最后pinia组件通信的进化,以及优缺点。(建议收藏慢慢看)"}, {"id": "6844903823937372174", "title": "[译]尤雨溪：Vue3的设计过程", "desc": "今日凌晨三点半左右，尤雨溪在他的微博上发表了一篇文章。 当然大佬是在另一个时区，咱们这的凌晨对应的应该是那个疫情最严重的时区的下午。 在过去的一年中，Vue 团队一直在研究 Vue.js 的下一个主要版本，我们希望能在 2020 年的上半年发布该版本。（在撰写本文时，这项工作仍…"}, {"id": "6993548076048711711", "title": "搭建vue开发环境步骤", "desc": "相信很多人在刚开始学习vue这个框架的时候，在最开始搭建开发环境的时候，都会遇到一些大大小小的坑，我之前在学习的时候搭建过一次，过了一个月后在搭建第二次的时候，竟然有一些混乱，所以今天想整理出来；"}, {"id": "7001677497599262728", "title": "vue模版语法", "desc": "这是我参与8月更文挑战的第29天，活动详情查看:8月更文挑战 vue的模版语法有：插值语法 和 指令语法 两种 插值语法 {{}} 指令语法 我们想要写动态的超链接，怎么实现那？ 我们发现接着使用插值"}, {"id": "7004460945468555278", "title": "Vben Admin 深入理解之动态主题切换的设计", "desc": "上周研究了 Vben Admin 的环境变量和权限的设计，现在项目已经在用了还在搭建页面结构阶段，在主题这需要修改遇到了疑惑所以就把这部分的实现也看看。 Vben Admin 深入理解之插件、环境变量"}, {"id": "6903119693742080007", "title": "万字长文带你全面掌握Vue3", "desc": "在2020年9月19日，vue更新了3.0的正式版，不知不觉，已经过去了好几个月了，作为一位前端切图仔，是时候开始学习了，每次抱着准备学、再等等、明天说的想法，成功在发布了两个多月的时候来认真学习了一波，这里来总结一下vue3到底有哪些更新，来帮各位没有时间去了解vue3的朋友…"}, {"id": "6946387745208172558", "title": "不要再用vue2的思维写vue3了", "desc": "升级Vue3后，让人最脑壳疼的应该是新的Compostion API语法，他的难点不是语法，而是他提供了全新的组织代码的思维方式。 我刚从Vue2转到Vue3时，代码都严格的遵循Compostion API写法，但是发现比Option API写法维护性更差。 1. 按技术类型划…"}, {"id": "7006224395093934110", "title": "vue + husky + eslint + prettier 代码格式化", "desc": "prettier husky eslint .eslintrc.js tips Delete ␍eslintprettier/prettier 报错 解决方案： .editorconfig end_o"}, {"id": "6970704717399719966", "title": "不借助后端，前端本地如何将内容写入文件并保存", "desc": "需求背景 我司后台系统的路由菜单为了做权限控制，都是将其保存在后端中，后端同学希望前端将所有路由导出成一个json文件给后端，后端直接将其导入到数据库中，避免每次上线新增页面时都要花时间去后台录入"}, {"id": "6986540472986501150", "title": "Pinia与Vuex的对比：Pinia是Vuex的良好替代品吗？", "desc": "介绍 Pinia 是 Vue.js 的轻量级状态管理库，最近很受欢迎。它使用 Vue 3 中的新反应系统来构建一个直观且完全类型化的状态管理库。 Pinia的成功可以归功于其管理存储数据的独特功能（可"}, {"id": "6847902225138876424", "title": "源码篇（一）：手写vue版mini源码分析框架，优势特性总结，vue-cli知识点，以及vue项目的二次封装，mini项目源码附送", "desc": "在前端三大框架并存的今天，vue已经是前端必须掌握的一部分。而对于很多入门者，或者转行前端的小伙伴们，个人觉得vue是一个非常适合入门的框架的之一。笔者个人觉得，无论从api的易学的角度出发，还是从原理层面解析，vue还是比react的简单一些。记得某个大神的面试分享：如果面试…"}, {"id": "6997587227807072264", "title": "vue让你理解npm run dev 和 npm run serve的区别", "desc": "npm run dev 是vue-cli2.0版本使用的 npm run serve 是vue-cli3.0版本使用的 dev build serve? 在我们运行一些 vue 项目的时候，输入npm"}, {"id": "6844903967407734798", "title": "1小时搞定卡片拖拽、自动排列交换位置、拖拽数据存取", "desc": "这是这次系列文章的第一篇，我自己封装了一个用vue实现的拖拽排列卡片组件，并且发布到npm，详细地记录下来了整体制作过程。总共有三篇文章，介绍组件的制作思路和遇到的问题，以及在发布到npm上并下载使用的过程中，发生了什么问题并如何解决。 两个部分都是可以进行自定义内容及样式的。…"}, {"id": "6857669921166491662", "title": "图解 Vue 响应式原理", "desc": "最近部门分享，有同学提到了 Vue 响应式原理，大家在讨论时，发现一些同学对这一知识理解还不够深入，不能形成一个闭环，为了帮助大家理解这个问题，我重新过了一下 Vue 源码，并整理了多张流程图，便于大家理解。 从 Vue 初始化，到首次渲染生成 DOM 的流程。 从 Vue 数…"}, {"id": "6974784409434062878", "title": "Electron+Vue3 MAC 版日历 开发记录(17)——使用 Naive UI重构黄历页面", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903845416402957", "title": "关于Android工程师转成vue的三两事儿(1)--数据的配置", "desc": "话不多说，现在开始谈一谈vue吧，因为我可能最近每天都会写着一个系列的文章，所以我现在写的东西并没有先后之分，如果我后来有时间。我会做一些简单的整理、更新。今天第一天就来谈一下 我对vue网络请求的一些封装吧。 今天第一天，我就从四个步骤去谈及这个东西吧，从头到尾依次是mock…"}, {"id": "6844903503886827533", "title": "Vue 2.5 正式发布 – TypeScript 集成优化，更好的错误处理，SFC 里的 Functional Support 及 SSR 支持更多的环境", "desc": "3.0 快出了，💊"}, {"id": "6943478965856108558", "title": "一篇文章学习Dart，为使用Flutter打基础", "desc": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.Dart这门语言比较奇葩一点，他拥有很多java的特性，但是写法却和js很像，学习这门语言的根..."}, {"id": "6844903635801866253", "title": "移动Web体验月报（6月）：MIP 核心代码升级，增加基于 Vue 开发能力", "desc": "历时2个月，MIP团队完成了核心代码重构与核心功能升级，MIP新版本核心代码（V2）在实现向下完全兼容当前代码（V1）的同时，也提供了新的能力。"}, {"id": "6943478908335423524", "title": "Sketch的插件管理", "desc": "写在前面插件管理获取插件选择全部插件选择一个点击下载安装插件提示成功使用插件卸载插件注意的点插件的网站是国外的，需要梯子才可以很多的插件不是及时生效的，需要我们重启软件才可以！"}, {"id": "6945369343882428424", "title": "手把手学习Vue3.0：如何利用Vue-CLI4.5.1脚手架创建Vue3.0工程", "desc": "上篇《手把手学习Vue：Vue环境搭建》末尾提到了工程构建，没有详细给出操作步骤。今天单独拿出来我觉得还是非常有必要的，因为不同的配置项决定后面怎么编码。也希望学习的小伙伴们也重视这些基础环节，正所谓磨刀不误砍柴工。我用的都是最新版本的工具，目的是理清知识脉络。如果你是生产环境一..."}, {"id": "6844903520416595982", "title": "Vue源码之旅(2)-nextTick | 令狐洋葱", "desc": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 timerFunc是在Vue\b源码初始化后就已经确定的。 nextTick的实现基于浏览器的microtask队列。浏览器优化了dom的更新，将dom更新划分为宏任务和微任务…"}, {"id": "6844903616352878606", "title": "深入理解Vue之模板", "desc": "Vue编译器读取一个组件的template，将会经过如下阶段：parsing, optimizing, codegen, render function, VNode。 最后生成的VNode将会由虚拟DOM处理来创建一个真实Dom。 模板首先会被编译器编译成AST树, AST包…"}, {"id": "6844903518550097933", "title": "利用http-server测试vue-cli打包后的项目", "desc": "目前在练习Vue，利用vue-cli脚手架开发了个vue2.0仿唯妮海购项目，在生产环境中一切良好，项目暂时告一段落，根据官方的npm run build打包后发现，在自己没有线上服务器的情况下，测试成为一大难题（实践发现，后面还有很多坑等着去填~~）。 安利一个项目中遇到的大…"}, {"id": "6943481004510150692", "title": "BootStrap做图片轮播效果（解析）", "desc": "做不同的好看的效果一直是做一个小前端的目标，都希望可以做出不一样的页面，炫酷的页面，但是技术有的时候跟不上的时候只能是模仿，看别人是怎么做的，其实模仿的过程也就是学习的一个过程，能看明白别人的代码也是一种进步，今天就简单的讲述一下如果用bootStrapUI框架做一个图片轮播的效..."}, {"id": "6943530684916957197", "title": "深入解析Vue父子组件通信 -双向数据绑定问题", "desc": "学习了一天的Vue组件化开发,脑瓜子嗡嗡的。遇事不要慌，先去吃个快餐。吃饱才有力气扯淡，程序员还是应该以身体为重。鄙人健身三年，有喜欢运动的小伙伴欢迎私聊深入交流一下。 1.首先子组件获取父组件的data数据相信大家一定不陌生，只需要通过props自定义属性即可。(prop 是…"}, {"id": "6844903503496757262", "title": "Vue2 接地气的组件设计与开发", "desc": "众所周知，目前中国的web前端领域使用者最多，口碑最好的框架当属Vue，本胖相信到2018年，vue将全面统治web前端框架界，就像06年出来的jquery一样，毕竟任何都是分久必合，合久必分，框架也是如此。（以上是本胖个人观点） 我们可以回想一下，jquery流行的时候，大家…"}, {"id": "6919761154147352589", "title": "Vue 解决 Warning: [antdv: LocaleProvider] `LocaleProvider` is deprecated .....", "desc": "在使用 antdv 进行中文化的时候报错：Warning: [antdv: LocaleProvider] 'LocaleProvider' is deprecated. Please use 'locale' with 'ConfigProvider' instead。 原因…"}, {"id": "6897766237632200711", "title": "Vue2.6实现去哪儿网 --浏览器兼容&常见问题", "desc": "一.浏览器兼容&常见问题阻止移动端用户放大内容重置浏览器页面样式移动端一像素边框解决方案移动端300毫秒点击延迟解决方案二.实操阻止移动端用户放大内容  在meta标签中加入内联属性initial-s"}, {"id": "6941391044273504292", "title": "vue-cli配置less变量的两种方式,  你都会吗?", "desc": "改动了webpack配置文件一定要重启才能生效。 方式二. 在vue.config.js中使用 顺利的话, 按照上面的三四五步骤走一遍就可以了生效了. 可能是安装style-resources-loader时, 没有一并安装上vue-cli-plugin-style-resou…"}, {"id": "6916419818266558472", "title": "Vue 数据响应式原理 defineProperty", "desc": "es6中的gettersetter属性es6之前要得到姓名需要定义函数old姓名并且调用obj3.old姓名()注意，因为这是传统的函数，所以肯定是要圆括号的但现在你只需要console.log(ob"}, {"id": "6844903501231816718", "title": "EngJS(超轻量) 中数据双向绑定如何使用 ", "desc": "所有支持数据双向绑定的js工具 ,触发双向关系的基本方式无外乎 wather关系 和 事件关系 两种 . 前者操作数据时 ,后者触发事件时. 下面简单 的介绍Eng 中 的 watcher 与 dom事件 的 双向数据关系如何使用 ,体会Eng不同之处. 在watcherFor…"}, {"id": "6844903873023475725", "title": "使用ES6编写的一个类似laravel的js验证模块.", "desc": "使用ES6编写的一个类似laravel的js验证模块.安装基本用法定义验证规则\"|\"分隔的字符串形式数组形式其他自定义错误消息、属性别名、验证函数LicenseMIT"}, {"id": "6844903913213149197", "title": "实现简易的MVVM", "desc": "在MVVM中，数据、视图是相互影响的。 vue中通过数据劫持，实现双向数据绑定。 在这段代码中，obj[a],obj[b],obj[c],obj[d]的输出结果都是4。验证了我们的结论。 这样总没问题了吧，但是，少年，你还是太天真了。执行obj[key]时会自动执行get()方…"}, {"id": "6844903866392117261", "title": "vue 状态管理（二）", "desc": "上篇文章中说了 state 和 getters，本篇文章就来说说 mutations 和 actions。 提交 mutations 是改变 state 的唯一方式，不能用异步操作。actions 通过分发 action 来提交 mutation，可包含异步操作，比如 xhr …"}, {"id": "7005190050010906638", "title": "深入了解VueJs响应式原理", "desc": "数据驱动 响应式的核心原理 发布订阅模式和观察者模式 数据驱动 数据响应式、双向绑定、数据驱动 数据响应式 数据模型仅仅是普通的Javascript对象，当我们修改数据时，视图会进行更新，避免了繁琐的"}, {"id": "6872113750636232712", "title": "Vue3.0来袭，你想学的都在这里（二）", "desc": "最近在工作之余一直学习Vue3.0相关知识，虽然Vue3.0至今还是rc版，但这并不影响我们去学习。今天这篇文章是我关于Vue3.0的第四篇文章。在前文中我们讲解了如何通过vite和vuecli搭建Vue3.0开发环境，然后介绍了Vue3.0中的setup,reactive,r…"}, {"id": "6934316962952544269", "title": "vue-cli 迁移 vite2 实践小结", "desc": "两周前（202.02.17），vite2.0 发布了，作为使用了浏览器原生 ESM 为下一代前端工具，vite 2.0 相较于 1.0 更加成熟。在此之前笔者就开始关注这类「新型」的前端工具。这次趁着 vite 2.0 发布，也成功将一个基于 vue-cli(-service)…"}, {"id": "7001640848832069646", "title": "搭建vue开发环境", "desc": "这是我参与8月更文挑战的第28天，活动详情查看:8月更文挑战 引入vue vue对于新手来说是先推荐使用script引入的开发模式。不推荐使用脚手架的开发模式。 我们为了方便就不再去官网下载vue.j"}, {"id": "6984589942840098829", "title": "【源码学习】Vue 初始化过程 (附思维导图)", "desc": "本文是开始学习 Vue 源码的第二篇-Vue初始化过程，当前的版本是 2.6.14 。代码基本上是逐行注释... ..."}, {"id": "6995777099004903461", "title": "从Vue2.0到React17——React路由入门(一)", "desc": "React作为一个MVVM框架，路由功能是必不可少的，回顾我们在使用Vue Router的过程中，最常用的一些功能是**路由页面的渲染**，**路由页面内容的添加**，**路由地址的配置**，**路由"}, {"id": "6961323639065018405", "title": "中大型项目中对网络请求(Axios)、Helper封装", "desc": "前言 接触Vue已经有几年了，每次新建项目都有一些新奇的想法，之前分享过一篇Vue中使用Axios拦截器（拦截请求与相应），由于我最近的项目需要长期维护，所以不能再向小项目那种方式创建前端架构了，需求"}, {"id": "6999913086165467172", "title": "Vue 打包 chunk-vendors.js 文件过大导致页面加载缓慢解决方案", "desc": "一、chunk-vendors.js 简介 顾名思义，chunk-vendors.js 是捆绑所有不是自己的模块，而是来自其他方的模块的捆绑包，它们称为第三方模块或供应商模块。 通常，它意味着（仅和）"}, {"id": "6844903677262561293", "title": "Vue 应用性能优化指南", "desc": "得益于 Vue 的 响应式系统 和 虚拟 DOM 系统 ，Vue 在渲染组件的过程中能自动追踪数据的依赖，并精确知晓数据更新的时候哪个组件需要重新渲染，渲染之后也会经过虚拟 DOM diff 之后才会真正更新到 DOM 上，Vue 应用的开发者一般不需要做额外的优化工作。 但在…"}, {"id": "7000184451590258701", "title": "vue-router的路由懒加载", "desc": "路由懒加载也叫作延迟加载，使用懒加载可以减少我们第一次打开项目首页的时间，不至于页面出现长时间的白屏，即使添加了开场动画也不好看，而使用懒"}, {"id": "7001741903959949320", "title": "Vue3.0 响应式实现原理分析", "desc": "我们知道Vue 2.0是利用Ojbect.defineProperty对对象的已有属性值的读取和修改进行劫持，但是这个API不能监听对象属性的监听和删除，此外为了深度劫持对象的内部属性，必须在初始化的"}, {"id": "7000749801734144008", "title": "Vue3从0到1组件开发-业务组件：loading动画", "desc": "loading动画的使用 loading动画已经在交互圈子里算是老常客了，老派的、时尚的、酷炫的也是各种各样，令人眼花缭乱。 尽管如此，这"}, {"id": "6999888001425735710", "title": "vue与axios上传视频并显示上传进度", "desc": "做项目难免会有各种各样的需求,这次是上传视频并显示上传进度,好的我们开始吧 首先先引入axios,我这里是单文件引入,没有使用封装 主要用到的参数有 需要个触发选择文件上传的按钮 这里用的elemen"}, {"id": "6993099174640254989", "title": "🌵明晰Vue中的侦听器", "desc": "一、侦听器的基本用法 二、侦听器的格式 方法格式的侦听器 缺点1：无法在刚进入页面的时候，自动触发！ 缺点2：如果侦听的是一个对象，如果属性"}, {"id": "6874022299901624334", "title": "那个男人 他带着Vue3来了~", "desc": "其实Vue3.0版本发布的消息，我是昨天晚上刷朋友圈看到的（已经差不多凌晨 1 点了），然后我就立刻起来，打开电脑，看了一下github，把官方发布文档过了一遍。其实我感觉这次版本更新，最主要的还是Composition API以及对于TypeScript的支持，而且早在 4 …"}, {"id": "7005109386188324877", "title": "vue 主要原理知识点", "desc": "vue数据处理 vue在初始化的时候会调用initState(vm),这个函数接受vue的实例作为参数,所有的数据操作都和由这个函数处理 vue2响应式数据实现原理 首先调用observe(data)"}, {"id": "6908492497261953038", "title": "总结我对Vue项目团队开发的一些基本配置封装分享", "desc": "本篇文章主要带来的是 vue 基础架构 篇，大家都知道， Vue3.0 后 Vue2.0 会有一个终结版出来，也就说明 Vue 迎来了新时代，但是并不是所有项目都能够一起迈向新时代的轮船。本文主要是承接上篇优化的技巧文章做一个续篇吧，这个续篇主要是针对团队开发相关的东西，相关插…"}, {"id": "6844904117337341959", "title": "【图文并茂，点赞收藏哦！】重学巩固你的Vuejs知识体系", "desc": "置身世外只为暗中观察！！！Hello大家好，我是魔王哪吒！重学巩固你的Vuejs知识体系，如果有哪些知识点遗漏，还望在评论中说明，让我可以及时更新本篇内容知识体系。欢迎点赞收藏！ 插值语法：Mustache，v-once，v-html，v-text，v-pre，v-block。…"}, {"id": "6999519610324123684", "title": "vue低代码（二） -- 项目准备", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战。 1. 项目准备 现在准备实现一个简单的vue低代码项目，首先确保node环境的安装，我们直接通过vue-cli脚手架创建一个vue项目 项"}, {"id": "6844904115949027336", "title": "10个Vue开发技巧助力成为更好的工程师", "desc": "在组件中使用 $route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。 函数式组件是无状态，它无法实例化，没有任何的生命周期和方法。创建函数式组件也很简单，只需要在模板添加 functional 声明即可。一般适合只依赖于外部数…"}, {"id": "6844903764294369288", "title": "[ 逻辑锻炼] 用 JavaScript 做一个小游戏 ——2048 （详解版）", "desc": "这次使用了 vue 来编写 2048，主要目的是温习一下 vue。"}, {"id": "6894171975913537549", "title": "Vue实现boradcast和dispatch", "desc": "这篇内容主要是学习掘金小册vue组件精讲的一个案例，自己做下笔记，以免日后忘记。 我所理解的mixins就是共享，就好比面向对象里面的原型prototype那种感觉的东西，把相同的逻辑抽离出来便于维护。 methods 里定义的 dispatch 和 broadcast 方法会…"}, {"id": "6914514730782556167", "title": "vue2核心原理(简易)-异步更新(Vue.nextTick)笔记", "desc": "前言本章项目地址为什么异步更新，拿data中的属性举例，如果某个数据多次的去赋值，每次都去重新编译、比较vnode、渲染Dom耗费性能我们把更新视图的数据行为收集起来，去重，防抖通过异步行为实现(如s"}, {"id": "6844904150434578446", "title": "【vue@leaflet】 加载矢量切片服务", "desc": "需要注意的是当你选择以 tms 服务时， tms: true,该属性要设为 true，interactive 是开启图层事件的属性。"}, {"id": "6941004655979659294", "title": "关于vue-cli打包后，发布包在本地直接index运行， 及本地读取json文件（不依靠服务器纯本地读取）的问题", "desc": "最近由后台管理系统转向了智能设备的硬件开发，首先碰到的问题就是要讲vuecli打包文件，从服务器运行改为直接本地打开index.html运行（因为原生app要直接读取路径运行页面），这里简单记录下遇到的几个问题及解决的方法。 P.S 奇怪的是同样是导出的配置，修改output.…"}, {"id": "6844903841637335054", "title": "Vue项目打包后动态获取自定义变量", "desc": "感谢支持。若不足之处，欢迎大家指出，共勉。 本文章采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可。"}, {"id": "6977172746098704421", "title": "vue快速转react系列", "desc": "react中的循环 react中循环：map 运行效果 vue3中使用v-for进行循环 运行效果,react中的循环 react中循环：map 运行效果 vue3中使用v-for进行循环 运行效果"}, {"id": "6844904150145171470", "title": "[译]Composition API RFC （二）", "desc": "这里提议的APIs并没有带来新的概念，更多的是以独立函数的方式揭露Vue的核心能力，例如创建并观察响应式state。这里我们将介绍大部分基础APIs，以及如何使用他们来实现 Vue 2版本中的组件逻辑。注意这个部分主要聚焦于基础部分，因此没有详细介绍每个API的细节。可以在AP…"}, {"id": "6844903865792331790", "title": "Vue 2.x折腾记 - (22) Vue 打包图片在safari不显示的问题", "desc": "safari(桌面、手机）不显示图片，其他浏览器都是正常的。 一一排查下来，啥毛病都没，资源也没有被拦截(safari的资源管理器可以看到图片资源）。 google大法，群友，没有一个人能说出个所以然。 只能说具体问题要具体分析，才能找到问题根源并且解决。"}, {"id": "6844903671428284429", "title": "vue状态管理演进", "desc": "在vue中涉及到比较复杂的数据流转、交互，我们一般都会考虑用vux来进行数据的状态管理。经常使用，时常想它是怎么实现的，尝试简易实现一下。 让我们创建一个state对象，并从那里管理我们的整转态。 遗憾的是这不能正常工作，这是为什么？因为Vue使用数据方法来触发其“响应式反应”…"}, {"id": "6844903541128069133", "title": "vue的一个分页组件", "desc": "之前用ember.js写过一个类似组件，现在基于vue2.0封装一个，方便以后用于不同项目，可以拿来直接使用. 渲染页面，当然这只是相通的一小部分，也是这类框架基本思想。"}, {"id": "6976919642254082056", "title": "微型Vue框架构建Part2——实现数据代理", "desc": "使用Object.defineProperty()实现数据代理 PS：Object.defineProperty()方法链接 https://developer.mozilla.org/zh-CN/d"}, {"id": "6844904070671499278", "title": "Vue响应式原理简单实现", "desc": "vue是采用数据劫持配合发布者订阅模式的方式，通过Object.defineProperty()来劫持各个属性setter,getter。在数据发生变化时，发布消息给依赖收集器（dep）,去通知观察者（watcher）,做出对应的回调函数，去更新视图。从而实现数据驱动视图。 我…"}, {"id": "6905713523629064199", "title": "《深入浅出vue.js》 总结", "desc": "本书也算是vue.js 的进阶书籍吧！当自己大概的也会用vue之后，也只是会写写逻辑。只是停留在了会用的层面，当问到一些原理的时候，总不知道该怎么说，但知道如何去使用。于是花了三天的时间把vue的内部知识过了一遍，但是里面的一些代码自己看不懂。当把这些能有点印象，能理解一点的内…"}, {"id": "6977022803744653320", "title": "Vue：深入理解 Vue 的 .sync 修饰符", "desc": "官方文档对.sync修饰符已经做了详细讲解。 .sync 修饰符以前存在于 Vue1.0 版本里，后来在2.0版本中移除了 .sync 修饰符。但是在 2.0 发布之后的实际应用中，我们发现 .syn"}, {"id": "6844904025738084366", "title": "Vue组件", "desc": "include - 字符串或正则表达式。只有名称匹配的组件会被缓存。 exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。 max - 数字。最多可以缓存多少组件实例。 activated keep-alive 组件激活时调用。 deactivated ke…"}, {"id": "6844903693599555598", "title": "vue组件从开发到发布", "desc": "梳理一篇vue组件从开发到发布托管流程。"}, {"id": "6909795607020306439", "title": "vue3新特性学习归纳整理", "desc": "Performance：性能更比Vue 2.0强。 Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。 对于小型项目上述亮点感知不是很明显，这些亮点尤其突出体现在复杂业务场景的大型项目中，会带来更好的体验，对生产效率有较大提升。 在 Vue 3 中…"}, {"id": "6844903558626689032", "title": "从零开始做Vue前端架构（2）", "desc": "这一篇，我们将接着上篇来完成配置eslint、babel、postcss。 我们采用eslint --init的方式来创建eslintrc.js。 对了，前提我们需要全局安装eslint：npm i -g eslint。 当然，你可以按照自己喜欢，选择自己想要的方式，比如How…"}, {"id": "6844903946247471112", "title": "Vue + iview + webpack  ie 浏览器兼容简单处理", "desc": "ie 浏览器不支持 ES6 Promise 的语法。 ie8 及以下对 html5 标签不兼容（可以通过引入html5shiv包解决，本文不处理IE11的更低版本，故不提及此法）。 ie9 以下 对 CSS3 的不兼容，各种不兼容的细节比较多，这里不说明。 ie10 及以下浏览…"}, {"id": "6844904036877991943", "title": "面向未来编程 - vue-function-api究竟是干什么的？", "desc": "假设产品给我们提出一个需求，读取用户的文章列表，并根据滚动距离来显示或隐藏顶部导航条。 如果你是一个有经验的开发工程师，你很容易会想到提取一些公共逻辑方便多个组件间复用。 本文我们利用mixin实现滚动逻辑，高阶组件实现数据逻辑。具体实现如下： 我们利用scroll事件监听器，…"}, {"id": "6844904136073297933", "title": "Vue项目之PHP无法获取来自axios的数据", "desc": "前两天做Vue项目的时候，本来打算通过php实现登陆和注册功能，结果在使用axios发起请求的时候，php后台接收到的数据$_POST始终为null。在网上浏览了许多篇技术文章，才明白是因为axios请求的数据格式和$_POST能够接收的数据格式不一致。于是我尝试了几种来自网上…"}, {"id": "6881903934957584398", "title": "vue源码学习（5）小结", "desc": "作用：全局注册一个混入（mixin），影响之后创建的每个Vue.js实例。"}, {"id": "6844903577089998862", "title": "一个基于Vue.js2的图片浏览插件", "desc": "一个简单易用的图片浏览组件 - 易用 - 滑动换图 - 支持手势缩放 请使用移动浏览器打开 demo https://ssshooter.github.io/img-vuer/index.html"}, {"id": "6923008526944043021", "title": "Vue-组件通信方式 ", "desc": "创建唯一的全局数据管理者store，通过它管理数据并通知组件状态变更。 兄弟组件之间通信可通过共同祖辈搭桥，$parent或$root。 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class和style除外)。当一个组件没有声明任何 prop 时，这里…"}, {"id": "6922833941351120910", "title": "mixins混入", "desc": "特点：方法和参数在各组件中不共享值为对象的选项，如methods,components等，选项会被合并，键冲突的组件会覆盖混入对象的值为函数的选项，如created,mounted等，就会被合并调用，"}, {"id": "6922727886692876296", "title": "每个前端工程师都应该懂的Vue.js性能优化技巧", "desc": "这篇文章主要参考了 Vue.js 核心成员 Guillaume Chau 在 19 年美国的 Vue conf 分享的主题：9 Performance secrets revealed，分享中提到了九个 Vue.js 性能优化的技巧。 我看完他的分享 PPT后，也阅读了相关的项…"}, {"id": "6844903765347319816", "title": "vue-classify, 将 JS 写的 vue option object 转为 Typescript class 形式", "desc": "批量迁移业务组件，辅助使用 Vue 写的项目从 js 迁移到 ts。 个人作品，做个小广告。"}, {"id": "6844904120982175758", "title": "Vue 2.x 源码解读系列《入坑篇》", "desc": "阅读 Vue 的源码第一篇，本文主要分享 Vue 的大体代码结构。如果觉得文章有点长，那么你可以选择跳过，直接瞄一眼右边的目录结构就可以了。 Vue 的代码结果非常地清晰，一个 Vue 类代码分散到多个文件中，方便管理。也不会让人看起源码来感觉到无比恐惧，真是看者无意，作者有心…"}, {"id": "6943478886063669278", "title": "Calendar calendar控件的月份添加点击事件", "desc": "this.let prevBtn = document.querySelector('.el-calendar__button-group .prevBtn.console.info(this.this.dateFormat('YYYY-mm-dd',this.let currB..."}, {"id": "6911890637096747022", "title": "Vue@2x , v-model 指令双向绑定原理", "desc": "Vue 给我们提供了一些非常方便的内置指令，其中使用最多的应该就是 v-model指令了，但可能使用很频繁却鲜有人深入理解官方是怎么实现这个双向绑定指令的。 借空余时间就深入源码分析了Vue@2x, 从模板到完成DOM 元素的渲染都做了哪些事情。 我们在示例代码中定义了如下模板…"}, {"id": "6844903991181049863", "title": "响应式原理-vue2.x版（下）", "desc": "上一篇分析了data的初始化过程以及做的一些操作，这一篇分析依赖收集和派发更新。 在getter的逻辑里面，关键的两步是const dep = new Dep()和dep.depend()，第一步是实例化一个Dep实例，第二步就是实现依赖收集。 可以看到，Dep是对subs数组…"}, {"id": "6844903844569169934", "title": "Vue CLI3创建项目部署到Tomcat 使用ngrok映射到外网", "desc": "1.准备工作。 下载到本地后，解压缩，并且将解压缩后的文件夹复制到以下路径下，其中电脑名称就是你的用户名称。 ，并且重命名为ApacheTomcat，这里要提一下，在这个文件夹下有个webapps，双击进去，会有很多文件，不用关心。其中有一个ROOT文件夹，这个就是我们放置编译…"}, {"id": "6844903782489260040", "title": "Webpack 是怎样运行的?（二）", "desc": ""}, {"id": "6844903565626982414", "title": "Full-featured Vue 评分组件", "desc": "Rate with star, heart, emoji or anything you like. See the beautiful doc for vue-cute-rate. Powered by kokk 🍹 See the doc for details."}, {"id": "6844903608421449741", "title": "@xunlei/vuex-connector Vue 生态中的容器组件 store 连接器", "desc": "基于 Vue 生态实现的 Vuex store connector，借鉴 React 容器组件和展示组件的模式。之前在掘金专栏文章《致敬 React: 为 Vue 引入容器组件和展示组件》详细说明了为什么要写容器组件，以及如何在 Vue 中编写容器组件，这个轮子帮你快速实践起来"}, {"id": "6871131235692445710", "title": "对Vue框架一探究竟——Vue基础扫盲、原理与进阶", "desc": "调整 webpack 配置最简单的方式就是在 vue.config.js 中的 configureWebpack 选项提供一个对象. 当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限…"}, {"id": "6861943138102018061", "title": "vue源码分析——从实例化到渲染流程", "desc": "本文的Vue版本是2.5.17，它是由runtime+compiler构建的Vue.js版.英寸Vue.js版在2.0中，渲染是通过render函数完成的。如果包含template属性，则需要将template编译到render函数中。编译过程将运行，所以需要带有Compile…"}, {"id": "6900903694301134855", "title": "搞不动Vue3.0的源码，先做个API调用师也行（新人踩坑初试）", "desc": "作为一个刚刚入行工作不久的前端菜鸟，Vue2.x都没整熟练。但看着身边人都在学习Vue3，我也不敢怠慢，毕竟Vue3正式版已经发布两个月了，我还是耐着性子好好的阅读了一下Vue3.0的文档。没有其他大佬们上来就看源码的气势，但我还是想做个学习笔记，至少先做个API调用师吧。 为…"}, {"id": "6844903648019873800", "title": "寻找项目中顶级Vue对象 (一)", "desc": "在调试Chrome的时候, 发现不能找到vm这个对象. 在window下面也没有看到这个对象. 产生了好奇心. 找到了new Vue的运行栈. 但是没能确定在Vue中具体的运行过程. 应该是在import的时候, webpack就把引入的Vue对象放到了某个地方, 保存起来了.…"}, {"id": "6844903688935325704", "title": "谈，前端框架的『御剑之道』", "desc": "剑，是剑客的武器，而现代前端工程师的剑可以理解为前端框架(当然不止是前端框架，但今天我们只谈前端框架)。 所谓御剑之道，指的是如何驾驭所有前端框架。对，你没有看错，是所有，而不是某一个。 如果是介绍如何驾驭某一个框架，那么本文的标题可能就要改成“御剑之术”，但本文介绍的是“御剑…"}, {"id": "6907123648079855624", "title": "svg-icon 使用svg-sprite-loader", "desc": "1、安装svg-sprite-loader2、在vue.config.js配置3、封装svg-icon组件使用改进每次组件都用局部注册每次使用都需要引入对应的svg"}, {"id": "6945741418258235429", "title": "Vue2.x 的双向绑定原理及实现", "desc": "Vue 是利用的 Object.defineProperty()方法进行的数据劫持，利用 set、get 来检测数据的读写。 MVVM 框架主要包含两个方面，数据变化更新视图，视图变化更新数据。 视图变化更新数据，如果是像 input 这种标签，可以使用 oninput 事件.…"}, {"id": "6981326661769773063", "title": "前端如何实现一个类似淘宝中的运营弹窗效果，看这里！", "desc": "运营活动一直是各公司的重点工作，弹窗作为重要的活动引导方式，已经渗透到了用户的各个行为链路中。最近项目中有个简单的需求，是要实现一个简单的运营弹窗效果。那么现在和我一起学习下是如何实现的吧~"}, {"id": "6913193390020493320", "title": "Vue2核心原理(简易版)-异步更新", "desc": "nextTick具体实现，vue2兼容了各种浏览器的适配情况，按照微任务的优先级制作了一个timer方法。"}, {"id": "6981317215362482190", "title": "Vue3之模板语法", "desc": "Vue.js使用基于HTML的模板语法，允许开发者声名式地将DOM绑定至底层组件实例的数据。所有Vue.js的模板都是合法的HTML，所以能被遵循规范的浏览器和HTML解析器解析。 在底层的实现上，V"}, {"id": "6844904065919352839", "title": "Mock在Vue项目中的一点应用", "desc": "Mock通过随机数据，模拟各种场景；不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据；支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等；支持支持扩展更多数据类型，支持自定义函数和正则。 优点是非常简单方便, 无侵入性, 基本覆盖常用的接口数据类…"}, {"id": "6844903666940379144", "title": "React骚操作——jsx遇到template-directive", "desc": "“React 和 Vue 哪个更好？” 论坛上经常看到这样的问题，然后评论区就直接开战了。也有朋友转行做前端，问我该学React还是Vue。几年前，可能确实有必要考虑下到底该选择哪一个，毕竟前端圈子这么乱，谁又知道Vue能走多远？React会不会不维护了呢？可现在两者生态都很不…"}, {"id": "6844903891931398158", "title": "Vue - SSR - 服务端渲染搭建过程 - 分三步来理解 SSR - 简单的搭建起 SSR", "desc": "可能我们平常接触比较多的是使用 vue + vue全家桶来搭建起一个单页（SPA）应用。用 ssr 搭建项目比较少，本文是记录我在学习 ssr 过程中的一些见解，如有出错或疏漏，麻烦帮忙指正！文章共分为三个步骤来实现搭建一个简单 ssr 项目： 使用服务端渲染，内容到达时间更快…"}, {"id": "6981325579437998111", "title": "vue3.0实现省市县三级联动", "desc": "全量省市县json数据下载，vue3实现三级联动。 ui使用elementPlus 纯前端实现省市县三级联动"}, {"id": "6955468995973611550", "title": "3 分钟了解 Vue 应用测试", "desc": "最近阅读了一本书《Vue.js 应用测试》，感觉收获满满。 这本书是 Vue 官方测试工具作者 Edd Yerburgh亲笔撰写，语言幽默风趣，简洁明了, 强烈推荐！"}, {"id": "6981262282517348360", "title": "Ant Design Vue项目（2）", "desc": "VUE项目实战 Ant Design Vue项目 第二步（整体布局） 整体布局 使用Ant Design Vue组件，定义了布局组件"}, {"id": "6977179367528988703", "title": "前后端分离的Vue+Spring boot+redis部署", "desc": "前后端分离的系统部署有很多文章都涉及到，这里就不详细介绍整个过程了。只是将个人发布时遇到的一些坑，重点强调一下，供以后发布时参考。"}, {"id": "6915728178359042056", "title": "前端2021: vue3.0项目的环境搭建", "desc": "更新脚手架clivueCli创建项目vuecreatevue-next-jsapp为项目checkRouterVuex等所需插件enter键进入：chooseVueversion选择特性feature"}, {"id": "6977173111867179015", "title": "vue 项目路由权限管理实现", "desc": "项目基于 vue-element-admin 基础之上进行开发，感谢 花裤衩 以及为此项目做出贡献的大佬！路由数据由后端控制，前端调用接口返回数据；前端拿到数据处理成可使用的路由结构，然后渲染到页面。"}, {"id": "6977168331103010847", "title": "自定义Vue-CLI模板", "desc": "自定义Vue-CLI模板 实现的原理是 Vue CLI preset ，即在创建新项目时使用预定义的配置和要用到的插件，而这些预定义的内容支持放在 Git 上（包括 GitHub、GitLab 等），"}, {"id": "6844903614440439822", "title": "[vue] 表单输入格式化，中文输入法异常", "desc": "v-model 是 vue.js 提供的语法糖，根据不同的表单控件监听不同的事件，实现对表单控件的数据双向绑定。当控件是<input>输入框时，v-model 监听其 input 事件。如下所示，这两种写法有什么区别吗？ 表单输入常见需求：对<input>控件输入的内容进行格式…"}, {"id": "6880794286888058888", "title": "🏆 掘金技术征文|双节特别篇 vue3——composition API", "desc": "这些生命周期注册方法只能用在 setup 钩子中。它会通过内部的全局状态自动找到调用此 setup 钩子的实例。有意如此设计是为了减少将逻辑提取到外部函数时的冲突。 组合式 API 会在 2.x 的选项 (data、computed 和 methods) 之前解析，并且不能提前…"}, {"id": "6844903945819652104", "title": "Vue Composition API 响应式包装对象原理", "desc": "上一篇文章Vue 3.0 最新进展，Composition API中，笔者通过描述Vue Composition API 的最新修正，本文通过解析@vue/composition-api的响应式原理部分代码，以便在解读学习过程中，加深对 Vue Composition API …"}, {"id": "6844903609314836487", "title": "Vue项目中路由动态传参功能相关实现", "desc": "这两天在项目中有个新需求：在当前页面中的有很多数据，过滤数据的条件有时间，页码，类型，id搜索....，假设我在页面中选择的某段时间，某个类型，现在我需要把握当前看到的信息完全展现给另一朋友。 一. 初步解决方案 查阅官方文档发现文档中有此段话：记住参数或查询的改变并不会触发进…"}, {"id": "7007328894621581349", "title": " Vue.$nextTick你真的懂了吗？？？", "desc": "原理性的东西就会文字较多，请耐下心来，细细品味 Vue中DOM更新机制 当你气势汹汹地使用Vue大展宏图的时候，突然发现，咦，我明明对这个数据进行更改了，但是当我获取它的时候怎么是上一次的值"}, {"id": "7005956935937687583", "title": "（建议收藏）第一人称视角带你走进 Vue 源码世界", "desc": "前言 本文会以第一人称视角带大家读源码。简单易懂，大佬小白都能看明白。并收获益处。欢迎 react 用户来怼！"}, {"id": "7007994457261867016", "title": "vue3切换轮播图，改变音频对应进度条的位置", "desc": "最近在做移动端的音频播放，以轮播图的形式展现。 如图： 已知接口返回： 话不多说，上代码： 轮播图是vant库里面的组件，注释掉的部分可以用来作为页码。 应要求，音频audio是不展示出来的，只显示进"}, {"id": "7007997736582643725", "title": "element 树形控件父子节点不相关联（勾选父节点时，子节点不会被勾选，取消父节点时，子节点全部取消）", "desc": "要实现的效果为，勾选父节点时，子节点不会被勾选，如图： 勾选子节点时，父节点勾选，如图： 取消父节点时，子节点全部取消，如图： 1、在el-tree代码中加上父子节点不互相关联的属性，:check-s"}, {"id": "7007791264921993253", "title": "vue中使用a标签下载静态资源文件（比如excel、pdf等）后端不参与", "desc": "问题描述 平常我们在项目中需要做下载文件的功能，比如下载excel表格、比如下载pdf文件、比如下载word文档，这样的功能，一般是后端做，即：后端返回一个流文件、或者返回一个url地址。 但是，实际"}, {"id": "6999687348120190983", "title": "Vue3的7种和Vue2的12种组件通信，值得收藏", "desc": "本文整理了 Vue3 的7种组件通信和 Vue2 的12种组件通信写法，希望对你有一点点帮助，奥力给"}, {"id": "7007777422342881317", "title": "vue3.0项目- 利用@vueuse/core实现组件数据懒加载", "desc": "@vueuse/core实现组件数据懒加载 目的： 实现当组件进入可视区域再加载数据。 核心： 利用 @vueuse/core 中的 useIntersectionObserver 来监听组件进入视图"}, {"id": "7007755844959862792", "title": "vue 组件通信方式", "desc": "vue 中组件通信总共分为四种，父子组件通信，子父组件通信，兄弟组件通信，祖孙组件通信 1. 父子通信 父组件通过属性绑定方式，向自子组件传递数据 子组件通过props 接受父组件传递的数据，prop"}, {"id": "7007956477566517285", "title": "Vue果果记账-列表展示", "desc": "deep语法 因为之前在记账页已经有一个type组建了，统计页想直接拿过来用。但是我们想要使用scoped将范围缩小在本组建内，那么css怎么深入到我们想拿过来用的type组件里的li呢？？ vue给"}, {"id": "7007771919885811720", "title": "vue中less使用小技巧", "desc": "我们所能看到的美观的网页都是经过UI精心设计后，由前端攻城狮搭建的。网页想要有炫酷的样式，就需要用到css来处理，其中不乏会出现大量重复、冗余的代码......"}, {"id": "6994959998283907102", "title": "15张图，20分钟吃透Diff算法核心原理，我说的！！！", "desc": "前言 大家好，我是林三心，在日常面试中，Diff算法都是绕不过去的一道坎，用最通俗的话，讲最难的知识点一直是我写文章的宗旨，今天我就用通俗的方式来讲解一下Diff算法吧？Lets Go 什么是虚拟DO"}, {"id": "7005751368937897991", "title": "关于Vue代码可读性的几点建议 | 评论有奖", "desc": "本文已参加评论抽周边礼物活动，掘金徽章*2，评论相关内容即可参与抽奖 [查看详情](https://juejin.cn/post/7000643252957216782 \"https://juejin"}, {"id": "6997943192851054606", "title": "Vue 3.2 发布了，那尤雨溪是怎么发布 Vue.js 的？", "desc": "1. 熟悉 vuejs 发布流程 2. 学会调试 nodejs 代码 3. 动手优化公司项目发布流程"}, {"id": "7001998089938534437", "title": "我是如何用这3个小工具，助力小姐姐提升100%开发效率的", "desc": "前言 简单的知识点搭配合适的业务场景，往往能起到意想不到的效果。这篇文章会用三个最基础人人都知道的前端知识来说明如何助力运营小姐姐、公司48+前端开发同学的日常工作，让他们的工作效率得到极大地提升。 "}, {"id": "7001999813344493581", "title": "林三心画了8张图，最通俗易懂的Vue3响应式核心原理解析", "desc": "前言 大家好，我是林三心，大家也知道，本菜鸟平时写基础文章比较多，我始终坚信两句话 用最通俗易懂的话，讲最难的知识点 基础是进阶的前提 其实Vue3已经出来很久了，可能大部分公司都用上了"}, {"id": "7005107384611766285", "title": "【VUE】后台管理中使用富文本编辑器", "desc": "前言 vue后台管理编辑器 以下代码均可直接复制，只需要更改一些引入的路径 教学文档以及官方文档都有进行备注 一.介绍 使用的插件介绍 wangEditor 浏览器兼容性 兼容主流 PC 浏览器，IE"}, {"id": "7004738881778090014", "title": "重生Vue路由模式区别只有\"#\"?之回家等通知(带图)", "desc": "前言 我被一个关于VueRouter的问题难倒了,关于VueRouter的面试题不敢说精通,但是熟悉总可以吧,基本要点我虽然菜狗但是我也能描述一个1,2,3...但是直到我遇到了它: 本文将会为你具象"}, {"id": "7006108454028836895", "title": "Vue3.2 setup语法糖、Composition API归纳总结", "desc": "起初 Vue3.0 暴露变量必须 return 出来，template中才能使用； Vue3.2 中 只需要在 script 标签上加上 setup 属性，组件在编译的过程中代码运行的上下文是在 se"}, {"id": "7005880217684148231", "title": "我在项目中用实际用到的22个Vue优化技巧", "desc": "我列举了我在项目实际有用到的22个Vue优化技巧。代码绝不止能跑就行、相信你看了能写出更加 妙啊 的代码，但是废话只说一句：码字不易求个👍，🙇‍🙇‍🙇‍。"}, {"id": "7005479358085201957", "title": "6年的老项目迁移vite2，提速几十倍，真香", "desc": "内部系统vue-cli3迁移到vite2 解决开发环境启动打包编译慢、热更新慢的痛点，迁移到vite2后效果显著"}, {"id": "6844903607985258510", "title": "记一次vue+element+echarts项目的优化（如何轻松将项目性能提升70%）", "desc": "最近在做一个项目，技术栈为vue全家桶 + element-ui + echarts，打包后发现有1.44M，首屏体验很差。这能忍？果断开始优化。下面说说我是如何将一个打包后1.44MB的项目变成打包后只有0.42MB，性能提升70% 的。 vue-cli提供了一个很方便的查看…"}, {"id": "6992882964866531364", "title": " Vue Diff 算法的执行过程探究", "desc": "Diff 算法的执行过程 描述diff算法的执行过程之前，首先需要了解的是虚拟DOM的diff算法的比较对象是什么？以及怎么描述虚拟DOM，是真的创建一个DOM树对比还是其他的方式？ 虚拟dom中的d"}, {"id": "6844903725975240711", "title": "《从零构建前后分离的web项目》：前端1.0 终 - 前端性能优化 (多图预警)", "desc": "我们通常在本地开发，本地环境和线上也并非完全一样，很多项目第一次上线几乎都会遇到本地开发无法复现的问题，可能是字体、样式的问题，也可能是webpack 编译的问题、甚至可能是本地的奇葩环境。所以 本地完美运行 ≠ 线上完美运行，我们需要 build 项目，模拟线上测试一下，看看…"}, {"id": "6844903924760051725", "title": "Vue - 路由守卫（路由的生命周期）", "desc": "【3】组件守卫：是指在组件内执行的钩子函数，类似于组件内的生命周期，相当于为配置路由的组件添加的生命周期钩子函数。 next()：进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed(确认的)。 next( false )中断当前的导航。如果浏览器的…"}, {"id": "6997058084866621453", "title": "Vue3中非 Prop 的 Attribute", "desc": "一个非 prop的attribute是指传向一个组件，但是该组件并没有相应props或emits定义的attribute。常见的示例包括class、style和 id属性"}, {"id": "6933463466111926286", "title": "在 Vue3 项目中集成 VSCode - 实现 Vite + Vue3 + MonacoEdit", "desc": "概述MonacoEdit是微软提供的在线编辑器库，vscode就是基于这个实现，现在实现将MonacoEdit集成到vue3项目中方案采用vite+vue3实现方法首先初始化一个vue3项目创建完得到"}, {"id": "6844903973502058504", "title": "Vue render函数", "desc": "通过上图, 应该可以理解一个Vue组件是如何运行起来的. render渲染函数, render渲染函数是用来生成Virtual DOM的. Vue推荐使用模板来构建我们的应用程序, 在底层实现中Vue最终还是会将模板编译成渲染函数. 因此, 若我们想要得到更好的控制, 可以直接…"}, {"id": "6994365575027752967", "title": "我用 Vue +Fabric.js写了个简易的H5可视化图片编辑器", "desc": "效果图： 技术选型 Vue3 Element-plus Fabric.js ES6 核心功能 主要实现H5 移动端简单的图片的可视化编辑、预览、下载等功能。 文本编辑：实现画布上的文本框的添加、字体属"}, {"id": "6966856931839311886", "title": "Vue 3中 tsx 对自定义组件中事件的监听报类型错误问题", "desc": "在Vue3中使用tsx写法可以享受到tx带来的智能提示，提升代码规范性与开发效率，但严格的类型检查也会为我们带来一些麻烦，例如在自定义组件中监听事件就会报类型错误"}, {"id": "7002782276543070244", "title": "vue cli3 启动报错 core-js/modules/es.object.to-string in ./src/router/index.js", "desc": "解决办法 安装 npm install --save core-js 重启 npm run serve"}, {"id": "6968789226309550093", "title": "element-ui表格 实现滚动到底部加载更多", "desc": "饿了么组件的el-table实现滚到到底部加载更多数据。 问题 在element-ui的文档中，存在这么一个指令v-infinite-scroll，但是实际用"}, {"id": "6986284618617978910", "title": "composition-api 源码解析", "desc": "版本说明 本文是针对 composition-api v1.0.0-rc.6 版本的一次源码解析，主要是想探析以下两点： Vue 在安装 composition-api 时做了些什么？ Vue 在执行"}, {"id": "6844903601211604999", "title": " 致敬 React: 为 Vue 引入容器组件和展示组件", "desc": "如果你使用过 Redux 开发 React，你一定听过 容器组件（Smart/Container Components） 或 展示组件（Dumb/Presentational Components），这样划分有什么样的好处，我们能否能借鉴这种划分方式来编写 Vue 代码呢？这篇…"}, {"id": "6963205909430403085", "title": "[万字左右]个人开源项目，我的一些开发笔记", "desc": "基于Vue2.x + Vue-cli4.x的后台管理系统，主要包含路由自动挂载、主题换肤、多语言国际化、表格操作、图表展示、全屏操作、字体图标、权限控制、路由嵌套和数据mock等功能。"}, {"id": "6994408500440858631", "title": "11x2 精读Vue官方文档 - CookBook - 可编辑的 SVG 图标系统", "desc": "精读 Vue 官方文档系列 🎉 基本的示例 一个 .svg 文件的内容如下所示： 一般使用 .svg 的方式有两种：： 像引入图片一般，用 img 标签的 src 属性来引入一个 svg 文件。 直接"}, {"id": "6939434400576700446", "title": "Vue源码解析-compiler", "desc": "上一篇，我们介绍了vue实现响应式的原理。其中，有2点需要重点展开分析： 在讨论上述2个问题之前，我们先待 了解 compiler过程。这是核心前提，只有先熟悉了它，我们才能清晰的认识到 数据的流向。 一. Compiler 在vue中，我们写template，显然浏览器不认识…"}, {"id": "6993300918745694221", "title": "MySQL 错误1418 的原因分析及解决方法", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 1.分支语句 v-if v-else-if v-else：底层再控制页面标签是否展示时底层时直接操作DOM元素，通过对DOM元素删除或者添加"}, {"id": "6844903928753209358", "title": "正确姿势使用vue cli3创建项目", "desc": "在19年8月份的时候，vue-cli更新到了3.X，新版本的脚手架封装度更高，配置起来简单许多，旨在让用户把精力都放在编写业务代码中，本人从vue-cli2.X过渡到3.X挺适应的，毕竟3.X脚手架已经自动搭建在webpack4上，所以不用大家再去从webpack3升级到web…"}, {"id": "6844903656152645640", "title": "vue全家桶仿某鱼部分布局以及功能实现", "desc": "每次写文章时，总会觉得比写代码难多了，可能这就是我表述方面的不足吧，然而写文章也是可以复盘一下自己的开发过程，对自己还是受益良多的。在这里简单叙述一下我仿某鱼部分布局以及功能实现的过程，仅做学习用途。 Vue是一套用于构建用户界面的渐进式框架，Vue 的核心库只关注视图层，不仅…"}, {"id": "6974171233466187813", "title": "初识Vue3--项目搭建、setUP函数初体验", "desc": "一、Vue3的介绍 Vue.js3.0正式版在2020年9月份发布, 支持Vue2的大多数特性, 更好的支持Typescript, 虚拟Dom完全重构, 结合模板编译提高运行性能, 减少运行时开销, "}, {"id": "6971056138431234056", "title": "vue+element大型表单解决方案(8)--数据比对(上)", "desc": "表单数据比对并不是常见的需求，无非就是表单操作人员希望看到表单当前数据和变动之前的数据，当数据有差异时，给出提示并能查看之前的数据，很有点类似代码比对的意思。事实上本篇介绍的是简单表单的数据比对，不规"}, {"id": "6844903586107916301", "title": "2018 CSS 大会多图见闻录", "desc": "CSS 之于前端有些像厦门之于 IT 界：耳熟能详却又略显小众。那么在厦门召开的第四届 CSS 大会是否能结合碰撞出新的火花呢？跟随着本兼职摄影师来看看吧~ 周六上午的巨幕影厅里，本届 CSS 大会正式拉开帷幕。在现在的前端圈技能树越点越多的大潮下，单单会写代码的前端或许已经不…"}, {"id": "6894412199700201485", "title": "【建议追更】以模块化的思想来搭建中后台项目", "desc": "启动登录成功之后就可以继续对代码进行简化了，删除一些不必要的文件。 eval-source-map：最初它很慢，但是重建速度很快，并且可以生成真实文件。行号已正确映射 整体的思路就是将所有跟这个项目有关的sotarge封装在一个模块下，这样不会显得很乱。 像上图这种看着就会很乱…"}, {"id": "6913092522814210061", "title": "【以模块化的思想开发中后台项目】第一章", "desc": "继上一篇【以模块化的思想来搭建中后台项目】，时隔一月再开始写该系列的第二篇，没办法最近确实有点忙，不像以前划水摸鱼，到点就溜😭(y1s1这段时间确实挺忙的)，不过这个系列的文章我肯定会好好花时间打磨，尽我所能的写出质量较高且比较容易上手和理解的文章。 像上面这样模块化规范，不…"}, {"id": "6844903759970058254", "title": "【vue-cli3升级】老项目提速50%（一）", "desc": "入职公司到现在差不多一个半月了，负责A业务线，项目涉及运营后台、A业务客户端等。之前已经完成了对运营后台A模块的重构工作，最近也已经初步完成了对A业务客户端项目的升级，所以今天分享一下新项目基于vue-cli3做工程的升级。 *PS：虽然有点标题党，但是**50%*这个数字并非…"}, {"id": "6844903823283060749", "title": "vue+element实现excel中的信息批量导入和导入模板的下载", "desc": "第一种是需要后台提供的接口，把参数传给后台，后台返给表中的数据。 第二种是纯前端实现表格的批量导入。"}, {"id": "6966215704634720287", "title": "关于Virtual DOM理解和Snabbdom源码浅析", "desc": "2万字。关于Virtual DOM理解和Snabbdom源码浅析。从对Virtual DOM理解和对Snabbdom源码的浅析"}, {"id": "6844904054103998477", "title": "重拳出击：打造 Vue3.0 + Typescript + TSX 开(乞)发(丐)模式", "desc": "首先我们先把vue-next-webpack-preview先 clone 到本地，把它改造成一个 typescript 的工程。 把 main.js 改为 main.ts，这一步仅需要改一个文件后缀名即可。 总所周知，jsx/tsx 是一个语法糖，在 React 和 Vue …"}, {"id": "6880827220563066894", "title": "基于Vue自定义模态框|vue仿微信弹窗|nuxt对话框", "desc": "起源VPopup基于Vue.js构建的移动端弹出框组件。融汇了Vant及NutUI中的Popup弹出层、Notify通知信息、Dialog对话框、ActionSheet动作面板框及Toast弱提示框等"}, {"id": "6985820766147346439", "title": "基于Vue实现页面的引导操作", "desc": "引导操作是一个非必须的功能，但是有这个功能的话，对第一次进入系统的人来说，是一个比较友好的体验，能快速的介绍自己系统的一些简单功能，我们可以基于driver.js很轻松的实现这个效果。"}, {"id": "6913706130032033799", "title": "基于 element-ui 封装表单金额输入框", "desc": "在日常的迭代开发中通常我们会遇到这样的场景：在一个表单中需要用户输入金额，并校验金额的格式。这个需求你一定遇到过，但是现在，我们还需要做到：当用户离开输入框（失去焦点）时，输入的内容变成了用逗号每隔 3 位分隔的数字，并展示给用户。且最后提交金额时，参数的值仍然是正常数字，不包…"}, {"id": "6850418113667432462", "title": "Vue你不得不知道的异步更新机制和nextTick原理", "desc": "异步更新是 Vue 核心实现之一，在整体流程中充当着 watcher 更新的调度者这一角色。大部分 watcher 更新都会经过它的处理，在适当时机让更新有序的执行。而 nextTick 作为异步更新的核心，也是需要学习的重点。 在理解异步更新前，需要对JS运行机制有些了解，如…"}, {"id": "6987585541222957070", "title": "Vue3.0 Composition API响应式原理的简单模型", "desc": "本文先简单介绍Composition API的核心原理，再通过自己实现一个轻量级的Composition API来了解其中的细节"}, {"id": "6990758599949549605", "title": "奥运会想多场比赛同时看怎么办？看我用vue+jquery+videojs实现", "desc": "最近在参与研发一个项目功能，大体是某地地图上展示区域内所有摄像头，点击摄像头时可以实时播放监控视频。       由于在开发阶段，视频流并未选择真实监控数据，而是m3u8格式的cctv直播链接，同事路"}, {"id": "6980262797141606407", "title": "近十万字详解Vue实现(1)：Vue2初始化、对象属性劫持、数组方法的劫持", "desc": "1、vue初始化 2、将用户输入的选项放到 vm.$options 代表 用户传入的所有属性 3、初始化状态initState(vm) （包含data、计算属性、方法等） 3.1、数据的初始化init"}, {"id": "6844903686779453454", "title": "Vue解析--如何应对面试官提问", "desc": "近期不断面试中，面试官都会提一些关于Vue相关的源码和“全家桶”之类的问题。那么针对这些提问，我们应该如何更好应答呢？在这里我把对Vue的理解整理出来供大家来参考。 Vue是一套构建用户界面的渐进式框架，也是一个非常典型的 MVVM 的程序结构（model-view-viewm…"}, {"id": "6992825128472035335", "title": "搭建自己的脚手架", "desc": "搭建自己的脚手架 原因： 需要搭建自己脚手架的原因： 虽然市面上存在很多已有的脚手架，比如vue框架的vue-cli、react相对的creat-react-app，但是在使用这些脚手架创建的项目时我"}, {"id": "6844903796091568135", "title": "🎂HeyUI 组件库两周年，中后台管理系统 HeyUI Admin 发布🎉🎉", "desc": "不知不觉, HeyUI组件库已经发布两年的时间了。 从2017年3月12日，到2019年3月12日，我算了一下，总共写了10万行的代码。 而在不久之前，项目的star数目总算突破1000大关，开启1k+的旅程🎉🎉。 在这两周年之际，我们发布了企业级中后台管理系统 HeyUI…"}, {"id": "6844903892564590600", "title": "一个PDF在线预览小demo（文本可复制）", "desc": "1. 安装PDF.js 2. 在vue中使用 该方法虽然返回一个PDFDocumentLoadingTask，但是仍然可以像使用promise一样使用它，源码如下，在调用pdf.then的时候会返回一个Promise对象。 巴拉巴拉... 可以看到内容文本已经被已纯文本的形式渲…"}, {"id": "6979349314506063880", "title": "vue3--teleport传送api使用、组件之间的双向绑定、setUp中路由跳转", "desc": "这是我参与更文挑战的第28天，活动详情查看： 更文挑战 一、vue3--teleport传送api使用、组件之间的双向绑定、setUp中路由跳转"}, {"id": "6844903768367038471", "title": "几十行代码实现一个vue的状态管理", "desc": "介绍采用集中式存储管理应用的所有组件的状态,就能实现组件间数据共享实现逻辑图从图上有两条线:Vue.use(vuec),与newVuec.center(options)第一条线Vue.use(vuec"}, {"id": "6844903664331522061", "title": "vue预加载Demo", "desc": "BuildSetupForadetailedexplanationonhowthingswork,checkouttheguideanddocsforvue-loader."}, {"id": "6936121612357861412", "title": "Vue工程化开发如何断点调试？", "desc": "也许这个问题比较基础吧，找了半天也没找到，有的说要安装插件，有的说要改什么配置，晕晕的，害得我一直以为工程化的开发环境下无法直接进行调试呢，直到有一天，偶然发现了。。。（另外这是vue3，没试过vue2 是啥样的。） 以往的经验呢，想要调试我们写的js代码，会按F12 找到 S…"}, {"id": "6909660370223235079", "title": "一文看完vue3的变化之处", "desc": "在通读了vue的官网文档后，我记录下了如下这些相对于2.x的变化之处。 改成这样的最主要原因是为了避免对Vue的全局配置会影响每个创建的实例。 之前在非组件的情况下创建实例可以使用对象，但是现在所有情况下都只能使用一个返回对象的函数。 beforeDestroy=>before…"}, {"id": "6844903873786675207", "title": "支持嵌套对象、多级数组的Vue动态多级表单组件 —— vue-dynamic-form-component", "desc": "方便不想看完全篇文章的童鞋，简单总结一下，这是篇软广，主要是推广自己在业务中沉淀的一个开源组件 vue-dynamic-form-component 。基于 element-ui 实现的 vue组件，只需编写类似 async-validator 的规则，自动生成对应的表单，支持…"}, {"id": "6897235649729200135", "title": "Vue 响应式源码剖析", "desc": "Vue 在初始化数据时，会给 data 中的所有属性使用 Object.defineProperty 重新定义 setter 和 getter , 当页面获取到对应属性时，会触发 get 方法并进行依赖收集（收集当前组件的watcher） 如果属性发生变化会通知相关依赖，触发对…"}, {"id": "6844903921090035725", "title": "[译]Vue.js 3：面向未来编程（function-based API）", "desc": "如果你在使用 Vue.js，那么可能知道这个框架的第 3 版就要出来了（如果你是在本篇文章发布后的一段时间看到这段话的话，我希望我的说法还是中肯的😉）。新版本目前正在积极开发中，所以可能要加入的特性都可以在官方的 RFC（request for comments）仓库中看到：…"}, {"id": "6914501354186768398", "title": "Vue2核心原理(简易) - 视图更新(初次渲染)笔记", "desc": "前言本章项目地址当数据发生变化视图也在发生变化每个组件都有一个渲染watchernewWatch()(观察者模式）在newWatche()组件开始渲染组件，在render函数生成vnode时，调用了劫"}, {"id": "6964562657412120607", "title": "vue+腾讯云上传各种资源（图片，视频，音频，文档，资源包）& tcplayer视频播放", "desc": "vue实现各种资源上传至腾讯云，包括图片，pdf，word，音频，zip，以及视频等，本来描述了上传的基本操作"}, {"id": "6844903583670861831", "title": "如何开发一个可爱的CLI（二）", "desc": "在系列的上一篇《如何开发一个可爱的CLI（一）》中，我给大家讲述了如何开发一个生成、渲染、转换样板文件（Boilerplate）的简单脚手架工具。本文，将是愉快的进阶环节 —— 如何基于webpack写一个 “零配置” 的命令行工具（暂且命名为lovely-cli.），实现以下…"}, {"id": "6844903879310589965", "title": "带你了解vue计算属性的实现原理以及vuex的实现原理", "desc": "在vue的开发中，我们不免会使用到计算属性，使用计算属性，vue会帮我们收集所有的该计算属性所依赖的所有data属性的依赖，当data属性改变时，便会重新获取computed属性，这样我们就不用关注计算属性所依赖的data属性的改变，而手动修改computed属性，这是vue强…"}, {"id": "6844903992875548685", "title": "vue 3.0 pre-alpha", "desc": "一个月前尤大大公布了 vue 3.0 的源码，目前还是 pre-alpha 状态，预计年后会发布正式版本。听到这个消息的第一反应是学习好累呀，在知乎上瞄了一眼尤大大对功能简单的介绍，感觉难，直接放弃了学习。 冷静了一段时间之后，认真的看了看，好像也不是很难。慢慢学，慢慢看，不着…"}, {"id": "6844903688545239054", "title": "应用el-tabs模拟nav menu组件", "desc": "目前在做的项目遇到如图所示需求。 本是个简单的menu, 但是我偏选了el-tabs组件为基础进行改写，花了好多时间，也踩了不少坑。但总算是完成啦！特此记录填坑记录。 路由详情请参考路由配置项及示例。 这就不说了。。 说到这还没什么难得，接下来问题来了。 label作为el-t…"}, {"id": "6844904142868054023", "title": "运用 NutUI - 快捷开发京东企业业务之酷兜", "desc": "2019 年酷兜项目经历了多达 13 次的大小版本迭代。为了在 2020 年不断提升酷兜营销能力，完善产品体验，达到市场预期，新版酷兜被寄托着很大期望。 酷兜是京东为优质大型企业客户专门打造的“ 0 预算”员工内购福利平台。酷兜内购商城通过整合包括热销商品、品牌折扣、优选精品、…"}, {"id": "6844904057224577038", "title": "一起用Typescript来写一个图片全屏预览组件吧", "desc": "2020年是一个元年，有武汉疫情告急，企业停工。所幸的是，开发人员可以在家办公，不幸的是，工资全凭情怀，网速还得把电脑伸到窗外来执行一下git pull ...。不扯皮了，近期不论是工作项目还是个人项目都需要用到一些简单的全屏预览的需求，所以还是动手写一个吧，以后可能还会用到的…"}, {"id": "6844903603660914696", "title": "基于VUE的服务器端渲染（SSR）", "desc": "服务器端渲染(以下称为SSR)：网页通常是通过后端路由直接给客户端的。也就是说网页的html一般是后端服务器里通过模板引擎渲染好后再交给前端的。 对于其他的效果，则是由预先写在页面里的jq，bootstrap等常见的前端框架去完成的。 其实，这个就是浏览器从服务器端拿到的htm…"}, {"id": "6844903697940496392", "title": "Web阅读器开发系列教程（入门篇）", "desc": "最近我在慕课网发布了两门关于Web阅读应用开发的课程，采用Vue全家桶开发。免费课是入门级课程，初步实现了一个阅读器。实战课是进阶课程，实现了一个高性能的互联网阅读应用。两个项目都采用自适应布局，同时支持PC端和移动端，想要系统提升前端技能的同学不要错过。 本教程为系列教程，主…"}, {"id": "6844904114678153223", "title": "exp-parser | 每天读一点Vue源码", "desc": "今天是2020年4月4日清明节，向英雄致敬，向逝者致哀... 面试的时候经常被问一些Vue源码相关的问题，通常情况下， 我会在面试前恶补掘金上的面筋来对付面试，什么双向绑定的原理呀，什么虚拟dom树呀，实际上我压根儿就没仔细研究过，其一是自己真的比较菜，其二工作上也用不上，别自…"}, {"id": "6844903925011709960", "title": "3. Vue的watch实现原理", "desc": "上面创建一个Watcher实例，其中expOrFn是函数(在Watcher构造函数中做了判断处理)，当expOrFn是字符串时，Watcher会观察路径属性keypath(如a.b.c)所指向的的数据并观察这个数据的变化；当数据为函数时，它会观察expOrFn所关联的vue实例…"}, {"id": "6908536350098587655", "title": "carousel-3d实现3d轮播效果", "desc": "于是放弃ui框架的轮播组件，选择第三方的carousel-3d组件来实现效果。"}, {"id": "6844904103559036936", "title": "封装一个基于Vue的评论留言编辑器组件", "desc": "由于封装的组件式基于 Vue 的，所以这就要求我们需要掌握 Vue 的一些知识才行（Vue 小白建议先去官方文档阅读相关知识:grinning:），而对于有 Vue 基本功的同学可以通过封装这样一个功能完善的组件来加深对 Vue 组件化编程的理解。现在就让我们来实现这个组件的封…"}, {"id": "6844903703988666381", "title": "vue-源码剖析-双向绑定", "desc": "拉到vue的代码之后，首先来看一下项目目录，因为本文讲的是双向绑定，所以这里主要看双向绑定这块的代码。 这个给Vue构造函数定义了_init方法，每次new Vue初始化实例时都会调用该方法。 然后我们来看下Observer构造函数里面写了什么，这里给每个对象加了value和实…"}, {"id": "6917819182994341895", "title": "$attrs和$listeners，inheritAttrs的使用", "desc": "vm.$attrs包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$…"}, {"id": "6917809867890393095", "title": "vue-ssr(上)", "desc": "vue-ssr(上)spa全部靠的是js来渲染，默认首页显示内容是一个空的div标签，不利于SEO搜索引擎搜索服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的spa应用会有首页白屏时"}, {"id": "6898521659335147534", "title": "深入理解Vue的插件机制与install", "desc": "我们在使用Vue的时候，经常会使用并写一些自定义的插件，然后利用Vue.use引入。所以提到写插件，install这个方法是必不可少的。Vue.js 的插件应该暴露一个 `install` 方法。这个方法的第一个参数是 `Vue` 构造器，第二个参数是一个可选的选项对象。这是V…"}, {"id": "6956118121480454157", "title": "Vue.js 高阶特性及实现原理 - 响应式原理", "desc": "Vue.js 高阶特性及实现原理 - 响应式原理 响应式原理介绍 只有在data中声明的数据才是响应式的，不同操作方法可能导致响应效果不同 数据响应式 单向绑定：视图绑定数据，数据变化视图也跟着变化 "}, {"id": "6937975977037430797", "title": "Vue全家桶入门基础知识(全)", "desc": "Vue是一套用于构建用户界面的渐进式框架，Vue 被设计为可以自底向上逐层应用。他是一个组合的思想，需要什么就一层层往上堆。 在页面中打印一个Vue就会发现一个构造器，我们就可以使用这个构造器构造我们的页面。 v m层联系的方法，使用vue api el 和使用 {{}}插值语…"}, {"id": "6901205294786084872", "title": "Vue [extends 构造器核心实现原理]", "desc": "使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象 // 创建 Profile 实例，并挂载到一个元素上。 通过看源码的整个过程，可以看出来，正如官方案例所讲：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象"}, {"id": "6898260687521644557", "title": "手写实现el-form系列组件的核心逻辑 -- 练习组件通信", "desc": "以前觉得element-ui肯定特别难写，最近在看组件通信，就试试写下el-form，当做练习了，这样以后自己也能试着看懂/开发高阶组件。 本文，一步步来，读者如果有耐心的话，最好也自己手敲一遍。 先看看官网，关于el-form使用的demo，然后将重点复制到App.vue，再…"}, {"id": "6844904184211472398", "title": "Vue响应式系统介绍", "desc": "之前学习 vue 的时候，一直没刨根问底过。在看到网上这类文章比较多，参差不齐的质量有时候看的一头雾水。当然也有不错的文章，但是终究是别人的理解。于是写一篇关于自己的理解记录下来，亲身实践才能收获更多！ 在说明之前，我们先了解一个 Object.defineProperty()…"}, {"id": "6844903606869557255", "title": "一个能拖动，能调整大小，能更新bind值的vue指令-vuedragx", "desc": "开发一个可自定义组件化门户配置页面，期间采用了vue框架作为前端视图引擎，作为一个刚入手vue的萌新，开发第一个功能就遇到了拦路虎。需要一个拖动并且可改变大小的容器盒子。当时查看vue开发文档，查找github都没找到一个自己欢心的实现，所以与其求人，还不如求己。所以vuedr…"}, {"id": "6844903581955391502", "title": "Hybrid前端jsbridge设计原理分析", "desc": "预先定义好schema，如myapp://... 可以看到，在某个按钮或者行为需要与原生端通信时创建一个iframe然后再移除，如果不移除iframe，则会在body里出现大量无用的iframe标签，这里简单说一下Native怎么去拦截这个伪链接请求。 这样就可以拼接出&key…"}, {"id": "6917432016124248071", "title": "Vue3.js（Webpack 5）模板项目创建(2021.5.19更新)", "desc": "前端工程化中有一个模板化，一个好的模板项目可以让开发专注业务功能，而不用懂得底层逻辑，达到事半功倍的效果，这篇文档帮助你创建一个 Vue3 的模板项目。"}, {"id": "6917502806416965640", "title": "Puppeteer+Mocha+Chai端到端测试", "desc": "目录结构登录加个最外层的before，判断没登陆过就登录，登录后把window,page,route,router,store挂在全局上（对Puppeteer封装处理的方式，在这里）login.js把"}, {"id": "6867468142625587208", "title": "Vue企业级优雅实战03-准备工作04-全局设置", "desc": "全局样式初始化：初始化全局样式、通用样式。 当前本地只有一个 master 分支，现在基于这个分支，开启一个新分支 01_GlobalInit (全局初始化)。待本文结束后，再将其合并到 master 分支上，并将新分支 01_GlobalInit 和 master 都推送到 …"}, {"id": "6844903745646526472", "title": "vue响应式原理学习（三）— Watcher的实现", "desc": "众所周知，Vue 是在触发数据的 get 时，收集依赖，改变数据时触发set, 达到派发更新的目的。 依赖收集 和 派发更新的 代码 在上一篇文章，有简单解释过。我们再来重温下代码 这里我省略了部分用于判断和兼容的代码，因为感觉一下子要看所有代码的话，会有些懵比。我们现在知道了…"}, {"id": "6844903617577615368", "title": "一款使用 Vue.js 构建的跨平台原生桌面应用 Vuido", "desc": "一款使用 Vue.js 构建的跨平台原生桌面应用 Vuido"}, {"id": "6939509549921468430", "title": "Vue源码之v-model之组件", "desc": "1.在闭合标签后执行closeElement，然后执行processElement执行processAttrs。 2.processAttrs获取到el.attrsList，遍历判断name是否是指令，是的话获取修饰符通过对象返回出来。 3.判断name不为Bind不为on进入…"}, {"id": "6949055965769498655", "title": "详解Vue SSR服务端渲染", "desc": "使用Nuxt框架初始化Vue SSR项目，5分钟带你了解SSR服务端渲染以及Nuxt框架配置。包含安装步骤和配置项说明，含服务端渲染和客户端的demo示例说明，以及关键css（critical cs）"}, {"id": "6870839344035266568", "title": "Vue3自我理解及实战", "desc": "首先要了解下Vue3的新特性啦，那就借尤雨溪介绍的Vue3的亮点，做一个简单的自我理解。 （1）、Rewritten virtual dom implementation: 重写虚拟dom的实现。这个具体怎么表现呢？首先看编译模版的静态标记： 【1】、 vue3 中动态属性会有…"}, {"id": "6924296983385473032", "title": "vue3源码浅析：mount", "desc": "mount方法，将应用实例的根组件挂载在提供的 DOM 元素上。数据响应式；vnode获取，vnode diff，最后渲染成DOM，这些方法都是在mount执行中完成的。 effect在Vue3中的作用就相当于Vue2中的observe，update生成后，挂载之前会先运行一下…"}, {"id": "6948355014330941454", "title": "深入理解 Vue 完整版与非完整版", "desc": "使用「非完整版」，只能写在 render 函数里。用 render 函数的参数 h 函数来创建标签 h 是尤雨溪写好并传给 render 的，所以开发者可以获取到这个 h 函数。"}, {"id": "6844903908691689485", "title": "🌳 巨树：基于ztree封装的Vue树形组件，轻松实现海量数据的高性能渲染。", "desc": "最简洁友好的vue-ztree封装"}, {"id": "6975845208390893576", "title": "Vue2.x源码解读之Vue初始化过程", "desc": "theme: geek-black 前言 在拜读了掘金李永宁老哥的源码文章之后，收获颇深，想跟着私聊才理一遍vue源码的思路。 目标 我们平时如果写vue的话在main.js有个new Vue()的过"}, {"id": "6844903704127094797", "title": "[译] 对 Vue-Router 进行单元测试", "desc": " "}, {"id": "6844903621809668104", "title": "Redux中的编程艺术", "desc": "这段代码，蕴含着很多知识。 首先是通过闭包对内部变量进行了私有化，外部是无法访问闭包内的变量。其次是对外暴露了接口来提供外部对内部属性的访问。这其实是典型的“沙盒模式”。 沙盒模式帮我们保护内部数据的安全性，在沙盒模式下，我们只能通过return出来的开放接口才能对沙盒内部的数…"}, {"id": "6910897467236024334", "title": "Vue全家桶系列三： Vue CLI脚手架 - Element UI组件库", "desc": "VueCLI：官方文档ElementUI官方文档我已将源代码上传到了我的码云仓库中，感兴趣的可以去下载源码，点我-跳转到源码仓库地址，下载源代码配合文章学习！边看博文，边看源码，根据博客和源代码自己动"}, {"id": "6877357775056289806", "title": "vue2.0|思路篇|依赖收集", "desc": "数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。 控制优先级： Vue.mixin内函数，即混入对象的钩子将在组件自身钩子之前调用。"}, {"id": "6844903676935405581", "title": "Iceworks 2.8.0 发布，自定义你的 React 模板", "desc": "自定义模板顾名思义即是定制自己的模板，相对社区已有的各类 React 模板，大多数是全家桶的形式，内置了很多功能和页面集合，所谓开箱即用；但在实际使用过程中，我们会发现，下载模板进行相应的初始化之后，在开始业务前，要做的第一件事情就是删、删、删，删掉不需要的多余页面和相应的配置…"}, {"id": "6844904181447278605", "title": "学习vue源码（7）手写解析器", "desc": "的学习，我们知道解析器在整个模板编译中的位置。我们只有将模板解析成AST后，才能基于AST做优化或者生成代码字符串，那么解析器是如何将模板解析成AST的呢？ 这次，我们将详细介绍解析器内部的运行原理。 解析器要实现的功能是将模板解析成AST。 其实AST并不是什么很神奇的东西，…"}, {"id": "6869230150324748302", "title": "Vue3.0的新特性（二）", "desc": "钩子函数改为：beforeMount、mounted、beforeUpdate、updated、beforeUnmount、unmounted，名称与组件生命周期类似。 支持将自定义指令绑定在组件上，与非props属性一样包含在$attr中。 to属性接收选择器，确定telep…"}, {"id": "6897505210466304007", "title": "手写Vue响应式 [Object.defineProperty]", "desc": "使用Vue技术栈也有2年了，对里边的各种API，属性，内置组件封装可以说是非常熟练了，一直知道双向数据绑定的原理是通过数据劫持，结合发布-订阅的方式来实现的；可理论始终是理论，忍不住还是动动小手撸了一把 ； 请大家尽管吐槽吧 。 我们先来看一张图，相信大家在不少的博客，贴吧，论…"}, {"id": "6856968423025410062", "title": "【开发小技巧】01—实现微前端，你需要了解的 Vue Genesis 渲染器", "desc": "来源|https://www.cnblogs.com/coderhf/archive/2020/06/10/13086341.html我们的需求核心的就是渲染器，它提供了最基础渲染能力，有了它，你可以"}, {"id": "6938329699869261832", "title": "[Vue源码系列-6]vue3渲染流程实现原理", "desc": "一. vue3的类型处理 二. 初始化渲染逻辑 三. 组件渲染流程 四. 元素创建流程 五. 总结"}, {"id": "6923969492053655566", "title": "vue原理学习系列(三)：渲染函数(render funciton)和Virtual Dom", "desc": "render function（渲染函数）实际上是一个返回虚拟节点 (virtual node)的函数，整个vnode树称为Virtual Dom，Vue基于虚拟dom生成真实的dom。 vue生成虚拟dom的过程本质上是调用渲染函数，在vue实例中渲染函数和data属性具有依…"}, {"id": "6844903874101248008", "title": "Vue 列表上下过渡效果", "desc": "试了试 Vue 的transition-group，也没有达到预期的效果，然后就花了点时间做了一个操作Demo。 简单说一下。 第一部分描述一个让目标位置底下所有行有一个向下移动的过程。 第二部分描述那个移动的行消失的过程。 第三部分描述一个移动的过程。 原因：由于 v-for…"}, {"id": "6943479646008639519", "title": "vue+element-统一管理线上线下接口", "desc": "我们在使用后端提供的接口的过程中，都是先在线下测试结束，没有问题以后才会将代码部署到线上，这样才保证线上的代码是没有问题的。所以如果只有一个接口和一个页面的话，那么是无所谓的， 要不要统一管理都是一样的，但是一旦接口和页面多的话，就会比较麻烦了，所以我们需要统一一个文件进行管理这..."}, {"id": "6844903806015111181", "title": "根据调试工具看Vue源码之watch", "desc": "我们的意图是 —— 监测app这个变量，并在函数中打下一个断点。 我们期待的是 —— 断点停下后，调用栈中出现相关的函数，提供我们分析watch原理的依据。 ... 看到需要经过这么多的调用过程，不禁心里一慌... 然而，如果你理解了上一篇关于computed的文章，你很容易就…"}, {"id": "6844904116083228679", "title": "[Vue源码学习]3-编译（中）", "desc": "对于注释和条件注释节点，前进至它们的末尾位置；对于文档类型节点，则前进它自身长度的距离。 对于我们的例子 :，tokens 就是 [_s(item),'\":\"',_s(index)]；rawTokens 就是 [{'@binding':'item'},':',{'@bindin…"}, {"id": "6933212610003206157", "title": "虚拟DOM和diff算法", "desc": "是一个JS对象，包含了 tag、props、children 三个属性，是对DOM的抽象，更加轻量级的DOM描述。 因为 DOM 是树形结构，所以使用 JavaScript 对象就能很简单的表示。而原生 DOM 因为浏览器厂商需要实现众多的规范（各种 HTML5 属性、DOM事…"}, {"id": "7002523095579754510", "title": "vue配置文件自动生成路由和菜单", "desc": "写在前面 每次重复写路由的时候是不是会觉得很烦，特别是项目大的时候，路由会有特别多，看都看不过来，所以这里我是有了一个router.json的配置文件来对路由做一些简单的配置，然后让路由和左侧菜单栏可"}, {"id": "6963945204965441550", "title": "【流莺书签】Vue3+TS的收藏网址小项目", "desc": "流莺书签,一个用来收藏网站的项目 使用Vite+Vue3+Ts进行开发,具有书签、标签的增加,删除,修改,一键导入,导出配置,自动获取网站图标、标题等功能 你一定会喜欢的!"}, {"id": "7004416292119642142", "title": "【Vue3.0】Vue3.0的keep-alive使用", "desc": "最近在写一个个人练手的项目，前端本想着vue3.0应该和2.0差不太多，学习成本应该不高，所以就使用了vue3.0来做项目的前端，现在有点裂开。建议学习vue2.0做项目做习惯的小伙伴不要轻易的转3."}, {"id": "6858899262596448270", "title": "vue3.0 响应式原理(超详细)", "desc": "Proxy 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）。 proxy是es6新特性，为了对目标的作用主要是通过handler对象中的拦截方法拦截目标对象target的某些行为（如属性查找、赋值、枚举、函数调用等）。 vue2.0 用 Object.d…"}, {"id": "7003306660017995789", "title": "Vue 3.0 计算属性的实现原理分析", "desc": "我们在上一章节介绍了响应式的原理，本文我们来探讨一下Vue 3.0的计算属性的实现原理。如果没有阅读过上一篇文章，建议请先阅读上一篇文章再来看本文，否则可能会有些迷糊。 使用方法 我们先来看看计算属性"}, {"id": "7005744294799605773", "title": "Vue2/Vue3中在css中使用js的变量（scss也适用）", "desc": "前言 很多情况我们需要主题搭配，亦或是统一便捷的管理，css 变量是必不可少的。在 Vue 中将 data 中的变量反映到 css 变量上也是大势所趋。 关于css变量的介绍可以查看 MDN ，关于兼"}, {"id": "6992385934255734798", "title": "「站在上帝的角度」谈谈Element组件结构-Radio", "desc": "用户就是上帝，站在上帝的角度也就是站在使用者的角度去看待组件。 用过不少优秀的UI库，用的时候美滋滋，轮到自己搭组件库的时候往往会去..."}, {"id": "6973196579918315533", "title": "Vue2 源码总结梳理", "desc": "本篇文章更合适于已看过 Vue2 源码，希望进一步总结加深概念的人群。若还未读过源码或零碎一知半解的小伙伴，也可以挑选阶段进行总结梳理，个人还是强烈认为需要过一遍源码。"}, {"id": "7002501335367024648", "title": "小案例学 Vue 最终章之任意条件组合查询（干货满满）", "desc": "前言 页面效果展示 需求介绍 首先，这是个多条件组合查询页面，查询字段包含一个用户的所有属性，你可以自定义查询条件进行查询符合条件的用户信息，查询到的信息以表格的形式显示，如果查询不到任何信息的话，弹"}, {"id": "6844903641866829838", "title": "Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]", "desc": "说到Vue的钩子函数，可能很多人只停留在一些很简单常用的钩子(created,mounted)，而且对于里面的区别，什么时候该用什么钩子，并没有仔细的去研究过，且Vue的生命周期在面试中也算是比较高频的考点，那么该如何回答这类问题，让人有眼前一亮的感觉呢... 有的时候，我们需…"}, {"id": "6844904084512718861", "title": "Vue3新特性一篇搞懂", "desc": "欢迎大家加入一起共同学习进步。 最新消息和优秀文章我会第一时间推送的。 具体时间可以看大家可以看看官方时间表。 目前在Vue3处于Beta版本,后面主要是处理稳定性问题。也就是说主要Api不会有很多改进。尤大神从直播中说虽然很多想法,但是大的变化最快也会出现在3.1上面了。所以…"}, {"id": "6994960288101433351", "title": "VueUse中的这5个函数，也太好用了吧", "desc": "VueUse 是 Anthony Fu 大佬的一个开源项目，它为Vue的开发者提供了大量用于 Vue2 和Vue3 的基本 Composition API 实用工具函数。"}, {"id": "6948587166679171102", "title": "最新的vue面试题大全含源码级回答（vue2篇）", "desc": "金三银四快过去了，抓紧这段时间再复习下vue，为了在面试官前突出自己，在回答的时候能带上源码的实现和理解往往更容易成功。"}, {"id": "7005899099212005383", "title": "Vue3的mixin", "desc": "小编在之前的项目中还没有接触过minxin(数据混入)，直到一次面试的时候，面试官问我，我才注意到，原来还有这样的一个东西，今天小编就和大家一起看看这个神奇的mixin"}, {"id": "7005903092860321800", "title": "vue项目性能优化", "desc": "vue项目性能优化 一、代码层优化 1. v-if和v-show使用场景 v-if是通过控制dom节点的存在与否来控制元素的显隐； v-show不管初始条件是什么，元素总是会被渲染，并且是通过设置DO"}, {"id": "6990271318310518798", "title": "Vue自定义指令实现防抖/节流", "desc": "尽管Vue推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的DOM操作，并且是可复用的。"}, {"id": "6855579207448133646", "title": "如何设计低代码平台快速构建页面 | (200+页面)", "desc": "整个可视化搭建系统分为三部分，分别是配置页(setting),视图页(view) 和 json schema。配置页生成 json schema，视图页消费 json schema 可创建的页面类型有：列表、详情、表单。详情和表单页的设计思路差别不大，列表页与另外两种页面差别比…"}, {"id": "6993273415163445278", "title": "前端分页的实现", "desc": "这是我参与8月更文挑战的第4天，活动详情查看： 8月更文挑战 这篇主要说明一下前端分页实现的思想和其中一些计算，对于你来说肯定很简单，但是也是值得看看的"}, {"id": "6941657971650887716", "title": "可视化拖拽页面编辑器 | 项目复盘", "desc": "在去年闲暇时间开发了一个可视化的页面编辑器，这次看到掘金有项目复盘的活动，正好可以拿出来写篇文章，和大家分享下。不知道还能不能赶上活动了~ 可添加图片，文本，矩形，背景。多种编辑功能（字体，背景，大小，边距等） 由于里面的细节比较多，肯定不能将所有点都讲到，我就挑几个主要的写写…"}, {"id": "7000926120396718110", "title": "高性能渲染长列表(无限滚动)", "desc": "在实际项目中往往会出现要求实现大数据展示。本文介绍了长列表高性能渲染的解决思路和办法。解决长列表初次渲染时间过长，滚动卡顿的问题"}, {"id": "6983690566475186212", "title": "Vue3.0 项目实战中踩坑总结", "desc": "Vue3.0 项目实战中踩坑总结 生命周期钩子 setup reactive、ref与toRefs reactive 在 reactive 使用基本类型参数"}, {"id": "6844903632991682567", "title": "Taro实践 - TOPLIFE小程序 开发体验", "desc": "前阵子，来自我们凹凸实验室的遵循 React 语法规范的多端开发方案 - Taro 终于对外开源了，欢迎围观star（先打波广告）。作为第一批使用了 Taro 开发的TOPLIFE小程序的开发人员之一，自然是走了不少弯路，躺了不少坑，也帮忙找过不少bug。现在项目总算是上线了，…"}, {"id": "6844904116666236942", "title": "刁钻面试官：vue 节点销毁的时候做了些什么？", "desc": "面试路上难免磕磕绊绊但是没想到这次遇到狼灭了\"你知道vue节点销毁的时候做了些什么吗？\"\"...\"vue生命周期我们知道vue的生命周期有这些其中'beforeDestroy','destroyed'"}, {"id": "6966902934789423118", "title": "vue正确的使用函数的防抖与节流", "desc": "vue中的正确使用姿势 原理 函数的防抖 代码书写 第一次非立即执行 第一次立即执行 合并版本 函数节流 第一次非立即执行 第一次立即执行版本 合并版"}, {"id": "6981324377677627422", "title": "前端 vue cli 脚手架搭建说明", "desc": "前言 我们的目的是创建一个自己的项目；第一步是安装 node.js。在安装 node.js 时会同时安装 npm 的包管理工具。我们使用 npm 管理工具去安装 vue cli(vue 脚手架)，最后"}, {"id": "6981631200255442980", "title": "1x1 精读Vue官方文档 -  Prop", "desc": "精读 Vue 官方文档系列 🎉 Prop 的大小写 Prop 的命名支持以下两种方式： camelCase : 驼峰命名法中的小驼峰。 kebab-case : 分隔符命名法 虽然 Vue 模板的编译"}, {"id": "6995341612964380685", "title": "Vue生命周期(九)", "desc": "每个 Vue 实例/组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时"}, {"id": "7000360098807676958", "title": "Vue响应式原理", "desc": "下面是从视频课程中学习的总结：https://www.bilibili.com/video/BV1Zy4y1K7SH?from=search&seid=5695969818903004717 一、Vu"}, {"id": "6892750270875303944", "title": "模拟Vue响应式原理,实现一个简易版Vue", "desc": "然后还要去创建Compiler对象，它的作用是解析指令，差值表达式，在页面首次加载的时候，会调用Compiler中的相关方法去更新视图，同时在Compiler还要去订阅数据的变化，绑定更新函数，当创建一个Watcher对象的时候，需要传递一个回调函数，在这个回调函数中去更新视图…"}, {"id": "6844903539349651463", "title": "读懂源码：一步一步实现一个 Vue", "desc": "源码阅读：究竟怎样才算是读懂了？ 市面上有很多源码分析的文章，就我看到的而言，基本的套路就是梳理流程，讲一讲每个模块的功能，整篇文章有一大半都是直接挂源码。我不禁怀疑，作者真的看懂了吗？为什么我看完后还是什么都不懂呢？ 事实上一个经过无数次版本迭代的框架源码并不适合初学者直接阅…"}, {"id": "7000367177283387406", "title": "Vue.use的工作原理（流程及部分源码）", "desc": "​ 序言 今天我们老大给我么将了一下Vue.use的工作原理，一开始他以为我们都会，没想到一圈下来竟然都不尽如意，原来表"}, {"id": "6977642288247734309", "title": "虚拟DOM 和 snabbdom的diff算法图解", "desc": "学习笔记 虚拟 DOM 含义：用 JS 对象描述 DOM 的层次结构。DOM 中的一切属性都在虚拟 DOM 中有对应的属性 h 函数用来产生虚拟节点 VNode 虚拟节点包含的属性 snabbdom "}, {"id": "6844903586569125901", "title": "vue-cli 3.0 入门介绍", "desc": "vue-cli 3.0 入门介绍"}, {"id": "6983964330668589092", "title": "Vue3和vue2新增属性触发更新对比", "desc": "Vue3和vue2新增属性触发更新对比。vue2借助的是新增属性的那个对象访问的时候收集的依赖，vue3则是proxy代理后在遍历时进入ownKeys拦截方法中定义的特殊的值进行依赖收集。"}, {"id": "6844904121527435272", "title": "号外号外, 使用 vue 的最佳规范 !!!", "desc": "开发中 , 良好的项目风格规范, 不仅能对项目起到优化的作用, 还能让我们更快的读懂项目. key 这个特殊属性主要用在Vue 的虚拟DOM算法中,在对比新旧虚拟节点时 辨识虚拟节点. 如果在查找的过程中设置了属性key, 那么查找速度会快很多. 强烈建议在使用 v-for 是…"}, {"id": "6844904113004609543", "title": "超详细 ElementUI 源码分析 —— Select（模板篇）", "desc": "今天详细分析 Select 源码，在看到源码足足有九百行时，我整个人都是懵的，这是迄今为止读的最多的一篇源码，大概浏览了之后发现它里面有很多很多的知识点，光导入的模块就有 16 个，里面包含着各种组件、混入以及工具函数，所以鉴于本文篇幅有限，我打算分两部分来写，分别为：「模板篇…"}, {"id": "6974555552651149343", "title": "Vue3 源码解析（十）：watch 的实现原理", "desc": "本篇文章笔者会讲解 Vue3 中侦听器相关的 api：watchEffect 和 watch 的源码实现。"}, {"id": "6844903598808104974", "title": "VuePress 快速踩坑", "desc": "最近有个开源项目非常火，那就是尤小右开发的 VuePress，VuePress 可以让您非常方便的在 Markdown 文档中编写 Vue 代码，并且 VuePress 对编译后的 HTML 文件做了一些针对搜索引擎的优化。另外 VuePress 针对 Markdown 文件做了"}, {"id": "6844903933161242637", "title": "打造vuecli3+element后台管理系统（五）几个小技巧，让你的后台系统在不同版本浏览器兼容性更好", "desc": "许多后台系统都要求要做成响应式的，虽然我们用的elementUI框架已经在响应式上面做了出色的处理，但是也只能解决一部分的问题。所以我们需要使用rem。 rem是CSS3新增的相对长度单位，是指相对于根元素html的font-size计算值的大小。简单可理解为屏幕宽度的百分比。…"}, {"id": "6987661586953404453", "title": "ts报错Declaration of public instance field not allowed after declaration of public", "desc": "ts报错Declaration of public instance field not allowed after declaration of public instance method. In"}, {"id": "6866090889920872455", "title": "来自一位部门小妹妹的灵魂拷问：Vue的watch怎么没有效果的?", "desc": "心想：Vue的watch又不是什么难的东西，嗯，来机会了，可以让我树立一个完美的形象了，哈哈哈哈... 看了代码之后。。。。。 瞬间就不淡定了， 我看不出有啥问题啊 监听数组的第一个元素的对象中某个属性不就是这样写的吗'zndsList[0].isLoad' () {}应该不会…"}, {"id": "6896297835886002184", "title": "Vue 的 v-model ", "desc": "1. 基本用法 在 JS 中修改 x 的值，input 输入框里也会随之改变。同样地，在页面中的 input 输入框内手动输入值，变量 x 的值也会随之改变。对象里的变量改变会影响视图的 input 的改变，视图中 input 的改变会影响对象里变量 x 值的改变。这就是双向绑…"}, {"id": "6844903704357765134", "title": "小tip-一种图片加载状态效果的实现", "desc": "每多设置一个监听事件，都将引起..."}, {"id": "6844904041214902280", "title": "$emit有时也并没有那么好用", "desc": "在项目中，自定义了一个组件，在点击子组件时，触发选中事件，并通过$emit，将子组件的数据传递给父组件，另外有一个全选按钮来触发子组件的全部选中。本来按照设想，子组件的事情交给子组件处理，在修改子组件的状态时通过$emit来进行数据交互，但是在数据量超出一定程度时，$emit很…"}, {"id": "6972023380677492744", "title": "最易懂的Vue源码解析-响应式原理", "desc": "前言 最近看了下vue的源码(2.0版)，决定就核心部分-响应式原理做一个沉淀，欢迎感兴趣的小伙伴阅读 源码解析 上图是官方给的流程图，为了方便理解，我将从以下顺序进行分析 Data部分，Vue对da"}, {"id": "6982542898839584804", "title": "Vue模板语法", "desc": "1.插值语法 语法：{{JS 表达式}} 作用：动态展示数据 扩展： 2.指令语法 （1）v-model='JS表达式' （2） v-bind:xxx='yyy' （3）v-on"}, {"id": "6844904082574950413", "title": "Vue实现文件中的的实例访问🌱", "desc": "本文将跟各位开发者分享一种解决方案，欢迎各位感兴趣的开发者阅读本文。"}, {"id": "6897134824177860622", "title": "前端框架 - vue核心原理解析", "desc": "MVVM 和 MVC 是两种不同的软件设计模式。 Vue 和 React 使用的是 MVVM 的设计模式，与传统的 MVC 不同，它通过数据驱动视图。MVVM 模式是组件化的基础。 Vue 会遍历 data 所有的 property，并使用 Object.definePrope…"}, {"id": "6844903972487036941", "title": "FormData对象的作用及用法与Vue中axios的使用：", "desc": "将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。 qs.stringify()将对象 序列化成URL的形式，以&进行拼接。"}, {"id": "6844903498174349320", "title": "Vue.js源码——事件机制", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6844903901502636040", "title": "📊 搭建基于 Cube.js 的 Vue Dashboard", "desc": "Cube.js - 一个完整的开源数据分析解决方案：提供高性能的大规模数据集分析技术基础架构，同时提供前端友好的API，用于构建仪表盘报表以及其他数据分析应用，它扮演了前端与后端之间的数据层角色。 Cube.js 客户端执行查询，Cube.js 后端将业务逻辑（dimensio…"}, {"id": "6981274044507258887", "title": "Vue基础", "desc": "Vue 是什么？ Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架 vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合 使用Vue将hell"}, {"id": "6844903581678567437", "title": "为vue项目添加骨架屏 - xiaOp的博客", "desc": "前段时间阅读了饿了么的 PWA 升级实践一文，受益匪浅。其中构建时使用 Vue 预渲染骨架屏一节，为开发者提供了减少白屏时间，提升用户感知体验的新思路。本文将借鉴这一思路，尝试为 Vue 项目添加骨架屏。 著作权归作者所有。 商业转载请联系作者获得授权,非商业转载请注明出处。"}, {"id": "6871164853751873550", "title": "Vue3 源码入门，实现简易版reactivity", "desc": "前言Vue3.0中的reative和Vue2.6中提供的一个全局APIVue.observable 相同，都是用于让一个对象可响应，首先来对比一下他们之间的差异：|reactive|Vue.obser"}, {"id": "6844904030997577741", "title": "vue源码阅读之数据渲染过程", "desc": "vue已是目前国内前端web端三分天下之一，也是工作中主要技术栈之一。在日常使用中知其然也好奇着所以然，因此尝试阅读vue源码并进行总结。本文旨在梳理初始化页面时data中的数据是如何渲染到页面上的。本文将带着这个疑问一点点“追究”vue的'思路'。总体来说vue模版渲染大致流…"}, {"id": "6844903929684164616", "title": "[Vue.js进阶]从源码角度剖析异步组件", "desc": "前言在使用Vue开发单页面应用时，往往会通过路由懒加载的形式减少首屏的代码量，实现访问其他页面再加载对应组件的功能而针对当前的页面，有时也会通过异步加载组件的形式进一步减少当前页面的代码量这些组件可能"}, {"id": "6844903850076307463", "title": "Vue荣耀黄金 —构建自己的Router", "desc": "代码欢迎followvue-router实战先列一段最简单的router代码Vue.use安装路由插件对外暴露了一个newRouter的对象，里面包含所有路由的配置初始化的时候，直接把这个返回的对象传"}, {"id": "6998080548954439710", "title": "Vue学习笔记", "desc": "Vue学习笔记： Vue的特点 1) 遵循 `MVVM` 模式 2) 编码简洁, 体积小, 运行效率高, 适合移动/PC 端开发 3) 它本身只关注 UI, 可以轻松引入 vue"}, {"id": "6881547681292255246", "title": "Quill编辑器自定义字体和字体大小", "desc": "1. 引入依赖 2. 页面代码 3. 样式修改 1. 改动1 2. 改动2 3. 改动3 4. 最终效果"}, {"id": "6854573209879052295", "title": "简要从VUECLI2迁移到VUECLI3，项目选型", "desc": "之前在YW公司，经历了一个老项目，vue项目长达2年。开发的过程中，启动就需要5分钟。编译也比较慢。作为一个对开发体验有追求的前端，实在是忍受不了。所以在一次机缘之下，对项目进行了一次升级。原本的VUECLI2变成了VUECLI4.编译启动从5分钟变成1分钟，常规代码编译也有所…"}, {"id": "6844903648619659278", "title": "vue2.x源码解析系列二: Vue组件初始化过程概要", "desc": "笔名言川, 前端工程师，精通 Vue/Webpack/Git等，熟悉Node/React等，涉猎广泛，对算法/后端/人工智能/linux等都有一定研究。开源爱好者，github上目前总计5000+ Star。 这里分析的是当前(2018/07/25)最新版 V2.5.16 的源…"}, {"id": "6844903816282783751", "title": "vue项目多路由表头吸顶实现的几种布局方式", "desc": "因为项目较大，有五个界面，每个界面有四个子组件，每个子组件都有一个table表格，需求是每个界面的每个table滚动到顶端表头吸顶，所以尝试用vuex做这种需求。 一、先聊js。 A.首先在vuex可以这样设置。 1.在state文件中设置状态。 2.在action中commi…"}, {"id": "6905735421737566222", "title": "vue2源码解析（五）", "desc": "上面的代码可以看到DOM内部的设计，有兴趣的可以试着运行下，就会发现DOM的设计非常复杂，这也是Virtual DOM出现的原因。 本质上Virtual DOM可以看作是浏览器上DOM节点在JavaScript上的映射，通过原生的js对象描述出一个DOM节点。 虽然Vue对Vi…"}, {"id": "6844903518374100999", "title": "vue2 + vue-router + vuex 简易考试系统平台", "desc": "vue2 + vue-router + vuex + iview 入门项目，移动端的一个简易考试系统平台。"}, {"id": "6844904024790007821", "title": "vue源码阅读四：虚拟DOM是如何渲染成真实的DOM的？（上）", "desc": "前面用了两篇文章，讲虚拟 DOM 是如何生成的。终于到了如何将虚拟 DOM 渲染成真实 DOM 的部分了。 vm._render(),我们已经知道是如何生成虚拟 DOM 的了。接下来，我们看看vm._update是如何将虚拟 DOM 渲染成真实的 DOM的。 可以看到，_upd…"}, {"id": "6953174086054838302", "title": "v-for和v-if优先级", "desc": "从 vue2 和 vue3 编译结果差异性了解 v-for 和 v-if 优先级 【v-for， v-if】"}, {"id": "6898303215738191886", "title": "Vue 小白再小白", "desc": "如果一开始就用vue-cli来跑一个vue项目，那么具体.vue文件为什么可以在浏览器中正常的运行起来可能不是很清楚，下面将会一步一步的介绍一个.vue文件怎么在浏览器中运行起来。"}, {"id": "6844903773014327309", "title": "【译】VueJS 最佳实践", "desc": "经过一段时间对VueJs官方文档以及网上其他相关vue资源的研究，我整理了一份最佳实践和样式指南列表，方便大家写出更正确、更容易让小伙伴接受的vue代码。 以下有几点是一些功能/优化相关，其他是VueJs命名约定和元素排序相关。更多详细信息可以直接到最下方的总结中查看。"}, {"id": "6975504095545311245", "title": "【Vue2.x 源码学习】第十七篇 - 生成 render 函数 - 函数生成", "desc": "【Vue2.x 源码学习】第十七篇 - 生成 render 函数 - 函数生成；两件事：使用 with 对生成的 code 进行包装；再通过 new Function 输出为 render 函数；"}, {"id": "6844903605556756488", "title": "VuePress 快速上手指南", "desc": "前段时间，尤雨溪发布了一款基于Vue的静态网站生成器VuePress，可谓火极一时。其为编写技术文档而优化的默认主题也让人非常喜爱，遂决定将MP-WeUI的文档重新使用VuePress生成。安装预览安"}, {"id": "6941305293800210463", "title": "vue cli3 中关于懒加载的研究", "desc": "减少入口文件的体积，提高加载性能。 配置好以后刷新浏览器看到这个路由还是被加载出来了。 搜了一下prefetch 关键字发现webpack 可以通过删除这个来达到 不预取链接的行为。加上这个就可以达到想要的效果了。。 最后有不对的👏欢迎指正。。。"}, {"id": "6844903879784693767", "title": "Vue项目的优化", "desc": "1. 路由采用懒加载 2. 配置webpack中externals，将静态资源采用第三方托管 3. 对输出的样式表文件进行压缩：loaderOptionsPlugin，在webpack.base.conf.js中配置 处理 SCSS 文件、或者普通的 CSS，都需要处理对生成的…"}, {"id": "6913910377541533710", "title": "🚀探索Vue3 Reactivity在小程序中的使用", "desc": "1. 获取@vue/reactivity的源码 2. 小程序app.js中导入该模块 3. 编写一个简单的商品总价计算页面来测试（假装给Page添加了watch和computed🙄）"}, {"id": "6913859013008605198", "title": "setcookie各个参数详解", "desc": "setcookie() 函数向客户端发送一个 HTTP cookie。 cookie 是由服务器发送到浏览器的变量。cookie 通常是服务器嵌入到用户计算机中的小文本文件。每当计算机通过浏览器请求一个页面，就会发送这个 cookie。 cookie 的名称指定为相同名称的变量…"}, {"id": "6844903495947010061", "title": "vue-pikers", "desc": "走了一圈 github 都没有找到自己想要的移动端的 vue-picker的组件，于是自己就下手，撸了一个出来，感受下效果图。 exampleCode：https://github.com/naihe138/vue-picker/blob/master/arearSelect/…"}, {"id": "6932487634644107277", "title": "Vue3的响应数据简易实现-Composition API(reactive, ref, toRef...)", "desc": "前言vue3的reactivity源码地址reactivity响应式系统实现的compositionAPI有:reactive,shallowReactive,shallowReadonly,read"}, {"id": "6934337115324940302", "title": "[Vue源码系列-2]vue3响应式API实现原理", "desc": "1. 响应式API 2. reactivity响应式原理 3. 实现响应式API"}, {"id": "6844904187206074376", "title": "vue组件间通讯总结", "desc": "组件式开发作为 vue 框架核心思想之一，在我们利用 vue 框架做前端开发时，避免不了的要与之打交道。在实际开发中，vue 组件实例间的作用域是相互独立的，但是组件间却是需要相互通信的，共享状态等。所以掌握 vue 组件间何如通信，就显得十分重要，以下总结一下 vue 的 N…"}, {"id": "6844903556261085192", "title": "vue无缝滚动的插件开发填坑分享", "desc": "//5.Fixing a bug. add a overflow:hidden on the child element vue-seamless-scroll发现bug或者有什么不足望指点,感觉不错点个star吧。"}, {"id": "6844903577450725384", "title": "深入浅出 - vue变化侦测原理", "desc": "其实在一年前我已经写过一篇关于 vue响应式原理的文章，但是最近我翻开看看发现讲的内容和我现在心里想的有些不太一样，所以我打算重新写一篇更通俗易懂的文章。 我的目标是能让读者读完我写的文章能学到知识，有一部分文章标题都以深入浅出开头，目的是把一个复杂的东西排除掉干扰学习的因素后…"}, {"id": "6844903961523126279", "title": "Vue基础-框架介绍", "desc": "1. 类库 2. 插件 3. UI组件 4. 框架 components：vue element、iview、vux..."}, {"id": "6938331324918792199", "title": "使用webpack搭建vue项目", "desc": "搭建项目之前先确保电脑安装了node，终端输入node-v查看1、初始化项目新建一个文件夹拖到vscode中，然后打开终端，输入npminit-y，这时候我们看见根目录下多了一个package.jso"}, {"id": "6844903618340978695", "title": "简化 vuex 的状态管理方案", "desc": "在 vuejs 相关项目开发过程中，我们常常会使用 vuex 作为状态管理工具, 整个组件的状态做为单向数据流的模式管理。 事实上，在实际的使用中 vuex 可以说是相当繁琐的，每一次的需求增加需要增加 Mutations-Type 、Action 和 Mutations, 为…"}, {"id": "6844903860708835336", "title": "vue-cli@2.x项目迁移日志", "desc": "虽然 vue-cli@3 早就已经巨普及了，新项目应该已经很少有人还有使用 vue-cli@2.x 。 但是对于一些稍微早些时候的 vue 项目，如果当时没有做一些优化、配置，随着 webpack vue 等包的升级，有一些配置已经不一样了，并且关于 vue-cli@2.x 项…"}, {"id": "6985448250161496078", "title": "VUE之vue-router", "desc": "vue-router 模式 三种：hash、history、abstract 标题 实现原理 hash 通过浏览器自带的window.onhashchange()方法，监听匹配url的变化（包括路径、"}, {"id": "6979856703089180685", "title": "customref 实现 防抖", "desc": "customref: 创建一个自定义的 ref,并对其依赖跟踪和更新数据，触发显示的控制 可以用customref 实现 debounce 防抖的功能"}, {"id": "6907437558779609096", "title": "微信公众号开发详解、以及遇到的坑整理", "desc": "1. 微信首页 2. H5部分 1. vue hash 模式下携带参数网页授权后， 回调链接参数错乱"}, {"id": "6907243383379460110", "title": "vue过滤器filter.js", "desc": "将过滤器放到单独的一个文件中统一管理src\\main.jssrc\\common\\filters.jssrc\\App.vue"}, {"id": "6844903719230767111", "title": "手写（radio）element-ui组件", "desc": "在用户使用过程中提出一键导入的功能，需求如下:点击导入按钮显示提示框，然后是单选框以及上传按钮。pc端常使用element-ui组件，但是这个项目是vue1的老项目，并且没有element-ui组件。所以需要自己动手实现单选功能和上传功能。 value：单选按钮的值，选中某个单…"}, {"id": "6844903827292979208", "title": "Vue多个组件映射到同一个组件,页面不刷新？", "desc": "仅仅只是传入的index的值不同.但是在查看效果的过程中我发现：目标组件'user-center'始终只渲染一次,也就是说,第二次访问到同一路由的时候,Vue那些生命周期的钩子已经没有用了,根本无法通过this.$route.params.index来获取参数. 这样就可以在路…"}, {"id": "6940810871916462117", "title": "免费开源 基于Vue和Quasar的前端SPA项目实战之用户登录（二）", "desc": "通过上一篇文章 基于Vue和Quasar的前端SPA项目实战之环境搭建（一）的介绍，我们已经搭建好本地开发环境并且运行成功了，今天主要介绍登录功能。 通常为了安全考虑，需要用户登录之后才可以访问。crudapi admin web项目也需要引入登录功能，用户登录成功之后，跳转到…"}, {"id": "6914601831155351566", "title": "【Vue实战】聚合选人桥", "desc": "楼主负责的项目中，存在各种选人桥，例如：组织架构桥、本部门桥和常用选人桥。在此之前，这三个桥相安无事，各有用途。 直到有一天，搞事的客户提了一个需求，把这个三个桥放到一起，可以一起选人。产品还给它起了个新名字叫做：聚合选人桥。乀(ˉεˉ 乀)，这时候 活 就来了。淦 活 选人桥…"}, {"id": "6903478517694988296", "title": "$mount & $el & template心得", "desc": "如果 Vue 实例在实例化时没有收到el 选项，则它处于未挂载状态，没有关联的DOM元素。可以使用vm.$mount()手动地挂载一个未挂载的实例。 如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它…"}, {"id": "6844903926333095943", "title": "vue项目开发规范总结", "desc": "组件名应该始终是多个单词的，根组件 App 以及 、 之类的 Vue 内置组件除外。 **永远不要把 v-if 和 v-for 同时用在同一个元素上。**当 Vue 处理指令时，v-for 比 v-if 具有更高的优先级。 对于应用来说，顶级 App 组件和布局组件中的样式可以…"}, {"id": "6865427018675126279", "title": "[翻译] vue3指南--08List Rendering 列表渲染", "desc": "Mapping an Array to Elements with v-for 用v-for把数组映射成元素. We can use the v-for directive to render a list of items based on an array. The v-f…"}, {"id": "6979597107011256351", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】034-Composition API：computed方法生成计算属性", "desc": "5、computed方法生成计算属性 简单使用 运行结果 计算属性内使用get和set方法 运行结果 使set接收参数 运行结果 使用对象 运行结果"}, {"id": "6844903917965295623", "title": "关于 Vue render jsx 与 template 的实践总结", "desc": "此时父组件中是能接收到 name, 但是我还必须获取到 当前的行数据row, 如果直接在上面基础上写 :handleCommand=\"handleChangeCharac(row)\" 这时是会覆盖 name 结构还是只能操作一个对象而不是两个。 导致出现问题的原因：子组件中通过…"}, {"id": "6979614800523296798", "title": "Vue快速入门学习笔记（三） ", "desc": "十七、Webpack 从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 1. 什么是Webpack Webpack 是一款模块加载"}, {"id": "6979614496021020680", "title": "Vue快速入门学习笔记（二）", "desc": "十六、Vue CLI 脚手架 1. 什么是vue-cli 官方提供的一个脚手架，用于快速生成一个 vue 的项目模板 2. 主要功能特点 统一的目录结构 本地调试 热部署 单元测试 集成打包上线 功能"}, {"id": "6844903959077847053", "title": "高性能网站搭建-前端性能优化 (附Vue首屏加载时间优化详细方案)", "desc": "1. 将样式表放在首部-使用link标签将样式表放在文档的HEAD中 遵循HTML规范，将样式表放在头部，可以有效避免白屏和无样式内容的闪烁。 2. 将脚本放在底部 将脚本放在底部</body>标签之前, 类似于document.body.appendChild(yourScr…"}, {"id": "6960939207548207141", "title": "vue3 的响应式实现", "desc": "作为 Vue 最重要的特性之一，本文较为详细的介绍了响应式在 Vue2 、 Vue3 的中实现及其优缺点"}, {"id": "6958478491855618061", "title": "Vue diff 算法", "desc": "一、diff 算法 diff 算法是一种通过同层的树节点进行比较的高效算法，避免对树的逐层遍历，减少时间复杂度。 diff 算法的两个特点： 只会同级比较，不会跨层。 diff 比较循环都是从两边往中"}, {"id": "6844903925657665549", "title": "Vue从甜小白到皮大佬系列(一) Vue是个啥?", "desc": "当你看到这篇文章的时候,想必这位大侠难免多少略知Vue这个世界级别的框架的来头,华裔程序贵族尤雨溪大佬的开源作品(膜拜大佬三分钟...),从面世至今gitHub上的点赞数量已经超过Angular,React等著名框架,🔥的发紫,着实有后来者居上的感觉,Vue借鉴了前两者的优秀…"}, {"id": "6844903699425263629", "title": "vue watch数组引发的血案", "desc": "变异方法，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异方法，例如：filter(),concat()和slice()。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组 2. 数组也是一个对象，索引相当于对象属性的key值，…"}, {"id": "7004674657114652703", "title": "浅析Vue两个版本的区别和使用", "desc": "1.两个版本对应的文件名 vue.js(完整版) vue.runtime.js(非完整版) 1.1两个版本的区别 标题 Vue完整版 Vue非完整版 评价 特点 有compiler 没有compile"}, {"id": "6844903664931307534", "title": "webpack4搭建现代Hybird-h5工程", "desc": "入口繁杂其实意味着你的前端工程搭建必须是以多入口为起点搭建的，如webpack你可以配置entry，自行写一个脚本在构建时获取每一个页面的js入口，而多入口意味着你必须考虑页面之间共享的模块应该如何抽取以达到一个较优的模块利用率，这点我们在文章下一节详细讲。 其实有做过混合开发…"}, {"id": "6946123143119388686", "title": "vue2 和 vue3 使用区别", "desc": "bind - 指令绑定到元素后发生。只发生一次。 inserted - 元素插入父 DOM 后发生。 update - 当元素更新，但子元素尚未更新时，将调用此钩子。 componentUpdated - 一旦组件和子级被更新，就会调用这个钩子。 unbind - 一旦指令被移…"}, {"id": "6935686232768774180", "title": "vue2与vue3响应原理", "desc": "之前的vue2、现在的vue3，它都是vue。为什么要出vue3？肯定是因为vue3存在一定性的优势啊。 本文就响应式原理进行分析。"}, {"id": "6844903655762558983", "title": "重磅！Vue CLI 3.0正式发布，带来多项重大更新", "desc": "近日，Vue 的作者尤雨溪在 Medium 上宣布正式发布 Vue CLI 3.0，它也将为很多开发者带来期待已久的新特性。 丰富的内置功能 尤雨溪表示，Vue CLI 3.0 与其他的版本完全不同，它经历了重构，目的是： 尽可能减少现代前端工具在配置上的烦恼，尤其是在开发者将…"}, {"id": "6891165649452826632", "title": "Vue 七张思维导图--拿起航海图开启学习Vue之旅", "desc": "清晰大图大家可以到我的GitHub地址下载:千树同学Vue思维导图目录基本语法组件ComponentVue-Router开发工具Vue-cli状态管理器VueXUI组件-Element基本语法组件Co"}, {"id": "6994832415093391374", "title": "【前端】一网打尽──Vue3 Composition-api新特性", "desc": "在体验Vue3之前，我们先来了解一下Vu3到底有哪些亮点之处，总共有6大特点，分别是Performance..."}, {"id": "6844903901003513863", "title": "彻底理解Vue中的Watcher、Observer、Dep", "desc": "当我们写下这行代码时,vue将我们在data内定义的obj对象进行依赖追踪. 我们来一步步实现看下。"}, {"id": "6990250770536857607", "title": "VUE项目根据不同环境引入js", "desc": "​最近采用VUE做客服相关的系统，由于依赖第三方js，因此需要根据不同环境引入js。 比如在外网引入a.js，在内网引入b.js，该场景可根据不同需求而调整。 中间尝试了一些方法，都不行，当然，加载该"}, {"id": "6917999260050915335", "title": "Vue2.0源码分析：过滤器Filter", "desc": "在分析过滤器的实现原理之前，我们需要先回顾一下过滤器的用法，包括：注册方式、使用方式。这样做的目的，是为了方便我们更好地理解过滤器的实现原理，同时也为我们分析过滤器提供了一种思路指引。 同指令一样，过滤器的注册分两种方式：全局注册和局部注册。 全局注册的过滤器，都会在Vue.o…"}, {"id": "6844903698166988808", "title": "Vue双向绑定原理，教你一步一步实现双向绑定", "desc": "当今前端天下以 Angular、React、vue 三足鼎立的局面，你不选择一个阵营基本上无法立足于前端，甚至是两个或者三个阵营都要选择，大势所趋。 所以我们要时刻保持好奇心，拥抱变化，只有在不断的变化中你才能利于不败之地，保守只能等死。 最近在学习 Vue，一直以来对它的双向…"}, {"id": "6844903575563272206", "title": "vue单页应用如何在页面刷新时保留状态数据", "desc": "在Vue单页应用中，如果在某一个具体路由的具体页面下点击刷新，那么刷新后，页面的状态信息可能就会丢失掉。这时候应该怎么处理呢？如果你也有这个疑惑，这篇文章或许能够帮助到你 现在产品上有个需求：单页应用走到某个具体的页面，然后点击刷新后，刷新的页面要与刷新前的页面要保持一致。 这…"}, {"id": "6850418115106570254", "title": "【伪vue3.0】vue2.0 +  composition API + ts", "desc": "vue3.0 正式版已经不远，偷懒一下，跳过vue2.0 + ts 的那套 Class API，一步到位，直接上 composition API。"}, {"id": "6874069543719976967", "title": "我的第一个vue项目记录——电商后台管理", "desc": "项目概述感兴趣的同学可以在我的github上下载项目的源代码：github.com/Angus2333/v…功能：电商后台管理系统用于管理用户账号、商品分类、商品信息、订单、数据统计等业务功能开发模式"}, {"id": "6987281450647158792", "title": "Vue3.0  简单入门", "desc": "值得注意的新特性 Vue 3 中需要关注的一些新功能包括： 组合式 API Teleport 片段 触发组件选项 来自 @vue/runtime-core 的 createRenderer API"}, {"id": "6844903812474339341", "title": "Vue传参一箩筐", "desc": "Vue页面、组件之间传参方式繁多，此处罗列出常用的几种方式，欢迎审阅补充。 这里的路由传参以编程式router.push(...)为例，声明式<router-link :to=\"...\">与之类似。此处模拟情景为从componentsA.vue页面跳转到componentsB.…"}, {"id": "6985898347110334501", "title": "极简系列---vue 响应式实现(2.x)", "desc": "用过vue的同学想必都知道它是基于`Object.defineProperty`实现的响应式，那么具体是怎么做到呢，下面我将用不到两百行代码逐步拆解响应式原理，实现极简版vue"}, {"id": "6844903552435879950", "title": "从零开始搭建 Express + Vue 开发环境", "desc": "完整的代码已经上传 Github，点击访问 预处理工具又分为 js 预处理工具和 css 预处理工具。Javascript 一直以来最为人诟病的一点就是缺乏原生的模块机制，所有 js 代码文件在被 html 页面引入后将共用同一个命名空间。所以才出现了各种“标准”尝试解决这个问…"}, {"id": "6882018282644176909", "title": "Vue3 渐进式JavaScript框架", "desc": "必须要夸一夸 Vue3，它真实可谓“千呼万唤使出来”，听说是尤大神每天抱着孩子完成的。故事已经不能说明 Vue3 的伟大了，我们用下面一组数字来了解一下 Vue3。 这些数字可以看出 Vue3 的工作量之大，我在一年前就开始关注 Vue3 的开发进展，虽然没成为 Vue3 的贡…"}, {"id": "6844903876588470286", "title": "大白话理解和初步使用vue-router", "desc": "router，路由，我理解的其实就是，让不同的路径对应的不同的视图。在vue里，其实视图就相当于组件。也就是让不同的路径对应不同的组件。换言之，router就是规定了路径和组件一一对应。这句可能是理解vue-touter的核心。 vue官网对render解释的很清楚，这边我简单…"}, {"id": "6844903860574617608", "title": "Vue SSR技术方案落地实现—构建同构应用", "desc": "2)、优化单页应用的首屏加载时间：现今单页面应用大行其道，单页面应用解决了页面无感加载，但是带来了首屏加载缓慢；通过服务器端渲染机制可以很好的解决首屏页面加载问题。当然这不是唯一的解决方案（合理拆分成多页面应用也可以解决）； 1)、纯后台技术实现：利用后台语言模板引擎进行服务器…"}, {"id": "6844903888483516429", "title": "vue+iview兼容IE9以上的解决办法", "desc": "1. 支持ES6新语法，安装babel-polyfill 2. IE10以下，iview的日期组件无法选择 3. 支持promise 4. ie9不支持placeholder属性"}, {"id": "6844903497012346893", "title": "Vue.js 框架成为 WordPress 弃用 React 后的最佳选择", "desc": "上周，WordPress 团队因专利问题而决定停止使用 React 的消息，引发了社区关于新技术框架的讨论。在美中国开发者尤雨溪（英文名：Evan You）的 Vue.js 框架，成为呼声最高的竞争者。"}, {"id": "6844904161901838350", "title": "从发布订阅模式到双向绑定", "desc": "本文会探讨一下发布订阅模式在前端的应用以及双向绑定的实现原理。 软件编程的设计模式起源于上世纪90年代：软件编程开发中，会有一些比较经典的问题以及对应方法，可以归纳总结出来成为通用的思路和方式，以便在后续软件开发人员借鉴使用，上世纪90年代逐渐出现一些零星的设计模式出现，而比较…"}, {"id": "6985811593510518797", "title": "Vue常用特性", "desc": "1. 常用特性概览 表单操作 自定义指令 计算属性 侦听器 过滤器 生命周期 2. 表单操作 2.1. 基于Vue的表单操作 Input 单行文本(输入框) textarea 多行文本（文本域）） s"}, {"id": "6844903590172196872", "title": "使用ES6 class来编写vuex模块，使得代码更易于维护和拓展", "desc": "vuex-class.jsUsees6classtowritethevuexmodule,makingthecodeeasiertomaintainandexpand.InstallingDocume"}, {"id": "6940926004835647524", "title": "Vue3源码解析07--reactivity响应式实现(虚拟DOM&diff)", "desc": "上一篇我们提到了响应式是一种思路，我们不止可以用响应式处理数据，还可以用响应式处理一些视图我们的更新。这次我们要做的就是给我们的 min-vue 结合响应式数据添加上视图更新的功能。 我们这里，模仿 Vue3 的render和setup来做个简易的视图更新。 render 函数…"}, {"id": "6844903550141595662", "title": "仿饿了么项目-vue的学习笔记总目录", "desc": "备注:这个项目刚开始是用 vue1写的,后面改为了 vue2,并且鉴于 vue-resource 已经不维护了,改为axios, 这是需要特别注意的. 详细的目录就在这里："}, {"id": "6897090694473580557", "title": "ref/$refs的使用场景 -- vue组件通信系列", "desc": "vue 组件的数据通信方式很多，本篇着重讲ref/$refs，神助$nextTick。 作用：获取节点或组件实例。 场景：简单的获取节点或组件实例的属性或者方法，但并不改变其数据。 缺陷：必须在模板渲染之后，不是响应式的，时不时配合$nextTick。 ref 是以属性的方式存…"}, {"id": "6844903716265574407", "title": "使用 Drag and Drop 给Web应用提升交互体验", "desc": "简单来说，HTML5 提供了 Drag and Drop API，允许用户用鼠标选中一个可拖动元素，移动鼠标拖放到一个可放置到元素的过程。 我相信每个人都或多或少接触过拖放，比如浏览器多标签页之间的可拖放排序、手机中的App可以随便拖放排序等等，Drag and Drop 已经…"}, {"id": "6844903778924134407", "title": "造了一个VUE插件——JsBridge", "desc": "前端启动时查询native端是否存在token，存在就同步到localstorage，不存在，跳转登陆页面。 问题已经确定了，是调用jsBridge实例时，它还未初始化完成。感兴趣的可以去看下WebViewJavascriptBridge源码，虽然初始化时间很短，但是已经造成了…"}, {"id": "6947296766433705998", "title": "Vue3任务调度", "desc": "当执行name.value += ' yes!'，vue3并不会立即触发当前组件的更新。而是将更新任务放到任务队列中。这一点与vue2一致。 effect的回调函数会被响应式得重写触发执行。 那么回到本文最开始的例子中，当执行name.value += ' yes!'。响应式数…"}, {"id": "6844903692710199303", "title": "如何构建一个不到100行的小程序端mini版本redux", "desc": "1. 互联网 toC 应用研发之痛 缺人，缺人，我们缺少高质量前端，这可能是绝大多数技术管理者的诉求。面对系统中漫天的bug，蟑螂一样杀不尽的低级错误，是否总是那么的无能为力。虽然我们有很多测试工具以及自动化测试的库，但是我们依然会困惑于为什么做前端自动化测试实施起来这么难？ …"}, {"id": "6844904177940824071", "title": "Vue的class语法与常规语法对照表", "desc": "由于项目需要，需要使用Vue的class语法配合TypeScript 来进行组件开发，我也简单总结了一下Class语法与常规语法的对照，便于记忆和查阅。 项目中使用的是vue-class-component、vue-property-decorator配合TypeScript来…"}, {"id": "6877361643803099150", "title": "vue2.0|实现篇|依赖收集", "desc": "需要四个参数：1. vue实例 2. 用户传递表达式或函数 （相当于 vm._update(vm._render());）3. 回调函数 4. 配置信息对象"}, {"id": "6844903549231431693", "title": "从零开始搭建一个简单的基于webpack的vue开发环境", "desc": "都8102年了，现在还来谈webpack的配置，额，是有点晚了。而且，基于vue-cli或者create-react-app生成的项目，也已经一键为我们配置好了webpack，看起来似乎并不需要我们深入了解。 不过，为了学习和理解webpack解决了前端的哪些痛点，还是有必要从…"}, {"id": "6844903810398175239", "title": "AT-UIの入手某东的UI框架", "desc": "用Element-UI做了两个后台，时间长了有点视觉劳累，挑来挑去，入选了某东的AT-UI，搭建了一个雏形的后台骨架，下面记录一下使用方法（此时应附地址：官网传送门）。 本人是在vue2.0的基础上搭建，所以，谨记：先搭建好初步的项目文件，再来看下面的介绍。 然后在main.j…"}, {"id": "6981628524079611911", "title": "Vue双向绑定原理(Observer和Dep)", "desc": "vue响应式原理的基本流程： 初始化Vue实例时，Observer遍历data里所有属性，使用Object.defineProperty()方法把这些属性都转为getter/setter。"}, {"id": "6844903713862057997", "title": "vue项目实践004~~~一篮子的实践技巧", "desc": "使用场景：主要是针对需要把对象的一些属性批量的赋值到另外一个对象上，然后如果你的属性很多可能要写很多赋值语句。（前提是属性名一般是相同的） 拓展思考：像这种代码如果你的vue代码里经常写，不妨在你的mixins中混入这个方法，可以为你的页面节省大量的代码空间。 在我们的代码中经…"}, {"id": "6844903550623940615", "title": "对服务端渲染的一次完全实践", "desc": "我们还可以自己写逻辑 通过context来处理302、404等。但这里我不需要。。。。。，为什么呢？ 我对路由的处理流程上面的思维导图有说明，就是在nginx中多配一个代理。 上面说server端初始化数据的时候还有一个登陆问题没说。 到这一步，访问域名，就能够正确展示服务端渲…"}, {"id": "6981653320410595336", "title": "web-初探vue-diff算法1", "desc": "背景 之所以要用diff算法，是因为渲染一棵真实的dom树的开销很大，比如修改某个结点，重拍或者重绘dom树会消耗大量的时间复。 diff算法的本质是找出两个dom对象之间的差异，目的是尽可能的复用结"}, {"id": "6971477064364851207", "title": "Vue：数据式响应", "desc": "上一篇写了构造选项options，data作为内部数据，还有很多东西值得探讨。Vue官方文档在data下提供了深入响应式原理，这篇文章主要记录对响应式原理的深度学习。"}, {"id": "6986833442646261796", "title": "Vue sockjs.js net:ERR_CONNECTION_TIMED_OUT 报错解决方案", "desc": "本文介绍如何解决Vue前端控制台报错：Vue sockjs.js net:ERR_CONNECTION_TIMED_OUT 报错解决方案。"}, {"id": "6971682830246133791", "title": "Vue3响应式原理", "desc": "Vue2.x响应式分析： 核心API:Object.defineProperty 响应式原理：数据改变的时候，视图会跟着更新 简单分析： 遍历data对象所有的 property，并使用 Object"}, {"id": "6938678766755545119", "title": "Vue从2.0到3.0的踩坑之路（二）使用vue-router", "desc": "Vue3使用的vue-router版本为4，所以安装的时候需要加上@next。 vue-router的Vue3版本需要导入新的方法，其中主要用到的是createRouter()，createWebHistory()和createWebHashHistory()。 createR…"}, {"id": "6844903885140672526", "title": "深入剖析Vue源码 - 响应式系统构建(中)", "desc": "watcher类，实例化watcher类相当于创建一个依赖，简单的理解是数据在哪里被使用就需要产生了一个依赖。当数据发生改变时，会通知到每个依赖进行更新，前面提到的渲染wathcer便是渲染dom时使用数据产生的依赖。 Dep类，既然watcher理解为每个数据需要监听的依赖，…"}, {"id": "6924220727788830727", "title": "Vue2.0 diff", "desc": "Vuediff双端指针比较简易的逻辑图DIFF理解diff的每一轮比较都会顺序和交叉的比较，首首、尾尾、首尾、尾首、查找(newStartVnode是否在oldCh存在相同节点)基础的dom,每一次p"}, {"id": "6844903551433441287", "title": "自己动手写一个 SimpleVue", "desc": "双向绑定是 MVVM 框架最核心之处，那么双向绑定的核心是什么呢？核心就是 Object.defineProperty 这个 API，关于这个 API 的具体内容，请移步 MDN - Object.defineProperty ，里面有更详细的说明。 监听者(Observer)…"}, {"id": "6844904099733848072", "title": "vue ssr + koa2 构建服务端渲染", "desc": "之前做了活动投放页面在百度、360等渠道投放，采用 koa2 + 模版引擎的方式。发现几个问题 兼容性问题，在页面中添加埋点后发现有些用户的数据拿不到，排查后发现通过各个渠道过来的用户的设备中仍然包含大量低版本的浏览器。 查看下面两张图，可以看到如果是服务端渲染，那么在浏览器中…"}, {"id": "6844904003663298573", "title": "深入理解组件的扩展性和易用性", "desc": "1. 前言 在前端开发工作中尤其是项目起步阶段，经常会选取第三方组件库快速构建，拿Vue生态来说，大众普遍对element-ui和iview 情有独钟，其中element-ui多用于对接前台项目，iview多用于对接后台管理项目。可不论是用哪种组件库，只要其易用性、扩展性和感官…"}, {"id": "6986650344486862885", "title": "Vue组件化开发", "desc": "1. 组件化开发思想 1.1. 现实中的组件化思想体现 标准 分治 重用 组合 1.2. 编程中的组件化思想体现 1.3. 组件化规范: Web Components 我们希望尽可能多的重用代码 自定"}, {"id": "6903445232214343693", "title": "安卓、ios微信H5分享踩坑指南", "desc": "博主最近在开发一个H5的项目，正好遇到了微信分享，不得不说微信的文档不知多久没更新的缘故，里面的操作可以在安卓完美的进行，但是！有一个可恶的苹果挡住了去路！闲话不多说，直接进去正题。附上步骤图一、判断"}, {"id": "6896742459678654472", "title": "$attrs/$listeners的使用场景 -- vue组件通信系列", "desc": "vue组件的数据通信方式很多，本篇着重讲$attrs/$listeners，神助是v-bind=\"$attrs\"/v-on=\"$listeners。 $attrs/$listeners的常用场景：封装第三方组件或者表单组件，从而减少组件处理成本。 使用组件的时候，vue内部会将…"}, {"id": "6844903624494039054", "title": "手把手教你封装Vue组件", "desc": "为了能在Vue上更简便地使用canvas-nest.js这个炫酷的特效，在原项目作者的提醒下，花了几小时直接将canvas-nest封装成了vue-canvas-nest组件。 将原来的src文件夹重命名为example以便后期当示例和调试使用。 此时就能看到炫酷的canvas…"}, {"id": "6844903591795228679", "title": "VuePress-基于vue-ssr的静态网站生器初体验", "desc": "昨天在微博上看到尤大神新发布的基于vue-ssr静态网站生成器VuePress，刚刚通过Hexo搭建博客的我又忍不住去尝试了下。。"}, {"id": "6916827100313813006", "title": "VueJS生命周期|七日打卡", "desc": "​ 就是vue实例从创建到销毁的过程. ​ 每个 Vue 实例在被创建到销毁都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代…"}, {"id": "6973969187190341646", "title": "如何使用 render 函数封装高扩展的组件", "desc": "如何使用 render 函数封装高扩展的组件 前面的文章有提到，vue 官网给出的 render 函数的例子只能体现 render 函数的优雅的一方面，却不能看出其扩展性。"}, {"id": "6844903775077924878", "title": "重构Vue项目的通用处理流程", "desc": "需要给所有查询页面加上筛选条件缓存功能，查看了一下现有代码，发现每个页面都有大量冗余的关于本地存储和远端存储的代码，并且每个页面的存储逻辑都略有不同，想了半天，愣是一行代码没写下去。我离开座位，就一直想，到底是什么东西在妨碍我，最后所有矛头都指向一点——缺少通用流程。 项目在产…"}, {"id": "6919724627363102734", "title": "预加载 prerender-spa-plugin", "desc": "这是在vue-cli4 + vue 3.0的基础下实现的预加载。 1.更好的 SEO，利于搜索引擎抓取页面信息。"}, {"id": "6844903845722587144", "title": "vue-cli3.0的简单配置", "desc": "首先注意一下：Vue Cli要求Node.js版本8或更高，也可以在同一台计算机上管理多个版本的Node。 这里有两个模式，第一个是使用默认的模式，另一个是自定义模式，利用键盘上下控制操作，enter确认。默认模式我就不做赘述了，我这里主要谈一下自定义模式吧。 这里主要用来手动…"}, {"id": "6929110367314706440", "title": "初探vue3｜牛气冲天新年征文", "desc": "setup 选项应该是一个接受 props 和 context 的函数。此外，我们从 setup 返回的所有内容都将暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。 传递给 setup 函数的第二个参数是 context 。 context 是一个普…"}, {"id": "6844903962286669837", "title": "Vue Class与Style绑定", "desc": "操作元素的class列表和内联样式是数据绑定的一个常见需求。因为它们都是属性，所以我们可以用 v-bind 处理它们：只需要通过表达式计算出字符串结果即可。 表达式结果的类型除了字符串之外，还可以是对象或数组。 上图的语法表示 Font 这个 class 存在与否将取决于数据属…"}, {"id": "6844903578025328653", "title": "Electron-vue开发实战3——跨平台的一些兼容措施", "desc": "前段时间，我用electron-vue开发了一款跨平台（目前支持Mac和Windows）的免费开源的图床上传应用——PicGo，在开发过程中踩了不少的坑，不仅来自应用的业务逻辑本身，也来自electron本身。在开发这个应用过程中，我学了不少的东西。因为我也是从0开始学习ele…"}, {"id": "6844903558991577101", "title": "使用 SVG 图标: (1) 编写 Icon 组件", "desc": "SVG 即可缩放矢量图形。跟普通的图片相比，它放大也不会失真，并且文件体积更小。现在浏览器对 SVG 支持性是非常好的，我们经常在项目中使用它，比如使用 SVG 图标或者使用 SVG 图片解决高清屏幕下的 1px 显示问题。 本文将主要谈论 SVG 图标的使用，并且会结合实例给…"}, {"id": "6844903640910544903", "title": "Vue源码阅读 - 批量异步更新与nextTick原理", "desc": "1. 异步更新 上一篇文章我们在依赖收集原理的响应式化方法 defineReactive 中的 setter 访问器中有派发更新 dep.notify() 方法，这个方法会挨个通知在 dep 的 subs 中收集的订阅自己变动的watchers执行update。一起来看看 up…"}, {"id": "6969164198244941860", "title": "[day-ui] Alert 组件学习", "desc": "仿 vue3 element-plus alert 组件，对结构和属性的分析。后面简单些介绍了 transition 组建的学习"}, {"id": "6991829607099924487", "title": "Vue.js 3.0源码解读：组件的实现-组件渲染(2)", "desc": "核心渲染流程：创建vnode和渲染vnode 1.创建vnode vnode本质上是用来描述DOM的JavaScript对象，它在Vue.js中可以描述不同类型的节点，比如普通元素节点、组件节点等。那"}, {"id": "6844903502087454727", "title": "Vuejs官方编码指南,快来看看你的代码符合多少最佳实践", "desc": "This is the official style guide for Vue-specific code. If you use Vue in a project, it’s a great reference to avoid errors, bikeshedding, …"}, {"id": "6844904168541388814", "title": "实现微前端需要了解的 Vue Genesis 渲染器", "desc": "在 Genesis 中，核心的就是渲染器，它提供了最基础渲染能力，有了它，你可以实现微前端、微服务、远程组件、首屏渲染，甚至可以和 React、EJS 等配合使用。 如果你是传统的后端渲染的，需要做SEO，但是你希望在部分布局，部分页面引入 Vue，那么 renderer.re…"}, {"id": "6991818044678864910", "title": "vue组件传值之props和$emit", "desc": "面试官问我：“你会组件传值的方法吗？会几种啊？”我淡定的说：“好多种，你想听那种？”。vue组件传值之Props和$emit☺"}, {"id": "6991771038107303967", "title": "回首Vue3之指令篇（二）｜8月更文挑战", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 对于v-html指令，我们是不陌生的，如果你读过回首Vue3之指令篇（一）｜8月更文挑战，可以类比做些类似的操作；如果没有，那就让我们接着"}, {"id": "6952875529871556616", "title": "Vue的学习笔记（下篇）", "desc": "一、什么是Vue.js? Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项"}, {"id": "6844903509683355661", "title": "分享微信小程序中实现sticky效果的列表页", "desc": "简单地说就是标题会有粘黏的效果，向下滑动时跟着列表走，向上滑动到顶部时将会固定在顶部。 左侧列表页没什么好讲的，无非就是按下某个类型，给上一个checked样式，然后改变toView（关键）的值。 但是... 假如不是小程序的话应该很多人都知道怎么做，无非就是监听滚动条，判断滚…"}, {"id": "6990981004940804109", "title": "Vue3学习 --- v-model和组件基础", "desc": "组件是 Vue最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，在某些情况下，组件也可以表现为用 js特性进行了扩展的原生 HTML 元素。"}, {"id": "6844903638465249293", "title": "mpvue生命周期初探", "desc": "最近使用了 mpvue 搭建并开发了公司一个小程序项目，周末花点时间研究一下 Vue.js 组件生命周期和小程序页面生命周期的调用顺序问题。 小程序只有一个 App 实例，对应 mpvue 项目的 App.vue 里面的内容，全页面共享，mpvue 为这个实例以及组件（组件包括…"}, {"id": "6844903656681111565", "title": "Vue中的组件以及父子组件通信传值", "desc": "文章结构.png如果你想阅读体验更好戳该链接即可vue中的组件以及父子组件间通信传值前言您将在本文当中了解到,往网页中添加数据,从传统的dom操作过渡到数据层操作,实现同一个目标,两种不同的方式.以及"}, {"id": "6977925716339851277", "title": "Vue电商后台管理项目总结", "desc": "一、阶段总结 本次做的项目属于前端项目，直接调用接口，在开发过程中使用 Vue cil4 脚手架进行开发，使用码云作为 Git 管理仓库,登录用户名为：admin，密码为：123456。 二、项目技术"}, {"id": "6844903794765987854", "title": "【译】Vue 的小奇技（第九篇）：快照测试的威力", "desc": "如果你进入了测试阶段，你可能已经开始时候用了 Jest：Facebook 创建的一体化测试框架。现在它是最流行的测试框架之一，而且我从一开始就使用至今。 你也可能在使用由 Edd Yerburg 开发的 vue-test-utils，它是官方的单元测试实用工具库，能让我们的测试…"}, {"id": "6844904009480798221", "title": "基于vue-cli3创建libs库", "desc": "2：是不是大多数时候都是使用cv大法？from \"a\" to \"b\" to “c” to anyWhere..... 在根目录下创建vue.config.js配置文件（vue-cli3的配置文件，在这里的配置会覆盖脚手架webpack默认的配置项）。 进入packages目录创…"}, {"id": "6844903582311907341", "title": "前端菜鸟帝都面试记 super | 掘金技术征文", "desc": "在前面几篇文章中谈了美团、春雨医生、今日头条、第四范式、玩吧，我觉得很有收获的几家公司，现在把其他几家不错的公司面试经历分享给大佬们。 在狗年附近大大小小的面试了10多家公司，大公司和小公司都有。 D 轮 + 公司： 百度外卖，美团外卖，今日头条商业广告部门。 看中前端基础的，…"}, {"id": "6844903600158670861", "title": "Vue国际化处理 vue-i18n 以及项目自动切换中英文", "desc": "0. 直接上 预览链接 1. 环境搭建 2. 项目增加国际化翻译文件 在项目的src下添加lang文件夹增加中文翻译文件（zh_CN.js）以及英文翻译文件（EN.js），里面分别存储项目中需要翻译的信息。 3. 项目引入 在项目的main.js中引入vue-i18n插件，引入…"}, {"id": "6844903861270888455", "title": "【PPT分享】Evan Vue.js 技术分享", "desc": "相关链接：rfcsVue2.0的建议学习顺序Vue技术内幕Vue技术揭秘"}, {"id": "6914816401190420494", "title": "vue-quill-editor插入图片路径太长问题解决", "desc": "最近做项目的时候有一个发布新闻的需求，新闻编辑的时候要求能发布带格式的文本内容和能展示支持图片。 由于项目是用 Vue 开发的，所以找编辑器的时候选了 vue-quill-editor 。编辑器长如下的样子： 但是这个编辑器会把插入的图片会转成 base64 位的编码，使得编辑…"}, {"id": "6844904022281814023", "title": "总结几个vue-router的使用技巧", "desc": "SPA(single page application):单一页面应用程序，只有一个完整的页面；它在加载页面时，不会加载整个页面，而是只更新某个指定的容器中内容。单页面应用(SPA)的核心之一是:更新视图而不重新请求页面;vue-router在实现单页面前端路由。本文在gith…"}, {"id": "6844903606081028104", "title": "vue router+ vuex+ 首页登录判断逻辑", "desc": "首页登录逻辑要求在页面上判断是否获取到登录token ，没有获取到则跳转到登录页。登录成功后，跳转到前一个页面。 路由判断首先我们想到的是router.beforeEach 前置导航守卫 ，这个方法接受三个参数 to from next 。 to参数为即将跳转的路由路径，fro…"}, {"id": "6967262800603250718", "title": "vue3学习之应用变化（一）", "desc": "本文主要包括以下内容： v-model使用的变化；渲染函数API的变化；函数式组件使用变化 异步组件使用变化"}, {"id": "6988882441888858148", "title": "vue 在输入框input中限制对小数浮点类型的输入", "desc": "描述 项目中经常碰到一些要在文本输入框中只能输入数字或指定位数的小数的要求，如果可以做一个统一的指令，将这部分需求封装复用，使用起来会方便很多。"}, {"id": "6965767566589427742", "title": "Vue3小知识大杂烩—自我浅析", "desc": "v-if 与 v-show 有什么区别 v-if切换会创建/删除元素，v-show切换只是元素的展示/隐藏(display: none) v-if切换会创建/销毁组件，v-show切换在创建完组件后只"}, {"id": "6985849086205247524", "title": "vue首次渲染过程（粗析）", "desc": "本文章主要简单介绍vue首次渲染过程到底做了什么事情。更多参考 vue初始化 首先就是main.js的import Vue from 'vue' 一般我们用vue/cli创建项目的时候用的是"}, {"id": "6906790231371055118", "title": "Vite 实现原理", "desc": "Vite实现原理1）Vite概念Vite是一个面向现代浏览器的一个更轻、更快的Web应用开发工具它基于ECMAScript标准原生模块系统(ESModule)实现2）对比vue-cli-service"}, {"id": "6944547426237677598", "title": " 快速开发一个锤子便签", "desc": "欢迎点start😍，鼓励我一下。 我是锤子便签的深度用户，除了写日记、备忘、文章外，偶尔也用来写技术笔记，有一段短时间把设计模式和《重构》的笔记用便签 + 代码的形式发布到掘金沸点记录下来。 但是锤子便签不能把主题迁移到别处使用，想复制一份复用，就在夜深人静时Fork了Mar…"}, {"id": "6904901153872412680", "title": "Vue3.0+TS打造企业级组件库 快速掌握Vue3企业实际应用", "desc": "Vue3.0+TS打造企业级组件库快速掌握Vue3企业实际应用下载地址：百度云盘在本课程中，我将带你从0开始构建一个高质量的开源的表单生成器。这个表单生成器也是我们团队中正在用的，对开发效率有着非常明"}, {"id": "6844904200166440973", "title": "vue性能优化之Gzip压缩", "desc": "安装的时候一定要带上版本号， 否则的话，版本太高 可能会报错。 3.修改build下的 webpack.prod.conf.js，将assert 改为fileName,不修改的话会报错。 至此，配置就完成。 5.我们打包一下。可以看到所有的文件都生成了一个同名的gz文件，最大的…"}, {"id": "6844903887518859277", "title": "使用vue for时为什么要key", "desc": "用vue框架写前端代码时经常会用用到v-for这个方法，但使用此方法时vue推荐我们加上一个唯一标识key这是为什么呢？阅读了网上各位大神的文章以及自己的一些理解对这个问题有了新的认识。所以记录下来，若各位看官看到文章里面有错误的地方请指正一下。谢谢各位大佬。 修改渲染真实的d…"}, {"id": "6900878649474416647", "title": "前端登录原理", "desc": "感谢互联网上各位大佬的无私奉献，跟着大佬的脚步，才能快速的成长。 token的作用：和后端进行交互时，作为通行证。 【1】请求拦截：如果本地有token,在发送请求前请求头headers添加token字段。 【2】响应拦截：当前token失效了，但是token依然保存在本地。这…"}, {"id": "6899645994070671373", "title": "Bpmn 节点与连线部分属性整理", "desc": "1. 基础信息 2. BusinessObject 1. BusinessObject.ConditionExpression 2. BusinessObject.sourceRef 3. BusinessObject.targetRef 由于工作需要（其实不是很需要），在公司…"}, {"id": "6992395901620879368", "title": "打造组件库之table组件", "desc": "组件需求 传一个columns配置文件，即可生成对应的table 传一个data即可渲染对应的数据 可通过插槽的方式对数据进行二次处理 组件prop设计 参数 类型 是否必须 示例 columns A"}, {"id": "6844904147804749832", "title": "Vue中$nextTick源码解析", "desc": "在做项目的时候，我们经常会用到nextTick，简单的理解就是它就是一个setTimeout函数，将函数放到异步后去处理；将它替换成setTimeout好像也能跑起来，但它仅仅这么简单吗？那为什么我们不直接用setTimeout呢？让我们深入剖析一下。 记得之前有一个需求，就是…"}, {"id": "6993969124527308830", "title": "VUE SSR常见问题，优化及异常处理", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 ssr的意思是服务端渲染，前端还没有流行的时候，之前的网站是在服务端拼接HTML字符串，将其返回呈现在页面 vue ssr优点： vue s"}, {"id": "7000640207103983652", "title": "手把手教你怎样在vue3中使用redux", "desc": "前言 现在的web应用基本上都走上了数据驱动的道路，而数据状态的管理则理所当然成为了项目开发的核心，所以理论上只要统一状态层，view渲染可以随意更换框架和模式。 而我们在做项目的时候大部分都是vue"}, {"id": "6976269452606341127", "title": "Electron+Vue3 MAC 版日历开发记录(21)——解决 Events 不显示的Bug", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6875713523968802829", "title": "Vue3拥抱TypeScript的正确姿势", "desc": "TypeScript 是JS的一个超集，主要提供了类型系统和对ES6的支持，使用 TypeScript 可以增加代码的可读性和可维护性，在 react 和 vue 社区中也越来越多人开始使用TypeScript。从最近发布的 Vue3 正式版本来看， Vue3 的源码就是用 T…"}, {"id": "6891885484524437518", "title": "忙了一夜用CompositionAPI征服产品妹子花里胡哨的需求", "desc": "下午正在看我们组大帅老湿写的composition 动画演示的文章。 就有一个产品小姐姐找我，单聊。 第一天 ： 产品妹子突发奇想，让我把按钮字体随机变色。 两个小时后： 产品妹子又说是不是按钮的背景也可以随机变色。 两分钟后： 产品妹子又说 两个按钮的变色频率是不是可以不一样…"}, {"id": "6844903665296211976", "title": "Vue学习路径-轻松从基础到实战", "desc": "里边全部是vue的免费视频，全算下来有100多集。希望可以帮助前端小伙伴学习Vue。 学习一直属于孤独者，任何伟大的发明家都忍受过寂寞和无助，但他们最终走了出来。也许你刚来到本站，也许你刚接触前端，你会稍感彷徨。但你来到了这里，技术胖希望让你有所收获。你可以按照这篇文章的脉络来…"}, {"id": "6976040670939054093", "title": "查漏补缺方为上策！！万字总结vue的基本使用和高级特性，周边插件vuex和vue-router任你挑选", "desc": "vue的基本使用和高级特性，周边插件vuex和vue-router 以下文章将讲解对 vue 的基本使用以及各种高级特性还有周边插件 vuex 和"}, {"id": "6877814455968350215", "title": "Vue3 DOM Diff 核心算法解析", "desc": "想要搞明白 Vue3 的 DOM Diff 核心算法，我们要从一道 LeetCode 真题说起。 LeetCode 真题 300. 最长上升子序列 给定一个无序的整数数组，找到其中最长上升子序列的长度。 可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。 你算法的时…"}, {"id": "6999286661053939720", "title": "vue使用百度地图", "desc": "对于开发来做，地图功能是经常遇到的，所以经过我的考虑使用了百度地图 因为百度地图JavaScript API GL v1.0是一套由Jav"}, {"id": "7001084133040455710", "title": "Vue 3.0  Props的初始化和更新流程的细节分析", "desc": "Vue.js可以让组件的使用者在组件外部传递props参数，组件拿到这些props的值来实现各种各样的功能。本文我们就来探讨下组件props的初始化和更新流程。 在前一篇文章中，我们知道setup函数"}, {"id": "6990912088084316190", "title": "8x0 精读Vue官方文档 - Composition-API", "desc": "精读 Vue 官方文档系列 🎉 What is the Composition-API ? Composition-API 的核心目的在于代码的复用。 Composition-API 赋予了开发者访问"}, {"id": "6981009574497583111", "title": "Vue2 基础用法全面总结", "desc": "Vue2 基础用法全面总结。 Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。"}, {"id": "6999574271924125703", "title": "vue2源码系列-执行过程", "desc": "Vue3 正如火如荼，Vue3 与 Vue2 还是有些许共通之处的，我们通过源码来简单回顾一下 Vue2 的相关知识，这里以 Vue 的 2.6.14 版本为例讲解"}, {"id": "6844903687207272462", "title": "[译] 尤雨溪：Vue 3.0 计划", "desc": "Last week at Vue.js London I gave a brief sneak peek of what’s coming in the next major version of Vue. This post provides an in-depth over…"}, {"id": "6999510819465592840", "title": "前端工程化-脚手架篇", "desc": "工程化是软件工程的一种。性能，稳定性，可用性，可维护性，效率等都是工程化需要解决的。 前端的真正的发展，也就这么10年时间，工程化发展还不够完善。 而我们日常的开发，首先要解决创建项目问题。为此vue"}, {"id": "6844904034432712712", "title": "带你再看Vue文档，你就顺便学会了React", "desc": "最近接手了一个React开源项目，上手前看了一些react的基础教程就撸了，之前有着半年Angular转2年Vue的前端经验，但是还是对React心生畏惧。 项目做了大概一个周了，发现果然世界上代码都是一样的，React几乎和Vue的用法一样，唯一的学习成本在于语法（如果你能理…"}, {"id": "6987340048542892062", "title": "Vite开发快速入门", "desc": "一、Vite简介 Vite (法语意为 \"快速的\"，发音 /vit/) 是一种面向现代浏览器的一个更轻、更快的前端构建工具，能够显著提升前端的开发体验。除了Vite外，前端著名的构建工具还有Webpa"}, {"id": "6844904089902383112", "title": "三年前端面试经验加感悟", "desc": "不要写精通什么什么东西，精通这个东西每个人理解得都不一样，你觉得精通就是能在任意场景下熟悉运用。面试官可能觉得你既然精通 js，怎么 vue是 Evan You写的而不是你呢？搞不好要为难你一把，所以尽量避免这些可能引起争论的东西"}, {"id": "6991074449147559973", "title": "vue模板编译：参照vue源码实现的demo，简单易懂", "desc": "围绕vue编译核心原理编写，没有边边角角。让你轻松掌握编译原理。若是有疑惑，不要一直瞪眼歪头想，可以下载案例，边看边调试。加油干吧，骚年！"}, {"id": "6844904001264173063", "title": "Vue整理——组件间的通信", "desc": "组件实例的作用域是孤立的，但组件间的联系和交互不可避免。当组件间进行数据交互时，组件通信必不可少。 父子组件间通信（父传子，子传父），非父子组件通信。 step1：父组件用prop自定义属性传递属性，prop有字面量语法和动态语法。字面量只能将数据按字符串的形式传递；动态语法类…"}, {"id": "6961448159386009636", "title": "Vue 响应式原理", "desc": "Vue 响应式实现原理，以及内部如何实现收集依赖和通知更新，对数组检测变更和对象增加属性的特殊处理。"}, {"id": "6844903921186521096", "title": "Vue中使用quill富文本编辑器（可上传本地图片，视频）", "desc": "这个是quill的一个组件，可以对上传到富文本的图片进行调整，实用又方便。 还请多多指教啦 ~。~"}, {"id": "6885231844120330248", "title": " React 有Provider-Consumer+Hook模式，Vue 3.0 也要！", "desc": "熟悉React的小伙伴都知道，随着React hook的推出，React出现了一种新型的状态管理方式 Provider-Consumer模式，可以说是真香警告。 随着Vue3.0的发布，提供了我们属于Vue的 Hook+provider-inject的新型状态管理工具。 本篇文…"}, {"id": "6933481203567689736", "title": "【VUE项目维护】多个项目提取共用组件的解决方案", "desc": "需求场景通常开发项目，会有多个管理后台或者相似的项目，我们无需每次都重新创建vue-cli脚手架。我们可以将多个项目放在同一个脚手架里，统一管理。合并项目1.目录结构2.相关文件配置appConfig"}, {"id": "6844904019236749325", "title": "vue3的进步", "desc": "1. 性能瓶颈 当数据更新时，虽然vue可以定位到最小更新粒度为组件级别，但在组件级别内，还是需要重新遍历模板生成新的vdom，更新粒度不够小。 diff算法：diff的工作量和组件模板大小成正相关。即使模板内只有少量的动态节点，也需要遍历整个组件去执行diff。 总结：vdo…"}, {"id": "6930093893836865544", "title": "解决WebStorm无法正确识别Vue3组合式API的问题", "desc": "猜想这种问题的原因是无法正确识别对应的Vue3库，笔者相信WebStorm是可以做到的，只是某些配置没有正确，笔者尝试过在设置的Libraries中勾选上node_modules，但是没有效果。 选择node_modules文件夹，右键选择Mark Directory as，最…"}, {"id": "6844904137478373384", "title": "Vue 中如何转移 Dom ？", "desc": "这个标题可能很拗口，请允许我先做下简短的解释。 在我们使用 Vue 进行开发时，Dom 最终渲染的结构与 template 嵌套逻辑是一致的，有着严格的父子级关系。 可能你在看了前面介绍之后会觉得很奇怪，也意识到自己的开发经验里从来没有过这样的需求。 如果你有过 UI 组件开发…"}, {"id": "6909769993957670920", "title": "vue2与vue3中通过函数方式调用全局组件", "desc": "可以看到需要一大段的html来定义，还要控制显示隐藏的变量，显示隐藏的方法。需要非常多的代码片段来支持，会使我们的组件变得非常杂乱，只为了一个提示弹窗，而且既然是项目的提示弹窗，那么基本在很多地方都会用到，这样一个组件一个组件去写肯定不是办法。 这样在调用弹窗的地方还是要定义变…"}, {"id": "6922786004889763848", "title": "webpack Vue环境配置", "desc": "原因是 webpack5.x的版本与webpack-dev-server3.x 的版本不兼容。 需要降级"}, {"id": "6925229794179153927", "title": "vue3+tsx环境创建及使用跳坑项", "desc": "对比了element-plus和antd-vue两个ui库，使用antd-vue的话可能更贴近react的ui库antd，这里使用element-plus创建环境。后文中也会提到一些使用antd-vue的跳坑点。 vite都2.x了，当然用它创建项目。文档地址：https://…"}, {"id": "6844903940161699853", "title": "Vue项目优化方案", "desc": "方案在不断的编写过程中，其他内容还需大家共同努力发现，整理。 具体命名方式可以参考Vue.js风格指南 。 代码编写过程中应遵守基本的开发规范准则，在这里只是给出部分建议。 HTML编写DOM结构并标时尽量遵守BEM命名方式，具体请参考文献：BEM--前端命名规范介绍，BEM …"}, {"id": "6901961197344686088", "title": "前端开发之从new Vue()到放弃", "desc": "作为一个前端工程师，三大框架中vue，因其入门简单、上手快，深受广大开发者的青睐。那你知道从new Vue()到页面渲染是如何完成的嘛？ 想要了解vue是如何帮我们完成页面渲染。首先我们需要了解什么是vue？ vue是个渐进式框架，他基于MVVM模型。将整个应用拆分为三个部分 …"}, {"id": "6844903784158593031", "title": "浅析 Vue 2.6 中的 nextTick 方法", "desc": "浅析 Vue 2.6 中的 nextTick 方法。 JS 的 事件循环 和 任务队列 其实是理解 nextTick 概念的关键。 这个网上其实有很多优质的文章做了详细介绍，我就简单过过了。 以下内容适用于浏览器端 JS，NodeJS 的事件循环机制并不相同。 规范中规定 ta…"}, {"id": "6945713524333576223", "title": "搭建工程", "desc": "做项目之前要先搭建工程。如果不搭建工程，在运行环境的时候会有很多兼容性问题。 搭建比较麻烦，要安装很多插件，写很多配置。 它内部使用了webpack，并预置了很多插件（plugin）和加载器（loader），以达到开箱即用的效果，不用自己去手写配置，根据需要进行选择。 搭建好之…"}, {"id": "6985091345496932365", "title": "vue3.0创建项目", "desc": "本文的主要内容为：升级本地的vue版本，使用vue3.0从零开始，创建最基本的新工程。（包括一些配置项的选择）"}, {"id": "6844904068008116237", "title": "一步一步实现Vue数据绑定", "desc": "嗯，直接进入正题吧。不知道大家是否有和我一样的学习习惯，就是一步一步的从无到有的去实现一个原理。就好像升级打怪，装备一点一点的升级才好玩。我把每次增加的代码，对应在git的提交中， 毕竟很多文件，直接在一篇文章中很难描述清楚。 当时准备了大约一周多，在小组内分享，也算是记录在上…"}, {"id": "6856739548778725389", "title": "如何构建 vue-ssr 项目", "desc": "通过 ctx.body ，拼接成一个完整的 html 字符串模版返回。 相信经过上面的代码实例可得知，即使你没有使用过 vue-ssr 的经历，但是你简单地使用过 vue 和 koa 的同学都可以看出来这个代码非常明了。 唯一要注意的地方就是，我们是通过 require('vu…"}, {"id": "6896448982810918919", "title": "起步-【打造属于自己的 Element 组件库】", "desc": "本系列文章旨在告诉读者如何打造属于自己的组件库，面对不同业务以及场景，有着更加灵活可变的应用。当前你必须知道 Vue.js的基础知识以及阅读过Element 组件库常用的组件。 在我们使用 Element 库时，一定是先调用 el-xxx 组件，然后根据 Element 引入的…"}, {"id": "6996120953507823623", "title": "Vue实现多文件上传功能(前端 + 后端代码)", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 本人业余前端开发，因为公司(很坑)觉得我很牛逼，所以让我前后端一起玩，无奈的我只能磕磕碰碰的研究起了vue。 开发项目的时候，用到文件上传的"}, {"id": "6991846271107465253", "title": "Element 2 源码学习:组件源码剖析之概述｜8月更文挑战", "desc": "本系列将开始深入分析组件源码系列学习，抽丝剥茧，学习各组件的逻辑实现。首先看下组件源码涉及的目录结构,通过分析了解其机制。"}, {"id": "6994466854706085896", "title": "No.10 vue-element-admin 学习使用（五）路由挂载，侧边栏刷新当前页面，table", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 之前自己一顿输出，看源码分析了权限的实现方式，然后发现官方有这方面的详细讲解，决定查漏补缺一下，看一下官方是怎么讲的。 首先在router"}, {"id": "6989903739893055501", "title": "Vue实现个人博客", "desc": "一、首页 效果展示 在连数据库前可用JSONplaceholder的数据接口用假数据来测试，先将整体样式确定。确定好页面后再连接数据库的真数据。这里使用是数据库是firebase（使用时要注意打开数据"}, {"id": "6985347114117611527", "title": "VUE3（二十）VUE自定义指令v-preventReClick，防止多次点击，重复请求", "desc": "VUE不仅为我们提供了自定义组件，还提供了自定义指令。当然，这个玩意我在VUE2中是没有用到过的。 VUE3中我大概试一下这个自定义指令： 官方文档： https://vue3js.cn/docs/z"}, {"id": "6977693685882290189", "title": "在VUE中使用Plupload实现文件分片上传", "desc": "效果 拥有多种上传方式：HTML5、flash、silverlight以及传统的。Plupload会自动侦测当前的环境，选择最合适的上传方式，并且会优先使用HTML5的方式。所以你完全不用去操心当前的"}, {"id": "6973289820906848270", "title": "Electron+Vue3 MAC 版日历开发记录(13)——事件功能重构", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903542315040776", "title": "Vue 组件通信之 Bus", "desc": "关于组件通信我相信小伙伴们肯定也都很熟悉，就不多说了，对组件通信还不熟悉的小伙伴移步这里。 在vue2.0中 $dispatch 和 $broadcast 已经被弃用。官方文档中给出的解释是： 官方推荐的状态管理方案是 Vuex。不过如果项目不是很大，状态管理也没有很复杂的话，…"}, {"id": "6976554582516170782", "title": "keep-alive缓存组件", "desc": "项目中遇到这样的问题: 列表页点击第几页或者一些筛选条件搜索出的列表，点击查看某一条的详情，返回还需保留原有的筛选条件。 在添加路由时在meta中加上keepAlive: true, 2. 在data"}, {"id": "6844903826911150093", "title": "力荐 35 个最好用的 Vue 开源库！", "desc": "无论是开发新手还是经验丰富的老手，我们都喜欢开源软件包。对于开发者来说，如果没有这些开源软件包，很难想象我们的生活会变得多么疲惫不堪，而且靠咖啡度日也会成为家常便饭。所幸的是，随着 Vue.js 和 Nuxt.js 社区的不断壮大，每天都会出现一些很好的软件包。 在下文中，我们…"}, {"id": "6965323570738102303", "title": "vue+element大型表单解决方案(3)--锚点组件(上)", "desc": "上一篇提到如何拆分表单，事实上拆分表单不仅仅是技术上的需求，也是业务上的需要。业务上将表单分成多个章节，每个章节(section)有自己的标题，此时就需要有锚点(anchor)能快速定位到该章"}, {"id": "6844903702289973256", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi", "desc": "最近尝试了vue+ts的组合个人感觉vue对于ts并没有特别的像angular2这样的友好，但是对于ts和js之间个人还是选择ts的。语法糖来说es6简直舒爽，下面我详细介绍下怎么使用ts+vue。ts+vue的插件会少上很多，但是肯定会随着vue对ts的支持插件也会越来越多当…"}, {"id": "6844904021786886158", "title": "升级vue-element-admin，寻找前端中后台更优解", "desc": "vue-element-admin作为一个后台前端解决方案，它丰富的插件、优雅的解决方案无需多言。然而在企业级中后台产品的开发中，我们最常遇到的需求就是列表页、详情页。vue-element-admin的解决方案是直接使用element-ui的el-table/el-form实…"}, {"id": "6844904190083350542", "title": "『Webpack系列』—— externals用法详解", "desc": "如果小伙伴有做过首屏加载时间优化，应该会遇到chunk-vendors.js这个文件，巨大无比，加载时间超长，是首屏加载时间过长的罪魁祸首之一。 下面通过一个实际的项目来演示，先通过插件webpack-bundle-analyzer来可视化地查看chunk-vendors.js…"}, {"id": "6970710597382586382", "title": "登录页面完成", "desc": "项目登录页面的页面创建、路由配置、布局结构、样式处理、数据绑定、表单验证功能、登录功能、等待效果功能"}, {"id": "6991319120385949732", "title": "⚡qiankun微前端中的应用通信(二)-可订阅指定state｜8月更文挑战", "desc": "qiankun微前端通信，该方案以redux为核心，采用发布-订阅模式进行封装，实现应用间通信数据上的响应式，代码结构模块化，api仿照vuex，降低上手难度, 并可适用多框架（如vue、react）"}, {"id": "6998725177957679135", "title": "搭建Vue脚手架（vue-cli）并创建一个项目", "desc": "https://blog.csdn.net/inthuixiang/article/details/82225407 https://cli.vuejs.org/zh/guide/installati"}, {"id": "6856557213419487240", "title": "京东物流风格 NutUI 发布了", "desc": "京东物流目前在 M 端的业务越来越多，如公众号、移动官网。这对 M 端的 UI 框架要求就越高，组件丰富、接入友好，稳定性高，拓展性及性能上都有较高的要求。自研的 pandora-mobile 目前看不符合现有需求，相较而言 NutUI 更适合物流侧的业务研发需求，经内部讨论决…"}, {"id": "6844903873430159374", "title": "这几天国外关于 Vue 新 API 的一些争论", "desc": "本文只是翻译 :) 掘金的排版比知乎好太多了。 首先是 Reddit 上有人发帖。 回应文完，接下来是这篇文章下面的评论。 完。"}, {"id": "6986982401045954573", "title": "[Element Plus 源码解析] Calendar 日历", "desc": "一、组件介绍 官网链接：Calendar 组件 | Element (gitee.io) Calendar用于显示日期。 Element plus中的日期处理使用的是day.js，这个库大小只有2KB"}, {"id": "7005228513720532999", "title": "Vue学习之---watch侦听器", "desc": "Vue学习之---watch侦听器 Vue中的watch属性是什么，作用呢？ watch属性中存在着能侦听Vue数据的侦听器，而侦听器本质上是个函数，要侦听哪一个数据的变化，就把数据名当做方法名即可；"}, {"id": "7003976268865617927", "title": "Vue 源码 new Vue会发生什么？", "desc": "介绍   vue.js(简称Vue) 是一个用于创建用户界面的渐进式开源的JavaScript框架， 也是一个创建单页面应用的web应用框架, 通过组件化的形式可以创建页面，单个组件的结构层次非常清晰"}, {"id": "6991566044674392078", "title": "使用 Vite2+Vue3 实现网站国际化｜8月更文挑战", "desc": "最近在将自己的某个 Vue3 的项目接入国际化配置，整体的过程跟 Vue2 并没有太大的区别，在此做下技术经验分享。"}, {"id": "6978609399682039839", "title": "[项目篇]vue3+ts 封装request请求，storage缓存，config请求信息抽离 - 第二天", "desc": "[项目篇]vue3 + vite + vant + typescript 第二天 欢迎大佬们关注我的公众号：小何成长"}, {"id": "6891640356543627278", "title": "那个忙了一夜的Vue3动画很好，就是太短了", "desc": "插曲最近准备给我们前端组起个名字，欢迎大家投票提建议，现在有两个提案前端独立团，我真他娘的是个人才但是域名还没想好录视频战队，lsp.team配套代码github最近我们组的大帅*同学写了个很好地co"}, {"id": "7000186937805897742", "title": "Vue3 解析系列之createAppAPI函数", "desc": "Vue3 源码解析系列之createApp函数,本文主要用于个人学习. 基于 版本->Vue 3.0.5"}, {"id": "6943769360758472735", "title": "打通任督二脉的前端环境变量 — env", "desc": "环境变量 （environment variables）这个概念，在前端工程化盛行之时，便悄悄的进入了前端的视野。前端远古时代没有工程化的概念，开发环境、测试环境、生成环境全靠大家手动配置。而现如今 webpack 、 snowpack 、 rollup 等打包工具大行其道，我…"}, {"id": "6994617648596123679", "title": "Vue 中的 defineComponent", "desc": "defineComponent 本身的功能很简单，但是最主要的功能是为了 ts 下的类型推到。本文详细分析下其实现，怎么做到类型推导的"}, {"id": "7006705207941791781", "title": "搭建一个简易的Vue SSR", "desc": "搭建自己的Vue SSR 渲染一个vue实例 首先创建一个目录，使用npm初始化一下package.json文件 再安装vue以及vue-server-renderer这两个包： 在根目录下创建一个s"}, {"id": "6919376064833667080", "title": "React、Vue2、Vue3的三种Diff算法", "desc": "mount(vnode, parent, [refNode]): 通过vnode生成真实的DOM节点。parent为其父级的真实DOM节点，refNode为真实的DOM节点，其父级节点为parent。如果refNode不为空，vnode生成的DOM节点就会插入到refNode之…"}, {"id": "7003532584466677790", "title": "Vue监测数据改变的原理", "desc": "如何监测对象的数据？ 对象中后追加的属性，Vue默认不做响应式处理（视图跟随数据变化而变化） 如需给后添加的属性做响应式（视图跟随数据变化而变化），请使用如下API： Vue.set(target, "}, {"id": "6989138880679116813", "title": "深入浅出vue响应式原理", "desc": "一个简单的英雄例子带你深入浅出vue响应式原理，积极向上的你看到这篇文章可不能错过~ 通俗易懂干货。"}, {"id": "6996892279617093669", "title": "从大屏适配组件到按需加载的vue组件库【手把手系列】", "desc": "一次完整的，从开发到发布按需加载的vue组件库的经历。看完后相信你也能打包并发布属于自己的vue组件库。"}, {"id": "6844904178544820237", "title": "这个前端竟然用动态规划写瀑布流布局？给我打死他！", "desc": "瀑布流布局是前端领域中一个很常见的需求，由于图片的高度是不一致的，所以在多列布局中默认布局下很难获得满意的排列。 我们的需求是，图片高度不规律的情况下，在两列布局中，让左右两侧的图片总高度尽可能的接近，这样的布局会非常的美观。 注意，本文的目的仅仅是讨论算法在前端中能如何运用，…"}, {"id": "6960163479512678437", "title": "【Vue 技巧】做一个全局登录弹窗，任何地方访问", "desc": "需求 在任何页面内能访问 在路由拦截能访问 解决方案 任何地方都能访问，第一个想到的是挂载原型链Vue.prototype.$someThing。而访问一个实例，一般是ref去访问，路由是在Vue配置"}, {"id": "6963569413857476645", "title": "仅需5分钟构建 Vue 3 桌面应用程序", "desc": "在本文中，我们将研究如何通过 Vite 开发 Vue 3 桌面项目。 在项目中会用到 Electron ， 一种最流行的框架，可使用Javascript构建跨平台的桌面应用程序。"}, {"id": "7003598687851151397", "title": "Vue系列之常见内存泄漏定位与解决", "desc": "JavaScript 有完善的内存处理机制，能自动进行垃圾回收，但是假如一个对象一直被引用，他的内存是无法得到释放的。如果项目运行过程中，内存占用越来越高，只增不减，没有峰值，就存在内存泄漏。多页应用"}, {"id": "7007399648943931429", "title": "Vue框架的学习", "desc": "简单介绍了vue框架的引用，常用指令，事件处理，侦听以及生命周期。常用指令重点在于双向绑定，数据绑定和数据处理。"}, {"id": "7005007221771730957", "title": "[Element Plus 源码解析] Message 消息提示组件", "desc": "一、组件介绍 el-message是一个信息提示类组件，常用于系统级别的提醒，在我的项目中，会使用el-message组件展示用户的操作提示及操作结果，如：操作成功、操作失败：xxxx原因。 el-m"}, {"id": "6999055894323413029", "title": "vue之mixin理解与使用🍉", "desc": "最近确实是有点忙，天天日更确实有点不知道写什么了，所以就把以前自己记录的文章拿出来吧。 可能会有点水，大家如果有需要的可以看看。"}, {"id": "6844903661726859272", "title": "Vue项目骨架屏注入实践", "desc": "相比于早些年前后端代码紧密耦合、后端工程师还得写前端代码的时代，如今已发展到前后端分离，这种开发方式大大提升了前后端项目的可维护性与开发效率，让前后端工程师关注于自己的主业。然而在带来便利的同时，也带来了一些弊端，比如首屏渲染时间(FCP)因为首屏需要请求更多内容，比原来多了更…"}, {"id": "6844903957261713416", "title": "高仿网易云音乐(Vue实例)—Vue实战", "desc": "随着不断的学习Vue，需要做一个小项目通过在实现项目过程中了解到更多的知识。随着如今人们对于音乐的需求，移动端的使用量愈发增加，项目通过Vue编写实现，全面借用网易云音乐移动端的UI设计、功能实现，努力做到以假乱真的效果。前几天便着手开始弄了,到今天为止也算是勉强能用了。 注：…"}, {"id": "6844903789388890126", "title": "我是如何让公司后台管理系统焕然一新的（下）-封装组件", "desc": "马上到了金三银四的时间，很多公司开启了今年第一轮招聘的热潮，虽说今年是互联网的寒冬，但是只要对技术始终抱有热情以及有过硬的实力，即使是寒冬也不会阻挠你前进的步伐。在面试的时候，往往在二面，三面的时面试官会结合你的简历问一些关于你简历上项目的问题，而以下这个问题在很多时候都会被问…"}, {"id": "6992447541350498334", "title": "antd Vue 表格中写图片和按钮该怎么写", "desc": "官方给出的解释是 直接上代码 总结 在需要添加元素的属性下添加 scopedSlots: { customRender: 'action' }, 在上方表格中写相对应的元素就好了"}, {"id": "7000170276600152077", "title": "【前端Vue学习系列】三、Vue进阶篇", "desc": "这是我参与8月更文挑战的第8天 前言 Hi，大家好，我是希留。 上篇文章带大家了解了Vue的一些基础用法，仅仅掌握一些基础的用法是不够的，还需要有更深入的了解，所以今天的文章咱们来聊聊Vue的进阶篇，"}, {"id": "6986568226817703967", "title": "vue3实现一个Toast组件", "desc": "在实现组件之前我们需要了解如下知识点： createVNode的用法 render（查阅源码发现的方法，api未体现） 接下来开始写代码 在 src/components下创建toast文件夹，并依此"}, {"id": "6982533446304448543", "title": "新手入门第三课：2个文章进阶的知识点", "desc": "本节课主要带大家了解文章摘要和专栏的作用。这篇文章是本次活动的最后一课，希望大家有始有终，一起来学习！"}, {"id": "6970210247726071845", "title": "v-model 在 Vue2 和 Vue3 中的区别", "desc": "v-model 是 Vue 中使用频率特别高的一个指令，而 Vue3 中的 v-model 有了很大的变化，本文将详细讲述一下 Vue2 和 Vue3 中的 v-model 的区别。"}, {"id": "6956388291813834765", "title": "可视化mockjs", "desc": "前言 Mock就是用一个虚拟的对象（Mock 对象）来创建以便测试的测试方法。 随着WEB技术的发展，前后端分离架构变得普遍起来，但是问题也随之而来，文档零散、不规范。并且经常碰到例如参数的新增、变动"}, {"id": "7000915735232921631", "title": "webpack构建petite-vue项目，方便小项目的快速开发", "desc": "简介 概述 petite-vue是前段时间刚推出的一个轻量版vue，用法与vue几乎相同，没有jquery那些繁琐的操作和语法，对于熟悉vue语法的用户来说，两分钟就可以上手，唯一的痛点是目前没有什么"}, {"id": "6946083562508517407", "title": "前端面试vue篇", "desc": "年底裸辞后，年初前前后后跑了十几场面试，不能说面试经验丰富，但是也感受到了面试的规律，前端三大框架，Vue React Angular,国内大部分公司采用的Vue框架，本笔记主要针对中小型企业面试。 beforeCreate是new Vue()之后触发的第一个钩子，一个组件生命…"}, {"id": "6996662737120002079", "title": "vue屏幕分辨率适配实战解析", "desc": "作为前端人员，为了适配各种型号的电脑、手机，我们往往离不开屏幕分辨率的适配； 那么如何做好屏幕分辨率的适配呢"}, {"id": "6986177558337781797", "title": "简单封装一个吸顶组件 ( Vue3 )", "desc": "简单封装一个吸顶组件 ( Vue3 ) 手动封装吸顶组件和借用@vueuse/core工具库封装组件"}, {"id": "6844903700327038984", "title": "厌倦了写活动页？快来撸一个页面生成器吧！", "desc": "如果你经常接触一些公司的活动页，可能会经常头疼以下问题：这些项目周期短，需求频繁，迭代快，技术要求不高，成长空间也小。但是我们还是马不停蹄的赶着产品提来的一个个需求，随着公司规模的增加，我们不可能无限制的增加人手不断地重复着这些活动。这里我就不具体介绍一些有的没的的一些概念了，…"}, {"id": "6964575724925616142", "title": "vue2中的provide inject 传递响应式", "desc": "provide inject 传递响应式的相关用法 1. vue2 中的常规写法 2. vue2 中的不太常规写法,但用得舒服."}, {"id": "7002393679520333854", "title": "[Vue源码]--如何生成虚拟dom（逐行注释）", "desc": "更改dom节点会触发重排与重绘，频繁的更改dom会大大降低性能，为此，将真实的dom结构抽离出来，转化成用对象描述的虚拟dom，更改时只操作"}, {"id": "6844903544026300423", "title": "2018 我所了解的 Vue 知识大全（一）", "desc": "每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。"}, {"id": "6996697320322498574", "title": "Vue中 引入使用 js-cookie", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 1. js-cookie 安装及引入 js-cookie 是关于 cookie 存储的一个js的API，根据官网描述其优点有：适用所有浏览"}, {"id": "6844903916870565901", "title": "Vue 权限控制(路由验证)", "desc": "这个时候我们就可以把所有的页面都放在路由表里，只要在访问的时候判断一下角色权限。如果有权限就让访问，没有权限的话就拒绝访问，跳转到404页面 vue-router在构建路由时提供了元信息meta配置接口，我们可以在元信息中添加路由对应的权限，然后在路由守卫中检查相关权限，控制其…"}, {"id": "6978294181877776420", "title": "Vue3学习--自定义hook、shallowReactive与shallowRef", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 Vue3学习--自定义hook、shallowReactive与shallowRef"}, {"id": "6994709041633034247", "title": "Vue3-组合式Api以及响应式原理解读（一）_setup理解", "desc": "全方位解析setup setup描述 setup参数解析 setup返回值解析 setup生命周期钩子解析 v"}, {"id": "6844904016892133383", "title": "实现Vue项目主题切换", "desc": "对于SaaS平台而言，因为需要一套平台面向不同客户，所以会有不同主题切换的需求。本篇主要探讨如何在Vue项目中实现该类需求。 方案一， 定义theme参数，通过prop下发，子组件根据theme来动态绑定style的方式实现。具体可以参考：非常规 - VUE 实现特定场景的主题…"}, {"id": "6975876287466471431", "title": "Electron+Vue3 MAC 版日历开发记录(20)——彻底去除PrimeVue", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6998062532774592548", "title": "[ 浅谈前端 ] Vue - 组件化开发", "desc": "这是我参与8月更文挑战的第19天，活动详情查看： 8月更文挑战 组件 组件(Component)是自定义封装的功能。 在前端开发过程中，经常出现多个页面的功能是重复的，而且很多不同的页面之间，也存在同"}, {"id": "6997984128066912293", "title": "vue中jwt的实现", "desc": "什么是jwt json web token (\bJWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（RFC 7519），该token被设计成紧凑且安全的，特别适用于分布式站点的"}, {"id": "6844904138891853832", "title": "「vue模块化按需编译，突破编译瓶颈」实战篇", "desc": "今天偶然看github，看到了一个叫 webpack-virtual-modules 的项目，进去看了一下当时我就被它的设计给震惊了。这让我觉得不可思议，原来还可以这么玩。随后我便顺手把之前的模块化按需编译方案改进了一下，发现真的太爽了。这篇文章可能是在掘金第一篇普及实践web…"}, {"id": "7002518157847953415", "title": "vue中axios请求拦截详解 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 一、定义请求axios公共文件，并在main.js中引入 在utils文件夹中创建requestAxios.js文件，不用请求拦截是可以直"}, {"id": "6877581734775357448", "title": "轱辘UI：基于 Vue 3 + TypeScript 的 UI 组件库", "desc": "这是我为了探索 Vue 3 新特性而写的 UI 组件库，请勿用于生产环境。 面向代码学习者编写的开源组件库，代码简洁易读。 使用 Vue 3 和 TypeScript 制作了四个组件。 使用 Vue 3 + Vue Router 4 制作了官网。 官网支持代码预览和代码高亮。 …"}, {"id": "6965062549771386887", "title": "vue系列 -- 父传子，子传父，兄弟组件通信", "desc": "父传子（父通过import + component写入子组件，然后v-bind绑定数据，子通过props接收） 思路 子组件：child.vue 要点： props 数组里面是父组件上的自定义属性名 "}, {"id": "6998322604536758279", "title": "Vue路由随手案例", "desc": "1. 路由的基础使用 2. 嵌套路由 3.路由的query参数 4.路由的params参数 5.路由的props配置 6.编程式路由导航"}, {"id": "6844903776759840781", "title": "Vue.js 你需要知道的 v-slot （译）", "desc": "自己先想一分钟。 这篇文章假设你对组件的基础知识有定义的了解，如果你对此还不熟悉，请先阅读。 从 vue@2.6.x 开始，Vue 为具名和范围插槽引入了一个全新的语法，即我们今天要讲的主角：v-slot 指令。目的就是想统一 slot 和 scope-slot 语法，使代码更…"}, {"id": "6844903792673062919", "title": "vue + iview 项目实践总结 【完】", "desc": "最近我们参与开发了一个（年前了）BI项目，前端使用vue全家桶，项目功能基本开发完成，剩下的修修补补，开发过程还算顺畅，期间遇到好多问题，也记录了一下，发出来一起交流，主要是思路，怎么利用vue给的API实现功能，避免大家在同样的坑里待太长时间，如果有更好实现思路可以一起交流讨…"}, {"id": "6951262189168623623", "title": "最新的vue面试题大全含源码级回答（vue3篇）", "desc": "接上篇的面试文章，这篇讲讲vue3常见的面试题及回答。水平有限，有讲的不对的，希望各位大佬指出来，或者有其他的面试题想了解的，欢迎提出来，我研究后同步在本文。"}, {"id": "6862582779419459598", "title": "Vue3 + TS + Egg重构自己的小项目[总结]", "desc": "我在掘金上发布的第一篇文章就是关于此项目的介绍，没想到已经过去俩年了，回头看看这俩年的成长...... 打死自己的心都有了！！！🙃 使用 vue-cli 工具可以方便的创建一个vue项目，其中选择技术栈时，勾选上TypeScript就好。 移除 filters 过滤器特性，官…"}, {"id": "6994975726038417415", "title": "Vue计算属性以及侦听器(七)", "desc": "计算属性 介绍 在Vue开发中,经常需要对项目中的属性进行一些js运算，如果将js运算代码直接插入到Vue的模板中会显得模板代码十分臃肿，"}, {"id": "6993115694158069796", "title": "在你的项目中使用mock ", "desc": "在你的项目中使用mock 这是我参与8月更文挑战的第5天，我们前端往往在开发中，都会遇到和后端开发处于一个并行开发或者进度比后端快的时候，这种情况下我们没有测试数据，总不能干等后台出接口吧。作为一个高"}, {"id": "6844903597092651015", "title": "重构 - 改善代码的各方面问题", "desc": "做前端开发有一段时间了，在这段时间里面，对于自己的要求，不仅仅是项目能完成，功能正常使用这一层面上。还尽力的研究怎么写出优雅的代码，性能更好，维护性更强的代码，通俗一点就是重构。这篇文章算是我一个小记录，在此分享一下。该文章主要针对介绍，例子也简单，深入复杂的例子等以后有适合的…"}, {"id": "6926120296974204941", "title": "沉寂了一周，我开发了一个聊天室", "desc": "最近一周没有发文章了，我在这里向大家说一声抱歉。今天，我们来从零开始开发一款聊天室。好，我们现在就开始。 WebSockets 是一种先进的技术。它可以在用户的浏览器和服务器之间打开交互式通信会话。使用此API，您可以向服务器发送消息并接收事件驱动的响应，而无需通过轮询服务器的…"}, {"id": "6991287842613755935", "title": "Vue3 Reactive 源码学习 | 8月更文挑战", "desc": "前言 用了很长时间的 componsition-api 了，最近想看看源码，抱着单纯的学习心态先从 reactive 开始吧。 个人习惯： 看代码要带着问题去看，不要盲目的去看 问题就是这次看源码的主"}, {"id": "6993215398112034847", "title": "Vue+ElementUI 搭建后台管理系统（实战系列四）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6844903604881621000", "title": "记一次小坑--关于window.open()", "desc": "今天在公司的后台项目中遇到一个这样的需求：点击一个按钮，发送一个请求，然后用请求到的data中的url打开一个新窗口（跳转到另一个后台）。看起来应该没什么问题，很快代码写好了（vue项目，以下是伪代码，主要表达下思路）： 愉快地测试下，发现并没有弹出新窗口，短促的慌乱之后，发现…"}, {"id": "6844903729729110029", "title": "如何在vue项目中优雅的使用SVG", "desc": "本文旨在介绍如何在项目中配置和方便的使用svg图标。 本文以vue项目为例，当然在react中的使用原理基本相似。 svg图标可以直接通过img标签来使用，也可当做icon来使用。 本文是参考了鑫旭大佬的文章：SVG Sprite技术介绍。 代码已上传github：github…"}, {"id": "6844904191186599944", "title": "前人铺路系列组件之hevue-img-preview，一款传入地址支持单图多图预览的vue图片预览组件", "desc": "hevue-img-preview 简介 示例预览 安装 使用 接收一个地址字符串this.$hevueImgPreview(url) 接收一个对象this.$hevueImgPreview(opti"}, {"id": "6915642997195407368", "title": "基于jsplumb.js实现多列表一对多连线效果", "desc": "先上效果图代码非常简单，还可以实现连线高亮等效果，可以自己查阅文档，要是有连线这块的有问题可以给我留言，其他的就不要找我啦哈哈"}, {"id": "6990957013891022878", "title": "Vue CLI 3+ 新版本搭建项目的问题", "desc": "Vue cli 3.0+新版本创建项目遇到的问题汇总。 包括：静态文件的读取和eslint的配置等问题。"}, {"id": "6877728979533430798", "title": "VUE slot插槽的使用和使用场景", "desc": "哎，都写了好多了，掘金bug（一定要甩锅给别人！！）导致我写的东西没有了！气死！好啦！言归正传，插槽在真正的开发中用的还是很多的，网上的加我现在所说的都是相对基础的东西，但是至少能理解插槽！let·s"}, {"id": "6984285041232707592", "title": "vue3改动和使用", "desc": "Vue3带来的新变化 优化 性能提升（零成本：从vue2切到vue3就享受到） 首次渲染更快，diff算法更快，内存占用更少，打包体积更小，.... 更好的Typescript支持"}, {"id": "6844903859668647944", "title": "vue实现录音功能及播放amr文件（pc端）", "desc": "1.项目中新建一个recorder.js文件，内容如下，也可在百度上直接搜一个2.页面中使用，具体如下3.除了上述代码中的注释外，还有一些地方需要注意上传语音时，一般会有两个参数，一个是语音的路径，一"}, {"id": "6844903843206004743", "title": "Vue原理之虚拟DOM和render函数", "desc": "3. Vue官方《渲染函数文档》 4. Vue渲染函数源码解析 最近学习Vue过程中对虚拟Dom以及Render函数原理不是很理解，虽然官方有介绍，但还是没能深入理解，所以找了点资料来补补，这一切都是为了深入掌握Vue知识。 今天我们学习的目的是了解和学习Vue的render函…"}, {"id": "6844904096072204296", "title": "Vue cli3 lib模式封装汽车业务组件库支持按需引入（有组件效果演示）", "desc": "前段时间看到懂车帝app有几个效果非常好的汽车展示方面的模块，再加上前年在公司写过一个关于汽车售后业务选择汽车部位的组件，就开始着手把这几个组件编写成一个组件库发布出去供大家使用，当然提供按需引入方式，使用的依然是vuecli3工具其中的vue-cli-service buil…"}, {"id": "6850037282280308750", "title": "Vue黑科技--从原理层面清除 keep-alive 缓存的组件", "desc": "一、keep-alive原理先贴上keep-alive主要实现的源码keep-alive原理清除缓存三部曲二、缓存组件的方式直接将被缓存的组件放到keep-alive组件中即可这种方式缓存，在源码这里"}, {"id": "6898948352105250824", "title": "vue 基础 vue-cli （Vue脚手架）", "desc": "2. 安装 安装we新建文件夹Vue，进入文件夹，输入 vue init webpack vue-cli-test，其中vue-cli-test为新项目文件名vue-cli-test为新项目文件名bpack：使用npm全局安装webpack，打开命令行，输入 npm insta…"}, {"id": "6950969989608243231", "title": "vue3 沙箱机制", "desc": "vue3 沙箱机制前言vue3 沙箱主要分两种浏览器编译版本，浏览器版本是使用with语法加上proxy代理拦截本地预编译版本，通过在模版预编译阶段转换阶段，使用转换插件transformExpres"}, {"id": "6854573213742661645", "title": "Vue El-Tree 拖拽排序方法（通用）", "desc": "寻思着把新版本的el-tree也给加入排序功能，毕竟一碗水要端平（功能都是自己写的。。。），由于二者表结构也类似，核心也还是那几个字段 id、pid、order，就看了下ElementUI官网的文档，便有了这么一篇，原则上还是以尽可能的少改动数据为优先"}, {"id": "6844904083858407438", "title": "Vue-cli3 webpack优化打包实践", "desc": "Vue-cli3提供了开箱即用的项目脚手架，自带的webpack配置已经经过了优化。但是当项目越来越庞大的时候，目前我的项目打个包都要三四分钟，并且首页加载也很慢。于是希望对webpack进行优化，进一步提升打包效率。 但是目前网上的各种资料，要么是针对webpack4之前版本…"}, {"id": "6986126139596996639", "title": "[Element Plus 源码解析] Backtop 回到顶部", "desc": "一、组件介绍 Backtop组件 官网链接 Backtop组件通常用于页面向下滚动后，提供快捷的返回顶部的按钮。 1.1 属性 target: string类型，滚动触发的对象，传入css元素选择器，"}, {"id": "6844903575500521480", "title": "mpvue中配置vuex并持久化到本地Storage", "desc": "# 配置vuex和在vue中相同，只是mpvue有一个坑，就是不能直接在new Vue的时候传入store。 2. 在main.js中引入你的store, 并绑定到Vue构造函数的原型上，这样在每个.vue的组件都可以通过this.$store访问store对象。 3. ok，…"}, {"id": "6974413048790384671", "title": "vite2+vue3全家桶来了", "desc": "前言 为了学习vite和熟悉vue3语法，做了这个仿网易云音乐的h5，欢迎大家的讨论。 预览效果 地址 在线访问地址： online git地址： vite-demo 技术栈 vue3 + vue-r"}, {"id": "6914140287812141070", "title": "《深入浅出Vue.js》读书笔记1-Object的变化侦测", "desc": "vue.js会自动通过状态生成DOM，并将其输出在页面上显示出来，这个过程叫做渲染。 在运行时，应用内部的状态会不断发生变化，此时需要不停的重新渲染，如何确定状态中发生了什么变化？ 变化侦测就是来解决这个问题的。 vue的变化侦测：状态发生变化时，vue.js立刻就知道哪些状态…"}, {"id": "6844903649970241549", "title": "今天的考核题目: 你知道React和Vue的区别吗? skr，skr", "desc": "博主面了几家公司，看简历上写着使用Vue.js框架，就会问，你能说一说 vue 和 react的区别吗 ？react 听过，没用过，所以就只能尴尬的说不怎么了解react。这不，最近刚学了react (不断爬坑中)，同时看了些博客文章，当一回搬运工，如有错误，请指出 ～ Rea…"}, {"id": "6899745557347041294", "title": "js 实现调用浏览器打印的功能和问题", "desc": "该方法可以直接调用浏览器打印的api，但是样式会有一些问题，样式在页面显示正常，但是到打印页面时会出现样式丢失。 1. 使用前准备 点击上面的打印按钮，就可以指直接打印内容了。 1-4. 需要注意的点： 1. 需要给分页的每一页加表头和表尾 2. 当数据很多的时候，表头和表尾都…"}, {"id": "6876998292052541447", "title": "vue动态加载模块require.context", "desc": "> 基于require.context 实现动态加载vue模块，解决每次新增vuex的modules文件和请求文件、权限型路由动态加载模块等问题。 ``` javascript // TODO: 获取"}, {"id": "6844903511629496327", "title": "全栈测试实战：用Jest测试Vue+Koa全栈应用", "desc": "今年一月份的时候我写了一个Vue+Koa的全栈应用，以及相应的配套教程，得到了很多的好评。同时我也在和读者交流的过程中不断认识到不足和缺点，于是也对此进行了不断的更新和完善。本次带来的完善是加入和完整的前后端测试。相信对于很多学习前端的朋友来说，测试这个东西似乎是个熟悉的陌生人…"}, {"id": "6983981348918657055", "title": "关于vue的生命周执行顺序遇到的一些问题", "desc": "1.vue的生命周期 vue整体的生命周期： beforeCreate -> created -> beforeMount -> mounted -> beforeUpdate -> updated "}, {"id": "6844903665254432775", "title": "聊聊毕业设计系列 --- 项目介绍", "desc": "好了好了，以上纯属装x，三流的学校三流的毕业设计，看官随意就好。引言中做了毕业设计项目的介绍，实现一个包含图文类、阅读类、影视类、音乐类和电台类五大版块的文艺类阅读系统，取名为Moment。主要运用到的技术栈有： ... 在项目开始之前还很激动乘还是学生的时候在腾讯云上买了云服…"}, {"id": "6975398843173044255", "title": "Vue3 - 使用tsx编写组件", "desc": "往期文章： Vue3 还没入门-就想放弃 Vue3-Vuex-TypeScript 踩坑之旅 前言 vue2 的时候就已经支持jsx写法，只不过不是很友好，随着vue3对typescript的支持度，"}, {"id": "6844903573650669576", "title": "在 mpvue 使用 echarts 小程序组件", "desc": "mpvue 支持直接原生小程序组件，开发者做了个在 mpvue 使用 echarts 小程序组件的示例。"}, {"id": "6844903679032573965", "title": "拜读及分析Element源码-form表单组件篇", "desc": "form: 统一管理form-item。 form-item：负责完成验证等。 初始化，需要验证的让form组件收集起来，有验证规则的el.form.blur ，el.form.change 事件监听起来，等待触发验证。 这里用到的dispatch方法从mixins中引入：找到…"}, {"id": "6990232103082262541", "title": "关于element ui 组件样式的更改", "desc": "element ui 的样式有些是公用的，但是在一个引用过程中可能会出现当前页面中的样式需要更改，为了避免冲突不会去根目录去改公共的样式。 第一种给组件加id / class，在style一面直接修改"}, {"id": "6868914902816915463", "title": "⚡【有手就行】轻松封装一个超酷的FLIP动画组件", "desc": "WhyHowFLIPWrapper.vue使用效果WhatFirstLastInvertPlay写在最后"}, {"id": "6916048749634519054", "title": "性能利器，通过Vue3深度解析webpack热更新原理", "desc": "本文就来深度分析一下关于 Webpack 热更新的原理和实现。需要注意的是热更新不是 Webpack 的专利，其他的打包工具也是有的，并且会有一些区别。 本文主要关注 Webpack。 我已经给 Vue3 的 babel-jsx 插件提了PR，有兴趣可以看一下我是如何实现的。 …"}, {"id": "6928028666844676103", "title": "过年了，基于Vue做一个消息通知组件", "desc": "效果很简单，就是这种的小卡片似的效果。 我们先开始写UI页面，可自定义消息内容以及关闭按钮的样式。 写完基本的样式组件，我们该赋予其灵魂了。好，我们开始写最重要的逻辑。 当消息组件组高度超过浏览器显示区域的时候，消息组件会依次按顺序消失。 在这里，我们使用了Vue.extend…"}, {"id": "6844904068972806152", "title": "如何构建运行良好的Vue组件", "desc": "很少有人最初编写Vue组件时打算将其开源。我们大多数人都是从自己编写组件开始的——我们有一个问题，然后决定通过构建一个组件来解决它。有时我们发现自己想要在代码库的新位置解决相同的问题，因此我们使用组件并对其进行重构，使其可重用。然后我们想在一个不同的项目中使用它，所以我们把它转…"}, {"id": "6893095521154990088", "title": "vue-vnode 到真实DOM是如何转化的？", "desc": "这段代码并不回在页面上渲染一个 &#x3C;hello-world> 标签，而它具体渲染成什么，取决于你怎么编写HelloWorld 组件的模版。 可以看到，模板内部最终会在页面上渲染一个 div，内部包含一个 p 标签，用来显示 Hello World 文本。 接下来，我们就…"}, {"id": "6844903598967488520", "title": "【大型干货】来看看vue对template做了什么（附部分源码及注释）", "desc": "还记得之前的《手拉手带你过一遍vue部分源码》吗？在那里，我们已经知道，在src/platform/web/entry-runtime-with-compiler.js重写原型的$mount方法时，已经将template转换为render函数了，接下来，我们从这个地方作为入口。…"}, {"id": "6987368068053729317", "title": "如何在Vue.js中对时间格式化", "desc": "vue.js中如何对时间进行格式化？ 可以使用过滤器、padEnd()与padStart()函数对其进行格式化操作。"}, {"id": "6966111072218513415", "title": "Vfox-Vue3 组件库自荐 ", "desc": "这是一个基于 Vue 3.x 的 mobile 组件库。相比其他家出名大厂的，它的组件贼多，有 100+ 基础组件。"}, {"id": "6844903821462749191", "title": "[Vue.js进阶]从源码角度剖析Vue的生命周期", "desc": "对于根实例会走false的逻辑,进入mergeOptions函数，合并Vue的各个配置项options,比如mixins,props,methods,watch,computed,生命周期钩子等等，这是整个项目中第一次的合并配置。Vue会将所有的合并策略都保存在一个strats…"}, {"id": "6844903581074587661", "title": " vue-cli + es6 多页面项目开发及部署", "desc": "前段时间项目组计划快速开发一个新的App项目，App开发那边提供壳子和部分系统级功能，所有的页面由h5完成，考虑兼容性安卓4.1及ios7.1。全新的项目，没有历史包袱，就尝试了新的开发模式，采用了webpack + vue-cli + vue-router + es6 + a…"}, {"id": "6918569473419165709", "title": "从源码角度来回答keep-alive组件的缓存原理", "desc": "今天开门见山地聊一下面试中被问到的一个问题：keep-alive组件的缓存原理。 官网的例子是 tab 切换保存了用户的操作，实际中还可能遇到从列表页跳转去了详情页，再跳转回列表页需要保存用户进行过的筛选操作，这就需要用到 &#x3C;keep-alive>，这样也能避免重新渲…"}, {"id": "6943480260008607751", "title": "使用webpack进行打包过程详解及常见问题解决", "desc": "之前写的有些零散,现在一步步再重新写.一.确保已经安装了nodeJS之后.二. 2.3.4.5.在这个文件下创建一个demo.js文件,并创建一个函数.6.原本输入了 webpack demo.js demo.bundle.更换打包命令为: webpack demo.js -o ..."}, {"id": "6943479891362840584", "title": "深入浅出的理解一下JAVA的递归思想", "desc": "package com.gaojizu.System.out.System.out.package com.gaojizu.System.out.System.out.System.out.package com.gaojizu.System.out.System.out.我们告..."}, {"id": "6945628652495175711", "title": "使用log测试法获取子组件", "desc": "1. 使用setup函数，参数1是props，参数2是context，使用展开语法在控制台log context 2. 分别log attrs和slots 3. log default 4. 对比type和Radio组件 总结： 我们可以看到，结果为true，并且分别log后，…"}, {"id": "6945461296359800869", "title": "混入、过滤、自定义指令", "desc": "混入的三种方法"}, {"id": "6944899332088791076", "title": "2020-01-09 本地上传文件速率的计算", "desc": "至此，文件上传速率可以获得，当然这是组件默认的上传方法，也可以使用自定义上传钩子函数http-request，这时候上传中的钩子函数就是失效了，需要使用new XMLHttpRequest()HTTP对象方法，这个对象包含了所有上传中onprogress、上传开始onloads…"}, {"id": "6944894465257504781", "title": "2019-07-15 Vue-vue非父子组件之间的通信", "desc": "父子组件之间的通信如下：有两个组件，父组件和子组件，父组件向子组件传递数据通过props，子组件向父组件发送数据通过$emit和@click两个方法父组件向子组件通信-props在父组件中注册子组件，"}, {"id": "6943481061313609736", "title": "系统化web前端需要技能所占比（通过图表分析来看您是不是一个合格的前端）", "desc": "我想很多人在找工作的时候都会面临的一个问题是，我会的技能到底是不是公司需要的技能，我会的技能到底在公司可以用到多少，还有我的目前会的技术是不是目前比较流行的技术，我目前的技术还可以做些什么....其实这些迷惑我也经常问自己，所以我会经常看一些帖子，看看别人最近都是在忙什么技术，后..."}, {"id": "6942293390339866660", "title": "【Vue使用三】指令和计算属性", "desc": "定义的元素或组件只渲染一次,包括元素或组件的所有子节点.首次选然后,不再随数据的变化重新渲染,将被视为静态内容. vue会最大化地复用DOM元素.替换的数组中,含有相同元素的项不会被重新渲染,因此可以大胆地用新数组来替换旧数组,不用担心性能问题."}, {"id": "6938717665045250055", "title": "VUE基础知识积累", "desc": "1.页面跳转如何传递和接受参数  https://www.cnblogs.com/sunww/p/11287216.htmlA.通过router-link进行跳转，传递方式：使用query传递参数，路"}, {"id": "6844903697592352775", "title": "第二届VueConf", "desc": "第二届Vue.js开发者大会由Vue.js官方联合w3ctech、前端圈共同举办，将于2018年11月24日在杭州金逸影城正式开启。"}, {"id": "6844903559759134734", "title": "Github Stars Repositories 标签管理器", "desc": "纯前端的实现，没有服务器和数据库，你的 Github 就是一切。 本项目发布版使用 Vue 开发，源码在 dev 分支。也有 React 开发版本，源码在 react-dev 分支，仅用作练习。 界面风格模仿 Astral，支持中英文切换。"}, {"id": "6844903617212710919", "title": "基于 MobX 构建视图框架无关的数据层-与 Vue 的结合(1)", "desc": "几周前我写了一篇文章描述了 mobx 与 angularjs 结合使用的方式及目的 (老树发新芽—使用 mobx 加速你的 AngularJS 应用)，这次介绍一下如何将 MobX 跟 Vue 结合起来。 我们知道，mobx 跟 vue 都是基于 数据劫持&依赖收集 的方式来实…"}, {"id": "7007818600295694350", "title": "表单与v-model", "desc": "创建vue项目 已经创建了文件夹可以直接在文件夹里运行vue create . 选择配置 yarn serve 表单输入绑定 你可以用 v-model 指令在表单 <input>、<textarea>"}, {"id": "7007735369969958925", "title": "vue动态加载组件", "desc": "使用场景： 项目中需要我们根据不同的业务需求呈现不同的业务场景，如果业务类型简单还好，直接全部引入判断即可，但随着我们代码的沉积，项目将会变得很难维护，这时候我们可以使用动态引入组件的方式来避免这个问"}, {"id": "7007615528684486686", "title": "每日全栈demo01--Django+Vue前后端分离实现发送邮件", "desc": "Django+Vue前后端分离实现发送邮件 运行效果 前端 邮箱 后端代码 使用QQ邮箱发送邮件，开启QQ邮箱POP3/SMTP服务 首先登录邮箱，点击设置-账户，开启POP3/SMTP服务， 扫码根"}, {"id": "7006574228153565221", "title": "v-for v-if 同时使用？", "desc": "v-if 与 v-for 的优先级对比 2.x 语法 v-for 会优先作用。 3.x 语法 3.x 版本中 v-if 会优先作用。"}, {"id": "7006303445741223966", "title": "常见HTTP状态码及代表的意义", "desc": "5种常见的HTTP状态码及意义 200：请求已成功，请求所希望的响应头或数据体将随此响应返回。 303：告知客户端使用另一个URL来获取数据。 400：请求格式错误 1.语义错误，当前请求无法被服务器"}, {"id": "7006275766438772744", "title": "Uniapp 引入 scss 样式文件子级样式不生效", "desc": "``` `````` <style> @import url(\"./styles/index.css\"); // 官方示例 @import \"./styles/index.scss\"; // scss"}, {"id": "7006256215697129508", "title": "vue3 + axios 下载后端返回文件流", "desc": "``` const { data, headers } = await axios({ method: \"get\", responseType: \"blob\", // 重点 可以自己搜 respons"}, {"id": "6941173362328600607", "title": "Vue之watch一个computed变量时，computed所依赖的变量值被改变会怎样？", "desc": "vm.init，先为computed变量（假设是age，并在computed方法中依赖于另一个变量vm.factor）初始化，age会关联一个watcher（假设为cWatcher，lazy为true），vm.age的get方法被重写，cWatcher的dirty属性被置为tr…"}, {"id": "6854573221526634509", "title": "深入理解Vue2.0响应式原理", "desc": "在介绍响应式原理之前我们先来了解一下如何侦测对象的变化，目前侦测对象变化的方式有2种：Object.defineProperty和ES6的Proxy。在Vue2.0阶段，浏览器对Proxy的支持还不够理想，所以2.0还是基于Object.defineProperty来实现的。本…"}, {"id": "6844903503094087693", "title": "Vue 探索与实践", "desc": "本文主要讲了实际业务在结合 vue 开发的过程中的探索与实践。"}, {"id": "6919463789159153677", "title": "从源码看Vue3 响应式原理", "desc": "从单测可以让我们首先对代码逻辑又一个初步的认识，然后就是在单测覆盖率处于一个较高水准时，当我们在源码中遇到一些不太好理解的逻辑时就可以通过移除响应逻辑在执行测试看看是哪里抛出了异常，从而更好的理解源码逻辑。 本文主要分析vue3的响应式原理，源码涉及的ts类型推导及ts相关知识…"}, {"id": "6844903927448600590", "title": "vue-cli 3.0脚手架，从入门到放弃（三）-运行", "desc": "我太难了！ 写不动了。 ps: huilderx 和vscode 都有自己的快速启动，省了自己手动输入。 上面是vscode的 快捷启动，编译完成会生成可访问地址，就是那 蓝色的地址。↑ 将其复制到浏览器。 这个时候会出现这个页面，那么问题来了，为什么访问localhost:8…"}, {"id": "6844903695172239368", "title": "如何开发高质量的Web阅读产品", "desc": "随着智能手机的普及，移动阅读成为越来越多人获得知识的选择，据统计移动阅读月活跃用户已突破3.2亿，2017年市场规模达到166亿，持续保持2位数增长，相比之下，2012年移动阅读市场仅为32.7亿，6年增长幅度超过5倍，让人惊叹。 正因如此，移动阅读市场巨头云集，各类阅读产品层…"}, {"id": "6904473029636521992", "title": "关于vue的data&props思考", "desc": "结论：data和props都是响应式的。 props：props为什么是响应式，因为props是将从父组件的data传递过来的，父组件的data数据是响应式的，所以子组件的props中的数据是响应式；这里要注意的是传入到props的是值传递还是引用传递；其次是不建议子组件直接修…"}, {"id": "6932285432281432071", "title": "Vue2.0源码解读系列 - 打开神秘礼盒之合并选项（1）", "desc": "文章篇幅较长， 建议花整块时间阅读分析。 另外由于篇幅过长， 本文分三篇文章产出， 便于大家理解与阅读。 在instance.js文件中， 调用了initMixin()方法。然后我们找到init.js中， 对initMixin函数的定义， 中间有这么一段代码： 所以， 主要看参…"}, {"id": "6974696972158500877", "title": "vue-cli之webpack配置详解", "desc": "vue-cli脚手架中webpack配置基础文件详解 一、前言 vue-cli是构建vue单页应用的脚手架，输入一串指定的命令行从而自动生成vue.js+wepack的项目模板。这其中webpack发"}, {"id": "6904652682032906247", "title": "如何使用vue的mixin 语法", "desc": "如何使用vue的mixin语法本篇是使用Vuecli创建的单文件组件方式作为例子有需要可以去查官方文档步骤一使用脚手架创建之后我们就要开始操作了步骤二在我们组件里面引入我们封装好的mixin文件还有必"}, {"id": "6974656589567361031", "title": "Vue2/Vue3篇章4", "desc": "23 前端工程化 23.1 模块化相关规范 23.2 ES6模块化 23.2.1 Node.js 中通过 babel 体验 ES6 模块化 23.2.2 ES6 模块化的基本语法 23.2.3 属性的"}, {"id": "6904801124491264007", "title": "[element-ui源码]element-ui有哪些内置的mixin？", "desc": "1.回顾mixin基础当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。1.数据对象在内部会进行递归合并时，当发生冲突时以组件数据优先。2.混入对象的钩子将在组件自身钩子之前调用。3"}, {"id": "6844903861975531528", "title": "Vue 源码编译思想之parse那些事", "desc": "笔者公司的前端小组掀起了Vue源码学习小组，前后几个月的共同学习，让小组成员都已经对Vue对大致框架有了个模糊对轮廓。 现在已经进入第二阶段：整理。 我们将小组分为四个部分，vue对整理也分为三个大模块：数据绑定、从template到vnode、vnode转化为dom对patc…"}, {"id": "6844903701425979405", "title": "记一次基于react、cra2、typescript的pwa项目由开发到部署（一）", "desc": "上一篇“记录一次基于vue、typescript、pwa的项目由开发到部署”，发布后，忙于秋招的楼主我，终于有时间来写这篇文章。最近秋招也挺顺利，拿到了网易广州岗的offer，对目前想留在广州发展的我来说真是太合适不过了。在最近的反思中，楼主我也意识到了自己存在过于急功近利的毛…"}, {"id": "6870028102525779975", "title": "Vue3.0新特性初体验（一）", "desc": "自从尤大的3.0横空出世以来，备受关注。感觉写法越来越像React,不过尤大也说了，其中一部分是受到了React hooks的思想影响。本系列文章将先带大家了解vue3.0, 会用vue3.0，以及最后了解vue3.0源码。 先带大家了解下vue3.0的新特性玩法：（至于怎样创…"}, {"id": "6956008954283425805", "title": "Vue", "desc": "Vue MVVM 数据双向绑定 模板语法 虚拟DOM 组件 过滤器 插槽 VueCLI Vue-router Vuex"}, {"id": "6904818283573149704", "title": "使用 vue-cli 3.x 开发多页面应用", "desc": "之前一直用vue来做的单页面应用，现在公司业务需要开发多页面，于是花时间去研究了vue如何配置多页面，特地记录一下。 单页面应用（spa）：整个应用在一张页面中完成。用户体验好，因所有的资源都在一张页面上加载，所以首屏渲染在不做优化的情况下可能会很慢，其次spa也不利于seo。…"}, {"id": "6844903810255552520", "title": "从零搭建自己的Vue管理端框架（四）", "desc": "其中el-table标签等为elementui表格的基础用法。 注意：其中设置路由时，需配置children属性，将路由设为Home页得子路由。 搭建创建Home页侧边栏，中间显示区域已完成，后续功能接下来陆续更新，有问题可以联系我mr_beany@163.com。另求各路大神…"}, {"id": "6915684481210777613", "title": "⑩ Vue父组件向子组件传值", "desc": "简单来说就是：每个页面都会抽象成如上图所示的组件树，组件之间如何通信，就是我们今天要展开说的组件之间的传值。 创建了一个main-view的组件，并未这个组件在一个 methods中配置了一个onChangeDescClick的点击事件，这个事件函数有个参数type通过点击动态…"}, {"id": "6916019902533304327", "title": "Vue 2.x 响应式原理深度剖析", "desc": "前端技术层出不穷，Vue3.0 出来都已经几个月了，在面对这些层出不穷的库或者框架时，我们在熟练掌握其使用后也要对其原理层面的知识有一定深度的了解。这不仅对我们在面试求职时锦上添花，还会让我们对框架本身的使用和其拥有的独特的思想有更深层次的认识。 本文会先从 Vue 独特的思想…"}, {"id": "6925440464371843080", "title": "【自说自话】为什么在snabbdom(Vue)中不允许在patch时重用虚拟节点？", "desc": "学习snabbdom有助于拓宽我们对虚拟DOM的认知。当下最流行之一的Vue，它的虚拟DOM技术就源于snabbdom。 有兴趣可以拉下来看看，有详细注解和学习说明,将持续更新配图。 不过今天要讨论的不是如何手写snabbdom库的核心内容。而是想说说在它官方GitHub的文档…"}, {"id": "6844903570748211214", "title": "Vue.js 源码学习八 —— HTML解析细节学习", "desc": "本文详细记录了学习Vue的template解析的过程和逻辑。"}, {"id": "6844903552406519821", "title": "为什么说Web开发和Vue.js是如此的有趣？", "desc": "我想告诉你，我开始享受使用Vue.js和进行前端开发的故事。这不应该被理解为一篇关于为什么Vue.js可能比React，Angular或任何你正在考虑的其他Web框架更好的文章。Vuejs是令人惊叹的，但我们生活在一个作为前端开发人员同样令人惊叹的时代。 如果你几年前和我交谈过…"}, {"id": "6934868426435330055", "title": "Vue.js数据、方法与生命周期", "desc": "对于Vue.js框架编程而言，当创建一个新的Vue实例对象时，其会将数据（data）对象中的所有property 属性加入到 Vue.js 框架的响应式系统当中去。该操作带来的最直接效果就是，当这些 property 属性值发生改变时，视图（view）将会随之发生“响应”——也…"}, {"id": "6844903543548166151", "title": "epic-spinners[基于 Vue 驱动的花样 loading]", "desc": "官方提供两个版本, 一个是纯 HTML+CSS3; 一个是基于 Vue 封装的npm模块.. 萝卜青菜各有所爱,不用也可以看看哪个效果喜欢, 把对应的实现源码了解下.方便哪天用到"}, {"id": "6904188646472024072", "title": "工作问题之一：下拉列表选中，在输入框中显示对应的其他属性", "desc": "前言每遇到一个问题，在解决后将其记录下来，未来可以变成大佬吗？哈哈背景根据下拉列表，当选择一项后，在输入框中显示该项对应的其他数据上图：数据结构：我的代码写法：后记各位大佬如果有更好的写法，请务必留下"}, {"id": "6844904178918096903", "title": "超简单的Vue2响应式系统原理解释", "desc": "所谓Vue.js的响应式系统也就是指，在修改数据模型的时候，视图会自动变化，而用户不需要像命令式编程那样再手动去操作视图的变化。用高大上的说法就是：使用订阅者模式，达成声明式编程的目的。 Vue.js的响应式系统非常适合用订阅者模式的原因就在于，每次在修改数据的时候，对应通知到…"}, {"id": "6844903601802838024", "title": "LegoFlow 2.0 开源更轻、更强的前端工作流客户端", "desc": "内置集成 Webapk 4、Gulp 4、Babel 7 等前沿构建工具模块，无需配置安装复杂的系统环境，致力打造更轻、更强的前端工作流客户端。"}, {"id": "6925047715663446030", "title": "Class 与 Style 绑定", "desc": "在使用 Vue 开发项目时，经常会有操作元素 class 和 style 的需求，比如，开发 Tab 组件时通过切换元素的 class 展示被选中的样式，或者有时需要直接更改组件中元素的内联样式。 在上述代码中，active class 是否存在取决于数据 property i…"}, {"id": "6844903587777118215", "title": "Vue的组件的概念与基本使用", "desc": "组件(Component)是vue.js中很强大的一个功能，可以将一些可重用的代码进行封重用。所有的 Vue 组件同时也是 Vue 的实例，可以接受使用相同的选项对象和提供相同的生命周期钩子。 一句话概括：组件就是可以扩展HTML元素，封装可重用的HTML代码，可以将组件看作自…"}, {"id": "6844904131199516679", "title": "Vue 3.0 带着 Composition API 来了", "desc": "Vue 3.0 即将为开发者们带来的是一个更快、更小、更易维护以及更方便使用的 Vue 版本，与此同时，Vue 并没有抛弃其“渐进式”的概念，你仍然可以通过 script 标签使用 Vue，以及 2.x 版本的代码也会一如既往健康地继续工作着。 Beta 版本的发布说明官方团队…"}, {"id": "6897175186257215501", "title": "vue自定义组件的实例讲解", "desc": "现在基于vue的UI组件库有很多，比如vant，element-ui等。但有时候这些组件库满足不了我们的开发需求，这时候我们就需要自己写一个插件。"}, {"id": "6844904052229144590", "title": "2020轮子燥起来-首篇", "desc": "😄大家过年好！现在已经进入21世纪20年代了，20后的出现对于92年还没女朋友的我刺激还是蛮大的，虽然还差点步入中年，但我们还是需要展望未来，期待着一份美好的爱情。这也是我的新年愿望，希望和我有同样境遇的小伙伴在新的一年都能找到自己理想的另一半儿👄。 作为一名前端儿，对普遍…"}, {"id": "6913722107322957832", "title": "Vue项目实战TodoList——使用localStorage存储", "desc": "以下为解决思路，想直接看解决方法直接找到1-2。 在我们项目中也遇到了这个问题，A为Home.vue，B为TodoList，C为TodoItem，TodoItem的编辑和删除事件触发时要传给Home.vue。 使用Vuex管理状态。当项目多个组件共享状态比较少，全局状态比较少时…"}, {"id": "6923895031140974599", "title": "Vue2源码解析(组件化)", "desc": "将组件的钩子函数通过installComponentHooks(data)方法将componentVNodeHooks的钩子函数合并到data.hook中。 创建组件Vnode，并返回Vnode。 函数中先构建组件的参数，然后执行new vnode.componentOptio…"}, {"id": "6902462580179075079", "title": "【Vue学习（二）组件和插槽】", "desc": "例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。 Vue.js 使用component();函数来创建组件，该函数中可以传入两个参数 分别为组件名、以对象的形式定义（描述）组件。 这里就不测试了，感兴…"}, {"id": "6844903669377269767", "title": "自制简单的range（Vue）", "desc": "首先我们明白整个容器的长度是不变的等于左边+中间+右边所以我们可以通过先获取总的容器的宽度并用变量进行保存,这里我用的就是屏幕的宽度。"}, {"id": "6844903944607514638", "title": "【Vue原理】Diff - 源码版 之 相关辅助函数", "desc": "判断某个新 vnode 是否在 这个旧的 Vnode 数组中，并且拿到它的位置。就是拿到 新 Vnode 的 key，然后去这个 map 表中去匹配，是否有相应的节点，有的话，就返回这个节点的位置"}, {"id": "6844903873434386439", "title": "Vue基于snabbdom做了哪些事", "desc": "之前有简单看过 Vue patch 部分的源码，了解了是基于 Snabbdom 库实现的。最近想详细了解下 Vue 处理 vnode patch 的整个过程，想知道它在 Snabbdom 之上做了哪些事情？所以带着这个问题，写了这篇文章来记录。 Snabbdom 核心代码大约只…"}, {"id": "6844903941969281031", "title": "前端基础知识总结", "desc": "所以当我们的设备（手机，平板，电脑）等分辨率改变的时候，我们只需要通过媒体查询或者JS代码来改变根标签的大小就可以了。 GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache…"}, {"id": "6969586935039803399", "title": "vue3学习（5）effect源码阅读理解", "desc": "这是我参与更文挑战的第2天，活动详情查看更文挑战 前言：effect类似于vue2源码中的watch，观察者/订阅者。 以下过程中，effect为观察者，target的属性值为被观察者，effect观"}, {"id": "6844903692735348749", "title": "vue+elmentui+ueditor +数学公式 编辑器", "desc": "写了几乎一个星期终于写好了，在vue项目中使用的编辑器，最主要的是我想编辑器里面可以输入数学公式。】 上面就是我想实现的功能。编辑器时可以切换的。 好啦。从头开始，。 首先我们去现在下载一个uedotor的编辑器。可以在这里下载所需的插件。https://download.cs…"}, {"id": "6844903592957067277", "title": "vue实践06-项目实践", "desc": "项目采用Webpack+Vue-router的架构方式,在命令行中，进入项目目录，使用npm install 安装package.json里项目的依赖包。如果你网速较慢的话，可以使用淘宝镜像的cnpm来进行安装。 查看是否安装正确。在命令行中输入 npm run dev ，如果…"}, {"id": "6913908311146397703", "title": "解读vuejs源码教程（一）", "desc": "1、Object数据监测1、如何追踪变化？vue2.x使用Object.definePropertyvue3.x使用Proxy2、如何收集依赖？3、收集依赖放在哪里？2、收集1、收集谁？Watcher"}, {"id": "6903310835070812168", "title": "SFC&vue-cli", "desc": "SFC在之前Vue组件的文章里面，我们写的组件都是用template的形式去书写html，其实我们就是单纯的在写字符串，没有任何的高亮提示，也容易出错，而全部的html、js堆积在一起也使我们在阅读的"}, {"id": "6976900272417144839", "title": "脚手架(Vue2.0)", "desc": "1.问题 当项目中组件非常多时,都会用专门的文件夹来分类组织不同的组件文件,便于查找和维护,但是,人和人创建的文件夹的习惯和命名差异很大!结果,一个人创建的项目结构和另一个人建立的项目结构很有可能不一"}, {"id": "6844903586195832846", "title": "深入理解Vue中的slots/scoped slots", "desc": "传递的插槽内容'hello juejin!'会被编译成dx-li子组件VNode节点的子节点。 子组件的后续渲染过程与slots类似。scoped slots原理与slots基本是一致，不同的是编译父组件模板时，会生成一个返回结果为VNode的函数。当子组件匹配到父组件传递作用…"}, {"id": "6854573217265221640", "title": "V8引擎学习-V8如何实现对象继承", "desc": "继承就是一个对象可以访问另外一个对象中的属性和方法。最典型的继承方式有基于类的设计和基于原型继承的设计。js仅仅在对象中引入一个原型的属性来实现继承。 1. 原型继承的概念 JS的每个对象都包含一个隐藏属性__proto__，这个隐藏属性称为该对象的原型prototype，__…"}, {"id": "6884469765323259918", "title": "一场电影时间，了解MVVM原理", "desc": "如果是用Vue的选手的话，面试一般都会被问到响应式是如何实现的。 4、实现一个解析器 Compile，可以解析每个节点的相关指令，对模板数据和订阅器进行初始化。 我们很有可能会被认为是靠背出来的，并非真正了解，就算你了解，如此答复，也有可能被认为是背。试想，面试官并非面试过你一…"}, {"id": "6844903877704155143", "title": "【Vue原理】Watch - 白话版", "desc": "今天我们用白话文解读 watch 的工作原理，轻松快速理解 watch 内部工作原理。你说，你只懂怎么用的，却不懂他内部是怎么工作的，这样能有什么用？ 当你设置了 immediate 时，就不需要在 数据改变的时候 才会触发。 我们都知道 watch 有一个 deep 选项，是…"}, {"id": "6989784673212137508", "title": "修改element 组件的样式 el-transfer修改宽度", "desc": "el-transfer默认宽度是200px 在内容较长的时候，无法展示完全 需要修改该组件的宽度 处理方法是 采用定位组件的方法，通过组件外层的class或id定位，使用 >>> 进行样式穿透。 在e"}, {"id": "6844904045363085319", "title": "聊一聊 Vue 项目的「深链方案」", "desc": "阅读时间 约 8min. 关注最终方案请点击目录 => 方案输出 深链(深度链接, DeepLinking) 在互联网的语境中的含义是指: 使用超链接,链接到一个特定的、通常可搜索的或索引的网站内容 ( 例如: http://example.com/path/page )，而不…"}, {"id": "6976570002761580557", "title": "用Vue 3 Composition API建立一个标签输入组件", "desc": "有没有想过如何建立一个像你在博客管理面板或概念文档中看到的那些花哨的标签输入组件？那么，不要再想了！在这篇文章中，我们将使用Vue 3的组合API来制作一个可重复使用的标签输入组件。在这篇文章中，我们"}, {"id": "6921691072951222279", "title": "vue知识点总结", "desc": "导航被触发。 在失活的组件里调用 beforeRouteLeave 守卫。 调用全局的 beforeEach 守卫。 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。 在路由配置里调用 beforeEnter。 解析异步路由组件。 在被激活的组件里调…"}, {"id": "6908664873606086663", "title": "千层套路 - Vue 3.0 初始化探秘", "desc": "9 月初 Vue.js 3.0 正式发布，代号 \"One Piece\"。大秘宝都摆到眼巴前了，再不扒拉扒拉就说不过去了。 那我们就从初始化开始。 将 vue-next 代码克隆到本地，打开 package.json 将 scripts dev 末尾加上 --sourcemap。…"}, {"id": "6844903623688880136", "title": "基于webpack工程化的思考", "desc": "本文章是在基于webpack多入口配置工程并且项目需要持续迭代作为基础去讨论的，单页面不作讨论。文章适合对webpack有一定了解的人看，主要讨论工程化中关于缓存利用率的问题。 在webpack中，我们通常会打包一个vendor和一个common文件作为基础包，vendor通常…"}, {"id": "6921959881486368781", "title": "Vue 完整版与非完整版的区别和使用方法", "desc": "另一个是非完整版也叫运行时版本（vue.runtime.js）。 内含compiler，编译器可以把试图上的html转成DOM节点，转成html中的内容，所以体积大，不建议用，是从HTML获得视图。 当然了，因为是完整版，在引入 vue-loader 后完全可以按照非完整版书写…"}, {"id": "6844903864962039815", "title": "一个基于vuepress默认主题开发的主题-vuepress-theme-reform", "desc": "此主题继承至vuepress的默认主题，添加功能有标签页改造，主页改造，博客分类及展示，gitalk集成及gitalk自动化配置，最新google Analytics集成等。 vuepress提供了@vuepress/plugin-google-analytics,我使用过后没…"}, {"id": "6917265206347300871", "title": "谈谈我对Vue2中diff算法的理解", "desc": "我认为diff算法具备两个特点。 一、高效性：有虚拟dom，必然需要diff算法。通过对比新旧虚拟dom，将有变化的地方更新在真实dom上，另外，通过diff高效的执行比对过程，从而降低时间复杂度为O(n)。 二、必要性：vue2中为了降低watcher粒度，每个组件只有一个w…"}, {"id": "6844903712402440199", "title": "基于Vue实现后台系统权限控制 | 前端路上", "desc": "写在前面本文中的菜单权限控制方案由于没有使用router.addRoutes()实现动态路由，需要将登录页独立出来单独做，基于相同思路的动态路由方案参见]用addRoutes实现动态路由。正文用Vue"}, {"id": "6844903775950340104", "title": "vue 模板语法", "desc": "在底层的实现上，Vue将模板编译成虚拟DOM渲染函数。结合响应系统，Vue能够只能地计算出最少需要重新玄滩多少组件，并把DOM操作次数减到最少 v-once指令，执行一次性的插值，当数据发生改变时，插值处的内筒不会更新。 注意，不能使用v-html来符合局部模板，因为Vue不是…"}, {"id": "6844903630357659655", "title": "Function和Object 应该知道的", "desc": "javascript有5种基础的内建对象(Fundamental Objects)，Object、Function、Error、Symbol、Boolean，而Object/Function尤为特殊，是定义其他内建对象或者普通对象和方法的基础。 详细的了解Object和Func…"}, {"id": "6844903517665116167", "title": "history API 和锚点链接在单页应用页面切换中的应用", "desc": "Ajax的流行和前端MVVM框架的快速发展给Web开发带来了极大的便利，也让Web应用体验越来越好，近些年单页应用也随之流行起来。Ajax的应用可以让网页实现无刷新更新数据，但其也会造成浏览器无法前进和后退（浏览器和手机的物理返回键）的问题。早期这个问题通常是借助iframe来…"}, {"id": "6844903505879105544", "title": "vue2.0国际化的实现vue-i18n6.x", "desc": "一个采用vue-cli搭建的单页面管理系统，采用了elementUI作为前端框架。为了实现多语言，便测试了vue-i18n的功能实现过程。http://kazupon.github.io/vue-i18n/en/started.html 1、安装 2、引用 –为了方便后去…"}, {"id": "6844903817830465550", "title": "Vue页面级缓存解决方案feb-alive (下)", "desc": "在剖析feb-alive实现之前，希望大家对以下基本知识有一定的了解。 1. 针对activated钩子差异性 keep-alive配合vue-router在动态路由切换的情况下不会触发activated钩子，因为切换的时候组件没有变化，所以只能通过beforeRouteUpd…"}, {"id": "6856756381837033486", "title": "54. Vue nrm的使用", "desc": "使用npm下载镜像默认是采用国外的镜像地址的，那么当在国内使用国外的地址来下载软件，那么肯定存在网络缓慢的过程。 那么这时候就要考虑切换国内下载镜像。但是这样也有一个问题，切换国内镜像有些时候挺麻烦的，这时候就可以使用nrm这个工具来进行镜像地址切换。 那么下面来演示一下安装使…"}, {"id": "6915047066200702990", "title": "mock数据，模拟后台接口", "desc": "在前端开发过程中，有后台配合是很必要的。但是如果自己测试开发，或者后台很忙，没时间，那么我们需要自己提供或修改接口。下面提供两种方式，第二种更简单，个人推荐第二种。 5、在main.js入口文件中引入mock数据，不需要时，则注释掉。"}, {"id": "6844903556944756744", "title": "关于element-ui 中使用Notice组件(Message、MessageBox、Notification)所遇到的坑", "desc": "就是说可以在vm实例中通过this.$message(options)方法来调用出message，也可以通过在文件中单独引入Message,通过Message(options)来调用，而传入的options的配置都是相同的，因为我是在一个公用的server方法中写的Messag…"}, {"id": "6844903664964861966", "title": "Vue 2.x折腾记 - (13) Nuxt.js写一个常规音频的播放组件,动态注入微信,新浪微博的js-sdk", "desc": "微信和微博,若没有用其官方的js-sdk初始化,没法播放。 有不对之处请留言,会及时修正,谢谢阅读。"}, {"id": "6844903613211344909", "title": "Vue的computed和watch的细节全面分析", "desc": "1.情况一:作为局部变量来使用 A.传入的值想作为局部变量来使用,直接使用会 报错 这个错误是说的避免直接修改父组件传入的值,因为会改变父组件的值,贴上官网介绍 B.简单数据类型解决方案: 所以可以在data中重新定义一个变量,改变指向,但是也只是针对简单数据类型,因为复杂数据…"}, {"id": "6911624403612762126", "title": "Vue实战时用到的API(二)：$nextTick", "desc": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。"}, {"id": "6844903974554828807", "title": "webpack之vue使用详解", "desc": "使用 git add . 将所有文件托管到 git 中"}, {"id": "6844903972046651406", "title": "[翻译] VUE：如何把slot从父组件传到子组件", "desc": "A, B, C会传入W，但问题是W并不知道A, B, C会用哪个slot。 输出的结果确是Default A Content, 原因是slot a被当成了W的slot，而不是A的slot。 所以我们需要想办法，将传给W的slot，接着传下去，让子的component能够接收到。…"}, {"id": "6902006871381999623", "title": "Vue源码解析系列(三) -- 响应式系统的依赖收集与视图更新", "desc": "我们知道通过Object.defineProperty做了数据劫持，当数据改变的时候，get方法收集依赖，进而set方法调用dep.notify方法去通知Watcher调用本身update方法去更新视图。那么我们抛开其他问题,就讨论get，notify，update等方法，直接…"}, {"id": "6844903825124524045", "title": "Vue学习笔记（一）------脚手架vue cli", "desc": "通过 @vue/cli 搭建交互式的项目脚手架。 通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发。 可以通过插件进行扩展。 一个丰富的官方插件集合，集成了前端生态中最好的工具。 一套完全图形化的创建和管理 Vue.js 项目的…"}, {"id": "6969194871710203935", "title": "【前端实践系列之二】不用云函数，小程序也能直接解析Excel", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 ! 👽概论 小程序解析Excel表格文件并非不可能的任务，搭配SheetJs可以轻松完成任务，但在此过程中也有一些值得注意与分享的地方"}, {"id": "6844903504574676999", "title": "Vue入门实例", "desc": "最近React框架的一些问题，基本上大多React使用者都停止使用。无疑Vue将会更加受人欢迎。 对于不清楚Vue是什么或者不知道如何使用的伙伴可以自行参考Vue 文档。 安装Vue最简单的方法就是找一个国内CDN下载：here 我们的项目结构为： 对于学习一项技能，最好的方法…"}, {"id": "6844904169275392013", "title": "从源码解惑，为什么明明修改了数据视图却不更新", "desc": "在使用Vue日常工作开发中，偶尔会遇到这种问题，明明我已经修改了数据，但是视图却没有更新。比如下面这些骚操作： 想要了解为什么上面这些写法不会触发视图更新，只需要搞清楚在vue中是如何对数据进行响应式处理的。知道了vue的数据响应机制，那么跳出机制的写法自然就不能触发视图更新了…"}, {"id": "6844903605321875470", "title": "为Vue-Cli添砖加瓦", "desc": "哈喽大家好，这里是代码搬运工。第一次写还挺紧张的呀。 但是到现在还是能用的，import是vue-router官方推荐的方法，同学们可以自由选择。当然import（）还需要一个babel插件syntax-dynamic-import，请安装babel-plugin-syntax…"}, {"id": "6844903827615776782", "title": "使用 vue 实例更好的监听事件", "desc": "文章举例说明一下在 vue 中如何更好的监听浏览器事件。原文介绍了一种新增 vue 实例的方法，单独监听事件。这样代码书写较为简练，容易管理。 🍉"}, {"id": "6844904050941493256", "title": "基于导航守卫实现页面的权限控制", "desc": "作为一个前端开发，我们有时候会遇到一些没有权限访问的页面,或者通过点击某个按钮但却没有权限。鉴于自己遇到了这样的问题，所以在这里做一个总结 系统管理员能够进入角色页面，并且通过功能权限或者页面权限给用户分配权限，包括用户是否有权限访问某个页面，或者是通过编辑以及添加这种操作进入…"}, {"id": "6977619810997764126", "title": "分享Vue开发实用技巧 slots语法", "desc": "分享最近学习到的实用Vue开发技巧，简单高效的代码，让代码看起来更加优雅~ slots新语法 slots新语法向vue3.0看齐。 ❝使用带有“#”的新命名插槽缩写语法,在Vue 2.6.0+中可用👍"}, {"id": "6969027420217311269", "title": "Vue使用babel-polyfill兼容IE解决白屏及语法报错", "desc": "解决vue elementUI项目使用webpack打包上线后，服务器环境下IE报语法错误及白屏问题 在最近的项目中，在使用webpack打包后发布，有用户反馈使用IE浏览器访问会白屏，这就不能忍受了"}, {"id": "6874853357240975368", "title": "Vue3为什么这么快？", "desc": "昨天Vue3.0正式发布了，激动的心，颤抖的手，摸了摸我的头发，嗯~还好。 vue2.x的diff算法叫做全量比较，顾名思义，就是当数据改变的时候，会从头到尾的进行vDom对比，即使有些内容是永恒固定不变的。"}, {"id": "6992496215996760095", "title": "Vue开发遇坑记--van-tab有/无唯一值获取当前点击的对象", "desc": "van-tab，tab重复的问题所在，以及获得当前点击的对象，在有唯一值的情况下和无唯一值的情况下的分别操作。"}, {"id": "6844903907756343309", "title": "向钉钉请假流程设计器开发者提问：程序设计是否存在问题？", "desc": "最近在做系统中的流程管理功能，对比了各大流程设计器，很多都要结合脚本进行实现。作为一名追求完美用户体验的全栈设计师，这种方式一定要不得。其实对于我们系统来说也不必要那么复杂的操作体验。寻觅一番，发现钉钉的请假流程体验很好。 界面简单明确，适合固定流程类型的系统。于是开始对其进行…"}, {"id": "6999254861409681421", "title": "1x3 VueRouter - 基础 -  命名路由 & 命名视图", "desc": "VueRouter 基础教程系列 🎉 命名路由 使用 name 属性来为路由配置项设置别名。 “命名路由”的优点主要有以下几点： 更简短的路由导航地址、尽可能降低拼写错误的机率。 路径参数 自动编码/"}, {"id": "6993585935484977159", "title": "vue源码解析学习笔记-2:模板引擎-mustache.js 正则表达式", "desc": "写在前面：学习笔记来源于学习Vue源码解析系列课程_哔哩哔哩_bilibili，侵删 1.该库不能用简单的正则表达式思路实现 最简单的模板引擎的实现机理，利用的是正则表达式中的repl()方法，该方法"}, {"id": "6980199710963286029", "title": "回顾 vue 的 Render 函数", "desc": "Render 函数 Vue 推荐在绝大多数情况下使用模板来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力。这时你可以用渲染函数，它比模板更接近编译器。 一、节"}, {"id": "6980153439871303693", "title": "vue 父子页面双向绑定对象数据不更新问题", "desc": "如果只更新对象的某个属性，子页面可以直接赋值，并且父子页面都会得到更新，但是如果想更新整个prop data对象，子页面赋值会报错，使用$emit更新父级data子页面使用时也不会更新这个值"}, {"id": "6961751475219496997", "title": "vite2+vue3+vue-router搭建vue-ssr", "desc": "如果你是用于公司项目开发请慎重考虑。因为服务器渲染不仅仅只是前端开发，还需要一个强大的后台服务支撑。对于大流量的网站来说；还应当考虑缓存、服务器资源、压力、监控等一些列问题。无论是首次访问还是路由切换"}, {"id": "6998023520848445477", "title": "【vue】组件间（路由间）父子传值", "desc": "vue系列文章-关于组件之间的父子传值方式。 1、prop+emit 2、vuex的store 3、window的localStorage和sessionStorage"}, {"id": "6996426701580271623", "title": "回首Vue3之API篇（二）", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 这篇文章我们来讲一下应用APIdirective的使用，以及我们需要注意的地方。 directive可以用来注册或检索全局指令。当我们需要"}, {"id": "6982005110746382349", "title": "vue-next 从模板到看到HTML发生了什么", "desc": "最近倒是在写vue-next的源码解析，内容倒是挺多的，目前更新到了transform阶段，后面还会有generate（生成block tree 用于渲染）、生成VNode、渲染等内容仍未更新。大概内"}, {"id": "6983949174861463559", "title": "vue 集成腾讯地图基础api Demo集合", "desc": "使用vue结合网上的开源框架vue-admin参照官方网站demo，做一个开箱即用的Demo集合出来。"}, {"id": "6994694044848750629", "title": "# Vue前端对于管理后台表格富文本图片展示+预览", "desc": "描述：很多项目后台需要展示用户提交的内容，内容可能是使用富文本编辑器生成的，其中就包含文字，图片，视频等等，针对最普遍的现象那就是对于图片的展示，因为运营人员注重的是内容，格式不会要求一定像用户编辑时"}, {"id": "6983222989256917029", "title": "如何愉快的去读别人的代码", "desc": "首先，当我们拿到一份别人写的代码时，不要急着去看源码，因为给你这份源码，无非有两个目的，一个就是让你修改其中的bug，另一个就是让你去维护和添加新的功能。这两者都是要建立在熟悉和了解项目的基础上才可以"}, {"id": "6979764884917452831", "title": "vue入门教程之-插槽", "desc": "slot是对组件的扩展，通过slot插槽向组件内部指定位置传递内容，通过slot可以父子传参；是“占坑”，在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中<"}, {"id": "6929040071962132488", "title": "Vue3 + Vite + TypeScript 项目实战 -----（二）Vue3 生命周期", "desc": "Vue3 继承了 Vue2 的所有生命周期函数，所以 Vue2 的生命周期的应用方式同样适用于 Vue3。同时 Vue3 还新增了一些新的生命周期。 当虚拟 DOM 重新渲染为 triggered.Similarly 为renderTracked，接收 debugger eve…"}, {"id": "6854573219957964814", "title": "Vue 项目如何使用Echarts ， 手摸手带你入门", "desc": "前言首先得认识Echarts简单起步创建vue-cli​我们还是老套路，先创建一个vue-cli,如果你已经创建了项目可以跳转到下一步​配置啥的就不用老严多说了吧（你已经是一个成熟的前端开发者了~）安"}, {"id": "6844903518734827528", "title": "Nuxt.js服务端渲染实践，从开发到部署", "desc": "经过几个周六周日的尝试，终于解决了服务端渲染中的常见问题，当SEO不在是问题的时候，或许才是我们搞前端的真正的春天，其中也遇到了一些小坑，Nuxt.js官方还是很给力的，提issue后很积极的给予帮助，再次感谢Nuxt.js的开发团队。 第一个拦路虎就是登陆时候的鉴权问题，如何…"}, {"id": "6844904070797328397", "title": "搞清Vue生命周期执行顺序", "desc": "所以我就CLI一把梭了个项目，然后实验开始。 其实也能推断出来，按照之前的逻辑。 代码大概是这样的，Index是父组件，List是子组件，secondChild是孙组件。父组件通过props传递数据给子组件，子组件继续通过props把该数据传给孙组件。"}, {"id": "6934891489139326989", "title": "Vue3疑问系列(5) — v-model(vModelCheckbox)指令是如何工作的？", "desc": "上面的代码不考虑代码写的咋样, 功能起码完成了。注意,引用类型的数据,回显时必须使用同一个引用数据，因为我内部使用了[].includes和set.has方法来判断的. 比起Vue3 v-molde=\"数组\", 当数组的值是引用类型的数据时,Vue3 回显是不需要同一个引用对象…"}, {"id": "6844903630428979207", "title": "Vue响应式数据: Observer模块实现", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。接下来的日子我应该会着力写一系列关于Vue与React内部原理的文章，感兴趣的同学点个关注或者Star。 之前的两篇文章响应式数据与数据依赖基本原理和…"}, {"id": "6987728543635488781", "title": "vue中封装axios", "desc": "axios基本用法 1. 下载 axios yarn add axios -S npm i axios -S 2. 封装请求工具 src文件下创建 utils / request.js 3. 封装接口"}, {"id": "6976270198223405092", "title": "Vue 状态管理模式 -- Vuex", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化"}, {"id": "6968651570258903076", "title": "Vue打包上传出现\"Uncaught SyntaxError: Unexpected token <\"的错误", "desc": "Uncaught SyntaxError: Unexpected token < 配置vue.config.js"}, {"id": "6844903927075307534", "title": "Vue从甜小白到皮大佬系列(四)  自定义指令", "desc": "在前端开发领域，以前的通用框架是jQuery，jQuery以及基于jQuery构建的通用组件形成了一个庞大的生产系统。现在的通用框架是Angular、React和Vue，每个框架都需要基于自身构建新的组件库,自定义指令好就好在：原先的那些通用组件，无论是纯js的也好，基于jQu…"}, {"id": "6865509084771287054", "title": "[译] Vue 3 迁移策略 —— 按键修饰符（破坏性改动）", "desc": "在 Vue 2 中，keyCodes 是修饰 v-on 方法的一种方式。 另外，您可以通过全局 config.keyCodes 选项自定义别名。 由于 KeyboardEvent.keyCode 已被弃用，因此 Vue 3 也不再继续支持它。也因此，现在建议用短横线命名法（ke…"}, {"id": "6844903624540176392", "title": "Vue：触发视图更新的hack", "desc": "前言触发视图更新的hack，hack的是什么？hack那些数据改变却没有被vue检测到的更新！那么vue有哪些情况是检测不到数据的变动的？官方说明的有下面两大类：数组使用下标更新数组元素；使用赋值方式"}, {"id": "6844903662297284622", "title": "vuex持久化方案探究", "desc": "beforeunload事件会在页面卸载之前执。如刷新，返回到其他页面，关闭等操作都会触发这个事件"}, {"id": "6966159729731059725", "title": "【Vue】diff算法", "desc": "Vue diff算法原理，diff算法的核心是两个数组的遍历，但是它在此基础上进行了优化，使得diff在大多数情况下实际时间复杂度接近n"}, {"id": "6844903510706765832", "title": "聊聊keep-alive组件的使用及其实现原理", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6990530461235675173", "title": "Element Vue el-table组件内容的千位分隔", "desc": "实现功能如： 后端返回1234 表格中显示为1，234 贴一下官方文档地址 https://element.eleme.cn/#/zh-CN/component/table 在官网中这样提到 这边改为"}, {"id": "6844903668551008269", "title": "通过项目梳理vuex模块化 与vue组件管理", "desc": "new Vuex.Store({}) 表示创建一个Vuex实例，通常情况下，他需要注入到Vue实例里. Store是Vuex的一个核心方法，字面上理解为“仓库”的意思。Vuex Store是响应式的，当Vue组件从store中读取状态（state选项）时，若store中的状态发…"}, {"id": "6844904096709738509", "title": "1W字长文+多图，带你了解vue2.x的双向数据绑定源码实现", "desc": "一起学习vue源码的第一篇来讲讲vue2.x双向数据绑定的源码实现。 vue中的双向数据绑定主要是通过变化侦测这种方式去实现的，这篇文章主要总结的是Object的变化侦测。 我们在面试的时候，如果面试者的技术栈包含vue框架，那么面试官会有很大的几率甩出“你了解vue中双向数据…"}, {"id": "6895586959524102152", "title": "等等，这样讨论vue ref-sugar是不讲武德的！", "desc": "和知名前端框架作者亲密接触，大型技术讨论现场，一边是欢呼沸腾，另一边是喷的不行，你们，能讲讲武德么？我们讨论ref-sugar本质上在讨论三件事：设计原则，开发体验，实现魔法。我们现在在该问题上争论，"}, {"id": "6844904195431104526", "title": "基于Vue-CLI 3.x 搭建项目", "desc": "Element是饿了么平台推出的一套基于Vue.js开发的后台页面组件库。 将element-ui模块通过本地安装为生产依赖。在根目录下的命令行窗口，输入一下命令："}, {"id": "6844903885279068168", "title": "基于Vue实现后台系统权限控制", "desc": "子账户拥有限制权限，且可被随时更改。 根据权限列表展示隐藏相对应菜单栏、按钮等。 我们在登录后，将获取到的用户权限保存到本地缓存中，以便每次方便获取权限，判断权限。 权限变少：当用户点击到原本有权限但修改后没有权限的相关请求，后端会给出相对应的状态码供前端判断，此时前端可以根据…"}, {"id": "6844903726860206093", "title": "探讨把一个元素从它所在的div 拖动到另一个div内的实现方法", "desc": "接到一个新需求，要求用vue搞，主要是拖动实现布局，关键点有：单个组件拖动，一行多列里面的组件拖动， 单个组件可以拖入一行多列里， 单个组件的拖动好实现，关键是把一个组件拖动到另一个类似于表格里面，而且有的情况下还需要限制拖动只能在水平方向，自己搜集资料， 实验，终于搞出来了。…"}, {"id": "6943039528114323470", "title": "[译]关于vue3 compostion api \"reactive()\"方法的害处", "desc": "Composition API简介你可以通过下面两个api创建响应性对象：reactive()ref() / computed()reactive简介reactive(obj) 会返回一个响应性对象，"}, {"id": "6940190146394488869", "title": "miniVue3的简单实现-虚拟dom对比", "desc": "2. 执行patchChildren进行子元素dom对比的流程 3. patchKeyChildren进行新旧虚拟dom的子元素都为多个的复杂情况 头部不相同后，从尾部开始对比，尾部对比如果相同e1--、e2--。前后虚拟dom不同或i大于e1或e2后结束尾部对比 4. 新老虚…"}, {"id": "6950646173233479711", "title": "vue中diff算法解读", "desc": "真实的操作dom会造成大量的重流和重绘。造成性能浪费。 虚拟dom是不会立即更新的，会先进行diff算法的比较在更新。所以真实的操作dom的次数相对减少很多。 首先比较vnode是否相同，通过标签名和key值的比较。 1.如果新的vnode是text，比较老的，如果老的有chi…"}, {"id": "6844903648984596494", "title": "Vue2.x源码解析系列五：数据响应之Watcher ", "desc": "笔名言川, 前端工程师，精通 Vue/Webpack/Git等，熟悉Node/React等，涉猎广泛，对算法/后端/人工智能/linux等都有一定研究。开源爱好者，github上目前总计5000+ Star。 为了弄懂 Watcher 我们需要选择一个切入点，这次我们选择从 c…"}, {"id": "6900913835272896519", "title": "除VUEX外的其他VUE组件化通讯", "desc": "组件通讯props 父子间通讯自定义事件子传父事件总线任意两个组件之间传值用$BUS或者vuex实践中通常用Vue代替Bus,因为Vue已经实现了相应接口$parent/$root兄弟组件之间通讯，可"}, {"id": "6844903552800784398", "title": "Mobx binding for Vue.", "desc": "Mobx 是一款优秀的且与框架无关的状态管理工具，在 React 生态中，是 Redux 的有力竞争者。尝试将 Mobx 用于 Vue 项目中，能极大降低 React 项目或者 Vue 项目之间互相迁移的成本，因为二者可以复用 Mobx State。"}, {"id": "6844903597105233933", "title": "v-page - 基于 Vue2.x，简洁易用的独立分页插件", "desc": "分页栏支持分页菜单设置，i18n 国际化支持，简洁的动画效果"}, {"id": "6844904196437704717", "title": "轻松掌握纯前端js框架---VUE Ⅱ", "desc": "一. 指令: (1). <要反复创建的元素 v-for=\"(value, i ) of 数组/对象/字符串\"> (2). 原理: 当new Vue()首次扫描到这里时，或依赖的数组内容发生变化时: a. 自动遍历of后的数组或对象... b. 每遍历一个成员，就 c. 反复创建…"}, {"id": "6919426548357398536", "title": "简述computed和watch的区别", "desc": "computed虽然看上去是方法，但实际上是计算属性，因此，使用方法和属性的使用方法相同，不需要加括号。 computed会根据依赖的数据动态显示，并且计算结果会被缓存，只有在依赖的数据发生变化的之后再次获取computed的值才会重新计算。 watch是对数据data的监听回…"}, {"id": "6844903842526527496", "title": "根据调试工具看Vue源码之虚拟dom（二）", "desc": "扫描下方的二维码或搜索「tony老师的前端补习班」关注我的微信公众号，那么就可以第一时间收到我的最新文章。"}, {"id": "6844903966803787789", "title": "VUE入门实践（1）", "desc": "Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。 Vue 只关注视图层， 采用自底向上增量开发的设计。 Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。 允许用户从NPM服务器下载别人编写的第三方包到本地使用…"}, {"id": "6844903647378145294", "title": "VueRouter 源码深度解析", "desc": "在解析源码前，先来了解下前端路由的实现原理。 前端路由实现起来其实很简单，本质就是监听 URL 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式 www.test.com/#/ 就是 Hash URL，当 # 后面的哈希值发生变化时…"}, {"id": "6861881633792851975", "title": "vue2中从源码的角度 分析Vue.$set", "desc": "这就是vue2中的set源码接下来给大家一行一行去解析。但是有个前提首先大家需要理解vue2中普通对象是如何进行拦截的，数组是如何进行数据拦截的，这是前提。普及：先给大家普及下vue2中普通的对象的数"}, {"id": "6844903550930124807", "title": "Virtual DOM的简单实现", "desc": "这是一个简单的Virtual DOM的实现方法，通过将DOM节点映射到VNode对象上，再通过Diff方法对VNode进行比较，得到变化的部分，通过Patch方法再对相应的DOM节点进行更新。"}, {"id": "6950257726832246821", "title": "vue2面试题之虚拟dom", "desc": "vue面试题之如何理解vue的虚拟dom？ 虚拟dom本质上其实是一个js对象，用来描述页面的结构。"}, {"id": "6844904083581730823", "title": "Vue 框架使用时需注意的风格规范及最佳实践", "desc": "1. 给列表渲染设置属性 key 在列表渲染中，key 属性一共有两种作用。 key 的作用主要在 Vue 的虚拟 DOM 对比中，用来比较新旧虚拟节点，Vue 会优先比较虚拟节点的 TagName 和 key。 所以，为渲染列表设置 key 属性可以一定程度上优化 patch…"}, {"id": "6844903879948107784", "title": "揭秘 Vue 3.0 最具潜力的 API", "desc": "vue 3.0 还没有发布，我们没有代码，怎么演示和证明 reactivity api 可以作为 library 来用呢？哼哼，这个难不倒我们。"}, {"id": "6844903665069719565", "title": "由自定义事件到vue数据响应", "desc": "除了大家经常提到的自定义事件之外，浏览器本身也支持我们自定义事件，我们常说的自定义事件一般用于项目中的一些通知机制。最近正好看到了这部分，就一起看了下自定义事件不同的实现，以及vue数据响应的基本原理。 除了我们常见的click，touch等事件之外，浏览器支持我们定义和分发自…"}, {"id": "6844903678315347981", "title": "JavaScript之实现一个简单的Vue", "desc": "vue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vueObject.defineProperty()实现之前我们得先看一下Obje"}, {"id": "6919382164182466567", "title": "vue实现对数组,对象的深拷贝：解决数据关联问题", "desc": "这就是由于对象类型直接赋值，只是将引用指向同一个地址，导致修改了obj会导致obj2也被修改。 所以在vue中，如果多个组件引用了同一个对象作为数据，那么当其中一个组件改动对象数据时，其他对象的数据也会同步改动。"}, {"id": "6844903502951481357", "title": "使用Vue语法渲染你的Koa视图文件？", "desc": "前言Koa是Express团队开发新一代NodeWeb应用开发框架，当你使用她开发你的Web应用时，一件很重要的事肯定就是——怎样渲染我的视图？很多人想，那还不简单，选择一个模板引擎，再找个对应支持该"}, {"id": "6864396298394189832", "title": "Vue3响应式原理剖析", "desc": "通过上面测试代码发现，reactive方法中的对象中如果还嵌套其它对象就不能正确get取值了，下面我们来解决这问题。 通过完善，对象嵌套嵌套对象不能触发get的问题就解决了，下面来建立响应数据和更新函数之间的对应关系。"}, {"id": "6954297424508616718", "title": "vue3.0初体验", "desc": "安装 和vue2.X类似使用vue-cli进行脚手架安装，当然我们一会讲一下vite工具安装 如果没有上述界面说明需要升级你的vue-cli的版本 可以选择Vue 3 Preview，也可以选择Man"}, {"id": "6942504912248897543", "title": "重学Vue【计算属性和监听属性】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 先定义了一个 watchers 和 _computedWatchers 为空对象，然后判断是不是服务端渲…"}, {"id": "6993324514205499400", "title": "《图解Vue3.0》- 第6节 模板语法 - 自定义指令", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 简介 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和"}, {"id": "6844904056314396685", "title": "花括号匹配变量组件实现记录，vue字符串渲染成组件的两种方式", "desc": "将字符串渲染为组件，用 v-html 不就可以了吗？其实是不行的，v-html 只能渲染 html 标签。 对于 contenteditable 设为 true 的可编辑 div，调用 focus 方法后，光标是在第一位的。 要把他放到最后，可以使用 Range 和 Selec…"}, {"id": "6844903496374845448", "title": "vue基于Element构建自定义树", "desc": "做项目的时候要使用到一个自定义的树形控件来构建表格树，在github上搜了一下没有搜索到合适的（好看的）可以直接用的，查看Element的组件说明时发现它的Tree控件可以使用render来自定义节点样式，于是基于它封装了一个可以增、删、改的树形组件，现在分享一下它的使用与实现。"}, {"id": "6844903603329564686", "title": "vue实现2048", "desc": "因为一轮移动中，一个数只能合并一次，所以每个格子要有merged参数来记录是否已经合并过。 因为上移，下移，左移，右移实际上是相同的，写4遍也可以，但是容易出错，所以我直接旋转将矩阵旋转，再进行移动。 以上移为例，只要将矩阵逆时针旋转一次，上移就变成了左移，移动合并成之后，只要…"}, {"id": "6844903913217327111", "title": "Vue 数据劫持", "desc": "定义： 数据劫持，指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果。 writable:如果为false，属性的值就不能被重写。 get: 一旦目标属性被访问就会调回此方法，并将此方法的运算结果返回用户。 set:一旦目标属性被赋值…"}, {"id": "6913741150164058126", "title": "vue造轮子之省份区联动下拉组件", "desc": "在我业务需求中,需要有个省份区城市联动的组件，并且该组件的开发也是基于elementUi原有的效果上面去。在原有的elementui库中并没有这样的组件，所以也只能自己手写一个，效果如下： 1.需要包含国内的省份，省份下面所对应的城市，城市下方所对应的区，街道不做要求。 2.需…"}, {"id": "6970239272611741732", "title": "Vue全家桶学习笔记（二）——过渡、动画效果和指令", "desc": "过渡、动画效果和指令。Vue的过渡效果是通过给操作改变元素的css类别实现的，它和Vue的动画实现方式基本一致。自定义指令能帮助开发者更灵活的使用Vue。"}, {"id": "6913749452868026376", "title": "vue-property-decorator各个装饰器的基本用法", "desc": "1. @Component(options:ComponentOptions = {}) 装饰器 2. @Prop(options: (PropOptions | Constructor[] | Constructor) = {})装饰器 PropOptions，可以使用以下选…"}, {"id": "6965828415857360904", "title": "Vue - 基础", "desc": "Vue.js 核心特性 1. 数据驱动视图 数据变化会自动更新到对应元素中，无需手动操作 DOM，这种行为称作单向数据绑定。 对于输入框等可输入元素，可设置双向数据绑定。 双向数据绑定是在数据绑定基础"}, {"id": "6916697821223583757", "title": "前端活动抽奖组件设计", "desc": "当做一个没有做过的东西的时候，这时候应该分析下完成这个效果需要考虑的问题，然后分解分析，然后逐步实施，分析总结遇到过的问题，是否有没考虑到的。 其实这种抽奖模块在现在的活动页中十分的常见，尤其是在活动页中。 需要写成组件的形式，方便复用，需要考虑组件需要的传递的参数等等。 前端…"}, {"id": "6844903877699960846", "title": "【Vue原理】月老Computed - 白话版", "desc": "今天我们用白话文解读 computed 的工作原理，轻松快速理解 computed 内部工作原理。因为如果你不懂原理，有时候做项目，碰到奇怪的问题，真的不知道怎么回事 \"计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值\" \"我们为什么需要缓存…"}, {"id": "6844903689904193544", "title": "造一个「轮子」musionUI", "desc": "先放上musionUI的代码仓库：musionUI。现在代码尚未写完，大概只完成了30%，持续更新中... 全部代码完成之后会写简单的说明文档。 尚未完成的：无缝轮播、Dialog、Notification通知、响应式导航条、分页、表单验证、Table、图片上传、Sticky、…"}, {"id": "6977760807446642695", "title": "【Vue2.x 源码学习】第二十三篇 - 依赖收集 - 视图更新部分", "desc": "【Vue2.x 源码学习】第二十三篇 - 依赖收集 - 视图更新部分；视图初始化和数据更新时的依赖收集过程；"}, {"id": "6844904132025778184", "title": "备战-Vue篇", "desc": "说到Vue那么最开始我想说到的一个点就是他俩，用了这么久的Vue那么应该要知道他是MVVM软件架构设计模式。 从前端到后端交互，前端请求通过路由找到对应控制器拿到数据，数据交替是单向的。简单来讲就是前端负责页面后端负责数据。 细化了MVC的前端部分，数据直接挂到框架上面直接渲染…"}, {"id": "6862976534248947726", "title": "Vue 2.6 源码分析之旅【5】 —— 模板编译", "desc": "模板编译的主要目的是将模板（template）转化成渲染函数（render）。 因为我们在使用框架中会用到各种各样的指令，变量，表达式，这些显然不是 html 的内容，js 需要对其解析，转化成能够理解的内容，经过处理之后输出结果。当然，手写右边的渲染函数也是可以的，但这显然不…"}, {"id": "6844903957756657678", "title": "Vue中的项目优化", "desc": "对于vue的性能，其本身已经相当OK啦！现在我会针对以下几个方面对Vue中的项目优化进行简单的总结。当然也仅仅是几个小小的注意点哦！ 响应式数据：每个Vue实例都会代理其data对象里所有的属性，只有这些被代理的数据是响应式的，在其数据改变时视图也会随之更新。 在每个vue组件…"}, {"id": "6936345417126936583", "title": "1.手写vue 之  了解数据响应式原理并手写代码", "desc": "理解vue的设计思想MVVM框架的三要素：数据响应式、模板引擎及其渲染数据响应式：监听数据变化并且在视图中更新模板引擎：提供描述视图的模板语法渲染：如何将模板转换为html应用"}, {"id": "6844903662284718088", "title": "Element源码分析系列4-Radio(单选框)", "desc": "官网说的很清楚，这就相当于进行了一个双向绑定，对input输入框的input事件进行监听，当键盘敲下时就实时改变searchText的值，同时修改searchText的值，输入框的value也跟着变化。那么底层是怎么处理互斥的呢？通过查看v-model相关源码 然后第二句:cl…"}, {"id": "6987646025376727076", "title": "组件自定义事件的基本使用和注意事项", "desc": "组件的自定义事件 1.1使用场景： 子组件（传数据） ===> 父组件（接数据） 2.1 基本使用 在父组件中绑定 parent.vue 在子组件中触发 children.vue 3.1 其他语法 3"}, {"id": "6844903926119006216", "title": "两百行代码实现简易vue框架", "desc": "本文主要是通过vue原理及特点自己实现的简易vue框架，和源码相比不乏有些粗糙，但是对于JavaScript功底薄、阅读源码有些困难的同学来说，也算是一种探究vue原理的有效方式。 后续我会继续实现更多的功能，如果有更好的实现方法，也可以一起交流改进，欢迎指教。 1. Obje…"}, {"id": "6984350609092640798", "title": "vue3系列", "desc": "1.vue3设计目标，做了哪些优化 更小 移除一些不常用的API tree-shaking，将无用模块剪辑，仅打包所需要的，使得打包的体积整体减小 更快 主要体现在编译阶段 diff算法优化 静态提升"}, {"id": "6844903496991375368", "title": "[贝聊科技]一个页面阻塞问题的排查过程", "desc": "从今年（2017年）年初起，我们团队开始引入「Vue.js」开发移动端的产品。在某个项目的测试过程中，测试妹子跟我们反馈了一个奇怪的bug：在一个播放音乐的页面中，有一个地方同步显示音乐的当前播放位置；音乐开始播放后，这个地方的内容会不断改变，但是滚动页面后，内容却不再变化，看…"}, {"id": "6953737753322323998", "title": "做个开源博客学习Vite2 + Vue3 （一）搭建项目", "desc": "使用 vite2+vue3 做一个简单的博客。在实战中不断学习进步。代码开源，有在线演示，不管更新中，适合新手学习vue。"}, {"id": "6844904161356546056", "title": "vue+koa2搭建mock数据环境", "desc": "前段时间写了一篇前端vue项目实现mock数据方式的文章，主要是在vue项目里使用mock数据，数据和项目耦合在一起，不太优雅，作为一个有追求的前端，怎么能容忍这种方法呢？特以此篇，记录利用koa2搭建服务端，提供mock数据的方法。 这里以vue项目为主，当然别的类型项目依然…"}, {"id": "6844904083212484622", "title": "vue优化小技巧", "desc": "一般切完图后我会把图片压缩一次，这样可以减小图片的体积，压缩工具我用得是这个 https://tinypng.com/，免费的，而且压缩完分辨率也跟原来差不多，视觉上不会有太大的影响。 一些小图标，做成雪碧图能减少图片请求数据，建议只把那些固定的，后期不会修改的图标做成雪碧图，…"}, {"id": "6844904100362977288", "title": "写一个支持Vue响应式的localStorage插件", "desc": "vue的响应式原理，是为一个对象添加特定的属性描述符，劫持它所有属性的getter/setter。 在这里，我们定义一个对象_storage，遍历它的所有属性，通过官方暴露出的方法——Vue.util.defineReactive，把_storage变成observable了，…"}, {"id": "6844903497415016462", "title": "VueJS 开发常见问题集锦", "desc": "由于公司的前端开始转向 VueJS，最近开始使用这个框架进行开发，遇到一些问题记录下来，以备后用。 主要写一些 官方手册 上没有写，但是实际开发中会遇到的问题，需要一定知识基础。 CLI: Vue-CLI UI: Element HTML: Pug(Jade) CSS: Les…"}, {"id": "6847902220101517320", "title": "在vue项目中使用高德地图MassMarks", "desc": "海量标点，官方文档说，10万以下数据性能都可以很好。实际项目中，真实数据最多7千。自测5万左右的数据性能都是挺好的（坐标转换前）。 调用高德API转换坐标，若需要转换的坐标太多（自测一次性转换1300左右个坐标就会不成功），需要先切割数组，分多次转换后再合并。"}, {"id": "6844904035728932878", "title": "从0到1教你撸一撸webpack4", "desc": "给自己的2019年画上一个完美的句号。 webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模…"}, {"id": "6844904046394867726", "title": "vue从零搭建一个前中后台权限管理模板", "desc": "一. 路由初始化——staticRoutes 二. 动态路由——dynamicRoutes 三. 登录页 四. 路由守卫——router.beforeEach() 五. 前中后台鉴权——authentication() 因为假设我们当前的页面路由是agent/member/in…"}, {"id": "6844903588150378510", "title": "Vue打包优化之code spliting", "desc": "在http1的时代，比较常见的一种性能优化就是合并http的请求数量，通常我们会把许多js代码合并在一起，但是如果一个js包体积特别大的话对于性能提升来说就有点矫枉过正了。而如果我们对所有的代码进行合理的拆分，将首屏和非首屏的代码进行剥离，将业务代码和基础库代码进行拆分，在需要…"}, {"id": "6844903824721707021", "title": "Vue组件库工程探索与实践之构建工具", "desc": "作为《Vue组件库工程探索与实践》系列文章开篇之作，我们从“盘古开天地”说起吧。 从当年的静态页面到如今的 Web App，前端工程越来越复杂，对于一个稍大些的前端项目来说，代码都写在一起难以维护，团队分工协作也成问题。根据软件工程领域的经验，解决这些问题的一个可行思路就是代码…"}, {"id": "6987577901604405284", "title": "vue cli4配置动态地址", "desc": "> 有些资源地址 vue打包之后如果修改需要重新打包，这就很烦，有很多 vue cli2 的参考文档，刚好配置出了 vue cli4 ，在这里记录一下 > > 1. 安装 [generate-asse"}, {"id": "6844903534794637325", "title": "vue+koa2+mongodb点餐系统总结", "desc": "这个项目本来是校内实训，需要用java编写，我负责一部分。但是我不太喜欢用java，且时间足够，就自己独自做了一份，用于学习。 我之前用react，为了熟悉webpack就没有使用脚手架(如yeoman)，深深感受到了babel的复杂，webpack配置的繁琐。用到vue-cl…"}, {"id": "6918988152606556168", "title": "vue拖拽指令——模拟苹果触控球停靠", "desc": "vue元素拖拽指令，结束时模拟苹果手机触控球达到自动停靠效果。 代码流程附带详细注释，文章不再赘述。 把代码重新详细注释了一次，并精简了文章（掘金主题效果很炫）。"}, {"id": "6844903668441956359", "title": "Nuxt中如何使用Vuex-Store异步获取数据", "desc": "Nuxt是一个基于Vue.js的通用型框架，它集成了使用Vue开发的绝大数组件/框架。 1.1 首先现在store目录下新建.js文件，由于业务需求新建了几个模块的.js文件。 在mutations中会接收state作为第一个参数并且可以接收其他传参；（Tips：一条重要的原则…"}, {"id": "6844903809370570759", "title": "Vue入门指南-06 Vue中的动画(快速上手vue)", "desc": "Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。 第一步： 需要把动画控制的元素用一个transition元素包裹起来，这个元素是Vue官方提供的。 第二步： 需要在style中定义你要控制元素的动画效果, Vue官方提供了6个class切换。 注意：…"}, {"id": "6844904042389307399", "title": "vue 下评论实现@ mention提及功能", "desc": "div contenteditable=\"true\"模拟一个textarea。但需要模拟placeholder 一开始我是使用的textarea js 计算高度（微博就是这种方式）， 但是产品要求；评论框要@他人，并且颜色高亮。找了个插件vue-tribute,做到最后一步了，…"}, {"id": "6977002513769693192", "title": "活用async/await，让Vue变得更好用的装饰器", "desc": "这是我参与更文挑战的第15天，活动详情查看更文挑战 下文三个装饰器，都是利用了async/await把异步变成同步的特性实现的。 要求被装饰的方法必须写成async/await，用起来十分方便，实现彻"}, {"id": "6877094911049465869", "title": "使用IoC来管理你的Vue应用", "desc": "假设我们有两个模块：一个实现http请求，另一个实现路由跳转。 在上面的代码中，为了实现登录功能，Login类内部分别实例化了HttpService和RouterService。虽然上述代码可以正常工作，但是不是很灵活。假如修改HttpService需要增加token信息： 此…"}, {"id": "6887952192368541703", "title": "正则表达式学习(二)：Vue模板解析(v-for)", "desc": "本文是在写Vue源码解析：模板编译(二)这篇文章分析到v-for指令处理的时候发现用到了很多正则，就顺带提取来单独分析一下v-for的多种写法1.iteminlist2.(item,index)inl"}, {"id": "6980367503486615566", "title": "vue-element-admin整合SpringBoot实现动态渲染基于角色的菜单资源踩坑录（前后端整合篇）", "desc": "vue-element-admin整合SpringBoot实现动态渲染基于角色的菜单资源踩坑录（前后端整合篇）, 作者两个周末调试踩坑后的干货总结！"}, {"id": "6901598383111159821", "title": "Vue源码解析系列(一) -- 初始化类new Vue", "desc": "可以看到里面有一个function Vue功能类,而且里面加载了initMixin,stateMixin等,这几个方法分别传入了Vue来初始化一些功能。 那我么找到了Vue.extend,可以看出来这不就是实现了一个继承嘛。Sub继承自super，然后return出去。 那么我…"}, {"id": "6901914879641255950", "title": "Vue3.0 Compsition API 详解", "desc": "使用Typescript替换Flow,全面拥抱 typescript，2.x 版本无论用 class component 还是 配置 都不能很好的支持 ts. 通常我们使用 ref() 函数时，目的是为了引用原始类型值，例如：ref(1)。但我们仍然可以引用非基本类型值，例如一…"}, {"id": "6844903773605740558", "title": " Vue 页面骨架屏注入实践", "desc": "作为与用户联系最为密切的前端开发者，用户体验是最值得关注的问题。关于页面loading状态的展示，主流的主要有loading图和进度条两种。除此之外，越来越多的APP采用了“骨架屏”的方式去展示未加载内容，给予了用户焕然一新的体验。随着SPA在前端界的逐渐流行，首屏加载的问题也…"}, {"id": "6844904099310206989", "title": "vue原理依赖收集--watcher", "desc": "前文，有聊到vue中的数据侦测机制（observer），如果实现对监听对象object和数组的数据变化。但是，如果我们只知道数据的变化，也无法及时的把这些数据更新到视图。所以，我们需要收集依赖，等数据更新了，就把收集到的依赖循环触发一遍就好了，这样数据的变化就可以及时更新到视图…"}, {"id": "6844904012827852814", "title": "vue单元测试第一篇：单元测试介绍和基本使用", "desc": "我们一般开发完成后和后端联调时，只会把大体流程跑通，这样就把压力交给QA，但是通过接口把每种情况都测试到是很麻烦到，加入如果QA有漏测情况，就会在线上埋下隐藏的bug。 往往适合加单元测试的代码可读性更好，我们必须要复杂组件拆成更细粒度的组件，把复杂的计算拆成更细粒度的工具模块…"}, {"id": "6970338626181791752", "title": "vue3学习（7）vue3.X细碎知识点总结", "desc": "这是我参与更文挑战的第4天，活动详情查看更文挑战 这篇文章主要分享之前文章没有提及的vue3新增特性，修改，删除的一些细碎知识点，详细可了解vue3官方文档 组件v-model支持参数 在Vue2.x"}, {"id": "6844903638133899278", "title": "全新升级，基于vue-cli3.0 + Element UI 构建的 响应式后台管理系统", "desc": "基于vue-cli3.0 + Element UI 构建的 响应式后台管理系统, 结合 thinkphp5.1 实现RBAC 权限系统."}, {"id": "6844903623063765005", "title": "用webpack4带你实现一个vue的打包的项目", "desc": "一步一步带你实现一个vue的打包的项目，每一个commit对应一个步骤。 初始化项目，用vue-loader来打包.vue文件，html-webpack-plugin插件来导出html文件。 第一步我们很简单，就利用vue-loader 和babel-loader是把.vue文…"}, {"id": "6844904031815499784", "title": "Vue如何实现双向绑定(上)", "desc": "Vue的双向绑定特性一直广受人们欢迎，但是大家知道实现双向绑定的原理吗？这篇文章将给大家介绍实现双向绑定的原理。 MVC即Model-View-Controller的缩写，就是模型-视图-控制器 , 也就是说一个标准的Web 应用程序是由这三部分组成的。 这种MVC架构模式对于…"}, {"id": "6844903721223061512", "title": "vuex 渐进式教程", "desc": "vuex 渐进式教程，从入门级带你慢慢深入使用vuex。 获取store中state的值。如： 想想一下当项目比较大的时候数据繁琐，如果按照上述方法使用vuex,当你打开main.js你看的到场景是比较混乱的，各种数据繁杂在一起，不便于日后的维护。请看下一步： 2.2. 在sr…"}, {"id": "6908614513827381262", "title": "认识虚拟DOM和diff算法", "desc": "一、认识虚拟dom1、在没有vue和react之前，我们都使用的是原生的javascript或jq，我们都是通过操作dom，来达到视图更新的效果。(操作dom->视图更新)2、而在vue中，我们只需更"}, {"id": "6908352185990709262", "title": "Vue 里 computed  和 watch 的区别", "desc": "模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护,例如： 在这个地方，模板不再是简单的声明式逻辑，你必须看一段时间才能意识到，这里是想要显示变量 message 的翻转字符串，当你想要在模板中多次引用此处的翻转字符串时，就…"}, {"id": "6854573209975537678", "title": "Vue知识点总结", "desc": "2. v-cloak 防止页面加载时出现闪烁问题 3. v-text 将数据填充到标签中 作用于插值表达式，没有闪烁问题。 注意：此处为单向绑定，数据对象上的值改变，插值会发生变化。插值变化，不影响数据对象的值 可以给v-bind:class一个对象，以动态地切换class。 …"}, {"id": "6923114254379958280", "title": "小白学习 Vue 2.指令", "desc": "前面学习到了 VUE 的一些基础指令，这节继续学习。 指令 (Directives) 是带有 v- 前缀的特殊 attribute。 指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。 指令的职责是，当表达式的值…"}, {"id": "6994447630436663304", "title": "《图解Vue3.0》- vuex - 第16节 Vuex ", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 简介 是什么 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规"}, {"id": "6844903591493402638", "title": "noah的前端面试题（三）｜掘金技术征文", "desc": "因此事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task…"}, {"id": "6942865361653989384", "title": "vue虚拟DOM核心------patch", "desc": "据上文了解，我们为了节省频繁操作DOM，建立了一个vnode虚拟节点，根据新旧节点的差异，我们才去操作真实的DOM。而关于比较的这个过程，我们就叫patch。"}, {"id": "6844903934532780045", "title": "制作并发布第一个vue组件的npm包", "desc": "在引用后报错无法解析，需要检查webpack.config.js配置的输出文件路径是否与package.json一样。"}, {"id": "6903352209044406279", "title": "创建简单的 Vue 项目", "desc": "1.首先，node.js、git默认已经安装。 那么，你便可以愉快的按照下面的步骤完成初步的 Vue 项目创建了。"}, {"id": "6844903854044086285", "title": "Vue生命周期相关", "desc": "1. Vue生命周期是什么? beforeCreate -- 创建阶段的第一个生命周期函数 当执行到beforeCreate钩子函数的时候,当前的Vue实例的data数据和methods方法,都还没有初始化完成,因此这个函数对开发的实际意义不大. errorCaptured(2…"}, {"id": "6844904085427093512", "title": "在 Vue.js 中使用嵌套路由", "desc": "随着 Vue.js 单页应用（SPA）变得相当复杂，你开始需要 Vue 路由以及嵌套路由。嵌套路由允许更复杂的用户界面以及相互嵌套的组件。让我们创建一个相对简单的用例，来展示 Vue Router 中嵌套路由的实用性。 现在你能从命令行运行 vue 命令了。让我们创建一个名为 …"}, {"id": "6867391920054747144", "title": "Vue基础之组件开发", "desc": "父组件发送的形式是以属性的形式绑定值到子组件身上。 1. 实现组件化布局 3. 实现列表组件删除功能 4. 实现组件更新数据功能 上 5. 实现组件更新数据功能 下"}, {"id": "6928760113029185543", "title": "vue学习篇：深入响应式原理", "desc": "由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此，还是有一些办法来回避这些限制并保证它们的响应性。 element UI tab + table联合使用时，table数据更新，页面视图无更新。 vue实例化的时候之后新增属性，vue并没有对他的se…"}, {"id": "6844904195603529742", "title": "Vue2.6x + Composition-Api + Typescript的仿真时钟", "desc": "clockVue2.6x+Composition-Api+Typescript的仿真时钟源码在线预览模板template绘制逻辑流程画背景drawCircle画数字drawNumber画指针drawH"}, {"id": "6844903623088930830", "title": "技术分享 | Koa框架源码分析", "desc": "koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套， 并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件， …"}, {"id": "6866696079698722830", "title": "Vue2响应式原理解析（二）：计算属性揭秘", "desc": "Hi，大家好~ 在上一篇 Vue2响应式原理解析（一）：从设计出发 中我讲了一下 Vue2 是如何抽象和设计响应式的， data 是如何实现响应式的，包括依赖收集和双向依赖记录的设计思路和关键代码。在这一篇中，我们来一起康康 Vue 中非常强大的响应式功能：计算属性。我主要会从…"}, {"id": "6914648177035608071", "title": "Vue.js开发移动端经验总结", "desc": "移动端适配相对于PC端来说，移动端设备分辨率百花齐放，千奇百怪，对于每一个开发者来说，移动端适配是我们进行移动端开发第一个需要面对的问题。在移动端我们经常可以在head标签中看到这段代码：通过meta"}, {"id": "6973663296956137485", "title": "【Vue2.x 源码学习】第十二篇 - 生成 ast 语法树-流程说明", "desc": "【Vue2.x 源码学习】第十二篇 - 模板生成 ast 语法树；Vue 核心渲染流程回顾；三种模板写法及优先级；两种数据挂载方式；Vue 的原型方法 $mount；compileToFunction"}, {"id": "6908919483474624520", "title": "请简述 Vue 响应式原理", "desc": "一、入口initState()位置src/core/instance/state.js响应式从init开始、init调用initState()初始话状态，initState中调用initData(),"}, {"id": "6915313390508310541", "title": "vue数据劫持", "desc": "在创建Vue实例时，会初始化数据，这时会调用initState方法对各类数据进行劫持。 比如初始化data属性中的数据,会实例化一个Observer对象，然后会对data中的所有属性进行遍历，为每个属性生成其独有的用来收集依赖的Dep实例。然后通过Object.definePr…"}, {"id": "6949812233819914270", "title": "Vue源码分析③ 虚拟DOM", "desc": "Why虚拟DOM？Vue在2.0版本引入虚拟DOM，这被认为是革命性的成果，因为虚拟DOM大大地提高了页面的渲染速度。What虚拟DOM？虚拟DOM是一个JavaScript对象，它是页面中真实DOM"}, {"id": "6932763308487344136", "title": "Vue源码之compile之generate", "desc": "generate 函数⾸先实例化CodegenState然后通过 genElement(ast, state) ⽣成 code ，再把 code ⽤ with(this){return ${code}}} 包裹起来放到render中。 options 是传入的一些判断函数或者指…"}, {"id": "6844903641908789262", "title": "详解Vue Native", "desc": "一家叫GeekyAnts的印度公司开发了Vue Native，基于React Native实现。"}, {"id": "6844903591858307085", "title": "Vue开发库存管理前端页面时一些小经验记录", "desc": "如果出现次数过多，会造成书写麻烦和代码复杂的情况。 解决思路：首先对函数进行抽象封装，封装后利用vue的mixin将其注入到各个vue中。 因为这里的函数是大部分组件中都可能用到的，固利用vue的全局混合。 场景是希望在所有请求的时候添加上加载动画。 首先遇到的问题是，加载动画…"}, {"id": "6949786461277257759", "title": "Vue组件通信方式", "desc": "这篇文章希望从整体上认识Vue的几种通信方式，希望做到快速全面掌握。一、父子组件-props/$emit这种通信方式很常用，也很基础，大家都很熟悉。不展示代码，仅总结用法：父组件->子组件： 父组件"}, {"id": "6844903577215827982", "title": "为什么使用v-for时必须添加唯一的key?", "desc": "两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。 同一层级的一组节点，他们可以通过唯一的id进行区分。基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从O(n^3)降到了O(n)。 当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程…"}, {"id": "6995349936485187614", "title": "Vue系列4 - Vue+store 保存用户登录信息和退出登录 | 8月更文挑战", "desc": "这是我参与 8 月更文挑战的第 12 天，活动详情查看： 8月更文挑战 1.store/index.js 设置 store 里面的user 和token 属性，并给添加getter和setf方法，为其"}, {"id": "6844903573092827143", "title": "mpvue - 美团点评开源的基于 Vue 的微信小程序前端框架", "desc": "mpvue 是一个使用 Vue.js 开发小程序的前端框架。框架基于 Vue.js 核心，mpvue 修改了 Vue.js 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 Vue.js 开发体验。"}, {"id": "6943594325993816100", "title": "Vue性能优化实践合集", "desc": "computed是计算属性，根据已有的变量做一些操作返回新的变量。 在面对computed，watch，method的情况下，能使用computed就尽量使用computed，因为computed具有缓存的功能。 此时我们使用的就是method的方式，当点击按钮改变num的值，…"}, {"id": "6986611059205341221", "title": "vite-plugin-components-支持vue2组件库", "desc": "vite-plugin-components支持vue2生态 迁移组件库 element-ui，view-ui，vuesax到vite的踩坑之旅"}, {"id": "6971755364614144013", "title": "Vue3 源码解析（六）：响应式原理与 reactive", "desc": "今天这篇文章是笔者会带着大家一起深入剖析 Vue3 的响应式原理实现，以及在响应式基础 API 中的 reactive 是如何实现的。对于 Vue 框架来说，其非侵入的响应式系统是最独特的特性之一了。"}, {"id": "6993341672750841869", "title": "Vue 结合 SpringBoot 查询数据库信息", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 在昨天的文章SpringBoot 读取本地txt文件并写入数据库中，我们主要写了后端的处理逻辑，成果就是实现了"}, {"id": "6844903639086006279", "title": "用Vue来实现图片上传多种方式", "desc": "没有业务场景的功能都是耍流氓，那么我们先来模拟一个需要实现的业务场景。假设我们要做一个后台系统添加商品的页面，有一些商品名称、信息等字段，还有需要上传商品轮播图的需求。 我们就以Vue、Element-ui，封装组件为例子聊聊如何实现这个功能。其他框架或者不用框架实现的思路都差…"}, {"id": "6909632635665039367", "title": "vue3实战笔记 | 快速入门🚀", "desc": "vue3正式版已经发布好几个月了。相信有不少人早已跃跃欲试，这里根据这几天的项目经验罗列几点在项目中可能用到的知识点跟大家分享总结，在展开功能点介绍之前，先从一个简单的demo帮助大家可以快速入手新项目🌉 其中context是一个上下文对象，具有属性（attrs，slots，…"}, {"id": "6948312676413997093", "title": "Vue 如何 import 服务器上的js配置文件", "desc": "这个时候你直接引用文件地址自然是行不通的。 在vue.config.js文件里添加externals。 index.html 区分环境并引入js文件。 结束上面的步骤后就可以愉快的引用image-position.js文件了。 在Vue项目的打包体积优化中，cdn加速是常用的一…"}, {"id": "6993353452768362533", "title": "Mustache学习笔记一", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 在初学vue的时候，我就一直在想为什么在<span> Message: {{ msg }} </span>中使用{{}}就可以将msg替代为"}, {"id": "6956014878742020127", "title": "Vue集成融云实现即时通讯聊天室", "desc": "Vue集成融云实现即时通信，让你轻松玩转实时聊天功能。融云 4.x 底层使用 Typescript 进行了重构，对 Typescript 的使用者提供了友好的类型化支持，推荐开发者使用 Typescr"}, {"id": "6961061827245506568", "title": "尤大都说了，别用parcel了。但我还是整出了一款Vue3项目搭建工具parcel-vue-app", "desc": "先放图 弱弱的说一句，我真的错了。不该用parcel~ 前几天，尤大开直播说了造轮子的好处，主要还是锻炼自己。所以自己还是义无反顾地把这个项目搭建工具慢慢地造起来。 这次升级 这次版本是v1.0.5。"}, {"id": "6999156280476565512", "title": "No.22 vue-element-admin 学习使用（十七）修改原生JSON编辑器,支持多语言", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 Markdown 之前提到了markdown组件由于使用了tui-editor库，yarn的时候导致bug，无法使用，就给删除了，之后需要"}, {"id": "7000755088264265759", "title": "vue3学习 --- vue-router(2)", "desc": "vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。"}, {"id": "6985127614922883109", "title": "Vue封装全局注册弹窗组件，实现全局调用。", "desc": "编写一个全局都可以调用的登录注册组件，实现权限控制，只要没登录都弹出此弹窗，主要采用的全局组件注册思想。"}, {"id": "6975666797575929892", "title": "Vue-Router的routes配置", "desc": "这是我参与更文挑战的第20天，活动详情查看： 更文挑战 介绍 在使用vue-router的项目中,实例化VueRouter是其配置选项routes该选项指定路由与视图的组件的关系或者路由与其他路由的关"}, {"id": "6844903785257500679", "title": "vue项目中使用token的身份验证的简单实践  ", "desc": "前端将token保存在本地中, 建议使用localstorage进行保存. 下次对服务器发送请求时, 带上本地存储的token 为通过则返回错误码, 提示保错信息, 然后跳转到登录页. 这里使用axios的拦截器，对所有请求进行拦截判断。 在后面的所有请求中都将携带token进…"}, {"id": "6862206197877964807", "title": "Vue源码解析，keep-alive是如何实现缓存的？", "desc": "在性能优化上，最常见的手段就是缓存。对需要经常访问的资源进行缓存，减少请求或者是初始化的过程，从而降低时间或内存的消耗。Vue 为我们提供了缓存组件 keep-alive，它可用于路由级别或组件级别的缓存。 但其中的缓存原理你是否了解，组件缓存渲染又是如何工作。那么本文就来解析…"}, {"id": "6844904029789634574", "title": "值得关注的 Vue.js开源项目", "desc": "Vue.js 框架是由经验丰富的开发人员创建的，具有可靠的社区支持，丰富的功能，而且是轻量级的。 Vue.js 的另一个大优点是易于理解和学习。可以在 Vue 框架的帮助下创建任何 Web 应用。因此我建议你了解一些 Vue 开源项目。 这些项目中有一些因为其在 2019 年广…"}, {"id": "6936124309253390349", "title": "原来，创作文章没有那么难！ 以文会友，还有大奖拿哦～🎁 ", "desc": "甚至是论文阅读笔记：论文阅读 (009): Real-Time Bidding Algorithms for Performance-Based Display Ad ... 完成 4 篇及以上符合要求的文章即可参与抽奖：可以参与抽奖，10 位，每人 1个搪瓷杯 + 网易云音乐…"}, {"id": "6844903608534695943", "title": "从头开始学习vue-router", "desc": "要学习vue-router就要先知道这里的路由是什么？为什么我们不能像原来一样直接用标签编写链接哪？vue-router如何使用？常见路由操作有哪些？等等这些问题，就是本篇要探讨的主要问题。 这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理…"}, {"id": "6992931115619074079", "title": "VUE绑过来绑过去，有意思吗？", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 v-bind绑定作用：用来将HTML标签中相关属性绑定到vue实例中，通过对vue实例中的数据改变，影响到对应标签中属性值的变化 简化写法使"}, {"id": "6992780861376561182", "title": "[Element Plus 源码解析] Carousel 走马灯", "desc": "一、组件介绍 官网链接：Carousel 组件 | Element (gitee.io)。 Carousel组件也称作轮播图，常用于网站首页进行Banner的轮播展示。 Carousel需要与Caro"}, {"id": "7002030867539296269", "title": "vue基础之自定义组件", "desc": "刚开始学vue的一篇笔记，闲来无事翻出来瞅瞅，顺便整理下，希望可以帮助刚入门vue的同学吧。 先看一个成熟的表单组件的基本功能 html结构： vue代码： 在vue的data中定义数据模型和校验规则"}, {"id": "6917848537686507533", "title": "Vue + qiankun 快速实现前端微服务", "desc": "qiankun 是蚂蚁金服开源的一套完整的微前端解决方案。具体描述可查看 文档 和 Github。 但是在实际的开发过程中，并非如此简单，同时还存在应用间跳转、应用间通信等问题。 代码、文章 持续更新中..."}, {"id": "6979881192367603742", "title": "Vue2源码之渲染原理和异步更新(二)", "desc": "1.渲染原理 1.将更新的功能封装为一个Watcher的类； 2.渲染页面前，会将当前watcher放到Dep类上； 3.在Vue中页面渲染时使用的属性，需要进行依赖收集，收集对象的渲染watcher"}, {"id": "6844904121368051725", "title": "Vue 实用开发技巧", "desc": "1. 长列表性能优化 在2.x版本中Vue会通过Object.defineProperty对数据进行劫持, 以实现双向数据绑定. 但在一些特定的业务场景, 组件只需要进行纯数据展示, 不会有任何变化, 此时我们可能不需要Vue对来数据进行劫持. 在大量数据需要进行呈现时, 如果…"}, {"id": "6844903721558769678", "title": "vue中async-await的使用误区", "desc": "在mounted钩子执行完毕之后才打印，言外之意是使用async/await的钩子内部的异步代码并没有起到阻塞钩子主线程的执行。这里说的钩子函数的主线程是指： 对比实际的打印和期望的打印，就知道问题出在created钩子内使用了await的异步代码，并没有达到我们期望的那种的“…"}, {"id": "6844904042234118151", "title": "vue移动端开发总结", "desc": "相对于PC端来说，移动端设备分辨率百花齐放，千奇百怪，对于每一个开发者来说，移动端适配是我们进行移动端开发第一个需要面对的问题。 通过meta标签对viewport的设置，定义了页面的缩放比例；要了解这些参数的意义，我们需要先知道几个视口宽度的意义。 visualviewpor…"}, {"id": "6933225018335707150", "title": "computed 与watch 的区别", "desc": "当 foo 运行时，会先清空依赖数组 deps ，然后把执行过程中遇到的所有取值操作 this.a 涉及的属性 a 都加入依赖数组 dep 中， 当依赖数组中的值发生了修改，则会重新执行foo函数， 获取最新的计算结果，把计算结果缓存起来并覆盖上一次的缓存结果。其他情况（非de…"}, {"id": "6844904136299773965", "title": "细致分析，尤雨溪直播中提到 vue3.0 diff 算法优化细节", "desc": "其他的.."}, {"id": "6946398860604342286", "title": "✨vue2.6 装饰器，用了就会真香🤣", "desc": "背景：最近把装饰器用在了vue2.6中，发现代码量和复杂度减少了很多，我们先来看一下什么是装饰器，引用了其他人总结的一句话。 先从一个简单需求说起，比如要知道一个方法是否正在执行中、是否执行成功和是否执行异常，正常会如下这个。 接下来开始输出一些对代码有意义的了，继续往下看。 …"}, {"id": "6999196189706944542", "title": "学习vueRouter", "desc": "vue-router实现原理 SPA(single page application):单一页面应用程序，只有一个完整的页面；它在加载页面时，不会加载整个页面，而是只更新某个指定的容器中内容。单页面应"}, {"id": "6907428535510499336", "title": "使用CLI开发一个Vue3的npm库", "desc": "前几天写了一个Vue的自定义右键菜单的npm库，主要讲了插件的设计思路以及具体的实现过程，插件的开发流程没有细讲。 本文就跟大家分享下如何使用CLI从零开始开发一个支持Vue3的库，并上传至npm，欢迎各位感兴趣的开发者阅读本文。 根据Vue官方文档中有关插件的介绍，我们开发的…"}, {"id": "6994998615332634661", "title": "vue+elementUI+table复杂组件封装", "desc": "1.封装el-table组件，实现组件服用，根据配置不同的参数，提高组件的复用性，可以在任何页面，任何场景下自定义表格类型及样式，互不影响 2，组件引用，减少代码量，是前端页面工程化的极大改善"}, {"id": "6994065064319795207", "title": "vue3前端青铜到黄金王者 - 第五个入门v-for循环为奥运加油！", "desc": "今天学习v-for, 展示一下我们的奥运获奖项目。根据内容集合重复渲染展示html标签，也就是遍历迭代。也就是我们网页要渲染很多重复性的组件，比如一个图书网站，重复按照一个结构展示各个图书（或者热门100个图书）。像这里丸子展示的是奥运金牌的最新3个项目的数量。<meta nam..."}, {"id": "6923022184961359879", "title": "使用IntersectionObserver优化图片加载", "desc": "根据元素与视口是否相交，可以进行吸顶、吸底、曝光上报、列表加载更多、图片懒加载等操作。 前面两种需要通过监听scroll事件，为了防止频繁触发，需要做防抖处理。 当元素进入视口时，总是需要延迟一定时间才能执行判断逻辑。 使用IntersectionObserver实现延迟加载非…"}, {"id": "6975696529977933861", "title": "Vue-实用插件  vee-validate插件", "desc": "vee-validate插件 这个插件可以用来在未使用组件库,没有自带好的校验规则时使用,进行表单校验 1.安装 2.导入 3.定义校验规则(最好是在utils文件夹中单独封装js文件导出) 4.使用"}, {"id": "6960854010995671077", "title": "vue组件通信总结", "desc": "以下这些通信方式，有的在开发中几乎用不到，不用去背，所以不用太纠结，也不要有太多心里负担，有个印象就行了，之所以整理纯粹是为了面试过程中可能会问到：vue组件之间有哪些通信方式？ 回答的时候把名字一说"}, {"id": "6998411082263953421", "title": "分享最近学习到的vue开发小技巧，安排~", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 一、优雅的更新子组件props 更新 prop 在业务中是很常见的需求，但在子组件中不允许直接修改 prop，因为这种做法不符合单向数据流"}, {"id": "6856815533749338125", "title": "报告老板，我们的H5页面在iOS11系统上白屏了！", "desc": "时间回到一周前，当时刚开发完公司A项目的一个新的版本，等待着测试完成就进行发布。此时的我也准备从连续多日的紧张开发状态中走出来，以为可以稍稍放松一下。而那时的我还不知道，我即将面临一个强大的Bug选手，更不知道我要跟这个Bug来来回回进行多次的搏斗。当然，我们能看到这篇文章也就…"}, {"id": "7005152663377543205", "title": "响应式系统的基本原理", "desc": "响应式系统 Vue.js 是一款 MVVM 框架，数据模型仅仅是普通的 JavaScript 对象，但是对这些对象进行操作时，却能影响对应视图，它的核心实现就是「响应式系统」。尽管我们在使用 Vue."}, {"id": "6898786367883444232", "title": "Vue3的Ref提案到底发生肾摸事了", "desc": "decorators提案在标准里已经改过两次了，现在还没有定稿。 angular和typescript竟然用了好几年了？ 不合标准"}, {"id": "6963802316713492516", "title": "一文读懂vuex4源码，原来provide/inject就是妙用了原型链？", "desc": "你将学到： 如何学习`Vuex 4`源码、理解`Vuex`原理 `Vuex 4` 和 `Vuex 3` 的异同 `Vue.provide / Vue.inject` API 使用和原理 等等"}, {"id": "6990635815147667463", "title": "vue 项目大屏端适配方法", "desc": "1.适配方式 适配方案采用rem布局， 根据屏幕分辨率大小不同，调整根元素html的font-size， 从而达到每个元素宽高自动变化，适配不同屏幕 2.使用 postcss-px2rem-exclu"}, {"id": "7003223243876204574", "title": "Vue之 .sync 修饰符", "desc": ".sync修饰符可以实现子组件与父组件的双向绑定，并且可以实现子组件同步修改父组件的值。 利用EventBus，子组件触发事件，父组件响应事件并实现数据的更新，避免由子组件直接修改父组件传过来的内容。"}, {"id": "6991861340428042270", "title": "为什么我要封装表单 |  8月更文挑战", "desc": "前置内容 本文起始于这篇我给公司封装的组件帮公司提效了60%｜ 8月更文挑战，文章标题有点夸张了，确实有点标题党嫌疑。最大的问题还不是标题，文章内容确实也有点虚，不过继续阅读这篇文章之前还是建议小伙伴"}, {"id": "6994366152990261261", "title": "浅谈Vue的diff算法", "desc": "概述 diff算法，可以说是Vue的一个比较核心的内容，之前只会用Vue来进行一些开发，具体的核心的内容其实涉猎不多，最近正好看了下这方面的内容，简单聊下Vue2.0的diff算法的实现吧，具体"}, {"id": "7005485993851633695", "title": "vue(四) - vue.js进阶语法", "desc": "自定义指令 指令用于简化 DOM 操作，相当于对基础 DOM操作的一种封装. 当我们希望使用一些内置指令不具备的 DOM 功能时，可以进行自定义指令设置。 自定义全局指令 上图中: Vue: 指的是创"}, {"id": "6844903957807169549", "title": "Vue3 中的数据侦测", "desc": "目前版本单元测试相关情况 vue-next-coverage。 Vue 的核心之一就是响应式系统，通过侦测数据的变化，来驱动更新视图。 通过可响应对象，实现对数据的侦测，从而告知外界数据变化。实现可响应对象的方式： API 本身存在较多问题。 Vue2.x 中，实现数据的可响应…"}, {"id": "6997670497723023390", "title": "vue源码解析之编译过程-含2种模式(及vue-loader作用)", "desc": "vue源码解析之编译过程-含2种模式(及vue-loader作用) 自从上一次内部分享会分享了 vue的diff算法 后，小伙伴们一致对vue的源码感兴趣，那就整吧 注：以下内容只讲了几个关键步骤，个"}, {"id": "6993516763614806052", "title": "Vue3从0到1组件开发-基础组件：Link", "desc": "Link组件，这是一个比较可有可无的组件，但即便是这么一个组件也有学习的地方，也有比较适合使用的场景，没有绝对的无用"}, {"id": "6844903632488366088", "title": "2018上半年掘金微信群日报优质文章合集：前端篇", "desc": "逐步学习什么是递归？通过使用场景来深入认识递归。 前端性能优化之路——图片篇。 今年的文章量比去年又多了好多，看来大家在掘金越来越活跃啦！可以Mark起来慢慢看～不过呢小饼还是建议大家到微信群里看每日小报，毕竟每天消化一两篇会更加有用，日积月累就会有很大的收益。反而积攒到一起的…"}, {"id": "7005461615235563556", "title": "vue3源码之旅-effect", "desc": "更多文章 前言 之前介绍了reactive和ref，接下来就是effect了，effect可以理解为依赖收集的过程，还是通过代码来看一下（简化代码中可以结合index1.html看一下） 简化代码 v"}, {"id": "7002898533598625800", "title": "Vue3项目工程化配置：Prettier + Eslint + husky + commitlint", "desc": "一、背景 最近使用vite创建了一个vue3+typescript项目，需要配置代码格式化和git提交信息规范。 二、Prettier + Eslint 代码格式化 Vue3的开发插件使用了尤大推荐的"}, {"id": "6999886213758861325", "title": "「站在上帝的角度」谈谈Element组件结构-InputNumber", "desc": "这次我们来谈谈InputNumber组件，用户就是上帝，站在上帝的角度也就是站在使用者的角度去看待组件。 用过不少优秀的UI库，用的时候美滋滋，轮到自己搭组件库的时候往往会去..."}, {"id": "7005766299603206181", "title": "vue2常用组件通信方式总结", "desc": "vue常用组件通信方式总结，在使用vue2的过程中常见的组件通信的使用方式，内容不尽完整，有遇到就整理~"}, {"id": "7005893959025164319", "title": "Vue2.0PC官网0到1 | 造轮子之制作一个信息详情卡", "desc": "最近在制作一个基于vue2.0的pc端官网，已经制作了一大半了才想起来可以把制作过程分享出来，这次介绍一个基于vue2.0制作的展示详情的组件，包括图片、标题和具体介绍。"}, {"id": "6996623280027205669", "title": "Vue3从0到1组件开发-搭建一个组件库", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 搭建一个组件库 从零开始的新世界 前面的十几篇文章都是在写组件，但是这个系列的主旨是从0到1开发一个组件库，却从没有写一些如何是把他们成库"}, {"id": "6844904118448816135", "title": "vue-cli3环境上图片加载不出来经验小结", "desc": "本地完全OK，所有图片(svg,png等)都可以正常加载，环境上除了阿里G6的网格加载不出来其他正常。但是突然有一天，环境上除了阿里G6的网格，还有其他表示类型的图片(png)也都加载不出来。 F12可以看到控制台报了XXXContent Security PolicyXXX之…"}, {"id": "6844903620903698439", "title": "如何使用@vue/cli 3.0在npm上创建，发布和使用你自己的Vue.js组件库  ", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 尽管我已经在工作上用了Vue.js一段时间，但我从不需要在npm上发布组件。但最近发现在不同的项目重写组件是件非常蛋疼的事，所以当我第三次使用Vue.js开发项目时，我觉得我们是时候需要一些高度…"}, {"id": "6949561280113934372", "title": "vue2.x响应式原理", "desc": "Object.defineProperty(obj, key, {})缺点1：针对对象属性的删除和新增对象属性，都没有做响应式。 因为defineProperty没办法实现删除和新增的监听；vue中可以通过Vue.delete和Vue.set进行响应式。 Object.defi…"}, {"id": "6953800073402646536", "title": "vue", "desc": "https://juejin.cn/post/6844903876231954446 vue的三大核心知识点： 响应式：监听data属性getter setter (包括数组) 模板编译：模板到ren"}, {"id": "6968442990947893285", "title": "vue实现主题切换的2种思路", "desc": "最近一段时间，一直在做主题方面的工作。以下我对如何使用vue实现多主题的一些思考，希望能抛砖引玉，与诸君分享。"}, {"id": "6904281752546574343", "title": "[Vue深入浅出]知晓Vue中的render函数", "desc": "1.render函数在编写vue单文件的大多数情况下，我们都是使用template模板来创建HTML。然而在一些条件判断比较复杂的场景下，使用JavaScript去描绘HTML的生成逻辑会显得更加的简"}, {"id": "6904835861880569869", "title": "纯Vue手撸简单的表单验证  验证失败回滚动画", "desc": "其实我们在碰到比较长的表单的时候， 一个个字段的判断。 其实是比较麻烦的。一方面复用性不高，而且不是很优雅。所以趁着工作时间空闲之余 。写了一下"}, {"id": "6844903504876683278", "title": "基于Vue-cli和Vux的webpack配置", "desc": "安装postcss和scss还有less，不是我神经病，是引用插件和个人习惯。 转换vux的px为PX，因为weUI没有使用rem，使用的是em和px，但是又不能把它的px给转换成rem，而且vux还有一个1px.less，也不能把它的px转换成大写。但是浏览器不管px是大小写…"}, {"id": "6979131714115207175", "title": "Vue.js 与 Vue.runtime.js", "desc": "区别 Vue.js 是完整版的 Vue，拥有全部的组件，包括编译器。 Vue.runtime.js 是非完整版的 Vue，没有编译器，体积比完整版小 40%，适合给用户浏览器更快地加载使用。"}, {"id": "6953968229224202277", "title": "vue常见问题", "desc": "1.自我介绍1分钟 # 那你能讲一讲 MVVM 吗？ MVVM 是 Model-View-ViewModel 缩写，也就是把 MVC 中的 Controller 演变成 ViewModel。Model"}, {"id": "6979112931862511652", "title": "vue.use 就是给将被调用的组件传入 vue 本身", "desc": "vue.sue 的 demo，自定义组件，通过vue的方式引入，需要定义一个对象（必须包含install函数），或者直接引入函数"}, {"id": "6844904198580994055", "title": "记账项目完成后小结", "desc": "5、height = line-height 时可以实现垂直居中。但是要确定只有一行内容 有些像 Sass 之类的预处理器无法正确解析 >>>。这种情况下你可以使用 /deep/ 或 ::v-deep 操作符取而代之 源代码全部用 TypeScript 实现，用到了装饰器等方法。"}, {"id": "6844903600339025927", "title": "用mpvue实现的微信小程序版cnode社区", "desc": "这个项目没有涉及到太多复杂的部分，主要到是业务逻辑的开发，对于作为一个vue和mpvue小程序入门项目是非常合适的。由于开发时间短，部分代码质量和交互做得不太好"}, {"id": "6844903861409300493", "title": "JS【发布订阅设计模式】在vue中的实际运用", "desc": "这就是发布订阅模式，我相信很多人概念都知道，但是至于在项目中如何实际运用，这又是个大问题。 毕竟设计模式感觉不是很常用，而且即使不用设计模式，也能实现需求，所以下面我着重介绍下，我在vue中碰到的一个需求中是如何使用发布订阅模式。 我这个项目是公司内部的人力资源管理系统。因此需…"}, {"id": "6978881869387399176", "title": "Vue：浅谈 Vue Router 前端路由实现思路", "desc": "Vue Router 前端路由实现思路 前端路由 路由 路由就是分发请求，通过网络把信息从原地址传输到目的地址 前端路由 定义 在一个HTML页面中实现与用户交互时不刷新和跳转页面的同时，为SPA中的"}, {"id": "6978873387565187085", "title": "【Vue2.x 源码学习】第二十六篇 - 数组依赖收集的实现", "desc": "【Vue2.x 源码学习】第二十六篇 - 数组依赖收集的实现：对象依赖收集的总结；数组依赖收集的位置；数组和对象本身做依赖收集；数组中嵌套对象（对象或数组）的递归处理；"}, {"id": "6844903878085836807", "title": "大白话理解和初步使用vuex", "desc": "其实数据不复杂的情况下，method就够用的。数据复杂之后，就有点云里雾里了。当然组件传递数据很麻烦的情况下，vuex也是方便很多。 vuex，其实就是管理数据的，所有数据的变化都必须通过方法add(1)，不能直接xx.a=4这种。然后就是专有名词和具体用法需要记忆了。 vue…"}, {"id": "6844903592827043854", "title": "根据后台参数生成表单", "desc": "具有数据收集、校验和提交功能的表单生成器，包含复选框、单选框、输入框、下拉选择框等元素以及,省市区三级联动,时间选择,日期选择,颜色选择,文件/图片上传功能。 内部重构 新增 省市区三级联动组件 新增 组件事件扩展 优化 文件上传,时间选择等组件 动态显示隐藏表单 动态增加…"}, {"id": "6979024555482284040", "title": "vue 前端绘制带参数的海报", "desc": "vue绘制海报 1.绘制带参二维码，并获取成bse64的图片；2 获取二维码base64图；先创建一个canvas标签，然后再绘制，再生成图片"}, {"id": "6979002815653871629", "title": "将 vue 路由拆分到多个文件( vue-router 目录结构)", "desc": "对于稍微复杂点的项目，我们定义的路由文件，会越来越大，而且所有路由都混在一个页面，看着也很混乱，不清晰。 所以，想把 vue 路由也按功能，类似 laralel 一样，划分为多个路由文件，最终的路由结"}, {"id": "7007252464726458399", "title": "一顿操作，我把 Table 组件性能提升了十倍", "desc": "\bZoomUI 的 Table 组件相比 ElementUI 的 Table 组件在更新渲染方面性能提升了十倍，这是如何做到的呢？"}, {"id": "7007714510186217508", "title": "微前端qiankun（vue）使用教程", "desc": "微前端qiankun（vue）使用教程 前言 目前前端的技术更新迭代是非常快的，2021年年初我才了解到微前端这个概念，可能是我信息不够灵通，如今很多公司已经使用到了微前端技术，至于今天我也学习一下q"}, {"id": "7008037060825071653", "title": "从 0 到 1 开发一个聊天通讯 服务 复盘总结分享", "desc": "来跟着我从 0 到 1 开发一个聊天服务吧！项目是 以 `Vue` 技术栈生态开发的，其实不管用什么`语言` , `思路是关键 ！` 知道每一步需要干什么, 然后将每一步操作 整合起来终服务就跑起来了"}, {"id": "7007706917397233695", "title": "vue3 封装轮播图组件 - 全局封装", "desc": "vue3 封装轮播图组件 - 全局封装 目的 封装轮播图组件，直接使用，拿来吧你 大致步骤 准备my-carousel组件基础布局，全局注册 准备home-banner组件，使用my-carousel"}, {"id": "7007631635386630181", "title": "Vue3封装Toast组件", "desc": "最近在用vue3重构老的项目，遇到了toast组件重写，顺便探索了一番，主要学习了Vant和Element-ui的ui封装方法"}, {"id": "7007551638516793375", "title": "vue打包后在DevTools中显示版本以及打包时间", "desc": "私有化部署项目多起来后，没个用户代码版本不一致，排查bug时候无的放矢，于是把项目构建的时间以及版本号放到devtool中，方便参考对照。"}, {"id": "7007710727725121566", "title": "【建议收藏】101张脑图，从零开始学完Vue3（包括Vue3.2最新语法）", "desc": "🚀最近为了夯实Vue，花了74天，把Vue3完完整整地过了一遍，受益匪浅！📚我将所有笔记整理成此文，共101张脑图，包括了Vue3.2最新的语法，欢迎阅读~"}, {"id": "7007635457936719909", "title": "Varlet-Cli | Vue3组件库快速成型工具", "desc": "Varlet-Cli | Vue3组件库快速成型工具, 快速上手组件库开发, 降低门槛，提升质量..."}, {"id": "7006518993385160711", "title": "还不会Vue3？一篇笔记带你快速入门", "desc": "一直都没有去接触 Vue3，现在暑假时间，就趁这个机会去好好的学习一下，这篇文章就是我之前学习 Vue3 做的笔记，做笔记一方面让自己更加理解和掌握知识点，一方面分享给大家希望能对大家有所帮助"}, {"id": "7007212688866541576", "title": "大前端的逆袭！ Vue + Egg.js + Mysql 的 JS全栈实践。动态菜单，RBAC权限模型，WebSocket实现站内信。", "desc": "大前端的逆袭！ Vue + Egg.js + Mysql 的 JS全栈实践。动态菜单，RBAC权限模型，WebSocket实现站内信。"}, {"id": "7007765756221849608", "title": "Vue3 Ref 语法糖，告别 .value 的写法", "desc": "前言 近期，Vue3 提了一个 Ref Sugar 的 RFC，即 ref 语法糖，目前还处理实验性的（Experimental）阶段。在 RFC 的动机（Motivation）中，Evan You "}, {"id": "7007725841689870366", "title": "如何手动解析vue单文件并预览？", "desc": "开头 笔者之前的文章里介绍过一个代码在线编辑预览工具的实现（传送门：快速搭建一个代码在线编辑预览工具），实现了css、html、js的编辑，但是对于demo场景来说，vue单文件也是一个比较好的代码组"}, {"id": "7007695483908915213", "title": "vue3 文档梳理快速入门", "desc": "一、setup 组合式 API setup 选项应该为一个函数 setup 选项函数接受两个参数： props 和 context setup 选项函数需要返回要暴露给组件的内容 setup 需要使用"}, {"id": "7007731144418394149", "title": "Vue3 + TSX 最佳实践？不存在的", "desc": "本文是《Vue3 + TS 最佳实践 》的补充篇，尝试通过使用 JSX 来达到 Vue3 与 TS 的完美配合。但是……"}, {"id": "7007203118798618661", "title": "原来3D感空间行星轨迹是这样画的", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 背景 点击查看太阳、地球、月亮3D旋转 点击查看太阳、地球、月亮3D旋转源码 中秋佳节即将到来，远在他乡的孩子们马上可以回家和父母一起吃月饼，看"}, {"id": "7005731645911203877", "title": "【评论有奖】由一次业务项目落地 Vite 的经历，我重新理解了 Vite 预构建", "desc": "最近在公司探索落地 Bundless 构建工具，尝试将现有的一些业务项目 从 Webpack 往 Vite 迁移，由于中后台项目一般对浏览器兼容性要求不高，可以大胆引入一些前沿且激进的方案，因此在公司"}, {"id": "7007766325145632804", "title": "Vue是如何监听数组变化的", "desc": "注释：在 Vue 的数据绑定中会对一个对象属性的变化进行监听，并且通过依赖收集做出相应的视图更新 一个对象所有类型的属性变化都能被监听到吗？ 之前用 Object.defineProperty通过对象"}, {"id": "7007920927312707615", "title": "vue源码学习（8）：codegen如何将ast语法树转换成render字符串？", "desc": "我的vue2.x学习心得 vue的compiler中，我们编写的vue语法如何转换成从ast语法树转成render字符串？"}, {"id": "7007011750746783757", "title": "vue3+typescript 实现一个中秋RPG游戏", "desc": "想去制作一个中秋节相关的页面,首先技术栈接地气并且跟的上目前的新技术,所以我考虑使用Vue3+Typescript,其次是中秋主题,我想到的是嫦娥奔月的故事,考虑加上剧本和动效,让它显得更具游戏性!"}, {"id": "7007958664732475423", "title": "Vue（v2.6.14）源码解毒（四）：更新策略", "desc": "之前介绍过初始化时 Vue 对数据的响应式处理是利用了Object.defifineProperty()，通过定义对象属性 getter 方法拦截对象属性的访问，进行依赖的收集，依赖收集的作用就是在数"}, {"id": "6844903903968903175", "title": "面试必备的13道可以举一反三的Vue面试题", "desc": "首先,上述类型的面试题在文档中可查,没有比官方文档更权威的答案了,其次这种问题没有太大价值,除了考察候选人的记忆力,最后,这种面试题只要用过vue的都知道,没有必要占用我们的篇幅. 我们的问题并不多,但是难度可能会高一些,如果你真的搞懂了这些问题,在绝大多数情况下会有举一反三的…"}, {"id": "6981083988286767117", "title": "一份 ElementUI 问题清单", "desc": "一份日常开发中遇到的 ElementUI 问题清单以及解决办法，做个记录，也分享给遇到或没有遇到的人。"}, {"id": "7004037587992051725", "title": "Vue数据响应式原理", "desc": "Vue数据响应式原理 什么是响应式? Vue最独特的特性之一，是其非侵入性的响应式系统。当数据发生变化后，视图会重新更新。 如何追踪数据的变化 当把一个JavaScript对象传入Vue作为data的"}, {"id": "7002187290134970375", "title": "Vue3 中指令参数支持动态参数", "desc": "Vue3 中指令参数支持动态参数 在Vue3 的 RFCs文档中,Vue3中指令参数将支持动态参数。 基础示例 为什么要这么做 在Vue3.0之前，Vue中的指令参数都是静态设置的，当然也可以通过Ja"}, {"id": "7002189655248470052", "title": "Vue：基础语法、双向绑定、组件", "desc": "一、基础语法指令 1、v-bind 我们已经成功创建了第一个Vue应用。看起来这跟渲染一个字符串模板非常类似， 但是Vue在背后做了大量工作。现在数据和DOM已经被建立了关联， 所有东西都是响应式的。"}, {"id": "7002078558902288392", "title": "v-for循环中使用require或import关键字引入本地图片", "desc": "问题描述 我们做项目中，常常需要把图片呈现到页面上，一般来说有以下几种方式 方式一（后端返回图片URL） 这种方式就是后端返回图片的url地址，我们直接img标签的src属性绑定imgUrl即可。如下"}, {"id": "6986533364438138894", "title": "前端历史项目的 Vite 迁移实践总结", "desc": "当前，前端社区用 Vite 替代 Webpack 的呼声正日趋高涨。但对于长期维护的业务项目，很多同学可能仍然对上车存有疑虑——Vite 真的足够支撑非玩具级的项目吗？为此本文会分享一个实际案例"}, {"id": "6986550573252214821", "title": "动画搞懂petite-vue", "desc": "最近Vue家族再添新丁，petite-vue。 特点 打包后只有5.7k超小超轻。相比竞争对手Alpine.js精简"}, {"id": "7004000204655427597", "title": "徒手搞定Vue + Webpack配置，不用Vue-CLI", "desc": "现在我们开发Vue项目几乎都是用Vue-CLI去创建项目，因为它提供了几乎我们所有需要的功能，不再需要我们去自己配置像webpack、eslint、sass/less、unit test/e2e te"}, {"id": "6913774120404516871", "title": "别再费劲去找后台的前端框架了，2021 年就用 Fantastic-admin 吧", "desc": "如果你搜索 vue admin 会得到 13120 个仓库，如果用 vue 后台 会得到 7596 个仓库，如果把两者结合一下，搜索 vue admin 后台 也还是能得到 2719 个（以上搜索统计截止至 2021/1/2）。 后台框架这么多，Fantastic-admin …"}, {"id": "7002103660687654943", "title": "迟到的Vue3学习报告", "desc": "前言 Componsition API Setup 参数 props, context context emit ：触发自定义事件使用，后面组件传值时，会有讲到； slots：访问 slots 时，如"}, {"id": "7003545112282316836", "title": "vue3单文件组件中的style特性", "desc": "简述vue3单文件组件中的style特性。合理使用可以让代码更优秀...使开发者做更少的工作...我吐了。摘要的50字真恶心"}, {"id": "7000688749017317407", "title": "再聊Vue的TSX函数式组件", "desc": "前几天发了一篇《DevUI中VUE的TSX函数式组件实践》，主要讲如何使用tsx，在Vue3中实现函数式组件的写法。 这里再追述一些内容。 使用TSX的原因 代码质量约束 使用ts，可以提高开发侧代码"}, {"id": "7004107979389665310", "title": "前端分享--Vue高频知识点（详解）", "desc": "1. Vue的优点？Vue的缺点？ 优点：渐进式，组件化，轻量级，虚拟dom，响应式，单页面路由，数据与视图分开（MVVM模型） 缺点：单页面不利于seo，不支持IE8以下，首屏加载时间长 2. MV"}, {"id": "6844903550552637454", "title": "技术胖155集前端视频教程-全部免费观看", "desc": "大家好，我就是技术胖，2017年我在下班时间录制了200集左右的视频教程，现在贡献155集免费观看，希望可以帮助前端小伙伴学习（点击下面链接免费观看）。需要说明的是本人还是一线奋战的前端程序员，不是专业讲师，所以教程难免有所纰漏和错误，还请多多理解和指正。这些视频都是本人原创，…"}, {"id": "7002239712677068831", "title": "Vue3从0到1组件开发-业务组件：断网重载", "desc": "功能介绍 2021年的现在，5G网逐渐普及， 对我们普通人而言，5G以手机为突破口冲进了我们的生活，它给我们最直接的第一印象就是比4G更快"}, {"id": "6969226302767235108", "title": "手把手教你玩转render函数「组件封装-dynamic-input」", "desc": "对于插槽解析这一块我们需要注意一下，官方文档对于render函数写slot没有列子，对于怎么去实现这一块也写的很晦涩，需要注意的是render函数中的第三个参数是描述当前组件的子内容，虽然slot是当"}, {"id": "6980295388079063048", "title": "$nextTick详细讲解保证你一看就明白", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！在修改数据之后,然后等待 DOM 更新后在执行"}, {"id": "6929839648542425102", "title": "Vue 包大小优化--从 1.72M 到 94K", "desc": "1. 代码混淆 2. 资源放到 cdn 3. 无用库删除 4. gzip 压缩 5. 第三方库放到 cdn"}, {"id": "6844903845642911752", "title": "Vue 组件间通信六种方式（完整版）", "desc": "组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系： 如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。 针对…"}, {"id": "7007235040526467085", "title": "升级vue及elementPlus", "desc": "遇到一些莫名其妙的问题时，升级vue版本和所使用的UI框架版本是非常有用的 1，升级vue （官方提供的命令） 对于 Vue 3，你应该使用 npm 上可用的 Vue CLI v4.5 作为 @vue"}, {"id": "7005770907754954759", "title": "侦听器和计算属性的比较（纯概念）", "desc": "特点和区别 Vue的computed选项主要用于同步对数据的处理，而watch选项主要用于事件的派发，可异步； 这两者都能达到同样的效果，但是基于它们各自的特点，使用场景会有一些区分； compute"}, {"id": "7004815007393251335", "title": "vue-lazyload 图片懒加载", "desc": "vue-lazyload 解决了什么问题（项目常用） 可以想象一个网页打开有成百上千的图片需要加载，页面会变得非常的卡顿，此时如果只是可视区域的图片加载，其他的图片可以暂时有一个占位loading图"}, {"id": "7000975633450795022", "title": "通过一个案例，彻底理解Vue中 sync 修饰符", "desc": "为了深入理解，我们需要两个组件 myDialog.vue(对话框组件) 与 test.vue。其中 myDialog.vue 为子组件， test.vue为父组件。 需要完成的功能：当我们点击父组件的"}, {"id": "6984711905604550692", "title": "Vue3 使用路由VueRouter4", "desc": "安装 使用 router.js main.js App.vue 一个小提示 如果你的 App.vue 模板只有 <router-view></router-view> 时， 可以吧 <router-v"}, {"id": "6854573213059481607", "title": "Vue完美记住滚动条和实现下拉加载", "desc": "当我们在开发 web app 的时候，经常会遇到一个问题，就是当从一个可滚动的列表页进入到下一个详情页面，然后返回列表页面的时候，很难去还原滚动条的状态，无法记住进来时候的位置。 后来我参考 keep-alive 开发了 vue-page-stack 来保存 Vue 页面的栈，…"}, {"id": "6903171037211557895", "title": "Vue3教程：Vue 3.x 快在哪里？", "desc": "人云亦云，并不会让你变得有多优秀，而会让你越来越随大流。 当你和别的开发在聊到 Vue 3.0 版本发布，有哪些亮点时，你的答案之一肯定有“它变得更快了，性能上快了 1.2 ～ 2倍”。 那么我就想问你，是什么让 Vue 变快了，尤大已经在 beta 版的线上直播上告诉了我们答…"}, {"id": "7005394754238152740", "title": "新建vue项目详解版", "desc": "最详细的保姆级vue项目搭建教程，vue项目 1.新建文件夹，文件名最好是要开发的工程名 2.在vscode或其他编译器的终端cd到对应目录： 3.在此目录下执行vue create .命令，“.”"}, {"id": "7003176094446649380", "title": "配置vue-pc本地服务", "desc": "启动 phpstuday 中的 mysql 服务(如果没有自行百度下载phpstuday安装即可) 打开 Navicat Premium 导入项目需要的数据库 点击连接 => mysql (用户名默认"}, {"id": "7002786770190336030", "title": "vue3.0配置vue-i18n", "desc": "项目安装vue-i18n 需要安装最新版的vue-i18n 或者用yarn 安装完成之后，可以看一下package.json文件；看是否是最新版的vue-i18n，我安装的是9.1.7。 在项目src"}, {"id": "6931234988281036807", "title": "花五分钟重新认知 Vue 项目 src 目录", "desc": "Sennder：欧洲排名第一的全卡车装载数字货运代理平台。 认知一个项目从认识目录开始！Vue 项目那逃不过认知最通用的 Vue CLI 目录结构。 原因是：我们应该花更多的精力去关注 src 文件夹！具体往下看。 静态文件目录：包含字体、图标、图片、样式等静态资源，不做赘述。…"}, {"id": "6996854230539567134", "title": "VUE3之setup()和 ref()函数 的学习，安排~", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 setup()和 ref()函数 setup ref reactive与生命周期 参考博客 https://blog.csdn.net/q"}, {"id": "6844904032411074568", "title": "Vue电商项目-商品飞入购物车特效实现", "desc": "各位掘友,好久不见,最近利用工作之余开源了Vue电商项目,高仿某知名O2O买菜平台,整个项目做下来收获还是蛮多的,可以扫描下方二维码体验,本篇是项目的核心知识拆解篇,主要是拆解增加商品飞入购物车的实现过程。 整个项目采用vue-cli3脚手架搭建,Vue全家桶(vue、vuex…"}, {"id": "6997677838111342628", "title": "VUE3.0教程(1)", "desc": "PS:自己记录用 看过官网的可忽略哦 创建一个应用实例 在应用中注册“全局”组件 应用实例暴露的大多数方法都会返回该同一实例，因此允许链式 根组件 mount 不返回应用本身,返回的是根组件实例 v-"}, {"id": "6914862150872170509", "title": "如何充分利用Composition API对Vue3项目进行代码抽离", "desc": "然而，这项目只是实现了一些功能，但我感觉并没有很好地利用Composition API去对代码进行整合管理。要知道，Composition API的出现就是为了解决Options API导致相同功能代码分散的现象，也有很多大佬对其做了很多的动画展示（这里我借用一下大帅搞全栈大佬…"}, {"id": "7000989988528029703", "title": "vue组件间通信(props、$ref、$emit)函数讲解", "desc": "组件是 vue.js 最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。那么组件间如何通信，也就成为了vue中重点知识了。这篇文章将会通过props、$ref"}, {"id": "6844904168885321736", "title": "Vue中Axios的封装管理", "desc": "VueAxios封装定义特性支持PromiseAPI拦截请求和响应转换请求数据和响应数据自动转换JSON数据客户端支持XRSF回归正题开始安装axios封装http.js配置多域名请求不同URL到现在"}, {"id": "6892017198450081800", "title": "又是一夜，这篇Composition-API实操还觉得短吗", "desc": "但是很快我们又蒙圈了，这个组件实例和我们以前熟悉的this不一样，直接访问this.foo还是找不到数据。 当然坑还是有的，你仔细观察这个ctx，发现它不是一个Proxy对象，也就是这位兄台只有值却没有响应性，所以如果要利用响应特性，还得用proxy这个属性返回上下文对象，如果…"}, {"id": "6970877981778509838", "title": "nextTick 方法 | Vue", "desc": "nextTick 方法 Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新"}, {"id": "6986833880460296223", "title": "中国人中庸之道，中国人造的框架呢？", "desc": "大家好，我是卡颂。 都说中国人讲究中庸之道，中国人造的框架讲究么？ 本文会从原理层面讲解Vue是如何在运行时与编译时之间保持中庸的平衡。 UI = fn(state) 几乎所有前端框架工作原理都能用如"}, {"id": "6901231253102526477", "title": "vue组件中节流函数的失效和解决", "desc": "今天使用节流函数的时候遇见了一个问题，搞了半天才找到原因，所以在这里做个总结。 浏览器的一些事件，如：resize，scroll，mousemove等。这些事件触发频率太过频繁，绑定在这些事件上的回调函数会不停的被调用，加重浏览器的负担，导致用户体验非常糟糕。所以先贤们发明了节…"}, {"id": "6905409280761921543", "title": "vue3.0是如何实现插件封装的？", "desc": "最近公司有一个新的项目，项目框架是我来负责搭建的，所以果断选择了Vue3.x+ts。vue3.x不同于vue2.x，他们两的插件封装方式完全不一样。由于项目中需要用到自定义提示框,所以想着自己封装一个。vue2.x提供了一个vue.extend的全局方法。那么vue3.x是不是…"}, {"id": "6986812469796667399", "title": "Vue-RSA 非对称加密传输，万千方法取其一", "desc": "用 jsencrypt.js  官网http://travistidwell.com/jsencrypt/ 装好后在vue文件里引用 首先，你得有一对公钥和私钥，有在线生成器，我们先来一对"}, {"id": "6987576416359415816", "title": "vue-router的顶级路由为什么创建了5个vue实例？(最大的_uid=4)", "desc": "问题描述 最近在看vue-router源码的时候，发现了一个问题：项目里的第一个路由，启动的时候竟然已经创建了5个vue实例了。跟随着好奇心，对代码进行研究后发现结果： vuex创建了两个vue实例，"}, {"id": "6844904180801339406", "title": "记 vue-cli 项目首页加载速度慢的有效优化", "desc": "配置webpack 来分离 echarts webpack/externals使用详解. 4. gzip暴力压缩"}, {"id": "6844903503983280135", "title": "前端表单进阶之路：通过 Vue.js 实现表单可配置化", "desc": "作为现代网页中最早具有逻辑的部分，表单至今仍在博客类、分类信息以及论坛等以用户发布的信息为核心的网站中，扮演着重要的角色。对这些网站来说，表单意味着信息的初始来源，因此它实际上承载了对于信息处理的第一手逻辑。对于不同的类目，表单的内容显然在业务上需要进行区分，所以，如何实现表单…"}, {"id": "6968063117859241992", "title": "vue3+ts实现自定义指令v-click-outside", "desc": "介绍clickoutside 当我们开发一个dropdown组件或者有这么一个场景，点击一个button，打开一个浮层来展示一些不常用信息，当我们想关闭它的时候，我们不希望只能通过点击"}, {"id": "6885134945929412615", "title": "【图文并茂，点赞收藏哦！】重学巩固你的Vuejs知识体系（下）", "desc": "置身世外只为暗中观察！！！Hello大家好，我是魔王哪吒！重学巩固你的Vuejs知识体系，如果有哪些知识点遗漏，还望在评论中说明，让我可以及时更新本篇内容知识体系。欢迎点赞收藏！ 首先：new Vue(),new一个Vue的实例，Observe data数据查看，init Ev…"}, {"id": "6939829095123386405", "title": "基于 Vue CLI 搭建脚手架。", "desc": "本文作者：阿商、周泽斌、高智恒脚手架的目标统一化：统一模块输入输出能够快速生成适用于自身的新项目的目录模板（项目脚手架）。提升开发效率，减少相同功能的组件重复开发（模块脚手架）。标准化：建立模型标准，"}, {"id": "6984992163981426724", "title": "VUE开发小技巧：hover出来的图标使用ElementUI的dropdown", "desc": "👀当我们把鼠标移动到某个区域，hover显示出功能图标后，我们点击图标弹出功能菜单，但当鼠标移出hover区域或者移动到弹出的功能菜单时，原来的功能图标消失了，不想消失怎么办~👻"}, {"id": "6882672820401209351", "title": "Vue3.0时代你必须了解的：响应式原理", "desc": "Vue3.0已经发布了，更新了一系列东西，其中包括用「Proxy」取代 「Object.defineProperty」。今天我们就开门见山，直接来聊聊关于新的响应式的原理和优点。 vue2.x的响应式原理就是利用这个api对数据的读取和赋值进行监听和拦截。 但是其中有个吐槽最多…"}, {"id": "6844903657083797512", "title": "改造vue-cli，让它更好用", "desc": "vue-cli是一个整合了webpack+vue的脚手架，通过这个脚手架，我们可以很方便地创建一个vue项目，甚至引入了vuex和vue-router。webpack的配置对用户来说是透明，用户无需关注webpack的详细配置，从而提高开发效率。 那么vue-cli真的很好用吗…"}, {"id": "6868898254156333069", "title": "vue+node.js手把手教你搭建一个直播平台（前言+准备工作）", "desc": "在前端，我猜小伙伴们做的第一个项目大多数都是跟购物商城/论坛相关的吧。帅气的小羽也不例外，大学期间的第一个项目也是商城，嗯，我们都一样。是不是有一种很腻的感觉，完全没有新意？那现在就让帅气的小羽带你走出这种感觉，手把手教你搭建一个直播平台！！！ 嗯，俗话说的好，磨刀不误砍柴工，…"}, {"id": "6979161115859255304", "title": "vue-ssr服务端渲染透析", "desc": "这是我参与更文挑战的第29天，活动详情查看： 更文挑战 背景 spa单页面seo不友好，因为vue的话是只有一个HTML页面，实现页面的切换是通过监听router进行路由分发，结合ajax加载数据进行"}, {"id": "6927906689081409544", "title": "Vue3你还在用Vuex？一个“函数式”状态管理的新思路", "desc": "vue3已经出来挺长一段时间了，我最近也在公司的一个项目中充分使用了vue3的特性。相比vue2，vue3的整个的编码方式有不小变化，如果要写出简洁优雅的代码，可能还是需要一定的时间去摸索。在摸索的过"}, {"id": "6912308157997907982", "title": "让el-table更好用，通过配置的方式", "desc": "element-ui虽然有el-table组件，但是仍然需要手动写el-table-column。 这里希望进一步抽离配置，在 el-table的基础上封装个enhanced-el-table组件。 综上，enhanced-el-table组件的大概就出来了。 el-table…"}, {"id": "7001472519702052878", "title": "踩坑：一场由 vue-template-babel-compiler 插件 bug 引发的血案", "desc": "关键词： 可选链操作符、vue-template-babel-compiler、vue 插槽、v-for 最近在项目中遇到一个莫名其妙的 bug，其牵扯的知识点比较多，也耗费了我不少时间来排查问题。"}, {"id": "6844904134836125709", "title": "尤雨溪谈Vue3.0新特性直播后的个人理解", "desc": "我个人对Vue3的体验感受是非常好的，RFC讨论新API的时候，我认为通过少量的API的学习成本，或许可以得到更好的体验。这是非常棒的事情，但在未发布之前我是仍然保持中立的，对于框架的更新改版我的理解就是：解决前代被人吐槽的地方，优化性能，缩小体积，更强大的功能。通过这次直播，…"}, {"id": "6844903911669628941", "title": "Vue原理解析（六）：全面深入理解响应式原理(上)-对象基础篇", "desc": "vue之所以能数据驱动视图发生变更的关键，就是依赖它的响应式系统了。响应式系统如果根据数据类型区分，对象和数组它们的实现会有所不同；解释响应式原理，如果只是为了说明响应式原理而说，但不是从整体流程出发，不在vue组件化的整体流程中找到响应式原理的位置，对深刻理解响应式原理并不太…"}, {"id": "6985448930754428958", "title": "vue插件开发", "desc": "插件开发的目的 目的:为了代码的复用，项目的快捷开发。 参考vue官方文档 开发插件的几种方式 添加全局方法或者 property。 添加全局资源：指令/过滤器/过渡等。 通过全局混入来添加一些组件选"}, {"id": "6968437025964261407", "title": "微信浏览器,ios，安卓无法显示地址栏动态title", "desc": "需求： 在公众号中进入不同的详情页，显示不同的活动title，安卓、ios显示后消失。 开始思路： 设置document.title 设置当前页的title，在h5中显示正常，但是在ios、安卓不行。"}, {"id": "6844903568638476301", "title": "网页图片加载优化方案", "desc": "饿了么 App 中新零售项目主要是以图片展示为主，引导用户点击轮播广告栏或者店铺列表进入指定的商品页面，因此页面中包含了大量图片，如搜索框下面的轮播广告栏、中部的促销栏以及底部的店铺列表，这些区域中都有大量的展示图片。因此图片的加载速率直接影响页面的加载速度。下面将从图片加载存…"}, {"id": "6844903958566141966", "title": "蹭波热度--一步步实现 vue3 的基于Proxy的MVVM", "desc": "vue3的mvvm实现原理是基于Proxy实现的，可比vue2的Object.defineProperty简明扼要很多，也很巧妙，demo不难，一步步实现吧，总共就一个js文件，不超过100行代码，要什么自行车。"}, {"id": "6844903548858138631", "title": "全新打包工具parcel零配置vue开发脚手架", "desc": "parcel-plugin-vue这个插件会通过vueify来生成对应的代码，parcel会自动加载parcel-plugin开头的依赖。 只需要执行npm run dev 和 npm run build 就可以进行开发和构建。"}, {"id": "6844903635189497869", "title": "Vue 的异常处理机制", "desc": "最近需要在业务中加一个全局的 filter，filter 会对输入进行验证，用于进行前端监控。其中一个要处理的问题，就是验证失败后如何发送异常日志，这个过程中顺便了解了一下 vue 的异常处理机制。 vue 提供了两个 API 用于异常的捕获，分别是 errorCaptured…"}, {"id": "6980251575029596190", "title": "Vue3之Class绑定", "desc": "操作元素的class列表是数据绑定的一个常见需求。因为是attribute，所以我们可以用v-bind处理它们：只需要通过表达式计算出字符串结果即可。但是，字符串的拼接麻烦且容易造成错误，所以Vue."}, {"id": "6913168382304976910", "title": "【vue3】自己动手实现一个mini-vue（上）", "desc": "预期目标：通过watchEffect注册变量值改变后的回调函数，当变量值改变时触发。举个简单例子，下面的代码输出10 20 创建类Dep，一个变量对应一个Dep。监控的值保存在其value属性上，回调函数保存在其effects属性上，然后使用getter,setter进行拦截；…"}, {"id": "6844903890681528333", "title": "ElementUI 源码简析——Basic 篇", "desc": "布局组件中的父组件，用于控制子组件。很简单的一个布局标签，主要通过 justify 和 align 控制子元素的对齐方式，使用 render 函数通过传入的 tag 属性控制生成的标签。 在这里推荐学习下 render 函数和 JSX 的写法，因为之后比较复杂的组件都是通过 r…"}, {"id": "6844903778773106696", "title": "【译】Vue 的小奇技（第四篇）：Vue.js 2.6.0 中的新指令 v-slot", "desc": "很开心见到大家这么喜欢 VueDose 的教程，最近我收到了让我惊讶的关于性能提升的反馈，我非常感激读者们的支持和赞扬 🤗。 上周 Vue.js 的 2.6.0-beta.3 版本已经发布，其中包含了进一步简化作用域插槽的新特性。 这篇文章介绍了 vue 的新指令 v-slo…"}, {"id": "6972176432323624967", "title": "【Vue2.x 源码学习】第八篇 - 数组的深层劫持", "desc": "【Vue2.x 源码学习】第八篇 - 数组的深层劫持；数组深层观测的实现；对数组进行 observe 递归观测操作；实现数组中嵌套结构的劫持，即数组嵌套数组、数组嵌套对象；"}, {"id": "6844903552020643853", "title": "基于 Vue 2.x 的日期选择组件", "desc": "A simple datepicker component based Vue 2.x. Install the pkg with npm: or yarn More demo to visit here. MIT"}, {"id": "6972153658402144287", "title": "摸索发布 vue 组件库到 npm", "desc": "本人想基于element-ui 构建一个公司需要的组件库，遂做了如下研究，正在进行优化中，使其越发完善。"}, {"id": "6910211807571345421", "title": "数据可视化之模块边框绘制，Vue3组件实现", "desc": "《数据可视化之模块边框绘制，以及组件开发》介绍了css3中关于borderImage的相关配置，并且实现了一个border图片渲染的插件。其原理也是相当简单，这里就不过多赘述了，今天要做的是实现Vue3的组件(图片边框渲染通用组件)。 码云组件库，我把写的一些组件放在这个下面，…"}, {"id": "6844903552859684877", "title": "Vue中容易被忽略的知识点", "desc": "在反复阅读文档的时候，发现有些容易忽略的地方，遂记录之。"}, {"id": "6844903837648732174", "title": "如何获取 vue 单文件自身源码路径", "desc": "这个问题要从一个想法说起。 作者老李，想在页面右下角加个 Toggle 点击，跳到当前页面源码对应的 github 页面。 确实很实用的功能，D2Admin 的 Demo 页面太多了，想看某个页面的源码，对于不熟悉项目目录结构的新手很不友好。 目前经历了三个方案，最终目标是把自…"}, {"id": "6898684829848567822", "title": "我该如何实现类似微信的悬浮按钮", "desc": "背景：依附在手机右侧，并且移动的时候显示成圆形，并且在屏幕左边松下手指的时候则依附左边，屏幕右边松下手指的时候则依附右边状态拖拽完成状态拖拽中状态一般来说，做一些需求的时候，都会先梳理好会有几个状态，"}, {"id": "6844903953189044231", "title": "vue轮播组件实现，$children和$parent，附带好用的gif录制工具", "desc": "2、忍不住想要为小米正名，虽然我是米粉但是我是理智粉。 24号不是mix alpha发布会啊，看了真滴是惊艳（现场直接有人喊“牛逼”，看过好多发布会，就没有看到这样直接喊出来“牛逼”的）。不知道大家还记不记得13年那会吹苹果的时候的一块ppt手机（其实是媒体做的图），但是现在小…"}, {"id": "6844903878647873549", "title": "vue-cli3 项目优化之多项目共用配置、组件动态打包node命令", "desc": "实际项目最终可能会有很多的页面或者组件共用。但是又因为其中一些需求的特殊性，又不能把两个项目完全合并在一起。 于是百度了一番，整出了两个项目功用一套配置和公用组件，通过node命令控制预览、打包结果。 也有想过把公用组件部署到私有的cnpm上，但其中有很多还是涉及到公司业务方面…"}, {"id": "6918924172844335111", "title": "typescript在vue2项目中的使用方法", "desc": "项目配置在此不再做说明，本文是为了让新手更快熟悉ts在vue2.x中的使用。以下默认读者已掌握vue的基础开发。一、vue模板设置在改造.vue文件前，我们需要安装一个插件vue-property-d"}, {"id": "6918916583100252173", "title": "vueX 整理", "desc": "今天来讲解作为vue全家桶之一的 VueX。 说白了，就是让多个组件共用一套数据，避免使用繁琐的的bus模式。"}, {"id": "6859743742245650445", "title": "从源码学习Vue.js系列 -- keep-alive", "desc": "keep-alive 是 Vue 的一个内置组件，它可以讲组件实例保存在内存中，组件的切换并不会将保存的组件实例进行销毁。 keep-alive 提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。这两个属性中的值可以是以逗号分割的字符串、数组或者正…"}, {"id": "6844903584933363725", "title": "vue插件-(elementui-dropdown)开源包的开发和发布", "desc": "在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。 页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。 帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。 结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作…"}, {"id": "6863664455935983630", "title": "[翻译] vue3指南-03应用实例", "desc": "After the instance is created, we can mount it, passing a container to mount method. For example, if we want to mount a Vue application on …"}, {"id": "6883736222481514504", "title": "Vue源码之vm._update和vm._render两兄弟", "desc": "上面最关键的是 render ⽅法的调⽤，我们在平时的开发⼯作中⼿写 render ⽅法的场景⽐较少，⽽写的⽐较多的是 template 模板，在之前的 mounted ⽅法的实现中，会把 template 编译成 render ⽅法，然后我们获取到这个render方法然后进行…"}, {"id": "6905271199970885645", "title": "移动端IOS H5（VUE）界面被键盘顶起，键盘收起后无法恢复正常", "desc": "做一个轻应用，链接到公众号里面，却发现了一些扎心的问题....... 然而，并没有什么作用...... 各位大佬关于自适应和兼容有什么建议可以留言哦，本人菜鸟求指教，谢谢........."}, {"id": "6844903670572646414", "title": "vue-cli 默认路由再子路由选中下的选中状态问题", "desc": "但是当我切换user路由的时候发现，首页路由的状态依旧是选中状态，这个让我很纳闷，按理说user路由跟首页的路由是同级，不出出现这样的问题。既然出现了，为了工作，只能迎难而上，去解决这个问题。 构思：用重定向，规定默认路由跳转到上面 /index 下面默认的子路由，再由默认的子…"}, {"id": "6909670247289552909", "title": "Vue3的新特性分析", "desc": "方法二:在一个初始化的vue2项目中，在终端中使用命令vue add vue-next来升级为vue3项目。(注意是在一个初始化的vue2项目，不要瞎搞) 我们都知道在vue2中只允许在template中定义一个根节点，否则会出现The template root requir…"}, {"id": "6844903662330839047", "title": "vue-multi-tab--一个让你在SPA里使用多页签的框架页", "desc": "vue-multi-tab 是一套基于 vue 和 element-ui 的 , 实现了 tab-router (一个基于 tab 的路由) 的 单页面, 多页签 应用程序."}, {"id": "6844903544932270094", "title": "简易 Vue 评论框架的实现————父组件的实现", "desc": "乍一看不是很难，但是在具体的实现上还是遇到了一些问题。此外，因为第一次使用 vue ，看文档看的也是一脸懵逼，话不多说，下面来分析一下，具体每个模块是怎么实现的。"}, {"id": "6945342454727966734", "title": "Vue源码之transition", "desc": "1.transition组件和keep-alive组件⼀样，都是内置组件，⽽transition的定 义在 src/platforms/web/runtime/component/transtion.js 中，之所以在这⾥定义，是因为transition组件是 web 平台独有…"}, {"id": "6844903542478635022", "title": "chrome 浏览器表情包斗图插件， code review 社区撕逼必备~", "desc": "嗯，写个 chrome 斗图用的浏览器插件。 便于在 github、gitlab code review，与各个技术社区评论发表情包斗图用，可快速搜索生成表情包链接所需的表情链接。 github 地址 chrome 应用商店地址 最早想写个在方便在 github 上面发表情的 …"}, {"id": "6900740958325833736", "title": "vue学习之父子组件及插槽", "desc": "父子组件插槽插槽的使用具名插槽使用"}, {"id": "6862706794733502477", "title": "60.Vue export default 和 export 的使用方式", "desc": "上一篇章中，我们已经使用webpack构建起了vue开发渲染组件的项目。 下面来看看示例。 首先编写一个 test.js ，然后使用 export default 暴露一个对象，然后在 main.js 中导入使用。 注意：使用 export default 导入的对象变量，可以…"}, {"id": "6844903586724331528", "title": "从源码角度分析Vue父子组件间传值", "desc": "首先，假设我们有两个组件，父组件叫HelloAnother.vue，子组件叫childProps.vue。父组件里面有一个router路由，父组件的结构如下所示。 在这个父组件中，child-props(注意：vue.js文档中建议我们组件名可以用驼峰法，但是当写在templa…"}, {"id": "6844903967537758216", "title": "基于发布-订阅模式分析vue3.0响应式原理", "desc": "发布和订阅都是跟消息中心通信，从而达到解耦。 我们来分析vue中是怎么使用发布-订阅模式。 首先了解下vue3.0中响应式的用法：reactive包装数据，effect定义数据变化后的回调。 reactive()为目标对象创建一个Proxy对象(代理对象)。 是不是应该在数据变…"}, {"id": "6923094070759784456", "title": "每天学一点Vue3（一） CND方式的安装以及简单使用", "desc": "感觉vue3的新特性很舒服，这样才是写软件的感觉嘛。打算用Vue实现自己的一些想法。 Vue3还有几个必备库，比如Vue-Router（负责路由导航）、Vuex（状态管理、组件间通信），还有第三方UI库，比如element Plus、Antdv、Vant 等。 这里会介绍他们的…"}, {"id": "6844904087536812045", "title": "项目中数组循环的一个优化案例", "desc": "最近在项目中遇到一个性能问题，根据一些select选择框和一些单选按钮的值综合起来对一个数组进行遍历筛选，并获取最终符合条件的数据，但由于这个数组的长度过长，达到6000+，甚至更长，所以导致筛选之后的页面渲染有些卡顿，这个通过chrome浏览器的performance分析所得…"}, {"id": "6947558401765277703", "title": "【vue】单文件sfc里的scoped是什么？", "desc": "考虑这样的一个场景。有组件A和组件B的style中定义了同样的类.h1, 那么打包之后的css文件中就会有两个同样的.h1类， 当页面展示组件A或者组件B的时候样式都同时受到了定义的两个.h1的影响，造成样式错乱。为了更好说明，我写了A和B两个组件，代码如下： 打开页面，此时三…"}, {"id": "6844904161641758734", "title": "2016年的vue demo 升级到 SSR 版本了", "desc": "这个项目最开始建立的是2016年的时候，如今已经过去了4年多，时光匆匆，如今 TS 已经流行起来，并且自己已经在 SSR 方面实践颇多，所以就花了半天的时间使用 Genesis 写了一个完整的 Vue SSR 的demo。"}, {"id": "6844903966153654286", "title": "深入Vue系列 next-tick原理和源码解析", "desc": "在 vue 的官方文档中有一个 API 叫做 nextTick，将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用这个方法，获取更新后的 DOM。 放在Vue.nextTick()回调函数中的执行的应该是涉及 DOM操作的 JavaScript 代码。 Vue …"}, {"id": "6844903794111676423", "title": "Vue项目升级webpack4.x和遇到的那些安装包Error", "desc": "一. 升级webpack到4.x 解决方法： 是vue版本与vue-template-compiler不一致。升级vue版本试试 所以要区分开发环境和生产环境。开发环境使用require，生产环境使用import 使用babel 的 plugins：babel-plugin-d…"}, {"id": "6844903865473581063", "title": "Vue.js的IoC容器模式探索", "desc": "IoC(Inversion of Control)，意为控制反转，不是什么技术，而是一种设计思想。==Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制==。 如上代码所示，有一个bind（）辅助函数，该函数接受一个接口（这是一个普通的对象，其中包含我…"}, {"id": "6844903507456524295", "title": "基于 Vue 实现的 tooltip 工具", "desc": "基于 Vue 实现的一个 tooltip 小工具，不依赖 popper.js，支持指令注册与工具函数使用。 项目地址：https://github.com/kinglisky/vtip 文档地址： https://kinglisky.github.io/vtip"}, {"id": "6844903663530409997", "title": "Vue同构(三): 状态与数据", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法变现，坚持下去也是靠的是自己的热情和大家的鼓励。各位读者的Star是激励我前进的动力，请不要吝惜。 Vue同构系列的文章已经出到第三篇了，前两篇文章Vue同构(一): 快速上手与Vue同构(二):路由与代…"}, {"id": "6844904127781158920", "title": "Vue Object 的变化侦测", "desc": "Vue 中的对象变化侦测是通过Object.definePorperty实现的，但是Object.definePorperty的方式有缺陷，比如不能直接代理整个对象，每次都要循环遍历对象的所有属性；尤大大说之后会使用 ES6 中的Proxy 重写这个部分。这篇博客介绍的是 Ob…"}, {"id": "6844903872868122637", "title": "撸一个Vue脚手架plus，高级概念玩儿一遍(超详细)", "desc": "一个不够“懒”的程序员不是好程序员。 --------鲁迅 相信每个一个程序员都不希望花过多的时间去造没必要造的轮子（纯粹为了学习的略过），经过不断的成长和经验的积累，我们总得造出一些有意义的可以长期使用的“轮子”（因为没有现成的，哈哈🤣），也就是大家都将求的代码的复用性。 …"}, {"id": "6844903614104731656", "title": "用 TS + Vue 写了一个在 Chrome 中运行 Prettier 格式化的扩展程序", "desc": "1. 如何结合 ESLint 使用？ 这里我想让大家注意一点，就是 eslint 和 prettier 命令的匹配参数最好加上双引号，否则可能出现错误。 2. 使用 gitHooks 在提交代码时自动格式化 A: 如果是你的个人项目那么无所谓。如果是多人开发或者开源项目的话，你…"}, {"id": "6844903623969734663", "title": "vue,koa应用脚手架,3步建立应用页面", "desc": "支持多语言路由,多页应用,Mock,babel7,动态按需加载. 样式:scss. 框架:vue2. 模板引擎:handlebars4. 打包:webpack4. 图标:iconfont,svg-sprite-loader. 组件库:element-ui. 任何模式都有效,通用…"}, {"id": "6948077194736304159", "title": "Vue源码（1）：浅析Vue的初始化过程", "desc": "那接下来，本文就从上面四个方面，来逐一进行分析。 也就是说，在webpack的配置文件中，别名vue所在的文件，才是我们在执行import Vue from 'vue'的时候所真正引入的文件。那么这里的构造函数Vue就是其所对应的文件中导出来的。 大家平时在编写vue项目的时候…"}, {"id": "6878846459765063687", "title": "关于vue中删除依赖的那些事", "desc": "个人在vue源码的学习过程中，不仅仅觉得数据响应式实现的非常的巧妙，在设计收集依赖的环节中，后续的删除依赖的处理也是非常的细节贴心的，也不得不感叹作者满满的细节。那么vue是在何时删除依赖的？删除依赖的作用及场景又是什么呢？接下来我们带着问题，一步步地分析源码实现，相信这会让你…"}, {"id": "6913200316314746894", "title": "你知道深度作用选择器>>> 或/deep/或::v-deep吗？", "desc": "见多才能识广，如果在vue的项目中有看到 >>>或/deep/或::v-deep，千万不要大惊小怪，那只是因为你孤陋寡闻而已，问主管，他也只会在心里暗自嘀咕你太无知了，哈哈哈哈。 其实vue的官网文档"}, {"id": "6844903608605999111", "title": "解密Vuex: 从源码开始", "desc": "很多时候我们在开发一个Vue项目的时候，用一个Vue实例封装的EventBus来处理事件的传递从而达到组件间状态的共享。但是随着业务的复杂度提升，组件间共享的状态变得难以追溯和维护。因此我们需要将这些共享的状态通过一个全局的单例对象保存下来，在通过指定的方法去更新状态更新组件。…"}, {"id": "6844904196840357902", "title": "学习vue源码（15）手写$forceUpdate,vm.$destroy方法", "desc": "迫使Vue.js实例重新渲染。注意它仅仅影响实例本身以及插入插槽内容的子组件，而不是所有子组件。 只需要执行watcher的update方法，就可以让实例重新渲染。 Vue.js的每一个实例都有一个watcher。当状态发生改变时，会通知到组件级别，然后组件内部使用虚拟DOM进…"}, {"id": "6968625367212883975", "title": "【Vue】组件传值", "desc": "父子组件传值 父组件向子组件传值（props） 具体展示： 子组件向父组件传值（$emit） 具体展示： 兄弟组件传值 通过event bus实现 具体展示："}, {"id": "6844903825812226062", "title": "如何根据业务封装自己的功能组件", "desc": "要做的就是这个查询的小列表, 我们整理一下要做的事情, 先做规划再写代码, 避免边写边改, 不然会让代码越来越难维护, 写到下面发现上面不该那么写, 再去改又懒的改, 然后就郁闷着勉为其难的提交上去了, 虽然功能在但自己看着都...... 1. 分析需求: 我们需要什么元素? …"}, {"id": "6844903732967112717", "title": "Vue源码中为什么要const _toStr = Object.prototype.toString？", "desc": "在vue的源码中，vue/src/shared/util.js文件中存放的是一些方法。其中作者用了Object.prototype.toString这个方法来判断类型，但是并没有直接用，而是单独保存在一个变量： 先说下判断类型。众所周知，typeof在判断对象时不能正确判断Nu…"}, {"id": "6900046013726195720", "title": "element-ui的el-table源码分析", "desc": "1.概述学习element-ui的源码能很好的提升vue的水平,但是element-ui中el-table的源码很复杂,并且组件的写法用的是render函数方法,而不是vue单文件,这让阅读它源码变得"}, {"id": "6844904035502276621", "title": "Vue2.0源码阅读笔记（十）：指令", "desc": "指令是带有 v- 前缀的特殊特性，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。 Vue2.0 内置了形如v-bind、v-on等指令，如果需要对普通 DOM 元素进行底层操作还可以使用自定义指令。 在 Vue2.0 中，可以通过自定义指令对普通 DOM 元素…"}, {"id": "6982842294181298190", "title": "00.邂逅Vue.js", "desc": "一.为什么要学习Vue.js? 我相信每个人学习Vue的目的是各部相同的。 可能你的公司正要将原有的项目使用Vue进行重构。 也可能是你的公司新项目决定使用Vue的技术栈。 当然，如果你现在正在换工作"}, {"id": "6977303845307154440", "title": "vue2双向绑定", "desc": "vue2双向绑定学习记录2021年6月24日-vue双向绑定是通过“数据劫持”结合“发布者订阅”模式的方式来实现的，也就是说数据和视图同步，数据发生变化，视图也发生变化，视图变化，数据也随之改变。"}, {"id": "6986680683364089864", "title": "Vue源码解析：Vue是如何设计的？", "desc": "从全局了解Vue的实现，包括原型方法的添加，静态方法属性的添加以及实例化过程。了解构造函数，原型以及实例在Vue中的灵活运用。"}, {"id": "6844903926563602445", "title": "Vue从甜小白到皮大佬系列(三)  生命周期", "desc": "生命周期是指一个事物从生到死的过程,软件也一样,每个语言都有其生命周期,从出生到死亡,每个阶段做每个阶段应该做的事情,简单说：一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期。 例如面前这位大侠,既然是小白那么就要苦练基本功,千里之行始于足下,万层高楼,平地起,…"}, {"id": "6844903824755277837", "title": "自定义 Vue 中的 v-model 双向绑定", "desc": "v-model 双向绑定实际上就是通过子组件中的 $emit 方法派发 input 事件，父组件监听 input 事件中传递的 value 值，并存储在父组件 data 中；然后父组件再通过 prop 的形式传递给子组件 value 值，再子组件中绑定 input 的 valu…"}, {"id": "6844903592038514701", "title": "vue实践之vuex", "desc": "如果有多个组件需要用到此属性，我们要么复制这个函数，或者抽取到一个共享函数然后在多处导入它——无论哪种方式都不是很理想。 Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存…"}, {"id": "6844903550049337351", "title": "一个 VUE 组件：实现子元素 scroll 父元素容器不跟随滚动（兼容PC、移动端）", "desc": "我们经常遇到一种情况。当滑动滚动条区域时，子元素滚动条到底部或顶部时就会触发父级滚动条，父级滚动条同理会继续向上触发，直至body容器。这是浏览器默认的滚动行为。 但是很多情况，我们想要子元素滚动完成后，不触发父元素的滚动，比如 modal、侧边栏 等等。"}, {"id": "6844903667695353869", "title": "Iceworks 2.7.0 发布，海量图表供你选择", "desc": "阿里巴巴图表库 Bizcharts 正式开源 Bizcharts 是基于 G2 引擎的 React 版本的封装。 Bizcharts 的语法设计非常贴切 React 的使用方式，图表的各个部分都拆分成了独立的 React 类，如：<Tooltip /> 代表提示信息， <Axi…"}, {"id": "6876100071826391054", "title": "基于keep-alive实现的一个可以缓存复用页面的vue组件", "desc": "起因是之前曾经碰到的需求，需要实现类似传统后台管理页面的标签页功能。 当标签页存在的时候，切换的页面需要缓存页面上的数据。当标签页关闭的时候，需要清除缓存的数据。 当时第一时间想到的就是vue自带的keep-alive组件，再把标签的数据存放在vuex当中，通过新增以及删除数据…"}, {"id": "6844904086349807624", "title": "Vue中watch、computed与methods的联系和区别", "desc": "顾名思义，watch 就是监听的意思，其专门用来观察和响应Vue实例上的数据的变动。 但是当您想要执行异步或昂贵的操作以响应不断变化的数据时，这时watch就派上了大用场。 computed 就是计算属性，其可以当成一个data数据来使用。 计算属性计算时所依赖的属性一定是响应…"}, {"id": "6844903890484199437", "title": "Vue的Provide与Inject机制", "desc": "I came to see you. It was not easy because you were so far away."}, {"id": "6866416974927233032", "title": "从0到0.1 撸一个基于Vant的H5简单框架(一)", "desc": "简单的vue项目已建好，接下来再根据需求添砖加瓦。 你可以在创建项目的时候选择预处理器 (Sass/Less/Stylus)。如果当时没有选好，内置的 webpack 仍然会被预配置为可以完成所有的处理。你也可以手动安装相应的 webpack loader： 我们写最简单的sa…"}, {"id": "6844903794732466190", "title": "Vue源码探究-数据绑定的实现", "desc": "在总结完数据绑定实现的逻辑架构一篇后，已经对Vue的数据观察系统的角色和各自的功能有了比较透彻的了解，这一篇继续仔细分析下源码的具体实现。 本篇主要是关于源码的解释，可以翻看观察系统的原理篇来对照理解。 在这里记录下了Vue的数据绑定具体实现的源代码的个人理解，有些细节的地方或…"}, {"id": "6895364529966809096", "title": "vue nextTick 异步更新机制", "desc": "为什么要写这篇文章介绍nextTick之前咱们先来看一下js的任务队列一、macro-task（宏任务）二、micro-task(微任务)三、同步任务四、那么js任务的执行顺序怎样的呢？那介绍这么多，"}, {"id": "6844903998412046343", "title": "简单理解MVVM、数据双向绑定原理", "desc": "MVVM定义：是Model-View-ViewModel（模型-视图-视图模型）的缩写；Model是数据模型，既后端传过来的数据；View是视图层，既我们看到的页面；而ViewModel是连接Model和View的中间桥梁，也就是说在MVVM的框架下，View和Model是不能…"}, {"id": "6964005351158972446", "title": "【Vue】019. 过滤器和自定义指令", "desc": "本文主要介绍Vue.js中过滤器和自定义指令相关的知识点，包括过滤器的定义方式，和使用方法，以及自定义指令的概念和注册方式。"}, {"id": "6907934134362963981", "title": "vue3 composition（组合式）API 是什么？我为什么要使用它？", "desc": "想要了解组合式 API ，那么我们必须要先知道 vue 2 中组件的局限性。 代码的可读性问题： 当组件变得越来越大时，可读性变得越来越困难。 那么下面我们将详细介绍前两个限制，来详细告诉大家组合式 API 解决了什么样的问题。 注意：本博客中并不会讲解 composition…"}, {"id": "6859633934905376782", "title": "vue 3.0新特性", "desc": "随着虚拟 DOM 重写，我们可以期待更多的 编译时（compile-time）提示来减少 运行时（runtime）开销。重写将包括更有效的代码来创建虚拟节点。 在当前的 Vue 版本中，当父组件重新渲染时，其子组件也必须重新渲染。 使用 Vue 3 ，可以单独重新渲染父组件和子…"}, {"id": "6933206034819317768", "title": "[Vue源码系列-1]vue3源码架构分析", "desc": "1. vue2和vue3的区别 vue2采用的是Flow来做静态类型检测，而vue3使用typescript重构代码，增强类型检测。 2. Vue架构分析 runtime-dom: 针对浏览器的运行时。包括DOM API，属性，事件处理等 3. 基于rollup搭建vue3环境"}, {"id": "6895270992559243277", "title": "Vue 3 的 v-model", "desc": "目前在学习 Vue 3，使用了 v-model 实现父子组件的数据交流。发现 v-model 是 Vue 2 到 Vue 3 的一个 breaking change，因此记录了学习过程。 Switch 组件使用 context.emit('update:value',!prop…"}, {"id": "6844903655745781773", "title": "用node实现一个简单的聊天室——websocket实践", "desc": "websocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。大多数 Web 应用程序将通过频繁的异步JavaScript和XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源。而websocket能够很好的解决类似的问题。常用于即时通讯、监控等情…"}, {"id": "6905320958551130119", "title": "深入浅出vue.js 第十七章 最佳实战", "desc": "key这个特殊属性主要用在Vue.js的虚拟DOM算法中，在对比新旧虚拟节点时辨识虚拟节点。 当我们从路由/detial/1切换到detail/2时，组件是不会发生任何变化的。这是因为vue-router会识别出两个路由使用的是同一个组件从而进行复用，并不会重新创建组件，因此组…"}, {"id": "6844903788852035598", "title": "Vue源码简析之视图生成（上）", "desc": "最终会生成<div>hello vue</div>的视图，下面来分析一下流程。 new Vue()的时候会执行_init方法，做一些初始化工作后执行vm.$mount,在这之前会判断有没有el属性，没有的话需要手动调用。就像这样: 这里主要是定义了updateComponent…"}, {"id": "6844903508869644296", "title": "推荐一个漂亮的vue Material Design风格的组件库", "desc": "Vuetify comes ready to go with 5 pre-made vue-cli templates. From simple html to full-blown SSR, you are ready to go in minutes. Each and e…"}, {"id": "6941653752650661895", "title": "探索Vue3响应式API之Ref（一）", "desc": "第一个函数：可以看到返回的是调用createRef(0)之后的结果，接下来看看createRef函数。这里shallow默认为false，整个函数的作用是判断rawValue是不是Ref，如果是，直接"}, {"id": "6941638076678537229", "title": "vue基础&实战", "desc": "padding是内边距,是与元素相关联的边距,会和元素显示相同的背景色. margin是外边距,是元素之外的边距,不会显示元素的背景色. 原因：因为第三方组件的默认样式优先级比scoped中样式的优先级高！！但不完全都高，不生效的时候肯定是高. 一套目前主流的前端技术栈。 在一…"}, {"id": "6844903854400602126", "title": "从vue2.6.10源码看vue是怎么跑起来的", "desc": "先看initMixin。因为在Vue的构造函数里面需要执行this._init(options) 看上去比较大“简单”，但是里面每一个initXXX都是大家伙。 这里先提下initRender(vm)。 其中vm.$createElement = function (a, b,…"}, {"id": "6979220857700745229", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】019-Vue中的动画：使用 Vue 实现基础的 CSS 过渡与动画效果", "desc": "四、Vue中的动画 1、使用 Vue 实现基础的 CSS 过渡与动画效果 动画 运行结果 过渡 运行结果 通过绑定样式的方式实现过渡 运行结果"}, {"id": "6844904081161453576", "title": "Vue深入响应式原理源码分析（上）", "desc": "Vue.js实现响应式的核心是利用了es5的object.defineProperty，这也是vue.js不能兼容ie8及以下浏览器的原因。 obj是要在其上定义属性的对象;prop是要定义或修改的属性的名称;descriptor是将被定义或修改的属性描述符。descripto…"}, {"id": "6844903919974350856", "title": "使用vue+node搭建图片上传下载的web端简单服务（一）", "desc": "通过搭建一个简单项目，练习vue全家桶,elementui,node,koa,axios等。 本项目按照本人搭建与写入顺序进行，文件会发生多次拆分。所有内容都抱起来过。 第一次写文章，内容可能比较杂乱，实在抱歉。 以前端为主，后台部分实在没有任何经验。 2. 初始安装（我是用的…"}, {"id": "6844903986357600264", "title": "Vuex常用知识点记录", "desc": "1、多个组件依赖同一个状态，使用组件之间通信方法会非常繁琐，例如多层嵌套组件。"}, {"id": "6844903510723526663", "title": "[英] GitLab 使用 Vue 一年的经验总结", "desc": "Vuex 的使用、迁移成本、一些小经验"}, {"id": "6909370585143312391", "title": "Vue - 组件化开发", "desc": "7.版本选择2.x- Use history... 勾选 - 选择ESLint + Standard config - Lint on save勾选 - 创建项目"}, {"id": "6844903929411551240", "title": "【Vue原理】Render - 源码版 之 静态 Render", "desc": "现在看完，发现也简单的，不过我也是看了几个月的。。。。"}, {"id": "6917143234288287752", "title": "浅谈Vue数据响应式", "desc": "作为一名前端关于“响应式”我们听到的最多的应该是响应式网页，特点就是当浏览器的视口变化时其页面的显示效果也会跟着变化，这便是一个响应式网页。总结就是有一个东西变化时另一个东西也跟着变化。 那么数据响应式顾名思义就是当数据变化时，页面也跟着变化。 数据响应式首先要有数据，我们以我…"}, {"id": "6909290237852123149", "title": "详解Vue中的$nextTick", "desc": "当在代码中更新了数据，并希望等到对应的Dom更新之后，再执行一些逻辑。这时，我们就会用到$nextTick 实际上发生了什么呢。 回调函数被存放到了一个数组里:callbacks。 如果没有传递回调函数，这个方法会返回一个Promise，然后吧reslove当成回调函数放到fl…"}, {"id": "6979222610534285348", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】021-Vue中的动画：组件和元素切换动画的实现", "desc": "3、组件和元素切换动画的实现 代码 运行结果 使得它们”出入有序“ 运行结果 第一次渲染页面就有动画效果 运行效果 多个单组件动画切换 运行结果"}, {"id": "6844903709546119175", "title": "用mpvue实现一个简单的demo", "desc": "这句话的意思呢，就是说mpvue基本集成了vue的核心代码，亦即继承了vue的核心功能-组件。组件可以拓展html、封装以及复用代码，它阐述一个组件树是由无数的组件去组成的。通常一个应用会以一棵嵌套的组件树的形式来组织： 而一个好的组件树具有封装性、复用性、拓展性。 组件的封装…"}, {"id": "6941278782728699935", "title": "手把手教你如何写vue.js的插件，跨项目依赖。学不会你来打我！", "desc": "vue.js作为前端三大框架之一，它的快速开发特点深受开发者的喜爱。通常，我们使用vue.js会集成Router、Axios、Vuex、Element-UI等插件，那么你知道它们是如何无缝对接vue.js的吗？接下来，我们参考Router插件无缝对接vue.js的原理来手动开发…"}, {"id": "6844904084512702471", "title": "浅谈Vue响应式原理(个人向)", "desc": "关于响应式原理，其实对于vue这样一个大项目来说肯定有很多细节和优化的地方，在下水平精力有限，不能一一尝试探索，本文仅以将响应式的大致流程个人向的梳理完毕为目的。 对于响应式主要分为三大部分来分析，1.响应式对象；2.依赖收集；3.派发更新。 最后将是个人的分析。 我们先从初始…"}, {"id": "6844903568273571854", "title": "基于vue的记事本应用 vuememo - 更新", "desc": "💯VUEMEMO🚀DEMO点击这里看演示：DEMO源代码：github🚨BUILDSETUP🎯主要功能v1✔️响应适配Responsive✔️创建、修改笔记createormodifynotes✔️删"}, {"id": "6908963689308225550", "title": "vue 中 mixis的使用与注意点", "desc": "混入 (mixins)： 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。🤔 3. 值为函数的选项，如created,mounted等，就会被合并调用，混合对象里的钩子函数在…"}, {"id": "6884118725172133896", "title": "vue源码解析之Directives原理", "desc": "当我们的methods中存在操作DOM/BOM的逻辑的时候，就该思考是否可以抽象成一个自定义指令。 钩子函数中的参数，除了el之外，其他的参数都应该是只读的，切勿进行修改。如果需要在钩子函数之间共享数据，建议通过元素的dataset来进行。 只调用一次，指令第一次绑定到元素时调…"}, {"id": "6844904001637613581", "title": "你为什么看不懂源码之Vue 3.0 结语", "desc": "之前大概了解了 响应式原理、让普通属性变成响应式数据的 ref、effect 的实现以及 计算属性的包装。 本篇从逆向的角度做个简单的整理，草草的结束掉写的很烂的文章。 你的需求是开发 reactive 模块，它是干什么的呢？将变量生成响应式数据。 响应式数据被更改时，需要做一…"}, {"id": "6844903496546795527", "title": "我从Angular 2转向Vue.js, 也没有选择React", "desc": "JavaScript angular2 Vue react"}, {"id": "6844903960294195213", "title": "浅析Vue3中的响应式原理", "desc": "请在此前阅读Vue Composition API内容，熟悉一下api。 众所周知在Vue3中使用了ES6提供的ProxyAPI取代了之前defineProperty来实现对数据的侦测. defineProperty不能检测到数组长度的变化，准确的说是通过改变length而增加…"}, {"id": "6844903542793175048", "title": "你真的知道组件中的v-model吗", "desc": "目录v-model的神奇你好奇input事件是什么？组件中的v-model组件的v-model生效原则给组件绑定v-model v-model的神奇htmljs一旦我们输入的值发生变化,data中的p"}, {"id": "6844903560426029063", "title": "你也许不知道的Vuejs - 组件式开发", "desc": "组件（Component）绝对是 Vue 最强大的功能之一。它可以扩展HTML元素，封装可复用代码。从较高层面讲，可以理解组件为自定义的HTML元素，Vue 的编译器为它添加了特殊强大的功能。所有的 Vue 组件同时也都是 Vue 的实例，因此可以接受相同的选项对象（除了一些特…"}, {"id": "6844903592055275534", "title": "使用node爬虫做了一个vue小项目记录使用笔记", "desc": "做的是一个后台管理的项目，首先是页面的结构，根据页面的结构设计路由。 主页面是views/Index/index.vue,一些样式直接使用element-ui的样式,element-ui的使用参考src/main.js的全局引入并注册。分为顶部、左侧导航栏，右侧的主题三部分，在…"}, {"id": "6844903877708365832", "title": "【Vue原理】VModel - 白话版", "desc": "首先，双向绑定，我个人认为应该分为 初始化绑定 和 双向更新 两part。 我们先以 input text 类型讲解，对于其他的表单元素，流程都差不多，只是中间涉及的内容不同。所以就先讲个例子，然后具体在源码版全部一起说 1、这个渲染函数是没有执行的 匿名函数。执行的时候，会绑…"}, {"id": "6913777401654673421", "title": "Vue2核心原理(简易版)-计算属性computed功能实现", "desc": "计算属性和watch属性不一样，计算属性的本质是Object.defineProperty。 可是这样的计算数据是没有缓存的，他不管依赖的property是否变化，都会重新计算。我们需要对它进行改进。"}, {"id": "6913756771794288647", "title": "Vue2核心原理(简易版)-watch功能实现", "desc": "首先我们要回顾vue依赖收集的原理和实现，请看我的前一篇文章，依赖收集。 a. 初始化watch对象 b. 修改Watcher类，应对自定义watcher属性的情况"}, {"id": "6844903768383815688", "title": "Vue源码探究-构建版本的区别", "desc": "基于第三方性能评估工具Benchmark的测评结果可以看出Vue 2.0版本在整体的性能上得到了大幅优化，即使与React和Angular最新版相比也相差无几。在提供给使用者的构建版本方面，也进行了针对性的细化，输出了多种不同的版本，以便满足不同需求的开发者使用更精细更适合自己…"}, {"id": "6971799533785186335", "title": "vue render 函数", "desc": "render 函数能让你写出优雅、易维护和扩展的组件。能让组件实现完全的数据驱动。今天重新复习render的用法。"}, {"id": "6924201705680666632", "title": "修饰符与v-model", "desc": "当我们输入用户名时，上面的username此时会同步更新，但是我们不想让它同步更新要怎么办呢？我们可以这样写&#x3C;input type=\"text\" v-model.lazy='user.username'>此时它监听的就是鼠标失去焦点事件的触发，当我们在输入用户名的时候…"}, {"id": "6986622039826120717", "title": "Vue深入学习—虚拟DOM和Diff算法", "desc": "snabbdom是“速度\"的意思，源码只有200行，使用TS写的，让东西变得模块化 h函数用于产生虚拟节点，同时也可以嵌套使用，得到虚拟DOM树..."}, {"id": "6844903640352686087", "title": "仿小米全面屏边缘返回", "desc": "最近小米miui10即将上线，一直想使用手势边缘返回功能，使用小米Note3刷了miui10后，却发现没有全面屏手势操作！！ 在浏览某应用的时候，发现了它也采用了类似小米的返回功能，所以这里，也用vue自己写了一个。 Demo地址 功能需求： 1、要从屏幕边缘向右滑动，其他地方…"}, {"id": "6844903880031993869", "title": "【Vue原理】Slot - 源码版之作用域插槽", "desc": "今天探索Slot的另一部分，作用域插槽。 其中，_u 是 resolveScopedSlots，Vue会给每个实例都注册一个 _u 方法。 包装成函数，是为了改变插槽内容的变量访问的作用域。 通过函数参数传递的形式，让插槽的变量，在解析时，先访问函数变量。如果没有，再去父组件上…"}, {"id": "6844903607104438286", "title": "快应用开发框架vue-hap-tools实现原理", "desc": "前期爝神大大 @小爝 已经对vue-hap-tools做了简单介绍，参考使用vue编写快应用解决方案。现在这篇文章主要说说实现思路，也算总结一下，如果有实现得不合理的地方，欢迎大家指正。 要让vue代码运行在快应用平台，一种实现思路是像mpvue一样，js部分使用vue.run…"}, {"id": "6844904121770704903", "title": "前端小白从0到1搭建vue ui库（PC端）第四步 input组件", "desc": "value（这个是input组件最重要的点），input组件要接收父组件传过来的值，而且要可以用v-model来传值。这时候组件的value默认就是父组件v-model绑定的值 handleInput（用户改变值要传到父组件）,这里为什么不能直接去修改父组件传过来的值大家应该知…"}, {"id": "6946444974615429128", "title": "Vue源码解析问题（3 key的作用与原理）", "desc": "3. vue中key的作用和工作的机制都是什么？ 结论：由此可见，当不设置key时，会按照自上而下执行，遇到不同的位置，会做重新渲染操作。删除同理，先会重新渲染，然后销毁dom,极其浪费性能。 结论：设置key后，会先从首项对比，如遇到不同项，会从末项对比，避免频繁更新不同元素…"}, {"id": "6844903826957434887", "title": "如何创建一个“纯净”的对象", "desc": "如何创建一个“纯净”的对象首先来看一段代码📃假设Object的原型中有一个自定义的log属性，我们用字面量语法定义obj对象，那么使用for-in遍历方法就会遍历到这个log对象，为了只遍历其自身的属"}, {"id": "6999517512001912845", "title": "vue项目实现部分页面免登录功能", "desc": "1.需求解读 检索页面和管理平台页面共存，切检索页面免登陆，管理平台必须登录 检索详情使用管理平台菜单下的详情页面（需要登录） 检索详情返回检索结果列表保留检索列表（使用keep-alive） 2.代"}, {"id": "6856517315010232333", "title": "在Vue中使用装饰器，我是认真的", "desc": "作为一个曾经的Java coder, 当我第一次看到js里面的装饰器(Decorator)的时候，就马上想到了Java中的注解，当然在实际原理和功能上面，Java的注解和js的装饰器还是有很大差别的。本文题目是Vue中使用装饰器，我是认真的，但本文将从装饰器的概念开发聊起，一起…"}, {"id": "6844903873266581517", "title": "[译] Vue 最黑暗的一天", "desc": "今天，我惊讶的发现，往常积极友好的 VueJS 社区陷入了一场激烈的战争。 两周前，Vue 的创建者尤雨溪发布了一个请求意见稿（RFC），用于在即将发布的 Vue 3.0 中使用基于函数的方式编写 Vue 组件。今天，一个 Reddit 上批评性的帖子和 Hacker News…"}, {"id": "6979502613793112095", "title": "一篇关于Vue3的个人学习笔记", "desc": "更文挑战的最后一天，想了许久，最后决定梳理一篇关于Vue3的个人小结，一来作为完美收官6月份，二来为下个月做个铺垫！一起来看看吧~"}, {"id": "6991267694678900772", "title": "如何优雅的使用Vuepress编写组件示例（上）👈", "desc": "最近在搭自己的组件库，关于文档用的是Vuepress 官网在文档说明展示组件示例的方法有很多种，但种种都不合心意 通过查阅网上的资料和Element的源码找出了我认为的一种最优解..."}, {"id": "6994839425465188366", "title": "Vue3从0到1组件开发-布局组件：Menu导航栏", "desc": "零逻辑组件之list列表，盘点一下掘金的导航栏组件实现思路，其实也没啥思路，就是怼几个容器，剩下的交给开发时。"}, {"id": "7002897196426788895", "title": "vue3源码之旅-ref", "desc": "更多文章 前言 上篇介绍了reactive，这篇介绍一下ref相关的api 简化代码 vue3-reactive源码位置 class 上篇说reactive和Proxy息息相关，而ref和reacti"}, {"id": "7005215310470971405", "title": "基于History的简易版Vue-Router实现", "desc": "history模式一般配合服务端的返回来使用。本次实现history模式的Vue-Router（hash模式也是异曲同工），且适用于SPA，不依赖服务端的返回"}, {"id": "6958378433604747278", "title": "vue遇到拖拽动态生成组件怎么办？", "desc": "开完产品需求会议，遇到了一个需求，首先页面分成两栏布局，左侧展示数据组件，支持拖拽排序，点击按钮清除组件。右侧支持将组件的缩略图拖拽至左侧生成一个新的组件。"}, {"id": "7005152186942357518", "title": "实现 Virtual DOM 下的一个 VNode 节点", "desc": "什么是VNode 我们知道，render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（VNode 节点）作为基础的树，用对象属性"}, {"id": "7004664958357078047", "title": " Vue、JS判断滚动方向【Nav导航条根据滚动条方向显示淡入淡出效果。】", "desc": "目的 这个代码主要实现了：Nav导航条根据滚动条方向显示淡入淡出效果。 Nav的定位是fixed，向下滚动导航条隐藏，向上滚动导航条出现。"}, {"id": "7001039522209202189", "title": "封装Vue3组件的全过程", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 在前端开发中使用组件可以大幅度提升整个项目的开发效率，而且使项目更容易维护。 这里楼主以封装一个 Loader 组件为例，记录其封装过程。 "}, {"id": "6932367804108800007", "title": "浅谈 Vite 2.0 原理，依赖预编译，插件机制是如何兼容 Rollup 的？", "desc": "Hi，我是 ssh，春节过去了，躁动的心也该收一收，开始新一年的学习了。我目前就职于字节跳动的 Web Infra 团队，目前团队还很缺人（尤其是北京）。 为此我组建了一个氛围特别好的招聘社群，大家在里面尽情的讨论面试相关的想法和问题，也欢迎你加入，随时投递简历给我。 在字节跳…"}, {"id": "6844903895467032589", "title": "深入剖析：Vue核心之虚拟DOM", "desc": "使用 Vue 做项目也有两年时间了，对 Vue 的 api也用的比较得心应手了，虽然对 Vue 的一些实现原理也耳有所闻，例如 虚拟DOM、flow、数据驱动、路由原理等等，但是自己并没有特意去探究这些原理的基础以及 Vue 源码是如何利用这些原理进行框架实现的，所以利用空闲时…"}, {"id": "7004366344183365639", "title": "我的第一个Vue3组件，实现TODO-LIST", "desc": "Vue3已经发布很久了，而且我已经使用Vue很多年了，对Vue框架也是尤为喜爱。今天我将通过一个最简单的组件来展示Vue3的魅力以及它和Vue2的不同之处。我们将会用到Vite、composition"}, {"id": "6946756821675671566", "title": "[译]尤雨溪：Vue3将不会支持IE11 精力会投入到Vue2.7", "desc": "从 Vue3 开始开发的时候一直到2018年底，我们一直被问到有关 IE11 的支持。许多用户都在问 Vue3 是否会支持 IE11，我们最初的计划是先发布 Vue3 的稳定版，然后稍后才会支持 IE11。在漫长的开发过程中，我们还就 IE11 的兼容性进行了研究和实验，但是由…"}, {"id": "7003150922234740767", "title": "vue 开发谷歌浏览器插件", "desc": "1.什么是谷歌浏览器 谷歌浏览器插件由**background scripts , content scripts , page , UI elements **和各种逻辑文件,manifest.js"}, {"id": "7003221059839197214", "title": "知识点回顾（一）—— vuex", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"}, {"id": "7002992375547052063", "title": "vue的面试总结", "desc": "vue是现在的主流框架，现在好多公司在面试的时候都会问vue，这里我总结了一点，我自己面试的时候的问题，也有好多也忘了"}, {"id": "6924687052005081095", "title": "Vue3 全家桶 + Element Plus + Vite + TypeScript + Eslint 项目配置最佳实践", "desc": "尤大的 Vue3.0 已经发布有一阵子了，已经很成熟了。 而且 Element Plus + Vite 也出了一段时间了，是时候该上手体验分享一波了。 主要是要熟练一下 Vue3，好准备用 Vue3 重构一下自己的网站项目: blog-vue-typescript ，计划是过年…"}, {"id": "6844904163705356296", "title": "Vue的插件拓展", "desc": "1. 添加全局方法或属性 2. 创建全局指令、过滤器 3. 混入 4. 添加实例"}, {"id": "6844903605334441997", "title": "vue移动端路由切换完整实例", "desc": "IOS 上滑动切换时，会有两次页面的转场动画，一次自身滑动时进行的切换，随后触发我们设置的转场动画。 除了上面两个问题，其余的操作都是可以在页面内进行设置，基本都是可控的。主要就是解决上面两个问题。 1. 浏览器导航栏的切换 这时候我只要判断是否存在 B页面， 存在就证明我点的…"}, {"id": "6976221835109072910", "title": "使用原生方式开发Vue的一次体验", "desc": "如果放弃使用webpack及脚手架进行基于Vue的项目开发，效果会怎样?如何进行组件化?如何进行状态管理? 背景 上周末原本打算去找朋友玩,但是另外一个朋友需要我帮他写一个表格。能够支持拖拽表头进行列"}, {"id": "6844903988442185742", "title": "Vue2.X和Vue3.0数据响应原理实例（上）", "desc": "Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。 Vue2.x使用属性里的get和set实现了数据响应。 value：该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数…"}, {"id": "6844903543418126349", "title": "优雅而炫酷的适用于 Vue 2.0 的 Dropdown 组件。极大提高交互效果和操作愉悦性。", "desc": "优雅而炫酷的适用于 Vue 2.0 的 Dropdown 组件。极大提高交互效果和操作愉悦性。 在线示例：https://xbt1.github.io/effect-dropdown-vue/"}, {"id": "6844903656634974216", "title": "我也来实现一把MVVM", "desc": "大家都知道，vue是个MVVM框架，能够实现view和model的双向绑定，不像backbone那样，model改变需要手动去通知view更新，而vue实现的原理就是通过Object.defineProperty实现数据挟持，定义setter，然后数据改变的时候通知视图更新。 …"}, {"id": "6844903570672713741", "title": "基于Vue的侧滑菜单组件v0.3", "desc": "一个简单的DrawerLayout（类似Android的DrawerLayout）布局组件，基于Vue.js。具体使用demo可以访问http://share.codehuang.com/vue-drawer-layout"}, {"id": "6938015173605064734", "title": "vue｜简易版vue-cli实现二三事儿｜技术点评", "desc": "第二点，我们可以使用一个第三方库ora，其作用是添加loading态，重传的实现我们可以进行tryCatch检测。"}, {"id": "6938011078546849828", "title": "面试官：有使用过vue吗？说说你对vue的理解", "desc": "JSP有一个很大的缺点，就是不太灵活，因为JSP是在服务器端执行的，通常返回该客户端的就是一个HTML文本。我们每次的请求：获取的数据、内容的加载，都是服务器为我们返回渲染完成之后的 DOM，这也就使得我们开发网站的灵活度大打折扣在这种情况下，同年：Ajax火了(小细节，这里为…"}, {"id": "6948292101914394637", "title": "Vue源码之transition-group", "desc": "1.执行transition-group的render函数，获取定义的tag，未定义就获取默认值。 2.创建map空对象 ，创建prevChildren数组，创建rawChildren为组件包裹的内容，创建children数组。 3.通过transition-group的属性和…"}, {"id": "6844903941256249357", "title": "开发一个简单的 Vue UI 组件库（二）——按需引入部分", "desc": "按需引入的目的是只引入用到的组件，以达到减小项目体积的目的。 其实按需引入插件是将我们引入组件的语句转换了一下，至于转换后的路径我们可以按照官方文档配置。组件库需要做的工作是按照插件的要求将组件打包为相应的文档结构。 一个组件做全引入和按需引入区别不大，因此再开发一个组件——t…"}, {"id": "6844903961346965511", "title": "[双语译文] 开发模式是如何工作的", "desc": "如果你的 JavaScript 代码库已经达到的中等复杂度, 你也许可以选择在 development 和 production 打包和运行不同的代码. If your JavaScript codebase is even moderately complex, you pr…"}, {"id": "6902330987418484750", "title": "vue组件间传值的8种方式", "desc": "A→B→C传值方式是工作中最常见的传值方式，依次是组件的包含顺序。 当然，我们可以利用两次props接收参数，直到参数从A传到C，这种方式不再赘述。 还有通过vuex，不过有点大材小用，引起state维护的参数过多等，这种方式也不赘述了。 provice/inject传值的方式…"}, {"id": "6847902218562207758", "title": "从Object.defineProperty到proxy掰开揉碎了讲vue响应式原理", "desc": "1. 什么是响应式 通俗的讲响应式就是视图层与数据层的双向绑定。响应式有两个核心要素：视图改变，更新数据；数据改变，变化视图。这意味着我们在开发的时候只需要进行数据管理，不需要频繁操作dom元素。 视图变化更新数据，其实比较容易实现，事件监听即可实现，比如input标签监听 '…"}, {"id": "6844904031458951175", "title": "vue源码阅读五：虚拟DOM是如何渲染成真实的DOM的？（下）", "desc": "上文中讲了如何将普通的虚拟DOM转为真实的DOM，本文中则继续讲如何将组件类型的虚拟DOM转为真实的DOM。 如果是组件类型的Vnode，则在生成DOM时，调用的是createComponent方法。 我们可以看到，先是判断 vnode.data 上是否有 hook 和 ini…"}, {"id": "6912368988882206728", "title": "Vue2核心原理(简易版)-依赖收集", "desc": "这句话看似很牛逼，但其实什么也没有说😓。当你修改它们时，视图会进行更新。但是你应该对这句话很敏感，可是怎么更新啊？哈哈，仔细思考一下，前两节课(前两篇文章响应式、模版编译)的内容是不是帮我们实现了以下两点： 我们通过对数据的观测（observe），知道了数据是什么时候修改的，…"}, {"id": "6902255175206567943", "title": "Vue源码解析系列(五) -- $mount是如何实现挂载的", "desc": "如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。 可以使用 vm.$mount() 手动地挂载一个未挂载的实例。 如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素。 并且你必须使用原生DO…"}, {"id": "6900904329310535688", "title": "Vue Reactive源码🗣 computed", "desc": "get:传入一个getter函数，computed的返回值为getter函数返回值经过ref封装后，并且是只读的。 set: 也可以传入一个对象，包含get和set两个函数，这时，computed的返回值就可写了。 track用于追踪收集依赖，trigger用于触发响应。"}, {"id": "6844903742119084040", "title": "为vue的项目添加单元测试", "desc": "单元测试能避免出现一些代码运行结果与预期不符的错误，通常是一些比较低级但又难以发现的问题。 粗心且懒，在每次调整之后，需要不断地检查代码，反复去走流程。担心由于自己的改动而导致了逻辑上的错误。而这里面的一大部分工作其实可以让单元测试来完成。 有了单元测试之后，可以对代码本身形成…"}, {"id": "6899625721346408455", "title": "教你如何在vue中使用国际化", "desc": "id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到"}, {"id": "6844903992187682829", "title": "向死而生：Vue的生命周期", "desc": "万物皆有生死，所以万物也皆有生命周期。什么是生命周期？ 用百度百科的话来解释，所谓生命周期即对象从生到死，从摇篮到坟墓的过程，vue也毫不例外地拥有着生命周期。在使用vue的开发过程中，生命周期和它背后诸多的钩子函数是一个必须理解且时常会用到的一块内容。 先看图(。・∀・)ノ …"}, {"id": "6844903969156923405", "title": "Vue3数据驱动源码解读", "desc": "因为时间比较紧，所以写得很仓促，自己也感觉文章写的比较乱，单独看文章的话可能会看不懂。需要先把DEMO过一遍，然后带着问题来看这篇文章"}, {"id": "6844904112409018376", "title": "Vue + 高德地图画矢量图", "desc": "功能需求引入并创建地图支持鼠标工具鼠标画矢量图（线、圆、矩形、多边形）支持矢量图编辑、获取各点经纬度及求面积等操作自定义鼠标右键事件创建地图对象插件介绍（plugin）使用步奏鼠标画矢量图支持矢量图编"}, {"id": "6844903553983578126", "title": "Vue+vux好用的空白项目模板", "desc": "在vue移动端开发中，vux是一个比较好的UI模板，这个项目集成了vux，并在webpack中做了一些优化，避免开发过程中出现版本依赖，热更新出错更奇怪的问题，可以当作各种项目的一个空白模板"}, {"id": "6844904201781248007", "title": "vue flask nginx socketio实现服务器推送（demo实现一个聊天室）", "desc": "1. 前言 服务端推送是一种服务器主动给客户端发送的技术，主要用于实时对客户端进行消息推送，如天气预报、聊天功能等。 在websocket api出现之前，由于http1.x的缺陷，导致通信只能由客户端发起，用户想要获取到实时数据变化，就要不停的向服务器发送请求，这种方法我们一…"}, {"id": "6844904168604303368", "title": "Vue - 过渡 & 动画", "desc": "Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。包括以下工具： 使用 <transition> 标签来包裹需要过渡的元素，v- 是这些类名的默认前缀。标签内写入name属性并命名 <transition name=\"my-transition\">，那么…"}, {"id": "6909381577176776712", "title": "vue-cli2&vue-cli3/4", "desc": "webpack：是个模块打包工具，把项目中的各种格式文件都作为模块进行统一打包编译。 没有出现在package.json中，说明项目没有直接依赖webapck，看了配置之后发现，是vue-cli-service进行的依赖处理。"}, {"id": "6844903613806936077", "title": "手把手教你mockjs实际项目快速搭建", "desc": "个人对mock的理解和应用场景. 根据自己的实际工作项目,手摸手教你进行详细的mockjs部署说明,而不是网上千篇一律照搬官网的简单实例.看完之后直接就可以在自己的项目中进行使用,满足正常的工作项目需求. 这种学法与通过node的dev-server实现MockServer的优…"}, {"id": "6844903975796342797", "title": "抽离配置，几分钟快速创建和修改表单", "desc": "本文志在通过合理的配置，可以增加或减少一行代码，就能轻松增加表单项。 用element-ui的表单组件的时候，还是有点不顺手。跟用表格的感觉差不离，但优雅的使用 element-ui 中的 table 组件很棒的解决了这个问题。模仿这个，自己也简单的抽离了表单的配置。不过这并不…"}, {"id": "6844904025691963399", "title": "[Nuxt 系列 05] 基于 Nuxt Plugin 和 axios 模块的接口组织模式", "desc": "总而言之，我们没有 restful 风格的 api，也无缘受用那种“优雅”喽，但总体的思路依然值得借鉴。而要解决的问题也与常规使用 axios 需要解决的问题大致相同，比如将所有的接口定义统一组织起来方便管理；比如设置全局的拦截器，在请求实际发出前以及响应触达之初做一些全局统一…"}, {"id": "6844903889783767048", "title": "位运算在vue权限路由中的应用", "desc": "本质上，角色就是一组权限的集合。 在项目中需要进行权限控制的路由可能是动态变化的。也许领导说某个页面现在不需要权限控制，然后过两天又需要了。。。 所以在后端维护一张route表，每个路由对应一条记录，id自增，记录路由的url，是否启用等。这样所有需要权限控制的路由都分配了一个…"}, {"id": "6844903790164836365", "title": "你也许不知道的Vuejs - 最佳实践(3)", "desc": "相信大多数使用 Vue 项目都会面临国际化的问题，而 vue-i18n 便是国际化的不二之选，它用起来非常简单，但是同时也会带来一些问题和挑战。本篇是个人在项目上国际化时一些经验的总结，希望能在国际化的道路上帮到你。 看起来是不是很简单，引入 vue-i18n 后，它会在 Vu…"}, {"id": "6844904110215397390", "title": "2020前端技术面试必备Vue：(四)Vuex状态管理", "desc": "前三章陆续已经更新了Vue基本使用 和Vue Router的基本使用，如果你读了前三篇文章的话，并且掌握差不多，那么你现在可以开发简单的应用了，例如Blog，电商网站........唯一不足的是，随着你的业务需求不断增加，页面中的状态数据也不断庞大，维护起来就特别困难了，Vue…"}, {"id": "6870317687004725261", "title": "跨平台文件在线预览解决方案（三）- LibreOffice vs OpenOffice", "desc": "突然有一天在业务系统中发现OpenOffice转换word为pdf时，出现个别中文字丢失以及格式发生变化。这在业务系统中预览合同等重要附件是致命的。Google了半天也没找到问题所在。于是采用LibreOffice进行转换，看看转换效果。office文件在线预览原理一样，先转换…"}, {"id": "6844903550393253895", "title": "利用jsdoc为vue项目生成漂亮的文档", "desc": "jsdoc是前端自动生成文档所常用的工具。我们只要按照jsdoc的语法来书写注释就能顺利的生成一片很漂亮的文档。 只是jsdoc针对的是js文件，对于.vue文件似乎就有些无能为力了。不过既然vue这么人气，相信一定也会有相应的工具。在找了一圈之后，果然找到了一位前辈写的jsd…"}, {"id": "6973080514215280647", "title": "Vuex系列(四) -- 辅助函数mapMutations解析", "desc": "这是我参与更文挑战的第13天，活动详情查看： 更文挑战 介绍 之前我们已经完整介绍了整个Vuex, 回看可以点击文末的友情链接进行查看。 mapMutations是Vuex的mutation的辅助函数"}, {"id": "6935798982820134948", "title": "重学Vue【Vue的 render函数】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 在 Vue实例挂载的实现 中可以看到 render 函数是Vue实例挂载渲染的重点，那本篇过说一下 vm…"}, {"id": "6844903588951490574", "title": "Vue作者尤雨溪：Vue 2.0，渐进式前端解决方案", "desc": "前端框架的存在是为了解决什么问题？在众多的框架之中，Vue独具魅力之处何在？为什么说其背后的核心思想是渐进式？Vue究竟火到什么程度？最近发布的Vue2.0又做了哪些改进呢？Vue和Weex又是怎样的一种合作？ 2016年10月20日，Vue Technology LLC 创始…"}, {"id": "6844903686779437064", "title": "浅析Vue源码（一）—— 造物创世 ", "desc": "声明：英文注解为尤雨溪大神原著，中文为本人理解翻译。水平有限若理解有误请以原著为准，望指正，见谅哈~ 那么在这次实例化的过程中，究竟发生了哪些行为？让我们来一探究竟。打开Vue的源码文件，其核心代码在src/core目录下。下面我们从入口文件index.js开始进入： 这里简单…"}, {"id": "6920093423009693704", "title": "vue-router 下 iframe 的重载问题", "desc": "而 BrowserView 则是由 Electron 主进程控制，调用成本较高，并且是置于窗口的最顶层，会覆盖父窗口的 tooltip，效果不理想，最后就只有 iframe 可供使用。但是使用过程中发现，当路由切换后，iframe 会重载，里面的所有状态都会重置。 首先想到 v…"}, {"id": "6975123682498707469", "title": "7个实用的Vue开发技巧", "desc": "7个有用的Vue开发技巧 1 状态共享 随着组件的细化，就会遇到多组件状态共享的情况，Vuex当然可以解决这类问题，不过就像Vuex官方文档所说的，如果应用不够大，为避免代码繁琐冗余，最好不要使用它，"}, {"id": "6844903621197299726", "title": "[转] 如何实现 React 写小程序-1", "desc": "随着大前端蓬勃发展, 冒出越来越多的端, 最火的当数最近出现的微信小程序. 但是无论是 微信小程序 , 还是 支付宝小程序, 或者 快应用 都有一个明显的缺点, 虽然他们还是按照一定的 js html css 标准作为开发方式, 但是他们都与当前所有主流技术有相当大的壕沟. 虽…"}, {"id": "6912718818276016136", "title": "理解Vue修饰符sync", "desc": "当我们在子组件中想要修改通过props绑定的外部组件里的数据时，Vue不支持我们直接在子组件中进行修改，子组件没有修改父组件数据的权力，推荐我们利用EventBus事件中心，在vue实例上就含有$emit接口来触发事件，$on来监听响应事件，$off来移除事件的监听，所以在子组…"}, {"id": "6844903541824307213", "title": "走进snabbdom—Vue2背后的Virtual-DOM的机制", "desc": "snabbdom是一个Virtual-DOM的实现库，它专注于使用的简单以及功能和的模型化，并在效率和性能上有着很好的表现。如果你还不知道什么是Virtual-DOM技术，它是一种网页中通过diff算法来实现网页修改最小化的方法，react底层使用了这样的机制来提高性能。 从V…"}, {"id": "6844903893265022990", "title": "【VueSSR系列二】clientManifest与bundle的处理流程解读", "desc": "上一节讨论了VueSSR的构建流程，构建出来的clientManifest和serverBundle最终会被转换成html，这一节我们深入vue-server-renderer的核心内容，看看它们都经过了哪些的处理。这一节的内容包括： vue-server-renderer提供…"}, {"id": "6844903558307921933", "title": "Vue风格指南小结", "desc": "组件的 data 必须是一个函数。 当在组件中使用 data 属性的时候（除了 new Vue 外的任何地方），它的值必须是返回一个对象的函数。 Vue希望每个组件实例都相对应地管理自己的数据，而不是在复用组件时各个组件之间出现数据混乱的情况，所以要求每个实例必须生成一个独立的…"}, {"id": "6844903885534937101", "title": "【Vue原理】Component - 源码版 之 创建组件VNode", "desc": "每个流程涉及源码都很多，所以每个流程写一篇文章。没错了，今天讲的就是 创建组件 VNode"}, {"id": "6951764214188867597", "title": "优雅编程：JavaScript代码优化常见的3个小技巧", "desc": "在代码Review过程中，享受让代码变得优雅是一件很有成就感的事情，本文总结了项目开发中常见的3个代码优化的技巧，这些技巧在VUE项目中有比较多的使用场景，不妨尝试去编写出高质量的代码。神奇的扩展运算"}, {"id": "6983674469977948174", "title": "Vue 2.0源码略读-- 实例挂载的实现", "desc": "实例挂载的实现 new Vue() 执行到到最后，会执行vm.$mount(vm.$options.el) 函数进行实例挂载，今天我们来看下这个函数的实现过程呢 版本 运行时 + 编译器(compil"}, {"id": "6900173749652783117", "title": "深入理解Vue中的Typescript(三)-vue2项目当中使用Typescript", "desc": "0.目录深入理解Vue中的Typescript(一)-es语法的类属性和装饰器深入理解Vue中的Typescript(二)-vue_component源码分析和Typescript语法深入理解Vue中"}, {"id": "6906371672018780173", "title": "Vue有关数据操作的总结", "desc": "computed是计算属性：减少模板{{}}的复杂度。 在模板中放入太多的逻辑会让模板过重且难以维护。对于任何复杂逻辑，你都应当使用计算属性 把复杂的运算逻辑写到computed的函数里面，再在模板里引用就使逻辑变得简单明了了 这种方法通过一个空的Vue实例作为中央事件总线（事…"}, {"id": "6951683052779241485", "title": "vue源码解析（一）", "desc": "先决条件需要能够熟悉使用 vue ，了解vue属性和方法。带着问题去看源码熟悉ES6或者Typescript语法确定源码的版本，我看的是 2.6.12从哪文件开始看vue源码？现在前端开发，都是用 n"}, {"id": "6844903869403660301", "title": "【Vue.js 牛刀小试】：第十三章 - Vue Router 基础使用再探（命名路由、命名视图、路由传参）", "desc": "在上一章的学习中，我们简单介绍了前端路由的概念，以及如何在 Vue 中通过使用 Vue Router 来实现我们的前端路由。但是在实际使用中，我们经常会遇到路由传参、或者一个页面是由多个组件组成的情况。本章，我们就来介绍下在这两种情况下 Vue Router 的使用方法以及一些…"}, {"id": "6974795550759583751", "title": "Vue.js 源码学习 - 组件化（上）", "desc": "所谓组件化，就是把页面拆分成多个组件，每个组件依赖的 CSS、JavaScript、模板、图片等资源可以放在一起开发和维护。组件是资源独立的，组件在系统内部可复用，组件与组件之间可嵌套。"}, {"id": "6924615277330038798", "title": "Vue.js源码学习——mount实例的挂载", "desc": "在这个文件中可以看到在Vue的原型上重新定义了$mount方法。在重新定义之前，可以看到Vue的原型上是已经存在了$mount这个方法的，重新定义的目的就是区别于runtime-only版本，在这之前需要compiler。 el = el &#x26;&#x26; query(…"}, {"id": "6974770545027973151", "title": "[咖聊]  您瞅啥？瞅 reactive", "desc": "[咖聊] 从响应式数据、再到依赖收集和派发更新，用一个栗子 🌰 串联整个过程，详细分析了响应式原理。"}, {"id": "6900172425426632718", "title": "深入理解Vue中的Typescript(一)-es语法的类属性和装饰器", "desc": "在项目目录中创建babel.config.js文件。 在项目目录中创建babel.config.js文件。"}, {"id": "6844903635843809294", "title": "Flux 深度解读(翻译)", "desc": "FLux 是 facebook 用于构建 Web 客户端的一种应用架构。它利用单向数据流，来帮助复杂的 React 组合组件的状态管理。它是一种模式，而不仅仅是一个框架，你可以不需要写任何新代码来将 Flux 直接应用到你的应用当中。 基于 Flux 的应用程序需要包含三个主要…"}, {"id": "6844904194416066567", "title": "Vue 2.x API系列之全局配置（一）", "desc": "同，值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。 optionMergeStrategies 主要用于 mixin 以及 Vue.extend() 方法时对于子组件和父组件如…"}, {"id": "6844903749018714119", "title": "vue 源码学习（一） 目录结构和构建过程简介", "desc": "vue框架使用了Flow作为类型检查，来保证项目的可读性和维护性。vue.js的主目录下有Flow的配置.flowconfig文件，还有flow目录，指定了各种自定义类型。 这3条都是构建vue的命令，后2条是根据需求添加对应环境参数。运行npm run build时会执行no…"}, {"id": "6993998804953333797", "title": "No.8 vue-element-admin 学习使用（三）vuex学习，登录方法分析", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 由于保存登录状态用到了vuex，之前没系统学过vuex，先学一下vuex吧。 vuex叫做状态管理模式集中的存储组件的状态，我的理解就是存数"}, {"id": "7004829836376178696", "title": "vue3之ts入门", "desc": "​  本文是ts入门学习的记录，如有问题欢迎大家指出。 一、数据类型 1、原始类型 Number String Boolean BigInt Symbol Null Undefined 其中 null"}, {"id": "6990251351842226183", "title": "不必翻墙，安装vue浏览器插件", "desc": "Google chrome 浏览器开发vue项目时，需要安装vue浏览器插件。Vue.js devtools可以方便查看vue组件，events, 路由，vuex等信息。"}, {"id": "6974287967573671966", "title": "自动化注册组件，自动化注册路由--懒人福利（vue，react皆适用）", "desc": "开头 本菜鸡自从入职以来，一直在做相关的entry task，task1在上一篇文章中指出。此篇文章记录一下我在task2中的奇思妙想。 task2是从0到1实现一个vue2+ts的项目，说实话vue"}, {"id": "6844904182806216712", "title": "看到赚到！重读vue2.0风格指南，我整理了这些关键规则", "desc": "又是一个阳光明媚，风和日丽的周末，有人陪女神去逛街，有人陪女神去看电影，小编却默默的拿出电脑。哈哈哈，不是小编屌丝，女神正坐在旁边玩手机（感觉不是屌丝才怪）。 这两天小编重读了一遍vue2.0官网的风格指南，整理了这九条关键规则。 现在需要删除第二个元素。下面我们分别在渲染列表…"}, {"id": "6844903993768935431", "title": "构建大型 Vue.js 项目的10条建议", "desc": "下面是我在开发大型 Vue 项目时的最佳实践。这些技巧将帮助你开发更高效、更易于维护和共享的代码。 今年做自由职业的时候，我有机会开发了一些大型 Vue 应用程序。我所说的这些项目，Vuex store 超过十个，包含大量的组件（有时候几百个）和视图页面。对我来说这是个很有益的…"}, {"id": "6844904185264095246", "title": "Vue首屏加载速度优化，提升80%以上", "desc": "1. 首先安装webpack的可视化资源分析工具，命令行执行： 2. 然后在webpack的dev开发模式配置中，引入插件，代码如下： 3. 最后命令行执行npm run build --report , 浏览器会自动打开分析结果，如下所示： 可以看到vue全家桶相关依赖占用了…"}, {"id": "6968645165984514055", "title": "【实战技巧】VUE3.0实现简易的可拖放列表排序", "desc": "流莺书签,一个用来收藏网站的项目 使用Vite+Vue3+Ts进行开发,具有书签、标签的增加,删除,修改,一键导入,导出配置,自动获取网站图标、标题等功能 你一定会喜欢的!"}, {"id": "6983902063918841892", "title": "我靠vue多页面机制成功进入大厂", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 在我们开发一个项目的摸鱼时间中，项目不知不觉的越做越大，页面加载速度越来越慢，测试都怀疑你是不是写了很多隐形bug"}, {"id": "7000741662783701000", "title": "Vue3快速构建自己博客的MD编辑器", "desc": "最近开始频繁尝试着如火如荼的Vue3，于是开始对之前随手写的Ant Design后台下手了，准备使用Vue3 + Element Plus 重构一波，但是之前用来写博客文章的MD编辑器还不适配Vue3"}, {"id": "6844903568256794631", "title": "2018美团前端面试题，两年经验，你能答对几道？", "desc": "注意：部分答案为自己整理，正确性未知。代码运行结果部分亲手运行，没问题。 实现 vue 中的 on,emit,off,once，手写代码。 vue 的双向绑定机制？详细介绍。"}, {"id": "7000973688732385293", "title": "Vue 服务端渲染（SSR）和  NUXT 的介绍", "desc": "spa单页面seo不友好，因为vue的话是只有一个HTML页面，实现页面的切换是通过监听router进行路由分发，结合ajax加载数据进行渲染的，但是搜索引擎爬虫识别不了js，所以就会考虑用SSR处理"}, {"id": "6980356595255345183", "title": "理解Vue应用实例和组件实例", "desc": "从理解基本使用到模拟实现~~本文是Vue3系列的第3篇，关于应用实例和组件实例，一起来看看吧~~~~"}, {"id": "6996678069901606942", "title": "初始vue3，小试牛刀~", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 vue3中文文档 https://www.vue3js.cn/docs/zh/api/application-config.html 英文"}, {"id": "6844903682467856397", "title": "Vue页面跳转动画效果实现", "desc": "现如今移动端APP对用户体验方面的要求越来越高了，最近致力于用户体验优化，因为需要实现类似APP页面切换的动画效果，百度google搜索资料不是很全，所以自己写文档，在实现效果的基础上，顺便恶补一波VueRouter及CSS过渡动画的知识点，欢迎有兴趣的朋友多多指教。 创建vu…"}, {"id": "6981356417064108062", "title": "Vuex4 对 TypeScript 并不友好，所以我选择 Pinia", "desc": "为什么采用 Pinia ? 由于 vuex 4 对 typescript 的支持让人感到难过，所以状态管理弃用了 vuex 而采取了 pinia。"}, {"id": "6998457289917071396", "title": "关于写vue时候发现的那些坑（三）", "desc": "第三波，此篇讲下修饰符，用的好可以优化很多代码。每次写文章就是想到哪里写到哪里，但都是可以用的，希望对你有帮助"}, {"id": "7006916312362385415", "title": "Vue3框架原理学习实现（二）-vnode和mount", "desc": "目的 这次主要目的是实现vue3和react框架中的主要的vnode虚拟节点的初步简单实现和如何渲染挂在到真实的dom节点上面 相关博客 相关视频 虚拟dom 为什么vue和react框架中要用虚拟d"}, {"id": "6922276550004080653", "title": "从设计模式理解 Vue 响应式（多图警告）", "desc": "官方解释： Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新 ，简单说就是数据发生改变视图会做出相应的更新，视图发生变化。 例如 input 输入，数据也会做出对应的变化。 我们来看一个响应式…"}, {"id": "6955395084518948900", "title": "Vue3 - setup script超爽体验，你值得一试", "desc": "Vue3已经发布很长一段时间了，相信大多数前端人都已经上手把玩过了，其中比较大的一个特性就是setup方法。 现在我们一起去看一下一个实验性功能：setup script。"}, {"id": "6844903927465377799", "title": "Vue基础篇：非父子组件间的数据传递", "desc": "Vue官方对于vue框架的定义是轻量级的视图层框架，当项目中出现很复杂的数据传递时（主要在于同级组件之间需要进行数据传递的话，如果单纯地靠一层层的传递，可能会让项目变得更加复杂），所以单纯依靠Vue框架是解决不了复杂的数据传递的，此时我们需要引入一些工具或者设计模式来解决vue…"}, {"id": "6844903927465377805", "title": "Vue基础篇：父子组件间的数据传递", "desc": "一、父组件间传值父组件向子组件传递数据：通过属性传递数据；子组件接收数据：通过propsprops的讲解：注意：不要直接修改父组件传递过来的数据，可以通过在data中声明属性，接收父组件传递过来的内容"}, {"id": "6844904137004417031", "title": "vue2.+之nextTick全面解析", "desc": "这个函数很简单，vue2.2.6版本 450行开始。 这个函数就是$nextTick内实际调用的函数。 接下来，是vue分了三种情况来延迟调用以上这个函数，因为$nextTick目的就是把传进来的函数延迟到dom更新后再使用，所以这里依次优雅降序的使用js的方法来做到这一点。 …"}, {"id": "6938392292101193736", "title": "Vue源码学习——判断运行环境", "desc": "模块模式使用了 JavaScript 的一个特性，即闭包（Closures）。现今流行的一些 JS 库中经常见到以下形式的代码： 上面的代码定义了一个匿名函数，并立即调用自己，这叫做自调用匿名函数（SIAF），更准确一点，称为立即调用的函数表达 (Immediately-Inv…"}, {"id": "6844903652344201230", "title": "a>b的那些事", "desc": "经常会遇到对比两个值大小关系的逻辑，常规的处理中我们都是处理两个数字或者数字类型的字符串。那么这里进行延伸拓展的练习，来避免一些开发中的采坑。 起因是自己在看《vuejs权威指南》里看到表单验证里，也就是validator.js里可以验证最小最大值的源码部分。 在上面的代码里我…"}, {"id": "6844903576947425294", "title": "使用Vue创建自定义表单inputs", "desc": "当我查阅Vue实现自定义的单选按钮或者复选框的示例时，发现他们要么没有考虑到v-model指令，要么就没有正确的实现。有一些自定义input的使用文档，但它没有解释自定义单选按钮和复选框如何使用，我将在下面的例子中将对这方面做出相应的阐述和解释。"}, {"id": "6844903806191271944", "title": "根据调试工具看Vue源码之watch", "desc": "我们的意图是 —— 监测app这个变量，并在函数中打下一个断点。 我们期待的是 —— 断点停下后，调用栈中出现相关的函数，提供我们分析watch原理的依据。 ... 看到需要经过这么多的调用过程，不禁心里一慌... 然而，如果你理解了上一篇关于computed的文章，你很容易就…"}, {"id": "6936938539053481997", "title": "VUE的模版、指令、修饰符", "desc": "1. template的三种写法 html中的{{n}}会自动被替换，@click也会自动的被理解并且添加上一个事件监听。 使用VUE实例的$mount进行挂载，需要注意的是，div#app将会被template中的内容所替换。 在该文件中使用&#x3C;template>标签…"}, {"id": "6844904160169590798", "title": "带你一步步了解vue2的数据响应式原理", "desc": "我们可以看到，在经过前面的一堆处理和检测后，observe函数被调用了，并且把data作为参数传了进去，从函数名我们也可以看出，这就是实现数据响应式的函数。 在经过了一系列判断后，如果这个对象没有被观测过，就会通过new Observer的方式进行观测，那我们来看看Observ…"}, {"id": "6844903972487036935", "title": "Vue 实用知识点", "desc": "Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTic…"}, {"id": "6936456624555065358", "title": "Java后端应该掌握的前端知识Vue入门（下）", "desc": "axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，所以需要注意的是因为axios是基于现代化游览器设计，所以古老的游览器并不支持。 主要用于异步计算。 可…"}, {"id": "6844903634837176327", "title": "Vue响应式系统是如何实现的", "desc": "最近深入学习了Vue\b实现响应式的部分源码，将我的些许收获和思考记录下来，希望能对看到这篇文章的人有所帮助。有什么问题欢迎指出，大家共同进步。 一句话概括：数据变更驱动视图更新。这样我们就可以以“数据驱动”的思维来编写我们的代码，更多的关注业务，而不是dom操作。其实Vue响应…"}, {"id": "6936071117635321886", "title": "手撸手完成网抑云音乐2 换肤之旅", "desc": "1. 换肤 首先要先将颜色变量提取出来"}, {"id": "6844904025041666061", "title": "源码阅读 - Vue的数据响应式原理", "desc": "没有像 Vue 和 React 这些具有数据响应式特性的前端框架之前，我们从服务端提供过的接口获取到数据要渲染在 html 页面上时，抑或是需要获取表单的值进行计算回显到页面上时，都需要建立很多 DOM 事件监听器，并进行许多的 DOM 操作。举个最简单的例子：用户在 html…"}, {"id": "6976623649830731784", "title": "【Vue2.x 源码学习】第二十篇 - 使用真实节点替换原始节点", "desc": "【Vue2.x 源码学习】第二十篇 - 使用真实节点替换原始节点；主要涉及以下几点：新老节点的更新方案；虚拟节点与真实节点映射；实现新老节点的替换；"}, {"id": "6917532594691112973", "title": "vue源码解析之监听观察者模式", "desc": "之前也看过vue源码，但发现没有记录下来，等问起的时候对细节记忆模糊，于是这次又花了一天调试源码，把理解到的东西记下来。这篇记录的是调试data、computed、watch、render之间的关系，computed、watch、render都是Watcher的实例。vue的入…"}, {"id": "6900193301069856781", "title": "Vue2基础-组件", "desc": "我们可以先看一个例子，观察一下什么是组件注册。 通过vue.component的方式注册的组件被称为全局组件，这一类之组件只要组成后，可以在任何位置使用。声明语法为： 通过创建函数对象，并在其他组件內通过components:{component-a,component-b,c…"}, {"id": "6844904019987546125", "title": "深入浅出Vue基于“依赖收集”的响应式原理", "desc": "然而，其内部深层的响应式原理可能很多人都没有完全理解，网络上关于其响应式原理的文章质量也是参差不齐，大多是贴个代码加段注释了事。本文将会从一个非常简单的例子出发，一步一步分析响应式原理的具体实现思路。 我们定义了这个英雄的生命值为3000，IQ为150。但是现在还不知道他是谁，…"}, {"id": "6899766387690962957", "title": "Gridsome", "desc": "Gridsome 是由Vue.js驱动的Jamstack框架，用于构建默认情况下快速生成的静态生成的网站和应用。 使用Vue.js，webpack和Node.js等现代工具构建网站。通过npm进行热重载并访问任何软件包，并使用自动前缀在您喜欢的预处理器（如Sass或Less）中…"}, {"id": "6844904045631504391", "title": "Vue基础知识系列(一)Vue的基本认识", "desc": "这是一个系列的笔记，记录学习Vue的过程，笔记都是基础知识。这个系列笔记主要参考了自己淘宝买的视频的笔记，里面还夹杂了自己的看法都是自己纯手打的。如果有需要Vue视频资源的可以加我wx：15732676936。 Vue.js是一套构建用户界面的框架，只关注视图层，它不仅易于上手…"}, {"id": "6893880467305529352", "title": "用原生实现Vue3，真香~", "desc": "解析：通过window.customElements方法可以创建自定义元素，里面的define方法就是用来指定自定义元素的名称，以及自定义元素对应的类。 这里有一个细节，自定义元素中间一定要用中划线隔开，不然是无效的。 这时候在这个类里面就可以定义元素里的所有内容了，这和Vue…"}, {"id": "6963805372779855885", "title": "vue2.0通信方式大全，看完你就懂了", "desc": "前言 vue是数据驱动视图, 所以对于vue来说组件间的数据通信非常重要。vue组件通信也是面试中常问到的面试题。熟练的掌握vue组件通信对于我们来说至关重要。那么组件之间如何进行数据通信的呢？本篇文"}, {"id": "7006550894028439559", "title": "基建 - Vue-cli3 脚手架搭建", "desc": "Vue-cli3 脚手架搭建，compression-webpack-plugin 开启Gzip压缩，image-webpack-loader图片压缩使用，uglifyjs-webpack-plugi"}, {"id": "7003280618473668639", "title": "Antd TreeSelect 树选择控件二次封装及原理", "desc": "主要对 Antd TreeSelect 树型选择控件进行了二次封装，而且解释了一些封装的基础知识，如属性vm.$attrs, 双向绑定model，监听器vm.$listeners等"}, {"id": "6844903586103558158", "title": "不好意思！耽误你的十分钟，让MVVM原理还给你", "desc": "众所周知当下是MVVM盛行的时代，从早期的Angular到现在的React和Vue，再从最初的三分天下到现在的两虎相争。 无疑不给我们的开发带来了一种前所未有的新体验，告别了操作DOM的思维，换上了数据驱动页面的思想，果然时代的进步，改变了我们许多许多。 啰嗦话多了起来，这样不…"}, {"id": "7006652939959795725", "title": "Vue3系列--5.Vuex实现数据持久化", "desc": "在项目中我们在很多地方都会用到数据的持久化，比如存储token的时候，或者电商平台里面我们的购物车里要保持之前加入购物车的商品。那么就让我们来看一下Vue3中是如何实现他的吧 1）首先：我们需要安装一"}, {"id": "6856668819344392206", "title": "Vue超好玩的新特性：在CSS中引入JS变量", "desc": "Vue这次更新诚意满满，不过大家都把关注点放在了 Composition-API 上了，没有注意到这些不起眼的边边角角，但就是这些边边角角却可以极大的提高我们的开发体验。"}, {"id": "7005790108066512909", "title": "element-ui图片走马灯应用", "desc": "安装element ui 一、在Vue项目中安装依赖，在终端输入安装指令：npm i element-ui -S 二、导入依赖，在main.js引入： 新建Carousel.vue组件 引入组件 成果"}, {"id": "6844904039612678152", "title": "Vue3 尝鲜", "desc": "anyway,咱们接着看咱们的/demo/index.js文件，可以看到，咱们用了setup, reactive等函数，这就是Vue3的Composition API，相对于Vue2的组件来说 3 可以让我们很简单的通过组合API的方式创建一个 基于Vue3 响应式 Web 应…"}, {"id": "7004444815878258696", "title": "【Vue源码】- 实现渲染函数【template -> 渲染函数render -> 虚拟Dom】", "desc": "目录 什么是虚拟Dom 什么是渲染函数 DomDiff高效更新视图 实现渲染函数【关键】渲染模块使用渲染函数根据初始化数据生成虚拟Dom -> 利用虚拟Dom创建视图页面Html -> 数据模型一旦变"}, {"id": "7004675228009758728", "title": "2x5 VueRouter - 进阶 - 滚动行为", "desc": "VueRouter 基础教程系列 🎉 滚动行为 创建路由器时，可以使用 scrollBehavior 方法来控制路由切换时页面的滚动位置。 例如，滚动到顶部、保持原先的滚动位置、相对元素位置、锚点滚动"}, {"id": "7004452058736623629", "title": "【Vue源码】- 编译器(compile)原理（2）", "desc": "目录 模板编译原理(compile) Parse解析器 Transform转换处理 Generate生成渲染器 总结 template code -> ast -> 优化处理后的 ast -> 渲染函"}, {"id": "6844903925632466951", "title": "Element-UI  技术揭秘（2）- 组件库的整体设计", "desc": "当我们去实现一个组件库的时候，并不会一上来就撸码，而是把它当做产品一样，思考一下我们的组件库的需求。那么对于 element-ui，除了基于 Vue.js 技术栈开发组件，它还有哪些方面的需求呢。 丰富的 feature：丰富的组件，自定义主题，国际化。 文档 & demo：提…"}, {"id": "7005360627363348487", "title": "响应式系统的依赖收集追踪原理", "desc": "为什么要依赖收集？ 先举个例子： 我们现在有这么一个 Vue 对象。 然后我们做了这么一个操作。 我们修改了 data 中 text3 的数据，但是因为视图中并不需要用到 text3 ，所以我们并不需"}, {"id": "6844904087046062087", "title": "吃透 Vue 项目开发实践｜16个方面深入前端工程化开发技巧《下》", "desc": "Vue 生命周期大概就是：一个从 Vue 实例的创建到组件销毁的一个的过程。 具体情况下，我们分为几个核心的阶段，并且每个阶段都有一套钩子函数来执行我们需要的代码。 组件缓存，activated 与 deactivated，这两个钩子也是一对的，分别表示被 keep-alive…"}, {"id": "6990134042234454047", "title": "5年前，学习 null 和 undefined ，现在有了新的认知，看看这位人才怎么说？", "desc": "许多编程语言都有一个称为null的非值。它指示一个变量当前不指向一个对象，例如，当它还没有初始化的时候。 相比之下，JavaScript有两个这样的非值：undefined和null。"}, {"id": "6844904149633466376", "title": "vue项目部署的最佳实践", "desc": "这两个问题可以从很多方面进行优化，今天我就从前端页面部署阶段来优化一下这两个问题。PS：以下内容都基于vue-cli3+。 路由使用按需加载后，打包生成的文件，每一个路由页面都对应一个js和css文件，入口main.js及其依赖则打包成了app.js和app.css，公共依赖都…"}, {"id": "6996396106372349983", "title": "使用 Vue3 开发 Dropdown 组件的几个核心要点", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 Dropdown 组件大家并不陌生，在操作项比较多的情况下，通常会使用这个组件归纳到一起，鼠标点一下，诶，展开菜单。如果自己一步步实现 D"}, {"id": "6984624840460238861", "title": "Vue2.x项目骨架屏注入(上)", "desc": "骨架屏是在页面数据尚未加载前先给用户展示出页面的大致结构，直到请求数据返回后再渲染页面，补充进需要显示的数据内容。"}, {"id": "6940190960609394695", "title": "万字长文！总结Vue性能优化方式及原理", "desc": "我们在使用 Vue 或其他框架的日常开发中，或多或少的都会遇到一些性能问题，尽管 Vue 内部已经帮助我们做了许多优化，但是还是有些问题是需要我们主动去避免的。我在我的日常开中，以及网上各种大佬的文章中总结了一些容易产生性能问题的场景以及针对这些问题优化的技巧，这篇文章就来探讨…"}, {"id": "6982528662864134175", "title": "小技巧系列 -- 如何实现类似 Radio 的效果", "desc": "需求 实现目标： 步骤 1. 画出图标 效果： 2. 绘制出点亮之后的效果 效果： 3. 绑定点击事件 效果： 绑定当前活跃项并渲染其样式 效果： 至此已完成"}, {"id": "6927278991988490253", "title": "Vue.js与ElementUI搭建无限级联层级表格组件", "desc": "今天，回老家了。第一件事就是回家把大屏安排上，写作的感觉太爽了，终于可以专心地写文章了。我们今天要做的项目是怎么样搭建一个无限级联层级表格组件，好了，多了不多说，赶快行动起来吧！ 到底是啥样子来？我们来看下。 正如你所看到的那样，这个组件涉及添加、删除、编辑功能，并且可以无限级…"}, {"id": "6972375376249126949", "title": "小程序和H5手写签名", "desc": "最近在做项目遇到一个需求，要手写签名并将canvas图片转化为base64。网上找来两个例子，一个是H5页面用vue实现的，一个是小程序原生。 围观地址： H5移动端项目实现手写签名功能 vue实现手"}, {"id": "6930376993804386311", "title": "Vue3组件（三）把别人的组件拿过来再封装一下", "desc": "是的，在开源世界里面就是这么简单，我们完全可以在开源的UI库的基础上实现自己的想法。 便于切换UI库。 可以应对版本升级。 可以循环绑定控件。 折腾后自己用着舒服。 一般UI库都会提供一些列的控件，比如form分类下面的控件，就可以有十多个，那么要封装的话，首先就要确定接口，否…"}, {"id": "6844903618403893262", "title": "Super-Vuex 状态管理最佳实践", "desc": "Vuex作为vue中核心的状态管理组件，时常遇到编写繁琐的问题。是否我们可以通过一套方案就可以达到只定义数据结构而不需要写无数的mutation getter 以及action。 所以，原则上我们是让vuex变的更加轻量和简单。 Super-Vuex 能够帮你完成这些工作。我们…"}, {"id": "6881918921323216910", "title": "Nuxt/Vue自定义Topbar+Tabbar导航组件|vue仿咸鱼Tab凸起", "desc": "前言创建组件在components目录下新建headerBar.vue和tabBar.vue页面。然后，在plugins目录下新建componentsInstall.js文件并引入即可。如上图：在Nu"}, {"id": "6955359770928906277", "title": "上车！Vue2.x + Webpack4.x + Typescript", "desc": "技术在于折腾！新鲜出炉的Vue2.x +Webpack4.x +Typescript完整配置代码带你完美升级vue2.x-cli"}, {"id": "6985810597627559973", "title": "vue如何实现对新增数据进行监听", "desc": "在对vue实例data中的数据进行操作时，因为vue是mvvm设计模式，vm层实现数据双向绑定，原理是Object,definePrototype(),而这个函数的触发是通过数据劫持（ Observe"}, {"id": "6915202107469463565", "title": "开发问题总结（web/小程序/H5）", "desc": "element-ui的<el-table/>组件使用单选按钮场景：单选radio按钮显示了省略号/序号,并且单击行radio按钮会全选。解决办法：设置唯一的label值，解决单击全选的问题，使用@ch"}, {"id": "6844903715250389006", "title": "Webpack之模块化优化", "desc": "当然，相信了解过前端模块化发展历史的童鞋，都应该听过IIFE、AMD、CommonJS等等，它们都是能够实现模块化的规范，直到ES2015出来后，才正式把模块化纳入其标准中。在谈到今天主题前，我们先简单讲解一下上面几种模块化方式的实现以及区别，对于后面将要讲到的webpack模…"}, {"id": "6844903822981070862", "title": "从0到1搭建element后台框架之权限篇", "desc": "首先还是谢谢各位童鞋的大大的赞赞，你们的支持是我前进的动力！上周写了一篇从0到1搭建element后台框架，很多童鞋留言提到权限问题，这一周就给大家补上。GitHub 现在大多数项目都是采用jwt授权认证，也就是我们所熟悉的token登录身份校验机制，jwt的好处多多，由于jw…"}, {"id": "6844903545410420749", "title": "Vue组件开发实录：组件的三种调用方式", "desc": "之前在写fj-service-system的时候，遇到了一些问题。那就是我有些组件，比如Dialog、Message这样的组件，是引入三方组件库，比如element-ui这样的，还是自己实现一个？虽然它们有按需引入的功能，但是整体风格和我的整个系统不搭。于是就可以考虑自己手动实…"}, {"id": "6969552236393267207", "title": "Vue3--父子通信", "desc": "通过setup()函数通信 在Vue3中,$on被移除,且setup函数中this指向undefined,并不指向Vue实例对象,所以无法使用Vue2中this.$emit()方法进行父子通信,但可以"}, {"id": "6844904110790049805", "title": "vue中methods的方法执行与watch触发顺序探究，nextTick异步更新队列的影响", "desc": "背景父组件子组件当点击父组件button后，打印结果为项目原本计划是，在改变父组件data值后，再获取子组件中props的值等后续操作，但目前的结果是，在父组件改变data中值后，并没有立刻触发子组件"}, {"id": "6844904020948025351", "title": "重读 Vue 文档 --- 数组更新", "desc": "顾名思义，变异方法，即会改变调用了这些方法的原始数组。但由于数组是引用类型，存于栈内存中的地址是不会改变的，改变的是真实的数组值。包括： 即不会改变调用这些方法的数组，而总是返回一个新数组。例如：concat、filter、map、slice 等等。但我们使用非变异方法，可以用…"}, {"id": "6844903586644623374", "title": "如何在Vue项目中引入腾讯验证码服务", "desc": "后台验证ticket，如果通过，你就会收到短信（或邮件）验证码了。 然后当你频繁多次调用发送短信的接口，直到触发了需要调用腾讯验证码时（这个判断是后台告诉你的，比如我们项目中接口传参的JSON中有个isShow的变量，如果等于1则要触发腾讯云验证了，默认状态下是0，就是不需要腾…"}, {"id": "6844903712935116807", "title": "React和Vue中，是如何监听变量变化的", "desc": "把react源码和自己刚刚创建的项目关联起来，之前build源码到build文件夹下面，然后cd到react文件夹下面的build文件夹下。里面有node_modules文件夹，进入此文件夹。发现有react文件夹和react-dom文件夹。分别进入到这两个文件夹。分别运行ya…"}, {"id": "6844903843331833869", "title": "[Vue.js进阶]从源码角度剖析vue-router（一）", "desc": "Location接口表示其链接到的对象的位置（URL）。所做的修改反映在与之相关的对象上。 、 这样的还有其他的元素。它提供了全局操作document的功能，像获取网页的URL和在document里创建一个新的元素。\" href=\"https://developer.mozil…"}, {"id": "6865945597875896333", "title": "深入了解v-model流程", "desc": "vue中v-model是一个语法糖，所谓的语法糖就是对其他基础功能的二次封装而产生的功能。简单点说，v-model本身就是父组件对子组件状态以及状态改变事件的封装。其实现原理上分为两个部分： 通过以上两个部分，实现了父组件的状态和子组件状态进行了绑定的效果。 在浏览器中打开上述…"}, {"id": "6900554496598867981", "title": "vue源码分析（七）", "desc": "initData函数会调用observe(data, true /* asRootData */)函数,observe函数首先会判断他是否是一个对象，如果不是一个对象，或者它是一个vnode，那么就不会接着执行。之后会判断传入的data是否有通过Observer类构造出的__o…"}, {"id": "6894606141087875080", "title": "[译]尤雨溪: Ref语法糖提案", "desc": "最近 ref 的语法糖引起了极大的争议，很多人也是没看 RFC 就直接开喷，虽然我也不喜欢这种语法，但还是有必要让大家看一看在 GitHub 上的提案，看看国外开发者们普遍都是些什么态度，是否和我们持有同样的观点，提案是 RFC 228，但 RFC 228 其实是为了方便与另一…"}, {"id": "6844903616172539917", "title": "发布订阅模式，在工作中它的能量超乎你的想象", "desc": "再到现在的vue中，emit和on方法。他们都似乎不约而同的自带了发布订阅属性一般，让开发变得更加高效好用起来 就这两点吗？没错，点不在多，够用就行。我们都知道有一句很著名的谚语，罗马不是一天建成的 当然，胖子也不是一天吃成的。所以我们要想实现一个自己的发布订阅模式，以后在工作…"}, {"id": "6986286880652263431", "title": "vue后台管理系统常用的页面组件封装", "desc": "table 表格组件封装 e-table-list 使用 search 表格组件分装 e-search 使用 dialog 弹框 使用"}, {"id": "7006732877752696840", "title": "Vue案例 - TodoMVC", "desc": "官网地址：http://todomvc.com/ 准备工作 在项目目录下右键, 选择在集成终端中打开: 从 github 克隆项目模板。 首先要确保电脑安装了git, git的安装可以参考: http"}, {"id": "6994271464211873823", "title": "一文搞定vue3.0新特性-常用函数的使用与生命周期", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 一.vue3常用函数的使用 setup ref reactive toRefs 函数详解,vue3的生命周期钩子与vue2生命周期对比理解"}, {"id": "6977180856158781447", "title": "Vue - The Good Parts: template到render函数", "desc": "熟悉 Vue 的同学都知道，从 Vue2 开始，在实际运行的时候，是将用户所写的 template 转换为 render 函数，最终得到 vnode 数据（虚拟 DOM），一起分析下实现以及精粹"}, {"id": "6974024780366708743", "title": "Electron+Vue3 MAC 版日历开发记录(15)——使用 Naive UI重构开始", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903635017531405", "title": "VS Code 折腾记 - (14) 再来推荐一波大前端适用系列 (Node/React/Vue/小程序/主题/代码体验等) 的插件", "desc": "依旧是那句话,好的插件需要作者去创造,时间去迭代... Markdown Header Coloring : 给Markdown的标题区域添加一个亮瞎眼的颜色... 这里也不比较其他编辑器乃至IDE了,好不好用,用了就知道。 有不对之处请留言,会及时更正..."}, {"id": "7006694076175253518", "title": "Vue3 如何用 provide 和 inject 制作一个点击显示/隐藏列表的功能", "desc": "最近我用 vue3 做的项目里，有一个功能需要我点击网站上的 logo 即可展开一个边栏，再次点击即可隐藏 我用的方法是 provide 和 inject 以下是示意图 步骤 在 App.vue 里放"}, {"id": "7003158815663210527", "title": "Vue 冷知识（一）", "desc": "非Prop的Attribute--禁用Attribute继承、修饰符、Provide/Inject、程序化的事件侦听器"}, {"id": "7002141247171690532", "title": "vue计算属性computed源码解析笔记", "desc": "计算属性到底是个什么，为什么会被缓存呢？从源码的角度进行分析，并了解了两个版本中有关计算属性的一些区别，个人学习笔记，持续补充中"}, {"id": "6986466940864692232", "title": "你不知道的冒泡", "desc": "开始 冒泡大家肯定都非常熟悉，但是上周在看vue的源码时候，发现一种很有意思的冒泡场景，直接看代码。 dom中有父子div，父元素没有绑定事件，子元素绑定了点击事件，并同时给父元素绑定了一个点击事件，"}, {"id": "7002363131246673956", "title": "回首Vue3之路由篇（四）", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 这篇文章我们来讲一下Router 方法，这是我们经常使用的，我们需要知道怎么去使用它们。 Router 方法 路由增删 addRoute "}, {"id": "6979052248546410526", "title": "简述Vue Diff 算法执行过程", "desc": "前言 diff 算法是对比2颗 dom 树上不同节点的差异，相同的节点则继续保持，不同节点则进行更新 一般情况有2种算法： 把第一棵树上，每个节点，与第二棵树上每个节点对比，n个节点，对比n2次，非常"}, {"id": "6943930547311738894", "title": "11天打造基于vue3的可视化布局器", "desc": "我有很多朋友已经在企业级项目中使用vue3，有时我会问他们写vue3与vue2的体验有什么不同？我以为他们会说出无数类似于更快，更方便之类的赞美之词。可是，大部分回答都是“没什么区别，就是写法变了而已"}, {"id": "6950482024368963597", "title": "Vue自定义v-has指令，做按钮权限判断", "desc": "在Vue2.0中，代码复用和抽象的主要形式是组件。但有的情况下，仍需要对普通DOM元素进行底层操作，这时候就会用到自定义指令。"}, {"id": "6844904192142737422", "title": "前端！7个快速发现 bug 神仙调试工具", "desc": "如果你从事的是前端开发，就应该能理解调试代码还是很有难度的。特别是对于JavaScript，一个小错误有时会花费数小时来调试。对于不同的浏览器、操作系统和设备，错误又是不可避免的。 本文主要列出一些调试工具，你们可以自己根据情况来选择。 任何现代的 Web 浏览器都配有功能强大…"}, {"id": "6995803094479011848", "title": "vue中实现移动端页面自适应（flexible&px2rem）以及解决第三方组件库样式冲突问题", "desc": "最近学习了很多新东西，所以迫不及待的想分享给大家，知道此技术的同学可以不用看哦，此篇文章主要针对第一次了解此技术的同学，俗话说 最好的学习方法就是教会他人 ，所以我希望能跟大家一起学习，一起成长！"}, {"id": "7000350650882064398", "title": "Vue 父子组件传值", "desc": "Vue 作为一个轻量级的前端框架，其核心就是组件化开发。Vue 就是由一个一个的组件构成的，组件化是它的精髓，也是最强大的功能之一。"}, {"id": "6977648747044044814", "title": "在Vue 3中扩展Vue Router链接", "desc": "<router-link> 标签是一个很好的工具，可以在你的Vue应用程序的不同页面之间进行导航，但当导航到一个外部链接时，它不是一个工具，为此，你应该使用一个普通的<a> 标签。也许这只是我的问题，"}, {"id": "6844904184467161102", "title": "vue-Element-ui左侧无限级菜单实现", "desc": "最近项目中,要用到element-ui的无限级分类菜单，根据角色生成不同的递归数据，查阅了网上很多资料，发现很多都不太完整并且没有很多的延伸性。 到此就实现了左侧菜单的无限级了，应为现在给公司写的项目都是权限功能，路由方面呢大家可以随便写，公司项目做了权限：左侧菜单，按钮限制，…"}, {"id": "6844903688465547277", "title": "浅析 React / Vue 跨端渲染原理与实现", "desc": "当下的前端同学对 React 与 Vue 的组件化开发想必不会陌生，RN 与 Weex 的跨界也常为我们所津津乐道。UI 框架在实现这样的跨端渲染时需要做哪些工作，其技术方案能否借鉴乃至应用到我们自己的项目中呢？这就是本文所希望分享的主题。 什么是跨端渲染呢？这里的「端」其实并…"}, {"id": "6956416984057643015", "title": "mustache 模板引擎 - 03（完结）", "desc": "之前的笔记中，我们已经成功实现了将模板字符串编译为 tokens 的过程，剩下的工作就是将 tokens 结合数据解析成 dom 字符串。"}, {"id": "6933509352154365959", "title": "Vue3疑问系列(4) — v-model(vModelText)指令是如何工作的？", "desc": "上面例子的代码就不细讲(举这个例子就是想让大家养成看源码前,先学会思考,如果是你来实现vModelText,你会怎么想)，瞅瞅就好,下面才开始进入正题. 本次举的小例子, 不是源码中的单侧,而是我编写的小例子,为了让大家更直观的去理解. 这个例子很简单,就是在$\\color{r…"}, {"id": "6859271079764951047", "title": "vue3.x reactive、effect、computed、watch依赖关系及实现原理", "desc": "首先来了解2个全局常量和1个变量。 通过上面流程图不难看出computed的实现本质是effect. 3.把runner封装成一个 ref 对象并且返回。 相比 computed ，watch的实现逻辑相对复杂一些。这里只讲解大致实现原理。通过分析源码发现，watch的大致原理…"}, {"id": "6844903561181003789", "title": "[译] Vue让我喜欢的10个方面", "desc": "译者注：这篇文章写的比较浅显，只是作者从自身尝试使用Vue后的一些看法，所以不用期待这篇文章的深度，但也不失为刚开始使用Vue的用户提供多一些见解。 我喜欢Vue。当我第一次接触它的时候，也许我正经历着对JavaScript框架厌倦。我有使用Backbone、Angular、R…"}, {"id": "6844903509893054472", "title": "如何用 Vue.js 实现一个建站应用", "desc": "作为前端工程师，相信大家都写过不少网站和应用，我把网站简单的分为 “表现型” 和 “操作型”。表现型可以是一个产品介绍网站，而操作型的典型代表是管理后台。不久前有机会参与一个建站项目的设计与开发，它属于操作类型网站但需要更深一层的抽象，它是一个 “创建网站的网站”。本文尝试基于…"}, {"id": "6908656163697459207", "title": "uniapp的cli项目搭建", "desc": "项目创建创建xxx项目选择模板类型进入项目运行项目搭建配置项目遇到JSONschemafortheTypeScriptcompiler'sconfigurationfile解决方案：tsconfig."}, {"id": "6944937167991308319", "title": "一个vue项目中配置请求多个服务端解决方案", "desc": "花有重开日,人无再少年一、解决方案1.1 描述接口context-path后端的两个接口服务请求前缀，如下：1.2 vue.config.js配置1.3 axios修改1.4 发送请求总结"}, {"id": "6989205849595969543", "title": "Vue nextTick 数据-DOM更新原理及简单实现", "desc": "Vue之nextTick 参考: Vue源码详解之nextTick：MutationObserver只是浮云，microtask才是核心！ 看了大佬的文章，第一次记住了，隔了一段时间回想发现又忘了，写"}, {"id": "6966899815007404046", "title": "vue 中处理错误上报", "desc": "前言 平时在项目中你是怎么处理vue中的错误的？ try{}catch{} 上报错误数据，或者在vue中使用this.$message.error()抛出错误提示; 还有什么处理方法吗？ 在项目中从来"}, {"id": "6844903977557966855", "title": "Vue项目的热更新怎么辣么好用啊？原来200行代码就搞定（深度解析）", "desc": "大家都用过 Vue-CLI 创建 vue 应用，在开发的时候我们修改了 vue 文件，保存了文件，浏览器上就自动更新出我们写的组件内容，非常的顺滑流畅，大大提高了开发效率。想知道这背后是怎么实现的吗，其实代码并不复杂。 这个功能的实现底层用了vue-hot-load-api这个…"}, {"id": "6944873503522816030", "title": "vue3+ts(1)：vue3项目从0到1搭建", "desc": "本文是vue3+ts项目系列第1篇《vue3项目从0到1搭建》，在 react 和 vue 社区中也越来越多人开始使用TypeScrip..."}, {"id": "6992150379777490981", "title": "回首Vue3之指令篇（三）", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 这篇文章我们来讲一下v-show和v-if、v-else-if、v-else怎么去使用，使用它们的时候需要注意什么，以及它们之间的差异是什么"}, {"id": "6987638498555592711", "title": "vue-web全屏问题", "desc": "vue项目web端浏览器全屏问题、全屏时ESC按键事件监听不到问题，采用window.addEventListener监听resize事件来进行判断浏览器全屏是否开启状态和页面控制值状态"}, {"id": "6973287971961176100", "title": "[Vue warn]: Failed to mount component: template or render function not defined.", "desc": "最近公司使用Ele-admin这套vue+Element的框架进行开发系统，我这边在创建了页面，编写了页面功能之后，重新运行之后发现报错了，刚好假期有时间在家里磨了一下，找到了原因。 报错信息如下 出"}, {"id": "6844903765951119368", "title": "Vue添加数据视图不更新问题", "desc": "原因是因为Vue想要完成视图响应必须把JavaScript普通对象数据转为具有getter/setter的属性对象数据。当调用setter被调用时Vue捕获数据从而完成响应组件更新。 首先我们准备两组数据，，jsData和vueData。 运行可以看出jsData不在vue实例…"}, {"id": "6979885639319683086", "title": "[动态界面 json2render] 动态界面中加载自定义模板组件", "desc": "做动态界面或低代码相关的功能时，会遇到动态呈现的界面中某个位置要加载自定义组件的需求，而自定义组件也是用户保存的配置数据"}, {"id": "6844904130272559118", "title": "State of Vue（尤雨溪 4 月 16 日 PPT 汉化版，可下载）", "desc": "中文PPT下载原版英文PPT下载"}, {"id": "6854573211745517581", "title": "vue3.0 组件初始化流程", "desc": "本文简单介绍vue3.0 组件的渲染过程，为了更好说明组件渲染原理，本文会结合一个简单的例子来说明整个过程。 type: 如果是普通DOM元素，则为字符串；如果为组件节点则为组件定义对象。在我们例子，为一个组件定义对象"}, {"id": "6844903989411053581", "title": "Vue 3 中令人兴奋的新功能", "desc": "在上一篇文章中，我们了解了 Vue 3 将带来的性能改进。我们已经知道，用新的 Vue 3 编写的程序效果会很好，但性能并不是最重要的部分。对开发人员而言，最重要的是新版本将会怎样影响我们编写代码的方式。 如你所料，Vue 3 带来了许多令人兴奋的新功能。值得庆幸的是，Vue …"}, {"id": "6844903580860678158", "title": "面试分享：2018阿里巴巴前端面试总结 | 掘金技术征文", "desc": "脑子混了记得不多了，记得多少就记录多少吧。。。。 最开始的思路是用定时器实现，最后没有想的太完整，面试官给出的答案是用requestAnimationFrame。 由于之前没有用过这个 API 所以是现学的。 注：requestAnimFrame 和 定时器一样也头一个类似的清…"}, {"id": "6989167699888701476", "title": "一种Vue应用程序错误/异常处理机制", "desc": "现在构建前端应用程序不像以前那么简单，现在，应用程序更加复杂和多样。这就需要在构建前端应用程序的时候考虑很多，错误/异常处理是最重要的方面之一。"}, {"id": "6878912072780873742", "title": "前端下载普通文件与二进制流文件", "desc": "前端下载文件通常会遇到这样两种情况文件上传到资源服务器上，后端只保存了文件地址，前端拿到后端返回的文件地址直接下载。文件就存在后端服务器上（通常是临时根据前端参数动态生成，用完就删除），后端读取文件后"}, {"id": "6995718831721168910", "title": "No.13 vue-element-admin 学习使用（八）侧边栏和路由", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 之前学到了布局的整体结构，接下来分开学习每一个小组件的功能。首先是路由和侧边栏组件。 这个项目的侧边栏和路由绑定在一起的，在@/route"}, {"id": "6999177373853679646", "title": "高德地图雷达扫描效果实现", "desc": "一看就会，十分钟看完。后边用到不挠头发。 这个其实没什么难点，在地图上动效不是很常见，最主要的是我在搜索高德地图雷达扫描, 地图雷达扫描 得到的并没有直接能用的。某篇文章的评论下一位老哥评论说 我是很"}, {"id": "6953961160223752205", "title": "前端抢饭碗系列之Vue项目中如何做单元测试", "desc": "关于单元测试，最常见的问题应该就是“前端单元测试有必要吗？”，通过这篇文章，你将会了解单元测试的必要性，以及在Vue项目中如何能够全面可靠的测试我们写的组件。 单元测试的必要性一般在我们的印象里"}, {"id": "6997691183329705991", "title": "Vue3.0源码解析「reactive」篇 — 3.ref functions", "desc": "Ref 类型定义 Ref 接口定义了 ref 函数返回的类型签名，value 属性保存着 ref 的原始值，[RefSymbol] 是内部定义的唯一符号用于类型区分，_shallow 标识标志这个这个"}, {"id": "6999913232756375566", "title": "Vue 打包 chunk-vendors.js 文件过大解决方案（compression-webpack-plugin）", "desc": "主篇 Vue 打包 chunk-vendors.js 文件过大导致页面加载缓慢解决方案。 根据主篇内容继续通过 compression-webpack-plugin 插件处理 chunk-vendor"}, {"id": "6999819661927792653", "title": "【VUE】@keyframes接收以及使用Animate.css库", "desc": "在CSS里直接指定动画效果，这需要使用keyframes属性。 对于复杂的CSS动画可以借助Animate.css库实现，节省效率和时间成本。"}, {"id": "6991461000033599495", "title": "带你看Vue3源码: Vue.createApp究竟做了什么", "desc": "Vue3源码应该怎么读？Vue3组件的执行流程是怎样的呢？本文通过调试的技巧，使得各位在不需要了解详细源码实现的前提下，快速了解Vue3组件的执行流程"}, {"id": "6990610631204274190", "title": "Vue实战之从零搭建Vite2+Vue3全家桶（四）", "desc": "本篇主要介绍mock数据插件的使用。 为了解决前后端分离的开发场景中，前端进度比后端要快的情况下必须等待后端接口的问题，我们通过Mock数据的方式先进行前端方面的数据模拟工作。"}, {"id": "7000660847018115085", "title": "vue单页面和多页面的区别？", "desc": "定义 SPA单页面应用（SinglePage Web Application） ，指只有一个主页面的应用（一个html页面），一开始只需要加载一次js、css的相关资源。所有内容都包含在主页面，对每一"}, {"id": "6844904134332645389", "title": "如何在5天内学会Vue？聊聊我的学习方法！", "desc": "先说下为什么用学习Vue这个例子来谈我的学习方法？其实关注我的朋友很多都是从我的Github上面来的，大多数都是Java后端开发者，Vue作为一种前端技术，掌握的人并不多。所以使用Vue从零开始的学习过程为例子，对于大家学习新技术有很好的借鉴价值，接下来我们来聊聊我的学习方法吧…"}, {"id": "6963638903467147295", "title": "自己动手丰衣足食——自定义下拉框 vue 组件", "desc": "在页面制作的过程中，经常需要使用到下拉框组件，那就来尝试练练手自己做一个 vue 的下拉框组件吧（里面用到的 vue 相关知识较多）"}, {"id": "6985035488138788871", "title": "[Vue3] 指定ref类型，优雅地使用ref调用组件方法", "desc": "一、背景 在使用组件库时，经常需要通过ref获得组件实例，并调用组件上的方法。如el-form组件的validate校验方法，el-table组件的toggleRowSelection等方法。 vue"}, {"id": "6844904146718441480", "title": "vue3.0从0到1实战电商管理系统（第一天）", "desc": "任何事情都需要时间的沉淀，技术也不例外，今天编写Vue3.0系列的章节文章，只是希望能够比别人更早的去尝鲜一些新的技术，毕竟Vue3.0已经Beta版本了，所以里正式版本也不远了，提前去学习和了解，我们就会比别人有更多的时间去充分理解Vue3.0的特性，只有当你真正理解一门技术…"}, {"id": "6857856269488193549", "title": "『前端优化』—— Vue项目性能优化", "desc": "本文谨以自己的Vue项目经验来教你怎么在面试中说优化，如果有错误，有不足的，请指教，不吝指教，一起进步，找到更好的工作。如果觉得的本文对您有帮助，点个赞支持一下。 我个人认为性能优化可以从三个方面来进行，一是代码层面的优化，二是项目打包的优化，三是项目部署的优化。 开场白切记要…"}, {"id": "6844903929633849357", "title": "如何打造一套vue组件库", "desc": "组件库能帮我们节省开发精力，无需所有东西都从头开始去做，通过一个个小组件拼接起来，就得到了我们想要的最终页面。在日常开发中如果没有特定的一些业务需求，使用组件库进行开发无疑是更便捷高效，而且质量也相对更高的方案。 目前的开源组件库有很多，不管是react还是vue的体系里都有很…"}, {"id": "7004419251708624932", "title": "使用vue3的插槽遇到的问题", "desc": "今天在做页面表格的时候遇到个问题。平时开发的过程中我们都会将element的表格进行二次封装，使用的时候传入 在vue2中我的话进行了如下二次封装，具体的代码大家都可以看懂 那么我们在使用的时候传入所"}, {"id": "6958813201207148580", "title": "vue中的混合mixin的使用细致讲解（以分页功能为例）", "desc": "什么是混合mixin 首先，谈到混合mixin这个词，并不是只有vue中才有混合的概念。其实在css的预处理器less或者stylus或者scss中也有类似的混合函数mixin的概念。只不过css预处"}, {"id": "7001105759530401806", "title": "大列表渲染 v-if 缓存问题", "desc": "大列表渲染一般会采用虚拟列表的形式，在使用v-if来控制子节点显示的虚拟列表发现v-if缓存机制导致虚拟列表在不断刷新的过程中，缓存的dom越来越多占用越来越多的内存。"}, {"id": "6844904202385227789", "title": "很多人不知道 v-for 可以这样解构！", "desc": "最近发现我们可以使用v-for进行解构。 然后，Vue 在内部使用此函数来渲染列表。 你可以在这里为非作歹，只是不要太疯狂😉。 大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 Vue 确实支持对 Map 和Set对象进行迭代，但是由于它们在 Vue 2.x…"}, {"id": "6978977429477916702", "title": "Vue3--customRef节流运用、provide和inject组件、响应式数据的判断", "desc": "这是我参与更文挑战的第27天，活动详情查看： 更文挑战 Vue3--customRef节流运用、provide和inject组件、响应式数据的判断"}, {"id": "6844903505832968199", "title": "在vue项目中 如何定义全局变量 全局函数", "desc": "如题，在项目中，经常有些函数和变量是需要复用，比如说网站服务器地址，从后台拿到的：用户的登录token,用户的地址信息等，这时候就需要设置一波全局变量和全局函数，这两个设置不太难，而且有一些共通之处，可能有一些朋友对此不太了解，所以随便写出来分享一波。有需要的朋友可以做一下参考…"}, {"id": "6986923010280128542", "title": "Vue3 合理使用Composition API", "desc": "在学习 Composition API 时，官方有个深入骨髓的小栗子，没有看过页没关系，此文章对此精简和更具代码视觉的补充及说明如何合理使用。 例如有一个显示某用户的仓库列表视图。此外还有一个搜索列表"}, {"id": "6844904099092119565", "title": "vscode 配置vue+vetur+eslint+prettier自动格式化功能", "desc": "该配置用于vue开发，最终效果是保存时自动根据eslint对js、html和css代码进行格式化。 到这一步，编译的时候就能看到eslint报错和警告了，但是还不能实现保存自动格式化功能。 vscode的默认保存格式化功能还是很强大的，还可以再额外安装prettier插件，以优…"}, {"id": "7001803967500025892", "title": "Vue中如何使用TypeScript", "desc": "创建一个vue2的TypeScript项目 请看选中的绿色点，空格键进行选中取消，enter下一步 1. 在vue中书写ts的必备插件！ vue-class-component 强化 Vue 组件，使"}, {"id": "6854573206838673421", "title": "Vue3.x 深入浅出系列（连载三）", "desc": "大家好，我是Mokou，最近一直在做 vue3 相关内容，比如源码解析和mini-vue3的开发。 回顾下前几章的内容，在前几章中主要讲述了以下内容。 必须要知道的前置知识 effect 与 track、trigger 工作原理，具体详情请看公众号 -> 前端进阶课，一个有温度…"}, {"id": "6972929508185735181", "title": "Electron+Vue3 MAC 版日历开发记录(12)——Notion事件创建", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903714721890318", "title": "Vue.js 3.0 PPT（附部分中文翻译）", "desc": "EvanYou刚刚发布了最新的Vue3和他在VueToronto的演讲内容：TweetPPTVue3.0将会发生什么？更快更小更易维护更易于原生让开发者更爽VirtualDOM完全重写，mountin"}, {"id": "6991262505775398942", "title": "Vue3.x的响应式系统原理 | 8月更文挑战", "desc": "作为React的忠实粉丝和重度入读用户面对vue3.x的升级点也不得不稍稍get一下，也不算是尤其重要的一点吧，但至少是之一，就是这个响应式系统原理！Proxy！！！"}, {"id": "6996839484788572190", "title": "项目要上线了--该怎么优化", "desc": "实现步骤： A.生成打包报告，根据报告优化项目 B.第三方库启用CDN C.Element-UI组件按需加载 D.路由懒加载 E.首页内容定制 发布阶段清除console.log信息 安装一个插件（b"}, {"id": "6980133937829904421", "title": "设置token到请求头", "desc": "**「**本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 将token设置到header 这样token就已经放到header上了，代表设置成功 主要用途： 当输入"}, {"id": "6854573208352325640", "title": "vue实现用户长时间不操作，自动退出登录", "desc": "昨天后端开发人员让我实现一个网页锁屏，当时我一头雾水，问他为啥搞的跟安卓系统一样。他的回复是\"看起来帅点\"。"}, {"id": "6989491439243624461", "title": "webpack4 从零搭建 vue 项目开发环境", "desc": "前言 我相信不少朋友和我一样，刚开始学习 vue 的时候，都是用 vue-cli创建的项目，vue-cli确实是个好东西，让我们不需要关心 Webpack 等一些繁杂的配置。 然后直接开始写业务代码。"}, {"id": "6957696034449391646", "title": "vue动态组件的应用场景讲解-以tab切换效果为例", "desc": "问题描述 tab切换的场景在开发中会经常用到。当需要实现这种效果的时候，我们常常会想到下面的方式去实现这个效果。 方式一 使用display:none;去控制dom元素的显示与隐藏。从而实现，两个ta"}, {"id": "6844904080628776967", "title": "使用vue+node搭建前端异常监控系统", "desc": "首先先看看如何捕获异常。 js异常的特点是,出现不会导致JS引擎崩溃 最多只会终止当前执行的任务。比如一个页面有两个按钮，如果点击按钮发生异常页面，这个时候页面不会崩溃，只是这个按钮的功能失效，其他按钮还会有效。 上面的例子我们用setTimeout分别启动了两个任务，虽然第一…"}, {"id": "6844904158881906701", "title": "Vue2.5打造简洁视频webapp", "desc": "由于疫情原因，在家待了很长时间，所以在这段时间里对前端的知识进行了巩固及学习，然而在学了一段时间以后，有一种掌握了一些技术但却无处可施的感觉，于是脑海中就浮现了做一个项目的念头。有了这个念头之后，就开始想做什么呢？在一次逛B站的时候，对不起，我对它动手了（仿哔哩哔哩视频weba…"}, {"id": "6996829370329333791", "title": "一网打尽Vue组件通信", "desc": "作为Vue的核心，组件化为我们节省了大量的开发工作。页面作为组件的容器，在里面我们可以随意的嵌套，组合使用组件。但每个组件都是一个封闭的空间，在一个页面中，我们常常需要做到各组件之间的联动，这个时候我"}, {"id": "6995519561030172702", "title": "2021年最佳VUE3 UI框架推荐", "desc": "本文推荐几个比较流行的VUE3 UI框架，同时提供出色的开发人员体验，合理利用，又或者学习借鉴都是不错的选择，排名不分先后。"}, {"id": "7006126620201189389", "title": "Vue3源码系列之reactiveApi实现", "desc": "reactive    可以将一个对象编程响应式的，不管有多少层 shallowReactive   可以将一个对象编程响应式的，只管第一层 readonly   属性不能去更改，只能读，多少层都不能"}, {"id": "7004622916839014414", "title": "《Vue入门》| 一记敲门砖，敲近你我它！", "desc": "大家好，我是小菜。 一个希望能够成为 吹着牛X谈架构 的男人！如果你也想成为我想成为的人，不妨点个关注做个伴，让小菜不再孤单！"}, {"id": "6971311349267709966", "title": "Vue v3.1.0 Pluto 发布", "desc": "号外号外，Vue 3.1.0 Pluto 发布啦！ 随着 Vue 3 生态的逐步稳定，Vue 3 的迁移版本也提上了日程。 就在今天早些时候，Vue 官方团队正式发布了 v3.1.0 版本。"}, {"id": "7004989401239388168", "title": "vue3剖析之简版实现", "desc": "hello 大家好，🙎🏻‍♀️🙋🏻‍♀️🙆🏻‍♀️ 我是一个热爱知识传递，正在学习写作的作者，ClyingDeng 凳凳！ 听你们老说vue3、vue3的，我就想着去看看vue3到底有啥？"}, {"id": "6982341667483303950", "title": "手写 Vue2 系列 之 patch —— diff", "desc": "手写 Vue2 系列 之 patch —— diff。实现 DOM diff，完成响应式数据的更新。"}, {"id": "7005872479193595917", "title": "Vue3.2生产项目尝鲜，终于来了！", "desc": "vue+vite生产项目搭建系列已经完结，后面的就是开发中遇到的问题以及开发体验了。这次是Vue3.2生产项目尝鲜，因为要完成线上升级以后才发文，所以它姗姗来迟。"}, {"id": "6965382258341445646", "title": "Vscode开发工具怎么少得了这款插件（妹子开心了）", "desc": "前言 最近使用了Vscode编辑器写Vue前端代码，发现很坑，很多东西都不会提示，而且超级难找，所以这里记录一下小编的初使用过程中遇到的坑。 一、Vue VSCode Snippets插件安装 这里小"}, {"id": "6925668019884523534", "title": "【阮一峰推荐】学习 vue3 源码的利器", "desc": "但是当我们打开 vue3 的源码之后你会发现，代码量是如此之多。这个源码到底该从何读起。虽然 vue3 代码的可读性是很高的，但是架不住代码量大呀！！！ 就是自己把功能实现一遍，这对于我自己的收获也是巨大的。因为你要想实现这个功能的话，你必须要先理解，然后才可以把代码写出来。 …"}, {"id": "6844904084374290446", "title": "「面试题」20+Vue面试题整理", "desc": "本文已收录在Github github.com/Geekhyt，欢迎Star。 从镜片的厚度和黄黑相见的格子衬衫我察觉到，面前坐着的这位面试官应该是来者不善。我像以往一样，准备花3分钟的时间进行自我介绍。在此期间，为了避免尴尬，我盯着面试官的眉毛中间，不过面试官明显对我的经历不…"}, {"id": "6909247394904702984", "title": "【Vue3官方教程】🎄万字笔记 | 同步导学视频", "desc": "1. Vue2的局限性 2. 如何使用CompositionAPI解决问题 最佳的解决方法是将逻辑聚合就可以很好的代码可读性。 这就是我们的CompositionAPI语法能够实现的功能。CompositionAPI是一个完全可选的语法与原来的OptionAPI并没有冲突之处。…"}, {"id": "6989389890014150692", "title": "25个 Vue 技巧，开发了5年了，有些竟然还是第一次见！", "desc": "学习成为一个更好的Vue开发者并不总是关于那些需要花时间和精力才能掌握的大概念。掌握一些技巧和窍门，可以让我们的编程生活变得更容易--没有大量重复的工作。"}, {"id": "6999466892373000199", "title": "🖖 Vue2.x 改造 ⚡️ Vite", "desc": "前言 vite 已经发布大半年了势头很猛，github 活跃度非常高；webpack4.x 启动速度是 O(n)，vite 启动速度是 O(1)..."}, {"id": "6974223481181306888", "title": "ESLint 开始，说透我如何在团队项目中基于 Vue 做代码校验", "desc": "最近遇到了一个老项目，比较有意思的是这个项目集前后端的代码于一起，而后端也会去修改前端代码，所以就出现了后端用 IntelliJ IDEA 来开发前端项目，而前端用 VSCode 来开发前端项目的情况"}, {"id": "6999925226649681957", "title": "vue3.0+express从无到有建一个8080苹果影院", "desc": "​ 本篇文章从无到有讲述用vue3.0框架搭建一个8080苹果影院。分别从前端、比较基础的后端，简单的性能优化和项目在服务器部署上线四个方面讲述。"}, {"id": "6995731724365725710", "title": "vue3响应式proxy深度解析", "desc": "Proxy 概述 Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。 Proxy 可以理解成，在目标对"}, {"id": "7006958499217276941", "title": "vue3 reactive中的泛型使用", "desc": "vue3 reactive在使用时碰到类型兼容性问题，通过as const 和 泛型的使用来规避解决"}, {"id": "7004818185731964941", "title": "移动端左右滑动切换页面效果", "desc": "作为一名前端，经常使用网易音乐听歌的人，看到网易左右滑动即可切换页面的效果真的有点好奇。所以就去git找了点资料学习了一下。"}, {"id": "7007414957239173150", "title": "原来你是这样子的vue（一）", "desc": "模板编译 前述 本文的初衷是想让更多的同学知道并了解vue模版编译，所以文中主要以阶段流程为主，不会涉及过多的底层代码逻辑，对底层代码有所了解的点我 思考 html是标签语言，只有JS才能实现判断、循"}, {"id": "6906028995133833230", "title": "分享8个非常实用的Vue自定义指令", "desc": "在 Vue，除了核心功能默认内置的指令 ( v-model 和 v-show )，Vue 也允许注册自定义指令。它的作用价值在于当开发人员在某些场景下需要对普通 DOM 元素进行操作。 Vue 自定义指令有全局注册和局部注册两种方式。先来看看注册全局指令的方式，通过 Vue.d…"}, {"id": "6990636129133428773", "title": "vue 环境配置", "desc": "1.安装node.js node.js官网地址：https://nodejs.org/en/ 建议下载稳定版 2.运行vue代码 首次运行需要先安装依赖包 npm install npm run [配"}, {"id": "6942311413771665422", "title": "小试牛刀的 Vue3 多选框", "desc": "由于自己最近一直在使用 Vue3，本着学了不用就作废的原则就自己尝试着写了 UI 组件示例。而刚开始选择的就是多选框这个组件。 多选框 Checkbox 组件是平时使用频率蛮高的一个组件，我们现在一步步来完善自己的组件。 我们知道 Vue3 对于 v-model 的处理和以前稍…"}, {"id": "6967168354771861540", "title": "vue3的reactive的实现原理", "desc": "前提： 讲这个东西的时候，前提是大家对vue2的响应式源码有一定的了解 并且使用过reactive 这样大家心里会有一个很好的对比。不过没看过vue2源码也不重要，认认真真看vue3的源码也来得及，有"}, {"id": "6877395873362690061", "title": "（上）vue + axios 快速构建多页面应用H5移动端电商项目", "desc": "fastclick.js是处理移动端点击事件之后，出现300ms延迟，可以直接安装引入使用，我是直接下载js插件到本地再引入。 以上基本架构搭建完成，下面终于要进入页面功能开发，心情十分鸡冻，敲代码的日子才刚刚开始。一般开发项目之前，需要先分析页面需求，有哪些功能模块，技术选型…"}, {"id": "6914161974737633287", "title": "vue scoped踩坑记录", "desc": "坑【样式修改失败】前几天开发需求，遇到一个坑，我无论怎么修改样式都无法完成对公司内部的一个基础组件样式进行修改。经过排查，因为我在style标签上加入了scoped属性，于是我需要对scoped这个属"}, {"id": "6898126372896505863", "title": "用vue开发移动H5应用框架-第三章（config篇）", "desc": "前言本教程带你用vue-cli3.0开发一个开箱即用的移动端h5开发框架，本章讲的是正式开发前的准备工作。远程访问配置使用穿透外网和跨域的配置在项目链接时往往会遇到跨域的问题，通常由后端来配置处理，但"}, {"id": "6954551574664314911", "title": "Vue3+Vite系统基础模板（很基础，不喜勿喷）", "desc": "其实Vue3/Vite的文章已经很多了（很多大佬都有完整的项目），这里只是随笔记录一下我自己搭建最最最基础的系统模板（就几个基础页面）以及搭建过程踩的几个坑。（不喜勿喷哈）"}, {"id": "6844903824059006990", "title": "「中文翻译」Vue3的诞生之路", "desc": "因时间有限，文中翻译不对的地方还请指出，望海涵。想感受原汁原味还请移步上方链接。致敬尤大！ 在过去的一年中，Vue 团队一直在研究 Vue.js 的下一个主要版本，我们希望在 2020 年上半年发布该版本。（在撰写本文时，这项工作仍在进行中。）Vue 的新的主要版本的构想形成于…"}, {"id": "6992872216304025608", "title": "[求教]Vue双向绑定失效——bug记录", "desc": "简单的赋值操作却没有更新到页面上，双向绑定失效怎么办。同样的代码，不同分辨率竟然会出现这样的问题，等一位大佬指点原因所在"}, {"id": "6844903971161653255", "title": "VUE UI组件库按需引入的探索（2）", "desc": "在上篇文章 中，我使用纯粹的tres shaking方案来实现vui ui组件库的按需引入，最终结果差强人意。经过总结反思，我决定换一种方案，尝试 babel-plugin-component。已经有一大堆的先例，我再使用这种成熟的方案造一个轮子，实在是很没有必要，但是code…"}, {"id": "6990365390136147976", "title": "手写Vue2.0实现-简易版", "desc": "目标 初步掌握Vue2框架的底层原理 要点 先来个HTML文件 来看下执行效果😇🤓🤡 补充 如果觉得上述代码太乱，可以到我的github看完整版✔"}, {"id": "6928368607634128904", "title": "Vue实现的变量表达式选择器", "desc": "在input输入框中输入表达式在中台项目中是比较常见的场景。其通常是输入一个特定的字符时(如$字符)，显示下拉列表，用户点选下拉列表中的变量，然后继续在input输入框中输入其它运算符，组成一个表达式"}, {"id": "6844904080897212430", "title": "全平台（Vue、React、微信小程序）任意角度旋转 图片裁剪组件", "desc": "SimpleCrop 目前是全网唯一支持裁剪图片任意角度旋转、交互体验媲美原生客户端的全平台图片裁剪组件。 项目地址：https://github.com/newbieYoung/Simple-Crop。 交互体验媲美原生客户端。 在裁剪图片场景中，存在两个坐标系，其一是裁剪图…"}, {"id": "6859378614488530957", "title": "支付宝 h5 支付", "desc": "微信的 wap 端支付分两种，一种是微信内的公众号支付，一种是微信外的 H5 支付。 b.用户点击“取消支付“或支付完成后点“完成”按钮。因此无法保证页面回跳时，支付流程已结束，所以商户设置的 redirect_url 地址不能自动执行查单操作，应让用户去点击按钮触发查单操作。"}, {"id": "6884850140905996296", "title": "Vue 2.X版本对数组数据原型方法劫持的原理实践", "desc": "虽然本篇只是简单实践数组原型方法的劫持，但是想要完全理解为什么这么做，还是希望你可以对vue响应式的依赖收集有一定的理解。不太理解的小伙伴们可以看这边298行代码带你理解Vue响应式原理和next-Tick原理，最后手写一个自己的小demo Vue对对象的劫持是通过Object…"}, {"id": "6974334216825733157", "title": "vue实现浏览器代码在线编辑预览", "desc": "效果图如下： 右边可输入代码， 左边可时时查看效果 实现如下 参照以下 CodeSandbox 演示 使用 codeopen.vue 组件： codeopen.vue 组件："}, {"id": "6997407129770393607", "title": "Vue生命周期", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 生命周期 生命周期 又叫生命周期钩子，生命周期函数。 在特定的时刻Vue为我们调用的一些特殊名称的函数，函数名不可更改，但是内容是程序员根"}, {"id": "6990310689629798408", "title": "粗解Vue的模板编译", "desc": "Vue 模板编译的入口在哪儿？从创建实例到模板编译前Vue都做了些什么？ 一文中的 步骤 - 5 揭示了答案 —— vm.$mount(vm.$options.el)。"}, {"id": "6844903709193797646", "title": "学习Vue的SSR，这可能是最好的教程", "desc": "为了追求更好的用户体验，很多公司的业务页面都会采用SSR进行渲染，将渲染的结果返回给浏览器，浏览器能够不经过实例化Vue，直接解析HTML代码展示，这样可以减少首屏时间，提高用户体验。 ​ Vue提供一个npm包叫做vue-server-renderer，它是在vue源码中的s…"}, {"id": "6923096892494741518", "title": "Vue静态资源上CDN方案简述", "desc": "静态资源的域名假定为static.example.cn，站点的域名为www.example.cn。 打包构建的时候，静态资源需要以绝对地址来引用，比如js/app.[hash].js在构建后有目录作为区分，最终可能为static.example.cn/web/example/j…"}, {"id": "6844903811278962695", "title": "你要的移动端vue多页面脚手架，都帮你集成和封装好了", "desc": "以前经常做手机H5，喜欢做成vue单页应用，这样在开发微信相关应用时，往往因为单页应用在苹果和安卓上对于浏览器每个页面的url机制不一样，经常导致页面签名失败的问题。还有经常从其他应用带参数跳到单页应用的某个页面而加载整个单页应用，还需要处理路由和权限等繁琐的东西，那么为什么不…"}, {"id": "6844903539345457160", "title": "饿了么 ElementUI 用户的福音——ElementUIVerify!", "desc": "如果你受够了饿了么ElementUI原生的校验方式，那就来试试它吧！一款更懂你的校验插件"}, {"id": "6984809200014589966", "title": "axios拦截器的使用", "desc": "新建request.js文件,导入axios 创建一个axios的实例 设置请求拦截器 设置响应拦截器 导出axios实例"}, {"id": "6995795068657336327", "title": "vue cli3 Generator插件开发", "desc": "定制生成插件 vue cli3提供了扩展定制化插件API。 CLI插件是一个可以为@vue/cli项目添加额外特性的npm包。 它始终包含一个Service插件作为其主要导出，可选包含一个 Gener"}, {"id": "6857161745098768391", "title": "一篇文章带你了解 “Vue 插槽”", "desc": "Vue 实现了一套内容分发的 API，这套 API 的设计灵感源自 Web Components 规范草案，将 元素作为承载分发内容的出口。 具名插槽，从它的名字我们可能会猜想它到就是一个有名字的插槽。 有时我们需要多个插槽。例如对于一个带有如下模板的 组件： 对于这样的情况，…"}, {"id": "6992875883589533727", "title": "快速了解vuex", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化"}, {"id": "6844903894061940744", "title": "揭秘Vue从Virtual DOM生成真实DOM的过程", "desc": "从上图可以看出，真实的DOM元素是非常庞大，这是因为浏览器的标准把DOM设计的非常复杂（一个DOM对象包含了许多属性，如上图所示）。当我们频繁地去做DOM更新，相应就会产生性能问题。 为了解决频繁操作DOM的性能问题，Virtual DOM就孕育而生了。虚拟的Virtual D…"}, {"id": "6844903861732245518", "title": "Vue+Node+高德地图+Echart做一款出行可视化全栈webapp", "desc": "用户个人出行，不确定路程、目的地等信息，选择出行工具，点击开始，系统实时监听用户手机位置得到WGS84经纬度坐标（w3c HTML5 Geolocation地理定位标准），行程结束，记录本次出行信息，经纬度坐标转换GCJ-02坐标体系，通过高德地图提供三方API绘制出行轨迹。 …"}, {"id": "6844904013020790798", "title": "Vue实现字符串中自定义标识符的解析渲染🎩", "desc": "前言有这样一个场景:实现了文字和图片的混输，此时div中有img标签和文字，那么我们要将这些内容发送给服务端，然后服务端将我们发送的内容推送给每个用户，服务端需要什么格式的数据？我们客户端拿到服务端返"}, {"id": "6844903664998416392", "title": "Vue.js源码角度：剖析模版和数据渲染成最终的DOM的过程", "desc": "因为最近做的项目采取的技术栈是vue.js，加上自己对vue.js的底层运行机制很感兴趣，所以最近每天花点时间，大概一两个月左右把vue.js源码捋了一遍，在这里针对模版和数据渲染成最终的DOM的过程这一部分做一下总结。 在看源码的过程当中，可能当中有自己理解出偏差或者大家有理…"}, {"id": "6844904155073478664", "title": "如何在 vue 中封装一个好用不上火的列表条件过滤组件", "desc": "平时工作中，想必你一定会遇到无数次列表需求，并且是带有搜索功能的列表需求，但不管怎么怎么样，请相信这一切都是万变不离其宗。 本文所说的组件封装是指业务上的封装，而不是组件底层的封装，像这种底层封装的组件库很多，比如：antd、element。 如果过滤条件更多（常有的事），那么…"}, {"id": "6844903737132056589", "title": "vue组件的那点事", "desc": "当前前端估计没有不知道vue这个渐进式框架，由于它容易上手，支持各种类库，各种优点，成为我们开发单页应用的一个不二之选。下面是我在学习和工作中对组件之间通信和交互方式的归纳，希望对你有所帮助。 然后回到需求本身父亲要跟儿子说回来吃饭了。也就是父组件要向子组件传递一个信息。可以选…"}, {"id": "6844903742530142221", "title": " Vue与React两个框架的粗略区别对比", "desc": "React--Facebook创建的JavaScript UI框架。它支撑着包括Instagram在内的大多数Facebook网站。React与当时流行的jQuery,Backbone.js和Angular 1等框架不同，它的诞生改变了JavaScript的世界。其中最大的变化…"}, {"id": "6921965374749540360", "title": "子元素margin-top导致父元素移动的问题", "desc": "问题描述今天在修改页面样式的时候，遇到子元素设置margin-top但是并没有使得子元素与父元素之间产生间隔，而是作用在了其父元素上，导致父元素产生了一个margin-top的效果。今天就来说说整个问"}, {"id": "6989049765040226341", "title": "Vue性能优化写法", "desc": "分享3个提升Vue性能的写法 监听对象的单个属性 处理不需要响应式的数据 利用钩子函数销毁定时器 1.监听对象的单个属性 场景：监听一个person对象，person对象的id发生变化，发起网络请求 "}, {"id": "6844903927142432781", "title": "老板，vue又双叒叕出bug了，dom总是获取不到。 详解Vue异步更新和nextTick", "desc": "工作中，用vue开发，经常会碰到用数据驱动dom，然后操作dom却没有效果的情况。如果有用到tab切换加上echarts展示，肯定是气的想砸桌子。下面来谈谈vue中dom的刷新。 所谓异步更新，就是vue中用数据去驱动dom，数据变化了，DOM却不会立即的更新，而是在下一个Ti…"}, {"id": "6992787868003336223", "title": "Vue实例的源码解析 (实例一)", "desc": "Vue实例的源码解析 接下来我将用两个例子来讲解一个vm实例从无到有再到渲染页面的过程，可能比较复杂，望君能沉静下来。 这里只讨论了关于实例的创建以及虚拟节点的创建和挂载部分，并没有讨论生成实例后的数"}, {"id": "6978724728177426462", "title": "vue 组件通信", "desc": "组件是 vue 的强大功能之一，而各个组件的作用域又是独立的，也就是各组件的数据是相对独立的，因此组件之间的通信就变成了核心要解决的问题。本文介绍了vue组件之间的通信。"}, {"id": "6971010646527705119", "title": "Vue2.0源码阅读计划(四)——虚拟DOM", "desc": "前言 虚拟DOM(Virtual DOM)，在当下的前端三大框架中或多或少都有所涉及，且在前端内卷的环境下作为面试的高频考点，我们非常有必要来揭开它神秘的面纱，一探究竟。 为什么需要虚拟DOM 在虚拟"}, {"id": "6884393371591245838", "title": "Vue 总结：组件间的通讯方式（父子传参、兄弟传参、任意两个组件间传参、多个组件嵌套传参）", "desc": "1. props、emit(最常用的父子通讯方式) 2. 事件总线 EventBus (常用任意两个组件之间通讯) 原理：注册的事件存起来，等触发事件时再调用。定义一个类去处理事件，并挂载到Vue实例的this上即可注册和触发事件，也可拓展一些事件管理 3. Vuex 状态管理…"}, {"id": "6995733041779834917", "title": "【Electron-Vue】入门学习笔记之三：创建自己的第一个 Electron 项目", "desc": "一、使用 淘宝 的 NPM 镜像 首先，我们需要安装 Electron 模块，但是由于 npm 默认是从国外的服务器上下载，网络不是那么稳定，所以，我们先安装一下 cnpm ，从国内的淘宝镜像下载，会"}, {"id": "6844903715158097928", "title": "【简单好用，支持懒加载】  vue-waterfall2 基于Vue.js 瀑布流  组件", "desc": "vue-waterfall21.不需知道元素宽高，可宽高自适应2.支持无图模式,内容自定义程度高3.支持懒加载(lazy-src)4.提供Event:loadmore(pc/android端滑动到底部"}, {"id": "6844904094885216269", "title": "HOC(高阶组件)在vue中的应用", "desc": "高阶组件(HOC)是 React 生态系统的常用词汇，React 中代码复用的主要方式就是使用高阶组件，并且这也是官方推荐的做法。而在 Vue 中，官方给出的组件复用方式则是 mixin 。本文将对常用的组件复用方式（ mixin 和 HOC ）进行对比和实践。 有一个使用了v…"}, {"id": "6844903808863043592", "title": "Vue项目history模式下微信分享总结", "desc": "最后，在这里希望腾讯官方能不能走点心，更新文档及时点，demo能不能提供完整点...."}, {"id": "6844903704894636039", "title": "React 进阶之选择合适的组件类型", "desc": "最近项目基本都是用 React，今天总结分享 React Component 常见的几种形式，如果你在写 React 时经常不知道怎么拆分代码，这篇文章或许对你有所帮助。 为了更充分理解 React，先搞懂平时写的 JSX 是什么。初学的时候有比较大困惑，这是一门新语言吗？大部…"}, {"id": "6861206075744452622", "title": "vue中的事件：原生事件与自定义事件", "desc": "模板编译processAttrs对于astattributes处理(v-on/@)利用onRE与dirRE来捕获事件这里最重要的就是dynamic的判断，vue中可以用动态参数来命名事件名称，如@[p"}, {"id": "6991637293140279332", "title": "Vue3.0-入门", "desc": "关于Vue 3.0 配合李江南的Vue3.0学习效果较好视频地址：``https://www.bilibili.com/video/BV14k4y117LL?share_source=copy_web"}, {"id": "6900906988285198349", "title": "Vue的动态组件是什么？什么用？", "desc": "是的，就是这么简单的... 2. tab标签页"}, {"id": "6844903620727570440", "title": "PicGo的star数破1000的心路历程", "desc": "大概半年前（2017年11月28日）我在GitHub上开源了一个基于electron-vue的开源桌面应用PicGo。其出发点是为了改善我在写博客的时候贴图困难的问题。在经过了半年的持续维护和一些宣传（《PicGo：基于 Electron 的图片上传工具》、《图床上传工具Pic…"}, {"id": "6844903645738172429", "title": "Vuex基本使用的总结", "desc": "另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。 Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。 你不能直接改变 sto…"}, {"id": "6844903598359314439", "title": "【译】vue技术分享-你可能不知道的7个秘密", "desc": "本文是vue源码贡献值Chris Fritz在公共场合的一场分享，觉得分享里面有不少东西值得借鉴，虽然有些内容我在工作中也是这么做的，还是把大神的ppt在这里翻译一下，希望给朋友带来一些帮助。 这一点我在项目中也是这么写的。例如有请求需要再也没初始化的时候就执行一次，然后监听他…"}, {"id": "6994997147292680205", "title": "vue项目微信公众号动态修改title", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：[8月更文挑战]。这是我参需求场景： 微信后台配置不同的商户id"}, {"id": "6844903602566201352", "title": "Vue微信项目按需授权登录策略实践", "desc": "另一种是用户无需登录即可随意浏览。 在无需用户登录的页面中，可能包含需要用户信息的操作，此时就需要用户登录之后方能进行后续操作。因此，需要对授权登录策略进行区分。 一般而言，我们为微信开发的H5页面，进入页面的时候就进行鉴权，要求用户登录之后才能继续浏览。但由于产品需求，这个项…"}, {"id": "6844903710955405320", "title": "小程序外卖项目实践之-左右菜单联动", "desc": "前言本项目是公司之前一个app项目，一个餐厅自己的订餐app，已经下线了，老衲是闲时用来练手，最早是html+jq版本，准备放在公从号里的，后来先是用vue实现了它，最近研究下小程序，当然也是好的练手"}, {"id": "6903418592486768648", "title": "结合简化的vue源码理解双向绑定-渲染的整个流程", "desc": "要理解双向绑定并不难，看过双向绑定基本原理的同学都可以说出个一二，但很多人都处于:\"哇，Object.defineProperty这么神奇，学到了学到了！\"，但是具体Vue是怎么把它和组件渲染关联的，就有些懵逼。笔者之前也处于这种状态，深有体会，~~什么？你说你没有这种感觉？！…"}, {"id": "6916792971413159944", "title": "keep-alive实现原理分析", "desc": "keep-alive 组件提供的 include 属性和 exculde 属性可以定义缓存名单，确定被 keep-alive 包围的组件哪些被缓存，哪些不被缓存，其中 include 定义缓存白名单，exclude 定义缓存黑名单。 在学习vue keep-alive的缓存原理…"}, {"id": "6955132767008980999", "title": "Vue数据双向绑定原理", "desc": "Vue数据双向绑定原理 Object.defineProperty 描述 用于在一个对象上定义新的属性或修改现有属性, 并返回该对象 语法 参数 obj：必需，要在其上定义属性的对象 prop: 必须"}, {"id": "6980168928794247205", "title": "slot详解", "desc": "前言：插槽（slot）与组件 在平时开发中重复出现的功能模块往往采用封装组件的形式处理，一个组件封装的是否成熟那最侧重的就是这个组件的复用性，不然这个组件封装的就毫无意义。那么插槽其实就可以从一定程度"}, {"id": "6991474854792790030", "title": "Vue状态管理模式Vuex |  8月更文挑战", "desc": "一、初识VueX 1.1 关于VueX VueX是适用于在Vue项目开发时使用的状态管理工具。试想一下，如果在一个项目开发中频繁的使用组件传参的方式来同步data中的值，一旦项目变得很庞大，管理和维护"}, {"id": "6991467928113643551", "title": "vue项目使用iconfont图标｜8月更文挑战", "desc": "对于前端来说，在项目中使用图标是非常常见的，当前项目技术栈是vue全家桶搭配element-ui，由于element-ui提供的icon不能完全满足项目的需要，所以决定使用阿里提供的iconfont图"}, {"id": "6844904071619411981", "title": "这是一个基于 Vue SSR Genesis 框架快速开发的模板例子", "desc": "介绍这是一个基于VueSSRGenesis框架快速开发的模板例子启动关于Genesis这是一个为Followme5.0诞生的VueSSR框架，也许上线后我们会开源，也许日后会🔥呢？项目的目录结构app"}, {"id": "6854573221522440205", "title": "vue双向数据绑定的原理", "desc": "Vue的双向数据绑定的设计思想为观察者模式。 subs下的订阅列表，依次更新数据和DOM。 Observer对象：即观察者，包含两个主要属性value, dep。做法是使用getter/setter方法覆盖默认的 取值和赋值操作，将对象封装为响应式对象，每一次调用时更新依赖列表…"}, {"id": "6844904167744487432", "title": "基于 Vue SSR 的微架构在 FOLLOWME5.0 实践", "desc": "2020年5月22日FOLLOWME5.0的第一个版本终于上线了，这也是公司内部基于 Genesis 上线的第二个项目。首页是老项目经历了最原始的那种 Vue SSR，后来在年初的时候，迁移到了 Nuxt.js 下，再到现在迁移到了 Genesis，可谓是一波三折。 2019年…"}, {"id": "6844903992196071432", "title": "Vue 常用的属性和方法总结", "desc": "其中比较重要的知识点：Vue指令总结Vue组件之间的数据传递(通信、交互)详解Vue生命周期与钩子函数理解Vue中的nextTickVue插槽(slot)使用(通俗易懂)Y_Y"}, {"id": "6935707043861331981", "title": "手撸简易大转盘抽奖组件", "desc": "一、画圆盘实现思路：根据奖品数量将圆盘等分，计算出一份奖品所占的角度和大致宽度将每一格奖品底边的中点设置在圆盘的原点处根据顺序计算每一格奖品所需要旋转的角度，并旋转至各自的位置，铺满360度圆盘将指针"}, {"id": "6844903575533912072", "title": "你也许不知道的Vuejs - 使用ESLint检查代码质量", "desc": "Javascript 是一门弱类型语言，所以语法检查变得尤为重要。虽然有很多前端IDE开发工具，可以很好地帮助我们提示在编写时的错误，但是大多数开发者还是使用的像 Sublime Text、Visual Studio Code 之类的轻量级编辑器，这导致在开发中很容易出现各种错…"}, {"id": "6922865814097887246", "title": "vue原理学习系列(一)：响应性", "desc": "响应性表示当状态变更时，系统会自动更新关联状态。在Web的场景下，就是不断变化的状态反应到DOM上的变化。 响应性是vue最核心的特性之一，在vue中数据模型只是一个普通javascript对象，当数据发生改变时，视图会自动更新，这使得状态管理非常简单直接。 当调用组件渲染函数…"}, {"id": "6898315825913020429", "title": "Vue2中并发、继发请求的loading设置", "desc": "项目中，全局loading一般是在整体内容区域进行展示，项目在调用接口的时候展示，接口调用完成后隐藏，防止在页面接口请求过程中用户进行意料之外的操作。这次就是对loading的一个处理过程 像elementUI之类的UI框架中都会封装好了loading的样式结构之类的，如果没有…"}, {"id": "6844903609121931271", "title": "如何正确的(?)利用 Vue.mixin() 偷懒", "desc": "最近开发的页面以及功能大都以表格为主，接口获取来的 JSON 数据大都是需要经过处理，比如时间戳需要转换，或者状态码的转义。对于这样的问题，各大主流框架都提供了类似于过滤的方法，在 Vue 中，一般是在页面上定义 filter 然后在模板文件中使用 | 进行处理。 这种方法和以…"}, {"id": "6844903832040767496", "title": "解决图片访问403 Forbidden问题", "desc": "在浏览器中输入url可以正常访问，但是项目中无法访问，并返回403 Forbidden。一般是因为服务器设置了图片防盗链的原因。 这里我采用了yatessss前辈在vue完成知乎日报web版的解决方案，使用Images.weserv.nl进行缓存图片，并在需要使用图片url的地…"}, {"id": "6916780404099792910", "title": "Vue 3.0 新特性与使用 三", "desc": "有时副作用函数会执行一些异步的副作用，这些响应需要在其失效时清除 (即完成之前状态已改变了) 。 watchEffect 函数可以接收一个 onInvalidate 函数作入参，用来注册清理失效时的回调。当以下情况发生时，这个失效回调会被触发： Vue 的回答是因为返回值对于异…"}, {"id": "6844904128234127373", "title": "Vue, jsx 封装通用查询组件", "desc": "Vue,jsx封装通用查询组件在管理系统列表上面都会有查询条件,一般都长的差不多之前的做法是每个页面都要写一遍,太麻烦!抽了点时间封装了一个通用，并且可以自定义的查询组件，记录一下开始想法:有默认的查"}, {"id": "6977708792599445535", "title": "按需引入ant-design-vue的坑", "desc": "按需引入ant-design-vue 所使用的技术是vue3 框架ant-design-vue https://2x.antdv.com/docs/vue/introduce-cn 安装的组件库 官网"}, {"id": "6844903709558718472", "title": "前端 SPA 单页应用数据统计解决方案 (ReactJS / VueJS)", "desc": "下面： 我们就将待验证的场景实现出来看看，到底会不会触发。 这样类似一个拦截器一样，在路由跳转之前把 百度统计的代码再次家再一次。 同样，Vue-router 的项目也是类似。"}, {"id": "6910380751066234887", "title": "ifram子页面与父页面之间的传值", "desc": "相信很多小伙伴在项目中都会遇到需要嵌入外链页面的情况，这时候很可能会遇到一个问题，就是如何在iframe子页面自己的项目页面之间传值，特别是跨域的情况1.同域的情况1.1相互获取dom元素1.1.1在"}, {"id": "6956534771849625614", "title": "Vue 源码分析 - initData", "desc": "假设创建 vm 时的 data 选项如下，我们来看下 Vue 是怎么处理 data 数据的，以下 Vue 源码来自 v2.6.12。 initData observe Observer value 是"}, {"id": "6844903583222415373", "title": "Vue——关于自定义组件", "desc": "现在基于vue的UI组件库有很多，比如iview，element-ui等。但有时候这些组件库满足不了我们的开发需求，这时候我们就需要自己写一个插件。 index.js文件帮我们把所有自定义的组件都通过Vue.component注册了，最后export一个包含install方法的…"}, {"id": "6997408442608697381", "title": "vue-admin学习", "desc": "1.定制配置 vue.config.js 基础配置：指定应⽤上下⽂、端⼝号 配置webpack： configureWebpack 范例：设置⼀个组件存放路径的别名 chainWebpack webp"}, {"id": "6844904129186234381", "title": "vue项目目录构建与配置", "desc": "全局变量仅除NODE_ENV和BASE_URL这两个保留变量外，其余自定义变量都需使用VUE_APP开头。"}, {"id": "6844904058231193613", "title": "vuepress 文档部署到 github-pages", "desc": "在 docs/.vuepress/config.js 中设置正确的 base。 如果你打算发布到 https://<USERNAME>.github.io/，则可以省略这一步，因为 base 默认即是 \"/\"。 如果你打算发布到 https://<USERNAME>.githu…"}, {"id": "6844903614339629069", "title": "干货--手把手撸vue移动UI框架： 滑动加载", "desc": "在我们移动端还有一个很常用的组件，那就是滑动加载更多组件。平常我们看到的很多插件实现相当复杂就觉得这个组件很难，其实不是的！！这个组件其实可以很简单的就实现出来，而且体验也能非常的棒（当然我们没有实现下拉刷新功能）！！下面我们就一起来实现这个组件。Github源码（不麻烦的话帮…"}, {"id": "6943479614065311775", "title": "vue+element-购物车的操作", "desc": "这个其实不麻烦，首先我们被选中的table是属于多选的，也就是说element是提供了一个被选中的行的数组函数的，那么这样我们可以拿到用户是选择了哪些行的，这是第一步，第二步是我们怎么保证每一页选择了以后别的页被选中的选项还在，这个我之前的博客是更新了，这里不说怎么实现的了，也是..."}, {"id": "6884229642752884749", "title": "vue-------形成父子组件及常见问题", "desc": "一、父子组件关系二、形成父子组件三步骤父组件代码子组件代码效果三、常见报错问题"}, {"id": "6976504243117096968", "title": "Vue.js 响应式原理", "desc": "Vue.js是一款MVVM框架，上手快速简单易用，通过响应式在修改数据的时候更新视图。Vue.js的响应式原理依赖于Object.defineProperty。"}, {"id": "6844903603379896333", "title": "钱端 P0 学习笔记：基于 vue.js 2.3.x 的伪双向绑定", "desc": "因为业务需要，最近不写 iOS，也不写 Ruby 了，开始写钱端。然后…做为一个钱端 P0，表示用了 Electron 和饿了么大钱端的 Element 库之后，好像一直都很顺利，直到…我碰到了组件间值同步的问题😫。 需求是这样的，我需要点击一个按钮，然后打开一个对话框用来新…"}, {"id": "6844903773358260238", "title": "Cordova+Vue 混合开发实现下载并预览", "desc": "近期混合应用开发需要下载和预览的功能，选择方案为先下载到本地，再使用cordova-plugin-file-opener2插件进行预览。 mineType使用 mime-types获取，提供扩展名即可获取（若后端提供格式则不需要）。 4. 可能遇到的坑"}, {"id": "6854573208675450894", "title": "从源码解读Vue实例生命周期", "desc": "可以看到 beforeCreate 和 created 的钩子调用是在 initState 的前后，initState 的作用是初始化 props, data, methods, watch, computed 等属性。显然 beforeCreate 的钩子中不能获取到 pro…"}, {"id": "6914251448880463885", "title": "创建一个Vue 指令，用于自定义格式列表的渲染中快捷键的使用", "desc": "​ 业务场景中，列表渲染很常见，在PC或者外接键盘的情况下，对于快捷键的支持，能够给用户带来良好的体验效果。 ​ 在每个业务中去做键盘事件监听可以实现这样的效果，但是，如果这样的业务场景较多的时候，不可避免的会造成代码的重复使用。所以，我们采用引入指令的方式，简化业务代码中的书…"}, {"id": "6844903614813585415", "title": "FileReader初步使用实现上传图片预览效果", "desc": "FileReader 作为文件处理读取器现在用处相对多一些。初次使用作为上传预览实例 这样fileReader就将img读取为base64的编码,这个跟在初始化vue项目后在本地加载图片是想要直接在img标签中引用,是需要在script中进行require就是将其转化为base…"}, {"id": "6985009799549157406", "title": "7.15 Vue复习--收集表单数据，过滤器，内置指令", "desc": "收集表单数据 收集表单数据我们主要使用的是v-model命令，（v-model命令可以实现数据的双向绑定）。 若是：<input type=\"text\"/>，则v-model收集的是value值。 若"}, {"id": "6844904136509489166", "title": "vue开发父子组件通信的一个小坑", "desc": "其实这里子组件是拿到了更新后的值，如果template中的是{{message.age}}是可以显示出18的，但是项目中是传的options，子组件有个echart的setOptions操作，并不是直接将prop的数据展示，所以demo写成这样。这里是可以分析出问题所在的，子组…"}, {"id": "6954341923972710413", "title": "标签第二期，结合vue 双向数据绑定", "desc": "有些时候，数据可能是来自后端，每一个标签值都对应一组对象结构的数据， 里面记录了该标签值的具体表示信息。所以当删除标签的时候，只是在网页的显示上删除了，真实的数据不会被删除，会把标记的字段isDele"}, {"id": "6902319514365952013", "title": "浅析React与Vue中key为什么是必须的", "desc": "当 Vue 正在更新使用 v-for 渲染的元素列表时，它默认使用**“就地更新”**的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。 这个默认的模式是高效的，但是只适用于不依赖子组件…"}, {"id": "6954287326818205726", "title": "vue组件化设计思想", "desc": "组件设计思想 :3个点 属性 ：设计任何组件都需要传递一个属性 事件：组件内部对外通知的机制 组件可以扩展：组件内部不能写死，比如弹窗，不能只放按钮和文本，应该是用户想放什么放什么 ，slot插槽，需"}, {"id": "6954277803005050894", "title": " Vue生命周期理解", "desc": "1. 话不多说上来先Po一张图 2. Lifecycle Hooks Vue2.0 Description beforeCreate 组件实例刚被创建，组件属性计算之前，比如data属性 create"}, {"id": "6844904190641176583", "title": "vue-toy: 200行代码模拟Vue实现", "desc": "200行左右代码模拟vue实现，视图渲染部分使用React来代替Snabbdom，欢迎Star。 这就完成了一个对象的观察，但以上示例代码虽然能观察对象，但无法实现对象属性改动后通知观察者，这时还缺少Watch对象来计算观察函数的属性依赖及Notify来实现属性变更时的通知。 …"}, {"id": "6935748060652208136", "title": "Vue3组件（14）控件属性的设置方式", "desc": "一番整理之后，属性方面更简洁了一些，而且也方便了一些，另外也不是太乱了。 每个控件都需要设置一些属性，那么还是统一管理一下的好，于是设置了一个js文件来统一管理。 分为两个部分：基础属性和扩展属性。 这个是每个控件都需要的属性。 这个是针对各类控件设计的，比如多行文本框需要设置…"}, {"id": "6844903904749027342", "title": "前端如何优雅的累计时间", "desc": "项目的页面需要轮训抓取数据，而且要支持暂停抓取，继续抓取。还需要累计抓取的时间，以分钟为单位。 这种情况看起来好像没问题，但熟悉js的同学应该一眼就看出毛病了。因为js是单线程，每个回调函数都要经过事件队列才能到达主线程执行。 所以假如在事件队列里，有一个复杂耗时的事件在set…"}, {"id": "6984750029059653668", "title": "Vue 事件修饰符和 .sync", "desc": "在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源。"}, {"id": "6922636014183776263", "title": "Vue.js基础介绍与环境搭建", "desc": "Vue.js是一个用于构建用户界面的 $\\underline{\\text{渐进式}}$ JavaScript框架，\"$\\underline{\\text{自底向上、增量开发}}$\"的设计方式。 Vue.js的核心是只关注视图层。 ViewModel在MVVM中负责在Model（模…"}, {"id": "6965388580164222983", "title": "Vue2基础", "desc": "Vue初体验 创建Vue实例传入的options 详细解释 :black_square_button:el: 类型：string|HTMLElement 作用：决定之后Vue实例会管理哪一个DOM :"}, {"id": "6844903969924333582", "title": "你为什么看不懂源码之Vue 3.0 囊中取物", "desc": "距离上一篇过去很久了。你可以快速浏览历史文章： 之前在看 reactive 和 ref 时，总有两团黑雾笼罩着我们，一团是 track,一团是 trigger。 二者都来自同一个文件，effect.ts。 在 set 时， trigger(target, OperationTy…"}, {"id": "6844903878224265223", "title": "Vue入门学习之技术分享-2(深入理解Vue组件)", "desc": "继前几天学习了指令，属性学习后，这两天又深入学习了组件。每次学习过后发一篇文章，自己对知识点的记忆也更加深刻了，同时也希望自己的分享能够帮助到其他人 但是页面检查查看Elements时你会发现出错了，正常情况下tr应该在tbody但是现在却跟table同级。 这个BUG我们应该…"}, {"id": "6935358232693047326", "title": "es6入门API，相关操作方法", "desc": "Es6是简称，全称是ECMAScript 6.0。由于es6是2015年6月份发布的标准。又可以称之为ECMAScript 2015，或es2015。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。 稍微回顾js的历史。 ECMA…"}, {"id": "6844903503962308615", "title": "Vue + TypeScript 尝鲜体验", "desc": "适用 Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 JavaScript，便爱上了这门语言。但现在的我稍稍…"}, {"id": "6844904183414390792", "title": "跟着大佬学习vue的diff算法", "desc": "本文旨在理一下vue中diff算法的主要逻辑和关键细节。 patchVnode(oldVnode, vnode, insertedVnodeQueue, ...) ps: diff从这里就开始了 insertedVnodeQueue是patch函数中定义的常量，在后期的diff…"}, {"id": "6942317765445287966", "title": "Vue2的响应式原理", "desc": "数据响应式的目标：当响应式数据对象本身或属性发生变化时，会运行一些函数，比如 render 函数。 该几个模块的实现都在 Vue2 源码的 ./src/core/observer 中。 Observer 是一个类，它所做的事就是把一个普通的对象转换为响应式对象。 Observe…"}, {"id": "6991709128133443615", "title": "Vue slot插槽的使用和个人理解 ｜ 8月更文挑战", "desc": "在vue中，引入的子组件标签中间是不允许写内容的。为了解决这个问题，官方引入了插槽(slot)的概念。 插槽，其实就相当于占位符。它在组件中给你的HTML模板占了一个位置，让你来传入一些东西。 插槽分"}, {"id": "6991472412420210702", "title": "【vue组件库】基于@vue/cli 3搭建属于自己的组件库｜8月更文挑战", "desc": "@[toc] 一、创建项目 二、创建测试组件 将文件夹src修改为examples，然后在根目录新增文件夹packages ￼ test.vue： packages/test/index.js： pa"}, {"id": "6867392711893188615", "title": "Vue基础之前后交互", "desc": "所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程 Promise.all方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promis…"}, {"id": "6912366721240137741", "title": "Vue 3（组建化开发）", "desc": "1. 组件化开发思想 p488 2. 组件注册 p489 3. Vue调试工具用法 p493 4. 组件间数据交互 父组件发送的形式是以属性的形式绑定值到子组件身上。 1. 兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据 2. 监听事件与销毁事件 3. 触发事件 5.…"}, {"id": "6974773913817448478", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】003-Vue语法基础：模板语法", "desc": "3、常用模板语法 官方文档 两种方式： 开发者编写模板——Vue将模板编译成虚拟 DOM 渲染函数——Vue计算需要渲染的组件并进行DOM操作； 开发者直接编写渲染（render）函数——Vue计算需"}, {"id": "6931272316449980423", "title": "从零手写简易Vue3（五）—— 生命周期hooks", "desc": "相较于2.x版本，生命周期部分的改动并不大。 从官方文档我们可以知道，使用setup()的方式注册生命周期事件，需要从外部导入对应的注册函数，名称则是在老版本的名称前加上on前缀，同时需要注意驼峰格式。 另外，由于setup()执行的时机与原先beforeCreate、crea…"}, {"id": "6991466827041734670", "title": " Vue数据代理和监听", "desc": "在学习了ES6的Proxy和Reflect以后，去看了一些Proxy的使用场景。其中就有Proxy在Vue2.x中的应用。从Vue的响应式原理出发，对比响应式原理在Vue2.x和Vue3.0中的实现。"}, {"id": "6844903926727180295", "title": "vue+ts构建后台管理项目结构", "desc": "1.1安装vue-cli全局安装vue-clinpminstall-g@vue/cli1.2初始化项目vueceatedemo选择手动配置项目选择（BabelTypeScriptRouterVuexC"}, {"id": "6991449399033331719", "title": "Vue3快速上手", "desc": "1.1 创建Vue3.0工程 1.1.1 使用 vue-cli 创建 官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-c"}, {"id": "6915996461108822029", "title": "VUE", "desc": "VUE1项目搭建1.1==注意:====预先安装nodejs==,安装VUE脚手架Vue-cli命令:1.2使用命令行创建项目,vue-cli安装webpack模块并初始化项目命令:1.3IDEA打开"}, {"id": "6844903504633397256", "title": "小程序和vue简单对比", "desc": "简单聊两句小程序是微信开发的一种不需要下载安装即可使用的应用，目前只能在微信中使用，开发使用微信的小程序开发语言，vue是尤雨溪大神开发的一套构建用户界面的渐进式框架，可以很好的开发单页面应用程序，开发语言js，或者不久将支持的ts数据绑定对比…"}, {"id": "6991412642942287879", "title": "vue源码研究之响应式原理初探｜8月更文挑战", "desc": "- vue对象观察模块源码学习（上） 本文源码基于2.6.11版本，跟着源码看vue的响应式是如何工作的"}, {"id": "6991408765996105742", "title": "项目中暗黑适配的想法｜ 8月更文挑战", "desc": "暗黑模式适配 在vue项目中 一开始没有下面这套最新方案的时候，我们在每个需要适配暗黑模式的页面都得根据媒体查询写适配，现在，只要和设计师商量好，我们使用对应的变量即可。 之前方案： 最新方案： In"}, {"id": "6844904122278232077", "title": "Webpack 初体验", "desc": "打包 样式文件 css less sass ..... 不同loader 处理 对应不同的 对象，这些对象都放置在 rules 中。"}, {"id": "6975466616511266853", "title": "vue 谷歌和facebook第三方登录小结", "desc": "因为公司有谷歌和facebook的登录项目需求，所以跟据自己的理解写了这篇文章；直接通过vue中的插件安装，引用操作；"}, {"id": "6844903888877781005", "title": "如何给element添加一个抽屉组件", "desc": "近来因为业务需要，对比iview和element库，发现element确实要比实习期间使用的iview强大点，尤其文档更为友好，但是iview的组件功能更多一点，比如分割线和抽屉组件今天特意手写一个抽"}, {"id": "6992595980747030535", "title": "《图解Vue3.0》- 第1节 Vue初识", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 初识 vue.js是什么 vue是什么？官网首页就有答案：渐进式JavaScript框架。有灵活，易用，高效的特点。官网首页有详细的介绍：h"}, {"id": "6844904090552500232", "title": "vue数据监测机制--observer", "desc": "检测数据为对象的时候，必须先声明属性 ，这个属性才是响应式的。 在js中有两种方法可以侦测到对象的变化Object.defineProperty和ES6的Proxy,vue2.0的版本是采用Object.defineProperty来检测对象数据的变化。根据vue的使用特性，我…"}, {"id": "6992580722997329933", "title": "Vue两个版本的区别", "desc": "一、如何搭建一个Vue项目 如果想要创建一个vue项目，一般可以使用vue-cli，或者是自己用webpack配置，还有就是可以去codesandbox创建一个项目后下载 二、如何获得Vue实例 1."}, {"id": "6844903920712548366", "title": "vue.js中实现图片裁剪功能（优雅的图片裁剪插件）", "desc": "若原图为jpg格式的图片裁剪生成的新图片可能尺寸会偏大，需要注意下。"}, {"id": "6844903938672558093", "title": "vuecli3创建项目，尤其推荐用图形化界面", "desc": "vue create hello-vue，hello-vue是文件夹名字，如果不存在会自动创建文件夹，如果存在会安装到那个文件夹中。 空格键选中/反选，按a键全选/全不选，按i键反选已选择项， 上下键 上下移动选择。可以根据项目大小和功能体验配置不同的功能"}, {"id": "6992532762624262175", "title": "vue-tools打开文件", "desc": "vue-tools调试到学习launch-editor源码 前言 第一次尝试看源码, 是受若川大大影响, 大大在群里发起了看源码的活动, 而且大大是我遇到的最有耐心的大佬, 愿意站在小白的角度为小白解"}, {"id": "6844904079261433869", "title": "Vue项目总结（4）-API+token处理流程", "desc": "前后端完全分离的项目中，一个前端应用会访问多个后端的API，API调用都要通过传递token进行用户身份认证。用户登录就是用用户名和口令换取token，获得token后前端自行保留（例如：放在sessionStorage里），然后每次发起API调用时添加上这个参数。为了安全，t…"}, {"id": "6978351480960974856", "title": "Vue2.x源码之响应式原理", "desc": "引言 源码部分 initState initProps proxy initMethods initData initComputed initWatch observer Observer defi"}, {"id": "6844903940228661262", "title": "[Vue响应式原理]从Object.defineProperty到proxy实现观察者机制的探索", "desc": "不知不觉，Vue的作者尤雨溪公布了Vue3.0版本的开发计划，发布到现在已经一年了，看来Vue3.0的发布尚需时日，在开发计划中，下图这段话：Vue3.0版本中将基于Proxy来改造观察者模式。说明Vue3.0讲不再借助于ES5的Object.defineProperty，转而…"}, {"id": "6844904088220467214", "title": "未来魔法校的微前端实践", "desc": "魔法校是tob起家，众所周知tob业务很容易做成巨石应用，近两年来魔法校飞速发展，我们的某个主要的前端项目遇到了瓶颈，那就是项目太大了。 为了减少耦合度加快打包速度，我们选择将一些功能提出来新建项目，然后通过iframe的方式引入到主项目中去。虽然项目体积大的问题得到了解决，但…"}, {"id": "6844903538179440654", "title": "适用于 Vue 2.0 的功能强大的 Contextmenu 组件", "desc": "适用于 Vue 2.0 的 ContextMenu 组件。 访问在线示例：https://xbt1.github.io/v-contextmenu/ 查看文档：https://github.com/XBT1/v-contextmenu/blob/master/docs/usage"}, {"id": "6911678697451814925", "title": "vue 数据双向绑定原理", "desc": "2.0的双向绑定首先要深克隆一份data数据，通过Object.defineProperty监听data里面的每个属性，通过get/set方法达到双向绑定数据。 缺陷：需要深度克隆数据、无法实现深度监听，例如监听值为对象时子属性或数组的成员。 3.0的监听方式是通过Es6的Pr…"}, {"id": "6900846585039552520", "title": "使用 Vue-Cli4 / Webpack5 / Vue2 / Typescript / Vant / postcss-pxtorem 构建移动端项目", "desc": "安装完成后再次使用 vue -V命令查看版本，4.x 的版本就可以继续下面的操作啦。"}, {"id": "6844904064132595719", "title": "Vue+ueditor坑中摸索", "desc": "昨天的项目需求上出现了使用富文本的要求，本着百度大法好，就去百度上查看vue上有什么好用的富文本编辑器，恰好公司其它项目上用的到了ueditor富文本编辑器，本着造好的轮子拿来用原则。 父组件中的使用方式，接收父组件传递过来的参数，对编辑器进行初始化赋值。如果是修改文章就需要用…"}, {"id": "6985409489818091534", "title": "i18n国际化", "desc": "vue中如何使用i18n实现国际化 一、前言 项目中需要实现多语言切换，这时候接触到国际化，前端框架无数，其中几种热门的框架都有相匹配的国际化插件工具。例如： vue + vue-i18n angul"}, {"id": "6985407897886785566", "title": "Composition API", "desc": "setup，生命周期钩子函数，provide/injext，getCurrentInstance。vue3.0组合式API的基本内容的使用。"}, {"id": "6883465337984008200", "title": "如何在vue2.x中体验vue3.0", "desc": "vue3.0 正式版本已经发布，但目前我们手中维护的更多还是vue2.x的项目，新版本发布,但为了稳定性，不出意外线上项目一般没那么快上vue3，鉴于此，本人就通过@vue/composition-api 这个 Vue Composition API在2.0中来体验下3.0的新…"}, {"id": "7007383872694386696", "title": "vue3 项目封装侧导航文字骨架效果组件-全局封装", "desc": "当显示页面的时候，有些数据是需要从后台加载，网络不好的时候可能需要等待，那么可以做一个骨架层闪动动画，增加用户体验"}, {"id": "6951649464637636622", "title": "从 0 开始手把手带你搭建一套规范的 Vue3.x 项目工程环境", "desc": "从 0 开始手把手带你搭建一套基于 Vite + Vue3 + TypeScript 规范的前端工程化项目环境，涵盖代码规范约束、提交信息规范约束、单元测试、自动部署等。"}, {"id": "7006997092442996766", "title": "Vue3源码系列之ref、toRef及toRefs的实现", "desc": "前言 ref和reactive的区别 reactive内部采用的proxy，ref内部采用的是defineProperty ref也可以放对象，只是取值的时候需要多取一层，如果是对象用reactive"}, {"id": "6989106100582744072", "title": "手写一个简易vue响应式带你了解响应式原理", "desc": "这是小浪在学习Vue总结的一篇文章，在这篇文章我们来了解 Vue2.X 响应式原理，然后我们来实现一个 vue 响应式原理（写的内容简单）实现步骤和注释写的很清晰，大家有兴趣可以耐心观看"}, {"id": "7007638409539747853", "title": "Vue深入学习系列:vuex原理解析 ", "desc": "前言:vuex是Vue全家桶中对数据流整体控制的一环,也是面试题中经常问到的技术点,平时我们开发时经常使用,vuex对数据控制,更改以及为什么对Vue的强依赖的背后,又是什么原理呢,今天大家就一起探究"}, {"id": "7007727939835920398", "title": "初学vue3 与vue3.2", "desc": "vue3 及vue3.2 入门，介绍组合式API写法，对比两种setup写法，同vue2区别点的介绍等"}, {"id": "7005575990353084430", "title": "Vue中组件的基础知识「一」", "desc": "一、组件概括 1.1、组件的特点 每个组件就是一个自定义标签 可复用 方便维护 方便拆分 每个组件都是一个独立的vm实例 每个组件作用域隔离「互不干扰」 有完整的生命周期 有自己的响应式数据和各种方法"}, {"id": "7007357322280321037", "title": "Vue演变史 —— 2.0（原理刨析、代码实现）", "desc": "阅读这篇文章之前建议大家跟先阅读我之前的文章Vue1.0原理刨析、代码实现，从根本上对比Vue1.0和Vue2.0的区别，以及各方面优化。 一些对比 一句话清楚Vue1.0和2.0的区别 本质区别就是"}, {"id": "7007807852215533605", "title": "vue -简版form", "desc": "基础知识 组件通信方法 props --父子 $emit/$on --子父自定义事件 派发/监听事件 evuent bus --事件总线 vuex $parent $children --有强耦合性 "}, {"id": "7006257717820162056", "title": "Vue项目中使用防抖和节流", "desc": "写在前面 一、防抖（debounce） 1.触发高频事件后n秒内函数只会执行一次，如果在n秒内高频事件再次被触发，则重新计算时间。 简单的说也就是一定时间段的无论点击多少次，只会执行最后一次的调用。前"}, {"id": "7006266497899167751", "title": "基于vitesse开发自己的前端网站", "desc": "总览 最近完成了一个公司内部的网站，开发使用 vue3 和 vite 的全新的 web 框架 vitesse。本文会对使用的整体框架进行分析，以及实现的功能点的介绍。"}, {"id": "6955129410705948702", "title": "Vue3发布半年我不学，摸鱼爽歪歪，哎~就是玩儿", "desc": "是从 Vue 2 开始学基础还是直接学 Vue 3 ？尤雨溪给出的答案是：“直接学 Vue 3 就行了，基础概念是一模一样的。“尤雨溪喊你学Vue3了！"}, {"id": "7007419705543622669", "title": "实践：ESLint在Vue项目中的使用", "desc": "什么是ESlint、有什么特性？ESLint如何使用及配置、如何校验？为什么要用ESLint，解决了什么问题，如何在项目中正确使用"}, {"id": "7006914907174092831", "title": "Vue3工具函数", "desc": "本篇文章是笔者从事两年前端以来的第一篇源码系列的文章, 平时在搭建项目的基础架构时,必不可少的会添加 utils 工具函数, 那 Vue 源码是怎么写工具函数的呢? 带着疑问随笔者一起走进 Vue 源"}, {"id": "7007420476767076383", "title": "Vue3.0 + Vite2.0 + Ts4.0搭建一款简约版本的移动端博客", "desc": "vue3-vite2-blog-h5 一款简约版本的移动端博客。主要是采用Vue3最新语法糖<script setup>编写的；采用Tsx来渲染公共组件；采用Vite2.0来构建、打包。"}, {"id": "6977259197566517284", "title": "阿里妈妈又做了新工具，帮你把 Vue2 代码改成 Vue3 的", "desc": "Vue3 已经出来有一段时间了，很多朋友早已熟读了文档，写了好几个 Demo，馋 Composition API 等新特性已久了。无奈，在实际工作中，大部分朋友还是不得不守着成千上万行的 Vue2 老"}, {"id": "7004624740677582878", "title": "简答Vue相关的高频问题", "desc": "v-for/v-if优先级 项目中一般有两种场景： 前置条件成立才去循环渲染列表数据，从而渲染出每个数据对应的「节点」 循环渲染列表数据，根据某个数据的条件判断要不要渲染对应的「节点」 第一种场景 上"}, {"id": "7002775184708993031", "title": "Vue3.0里为什么要用 Proxy API 替代 defineProperty API ？", "desc": "一、Object.defineProperty 定义：Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象 为什么能实现响应式"}, {"id": "6977004323742220319", "title": "【初学笔记】整理的一些Vue3知识点", "desc": "由于我先学了Vue3，并开发了一个开源的小项目，领导让我整理一下给公司其他没有入门的同事讲一下，混个脸熟。本文适合Vue初学者，或者Vue2迁移者，一看就学会，直接上手开发。"}, {"id": "7005892927389958157", "title": "Vue3.2中reactivity的优化", "desc": "一位社区大佬在Vue3.2中，对响应式做出了优化。 其中ref API 的读效率提升 260%，写效率提升约为 50% 。 依赖收集的效率提升 40%。 内存占用减少17%。 他到底是如何做到的"}, {"id": "6844904065567195144", "title": "Vue源码阅读（七）：组件化机制的实现", "desc": "MVVM框架中，组件化是一种必要性的存在。 通过组件化，将页面做切割，并将其对应的逻辑做一定的抽象，封装成独立的模块。 那么Vue中的组件化是怎样做的呢？我们分几个点来具体阐述这个过程：组件声明过程Vue.component()的具体实现，组件的创建与挂载过程。 发现Vue.c…"}, {"id": "6943873343850283016", "title": "Vue3实现网易云播放器", "desc": "本功能是基于 vue3 + ts 实现的。之所以选择网易云作为练手项目，主要是因为他的API是开源的，相对齐全。 一. 开发步骤 1. 歌单实现逻辑 接口返回值：（接口返回值太多了，就此省略。大家可以用postman请求查看） 这个接口返回的仅仅是歌单部分内容，并不包含歌曲ur…"}, {"id": "6920486019914301454", "title": "Vue 两个版本的区别和使用方法", "desc": "今天终于进入vue的学习了，我们来说说vue两个版本的区别和使用方法吧。 vue一般使用template来创建HTML，然后在有的时候，我们需要使用javascript来创建html，这时候我们需要使用render函数。 vue中的render函数中有一个参数，这个参数是一个函…"}, {"id": "6969909618801639432", "title": "黑马头条移动端项目准备工作", "desc": "步骤 1. 创建项目 1.1 创建完毕 2. gitee代码托管 2.1 连接并首次推送 2.2 后续代码变动 3. 调整项目目录结构 3.1 删除 3.2 新增 在src目录下 4. 引入Vant组"}, {"id": "6854573219291070477", "title": "Vue 源码系列 --响应式的基本原理（1）", "desc": "虽然工作使用的是Vue框架，但是对于尤大团队开发的这玩意，老实说，除了平时用来写写业务代码外，对于他的内部运行机制及底层原理方面，脑子总是嗡嗡的。希望做一个懂源码的小白～ 当我开始有这个想法的时候，我就去github上面下载了整个Vue源码项目，不怂就是莽。打开一看，尼玛这是什…"}, {"id": "6844903545880182797", "title": " Vue项目组件化工程实践方案", "desc": "工程的packages文件夹就是用来存放组件库里面的各种组件了，这里不需要通过手动创建文件的方式创建组件，直接通过一条创建组件的命令完成。每个组件都有一个单独的组件文件夹，组件文件夹下都至少包含\"index.vue\"，\"example.vue\"，\"readme.md\"这三个文件…"}, {"id": "6844904181438889991", "title": "学习vue源码（4） 手写vm.$mount方法", "desc": "vm，即实例本身。 1、如果Vue.js实例在实例化时没有收到el选项，则它处于“未挂载”状态，没有关联的DOM元素。 2、可以使用vm.$mount手动挂载一个未挂载的实例。 3、如果没有提供elementOrSelector参数，模板将被渲染为文档之外的元素，并且必须使用原…"}, {"id": "6844903827502530573", "title": "父元素设置overflow:scroll时vuedraggable组件出现奇怪效果的解决方案", "desc": "如果拖动 item，将光标移动到某两个 item 之间的界线上，有时会出现 闪烁 现象，原因是 item 不断地修改最终位置，导致 list 不停地改变。 如果item 刚好被父元素（设置了 overflow:scroll 的 容器元素）遮住，拖拽的时候，跟随光标的 item …"}, {"id": "6920041645199065095", "title": "Vue 学习笔记1（《Vue.js 项目实战》个人学习记录）", "desc": "created：在实例准备就绪之后调用。此时实例未被挂载到DOM中 updated：在把数据变化应用到模板之后调用。注意此时DOM可能还没有更新 watch是一个字典，把被侦听属性名字作为key，把侦听选项对象作为val。这个对象必须有一个handler属性，该属性可以是一个函…"}, {"id": "6844904120571133965", "title": "Vue2.x（含组件）主流程源码笔记（一）：前言及总流程概览", "desc": "Vue 是一套用于构建用户界面的渐进式框架，被设计为可以自底向上逐层应用。本系列不会刻意梳理讲解 API 及 Vue 的用法，官方文档 已经有清晰的讲解。 本系列文章作为笔记，用于记录 vue2.x 的构建（含组件）主流程。 版本不同，源码略微有差异。 本项目 demo 开源在…"}, {"id": "6844903815813005319", "title": "从源码看Vue的响应式原理", "desc": "前段时间把vue源码抽时间看了一遍，耐心点看再结合网上各种分析文章还是比较容易看明白的，没太大问题，唯一的问题就是看完即忘当然了，也不是说啥都不记得了，大概流程以及架构这些东西还是能留下个印象的，对于"}, {"id": "6844903580835512328", "title": "前端架构之路：数据驱动型组件-HeyUI，一个新型的VUE组件库", "desc": "其实，目前来说，也只有HEYUI组件库是这种方式的尝试者，这也是我在设计组件库的过程中，慢慢思考的成果。 所以，关于这一种定义，还没有人运用过。 当然，这也是HEYUI区别于其他组件库很重要的一点。 不熟悉HEYUI的人，可以移步：HEYUI官网。 或者也看下我们自我介绍的文章…"}, {"id": "6919840863250038797", "title": "浅谈对Vue 3.0的一些看法", "desc": "虽然在 vue3 正式推出前就有人说 vue3 采用的组合式 api 放弃了 vue2 配置式接口的便捷性，但我看了下 vue3 的文档，发现依旧推荐使用配置式的写法，而组合式 api 则被定性为高级功能，推荐老手使用。 作为一个写 vue 的菜鸟，如果让我来用 vue3 写项…"}, {"id": "6844903512841650183", "title": "mongodb+express+vue代码实现掘金最热文章收藏评论分析", "desc": "刚把掘金最热文章收藏评论分析的思路发出去后，就收到很多掘金好友的喜欢和阅读，这也让我更有信心把整个实现过程一步一步记录下来，让有兴趣的前端童鞋也可以熟悉前后端。虽然整个功能简单，但也算实现了整个过程，希望能帮助前端的童鞋梳理一下自己的思路；以前也曾有过很多疑惑，数据库怎么和后端…"}, {"id": "6844903826902761480", "title": "Vue 匿名、具名和作用域插槽的使用", "desc": "Vue 中的插槽在开发组件的过程中其实是非常重要并且好用的。Vue 的插槽也没有说很难使用，这篇文章简明扼要的介绍了三种插槽的用法。 🍉 子组件定义 slot 插槽，但并未具名，因此也可以说是默认插槽。只要在父元素中插入的内容，默认加入到这个插槽中去。 😵 具名插槽可以出现…"}, {"id": "6977388148133216287", "title": "修饰符.native和.sync", "desc": "修饰符.native 作用 .native事件修饰符是用来是在父组件中给子组件绑定一个原生的事件，就将子组件变成了普通的HTML标签看待"}, {"id": "6844904051553861645", "title": "自建vue组件 air-ui (4) -- air-ui 环境搭建和目录结构", "desc": "终于进入到 air-ui 的篇幅了。其实前面已经说过，在组件逻辑方面 和 css 方面，element-ui 做的很好，我也挑不出大毛病，而且它们也不是我要重写 ui 组件的主要原因。air-ui 主要还是以下几个方面跟 element-ui 有比较大的差异，也主要是以这些方面…"}, {"id": "6844903966992498696", "title": "代理模式Proxy 和 Vue3数据响应系统", "desc": "Proxy 提供了强大的 Javascript 元编程，尽管他不像其他 ES6 功能用的普遍，但Proxy有许多功能，包括运算符重载，对象模拟，简洁而灵活的API创建，对象变化事件，甚至Vue 3背后的内部响应系统提供动力。 Proxy用于修改某些操作的默认行为，也可以理解为在…"}, {"id": "6844904004019847182", "title": "资讯详情页面优化0-使用vue重构页面", "desc": "从我接手到将这个页面代码重构前，一直都还是使用angular1的代码去做的，需求来了也是用angular去实现；作为一个憧憬新技术的前端，怎么忍受得了现在还在使用这么有历史感的框架，所以，以前就一直在酝酿着如何将angular重构成vue。 这个资讯项目代码整体都是使用angu…"}, {"id": "6919767495708508174", "title": "深入理解Vue中的Typescript(四)-vue3项目当中使用Typescript", "desc": "0.目录深入理解Vue中的Typescript(一)-es语法的类属性和装饰器深入理解Vue中的Typescript(二)-vue_component源码分析和Typescript语法深入理解Vue中"}, {"id": "6844903550464557063", "title": "Parcel-VUE零配置前端构建（iview实践）", "desc": "在我的上一篇文章才刚刚阐述了vue-cli的webpack模板工程构建优化方案和步骤，以及在结尾时对未来前端构建的思考和展望。结果这个时候 【Parcel】 就横空出世了，目前关于Parcel的文档很少，而且Parcel本身也处于高速迭代发展的实验阶段，但它的确是前端构建的最终…"}, {"id": "6901615700364918791", "title": "vue中mock.js的使用", "desc": "Mock.js是一个模拟数据生成器，可帮助前端开发和原型与后端进度分开，并减少某些单调性，尤其是在编写自动化测试时。 1. vue-cli搭建项目后，安装axios和mock.js 2. 创建一个mock文件夹以及mock.js,并且在main.js引入这个文件 1. 模拟一个…"}, {"id": "6844903520613695495", "title": "vue-orgchart: 可编辑，可导出JSON的树形组织图", "desc": "最近公司有个需求，做一个可编辑的树形组织图。我第一个想到的是ECharts，可当时并没有（最近一个版本出了树图也不是组织图）；然后想到了AntV G6（上手难度有点大也不是组织图）；GoJS（LICENSE问题）；最后找到了OrgChart，本是jQuery插件且有时间沉淀，并…"}, {"id": "6917198795470503943", "title": "VueJS ajax|七日打卡", "desc": "​ vue-resource是Vue.js的插件提供了使用XMLHttpRequest或JSONP进行Web请求和处理响应的服务。 当vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios，在这里大家了解一下vue-resource就可以。 …"}, {"id": "6844903921337499662", "title": "vue实现视频上传[项目笔记]", "desc": "用户在选择视频后，跳转到bgm选择页面，选择bgm后，再将视频连同其他参数bgm信息/视频描述等同一上传到服务器。 视频选择和bgm选择在两个不同页面之间进行，并且是在选择视频之后跳转到bgm选择页面。 因此，在跳转到bgm选择页面时，应该携带关于视频的参数。 在选定bgm后，…"}, {"id": "6844903859811254285", "title": "深入剖析Vue源码 - 组件进阶", "desc": "Vue作为单页面应用遇到最棘手的问题是首屏加载时间的问题，单页面应用会把页面脚本打包成一个文件，这个文件包含着所有业务和非业务的代码，而脚本文件过大也是造成首页渲染速度缓慢的原因。因此作为首屏性能优化的课题，最常用的处理方法是对文件的拆分和代码的分离。按需加载的概念也是在这个前…"}, {"id": "6957521862788120606", "title": "Vue实战笔记(二) 引入Element Plus", "desc": "Element Plus 是为适配 Vue3 而对 Element UI 进行重构后产生的前端组件库，包含丰富的基础组件 下面先贴出官方文档，里面的介绍已经十分全面和详细，大家遇到的很多问题都可以在"}, {"id": "6844903609893650440", "title": "基于vue实现的双向数据绑定", "desc": "vue通过Object.defineProperty()来劫持各个属性的setter，getter；每个数据在修改时，会自动调用setter，在获取它时，会自动调用getter。 关于vue的双向数据绑定，以下链接的这篇博文讲的还不错，以下是思路整理和对他的代码进行的一些注释。…"}, {"id": "6988023185102880804", "title": "Vue 常用内置指令（v-if、v-for、v-bind、v-on）", "desc": "指令：是指 Vue 提供的以 “v-” 前缀的特性，当指令中表达式的内容发生变化时，会连带影响 DOM 内容发生变化。"}, {"id": "6914590040777719816", "title": "【Vue 故地重游】01.VueRouter 篇", "desc": "3.1. router-link组件：只做展示，点击时更新 url 3.2. router-view组件：url 变化时，展示的组件对应改变，Vue 最大的特点是响应式，而组件每次渲染都是调用了render函数，因此我们希望将来某个数据变化时能够触发render执行，这部分内容…"}, {"id": "6844903726344306696", "title": "为什么Proxy可以优化vue的数据监听机制", "desc": "其本质是new Watcher(data, key, callback)的方式，而在调用之前是先将data中的所有属性转化成可监听的对象, 其主要就是利用Object.defineProperty，。 Object.defineProperty的性能开销。 defineReac…"}, {"id": "6957726149950570527", "title": "就业信息统计网（接口文档）", "desc": "基本配置 基地址： 1.api认证统一使用token认证，数据返回统一使用json. 服务端开启cors,解决跨域问题。 2.请求方法 GET（SELECT）：从服务器取出资源（一项或多项）。 POS"}, {"id": "6901240217156943885", "title": "vue slot 插槽详解", "desc": "二、具名插槽: 子组件中有多个插槽，通过给插槽指定名称方式实现一 一对应。 1） 两个属性合并成了一个 v-slot : 插槽名称 = ’ 传过来的值 ’ 。 2） 组件页面中slot的内容没有变化 。 3） v-slot 不能用在 html 标签上 。 4） 如果是默认插槽 …"}, {"id": "6883984833362526222", "title": "【真香系列】Vue-Next 源码第二章", "desc": "mount 方法首先创建了 vnode，然后渲染 vnode，最后返回组件的代理对象。 这里选项是对象，所以 shapeFlag 为 4，_createVNode 中额外要提及的是 currentBlock 和 patchFlag，这两个跟新特性相关，后面的文章中会详细说明。 …"}, {"id": "6844903689099051021", "title": "[译] 深度介绍 Vue DevTools 5.0 新特性", "desc": "Earlier this month the Vue devtools version 5.0 beta was released, bringing amazing new features to the already debugging powerful tool. So…"}, {"id": "6844903607582588941", "title": "两种方式lu一个vue弹窗组件(v-model与promise方式)", "desc": "最近公司有一个后台业务虽然也是写在了现有的后台系统中，但是之后要为这个业务单独拉出来新建一个后台系统,所以现有的后台系统中的vue组件库，就不能用了(因为不知道将来的系统要基于什么组件库，以防给未来移植项目带来麻烦),这次业务中又遇到了弹窗的功能,所以只能手动写一个了(虽然说弹…"}, {"id": "6844903815439712269", "title": "聊聊vue2.5的patch过程（diff算法）", "desc": "Vue2.0开始，引入了Virtual Dom，了解diff过程可以让我们更高效的使用框架，必要时可以进行手工优化，本文针对的是Vue2.5.7版本中的Virtual Dom进行分析，力求以图文并茂的方式来分析diff的过程。 PS: 如有不对之处，还望指正。 我们知道，浏览器…"}, {"id": "6844903502460780551", "title": "前端每周清单第 34 期：Vue 现状盘点与 3.0 展望，React 代码迁移与优化，图片优化详论", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Microsoft 宣发面向 iOS 与 …"}, {"id": "6909741212943220749", "title": "js数组对象根据id去重", "desc": "js数组对象根据id去重例子"}, {"id": "6945274109378953223", "title": "梳理一下你脑子中Vue的computed源码! ! !", "desc": "我们知道vue调用实例后，Vue内部initState时候，会处理很多不同的数据，包括有data、props、methods.... 处理computed的方法就是initComputed。 上面做了几件事1.为每个computed中的属性添加 watcher。2.define…"}, {"id": "6844903609314836487", "title": "Vue项目中路由动态传参功能相关实现", "desc": "这两天在项目中有个新需求：在当前页面中的有很多数据，过滤数据的条件有时间，页码，类型，id搜索....，假设我在页面中选择的某段时间，某个类型，现在我需要把握当前看到的信息完全展现给另一朋友。 一. 初步解决方案 查阅官方文档发现文档中有此段话：记住参数或查询的改变并不会触发进…"}, {"id": "6844903599890251790", "title": "vue地区选择组件", "desc": "在操作地区数据时，以前也用过树形的地区选择组件，但因其在再操作大量的地区数据时，渲染缓慢，所以我们就换了另一种数据展示形式和交互形式，从而就有了这个组件。 area 参数是必选项，表示组件初始化时的地区数据，可以为空。"}, {"id": "6844903507066093575", "title": "教你用Vue渐进式搭建聊天室，从JavaScript=>TypeScript", "desc": "希望能给大家一个渐进学习的经验。 关于TypeScript的基本知识，可以直接看xcatliu整理的教程，简单易懂，有Java/C#基础就可快速上手。"}, {"id": "6844903597000359943", "title": "一名2018年应届生的美团前端校招面试之旅", "desc": "首先介绍一下本文的主角：一名18年应届生，普通二本，学习能力一般，技术能力更是一般，前端小白，但是在努力学习中。 从17年秋招开始我便向美团投了简历，也参加了在线笔试，但是输的很惨淡，笔试没过后，来继续在武汉找了家小公司实习。春招开启之际，我尝试过投了斗鱼（没有获得面试机会），…"}, {"id": "6919299479170613261", "title": "手摸手带你拥有自己的cli脚手架（二）", "desc": "紧接着用npm publish发布，最后出现一个+ juli-cli@版本号，那就是发布成功啦，可以去npm看你刚刚的更新了。"}, {"id": "6977038104649531405", "title": "vue组件间通信", "desc": "组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。"}, {"id": "6844903881105735694", "title": "【译】Vue + svg，面向想要自由的驾驭 css 动画的人详细解说。（附代码）", "desc": "大家好，这里是 UX（交互体验设计师）& 前端开发，并且还喜欢画画的 yuki！@yuneco。 在这篇文章里，为了能够更加轻松地去使用 Vue 和 css animation，基础的部分，将会跟大家一步步的详细解释。目标如下图↓所示，用 JavaScript 自由的控制动画。…"}, {"id": "6844903666764234765", "title": "用node实现一个简单的聊天室—— 升级版", "desc": "添加用户登录、注册的功能， 添加查询聊天室成员的功能。在本章中， 通过token来进行用户识别， 通过mysql来保存用户信息， 将会用到egg的对应插件。 封装的IO， 很简略了。。 Sequelize -> sequelize 是一个广泛使用的 ORM 框架，它支持 MyS…"}, {"id": "6844903718102499342", "title": " 2018.11.19秋招末第二波前端实习/校招小结", "desc": "一是面试官比较有经验不会生硬的只问知识点，会结合实际聊些技术上或者业务上的东西，一些遇到的坑，很容易产生共鸣，技术比较强你说什么都能hold住并跟你聊，入职后一般也都是他来带你，这种感觉比较轻松活跃也不用准备很多或者刷很多面试题。 第二种面试过程基本上一问一答，面试官会准备好问…"}, {"id": "6977178696272576526", "title": "Vue网站如何设置主题色以及换肤功能", "desc": "Vue项目网站如何设置主题色以及换肤功能 1.利用store全局存储颜色,这里存储了一个全局颜色value,一段全局样式styleTheme颜色名colorName,都给了默认值，名字都可以自定义哈。"}, {"id": "6985125748684095525", "title": "Vue .sync 修饰符", "desc": "当子组件需要修改从父组件的接收到的数据时，必须通知父组件，子组件操作完后再把值传给父组件。可以在父组件中使用 .sync 修饰符允许子组件自行修改从父组件接收到数据。"}, {"id": "6844903573826830349", "title": "Vue + Webpack 灰度发布控制", "desc": "实现前端项目多个版本共存。如果只存在一份资源，\b会导致每次修改都会影响到所有的用户，\b对于持续更新的Web项目来说，需要保证每次的修改只会影响到小部分用户，而不是所有的，控制范围，减少\b损失。 原直接以master分支\b作为production，功能修改完善合并到master上…"}, {"id": "6844903814097534983", "title": "【Vue 实践】增加简历市场及 WebSocket 通知-02", "desc": "我：Emma……以前了解过，但是没有使用过，不过我近期准备给自己做的简历增加一个市场，当有用户新增简历推送时，在浏览简历市场的用户就可以收到提示。 以前记得在 菜鸟教程 上看过 WebSocket 示范，继续回顾一下，可以发现实现一个简单的 WebSocket 很容易。 1. …"}, {"id": "6936040864531611662", "title": "vue-cli@4.5.11源码简单解读", "desc": "距离上次看vue-cli的脚手架都快两年了。再看vue-cli， 名字还是那个名字， 东西却不是那个东西了。 之前是在github上有项目模板，直接会去拉取项目，现在是所有东西都内置了。 之前webpack的配置都是暴露的， 现在是封装了一个叫@vue/cli-service的…"}, {"id": "6844903726583382029", "title": "基于Vue组件化的日期联动选择器", "desc": "我们的社区前端工程用的是element组件库，后台管理系统用的是iview，组件库都很棒，但是日期、时间选择器没有那种“ 年份 - 月份 -天数 ” 联动选择的组件。虽然两个组件库给出的相关组件也很棒，但是有时候确实不是太好用，不太明白为什么很多组件库都抛弃了日期联动选择。因此…"}, {"id": "6844903757717733384", "title": "vue 源码学习(二)  实例初始化和挂载过程", "desc": "引入方法，用function定义了Vue类，再以Vue为参数，调用了5个方法，最后导出了vue。 看到initGlobalAPI的定义，主要是往vue.config、vue.util等上挂载全局静态属性和静态方法（可直接通过Vue调用，而不是实例调用），再把builtInCom…"}, {"id": "6935718412026904607", "title": "Vue UI组件库对比与选择", "desc": "1. 仅替换主题色 2. 改变 SCSS 变量 在项目中改变 Element Plus 的样式变量。新建一个SCSS样式文件，例如 element-variables.scss 3. 命令行主题工具 安装element-theme,element-theme-chalk,通过e…"}, {"id": "6948407772392194085", "title": "vue2/3数据双向绑定的区别（一）", "desc": "利用Object.defineProperty方法，对对象中的属性的读写进行监听，使用到的是Object.defineProperty的get()、set()函数，在属性读写时进行附加操作。 1. 基本数据类型 原理：遍历data对象。如果data对象为null或不是对象，不处…"}, {"id": "6989583873978204197", "title": "Vue源码解析之虚拟DOM和diff算法", "desc": "首先先简单介绍一下虚拟DOM和diff算法 diff算法的简单介绍 变为 在vue中，新节点通过v-if将span标签呈现到dom中，然后往数组中push了一项雪碧，那么此时就有一个难题，总不能把旧节"}, {"id": "6844903725891321869", "title": "理解vue中render函数", "desc": "一. 基本用法 二. 添加样式、方法 四. 数组循环输出 五. this.$slots用法 六. v-model用法 八. 子组件之间传递作用域插槽 九. 函数化组件 listeners: (2.3.0+) 一个包含了所有在父组件上注册的事件侦听器的对象。这只是一个指向 dat…"}, {"id": "6981634582198091783", "title": "Vue2源码之watch和computed(三)", "desc": "1.watch实现 1.1.测试 1.2.index.js 1.3.state.js 初始化watch 函数形式和数组形式的watch合并 1.4.observer/watcher.js 2.comp"}, {"id": "6854573218712256526", "title": "Element组件源码研究-Input输入框", "desc": "本文的研究思路是通过阅读Element源码，然后自动动手一步一步编写组件，完善其对应功能。 继研究了Button组件之后，我又看了一下Link组件的源码，跟Button组件类似，复杂度不是很高。随后挑选了Input组件作为今天的研究对象。 在components文件夹下新建In…"}, {"id": "6879832896874479623", "title": "vue实战项目之购物app问题记录", "desc": "引言项目概述 前端技术栈Vue：用于构建界面的前端框架axios：实现数据接口请求（用本地的json数据模拟）vue-swiper：首页轮播图的制作以及实现可滑动分页效果vue-better-scro"}, {"id": "6844903747684941838", "title": "Vue实现浮动按钮组件 - 页面滚动时自动隐藏 - 可拖拽", "desc": "本文可能有点啰嗦了... 为了充分发挥vue的特性，我们不应该通过ref来直接操作dom，而是应该通过修改数据项从而让vue自动更新dom。因此，我们这样编写template。 当然.ys-float-btn肯定是position:fixed的，其他的样式很简单，大家自由发挥。…"}, {"id": "6997583840986267679", "title": "回首Vue3之API篇（五）", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 上篇文章讲完了应用API，这篇文章我们来讲一下全局APIcreateApp和h的使用，以及我们需要注意的地方。 createApp cre"}, {"id": "6982751127666163749", "title": "【Vue】结合Promise及timeout做一个定时请求数据的方法", "desc": "需求：做一个方法，每10秒拿一次数据；当数据小于等于4时，调用promise失败时的回调函数reject并输出返回结果；当数据大于4小于11时，调用promise成功时的回调函数resolve并输出返"}, {"id": "6844903583259820046", "title": "完成一个城市选择组件（阿里前端题目,内附知识点、思路）", "desc": "借用了两个久经考验的轮子：fastClick和better-scroll，介意可以就此打住。本文绝对原创，手打，思路清晰，知识不难，不适合大佬观看，谢谢。 首先说一下，我不是阿里的人，也没去阿里面试过，这是某微信群里的一个小伙伴给的，我现在的能力达不到阿里的要求。不过人没梦想还…"}, {"id": "6844903546110869512", "title": "\b使用 async-validator 编写 Form 组件", "desc": "前端开发中，表单的校验一个很常见的功能，一些 ui 库例如 ant.design 与 Element ui 都实现了有校验功能的 Form 组件。async-validator 是一个可以对数据进行异步校验的库，ant.design 与 Element ui 的 Form 组件…"}, {"id": "6991450321008459783", "title": "vue的变化侦测-Object篇｜ 8月更文挑战", "desc": "vue的变化侦测-Object篇 众所周知，Vue最大的特点之一就是数据驱动视图，那什么是数据驱动视图？也就是说，当数据发生变化时对应的视图就要更新。接下来我们就通过阅读源码来看一下Vue内部是怎么对"}, {"id": "6987235542077276191", "title": "Vue3项目转原生小程序插件（二）Vue模板拆分成Wx模板", "desc": "本篇讲述如何将现有的 Vue 模板（template + script + style）以最小的成本拆分成微信的模板（wxml + js + wxss）。但我们如何能够快速的实现这些高频低效的工作呢？"}, {"id": "6994089253500092429", "title": "Vue3实现虚拟列表", "desc": "当要展示的数据量很大的时候，可以采用分页的方式，但是用户在浏览信息时并不连贯。此时可以将数据缓存在本地，采用虚拟列表的方式展示，这里使用Vue3开发一个简单的虚拟列表。"}, {"id": "7000741410827665421", "title": "Vue 2.x中的响应式实现原理-1", "desc": "8月更文挑战 前言 MVVM模式最核心的特性就是数据双向绑定，Vue构建了一套响应式系统，可以实现用声明的方式绑定数据，从而在数据发生变化时自动渲染视"}, {"id": "6997561720604459022", "title": "学习vue过程中遇到的问题", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 1、vue-quill-editor动态禁用 项目中把vue-quill-editor单独封装成了一个组件，通过props传递readOnl"}, {"id": "6982130542804221982", "title": "小白手把手教你封装Vue组件，并使用npm发布", "desc": "制作一个vue组件之后，通过npm打包发布的方式使之后使用起来更加方便快捷。以后还会继续跟新，此次只是个简单版本。"}, {"id": "6844904165160779783", "title": "【读vue源码】探究模版和数据是如何被渲染成DOM的？", "desc": "Vue.js 一个核心思想是数据驱动。也就是说视图是由数据驱动生成的，我们对视图的修改，不会直接操作 DOM，而是通过修改数据。当交互复杂的时候，只关心数据的修改会让代码的逻辑变的非常清晰，因为 DOM 变成了数据的映射，我们所有的逻辑都是对数据的修改，而不用碰触 DOM，这样…"}, {"id": "6844903886931623943", "title": "vue项目中引入iconfont", "desc": "对于前端而言，图标的发展可谓日新月异。从img标签，到雪碧图，再到字体图标，svg，甚至svg也有了类似于雪碧图的方案svg-sprite-loader。雪碧图没有什么好讲的了，只是简单地利用了background-position来做图标定位。今天咱们先聊聊怎么使用字体图标和…"}, {"id": "6969742163840073741", "title": "Vue的双向绑定原理及简单实现", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 Vue 数据双向绑定原理 Vue 数据双向绑定是通过 数据劫持 结合 发布者-订阅者模式 的方式来实现的。 我们先来看下定义在 Vue 初始化数据"}, {"id": "6844903650502901767", "title": "vue 手写一个时间选择器", "desc": "最近研究了 DatePicker 的实现原理后做了一个 vue 的 DatePicker 组件，今天带大家一步一步实现 DatePicker 的 vue 组件。 1. 构思页面结构 DatePicker 组件由输入框和日历面板组成，写好页面主体结构。 输入框<input>点击显…"}, {"id": "6844904178284920840", "title": "[举个栗子]增加组件通用性的几个点", "desc": "最近在做项目的时候，看到有两个功能一样，但是交互，样式不一样的需求，为了图方便维护，就封装了组件，发现一个看似简单的组件，如果要封装得通用些，要考虑的东西其实也不少。 然后组件就无法使用了。 这个时候，肯定不是复制一个文件，改下样式再写一个组件，只能把原来的组件改得通用些，能适…"}, {"id": "6916722151835844622", "title": "⒓ Vue的动态组件 & 异步组件", "desc": "我们看上面的这段代码，首先声明了三个变量 componentA、componentB、componentC 并为它们指定了 template，在 new Vue 里面指定了 componentId 初始值为 componentA。然后在 html 里面通过 &#x3C;comp…"}, {"id": "6908964754275106830", "title": "vue3.0.3实验性功能", "desc": "使用ctx.expose来暴露一些方法和属性来供父组件调用。 使用ref:声明一个变量，我们可以直接访问变量的值，不需要加个value，是不是方便了很多。 当我尝试使用var声明css变量时（var），eslint给出了错误提示（新的提案）。 我们可以使用新的v-bind声明c…"}, {"id": "6844904152070357000", "title": "Vue数据绑定原理之数据劫持", "desc": "首先我们这次的源码分析不仅仅是通过源码分析其实现原理，我们偶尔还会通过Vue项目编写的测试用例了解更多细节。 根据官方的指导图来看，数据(data)在变更的时候会触发setter而引起通知事件(notify)，告知Watcher数据已经变了，然后Watcher再出发重新渲染事件…"}, {"id": "6874514882536931335", "title": "vue3 源码简版体验", "desc": "建立响应数据key和更新函数之间的对应关系。"}, {"id": "6844903824553934856", "title": "vue cli 3.x 项目部署到 github pages", "desc": "github pages 是 github 免费为用户提供的服务，写博客，或者部署一些纯静态项目。 最近将 vue cli 3.x 初始化项目部署到 github pages，踩了一些坑，记录如下。 1. vue-router 不要开启 history 模式 路径中的 # 比较…"}, {"id": "6944649890488139789", "title": "21天学会写个仿Vue3的轮子：（三）响应式前的准备（上）", "desc": "上一篇文章里，我们已经可以让框架从虚拟节点渲染真实的 DOM 节点。 用户可以在组件的 render 函数里直接写虚拟节点来构建视图，剩下的交给框架。 但是这还没有解决掉视图层和数据层的鸿沟，数据的更新还没有能直接应用到视图。 接下来我们就要添加响应式功能。 当数据变化，视图也…"}, {"id": "6901945344189366279", "title": "Vue2.0源码分析：编译原理(下)", "desc": "由于掘金文章字数限制，不得不拆分上、下两篇文章。 在经过parse模板编译完成后，我们可以得到一个ast树形结构，接下来进行optimize优化第二大步骤。这个过程相比较其它两个步骤，是最简单的。 优化的目的在于，在编译的时候有些节点自首次渲染完毕后，在后续的派发更新过程中不会…"}, {"id": "6935657473550319652", "title": "Vue源码解析(虚拟DOM)", "desc": "我们在最开始提到过，Vue从2.0+版本开始就引入了虚拟DOM，也知道Vue中的虚拟DOM借鉴了开源库snabbdom (opens new window)的实现，并根据自身特色添加了许多特性。 Vue在1.0+版本还没有引入虚拟DOM的时候，当某一个状态发生变化时，它在一定程…"}, {"id": "6936921373876944904", "title": "后台系统table组件的封装和细节实现，提高开发效率", "desc": "前不久针对公司的后台系统，开发了一套后台系统的组件库。对于table组件的实现思路和细节想分享一下。如果大家有其它的思路和想法，可以评论区留言讨论。 在开始编写组件之前我们要先思考一下，el-table 组件可以传递很多属性和事件方法，我们不可能把它们都一个个罗列到组件中，那有…"}, {"id": "6844904128028622861", "title": "Observer、Dep、Watcher 傻傻搞不清楚", "desc": "我觉得搞清楚这些，首先要知道 vue 初始化的过程。我们从 new Vue() 开始，构造函数会执行 this._init，在 _init 中会进行合并配置、初始化生命周期、事件、渲染等，最后执行 vm.$mount 进行挂载。 这里主要来看 initState(vm)，响应式…"}, {"id": "6844904007396229128", "title": "基于 IntersectionObserver API 实现无限滚动组件", "desc": "在使用观察者 API 之前，vue-scorll-loader 1.x 版本是使用远古技术通过监听滚动条实现的，稍有常识的人都知道这种方式会有性能损耗 :-D，如今 Intersection Observer API 兼容性越来越好，再加上官方的 polyfill 就可以生产环…"}, {"id": "6876386301810376712", "title": "（记录）vue、element表格首行跑到最后一行去了", "desc": "项目中对表格的封装的时候发现，表格的第一行总会跑到最后一行去（只要使用了 v-if 进行列控制渲染）。如图所示： 可以看见我们为了循环，在 table 里面放置了 div 标签，但是这其实是不合法的，table 标签中不应该出现不属于 table 的标签，出现了也会被屏蔽掉，但…"}, {"id": "6985108388560666661", "title": "vue3初探一", "desc": "官方地址：https://vue3js.cn/docs/zh/ 源码下载地址：https://github.com/vuejs/vue-next vue3的设计初衷：https://increment"}, {"id": "6899822303022956552", "title": "Vue 组件为何采用异步渲染-nextTick的实现原理", "desc": "src/core/observer.scheduler.js 164行 ，主要就是实现一个 watcher 队列 ，每一次的 update 都放入到队列中，然后进行统一异步处理 。 看代码： 好了，通过源码简单的分析，明白为啥 vue 为啥采用异步更新了吧，原因很简单，因为vu…"}, {"id": "6844903977100804103", "title": "Vue组件通信事件总结", "desc": "在Vue的项目开发里面，组件之间的通信实在是太常见了，虽说Vue已经出了很久了，但我接触它的时间仍不是很多，趋于业务开发，有时候会踩到一些坑，也是初级开发者很容易遇到的问题，当然网上也都有很多解决方案的文章，不过每次一遇到问题就百度一下的习惯并没有让自己系统的理解Vue里面的通…"}, {"id": "6844903826693029895", "title": "key在Vue列表渲染时究竟起到了什么作用", "desc": "Vue2+采用diff算法来进行新旧vnode的对比从而更新DOM节点。而通常在我们使用v-for这个指令的时候，Vue会要求你给循环列表的每一项添加唯一的key，那么这个key在渲染列表时究竟起到了什么作用呢？ 在解释这一点之前，你最好已经了解Vue的diff算法的具体原理是…"}, {"id": "6844903847530332168", "title": "vue 地图可视化 maptalks 篇", "desc": "上面是一段 maptalks 官方介绍，下面来创建工程。首先利用 vue-cli3 搭建一个 SPA 项目，然后写一段 maptalks 的 HELLO WORLD。如果对 vue 项目的创建比较熟悉，可以跳过步骤一，直接看步骤二。 输入 y，保存本次设置为模版，下次创建项目直…"}, {"id": "6844904101361254413", "title": "vue ssr快速采坑", "desc": "这里先把最终的项目结构放出来，为了方便理解，下面讲解一些比较重要的文件和目录。 build 是 webpack 的配置文件，这里没有配置开发环境的代码，如果有需要可以参考官方给出的例子 HackerNews Demo，同时为了简洁，webpack 的配置文件就不放了，直接在我上…"}, {"id": "6844903618038988808", "title": "在Vue中使用TypeScript", "desc": "很早以前，想在Vue中使用TypeScript来增强开发体验，TypeScript的优点自不必多说。查了很多资料，了解了当时在Vue中使用TypeScript的体验。由于当时TypeScript对Vu"}, {"id": "6908628914898223118", "title": "vue项目心得之相册上传", "desc": "一个好的项目一定少不了对项目文件结构进行规划，项目结构清晰了，前后端交流更加方便，项目开发效率就提升了。 我们可以发现此时的主入口文件(server.js)的代码意图是十分简洁明了的，这得益于我们的项目文件结构规划思想。 一个项目的完成一定少不了任务拆分的思想，做项目就像是拼拼…"}, {"id": "6844903937338785800", "title": "vue页面中处理大量对话框", "desc": "我的做法是基于el-dialog组件把对话框封装成全局弹窗组件, 提供了一个方法invoke呼出对话框并返回promise, 在对话框的内部可以resolve或reject该promise, 这样就可以链式then呼出下一个对话框,并且通过promise传值。 上面封装的dia…"}, {"id": "6932389637818155016", "title": "字典组件封装实践思路浅析", "desc": "我们在业务开发中，大量字典选择场景，于是产生了个想法 —— 能否封装一个通用型的字典选择组件呢。 这里使用Vue实现，基于ElementUI组件库，但不限于此库。有如下结构： 我们期望可以支持select/radio/checkbox等交互组件，使用component实现动态组…"}, {"id": "6844903832426643463", "title": "快速上手最新的 Vue CLI 3", "desc": "尤雨溪（ Evan You）发起并创建的 Vue JS ，是一个用于构建用户界面的非常先进的框架，在 GitHub 上拥有超过 121,000 star，代码贡献者也超过了 234 位 。它包含一个能够使开发人员专注于 Web 应用视图层的核心库，以及一个支持库的生态系统，可帮…"}, {"id": "6844904145393025038", "title": "vue实战项目：项目技巧总结（二）", "desc": "如果直接在自定义组件中使用 class 或 :class，那么样式规则就会直接应在这个组件的根元素上。 也可以使用 v-bind:style 或 :style 直接给 HTML 元素绑定样式，它也有对应的对象语法与数组语法。 因为 JS 属性不支持短横分隔命名，所以我们这里使用…"}, {"id": "6923041394118705166", "title": "Vue.js + Vuex + TypeScript实战项目开发与项目优化", "desc": "1. 使用@vue/cli构建项目 3. 初始目录结构说明 4. TypeScript相关配置介绍 项目中通常使用ESlint来约束代码规范。 ESLint附带有大量的规则。你可以使用注释或者配置文件修改项目中要使用的规则。要改变一个规则设置，你必须讲规则 ID 设置为下列值之…"}, {"id": "6844904141894975496", "title": "一篇文章让你明白Vue3.0", "desc": "4月21日，尤大大在B站分享了Vue.js3.0 Beta的最新进展，从2019年6月份的第一次发布的Vue3.0 Function-based API RFC，再到2019年10月份的Vue.js3.0 pre-alpha，经历一次次的更新，如果你还没有对3.0的更新内容有所…"}, {"id": "6844903920590913544", "title": "Vue同构赋能之 VUE SSR 篇", "desc": "也前前后后投产过几个SSR项目，有些经验可以分享给大家，自己也好重新整理下相关知识。 也不能处理样式，多组件情况下更是要命... 欢迎大家期待下一篇NUXT的分享，那一篇应该会精简许多。"}, {"id": "6995200219587706888", "title": "【Vue2.x 源码学习】第三十八篇 - 组件部分 - 组件的编译", "desc": "【Vue2.x 源码学习】第三十八篇 - 组件部分 - 组件的编译，主要涉及以下几个点： 组件初始化情况； 组件合并的位置； 组件合并的策略； 组件合并后测试；"}, {"id": "6995196946298175496", "title": "《 浅析 Vue 响应式的理解》", "desc": "什么是 Vue 的数据响应式 数据改变，UI页面做出响应。 当修改 Vue 实例中的 data 属性时，UI页面中的 data 会做出响应，Vue 是通过Object.defineProperty来实"}, {"id": "6856950924502532104", "title": "Vue3.0源码解析之组件渲染，vnode 到真实 DOM", "desc": "这段代码并不会在页面上渲染一个标签，而它具体渲染成什么，取决于你怎么编写 HelloWorld 组件的模板。举个例子，HelloWorld 组件内部的模板定义是这样的： 可以看到，模板内部最终会在页面上渲染一个 div，内部包含一个 p 标签，用来显示 Hello World …"}, {"id": "6995181921513226270", "title": "你应该知道的Vue小知识", "desc": "请简述 Vue 首次渲染的过程。 Vue初始化，实例成员、静态成员 首先进行vue的初始化，即初始化实例成员及静态成员。 new Vue() 初始化结束以后，调用vue的构造函数new Vue()，在"}, {"id": "6914080451397173256", "title": "Vue 数据更新页面视图未渲染 问题", "desc": "这个api很详细的说明了 vue 的数据变化与视图更新的原理，推荐先阅读这篇信息，下面再分享一点自己在项目中实际踩过的一些坑。 1.一个最重要最基础的要实现响应式，你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值。 2.对于对象，每次更改请 直接 更改…"}, {"id": "6978272659591135240", "title": "Vue进阶（幺肆幺）：Vue-elementUI实现操作栏位更多效果", "desc": "项目开发过程中，需要实现操作栏位图标按钮与文字按钮切换效果，在实现文字按钮过程中，大致思路如下：操作栏位只展示前2个菜单，之后的菜单采用更多方式展示，通过点击更多展示其余菜单按钮。 <el-dropdown-menu slot=\"dropdown\" v-if=\"!!user.ho..."}, {"id": "6844903958515810312", "title": "Vue 表单读写分发器 —— 编辑/详情 的合并解决方案", "desc": "最近我对我公司前端开发过程中的一个痛点，写了一个开源项目，分别对 element-ui 和 iview 的表单组件做了一层扩展，想介绍给大家，望多多支持。 我们公司做的是 to B 的项目，框架选定的 Vue 。与互联网 to C 项目比，to B 以管理后台为主，没有太多复杂…"}, {"id": "6995105681812488222", "title": "Vue响应式原理部分源码复现", "desc": "1.整体结构 Vue：负责把data的成员注入到Vue实例，并且转换成getter/setter，Vue内部会调用Observer，Compiler Observer：数据劫持，对data中的数据进行"}, {"id": "6844903609449054222", "title": "vue项目中富文本编辑器踩坑之旅", "desc": "Tinymce一开始选用了tinymce，遇到的问题如下：主要参照的是https://github.com/PanJiaChen/vue-element-admin第一个问题是引入静态文件的路径与此不"}, {"id": "6910393218244804616", "title": "从零搭建基于 Webpack5.x 的 Vue 项目", "desc": "webpack5.x 发布至今已经将近两个月了, v5 版本内置了一些常用的插件, 较 v4 版本有很大的变化. 本文基于 webpack5.x 以及 vue2.x, 从零搭建一个基础模板:"}, {"id": "6844903586023866381", "title": "vue 单页应用（spa）前端路由实现原理", "desc": "window.history 对象包含浏览器的历史，window.history 对象在编写时可不使用 window 这个前缀。history是实现SPA前端路由是一种主流方法，它有几个原始方法： 在HTML5，history对象提出了 pushState() 方法和 repl…"}, {"id": "6899835117099810824", "title": "Vuex [状态管理原理]", "desc": "好了，基本就是这些东西；通过官方文档我们知道，每一个vue插件都需要有一个公开的install方法，vuex也不例外。我们一步步分析 整个js文件里没有什么多余的东西，就是导入和导出，我们回头想一下，使用第三方插件是不是都需要安装啊，其实就是那句 Vue.use(插件) ，Vu…"}, {"id": "6844903613857267719", "title": "响应式数据与数据依赖基本原理", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 国内前端算是属于Vue与React两分天下，提到Vue，最令人印象深刻的就是双向绑定了，想要深入的理解双向绑定，最重要的就是明白响应式数据的原理。这…"}, {"id": "6925063505460609037", "title": "vue原理学习系列(五)：路由", "desc": "随着前端应用的业务需求和功能变得愈发复杂，单页应用（SPA）已经成为前端应用的一种主流模式，SPA就是通过前端路由来实现的。 前端路由最核心的特点在于：通过改变URL，在不重新请求页面的情况下，对视图进行更新。 关于hash模式的路由和history模式的路由，vue：路由实现…"}, {"id": "6844904137155411975", "title": "vue 使用 vue-pdf 实现pdf在线预览", "desc": "之前的demo增加了图片预览，于是今天下午追完番剧就突然想到能不能把pdf在线预览也做了，说干就干，刚开始查了很多教程，我发现很多人都在说什么pdf.js这个库，这当然没什么问题，pdf.js的确可以非常完美的实现pdf在线预览的过程，但是感觉这样直接进去有点不太优雅，于是找找…"}, {"id": "6986608318835851271", "title": "1分钟实现拖拽，让你划水更自由", "desc": "vue.draggable 一个神奇的组件，快速实现列表拖拽，支持移动设备、拖拽和选择文本、智能滚动，可以在不同列表间拖拽、兼容vue2过渡动画、支持撤销等操作，总之是一款非常优秀的vue拖拽组件。"}, {"id": "6995956753133207582", "title": "Vue的常用属性原理", "desc": "实例化VueRouter对象时，以构造函数的方式传入mode参数决定Router模式。 默认为hash模式，通过supportPushSt"}, {"id": "6968686700625133599", "title": "vue3单文件组件编译过程", "desc": "最近产品给我提了一个非常好玩(e xin)的需求：用户输入单文件组件（sfc）的代码就能显示对应的界面。具体可以参考vue playground。 提出问题 作为一个成熟的前端，要善于挖掘产品的隐含意"}, {"id": "6979821615227863053", "title": "Vue 项目中的常用技巧", "desc": "在 Vue 项目开发中，很容易产生一些问题，比如代码重复、繁杂等，其实 Vue 项目开发中有很多技巧可以使用，本文将列出一些简单且很好用的几个技巧，帮助我们写出漂亮的代码。用到的技术栈是 Vue2.0"}, {"id": "6997805598507008007", "title": "Vue CLI项目中 axios 的封装及使用详解", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 在做 vue 中大型项目的时候，官方推荐使用 axios，但是原生的 axios 可能对项目的适配不友好，所以在工程开始的时候来封装一下a"}, {"id": "6984656399812788238", "title": "在vue中使用jsx的正确姿势", "desc": "在vue3中使用jsx的正确姿势 前言 又到了愉快的摸鱼时间,我觉得不能荒废,H5页面我一直用的vant,出于对源码的好奇,我从git上拉了一份vant源码,里面竟然都是jsx写的组件,于是我开始了对"}, {"id": "7000539769717391390", "title": "[Vue源码]--如何监听数组的变化（逐行注释）", "desc": "对数组的监听 案例分析 vue无法监听数组的变化，例如 :this.arr[index]=newVal或者this.arr.length=newLength 如果需要去监听数组并改变视图，有两种方法可"}, {"id": "6949875413594161160", "title": "在Vue.js中加载字体的最佳做法", "desc": "添加字体不应该对性能产生负面影响。在本文中，我们将探讨在 Vue 应用程序中加载字体的最佳实践。正确声明font-face的字体确保正确声明字体是加载字体的重要方面。这是通过使用 font-face "}, {"id": "6998330432374702087", "title": "【VUE】slot插槽以及作用域插槽", "desc": "父组件向子组件优雅地传递dom结构，子组件能够完美解析DOM。作用域插槽是带数据特殊类型的插槽，用作一个 (能被传递数据的) 可重用模板，来代替已经渲染好的元素。"}, {"id": "6995856687106261000", "title": "Vue3实现各种附件预览", "desc": "在项目中经常有各种附件预览的功能。总结出了一些常用的文件预览方式。本文介绍vue3常用文件(pdf、word、excel、txt)的预览。"}, {"id": "7000568693595865125", "title": "Vue 实现在线选座功能（支持miniMap，支持缩放）", "desc": "前言 前段时间写了一个在线选座功能，现在分享一下。 纯Dom方式实现，包括miniMap，代码没怎么优化，主要提供实现思路。 一、功能介绍 支持选座区域划分 支持缩放选座区域大小（可配置） 支持拖拽选"}, {"id": "6844903806782668814", "title": "「从源码中学习」面试官都不知道的Vue题目答案", "desc": "当回答面试官问及的Vue问题，我们除了照本宣科的回答外，其实还可以根据少量的源码来秀一把，来体现出你对Vue的深度了解。 “谈谈你对Vue生命周期的理解。” 1. “new Vue()做了什么？” new关键字代表实例化一个对象, 而Vue实际上是一个类, 源码位置是/src/…"}, {"id": "6976593900521816072", "title": "从Vue2.0到React17——React类组件的生命周期", "desc": "本文详情介绍了React类组件的生命周期和生命周期钩子函数的应用，利用生命周期钩子函数对React组件更新频率进行优化。"}, {"id": "6844904085926199309", "title": "2020 年，Vue 受欢迎程度是否会超过 React？", "desc": "前端框架的受欢迎程度每年都在增长， 如今，在较大型或者中型的项目，基本都需要使用框架来进行开发。 前几年，由谷歌发布的Angular和Facebook的React就开启前端框架地位竞争。 但是，在2018年，前端世界发生了重大变化，因为还有一个更强大的选手Vue参加了比赛。 接…"}, {"id": "6970960569985663013", "title": "vue3后台管理系统（模板）", "desc": "🍎系统简介 此管理系统是基于Vite2和Vue3.0构建生成的后台管理系统。目的在于学习vite和vue3等新技术，以便于后续用于实际开发工作中； 本文章将从管理系统页面布局、vue路由鉴权、vuex"}, {"id": "6995579939911106596", "title": "浅尝MutationObserver|Vue自定义指令", "desc": "Vue 的自定义指令，用来解决需要对普通 DOM 元素进行操作的问题。 MutationObserver可监视对DOM树所做的更改，作为一个观察者对象，DOM变化执行触发回调，提供了一个接口操作DOM"}, {"id": "6994349828620681246", "title": "【新手向】通过 VSCode 搭建舒适的 Vue3 开发环境", "desc": "本文以搭建 Vue3 开发环境的实际情况为背景，循序渐进，逐一解决遇到的需求与问题，最终给出一份舒适便捷的基于 VSCode 的 Vue3 开发环境方案。"}, {"id": "7000539437637582878", "title": "Vue Router简单版实现", "desc": "SPA(single page application) :单页面应用程序，只有一个完整的页面，加载时，不会加载整个页面。当路由发生变化时，监听路由的变化，不会请求页面，而是只更新视图。路由描述的是 "}, {"id": "6986215409552719885", "title": "Vue 组件传值【父传子，子传父，非父子传值（兄弟传值）】", "desc": "vue组件传值在日常开发中比较常见。 一般有三种传值方式：1.父传子、2.子传父、3.兄弟组件之间通信"}, {"id": "6997280829579722782", "title": ":) 简单入门 Vue-router    ", "desc": "路由的基本概念与原理 路由介绍 路由是一个比较广义和抽象的概念，路由的本质就是一一对应关系 开发中路由分两种 前端路由 后端路由 路由的本质就是一种对应关系，比如：在地址栏中输入url地址，获取对应的"}, {"id": "6844903774700453901", "title": "【转】vue修饰符--可能是东半球最详细的文档（滑稽）", "desc": "为了方便大家写代码，vue.js给大家提供了很多方便的修饰符，比如我们经常用到的取消冒泡，阻止默认事件等等~目录表单修饰符事件修饰符鼠标按键修饰符键值修饰符v-bind修饰符（实在不知道叫啥名字）表单"}, {"id": "6898347237173100558", "title": "vue中，如何解决watch的新值和旧值是一样的？", "desc": "一、从demo出发先看一个简单场景此时，我们已经设置deep: true才能监听到obj.a的变化而在打印的结果发现新值和旧值却是一样的二、窥探源码其实看一眼源码就明白了我们在 handler函数中增"}, {"id": "6992600484217356301", "title": "Vue3+vite+ts 中使用svg-icon", "desc": "svg-icon 在我们日常项目中经常会用到，今天我们在Vue3+vite+ts 的环境下引入一下svg-icon"}, {"id": "6947861988261232671", "title": "Vue Cli项目B端系统常见性能优化技巧", "desc": "最近工作上一直接触的时B端的管理系统，基本上都是采用Vue Cli生成脚手架后就直接开始写业务逻辑，所以一般都会忽略一些性能优化相关的想法和工作。虽说这种系统对前端要求一般来说比较简单，大多数是一些数据校验和可视化展示，可能重点的工作量在于业务逻辑，但是作为一个前端项目来说，基…"}, {"id": "6955271879460388878", "title": "Vue 合并策略 optionMergeStrategies 看这里就够了", "desc": "文章篇幅较长， 建议花整块时间阅读分析。 另外由于篇幅过长， 本文分三篇文章产出， 便于大家理解与阅读。 推荐阅读 Vue2.0 源码解读系列(二) - 打开 Vue 神秘礼盒之合并选项(1) Vue"}, {"id": "6844903719008469006", "title": "「伪全栈」Vue2.5+Node.js搭建一个多页面商城应用", "desc": "远程库中已将前端代码打包放入 public 文件夹，因此运行后端项目即可预览完整效果。 浏览器打开 http://localhost:8000/home.html 预览。 前端项目需要后台数据支持，因此本地运行前端项目需要同时运行服务端项目，并且还需要做一些额外配置工作。 浏览…"}, {"id": "6988438459627077668", "title": "富文本编辑器 vue-quill-editor使用（新增，展示，修改，添加附件相关）", "desc": "之前由于自己也只是粗浅的使用，以为没有太多人和我一样用到它 有一些地方，就没有展开讲 没想到大家用到的还挺多的，于是再展开讲解一下 先看一下效果 NewsAdd.vue 新增页面，可以添加附件 New"}, {"id": "6994637693489512479", "title": "Vue2 与 Vue3 双向数据绑定的区别", "desc": "前言：新的响应式机制采用了ES6的ProxyApi，抛弃了 Object.defineProperty。 关于对象：Vue 无法检测property的添加或移除。"}, {"id": "6956872030297784333", "title": "全程干货：带你实现mini版vue（二）", "desc": "今天让我们实现一个简单版的vue吧，文本较长，建议收藏慢慢看，最后求个赞！！！！！！！！！！！！！！"}, {"id": "6844903565102678024", "title": "新年福利~~带你手把手撸mvvm,再也不怕面试被问倒了~~~", "desc": "#多种方式实现MVVM，本章先讲解基于defineProperty来实现，也就是类似于实现vue的mvvm功能。本系列有3种实现方式，defineProperty（VUE），脏检查（angular）,原生js实现（发布订阅者模式） #vue.js 则是采用数据劫持结合发布者-订…"}, {"id": "6844903581833773069", "title": "Vue Technology LLC 招人了", "desc": "Vue.js 官方招募全职开源开发。"}, {"id": "6997943825767333918", "title": "vue 入门-第一章", "desc": "vue为目前主流前端框架之一，相对于其他框架入门容易，更容易上手，因此更受欢迎。（此系列入门文章仅为自学自省，记录一些基础知识点）"}, {"id": "6844903870586421255", "title": "【Vue项目总结】后台管理项目总结", "desc": "公司做的大部分都是后台管理项目，剔除每个项目的业务逻辑，其实都可以用通用的一套模版来做。在线预览地址 每个系统都有自己的登录登出逻辑，而我们前端所要做的其实是请求后台，拿到登录权限，带上登录权限，获取用户信息和菜单信息。 在vue项目开发当中，我们一般都是在全局路由钩子做这一系…"}, {"id": "6973999291547254821", "title": "Vue.js 源码 （12）—— 代码生成器", "desc": "这是我参与更文挑战的第12天，活动详情查看： 更文挑战。 前言 代码生成器是模板编译的最后一步，它的作用是将 AST 转换成渲染函数中的内容，这个内容可以称为代码字符串。 上面的模板，最终生成的代码字"}, {"id": "6844903959761534989", "title": "Vue.js 3.0编译器compiler-core源码解析", "desc": "Vue3的源代码正在国庆假期就这么突然放出来了，假期还没结束，陆陆续续看到努力的码农就在各种分析了。 目前还是 pre Alpha，乐观估计还有 Alpha，Beta版本，最后才是正式版。 话不多说，看 Pre-Alpha。 瞧 compiler-core vue3.0的模板解…"}, {"id": "6844903759210889224", "title": "手牵手教你写 Vue 插件", "desc": "由于与上一篇 react 插件文章使用的是相同的结构，代码测试、持续集成及发布 npm 包也都是一个套路，这里就不再敖述。"}, {"id": "6925346360023597064", "title": "无星的前端之旅（十六）——移动端调试技巧", "desc": "常见的需求，开发移动端h5，在移动端浏览器或者移动端app上渲染。 前端不知道怎么在移动端调试，移动端不知道怎么调试网页。 经常出了问题不知道是找移动端解决还是找前端解决。 公司小改改写了个页面，要在app的webview里加载，本地调试杠杠的，自己手机杠杠的，但是一上特意准备…"}, {"id": "6983592443392311326", "title": "3x0 精读Vue官方文档 - 组合 - 混入", "desc": "精读 Vue 官方文档系列 🎉 基础 Mixin（混入）指的是向目标组件中混入能够在多个组件间进行复用的逻辑或功能。 简单粗暴的理解，可以将“混入对象”等同为组件的纯逻辑部分（SFC 中的 <scri"}, {"id": "6846687603278741517", "title": "前端如何提高用户体验：增强可点击区域的大小", "desc": "必生这种情况是因为可点击区域未应用于整个元素。 为了更加清楚，请参见下图，左图可点击区别(圈红部分)明显比右图的小很多，所以右图的实现用户体验会更好。 对于本文，会介绍一些事例，并通过事例演示如何增加可点击区别，提高用户体验。 WCAG全称Web Content Accessi…"}, {"id": "6844904163181084685", "title": "新手必看的前端项目去中心化和模块化思想", "desc": "大家好呀，我是你们的老倒霉蛋wangly。 最近项目的积量越来越大，项目的架构也变得非常的糟糕。中心化严重，模块化不明确，导致后续开发变得非常杂乱。所写成一篇文章给自己对中心化概念发发电。还有我也注意到有的前端工作了一年，甚至一年以上都不知道中心化，和去中心化的概念。这种情况是…"}, {"id": "7001755519488786462", "title": "Vue2和Vue3对比总结梳理", "desc": "vue2.0核心思想 Vue.js是一个提供MVVM数据双向绑定的库，专注于UI层面，核心思想是：数据驱动、组件系统。 数据驱动： Vue.js数据观测原理在技术实现上，利用的是ES5Object.d"}, {"id": "6992130637167591432", "title": "vue使用jsonp请求", "desc": "Vue-jsonp Install 用法 在main.js中添加，注册为Vue的全局插件 现在你可以在Vue的组件中使用 this.$jsonp 发送 jsonp 请求了，因为Vue.use(VueJ"}, {"id": "6993193570895134733", "title": "Vuex 的使用、副作用  | 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 组件开始三不管： ① 组件不管数据存放 ② 组件不管数据更新 ③ 组件不管数据请求 现在我们用过的所有$前缀的方法、属性： $refs、$e"}, {"id": "6898907771362607118", "title": "Vue项目CDN引入ElementUI", "desc": "注意区分 configureWebpack和 chainWebpack。参考官方文档。 常用 CDN：jsdelivr，unpkg。生产环境，建议使用指定版本的CDN文件。 webpack 外部扩展 externals，参考 v4中文文档、最新版本文档。 （1）Cannot r…"}, {"id": "6844904121825230856", "title": "在Vue.js中编写更好的v-for循环的6种技巧", "desc": "在VueJS中，v-for循环是每个项目都会使用的东西，它允许您在模板代码中编写for循环。 在最基本的用法中，它们的用法如下。 但是，在本文中，我将介绍六种方法来使你的 v-for 代码更加精确，可预测和强大。 让我们开始吧。 首先，我们将讨论大多数Vue开发人员已经知道的常…"}, {"id": "6994784621166592014", "title": "Vue源码之初始化", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 dist文件夹中打包了很多不同版本的vue examples文件夹下有很多示例 compiler 会把模版转换成render函数，rende"}, {"id": "6982772834686730248", "title": "Vue3 新特性理解", "desc": "前言 vue3 已经出来了有一段时间了，作为前端开发人员还是得紧跟时事，抓紧学习，了解新的技术，才不会被这个时代所淘汰。而且vue3 针对 vue2 来说，在性能上肯定是有所提高的，这就说明在后面的技"}, {"id": "6999992744466710541", "title": "前端小白不迷路 - 今天来带你深入了解vue中的难懂概念 -- 子传父", "desc": "vue中有父子传值这一概念，即包含父传子，还包括子传父，上篇我的文章中提到了父传子，这次一个案例带你了解比较难懂的子传父。"}, {"id": "6995466550719283208", "title": "vue项目使用vue-cli打包上线出现Uncaught SyntaxError: Unexpected token '<'解决方案", "desc": "vue-cli4项目打包后使用nginx部署到服务器打开页面为空白的问题 我寻思是vueCli4和webpack配置问题或者是nginx配置问题。"}, {"id": "6857950805970911246", "title": "TS + Composition-Api 实战体验", "desc": "好久没输出了，今天来输出一把，缓解一下一个人的孤独。 Vue3虽然还没正式发布，但公布到现在也是蛮久了，虽然现在已经可以开始尝鲜，但由于周边生态还不完善，并且proxy无法被polyfill,导致它也不能支持IE11,如果是一些2C的产品使用了vue进行开发，就算3出了，可能也…"}, {"id": "6844903680387317768", "title": "干货分享：vue2.0做移动端开发用到的相关插件和经验总结(2)", "desc": "最近一直在做移动端微信公众号项目的开发，也是我首次用vue来开发移动端项目，前期积累的移动端开发经验较少。经过这个项目的锻炼，加深了对vue相关知识点的理解和运用，同时，在项目中所涉及到的微信api(微信分享，微信支付)，百度地图api(如何实例化地图，给地图添加自定义覆盖物，…"}, {"id": "6967168165277073445", "title": "一个例子让你明白什么是事件代理(事件委托)", "desc": "什么是事件委托？ 当一个循环达到几十次或者上百次，并且在其本身绑定事件，渲染的时候，给每个dom绑定事件，这样操作是很耗费性能的，这时我们就应该利用冒泡的机制和事件流的特性去把他的事件绑定在父亲本身，"}, {"id": "6989112930025340936", "title": "vue中.sync描述符", "desc": "sync是语法糖 :title.sync 有两步 1  :title=\"title\" 2 @update:title=\"val => title = val\" 方便子组件修改父组件的属性"}, {"id": "6989820195145515044", "title": "《浅析Vue的数据响应式》", "desc": "什么是响应式 当一个物体对外界的变化做出反应就叫响应式的，如“我打你一拳，你会喊疼”。 Vue的数据响应式 就是对数据做出改变时，视图上也会做出相应的变化。 举个例子 根据以上代码，页面上对应位置会显"}, {"id": "6976830388580646942", "title": "vue3进阶-组合式API", "desc": "前言： 最近刚弄明白什么是组合式API，什么是选项式API，使用vue2.x这么多年，居然不知道一直在使用的居然是选项式API，以此文对这两个知识点做个总结，纪念自己的无知。 选项式API VS 组合"}, {"id": "6844904046822686733", "title": "从0实现一个前端微服务（上）", "desc": "什么是前端微服务，网上大把的介绍，我就不啰嗦了，简单来说，就是把各个子项目整合到一起。 iFrame。使用 iFrame 及自定义消息传递机制 其中比较常见的就是iframe和single-spa，这两者各有千秋。 页面加载问题: 影响主页面加载，阻塞onload事件，本身加载…"}, {"id": "6995506728502558750", "title": "uniapp, Vue小白入门学习笔记- Vue.use,Vue.prototype,app.$mount(),px, upx ,rpx 区别", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战” Vue 学习 小白入门笔记 Vue.use(Element) 注册组件；使用 element时会先import,再Vue.use()一下,"}, {"id": "6850037271065722888", "title": "思想实验：如何在Vue中使localStorage具有响应式？", "desc": "响应式是Vue的最大特色之一。如果你不知道幕后情况，它也是最神秘的地方之一。例如，为什么它不能用于对象和数组，不能用于诸如 localStorage 之类的其他东西？ 让我们回答这个问题，在解决这个问题时，让Vue响应式与 localStorage 一起使用。 如果运行以下代码…"}, {"id": "6844903710972182536", "title": "当下拉列表数据过大时，该如何应对？", "desc": "在日常开发中，除了现成插件的使用外，还有很多问题是只能自己动手的。先抛出问题，当一个下拉列表的数据达到几千条甚至上万，这个时候浏览器已经会出现严重卡顿了。看看下面的例子 这个问题其实和表格数据是同一个性能问题，表格的解决方式是通过分页器来减少页面承载的数据量。那么下拉列表该如何…"}, {"id": "6984223974028738596", "title": "vue3.x 学习整理（三）", "desc": "vue3.x 常见的组件通信方法 1、 props 父子组件传参，父组件通过自定义属性传参，子组件props接收参数（具体代码如下） 2、$emit、$parent、$refs | $children"}, {"id": "6844903921262018573", "title": "当 vue-function-api 遇上 vuex / vue-router", "desc": "2019年05月30日, Vue 的创建者尤雨溪发布了一个请求意见稿(RFC), 内容是在即将发布的 Vue 3.0 中使用函数式风格来编写 Vue 组件. 接着 Vue 开发团队放出了可以在 Vue 2.0 中使用这个特性的插件 vue-function-plugin. 这一…"}, {"id": "6844903975532118029", "title": "一步一步实现Vue的响应式-数组观测", "desc": "本篇是以一步一步实现Vue的响应式-对象观测为基础，实现Vue中对数组的观测。 如果是直接修改属性值，那么跟对象是没有什么区别的，但是数组可以调用方法使其自身改变，这种情况，访问器属性setter是拦截不到的。因为改变的是数组的内容，而不是数组本身。 setter拦截不到，就会…"}, {"id": "6844903741179559944", "title": "vue响应式原理学习（二）— Observer的实现", "desc": "既然data属性是被深度监听，那我们就首先自己实现一个简单的深拷贝，理解下思路。 为什么是简单的深拷贝，因为没考虑 RegExp, Date, 原型链，DOM/BOM对象等等。要写好一个深拷贝，不简单。 有的同学可能会问，为什么不直接一个 for in 解决。如下: 其实 fo…"}, {"id": "6844904096953008141", "title": "Vue源码阅读（八）：计算属性与侦听属性", "desc": "很多时候，我们都不清楚该什么时候使用 Vue 的 computed 计算属性，何时该使用 watch 监听属性。现在让我们尝试从源码的角度来看看，它们两者的异同吧。 计算属性的初始化过程，发生在 Vue 实例初始化阶段的 initState() 函数中，其中有一个 initCo…"}, {"id": "6977994491156234270", "title": "Vue 中 $set() 与 Vue.set() 原理及使用", "desc": "这是我参与更文挑战的第 20 天，活动详情查看：更文挑战 1. 前言 问题： 在使用 vue 进行开发的过程中，可能会遇到一种情况：当生成vue实例后，再次给数据赋值时，有时候并不会自动更新到视图上去"}, {"id": "6909282667557027853", "title": "vue中使用antv g2中宽度自适应问题 ", "desc": "结构采用栅格布局的方式，左边图表设置了宽度自适应 autoFit:true。页面首次进入的时候canvas的宽度超出的了父元素的宽度。如果改变 浏览器的大小，触发了window.resize的时候才会触发autoFit:true 这个属性，才会自适应屏幕的宽度，图表大小才会正常…"}, {"id": "6921888086863560718", "title": "Vue 3.0 中的响应式是如何实现的？", "desc": "在上篇《当面试官问：为什么Vue3.0要重写响应式系统？》中，我们梳理了响应式原理的相关内容。本篇，来看看源码。Vue2源码解读首先找到响应式代码的处理位置：看完Vue2.x响应式的代码，我们再回过头"}, {"id": "6978012582690947080", "title": "Vue Vue+VueRouter+Axios电商管理系统项目总结", "desc": "电商管理系统 1 项目需求 现在有功能完善的一套电商后端系统数据，并有配套的接口文档，要求根据接口文档和项目实际需求编写前端界面，沟通后端数据实现总体功能。 使用技术栈：Vue+VueRouter+A"}, {"id": "6844903965771956231", "title": "给你的组件分个等级", "desc": "在进行平台前端系统开发时往往单个路由页面需要继承多个功能模块，而我们的屏幕一次能显示的内容时有限的，所以针对这个场景对系统首屏优化是有必要的。 结论是：直接使用这两个都不合适。 来看看目前比较流行的几个ui框架的情况。 iview：...... 好像都没有任何想法 ant-de…"}, {"id": "6920967135468634126", "title": "Vue源码解析 - 响应式原理", "desc": "完整版：同时包含编译器和运行时的版本。 编辑器：用来将模板字符串编译成为 JavaScript 渲染函数的代码，体积大，效率低。 运行时：用来创建 Vue 示例、渲染并处理虚拟 DOM 等代码，体积小、效率高。基本上就是除去编译器的代码。 UMD：UMD 版本通用的模块版本，支…"}, {"id": "6899773037576224782", "title": "Vue3中v-model的变化", "desc": "Vue 给我们提供了 v-model 指令来实现双向数据绑定，所谓双向数据绑定就是：数据更新元素更新、元素更新数据也会更新。 除了 input 元素，其他的表单元素 v-model 也可以实现双向数据绑定，只是数据类型有些不同而已。 复选框和单选框一样，内部都是监听的 chan…"}, {"id": "6844904065068072974", "title": "和你更深一层了解： Vue两个版本的区别和使用方法", "desc": "在我们使用 vue时，我们可以引用两个不同版本的 Vue，分别是 Vue完整版（vue.js）和 Vue（vue.runtime.js ）非完整版，那么它们的区别是什么呢，今天我们就来分析下这两个不同版本之间的区别。 完整版：同时包含编译器和运行时的版本。 编译器：用来将模板字…"}, {"id": "6844904045526646791", "title": "从零开始搭建 Vue 脚手架工具（二）", "desc": "继续上一篇文章的讲解，让我们继续来看如何实现 init 功能。（如您想阅读上一篇内容可以点击这里） 第一步：从云端配置获取 Meta 配置。确定将要下载的框架和模板 lish 由于篇幅有点长，如有错误欢迎提出 issues 或者 star。"}, {"id": "6844903856095100942", "title": "Vue 新手搭建项目 以及 基于 Vue cli 项目最佳实践（一）环境篇", "desc": "1. node 必须安装，无可厚非 2. 脚手架安装 (vue-cli3) 1. 创建一个名为 first-project 的项目 2. 自动或手动配置 3. 项目配置选择 4. 详细配置"}, {"id": "6844903506717966350", "title": " Monterail 发布 Vue.js 现状报告", "desc": "Vueconf 2017 主办方 Monterail 发布了一份关于 Vue 现状的报告。 该报告长达80页。报告中包括多个不同规模和业务的企业在日常运营中使用 Vue 的案例，以及 Monterail 对 Vue.js 现状的调查结果——Monterail 收集了超过1100…"}, {"id": "6844903618756378637", "title": "vue-awesome-form的实现及踩坑记录", "desc": "最近实现了一个vue-awesome-form组件，主要功能是根据json来生成一个表单，支持同时渲染多个表单，表单嵌套，表单验证，对于一个简单的项目，生成表单只需要一个json就可以完成。而且有时候表单项不是前端写死的，而是由后端控制的，这个时候我们这个组件就派上用场了。 项…"}, {"id": "6909008821566324743", "title": "回车换行 enter换行 键盘上下箭头控制数据移动-el-table ", "desc": "1.需求描述el-table中行中某一行中input回车（enter）；会带出商品弹窗；通过上下箭头可控制弹窗中产品上下移动到视图、回车后数据落到底层table当前行中然后底层table自动聚焦到当前"}, {"id": "6844903844162306055", "title": "如何封装业务组件 多行编辑功能", "desc": "a. 有个表头, 或者叫列名, 当然我们在接下来的输入框中我们还会继续给他提醒 b. 要有一个操作列, 5种功能 i. 添加: 当一个新的一行出现的时候展示, 填完信息后点击添加变为不可编辑状态 ii. 删除: 删除当前行 iii. 编辑: 当已经点过添加, 变为不可编辑装填展…"}, {"id": "6844903549738942471", "title": " vuex 基本入门和使用（二）", "desc": "每个vuex 应用只有一个 store 实例，所以使用起来不会太复杂，对于定位错误状态和操作会很方便。 每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。 然而，这种模式导致组件依赖全局状态单例。在模块化的构建系统中，在…"}, {"id": "6844903870661918727", "title": "【vue】用图告诉你响应式原理", "desc": "我们需要知道数据的获取和改变，数据劫持是最基础的手段。在Obeserver中，我们可以看到代码如下： 通过Object.defineProperty这个方法，我们可以在数据发生改变或者获取的时候，插入一些自定义操作。同理，vue也是在这个方法中做依赖收集和派发更新的。 从初始化…"}, {"id": "6844903842623012872", "title": "vue导出excel表格", "desc": "Vue按钮导出Excel文件。 里面放置两个文件Blob.js和 Export2Excel.js。"}, {"id": "6844904099272458253", "title": "重读 vue 文档 --- keep-alive", "desc": "include - 数组、字符串或正则表达式。只有名称匹配的组件会被缓存。 exclude - 数组、字符串或正则表达式。任何名称匹配的组件都不会被缓存。 max - 数字。最多可以缓存多少组件实例。 在 keep-alive 组件创建时，新建 catch 缓存节点，keys …"}, {"id": "6976277236194213919", "title": "环境变量", "desc": "一. 认识环境变量 1. 端口配置 前端项目启动时，占用端口号是在vue.config.js配置的 上面的 process.env.port实际上是一个nodejs服务下的环境变量"}, {"id": "6953745563586134029", "title": "做个开源博客学习Vite2 + Vue3 （二）设置别名、代理和ESLint", "desc": "vite2可以有很多配置，也可以都使用默认配置，这个看项目需要。 vite.config.js 我们先看看 vite.config.js里面的常用配置，其他配置可以看官网：https://cn.vit"}, {"id": "6941266867625410590", "title": "Vue源码之插槽slot", "desc": "1.在闭合标签后执行closeElement，然后执行processElement执行processSlotContent(element)。 2.首先执行getAndRemoveAttrByRegex遍历el.attrsList找到插槽指令的那条对象返回。 3.如果存在插槽指…"}, {"id": "6844904005517180935", "title": "服务端渲染(SSR)", "desc": "CSR是Client Side Render简称；页面上的内容是我们加载的js文件渲染出来的，js文件运行在浏览器上面，服务端只返回一个html模板。 SSR是Server Side Render简称；页面上的内容是通过服务端渲染生成的，浏览器直接显示服务端返回的html就可以…"}, {"id": "6844903730551193607", "title": "快速利用 vue 或者 react 开发 chrome 插件", "desc": "最近写了一个可以利用 vue 或者 react 快速开发 chrome 插件的 boilerplate，只需要使用我之前写的 bigroom-cli 工具，就可快速简单地进行启动、打包、编译等，同时也支持保存代码后，插件自动更新，页面自动刷新。 因为项目内部使用 webpack…"}, {"id": "6844903958767484941", "title": "vue移动端项目总结", "desc": "方法二等后续更新... disabled 属性规定应该禁用 input 元素，被禁用的 input 元素，不可编辑，不可复制，不可选择，不能接收焦点,后台也不会接收到传值。设置后文字的颜色会变成灰色。disabled 属性无法与 一起使用。 readonly 属性规定输入字段为…"}, {"id": "6844904070801686535", "title": "Vue-Quill-Editor在vue中自定义选择视频插入编辑文章中", "desc": "在实际应用开发中，在常见的管理后台或者是多媒体管理后台，多多少少都会有富文本编辑器，而在编辑富文本时，通常的一个需求就是在富文本中插入图片或者视频，本篇文章讲述的就是在 vue 项目中，使用 Vue-Quill-Editor 编辑器在富文本中插入视频。 最终我们实现了如图2中所…"}, {"id": "6901224957959733261", "title": "Vue.use原理及源码解读", "desc": "PluginObject如果是一个对象，对象必须有install方法才行，PluginFunction如果作为一个函数没有返回值哦。 入参已经明确了，我们来看下，use发生了什么，我们在 initGlobalAPI 发现了 initUse 方法。 通过注释 我们能看到就是把类数…"}, {"id": "6844903733432680456", "title": "Object.create(null) 和 {} 的区别", "desc": "这个以后再做深入讨论。 ps. 刚开始用md语法写文档，用的还不是很熟练，以后有更多跟有内涵的文章给大家分享，加油加油！"}, {"id": "6844904200472625166", "title": "Vue学习笔记5-前端工程化", "desc": "小结：推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。 ES6模块化是浏览器端和服务器端通用的规范. 注意：在一个模块中，只允许使用export default向外默认暴露一次成员，千万不要写多个export default。 we…"}, {"id": "6844904034130722830", "title": "Vue CLI 4发布：自动化升级过程，支持自定义包管理器", "desc": "Vue CLI 团队最近把他们的命令行工具更新到了 4.0.0 版本。这一版本可以帮助开发者自动化升级过程，可以使用额外的包管理器，并可以更准确更有效移除 DOM 中多余的空格。"}, {"id": "6844904001646002183", "title": "Vue3 响应式原理 reactive Proxy", "desc": "路漫漫兮..."}, {"id": "6979451643490205733", "title": "前端第十三步：Vue框架基础入门", "desc": "[TOC] Vue前端框架 前端三大流行框架：Vue、React、Angular Vue是个渐进式的Javascript框架 官网：https://cn.vuejs.org/ Vue是国人开发的框架，"}, {"id": "6844903614331224072", "title": "vue项目中jsonp跨域获取qq音乐首页推荐", "desc": "自己利用业余时间，为了更加数据vue和es6的特性，自学着和做了vue的移动端webapp项目。在项目中也是遇到了很多的问题。 接下来，先说一下怎么实现这个需求，然后再说我遇到的问题，以用来纠错。 第一步，再vue项目中引入jsonp,并进行jsonp的封装。 安装好之后可以在…"}, {"id": "6979856012597526564", "title": "手写简单版 shallowReactive和reactive", "desc": "shallowReactive 是浅的响应式,无法对深层的对属性值进行修改 reactive和 ref 是深的响应式"}, {"id": "6926130364683403278", "title": "观察者模式——响应式原理", "desc": "观察者模式，它定义了一种 一对多 的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。在观察者模式中有两个主要角色：Subject（主题或者被观察者）和 Watcher（观察者）。 通过示例可以看出，使…"}, {"id": "6910854082378858510", "title": "使用vue-awesome-swiper的一个坑啊!!！", "desc": "不能使用切换按钮和分页器解决方法一解决方法二"}, {"id": "6909273559105798157", "title": "vue项目中使用api的优化", "desc": "一般使用api的方式编写自定义的axios.js文件，包括请求发送和响应拦截的一些配置（一般我会配置请求超时时间、发送请求时的token、处理响应时的异常信息）引入axios.js，定义接口在页面中使"}, {"id": "6992844671957336072", "title": "Vue slot 默认内容", "desc": "vue插槽slot 设置默认内容方法，以及由于版本问题导致的slot渲染问题，希望有所帮助，本人小白，如有问题，还望指出。"}, {"id": "6992843659737563150", "title": "Vue.js 事件处理器", "desc": "事件监听可以使用 v-on 指令： 通常情况下，我们需要使用一个方法来调用 JavaScript 方法。 v-on 可以接收一个定义的方法来调用。 除了直接绑定到一个方法，也可以用内联 JavaScr"}, {"id": "6844904170210738189", "title": "基于vue-cli/@4.3.1搭建vue/@3.0.0-beta.1版本的前端项目", "desc": "这里我选择第二项进行自定义配置，我项目中还会用到路由、vuex和css处理器。 之后看自己的需要选择自己要使用的css预处理器和eslint规则之后一路回车等待项目初始化完成。我们会看到在文件夹下看到创建好的文件。 在package.json中查看当前所使用的vue的版本信息，…"}, {"id": "6844903686859145230", "title": "从一个小项目快速入门Scss", "desc": "很多人昨天都没找到我，其实我去...... 面价格不贵，50一碗可以加个鸡蛋加根肠。加个微信就算了哈哈哈哈 一大堆不同缎带和盒子颜色的礼物盒。然后用Scss 随机填充颜色和随机坐标 兼容CSS，特性丰富，成熟，行业认可，社区庞大，框架...... 个人理解其实就是让css的编写…"}, {"id": "6905731481566609421", "title": "vue-persists", "desc": ""}, {"id": "6875979671188717581", "title": "手摸手，一起整理前端小小小知识", "desc": "1. vue 路由传参有哪几种方式 2. vue 的通信方式 3. 后台权限管理怎么实现 4. 说说你理解的 vuex Vuex是一个专为Vue.js应用程序开发的状态管理模式。作用是将应用中的所有状态都放在一起，集中式来管理。核心就是store，用来存放应用中大部分的stat…"}, {"id": "6922610055883948040", "title": "深入Vuex原理：实现一个简易Vuex", "desc": "下面让我们自己动手实现一个vuex吧。 默认不执行，取值才执行，具有缓存。 4. 获取最新状态"}, {"id": "6844903734946824200", "title": "[译] 使用Capacitor 和 Vue.js 构建移动应用", "desc": "最近，Ionic 团队发布了一项名叫 Capacitor 且继承了 Apache Cordova 和 Adobe PhoneGap 核心思想的开源项目。 Capacitor 允许你使用现代 web 技术来构建可在任意平台中运行的应用，从 web 浏览器到移动设备（Android…"}, {"id": "6913717055661277192", "title": "从零开始，用elementui躺坑vue - 初始化项目", "desc": "小编发布本博客的目的是使用PanJiaChen大佬的vue-element-admin、elunez大佬后有感而发，根据这两位大佬的前端模版编写文档，特此鸣谢。本次博客预计发布周期为3个月，发布数量预计在30～50篇。希望各位看客多多收藏，点赞，评论。特此说明 本项目采用Vue…"}, {"id": "6987305803090755614", "title": "Vue 数据响应式", "desc": "什么是响应式呢？ 若一个物体对外界的刺激做出反应，它就是响应式。 Vue 的 data 就是响应式 const vm = new Vue({data:{n:0}}) 如果修改 vm.n ，那么 UI "}, {"id": "6951722108825272351", "title": "props传递数据", "desc": "使用props 传递数据，父亲向儿子传递数据在组件中使用props来从父亲组件接收参数注意： 在props中定义的属性，都可以在组件中使用props来自父级，而组件中 data return 的数据就"}, {"id": "6968315635012993038", "title": "详解vue-router实现原理-history篇", "desc": "VueRouter实现原理，大致就是当浏览器前进后退的时候会促发popstate事件，通过监听popstate事件来根据地址显示对应的组件。"}, {"id": "6947979951106703373", "title": "Vue深度学习系列（一）响应式数据原理", "desc": "vue2/vue3响应式原理： vue2通过defineProperty实现数据劫持，而Vue使用Proxy代理对象"}, {"id": "6862217670495109133", "title": "史上最强vue总结---面试开发全靠它了", "desc": "MVVM是Model-View-ViewModel的缩写。　　Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。View代表UI组件，它负责将数据模型转化成UI展现出来。Vie"}, {"id": "6844903577471680520", "title": "同时支持Vue/mpvue/weex的http请求库，最大可能的实现不同平台间的代码复用。", "desc": "随着 Weex 、mpvue 的发布，他们都是支持Vue.js语法。目前vue已经你能够运行在浏览器、小程序和Native了。尽管各个平台仍有差异，但已经基本能实现 Write Once Run Everywhere 。这使得我们可以在多个端上实现尽可能大限度在代码复用。但是无…"}, {"id": "6844903725669023757", "title": "VueConf 全部 PPT 已更新完毕，内含尤雨溪分享 Vue3.0 进展视频", "desc": "VueConf全部 PPT已经更新完毕，大家可以在公众号后台回复【VueConf】获得链接。另外在 VueConf大会上，尤雨溪也远程分享了关于Vue3.0的一些内容，没有当时参与大会的同学也不用担心"}, {"id": "6844903605355429895", "title": "基于 mpvue 框架的小程序选择组件，支持单列，多列，级联", "desc": "在 mpvue开源之初写了 用 vue 写小程序，基于 mpvue 框架重写 weui。当时用的是小程序的原生组件，没有对其进行封装和组件化。而对于现在的前端开发环境，组件化，模块化，工程化以及自动化已经是一种标配。而mpvue框架又提供了一个很好的组件化开发平台，因此就对小程…"}, {"id": "6844903506743148552", "title": "神奇的 Object.defineProperty", "desc": "很简单，，它接受三个参数，而且都是必填的。。 第二个参数:需要定义的属性或方法的名字。 第三个参数:目标属性所拥有的特性。（descriptor） enumerable:是否能在for...in循环中遍历出来或在Object.keys中列举出来。 我们只设置了 value，别的…"}, {"id": "6844903860503314439", "title": "vue，angular，react框架对比", "desc": "1.MVC：Model(模型)+View(视图)+controller(控制器)，主要是基于分层的目的，让彼此的职责分开。 View通过Controller来和Model联系，Controller是View和Model的协调者，View和Model不直接联系，基本联系都是单向的…"}, {"id": "6929107181107150861", "title": "Vue源码之compile之parse", "desc": "可以看到，生成的 AST 是一个树状结构，每一个节点都是一个ast节点 ，除了它自身的一些属性，还维护了它的父子关系，如 parent 指向它的父节点，children 指向它的所有子节点。为什么是树形因为dom节点本来就是树形结构。 如上案例，我们如何去解析，首先我们看到一个…"}, {"id": "6950456847048376334", "title": "vue完整版和runtime版本，render和template对比", "desc": "vue完整版和runtime版本完整版对应的文件名为vue.js或vue.min.js。完整版 = 运行时版+编译器（编译器：将模板字符串编译成为JS渲染函数的代码）该版本有编译器，占用代码体积，所以"}, {"id": "6844903638163259406", "title": "关于vue中next和Tick(nextTick)的一点理解", "desc": "在这之前我是没有怎么看过vue源码的，但是看了源码后又产生了一些疑问，如果不看源码我还真没有任何疑问的去用nextTick，因为我只知道我想获取更新后的dom我就在里面写回调，只管写准没错，有天好奇调试了下代码就发现了一些疑问.... 这个结论是我目前觉得正确的，希望有觉得不对…"}, {"id": "6844903502804697102", "title": "移动端Web界面滚动性能优化: Passive event listeners", "desc": "今晚在阅读VueJS2的源码时，发现了下面的一段代码，感觉自己瞬间知识储备不够用了，所以决定深入研究一下，故总结得出此文。关于VueJS的源码解读，之后会整理出学习笔记。这里先简单记录一些碎片化的知识点。"}, {"id": "6844904041638526989", "title": "vue 单文件 scoped 样式简析", "desc": "scoped 是一个极其常用的 <style> 标签属性，使用后这一块样式能“神奇地”只应用在当前单文件组件，不会干扰到其父子组件。 其原理其实很简单，只要加上了 scoped，当前文件所有元素（不包括调用的其他组件）都会加上一串识别码，样式只作用于带码的元素。 如上面所说，加…"}, {"id": "6865052518141919245", "title": "[翻译]vue3指南--07Conditional Rendering 条件渲染", "desc": "The directive v-if is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy …"}, {"id": "6844903591187054606", "title": "Vue.js 源码学习九 —— 过渡效果 transition 学习", "desc": "本文学习了 Vue.js 的 transition 到底是如何工作的~"}, {"id": "6844903877704335367", "title": "【Vue原理】代理 Data - 源码版", "desc": "如果是开篇想的那样，逐个赋值，数据改变的时候，就要同时维护两份啊，简直是地狱啊。但是 methods 的处理是直接复制到实例上的 当访问 【vm.name】，触发代理 【vm.name 设置的get】，就会访问 【vm._data.name】 ，从而触发总部 【vm._data…"}, {"id": "6844903577958219784", "title": "vue正式环境与测试环境压包配置方法(vue-cli 2.0)", "desc": "2. package.json配置修改 3. 创建接口配置文件 我们在src文件夹下面新建一个文件apiUrl.js，用来专门配置接口地址的。 4. webapck配置修改 5. 获取各自接口地址 6. 压包命令"}, {"id": "6988036012828000269", "title": "vue2.x的响应式原理解析", "desc": "在前几天时间里，看了关于vue响应式的原理解析，以这篇笔记记录下来，来加深对于vue响应式原理的印象。"}, {"id": "6844903912856633358", "title": "Vue：多角度剖析计算属性的运行机制 #219", "desc": "在创建Vue实例时调用this._init初始化。 以上就是计算属性的的初始化过程。 就是触发计算属性的getter，再次强调：计算属性的getter不是用户定义的回调，而是由createComputedGetter返回的函数（详细参考计算属性的初始化过程的最后一段代码）。 用…"}, {"id": "6844903635646677005", "title": "为什么我们从Angular 2迁移到Vue.js（为什么我们没有选择React）", "desc": "在Rever（www.reverscore.com），我们刚刚使用Vue.js发布了我们的Web客户端的新版本。经过641次提交和16周的紧张开发，我们非常自豪之前做出的决定。 8个月前，我们的前端在使用Angular 2.确切地说，它使用的是Angular 2 beta 9.…"}, {"id": "6844904196320264205", "title": "结合源码聊一聊Vue的生命周期", "desc": "生命周期的是我们在开发中不可回避的话题。了解生命周期也可以让我们知道什么阶段可以做什么，以及更好的解决项目中遇到的问题。 每一个 · 后跟的生命周期钩子可以点击进入Vue源码的调用函数或代码行。 上述生命周期钩子后的加粗字体是Vue文档对钩子函数的简要解释。 文中引入的Vue源…"}, {"id": "6873368624246358023", "title": "从零实现一个响应式状态管理", "desc": "简单地说，响应式状态(state reactivity)是指当程序状态发生改变时，比如说某个变量的值发生了变化，就自动执行某些指定的操作。 当一个变量发生改变时，它能发出通知。 收集变量的依赖函数，即哪些函数对这个变量的变化是感兴趣的，把它们收集起来，变量改变时通知它们。 由于…"}, {"id": "6914116813278150670", "title": "Vue 路由params传参在刷新之后可能不存在的问题分析", "desc": "​最近，在写Vue项目的时候，遇到一个问题：首先我访问详情，然后给详情页面创建匹配路由路由匹配如下：然后我通过router-link访问：这没问题，但是，如果我需要在详情页面编辑部分内容（这里我的详情"}, {"id": "6844904194739011591", "title": "从零写一个 Vue（三）数组监听", "desc": "本篇是从零实现 vue2 系列第三篇，为 YourVue 添加数组监听。 文章会最先更新在公众号：BUPPT。代码仓库：https://github.com/buppt/YourVue 上一篇我们实现了双向绑定，篇幅原因没有处理数组。我们知道 vue 是通过重写了几个数组的方法…"}, {"id": "6913838928155901959", "title": "vue 动画", "desc": "v-enter ：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。 v-enter-active ：定义进入过渡生效时的状态。在元素被插入之前生效，在过渡/动画完成之后移除。 v-enter-to : 定义进入过渡的结束状态。在元素被插入之后下一帧生…"}, {"id": "6913816930650423309", "title": "Vue 5（前端路由）", "desc": "1. 路由的概念 p533 路由的本质就是一种对应关系，比如说我们在url地址中输入我们要访问的url地址之后，浏览器要去请求这个url地址对应的资源。 那么url地址和真实的资源之间就有一种对应的关系，就是路由。 它是一个Vue.js官方提供的路由管理器。是一个功能更加强大的…"}, {"id": "6844903577362628622", "title": "列表数据的展示优化", "desc": "列表形态的数据展示是非常常见的一种数据展示方式。在大多数场景下，常见的列表展现方式是分页加载。而对于没有分页场景下的大列表数据展示，介绍了按需显示和延迟显示的优化方案"}, {"id": "6907544398205190157", "title": "高德地图使用心得", "desc": "通过map.on('moveend', fn)绑定地图拖动事件，再通过调取map.getCenter()很轻松就拿到了中心点经纬度数据。 上面我们已经拿到了经纬度信息，接下来就是解析成的地址信息了——地理编码服务。 用户拖动地图选择 > 获取地图中心点经纬度 > 逆地理编码 >…"}, {"id": "6844904066946973710", "title": "scoped疑问", "desc": "在style标签上使用scoped属性主要是实现样式的私有化，防止对全局样式造成污染。但是在 使用scoped过程中可能不知不觉就出现了很多麻烦，造成额外的复杂度，所以不推荐使用。 scoped主要是给属性添加一个额外的动态属性来选中该dom。 以下就是关于使用scoped过程…"}, {"id": "6844903843180855309", "title": "vue实现歌手列表字母排序，下拉滚动条侧栏排序实时更新", "desc": "最后就可以看效果了，有什么疑问可以在下面评论。"}, {"id": "6844903601425350670", "title": "一个基于Vue的图片轮播组件的实现", "desc": "1. 在线DEMO 2. 首先是一张思维导图 3. 然后是以上属性的标注说明 4. 代码层 初始化显示的图片列表，即list。这里存储的数据才是真正会被在页面上渲染的。每次切换，实际上就是修改该list中的数据，对应的视图会自动更新，数据驱动视图嘛。 因为arrow元素也在tr…"}, {"id": "6898493649215029261", "title": "vue 如何在项目中的使用", "desc": "库是将代码集合成一个产品,库是我们调用库中的方法实现自己的功能。 框架则是为解决一类问题而开发的产品,框架是我们在指定的位置编写好代码，框架帮我们调用。 传统的 MVC 指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数 据。将结果返回给前端,页面重…"}, {"id": "6844904190381129735", "title": "初探Vue3.0的响应式原理", "desc": "之前在尤大提出Vue3.0响应式要使用Proxy来重写的时候我就去看过Proxy的相关介绍，但是在平时项目中基本是用不到这个的，所以理解起来肯定有点儿吃力(明明是自己太菜了好吗？)，正好这段时间项目时间不紧张，抽空看了下Vue3.0的响应式原理，下面简单记录一下。 可以大致看到…"}, {"id": "6844903873149140999", "title": "「组件」设计一款Grid组件", "desc": "最近在使用Vue+TypeScript鼓捣自己的组件库，期间参考不少（抄😂）element，iview的源码。发现了一些常用的功能的背后，往往是复杂的实现。于是准备写一系列文章，介绍这些组件背后的原理。今天是第二篇，手把手带你实现Grid组件。 按照惯例我们首先参考一下ivi…"}, {"id": "6844903636816887821", "title": "vue响应式数据的实现原理解析", "desc": "今天讲下vue的响应式数据，也就是mvvm双向绑定模式，主要的目的是要让大家了解该模式在vue中是如何实现的，所以将以极简的代码进行示例。 这里就涉及到了vue的双向绑定。 接下来我就用一些非常简单代码实现以上功能。 首先，我们得解析vue中的v-model指令，也就是html…"}, {"id": "6904918456350310408", "title": "vue3 中的CompostionAPI  (也称 组件API)", "desc": "ref 用于定义简单数据类型，number，string等等..."}, {"id": "6945005512039596045", "title": "重学Vue【组件更新和diff算法】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 在前面分析过了Vue的组件的创建过程，并没有说到当组件数据发生变化会发生什么以及如何更新组件，本篇过一下…"}, {"id": "6844903629191643144", "title": "前端文本多行省略的完美解决方案", "desc": "在前端中单行显示可以很简单的用css完成；但是在实际的开发中会存在很多的多行省略，在网上找了很多方式都不能很好的解决问题。主要的问题是： 中文和英文不能简单的通过自负串长度去处理字符串：100个中文可能足够了，但是100个长度的英文可能只是几个单词 每个中文和英文的宽度不一样，…"}, {"id": "6972348285864378381", "title": "vue3 click细节无法获取event", "desc": "点击事件 如果在html里写的是 @click=\"foo()\" 获取不到event事件, 要么把事件的括号去掉,要么"}, {"id": "6864760084980269069", "title": "BAT前端面试都问啥！Vue常见热点问题&解决方案", "desc": "一.解决Vue刷新页面后store数据丢失的问题原来的状态（页面刷新数据会重置）解决后（页面刷新保留store数据）二.Vue项目中自动将px转换为rem1.配置与安装步骤：a.在Vue项目的src文"}, {"id": "6972149919238848549", "title": "Vue边界处理【子访问父、夫访问子】", "desc": "父访问子 children 不推荐使用，因为如果组件数量过多或者发生变动会导致源码混乱，不易操作 refs 推荐使用，使用ref进行区分 子访问父 parent root 尽量不要在子组件中直接操作父"}, {"id": "6844903519359598600", "title": "初探 amaze-vue（ 基于vue.js封装的Amaze UI 组件库）", "desc": "项目地址amaze-vue使用文档document开发结合webpack+vue+amaze-vue进行快速开发使用vue-cli快速构建传送门通过npm安装amaze-vue使用amaze-vue进"}, {"id": "6844904031400230925", "title": "Vue.js 入门：从零开始做一个极简 To-Do 应用", "desc": "学习 Vue 的最佳方式之一是「请立刻查阅 Vue.js 的官方文档」，简单看一下「基础」部分，配合本文食用更佳。 在开始写代码之前，首先去 BootCDN 上找一下目前最新版本完整版的 Vue.js 的链接：https://cdn.bootcss.com/vue/2.6.10…"}, {"id": "6844903575445848078", "title": "对来自 Vue 源码的一段复杂正则的分析", "desc": "今天在看 Vue 源码中的解析SFC(Single File Component)部分中的解析 html 部分时看到一串很长的正则表达式。具体位置在 /src/compiler/parser/html-parser.js:16 这段代码的目的是从一段 html 字符串中把一个开…"}, {"id": "6963245619691388935", "title": "观察者模式以及在 vue 中的应用", "desc": "（本文是基于《Head First 设计模式》观察者模式的学习笔记） 引例：设计天气站 我司最近接到一笔订单，要求我们在 WeatherData 对象上建立一个应用。要求如下： 该应用需要有三种布告板"}, {"id": "6844903654734954504", "title": "Vue.js是如何做到数据响应的？", "desc": "许多前端JavaScript框架（例如Angular，React和Vue）都有自己的数据相应引擎。通过了解相应性及其工作原理，您可以提高开发技能并更有效地使用JavaScript框架。在视频和下面的文章中，我们构建了您在Vue源代码中看到的相同类型的Reactivity。 如果…"}, {"id": "6904087967715819534", "title": " 一次在 Vue3 中使用render函数的事故，从源码中找到了答案", "desc": "到这里，就可以知道 为什么在 render 函数中使用 this. 的方法获取到的不是 ref 对象，而是原始值了 在 render 方法中使用 this. 的方式获取的是 setup 中返回的 ref 数据的 value 属性，所以不能给元素做动态绑定"}, {"id": "6844903590188826637", "title": "vue实践04之vuex", "desc": "vuex是一个专门为vue.js设计的集中式状态管理架构。我把它理解为在data中的属性需要共享给其他vue组件使用的部分，就叫做状态。简单的说就是data中需要共用的属性。比如：我们有几个组件要显示用户名称和用户等级，或者显示用户的地理位置。如果我们不把这些属性设置为状态，那…"}, {"id": "6930887880084553741", "title": "如何使用Vue + Electron搭建跨平台应用", "desc": "看完以上介绍，也明白了本文要做的事：用 Vue.js 与 Vuetify 组件，基于 Electron 来创建原生桌面应用。 建议使用的 VS Code 编辑代码，下载地址： https://code.visualstudio.com/ 。 Node.js 开发环境，下载地址：…"}, {"id": "6910056082719277070", "title": "震惊！！！2020了还有前端开发不知道帧动画（requestAnimationFrame）", "desc": "（MDN解释）告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行 用canvas绘制一个汉字，后端返回汉字所有像素点，刚开始使用setInterval执行，会发现笔…"}, {"id": "6933478598632439816", "title": "思路逐渐清晰：VUE全解（上）持续更新中~~~💖！", "desc": "1.1. 创建实例并且访问 所有vue实例中的数据，都可以在计算属性中直接使用。 计算属性：计算属性变与不变，只取决于依赖的数据变化。 计算属性，除非你不希望得到缓存。 我们利用数组语法，实现需求：为文字增加颜色，并点击按钮实现颜色的切换。 实现一个简单的需求：当分数大于90为…"}, {"id": "6979517318887899173", "title": "vue-router初学习", "desc": "一、vue-router安装方式 npm安装 在使用vue-cli脚手架的使用，这样既可以很方便的使用vue-router，因为你可以在创建vue项目的时候，就可以指定是否安装vue-router，如"}, {"id": "6844903620362813454", "title": "从Vue数组响应化所引发的思考", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 从上一篇文章响应式数据与数据依赖基本原理开始，我就萌发了想要研究Vue源码的想法。最近看了youngwind的一篇文章如何监听一个数组的变化发现Vu…"}, {"id": "6844904019517784077", "title": "vue源码学习第二篇，模板解析与ast语法树生成", "desc": "1. 模板编译器 2. 模板编译核心之html-parser 3. 模板编译之ast语法树生成 4. optimize优化相关"}, {"id": "6844903555019587592", "title": "基于vue开发的在线付费课程应用", "desc": "使用 vue-navigation 缓存页面，此库实现了前进刷新后退读缓存的功能，像原生APP导航一样。用子路由的方式实现tabbar有bug，用vuex解决了。 应用需要登录后可以访问，微信登录要实现的功能是从任意一个链接进入，判断是否登录，未登录跳到微信授权，成功后返回登录…"}, {"id": "6979409551439167496", "title": "【Vue.js】组件化解析二", "desc": "这是我参与更文挑战的第9天，活动详情查看： 更文挑战 一、组件间的通信 组件实例的作用域是孤立的；这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。但是父子组件之间需要通信：父组件要给子组件"}, {"id": "6904898711667605518", "title": "Vue 前端接口跨域，本地 Nginx 代理配置", "desc": "在本地开发 Vue 的时候，我们可以通过 vue.config.js 配置 devServer。 其实服务器那边都是有配置代理的，只是我们本地平常不是特殊情况只需要通过 vue.config.js 配置 devServer 即可。 但是当我们需要 原生 html 嵌入 Vue …"}, {"id": "6847902221548388365", "title": "vue-cli2.x项目的创建及配置", "desc": "可以选择初始化工程时安装依赖或者先初始化。工程创建完成，进入工程根目录，使用npm run dev启动工程，在浏览器窗口输入localhost:8080/#/，出现下面的页面就表示创建成功了。 assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webp…"}, {"id": "6922391609589891085", "title": "走进Vue3源码：computed", "desc": "1. 初始化 computed 2. 收集计算属性 doubleCount 的依赖和 state.count 的依赖 3. 触发 state.count 的依赖执行和 doubleCount 的依赖执行 以上就是 computed 的实现原理及处理流程。"}, {"id": "6914644990245208072", "title": "vue 项目性能优化 —实战—面试", "desc": "本文是自己在实际项目中总结的几点较为实用的Vue的性能优化，希望能对大家实际项目以及面试产生帮助。 gizp压缩是一种http请求优化方式，通过减少文件体积来提高加载速度。html、js、css文件甚至json数据都可以用它压缩，可以减小60%以上的体积。(需要后端支持) 1.…"}, {"id": "6914614502436814862", "title": "watch、computed在实现原理上有什么不同？", "desc": "watch和computed在使用上有什么不同，相信大家都很清楚。那么让我们深入来看看，他们在实现原理上有什么不同吧？ 详细：一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watc…"}, {"id": "6924973953782022158", "title": "Vue页面跳转后位置不在顶部的解决办法", "desc": "在做的Vue项目中，从一个长页面跳到另一个路由后，页面的位置还停留在上个页面的位置，没有回到顶部，只需要在路由配置里添加scrollBehavior方法。router/index.js文件中：scro"}, {"id": "6947514223169798175", "title": "Vue源码解析-patch&diff算法", "desc": "在vue中，patch过程，是以新的虚拟dom为基准，改造旧的虚拟dom。 接下来，我们逐个击破。 一. update 在执行render函数，返回虚拟dom之后，vue会执行update方法，去更新视图。其主干代码如下： 前面章节，我们分析了组件化实践。setActiveIn…"}, {"id": "6979219213883834376", "title": "vue-router、响应式理解", "desc": "前言 数据劫持：当访问或设置 vue 实例中的成员时，会做的一些干预操作 而vue的响应式原理核心就是，通过对数据进行劫持，并将更新反应到对应的dom视图上 vue2 响应原理依赖 Object.de"}, {"id": "6844903957798584328", "title": "Vue3 watch函数执行过程", "desc": "Vue3watch执行过程调用watchdoWatch(代码有点长，直接说一下流程吧)effect函数（订阅函数）run函数(大概的理解，如有问题麻烦了)"}, {"id": "6844903604688535566", "title": "electron-vue邮件客户端总结", "desc": "electron将chromium和nodejs合并到同一运行时环境中，可以用html、css、javascript来构建跨平台的桌面应用。说白了就是我们写网页的同时还可以调用nodejs的api(如调用fs模块存储数据到电脑)，然后electron帮我们打包成一个跨平台的桌面…"}, {"id": "6979171908163993630", "title": "简述 VUE 响应式原理、双向绑定", "desc": "前言 我们可能经常疑惑，Vue是怎么实现数据更新，视图变化。 视图变化，数据也能同样得到更新。 响应式原理 那么，我们来先看下面一张图： 整体流程： 我们得创建一个vue 对象。记录下参数 optio"}, {"id": "6871052602205798407", "title": "「Vue学习记录一」开发环境准备", "desc": "① 找到 vue-devtools 的 github 项目，并将其 clone 到本地. vue-devtools 浏览器输入地址\"chrome://extensions/\"进入扩展程序页面点击\"加载已解压的扩展程序...\"按钮，选择 vue-devtools>shells 下…"}, {"id": "6971323365831376910", "title": "记录一个基于vue2的小组件升级为基于vue3的组件", "desc": "记录一个基于vue2的小组件升级为基于vue3的过程、出现的问题及解决的方法，在查资料修改的过程中对vue3的一些概念的理解又深刻了一些，遂记录下来。"}, {"id": "6854573222533267463", "title": "深入理解Vue响应式原理-手写mini-vue", "desc": "不知不觉，已经连续学习两个多月了（这真是个奇迹，Amazing!）。到底是什么魔力让我这样平时上课就犯困，学习都是从入门到放弃的人，能一直坚持学习，并且还有了写博客的冲动？，我想在开头，非常有必要说一下这段时间参加“拉勾教育-大前端高薪训练营”学习的一些心得体会： 首先是课程，…"}, {"id": "6844903699639189517", "title": "vue-split-table【表格合并和编辑插件】", "desc": "vue-split-table开源地址,欢迎star,现在已经开源和同步到npm上轻松搞定表格拆分或者合并,编辑,再也不怕被产品怼啦1.核心源码分析里面嵌套实现表格拆分;原生实现复选框的单选和全选功能"}, {"id": "6923099672101781512", "title": "NW.js 打包vue项目打包成exe桌面应用，修改exe图标", "desc": "进去之后，点击下载SDK的版本，并解压至本地目录即可。 1.在nw.exe目录中创建一个你的项目打包文件夹，文件夹名称自定义。（我的文件叫grade_couplet） 1.直接将grade_couplet文件夹拖入nw.exe文件内，看能否正常运行vue项目。 1.将grade…"}, {"id": "6844903777749696519", "title": "vue-cli3 项目优化之通过 node 自动生成组件模板 generate View、Component", "desc": "做前端的大家都知道通过 vue 开发的项目每次创建新组建的时候，都要新建一个目录，然后新增 .vue 文件，在这个文件中再写入 template 、 script 、 style 这些内容，虽然在写入的时候大家都有自己的自动补全共计，不过这些都是模板性的，每次都要这样重复操作，…"}, {"id": "6988131835343699998", "title": "Vue深入学习—数据响应式原理", "desc": "官方提供的响应式原理图 是不是有点懵？没关系，举个简单的栗子🌰：《西游记》中的妖怪（Watcher）时刻惦记（订阅）着唐僧（Data），想吃唐僧肉，孙悟空（Component）在听到师傅被抓..."}, {"id": "6844903840882360327", "title": "vue-cli3 的快速插件开发", "desc": "不久前组内有大佬发布了一个 vue-cli3 的 dll 包，作为一个在 vue 项目内摸爬滚打的萌新，是时候该学习点儿新的技术了，于是在闲暇之余，我拷贝了一份代码，同时研究该如何从“零”开始编写一个 dll 包（该部分以 webpack 的 dllPlugin 作为例子）。 …"}, {"id": "6844903721122398221", "title": "深入了解最新的Vue Devtools v5.0", "desc": "早些时候发布了Vue devtools 5.0beta版，为已经调试过的强大工具带来了惊人的新功能。一些新功能包括性能分析，路线跟踪，Vuex store的实时编辑以及新的设置面板。这些新的功能我觉得是肯定会出来的，在使用它们几周后，我分享一下对我们最直观感受的东西。让我们来了…"}, {"id": "6844903814705709063", "title": "小白教程|一小时上手最流行的前端框架vue", "desc": "vue是现在很火的一个前端MVVM框架，它以数据驱动和组件化的思想构建，与angular和react并称前端三大框架。相比angular和react，vue更加轻巧、高性能、也很容易上手。大家也可以移步vue官网，看一下它的介绍和核心功能介绍。简单粗暴的理解就是：用vue开发的…"}, {"id": "6950588031527026725", "title": "v-for导致的问题引发的思考", "desc": "前言今天有个小伙伴问了我一个他碰到的问题，他在动态添加数组操作的时候 会发生渲染错乱的问题，显示在页面和数组里面的num不一致，引发问题的demo，在点击前面几列的加号的时候 连续点击两次就会问题。如"}, {"id": "6844903504755048455", "title": "Vuejs渡劫系列二：最全的vue-cli项目下的配置简析", "desc": "Vuejs渡劫系列的第二篇文章，建立在有扎实的Vuejs和webpack基础知识前提下，通过vue-cli脚手架快速搭建项目，该文章会一一梳理项目下的文件配置和用途。"}, {"id": "6844903871622430727", "title": "Vue API - extend 开发消息弹窗组件", "desc": "借助webpack vue-loader App.vue将会导出成一个对象App,h函数将App数据渲染成节点再挂载到#app节点下。至此所有页面操作都在该节点下，包括路由跳转等等。 但是有时候我们也可能需要将节点挂载在其他位置，而非#app上,或者说需要多个可以挂载vue的节…"}, {"id": "6844903945584803853", "title": "老项目平滑迁移 vue-cli3 日志", "desc": "好咯，到这一步，样式正常啦，请求也可以正常发送接收啦。 表面上看起来和正常的项目没什么区别了，可是一打开控制台，又看到一个报错.. 至此为止，项目已经可以成功在 vue cli3 下跑起来啦。到处点一点，嗯，没什么报错了，接下来就来看看打包部分 vue cli3的文档只是很简单…"}, {"id": "6934702020121067528", "title": "Vue双向数据绑定原理", "desc": "Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。本文仅探究双向绑定是怎么样实现的。先讲涉及的知识点，再用简化得不能简化得代码实现一个简单的hello world示例。 访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过definePr…"}, {"id": "6844903944947253261", "title": "自己动手实现一个 axios", "desc": "我们首先在客户端的 js 文件夹下创建一个 axios 的文件夹，里面存放我们自己实现的 axios 相关代码。 我们在使用官方 axios 的，会有很多配置项，包括全局配置，实例配置和请求配置，因此我们就来看看配置信息这一块。 在使用官方 axios 的时候，我们可以通过一个…"}, {"id": "6907974839458332679", "title": "vue+node weixin-js-sdk分享给朋友及分享到朋友圈，内容设置。", "desc": "需求描述:app中的h5页面有两个按钮分别为分享给朋友，及分享到朋友圈，分享样式自定义。 方向:使用weixin-js-sdk。 结果:h5无法完成分享到给朋友圈，及分享到朋友圈，需app端配合建立微信桥。 原因:weixin-js-sdk的分享给朋友及分享到朋友圈作用仅为设置…"}, {"id": "6896657558849716231", "title": "【Vue】VueCli项目创建说明", "desc": "Vue3.0虽然优秀；但生态环境还不成熟，我们生产中遇到的许多问题还无法解决。因此本教程以Vue2.0为准： 假设项目名为example，创建项目。 方向键操作，Enter键选择Manually select features。 方向键操作，空格键选择；选择完后，按Enter键…"}, {"id": "6903535292717498376", "title": "vue源码分析（十）", "desc": "computed拿到computed对象中的每一个值，computed有两种写法，一种是直接写一个求值函数，另一种是写一个对象，其中有get等于一个求值函数，所以这里通过typeof进行判断，如果是一个函数，那么让getter等于这个函数，否则等于他的get。之后通过new W…"}, {"id": "6844904139063820302", "title": "hevue-img-preview 仅需传入url的vue图片预览组件", "desc": "更新5.0版本，优化文件大小，优化跟手效果，优化主题，增加配置项，修复bug，发布在线文档，使用更便捷"}, {"id": "6844903614566121480", "title": "如何在Element UI 对话框里面加载高德地图", "desc": "我们可以看到同样的代码，如果不写在对话框里，显示就没有问题。看了element ui的源码，终于发现问题的原因： 可以看到，对话框里的内容由此div包裹，而这个div的显示或隐藏是使用了v-if指令，查阅vue官方文档，可以了解到v-if的特性： 这也就是说，当对话框未打开之前…"}, {"id": "6984710323945078820", "title": "全自动jQuery与渣男的故事", "desc": "大家好，我是卡颂。 我是个恋旧的人，Github头像还是上古时期端游仙剑奇侠传的截图。 对于前端，如果能jQuery一把梭，我是很开心的。 React、Vue的普及让大家习惯了虚拟DOM的存在。但是虚"}, {"id": "6997344545805434888", "title": "Vue3 模板编译源码学习", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 在看这一块代码的时候我选择从测试用例入手： 这里的调用 compile 函数就是编译的总入口。 在看模板编译这里需要了解的前置知识： "}, {"id": "6959016804349902884", "title": "手写Vue2.0源码（十一）-全局api原理 ", "desc": "前言 此篇主要手写 Vue2.0 源码-全局 api 原理 上一篇咱们主要介绍了 Vue 计算属性原理 知道了计算属性缓存的特点是怎么实现的"}, {"id": "6964954862991704094", "title": "vue3封装出让后来者难以理解的组件，让不是大佬的你变得不再随时可替代", "desc": "前言 害，最近两个月忙于工作和生活（明明就是给自己偷懒找借口），太久太久没更新文章了，正好趁着今天加班（摸鱼）来写一写最近在项目中封装的自以为很装的组件。在ui疯狂出图的前提条件下，我发现了很多轻提示"}, {"id": "6949848530781470733", "title": "「Vue源码学习」你真的知道插槽Slot是怎么“插”的吗", "desc": "Vue插槽slot的基本使用单个插槽 | 匿名插槽编译作用域 （父组件在子组件<slot></slot>处插入 data）后备内容 (子组件<slot></slot>设置默认值)具名插槽 （子组件多个"}, {"id": "7001344430389067783", "title": "Vue3 中插槽（slot）的用法", "desc": "Vue 3.x 中插槽(slot)的使用方法与迁移指南。对比Vue3 与Vue2的用法，以及这样做的原因。"}, {"id": "7004341204116570119", "title": "修改代码报错Cannot read property 'join' of undefined，vue3+vite项目初始化，记录解决方案", "desc": "在没有使用任何cli的情况下去手动构建一个vue3.0+vite项目时。项目中的所有文件代码都是非常常规的，只要修改代码就一定会报错 package.json代码 这是报错信息 后来在github中发"}, {"id": "7001470141066117157", "title": "Vue3从0到1组件开发-业务组件：步骤的动画", "desc": "前解 在之前的文章中写过一篇关于steps步骤条组件，但是这个步骤条仅仅只是步骤的推进， 而今天这篇文章想写一些关于步骤条的动画的内容。"}, {"id": "7001034658871771144", "title": "使用el-cascader时报错Error in render: \"TypeError: Cannot read property“这类问题，你get了么？", "desc": "使用el-cascader时报错Error in render: \"TypeError: Cannot read property 'algorithmInfos' of null\"解决方案"}, {"id": "7006550486312550430", "title": "Vue.js 组件 deep 选择器的用法和原理", "desc": "随着代码规模的增长，前端项目中的 CSS 管理成了问题，其中之一就是 CSS 规则冲突。多人协作开发的项目，通过命名约定的方式有时候可能也无法完全避免。对此，不同的前端框架有不同的解决方案。Vue.j"}, {"id": "6998887337195208711", "title": "vue3.x中watch的使用和vue2有啥不一样&vue3模块化深入了解，您来瞧瞧~", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 watch使用场景 比如根据值的变化，进行网络请求，根据值的变化进行组件的生成和销毁（我们经常成为这类操作为副作用）。把这类需求写在wat"}, {"id": "6917575631446704135", "title": "体验Vue3.0,　仿一个网易云音乐客户端", "desc": "其实还有很多地方没有完善的，例如主题切换，想过用css变量来做，但是因为觉得需要替换的地方太多了就阉割了，以及下拉刷新的地方做的也不好，没有做虚拟滚动，图片没有各个默认图等等..."}, {"id": "6991993532705669157", "title": "Vue3从0到1开发组件前戏（下）：组件分类｜8月更文挑战", "desc": "从0到1开发Vue3组件的铺垫最后一文，分享下我对组件的几大分类，也将是我后面分享组件开发的一个重要顺序。"}, {"id": "6981628394450452511", "title": "带你用VUE实现上传图片效果", "desc": "摘要：在逛b站时看到一个上传图片的效果，想着可以自己也做一个，因为原作者是用原生js写的，那我不如就用vue写好了，当然，是一个很小的东西，在HTML文件直接引用vue就好了，详细步骤如下~"}, {"id": "7000749801734144008", "title": "Vue3从0到1组件开发-业务组件：loading动画", "desc": "loading动画的使用 loading动画已经在交互圈子里算是老常客了，老派的、时尚的、酷炫的也是各种各样，令人眼花缭乱。 尽管如此，这"}, {"id": "7000195530538090532", "title": "基于ElementUI封装一个自己的UI组件库", "desc": "初始化项目 这里我们使用官方的 vue-cli 初始化一个 Vue 项目 admin-ui目录结构： 在src的同级目录创建packages文件夹，用于存放需要打包的组件： 接下来让我们写一个简单的V"}, {"id": "6961203055257714702", "title": "一行可以让项目启动快70%以上的代码", "desc": "这两天闲来无事，想优化优化项目的启动时间，用了一个下午吧，将项目启动时间从48秒优化到14秒，大约70左右，效果还是有的，而且仅仅用了一行代码。"}, {"id": "7002879621922291749", "title": "Vue2.x创建惰性加载的EventBus", "desc": "EventBus是Vue2中较为常用的组件通信方式，解决了多组件之间通信和数据共享的问题，但是在使用中也会碰到一些问题"}, {"id": "7004270168390139912", "title": "2x4 VueRouter - 进阶 - 过渡动效", "desc": "VueRouter 基础教程系列 🎉 简介 路由的过渡效果指的是为路由组件增加转场效果。 在 VueRouter 3.x 中可以直接使用 <transition> 组件包裹 <rotuer-view>"}, {"id": "6844903901175496711", "title": "Vue.set()和this.$set()介绍", "desc": "在我们使用vue进行开发的过程中，可能会遇到一种情况：当生成vue实例后，当再次给数据赋值时，有时候并不会自动更新到视图上去； 当我们去看vue文档的时候，会发现有这么一句话：如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。 如下代码，给 student对象新增 a…"}, {"id": "6844903495921827847", "title": "基于Vue2的数据管理系统-DBM", "desc": "使用DBM在每次导入表格成功后将生成对应表格的查看、编辑（包括添加）和删除三个权限项，在角色管理页面对指定角色授予某项权限，另外还包含十余项系统权限属于不可修改权限，只有最高级别管理员拥有。 进入指定表格后可以对其进行一些自定义的数据筛选、导入、导出等基本操作，采用后台分页与解…"}, {"id": "6979392750470823949", "title": "利用node为vue项目配置一个代理服务器解决跨域问题", "desc": "最近在研究地图相关的东西，在调用天地图的地图服务的时候，就报了一个跨域的问题，于是自己就写了一个最简单的node服务器解决了。 目标地址:\"http://t0.tianditu.com/img_w/x"}, {"id": "6948704003878780936", "title": "Vue 追踪数据变化", "desc": "工作中时不时就会遇到这种情况：页面上显示的数据不对，需要前端同事进行定位。 在一个使用 Vue 搭建的 SPA 应用上，页面最终展示的数据，从初始化，到最后的展示，过程可能很简单，也可能很复杂。遇到复杂的数据流，没有合适的方法，排查起来会很头疼。 如果能够看到数据发生变化时的调…"}, {"id": "6979232551428685860", "title": " vue 中级面试（一）", "desc": "这是我参与更文挑战的第29天，活动详情查看: 更文挑战 1，Vue中，computed 和 watch有什么区别？ 计算属性computed 侦听属性watch 2，为什么需要使用Vue.set ？ "}, {"id": "6979214386640453668", "title": "Vue基础知识", "desc": "组件传值之子传父 子组件向父组件传递值需要用到$emit这个属性，意思为发出一个东西。参数1：发射的事件名称 ，参数2：事件传递的参数 非父子传值 我们有时候会遇到不是父子组件传值，也就是兄弟传值，这"}, {"id": "6979176758922706952", "title": "Vue3的简单介绍", "desc": "Vue3和Vue2的区别 源码的组织方式 使用 TypeScript 重写 首先为了提升代码的可维护性，Vue3.0 抛弃了 Flow 类型注释，而是全部采用了更加严格的 TypeScript 重写，"}, {"id": "6844903911497662477", "title": "Vue实战：一口很长的气理解和配置你的vue-cli3项目", "desc": "Vue实战系列教程二，本篇是针对线上项目从cli2升级到cli3的一个过程，记录了升级（爬坑）过程，其中包括了cli3的变化， vue.config.js的关键配置，以及 项目结构组织 和 构建流程优化 等内容，对 cli3 项目搭建中应知应会的知识点做了一个实践总结。"}, {"id": "6844903906858795015", "title": "vue中的nextTick", "desc": "所有的任务都会被放到调用栈（call-stack）等待主线程（main thread）执行,主线程的执行过程就是一个 tick。 JS调用栈采用的是后进先出的规则，当函数执行的时候，会被添加到栈的顶部，当执行栈执行完成后，就会从栈顶移出，直到栈内被清空。 同步任务会在调用栈中按…"}, {"id": "6963073266449645575", "title": "自定义组件v-model ,说一下他干了个啥", "desc": "前面有过一个这样的文章, 感觉以前没理解v-model是干嘛用的 一个组件上的 v-model 默认会利用 名为 value 的 prop 和 名为 input 的事件，但是像单选框、复选框等类型的输"}, {"id": "6962896348341338143", "title": "Vue 响应性", "desc": "Vue 2.x 响应性 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProper"}, {"id": "6844903800625430535", "title": "深入剖析Vue源码 - 选项合并(下)", "desc": "合并策略之所以是难点，其中一个是合并选项类型繁多，合并规则随着选项的不同也呈现差异。概括起来思路主要是以下两点： Vue针对每个规定的选项都有定义好的合并策略，例如data,component,mounted等。如果合并的子父配置都具有相同的选项，则只需要按照规定好的策略进行选…"}, {"id": "6844903545028739086", "title": "正则表达式，理解这些就够了", "desc": "正则、要点"}, {"id": "6844903504050552839", "title": "Vue v2.5 调整和更新不完全详解", "desc": "近日，Vue v2.5 发布，除了对 TypeScript 的更好的支持外，还有一些功能和语法的调整，你需要了解。"}, {"id": "6844903889615978503", "title": "使用 vue-async-manager 管理 Vue 中的异步调用", "desc": "不知道大家对 React Suspense 是否有过关注，也许 Suspense 让人比较激动的是在服务端的流式渲染，然而从目前来看，React Suspense 的功能其实就是个 Loadable。当然啦这是我个人的看法，不过这不是今天的重点，今天的重点是介绍如何在 Vue …"}, {"id": "6944921732914544654", "title": "vue 路由钩子", "desc": "在当前路由改变，但是该 组件被复用 时（路由复用同一个组件时）调用,而这个钩子就会在这个情况下被调用。可以访问组件实例 this 导航被触发。 在失活的组件里调用 beforeRouteLeave 守卫。 调用全局的 beforeEach 守卫。 在重用的组件里调用 befor…"}, {"id": "6844903942178996238", "title": "浅析Vue编译原理—AST语法树", "desc": "在上一篇里，我们主要聊了下Vue数据绑定简析，明白了其观察者模式的基本原理。我们知道在观察者中有一种属于渲染函数观察者(vm._watcher)，通过对渲染函数的求值计算来触发依赖收集，进而进行响应式的数据绑定，但是对于渲染函数如何编译却不曾了解。 这一篇我们将通过compil…"}, {"id": "6844903607834263566", "title": "Jest-Vue-Report", "desc": "最近一直再忙公司项目的优化与重构，在写ui组件库，有阵子没出来写写文章和大伙儿交流交流啦，自己还是比较喜欢和热爱代码或者黑科技的童鞋一起沟通沟通，说不定在沟通过程中会时不时某个点或者某个经历能和大家产生共鸣。 小编一直是Vuejs和java的忠实粉丝，已经准备好了在全栈攻城狮的…"}, {"id": "6844903616017334286", "title": "干货--手把手撸vue移动UI框架：侧边菜单", "desc": "最近面试发现很多前端程序员都从来没有写过插件的经验，基本上都是网上百度。所以打算写一系列文章，手把手的教一些没有写过组件的兄弟们如何去写插件。本系列文章都基于VUE，核心内容都一样，会了之后大家可以快速的改写成react、angular或者是小程序等组件。这篇文章是第一篇，写的…"}, {"id": "6882921823982321677", "title": "基于Vue-cli和webpack搭建开发环境", "desc": "说明：此规则旨在在函数括号之前强制执行一致的间距，因此，只要空格不符合指定的偏好，就会发出警告。 always（默认）需要一个空格，然后(是参数。 never在(参数后面不允许任何空格。 anonymous是用于匿名函数表达式（例如function () {}）。 named是…"}, {"id": "6970709760979140644", "title": "【Vue2.x 源码学习】第四篇 - 对象的深层劫持", "desc": "【Vue2.x 源码学习笔记】第四篇 - 对象的深层劫持；核心了思路递归：observe -> Observer -> defineReactive -> Object.defineProperty"}, {"id": "6845166890722000910", "title": "VueX模块化之后？", "desc": "Vuex模块化+命名空间后,如何调用其他模块的state,actions,mutations,getters?模块A:模块b:1，假设模块B的actions里,需要用模块A的state该怎么办?我们来"}, {"id": "6844903501307314189", "title": "Electron & Vue2 hexo博客编辑发布工具", "desc": "基于Electron & Vue2 开发的hexo编辑工具，支持一键发布。"}, {"id": "6916064234816143373", "title": "Vue官网API源码探索系列一：Vue的加载过程", "desc": "这个系列大概思路就是，先整体探索一下Vue的加载过程，然后了解一下Vue的初始化过程即new Vue的过程。然后参照官方文档上提供的API，从源码的角度理解这些API的作用和意义。由于我本人也是第一次探索Vue源码，而且这个系列也是一边探索一边写，由于缺少对全局的把控，很多内容…"}, {"id": "6844904004577656839", "title": "vue源码阅读二：虚拟 DOM 是如何生成的？（上）", "desc": "我们看源码，我觉得最好带着问题去看源码，这样我们会专注于一个点去看源码，不会被源码的一些其他功能，把我们带离最初想去的地方。本章主要的目的是，弄明白 vue 是如何生成虚拟 DOM 的。 我们从入口文件一步一步慢慢的分析。先看入口文件。 入口文件：web/entry-runti…"}, {"id": "6844903809529937933", "title": "浅尝Vue.js组件（二）", "desc": "定义一个名child子组件，为该子组件添加内容应该在子组件的template中定义，直接在父组件的<child>标签中定义的内容不会被渲染。 在子组件中通过加入<slot>元素占位，便能够渲染父组件中子组件标签中的内容了。 插槽可以有默认内容，当在父组件中没有提供内容的时候，来…"}, {"id": "6844903663278751757", "title": "如何在Vue里建立长按指令", "desc": "您是否曾想过按住按钮几秒钟才能在Vue应用程序中执行某个功能？ 您是否曾想在应用程序上创建一个按钮，通过按一次（或按住按钮的整个输入）来清除单个输入？ 如果你曾有过这些想法，很好，我也是。那么恭喜你看到了这篇文章。 本文将解释如何通过按下（或按住）按钮来执行功能和删除输入。 首…"}, {"id": "6844903587718529038", "title": "你想要的——vue源码分析（1）", "desc": "Vue.js是现在国内比较火的前端框架，希望通过接下来的一系列文章，能够帮助大家更好的了解Vue.js的实现原理。本次分析的版本是Vue.js2.5.16。"}, {"id": "6943481133984120862", "title": "做个简单的loading效果+写个原生的懒加载", "desc": "这里不知道为什么，使用QQ录制屏幕的时候有一点不好，就是他不可以完全还原你的效果，也就是他的帧数不稳定，其实真实的效果是比这个好看一点的，虽然也好看不到哪儿去，但是流畅度还是高一些的，我尝试使用MBP自带的录制屏幕的软件，但是他的格式不对，这里不给上传，所以没办法，将就看吧，或者..."}, {"id": "6943786913291599909", "title": "Webstorm插件新秀CommentShell,在Vue中运行注释内容！", "desc": "CommentShell(CSL)一个可以在注释中运行shell命令的intellij插件。 以上语言或者文件已经经过测试，除此外，只要编程语言或者某类型文件支持单行注释语法且指定单行注释类型和语法书写规范理论均可使用（见下文）。 方式二： intellij plugin仓库搜…"}, {"id": "6907071328679886855", "title": "Vue官方文档解读系列(三)：slot作用域插槽", "desc": "本文主要根据官方文档中的 slot 作用域插槽一栏，阅读后加上自己的一些理解和例子的补充。因为在参阅Vue官方文档时，有一些内容作者没有加上例子配合解释(可能觉得太简单了)，所以有些含糊不清，初学者不是很能理解，所以写了这个系列。在自己的理解上加上一些例子，希望能帮助你更好的理…"}, {"id": "6844903510568353800", "title": "写了一个 skeleton screen loading 组件", "desc": "Vue Skeleton Loading 是一个让我们快速和方便写出自定义 skeleton loading 的插件。"}, {"id": "6943481070339932167", "title": "目前比较火的前端框架及UI组件", "desc": "看到的一篇总结性的文章，收藏一下，感兴趣的可以自己看看，哪些是已经会的，哪些是没听说过的，哪些是一知半解的，都可以稍微看看。1.Zepto.地址：点击打开链接描述：Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。 如果你会用..."}, {"id": "6844903891037847565", "title": "Vue 应用单元测试的策略与实践 06 - 如何落地的几点建议", "desc": "欢迎关注知乎专栏 —— 前端的逆袭（凡可 JavaScript，终将 JavaScript。） 欢迎关注我的博客，知乎，GitHub，掘金。 1. 利用好“单元测试是一种政治正确” 谈到如何推进单元测试的落地，首先得要有一个开始。很多公司都在推行 OKRs 或者 KPI 机制，…"}, {"id": "6844904200204206094", "title": "vue-hooks学习笔记（含源码解读）", "desc": "hooks 百度翻译为钩子，不要把 Hooks 和 Vue 的 生命周期钩子（Lifecycle Hooks） 弄混了，Hooks 是 React 在 V16.7.0-alpha 版本中引入的，而且几天后 Vue 发布了其概念验证版本。 Hook是react中得一项新功能提案，…"}, {"id": "6906708617043378190", "title": "vue的数组为啥只能用变异方法？index和length得罪了谁？", "desc": "你好，我是终身学习的阿飞。 我做了个青柠檬读书会的公众号，每天分享我的学习、读书的内容，同时也会分享我的一些学习方式和一些软件推荐。 如果您有任何问题，可以在博客下方留言，我们一起探讨。 在昨天的文章探讨vue2.x的数据劫持是怎么实现的？中，我们探讨了vue是如何对对象劫持的…"}, {"id": "6844903558161121288", "title": "假如测试说你的网站在iOS 10有问题", "desc": "你用Vue做了一个单页面应用，它在一切设备上都工作正常，但是突然有一天，你的测试和你说，这个网站在iOS 10上跑不起来，怎么办？"}, {"id": "6976045056268435464", "title": "【Vue2.x 源码学习】第十九篇 - 根据 vnode 创建真实节点", "desc": "【Vue2.x 源码学习】第十九篇 - 根据 vnode 渲染真实节点；vnode 渲染真实节点步骤；原型方法_update；patch方法：1，创建真实节点2，替换掉老节点；createElm实现；"}, {"id": "6844904078842003464", "title": "从0开始探究vue-组件化-组件之间传值", "desc": "组件化，就像一个电脑主机里的主板，有内存条的插口，有硬盘，光驱等等的插口，我们的项目，就像一个电脑主机，通过各种组件化的模块（硬盘、内存等），来拼合成一个完整的电脑。 模块复用，提高效率，让重复的代码只写一遍。 预留个性化设置，可以保证模块，既通用，又可变。 提高可维护性，如果…"}, {"id": "6933601118937317383", "title": "Vue初始化及响应式数据原理浅解", "desc": "Vue，一个用于构建用户界面的渐进式框架，也是国内目前最为火热的前端技术框架。在这个灵魂跟不上身体的时代，简单、高效成为了每个人最为推崇的生活方式，向来追求效率的码农更是如此，单从使用上来说，Vue确实简单易上手，成为很多开发人员的首选。 当然，在这里我们不讲用法（传送门），怎…"}, {"id": "6976039742269816840", "title": "vue2.x源码理解", "desc": "准备工作 从GitHub上面下载vue的源码（https://github.com/vuejs/vue） 了解下Flow,Flow 是 facebook 出品的 JavaScript 静态类型检查工具"}, {"id": "6977269399308730398", "title": "Vue3初探", "desc": "Vue3初探 花了大量时间看完了Vue2和核心源码，是时候开始全面接触Vue3了。我们知道Vue3新增了很多特性,Composition Api，Teleport，Fragments，Emits Co"}, {"id": "6844903578021134350", "title": "使用 Vue.js 和 Flask 来构建一个单页的App", "desc": "在这个教程中，我们将讲解如何将vue.js单页应用与Flask后端进行连接。 一般来说，如果你只是想通过Flask模板使用vue.js库也是没有问题的。但是，实际上是一个很明显的问题那就是，Jinja（模板引擎）也和Vue.js一样采用双大括号用于渲染，但只是一个还算过的去的解…"}, {"id": "6844904009807953934", "title": "Better-Scroll的简单使用-上拉加载更多-回到顶部", "desc": "1、首先将better-scroll封装成一个单独的组件。因为移动端一个项目中有很多地方需要 4、在mounted钩子函数中创建Scroll对象。需要使用$refs来取到wrapper DOM对象，在created中使用$refs是取不到的 1.先控制按钮的显示隐藏，我们需要在…"}, {"id": "6844903846628573197", "title": "Vue模板、JS、CSS分离实现", "desc": "Vue.js文件默认由template、style、script三种标签将HTML、CSS、JS混合到一个文件当中。 这种模式有它一定的优势，即：当单个VUE文件如果样式、逻辑、模板相对简单时以上结构能很大程度上降低逻辑复杂度，页面功能和整体结构也一目了然。但是，当页面功能内容…"}, {"id": "6874815221174075405", "title": "【工具流脚手架cli】用脚手架整合模板和配置", "desc": "随着公司各端的业务进行，前端方面会沉淀出一些通用的解决方案和模板。此时，统一维护和管理就非常有必要了。allen-cli就是基于这样的场景而诞生的。 输入allen init命令选择一个脚手架模版进行下载，然后创建对应的app。 动态选择构建环境，适配移动端等不同情况。 1. …"}, {"id": "6844903790160642061", "title": "Vue 开发经验小记（持续更新）", "desc": "6. vue中组件间传值 7. 动态组件 <component> 是vue官方提供的标签，通过更改 is 指向的子组件名来动态切换组件。 8. v-once 指令 只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。 …"}, {"id": "6995353069978386462", "title": "模仿Win10 UI 框架 Vue3", "desc": "Win10 UI 框架 Vue3 推荐 Vue 3 + Typescript + Vite + Using <script setup> 本框架可以让你的页面像win10视窗系统一样，变为一个网页上的"}, {"id": "6844904016514646023", "title": "2020年史上最全Vue框架整理从基础到实战(二)", "desc": "在很多Vue项目中,我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: '#app '}) 在每个页面内指定一个容器元素。 这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂…"}, {"id": "6844903905709703181", "title": "Vue3.0来临之前，你可以做些事儿", "desc": "文章的主要内容就是解读下这个库的源码。该仓库使用typescript编写，所以读这篇文章之前，你需要： 关于Vue.config.optionMergeStrategies.setup不理解的，可以看下相关的文章。我这里举个简单例子：开发过程中，使用mixin方式，对mount…"}, {"id": "6844904173624885262", "title": "带你用vue快速撸前端页面切换效果", "desc": "突然心血来潮想写点东西，写的不好莫喷。 大家有没有想过在web端实现原生app才有的切面切换效果，（例如：ios端的在苹果左侧右滑可以拖拽当前页面返回上一页）没想过的请跳过。 今天就手把手带你用vue实现切换效果。 嗯，想法是有了，那么如何实现呢。vue官方提供了组件切换的过渡…"}, {"id": "6979571510861692964", "title": "Vue3中组件跨级传递provide 和 inject 的使用", "desc": "“这是我参与更文挑战的第11天，活动详情查看： 更文挑战” 1.provide 和 inject 的讲解 2.provide 和 inject 的使用 3.父组件 4.儿子组件 5.孙子组件 6.效果"}, {"id": "6915352530251677709", "title": "盘点从vue源码看到的冷门api", "desc": "这个其实和上面的 $listeners 一样，爷爷组件想把自己的属性传递给孙子组件时，往往通过孙子组件 v-bind='$attrs' 此时就可以很好的接收爷爷组件给父组件传递所有属性。 上面代码是代码的具体应用，其中也包含了$listeners的示例，在封装高阶组件时可以使用…"}, {"id": "6992602669969833992", "title": "vue-devtools打开组件文件之原理解析", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 vue-devtools打开组件文件之原理解析，为了响应若川大佬的号召，一起攻克源码，本文将对vue-devtools打开对应组件文件的原理"}, {"id": "6992600484217356301", "title": "Vue3+vite+ts 中使用svg-icon", "desc": "svg-icon 在我们日常项目中经常会用到，今天我们在Vue3+vite+ts 的环境下引入一下svg-icon"}, {"id": "6994050600581201951", "title": "计算和监控还是有用的，就是用不好！", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 1.computer：计算属性 1.1 什么是计算属性 计算属性的重点突出在 属性 两个字上（属性是名词），首先它是个 属性 其次这个属性有"}, {"id": "6844903986374377486", "title": "vue-router原理到最佳实践", "desc": "本文是vue-router系列。这里从浏览器到vue-router原理到最佳实践都会有详细的讲解。由于篇幅较长，建议可以选择感兴趣的目录看。 HTML5提供了对history栈中内容的操作。通过history.pushState/replaceState实现添加地址到histo…"}, {"id": "6974596228914872350", "title": "vue3+ts开发vue3-context-menu插件", "desc": "使用vue3+ts写一款右键菜单组件，使其支持vue3，ts，采用最原始的代码来编写，不借助第三方插件，助力vue3社区。"}, {"id": "6844903798549250055", "title": "element-ui 源码解析，你知道 v-loading 是如何实现的吗？", "desc": "element-ui 源码解析，你知道 v-loading 是如何实现的吗？我们该如何最快速的实现一个 v-loading 功能？"}, {"id": "6844903607620337678", "title": "vuex其实超简单,只需3步", "desc": "今天我们用简单的3步来证明一下,vuex有多简单. 代码看起来稍微有那么一点点多,不过看起来是不是很熟悉? 跟普通的 vue 没多大差别嘛. 这一步其实就是新建一个store,但是我们还没在项目中使用. 然后再最外层组件上用computed属性获取对应的值,就能做到实时更新.无…"}, {"id": "6844903616189300744", "title": "[译]如何优雅地用 Vue 创建数据驱动的用户界面", "desc": "虽然我们通常在构建大部分的视图时知道需要用到哪些组件，但有时我们直到运行时才知道它们是什么组件（译者注：动态组件）。这意味着我们需要基于应用程序状态、用户设置或来自 API 请求的响应结果来构建视图。一个常见的情况是构建动态表单，其中所需的问题和组件由 JSON 对象配置，或者…"}, {"id": "6844903861031796743", "title": "你了解vue3.0响应式数据怎么实现吗？", "desc": "has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。 ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)…"}, {"id": "6976932328585035806", "title": "完整看一遍Vue文档，对自己薄弱的地方进行总结记录（Vue2）", "desc": "Vue Devtools 在浏览器上安装Vue Devtools有助于我们查看组件以及组间的传值，可以说是相当方便。 计算属性 vs 方法 什么时候用计算属性，什么时候用方法？ 计算属性跟方法最大的不"}, {"id": "6844903520743718925", "title": "手摸手教你在vue-cli里面使用vuex，以及vuex简介", "desc": "这篇文章是在vue-cli里面使用vuex的一个极简demo，附带一些vuex的简单介绍。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 我创建了一个新的vue-cli里面什么东西都没有，只引用了vuex，这里是码云地址,可以下载下来，然后npm…"}, {"id": "6844903801590120456", "title": "vue组件之轮播图的实现", "desc": "假设需要轮播三张图片(1,2,3)，以前的思路就如图所示，添加两个节点。通过索引(index)的切换实现组件的无缝轮播。 这种想法的确可行，而且实现出来效果还不错。 大量的dom操作。 代码逻辑相对挺复杂，量也更多。 selected即为显示的内容的name，用sync做一个\"…"}, {"id": "6933927220704460814", "title": "Vue源码解读(响应式原理介绍和Prop)", "desc": "那么深入响应式原理介绍会以initState()方法开始，逐步分析Vue中响应式的原理，下面这张图可以很好的展示响应式的原理。 obj：要定义其属性的对象。 key：要定义或修改属性的名称。 descriptor：要定义或修改属性的描述符。 其中descriptor有很多可选的…"}, {"id": "6844904110811004941", "title": "整理一个vue实例的产生过程： 从new Vue到mounted", "desc": "前言： 去年花了几天时间尝试解读vue源码，可惜基础不够再加上项目压着，无疾而终。今年继续挑战~，let‘s go 本文算是自己学习源码的一篇整合笔记，会直接跳过很多细节，先把整体逻辑理一遍。 在原型链上找到了它。 3. mergeOptions整合、初始化部分属性 在接收到o…"}, {"id": "6857413239773331463", "title": "Vue源码构建过程", "desc": "Vue版本2.6.11。 首先，分析任何库的源码一定是从它的package.json中进行分析。 我们可以看到实际上在vue源码中的package.json中运行build命令其实就是相当于运行script/build.js。 我们可以看到build.js中引入了很多相关模块，…"}, {"id": "6844903588213293064", "title": "Vue 页面切换效果之 BubbleTransition", "desc": "前端使用 SPA 之后，能获得更多的控制权，比如页面切换动画，使用后端页面我们可能做不了上面的效果，或者做出来会出现明显的闪屏。因为所有资源都需要重新加载。 今天使用 vue，vue-router，animejs 来讲解如何上面的效果是如何实现的。 点击菜单，生成 Bubble…"}, {"id": "6844903727426437134", "title": "Proxy实现vue MVVM实践", "desc": "vueconf(2018hangzhou)大会刚刚过去，vue作者尤大大向我们展示了vue3.0的进展，并介绍vue3.0的一些改动，其中最令我期待的就是重写数据监听机制。 谈起vue的双向数据绑定，我们首先能想到的就是ES5中Object.defineProperty，利用重…"}, {"id": "6844904073909501960", "title": "搭建基于vue-cli3+typescript的tsx开发模板", "desc": "上一步中已经创建完了基于ts的vue模板，但是开发方式还是如同之前的template一样，只是将script中的js部分改成了ts来书写。接下来就将模板(template)方式改成tsx的方式，这里需要借助一个库 -- vue-tsx-support 然后删掉src/shims…"}, {"id": "6952777507162554382", "title": "组件化开发之如何封装组件", "desc": "自从React，Vue等前端框架在市面上大量使用之后，组件化开发逐渐成为了前端主流开发方式，今天我就在这里给大家分享一下在我们平时的开发中我们自己应该如何去封装组件。主要从以下三个方面给大家讲解"}, {"id": "6844903560514109448", "title": "vue canvas动效组件插件库制作", "desc": "See the GitHub 查看历史版本. 欢迎给出一些意见和优化，期待你的 Pull Request。"}, {"id": "6844903607439998983", "title": "【vue/axios/vue-router】制作一个精致的美团项目", "desc": "点选商品后自动添加到购物车，并计算好总价，在商品列表、购物车列表和商品详情页都可以随意增减数目，此外左侧商品分类和右侧的商品相互关联，通过better-scroll插件滑动商品列表时，相应的商品分类也会跟着跳转。 首先要实现商品列表的滑动，就需要用到一个better-scrol…"}, {"id": "6916395016206319624", "title": "vue3+jsx使用递归组件实现无限级菜单", "desc": "想要实现的功能就是根据路由信息自动生成对应的菜单。 最主要的变化还是第二个，下面我会把涉及到的内容以我的理解讲出来，如果有理解更到位的大佬，欢迎指教哦。当然最基础的jsx与ts用法下面就不说了。至于jsx写法与传统vue文件写法两者的优缺点，网上的大佬已经说了很多了，主要看自己…"}, {"id": "6844903828974731271", "title": "Vue 2.x折腾记 - (19)  基于Antd Design Vue 封装一个符合业务的树形组件", "desc": "仔细翻了下对应的文档(antd vue)，发现有那么一个树形控件，但是没有上面部分全局控制的功能。 那么只能自己动手改造出一个符合业务的了，有兴趣的看官可以瞅瞅。 第三版是改由按钮组去实现，发现可以很好的解决极端的情况，可以分解成三种情况去实现。 至此，符合我们业务的一个树组件…"}, {"id": "6916018667775852558", "title": "Vue的element框架实现换肤功能（深浅多主题切换）", "desc": "有很多vue框架都有换肤功能，但是都是浅色系的而且改的都是主色调。 我的思路是给body加一个class，每个主题的对应一个class名字，每次切换主题是更换body的class，在该class下重写样式。 但是写几套样式很麻烦，特别是现在大家都用的框架，大面积的修改样式太复杂…"}, {"id": "6844903923698892808", "title": "Vue组件化思考", "desc": "项目结束一段时间，写个文章总结下。初入项目组，看到了3000行的vue文件，一口血差点捧出，无奈上一个程序员已经离职，留下的坑，只能自己填上了。在重构项目的过程中，也发现了一些别的问题，组内分享会做了总结分享，这次总结成文章特此记录。 在项目中，对于组件的划分，我们一般会划分为…"}, {"id": "6986255963560869895", "title": "简易Vue实现", "desc": "简易Vue实现 数据劫持，Object.defineProperty() 发布-订阅模式 创建对象的方法 字面量创建法 构造函数创建法 创建出来的对象，我们可以对它进行任意操作，增删改查均可以。"}, {"id": "6844904159171330055", "title": "关于vue3默认把所有`onSomething`当作`v-on`事件绑定的思考", "desc": "也就是说，以后如果你在传递props的时候，以on开头的props，如果在组件上没有做props的声明，那么会被当作事件绑定到组件的根节点上。 为此，我开了一个issue来讨论这个问题，issue地址。我关心的主要有两点： vue3中可以直接通过function() {}来声明…"}, {"id": "6986235585149026318", "title": "vue简单路由配置", "desc": "vue路由简单配置，redirect重定向，路由守卫,如果你只需要非常简单的路由而不想引入一个功能完整的路由库，可以动态渲染一个页面级的组件"}, {"id": "6942379125482979365", "title": "《简述Vue 里面 computed 和 watch 的区别》", "desc": "computed 是指计算属性; 它会根据所依赖的数据动态显示新的计算结果, 该计算结果会被缓存起来。computed 的值在 getter 执行后是会被缓存的。如果所依赖的数据发生改变时候, 就会重新调用 getter 来计算最新的结果。 watch 它是一个对 data 的…"}, {"id": "6924139053231276040", "title": "vue学习笔记之filter篇", "desc": "1. 基本使用 2. 过滤器传参 3. 多个过滤器 4. 全局过滤器和局部过滤器"}, {"id": "6904415846676987911", "title": "记账项目总结", "desc": "这里不得不说一下vuex的一个不友好的地方，那就是$store.commit()没有返回值，因此为了能够知道我的commit的状态，我只能在state里面来设置一个变量来记录。 ​ 返回克隆的Day.js对象，并将其设置为一个时间单位的开始。"}, {"id": "6844903591052836878", "title": "为什么Vue使用异步更新队列？", "desc": "我们在使用Vue开发项目时有一种应用场景是当状态发生变化后，无法立刻获取更新后的DOM，必须使用nextTick方法注册回调，在回调中获取。这究竟是为什么呢？ 本文通俗易懂用很短的篇幅介绍为什么Vue使用异步更新队列。"}, {"id": "6969263443660505118", "title": "【Vue】探索  nextTick ", "desc": "本文基于 VUE 2.6.11 源码。Vue 3.0 的实现略有变化，但思路仍可借鉴2.6。文章末尾会讲一下3.0相关变化。 关于nextTick，我一直有很多疑惑。"}, {"id": "6844904119291871239", "title": "深入亿点点之Vue：数据响应式", "desc": "数据响应式，从官方定义来说，将Model绑定到View，当用代码更新Model时，View会自动更新。 数据响应式强调数据驱动DOM生成，而不是直接操作DOM。 而常常和数据响应式混为一谈的数据双向绑定，则特指v-model，该指令实现了如果用户更新了View，Model也会随…"}, {"id": "6844904021619113992", "title": "Vue响应式系统技术原理和Vue3响应式系统的优点", "desc": "数据驱动视图是MVVM框架的显著特点，MVVM框架的出现将前端开发者从繁杂的、“鸟巢”般的dom操作中解放出来，开发体验比jQuery/underscore模板提升了不知道几个层次。 想要实现数据驱动视图，需要解决两个问题，一是框架要知道数据什么时候变更、二是框架如何把变更后的…"}, {"id": "6911551851498471438", "title": "vue2.0源码-initMixin（二）", "desc": "我们先看源码然后一句句解析,通过名字其实我们可以猜测出来，这里就是处理inject的地方，不了解的可以去看下inject和provide，vue官网的解释为，这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始…"}, {"id": "6844903581242359822", "title": "Vue 2.0 浅谈--生命周期和钩子函数", "desc": "用Vue也有一段时间了,发现生命周期是很重要的一部分,稍微懂得了一些东西,特地来分享一下."}, {"id": "6844903570215534606", "title": "Atom 完美支持 WePY", "desc": "创建一个页面需要管理4个对应的文件等... ps.如果你还不了解如何开发小程序，可以先看下小程序开发简易教程。 摸索了一圈还是推荐Atom给大家使用，感觉对WePY支持要比其他几款编辑器更高。 既然选择了Atom，那么一些必备的插件还是需要的，这里呢就为大家精心准备了几款实用插…"}, {"id": "6844903498039967758", "title": "那些炫酷的特效--QQ空间+VUE", "desc": "在这个色彩斑斓的时代，各种app、各式各样的特效充斥着我们的眼球。在我看来，炫酷的特效在很大程度上是能够博取用户的好感，提高用户体验的。而这些酷炫的交互方式是没有界限的，所以一些好的app特效也可以为网页所用。以此为宗旨，我以vue为基础，将QQ空间的一些特效进行了重现，一来锻…"}, {"id": "6969188525422542855", "title": "@vue/cli 如何创建项目", "desc": "介绍 Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供： 通过 @vue/cli 实现的交互式的项目脚手架。 通过 @vue/cli + @vue/cli-service-glo"}, {"id": "6844903987456507917", "title": "php后台接口跨域处理以及vue实现接口访问", "desc": "qs.stringify是把一个参数对象格式化为一个字符串。"}, {"id": "6844904143073591303", "title": "Vue中使用Promise先后实现请求先后执行", "desc": "今天用VUE编写项目时，涉及到两个异步请求在一个方法里面对同一个页面进行渲染，其中一个接口要提前渲染到一个搜索下拉框，之前自己都没意识到多个异步请求对同一页面进行操作的时候会导致数据错误，结果今天调试了半天，才想到了这个问题。也是怪自己还是一个新手，对于这种常识性的错误都不敏感…"}, {"id": "6844904086110732296", "title": "上手VueCLi笔记:从两个Vue版本开始", "desc": "第一次在使用 vue-cli 生成了 vue 项目之后，我是有点懵逼的。 此时src目录里有main.js，而public目录里则有index.html。 我们使用模板语法将内容vue实例插入#app。 warning的意思是，因为我们使用的Vue是runtime-only版本…"}, {"id": "6844903589995872264", "title": "基于vue-simplemde实现图片拖拽、粘贴功能的一些思考", "desc": "项目使用的是vue框架，需要一个markdown的编辑框，就在npm上找了一下，发现simplemde挺不错的，由于我比较懒，就顺便在npm又搜了一下，找到了vue-simplemde这个package，那就开始使用它吧。 但是这个vue-simplemde不支持图片拖拽上传、…"}, {"id": "6844903827317981191", "title": "Vue学习笔记（二）------axios学习", "desc": "axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 上面这种写法都是通过axios.get/post这种写法，这种写法稍微有点麻烦，可以通过这种写法，通过axios传递相关配置来创建请求。同时axios的默认的请求方式为GET方式。…"}, {"id": "6844903844644651022", "title": "VUE双向绑定原理实践", "desc": "近几年，前端框架层出不穷，在技术瞬息万变的时代里，关注JS语言本身，探究一些框架底层实现原理也许会让我们走得更深更远。下面是自己看vue源码的一些理解和实践，主要是对vue双向绑定原理和观察者模式做了一些实践，以v-model为例。 observe：在对template编译的过…"}, {"id": "6844904117026947085", "title": "最简单的例子了解js中call()、apply()、bind()的区别和联系", "desc": "都是用来改变函数的this对象的指向的。 第一个参数都是this要指向的对象。 都可以利用后续参数传参。 区别2：call后面的参数与intro方法中是对应的，而apply的第二个参数是一个数组，数组中的元素是和intro方法中对应。而bind它可以像call那样传参 call…"}, {"id": "6844904074643685384", "title": "了解vue计算属性和methods、watched", "desc": "在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript表达式支持，但是如果在模板中放入过多的逻辑会让模板过重，尤其当这种代码不止一次出现的时候。所以当遇到复杂的逻辑时，你可以选择使用计算属性 这里我用一…"}, {"id": "6844904137147039752", "title": "拆解checkbox的v-model", "desc": "项目中，原始使用 checkbox 的话，一般绑定 v-model 就行，但是，如果想实现类似微信从通讯录选中好友来建群的效果，如下图，加上可以组里面再选择，就需要将 v-model 拆解成 checked 和 change 事件，然后封装单项组件。 v-model 可以绑定两…"}, {"id": "6899653135103918087", "title": "vue-cli3  SSR 服务端渲染从零剖析构建", "desc": "1. vue-router 导出一个工厂函数，用于创建新的 2. main.js 导出一个工厂函数，用于创建新的 3. src 下新增 entry-client.js 及 entry-server.js 4. 增加 vue.config.js 这是 vue-cli3 的 web…"}, {"id": "6972345211456323591", "title": "宝刀未老，凿石开路识vue2（一）", "desc": "这是我参与更文挑战的第 11 天，活动详情查看： 更文挑战 宝刀未老，凿石开路识vue2（一） 1. 对象的响应式原理（vue2） 1.1 理解对象 在js中一般会使用内部的一些特性来描述对象的属性特"}, {"id": "6844903806170300430", "title": "Vue源码探究-状态初始化", "desc": "继续随着核心类的初始化展开探索其他的模块，这一篇来研究一下Vue的状态初始化。这里的状态初始化指的就是在创建实例的时候，在配置对象里定义的属性、数据变量、方法等是如何进行初始处理的。由于随后的数据更新变动都交给观察系统来负责，所以在事先弄明白了数据绑定的原理之后，就只需要将目光…"}, {"id": "6844903827758383112", "title": "滑动tab及3d翻页组件", "desc": "此处需动态设置为transform中的rotate属性。 由于front跟back是重叠的，通过翻转之后back也会出现镜像，此时需设置 scaleY(1)来解决镜像问题。 每一个page的翻转值需保存起来，方便后续翻页翻回该页的时候修改。"}, {"id": "6919778722719465479", "title": "【Vue-Element-Admin 分析】- 04 图标组件是怎么工作的？", "desc": "前面的部分一眼就能明白，注册了一个 vue 的全局组件。而后面的部分设计到 webpack api，我们可以看一下：依赖管理，再结合当前目录文件： 就能得知这段代码的功能是导入 ./svg 下的所有图标文件。 整体原理并不算特别复杂，就是利用 Vue.component 注册全…"}, {"id": "6844903538678562823", "title": "基于 Vue.js 之 iView UI 框架非工程化实践记要", "desc": "像我们平日里做惯了 Java 或者 .NET 这种后端程序员，对于前端的认识还常常停留在 jQuery 时代，包括其插件在需要时就引用一下，不需要就删除。故观念使然，尽管 Nuget 和 Maven 用得顺溜，但对 NPM 仍不带感，兴许是周边无人带动的稀薄气氛，也或者是没参加…"}, {"id": "6844903860415234056", "title": "如何写一个 vue 插件", "desc": "添加全局的方法或者属性。 添加全局资源，列如 directives， filters，transitions。 通过全局混入来添加一些组件选项。 添加 Vue 实例方法，通过把它们添加到 Vue.prototype 来实现。 一个库，提供自己的 API，同时提供上面提到的一个或…"}, {"id": "6844903614486577159", "title": "一个 API 友好的 vuepress 主题", "desc": "📦 📝 🎨 一个简洁易用的 VuePress 主题。开箱即用，你需要做的只是安装它，然后写文档吧。"}, {"id": "6844903520332677128", "title": "vue+webpack+amaze-vue实现省市区联动选择组件", "desc": "将提示准备好的location.js 文件拷贝到src目录下。 同学可以根据自己的情况自己拷入城市数据，代码里提供的数据仅供参考。 此demo只是提供一个思路去解决联动选择的问题，线上需求还请使用的同学根据具体情况优化代码后使用。"}, {"id": "6894501735085047822", "title": "Vue专题-chapter1", "desc": "概念：Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。 一般来说，v-if 有更高的切…"}, {"id": "6844903687052066823", "title": "浅析Vue源码（三）—— initMixin(下)", "desc": "在了解之前，首选我们需要了解一下响应式数据原理，也就是我们常说的：订阅-发布 模式。 这个函数定义在core文件下observer的index.js文件中，传送地址。 Vue的响应式数据都会有一个__ob__的属性作为标记，里面存放了该属性的观察器，也就是Observer的实例…"}, {"id": "6916434070855483405", "title": "vue选项卡动画效果", "desc": "了解了需求之后，发现这个线条由于是需要滑动的（脱离元素自身），所以不能用元素的border属性或者伪类来实现。 那我第一个想到的就是写一个独立的元素，通过定位来实现。 style部分就省略了，这个太简单。注意：li是定宽的！！！ 此时这是一个最常见的选项卡，选中哪个，哪个就会有…"}, {"id": "6844903568164700174", "title": "Chrome 66 开发者工具新特性介绍", "desc": "我们都知道，Network面板中的请求列表中有一个“发起者（Initiator）”列，该列会给出资源被请求的原因。例如，某段Javascript代码发起了一个图片请求，那么“发起者”列将会给出发起该请求的代码所在的文件及其行号。 上图中，“发起者”列显示所有的请求的“发起者”都…"}, {"id": "6919284434353160205", "title": "Vue3新特性&重大改变（部分）", "desc": "1. 新特性 1.1. Composition API 在Vue2中，开发者通过使用Vue Option API，将组件逻辑分布在不同的组件options当中（data，computed，methods，watch等）。当组件变得 options之间“跳跃”。这严重降低了代码的…"}, {"id": "6911871328652001293", "title": "vue之断言方式校验参数并错误提示", "desc": "上诉该方式很明显代码比较冗余，且繁琐。 总结：使用断言的方式可以简化大量重复繁琐的代码，更加专注于业务处理，舒服不止一点点。"}, {"id": "6972094316269273124", "title": "Vue表单与v-model", "desc": "表单输入绑定 基础用法 你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些"}, {"id": "6898973945320439815", "title": " VueRouter  基础功能手写实现", "desc": "类图代码实现实现install方法判断当前插件是否已经安装把Vue构造函数记录到全局变量（后续初始化router-linkrouter-view组件还需要Vue构造函数）把创建Vue实例时候传入的ro"}, {"id": "6958798365178101790", "title": "vue的生命周期函数有哪些？", "desc": "(1)vue的生命周期：vue实例从创建到销毁的过程，也就是 从开始创建、初始化数据、编译模板、挂载DOM并渲 染、更新并渲染、卸载的过程。"}, {"id": "6856694222506950670", "title": "😉 如何读一个vue组件的源码 ", "desc": "要想看懂一个vue组件库源码，我们首先要找到它的入口所在，那么在vue组件库中，一般都是从哪里入手呢，别急，下面我们就一一道来。 进入到src文件夹内部，我们会看到，里面的最外层总是会有一个index.js或者main.js，如果你看到了这个文件，恭喜你，这个入口已经被你找到了…"}, {"id": "6844903702269001735", "title": "Vue 页面状态保持页面间数据传输的一种方法", "desc": "util-http.js 针对axios进行了二次封装的ajax模块。 模块对axios进行了一次封装，目的是为了减少开发人员的工作量，简化和服务器端、客户端（JSBridge 代理请求）的交互，配合login-state-check.js模块进行身份认证权限控制。 帮我们处理…"}, {"id": "6933601773617676302", "title": "Vue源码，你真的看懂了吗（三）", "desc": "是将状态映射成视图的众多解决方案的一种，运作原理是使用状态生成虚拟节点，然后使用虚拟节点渲染视图。 Vue.js1.0变化侦测粒度太细，会有很多watcher同时观察某些状态，多了一些内存开销和依赖追踪的开销。Vue.js2.0的状态侦测不细化到某个具体节点，而是某个组件，组件…"}, {"id": "6844903592785084429", "title": "Vue.js 源码解析 2 - 编译与渲染函数", "desc": "感谢大家喜欢我的上一篇文章, 该系列的第二和第三篇文章将会分析 Vue.js 对 UI 的处理, 这一篇包括前半部分: 模板的编译, 渲染函数的生成和 VNode."}, {"id": "6921720171799248904", "title": "Vue3.0 reactive 嵌套 ref 的反直觉现象", "desc": "reactive 和 ref 大家都会用，基本用法就不多说了。 可是如果 reacive 嵌套 ref 却会出现一些反直觉的情况。 你可能会猜 observeA.a.value = 3。然而这么做是无效的。 很好。到这你是否已经成功懵圈 有人问啊，这是什么回事啊。你这是乱试，瞎…"}, {"id": "6973845177995624455", "title": "源码级剖析Vue-初始化流程-数据绑定", "desc": "大家好，我叫good。本章节适合阅读过部分源码，但理解不是很透彻的同学。 源码分析分为以下几个部分 1. Vue初始化流程-数据绑定 2. Vue模板编译原理 3. Vue依赖收集原理 4. Vue全"}, {"id": "6844903645092282381", "title": "mpvue开发cnode社区问题记录", "desc": "1. vuex 的使用 2. 提示：单个 JS 文件的体积超过了 500KB，则会跳过 ES6 转 ES5 以及代码压缩的处理 9. 改变page 标签的css属性"}, {"id": "6844903977683779597", "title": "Vue-Cli项目优化操作", "desc": "由Vue-Cli（2.X）生成的Vue项目中存在着首屏加载过慢，编译资源过大等问题，主要针对这些问题对项目进行相应的优化，提升项目响应速度，优化项目性能。 在Vue-router官方文档中有针对懒加载的介绍,主要是将整个大的js进行切片，对当前路由的资源进行一个按需加载。在Vu…"}, {"id": "6844903624607268877", "title": "最近实际项目中遇到的技术问题与解决思路", "desc": "距上一篇博客发布已经过去整整2个月。这两个月中发生了一些事情，比如离职，面试，入职等等，感触颇多。其实一次好的面试，即使没有成功入职也会有很多收获。 这次面试面了三家公司，拿了两家公司的offer，但是最让我中意的面试却没拿到offer，原因是下午去面试，精神状况不太好，有点疲…"}, {"id": "6844903960659116046", "title": "「译」一个案例搞懂 Vue.js 的作用域插槽", "desc": "作用域插槽是 Vue.js 中一个很有用的特性，可以显著提高组件的通用性和可复用性。问题在于，它实在不太好理解。尝试搞清楚父子作用域之间错综复杂的关系，其痛苦程度不亚于求解一个棘手的数学方程。 当你无法理解一个东西的时候，最好的办法就是在解决问题的过程中体会它的应用。本文将向你…"}, {"id": "6844903715585916935", "title": "3天学写mvvm框架[三]：浏览器端渲染", "desc": "通过之前的实践，我们已经实现了数据变动的监听与模板的解析，今天我们就将把两者结合起来，完成浏览器端的渲染工作。 首先我们来编写类：Vue。 el：实例的渲染将以此作为父节点。 data：一个函数，运行后将返回一个对象/数组，作为实例的数据。 tpl： 实例的模板字符串。 met…"}, {"id": "6844903693502906381", "title": "vue开发黑科技--利用引用类型的值处理复杂数据的编辑", "desc": "现在前端框架和之前的前端开发方式有一个重要的区别————基于数据驱动。我们不需要再去关注dom本身，而是将主要精力放在如何操作数据上面。实际开发中，可以抽象成 既然全部在完数据， 数据类型、算法就跑不掉了。 本片介绍一个基于引用类型的vue黑科技， 在使用vue开发的时候可以更…"}, {"id": "6844903606710190088", "title": "vue 2.x项目 vue-qriously 生成二维码并下载、cliploard复制粘贴", "desc": "近日，重构项目某一老模块时，有一个功能是生成二维码并下载，还可以复制链接。列表每项都有二维码、下载二维码和复制链接和列表上方总的二维码。 老模块是用的qrocode中文文档，qrcode github。 先想着新模块中是否有生成二维码的插件，看了下package.json。 有…"}, {"id": "6969076669831184397", "title": "vue中文章复制innnerHtml,到百度编辑器的方法", "desc": "今天继续是需求记录篇，去年做了一个公有云的vue项目，项目中有一个功能，就是把稿件中的dom内容，粘贴到百度编辑器中，然后在编辑器中基本上可以复原稿件中的样式。下面先看来看一下项目截图。 工具中复制之"}, {"id": "6906146787946725383", "title": "vue中，provide/inject + mixin 有什么妙用?", "desc": "相信大家在写业务的时候有追求的程序员都会把一个页面分为好几个组件这样就有解耦性、组件化虽然这样做固然好，但有时候非常麻烦，一个页面有非常多组件，通信就非常繁琐比如以下情景，我们就可以用provide/"}, {"id": "6844904127881805831", "title": "Vue你只了解$event吗？了解一下arguments", "desc": "需求：父组件接收子组件传递的多个参数并且需要接收的方法传入自己定义的参数下面以element-ui的上传组件为例正常是这么写的如果我要handleUploadProgress方法中添加自己定义的参数，"}, {"id": "6844903656417034247", "title": "vue+iview-admin 利用适配器模式改造eova(伊娃管理后台)菜单及路由", "desc": "vue+iview-admin利用适配器模式改造eova(伊娃管理后台)菜单及路由(1)简单效果展示改造完后效果eova及iview的部署略(日后再补充)菜单功能核心改造优化iview/src/rou"}, {"id": "6844903545985040392", "title": "前端每周清单第 46 期: 2017 Node.js / GraphQL / Vue.js 盘点，前端性能优化与可用性保障", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 Intel CPU 爆重大设计缺陷，浏览…"}, {"id": "6921285349503139854", "title": "element-ui表格组件table实现列的动态显示与隐藏", "desc": "在开发后台管理系统中，表格是经常用到的数据展示方式。然而，有时候表格展示的列过多，会出现一屏展示不下，需要手动滚动滚动条查看的情况。 其实，在系统实际使用的过程中，不同用户关注的列不同，并不是一定要展示所有的列。因此，可以开发一个能够配置表格需要展示的列的功能，这样只展示关注的…"}, {"id": "6901276641754873864", "title": "Vue Reactive源码🗣watch & watchEffect", "desc": "watchEffect作用：用来追踪响应式依赖，并在追踪的时候自动触发一次，后序检测到响应式依赖的话，会再次更新，注意所有的里面的响应式数据（ref\\reactive）都会自动被加入依赖中用法：传入一"}, {"id": "6917488116299202568", "title": "vue2核心原理(简易) - $set和$del笔记", "desc": "前言本章项目地址主讲$setvue的data里边声明或者已经赋值过的对象或者数组（数组里边的值是对象）时,不会更新视图这个时候可以使用$set(删除可以用$del)其实每个对象或者数组,都加了个dep"}, {"id": "6844903870703878158", "title": "观众老爷们，来试试这个用 Vue 撸的数据可视化后台吧", "desc": "P.S. 建议大家尽量自己注册一个账号(可以随便填一个密码)，如果用默认的测试账号，不要乱改东西，否则别人进来就没得看了，因为你做的任何改动都会保存到后端数据库里。 也不知道为什么，公司里对数据分析、数据可视化的需求越来越多。这部分需求有的来自数据分析师(如果公司有数据分析师的…"}, {"id": "6997693081801719839", "title": "[vue2]熬夜编写为了让你们通俗易懂的去深入理解vuex并手写一个", "desc": "理解state，mutations，actions，getters并去实现它 mutation必须是同步的 在 mutation 中混合异步调用会导致程序很难调试"}, {"id": "7005809080053252133", "title": "微信jssdk---h5分享封装", "desc": "说到微信分享，其实挺坑的，刚对接的时候，以为可以像app端一样，通过自己写好的actionSheet来取分享，后来仔细阅读发现，调用的分享竟然是微信自己右上角更多的那个分享，如果不写的话，右上角那三个"}, {"id": "6992859133888331783", "title": "LOLstyle-ui组件开发实战（二）—— Button组件(二)", "desc": "之前已经介绍了封装组件流程和自定义属性，现在完善button组件，向button组件中添加字体图标，绑定自定义事件。"}, {"id": "6997700173921009672", "title": "Vue3+TS+ElementUI搭建管理系统之MockJs数据实现表格分页", "desc": "Vue3+TS+ElementUI搭建后台管理系统之MockJs数据实现表格分页，ts中安装mock"}, {"id": "6999880195712745502", "title": "vue前后端分离解决跨域问题", "desc": "什么是跨域 当协议 、域名 、 端口中任意一个与当前页面的地址不同的就是跨域 最常见的跨域就是一个域名的网页中调用另一个域名的资源 为什么要跨域 为了安全起见 浏览器的两种同源策略 会造成跨域 DOM"}, {"id": "6997405847789764621", "title": "Vue3从0到1组件开发-系统组件：Modal对话框", "desc": "在项目开发中，无论是移动端还是PC端，Modal对话框大概是绕不过去的一个功能性组件吧？ 常用于重要消息提示，例如网络请求失败等信息"}, {"id": "6971111235588882462", "title": "预防家暴，☠️ 慎用 $listeners", "desc": "2021 年 5 月 31 日，没错，就是在 六一儿童节 的前一天。一宗 错综复杂、惊天地泣鬼神、惨绝人寰 的 家暴 未成年人的惨案，悄悄地发生了！ 欢迎来到 《JSChen 的新闻联播间》！"}, {"id": "6844904025272352775", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（一）", "desc": "Vue 是尤雨溪在 2014 年创建的一个前端框架，目前 Github Star 数高达 150K，是 Star 数最高的前端项目，并且 Vue 有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久地发展。 目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握…"}, {"id": "6844904071749451790", "title": "重整旗鼓，2019自结前端面试小册【Vue.Js】", "desc": "临近2019年的尾声，是不是该为了更好的2020年再战一回呢？ ‘胜败兵家事不期，包羞忍耻是男儿。江东子弟多才俊，卷土重来未可知’，那些在秋招失利的人，难道就心甘情愿放弃吗！ 此文总结2019年以来本人经历以及浏览文章中，较热门的一些面试题，涵盖从CSS到JS再到Vue再到网络…"}, {"id": "7002988417063583775", "title": "Vue 源码初探（六）数组依赖收集与触发更新", "desc": "思维导图 前言 上一节Vue 源码初探（五）对象异步更新nextTick()我们处理了对象频繁修改值，把多次操作进行合并处理，其中就是把依赖信息先收集起来放到微任务中一起执行 正文 给引用类型创建de"}, {"id": "6905922153234268168", "title": "【Vue质问清单】常在vue中游走，多问几个为什么", "desc": "看到这个实现，对于以后想要实现vue插件并且绑定生命周期，提供了一种很好的思路和方法，往往可以触类旁通，有意想不到的收获。 在 JQuery 时期，如果需要刷新 UI 时，需要先取到对应的 DOM 再更新 UI，这样数据和业务的逻辑就和页面有强耦合。 在 MVVM 中，最核心的…"}, {"id": "6976400439793172487", "title": "卷死了！再不学vue3就没有人要你了！速来围观vue3新特性", "desc": "一文入门了解vue3新特性 紧跟新技术的步伐，周一也开始学起了 vue3 。去年11月份的时候对 vue3 其实已经有所耳闻，但当时对 vue3"}, {"id": "6962052554859642916", "title": "webpack5（Module Federation）+vue3.0实现微前端", "desc": "基于webpack实现微前端服务，可以完全实现一个去中心化的应用部署群：每个应用是单独部署在各自的服务器，每个应用都可以引用其他应用，也能被其他应用所引用。"}, {"id": "6903690374158974989", "title": "马上就2021年了，你还不懂怎么在vue做单元测试？", "desc": "单元测试允许你将独立单元的代码进行隔离测试，其目的是为开发者提供对代码的信心。通过编写细致且有意义的测试，你能够有信心在构建新特性或重构已有代码的同时，保持应用的功能和稳定。 环境搭建好之后，就可以愉快的做vue单元测试了；这里会通过一个TodoList应用来简单介绍一下怎么在…"}, {"id": "6982049654657515550", "title": "简述Vue和React开发体验的异同（UI层）", "desc": "前言 最近刚加入新公司，组内的前端技术栈以vue为主，之前在上家公司写react会多一些，花了几个小时的时间重新过了一遍vue的文档，毕竟已经快三年没接触了。"}, {"id": "6939684549450268680", "title": "一个透传技巧，治好了我的重度代码洁癖", "desc": "透传是一个通讯层面的概念，指的是在通讯中不管传输的业务内容如何，只负责将传输的内容由源地址传输到目的地址，而不对业务数据内容做任何改变。 其实透传这个概念，我最早是从上面一个领导那里听到的，由于他是电气工程师出身，而硬件通讯这块用到透传还是挺多的。 当我听到透传这个词后，我感觉…"}, {"id": "6938221715281575973", "title": "手写Vue2.0源码（四）-渲染更新原理｜技术点评 ", "desc": "前言 此篇主要手写 Vue2.0 源码-渲染更新原理 上一篇咱们主要介绍了 Vue 初始渲染原理 完成了数据到视图层的映射过程 但是当我们改变数据的时候发现页面并不会自动更新 我们知道 Vue 的一个"}, {"id": "6989529331760365604", "title": "数据大屏六：组件开发思路", "desc": "概要：本文主要记录数据大屏中，容器组件，变换分类组件，面板条目滚动组件的开发思路以及用到的技术。 容器组件 1、resize事件调整屏幕宽高比。放大缩小，或者是屏幕宽度变化的时候，容器中的内容保持同样"}, {"id": "7000252707529785381", "title": "解决页面滚动, 🍖ant design的select框和选项分离问题, 同时理解ant的html设计技巧.", "desc": "通过解决我们也学一下ant的html/css设计技巧. 现象 滚动的时候, 这里\"负责人\"的选项和select框已经分离了. 我用的vue版本的, 我看了下react版本的api设计, 我想2个都会出"}, {"id": "6847902218713038862", "title": "使用husky + lint-staged助力团队编码规范", "desc": "husky 是一个为 git 客户端增加 hook 的工具。安装后，它会自动在仓库中的 .git/ 目录下增加相应的钩子；比如 pre-commit 钩子就会在你执行 git commit 的触发。 那么我们可以在 pre-commit 中实现一些比如 lint 检查、单元测试…"}, {"id": "6896450709621833735", "title": "一篇搞懂VUE自定义指令", "desc": "Vue自定义指令和组件一样存在着全局注册和局部注册两种方式。 注册局部自定义指令，通过在「Vue实例中添加」 directives 对象数据注册局部自定义指令。"}, {"id": "6844904168449146893", "title": "新鲜出炉的一款SpringBoot +Vue的考试系统", "desc": "新鲜出炉的一款SpringBoot +Vue的考试系统，支持多种题型：选择题、多选题、判断题、填空题、综合题以及数学公式。支持在线考试，教师在线批改试卷。 SpringBoot: SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的创…"}, {"id": "6844904205673578503", "title": "顺藤摸瓜🍉：用单元测试读懂 vue3 中的 provide/inject", "desc": "React Context API 提供了一种 Provider 模式，用以在组件树中的多个任意位置的组件之间共享属性，从而避免必须在多层嵌套的结构中层层传递 props。其围绕 Context 的概念，分别提供了 Provider 和 Comsumer 两种对象。 虽然 AP…"}, {"id": "6844903516771729416", "title": "钩子函数的运行机理", "desc": "为什么还要提到面向切面，我第一次听到这个词还是在写 java 的时候，它是 spring 的核心思想之一（不得不说，前端从石器时代发展到今天的工业时代，大量借鉴了后台的编程思想，所谓触类旁通，那个道理就是这么讲来着）。发挥想象力，所谓的钩子，是不是在框架工具的某个阶段，切一刀，…"}, {"id": "6844903612699820039", "title": "我常用的puppeteer爬虫api", "desc": "详细介绍请看gayhub,更新周期大约是一个月，本文是基于 v1.4.0写的，大致api是通用的。 本文总结了Puppeteer爬虫的主要用法。我的目标是，有了这篇文章，日常的一般爬虫使用就不需要去看官方文档了。 cnpm i -S puppeteer 用cnpm安装没有试过报…"}, {"id": "6971060812500713502", "title": "vue使用superMap超图api加载暗黑深色系天地图", "desc": "前言 可能在现实前端项目开发中，我们使用的是超图的api加载的超图的地图服务，然后客户要求可以做一个天地图和超图服务的切换，然后在大屏可视化方面会使用到蓝黑背景的天地图"}, {"id": "6966801376781271047", "title": "浅析和总结一下Vue中computed，watch的使用", "desc": "前言 目前使用vue也有一段时间了，埋头开发的时候也积累了不少困惑，当然，也积累了一些宝贵的经验。想动笔记录下Vue中的一些知识点，首先先聊聊computed和watch的一些基本点吧！"}, {"id": "6989564371332497422", "title": "vue源码之虚拟dom", "desc": "vue源码虚拟dom分析，从 vm._render()到vm.$createElement()到vm._update()到vm.patch()等一系列函数的作用分析"}, {"id": "6844904041802104845", "title": "手摸手教你解决重定向缓存问题", "desc": "发现webpack打包没有问题。 二、打包后的文件也没有问题。 三、打包后生成的index.html文件引入。 开始寻找解决办法，方法有很多，有前端配置的，也有后端配置的。 注：meta是tml语言head区的一个辅助性标签，其中的http-equiv字段定义了服务器和用户代理…"}, {"id": "6844903791574122504", "title": "基于vue-cli3快速发布一个fullpage组件", "desc": "想必大家都看过fullpage.js——这是一款非常好用的翻页插件。 通过查看vue-cli3官网了解，创建一个新的普通项目。 一开始要想别人如何调用我们写的组件，通过挂载vue实例方法（this.$alert）还是注册组件。答案自然是后者。我们希望别人可以这么使用~ 设计组件…"}, {"id": "6844903533049970695", "title": "浏览器里的黑天鹅：不可预知的前端变革点", "desc": "『黑天鹅』是这样的事件：难以预测、冲击性大，并且能马后炮地事后分析。少数的黑天鹅事件几乎能解释这个世界上发生的所有事情。难道前端领域的演化也不是循序渐进，而是黑天鹅式的吗？让我们换一种角度回顾一下历史吧… 许多史书、传记都以一种决定论的视角来阐述历史演化的必然性，但实际上对于生…"}, {"id": "6844903591325466637", "title": "前端简洁并实用的工具类", "desc": "本文主要从日期,数组,对象,axios,promise和字符判断这几个方面讲工作中常用的一些函数进行了封装,确实可以在项目中直接引用,提高开发效率. 1.常见利用循环和indexOf(ES5的数组方法,可以返回值在数组中第一次出现的位置)这里就不再详写,这里介绍一种利用ES6的…"}, {"id": "6991038527257460749", "title": "HR-05-组织架构模块", "desc": "组织架构模块 业务功能介绍 基本组件布局 头部布局 树形组件用法 树形组件关键属性 参数 说明 类型 可选值 默认值 data 展示数据 array — — props 配置选项，具体看下表 obje"}, {"id": "6991038388702806053", "title": "HR-04-路由配置", "desc": "路由配置 路由配置介绍 整理路由配置 删除多余的路由配置 **src/router/index.js** 搭建业务模块页面 通过命令快速创建相关目录 每个模块的内容，可以先按照标准的模板建立，如下所示"}, {"id": "6910506457331040270", "title": "业务组件库了解一下", "desc": "现状：一个toB项目内无可避免会涉及页面过多，如果各有各写会产生样式问题，实现问题，一份代码到处黏贴进行修改（代码大量冗余）。 解决办法：如上图结构，结合业务沉淀组件，提高复用度。 确定了有什么能力，接下来就开始实现了。 参考现有的组件库（element-plus，ant-de…"}, {"id": "6844903614121525262", "title": "🎂HeyUI组件库开发一周年🎉🎉", "desc": "毕竟，刚刚写了2个月的组件库，简陋的一塌糊涂。 当时只是不断的闷头写，下班写，周末写。 一年之后，heyui整个组件库可以说很稳定了，支撑着我们公司十来个线上的项目，虽然，中间遇到很多的问题，遇到很多的需求，总之，它现在在我眼中，挺完美的。 首页的文案，其实从第一版到现在，都没…"}, {"id": "6844903873052672013", "title": "「组件」设计一款Notice组件", "desc": "最近在使用Vue+TypeScript鼓捣自己的组件库，期间参考不少（抄😂）element，iview的源码。发现了一些常用的功能的背后，往往是复杂的实现。于是准备写一系列文章，介绍这些组件背后的原理。今天是第一篇，手把手带你实现Notice组件。 通常我们在使用iview或…"}, {"id": "6844903918359543815", "title": "使用 Vue 实现一个虚拟列表", "desc": "因为 DOM 性能瓶颈，大型列表存在难以克服的性能问题。 因此，就有了 “局部渲染” 的优化方案，这就是虚拟列表的核心思想。 下面逐一分解说明。 可视区域的计算，就是使用当前视口的高度、当前滚动条滚过的距离，得到一个可视区域的坐标区间。 算出可视区域的坐标区间之后，在去过滤出落…"}, {"id": "6844904131266625549", "title": "从剖析Vue-cli源码出发完整的React业务脚手架实践（一）——脚手架架构基础搭建", "desc": "这是一篇长期持续更新的React脚手架实践，为的是吸取Vue Cli的脚手架经验，通过我们习惯的插件-预设的思想去构造我们的React业务脚手架，这可能不是最好的脚手架的开发实践，但是一定是最完整的脚手架开发实践。 全套实践我们将通过现有的vue cli源码一一解说的方式进行，…"}, {"id": "6844903678646681607", "title": "通过vue-cli3构建一个SSR应用程序", "desc": "Vue.js构建的应用程序，默认情况下是有一个html模板页，然后通过webpack打包生成一堆js、css等等资源文件。然后塞到index.html中 更有好的SEO。由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。 Client Bundle，给浏览器用。和纯Vue前端…"}, {"id": "6979031900220293157", "title": "vue轮询解决方案", "desc": "轮询的理解     其实轮询的重点在于间隔多少时间执行一次，而并非循环本身。ajax是异步请求，从发起请求到接受到响应即为一个完整的过程，这个过程所需要的时间是无法预料的，说的极端点，若请求所需的时间"}, {"id": "6844903981957791757", "title": "手把手带你实现一个最精简的响应式系统来学习Vue的data、computed、watch源码", "desc": "记得初学Vue源码的时候，在defineReactive、Observer、Dep、Watcher等等内部设计源码之间跳来跳去，发现再也绕不出来了。Vue发展了很久，很多fix和feature的增加让内部源码越来越庞大，太多的边界情况和优化设计掩盖了原本精简的代码设计，让新手阅…"}, {"id": "6901087576195760141", "title": "关于Vue3获取当前组件实例的 getCurrentInstance 方法的补充", "desc": "在Vue2的各个组件中，我们频繁地使用 this ，即获取当前组件实例，是因为每个组件的数据变量、方法都要通过组件实例去获取。 1. 获取数据 2. 使用方法 3. 获取当前组件根元素 4. 子组件向父组件通信 5. 获取Vuex对象 大家不要依赖 getCurrentInst…"}, {"id": "6991082727227260965", "title": "比全局组件更高效，从Vant的Toast组件聊聊Vue插件的使用场景", "desc": "Vant的Toast组件写的比较有意思，最大的特点是简洁的函数式调用。本文将通过梳理Toast组件实现函数式调用的整套逻辑来介绍Vue插件的使用场景。"}, {"id": "6914198729482305550", "title": "在 vue3 中轻松实现 switch 功能组件", "desc": "编程语言里面，除了使用 if 语句来做条件判断，还有另外一个常用的就是 switch 了。 如果打印 slots 的话，你会发现可以得到一个对象，而 key 的值就是 slot 的名称，而 value 是一个函数，调用这个函数就可以获取到对应的 vnode。 setup 除了可…"}, {"id": "6844904021266792462", "title": "你可能会用的上的一个vue功能组件库，持续完善中...", "desc": "无论组件的dom位置在页面何方，会准确计算鼠标位置以及自动在右侧悬浮一个查看区域，并且当右侧位置超过边界后，查看区域会自动出现在左边。 boxSize: 设置放大镜主体框的大小，会自动在右侧生成一个与之同样大小的查看放大图像的悬浮框，默认500。 minImgUrl: 放大镜小…"}, {"id": "6989774092882673671", "title": "使用Webpack5搭建Vue开发环境项目实战！", "desc": "使用Webpak5.x + babel7.x 搭建前端项目开发环境，对比wepack 4.0版本的一些变化"}, {"id": "6844903976303869959", "title": "Vue.js 3.x 源码解析先导", "desc": "2018 年 6 月我在慕课网发布了 Vue.js 2.x 的源码解析课程 《Vue.js 源码全方位深入解析》，同时也开源了课程配套电子书。时隔一年多，Vue 官方也开源了 Vue.js 3.x，那么在不久的将来，我也会系统化地做 Vue.js 3.x 的源码分析，同时更新我…"}, {"id": "6907052603033518093", "title": "后台管理系统的权限以及vue处理权限的思路", "desc": "一般来说，在（后台）管理系统（最早的企业级的项目和网站的后台管理系统现在大部分人都叫后台管理系统）中才会有权限之说。权限分为功能级权限和数据级权限。这篇文章主要谈论功能级权限。 权限的意思不用再做解释。 表示不同的角色（或者用户）进入系统后，看到的功能不一样，或者说，可以操作的…"}, {"id": "6844904055400038407", "title": "武汉肺炎疫情地图(Vue版)", "desc": "此次肺炎疫情波及甚广，只能自封于家中看看新闻、打打游戏。 昨天看了山月大佬的《武汉肺炎疫情实时动态省市地图开发》心潮澎湃，决定拿起键盘照撸一个。开发时间较短，bug在所难免，各位大佬见谅。 定时执行 build-data.js，抓取最新数据。"}, {"id": "7001859942776995847", "title": "VUE3.0学习日记——你想知道的都在这里（持续更新中）", "desc": "前言 作为一名前端开发者，不可能不知道vue，而vue3.0的到来告诉我们，学习的脚步不能停，只要学不死，就往死里学 下面是我的关于Vue3.0的学习日记。"}, {"id": "6844904072768847886", "title": "Vue.js开发去哪儿网WebApp", "desc": "这个项目主要参考了去哪儿网的布局，完成了首页、城市选择页面、详情页面的开发。 景点详情页面：实现公用的画廊组件，以及递归展示的列表组件。 Vuex: 专为 Vue.js 应用程序开发的状态管理模式。 Vue Router: 是 Vue.js 官方的路由管理器。 vue-awes…"}, {"id": "6844903918313406472", "title": "Vue中keep-alive的深入理解和使用", "desc": "在平常开发中，有部分组件没有必要多次初始化，这时，我们需要将组件进行持久化，使组件的状态维持不变，在下一次展示时，也不会进行重新初始化组件。 也就是说，kee-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染 。也就是所谓的组件缓存 在2.1.…"}, {"id": "6997951204214997006", "title": "【VUE】.native修饰符和非父子组件间的传值", "desc": "给组件绑定原生事件使用修饰符.native ； 非父子组件间的传值：发布订阅模式（又称为：总线机制/Bus/观察者模式)。"}, {"id": "6981955767020552223", "title": "vue2实现markdown编辑器，实现同步滚动，实时预览等功能", "desc": "vue2实现markdown编辑器，实现同步滚动，实时预览等功能，超棒的哦。。v-md-editor"}, {"id": "7000733414315786276", "title": "Vue 源码初探（四）依赖（对象）收集的过程", "desc": "思维导图 前言 上一篇文章里面我们已经做完了单个根组件数据到页面的渲染过程。Vue 源码初探（三）单组件挂载（渲染） 。 现在我们来做一件事情，更改属性之后手动调用_update()函数让页面触发更新"}, {"id": "6994732892664365070", "title": "Vue系列2 - vue多项目间跳转保存用户解决方法 | 8月更文挑战", "desc": "这是我参与 8 月更文挑战的第 9 天，活动详情查看： 8月更文挑战 1.背景：多个vue前端项目需要组合成一个大系统，期间包括主系统向子系统间的跳转以及传值，尤其是需要把用户信息或者用户token传"}, {"id": "6985398971728396295", "title": "nextTick 原理解析", "desc": "nextTick 是什么 $nextTick：根据官方文档的解释，它可以在 DOM 更新完毕之后执行一个回调函数，并返回一个 Promise（如果支持的话） 这块理解 EventLoop 的应该一看就"}, {"id": "6997707785941024799", "title": "跨域-Vue-Cli配置代理转发", "desc": "跨域-Vue-Cli配置代理转发 目标 通过配置vue-cli请求代理解决开发环境下的跨域问题 vue-cli中集成的跨域解决方案 具体有两步： 在vue.config.js中配置devServer "}, {"id": "6970603494646497311", "title": "天热了，给网站换套清凉的肤色吧", "desc": "文件引入顺序需要特别注意： 引用less覆盖样式必须要放在index.html中的head标签之后。因为项目中使用的ant-design-vue会把样式加载到head标签里最后，所以样式必须要在an"}, {"id": "6908748150719299598", "title": "使用JS将聊天记录聚合在一起", "desc": "今天在给我开源项目的聊天记录添加消息发送时间展示时，正好遇到了这个问题，一开始想不明白应该如何处理这些数据，后来经过一番思考后，终于有了实现思路，将其实现了，本文就跟大家分享下我的实现思路以及过程，欢迎各位感兴趣的开发者阅读本文。 观察上方数据，我们发现：每个消息对象都有一个c…"}, {"id": "6992161407580143646", "title": "Vue3异步数据加载组件：suspense", "desc": "suspense 组件是VUE3新增特征之一，对处理异步请求数据非常实用，本文通过简单的实例介绍其使用方法。"}, {"id": "6930413268376748045", "title": "Vue nextTick彻底理解", "desc": "我们对Vue中data数据的修改会导致界面对应的响应变化，而通过nextTick方法，可以在传入nextTick的回调函数中获取到变化后的DOM，讲起来可能还是有点梦幻，下面我们直接使用n"}, {"id": "6951302450892521480", "title": "【流莺书签】从零开始搭建一个Vite+Vue3+TS的项目", "desc": "流莺书签,一个用来收藏网站的项目 使用Vite+Vue3+Ts进行开发,具有书签、标签的增加,删除,修改,一键导入,导出配置,自动获取网站图标、标题等功能 你一定会喜欢的!"}, {"id": "6916303253487484942", "title": "【前端工程化基础 - CLI 篇】Vue CLI 是如何实现的", "desc": "关注公众号玩相机的程序员，第一时间阅读最新文章。 Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供了终端命令行工具、零配置脚手架、插件体系、图形化管理界面等。本文暂且只分析项目初始化部分，也就是终端命令行工具的实现。 0. 用法 目前 Vue CLI 同时…"}, {"id": "6844903919764635655", "title": "Vue - 渲染函数render", "desc": "简单的说，在vue中我们使用模板HTML语法来组建页面的，使用render函数我们可以用js语言来构建DOM。因为vue是虚拟DOM，所以在拿到template模板时也要转译成VNode的函数，而用render函数构建DOM，vue就免去了转译的过程。 当使用render函数描…"}, {"id": "6977135865730433038", "title": "卷不动也得继续学！紧跟vue3的步伐，再来get一波进阶新特性！", "desc": "之前写了两篇文章谈论 vue3 的新特性，然鹅……周一最近又 get 到了几个比较进阶的新特性，比如： vue2 用 watch ， vue"}, {"id": "6892921669149523975", "title": "我开源了一个基于Vue的组织架构树组件", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 就拿我 小智 来说，如果有人对齐我的 KR 就放到我的右边，如果是我对齐了谁的 KR，就放到我的左边，类似一个上下级的关系，所以这里我用两棵树来表示左边与右边的关系。 整棵树应该有一个全局的状态，用来管理从外部…"}, {"id": "6844904129668579341", "title": "Vue开发掘金WebApp(仿掘金App)", "desc": "掘金是我见过几个技术博客网站中最好用的的一个，相比于某csdn和某简书真的是良心太多，页面简洁颜值高，广告少干货多，不像某csdn，广告随处可见，水货文章特别多，文章质量参差不齐。掘金就不一样了，没有两把刷子都不好意思发表文章(本菜属于脸皮特别厚的，一把刷子都没有，但厚着脸皮发…"}, {"id": "6927919518777868295", "title": "Vite2搞Vue2？这题我会", "desc": "Vite2 进一步和Vue解耦，变得越来越技术无关了，Vue3，React项目一样跑。 那问题来了，Vite2能不能跑Vue2全家桶？官方的vite 模板中没有vue2的身影。 经过试验，答案是能。这次分享~~不讲已经过时的 Vite1 原理，（真是学不动了要）~~，讲应用：用…"}, {"id": "6984708706231386119", "title": "基于Vue的架构设计", "desc": "前言 架构包含非常广泛的概念与内容，架构的核心目的是为了提高效率、降低成本、保障质量， 同时需要结合实际业务情况综合考虑，为未来提供可持续发展空间。"}, {"id": "6986173429888057380", "title": "Electron+Vue3 MAC 版日历开发记录(31)——Icons Font 制作", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6959851018469244965", "title": "Vue 3.x + Typescript + Vite 踩坑指南", "desc": "最近在迁移开源项目 vue-admin 到最新技术上的时候，遇到了一些技术隐形的问题，毕竟是最新的技术点，难免有些疑难杂症，所以分享给有需要的朋友 预览效果 vue-router vue-router"}, {"id": "6844903646535106568", "title": "手把手教你用原生JavaScript造轮子（一）——分页器（文章内容已过期，可不看）", "desc": "日常工作中经常会发现有大量业务逻辑是重复的，而用别人的插件也不能完美解决一些定制化的需求，所以我决定把一些常用的组件抽离、封装出来，形成一套自己的插件库。同时，我将用这个教程系列记录下每一个插件的开发过程，手把手教你如何一步一步去造出一套实用性、可复用性高的轮子。 要开发一个J…"}, {"id": "6979039113689169957", "title": "Vue 3.0到底怎么变快？🚀", "desc": "自从Vue3.0发布后一直想要学习一下新特性，谁曾想到一直鸽到了现在。面对前端行业不学习就被淘汰的内卷环境什么都要学起来呀，学的时候索性记录总结一下..."}, {"id": "7002521802232725518", "title": "学习Vue 做一个简单的Todo List", "desc": "免费下载 项目下载链接 一、创建Vue项目 创建项目的方式有很多，这就简单的说两种吧： 1、命令行创建 win+r 输入cmd 回车 cd进入你要创建的目录 输入下面的命令，遇到需要确认的地方按回车就"}, {"id": "6844903689765781517", "title": "用Vue+Node从零开始实现拼多多前后端商城项目 — 记录踩坑之旅（上篇）", "desc": "1. web端-项目部分效果演示 项目整体结构用vue-router搭建的全局路由，一级版块包括：首页、推荐、搜索、聊天、个人中心、登录/注册、购物车等，二级版块我主要做了首页的二三级购物流程页面。基本上把电商项目的整个流程跑通了。 2. 服务器端 服务器端我主要用的是Node…"}, {"id": "6979142855738523679", "title": "解放生产力，自动化生成vue组件文档", "desc": "文本介绍了为什么需要vue组件文档自动生成工具，以及如何对vue组件进行解析，从解析的结果中如何获取到我们想要的信息，进而利用获取到的信息生成文档。"}, {"id": "6998042196704395272", "title": "vue-cli3 浏览器兼容 ， ie兼容", "desc": "问题 vue项目需要考虑浏览器兼容，太烦了 参考 解决 项目基于 vue-cli3 package.json browserslist 配置 .browserslistrc 文件配置 更多 brows"}, {"id": "6997587279468314660", "title": "Vue CLI中 模式和环境变量详解", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 在实际项目的开发中，我们一般会经历项目的开发阶段、测试阶段和最终上线阶段，每一个阶段对于项目代码的要求可能都不尽相同，那么我们如何能够游刃"}, {"id": "6844903874873032711", "title": "vue-cil 3.0 配置说明", "desc": "是 Vue CLI 项目中一个重要的概念。默认情况下，一个 Vue CLI 项目有三个模式： > 一般性vue项目，我们都会把一些框架包，给抽离出来。例如:"}, {"id": "6963955628481970212", "title": "在 Vue 中用 Axios 和异步模式请求API", "desc": "Axios 是 Javascript 中最受欢迎的 HTTP 库之一，我们可以用它在 Vue 程序中调用API。 在本文中我们用 Vue 3 和 Axios 写一个侃爷语录小应用，侃爷是国内粉丝对美国"}, {"id": "6984222389684944909", "title": "Vue两个同级组件传值", "desc": "Vue组件之间是有联系的，避免不了组件之间要互相传值， 父给子使用v-bind绑定自定义属性和使用props来接受 子给父使用@自定义事件='函数' this.$emit('自定义事件','要发送的内"}, {"id": "6992489382443761701", "title": "创建自己的Vue组件", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 1 概述 相信很多前端小伙伴都写过不少Vue的组件, 其中必然有可以沉淀下来的内容 那么如何创建一个自己的Vue组件呢? 先来列举下本教程必"}, {"id": "6854573222415826957", "title": "用typescript打造一个性能强悍的web聊天室", "desc": "😛 闲暇时间想做一个聊天室来巩固前端技能，于是在2020年6月24号就开始了阿童木聊天室的开发之旅。 😈 项目采用全 typescript 开发，这是为了以后的功能迭代打基础。当然，我本身也是很喜欢 typescript 的。 Typescript：JavaScript 的…"}, {"id": "6999655130597589028", "title": "Vue 实现用户注册，前端正则校验以及密码强度实时显示", "desc": "前言 页面样式展示 需求分析 除了默认的性别为男以外，其他字段都是必填项，否则点击注册按钮时不予提交，与此同时提醒用户填写，并将鼠标聚焦到对应未填写的输入框上，填写格式错误时亦是如此。 例如： 年龄通"}, {"id": "7004580246208905247", "title": "vue源码中callHook的for循环", "desc": "先上代码： vue源码中for循环的代码，为什么会有循环，先定义循环的长度之后在进行比较？？ 带着问题去解决，验证问题回归。 此两份代码有什么去区别吗，那就让我门来验证一下。"}, {"id": "6976165203180257288", "title": "小白视角：vue3自定义指令开发，一步步那种, 看不懂打我好吧", "desc": "注意事项：写法从extend替换成了createApp 阅前须知： vue2 和 vue3 的自定义指令方式有点不一样 vue2 是 extend 去挂载dom元素 vue3 不再支持 extend"}, {"id": "7003214286675771399", "title": "vue开发规范总结", "desc": "一、组件封装 尽量将独立的功能封装为一个组件，组件粒度尽量小，方便其他组件复用； 二、组件定义 Vue 组件使用 TypeScript 进行开发，使用 vue-property-decorator 来"}, {"id": "6844903920037281805", "title": "Vue 插槽(slot)使用(通俗易懂)", "desc": "因为在2.6.0中，具名插槽 和 作用域插槽 引入了一个新的统一的语法 (即v-slot 指令)。它取代了 slot 和 slot-scope，并且现在网上都说的是一些老版本的内容，官方文档不太容易理解，所以就整理了一篇有关于插槽(slot)使用的文章 如果<test>中没有包…"}, {"id": "6995478754571059237", "title": "Vue Router Next", "desc": "这是我在学习 Vue Router Next 时做的笔记，除了一些常见的使用必备基础知识，还包括一些需要注意的细节。"}, {"id": "6978069303438344205", "title": "Vue3.0--生命周期、获取dom和nextTick", "desc": "这是我参与更文挑战的第24天，活动详情查看： 更文挑战 Vue3.0--生命周期、获取dom和nextTick"}, {"id": "6993890112069173255", "title": "Vue3打造SVG设计器+图标库", "desc": "在Web开发中常常会用到SVG图标，下面就是如何用Vue3来打造一个自己专属的SVG设计器+图标库。"}, {"id": "6993361886641127455", "title": "手把手教你实现vue数据双向绑定（上）", "desc": "点击这篇文章，手把手教你实现一个简易的vue，它实现了数据双向绑定，模板编译等。想要了解vue数据双向绑定的小伙伴一定不能错过~"}, {"id": "6844904120168661000", "title": "基于vue-cli3搭建一个后台管理系统框架", "desc": "选择是的话，会让你填写一个预设文件的名字，下次创建一个vue项目，可以直接使用这个预设文件，而无需再进行配置。 由于现在的目录结构不利于后期的开发，现在我们增加部分文件，待后续可以进行功能扩展。在src文件下：新建api文件夹，router文件夹，utils文件夹，views文…"}, {"id": "6991615745167720484", "title": "Vue3 watchEffect 源码学习 | 8月更文挑战", "desc": "前言 在看 reactive 源码的时候发现单独调用 reactive 函数并没有收集依赖，那么什么时候才会收集依赖呢，我把之前的 demo 改了改，加入了 watchEffect 之后发现在 wat"}, {"id": "6945483410139775012", "title": "真正的手摸手带你实现 vuejs 组件库", "desc": "我们已经成功解析了组件。但是发现了一个问题，我们好像没有样式"}, {"id": "6985050043266891790", "title": "Vue之全局水印", "desc": "【需求】系统内页面显示水印，登录页面没有水印（退出登录时，登录页面不会显示水印） 1.创建水印Js文件 2.引入操作 2.1 在App.vue中引用或其他页面 2.2 在router配置文件中引用"}, {"id": "6989113748682178597", "title": "vue中的生命周期", "desc": "阶段一 创建期 beforeCreate 执行之前初始化事件以及生命周期 Vue实例在内存中刚被创建，数据对象（data）和方法（methods）未初始化； 在这个钩子函数中，不能获取data中的数据"}, {"id": "6989258543098494989", "title": "从无到有浅聊Vue3的进步", "desc": "从无到有浅聊Vue3的进步 重点： vue.js是什么 vue的优点 vue3的进步 - vue.js是什么 ​ 官网描述：vue是一套用于构建用户界面的渐进式框架，可以自底向上逐层应用，Vue 的核"}, {"id": "7001359343912386574", "title": "Vue3.0新特性", "desc": "Vue3.0新特性 响应式原理vue2的defineProperty变为Proxy 概述： 对象： 会递归得去循环vue得每一个属性，（这也是浪费性能的地方）会给每个属性增加getter和setter"}, {"id": "6984447108627562527", "title": "网页聊天框设计与实现", "desc": "成品截图 项目特色 集成微信官方表情包 完整的实现文档 Vue3 聊天框基本功能 阅读时长 5min 你将收获： 微信官方表情包思路 消息框以及消息发送表情展示思路 消息左右聊天展示思路 多余内容展示"}, {"id": "6990979993568280612", "title": "Vue3学习 --- 计算属性和watch", "desc": "computed 和 watch能实现对数据的监听。计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。watch是侦听一个特定的值，当该值变化时执行特定的函数。"}, {"id": "6844903575571660807", "title": "vue项目国际化 vue-i18n 使用", "desc": "当切换语言设置的时候，\b可以自动切换整个项目的文字显示。 发现Vue项目中有对应的组件vue-i18n，\b而且对项目的代码修改不大，于是就使用了这个组件去修改项目中的代码。 一般一个项目中使用都是通过安装包的方式去运行的，script引入的较少。 还有一些其他的用法，具体的请参…"}, {"id": "6844903829188640781", "title": "用vue2.6实现一个抖音很火的【时间轮盘】屏保小DEMO", "desc": "当然实现这个效果，前端的角度来说，有很多，这里介绍最简单的，达到这个效果纯粹是元素圆性布局，如果仅仅是这样肯定没有达到各位老铁心理需求，所以既然，做了肯定是要做一个麻雀虽小五脏俱全的小demo,于是就把vue全家桶用上带设置的小项目。接下来就一步一步带各位从0到1构建这个小东西…"}, {"id": "6856718746694713352", "title": "【译】为什么不需要在Vue3中使用Vuex", "desc": "Vuex是一个很棒的状态管理库，它简单易懂，且与Vue集成良好。为什么不直接使用Vuex？因为即将发布的Vue3公开了底层的响应式系统，并引入了构建应用程序的新方法。新的响应式系统功能强大，可用于共享状态管理。 在某些情况下，多个组件之间数据共享困难，以至于需要集中的状态管理。…"}, {"id": "6984972031599050788", "title": "3x3 精读Vue官方文档 - 插件", "desc": "精读 Vue 官方文档系列 🎉 定义插件 插件通常用来向 Vue 添加全局功能或资源： 添加全局方法或者 property。 添加 Vue 实例方法（添加到 Vue.prototype）。 添加全局的"}, {"id": "6982829199505489927", "title": "axios 之cancelToken原理以及使用", "desc": "在真实项目中，当路由已经跳转，而上一页的请求还在pending状态，如果数据量小还好，数据量大时，跳到新页面，旧的请求依旧没有停止，这将会十分损耗性能，这时我们应该先取消掉之前还没有获得相应的请求."}, {"id": "6976422752416694302", "title": "Vue-动态组件&异步导入", "desc": "动态组件搭配异步导入作为webpack编译组件的基础，提高代码可读性的同时使项目更加轻量且简洁。本文介绍在Vue项目开发中，动态组件、异步导入过程及实践。"}, {"id": "6950939562872930341", "title": "浅谈 Vue 的数据双向绑定", "desc": "前言MVVM是一种软件架构模式它将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开而vue.js 则是一个轻巧、高性能、可组件化的 MVVM 库，拥有非常容易上手的 API，它是"}, {"id": "6951239016004091911", "title": "一文带你了解vue之虚拟dom", "desc": "在面试的过程中，可能也会被问到对虚拟dom的理解，像这种面试题是比较宽泛的，面试官想知道你到底知道多少？既然是理解，那就只能是知无不言言无不尽,尽量组织下语言多说点，这样才显得专业素养比较高，接下来，"}, {"id": "6993959947444682759", "title": "vue-router工作中常用基础总结", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 vue-router官方文档 router的使用 动态路由 什么是动态路由？ 动态路由就是可以接收参数数据的路由形式，路由地址的一部分是会发"}, {"id": "6994808254454988807", "title": "Element 2 组件源码剖析之Tag标签", "desc": "组件 Tag 多用于标记和分类。 本文将深入分析组件源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "6993591932941254664", "title": "基于ElementUI的快速开发入门分享", "desc": "本次分享的对象面向非专业前端的开发人员，如测试/后端等有时需要自己完成前端页面，其对前端技术不需深入了解，只需要可以根据文档快速开发前端页面的。"}, {"id": "6844904008016986120", "title": "Vue实现图片与文字混输🔥", "desc": "用多了JQuery，习惯了使用JQuery的API操作DOM，几乎忘记了原生JS对DOM操作，今天在项目中遇到了文字和图片混输的情况，第一个想到的办法是用textarea实现，结果发现实现不了图片输入，然后想着找个富文本编辑器的插件实现，深思熟虑之后，我的需求好像也没那么复杂，…"}, {"id": "7002839600523804708", "title": "vue组件间通信方式", "desc": "props/ $emit 1. 父组件向子组件传值 子组件在props中创建一个属性，用来接收父组件传过来的值； 父组件中注册子组件； 在子组件标签中添加绑定子组件props中创建的属性； 把需要传给"}, {"id": "6982341478747996167", "title": "在 Vue3中，封装一个 router-links ,支持内外链接都能跳转！", "desc": "<router-link> 标签是用于在Vue应用程序的不同页面之间跳转，但它不是跳转到外部链接，相反，我们一般使用 <a> 标签。 也许只有我这么认为，但很多时候，我无法跟上这种差异。"}, {"id": "6996967683489497118", "title": "vue 响应式学习笔记", "desc": "一、响应式原理初体验 vue 响应式的核心是数据驱动视图，那怎么做到数据发生变更，从而使视图发生变化那？ 如果有能够监听数据变化的 API 即可实现，ES5 提供了 Object.defineProp"}, {"id": "6909295963764965389", "title": "【Vue移动端】实现 字体大小 自适应", "desc": "首先我们知道，loaders 装载器的运行顺序是 从后往前；pulgins 外挂的 执行顺序是 从前往后。"}, {"id": "6844903669314355213", "title": "掘金 AMA：我是 Vue.js 作者--尤雨溪，你有什么问题想问我？", "desc": "掘金 AMA 第七期嘉宾是 Vue.js 作者--尤雨溪。 大家好，我是 Vue.js 的作者尤雨溪，目前是全职独立开源开发者。过去曾就职于 Meteor 和 Google，毕业于 Parsons 设计学院。 大家知道我应该都是通过 Vue.js，借这次掘金 AMA 机会，我希…"}, {"id": "6963091928137072671", "title": "使用原生js通过缓动函数实现抽奖转盘动画", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 前言 最近接到抽奖转盘活动页开发的需求，由于转盘样式UI比较特殊，使用开源的组件又比较难定制"}, {"id": "6993225790917705742", "title": "vue3性能优化关键点浅谈,让你面试侃侃而谈｜ 8月更文挑战", "desc": "vue3已经上线很长时间了,相信很多公司已经陆续开始使用vue3,未来相信也会越来越多.如果好比vue2是一家公司,vue3就是一家拥有后台管理的公司."}, {"id": "6943020826627145735", "title": "80行代码实现Vue骨架屏🏆", "desc": "作为spa中路由切换的 loading, 结合组件的生命周期和ajax请求返回的时机来使用.（ 作为loading 使用）。作为与用户联系最为密切的前端开发者，用户体验是最值得关注的问题。关于页面loading状态的展示，主流的主要有loading图和进度条两种。除此之外，越来…"}, {"id": "6844904196358029320", "title": "学习vue3的新姿势（vite的使用及源码流程分析）", "desc": "尤大发布vite也有段时间了， 看着vite发展如此迅猛， 我左思右想 决定还是蹭波热度。在上一篇vue3尝鲜中， 调试项目的过程有点繁琐， 接下来咱们就一块看看怎们用vite来学习vue3， 并分析一下 vite 他到底帮咱们干了些什么事。 都知道vite🐂🍺， 那到底怎…"}, {"id": "6844903729171283975", "title": "前端er，你真的会用 async 吗？", "desc": "现在已经到 8102 年的尾声了，前端各方面的技术发展也层出不穷，VueConf TO 2018 大会 也发布了 Vue 3.0的计划。而在我们（我）的日常中也经常用 Vue 来编写一些项目。那么，就少不了 ES6 的登场了。那么话说回来，你真的会用 ES6 的 async 异…"}, {"id": "6974223764296826911", "title": "Vue - The Good Parts: reactivity响应式", "desc": "大家都比较清楚 Vue 中包含了一个非侵入性的响应式系统，可以说这是 Vue 的最基础最核心的一个特性了，基于这套系统，我们才实现了修改数据视图就会跟着响应进行更新，很直接、很自然"}, {"id": "6844903496102199304", "title": "性能优化之组件懒加载: Vue Lazy Component 介绍", "desc": "这篇文章分享了从遇到前端业务性能问题，到分析、解决并且梳理出通用的Vue 2.x 组件级懒加载解决方案（Vue Lazy Component ）的过程。 问题起源于我们的一个页面，下面是这个页面的截图和初次请求的瀑布图。 初始加载的资源过多导致在 domInteractive …"}, {"id": "6949441502321836046", "title": "在Vue中实现Svelte的Defer Transition", "desc": "最近观看了Rich Harris的<Rethinking Reactivity>视频，惊叹于Svelte框架的高效同时，还发现了Vue所不具备的一些关于动画的原生支持—defer transition"}, {"id": "6999131418731233287", "title": "vue3学习 --- 组件高级补充", "desc": "组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码，提升了代码的可复用性。组件系统让我们可以用独立可复用的小组件来构建大型应用。"}, {"id": "6844904019589070856", "title": "看了多篇Vue内核文章原理还是不太明白，看看这篇试试？", "desc": "切换到仓库的第一个commit，自己运行运行，尝试着去看一看代码，自己先理解理解，断点调试调试。然后再来看这篇文章代码中写的注释，遇到不太理解的再来看看这篇文章，看看是不是能够更易于理解些。代码真的已经简化到不能再简化，总计才150行左右，仔细看你一定能理解。第一个commit…"}, {"id": "6844903782371819527", "title": "全新版本仿网易云音乐来啦", "desc": "在前端技术领域中，我们可以切身感受得到技术的更新、变革的速度是非常快的，所以工程师们都会需要时常关注和学习一些新技术、新标准。 因为在工作中负责项目的技术栈相比于业界来说，算比较落后了，所以自己动手来开发一个音乐类 web app，可以尝试一些新技术栈，或者往一些特定方向深挖学…"}, {"id": "6844903597461733389", "title": "Hexo已经看腻了，来试试VuePress搭建个人博客", "desc": "先简单介绍一下VuePress，这是尤大在2018年4月份发布的一个新轮子。 一个基于 Vue SSR 的静态站生成器，本来的目的是爽爽的写文档，但是我发现用来撸一个人博客也非常不错。 你可以跟着文档上的例子自己玩一玩，不过由于VuePress的文档也是用VuePress来实现…"}, {"id": "7000198869300543501", "title": "[Vue源码]--响应式（双向绑定）原理（逐行注释）", "desc": "vue也是一样，平时开发知道怎么用就行，但是突然出现一个与预期结果不符的情况，掌握一些源码的知识可以帮你快速定位问题；另外一方面，面试也开始偏向源码，你不会，那么你就比别人落后。为此，我也得抽时间学习"}, {"id": "6937193963405180936", "title": "vue3 + ts 初体验", "desc": "自从去年尤大大发布 vue3.0 之后，已经过去了大半年。前不久高产的尤大大又发布了 vite2.0，让我等搬码仔终日惶恐不安，因此就想对 vue3 进行探索学习，想了解相较于 vue2.0 哪些地方做了改变，以及新增了哪些特性。我先大体阅读了一下 vue2.0 迁移指南，然后…"}, {"id": "6982179081626320910", "title": "Vue 系列之事件处理", "desc": "前言 我第一次看 Vue 的官方文档已经是几年前了，第一次真的是认真研读了一次，后来在学习工作中遇到忘记的地方会翻到对应的地方扫几眼，再也没有完整且认真地研读过了。 最近不忘初心重学 Vue..."}, {"id": "6923528456303017998", "title": "vue3 实战总结", "desc": "。。。。在大型项目的长期维护与迭代中，ts所有的特性都能很好的满足这个场景 链接vue3 模板,正是因为使用模板语言，其标签的固定性可以容易识别出代码块与vue变量才能进行标记和方法缓存，减少对象创建这是提高diff算法效率的基础，比jsx中变量识别代码块更简单。编译优化还有其…"}, {"id": "7004051353660031013", "title": "通过vue-cli 创建 vue 项目 的两种方式", "desc": "一、通过终端命令进行创建 1. 安装 vue 脚手架 yarn global add @vue/cli 2. 通过 vue 脚手架创建项目， 在终端中输入 vue create project（pro"}, {"id": "6994094844897411080", "title": "Vue 数据响应式的理解", "desc": "什么是响应式？ 就是你操作对象，对象就会给你一定的反应,这就是响应式。所以数据响应式就是你操作数据，数据就做出相应的反应。 比如：修改了vue 中data 的数据，视图中的data数据就会被直接修改。"}, {"id": "6981080604553003038", "title": "深入理解配置选项之data和methods", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第5篇，关于配置选项data和methods，一起来看看吧~~~~"}, {"id": "6991765115150270478", "title": "写给vue转react的同志们（4）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "7003012653597605925", "title": "Vue2源码系列-9张图搞懂diff算法", "desc": "目录 又来到了激动人心的 diff 环节 使用 Virtual Dom 的框架，一般的设计思路都是页面等于页面状态的映射，即 UI = render(state)。 在进行页面更新的时候真实 DOM "}, {"id": "7004637949195354125", "title": "Nuxt的日志记录分析实践", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 为了应对Chrome对Flash播放的限制，在2020年我们对Bigo Live直播官"}, {"id": "6844904113587634184", "title": "为什么 Vue 中不要用 index 作为 key？（diff 算法详解）", "desc": "Vue 中的 key 是用来做什么的？为什么不推荐使用 index 作为 key？常常听说这样的问题，本篇文章带你从原理来一探究竟。 本文的结论对于性能的毁灭是针对列表子元素顺序被改变、或者子元素被删除的特殊情况，提前说明清楚。 那么它的 vnode 也就是虚拟 dom 节点大…"}, {"id": "7003986861345472525", "title": "# 手写Vue3 reactive & ref 及对Vue3的响应式原理深度探究", "desc": "通过对Vue3 Ref和Reactive原理的编写(实现一个自己的ref和reactive)探究Vue的响应式原理"}, {"id": "6997198017438679047", "title": "前端：vue3+ts，后端：koa2+jwt，实现登陆功能（后端部分下篇）", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 # 前端：vue3+ts，后端：koa2+jwt，实现登陆功能（后端部分上篇） 1. 在routes里面，创建一个user.js文件，用作"}, {"id": "6976679225239535629", "title": "敲黑板！vue3重点！一文了解Composition API新特性：ref、toRef、toRefs", "desc": "一文了解Composition API新特性：ref、toRef、toRefs 在上一篇文章中，我们初步了解了vue3的新特性，今天，我们将延续C"}, {"id": "6996964762902855687", "title": "实现一个具有拖拽功能的跑马灯", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 需求分析： 需要提供一个组件，可以根据子元素的宽度，自动决定是否进行滚动(跑马灯功能) 滚动"}, {"id": "7004833974652502047", "title": "从0开始搭建一个可用的vue3-webpack5-template（二）", "desc": "前言 在第一篇文章中，我们搭建了一个基于webpack5的vue3项目，现在我们就开始对这个乞丐版配置进行完善。"}, {"id": "6844904190481793032", "title": "30张脑图带你从零开始学VUE｜VUE基础知识篇", "desc": "另外笔者也成功升到了3级😄 ；既然大家都没什么要求，那本芝麻就偷偷的当作什么都没发生过了（就这么没有节操。。哈哈哈哈）"}, {"id": "6992134610310135838", "title": "6张脑图带你了解Vue3中的过渡和动画 | 附高清原图", "desc": "📢以图的形式，言简意赅的总结Vue3中过渡和动画相关知识，附原图🖼️，可以方便你按照自己的想法二次修改，欢迎阅读👇"}, {"id": "7005820258749530149", "title": "中秋之element部分技巧总结", "desc": "“我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛” 1、element的时间选择提交的格式为Fri Sep 07 2018 00:00:00 GMT+0800 (中国标准时间) 这记载date"}, {"id": "6996724371859439630", "title": "前端需要懂得的后端知识之JWT", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 在大多数前后端分离的项目中，JWT 是常见的一个认证标准，特别适合用于分布式站点的单点登录场景。 JWT 全称是 JSON web tok"}, {"id": "6916298446638940173", "title": "为什么 Vue3 选择了 CSS 变量", "desc": "CSS 变量又称为 CSS 自定义属性，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： --main-color: black;），由 var() 函数来获取值（比如： color: var(--main-color);） 为什么选择两根连词线（--）表示？…"}, {"id": "7005362899933724685", "title": "Vue（v2.6.14）源码解毒（二）：初始化和挂载", "desc": "初始化流程 new Vue 我们在使用 Vue 的时候，首页就是先 new Vue(...) ；在上一章中通过分析构建流程，我们得出入口文件 src/platforms/web/entry-runti"}, {"id": "6992977372542681101", "title": "Vue3从0到1组件开发-基础组件：Icon图标库", "desc": "在这个快乐的时代，一个好的项目会少了图标的身影？那么如何在自己的项目中做一个快乐的图标组件，脱离被别人扼喉的情况呢？"}, {"id": "6844903833160646663", "title": "面试官：自己搭建过vue开发环境吗？", "desc": "前段时间，看到群里一些小伙伴面试的时候被面试官问到这类题目。平时大家开发vue项目的时候，相信大部分人都是使用 vue-cli脚手架生成的项目架构，然后 npm run install 安装依赖，npm run serve启动项目然后就开始写业务代码了。 但是对项目里的webp…"}, {"id": "6844903992426758152", "title": "Vue + Koa从零打造一个H5页面可视化编辑器——Quark-h5", "desc": "想必你一定使用过易企秀或百度H5等微场景生成工具制作过炫酷的h5页面，除了感叹其神奇之处有没有想过其实现方式呢？本文从零开始实现一个H5编辑器项目完整设计思路和主要实现步骤，并开源前后端代码。有需要的小伙伴可以按照该教程从零实现自己的H5编辑器。（实现起来并不复杂，该教程只是提…"}, {"id": "7002585132465029134", "title": "Vue3学习手记——ref的实现原理", "desc": "ref 接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property.value。 ref实现原理 unref 如果参数是一个 ref，则返回内部值，否则返"}, {"id": "6950487211368251399", "title": "Vue3 + TypeScript 复盘总结", "desc": "背景近期在研发一套物联网设备管理系统，其主要用途是将公司旗下所负责智能园区中的硬件设备通过物联网云平台来进行综合管控。由于这个产品是实验性项目，没有合同，没有明确收益。所以能够拿到的资源非常少。产品具"}, {"id": "6999197662394204168", "title": "Vue3.0的新特性整理", "desc": "合成API 合成API是Vue3.0提供的一个新特性,它利用了setUp以及其提供了一些响应式API,生命周期等使Vue的开发者有了一个新的开发模式,解决了以往维护大组件成本高的问题,同时更加规范了V"}, {"id": "6985518117350801439", "title": "Vue学习系列之一、响应式", "desc": "前言 这是一个Vue源码学习系列。打算开个手写Vue的坑，希望能在写代码的同时能把其中的细节讲清楚，最终目的是实现一个简版的vue。不知道自己能写到哪一步，总之尽力而为。"}, {"id": "6844903664818061325", "title": "用Vue构建一个github“可视化大数据平台”-GitDataV，设计开发分享", "desc": "GitDataV，是一个github“大数据可视化平台”，通过它你可以更直观的看到你在github里的一些数据，（之所以打双引号，是因为我觉得这个还没到大数据可视化的程度）。其实我在 上篇文章 分享的时候已经提到了这个想法，通过github提供的接口，做一个自己的“大数据分析页…"}, {"id": "6973676232525217800", "title": "naive ui尝鲜踩坑--todolist实战", "desc": "响应尤大大的推荐，尝鲜naive-ui 做个todo踩踩坑，涉及到两大组件 form和table的使用。"}, {"id": "6992079237251366920", "title": "智一面带你学习Vue.js 循环语句", "desc": "循环使用 v-for 指令。 v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。 v-for 可以绑定数据到数组来渲染"}, {"id": "6844903712205307917", "title": "Vue.js 你不知道的一些小技巧", "desc": "自己先想一分钟。 关于上面的面试题的具体解释，请移步这里，本文不在累述。正文开始，下面列举的一些小技巧有的或许你用过，有的或许你没用过。不管有的没的，希望你看完之后有所收获吧。文笔和知识有限，不对的地方，请留言斧正！ 同事在做上传删除的时候，给用户加个提示“是否删除？” 发现即…"}, {"id": "6903005823388090381", "title": "Element3 Logo是如何被设计出来的", "desc": "关于Element3这个项目的来龙去脉，两位老师的文章已经说得很明白了。我仅在这里聊一聊Element3 Logo是如何设计出来的。 我在团队里主要负责Flutter、ReactNative、小程序等跨端开发内容，工作上较少涉及Vuejs和Element-UI。 但作为一个设计…"}, {"id": "6944346735540076575", "title": "vue3优雅实现移动端登录注册模块", "desc": "近期开发的移动端项目直接上了vue3,新特性composition api确实带来了全新的开发体验.开发者在使用这些特性时可以将高耦合的状态和方法放在一起统一管理,并能视具体情况将高度复用的逻辑代码单独封装起来,这对提升整体代码架构的健壮性很有帮助. 如今新启动的每个移动端项目…"}, {"id": "6844903946448797709", "title": "Element-UI  技术揭秘（4）— Container 布局容器组件的设计与实现。", "desc": "上一篇文章我们分析了 Layout 布局组件的设计和实现，它的应用场景通常是局部布局。对于整个页面的布局，element-ui 提供了 Container 布局容器组件，专门用于 PC 管理后台页面的整体布局。 我们先通过几幅图看一下页面的常见布局。 这两张图的布局在后台系统中…"}, {"id": "6844903599655370765", "title": "Vue nextTick 机制", "desc": "这段脚本执行我们猜测会依次打印：1、2、3。但是实际效果中，只会输出一次：3。为什么会出现这样的情况？我们来一探究竟。 我们定义watch监听msg，实际上会被Vue这样调用vm.$watch(keyOrFn, handler, options)。$watch是我们初始化的时候…"}, {"id": "7000026821643206686", "title": "小案例学 Vue — 用户登录页面", "desc": "前言 整体页面展示 需求分析 用户名和密码字段必填，如果未填写指定字段点击登录按钮后，立马弹出提醒信息，当按下字段不为空时，提示信息立马消失，当两个字段都填写完成即可提交用户名和密码到后端进行验证身份"}, {"id": "6854573217832468493", "title": "一万字总结Vue2.6.x", "desc": "v-enter-active : 定义进入过渡生效时的状态 , 在整个进入过渡的阶段中都会应用 . 在元素被插入之前生效 . 咋过渡/动画结束之后移除 , 这个类可以被定义进入过渡的过程时间 , 延迟 和曲线函数"}, {"id": "6844903805222387720", "title": "和尤雨溪一起进阶vue", "desc": "花了400大洋买了frontedmasters的一个月的会员，就是为了看男神的这份vue教程，没有中文字幕，痛苦地坚持啃完了，建议有钱并且英语好的人直接买会员去官网看视频，尤大神人长得帅，业务水平高，英语还超苏，对不起，忍不住犯了会儿花痴，如果没钱英语又渣的人只能看我的总结了，…"}, {"id": "6989414153882435597", "title": "简单实现element ui 分页组件底层原理", "desc": "1.预览分页组件效果图 2. 分析需求 常用 需求： 页码的按钮数量默认给予5个，也可以按照需求，进行传入修改 3. 基础实现翻页交互效果代码： 4. 接下来是基础功能实现的代码： 主要是借助子传父，"}, {"id": "6844903827905200135", "title": "用vue3公开的思路从0实现最简化的vue", "desc": "我们用vue，是因为它是当前业界最佳的解决方案之一，但前端技术方案迭代及工业标准化发展的浪潮，大概率不会在vue这里到达终点。 jquery没有死，它的基因已经注入浏览器标准。而webcomponent shadow dom的灵感，同样有受到vue和react的vdom技术的启…"}, {"id": "6855129007412346888", "title": "Vue2.x与Vue3响应式实现核心代码对比", "desc": "首先需要知道是Object.defineProperty只能监听对象，并且这个对象不是指对象类型(数组也是对象类型)，而是Object构造器对象，也就是{}。 由于JavaScript的限制，Vue里的数据不能够动态添加根级响应式 property。也就是说必须在初始化实例前声…"}, {"id": "6844903780161421320", "title": "前端面试题—vue基础部分详解", "desc": "vue基本概念区分安装vuecmd命令npmivueyarnaddvuevue核心实现方法vue指令v-forv-bindv-ifv-cloakv-prevue对象vue数组vue事件vue过滤器vu"}, {"id": "6844903519993118734", "title": "Vue SPA 首屏加载优化实践", "desc": "我们以 vue-cli 工具为例，使用 vue-router 搭建SPA应用，UI框架选用 element-ui ， ajax方案选用 axios, 并引入 vuex ，使用 vuex-router-sync 将 router 同步到 store ，服务器使用本地Nginx服务…"}, {"id": "6974778684418818078", "title": "看尤老师解释Vue3中提到的Tree-shaking | 2分钟系列", "desc": "Vue3中提到一个叫Tree-shaking的东西，有人称之为\"摇树优化\"，具体回看尤大怎么解说~~~"}, {"id": "6979368550225936392", "title": "vue2的响应式原理学“废”了吗？继续观摩vue3响应式原理Proxy", "desc": "🔷前言 之前写过一篇文章谈论 vue2.x 的响应式原理，但因为 vue3 也来了，紧跟着 vue3 的步伐，周一开始学起了 vue3 的响应式原理。 大家应该都听过， vue3 用 proxy 来解"}, {"id": "6998066861740916773", "title": "vue中v-model指令与.sync修饰符的区别", "desc": "vue中v-model指令与.sync修饰符的区别： v-model 你也可以通过子组件中的model选项来修改v-model绑定的的默认事件和prop自定义属性： 所以相应的父组件使用v-model"}, {"id": "6976906597263998989", "title": "实践：使用vue-cli搭建一个Vue3-TS的uni-app工程化项目模板(中)", "desc": "通过vue-cli创建的项目，更易维护，可以使用非HbuilderX编辑器进行编码，通过终端直接执行编译命令启动。"}, {"id": "6993667087008792607", "title": "Element 2 组件源码剖析之Badge标记", "desc": "组件Badge一般和其它组件配合使用，用于进数字或状态标记提醒效果。 本文将深入分析组件 Badge 源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "6998086505931472932", "title": "Vue路由传参详解（params 与 query）", "desc": "Vue路由传参详解（params 与 query） 前言： name是什么呢？name 是配置路由时给 path 取的别名，方便使用。但要注意的是 “地址栏显示的路径始终是 path 的值” name"}, {"id": "7001493644284788772", "title": "1x5 VueRouter - 基础 - 路由组件传参", "desc": "VueRouter 基础教程系列 🎉 路由组件传参 使用路由组件传参的目的在于解除组件与路由器的紧密耦合关系。 当组件中只能通过 this.$route 才能获取路由信息，这便会限制了组件的灵活性，因"}, {"id": "7001140002285420575", "title": "【最简系列】手写一个vue的响应式原理 | 不贴源码，只求易懂", "desc": "从Vue面世以来，其`响应式`的特点就被人津津乐道，相应的`源码解析文章`层出不穷，但还是有些童鞋读过这些文章后依然困惑不已，究其原因大多是因为文章中`倾向于整段/完整的复制源码`，虽然这样可以将vu"}, {"id": "6844903727552266254", "title": "2018 前端开发分享", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 查阅网上诸…"}, {"id": "7001373267046957063", "title": "【周六加班帖】生成以周统计的表头，跨月份的周算在后一个月", "desc": "这是人力统计的一个表格的表头，根据月份，划分周，每周从周一开始到周日（国内习惯性）。而跨月份的周算在前一个月还是后一个月，我们的需求是算在后一个月。根据情况而定。 在表格中我们可以通过动态生成列，维护"}, {"id": "6942124589090603038", "title": "使用Vite2+TypeScript4+Vue3技术栈，如何入手开发项目", "desc": "今天，我们使用Vite2.0+Vue3+TS来试玩一下，开发一个demo项目。 我们，打开Vite官方网站(https://cn.vitejs.dev/)。 这里，我们将Vite与VueCLI做一下对比。 我们来搭建第一个 Vite 项目，我这里使用Yarn依赖管理工具进行创建…"}, {"id": "7001777037870530596", "title": "回首Vue3之路由篇（二）", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 这篇文章我们来讲一下创建路由实例方法:createRouter及其配置项，我们需要知道怎么去使用它们。 createRouter 创建路由"}, {"id": "6877808914847498247", "title": "使用 Vue3 开发小程序", "desc": "9 月 19 日凌晨，Vue3 在经过多个开发版本的迭代后，终于迎来了它的正式版本，「One Piece」的代号也昭示了其开拓伟大航路的野心。 Vue3 的新特性主要有 Composition API、Teleport、Fragments 和 &#x3C;script setu…"}, {"id": "6997780226591703048", "title": "实现一个基于vue的ssr渲染", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 nodejs中解析vue实例模板 使用vue-server-renderer将template模板 转换成 data-server-ren"}, {"id": "6844903974907150350", "title": "面试时面试官想要听到什么答案（关于一些vue的问题）", "desc": "自己也只是一个前端的小白，因为公司大佬都比较忙，面试这种事就落到了我这小白身上，第一次叫我去的时候我是百般拒绝的，因为自己还是有自知之明的，但是别人实在抽不开身，没办法只能去了，他们开玩笑说就按你这水平来就行了，啥时候你问不住了就让他来复试就行。 前前后后也面了一些人，加上自己…"}, {"id": "6844903557372575752", "title": "简单理解Vue中的nextTick", "desc": "先来一个示例了解下关于Vue中的DOM更新以及nextTick的作用。 从图中可以得知：msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的。其根本原因是因为Vue中DOM更新是异步的（详细解释在后面）。 下面了解下nextTick的主要应用的场景及原因…"}, {"id": "6844903881189621774", "title": "「数据可视化库王者」D3.js 极速上手到Vue应用", "desc": "D3与众多其他库的区别在于无限定制的能力（直接操作SVG）。 它的底层API提供对原生SVG元素的直接控制，但它也带来了高学习曲线的成本。 我们将把D3和Vue结合在一起 - 使用Vue的动态数据绑定，清晰的语法和模块化结构，可以充分发挥D3的最佳性能。 绝大部分的D3课程或书…"}, {"id": "6911228598825254925", "title": "不用Vue你还记得怎么写前端吗？用JS重写🌜黑暗模式掘金首页 | 创作者训练营", "desc": "最近这几天一直在埋头开发一款VSCode插件，叫做“我爱掘金”，为的是让广大掘友可以更方便的一边写代码，一边摸鱼。这个插件主要基于VSCode插件API里的Webview来开发，所以大部分功能是直接使用iframe来展示掘金页面，但这个Webview有很大局限，比如禁止打开新的…"}, {"id": "7000663684317970468", "title": "vue3 & react 封装自定义useHooks", "desc": "基于 vue3 composition api ，react hooks； 封装功能hooks，业务hooks；"}, {"id": "6844903817776103431", "title": "Vue CLI 3结合Lerna进行UI框架设计", "desc": "第一次在掘金发文章，有点啰里啰嗦，大家见谅。 当前大部分UI框架设计的Webpack配置都相对复杂，例如Element、Ant Design Vue和Muse-UI等Vue组件库。例如Element，为了实现业务层面的两种引入形式（完整引入和按需引入），以及抛出一些可供业务层面…"}, {"id": "6998547217476747294", "title": "vue+wangEditor的富文本编辑器的使用", "desc": "wangEditor —— 轻量级 web 富文本编辑器，配置方便，使用简单。 浏览器兼容性 兼容常见的 PC 浏览器：Chrome，Fi"}, {"id": "7000889337063669773", "title": "Mojito Admin 发布了，基于 Vue3 + Element Plus + Vite 开发", "desc": "Mojito Admin Mojito Admin 是一个基于 Vue3、 Element Plus、Vite 构建的后台管理系统模板，开箱即用，无过度封装，也可以用于学习参考。 预览 Demo 文档"}, {"id": "6844904149490876423", "title": "项目经理都不敢怼的页面图片展示方案[附源码]", "desc": "你们好呀，我是wangly，一名下班摸鱼的前端老倒霉蛋了。今年慢慢的开始把博客抓起来了。分享下一些日常技术和自己做的小项目。这次分享的是一个 <img> 标签在页面上渲染，如何做到让用户感到体验非常棒的呈现方法。 众所周知，图片一直都是属于比较占用资源的东西。因为图片有大有小，…"}, {"id": "6971046657764900871", "title": "Electron+Vue3 MAC 版日历开发记录(7)——Menubar   时间显示", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "7001819237127815176", "title": "vue 中利用 $once 取消 setTimeout 和 setInterval", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 问题 在开发软件的过程中，经常产生这样的需求： 用户启动了一个进程，比如流量数据的监控，这时候需要实时的查看当前时间的流量分析 或者在一些"}, {"id": "6989430202468139022", "title": "vue-pdf 展示base64编码pdf，旋转 翻页 放大 缩小 下载", "desc": "首先看一下是不是大家需要的效果 首先安装vue-pdf yarn add vue-pdf 然后写一个组件 在需要用到它的地方引入它"}, {"id": "6997060494284554277", "title": "Vue源码（九）指令原理", "desc": "Vue提供了很多内置指令以及自定义指令，这篇文章从源码角度分析指令是怎么执行和挂载的。以及v-model绑定到input标签和组件标签上的区别"}, {"id": "6983333333858009125", "title": "不完全笔记之Vue2.x函数式组件", "desc": "What functional是Vue2.x提供的API，开启可实现函数式组件。 先上官方链接，得到解释： 无data，即可理解为无响应式数据。 另外：函数式组件也无生命周期钩子函数。 给templa"}, {"id": "6970279201790230541", "title": "手把手教你玩转render函数「组件封装-dynamic-cascader」", "desc": "$scopedSlots插槽名称对应的是render函数这种设计是更加合理的，所以在Vue3中$slots也设计成了对象里面插槽名称对应的是渲染插槽内容的render函数"}, {"id": "6972177046667526174", "title": "Electron+Vue3 MAC 版日历开发记录(10)——env 使用", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "7003609447654228005", "title": "vue源码-响应式原理", "desc": "前言 1. MVVM 模式 model <=view-model=> view 2. 侵入式和非侵入式 侵入式 非侵入式 非侵入式实现原理 3. 什么是响应式系统？ 实现响应式系统的核心内容 1. 数"}, {"id": "6964661155692281863", "title": "如何看待 Web 开发构建工具 Vite？", "desc": "vite 启动链路 命令解析 这部分代码在 src/node/cli.ts 里,借助 cac 用于构建命令行 cli 的 script 脚本, vite 主要构建了四条 script 的命令 dev、"}, {"id": "6844903509641429006", "title": "滴滴 Web 移动端组件库 cube-ui 开源", "desc": "滴滴 WebApp 团队在去年底用 Vue.js 2.0 对业务进行重构，并开发了一套移动端组件库 cube-ui 支撑业务的开发。经过了一年多的业务考验，cube-ui 也日趋成熟，而且我们相信除了在滴滴内部，cube-ui 也一定也有它的用武之地。好的东西必须要和大家分享，…"}, {"id": "6966065844874919973", "title": "vue2源码笔记之nextTick", "desc": "概念 nextTick 接收一个回调函数作为参数， 它的作用是将回调延迟到下次dom更新周期之后， 如果没有回调且在支持Promise的环境中，则返回一个Promise 应用场景 当更新了数据之后， "}, {"id": "6983879355451113480", "title": "使用vue3自定义指令实现一个拖拽指令", "desc": "自定义指令-拖拽 前言 vue3正式版已经发布大半年了,咱也得紧跟时代潮流,vue3带来的很多改变,使用ts重写代码,在兼容vue2语法的基础上,增加了很多新语法,比如新增了组合api,也移除了一些旧"}, {"id": "6930447289370542087", "title": "春节大礼，Vite2.0 正式发布，中文手册同步更新", "desc": "🏮Vite中文文档祝全体读者2021春节快乐！🎉打开github的vite中文文档首页，首先看到的就是这句祝福，vue团队有心了；大家也可以亲自去github感受一下：https://github.c"}, {"id": "6844903860121632782", "title": "【实践总结】优雅的处理vue项目异常", "desc": "通过阅读源码看一下vue是如何将Vue.config.errorHandler接口暴露给使用者。 快狗打车前端团队专注前端技术分享，定期推送高质量文章，欢迎关注点赞。"}, {"id": "6978671088557359141", "title": "vue3学习--readonly与shallowReadonly、toRaw与markRaw、toRef的特点与作用", "desc": "这是我参与更文挑战的第26天，活动详情查看： 更文挑战 vue3学习--readonly与shallowReadonly、toRaw与markRaw、toRef的特点与作用"}, {"id": "7001131106686730248", "title": " vue3前端青铜到黄金王者 #13 vue-cli-service是啥（上）", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前篇我们解析了一下Vue3项目的构成，修改了一下组件的代码。 效果如下， 我们也在package.json看到vue-cli-servic"}, {"id": "6985330640086384647", "title": "4x0 精读Vue官方文档 -  单文件组件", "desc": "精读 Vue 官方文档系列 🎉 使用方式对比 使用 Vue.js 有两种方式 ： 纯JavaScrit驱动：模板的编译、Vdom 的创建、视图渲染都在浏览器端完成。 使用 Vue 官方提供的标准化工具"}, {"id": "7004829680201121799", "title": "vue3之新特性", "desc": "一、Ref 语法 ref 是一个函数，接受一个参数，返回的是一个响应式的对象，对象的 value 属性是真实存放值的地方(ref一般传入原始类型) 二、Reactive 语法 reactive 与 r"}, {"id": "6995438657305837599", "title": "vue中的v-model 与 .sync ", "desc": ".sync与v-model的相同点和区别是 相同点：都是语法糖，都可以实现父子组件中的数据的双向通信。 区别点： 格式不同。 v-model=\"num\", :num.sync=\"num\" v-mode"}, {"id": "6844903825627693063", "title": "Vue中级指南-01 如何在Vue项目中导出Excel", "desc": "Excel 的导入导出都是依赖于js-xlsx来实现的。 在 js-xlsx的基础上又封装了Export2Excel.js来方便导出数据。 由于 Export2Excel不仅依赖js-xlsx还依赖file-saver和script-loader。 由于js-xlsx体积还是很…"}, {"id": "6971580180854898696", "title": "Vue.js 源码（6）—— VNode", "desc": "前言 之前，我们介绍了虚拟 DOM。本文，我们将一起学习什么是VNode, VNode 的作用， 以及不同类型的 VNode 之间有什么区别。 什么是 VNode 顾名思"}, {"id": "6975779344564092958", "title": "Vue.js 源码学习 - 组件化（下）", "desc": "上篇分析了组件化的创建、patch、配置合并，这一篇就来讲一讲组件化的生命周期、组件注册、异步组件三部分。"}, {"id": "6903847527217528840", "title": "Vue3教程：Vue 3.x 快在哪里？", "desc": "人云亦云，并不会让你变得有多优秀，而会让你越来越随大流。当你和别的开发在聊到Vue3.0版本发布，有哪些亮点时，你的答案之一肯定有“它变得更快了，性能上快了1.2～2倍”。那么我就想问你，是什么让Vu"}, {"id": "6844903919273902087", "title": "vue组件通信与常用技巧分享", "desc": "组件是vue.js 最强大功能之一，组件的作用域是相互独立的，这就意味着不同组件之间的数据是无法相互引用，所以就有了各种组件通信方式。 不管啥样的通信方式，都逃离不了上图的各种关系(树)。 A和B、B和C、B和D 都是父子关系，C与D 是兄弟关系，A与C、A与D 是隔代关系（多…"}, {"id": "6941348666422919204", "title": "Vue 数组操作及源码分析", "desc": "Vue 将 Array 的 7 个方法进行了包装，使用这些方法操作数组可以出发页面的刷新。 若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。 若 a 等于 b，则返回 0。 若 a 大于 b，则返回一个大于 0 的值。 可以看出，这里暴露…"}, {"id": "6844903601874321415", "title": "基于vue自动化表单实践", "desc": "背景目标设计目标大概方案设计使用安装使用文档:doc引入插件基本使用demo.vue最终效果添加自定义组件或者组件目录cHello.vue成果目前应用再多个系统反馈欢迎大家来敲：github"}, {"id": "6937798450046205983", "title": "Vue3（九）ref（0）vs reactive（{value: 0}）", "desc": "ref（0）vs reactive({value: 0})放在一起，似乎好像是一样的，但是只能说实现的功能是一样的，而且我们也确实可以这么做，但是vue内部却并不是这么实现。 我们还是用事实来说话。 通过对比就会发现，reactive 是Proxy代理，有Handler和tar…"}, {"id": "6844903973690802189", "title": "8分钟为你详解React、Angular、Vue三大前端技术", "desc": "当前世界中，技术发展非常迅速并且变化迅速，开发者需要更多的开发工具来解决不同的问题。本文就对于当下主流的前端开发技术React、Vue、Angular这三个框架做个相对详尽的探究，目的是为了解开这些前端技术的面纱，看看各自的庐山真面目。 React（也被称为React.js或R…"}, {"id": "6936154982655885343", "title": "【富贵记账】项目笔记Vue+TS（更新中~~~）", "desc": "富贵记账是一款极简的记账应用，也是一款基于 Vue、VueRouter、Vuex、TypeScript、ECharts 的单页面应用，UI模仿业内知名的鲨鱼记账，实现原创，期间遇到了很多weboack和TypeScript方面的问题，解决过程我这里记录下来。源码几乎完全用TS实…"}, {"id": "6844903824604282888", "title": "Vue 2.x折腾记 - (17) 基于Ant Design Vue 封装一个配置式的表单组件", "desc": "写了个类似上篇搜索的封装，但是要考虑的东西更多。 具体业务比展示的代码要复杂，篇幅太长就不引入了。 操作父的props会造成死循环(在有slot的情况下，因slot-scope拿的是父props经过computed后的值)。 已经改用其他实现姿势，抽离成独立组件，再联动数据。"}, {"id": "6844903701262385166", "title": "标注图+部分举例聊聊Vue生命周期", "desc": "“你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。” 现在项目中遇到了，好好回头总结一波Vue生命周期，以后用到的时候再来翻翻。 每个 Vue 实例在被创建时都要经过一系列的初始化过程。 例如：从开始创建、初始化数据、编译模板、挂载Dom、数据…"}, {"id": "6951761668112121887", "title": "使用Composition API在Vue3中创建防抖的搜索输入框", "desc": "随着Vue3中Composition API的引入，有了编写响应式逻辑的新方法，即ref和reactive方法。在本文中，将展示如何创建一个防抖的ref，该ref将在指定的延迟后才更新值。例如，有一个"}, {"id": "6844903664033726478", "title": "Element源码分析系列7-InputNumber(数字输入框)", "desc": "这里的意思是当controls-right类被加上后,decrease这个类的css变化为上面的内容，也就是将减按钮从原本的左侧放置到右下角，我开始不明白这里的top:auto,left:auto是干嘛的，后来控制台调试得知，因为decrease类原本的top是1px，left…"}, {"id": "6844903901179854856", "title": "Vue：V-model语法糖", "desc": "v-model语法糖的使用使用v-model来进行双向数据绑定的时：仅仅是一个语法糖：所以在组件中使用的时候，相当于下面的简写：所以要组件的v-model生效，它必须：接受一个value属性在有新的v"}, {"id": "6844903559348256782", "title": "vue插件——滚动监听 vue-scrollwatch", "desc": "滚动的动画效果，抄袭了 vue-scrollactive的做法，用到库bezier-easing 。当然，这个插件相对于vue-scrollactive的优势在于，我可以指定滚动容器，并不仅限于window下的滚动。 低版本的chrome核心 dom对象没有scrollTo 方…"}, {"id": "6844903849556197390", "title": "使用vue自定义指令开发一个表单验证插件validate.ts（带更新）", "desc": "这段时间在进行一个新项目的前期搭建，新项目框架采用vue-cli3和typescirpt搭建。因为项目比较轻量，所以基本没有使用额外的ui组件，有时候我们需要的一些基础组件我就直接自己开发了。今天就来介绍一下如何利用vue的自定义指令directive来开发一个表单验证插件的过…"}, {"id": "6844904181866692616", "title": "学习vue源码（3） 手写Vue.directive、Vue.filter、Vue.component方法", "desc": "注册或获取全局指令。 （3） 除了核心功能默认内置的指令外（v-model和v-show），Vue.js也允许注册自定义指令。虽然代码复用和抽象的主要形式是组件，但是有些情况下，仍然需要对普通DOM元素进行底层操作，这时就会用到自定义指令。 （4）Vue.directive方法…"}, {"id": "6844903502712406024", "title": "Sublime Text 中配置 Eslint 代码检查和自动修复", "desc": "再之后找了个时间认真的了解了一下 ESLint，终于有了一些概念。简单来说，ESLint 就是一个整合了编码规范和检测功能的工具。以前说的那些规范（html，css，js 等规范）都是让你自己主动去学习，去遵守，现在 ESLint 帮助你检测你的代码是否符合你自己设定好的规范。…"}, {"id": "6968751567407153183", "title": "vue3学习（3）setup,refs源码阅读理解", "desc": "前言：上一篇文章记录了vue3组合式API的和vue2选项式API的区别，这篇文章则主要是对组合式API中setup使用注意项和ref的源码解读学习 setup setup组件选项在组件创建之前执行，"}, {"id": "6844903621339922440", "title": "mpvue开发小程序所遇问题及h5转化方案", "desc": "flyio提供请求便于请求模块的快速转化h5(flyio提供了h5,小程序的请求封装，参考mpvue中提供的一个例子写拦截器，用于处理后台返回未登录状态跳转页面)，自己在小程序中wx.request封装也一样，只是转h5又需要做一个axios。 阿里云oss对象储存处理文件上传…"}, {"id": "6844903974282379271", "title": "vue2.0响应式到vue3.0响应式原理", "desc": "至此可以说我们已经为数据实现响应式了，通过以上代码可以看出，如果你的Object层级很深，那么递归是会影响性能的。接下来我们思考一个问题，假如我们使用如下方式给对象赋值会触发几次更新视图的方法： 那我们来让这种方式改变数据也会触发更新视图，首先我们看下，我们调用了push方法，…"}, {"id": "6910879274580836360", "title": "基于Vuetify的Vue动态表单编辑器及代码生成器", "desc": "1. 总览 2. ICON 和 COLOR 设置展示 3. RULE 设置展示 在做工作流服务时，深感动态表单的重要性。所以，慢慢摸索和学习，结合自己的需求，搭建了本套动态表单系统。 基于 Vue 2.0 和 Vuetify 2.3.XX 构建。没有使用 Vue3，主要是 Vu…"}, {"id": "6844903790336802823", "title": "深入了解 Vue.js 是如何进行「依赖收集]", "desc": "在上一章节我们已经粗略的分析了整个的Vue 的源码(还在草稿箱，需要梳理清楚才放出来)，但是还有很多东西没有深入的去进行分析，我会通过如下几个重要点，进行进一步深入分析。 这一章节我们针对2. 深入了解 Vue.js 是如何进行「依赖收集」，准确地追踪所有修改 来进行分析。 当…"}, {"id": "6844904106369220615", "title": "2020前端技术面试必备Vue:(三)Router篇", "desc": "Vue路由器路由初体验安装使用router.js路由配置index.jsVue入口文件配置动态路由传递参数捕获404页面嵌套路由编程式导航router.pushrouter.replacerouter"}, {"id": "6979617304573280293", "title": "JS数组求和的五种常用方法", "desc": "JS数组求和的五种常用方法 方法一. 不考虑算法复杂度，用递归做 方法二. 常规循环 方法三. 函数式编程 map-reduce 方法四. forEach遍历 方法五. eval 测试输出"}, {"id": "6913134310895648782", "title": "mock.js 的使用方法", "desc": "此次记录一下 mock.js 在 vue-cli 中使用得方法，方便以后使用。 掘金平台的字数有限制，如有机会添加长文，会将规则匹配的也一并记录。"}, {"id": "6979526428706471944", "title": "vue的一些高级特性总结", "desc": "趁交接的这段时间，把项目里用到的一些Vue高级特性整理一下，算是一个对自己的项目总结，也算是对自己Vue知识点的梳理吧。"}, {"id": "6896294487354671117", "title": "基于Vue+ element的登录验证和动态权限渲染", "desc": "先说登录验证，就是使用常用的jwt方式，说到jwt，先来简单介绍一下～Jsonwebtoken(JWT),是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准，详情https://www."}, {"id": "6979583603046891528", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】024-Vue中的高级语法：Mixin混入的基础语法", "desc": "五、Vue中的高级语法 1、Mixin混入的基础语法 混入data 运行结果 混入生命周期函数 运行结果 组件和混入同时存在同一生命周期函数 运行结果 混入方法 运行结果 使用全局Mixin 运行结果"}, {"id": "6953862633514598408", "title": "Vue电商管理系统笔记", "desc": "一、准备工作 0. 给el-container设置最小宽度，防止挤压变形 0. 给目录配置别名 1. 登录逻辑以及token 2. API接口授权 3. 解决左侧菜单刷新后默认高亮 方法一： vue生"}, {"id": "6979585574873071629", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】026-Vue中的高级语法：Teleport传送门", "desc": "3、Teleport传送门 给整个屏幕添加蒙层 运行结果 使用teleport传送门 运行结果 传送"}, {"id": "6877191933983358983", "title": "Vue源码解析之Keep-alive", "desc": "在之前的VueRouter源码解析(三)：router-link/router-view组件文章中，提到了router-view搭配keep-alive组件使用。那么这篇文章就会详细分析一下keep-"}, {"id": "6844903569523474439", "title": "你应该知道的Sass常用方法", "desc": "像一些Sass是什么的基础概念，在这里我就不提了，只提供干货，相信别的文章关于Sass的描述还是很多的。 SASS允许使用变量，所有变量以$开头。 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。 SASS允许选择器嵌套。比如: 在嵌套的代码块内，可以使用&引用父元素。…"}, {"id": "6979593942606184479", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】030-Composition API：Setup函数的使用", "desc": "六、Composition API 1、Setup函数的使用 代码 运行结果 setup内部更多写法 运行结果 Composition API 和 Options API 中的同名属性 运行结果 参数"}, {"id": "6844903559360675848", "title": "[VUE]computed属性的数据响应和依赖缓存实现过程", "desc": "本文是一篇vue.js源码学习笔记，适合对vue的数据响应实现有一定了解的同学，文中有表述不准确的地方还望指出。那么开始了 对Watcher的实现这里就说这么多了，本文是建立在大家对Wathcer类有一定了解的基础上讲解的。如果大家有需要可以留言后期会给大家详细梳理下数据响应的…"}, {"id": "6896725651567738894", "title": "v-bind 指令常用修饰符", "desc": ".prop-被用于绑定DOM属性(property)。(差别在哪里？).camel-(2.1.0+)将kebab-case特性名转换为camelCase.(从2.1.0开始支持).sync(2.3.0"}, {"id": "6844904037347753998", "title": "Vue3源码之响应系统Reactive模块解读(干货满满,不容错过~)", "desc": "runtime-core、runtime-dom、runtime-test这三个文件夹都是Vue 运行时相关的核心代码。 compiler-core、compiler-dom、compiler-sfc这三个文件夹是 Vue 实现的编译器相关代码。 server-renderer…"}, {"id": "6844903945953869831", "title": "vue 数据更新却不render？", "desc": "1. 更新对象的属性不render vue 不允许动态添加对象的根级别属性。 2. 更新数组数据不render？ 3. 为什么变异方法就能让新增的数据有响应式呢？ 这个官方文档并没有细说，但是翻过源码的人就能知道，为什么上面这些数组的原生方法被叫做变异方法呢，字面上了解就是 v…"}, {"id": "6844903577060638734", "title": "如何在原生微信小程序中实现数据双向绑定", "desc": "首先，要使数据双向绑定，应该避免过多的数据源。 在数据从上到下自然流动的情况下，如果每个组件中都维护它们自己的数据，而又要保持它们数据值的一致，这虽然可以做到，但实现过程并不会简单。 但是也没必要说为了有一个统一的数据源就使用 mobx 或 redux 来全局管理数据，这就有点…"}, {"id": "6844903633989943309", "title": "H5数字键盘组件适配React/Angular/Vue", "desc": "为什么不直接使用系统键盘？H5键盘和H5页面完美适配，没有挤压页面的问题解决系统键盘不支持autofocus的问题自定义键盘布局，定制化输入体验产品需求你怕不怕这个轮子有什么好？支持原生JS、Reac"}, {"id": "6943478943362056222", "title": "搞明白activated和deactivated", "desc": "写到前面什么是activatedactivated解决了一个什么问题Demomain.首先要确定一个点就是他也是属于vue生命周期中的一个，为什么我们平常说的生命周期没有它呢？我们平常说的生命周期就是created，update，mounted，destory和他们的之前之后的状..."}, {"id": "6844903734380593160", "title": "Vue.js子组件向父组件通信", "desc": "1、先看下目录体系，下图子组件放在components文件夹内，模拟子组件为itemAdd.vue，父组件视图放在views文件夹内，模拟父组件名称为Home.vue。 2、效果图里面可以看出有两个三个元素：输入框、单选框、和新增按钮。 子组件通过事件向父组件同部数据，上文展示…"}, {"id": "6991639009713717278", "title": "vue基础+过滤器详细讲解", "desc": "1 .Vue 基础 1.0_vue 基础 v-for 更新监测 哪些方法不会导致 v-for 更新？为什么？ 因为操作数组的方法，并没有修改原数组，所以 v-for 不会监测到 解决方案：将新数组重新"}, {"id": "6902993571293429774", "title": "Vue SSR 总结", "desc": "也会对Vue SSR有更加深入的了解。 该方式需要你熟悉 Vue.js 本身，并且具有 Node.js 和 webpack 的相当不错的应用经验。 一些额外的功能，例如静态站点生成。通过 Nuxt.js 可以快速的使用 Vue SSR 构建同构应用。 在 Node.js 服务器…"}, {"id": "6951763834851983374", "title": "vue2的$refs在vue3组合式API中的替代方法", "desc": "如果你有过vue2的项目开发经验，那么对$refs就很熟悉了。由于vue3的断崖式的升级，在vue3中如何使用$refs呢？想必有遇到过类似的问题，我也有一样的疑惑。通过搜索引擎和github，基本掌"}, {"id": "6844903619733487629", "title": "前端优化之图片懒加载", "desc": "如果你学过计算机网络你就会知道，我们请求一个带有n张图片的html文件实际上会发送n+1次请求，因为在浏览器解析html的时候遇到了src，就会请求src后面的内容。 设想一下如果我们的页面有1000000张图片，那么如果等待这些图片响应成功并加载完成时延是非常大的，用户体验非…"}, {"id": "6905295943555121159", "title": "Vue响应式、双向绑定原理即代码实现你会吗？", "desc": "一、Vue响应式原理图：二、Vue响应式原理Vue是采用数据劫持配合发布者-订阅者模式的方式实现响应式的。通过Object.defineProperty来劫持各个属性的setter和getter，在数"}, {"id": "6844903747491987469", "title": "实现一个简易的vue", "desc": "6./shared ⽬目录提供全局⽤用到的⼯工具函数。 Vue.js 的组成是由 core + 对应的 ‘平台’ 补充代码构成(独立构建和运行时构建 只是 platforms 下 web 平台的两种选择)。 1. Object.defineProperty setter 触发消…"}, {"id": "6844903751862452232", "title": "vuepress和valine搭建带评论的博客", "desc": "创建博客文件夹docs，该文件夹适用于编写文档用的，其中的每一个 markdown 文件（.md）都是可以看做一篇博客。当然最好在 docs 下面为各主题都创建一个单独的目录。 每一个路径中默认的访问文件都是README.md，后面对于README.md文件的路径配置可以省略文…"}, {"id": "6844903560971288589", "title": "vue-cli是如何工作的", "desc": "vue-cli是Vue.js官方脚手架命令行工具，我们可以用它快速搭建Vue.js项目，vue-cli最主要的功能就是初始化项目，既可以使用官方模板，也可以使用自定义模板生成项目，而且从2.8.0版本开始，vue-cli新增了build命令，能让你零配置启动一个Vue.js应用…"}, {"id": "6844904146693259271", "title": "Vue开发企业级移动端音乐Web App", "desc": "本项目来自于 黄轶 老师的慕课网教程 Vue 2.0高级实战 开发移动端音乐 WebAPP ,目的在学习交流，如果有冒犯相关的权益，还望告知。 由于本人也是第一次写文章，才薄智浅，博众一笑。关于某课上的音乐项目《Chicken Music》本人也是十分感兴趣，这篇文章主要目的是…"}, {"id": "6844903775581241352", "title": "vue 源码解析（实例化前） - 初始化全局 API（最终章）", "desc": "上一章的最后，总结了 Watcher 的实现，对于 vue 实例化前要做的事情，在这一章，就要终结了，所以这一篇，也就是 vue 实例化前的最终章。 渲染 dom 的实现：$nextTick 、 render。 用来判断是否是以 hook: 开头的事件。 检查当前的事件是否是以…"}, {"id": "6935334189231407134", "title": "Vue3疑问系列(7) — v-model(vModelSelect)指令是如何工作的？", "desc": "根据前面几篇文章的讲解,其实双向绑定原理的套路都一样,加上上一篇也讲解了looseEqual.ts的实现. 所以这次就不编写 vModelSelect 指令对象了, 因为比较简单. 这7个小例子其实是vue-next单测中的,怕有的同学看不懂,所以改写成大家一眼就能看明白的例子…"}, {"id": "6980216655099985950", "title": "vue composition-api实践", "desc": "因为向往已久vue3的开发方式，但是组内有很多历史项目，并且我们受制于ie的支持，所以我们决定在vue2中引入composition-api，来使用他的新特性。在使用过程中，我们遇到了很多问题，也积累"}, {"id": "6854573211528069128", "title": "vu3.0 数据响应式（有彩蛋）", "desc": "众所周知，vue2.x响应式是基于Object.defineProperty的数据劫持来实现的，而在vue3.0 中则采用新的ES6 API Proxy来做数据劫持。 具体的Proxy用法本文就不做详述了，具体可以参考Proxy，这里简单介绍一下Proxy 优缺点。 以上只是简…"}, {"id": "6844903888538042376", "title": "【step by step】使用 Vue 封装一个表单校验", "desc": "不管是PC端还是移动端，提交表单是一个常见场景，那么友好交互的表单校验也是一个常见场景了。 我走上了一条自己动手，然后希望丰衣足食的道路..... 不过当我将思路想清楚之后，我发现实现过程比我想象得简单了很多!现在我来记录一下我的思路。 1. 表单组件——Form Form组件…"}, {"id": "6910078053066489864", "title": "vue中使用v-bind=\"$attrs\"和v-on=\"$listeners\"进行多层组件监听", "desc": "vue组件之间通信，我们可以使用props和vuex两种方式，但是vuex太重，props在多级组件中使用又太麻烦，vue2.4版本提供了另一种方法，使用v-bind=\"$attrs\"，将父组件中不被认为 props特性绑定的属性传入子组件中，通常配合 interitAttrs…"}, {"id": "6991472107787911175", "title": "【Vue2.x 源码学习】第二十八篇 - diff算法-问题分析与patch优化｜ 8月更文挑战", "desc": "【Vue2.x 源码学习】第二十八篇 - diff 算法-问题分析与patch优化：初始化与更新流程分析；问题分析与优化思路；新老虚拟节点比对模拟；patch 方法改造；"}, {"id": "6980145898995073054", "title": "【Vue】vue中如何自定义表格表头的展示与隐藏", "desc": "功能描述：当想改变表格的表头时，通过点击表格表头，弹出弹框，选择需要展示的选项或勾选掉想隐藏的选项来控制表格表头的展示与隐藏 具体功能如下: 在HTML中定义一个table表格及一个dialog弹框，"}, {"id": "6915202640695525389", "title": "Vue + TypeScript 实战项目（二）", "desc": "这两个接⼝都没有提供 CORS 跨域请求，所以需要在客户端配置服务端代理处理跨域请求。"}, {"id": "6844904161226522637", "title": "Vue和react两大主流框架之争", "desc": "hello，大家好，最近袁小白一直在加班，可能是感觉受到公司的压迫快要超出我的界限了吧，所以最近想多看一些面试题，有一些就想记录下来，准备把每一道面试题都写一篇博客，最后在一片博客内汇总一下，这可真是的好的idea啊(大家可不要夸我聪明啊)，好了下面我们进入今天的正文，两大主流…"}, {"id": "6844903847526137869", "title": "读vue的变化侦测", "desc": "最近在看“深入浅出vuejs”，第一篇变化侦测，想把自己的理解总结一下。 将数据变成可响应式的，即将数据变成可监听的。通过Observer类来实现 那么这个依赖，谁来收集存起来。通过Dep类来实现"}, {"id": "6844903845445763086", "title": "尝试实现vue分页组件", "desc": "最近学习vue，在做一个练手项目，其中有两个页面都用到了分页组件，但为了能够在第二个组件中使用，对分页组件改了又改，但最终仍然不能够满足这两个页面的使用需求，最终发现了一个问题：组件的设计思想是实现复用，减少重复性的工作。那么明显vue学习之路应该大致有两步： 看来自己算是一直…"}, {"id": "6844903845420613640", "title": "关于Android工程师转成vue的三两事儿(3)--编译器的选择", "desc": "首先来说一下sublime，首先为什么要选择这个东西呢？是我大学室友重点推荐的，另外我的启蒙书籍强烈的推荐。外加上我自己也觉得操控这个软件会让人感觉自己很高端，当然最最重要的是没换电脑之前电脑的配置不太够，强行运行其他软件会让我那台老爷机喘不过气来😊。 不扯了，直接开始安装吧…"}, {"id": "6844904202234249223", "title": "【手摸手】带你看 Vue2 源码 - 第二章", "desc": "之前我们介绍过组件在挂载时执行 $mount 方法，实际执行的是 mountComponent 方法。在这个方法里创建了一个当前实例的渲染 Watcher 对象，第二个参数是 updateComponent 方法，如果该方法被调用会最终执行 _render 方法，_render…"}, {"id": "6901889197586513927", "title": "【Vue2】基础知识点梳理", "desc": "元素的class和style属性通常为复杂的字符串。所幸 Vue 支持:class和:style的对象形式和数组形式： 元素的style属性同理，且 Vue 会智能地为其添加浏览器引擎前缀。 使用v-for指令进行循环渲染。其中的key属性是为了标识 vdom，使得在 vdom…"}, {"id": "6844903587831791624", "title": "vue.js源码解读系列 - Vue的自定义事件机制", "desc": "监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数 如果同时提供了事件与回调，则只移除这个回调的监听器。 触发当前实例上的事件。附加参数都会传给监听器回调。 如果同时提供了事件与回调，则只移除这个回调的监听器。 白话描述：匹…"}, {"id": "6844903518239719431", "title": "奇舞周刊第 237 期：如何为 ThinkJS 3 网站优化 TTFB 时间", "desc": "本文主要介绍了 JavaScript 几种常见的内存泄露，相信你读完本文会有所收获的。 基于 ThinkJS 开发的网站普遍都很快，这篇文章我打算聊聊如何为 ThinkJS 3 网站优化 TTFB 时间，使之变得更快。 奇舞团前端工程师怡红公子分享使用 Drone.io 取代 …"}, {"id": "6949415657825894430", "title": "Vue3 x + Vite2 x 入门实战 02：搞懂各种对齐参数", "desc": "提示：只演示2-3种属性值效果，其他去查api即可概要内容：text-alignalign-itemvertical_alignjustify-content1. text-align示例：示例效果："}, {"id": "6900045063460487175", "title": "vue的render方法学习", "desc": "1.概述vue的render方法,即渲染函数,它比模板更接近于编译器,也意味在执行效率上会比模板好,如果我们要写更好的组件,或者阅读别人的代码,我们就需要学习render方法2.语法render方法和"}, {"id": "6992957603642867719", "title": "vue3前端青铜到黄金王者 - 第二个入门v-bind", "desc": "今天学习v-bind。给已知属性赋值，属性值通过js动态获取。<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.<script src=\"/vue3.1.5_vue.global.const ur..."}, {"id": "6844904085284454408", "title": "Vue源码之nextTick(个人向)", "desc": "来了来了，我来填坑了之前响应式文章中，关于最后Dep的notify后通知Watcher的run去更新数据的中间环节省略内容，以及nextTick的内容，这篇文章讲会大致说一下。大致的会分为一下两个部分 注：这次源码内容基于\"vue@^2.6.10\"版本，因为会和大佬PDF的版本…"}, {"id": "6914451093233598471", "title": "从零开始，用elementui躺坑vue - npm", "desc": "npm: node package manager, 翻译成中文就是node包管理工具。随着Node.js的火爆，使用npm共享js代码已经成为每个前端开发者的必备工具。但就现状而言：一部分开发者还只是停留在npm install层面。更有甚者，一言不合就开删, rm -f n…"}, {"id": "6914309617652596743", "title": "vue2核心原理(简易) - 组件(Vue.componet)的实现笔记", "desc": "前言本章项目地址通过Vue.component方法创建一个方法基于Object.create(Vue.prototype)newVue()是否存在componets进行合并,并可通过(__proto_"}, {"id": "6914303070604099597", "title": "[设计器 vjdesign] 快速实现动态表单配置系统", "desc": "vjdesign是一个可视化界面设计器，jformer是一个动态表单呈现组件，都具有可扩展性实现丰富功能，现在使用vjdesign+jformer快速开发一套动态表单配置系统系统的特性如下：提供几种常"}, {"id": "6844903881579692039", "title": "【Vue原理】Mixins - 源码版", "desc": "篇幅会有些长，你知道的，有很多种选项类型的嘛，但不是很难。只是涉及源码难免会有些烦， 这个过程是先于你调用 Vue 时发生的，也是必须是先发生的。这样mixin 才能合并上你的自定义 options 就是 components，directives，filters 这三个，一开…"}, {"id": "6903879973799477262", "title": "简单上手vue开发插件", "desc": "0.插件的开发1.什么是插件?2.插件的特征3.自己写插件"}, {"id": "6844904006515441672", "title": "迫于菜🐶 - Vue.js 源码（五）", "desc": "前面四章中，我们跟随 Vue.js 技术揭秘 ， 对 Vue.js 的源码部分又有了进一步的了解，今天一起来学习 Vue 实例挂载是怎么一回事。 Vue 中我们是通过 $mount 实例方法去挂载 vm 的，$mount 方法在多个文件中都有定义。因为 $mount 这个方法的…"}, {"id": "6934612280428969997", "title": "computed 源码分析", "desc": "computed 在使用上也很清楚，也是响应式的，那当然和 Vue 基础的响应式原理的一个流程是相关了。 computed 函数进行了重载，看最后一个函数，参数 getterOrOptions 有两种方式，一种是传入一个方法，另一种是传入一个带有 set、get 的对象。 ne…"}, {"id": "6844904177026465806", "title": "Vue - 如何通过value值来操作表单数据", "desc": "开唠之前我们得先准备一个表单~（哎呀妈呀我才知道vscode有截图的插件，我以前截图太辛苦了TAT，唔。。。就是这字可能有点小，不打紧，反正这里就是一个平平无奇的表单，涵盖了常用的表单元素，text，radio，checkbox，blablabla~） 这里提一嘴，submit…"}, {"id": "6981332681149644837", "title": "vue多路由拼图", "desc": "系统学习vueRouter,根据router-view的name属性，学习整理出多路由拼图。以供互相学习"}, {"id": "6981331858088787982", "title": "Ant Design Vue项目（3）", "desc": "VUE项目实战 Ant Design Vue项目 第三步（整体运用） 新建导航栏的跳转界面，layout布局"}, {"id": "6981329176930287647", "title": "动态化组件", "desc": "多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 <component> 元素，动态地绑定到它的 is 特性： 如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此"}, {"id": "6968642958212431909", "title": "vue使用window.addEventListener()", "desc": "vue 生命周期内使用。removeEventListener与addEventListener要调用相同方法"}, {"id": "6844904072248557582", "title": "vue核心原理-监测数据变化", "desc": "我们实际开发中发现，在data中定义的所有数据，后续无论是在template中使用，还是在methods中使用，都能随着数据的变化而变化。为了理解这其中的原理，研究源码后整理出这篇文章，欢迎大家及时指正。 其中enumerable属性表示此属性设置为可枚举，configurab…"}, {"id": "6844903743800999944", "title": "VueJS SSR 后端绘制内存泄漏的相关解决经验", "desc": "Memory Leak 是最难排查调试的 Bug 种类之一，因为内存泄漏是个 undecidable problem，只有开发者才能明确一块内存是不是需要被回收。再加上内存泄漏也没有特定的报错信息，只能通过一定时间段的日志来判断是否存在内存泄漏。大家熟悉的常用调试工具对排查内存…"}, {"id": "6844903910059016200", "title": "【Vue原理】Compile - 源码版 之 optimize 标记静态节点", "desc": "注意：只有纯文本子节点时，他是静态节点，但是不是静态根节点。静态根节点是optimize 优化的条件，没有静态根节点，说明这部分不会被优化"}, {"id": "6844903684590010376", "title": "从源码解析vue的响应式原理-响应式的整体流程", "desc": "在初始化结束后，调用options.el中。 runtime/index.js是运行时vue的入口，其中定义的mount功能，其中主要调用了mountComponent()函数完成挂载。 entry-runtime-with-compiler.js是完整的vue的入口，在运行时…"}, {"id": "6981072217454936101", "title": "Vuex使用", "desc": "基础部分 安装 简单介绍 state 存数据 mutations 修改数据--同步、简单逻辑 actions 复杂逻辑--异步、复杂逻辑 项目引用 创建 store.js 在main.js引用 组件里"}, {"id": "6910075086334607367", "title": "构建类似 Vue 类的业务模块代码", "desc": "因为没有考虑到 vue 中 this 的处理机制，目前想要 this 指向当前 vue 实例，必须用箭头函数的方式定义。后续有更新会继续更新哈🚴..."}, {"id": "6900843573353119757", "title": "伸手党系列四：vue-cli3.0以上 使用 proxy  进行跨域设置", "desc": "跨域：出于浏览器的同源策略限制，当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域。 process： process 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制。简单说它就是在nodejs中的一个全局变量。 pat…"}, {"id": "6911126979651584014", "title": "Vue 1（基本用法｜模版语法｜常用特性）", "desc": "1. 如何理解前端渲染 2. 前端渲染方式 3. 模板语法概述 4. 指令 p440 4.1. 什么是指令 它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。 跳过这个元素和它的子元素的编译过程。…"}, {"id": "6844903613387505671", "title": "动态构建的多页面vue-cli模版", "desc": "vue官方提供了几个vue cli的模版，但都单页面模版，然而在真实的业务场景下还是有多页面模版的需求，百度和google上都能搜索到不少单页面模版改多页面模版的文章，但是没有现成的模版可以直接用，而且多页面模版页面多了之后，首次构建的速度真的很慢，无法忍受。这里我fork了官…"}, {"id": "6844903781876908039", "title": "Vue源码分析系列二：$mount()方法", "desc": "到这里，我们知道updateComponent方法会完成整个渲染工作，在系列三中，将深入分析 vm._render()方法以及vm._update()方法。"}, {"id": "6844903588880187406", "title": "vue.js源码- 剖析observer,dep,watch如何具体的实现数据双向绑定", "desc": "Vue双向数据绑定的核心和基础api是Object.defineProperty,其内部真正参与数据双向绑定流程的主要有Obderver、Dep和Watcher,基于defineProperty和发布者订阅者模式，最终实现数据的双向绑定。那么Obderver、Dep和Watch…"}, {"id": "6844904167803191309", "title": "总结Vue组件的通信", "desc": "总结是一种学习方式，取长补短是一种学习态度。 最常用的一种父子间传递数据的方式。 父组件通过绑定属性来向子组件传递数据，子组件通过 props 属性来获取对应的数据；子组件通过 $emit 事件向父组件发送消息，将自己的数据传递给父组件。 props使得父子之间形成一种单向数据…"}, {"id": "6844903972625448967", "title": "实现一个简单的模板编译机制", "desc": "vue原生的模板编译功能的作用是将模板生成AST，然后通过AST生成渲染函数，再执行渲染函数生成vnode，最后根据vnode进行渲染今天来实现一个简单版的模板编译功能，通过节点筛选和指令解析来完成渲"}, {"id": "6945369332427784223", "title": "手把手学习Vue3.0：Vue3.0正确引入Element UI组件的正确姿势", "desc": "大家都知道饿了么开源了两套Vue的UI组件，Mint UI 移动端的，Element UI PC端的。我使用的是最新的Vue3.0，照着Element的文档引入，结果页面出现白版，F12打开开发者工具一片飘红，一顿操作。原来是从Vue3.0不支持Element UI，而是改成了E..."}, {"id": "6906057852746465287", "title": "使用 vue-i18n ", "desc": "安装文档注解require.contextdirectory:要查找的文件路径useSubdirectories:是否查找子目录regExp:要匹配文件的正则单文件组件使用链接vue.config.j"}, {"id": "6844903591304511496", "title": "如何应对线上的偶现问题", "desc": "作为最接近用户的前端，每每出现问题当然首当其冲，如果必现也就罢了，Debug 或者 抓包什么的反正各种手段，是自己的问题解决问题，不是自己的问题，也方便甩锅出去。但是如果这个项目恰好还复杂度高、链路长、关联方很多，并且这个问题还是 偶现 的 线上 问题，无异于在开动的火车上排查…"}, {"id": "6844903849614901262", "title": "基于 VuePress 定制个人博客网站", "desc": "简单来说，VuePress 是 Vue 驱动的静态网站生成器。VuePress 简单易上手，同时也有足够强大的定制能力，尤其对熟悉 Vue 的前端开发人员而言。相比于知名的博客生成器 Hexo 来说，VuePress 最大优势就是 Vue 带来的灵活性。 在 VuePress …"}, {"id": "6908730959235907591", "title": "基于vue3实现的可视化元素放大缩小", "desc": "最近迷上前端可视化的开发，加上最近vue3的学习，突然脑子发热想试试用vue3的方式封装一个简单的容器放大缩小功能的组件。先看看效果： 类似于在一张纸上，我们称它为container；在这个container里面，用一个东西包住需要放大缩小的元素，让它可以自由放大缩小，正如上述…"}, {"id": "6982026992652664846", "title": "Vue3之列表渲染", "desc": "用v-for将一个数组对应为一组元素 v-for指令基于一个数组来渲染一个列表。v-for指令需要使用item in items形式的特殊语法，items是源数据数组，item是被迭代的数组元素的别名"}, {"id": "6844903862092988423", "title": "前端知识总结之Ajax,axios,fetch篇", "desc": "3. axios 4. Fetch API"}, {"id": "6844904196244766727", "title": "Vue学习总结之Vue的模板语法、计算属性、指令(四)", "desc": "每一篇文章都希望您有所收获，每一篇文章都希望您能静下心来浏览、阅读。每一篇文章都是作者精心打磨的作品。 如果您觉得杨戬这个前端小白还有点东西的话，作者希望你可以帮忙点亮那个点赞的按钮，对于二郎神杨戬这个暖男来说，真的真的非常重要，这将是我持续写作的动力。 上一篇文章的内容主要是…"}, {"id": "6992603347777749022", "title": "【Vue2.x 源码学习】第三十一篇 - diff算法-比对优化（下）", "desc": "【Vue2.x 源码学习】第三十一篇 - diff算法-比对优化（下）：介绍了儿子节点比较的流程；介绍并实现了头头、尾尾、头尾、尾头4种特殊情况比对；"}, {"id": "6844904066208776200", "title": "全栈“食”代：Django + Nuxt 实现美食分享网站（下）", "desc": "在上篇中，我们分别用 Django 和 Nuxt 实现了后端和前端的雏形。在这一部分，我们将实现前后端之间的通信，使得前端可以从后端获取数据，并且将进一步丰富网站的功能。 在这一部分，我们将真正实现一个全栈应用——让前端能够向后端发起请求，从而获取想要的数据。 首先我们要配置一…"}, {"id": "6844904162803580942", "title": "分享一个vue2.x源码中，事件绑定的一个值得学习的小操作。", "desc": "前言vue事件绑定的大概流程前置知识介绍vue是如何通过这个小操作减少addEventListener的调用次数小结"}, {"id": "6844903925452111885", "title": "vue 引入flow 静态类型检测器", "desc": "对于javasscrip 来说，JavaScript 是一种弱类型（或称动态类型）语言，即变量的类型是不确定的。 1. 安装包 2. 生成flow 文件 3. 执行flow 4. 修改babel 5. 添加eslint 代码检测 eslint-plugin-flowtype 1…"}, {"id": "6908641917496623117", "title": "三分钟学会vue中slot插槽的用法", "desc": "插槽，简单理解就是可以即插即用的一段代码。vue中，插槽可以大致分为以下三种： 所以，简单来说，默认插槽就是子组件内占了一个位置，在父组件内调用子组件的时候，写入什么内容，就会在这个位置显示出什么内容来。 由此可见，具名插槽就是，子组件内定义插槽的时候，取了一个名字，父组件调用…"}, {"id": "6844903970381496334", "title": "看vue3源码可以学到什么 :  一 、README", "desc": "尤神发布vue3源码已经有大半个月，不少好奇且习惯早起的鸟儿都已经clone好大神代码的汲取养分了。作为其中的一只，再此将膜拜中的过程及收获汇沉淀汇总，以期形成一个系列提升自己。 本文作为系列第一章，将介绍开源项目必须对准开首枪的内容 README. circleci。read…"}, {"id": "6844903919831760909", "title": "Vue：一步一步解析Axios源码，从入门到原理", "desc": "Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 这样是不是就一目了然。fn2 函数没有拿自己对象内的 age = 20 而是被指定到了 thisArg 中的 age 总结：createInstance 函数返回了一个函数 ins…"}, {"id": "6844903696350838792", "title": "高级 Vue 组件模式 3", "desc": "如果熟悉 react 的读者这里可能马上就会想到 HOC（高阶组件） 的概念，而且这也是 react 中一个很常见的模式，该模式能够提高 react 组件的复用程度和灵活性。在 vue 中，我们是否也有一些手段或特性来提高组件的复用程度和灵活性呢？答案当然是有的，那就是 mix…"}, {"id": "6925016377921110023", "title": "Vue源码之compile入口", "desc": "createCompiler ⽅法实际上是通过调⽤createCompilerCreator⽅法返回的，该⽅法传⼊的参数是⼀个函数，真正的编译过程都在这个 baseCompile 函数⾥执⾏。 该⽅法返回了⼀个 createCompiler 的函数，它接收⼀个 baseOpti…"}, {"id": "6844903880040382471", "title": "徒手撸个vue项目框架（下）", "desc": "路由是vue组件能够灵活切换的关键所在，vue-router是vue的官方路由。 虽然这里已经做得很不错了，但依然没有发挥出vue-router灵活和强大的一面。换句话说，这里能做的事还有很多很多，比如项目是一个管理系统的话，可能会因角色不同，进入首页的侧边栏目是不一样的，虽然…"}, {"id": "6844903502565621774", "title": "Vue2 重构海淘商城SPA", "desc": "这次花了大半个月的空闲时间（加上十一），终于完成一次个人项目的完整重构。仅以此文，来记录一下我写这个项目的感想以及总结。 1.技术杂 我用的技术杂是vue^2.4.2 + vuex^2.4.1 + vue-router^2.7.0 。开发脚手架是vue-cli。 2.项目介绍 …"}, {"id": "6911866685247422471", "title": "你需要知道的Vue3到底哪里有变化", "desc": "Vue 3 提供了一个 emits option,类似于 props option. 这个 option 可用于定义组件可以发送给其父组件的事件。 $children instance属性已从Vue 3.0中移除，不再受支持。如果您需要访问子组件实例，我们建议使用$refs。 …"}, {"id": "6976949449385836552", "title": "【Vue2零基础学习】学习 Vue2 多组件开发", "desc": "基本示例 可以复用，同一组件的不同实例互不影响 增强语义：<div id=\"counter\"> VS <counter > 多组件开发基础 每个组件一个文件，以后缀 .vue 结尾，一般放在 src\\"}, {"id": "6895355256939479047", "title": "如何避免在Vue应用中违反SOLID原则", "desc": "在这篇文章中，我将讨论如何在 Vue 应用中使用 SOLID 原则。 接下来我们看看如何在 Vue 实战中避免这些原则，我们从一个 TODO LIST 项目中去体会这些观点。 用 vue cli 初始化一个 Vue 项目。 我们用 vue2.6.10 + typescript3…"}, {"id": "6844904099712860173", "title": "从零开始使用 Koa2+Vue-SSR 开发博客前台(附上成品)", "desc": "对于开发人员来说，Source指的是自己写的代码。对于webpack来说，Source指的就是需要让它来打包的一些资源。 Vue-SSR: 需要1个主入口（app.js）和2个分入口（server.entry.js和client.entry.js)。为什么需要2个分入 口，介绍…"}, {"id": "6844903628944179213", "title": "vue observer 源码学习", "desc": "vue最重要的应该就是响应式更新了,刚开始接触vue或多或少都能从官方文档或者其他地方知道vue响应式更新依赖于Object.defineProperty()方法,这个方法在MDN上有详细讲解,不过,如果是初学者的话,直接去看响应式更新源码还有点难度的,最好是先用项目练一遍,对…"}, {"id": "6985820916059996196", "title": "VUE+elementUI 实现上传图片", "desc": "单独封装的上传图片的axios方法 覆盖框架默认的上传方法 :http-request=\"requestUpload\" 上传前对图片格式和大小做校验 上传图片的方法"}, {"id": "6844903969483915277", "title": "VueJS函数式API提案（Composition API RFC）的翻译", "desc": "Vue3要出来了，所以抓紧时间看看有什么新的东西。其中Composition API涉及到的篇幅很长，所以看过之后翻译出来供大家参考，不对的地方欢迎指正。 一套拓展式的，基于函数的API。用于编写灵活可配置的组件逻辑。官方课程，API cheat sheet 下载。 我们喜欢V…"}, {"id": "6969952869663375390", "title": "Vue Diff 算法详解", "desc": "本文将会从从两个问题， Vue 为什么需要 diff 算法，以及 Vue 在什么时刻会使用到 diff 算法 切入，一步步探究 diff 算法在Vue中的应用和实现原理"}, {"id": "6969950005863907342", "title": "vue路由hash和history的简单理解", "desc": "前端路由的实现原理 通过匹配不同的url路径，来动态渲染不同的页面 引出问题--url路径改变会造成页面的刷新 解决办法： 通过hash值的变化实现 url的路径#后边的值不会被解析--> 改变不会造"}, {"id": "6969867472765714469", "title": "14.Vue 2.0双向绑定原理", "desc": "前提 实现双向绑定的做法有多种，Vue采用数据挟持结合发布订阅设计模式来实现的。 通过 Object.defineProperty() 来劫持各个属性的setter,getter,在数据变动时发布消息"}, {"id": "6969924829935845383", "title": "Vue实例-概览&options里的属性", "desc": "把Vue的实例命名为vm是尤雨溪的习惯，我们应该沿用 vm对象封装了对视图的所有操作，包括数据读写、事件绑定、DOM更新 vm的构造函数是Vue，按照ES6的说法，vm所属的类是Vue opt"}, {"id": "6969866701336739848", "title": "Vue跨域请求的处理方式", "desc": "前后端分离是目前最为常用的开发流程, 在这个过程中, 除了相互友好的讨论与研究外, 另前端小伙伴最难受的莫过于跨域请求这四个字 本文列举"}, {"id": "6868884040029011975", "title": "Vue全新重构升级字节跳动招聘网站总结（下）", "desc": "的续篇。本篇文章会重点介绍网站新版本添加的主要功能，并会对有意思的地方详细分析，还有就是对于整个项目的重新概括（技术栈）以及项目中一些典型业务逻辑的实现剖析。同时，2.0版本的项目还增加了几个API类型的自定义组件，比如，进度条弹窗，消息通知，数据加载loading等组件，这些…"}, {"id": "6969997943562731528", "title": "Vue数据响应式（代理和监控）", "desc": "Vue在创建实例时，一个普通的JS对象会传给data选项，修改这个对象的属性，视图会自动更新。这就是Vue的数据响应式。 Vue是通过Object.defineProperty来实现数据响应式的。V"}, {"id": "6844903865347735560", "title": "【第四期】基于 @vue/cli3 插件，集成日志系统【SSR第三篇】", "desc": "在上一篇文章【第二期】创建 @vue/cli3 插件，并整合 ssr 功能 ----【SSR第二篇中，我们创建了一个 @vue/cli3 插件，并将 ssr 服务整合到插件中。 这篇文章中，让我们来为插件中的 ssr 服务创建日志系统。 至此，我们已经为服务端接入了最基础的日志…"}, {"id": "6935684417390772254", "title": "如何用Vue + SpreadJS轻松搞定前端表格开发？", "desc": "SpreadJS是一款基于HTML5的纯前端电子表格控件，兼容450种以上的Excel公式，凭借其“高性能、跨平台、与Excel高度兼容”的产品特性，备受以华为、苏宁易购、天弘基金等为代表的企业用户青"}, {"id": "6844903635596361742", "title": "直接将vnode渲染成canvas", "desc": "基于Vue的vnode，类似于html2canvas，这里将vue的vnode渲染成canvas展示。不需要通过html。简单的对比： html2canvas: vnode -> html -> canvas vnode2canvas: vnode -> canvas"}, {"id": "6980259533381697573", "title": "Vue封装一个iconfont组件", "desc": "Vue手动封装一个iconfont组件，可以通过输入具体的图标名直接展示想要展示的图标，并可以对样式进行一系列操作"}, {"id": "6909713287009533965", "title": "vue3:圣诞糖果 ref-Sugar 初体验", "desc": "ref: 将使用 ref()来包裹一个赋值的变量。如果这个变量已经是一个ref 变量，则它将返回 as-is。这意味着我们可以使用 ref: 来声明任何一个函数返回的 ref 变量；举例： composition 函数通常返回refs对象。要声明多个具有解构的ref绑定，可以使…"}, {"id": "6922277560713904135", "title": "手动实现一个极简版 Vue3 Reactivity", "desc": "前言之前对Vue3的响应式源码进行比较详细的解读，这次就来手动实现一个简单的响应式响应式原理我们首先来通过流程图整体回顾下Vue3Reactivity的整体流程代码实现工具函数数据存储主要逻辑trac"}, {"id": "6844903559801257998", "title": "vue-cli脚手架项目构成", "desc": "初学vue，当脚手架刷刷刷的一次性拉下来那么多JS，和.vue的文件时，应该或多或少都有点蒙蔽，vue官网的介绍和node上面的提示都有点作用，我想每个人都走过那些坑吧，因为vue对于代码格式要求很高，所以写的时候慎重慎重。下面放一张图这张图也是从网上盗来的祖传图--! bui…"}, {"id": "6844903526510886920", "title": "使用vue解决复杂逻辑", "desc": "每一条数据需要提供第一个select的options选项；后面的文本框需要输入类型；切换为区间输入的时候数据格式的切换，每条数据的唯一name属性。 封装成组件，通过传入的optios渲染第一个select,根据传入的type类型，使用v-if渲染文本输入框。 通过父组件v-f…"}, {"id": "6930911620990402568", "title": "Vue源码之compile之optimize", "desc": "当我们的模板 template 经过 parse 过程后，会输出⽣成 AST 树，那么接下来我们需要对这颗树做优化，为什么要有优化过程，因为我们知道 Vue 是数据驱动，是响应式的，但是我们的模板并不是所有数据都是响应式的，也有很多数据是⾸次渲染后就永远不会变化的，那么这部分数…"}, {"id": "6991441703979171871", "title": "总结 Vite2.x + Vue3.x 有哪些常用的基操｜ 8月更文挑战", "desc": "前言 到现在 Vue3.0 正式发布快有一个年头了，同时后续也发布的更快的打包工具 Vite 也更新到了 2.x版本，相信有很多小伙伴也已经在公司的新项目中应用起来，体验这一快感，下面这篇文章总结下项"}, {"id": "6985754852844372004", "title": "[Element Plus 源码解析] Affix 固钉", "desc": "一、组件介绍 Affix组件用于将页面元素固定在特定可视区域。 1.1 属性 position：指定固钉的位置，可设置为top或bottom，默认为top offset: 设置偏移距离，默认为0 ta"}, {"id": "7005338019267870727", "title": "Vue果果记账-导航栏", "desc": "初步导航栏 在App.vue中使用 <router-view/> 进行页面渲染，使用 <router-link> 进行页面切换 <router-view> <router-view> 组件是一个 fu"}, {"id": "6865451649817640968", "title": "【Vue进阶】——如何实现组件属性透传？", "desc": "那怎么才能将属性传递到内部的 el-input 组件中呢，直接给 el-input 加一个 v-bind=\"$attrs\" 即可。 虽然上面可以解决了大部分的问题了，但同事发现并不能满足场景，主要是他用了动态组件 component。他的想法是通过 JSON Schema 的方…"}, {"id": "6995440542347853855", "title": "Vue 源码（六）patch 过程（二）", "desc": "patch过程（一）说的是初始渲染，而这篇则是解析组件更新全过程，以及父组件如何通知子组件更新。并以图文形式逐步分析 diff 算法。"}, {"id": "6903693990781321230", "title": "JS-VUE-老虎机抽奖", "desc": "以上就是大概的实现思路了，有些地方还是略显粗糙的；另外从整体的描述来看，一些兼容的参考数值还是有点绕的，还是需要结合源码去跑一下，不然可能没有太直接的代入感；到最后也是希望能抛砖引玉了，探讨下多种实现方案，对比分析一些优缺点。"}, {"id": "6844903597986037768", "title": "当面试官问你Vue响应式原理，你可以这么回答他", "desc": "看过vue官方文档的同学，对这张图应该已然相当熟悉了。 听过太多回答，通过Object.defineProperty，可是再详细的问时，对方浑然不知。 这里我们用不到100行的代码，实现了一个简易的vue响应式。当然，这里如果不考虑期间的过程，我相信，40行代码之内可以搞定。但…"}, {"id": "6999526932832485407", "title": "一、Vue3+Ts+Vite+AntdUI构建后台基础模板——构建初始项目", "desc": "Vue3+Ts+Vite+AntdUI构建后台基础模板系列文章 此篇文章为第一篇：《构建初始项目》"}, {"id": "6844903939603709966", "title": "2019 Electron+Vue+Ant Design Vue仿网易云音乐windows客户端实战分享(上)", "desc": "登录，私人Fm，歌单，专辑，歌手，排行榜，MV，视频，评论，搜索，用户，动态，粉丝，关注，云盘，收藏... 路由导向，局部刷新，首页栏目调整并持久化... ... 点击下载应用。 拖动对话框的身影在项目中还是挺常见的，如首页中的栏目调整对话框，收藏歌单等。 然而Ant Desi…"}, {"id": "6844904087952031757", "title": "使用vue实现HTML页面生成图片", "desc": "随着网络的发展，越来越多的网络平台应运而生。如何获得更多的流量，吸引更多的眼球已经成为网络平台生存、发展的必要条件。现在网络平台最常见的一种宣传方式就是人邀人。 我最近就接到一个需求，做一个海报页面，并且能保存到手机，方便用户分享给朋友，希望能够达到人邀人的效果。 问题来了：二…"}, {"id": "6974224013501399048", "title": "Vue - The Good Parts: nextTick", "desc": "nextTick 在 Vue 中是一个很出名的工具函数，我们在实际运用的时候也经常会用到，那么它实际上到底有什么样的作用，Vue 中又是如何设计的，我们在日常中有什么场景是可以借鉴的"}, {"id": "7003277929190785061", "title": "Vue3导出xlsx数据表格", "desc": "导出表格数据 有时候在做后台项目的时候通常会有这样一个需求，需要把很多用户筛选出来的数据导出进行传递，其实可以利用原声js实现的，今天只是记录一下使用插件实现的方法，毕竟插件兼容好开放速度会快一点的。"}, {"id": "6987265915142275085", "title": "前端通过pdf.js，使pdf转为canvas", "desc": "背景 公司需要前端在pdf上进行圈选区域，把区域给后端，然后识别文字的功能。 第一想法就是使用画布来实现。 在vue中使用pdf.js 1、安装 npm i pdfjs-dist@2.4.456 -D"}, {"id": "6984985230012579853", "title": "Vue3+Vite2+typescript的基础用法(1)", "desc": "前言 虽然已经2021.7月了，但是靓仔还是没有项目真正用到vue3+vite2。所以在Vue3 + SSR + Vite中承诺的出项目实战只能延后了。 之所以想写这篇文章，是因为靓仔自己也不怎么会V"}, {"id": "7000254022464569351", "title": "nextTick原理解析(进阶必备知识)", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 我们知道，Vue 是异步更新，也就是说，假如你触发了下面这样一个事件： 在你的 Vue 视图中， testNum 会发生变化。不过需要注意"}, {"id": "6999457906122833934", "title": "vue3视频播放插件vue3-video-play的具体使用方法", "desc": "vue3-video-play基于vue3开发的视频播放器插件,简单易用,功能强大,ui还算好看,使用vite2+vue3开发"}, {"id": "7005751770638974983", "title": "npm install时候出现依赖安装报错问题", "desc": "> 在维护别人的项目的时候，git克隆项目后，运行 `npm install`的时候，出现下面的错误： ```js //报错信息： npm ERR! code ERESOLVE npm ERR! ER"}, {"id": "6989505652494336013", "title": "Vue实战之从零搭建Vite2+Vue3全家桶（三）", "desc": "闲暇时间写写文章，能写多少写多少，主要是用来总结完善一下自己的技术栈，查漏补缺。 上一篇完善了http请求工具的使用，本篇主要介绍icon图标管理插件的使用。"}, {"id": "7004478912457768996", "title": "Vue指令中v-show 与 v-if 区别", "desc": "Vue指令中v-show 与 v-if 区别 v-show v-show 只是在 display: none 和 display: block 之间切换。 无论初始条件是什么都会被渲染出来，后面只需要"}, {"id": "6931189766109003783", "title": "基于vue2、echarts5的数据大屏", "desc": "基于vue2、echarts5的数据大屏，主要用了echarts中的柱状图、折线图、饼图等基础图表，以及地图。"}, {"id": "6997039886817558541", "title": "分享 6 个实用的 Vue 技巧", "desc": "Vue 已经成为很多公司前端项目的首选框架，而要成为一个会用 Vue 的开发者并不需要花太多时间和精力去学习大的概念，但作为成为一个更高级的开发者就需要去深入框架和基础知识的学习。"}, {"id": "6888925879243079687", "title": "使用Vue3封装一些有用的组合API", "desc": "本文将介绍如何使用Vue3来封装一些比较有用的组合API，主要包括背景、实现思路以及一些思考。 就我自己的感觉而言，Hook与Composition API概念是很类似的，事实上在React大部分可用的Hook都可以使用Vue3再实现一遍。 为了拼写方便，下文内容均使用Hook…"}, {"id": "6995337995641421854", "title": "vue入门：组件概述", "desc": "组件这是我参与 8 月更文挑战的第 12 天，活动详情查看： 8月更文挑战 是一个自定义元素或称为一个模块，包括所需的模板、逻辑和样式。在HTML模板中，组件以一个自定义标签的形式存在，起到占位符的功"}, {"id": "6989055383486758919", "title": "网页RTL布局适配方案和rtlcss插件在项目中实践", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 前言 bigo作为全球化的互联网企业，产品体验要求国际化，本地化，所面向的用户来自世界各地，"}, {"id": "6844903609532940295", "title": "v-charts | 饿了么团队开源的基于 Vue 和 ECharts 的图表工具", "desc": "在使用echarts生成图表时，经常需要做繁琐的数据类型转化、修改复杂的配置项，v-charts的出现正是为了解决这个 痛点。基于Vue2.0和echarts封装的v-charts图表组件，只需要统一提供一种对前后端都友好的数据格式 设置简单的配置项，便可轻松生成常见的图表。 …"}, {"id": "6999572122041319438", "title": "从源码角度理解Vue父子组件生命周期函数执行顺序", "desc": "从源码分析父子组件生命周期函数执行顺序问题，根据流程图相信你也能从源码层面理解表面顺序背后的代码逻辑，之后再也不用担心面试官的问题了"}, {"id": "6990593017874743310", "title": "Vue封装通用table组件", "desc": "对于大部分的后台管理系统，数据表格的展示大同小异，由于不想写重复的代码，所以我选择封装通用table组件，解放双手。"}, {"id": "6983510277576720415", "title": "打印100种格式迥异的医用图文报告单——1周的时间有点长", "desc": "大家在工作中最烦恼的是什么？ 是不是重复做类似的工作啊？你有过设计报告做到吐的感受吗？ 是的，最近我碰上了个大麻烦🥺，Ctrl +C、V键快被我敲掉了。"}, {"id": "6992074358965420069", "title": "使用vue3给所有ui组件披上外衣", "desc": "在实际项目中曾经有过这么一个需求，需要把所有组件的size都设置为小号。当时项目时间短，只能使用编辑器全局替换，现在正巧有时间，于是但是用vue3的语法把ant-design-vue(2.x)提供的所"}, {"id": "6989061523943473159", "title": "简述：Vue2和Vue3开发区别", "desc": "响应式原理api的改变 diff算法，渲染算法的改变 建立数据 data 支持碎片 methods 生命周期钩子 — Lifecyle Hooks 计算属性 - Computed Properties"}, {"id": "6980065786564411399", "title": "[项目篇]vue3+ts   移动端和pc端双端实现瀑布流 - 第六天", "desc": "实现效果 html部分 css部分 由于这本来是在公司实现的，公司的代码就不展示了，处理了一下，变成移动端了，可是是基于bootstrap5.0去实现的，有点懒 js部分 讲解： 结尾 记叙文： 12"}, {"id": "6844903605850341383", "title": "毕业一年左右的前端妹子面经总结", "desc": "先想清楚你辞职想去的下一家的初衷是什么，是加薪资、提升技术 or 换个工作环境。根据你自己的真实情况，投简历的时候针对性地看看公司的招聘要求，先看看符合度是多少，以免遇到要求极度不符合又没有在商量好的前提下去面试了，最后的结果可能就是你还不错，但是不符合我们公司的要求。 准备工…"}, {"id": "6989525171371507720", "title": "“浙里办“项目单点登录、埋点、二次回退的问题", "desc": "大家可以看一看语雀《“浙里办”h5微应用接入流程》这篇文档。 接下来我将针对大多数人以及我个人遇到的一些问题做本篇文章的核心讲解： 1.单点登录，首先分为个人用户的单点登录和法人用户的单点登录： 个人"}, {"id": "6844904146915573773", "title": "Vite 原理浅析", "desc": "已经好久没有写博客了。本文不说 Vue3.0 了，相信已经有很多文章在说它了。而前一段时间尤大开源的 Vite 则是一个更加吸引我的东西，它的总体思路是很不错的，早期源码的学习成本也比较低，于是就趁着假期学习一番。 本文撰写于 Vite-0.9.1 版本。 一个是 Vite 主…"}, {"id": "6998462420574273572", "title": "怎么用 Vue Composition 造轮子", "desc": "最近项目临近尾声，终于有时间来对这段工作总结。其实之前使用的一直是 Vue 但是现在公司的主要业务使用是 React 为此还特意看了许多文章，加上实际上这两个框架有很多类似的地方，所以就有了这篇文章。"}, {"id": "6983837431971708965", "title": "vuex数据持久化", "desc": "业务需求： 在基于vue开发SPA项目时，为了解决页面刷新后数据丢失的问题，我们一般都是将数据存储在localstorage或sessionstorage中；当数据需要全局处理统一管理时，我们也会借助"}, {"id": "6978738327952293896", "title": "Vue - The Good Parts: keep-alive", "desc": "Vue 中有一个特别好用的组件 keep-alive 组件，我们在很多场景下，都是可以借助于这个组件来提升我们的产品体验，基本上0成本实现缓存效果。那这个背后是怎么实现的，一起学习"}, {"id": "6907210240773586951", "title": "仿抖音视频全屏播放&滑动切换", "desc": "随着移动技术的快速迭代，数据流量费用的快速下降，视频、直播正成为全民的媒体盛宴，我司必然也不会缺席此次盛宴，这里讲述的是通过h5实现仿抖音视频全屏播放&#x26;滑动切换的效果,供我司直播鉴定回放视频使用。 此属性用于定义视频是否预加载。属性有三个可选择的值：none、meta…"}, {"id": "6844903593556836359", "title": "vue多页面开发和打包的正确姿势", "desc": "两套源码的话，后台可能开两个端口，然后需要用nginx反向代理可能比较麻烦，而且前端开发也比较麻烦麻烦，毕竟需要维护两个git仓库，两套git上线流程，可能会损耗很多时间。 对自己的技术(盲目)自信,也想尝尝鲜，分析出需求也不算很复杂。选了第一种方案，就是多个单页面应用在一套源…"}, {"id": "6999897364597047326", "title": "Vue2生命周期官网图示的理解", "desc": "今天想来总结一些关于生命周期的知识，其实一开始看生命周期的时候是一头雾水的，但是Vue官网有句关于生命周期的话说的好：“你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高"}, {"id": "6844904025725337614", "title": "[Nuxt 系列 08] Nuxt Plugin：为应用加入第三方统计代码", "desc": "只需要把它插入到网站的每个页面之中，用户每次访问页面就会执行脚本，并获取一个 js 文件，继而发送请求进行必要的数据收集工作。 每一次进入新的页面都将产生上图所示的 4 个 http 请求，分别代表从上个页面的离开，在新页面加载统计代码，代码加载后执行并发送当前页面的统计信息。…"}, {"id": "6854573218947137543", "title": "Vue3 中的 getter 和 setter 源码简解", "desc": "接收 isReadonly（只读） 和 shallow （浅转换为 Reactive---> shallowReactive）两个参数。参数表示生成不同类的 getter 接下来是一系列的判断输入，返回对应的值。 开始的判断是关于类型的判断（ReactiveFlags.IS_R…"}, {"id": "6884816877785186317", "title": "Vue 数据响应式", "desc": "简介Vue中的响应式是指在Vue中当data中的数据改变后，如果视图上有用到该数据，那么视图也会“自动”更新。代码如下：这里id为app的div中会显示hi当message改变了之后div中的内容也会"}, {"id": "6844904025301712910", "title": "VUE 3.0 API 尝鲜体验", "desc": "可以下载@vue/composition-api包，在main.js中引入，就可以在vue2的项目中同时使用vue3的api啦。 clone下来，install 依赖后，build一下，然后run dev 就可以在/packages/vue/dist目录里找到编译好的vue，引…"}, {"id": "6943478980972380168", "title": "web项目对接钉钉扫码登录", "desc": "https://oapi.dingtalk.这个链接两个点需要注意，第一个是redirect_uri参数，是通过后台配置的，具体什么位置配置的呢？看截图： 这个需要你们的管理员进去，然后按照图示找到配置的地方，这里有人就问了，这个地址写什么？一般的话写的是您的web的登录入口的地..."}, {"id": "6914814786781839373", "title": "从零开始，用elementui躺坑vue - favicon.ico", "desc": "当我们进入某些网站的时候，会发现浏览器最上方的标题栏的左侧有一个带logo的图标，这就是ico的作用。使用ico图标可以可以让读者更容易识别您的网站，增加流量收入；其次，更容易产生专业的美感，还能一定程序上减轻服务器的流量带宽费用 favicon是Favorites Icon的…"}, {"id": "6945619137179680804", "title": "v-model绑定数组的用法（以动态增减form表单中的input输入框为例）", "desc": "在我们的印象中，v-model的用法好像就是绑定一个data中的数据(比如输入框)。比如下面的常见用法： 这样就会给我们造成一个错觉，好像v-model就是绑定一个数据字符串。其实v-model不仅可以绑定字符串，还可以结合v-for绑定数组。如下面的用法： 下图中的这个效果图…"}, {"id": "6987932853216477198", "title": "2. vue2的应用: 全局相关", "desc": "前言 上一篇，我们针对vue2的应用层面，抛出了3个问题： vue是什么？ 怎么使用vue？ vue都有哪些API，它们是如何使用的？ 这一篇，让我们逐个去解决上面的问题。 Vue是什么？ 以上引用官"}, {"id": "6844903544965824526", "title": "使用vue实现grid-layout功能", "desc": "先clone项目到本地。 git reset --hard commit命令可以使当前head指向某个commit。 点击复制按钮来复制整个commit id。然后在项目根路径下运行git reset。用浏览器打开index.html来预览效果，该插件的html主要结果如下： …"}, {"id": "6844903827775160334", "title": "vue的keep-alive中使用EventBus", "desc": "最近项目中由于列表居多且都做了下拉刷新上拉加载，所以就使用了keep-alive组件来缓存页面数据，但是当在其他页面做一些操作改变了列表数据，当来到列表的时候每次都要下拉刷新一下，体验不好，所以就使用到了EventBus，在需要更新的时候就用EventBus来刷新列表。 kee…"}, {"id": "6864119942670647310", "title": "[翻译] vue3指南-04 Template Syntax template语法", "desc": "Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying application instance's d…"}, {"id": "6844903624431108109", "title": " 剖析Vue原理&实现双向绑定MVVM", "desc": "目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。 D…"}, {"id": "6844904003772350478", "title": "webpack 按需打包vue项目", "desc": "1：公司项目页面定制化卖给不同的甲方，有的客户要A,B,C模块，有的要C,D模块，有的要A,D模块。如何按需打包给对方？ 核心逻辑其实就是构建不同的router.js来区分，客户1的router里含有A,B,C，客户2的router里含有C,D即可。 我们可以想到把router…"}, {"id": "6844903598095089671", "title": "一起来为 Vue.js 写 Date/Time Picker 组件", "desc": "Date/Time Picker 是前端常用的组件, 这里向大家介绍如何写一个."}, {"id": "6978290199671341086", "title": "vue入门教程之基础语法", "desc": "vue入门教程之基础语法 欢迎关注博主公众号「java大师」, 专注于分享Java领域干货文章, 关注回复「资源」, 免费领取全网最热的Java架构师学习PDF, 转载请注明出处 https://ww"}, {"id": "6911097356716883976", "title": "Node.js/Vue.js使用jsSHA库进行SHA1/2/3加密", "desc": "官方Github戳这里，目前已有2k的star，这里是一些使用加密算法的例子。 首先声明了一个shaObj，通过update传递明文，并通过getHash(\"HEX\")即得到哈希值，另外update可以调用多次，最后使用getHash即可。 jsSHA()有三个参数：哈希算法、…"}, {"id": "6844903881911042062", "title": "【Vue原理】VNode - 源码版", "desc": "首先，第一个问题已经很烂了，网上有很多相关的内容，为了内容的完整性，所以也放上来哈哈。 VNode 表示 虚拟节点 Virtual DOM，为什么叫虚拟节点呢，因为不是真的 DOM 节点。 1、兼容性强，不受执行环境的影响。VNode 因为是 JS 对象，不管 Node 还是 …"}, {"id": "6881951074085781511", "title": "三分钟为你细数 Vue el-form 表单校验的坑点", "desc": "Vue 的 el-form 提供了表单校验功能，通过 :rules 属性设置校验规则，并通过 el-form-item 的 prop 属性绑定校验规则。通过封装，让前端校验更方便。具体使用过程中，有几个容易出错的地方，本文来整理一下。每一个坑都是笔者亲自趟过的，写完本文后，以后…"}, {"id": "6844903841888993288", "title": "组件中 watch props 根据 v-if 动态判断并挂载 DOM 的问题", "desc": "Chart 组件通过接收数据 watch prop 的变化动态的调用 echarts 的 setOptions 方法，最终渲染数据。 这样也是错的，因为模板语法中使用了 v-if，那么当 source 并未满足条件的时候，div 当然也不会挂载。因此 div 仍然无法访问到。 …"}, {"id": "6844903630357659655", "title": "Function和Object 应该知道的", "desc": "javascript有5种基础的内建对象(Fundamental Objects)，Object、Function、Error、Symbol、Boolean，而Object/Function尤为特殊，是定义其他内建对象或者普通对象和方法的基础。 详细的了解Object和Func…"}, {"id": "6978131760487858207", "title": "【Vue2.x 源码学习】第二十四篇 - 异步更新流程", "desc": "【Vue2.x 源码学习】第二十四篇 - 异步更新流程；为什么要做异步更新；异步更新的实现思路；数据变更缓存的位置；缓存 watcher 更新逻辑；vm.$nextTick 获取更新后的 dom；"}, {"id": "6844903597688225799", "title": "深耕业务 ---- 探索复杂/超复杂前端业务的开发与设计", "desc": "在简单的业务需求中，可能我拿到的后端数据，就直接可以去渲染视图层，然后就完善功能。从开发的成本和复杂度上考量上，是不值得去做业务拆分。所以，在复杂的业务需求中以及兼顾拆分和维护中，这种业务方法论就可以大展手脚了"}, {"id": "6908701828142071816", "title": "Vue自定义指令、Mixin、Extends、Provide&Inject", "desc": "如果 bind 和 update 的内容一致时，并不关心其他钩子，可以使用此简写。"}, {"id": "6844903506332090382", "title": "我们为什么以及是如何从 Angular.js 迁移到 Vue.js？", "desc": "在我写这篇文章的时候，我们刚刚从我们的应用程序代码库中删除了最后一行AngularJS代码，结束了一个为期4个月的非侵入性工作，将我们的应用程序从AngularJS迁移到VueJS。在这篇文章中，我将分享我们在整个过程中的经验。"}, {"id": "6844904051558055949", "title": "自建vue组件 air-ui (6) -- 创建内置服务组件", "desc": "通过 自建vue组件 air-ui (5) -- 创建第一个组件 Button 我们已经知道怎么创建一个标签类型的组件了。本节我们就继续讲怎么创建服务类型的组件。 以 notification 这个组件为例，他就是一个典型的内置服务组件。其实就是绑定到Vue的原型上，当做全局方…"}, {"id": "6844903860020969486", "title": "Vue项目基础", "desc": "一. Vue 1. 概念 1). Vue是一个MVVM库 C是指响应用户操作、经过业务逻辑处理后去更新视图的过程，在此过程中会导致对view层的引用。 MVVM是MVC的一个衍生模型，这里的 ViewModel把业务逻辑处理、用户输入验证等跟视图更新操作分离开了。MVVM是数据…"}, {"id": "6865199136803815432", "title": "[译] Vue 3 迁移策略 —— 自定义元素的互操作的变化（破坏性改动）", "desc": "现在，自定义元素白名单是在模板编译期间执行的，应通过编译器选项而不是运行时配置进行配置。 有一个新的 v-is 指令可支持 2.x 用例，其中在原生元素上使用 is 可以解决本机 HTML 解析限制。 如果要添加在 Vue 之外的自定义元素（例如，使用 Web Componen…"}, {"id": "6844903879033749517", "title": "【Vue 牛刀小试】：第十四章 - 编程式导航与实现组件与 Vue Router 之间的解耦", "desc": "在上一章的学习中，通过举例说明，我们了解了 Vue Router 中命名路由、命名视图的使用方法，以及如何通过 query 查询参数传参，或者是采用 param 传参的方式实现路由间的参数传递。通过学习我们可以发现，在实现路由间的参数传递时，我们将 Vue Router 与我们…"}, {"id": "6844903576267915271", "title": "记录一个前端bug的解决过程", "desc": "人在江湖飘，哪能不挨刀。 我挨了重重一bug。严格来讲这可能是我职业生涯以来的首个悲惨经历，因为凭我的知识储备和经验，基本上任何可重现的bug都是可解的。然而这个bug却困扰了我三个月之久，它具有以下生理特征： 此bug并不是js报错，而是一个业务逻辑的错误。表现是，用户提交的…"}, {"id": "6844903981521584141", "title": "记录我的Vue.js从会用到精通之路 7", "desc": "这个指令对大家来说应该太熟悉了，它用来条件性的渲染所选中的dom元素。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。如果我们想要去控制多个元素呢？在vue中我们可以使用< template >这个元素来进行包裹，有点像文档碎片，并不会产生一个无用的新标签，但依旧…"}, {"id": "6844903599521153038", "title": "Vue源码阅读一：说说vue.nextTick实现", "desc": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件。 一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"…"}, {"id": "6859904161576812557", "title": "vue动态配置小程序表单页面（一）", "desc": "通过后台配置小程序表单页面设计思路1.设计页面表单组件样式抽取动态参数及样式2.每个表单组件独立文件方便后期维护3.小程序端根据参数渲染对应组件（使用的是uniapp）表单验证库是async-vali"}, {"id": "6910452324775231501", "title": "Vue生命周期详解以及源码解读", "desc": "学习使用Vue,Vue的生命周期是无论如何绕不过去的知识点，虽说单组件的声明周期很简单，大家都能理解，但是复杂稍微复杂一点的场景，往往就是因为对生命周期了解不深入，会引发不少bug。目前项目用的还是Vue2.X版本，所以以下的分析都是基于Vue2.X。 beforeCreate…"}, {"id": "6985817244919922719", "title": "vue3proxy反向代理", "desc": "vue3的反向代理配置，介绍简单的配置流程和注意事项，刚开始自己用反向代理老是改不了请求的url，注意pathRewrite的写法"}, {"id": "6844903504859889677", "title": "44. JS 应用场景(Promise => 图片上传) ", "desc": "PromisePromise.reject()"}, {"id": "6921195083173724167", "title": "HBuilder的vue环境搭建", "desc": "** 不知道自己的电脑是否安装了node.Js可以以管理员身份打开Cmd输入 node -v 如果有安装会出现版本号."}, {"id": "6921158170224099335", "title": "vue抽象组件 keep-alive", "desc": "keep-alive是一个内置抽象组件（它自身不会渲染一个 DOM 元素，也不会出现在父组件链中，abstract: true 属性值决定）。包裹动态组件时，会缓存不活动的组件实例。而不是销毁它们。 include 字符串或正则表达式。只有名称匹配的组件会被缓存。 exclud…"}, {"id": "6844903624900870151", "title": "使用VUE实现textarea固定输入行数与添加下划线样式.", "desc": "设置一张1*35//行高的图片 , 设置背景图即可. 需求:用户固定不论多少字节,只能输入2行. 因为是限制行数,所以不能用maxlength设置. 首先想到计算出用户输入了几行,然后超出部分字符删除掉就OK. textarea元素的整体高度,然后除一下行高很轻松的到目前输入到…"}, {"id": "6844903881571303438", "title": "【Vue原理】依赖更新 - 源码版", "desc": "我们可以看到这个页面的更新函数，作用是调用 渲染函数，然后生成DOM节点插入页面中。"}, {"id": "6899395093057421319", "title": "vue最全知识点「基础到进阶，覆盖vue3.0，建议收藏」", "desc": "说说你对MVVM的理解Model-View-ViewModel的缩写，Model代表数据模型，View代表UI组件,ViewModel将Model和View关联起来数据会绑定到viewModel层并自"}, {"id": "6882680744569733133", "title": "Vue3 新特性浅析", "desc": "Vue鼓励我们将UI和UI的行为封装到组件中，通过嵌套组件来构建我们的App。但是存在这样的一种情景，有多个子组件从逻辑上看是属于同一个父组件的，但是从技术实现的角度来看，多个子组件可能应挂载在DOM的不同位置，比较常见的情景是Modal。在Vue3之前，我们可以参考下Elem…"}, {"id": "6844903908398071816", "title": "Vue中mixins的使用方法和注意点", "desc": "vuex：用来做状态管理的，里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。 Mixins：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。 组件：在父组件中…"}, {"id": "6995068964887855118", "title": "uniapp 腾讯地图", "desc": "uniapp是用vue.js开发所有前端应用的框架，开发人员只需要编写一套代码就可以发布到安卓、iOS、H5和小程序、快应用等平台。本篇文章讲的是uniapp中使用第三方地图的基础教学和案例分享"}, {"id": "6844903645201465357", "title": "webpack + Vue + Hbuilder 打包成App，混合app开发，一个人搞定", "desc": "Hbuilder 官网推荐的UI组件是Mui, 自己定义了方法，剥去了jquery方法，反正我没多少用过，一脸懵逼 ，毕竟学习成本又加重了。 vue react的热门程度我在这里也不说了，看招聘网站可想而知。"}, {"id": "6944885228368298020", "title": "Vue重构项目之权限配置篇", "desc": "最近项目需求不是很多，想到公司后台管理项目有些过于臃肿，相帮它减减肥。 奈何君有意，了却她无情。 jQ+bootstrapt的非主流内衣、template-web的硬核外套、html+css+js的老实牌秋裤、cdn铭牌的各种包包，一眼看上去还不错是不是。跟着她回到家，一开门人…"}, {"id": "6992874580171816973", "title": "学习笔记（三）封装一个简单的 Vue.js", "desc": "如果有问题，或者有更好的解决方案，欢迎大家分享和指教。 交个朋友或进入前端交流群：-GuanEr- 本笔记的目的是更加深入完善的理解响应式。 一、最终目标 编译DOM，解析插值表达式，将表达式对应的值"}, {"id": "6987559229481549854", "title": "5x3 精读Vue官方文档 -  安全", "desc": "精读 Vue 官方文档系列 🎉 报告安全漏洞 如发现任何安全漏洞，请邮件给 security@vuejs.org。会有全职贡献者及时处理。 永远不要使用不可信任的模板 永远不要将不可信任的内容作为模板"}, {"id": "6988894310049513509", "title": "Vue v-for的key值如何设置？", "desc": "Vue的v-for key值到底怎么设置呢？不设置key值，ESlint会报错; key值设置为唯一标识，如item.id可以; key值设置为index通常情况下也不影响渲染。"}, {"id": "6871517861702500366", "title": "小白易懂  |  15分钟基于vue/cli完成服务端渲染", "desc": "为什么要整两句诗呢？我也不知道。就是感觉很厉害！(每一个小白终将成为大佬，从入门到黄袍加身) 哈喽，大家好！我是前端Up主。一个有代码洁癖的前端攻城狮( 哈哈，生活很邋遢(*￣︶￣) ) 小伙伴看到标题会问了，整ssr用nuxt不就完事了？绿色又环保。但是小编想说了：你保不住有…"}, {"id": "7000779730815287332", "title": "vue-router 路由跳转传参刷新页面后参数丢失问题", "desc": "常见场景：点击列表详情，跳转到详情内页，传递id参数获取详情数据。 我们先来看看路由跳转的几种方式： 1、通过params方式传参 通过$route.push的path携带参数方式 (路由配置中指定参"}, {"id": "6993877823060443173", "title": "一定要收藏的5个后台管理系统的前端框架", "desc": "当你开发新项目的时候，如何快速的完成一个项目的搭建，这个时候就需要借助到一些模板了，现在网上各类UI模板都是相当的齐全的，本文就介绍几个靓仔觉得非常不错的前端框架，感兴趣的可以了解一下。"}, {"id": "6844903569330716685", "title": "写了个移动端可滑动（惯性滑动&回弹）Vue导航栏组件 ly-tab", "desc": "前段时间写了一个移动端的自适应滑动Vue导航栏组件，觉得有一定实用性，大家可能会用得到（当然有些大佬自己写得更好的话就没必要啦），于是前两天整理了一下，目前已经发布到npm和GitHub上了，点我到npm，点我到GitHub项目，有需要的同学可以在项目中npm install …"}, {"id": "6993866415916711949", "title": "Vue动画过渡(四)", "desc": "今天来搞搞过渡动画，搞完这个过渡下一篇咋们就做个Todo案例，因为有用到这个知识点。然后这篇文章我们主要就讲解其中的一两个部分啊，包括"}, {"id": "6884173598920015885", "title": "vue3 + ant-design-vue 简易入门", "desc": "最近忙里偷闲，看了下vue3的相关文档，想着写点东西熟悉一下新版的代码。恰好当前时间节点上你能在市面上成熟使用的vue3的UI框架放眼望去，也就只有阿里旗下的Ant Design Vue 2.0.0测试版。正好以前都是用element-ui的，所以就萌生了用这个框架搭一个非常简…"}, {"id": "6995081963614765093", "title": "vue3中定义变量,ref、reactive、toRefs特性详解", "desc": "1.ref定义的变量，改变值要.value,而且在template中不用写.msg.reactive函数传入的为引用类型，例如数组、对象等，但不能代理基本类型值,返回一个响应式的数据对象, 想要使用创建的响应式数据也很简单，创建出来之后，在setup中return出去，直接在te..."}, {"id": "6844904069228658701", "title": "「Vue表单自动保存功能」踩坑", "desc": "所以接下来的问题就变成了如何解决watch 新老值一样的问题。 为了避免每次watch值的时候都去发起请求，我们得考虑去优化api接口的请求频次，这里采用防抖方案是最佳了。"}, {"id": "6999826144992165896", "title": "vue- 数据响应试", "desc": "Vue数据响应式 响应式即对外界的变化做出的反应的一种形式。 const vm = new Vue({data:{n: 0}}) 当修改 vm.n 或 data.n 时，render(data...)"}, {"id": "6844904085955543048", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（七）", "desc": "在之前的六篇教程中我们已经基本实现了迷你全栈电商应用，相信大家对于一个全栈应用的开发已经有了一个全面的认知。但是一个追求完美的工程师是不会吝啬他的艺术创造，仅仅实现应用的功能还不能满足用户的高需求，应用的界面效果也是提高用户体验的关键因素。因此本篇教程将基于element-ui…"}, {"id": "6850037271106682887", "title": "仿去哪儿网项目视频学习总结  ", "desc": "本文就不根据整个项目从头到尾来详写了，掘金社区很多写得很好的大神已经把这整个项目总结的文章写的非常好了，例如：Chrislinlin作者写的Vue.js开发去哪儿网WebApp，还有一些写的好的文章，我就不一一列举了。 所以本文只记录我个人记录在项目学习笔记本上的一些点。这个仿…"}, {"id": "6990642401408729096", "title": "Vue中 .sync 修饰符的作用", "desc": "Vue 的组件在接受外部数据 props 时，Vue 规定，子组件在通过 props 接受外部数据后只有使用该数据的权利，但没有修改该属性的权利。 因此 Vue 规定组件只能有权使用 props 的属"}, {"id": "6927177789426630663", "title": "vueDiff 算法解读", "desc": "在 Jquery 时代，“前辈们”就告诉过我，频繁的操作 DOM 是很消耗性能的，我们可以在拼接完 HTML 片段后，通过 innerHTML 来替换整个 DOM，效率提升杠杠的。 所以即使我们在浏览器中通过 innerHTML 来替换整个 DOM，浏览器也会通过比较不同的节点…"}, {"id": "6983573531678212133", "title": "vue+element大型表单解决方案(9)--数据比对(下)", "desc": "上一篇实现了基本的数据比对，只是场景比较简单，比对的都是文本类控件的数据。这一篇将补充一些复杂控件的数据比对，比如select、radio、checkbox等，他们都有一个共同的特点，即value并不"}, {"id": "6844903935816237064", "title": "深入剖析Vue源码 - 你了解v-model的语法糖吗？", "desc": "由于v-model和前面介绍的插槽，事件一致，都属于vue提供的指令，所以我们对v-model的分析方式和以往大同小异。分析会围绕模板的编译，render函数的生成，到最后真实节点的挂载顺序执行。最终我们依然会得到一个结论，v-model无论什么使用场景，本质上都是一个语法糖。…"}, {"id": "6998778029665157157", "title": "nextTick与setState的对比", "desc": "在现代前端框架中，最火的就是vue和react了。现代前端框架的流行极大的提高了前端开发的工程能力和效率上的提高以及解决复杂和通用问题时生态所提供的解决方案。vue和react都是通过数据驱动视图，那"}, {"id": "6844903958633267208", "title": "再撸一个 Vue 指令实现拖拽功能", "desc": "之前撸了一个 copy 指令，这次再撸一个拖拽指令。。 emmm。。没错，看起来就是如此的鸡肋，但是莫得办法，大佬喜欢啊。 由于我们项目中用的是 element-ui ，所有这个指令只针对 element-ui的对话框组件哈，如果你们用的别的ui库也有这个需求的，涂涂改改应该也…"}, {"id": "6985324712867921928", "title": "如何重构自己一年前写的 Vue 组件", "desc": "一年多以前写了一个业务项目，当时那个兴奋啊直接就上 Vue + TypeScript 组合拳（之前没写过 TypeScript）。如今暮然回首，垃圾代码藏在灯火阑珊处。"}, {"id": "6854573214485053453", "title": "【面试必备】如何实现 VueRouter？", "desc": "前端面试中，会问到非常多的知识点。框架，几乎是必问的问题之一。Vue 作为目前最流行的 SPA 框架之一，是面试过程中的重头戏。Vue Router 作为 Vue 生态中极其重要的角色，也是我们必须掌握的一项技能。 这篇文章将介绍 Vue Router 的使用，并且自己动手实现…"}, {"id": "6992888734114922533", "title": "基于vue框架，vant组件库，移动端的搜索框实现自动聚焦，使用自定义指令", "desc": "基于vue框架，vant组件库，移动端的搜索框实现自动聚焦，使用自定义指令，通过全局自定义（directives）指令来实现搜索框的自动聚焦"}, {"id": "6992892563636109348", "title": "Vue3 Composition API 学习总结", "desc": "本文是个人对Vue3 Composition API的学习记录总结。 setup setup是组件的一个配置项，值是一个函数。组件中所使用到的数据，方法，计算属性等都要配置在setup里。 setup"}, {"id": "6844903652235149320", "title": "第一个mpvue小程序开发完了，来总结下吧", "desc": "历经了接近两个月的摸索滚爬，抓头吃瓜，各种优化（单押X3），我主导开发的第一个小程序终于要上线了（SKR SKR！）！当然首先要感谢老板没有杀了我——因为在6月初我刚拿到小程序PRD的时候老板问我多久可以做好，我看了看之后说“两周”吧，咳咳，然后。。。一直到现在，我还能活着很A…"}, {"id": "6995183045212897311", "title": "Element 2 组件源码剖析之Divider分割线", "desc": "组件 Divider 多用于区隔内容。 本文将深入分析其源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "7003587726943453221", "title": "Vue中mixins的使用方法详解", "desc": "vue中mixins的使用方法 官方解释： 混入 (mixins)： 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混"}, {"id": "6947941076468826149", "title": "Vue 小白课（五）——Vue3 + Vite 及 VueCLI4项目搭建", "desc": "盼望着，盼望着，2020 年 9 月 ，Vuejs 3.0 发布了；2021 年 2 月，Vite 2.0 发布了。 没办法，撸起袖子干吧！下面我们就来看看如何用 Vue_CLI4 及 Vite 搭建 vVue 3.0 项目。 通过 @vue/cli 实现的交互式的项目脚手架。…"}, {"id": "6986455888143843359", "title": "vue3复用数据懒加载", "desc": "1. 借用插件 @vueuse/core 2. 引用插件 3.使用 4. 对数据懒加载进行封装 这里将此文件放入compositions/index.js中 5. 使用封装好的数据懒加载"}, {"id": "6854573218654519309", "title": "Vue、NodeJS全栈项目~Docker部署优化版~", "desc": "一时兴起的开源项目，到这儿就告一段落了。 修改config文件夹里面的nginx.conf文件，需要指定自己的域名，文件里面有注释说明。 上传web、server、config 3个文件夹和docker-compose.yml1个文件。 首先，需要在电脑安装数据库mongodb…"}, {"id": "6978035248487464974", "title": "Vue3+Ts 项目中 定义  ref 实例 的类型", "desc": "前言 在 vue3 的项目当中，有时候需要使用ref 获取到组件的实例对象。 当结合 typescript 使用时就需要进行类型的定义才能访问到实例的成员 通过定义类型的方式 当然 我们也可以直接定义"}, {"id": "6993261937467326478", "title": "Vue项目H5微信支付（js-sdk）和支付宝支付功能", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 博主相关个人技术博客、微信公众号、视频号、设计作品集 1、获取内置浏览器标识 2、methods（数据处理） ​ 微信支付（两种方法）： 1"}, {"id": "6844903633578885128", "title": "在 Vue 中使用 TypeScript 的一些思考（实践）", "desc": "Vue.extend()：使用基础 Vue 构造器，创建一个“子类”。此种写法与 Vue 单文件组件标准形式最为接近，唯一不同仅是组件选项需要被包裹在 Vue.extend() 中。 vue-class-component：通常与 vue-property-decorator …"}, {"id": "6967904548975280165", "title": "[咖聊] Vue 执行过程", "desc": "[咖聊] 聊从 new Vue 到页面生成 DOM 的整个生命线过程，让你有一个初印象，为后续的详细过程做铺垫。"}, {"id": "6983296621500956685", "title": "vue 系列-实战问题汇总", "desc": "是什么 vue 开发前后端分离的项目的时候，会遇到一些问题。 做个笔记，方便以后遇到问题查找和整理。。。。"}, {"id": "6844903619964190734", "title": "travisCI 持续集成 gh-page 并部署", "desc": "持续集成（Continuous integration）的核心思想，代码先自动化测试用例，通过后集成到主干。它细分的话有两个概念： 给我点赞... 进入自己的 gh 主页，依次：GitHub settings -> developer settings -> Personal …"}, {"id": "6923610069414182925", "title": "《深入浅出vue.js》", "desc": "所有技术解决方案的终极目标都是解决问题，都是先有问题，然后有解决方案，解决方案并不完美，也可能有很多种。 所谓渐进式框架，就是把框架分层。然后往外就是组件机制，在这个基础上再加入路由机制，再加入状态管理，最外层是构建工具。就是根据我们不同的需求一步步去添加这些应用层级。 带着目…"}, {"id": "6900173240334106638", "title": "深入理解Vue中的Typescript(二)-vue_component源码分析和Typescript语法", "desc": "泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 6. ES6-Object语法 Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符. 其中自有属性指的是直接赋予该对象…"}, {"id": "6844903862890053639", "title": "ES6 Proxy实现Vue的变化检测", "desc": "Vue变化检测Object使用DefineProperty、数组使用方法拦截实现。最近，Vue3.0将采用ES6 Proxy的形式重新实现Vue的变化检测，在官方还没给出新方法之前，我们先实现一个基于Proxy的变化检测。 参照之前Vue变化检测的代码，将Vue 变化检测的功能…"}, {"id": "6915405579137744904", "title": "Vue监听路径，重新请求数据", "desc": "在学习的时候遇到一个问题，如下是我写的导航栏的示意图。在所有产品中选取手机，跳转到手机产品界面，然后再产品界面在下拉框中选取蔬菜，页面上的数据没有重新请求，没有获取到蔬菜产品界面的数据。产品界面使用的都是同一个组件，数据请求逻辑写在created生命周期函数中。 以下是链接的示…"}, {"id": "6844903605300887566", "title": "虚拟dom算法解析", "desc": "前言snabbdom是一个虚拟dom算法库，它的特点是效率高、可扩展，许多开源项目采用了这种算法，例如vue。本文试图还原虚拟dom的diff原理（仅限于snabbdom算法）。虚拟dom什么是虚拟d"}, {"id": "6844903605015674887", "title": "Vuex 框架原理与源码分析", "desc": "Vuex是一个专为Vue服务，用于管理页面数据状态、提供统一数据操作的生态系统。它集中于MVC模式中的Model层，规定所有的数据操作必须通过action–mutation–statechange的流"}, {"id": "6844903974961676301", "title": "你真的了解vue吗？vue2.0响应式源码实践", "desc": "1. 先创建一个对象 4. 假如给data添加不存在key会如何呢？ 5. 假如data里面的数据是多层嵌套对象呢？ 6. 假如data里面的数据是多层嵌套数组呢？"}, {"id": "6844903740764340232", "title": "如何避免重复性地做数据维护页面？", "desc": "反正有现成的UI框架，然后就是对着文档写一些自定义标签、配置下属性、通过后端给的接口获取数据填充上... 这是最基本的配置，但Element-UI的Table组件本身还支持很多配置参数，这些配置若也在JSON中，也要正常作用。因此，template模板写法并不适用，或者说自由度…"}, {"id": "6935801815011164167", "title": "重学Vue【createComponent函数做了什么?】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 之前一个简单的 vue 是如何渲染到页面上的，从本篇开始，开始过下 vue 内部的组件化逻辑，组件化也是…"}, {"id": "6935801590196633637", "title": "重学Vue【update转化为真实DOM】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 最开始的几个变量是在数据更新的时候用的，所以这里可以不管，把它们当做为空，接着进入了 initial r…"}, {"id": "6907187213608419342", "title": "模板语法", "desc": "上面代码中双大括号里的内容会被替换成数据对象上 name property 的值。同时，只要数据对象上 name property 发生改变，双大括号里的内容都会更新。 双大括号语法只会将数据解释为普通文本，而非 HTML 代码。要输出真正的 HTML 可使用 v-html 指…"}, {"id": "6844904196160897032", "title": "你需要知道的 Vue.js 中作用域 CSS 的那点事", "desc": "首先，我们来回忆一下「CSS 作用域」这一概念，它的本质是通过让每一个选择器成为一个「unique」的存在，这样就自然而然地形成了作用域。 而提到「Vue」中「作用域 CSS」，我想大家应该立即想到以 scoped 的方式形成的带有作用域的 css。但是，值得一提的是，在「Vu…"}, {"id": "6907100491990335495", "title": "vue2.0源码-初始化", "desc": "我们首先找到定义vue的文件位置src\\core\\instance\\index.js,来看看当我们引入vue.js时，js文件中都发生些什么事。 从源码中可以看出，stateMixin主要定义了$data，$props，$set，$delete，$watch,同时可以看到$da…"}, {"id": "6844904029663789069", "title": "vue-cli 脚手架中img静态和动态路径踩坑小记", "desc": "其实吧，作者在很早之前就遇到过这个问题，当时解决了，因为忙就没有记录下来，现在又再一次遇到了，这次不管怎么样都要抽空记录下来，真的是好记性不如烂笔头。 这次的这个坑着实让我浪费了不少时间，以前犯过的错再次出现，所以一定要养成多记录的习惯。最少能加深你的记忆。相信跟我一样犯错的人…"}, {"id": "6978503683646423076", "title": "【Vue2.x 源码学习】第二十五篇 - 数组依赖收集的原理", "desc": "【Vue2.x 源码学习】第二十五篇 - 数组依赖收集的原理：数组的响应式实现；数组的依赖收集方案介绍；"}, {"id": "6844903587751919624", "title": "vue-cli webpack3 扩展多模块打包", "desc": "场景在实际的项目开发中会出现这样的场景，项目中需要多个模块（单页或者多页应用）配合使用的情况，而vue-cli默认只提供了单入口打包，所以就想到对vue-cli进行扩展实现首先得知道webpack是提"}, {"id": "6899255492736974862", "title": "vue的touchStart事件及click事件冲突问题", "desc": "今天遇到这样问题，给某个元素同时绑定touchStart及click事件后，若在移动设备上，当你点击时，会依次出发这两个事件。 通过使用preventDefault方法（阻止元素默认事件行为的发生）来解决。在touchstart中添加 e.preventDefault()就可以…"}, {"id": "6844904122383073294", "title": "Vue源码的一些理解", "desc": "由于对于vue中一些操作的疑惑比如computed存在缓存机制如何实现，带着问题尝试去阅读vue源码，没想到越往后看想要了解的越多，根本停不下继续深入研究的脚步，断断续续花了几周的时间，终于初略地有点理解，如果有不正确的地方希望得到大牛的指正。 在开始前最好能先了解下Vue.c…"}, {"id": "6844903877712543757", "title": "【Vue原理】VModel - 源码版 之 表单元素绑定流程", "desc": "今天讲解 v-model 的源码版。首先，兄弟，容我先说几句 v-model 涉及源码很多，篇幅很长，我都已经分了上下 三篇了，依然这么长，但是其实内容都差不多一样，但是我还是毫无保留地给你了。你知道我这篇文章写了多久，一个多星期啊，不是研究多久啊，是写啊写啊，不停地修修改改，…"}, {"id": "6873120631991304200", "title": "两种语法糖，搞定Vue组件Prop的双向绑定", "desc": "无论是vue还是react，在父子组件通讯的时候，子组件都禁止直接修改父级传过来的prop，父组件总需要在子组件身上监听一个事件，然后由子组件去触发它，好让父组件来接收到payload去改变state。能不能直接在子组件里修改prop，然后父组件中的state也随之改变呢？ 其…"}, {"id": "6873273991727480845", "title": "从零实现一个简单的 VDOM 引擎", "desc": "简单复习一下概念，VDOM 就是用 JS 对象来描述真实的 DOM；相比真实 DOM，VDOM 没有那么多属性，操作起来开销更小。 tag 属性，用来描述 HTML 标签。 props，用来描述标签的属性。 children，0 或多个子元素，子元素既可以是 VNode 数组，…"}, {"id": "6979787350767304735", "title": "vue全局过滤器常用方法封装，也可单独使用", "desc": "以前经常在csdn现在觉得掘金的风格我蛮喜欢的就吧自己的文章搬运过来了，可以让自己或者需要的人直接打包带走的那种。😆 由于目前开发用的是vue，经常会把一些日常使用的方法封装成一个函数，但是我觉得使用"}, {"id": "6922406182732693517", "title": "what‘s 计算属性", "desc": "模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的,在模板中放入太多的逻辑会让模板过重且难以维护。所以，对于任何复杂逻辑，都应使用计算属性。 当然，我们可以将同一函数定义为一个方法methods而不是一个计算属性computed，并且两种方式的最终结果确实是完全相同的。…"}, {"id": "6877840756300578829", "title": "vue折线趋势图（1）年份数据接入", "desc": "1.引入vant,引用并且注册tab组件2.设置tab相关属性3.设置显示第几个tab界面效果请求接口查看接口返回数据格式页面加载完执行方法请求接口并解析绑定数据完成"}, {"id": "6844904084500283405", "title": "Vue全局API简析", "desc": "Vue.extend的参数为一个组件的options，然后返回一个构造函数用于生成新组件。options有哪些属性呢，想象一下平时我们写的Vue组件，主要有template、data、methods还有生命周期函数等等。 demo的话可以查看Vue文档，以下是粘贴的源码。 通过…"}, {"id": "6979594741386051614", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】032-Composition API：toRef和context", "desc": "3、toRef和context 使用toRef 运行结果 context中的attrs和slots 运行结果 context中的emit 运行结果"}, {"id": "6844903624489828359", "title": "使用 vuetron 调试 mpvue 项目", "desc": "由于小程序开发工具的封闭，我们无法通过安装 chrome 插件来方便地使用 vue-devtools 调试我们的 mpvue 项目。vuetron 是一个 vue.js 的项目调试工具, 同时支持对 vuex 及 vue-router 的调试。这里我们主要使用其对 vuex 的…"}, {"id": "6942392897580990495", "title": "vue - v-model", "desc": "对于input元素，默认使用 value property 和 input 事件。每当输入框内容发生变化时，触发input事件，将最新的value传给message。 则父组件的v-model的等价形式随之变化，而子组件所触发的事件也需要改变。 两者功能十分相似，都是用来实现双…"}, {"id": "6844903605355413511", "title": "vue vue-router vuex等与vue开发相关的使用记录笔记！", "desc": "通过工作之余，自己也记录了一下在使用vue进行项目开发过程中的一些心得、笔记！内容都是简单易懂的！写这些东西的目录主要是想和大家一起分享、学习，也希望通过如此，加深自己对vue开发的掌握程度和理解深度。内容会不断更新中。后期如果有时间，也会从vue源码等方向入手，添加相关章节！"}, {"id": "6844903966094917645", "title": "移动端div实现页面任意位置拖拽(TS)", "desc": "touchcancel 当一些更高级别的事件发生的时候（如电话接入或者弹出信息）会取消当前的touch操作，即触发touchcancel。一般会在touchcancel时暂停游戏、存档等操作。 clientX：触摸目标在视口中的x坐标。 clientY：触摸目标在视口中的y坐标…"}, {"id": "6910579955898417159", "title": "vue3.0自定义指令（drectives)", "desc": "在大多数情况下，你都可以操作数据来修改视图，或者反之。但是还是避免不了偶尔要操作原生 DOM，这时候，你就能用到自定义指令。 举个例子，你想让页面的文本框自动聚焦，在没有学习自定义指令的时候，我们可能会这么做。 在mounted钩子函数里，通过 $refs 获取需要聚焦的 DO…"}, {"id": "6972565355394777095", "title": "Vue中的filter过滤器", "desc": "基础用法 传值法 还可以多次过滤基础用法 传值法 还可以多次过滤基础用法 传值法 还可以多次过滤基础用法 传值法 还可以多次过滤"}, {"id": "6972535696791699493", "title": "自学Vue six day！！！", "desc": "1、自定义属性 1.1、局部自定义属性 实现类似v-show的自定义指令 2.2、全局自定义属性 2、Vue组件化开发（重点！！！） 组件化开发的优势：可维护性高 可复用性高 什么是组件化开发：面对复"}, {"id": "6972560770840297480", "title": "Vue computed 实现原理", "desc": "一、Computed 是什么？ 使用例子： Vue 中我们不需要在 template 里面直接计算{{ this.firstName + \" \" + this.lastName }}，因为在模版中使用"}, {"id": "6946385819162640420", "title": "拉钩教育管理系统项目实战（六） - 课程内容管理", "desc": "判断是章节还是课时。使用不同接口"}, {"id": "6959821986084159525", "title": "Vue中filter与directive", "desc": "vue中的过滤器分为两种：局部过滤器和全局过滤器 过滤器可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加"}, {"id": "6844903782963216397", "title": "Vue源码探究-事件系统", "desc": "紧跟着生命周期之后的就是继续初始化事件相关的属性和方法。整个事件系统的代码相对其他模块来说非常简短，分几个部分来详细看看它的具体实现。 头部先是引用了的一些工具方法，没有什么难点，具体可以查看相应文件。唯一值得注意的是引用自虚拟节点模块的一个叫 updateListeners …"}, {"id": "6953898823714340894", "title": "vue：provide和inject（提供和注入）", "desc": "provide和inject（提供和注入） 允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。 通常父子组件传值 一般通过props属性接收，一旦"}, {"id": "6922091180901531655", "title": "Vue2指令,全局API部分原理(简易) - 功能(更新中...)", "desc": "前言针对一些常见的vue2源码Vue.use原理v-if和v-for原理"}, {"id": "6844904074249240584", "title": "手把手教你搞定权限管理，结合Vue实现菜单的动态权限控制！", "desc": "权限管理在后端项目中主要体现在对接口访问权限的控制，在前端项目中主要体现在对菜单访问权限的控制。在《手把手教你搞定权限管理，结合Spring Security实现接口的动态权限控制！》中我们实现了对后端接口的动态权限控制，今天我们讲下如何结合Vue来实现菜单的动态权限控制。 V…"}, {"id": "6995358405300846623", "title": "Vue—关于响应式（一）", "desc": "一、什么是响应式？ 在了解什么是响应式之前我们现来看一段代码演示 代码示例中，变量y依赖变量x进行求值，但是我们会发现每一次变量x重新赋值时都要手动对y进行求值，存在大量的重复模板，因此，指导我们进行"}, {"id": "6992745514731061285", "title": "如何取消axios请求", "desc": "如何取消axios请求 这是我参与8月更文挑战的第4天，如果你遇到一个场景，请求上万的分页数据，在请求一半的时候需要停止请求。或者在请求一半时切换了选项，开始另一个请求。 不论是以上哪种场景，都会涉及"}, {"id": "6944244998397231134", "title": "Vue | 路由守卫面试常考", "desc": "前言Vue Router 路由守卫导图目录路由守卫分类全局路由守卫beforeEach beforeResolve afterEach单个路由独享 beforeEnter组件路由守卫 beforeRo"}, {"id": "6844904004309237773", "title": "【vue系列】优雅地用 vue 生成动态表单（一）", "desc": "开需求会了，产品说这次需求的表单比较多，目前有19个，后期的表单可能会有增加、修改。我作为这次的前端开发负责人，看到这样的需求，心里知道要这样搞不得把前端累死，首先表单居多，还要变更，以后维护起来也让人心力憔悴。 于是我提议做动态表单，做一个表单的配置系统，在系统里配置表单类型…"}, {"id": "6844904194202140685", "title": "vue使用富文本编辑器wangEditor，且增加附件功能 | 项目复盘", "desc": "一般创建和编辑页面总是同一个，那么当编辑的时候，内容区一开始是有数据的，这里稍微改下组件的写法，增加设置内容，顺便稍微改良写原有的写法。 默认上传图片只有网络链接，如果需要上传本地图片，需要增加额外参数。 上传图片的详细文档参照这里。 其实稍微有点复杂。 这里说下，编辑区和编辑…"}, {"id": "6998354874815479822", "title": "vue 使用$refs获取表单内容及v-model双向数据绑定", "desc": "在实际开发中，我们经常需要获取表单中输入的内容，比如注册，登录等等 vue 中可以使用$refs获取表单内容，也可以使用v-model双向绑定数据来获取 一、使用$refs获取表单内容 代码解读： 我"}, {"id": "6865844599613718536", "title": "（几乎）完美实现 el-table 列宽自适应", "desc": "Element UI 是 PC 端比较流行的 Vue.js UI 框架，它的组件库基本能满足大部分常见的业务需求。但有时候会有一些定制性比较高的需求，组件本身可能没办法满足。最近在项目里就碰到了。 很多页面都需要用到表格组件el-table。如果没有给el-table-colu…"}, {"id": "6986924336468721695", "title": "【记录】如何造一个vite插件(1)", "desc": "在此之前，先做个定位，这不是一篇纯粹的技术性文章，可以把它理解成一个叙述文章，记录我开发插件的过程。"}, {"id": "6844904057975341070", "title": "Vue关闭线上源码移除console", "desc": "文章中的配置，项目基于Vue CLI 3.0搭建，版本大于等于3.0不会有问题，其他环境版本请绕道😂。"}, {"id": "6989459156344242184", "title": "浅析 Vue 两个版本的区别", "desc": "文件名不同（分别通过 bootcdn 引入如下）： 完整版：vue.js 非完整版（只包含运行时版）: vue.runtime.js 完整版体积更大 完整版比非完整版多一个 compiler （编译器"}, {"id": "6844904094591614984", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（终篇）", "desc": "首先，如果你是一路跟着前面七篇教程一路敲过来的，那么将整个 Vue 前端项目放到新创建的 client 目录中，把整个 Express 后端项目放到新创建的 server 目录。如果你打算直接从这一篇开始学习部署，可以通过直接下载我们提供的代码： 我们将整个应用通过 Nginx…"}, {"id": "6907115331651633165", "title": "一文入门React与Vue(适用于只会两者其一的框架学习者)", "desc": "本人原本是一个React开发者，由于最近项目需要维护，技术栈需要会使用Vue，我在之前也从来没有看过Vue的文档，就花了一个周末的时间简单学习了一下Vue的知识点。这里分享一点Vue的快速入门笔记，本文也同样适用于目前只会Vue，但想快速学习React的同学。 每个 Vue 应…"}, {"id": "6844903685990924296", "title": "H5 和小程序拍照图片旋转、压缩和上传", "desc": "最近接到一个“发表评论”的需求：用户输入评论并且可以拍照或从相册选择图片上传，即支持图文评论。需要同时在 H5 和小程序两端实现，该需求处理图片的地方较多，本文对 H5 端的图片处理实践做一个小结。项目代码基于 Vue 框架，为了避免受框架影响，我将代码全部改为原生 API 的…"}, {"id": "6997327699211452429", "title": "vue中使用React组件的方法，支持React Hooks", "desc": "最近开发vue项目需要加载一个React开发的组件库。之前用过vuera这个库，https://github.com/akxcv/vuera ，本来认为应该没有什么问题。结果踩坑了。 事情是这样的"}, {"id": "7001505263924543501", "title": "Vue-笔记-粘自-伊人a", "desc": "简述MVVM MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成了ViewModel-Model层代表数据模型，View代表UI组件，ViewMode"}, {"id": "7002572109444710413", "title": "rtvue-lowcode：一款基于uniapp框架和uview组件库的开源低代码开发平台", "desc": "rtvue-lowcode低代码开发平台 rtvue-lowcode一款基于uniapp框架和uview组件库的低代码开发平台，项目提供可视化拖拽编辑器，采用MIT开源协议，适用于app、小程序等项目"}, {"id": "6880805477886902286", "title": "让Vue3 Composition API 存在于你 Vue 以外的项目中", "desc": "作为新特性 Composition API ，在 Vue3 正式发布之前一段时间就发布过了。 距文档介绍， Composition API 是一组低侵入式的、函数式的 API，使得我们能够更灵活地「组合」组件的逻辑。 不仅在 Vue 中，在其他的框架或原生 JS 也可以很好地被…"}, {"id": "6844903697999200263", "title": "在vue项目中优雅的使用Svg", "desc": "github demo: github地址 如果对您有用，请顺手给个star... 本文主要以vue-cli3搭建的项目为例，来聊一下如何在项目中更优雅的使用svg。 众所周知，vue-cli3已经推出很长一段时间了，大家可以感受一下vue-cli3带来的零配置体验。But，也…"}, {"id": "6844903516822044680", "title": " Vue.js 升级踩坑小记", "desc": "本文并不是什么高深的技术文章，只是记录我最近遇到一个因为 Vue 升级导致我的一个项目踩坑以及我解决问题的过程。文章虽长但不水，写下来的目的是想和大家分享一下我遇到问题时候一个思考的方法和态度。 先看现象：同学们写的代码在 iOS 微信浏览器下不能播放，PC 是可以的；我线上的…"}, {"id": "6915012083126337549", "title": "Vue native事件修饰符的作用 ", "desc": "话不多说，先看一段代码,若想直接看结论,可跳至文章末尾UI效果运行结果运行后报如下错误:点击clickme后输出此时修改父组件,给事件加上native修饰符点击clickme后输出结论native修饰"}, {"id": "6914959937781104653", "title": "Vue2核心原理(简易版)-Mixin混入", "desc": "我们甚至可以全局混入，让每一个vue实例都可以享用此mixin。 核心其实就下面两小段，只不过我们实现mergeOptions这个方法稍费些功夫。 接下来，就是核心的函数mergeOptions的实现了。 首先我们要明确的是，进入mergeOptions的两个参数parent和…"}, {"id": "6914854446870560781", "title": "VUE入门的一些了解——生命周期", "desc": "首先，上图：接着，我们可以通过官方的解释了解：个人认为，上面的解释总感觉有些不得劲，下面是个人在实际工作中的一些简单了解：最后，不可少的计算属性computed和自定义方法methods："}, {"id": "6914610524995092494", "title": "易懂好上手的transition-group函数式复用组件", "desc": "Vue.js中内置了强大好用的过渡和动画辅助系统，让我们在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。Vue提供的 &#x3C;transition> 和 &#x3C;transition-group>的封装组件，可以包裹在我们需要添加进入/离开过渡的元素和…"}, {"id": "6902734669344440334", "title": "理解 Vue 不同构建版本", "desc": "从 Vue 文档的安装章节中，可以知道实际上 Vue 的构建版本可以划分为：完整版和运行时版。在结合例子理解这两个版本的不同之前，有以下术语解释： 此时，在页面中点击 +1 按钮时，初始值 0 会变为 1，实现了 +1 按钮的功能。 以上报错信息表示当前正在使用的是没有模板编译…"}, {"id": "6844903879239270407", "title": "【Vue原理】Directives - 源码版", "desc": "咦，上一篇我们已经讲过白话版啦，主要的逻辑大家应该也清楚了的，今天我们就直接开干源码。有兴趣读源码的同学，希望对你们有帮助哦~ 没看过白话版的，还是先别看源码版了，那么多代码看了估计会懵逼... 首先，上一篇说过，Vue 会在DOM 创建之后，插入父节点之前。对DOM绑定的事件…"}, {"id": "6844903641514508302", "title": "将你的 Virtual dom 渲染成 Canvas ", "desc": "项目概述一个基于Vue的virtualdom插件库，按照Vuerender函数的写法，直接将Vue生成的Vnode渲染到canvas中。支持常规的滚动操作和一些基础的元素事件绑定。github地址：g"}, {"id": "6844904042267672584", "title": "仿照Vue实现模板与数据的绑定", "desc": ". 表示匹配除换行符以外的其它任意字符,"}, {"id": "6844903589509333006", "title": "手写那些年用过的React路由", "desc": "之前没有前后端分离的时候，路由几乎都是针对后台而言的，有人说掌控了路由就相当于占了主权地位，我觉得这句话是不为过的。因为路由才能决定你的页面从哪里来，到哪里去。现在的前后端分离项目，路由几乎都给了前端处理，比如你经常使用的vue-router，react-router，今天就r…"}, {"id": "6925809182700470285", "title": "模块化相关知识", "desc": "将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起。 块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。 把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块…"}, {"id": "6844903891583107086", "title": "Vue 应用单元测试的策略与实践 06 - 如何落地的几点建议", "desc": "在 Vue 项目中如何推动整个团队循序渐进地采取单元测试策略？逐步提高代码质量和测试覆盖率？ 谈到如何推进单元测试的落地，首先得要有一个…"}, {"id": "6938392295418888206", "title": "Vue中响应式改变数组/对象的显示（vue中的数组/对象的set方法）", "desc": "1. 通过数组的七个变异方法实现动态渲染——push pop shift unshift splice sort reverse 2. 改变数组的引用：直接给他一个新的数组 3a. 使用vue的set方法（vue.set） 3b. 使用vue的set方法（实例名.$set） 1…"}, {"id": "6844903789091094536", "title": "Vue源码探究-数据绑定逻辑架构", "desc": "数据观察系统是Vue实现数据绑定、异步更新的核心模块，数据观察系统的实现也是Vue源码里最为复杂的部分，在仔细研究具体实现之前，先对整个数据绑定的逻辑架构进行一个充分的认识，会更有助于解读源码。 先说明一下，因为三个类的名称比较容易让人误解，所以在以后把Observer称作观察…"}, {"id": "6844904128053772302", "title": "Vue.js源码学习之依赖收集", "desc": "Vue.js一个核心特性就是响应式数据，Vue会把普通对象变换成响应式对象，其中核心逻辑就是依赖收集。 该方法能够直接修改一个对象的属性或者添加一个属性，并返回这个对象。其中需要关注的是get和set方法，如果我们修改某个对象的值就会触发setter方法，如果访问某个对象的值就…"}, {"id": "6932310505050603528", "title": "part4 - 模块1 - 03 - Vue事件与表单处理", "desc": "如果我们只是想阻止默认行为，那么直接写prevent即可，后边不写事件处理程序。例如@click.prevent可以放在a标签上阻止默认跳转"}, {"id": "6937976026354057252", "title": "Mockjs的使用", "desc": "之前在公司实习，与后端合作开发，后端经常让我自己mock一下，当时的我并不会这个操作，只能默默的等待后端写好接口再一起调试。现在有时间了可以学习一下。 当前端工程师需要独立于后端并行开发时，后端接口并没有完成，前端可以自己搭建webserve自己模拟假数据，可以选用第三方库mo…"}, {"id": "6844903633423712269", "title": "使用gulp将Vue.component文件中的template转成render函数", "desc": "未经处理前的js文件 myView.js 引入vue-template-inline处理js文件： 输出处理后的js文件: myView.js"}, {"id": "6844904181292072967", "title": "关于 Vue 进阶构造属性", "desc": "传引用可以吗？可以，但是不推荐，容易失控。"}, {"id": "6951668778178445342", "title": "[vue源码笔记]computed和watch的异同@vue2.x/vue3.0", "desc": "computed和watch在项目开发中不可谓不常用，都是基于某些状态变更自动进行更新的工具，那两者之间有何异同呢？"}, {"id": "6844903606978609165", "title": "VBlog 的代码结构, 使用 element, vant 组件开发的纯前端博客", "desc": "VBlog 是一个纯前端, 无须服务器, 实现动态发布的博客"}, {"id": "6917870801945362439", "title": "定时刷新列表并自主实现转圈加载Loading", "desc": "这时候写定时任务定时刷新列表，直到列表内没有正在启动的状态标识，清除定时器。 jobStatus===1 判断任务是不是正在启动的状态，是则显示正在启动，并且加上动态loading的class。 写好定时器，需要判断当前任务列表是否需要启动定时任务。 判断原因：如果用户点击了启…"}, {"id": "6844903970029191175", "title": "vue 2.x内部运行机制系列文章-响应式原理", "desc": "vuejs的核心原理就是响应式。在了解vue.js的响应式之前，我们需要先认识一下vue实现响应式的基本方法Object.defineProperty() configurable，属性是否可以被修改或者删除，默认 false。 enumerable，属性是否可枚举，默认 fa…"}, {"id": "6844903623097319438", "title": "数组的七个 API 的简单实现", "desc": "首先是哪个七个API？join、slice、sort、forEach、map、filter和reduce。 有些公司要求员工要三句话说清一个概念，大致就是“是什么？有什么用？怎么用？”。对于我们的学习知识，我想我们有些时候至少还得知道它是怎么来的。所以今天就来干怎么一件事，简单…"}, {"id": "6844903577152913415", "title": "Django 全栈开发教程之04 - YaDjangoBlog 之 前端 VueJS 篇", "desc": "目录在这里，已经更新的文章如下 Django 全栈开发教程之目录篇 - 2018 年不容错过的 Django 全栈项目 Django 全栈开发教程之01 - YaDjangoBlog 的开发环境配置 Django 全栈开发教程之02 - YaDjangoBlog 的前后端设计 …"}, {"id": "6903497102479851533", "title": "我对js数据类型的理解和深浅(copy)的应用场景", "desc": "本人毕业一所专科院校，所学专业是计算机应用技术，在大学时对前端有了一定的了解之后，觉得自己对前端的兴趣十分强烈，开始自学前端，一路上也是坎坎坷坷，也有想要放弃的时候，还好坚持了下来，并且从事前端开发已将近三年，接下来就是谈谈我对深浅拷贝的理解和使用，望掘金平台上的前辈给于关照和…"}, {"id": "6903449941109112846", "title": "vue3 原理分析之 patch 过程", "desc": "patch 方法中主要根据新的 vnode 节点的 type 和 shapeFlag 分别调用相对应的方法. 处理文本节点，判断旧节点是否存在，不存在则创建并插入文本节点，否则从旧节点中获取对应的 dom 元素并设置为新节点的文本。 处理注释节点，判断旧节点是否存在，不存在则创…"}, {"id": "6943479019254284302", "title": "冒泡排序的实现思路和优化方案", "desc": "今天写一个冒泡排序，当然网上冒泡排序已经写烂了，那博主我能和他们一样吗？为什么写这个呢？因为面试的时候很多时候都会问，但是又要自己显得和别人不一样，所以今天我们写的一个优化的冒泡，提升一下他的排序的性能。console.for (let i = 1; i < arr.for (l..."}, {"id": "6943478995547586573", "title": "vue动态组件的用法", "desc": "import childA from '../childComponent/childA.import childB from '../childComponent/childB.this./deep/ ."}, {"id": "6946171910036127775", "title": "Vue-组件化开发", "desc": "1. vue组件化思想 组件化提供了一种抽象，让我们可以开发一个个独立的可复用的小组件来构建我们的应用。 任何的应用都会被抽象成一颗组件树。 2. 组件化基本使用详情 上面的例子实际上是一个全局组件，什么是全局组件呢，就是在任意一个Vue实例都可以使用。 那么什么又是局部组件呢…"}, {"id": "6946077857395245069", "title": "【避坑指“难”】代码详解：阿里云oss上传视频，服务端签名后直传（vue+element-ui）", "desc": "没有采用JS客户端签名直传上是因为，此过程AccessKey ID和AcessKey Secret会暴露在前端页面，因此存在严重的安全隐患。所以查找阿里云决定使用服务端签名后直传的方案。 主要是获取上传阿里云的加密策略policy和签名signature，以及上传自己要上传到阿…"}, {"id": "6945850468073472008", "title": "vue组件间通信", "desc": "1. props &#x26;&#x26; $emit 2. $parent &#x26;&#x26; $root &#x26;&#x26; $children 3. $attrs组件间通信 vm.$attrs: 是一个对象，用于接受父组件传递的所有的属性。 一般我们接受父组件…"}, {"id": "6844904095665356807", "title": "VUE响应式系统的基本原理", "desc": "这篇文章主要了解vue是如何实现数据的响应式以及这种方式的优缺点并探索更好的响应式方式Object.defineProperty在vue中，实现响应式的主要方式就是Object.definePrope"}, {"id": "6844903928518180877", "title": "vue简单日历的实现方案(改造)", "desc": "虽然短时间没法做到这么精美，但是起码功能得差不多吧，时钟与天气都已经OK，在做日历的时候觉得比较麻烦，就去CodePen找找看，便有了如此。 CodePen上的原项目本身难度不高，繁琐在理清楚日历逻辑（原作者逻辑），以及将此作者项目中关于DOM的操作转换成vue的模板操作。 上…"}, {"id": "6844903696032071688", "title": "实现一个简单版本的vue及源码解析(二)", "desc": "Vue.js的响应式原理依赖于Object.defineProperty，尤大大在Vue.js文档中就已经提到过，这也是Vue.js不支持IE8 以及更低版本浏览器的原因。Vue通过设定对象属性的 setter/getter 方法来监听数据的变化，通过getter进行依赖收集，…"}, {"id": "6902225608881733646", "title": "如何避免在Vue中违反SOLID原则", "desc": "封面图：黄梦莹前言本文为转载外加意译，并重新排版。原文地址：HowtoavoidSOLIDprinciplesviolationsinVue.JSapplication原文作者：ManuUstenko"}, {"id": "6915805271558193159", "title": "Vue中基础知识", "desc": "Vue中基础知识1、双花括号mustache(胡子)/interpolation（插值表达式）2、指令-循环指令基本语法1：基本语法2：3、指令-选择指令语法：作用：根据表达式执行结果的真假，来决定是"}, {"id": "6844903854765506573", "title": "Vue的响应式原理", "desc": "一、响应式的底层实现1、Vue与MVVMVue是一个MVVM框架，其各层的对应关系如下View层：在Vue中是绑定dom对象的HTMLViewModel层：在Vue中是实例的vm对象Model层：在V"}, {"id": "6915668558085259278", "title": "vue通信、传值的多种方式（详细）---", "desc": "朋友们可以百度下 Session Storage（程序退出销毁） 和 Local Storage（长期保存） 的区别。 ②定义子组件，子组件通过 props方法获取父组件传递过来的值。props中可以定义能接收的数据类型，如果不符合会报错。 当然也可以简单一点，如果不考虑数据类…"}, {"id": "6844904063616679950", "title": "vue源码阅读复盘-watcher模块", "desc": "先彻底理解了一下VUE的简介，并写出了一份建议书。关键词有渐进式、自底向上逐层应用、声明式开发、组件化。 之后了解了观察者模式，观察者模式的初衷是建立低耦合的通信机制，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 记得…"}, {"id": "6844903877716918279", "title": "【Vue原理】VModel - 源码版 之 select 详解", "desc": "的确是更新了绑定值哦，可是为什么要更新绑定值为 undefined 呢？想不通....."}, {"id": "6854573213884612615", "title": "Vue 源码学习：Vue 构造函数及初始化做了什么", "desc": "虽然 Vue 出来很长时间了，但是还没有看过源码，只是在刷面试题的时候会涉及到一些源码上的问题，第一次阅读 Vue 源码感觉有些吃力，希望能够坚持下去。 之前也有看过源码的冲动，去 Vue 官网 clone 下来之后就开始看，毫无目的，然后就没有然后了。 最近又有了这个冲动，但…"}, {"id": "6979928802046672903", "title": "vue 系列 -- vue-cli 项目各文件解读", "desc": "vue 项目各文件解读 node_module：存储第三方的依赖模块 public： static：静态资源目录，如图片、字体等 favion.ico：浏览器上的图标 index.html：整个项目默"}, {"id": "6844904199013007373", "title": "Vue 中多次引用 echarts 绘图组件的问题记录", "desc": "这两天在 Vue 项目中，用 echarts 的热力图实现了类似 kibana 机器学习的数据预测图。区别是，笔者用了 tab 签，切换总览和具体攻击 IP 的异常情况。 实现过程中，踩了两个 echarts 的坑，这里总结下这个过程。 DataGraph.vue 组件实现时，…"}, {"id": "6844904117043724295", "title": "详解vue自定义指令", "desc": "除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。 bind 只调用一次，指令第一次…"}, {"id": "6844904032864059400", "title": "Object.freeze()提高Vue.js中大型列表的性能【翻译+解读】", "desc": "这个网站主打，简洁快速的分享一些关于Vue的tips。每周更新，会发到邮件上。正文是翻译，解读是我自己的相关理解。 在开发过程中，我们经常需要获取一些对象，像users信息，列表items，文章信息等等，但是我们不需要去修改这些信息。我们只是把这些信息展示出来，或者放在vuex…"}, {"id": "6844903533158858766", "title": "vuejs 水波纹框架", "desc": "vuejs 水波纹框架"}, {"id": "6924120069702156301", "title": "小白学习 Vue 3.绑定 Class 与 Style", "desc": "总结：对象内部的键值对，键代表 className，而值代表该 className 是否启用。 此外，表达式中的对象也可以放在 data 或者 computed 中。 总结：数组内部的元素，就是每一个 className，也可以在该数组内部定义三元表达式来决定是否启用。 此外，…"}, {"id": "6844904134961840135", "title": "解决百度地图内存泄露问题", "desc": "百度地图中，我们会遇到循环创建marker点时内存占用不停上涨导致页面直接崩掉。或者数据量过大页面渲染CPU占用过高导致页面卡死。 使用百度地图展示车辆的位置，并且30s刷新一次位置信息。 这里只是实现创建marker点，定时器和数据请求就不展示了。在每次循环请求数据回来都调用…"}, {"id": "6943876357004722184", "title": "storageX，js本地储存对象化，操作简单，结合vue,vuex可以很好的数据持久化。", "desc": "sessionStorage 属性允许在浏览器中存储 key/value 对的数据。读写需要这样 麻烦的就是当我们要储存一个对象时需要将它转化为json字符串（最简单常用的转化）。localStorage也是根据键值存储的，具体差异可以百度。 storageX可以将sessio…"}, {"id": "6971674585292865573", "title": "vue组件异步加载，数据相互依赖问题", "desc": "组件数据异步加载，其他接口依赖异步数据 今天遇到这样一个情况，我有一个地图组件<map />,父组件中异步查询数据，回显到地图上。 因为数据和地图 都是异步的，所以哪个先完成不确定。 如果地图先加载完"}, {"id": "6924205965608747022", "title": "Vue3（二）工程化开发方式做项目", "desc": "这是开发中、大型项目的必备技能，网上资料也很多，这里只是一个简单的综合性的介绍。包括vue的全家桶、建立项目的几种方式、UI库的简单使用等。 可以和上一篇的cnd方式做项目做一下对比。 这个就要归功于node了。建立项目的时候，会自动创建一个node的服务，这样我们就可以边写代…"}, {"id": "6844903687022706702", "title": "浅析Vue源码（二）—— initMixin(上)", "desc": "从上面一点一点注释可以看出，主要是为我们的Vue原型上定义一个方法_init。然后当我们执行new Vue(options) 的时候，会调用这个方法。而这个_init方法的实现，便是我们需要关注的地方。 前面定义vm实例都挺好理解的，主要我们来看一下mergeOptions这个…"}, {"id": "6924130250645307400", "title": "vue学习笔记之实例属性篇", "desc": "返回值：返回包含key-value的对象。 props选项用于接受父组件传递的属性，$props表示当前组件接收到的 props 对象。 Vue 实例代理了对其 props 对象 property 的访问。也就是说this.a 等价于 this.$props.a 返回值是一个包…"}, {"id": "6844903944758493197", "title": "vue组件间通讯方式", "desc": "$attrs（属性的集合）和$listeners（方法的集合）。Vue 2.4 开始提供了$attrs和$listeners来解决A->B->C问题，组件间向下传递，可以不用 props注册。v-bind属性传递，v-on方法传递 父组件中通过provider来提供变量，然后在…"}, {"id": "6844903587244425230", "title": "vue cli 平稳升级webapck4", "desc": "应该是parcel出来以后\b，webpack团队意识到其配置确实有点复杂，\b不太容易上手。so, webapck4 开始支持0配置启动。\b\b不过，万变不离其宗，webpack4的\b0配置也只是支持了默认\bentry 和 output而已，即\b默认entry为./src,默认ou…"}, {"id": "6844903624611463176", "title": "适配mpvue平台与浏览器端的微信小程序日历组件mpvue-calendar", "desc": "tileContent参数可以为具体某日定义一个class名，还可以插入一段文本内容。如[{date: '2018-9-20', className: 'holiday', content: '休'}]可以设置2018-9-20这天的class名为holiday，并且生成一个文…"}, {"id": "6844904160412827661", "title": "今天你out了吗？从零到一我们一起学习vue3最新API（持续更新中～）", "desc": "工欲善其事，必先利其器。下面我们先利用vue-cli搭建一个vue的开发环境 调用时机：创建组件实例，然后初始化 props ，紧接着就调用setup 函数。从生命周期钩子的视角来看，它会在 beforeCreate 钩子之前被调用 setup() 函数返回的 property…"}, {"id": "6844903607645503496", "title": "有关js各种数组遍历", "desc": "js数组遍历是在数组操作中经常用到的，前段时间学习vue视频，上边顺带讲解了js数组的遍历方法，当时没有留下笔记，到今天来回想，果然还是忘记了一些，于是还是选择开始在这里记录下来。废话不多说，下面开始。 这个方法应该是js学习者最先接触到的js遍历方法，反正我是第一个接触到的，…"}, {"id": "6844903651421454344", "title": "vue实现一个动效柱状图", "desc": "按照 PM本来的意思，这张图中只有那几个数字是从接口获取的，而且从接口获取到的每项数字的值，与目前标注的数字相差不会超过 10%，所以柱状图的条形高度不用管，直接一张图片静态的就行了，这确实很省事，三下五除二就弄完。 不过，作为一个老(xian)实(de)正(dan)直(ten…"}, {"id": "6908908333558824967", "title": "vue3的基本使用方式", "desc": "所以当我们修改值时，name.value = ‘xxx',此时才能进行响应式更新."}, {"id": "6844904193451360270", "title": "手写简易版vue-next响应式原理", "desc": "前言本文将从零开始手写一份vue-next中的响应式原理,出于篇幅和理解的难易程度,我们将只实现核心的api并忽略一些边界的功能点本文将实现的api包括tracktriggereffectreacti"}, {"id": "6927528163468083207", "title": "[Vue源码]Vue是怎么对数组的变更方法进行增强的", "desc": "Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： 已知Vue通过data中的数据进行递归遍历，然后用Object.defineProperty对其设置存取描述符从而达到响应式。然而其实在上述步骤时，是针对数据类型是对象的变量时采取…"}, {"id": "6943370953736847397", "title": "【Vue3教程】创建你的第一个Vue 3项目", "desc": "2021年2月15日Vue 3正式发布!在尤雨溪的声明中，他宣布了新框架中最大的变化，并谈论了整个Vue团队所做的出色工作。 长期以来，开发者一直在等待Vue 3宣布的真正酷的特性，比如Typescript支持、对大型项目更好的组织、及使Vue应用程序更好的渲染优化。 本文中我…"}, {"id": "6908656804083793933", "title": "Vue首次渲染过程", "desc": "在_init方法中,最终调用了$mount,一共有两个$mount,第一个定义在entry-runtime-with-compiler.js文件中,也就是我们的入口文件$mount,这个$mount()的核心作用是帮我们把模板编译成render函数，但它首先会判断一下当前是否传…"}, {"id": "6901576100531404813", "title": "实用的 vue tags 创建缓存导航的过程 ", "desc": "既然涉及了router跳转，那我们就去查api 发现 keep-alive ，巧了就用它吧。这里我们用到了 include 属性，该属性接受一个数组，当组件的name名称包含在inclue里的时候就会触发keep-alive。 那我们接下来就处理 cachedViews 变量就…"}, {"id": "6844904195791781901", "title": "使用Vue.js做一个极简的问卷调查", "desc": "最近pm问我能不能做类似于腾讯问卷星一样的问卷调查功能？就是pc端这边配置问卷，app用户填写，填写完保存可以查看自己的问卷信息。一开始本着自己的职业操守说：我先看看腾讯问卷星是怎么实现的，到时再给你答复。研究了一下感觉能做。就答应下来了。过几天设计稿下来了就开始动手做了。幸不…"}, {"id": "6991434668528631816", "title": "Vue.js 3.0源码解读：组件的实现-组件渲染(1)", "desc": "每一个Vue.js开发者，最熟悉的部门莫过于组件了。这是Vue.js的核心，组件系统也是它一个重要的概念。整个应用的页面也都是通过组件渲染来实现的。那么，它的内部是如何工作的呢？它是怎讲从虚拟的vno"}, {"id": "6844904113839292424", "title": "最简单的Vue 按钮权限控制", "desc": "实际上所有所有的按钮权限判断都是大同小异。都是很简单的if-else逻辑。要么在单独的页面中去写 v-if，要么就全局处理函数。"}, {"id": "6921582938115014664", "title": "vue3项目搭建笔记", "desc": "项目搭建使用vue-cli搭建项目，选择vue3相关的配置引入一些基本的插件vuex、vue-router、axios，ui方面我们选择使用element-plus配置方面根目录下创建vue.conf"}, {"id": "6977251964245524511", "title": "vue-cli中 webpack模式的简述及应用", "desc": "在公司级开发时，常常需要将开发环境和生产环境分离，比如开发环境需要一些debugger，console操作，生产环境需要执行某些权限校验，这些都可以采用模式进行区分。"}, {"id": "6979945418255925261", "title": "自定义指令推荐", "desc": "在 Vue，除了核心功能默认内置的指令 ( v-model 和 v-show )，Vue 也允许注册自定义指令。它的作用价值在于当开发人员在某些场景下需要对普通 DOM 元素进行操作。"}, {"id": "6994795721949970463", "title": "RSA分段解密 - Vue", "desc": "前言 上一篇文章实现了 Java RSA的分段加解密 ，这里我们介绍在 Vue 项目中如何使用 RSA 分段解密，这里的加解密场景是： 后端私钥分段加密 - 前端公钥分段解密 前端如何使用公钥解密这里"}, {"id": "6966936272006807566", "title": "《观尤大直播后有感》", "desc": "直播点回顾 相信有很多同学因为日常工作忙碌，回家忙着不忙碌，会错过一些大佬的直播，所以就简单总结下上次尤大直播的时候针对大家提出的问题(一些新技术)做出的解答(可能有理解不对的地方也欢迎大家提出哈) "}, {"id": "6919382299251310599", "title": "实现 vue 的数据响应式原理", "desc": "响应式顾名思义就是数据变化，会引起视图的更新。这篇文章主要分析 vue2.0 中对象和数组响应式原理的实现，依赖收集和视图更新我们留在下一篇文章分析。 在 vue 中，我们所说的响应式数据，一般指的是数组类型和对象类型的数据。vue 内部通过 Object.defineProp…"}, {"id": "6908616466287820807", "title": "Vue3 源码学习🗣 组件emit", "desc": "vue3增加了一个emits选项，而且之前都是调用全局钩子函数$emit来出发事件，我们使用composition API 之后，setup里也可以通过上下文暴露出来的ctx.emit来触发事件，可谓玩法姿势又增多了，我们来总结一下吧。"}, {"id": "6881074553574359054", "title": "记一次ElementUI源码修改过程", "desc": "​ 使用ElementUI el-tree过程发现选中节点，键盘移动上下键时(key down\\key up)el-tree默认高亮移动的节点，业务上需要重写此事件。 ​ 从官网发现该事件没有暴露回调接口，故想到了修改elementui源码，重新打包上传到公司的npm私服。 ​…"}, {"id": "6844903854354464775", "title": "VUE 记一次高德地图和Echarts（中国地图）", "desc": "效果图准备工作高德地图申请key安装Echarts中国地图官方API：点我进入创建AMap.js安装Echarts开始使用创建组件distribution.vue写入Echarts需要的DOM写入高德"}, {"id": "6844903904757415949", "title": "VUE+Element UI实现简单的表格行内编辑效果", "desc": "*原理是通过CSS控制绑定的输入控件与显示值,在选中行样式下对控件进行隐藏或显示ElementUItable点击编辑按钮进行编辑实现示例出处:"}, {"id": "6974664014987001864", "title": "tob系统微前端实践总结", "desc": "本文将从笔者tob系统真实实践出发，step-by-step基于qiankun从零实现微前端(带demo地址）"}, {"id": "6844904165492129805", "title": "single-spa的简单介绍与遇到的问题小结", "desc": "其实本来应该写个介绍的，但是我看到其他的文章写得很完善了，所以就来写写我在其中遇到的一些问题就好了。 安装single-spa请看沉末的这篇文章。 为什么要用single-spa呢，是因为公司的项目需要拆项目了，这个时候就需要知道微前端的概念了，那么什么是微前端呢。 由此带来的…"}, {"id": "6844903586929868813", "title": "【cli】这是看过最优秀的Vue-cli源码分析，绝对受益匪浅", "desc": "前段时间看了一些vue-cli的源码，收获颇深。本想找个时间更新一篇文章，但是最近事情比较多，没有时间去整理这些东西。趁这两天闲了下来，便整理了一下，然后跟大家分享一下。如果小伙伴们读完之后，跟我一样收获很多的话，还望各位小伙伴们多多点赞收藏支持一下哦。 Vue-cli是一款非…"}, {"id": "6867705215714344973", "title": "VueCli的介绍及应用", "desc": "通过 @vue/cli 实现的交互式的项目脚手架（项目模板）。 通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。 提供一个运行时依赖 (@vue/cli-service)，该依赖：可升级；基于 webpack 构建，并带有合理的…"}, {"id": "6844904096936230925", "title": "Vue 的错误处理机制", "desc": "任何一个框架，对于错误的处理都是一种必备的能力。在 Vue 中，则是定义了一套对应的错误处理规则给到使用者。且在源代码级别，对部分必要的过程做了一定的错误处理。 该函数可以作为指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。 …"}, {"id": "6844903767490428936", "title": "vue-router 一些容易被忽略的知识点", "desc": "vue-router 使用 path-to-regexp 作为路由匹配引擎，该库可以通过输入的路径生成匹配规则的正则表达式，从而实现路由匹配功能。 path-to-regexp 中常用的方法 pathToRegexp(path, keys, options) 第三个参数为 pa…"}, {"id": "6855129006291992589", "title": "⌨️ Vue项目给应用优雅的绑定快捷键", "desc": "想必各位前端看官也一定做过这样的需求，给我们的应用某些主要的功能绑定一个快捷键。尤其是工具类的产品，让用户可以使用快捷键操作，能大大提高工具使用效率。 但是实际实践过的你也可能知道，这种绑定按键事件的方式都是绑定在了当前 ViewModel 上的。也就是模版字符串 templa…"}, {"id": "6904196639872401415", "title": "vue3组合式 API配合JSX实现高阶组件使用踩坑记录", "desc": "缘由最近项目处于自我驱动状态，那么些东西就尽可能的往规范，长远，学习的角度去写。项目使用element-plus，vue3一、高阶组件和高阶函数1、高阶函数的特点把一个函数当另一个函数的参数传参固定，"}, {"id": "6910895096489574414", "title": "Vue2.X 安装CKEditor5 以及基本使用（一）", "desc": "还有一个比较坑爹的问题，如果是使用这样的集成方案，哪怕自定义也是只能定义集成方案中已有的功能，如果是继承方案中没有的功能，比如ImageReset这些...好像是没有办法再添加。"}, {"id": "6844903510547365901", "title": "从零开始搭建Vue组件库 VV-UI", "desc": "各大厂开始宣布来源xxx-UI，那么如何去开发一套类似于xxx-ui的组件库用于公司的业务呢？"}, {"id": "6844904093891166222", "title": "Vue+ Element Ui 搭建前端项目框架（一）", "desc": "有些方法还是之前框架中的方法。只用于参考，也可以自己写。 文件夹的分类虽然看起来是一个小问题，但是因为一般写项目时候文件会很多且项目体系庞大，所以必须梳理好项目目录结构及文件的分类，以便于以后找相关组件起来清晰明了。 不要在意我为什么倒着描述... 持续更新..."}, {"id": "6844904180746829832", "title": "从零开始解说vue中动态组件的创建和使用", "desc": "2. 导入组件 3. 定义组件 4. 关联组件到固定id 5. 创建数据源，选择节点，加载节点对应组件 6. 根据组件内接口返回，来确认当前组件是否已经完成加载 7-1. 父组件页面js 7-1. 子组件页面js 8. 待优化的点 组件的关联应该是动态的，后台返回关联数据，前端…"}, {"id": "6886297504561037325", "title": "立等可取的 Vue + Typescript 函数式组件实战", "desc": "不同于面向对象编程（OOP）中通过抽象出各种对象并注重其间的解耦问题等，函数式编程（FP） 聚焦最小的单项操作，将复杂任务变成一次次 f(x) = y 式的函数运算叠加。函数是 FP 中的一等公民（First-class object），可以被当成函数参数或被函数返回；同时，这…"}, {"id": "6844903950093664264", "title": "使用 Proxy 构建响应式系统", "desc": "现代前端开发必不可少会用到的 Vue、React 等框架，这些框架的共同之处在于都提供了响应式（Reactive）和组件化（Composable）的视图组件，组件化开发重新定义了前端开发技术栈。结合前端构建工具以及基于框架出现的各种经过精心设计的UI组件库，让前端也进入到了一个…"}, {"id": "6988051370376953869", "title": "vue3+ts dome学习记录（一）", "desc": "初次接触vue3+ts的学习记录。只记录业务层面的只是，底层原理暂不探究。先学会使用，照葫芦画瓢。。"}, {"id": "6919404953203277832", "title": "Vue中transition过渡组件全掌握", "desc": "在冷冰冰的网页上，加上些许过渡或动画，其变化虽小，却能极大的提升页面质感，给人一种顺畅、丝滑的视觉体验。它的实现过程主要是通过css中的transition和animation来实现的。 而在vue框架中也对此进行了封装，提供了便捷的过渡用法。 在进入/离开的过渡中，主要有 6…"}, {"id": "6976781345552859172", "title": "VUE3（二）使用vue-cli创建一个项目", "desc": "VUE3官方推荐使用vite来构建项目，但是并不是说之前使用vue-cli创建项目就不行了。 使用vue-cli创建项目，要确保你的vue-cli的版本要大于4.5.6. 一：安装vue-cli 建议"}, {"id": "6969389623898439711", "title": "Vue - key/diff", "desc": "参考原文-掘金-详解 vue 的 diff 算法 key 的特殊属性，主要用于 Vue 的虚拟 DOM 算法。在新旧 vnode 的对比中，如果不使用 key ，Vue 会最大限度的减少动态元素并尽可"}, {"id": "6914163217124032525", "title": "vue sku后台配置", "desc": "表格头中除了属性，还有图片，价格，库存。"}, {"id": "6844903506839601166", "title": "搭建一个多页面的无依赖的工程化项目", "desc": "最近金拱门比较火，我们先戳开它的官网看看。 用vue/react吧，单页应用满足不了seo，而且IE兼容性不好。上node中间层做服务端渲染又把事情搞麻烦了。只能用JQuery干，但是又该怎么做工程化呢？好像也不是很容易。因为目前大家的工程化方案多是一整套单页应用全家桶，如vu…"}, {"id": "6844903599491776520", "title": "Vue表单类的父子组件数据传递", "desc": "也算是对VUE中的自定义事件和props的一种进阶应用吧，主要是在复杂的表单页面中，父子组件传递数据的时候会用的比较多"}, {"id": "6844903631884386318", "title": "Vue中的组件从初始化到挂载经历了什么", "desc": "_createElement，比较关键的一步，在这个方法里会判断组件是span这样的 html 标签，还是用户写的自定义组件。 其实，render 函数最终返回的就是vnode。 调用createElement方法，第一个参数是 vm 实例自身，剩余的参数原封不动的透传。 其中…"}, {"id": "6844903617116241927", "title": "碎片化学习前端知识", "desc": "既要完成工作又想在工作中得到提升，初期的时候进步很快。但是慢慢的就会进入舒适区，怎么才能不在舒适区中陷入泥潭。 学习知识的目的就是赚钱，给家人和自己带来体面的生活。很明确 不过很多人都是低水平的勤奋，比如在朋友圈打卡某某事情，其实暗自的并没有有效率的完成自己的事情只是为了打卡在…"}, {"id": "6844903864072683534", "title": "模拟 vue3.0 rfcs `createComponent` api 中的`props`类型推导", "desc": "预期想实现的效果String->string、Number->number、Boolean->boolean在ts中String对应的类型是StringConstructorNumber对应的类型是N"}, {"id": "6908226803765248013", "title": "Vue2中的响应式系统简要分析", "desc": "Object.defineProperty作用：defineReactive与Object.definePropery响应式系统分析文章已经烂大街了，简要地将，就是通过Object.definePro"}, {"id": "6910797152465715214", "title": "Vue | 使用导航栏router模式，设置的default-active无效解决", "desc": "我们应该都知道，在路由的配置中有redirect这个属性，我就是在这里做了文章。直接在父组件上配置一个重定向让它转向想要的默认路由。 当然，用这种方式解决的话，default-active的用处就只是提供了一个样式的改变，有没有都可以跳转，只是样式就没有任何变化了。"}, {"id": "6941722587634335751", "title": "面试官问 Vue 性能优化，我该怎么回答", "desc": "Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM；但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，所以我们仍然需要去关注 Vue …"}, {"id": "6844904191169675277", "title": "vue源码阅读第三篇，渲染代码块生成", "desc": "1. 构造compiler 2. 开始我们的代码块生成之旅，codegen"}, {"id": "6844903566742650888", "title": "即学即用系列一：纯函数", "desc": "系列第一篇，就从纯函数开始，由于我是前端方向，所以就从JavaScript语言中的纯函数说起。 上面代码中，impure函数不是一个纯函数，因为它的返回结果依赖外部变量a，因为a是有可能变化的，所以我们不能保证impure(2)的值永远是3。虽然impure函数的代码没有变化，…"}, {"id": "6844903585088536584", "title": "Eng  --- React 、 Vue 、 Angular全家桶套餐外的另一种超轻量级实现方式", "desc": "仅有16kb ,却支持 React ,Vue ,Angular 全家桶套餐的主要核心功能 更少更简易的指令/方法实现同样的操作 没有任何组件通信障碍 ， 后台无需专门复杂的路由控制器(1个id1个接口)前后分离 数据状态共享仅需简短的配置， 组件闭包 , 一次编写,处处部署"}, {"id": "6912970744154554381", "title": "如何把 Nuxt.js 项目部署到服务器?", "desc": "21云盒提供了极简单的 Nuxt.js 部署方法，你可以在21云盒子上通过以静态网页环境，或Node环境的方式进行部署。 21云盒子创立至今，在国内第一家真正提供了像 Netlify, Heroku 等轻松部署的功能，同时也保证了服务的速度和稳定性。 每个云服务项目，只需要在首…"}, {"id": "6844903911908704264", "title": "【Vue原理】Compile - 源码版 之 generate 节点拼接", "desc": "然后，generate的作用就是，解析 parse 生成的 ast 节点，拼接成字符串，而这个字符串，是可以被转化成函数执行的。函数执行后，会生成对应的 Vnode 因为这个函数是给实例初始化一些属性的，看到很明显就是给实例添加上了很多属性，this.xxxx 什么的，那么我们…"}, {"id": "6895178232115822599", "title": "Vue2基础-基本API", "desc": "Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时…"}, {"id": "6844903909379555341", "title": "【Vue原理】Compile - 源码版 之 Parse 标签解析", "desc": "匹配 头标签的 前半部分。当字符串开头是 头标签时，可以匹配 匹配 头标签的 右尖括号。当字符串开头是 > 时，可以匹配 匹配 尾标签。当字符串开头是 尾标签时 可以匹配 匹配标签上的属性。当字符串开头是属性则可以匹配 2、保存当前截断的位置。比如你匹配了template到 字…"}, {"id": "6941657843921584165", "title": "vue生命周期深入理解以及运用", "desc": "描述vue实例vue实例其实就是一个比较复杂的对象，其中data、methods、computed等属性都是挂载在vue的原型上，我们访问这些属性时this都是指向vue的实例，所以我们在vue中定义"}, {"id": "6844903618299035655", "title": "el-data-table, 让CRUD更简单👏", "desc": "基于Vue2.x, element-ui 2.x，以及开源组件el-form-renderer封装了一个业务组件el-data-table，已在github开源，其目标是：makes restful api crud easily 😄"}, {"id": "6935982446869643278", "title": "SpringBoot+Vue豆宝社区前后端分离项目手把手实战系列教程12---帖子列表前端实现", "desc": "本项目实战教程配有免费视频教程，配套代码完全开源。手把手从零开始搭建一个目前应用最广泛的Springboot+Vue前后端分离多用户社区项目。本项目难度适中，为便于大家学习，每一集视频教程对应在Github上的每一次提交。 4. 修改src\\views\\post\\index.v…"}, {"id": "6903513940362428424", "title": "【Vue学习（四）浅析 webpack】", "desc": "可能有些人看到这个标题会想问为什么直接从二跨到四了，原因很简单 因为三写的比较次拿不出手。 只能停留在文件夹中，供以后自己本地查阅了。 毫无疑问，Webpack在前端中有着独特的重要性，是你必须要熟悉的一个技能点。 因为你在投简历浏览一些大公司的前端岗位时，毫无疑问是写明了至少…"}, {"id": "6877785132640501774", "title": "vue源码 生命周期篇(十八)初始化阶段initInjections", "desc": "1.前言本篇文章介绍生命周期初始化阶段所调用的第四个初始化函数——initInjections。从函数名字上来看，该函数是用来初始化实例中的inject选项的。说到inject选项，那必然离不开pro"}, {"id": "6844903565543243789", "title": "Vue.js初体验", "desc": "实现功能：在网页的input输入框里输入一段文字，点一个button按钮，然后叠加显示在textarea控件上。类似一个聊天窗口的样子。 vue.js给我最直观的体验就是：页面初始化时，控件（视图层）绑定数据变量（数据层）后，以后就专注处理数据上的事情就可以了，数据变化后的界面…"}, {"id": "6844903976706523144", "title": "Vue实战问答篇！", "desc": "我们可以在钩子的方法中使用this来指代当前实例。 在这些钩子里面。 v-show：当隐藏结构时是在该结构的style中加display:none，结构依然保留。 总结：频繁的切换用v-show. 否则v-if 1.Backbone.js——优点：强大的社区，强劲的势头；缺点：…"}, {"id": "6963081852995239966", "title": "[vue源码笔记08]vue2.x的模板编译之构建ast", "desc": "主要介绍模板template被转化为astElement的过程，对主要方法做了注释，文末介绍了整个流程"}, {"id": "6876075026764791821", "title": "vue中$on方法第一个参数竟然可以是数组!!!", "desc": "在项目开发过程中，我一直使用的是监听单一事件执行回调函数的方式，从来没有使用过第一种方式（因为压根不知道可以用数组的形式！！），通过看源码偶然了解到原来还可以这样使用。"}, {"id": "6871677801972367373", "title": "【Vue系列】Vue的首次渲染流程", "desc": "通过 vue-cli 去初始化我们的 vue.js 项目时，会询问我们用 Runtime Only 版本还是 Runtime + Compiler 版本。 使用这个版本时，通常需要借助 webpack 的 vue-loader 工具把 .vue 文件编译成 Javascript…"}, {"id": "6935804220931047455", "title": "重学Vue【Vue的合并配置过程】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 这里传入的Ctor参数是Vue，所以它没有 super，最后返回了 Vue 的 options。 它其实…"}, {"id": "6943903096279924766", "title": "怎么注册才是局部组件,什么是全局组件", "desc": "局部组件上代码：全局组件(全局组件, 意味着可以在多个Vue的实例下面使用)组件必须挂载在某个Vue实例下，否则它不会生效组件语法糖注册方式分离式写法"}, {"id": "6924139117584646158", "title": "vue学习笔记之异步更新机制", "desc": "vue中更新dom是异步执行的，只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。然后，在下一个的事件循环“tick”中，Vue刷新队列并执行实际 (已去重的) 工作（先缓冲，缓…"}, {"id": "6844903940786503687", "title": "下载EXCEL文件总结", "desc": "这次是下载EXCEL文件的总结，有什么问题大家可以提出建议，我认为这样会使我们互相成长。 但是这样会有很大的缺陷，就是可能会有人攻击的服务器，因为没有建权，所以可以一直下载你的文件。 然后我又去改进，但是和这个大同小异，用JS去下载。 但是这样下载下来是错误的，没有内容，所以我…"}, {"id": "6903416290396880909", "title": "通俗易懂的vue2 dom-diff", "desc": "Vue的虚拟dom diff核心在于patch过程，核心算法采用了双指针算法。 如果都不满足上面过程，则进行key对比。满足条件进行patchVnode,并将dom移动到oldStartVnode之前。没有找到则重新创建 在vue2的dom diff过程中，是一边diff 一边…"}, {"id": "6844903571293470727", "title": "JS函数知识点梳理", "desc": "要想学好JavaScript除了基本的JavaScript知识点外，作为JavaScript的第一等公民——函数，我们要深入的了解。函数的多变来源于参数的灵活多变和返回值的多变。如果参数是一般的数据类型或一般对象，这样的函数就是普通函数；如果函数的参数是函数，这就是我们所要知道…"}, {"id": "6949366287785000967", "title": "基于Vue Cli4搭建Vue3 TSX移动端项目（四）", "desc": "基于Vue3 Components API 封装一些在移动端中我们经常会使用到的Hooks及Vue3中TSX和单Vue文件写法的一些对比。"}, {"id": "6943611481695092750", "title": "Vue3探索：v-model是否已经过时", "desc": "从React转到Vue3，当我看到v-model的时候，感觉这应该是一个过时的设计了，把我的想法分享给大家。 v-model是一个语法糖，能更方便的实现数据的双向绑定。 上面的代码即实现了一个input数据到text的双向绑定。它其实就相当于下面的代码的简写： 这里通过v-mo…"}, {"id": "6844903602452971527", "title": "Angular 6 来了", "desc": "Angular 6 已经正式发布了！这个主要版本并不关注于底层的框架，更多地关注于工具链，以及使 Angular 在未来更容易快速推进。 作为发布的一部分，我们同步了主要的框架包 (@angular/core, @angular/common, @angular/compile…"}, {"id": "6844903544890343437", "title": "vue小实现", "desc": "不管读再多的文档，感觉还是自己写(抄)一遍记得牢。。 先实现一个小目标，text和text2能在页面上呈现出来，在实现一个大点的，2秒后和3秒后页面中的文本改变。 下面要干的第一步是将new Vue实例时传入的参数处理下。怎么个处理法？例如：我们的text和text2属性是放到…"}, {"id": "6938048279783407629", "title": "每天学习一个vue插件(12)——vue-fullpage", "desc": "前言1介绍配置项属性dirdurationder配置项事件beforeChangeafterChange动画配置常用样式stylefullpage-container2使用安装全局配置全屏滑动3.注意"}, {"id": "6844903729192239117", "title": "Vue 源码(一)：响应式原理", "desc": "在收集依赖时，我们给 Dep 这个 class 增加一个属性 target，在 vue 中还结合了 targetStack。这种收集方式稍微管理不慎就可能存在 bug，在另一篇文章有提过：熟悉 Vue ？你能解释这个死循环吗？。"}, {"id": "6844903966984110094", "title": "VUI创建日志(一)——图片懒加载指令的实现", "desc": "1. 项目实现介绍 2. v-lazy 的基本实现 3. 完整代码 本文是对vue自定义指令及懒加载原理的综合实现，若有错误，望指出共同进步。"}, {"id": "6844904098236481544", "title": "vue的基本知识点总结", "desc": "vue的基本知识点记录,以备查阅,基本平时开发这些算是最最你基本的东西,罗列出来供参考,谢谢插值表达式(只能是表达式不能是JS语句)指令动态属性v-html:会有XSS风险,会覆盖子组件(原理如下:)"}, {"id": "6844903588439785480", "title": "WeScale 技术篇 —— mpvue 与微信小程序的火花", "desc": "WeScale 定位为音乐训练小程序，初期规划了基础音阶的三个训练，以及他们的镜像模式。 后期看情况更新追加其他训练。 扫描下方小程序码或在微信小程序中搜索 WeScale，即可使用。 明神每晚都要练着他的电吉他，敲着他的木鱼，突然一道光在脑海中闪过，机智的他迅速捕获到，当晚凌…"}, {"id": "6844903828735655944", "title": "Vue源码学习: 关于对Array的数据侦听", "desc": "我们都知道Vue的响应式是通过Object.defineProperty来进行数据劫持。但是那是针对Object类型可以实现, 如果是数组呢? 通过set/get方式是不行的。 但是Vue作者使用了一个方式来实现Array类型的监测: 拦截器。 通过创建一个拦截器来覆盖数组本身…"}, {"id": "6844903650570027015", "title": "模仿今日头条app开发遇到的问题", "desc": "该项目用到的技术主要有：vue-cli + vuex + mockjs。 github地址 新闻展示懒加载，每次展示10条数据，滑到底部再加载10条。 针对这四种不同类型的卡片，我的区分是首先我觉得后端可能给我的数据只会分新闻和广告，所以我用一个字段判断是新闻还是广告，然后对新…"}, {"id": "6844903968779272199", "title": "Electron + Vue + Vscode构建跨平台应用（一）知识点补充", "desc": "首先是网页内容，输入到HTML解析器，HTML解析器解析，然后构建DOM树，在这期间如果遇到JavaScript代码则交给JavaScript引擎处理；如果来自CSS解析器的样式信息，构建一个内部绘图模型。该模型由布局模块计算模型内部各个元素的位置和大小信息，最后由绘图模块完成…"}, {"id": "6895363480335171591", "title": "vue3.0 实现多行文本的展开收起 ", "desc": "单行文本省略多行文本省略单行文本省略主要通过css来实现，代码如下多行文本省略主要通过css来实现，代码如下主要实现方案是通过webkit内核来实现的，目前兼容性比较好（遇到不兼容的情况下，我们可以通"}, {"id": "6844903874734620680", "title": "[Vue.js进阶]从源码角度剖析 Vuex", "desc": "前言之前几篇解析Vue源码的文章都是完整的分析整个源码的执行过程，这篇文章我会将重点放在核心原理的解析完整源码地址有兴趣的朋友也可以看我学习源码时的详细注释源码地址Vuex版本：3.1.0Vuex简介"}, {"id": "6844903965734207495", "title": "15 分钟掌握 vue 3.0 响应式原理", "desc": "最新 vue-next 的源码发布了，虽然是 pre-alpha 版本，但这时候其实是阅读源码的比较好的时机。在 vue 中，比较重要的东西当然要数它的响应式系统，在之前的版本中，已经有若干篇文章对它的响应式原理和实现进行了介绍，这里就不赘述了。在 vue-next 中，其实现…"}, {"id": "6914197016763432968", "title": "Vue源码之nextTick", "desc": "JS 执⾏是单线程的，它是基于事件循环的。事件循环⼤致分为以下⼏个步骤： 所有同步任务都在主线程上执⾏，形成⼀个执⾏栈。 主线程之外，还存在⼀个\"任务队列\"。只要异步任务有了运⾏结果，就在\"任务队列\"之中放置事件回调。 ⼀旦\"执⾏栈\"中的所有同步任务执⾏完毕，系统就会读取\"任务…"}, {"id": "6844903648728711175", "title": "原生 JavaScript 实现 state 状态管理系统", "desc": "在软件工程中，状态管理已经不是什么新鲜概念，但是在 JavaScript 语言中比较流行的框架都在使用相关概念。传统意义上，我们会保持 DOM 本身的状态甚至声明该状态为全局变量。不过现在，我们有很多状态管理的宠儿供我们选择。比如 Redux，MobX 以及 Vuex，使得跨组…"}, {"id": "6976920432448372743", "title": "使用jsPDF和canvas2html导出pdf踩坑记录", "desc": "使用jsPdf插件html()方法导出pdf，优化导出pdf格式，使得导出pdf能够进行文本内容和图片进行交互复制"}, {"id": "6844903918548320264", "title": "打造vuecli3+element后台管理系统（二）调用接口功能完善，定义axios工具类", "desc": "在assets目录下新建http文件夹，用来存放请求后端接口的一些配置文件。 当业务逻辑复杂的时候，写起来会比较繁琐，后期维护更加不方便，每次都要定位到具体位置去一个个替换修改。所以在axios请求时再封装一层就显得尤为重要。 这里我只定义了一个基本的httpRequest方法…"}, {"id": "6909292719210758157", "title": "【element3-小哈喽参与日记】重写Notification组件 上", "desc": "看《深入理解ES6》，这本书呢，讲的比较通俗易懂，个人觉得，相较于阮一峰老师的《ES6入门教程》第三版阅读性好一些。 重构前的代码，这边就不贴出来了，大家可以点击连接查看old notification component。 通过查看源码,我们会发现源码有对keydown做监听…"}, {"id": "6909279495782400013", "title": "VuePress从零开始搭建专属博客", "desc": "欢迎使用我的指南，了解如何使用VuePress! 这个项目的产生是出于使用 VuePress 作为我的博客引擎的愿望，并且没有明确的途径. VuePress是以Vue驱动的静态网站生成器，是一个由Vue、Vue Router和webpack驱动的单页应用。在VuePress中，…"}, {"id": "6844904078464516104", "title": "vue插槽到底是如何运作的", "desc": "插槽作为vue重要内容分发手段，很多同学对它的原理比较感兴趣，下面我们来探究一下。 没有使用v-slot指令，此时组件包含内容作为父组件的children出现，内部有没有slot对编译结果没有影响。下一步就是comp1组件实例化时会怎么做，看一下相关代码： resolveSlo…"}, {"id": "6877451301618352141", "title": "vue源码解析之computed原理", "desc": "源码分析initComputedinitComputed这段代码做了几件事每个computed配发watcher；defineComputed处理；收集所有computed的watcher；watch"}, {"id": "6844903830803447816", "title": "Vue源码: 关于vm.$watch()内部原理", "desc": "关于vm.$watch()详细用法可以见官网。 可以看到data属性整个a对象被Observe, 只要被Observe就会有一个__ob__标示(即Observe实例), 可以看到__ob__里面有dep，前面讲过依赖(dep)都是存在Observe实例里面, subs存储的就…"}, {"id": "6844903953465868302", "title": "在项目中使用vue-quill-editor", "desc": "最近自爱项目中遇到了富文本的使用，所以记录一下，嘻嘻vue-quill-editor富文本组件使用这个组件的原因这里的uploader是使用elementui自己封装的组件，用来上传其中遇到的问题劫持"}, {"id": "6844903810339438606", "title": "[译] Vue.js 的注意事项与技巧", "desc": "Vue.js 是一个很棒的框架。然而，当你开始构建一个大型 JavaScript 项目的时候，你将对 Vue.js 感到一些困惑。这些困惑并不是来自框架本身，相反 Vue.js 团队会经常调整一些重要设计策略。 相对于 React 和 Angular，Vue.js 面向一些不同…"}, {"id": "6997052283364048904", "title": "浅析 Vue 两个版本的区别和使用方法", "desc": "1. Vue 分为“完整版”，“非完整版”两个版本 Vue 完整版文件名后缀是 vue.js（生产环境为 vue.min.js） 此版本 有 compiler 编译器，视图直接写在 HTML 里或 t"}, {"id": "6967260672371458079", "title": "vue3学习之摇树优化", "desc": "Global API 改为应用程序实例调用；Global and internal API 重构为可做摇树优化"}, {"id": "6911570225620058119", "title": "Vite 中文文档翻译", "desc": "前言由于对vite的喜爱，所以本人首次尝试英文文档的翻译，由于本人英文水平有限。如果有哪里翻译错误或是无法get到原文的准确意思请指出会及时修正。为了更好的阅读体验强烈推荐跳转到下方地址进行阅读。ht"}, {"id": "6844903520873742349", "title": "关于使用iview中Table组件的一点小技巧", "desc": "第一次发文，小弟才疏学浅，各位看官，小心轻踩，如有错误，还请大神们指教一二。 最近在用iview+vue全家桶做项目，期间遇到了一些问题，下面是我的一点点心得。OK，废话少说，直接进入正题 如果你有个这样的需求：用户通过分页和多选框任意操作去选择数据，最后点击“确认”按钮弹出用…"}, {"id": "6844904162912632840", "title": "vue模块移动组件", "desc": "一直都想实现类似于五百丁中简历填写中模块跟随鼠标移动的组件，最近闲来无事，自己琢磨实现了一个差不多的组件。 其中每个模块都是组件调入（项目经验、教育经验、工作经验等），所以这里也用到了动态加载组件方式。 思路：鼠标移入模块，显示相应模块的点击移动按钮，点击A模块移动按钮，此时原…"}, {"id": "6924072069026021383", "title": "基于 Vue.js 的普通 http 网站如何实现帐号、密码的加密传输？", "desc": "现在大部分网站都采用 https 协议来传输数据，客户端和服务端自动通过证书完成密钥协商和数据加密传输的过程。 但是，https 证书一般都是要收费的，因此有些网站开发时还会直接使用 http 协议，这种情况下就需要对敏感数据比如帐号、密码等信息进行加密传输。这个过程其实就是一…"}, {"id": "6844903974680657934", "title": "element-ui库的表单元素的总结", "desc": "这里我统一将有文本框的元素放在一起。主要有：普通文本框、密码框、文本域、计数器、日期选择器、自动填充文本框、有前缀的文本框。 年是yyyy，月是MM，日是dd，时是HH，分是mm，秒是ss，周是WW（只限于周选择器）。通用的是yyyy-MM-dd HH:mm:ss。 除了年，都…"}, {"id": "6844904199642152967", "title": "打造一款适合自己的快速开发框架-前端篇之选择树组件设计与实现", "desc": "任何业务系统都可能会涉及到对树型类数据的管理，如菜单管理、组织机构管理等。而在对树型类数据进行管理的时候一般都需要选择父节点，虽然elementui也有树型组件，但是如果直接使用，要完成该功能，需要编写的代码量也还是不少，所以我们要想更方便的时候，就得需要在其基础上进行进一步的…"}, {"id": "6983678222646902797", "title": "移动端的一些技能", "desc": "刚在做OKR的一个项目，连续3天熬夜凌晨一两点肝到怀疑人生。一上线发现 bug，解决一下，再上线，我屮艸芔茻，竟然没有改对，还是有问题。我整个人就是下面的动图状态，哭爹喊娘，身后空无一人(基本一个项目"}, {"id": "6880471819288543246", "title": "vue生命周期", "desc": "先上张经典大图其中包含了8个生命周期钩子，也叫生命周期函数beforeCreate(创建前)使用这个钩子，组件的选项对象并没有创建，el和data都还没初始化，所以data、methods和compu"}, {"id": "6915640119982718989", "title": "有用的vue3 JSX&TSX使用说明。", "desc": "本文更新于2021-08-03 基于vite 2.4.4&vue 3.1.5,除了装个插件，不需要额外配置即可使用。不太适合template还没有上手的好兄弟萌。适合对vue3.0有一点了解的HXD"}, {"id": "6844903746061746183", "title": "通过几个问题深入浅出Vue", "desc": "通常，Vue给我们的印象是“小巧易用”，凭借其简洁明了的模板开发方式，以及强大的指令系统，我们可以轻轻松松几行代码搞定一个数据双向绑定的页面。但是，这背后Vue帮我们做了多少工作，我们是知之甚少的。 Vue就像一个黑盒子，我们输入一些数据，它给我们输出一个渲染好的页面。对于开发…"}, {"id": "6924967925614903303", "title": "Vue 开发插件简介", "desc": "Vue 需要很多 npm 依赖和编辑器插件的配合来改善开发体验。各种名称相近的插件总是让我困惑，有时候，想删除多余的依赖，就想着要知道每个插件的用途，浅浅的了解即可。 这是 VSCode 中开发 Vue 必要的插件，提供 SFC 语法高亮、Emmet、Lint、格式化、智能提示…"}, {"id": "6871801521429250061", "title": "Vue MVVM源码解析", "desc": "1. 发布订阅模式与观察者模式 观察者模式是由具体目标调度，比如当事件触发，Dep 就会去调用观察者的方法，所以观察者模式的订阅者与发布者之间是存在依赖的。 发布/订阅模式由统一调度中心调用，因此发布者和订阅者不需要知道对方的存在。 2. Vue MVVM简单实现 这里我们把 …"}, {"id": "6909279213199556621", "title": "vue | vue实现移动端和PC端切换(借鉴贴)", "desc": "因为在同一个项目中，分了移动端和PC端，所以我们在入口，页面，路由等地方都要把移动端和PC端区别开来。 所以，main.js是webpack的入口文件。 在main.js中，加载的是App.vue文件，所以App.vue是vue渲染的入口，也可以理解成根组件，其他组件挂载在它之…"}, {"id": "6943054839555293191", "title": "关于vue的store状态变化和组件内生命周期相关问题最优雅的解决方案", "desc": "不知道大家有没有遇到过这样的场景，页面里需要拿到用户的名字和性别渲染在canvas上面，首次进入的时候要在app.vue发异步请求去拿，页面里肯定就拿不到了，需要监听vuex里的userInfo的改变，发现获取到数据了，并且mounted钩子执行了，才能去渲染canvas，要监…"}, {"id": "6902233661417422861", "title": "axios的请求拦截和vue路由的导航守卫有什么区别", "desc": "1. 导航守卫：拦截组件 next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。 next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。 next(fals…"}, {"id": "6844903793901961229", "title": "每天学点Vue源码: vm.$mount挂载函数", "desc": "_init这个私有方法是在执行initMixin时候绑定到Vue原型上的。 这里的$mount是一个public mount method。之所以这么说是因为Vue有很多构建版本, 有些版本会依赖此方法进行有些功能定制, 后续会解释。 src/platforms/web/run…"}, {"id": "6844903976001863694", "title": "VUE框架：基础知识及核心原理", "desc": "类库：jquery、zepto、underscore... 插件：dialog、banner、drag、tab、iscroll... 组件：bootstrap、swiper... 框架：backbone、angular、vue、react、uni-app、react nativ…"}, {"id": "6977211712449544222", "title": "小白视角：vue3编程式调用组件，全局toast开发，一步步那种", "desc": "注意事项：写法从extend替换成了createApp 阅前须知： vue2 和 vue3 的书写方式有点不一样 vue2 是 extend 去生成实例去挂载， vue3 不再支持 extend 了，"}, {"id": "6991038527257460749", "title": "HR-05-组织架构模块", "desc": "组织架构模块 业务功能介绍 基本组件布局 头部布局 树形组件用法 树形组件关键属性 参数 说明 类型 可选值 默认值 data 展示数据 array — — props 配置选项，具体看下表 obje"}, {"id": "6855631789680132110", "title": "(长文预警) 你还在烦工作中碰到的拖拽问题？一个框架解决你的疑问", "desc": "Sortable —是一个JavaScript库，用于在现代浏览器和触摸设备上对拖放列表进行重新排序。无需jQuery。 要将元素从一个列表拖到另一个列表中，两个列表必须具有相同的group值。您还可以定义列表是否可以放弃，给予和保留副本（clone）以及接收元素。 delay…"}, {"id": "6890072682864476168", "title": "Vue.extend  看完这篇，你就学废了。", "desc": "Vue.extend(options):基础Vue构造器参数是一个包含组件选项的对象。data选项是特例，在Vue.extend()中它必须是函数，为了保证引用数据不乱来。为什么要使用extend？常"}, {"id": "6934534556343091207", "title": "Vue scoped属性和深度作用选择器", "desc": "在编写Vue组件的时候，为了避免样式污染，我们一般会给<style>标签增加scoped属性，但我们也经常会遇到需要修改子组件样式的情况，比如ElementUI。下面我们就来了解一下scoped属性以"}, {"id": "6844904113902223373", "title": "nextTick的原理及运行机制", "desc": "JS执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个部分： 所有同步任务在主线程上执行，形成一个执行栈。 主线程之外，还存在一个“任务队列”。只要异步有了运行结果。就在\"任务队列\"中放置一个事件。 一旦\"执行栈\"中所有的同步任务执行完毕，系统就会读取“任务队列”，看…"}, {"id": "6844904015495446536", "title": "【Vue源码】mixin 源码解析", "desc": "今天开始探索mixin的源码，我们可以知道mixin是什么时候进行合并的以及对各个类型是如何进行合并的。 当目标 data 对象不包含当前属性时，调用 set 方法进行合并，后面讲 set。 当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为…"}, {"id": "6844903513449857038", "title": "Vue 聊天组件", "desc": "Vue 聊天组件，支持图片、表情，欢迎star"}, {"id": "6844903517430235144", "title": "Vue2.0用户权限控制解决方案", "desc": "Vue-Access-Control是一套基于Vue/Vue-Router/axios 实现的前端用户权限控制解决方案，通过对路由、视图、请求三个层面的控制，使开发者可以实现任意颗粒度的用户权限控制。"}, {"id": "6844903711169347598", "title": "[译文]过犹不及，别再在编程中高射炮打蚊子", "desc": "译者注：翻译这篇吐槽的文章，主要是为了自省~日常工作中确实会犯类似的错误，不单是解答别人的时候，自己选择对应工具时，也是趋向于熟悉的而不是合适的。避免滥用框架与盲目引入类库，与诸君共勉~ 在编程的社区中，有些现象让我感到十分困扰。（为了更好地阐述我的观点，）我将以 Vue 作为…"}, {"id": "6961735935075549192", "title": "【中台】靓仔请留步，跟我一起撸中后台啊~（系列篇三：鉴权、动态路由 ）", "desc": "当我们的项目依赖都配置完毕之后，最重要的一步就来了，那就是如何去处理用户权限，给用户分配指定的菜单。首先需要知道的一点是，我们的路由表只会配置一小部分，这部分是不需要任何权限就能访问的，也就是白名单。"}, {"id": "6980264537127649316", "title": "Vue3之Style绑定", "desc": "对象语法 :style的对象语法看着非常像CSS，但其实是一个JavaScript对象。CSS property名可以用驼峰式或短横线分隔（记得用引号括起来）来命名： 直接绑定一个样式对象会让模板更清"}, {"id": "6844903863053451272", "title": "sortable.js——Vue 数据更新问题", "desc": "在一个需求中，我需要实现一个拖拽的功能，其中我使用了 sortable.js 去实现，但我发现我拖拽之后的数据并没有渲染在页面上。 但是实际上，我避开了这个坑，实际的实现是通过 splice 实现的，这样实际上是不会有问题的。 实际上，我们在 Vue 的数组书使用 splice…"}, {"id": "6939710786767945759", "title": "深入vue3响应式", "desc": "1.effect中的所有属性，都会收集 effect。 2.当这个属性值发生变化，会重新执行 effect。 下面通过手写简易vue3响应式，深入理解吧。 vue2 是一上来就对data中的数据进行递归，vue3 是当取值时会进行代理。 vue3 的代理模式是懒代理。让某个对象…"}, {"id": "6844903586971779080", "title": "快应用入门，看这篇就够了", "desc": "简单地说快应用是国内的十大主流手机厂商比如小米、华为、ov 等联合推出的一种新型应用。无需安装，秒开，体验媲美原生。还提供了像原生应用一样的入口：应用商店，搜索页等。 接下来会教大家如何搭建、启动、预览和调试快应用项目。和官方文档类似，这里我增加了一些我在这过程中遇到的坑及解决…"}, {"id": "6992008969430499358", "title": "【ruoyi源码学习】5.完整的主页面有哪些组件", "desc": "在vue框架中可以进行组件式开发，尽量将同样的功能封装到一个组件中，以便减少代码量和增加代码可读性。 本期我们便来看看ruoyi前端主页面中的各个组件。"}, {"id": "6935448063666290719", "title": "vue 复盘总结一", "desc": "在 MVVM 模式中，View(视图) 和 Model(数据) 是不可以直接通讯的，在它们之间存在着 ViewModel 这个中间介充当着观察者的角色。当用户操作 View(视图)，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model(数据) …"}, {"id": "6844903843503800334", "title": "Vue开发总结 及 一些最佳实践 （已更新）", "desc": "1. 项目目录结构简介 2. UI 框架选择 3. main.js 分散处理 1. 处理三方框架 2. 全局引入自定义组件 4. axios 请求二次封装 是不是非常方便？鼓掌 啪啪啪啪......"}, {"id": "6844903609121898510", "title": "Vant库的使用，及日期组件的一些注意点", "desc": "Vant库对于开发商城类项目，真的是非常nice，会让你情不自禁爱上它。Vant库支持按需加载、为移动端商城设计的风格，非常完美。但是，本人在实际开发中，也遇到了一些小问题，折腾了老半天，最终得以解决。下面先说说在vue中使用Vant库的流程及一些注意事项，以及遇到的坑和解决办…"}, {"id": "6844903523310632973", "title": "WEEX-EROS | 入门指南", "desc": "学习 weex 或者 eros 之前，请您一定要熟练使用 vue2 进行开发。 本文会通过 eros 由来，优缺点评估，开发现状，环境搭建，调试等方面来介绍 eros，并会在文章后半部分与开发者一起写一个 Hello World，来更好的评估 eros。 目前 eros 已有数…"}, {"id": "6974723299108454407", "title": "Vue2.0源码阅读计划(五)——模板编译", "desc": "前言 正是问题激发我们去学习,去实践,去观察。对于问题，我习惯于遵循是什么👉为什么👉怎么做的思路来探索。 模板编译，在不了解之前，起码我看到编译两字，就觉得很厉害样子。词条上是这样来描述编译原理的： "}, {"id": "6844903630517043214", "title": "Vuex入门教程", "desc": "上一篇文章介绍了如果通过EventBus在Vue自定义组件中进行事件传递（Vue自定义组件事件传递：EventBus部分），而EventBus比较适合在中小型项目中使用；如果我们需要开发一套大型的项目，这时候我们应该考虑使用Vuex框架来统一进行数据状态管理。 为了方便读者理解…"}, {"id": "6844903756862062600", "title": "如何开发一个基于 Vue 的 ui 组件库（一）", "desc": "在开发一个 ui 组件库时，肯定需要一边预览 demo，一边修改代码。 常见的解决方案是像开发一般项目一样使用 webpack-dev-server 预览组件，比如通过 vue-cli 初始化项目，或者自己配置脚本。 文艺一点儿地可能会用到 parcel 来简化 demo 的开…"}, {"id": "6997277085244850189", "title": "Vue3.X 新特性 Composition Api", "desc": "Composition API 也叫组合式API，是Vue3.x的新特性。 没有Composition API之前vue相关业务的代码需要配置到option的特定的区域，中小型项目是没有问题的，但是在"}, {"id": "6844904121821052936", "title": "封装基于Vue的留言评论树组件", "desc": "大部分文章展示类的网站都有用户评论的功能，看了这么多的评论消息的你是不是也想封装一个通过的组件呢，以备用到的时候可以直接拿来复用。现在我们就简单概括一下这个组件的主要功能， 既然是评论消息组件，首先把用户已经评论过的消息展示出来是这个组件的基本功能，然后针对每一条消息还可以对他…"}, {"id": "6844903930342670343", "title": "vue-floating 浮窗组件、封装基于better-scroll的滑动组件、vue自定义手势指令", "desc": "基于 better-scroll 的一个可自定义上下拉的移动端滚动列表组件，增强滑动体验。"}, {"id": "6992747873611808799", "title": "vue指令", "desc": "“这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战” 背景：vue中我们有很多内置指令，用于操作DOM，进行数据绑定。但有时候我们需要对DOM进行底层操作，于是用到了自定义指令 一，vue定"}, {"id": "6844903994121256973", "title": "Vue 防抖与节流の使用", "desc": "在一个电影项目中，我想在电影的列表中，保存下拉的当前位置，防止你切换页面后，再切换回当前的电影列表页，他就又回到电影的第一条数据。 这时候，我不想每次只要滑动一点，就保存当前位置，我想隔一段时间，保存一次，这时候，就可以使用防抖和节流。 说白了，防抖节流就是使用定时器来实现我们…"}, {"id": "6844903807286001677", "title": "面试篇 - 京东（商城用户体验设计部 - 前端架构组）", "desc": "很荣幸，之前接到了 京东集团-京东商城-商城用户体验设计部-前端开发部-前端架构组 的面试。 接下来的内容，我会结合问题给出一个正确的答案，其中有一些问题，正好在我之前的专栏当中有涉及到，所以有些问题的回答，我会附上我写的专栏的链接。 希望大家除了在看如何回答面试题的基础上，还…"}, {"id": "6844903957836333069", "title": "Vue3.x源码调试", "desc": "评论下方有同学给出了非常便捷的调试方式，没必要按照我以前写的方式调试了,直接看下面几句话。 对源代码有不明白的地方，比如reactivity模块中effect.ts某行代码不懂，可将其注释掉，然后运行npm run test reactivity,这样有些单测会报错，其实报错的…"}, {"id": "6844903860763377671", "title": "【前端词典】 Vue 响应式原理其实很好懂", "desc": "这是十篇 Vue 系列文章的第三篇，这篇文章我们讲讲 Vue 最核心的功能之一 —— 响应式原理。 可以这样理解：当一个状态改变之后，与这个状态相关的事务也立即随之改变，从前端来看就是数据状态改变后相关 DOM 也随之改变。数据模型仅仅是普通的 JavaScript 对象。而当…"}, {"id": "6998331356837052446", "title": "vue3踩坑记录", "desc": "非要写什么摘要，我就是记录一下vue3的一些东西，搞不懂为什么非要写50字，这个规则是哪个策划想出来的？"}, {"id": "6844903699458818062", "title": "如何在前端中使用protobuf（vue篇）", "desc": "由于目前公司采用了ProtoBuf做前后端数据交互，进公司以来一直用的是公司大神写好的基础库，完全不了解底层是如何解析的，一旦报错只能求人，作为一只还算有钻研精神的猿，应该去了解一下底层的实现，在这里记录一下学习过程。 个人感受： 前后端数据传输用json还是protobuf其…"}, {"id": "7002929474232647694", "title": "在使用 vue-cli-service 的项目中配置 htmlWebpackPlugin.options.title", "desc": "这篇文章解决的是使用 vue-cli-service 搭建开发服务器和打包构建的项目，html 模板中 htmlWebpackPlugin.options.title 标题的配置问题。"}, {"id": "6844904005508792333", "title": "Vue 之keep-alive的使用，实现页面缓存", "desc": "有时候我们不希望组件被重新渲染影响使用体验；或者处于性能考虑，避免多次重复渲染降低性能。而是希望组件可以缓存下来,维持当前的状态。这时候就需要用到keep-alive组件。 如果未使用keep-alive组件，则在页面回退时仍然会重新渲染页面，触发created钩子，使用体验不…"}, {"id": "7002781685162967076", "title": "vue-cli 3 使用mode特定模式打包时,打包出的目录结构与默认打包不一致问题记录", "desc": "背景 最近在协助开发项目时，发现这项目没有区分环境，我在使用mode区分环境，打包后发现，打包结果和vue-cli-service build 默认打包时的目录结构完全不一致。记录解决此问题的文章。。"}, {"id": "6973696602435223565", "title": "ant-design-vue动态表格合并", "desc": "使用ant-design-vue的table组件实现动态合并单元格，支持动态数据展示，合并算法能够复用"}, {"id": "6979143111624785928", "title": "Electron+Vue3 MAC 版日历开发记录(29)——知识篇使用Template Refs", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6997581612451889183", "title": "Vue3 学习笔记 - 计算属性和监听属性", "desc": "Vue3 计算属性 计算属性关键词: computed。 计算属性在处理一些复杂逻辑时是很有用的。 可以看下以下反转字符串的例子： 上面的代码中模板相对来说变的很复杂起来，也不容易看懂理解。 接下来我"}, {"id": "6844904009782804487", "title": "学习Typescript 并使用单例模式 组合Vue + Element-ui 封装 Axios", "desc": "typescript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。 TypeSc…"}, {"id": "6936929271482941471", "title": "我熬夜开发了一款简约实用、支持多平台的Markdown在线编辑器（开源）", "desc": "之前，一直想开发一款属于自己的Markdown编辑器，主要是自己平常写文章可以更加灵活操作，另外扩宽自己的视野也是非常不错的选择啊！所以在周末就决定玩耍一番。首先我调研了很多线上热门的md编辑器，都很优秀。不为超过他们，主要自己用着舒服点。这篇文章主要是记录下我是如何从0到1是…"}, {"id": "6999438809612058632", "title": "回首Vue3之API篇（十）", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 这篇文章我们来讲一下Computed 与 watch以及Vue3.2新增的一些响应性API的使用，以及我们需要注意的地方。 如何使用 co"}, {"id": "6965765241242124319", "title": "【Vue Conf 2021】现场参加 Vue Conf 2021 是怎样的一种体验（上）", "desc": "2021 年 5 月 22 日，周六，雨后天晴的杭州特别凉爽，特意坐高铁到了杭州现场参与了 Vue Conf 2021。收获远比想象中大，QA 环节问了三个问题，见了很多大佬，感觉值回票价了。"}, {"id": "6994603032801460261", "title": "Vue表单数据绑定、Ref(六)", "desc": "今天我们来看看数据绑定、Ref，开发的时候数据绑定所谓是几乎到处都有它的身影呀！ref 被用来给元素或子组件注册引用信息！直接整起！"}, {"id": "6999433130163568677", "title": "Vue3学习笔记-自定义指令及路由", "desc": "Vue3自定义指令 除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。 下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦"}, {"id": "6844904141983072264", "title": "Vue + Scss 动态切换主题颜色实现换肤", "desc": "根据预设的配色方案，在前端实现动态切换系统主题颜色。 大概的思路就是给html根标签设置一个data-theme属性，然后通过js切换data-theme的属性值，Scss根据此属性来判断使用对应主题变量。这里可以选择持久化Vux或接口来保存用户选择的主题。 这里定义了一个ma…"}, {"id": "6856232743286767624", "title": "Vue的混入(mixin)知多少？如何用mixin实现一个图片懒加载功能", "desc": "在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立。这时，我们可以通过Vue的mixin功能将相同或者相似的代码提出，这样一来即方便了代码的复用也使得维护更加容易。 这篇文章将为您讲述 Vue mixin的使用方法，会通过实…"}, {"id": "6979494042548011021", "title": "vue3: 多 Modal 框业务逻辑 - 动态创建 -", "desc": "vue3: 多 Modal 框业务逻辑代码优化 开发中经常会遇到如下场景. 点击按钮, 通过变量 visible 控制弹框的显示和隐藏"}, {"id": "6908652759029907470", "title": "Vue3 最 Low 版实现", "desc": "我在上篇文章 聊一聊 Vue3 中响应式原理 对Vue3 响应式的实现原理做了介绍，想必大家对 Vue3 中的如何利用 Proxy 实现数据代理，以及如何实现数据的响应式有了一定的了解，今天我们再次进阶，就看看它是如何与 view 视图层联系起来的，实现一个Low版的 Vue3…"}, {"id": "6981701152786104350", "title": "Vue3全家桶升级指南二ref、toRef、toRefs的区别", "desc": "> ref是对原始数据的拷贝，当修改ref数据时，模板中的视图会发生改变，但是原始数据并不会改变。 toRef是对原始数据的引用，修改toRef数据时，原始数据也会发生改变，但是视图并不会更新。 "}, {"id": "6954689884053307406", "title": "Vue源码思想在工作中的应用", "desc": "当学完Vue源码之后，应对面试是一个事情，但更重要的是如何将该思想应用到工作中，我工作中就遇到了固定数量并行异步任务的问题，最终借用Vue源码思想得到了解决。"}, {"id": "6971964011684298782", "title": "Vuex系列(一) -- Vuex的使用", "desc": "这是我参与更文挑战的第10天，活动详情查看： 更文挑战 介绍 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预"}, {"id": "6968585717924495368", "title": "Vue3 源码解析（五）：Patch 算法", "desc": "在本篇源码分析的文章中，我将详细讲解 Vue3 中的虚拟 DOM 比较算法 —— patch 算法。"}, {"id": "6993126730277847076", "title": "「免费开源」基于Vue和Quasar的前端SPA项目crudapi后台管理系统实战之数据库逆向（十二）", "desc": "本文主要介绍了数据库逆向功能，在数据库表单已经存在的基础上，通过数据库逆向功能，快速生成元数据，不需要一行代码，我们就可以得到已有数据库的基本crud功能，包括API和UI。"}, {"id": "6844904104171405319", "title": "Vue中 props 这些知识点，可以在来复习一下！", "desc": "如果你一直在阅读有关\"props\"内容，你会发现我们可能也一直在使用它们（即使没有意识到），但也许你并不完全确定它们是什么。或者如何正确使用它们，并充分利用它们。 当你读完这篇指南时，你就会知道成为一名高效的Vue开发者所需要知道的关于props的一切。 props 是我们在不…"}, {"id": "6844903859614121998", "title": "Vue响应式原理-如何监听Array的变化？", "desc": "在上一篇Vue响应式原理-理解Observer、Dep、Watcher简单讲解了Observer、Dep、Watcher三者的关系。 今天我们就进一步了解Observer里还做了什么事。 data 中的数据如果是一个数组怎么办？我们发现Object.defineProperty…"}, {"id": "6994352730558955551", "title": "vue 中 mavon-editor关闭默认的 CDN， 使用本地资源加载", "desc": "mavon-editor 是一款开源的优秀的页面富文本编辑器，在很多 vue 项目中都有使用。 本文也是记录在使用 mavon-editor 时如何关闭默认的 CDN，使用本地资源加载"}, {"id": "6992013555448938509", "title": "vue提升性能的几种简单方法", "desc": "vue提升性能的几种简单方法： 1.vue异步组件实现懒加载 　方法如下：component：resolve=>(require(['需要加载的路由的地址'])，resolve) 2.使用ES6中的i"}, {"id": "6844904118293626893", "title": "前端关于seo的个人理解与改造优化实战（基于Vue-ssr）", "desc": "Search Engine Optimization，搜索引擎优化，这就是seo。（当然不止这些）。但是在这里就是不多说了。 其实搜索引擎做的工作是相当复杂的，我们这里简单说一下大致的过程。后续针对SEO如何优化，也会根据这几个点展开描述。 当然是为了“蜘蛛”可以网到你的内容，…"}, {"id": "6914843999782043661", "title": "深入理解 Vue3 Reactivity API", "desc": "一些基础内容，可作为文档参考。不行了，实在写不下去了，到后来每输入一个字符我都要等将近 20 秒。。。。。卡的要死。。。。。。 reactive() 函数接收一个对象作为参数，并返回一个代理对象。 上面代码中的 document.body.innerText = obj.tex…"}, {"id": "6844903597096828936", "title": "论如何用Vue实现一个弹窗-一个简单的组件实现", "desc": "最近在使用element-ui框架，用到了Dialog对话框组件，大致实现的效果，跟我之前自己在移动端项目里面弄的一个弹窗组件差不太多。然后就想着把这种弹窗组件的实现方式与大家分享一下，下面本文会带着大家手摸手实现一个弹窗组件。 本文主要内容会涉及到弹窗遮罩的实现，slot插槽…"}, {"id": "6844903795525156871", "title": "Vue项目架构优化", "desc": "这篇博客我将为你介绍vue的架构思想，当然这只是我根据遇到的项目总结的vue架构，这是我发现的一个小三轮，如果你有好的架构也欢迎指教哦。 是不是很简洁。这样做，又进一步的解耦了axios操作，你可以对比我github上的elm1和elm2两个版本结构，一定会有所收获。 无论在几…"}, {"id": "6917916823480434695", "title": "Vue响应式原理简析", "desc": "其实是 Vue 1.x 版本核心原理的简单实现，虽然 2.x 版本有很多改进，但是这里用来分析 Vue 响应式的原理足够了。 Dep 类的作用主要是进行依赖收集（addDep）和派发更新（notify）。 Watcher 类的作用主要是处触发 data 中属性关联的钩子（数据劫…"}, {"id": "6992137281817542693", "title": "Vue开发遇坑记--路由传参整个对象", "desc": "路由传参整个对象 query传参对象 ❓ 刷新后还是丢失 params传递对象❓持久化报错原因 以及深层多次跳转的思路"}, {"id": "6844903998613356552", "title": "Vue源码-Vue-Router", "desc": "前端路由是构建单页面应用的关键技术，它可以让浏览器URL变化但是不请求服务器的前提下，让页面重新渲染出我们想要的结果。Vue-Router是Vue应用的前端路由插件，让我们来看看它的实现原理。 Vue为所有插件提供一个Vue.use()来安装注册插件，这个方法会调用插件导出对象…"}, {"id": "6922506462409261069", "title": "关于vue3+ts在实践中的一些分享", "desc": "有输入，有沉淀，才有分享。 在过去的四个月中，我全身心投入到一个综合平台的前端开发上，该项目采用的是我搭建的 vue3 基础代码框架(说实话，一开始我也怕到处都是坑...)，而这个基础代码库（仓库地址）现在在github上已经收获了 100+ star 了，得到了一些伙伴的肯定…"}, {"id": "6964566021449449508", "title": "Vue3 源码解析（四）：代码生成器", "desc": "本篇源码解析，让我们一起学习在 Vue3 中，AST 抽象语法树最终是如何被生成为可执行的代码字符串。"}, {"id": "6844903502754349064", "title": "Vuex2.0源码解析", "desc": "Vuex2.0源码解析"}, {"id": "6844904037821710344", "title": "【总结】vue如何实现的数据控制视图", "desc": "这篇主要讲的就是vue很重要的一块知识点，双向数据绑定是如何实现的。一开始看这一块的内容的时候比较迷茫，迷茫在以下几个点： 在lifecycle这个文件中的mountComponent这个方法里，创建了一个watcher。代码如下： Vue3.0中的数据劫持是用proxy来实现…"}, {"id": "6921524828449177608", "title": "vue使用小技巧", "desc": "1. lazy 2. number 3. trim 4. js中的delete &#x26; Vue.delete 5. 事件的修饰符 passive这个修饰符会执行默认方法。 浏览器只有等内核线程执行到事件监听器对应的JavaScript代码时，才能知道内部是否会调用prev…"}, {"id": "6868130389131689992", "title": "vue基础知识入门级总结", "desc": "前言：希望可以通过这篇文章，能够给你得到帮助。(感谢一键三连），前端小白不断升级打怪中... 双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令： 每个 Vue 实例在被创建之前，都要经过一系列的初始化过程 - 例如，…"}, {"id": "6899740971190190093", "title": "Vue项目打包部署到七牛CDN", "desc": "如果不清楚可以私信我或者可以查看七牛官方文档nodejsSDK表单方式上传，七牛官网文档地址：https://developer.qiniu.com/kodo/sdk/1289/nodejs#form"}, {"id": "6844904071644577799", "title": "Vue项目总结（2）-前端独立测试", "desc": "我们先创建一个VUE项目来展示这个问题。项目的功能就是调用/hello这个API返回一个JSON对象。 创建过程中建议单独生成各个工具的配置文件。 修改src/App.vue文件，去掉无关的代码，添加API调用。 执行命令npm run serve，运行代码。根据运行结果的提示…"}, {"id": "6844903812969267207", "title": "【译】Vue 的小奇技（第十二篇）：组件创建时立即调用观察者回调", "desc": "虽然 Vue.js 给我们提供了在绝大多数场景下很有用的「计算属性」，但是在一些特殊情况中，你可能需要用到「观察者属性」。 默认情况下，观察者属性的回调函数仅会在被观察的属性值发生改变时被运行，这也的确符合逻辑。 代码到这里都没问题。如果你运行了上面这段代码，会发现 dog 的…"}, {"id": "6850418113800994823", "title": "对Vue中的MVVM原理解析和实现", "desc": "1、实现一个数据监听Observer，对数据对象的所有属性进行监听，数据发生变化可以获取到最新值通知订阅者。 2、实现一个解析器Compile解析页面节点指令，初始化视图。 3、实现一个观察者Watcher，订阅数据变化同时绑定相关更新函数。并且将自己放入观察者集合Dep中。D…"}, {"id": "6844903988119207943", "title": "vue点击页面空白处实现保存功能", "desc": "双击表格一行实现表格编辑，点击空白处实现保存。 该功能点有一定难度，首先你需要判断点击区域是否为表格区域，其次你要判断点击的区域是否为编辑状态的呢一行。所以我分为两步去实现 该功能点通过contains接口实现。判断条件为tableDom.contains(target)；该接…"}, {"id": "6844903569854824461", "title": "闲里偷忙，来点Vue", "desc": "最近对vue学习一段时间之后，于是自己打算通过学习实现了一个项目，在这里想与看到的您分享实战中踩过的雷和关于一些细节的处理技巧，最主要的还是原生组件的实现。由于主要是前端界面的实现，所以在后台使用的是express来模拟数据，当然你还可以选择json-server和easy-m…"}, {"id": "6982757261621870606", "title": "vue 注册动态组件", "desc": "component 标签 优点：简单 缺点：多个组件是需要写多个的import和components声明 Vue.component 优点：代码量少 缺点：全局注册 利用异步加载require"}, {"id": "6982562601607626782", "title": "vue 2.0 源码略读 - data 的读取", "desc": "Vue 2.0 , data 里声明的变量，this 为何能访问直接访问的到 Vue 2.0 new Vue() 时 发生了什么 通过源码，看到new Vue这个构造函数 会执行 _init 方法， "}, {"id": "6982521142066020388", "title": "vue-cli 3.x/4.x 项目，模板文件存放 public 目录", "desc": "通过vue-cli 4.x 脚手架创建的项目，只通过前端，下载一个模板文件，方法有很多个，关键是模板文件的存放路径。"}, {"id": "6844903711400017933", "title": "Vue 图片剪裁元件设计思考", "desc": "当初接触到 rxjs 这套以流的方式处理事件及资料的库时，觉得非常新奇，便尝试自己从头写了一个 rxjs + vuerx + vue 支援触控端、响应式的图片剪裁元件，取名叫 vuejs-clipper 并发布至 npm。 算是一个简单的元件，这篇主要介绍下当初的一些有趣的思考…"}, {"id": "6982762795179704328", "title": "vue 后台返回文件流实现下载功能", "desc": "后台返回二进制文件流vue前端如何实现下载？两个方法的小积累 form标签实现下载 Blob实现下载"}, {"id": "6982497442230960141", "title": "Vue deploy 自动化部署", "desc": "自动化部署工具 ssh2-sftp-client 安装 新建文件 /deploy/index.js 新建文件 /deploy/products.js 在 .env.prod 文件中添加 在.env.d"}, {"id": "6844903533238550536", "title": "从 lodash.merge 不能触发 Vue 自动更新说开去", "desc": "接口请求一份 json 对象在页面中显示。Vue 的相关逻辑就是： 这个项目的基本架构是通过组内定制过的Vue 脚手架生成的，看代码的时候发现同事在 mutaion 中用了一个叫deep-assign 的库去变更 state，然后我去翻了一下 github，发现这个库的作者说新…"}, {"id": "6934575738678951949", "title": "vue3.0系列--响应式", "desc": "使用了懒递归的方式。vue2使用的是强制递归的方式对嵌套中的对象进行监听。而vue3是在读取对象内部的嵌套的对象时，才会为其建立代理 创建响应式对象，为对象配置set、get、has等。 由于篇幅问题这里只保留了关键代码，去掉了一些校验的代码。 收集依赖，存入全局的map对象中…"}, {"id": "6913717228919586824", "title": "从零开始，用elementui躺坑vue - ESLint", "desc": "程序是写给人读的，只是偶尔让计算机执行一下。就执行而言，计算机只关心对错，但是就团队协作而言，风格一致且优雅的代码，会让人看上去赏心悦目（痛哭流涕）。因此，确定编码风格，就尤为重要 在此，小编推荐使用VSCode进行编码，使用插件eslint编写vue，绝对会让你体验飞一般的感…"}, {"id": "6844903636749778951", "title": "vue内置组件——transition简单原理图文详解", "desc": "基本概念简单用法用v-if/v-show控制显示隐藏，使用transition组件控制其变化过程一个页面子组件router-view的消失隐藏，使用transition组件控制其变化过程类名介绍以上为"}, {"id": "6909370056153661454", "title": "Vue - 与后端交互", "desc": "零：与后端交互-ajax版本1-出现了跨域问题前端：index.html后端：main.py版本2-解决了跨域问题前端：index.html后端：main.py版本3-后端读取json文件传到前端js"}, {"id": "6943890244299128845", "title": "Vue 两个版本的区别和使用方法", "desc": "Vue中的Render函数中有一个参数，这个参数是一个函数通常我们叫做h。其实这个h叫做createElement。Render函数将createElement的返回值放到了HTML中 第三个参数（类型是数组，数组元素类型是VNode，可选）：主要是指该结点下还有其他结点，用于…"}, {"id": "6844904019274498062", "title": "Vue 数据渲染成功仍然报错", "desc": "数据还没加载好的时候已经去渲染页面，这时候是没有数据的，所以会报错变量未定义，所以需要在查询到数据后再去渲染页面。 这时候刷新一下页面，发现不再报错了。"}, {"id": "6969830562798239751", "title": "Vue2.X响应式数据", "desc": "vue最常用的双向绑定和响应式原理的学习笔记，通过底层源码分析对象、数组以及vue中的常用API响应式原理的实现。"}, {"id": "6908646641985650701", "title": "vue3-学习笔记（一）", "desc": "Vue3新增了静态标记（PatchFlag）,在与上次虚拟节点进行对比的时候，只比对带有patch flag的节点，并且可以通过flag信息得知当前节点要对比的具体内容。 默认情况下onClick会被视为动态绑定，所以每次都会去追踪它的变化，但是因为是同一个函数，所以没有追踪变…"}, {"id": "6844903840274186254", "title": "原创文章:使用Vuejs实现个人所得税功能兼容移动端", "desc": "使用vuejs实现个人所得税的功能，包含5000起点和3500起点之间个税的变化，并且兼容移动端。"}, {"id": "6844903991361404942", "title": "Vue源码-响应式原理", "desc": "当影响页面的数据发生改变，以往我们需要手动操作DOM来显示最新视图。通过Vue编程，我们只需重点关注数据状态的逻辑处理，Vue会帮我们自动完成视图的渲染工作，这就是Vue的数据响应式机制。现在，我们通过源码来看看Vue的响应式原理。 在看源码之前，应该要对Vue的响应式原理有个…"}, {"id": "6844903998181376008", "title": "深入keep-alive 组件实现", "desc": "keep-alive 要求同时只有一个子元素被渲染。 include -- 逗号分隔字符串、正则表达式或一个数组。只有名称匹配的组件会被缓存。 exclude -- 逗号分隔字符串、正则表达式或一个数组。任何名称匹配的组件都不会被缓存。 max -- 最多可以缓存多少组件实例。…"}, {"id": "6844903998055530509", "title": "Vue响应式数据原理", "desc": "数据模型仅仅是普通的 JavaScript 对象，但是对这些对象进行操作时，却能影响对应视图，简而言之，就是你动我也动。 enumerable，属性是否可枚举，默认 false。 configurable，属性是否可以被修改或者删除，默认 false。 get，获取属性的方法。…"}, {"id": "6844903940039901197", "title": "基于Vue.js 与 WordPress Rest API 构建单页应用", "desc": "Vue.js 是用于构建交互式的 Web 界面的库。它提供了 MVVM 数据绑定和一个可组合的组件系统，具有简单、灵活的 API。 axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，我们将使用它来请求api。 WordPress REST …"}, {"id": "6844903648623853581", "title": "Vue2.x源码解析系列四：数据响应之Observer ", "desc": "笔名言川, 前端工程师，精通 Vue/Webpack/Git等，熟悉Node/React等，涉猎广泛，对算法/后端/人工智能/linux等都有一定研究。开源爱好者，github上目前总计5000+ Star。 如果你之前看过我的这一篇文章 Vue1.0源码解析系列：实现数据响应…"}, {"id": "6844903615501451278", "title": "前端笔记 - vue2.x data初始化以及Observer", "desc": "vue的data属性是在实际使用中最常见的了，以及大家老生常谈的双向绑定。本篇文章介绍了data属性的初始化以及双向绑定中model绑定部分。 在我们使用vue的时候data可以有两种方式定义，一种是用函数返回一个对象，另一种是直接定义一个对象。 1、在initData函数中，…"}, {"id": "6949068748116459528", "title": "vue(3)", "desc": "day03组件组件 (Component) 是 Vue.js 最强大的功能之一组件可以扩展 HTML 元素，封装可重用的代组件注册全局注册Vue.component('组件名称', { }) 第1个参"}, {"id": "6949068562069717028", "title": "vue基础（1）", "desc": "（1）Vue 是什么？Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合使用Vue将hell"}, {"id": "6942848061043540004", "title": "Vue初入门-计算属性，slot，事件分发", "desc": "计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值 意味着只要 num 还没有发生改变，多次访问 test 计算属性会立即返回之前的计算结果，而不必再次执行函数。 作为承载分发内容的出口。"}, {"id": "6844903520865370126", "title": "fish-ui 1.0.96已经更新了，支持了移动端", "desc": "总重要更新就是支持移动端，欢迎使用"}, {"id": "6844903602129993736", "title": "那些前端MVVM框架是如何诞生的", "desc": "简述框架的演进过程（纯属扯淡）"}, {"id": "6844903933924605959", "title": "VUE组件系统极速入门1", "desc": "我一开始是对组件有着深深的误解，我个人直接把web中的组件强行等于安卓中的button啊，listview啊，其实是错的。组件的划分，并没有那么严格，一个按钮可以是一个组件，页面的导航栏可以是一个组件。最好是一个页面中，只包含尽可能少的大组件，在大组件中，尽可以包含功能相近的小…"}, {"id": "6844903573336096782", "title": "vue ssr 服务端渲染模板", "desc": "模板使用vue 2.x，vue-router＆vuex＆webpack3构建，并通过koa进行服务器端渲染"}, {"id": "6844903540889124878", "title": "前后端分离与Node和NPM的那些事", "desc": "现在的前端同学如果去面试的话，面试的问题肯定会有你了解前后端分离吗，你了解nodejs吗？在没有了解的时候感觉这是个什么东西，好高大上，去网上查了查资料，再多做几个demo，终于对传说中的前后端分离以及nodejs有了一些了解。 其实在技术这个行业里面没有什么是绝对好的技术也没…"}, {"id": "6965745846004482084", "title": "在 Vue3 中使用 markdown 编辑器组件", "desc": "使用的是 v-md-editor 组件 安装 引入组件 基础用法 保存后的 markdown 文本如何渲染在页面上？ 如果你的项目中引入了编辑器。你可以直接使用编辑器的预览模式来渲染。例如： 如果你的"}, {"id": "6844903903746588680", "title": "Vue中mixin和extend的区别和使用场景", "desc": "Vue中有两个较为高级的静态方法mixin和extend，接下来我们来讨论下关于他们各自的原理和使用场景。 混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。 我们知道，Vue.mi…"}, {"id": "6885735373608222734", "title": "为什么你的watch不生效？ 从内部实现解析watch的工作原理", "desc": "使用watch监听为什么有时不生效？ 这篇文章或许可以给你答案，看完还不懂，请来找我。 1.列表渲染中修改数组元素（对象）的某个属性，但不能触发视图更新。 父组件有个element对象， 每次添加商品时需要往element.data里面去添加一条数据， 以此来更新父组件以及子组…"}, {"id": "6972054369189494820", "title": "Vue3 响应式原理探索Part 5 - computed values 的实现", "desc": "Vue3 computed values 的用法，及基于 ref 和 reactive 函数的实现。"}, {"id": "6991434084404690975", "title": "vue中history模式egg后台宝塔上线后刷新nginx报错404", "desc": "​  我们都知道vue中路由有两种模式:hash模式和history模式，我也尝试了history模式，但是项目上线项目上线之后每每刷新nginx就会报错404，最后我在网上找了尝试了一圈都没有解决问"}, {"id": "6844903913607397383", "title": "在Vue 使用 TinyMCE  编辑器", "desc": "如果有购买 tinymce 的服务，可以参考 tinymce-vue 的说明，通过 api-key 直接使用 tinymce。 我没有注册、购买过服务，就直接下载TinyMCE。 安装成功之后，在node_modules目录中，查找tinymce/skins目录，将skins目…"}, {"id": "6989979122084610079", "title": "vue history模式项目线上宝塔面板部署", "desc": "vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。 如果不想要很丑的 hash，我们可以用路由的 his"}, {"id": "6999090231123116039", "title": "Vue深度监听新旧值一样原因&&解决办法", "desc": "最近做项目时用watch监听数组里面的某一个对象时发现监听的对象新值和旧值打印出来是一样的，但是当对象比有变化时还是能监听到改变后的值"}, {"id": "6969732761384910884", "title": "vue-keep-alive源码分析", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 注：以下是个人理解、如有不对还望指正！ keep-alive使用 需求 完成对一个组件进行缓存配置 我们发现页面只会对第一个test组件进行展示、"}, {"id": "6949829240330125325", "title": "记一个Vue渲染函数render的使用场景", "desc": "使用Vue渲染函数render去实现一个递归组件与传统template模板去实现一个递归组件有什么不一样？"}, {"id": "6844904081119510536", "title": "了解VUEX原理", "desc": "在第一次调用vuexInit函数时，options.store就是根选项的store，因此会判断其类型是不是function，若是则执行函数并将结果赋值给根实例的$store中，否则直接赋值。 总结：整个mixin文件做的事情，就是利用mixin在各个实例的生命钩子before…"}, {"id": "6966871461642371085", "title": "vue3.x 学习整理（一）", "desc": "作为菜鸟，第一次写点东西，有点小紧张，随便写写，有啥错误，请及时指正！ 学习背景 以下特性仅限于Composition Api 下： 一、生命周期对比 2.x生命周期 3.x生命周期 beforeCr"}, {"id": "6992866422963568670", "title": "Vue 中的生命周期", "desc": "每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户"}, {"id": "6885591608088559623", "title": "在Vue Vite应用程序中实现暗/亮模式", "desc": "在本文中，我将在不使用任何库的情况下将dark\\Light模式功能实现到我们的Vue Vite应用程序中。 我们将首先创建一个简单的Vite应用程序，然后为我们的应用程序设置一个简单的用户界面。在创建我们的Vue应用程序之前，我想提到WrapPixel提供的一些很棒的免费Vue…"}, {"id": "6997600698128924709", "title": "饿了么UI中el-tree中的树节点选中高亮的两种常用方式（highlight-current属性）", "desc": "问题描述 我们知道树节点常常需要选择，为了看得更加直观明显，所以我们需要设置选中的时候，让选中的那个树节点颜色高亮，本文记录一下常用的三种方式，我们先看一下效果图 效果图 方式一 第一步： el-tr"}, {"id": "6917057560763711502", "title": "如何做到发送一次请求上传多个文件（使用 el-upload）", "desc": "最近在用 Vue 开发项目的时候有一个需求，需要导入 word 文档，并且需要支持多选。element-ui 的 upload 组件支持多选文件，只需要配置参数 multiple 为 true 即可。但是这个组件默认会将多选的文件分多次进行上传，于是就会存在多次的上传请求，由于…"}, {"id": "6844903888110239757", "title": "[译] 使用 SVG 和 Vue.Js 构建动态树图", "desc": "本文将会带你了解到我是如何创建一个动态树图的，该图使用 SVG（可缩放矢量图形）绘制三次贝塞尔曲线（Cubic Bezier）路径并通过 Vue.js 以实现数据响应。 在开始前，先让我们来看一个 demo。 基于 SVG 和 Vue.js 框架的强大功能，我们可以轻松创建基于…"}, {"id": "6981047439583100942", "title": "vue3 vue.config ts版本接口转发404", "desc": "这个坑我觉得是最近遇到最大的一个坑，搜了很多资料貌似都没有出现过类似情况。 情况是这样的，之前创建了个vue3 + ts 的项目，准备搭一个项目给同事练练手，自己也部署了easy-mock服务到开发环"}, {"id": "6844904030083219463", "title": "vue组件库之popup弹窗组件", "desc": "测试提出bug的时间比较紧急，所以直接引入了已有的库解决了该问题，经过测试，ios8+，android4.4+下没有发现问题。 库的源码比较清晰，之前的个人的思路都是想要一套代码兼容各端，这个库是将问题细分，对不同端进行了不同的处理，更容易去兼容。这三种方案都无法完美兼容所有端…"}, {"id": "6844903676721496071", "title": "Vuex 源码深度解析", "desc": "在解读源码之前，先来简单了解下 Vuex 的思想。 Vuex 全局维护着一个对象，使用到了单例设计模式。在这个全局对象中，所有属性都是响应式的，任意属性进行了改变，都会造成使用到该属性的组件进行更新。并且只能通过 commit 的方式改变状态，实现了单向数据流模式。 在看接下来…"}, {"id": "6977253827799941134", "title": "vscode快速生成一个vue模板", "desc": "1  在文件->首选项->用户片段 调出搜索框 然后输入 vue 会生成一个 json文件 把下面代码输入进去即可 其中 prefix 就是输入的快捷键的名称"}, {"id": "6855948851048939534", "title": "Vue 学习笔记(一)初遇", "desc": "考虑到有些同学还在用原生的JS,不知道Jquery,这里我先介绍一下Jquery.在介绍Jquery我大致的介绍一下JavaScript。 对HTML的结点(就是HTML文件中的标签，比如Div)增删查改。 改变结点属性和样式，比如背景的颜色，改变类样式。 制作一些动画，比如滑…"}, {"id": "6844903625630679053", "title": "我是这么理解Vue中的响应式系统的", "desc": "遇到知识，尤其是复杂的概念，我不能类比的话，我很难接收（所以学习很差...）。在看了大神染陌同学的Vue源码解析后，我想分享一下我所类比的Vue响应式系统，您得先看他的文章（至少看他写的Vue的响应式）。 这是我自己的想法，或许适合您，或许也不适合您，还望多多指点。本文没有代码…"}, {"id": "6977019220835958798", "title": "使用svg图片和设置高亮当前菜单项", "desc": "使用第三方 svg .svg 是一种通过代码的方式来展示的图片格式（.png, .gif.....）"}, {"id": "6844904051562266637", "title": "自建vue组件 air-ui (7) -- 创建指令组件", "desc": "通过 自建vue组件 air-ui (5) -- 创建第一个组件 Button 和 自建vue组件 air-ui (6) -- 创建内置服务组件 我们知道怎么创建标签组件和内置服务组件了，这一节我们来讲讲怎么创建指令组件。 这个其实就告诉我们，只要你想，一个组件可以有不同的表现…"}, {"id": "6844904196882317320", "title": "学习vue源码（18）三探生命周期之初始化provide与inject", "desc": "即beforeCreate钩子函数触发前对实例 属性和事件的初始化。 这一次来讲解 created钩子函数触发前，beforeCreate触发后 的initInjections和initProvide，可能你会问为什么initState为什么不一起讲呢，因为initState也…"}, {"id": "6844903590243336206", "title": "TouchEvent实现前端录音打分功能", "desc": "由于本人从事的是在线英语教育工作，所以会做很多学习交互的功能，在英语学习过程中，跟读这种练习口语的功能肯定属于必须的交互，今天就总结一下实现这个跟读打分的功能，以及涉及的知识点。 TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描…"}, {"id": "6936094636519735332", "title": "面包屑如何结合keepAlive实现页面缓存", "desc": "我现在只能通过在路由守卫中判断: 该页面是否为子页面,且当前是否含有面包屑,来判断这种场景. 如果符合条件则跳转到首页. 但要是之前该窗口就有面包屑了,就判断不了了.目前这个问题,我还没法解决.求广大网友支招. 这种情况,我就没办法拿到B1原来的参数了,进来的话会由于缺参报错.…"}, {"id": "6844903858947227656", "title": "在 Vue 应用中使用 Netlify 表单功能", "desc": "Netlify 带有内置表单处理功能，可以用来存储表单数据，下载 csv 文件，同时可以在接收到新的提交时发送邮件通知或者通过配置 webhook 发送请求。 它是通过在部署应用时直接解析 HTML 文件，识别 html 中的 form 标签来实现的，本文记录如何在一个 Vue…"}, {"id": "6935797522203934756", "title": "重学Vue【new Vue 发生了什么】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 可以看出来第一句：import Vue from 'core/index' 引入了定义好的 Vue，后面…"}, {"id": "6905698041081430030", "title": "Vue2源码解析（四）", "desc": "这段代码最关键的是render方法的调用，我们平时在开发中手写render方法的场景比较少，一般都是template模板，在之前的mounted方法中，会把template编译为render方法。这个过程很复杂我们后面再看。 实际上，vm.$createElement方法定义是…"}, {"id": "6945356649934618631", "title": "手写mini-vue", "desc": "这样我们再操作window.a就会发现视图可以比较完美的更新了。 上面的代码虽然可以通过操作数据去更新视图了，但是我们发现操作的还是原生dom节点，这样的性能显然是不太好的，所以我们做一下处理，将App.js中的节点换成虚拟dom再渲染出来。"}, {"id": "6844904134567542797", "title": "谈谈我在vue-cli3中用预渲染遇到的坑", "desc": "在开发自己的个人网站的时候后，选择了用vue来开发，不可避免的遇到要对seo做优化。鉴于目前页面也不多，因此首先采用的是预渲染的方式。 本来以为把插件一装，配置一配，咔咔咔就能搞定，结果发现并没有想的那么简单。因为首先就遇到了两个报错，折腾了半个晚上。 这个问题是在设置好配置之…"}, {"id": "6844903608236900360", "title": "Alibaba Weex Ui", "desc": "A rich interaction, lightweight, high performance UI library based on Weex."}, {"id": "6844904136765341710", "title": "一文看懂Vue2的数据侦测原理", "desc": "目前为止vue用Object.defineProperty来侦测变化，Vue3将使用Proxy来侦测变化。 那么应该把依赖收集到哪里去呢？首先。每个属性都应该有一个依赖数组Dep。 window.target是全局唯一的watcher，每一个data里的属性都有一个watche…"}, {"id": "6844904115261145101", "title": "vue源码前708行的工具方法汇总", "desc": "11、hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。"}, {"id": "6844903961221136397", "title": "杂谈: Vue3.0 Pre-Alpha 源码学习记", "desc": "5号凌晨，尤雨溪公布了Vue3源代码。 vue-next，顾名思义，下一个Vue。它的status是Pre-Alpha，解释一下，产品发布周期的一个版本，一般是在alpha之前发布。也有人叫Development Release、Technical Preview（技术预览版）…"}, {"id": "6854573222411632648", "title": "vue 基础入门（二）", "desc": "1. options 计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。 注意如果你为一个计算属性使用了箭头函数，则 this 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问。 计…"}, {"id": "6844903508282441735", "title": "小议webpack下的AOP式无侵入注入", "desc": " "}, {"id": "6917828002302656526", "title": "【js基础】函数声明和函数表达式", "desc": "红宝书说，函数声明是在最开始就声明并生成函数定义，而函数表达式的函数声明是在执行到那一行时才定义的。这么说来，如果同时有个同名的函数声明和函数表达式，不论二者谁在前，最终都会被函数表达式生成的函数定义而覆盖。 声明和执行顺序是：首先函数a声明并定义了函数，然后又声明了变量a。接…"}, {"id": "6844903557645205511", "title": "Vue中学到的功夫，隔山打牛大法", "desc": "在初学Vue的时候，我发现了一个神奇的事情，在props和data里的属性、methods里面的方法，居然能够通过this.xx直接使用。 这特么是一种武功？在下第一个不服，打算一探究竟。 熟话说，知己知彼才能百战不殆，待在下偷看一下Vue的武功秘籍，想好对策，再去上门踢馆。然…"}, {"id": "6844903842174238727", "title": "手摸手教你用 Storybook 改善组件库的开发", "desc": "在上一篇文章 《手摸手教你封装跨项目复用的 Vue 组件》 中，介绍了一例用 rollup.js 封装 Vue.js 组件库的实践；限于篇幅和复杂度，其中组件的即时调试预览部分，也同样采用了 rollup 一并配置出来，虽然完全够用，但运行起来稍嫌麻烦，bigger 上感觉也差…"}, {"id": "6983954123004018725", "title": "vue3源码解析:2.1 vue3响应式原理-4个Api(reactivity模块)", "desc": "reactivity 模块的使用 实现 4 个核心 Api 打开 sourceMap tsconfig.json 入口引入 packages/reactivity/src/index.js 柯里化拆分"}, {"id": "6983945464970215431", "title": "Vue的模板语法", "desc": "一、插值 1.文本 data中定义属性，结构中通过插值表达式可以直接使用该属性 双括号标签将会被替代为对应数据对象上 msg property 的值。无论何时，绑定的数据对象上 msg propert"}, {"id": "6844903535901949966", "title": "【只发精品】匠心打造Vue侧滑菜单组件", "desc": "谷歌官方把这种布局叫做DrawerLayout（抽屉式导航栏）。那么我们要如何实现呢，好了正片开始！ 页面结构很简单，一个抽屉，一个主容器，内容可以利用slot支持外部自行定制。 那么，手指滑动的距离就是nowX - startX，当前drawer的位置为startPos + …"}, {"id": "6932389261681360904", "title": "vue3项目搭建", "desc": "设计技术点vue3不适用ts配置vant3移动端适配创建vue3项目部分步骤说明默认vue2版本默认vue3版本手动配置我们这里选第三种选择vue版本babel用于处理兼容这里不使用tsPWA(Pro"}, {"id": "6844904064371654670", "title": "开眼视频 vue 高仿版", "desc": "开眼视频 vue 高仿版 是基于「开眼」非开放 API 、使用 Vue + Vant 框架搭建的 H5 高仿版。（后续会发布 Flutter 版本，敬请期待~） 使用 vue-router 时，当使用路由参数方式同一个页面跳转时，组件的生命周期钩子不会再被调用。"}, {"id": "6844904166758809608", "title": "Vue组件优雅的使用Vuex异步数据", "desc": "既然是进入页面之后可以判断数据是否加载完毕，我们也可以直接在页面进入之前，通过路由元信息配置该页面需要的全局异步数据，然后通过路由跳转的守卫去拉取异步数据（全局公用的异步数据只需要加载一遍就行，如果加载失败我们可以跳转到服务器错误页面）。完了再显示我们的页面，同时使用Promi…"}, {"id": "6897111936707051527", "title": "作用域插槽slot的使用场景 -- vue组件通信系列", "desc": "vue 组件的数据通信方式很多，本篇着重讲作用域插槽slot。 slot的基本用法，这里不再赘述。 本篇强调的是，怎么通过slot来实现通信。准备来说，是在父组件里显示子组件给slot暴露的数据。 因为vue版本的原因，父组件使用slot的形式不一样，2.6.0以上使用新版本s…"}, {"id": "6844903666198003720", "title": "Element源码分析系列8-Cascader(级联选择器)", "desc": "Element中和该组件相关的文件有main.vue和menu.vue2个文件，前者代表输入框部分，后者代表下方的级联选择部分，以及附加的js文件popper.js以及vue.popper.js，用来处理弹出框逻辑，前面文章介绍过，这4个文件总代码量2000行左右，首先要明确，…"}, {"id": "6844903972365402126", "title": "5分钟为vue-cli2构建项目添加typescript", "desc": "去年我们将基于 vue-cli2 构建的项目中的 webpack3 升级到 webpack4。今年我们继续升(zhe)级(teng)，添加 typescript。 目前市场上大部分脚手架在生成项目时都会提示是否要安装 typescript. 比如 vue-cli3+。但还是有很…"}, {"id": "6844903826823053319", "title": "说说 Vue 中组件的缓存", "desc": "之前在《Vue一个案例引发的动态组件与全局事件绑定总结》这篇文章中简单提到过组件的缓存。当时只是简单的提供了一个解决问题的思路，并没有说到多少组件缓存的东西，今天我们就来详细说说组件的缓存。 组件化开发模式下，我们会把整个项目拆分成很多组件，然后按照合理的方式组织起来。 自然就…"}, {"id": "6860522009881739271", "title": "从Vue 2到Vue 3的迁移指南之破坏性特性（三、v-model）", "desc": "新的： 新增了自定义 v-model 修饰符的功能。 当 Vue 2.0 发布的时候，v-model 指令要求开发者固定使用 value 属性（作为数据传递）。而如果开发者需要使用多个不同参数的话，那就只能使用 v-bind.sync 来实现。此外，v-model 和 valu…"}, {"id": "6844904112434184199", "title": "关于项目集成腾讯IM即时通讯相关记录", "desc": "本文是基于web平台对接腾讯IM的一些体会和总结，对于没有对接IM经验或者是刚接触IM项目的小伙伴来说，看到这么多可选的平台，这么丰富的接口和看似如此庞大的项目，你的心里可能会发怵，但是，当你看到这篇文章的时候，你应该不会慌了，因为这里整理了web端跑通整个demo对接的基本流…"}, {"id": "6936080040631205902", "title": "二次封装 el-dialog", "desc": "简述基于ElementUi二次封装可复用的弹窗组件新建弹窗组件在src/components新建文件夹BaseDialog,文件下新建index.vue文件代码如下：属性可参照el-dialog中配置"}, {"id": "6866993677374324750", "title": "vue中使用腾讯地图实现地址选择", "desc": "在 vue 中使用的是原来的哈希路由模式。即路径上会带上 #。这时候回调地址就不能识别了，就需要用到 escape 做了 url 处理，发现就可以跳转过去了。那第一步就成功了。解决了第一个问题：选择地址的回调路径不兼容哈希路由 问题 2. 需要省市区的名称 这是在地图上随便定的…"}, {"id": "6930526396540256270", "title": "vue项目中使用eslint和prettier", "desc": "以下所介绍的是个人在实际项目中使用的比较舒服的配置，每个人的习惯不同，仅供参考。 eslint用来限制编码规则及检查代码是否有错，prettier用来格式化代码。 dart-sass 和 node-sass 都是用来将sass编译成css的工具。"}, {"id": "6989416806930710559", "title": "【VUE】在element-ui里面加参数", "desc": "前言 原本是想根据vue文档里面的$event调用函数的原参 刚开始是这么写的： 然后发现报错$event未定义，看了半天才反应过来是:on-change而不是@on-change，:on-chang"}, {"id": "6986572574306074638", "title": "vue3借用数据懒加载实现图片懒加载", "desc": "定义自定义指令 在main.js中定义自定义指令 2. 使用自定义指令 3. 输出自定义指令钩子函数的两个参数 4. 将代码封装到directives/index.js 在main.js中引入，并使用"}, {"id": "6844903959790895118", "title": "如何解决多个el-select共用备选列表问题", "desc": "用过element-ui的同学都知道el-select有搜索功能，通过给el-select添加filterable属性即可实现搜索功能。同时，也可以通过传入一个filter-method（Function）来实现自定义搜索功能。那么接下来，我们可以想一下下面的几个简单需求的实现…"}, {"id": "6979118626288697357", "title": "vue-cli 4.0项目搭建", "desc": "vue 4.0项目搭建 1. 首先正常搭建项目 2. 添加vue.config.js（基础版） 3. less的使用 4. webpack-theme-color-replacer换肤"}, {"id": "6990184572302393352", "title": "基于Vue框架封装的api请求", "desc": "前言：众所周知我们前端开发中，需要和后端密切配合的，更多的真实数据是来自于api接口的请求，基于更多的请求我们前端进行封装方法，以便于我们及时添加api和更换开发环境。 一、在vue项目中创建一个文件"}, {"id": "6943125751700914213", "title": "Vue使用photo-sphere-viewer360°×180°全景插件模拟VR看房、房间切换", "desc": "包含全景图或元素标识符的HTML元素。 全景图像的路径。对于等角的全景图，它必须是单个字符串（我文章使用的就是720°全景图）； 对于立方体贴图，它必须是数组或对象（对应六个面）。 启用的插件列表。（如后面会用到的标记插件marker） 导航栏中显示的文本。如果导航栏被禁用，它…"}, {"id": "6844904115349241863", "title": "vue-typescript-admin-template后台管理系统", "desc": "百度一下第一个错误：翻译过来：“数据函数应返回一个对象”，既然我们是点击登录按钮就报错，那我们看看登录按钮触发的事件：我试着把跳转路由那段注释掉，结果就不报错，所以很明显，跳转路由报错了。 4. 项目运行时一直发http://localhost:8080/sockjs-node…"}, {"id": "6921596371707363341", "title": "vue3+ts+vite 项目配置", "desc": "项目初始化ts配置项tsconfig.json目前暂时采用项目构建后的默认配置shim.d.ts配置解决找不到.vue模块的报错问题参考https://juejin.cn/post/688923917"}, {"id": "6990807068898754574", "title": "Vue 2 业务代码的最佳实践", "desc": "记录一下Vue 2 业务代码的最佳实践 1. 禁用Watcher 为什么禁用Watcher？ 在我看来，Watcher在Vue中完全是多余的存在。它的缺点很多，优点几乎没有。 先说优点，优点就是写代码"}, {"id": "6984297236851064862", "title": "webpack 从 0 到 1 构建 vue", "desc": "酷炫动画的页面，高度复杂的页面功能，页面内容支持预加载(图片、骨架屏) ，这些高要求导致了项目的增加更多的代码。代码的增多，使得由来代码需要被组织的需求，由此产生了模块化。"}, {"id": "6981825857434337311", "title": "基于Ant Design Vue封装一个属于自己的modal框", "desc": "基于Ant Design Vue封装一个属于自己的modal框 前言 前两天leader说要统一所有页面modal的宽度。"}, {"id": "6844904064610746382", "title": "上次送女神死亡芭比粉口红后，我痛定思痛", "desc": "今天是一年一度的情人节。都说女生的梳妆台上永远缺一支口红，在这个时候，给心仪的女神送一支适合她的口红，表达自己的想念之情准没错。想到女神收到口红后欣喜的样子，还真有点小激动呢！ 作为技术直男，怎样挑选色号才能不出错呢？上次送女神死亡芭比粉的翻车经历还历历在目。为此，在这段宅家的…"}, {"id": "6856433976513724424", "title": "Vue3.0学习手册-引子篇", "desc": "大家好呀，我是wangly19。一名在小厂写代码的前端工程师。随着一个月的时间对组件库的完善，在Vue3.0 的开发上也总结出了一些心得体会。写成了一篇文章，希望能够给大家的学习之路添砖加瓦。当前篇章为引子篇。 尤大在CompositionAPI落地后的一段时间都在开发的一款工…"}, {"id": "6844903781709119495", "title": "Vue集成Ueditor", "desc": "使用vue-cli3.0+element-ui+webpack做项目时,遇到了一个需求:文章管理中添加富文本编辑器(暂未添加上传图片功能),在百度上查看到好几个富文本编辑器,最终选择了百度的Ueditor,基本能满足所有需求。经过多番采坑之后，已实现相关功能,特此做一个记录。 …"}, {"id": "6844903839225610253", "title": "没有废话的vue高级进阶( 二 )  8种组件通信详解", "desc": "猛兽总是独行，牛羊才成群结队。 -------鲁迅 vue组件通信的重要性无需多言。。。但是你肯定没有全部掌握，所以这第二篇文章应运而生 props父传子，$emit子传父，看下边代码，清澈的像少女的眼眸。。。emmm 新建一个Vue事件bus对象，然后通过bus.$emit触…"}, {"id": "6995032036473864206", "title": "基于 elementui 分页进行二次封装", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 为什么二次封装 一般在后台管理项目当中，页面功能涉及到的数据展示的地方会比较多，而其中却少不了表格，分页以及条件检索。如果代码是 copy"}, {"id": "6968864108502319141", "title": "前端开发：VS Code编辑器新建Vue文件自定义模板的方法 | 掘金6月更文挑战", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 本篇博文来分享一个开发常用的技巧，资深开发者不屑于知道的技巧，但是对于不知道的开发者来说还是非常重要的一个技巧，不卖关子了，接下来分享一个关于VS"}, {"id": "6844903688830468109", "title": "带你五步学会Vue SSR", "desc": "SSR大家肯定都不陌生，通过服务端渲染，可以优化SEO抓取，提升首页加载速度等，我在学习SSR的时候，看过很多文章，有些对我有很大的启发作用，有些就只是照搬官网文档。通过几天的学习，我对SSR有了一些了解，也从头开始完整的配置出了SSR的开发环境，所以想通过这篇文章，总结一些经…"}, {"id": "6844904016778887175", "title": "Vue 和递归组件", "desc": "有人说递归很难理解，也有人不这么认为。递归函数简单的定义是：一个自调用函数，这意味着它将在执行的某个时刻调用自己。 咱们无法决定哪一个更重要。如果没有结束点，递归将成为一个无限循环，但是如果一组规则就不能实现期望的行为，所以两者都存在才能使它正常工作。 在 Vue 中，递归非常…"}, {"id": "6844904018213339150", "title": "Vant Weapp 1.0 正式版发布", "desc": "2018 年 8 月 11 日，我们发布了 Vant Weapp 的首个版本。16 个月以来，我们收到了 27 位开发者贡献的 1000 多次提交，也处理了 1200 多个 issue，发布了 50 多个版本。Github 的 star 数从 5k 上升到了 11k，长期是 G…"}, {"id": "6986591861930459173", "title": "vue-awesome-swiper 使用中用到的小问题", "desc": "vue-awesome-swiper 使用中用到的小问题，开启loop后dom复制问题，实时修改optins配置问题，slidesPerView的数量大于展示数据时，开启loop复制问题"}, {"id": "6877409657925681159", "title": "（下）vue + axios 快速构建多页面应用H5移动端电商项目", "desc": "使用rem单位进行手机适配，在路径/src/assets/js/common.js里面加入以下代码，作为公用JS方法，便于每个页面调用。 这是rem布局的核心代码，如果页面宽度超过了750px，那么页面中html的font-size字体大小应为100px。否则，页面中html的…"}, {"id": "6994264585565896734", "title": "Mustache学习笔记三", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：[8月更文挑战]上一篇文章我们学会了怎么去使用Mustache，那么现在我们来研究一下Mustache的底层原理，它究竟是如何把数据变成视图的呢？"}, {"id": "7002879068454518814", "title": "qiankun微前端应用于vue应用的实践", "desc": "本文介绍了用qiankun微前端框架用来集成vue应用的基本方案以及集成过程中遇到的一些常见问题。✨"}, {"id": "6987270833357979661", "title": "深入了解Vue3组件（上） ", "desc": "为了更好的掌握Vue，打算从理解基本使用到模拟实现的方式，重学`Vue3`！本篇是关于组件，一起来看看吧~"}, {"id": "7002415929153814536", "title": "vue源码分析【6】-vue 指令", "desc": "vue源码分析【6】-vue 指令 模板代码 前言 本文的结构依据点，线，面来展开。 点即函数的作用 线即函数的执行流程 面即源码的详细解读 十分不建议直接看源码，很多函数非常长，并且链路很长，在没有"}, {"id": "7002609426796380174", "title": "Vue3从0到1组件开发-业务组件：分类列表与预加载", "desc": "问题由来 这篇文章的主题并非是我在工作中遇到的，而是在学习群里一位群友提到的一个问题。 如图，在Bilibili的首页，有多个分类，默认渲"}, {"id": "7000259324987588615", "title": "记录一次H5滚动翻页插件mescrollJs的简易封装", "desc": "本文对mescroll.js进行了组件化封装，可以省去数据请求和交互相关逻辑，简化了mescroll插件的使用，希望对各位有所帮助！"}, {"id": "6844904024278302728", "title": "【建议收藏】90%的前端都会踩的坑，你中了吗？", "desc": "移动开发时代，前端同学刚刚送别了让人头秃的IE浏览器，却发现憧憬已久的移动互联网时代并不是想象中那般美好。各种棘手的系统兼容问题和浏览器兼容问题怎么也让人高兴不起来。作为一名工作不足3年的前端程序媛，始终相信好记性不如烂笔头。每次在项目开发过程中踩到的坑，都习惯性地记录了下来。…"}, {"id": "7006663695719727118", "title": "Vue 源码初探（七）生命周期和Mixin实现", "desc": "抛出问题 如何给所有组件都添加生命周期函数？ 生命周期是怎样实现的？钩子方法（回调函数）？ 寻找思路 添加Vue.mixin方法 global/index.js 缓存钩子函数 utils.js 调用钩"}, {"id": "7005858570000400391", "title": "Vue项目模板 - 创建", "desc": "Vue项目模板 - 创建 前言 本系列教程主要是让自己吃透vue项目依赖、构建工具使用、项目代码管理、项目文件说明等。如果本人书写有错，还望在座的“农民工”指出。 构建 本次构建项目是使用vite +"}, {"id": "7007611871746326564", "title": "Switch组件", "desc": "一、switch组件很简单 1.达到的效果 点击后按钮里面的白点可以移动； 灰底变蓝底； 就以上这两种效果有何难的呢。 2.代码如何写 1)外边的框，里面的圆(硬件基础) 这个框就是个按钮，用butt"}, {"id": "7003255556735516702", "title": "1、什么是导航守卫？", "desc": "个人理解： 在进行路由切换的过程就是导航； 设置导航，就在切换过程中进行限制，限制执行了，就是守卫成功了； 以下结合各路大神的总结，望海涵。 一、导航守卫的分类 1、有3种导航守卫 全局守卫 单个路由"}, {"id": "7003180161357053960", "title": "Vue2.x源码解读之Vue.use", "desc": "相信这个use方法大家肯定不陌生，加载路由插件Vue.use(VueRouter)，加载状态管理插件Vue.use(Vuex)，加载Element插件Vue.use(Button).use(Input"}, {"id": "7007324523393449991", "title": "Vue3及ts项目搭建过程中遇到的问题（二）", "desc": "vue3发布后，有过一些摸索，在理解了组合式API后，又碰到了一些其他问题，比如vue router、axios、vuex这些经常会用到的工具，怎么添加ts类型呢？"}, {"id": "7002890993645125668", "title": "vue3  中各种类型文件进行预览", "desc": "今天说一下开发过程中的某一个功能吧！反正耗费不少时间，先说说功能需求吧：在上传文件之后的文件列表中能够点击进行预览，包含文件媒体类型包括 图片 、word excel等文档文件、pdf、视频、音频 的"}, {"id": "7007341812213874725", "title": "vue+element表格导出为excel", "desc": "下载依赖包 引入依赖包 给需要导出的表格设置id id对应下面的exportData方法中的 document.querySelector('#export-table') 按钮绑定事件"}, {"id": "6953433215218483236", "title": "手写Vue2.0源码（六）-diff算法原理 ", "desc": "前言 此篇主要手写 Vue2.0 源码-diff 算法原理 上一篇咱们主要介绍了 Vue 异步更新原理 是对视图更新的性能优化 此篇同样是对渲染更新的优化"}, {"id": "7006890217898508324", "title": "面试官：vue3 初始化都干了些啥呢？", "desc": "面试官：vue3 初始化都干了些啥呢？ 我们从下面一个最简单的例子说起 这其中 vue3 到底都干了些什么呢？ runtime-dom中的ensureRenderer 我们查看源码可以知道"}, {"id": "6982476410279460878", "title": "【实战技巧】Vue3+Vite工程常用工具的接入方法", "desc": "本文整理了如何将一些常用的工具整合到项目中。包括 vue-router , vuex , typescript , sass , axios , elementUI，vant，mock配置环境变量等。"}, {"id": "7004773738755391501", "title": "Sentry For Vue 完整接入详解(2021 Sentry v21.8.x)前方高能预警！三万字，慎入！", "desc": "Vue 3 允许您使用具有相同 Sentry SDK 实例的多个应用程序，以及在 SDK 已经初始化后动态添加更多应用程序。"}, {"id": "6995344802074066975", "title": "你理解Vue.nextTick了嘛 ，不确定进来看看~", "desc": "对Vue.nextTick的理解 一直感觉不是很到位，自己也有一些疑惑，知道看了几篇文章，明朗了一些，总结一下他的原理和用途。如果你在参看过程中，有不同的理解，欢迎讨论。 Vue.nextTick知识"}, {"id": "7002400306885722149", "title": "vue3源码分析02-响应式", "desc": "响应式 在看源码之前,我们先简单的聊一下响应式 . 什么是响应式 先看一段代码 我们声明了一个变量 a , 我们还想注册一个变量 doubleA , 值是 2 倍的 a . 在这个过程中 , 由于 d"}, {"id": "6844904053374189576", "title": "【译】强化表单的9个Vue输入库", "desc": "一个设计不当的表单可能会使用户远离你的网站。幸运的是，对Vue开发者，有大量可用的Vue输入库让你轻松整理表单。 就像其他主要的框架一样，有大量的社区解决方案可用于构建优雅的Vue表单。从简单的文本输入到高级的电话数字模版，都有很多可供选择。 这里是一些我常用到的Vue输入库。…"}, {"id": "6966769039012167694", "title": "浅谈前端路由的概念与vue-router的实现原理", "desc": "Ajax技术的兴起促使了单页面应用的出现，由于Ajax可以做到页面的局部更新，交互和页面的跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。"}, {"id": "6937117108400717837", "title": "使用Harlem代替VueX作为Vue3.x的统一状态管理", "desc": "Harlem 就是一个用于创建、读取和状态变更等简单功能的API。它的核心只是使用了 vue3自带的 reactive 和 computeds API。这意味着如果你知道如何使用 Vue3，你就会知道如何使用 Harlem。 因为并没有引入其他的库（只是 Vue），所有它足够小…"}, {"id": "6844903507573784589", "title": "深入探讨前端组件化开发", "desc": " "}, {"id": "6844904110886486023", "title": "vue天地图开发实战，解决高德百度，无卫星图问题", "desc": "我只添加了两种类型的卫星，更多类型可以查看官方文档。 网上写天地图的文章挺少，其实只要把坑踩过了还是挺好用的。 觉得有用的小伙伴，可以请我喝杯奶茶以资鼓励。"}, {"id": "6844904169292169224", "title": "Vue 3.0 我馋了😍, Composition-api 真香", "desc": "多灾多难的 2020 转眼过半。Vue 3.0 正式发布 beta 版，算是为数不多令人高兴的事情。 本文不谈 Vue 3.0 会带来什么性能提升，也不谈有无必要升级到 Vue 3.0。主要说说怎么在 Vue 2.x 利用 composition-api 怎么解决 option…"}, {"id": "6844904022181150727", "title": "vue（版本vue-cl2）最全入门持续完善。。。", "desc": "总结vue的基本使用和所有坑点。主要方便新手快速入门，熟悉所有vue工作流程。本文亲手敲打，难免有错误，有错误会及时更正。"}, {"id": "6917864747543035911", "title": "vue的diff算法", "desc": "以对象的形式来描述真实dom的树形结构。 我们先根据真实DOM生成一颗virtual DOM，当virtual DOM某个节点的数据改变后会生成一个新的Vnode，然后Vnode和oldVnode作对比，发现有不一样的地方就直接修改在真实的DOM上，然后使oldVnode的值为…"}, {"id": "6844904144881319949", "title": "为什么使用TypeScript开发vue2.x体验很差？", "desc": "“为什么使用TypeScript开发vue2.x体验很差？”，这句话不仅是一句吐槽，也是一种疑惑。 吐槽的是：花费了更多的时间，使用TypeScript构建出的类型安全的代码，在书写Vue模板时竟然完全用不上。 自从Vue出现以来，社区就一直在寻找使用OO开发Vue的方法，并产…"}, {"id": "6844903703950934029", "title": " React Hooks 可以为我们带来什么，及为什么我觉得React才是前端的未来", "desc": "简单说明一下，react hooks 是一个已经在提议中的新功能，预计会随着React 16.7.0一起发布。 如果我们有一个需要共享的状态，需要在多个组件之间传递。我们会怎么做？ 可以看到代码重复的部分非常多，只有文字显示的不同而已。 这里就需要用到HOC了。 Compone…"}, {"id": "6844903669553430542", "title": "记一次Vue全页面SSR深坑之旅 - 微弱的内存/CPU泄漏", "desc": "其实你没啥必要解决这个bug，因为国内很多公司每周一个版本，所以压根儿就察觉不到这个bug的存在。 其实你大可不必解决这个bug，因为你写一个定时自动重启脚本，在一个夜深人静的夜晚默默执行重启之。 其实你不用非得解决这个bug，因为百度也开始支持spa系统seo，你还在那里累死…"}, {"id": "6844903768333500429", "title": "设计模式在vue中的应用（三）", "desc": "为什么要写这些文章呢。正如设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结（来自百度百科）一样，也是想通过分享一些工作中的积累与大家探讨设计模式的魅力所在。 用户登录系统后有一个状态标记status对应上图4种操作提示。 策…"}, {"id": "6844903923652755463", "title": "用户评论功能设计[二]（实现回复功能）", "desc": "在前面，我们已经是实现了用户评论功能以及评论的实时显示，现在，我们来实现一下，用户的回复功能。实现效果如下所示： 从上面的代码，可以看出，我们为每个评论对象绑定了一个replyUser(item,index,-1)的事件。那我们现在来看一下，我们在replyUser函数中做了什…"}, {"id": "6844903774222286861", "title": "vue 组件通信总结 (非vuex和Event Bus)", "desc": "父组件通过 props 传递数据给子组件，子组件通过 emit 发送事件传递数据给父组件。这是最常用的父子组件通信方式，符合单向数据流，即子组件不能直接修改 props， 而是必须通过发送事件的方式告知父组件修改数据。由于是常用的方式，在这也不多啰嗦了。 v-model实现的通…"}, {"id": "6844903890421301262", "title": "Vue-前端实现登陆拦截", "desc": "该项目是利用了Github 提供的personal token作为登录token，通过token访问你的Repository List。通过这个项目学习如何实现一个前端项目中所需要的 登录及拦截、登出、token失效的拦截及对应 axios 拦截器的使用。 你需要先生成自己的 …"}, {"id": "6973634619690188837", "title": "Vue3 源码解析（八）：ref 与 computed 原理揭秘", "desc": "在 Vue3 新推出的响应式 API 中，Ref 系列毫无疑问是使用频率最高的 api 之一，而 computed 计算属性是一个在上一个版本中就非常熟悉的选项了，本文就带大家一起了解它们的实现。"}, {"id": "6844904144562552846", "title": "Vue SSR服务端渲染改造踩坑指南", "desc": "如果在改造中遇到任何问题并难以找到解决办法，不妨试试在文中找到答案。 Vue的SSR渲染，可以当作一个全新的项目，需要安装依赖的模块(node_modules)，可以将原先使用vue cli 3创建的项目的package.json拷贝过来，确保不缺少相关模块，然后在此基础上添加…"}, {"id": "6932040698216579079", "title": "Vue2.0源码解读系列(二) - 打开Vue神秘礼盒之合并选项", "desc": "文章篇幅较长， 建议花整块时间阅读分析。 另外由于篇幅过长， 本文分三篇文章产出， 便于大家理解与阅读。 在 instance.js 文件中， 调用了 initMixin()方法。然后我们找到 init.js 中， 对 initMixin 函数的定义， 中间有这么一段代码： 所…"}, {"id": "6844904100547526670", "title": "更优雅的HTTP请求", "desc": "request.js管理请求方式get post put delete..."}, {"id": "6883691745570357256", "title": "你必读的vue生命周期知识", "desc": "之前一直对vue生命周期的执行顺序理解比较含糊，这一次我用几个简单的例子把几种情况统一的整理和记录一下。 如果只有一个组件，那很好理解，直接按照顺序执行就是了。在组件初始化渲染的时候它会执行下面四个： 但是真实的情况不会这么理想，他可能会有很多组件，并且这些组件之间有父子级的关…"}, {"id": "6993330370087223309", "title": "3. vue组件", "desc": "组件 全局组件和局部组件 全局 局部 父子组件间传值 父向子传值 props的具体规则 非props属性 子向父传值:: 通过自定义事件实现 关系型组件间传值 可以通过父组件进行数据中转 $root当"}, {"id": "6995381003749425159", "title": "vue使用html2canvas并上传图片", "desc": "vue使用html2canvas并上传图片vue使用html2canvas并上传图片vue使用html2canvas并上传图片vue使用html2canvas并上传图片vue使用html2canvas"}, {"id": "6844903664709173261", "title": "Element源码分析系列7-Select(下拉选择框)", "desc": "可见最外层的<el-select>有一个v-model，这个是组件的v-model用法，具体参考官网，value初始为空，当选择了下拉菜单的某一项后，value变成那一项的值。<el-select>标签内是用v-for循环出所有的options,<el-option>也是Ele…"}, {"id": "6991334701126385677", "title": "9x0 精读Vue官方文档 - 风格指南", "desc": "精读 Vue 官方文档系列 🎉 必要的 data 必须是一个函数 为了防止组件在复用时多组件实例共享一份数据源而带来的隐患，组件的 data 选项应该是一个函数，用来每次实例化时返回一个独立的对象。 "}, {"id": "6963804166460276743", "title": "Vue中同构开发SSR应用（中）", "desc": "上一篇我们通过Web开发的发展了解了SSR的基本原理和实现逻辑，同时初步在Vue中进行了简单的实践，还记得我们上一篇最后留下来的问题吗？我们来看看如何不借助框架才能搭建Vue同构开发SSR的应用"}, {"id": "6844904185217957902", "title": "彻底理解Vue计算属性", "desc": "那么计算属性如何缓存的呢，计算属性的观察者是如何进行依赖收集的呢，接下来深入原理看一下。 还是从 vue 初始化看起，从 new Vue() 开始，构造函数会执行 this._init，在 _init 中会进行合并配置、初始化生命周期、事件、渲染等，最后执行 vm.$mount…"}, {"id": "6984774818088861703", "title": "Vue怎么做响应式布局", "desc": "前言 好了，下面进入今日主题 怎么做到响应式布局呢？ 首先我们得先了解什么是响应式 比较懒，就直接 拿来把你 响应式布局的优点： 面对不同分辨率设备灵活性强，能够快捷解决多设备显示适应问题。 响应式布"}, {"id": "6990606646556753956", "title": "Vue框架中集成ActiveReportsJS 如何在IE浏览器中展示", "desc": "ARJS支持在IE 11及以上版本展示，但是需要引用(Polyfills js文件 )不然就无法在IE浏览器中展示。 下面我就来说说在Vue中集成ARJS2.0应该进行怎样的配置，才可以在IE浏览器中"}, {"id": "6984769145195724837", "title": "Vue3的部分Composition API的简单使用（ part 2 ）", "desc": "Vue3的部分Composition API的简单使用（ part 2 ） 1 computed函数 2 computed完整 3 watch监听"}, {"id": "6844903630458486798", "title": "Vue源码阅读 - 文件结构与运行机制", "desc": "0. 前备知识 1. 文件结构 2. 入口文件 这里的 web-full-dev 就是对应刚刚我们在命令行里传入的命令，那么 rollup 就会按下面的 entry 入口文件开始去打包，还有其他很多命令和其他各种输出方式和格式可以自行查看一下源码。 因此本文主要的关注点在包含 …"}, {"id": "6995365102790639623", "title": "vue3、vue2区别之v-for和v-if", "desc": "vue2： 不建议在同一元素使用v-for和v-if，v-for优先级比v-if高 文档地址：https://cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%"}, {"id": "6844903690000678919", "title": "vue组件通信--注意事项及经验总结", "desc": "如果传到子组件的prop的数据在父组件会被改变的，放到计算属性中监听变化使用。因为如果传递的是个对象的话，只改变下面的某个属性子组件中是不会响应式更新的，如果子组件需要在数据变化时响应式更新那只能放到computed中或者用watch深拷贝deep:true才能监听到变化 当然…"}, {"id": "6995355447494443045", "title": "vue3的初体验", "desc": "目前在使用 vue3 来写新的项目，因为是第一次使用这个 vue3，所以有很多不熟练的地方，所以写下这个文章来加深一下自己的印象。"}, {"id": "6844903620039671815", "title": "Vue Native - 用 JavaScript 和 Vue 开发原生移动应用", "desc": "Build native mobile apps using JavaScript and VueJs"}, {"id": "6977688011114807332", "title": "Vue2.0源码阅读计划(六)——生命周期", "desc": "前言 在Vue中，每个Vue实例从被创建出来到最终被销毁都会经历一个过程，就像人一样，从出生到死亡。在这一过程里会发生许许多多的事，例如设置数据监听，编译模板，组件挂载等。在Vue中，把Vue实例从被"}, {"id": "6844903496462909454", "title": "在Vue中使用高德地图API", "desc": "在 methods 中创建一个 initMap 的方法供载入地图API之后调用。这里就可以使用任意高德API"}, {"id": "6844904148081573895", "title": "前端vue项目实现mock数据方式", "desc": "前后端分离开发已成大势所趋，基本上大部分公司的开发模式都是如此，那如何自己本地实现一个数据mock呢？当然你也可以使用在线的工具，比如easymock也可以实现mock数据，但是如果追求稳定性，还是本地搭一套环境吧。下面我介绍的是使用了vue-cli本身自带的功能实现mock …"}, {"id": "6995236105301786632", "title": "你确定你知道语法糖v-model和.sync之间的区别吗？", "desc": "1. v-model作用: v-model本质上是一个语法糖，v-model用于父子组件之间相互通信的一种方法 ,如果用传统的通过在子组件中的this.$emit通知父组件去$on去监听这个事件会很麻"}, {"id": "6991460917833662478", "title": "vue3 生命周期｜8月更文挑战", "desc": "1.父子组件渲染生命周期的顺序 2. 页面跳转生命周期的顺序 3. 完成的生命周期如何概述 4. 特殊的生命周期钩子 5. activated & deactivated 执行的时机"}, {"id": "6844904137197355022", "title": "基于Python实现前端自动化打包部署", "desc": "在我学习过程中，一直琢磨着如何将学习的理论与我所掌握的知识结合起来，来解决或者处理实际问题，于是就有了 前端自动化打包部署 的念头。 初学乍道，切不可眼高手低，先给自己定个小目标，先实现一个最简单版本。 工欲善其事，必先利其器，开发环境的配置是开发的第一步。 关于 python…"}, {"id": "6844904069127995399", "title": "记一次惨痛的Vue-cli + VueX + SSR经历", "desc": "整个网站的架构采用横向分层，从上往下越来越抽象，引用关系由上至下，拒绝由下至上的引用。 采用 ECMAScript 6 来开发逻辑和交互，然后通过 Webpack 和 Babel 将高级版本的 JS 编译成当下流行浏览器能够解析的 ECMAScript 5。 Web 前端的代码…"}, {"id": "6983332982710861854", "title": "10.(VueComponent)组件化开发 ", "desc": "一.什么是组件化 vue.js 有两大法宝，一个是数据驱动，另一个就是组件化，那么问题来了，什么叫做组件化，为什么要组件化？接下来我就针对这两个问题一一解答，所谓组件化，就是把页面拆分成多个组件，每个"}, {"id": "6844903872243171336", "title": "我是这样搞懂一个神奇的BUG", "desc": "409 ？Conflict ？ 平时很少遇到这样的错误，貌似很严重的样子，吓得我赶紧查看到底发生了什么。 仔细查看错误详情发现是因为使用同一个邮箱账号多次注册导致后面的请求数据库直接报错。 但是，不应该啊！我们是事先有做检查的。如果该邮箱已经被注册，会提醒并且不让注册的。难道对…"}, {"id": "6868987550577950728", "title": "Vue.js构建工具比较", "desc": "构建工具是开发人员工作流程中不可或缺的一部分，单页应用程序（SPA）和现代JavaScript（ES6）的兴起使JavaScript构建工具激增。 术语“构建工具”用于描述使用包、工具、库和预设模板自动完成简单的重复性任务的过程。 这些工具可帮助开发人员高效地构建并使开发过程更…"}, {"id": "6903064620530368526", "title": "vue实现图片懒加载组件", "desc": "监听页面滚动事件，做防抖处理，计算图片是否在可视区域，如果在则设置图片src属性，并监听图片加载完成事件，图片加载成功后移除滚动事件监听即可。"}, {"id": "6844904138262741000", "title": "Vue-Router 基础入门教程", "desc": "这周的计划是用VUE将之前的小demo的前端给重构了，并且做成前后端分离的样式，因为之前的那个聊天室的demo几乎都是在一个路由上完成的，所以学习Vue-router是不可避免的，本次笔记是我在学习vue-router这个框架过程中的一些笔记。中间也穿插了部分知识点，希望能帮助…"}, {"id": "6844903634484854797", "title": "vue-router中scrollBehavior的妙用", "desc": "1. keep-alive 2. 页面返回出现空白屏问题 这里为什么不能直接return而必须使用异步滚动操作呢？以下是个人的一些见解欢迎大家来探讨指正。 首先我们要先去了解scrollBehavior函数究竟在组件的哪个生命周期后才开始执行。这里我对组件的每个生命周期和scr…"}, {"id": "6992391177714696206", "title": "Vue发布订阅模式和观察者模式", "desc": "1. 发布/订阅模式 订阅者 发布者 信号中心 兄弟组件通信过程 模拟 Vue 自定义事件的实现 1. 观察者模式 观察者(订阅者) -- Watcher update():当事件发生时，具体要做的事"}, {"id": "6984784551503790116", "title": "【Vue源码】图解 diff算法 与 虚拟DOM-snabbdom-最小量更新原理解析-手写源码-updateChildren", "desc": "> 来自尚硅谷的课程笔记 课程链接 [尚硅谷邵山欢（考拉老师）Vue之虚拟DOM和diff算法] > 加入大量的注释以及大量改写，新增很多插图解释diff算法 > 第八章仔细说明了老师说的一些比较含糊"}, {"id": "6984783845333680164", "title": "【Vue源码】mustache模板引擎 - 基本使用 - 底层原理 - 手写实现", "desc": "> 来自尚硅谷的课程笔记 课程链接[\\[尚硅谷邵山欢（考拉老师）Vue之mustache模板引擎 > 加入大量的注释以及改写"}, {"id": "6989867650272722980", "title": "Jenkins ssh脚本打包vue项目时卡住了", "desc": "原因 今天发现自己提交的代码在测试环境中始终不是最新的，然后打开Jenkins发现卡住了，一直卡在如下截图这里 提示是已经打包成功了，但是就是卡在这里不动了。 然后回想了一天这两天到底改了些什么，简单"}, {"id": "6963842223800582152", "title": "2代3代Vue响应系统一浪更比一浪强，前浪已死？（上） ", "desc": "响应式系统（Reactivity systems）是现代前端框架的关键部分之一。应用系统的的高度交互性、动态性和响应能力全靠它支持。每个Web开发人员而言都应该了解这一系统的功能和实践操作。 原理 响"}, {"id": "6906310815763300360", "title": "vue3+typeScript 多选标签(每周一个小组件)", "desc": "实现功能：单击标签可选中或取消，标签可多选。 每周分享一个vue3+typeScript的小组件，我只想分享下自己的实现思路，楼主是个菜鸡前端，记录下实现过程，说不定对你有帮助。 vue3持续更新中..."}, {"id": "6844903938756460558", "title": "浏览器垃圾回收机制与 Vue 项目内存泄漏分析", "desc": "1. 介绍 浏览器的 Javascript 具有自动垃圾回收机制(GC:Garbage Collecation)，也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其…"}, {"id": "6979766268303769607", "title": "适合Vue3初学者的一篇文章~~", "desc": "Vue3 [TOC] 学习 [^记得点赞收藏哦~~，后续会更新其他技术文章]: vue3重写的动机 使用新的js原生特性 解决设计和体系架构的缺陷 在vue3中新增了es6的 proxy，proxy消"}, {"id": "6844903751346569229", "title": "造轮子之图片轮播组件(swiper)", "desc": "图片轮播是种很常见的场景和功能，一般移动网站首页的轮播banner，商品闲情页的商品图片等位置都会用到此功能像这种常用的场景功能肯定是有人早就写好插件了的，所以遇到这种场景，一般都遵循以下三步：打开冰"}, {"id": "6844903764671856653", "title": "【前端笔记】Vuex快速使用", "desc": "开始使用 Vuex，把状态拿到应用外部管理，Vuex管这个管理状态的玩意叫 Store，一个完全独立的应用，他只负责状态管理。尝试把 Vuex 应用和 Vue 应用划清界限， 所谓状态管理，无非就是定义状态，修改状态。 在 Vuex 里定义状态，我们需要 new 一个 Stor…"}, {"id": "6935733545029599262", "title": "Vue+ElementUI 后台博客管理", "desc": "表单和表格是后台系统使用比较频繁的组件，通过对Element UI进行二次封装，达到使用通用的JSON数据格式传递。表单子组件通过将prop传递属性定义为对象（基本类型无法直接修改），来达到通过v-model绑定数据并更新，初始化开启部分默认操作（清空按钮、字数限制等），并使用…"}, {"id": "6844903939071016968", "title": "Mac下搭建本地Easy-Mock做假数据", "desc": "自己最近一直在分享前端甜小白系列的教程,已经分享到第八篇,至此我们要进入下一个阶段项目和案例分享,要涉及到和后台进行数据交互,那么问题来了,作为前端开发攻城狮不会写后台数据,只会本地造假数据,与实际的企业开发差距较大,为了模拟企业级真实开发,为了帮助大家能顺利的自己写API数据…"}, {"id": "6962788929950990367", "title": "学习Vue3值得注意的新特性系列之（二）", "desc": "值得注意的新特性 Vue 3 中需要关注的一些新功能包括： 组合式 API Teleport 片段 触发组件选项 createRenderer API 来自 @vue/runtime-core创建自定"}, {"id": "6844904196026826765", "title": "vue-cli 配置 single-spa", "desc": "子项目使用异步组件 import() 时，单独跑起来没问题！！！但是在主应用里面会报错，改为正常引入 import from 就没事。。。"}, {"id": "6903309715309068295", "title": "四个优秀 Vue.js 静态站点生成器", "desc": "在过去几年里，Vue.js 已经成为 web 应用程序开发的热门选择。随着它的流行，该框架已经扩展到曾经以 React 为主导的静态站点生成器领域。 像 Gatsby 和 NextJS 等这类 React.js 的静态网页生成器，你可以找到几个支持生成静态网页的 Vue.js …"}, {"id": "6992582591610109989", "title": "vue3 部署项目至服务器", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 传统的部署流程至少需要这样两个步骤： 1、npm run build → 在dist文件夹下生成打包文件 2、通过 winscp、xf"}, {"id": "6944912171742543879", "title": "vue3 正式版开发体验心得！", "desc": "最近使用Vue3+elmentPlus 开发了项目，收获的体验心得。 1. 安装 2. Options API 和 Composition API 在特定的区域（data，methods，watch，computed...）编写负责相同功能的代码。 随着业务复杂度越来越高，代码…"}, {"id": "6907517774499676168", "title": "Vue3更新重点", "desc": "1、基于Proxy的观察者机制Vue2.x使用Object.defineProperty，参考文档https://www.jianshu.com/p/8fe1382ba135Vue3使用Proxy，对"}, {"id": "6932276699283324936", "title": "前端面试常考题：JS垃圾回收机制", "desc": "众所周知，应用程序在运行过程中需要占用一定的内存空间，且在运行过后就必须将不再用到的内存释放掉，否则就会出现下图中内存的占用持续升高的情况，一方面会影响程序的运行速度，另一方面严重的话则会导致整个程序"}, {"id": "6844904118142631949", "title": "屏幕滑动动画方案", "desc": "公司正好要做首页，需要模仿别人的官网，滑轮切换要有动画效果。 缺点，只能页面加载的时候执行一次动画，无法根据scroll重复触发，需要达到这个效果比较麻烦, 推荐使用方案二。 用法跟wow.js差不多，可以根据滚动 实现重复动画效果。 data-aos-mirror=\"true…"}, {"id": "6946475178188603429", "title": "详解Vue如何提取Critical Css", "desc": "总结：Critical Css就是渲染首屏的最小CSS集合。 是否将组件中的 CSS 提取至一个独立的 CSS 文件中 (而不是动态注入到 JavaScript 中的 inline 代码)。 同样当构建 Web Components 组件时它总是会被禁用 (样式是 inline…"}, {"id": "6918652111542714381", "title": " Vue如何监听数组的变化？", "desc": "其实我们并不是要你把答案都记下来，而是把其中的思想学习到。就像你接触一个新的领域react，你也一样可以把基本思想提炼出来。 这其实是老生常谈的问题，但凡你有一点基础知识，你也能答出一二。师姐跟我说，其实问题不只是问题本身，而是跟这个知识顺带出来的体系。📝 当我们访问或设置对…"}, {"id": "6991848106904027144", "title": "由浅入深了解Vue组件中的data｜ 8月更文挑战", "desc": "首先，我们先看一个简单的原型链有关知识。 我们可以看到，实例对象VC1修改了name的值为“lx”,新的实例对象VC2访问到的值也是修改后的“lx”。 这是因为VC1和VC2两个实例对象在操作$opt"}, {"id": "6991846708380434462", "title": "vue源码研究之响应式原理初探（中）｜8月更文挑战", "desc": "- vue对象观察模块源码学习（中） 本文源码基于2.6.11版本 尝试着从源码角度来学习，响应式原理是如何收集依赖的"}, {"id": "6966041319395295263", "title": "手把手带你实现一个min版的vue2（1） 数据响应式核心原理", "desc": "手把手带你实现一个min版的vue2（1） 数据响应式核心原理 vue2数据响应式核心通过Object.defineProperty()这个API实现的，但这个API实际中开发运用不多，为了应付面试笔"}, {"id": "6844903566172241928", "title": "动态生成form表单,不用再为表单烦恼", "desc": "具有数据收集、校验和提交功能的表单生成器，包含input、复选框、单选框、输入框、下拉选择框等元素以及省市区三级联动、时间选择、日期选择、颜色选择、文件/图片上传功能，支持事件扩展。"}, {"id": "6844903711098028046", "title": "[译]JS箭头函数三连问：为何用、怎么用、何时用", "desc": "在现代JS中最让人期待的特性就是关于箭头函数，用=>来标识。箭头函数有两个主要的优点：其一是非常简明的语法，另外就是直观的作用域和this的绑定。 因为这些优点，箭头函数比起其他形式的函数声明更加受欢迎。比如，受欢迎的airbnb eslint configuration库会强…"}, {"id": "6991836205507674142", "title": "reactive—将数据变成相应式数据", "desc": "与ref用法类似， 不同点： ref用于基本数据类型 reactive 用于复杂数据类型 可相应式数据类型白名单 总结： reactive创建对象的过程"}, {"id": "6991381826199617573", "title": "Vue路由 ｜ 8月更文挑战", "desc": "1.路由的基本概念与原理 路由是一个比较广义和抽象的概念，路由的本质就是对应关系 在开发中，路由分为： 后端路由 前端路由 1.1 路由 1.1.1 后端路由 概念：根据不同的用户URL请求 返回不同"}, {"id": "6844904094667112461", "title": "手写一个Vue版Upload组件", "desc": "之前对一些主流手机拍出的照片大小做过对比，华为P30拍出的照片3M左右，同事的小米9不知开启了什么模式拍出了10M以上的照片。照片太大了对服务端上传文件造成了不小的压力，对此，后端对前端提出了图片上传前对图片进行压缩。我们目前所用的UI库Upload组件并不支持对上传的图片进行…"}, {"id": "6952761528474927112", "title": "render函数~", "desc": "render函数2021年了不会还有人对上面的代码不熟悉吧，通过脚手架构建的项目，main.js中都会有上面这些代码。el是挂载的DOM元素，可以写DOM对象、选择器；Render就是今天的大哥，如上"}, {"id": "6953120078107770894", "title": "vue优化首页加载速度", "desc": "在vue项目中，引入到项目中的js、css文件，编译时都会被打包到vendor.js文件中，影响首页加载速度。"}, {"id": "6844903760771153933", "title": "Vue 源码解析（实例化前） - 响应式数据的实现原理", "desc": "在上一篇的结尾，我说这一篇后着重讲一下 defineReactive 这个方法，这个方法，其实就是大家可以在外面看见一些文章对 vue 实现响应式数据原理的过程。 虽然很多前端的大佬知道它的作用，但是我相信还是有一些朋友是不认识的，我希望我写的文章，不只是传达vue内部实现的一…"}, {"id": "6986231761319493662", "title": "VueX,VueX持久化", "desc": "VueX的作用: VueX是用来在Vue项目开发中使用的状态管理工具。试想一下，如果在一个项目开发中频繁的使用组件传参的方式来同步data中的值，一旦项目变得很庞大，管理和维护这些值将是相当棘手的工作"}, {"id": "6844903546052165639", "title": "Vue全家桶商城全站升级之引入HTTPS,PWA,错误监控,持续构建。", "desc": "使用Vuex做状态管理的时候，当用户刷新页面，Vuex里面的状态会全部丢失，从而引起程序的一场。解决思路是在creared()钩子函数里面添加以下方法: 上面代码的原理是，当页面刷新时，会将当前Vuex的状态存储到LocalStorage里面，刷新成功，再从LocalStora…"}, {"id": "6998486290656133134", "title": "Vue2.0组件", "desc": "基础结构 以.vue结尾，通过\"vue-template-compiler\": \"^2.6.11\"编译为.js文件 三个部分 template：模板结构 script: JS style:CSS 组件"}, {"id": "6894883208584757261", "title": "Prettier - Code formatter使用", "desc": "Prettier - Code formatter这是一款 格式化js、css代码插件，暂不解释。 Prettier的中文意思是“漂亮的、机灵的”，也是一个流行的代码格式化工具的名称，它能够解析代码，使用你自己设定的规则来重新打印出格式规范的代码。 使用Prettier在cod…"}, {"id": "6844903610094977031", "title": "vue-仿支付宝支付", "desc": "开始之前的小唠叨不管逻辑有没有搞懂，先把样式写出来总是没错啦~思路梳理代码"}, {"id": "6908613287257047048", "title": "vue项目小效果-拖拽更改左右宽度", "desc": "最后不要忘了组件销毁前把窗口事件监听这个方法给注销，因为这个方法是全局的，如果不注销会影响到其他页面。 我的效果实现表演完了，如果大家看完有啥想问的都可以评论，我会及时回复的。上方如果有问题，欢迎大家提出，我会改正的。"}, {"id": "6873817361632198664", "title": "傻瓜式教程：使用Vue和Electron构建Markdown预览器", "desc": "开发人员必须适应的最新趋势是为多个操作系统编写一个代码库。 Electron是一个JavaScript框架，它可以让你用简单的JavaScript和HTML创建桌面应用程序，并将网站转换成可执行的应用程序，可以充分利用Windows、Mac或Linux操作系统的所有功能。 Vu…"}, {"id": "6844903765112258567", "title": "深入学习Vue SSR服务端渲染 用Nuxt.js打造CNode社区", "desc": "浏览器先请求HTML文档，服务器端先将html页面(或页面组件)，生成为html字符串，再返回给浏览器，最后直接渲染到页面上。 浏览器先请求HTML文档，在浏览器端加载html页面中的\bJS脚本。通过JS（vue/react)\b的能力，将虚拟DOM最终渲染填充到页面中。 服务端…"}, {"id": "6844904197867962382", "title": "简述SSR服务端渲染之使用Nuxt搭建一个vue从0到1的项目！", "desc": "vue的高效开发不言而喻，但是单纯的使用vue-cli开发是否经常遇到页面不被收录，爬虫抓取不到页面的苦恼呢？那我们一起来看看nuxt-vuejs的通用框架。 本文主要讲述使用nuxt.js搭建vue项目的一个从0到1的过程。 如有错误，还请各位大佬订正。 SSR，即服务器渲染…"}, {"id": "6844904174036090893", "title": "彻底搞懂vue之自定义指令", "desc": "一. 基本用法 bind:只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个绑定时执行一次的初始化动作。 inserted:被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于document中）。 update:被绑定于元素所在的模板更新时调用，而无论绑…"}, {"id": "6963500958777081863", "title": "vue2全家桶原理", "desc": "vuex原理解析 vuex的设计理念是：集中状态管理，可预测状态变化 插件 在使用vuex时，首先需要Vue.use(Vuex),也就是安装vuex插件。 怎么实现一个插件？ 很简单，对外暴露一个in"}, {"id": "6844903516788506637", "title": "vue 踩坑小记 - 如何正确的使用 debounce", "desc": "然而，上面的代码是有深坑的（在坑中爬了半天 - . -），下面聊聊我的爬坑历程。 页面中有两个 Chart 组件，他们会监听 window.resize 事件，然后在控制台输出 \"resize\"。 两个 Chart 实例中的 resize 会调用同一个 debounce 函数，…"}, {"id": "6901162042628636686", "title": "Vue 常考基础知识点万字总结", "desc": "当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。当这些数据改变时，视图会进行重渲染。 也就是说如果你添加一个新的 property…"}, {"id": "6989932389703090213", "title": "Vue双向绑定的原理", "desc": "vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回"}, {"id": "6844903959463723022", "title": "使用vue技术栈，作为一个前端架构师是必须掌握这些知识点的", "desc": "4.ViewModel监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。 3.beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把…"}, {"id": "6844903599252701192", "title": "vue2.0 + element UI 中 el-table 数据导出Excel ", "desc": "https://blog.csdn.net/u010427666/article/details/79208145"}, {"id": "6989989305863110687", "title": "elementui中cascader默认值设置", "desc": "cascader默认值设置，递归获取选中节点的所有父节点的label值，当传回的数据不是label和value时，通过prop配置"}, {"id": "6959098769132650533", "title": "如何从0到1实现自己的组件库", "desc": "前段时间自己在尝试从0到1实现一个组件库，把一些常见功能总结下，如组件封装、按需加载、文档自动生成等 github地址 封装弹窗组件 Vue组件封装常用api Vue组件的API主要包含三部分：pro"}, {"id": "6883304258255470600", "title": "看懂Vue.js 3.0 的优化", "desc": "Vue.js 从 1.x 到 2.0 版本，最大的升级就是引入了虚拟 DOM 的概念，它为后续做服务端渲染以及跨端框架 Weex 提供了基础。 Vue.js 2.x 发展了很久，现在周边的生态设施都已经非常完善了，而且对于 Vue.js 用户而言，它几乎满足了我们日常开发的所有…"}, {"id": "6918615428545806349", "title": "vue-resource 拦截器interceptors使用【七日打卡】", "desc": "在vue项目使用vue-resource实现异步加载的过程中，需要在任何一个页面任何一次http请求过程中，增加对token过期的判断，如果token已过期，需要跳转至登录页面。如果要在每个页面中的http请求操作中添加一次判断，那将会是一个非常大的修改工作量。那么vue-re…"}, {"id": "6995567959066771469", "title": "vue 2.0 虚拟DOM和 diff算法", "desc": "在这里探究的DOM 和diff 算法是通俗易懂的，简易版的。 虚拟DOM 是什么样的结构 比如以下这个dom节点 他的虚拟节点 创建一个生成虚拟dom 的函数 创建一个h函数 用来创建虚拟dom 节点"}, {"id": "6844904190246912013", "title": "Vue 3.0 初探 - Proxy", "desc": "4 月 17 日，尤大在微博上宣布 Vue 3.0 beta 版本正式发布。 在尤大发布的《 Vue3 设计过程》文章中提到之所以重构 Vue 一个考量就是JavaScript新的语言特性在主流浏览器中的支持程度，其中最值得一提的就是Proxy，它为框架提供了拦截对于objec…"}, {"id": "6844903941621153800", "title": "vue项目整合Eslint和stylelint规范代码", "desc": "最近在搭建项目框架，想着上一个项目代码风格各异，就想着在新项目中引入Eslint来规范团队成员代码风格，保持统一，也方便大家维护代码，减少不必要的错误。前端应用愈加复杂，代码规范问题必须通过强制的方式保持统一。以下是团队逐渐摸索出的一些配置，各取所需。 在用vue-cli3搭建…"}, {"id": "6991484780151832606", "title": "vue源码解析学习笔记-1:模板引擎-mustache.js", "desc": "写在前言：我在b站学编程，这次笔记来源于Vue源码解析系列课程_哔哩哔哩_bilibili，侵删！！ 1.什么是模板引擎 参数1：模板字符串 参数2：数据 遇到的第一个问题 在引入mustache.j"}, {"id": "6844903650700034056", "title": "除了cookie，你还可以用jwt(json web token)！", "desc": "1. 认识jwt（json web token） jwt是为了在网络应用环境传递声明而执行的一种基于json的开放标准。 jwt被用来在身份提供者和服务提供者间传递被认证的用户身份信息，简单来说，就是用来验证身份的手段，例如登录校验，像我们之前用的cookie。 jwt可以使用…"}, {"id": "6992534416895508516", "title": "Vue.js 3.0源码解读：Composition API -Setup", "desc": "Vue.js 3.0设计了一个很强大的API-Compositon API, 它主要用来优化代码逻辑的组织和复用。它提供了一个Setup的启动函数。接下我们来看看它到底是怎么运行的。这里主要调用的一个"}, {"id": "6844903744212058120", "title": "express+mongodb+vue实现增删改查-全栈之路2.0", "desc": "半年前写过一个express+mongodb+vue的项目，其中大致的给大家展示了从零构建一个前后台项目所需要的技术点和思路，以及在开发过程中遇到的一些坑。 之后收到一些小伙伴的私信包括github上提出的issue。总结一下就是一下以下两点。 其中项目报错404的问题，是因为…"}, {"id": "6844903662129512461", "title": "如何读取 JSON 里嵌套的深层数据？我这儿有各语言通用方案", "desc": "使用JSON格式进行多个端特别是前后端之间通信已成为主流方案之一， PHP、java、objectC、JavaScript 这几种语言是我所在团队接触比较多的主要开发语言。 有时候，很多时候，从接口给出的数据会存在数据嵌套现象，比如在一款记账软件中，一条付款计划的数据会同时携带…"}, {"id": "6896795817676537870", "title": "基于vant封装的form组件", "desc": "form组件构建指南github:https://github.com/mr-co-idea/H5设计解耦：减少子组件与form组件的耦合，将子组件视为独立个体组合：通过组合子组件来实现form组件的"}, {"id": "6844903940291559431", "title": "Vue 双向数据绑定原理剖析及实现（详细）", "desc": "（2）简单地说，就是用这个方法来定义一个值。当调用时我们使用了它里面的get方法，当我们给这个属性赋值时，又用到了它里面的set方法； 这个例子实现的效果是：随着文本框输入文字的变化，span中会同步显示相同的文字内容；这样就实现了 model => view 以及 view …"}, {"id": "6888567432794325006", "title": "Vue2.0源码分析：响应式原理(上)", "desc": "那么我们的深入响应式原理介绍会以initState()方法开始，逐步分析Vue中响应式的原理，下面这张图可以很好的展示响应式的原理。 obj：要定义其属性的对象。 key：要定义或修改属性的名称。 descriptor：要定义或修改属性的描述符。 其中descriptor有很多…"}, {"id": "6942393497546653703", "title": "移动端Vue2.x Picker的全局调用", "desc": "什么是Picker组件对标PC端的Select标签, 移动端的选择框一般是在viewPort底部弹出Picker组件存在的问题Picker通常以fixed布局，但是我们在写Picker组件时有遇到过该"}, {"id": "6989798350975418399", "title": "ElementUI 01 - 环境变量文件说明", "desc": "Vue+Element进行项目开发时，离不开环境变量文件的配置，本文通过项目实践，简单整理有关Vue环境变量文件的内容和配置。"}, {"id": "6945625971403948062", "title": "了解 Vue 的 Compsition API", "desc": "在这篇文章中，我将讲讲 Vue 的 Composition API 为什么比之前的 Options API 要好，以及它是如何工作的。 首先，这里不是要大家放弃 Options API，如果你觉得 Options API 还不错，已经习惯了，就继续使用它。但我希望你能明白为什么…"}, {"id": "6882332293348720653", "title": "解析 Vue I18n？", "desc": "国际化是一种设计过程，可以确保产品（通常是软件应用程序）可以适应各种语言和地区，而无需对源代码进行修改。 有时写作 i18n ，其中18代表国际化中i和n之间的18个字符。 类似 a11y，可访问性 accessibility。"}, {"id": "6949184687319449631", "title": "Vue 系列 - v-model自定义组件结合el-form做表单校验", "desc": "1. ElementUI form表单基本使用 , 表单校验流程. 2. v-model 自定义组件 , 并结合element from进行校验."}, {"id": "6844904137482567688", "title": "vue项目中，采坑自定义video视频控制条", "desc": "最近公司项目中，添加了视频模块，但是产品觉得Video自带的控制条有点LOW，于是自己设计了一个。于是开始了自定义Video控制的采坑之旅。。 1，判断用户鼠标事件，切换图片和视频。 2.video需要通过video来获取他实例来进行dom操作，video的鼠标移入和滑出分类是…"}, {"id": "6844903701732294669", "title": "vue+iview 实现可编辑表格", "desc": "先简单说明一下,这个Demo引入的vue,iview的方式是标签引入的,没有用到webpack之类的构建工具... 毕竟公司还在用angularjs+jq. 首页没什么说的,都是基本的架子. 这是需要渲染的数据及其说明: vue中, 数据更新,视图会随之更新. 想象一下,我在输…"}, {"id": "6844903855654715399", "title": "浅谈 vue-cli 扩展性和插件设计", "desc": "这是一个新开的'实验性'文章系列，如其名‘技术地图’，这个系列计划剖析一些前端开源项目，可能会探讨这些项目的设计和组织、整理他们使用到技术栈。 首先拿vue-cli小试牛刀，再决定后续要不要继续这个系列. 我一直在思考我们编程主要在做什么？我们有一大部分工作就是选择各种工具/库…"}, {"id": "6844904112866197518", "title": "后台项目总结", "desc": "这里axios是重点说的部分，axios 是一个 HTTP 库，可以用在浏览器和 node.js 中，在使用 srr 同构的时候也会经常使用它，下面说一下基本的封装方式，具体情况根据业务调整。 上面定义的是配置文件，之所以不全局调用axios或者修改配置的原因是会造成污染，下面…"}, {"id": "6985507222629384222", "title": "在npm上发布属于自己的Vue组件", "desc": "作为一个初级前端，还是要有点理想的，之前有想过开发一个vue组件上传到npm上以供大家使用，但是因为工作业务繁忙，一直鸽到现在才有时间做。 开发组件还是比较容易的，第一次弄的话，难点就在如何打包发布"}, {"id": "6996334173656973342", "title": "vue-cli封装axios进行前后端接口联调", "desc": "Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中,本文主要是vue-cli封装axios进行前后端接口联调"}, {"id": "6989166119038746632", "title": "vue对于常用数组方法重写的原因和源码的学习（vue面试必会知识点）", "desc": "还记得在些vue的时候，如果data中的数据是对象时，需要用this.$set吗，但是数组为什么不需要呢，原来vue重写了部分原生数组方法来使得新增的数组元素能响应式更新，一起来看看吧~"}, {"id": "7000203361303658509", "title": "vue3.0组合式API-useForm", "desc": "更多文章 前言 开始之前先简单介绍一下Form组件，Form组件是通过配置文件生成的表单，可以简单的理解为动态表单，通过数据生成，ok，开始我们今天的主题useForm 介绍 根据目前现有业务针对Fo"}, {"id": "6844904134613680141", "title": "尤雨溪在 vue3.0 beta 上推荐的 no webpack 小工具 vite", "desc": "在4月21日晚，Vue作者尤雨溪在哔哩哔哩直播分享了Vue.js 3.0 Beta最新进展。 里面尤大大所提到他最近在做的这个小工具 vite ,一个实验性的no build的vue开发服务器。(这个小工具可以支持热更新,且不用预编译) 感谢阅读。如果您觉得这篇文章有帮助，请点…"}, {"id": "6986627019144429581", "title": "如果你想要一款todo软件，就用Electron+Vue做一个吧！", "desc": "使用electron+vue实现自己的to-do-list软件，合理规划自己的日常任务。同时也是一片electron+vue入门讲解，希望对大家有所帮助"}, {"id": "6844904115886096392", "title": "请你说说 Vue 中 slot 和 slot-scope 的原理（2.6.11 深度解析）", "desc": "Vue 中的 slot 和 slot-scope 一直是一个进阶的概念，对于我们的日常的组件开发中不常接触，但是却非常强大和灵活。 这使得这种模式的开发体验变的更为统一，本篇文章就基于 2.6.11 的最新代码来解析它的原理。 可以看到，我们只要把一个用来处理请求的异步 pro…"}, {"id": "6844904034197848071", "title": "Vue合理配置WebSocket并实现群聊⛄", "desc": "写JQuery项目时，使用websocket很简单，不用去考虑模块化，组件之间的访问问题，面向文档编程即可，在Vue项目中使用时，远远没有想象中的那么简单，需要考虑很多场景，本篇文章将与各位开发者分享下vue-native-websocket库的使用以及配置，用其实现群聊功能。…"}, {"id": "6978278417951096839", "title": "手把手教你剖析vue响应式原理，监听数据不再迷茫", "desc": "近期在对 vue 的学习到一定阶段之后，在想着自己能不能造些东西。于是身边的小伙伴建议说可以从看 vue 的源码开始，毫无头绪的我原本迟"}, {"id": "6844904018339168270", "title": "我的前端知识梳理-VUE篇", "desc": "梳理一下个人开发中遇到的一些vue问题，记录一下个人的理解。 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。…"}, {"id": "6844903815209025544", "title": "从0到1搭建Element的后台框架", "desc": "由于最近公司要开发一个后台管理系统，查阅了很多vue框架,本人觉得element简洁，方便，于是选择它作为我们的首选框架，并分享给大家，如果您觉得有需要改进的地方可以提出来一起探讨，Github地址。本文篇幅比较长，希望同学们可以耐心的读下去，如有不懂可以下方留言 接下来按照上…"}, {"id": "6995496087192600590", "title": "11x5 精读Vue官方文档 - CookBook - 避免内存泄漏", "desc": "精读 Vue 官方文档系列 🎉 简介 SPA 应用相比与 MPA 更容易产生“内存泄漏”。因为用户在使用 SPA 应用时是不需要刷新浏览器的。此时，就需要应用自身或者是浏览器来清理无用的代码，确保垃圾"}, {"id": "6870091402630397959", "title": "尝鲜vue3.0-从ToDoList开始（1）", "desc": "完成上述步骤之后，相信大家对vue3.0有了初步的了解。。。 生命不息，代码不止。。。"}, {"id": "6987197044087586823", "title": "5x1 精读Vue官方文档 - 状态管理", "desc": "精读 Vue 官方文档系列 🎉 类 Flux 状态管理的官方实现 vuex 与 redux 都是对 Flux 架构的官方实现。 状态管理的目标 可以跨组件进行状态共享，方便大型应用的状态管理。 如何简"}, {"id": "6983265459239911437", "title": "1x5 精读Vue官方文档 - 处理边界情况", "desc": "精读 Vue 官方文档系列 🎉 访问元素 & 组件 $root 访问根组件实例 $parent 获取父组件实例，支持多次调用，获取连续多层父级的实例。 ref & $refs 获取子组件的实例 获取 "}, {"id": "6992113550059634725", "title": "Vue3 Dialog 组件封装实践（包含与 react 的比较）", "desc": "前面我写了一篇 React Dialog 组件的个人实践 (juejin.cn)，本人公司技术栈一直是 react ，没有足够的机会实践 vue3 。今天使用同样的思路封装 vue3 Dialog 组"}, {"id": "6989155453296967711", "title": "总结Vue3及常用api", "desc": "认识Vue3 相关信息 首先了解一下什么是vue3 Vue.js 3.0 \"One Piece\" 正式版在2020年9月份发布 2年多开发, 100+位贡献者, 2600+次提交, 600+次PR V"}, {"id": "6984595483717009444", "title": "3x1 精读Vue官方文档 -  自定义指令", "desc": "精读 Vue 官方文档系列 🎉 简介 Vue 指令可以分为”内置指令（例如：v-once，v-cloak等）“与“自定义指令“。 Vue 指令提供了操作底层 DOM 的能力，增强了 Vue 模板的处理"}, {"id": "6992188427571560461", "title": "用 NuxtJS 构建 SSR 商城 实战笔记——axios 配置与跨域的实现", "desc": "本篇主要介绍基于 NuxtJS 构建的 vue 后端渲染（SSR）项目中关于 axios 的配置、取消重复请求的发送与开发环境下浏览器跨域请求的实现~"}, {"id": "6989258543098494989", "title": "从无到有浅聊Vue3的进步", "desc": "从无到有浅聊Vue3的进步 重点： vue.js是什么 vue的优点 vue3的进步 - vue.js是什么 ​ 官网描述：vue是一套用于构建用户界面的渐进式框架，可以自底向上逐层应用，Vue 的核"}, {"id": "6844903969643298829", "title": "从一个简单的 list 组件搞懂 Vue 插槽", "desc": "Emmm。。乍一看似乎没有任何毛病，甚至数据变化了也是可以满足要求的。 此时，这个组件就有点不够用了，无法应对各种需求的组件不是好组件。既然内容是多变的，那就不能固定,而应该是灵活的，最灵活的方式应该是将决定权交给使用者（父组件），使用者是最清楚内容应该是什么的，那具体怎么做呢…"}, {"id": "6997038804326416414", "title": "实现Vue图片懒加载", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 ! 图片懒加载在项目中的使用以及知识点整理"}, {"id": "6844903992313511944", "title": "vue过渡&动画的使用", "desc": "Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。 在日常开发中 动画是必不可少的一部分 不仅能让元素直接的切换显得更加自然 同时也能极大的增强用户体验 因此 在Vue之中也提供了非常强大的关于动画这方面的支持 Vue不仅支持用CSS来写一些过渡效果 同…"}, {"id": "7004437743384133646", "title": "Vue3 launch-editor源码解读", "desc": "源码解读系列，进行Vue3 launch-editor源码解读，了解vue-devtool是如何打开编译器中的文件"}, {"id": "6844903604135034893", "title": "当vue遇到pwa--vue+pwa移动端适配解决方案模板案例", "desc": "写在前面：这个项目杂七杂八看起来很杂，这篇文章主要是就是介绍下这个模板项目的几个要点，让大家从这个项目中能学到真正实用的技术要点，项目地址在文末。 Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。 PW…"}, {"id": "6844904199726055437", "title": "Vue3.0 性能优化及新特性深度解析", "desc": "在之前的VDOM中，如果msg值发生改变，整个模版中的所有元素都需要重新渲染。但在Vue3.0中，在这个模版编译时，编译器会在动态标签末尾加上 /* Text*/ PatchFlag。只能带patchFlag 的 Node 才被认为是动态的元素，会被追踪属性的修改。并且 Pat…"}, {"id": "6992834401424015391", "title": "Vue3 + Vite2 + TypeScript 开发模板搭建", "desc": "随着 vue3 的使用人数越来越多，我们的新项目也即将开始使用 vue3 。为了提高后续新项目的开发效率，我创建了一个公用的模板，以此达到开箱即用的效果~"}, {"id": "6844904112509681672", "title": "第三趴：vue框架进阶", "desc": "View: 检测用户输入、操作（键盘、鼠标）行为，传递调用Controller执行对应逻辑。View更新需要重新获取 Model的数据。 Controller：是View和Model 之间协作的应用层，负责业务逻辑处理。 Model：数据层，数据变化后 通过观察者模式通知 Vi…"}, {"id": "6844904150417801224", "title": "基于react/vue开发一个专属于程序员的朋友圈应用", "desc": "今天本来想开源自己写的CMS应用的，但是由于五一期间笔者的mac电脑突然崩溃了，所有数据无法恢复，导致部分代码丢失，但庆幸的是cms的打包文件已上传服务器，感兴趣的朋友可以在文末链接中访问查看。 今天要写的H5朋友圈也是基于笔者开发的cms搭建的，我将仿照微信朋友圈，带大家一起…"}, {"id": "6844904198723600391", "title": "基于prerender-spa-plugin的Vue.js预渲染实践", "desc": "使用背景改造内容1.路由模式路由模式切换为history模式，去除URL中的#路由懒加载，配合预渲染更好做到按需加载服务端配置覆盖无静态资源情况下返回的页面，避免直接访问或刷新4042.prerend"}, {"id": "6844904106671374344", "title": "vue-cli3.0与vant的引入", "desc": "因为我们的项目中本来是使用sass来作为css的一个预编译器的，但是vant是用的less语法，所以我们还需要安装下less，不然会报错。 配置安装参考官网的引入组件教程就可以了。 如果你使用postcss-px-to-viewport来配置vw解决移动端适配解决方案，将vie…"}, {"id": "6984991203959767053", "title": "路由懒加载import和require用法的区别", "desc": "vue-router同步和异步普通用法： 上面是加载路由最常用的三种方法，那有时候需要几个路由合并到一起加载怎么办呢，按照官方教程的写法： import通过这种特殊注释语法，将几个路由放到一个组中，实"}, {"id": "6844904165324374030", "title": "Vue3源码解析——整体流程和组合式API", "desc": "我们紧接上文，在了解了Vue3的数据侦测之后，再回头来看应用的整体初始化和一些内部细节。 App对象上包含众多API,相关的源码都可以在这里查看。 可以看见新增的TELEPORT和SUSPENSE类型节点~目前不必深究每种类型具体的处理逻辑，按照经验，我们先弄懂processC…"}, {"id": "6844903501592887309", "title": "nuxt(vue) + koa + mongo 写blog的一次小结", "desc": "... 权限部分，登录时接受服务器返回的 token，储存在本地， 使用 axios 拦截，以及 vue-router 路由元信息部分拦截，会检查 token 以及是否过期。 使用 element-ui 上传组件配合七牛。 ... ... node 版本 6.x+，使用前，请安…"}, {"id": "6983296951114711048", "title": "vue.js 和 vue.runtime.js的区别及使用方法", "desc": "完整版Vue：同时包含编译器和运行时的版本。 运行时版本Vue：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。"}, {"id": "6844903631045525518", "title": "Vue SPA项目优化小记", "desc": "之前做了一个React项目和Vue的项目，在做完后不加任何优化的情况下，这2个项目的首屏加载平均时间居然达到了20+s，好一点能进10s，差一点快30s，完全不能忍，优化势在必行，本文章记录下Vue项目的优化过程，React项目的优化后续补上。 上图是Vue项目的首页，整个项目…"}, {"id": "6844903928149065742", "title": "vuex模块化（module）", "desc": "1. 为什么使用模块 2. 下载vuex 4. 使用vuex-persistedstate状态持久化 5. 创建模块 6. state"}, {"id": "6844903582446288910", "title": "vue组件之间的数据传递", "desc": "最近在整理项目中代码，在组件之间数据传递遇到了问题，所以做了这次总结，如有不对的地方，望指正。 父组件可以通过Prop传递数据到子组件中。 Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据…"}, {"id": "6996130327835967519", "title": "Vue深入学习—keep-alive组件", "desc": "1、keep-alive是什么？是Vue内置的一个组件，可以使被包含的组件保留状态，避免被重新渲染！可以理解成防弹衣🧥; 包含在......"}, {"id": "6926442064141877256", "title": "可视化拖拽页面编辑器 三", "desc": "鼠标点击节点移动时，执行 mousemove事件，在这里来计算组件的宽高 (核心点，有兴趣可以深入研究，内含彩蛋)，修改block的 width和height，重新进行渲染。"}, {"id": "6844903518365548551", "title": "尚妆达人店 UI 组件化 工程实践（weex vue）", "desc": "尚妆大前端团队使用 weex 进行三端统一开发有一段时间了，截止本文发表「达人店」APP大部分页面都已经用 weex 进行了重构，在此期间也积累了一些基础组件和业务组件。 之前维护组件的方式是在达人店项目的工程内维护一个 components 文件夹，随日常开发迭代，并行需求与…"}, {"id": "6854573215478611975", "title": "React和Vue语法并排比较：状态管理", "desc": "这是有关React和Vue语法比较的第二篇文章。在本文中，将比较两种生态系统中最著名的状态管理库（Redux和Vuex）的语法。"}, {"id": "6844903560279228429", "title": "vue结合ueditor富文本编辑器（换肤分离）", "desc": "当时看到这个需求，我觉得是不难的,就去github上找富文本编辑器，因为项目比较急，当时我的想法是能找开箱即用的就找开箱即用的。 因为没做过富文本的开发，所以当时我测试这些富文本就花了一个下午，后来仔细考虑了一下，最后使用了比较保守的方式，用了ueditor开发，顺便美化了一下…"}, {"id": "6989432383380389901", "title": "element el-table 设置行高", "desc": "由于element el-table的默认行高不合适，有时候需要自定义的为el-table设置一下行高 先给table加一个class 再写css"}, {"id": "6962902157515292703", "title": "Vue之watch源码解读", "desc": "Vue之watch源码解读 回顾 watch 的用法 watch 是 Vue 中的一个监听数据变化的一个方法，我们在阅读源码之前先来回顾一下 watch 的用法 监听基本数据类型 watch 可以接收"}, {"id": "6844903937439432711", "title": "Vue中v-model、sync、$attrs/$lisrener、provied/inject修饰符解析", "desc": "上善若水，水善利萬物而不爭。——《道德經》 在平时开发是经常用到一些父子组件通信，经常用到props、vuex等等，这里面记录另外的三种方式v-model、sync是怎么使用，再说是怎么实现，其实v-model、sync都是语法糖。还有$attrs、$listener实现父子组…"}, {"id": "6897851738879950855", "title": "一个vue的百度地图鼠标绘图解决方案", "desc": "开源分享不易,还请各位不吝赐教,多提意见想法。顺手点赞 +、start + vue-baidu-map是一个很好的vue百度地图应用开发组件。但是相关的地图绘制工具组件，并没有很好的解决方案，所以就想着能不能结合BMapLib.DrawingManager 开发一个vue的百度…"}, {"id": "6844903538212995080", "title": "用vue开发一个所谓的数独", "desc": "最近的后台管理系统页面，功能暂时没有新的需求，就在想首页放什么东西，最近我想到的就是放个所谓的数独，为什么是所谓的数独，因为规则不同于标准的数独，只要求每一行每一列数字不一样就可以了！这个实例也是基于vue的，代码分享给大家。给大家代码，并不是要让大家直接拷贝代码，而是希望能让…"}, {"id": "6844903561373941774", "title": "前端框架的新星-Hyperapp 1.0简介", "desc": "在这个React, Vue, Angular三足鼎立的前端框架圈（其实React, Vue也不能算是框架），其实也出现了非常不错的库，因为被前三者的光芒所掩盖，所以并不太为人知。今天就要向你们介绍其中一个：Hyperapp。 历时了将近一年的时间，Hyperapp1.0终于发布…"}, {"id": "6984784552002600967", "title": "【Vue源码】数据响应式原理 - 依赖收集 - defineReactive - Observer - Dep - Watcher", "desc": "> 我们在使用Vue时，只需要修改数据，视图就会自动更新，这就是数据响应 > 今天来学习Vue实现数据响应式的原理~"}, {"id": "6844904036949295112", "title": "打造 Vue 技术栈中的“时间宝石“", "desc": "现代浏览器的功能越来越强大，前端需要处理的业务逻辑也越来越复杂，提供良好的交互是我们一直追求的事，而我们在做的可视化报表工具，有一个重要的提升用户体验的功能，撤销 & 重做，这个功能给用户以安全感和保障，用户不会担心所做的操作以及交互会消失掉，不可追溯。 为了实现这个功能，我调…"}, {"id": "6969845128202715172", "title": "Vue-Router的使用", "desc": "安装vue-router后，需要通过Vue.use显式的对vue-router组件进行注册，否则router-link组件和router-view组件无法使用。根实例的构造选项中传入router..."}, {"id": "6844903912525266952", "title": "Vue异步组件探究", "desc": "之前在回顾自己写的一个后台管理项目时，发现用到了Vue的异步组件。而之前恰好在研究vue的源码，顺便分析下异步组件的加载和执行过程。 异步，是相对于同步而言的。我们在使用Vue时，使用到的组件大多为同步组件。在vue实例第一次执行渲染的过程中，已经生成了组件构造器。而异步组件则…"}, {"id": "6987006676297580580", "title": "简单封装一个数据懒加载组件 ( Vue3 )", "desc": "简单封装一个数据懒加载组件 ( Vue3 ) 应用场景 在电商网站中，当某个商品模块进入可视区域后才去请求加载数据，如果没有进入可视区域，不发ajax请求"}, {"id": "6972147106995765285", "title": "vue2.6之处理跨域", "desc": "这是我参与更文挑战的第10天，活动详情查看： 更文挑战 如题所示，今天来介绍下怎么在这个 vue 中处理这个跨域问题~ （主要也是之前学 vue 时踩的坑🕳 哈哈） 跨域介绍 跨域是是由浏览器的同源策"}, {"id": "6882566665524281357", "title": "Vue结合Django-Rest-Frameword实现登录认证（二）", "desc": "在上一篇 Vue结合Django-Rest-Frameword结合实现登录认证（一） 文章中，我们利用token实现了一个非常基础的用户登录认证功能。 1. 优化axios：请求封装、认证信息的封装 2. 注销 3. 设置token过期时间 axios的优化就是对axios进行…"}, {"id": "6844903620241014797", "title": "如何在 vue-cli v3.0 中使用 SCSS/SASS", "desc": "在项目中使用 SCSS/SASS 进行样式编写无疑会节省很多开发样式的时间。关于如何在 vue-cli v3.0 中使用 SCSS/SASS，这里提供三种方案。前提是在使用 vue-cli 生成项目时勾选了 CSS Pre-processors (CSS预处理器)，否则无法在项…"}, {"id": "6856359634039963656", "title": "Vue组件通信", "desc": "props和$emit这是我们日常开发中最常使用的组件通信方式。父组件通过绑定属性来向子组件传递数据，子组件通过 props 属性来获取对应的数据，子组件则是通过派发 $emit事件将数据传递到父组件中。 ⽗组件可以通过$children访问⼦组件，子组件可以通过 $paren…"}, {"id": "6966236601370279973", "title": "vue3初始化挂载组件流程", "desc": "本文主要根据vue3源码去理解清楚vue3的组件挂载流程，根据个人阅读源码去解释，vue的组件是怎么从.vue单文件组件一步步插入到真实DOM中，并渲染到页面上。"}, {"id": "6916377630807851021", "title": "给 XSS 加点 S ", "desc": "本文中出现由花括号包裹的内容为服务端进行 html 字符串拼接的动态内容：{userData}，在其他文章中经常表现为 &#x3C;%= userData >。 本文中所使用的关键词：“用户数据”，与 “非受信数据” 同义。 XSS 是一种代码注入攻击，在受害者浏览器上注入恶意…"}, {"id": "6844903799757209608", "title": "vue cli 3.0快速创建项目", "desc": "Manually select features自己去选择需要的功能，提供更多的特性选择。 vue-cli 内置支持了8个功能特性，可以多选：使用方向键在特性选项之间切换，使用空格键选中当前特性，使用 a 键切换选择所有，使用 i 键翻转选项。 babel es6 转 es5。…"}, {"id": "6992885406735794207", "title": "JSX的替代选项｜ 8月更文挑战", "desc": "上一篇文章提到了 JSX 并不是什么神秘的东西，它的存在只是为了将开发者从写冗长的 createElement 或者h 的函数调用中解脱出来。"}, {"id": "6844903621474140173", "title": "Vue + GraphQL初试", "desc": "主要由RootQuery + RootMutation两种入口类型（操作）加上RootValue（resolvers）构成GraphQL Schema。（此处用graphql-tools是为了将所有的类型定义在一个字符串中，后续会移到一个.graphql文件中，然后用graph…"}, {"id": "6844903510434119687", "title": "你见过用命令行写的简历吗？", "desc": "OK，闲话少叙，来动手做一个吧。 首先，你需要把这个项目(https://github.com/dongsuo/vue-terminal-emulator) fork到你自己的Github目录下，然后pull到本地。（如果你不明白这一步的话，以下是你可以在谷歌或者百度输入框输入…"}, {"id": "6844903788889767943", "title": "vue.js 实践总结（三）Skeleton 骨架屏渲染", "desc": "简单来说，骨架屏（skeleton screen) 就是一个页面从html 下载完成到 js 下载完成并且执行数据渲染这两个时间点之间暂时渲染页面基本结构的方案。 上图形象地解释了两个多页面程序之间的切换，用Skeleton Screen 去优化用户观感的方案。 Skeleto…"}, {"id": "6844903745231421454", "title": "理解vue ssr原理，自己搭建简单的ssr框架", "desc": "大多数Vue项目要支持SSR应该是为了SEO考虑，毕竟对于WEB应用来说，搜索引擎是一个很大的流量入口。Vue SSR现在已经比较成熟了，但是如果是把一个SPA应用改造成SSR应用，成本还是有些高的，这工作量无异于重构前端。另外对前端的技术要求也是挺高的，需要对Vue比较熟悉，…"}, {"id": "6872232567244849160", "title": "Vue2源码解读(四)-Observe", "desc": "上面文章讲到了Vue的声明、Vue的Init和Vue的InitState，本篇将对Vue核心的Observe进行讲解和分析，Observe分为Dep和Watcher两部分，入口文件为src/core/observe/index.js。我们一步一步来看下源码。 Observe对外…"}, {"id": "6844903741762568199", "title": "vue后台管理系统权限控制思考与实践", "desc": "最近在开发管理系统时遇到了任何管理系统都会有的需求---权限控制，之前也遇到过这种需求，但是架构不完善导致的各种问题使得后期维护非常麻烦，这一次的方案解决了之前的种种问题，现做一次记录，当然这个架构后期可能会有坑，不过得一步一步的尝试才能发现并解决问题。 因为是单页面应用，路由…"}, {"id": "6844903561143255053", "title": "纯前端微型出入库管理系统(个人使用型)", "desc": "不依赖后端和数据库的库存管理系统简单实现，有点像闹着玩的意思，自己用用还行仓库地址https://github.com/FairyEver/inventory-management注意inventor"}, {"id": "6844903733977956366", "title": "组件库库的基本结构以及构建工具", "desc": "自动配置路由。 jscpd检查重复代码。 1. 实例 2. 安装流程 3. 支持导入markdown以及markdown样式自定义 由于vue-markdown-loader与vue-loader版本15有兼容性的问题，所以利用text-loader将Markdown文档导入并…"}, {"id": "6844903917243858951", "title": "Vue双向数据绑定原理及实现", "desc": "对于Vue.js技术栈，我们的第一想法有可能就是容易上手，对于新手比较友好。确实如此，笔者刚刚入手的时候，觉得比较容易，而且在使用的过程中，也感觉到了它的强大。 最近在准备面试，只知道Vue.js的使用是远远不够的，所以开始剖析Vue.js的源码。下面一步一步讲解其原理以及实现…"}, {"id": "6929009622854418439", "title": "02-vue常用特性", "desc": "1. 获取焦点 beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用。 created 在实例创建完成后被立即调用。 beforeMount 在挂载开始之前被调用。 mounted el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。 befor…"}, {"id": "6870356344214880263", "title": "用vue开发移动H5应用框架-第一章（配置篇）", "desc": "前言本教程带你用vue-cli4开发一个开箱即用的移动端h5开发框架，本章讲的是正式开发前的准备工作。vue-cli4脚手架安装vuecreateproject-name 1.询问安装，按空格键选择自"}, {"id": "6857063523940319246", "title": "快速上手Vue+百度地图", "desc": "额... 这个河流颜色好像有点奇怪，还是换回来吧"}, {"id": "6844904062488412173", "title": "如何玩转sortablejs-vuedraggable实现表单嵌套拖拽功能", "desc": "emptyInsertThreshold:拖动时，鼠标必须与空的可排序对象之间的距离（以像素为单位），以便将拖动元素插入到该可排序对象中。默认为5。设置为0禁用此功能。这个参数要适当的设置，如果是默认值，当列为空的时候，很难把元素拖进去，这个也是一个比较难解决的点，因为需要把右…"}, {"id": "6844904177554964494", "title": "使用 Vuepress 编写组件示例文档的最佳实践", "desc": "这篇文章面向使用 Vuepress 来开发 Vue 组件文档库的用户服务，去年差不多这个时候我为公司开发了一个基于 AntDesignVue 封装的高阶组件库，经过一年的版本迭代与文档更新，收获了很多坑点，其中有一个就是关于组件示例维护相关的，今年有意重构组件库的文档与代码结构…"}, {"id": "6844904160396050440", "title": "Vue之computed和watch", "desc": "computed计算属性类似于过滤器，对绑定到视图的数据进行处理，并监听变化进而执行对应的方法。 计算属性是基于它们的依赖进行缓存的。只在相关依赖发生改变时它们才会重新求值。注意“reversedMessage”不能在组件的props和data中定义，否则会报错。 comput…"}, {"id": "6844903892438761486", "title": "如何实现一个这样的级联组件", "desc": "Vue.js 的核心包括一套“响应式系统”。 \"响应式\"，开发思路跟Jquery的开发思路完全不同。 “响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。例如，视图渲染中使用了数据，数据改变后，视图也会自动更新。 ... ... 因为分类的字数没有限制，做前端其实不…"}, {"id": "6844903701719711757", "title": "基于weex的有赞无线开发框架", "desc": "出于对开发效率和动态化的要求，无线端的开发框架也一直在更新，从 Hybrid、结构化 Native View、React Native、Weex，再到现在正在大受关注的 Flutter。什么样的框架才是适合自己的团队？不仅要有技术追求，而且要考虑实际业务需要。最近，有赞移动选择…"}, {"id": "6844903587542368264", "title": "前端面试问题小汇集", "desc": "要有套路。如何引导面试官问你擅长的领域就看自我介绍了。学历专业简述、项目细说、兴趣特长一句带过。 即使没有实际地阅读过源码，也要找别人分享的博客去了解其中的原理。 Vuex 其实是一个针对 Vue 特化的 Flux，主要是为了配合 Vue 本身的响应式机制。当然吸取了一些 Re…"}, {"id": "7005756283793981477", "title": "vue 双向绑定(v-model 双向绑定、.sync 双向绑定、.sync 传对象)", "desc": "1. v-model实现自定义组件双向绑定 v-model其实是个语法糖，如果没按照相应的规范定义组件，直接写v-model是不会生效的。再说一遍，类似于v-on:click可以简写成@click，v"}, {"id": "6881395120617291783", "title": "适合Vue用户的React教程，你值得拥有", "desc": "小编日常工作中使用的是Vue,对于React只是做过简单的了解，并没有做过深入学习。趁着这个双节假期，小编决定好好学一学React,今天这篇文章就是小编在学习React之后，将React与Vue的用法做的一个对比，通过这个对比，方便使用Vue的小伙伴可以快速将Vue中的写法转换…"}, {"id": "6844904013469581319", "title": "颜值即正义！这几个库颠覆你对数据交互的想象", "desc": "作为一个对UI和动画敏感的切图仔，在日常开发之余，也会关注一些贼好看的图表库和插件。 接下来，我将给大家介绍几款web/python/vue/react里漂亮得不行的开源库/实现。 1. 手绘风图表库：roughViz.js 基于D3(v5), roughjs, 和handy。…"}, {"id": "6968343900742221861", "title": "Vue组件设计 | 实现水波涟漪效果的点击反馈指令", "desc": "不知道小伙伴们有没有注意过这样一个细节，有的应用按钮，链接，可交互的卡片点击起来十分有感觉，而有的却像是点在白纸上了一样，这里作者分享一种增强交互体验的方案，基于Vue3自定义指令的水波点击反馈效果"}, {"id": "7005465227114315813", "title": "Vue微信开发中授权登录的优雅实现", "desc": "现在前后端分离的架构大行其道，如何在前后端分离的情况下实现微信授权登录是本文要探讨的重点问题。该方案经过笔者尝试论证，不论是代码整洁优雅程度，还是业务需求的实现上，都几乎完美"}, {"id": "6921911974611664903", "title": "vue2.x高阶问题，你能答多少", "desc": "作为vue coder，原理性的东西还是要多了解了解，学习业界大佬们的思维。当然了，面试也是跑不掉的了"}, {"id": "6965646653076439048", "title": "Vue3最啰嗦的Reactivity数据响应式原理解析", "desc": "Vue3如火如荼，与其干等，不如花一个下午茶的时间来看下最新的响应式数据是如何实现的吧。在\b本文中，会写到vue3的依赖收集和proxy数据代理，以及副作用(effect)是如何进行工作的。"}, {"id": "6974173265526784037", "title": "花1个小时动手撸一个\"罗盘时钟\"", "desc": "效果来自一款屏保软件：world-clock，觉得挺有意思的，于是深夜决定自己动手撸一个。主要实现如何将多个元素呈圆形排布。"}, {"id": "6974293549135167495", "title": "「Vue源码学习(四)」立志写一篇人人都看的懂的computed，watch原理", "desc": "前言 朋友们大家好，我是林三心，还是那句话：改变不了，那就适应它，源码的理解在当今前端市场越来越重要了，理解源码，可以使我们在开发中更快地捕捉到问题所在，今天讲到computed，watch的原理，个"}, {"id": "6992510603533221901", "title": "2024年的前端怎么干活", "desc": "大家好，我是卡颂。 最近Stackoverflow2021开发者报告发布，其中有一项吸引我的注意： 在所有框架（不仅是前端），Svelte是最受欢迎的。 这里倒不是说Svelte是最多人使用的，另一项"}, {"id": "7006699614820630565", "title": "Vue3答疑解惑", "desc": "本文总结了一些学习vue3时的思考，其中有部分是与vue3源码阅读相关的，有些是关于vue3用法的，有参考尤大的教程，希望对大家有帮助。后续继续深入学习，也会持续更新～"}, {"id": "6977555547570569223", "title": "Vue 大文件上传和断点续传", "desc": "本文是关于 Vue 大文件上传和断点续传的学习笔记，这里做个总结与分享，有不足之处还望斧正~文件上传有 2 套方案"}, {"id": "6894175515515551752", "title": "Vue 3.0 Ref-sugar 提案真的是自寻死路吗？", "desc": "Vue 3.0 的两个提案，最近吸引了许多开发者的注意跟讨论。一个是 script-setup 提案，一个是 ref-sugar 提案。 对于 script-setup 提案，大部分开发者持正面态度。 对于 ref-sugar 提案，却有相当数量的开发者表达否定态度。 在 Gi…"}, {"id": "6977274738091491359", "title": "这个vue3的应用框架你学习了吗？", "desc": "前言：前段时间开始落地基于vue3开发的应用，于是在社区留意vue3周边的一些开源项目。无意间看到微众银行`WeBankFinTech`团队开源的` Fes.js`解决方案。快速上手、简单易用、拓展性"}, {"id": "6924849310118969352", "title": "尤雨溪是个恶魔，Vite 三天 10 更", "desc": "尤老师真是吾辈奋斗楷模，感受下尤大的魔鬼更新速度……Vite（法语单词，“快”的意思）是一种新型的前端构建工具。最初是配合Vue3.0一起使用的，后来适配了各种前端项目，目前提供了Vue、React、"}, {"id": "6920070789614501896", "title": "Vue3 的学习教程汇总、源码解释项目、支持的 UI 组件库、优质实战项目", "desc": "已经推荐了 面试项目、CSS 奇技淫巧项目、代码规范项目、数据结构与算法项目、JavaScript 奇技淫巧项目、前端必备在线工具 等专题的近 100 个优秀项目了。 以下为【前端GitHub】的第 16 期精华内容。 1. Vue3 中文文档 先给大家提供 3 个 Vue3 …"}, {"id": "7003993931327209479", "title": "Vue3.0 常用响应式API的使用和原理分析(一)", "desc": "前面关于响应式的两篇文章，分别介绍了响应式实现原理和计算属性，本篇文章我们来看看其他响应式API的使用和实现原理。 reactive 使用方式 实现原理 请参阅本系列的Vue3.0 响应式实现原理分析"}, {"id": "6844904031983239181", "title": "12道vue高频原理面试题,你能答出几道?", "desc": "1. Vue 响应式原理 Dep : 用于收集当前响应式对象的依赖关系,每个响应式对象包括子对象都拥有一个 Dep 实例（里面 subs 是 Watcher 实例数组）,当数据有变更时,会通过 dep.notify()通知各个 watcher。 watcher 中实例化了 de…"}, {"id": "7001425504108560391", "title": "vue3学习 --- vuex的基本使用(上)", "desc": "在开发中，我们会的应用程序需要处理各种各样的数据，这些数据需要保存在我们应用程序中的某一个位置，对于这些数据的管理我们就称之为是状态管理。vue官方为我们提供了vue中进行状态管理的插件vuex。"}, {"id": "7003896021616951303", "title": "Vue（v2.6.14）源码解毒（预）：手写一个简易版Vue", "desc": "MVVM 设计模式，是由 MVC、MVP 等设计模式进化而来，M - 数据模型（Model），VM - 视图模型（ViewModel），V - 视图层（View）。MVVM 的核心是 ViewMode"}, {"id": "6917622548377108494", "title": "vue3.0 搭建和使用流程", "desc": "最近在重构一个老项目，领导要求使用新的技术栈。好吧，是时候秀一波我新学的vue3.0了。不多bb，开始我的表演。。。(以下只是我自己个人的理解和使用习惯，仅供参考哦）一：项目搭建1.可以自己配置vit"}, {"id": "6993679997240082440", "title": "《图解Vue3.0》- 第11节 组件数据管理", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 一个组件的封装，基本上都会用到数据管理。就像你编写一个函数，有时候需要入参，函数内部拥有变量，然后有一个返回结果。对应到组件里面，有时也会带"}, {"id": "6844904039696564238", "title": "Vue v-model组件封装(类似弹窗组件)", "desc": "现在我们如果想把v-model用到除表单之外的自定义组件中，该怎么使用呢，其实官网所给的例子也比较清晰了，只是如果死脑筋的话，那就限制住了，没错说的就是我-.-."}, {"id": "6993653772685672479", "title": "Docker中MySQL挂载操作", "desc": "1.备忘录案例 2.购物车案例 通过这个两个案例，完成对基础操作的熟悉， 掌握一些基础的语法结构，就是代码"}, {"id": "6844904118679502855", "title": "【译】将多个属性传递给 Vue 组件的几种方式", "desc": "所有使用基于组件的体系结构(如Vue和React)的开发人员都知道，创建可重用组件是很困难的，而且大多数情况下，最终会通过传入大量的属性，以便从外部更容易地控制和自定义组件。这并不坏，但是传递大量属性确实会变得有点麻烦和丑陋。 我们以 vuetify 的按钮组件为例，它是最简单…"}, {"id": "6993618124582961189", "title": "第四讲 检索模型-前端开发-Vue基础版", "desc": "1、回顾 在 Vue 基础的版本中，我们已经开发了首页的搜索功能和新闻推荐功能，接下来就是完善搜索了，原本的搜索功能只包含模糊查询，因此我们还要再添加多两种搜索模式：全文索引和自定义分词查询，其中，自"}, {"id": "6946475755211603999", "title": "深入 vue 组件库的按需引入", "desc": "在测试之前，我觉得我们这样测试项目打包根本没啥用，因为就一个 ly-link 组件不管你全局是不是全局注册效果不明显。"}, {"id": "6991732239503458341", "title": "vue2源码解析(一)｜8月更文挑战", "desc": "Vue是当今最火的前端框架之一，是一套优秀的前端渐进式框架，它的简单易用性的特点也是众多前端工程师选择的原因。"}, {"id": "6977539968658833445", "title": "Vue中 实现国际化", "desc": "这是我参与更文挑战的第 19 天，活动详情查看：更文挑战 1. 前言 前端框架无数，其中几种热门的框架都有相匹配的国际化插件工具，如下： 2. 国际化实现 2.1 安装插件 首先在项目中安装 vue-"}, {"id": "6844903688536850440", "title": "使用 markdown-it 解析 markdown 代码（读 VuePress 三）", "desc": "在此系列文章的第一篇，我们介绍了 Vuepress 如何让 Markdown 支持 Vue 组件的，但没有提到非 Vue 组件的其他部分如何被解析。 今天，我们就来看看 Vuepress 是如何利用 markdown-it 来解析 markdown 代码的。 markdown-…"}, {"id": "6844903573122351112", "title": "Weex BindingX 尝鲜", "desc": "三月初，阿里巴巴开源的一套基于 Weex、React Native 的富交互解决方案 「BindingX」。提供了一种称之为 「Expression Binding」 的机制可以在 Weex、React Native 上让手势等复杂交互操作以60fps的帧率流畅执行，而不会导致…"}, {"id": "6981275159114022943", "title": "Vue接口调用", "desc": "接口调用方式 原生ajax 基于jQuery的ajax fetch axios 异步 JavaScript的执行环境是「单线程」 所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程"}, {"id": "6898343504787800078", "title": "封装自己的Vue组件库", "desc": "VueCLI中提供了一个插件可以进行原型快速开发。 除了可以从零开发自定义组件之外，还可以在第三方组件的基础之上，进行二次开发。 例如结合ElementUI来进行组件库的开发，则需要安装和配置，这里使用vue add element来进行安装，这个命令会自动安装babel及所依…"}, {"id": "6844903702881386504", "title": "深入解析Vue依赖收集原理", "desc": "观察者模式是一种实现一对多关系解耦的行为设计模式。它主要涉及两个角色：观察目标、观察者。如图： ~~Vue是一个实现数据驱动视图的框架~~（废话，大家都知道，说重点） 我们都知道，Vue能够实现当一个数据变更时，视图就进行刷新，而且用到这个数据的其他地方也会同步变更；而且，这个…"}, {"id": "6844903856103489544", "title": "深入剖析Vue源码 - 组件基础", "desc": "熟悉Vue开发流程的都知道，Vue组件在使用之前需要进行注册，而注册的方式有两种，全局注册和局部注册。在进入源码分析之前，我们先回忆一下两者的用法，以便后续掌握两者的差异。 其中组件的全局注册需要在全局实例化Vue前调用,注册之后可以用在任何新创建的Vue实例中调用。 当只需要…"}, {"id": "6989778275526508574", "title": "vue3 可复用&组合", "desc": "混入 基础 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选"}, {"id": "6844904029860921358", "title": "vue 远程加载sfc组件思路", "desc": "在我们的 vue 项目中（特别是后台系统），总会出现一些需要多业务线共同开发同一个项目的场景，如果各业务团队向项目中提供一些公共业务组件，但是这些组件并不能和项目一起打包，因为项目中不能因为某个私有模块的频繁变更而重复构建发布。 在这种场景下我们需要将公共的业务组件部署到服务端…"}, {"id": "6980995009042448415", "title": "vue 模拟分页", "desc": "假分页就是前端一次请求，后端一次性查询返回所有页数，之后前端的请求全从之前拿到的里面分批给前端页面。"}, {"id": "6854573213184163847", "title": "除了composition API，vue3.0文档又带来了什么新东西？", "desc": "在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染…"}, {"id": "6944366020765155335", "title": "【云驻共创】前端可视化框架是怎样炼成的？", "desc": "当然，既然能想到通过 JSON 去配置，那意味着整个组件、页面都能配置，只需给到产品经理一个可视化的界面去配置，即可生成 TA 想要的页面，大大节省了沟通成本、提升了开发效率。这时，可视化框架应运而生。 可视化框架是怎样的？首先我们先了解一下可视化框架的构成和分工。开发作为可视…"}, {"id": "6995095742591270919", "title": "Vue中.sync修饰符的用法", "desc": "应用场景 在实际开发过程中，有可能出现这样的场景： 存在父子组件，假设父组件名为：ParentComponent，子组件名为：ChildComponent 在父组件ParentComponent中定义"}, {"id": "6844903815905280013", "title": "Vue 2.x折腾记 - (16) 基于Ant Design Vue 封装一个配置式的表单搜索组件", "desc": "因为前段时间用过React来写过项目(用了antd)，感觉棒棒的。 其他特性等，具体可以看下面的思维导图. 具体业务的封装中还要复杂的多，还结合了一些自定义封装组件，展示出来代码篇幅太长。 实现出来的代码量贼多，因为每细化多一层组件，复杂度就越高。各种互相回调来实现。 要实现一…"}, {"id": "6995098632777105445", "title": "解决Vue cli 4.0 无法自动导入svg的问题", "desc": "网上大多数的教程都是vue cli旧版的，通过这些教程导入Vue cli 4.0 可能会出问题。使用vue cli 3/4搭建项目使用svg自动导入的方法： 1、安装 svg-sprite-loade"}, {"id": "6989528167274774558", "title": "vue3小结(文章简化总结。。。。)", "desc": "setup 函数取代beforeCreate 、created ，在他两之前执行，该函数相当于一个生命周期函数。vue中过去的data，methods，watch，computed写在setup()函"}, {"id": "6844904012660080647", "title": "基于Vue-Cli3的Vue移动端企业级工程架构", "desc": "基于Vue-Cli3的Vue移动端企业级工程架构演示工程目录基础项目创建创建项目选择默认模式补全Eslint依赖配置Eslint规则支持SASS/SCSS创建全局SCSS移动端自适应工程目录搭建加入路"}, {"id": "6985142019605659656", "title": "通过js实现Vue2.0中数据的双向绑定 ", "desc": "该博客是暑期实训临时内容，使用原生js实现数据的双向绑定，实现Vue中v-model的功能，如果有问题，请评论提醒我，引入的部分会在结尾注明"}, {"id": "6844903701434335246", "title": "webpack4、Koa配置Vue服务器端渲染(SSR)", "desc": "从这段代码我们应该可以明白vue-server-renderer的作用是拿到vue实例并渲染成html结构，但它不仅仅只做着一件事，后面会介绍其他配置参数和配合webpack进行构建。 拿到html结构渲染到页面上是我们接下来要做的事情，这里官方事例用的是express搭建服务…"}, {"id": "6859571758362525704", "title": "使用Vue3构建更好的高阶组件[译]", "desc": "Vue 3 即将发布，通过引入Composition API 。 它具有许多更改和性能改进。 高阶组件（HOC）是使用模板声明性地向您的应用程序添加某些功能的组件。 我相信即使引入了Composition API，它们仍将保持非常重要的关联。 HOC始终无法充分发挥其功能的全部…"}, {"id": "6844904169216671758", "title": "vue3.0创建项目及API讲解（三）", "desc": "用于自定义一个 ref，可以显式地控制依赖追踪和触发响应，接受一个工厂函数，两个参数分别是用于追踪的 track 与用于触发响应的 trigger，并返回一个一个带有 get 和 set 属性的对象。 显式标记一个对象为“永远不会转为响应式代理”，函数返回这个对象本身。 只为某…"}, {"id": "6983495509671411720", "title": "vue组件的生命周期", "desc": "本文详细解读了 vue组件从创建到运行再到销毁的过程 以及vue11个钩子函数在各个阶段执行的时间点 介绍了可以在create最早发起请求 在mounted中最早操作dom 在Upda"}, {"id": "6844903665203953672", "title": "深入理解 TypeScript", "desc": "正如你所见，TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以及可维护性；同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。 TypeScript Deep Dive 是一本很好的开源书，从基…"}, {"id": "6844903648804208654", "title": "你真的了解前端路由吗？", "desc": "hash：可能是大多数人了解的模式，主要是基于锚点的原理实现。简单易用 browser：即使用html5标准中的history api通过监听popstate事件来对dom进行操作。每次路由变化都会引起重定向 memory：这种实现是在内存中维护一个堆栈用于管理访问历史的方式，…"}, {"id": "6865771313391697928", "title": "Vue 路由页签组件推荐：Vue Router Tab", "desc": "Vue Router Tab 是基于 Vue Router 的路由页签组件，用来实现多页签页面的管理。 该项目已经成立一年多了，目前最新版本 1.2.0，已经完成了自己预期的绝大多数功能，api 相对比较稳定了。希望自己的开源成果能帮助到有需要的朋友。 旧的版本，RouterT…"}, {"id": "6844903832556666887", "title": "手摸手教你封装跨项目复用的 Vue 组件", "desc": "在前端项目的开发中，往往会根据业务需求，沉淀出一些项目内的UI组件/功能模块（以下通称组件） 等；这些组件初期只在同一个项目中被维护，并被该项目中的不同页面或模块复用，此时的组件逐步被完善，是一个只聚焦于功能和健壮性的成长期。 随着业务的发展，原来的项目可能不得不产生裂变，变成…"}, {"id": "6904519022742601742", "title": "[element-ui源码]element-ui中的神器Popper（源码浅析）", "desc": "前言建议先看上篇文章以了解Popper的用途：[element-ui源码]element-ui中的神器Popper（使用方法）1.关于popperjsPopper.js是网上一个开源项目(并非属于el"}, {"id": "6912301073839423502", "title": "vjdesign - vue 界面可视化设计器", "desc": "VueJsonDesign新开发的vue可视化设计器已经可以投入生产了Vue界面可视化设计器，基于vjform本设计器特色功能就是可以支持任何vue项目中被引用的组件，不需要二次开发就可以定义支持的组"}, {"id": "6844903968125124616", "title": "vuex + keep-alive实现tab标签页面缓存", "desc": "在开发很多管理系统过程之中，常遇到这种需求，需要对打开路由页面进行缓存，然后在系统页眉提供方便查阅的tab标签进行切换以及对已经缓存页面进行数据刷新和清除数据操作。具体演示如下图所示： 在上面演示中实现了类似window tab标签页效果，会对当前数据进行缓存。在浏览器中实现对…"}, {"id": "6844903602587172872", "title": "重构 - 设计API的扩展机制", "desc": "上篇文章，主要介绍了重构的一些概念和一些简单的实例。这一次，详细的说下项目中的一个重构场景--给API设计扩展机制。目的就是为了方便以后能灵活应对需求的改变。当然了，是否需要设计扩展性这个要看API的需求。如果大家有什么建议，欢迎评论留言。 这个可以说是JS里面最原的一个扩展。…"}, {"id": "6964701480875982861", "title": "vue后台管理系统搭建", "desc": "以vue create 项目名方式创建 如果父路由有默认子路由，就不要给父路由起名字了 --会警告但不报错 子路由的path为空，会作为默认子路由渲染"}, {"id": "6982818184772468766", "title": "Vue打包压缩，利用gzip压缩代码", "desc": "Vue项目优化之 代码压缩 对于过大的项目，使用vue默认的打包，打包出来的代码体质往往不能达到我们想要的效果，这个时候就需要利用插件，再对代码进行压缩 通过 npm install compress"}, {"id": "6975444044730073102", "title": "准备工作 - 学习vue源码系列1", "desc": "学习黄轶老师的vue源码解读 认识 flow的使用、 vue的源码目录设计结构、 vue怎么构建的、 vue的入口在哪"}, {"id": "6844903991520968717", "title": "JSON 数据搭建 Vue 页面", "desc": "此项目是基于公司内部一个开发工具重新整理并开源的。 目前功能还不是特别完善，但是基本的渲染引擎可以正常工作。 内部在上线此工具之前我们的工作方式比较原始，当有新需求过来，就基于统一的项目模板进行开发，已有组件如果满足需求，将代码 Copy 到新页面进行开发。 即使两个页面有 9…"}, {"id": "6844903945307947015", "title": "在 vue 中使用 jsx 与 class component 的各种姿势", "desc": "里面有提到使用 babel-plugin-transform-vue-jsx babel 6 插件来处理 jsx 的编译。 当然可能是官方也知道在一定的场景下 jsx 相对模板是有优势的，于是单独有了这个仓库 对于上面的插件进行了增强。https://github.com/vu…"}, {"id": "6901583767002218504", "title": "Vue源码之响应式对象", "desc": "响应式对象，核⼼就是利⽤ Object.defineProperty 给数据添加了 getter 和setter，⽬的就是为了在我们访问数据以及写数据的时候能⾃动执⾏⼀些逻辑：getter 做的事情是依赖收集，setter 做的事情是派发更新。 Vue会把props,data等…"}, {"id": "6844904041416228871", "title": "canvas - 星级评价，粒子消失特效", "desc": "代码示例是VUE版本无过渡代码：添加粒子消失特效代码参考链接十分钟实现灭霸打响指灰飞烟灭的效果--完--"}, {"id": "6844904006737739784", "title": "Vue2.0源码阅读笔记（九）：内置组件", "desc": "Vue2.0中一共有五个内置组件：动态渲染组件的component、用于过渡动画的transition-group与transition、缓存组件的keep-alive、内容分发插槽的slot。 component组件配合is属性在编译的过程中被替换成具体的组件，而slot组件…"}, {"id": "6959961689785630727", "title": "Vue3 reactive api 解析", "desc": "Vue3, reactive 解析 本人自己对照源码，整理出自己理解的reactive，如有不对的地方，欢迎大家指出。"}, {"id": "6905425226436198413", "title": "换个思路使用Vue组件", "desc": "emmm,有react内味了..."}, {"id": "6871276085342912519", "title": "浅尝Vue3.0，万字总结", "desc": "完事开头难，第一步就是搭建环境，虽然最新版的@vue/cli3已经支持创建vue3.0的项目，不过自己动手丰衣足食，随便回顾一下webpack的相关配置。 就是很常见的配置文件，如果实在看不懂，可以先看看Webpack官方文档。 成功启动后，访问http://localhost…"}, {"id": "6897109326108819464", "title": "Vue3源码解析04--响应式核心effect", "desc": "Vue3 的核心就是响应式系统，而 effect 是响应式系统的核心。所以我们的源码解析从 effect 开始学起 runtime-core 目录：与平台无关的运行时。实现的功能：虚拟 DOM 渲染器，Vue 组建和 Vue 的各种 API，我们可以利用这个 runtime 实…"}, {"id": "6844903856694886414", "title": "Vue项目引入CreateJS的方法（亲测）", "desc": "EaselJS 提供了一套完整的，层次化的显示列表的互动方式 来更简单的处理HTML5画布。 TweenJS 类库主要用来调整和动画HTML5和Javascript属性。提供了简单并且强大的tweening接口。 SoundJS 提供了简单而强大的API来处理音频。通过插件来执…"}, {"id": "6844903809026621454", "title": "[译] 监测与调试 Vue.js 的响应式系统：计算属性树（Computed Tree）", "desc": "在本文中，我们将讨论在 Vue2.x 中如何监测响应式机制，并且将演示一些和性能调优相关的代码段。 如果你的项目比较大，那么你很有可能在用 Vuex。你会将 store 分割为模块，并且为了关联数据的访问一致性你甚至需要将你的状态范式化。 你可能使用 Vuex 的 getter…"}, {"id": "6949365990262046750", "title": "基于Vue Cli4搭建Vue3 TSX移动端项目（一）", "desc": "基于Vue Cli4搭建Vue3 TSX移动端项目（一）本篇主要讲解：项目创建、区分多环境配置、集成eruda移动端调试工具。"}, {"id": "6920016061475586055", "title": "手写Vue服务端渲染", "desc": "Vue SSR 指南是这样介绍的。 通俗点讲，就是在服务端渲染好 html 模版返回给浏览器。 通过 webpack 打包两个入口文件，生成各自的 js 和 html。用 createRenderer 将 server.bundle 返回的 vue 实例转化为字符串，插入到 i…"}, {"id": "6979560326517751815", "title": "Vue 项目优化", "desc": "v-if 和 v-show 区分使用场景 v-if 是 真正 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——"}, {"id": "6907892876169412622", "title": "vue3.0 初体验 && 响应式原理模拟实现", "desc": "成功更新，运行 vue -V， 结果版本还是我原先的版本，怎么办呢？网上找了好多方法，一顿折腾后，还是没有解决问题，时间也不早，关机睡觉。 重新开机后，重新运行vue -V 结果终于显示了预期的了。 因此，我们可以定义一个计算属性allDone,绑定全选框。 通过get来获取所…"}, {"id": "6844903666885869575", "title": "前端项目框架搭建随笔---Tab组件的编写", "desc": "低下头看了看自己的手环。距离自己的flag已经跳票3天了。。。 很简单的功能，很简洁的UI。 为了自由度高一点，我们采用 Tab+TabPanel 的方式制作。这种制作方式也是大部分UI框架的制作方式 以往我们写Tab 头部写头部的东西，内容写内容的东西。两者分开来写。便于理解…"}, {"id": "6896277896806350862", "title": "Vue造轮子系列-Grid组件", "desc": "今天来说一下布局中常用的Grid组件，也叫做栅格系统。基础用法如上面的图片所示。接下来，我就介绍下具体实现过程吧。 这个组件需求还是比较简单的，所以这里直接介绍组件的使用吧。采用了24栅格系统，这样可以轻松应对大部分布局问题。使用栅格系统进行网页布局，可以使页面排版美观、舒适。…"}, {"id": "6904811957002780685", "title": "vue中axios的使用与封装", "desc": "vue中axios的使用与封装分享下我自己的axios封装，多多点赞收藏~axios是个很好用的插件，都是一些params对象，所以很方便做一些统一处理当然首先是npm安装axios很简单$npmin"}, {"id": "6844903913674506248", "title": "Vue 3.0 RFC API 的实现", "desc": "想复用逻辑和状态，关键在于如何创建一个可以被 Vue 观察的对象（响应式对象）。当响应式的对象发生了变化时，Vue 会开始它的更新逻辑，至于它是怎么更新了，这里不作讨论。其次就是，怎么将这个状态绑定到 vm 上，除了使用 computed 来手动绑定之外，还可以用什么方法。 在…"}, {"id": "6990247282612371486", "title": "组件注册 - 学习vue源码系列3.4", "desc": "认识组件的注册过程，并理解全局注册和局部注册的差异。其实在平时的工作中，当我们使用到组件库的时候，往往更通用基础组件都是全局注册的，而编写的特例场景的业务组件都是局部注册的"}, {"id": "6844903645754949646", "title": "模拟 Vue 手写一个 MVVM", "desc": "MVVM 设计模式，是由 MVC（最早来源于后端）、MVP 等设计模式进化而来，M - 数据模型（Model），VM - 视图模型（ViewModel），V - 视图层（View）。 在 MVC 模式中，除了 Model 和 View 层以外，其他所有的逻辑都在 Control…"}, {"id": "6988148874770645022", "title": "关于写vue时候发现的那些坑（二）", "desc": "第二波！vue小总结，选的的三个点都是一些特定场景下的业务细节，封面都是拿当下的截图了，现在已经快12点咯"}, {"id": "6989902245244436511", "title": "7x4 精读Vue官方文档 - API -指令", "desc": "精读 Vue 官方文档系列 🎉 这里列出一些不在基础建教程中提到的指令。 v-text 使用 textContent 来更新元素的内容。 与插值表达式同样的效果，通常不会单独使用指令的方式。 v-ht"}, {"id": "6993194699989188615", "title": "基于Vue中富文本编译器Quill的实现（以及严格模式中的配置文件）", "desc": "（一）富文本编译器 说起富文本编译器，就不得不介绍目前市场上比较主流的几大编译器 （1） UEditor编译器 UEditor编译器具体详细介绍以及使用详见链接：https://github.com/"}, {"id": "6844903934620860424", "title": "antV G6流程图在Vue中的使用", "desc": "更新内容最新版本请关注G6官方的github仓库https://github.com/antvis/g6相关资源下载antVG6(v1.2.8)字体图标技术栈Vuev3.0.1Element-uiv2"}, {"id": "6991825260144721934", "title": "电商中的sku模块在项目中的实际运用（vue3）", "desc": "1.SKU的基本了解 在点击某个商品之后会有与之相对应的产品型号，详细到是：什么颜色，什么尺寸，产地是什么，最后得到的组合就是SKU 下面这张图片： 锅，黑色的，国产的，20cm尺寸就是它的SKU 而"}, {"id": "6844903856392896519", "title": "详解vue组件三大核心概念", "desc": "本文主要介绍属性、事件和插槽这三个vue基础概念、使用方法及其容易被忽略的一些重要细节。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。 prop 定义了这个组件有哪些可配置的属性，组件的核心功能也都是它来确定的。写通用组件时，prop…"}, {"id": "6844903661588447239", "title": "Cordova+Vue快速搭建Hybrid App", "desc": "最近项目迭代需要开发一个app，由于项目组其他系统前端技术栈都是Vue，所以自己在需求评估的时候就初步敲定了Cordova+Vue的前端架构，后来查阅了不少资料，也掉了不少坑，这里总结一下，也算是对自己这段时间摸索的回顾吧。 看到浏览器如下页面，可以说明项目搭建成功了。 下面是…"}, {"id": "6844903735005560840", "title": "前端错误收集（Vue.js、微信小程序）", "desc": "随着公司业务的发展，前端项目也越来越多。有的时候客户反馈的一个问题，需要耗费大量的时间去查。错误信息不能第一时间获取，多少会给公司带来损失。这个时候我们就需要一套错误收集机制，去提前发现代码中存在的问题，在客户反馈之前把问题提前处理掉。或者在收到客户反馈的时候可以查到对应的错误…"}, {"id": "6844904135490289671", "title": "VUE组件通信传值详细总结（`悄悄话’我知道）", "desc": "和Daughter来说为父组件。 GrandSonBySon和GrandDaughterBySon为父组件。 GrandSonByDau为父组件。 父组件通过子组件暴露的prop的sonValue、dauValue向子组件传值。 子组件通过内部定义的props接收到父组件的值,…"}, {"id": "6989980248783716360", "title": "【前端小项目】基于Vue全家桶的在线音乐播放器（提供在线演示）", "desc": "一款基于Vue全家桶开发的在线音乐播放器，部分UI参考网易云音乐，提供在线演示。本项目仅供参考学习。"}, {"id": "6844903876458446856", "title": "Vue经典面试题: Vue.use和Vue.prototype.$xx有血缘关系吗?", "desc": "没关系, 面试的时候总会问如何在Vue的实例上挂载一个方法/属性, 也就是Vue.prototype的小技巧, 但是突然有人问他俩有啥关系还真是新鲜. 我想应该是网上有文章写Vue.prototype.$xx是用法的, 但是没有说明Vue.use的用法以及Vue.prototy…"}, {"id": "6993119987938361352", "title": "vue-ssr服务端渲染透析", "desc": "背景 spa单页面seo不友好，因为vue的话是只有一个HTML页面，实现页面的切换是通过监听router进行路由分发，结合ajax加载数"}, {"id": "6989134054218006564", "title": "Vue3系列(三)之CDN引入依赖包优化打包速率", "desc": "@TOC 注意!!!注意!!!注意!!! 本文是基于Webpack和VueCli 4 打包 一.概述 使用CDN的好处 缓解服务器的压力,将首屏加载时的请求分摊给其它的服务器 优化打包后verdor."}, {"id": "6994402489088868382", "title": "[Element Plus 源码解析] Checkbox 多选框", "desc": "一、组件介绍 官网链接：Checkbox 组件 | Element (gitee.io) Checkbox组件是日常最为常用的组件之一，用于用户勾选选项。 1.1 属性 1.1.1 值绑定相关 mod"}, {"id": "6984287737645891620", "title": "vue 实现鼠标移入移出表格，显示影藏图标, 并弹出提示内容", "desc": "效果： table代码： 重点： @cell-mouse-enter鼠标移入 @cell-mouse-leave=\"mouseLeave\"鼠标移出 初始化表格数据，定义showIcon字段为false"}, {"id": "6844903812130422792", "title": "vue作用域插槽，你真的懂了吗？", "desc": "在网上搜了很多关于作用域插槽的解释，感觉没有写得很具体的吧，我认为应该对组件化有很深的理解才会触及到这个问题吧，这里也分享下我自己对于slot-scope的一点理解。 slot大家看看文档都懂了，无非就是在子组件中挖个坑，坑里面放什么东西由父组件决定。 具名插槽也很简单，比如有…"}, {"id": "6989961980144697375", "title": "Vue数据响应式原理，我来了 ", "desc": "学习笔记：响应式原理 Vue2.x 中使用的是Object.defineProperty()方法中的 get 和 set 这两个方法对数据进行劫持，Vue3.x 中使用的是Proxy()来实现"}, {"id": "6969744283951693838", "title": "实战项目：up2u记账本总结", "desc": "问题一：webstorm提交代码出错 提示vue-cli-service lint found some errors 我的解决方法是在报错文件添加/* eslint-disable */ 使用后成功"}, {"id": "6844904045421805576", "title": "Vue 测试速成班", "desc": "在你快要完成一个项目时，突然工程里的很多地方都出现了 bug，你修完一个又冒出新的一个，就像在玩打地鼠游戏一样……几轮下来，你会感到一团糟。此时有一个可以让你的项目再次发光的解救方案，那就是为将要开发的和已经存在的特性编写测试。编写测试可以保证功能特性没有 bug。 在本教程中…"}, {"id": "6844904202863378446", "title": "vue + el-upload 实现腾讯云视频上传功能", "desc": "根据需求要实现一个视频上传功能，之前采用七牛云上传，小点视频没问题，大体积视频比如600M左右，再考虑到网速等其他原因就会花费半个小时左右。 后来分析到不仅要考虑上传时间的问题，更重要的是要考虑用户使用4G 网络的情况，考虑用户的流量，线上的视频，不能不做压缩转码，就放到页面上…"}, {"id": "6867125503007375373", "title": "vue3项目--让我们更快开发vue（二）", "desc": "首先作为一个函数，vue获取数据或方法都需要写到return里面。 所watch对象必须是：A watch source can only be a getter/effect function, a ref, a reactive object, or an array of…"}, {"id": "6938576182099050526", "title": "移动端常见的一些问题", "desc": "IOS:IOS的键盘处在窗口的最上层，当键盘弹起时，webview的高度height并没有改变，只是 scrollTop发生变化，页面可以滚动。且页面可以滚动的最大限度为弹出的键盘的高度，而只有键盘弹出时页面恰好也滚动到最底部时，scrollTop的变化值为键盘的高度，其他情况…"}, {"id": "6976242367393333284", "title": "Vuex源码浅析", "desc": "Vuex是专门为Vue程序开发的状态管理模块，阅读源码，体会Vuex的精妙。提取中心代码，自己实现一个Vuex；"}, {"id": "6847009773846544392", "title": "从0开始，手把手教你用Vue开发一个答题App", "desc": "本教程适合对Vue基础知识有一点了解，但不懂得综合运用，还未曾使用Vue从头开发过一个小型App的读者。本教程不对所有的Vue知识点进行讲解，而是手把手一步步从0到1，做出一个完整的小项目。目前网上的教程不是只有零散的知识点讲解；就是抛出一个开源的大项目，初级读者下载下来后，运…"}, {"id": "6844903557859115021", "title": "Vue中render函数的使用", "desc": "vue通过 template 来创建你的 HTML。但是，在特殊情况下，这种写死的模式无法满足需求，必须需要js的编程能力。此时，需要用render来创建HTML。 在一次封装一套通用按钮组件的工作中，按钮有四个样式(default success error )。首先，你可能…"}, {"id": "6844903650607759367", "title": "Vue源码剖析——render、patch、updata、vnode", "desc": "如有错误，希望各位留言指点，乐意之极。 在Vue源码里，尤大采用了Flow作为静态类型检查，Flow是facebook出品的静态类型检查工具。 众所周知，JavaScript是弱类型的语言。 所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型，如果一个语…"}, {"id": "6930792048874225672", "title": "前端初学者的第一个Vue后台管理项目总结2：登录与权限控制", "desc": "这是vue后台项目总结的第二篇，讲解登录和权限控制的部分。 本项目中登录和权限控制功能的实现，主要参考了vue-elemen-admin，这部分是比较核心的功能，涉及到的模块比较多，笔者在研究vue-elemen-admin的源码时花费了很多时间，也踩了很多坑，所以这篇文章也可…"}, {"id": "6992385736695611400", "title": "vue中利用Moment.js写活动倒计时", "desc": "1.安装moment.js 2.在页面上引入;3.从后台获取得到开始时间和结束时间，判断是否在活动范围内；4.写入页面"}, {"id": "6993634893292896287", "title": "vue源码图解02-异步更新策略", "desc": "vue源码图解02-异步更新策略,涉及到的知识有：Event Loop、同步、异步、任务队列、宏任务、微任务等。"}, {"id": "6993705303887855629", "title": "回首Vue3之指令篇（七）", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 这篇文章我们来讲一下v-model的使用方法，以及在使用它的时候我们需要注意的地方。 官方说，你可以用 v-model 指令在表单 <inp"}, {"id": "6962699982293958692", "title": "从源码解释为什么v-for要加key", "desc": "深入源码一步一步分析为什么v-for不加key的奇怪现象。重点研究src/core/vdom/patch.js文件里的patchVnode，updateChildren，vnode的递归比较和更新。"}, {"id": "6844903635520847885", "title": "老板让我十分钟上手nx-admin", "desc": "首先找到路由配置,路由配置放在了src/router/index.js路由配置里暴露了两个常量 一个是 constantRouterMap 另外一个是 asyncRouterMap 这里先说说constantRouterMap。 nx-admin的权限验证大概是 点击登录以后 …"}, {"id": "6844904054720561165", "title": "大型前端项目结构设计", "desc": "这个结构也是我们项目目前正在使用的，应对两三百个页面的web项目是没有任何问题的，在扩展性，多人合作方面是非常优秀的。废话不多说，先上结构，再说为什么要这么做。 首先，这个结构是基于Vue来设计的，设计思路来源于小程序分包加载机制。示例的结构主要为src 目录下。 虽然给出的结…"}, {"id": "6844903512149606407", "title": "Miox带你走进动态路由的世界", "desc": "最近，我们团队开源了一套沉淀了2年的前端SPA架构框架，主要是用来解决动态路由的问题。我们的思路来源于后端，采用中间件的设计模式来架构整个框架。我们的原则是让大家快速开发一个SPA单页应用，只关心业务逻辑，其他的行为都可以帮助处理掉。 其实我们的开源比较匆忙，从很多方面看还是有…"}, {"id": "6903443476382875661", "title": "【element3-小哈喽参与日记】被摸手后，自己重写Link组件", "desc": "在参加完开课吧的web全栈课程途中，得知了开课吧团队（现花果山团队:hug-sun）fork了一份element-ui，帮助开发者学习vue3、组件化后，我就偷摸混进了他们的内部群里。 具体流程可以参考@春去春又来的手摸手教程 PS:就是他摸的我。 我这个小菜鸟，当然是找简单的…"}, {"id": "6979956140700499998", "title": "Vue：动画原理", "desc": "概述 Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。包括以下工具： 在 CSS 过渡和动画中自动应用 class 可以配合使用第三方 CSS 动画库，如 Animate.c"}, {"id": "6909252620741787656", "title": "vue项目，npm install方式使用pdfjs", "desc": "npm上关于PDF.js的包有两个，pdf.js和pdfjs-dist; 本文用到的是pdfjs-dist ;PDF.js提供了一个预览页面viewer.html来实现pdf的在线预览功能；故可将pdf.js作为静态资源下载到项目中 ，只需更改为pdf文件存放服务器的地址即可在…"}, {"id": "6995473289250340872", "title": "vue 3.x 环境搭建及项目创建", "desc": "一、环境搭建 1、安装node.js 下载地址：https://nodejs.org/ 安装就下一步下一步就可以了（node8.9或以上版本） 安装成功结束如何检查是否安装成功和版本 打开cmd 输入"}, {"id": "6906377284094001159", "title": "工作问题之二：子组件表单验证在父组件中执行", "desc": "背景子组件是一个表单结构，在负组件中，子组件是循环生成的，且没有按钮去写点击事件，每一次的数据传递发生在输入框或者下拉列表的change事件，在父组件做最终提交的时候，要对子组件进行表单验证页面结构我"}, {"id": "6909014133275000845", "title": "vue 自定义事件、自定义指令", "desc": "一个vue 工程，通常都会有对应的全局方法，通过全局引入的方式，更省事。 引用官方：在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。 用的最多的clipboard.js 库，也是基于上…"}, {"id": "6844903637974515720", "title": "JavaScript数据结构与算法（链表）", "desc": "去年4，5月份得时候看过Vue得源码。没记错的话其中的Cache类应该就是用链表实现的. 虽然用得不多但是作为数据结构的的重要组成部分，掌握它也是非常有必要的,下面主要以单链表进行说明."}, {"id": "6918193121083785224", "title": "14. vue的插槽 🤞", "desc": "举一个生活中的例子：比如装修房子的时候我们会在很多地方预留出一些插孔，可能要插电冰箱，插电式，插充电器等，反正就是你觉得预留在这个位置的插座一定有用，这个预留的插座就类似我们今天要说的插槽，插槽就是你在模板中提前通过一个占位符(slot)来预言一块固定的区域将来会被某些元素替换…"}, {"id": "6985469996181372936", "title": "用Vue3.0开发音乐Web app(视频源码齐)去网盘学习啦", "desc": "用Vue3.0开发音乐Web app Vue3.0高阶实战：开发高质量音乐Web app vx（cmL46679910） 第5章的学习内容如下：（视频资源vx（ cmL46679910 **））**播"}, {"id": "6845166890780721160", "title": "Vue 组件 、v-modal、Vue 常见实例方法", "desc": "Vue.extend 属于 Vue 的全局 API，在实际业务开发中我们很少使用，因为相比常用的 Vue.component 写法使用 extend 步骤要更加繁琐一些。但是在一些独立组件开发场景中，Vue.extend + $mount 这对组合是我们需要去关注的。 （2）要…"}, {"id": "6844904193510080525", "title": "vue-lazyload源码解析", "desc": "如果一个网页有成千上万张图片需要加载，页面滚动就会变得非常卡顿。此时很多人都会想到懒加载的概念，即只加载可视区域的图片，其他的图片暂时有一个占位图，等它们滚动到可视区域时再去请求真实图片并替换。这里，我们需要一个检查图片dom元素是否在浏览器可视区域内的方法checkInVie…"}, {"id": "6922045761580433421", "title": "一步步使用SpringBoot结合Vue实现登录和用户管理功能——下", "desc": "上面我们已经写了一个简单的登录功能，通过这个功能，基本可以对SpringBoot+Vue前后端分离开发有有一个初步了解，在实际工作中，一般的工作都是基于基本框架已经成型的项目，登录、鉴权、动态路由、请求封装这些基础功能可能都已经成型。所以后端的日常工作就是写接口、写业务 ，前端…"}, {"id": "6953802650424967182", "title": "页面加载慢的优化方法GZIP | 创作者训练营第二期", "desc": "- 相信猿友们在开发中经常被吐槽页面加载慢的现象，也是很普遍的现象。 - 接下来将介绍一种解决方法很实用，建议都用起来，遇到问题可在评论区留言。"}, {"id": "6948632398598766605", "title": "从0学习 vue3 reactivity源码笔记", "desc": "这是一篇我自己学习 vue3 源码的笔记，记录了 vue3 reactivity 实现过程及原理。并没有认真排大纲内容。 写这个有两个原因：1. 为了学习vue3；2. 为了培养自己在学习的过程中养成做笔记的好习惯。 1. 基本构建 在package文件夹下创建reactivi…"}, {"id": "6844904066401697799", "title": "从零构建一个Vue UI组件库（一）——项目初始化", "desc": "之所以写这一系列文章，是为了记录自己构建一个组件库的历程，同时也给那些自己想写组件库的同学一个教程。组件库也写了一段时间了，基本的架子也搭建得差不多了，但是回想自己搭建的过程还是不够完善，所以回来整理一遍自己的思路，让自己的技术有个输出。 开始写组件库之前，你需要有一个好的原型…"}, {"id": "6966851270225166373", "title": "vue2响应式原理", "desc": "vue官方阐述：https://cn.vuejs.org/v2/guide/reactivity.html 响应式数据的最终目标，是当对象本身或对象属性发生变化时，将会运行一些函数，最常见的就是ren"}, {"id": "6883359747286761479", "title": "Proxy与Object.defineProperty", "desc": "Proxy与Object.defineProperty的对比Proxy可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤"}, {"id": "6961576293016010759", "title": "Vue2源码剖析之Vue-Router原理", "desc": "hash模式的路由是以#出现，例如localhost:8080/#/home。hash模式的渲染原理首先是配置路由数组list，例如[{path: '/home',name:'home',compon"}, {"id": "6910880889773752327", "title": "列表浏览埋点上报解决方案实现", "desc": "所谓“埋点”就是一种数据采集的方式，是数据采集领域的术语，指的是针对特定用户行为或时间进行捕获、处理和发送相关技术及其实施过程。目前常见的前端埋点方法主要分为三种：代码埋点、可视化埋点和无痕埋点，而本次想要分分享的列表浏览埋点上报解决方案则为代码埋点的一个应用场景。 最近在项目…"}, {"id": "6881809345256898573", "title": "vue过渡与动画", "desc": "为了解决这个尴尬的问题，vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。 自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。 如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调…"}, {"id": "6887197810421137421", "title": "Vue源码解析：模板编译Parse(一)", "desc": "源码分析通常都是从入口开始慢慢分析，这次将直接开始分析核心，然后由内而外找到代码源头。更加符合分析时候的思路。解析的核心就是parseHTML函数：利用while循环和正则表达式对template的字"}, {"id": "6921944541205364743", "title": "Vue学习笔记：methods、computed、watch的区别", "desc": "首先要说，methods,watch和computed都是以函数为基础的，但各自却都不同而从作用机制和性质上看,methods和watch/computed不太一样，所以我接下来的介绍主要有两个对比："}, {"id": "6844903961238241288", "title": "来聊聊 Vue Loader", "desc": "在开发过程中使用热重载来保持状态。 简而言之，webpack 和 Vue Loader 的结合为你提供了一个现代、灵活且极其强大的前端工作流，来帮助撰写 Vue.js 应用。 如果你不想手动设置 webpack，我们推荐使用 Vue CLI 直接创建一个项目的脚手架。通过 Vu…"}, {"id": "6966803027449610253", "title": "VUE3.0新特性及与2.X的区别", "desc": "vue3.0完全兼容vue2.x版本 VUE3.0六大亮点： 1、性能比2.x快1.2~2倍 2、按需编译，体积比2.x更小 3、新出组合API（类似React Hooks） 4、更好支持TypeSc"}, {"id": "6919067373093781511", "title": "element el-table表格的vue组件二次封装（附表格高度自适应）", "desc": "在公司实习使用vue+element-ui框架进行前端开发，使用表格el-table较为多，有些业务逻辑比较相似，有些地方使用的重复性高，如果多个页面使用相同的功能，就要多次重复写逻辑上差不多的代码，所以打算对表格这个组件进行封装，将相同的代码和逻辑封装在一起，把不同的业务逻辑…"}, {"id": "6876429298505351181", "title": "Vue3 文档阅读 —— 深入响应式原理", "desc": "Vue 3.0 终于发布了，具体更新内容详见 v3.0.0。官网地址 Vue，但内容还都是英文的，毕竟刚发布嘛，中文内容还没那么快。 索性不如自己阅读仓库文档，看看 Vue3 都给我们带来了哪些具体变化。 现在是时候深入一下了！Vue 最独特的特性之一，是其非侵入性的响应式系统…"}, {"id": "6912339035750924295", "title": "vue项目中使用ztree实现增删改查", "desc": "ztree官网下载ztree插件，并将对应的 js 和 css 文件放到vue项目中。 在vue项目的 vue.config.js中进行配置。 完成以上几步就可以使用ztree了。 使用阿里图标自定义增、删、改按钮。 点击节点的文字查看对应节点的信息，并在右侧显示对应的节点信息…"}, {"id": "6945249882634453000", "title": "实战小技巧： 基于Vue的混入-实现面板打开与关闭", "desc": "Vue.js在国内流行得不要不要的，我们今天也来凑凑热闹，给大家介绍一个实战小技巧。我们现给出实战核心代码，希望能够帮助到大家。 详细代码和设计思路，如果大家感兴趣，请关注B站老九学堂的直播间。 著作权归作者所有。"}, {"id": "6844904051851673608", "title": "修改vue源码实现动态路由缓存", "desc": "官网解读：我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个…"}, {"id": "6954710716301459469", "title": "Vue源码解析(3)-diff算法优化策略", "desc": "一.实现流程 二.diff算法节点比较准则 三.diff算法的优化策略 四指针： oldStartIdx(旧前指针) newStartIdx(新前指针) oldEndIdx(旧后指针) newEndI"}, {"id": "6976542481991073806", "title": "Element Loading", "desc": "Vue2.x 官方文档 1 loading 1.1 需求说明 实现加载数据时动效显示 1.2 两种类型 根据父亲节可将加载分两种,全局加载和局部加载。全局加载以document.body为父节点,局部"}, {"id": "6969510937946652680", "title": "vuex的基础用法", "desc": "为了更方便的管理vue中的数据，需要了解并掌握官方提供的vuex vuex是什么：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 vuex的使用步骤： 在Vue项目中引入Vuex，并配"}, {"id": "6866324830212325383", "title": "vue之权限控制和动态路由", "desc": "登录：当用户填写完账号和密码后向服务端验证是否正确，验证通过之后，服务端会返回一个token，拿到token之后（我会将这个token存贮到localStore中，保证刷新页面后能记住用户登录状态），前端会根据token再去拉取一个 user_info 的接口来获取用户的详细信…"}, {"id": "6844903581305274375", "title": "Vant 1.0 正式发布：轻量、可靠的移动端 Vue 组件库", "desc": "距离 Vant 首次发布刚好过去了半年时间，在这半年时间里 Vant 团队广泛吸纳社区的反馈和建议，持续对组件进行打磨、优化，使得 Vant 逐渐成长为一个轻量、可靠的移动端 Vue 组件库。 在这个时间点上我们决定发布 Vant 的 1.0 正式版，希望未来有更多小伙伴能够参…"}, {"id": "6844903712016564231", "title": "axios 二次封装 api的统筹管理 配合async await实际项目中的运用", "desc": "axios在实战项目中的运用，所举例项目是基于vue全家桶（vue-router+vuex+axios+element-ui）的后台管理系统，需要一些有vue项目开发经验的读者阅读。 由于vue-resource 作者宣布不再更新，促使我们使用第三方的request数据请求，一…"}, {"id": "6844903573386428429", "title": "使用 vue-virtual-collection 优化滚动性能", "desc": "这段时间写了一个 Vue 的滚动组件：starkwang/vue-virtual-collection，现在正式宣传一下~ 类似的 vue 列表滚动组件已经有好几个了，但一直没有针对瀑布流的 vue 滚动组件，也就是类似这样的滚动组件： https://www.zhihu.c…"}, {"id": "6960488944450404360", "title": "Vue0.1版本源码的解读（2）", "desc": "之前看了大佬的Vue源码的0.1版本的解读，前文分析 这里回来继续进行分析，今天主要分析的是Compile、事件怎么进行处理，怎么进行更新？ 1. Compile，上文提到了解析页面上一些数据和指令，"}, {"id": "6856271398794362887", "title": "Element组件源码研究-InputNumber 计数器", "desc": "本文的研究思路是通过阅读Element源码，然后自动动手一步一步编写组件，完善其对应功能。 这篇我们继续研究InputNumber。 基本的准备工作过后，开始基本实现。 这次可以复用Input组件，两边加新增/减少两个按钮，实现加减逻辑。再控制最大值最小值的时候，禁用按钮，基本…"}, {"id": "6921514756654252045", "title": "这款跨平台开发框架厉害了，叫泰罗·奥特曼", "desc": "今天给大家推荐一款框架叫泰罗·奥特曼(Taro), Taro是一款开放式跨端跨框架，支持使用 React/Vue/Nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/ QQ 小程序/H5 等应用。 现如今市面上端的形态多种多样，Web、React Native、微信小程序…"}, {"id": "6844904186249740301", "title": "vuex+ keep-alive搭建一套可缓存tab页的web框架", "desc": "Vue 提供的 keep-alive API实现对路由组件的缓存。 include 属性可以绑定一个数组，里面是需要路由组件的 name 值，可以实现对该路由组件进行缓存，如果不需要对路由进行缓存，直接移除该项元素即可。 实现上面的功能，采用 vuex 进行全局的缓存数据保存，…"}, {"id": "6986584349848109086", "title": "浅析NextTick源码（一）", "desc": "从源码角度分析解读NextTick的实现；基于Event Loop对降级处理进行解释；原文注释+中文个人理解方便读者理解源码内容。"}, {"id": "6972932492206538782", "title": "自学Vue seven day！！！", "desc": "弹框案例： 要求： 完成之后的代码： 1、兄弟组件传参 ​ 使用中央事件总线 用法总结： ​ 1、建立一个空的Vue对象； ​ 2、在被修改的的组件中，定义mounted函数，在函数中通过bus发起自"}, {"id": "6992464709136400421", "title": "Vue3.0源码讲解  (一)", "desc": "一、组件的安装过程 vue3.0入口函数： 入口函数查看runtime-dom/index.ts文件的createApp方法的源码如下： 返回一个app的对象，app来自于ensureRenderer"}, {"id": "6896649251221143566", "title": "Vue的生命周期详解", "desc": "1.简述：在Vue中，每个组件从加载到渲染都会经过一个生命周期：创建，初始化，挂载，更新，销毁。其中钩子函数分为八部分beforeCreate created beforeMount mounted beforeUpdate updated beforeDistory dist…"}, {"id": "6844903991629873159", "title": "vue组件间的通讯方式总结", "desc": "组件式开发作为 Vue 框架的核心思想，在实际的项目开发中，开发者主要都是通过组件的形式进行开发。Vue 的每个组件实例都拥有独立函数作用域，实现组件与组件之间的数据通讯、共享状态，掌握各种组件的通讯方式，才能帮助我们在开发的过程中更加高效。下面将悉数展示所有 Vue 组件之间…"}, {"id": "6844903871215730696", "title": "【vue源码解析】render到底做了什么？", "desc": "render函数可以作为一道分割线，render函数的左边可以称之为编译期，将Vue的模板转换为渲染函数。render函数的右边是Vue的运行时，主要是基于渲染函数生成Virtual DOM树，Diff和Patch。 render渲染函数将结合数据生成Virtual DOM的。…"}, {"id": "6963910260125859853", "title": "extends 和 mixins的实现方式", "desc": "extends的使用方式 允许扩展另一个组件，可以是一个简单的对象或是构造函数，而无需使用extend，其主要是为了便于扩展单文件组件，这和 mixins 类似。 主要功能适合组件相同的，只不过是用在"}, {"id": "6979090771056001038", "title": "VUE起步day02", "desc": "VUE起步 day02(1) Vue的MVVM 概念 M-模型层，负责业务数据； V-视图层，vue的v-bind/v-on/v-model"}, {"id": "6844904051553861640", "title": "自建vue组件 air-ui (5) -- 创建第一个组件 Button", "desc": "通过 自建vue组件 air-ui (4) -- air-ui 环境搭建和目录结构 我们已经搭好了 air-ui 项目，接下来就是开始写组件了。 但是标签方式的组件是最常见的。 所以本节就以标签方式的 button 组件来说明。 另外两种方式后面有时间再讲。 这边多个单词要用中…"}, {"id": "6901949121671659533", "title": "Vue源码解析系列(二) -- 响应式系统内部是怎么运行的", "desc": "上一章Vue源码解析系列(一) -- 初始化类new 中，我们讲到了Vue初始化做的一些操作，那么我们这一章来讲一个Vue核心概念响应式系统。 value是需要被观察的数据对象，在构造函数中，会给value增加ob属性，作为数据已经被Observer观察的标志。如果value是…"}, {"id": "6844903621818056711", "title": "分享一个 iView 调试案例", "desc": "分析调用的上下文代码后，发现在将 AutoComplete 组件的值设置为 null 时，会触发这个异常，我简化了调用的上下文代码，做了一个 Demo，代码如下所示。我在 codepen 上放了实例，建议点进去看看，直观感受下， 记住：请打开控制台看报错信息。 从异常信息看，问…"}, {"id": "6921002064977854478", "title": "vue 结合 vant-ui的 `van-sticky` 组件实现联系人列表", "desc": "虽然效果看着不太像，但是我真的参考了......"}, {"id": "6985069078855548965", "title": "Vue.extend初探", "desc": "无意间看到了有的项目里面用到了vue.extend这个api，然后看了一下文档，实在想不出使用场景，然后经过一番百度，接着看了一波element ui的源码，知道了vue.extend能这么用，接下来"}, {"id": "6979216946923307045", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】014-探索组件的理念：父子组件如何通过事件进行通信", "desc": "5、父子组件如何通过事件进行通信 子组件调用的方法让父组件处理 运行结果 子组件调用父组件的方法并传参数 运行结果 在子组件中计算出来后上传给父组件参数 运行结果 校验子组件对外触发的事件 运行结果 "}, {"id": "6959205139412418574", "title": "Vue2.x 与 React 的异同", "desc": "一、相似之处 都将注意力集中保持在核心库，而将其他功能如路由、全局状态管理交给相关的库。 都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模版。 都使用了 Virtual DOM（虚拟DOM）"}, {"id": "6922325770903748616", "title": "Vue2 源码系列之虚拟DOM", "desc": "虚拟dom即Virtual DOM 本质上是一个js对象，用来描述真实的dom节点，vue中实现了一个vnode类，用来表示虚拟节点。 这里我移除了一些源码对参数类型的校验。 因为DOM操作的执行速度远不如JavaScript的运算速度快，所以将大量的DOM操作转变为JavaS…"}, {"id": "6844903918619590669", "title": "从一个日常bug看Vue的列表key及vnode更新策略", "desc": "之前在做h5活动的时候，遇到了一个关于vue中列表渲染的bug。当然，bug是我自己写的，和vue没有半毛钱关系。不过在解决bug的过程中，对vue的patch diff的过程进行了一番研究。 在探究过程中，涉及到了vue列表渲染的key的研究，以及vue渲染函数及生命周期的执…"}, {"id": "6844903689975496711", "title": "用typescript撸个前端框架InDiv", "desc": "有个同事跟我说：需求还是不够多，都有时间造轮子了。。。 这个轮子从18年4月22造到18年10月12日，本来就是看了一个文章讲前端框架的路由实现原理之后，想试着撸一个路由试试，结果越写越多，到最后就莫名其妙变成了个mvvm框架了。顺便写了个比较渣的文档和服务端渲染。。。 名字其…"}, {"id": "6934935935603703821", "title": "[Vue源码系列-3]vue3依赖收集实现原理", "desc": "1. vue3的依赖收集 2. effect副作用函数 3. track依赖收集 4. trigger 触发更新"}, {"id": "6844903978459725831", "title": "Vue基础知识汇总(含webpack打包工具的使用)", "desc": "5.对于自增和自减运算会出现异常,所以这里暂时不推荐在插值表达中使用自增自减元素。 可以把页面上数据的变化，自动同步更新到 VM 实例的 data 中。例如： v-model =\"msg\",:v-bind:src=\"mySrc\",他们里面的属性值都需要在data中设置,哪怕没有…"}, {"id": "6916845655944560647", "title": "Vue之组件自定义v-model & 插槽的相关使用", "desc": "最近有点忙，也一直在思考该写点什么。加上最近天气有点冷，始终伸不出手，所以一直耽误到现在。想想还是继续之前的文章来重新学习一些关于vue的一些东西。 通常v-model指令用在一些表单控件上供我们做双向数据绑定。实际上这个指令是表单控件的value和input（这里只列举inp…"}, {"id": "6844903812323524616", "title": "剑走偏锋之Vue 组件通信（一）—通过$parent和$children构建自己的通讯方式", "desc": "在我平常的开发中，很多问题都是见招拆招，遇到了便去解决。长此以往，出现了一个大问题，就是会反复的碰到这个问题，而反复去解决，因为上次解决的方式不一定能记到。就像你看你几个月前的代码，都觉得：卧槽，谁的代码，这么烂。所以，最好的方式就是总结，不断总结。 这张图片就是Vue 官方a…"}, {"id": "6945369301113110542", "title": "手把手学习Vue3.0：使用v-model和v-bind的区别", "desc": "由于我是做后端出身，有写前端基础知识不太记得了，看到不熟悉的就会有一些疑问。我想初学的你肯定会跟我有一样的疑问，那么跟着我的手把手学习Vue3.0的系列学下来，肯定会帮助到你，因为我就是站在你的角度来解决我遇到的各种问题。我的学习习惯是先看官方文档，下图不但指出了定义，还给出了一..."}, {"id": "6844903714185019399", "title": "Vue一个案例引发的递归组件的使用", "desc": "今天我们继续使用 Vue 的撸我们的实战项目，只有在实战中我们才会领悟更多，光纸上谈兵然并卵，继上篇我们的《Vue一个案例引发的动态组件与全局事件绑定总结》 之后，今天来聊一聊我们如何在项目中使用递归组件。 看到这个很多人会想到这个实现起来很简单啊，来个嵌套循环不就完事了。 对…"}, {"id": "6982400138450829343", "title": "1x3 精读Vue官方文档 -  插槽", "desc": "精读 Vue 官方文档系列 🎉 插槽 Slot 其设计灵感源自 Web Components 规范草案，将 <slot> 元素作为承载分发内容的出口。 关于内容分发，我们可以类比于 $attrs 实例"}, {"id": "6989406275771564039", "title": "vue2.0中.sync与v-model", "desc": "在用Vue开发前端时，不论使用原生还是封装好的UI库，对于表单组件，一般都会使用到v-model。虽然v-model是一个语法糖，但是吃到嘴里挺甜的啊。学会自定义v-model，还是很有必要的。 一个组件上的v-model默认是通过在组件上面定义一个名为value的props,…"}, {"id": "6844903661588447245", "title": "前端架构之vue+axios 前端实现登录拦截（路由拦截、http拦截）", "desc": "之前写了一个node的jwt认证，为了能和node对应，跑通整个流程，前端将设置登录拦截，分别为路由拦截，http拦截。更多文件请看 github地址 大致流程：在进行路由跳转时，利用vue-router提供的钩子函数beforeEach()对路由进行判断，符合条件next()…"}, {"id": "6966944473280413709", "title": "vue+element大型表单解决方案(5)--校验标识", "desc": "之前花了两篇的篇幅完成了锚点组件，最开始设计锚点组件的目的只是为了辅助滚动大型表单的页面内容。由于是自主实现，进一步驱动我挖掘这个表单解决方案更多的可能性。首先我想到的是如果子表单校验失败，能在锚点上"}, {"id": "6988855167072337928", "title": " 左手tree右手transfer的穿梭框", "desc": "本文是介绍一种实现VUE+ElementUI实现左侧为树形结构、右侧无层级结构的穿梭框的功能。 环境：vue+elementUI"}, {"id": "6900758398816485383", "title": "基于开源内核实现的绘图编辑器topology-vue 使用指南", "desc": "设置configs属性，参考文档API部分说明。 [说明]topology-vue分免费版和企业版。免费版可以任意使用，但会保留社区相关菜单；企业版没有相关限制，帮助我们发展的更强、更好用，和为国产原创开源发展做出一份贡献。（企业版通过一个授权码识别） 1. 显示用户已登录 2…"}, {"id": "6864858225443864583", "title": "【Vue】谨慎使用$attrs与$listeners", "desc": "在 Vue 开发过程中，如遇到祖先组件需要传值到孙子组件时，需要在儿子组件接收 props ，然后再传递给孙子组件，通过使用 v-bind=\"$attrs\" 则会带来极大的便利，但同时也会有一些隐患在其中。 于是我发现这个“bug”，并迅速打开 gayhub 提了个 issue…"}, {"id": "6846687593715744782", "title": "【vue系列】优雅地用 vue 生成动态表单（二）", "desc": "工作台模块，新需求要做请假审批，开需求评审的时候，了解到请假有：年假 、病假、调休、事假 、婚嫁、丧假期、产假、陪产假等8种类型。小小第一个想法就是不想写多个表单页面，也不想在一个表单页面中写很多的判断类型逻辑。于是就试探性询问能否由后端配合做动态表单，毕竟之前做一次。但是后端…"}, {"id": "6854573218095857671", "title": "一个简单示例-刷新你对Vue2响应式原理的认知", "desc": "接下来我们就通过一个简单的示例来从源码层次去找答案，去解析Vue从初始化到更新这两个过程都做了什么，当然，这篇文章主要是为了说明问题，源码做了一部分精简，全部拿出来的话太多了。 示例代码被加载到浏览器以后，Vue开始初始化，执行各种init操作，其中最重要的就是实例化组件Wat…"}, {"id": "6988436376190451725", "title": "手动封装一个图片放大镜组件 ( Vue 3 )", "desc": "手动封装一个图片放大镜组件 ( Vue 3 ) 核心解决问题 1.如何实现左侧遮罩的鼠标跟随效果 2.如何展示放大效果"}, {"id": "6844904106608295949", "title": "【vue系列】封装公共弹窗组件的正确方式", "desc": "最近一个项目向Vue框架搭建的新项目迁移，但是项目中没有使用vue ui库，也还没有封装公用的弹窗组件。于是我就实现了一个简单的弹窗组件。在开发的之前考虑到以下几点： 其中包含了要实现的主要功能，以及要处理的问题。 1. 完成页面结构和样式 先创建一个弹窗组件vue文件，实现基…"}, {"id": "6844904100014866439", "title": "高级前端开发者必会的34道Vue面试题系列（二）", "desc": "本次解析本套高级前端的Vue面试题的第三问，Vue中是如何检测数组变化的，如果对这一问也有所不熟悉的，请一起学习吧。 上一文中，我们提到了Vue2.0和3.0的响应式原理，但是没有深入细讲，在本文会进行深入的分析Vue在2.0版本和3.0版本里，分别是如何检测各种数据类型的值变…"}, {"id": "6844903856799744013", "title": "Vue底层架构及其应用", "desc": "从其他的方面看，github日榜，Vue每天都有过100的star，足见其火热程度，这也是为什么大家都争先恐后的在非web领域提供Vue的支持。那么Vue的底层架构及其应用就尤为重要了 了解Vue的底层架构，是为非web领域提供Vue能力的大前提。Vue核心分为三大块：core…"}, {"id": "6844903687668629518", "title": "详解：Vue cli3 库模式搭建组件库并发布到 npm", "desc": "市面上目前已有各种各样的UI组件库，比如 Element 和 iView，他们的强大毋庸置疑。但是我们面临的情况是需求越来越复杂，当它们不能再满足我们需求的时候，这个时候就有必要开发一套属于自己团队的组件库了。 所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，…"}, {"id": "6844903589815517192", "title": "详解Object.create(null)", "desc": "propertiesObject:可选。要添加到新对象的可枚举（新添加的属性是其自身的属性，而不是其原型链上的属性）的属性。 Object.create()的定义其实很简单，弄清楚上面这个例子就可以了。 从上图可以看到，新创建的对象继承了Object自身的方法，如hasOwnP…"}, {"id": "6971633023854837774", "title": "以前我没得选，现在我想学点Vue3...", "desc": "项目开发流程，环境搭建，推荐插件，常遇报错，Vue3重要知识点，各种composition-Api介绍和应用，生命周期对比，全局Api对比和修改"}, {"id": "6844903683356884999", "title": "教你搭建基于typescript的vue项目", "desc": "自尤大去年9月推出vue对typescript的支持后，一直想开箱尝试，对于前端sr来说，vue的顺滑加上ts的面向对象，想着就非常美好~ 终于在两个月前，找到了个机会尝试了一把vue+ts的组合。 开文记录下vue和ts整合之旅和遇到的一些坑。 应该大部分人都知道vue，毕竟…"}, {"id": "6992549342515544072", "title": "LOLstyle-ui组件开发实战（二）—— Button组件(一)", "desc": "本篇文章将介绍如何封装一个Button组件从创建、注册到使用。用到的主要知识点为，组件传值，组件插槽。"}, {"id": "6844903925728935944", "title": "来自 Vue 3.0 的 Composition API 尝鲜", "desc": "前段时间，Vue 官方释出了 Composition API RFC 的文档，我也在收到消息的第一时间上手尝鲜。 虽然 Vue 3.0 尚未发布，但是其处于 RFC 阶段的 Composition API 已经可以通过插件 @vue/composition-api 进行体验了。…"}, {"id": "6992219618324512799", "title": "electron + vue3 + ts 实现桌面小工具第二天", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 electron + vue3 + ts 实现桌面小工具第二天 前言 昨天我们搭建了electron + vue3 + ts的开发环境，今天"}, {"id": "6949793012532822047", "title": "电商系统项目主页布局", "desc": "1. 主页布局 2. 通过接口获取后台数据 3. 布局上的优化 参照element 使得左边侧栏可以变小变大。定义子路由，Home的子路由。16渲染用户列表数据"}, {"id": "6844903605288304648", "title": "从开发到发布一款基于Vue2x的图片预览插件", "desc": "项目地址:vue-picture-viewer先来看下DemoLiveDemo关于开发Vue插件的几种方式（具体请移步官网）Vue官网我采用第一种方式来编写这个插件1.第一步创建项目vueinitwe"}, {"id": "6844903966216568839", "title": "Vue2.0源码阅读笔记（七）：组件", "desc": "传统的页面开发主张将内容、样式和行为分开，便于开发和维护。等到React、Vue等MVVM前端框架大行其道时，人们更倾向于使用html、css、js聚合在一起创建组件，通过编写小型、独立和通常可复用的组件来构建大型应用。 组件是现代开发框架的基石，下面详细介绍Vue组件的实现原…"}, {"id": "6844904051851657223", "title": "【译】如何使用Vue过渡效果来提升用户体验", "desc": "在Vue应用中添加过渡效果是一个可以使你的项目感觉更专业的简单方法。通过提升用户体验，可以使你的网站留住更多的用户以及提高转化率。 在这个指南中，我们将带你了解关于Vue过渡效果的相关知识，从最基本的开箱即用的方法到创建自定义过渡效果。 准备好开始学习关于Vue的过渡了吗？让我…"}, {"id": "6844903638452682766", "title": "Vue中那些容易被忽略的～", "desc": "记录一些在使用Vue开发中常见的坑。 先声明本人菜鸟一只，一些描述可能会有偏颇，大佬轻锤，欢迎拍砖。 该插槽name属性不为空，且可以在一个组件中出现多次。 未声明name的将找到对应的未声明slot属性的html模版做替换。 所以就有了第三种插槽，我们称之为作用域插槽，坊间也…"}, {"id": "6940883855129706503", "title": "关于虚拟dom的一些浅见", "desc": "老文章了，从简书迁移过来的。 已经9102年了，前端er或多或少都接触过一些mvvm库，了解有虚拟DOM这么个东西，可能你还没有深入了解过这个东西，其实很简单，来往下看。 虚拟DOM简而言之就是，用JS去按照DOM结构来实现的树形结构对象，也可以看做是一个JS对象而已。 这里不…"}, {"id": "6916131717023531022", "title": "Vue2核心原理(简易版)-组件初始化流程", "desc": "那么我们的新朋友，components呢，乍一看，局部注册的components和我们的老朋友们也一样出现在options配置当中，理论上我们也需要对其进行一步initComponent操作。 然而我们的确并没有，或者说，其实我们没有这个需要，为什么呢？因为components…"}, {"id": "6916101932046581773", "title": "【Vue 故地重游】02.Vuex 篇", "desc": "写在前面Vuex用了那么久了，一直有思考是如何工作的，今天从使用层面和原理实现探究Vuex如何实现的状态管理，基本使用使用Vuex插件创建store实例配置到options中问题为什么要先注册插件:V"}, {"id": "6940653987397894174", "title": "Vue数据响应式最终目标", "desc": "2. Observer是Vue中内部的构造器，我们可以使用Vue.observable(object)间接使用该功能,在组件的生命周期中，它发生在 beforeCreate 组件之后 created 之前 3. 具体实现上他会递归遍历对象的所有属性，以完成深度的属性转换。 4.…"}, {"id": "6940606968394416136", "title": "Vue computed 和 watch 浅析", "desc": "当其依赖的属性的值发生变化时，计算属性会重新计算，反之，则使用缓存中的属性值。 上面代码就用到了computed。如果有很大的计算量的代码。就可以放在computed里面这样不会让你的代码看着很凌乱，让你的代码的逻辑看着更加的清晰，还有如果修改了里面的值，他会自动发更新结果。 …"}, {"id": "6979049633867808799", "title": "科大讯飞 Cannot read property 'createChildCompiler' of undefined  This socket has be", "desc": "应用场景: 实现实时语音播放后端返回的新闻资讯(富文本)功能 科大讯飞 Cannot read property 'createChildCompiler' of undefined"}, {"id": "6844903857722687496", "title": "根据调试工具看Vue源码之虚拟dom（三）", "desc": "针对初次渲染，patch 函数是做了特殊逻辑的。显然我们只要把初次执行的 patch 的逻辑走一遍就清楚了👇 也就是对「非 dom 元素的相同节点」做一次 patchVnode 的操作。关于这段代码可以分成几点来分析： 由于执行 patchVnode 的前提就是新老节点是「相…"}, {"id": "6949508163372580901", "title": "Vue 2.0 生命周期和钩子函数", "desc": "Vue 2.0 生命周期和钩子函数，平时会遇到的一些问题有些都和生命周期有关，所以会去查询相关的一些相关的资料，并且做了一些总结"}, {"id": "6907116509072457742", "title": "new Function 和 with -自我记录", "desc": "   学习vue2源码渲染这块的过程中，首先使用正则将html字符串解析成ast语法树，随后将ast转变成了js语法，这里面使用了模板引擎，（所有模板引擎靠的是newfunction和with）   "}, {"id": "6861217875672170504", "title": "用VUE测试库测试VUE组件的方法", "desc": "测试是开发任何应用程序的关键。在测试阶段偷工减料可能会导致错误的自信，并最终导致错误的应用程序。在本教程中，我们将演示如何使用VUE测试库。尽管我们可以使用无数其他测试库，但我支持以用户使用的方式测试"}, {"id": "6978849927321518087", "title": "Vue:造轮子-05:tabs组件", "desc": "Vue:造轮子-05:tabs组件 需求 点击 Tab 切换内容 有一条横线在动 设计API 新建Tab和Tabs组件，TabsDemo.vue 如何在运行时确认子组件的类型 问题： tabsDemo"}, {"id": "6844904084009385997", "title": "浅谈 Vue2.4.0 $attrs 与 inheritAttrs", "desc": "包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$attrs\" 传入内部组件——在创建…"}, {"id": "6958449149041704991", "title": "Vue初识五（computed）", "desc": "一、computed 例子一：看以下代码 在页面中展示用户名字，若用户没有填写名字，则展示邮箱，接着电话，但是，如果要展示多个，每个都这么写岂不是很麻烦。 用computed实现，看下面代码 这样，要"}, {"id": "6958432928082690055", "title": "Vue组件的生命周期", "desc": "vue源码，生命周期钩子的介绍。在vue的生命周期的不同阶段，提供不同的钩子函数，可以让使用者在生命周期的不同阶段做不同的事情"}, {"id": "6958419665479532552", "title": "Vue 数据响应式的理解", "desc": "对 Vue 数据响应式的理解 响应式： 一个物体能对外界的刺激做出翻反应，它就是响应式 在 Vue 中，如果改变 data 里属性的值，在界面中会看到改变，改变数据，界面相应了我，这就是数据响应式。 "}, {"id": "6844903711022514190", "title": "vue 博客优化，服务端渲染(SSR)指南", "desc": "，服务器阿里云 Ubuntu 16.04，web服务器nginx。 面临的问题。1：单页应用首屏加载过慢；2：无法被搜索引擎抓取；3：首屏白屏时间过长（重要）； 解决一：首屏加载过慢。 经过分析，页面首屏慢主要是首次需要加载的js文件过大。 1：对webpack打包过程进行优化…"}, {"id": "6897873270700245000", "title": "vue2.x常见问题记录", "desc": "直接修改props属性的值或者父组件修改子组件的props里面的属性值解决办法：在data中承接props属性值如果计算属性没有定义setter，直接修改计算属性的值会报错解决办法：定义一个空的set"}, {"id": "6844903789946732557", "title": "手摸手，一起从0到1走进vue的世界（一）", "desc": "相信进来的小伙伴都对vue有一定的了解或者使用，毕竟现在前端最火的框架之一，vue是最好学的和入门相对简单，毕竟是中文吧，亲切感倍增，鄙人呢，现在的工作用的主要框架也是vue，平时喜欢追根溯源，最近身边很多小伙伴去面试或者做面试官，反馈的某某大佬，写代码棒棒的，但在原理和使用场…"}, {"id": "6952012601358286855", "title": "Vue的methods与computed的区别", "desc": "设计一个计算成绩和的案例：`总结methods与computed区别：调用方式不同。computed直接以对象属性方式调用，不需要加括号，而methods必须要函数执行才可以得到结果。绑定方式不同。m"}, {"id": "6951653111463149575", "title": "Vue移动端的两种适配方式", "desc": "一、将px转换为vw安装 postcss-px-to-viewport配置移动端适配在项目根目录下面新建文件postcss.config.js,然后将以下代码加入到文件内:配置完之后，重启服务，在浏览"}, {"id": "6891984683706351629", "title": "Vue中Watcher的极简说明", "desc": "Vue的响应式原理的核心，表面上就是观察者模式，state作为被观察的主体，视图等作为观察者。观察者模式（或者叫发布/订阅模式，这里不做纠结）除了观察者和被观察者这两个概念主题，最重要的就是“观察”和“通知”两个行为。从这些内容，不难推断出Vue中核心类—Watcher的基本形…"}, {"id": "6844904051549667341", "title": "自建vue组件 air-ui (3) -- css 开发规范", "desc": "之前分析过了 element-ui 的项目(自建vue组件 air-ui (2) -- 先分析一下 element ui 项目)，包括目录结构，构建以及项目开发的整体思路，今天打算还是以 element-ui这个项目的源码为主，我们来聊一聊开发一个ui组件的时候，我们应该怎么设…"}, {"id": "6844903696153706509", "title": "VueJS 的编译阶段到挂载节点", "desc": "为了实现响应式模式，Vue用render函数来生成vnode，并使用diff算法对比新旧vnode，最后更新到真实DOM上。 由于是在编译阶段而不是在监听阶段，所以vnode没有对比的对象，直接通过vnode生成真实DOM。 Vnode是Vdom上的一个节点，是对真实DOM的抽…"}, {"id": "6951664864049758221", "title": "vue+element+i18n 学习过程", "desc": "1. 安装vue-i18n 2. 按需引入elementUi 3.引入vue-i18n 4.如何使用"}, {"id": "6844903702138994702", "title": "Vue 应用单元测试的策略与实践 03 - Vue 组件单元测试", "desc": "欢迎关注知乎专栏 —— 前端的逆袭（凡可 JavaScript，终将 JavaScript。） 欢迎关注我的博客， 知乎 ，GitHub，掘金。 在组件化出现之前，我们都压根不谈 UI 的单元测试，哪怕是对于 UI 页面层级的测试来说都是一件非常困难的事情。其实组件化并不全是为…"}, {"id": "6867755434980147214", "title": "认识前端模块化以及了解CommonJS", "desc": "如果要了解前端为什么要进行模块化，还是得了解JS语言的发展历程。 起初，JavaScript仅仅是一门脚本语言，就是相当于在页面中添加插入一小段脚本，类似给衣服打一块补丁。所以起初JS要处理的东西相当的少，一个script标签足以解决。 后来，ajax的出现，前端的世界从同步转…"}, {"id": "6844904045635698695", "title": "Vue基础知识系列(六)键盘修饰符", "desc": "键盘修饰符常用的就是enter，del，up，dowm，left，right，如果还有其他的，并没有这些enter来辨别，来使用。需要参考有道云笔记【js 里面的键盘事件对应的键码】"}, {"id": "6844904096315490318", "title": "浅析Vue完整版和运行版的区别", "desc": "可以去BootCDN里面引用，进去后直接搜索 Vue 即可。 完整版可以直接在HTML里面或者在template选项中直接写代码。它会自动解析 新手想学习Vue的时候，可以借助codesandbox来进行快速的搭建Vue项目。省去自己安装和配置的时间。当然开发的时候，还是自己在…"}, {"id": "6922032668406185992", "title": "vue |通过BetterScroll创建动态菜单", "desc": "滚动原理：需要一个固定高度的父容器，然后在其基础上进行滚动。 如果是动态数据，下面的内容可以写在获取数据的函数内部的结尾。"}, {"id": "6844903639996170248", "title": ".vue文件中style标签的几个标识符", "desc": "项目中使用了elementUI框架, 与.vue文件. 现状: <template>中使用$style:[类名], <style module>进行了样式的绑定. 个人认为使用$style这种方式的绑定, 写起来很麻烦. 不仅仅是麻烦更重要的是, 没有办法直接影响和修改elem…"}, {"id": "6844903837715660808", "title": "Puzzle Game：Vue实现一个拼图游戏", "desc": "会做这个 Puzzle Game，还是应前几天 lightyears 的一次提议，模仿的是鹰脚网络首页左下角那个拼图小游戏。那天晚上睡觉的时候在床上想了一下，大致 get 到了它内部实现的原理，于是就干脆动手实践一番，现在也顺道写一篇博客记录下实现思路和中间遇到的一些问题。 P…"}, {"id": "6907431640260149262", "title": "vue集成Idea进行Debug调试", "desc": "给需要的代码打上断点，运行刚刚创建好的 vue-debug 项，IDEA会帮你在新的浏览器窗口里打开刚刚设置的URL地址。"}, {"id": "6866322545226809358", "title": "VUE虚拟DOM——从出生到更新", "desc": " DOM树的概念（一个网页的呈现过程）：浏览器请求服务器获取页面HTML代码 浏览器在内存中，解析dom结构，并在浏览器内存中渲染出一颗dom树。 浏览器把dom树，呈现在页面上。 虚拟DOM的概念："}, {"id": "6844903599776989197", "title": "vue+elementUI开发实践问题总结(二)", "desc": "该篇继续记录最近项目中一些疑难知识点和坑的解决办法。 在vue多路由切换的过程中，可能存在这样一种情况，即多个页面使用同一个组件，这就会产生一种情况，在这几个页面相互切换的过程中并不会触发vue的created或者mounted钩子，官方文档说可通过watch $route的变…"}, {"id": "6844904181455650823", "title": "学习vue源码（9）手写代码生成器", "desc": "前面的学习vue源码（6）熟悉模板编译原理 我们谈到，模板编译分为解析器，优化器，代码生成器。 前面两部分已经实现，现在 就来看看 代码生成器怎么实现吧。 代码生成器的作用是使用 AST 生成 render 函数代码字符串。 生成后的代码字符串中看到了有几个函数调用 _c，_v…"}, {"id": "6934912291884236807", "title": "Vue源码解析(深入响应式原理&依赖收集&派发更新)", "desc": "在介绍完props、data、watch以及computed后，我们对响应式原理有了一定的初步认识，在这一章节中我们再次回顾响应式，来探究其实现原理。 在之前的章节中，我们以及介绍过：Vue.js通过Object.defineProperty(obj, key, descrip…"}, {"id": "6949439281936990244", "title": "Vue内置的组件 之 keep-alive", "desc": "keep-alive 是Vue内置的组件之一， 主要用于保留组件状态或避免重新渲染。作用   在组件切换过程中将状态保留在内存中，防止重复渲染DOM，减少加载时间及性能消耗，提高用户体验。一、keep"}, {"id": "6844903620882726926", "title": "React 初涉总结", "desc": "来新公司开始用 React 已经两个多月了，当然之前我对 React 也不是一无所知的，对 React 的基础语法、JSX、Virtual Dom 都是有一定的了解。之前用过 Angular、Vue，对组件化开发都掌握的很熟练了，但 React 与 Angular、Vue 还是…"}, {"id": "6943479715839606797", "title": "vue+element-动态设置表头（以时间作为表头）", "desc": "我们都知道element提供了table的组件，非常的好用，前面我也写过一些，但是这次的需求是这样的，就是用户可以自己选择时间，自己选择天数，选择以后呢就可以直接生成起始日期为用户选择的，列数是用户选择的天数，那么表头还要显示出对应的星期。这里的目的是为了实现给用户选择会场的时间..."}, {"id": "6844903599751823373", "title": "v-dialogs - 基于Vue2的简洁易用的弹出窗口", "desc": "基于 Vue2 的简洁易用的弹出窗口，包含 modal, alert, mask, toast 等使用模式，可多层互相嵌套"}, {"id": "6844903645335683085", "title": "使用Vue创建一个Excel插件", "desc": "在这篇文章中，你将会经历一遍使用Vue和Excel JavaScript API 打造一个Excel插件的过程。 全局安装Vue CLI 全局安装最新版本的Yeoman和Yeoman generator for Office Add-ins 。 使用Vue CLI生成一个新的V…"}, {"id": "6948419701244428296", "title": "理解Vue数据响应式", "desc": "Vue.js 一个核心思想是数据驱动。所谓数据驱动，是指视图是由数据驱动生成的，我们对视图的修改，不会直接操作 DOM，而是通过修改数据。 下图是Vue的官方文档中的图解，黄色部分是 Vue 的渲染方法，视图初始化和视图更新时都会调用render 方法进行重新渲染。渲染时不可避…"}, {"id": "6948343484885499912", "title": "Runtime-Compiler和Runtime-only的区别", "desc": "我在创建vue项目时，看到vue build的两个选项时有些困惑，Runtime-Compiler和Runtime-only有什么区别，之前都是直接选中默认第一个的。今天查了一些资料，记录一下自己的理解。 Runtime-only非常明白的告诉大家，用它可以比Runtime-C…"}, {"id": "6847902219564662798", "title": "Vue3.0 : 基于Proxy实现的Reactivity 系统构建一个RGB调色板", "desc": "HTML部分JavaScript部分几个关键点依赖收集与初始化多层嵌套属性复用Reactivityobj（递归调用）在reactive方法中"}, {"id": "6844903908440031246", "title": "VueVirtualCollection的组件源码分析如何做一个性能优秀的无限滚动加载", "desc": "本篇文章解析了vue-virtual-collection组件是如何巧妙运用了“块渲染”的思想去渲染需要的数据。 该图片完美的解析了“块渲染的思想” , 让我们来分析一下上图。 为了高效计算视图中显示那些块,我们可以先定义一个 div 为 X * X , 所有与这个div有重叠…"}, {"id": "6943479130994245645", "title": "uni-app实战之路-获取用户地址和基本信息", "desc": "authorize文档 这里可以看到文档里面写的还是比较明白的，提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。我们主要是使用他的参数scope，这..."}, {"id": "6844904045631504397", "title": "Vue基础知识系列(二)Vue指令集合", "desc": "{{}}大括号的方法叫做插值法，也就是Mustache读作mastchi，这是最常用的。插值表达式是Vue中最普遍的写法，用法。插值表达式 只会替换自己的占位符，不会把 整个元素的内容全部清空 v-text后面跟data，直接给属性，是没有闪烁的问题会覆盖元素中原本的内容，但是…"}, {"id": "6844903539681001480", "title": "使用Vue开发的谷歌扩展，获取音乐下载地址", "desc": "使用Vue开发的谷歌扩展，获取音乐下载地址 目前支持网易云音乐，QQ音乐，百度音乐，酷我音乐"}, {"id": "6844903636498120711", "title": "基于vue.js的dialog插件art-dialog-vue2.0发布", "desc": "art-dialog-vue——经典、优雅的网页对话框控件优点支持普通与12方向气泡状对话框支持ARIA标准面向未来：基于HTML5Dialog的API支持标准与模态对话框丰富且友好的编程接口能自适应"}, {"id": "6844903538166857736", "title": "一步一步分析vue之$mount(1)", "desc": "前两期，我们接连分析了_data，observe,接下来，我们来分析$mount。 如果你的option里面没有render函数，那么，通过compileToFunctions将HTML模板编译成可以生成VNode的Render函数。 new一个Watcher实例，触发upda…"}, {"id": "6844903587722559495", "title": "你想要的——vue源码分析（2）", "desc": "Vue.js是现在国内比较火的前端框架，希望通过接下来的一系列文章，能够帮助大家更好的了解Vue.js的实现原理。"}, {"id": "6918685940722434055", "title": "计算属性和侦听器", "desc": "computed 是计算属性，它会基于所依赖的响应式 property 动态显示最新的计算结果；计算属性的结果会被缓存，只有其依赖的响应式 property 有变化才会重新计算。尽管计算属性的写法在形式上是方法，但它最终会被混入到 Vue 实例中当作 property 使用，所…"}, {"id": "6947342626161393700", "title": "源码分析vue computed", "desc": "在vue源码入口文件vue/src/core/index.js中，可以看到import Vue from './instance/index'，导入了Vue这个对象。 可以看到Vue是一个函数方法，调用该方法时会调用一个叫_init的初始化方法，并传入options参数，同时这…"}, {"id": "6855129005973209096", "title": "vue-router的原理及内部功能的实现（一）", "desc": "vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器，vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。…"}, {"id": "6844903818006626312", "title": "koa+mysql+vue+socket.io全栈开发之前端篇", "desc": "React 与 Vue 之间的对比，是前端的一大热门话题。 vue 简易上手的脚手架，以及官方提供必备的基础组件，比如 vuex，vue-router，对新手真的比较友好；react 则把这些都交给社区去做，虽然这壮大了 react 的生态链，但新手要弄出一套趁手的方案挺麻烦的…"}, {"id": "6844904094922965000", "title": "微前端思考，vue多页面项目独立打包和个人推荐的vue建项模式", "desc": "其实没什么太多可以说的，上述大家如果体验过那么大致知道原理。其中iframe是想对成本最低的，或者说侵入性最小的。其余两种成本较高。但是总体而言并非不可接受。 其实这个构建模式我之前就用了，只是那会csdn文章迁移过来。就厚颜无耻的再用一次了。 最近进了新公司，感受了别人公司的…"}, {"id": "7000522709167767560", "title": "技术篇 - vue2.0 与 vue3.0之间创建数据的差异", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 hello, 大家好，我是前端学长Joshua (公众号) 。 热心于做开源，写文章。目的为帮助在校大学生，刚入职场的小伙伴可以尽快搭建自己"}, {"id": "6981337832757395463", "title": "Vue3全家桶升级指南一composition API", "desc": "#### 1、setup() vue3中的composition API中最重要的就是setup方法了，相当于组件的入口，所有的composition API都必须放到setup()中的使用。 *"}, {"id": "6940540244592689159", "title": "JS设计模式之观察者模式", "desc": "在翻阅设计模式的文章中，很多文章都是将观察者模式等同于发布订阅模式，虽然两者在本质一样，但在设计思想上还是存在一些差异的；今天我们来看一下两者有什么异同，以及在Vue源码中是如何利用发布订阅模式来实现数据响应式的。 我们回到观察者模式的定义，它定义一种一对多的关系；这里的一我们…"}, {"id": "6965642866869665822", "title": "通过示例了解Vue过渡和动画", "desc": "Vue过渡和动画让我们网站更具现代感并为网站访问者提供更好的用户体验的好方法。 幸运的是，对于开发人员而言，Vue动画只需几分钟即可完成设置。"}, {"id": "6844903623688716302", "title": "JS忍者秘籍中的定时器机制详解", "desc": "前段时间刚看完《JS忍者秘籍》，虽说是15年出版的，有些东西是过时了，但像对原型链、闭包、正则、定时器之类的机制却是不会过时的，里面很多东西都讲的很细，还是值得一读的，本文将对这本书中对定时器机制的部分进行详细的解析，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以…"}, {"id": "6986269594516193293", "title": "Vue 2 组件", "desc": "这是看《[想入門，我陪你]Re Vue 重頭說起》视频教程和阅读 Vue 2 官方文档时做的笔记，这一篇主要是与组件相关的知识点，还包括一些需要注意的细节。"}, {"id": "6971596170921508900", "title": "数据响应式原理 - 03", "desc": "在上一篇中，我们实现了数组的响应式处理，本篇将对依赖收集和 Watcher 类进行介绍。（本文是关于数据响应式原理的学习笔记，目的在于更好的理解 Vue 的底层原理）"}, {"id": "6844903882208837640", "title": "深入浅出Vue响应式原理（完整版）", "desc": "Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。这使得状态管理非常简单直接，不过理解其工作原理同样重要，这样你可以避开一些常见的问题。----官方文档 本文将针对响应式原理做一个详细介绍，并…"}, {"id": "6844903801409765390", "title": "用vue-cli3从0打造一个完整的UI库", "desc": "预览示例和查看文档的网站代码：类似Vant、ElementUI这类网站。 具体的代码组织方式可以查看Github上的源码，这里需要注意，我们尽量以组件名来命名文件夹名，然后在文件夹内新建index.vue组件。这么做是为了方便后面我们用代码直接生成index.js入口文件的内容…"}, {"id": "6844903682669019144", "title": "求职季，前端面试送给你|掘金技术征文", "desc": "最近好多小伙伴都跳槽去找工作，我只能在心里默默的支持他们能找到一份好的工作，这份前端面试大全送给我的小伙伴们，主要说的是前端一些常用的一些知识，说的不对的地方请小伙伴们即使指正出来，自己同时也回顾下这些知识。主要分以下几个方边来说： 1.Doctype作用？标准模式和兼容模式区…"}, {"id": "7002620301364166663", "title": "珊格化组件的实现", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 背景： 笔者下班的时间自己在写vue相关的技术书籍，写到组件部分的时候，和读者介绍了珊格组件，书中的主要内容就是介绍珊格组件的使用场景，因为"}, {"id": "6918365587248775175", "title": "从 Composition API 源码分析 getCurrentInstance() 为何返回 null", "desc": "另外其实不止 getCurrentInstance() ，还有诸如： useStore 、 useRouter 这些跟 Vue 实例沾边的都会有这个问题，不过本文只讨论 getCurrentInstance()，至于其它这些我不太清楚，所以不敢乱下结论。 我之前对此一直没怎么深…"}, {"id": "6975531993152897032", "title": "vue2.x响应式原理-数组篇", "desc": "来不及解释了，快上车......之前的一篇文章讲到了vue的响应式原理，今天补充一下数组响应式的原理，因为vue对数组做了特别的处理"}, {"id": "6844904042187980807", "title": "摸鱼不如摸一个动态满满的可拖拽日历时间浮窗组件", "desc": "前言时间日历控件无论在Pc端还是移动端，都是十分重要且有用的一个组件，最近重拾了自己的UI库，按照ElementUI的组件种类，以Pc端为核心进行组件开发【适配Vue+Less】，目前项目已有近20个"}, {"id": "6873962565626494983", "title": "喜大普奔: Vue 3.0 正式版发布", "desc": "今天，我们很自豪地宣布Vue.js3.0“OnePiece”的正式发布。该框架的新主要版本提供了改进的性能，更小的包大小，更好的TypeScript集成，用于处理大规模用例的新API，以及为框架的长期"}, {"id": "6962702898790662152", "title": "Vue3源码分析-完整update流程和diff算法", "desc": "前言 在上一篇文章vue的首次渲染过程中提到在组件的首次渲染阶段会有一个副作用渲染函数setupRenderEffect，在这个函数内会使用响应式API Effect创建副作用函数componentE"}, {"id": "6874585127658192910", "title": "VUE3.0中一些API是如何实现的？", "desc": "生如夏花之绚烂，死如秋叶之静美。——泰戈尔 # vue3.0本质 setup Composition API Vue生命周期 diff算法优化如何实现 Vue3.0中的亮点 Vue如何更轻量更快"}, {"id": "6844903558597312520", "title": "从零开始做Vue前端架构（1）", "desc": "想想也已经做过不少架构的项目了，有基于vue，基于react，基于thinkPHP，基于laravel的。 做多了，也就对现有的架构有各种想法，有好的，有坏的，总之，用起来还是不爽。vue-cli虽然可以很快地构建并使用，尤其是vue-cli v3.0，把webpack都封进@…"}, {"id": "6844904117400240136", "title": "高级前端开发者必会的34道Vue面试题解析（四）", "desc": "每个new出来的Vue实例都会有从实例化创建、初始化数据、编译模板、挂载DOM、数据更新、页面渲染、卸载销毁等一系列完整的、从“生”到“死”的过程，这个过程即被称之为生命周期。 在生命周期的每个节点，Vue提供了一些钩子函数，使得开发者的代码能被有机会执行。这里的钩子函数可以简…"}, {"id": "6844903702533423118", "title": "支援一波 《面试数十人有感》", "desc": "无意间看到原博主的这篇文章，强调基础和原理，略有同感。 嗯哼 ~ 首先， 我们的社会， 是一个竞争的社会，如果你想要更好的工作，更高的薪资，那么你就一定会参与到某种竞争当中，嗯，残酷的竞争。但是很明显，很多人并没有意识到这一点，因为毕竟再怎么坑也多多少少能够收到一些团队的off…"}, {"id": "7000996274363170829", "title": "浅谈Vue风格的前端开发规范", "desc": "因为团队需要，所以就简单的总结一下Vue风格的前端开发规范。代码千万行，安全第一行；前端不规范，同事两行泪。"}, {"id": "6997573905338613774", "title": "No.18 vue-element-admin 学习使用（十三）ESLint，图表", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 然后学习一些进阶相关的知识。 跨域 需要配置一下cors（跨域资源共享） ESLint 制定了代码规范，配置文件在.eslintrc.js"}, {"id": "6997331577717915656", "title": "Vue前后端交互", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 1.前后端交互模式 1.1 接口调用方式 原生ajax 基于jQuery 的ajax fetch axios 1.2 URL地址格式 1."}, {"id": "6844903557812977672", "title": "Vue系列之computed使用详解(附demo,不定期更新)", "desc": "定义：当其依赖的属性的值发生变化的时，计算属性会重新计算。反之则使用缓存中的属性值。 当其依赖的属性的值发生变化的时，这个计算属性的值也会自动更新。多用于\"data，computed\"的属性。 当赋值给计算属性的时候，将调用setter函数。多用于在模板组件中需要修改计算属性自…"}, {"id": "6914147233730560013", "title": "2021年，重学Vue.js之组件篇", "desc": "组件是一段可复用的、利于维护的、方便组合的代码段。在 Vue 中组件实际就是一个 Vue 的实例。把一些相对独立的模块封装成组件非常有利于代码的复用以及维护。 组件名称将来会被用来放在模板中类似html标签的形式使用，那么其命名最好是不要同原生标签冲突或者是在未来可能会冲突。所…"}, {"id": "6869196067116679182", "title": "vue3.0 watch 和 computed源码解析(举例图解)", "desc": "之前的文章详细的介绍了vue3.0 相应式原理，知道了用proxy代替Object.defineProperty 的利与弊，了解了依赖收集和派发更新的大致流程，知道了vue3.0响应式原理，这节我们一起研究vue3.0中的 watch 有那些变化。 之前我们讲解到，vue3.0…"}, {"id": "6988303020291260423", "title": "7x0 精读Vue官方文档 - 全局配置", "desc": "精读 Vue 官方文档系列 🎉 以下都是 Vue.config 的配置项。 config.silent 取消 Vue 的日志与警告输出。 config.optionMergeStrategies 自定"}, {"id": "6986095783946764325", "title": "[Element Plus 源码解析] Avatra 头像", "desc": "一、组件介绍 [官网链接](组件 | Element (gitee.io)) Avatar组件展示用户头像，可以采用图标、图片或者字符3种形式。 1.1 属性 通用属性： size: 设置头像的大小，"}, {"id": "6995206359985684487", "title": "No.12 vue-element-admin 学习使用（七）自己写一个任务运行监控小组件", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 这两天刚好来了一个任务监控的需求，监控公司一些重要任务的执行情况，（未运行，运行中，成功，失败），恰巧把它作为一个组件，写到这个项目里，练"}, {"id": "6996682171071070245", "title": "vue3获取数据的注意点", "desc": "“这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战” 场景描述 传参的方式 为什么是undefined呢？？？ 如何处理undefined 有没有更好的写法呢？ 有交叉的逻辑如何处理"}, {"id": "6993513170279071751", "title": "《Vue写UI轮子之Grid网格布局》", "desc": "网格布局 什么是网格布局？ 就是把一个 div 分成 N 个部分（N = 12,16,24...），每个部分无空隙或者有空隙。 制作雏形： 一行分成24份，可以用span指定多少份 增加gutter:"}, {"id": "6910027957251604494", "title": "Vue3+vite+vueRouter+Vuex 项目搭建初体验", "desc": "全局安装create-vite-app创建项目目录访问地址 http://localhost:3000/与Vue2的差异详见：MigrationGuideVite配置 根目录创建vite.config"}, {"id": "6996151455477006344", "title": "Vue3实现Hello和Counter", "desc": "小编主要针对现在比较流行的Vue3结合实例，和大家一起探讨一下Vue的基本语法和Vue3中提供的一些新特性，希望小编可以和大家一起成长，一起在前端的路上，越走越远"}, {"id": "6933953813657157646", "title": "记一次比较Vue2和Vue3响应式原理和性能差异", "desc": "Vue响应式原理是数据驱动视图的核心，它能够自动帮助开发者监听数据的变化，最终触发视图更新。它是Vue的渲染更新过程的核心。那么了解这一部分的原理至关重要，这篇文章就结合vue2和vue3响应式来做一个对比，既明白了响应式原理的实现，又对比了二者在性能上的差异～ 为了做这个实验…"}, {"id": "6960971380435189773", "title": "Vite2 + vue3 + TS + ElementPlus 从零搭建后台管理系统（四）", "desc": "上一章主要完善后台管理系统基础布局和项目结构 Vite2 + vue3 + TS + ElementPlus 从零搭建后台管理系统（三） 这一章开始完善基础布局组件 1. 完善 aside 菜单组件 "}, {"id": "6844903568768499719", "title": "一年前端面试打怪升级之路（一）", "desc": "2017年本科毕业生，坐标杭州，前端程序媛一枚。 在17年4月以前是个UI软妹子，自我定位想要成为一个交互大神，热衷于研究产品用户体验。 17年3月以UI设计实习生的身份进入现在的公司之后，由于UI发展前景不明，经过一段时间的深思熟虑（一拍脑门）决定转岗前端，自学一段时间后跟经…"}, {"id": "6988874055474479135", "title": "webpack搭建vue项目", "desc": "一、入门 1.1 初始化项目 新建一个目录，初始化npm webpack是运行在node环境中的,我们需要安装以下两个npm包 如果下载不了，安装淘宝镜像： 如果出现（cnpm : 无法加载文件 C:"}, {"id": "7001441600727416840", "title": "高效学习：Vue", "desc": "一、基本使用 指令、插值 插值、表达式 指令、动态属性 v-html：会有XSS风险，会覆盖子组件 computed、watch computed有缓存，data不变就不会重新计算 watch如何进行"}, {"id": "6893839274304700429", "title": "Vue3 模板编译优化", "desc": "Vue3 正式发布已经有一段时间了，前段时间写了一篇文章（《Vue 模板编译原理》）分析 Vue 的模板编译原理。今天的文章打算学习下 Vue3 下的模板编译与 Vue2 下的差异，以及 VDOM 下 Diff 算法的优化。 了解过 Vue3 的同学肯定知道 Vue3 引入了新…"}, {"id": "6844903617728610311", "title": "vue实践中的常见知识漏洞001", "desc": "本文主要总结了vue实际开发项目当中应该如何解决一些实际的开发问题，可能你认为很简单，但短时间内也许你并没解决思路的。 这种书数据的要求比较高，且要求你能够找到比较好的对应关系，需要针对class进行特征性的组件渲染。当你需要改变时改变数据即可重新渲染达到改变样式的目的。 特点…"}, {"id": "7005863208263090189", "title": "Vue初步总结（未完成）", "desc": "初识Vue 1.想让Vue工作，就要创建一个Vue实例对象，由new Vue（options）方式创建 root容器里的代码仍然是符合html规范的代码，只不过混入了一些特殊的Vue语法 root容器"}, {"id": "6844903660875415565", "title": "[贝聊科技]不简单的自适应高度输入框", "desc": "前段时间在项目开发中遇到这样一个需求——文本输入框的高度要随着框内文本所占高度而变化。 下面讲一下实现方案的探索过程。 首先想到的方法，是使用 HTML 5 中新增的contenteditable属性。它可以把元素变成可编辑状态，同时让其保留原有的特性（如元素高度根据元素内容所…"}, {"id": "6997024228931272734", "title": "前端小白不迷路 - 今天来介绍下Vue中mixins的使用方法", "desc": "项目中，如果有多个组件的功能是类似的，比如一些共同的请求数据方法，如果每个页面都引入，然后写很长的传参逻辑，其他的页面复制这段逻辑代码，这样代码会非常的冗余，这我们该怎么办？于是便引出了mixins"}, {"id": "6993197085474422797", "title": "组合式 API", "desc": "这是我在学习 Vue 3 时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "6981443262720688141", "title": "vue-cli: 配置开发、测试、生产环境", "desc": "项目中有好几个地方调用了支付的功能，在开发环境和测试环境中，支付金额需要修改为1分钱，在生产环境中则是真实金额，支付接口是统一封装的，只需要在调用之前判断是开发环境还是生产环境就可以了。"}, {"id": "6886735919697788941", "title": "egg+vue+mongodb实践开发在线文档管理平台——水墨文档", "desc": "vue: 模块化开发少不了angular，react，vue三选一，这里选择了vue。 sass: css预编译器。 element-ui：不造轮子，有现成的优秀的vue组件库当然要用起来。 egg.js：企业级框架，按照一套统一的约定进行应用开发，开发十分高效。 mongod…"}, {"id": "7005745762822782989", "title": "vue 2.0中引入sass的完整解决方案", "desc": "1. sass-loader依赖于node-sass,所以要安装node-sass npm install node-sass --save-dev       //安装node-sass npm i"}, {"id": "6844903695365177352", "title": "Vue番外篇 -- vue-router浅析原理", "desc": "这篇文章主要围绕Vue的SPA单页面设计展开。 关于如何展开Vue多页面设计请点击查看。 这里指的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器。 换句话说，vue-router就是WebApp的链接路径管理系统。 vue-router是Vu…"}, {"id": "6975528302563819557", "title": "Electron+Vue3 MAC 版日历开发记录(19)——自制倒计时组件", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6943045923085746189", "title": "fabric.js实现可视化签章以及遮罩打印的功能", "desc": "公司有个项目，是可信电子凭证可视化签章。 后来，又一次用到了fabric.js是档案管理平台的项目。 了解一门新技术，直接看官网和相关文档。 然后看了相关文档，了解到我们能通过使用它实现在canvas上创建，填充图形，给图形填充渐变颜色。组合图形（包括组合图形，图形文字，图片等…"}, {"id": "6932336697103351815", "title": "前端项目框架搭建-day01", "desc": "vue3.0+vite2.0+ts框架搭建写在开头为了更好的了解前端vue3.0+vite2.0+ts进行项目开发，特整理整个项目框架搭建的步骤，以便于学习1、使用vite创建Vue项目支持的模板预设"}, {"id": "6915056696872140807", "title": "基于Vue3.0自定义滚动条Vue3Scroll", "desc": "介绍v3-scroll一款基于vue3.x构建的pc网页端自定义模拟系统滚动条组件。支持自定义滚动条大小、颜色、层级及移出滚动区是否自动隐藏滚动条等功能。快速引入在main.js中快速引入v3scro"}, {"id": "6955708000904413191", "title": "vue mixins 让组件显得不再臃肿", "desc": "vue mixins 让组件显得不再臃肿 vue 提供了 mixins 这个 API，可以让我们将组件中的可复用功能抽取出来，放入 mixin 中，然后在组件中引入 mixin，可以让组件显得不再臃肿"}, {"id": "6994787708522479646", "title": "[Element Plus 源码解析] Collapse 折叠面板", "desc": "一、组件介绍 官网链接：Collapse 折叠面板 | Element (gitee.io) collapse折叠面板组件可以折叠/展开内容区域，通常与collapse-item组件组合使用。 1.1"}, {"id": "6904419861179400200", "title": "【最近项目小结】使用 Vue 实现一个简单的鼠标拖拽滚动效果插件", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 简单描述一下，就是鼠标拖动页面，整个页面会随着的鼠标的拖拽而移动，如果页面有内容，里面的内容也需要跟着拖动的外层整体移到。 一开始没啥思路，所以就发了个朋友圈，得…"}, {"id": "6844903811127967758", "title": "Vue-CLI 3.x 自动部署项目至服务器", "desc": "平时部署前端项目流程是：先部署到测试环境ok后再发布到生产环境上，部署到测试环境用 xshell 连上服务器，然后用 xftp 连接服务器，然后本地 build 项目，接着把 build 好的文件通过 xftp 上传到服务器上，整个流程感觉稍有繁琐，重复。 scp2是一个基于s…"}, {"id": "6994088897118470180", "title": "【vue】diff算法", "desc": "当组件创建和更新时，vue均会执行内部的update函数，该函数在内部使用render函数生成虚拟dom树，组件会指向新树，然后vue将新旧两树进行对比，找到差异点，最终更新到真实dom。 对比差异的"}, {"id": "6998328786869567519", "title": "element plus 配合 sass 进行主题切换", "desc": "先说说element自带的主题切换 这个功能主要是进行主题按钮配色切换，直接官网引入进行了 第一步引入 配置颜色变量 效果 就是这个样子 再说说自定义颜色切换 需求肯定不是这样，我们要求的是是两套主题"}, {"id": "6972435038189125640", "title": "Vue3 源码解析（七）：依赖收集与副作用函数", "desc": "在上一篇文章《响应式原理与 reactive》中由于篇幅限制笔者留下了两个小悬念 track 依赖收集处理器与 trigger 派发更新处理器没有细致讲解，而在本篇文章中笔者会带着大家一起来学习"}, {"id": "6844904022067904525", "title": "Vue合理配置axios并在项目中进行实际应用😀", "desc": "本文讲解下axios在项目中的一些封装与应用，欢迎各位感兴趣的开发者阅读本文。 接下来回到本文的重点，如何去合理的配置它以提高开发效率以及可维护性。 封装好的axios配置代码如下，将下述代码放进axios.js文件中。 完成上述步骤后，axios的核心配置就完成了，我们来看看…"}, {"id": "6844904078053474312", "title": "基于Vue的跨移动端和PC端适应", "desc": "开发一个平台，要求在PC端和移动端上都有较好的体验。 一套资源，根据判断是否是移动设备而选择加载不同的css。 两套资源，pc和mobile各一套，分开维护，在入口处进入不同的路由。 1.前者适用于两端交互和布局差别不大，交互比较简单的项目。只有一套资源，代码量少，维护起来比较…"}, {"id": "6964647241864724511", "title": "如何在vue项目中，跨页面（跨路由）使用新手引导工具 Intro.js", "desc": "vue+Intro.js实现跨路由新手引导。我写的大多数都是思路，直接粘贴的话或许达咩达咩哈，因为有个axios的细节是没贴的，贴的话太多太杂太麻烦了。"}, {"id": "6864108861290627080", "title": "带你搞懂Vue虚拟Dom和diff算法", "desc": "使用过Vue和React的小伙伴肯定对虚拟Dom和diff算法很熟悉，它扮演着很重要的角色。由于小编接触Vue比较多，React只是浅学，所以本篇主要针对Vue来展开介绍，带你一步一步搞懂它。 虚拟DOM（Virtual Dom），也就是我们常说的虚拟节点，是用JS对象来模拟真…"}, {"id": "6844903981311852558", "title": "基于uni-app多平台管理系统模板uniapp-admin", "desc": "uniapp-admin是基于uni-app开发的管理系统模板。该模板集成了如下的功能： 如果有欠缺的地方，或者有更好的想法，大家可以多多交流，文章最后可以加我。 在manifest.json源码视图中，修改h5部分，添加端口port和代理proxy。 rewrite ^/ua…"}, {"id": "6844904196790190088", "title": "手摸手带你理解Vue响应式原理", "desc": "响应式原理作为 Vue 的核心，使用数据劫持实现数据驱动视图。在面试中是经常考查的知识点，也是面试加分项。 文章稍长，但部分是代码，还请耐心观看。为了方便理解原理，文中的代码会进行简化，如果可以请对照源码学习。 在响应式原理中，Observe、Dep、Watcher 这三个类是…"}, {"id": "6844903700280901645", "title": "megalo -- 网易考拉小程序解决方案", "desc": "megalo 是基于 Vue 的小程序框架（没错，又是基于 Vue 的小程序框架），但是它不仅仅支持微信小程序，还支持支付宝小程序，同时还支持在开发时使用更多 Vue 的特性。 对于用户而言，小程序能提供更好的体验，但对于开发者而言，要让一个应用跑在多个平台上，则需要写多套代码…"}, {"id": "6982734172271935495", "title": "1x4 精读Vue官方文档 - 动态组件 & 异步组件", "desc": "精读 Vue 官方文档系列 🎉 keep-alive <keep-alive> 元素可以缓存组件的状态，避免组件重新渲染。使用时可以与普通组件或 <component> 动态组件一同使用。 <keep"}, {"id": "6916276304258007053", "title": "探索 Vue.js 响应式原理", "desc": "从字面意思可以看出，具有“响应式”特征的事物会根据条件变化，使得目标自动作出对应变化。比如在“响应式布局”中，页面根据不同设备尺寸自动显示不同样式。 Vue.js 中的响应式也是一样，当数据发生变化后，使用到该数据的视图也会相应进行自动更新。 现在有个很简单的需求，点击页面中 …"}, {"id": "6844903597759528973", "title": "入口文件开始，分析Vue源码实现", "desc": "网上现有的Vue源码解析文章一搜一大批，但是为什么我还要去做这样的事情呢？因为觉得纸上得来终觉浅，绝知此事要躬行。 然后平时的项目也主要是Vue，在使用Vue的过程中，也对其一些约定产生了一些疑问，可能官网上只会建议你这么做，但是核心实现我们可能并不知道。比如： ... 其次，…"}, {"id": "6994410716606234637", "title": "瀑布流的原理以及实现", "desc": "瀑布流，又称瀑布流式布局。是比较流行的一种网站页面布局，视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部。"}, {"id": "6995540422277726244", "title": "在局域网下通过ip地址访问vue本地项目", "desc": "大家好哇，今天我们来谈谈在局域网下通过ip地址访问vue本地项目相关的问题。另外提前说明哦，这是一篇基础类的文章，比较适合小小白阅读，因为文章内容来源于我刚入行时的笔记。各位高人请绕道，谢谢~"}, {"id": "6997657409426554894", "title": "vue常用基本指令和修饰符(面试题)", "desc": "vue常用基本指令有哪些 v-if：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。 v-show：根据表达式之真假值，切换元素的 display CSS 属性。 "}, {"id": "6844904163839590408", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（九）：使用 Authing 打造拥有微信登录、Github登录的企业级的用户系统", "desc": "在之前的迷你电商应用中，我们的网站缺少了一个关键组成部分：用户鉴权系统，包括登录、注册、以及权限管理等相应的配置。徒手实现这些功能固然可行，但是对于一支崇尚精益的团队来说，选择可靠的身份认证服务（IDaaS）是更加明智的选择，不仅能够提供完善且丰富的身份认证和用户鉴权功能，还确…"}, {"id": "6999652950964453406", "title": "vue3前端青铜到黄金王者 - 第9个入门computed使用", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 v computed是什么？ 计算属性防范。 当我们计算一个属性并且显示它的时候, 最简单的做法就是用computed。 代码如下： 其他"}, {"id": "6997209660243574797", "title": "Vue3学习笔记-组件", "desc": "Vue3 组件 组件（Component）是 Vue.js 最强大的功能之一。 组件可以扩展 HTML 元素，封装可重用的代码。 组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应"}, {"id": "6993855527901986823", "title": "11x1 精读Vue官方文档 - CookBook - 表单校验 & 创建一个CMS 博客。", "desc": "精读 Vue 官方文档系列 🎉 表单校验 提供一份简单的手动表单校验思路： v-model 结合响应式数据，最终对这个响应式变量进行校验判断。 v-model 结合一个带有 setter/getter"}, {"id": "6844904144667574286", "title": "vue3.0尝鲜，写一个win10日历", "desc": "工欲善其事，必先起脚手架，好在有@vue/cli的支持，搭项目变得非常简单。 需求很清晰，抄。 抄之前得先研究抄的对象。 仔细操作后，可以发现日历的头部共有三个可操作区域。 年/月部分点击可以切换视图，分别是日历表，月份表，年份表，层层递进。 上下两个箭头在不同视图下作用不同，…"}, {"id": "7004359568646111263", "title": "Vue3 框架原理学习实现（一）-reactive 相关API实现", "desc": "在B站学习vue3 mini-vue实现的学习记录。 视频地址从零开发写个mini-vue 1. Vue3 reactive 的API 相关实现 首先来看Vue3 reactive 的用法 和 作用 "}, {"id": "6981329984811958280", "title": "vue-cli中配置使用Vuex", "desc": "在vue开发用我们常常会用到一些全局的数据，比如用户信息、用户权限、一些状态等等。我们传统的数据都是单向的，所以我们得一层一层的传递，这样我们遇到一个多组件共享一个数据的时候，vuex是个不错选择。"}, {"id": "6844904149461499912", "title": "vue3.0实战电商系统：高解耦式mock 订单列表查询（第四天）", "desc": "任何事情都需要时间的沉淀，技术也不例外，今天编写Vue3.0系列的章节文章，只是希望能够比别人更早的去尝鲜一些新的技术，毕竟Vue3.0已经Beta版本了，所以里正式版本也不远了，提前去学习和了解，我们就会比别人有更多的时间去充分理解Vue3.0的特性，只有当你真正理解一门技术…"}, {"id": "6856213306920468493", "title": "从0开始，手把手带你打造自己的UI库(附文档)", "desc": "​ 本篇文章是为了锻炼自己的技术能力还有底子，模仿element-ui进行开发的UI库。 纯属学习使用。本文利用Vue-Cli4进行构建。css预编译器用的sass 可能会挂掉。因为是直接npm run docs:dev 一旦关闭就不能登陆了。 说一下文档。进去会有点慢。 服务…"}, {"id": "6954367575195123726", "title": "OFD文件预览组件", "desc": "OFD（Open Fixed-layout Documents的简称，意为开放版式文件）版式文档是版面呈现效果高度精确固定的电子文件，其呈现与设备无关。 用ofd.js实现了ofd文件的预览功能。"}, {"id": "6844903912097464334", "title": "『前端工程』—— Vue CLI3搭建项目实战操作", "desc": "安装完成后，输入命令vue --version，查看Vue CLI的版本号是否是3.0以上，是代表安装成功。 因为在Vue CLI2中使用npm run dev命令启动项目。 使用npm install安装依赖，安装成功后，执行npm run dev,执行成功后在浏览器打开 h…"}, {"id": "6999205455411019789", "title": "Vue 中的数据代理", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 1.什么是数据代理 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写） 当你把一个普通的 JavaScript 对象传入 Vue"}, {"id": "6995583554029617165", "title": "Vue中 computed 和 watch 区别及应用场景详解", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 在 vue 的项目中，我们时常会需要对 data 的改变做出处理，这时候就需要用到 watch 和 computed 这两个属性。既然都是"}, {"id": "6844903681096155143", "title": "Vue+Koa+Mongodb 小练习", "desc": "前段时间用vue+koa+mongodb搭建了一个个人博客，因为是第一次写前后交互，发现有很多地方不是特别的完善，同时代码对于新学者来说可读性也不是很大。所以这个小练习，从一个简单的方面入手，希望能给踩过同样多坑的同路人一点启发。 在我今年年初在学习vue以及koa的时候，网上…"}, {"id": "6844903911690600461", "title": "少年，撸猫吗", "desc": "承蒙各位厚爱，css-tricks 已有 1284 star，在广大同行浏览的过程中，听到的最多的声音其实不是这个部分咋写的，这个实现有什么问题，而是……这个猫咋弄的，总让我认为大家只是为了撸猫才点了 star（平均日活 70 左右让我更加怀疑）。 于是乎，决定把 cat 这个…"}, {"id": "6924609446060490760", "title": "基于vue3直播/小视频实例|Vue3.x仿抖音界面", "desc": "2020年快手获得了春晚冠名合作，今年则是抖音成为春晚独家红包互动合作伙伴。春晚的赞助商已逐步由传统行业转向互联网企业。社交短视频、直播已经成为很多新一代人的互动交流方式，随着5G技术的日趋成熟，不久"}, {"id": "6969597821280321550", "title": "手把手教你玩转render函数「组件封装-dynamic-checkbox」", "desc": "对于动态请求的文件，我们可以使用`import()`，所以我们需要去改动一下render函数那块，这里也有一个点需要注意，render函数中不能去写任何异步操作"}, {"id": "6844904145267195917", "title": "动态路由前端控制还是后端控制？（附代码）", "desc": "关于后台管理系统的路由，想花一点时间，彻底的整理一份实现动态路由的点点滴滴。 首先声明，这篇文章是基于花裤衩大神的《手摸手，带你用vue撸后台》，在他项目的基础上，帮助想要实现动态路由的小伙伴，来写的一篇使用笔记。 我们在开发后台管理系统的过程中，会有不同的人来操作系统，有ad…"}, {"id": "6984958354825150500", "title": "10分钟实现Vue简易拖拽排序", "desc": "背景 @TOC 第一步是MDN拖拽方法总结,若无兴趣可以略过。 本着做什么功能都尽量不导入包的思维, 我放弃了使用vue的插件(需要导入的包太大,冗余代码太多) 转而选择使用H5原生来实现这个功能 一"}, {"id": "6844904196169269255", "title": "秒杀支付宝云凤蝶，终极的移动端搭建系统可能是这样的", "desc": "咱们先来看一个页面：页面地址。这个页面的搭建上线，我只花了5分钟。当然这是因为我不需要考虑任何设计和业务，只是想把功能展示给大家看，但我相信这应该能初步让大家看到我们系统的强大。如果要看线上页面可以看这里：619大促 需要注意，这个页面的每个TAB下面展示的内容是不同的，同时第…"}, {"id": "6876988236472778765", "title": "基于uniapp的掘金app", "desc": "原本使用kotlin+jetpack编写了一版掘金app，但由于第一次写android应用很多知识不熟悉并且还有工作原因，断断续续还差很多功能未完成，后来掘金更新了后台，数据结构和接口改变很多，遂决定用uniapp先写一版（正在编写，功能陆续更新），安卓原生版待定。 使用uni…"}, {"id": "6908897055599509512", "title": "记一次真实的Webpack优化经历", "desc": "公司目前现有的一款产品是使用vue v2.0框架实现的，配套的打包工具为webpack v3.0。整个项目大概有80多个vue文件，也算不上什么大型项目。 只不过每次头疼的就是打包所耗费的时间平均在一分钟左右，而且打包后有几个文件显示为【big】，也就是文件体积过大。 最近就想…"}, {"id": "6844903682698379277", "title": "原来vue的slot可以这么玩转", "desc": "“下拉加载更多”的场景在移动端相对来说出现得比较多。我们知道下拉触底都要监听触底事件，触底的操作也相同（去后台拉取数据），分页算法也相同，因此我们会想到把它做成一个组件，重用这些相同的地方，让其他地方可以共用这个组件，从而减少代码量。 然而，下拉loading并不是一个可以完全…"}, {"id": "6899602713860898830", "title": "快速、简洁讲明Vue中v-for循环key的作用", "desc": "关于v-for中的key问题，其实这已经是个很常见的问题了，基本网上一搜一大把，面试的时候也常常会被问到，讲这个问题可能会设计DOM与虚拟DOM，还有很重要的Diff算法。传送门 我们都知道，Vue很大的一个特点就是双向数据绑定，数据一旦改变，那么页面就渲染新的数据呈现在页面上…"}, {"id": "6844904038668959758", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（三）", "desc": "这篇文章中，我们将讲解 Vue 实例的 Props 和 Methods，接着我们又讲解了最常见的 Vue 模板语法，并通过实例的方式将这些模板语法都实践了一番，最后我们讲解了 Vue 组件的组合，并完成了我们的发表商品页面。 当我们完成了商城应用的基本页面框架之后，我们就可以开…"}, {"id": "6844904169967468551", "title": "关于复制 word 图文到富文本中的问题", "desc": "事情的经过是这样的：👉我们有一个考试系统，里面有个录题的功能（就是在富文本中编辑），很多情况下，我们还会有一份现成的 word 文档（就是一些题目），这样一来我们就可以从 word 中复制题目到富文本中，题目就算录入完成了。但是问题来了，如果我是图文一起复制的（图文分开是可以…"}, {"id": "6997950574561853453", "title": "Vue3学习笔记-样式绑定及事件处理", "desc": "Vue3 样式绑定 Vue.js class class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。 v-bind 在处理 class 和"}, {"id": "6844903620689788936", "title": "在Vue中使用JSX的正确姿势(有福利)", "desc": "vue-antd-ui开源了一段时间后，收到了一些反馈，尤其是Form组件上线后，很多用户对JSX的使用感到迷惑和不习惯，为此专门介绍下Vue JSX的使用姿势及注意事项。 Vue 推荐在绝大多数情况下使用template来创建你的HTML。然而在一些场景中，你真的需要 Jav…"}, {"id": "6970719479978278943", "title": "Vue实现自定义指令（directive）及应用场景", "desc": "这是我参与更文挑战的第 2 天，活动详情查看 ：更文挑战 1.1 钩子函数 一个指令定义对象可以提供如下几个钩子函数 (均为可选)： bind 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一"}, {"id": "6844903903897583624", "title": "Vue，React，微信小程序，快应用，TS 和 Koa 一把梭", "desc": "3. react 篇 大家有没想过这个问题,原因是JS是弱类型编程语言,也就是申明变量类型可以任意变换。所以这个时候TS出现了。 TS 是 JS 的超集，也相当于预处理器,本文通过一个template项目来让你快速上手TS。 7. koa 篇 node.js的出现前端已经可以用…"}, {"id": "6844904053344829453", "title": "vue中的key", "desc": "目标：通过面试题来让自己的知识面更加广，更加深入。 key会用在虚拟DOM算法（diff算法）中，用来辨别新旧节点。 不带key的时候会最大限度减少元素的变动，尽可能用相同元素。（就地复用） 带key的时候，会基于相同的key来进行排列。（相同的复用） 上面这么4点就是官方文档…"}, {"id": "6844903834641235982", "title": "Vue+Express实现登录状态权限控制", "desc": "对Vue全家桶有基本的认知. 本篇只是介绍登录状态的权限验证,以及登录,注销的前后端http交互.前端布局,后端密码验证等以后有时间再对这些内容进行补充. 如果返回结果为true,登录状态,就可以进行访问敏感接口了. 如果返回结果为true,登录状态,就可以进行页面跳转了."}, {"id": "6844903830639869966", "title": "Vue-CLI and Leaflet (1)：显示一个地图", "desc": "本文将讲述在 Vue.js 的工程中结合 leaflet.js 开发地图相关的功能。要求读者具备一定的 Vuejs 与 leafletjs背景知识。在 Vue.js 中使用 Leaflet 在这个主题下，我将会把自己在实际工作中所学习收获到开发经验分享给读者，总结归纳出常见的地…"}, {"id": "6844903873363214343", "title": "vue+elementUI 复杂表单的验证、数据提交方案", "desc": "在我尝试加入一种新的表单类型时，我发现我已经无。从。下。手。 1. 子组件 所有的子组件中都需要包含两个方法validate、getData供父组件调用。 2. 父组件 使用策略模式存储并获取子表单的ref(用于获取子表单的方法)和提交函数 。省略了大量的if-else判断。"}, {"id": "6856011196224126989", "title": "一文看懂 Vue 3 到底有什么不同", "desc": "上个月 18 号，尤雨溪大大在知乎官宣：Vue 3 正式进入 RC 阶段。所谓 RC 阶段，就是 Release Candidate，代表 Vue 3 已经已经做好了发布的准备，这段时间会集中做一些准备性的工作，比如写写文档、写写注释以及改改 bug 什么的，不会再加入新的 f…"}, {"id": "6844903869428793351", "title": "5种处理Vue异常的方法", "desc": "去年一整年，我都在使用最爱的—Vue.js— 来做项目。最近突然意识到，我竟然从来没有认真去处理异常。我可以自恋地说：\"我写的代码是完美的，没有BUG。\" 我相信大家都明白这是迷之自信。最近，我花了不少时间研究了Vue中处理异常的各种技巧，在此想把我学到的分享给大家。 为了测试…"}, {"id": "6910030883123068936", "title": "turn-lucky翻牌抽奖", "desc": "前段时间公司需要搞个抽奖活动，按照产品要求就写了个翻牌抽奖。最近抽空封装成翻牌抽奖的插件turn-lucky"}, {"id": "6992424515192127496", "title": "Vue组件之路 - 万能的轮播图", "desc": "Vue组件之路-轮播图组件 众所周知，轮播图最为我大前端最最常见的组件之一，应该说每个前端工程师都要会写一遍吧。正好这两天在家休息，便在家写了这个组件。废话少说，本人的轮播图特点如下： 常规左右滑动切"}, {"id": "6995361078125264909", "title": "vue axios渲染不出页面------数组更新检测", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：“8月更文挑战“ 有时候在vue里使用axios，然后使用数据变量来存放获取的数据，但明明函数是放在mounted里，但是在页面还是渲染不出来。 这里看一"}, {"id": "6984691596415467527", "title": "VUE 状态变化", "desc": "vue 2.0状态变化 状态通过 Object.defineProperty()方法转化为get/set 形式来追踪变化"}, {"id": "6904595258915422215", "title": "前端玩转位运算(N皇后+Vue3位运算应用)", "desc": "其实很简单，小学数学题难度，花几分钟看完如果看懂了请点个赞呗。 二进制左移一位，就是将数字翻倍。 二进制 110101 向左移一位，就是在末尾添加一位 0，也就是 1101010。(此处讨论的是数字没有溢出的情况) 二进制右移一位，就是将数字除以 2 并求整数商。 二进制 11…"}, {"id": "6902218175820070919", "title": "Vue 2.x手摸手实现页面缓存", "desc": "学如逆水行舟，不进则退。 话不多说，进入正题。 用Vue也有一段时间了，加上最近做的项目里面涉及了很多组件，所幸多花点时间整理整理，方便回顾和下次使用。本文实用的是Vue 2.x版本，后面时机成熟再更新Vue 3版本的封装。 组件地址：github。 准备几个页面并配置路由，大…"}, {"id": "6989534745394675742", "title": "Vue.js基础进阶语法", "desc": "自定义指令 指令是用于简化DOM操作，相当于对基础DOM操作的一种封装。当我们希望使用一些内置指令不具备的DOM功能时，可以进行自定义指令设置。"}, {"id": "6982132525741113352", "title": "1x2 精读Vue官方文档 - 自定义事件", "desc": "精读 Vue 官方文档系列 🎉 事件名 ”事件“与”组件“或”Prop“不同，它不存在大小写转换的问题，事件的监听与触发都是基于事件名的全匹配。但我们仍然推荐使用 kebab-case 风格为事件命名"}, {"id": "6933089780389380110", "title": "Vue SEO的四种方案", "desc": "众所周知，Vue SPA单页面应用对SEO不友好，当然也有相应的解决方案，通过查找资料，大概有以下4种方法。（本人只用过第一，第三种方案） 关于服务器渲染：Vue官网介绍 ，对Vue版本有要求，对服务器也有一定要求，需要支持nodejs环境。 高流量的情况下，请准备相应的服务器…"}, {"id": "6911575117688471559", "title": "Vite 中文文档翻译", "desc": "欢迎到原文地址阅读体验更好：https://vite-design.surge.sh/包含源码解析的完整章节目录：https://github.com/zhangyuang/vite-design 求"}, {"id": "6992194951492665374", "title": "Vue 3 基础", "desc": "这是我在学习 Vue 3 时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "6997370434061205540", "title": "对比vue2和vue3的响应式原理", "desc": "通过手撕简易响应式原理，来认识vue2和vue3怎么实现响应式数据的，以及它们的优缺点。放在一起对比了解差异"}, {"id": "6844904202624303118", "title": "Vue全新技术栈重构黄老师饿了么商家应用总结", "desc": "自从学习了Vue后，能用Vue解决的场景用例最终我都尽可能的用Vue去实现。单纯的用例需求并没有完整的项目开发流程，从中能学到的东西也是有限的。在这之前除了使用Vue做过vue-music的移动端音乐播放器项目和vue-bytedanceJob（重构某独角兽互联网公司官方招聘网…"}, {"id": "6994458593659453454", "title": "对Vue.nextTick的理解", "desc": "概览 用法： 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 DOM 更新循环是指什么？ 下次更新循环是什么时候？ 修改数据之后使用，是加快了数据"}, {"id": "6966471652716576799", "title": "Composition API详解", "desc": "LifeCycle Hooks 在新版的生命周期函数，可以按需导入到组件中，且只能在setup()函数中使用. 生命周期2.x与Composition之间的映射关系..."}, {"id": "6982447036754821157", "title": "使用 jQuery 实现鼠标悬停显示隐藏内容的 vue 自定义指令", "desc": "使用 jQuery 实现鼠标悬停显示隐藏内容的 vue 自定义指令 v-overflow 并自定义样式"}, {"id": "6844903719335624711", "title": "《从零构建前后分离的web项目》：前端完善 - 手把手教你快速构建网站布局", "desc": "本文为方便讲述重构去除了 Element、vux 库，用了最近比较火的 bulma 轻量、快捷、易读。 首先，似上图，我们思考把一个小型网站拆成三部分：页头(Header)、内容(Content)、页脚(Footer) 这几乎每个网站内都必须有的，通常把万年不变的：页头(Hea…"}, {"id": "6979895741187620901", "title": "学习Vue3.0 Api", "desc": "此时学习应不是太晚 看大佬视频学习Vue3.0 附一个链接 某Bup 自带倍速，句句重点，幽默诙谐。"}, {"id": "6997202099771555853", "title": "No.17 vue-element-admin 学习使用（十二）引入外部模块，构建和发布", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 有时候需要引入新的外部组件，如果用的是npm的话可以 我用的是yarn，那就 然后需要注册一下这个外部组件，可以全局注册或者局部注册， 全"}, {"id": "6844903760494329869", "title": "Vue 系列一 之 Vue 基础", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 推荐通过 …"}, {"id": "6844903609822363661", "title": "Event Loop是个什么玩意：从 Vue 的 nextTick 说起", "desc": "熟悉 Vue 的同学们都知道，Vue 有个 nextTick 方法，用来异步更新数据。 看起来似乎一切正常，我们在给数组添加了一条数据之后，页面也确实对应的更新了。可是，当我们在打印这个 ul 元素里 li 的 length 时，问题出现了： 这时候如果我们有需求需要通过 li…"}, {"id": "6931286420040450061", "title": "[vue3 vs vue2] slot 用法详解 ", "desc": "通过对比 vue3 和 vue2 的语法的异同加以练习来学习vue3。来看下 slot 的在 2.x和 3.x的用法。 在 2.x 中主要掌握这两个的用法。 slot name 具名slot，这样我们可以指定多个 slot，并任意排列位置,实现布局需求。 与 $slots 的区…"}, {"id": "6844903687232421902", "title": "基于vue-cli3.0构建功能完善的前端架子", "desc": "vue-cli3 最大的特点就是零配置，脚手架把webpack相关的配置都隐藏在@vue\\preload-webpack-plugin中，默认的配置可以满足大部分应用场景，优点是我们可以节省很多折腾配置的时间，webpack对于新手来说，还是有点门槛的，这样一来，新人上手可以更…"}, {"id": "6844903708786950157", "title": "前端 H5 横屏 独特处理方案详解", "desc": "随着公司知识付费业务的发展，产品发现横屏展示内容的效果和体验都要比竖屏要来的好。我也感觉确实是这样的～。刚接到这个需求的时候，稍微想了一下，横屏这还不简单直接把整个页面旋转90度，不就完事了？结果真正开发的过程中发现并没有这么简单。比如屏幕横过来手势滑动的方向没有变过来等等！于…"}, {"id": "6844903823194980360", "title": "Vue 中 render 函数有点意思", "desc": "我们知道 Vue 模板是非常强大的，基本可以完成我们日常开发的所有任务。但是，有一些用例，如基于输入或插槽值创建动态组件方式，render 函数会比模板完成的更好也更出色。 用过 React 开发的人对 render 函数应该非常熟悉，因为React组件通过 JSX和 rend…"}, {"id": "6844903640939888653", "title": "Vue会了吗？来认识一下React吧(上)", "desc": "React作为Facebook 内部开发 Instagram 的项目中，是一个用来构建用户界面的优秀 JS 库，于 2013 年 5 月开源。作为前端的三大框架之一，React的应用可以说是非常的广泛，包括BAT在内的许多大公司很多项目都是基于其开发的。 Vue：除了VDom之…"}, {"id": "6990745429683994632", "title": "前端面试每日 3+1 —— 第836天", "desc": "今天的知识点 (2021.07.30) —— 第836天 (我也要出题) [html] 使用HTML5绘制一道闪电 [css] 使用CSS3实现柱状图效果 [js] 使用js写个方法截取视频的第一帧 "}, {"id": "6844904147376930824", "title": "Vue3 + Vuex4 构建点餐页面", "desc": "距离Vue3.0 beta 发布已经过了半个多月了。本来这个东西上个月就应该写了，由于公司上个月赶项目一直没时间。趁着劳动节把这个东西写了一下，也顺便把一些坑过了一下。"}, {"id": "6956134943692947464", "title": "vue+diff+最全讲解", "desc": "前言 我们都知道，浏览器的DOM操作是十分昂贵、十分浪费性能的！ Vue通过虚拟DOM的方式优化了这部分性能浪费，它的核心原理是通过diff算法对比新老节点之间的差异，判断哪些节点可以复用，减少DOM"}, {"id": "6971805543077773326", "title": "Vue3实现一个自定义右键菜单插件", "desc": "使用Vue3实现自定义鼠标右键菜单，支持二级菜单、自定义样式、回调函数等功能，同时提供封装成Vue指令调用，兼容移动端长按唤出菜单。"}, {"id": "6844903921408802829", "title": "Vue原理解析（八）：一起搞明白令人头疼的diff算法", "desc": "之前章节介绍了VNode如何生成真实Dom，这只是patch内首次渲染做的事，完成了一小部分功能而已，而它做的最重要的事情是当响应式触发时，让页面的重新渲染这一过程能高效完成。其实页面的重新渲染完全可以使用新生成的Dom去整个替换掉旧的Dom，然而这么做比较低效，所以就借助接下…"}, {"id": "6896857619823067143", "title": "VueJs之组件通信总结", "desc": "组件通信1.组件间通信propsprops属性子组件声明接收有三种写法props用于父子之间传递函数数据,非函数数据,传递非函数数据是父给子传递,传递函数数据本质是子给父传递props的特殊用法,在r"}, {"id": "6844904120587911175", "title": "Vue2.x（含组件）主流程源码笔记（五）：beforeMount 阶段", "desc": "该句执行完后，_init 方法（位置在 src/core/instance/init.js）执行结束。 判断是否有 $options.el，如果有就直接执行：vm.$mount(vm.$options.el)。在前面已经提到 $mount 方法与平台相关，所以在本例会执行 en…"}, {"id": "6916134578176884743", "title": "Vue3.0响应式系统原理", "desc": "Proxy 与 Reflect 是 ES6 为了操作对象引入的 API 。更多关于Proxy和Reflect的内容 9. toRefs"}, {"id": "6844904065600618510", "title": "Vue框架中的基础语法和组件", "desc": "TODOList：输入框中输入一段文字，点击提交按钮后提交至下方无序列表。 这时，在输入框中输入的字符（数据），也会响应到实例中data.inputVal的数据。 model层用于存储数据（js），view层用于显示数据（html，css）。 将页面切分多个部分，每个部分可以称…"}, {"id": "6844903923141066759", "title": "Vue源码之Vue实例初始化", "desc": "重点说一下 new Vue()后的初始化阶段，也就是created之前发生了什么。 在 Vue 中，我们经常会用到 props 、methods 、 watch 、computed 、data 。这些状态在使用前都需要初始化。而初始化的过程正是在 initState 阶段完成。…"}, {"id": "6943479404462866462", "title": "NodeJS实现一个聊天室", "desc": "看效果前文客户端代码服务端代码服务跑起来安装node初始化package.js安装nodemon安装socket.先说一下为什么写这个东西，最近不是在写NodeJS知识点的梳理嘛，但是我发现梳理的过程着实无聊的要死，虽然已经快梳理一半了，只是还没发布，这个不重要，重要的是不做点什..."}, {"id": "6909599367410221070", "title": "vue 精简教程（二 ）常用指令用法  更新超长版本   一次看个过瘾好吧", "desc": "前言一、vue常用指令+事件+样式？1、v-for这个我们已经说过了，需要注意的是，需要加:key=\"data.id\"2、v-ifv-showv-if如果是false会直接删除v-show不会删除只会"}, {"id": "6948032551717961765", "title": "源码阅读vue-router", "desc": "在vue项目中使用路由时，需要通过Vue.use(VueRouter)注册路由。 在这里定义了Vue.use。 在vue/src/shared/util.js中，找到toArray方法，用于将一个类数组对象转换成数组。 在vue-router源码vue-router/src/i…"}, {"id": "6844903886235369480", "title": "Spring+Vue整合UEditor富文本实现图片附件上传", "desc": "1. 解压完整源码，拷贝jsp目录下的java源码，到spring mvc后端 2. 配置config.json 3. 项目常量配置文件 4. 编写工具类UploadUtil.java 5. 编写Controller类UeditorController.java，为前端提供上传…"}, {"id": "6844903509050015758", "title": "Vue.js SSR Step by Step (2) - 一个简单的同构DEMO", "desc": "上一篇文章中介绍了如何从零开始搭建一个简单的 client-only webpack 配置。 接下来我们在前面代码的基础上写一个简单的前后端同构的DEMO。 改写 app.js 把里面创建 Vue 实例的部分改写一个工厂函数，用于创建返回 Vue 实例。 因为服务器渲染的配置和…"}, {"id": "6936836869053218829", "title": "vue中provide和inject 用法", "desc": "使用方法：provide在父组件中返回要传给下级的数据，inject在需要使用这个数据的子辈组件或者孙辈等下级组件中注入数据。 使用场景：由于vue有$parent属性可以让子组件访问父组件。但孙组件想要访问祖先组件就比较困难。通过provide/inject可以轻松实现跨级访…"}, {"id": "6844903966409490440", "title": "Vue学习精华", "desc": "Vue学习精华，你想要的都在这里"}, {"id": "6844904036039131150", "title": "阅读Vue源码（一）响应式原理", "desc": "vue的响应式原理，是发布-订阅模式的应用。学习vue响应式原理前，先来了解下，到底什么是发布-订阅模式。 有一天去商城买鞋子，结果没货了。店员拿出一个本对你说，可以先登记电话，到货再通知你。 这个例子中，店员是消息的发布者，店员有个小本本，只要货到了，就会通知小本本上的客户。…"}, {"id": "6936470383868510245", "title": "从原理上大致带你看看vue3更新了哪些常用功能", "desc": "在这篇博文中,我们将要聊聊如下几个内容:vite脚手架的原理(对比webpack)vue3在性能上的进一步突破(如:静态提升,预字符串化,patchflag等)vue3在组件,API和数据代理上的新变"}, {"id": "6844903864865390600", "title": "使用Hook构建解耦的Vue.js应用程序", "desc": "业务代码和埋点相关的代码直接混在一起，这是最直接的实现方式，但也会带来一些问题，埋点代码分散在项目的各地方不利于维护，与业务代码混淆不利于阅读。 上面的代码可以将Hook对象添加到一个Hooks堆栈中，一旦调用runHooks（）就会触发它们。每个Hook都是一个具有条件和回调…"}, {"id": "6844903605728706568", "title": "react中使用swiper", "desc": "最近的react项目需要使用轮播图，自然而然的就想到了swiper，一直想通过npm安装的方式来使用，但是网上找了很多，资料很少，于是就暂时通过在index.html里直接引用swiper的js和css文件的方式来加载，下面来说一下具体的步骤和使用方法。 首先说一下我这里使用的…"}, {"id": "6844904196844568584", "title": "学习vue源码（17）再探生命周期之初始化实例属性及事件", "desc": "Vue.js生命周期可以分为4个阶段：初始化阶段、模板编译阶段、挂载阶段、卸载阶段。 在Vue.js实例上初始化一些属性、事件以及响应式数据，如props、methods、data、computed、watch、provide和inject等。 这一次，我们就来探究第一阶段：初…"}, {"id": "6844904200187412493", "title": "JS中的原型对象", "desc": "上面的代码中，通过向Vue.prototype中添加一个post方法，然后就可以在所有vue实例中使用该方法，就是个简单的实践。 如果prototype上还有 prototype，那么还会继续网上查找，直到原型链的最顶层。如果都没有查到，则会返回undefined。 有了这2个…"}, {"id": "6914835829605187591", "title": "Vue的两个版本", "desc": "非完整版：无compiler，不能将html变成节点。webpack通过vue-loader将html变成h('div',this.n)"}, {"id": "6936063560305328164", "title": "手撸手 完成网抑云音乐 开篇", "desc": "1项目使用vue完成此次的预编译器我使用的是scss2因为最近时间比较充足就打算写一写这个也利于提升自己3开篇先从换肤功能开始这个也是第一次做换肤功能的所以对于项目中有遇到或者正好私下想学的朋友或许有"}, {"id": "6989783496558379044", "title": "VUE3（二十八）页面加载完成后，使用onclick为动态添加的dom元素绑定点击事件", "desc": "博客做的比较早，那个时候还不知道有markdown编辑器这个玩意。 所以我的文章都是用ueditor编辑的。 我这里大概想做一个大图的自定义组件：需求是，点击文章中的图片，显示大图。 那么这里就有一个"}, {"id": "6974170285394100260", "title": "vue元素拖拽与序号编写协同修改排序", "desc": "这是我参与更文挑战的第16天，活动详情查看： 更文挑战 因运营人员需要排序某个产品列表，这里记录使用SortableJS实现元素排序的过程。 sortableJs官网 引入 package.json中"}, {"id": "6844903960562630670", "title": "Vue3响应式系统源码解析-Ref篇", "desc": "我们阅读源码的原因是什么？无非是1：学习；2：更好的使用这个库。如果只是想大致的了解下原理，倒不必花时间阅读源码，几句话，几张图就能搞清楚，网上搜搜应该就有很多。因此，阅读源码的过程一定是要对不明白的地方深入了解，肯定是很费时间的。 在这过程中，有些知识点，跟库本身可能没什么关…"}, {"id": "6992971849877422111", "title": "【Vue2.x 源码学习】第三十二篇 - diff算法-乱序比对", "desc": "【Vue2.x 源码学习】第三十二篇 - diff算法-乱序比对：介绍了乱序比对的方案；介绍了乱序比对的过程分析；实现了乱序比对的代码逻辑；"}, {"id": "6844903774209720328", "title": "[官方] Vue 2.6 发布了", "desc": "一年又一年，今年也要学起来！"}, {"id": "6954899278082867237", "title": "Vue3.0 reactivity 变成 React reactivity", "desc": "目录 背景 我的心路历程 实现 嵌入现有项目试验一下 存在风险 结束语 1. 背景 Vue.js 3.0 ，整个源码是通过 monorepo 的方式维护的，根据功能将不同的模块拆分到 packages"}, {"id": "6907456768222330893", "title": "vue中key的作用和工作原理", "desc": "key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新…"}, {"id": "6924105416653668366", "title": "『前端工程』—— git子模块和fs-extra的应用", "desc": "入职新公司，接手了一个项目，该项目是引用一个SDK做应用开发。由于应用中一些定制化功能要去修改SDK源码才能实现，但是这个SDK是由另一个部门开发，没有这个SDK的发布权限，只有SDK源码git仓库的pull权限。 于是把SDK源码编译打包生成的SDK文件拷贝到应用项目代码文件…"}, {"id": "6934614227571179534", "title": "你可能不知道国际化的那些事...", "desc": "如果您正需要做多国本地化，并且有做阿拉伯语复数的翻译时，这篇文章对您应该特别有用。 本文章主要结合vue去说国际化的事，说起国际化第一个想到的肯定是 i18n , 在vue中使用 vue-i18n 库来做国际化的事情，其他框架其实也是同样的道理。 在应用中，当应用处于某种语言环…"}, {"id": "6997205979364327437", "title": "「前端Vue学习系列」二、Vue基础篇", "desc": "这是我参与8月更文挑战的第7天 前言 Hi，大家好，我是希留。 上篇文章带大家认识了Vue，以及初始化了一个Vue工程的项目。今天继续介绍一下Vue的一些基础用法。 一、Vue项目的目录结构 使用开发"}, {"id": "6991437470931877902", "title": "Vue组件通信之ref｜8月更文挑战", "desc": "前言 都说开发前，都要好好思考整体的代码结构，每个模块的分工，内部的数据都要想好，才开始下键盘。而我呢也是这么干的，但总归还是年轻，导致自己的是屎山越来越复杂。不过从中也汲取了一些经验，也想到了一些骚"}, {"id": "6899689818583007245", "title": "vue3+ts+axios+Ant Design of Vue2配套使用踩坑", "desc": "vue3-ts-model 是一套集成 vue3、vue-routr、ts、Ant Design of Vue、axios的模板。 基于vuecli4搭建, 对axios实现简易封装， 对Ant Design of Vue实现按需加载。 每次搭建新的项目，都要重复安装路由、ui…"}, {"id": "6975407834317979685", "title": "vue中使用setInterval()循环定时器的注意事项", "desc": "问题描述 在我们做项目中，经常需要使用定时器做一些重复的任务，比如接口轮询更新数据等。本篇文章记录一下vue项目中使用定时器的一些注意事项。 注意事项 使用定时器的时候，主要是要注意使用定时器的以下情"}, {"id": "6985005980425666591", "title": "Vue模板语法", "desc": "1. 模板语法概述 1.1. 如何理解前端渲染？ 把数据填充到HTML标签中 1.2. 前端渲染方式 原生js拼接字符串 使用前端模板引擎 使用vue特有的模板语法 文档碎片 document.cre"}, {"id": "6844903811467706376", "title": "基于vue实现web端超大数据量表格", "desc": "最近工作比较忙好久没写文章了，有一丢丢不知道如何写起了，那就先说说我是为什么要开发本文的组件吧。公司有一个定位系统，基本上来说一个定位单位一分钟或者更短就会有一个定位点，这样一天下来就会有很多定位点了，如果表格想要一下子放一天甚至三天的数据，那么数据量将会特别大（可能会到达5万…"}, {"id": "6844903517488939021", "title": "我为什么从Redux迁移到了Mobx", "desc": "Redux是一个数据管理层，被广泛用于管理复杂应用的数据。但是实际使用中，Redux的表现差强人意，\b可以说是不好用。而同时，社区也出现了一些数据管理的方案，Mobx就是其中之一。 这是Redux给自己的定位，但是\b这其中存在很多问题。 首先，Redux做了什么？看Redux的…"}, {"id": "6982727094937583647", "title": "详细讲解vue中祖孙组件间的通信之使用$attrs和$listeners的方式", "desc": "问题描述 vuex 关于vuex，笔者之前写过一篇文章。链接附上：https://juejin.cn/post/6965504417764376612 vue实例bus事件 vue实例bus其实不仅仅"}, {"id": "6850037261728219144", "title": "Vue 3 新特性：在 Composition API 中使用 CSS Modules", "desc": "在 Vue 3 Composition API 最近的一次 beta 升级中，无论是 Vue 3 本 3 库 vue-next，还是面向 Vue 2 过渡用的 @vue/composition-api 库中，都同步更新了一个 useCSSModule 函数 -- 用来在使用了 …"}, {"id": "6844903590293684231", "title": "全面解析Vue.nextTick实现原理", "desc": "vue中有一个较为特殊的API，nextTick。根据官方文档的解释，它可以在DOM更新完毕之后执行一个回调，尽管MVVM框架并不推荐访问DOM，但有时候确实会有这样的需求，尤其是和第三方插件进行配合的时候，免不了要进行DOM操作。而nextTick就提供了一个桥梁，确保我们操作"}, {"id": "6996452695640899597", "title": "Vue实现点击按钮进行文件下载(后端Java)", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 最近项目中需要实现点击按钮下载文件的需求，前端用的vue，因为文件是各种类型的，比如图片、pdf、word之类的。这里后端是可以返回文件的地"}, {"id": "6974684297290580004", "title": "Vue cli3 打包build 区分测试环境和正式环境", "desc": "Vue cli3 打包build 区分测试环境和正式环境 第一种：主要是打包时，简单区分开发环境和发布环境 第二种:通过为 .env 文件增加后缀来设置某个模式下特有的环境变量"}, {"id": "6987710437651382280", "title": "vue3 nextTick 原理分析", "desc": "nextTick 的作用 官方的介绍是 在 vue 中数据发生变化后，dom 的更新是需要一定时间的，而我们在数据更新之后就立即去操作或者获取 dom 的话，其实还是操作和获取的未更新的 dom ，而"}, {"id": "6844903775392514055", "title": "【译】Vue 3.0 对 Web 开发意味着什么？", "desc": "去年11月，Vue的创建者Evan You向我们展示了Vue 3.0 —— 这是不断上升的Javascript框架的最新版本。这些优化使Vue更高效，更模块化且更易于使用。我将讨论这些变化以及我认为的他们将在Vue 3.0发布后对现有开发产生的影响。 用他们自己的话来说，Vue…"}, {"id": "6870313552381476878", "title": "vue+node.js手把手教你搭建一个直播平台（二） 搭建前端框架", "desc": "上一期，帅气的小羽给老铁们介绍了直播平台的项目的后端搭建，这期就让小羽带大家来搭建一下前端的框架。 毫无疑问，搭建一个项目的框架，那第一步肯定是得创建一个工程啦。cmd命令，输入vue create mylive ，然后一直回车就好了。然后等待一小会，我们的初始化工程就创建完成…"}, {"id": "6844904169212477448", "title": "vue3.0创建项目及API讲解（一）", "desc": "返回一个对象，则对象的属性将会被合并到组件模板的渲染上下文。 其他所有的引入函数都必须在其内部执行。 创建组件实例，然后初始化 props ，紧接着就调用setup 函数。从生命周期钩子的视角来看，它会在 beforeCreate 钩子之前被调用 接受一个参数值并返回一个响应式…"}, {"id": "6913183309304430606", "title": "2021年，重学Vue.js之基本语法篇", "desc": "4、正所谓温故而知新，虽然基础的东西可能看似简单，但是通过自己的想法输出出来，并且时长回顾，我认为还是会有意想不到的收获的。 基于以上几点，我决定还是写几篇结合Vue文档展开的一些文章，主要是要做到知识的梳理，形成一种体系，顺便打磨一下作文水平，何乐而不为呢～。 开始任何一段文…"}, {"id": "6987543820418154527", "title": "vue项目使用webpack-obfuscator进行代码加密混淆", "desc": "公司代码提供给第三方使用，为了不完全泄露源码，需要对给出的代码进行加密混淆，前端代码虽然无法做到完全加密混淆，但是通过使用webpack-obfuscator通过增加随机废代码段、字符编码转义"}, {"id": "6844903544693194760", "title": "vue vuex vue-router后台项目——权限路由（超详细简单版）", "desc": "此项目拿去 捋清楚 vue+vuex+vue-router 的关系是没问题的，这可以说的超级简单的版本，适合初学。可以配合相关的官方文档学习。上面的内容说的重点，其实也算是项目的全部啦"}, {"id": "6935295471741042701", "title": "一个 Vue3 的类 Umi 框架（基于 Vite）", "desc": "安装 convue. convue 提供了一套初始化项目的脚手架工具，目前支持 sfc (vue 单文件) 形式和 tsx 方式两种开发模式。 convue 采用约定式的目录形式，因此我们需要遵守这一套开发方式.往往在项目中要做到统一规范，提高效率，这是一种有效的措施。 如果需…"}, {"id": "6933781350474317831", "title": "前端初学者的第一个Vue后台管理项目总结3：根据路由生成菜单栏", "desc": "在上一篇文章，我们根据用户角色获取了路由，这一篇文章，我们就根据路由来生成菜单栏，这也是后台管理系统的一个必备功能。 这篇文章将会从路由设计以及递归组件两个方面进行讲解，希望能够对大家有所帮助。 1. 项目基础架构 2. 登录与权限控制 个人感觉这种写法的优点在于，每个路由对象…"}, {"id": "6844903507057704974", "title": "Vuex 源码解析", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6844904061930586125", "title": "如何在 Vue 中使用 JSX 以及使用它的原因", "desc": "Vue.js 具有简单的 API 和几个选项，可用于在我们的组件中定义HTML模板。 我们可以使用<template>标签选项，在根组件实例上定义template属性，或者使用单文件组件。 上面的选项很棒并且可以完美地工作，但是，在您的应用程序的生命周期中，有时会感到笨拙，设计…"}, {"id": "6985019322385055751", "title": "Vue之ref的使用", "desc": "1.基本用法，本页获取Dom元素节点 ref除了可以获取本页面的dom元素，还可以拿到 子组件中 的data 和 去调用子组件中的方法. 2.获取子组件的Data 3.父组件调用子组件中的方法 4.子"}, {"id": "6881581395068747790", "title": "vue2和vue3的v-if与v-for优先级对比学习", "desc": "Vue.js 中使用最多的两个指令就是 v-if 和 v-for，因此我们可能会想要同时使用它们。虽然官方不建议这样做，但有时确实是必须的，我们来了解下他们的工作方式： 在 vue 2.x 中，在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用。 在 v…"}, {"id": "6875253488017342478", "title": "Vue3为什么要使用Composition API", "desc": "| 导语 Composition API是Vue3的最大特点，也可以很明显看出他是受到React Hooks的启发。本文主要来讲讲Vue为什么要使用一个新的概念来组织代码。 首先来看看这个新的东西的出现，是为了解决Vue 2的什么问题。 目前看着还行，直到经过一个又一个迭代，例…"}, {"id": "6917548766287364110", "title": "我想，也许以后不用再烦恼Vue项目的代码格式化问题了", "desc": "先介绍下背景：最近，准备开始搞新的项目，是基于Vue的后台管理系统。 然后，在开发的时候，发现我的Vue代码中的模板部分总是按照属性自动换行，试了网上很多方式都搞不定，而我又难以接受这种样式，因此决心非给他整明白不可。 从我接手这台电脑的时候，我的vscode编辑器是已经安装了…"}, {"id": "6844903670652338183", "title": "Vuejs 配合 mint-ui 开发移动端web", "desc": "这是一个比较着急的事情（两天时间，写一个带视频播放、图片浏览、图文混排列表、上拉刷新、滚动刷新等等的单页），一开始同事使用传统H5+JS+CSS的方式，我担心进度，就硬着头皮上vuejs，为什么说硬着头皮上，原因是这是第二次在项目中使用vuejs，第一次使用的经历并不太好，主要…"}, {"id": "6844904168986001416", "title": "Vue3--Vue Composition API使用体验", "desc": "Vue3.0目前已经出了beta版本,并在github上进行了开源，叫做vue-next，本文将之前采用Vue2.6开发的todoList小项目改造成为Vue3.0编写，并介绍一下2.x和3.x之间写法的不同之处。 下面主要介绍一下采用Vue Composition API来改…"}, {"id": "7005150374910754846", "title": "vue(三) - 事件处理", "desc": "事件绑定 v-on 指令 用于进行元素的事件绑定。 Vue.js 还为 v-on 指令提供了简写方式: @click 设置函数 事件程序代码较多时，可以在 methods 中设置函数，并设置为事件处理"}, {"id": "6869244807844364295", "title": "【vue多页面】h5活动页我是这样整合的", "desc": "移动端h5经常遇到的情况就是，活动多，迭代快。但单页面的情况显然会不适用，主要体现在以下几个方面： 重复建立项目，手动😭添加，效率低。 1. 在pages下建立自己的页面 2. 项目启动和打包 3. nginx配合 nginx只需要配置个location的根目录即可。 构建的…"}, {"id": "6971438402285600776", "title": "Vue项目Webpack打包去掉console和debugger", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 耐心看下去，后面有采坑 一、前言 本文一共会使用两种插件进行打包的实例讲解。一个为 uglifyjs-webpack-plugin（比较久没有维护"}, {"id": "6844904191744278542", "title": "如何参加开源项目-如何给Vue3.0提PR", "desc": "欢迎大家加入一起共同学习进步。 最新消息和优秀文章我会第一时间推送的。 最近在学习Vue3.0源码，为了达到刻意练习的目的。决定给Vue3.0提点PR来验证自己的源码理解水平。经过两天的奋战添加了一个官方的todo test case。 以下我把大体的步骤总结一下。 这个需要随…"}, {"id": "6871161430830235662", "title": "🚩Vue源码——模板和数据如何渲染成最终的DOM", "desc": "面试中为什么会问Vue源码，很多人一般都这个疑问，Vue源码在平常工作中几乎很少使用到，而Vue的API在工作中经常用到。会用Vue的API不就可以满足工作岗位的需求。这岂不是面试造火箭，工作拧螺丝嘛。其实不是真正要问你Vue源码，只是借助Vue源码来考核你的JavaScrip…"}, {"id": "6993131249116119047", "title": "Vue3 响应式API-Refs", "desc": "什么是Refs Refs 是Vue3中核心方法，是响应式API的心脏。 官方也把此响应式API进行单独打包，即便不使用Vue3的情况下也可以独立使用：@vue/reactivity Refs有5个关键"}, {"id": "6985049129344827400", "title": "从基础到项目Vue2.0实战带你开发去哪网App——学习笔记", "desc": "第2章 课程介绍 2.1 课程学习方法 1.官方文档的阅读 2.Vue实例的练习 3.实战 2.2 hello world 1.Vue不支持IE8及以下的浏览器（支持所有兼容ECMAScript5的浏"}, {"id": "6844903621276991496", "title": "Vue 2.x折腾记 - (11)  @Vue/Cli 3.0.0 图形化项目管理,相当人性化", "desc": "后方多图,感兴趣的可以瞧瞧,不感兴趣的请止步,免得浪费你的时间,谢谢.. 其他不多说,今天只想演示下Web端UI初始化... 5.创建完毕会有一个管理后台...相当酷炫.. 6. 插件更新直观体验 7. 项目配置的可视化 想知道大概写起来是什么样的么.. 不过目前来说,用ts …"}, {"id": "6968259573144616968", "title": "vue3 diff原理", "desc": "前言 距离vue3版本的发布也过了将近一年多的时间了，vue3也开始趋近于稳定，本章将对vue3的diff算法做一个浅入的分析 React与Vue2的diff缺陷 react: 核心diff采用的是新"}, {"id": "6860290630435012621", "title": "vue3+Ts可视化开发的研究，实战拖拽基础，组件动态生成，远程加载组件", "desc": "废话声明：本项目非常基础，大神请勿喷。大家觉得有用就看看。没用就看过就行了。项目本身我是遇到一些问题的会进行分享提供，也会问一些问题，希望有大神能解答。本身项目的设想初衷是为了研究可视化编辑器，推荐开"}, {"id": "6965785753456476168", "title": "vue+element大型表单解决方案(4)--锚点组件(下)", "desc": "上一篇基本实现了锚点组件的功能，还剩一些优化和功能升级留在这一篇中完成。首先是把样式优化下，使得接近百度百科的样式效果；其次在使用组件时用到了v-if=\"pageBlock\"这个判断，需要隐藏下细"}, {"id": "6844904197348212749", "title": "有了 vite，还需要 webpack 么？", "desc": "Vite 是一个由原生 ESM 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发，在生产环境下基于 Rollup 打包。 那废话少说，我们先直接来试用一下。 我们来看下生成的代码, 因为 vite 尝试尽可能多地镜像 vue-cli 中的默认…"}, {"id": "6844904001650032653", "title": "搞懂并学会运用 Vue 中的无状态组件", "desc": "状态管理通常在较小的项目并不需要，但是当涉及到更大的范围时，如企业级的应用大部分需要它了。简单的说，状态是一个包含应用程序使用的最新值的对象。但是，如果咱们从结构的、更抽象的角度来看待它，就会清楚地看到，状态是复杂应该中重要一块，它使能够构建干净的体系结构，并将关注点强有力地分…"}, {"id": "6995069781015527460", "title": "Element form 表单的验证", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：[8月更文挑战] Element是我们开发过程中经常用到的组件库，其中的form表单验证相信大家也不陌生。但是实际上开发过程中，我们会遇到很多状况，除了"}, {"id": "6844903661726875656", "title": "Vue项目使用eslint + prettier规范代码风格", "desc": "团队开发的项目，如果没有对代码风格作要求，有多少团队成员，就当然会出现多少种不同的代码风格。因此，我们需要一种能够统一团队代码风格的工具，作为强制性的规范，统一整个项目的代码风格。 幸好，我们有 eslint 和 prettier 。 应该大多数项目都已经采用eslint来对代…"}, {"id": "6986815885251969055", "title": "前端代码规范（一）", "desc": "前端代码规范（一） 一、JavaScript规范 使用 js-standard-style标准 关键规则 不要定义未使用的变量。 eslint: no-unused-vars 对于变量和函数名统一使用"}, {"id": "6864570298767769607", "title": "总结vue的6大高级特性——及浅谈一下nextTickkeep-alive的原理 ", "desc": "1. 自定义v-model 相信大家对于v-model这个指令都很熟悉了。它其实就是一个 &#x3C;input type=\"text\" :value=\"num\" @input=\"num=$event.target.value\">的语法糖。 但是呢，我们也发现了这个指令只能应用…"}, {"id": "6988289375222104078", "title": "vue中px转rem", "desc": "1.amfe-flexible 根据网页宽度自动更改html字体大小 `yarn add amfe-flexible -S` `npm i amfe-flexible -S`"}, {"id": "6975123116108300325", "title": "Vue3 优雅的模态框封装方案 - 实践", "desc": "通过前篇文章的介绍，大家已经了解了虚拟节点和瞬移组件，接下来我们利用虚拟节点与瞬移组件，封装一个模态框组件。 首先，得先明确我们目标，就是我们想要做出来的效果，就是兼容两个方式调用的模态框组件 第一种"}, {"id": "6844903767373152270", "title": "记一次Vue动态渲染路由的实现", "desc": "背景:公司打算做一个(cms),最开始前端参照vue-element-admin的思路,验证了前端鉴权的可能性,大佬写的代码思路清奇,值得学习,后来考虑诸多因素,接口安全性前端鉴权的难度以及项目的复杂"}, {"id": "6954965530830700552", "title": "关于拖拽生成代码的一些设计思路", "desc": "概述 从可视化的交互，去生成可读代码，是此次文章分享的核心需求。替代一部分初中级前端的业务能力，后端人员完全可以在界面中一顿操作最终生成可读代码，合并到工程中"}, {"id": "6999811532490014756", "title": "回首Vue3之API篇（十一）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 这篇文章我们来讲一下组合式APIsetup、Provide / Inject、getCurrentInstance的使用，以及我们需要注意"}, {"id": "6917144916455849991", "title": "Vue2面试题笔记(更新中...)", "desc": "前言vue2面试题(针对一些常问的)1.说一下computed和watch区别是什么vue2核心原理(简易)-computed笔记vue2核心原理(简易)-watch笔记2.说一下响应式数据的理解Vu"}, {"id": "6844903992107991047", "title": "搭建Vue从Vue-cli到router路由护卫", "desc": "1、Vue-cli基础使用1.1创建测试项目vuecreatevue-routes1.2创建成功,启动项目 yarnserve 在http://localhost:8080/就可以看到欢迎👏页面了1."}, {"id": "6844903641158008839", "title": "Vue.js 轻量级组件化 SVG 图表库", "desc": "组件风格，按需引用，d3 驱动，轻量灵活"}, {"id": "6978324614145376292", "title": "Vue：表单与 v-model", "desc": "官方文档 基础用法 你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。 它会根据控件类型自动选取正确的方法来更新元素。尽管有些神"}, {"id": "6942801168225533983", "title": "Vue 面试知识点（三）", "desc": "1. Watch 的高级用法（handle 方法 和 deep 、immediate）如何实现深度监听！ 对象的深度监听: oleVal 和 val 引用类型，拿不到 oldVal 。因为指针相同，此时已经指向了新的 val 2. Vue2.0 v-for 中 :key 到底有…"}, {"id": "6917430769275109390", "title": "element-ui配置化table组件的适应性问题（横向滚动条）【七日打卡】", "desc": "在开发前端项目过程中，解决适配性、兼容性问题是经常遇到且费事费力的苦差事，尤其是在开发Vue项目，应用部署在IE（尤其是IE9）上的时候。 在进行动态展示（根据后台返回的表头、表数据展示）搜索结果时，会遇到搜索结果适配屏幕宽度或高度，但是却会出现纵向或横向滚动条的现象，通过F1…"}, {"id": "6924282338918547470", "title": "vue 路由切换时做了什么", "desc": "1. 比对 2. 获取导航守卫 3. 创建迭代器函数 4. 执行队列"}, {"id": "6844904012664274951", "title": "vue-cli3配置webpack,htmlWebpackPlugin", "desc": "项目上线后需要添加到百度搜索引擎，如何添加到百度搜索引擎参照https://jingyan.baidu.com/article/fc07f989c34dbb52ffe519a3.html。 “不要做任何修改”emm,发现vue项目webpack打包会进行压缩html，去掉双引号…"}, {"id": "6880132264613642254", "title": "实战：在Node.js和Vue.js中构建文件压缩应用程序", "desc": "Node.js为我们提供了一个模块来协助文件压缩。在本文中，我们将构建一个应用程序，用户可以在该应用程序中上传他们想要压缩的文件，然后使用Node.js Zlib模块下载该文件的压缩版本。 我们将从构建后端开始，这是我们应用程序的基础。 在桌面上，为应用程序创建一个文件夹，群殴…"}, {"id": "6911204252438233096", "title": "（vue2）关于阻止浏览器记住密码的究极解决方案", "desc": "做后台管理系统时，登陆后浏览器会弹框提示是否记住密码，而且它记住密码后下次输密码会自动填充，很烦，这里做一个密码输入框的组件，防止浏览器记住密码第一步，创建一个PwInput.vue的文件当作组件，里"}, {"id": "6997009220348411940", "title": "vue3- watch监听", "desc": "1. 监听普通类型 toRefs 转换响应式对象中所有属性为单独响应式数据 🔔 ref 可以让基本类型数据也变成响应式 toRef是函数，转换响应式对象中某个属性为单独响应式数据，并且值是关联的。 t"}, {"id": "6987209015121936420", "title": "学习笔记-script setup语法糖", "desc": "实验性方法, 未发布 使用方法 普通写法 两件事: 注册一个组件 导出一个字符串给template使用   启用script setup 用法: 在script便签上添加setup关键字即可"}, {"id": "6844903554134573063", "title": "设计一个基于vue.js 2.x的虚拟滚动条", "desc": "2 事件，主要是当鼠标移动的时候，显示滚动条。 其中state表示状态，是在运行时可发生改变的，而 ops 则是配置参数，是用户传过来的。 取得子组件的dom元素，用来取得dom的实时信息。 resizeVBarTop,为了防止误差，并且可以求出滚动条距离父元素的高度。 监听滚…"}, {"id": "6844903703921573901", "title": "37行代码构建无状态组件通信工具-让恼人的Vuex和Redux滚蛋吧！", "desc": "很多前端开发者认为，Vuex和Redux是用来解决组件间状态通信问题的，所以大部分人仅仅是用于达到状态共享的目的。但是通常Redux是用于解决工程性问题的，用于分离业务与视图，让结构更加清晰，从而达到易于维护的目的。也就是 Flux(这里我之前翻译的Flux深度解读)架构所解决…"}, {"id": "6988571291036942343", "title": "Vue.js事件与表单处理", "desc": "事件处理主要使用v-on指令。 表单输入绑定主要使用v-model指令。 另外就是修饰符的相关介绍。"}, {"id": "6860396718379237384", "title": "使用v-model实现select组件", "desc": "这一步我们只需要父组件传递单值代码，然后当前选中的一个值，没有的话就默认为空。 这样，我们已经把外层框架搭建好了。 接下来，解决子组件改变，父组件对应的值发生改变。 一般情况我们会想到子组件把当前选中的值通过this.$emit传给父组件，然后父组件再在对应方法里面给对应的值赋…"}, {"id": "6844903879167967239", "title": "Vue项目中ESlint规范", "desc": "开发项目中使用的eslint校验规范，供参考："}, {"id": "6844904102359465997", "title": "Vue原理解析（十二）：不让过渡/动画成为短板之transition组件实现原理", "desc": "动画一直是前端比较纠结的点，容易被忽视却又是那么重要，能写出让人感到愉悦自然的交互体验确实能为项目增色不少，毕竟这是上手就能感受到的，所以很有必要对vue的transition组件实现原理一探究竟。transition组件的动画实现分为两种，使用Css类名和JavaScript…"}, {"id": "6844903765758345224", "title": "设计模式在vue中的应用（二）", "desc": "为什么要写这些文章呢。正如设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结（来自百度百科）一样，也是想通过分享一些工作中的积累与大家探讨设计模式的魅力所在。 这篇内容比较简单只涉及到一个设计模式——状态模式。 在服务端输出页…"}, {"id": "6984784552002600967", "title": "【Vue源码】数据响应式原理 - 依赖收集 - defineReactive - Observer - Dep - Watcher", "desc": "> 我们在使用Vue时，只需要修改数据，视图就会自动更新，这就是数据响应 > 今天来学习Vue实现数据响应式的原理~"}, {"id": "6844903878933086216", "title": "Vue入门学习之技术分享-3(Vue中的动画特效）", "desc": "今天又是学习的一天，我总结完了我学的Vue动画特效的知识。等我哪天忘了我就打开我的掘金然后猫几眼寄几写的东西🦈总结内容如下 如果需要动画效果则需要把元素放在transition标签之中(可以给transition标签取一个名字加入这个名字是fade)，这样就会有一个过渡的动画…"}, {"id": "6985880562728697869", "title": "谷歌控制台没有显示vue_DevTools插件", "desc": "插件提示如下 Vue.js is detected on thispage. Devtools inspection is not available because it’s in producti"}, {"id": "6844904194147614733", "title": "做一个自己的VUE组件，并且上传至npm", "desc": "因为是vue组件所以我们需要部分依赖，如less，es6 ...... npm包package.json中registory属性一定要填写，每次npm publish时package.json中version版本一定要大于上一次。"}, {"id": "6844903934348263437", "title": "Vue从甜小白到皮大佬系列(七) Vue Router", "desc": "Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌,在我们项目中也是必会技能之一。下面我想通过以下几个方面来分享。 2.如果在create项目的时候没有自动安装,那么要手动进行安装. 4.给Home组件配置…"}, {"id": "6891108174078689287", "title": "Vue.set -- 看完这个就会用了。 ", "desc": "Vue.set：修改数据，并触发视图更新。BTW:$set是绑定在Vue原型上的set方法，两者并无二致。因为Vue无法探测普通的新增property(比如this.myObject.newPrope"}, {"id": "6844903544911298567", "title": "自己写一个H5项目CI系统", "desc": "持续集成（Continuous integration，简称CI)系统在软件自动化构建（包括编译、发布、自动化测试）方面有着重要的作用，在之前，前端项目简单，很多时候发布都只是一些简单的拷贝，而随着webpack web打包工具的诞生，前端项目越来越复杂，大多数项目都需要一个构…"}, {"id": "6844903512296390664", "title": "服务端渲染 vs 客户端渲染", "desc": "服务端渲染，客户端渲染，同构"}, {"id": "6992532699705999391", "title": "Vue Router在项目中的使用", "desc": "一、前言 这是我参与8月更文挑战的第2天，活动详情查看： 8月更文挑战” 。在vue项目中，页面跳转已不再用 <a href=\"xxx\"></a>这种方式，而是使用vue-router，所以接下来就看"}, {"id": "6966401850165690382", "title": "手把手带你实现一个min版的vue2（2） 观察者模式", "desc": "观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。这种模式使用例子有很多，例如：订阅邮件、微信公众号与微信用户、气象局的天气预报与听众。"}, {"id": "6985335340512837669", "title": "简述Vue.js + Egg.js开发Web App“衣推”（Demo）", "desc": "前言 一、开发时间、技术栈 开发时间：空闲时间编写（大概一个月） 技术栈：Vue.js + Egg.js 二、项目展示 三、后端结构设计（Egg.js + Mysql +Sequelize） 1. 插"}, {"id": "6953142279733264392", "title": "我是如何在 Vue 项目中做代码分割的", "desc": "通常为了开发效率，我们会使用 vue-cli 创建项目，这样创建的项目默认情况下编译是会对代码进行分割的。但是如果是自行配置的 webpack 环境的话，还是很有必要熟悉代码分割的相关知识的。"}, {"id": "6844904178699993101", "title": "Vue项目中常用的一些第三方库", "desc": "在style标签中添加scope属性后，样式只会修饰当前组件。 swiper-slide标签内部是轮播的图片。可以通过多个swiper-slide标签来定义已知个轮播图片，但仍建议使用v-for的方法进行列表渲染 下面的四个div标签都是可选项，从上到下分别是：分页器（就是图中…"}, {"id": "6918366399005982727", "title": "七日打卡-详解router beforeEach与afterEach钩子函数", "desc": "在路由跳转的时候，我们需要一些权限判断或者其他操作。这个时候就需要使用路由的钩子函数。 定义：路由钩子主要是给使用者在路由发生变化时进行一些特殊的处理而定义的函数。 next:Function,进行管道中的一个钩子，如果执行完了，则导航的状态就是 confirmed （确认的）…"}, {"id": "6984359510957621284", "title": "菜鸡学源码Vue —— (Vue的实例化过程)", "desc": "回顾 上一篇课程讲到了Vue对象的初始化过程，首先是调用核心_init()方法，在该方法中将option挂载到vm对象，并初始化生命周期，data等，在最后使用$mount方法对el绑定的dom对象进"}, {"id": "6891824013572571149", "title": "第 2 篇：上手 Vue 展示 todo 列表", "desc": "注意：追梦的博客在国外所以访问速度慢，需要耐心等待一下。本号将不再连载本系列，望周知。 我们先来写好 Todo 应用的 HTML 文档模板，然后再用 Vue 来操作模板中的数据。由于我们的重点在 Vue 的学习，因此 Todo 应用的 UI 采用了极简风格设计。可以看到模板的代…"}, {"id": "6902304562116296712", "title": "永远也抽不到奖的转盘", "desc": "首先mock我们的中奖数据，中奖标识、奖品介绍、奖品图片等等。 基本布局方案，将我们的抽奖按钮项放置最后一位，借助index下标给我们的li定义不同的class name。 挂载mock数据，实际是请求后端接口的数据。 grid布局， 资源加载可换成自己的图片，这时候我们可以借…"}, {"id": "6973830848529301534", "title": "vue强制更新视图 $forceUpdate()", "desc": "vue强制更新视图 $forceUpdate() 它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件"}, {"id": "6844904176242130951", "title": "Vue-常见的组件通信方式", "desc": "最近一直在从头开始学习vue，顺手整理一下vue组件化的相关通信方式，分析不到之处，还望各位指正。 vue组件系统提供了⼀种抽象，让我们可以使⽤独⽴可复⽤的组件来构建⼤型应⽤，任意类型的应⽤界⾯都可以抽象为⼀个组件树。组件化能提⾼开发效率，⽅便重复使⽤，简化调试步骤，提升项⽬可…"}, {"id": "6945646753735671844", "title": "【bigo】浅谈Vue3新特性", "desc": "Vue3的release版本终于发布了，新的Vue3在语法以及底层都进行了全新的重构，带来了更快的运行速度，更小的构建包，更友好的编程规范。 组件patch的时候，需要重新创建整个vdom树，然后遍历整棵树进行diff，update... ...... 全局 API 现在只能作…"}, {"id": "6844903958121545742", "title": "使用 Proxy 实现 Vue.js 3 中的响应式思想", "desc": "关于 Proxy 的基础知识，可以去MDN学习直达链接。 本文将实现响应式的核心函数命名为 reactive， 这个函数返回一个被代理之后的结果，可以通过操作这个返回结果来触发响应式。 首先，给出测试数据：一个有 name 属性的对象 obj，我们希望经过 reactive 函…"}, {"id": "6923945606993936392", "title": "搜索列表页，我终于找到使用舒适的方案了", "desc": "本文内容 Vue 技术栈为基础。 每一个搜索列表页面的业务功能都基本上一样。 翻页器提供不同页码的翻页跳转。 在搜索表单中修改了表单内容，但是在没有进行搜索的情况下进行了翻页，翻页的时候使用了搜索表单内的新数据，导致翻页后数据为空。 不知道各位同学的是否经历过这几种不良体验。本…"}, {"id": "6844904190108499982", "title": "Vue中使用Three.js加载glTF模型", "desc": "Three.js是一个跨浏览器的脚本，使用JavaScript函数库或API来在网页浏览器中创建和展示动画的三维计算机图形，基于WebGL实现，对WebGL进行了进一步的封装，简化了多数复杂的接口。 Three.js支持包括 .obj、.gltf等类型的模型结构。glTF（GL…"}, {"id": "6919710203520745486", "title": "vue项目前端实现图形验证码", "desc": "1、下载identify插件，npm安装2、在你的components目录新建一个SIdentify.vue，把以下代码复制进去！3、在你需要验证码的页面引入组件并写好方法4、完成效果图（如果需要背景"}, {"id": "6844904056578637831", "title": "前端测试之 Jest 单元测试", "desc": "jest 在运行前会检查是否安装 babel，如果安装了会去取 .babelrc 文件，结合 babel 将代码进行转化，运行转化后的代码。 3. jest 默认配置 \"http://www.dell-lee.com/react/api/404.json\" 则不存在。 对于异步…"}, {"id": "6985407070539350024", "title": "基于vue实现路由鉴权", "desc": "步骤1：登录后后端接口返回 如下结构数据： 步骤2：将返回路由保存在store中 进行如下操作 步骤3：路由文件前端写死内容 步骤4:数据处理，getAsyncRoute 在下面文件中进行处理，Val"}, {"id": "6844903695935602696", "title": "Vue番外篇 -- vue.nextTick()浅析", "desc": "这时，我们就会用到一个方法是this.$nextTick（相信你也用过）。 nextTick是全局vue的一个函数，在vue系统中，用于处理dom更新的操作。vue里面有一个watcher，用于观察数据的变化，然后更新dom，vue里面并不是每次数据改变都会触发更新dom，而是…"}, {"id": "6854573214316789774", "title": "对于组件的可重用性，大佬给出来6个级别的见解，一起过目一下！", "desc": "我们所有人都希望编写更少的代码，同时也要做更多的事情。为了实现这一点，我们构建了组件，以便可以多次重用它们。 有些组件只需要基本的可重用性，而另一些则需要更复杂的重构技术，我们才能充分复用它。 这里有6个不同级别的可重用性概念，大家先来体会体会，后续更新会一个一个的讲。 通过模…"}, {"id": "6937950764727795726", "title": "Vue I18n语言国际化", "desc": "​ 近期业务需求，需要对原有项目进行国际化处理，该项目是基于Vue2+VantUI2.x的移动端H5SPA项目。上网查阅了相关资料，大多推荐使用 vue-i18n 国际化插件来实现不同语言的切换。经过测试，已基本实现中文和英文两种语言的切换。 ​ 现在主流的前端UI框架也支持语…"}, {"id": "6894414807756193799", "title": "🚩Vue源码——如何深度收集渲染订阅者", "desc": "本专栏是由一个问题引起，如果你已经知道答案了，可以忽略本专栏。 为什么执行 this.a.c.d = 2 后页面会刷新成如上图所示。或许你从这篇专栏中得知。在 Vue 挂载过程中，数据 this.a 收集了渲染订阅者。当执行 this.a.c.d = 2 后，数据 this.a…"}, {"id": "6844903603300204552", "title": "飞冰 2.0 正式发布并支持 Vue 项目开发", "desc": "距离 1.0 正式版发布又过了两个月，飞冰迎来了 2.0 大版本的更新。 详细的飞冰背景和介绍等，请参照 1.0 正式版发布的介绍，这里不再赘述：https://zhuanlan.zhihu.com/p/34265596。 我们当时在 1.0 版本的 slogan 是『海量可复…"}, {"id": "6943525246259429412", "title": "如何使用vitepress写一套自己的ui文档", "desc": "当你的ui工具存在v-* 的用户自定义指令后，并且在vitepress中引入了在.md或者vue组件中使用时，会提示如下错误。vue官方提供了相关解决方案 安装该补丁patch-vue-directive-ssr能过解决该问题 问题原因可点击查看，相信在vitepress 1.…"}, {"id": "6844904169644490766", "title": "Vue3 插件开发详解尝鲜版", "desc": "vue3.0-beta 版本已经发布了一段时间了，正式版本据说在年中发布（直播的时候说的是年中还是年终，网上传闻说是6月份）。嘴上说着学不动，身体却很诚实地创建一个vue3的项目，兴致勃勃地引入 vue2 插件的时候，眉头一皱，发现事情并没有那么简单。 不是说兼容vue2的写法…"}, {"id": "6844903648674185229", "title": "Vue项目全局配置页面缓存，实现按需读取缓存", "desc": "一个web app的实际使用场景中，有一些情景的交互要求，是记录用户的浏览状态的。最常见的就是在列表页进入详情页之后，再返回到列表页，用户希望返回到进入详情页之前的状态继续操作。但是有些使用场景，用户又是希望能够获取最新的数据，例如同级列表页之间切换的时候。 如此，针对上述两种…"}, {"id": "6986271549875552287", "title": "Vue 2 动效", "desc": "这是看《[想入門，我陪你]Re Vue 重頭說起》视频教程和阅读 Vue 2 官方文档时做的笔记，这一篇主要是与过渡与动画相关的知识点，还包括一些需要注意的细节。"}, {"id": "6844903936135004173", "title": "Vue原理解析（十）：搞懂事件API原理及在组件库中的妙用", "desc": "这个里面存放的就是当前实例上的自定义事件集合，也就是自定义事件中心，它存放着当前组件所有的自定义事件。和自定义事件相关的API分为以下四个：this.$on、this.$emit、this.$off、this.$once，它们会往这个事件中心中添加、触发、移除对应的自定义事件，…"}, {"id": "6844903897258000398", "title": "Vue 组件间通信六种方式（完整实践版）", "desc": "组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系： 如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。 父组…"}, {"id": "6870392360946106382", "title": "六.记一次Vue3.0尝鲜", "desc": "前言最近被同事问：vue3.0出了，你看了吗？我:...???一番挣扎后，打开了百度，开始了vue3.0的学习之旅，这里记录下vue2.x->vue3.x的变化，如果你对vue3.0不是很了解，或者想"}, {"id": "6844903790823358472", "title": "【译】Vue 的小奇技（第八篇）：两个鲜有人知的 Vuex 技巧", "desc": "这篇文章来自于一位很特别的受邀者：Nicolò Mezzopera，他是 Pulilab 网站的开发者，一位真大神。我们去年还一起组织过一场在布达佩斯的关于 Vue.js 的 线下交流会！ 如果你今年 4 月 12 号刚好就在维罗纳，他刚好会在 Vue Day Italy 20…"}, {"id": "6844903751879229448", "title": "微信小程序，实现 watch 属性，监听数据变化", "desc": "在微信小程序实现 watch 属性，监听 data 中的属性，当被监听属性的值改变时，执行我们指定的方法。​​ Vue 的 computed 和 watch 可以很方便的检测数据的变化，从而做出相应的改变，所以，模仿 vue 肯定是一个不错的选择。 与 Vue 一样，我们使用 …"}, {"id": "6844903969643298829", "title": "从一个简单的 list 组件搞懂 Vue 插槽", "desc": "Emmm。。乍一看似乎没有任何毛病，甚至数据变化了也是可以满足要求的。 此时，这个组件就有点不够用了，无法应对各种需求的组件不是好组件。既然内容是多变的，那就不能固定,而应该是灵活的，最灵活的方式应该是将决定权交给使用者（父组件），使用者是最清楚内容应该是什么的，那具体怎么做呢…"}, {"id": "6844903905701150734", "title": "基于 vue-skeleton-webpack-plugin 的骨架屏实战", "desc": "目前正在做的项目，登录是需要跳转到别人的页面的，导致重定向很多，需要优化一下白屏时间，所以就用到了骨架屏，但是这次用的骨架屏不是自动生成的，还是自己敲的样式，一步步来吧，先从简单的用起🤝。 骨架屏，英文 Skeleton screen，是指在页面开始渲染之前的白屏时间内，先让…"}, {"id": "6993328430104182820", "title": "Vue原理解析(一)：任何人都能看懂的响应式原理和数据劫持原理以及实现一个$set", "desc": "实现数据代理和数据递归劫持 在vue2.x的源码中使用Object.defineProperty()这个api实现数据代理, 也可以实现数据劫持, 数据代理和数据劫持的简单实现"}, {"id": "6844904179211714567", "title": "Vue学习总结之入门Vue(一)", "desc": "大家好，我是杨戬，一个在互联网前端苟且偷生的划水程序员，从本篇博文开始，我将会撰写一系列关于Vue.js的优质文章，坚持输出，一方面好久没有使用过vue.js框架了，之前在博客园陆陆续续的写过一些文章，但是自我感觉不太合格，在一个夜黑风高的夜晚决定痛定思痛重新撰写这个系列。希望…"}, {"id": "6991487031373201416", "title": "你真的会用vue-cli吗？（1） | 8月更文挑战", "desc": "很多小伙伴在使用脚手架创建项目的时候，只用到了极少部分的功能，当我们的项目有一定的复杂度的时候，我们所掌握的简单使用cli知识就不足以支撑起我们对整个项目的调度。本文对vue-cli脚手架进行简单的梳"}, {"id": "6844904015294103566", "title": "不再头秃！typescript平滑重构vue项目", "desc": "我刚接手手头这个项目的时候，console里到处飘红，整个项目哪哪都是bug,满目疮痍。经过一段时间的调整，虽然可以正常运行，但是很多问题迟迟没有解决，比如乱七八糟的调用、没有闭合的if else、没有处理的try catch……可以说，为了维护这一个问题多多的项目，牺牲了很多…"}, {"id": "6844903862822764552", "title": "解决Vue多级动态面包屑导航", "desc": "可以看出这个路由没有什么区别，唯一值得注意的一点就是里详情页面，是一个动态的路由，从详情页面跳转到项目列表我们需要相应的id信息，但是此时id我们不能固定填入，而是一个动态的值。 在beforeRouteEnter事件中修改meta信息，从而更新面包屑的导航路由。 如果你还有更…"}, {"id": "6972187188301660191", "title": "Vue.js 源码（7）—— patch", "desc": "这是我参与更文挑战的第7天，活动详情查看： 更文挑战。 前言 虚拟 DOM 最核心部分是 patch，它可以将 vnode 渲染成真实的 DOM。 patch 本身有补丁、修补等意思，其实际作用是在现"}, {"id": "6942664956005318670", "title": "Vue3.0 响应式原理漫谈", "desc": "Vue3.0 和 Vue2.0 整体的响应式思路没有变化，但是实现细节发生了较大的变化。并且 Vue3.0 将响应式系统进行了解耦，从主体代码中抽离了出来，这意味着，我们可以将 Vue3.0 的响应式系统视作一个单独的库来使用，就像 RxJS。为了加深对 Vue3.0 的响应式…"}, {"id": "6844903601513447437", "title": "Vue + better-scroll 实现移动端字母索引导航", "desc": "vue + better-scroll 实现移动端歌手列表字母索引导航。算是一个学习笔记吧，写个笔记让自己了解的更加深入一点。 Demo： list-view，使用 chrome 手机模式查看。换成手机模式之后，不能滑动的话，刷新一下就 OK 了。 因为用到的是 vue-cli…"}, {"id": "6844903928614617095", "title": "Vue从甜小白到皮大佬系列(六)  组件通信", "desc": "浏览器打开会显示user里面的值. 总结：父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed 总结：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。 这里介绍中央事件总线的方式，名字高…"}, {"id": "6993262140249341989", "title": "组件的通信props：父组件给子组件用", "desc": "div app是父亲组件, 是子组件，> 在组件中使用props来从父亲组件接收参数，注意，在props中定义的属性，都可以在组件中直接使用。 propps来自父亲级别，而组件中的data retur"}, {"id": "6905695447604527112", "title": "使用浏览器配合手机调试&使用Proxy劫持（3类真机调试技巧）", "desc": "你好，我是终身学习的阿飞。 我做了个青柠檬读书会的公众号，每天分享我的学习、读书的内容，同时也会分享我的一些学习方式和一些软件推荐。 如果您有任何问题，可以在博客下方留言，我们一起探讨。 用safari 访问这个ip：端口之后，就可以在电脑上打开调试器了。 [Tip]如果出现白…"}, {"id": "6847902221066240014", "title": "利用函数式组件做二次封装", "desc": "$attrs：包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$at…"}, {"id": "6844904033145077767", "title": "Vue实现剪贴板复制功能", "desc": "一. 安装插件 二. 全局注入（main.js） 三. 封装方法方便多次使用 四. 在需要复制的页面中调用copy方法 刚开始写工作记录掘金大佬手下留情,如有错误望请告知."}, {"id": "6991253107527122957", "title": "vue.js安装与配置", "desc": "VUE-渐进式JavaScript 框架 vue官网：https://cn.vuejs.org/ vue 2.x CDN 对于制作原型或学习，你可以这样使用最新版本： 对于生产环境，我们推荐链接到一个"}, {"id": "6870299373708771336", "title": "webrtc实现视频群聊系列文章终章之完成即时通讯+多人视频会议（开放源码） ", "desc": "引言前面几篇文章讲了使用webrtc实现本地模拟通话视频聊天，现实网络1对1视频聊天以及屏幕分享和聊天随时切换的文章，接下来就下来实战怎么利用webrtc实现多人群视频通话，会议webrtc实现群聊系"}, {"id": "6989134601100722184", "title": "Vue功能篇 - 3.封装axios请求库", "desc": "每个项目的需求各有偏差,务必根据自己的项目调整相关配置 如大家有什么好的建议,可在评论区回复! 1.创建 httpload.js 文件 2.创建api文件夹,将以下代码放入index.js api封装"}, {"id": "6844903845693227021", "title": "Vue 组件生命周期钩子函数", "desc": "所谓生命周期钩子函数（简称生命周期函数），指的是组件的创建、更新、销毁三个阶段所触发执行的函数。根据每个阶段触发的钩子函数，我们可以相应的做一些操作，如获取后端接口数据、监听事件、执行事件、执行定时器、移除事件、清理定时器等等。 后续会根据这三大周期，分别说明生命周期函数。 为…"}, {"id": "6985028582170968100", "title": "Vue3第二篇setup简介之监视与计算属性", "desc": "setup 一、setup拉开序幕 执行时机 在beforeCreate之前执行，因此this是不可用的，为undefined 参数 接收两个参数props和context props--外部组件传过"}, {"id": "6985010000015917092", "title": "vue渲染器简单实现 ", "desc": "参考vue实现一个简易的渲染器， 这边只考虑基本html元素不考虑自定义组件， 通过render的h函数到mount函数在最后到patch函数实现一个生成虚拟dom渲染到真实dom的效果"}, {"id": "6999528748148080677", "title": "vue-element-admin 项目代码学习 - 02 - vuex ", "desc": "vue-element-admin 项目代码学习 - 02 - vuex 前言 系列 vue-element-admin 项目代码学习,其他文章可参考主页文章"}, {"id": "6844903801451708429", "title": "vue中axios请求的封装", "desc": "axios很好用，其中之一就是它的拦截器十分强大，我们就可以为请求和响应设置拦截器，比如请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便，响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权。 这样可以把api统一管理起来，以后维护修改…"}, {"id": "6947853185037893640", "title": "form-create-designer开源啦,好用的vue可视化表单设计器", "desc": "form-create-designer 是基于 @form-create/element-ui 实现的表单设计器组件。可以通过拖拽的方式快速创建表单，轻松帮你搞定表单。"}, {"id": "7000175255108976654", "title": "watch和computed分别使用场景", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战  实际得到的数据不能直接放到页面中展示，而是需要进行一些操作处理，就使用computed。 watch 适用场景：一个数据影响多个数据； "}, {"id": "6844903687580549128", "title": "Vue CLI 2&3 下的项目优化实践 —— CDN + Gzip + Prerender", "desc": "和很多小伙伴一样，我在开发Vue项目时也是基于官方vue-cli@2的webpack模版，但随着项目越做越大，依赖的第三方npm包越来越多，构建之后的文件也会越来越大，尤其是vendor.js,甚至会达到2M左右。再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况…"}, {"id": "6844903614327029773", "title": "2018年最值得关注的30个Vue开源项目", "desc": "学习优秀的开源项目是提高代码水平最有效的方式。"}, {"id": "6884165131115331592", "title": "Vue SPA性能优化，看这一篇就够了", "desc": "最近在做线上项目的首屏加载时长优化，查阅了大量的资料，也较为完整的整理了一遍之前的碎片知识点，本来计划只在团队内部做一次技术分享，但是后来一想，不如直接分享出来，说不定就会对哪位同学有一点点帮助呢。 更重要的是，由于水平和精力有限，文章中难免会有纰漏，分享出来也方便大家斧正，毕…"}, {"id": "6986465000080539656", "title": "Vue3+Vite2+typescript的基础用法(2)", "desc": "前言 主要内容 搭建vue3+vite2+ts的项目 ⭐⭐vue3 composition api各种写法 ⭐⭐vue3生命周期展示 ⭐⭐集成 vuex@4和axios 集成vue-router@4 "}, {"id": "6844903617342734344", "title": "面试官: 你为什么使用前端框架?", "desc": "最开始学习前端框架的时候(我第一个框架是 React)并不理解框架能带来什么,只是因为大家都在用框架,最实际的一个用途就是所有企业几乎都在用框架,不用框架就 out 了. 组件化: 其中以 React 的组件化最为彻底,甚至可以到函数级别的原子组件,高度的组件化可以是我们的工程…"}, {"id": "6969373297116971038", "title": "Electron+Vue3 MAC 版日历 开发记录(3)——PrimeVue", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 M ac 版日历📅️。"}, {"id": "6844904183938678798", "title": "Vue的MVVM实现原理", "desc": "目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。 D…"}, {"id": "6993582016444760095", "title": "Vue+ElementUI 搭建后台管理系统（实战系列五）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6997374228555104293", "title": "VueJS - 父子组件传值", "desc": "一、父组件向子组件传值 1.通过 v-bind:xxx 进行传递 2.在子组件，通过 this.$parent 获取父组件this对象 3.在父组件使用 provide 和 inject 二、子组件向"}, {"id": "7005169973605711880", "title": "你了解Vue.js 3.0的响应式原理吗？", "desc": "最近正在学习 响应式系统原理 Vue.js 3.0采用Proxy对象实现属性的监听。在初始化的时候不需要遍历所有的属性，再把属性通过defineProperty转换为getter和setter。如果有"}, {"id": "6844903568651075592", "title": "基于Vue2.0实现后台系统权限控制", "desc": "每种类型的人看到的操作栏并不一样，可以进行的操作也不尽相同，于是就需要程序处理一下各个权限问题。 ，但是发现代码非常多权限功能是整合在框架里面的，伤心，我就想实现一个小小的权限功能，没办法还是得仔细研究作者的代码。 1 创建vue实例的时候将vue-router挂载，但这个时候…"}, {"id": "6957881662302584839", "title": "🖖 Vue2.x 开启 Composition API、tsx", "desc": "本文是从 React 使用者视角带你解锁 Vue.2x 中开启 Composition API 并使用 TSX 地开发模式 🚀"}, {"id": "6844904050215878663", "title": "Vue优雅设计一个组件", "desc": "本组件已开源，已npm publish，可自行npm install km-grid，应小伙伴要求，已上传github。 注：虽然现在已经出现大量优秀的UI框架，如elementUI，iviewUI，单从业务、功能及性能仍不能满足项目所有需求，这时，就要考虑如何设计适合自己的组…"}, {"id": "6978129692528214024", "title": "Electron+Vue3 MAC 版日历开发记录(26)——FullCalendar Event 配色", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903677262577677", "title": "干货分享：vue2.0做移动端开发用到的相关插件和经验总结(更新)", "desc": "最近在用vue2.0做微信公众号相关的前端开发，经过这次开发实践，现将项目中用到的相关比较实用的插件及遇到的相关问题进行整理，希望和大家共同交流...... 介绍：一个CSS值转REM的VSCode插件。我们在做移动端开发时，为了网页适配，一般会将像素单位px转换为rem.在用…"}, {"id": "6980486863307931679", "title": "[项目篇]vue3+ts  vue3新特性代码详解- 第七天", "desc": "模块化开发 第一部分 鼠标追踪器 vue3 这种实现方式的优点 第一：它可以清楚的知道 xy 这两个值的来源，这两个参数是干什么的，他们来自 useMouseTracker 的返回，那么它们就是用来追"}, {"id": "6844903824662986766", "title": "Vue路由自动注入实践", "desc": "什么是路由自动注入路由自动注入概念学习自nuxt,我们不需要在router.js中每次手动输入代码引入模块而是自动根据文件目录格式生成router.js我们把这个功能独立成一个webpack插件,并对"}, {"id": "6844903621847416840", "title": "移动H5页面微信支付踩坑之旅（微信支付、单页面路由模拟、按钮加锁、轮询等常见功能）", "desc": ".net混合开发的vue模板语法的单页面应用，所以不存在脚手架以及没有路由可以跳转。 需要写两个页面，在订单详情页需要点击“请输入手机号”进入手机号绑定页面，手机号绑定成功后自动跳转到订单详情页，如果该手机号已经绑定成功，则不显示“请输入手机号”（即不可点击进入下一个页面），只…"}, {"id": "6933506701496860679", "title": "vue3学习笔记", "desc": "使用yarn dev 运行就完事了。"}, {"id": "6923025036324372494", "title": "[配置化组件开发]  vue的表单需求中我是如何偷懒的", "desc": "在 B端 系统中 表单 和 表格 是两个非常常见的业务场景, 如果能够打造一个 通用性强, 灵活性高 , 可扩展 的表单或表格组件, 那么将大大提高我们的生产力. 我们将 form-item 抽象出来, 作为组件入参, 以后的 N多 表单我们只用传入不同的 form-item …"}, {"id": "6844903736565825549", "title": "React 服务端渲染方案完美的解决方案", "desc": "最近在开发一个服务端渲染工具，通过一篇小文大致介绍下服务端渲染，和服务端渲染的方式方法。在此文后面有两中服务端渲染方式的构思，根据你对服务端渲染的利弊权衡，你会选择哪一种服务端渲染方式呢？ 使用 React 构建客户端应用程序，默认情况下，可以在浏览器中输出 React 组件，…"}, {"id": "6930804867657105416", "title": "Vue.js 数据更新视图不同步更新的处理", "desc": "这种修改方式确实把数据给更改成功了，在控制台也能够打印出更改后的值，但是页面不会同步更新。原因如下："}, {"id": "6844904129303691272", "title": "vue制作抓娃娃机", "desc": "去年为联通制作双十一活动，做四个小游戏：‘配对消消乐’、移动拼图、抓娃娃、倒计时。 游戏规则：在指定时间内抓到上图四张卡片为挑战成功。 接下来就是卡片滚动，设置定时器，给卡片模块设置transform 让卡片从右向左匀速移动。 再接着就是点击按钮控制爪子上下移动抓取卡片。 首先…"}, {"id": "6992757799172177951", "title": "vue.config.js 常用设置", "desc": "vue.config.js 中的代码整体通过 module.exports 导出一个对象，我们所做的是配置里面的各项 option 1.publicPath 2.outputDir 3.assetsD"}, {"id": "6844903620207476750", "title": "vue-cli 3.0 使用全过程讲解", "desc": "恭祝vue-cli 3.0.0 官方正式版发布，此后我们可以正式在3.0环境下进行项目开发了。 此文发布以来受到了很多朋友的阅读，但我深知这篇文章还是很浅显的，因此，我会在后续的 3.0 使用过程中分享我遇到的各种问题以及解决方案（如果能解决的话。。。）。 首先在使用 vue …"}, {"id": "6844903641699057671", "title": "手把手教你用vue搭建个人站", "desc": "其实一个最简单的个人站，就是许多的HTML页面，你只要可以用HTML写出来就可以，然后挂到Github pages上。但这并不是我想要的。 也有许多的人会选择用Vuepress，Hexo，Wordpress，Jekyll等等这样的博客框架来搭建自己的博客，我也都尝试过，有很多的…"}, {"id": "6844903684850057230", "title": "[译]JavaScript响应式的最佳解释", "desc": "许多前端JavaScript框架（例如Angular，React和Vue）都有自己的Reactivity引擎。通过了解响应式及其工作原理，您可以提高开发技能并更有效地使用JavaScript框架。在视频和下面的文章中，我们构建了您在Vue源代码中看到的相同类型的Reactivi…"}, {"id": "6909739109359550471", "title": "Vue 简单实现前端权限控制", "desc": "除登录接口、退出接口外，其余接口增加token验证。 打开页面时请求获取菜单接口，请求不成功说明未登录，给route默认添加login页面以及 * 重定向。 登录成功后获取到token，把token存入session以及请求头。 登录成功后获取菜单接口，请求回来的路由和vuex…"}, {"id": "6844903569712218125", "title": "开源一个 Vue.js 2.0+ 石墨文档样式的富文本编辑器", "desc": "SMEditor在线预览反馈联系关于作者起因之前一直使用的wangEditor不能满足我司编辑和PM需求,使用过程中也出了很多问题, simditor体验之后效果不是很好,并且也不维护了;目前的我司的"}, {"id": "6844903953180835847", "title": "vue组件打包及发布npm的整个流程", "desc": "首先，我们从零开始搭建一个vue项目，以vue-cli3 来搭建。 修改之后，运行项目我们会发现报错了，那是因为目录结构改了，还有就是packges这个文件夹是我们新增的，webpack无法获取编译，我们需要在webpack里加上。 我们会新建一个vue.config.js的配…"}, {"id": "6844903713975304199", "title": "抛开 Vue、React、JQuery 这类第三方js，我们该怎么写代码？", "desc": " "}, {"id": "6844904056306008077", "title": "Vue如何使用混合Mixins和插件开发", "desc": "上面提到use，也讲解一下use相关的知识，而且在开发中也常常看到如Vue.use(VueRouter)，Vue.js 在插件开发过程中需要注意是有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象， 插件通常会为Vue添…"}, {"id": "6989222587733639182", "title": "Vue中computed 和 watch有什么区别？", "desc": "送上一条锦囊妙计 首先翻译单词 其次分别描述两个内容，最好有代码的例子 献上一份标准答案 watch是监听的意思 不支持缓存，数据变，直接会触发相应的操作； watch支持异步； 监听的函数接收两个参"}, {"id": "6989217956483825695", "title": "Vue3.0 api方法总结", "desc": "ref与toRef、toRefs ref函数包装了一个响应式的数据对象。 toRef 是将某个对象中的某个值转化为响应式数据，其接收两个参数，第一个参数为 obj 对象；第二个参数为对象中的属性名。 "}, {"id": "6945369322206265380", "title": "手把手学习Vue3.0：Vue3.0正确使用Bus总线mitt实现组件间通信和传参", "desc": "在使用Vue做后台管理系统的过程中，需要实现组件间的参数传递。Bus方式非常简洁方便，却遇到一个奇怪的现象，我单击菜单区域，需要在header中展示操作导航，内容区域做展示。结果header区域没有反应。下面我分别介绍Vue3.0如何集成Bus，同时复盘一下问题的整个过程。Vue..."}, {"id": "6844903912340717575", "title": "Vue 导航守卫(路由的生命周期)", "desc": "vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中，他们分为三种： 注：参数或查询的改变并不会触发进入/离开的导航守卫 (你可以通过观察 $route 对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守…"}, {"id": "6914598983205847053", "title": "Vue 3 组件库：element-plus 源码分析", "desc": "基于 Vue3 的组件库 element-plus 正式发布，element-plus 是一个使用 TypeScript + Composition API 重构的全新项目。官方列出了下面几项主要更新，本文会阅读 element-plus 的源码，从以下几个方面在整体和细节上来…"}, {"id": "6850037267466190856", "title": "渐进式手敲Vue3.0框架 - 2万字以上 - 持续更新 ", "desc": "只有刻意练习才能提高。 前面关注Vue3主要是阅读源码也趁机摸鱼了提了一些PR,居然还有一个通过的算是给vue大业也做了点点贡献。 为了更好的理解Vue3源码我计划使用渐进式的方法完成一个简写版的Vue框架。 欢迎大家持续关注、首先做一个简单的计划。 这个计划一定会变😜，要不…"}, {"id": "7000935507223904263", "title": "vue 系列 -- vue-router 两种路由模式", "desc": "前言 在一个网页里面，多个子网页之间需要相互切换 类似于这样： 之前的解决方式是前后端配合，一个子网页对应服务器上的一个子文件夹，用户每点击一个按钮就向后端请求数据： 通过 v-show 去控制组件的"}, {"id": "6844903672581734413", "title": "9月，水了几个大中厂前端面试的一些总结分享 | 掘金技术征文", "desc": "8月底离职，其实是裸辞，当然大概是在原东家我所在的产品项目组的人集体跑路了，所以我也离开了自己所在一年半的东家，毕竟留下来的都是要填大坑的。于是大概花了两天的时间简单梳理了一下前端知识和回顾了一下，自己做的产品和遇到的一些问题。然后一个星期面试了大概10家企业的样子，每天上午一…"}, {"id": "6999193460330725412", "title": "Vue响应式原理", "desc": "响应式：当响应式的数据发生更改时，若在别处有对该数据有依赖的函数则将重新执行一次。 定义一个Dep类用于收集依赖 上面的便是一个简单的Dep类的实现，存在以下几个问题： 两个函数对state对象的依赖"}, {"id": "6844904001012514823", "title": "一个简单的Vue按钮级权限方案", "desc": "手摸手系列权限方案是有比较清晰的权限划分的，而我们公司部门的岗位职责有时比较模糊。 为了解决上面2个痛点，我将原方案进行了一丢丢改造。 有些人可能会纠结，前端维护权限安全吗？肯定是不安全的，安全性主要还在后端这边把控，后端做好数据和接口方面的权限控制，前端做权限控制我认为主要还…"}, {"id": "6982533917655957535", "title": "自己动手封装vue下拉树选择组件", "desc": "自己动手封装vue下拉树选择组件 前言 hello，大家好！我是DongXH丶 今天想和大家分享一个vue-tree-selet组件封装，开发过程中我们可能会遇到一个全新的业务需求，也可能会遇到一个原"}, {"id": "6905643392324239367", "title": "【Vue指令】解决移动端弹窗“滚动穿透”问题", "desc": "在移动端的H5页面中，我们经常会遇到 点击按钮-->弹窗-->选择选项 这样的场景。滚动滚动条至容器的底部或者顶部，再往上或往下拖动滚动条时，滚动动作会出现穿透，所谓滚动穿透问题"}, {"id": "6844903934134321166", "title": "探秘 Vue3.0 - Composition API 在真实业务中的尝鲜姿势", "desc": "2019年2月6号，React 发布 16.8.0 版本，新增 Hooks 特性。随即，Vue 在 2019 的各大 JSConf 中也宣告了 Vue3.0 最重要的 RFC，即 Function-based API。Vue3.0 将抛弃之前的 Class API 的提案，选择…"}, {"id": "6985736107291836430", "title": "Vuex 3.4.0 版本 使用Vuex 以及 持久化 Vuex", "desc": "在vue 的 store文件下 index.js文件中进行拆分结构，引入vuex中定义的 state 以及 actions 异步"}, {"id": "6993689182405132302", "title": "Vue 基础-3", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 在Vue基础-2 中我们介绍了组件相关知识点，今天我们来理一理Vue的生命周期，之前面试的时候遇到过好多次这个"}, {"id": "6983670062293598221", "title": "如何在vue中使用Lottie", "desc": "本文介绍了Lottie是什么，以及它的优势在哪里、在web端如果使用,。 里边有详尽的用法介绍，以及在vue中的实战用法.可以进来看看哟!"}, {"id": "6844903806078025736", "title": "【前端发动机】Vue 组件间通信方式完整版", "desc": "Vue.js 在现今使用有多广泛不用多说，而 Vue 的一大特点就是组件化。本期要讲的，便是 Vue 组件间通信方式的总结，这也几乎是近年 Vue 面试中的必考题。注：文中示例都基于 Vue 脚手架讲解，会用到一些 Element UI 示例。 【前端进阶之路】会作为一个新系列…"}, {"id": "6847009774211432455", "title": "多文件断点续传、分片上传、秒传、重试机制", "desc": "很早之前就在掘金看到过关于实现断点续传的文章，但未曾实践过，正好最近项目中也遇到了此场景，便去重温了一遍，从头到底做了实现。 先写写总结，个人认为，本项目主要难点在于处理多个文件上传时，如何将每个文件的状态及进度对应到相关的界面展示中。绕了很多坑。 做到重试时，卡了半天，实在想…"}, {"id": "6930791547076083720", "title": "将个人封装的vue组件上传到npm全纪录", "desc": "1.很多教程建议将src改成examples,但是这个和组件关系不太大,我个人觉得没必要改。在src文件夹下新建一个packages文件夹(装自己组件的文件夹)，下图示例 不放心的话可以在本地试试，在mian.js中导入 然后vue.use(xxx),不出意外的话是成功的哈。。…"}, {"id": "6989506173447700511", "title": "通过Webpack 打包vue脚手架的初步教程", "desc": "配置开发时的前端工程（vue-loader+webpack） 好，到这里，我们项目的大概的初始化工作就完成了。接下来我们就基于这样的目录，填充一下更丰富的细节。 我们在工程目录下新建一个src文件夹用"}, {"id": "6844903793377673230", "title": "Element-UI  框架 el-scrollbar 组件", "desc": "前言我们在Element-UI的其他组件里发现，有使用这个组件，并且还不错，由于Element-UI官方文档并没有写到关于el-scrollbar的文档，所以稳定性上可能是有些问题，这里只是爬了源码，"}, {"id": "6844903505266737165", "title": "2018web前端面试总结", "desc": "从今年3月份开始面试笔试找实习找校招到现在也半年多了，拿到了不少offer，也有了自己的一点心得体会，这里写出来分享一下，拙见勿喷。 笔试作为招聘的第一个环节，一般考察的都是专业基础知识，这里会着重考察你在学校的计算机相关基础，也就是很多人会发现，我明明考的是前端的卷子为啥前端…"}, {"id": "6844904147049775118", "title": "将Vue组件库更换为按需加载", "desc": "我司前端团队拥有一套支撑公司业务系统的UI组件库，经过多次迭代后，组件库体积非常庞大。 组件库依赖在npm上管理，组件库以项目根目录的 index.js 作为出口导出，文件中导入了项目中所有的组件，并提供组件安装方法。 组件库并不导出编译完成后的依赖文件，业务系统使用时，安装依…"}, {"id": "6844904136065056781", "title": "Vue3 Composition API如何替换Vue Mixins", "desc": "Composition API最聪明的部分是，它允许Vue依靠原生JavaScript中内置的保障措施来共享代码，比如将变量传递给函数和模块系统。 想在你的Vue组件之间共享代码？如果你熟悉Vue 2 则可能知道使用mixin，但是新的Composition API 提供了更好…"}, {"id": "6909732949378203662", "title": "使用Flask和vue-cli脚手架，开发vue3.x版本的python web 项目 | 掘金年度征文", "desc": "1. 先用 pyCharm 创建 python-flask-vue-web 项目 2. 在文件夹中 使用 vue create vue-web 创建 vue3.x 版本项目 3. 添加 vue.config.js 文件 4. 启动项目 5. 修改 vue.config.js 文…"}, {"id": "6917514790956957703", "title": "⒔ Vue的过渡 & 动画", "desc": "在 Vue.js 中，所有动画的具体实现主要是通过组件 &#x3C;transition> 和 &#x3C;transition-group> 来实现的。 v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。 v-enter-active…"}, {"id": "6916820046468055048", "title": "拥抱开源，发挥更多Vue3的可能性，给自己多一个选择", "desc": "怎么说呢，对于 API 的喜好每个人都会不一样吧。我是一个比较追求极致体验的人，在之前使用 React 进行开发的时候，我就是一个痴迷于一切皆组件的理念的人，我曾经丧心病狂地尝试封装&#x3C;Axios>组件，通过传递 props 来获取数据，没有尝试过的同学可能不能领会这种…"}, {"id": "6844904001788444686", "title": "Runtime-Compiler和Runtime-Only的区别", "desc": "首先，我们分别通过这两种方式，创建Vue脚手架。我们来看一下两者的 main.js 有什么不一样"}, {"id": "6982573505954971661", "title": "实现简易版本的MVVM框架(Vue)", "desc": "整体流程图 在10~15分钟完成的自定义Vue EasyFrame observe compile Watcher&Dep proxy"}, {"id": "6844903541270642701", "title": " 2017 JavaScript 主流框架性能总结 ", "desc": "作为一名JavaScript开发者，你也许已经接触到了众多框架，甚至在众多框架之中你已经熟练掌握了一两个。之前我偏爱框架，它降低了我的开发难度。但是在经历了那么多优秀的前端的概念变革，从Virtual-DOM到状态管理，我也在想，对于框架的本身，它们的性能到底如何，对于不同类型…"}, {"id": "6866261986653503502", "title": "摸鱼的新发现，滚动条无限滚动", "desc": "上班摸鱼,下班摸鱼,一直摸一直爽。在一次调试的过程中,我按下了F12刚好是掘金的页面，然后把代码输入到控制台之后，顺手滚动了几下右侧的滚动条，发现个问题如下图所示: 掘金官网的滚动条当你拖动到底部的时候会自动回弹到一定的位置。顺着这个问题，我想着使用vue-cli3.0和TS实…"}, {"id": "6940568459281448973", "title": "初探简易版可配置的门户网站｜项目复盘", "desc": "因为个人原因休整了几个月，想了想未来的路，做了些以前没时间做的事情，最终发现，自己还是觉着敲代码适合我。于是又重新着手刷起了题，巩固了以前薄弱的地方，敲起了代码，向着新一段的程序猿生涯进军！ 这个项目主要是用于给一个展览组织做门户网站使用的，包括了内容展示，登陆验证，授权展示，…"}, {"id": "6981804362641178631", "title": "从实战里总结使用ant design vue的小技巧", "desc": "从实战中学习是最好的方式。 第一次使用新框架，总会有一些磕磕绊绊，即使有API介绍，但是有的不上手还真搞不懂"}, {"id": "6844904197914099725", "title": "vue小白日记之layout布局组件", "desc": "本猿由于公司业务接触到了，面对@花裤衩大大的vue-admin-element快速开发平台进行二次开发，源代码布局中大列使用了element-ui，对于我这个刚接触element-ui的小白真的太痛苦TAT ！自己萌生了封装布局的想法，实现组件布局，组件功能分离化。 上述代码为…"}, {"id": "6969447104808747015", "title": "基础篇:带你打开Vue的大门（中） ", "desc": "第六部分：Vue组件基础 1.组件的基本使用（先注册、再使用） 1.1全局组件注册和使用 注册全局组件 其实这一步简化了一下： 使用全局组件 1.2.局部注册和使用 每个组件实例中都有componen"}, {"id": "6844904096021872648", "title": "谈谈vue3.0要更新的内容相关笔记", "desc": "1. 基于模板编译和Vitrual DOM性能方面的优化 我们知道，vue是使用Vitrual DOM内部渲染机制，在vue3.0中，Vitrual DOM进行了一次完全的重构，结合了模板编译等小技巧来提高性能，使得初始渲染的提速最高可以达到翻倍。 Repeat n times…"}, {"id": "6844903497649881096", "title": "从Vue.js源码看异步更新DOM策略及nextTick", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6990001891249766431", "title": "vue中点击按钮切换效果（v-if的简单应用）", "desc": "需求：两个按钮（1,2），三个页面（A,B,C）,点击按钮（1）跳转到其中一个页面（A）时，对应的按钮1不显示，显示按钮（2,3），同理点击按钮（2），跳转到B页面，按钮（2）不显示，显示（1,3）按"}, {"id": "6903353895544684557", "title": "简述 js 观察者模式和发布订阅模式", "desc": "发布订阅模式 是 观察者模式的改造，所以本文会先编写一个基础的 观察者模式 案例，在此基础上再编写一个 发布订阅模式 案例，然后结合两者的特点，分析一些前端开发过程中常见的实践案例，帮助大家学习理解这两者的基本概念和区别。"}, {"id": "6879284431060893703", "title": "vue源码解析之inject/provide原理", "desc": "依赖注入优点：祖先组件不需要知道哪些后代组件使用它提供的属性；后代组件不需要知道被注入的属性来自哪里；缺点：组件间的耦合较为紧密，不易重构；提供的属性是非响应式的；源码分析组件实例初始化的时候会调用V"}, {"id": "6951230826461790238", "title": "活动搭建平台raptor在bigo实践", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。一，什么是raptorraptor是Bigo内部一个为开发提效、运营赋能、可视化Web活动页制"}, {"id": "6991391231360106503", "title": "Vue基础语法", "desc": "学前准备 vue官网：https://cn.vuejs.org/ 工具： webstorm， vscode Vue基础 初体验 效果 列表展示 效果展示 浏览器追加数据 app.movies.push"}, {"id": "6917984234238033928", "title": "Vuex之Mutations详解【七日打卡】", "desc": "通俗的理解mutations，里面装着一些改变数据方法的集合，这是Vuex设计很重要的一点，就是把处理数据逻辑方法全部放在mutations里面，使得数据和视图分离。 mutation结构：每一个mutation都有一个字符串类型的事件类型(type)和回调函数(handler…"}, {"id": "6944266783423627300", "title": "Vue3 生成图片验证码组件", "desc": "突然用到图片验证码，从其他论坛上东拼西凑出本地前端生成验证码图片的组件，做一下笔记。"}, {"id": "6972444510181670949", "title": "element中el-upload取消自动上传后 before-upload失效  如何实现文件校验", "desc": "element中el-upload取消自动上传后 before-upload失效 如何实现文件校验"}, {"id": "6989603389546397709", "title": "Vue diff算法源码浅析", "desc": "在 vue 中会维护一个和 DOM 节点对应的 vnode 对象 vnode 的 children 数组中对应子节点的 vnode 对象，所以在 vue 中通过 vnode 和真实的 DOM 树进行映"}, {"id": "6844903603497336845", "title": "收藏好这篇，别再只说“数据劫持”了", "desc": "要解答问题，首先要理解问题： 数据双向绑定 是一种模式，web语境下一般指数据从dom到JS对象之间的自动同步。DOM 与 JS 被隔离在两个不同的运行时上，互相之间需要通过命令式的 DOM接口 沟通：DOM 需要正确触发事件，将信息传输给JS程序；而JS也需要在状态变更后，有…"}, {"id": "6927473239228841998", "title": "Vue2.1.7 源码学习 | HcySunYang", "desc": "原本文章的名字叫做《源码解析》，不过后来想想，还是用 “源码学习” 来的合适一点，在没有彻底掌握源码中的每一个字母之前，“解析”就有点标题党了。建议在看这篇文章之前，最好打开 2.1.7 的源码对照着看，这样可能更容易理解。另外本人水平有限，文中有错误或不妥的地方望大家多多指正…"}, {"id": "6868560126602412045", "title": "用el-menu自动生成无限级菜单 - 递归", "desc": "简约菜单都可以使用el-menu生成，水平的菜单或者垂直的菜单。 本文是希望能帮助需求者更快熟悉el-menu的使用，以及传入菜单项能快速生成n级菜单。 使用的时候，最外层是el-menu，其上面属性，是用来配置整个菜单，如水平还是垂直、背景色、文字色、默认激活的菜单子项、默认…"}, {"id": "6926144439543037966", "title": "Nzoth 一个用于快速构建自己的 vue 组件库的基础模板框架", "desc": "我们希望在一个大型项目里，能够以一种比较友好的方式将一个复杂的场景解耦成独立的模块，对这些独立模块再进行维护，达到快速复用和组件化的目的。"}, {"id": "6844903502544633869", "title": "vue-cli npm run build空白页的两个坑 webpack gzip文件压缩优化打包文件", "desc": "npm run build 是vue-cli用来打包项目的命令行，本文是关于vue-cli打包的一些常见的坑，会尽量详细的写每个步骤，大家可以一边看着文章，一边打包试试。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 这里初始化一个项目，因为导致…"}, {"id": "6911964058644135943", "title": "让el-form更好用，通过配置的方式", "desc": "element-ui虽然有el-form组件，但是仍然需要手动写el-form-item。 这里希望进一步抽离配置，在el-form的基础上封装个enhanced-el-form组件。 综上，enhanced-el-form组件的大概就出来了。 现在有一个很简单的表单，需要填写…"}, {"id": "6844903841482145799", "title": "为管理复杂组件状态困扰？试试 vue 简单状态管理 Store 模式", "desc": "文档中的提到的 Store 模式却鲜有人去使用讨论。笔者在研究 ElementUI的Table组件的代码组织方式，以及在自己 ElementUI 表单编辑项目中实践之后觉得其在复杂组件组织上非常有用，是一个被忽视的组件通信方法。 ElementUI 的 Table 组件，功能很…"}, {"id": "6844903633742462983", "title": "webpack 4 ：从0配置到项目搭建", "desc": "webpack4发布以来，我写项目都是用脚手架，即使再简单的项目，真的是really shame。。虽然道听途说了很多 webpack4 的特性，却没有尝试过，因为它给人的感觉就是，em...很难。但是今天我从最简单的部分开始，一点点搭建起一个项目。 而 webpack4 的 …"}, {"id": "6926347150855143431", "title": "解决 vue cli4 安装sass后，一写lang= \"scss\"就报错  this.getOptions is not a function", "desc": "我用”npminstallnode-sass--save“”npminstallsass-loader--save\"下载的sass依赖，默认下载的就是最新版，然后一写lang=\"scss\"，就跑不成功"}, {"id": "6981356111106408484", "title": "Vue 配置全局样式（style-resources-loader）", "desc": "一、简介 在样式引入时，对于变量的引入，需要在每个文件里都要引入一遍，为了避免每次使用时都需要单独引入一遍的问题，采用了 style-resources-loader。 在确保安装指定 CSS 解析器"}, {"id": "6988014110877810724", "title": "vue composition api  一个迷人的新特性", "desc": "vue3新特性中，迷人的存在必然就是vue composition API。本文主要介绍了其用法和一些常见API的介绍，希望能通过阅读本文章对其有初步的认识"}, {"id": "6960848329928343566", "title": "🔥Picker层级不够？来看看这里是怎么实现的吧", "desc": "Picker的层级不够，来看看这篇文章是怎么写的吧？ Picker通常以fixed布局，fixed布局并不是基于viewport为底板，而是当前的层叠上下文"}, {"id": "6975572545244233741", "title": "Vue：构造选项之 computed 和 watch", "desc": "computed是计算属性，watch是侦听。 被计算出来的属性就是计算属性，不需要加括号，可以当属性一样用；根据依赖可以自动缓存，如果依赖属性不变，就不会重新计算。"}, {"id": "6999284756902838303", "title": "vue父子组件传递数据，调用父子组件方法", "desc": "父子组件传递数据 父组件传递数据给子组件，通过v-bind传递 子组件通过props获取父组件传递的值 子组件改变父组件传递来的值，父组件通过 .sync 属性。这是一个语法糖，开启子组件调用upda"}, {"id": "6952314507473453086", "title": "记一次 Vue 项目重构", "desc": "随着公司项目越做越复杂，因前期团队对 Vue 使用经验不足，导致留下比较多坑。再这样下去项目会变成越来越难以维护，于是我对主管说：“主管，我想重构”，便有了这次的重构经历。经过对项目分析，主要存在以下"}, {"id": "6898192222186012680", "title": "vue+node.js手把手教你搭建一个直播平台（六） 实时弹幕功能", "desc": "最近都快把小羽忙傻了都，头发也不见了好几根，555。。。其实我也不想消失辣么久的，老铁们原谅小羽呗，常言道帅哥肚里能撑船，对吧~ 话说真的好久没写博客了，久到小羽都忘了原来写了些什么了，哈哈哈。本期主要讲websocket实时通讯接口，是不是很期待呀~ 在src/api/下新建…"}, {"id": "6844904170252664846", "title": "Vue项目优化总结", "desc": "v-show 根据表达式之正假值，切换元素displayCSS property。当条件变化时该指令触发过渡效果。适用于频繁操作，不会触发浏览器的重排。 v-if 根据表达式的值truthiness来有条件地渲染元素。在切换时元素及它的数据绑定/组件被销毁并重建。如果是<tem…"}, {"id": "6993888751290171422", "title": "Vue到底如何实现数组响应式的？", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 大家都知道，Vue2.0 实现数据响应式主要是依赖 Object.defineproperty 这个API，可实际上 defineprope"}, {"id": "6992018709439053837", "title": "尤雨溪国外教程：亲手带你写个简易版的Vue！", "desc": "很多时候我们都对源码展现出了一定的渴求，但当被问到究竟为什么想看源码时，答案无非也就那么几种： 为了面试 为了在简历上写自己会源码 了解底层原理 学习高手思路 通过源码来学习一些小技巧(骚操作)"}, {"id": "7007423048219361310", "title": "10分钟快速实现数据双向绑定", "desc": "概念 双向绑定概念其实很简单，就是视图（View）的变化能实时让数据模型（Model）发生变化，而数据的变化也能实时更新到视图层。我们所说的单向数据绑定就是从数据到视图这一方向的关系。 分析 1、响应"}, {"id": "6922641008106668045", "title": " 揭秘 Vue.js 九个性能优化技巧", "desc": "这篇文章主要参考了 Vue.js 核心成员 Guillaume Chau 在 19 年美国的 Vue conf 分享的主题：9 Performance secrets revealed，分享中提到了九个 Vue.js 性能优化的技巧。 我看完他的分享 PPT后，也阅读了相关的项…"}, {"id": "6940454764421316644", "title": "Vue3.0 新特性以及使用经验总结", "desc": "Vue3.0 在去年 9 月正式发布了，看大家都有在热情的拥抱 Vue3.0。今年初新项目也开始使用 Vue3.0 来开发，这篇文章就是在使用后的一个总结， 包含 Vue3 新特性的使用以及一些使用经验分享。 使用 Vue2.x 的小伙伴都熟悉，Vue2.x 中所有数据都是定义…"}, {"id": "6960506633839443981", "title": "昨晚尤大的连麦直播，我学到了很多！！！", "desc": "昨晚朋友圈已经被连麦尤大的直播刷屏了，主要就是答答疑，聊聊天～ 总共大概聊了一个半小时。 我也抱着 「学习」 、「长见识」 的态度去直播间听了一个多小时"}, {"id": "6973156414210441247", "title": "Vue+微前端(QianKun)落地实施和最后部署上线总结", "desc": "微前端(QianKun)落地级实施和最后部署上线 历时不到两个月，来到新公司后，接到新需求：“要把ERP系统拆分出来，里面有包括PMS、OMS、WNS等等”模块。 当时的第一个想法就是微前端，那么接下"}, {"id": "7002774615273504776", "title": "vue基础复习", "desc": "vue学习文档 前言 本来只为面向面试总结一下vue文档中本身就可以回答的面试问题，本来只想单纯的记录一些概念，不过后来发现如果概念离开代码会变得索然无味，便将其用法也记录在此，方便日后自己查询。只是"}, {"id": "7006596948220182542", "title": "Vue-cli构建多页应用方法", "desc": "vue的单页应用，可以说是一个很强大的存在。 但是，并非所有的应用都是单页的，如果需要构建多页应用应当怎么做呢？"}, {"id": "7007301217915240462", "title": "Vue项目模板 - Js规范", "desc": "Vue项目模板 - Js规范 前言 如今前端使用Eslint插件来检测代码。本文则使用eslint和vscode工具实现前端代码自动检测和修复的功能。 本项目： 插件：eslint 安装eslint "}, {"id": "7007000260132208653", "title": "Vue（v2.6.14）源码解毒（三）：响应式原理", "desc": "Vue 一大特点就是数据响应式，数据的变化会作用于视图而不用进行 DOM 操作。原理上来讲，是利用了 Object.defifineProperty()，通过定义对象属性 setter 方法拦截对象属"}, {"id": "7004004799725174798", "title": "这两个前端下载库推荐给你", "desc": "简介 本文介绍两个下载库的使用 1. js-file-download 2. FileSaver.js 两者各有优劣。 使用库的意义在于，库的作者已经处理了很多问题比如兼容。而越多人使用的库也越有保证"}, {"id": "6992370132148305927", "title": "vue面试总结", "desc": "总结一些vue相关的知识，将笔记整理跟大家分享，有些知识会经常在前端面试的时候会问到，所以做个记录，希望对大家有所帮助，如果有什么问题，可以指出，会积极修正。 如果大家喜欢，可以点赞"}, {"id": "6991481121540145160", "title": "我给公司封装的组件帮公司提效了60%｜ 8月更文挑战", "desc": "前置内容 在公司开发中或多或少都会有几个管理系统的项目，而对于这些系统大多页面都是表单、表格组成，为了不花费太多精力在这些不那么需要定制化的页面上，一般都会选择去用组件库完成，这个时候就如果将这些简单"}, {"id": "6975864046058733576", "title": "从Vue2.0到React17——React开发入门", "desc": "找工作时发现有一些公司是以React作为技术栈的，而且薪资待遇都不错，为了增加生存的筹码，所以还是得去学一下React，增加一项求生技能。本文将带你从Vue2.0出发入门React17。"}, {"id": "7007295422460854280", "title": "手写Vue2.0源码（二）初次渲染原理", "desc": "上篇文章介绍了Vue的响应式原理，Vue实例化过程中，在初始化数据之后，就进入渲染过程，本文只介绍初次渲染的流程"}, {"id": "7006988485949128741", "title": "Vue3追本溯源(七)执行render生成VNode对象", "desc": "上文详细解析了模版编译generate函数的内部实现，是如何拼接render字符串的。 本文将回归到模版编译的上层方法中，解析如何执行render函数生成VNode对象，利用patch函数将VNode"}, {"id": "7006616545119961101", "title": "Vue官方文档里没告诉你的神秘钩子——@hook", "desc": "一个关于“如何实现父组件监听子组件生命周期“引发的vue开发小技巧；揭秘Vue官方文档里没有告诉你的神秘钩子@hook"}, {"id": "7005198648132763684", "title": "如何打造属于自己的组件库？vue3组件库工程化实战从0-1，建议收藏！", "desc": "真的是手把手教你如何打造一个类似于element的组件库，超级详细，文章将以vue3为例，强烈建议观看以及收藏！！！"}, {"id": "7006000062908071944", "title": "Vue果果记账-保存至 LocalStorage", "desc": "Moeny.vue读取各组件数据 .sync 修饰符 在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子"}, {"id": "6981031288803164173", "title": "Vue后台管理系统怎么做权限验证和动态路由，谁来做？", "desc": "好久都没有写过文章了，主要是因为还是觉得自己才疏学浅，如果把自己学到的东西以那种类似教程的形式写出来的话，怕误认子弟。然后自己也还没有工作，也没有什么好的工作经验可以分享。"}, {"id": "6844903583725387783", "title": "vuejs单页应用的权限管理实践", "desc": "在众多的B端应用中,简单如小型企业的管理后台,还是大型的CMS,CRM系统,权限管理都是一个重中之重的需求,过往的web应用大多采取服务端模板+服务端路由的模式,权限管理自然也由服务端进行控制和过滤.但是在前后端分离的大潮下,如果采用单页应用开发模式的话,前端也无可避免要配合服…"}, {"id": "6844903977016885255", "title": "Axios 详解", "desc": "一、axios简介基于promise，用于浏览器和node.js的http客户端二、特点支持浏览器和node.js支持promise能拦截请求和响应能转换请求和响应数据能取消请求自动转换JSON数据浏"}, {"id": "6844904136178139150", "title": "解读 vue-class-component 源码实现原理", "desc": "使用过一段时间 class 来定义组件，要用 vue-property-decorator 提供定义好的装饰器，辅助完成所需功能，对这个过程好奇，就研究了源码。内部主要依靠 vue-class-component 实现，所以将重点放在对 vue-class-component …"}, {"id": "6895624952301486093", "title": "Vue2.0源码分析：组件化(上)", "desc": "由于掘金文章字数限制，不得不拆分上、下两篇文章。 在之前几个章节中，我们提到过很多次组件的概念，组件在我们日常的开发过程中出现频率是非常高的，它也是Vue的两大核心之一：数据驱动和组件化。 在前面章节我们已经介绍完了数据驱动，在这个章节我们会着重介绍与组件化相关的知识，我们将从…"}, {"id": "6844903619238559751", "title": "用vue做项目的一些总结", "desc": "7. 设置不同路由下的页面title ./utils/index.js 8. 使用新的vue-cli工具，使用yarn初始化项目报错command failed: yarn，"}, {"id": "6844903543204216845", "title": "Vue异步更新队列原理从入门到放弃", "desc": "声明：本文章中所有源码取自Version: 2.5.13的dev分支上的Vue，不保证文章内观点的绝对准确性。文章整理自本周我在小组的内部分享。 我们目前的技术栈主要采用Vue，而工作中我们碰到了一种情况是当传入某些组件内的props被改变时我们需要重置整个组件的生命周期（比如…"}, {"id": "6993339055169601549", "title": "【Vue2.x 源码学习】第三十三篇 - diff算法-收尾+阶段性总结", "desc": "【Vue2.x 源码学习】第三十三篇 - diff算法阶段性梳理：初渲染与视图更新流程；diff 算法的外层更新；diff 算法的比对优化；diff 算法的乱序比对；初渲染和更新渲染判断；"}, {"id": "6993325141753069605", "title": "《图解Vue3.0》- 第8节 - 组件样式", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 组件的样式一般就是绑定到class或者绑定到style。这两种方式又分别可以使用对象语法或者数组语法。 class绑定：对象语法或者数组语法"}, {"id": "6844903798247260168", "title": "基于刮刮卡Vue组件发布一个NPM包", "desc": "项目中需要实现一个刮刮卡的模块，项目结束后沉淀项目时刚好可以把刮刮卡模块封装好，在下次新的项目中要用到时，可以更好的提高项目的效率，当然也更好地提供给其他小伙伴使用。 1. 工作流的搭建 执行后，根据组件录入package.json的信息。 在项目这里我选择的是use sass…"}, {"id": "6844903639203446798", "title": " 基于virtual dom 的canvas渲染", "desc": "起初，在公司做一些活动页的时候，经常需要用到截图分享的千人千面的功能，而且这种需求并不止一两次，而是经常会出现在各种各样的截图场景。第一次碰到这种需求的时候，基本上都会去手撸canvasAPI去做渲染功能，这种情况的步骤大致如下： 面临的主要问题是复用性太差，其次是性能上也有问…"}, {"id": "6993271927758553119", "title": "postMessage解决Vue页面到React页面的跨域问题实践", "desc": "Vue项目中通过iframe嵌入了React项目的某个页面，通过postMessage解决页面之间的通信问题实践。"}, {"id": "6844903637651554318", "title": "基于Vue+element-ui 的Table二次封装", "desc": "本人第一次写这个写的不好还望指出来作为一个由于公司产品的升级然促使我从一个后端人员自学变成前端的开发人员！公司做的数据管理系统所以离不开表格了然后表格样式统一啥的就想到封装一个element-ui里面"}, {"id": "6844903609058983944", "title": "js技巧：十几行的代码实现vue.watch", "desc": "相信很多的用vue的人都知道vue双向绑定的原理建立在，给属性绑定了getter和setter，在属性被改变的同时触发视图的再渲染。而本期也是借助这两个内置方法实现vue内的watch getter 是一种获得属性值的方法，setter是一种设置属性值的方法。 而 consol…"}, {"id": "6844903817830465544", "title": "Vue页面级缓存解决方案feb-alive (上)", "desc": "情况二: 如果点击浏览器自带前进按钮，则还是从缓存中读取页面。 这个场景需求着重强调了缓存，缓存带来的好处是，我上次页面的数据及状态都被保留，无需在从服务器拉取数据，使用户体验大大提高。 -/a跳到/b，再跳转到/a 的时候，页面中的数据是第一次访问的/a页面，明明是链接跳转，…"}, {"id": "6844903860599783438", "title": "细谈 vue - transition-group 篇", "desc": "本篇文章是细谈 vue 系列的第四篇，按理说这篇文章是上篇 《细谈 vue - transition 篇》中的一个单独的大章节。然鹅，上篇文章篇幅过长，所以不得已将其单独拎出来写成一篇了。对该系列以前的文章感兴趣的可以点击以下链接进行传送 书接上文，上篇文章我们主要介绍了 &#…"}, {"id": "6844903610074021896", "title": "Vue: method/computed/watch的使用和区别 ", "desc": "vue初次学习的心得"}, {"id": "6844903887107784711", "title": "『前端优化』——  iview中的内存泄露", "desc": "最近产品经理跟我反馈公司的一个系统频繁切换主菜单时，浏览器占用内存一直在飙升。当时第一反应内存泄露了。 经过场景重现，发现从A主菜单切到B主菜单,在切回到A主菜单，浏览器占用内存翻了一倍，基本可以确认是内存泄露。 根据BUG场景重现，浏览器占用内存是翻了一倍，可以初步确定是Vu…"}, {"id": "6917940704347160583", "title": "八. 使用vue+antd搭建后台管理系统(实现篇)        ", "desc": "写在前面上一篇完成了后台管理系统的基础搭建和一些具体功能，现在就直接开始完成页面功能的具体实现和项目优化。页面基础功能实现1.登录页分为用户名+密码登录和手机号+验证码登录两种，验证码mock随机六位"}, {"id": "6973835379942096932", "title": "详解矩阵算法在电商sku组件中的应用二", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 前言 上一篇我们讲到了 sku 选择组件利用矩阵算法解决动态变化选项的需求，依旧遗留了一个大"}, {"id": "6844903889011998733", "title": "Vue全栈开发之百度贴吧", "desc": "这个百度贴吧的项目是 vue + koa + sequelize 的项目。 前端代码初始化是用来vue-cli3的脚手架。 该项目的权限控制只采用了一个token，比较简单，但不是很安全。有兴趣可以看看权限控制 没有API，也没写爬虫，所以数据都是手写的，数据量很少，所以一些效…"}, {"id": "7005226766323154957", "title": "深入了解Vue中nextTick", "desc": "Vue中nextTick的使用 在vue中开发当中，我们有时需要拿到dom元素更新以后的信息，当我们给变量赋值以后立即去获取dom元素信息，通常是获取到的是更新以前的，在此需要借助nextTick这个"}, {"id": "6844903865255477261", "title": "Vue3.0 前的 TypeScript 最佳入门实践", "desc": "其实Vue官方从2.6.X版本开始就部分使用Ts重写了。 我个人对更严格类型限制没有积极的看法，毕竟各类转类型的骚写法写习惯了。 1. 使用官方脚手架构建 新的Vue CLI工具允许开发者 使用 TypeScript 集成环境 创建新项目。 只需运行vue create my-…"}, {"id": "6994694671905587214", "title": "5 个可以加速开发的 VueUse 函数库", "desc": "VueUse 是 Anthony Fu 的一个开源项目，它为 Vue 开发人员提供了大量适用于 Vue 2 和 Vue 3 的基本 Composition API 实用程序函数。 它有几十个解决方案，"}, {"id": "6846687590704381959", "title": "学会使用Vue JSX，一车老干妈都是你的", "desc": "连续几篇文章，每篇都有女神，被掘友给吐槽了，今天不提了女神了，反正女神都是别人的（扎心了）。这两天小编看了腾讯与老干妈的事情，晚上馒头夹老干妈吃起来都感觉很带劲。今天这篇文章将给大家小编在项目中使用JSX的一些实战经验。其实一般情况下写Vue还是比较推荐template的写法的…"}, {"id": "6983582201690456071", "title": "实现无感刷新token我是这样做的", "desc": "前言 最近在做需求的时候,涉及到登录tokon,产品提出一个问题:能不能让tokon过期时间长一点，我频繁的要去登录。 前端：后端，你能不能把tokon 过期时间设置的长一点。 后端：可以,但是那样做"}, {"id": "6952762391566221343", "title": "🔥「实战」vue3无限滚动", "desc": "\"实战\"系列是Blue带着大家做东西的栏目，程序这东西没什么难的，就只是多动手，东西做出来了知识也就掌握了，所以在这个系列中，希望大家多多动手不会了就问（有问题请留言），从而真正掌握所学的知识，欢迎点"}, {"id": "6927481938831736839", "title": "我从 Vuejs 中学到了什么", "desc": "框架设计远没有大家想的那么简单，并不是说只把功能开发完成，能用就算完事儿了，这里面还是有很多学问的。比如说，我们的框架应该给用户提供哪些构建产物？产物的模块格式如何？当用户没有以预期的方式使用框架时是否应该打印合适的警告信息从而提升更好的开发体验，让用户快速定位问题？开发版本的…"}, {"id": "6876240277208563720", "title": "技术胖的 TypeScript免费视频图文教程（2W字）", "desc": "00. B站视频观看地址 出这个教程也是为了迎接Vue3的推出，今晚更新最后一集视频后，开始更新Vue3视频。 我原本准备更新 Vue3.x 教程的，由于官方文档一直不出，我又不敢瞎讲，所以干脆先来一个 TypeScript 教程热身，TypeScript 已经在我们公司全面使…"}, {"id": "7002084234428940319", "title": "精读文档，快速了解Vue工具", "desc": "以图的形式总结vue相关知识点，一来可以快速了解相关知识，二来方便以后复习和查看，欢迎阅读！！！！！"}, {"id": "6978773901736149029", "title": "手写 Vue 系列 之 从 Vue1 升级到 Vue2", "desc": "手写 Vue 系列 之 从 Vue1 升级到 Vue2，将上篇文章中写的 lyn-vue 升级到 Vue2"}, {"id": "6898120355781705736", "title": "【🚨万字警告】了不起的Vue3（上）", "desc": "随着前端标准化的发展，目前主流浏览器对很多JS新特性都普遍支持了，其中一些新特性不仅解决了很多技术上的实现难题，还带来了更好的性能提升。 在Vue3中，最重要也更为人所知的就是ES6的Proxy。 我们知道，在Vue2中对数据的侦听劫持是在组件初始化时去遍历递归一个对象，给其中…"}, {"id": "6902730555135197198", "title": "正式介绍一下Element3这个小朋友", "desc": "后来我还和element团队的iamkun通过一次话，对方也表示认可我们为了教育理念的开源。就一直维护下来了"}, {"id": "6867123074148335624", "title": "Vue3.0全家桶最全入门指南 - vue3.0新特性  (2/4)", "desc": "本系列文章目录Vue3.0全家桶最全入门指南-快速搭建(1/4)Vue3.0全家桶最全入门指南-vue3.0新特性(2/4)Vue3.0全家桶最全入门指南-vue-router@4.x和vuex@4."}, {"id": "6887359442354962445", "title": "让你30分钟快速掌握vue 3", "desc": "经过了漫长的迭代，Vue 3.0终于在上2020-09-18发布了，带了翻天覆地的变化，使用了Typescript 进行了大规模的重构，带来了Composition API RFC版本，类似React Hook 一样的写Vue，可以自定义自己的hook ，让使用者更加的灵活，接…"}, {"id": "6959348263547830280", "title": "据说 99% 的人不知道 vue-devtools 还能直接打开对应组件文件？本文原理揭秘", "desc": "不知道你们有没有碰到这样的场景，打开开发的页面，却短时间难以找到对应的源文件。 这时你可能会想要是能有**点击页面按钮自动用编辑器打开对应文件**的功能，那该多好啊。"}, {"id": "7000273590654337032", "title": "干货分享，FormMaking表单设计器快速实现表单的详情展示和打印", "desc": "我们在实际的表单应用中，常常会遇到表单编辑好后，如何快速的展示详情页面又或者直接能够打印呢。接下来我们会在本文中详细道来。 设计表单 通过 FormMaking 设计出表单。这里我们使用表格布局"}, {"id": "7004717939110707236", "title": "Vue 路由回退解决方案 -- vue-route-manager ", "desc": "使用 路由管理器 解决项目中的花式 back 该插件中会记录每次跳转的 route name, 方便回退到 home 以及指定页面"}, {"id": "7002791228806791199", "title": "全面介绍一下vuex，快到碗里来~这是一个系列博客（一)", "desc": "vuex是一个专门为vue.js设计的集中式状态管理架构。集中式存储和管理应用程序中所有组件的状态。Vuex 也集成到 Vue 的官方调试工具，一个 Vuex 应用的核心是 store（仓库，一个容器"}, {"id": "6964664022541008932", "title": "帮你在Vueconf上收获更大的一篇文章", "desc": "hi 各位大兄弟好，最近前端圈最热门的事，就是5.22的vueconf了，看了下议题都很有意思，考虑到很多同学对vue3还不是那么熟悉，我给几个议题写一个预习资料吧，帮助大家在22号当天收获更大"}, {"id": "7005350058816176165", "title": "vue 模板编译原理", "desc": "我们都知道 vue 写代码是需要按照固定的格式，比如下面这样： 把 html 的内容写在 template 里面，经过 vue 的处理，首先会把模板转换为 AST 抽象语法树，然后把 AST 转换为"}, {"id": "6844903973061656590", "title": "深入了解vm.$nextTick和Vue.nextTick", "desc": "在我的上上篇提到vue是异步渲染页面的。当我们想要获取页面被渲染之后的值的时候，由于宏任务执行的比较慢，所以如果能在微任务中获取会更好。Vue给我们提供了两种函数: vm.\\$nextTick和Vue.nextTick。 在页面重新渲染、DOM更新后，VUE会立刻执行$next…"}, {"id": "6917173986196406280", "title": "七日打卡-vue给对象动态添加属性和值", "desc": "当我们给props，或者data中被观测的对象修改属性的时候，不能直接修改，必须使用Vue.set方法。 Vue.set方法用来修改对象的属性。如果要增加属性的对象是响应式的，那该方法可以确保属性被创建后也是响应式的，同时触发视图更新。 注：所修改的对象必须为响应式对象，且操作…"}, {"id": "6903012926660018183", "title": "5分钟了解Vue3 的新特性", "desc": "Vue.js 从 1.x 到 2.0 版本，最大的升级就是引入了虚拟 DOM 的概念，它为后续做服务端渲染以及跨端框架 Weex 提供了基础。本文主要讲的是vue2到vue3.0的优化点。 monorepo 把这些模块拆分到不同的 package 中，每个 package 有各…"}, {"id": "6844904181271117837", "title": "Spring Boot+Vue前后端分离微信公众号网页授权解决方案", "desc": "全网最全的前后端分离微信网页授权解决方案。如果有更好的优化方案，欢迎多多交流，文末有作者联系方式，欢迎叨扰。 但是没有讲得很明白。其实两者的区别就是： 第二，两者的每日限制调用凭次不同，普通access_token每日2000次，获取网页授权access_token不限次数，获…"}, {"id": "6844904024102141960", "title": "研究轮子，Vant源码分析1—Row/Col", "desc": "现在太多成熟、优秀的轮子功vuer使用，久而久之会有种“只会用轮子跑，不知道怎么造”的感觉，所以本篇就抛开乱七八糟的业务需求，来看看一个优秀的ui component是如何实现的。 现在手机端电商开发非常普遍，vant又能够满足大多数使用场景，所以以它为研究对象，涉及到的技术栈…"}, {"id": "6994400957161275400", "title": "虚拟dom和diff算法--2（手写h函数）", "desc": "写在前面：文章来源于Vue源码解析系列课程_哔哩哔哩_bilibili侵删 手写h函数：看ts代码，写js代码 1.看ts代码 最终是使用vnode函数返回了一个东西，接下来看vnode.ts 所以h"}, {"id": "6908615352989515789", "title": "vue2.6+  实现tinymce5富文本编辑器以及图片上传", "desc": "安装tinymce下载中文语言包地址：https://www.tiny.cloud/get-tiny/language-packages下载选中的中文包下载完之后在项目里新建public文件夹1）在p"}, {"id": "6844904003097067527", "title": "【手把手系列之】实现一个简易版vue2", "desc": "项目目录结构与vue2源码一致，通过本项目的学习，你也能对vue的具体实现有一个较全面的了解。相信当你去阅读vue源码时会更得心应手。"}, {"id": "6844903575529717768", "title": "基于vue搭建一个简易版豆瓣", "desc": "前段日子业余时看了下vue，想着怎么也得写个实例来加深一下，于是便基于vue构建了一个简易版豆瓣。由于工作中使用的并不是vue框架，对vue的了解也不够深入，这也是本人第一次写技术博文，因此，有纰漏之处还请大家批评指正。 项目简介：本项目主要是基于vue，构建一个简易版豆瓣，实…"}, {"id": "6949785721502695461", "title": "Vue2/Vue3中的代码逻辑复用对比（mixins、自定义hook）", "desc": "前言mixins是Vue2.x Options API中常用的代码逻辑抽离手段，在Vue3.x中也同样可以使用。虽然好用，但其仍有一些比较显著的缺点，而Vue3.x引入的Composition API"}, {"id": "6995942432315539487", "title": "【Vue2.x 源码学习】第四十篇 - 组件部分 - 组件的生命周期", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 一，前言 上篇，介绍了组件部分-组件的编译，主要涉及以下几部分： 组件编译流程介绍：html->render->vnode 创建组件虚拟节"}, {"id": "6867716120087003144", "title": "vue3.0/vite/typescript 重写upload组件", "desc": "大家好~ 很高兴在这里写下了自己的第一篇文章。 哪些写得不好不要吐槽，哈哈 ~ 纯属个人分享学习，如果能帮到你会是我的荣幸。 里面有关于这个组件的完整代码，还有一些todo、发布订阅、观察者等相关代码。 1、提高复用性、提升开发效率、解耦等等。 2、像上传组件，我们需要考虑自身…"}, {"id": "6844903625127362567", "title": "vue使用中的内存泄漏", "desc": "今天看到一篇关于js使用中内存泄露的文章，以及chrom浏览器查看内存泄漏的方法，决定留着。 什么是内存泄露？内存泄露是指new了一块内存，但无法被释放或者被垃圾回收。new了一个对象之后，它申请占用了一块堆内存，当把这个对象指针置为null时或者离开作用域导致被销毁，那么这块…"}, {"id": "6844903673517211655", "title": "[译] Vue: scoped 样式与 CSS Module 对比", "desc": "It should not come as a surprise that CSS in modern web development is far from perfect. Nowadays, projects are usually quite complex and, …"}, {"id": "6872213286729973774", "title": "实现一个不太一样的树状图组件", "desc": "某次需要在页面上实现一个用于反映节点间父子关系的树状图，如下： 图1在线Demo一般来说，这种图表类的功能，都会通过引用第三方库来实现，一开始我也是打算想直接引入一个库来完成这个功能，但是我大概找了一"}, {"id": "6982737347234250789", "title": "vue中OSS文件下载", "desc": "普通文件下载和音视频下载的不同方法，并且有直接从oss里面去获取临时下载链接的方法；同时最后用a标签进行下载"}, {"id": "6883043976413184013", "title": "无星的electron之旅（六）——electron 应用协议唤起", "desc": "搜半天，全是基于协议的。protocol 这就让人很难受了。 答案是：有。 既然要在安装的时候写进去，那么必定需要在打包的地方下功夫。 注意，mac和Windows协议是分开的。 1.mac上直接在这写就行。（亲测可行） mac的协议唤起，实质上是dmg安装文件后的info.p…"}, {"id": "6844903854354464781", "title": "vue项目sentry接入", "desc": "Sentry 是一个开源的错误追踪工具，可以帮助开发人员实时监控和修复系统中的错误。其专注于错误监控以及提取一切事后处理所需的信息;支持几乎所有主流开发语言(JS/Java/Python/php)和平台, 并提供了web来展示输出错误。 sentry 是一个开源的工具，可以自行…"}, {"id": "6844904169216671751", "title": "vue3.0创建项目及API讲解（二）", "desc": "检查一个值是否为一个 ref 对象。 检查一个对象是否是由 reactive 创建的响应式代理。 检查一个对象是否是由 readonly 创建的只读代理。 检查一个对象是否是由 reactive 还是 readonly 方法创建的代理。 如果参数是一个 ref 则返回它的 va…"}, {"id": "6996851680994131981", "title": "回首Vue3之API篇（三）", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 这篇文章我们来讲一下应用APImixin、mount和unmount的使用，以及我们需要注意的地方。 mixin 官方说，Mixin 提供"}, {"id": "6844903587542368264", "title": "前端面试问题小汇集", "desc": "要有套路。如何引导面试官问你擅长的领域就看自我介绍了。学历专业简述、项目细说、兴趣特长一句带过。 即使没有实际地阅读过源码，也要找别人分享的博客去了解其中的原理。 Vuex 其实是一个针对 Vue 特化的 Flux，主要是为了配合 Vue 本身的响应式机制。当然吸取了一些 Re…"}, {"id": "6844903591816216590", "title": "Mand Mobile - 基于金融场景的Vuejs组件库", "desc": "Mand Mobile 是由滴滴出行战略事业群前端团队基于Vuejs 2.0开发的移动端组件库。它遵循统一的视觉设计规范，由包括基础、表单、操作反馈和业务在内的四类组件组成。Mand Mobile致力于提升金融相关产品的用户体验，提高设计和研发效率，让复杂的场景变得简单。 金融…"}, {"id": "6873854082268790798", "title": "VueRouter源码解析(三)：router-link/router-view组件", "desc": "经过前面两篇文章的分析之后，终于迎来了最后一篇文章，关于vue-router/vue-link组件的分析。router-link在vue中，平常都不会写render函数，组件的render函数是静态模"}, {"id": "6990173015514284040", "title": "Vue组件注册(不用在每个页面导入)", "desc": "组件使用前，需要引入后再注册： 但如果组件多了后，每次都要先导入每个你想使用的组件，然后再注册组件，便会新增很多代码量 这时，我们需要借助一下 webpack 的 require.context() "}, {"id": "6990018362391265287", "title": "Vue系列：Vue2 响应式原理(手写简易MVVM)", "desc": "这篇文章通过简单地剖析源码的方式来理解vue的响应式原理。因为仅仅为了了解其原理，所以简单写了一下响应式大致的原理。还有很多边界情况和实际问题的处理和源码有出入，比如没有使用DOMdiff算法，没有递"}, {"id": "6942401812741750821", "title": "Vue组件通信的方式【面试题】", "desc": "父子间通信:父亲提供数据通过属性 props传给儿子；儿子通过 $on 绑父亲的事件，再通过 $emit 触发自己的事件（发布订阅）。 回调函数的用法其实和上一种差不多。 父组件提供数据，子组件注入。 ·provide· 、 ·inject· ，插件用得多。 $listener…"}, {"id": "6989995414980132872", "title": "对 Vue 数据响应式的理解", "desc": "什么是数据响应式 数据响应式是指，在改变数据的时候，视图也会跟着更新。 当修改 Vue 实例中的数据式，视图就会重新渲染，出现新的内容。这就是 Vue 的数据响应式。 Vue 是利用 Object.d"}, {"id": "6865626597450973197", "title": "算法的时间复杂度和空间复杂度", "desc": "算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别。 主要还是从算法所占用的「时间」和「空间」两个维度去考量。 时间维度：是指执行当前算法所消耗的时间，我们通…"}, {"id": "6844903866102710279", "title": "Vue-CLI and Leaflet （11）: 点聚合 Leaflet.markercluster", "desc": "第五篇文章收到了一个评论。网友@Rackar 问到了如何正确引入 Leaflet.markercluster。 其实不难，这里使用就简单介绍一下 Leaflet.markercluster 的用法。 有过地理信息系统开发经验的同学，应该对 makercluster 不陌生。在 …"}, {"id": "6844903741523509261", "title": "vue-admin 详细注释，必须手把手做项目系列之（二）", "desc": "这两天项目上线楼主要一大推的事要忙，要和产品撕逼，要和后台讨论一系列的问题要怎么处理，还要安抚团队小伙伴的情绪，更新的就比较慢，希望大家见谅。------- 之后的篇幅将会减少，加快更新速度 其次，有同学提出为什么不使用 vuex，在此我想说那句老话，不要为了使用vuex而使用…"}, {"id": "6844904070981877774", "title": "VUE源码系列五：组件是怎样生成的？(附详细源码解析)", "desc": "Vue的核心思想就是组件化，我们去开发一个页面，就是拿一堆组件去搭建，像堆积木一样，因此，今天我们来分析一下Vue组件是如何创建的，以及它的内部工作原理。 相信大家对上边对代码应该不陌生，h就相当于createElement方法，而它接收的是一个组件App，OK，让我们来逐一分…"}, {"id": "6844903631066513422", "title": "Vue核心思想：数据驱动、组件化", "desc": "DOM是数据的一种自然映射。 传统的前端数据交互是用Ajax从服务端获取数据，然后操作DOM来改变视图；或者前端交互要改变数据时，又要再来一次上述步骤，而手动操作DOM是一个繁琐的过程且易出错。 Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript …"}, {"id": "6953819275912019998", "title": "Vue3学习第三天", "desc": "样式绑定语法 直接赋值类名 样式部分: 代码部分： 我们可以直接像上面那样,直接将样式在代码中通过class赋值。 如果我们想实现颜色可以通过数据进行控制,我们可以怎么实现? 我们可以直接像上面这样,"}, {"id": "6844904077562757134", "title": "Vue组件化开发之拍照上传组件【插件化】", "desc": "1.传统组件引用需要先import，然后放到components，然后放在template，很繁琐。 2.项目不同，UI设计不同，需要改样式代码。 多个项目都有拍照上传功能，但是界面样式都不一样，每次还要临时改样式。 所以本着偷懒的原则，把这个组件拍照上传到客户端这部分功能和U…"}, {"id": "6982189720197414942", "title": "浅析vue3原理 （持续更新）", "desc": "手摸手写vue3，浅探其实现原理。详细的实现步骤和说明细节，结合流程图更清晰其对应关系。希望对你学习vue3又所帮助"}, {"id": "6977294194884739086", "title": "vue知识点整理", "desc": "1. MVC 与 MVVM 区别 2.为什么data是一个函数 组件中的data写成了一个函数，数据以函数返回值的形式定义，这样每复用一次组件，就会返回一份新的data,类似于给每个组件实例创建一个私"}, {"id": "6968500712762245134", "title": "Next.js 中的 SSG 与 SSR", "desc": "Next.js是最重要和最广泛使用的React框架之一。今天，它已经成为构建令人惊叹的网络应用的综合框架。 在使用Next.js时，可以列出许多优势。性能、SEO、丰富的开发者体验、TypeSc"}, {"id": "6972915120175317028", "title": "【Vue2.x 源码学习】第十篇 - 数组数据变化的观测情况", "desc": "【Vue2.x 源码学习】第十篇 - 数组数据变化的观测情况；实现了数组数据变化被劫持后，已重写原型方法的具体逻辑；数组各种数据变化时的观测情况分析；至此，数据劫持就全部完成了"}, {"id": "6977257605051875365", "title": "vue常用知识点总结", "desc": "理解错误的地方，欢迎指正。 1、你怎么理解Vue是一套渐进式框架这句话? 答：Vue是渐进的，可以理解成它可以逐步的去添加你想要的功能，跟Angular和React相比它没有强主张，是个轻量视图。 2"}, {"id": "6921215988511817742", "title": "级联选择组件（一）", "desc": "如何渲染数据的关键问题所在就是不知道数据到底与几层，就无法通过对每层进行 v-for 渲染。"}, {"id": "6844903845441568776", "title": "全网最easy的better-scroll实现下拉刷新和上拉加载", "desc": "移动端页面常见的一种效果：下拉刷新（pulldownrefresh）和上拉加载（pullupload），目的都是为了增强用户的体验效果，因此各种移动端滑动插件也是层出不穷，今天小编也在这里给大家推荐一个滑动插件：better-scroll。 利用better-scroll也很轻…"}, {"id": "6987553952858374157", "title": "Vue响应式原理中篇：结合源码来理解响应式原理！", "desc": "上一章我们通过从零构建了一个极简响应式系统后，对响应式系统中的Dep类、Watcher类和defineReactive方法都有了一定的了解。这一章我们将会结合源码来看看Vue到底是如何实现响应式系统。"}, {"id": "6987551472493789215", "title": "史上最全的vue.js源码详细解析（一）", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 虽然vue3已经出来很久了，但我觉得vue.js的源码还是非常值得去学习一下。vue.js里面封装的很多工具类在我们平"}, {"id": "6844903697005150222", "title": "Vue 进阶系列（一）之响应式原理及实现", "desc": "Vue进阶系列汇总如下，欢迎阅读。 Reactivity表示一个状态改变之后，如何动态改变整个系统，在实际项目应用场景中即数据如何动态改变Dom。 乍一看好像满足要求，但此时b的值是固定的，不管怎么修改a，b并不会跟着一起改变。也就是说b并没有和a保持数据上的同步。只有在a变化…"}, {"id": "6987395089253269541", "title": "vue 组件的 data 为什么必须是函数", "desc": "这篇文章介绍了一个很常见的知识点：vue组件的data为什么必须是函数，而直接使用 new vue 的data支持函数/直接对象的形式"}, {"id": "6844903914068787213", "title": "你理解错误的Vue nextTick", "desc": "VuenexTick使用过Vue的小伙伴们都知道，Vue里的nextTick可以获取到更新后的DOM,今天我就来讲解下nextTick里面究竟做了什么？开始讲解前，我们需要知道了解一个概念，那就是Ev"}, {"id": "6940645682583699487", "title": "vue使用v-html实现一段字符串中关键字（词）高亮效果", "desc": "需求：我们搜索某个关键字，后端返回给我们一个字符串，这个字符串中包含我们搜索的关键字，我们需要把这个字符串中的关键字部分加上高亮效果（类似于百度搜索关键字高亮的效果）。我们先看一下，大致类似的效果图： 如上图所示，需求很简单，就是关键字高亮。 解决方式有两种，第一种就是进行字符…"}, {"id": "6987332324601888775", "title": "ElementUI 02 - 重置el-form-item的label宽度", "desc": "Vue+Element配置Form，当在一排中排列多个el-col时，如果某个el-col的标签过于繁琐， 页面显示的结果会不美观。"}, {"id": "6987316404605157389", "title": "FormData 文件上传提交表单请求400的问题", "desc": "if (this.$refs.basicInfo.$refs.licenseNumberPhoto.$children[0].formData.append(\"licenseNumberPhoto\", this.$refs.basicInfo.$refs.licenseNumbe..."}, {"id": "6938702983014121485", "title": "Vue3响应式原理", "desc": "Vue3 的稳定版发布了很久了，去阅读官网的文档时发现推荐的一个优秀的 Vue 教程网站：Vue Mastery，里面的一篇Vue 3 Reactivity（Vue3 响应式）讲的是真的不错。跟着学完收获很多，顺着课程的思路总结一篇 Vue3 响应式的笔记，手动还原响应式的原理…"}, {"id": "6898888854678274056", "title": "看文档学Vue3丨setup", "desc": "Setup APIReference作为入口函数，一旦组件props被解析，其中的配置数据在组件实例被创建之前就被执行。所以setup()的两个参数中，第一个参数就是props。同样地，setup()"}, {"id": "6978745118224318501", "title": "新手村Vue3项目：写项目的全过程复盘", "desc": "前端新手村Vue3项目全复盘，记录我是如何开始和进行一个Vue3项目的，包括项目起步工作以及如何进行等，复盘也是给自己和项目一个交代啦。"}, {"id": "6969108748560236575", "title": "Vue3 响应式原理探索Part 1 - 20行代码实现响应式", "desc": "什么是响应式。当我们用 excel 的时候，当输入的值变化时（width、height），输出的值(size)也会自动变化。 这是响应式很好的例子，但该怎么做到呢。"}, {"id": "6844904052321419278", "title": "用vuejs撸一个抽奖组件", "desc": "新年将至，先提前祝大家新年快乐万事如意，想必很多人已经开过了一个记忆深刻或者毫无趣味的年会了，那么，迟来的抽奖组件来了，233333333先来一张效果图，哈哈，不是什么年会大抽奖，只是一个跑马灯抽奖组"}, {"id": "6977021213256204296", "title": "浅析Vue响应系统原理与搭建vue2.x迷你版", "desc": "Vue2.x响应式原理怎么实现的? Vue 最独特的特性之一，是其非侵入性的响应式系统。那么什么是响应式原理？ 数据模型仅仅是普通的JavaScript对象，而当我们修改数据时，视图会进行更新，避免了"}, {"id": "6936087492227497997", "title": "vue组件化最佳实践", "desc": "通常一个应用会以一棵嵌套的组件树的形式来组织：例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。如下图所示： 任意两个组件之间传值可以用事件总线的方式。事件总线其实利用的就是设计模式中观察者模式。其核心实现方式如下： Vuex 是一个…"}, {"id": "6844903789707657229", "title": "【译】Vue 的小奇技（第六篇）：在 Vue.js 2.6 中不使用 Vuex 来创建 store", "desc": "现在你可以在组件作用域之外创建响应式对象。并且当你在组件里使用它们时，它会在发生改变时触发相应的渲染更新。 基于此，你可以在不需要 vuex 的情况下就能创建一个简易的 stores，非常适合于一些简单的场景，比如说仅需要跨组件共享外部状态。 举个例子，我们现在就来创建一个简单…"}, {"id": "6997033716459995149", "title": "Webscoket的简单入手", "desc": "Webscoket 主要的api 使用 xxx.vue 常见的问题 问题描述：在长时间不发送消息的时候，会自动断开。 解决思路：心跳保持连接:实现心跳检测的思路是： 每隔固定的时间，发送一个数据到服务"}, {"id": "6983130251702304781", "title": "Vue3中的 JSX 以及 jsx插槽的使用(随便聊系列)", "desc": "随便聊下Vue3中的 JSX 以及 jsx插槽的使用 jsx可以让我通过javascript的方式便写模板 如果需要在项目中使用jsx， 那么我们需要添加jsx的支持： jsx 我们通常会通过 bab"}, {"id": "6989132514459680781", "title": "Web打印控制Lodop在vue中的使用", "desc": "Web打印控制Lodop在vue中的使用 Lodop是什么? Lodop 是一个Web打印插件，相比于浏览器自带的打印功能, 使用这个插件可以跳过预览，直接进行打印。 不要小看直接打印这个功能，在很多"}, {"id": "6876994950039502856", "title": "vue源码学习笔记（十一）模板编译（文本解析器）", "desc": "#1.前言在上篇文章中我们说了，当HTML解析器解析到文本内容时会调用4个钩子函数中的chars函数来创建文本型的AST节点，并且也说了在chars函数中会根据文本内容是否包含变量再细分为创建含有变量"}, {"id": "6961293231719972901", "title": "【Vue2.0源码系列】：DOM-Diff", "desc": "为了降低直接操作真实DOM带来的性能消耗。Vue内部引入了Vdom（虚拟DOM）。Vdom概念也比较简单，可以看成一个普通的JS对象，用来描述用户界面。而DOM-Diff的过程，简单来说，就是当"}, {"id": "6965886190872592397", "title": "vue3学习（1）响应式数据核心原理", "desc": "比较vue2和vue3的响应式 vue2的响应式 核心： 对象：通过defineProperty对对象的已有私有属性的读取和修改进行劫持（监视和拦截） 数组：通过重写数组更新数组一系列更新元素的方法来"}, {"id": "6891103886623375368", "title": "项目中遇到的vue知识点总结", "desc": "1.1. 绑定属性值 1.2. 绑定class：对象语法 &#x26;&#x26; 数组语法 另外： 数组内也可以使用对象语法，还可以使用三元表达式，用法灵活。 1.3. 绑定内联样式（用法与绑定class类似，此处省略） 1.4. 给图片添加url地址 2.1. 父组件向子组…"}, {"id": "6881907432541552648", "title": "vue源码解析之diff原理", "desc": "源码分析patch虚拟dom更新的时候，会执行update,update方法中又会调用patch，根据新旧Vnode对比转换成真正的DOM节点，所以diff算法用在patch过程中patch主要做了四"}, {"id": "6932765552519675918", "title": "做项目时候的踩坑以及解决方法", "desc": "方案1. 一开始我选择了v-if"}, {"id": "6909382983283982343", "title": "Vue源码阅读-源码目录与构建", "desc": "Vue.js 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码。Flow compiler 目录包含Vue.js的所有编译相关的代码，我们传入的options中定义template，需要compiler来编译成render函数。 编译的工作可以在…"}, {"id": "6907208407090987022", "title": "vue  mvvm 原理", "desc": "MVVM 是 Model-View-ViewModule 的缩写，他是前端的一种架构模式，View和Model之间通过ViewModel进行交互，其核心是ViewModel通过双向数据绑定将View和Model连接起来了，这使得View数据的变化会同步到Model中，而Mode…"}, {"id": "6844904181443067917", "title": "习vue源码（6）熟悉模板编译原理", "desc": "但是没有谈到具体实现，这一次我们来具体实现。 先大概谈下模板编译原理。 （1）在Vue.js中创建HTML并不是只有模板这一种途径。既可以手动写渲染函数来创建HTML，也可以在Vue.js中使用JSX来创建HTML。 （2）渲染函数是创建HTML最原始的方法。 （3）模板最终会…"}, {"id": "6947970204320137252", "title": "token过期自动跳转到登录页面", "desc": "这几天项目提测，测试给我提了个bug，说token过期，路由应该自动跳转到登陆页面，让用户重新登录。先说下一些前置条件， 所以我直接在对所有的请求进行拦截，当响应的数据返回的code是10009，就直接清空用户信息，重新加载页面。我对代码简化了下，因为用户在登录时就会把toke…"}, {"id": "6844904117287026696", "title": "想无缝连接 Vue3.0，先体验一下 composition-api", "desc": "这里的 Ref 类型是包装类型的意思。以前的 Vue2.x 直接监听的是字符串，还有数字的变化。因为这些值都是作为 data 的属性值存在，监听的其实是 data 对象的属性值。但是现在单独在函数中返回的字符串，和数字等基本数字类型，不存在引用关系，是无法追踪原始变量后续的变化…"}, {"id": "6994422956449333285", "title": "Vue3 响应式API-Computed和Watch", "desc": "什么是响应式 响应性是一种允许我们以声明式的方式去适应变化的编程范例。 当一个值依附另一个值进行计算时, 如果前一个值发生了变化, 依附的那个也会同时进行变更. 典型案例参见 excel 函数. 当单"}, {"id": "6922701532735471623", "title": "兼容性问题，这几天要抓狂了", "desc": "1、是著名的输入框输入时被遮挡的问题   解决方案：focus的时候2、又是著名的输入时底部的固定定位的div会被弹起在键盘上   解决方案：   1、监听输入时让底部的隐藏，失去焦点时显示。 ×  "}, {"id": "6992000573809623071", "title": "【vue-loader 】进阶Vue｜8月更文挑战", "desc": "一、你必须先认识下Webpack? 在前面学习的NodeJS中，我们可以通过require、exports去加载各种资源和模块，但是在前端，我们并不能直接去做，所以我们得借助模块加载器。比如：bros"}, {"id": "6888901899173494798", "title": "Verk 我们仅编写HTML即可完成现代前端项目", "desc": "Verk 是一种全新的开发方式的尝试，我们经历了从gulp、webpack、vite等一系列打包的形式，从中受益，快乐并痛苦着。 现在，如果你开发一个面向未来的页面，不考虑IE、Android 8、IOS10 等古老浏览器，可以考虑一种全新的开发方式: Verk，不需要安装np…"}, {"id": "6910958124006539271", "title": "Vue2核心原理(简易版)-模版编译", "desc": "我们在使用vue.js的时候，查询选项-DOM，可以看到有el,template,render三个选项来进行模版编译，优先级render>template>el，还有一种手动挂载。 用正则分解出不同的token（tokenizing）。大致有以下的几种token： a. 开始标…"}, {"id": "6943525029862703134", "title": "从0到1，搭建一个VUE组件库维护的基本框架", "desc": "在项目根路径下创建typing目录，并且将examples目录下的shims-vue.d.ts文件移动到当前目录下。 修改tsconfig.json文件中的include字段,将修改后的examples目录和packages目录包含在其中。同时typings目录也需要被添加到该…"}, {"id": "6882209905588060174", "title": "window安装完Node/Yarn/Vue找不到命令", "desc": "最近经常有用户反馈，window电脑安装完以后，找不到命令，实际上这个问题非常简单，就是没有配置环境变量导致，在掘金等各个社区实际都有对应的介绍，今天也针对@vue/cli4.x版本yarn安装做个梳理。 yarn目前安装速度要比npm更快，提示更友好，所以推荐大家全局安装ya…"}, {"id": "6844903567795421192", "title": "如何在vue中使用ts", "desc": "ts有什么用？为什么用ts？typescript不仅可以约束我们的编码习惯，还能起到注释的作用，当我们看到一函数后我们立马就能知道这个函数的用法，需要传什么值，返回值是什么类型一目了然，对大型项目的维"}, {"id": "6844903871320424456", "title": "在小程序中实现 Mixins 方案", "desc": "在原生开发小程序的过程中，发现有多个页面都使用了几乎完全一样的逻辑。由于小程序官方并没有提供 Mixins 这种代码复用机制，所以只能采用非常不优雅的复制粘贴的方式去“复用”代码。随着功能越来越复杂，靠复制粘贴来维护代码显然不科学，于是便寻思着如何在小程序里面实现 Mixins…"}, {"id": "6976634852170792974", "title": "Vue3--toRefs、computed计算属性", "desc": "这是我参与更文挑战的第20天，活动详情查看： 更文挑战 一、 toRefs toRefs可以将响应式对象中所欲属性包装为ref对象，并2放回包含这些ref对象的普通对象，比如在setup函数中返回一个"}, {"id": "6991295682598436877", "title": "前端实现 base64 编码和解码｜ 8月更文挑战", "desc": "1. base64简介 Base64：选出64个字符作为一个基本字符集（A-Z，a-z，0-9，+，/，再加上作为垫字的\"=\"，实际是65个字符），其它所有符号都转换成这个字符集中的字符。 编码规则："}, {"id": "6844904160605765639", "title": "真·vue3.0全家桶+ts尝鲜、过坑。", "desc": "安装&版本信息我先列一下自己的版本信息吧：@vue/cli4.3.1nodev12.16.3yarn1.10.1安装过程下面是vue的全家桶版本信息：\"vue-cli-plugin-vue-next\""}, {"id": "6844903646614781966", "title": "5分钟彻底理解Object.keys", "desc": "当朋友问我这个问题时，一时间我也回答不出个所以然。故此去查了查ECMA262规范，再加上后来看了看这方面的文章，明白了为什么会发生这么诡异的事情。 故此写下这篇文章详细介绍，当Object.keys被调用时内部都发生了什么。 1. 答案 对于上面那个问题先给出结论，Object…"}, {"id": "6990296167468761095", "title": "vue 低代码平台 实现 ctrl+z 撤销, ctrl+y 重做功能", "desc": "最近公司有个低代码平台的项目，需要用户进行拖拉拽操作每个组件属性生成json，然后经过编译器生成页面，产品要求加上撤销和重做的功能。"}, {"id": "6844903977599893517", "title": "vue3响应式系统源码解析-Effect篇", "desc": "如果之前的文章都看过的话，我们应该已经明白是如何劫持数据了。但还有两个大问题一直没解决，即具体是如何收集依赖，又是如何触发监听函数的。从前文中，我们大致能猜到：向effect函数传递一个原始函数，会创建一个监听函数，并且会立即执行一次。而第一次执行时，就能通过读操作中的trac…"}, {"id": "6974051441778360327", "title": "路由守卫的分类和使用场景", "desc": "按执行的时机，定义的位置： 1 . 组件内的守卫 2 . 全局守卫 3 . 路由独享的守卫"}, {"id": "6984781492949876749", "title": "【Vue】面试题总结 - 基础知识总结 - 复习专用", "desc": "> 本来是想总结一些面试题，这一总结起来，直接又重新学了一遍Vue > 就当作复习Vue用的，总结了一些基础知识也有一些面试题 > 持续更新..........."}, {"id": "6969448738964111367", "title": "compositionAPI之setup中触发父组件事件", "desc": "在compositionAPI出现之前，子组件触发父组件方法可以直接用this.$emit('xxx', a, b),使用了compositionAPI之后，setup中不能用this，子组件触发父组"}, {"id": "6988764150214164516", "title": "vue 后台管理必备——iconFont的(优雅)使用", "desc": "演进史 众所周知，当在项目中大量使用图片，随之而来肯定是大量的请求，为了优化所以出现了img sprite,就是所谓的精灵图(雪碧图)，就是将许多的小图标都放到一张图片上，利用css的backgrou"}, {"id": "6919645472088915975", "title": "Vue开发人员的7个最好的VS Code扩展", "desc": "在VisualStudio中添加正确的VSCode扩展可以让你作为开发者的生活变得更加轻松。它们可以帮助格式化、可伸缩性、强制执行最佳实践，从而自动化开发过程中许多容易忘记的任务。它们也可以只是有趣的"}, {"id": "6844903962458456072", "title": "VUE.js组件通信精髓归纳（基础篇）", "desc": ".... 这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值 这个 prop 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 pro…"}, {"id": "6844903570446237703", "title": "❤️❌  如何用vue制作一个探探滑动组件 ", "desc": "一. 功能分析 二. 具体实现 1. 堆叠效果 2. 图片滑动 3. 条件成功后的滑出，条件失败后的回弹 4. 滑出后下一张图片堆叠到顶部 重新堆叠是组件最后一个功能，同时也是最重要和复杂的功能。在我们的代码里，stack-item的排序依赖绑定:style的transform…"}, {"id": "6844903597591773198", "title": "如何监听数组变化?", "desc": "起源：在 Vue 的数据绑定中会对一个对象属性的变化进行监听，并且通过依赖收集做出相应的视图更新等等。 之前用 Object.defineProperty通过对象的 getter/setter简单的实现了对象属性变化的监听，并且去通过依赖关系去做相应的依赖处理。 但是，这是存在…"}, {"id": "6844904162296070152", "title": "女程序员重返前端之路——VUE面试题", "desc": "beforeCreate阶段：vue实例的挂载元素el和数据对象data都是undefined，还没有初始化。 更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。 2.当我们需要在…"}, {"id": "6956972549196480520", "title": "在vue使用weixin-js-sdk常见使用方法", "desc": "链接：https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E6.A"}, {"id": "6844903496269971464", "title": "vue-cli 自定义路径别名 assets和static文件夹的区别 --save-dev和--save的区别", "desc": "这是一篇vue-cli的几个小知识点简单介绍，适用于刚接触vue-cli脚手架以及对此方面并不太了解的同学，大佬们绕道。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 相信有很多人知道vue-cli有两个放置静态资源的地方，分别是src/asse…"}, {"id": "6901135859991937032", "title": "实现文件上传阿里云OSS【前端Vue 后端 Eggjs】", "desc": "1、创建阿里云子账号。 2、创建权限策略。 到此为止 我们 创建了一个阿里云子账户、创建了OSS(blog-userdata)的权限策略、创建了一个角色并分配了OSS(blog-userdata)的权限策略、获取了这个角色的ARN。 到此 我们就简简单单的实现了阿里云OSS 前…"}, {"id": "6844903814185615373", "title": "如何优化我们的代码（vue项目）", "desc": "作为一个前端，可能绝大多数的时间都是在写的业务代码，时间一长，大家会觉得乏味、没意思等等，但是其实就算只是写业务代码，我们也依然能够找到有兴趣的点，说的简单一点就是代码优化，不仅仅局限在业务逻辑这块，像是代码复用、效率等等都是我们可以加以改进的地方，学会在业务代码中找到不足，总…"}, {"id": "7004706448949133348", "title": "vuex数据固化插件VuexPersistence的使用", "desc": "业务场景：vuex中state的数据是存储到localStorage里面的，页面刷新后state的数据被浏览器释放掉， 记录下数据固化的插件VuexPersistence的使用:"}, {"id": "6936086952928100383", "title": "重学Vue【详说生命周期】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 传进来两个参数：组件类型的 vm 实例 和 钩子函数字符串名称 hook，在上篇的合并配置里面有提到最终…"}, {"id": "6935022644307705886", "title": "SpringBoot+Vue豆宝社区前后端分离项目手把手实战系列教程09---登录后用户信息获取", "desc": "本项目实战教程配有免费视频教程，配套代码完全开源。手把手从零开始搭建一个目前应用最广泛的Springboot+Vue前后端分离多用户社区项目。本项目难度适中，为便于大家学习，每一集视频教程对应在Github上的每一次提交。"}, {"id": "6897954477568557064", "title": "快给你的Vue项目添加一个编辑图片组件吧", "desc": "如果有什么疑问或者使用中的其他问题可以在评论中讨论一下。"}, {"id": "6844903838328029191", "title": "ref转发到DOM元素", "desc": "如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。 Vue提供了双向数据绑定的语法v-model，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据。 在React中有非受控组件的概念，非受控组件表示将…"}, {"id": "6844903641057329165", "title": "开发笔记：使用 mpvue 开发斗图小程序", "desc": "之前用过 wepy 框架写了个小程序 GitHub - yshkk/shanbay-mina: 基于 wepy 框架的 “扇贝阅读” 微信小程序，感觉写法上类似 vue，但不那么彻底。现在美团点评发布的 mpvue 支持开发者可以用 vue 的语法开发微信小程序，正好有强需求需…"}, {"id": "6980207122084528158", "title": "创建Vue项目", "desc": "安装vue-cli4.5 npm install -g @vue/cli //全局安装vue-cli最新版本"}, {"id": "6907848991761760263", "title": "vue俩个版本：runtime-compiler和 runtime-only 的区别", "desc": "runtime-Compiler 中的参数是 components 和 template 。而runtime-only版本中的参数是 render 函数。 在这个vue不完整版，需要借助webpack的 vue-loader加载器 把vue文件编译成js。 webpack使用v…"}, {"id": "6844904150438772743", "title": "Vue 的 MVVM 设计模式", "desc": "MVVM 是 Model-View-ViewModel 的简写，M 表示模型层（存储数据）, V 表示视图层（显示数据） , VM 表示视图模型控制层（Vue 框架自带，开发时无需关注具体实现）。 当修改 M 层（模型层）数据时，V 层（视图层）会自动跟着进行更新，这是通过 V…"}, {"id": "6943123272242298910", "title": "Vue 快速创建todo组件（mention）", "desc": "Vue 快速创建todo组件 一个小型的文本编辑器，通过输入 '@' 或者 '@@' 匹配选项，通过输入 '//' 匹配选择日期，暂不支持自定义这些字符，后期改进后可以支持自定义 安装方法 使用 组件"}, {"id": "6922239267808919566", "title": "【前端开发】 如何下载Vuejs.devtools插件", "desc": "前言 Vue.js开发者工具是一款适用于chrome浏览器和Firefox浏览器的浏览器插件，它可以边侧边栏窗格中的页面，边检查代码。 大家都知道国内用不了谷歌，但是谷歌浏览器是我们前端开发几乎不可或"}, {"id": "6979926890039476237", "title": "如何在项目中复用 “导入Excel”（备忘）", "desc": "安装插件： 在项目src/components/UploadExcel中导入与其对应的文件 [https://gitee.com/MeQgJ/human-resource-project/tree/m"}, {"id": "6954609122587197476", "title": "vue使用slot插槽技术封装一个dialog弹出框组件（组件化编程思想）", "desc": "封装dialog组件前的插槽技术复习 为什么要封装组件（组件化开发） 组件化开发（封装组件）的好处 好处显而易见，可以增加代码的复用性、灵活性，从而提高开发效率。试想如果一个项目中在很多页面都能用到一"}, {"id": "6844903630475264007", "title": "Vue+Node全栈实践(带源码)", "desc": "使用Vue和Node实现前端，服务端，后台管理系统三个项目。 前后端分离，Restful API。 还没有添加权限管理的功能，后续会加上。进入登录页面，如果不懂或者需要账号私聊我。。。 第一次使用iview-admin，感觉功能还是挺多的，还在摸索阶段，只用来实现简陋的功能，后…"}, {"id": "6954325780759314439", "title": "Elemtn-ui radio-group", "desc": "Element-ui radio-group 剖析 这里注意下，动态绑定v-bind和静态绑定的区别 测试代码 组件 radio-group 这里需要注意两点 父组件 radio-group 向子组件"}, {"id": "6844903558882525191", "title": "你也许不知道的Vuejs - 花式渲染目标元素", "desc": "每个Vue应用都是通过 Vue 函数创建一个新的 Vue实例 开始的。 接下来，我们来创建一个最基本的应用，实现在页面中输出 Hello Vue.js!。新建一个html文件代码如下： 使用浏览器打开刚创建的 index.html ，页面会输出一个大大的 h1 标签，内容就是我…"}, {"id": "6954287776049135630", "title": "Vue-router单页面", "desc": "vue-router 默认的路由使用的hash模式 (http://localhost:8080/#/page1) 起步 ：安装vue-router模块 新建router.js进行路由配置 在main"}, {"id": "6907040030154784781", "title": "实现js的reduce方法", "desc": "用reduce方法用习惯了，就随意记录下用普通方法实现reduce简单的实现一个数组的值的累加function{}主题列表：juejintheme:juejinhighlight:"}, {"id": "6844904160421216270", "title": "Vue2.x | Patch机制", "desc": "虚拟DOM最核心的部分是patch，它可以将vnode渲染成真实DOM。 patch也可以叫做patching算法，通过它渲染真实DOM时，并不是暴力覆盖原有的DOM，而是比对新旧两个vnode之间有哪些不同，然后根据对比结果找出现有DOM中需要更新的节点进行修改，来实现更新视…"}, {"id": "6844903597587578893", "title": "你不知道的 Vue 的图标组件", "desc": "史上最全的图标组件封装。想得够独到，写得够细致，说得够明白~"}, {"id": "6844903645864001550", "title": "再谈Vue组件库开发", "desc": "导读：本文是Vue2.0组件库开发系列文章第二篇。继第一篇《漫谈Vue组件库开发》后，再来聊一聊基于webpack脚手架开发一个Vue2.0移动端UI组件库的经验与思考。 前文再续，书接上回。话说 Vue 组件库开发那些事儿。 我们的 Vue 组件库开发经验主要来自于 NutU…"}, {"id": "6844903650343518222", "title": "我用Vue和React构建了相同的应用程序，这是它们的差别", "desc": "作者｜SunilSandhu译者｜无明在工作中使用了Vue之后，我已经对它有了相当深入的了解。同时，我也对React感到好奇。我阅读了React的文档，也看了一些教程视频，虽然它们很棒，但我真正想知道"}, {"id": "6844903829134114824", "title": "Vue组建通信", "desc": "一般常见的组件之间的通信有以下几种情况，A和B，B和C，B和D之间都是父子关系，C和D之间是兄弟组件关系。 2.children:访问父级组件和子组件的实例。 这两种方式都是直接通过实例的方式获取的方式。示例如下： 这两种方式是基于组件的上下文环境访问到父组件或者全部子组件（数…"}, {"id": "6844903841129824263", "title": "如何在Vue里实现一个Redux状态管理？", "desc": "最近在学习 redux 这一块，为了更好的帮助跟我一样的萌新更加深入的了解 redux 的内部原理，我们就来试试，手动实现一个简单的 redux 状态管理。"}, {"id": "6909604250699956232", "title": "vue 精简教程（一） dev tools  mvvm   spa单页面    数据定义和渲染", "desc": "一、vuedevtools下载安装？直接翻墙chorme商店搜索下载二、什么是mvvm?什么是spa单页面web应用？1.mvvm2.spa单页面web应用三、数据定义和渲染？1、我们先看一下vue都"}, {"id": "6922039799654137869", "title": "part3-1", "desc": "当我们点击按钮的时候动态给data增加的成员是否是响应式数据，如果不是的话，如何把新增成员设置成响应式数据，它的内部原理是什么 name属性不是响应式的因为Vue无法检测property的添加或移除。"}, {"id": "6844903696149528583", "title": "VueJS 响应式原理及简单实现", "desc": "1. Observer 一个被观察的对象会对应一个Observer实例，包括options.data。 一个Observer实例会包含被观察的对象和一个Dep实例。 2. Dep Dep实例的作用是收集被观察对象（值）的订阅者。 一个Observer实例对应一个Dep实例，该D…"}, {"id": "6914856467715588104", "title": "Vue 3 组件开发：搭建基于SpreadJS的表格编辑系统（功能拓展）", "desc": "通过环境搭建和组件集成，我们学会使用 Vite 和 SpreadJS ，将在线Excel的编辑功能集成在Vue 3项目中。 本章，我将带领大家继续扩展 Vue 3 这个项目原型，实现数据绑定、模板文件导入/更新/导出和数据透视表等功能，本章的实现思路与上一篇“组件集成”基本类似…"}, {"id": "6844903630227636232", "title": "Vue之网易云音乐横向菜单的实现", "desc": "首先需要计算出这个菜单中所有内容的width，也就是包裹这个菜单的容器；接着初始化better-scroll，并忽略该实例对象的垂直方向的滑动. 我的思路是这样的：每一个菜单项都会有各自的点击移动操作，所以我是根据当前tabs的位置，通过点击事件将tabs移动到它相应的位置，例…"}, {"id": "6844903617724416008", "title": "vue中的nextTick的实现", "desc": "浏览器中，一个页面的js的执行依赖于一个主线程，但是用户点击的触发，ajax数据请求，io读取等依赖于其他相应的模块。当主线程的执行堆栈执行完之后，会去读取任务队列，将任务(回调)放入执行堆栈执行，依次循环。任务队列里的任务由各种执行场景触发产生。 2、任务队列的任…"}, {"id": "6921996260593385480", "title": "vue2.0源码解读系列 - 来自vue的神秘礼盒", "desc": "本文之前已在简书上发过， 后边开始所有博客移到掘金来写。 目前vue3.0打的很火热，都已经出了很多vue3.0源码解析系列的博客， 但是vue2.0的源码我觉得还是有必要细品一下， 掌握了原有通用的源码原理，才能知道新版本的vue3.0到底做了哪些更改。如果已经很熟悉了，可跳…"}, {"id": "6844904194902589448", "title": "从零写一个 Vue（五）DOM 生成与更新", "desc": "本篇是从零实现vue2系列第五篇，将 YourVue 实例的 render 函数转换成真实 dom 和更新算法。 文章会最先更新在公众号：BUPPT。 上篇文章我们把 render 函数挂在了 options 属性上，执行 render() 就可以得到 template 对应的…"}, {"id": "6844904200133050376", "title": "从零开始学习Vue（二）", "desc": "如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。 组件化是Vue.js中的重要思想，它提供…"}, {"id": "6844903506193678350", "title": "关于vue-cli构建的项目在github上的预览问题", "desc": "vue-cli构建的项目，npm run dev时看到的页面对应的是npm run build之后dist文件夹中的index.html文件，而不是项目根目录下的index.html文件。 我第一次使用vue-cli构建的项目，在npm run build之后，在本地打开dis…"}, {"id": "6844903519976161294", "title": "浅究Vue响应式原理", "desc": "Vue最明显的特性之一便是它的响应式系统，其数据模型即是普通的 JavaScript 对象。而当你读取或写入它们时，视图便会进行响应操作。文章简要阐述下其实现原理，如有错误，还请不吝指正。个人博客地址：hiybm.cn 上述代码中，data是Vue实例的数据对象，当实例初始化时…"}, {"id": "6844903615195250695", "title": "Vue父子组建的简单通信之控制开关Switch", "desc": "Vue在目前是很好的框架，第一次使用Vue开发项目，刚开始的时候在一个控制开关的组件都花费了很久的时间，问题解决了，把自己的一些小问题给记录下来，方便以后看及帮助像我这样的初级萌新解决遇到的相同问题。 创建接收之后呢，我们需要把传进来的值绑定给我们子组件的data值即(flag…"}, {"id": "6844904016221044744", "title": "Vue组件之间通信", "desc": "组件通信时组件开发中重要的一环，既要保持组件的独立性，又要保证数据隔离，同事有时又需要组件之间互相通信。比如父子组件通信，兄弟组件之间通信。 2.1prop类型。可以设置prop的类型 通过prop从父级组件传值到子组件。 子组件里面修改内容，需要同步到父组件中。可以在子组件使…"}, {"id": "6844904099033399303", "title": "Vue组件通信全记录", "desc": "相比React受控组件的概念，Vue组件之间的“通信”特征则表现的更强。 除了常见的父子级别通信，还有兄弟级、跨级，到总线和Vuex。不得不说Vue组件通信的方式要更丰富一些。 1. 属性props 最基础的父传子手段。 2. 引用ref和children 直接获取子组件引用来…"}, {"id": "6921509883841871880", "title": "Vue.js的实践总结", "desc": "本文粗略的总结了对前端视图库/框架的理解；对热门渐进式框架Vue的使用技巧进行总结，以及对未来进行展望。1前端演进的过程1.1没有Ajax的前后端不分离没有ajax之前，没有“前端”这一概念。项目中的"}, {"id": "6913844410455654414", "title": "通过命令行安装你的脚手架", "desc": "我们知道 vue-cli create-react-app 等都可以根据你输入的参数进行快速脚手架的搭建. 脚手架代码, 不管何种形式, 应该是有类似模板项目之类的文件存在. (这个可以从网站下载, 或者直接放在我们的npm中进行拷贝) 通过以上内容, 我们大体得知就是依赖本地…"}, {"id": "6899749842407391240", "title": "手写实现vue-lazyload的核心逻辑", "desc": "vue-lazyload算是常用的一个插件了，一般用于图片的懒加载。 核心逻辑是： 图片在视图范围内，就显示，否则只显示加载图标。 而图片在不在视图范围内，是动态变化的，比如滚动的时候，图片就可能从视图外到视图内。 其实这里又是一个信息差，所谓信息差，是只要你知道了，基本就能解…"}, {"id": "6951666615922458631", "title": "表单与v-model", "desc": "vue提供了 v-model 指令用于表单类元素上双向绑定可以用于input 和 textarea 等，所现实的值只依赖于所绑定的数据，不在关心初始化插入的value如果是组合使用，就需要用 v-mo"}, {"id": "6844903577098551303", "title": "一个只需要维护markdown文档就可以实现代码和效果的vue组件库", "desc": "由iview改造而成，学习vue组件。"}, {"id": "6921609041596645390", "title": "VUE知识整理----一起学习（二）", "desc": "使用方法2：var vm=new Vue({ data:{a:2,b:3}... });"}, {"id": "6912257225247424525", "title": "vue 事件相关API", "desc": "监听当前实例上的自定义事件。事件可以由 vm.$emit 触发。回调函数会接收所有传入事件触发函数的 额外参数。 触发当前实例上的事件。附加参数都会传给监听器回调。 通过在Vue原型上添加一个Vue实例作为事件总线，实现组件间相互通信，而且不受组件间关系的影响。 这样做可以在任…"}, {"id": "6931184190712987661", "title": "教你发布vue+.netCore项目到服务器", "desc": "最近一直在做项目，发布部署的事情都是同事或者老大做的，无奈什么事都要自己尝试经历后才能记住，所以发布的事情轮到我了，由于是第一次发布部署项目到一个新的服务器环境，难免会遇到各种各样的问题，总结下来，希望可以帮到需要的人。 项目框架使用的是vue+.netCore2.2所以发布的…"}, {"id": "6844903909706858504", "title": "简述Vue的响应式原理", "desc": "Vue是一个响应式的框架，响应式是指：数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。 可以从两个方面来讨论：Object和Array。 受现代JavaScript 的限制 (以及废弃 Object.observe)，Vue不能检测到对象属性…"}, {"id": "6921254971480473607", "title": "Laravel+Vue 问答平台项目实战前端 - 查看问题详情", "desc": "查看问题详情的入口是问题列表页面每条数据中的标题动态绑定的路由。在构建项目时，配置的动态路由/qustion/:id，匹配到ShowQuestion组件 如果当前用户还没有点击喜欢此问题，那么查看内容时候，会显示一个\"喜欢\"文案的按钮。否则文案展示为“已喜欢” 根据问题问题详情…"}, {"id": "6844903607314153486", "title": "github repository可视化", "desc": "[TOC]GithubVisualization/Github数据可视化网站链接:https://ssthouse.github.io/github-visualization/github链接:ht"}, {"id": "6844903507556843534", "title": " Vue.js SSR Step by Step (1) - 实现简单的client-only vue-webpack 配置", "desc": "一直都觉得SSR是一个挺麻烦的事情，牵扯的知识范围还挺大的，尤其是用vue-cli 工具，屏蔽了许多配置的细节。 但在使用SSR，不用Nuxt.js 的时候来做SSR，还是挺难上手的，索性好好捋一遍这方面的相关知识，总结成了一个系列的文章。作为 SSR 文档的一个补充，希望对大…"}, {"id": "6844903877708349454", "title": "【Vue原理】Filters - 源码版", "desc": "怎么获取下面继续....... 太简单了，总结跟没总结一样......."}, {"id": "6844903878069059598", "title": "浅析Virtual DOM库 - snabbdom的源码以及 仿写一个自己的vDOM库", "desc": "如果以上情况都不符合，则会判断新VNode的子节点是否存在于旧VNode的未操作子节点中。如果不存在，则判定为新的节点，会新建一个DOM执行插入操作；若存在，sel相同，则执行更新操作后插入，若sel不同则直接新建子节点 1. 首先定义一下vNode的类型 2. 定义构造函数 …"}, {"id": "6902355929145999373", "title": "深入理解 Vue3 的响应式", "desc": "随着 Vue3 的登台，各大博客论坛铺天盖地的涌来各种文章。我们组也是率先把 Vue3 应用到了工作中，刮起了一波学习热潮。上周组内一位大佬的分享也让我受益良多，同时也打开了我的好奇心，那么就抱着问到底的精神来看看让我疑惑的问题。 Vue3 的文档中主要提供了两种比较常用的方法…"}, {"id": "6911598165082767374", "title": "从实例化Vue到数据双向绑定,内部到底做了啥？", "desc": "发现在自执行函数的内部初始化时调用。很好，知道调用起始点后，我们再回到_init函数，里面调用了initState(vm) initState中initData(vm)的调用,下面就是真正的开始进行数据双向绑定的开始。首先通过data函数获取数据，并进行一些预处理"}, {"id": "6940630038983213087", "title": "[Vue源码系列-7]vue3的diff实现原理", "desc": "一. 组件的初渲染和diff算法 二. 元素比较 三. 核心diff算法 四. 最长递增子序列"}, {"id": "6844903745415823374", "title": "js高程事件通识篇（2）", "desc": "通过上一篇文章，我们了解到了dom事件流，以及事件的处理程序，那么本文带大家了解下dom事件本身，在我们定义一个事件时，这个事件具有很多属性，基于这个属性得到的内容，我们可以进行下一步的逻辑操作。 废话不多说，我们直接在codepen的案例中定义一个点击事件，然后看其返回的内容…"}, {"id": "6844903609516179470", "title": "Vue是如何实现双向绑定的？", "desc": "本文主要探讨双向绑定，不对响应式做\b讨论哈 一直对双向绑定的概念不是很清楚，处于“人云亦云”的状态，想要讲解却无法达到很好讲述水准，\b不能很清楚的讲明白这个概念。所以就有了写此文的想法。个人觉得，如果讲述者无法清晰、有条理、直白的某件事物，那么就说明他本人对这个事理解的也不是很…"}, {"id": "6844903890400313358", "title": "cube-ui form控件input增加金钱规则", "desc": "因为rules类型只有 'string', 'number', 'array', 'date', 'email', 'tel', 'url',没有支持金钱类型。用number 的话没有精度，所以一般不适用，那只能看官方文档来自己添加一种规则 官方文档 正则我是网上看博客随便找的…"}, {"id": "6940227682651078663", "title": "Vue数据响应式浅析", "desc": "n是三个点 那么为什么会出现这样子呢。 我们接着往下研究代码，在这里我们还需要了解ES6 的基础语法还有 getter 和 setter的用法。 getter就是用于获取一个值。 setter就是可以往里面传一个新的值。 如果将你的鼠标悄悄放上去，会出现调用属性getter。然…"}, {"id": "6844903860390068237", "title": "Vue 框架原理相关知识点", "desc": "在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted()钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此…"}, {"id": "6844903669800894472", "title": "实现一个简易的响应式系统", "desc": "不管你有没有用过 Vue，你都会经常听到 Vue 是一个响应式的库。最近看了一下 Vue 的源码，实现了一个简易版的响应式系统。 了解过 Vue 的都知道，当 firstName 或者 lastName 的值发生变化时，fullName 的值都会发生变化，并且视图也会更新。 不…"}, {"id": "6886289570296496135", "title": "使用vue3+typescript编写一个图片懒加载插件", "desc": "懒加载主要通过 IntersectionObserver对象实现，可能有些浏览器不支持，暂未做兼容。 vue3 的 Custom Directives，支持以下 Hook Functions：beforeMount 、mounted、beforeUpdate、updated、b…"}, {"id": "6995088228860575781", "title": "Vue3.0深入浅出系列之Composition API", "desc": "vue3.0深入浅出系列之 composition Api解析。本文通过通过理论结合实践总结了使用，以及使用过程中容易忽略的知识点"}, {"id": "6970981424669294600", "title": "[咖聊]休假去取“模板编译”真经了", "desc": "本文通过一个简单的 🍪，详细讲解了模板编译的整个过程。只要你冲上一杯 ☕️，慢慢品，细细品。相信你能够对模板编译过程有详细的了解。"}, {"id": "6844903631150383117", "title": "【译】Vue Patterns", "desc": "一份学习 Vue 技术、技巧以及有幫助的参考链接清单。（分享者：GitHub）"}, {"id": "6995079895470571551", "title": "vue源码分析之watcher为何收集dep？", "desc": "想必大家对dep收集watcher的作用有一定了解，此文章将回顾依赖收集的过程，但是会重点分析分析为何watcher还会收集dep。"}, {"id": "6881883342623473677", "title": "使用IoC来管理你的Vue应用", "desc": "假设我们有两个模块：一个实现http请求，另一个实现路由跳转。 在上面的代码中，为了实现登录功能，Login类内部分别实例化了HttpService和RouterService。虽然上述代码可以正常工作，但是不是很灵活。假如修改HttpService需要增加token信息： 此…"}, {"id": "6966851274700488741", "title": "vue的diff算法", "desc": "当组件创建和更新时，vue均会执行内部的update函数，该函数使用render函数生成的虚拟dom树，将新旧两树进行对比，找到差异点，最终更新到真实dom 对比差异的过程叫diff，vue在内部通过"}, {"id": "6930533407441027079", "title": "前端项目目录结构演变", "desc": "在工作过程中随着我们的业务越来越庞大，对于项目的管理和维护带来一定的难度，特别是团队中的人员存在异常变动的时候，就会出现一些问题，项目中的问题就会出现浮现出来，可能其他人写的代码在添加需求或者更改需求的时候需要调整的时候，不知道该从哪里开始入手。 其实对于一个团队来说一个良好的…"}, {"id": "6844903511956815885", "title": "主题色提取", "desc": "在做音乐webapp的时候，被腾讯的一款本地音乐播放器（轻听）的播放界面惊艳到了（如下图），于是决定‘复制’下来。 首先想到的是绘入canvas中利用getImageData提取数据然后分析得到主题色，因为用的qq音乐api遇到了跨域问题，在解决跨域问题后（具体方法看这里跨域那…"}, {"id": "6844904048982753287", "title": "结合el-tree和el-transfer搞一个树形穿梭框", "desc": "最近遇到个需求，穿梭框中的内容是树形结构的数据。查看elementUI的transfer组件是不支持树形结构的数据，也就不能直接使用了。但是el-tree组件支持啊，那如果让tree组件和transfer组件结合一下岂不完美🤔。 clone一份element的源码，找到pac…"}, {"id": "6844904038765428744", "title": "Vue3中不止composition-api，其他的提案(RFC)也很精彩。", "desc": "最近一段时间，Vue3带来的新能力composition-api带来了比较大的轰动，虽然是灵感是源React Hook，但是在很多方面却超越了它。但是除了composition-api，其他的改动却比较少有人讨论，本篇文章就由vuejs/rfcs 这个仓库来看看其他比较让人振奋…"}, {"id": "6871423471226880013", "title": "vxe-table pro 的基本使用", "desc": "vxe-tablepro的基本使用（注：pro版本并非开源项目，仅供部分预览）功能强大的开源版本看这里：vxe-table1.鼠标区域选择功能：参数说明：mouse-config.area是否开启鼠标"}, {"id": "6920148445084778510", "title": "Vue 集成 PDF.js 实现 PDF 预览和添加水印", "desc": "PDF.js ，一个完整的 PDF 查看器，可以直接使用其提供的 viewer.html 查看 PDF 内容，包含完整样式和相关功能。优点是快速集成，不需要自己实现查看器的功能和样式。缺点是如果要自定义样式和功能，反而会很麻烦。 pdfjs-dist ，PDF.js 的预购建版…"}, {"id": "6844903781751078925", "title": "VUE ElementUI 项目总结", "desc": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 使用commit提交到mutation修改state的优点：vuex能够记录每一次state的变化记录，保存状态快照，实现时间漫游／回滚之类的操作。 所以 一般情况下，推荐直接…"}, {"id": "6874855535234170887", "title": "Vue生命周期详解 📌", "desc": "vue的生命周期，是vue中比较重要的知识点，在面试中也经常会被问到，所以就打算写一篇关于vue生命周期的文章。 世间万物都有自己生命周期⏱，vue也有这一特点，vue的生命周期可以简单分为四个阶段：创建阶段，挂载阶段，运行阶段，销毁阶段。 每个 Vue 实例在被创建时都要经过…"}, {"id": "6844904104834105351", "title": "Vue 3.0 diff 算法及原理", "desc": "Vue 3.0 采取的 diff 算法和 2.0 的双端比较有点不同。大概的原理如下 假如有如上的 c1 和 c2 新旧 children，在 diff 的时候，会有一个预处理的过程。 先从前往后比较，当节点不同时，不再往后进行比较。接着又从后往前进行比较，当节点不同时，不再往…"}, {"id": "7002163196156968997", "title": "Vue原理和生命周期", "desc": "vue 原理(数据劫持和渲染) 如何实现双向绑定 Vue是采用数据劫持结合发布/订阅模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动"}, {"id": "6844904057111314440", "title": "Vue获取页面元素的相对位置", "desc": "网上有人说用offsetTop，其实offsetTop是对当前对象到其上级层顶部的距离。不能对其进行赋值.设置对象到页面顶部的距离请用style.top属性"}, {"id": "6969026336023117831", "title": "基于vue-element的树形表格(菜单功能页)实现方案", "desc": "中后台项目中菜单功能(权限管理)页总是必不可少的，而仅使用element中el-table组件的树形表格并不能很好的满足对应的业务需求，所以，就自己想办法写的一个出来。"}, {"id": "6960939207548207141", "title": "vue3 的响应式实现", "desc": "作为 Vue 最重要的特性之一，本文较为详细的介绍了响应式在 Vue2 、 Vue3 的中实现及其优缺点"}, {"id": "6923056942281654285", "title": "vue-video-player 使用总结", "desc": "1. 安装插件 2. 在 main.js 入口文件导入 3. 在单文件组件中使用 4. 效果展示"}, {"id": "6844903944276148231", "title": "vue项目问题总结", "desc": "1. 输入框使用v-model 绑定值，但是不能改变 2. 文本内容不对html标签转译 3. 基础导出功能 4. 使用element table 时，禁用部分复选框 6. 列表中点击图片放大功能 7. 上移和下移操作 8. 表格的全选和反选 9. 按住说话功能 10. 表格编…"}, {"id": "6954136167323271204", "title": "写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？", "desc": "vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中（建议先了解一下diff算法过程）。 在交叉对比中，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点"}, {"id": "6844904015004696583", "title": "终于轮到Vue来带给React灵感了？", "desc": "考虑到大家的英文水平…(当然这句话好像不用啥英语水平都能看懂)，我来给大家翻译一下：这是一个受到vue transition modes启发的过渡组件。说实话vue和react我都经常用，一直都觉得vue的transition组件和react的react-transition-…"}, {"id": "6844903989700476941", "title": "封装vue插件，读懂这遍文章就够了", "desc": "配合着源码，用心看完这遍文章，你便领悟了封装的精髓，麻雀虽小，五脏俱全。 业务代码之外的代码，我想称之为增值代码。 作为一个程序员，你应该除了完成领导安排的任务，你还应该有一些自己的时间，用来“玩”一些比较有意思的事情。 当现有框架、库满足不了我们需求的时候，我们应该尝试去自己…"}, {"id": "6883397169861754887", "title": "vue 组件传值-父传子、子传父、兄弟传参", "desc": "父传子：父组件：dataAndTime为传递到子组件的数据（绿色部分）子组件：用props接收数据，使用时this.dataAndTime子传父父组件子组件兄弟组件之间的传参eventBus组件1：组"}, {"id": "6982558712149835790", "title": "Vue中 Vue.extend() 详解及使用", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ Vue.extend 属于 Vue 的全局 API，在实际业务开发中我们很少使用，因为相比常用的 Vue.compon"}, {"id": "6995860865815674894", "title": "Vuex 4", "desc": "这是我在学习 Vue 4 时所做的笔记，除了一些常见的使用必备的基础知识，还包括一些需要注意的细节。"}, {"id": "6844903615312691208", "title": "2018年的前端架构师都在干嘛？", "desc": "一，明确下架构的定义，在知乎的这个问题中，题主说“整个后端的架构是非常复杂和庞大的，一个好的架构师需要在数不清的方案组合中进行架构选择”。看起来架构似乎是一个在无数方案组件中做选择的问题。 所以，如果回答“前端的方案组合很多，所以架构也很麻烦”，是否就可以回应这个问题了。那么，…"}, {"id": "6999977322140925960", "title": "vue3学习 --- 核心功能的简单实现", "desc": "在传统的前端开发中，我们都是直接编写HTML，最终渲染到浏览器上。但是dom元素本身是非常庞大的，每一个node节点上有非常多的属性。频繁操作dom必然是比较损耗性能，所以目前框架都会引入虚拟DOM。"}, {"id": "6996984154223034404", "title": "Vue学习笔记（七）", "desc": "3.8 TodoList案例 3.9 webStorage 3.10 组件的自定义事件 3.11 全局事件总线（GlobalEventBus） 3.12 消息订阅与发布 3.13 nextTick"}, {"id": "6844903877582536711", "title": "Vue手把手带你撸项目系列之动态面包屑", "desc": "面包屑应该是我们在项目中经常使用的一个功能，一般情况下它用来表示我们当前所处的站点位置，也可以帮助我们能够更快的回到上个层级。 今天我们就来聊聊如何在 Vue 的项目中实现面包屑功能。以下案例都是使用 Element-UI 进行实现。 首先我们想到的最笨的方法就是在每个需要面包…"}, {"id": "6844903553090191368", "title": "Vue 换肤实践", "desc": "Vue 实现切换主题功能，包括 CSS 切换，图标切换和图片切换。"}, {"id": "6844903831256432648", "title": "前端错误监控 -【Vue】与【Sentry】的结合", "desc": "相信各位前端er经常遇到这样的问题，明明自己本机打开一切正常，到了客户那边问题却一大堆，还根本定位不到问题，总不能叫客户打开 F12 查看控制台看下什么错误吧！因此本文主要介绍如何将 vue 与 sentry 结合，达到实时监控并收集错误日志的效果。 上面我们已经成功的在 vu…"}, {"id": "6844903645121609741", "title": "Vue + Canvas项目总结", "desc": "这是今年三月份帮学长做的一个项目，陪我度过了两个月的春招生活，整个项目做下来也是学到了很多东西，下面就开始我的分享啦，包括一些知识点总结和遇到的坑，dalao莫笑哈。 主要功能如上图，左边是图形工具栏，右边是canvas，上面是清除、删除、旋转、切换格子背景、保存并下载图片的操…"}, {"id": "6993736746710073351", "title": "Vue服务端渲染SSR", "desc": "1.为什么使用服务器端渲染 (SSR) 2.服务端渲染的过程 3.Web方案横向对比 4.基础 5.注意事项 6.`SSR`本地调试命令 7.框架选择 8.Nuxt"}, {"id": "6975022943353077767", "title": "Electron+Vue3 MAC 版日历开发记录(18)——Vue-Router 使用", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903901641048071", "title": "教你搭建按需加载的Vue组件库", "desc": "按需加载，本质上是把一个组件库的不同组件拆分成不同文件，按照需要引用对应的文件，而该文件暴露一个install方法，供Vue.use使用。 上面的写法比较繁琐，而且需要知道每个组件的实际路径，使用起来并不方便，所以我们还需要借助一个转换插件。 到这我们可以知道，要搭建一个按需加…"}, {"id": "6844903633574690823", "title": "Vue父子组件通过prop异步传输数据踩坑", "desc": "其实这里子组件是拿到了更新后的值，如果template中的是{{message.age}}是可以显示出18的，但是项目中是传的options，子组件有个echart的setOptions操作，并不是直接将prop的数据展示，所以demo写成这样。这里是可以分析出问题所在的，子组…"}, {"id": "6989448283575812127", "title": "element el-cascader动态加载数据 （多级联动，落地方案）", "desc": "1. 2. return postRequest(url.console.3. // node 节点数据 node.let type = level == 0 ? \"1\" : node.this..if (res.this.msgFn(\"error\", res.res.data...."}, {"id": "7002861002274373668", "title": "去除vue项目中 将要打包上线项目里所有的console.log", "desc": "去除vue项目中 将要打包上线项目里所有的console.log 在vue.config.js中，配置：.....................................点击详情进来看吧！！！"}, {"id": "6984728685106429965", "title": "Hicharts实现世界地图思路及踩过的坑（含中文GeoJSON数据集及详细代码）", "desc": "该文章记录了我在日常开发过程中，实现世界地图的过程，重要的是在这一过程中遇到的问题及解决方案。另外，如果有小伙伴需要中文数据集，可以联系我哦！"}, {"id": "6844904007488503821", "title": "23 个 Vue.js 初级面试题", "desc": "1. 为什么Vue被称为“渐进框架”？ 使用渐进式框架的代价很小，从而使现有项目（使用其他技术构建的项目）更容易采用并迁移到新框架。 Vue.js 是一个渐进式框架，因为你可以逐步将其引入现有应用，而不必从头开始重写整个程序。 Vue 的最基本和核心的部分涉及“视图”层，因此可…"}, {"id": "6960490898744410142", "title": "从0到1开发组件库（vue3+ts）", "desc": "从0到1开发组件库（vue3+ts） 1.使用Vite搭建官网 1.1 初始化项目 全局安装 create-vite-app 创建项目目录 安装vue-router 安装sass 1.2 搭建官网 我"}, {"id": "7002048682619043877", "title": "VSCode搭建VUE 开发环境", "desc": "https://blog.csdn.net/shenwb110/article/details/86137581/ 一，下载Node.js,去官网https://nodejs.org/en/downl"}, {"id": "6926144123669839880", "title": "【Vue3组件化源码】树形组件ElTree的内部原理", "desc": "最近一直在做Element3的Tree组件开发，这里就记录一下Tree组件的思想和内部实现原理，也对想要学习源码的童鞋的一个帮助吧。 在设计Tree组件的时候是采用两颗树进行互相映射的方案进行设计的，一颗树是用户自定义节点构成的树RawNode，另一颗是内部进行渲染的树Tree…"}, {"id": "6874314855281590280", "title": "【如果不想读文档的话】傻瓜式入门vue3", "desc": "1.1. composition API 也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面 这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的） computed是一个…"}, {"id": "6986443634203688997", "title": "一个适用于任何Web项目和框架的PDF预览插件", "desc": "一个适用于任何Web项目和框架的PDF预览插件，如何获取、如何使用PDF预览插件？点击文章查看详情。"}, {"id": "6881527203826728974", "title": "我从Vue源码中学到的一些JS编程技巧", "desc": "在我们面试的过程中，经常会遇到问源码的环节，因为优秀的框架通常都会包含很多设计理念跟编程实践。这段时间我一直在看Vue2的源码，发现了很多有意思的实现。虽然现在Vue3都已经发布了，也无法否认Vue2是个优秀的框架这个事实，不影响我们从中学到一些最佳实践。 对Vue不感兴趣的同…"}, {"id": "6844903624699543559", "title": "没朋友(mpvue)，点个外卖，一个人也要好好吃饭", "desc": "每次写文章时，总会感慨万千。面对成功，我们总是抱以较高的期望，总想急不可耐就能得到胜利的果实。可每一次成功不可能轻而易举的就来到我们的面前。几乎每一次都需要我们付出极大的耐心和勤奋，甚至于近乎偏执狂般的傻傻坚持。自打小程序推出以来，我便开始转入这个市场。并不是因为他的热度而是一…"}, {"id": "6965169040826302471", "title": "Vue2.0源码阅读计划(二)——响应式原理", "desc": "我们每天都在使用框架，但读懂框架的背后我们才能更好地使用它，洞悉优缺点，熟知原理，是我们每个人都应该做的。 慢慢来，一切会比较快！！！"}, {"id": "6963783152611360781", "title": "基于 el-form 封装一个依赖 json 动态渲染的表单控件", "desc": "基于 element-plus 封装的一个动态表单，可以依据json在运行时动态渲染。实现添加、修改的功能。非常灵活好用。"}, {"id": "6989498644550385672", "title": "实现element-ui的Transition组件并扩展", "desc": "element-ui中的Transition让我们实现，自己写了一个类似的组件，并对此进行了扩展，其具有垂直和水平折叠功能，同时我们还可以控制其动画时长、动画过渡曲线"}, {"id": "6844904029265346568", "title": "【建议收藏】Easy-Mock服务器部署-看这篇就够了", "desc": "前不久,我孤军奋战开源了基于Vue全家桶的移动电商项目ddBuy,截至目前已有13000+star,从开源到现在一直保持更新和迭代,某天凌晨3点收到了个老外的反馈说I can't read Chinese, can you have it in English to ddBuy…"}, {"id": "6941261566985650183", "title": "你不知道的<script setup>不完全攻略(二)", "desc": "最近好像大家都非常非常的忙，但是我们小组好像有点忙(kong)碌(xian)，就想着尤大都发布了这么久的vue3了，要不重构一下最近的项目，在一番讨(si)论(bi)后，备好了陈醋开始吃螃蟹。 经过测试发现可以正常运行，那这个this问题就暂时告一段落啦。 同理，我们想路由跳转…"}, {"id": "6985363584804978719", "title": "vue3+ts组件封装踩坑(install引发的类型错误)", "desc": "vue3+ts封装组件，shims-vue.d声明文件导致的类型错误，跳坑研究。提供一个最有的声明文件"}, {"id": "6994302486093758471", "title": "新工作的第一个任务，vue-cli+vue3在firefox(47)浏览器提示异常SyntaxError: missing = in const declara", "desc": "任务描述 vue-cli3 + vue3 项目在firefox(47)浏览器提示异常，且无法正常加载页面。F12打开调试工具发现提示 ”SyntaxError: missing = in const“"}, {"id": "6987266624587825159", "title": "Vuex的使用&&Vuex模块化使用", "desc": "什么是Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化"}, {"id": "6960579319210967077", "title": "Element + Sortablejs 实现表格行｜列拖拽", "desc": "效果 简述 表格太死板，如何让它动起来？ 在业务开发中遇到很多这种问题，产品希望表格可以拖拽排序，变得优雅起来！ 而解决方案也有很多，比如：打产品一顿 开玩笑、开玩笑。和谐社会！"}, {"id": "6844904146886213639", "title": "vue3.0实战从0到1实战电商管理系统（第二天）", "desc": "任何事情都需要时间的沉淀，技术也不例外，今天编写Vue3.0系列的章节文章，只是希望能够比别人更早的去尝鲜一些新的技术，毕竟Vue3.0已经Beta版本了，所以里正式版本也不远了，提前去学习和了解，我们就会比别人有更多的时间去充分理解Vue3.0的特性，只有当你真正理解一门技术…"}, {"id": "6977004323742220319", "title": "【初学笔记】整理的一些Vue3知识点", "desc": "由于我先学了Vue3，并开发了一个开源的小项目，领导让我整理一下给公司其他没有入门的同事讲一下，混个脸熟。本文适合Vue初学者，或者Vue2迁移者，一看就学会，直接上手开发。"}, {"id": "7006207591902625805", "title": "什么！这个工具居然支持Vue3了！", "desc": "这款移动端调试工具 Vue-Vconsole-devtools 兼容Vue3了！告别繁复的安装过程，一行代码搞定它！"}, {"id": "7007221498649772063", "title": "Vue中使用crypto-js进行加密、解密", "desc": "第一步：安装、引入 crypto-js 第二步：实现加密方法 第二步：实现解密方法 第三步：生成随机字符串"}, {"id": "6991640600533532679", "title": "跟着来，你也可以手写VueRouter", "desc": "本文介绍了路由的一些常识，并手写了一个精简版VueRouter，和绝大多数手写文章不同的是，这里代码是完全以源码为标准实现的，彻底搞懂核心源码之外，后面看真正的源码可以毫不夸张的说：纵享丝滑！"}, {"id": "7007011226790133797", "title": "Vue+Express+Mysql全栈项目之增删改查、分页排序导出表格功能", "desc": "产品需求分析 产品经理说，我需要做一个web人员管理项目，项目包含以下功能： 用户可以在页面上新建数据，新建的数据内容有，人名、年龄、家乡、以及此人的备注 用户可以删除之前新建的人员信息，删除只做逻辑"}, {"id": "7006287379291963400", "title": "vue3学习——必会知识点（1）", "desc": "vue2.x向vue3.x过渡，都改变了什么呢？本文从创建vue3项目起步，一起来看看vue3有什么样的改变，以及可以带给我们什么好处吧~"}, {"id": "6983328034443132935", "title": "尤大大新活 petite-vue 尝鲜", "desc": "那个男人他又来了，这次是一个叫 petite-vue 的东西，非常的轻量小巧，本文将对它进行一些简单的介绍和使用。"}, {"id": "7007323807656443935", "title": "Vue3及ts项目搭建过程中遇到的问题（一）", "desc": "vue3发布后，有过一些摸索，在理解了组合式API后，又碰到了一些其他问题，比如vue router、axios、vuex这些经常会用到的工具，怎么添加ts类型呢？"}, {"id": "7006182945991950366", "title": " Vuex 状态管理的工作原理", "desc": "为什么要使用 Vuex 当我们使用 Vue.js 来开发一个单页应用时，经常会遇到一些组件间共享的数据或状态，或是需要通过 props 深层传递的一些数据。在应用规模较小的时候，我们会使用 props"}, {"id": "7006193216802291719", "title": "Vue 撩起头盖来，让我看看你（初始化与学习Vue项目）", "desc": "Vue 撩起头盖来，让我看看你（初始化与学习Vue项目） 博客说明 Vue简介 相信都听过vue，毕竟有一句话，前端会vue就行，额，这句话还有待商讨，这里不做讨论。 官方介绍 地址 Vue (读音 "}, {"id": "7003551138100281352", "title": "即将到来的ECMAScript 2022标准", "desc": "前言 ES2021 或 ES12 在今年夏天早些时候发布(具体的ES2021新特性，可以查看这里)，现在我们来看看ES2022 会带来什么有意思的新特性。 在本文中中将介绍并解释在规范的最新草案中已被"}, {"id": "7006320955316240415", "title": "如何解决前后端跨域问题（详细）", "desc": "如何解决前后端跨域问题（详细） 一、经典疑问：为什么会跨域？ 二、如何解决？ 三、Token 、Cookie 与 CORS 的爱恨情仇"}, {"id": "6844903918753808398", "title": "30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）", "desc": "本文以前端面试官的角度出发，对 Vue 框架中一些重要的特性、框架的原理以问题的形式进行整理汇总，意在帮助作者及读者自测下 Vue 掌握的程度。本文章节结构以从易到难进行组织，建议读者按章节顺序进行阅读，当然大佬级别的请随意。希望读者读完本文，有一定的启发思考，也能对自己的 V…"}, {"id": "6981628129089421326", "title": "「百毒不侵」面试官最喜欢问的13种Vue修饰符", "desc": "前言 大家好，我是林三心，众所周知，修饰符也是Vue的重要组成成分之一，利用好修饰符可以大大地提高开发的效率，接下来给大家介绍一下面试官最喜欢问的13种Vue修饰符 1.lazy lazy修饰符作用是"}, {"id": "7007665350514835486", "title": "vue中树形控件转换为表格样式", "desc": "按照业务需求，要做一个权限菜单，方便设置人员的权限，在网上没有找到想要的效果，自己琢磨了一下，如下为效果图： 1、从接口获取所有权限的数据，如果获取的数据不是树形结构，先处理为树形结构 （1）vue代"}, {"id": "7002840373173157918", "title": "在 Vue 和 React 中使用 LuLu UI", "desc": "LuLu UI 是基于原生 DOM 开发的，因此，就有人认为是不支持 Vue 的，这个就属于误会了，LuLu UI 在 Vue 中的支持是非常好的。"}, {"id": "7006965721229950984", "title": "Vue3源码系列之触发更新的实现", "desc": "前言 设置方法中比获取要复杂一些，有很多种情况，下面我将一一详细讲解 createSetter 第一步 我们先去扩充一下工具方法，方便后面使用 我们要区分是新增的还是修改的，因为有可能是数组，所以要考"}, {"id": "7007346830363066382", "title": "基于Element-plus组件的二次封装-XDialog\\XConfirm\\XMessage", "desc": "背景： 准备工作 Element-plus源码阅读（ELDialog）官网 Vue3.0相关官网 组件注册、 CompositionApi Vue中文文档 Vue-cli升级 Vue/cli 第三方组"}, {"id": "7005140118960865317", "title": "【Vue】带你快速上手Vue3 - 使用 - Composition API - 响应式原理 - 新特性", "desc": "Vue3早就发布了，博主一直拖到今天才开始学习，主要还是因为博主 ~~懒~~ 学习前端时间不长，前端要学的东西太多了，加上博主买的书还有学习的项目都是Vue2的，所以就一直在研究Vue2了，今天终于准"}, {"id": "7005797034431086629", "title": "30分钟简单实现一下postMessage的Promise业务场景", "desc": "项目中接入三维模型，由于三维模型团队只提供iframe方式接入和postMessage通讯方式和通讯的数据格式，试试给postMessage添加promise装备。"}, {"id": "6947326788917952520", "title": "提升写代码效率：快速通过DOM元素打开对应的Vue文件", "desc": "您好，我是沧沧凉凉，是一名前端开发者，目前在掘金、知乎以及个人博客上同步发表一些学习前端时遇到的趣事和知识，欢迎关注。 我就时常会遇到这样的问题，有时候找一个模块对应的文件需要花上1分钟，但是看了本篇文章后你就会习得点击页面上对应的元素，一键在编辑器中打开它对应的Vue文件。 …"}, {"id": "6844903679636553736", "title": "《从零构建前后分离的web项目》实战 -5分钟快速构建炒鸡规范的VUE项目骨架", "desc": "我通常使用 cli 生成项目骨架再在之基础上进行个人修改。 顾名思义 XXX-CLI 就是使用命令行生成的 XXX 程序。之前写过一款 基于 nodeJs 制作个性 CLI 的教程 如何用node开发自己的cli工具并发布到NPM ， 想详细了解制作流程的可以简单看看。 鉴于使…"}, {"id": "6988340121854541838", "title": "vue CLI 手动创建项目 vue create xxx", "desc": "使用 vue CLI 提供的命令，创建一个叫“vue-unit-test-demo”的项目， 默认选择在： Default ([Vue 2] babel, eslint) 默认勾选了： Choose "}, {"id": "6999015025708892167", "title": "回首Vue3之API篇（九）", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 这篇文章我们来讲一下refs的使用，以及我们需要注意的地方。 如何使用 ref 在之前的很多文章都提到过ref，ref 对象具有指向内部值"}, {"id": "6860430490302677006", "title": "Vue执行流程分析", "desc": "一切都显得那么自然。不过在百忙之中是否有小伙伴想过，一个小小的Vue实例怎么有这么大的能量，竟然可以构建出如此复杂的前端项目。那么Vue内部是如何运转的呢，做了哪些事情呢，从今天开始跟着我一探究竟。 从Vue的构造函数中可以看到，当我们执行new Vue()的时候，只执行了一个…"}, {"id": "6898498514813190158", "title": "Vue3 也能用上 Vue2 组件 From EMP", "desc": "上篇文章讨论完怎么在 React 和 Vue 互相调用之后，我们发现了新的需求。 升级 Vue3 之后，因为底层的 render 函数被重写，导致 Vue2 现有丰富并完善的组件不能直接在 Vue3 上使用。因此 EMP 针对这个问题，提出了 Vue3 调用 Vue2 的方案，…"}, {"id": "6844903942321602568", "title": "撸一个 Vue 自定义指令实现一键 Copy的功能", "desc": "再按照惯例，大家 ( 假装 ) 看不懂，然后我来举个栗子解释一番。。。好，还是不知所云，本文结束 ( Ctrl + F4 ) ，下一篇。 为了避免上述情况出现，就不解释了。实际上官方提供了很多内置指令，如：v-if、v-for、v-bind and so on。每一个指令都有自…"}, {"id": "6967234522614071310", "title": "vue自定义组件实现 v-model双向绑定数据", "desc": "项目中会遇到自定义公共组件供项目调用，正常情况可以使用 props定义参数接收父组件传的参数，然后通过子组件的$emits()方法回传数据给父组件。 类似如下： 父组件 子组件 但是这种写法需要调用公"}, {"id": "6979127906807054366", "title": "element-ui表单的多层循环验证处理", "desc": "当时在使用element-ui开发后台项目的时候，遇到表单中的数组数据字段需要验证，试了好几种写法都没能弄出来，甚至当时都没想到该怎么描述去百度查找别人的经验参考一下，现在我将这个现象记录下来，方便自"}, {"id": "6991844363055661063", "title": "vue的变化侦测-Array篇｜ 8月更文挑战", "desc": "vue的变化侦测-Array篇 上次我们说过Object数据的变化侦测。Object的变化侦测主要依赖的是Object原型上的方法Object.defineProperty来监听其中的get和set方"}, {"id": "6982958703179726861", "title": "学完 Vue3、TypeScript 干什么，先来一个\"网抑云\"", "desc": "1、前言 没错又是仿网易云，那么多了网易云项目了还写？纯粹是为了学习罢了。 之前学习的 Vue3、Vite2、TypeScript 一直没有新项目可用，控制不住自己的小手了必须写写，也为了要看源码熟悉"}, {"id": "6987947238873907231", "title": "Vue自带的组件keep-alive", "desc": "Vue中的所有的组件都是有声明周期的，从出生到消亡，一般要经历8个声明周期或者6个，声明周期就是钩子函数。 出现的原因和使用的场景 如果有一个组件我要重复使用，但是我要重复切换组件，那这个组件就不断的"}, {"id": "6981329984811958280", "title": "vue-cli中配置使用Vuex", "desc": "在vue开发用我们常常会用到一些全局的数据，比如用户信息、用户权限、一些状态等等。我们传统的数据都是单向的，所以我们得一层一层的传递，这样我们遇到一个多组件共享一个数据的时候，vuex是个不错选择。"}, {"id": "7000927351039066125", "title": "vue 中虚拟dom的理解", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战  虚拟dom 频繁且复杂的dom操作通常是前端性能瓶颈的产生点，Vue提供了虚拟dom的解决办法 虚拟的DOM的核心思想是：对复杂的文档D"}, {"id": "6844904195758243848", "title": "vue中使用vue-socket.io的一些心得、踩坑记录", "desc": "vue项目中有使用到socket长连接，之前一直都是都是使用vue-socke.io[github地址]，但最近在使用时，出了一些莫名奇妙的bug，也是为此掉了不少头发，最后还是解决了。关于socket相关内容介绍以及使用场景，这里不会做太多介绍（主要是懒），可以翻看其他文章。…"}, {"id": "6844903824956588040", "title": "Vue SSR 踩坑之旅", "desc": "本文并不是Vue SSR的入门指南，没有一步步介绍Vue SSR入门，如果你想要Vue SSR入门教程，建议阅读Vue官网的《Vue SSR指南》，那应该是最详细的Vue SSR入门教程了。这篇文章的意义是，主要介绍如何在SSR服务端渲染中使用最受欢迎的vue ui 库elem…"}, {"id": "6974577066121363464", "title": "vue3中的元编程&代码抽离", "desc": "vue3中的元编程&vue3代码抽离 前言 最近两天看了一篇文章, https://mp.weixin.qq.com/s/dHDaOSnSoH6X4gmHo7LrLg, 这篇文章讲的是react中元编"}, {"id": "6986898845569384462", "title": "Vue2原理、代码分析", "desc": "划水不能停，分析vue2 vue源码地址：https://github.com/vuejs/vue 最好我们把这个源码给克隆下来方便我们以后阅读，测试。 源码结构 benchmarks 基准测试，与其"}, {"id": "6973833760429047845", "title": "利用Vue自定义指令 - 让你的开发变得更简单", "desc": "前段时间在用框架开发H5页面时，碰到框架中的组件内置了一个属性用于适配异形屏，虽然是组件内部实现的，但这个方式让我萌生一个想法："}, {"id": "6995814565946589192", "title": "Vue3-组合式Api和响应式原理解读（三）_响应式数据的原理", "desc": "实现响应式的原理 Vue2与Vue3响应式原理对比 Proxy语法以及使用 target 被proxy代理的模板对象 handler 捕捉器(处理器对象) handler.get() 属性读取操作的捕"}, {"id": "6977340331847057445", "title": "VUE框架及其响应式原理介绍", "desc": "Vue响应式原理以及发布者订阅者模式；Vue中key属性的作用；Vue的更新点；如何配合发布者订阅者模式来实现数据双向绑定"}, {"id": "6915599889539792903", "title": "Vue组件通信原理剖析（一）事件总线的基石 $on和$emit", "desc": "首先我们先从一个面试题入手。 至此，关于总线的原理剖析就到这里。 最后喜欢我的小伙伴也可以通过关注公众号“剑指大前端”，或者扫描下方二维码联系到我，进行经验交流和分享，同时我也会定期分享一些大前端干货，让我们的开发从此不迷路。"}, {"id": "6844903774582997000", "title": "复杂Vue组件的异步流程分析", "desc": "如果一个组件的状态，依赖于异步任务的执行，那么这个状态就是异步的，我们称之为异步状态。异步状态会引入不确定性，换句话说就是，代码执行结果的正确与否完全靠运气或者靠网速。更糟糕的是，这种不确定性会可能向外扩散向内渗透，进而影响到整个应用的稳定性。 我们知道Vue关于数据视图双向绑…"}, {"id": "6914099555243917326", "title": "解决Echarts+<el-tab-pane>的警告：Can't get DOM width or height", "desc": "但是这需要手动点击tab才能监听到，也就是如果设置了默认tab这是无法监听到的。 也是不行。 这样就不会出现警告了。"}, {"id": "6977299219929366558", "title": "微型Vue框架构建Part3——$Mount方法实现", "desc": "如何给Vue对象的原型链添加$Mount方法initMout 为真实节点生成虚拟DOM，具体实现方法contrucVNode 定义虚拟Node节点类, VNode $Mount方法实现概览 相关链接 "}, {"id": "6844903575022206983", "title": "Angular和Vue.js 深度对比", "desc": "Vue.js 是轻量级的开发框架，很适合开发小规模灵活的 Web 应用程序；而 Angular 尽管学习曲线较为陡峭，但却是构建完整复杂应用的好选择。"}, {"id": "6914271309203669005", "title": "vue源码的构建过程", "desc": "打开vue源码目录，找到src文件夹，打开目录如下：compiler：编译相关代码core：vue的核心代码包括内置组件、全局API封装、vue实例化、观察者、虚拟DOM、工具函数等platforms"}, {"id": "6981255430907363359", "title": "浅谈vue的不同版本区别与使用方法", "desc": "1.vue的两个版本 Vue完整版（vue.js） 特点：有编译器compiler,但是compiler占30-40%体积 视图：写在html或template选项 cdn引入：vue.js 文件名不"}, {"id": "6966439059602276382", "title": "二次封装element-plus的TableAndPage", "desc": "二次封装element-plus的TableAndPage createVNode('div', {id: toDisplayString(ctx.idx)}, { de"}, {"id": "6844903905990541319", "title": "呕心沥血整理的Vue面试知识点，你确定不看吗？", "desc": "v-cloakv-textv-htmlv-bindv-onv-forv-modelv-if和v-showv-ifv-elsev-else-ifv-slotv-prev-oncerefvue的异步组件w"}, {"id": "6844903879834877965", "title": "值得收藏的js工具函数", "desc": "1. 检测是不是除了symbol以外的原始数据 2. isPrimitive: 检测数据是不是原始数据 3. isObject：判断数据是不是引用类型的数据 (例如： arrays, functions, objects, regexes, new Number(0),以及 n…"}, {"id": "6844903588385259528", "title": "koa2源码解读与总结", "desc": "koa2的源码比较简单，整个框架只要能够很好的理解其中间件基本就能了解其运行和设计的原理。 我建议读koa的源码最好从使用的写法开始梳理，一步一步深入其原理。 根据此段代码可以看出，koa是一个对象，从案例上看此对象上有use、listen方法。让我们来看看它是如何工作的。 来…"}, {"id": "6844903926496673800", "title": "vue-cli 3.0脚手架，从入门到放弃（二）-目录介绍", "desc": "菜鸟上路，高手请指导。^_^ 想写好代码，和用好一个工具是离不开的， 一般我们使用的工具有 HuilderX,sublimetext3，vscode，webstorm等，个人目前使用的是hb，和vscode，可以根据个人爱好各自选择，但一定要熟练。 这是创建完项目后的基础目录结…"}, {"id": "6966523220576960519", "title": "手撕vue源码第一天之了解Flow", "desc": "Flow是facebook出品的JavaScript静态类型检查工具，Vue.js的源码利用了Flow做了静态类型检查，所以了解Flow有助阅读源码"}, {"id": "6844903831352918024", "title": "Vue-Cli3插件实战一：vue-cli-plugin-dll", "desc": "vue-cli3版本的发布距今已经过了大半年，前后迭代了50多个版本，终于趋于稳定；这里不得不得感叹vue开源团队对vue技术栈的倾力贡献，使得vue社区的前端工程化实践又向前迈了一大步。相比vue-cli2版本的'大锅混'，三版本的插件系统卓识令人惊艳了一把，因此组内也在第一…"}, {"id": "6844903764554416142", "title": "“真相定律”之Layout组件", "desc": "其实HeyUI组件库已经发布一年半了，而我一直都没有补充Layout组件。 至于一直不开发的原因，主要是因为我觉得系统的布局都会因为定制化而发生变化，也会跟随着设计的变化而变化，而Layout固定的组合方式无法满足实际的需求。 其实，我发现，有很多人的想法和我一模一样，觉得la…"}, {"id": "6844903521192509453", "title": "vv-ui 骨架屏实践", "desc": "骨架屏的作用主要是在网络请求较慢时，提供基础占位，当数据加载完成，恢复数据展示。这样给用户一种很自然的过渡，不会造成页面长时间白屏或者闪烁等情况。 常见的骨架屏实现方案有ssr服务端渲染和prerender两种解决方案"}, {"id": "6907112443516813326", "title": "父组件向子组件传值", "desc": "1. 父组件向子组件传值 1.2 首先先将子组件通过improt给导入到父组件页面里，然后，在components中注册一下，最后就能直接使用，传值给子组件了。"}, {"id": "6906754443329404936", "title": "vue2.x的动态路由也没有那么难嘛~（新手上路版本）", "desc": "终于闲了下来，写一篇关于vue动态路由如何使用的文章，本文希望通过一个最简单的实例使同学们搞懂动态路由基础云云。一套vue的create，然后快进到项目创建完毕。1.第一步，上来就创建了四个页面，这四"}, {"id": "6844903871001690125", "title": "撸一个vue的双向绑定", "desc": "说起双向绑定可能大家都会说：Vue内部通过Object.defineProperty方法属性拦截的方式，把data对象里每个数据的读写转化成getter/setter，当数据变化时通知视图更新。虽然一句话把大概原理概括了，但是其内部的实现方式还是值得深究的，本文就以从简入繁的形…"}, {"id": "6844903711571968007", "title": "为什么lodash的remove在vuejs中不是响应式的？", "desc": "可以看到，splice方法的可读性并不好，而且还需要考虑val不是arr的元素的情况；filter可读性还不错，但实际上得到了一个新的数组。比较好的办法是循环使用splice，但那样写就太麻烦了。 所以就有了lodash这种原生js库来帮助我们。lodash库中的remove方…"}, {"id": "6844903518524932110", "title": "vue-loader 源码解析系列之 selector", "desc": "通过 parser 将 .vue 解析成对象 parts, 里面分别有 style, script, template。可以根据不同的 query, 返回对应的部分。 同样的，为了方便读者理解主要流程，笔者去掉了部分代码。 从上面代码可以看到，.vue 解析的工作其实是交给了 …"}, {"id": "6844903700633223182", "title": "vue项目实践思考003", "desc": "通过本问将看到我在vue的项目中，进行的一系列的项目优化，然后看到不同的维度将这些点进行分类。 这里更多的指的是设计考虑的思路，是大纲，暂不涉及实际代码。 在接到项目之后，首先将store,router，xhr的对应三个部分分别分子模块，每个子模块的划分维度有所差别。 其中st…"}, {"id": "6844903729435508744", "title": "【实战】Vue.js 图标选择组件开发", "desc": "最近项目中在做一个自定义菜单需求，其中有一个为菜单设置小图标的功能，就是大家常见的左侧菜单 设置图标不难，方案就是字体图标，可供使用的图标库也有很多，比如阿里巴巴的 Iconfont，以及 Fontaswsome 等，问题在于如何优雅的提供几百个图标供用户选择，而不需要开发去一…"}, {"id": "6909605853205266446", "title": "vue 精简教程（四)   vuerouter 路由", "desc": "前言一、vuerouter路由1、基础使用方式1）在vue下面引入vuerouter<scriptsrc=\"https://cdn.bootcss.com/vue-router/3.1.3/vue-r"}, {"id": "6876345405752213512", "title": "校验两个数组中是否具有相同标识值的对象", "desc": "将由表格得来的ID对象数组拿过来在里面找是否有和当前循环体相同对象的数据，如果没有就将当前row放进表格中，否则就...."}, {"id": "6844903592751546375", "title": "vue写excel add-in", "desc": "全局安装最新版本的Yeoman和Yeoman generator for Office Add-ins。 如果你被提示要覆盖 package.json, 选择 No (do not overwrite)."}, {"id": "6844903497993814029", "title": "我如何将 Webpack 包大小缩减一半", "desc": "很实用"}, {"id": "6927164441603604493", "title": "Vue 安装", "desc": "Vue是一套用于构建用户界面的渐进式框架，易于上手，使用广泛。这篇博客主要涉及到Vue的安装方法和Vue的两个版本。 npm install vue—— 最新稳定版。 安装：npm install -g @vue/cli或yarn global add @vue/cli。 vu…"}, {"id": "6882206798917582862", "title": "vue核心 - 原理分析 （初版）", "desc": "2. package.json文件 每个项目（npm上下载的包，或者其他的nodejs项目）的根目录下面，一般都有一个 package.json 文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证、如何启动项目、运行脚步等元数据）。 npm ins…"}, {"id": "6844903543015473159", "title": "vue 单文件测试", "desc": "官网虽有测试例子，但涉及较窄，遇到组件中存在异步传参、触发 action、获取 state 等问题时，编写单元测试便不知从哪下手。 这篇文章结合实际项目，旨在解决上述问题，顺便记录写测试文件时遇到的一些问题，希望对各位朋友有所帮助。"}, {"id": "6907121455402582030", "title": "vue3 createApp 的实现", "desc": "调用 ensureRenderer().createApp(...args) 方法，获取到了 app 的实例；然后重写了 app 的 mount 方法，在新的 mount 方法中，先对 container 做了一次处理（如果传的是css选择器，通过 document.query…"}, {"id": "6907099829437431816", "title": "Vue中实现指令式动态追加小球动画组件", "desc": "1. 小球组件 beforeEnter, enter, afterEnter是transition组件的三个钩子函数对应动画开始前,动画开始,动画结束三个阶段. 这里有个一个坑,在这里我们需要手动触发浏览器的重绘,这里因为通过js修改的style不会及时更新,组件的displa…"}, {"id": "6844903542092906504", "title": "技术雷达之「微前端」- 将微服务理念扩展到前端开发 | 《前端的逆袭》知乎专栏", "desc": "本文共计约 7k 字，预计阅读时间 15mins 微前端的缘由：单体应用与微服务架构 微服务架构带来了哪些好处？ 那么前端的现状呢？ —— 臃肿的前端 微前端的定义 - 将微服务理念扩展到前端开发 拆分微前端所带来的好处 微前端的核心思想 微前端的可选实践方案 页面优化与实例"}, {"id": "6973127444496646174", "title": "vue 新增属性 $attrs及$listeners (组件通信)", "desc": "介绍: vue组件之间的通信方式有很多种,props/emit , event bus, vuex, provide/inject等,还有一种通信方式就是 $attrs和 $listeners,下面通"}, {"id": "6844903613895016461", "title": "干货--手把手撸vue移动UI框架： 滑动删除", "desc": "前几天因为项目需要，用jquery写了一个swiperOut组件，然后我就随便把这个组件翻译成基于Vue的了，有兴趣的朋友可以看下。Github源码（不麻烦的话帮忙start，请各位大爷赏个星星） demo展示 老规矩，先上效果，效果不是很好，大家如果有什么生成gif的好用的软…"}, {"id": "6844903891025264648", "title": "Vue 应用单元测试的策略与实践 05 - 测试奖杯策略", "desc": "欢迎关注知乎专栏 —— 前端的逆袭（凡可 JavaScript，终将 JavaScript。） 欢迎关注我的博客，知乎，GitHub，掘金。 前言从敏捷：团队和企业的高响应力谈到单元测试，可能有同学会问，高响应力这个事情我认可，也认可快速开发的同时，质量也很重要。但是，为了达到…"}, {"id": "6913210061309673480", "title": "关于Vue3响应式的理解", "desc": "注意到上面的例子中，我们直接修改count.value就能直接引起dom的变化。这背后究竟是如何实现的？ 我们都知道ref, reactive这两个都是创建响应式对象的api，而effect在这里的作用是收集依赖和触发依赖。那么effect是如何做到的？我们再看一个例子。 在e…"}, {"id": "6844903649336885261", "title": "做前端也有“捷径”，科学偷懒大法了解一下！", "desc": "现在前端非常火热，相关的技术更是层出不穷，前端人也在不停地学学学。那么有没有什么“偷懒”的方式，帮助我们更加有效地完成编码的KPI呢？本人从事前端开发工作多年，负责公司多个大型项目前端架构设计与落地实践，本文就和大家聊一聊前端的“项目实践之道”与“变化之道”。 在进入正题之前，…"}, {"id": "6844904177110351880", "title": "Vue深入响应式原理-隐式添加响应式属性", "desc": "2): 原来test1能够改变视图是因为被Vue用Object.defineProperties()处理,有get,set修饰符，收集到渲染watch。 3): 而test2没有get,set修饰符，没有收集到渲染watch。 2): 执行render函数（生成vnode的过程…"}, {"id": "6906033072576135182", "title": "vue插槽的基本使用", "desc": "子组件定义了solt，但未提供名字，这就是匿名插槽，也叫做默认插槽，只要出现的父组件中，未指定插槽名字的内容，都会默认放到匿名插槽里。 所谓具名插槽，就是给插槽命了名字，父组件放进来的内容，需要指定插槽的名称，这个时候才会被分发到这个具名插槽中。 有时让插槽内容能够访问子组件中…"}, {"id": "6844903853704347662", "title": "Docker部署D2Admin 人人企业版", "desc": "最近后端的小伙伴在探索docker部署，给我也提了需求，希望我别掉链子，也能将前端服务通过docker部署。于是乎，我在大掘金找到了一篇不错的实践，@快狗打车前端团队 的 [手把手系列之]Docker 部署 vue 项目。出于Copy的职业本能，看完文章立马动手尝试了一下，一顿…"}, {"id": "6844904070570852366", "title": "[Vue源码学习]1-从零跑通Vue实例化过程", "desc": "Flow 是 facebook 出品的 JavaScript 静态类型检查工具。Vue.js 的源码利用了 Flow 做了静态类型检查，所以了解 Flow 有助于我们阅读源码 这里 [libs] 配置的是 flow，表示指定的库定义都在 flow 文件夹内。我们打开这个目录，会…"}, {"id": "6844904021577170951", "title": "Vue.js－Vue CLI 3.x 静态资源文件编译输出目录定制的问题及解决", "desc": "这一步是Vue工程配置的基本操作，在Vue CLI官方文档讲的很明确了，在vue.config.js中配置assetsdir属性即可。 这样使得目录结构更清晰明了。 如果在工程中已经提供了一部分全局静态资源，如normalize.css，为保持目录的统一可能也放置在public…"}, {"id": "6912030427519647751", "title": "Vue3 源码解析 06上篇--响应式 baseHandler", "desc": "之前学习了一下 reactive 和 ref 的源码实现。通过源码我们知道在 reactive 的实现的过程中是通过 Proxy 的数据劫持来实现的响应式。这里我们看一下 Proxy 的定义： 下面我们就看一下 reactive 中的 处理器对象handler源码的实现。 PS…"}, {"id": "6844903597415612430", "title": "Vue-详解设置路由导航的两种方法： <router-link :to=\"...\"> 和router.push(...)", "desc": "详解设置路由导航的两种方法： <router-link :to=\"...\"> 和router.push(...)"}, {"id": "6844903846762774541", "title": "vue+electron高仿网易云", "desc": "vue+electron高仿网易云桌面端应用，后台api是网上一位大佬根据网易云api获取的：网易云apigif动图演示：源码我放在github上了，觉得还不错的大佬帮忙点个star高仿网易云"}, {"id": "6897096567519379469", "title": "Vue-自定义指令", "desc": "自定义指令全局自定义指令局部自定义指令"}, {"id": "6844903609625231367", "title": "是时候和404说再见了", "desc": "大家在网上冲浪的过程中是否经常遇到「404」这个令人不悦的数字呢？我时常会想如果所有数据都能永久保存在互联网上该有多好。直到我发现了一个神奇的项目 —— IPFS(InterPlanetary File System)。 InterPlanetary File System，中…"}, {"id": "6906036570566950920", "title": "理解&实现（一）：Vue2 响应式原理", "desc": "Vue2 中，响应式实现的核心就是 ES5 的 Object.defineProperty(obj, prop, descriptor)。通过 Object.defineProperty() 劫持 data 和 props 各个属性的 getter 和 setter ， get…"}, {"id": "6844904048554934286", "title": "Vue 微信端扫描二维码，苹果端只能保存图片解决方法", "desc": "这几天做个了项。就是微信扫描二维码的然后进入公众号网页巴拉巴拉的，然后就很顺利的遇到了在安卓端扫码的时候，顺利的一塌糊涂，然后到了苹果端的时候，就只能出现一个保存图片，然后就写一下记录一下这问题的解决方法。 然后是正常情况下。当我们开始扫码的时，应该是这个样子 这个是正常的，但…"}, {"id": "6844904155056701453", "title": "Vue源码学习3.8：组件更新&diff算法", "desc": "1. 介绍 当数据发生变化的时候，会触发 渲染watcher 的回调函数，进而执行组件的更新过程。 对于异步组件，则判断 asyncFactory 是否相同。 所以根据新旧 vnode 是否为 sameVnode，会走到不同的更新逻辑，我们先来说一下不同的情况。 2. 新旧vn…"}, {"id": "6915203371720949773", "title": "VUE项目性能优化实践——通过懒加载提升页面响应速度", "desc": "最近我司因业务需求，需要在一个内部数据分析平台集成在线 Excel 功能，既然我们自己就是做开发工具的，所以目光自然就落在了我司自研的前端表格产品上。 项目的目的是要通过数据透视表和 Excel 公式来分析公司的各项运营数据。不过在集成后，在开发环境页面运行流畅，大量数据加载处…"}, {"id": "6844904056343756814", "title": "记录我的Vue学习 --- 写一个简易的TodoList + localStorage", "desc": "这个TodoList很简单，只包括此时日期的展示、todo项的展示以及todo项的添加。 创建一个钩子函数created()，因为想要在渲染成视图之前就获得当前的日期。 一周七日，一年十二月，将这些对应的时间字符串归于数组里。 用new Date()获得本地的时间，而getDa…"}, {"id": "6962077409696808996", "title": "记录vue中对mixin的理解", "desc": "结合源码摸清mixin的实现思路并理解mixin，mixin合并到父组件扩充父组件功能，对比被引入后mixin和组件的区别"}, {"id": "6844903565576634381", "title": "我看Vuex(一)", "desc": "(其实过年这几天也挺无聊的。。。 所以，vue 对插件还是挺温柔的，只用了它的一个安装函数进行插件的安装。好，我们来看看 vuex 的 install 函数 这样做是因为在组件中通过 this.$store 直接调用 dispatch/commit 方法时, 能够使 dispa…"}, {"id": "6844903539496484878", "title": "优雅而绚丽的适用于 Vue 2.0 的 input 组件。极大提高交互效果和输入愉悦性。", "desc": "优雅而绚丽的适用于 Vue 2.0 的 input 组件。极大提高交互效果和输入愉悦性。 在线示例：https://xbt1.github.io/effect-input/ 主题列表：https://github.com/XBT1/effect-input#主题"}, {"id": "6945291045030592525", "title": "前端总结02-vue的多页面应用", "desc": "在一个中后台中会有很多中不同系统，这时候我们需要拆分不同系统，这就需要用到vue中的多页面了。 部署应用包时的基本 URL。用法和 webpack 本身的 output.publicPath 一致，但是 Vue CLI 在一些其他地方也需要用到这个值，所以请始终使用 publi…"}, {"id": "6910119847561003022", "title": "vue源码浅读--（1）文件结构、入口和运行机制", "desc": "benchmarks文件：benchmark的目的主要有两种，一是验证性能，另一个是获得一些基准数据，从而可以与本软件的其他版本或其他同类软件进行比较。通常不使用benchmark做正确性验证。benchmark测试不一定会发生在每个版本的开发期间。有可能仅会在有较大改动的时候…"}, {"id": "6844903890744246279", "title": "构建vue应用方法总结", "desc": "我认为有以下几个比较好的方法。 如果你不想使用脚手架，可以使用原生方式构建轻量级vue应用。 这种是伴随着nodejs的和前端工程化的迅猛发展，还有webpack等构建工具的诞生，有了脚手架开发这一非常便捷的开发方式。 vuejs官方开发的脚手架固然好用，但是仍要了解如何搭建一…"}, {"id": "6844903946088103949", "title": "Vue原理解析（十一）：搞懂extend和$mount原理并实现一个命令式Confirm弹窗组件", "desc": "不过使用起来并不是很方便，如每个使用的地方需要引入该组件，需要注册，需要给组件加ref引用，需要调用事件来控制状态。其实这个组件相对来说是比较独立的，我们在使用组件库的时候，相信都有调用过命令式弹窗组件的经历，今天我们就来搞懂这种命令式组件的实现原理，以及将这个精美的弹窗组件改…"}, {"id": "6844903950886371342", "title": "彻底搞懂Vue中keep-alive的魔法(上)", "desc": "keep-alive的使用只需要在动态组件的最外层添加标签即可。 简单的结果如下，动态组件在child1,child2之间来回切换，当第二次切到child1时，child1保留着原来的数据状态，num = 5。 按照以往分析的经验，我们会从模板的解析开始说起，第一个疑问便是：内…"}, {"id": "6844904152590450702", "title": "vue-element-admin集成Keycloak实现统一身份验证、权限控制", "desc": "vue-element-admin是一个在github拥有极高star数的后台前端解决方案，基于vue和element-ui实现。vue本身易上手，element-ui组件丰富，即便后端开发人员使用vue-element-admin也能较快的开发出不错的管理后台。但是，当公司内…"}, {"id": "6966421001764601886", "title": "souce-map-js + Vue 还原生产环境报错-实战", "desc": "上一篇文章讲了怎么捕获生产环境的错误，以及如何还原。 这一次呢给大家带怎么把捕获到的bug 渲染到页面."}, {"id": "6995144883283427342", "title": "Vue学习笔记（二）", "desc": "Vue核心（续） 2.9 计算属性 2.10监视属性（侦听器） 2.11绑定样式 2.12条件渲染器 2.13 收集表单数据-v-model详解 2.14过滤器（filter）"}, {"id": "6995371075622158373", "title": "封装elementui弹出框el-dialog", "desc": "vue + elementUi框架做后台管理系统时，需要使用弹出框 新增/编辑 内容时，可以将el-dialog二次封装，使代码简洁易维护。"}, {"id": "6844903872289308686", "title": "Vue.js 高级概念：Mixins，自定义指令，过滤器，过渡，状态管理和服务端渲染", "desc": "安装完成 执行Vue -V 检查是否安装成功，我的 Vue-cli 版本是2.9.6。 Vue 官方网站对 Mixins 定义：混入 (Mixins) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入…"}, {"id": "6992589283156557831", "title": "一文轻松上手Vue-Router路由", "desc": "这是我参与8月更文挑战的第1天 一.速识概念： 1. 后端路由： 2. 前端路由： 3.Vue Router： 这是官方使用文档链接。  Vue Router是Vue.js 官方的路由管理器。它和Vu"}, {"id": "6946120511713705992", "title": "Vue 响应式原理模拟", "desc": "1. 数据驱动 2. 数据响应式核心原理 3. 发布订阅模式和观察者模式 Ⅰ. 发布订阅模式 Ⅱ. 观察者模式 Ⅲ. 总结 观察者模式是由具体目标调度，比如当事件触发，Dep 就会去调用观察者的方法，所以观察者模式的订阅者与发布者之间是存在依赖的。 发布/订阅模式由统一调度中心…"}, {"id": "6844904032406863879", "title": "Vue电商项目-提升逼格玩转svg", "desc": "不饶弯弯了直接推荐你到阿里巴巴开源的iconfont上找,图标库非常多,总有你喜欢的那一套,所以墙裂推荐,如何使用iconfont,就不多说了,上去查找自己喜欢的图标,创建到自己的项目,把图标放到你自己的项目中,用的时候直接导出就可以了,我这里说下SVG图的导出方法. 于是乎,…"}, {"id": "6994810591776866312", "title": "手写简版vuex | 8月更文挑战", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 0. 之前写过一篇关于vuex的使用，如果不熟悉的小伙伴请移步这里vuex的使用 1. vuex是集中式存储管理应用的所有组件的状态，并以相"}, {"id": "6844903698347327495", "title": "你的.vue文件就已经是你的文档了", "desc": "https://github.com/HcySunYang/vuese 。 这篇文章不会介绍如何使用，至于如何使用大家可以查看 readme，这里我们主要说一说实现的思路。 你或者你的团队也许会有一套自己的组件库(或者是单纯的一个组件)，通常当你开发完一个组件之后，你需要手动的…"}, {"id": "6982845854206378014", "title": "尤雨溪的新作品 - petite-vue", "desc": "petite-vue 是针对渐进增强进行优化的 Vue 的替代发行版。它提供了与标准 Vue 相同的模板语法和反应性思维模型。"}, {"id": "6920103004259500045", "title": "Vue项目中使用高德地图", "desc": "在一些简单的大屏类展示应用/网页中，经常会用到地图相关的展示场景，除了一些特殊的三维场景需要用 Gis/BIM 或者 WebGL，一些简单的业务就可以直接使用高德地图或者百度地图来完成。 本文主要讲述在 Vue 项目中高德地图 JavaScript API 的引用方式以及一些简…"}, {"id": "6844903645364895757", "title": "喜大普奔，Ant Design of Vue 1.0版本发布🎉🎉🎉", "desc": "vue-antd-ui诞生于17年9月份，18年3月份正式开源，800多次commit，发布23个版本，51个组件，共计686个单测，测试覆盖率85.19%。 得益于antd的稳定，vue-antd-ui自发布第一个版本起，都没有破坏性的更新，本次发布的1.0版本自然也没有破坏…"}, {"id": "6998166341811175454", "title": "如何将uView UI配置到uniapp项目中", "desc": "1、npm 安装uViewUI 找到uniapp项目文件目录，通过cmd 进入终端，并通过npm 安装uViewUI 安装完之后，你的项目"}, {"id": "6966914729562341412", "title": "vue中插槽slot问题：匿名，具名，作用域(传参)、解构等", "desc": "1.插槽是什么(举个例子) (1)匿名插槽 那我们想要把父组件中p标签得内容展示出来怎么办?(只需一步,修改下子组件) 页面结果: 我是父组件 我是子组件 是否显示 (2)默认插槽 有时我们父组件不在"}, {"id": "6844904152905023495", "title": "Element Table 自适应高度解决方案", "desc": "分析如下图(此方案中使用的是ElementTable官网copy的代码(多用于OA,CMS,ERP这类系统中)如上图大体目前没有问题，但是存在细节问题那就是在table在滚动的过程中表头没有了如果说这"}, {"id": "6920203707044855815", "title": "前端工作总结,避免秃头 技巧（一月份）", "desc": "一月部分持续更新中... Vue 在更新 DOM 时是异步执行的。 只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。 如果同一个 watcher 被多次触发，只会被推入到队列中一次。 这种在缓冲时去除重复数据对于避免不必要的计算和 DOM …"}, {"id": "6987674026973855781", "title": "在Vue2.x项目中使用百度富文本编辑器UEditor ", "desc": "记录一下前段时间在项目中遇到一个使用富文本的需求，对于富文本功能要求较高，所以后来选择了百度的UEditor。由于这是一个比较老的编辑器了，所有网上结合Vue的文章较少。从github上可以看见最后一"}, {"id": "6844903733659189255", "title": "不吹不黑比对下React与Vue的差异与优劣", "desc": "react与vue的比较一直是一个比较引战与容易引起争议的话题，或许每个前端都或多或少的参与到过这场辩论中，但是在这场巨大的辩论中产出的有价值的内容却一直比较稀缺。在这里我无意再次引起争吵，只是结合我自己的经验希望尽可能客观的阐述一些我认为的两个框架上一些差别与优劣。事实上如果…"}, {"id": "6989903786303029255", "title": "记录手写vue1.x遇到的坑", "desc": "首先是新建一个源码目录（例：handWritten） 就这样开始手写vue1.x了，在index.html里面写好静态页面。就用 npm run dev 启动页面在localhost:8080上打开时"}, {"id": "6978312551209795620", "title": "[ Vue ] 基于 Vue 3 的新特性的理解和思考 ( 一 )", "desc": "Composition API Composition API 的出现就是为了解决交互逻辑繁重的情况下，让函数更加方便的调用和易于让开发者理解而出现的。其核心思想就是将相关的代码收集在一起。 先抛开 "}, {"id": "6844904200246132744", "title": "vue-pdf实现pdf文件在线预览", "desc": "1. 前言 2. 安装 3. pdf 页面显示 4. pdf 显示多页 5. pdf 按页预览 6. 更多内容"}, {"id": "6891450354215583751", "title": "Vue中$refs的探索", "desc": "最近公司在做一个新项目，出需求，原型图，UI图，接下来就轮到我了，画页面。在画页面的过程中，涉及到父子路由，于是，便自然想到了&#x3C;router-view>&#x3C;/router-view>，按照以往的操作，确定父子关系，配置好路由，就OK了。但是，对照需求文档，仔细…"}, {"id": "6967951613356933133", "title": "vue3实现上传组件", "desc": "虽然前端UI框架大都提供文件上传的组件，以及很多插件可供选择，工作中可能不需要我们手写一个上传组件，但是从零封装组件对学习是很有助益的。下文为大家介绍使用Vue3+TypeScript实现的"}, {"id": "6991460404278853668", "title": "手把手使用VuePress搭建Element的组件库文档官网", "desc": "为什么要使用VuePress？ 社区里面有很多优秀的文档工具可以供我们前端程序员选择，例如Gitbook、Hexo、Docusaurus。就个人使用而言，体验最好的文档工具是Docusaurus。"}, {"id": "6967971374417575944", "title": "Teleport实现Modal组件", "desc": "vue3新增特性Teleport 像我们如果写Modal组件、Message组件、Loading组件这种全局式组件，没有Teleport的话，将它们引入一个.vue文件中，则则他们的HTML结构会被添"}, {"id": "6844903635638304781", "title": "vue中如何实现pdf文件预览？", "desc": "今天产品提出一个优化的需求，就是之前我们做的图片展示就是一个img标签搞定，由于我们做的是海外后台管理系统，那边的人上传的文件时pdf格式，vue本事是不支持这种格式文件展示的，于是就google搜索，发现有iframe、embed、vueshowpdf(测试了不咋好用)、pd…"}, {"id": "6844904080070934535", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（六）", "desc": "前面五篇教程我们已经基本实现了迷你全栈电商应用的界面展示以及功能逻辑，相信大家在这个过程中都收获颇丰，并且迈向了全栈工程师的第一步。但是我们却并不满足于此，我们还需要对我们的项目代码进行优化，使得我们的代码可读性更高，也更好维护。相信细心的你们已经感觉到了项目中的store实例…"}, {"id": "6998167175735279646", "title": "Element-UI分页组件如何设置成中文", "desc": "Element-UI分页组件如何设置成中文 前言 今天我在写项目的时候，发现在使用Element-UI组件的分页组件显示的是英文，不是中文： 但是我在官网上看到的却是中文显示的，而且我也想要分页组件显"}, {"id": "6844904081052401677", "title": "🔥Vue\"非常规\"技巧, 🤖99%的人是第一次看", "desc": "一句话理解\"Event\": 类似vue中$emit, 使用new Event可以创建浏览器的原生事件,通过使用addEventListener监听事件. 要实现上例就需要用到自定义事件(Event). 可以看到组件破坏了dom结构, 使用时可能会直接影响样式, 所以很多vue插…"}, {"id": "6933407381477031949", "title": "前端项目框架搭建-day02", "desc": "往期文档前端项目搭建-day015、项目中加入vue-router1、安装vue-router的时候一定要带上@next，否则现在安装的还是3.x的版本2、在src/新建文件夹router，并在rou"}, {"id": "6941402712890638367", "title": "微前端框架single-spa源码解析、项目实战、手写简版single-spa", "desc": "阅读本文前，需要您对single-spa有简单的了解。 single-spa是一个非常棒的微前端框架，我们都知道另外一款非常优秀的前端框架qiankun就是基于single-spa实现的，在其基础上，增加了沙箱机制、css Model样式隔离。 single-spa源码不多，但…"}, {"id": "6992864764225388574", "title": "Vue+ElementUI 搭建后台管理系统（实战系列三）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6844903969894973448", "title": "vue3响应式源码解析-Reactive篇", "desc": "在上一章中，我们介绍了ref，如果仔细看过，想必对ref应该已经了如指掌了。如果还没有，或着忘记了....可以先回顾一下上篇文章。 reactive这个文件代码其实不多，100 来行，很多逻辑其实是在handlers跟effect中。我们先看这个文件的引入： 所以不用怕，很多只…"}, {"id": "6845166890449371150", "title": "打造一款适合自己的快速开发框架-前端篇之权限管理", "desc": "在后端篇中已对权限资源进行了分类：API接口、路由菜单、页面按钮。本文重点讲一下如何对这些权限资源进行分配并对不同的登录用户，根据权限的不同，呈现不一样的功能菜单、按钮进行统一处理。 这里只是简单的介绍，想详细了解的，可自行查看资料。 vue可以自定义指令，拿当前dom元素，然…"}, {"id": "6941641892840865805", "title": "前端工程化之Vite2配置详细说明", "desc": "Vite配置文件默认配置智能代码提示参数配置配置参数"}, {"id": "6844903589488525319", "title": "Web 端 实现 app “输入验证码 ”的效果", "desc": "前两天跟一个哥们唠嗑，讨论怎么实现uber, 滴滴的验证码输入的效果。 有打算一个input然后两条线段之间用白背景的线段遮住实现，用letter-spacing控制字间距。 但是控制数字间距吃力点，效果不佳便放弃。 这样就实现了 点击label触发 input焦点，调用键盘。…"}, {"id": "6990290293182431263", "title": "来吧！展示Vue五分钟上手ECharts（数据可视化）", "desc": "一、什么是ECharts 前言：ECharts简单来说是互联网开发程序过程中，后台数据库用以实现数据到图形的映射的一个插件。 具体来说一个使用 JavaScript 实现的开源可视化库，可以流畅的运行"}, {"id": "6844904082050646023", "title": "Vue Router 实现动态路由和常见问题解决方案", "desc": "提供了一种基于 Vue Router 实现前端动态路由的方案以及源码，并且解释了几个在本方案下常见的报错以及相应解决方案。"}, {"id": "6990175452497182734", "title": "VUE3（二十九）自定义点击图片显示大图bigImg组件", "desc": "上一篇中介绍了如何使用onclick为动态添加的dom元素绑定事件。 我现在就可以自定义大图组件了。 为ueditor编辑的html添加onclick这个步骤，我是在后端做的，后端返回到前端的值，就是"}, {"id": "7000280693662023717", "title": "Vue 学习笔记（一）--vue-cli", "desc": "项目接下来可能需要 vue 的技术栈。所以先学一学 Vue 玩玩。 学习资料自然是详细的 官方文档 了。 前言 有了 React 的经验，我直接使用 vue-cli 来安装。 vue-cli 也有相对"}, {"id": "6876812524338216973", "title": "如何编写一个  Vite  插件", "desc": "「一个基于浏览器原生 ES imports 的开发服务器。 服务器随起随用。 同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。 针对生产环境则可以把同一份代码用 rollup 打包。」 今天我们来看一下如何编写一个简单的 Vite 插件，代…"}, {"id": "7000058857003155464", "title": "vue3响应原理之proxy", "desc": "仓库地址：vue-next Vue2.x 中，实现数据的可响应，需要对 Object 和 Array 两种类型采用不同的处理方式。 Object 类型通过 Object.defineProperty "}, {"id": "6844903573612937223", "title": "Vue 仿QQ左滑删除组件", "desc": "js代码就这么一些，每个函数都有注释说明， 相信都能看得懂， 就不多解释了。如有更好的方式，欢迎及时交流~"}, {"id": "6844903919907258382", "title": "axios 中文文档", "desc": "请求方法的别名。 基于Promise的http库，适用于浏览器和node.js。请求方法的别名。 基于Promise的http库，适用于浏览器和node.js。"}, {"id": "6844903542872866824", "title": "一个数字键盘引发的血案——移动端H5输入框、光标、数字键盘全假套件实现", "desc": "进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色>.<简直是反人类的需求)。细分如下： 1. 基于input + 手机自带键盘实现方案…"}, {"id": "6898116372887240712", "title": "vue3构建工具vite原理 之 手写vite", "desc": "1. 重写引入模块路径前面加上/@modules/, 重写后浏览器会再次发送请求 2. 拦截含有/@modules/的请求, 去node_modules引入对应的模块并返回 3. 解析.vue文件 4. 静态服务插件 实现可以返回静态文件的功能"}, {"id": "6976814768812195854", "title": "Vue缓存组件或页面实用技巧 - keepAlive销毁", "desc": "假设在一个列表中，用户滑动几页点击了详情，此时若再回到列表页，页面状态都已经刷新，用户又需要再进行滑动，这显然是不合理的。"}, {"id": "6844904047921594382", "title": "Vue高级指南-01 Vue源码解析之手写Vue源码", "desc": "现在前端面试Vue中都会问到响应式原理以及如何实现的，如果你还只是简单回答通过Object.defineProperty()来劫持属性可能已经不够了。 本篇文章通过学习文档及视频教程实现手写一个简易的Vue源码实现数据双向绑定，解析指令等。 目前几种主流的mvc(vm)框架都实…"}, {"id": "6883373475843538951", "title": "手把手教学：Vue下拉刷新、上拉加载组件插件（超详细）", "desc": "拖了很久的下拉刷新Vue组件——终于来了，其实写了很久了，一直拖着没写文章... touchstart: 手指触屏触发的事件，主要工作是在触发时获取鼠标点击的Y坐标，event.touches[0].pageY。 touchmove: 手指滑动触发的事件, 主要工作是在触发时获…"}, {"id": "6963079075938172936", "title": "简单手写实现Vue2.x", "desc": "Vue的设计思想 Vue设计思想参考了MVVM模型，即将视图View和行为Model抽象化，即将视图UI和业务逻辑分开来，然后通过ViewModel层来实现双向数据绑定。 MVVM 与 MVC 最大的"}, {"id": "6919066842032144392", "title": "基于 Vue3 + Ant Design Vue 开发的精美中后台管理系统框架 Makeit Admin Pro", "desc": "安装使用登录组件注册组件滑块验证码组件弹窗组件"}, {"id": "6953553786375766047", "title": "基于Vue 3 + Typescript + Vite 搭建H5通用架子", "desc": "基于Vue 3 + Typescript + Vite 搭建H5通用架子 项目初衷 用最新的前端技术开发一个H5的通用架子，让前端同学开箱即用，迅速投入战斗。 项目源码在文章结尾处，记得查收哦~ 如果"}, {"id": "6844903583498895368", "title": "十全大补vue-router", "desc": "将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。"}, {"id": "6844904048525574152", "title": "使用 husky、commitlint 和 lint-staged 来构建你的前端工作流（vue、react、dva）", "desc": "关于 commitlint, husky, eslint 的具体信息可以见官网。 prettier。 一个很流行的代码格式化工具，你很容易在编辑器找到实现它的各种插件，像vscode,atom,webstom都可以找到。这里用它在代码提交前做代码格式化。 eslint。 代码检…"}, {"id": "6875237434158743560", "title": "Vue 源码中的一些辅助函数", "desc": "在回顾Vue源码的时候，经常看到Vue中一些辅助函数，总结一些日常中会用到的，和一些js代码片段"}, {"id": "6986473074539364359", "title": "vue+element自定义组件如何触发element表单验证", "desc": "vue+element自定义组件如何触发element表单验证，利用dispatch触发elementui的elform的验证"}, {"id": "6844903584899792909", "title": " Webpack + Vue，部署时减少包体积的几种方法", "desc": "作为一个做 SPA 起家的框架，Vue 的开发学习曲线较为平缓，相对来说，开发体验属于上乘。但不少初学者会发现，自己的站点，随随便便打包文件就有 10M ！难以置信，其实这跟 Vue 的性能没有太大关系，我们可以通过配置文件来大大改善这一情况。 它的作用是实现延迟加载，避免一次…"}, {"id": "6946496839541587999", "title": "动态修改element-ui主题", "desc": "更多文章前言ui库搭建的差不多了，接下来就是做组件的时候了，这里先做一个动态修改element-ui颜色的组件库分析element-ui提供了一个修改主题的方式（网上资料很多，这里不再赘述），就是修改"}, {"id": "6920792980764753927", "title": "vue web端埋点方案优化", "desc": "页面浏览日志。页面浏览日志是指当一个页面被浏览器加载呈现时采集的日志，也是目前所有互联网产品的两大基本指标：页面浏览量（Page View，PV）和访客数（Unique Visitors，UV）的统计基础。 页面交互日志。当页面加载和渲染完成之后，用户在页面上执行各类操作时采集…"}, {"id": "6913794662322929672", "title": "虚拟DOM&diff", "desc": "Virtual DOM 虚拟dom 是对DOM 的抽象，本质上是javascript对象，这个对象就是更加轻量的描述DOM。简写vdom； 前端性能优化（减少操作DOM）， 因为频繁操作DOM会造成浏览器的回流或者重绘，因此需要这一层抽象，在patch更新过程中尽可能地一次性将…"}, {"id": "6998495884816171039", "title": "vue的自定义指令", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 是什么？ 除了核心功能默认内置的指令，Vue也允许注册自定义指令 为什么用？ 在 Vue 中，代码复用和抽象的主要形式是组件。然而，有的情"}, {"id": "6897948855904501768", "title": "vue2.X中v-if和v-show应用场景和原理分析", "desc": "我们需要清楚vue的渲染逻辑，首先我们需要先把模板转换成js代码，也就是把模板中的v-if啊，v-for啊，v-modal,事件监听，转换成可执行的js代码(也就是render函数)，因为js有逻辑是一种图灵完备的语言。然后执行render函数处理模板转换成html。而在这个过…"}, {"id": "6844903577865945096", "title": "JSX，了解一下？", "desc": "JSX是React中特有的东东，全称 Javascriptのxml。 看起来就是一个普通的html标签不是？嗯。。。慢着。。。看看做左边，我们将这个html标签赋给了一个js变量! 嘿，这就是JSX的功能了。我们说JSX的全称应该翻译为Javscriptのxml（Javscri…"}, {"id": "6897447446301900808", "title": "Golang+Vue项目Docker化", "desc": "最近做了一个轻全栈项目，用Golang编写服务端API接口，用Vue2.6实现前端UI。最后使用Docker进行构建部署。 整个开发过程还是很顺畅的，没有遇到太大的麻烦。当最后用Docker构建完跑起来的时候，真的发现Docker这玩意是真的方便啊！ 话不多说，直接介绍这个小项…"}, {"id": "6915282859901059080", "title": "⑨ Vue组件的使用 - Component", "desc": "官方说组件是可复用的 Vue 实例，且带有一个名字，它与 new Vue 拥有相同的选项，比如它拥有生命周期钩子、data、computed、methods 等，与 new Vue 的唯一区别是不拥有 el 这样的根实例选项。 无论是全局注册还是局部注册，每个组件都需要有个名字…"}, {"id": "6917134778953121800", "title": "无星的前端之旅（十三）——require.context和vuex持久化", "desc": "有些component需要全局注册的，但是在main.js中全局注册又太麻烦了。 store采用modules方式分包，使用的时候也要手动注册。 store刷新丢失，需要持久化。 Vue内置了webpack的部分配置，这个咱们就不多说了。 require.context是web…"}, {"id": "6907942907764965384", "title": "vue3 composition（组合式）API 之 setup 入口函数", "desc": "现在我们已经知道 为什么要使用组合式 API 了 ，那么接下来我们需要看的就是如何使用 组合式 API。 在 vue 组件之中，我们通过 setup 函数来使用 组合式 API。 setup 函数在创建组件之前被调用，所以在 setup 被执行时，组件实例并没有被创建。 因此在…"}, {"id": "6908264284032073736", "title": "Vue的异步更新实现原理", "desc": "最近面试总是会被问到这么一个问题：在使用vue的时候，将for循环中声明的变量i从1增加到100，然后将i展示到页面上，页面上的i是从1跳到100，还是会怎样？答案当然是只会显示100，并不会有跳转的过程。 怎么可以让页面上有从1到100显示的过程呢，就是用setTimeout…"}, {"id": "6890939056067182599", "title": "Element框架实现后台管理系统的业务逻辑（首页嵌套发布文章），面包屑、卡片、富文本、文件上传", "desc": "一、配置子路由二、创建组件并在首页设置跳转路由效果三、发布文章组件3.1插入面包屑组件3.1.1面包屑效果3.2卡片视图3.3定义数据3.4收集标题数据3.4.1标题数据效果3.5收集类型数据3.5."}, {"id": "6844904164015734798", "title": "四.记一次用ts+vuecli4重构项目", "desc": "3. 搭建好后目录就是这样 二. 安装插件和基本内容填充 因为这个系统权限之类的并没有很复杂，路由也不是很多，就没有按模块引入，就直接写了。"}, {"id": "6906782002255822861", "title": "从源码来看Vue面试题", "desc": "1、v-for和v-if同时出现，谁的优先级更高？显然for的优先级高于if，因为genElement函数中，for比if更早判断每次执行都会先循环然后判断条件，会导致性能浪费解决方案：在for外嵌套"}, {"id": "6844903597986054152", "title": "微信小程序mpvue(没朋友)踩坑指南", "desc": "作为一个专业踩坑各种小程序框架(原生,wepy,web-view)的前端小白鼠来说,第一次见到mpvue还是蛮兴奋的,毕竟可以无缝对接Vue,大大降低了小程序的学习成本.综合对比一下几个框架的优劣,毫不犹豫的选择了mpvue来开发小程序,下面是我的踩坑指南,不正确的地方,希望大…"}, {"id": "6923872665694535688", "title": "vue脚手架与Element-UI组件库", "desc": "Router：路由。在脚手架工具中，它会自动在本项目中使用路由，创建好基本的路由配置（不再需要手动去安装vue-router）。后续会提示你是否启用历史模式 Linter / Formatter：代码格式校验，ESLint 代码格式校验。后续会再次让你具体选择eslint的标准…"}, {"id": "6992109485074579492", "title": "Vue2中单文件SFC与render函数对比", "desc": "记录下Vue源码中template的编译产物render函数 由compileToFunctions构造，其中经历三个阶段、parse、optimize、generate"}, {"id": "6949366117039079454", "title": "基于Vue Cli4搭建Vue3 TSX移动端项目（二）", "desc": "本篇我们来进行移动端自适应、HardSource开发构建加速、babel-plugin-import 按需引入、eslint、stylelint的配置。"}, {"id": "6844903959799267341", "title": "Vue 3.0 加载 播放本地音频", "desc": "最近在写一个生日贺卡的小网页（可以作为特别生日礼物送给想送的人），上面可以动效展示她的图片，和想对她说的话。播符合场景的音乐。最后，有个类似于微信红包的抽礼物环节，你可以把想送的礼物或者特别的愿望放里面。然后把做好的网页做成二维码送出去， 然后在里面做好一切，发现因为播放是有问…"}, {"id": "6968719663412805669", "title": "vuex的使用及vuex状态管理实现网页的主题切换（css）", "desc": "vuex的使用及vuex状态管理实现网页的主题切换（css） 0. vuex的安装 1. vuex的概念及作用 概念：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管"}, {"id": "6909079202922758151", "title": "Vue 3 深入响应式原理 - 聊一聊响应式构建的那些经历", "desc": "【响应式的数据渲染】是现在前端非常重要的机制。但是这种机制它究竟是【怎么被一步一步的构建出来的呢】？请看《Vue 3 深入响应式原理 - 聊一聊响应式构建的那些经历》"}, {"id": "6997321348112449572", "title": "ajax&axios", "desc": "1、什么是AJAX，为什么要使用Ajax（请谈一下你对Ajax的认识） 什么是ajax： AJAX是“Asynchronous JavaScript and XML”的缩写。他是指一种创建交互式网页应"}, {"id": "6992833473375371272", "title": "解决stylelint对深度选择器:deep()报错的问题", "desc": "在使用一些UI组件的时候，在生成html文件时，组件会带上一些哈希值，导致无法用选择器选中，并且修改样式。"}, {"id": "6844903653774458888", "title": "JavaScript设计模式与实践--工厂模式", "desc": "工厂模式是用来创建对象的一种最常用的设计模式。我们不暴露创建对象的具体逻辑，而是将将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。工厂模式根据抽象程度的不同可以分为：简单工厂，工厂方法和抽象工厂。 如果只接触过JavaScript这门语言的的人可能会对抽象这个词的概念…"}, {"id": "6856980221816799245", "title": "手把手教你使用Vue指令，亲手实现一个新闻标记和运动动画指令", "desc": "vue中的指令我们并不陌生，如v-model 、 v-on 、v-show 等等。指令的意义就在于能够对于一些特定的操作进行提取和封装。提高代码的复用性和可维护性 我们都知道，vue一直都希望能够减少dom的操作，但是有的时候又不得不进行对dom的操作。我们可以直接在组件中进行…"}, {"id": "6844903891981565959", "title": "ElementUI 源码简析——源码结构篇", "desc": "ElementUI 作为当前运用的最广的 Vue PC 端组件库，很多 Vue 组件库的架构都是参照 ElementUI 做的。作为一个有梦想的前端（咸鱼），当然需要好好学习一番这套比较成熟的架构。 .github：存放贡献指南以及 issue、PR 模板，这些是一个成熟的开源…"}, {"id": "6894543700387430408", "title": "基于vue的qiankun实践总结", "desc": "原项目中是使用iframe嵌入不同的微应用，iframe虽然有挺多坑，但是用着其实还算顺手，萌发想换qiankun是因为Chrome80后的版本会出现跨站不发送Cookies的问题，本想尝试qiankun看看能不能解决这个问题的同时，也能在实际项目中测试实践微前端,但是Cook…"}, {"id": "6844904163332063239", "title": "Vue工程化封装实践系列(一)[axios封装+bus事件总线]", "desc": "3. 监听事件this.$bus.on('add', this.event_xxx);（ this.event_xxx可以是一个参数也可以是一个在methods中定义过的方法）。"}, {"id": "6850418116745232398", "title": "vue面试题（B站视频笔记）", "desc": "v-if有更高的切换开销，v-show有更高的初始渲染开销，如果需要频繁切换，v-show更好，运行条件不太可能改变时，则用v-if。 v-if不符合条件时，在vue内部调用的是一个_e的方法，创建一个空节点；但v-show无论是符合还是不符合，没有进行节点的创建，只是改变了d…"}, {"id": "6844903914198794254", "title": "非常规 - VUE 实现特定场景的主题切换", "desc": "不同的业务场景，我们一般会选择不同的方法来实现目标。最近在公司运营活动平台上的主题功能的实现 ，我们尝试了一种新的解决方案，实现了页面主题的切换，目标是为了提高项目的可维护性、可扩展性，以及降低接入复杂度。 在了解主题功能之前，我们先来解下业务场景：在运营活动后台中，编辑活动配…"}, {"id": "6844903992053481480", "title": "用于vue框架的文件管理器插件，云盘。", "desc": "用于vue框架的文件管理器插件，云盘。File manager plug-in for vue framework, cloud disk. 一个基于Vue和ElementUi的文件管理器插件，提供类似某云盘操作台的功能。 此组件较为复杂，并且有些设定可能太贴合原来的项目。初次…"}, {"id": "6869382712089247751", "title": "elementUI表格动态添加删除", "desc": "我只简单的描述一下需求：基于elementUI的后台管理系统需要实现一个自定义表格，所有内容均可自定义输入，包括表头（指的是后台输入定义前台显示的的表头，而不是后台页面表头）。表格需要动态添加和删除行和列，以及表格自身也可动态添加或者删除。说实话，这个东西看着确实是没啥，结果做…"}, {"id": "6844903949900742670", "title": "从vue-loader源码分析CSS Scoped的实现", "desc": "虽然写了很长一段时间的Vue了，对于CSS Scoped的原理也大致了解，但一直未曾关注过其实现细节。最近在重新学习webpack，因此查看了vue-loader源码，顺便从vue-loader的源码中整理CSS Scoped的实现。 本文展示了vue-loader中的一些源码…"}, {"id": "6966096849337843748", "title": "第四届 Vue.js 开发者大会 - 主要内容及文章推荐", "desc": "第四届 Vue.js 开发者大会于 2021年05月22日 在杭州召开。主要内容如下： 直播回放地址：https://www.bilibili.com/read/cv11408693"}, {"id": "6979245252477452302", "title": "【Vue2.x 源码学习】第二十七篇 - Vue 生命周期的实现", "desc": "【Vue2.x 源码学习】第二十七篇 - Vue 生命周期的实现；Vue.mixin 介绍；Vue 的 Global API；Vue.mixin 实现；"}, {"id": "6869312828587638798", "title": "更高效的vuex状态缓存方式-createPersistedState", "desc": "在使用vue开发项目的时候，我们经常会利用vuex来进行全局的状态管理从而达到实现数据全局共享的目的，但是使用vuex有一个缺点就是在页面刷新之后数据会消失从而使页面展示异常或者请求接口报错，比如用户在登录成功后，我们会从后台拿到用户的token，或者uid等信息，因为大部分的…"}, {"id": "6844903573134770189", "title": "vue 服务端渲染折腾记录", "desc": "为了解决 vue 项目的 seo 问题，最近研究了下服务端渲染，所以就有了本文的记录。 项目的主要目录结构如上所示，其中 package.json 请查看项目。关于为什么要使用状态管理库 Vuex，官网有明确的解释。后文有例子帮助进一步理解。 接下来我们暂时不管服务端渲染的事情…"}, {"id": "6844903788898156557", "title": "让前端小姐姐愉快地开发表单", "desc": "1. 帮助文档 2. 直观特性展示 3. 开箱即用 4. 扩展能力 5. 支持复杂数据结构 6. 表单控件间交互 感觉已经挺多了，就不一一列举了。 当然。。。"}, {"id": "6844904135188283406", "title": "Vue3 Composition API中的提取和重用逻辑", "desc": "Vue3 Composition API可以在大型项目中更好地组织代码。然儿，随着使用几种不同的选项属性切换到单一的setup 方法，许多开发人员面临的问题是…… 乍一看可能很容易，但是实际上只需要花一点点时间来编写可重用的模块化代码。 让我们来看看如何做到这一点。 问题是，如…"}, {"id": "6974158594837233701", "title": "Vue3 源码解析（九）：setup 揭秘与 expose 的妙用", "desc": "在前几篇文章中我们一起学习了 Vue3 中新颖的 Composition API，而今天笔者要带大家一起看一下 Vue3 中的另一个新鲜的写法 —— setup。"}, {"id": "6880309692367634439", "title": "从一个单元测试出发，梳理vue3的渲染过程", "desc": "我们先从最熟悉的createApp(App).mount(root)这句入手，分两步看起。第一步 createApp(App)创建App实例，第二步mount(root)挂载。 1. createApp 该方法返回app实例，并在其上定义mount方法，即第二步的mount方法…"}, {"id": "6992756917772746789", "title": "vue3 + Composition API + ts + antd 登录示例", "desc": "项目目录 项目说明 本项目使用脚手架 Vue CLI v5.0.0-alpha.4 创建，Please pick a preset: 选择 Manually select features 全局类型 "}, {"id": "6844904048215212045", "title": "Vue2.0源码阅读笔记（十二）：生命周期", "desc": "在 Vue 中，除函数式组件外，所有组件都是 Vue 实例。每个 Vue 实例在被创建时都要经过一系列的初始化过程：数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。 在生成 Vue 实例的过程中会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加…"}, {"id": "6844903653849956359", "title": "一个Vue媒体多段裁剪组件", "desc": "2020.04.20 修复若干bugs; 优化部分动画; 优化交互方式。 近日项目有个新需求，需要对视频或音频进行多段裁剪然后拼接。例如，一段视频长30分钟，我需要将5-10分钟、17-22分钟、24-29分钟这三段拼接到一起成一整段视频。裁剪在前端，拼接在后端。 网上简单找了…"}, {"id": "6844903858498437127", "title": "基于vue-cli3多页面开发apicloud应用", "desc": "剩下的配置根据自己情况来设定，等待项目创建完成。 生产环境下将项目打包，将打包之后的文件拷贝到APICloud项目html文件夹下（根据自己习惯），路劲改为APICloud项目路径即可。"}, {"id": "6844903534798831629", "title": "一起动手撸一个富文本编辑器吧", "desc": "公司要做一个笔记模块，需要用到富文本编辑器。之前有耳闻富文本编辑器是天坑。知乎-为什么说富文本编辑器是个天坑？ 在试过了市面上主流的编辑器后，发现或多或少都不符合要求。主要有以下问题： CKEditor功能很强大，但是太复杂，有很多用不到的地方。 网上开源的编辑器体验或多或少有…"}, {"id": "6844903636233895950", "title": "vue-cli改版  3.0betaUI界面初体验", "desc": "听说vue-cli3.0.0-rc.3版本的发布了，那估计距离稳定版本也不远了。 其中GUI特别有意思。赶紧来尝尝鲜。对于开发者也越来越友好。 别误会，vue-cli和@vue/cli不是同一个源。@是npm账户下作用域，和本文暂时没关系。 在这个界面，我们可以看到一些辅助功能…"}, {"id": "6844903503723233294", "title": "从template到DOM(Vue.js源码角度看内部运行机制)", "desc": "这篇文章算是对最近写的一系列Vue.js源码的文章(https://github.com/answershuto/learnVue)的总结吧，在阅读源码的过程中也确实受益匪浅，希望自己的这些产出也会对同样想要学习Vue.js源码的小伙伴有所帮助。之前这篇文章同样在我司（大搜车）…"}, {"id": "6973253113629278238", "title": "【Vue2.x 源码学习】第十一篇 - Vue 的数据渲染流程", "desc": "【Vue2.x 源码学习】第十一篇 - Vue 的数据渲染流程；流程：template模板 -> render 函数 -> 虚拟dom -> diff 算法"}, {"id": "6844903821580189703", "title": "CSS 搞事技巧：border+transparent", "desc": "出门忘带电源线，快递到了终于可以继续水文章了。好不容易获得一个面试机会，面试官很 Nice，可惜的是当时处于懵逼状态，错过了大好的机会： 我：主要是利用了 border 和 transparent 这两个属性。其余边设置为 transparent，然后将对应的方向设置为需要的颜…"}, {"id": "6844904186115686413", "title": "手写 Vue 手势组件", "desc": "最近需要使用手指捏合扩大的手势操作，找了几个组件，要么对 Vue 适配不好，要么量级太大，决定自己手写手势操作。 直接在 DOM 上绑定 touchstart 、touchmove、touchend 不仅要绑定这几个事件，而且用在其他项目还不好复用。所以用 Vue 自定义指令比…"}, {"id": "6844904081589272590", "title": "手写一个Vue版Toast组件", "desc": "目前，前端生态圈中各大厂高大尚的UI库比比皆是。但是作为一名业务中都是接触移动端开发、H5开发的搬砖者，面对产品各种高端霸气上档次的需求，996是在所不辞的。 工作中养成对自己代码复盘的习惯，各式各样常用到的设计都可以抽离出来作为公共使用的插件或者组件。这样在后续遇到同样问题时…"}, {"id": "6844903904677724168", "title": "解放双手-vscode扩展之根据Vue模板自动生成Scss结构", "desc": "某次小组内开周会，提到开发效率的问题，有个小伙伴提到写新页面的时候，template大概布局写完后，对着template结构写scss是件比较耗时耗力的事情，如果能作出一个自动依据template结构"}, {"id": "6921244297941811208", "title": "vu-query: 目前vue3最好用的请求缓存库", "desc": "尽管大多数传统状态管理库非常适合使用客户端状态，但它们不太适合使用异步或服务器状态。这是因为“服务器状态完全不同”。对于初学者，服务器状态： 如果您不被该列表所淹没，那必须意味着您可能已经解决了所有服务器状态问题，应该得到奖励。但是，如果您像绝大多数人一样，或者尚未解决所有或大…"}, {"id": "6844903845739364365", "title": "vue-cli 3.0 搭建项目", "desc": "3.0版本包括了默认预设配置和用户自定义设置对比2.0来看3.0的目录结构更加精简了移除了配置文件目录（config和build文件夹）移除了static文件夹，新增public文件夹，并且index"}, {"id": "6994068956524855304", "title": "xhr拦截，mockjs原理分析", "desc": "前言 在公司项目vue开发中，我们用mockjs这个库来模拟后段数据来开发前面页面，后端开发进度慢的情况下，前后端不能联调，mockjs简直就是我们福音啊。而且mockjs能让我们的项目在每发出一个x"}, {"id": "6844903710330454024", "title": "前端 H5 横屏 独特处理方案详解", "desc": "随着公司知识付费业务的发展，产品发现横屏展示内容的效果和体验都要比竖屏要来的好。我也感觉确实是这样的～。刚接到这个需求的时候，稍微想了一下，横屏这还不简单直接把整个页面旋转90度，不就完事了？结果真正开发的过程中发现并没有这么简单。比如屏幕横过来手势滑动的方向没有变过来等等！于…"}, {"id": "6929506986182590477", "title": "vue开发如何提高效率? | 牛气冲天新年征文", "desc": "别人的赞许是对你最大的肯定，那如果是那种需求做不完，做完在给需求的那种，没有限定任务的，那就和同行比较，问问小伙伴的进度，领先他也能反面衬托你的开发效率。那如果就一个人呢？？？emm那就和后端大哥开接口比速度吧，领先他，数据自己造假，后面对字段的事~ 实际可以运用到项目中的项目…"}, {"id": "6904142870408609800", "title": "前端将后端返回的文件流转为excel并下载", "desc": "在日常开发中，我们可能会遇到导出excel的情况，而后端此时给我们返回的是一个文件流，需要前端将文件流转为url地址进行下载。"}, {"id": "6844904096080592903", "title": "超详细 ElementUI 源码分析 —— Radio", "desc": "本文继续带你看表单组件 radio，如果你没有读过另一篇文章 Input，我建议你先看完那个再来，因为很多东西在那里面分析了。 这里重点关注一下value，它在前端页面上并不会起到什么作用，甚至不会显示，但是最主要的就是可以通过它将单选按钮选择的值传递给服务器，好让后台程序知道…"}, {"id": "6844903784708046862", "title": "你也许不知道的Vuejs - 最佳实践(2)", "desc": "我们在实际开发过程中，当项目越来越大，组件越来越丰富时，经常会面临一个问题：很多组件会公用一些通用的 props、data 和 methods等声明，但是也会掺杂组件自己的一些私有特有声明，那么我们能不能像类的继承一样，来提炼和继承呢？ 当然这是可以的，这里可以通过两个基本 A…"}, {"id": "6844903516939485197", "title": "VS Code 折腾记 - (11) 再来一波插件推荐!(代码片段,框架,Node,touchbar,TS,Git,数据库,python!!)", "desc": "我看到很多人会在一些插件下面辱骂.说什么万年不更新,辣鸡插件卸载不掉. 真心替那些作者不值,浪费自己生命造福社区的人却不被尊重还辱骂,贼寒心... NPM Dependency Links : 这个就是方便你在初始化脚手架项目之后想了解某些模块,点击直接调到npm 模块发布页面…"}, {"id": "6996535910258966565", "title": "vue3学习 --- 组件补充和生命周期函数", "desc": "组件是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树。"}, {"id": "6982841050947649572", "title": "菜鸡学源码Vue —— (new Vue发生了什么)", "desc": "实例化Vue函数对象，调用内置方法_init src/core/instance/index.js _init初始化核心功能 src/core/instance/init.js 该方法核心流程主要分为"}, {"id": "6889988292482662413", "title": "在组件上使用 v-model", "desc": "我们在上面的代码中可以看到 v-model 后面加上了冒号传递参数 :checked ，表示 v-model 绑定的是 checked 属性，在触发的事件通过 update:属性 指定，注意格式是固定的，必须 update: 加上属性名称。 如果需要的话，父级可以监听该事件并更…"}, {"id": "6866964944634511368", "title": "谈谈数据状态管理和实现一个简易版vuex", "desc": "首先说说什么叫“前端状态\"。所有程序都有“状态”，状态表现在代码中的各种类型的变量，在程序运行的过程中发生改变的过程，而我们编写的程序就是在控制这些“状态”如何发生改变。 数据状态管理是近年随着在 React/Vue 等现代化的前端框架流行起来的，主要应用在单页应用 SPA(S…"}, {"id": "6898216333217906696", "title": "基于Element UI封装的table组件json化配置", "desc": "| filters | | 数据过滤的选项，数组格式，数组中的元素需要有 text 和 value 属性。 | Array[{ text, value }] | - | - | | filtersMethod | | 数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多…"}, {"id": "6875135181037142024", "title": "vue3 大海贼时代发布了", "desc": "vue3 大海贼时代发布了,学习一下这一方面的知识，大佬，我我我我我，还学的动。我的肩膀宽，砖头搬得动 同时发现了在vue3最后一个非静态的节点编译后：出现了/* TEXT */，这是为了标记当前内容的类型以便进行diff，如果不同的标记，只需要去比较对比相同的类型。这就不会去…"}, {"id": "6844903879990050823", "title": "vuepress+GitHub博客，从此不再沉默。自动化构建+评论，就是这么简单。", "desc": "这个博客是基于Vuepress1.X来搭建的。记录一些技术方面的知识。下面是介绍怎么用Vuepress从头开始搭建一个技术博客。 Vuepress是Vue生态中关于静态网站的一个生成器，对于技术类型博客支持很好，配置少，上手快，UI风格讨人喜欢。这个博客网站使用的是Vuepre…"}, {"id": "6854573210554499079", "title": "PC 项目实战(一)- el-menu 递归渲染无限极树状菜单", "desc": "一、需求说明通过后端返回的嵌套数据，动态渲染出多层级的树状菜单有两种类型的菜单，一种不能点击，只能下拉打开(菜单)，一种可以点击(功能)，通过menuType字段区分二、需求实现2.1封装一个子菜单组"}, {"id": "6920958107031961607", "title": "better-scroll的踩坑总结", "desc": "BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 iscroll 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。 使用better-scr…"}, {"id": "6906046752218939400", "title": "①初探vue【vue学习笔记】🤞", "desc": "Vue是一套用于构建用户界面的渐进式框架。 Vue 被设计为可以自底向上逐层应用，并且其核心库只关注视图层。 Vue 能够为复杂的单页应用提供驱动。 一般在使用 Vue 来构建大型项目的时候，通常会通过npm + vue-cli + webpack的方式进行项目初始化。 在通过…"}, {"id": "6901103494971785223", "title": "基于Vue2.x模拟X Y轴滚动条VScroll", "desc": "前言如上图：vscroll组件支持自定义是否原生滚动条、自动隐藏、滚动条大小、层级及颜色等功能。还支持水平、垂直滚动条并存！您只需<v-scroll>...</v-scroll>即可快速模拟出一个漂亮"}, {"id": "6911577582123089934", "title": "学以致用，基于elementui尝试封装一个form组件", "desc": "2020年的最后一个月，掘金开始了年度征文。 这几周，陆陆续续看了10篇左右的征文，其中有技术大神也有和我一样初出校园的新人。看的不是太多，属实是不敢再看。看见大家的年度总结，才发现原来自己距离优秀还有那么远的距离..... 所以这几周下班后，开始思考这一年自己学习到了什么。作…"}, {"id": "6844904069505482759", "title": "[译]在 Vue 中编写 SVG 图标组件", "desc": "在考虑了将矢量图标从图标字体迁移到内联 SVG 的原因之后，我在 Vue.js 中找到了一个用 SVG 替换图标字体的解决方案，同时仍能保持使用图标字体的灵活性和易用性——能够使用 CSS 轻松改变图标的大小、颜色以及其它属性。 一种流行的方法是使用 v-html 指令和 np…"}, {"id": "6976502940466937892", "title": "Vue3.0源码逐行解析(二) 组件的本质", "desc": "在上篇文章已经介绍了 Vue2.x 与 Vue3 的从创建应用实例到挂载的过程，本章节会介绍组件渲染流程。 组件的本质 当我们使用 Vue 或 React 时，往往会将页面拆分为各种组件，通过拼装组件"}, {"id": "6999548272494772238", "title": "Element-ui 实现el-table的合计 列 功能", "desc": "需求案例： 代码： 页面： 数据结构： 方法函数： 实现效果： 合并行，可以考虑遍历数组 再每个对象中添加 合计得 字段 ，然后把所需求和字段相加 即可。"}, {"id": "6844903775669321736", "title": "设计模式在vue中的应用（四）", "desc": "为什么要写这些文章呢。正如设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结（来自百度百科）一样，也是想通过分享一些工作中的积累与大家探讨设计模式的魅力所在。 有了上面两步的推导要理解模板方法模式在vue中的应用就比较简单了。…"}, {"id": "6902426142494425102", "title": "深入理解Vue实例生命周期", "desc": "每个 Vue 实例在被创建时都会经过一系列的初始化过程。例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。 为了让开发者在Vue实例生命周期的不同阶段有机会插入自己的代码逻辑，vue提供了一种叫做生命周期钩子的函数。主要的生命周期钩子如下：…"}, {"id": "6844903903117443086", "title": "【VUE】 Function-based API 尝鲜", "desc": "一. 设计目的 1. 减少面条代码，提高灵活性。 众所周知， vue.js 的 api 对开发者十分的友好。在开发中，vue.js 的API强制要求开发者将组件代码基于选项切分开来。 理想很美好，现实很骨感。缺乏经验的新手在项目不断迭代中可能会将逻辑写在同一个文件，使得代码逻辑…"}, {"id": "6930520031273385997", "title": "vue2+ts项目中实现自动注册import的函数的失败经历", "desc": "这种写法有些组员提出来不是十分的优雅，我也觉得如果要是能直接使用那就更好了，就更加的方便了。所以这篇文章记录了我为了实现这个功能所做出的尝试，最后的结果是失败了，只是在过程中学到了一些mixin、装饰器和webpack插件的一些知识，为自己做一下记录，如果大家能够帮助我实现，那…"}, {"id": "6917170634225090568", "title": "vue-在js中使用全局过滤器", "desc": "过滤器的使用大概是毫无疑问的，在vue.js官网有着很详细的解释,这里不多赘述。 而要在methos中使用全局过滤器的话，其实纯粹是犯懒，一开始只在dom中格式数据，哪想到，js中也有部分数据（尤其是echarts的数据）需要进行格式化，又不想将过滤器变成公用方法，毕竟这样，所…"}, {"id": "6854573219010068493", "title": "「网络」CSP和Nonce", "desc": "浏览器无法区分JS的来源，有的JS是来自应用本身的，而有的则有可能来自恶意注入。由于浏览器无法区分JS的来源，这可能会被XSS攻击所利用。 例如在一个博客网站，发表一篇包含恶意脚本的<script>标签的文章，这篇文章会保存在服务器中。当其他人访问这篇文章时，会在访问者的浏览器…"}, {"id": "6844903569288593421", "title": "实现一个自定义滚动条", "desc": "首先，我们先把需要实现的功能先确定下来。鼠标左键点击可以拖动鼠标滑轮滚动内容发生变化，自动更新滚动条长度提供开发者一个滚动回调的接口前面两点依靠原生滚动条其实比较简单，但是在第三点上实在是卡了我好久，"}, {"id": "6844904080762994701", "title": "使用Vue全家桶和Nestjs编写的即时聊天应用", "desc": "项目体验地址：http://47.106.13.104/（嘤嘤嘤，服务器和域名备案还没下来，CDN也不能用。对了，请使用桌面端chrome访问，没有做移动端适配！！！） 让各位看官老爷笑话了，由于本人在设计上没有任何天赋，因此该项目以 Fiora 项目其中的一个主题作为了项目原…"}, {"id": "6844904077504020487", "title": "简单理解Vue响应式原理", "desc": "Vuejs是数据驱动型，数据发生改变界面也会刷新改变。但这并不是理所当然，在其内部做了很多复杂的操作。 通过Object.definePropety这个方法来监听数据的改变。 通过发布订阅者模式。 先用正则做下Mustache语法(双大括号)转化。 上代码(代码有挺详细的注释)…"}, {"id": "6924206224078536712", "title": "Vue3（三）CND + import + 工程化的目录结构 = 啥？", "desc": "vue的全家桶和UI库，采用传统的方式加载（CND、script）。 自己写的js代码，采用ES6的 import 方式加载。 目录结构采用vuecli建立的项目的目录结构。 入口页面用vite项目的 index.html。 不用babel做转义（因为还不会用）。 不用webp…"}, {"id": "6979913455461466148", "title": "01.Vue的生命周期", "desc": "一.Vue的生命周期原图 二.Vue生命周期理解图 三.Vue的生命周期总结 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！ 生命周期钩子：就"}, {"id": "6844903551785762824", "title": "使用vue-axios和vue-resource解决vue中调用网易云接口跨域的问题", "desc": "1. 新建vue项目 2. 使用axios 加载axios模块之后错误提示消失了。 这里的not allowed access就是提示我们浏览器不支持跨域请求，搜索了很多资料，网易云不支持跨域请求的(网易云的服务器在返回你的请求中没有Access-Control-Allow-O…"}, {"id": "6899013285476040711", "title": "看懂 Hello World（Vue3）", "desc": "它可以在浏览器上渲染出“Hello Vue”这个字符串，当然对于开发者来说这不要太简单——在 HTML 中添加一个文本节点。但 Vue 作为一个框架，它要实现这个简单的功能要经过哪些步骤呢？ 可以看到 ensureRenderer 其实是一个简单的单例实现，保证渲染器（Rend…"}, {"id": "6844903830287548423", "title": "vue项目中使用fetch开发", "desc": "众所周知，传统 Ajax （指 XMLHttpRequest）是最早出现的发送异步请求技术，其核心是使用XMLHttpRequest对象。但是它也存在一些令人头疼的问题：XHR 是一个设计粗糙的 API，不符合关注分离的原则；配置和调用方式非常混乱，而且基于事件的异步模型写起来…"}, {"id": "6844903971434266631", "title": "我是如何写 Vue 源码的：思路篇", "desc": "看了那么多篇文章，我发现很多文章只会告诉你他是怎么写的而不会告诉你他是怎么想的。而我认为，能否写出代码最主要的是如何构思的？为什么有的人能把代码写的很优雅而有的人写的却很臃肿？为什么有的人能一直写下去而有的人却容易“中道崩殂”？我希望你在本篇文章有所收获，谢谢你的阅读！ 我不知…"}, {"id": "6844903913301213198", "title": "用Vue-Awesome-Swiper实现旋转叠加轮播效果&平移轮播效果", "desc": "引入Vue-Awesome-Swiper有两种方式，一种是全局引入，一种是组件内引入。如果你的项目里只有一个地方要用到这玩意，那就在用到的那个页面引入就行，如果多个地方要用到，那就全局引入吧。 配置参数那里，init我是设置的false，我是想在项目挂载完成后，获取到了接口数据…"}, {"id": "6844904197289148423", "title": "Vue+Ts搭建项目(三)： 按需加载Vant-UI和移动端REM的适配方式", "desc": "2020还自己手写css在个大浏览器的兼容版本难免有些low，这里的autoprefixer正好可以帮我们增加兼容版本。 rootValue根据UI图的大小进行设置，像vant、mint-ui这样的第三方UI框架是375，但是我们开发是一般使用的是750的尺寸，如果rootVa…"}, {"id": "6996928373633056804", "title": "vue 13种常见修饰符", "desc": "13种vue常见修饰符 包揽dom事件修饰符知识点 功能性修饰 表单修饰符 事件修饰符 鼠标按键修饰符 键值修饰符"}, {"id": "6927165372843950087", "title": "vue 节流函数防抖函数封装", "desc": "节流的意思是，规定时间内，只触发一次。比如我们设定500ms，在这个时间内，无论点击按钮多少次，它都只会触发一次。具体场景可以是抢购时候，由于有无数人快速点击按钮，如果每次点击都发送请求，就会给服务器造成巨大的压力，但是我们进行节流后，就会大大减少请求的次数。 防抖的意思是，在…"}, {"id": "6945009807363407903", "title": "vue源码解析-组件化&虚拟DOM", "desc": "上一篇，我们分析了compiler过程，其核心是将template转化为render函数。 我们带着这些问题，来一探究竟。 一. Render函数 我们知道，compiler结果是个render函数。（不熟悉的小伙伴，可以看我的上一篇文章：vue源码解析-compiler）。 …"}, {"id": "6844903829687762951", "title": "Vue监听键盘鼠标事件", "desc": "vue页面监听键盘鼠标等事件。 官方给的例子是在input标签中的，我们想要的效果是不使用固定标签。 这里定义了，键盘按出的时候的事件 和 鼠标滑轮滚动的事件。 这里根据addEventListener(event,function)的用法。 感谢支持。若不足之处，欢迎大家指出…"}, {"id": "6904580117083717639", "title": "Vue的长连接，同时使用sockjs-client 和 stompjs", "desc": "一、安装二、使用"}, {"id": "6844903713010614280", "title": "vue单页应用中 返回列表记住上次滚动位置、keep-alive缓存之后更新列表数据 那点事", "desc": "如果更新或更正再补充。"}, {"id": "6937620536935579655", "title": "写了一个后台管理模板-vue-antd-manage（附说明）", "desc": "对于页面中按钮级别的权限。通过自定义指令v-has来实现 在路由配置中。给路由元信息meta添加面包屑导航的配置，然后对breadcrumb进行处理得到想要的数据 抽空整理了之前写的代码，捋了捋一下项目思路，抽离出了这个模板，目前想实现的功能基本都已整合进项目，对于一些简单项目…"}, {"id": "6994747755503566878", "title": "Vue3版本学习笔记", "desc": "组合式API 需要用到的API 都需要import，这个操作会被插件自动补全 响应性API 1 响应性基础API reactive 返回对象的响应式副本，将全部属性和方法打包为一个对象 转而集合到一个"}, {"id": "6844903634140921870", "title": "一个基于vue和element-ui的树形穿梭框组件", "desc": "Tree-shaped shuttle box component for vue framework, can also be used for mail address book component.用于vue框架的树形穿梭框组件，也可用于邮件通讯录组件。 因为公司业务使用…"}, {"id": "6899285932533530631", "title": "vue全家桶简析——写一个直播类应用web端个人中心", "desc": "注意：最近vue作者已经不再将vue-resource作为官方推荐库，而是推荐使用axios作为http请求库。 项目中最直观的交互就是点击了左边的菜单中的某一项后，右边的主内容容器需显示出对应的内容，传统的方法的话可能会采用iframe或者多页面跳转的形式来实现。但是我们有了…"}, {"id": "6844903605485436941", "title": "深入理解Vue的watch实现原理及其实现方式", "desc": "watch实现完毕。"}, {"id": "6986903427422896159", "title": "vue-router 基本使用", "desc": "最近有在用到vue-router的时候发现自己有的地方还是不很熟悉，特此参考晚上优秀博主的文章记录一下 转载： vue-router 基本使用 https://www.cnblogs.com/SamW"}, {"id": "6994998290131451918", "title": "vue中使用KindEditor富文本编辑器", "desc": "vue中使用KindEditor 插件安装 npm install kindeditor 组件中引入 html中添加textarea输入框 初始化 初始化参数 官方文档 尽情使用"}, {"id": "6987519827401244708", "title": "Vue3学习 --- 邂逅vue3", "desc": "Vue是一套用于构建用户界面的渐进式框架。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。"}, {"id": "6996247230424285221", "title": "前端技术方案-vue-cli", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 什么是 vue Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设"}, {"id": "6995723506096963615", "title": "vue 组件之间的通信", "desc": "“这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战” 组件之间的说明，分为好几种： 1，父组件向子组件传递数据 2，子组件通过事件向父组件传值 3，兄弟组件互相传值 注：父子组件渲染的一个过"}, {"id": "6844903672636243976", "title": "Vue项目数据动态过滤实践", "desc": "这个问题是在下在做一个Vue项目中遇到的实际场景，这里记录一下我遇到问题之后的思考和最后怎么解决的(老年程序员记性不好 -。-)，过程中会涉及到一些Vue源码的概念比如 $mount、render watcher 等，如果不太了解的话可以瞅瞅 Vue源码阅读系列文章 ~ 1. …"}, {"id": "6844903961971916813", "title": "为什么用vue.js，为什么前端开发46%的人都在用？", "desc": "一句话总结：用数据绑定的思想，vue可以简单写单个页面，也可以写一个大的前端系统，也可以做手机app的界面。"}, {"id": "6844904159578161159", "title": "vue中使用节流函数", "desc": "一个常见的业务场景，我们要在input搜索框输入结束后，发送相关请求，获取搜索数据。频繁的事件触发会导致接口请求过于频繁。所以需要我们对此加以限制，来禁止不必要的请求，以免资源的浪费~"}, {"id": "6973287971961176100", "title": "[Vue warn]: Failed to mount component: template or render function not defined.", "desc": "最近公司使用Ele-admin这套vue+Element的框架进行开发系统，我这边在创建了页面，编写了页面功能之后，重新运行之后发现报错了，刚好假期有时间在家里磨了一下，找到了原因。 报错信息如下 出"}, {"id": "6916747342796292104", "title": "七日打卡-Vuex辅助函数详解", "desc": "我们知道如果想要访问vuex.store中state中的数据，需要使用this.$store.state.属性名。显然这样访问数据写的代码很不简洁，辅助函数就是用来解决这个问题的。 通过辅助函数mapState、mapActions、mapMutations，把vuex.sto…"}, {"id": "6844903682002124813", "title": "小程序挖坑之路", "desc": "小程序出来那么久一直没有深入的开发，这次借着公司要做小程序，深入探索了一番，结果挖坑无数，当然，仅限挖坑，并没有填完。哈哈，就先mark一下。 因为公司业务需求，这次小程序用的是 mpvue + typescript 进行开发。 那用原生的输入框是满足不了的，只能自己写组件咯。…"}, {"id": "6844904202905321479", "title": "用vue开发一个时间范围选择组件", "desc": "最近公司内部需要做个会议室预定的小程序，了解大概的需求之后，就开始上手开发小程序直接用uni-app开发，简单暴力，会vue的直接能上手撸了开发完以后，觉得选择时间组件还不错，就考虑开源了，有需求的就"}, {"id": "6844903858741706765", "title": "【译】前端框架技术选型 React vs. Vue (vs. Angular)", "desc": "重新考虑前端技术选型需要大量思考，讨论，决策，规划，管理和实施。我们首先需要做出的决定之一是选择一个前端框架来重新设计我们的产品。 我们研究了几个月来保证我们得出一个的更好决策。进行讨论，建立概念证明，与其他公司相关经验的同事进行面谈，并阅读大量在线材料。 在本文中，我将比较选…"}, {"id": "6994814295968055303", "title": "vue原理解析(二)：vue处理数组，实现computed, 实现模板编译", "desc": "实现对数组的劫持、实现一个computed方法，包括computed中惰性和缓存、实现vue模板编译，将template模板字符串转换成一个AST(抽象语法树),然后编译成一个render函数"}, {"id": "6844903593426812936", "title": "面向Vue新人：写一个简单的倒计时按钮", "desc": "为了更快显示出效果，我把时间设成了5秒。按钮在点击之后会出现倒计时，同时按钮变为不可点击状态，样式也发生变化，鼠标悬浮上的样子也会发生变化。 在data里加了两条数据，一条用来记录时间，一条用来盛放倒计时按钮的具体内容。在countDown函数里我们用了setInterval定…"}, {"id": "6844903966359207950", "title": "尝鲜Vue3之一：浏览器中如何断点调试Vue3 源码", "desc": "好了 同学们可以快乐的玩耍了。"}, {"id": "6844904057094537229", "title": "Vue 组件单元测试究竟测试什么？", "desc": "虽然测试过多或过少都是可能的，但我的观察是，开发人员通常会测试过头。毕竟，没有人愿意自己的组件未经测试从而导致应用程序在生产中崩溃。 在本文中，我将分享一些用于组件单元测试的指导原则，这些指导原则可以确保在编写测试上不会花费大量时间，但是可以提供足够的覆盖率来避免错误。 本文假…"}, {"id": "6993503290344341518", "title": "Mockjs 模拟后台接口数据的简单使用-vue", "desc": "Mock 可以进行生成随机数据，模拟后端接口数据，从而实现开发时，前后端分离，提高效率。 1、安装 2、引入 3、简单使用 4. 语法规范 mockjs的语法规范包括两部分： 数据模板定义规范 数据占"}, {"id": "6931931603593592846", "title": "Vue源码解析-开始", "desc": "vue.js 是一套构建用户界面的渐进式框架，其轻量，易学受到许多开发者的喜爱。了解源码，有助于我们深刻理解vue。 知其然知其所以然，是每个工程师进阶的必经之路。话不多说，进入主题。 一. 模块概览 二. 主入口分析 vue使用rollup做为打包工具，我首先查看packag…"}, {"id": "6844903967755862029", "title": "Vue3.0简单认识", "desc": "颗粒度是组件。 虽然Vue能够保证触发更新的组件最小化，但是单个组件内部依然需要遍历该组件的整个Virtual DOM树。 传统Virtual DOM的性能跟模板大小正相关，跟动态节点的数量无关。在一些组件整个模板内只有少量动态节点的情况下，这些遍历都是性能的浪费。"}, {"id": "6948041470074945573", "title": "vue自定义指令", "desc": "我想大家都接触过v-on、v-show等等指令，那自定义指令是什么呢？自定义指令就是你现在所想的那样，自己写一个自定义指令去操作DOM元素，以达到代码复用的目的。一提到代码复用，我想大家都能想到组件，这里要注意的是自定义指令和组件的适用范围是不一样的。组件一般是我们复用一个结构…"}, {"id": "6921282478434942990", "title": "前端开发在微信支付遇到的坑", "desc": "笔者最近需求包含了微信支付的流程，遇到了不少坑，故做一个记录，为以后避坑可用。 当产品说，别人组也支持了微信支付，咱们组也支持一下吧。需求单上也列了微信H5支付。 H5支付，主要用于触屏版的手机浏览器（注意不是微信的浏览器）请求微信支付的场景。可以从外部浏览器唤起微信支付。 J…"}, {"id": "6847902225340039175", "title": "你可能从来都不知道的6条Vue实战技巧🍊", "desc": "每天上班写着重复的代码，工作效率低，感觉自己没有任何提升。如何能更快的完成手头的工作，提高自己的开发效率，小编整理了一些Vue开发技巧,你们先加班，我先下班陪女神去逛街了。 功能写完开开心心的提测了，测试没啥问题，产品经理表示做的很棒。然而code review时候，技术大佬说…"}, {"id": "6914098384374595591", "title": "移动端最强适配px2rem 以及 结合Vuex实现简单loading加载效果", "desc": "1、 相信许多小伙伴上手移动端时面对各式各样的适配方案，挑选出一个自己觉得简便、实用、高效的适配方案是件很纠结的事情。 深有体会... 效果图不存在卡顿，看起来稍微有些卡顿是录制gif图工具的原因。"}, {"id": "6844903950303363080", "title": "Nuxt 自适应 SSR 方案: SEO 和首屏最小化优化", "desc": "目前项目采用 Nuxt SSR 来完成服务端渲染 ，为满足 SEO 需求，将非首屏内容也进行了请求和服务端直出，导致首屏时间变长（非首屏的资源请求和组件的渲染都会带来额外开销）。对于海量的用户来说，少量的爬虫访问需求反而影响了正常用户的访问，导致 SEO 和用户体验提升存在很大…"}, {"id": "6991016645640585229", "title": "$nextTick 与 setTimeout 的一点对比", "desc": "nextTick做什么？ nextTick接受一个延迟到下一个DOM更新周期的回调函数。这只是Vue的一种说法，\"嘿，如果你想在DOM更新后执行一个函数（这种情况很少发生），我希望你使用nextTic"}, {"id": "6995454744391057415", "title": "计算器vue", "desc": "charAt() 方法可返回指定位置的字符; isNaN() 函数用于检查其参数是否是非数字值; eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码; substr() 方"}, {"id": "6844903640616943623", "title": "Google V8 引擎工作原理（翻译）", "desc": "Google V8 引擎是如何工作的？这是一个非常好的问题，这里有少许流出的官方文档来讲解，到底 V8 内部都做了什么。我会把我知道的东西分享给你(你需要自己猜，哪部分我给拿掉了)，还有很多有用的地址去帮助你明白这些内容。 一个非常简单并且非常快的编译器用于将 js 编译成简单…"}, {"id": "6999266600071200776", "title": "template渲染和vue2、vue3数据绑定原理", "desc": "Vue的template渲染过程 Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。但是模板毕竟是模板，不是真实的dom节点。从模板到真实dom节点还需要经过一些步骤 把模板编"}, {"id": "6988822877558538253", "title": "vue源码解读之全局API", "desc": "前言 这周主要学习Vue全局API Vue.use Vue.mixin Vue.component Vue.filter Vue.directive VUe.extend Vue.set Vue.de"}, {"id": "6983495227017265189", "title": "VeeValidate 中文文档-Guide", "desc": "项目中的 Vue 需要使用表单验证，在网上搜了一些资料，看来看去，还是 VeeValidate 貌似好用点，至少 github 排行最高。 此外 Vue 官网的 Cookbook，其中的 \"表单校验\""}, {"id": "6985923733907046414", "title": "Vue 前端面试题", "desc": "前言 Vue 作为国内最受欢迎的前端框架，几乎每次面试都会涉及到相关的知识点，这里根据以往面试的记录整理了一下，方便自己查缺补漏。如果文章中有出现错误之处，欢迎斧正，谢谢。。。 1. 说一下 Vue "}, {"id": "6844904081610260488", "title": "理解Vue递归组件，实现Tree树形控件实例~", "desc": "思考了两天时间，准备仿照ant-design-vue实现一个基于vue的树形控件。主要用到了vue递归组件思想、input的CheckBox类型输入框的使用。 能够将传入的Json数据生成树形目录。 能够初始化选中节点。 能够手动选中节点，最终可将所有选中节点打印出来。 能够在…"}, {"id": "6999259298928951332", "title": "从零开始开发一个vue组件打包并发布到npm (把vue组件打包成一个可以直接引用的js文件)", "desc": "从零开始开发一个vue组件打包并发布到npm (把vue组件打包成一个可以直接引用的js文件) 自己写的组件 有的也挺好的，为了方便以后用自己再用或者给别人用，打包到npm"}, {"id": "6993330370087223309", "title": "3. vue组件", "desc": "组件 全局组件和局部组件 全局 局部 父子组件间传值 父向子传值 props的具体规则 非props属性 子向父传值:: 通过自定义事件实现 关系型组件间传值 可以通过父组件进行数据中转 $root当"}, {"id": "6850037262441250829", "title": "我在项目中是这样配置Vue的", "desc": "在前面的文章中，小编为大家带来了许多Vue 实战技巧，也得到了大家的许多好评。其实在前面那些技巧之外，我们还可以做的更多，让我们的开发流程更流畅，开发体验更好，项目性能更上一层楼，怎么做呢，我们一起来看看。 在我们开发的时候，为了方便调试，我们需要使用源码进行调试，但在生产环境…"}, {"id": "6949453195987025927", "title": "浅谈前端权限设计方案", "desc": "前言前端权限架构的设计一直都是备受关注的技术点.通过给项目引入了权限控制方案,可以满足我们灵活的调整用户访问相关页面的许可.比如哪些页面向游客开放,哪些页面必须要登录后才能访问,哪些页面只能被某些角色"}, {"id": "6934911314871451685", "title": "『前端优化』—— Vue中避免滥用this去读取data中数据", "desc": "在Vue中，data选项是个好东西，把数据往里一丢，在一个Vue组件中任何一个地方都可以通过this来读取data中数据。但是要避免滥用this去读取data中数据，至于在哪里要避免滥用，如果滥用会导致什么后果，本专栏将会一一揭晓。 在Vue源码中会把data中数据添加gett…"}, {"id": "6979034498352545829", "title": "还在迟疑是否上ts？先上车再说！vue3+ts开发初体验", "desc": "文本主要结合案例体验一下vue3+ts开发的实际效果。到底适不适合你和你的项目，还得根据各位看官自己掌握程度和项目实际情况综合判断。"}, {"id": "6997965021401579556", "title": "diff 算法深入一下？", "desc": "文章主要解决的问题：1、为什么要说这个 diff 算法？2、虚拟 dom 的 diff 算法 3、为什么使用虚拟 dom？4、diff 算法的复杂度和特点？ 5、vue 的模板文件是如何被编译渲染的？"}, {"id": "6972416642600927246", "title": "大屏适配解决方案", "desc": "背景 近期公司投放在展厅大屏中演示的大数据页面，出现了文字、图表、表格等多类组件显示错乱的情况。 目的 解决页面错乱问题，实现多种分辨率的大屏适配 入坑分析 俗话说的好，走过的最多路，就是网友们套路 "}, {"id": "7007354189328154661", "title": "解决emoji多端展示一致性", "desc": "浏览器在访问包含emoji的网页内容时，出现emoji置灰或者不展示的情况 当前浏览器系统环境不支持某些emoji特别是最新emoji的字体展示"}, {"id": "6968169537413840927", "title": "从Element3入门WebGL Shader（一）", "desc": "从Element3入门WebGL Shader。本文是系列的第一篇，介绍了从Element3入门WebGL Shader的基本环境配置以及一些GLSL的基本知识。包括绘制长方形、圆形、直线等。"}, {"id": "6951568091893465102", "title": "Vue 源码解读（4）—— 异步更新", "desc": "详细讲解了 Vue 异步更新的实现原理 以及从源码层次来回答一些和异步更新相关的面试题，比如 nextTick 的实现原理"}, {"id": "6977152988678733855", "title": "手写 Vue 系列 之 Vue1.x", "desc": "手写 Vue1，实现数据响应式原理、编译器、指令(v-bind、v-model、v-on)....."}, {"id": "7005464016923394055", "title": "vue 组件之间的常见的几种传值方式", "desc": "vue 组件之间的常见的几种传值方式 一、父传子 (自定义属性--props) 二、子传父 (自定义事件--this.$emit) 三、兄弟之间传值 (eventBus) 等等"}, {"id": "7007044887719723015", "title": "手把手撸一个vue3全局自定义指令", "desc": "写一个自定义指令并不难，vue中提供了directive这个方法让我们可以很方便的注册以及使用自定义指令，那么我们接下来一步步来看下如何实现以及使用一个全局的自定义指令 以一个加载loading的动画"}, {"id": "7005918787287384071", "title": "ElementUI日期选择器时间选择范围限制", "desc": "ElementUI日期选择器时间选择范围限制 picker-options 属性来限制日期 1.单个日期时间输入框 情景1: 设置选择今天以及今天之后的日期 情景2: 设置选择今天以及今天以前的日期 "}, {"id": "6997796393460957215", "title": "使用vue3.x + typescript + tsx基于element-plus开发一个搜索组件", "desc": "简介 由于业务需要，本人需要开发一个基于element-plus的表单组件集成的搜索组件（效果如下图），效果为通过对组件以JSON Schema的方式传入配置项的json达到动态渲染的效果。本文主要记"}, {"id": "6999782166280273928", "title": "我们团队在 Vue 3 Dev Tools 的帮助下，调试效率有了质的飞跃！", "desc": "Vue3 已经出来了， Vue3 Devtools 正式版也快出来了，目前我们在用的是 beta 版本，现在我们来看看 Vue3 Devtoolls 有哪些新的功能。 安装 打开谷应用商店，搜索 vu"}, {"id": "6921161482663100423", "title": " Vue 3 和 Webpack 5 来了，手动搭建的知识该更新了", "desc": "用 Vue CLI 工具去搭建一个项目。 在领导或同事搭建好的项目基础上做业务。 长此以往，会导致你对整个项目的把控度越来越低。面试下一家公司的面试官问你，是否手动搭建过 Vue 项目的时候，对配置一问三不知🤔️ 。本文着重为大家讲解从 0 到 1 搭建 Vue 3.x 开发…"}, {"id": "7006209455763226660", "title": "vue 插槽还不懂,进来瞄一眼就懂了,骗人是小狗,汪汪汪。", "desc": "开始 在网上看了好多教程，都是迷迷糊糊的，最后还是自己试了下，有个简单的理解，但是我觉得大部分人还是喜欢网上查找教程，所以还是写一写顺便加深自己的记忆。 首先是子组件 child.vue 三种插槽都写"}, {"id": "6844903652881072141", "title": "vue中Axios的封装和API接口的管理", "desc": "回归正题，我们所要的说的axios的封装和api接口的统一管理，其实主要目的就是在帮助我们简化代码和利于后期的更新维护。 在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的…"}, {"id": "6959834710788800542", "title": "从0到1开发可视化数据大屏（下）", "desc": "数据可视化搭建从0到1建设，如何落地以及具体采用了什么开源工具，这是下篇，有兴趣的童鞋也可以看下上篇的介绍"}, {"id": "6980129607353630756", "title": "手写 Vue2 系列 之 编译器", "desc": "手写 Vue 2 系列 之 编译器，基于 lyn-vue (Vue1) 直接进行升级，从字符串模版解析开始，到最终得到 `render` 函数。"}, {"id": "6986843651003383845", "title": "vue-dev-tools安装踩坑", "desc": "vue-dev-tools安装踩坑记录。现在vue3的普及，老版本的vue-dev-tools貌似有点不支持。需要安装最新版本以支持vue3"}, {"id": "6999978408834924580", "title": "Vue nextTick实现原理、源码解析", "desc": "nextTick函数为什么异步执行传入的参数？看了源码应该就懂了。自己看挺懵的，主要还是看别人的博客，然后过了一遍，认真理一下应该还是能看懂。"}, {"id": "6995343778521284621", "title": "Vue3 全局注册 Socket.IO", "desc": "Vue3 全局注册 Socket.IO 通过注册全局provide 实现全局化 在任意模块中使用 inject('socket')调用"}, {"id": "7002026657473101831", "title": "[Vue源码]--每个生命周期都做了什么（逐行注释）", "desc": "查看vue各个生命周期生成的各个实例属性，具体分析官方生命周期图解中每一个步骤的具体含义，，，，，，"}, {"id": "6997698615946772511", "title": "vue封装分页组件", "desc": "本文封装的分页组件主要是在elementui的el-pagination基础之上因页面需要在切换页面的时候需要将页面滚动到表头的位置，所以增加了页面的滚动。 1、引入import Pagination"}, {"id": "6981656757458173988", "title": "⚡vue3+ts+qiankun的微前端快速上手", "desc": "技术栈：vue3、typescript、qiankun(阿里的微前端框架)、vue-cli4 最近正在设计微前端项目，发现qiankun的官方文档只有vue2.x的写法，没有vue3.x的"}, {"id": "6998820608976879646", "title": "Vue3追本溯源(五)ast转化之transform", "desc": "接上篇template模版编译，上篇主要解析了template模版编译的入口以及解析模版字符串的parseChildren方法的内部实现。在生成ast对象之后，继续调用transform方法转化ast"}, {"id": "6996996742612779021", "title": "这🍬好甜！Vue3 新语法糖 script setup ", "desc": "<script setup>是Vue3.2正式支持的一个语法糖，在<script setup>中的代码就像是在setup()函数中一样，所有顶级变量、函数、导入的组件都会暴露给模板使用"}, {"id": "6995066367850315784", "title": "Vue 源码（三）Props原理", "desc": "Props 作为组件的核心特性之一，也是 Vue 项目中接触最多的特性之一，它可以让组件的功能变得丰富，也是父子组件通讯的一个渠道。这篇文章从源码角度出发分析Props的实现原理"}, {"id": "6916474993635229704", "title": "element-ui 二次封装系列- button", "desc": "elementUI是一个vue.js的ui框架, 在做后台管理系统等方面非常出色,然而面对重复的后台管理系统,大量重复的代码, 这里我们将使用elemnt ui做二次封装,以扩展element ui的属性 来简化代码. 本文以 el-button为例el-button是最简单的…"}, {"id": "6984991277364281380", "title": "Vue - The Good Parts: transition", "desc": "随着大家对于交互更高的要求，在很多场景下我们的交互设计是都会要求在页面中适当的加入一些动画来增强用户的感知， 在 Vue 中提供了transition组件，一起来分析研究下"}, {"id": "6990194786997108773", "title": "Vue 组件间的传值五大场景，你造吗？", "desc": "摘要：组件是 vue.js最强大的功能之一，这五个组件间传值场景你了解吗？ 本文分享自华为云社区《你了解Vue组件间传值五大场景吗？》，作者：北极光之夜。 。"}, {"id": "6844903615283363848", "title": "前端路由简介以及vue-router实现原理", "desc": "路由这个概念最先是后端出现的。在以前用模板引擎开发页面时，经常会看到这样 简单来说路由就是用来跟后端服务器进行交互的一种方式，通过不同的路径，来请求不同的资源，请求不同的页面是路由的其中一种功能。 1. hash 模式 随着 ajax 的流行，异步数据请求交互运行在不刷新浏览器…"}, {"id": "6854573221375967240", "title": "Vue开源插件之滑块验证", "desc": "大家好，我是六六。之前项目中用到别人的滑动验证组件，有点卡卡的，所幸就自己写一个呗。今天就分享给大家。目前只是大概的第一版，可能各方面都有不足，大家努力努力提提意见哈，争取做到最完美哈哈。所以第一板块就是更新类容啦，请大家给个关注吧，多多支持。"}, {"id": "6979478474620665887", "title": "保姆级教程：从零搭建 Webpack5+ts+Vue3 开发环境", "desc": "2021年再谈 webpack 项目搭建，保姆级教程，手把手带你搭建 webpack5 + ts + vue3 的企业级项目开发环境"}, {"id": "6992504181747613703", "title": "Vue生产、开发环境如何切换及过滤器的使用", "desc": "一、生产环境，开发环境切换 开发环境：开发环境就是在 /config/index.js下配置proxyTable 生产环境：打包项目后代理就失效啦，所以再生产环境下要重新配置一下 1.第一种方法：通过"}, {"id": "6998326234455212068", "title": "1x2 VueRouter - 基础 -  动态路由与静态路由", "desc": "VueRouter 基础教程系列 🎉 简介 Vue Router 使用自己的路径匹配语法，支持多种高级匹配模式，其灵感来源于 express。 “静态路由”只支持基于地址的全匹配；“动态路由”除了可以"}, {"id": "7004376462186790920", "title": "vue双向数据绑定原理", "desc": "Object.defineProperty(),可以用这个来实现一下vue里面的双向数据绑定。v-model指令一般用于输入框之类的标签使用。"}, {"id": "6997000128619872270", "title": "防抖节流及在Vue里面的应用", "desc": "同事分享的防抖节流及在项目上的应用，觉得还可以，就转发过来了~~~ 这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 防抖节流 什么是防抖节流？ 防抖(Debounce)：防止重复点击触发"}, {"id": "6987676258708488229", "title": "Vue3 局部无注册动态渲染组件", "desc": "<template v-for=\"c in components\" :key=\"c\"> <component :is=\"c\"></component> </template> <script s"}, {"id": "6987398878312005646", "title": "vue+element大型表单解决方案(10)--表单通信和动态表单", "desc": "这个大型表单解决方案的本质在于将大表单拆分成多个子表单，这个在表单拆分篇中已经完整演示说明过；后面大量篇幅都是我在实践中遇到的附加需求，比如辅助锚点工具、数据比对等。实践中，不仅仅有演示中那些简单的表"}, {"id": "6921255904675872776", "title": "10 个超强 Vue3 实战指南，由此突破新特性！", "desc": "为什么发生这样的变化？原因是：如果我们在 Vue2 中创建多个 Vue 实例，那么所有应用（#app）都会共享全局相同的配置。 显然，这并不是我们想要的。在 Vue3 中，你可以创建多个实例，且每个实例都可以拥有单独的配置。 受到 React 的启发，Vue3 引入 Compo…"}, {"id": "6966144365508952101", "title": "vue钩子函数中使用async、await 注意点", "desc": "自己在开发中总会遇到很多问题,很多时候不记录就会忘记了,所以我打算记录下来伴随自己成长,如果有幸能帮到小伙伴那更美哉 在vue中我们经常会有这种需求: 先说注意点: 钩子函数只会在指定时间执行(Vue"}, {"id": "6999265782710419464", "title": "（三）vue发布流程", "desc": "最近尤雨溪发布了3.2版本。小版本已经是3.2.4了。本文来学习下尤大是怎么发布vuejs的，学习源码为自己所用。"}, {"id": "6844904054766698509", "title": "Vue 中 强制组件重新渲染的正确方法", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 有时候，依赖 Vue 响应方式来更新数据是不够的，相反，我们需要手动重新渲染组件来更新数据。或者，我们可能只想抛开当前的DOM，重新开始。那么，如何让Vue以正确的方式重新呈现组件呢？ 强制 Vue 重新渲染组…"}, {"id": "6964330851173662757", "title": "vue+element大型表单解决方案(1)--概览", "desc": "前言 最近在工作中遇到一个超级庞大的表单需求，为了更好地实现以及给用户提供更好的体验，我设计了一个大型表单的解决方案，在实现过程中还得到一些衍生产出，可以说是对vue高级特性的一次全方位应用，因此通过"}, {"id": "6844904192444743693", "title": "基于 vue-cli4.0 构建 多页面 模板脚手架!", "desc": "build/newUtils.js 里的 getEntry方法 根据目录下的 所有html文件生成页面路径以及对应html的对象。 文件夹名与主文件名以及模板html 文件名 必须要一致，层级结构不限制。 以 VUE_APP_ 开头的变量，在代码中可以通过 process.en…"}, {"id": "6844904162799386632", "title": "15分钟上手vue3.0", "desc": "Vue 3 还没有正式发布，但是 Alpha 版本已经发布了。 虽然官方还不推荐在生产环境中直接使用 Vue 3 ，但是提前学习总归是有好处的。 Vue 3 的设计目标是更快，更小，并更好的支持 TypeScript 。 Vue 官方发布了 Composition API 的官…"}, {"id": "6844903945823846414", "title": "Vue 3.0 最新进展，Composition API", "desc": "在上一篇文章Vue 3.0 前瞻，体验 Vue Function API，笔者通过尝试vue-function-api，提前体验了Vue 3.0 即将发布的函数式API，在文章最后，笔者提出了一些思考。最近，Vue 官方发布了最新的3.0 API 修改草案，并在充分采纳社区的意…"}, {"id": "6989894524445310989", "title": "如何在执行npm run xxx 的同时跑node.js脚本", "desc": "引入node环境中自带的两个模块 写文件模块和读文件模块 以下两段代码是一个整体 ：使用方法是直接调用 copyFolde(源文件相对路径，复制目标的相对路径) 函数 将源文件拷贝到目标文件： 将源文"}, {"id": "6994329858755002376", "title": "VUE的小知识", "desc": "1).[].slice.call(lis) 2).node.nodeType 3).Object.defineProperty 4).Object.keys(obj)"}, {"id": "6983576664961712142", "title": "什么是Vue组件？OOP之组件", "desc": "用面向对象将所有的事物都抽象为对象，而类或组件，都具有属性和方法。封装一段重复使用的代码，想使用就调用，想变化就传递参数，就是组件的好处。"}, {"id": "6992495271368196132", "title": "vue3 + vite 项目搭建 - 封装全局请求axios (单例模式)", "desc": "安装依赖 统一管理配置，创建src/config/net.config.ts 封装api模块，用于管理请求路径 src/api/index.ts 创建请求所需类型 封装请求 全局注册，这里是挂载到gl"}, {"id": "6997384154174357517", "title": "用 NuxtJS 构建 SSR 商城 实战笔记——设置环境变量及定义 baseURL", "desc": "本篇主要介绍基于 NuxtJS 构建的 vue 后端渲染（SSR）项目中关于环境变量 process.env 的设置，而设置这玩意儿主要是为了方便配置不同环境下的 api 请求基础路径 baseURL"}, {"id": "6922273256393310216", "title": "有了这款vue表单神器，晚上终于不再加班了", "desc": "今天小编给大伙介绍一个表单神器vue-ele-form。vue-ele-form 是基于element-ui form的二次封装。 希望能与大家共同学习交流,欢迎关注我的公众号**【Github导航站】**。"}, {"id": "6844903913553035272", "title": "2019年 Vue 组件库大评测 Element, iView, HeyUI, Ant Design Vue", "desc": "一年的时间，每一个组件库都有了更多的发展，Ant Design 也出了vue版本的组件库。 所以，在今年，我对目前发展比较稳定以及功能比较齐全的 Vue组件库做出了评测。 相信看这一篇文章的人，肯定也会对 “选择使用哪个组件库？” 这个问题感到烦恼。 而组件的丰富性以及健壮性是…"}, {"id": "6948599366647021576", "title": "实现Web端第三方登录", "desc": "前一阵子，为我的开源项目添加了第三方登录的功能，实现过程还算顺利，本文就跟大家分享下我的实现思路与过程，欢迎各位感兴趣的开发者阅读本文。 我的项目后端基于SpringBoot搭建，所以此处直接采用justauth库来做第三方登录。 在pom.xml中添加下属代码。 此处我们来看…"}, {"id": "6844903609214337037", "title": "Vue页面骨架屏 ", "desc": "在开发webapp的时候总是会受到首屏加载时间过长的影响，主流的解决方法是在载入完成之前显示loading图效果，而一些大公司会配置一套服务端渲染的架构来解决这个问题。考虑到ssr所要解决的一系列问题，越来越多的APP采用了“骨架屏”的方式去提升用户体验。"}, {"id": "7001803967500025892", "title": "Vue中如何使用TypeScript", "desc": "创建一个vue2的TypeScript项目 请看选中的绿色点，空格键进行选中取消，enter下一步 1. 在vue中书写ts的必备插件！ vue-class-component 强化 Vue 组件，使"}, {"id": "6943020826627145735", "title": "80行代码实现Vue骨架屏🏆", "desc": "作为spa中路由切换的 loading, 结合组件的生命周期和ajax请求返回的时机来使用.（ 作为loading 使用）。作为与用户联系最为密切的前端开发者，用户体验是最值得关注的问题。关于页面loading状态的展示，主流的主要有loading图和进度条两种。除此之外，越来…"}, {"id": "6984378114902065182", "title": "Vue3 + TypeScript 系列一 - Vue3 初体验", "desc": "认识 Vue.js；Vue 的安装；Vue 开发体验；Vue 的 MVVM 架构模式；命令式和声明式编程；Vue 源码的下载、调试、阅读（中高级前端工程师必备）；"}, {"id": "6859427370080665613", "title": "从Vue 2到Vue 3的迁移指南之破坏性特性（一、全局API）", "desc": "Vue 2.x拥有大量的全局API与配置，这些全局API与配置可以全局影响到Vue的行为方式。 例如，你可以通过 Vue.component API 创建一个全局Vue组件，如下: 诚然这种方式很方便，但它也导致了几个问题。从技术上讲，Vue 2 并没有“应用”的概念。 我们定…"}, {"id": "6894428515765551118", "title": "Vue 3.0 中 jsx 语法尝试", "desc": "Vue 3.0 正式发布了，喜大普奔😁。新的语法又要学习一阵阵，不过需要在生产环境下大面积使用，可能需要等到它的周边工具：vuex，vue-router 等等全部升级完毕。 Vue 3.0 中尤大使用的了新的编译工具 vite，革了 webpack 的命😂。尝试看了下文档，…"}, {"id": "6844904073238413319", "title": "这次一定彻底弄懂DOM事件机制", "desc": "在网页端、移动端H5、小程序等各个终端环境的前端开发中随处可见事件的运用，可见事件机制的确是前端这一块的重中之重。经过我研读大量博客文章以及开源框架源码后，这次算是对DOM事件机制有了更新更全面的认识。 下文主要通过一个例子带你分析DOM事件的传递、事件处理，然后在此基础上再深…"}, {"id": "6844903512254464014", "title": "Vue.js新手教学|如何写一个Checklist组件", "desc": "本文教你如何写一个移动端的 Checklist 组件，使用 vue 单文件形式开发，适合 Vue.js 新手。同时此文非常长，最好跟着文章步骤边看边写。本文说些什么，或者你能收获什么？。 CSS 的 Flexbox 布局知识。 本文写一个什么样的 Checklist 组件？这个…"}, {"id": "6844903700494974983", "title": "vue 生命周期梳理", "desc": "在使用vue开发过程中经常会接触到生命周期的问题，但对于每个钩子函数都做了什么，应用场景比较模糊，希望通过这次梳理让自己清楚一些。初次写文章，有不对的地方还望各位多多指正！ 1. vue实例化过程 Vue 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始…"}, {"id": "6844904049016307726", "title": "摸鱼不如摸一个高复用Element对话框", "desc": "前言弹出对话框在日常开发中应用得十分广泛，无论是Web网页，还是App，又或者是桌面应用，都可以使用对话框实现一种较高体验性的人机交互，浏览ElementUi，我们可以看到在其组件库中，关于弹出的组件"}, {"id": "6997026915072622605", "title": "vuecli项目环境配置", "desc": "配置 prettier自动格式化、拦截git commit 规范提交信息、代码提交验证等......"}, {"id": "6924931657623404557", "title": "混合开发，原生app内嵌h5页面", "desc": "混合开发，也就是我们平时听到的Hybrid app,由原生（native）开发技术和web开发技术一起进行开发，然后以native app的方式进行展示的应用。 等... 在原生 app中， 使用webview来加载html页面，把web端的页面展示出来，然后在Native a…"}, {"id": "6918249086856462343", "title": "Vue中恢复数据为初始状态", "desc": "1. 直接赋值（不建议使用，若有多个地方需要重新设置数据，产生大量重复冗余的代码） 2. 使用this.$options.data()获取初始 data 的值，再使用Object.assign()来复制对象; 3. 使用全局变量 data()中若使用了 this 来访问 pro…"}, {"id": "6844903703929946125", "title": "最近在 Vue 项目中用到的一些小技巧，或许有用", "desc": "在最近的 Vue 项目中，为了完成需求使用了一些小技巧，做个笔记，或许也能帮到道友。 在开发过程中，我们经常需要引入各种文件，如图片、CSS、JS等，为了避免写很长的相对路径（../），我们可以为不同的目录配置一个别名。 这个需求，怎么说呢，反正就是需求，就想办法实现吧。 就是…"}, {"id": "6844903983954264071", "title": "Vue中extend,extends,minxin,minxins的用法和区别", "desc": "初学vue。extend，extends，minxin，minxins一直没怎么了解清楚，经过大量的查阅后，总结出以下几点，有什么错误的话请大佬指正。 Vue.extend是一个全局的API，实际是创建一个构造器，并将其挂载到HTML的元素上(创建一个template标签)。可…"}, {"id": "6932695758664073223", "title": "Vue3疑问系列(2)  —  在component vnode上绑定指令,指令是如何工作的？", "desc": "便会执行相应的钩子,这在Vue3 疑问系列(1) — 在普通vnode上绑定指令,指令是如何工作的？已经解释过了。 要学会看懂单侧,vue3和element-plus都有单侧,单侧我觉得是最好的学习文档。 该单侧和 '在普通vnode上绑定指令,指令是如何工作的？'一文中的单侧…"}, {"id": "6854573213410656263", "title": "vue3响应式数据最全最细致解析，vue3源码解析持续更新中", "desc": "关于源码解析，网站已经上线，vue3源码解析，最佳实践，网站是逐行代码形式的解析，更多关注于源码，而在掘金上分享的文章则类似于总结，会用更复合一篇文章的结构来写。如果你想持续跟进vue3源码，可以打开前面的网站关注我。 vue3最大的变化莫过于其对于响应式原理的重构，以及其新发…"}, {"id": "6864838468715937799", "title": "AntV G6 【Dagre 流程图布局】在项目需求中的运用  | 🏆 技术专题第三期征文", "desc": "介绍antVG6作为非开箱即用的可视化引擎，其高定制能力让我在对应定制化的需求的条件下选择了它。接下来，讲讲我的踩坑之旅，本文可能需要一定门槛，建议学习具备G6对应的Graph及自定义节点相关文档后进"}, {"id": "6860396460987875335", "title": "vue实现支持插槽的Tree组件", "desc": "当然啦，每个项目他的字段名都不一样，根据自己的项目来，如果叫babaId和erziId也没人管你，只要有对应关系就行。 1. 定义一个 formatTree 方法用来格式化数据，把它变成树形结构 2. 编写 findParents 方法，找到所有最外层父级节点数据 3. 编写 …"}, {"id": "6844903577052250126", "title": "合格前端系列第十弹-揭秘组件库一二事", "desc": "我平常比较喜欢对一些东西做一些记录和总结，其中包括一些组件，积累的量比较多的时候，发现零散的堆积已经不太适合进行管理了。 于是我开始参考市场上一些优秀的 UI 组件库，比如 element-ui、vux、 vant等，对其源码进行拜读，了解其架构的搭建，随后整理出一套属于自己的…"}, {"id": "6844903652272898056", "title": "动手理解导航守卫（Vue）", "desc": "最近不是很忙，把自己不会的技术点看了一遍文档，然后动手敲了一下代码，加深自己理解。通过实战Demo，调试，结果分析，理解了官网的知识点。记录下来，第一是方便自己加深理解，第二是后续可以回顾，第三可以帮助像我这种小白的人一起学习。 导航就是我们说的路由，当路由发生变化的时候，我们…"}, {"id": "6860380685551534087", "title": "「译」在Vue中如何使localstorage变为响应式", "desc": "响应式是Vue的最伟大的特性之一，如果你不知道它在幕后做了什么，那么它对于你来说会显得更加神秘。就像为什么它只适用于对象和数组，而不适用于其他东西呢，比如我们今天所说的localstorage。 接下来，让我们一起来回答这个问题。同时，也让localstorage变为响应式的。…"}, {"id": "6844903638939205640", "title": "Vue(ES6)中的data属性为什么不能是一个对象？", "desc": "最近来面试的很多人。我都会问这个问题“vue中，为什么data是一个方法返回一个对象，而不是直接赋给一个对象”，只有少数人会回答出是怕重复创建实例造成多实例共享一个数据对象。更多的人回答是不知道，或者是官方文档要求这么写就这么写了。 其实这个问题的考点无非就是对vue的熟悉情况…"}, {"id": "6883691745570357256", "title": "你必读的vue生命周期知识", "desc": "之前一直对vue生命周期的执行顺序理解比较含糊，这一次我用几个简单的例子把几种情况统一的整理和记录一下。 如果只有一个组件，那很好理解，直接按照顺序执行就是了。在组件初始化渲染的时候它会执行下面四个： 但是真实的情况不会这么理想，他可能会有很多组件，并且这些组件之间有父子级的关…"}, {"id": "6844903887787278349", "title": "【译】Vue.js函数式组件，什么是函数式组件？为什么要用？什么时候用？", "desc": "TL,DR： 如果你的组件不需要状态，那么将其转换为函数式组件可以将性能提高70%。 函数组件(不要与 Vue 的 render 函数混淆)是一个不包含状态和实例的组件。 简单的说，就是组件不支持响应式，并且不能通过 this 关键字引用自己。 没有状态或实例，你可能会好奇如何…"}, {"id": "6982746045146988557", "title": "Vue全解: 构造选项(基础)", "desc": "创建一个 Vue 实例 Vue 是一个构造函数，对其使用 new 操作符，就得到了一个 Vue 的实例。 vm 对象封装了对视图的所有操作，包括数据读写、事件绑定、DOM 更新。 vm 的构造函数是 "}, {"id": "6971609188825432101", "title": "Vue3 响应式原理探索Part 4 - ref 的原理和实现", "desc": "我们将讨论 ref 的应用场景，为什么需要 ref，以及 ref 相应的原理和实现，顺带学习一下 Object 的 getter 和 setter"}, {"id": "6890116253449453575", "title": "Vue-Cli3搭建组件库", "desc": "webpack：修改配置需要一点 webapck 的知识。 在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。 我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。 我们通过上一步的目录改造后，会遇到两个问题。 新版 Vue CLI 支持使用…"}, {"id": "6979141313165787150", "title": "element-ui中select组件v-model绑定值为对象及设定初始值后，不能重新选择的问题", "desc": "对于下拉框组件，当需要使用options里面其他属性的时候，v-model绑定单个值无法解决需求的时候，需要绑定成对象        在el-select添加value-key=\"id\"属性，el-o"}, {"id": "6844904115886096391", "title": "面试题联盟之 VUE 篇", "desc": "SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户…"}, {"id": "6979129487984181284", "title": "Vue3使用vue-router", "desc": "vue3中使用vue-router的方式有所不同，新增createRouter和createWebHistory等方法，具体请看下面例子， 定义 Router 使用vue-router方法"}, {"id": "6998017269649375262", "title": "Vue组件之间通信的几种方式", "desc": "Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，本篇分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信"}, {"id": "6998009022041325576", "title": "前端多个vue项目公共组件的三种方法（推荐npm file引入）", "desc": "背景 目前很多公司的开发模式都是多个前端一个后端。笔者所在的公司就是这样，移动端前端的产品有两个，这两个产品有很多内容是相似的、甚至一样的。包括页面、样式、JS逻辑等。这样就想将这些公共部分封装成公共"}, {"id": "6979882573845495845", "title": "reactive、readonly 和 ref 的区别和使用场景", "desc": "reactive API reactive创建流程 已经是一个 readonly proxy ，直接返回这个 proxy 必须是对象或数组类型，否则返回 target target 已经是 Proxy"}, {"id": "6921508526628012039", "title": "当面试官问：为什么 Vue3.0 要重写响应式系统？", "desc": "以前面试的时候经常被问到响应式相关的内容，而Vue3.0更新后，面试官又有了新的武器来考核面试者。面试官：为什么Vue3.0要重写响应式系统？对于面试者来说，懵逼树上懵逼果，懵逼树下你和我，面试官在问"}, {"id": "6844903999737430023", "title": "在Vue项目中优雅的实现权限控制", "desc": "权限控制可以粗分为页面级和页面元素级。换成人话就是：这个菜单只有管理员可以看到，这个页面某某某不能访问，这个按钮没有权限不能点击，这个区域别让普通用户看到！！ 接下来我们将产品经理的人话，转换成技术开发的鬼话。 我们需要在渲染之前拿到用户权限列表，可以先从服务端请求获取到当前用…"}, {"id": "6844903669264023559", "title": "Vue 全家桶仿原生App切换效果和页面缓存实践", "desc": "在之前做的 WEB 单页应用在切换效果上有些生硬，而且页面的缓存和更新在体验上达不到预期的效果。虽然 vue 的 keep-alive 能达到将组件进行缓存，但是在做一些特殊的需求的时候，如把新打开的页面（组件）进行缓存，当点击返回的时候就将该缓存的页面（组件）进行销毁，就像模…"}, {"id": "6844903830837002253", "title": "Vue源码: 关于vm.$set()内部原理", "desc": "关于vm.$set()用法可以看官网,这里就不赘述了。 在Vue.js里面只有data中已经存在的属性才会被Observe为响应式数据, 如果你是新增的属性是不会成为响应式数据, 因此Vue提供了一个api(vm.$set)来解决这个问题。 vm.$set()在new Vue(…"}, {"id": "6844904101298323470", "title": "如何理解vue中的v-bind？", "desc": "如果你写过vue，对v-bind这个指令一定不陌生。 下面我将从源码层面去带大家剖析一下v-bind背后的原理。 假设为p标签v-bind化了title属性，我们来分析title属性在vue中是如何被处理的。 在start回调中创建ASTElement，createASTEle…"}, {"id": "6986588158548787207", "title": "只需一步，让你的搜索框智能得起飞", "desc": "以前我总是这样过滤搜索内容 这样确实可以满足关键字搜索需求，但鉴于前端是直接呈现画面给用户的人，我们总是需要站在用户的角度去考虑问题。后面项目做多了，其实发现这样在用户体验上并不够友好，我们来看下下面"}, {"id": "6844903669385658382", "title": "iView 发布 3.1.0 版本，支持 TypeScript，支持 Vue CLI 3", "desc": "自 iView 7.28 发布 3.0 后，今天我们又带来了一个重要的版本 3.1.0（版本代号：INSIDE），这个版本 iView 开始支持 TypeScript，可以算是一个新的里程碑。 支持 TypeScript。 增加 Vue CLI 3 插件。vue-cli-plu…"}, {"id": "6895967213367328776", "title": "ckeditor4 在vue中使用的坑！！！", "desc": "首先我在寻找一款功能齐全的，可以在vue中使用的富文本编辑器，偶然发现了ckeditor这个富文本编辑器，我靠真的很强大！！！然后我就发现了ckeditor4-vue这个插件然后我就安装了，后来发现功"}, {"id": "6870837414852886542", "title": "前端大文件上传深入研究和实现", "desc": "前端：vue 2.x + elementUi 为基础搭建的 后端：Node + Koa2 等库为基础搭建 对于大文件上传考虑到上传时间太久、超出游览器响应时间、提高上传效率、优化上传用户体验等问题"}, {"id": "6965777930056106020", "title": "Vue 虚拟DOM实现原理", "desc": "Vue 的虚拟 DOM 参考了 snabbdom 1. 什么是虚拟DOM Virtual DOM Virtual DOM(虚拟DOM)，是由普通的JS对象来描述DOM对象 真实DOM成员 - 属性太多"}, {"id": "6844904182378397710", "title": "Vue学习总结之搭建vue-cli项目、引入第三方插件(三)", "desc": "每一篇文章都希望您有所收获，每一篇文章都希望您能静下心来浏览、阅读。每一篇文章都是作者精心打磨的作品。 如果您觉得二郎神杨戬有点东西的话，作者希望你可以帮我点亮那个点赞的按钮，对于二郎神杨戬这个暖男来说，真的真的非常重要，这将是我持续写作的动力。您只需要小手轻轻一点，带来的却是…"}, {"id": "6894511218149883918", "title": "vue数组和对象响应式杂谈", "desc": "1. 基本理解 2. 通过set实现数组下标响应式 1. 基本理解 也就是说已经有了一个对象，如果我们手动给对象增加属性，或者删除属性，那么vue检测不到变化。 2. 通过set实现对象响应式 已经在data中对象/数组，如果想添加响应式属性时，可以采用$set的方式；如果这个…"}, {"id": "6934145351293075469", "title": "从 BUG 攻城狮 “牛” 转攻 BUG 师！", "desc": "不知道小伙伴在开发过程中有没有遇到这样扎心的场景：项目本地运行 perfect ，自测也完美通过！ 自己忍不住扬起得意嘴角信誓旦旦地跟测试同学说：“老哥！今天可以早点下班了，这个项目绝不会有严重的 BUG ”。 经过大量的 BUG 毒打，我决定面壁思过、痛改前非，花时间去整理、…"}, {"id": "6967992221467410469", "title": "VUE3学习第五天 ---深入响应式原理（二）", "desc": "接下来是响应式的下半场，ref，toRefs， computed，废话不多说进入学习！ ref 分析： 这也是创建响应式对象的函数， 他接收一个参数，可以是原始值也可以是对象，如果是通过ref创建的响"}, {"id": "6844904178842599431", "title": "基于axios二次封装，适用vue项目", "desc": "大部分请求只需要同域名，所以域名默认不需要配置。 返回数据格式是JSON。"}, {"id": "6973679757355384868", "title": "防抖和节流(解决ajax请求的频率过高)", "desc": "防抖(debounce) 多次触发事件时,先不执行,等到时间过了在执行 节流(throttle) 执行一次,直接失效,等待时间过了再激活"}, {"id": "6844903618055766030", "title": "用vue快速开发app的脚手架工具", "desc": "多页面应用于结构较于简单的页面,因为简答的页面使用router又过于麻烦.本脚手架出于这样的场景被开发出来. 使用脚手架搭配Hbuilder也同样可以快速使用vue开发安卓和IOS APP. MogoH5+ 是一个 vue 多页面脚手架工具,结合 H5+可以快速开发安卓与苹果 …"}, {"id": "6968340760315822093", "title": "Vue 的生老病死", "desc": "学习 Vue 不得不提的就是 Vue 的生命周期。Vue 的生命周期，简单来说就是 Vue 实例从初始化创建到销毁的一系列过程。 怎样理解这个过程呢？一起来康康吧。"}, {"id": "6847902220315443207", "title": "vue-cli3.0搭建项目+图片瀑布流布局", "desc": "本文将vue-cli的使用和图片瀑布流放在一起来讲，主要是我自己做着两方面的练习。其实如果只是写个单页面的图片瀑布流效果也不用专门搭建一个vue-cli项目。需要看代码的小伙伴可以在我的github中自行查看。 Progressive Web App (PWA) Support…"}, {"id": "6994428417273757732", "title": "Vue.js源码剖析--虚拟DOM", "desc": "什么是虚拟 DOM 虚拟 DOM(Virtual DOM) 是使用 JavaScript 对象来描述 DOM，虚拟 DOM 的本质就是 JavaScript 对象，使用 JavaScript 对象来描"}, {"id": "6960460123781218341", "title": "Vue Router使用指南看这一篇就够了", "desc": "Vue-Router 介绍 Vue Router是Vue.js官方的路由管理器。它和 Vue.js 的核⼼深度集成，让构建单⻚⾯应⽤变得易如反掌。"}, {"id": "6844903534006108168", "title": "认识Vue组件", "desc": "Vue.js是一套构建用户界面的渐进式框架（官方说明）。通俗点来说，Vue.js是一个轻量级的，易上手易使用的，便捷，灵活性强的前端MVVM框架。简洁的API，良好健全的中文文档，使开发者能够较容易的上手Vue框架。 本系列文章将结合个人在使用Vue中的一些经(cai)验(ke…"}, {"id": "6844903811094413320", "title": "Vue生命周期", "desc": "完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器"}, {"id": "6994308429460275208", "title": "vue项目实现多文件统一上次", "desc": "这个项目是用的elementui弄的 里面有个给用户上传文件的功能 用的是额了么上传的组件这个上传组件默认是选一个传一个的产品的需求是同时选择多个文件只调用一次后台接口，所以就改动了下上传的组件"}, {"id": "6944887985531781133", "title": "Vue进阶 Diff算法详解", "desc": "渲染真实DOM会有一定的开销，如果每次修改数据都进行真实DOM渲染，都会引起DOM树的重绘和重排，性能开销很大。那么有没有可能只修改一小部分数据而不渲染整个DOM呢？虚拟DOM和Diff算法可以实现。 真实DOM操作为一个属性一个属性去修改，开销较大。 Vue的虚拟DOM数据更…"}, {"id": "6959055783703085063", "title": "Vue0.1版本源码的解读（1）", "desc": "读了一下部分Vue的源码，总体来说读源码还是需要按照主方向来进行把握，不能掉进细节里面。这样就会陷进去。我对这部分代码做了一些注释，保证主线的正常即可。找了网上的大佬的0.1版本代码，分析 一下下 看"}, {"id": "6989549874333106189", "title": "Vue组件间通信简单总结", "desc": "一、传值 1、父传子：通过props属性 特点：（单向数据流，且只读） 如需将该值当作初始值使用，后续需要修改则可以使用data或者computed属性进行修改，或者是利用watch监听变化修改。 当"}, {"id": "6957953951740198943", "title": "Vue小记", "desc": "1，什么是MVC MVP MVVM MVC Model: 代表数据模型，主要任务是操作数据； View：代表UI视图，主要任务是将数据模型转化成ui视图展示出来。 Controller: 控制器，主要"}, {"id": "6994296345234243620", "title": "Vuex知识点梳理", "desc": "Vuex 1.概念 ​ 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。 2.何时使"}, {"id": "6993588049028317221", "title": "vue2-steps-progress 步骤进度条", "desc": "开源地址 gitee https://gitee.com/tomiaa/vue2-steps-progress github https://github.com/tomiaa12/vue2-step"}, {"id": "6992398834861096967", "title": "vue中v-if和v-show的对比", "desc": "这是我参与8月更文挑战的第N天，活动详情查看：8月更文挑战 在我们使用vue框架开发的过程中，经常会用到vue 中的各个指令，有些指令功能效果类似，但是也与区别，v-if和v-show这两个指令就是我"}, {"id": "6854573209329598477", "title": "从零到一，带你彻底搞懂 vite 中的 HMR 原理（源码分析）", "desc": "不知不觉间，距离尤大大当初在微博宣布「vite」的出现到现在，已经过了 2 个月多。 当时，「vite」只是支持对 .vue 文件的即时编译和 import 的 rewrite，相应地「Plugin」也没有几个。并且，最初在「GitHub」上「vite」的 slogan 是这样…"}, {"id": "6997715542865887245", "title": "前端分享--vue2.x源码系列【干货】", "desc": "前言 Vue (读音 /vju/，类似于 view) ，是中国的大神尤雨溪开发的，为数不多的国人开发的世界顶级开源软件， 是一套用于构建用户界面的渐进式框架。Vue 被设计为可以自底向上逐层应用。MV"}, {"id": "6844903559042072584", "title": "你不知道的Vue响应式原理", "desc": "本文根据Vue源码v2.x进行分析。这里只梳理最源码中最主要的部分，略过非核心的一些部分。响应式更新主要涉及到Watcher，Dep，Observer这几个主要类。 1. Vue实例初始化 从Vue的生命周期可知，首先进行init初始化操作，这部分代码在instance/ini…"}, {"id": "6844904126065688583", "title": "深入浅出Vue.extend（源码导读+实现一个编程式组件）", "desc": "Vue.extend作为一个全局api,当然值得我们去深入学习的，同时也是实现编程式组件的重要途径，所以我们通过源码导读加实践的方式开始吧。首先我们会带着几个问题来进行学习，如果你都不会，哈哈哈恭喜你，学完本篇你就会明白了。 使用基础 Vue 构造器，创建一个“子类”。参数是一…"}, {"id": "6931951487442485262", "title": "深入理解vue 修饰符sync【 vue sync修饰符示例】", "desc": "在说vue 修饰符sync前，我们先看下官方文档：vue .sync 修饰符，里面说vue .sync 修饰符以前存在于vue1.0版本里，但是在在 2.0 中移除了 .sync 。但是在 2.0 发布之后的实际应用中，我们发现 .sync 还是有其适用之处，比如在开发可复用的…"}, {"id": "6967259191299801124", "title": "vue3学习笔记之Fragment和Emits", "desc": "Fragment和Emits 本文主要包含两部分内容： Fragments-碎片 emits 自定义事件"}, {"id": "6996081404773679134", "title": "回首Vue3之API篇（一）", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 这篇文章我们来讲一下应用APIcomponent和config的使用，以及我们需要注意的地方。 应用 API 在Vue3中，我们可以通过c"}, {"id": "6867331101552181262", "title": "⚡【有手就行】轻松打造属于自己的Vue工程化脚手架工具", "desc": "以Vue举例来说，虽然vue-cli已经非常牛批，可以快速灵活的创建各种各样配置搭配的初始项目模板，但这对于能够开始搬砖还远远不够，我们还得在此基础上加上一个又一个的配置，并且这些配置散乱无章又大多互不关联，很容易这里少了一个配置那里配错了一个地方，要么就是直接copy旧项目的…"}, {"id": "6994072690696912927", "title": "《图解Vue3.0》- 第13节 组件生命周期", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 vue3的生命周期 挂载阶段 beforeCreate（创建前） created（创建后） beforeMount(挂载前) mounted"}, {"id": "6994207794547130399", "title": "Vue 动态组件的使用场景｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 最近写 Vue 遇到个需求，需要对原有的 Modal 进行改造以支持富文本内容。原 Modal 组件大致是： 使用这个 Modal 组"}, {"id": "6994067933496344589", "title": "《 浅析 Vue 不同构建版本》", "desc": "Vue 完整版 特点： 有 compiler ，视图可以写在 HTML 里面，或者写在 template 选项里. 但是 compiler会占大约 30% 的体积， 因此运行时版本相比完整版体积要小大"}, {"id": "6959719264974536718", "title": "Vue的DOM异步更新", "desc": "数据驱动 数据驱动是Vue的核心思想，在Vue中我们只需要通过操作数据来操作DOM（视图），什么意思呢？"}, {"id": "6977281275740553230", "title": "vue配合echarts简单开发数据可视化01", "desc": "一、Vue中使用echarts vue-cli创建项目并初次使用echarts 安装echarts（这里建议使用npm安装，而且要指定echarts的版本号，最好不要使用最新的echarts的版本。）"}, {"id": "6994058566462079007", "title": "回首Vue3之指令篇（八）", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 这篇文章我们来讲一下v-slot的使用方法，以及在使用它的时候我们需要注意的地方。 v-slot 提供具名插槽或需要接收 prop 的插槽。"}, {"id": "6994050148812718094", "title": "Vue.js源码剖析--响应式原理", "desc": "vue源码链接 Vue的不同构建版本 术语 完整版：同时包含编译器和运行时的版本。 编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码，体积大、效率低。 运行时：用来创建 Vue "}, {"id": "6987666239011160071", "title": "Vue 笔记", "desc": "============== vue ================== https://jiongks.name/blog/vue-code-review/ 在进行DOM树的渲染时，render渲"}, {"id": "6994036010799595556", "title": "Vue —— 使用vue3+ts+jsx搭建项目", "desc": "项目搭建 创建vue项目 使用vue-cli直接创建就可以了，创建的时候选择自定义模板Manually select features。 接着勾选以下的几个选择安装依赖： ​ Choose Vue v"}, {"id": "6987651963471003661", "title": "关于antd组件tabel与插件vue-draggable-resizable同时使用时，拉伸后触发排序事件的问题", "desc": "一、使用目的： 有时我们表格的数据项目过多，使用横向滚动栏依然觉得滚动起来很麻烦，这时需求要求我们的表格头部宽度可以自动进行拉伸，改变宽度，自定义显示需要看的数据，这时我们就可以考虑使用vue-dra"}, {"id": "6875958284688293901", "title": "Vue的nextTick原理", "desc": "nextTick 源码在 src/core/util/next-tick.js 里面。 在vue的next-tick实现中使用了几种情况来延迟调用该函数，首先我们会判断我们的设备是否支持Promise对象，如果支持的话，会使用 Promise.then 来做延迟调用函数。如果设…"}, {"id": "6967615343946629134", "title": "vue页面之间传参（亲测）", "desc": "vue页面之间传参有很多种方式，可以通过本地存储localStorage、vuex等等方式 本文主要是讲通过路由传参 页面传参很多人已经很熟悉了，但是对于新手来说可能有点分不清，网上一搜资料一大堆，好"}, {"id": "6992843646705860615", "title": "Vue开发遇坑记--keep-alive 路由缓存和清除", "desc": "路由跳转由A进入B的时候缓存A页面的结果，使用keep-alive,但是在不需要的时候怎么清除才能拿到再次进入A去B的时候缓存A的结果呢？"}, {"id": "6984716243005603847", "title": "Vue学习笔记 - MVVM模型和MVC模型", "desc": "MVVM MVVM简介 核心思想： MVVM其实是 M、V、VM，即 Model-View-ViewModel 的缩写。它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel "}, {"id": "6908980355982688269", "title": "请简述 Vue 中模板编译的过程", "desc": "一、目的模版编译的目的就是将模版template转换成渲染函数render模板编译是将字符串模板转换成AST对象优化AST对象，过程是标记静态根节点优化好的AST转换成字符串形式代码，之后通过newF"}, {"id": "6891589578008821767", "title": "从零手写简易Vue3（一）—— crateApp() & mount()", "desc": "baseCreateRenderer方法非常的长，有 1800+行，进行了大量的函数声明，这里对函数体进行了省略。 函数命名非常语义化，可以清晰得知baseCreateRenderer主要是声明了一些模板编译和patch算法相关的函数。 这里createApp方法是调用crea…"}, {"id": "6844904048353607688", "title": "一波ESLint小技巧", "desc": "最近借鉴总结了一波ESLint的小技巧，以记录自己的学习心得。现分享给大家，以供参考。如有不足，还请多多指教，谢谢大家。 在团队开发中，出于代码规范的考虑，我们通常按照ESlint规范书写代码。加入ESLint有非常多的好处，比如说可以帮助我们避免一些非常低级的错误，一些格式上…"}, {"id": "6844903580869066766", "title": "vue-cli + es6 + axios项目踩坑", "desc": "如题，项目采用vue-cli + es6 + axios这三个作为基础跑起来的，依然是移动端，考虑兼容性 安卓4.1 & ios7.1，刚开始引入了jq，后续发现完全没必要，就引入了axios的ajax库，然后其他采用原生JavaScript及ES6进行开发，也没遇到什么大的问…"}, {"id": "6995831032247386142", "title": "elementui 动态渲染的 form 使用 submit 获取提交的数据", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 动态表单需求及实现思路 我的项目有一个通用的 form 组件，内部渲染了海量的 form 元素，有input、checkbox、selec"}, {"id": "6970320064738230302", "title": "前端开发：Vue项目报错Property \"visible\" must be accessed with \"$data.visible\" …的解决方法", "desc": "这是我参与更文挑战的第5天，活动详情查看：更文挑战 报错信息 前段时间在开发一个Vue项目的时候，运行项目之后遇到一个综合的报错提示，有9个不同的同款报错，然后具体报错提示如下所示： `vue.run"}, {"id": "6844903648422526983", "title": "基于 webpack4 搭建 vue2、vuex 多页应用框架", "desc": "最近在对公司的H5项目做重构，涉及到构建优化，由于一些历史原因，项目原先使用的打包工具是饿了么团队开发的 cooking（基于 webpack 做的封装，目前已停止维护了。）如果继续使用，一是项目目前已经比较复杂，现在的构建方式每次打包耗时较长；二是使用一个已经停止维护的工具本…"}, {"id": "6979617750624763934", "title": "Vue学习-Vuex状态管理", "desc": "Vue学习-Vuex状态管理 可以理解为：多个组件共享的变量全部存储在一个对象里面，然后将这个对象放在顶层的Vue实例中，让其他组件可以使用---集中式状态管理 自己封装的对象不是响应式的（Vue.p"}, {"id": "6844903599575678983", "title": "vue不止双向绑定，来看看EventEmitter是怎么实现的", "desc": "使用原生JavaScript实现的EventEmitter 如何将实现的EventEmitter应用到vue"}, {"id": "6969962357640396807", "title": "vue3学习（6）vue3.X生命周期", "desc": "这是我参与更文挑战的第3天，活动详情查看更文挑战 前言： vue2生命周期相信学过vue的小伙伴都是很了解的在这里就不再赘述，记不得的小伙伴可以上官网复习一下 下面着重学习一下vue3相比于vue2生"}, {"id": "6844903585507966990", "title": "Vue.2.0开发后台系统，采坑系列组件篇（一）", "desc": "刚刚接手了一个公司内部的后台系统项目，刚开始的时候真的是一步一个坑，经过一周的加班，基本把常用的功能和组件都完成了，基本缓了一口气。 使用 v-bind=\"item\"传递属性值。那么在input组件下如何接收？看代码 1.3 当子组件的发生改变时，我们需要监听组件中value的…"}, {"id": "6913918627196436493", "title": "浅谈Vue中的组件化和模块化", "desc": "组件：最初的目的是代码重用，功能相对单一或者独立。在整个系统的代码层次上位于最底层，被其他代码所依赖，所以说组件化是纵向分层。多个组件可以组合成组件库，方便调用和复用，组件间也可以嵌套，小组件组合成大组件。 模块：在软件工程的定义中，模块是由边界元素限定的相邻程序元素（例如，数…"}, {"id": "6955374423373250574", "title": "全局组件构思到开发,涉及多种开发思想", "desc": "实际业务开发中有这样一个场景,如标题图需求说明所示,多个页面需要,而且是动态的,不仅如此,点击每页对应列表某个按钮,就需要对应在下方展示. demo github 构思 该组件是否可以全局处理,哪里需"}, {"id": "6909343859675922439", "title": "【Vue-Element-Admin 分析】- 03 权限管理是怎么实现的？", "desc": "显然，在 vue-element-admin 中，实现权限管理的地方是 src/permission.js 中。 其中 afterEach 中做的事很简单：NProgress.done()，作用是结束顶部的 router 跳转进度条。 接下来我们看看 beforeEach 中具…"}, {"id": "6946082150923894791", "title": "vue 调试工具 vue-devtools 安装及使用", "desc": "1. 切换到 vue-devtools 文件夹 2. 切换到 master 分支 3. 安装 node_modules 4. 找到 manifest.json 文件 并 修改 5. 进行打包 6. 找到 Chrome 拓展程序 7. 愉快的使用"}, {"id": "6844903937439432718", "title": "element-ui组件解读 （一） input组件", "desc": "察见渊鱼者不详，智料隐匿者有殃。——《列子·说符》 在日常开发PC管理端界面的时候，会用到element-ui或者iviewui框架，比较常用的input组件是怎么封装的呢，以element-ui框架的input组件为例，分析一下它是怎么封装实现的，也可以为以后自己封装框架提供…"}, {"id": "6844904191073189901", "title": "使用VuePress 搭建个人博客", "desc": "VuePress 是一个静态网站生成器，包含由Vue驱动的主题系统和插件API，同时还包含一个为书写技术文档而优化的默认主题。此篇文章只介绍如何使用VuePress 搭建个人博客的部分。 VuePress 会在 http://localhost:8080 启动一个热重载的开发服…"}, {"id": "6844903576343412743", "title": "Vue 模板编译原理", "desc": "，如果感兴趣或者对美股感兴趣可以加我微信: xiaobei060537, 一起交流 😝。 关于vue的内部原理其实有很多个重要的部分，变化侦测，模板编译，virtualDOM，整体运行流程等。 之前写过一篇《深入浅出 - vue变化侦测原理》 讲了关于变化侦测的实现原理。 那…"}, {"id": "6917509778013388808", "title": "七.使用vue+antd搭建后台管理系统(需求分析和搭建篇)", "desc": "写在前面最近突发奇想，想开发一个后台管理系统试试看(其实是看了vue-element-admin)，说干就干，直接就开始技术选型、页面基础功能需求、实现功能、项目优化等。技术选型大体方向肯定是vue+"}, {"id": "6989859645779083271", "title": "VUE的基础知识：第一课搭建环境，入口，el，data，生命周期，插值", "desc": "Vue的基本介绍和概述 1.VueJS是什么？ 简单小巧，渐进式，功能强大的技术栈； 2.为什么要学VueJS? 学习曲线平缓，易上手，功能强大，轻便； 目前最流行的三大框架之一，使用范围广； 升职加"}, {"id": "6928571260842541064", "title": "Vue源码解读(Rollup篇)", "desc": "Vue.js通过rollup构建工具进行构建，它是一个类似于webpack的打包工具，区别于webpack它更适合一个Library库的打包。在学习Vue.js源码之前，我们有必要知道Vue.js是如何构建不同版本的。 input：入口文件，类比于webpack的entry，它…"}, {"id": "6971618919417282567", "title": "vue封装axios", "desc": "安装 npm install axios; 引入 一般我会在项目的src目录中，新建一个request文件夹，然后在里面新建一个http.js和一个api.js文件。http.js文件用来封装我们的a"}, {"id": "6844903621889359879", "title": "使用ESLint ＆ Prettier美化Vue代码", "desc": "Prettier 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制执行一致的样式，并在必要时包装代码。如今，它已成为解决所有代码格式问题的优选方案；支持 JavaScript、 Flow、 TypeScript、 CSS、 SCSS、…"}, {"id": "6990181368718164004", "title": "VUE基础知识：第二课数据绑定、指令、事件，语法糖", "desc": "先写一个代码 过滤器 过滤器如何使用 {{date | formatDate }},管道符“|”后面加上要定义的过滤器的名字。 指令和事件 指令，它带有前缀v-，能帮我们快速完成DOM操作，循环渲染，"}, {"id": "6972087154398724127", "title": "vue3.0从入门到实战", "desc": "1. 开始 Vue3.0已经发布一段时间了，也是用一段时间了，感觉Vue3.0还是比较好用的，特别是Composition API用起来还是比较顺滑的，相对于Vue2.0的Options API还是比"}, {"id": "6967674083370762248", "title": "v-html渲染组件问题", "desc": "v-html遇到需要渲染组件 思路 先实现简单页面 分三块左中右，左边是需要拖动的组件，中间是用于组件排列显示，右边是解析出的代码 左边组件列表代码 中间组件显示代码 接下来实现组件的拖拽使用drag"}, {"id": "6859571906727804942", "title": "腾讯地图点聚合应用之地图找房", "desc": "地图找房功能使用点聚合来实现的。官网示例如下：https://lbs.qq.com/javascript_v2/sample/overlay-markercluster.html 链家的地图找房主要分为三层。第一层为市区层，比如南山、罗湖等；第二层为片区，比如南头、科技园等；第…"}, {"id": "6844903687123369997", "title": "vue写一个炫酷的日历组件", "desc": "公司业务新开了一个商家管理微信H5移动端项目，日历控件是商家管理员查看通过日程来筛选获取某日用户的订单等数据。 展示当前日期（服务器时间）前后90天，一共181天的日期。 日历可以左右滑动切换月份。 当月份的如果不在181天区间的，需要置灰并且不可点击。 点击日历绑定的节点的外…"}, {"id": "6844903648258949127", "title": "让工作与（vue）音乐相伴", "desc": "最近在自学vue,打算自己仿一个项目来实战一下，由于本人很喜欢听歌，所以就选择了网易云音乐，在这与大家分享一下自己所遇到的问题，其中也有些不足之处也希望大家提一些宝贵的意见，互相学习，一起进步。 由于时间有限，只是做了个页面的播放功能，其中用到了网易云音乐的API网易云，有兴趣…"}, {"id": "6903410875831418893", "title": "在Vue中使用Tinymce富文本编辑器+上传图片到七牛", "desc": "不出意外就大功告成了。。。"}, {"id": "6844903503891038215", "title": "Vue 指令基本使用大全", "desc": "本文的主要內容是vue 指令基本使用大全如果有对有vue 指令基本使用大全有问题的朋友可以了解下。"}, {"id": "6844903763249987591", "title": "【前端笔记】Vuex 是什么，为什么需要", "desc": "Vuex 十分简单好用，没用过难免会有神秘感，以致于往往就高估了其使用难度，其实也就那么回事，没什么高大上的。 Vuex 是专门为 Vue.js 设计的状态管理库，它采用集中式存储管理应用的所有组件的状态。 状态管理并不是什么神奇的概念，其实你一直都在做，即便你从来没了解过状态…"}, {"id": "6844903561323610119", "title": "你也许不知道的Vuejs - 单文件组件", "desc": "Vuejs 提供的扩展名为 .vue 的 单文件组件 为以上所有问题提供了解决方案。 此时项目是没法运行的，因为 .vue 文件 webpack 是没法是别的，它需要对应的 vue-loader 来处理才行，而且细心的朋友会发现 hello.vue 中用到了 ES6 语法，此时…"}, {"id": "6894182826913202189", "title": "从零手写简易Vue3（二）—— setup()", "desc": "调用时机：组件被创建之前，所以没有this，无法访问data,methods,computed。 参数(props,context)：creataApp的参数props和 2.x 版本中实例this上的 3 个属性attrs,slots,emit。 返回值是一个对象：该对象可以…"}, {"id": "6904178248180039694", "title": "用 Proxy 简单实现 Vue 3 的 Reactive", "desc": "这里要给同学们分享的是 Proxy 与双向绑定，我们对大部分的 JavaScript 的这种基础库其实已经在其他文章中做过一些讲解了，或者是在我们编程的时候有所接触了。唯有这个 Proxy 我们之前是非常的回避的，因为在业务中也不太推荐大量的使用 Proxy。 Proxy 的设…"}, {"id": "6940241366731456525", "title": "每天学习一个vue插件(17)——js-file-download", "desc": "前言1介绍常用属性propsurlparamsfilename常用事件eventafter-download2使用安装axios处理文件下载3.注意尾声你不会跟我一样，此刻，正望着天上的月亮发呆吧~晚"}, {"id": "6844903923321405453", "title": "为什么Vue.use()在new Vue() 之前使用", "desc": "使用Vue前端框架开发有些时间了，官方文档对于插件开发也有详细的介绍。最近强迫症犯了，老在想为什么Vue.use函数执行，要在Vue实例化即new Vue(options)之前。解铃还须系铃人，这个问题只能通过看源码解决，于是。。。 在new Vue(options)时首先会执…"}, {"id": "6844903527987298318", "title": "教你快速入门vue框架（-）启动vue项目", "desc": "vue历史2013年发布0.6，0.7版本，当时基本没人使用，大部分使用angular框架2014年发布0.8~0.11版本，v是mvc的重点，m与c被简化，这时开始有人使用vue2015年发布1.0"}, {"id": "6925347763165069320", "title": "vue项目迁移uniapp之实现vue的vant组件toast跟uniapp的兼容", "desc": "前言说：这里说下我们项目迁移的目的，看看跟阅读本文章的小伙伴们是否有共同的需求-本项目原来只是纯h5的，是运行在浏览器端的移动版本，因为个别需求需要打包成为app，但是因为一部分技术的限制，目前只有uniappSDK，所以项目要从原来的vue项目转换为uniapp项目，但是项目…"}, {"id": "6844903590096535566", "title": "使用新一代js模板引擎NornJ提升React.js开发体验", "desc": "当前的前端世界中有很多著名的开源javascript模板引擎如Handlebars、Nunjucks、EJS等等，相信很多人对它们都并不陌生。 早在几年前Backbone等mv*框架流行的时候，js模板引擎遇到了它们的春天，因为Backbone可以支持选配用户自己喜好的模板，并…"}, {"id": "6927201594438057992", "title": "总结Vue父子组件的7种通信方式", "desc": "消息订阅机制，$emit也一样。 以前做android的时候也有这样的广播机制。使用的场景也是非常多，最好把这类型的消息事件名称用个文件管理起来。 上面的方法也能部分使用与页面之间的传参。"}, {"id": "6904919081506308109", "title": "vue3  组合API的 抽离，简单抽离、文件抽离", "desc": "组合API中代码抽离简单抽离抽离到exportdefault外部抽离成模块，(将内部逻辑，抽离到外部文件)add.js添加学生信息remove.js点击删除学生信息"}, {"id": "6988373413983158286", "title": "props传值传this并在updated钩子中处理数据", "desc": "问题重现： 编辑功能下 爷组件通过调用父组件中方法让父组件显示，父组件赋值给sendForm，此时出现问题，父组件init方法在子组件created之后执行，可用v-if解决 父组件传给子组件的数据由"}, {"id": "6974373494524133389", "title": "vue3.0 入门", "desc": "最近在学习vue3.0，了解vue3.0的新特性与新的API，了解与vue2.0比较起来，vue3.0好在哪里。"}, {"id": "6902328358631538696", "title": "vue源码分析（九）", "desc": "当执行响应式对象的set的时候，会触发派发更新的逻辑，首先他会尝试拿到value，如果value和传入的newVal的值相同，那么他会结束执行。之后会执行到val = newVal进行赋值，然后会判断newVal是否是一个对象，如果是对象那么会执行observe把这个对象变成响…"}, {"id": "6983842462364073998", "title": "【Vue】如何将两个非Array类型的复杂数据进行重组并渲染到element ui的table组件上（分多表展示及单表展示）", "desc": "描述： 已知两组键相同，值不同的数据；要求table中渲染时，两组数据中的各个Array数组下标相同的数据要一一对应显示。 data中的定义如下： 数组重组的方法如下： 方法调用如下： 页面渲染如下："}, {"id": "6844904101319294990", "title": "如何得到更灵活的多页面SSR？", "desc": "一直以来都有很多关于SSR 和同构的文章，但大多都解决不了我在实践上的问题，比如，如何做到多页面支持SSR，如果比较优雅地实现同构等问题，大多数文章都只是提及了基础方案。由此我就萌生了解决这些问题的想法并实践了。以Vue 搭配Koa2 为例，围绕几个点来说说一些心得。 本文代码…"}, {"id": "6901615625811656712", "title": "image-view组件的封装，你学废了吗", "desc": "但是无论是哪种方法，都会遇到一个问题，就是默认图片如果也加载不出来，那就会进入死循环了，因此我们可以将图片展示封装成公用方法或组件，兼容以上特殊情况，可以给我们开发大大节省时间。 这时候我们不假思索：这个简单，只要复制一份放大的img，初始为display:none,当hove…"}, {"id": "6996525124170022948", "title": "我实现一个vue的table组件", "desc": "💕效果 样式虽然非常丑，但是不要太在意，咱们是来学习Vue写组件的，样式这东西右手就行。。。 💕需求 🐱‍🏍行，看完需求，那咱就开始！ \\ 😜组件结构 \\   最后再来一个 index.vue 当我们"}, {"id": "6844903602444599304", "title": "超详细动手搭建一个 VuePress 站点及开启 PWA 与自动部署", "desc": "类似hexo一个极简的静态网站生成器,用来写技术文档不能在爽。当然搭建成博客也不成问题。 base 将会自动地作为前缀插入到所有以 / 开始的其他选项的链接中,所以你只需要指定一次。 用gitHub的pages或者coding的pages都可以,也可以搭建在自己的服务器上。"}, {"id": "6844903847178010631", "title": "前端VUE：开发环境搭建", "desc": "官网下载安装nodeJS官网地址：https://nodejs.org/en/download/并配置环境变量；环境配置在安装目录创建如下文件夹:node_cachenode_global环境配置主要"}, {"id": "6879691016317141005", "title": "Vue源码解析之transition(一)", "desc": "Vue提供了transition组件，使用户可以更便捷地添加过渡动画效果。不得不说，真实替用户操碎了心。项目遇到的现象有一次我使用v-for来给elementUI的el-tag组件绑定一个数组。根据数"}, {"id": "6996465914006732814", "title": "Vue知识点", "desc": "1. 使用第三方组件库如何更改样式？ 在vue开发中，经常运用element-ui、vant等组件库，但是很多时候产品需要我们更改样式，这时我们可以写一个专门的样式文件-全局引用。还有一种方法就是一层"}, {"id": "6844903846846660621", "title": "IPhone和安卓预览word和PDF文件之路", "desc": "这篇文章主要是为了总结一下最近做微信内置浏览器预览文件😁(word和pdf)在不同操作系统的问题。在IPhone微信内置浏览器中，基本可以预览各式各样的文件格式，但是在安卓就不行了，打开文件地址就跳转到浏览器下载页面了。以下就是本人的踩坑之路。 注：前端我暂时没找到好的办法将…"}, {"id": "6844903816098217991", "title": "通过几个问题深入分析Vue中的diff原理", "desc": "在使用Vue渲染“可删减”的列表时，错误的使用index作为key，导致列表视图出现错乱。 这个问题一下子很难解释，下面我们通过几个小问题，一步一步来分析。 测试1：打开浏览器控制台，然后删除第一行，查看日志，思考为什么。 测试2：先重置页面，然后删除最后一行，查看日志，思考为…"}, {"id": "6844903519057625102", "title": "Vue 2.0重构G买卖项目经验分享", "desc": "G买卖H5是运行在多端的游戏交易平台。基于产品层面的功能升级以及提高开发效率的需求，前段时间我用Vue和Webpack对项目进行了一次渐进式的重构。所谓渐进式，即每个周期仅对部分页面进行改造，不影响其他业务的开展。这次我改造的是我买到的/我卖出的订单列表以及订单详情。 这次重构…"}, {"id": "6916722151835844622", "title": "⒓ Vue的动态组件 & 异步组件", "desc": "我们看上面的这段代码，首先声明了三个变量 componentA、componentB、componentC 并为它们指定了 template，在 new Vue 里面指定了 componentId 初始值为 componentA。然后在 html 里面通过 &#x3C;comp…"}, {"id": "6882356511473926152", "title": "computed和watch的区别", "desc": "存取器的写法看上去就像设置一个属性一样了，而且我们还可以设置计算属性的值，上面的写法会影响到响应式属性n,当设置vm.a时，vm.n也会发生变化。 computed默认有缓存效果，当计算属性没有发生变化时，不会重新计算更不会重新渲染。 要了解watch，首先要知道属性发生变化的…"}, {"id": "7001009346402320397", "title": "Vue 2.x中的响应式实现原理-2", "desc": "8月更文挑战 前言 MVVM模式最核心的特性就是数据双向绑定，Vue构建了一套响应式系统，可以实现用声明的方式绑定数据，从而在数据发生变化时自动渲染视"}, {"id": "6998339468973309983", "title": "Vue3+TS+ElementUI搭建管理系统之Echarts可视化", "desc": "Vue3通过ref属性获取元素 在compositionAPI中如何使用生命周期函数？ 需要用到哪个生命周期函数，就将对应函数的import进来，接着在setup中调用即可"}, {"id": "6844903553736114189", "title": "Weex + Ui - Weex Conf 2018", "desc": "本文是2018年 Weex Conf 中议题《Weex + Ui》的内容文档整理，主要给大家介绍飞猪 Weex 技术体系从无到有的过程，包括 Weex Ui 组件库的开发和发展，重点分享在 Weex Ui 层建设的一些经验。 文章较长，首先放上 Weex Ui 的开源地址，欢迎…"}, {"id": "6885953990345883661", "title": "顺藤摸瓜🍉：用单元测试读懂 vue3 中的 defineComponent", "desc": "在 Vue 3 的 Composition API 中，采用 setup() 作为组件的入口函数。 文档中说得相当简略，实际写起来难免还是有丈二和尚摸不着头脑的时候。 本文将采用与本系列之前两篇相同的做法，从单元测试入手，结合 ts 类型定义，尝试弄懂 defineCompon…"}, {"id": "6995788760679972894", "title": "vue-cli 3.x 组件开发&发布npm", "desc": "一、脚手架创建vue项目 vue create project-name 当前的项目目录是这样的： 首先需要创建一个 packages 目录，用来存放组件 然后将 src 目录改为 examples "}, {"id": "6996519862117859365", "title": "No.15 vue-element-admin 学习使用（十）样式，和服务端交互", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 vue 中scoped可以解决样式全局污染，选择器复杂的的问题，给 css 加了一个域的概念。向下面这样，scoped中的样式就只会在当前"}, {"id": "6844903751233306631", "title": "不厌其烦，又一个Vue组件库", "desc": "MSDesign基于微软FluentDesign设计的Vue组件库安装使用npm或yarn来安装MSDesign使用浏览器支持支持IE10及以上的现代主流浏览器更新日志详情请查看更新日志文档详情请查看"}, {"id": "6991666265689423908", "title": "vue使用keep-alive详解——实现数据缓存不刷新、修改值后刷新、相同参数区分等｜8月更文挑战", "desc": "应用场景：从列表页跳转到详情页面，然后从详情页返回列表页的时候，列表页的数据不刷新，但是从首页进行跳转到列表页的时候，列表页的数据刷新。 简单来说，是一个前进刷新，后退不刷新的功能。 使用locals"}, {"id": "6844904031689670670", "title": "Vue实现跨项目间的数据访问🙂", "desc": "前言需求场景如下：在Vue项目中，调用的接口，需要用户登录后通过token进行访问，此时登录的相关页面部署在同域名的不同路径里，无法在当前项目访问到，我们要如何拿到这个登陆页面返回的token？接下来"}, {"id": "6958784776270512142", "title": "Vue3基础-03:生命周期钩子函数以及watch的使用", "desc": "1.vue3对比vue2生命周期钩子函数： 2.vue3中的watch: watch的使用方式： 第一种：监听ref创建的简单数据类型： 第二种：监听reactive创建的数据中的某个值： 直接用如下"}, {"id": "6991306501092704287", "title": "【从零开始搞组件】 --- 一个好的组件库都需要什么？", "desc": "前言 前端发展到2021年，Vue从初代的1.0版本到现在也已经迭代发展了7年了，作为一个基本上稳定更新的前端框架，从UI库的角度看，Element UI作为大前辈在业界进行广泛的活跃，但是从契合业务"}, {"id": "6971799353107152927", "title": "vue3+vite2+ts+script 实践--todolist", "desc": "简述 vue3和vite发布有一段时间了，打算使用一个简单的todolist demo尝鲜一下新特性，只涉及到常规的一些操作，暂时还没有涉及到特别高级的特性，主要目的是踩踩坑，代码已上传到codesa"}, {"id": "6987971071215403022", "title": "移动端适配px自动转换成rem", "desc": "安装依赖 使用 rem 单位进行适配，推荐使用以下两个工具： postcss-pxtorem 是一款 PostCSS 插件，用于将 px 单位转化为 rem 单位 lib-flexible 用于设置 "}, {"id": "6992855441512333349", "title": "vue3+ts+vite+nginx部署探索", "desc": "工程信息 vue-cli: @vue/cli 4.5.13 vue3 : \"version\": \"3.1.4\", ts: <script lang='ts' setup> 模式 vue-router："}, {"id": "6844904001561968653", "title": "Vue 滚动触底 mixins", "desc": "在app端常常看到类似加载数据的动画，接下来我们来实现滚动触底加载动画提示，以及如何复用这些逻辑。 经过上面三种情况的分析，我们需要拿到 可视区域的高度 , 滚动高度 , 文档高度这三个变量来进行比较。 将滚动逻辑抽取成 mixins 放在 scroll.js 中。优化功能点如…"}, {"id": "6979900279818829832", "title": "vue-cli 4.5 打包优化，项目实战", "desc": "背景 优化是起初是因为项目在测试环境首屏在测试环境加载过长，测试同学吐槽，然后着手优化的，说干就干，优化搞起来，首屏优化对用户体验还是很重要的。 分析现状 项目是用的 vue-cli4.5 版本，下面"}, {"id": "6969407927354392607", "title": "Vue 是如何实现数据双向绑定的？", "desc": "Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据，如下图所示： 即： 输入框内容变化时，Data 中的数据同步变化。即 View => Data 的变化。 Data 中的数据变化时，文"}, {"id": "6895321619359596552", "title": "Vue全家桶打造多源音乐平台", "desc": "Vue + Vue-Router + Vuex +Vue-lazyload + ES6 + Axios + Webpack + Fontawesome + Better-scroll + Element-UI + async-await + NProgress + v-view…"}, {"id": "6971453317041881124", "title": "文章列表", "desc": "一. 创建组件并导入使用 二. 频道信息传递 三. 使用vant组件来实现列表功能(上拉加载和下拉刷新)"}, {"id": "6904648096270155790", "title": "创建Vue3.0项目,对比Vue2.0改变了什么?", "desc": "0.安装0.1VueCLI0.2脚手架创建Vue3.0项目1.简述Vue3.02.对比Vue2.0变更2.1App.vue2.2proxy效果2.3CompositionAPI(组合API)效果vit"}, {"id": "6909298066667503629", "title": "vue程序运行过程", "desc": "vue-template-compiler主要用作将vue文件中的template解析处理成render函数；并且vue-template-compiler的版本必须和vue的版本一致。"}, {"id": "6844903649974419464", "title": "前端基于浏览器存储的AJAX性能优化", "desc": "受后端开发redis启发，基于浏览器sessionStorage存储的ajax性能优化。 随着单页面和前后端分离的兴起，ajax已经成为大部分前后端数据交互的途径。虽然ajax是异步的，但是随着页面上的需求越来越多，进入页面后要发很多个ajax请求，这样增加了服务器的压力，用户…"}, {"id": "6844903826760138766", "title": "如何写出一个confirm组件", "desc": "一直都想写一个组件库，作为一个前端的我一直都有这么一个梦想，在写项目的过程中一直都在引用别人的组件库长久而言自己也开始想写一个组件库。什么是组件呢？这里不再过的赘述，下面我们先谈一谈confirm组件的封装过程。在有些平台使用过程中删除操作常常伴随着确认的情况毕竟要避免客户的误…"}, {"id": "6844903841167572999", "title": "译| 自定义一个Vue路由器", "desc": "简单的应用通常不需要完全成熟的路由库，如vue-router。 在本文中，我们将使用Vue构建一个简单的自定义客户端路由器。 通过这样做，我们将了解需要处理什么来构建客户端路由以及潜在的缺点。 首先也是最重要的：我们为那些可能对这个概念不熟悉的人解释一下Routing。 在We…"}, {"id": "6844903567812198414", "title": "[ Vue ] 网络请求之 interceptors 实际应用", "desc": "最近在项目开发中，遇到下面这样一个问题： 在进行铭感操作之前，每个请求需要携带token,但是token 有有效期，token 失效后需要换取新的token并继续请求。 每个请求都需要携带 token ，所以我们可以使用 axios request 拦截器，在这里，我们给每个请…"}, {"id": "6844903608022990861", "title": "EasyPack - 也许是最方便的 webpack 构建工具", "desc": "项目中都会用到 webpack,但每个项目的重复配置太多，还经常会因为某个版本升级，导致原先的配置失效，重新花时间去整理。 很多 webpack 工具或者 CLI 都把配置包装起来，不利于二次开发，遂想把webpack配置模块化，简单化，可视化。 EasyPack只专注在构建方…"}, {"id": "6844904020083998727", "title": "Vue中监听DOM高度", "desc": "最近遇到一个需求，当一个DOM中的文字显示行数过多时，需要折叠，并显示阅读更多按钮，点击按钮后会显示全部文字，再点击按钮会折叠文字，但是文字字数少的情况下，不需要折叠。 所以，需要判断包含概述文字的p标签的高度来做判断处理，关键点是使用$nextTick这个方法，来等待DOM全…"}, {"id": "6924136274768953357", "title": "vue学习笔记之特殊属性篇（key&ref&is）", "desc": "1. key属性 2. ref属性 注意点：ref 需要在dom渲染完成后才会有，在使用的时候确保dom已经渲染完成。比如在生命周期 mounted(){} 钩子中调用，或者在 this.$nextTick(()=>{}) 中调用 组件不是DOM元素，是没有dom元素的自带属性…"}, {"id": "6869240027843559438", "title": "vue数据响应式原理（三）", "desc": "在vue数据响应式原理（二）中已经实现了对象类型的依赖收集和依赖更新的。本节内容继续描述数据的依赖收集和依赖更新。 对于一个对象，是给每一个对象的属性定义了一个dep。而对于数组，则是给整个数组定义了一个dep。只要触发了这个数组的那七个方法，就会触发数据更新。 上面的代码表示…"}, {"id": "6844903498161586183", "title": "vue中eventbus被多次触发（vue中使用eventbus踩过的坑）", "desc": "一开始的需求是这样子的，我为了实现两个页面组件之间的数据传递，假设我有页面A，点击页面A上的某一个按钮之后，页面会自动跳转到页面B，同时我希望将页面A上的某一些参数携带过去给页面B。（我知道，小参数的时候可以通过路由的params或者query去传参数，或者大型数据可以用vue…"}, {"id": "6945389924522655758", "title": "如何快速的将vue组件发布npm包", "desc": "前端组件化开发，已经有了多年的历史，不论是服务端渲染，还是前端SPA，都有了相对成熟的组件化开发方案。随着前端生态 less、scss、typeScript、webpack、vite等工具的完善，前端的组件化开发效率已经有了很大的提升。前端社区中贡献了很多不错的前端组件，基本上…"}, {"id": "6844903839947030541", "title": "Vue项目中配置pug解析支持", "desc": "使用pug的原因:使得HTML写起了来更加清晰和快捷用法:Vue的用法没有变化:要注意的一点是:标签后面如果有属性(括号内的)他和括号之间不要加空格,加了空格就会被当成字符串解析vue-cli2+配置"}, {"id": "6971225093217189901", "title": "el-dialog踩坑", "desc": "最近项目中使用el-dialog时遇到一个问题，el-dialog的open事件不起作用。 代码如下： 问题描述： 在点击打开dialog时open事件的断点没有进去。 问题原因： el-dialog"}, {"id": "6844903508685094925", "title": "Vue2.5+ Typescript 引入全面指南", "desc": "Vue2.5+Typescript引入全面指南写在前面写这篇文章时的我，Vue使用经验三个多月，Typescript完全空白，花了大概三个晚上把手头项目迁移至Typescript，因此这篇文章更像个入"}, {"id": "6901234711000317960", "title": "vue项目性能优化（持续更新...）", "desc": "1. v-if 和 v-show 区分使用场景 2. computed 和 watch 区分使用场景 3. v-for注意 4. 长列表性能优化（Object.freeze） 5. 事件和定时器的销毁 6. 图片资源懒加载 对于图片过多的页面，为了加速页面加载速度，所以很多时候…"}, {"id": "6844904143329427464", "title": "VUE之vuex状态管理器", "desc": "Vuex 是一个状态管理器，用来管理Vue的所有组件状态。 当项目中组件较多，结构复杂时，我们可以把它们的公共状态提取出来，放在vuex里面统一管理。"}, {"id": "6844903779091873799", "title": "Vue源码探究-生命周期", "desc": "初步探索完了核心类的实现之后，接下来就要开始深入到Vue实现的具体功能部分了。在所有的功能开始运行之前，要来理解一下Vue的生命周期，在初始化函数中所有功能模块绑定到Vue的核心类上之前，最先开始执行了一个初始化生命周期的函数initLifecycle(vm)，先来看看这个函数…"}, {"id": "6937298118920634404", "title": "vue3.0系列—一个issue", "desc": "这个其实不算是vue3的内容，是在vue2版本的一个isse。是在阅读vue3源码的时候发现的issue，但是觉得比较有趣，就在这里记录下 从上面的结果上看，仿佛点击一次，box1和box2的click事件都触发了。这个是为什么呢？ 但是冒泡也是微任务，甚至这个微任务执行还在n…"}, {"id": "6891206809084772365", "title": "怎么点击下拉框外面关闭下拉框", "desc": "之前看到我不能没有的 5 个 Vue.js 库，里面第一个就是Click Off to Close，最主要功能就是，在用户点击元素之外的时候触发一个事件。 此文的目标，手写自定义指令实现此功能。 功能比如自己封装一个下拉框，或者封装一个日历，希望在点击非下拉框部分，能关闭下拉框…"}, {"id": "6981410033254793247", "title": "Vue是如何完成批量更新dom的？", "desc": "从一个我们最常做的操作，来讲一讲Vue是怎么完成批量更新dom的。本文将深入Vue源码进行讲解，本文最大的收获就是，Vue源码可能没有想象中那么难"}, {"id": "6844903540389838855", "title": "关于 vue 全家桶的四个 “最佳实践”", "desc": "对，就是它：Vue.js 组件编码规范。读过的同学忽略，没读过的同学有时间的话请花 20 分钟认真看看，文章的内容都是在认可这篇规范的基础上展开的。 另外，本文中的“最佳实践”（注意引号），全都是一家之言，不一定对，欢迎各路大佬讨论拍砖。 组件（component）是 vue …"}, {"id": "6844904082063228941", "title": "我的 Element-ui 源码学习 --- <el-alert>", "desc": "笔者现在是一个大三快要实习的学生，最近在学习 Vue 的时候感觉自己学了很多的东西但是没有什么实质性的进步，感觉达到了一个瓶颈，但自认为还没有达到可以深挖 Vue 源码的功力，所以打算开始剖析 Element-ui 的源码，希望可以借此深入 Vue，后面我也会开始 Vue 的源…"}, {"id": "6844903592160133127", "title": "基于react/vue的移动端终极适配方案（更新css-modules配置）", "desc": "2018-4-16日更新css-modules配置，前面步骤不变，可直接跳到第七步。 移动端适配最接近完美的解决方案在react中的使用方式。本文只讲create-react-app创建的项目如何配置，具体每个插件的用途和使用方法请先查阅大漠先生的文章，我相信大漠先生的文章已经…"}, {"id": "7002154742650503198", "title": "Vue中的自定义事件", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 定义自定义事件 在VUE中我们会经常使用到vue的内置事件，例如click,mouseover...等等之类的，在父组件给子组件传递数据的"}, {"id": "6844903639945871368", "title": "Vue Render介绍和一些基本的实例", "desc": "Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力，这就是render 函数，它比 template 更接近编译器。（从官网复制的，慌得一批，其实简单来说就是以函数的方式写HTML，可控…"}, {"id": "6844904191291293704", "title": "【必看】58 道 Vue 常见面试题集锦，涵盖入门到精通，自测 Vue 掌握程度", "desc": "运行速度更快：相比较于 react 而言，同样是操作虚拟 dom ，就性能而言， vue 存在很大的优势。 不同点： 实现本质方法不同，v-show 本质就是通过控制 css 中的 display 设置为 none，控制隐藏，只会编译一次；v-if 是动态的向 DOM 树内添加…"}, {"id": "6971611366604046343", "title": "秒转Vue3教程", "desc": "2021最新Vue3教程 Vue3相比于Vue2有哪些进步? Vue3新增特性: 虚拟DOM的重写 打包大小减少( tree shaking) 初次渲染快 内存使用减少(compositionAPI)"}, {"id": "6992136840383823885", "title": "vue3-巧用指令", "desc": "不知道大伙在工作中已经用上vue3没有，vue3好是好，但是有部分插件并没有更新到3.0的，比如我比较喜欢的自定义滚动条overlayscrollbars，vue3直接使用overlayscrollb"}, {"id": "6844903858850758670", "title": "Vue响应式原理-理解Observer、Dep、Watcher", "desc": "最近在学习Vue的源码，看了网上一些大神的博客，看起来感觉还是蛮吃力的。自己记录一下学习的理解，希望能够达到简单易懂，不看源码也能理解的效果😆 相信很多同学或多或少都了解Vue的响应式原理是通过Object.defineProperty实现的。被Object.definePr…"}, {"id": "6844903618340978696", "title": "Vue源码的最后一站", "desc": "不过这似乎并没有让我放弃，我可以起的早一点，也可以睡得晚一点。直到现在我写了约20万字，依然在持续更新，但我觉得它应该可以和大家见面了，大家久等了。 接下来让我介绍一下《Vue技术内幕》这套源码分析文章的特点，希望让你感受到我的诚意。 上面的链接拿走不谢，另外我要解释一下为什么…"}, {"id": "6844903605414133773", "title": "看完这篇关于MVVM的文章，面试通过率提升了80%", "desc": "vue的特点不必多说(简单易用)。修改数据方便不需要记忆api方法,这都归功于Object.defineProperty,它可以在数据的设置和获取时增加我们自己的功能！(像墙一样) 如何将视图和数据关联起来呢?就是将每个数据和对应的watcher关联起来。当数据变化时让对应的w…"}, {"id": "6983246004158103588", "title": "Vue 高级组件(HOC)实现原理", "desc": "Vue 高级组件(HOC)实现原理 在实际业务中, 若想简化异步状态管理, 可以使用基于slot-scopes的开源库vue-promised. 本文主是强调实际此类高阶段组件的思想, 如果要将此使用"}, {"id": "6919799574253174792", "title": "『前端工程』—— 用Nginx把前端工程部署到域名的子路径上", "desc": "一个产品在A工程中开发，开发完后将A工程部署在域名XXX（ www.xxx.com ）根路径上，那么在域名XXX后面加上A工程中路由配置的路径，就可以访问A工程中对应的页面。 这个产品在后期的迭代中，有几个新功能不在A工程中开发了，要新起一个B工程来开发。通常一个产品只会对外提…"}, {"id": "6844904194437021704", "title": "如何在项目里管理好axios请求与vuex", "desc": "并不是所有的接口都走vuex状态管理才好！并不是所有的接口都走vuex状态管理才好！并不是所有的接口都走vuex状态管理才好！以下是写一个小例子，不是说项目就该这么管理。 一、Dispatch。 我们通过二次封装axios，将公共的请求拦截，异常处理、请求头等封装起来统一操作。…"}, {"id": "6999525569708687374", "title": "Vue 实现 Hover 功能（ mouseover  与 mouseenter 的区别）", "desc": "一、mouseover 和 mouseenter 的区别 mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，冒泡过程。对应的移除事件是 mouseout mouseente"}, {"id": "6844904017894572046", "title": "要做权限管理？你或许可以先看下这个", "desc": "我认为权限管理其实主要做的就是：前端先实现一个拥有完整功能的项目，然后对需要做控制的模块外层包一个访问的判断条件，而这个判断条件就是该功能的权限控制参数，权限控制就是对这个控制参数进行可控制处理。 优点：哈哈哈，还是代码实现简单。。还有各页面权限独立互不干扰 1. 平台划分、路…"}, {"id": "6844903512413831175", "title": "也许 Vue+CSS3 做交互特效更简单", "desc": "做项目就难免会开发交互效果或者特效，而我最近开发的项目一直在使用vue，开发技术栈方面，理所当然就使用了vue+css3开发，过程中发现使用vue+css3开发特效，和javascript/jquery+css3的思维方式不一样，但是比javascript/jquery+css…"}, {"id": "6907424006580731918", "title": "『前端工程』—— 如何搭建一个UI组件库", "desc": "年前入职新公司，公司要求搭建一个UI组件库，本专栏详细记录搭建思路和步骤，最后有项目github地址。 安装完成后，输入命令vue --version，查看Vue CLI的版本号是否是3.0以上，是则表明安装成功。 1、在文件夹地址中输入cmd，打开命令行工具。 2、在命令行工…"}, {"id": "6914957126498517000", "title": "vite的一些认识", "desc": "**总结：**修改了 bundle 模块中的一个子模块， 整个 bundle 文件都会重新打包然后输出，随着项目的扩大，整个项目依赖的子模块会越来越多，则需要打包的资源也增多了，打包的时间也会变得越来越长。 vite利用浏览器支持的ES Moudle，遇到代码里的import …"}, {"id": "6844903608060739598", "title": "vue-view-lazy：基于vue2.x懒加载解决方案", "desc": "原文链接：gitee.com基于vue的懒加载插件注意安装使用直接下载dist目录下的vue-view-lazy.min.js使用使用npm安装直接使用npm:引入vue-view-lazy.main"}, {"id": "6844903637743845384", "title": "关于 Vue.js：那些好的，不怎么样的和糟糕的", "desc": "作者语：在几乎每天使用 Vue 大约两年后，我和它的蜜月期结束了，我终于可以从一些角度来写点什么了。"}, {"id": "6844903613219749901", "title": "记一次偷懒实践", "desc": "其中 module 文件夹下存放各模块抽离的 API，axios.ts 文件创建 axios 的一个实例，并添加一些公共配置（如：baseURL, timeout，拦截器等），index.ts 即是向外暴露各种 API 方法。 我们的目的很简单，读取一个 json 文件，把 j…"}, {"id": "6844904047036612615", "title": "TS下基于Vue Composition API的表单组件化实践", "desc": "这名字太长了，一下都以3.0API或者hook代称。 3.0在API层面发生了非常大的变动，大部分对开发是友好的，也有一些看起来比较扯淡的地方，后面专门写一篇文章来唠。 在这里列举一些我认为比较核心的变动要点，看完应该就能有一个宏观的认识。 3.0API中不会有，data、me…"}, {"id": "6844904023724654600", "title": "vuepress插件开发不完全指南", "desc": "最近用 vuepress 把社区的 typeScript 翻译文章打包成了一个在线文档，不过有一些插件社区没有或者实现的不符合自己定制需求，所以决定自定义实现一个，这篇文化以掘金复制代码功能为例子。 是不是感觉有点头疼，这里记不住没有关系，我们只需要知道插件是在 node 环境…"}, {"id": "6844903519707725831", "title": "fish-ui 一套基于vue2的ui组件库", "desc": "Modern browsers and Internet Explorer 9+(no test)."}, {"id": "6844903591241580557", "title": "Vue.js可复用性 & 组合", "desc": "在实际的应用中，有很多的业务代码是可以重复使用的，vue.js本身是一个注重于高效率的框架，所以也提供了组件中的复用功能。混入 (mixins) 是一种分发 Vue组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该…"}, {"id": "6933967729841930253", "title": "Vue源码，你真的看懂了吗（四）", "desc": "在前端开发中，我们通过写HTML代码来实现页面的结构，我们称这些HTML代码为模板。在vue中，模板先通过模板编译转换成渲染函数，当内部状态发生变化的时候，Vue.js会结合响应式系统，找出最小数量的组件进行重新渲染以进行最少量的DOM操作。 从这张图中，我们可以看到Vue的模…"}, {"id": "6914680969140109320", "title": "vue2核心原理(简易)-computed笔记", "desc": "前言本章项目地址计算属性默认不执行Object.defineProperty=>getter多次取值如果依赖值不发生变化，就不会重新执行,主要是计算watcher里dirtydirty=true就是脏"}, {"id": "6844903891767656462", "title": "vue仿饿了么写的一个简单的form组件", "desc": "不久前，朋友说掘金社区有很多精彩的文章可以看（然而我来了后却发现，大佬们的文章我大部分看不下去【太难了】，反而是掘金的沸点比较有趣，很多搞笑的程序员使我近期迷上了逛社区），但是，光看不发总觉得像是在白嫖。所以呢，趁着最近公司的任务比较轻松，我就正好把近期看的一些文章以及练手的小…"}, {"id": "6957521858178580516", "title": "Vue实战笔记(一) 引入Ant Design", "desc": "Ant Design 是一个很好用的前端组件库，里面包含有很多基础组件，能极大提高我们的开发效率 下面先贴出官方文档，里面的介绍已经十分全面和详细，大家遇到的很多问题都可以在上面找到答案"}, {"id": "6844903700805189639", "title": "用纯 DOM 的方式结合 Puppeteer 自动生成网页骨架屏", "desc": ".. a. 前两者的前提都是需要开发者自己编写骨架屏代码 b. 饿了么的做的比较强大了，还有 UI 界面专门调整骨架屏 只支持 history 模式."}, {"id": "6876486644581531662", "title": "前后端分离，组件开发的那点事", "desc": "今天给大家介绍一个异步节流的前端js库“async-throttle-exec”，再说这个库之前我先说点相关的背景现在web前端基本都被Vue,React,Angular普及，组件开发确实香，但还有很"}, {"id": "6856029939205210126", "title": "小白看源码之Vue篇-2：组件化的过程", "desc": "又到了周末，开始梳理Vue源码的第二篇，在这篇中，我们会讲到初始化Vue过程中组件化的过程，包括如何创建Vnode的过程。以及搞清楚vm.$vnode与vm._vnode的区别和关系。上一篇文章我们讲到vm.$mount函数最后执行到了vm._update(vm._render…"}, {"id": "6844903745306755079", "title": "vuex-stepbystep 经典案例，详细注释一步到位", "desc": "我们现在完善store，把数据填入，进行增删更新的一些状态的统一操作。 我看了有些，博文，感觉把vueX都神话了，各位小伙伴把我这篇教程看完，其实就这些东西。 大项目确实很方便，具体使用:按需使用。"}, {"id": "6925977303642030093", "title": "如何用Vue实现简易的富文本编辑器，并支持Markdown语法", "desc": "前端开发经常会用到富文本编辑器，比如CKEditor，动不动一个库几十M的代码量，其中涉及许多你可能用不到的功能特性和相关设置，CKEditor最新版本的代码仓库就有接近2000个JS文件，300,000行代码。 今天我们从实现一个简易版的编辑器带大家了解一下其背后涉及到的原理…"}, {"id": "6844903581724704775", "title": "Vue文档中几个易忽视部分的剖析", "desc": "针对Vue文档中部分大家可能不会去研读的内容，我做了个小总结，作为有经验者的快餐，不是特别适合初学者，可能有不妥之处，希望大家多提建议。 动态切换的组件都要引入到父组件中，渲染是动态的，但引入不是。 另一种避免重新渲染的方法是为标签增加属性v-once，用于缓存大量的静态内容，…"}, {"id": "6895004480547323917", "title": "Vue造轮子系列-Button组件", "desc": "学习并使用Vue有一段时间了，并且使用过Element UI，iview，ant-design等UI框架，然后就想着自己也做一套自己的UI框架，也算是对自己这么久学习Vue框架的一个总结。在写该组件库的时候，也踩过很多坑，碰到过一些以前使用Vue未曾碰到的问题，因此，这一系列的…"}, {"id": "6926531200521601032", "title": "Vue使用者的React初体验", "desc": "初入前端领域的时候，听说了前端界三大框架React、Vue、Angular。作为一个初学者（啥都不会），肯定是什么简单学什么。网上对于Vue的呼声一片，什么上手简单、中文文档等等。于是就入了Vue.js的坑。最近在学习Vue.js的源码，看到了render函数这一块，隐约听说R…"}, {"id": "6877104768230752264", "title": "自己动手写一个render函数", "desc": "此时我们的元素已经创建成功，接下来我们需要做的就是，把它的文本，渲染上去。 .... 等等，我拿下锤子... on 里面是用来绑定事件的，所以我们不能跟class与 id 同等对待。渣男！区别对待 到这里我们就已经完成了这个 props 里面经常会用到的一些操作了。 那我们就不…"}, {"id": "6844904194869035016", "title": "Vue 微前端&微服务解决方案， Genesis 对远程组件进一步的设计和思考", "desc": "远程组件，是 Genesis 提出的一个概念，它是指通过接口，调用一个另一个服务的组件，它可以是一个按钮、一个模块或者一个页面。 除了嵌入图片、视频之类的，在日常开发，嵌入调用最多的还是 iframe。 而远程组件，可以让你在服务端、客户端都能无缝的嵌入另外一个服务的页面。 这…"}, {"id": "6914210887825883149", "title": "总结一下最近学习的后台管理系统的前端权限设计", "desc": "的，这些东西也没必要重复写，直接用现成的就好，主要还是总结一下权限相关。 因为 vue-admin-template 框架中，侧边栏是根据路由生成的，所以我们只要用一个菜单表维护路由就行了，不需要单独再搞一个侧边栏管理，为了满足渲染路由所必须的参数，我们需要告诉后端我们都需要什…"}, {"id": "6844903537625808904", "title": "Vue自定义指令", "desc": "Vue.js是一套构建用户界面的渐进式框架（官方说明）。通俗点来说，Vue.js是一个轻量级的，易上手易使用的，便捷，灵活性强的前端MVVM框架。简洁的API，良好健全的中文文档，使开发者能够较容易的上手Vue框架。 本系列文章将结合个人在使用Vue中的一些经(cai)验(ke…"}, {"id": "6973586443658592292", "title": "Vue3响应式 源码解析（一）", "desc": "Proxy是ES6新增的对象，可以对指定对象做一层代理。 我们通过Proxy创建的对象，无非会经过2个步骤，达成我们的响应式需求。"}, {"id": "6844904114892046349", "title": "前端微模块更值得被推崇！", "desc": "微前端最近已经很火了，最近跟着火的还有 webpack5 module federation 了，想必大家都有耳闻了。但是我今天主要讲的是微模块，我觉得它更值得被推崇。 微前端 和 微模块 的区别，👇请看下图所示。 微模块架构更多的是解决同一应用技术栈内模块编译、打包，以及共…"}, {"id": "6844903926941089806", "title": "『前端工程』—— Vue CLI3搭建组件库并用npm发布实战操作", "desc": "安装完成后，输入命令vue --version，查看Vue CLI的版本号是否是3.0以上，是代表安装成功。 因为在Vue CLI2中使用npm run dev命令启动项目。 使用npm install安装依赖，安装成功后，执行npm run dev,执行成功后在浏览器打开 h…"}, {"id": "6844903799656562695", "title": "【译】Vue 的小奇技（第十篇）：监听第三方组件的生命周期钩子", "desc": "今天要讲的技巧是我以前从我朋友 Damian Dulisz 那里学来的。他是 Vue.js 核心团队的成员，就是那个官方新闻站点 Vue newsletter 的建设者，也还是 vue-multiselect 库的作者。 在一些场景中，我需要在父组件上知道子组件什么时候被创建、…"}, {"id": "6953172593067180040", "title": "一文带你了解vue2之响应式原理", "desc": "在面试的过程中也会问到：请阐述vue2的响应式原理？，凡是出现阐述或者理解，一般都是知无不言言无不尽，知道多少说多少。接下来，我来谈谈自己的理解，切记不要去背，一定要理解之后，用自己的语言来描述出来。"}, {"id": "6997692499917537316", "title": "Vue3.0源码解析「reactive」篇 — 4.computed", "desc": "computed 其实我觉得 computed 就是 effect 方法和 ref 的结合，effect 允许传入一个表达式，并且将其视为副作用进行跟踪。而 ref 则通过 value 属性的拦截器构"}, {"id": "6844904191677186061", "title": "Vue 函数式组件的使用技巧", "desc": "没有管理任何状态，也没有监听任何传递给它的状态，也没有生命周期方法，它只是一个接受一些 prop 的函数。简单来说是 一个无状态和无实例的组件 scopedSlots：(2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。 listeners：(2.3.0…"}, {"id": "6844903818203758600", "title": "VueRouter源码分析", "desc": "vue-router的源码不算很多, 但是内容也不算少。本文谈不上逐行分析, 但是会尽量详尽的说明主流程和原理。对一些工具函数和边缘条件的处理会略过，因为我也没有逐行去了解它们，请见谅。 我们在学习VueRouter源码前，先来复习下hash以及histroy相关的知识。更多细…"}, {"id": "6844904202062299144", "title": "基于Vue2.6搭建UI组件库+VuePress搭建文档", "desc": "在日常业务开发中我们大都会自己封装组件，可能是业务组件，也可能是UI组件。当然，已经有很多优秀的开源UI组件库，比如Ant Design、Element UI、Material UI等，也基本能够满足我们的日常开发。然而，同一个世界，却不是同一个设计师，不同的公司UI设计师有着…"}, {"id": "6995857163646631973", "title": "Vue学习笔记（四）", "desc": "2.16内置指令 v-text指令 v-html指令 v-cloak指令 v-once指令 v-pre指令 2.17自定义指令 2.18生命周期"}, {"id": "6844904145275584519", "title": "Vue3在IOS下的一个小坑", "desc": "这个特效的逻辑是这样的：首先获取后置摄像头权限进行拍摄，然后在视频上方循环播放帧动画（其实就是仿AR），由于公司无力开发AR模型，只能让美工渲图然后web端做个伪AR，那么问题来了，如果是WebGL做出来的模型即使代码量很大，也依然就几百K顶多1M，但是帧动画就不一样了，美工给…"}, {"id": "6963831885852213284", "title": "前端实操案例丨如何实现 JS 向 Vue 传值", "desc": "摘要：项目开发过程中，组件通过render()函数渲染生成，并在组件内部定义了自定义拖拽指令。自定义拖拽指令规定了根据用户可以进行元素拖拽、缩放等一系列逻辑处理的动作。"}, {"id": "6996867275185717279", "title": "vue3学习 --- 动画", "desc": "在开发中，我们想要给一个组件的显示和消失添加某种过渡动画，可以很好的增加用户体验。Vue中为我们提供一些内置组件和对应的API来完成动画，利用它们我们可以方便的实现过渡动画效果。"}, {"id": "6994453139420086303", "title": "vue3前端青铜到黄金王者 - 第六个入门v-model双向数据绑定！", "desc": "今天学习v-model 展示一下我们的奥运获奖项目。把一个响应式对象绑定展示到html标签，也就是数据绑定显示/更新。比如我们有个状态更加用户数据重复更新。v-model 绑定了一个响应式对象，并把结果展示出来。<meta name=\"viewport\" content=\"wid..."}, {"id": "6844903694035582989", "title": "vue + webpack 前端性能优化", "desc": "对于程序开发者而言，开发一个项目不仅仅注重效率和功能，前端的性能问题也是非常重要的。这直接影响用户的体验，从而间接的也反应该项目质量的好坏。 影响项目性能的原因有很多，如：资源文件的大小，业务的繁杂程度等，所以前端优化的方式也很多。这些东西很零碎，容易被人遗忘。所以这篇文章中对…"}, {"id": "6992840193577320478", "title": "Vue.js 样式绑定", "desc": "Vue.js class class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。 Vue.js v-bind 在处理 class 和 st"}, {"id": "6865978424633229325", "title": "对nextTick的简单理解", "desc": "也就是说它会等待DOM更新完成后再去触发回调函数执行，下面结合使用场景来进一步理解。 根据输出值的顺序，可以发现在created()钩子函数执行时DOM并没有进行渲染，此时要是操作DOM并没有任何作用，而如果created里使用了nextTick后是可以获取到DOM对象的。由于…"}, {"id": "6844904183280173069", "title": "前端实现PDF导出功能", "desc": "基于Vue框架开发，前端实现PDF文件导出功能，有多种实现方案，现大概介绍下如何使用html2canvas + jspdf来实现。 点击“导出按钮”，导出并下载指定内容的PDF文件。 调研了下，决定采用html2canvas + jspdf插件来实现，大致原理是使用html2c…"}, {"id": "6997238491968962591", "title": "vue-qr生成二维码并下载到本地", "desc": "vue中使用插件 1.我在使用中，引入了弹框展示 2.把二维码当做一个子组件，处理隐藏函数 下载事件 子组件所有源代码"}, {"id": "7000267035527610404", "title": "Vue CLI 简易教程", "desc": "Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，称为脚手架工具。 使用 Vue CLI 具有以下优点： 统一项目的架构风格， 初始化配置项目依赖， 提供单文件组件。"}, {"id": "6881770863687893000", "title": "在吗？花5分钟来学习下Vue的$nextTick的原理呗", "desc": "在深入$nextTick原理之前，我们需要先来简单了解下浏览器的事件循环机制。 我们都知道，JavaScript是单线程的，也就是说，JavaScript在执行代码的时候，只有一个主线程来处理所有的任务。 那么要怎么处理异步代码（如I/O操作）呢？那就是我们即将要说的事件循环机…"}, {"id": "6844903590524354574", "title": "VUE从零开始系列（安装脚手架），呆萌小白上手VUE", "desc": "前端是个大杂烩，各种技术、框架层出不穷，从pc端到移动端，从前端到后端，从web到桌面应用，乃至原生安卓及ios。 可以说js在手，天下我有（手动滑稽）。 说实话做了几年前端，在前一阵儿我还是觉得，管你什么框架，什么模块化的，老夫就用jquery，整那些花里胡哨的有啥用，我能实…"}, {"id": "6844903597252034567", "title": "又双叒叕一个Ant Design的Vue轮子(vue-antd-ui)", "desc": "周边生态，组件数量及质量都是略胜一筹，至于样式，每个人的审美不一样，就不加评判了，不过个人还是喜欢antd的。 github搜索关键词 vue ant 共93条结果，搜索vue ant-design也有51条结果。 希望让Vue开发者也能享受到Ant Design的优秀设计，技…"}, {"id": "6844904129337229325", "title": "vue项目实现用户登录 以及携带token", "desc": "调取登录接口（首先明确一下要做到事情）在前后端完全分离的情况下，Vue项目中实现token验证大致思路如下：第一次登录的时候，前端调后端的登陆接口，发送用户名和密码后端收到请求，验证用户名和密码，验证"}, {"id": "6844903806921080846", "title": "前端如何搭建一个成熟的脚手架", "desc": "有了之前的基础（前端如何搭建一个简单的脚手架），我们现在可以讲讲一个成熟的脚手架是怎么做了。 这里我们参考vue-cli的源码，基于rollup和typescript一步步搭建。vue-cli作为vue的脚手架，给如此多的前端开发者使用，已经算是成熟了吧。 现如今，webpac…"}, {"id": "6975485076918239239", "title": "Vue3展示Markdown内容", "desc": "起因 想要搭建一个个人网站，然后在网站上展示个人信息以及平时学习或者使用框架的一些内容。所以需要一个能够将markdown内容转化到页面上展示（就类似于github或者各大博客网站）。"}, {"id": "6990534958431338509", "title": "Vue深入学习—指令和生命周期", "desc": "1.Vue是怎么识别 v- 指令的？ 首先将HTML结构解析成属性列表，存入到数组中，接着遍历数组中的每一个节点，获取到不同指令对应的方法。 涉及到一个优先级的问题，v-for 比 v-if优先执行，"}, {"id": "6844903663400402957", "title": "Android webview 与 js(Vue) 交互", "desc": "js 与原生交互分为两种情况：js 调用原生方法，原生调用 js 方法。 本文将对这两种情况分别讲解，H5 端用 vue 实现。 本文的 H5 端用Vue 实现，所以在正式开始前先把 Vue 项目环境准备好。 10.0.0.188 是我本机的 ip 地址，每个人的不一样。 在电…"}, {"id": "6992558596403757064", "title": "Swiper 应用Vue遇到问题处理记录", "desc": "Swiper 应用Vue遇到问题处理记录 最近在学习vue，在开发一个需求中发现了一个问题，轮播图图片在语言切换后不更新，解决过程做个记录"}, {"id": "6992209509896683528", "title": "vue3.0中reactive的正确使用姿势", "desc": "“这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战” 场景 这种情况数据是不会跟新的 发生的现象 这样可以跟新 上面跟新遇见的问题 reactive 如何正确去跟新 reactive 正确使"}, {"id": "6847902220319457293", "title": "Vue.js基础知识点总结", "desc": "渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。 另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。 Mustache: {{}}语法, 可…"}, {"id": "6846687603106775053", "title": "Vue知识点整理=^•ω•^=", "desc": "MVC指的是Model-View-Controller，即模型-视图-控制器。 MVC中的Control在MVVM中演变成viewModel. 「由于在浏览器中操作DOM是很昂贵的。频繁的操作DOM，会产生一定的性能问题。这就是虚拟Dom的产生原因。」 Virtual DOM本…"}, {"id": "6844903575999479821", "title": "阅文前端技术选型", "desc": "本文为阅文体验设计 YUX 成员出品，请尊重原创，转载请联系阅文体验设计微信公众号 ( id: YUX_design ) 获取授权，并注明作者、出处和链接。 介绍阅文，了解阅文，包括团队，包括技术。 一、技术选型总策略「 企业收益最大化」 对于前端团队，可以实现企业收益最大化的…"}, {"id": "6885603327107661832", "title": "项目搭建之vite脚手架", "desc": "1. 初始化项目 2. 给 vscode 安装 eslint prettier stylelint 插件 3. 使用 eslint + babel 4. 使用 GUI 5. 使用 scss Vue CLI 项目附带对 PostCSS，CSS 模块和预处理器（包括 Sass，Le…"}, {"id": "6844903825371824142", "title": "keep-alive + vuex 让缓存的页面灵活起来", "desc": "在使用vue + vue-router开发SPA的时候，有没有遇到过这样的情况：当我们在列表页和详情页之间切换的时候，如果列表页不做缓存，会导致每次从详情页返回时，列表页都会重新加载。如下图： 细心的朋友已经发现了，当从详情页返回列表页的时候，列表页重载了，这样的体验显然不好，…"}, {"id": "6844904183619944462", "title": "从源码解惑，为什么v-if和v-for不应该一起用？", "desc": "这个操作看起来很简单，就是过滤要展示的列表，但是官方是不推荐这么写的，官方链接。 官方给出了两点原因： 哪怕我们只渲染出一小部分用户的元素，也得在每次重渲染的时候遍历整个列表，不论活跃用户是否发生了变化。 通过上文的描述，大概是懂了，嗯。。。但是看完还是不知所以然。 我们可以做…"}, {"id": "6971598335329173517", "title": "Vue实现过滤器（filter）及应用场景", "desc": "这是我参与更文挑战的第 3 天，活动详情查看：更文挑战 1. 简单介绍 Vue.js 允许你自定义过滤器(filter)，可被用于一些常见的文本格式化。 过滤器可以用在两个地方：双花括号插值和 v-b"}, {"id": "6844903622216548359", "title": "vue-cli@2.0 的简单分析", "desc": "相信很多vue新手，都像我一样，只是知道可以用vue-cli直接生成一个vue项目的架构，并不明白，他究竟是怎么运行的，现在我们一起来研究一下。。。 需要注意的是项目的名称不能大写，不然会报错。 Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里…"}, {"id": "6870480188086419470", "title": "【Vue进阶】手把手教你在 Vue 中使用 JSX", "desc": "这显然是吃力不讨好的，这个时候就派上 JSX 上场了。在 Vue 中使用 JSX，需要使用 Babel 插件，它可以让我们回到更接近于模板的语法上，接下来就让我们一起开始在 Vue 中写 JSX 吧 具名插槽：父组件的写法和单文件组件模板的类似，通过 slot=\"header\"…"}, {"id": "6935725534718459940", "title": "[译]5大原则写出优雅易维护的vue代码 | 技术点评", "desc": "在编码过程中，让编写的代码清晰易懂是一件重要的事情。清晰的代码就像一瓶好酒，没法立刻显示出优势，但是随着时间的推移仍能让读它的人觉得很好理解，这便是最大的优势。 而有些代码写的低内聚，逻辑混乱，就像意大利面条一样混乱。你在当时能够理清混乱的逻辑，但是等过3个月，5个月或者20个…"}, {"id": "7002787557549277191", "title": "手写简易版vue响应式", "desc": "根据vue的响应式实现原理： vue2中利用object.definePeoperty()实现变更检测，实现个手写简易版vue的响应式"}, {"id": "6844903893441183751", "title": "长列表优化之虚拟列表", "desc": "这几个月接了一个日志收集系统的活，因为这个系统是属于传承的项目，所以我也想在系统上做一些标志性的改动，作为接力棒传递下去。 这个日志系统从前端到服务端，都做了不小的改动，比如虚拟列表，electron热更新，sql优化，增加了用户的概念，也就是需要登录，把数据库升级为Elast…"}, {"id": "7003169884259647495", "title": "解决 vuejs 打包时缓存问题", "desc": "解决vuejs打包时出现缓存的问题 1, index.html 2, vue.config.js 以及打包出来的效果"}, {"id": "6844904119702929422", "title": "Vue实现Layui的集成", "desc": "layui官方提供了npm的安装方法，我司使用的是layui正版授权的layim，今天在折腾时发现，从npm仓库获取layui，里面自带了layim，大家可以去白嫖一波，不过大家需要注意版权问题(如下图所示,layui官网进行了声明)。 商用项目的话还是建议大家获取正版授权，毕…"}, {"id": "6844903505317068808", "title": "聊聊 Vue.js 组件间通信", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6996644517650808845", "title": "前端小白不迷路 - 今天来介绍下Vue3的响应式原理-proxy", "desc": "前两天我们讲的是vue2的响应式原理，今天，我们一起来学习vue3的响应式原理,proxy构造函数，不是劫持，意为代理，是ES6的语法，不是属性级别的，是代理整个对象"}, {"id": "6844903646556078093", "title": "Vue-cli原理分析", "desc": "在平时工作中会有遇到许多以相同模板定制的小程序，因此想自己建立一个生成模板的脚手架工具，以模板为基础构建对应的小程序，而平时的小程序都是用mpvue框架来写的，因此首先先参考一下Vue-cli的原理。知道原理之后，再定制自己的模板脚手架肯定是事半功倍的。 在说代码之前我们首先回…"}, {"id": "6928379876797841415", "title": "Vue3 + Vite + TypeScript 项目实战 -----（一）搭建项目", "desc": "Vue3新版出来了这么久，虽然之前也有联系过搭建，但是并没有测试过多的东西，趁着闲暇时间，打算从头采坑，记录自己的Vue3.0的爬坑历程搭建项目本次项目搭建采用尤雨溪大大开发的Vite，这是尤大最近开"}, {"id": "6983698994417369124", "title": "Vue中 引入使用 vue-json-views", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 项目开发过程中遇到展示 json 的场景，且 json 文件体积过大，小则几百kb。vue-json-views 即使"}, {"id": "6844903839657623566", "title": "vue-cli@3.0 使用及配置说明", "desc": "显然这样的配置我们目前不能修改，因为目前的配置文件只有vue.config.js，所以我们添加如下代码，进行公共环境变量的设置。 vue.config.js 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/…"}, {"id": "6942023400340586504", "title": "用Vue3造个轮子吧：拖拽缩放组件，支持吸附对齐，实时参考线", "desc": "可配合内置的DraggableContainer组件方便地实现参考线以及自动吸附功能。 该组件所支持的参数和事件加起来有几十种，可进行各种配置，具体可查看Github的详细文档。 下面我来介绍下使用方式。 执行use(Vue3DraggableResizable)后将会全局注册…"}, {"id": "6999229506217050142", "title": "细读Vue2.6.14 Core 源码(4): _init", "desc": "细读Vue2.6.14 Core 源码(4): _init initLifecycle, initEvents, initRender, cllHook."}, {"id": "6959750919491682318", "title": "脚手架系列-commander", "desc": "开始 最近看了vue/cli的源代码，学习到了许多相关的核心工具库，打算输出一系列的核心知识文章。 本篇为脚手架系列第一篇，后面不定期更新（手动狗头），先挖一个坑。"}, {"id": "6990552823985340447", "title": "手写一个简易cron表达式功能", "desc": "vue手写一个简易cron表达式功能，cron从左到右分别代表：{秒} {分} {小时} {日期} {月份} {星期} {年份(可为空)}"}, {"id": "6844903843088564238", "title": "Vue项目使用pdf.js", "desc": "吐槽一番，还是老老实实去实现功能吧，但是GitHub找了一圈vue项目的pdf轮子，基本都是大同小异，基本思想就是使用canvas把pdf内容绘制出来，但是这样最大的一个问题就是pdf的内容完全没办法复制了，第一个需求就不满足了，没办法只能扩大搜索范围，最终瞄准了pdf.js，…"}, {"id": "6959449865470345252", "title": "学完即用之Vue.extend+$mount改造dialog实践", "desc": "复杂内容的弹出层也能做到轻量级的优雅！ 当我们在单个页面中存在多个弹窗组件时，一般我们会对其进行封装处理，而此时页面会出现多个组件块，对于其组件命名、传参命名、事件命名等往往会显得冗长且让人头疼，"}, {"id": "6996589670654033934", "title": "实现简单版Vue", "desc": "本文目的是实现一个简易版本的Vue用以学习，也是对从网课学习的总结和复习。其中内容仅为简易实现，多有不足之处，请多多交流。"}, {"id": "6844903554205876231", "title": "可视化拖拽 UI 布局之拖拽篇", "desc": "当时开发参考过的小部分网站，其它参考过的大量网站由于电脑硬盘出现故障丢失了无法恢复。 以上网站这些不是很重要，真正重要有用的网站链接我已经帮你筛选整理出来了，并贴在下面的文章里面(分为演示与教程两类)，点击相关链接即可进入相关开发学习。 贴上面网站的原因是我想告诉大家，插件选型…"}, {"id": "6994822209172668424", "title": "Vue3 指令", "desc": "这是我参与8月更文挑战的第5天，活动详情查看： 8月更文挑战 在使用 <template> 时必不可少的就是用到形形色色的指令, 在Vue3中官方给我们提供了14个常规指令和3个特殊指令 使用频次最高"}, {"id": "6844904053638447117", "title": "深度解析：Vue3如何巧妙的实现强大的computed", "desc": "Vue 中的 computed 是一个非常强大的功能，在 computed 函数中访问到的值改变了后，computed 的值也会自动改变。 带你彻底搞懂 Vue3 的 Proxy 响应式原理！TypeScript 从零实现基于 Proxy 的响应式库。 如果对于 effect，…"}, {"id": "6997442468216061966", "title": "Github actions 重塑你的 Blog Workflows", "desc": "前言 之前自己的博客部署，多少有一些需要手动的操作，在持续更新和发布方面不是很友好。这里我们可以利用 github 提供的 Github Actions 来优化我们的项目部署。"}, {"id": "6844903705414746120", "title": "Vue 服务端渲染（SSR）、Nuxt.js - 从入门到实践", "desc": "10月初有幸接到公司官网改版需求，要求采用服务端渲染模式对原网站进行seo优化。 由于团队一直使用的vue技术栈，所以我第一时间想到的就是采用vue 服务端渲染（SSR）来实现该需求，即能减少团队其他成员后期维护的成本，又能把现有其他项目封装好的内容稍微改改就能直接copy过来…"}, {"id": "6963542300073033764", "title": "从 Event Loop 角度解读 Vue NextTick 源码", "desc": "在学习 vue 源码，nextTick 方法借助了浏览器的 event loop 事件循环做到了异步更新。"}, {"id": "7000650911332696072", "title": "vue3的构建项目", "desc": "一、初始化构建项目 创建一个项目 默认预设配置/用户自定义配置 自定义配置：选择需要的插件及编译工具 tips：上下操作+空格健可以选中 运行 编码风格 在项目根目录添加一个 .prettierrc."}, {"id": "6844903817746628615", "title": "[Vue] slot详解，slot、slot-scope和v-slot", "desc": "slot，也称插槽，可以类比为插卡式的FC游戏机，游戏机（子组件）暴露卡槽（插槽）让用户插入不同的游戏磁条（自定义内容），游戏机会读取并加载磁条里的游戏。 Vue的slot，是组件的一块HTML模版，这块模版由使用组件者即父组件提供。可以说是子组件暴露的一个让父组件传入自定义内…"}, {"id": "6844903650427404302", "title": "Vuex持久化插件-解决刷新数据消失的问题", "desc": "在mutations,定义的方法里对vuex的状态操作的同时对存储也做对应的操作。 最直观的就是，手动写比较麻烦。"}, {"id": "6844904080540712967", "title": "Vue 组件传参的八种方式总结", "desc": "第三种对象默认支持 4 种属性，并且都是非必填的。可以随意使用 在不定义 props 类型的情况下 props 接受到的均为 String。 $attrs 会获取到 props 中未定义的属性（class 和 style 属性除外）,支持响应式。常用的场景有俩种： 组件嵌套组件…"}, {"id": "6917222100184858637", "title": "vue3初体验---vue3新特性", "desc": "Vue.js 2.x 发展了很久，现在周边的生态设施都已经非常完善了，而且对于 Vue.js 用户而言，它几乎满足了我们日常开发的所有需求。你可能觉得 Vue.js 2.x 已经足够优秀，但是在 Vue.js 作者尤小右的眼中它还不够完美。 vue2.x对数组对象的深层监听无法…"}, {"id": "6844903900999319560", "title": "Vue 3.0 和 Vue 2.0的对比以及Vue 2.0精讲以及Vue全家桶精讲", "desc": "最近在整理Vue的一些内容,包括Vue 3.0新特性,Vue 2.0的一些特性以及实现方法,还有Vue全家桶的内容,涉及到的内容较多所以找个机会发篇文章,把要点全部讲出来.综合整理下这样看着也舒服,好了废话不多说开始开始. 简述：更完备、更精准、更高效，可以对响应式跟踪进行调试…"}, {"id": "6844903917126434829", "title": "vue移动端h5适配解决方案（rem or vw）", "desc": "1. 安装amfe-flexible和px2rem-loader 2. 配置amfe-flexible 3. 配置px2rem-loader 4. 展示效果 1. postcss-aspect-ratio-mini 有一点需要特别注意：aspect-ratio属性不能和其他属性…"}, {"id": "6901224360783446030", "title": "keep-alive如何保持组件状态", "desc": "有些业务场景需要根据不同的判断条件，动态地在多个组件之间切换。频繁的组件切换会导致组件反复渲染，如果组件包含有大量的逻辑和dom节点，极易造成性能问题。其次，切换后组件的状态也会完全丢失。keep-alive的设计初衷就是为了保持组件的状态，避免组件的重复渲染。 开发者无需注册…"}, {"id": "6995383179943100446", "title": "[Element Plus 源码解析] ColorPicker 颜色选择器", "desc": "一、组件介绍 官网链接：ColorPicker 颜色选择器 | Element (gitee.io)。 ColorPicker颜色选择器组件，用于颜色选择，支持多种颜色格式。 1.1 属性 model"}, {"id": "6995474182494486559", "title": " vue中修饰符.sync与v-model的区别", "desc": "vue中修饰符.sync与v-model的区别 sync的作用 实现父子组件之间的数据绑定 一个组件上可以有多个.sync修饰符 工作原理 v-model的工作原理 相同点：都是语法糖，都可以实现父子"}, {"id": "6922329257754492935", "title": "基于jsplumb+vue的流程图绘制", "desc": "话不多说，先上效果图： demo地址： https://code-roadfly.github.io/jsplumb-vue-wordFlow/#/ 现支持的功能：  节点的拖拽（1. 将左侧节点拖入"}, {"id": "6845166890575216648", "title": "通俗易懂的Vue响应式原理以及依赖收集", "desc": "最近在看一些底层方面的知识。所以想做个系列尝试去聊聊这些比较复杂又很重要的知识点。学习就好比是座大山，只有自己去登山，才能看到不一样的风景，体会更加深刻。今天我们就来聊聊Vue中比较重要的响应式原理以及依赖收集。 Object.defineProperty() 和 Proxy …"}, {"id": "6925261838745600014", "title": "Vue2.0源码分析：插槽&作用域插槽", "desc": "对于插槽的编译，我们只需要记住一句话：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。 注意：由于在Vue2.6+版本中，对于插槽相关的内容有所改动：它废弃了旧的用法，新增了v-slot指令。虽然依旧会在Vue2.0版本进行兼容，但在Vu…"}, {"id": "6976806923895046158", "title": "2x0 精读Vue官方文档 - 进入/离开 & 列表过渡", "desc": "概述 Vue 会基于元素的状态变更（增、删、改）来应用过渡效果。 Vue 内置的过渡系统既可以支持纯粹的CSS，JavaScript 实现过渡，也可以结合第三方 CSS动画库 (Animation.c"}, {"id": "7003532656012951583", "title": "在VUE中v-if 使用 filters 过滤符号报错的", "desc": "黎明即起，醒后勿粘恋。 vue中使用v-if 加 filters (过滤符 \\ 管道符)方法, 报错了 ! 报错了 ! 报错了 !!!"}, {"id": "6917175880154349575", "title": "Vue子组件处理父组件异步值传递给子组件处理【七日打卡】", "desc": "父组件通过Promise等其他异步方式获取异步数据，并传递给子组件，子组件直接显示没有问题，若对数据进行处理，则拿到的数据都是父组件初始值。 父组件通过Promise等其他异步方式获取异步数据，在尚未等到数据返回时，子组件 created已经执行完毕，故此时子组件中的数据为父组…"}, {"id": "6921708034654011400", "title": "Vue隐藏技能——运行时渲染", "desc": "前段时间接了一个需求：能不能让用户自制组件，从而达到定制渲染某个区域的目的。说实话接到这个需求心中一惊，感叹这个想法真是大胆呀，但作为打工人，秉承着只要思想不滑坡，办法总比困难多的打工魂，即使是刀山也得上呀，历经几日的摸索调研，发现其实VUE一早就支持了这么做，只不过时过境迁，…"}, {"id": "6883380750683471879", "title": "vue3.0 正式版体验", "desc": "Vue3 正式版本已经更新，再次入坑。 首先是向下兼容，Vue3 支持大多数 Vue2 的特性。 性能的提升，框架更快，更轻。 新推出的Composition API。 1. vue 实例的创建以及挂载变化 2. 生命周期变化 3. vue 组件/指令/插件注册 变化 4. C…"}, {"id": "6988464604309356552", "title": "头顶头，手把手实现 Vue3 使用 Monorepo 方式管理项目代码", "desc": "Monorepo 是什么？ Monorepo 是管理项目代码的一种方式，指在一个仓库中管理多个模块/包 优点： 一个仓库可以同时维护多个模块，不用拆分多个仓库 方便版本管理和依赖管理，模块之间互相引用"}, {"id": "6844903743062818830", "title": "教你一个vue小技巧，一般人我不说的", "desc": "1. 需求 最近的项目中，需要实现在vue框架中动态渲染带提示框的单选/多选文本框，具体的效果如下图所示，在输入框聚焦时，前端组件通过接收的kv参数渲染出选项，用户点击选项，可以将选择的选项的key拼装到输入框中，同时允许用户自由输入。 由于项目中使用的element-ui，首…"}, {"id": "6997363984030498846", "title": "从0搭建Vue2 UI组件库（三）", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 前面写了封装button组件和dialog组件，有需要的童鞋请冲从0搭建Vue2 UI组件库（一），从0搭建Vue2 UI组件库（二）这篇"}, {"id": "6992139291212120077", "title": "Instance Methods /Events", "desc": "当handle后面的括号去掉时，就会出现上面的情况。 如果方法中有参数，但是没有加括号，默认传原生事件对象 修饰符 阻止向上冒泡 点击button时，div也是那块区域，是向上冒泡了，一块都有反应； "}, {"id": "6992135112947138573", "title": "vue3导航条组件 ", "desc": "这是我参与8月更文挑战的第1天，活动详情查看： 8月更文挑战 八月更文第一弹，手写侧边导航条 导航跳代码 本文适用新手 在日常开发中，会有各种需要实现的东西，我在刚进入前端开发时遇到的第一个问题"}, {"id": "6979431294602067981", "title": "Vue3.0新特性", "desc": "本文主要讲解Vue3常用的新特性，详细可以查看Vue3.0官网教程 Vue3 比 Vue2 到底强在哪里？ Vue3 具有更明显的性能的提升（具体体现在：打包大小更小，初次渲染更快，更新更快，内存使用"}, {"id": "6977918942203346980", "title": "VUE - Vue-Router 原理实现", "desc": "VUE - Vue-Router 原理实现 main.js 问题：创建 Vue 实例时传入的 router 的作用是什么？ 答："}, {"id": "6993238668794150949", "title": "vue之001-基本工作上遇到的问题：监听页面是否在刷新操作", "desc": "前言:大家可能会遇到一个这样的问题，在监听页面中，是否有(如刷新，关闭等操作)，刚好遇到有此类项目上的问题!! 问题:遇到了一个场景，当在浏览器(pc)上面按f5之类刷新 页面时，如果底部的tarbb"}, {"id": "6844903624947023880", "title": "Vue-插件开发", "desc": "Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象: 注释：通过Vue.extend()方法创建了一个构造器NwdLoadingPlugin，其次我们再通过new NwdLoadingPlugin…"}, {"id": "6995098811391557645", "title": "自开发vue插件笔记 2》可编辑表格表单", "desc": "思路描述 创建一个动态的Component（输入框，日期选择，下拉框）列表，与table的列绑定（动态的Component见1） 声明一个EditRowModel与Component对应绑定当Comp"}, {"id": "6917899315939639304", "title": "更强大的 vue ssr 预取数据的方式", "desc": "vue-ssr-prefetcher 为 Vue 的 SSR 提供更直观更强大的数据预取方式（压缩后仅 1kb）。让我们来看看这张对比图： 在 Vue 的服务端渲染中做数据预取的方式大概可以总结为两种，一种是以 nuxt/ream 为代表的 asyncData 方案，另一种是 …"}, {"id": "6844903639207657480", "title": "vue-cli中的webpack4一步到位填坑记", "desc": "Webpack也在不断的优化迭代；截至目前，已经更新至 v4.16.0；在Webpack4这个版本，它在原有基础上，做了很多优化，也引入了颇多的新特性。在新的版本中，将获得更多模块类型及对.mjs的支持，更好的默认值、更为简洁的模式设置、更加智能的来分割Chunk，还新增的sp…"}, {"id": "6844903666420318216", "title": "Vue.js异步更新及nextTick", "desc": "前段时间在写项目时对nextTick的使用有一些疑惑。在查阅各种资料之后，在这里总结一下Vue.js异步更新的策略以及nextTick的用途和原理。如有总结错误的地方，欢迎指出！ 在点击click事件之后，number会被遍历增加10000次。在Vue.js响应式系统中，可以看…"}, {"id": "6844904056448614413", "title": "Vue实现剪切板图片压缩✍", "desc": "监听剪切板粘贴事件，读取剪切板中的图片文件，转成base64通过img标签显示出来，此时可能会存在剪切板中图片过大，产生上传速度慢问题，接下来就跟大家分享下如何将base64图片进行压缩。先跟大家展示下最终实现的效果："}, {"id": "6977619810997764126", "title": "分享Vue开发实用技巧 slots语法", "desc": "分享最近学习到的实用Vue开发技巧，简单高效的代码，让代码看起来更加优雅~ slots新语法 slots新语法向vue3.0看齐。 ❝使用带有“#”的新命名插槽缩写语法,在Vue 2.6.0+中可用👍"}, {"id": "6939694392203001864", "title": "叮，你的礼物已到账 | 项目复盘", "desc": "最近要实现一个大转盘效果，找了一下大部分是基于Canvas做的，不容易配置，可扩展性也比较弱，作为一个大(cai)佬(niao)当然不能接受这样的情况，于是在一个月黑风高的夜里，和漂亮姐姐深入交流后搞出了这个基于CSS的大转盘。 上图是用的Vue2，支持任意数量的奖品，这个效果…"}, {"id": "6898750262614163470", "title": "vue3源码分析", "desc": "mobx 谁都可以用，因为基于 observable 来实现的，并且 mobx 拥有自己数据流管理的功能，比如一个store，它可以自己管理自己的流程，比如 constructor中可以执行数据的一些基本化操作、when、autorun等钩子来监听数据，实际应用中，数据流完全可…"}, {"id": "6844903604902428679", "title": "从零开始徒手撸一个vue的toast弹窗组件", "desc": "0. 轻量 --一个组件小于 1Kib (实际打包完不到0.8k) 今天,我们就抱着上面2个需求点,来实现一个基于vue的toast弹窗组件,下图是最终完成的效果图. 一. 先写一个普通的vue组件 二. 在我们需要使用的页面引入组件,方便看效果和错误 三. 实现动态加载组件 …"}, {"id": "7002777596299591717", "title": "Vue.use(vuex)这个过程中vuex都做了什么？", "desc": "Vue.use(vuex)这个过程中vuex都做了什么？ 源码解读 再看install方法之前，我们需要先了解一下vuex.use方法都做了什么，源码位置位于Vue源码项目中的 src/global-"}, {"id": "6976210091527634958", "title": "Vue3 reactivity 模块源码解读", "desc": "从reactivity 模块认识Vue3响应式原理、熟悉ES6、Typescript语法，掌握Vue响应式API使用。"}, {"id": "6988728353318502414", "title": " 在Vue中解决样式冲突的几种方案", "desc": "哈喽，大家好，我是小朱，这篇文章我要分享的一个内容是《 在Vue中解决样式冲突的几种方案 》 提出问题 我们都知道Vue是组件式开发的框架，可以使我们开发效率更高，那么就会存在一个样式冲突的问题。 解"}, {"id": "6844903698154389517", "title": "JavaScript设计模式之观察者模式", "desc": "通常又被称为 发布-订阅者模式 或 消息机制，它定义了对象间的一种一对多的依赖关系，只要当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，解决了主体对象与观察者之间功能的耦合，即一个对象状态改变给其他对象通知的问题。 这样是不是清晰了很多~诸如此类的案例还有…"}, {"id": "6844904090657357837", "title": "深入浅出理解vm.$nextTick", "desc": "在我们开发项目的时候，总会碰到一些场景：当我们使用vue操作更新dom后，需要对新的dom做一些操作时，但是这个时候，我们往往会获取不到跟新后的DOM.因为这个时候，dom还没有重新渲染，所以我们就要使用vm.$nextTick方法。 nextTick接受一个回调函数作为参数，…"}, {"id": "6982816374292742158", "title": "vue中如何判断一个标签是否被点击了？（备忘）", "desc": "当需求需要你判断 一个标签是否被点击了再去执行其他方法时，可以用这个方法！！！同样也是给自己备忘！！！ 标签是否被点击了 ? 执行方法 : 执行另一种方法 1.在标签绑定ref属性 2. 可以打印出r"}, {"id": "6991788295365591047", "title": "Vuex数据持久化与Vant插件sass样式穿透", "desc": "一、Vuex数据持久化 Vuex 解决了多视图之间的数据共享问题。但是运用过程中又带来了一个新的问题是，Vuex 的状态存储并不能持久化。也就是说当你存储在 Vuex 中的 store 里的数据，只要"}, {"id": "6997393986067365919", "title": "Vue2 运行原理学习（一）初始化", "desc": "本系列主要跟大家分享学习下 vue2 的知识学习，面试目前还是 2.x 问题比较多，所以了解 vue 内部如何实现，对你回答问题会有很好的帮助"}, {"id": "6985874532376674334", "title": "vue 复用手写轮播图组件", "desc": "按照需求对应的封装轮播图组件 需求暂定为：宽高，背景颜色，是否自动轮播，轮播时间间隔 封装组件： 之后将组件定义传值即可使用，可以全局，也可局部定义，将这里将其定义到全局 在专门定义全局组件的js文件"}, {"id": "6992754702714667016", "title": "10x3 精读Vue官方文档 -  示例 - TODO MVC 代码分析", "desc": "精读 Vue 官方文档系列 🎉 个人认为一个 Todo 应用的核心在于数据的结构的定义： 然后围绕这个数据结构进行 增、删、改、存就可。 先看 存储，官方示例封装了一个简易的 todoStorage "}, {"id": "6919689156624924685", "title": "vue3+vite2.0+tsx/jsx项目搭建", "desc": "从去年三月份开始工作接触前端，入手vue与angular。到去年十月份开始研究学习uniapp框架并投入生产使用，用了将近一年多的uniapp来写微信小程序以及H5。鑫管家小程序正式上线之后，正值vite2.0发布，加上邱老师说他在研究vue3+vite的前端框架。 自己心痒痒…"}, {"id": "6844904012848840712", "title": "Vue面试题以及实际项目中遇到的坑", "desc": "之前有提到，在经历了前端转型之后，一场技术变革的到来，小程序，h5移动端，对性能优化的要求越来越高，受面向对象思想编程方式的影响，前端现在主流的技术框架就是Vue,React,Angular.他们的数据驱动模式，MVVM模式，很受欢迎，这种spa单页面应用，组件思维对一个庞大的…"}, {"id": "6844904036152377351", "title": "【vue系列】你不知道的 vue-devtools", "desc": "vue-devtools 使用了很长一段时间了，使用过程中发现 vue-devtools 下的 vuex 面板功能很厉害，整个页面的状态可以任意切换到之前的一个时间节点，当时只知道时光穿梭这个概念，没有仔细研究，最近决定入坑研究下。 记的之前有个Vue项目有线上bug，因为是线…"}, {"id": "6844903903058722830", "title": "Vue原理解析（四）：你知道被大家聊烂了的虚拟Dom是怎么生成的吗？", "desc": "在经过初始化阶段之后，即将开始组件的挂载，不过在挂载之前很有必要提一下虚拟Dom的概念。这个想必大家有所耳闻，我们知道vue@2.0开始引入了虚拟Dom，主要解决的问题是，大部分情况下可以降低使用JavaScript去操作跨线程的庞大Dom所需要的昂贵性能，让Dom操作的性能更…"}, {"id": "6992520138490806285", "title": "Vue头疼的事件(我喜欢原装)", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 事件源：发生事件源头称为事件源，一般指的是HTML标签 事件：发生特定动作，onclick单击事件....... 监听器：事件处理程序，事件"}, {"id": "6844903909127880711", "title": "【源码解析】vue-create-api作者黄轶", "desc": "在 README.md 中这样介绍的，一个能够让 Vue 组件通过 API 方式调用的插件。( vue-create-api 源码地址 ) 目前提供两种安装，通过 npm install vue-create-api, 或者引入js静态资源文件。 引入 vue-create-a…"}, {"id": "6844903529526591495", "title": "使用VUE分分钟写一个验证码输入组件", "desc": "使用li元素来模拟输入框的显示，没有别的目的，就只是为了语义化，当然你也可以使用其他任意一个元素来模拟，比如div。 使用label标签的好处在于它可以跟input的click事件关联上，一方面实现了语义化解决方案，另一方面也省去了我们通过js来唤起虚拟键盘。 将真实的输入框定…"}, {"id": "6844904038044008461", "title": "vue组件的生命周期钩子", "desc": "该阶段执行完了模板解析，以及挂载。同时组件根组件元素被赋给了 $el 属性，该阶段可以通过 DOM 操作来对组件内部元素进行处理了 当捕获一个来自子孙组件的错误时被调用，此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 fals…"}, {"id": "6844903537520951303", "title": "Lerna+webpack+juction来拆分组件库为多个单独的npm包", "desc": "总体的思路, 大致上和lerna-demo差不多, 区别在于会根据现有的目录结构做相应的定制, 所以接下来会简单讲思路, 和遇到的问题. 我是无语线.................................................................…"}, {"id": "6844903506370002958", "title": "[英] 如何使用 Vue.js 里的 Transition 和 Animation", "desc": "好用"}, {"id": "6911599063713218574", "title": "vue 百度地图api BMap is not defind  BMaplib is not defind 以及修改信息窗口样式 几个解决方案", "desc": "更换个性样式是v3版本的东西但是吧这个npm没有更新所以我一开始是在node_modules里面把map文件给改了2改成3就可以运行了但是吧我不能每次cnpmi--save都改一次吧不得已换成了异步方"}, {"id": "6844903711710380046", "title": "React Hooks (Proposal)", "desc": "在 React v16.7.0 alpha 版本里，提出了一个新的 Feature Proposal ：Hooks ，对社区以及以后前端发展所带来的影响是巨大的。 Hooks 是 React 内部组件中的一系列特殊函数，直观带来的改变是引入state、生命周期函数、或者其他 R…"}, {"id": "6928353780324909063", "title": "Vue 组件之间通讯的各种情况", "desc": "vue1.0中提供了这种方式，但vue2.0中没有，但很多开源软件都自己封装了这种方式，比如min ui、element ui和iview等。 比如如下代码，一般都作为一个mixins去使用, broadcast是向特定的父组件，触发事件，dispatch是向特定的子组件触发事…"}, {"id": "6844903824692346887", "title": "Vue源码探究-虚拟节点的实现", "desc": "页面初始化的所有状态都准备就绪之后，下一步就是要生成组件相应的虚拟节点—— VNode。初次进行组件初始化的时候，VNode 也会执行一次初始化并存储这时创建好的虚拟节点对象。在随后的生命周期中，组件内的数据发生变动时，会先生成新的 VNode 对象，然后再根据与之前存储的旧虚…"}, {"id": "6844904081195008008", "title": "菜鸟读element源码7", "desc": "不好意思经过了这么久时间才开始继续写文章，确实懒散了很久。废话不多说，开始本文吧。 本篇是在阅读v-loading时产生的部分感悟，因此独立出来作为一篇文章讲解一下。 本篇主要给大家介绍一下vue的自定义指令directive，以及我们如何通过directive将一个组件插入到…"}, {"id": "6844903874566832136", "title": "Vue 源码剖析 —— 变化侦测相关 API 实现原理", "desc": "用法：用于观察一个表达式或 computed 函数在 Vue.js 实例上的变化，同时给回调函数传入新数据和旧数据作为参数。 前面还提到，vm.$watch 函数最后返回的是一个 unwatch 函数，顾名思义，它的作用是取消观察函数。执行 unwatch 函数其实就是执行当前…"}, {"id": "6871440617591963662", "title": "从零开始学习Vue（五）", "desc": "Promise是异步编程的一种解决方案，能有效避免回调地狱。 Promise回调then或者catch方法时都会返回一个Promise对象，所以我们可以对其进行链式调用，通过Promise对新数据进行包装并返回。 Vuex是一个专为Vue.js应用程序开发的状态管理模式。 它采…"}, {"id": "6844903616197689352", "title": "一个同时支持移动端与小程序的聊天机器人", "desc": "echarts-for-weixin支持微信版本 >= 6.6.3，对应基础库版本 >= 1.9.91。 is a toolkit for automating painful or time-consuming tasks in your development workfl…"}, {"id": "6844904196173463560", "title": "2020 祝安，缝隙中寻找机遇：面试题第五波：综合", "desc": "小伙伴们。北京现在形势比较紧张啊。大家一定要注意防护⚠️ 多买点手套、消毒液、手套。 可以参考的我这篇文章。 可以参考我的这篇文章。JS 冒泡排序、快速排序、归并排序"}, {"id": "6844903574795714574", "title": "前端每周清单第 54 期: SwiftNIO, 自定义 vue-router, Web 缓存与 GraphQL 必知必会", "desc": "前端每周清单专注大前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 苹果开源了 Swift 版 Netty…"}, {"id": "6844903638725328910", "title": "那些年没错过的弯路，WEEX-EROS 开源一年记。", "desc": "准备好小瓜子，下面请欣赏， EROS 一年间走过的弯路。"}, {"id": "6863438100459651086", "title": "[翻译] vue3指南—02介绍", "desc": "Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is desi…"}, {"id": "6946016676110401543", "title": "面试问到SASS高级语法在项目中的应用该如何回答？仿element-ui的使用方式。", "desc": "sass基本语法想必大家都能掌握，但本身我们的项目复杂度不够高，小型公司又没有自己的前端规范，基本上想怎么写就怎么写。导致我们长时间做一些低级的 dirty work。那些高级语法更是从未用到。 本文主旨在于例举一些较为常用语法，以及本人在项目中的使用，意在与各位初级工程师互相…"}, {"id": "6919000893278928904", "title": "vue数据双向绑定理解（与MVVM理解）", "desc": "一、含义Vue是采用数据劫持结合发布/订阅模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。那"}, {"id": "6844903665292017672", "title": "React专题：可变状态", "desc": "React使用一个特殊的对象this.state来管理组件内部的状态。 然后开发者就可以通过描述状态来控制UI的表达。 一般我们会在constructor生命周期钩子初始化状态。 也可以直接用属性初始化器的写法，看起来更加简洁。 然后通过this.setState()来改变状态…"}, {"id": "6910489168817127432", "title": "实现一个简单的vue-响应式模拟(二)", "desc": "上一节讲了Vue响应式原理所相关的技术，这一节直接实现代码。目前我实现了v-text、v-html、v-model和v-on的指令，有兴趣的朋友可以自己进行优化调整。"}, {"id": "6844903696644440078", "title": "好嗨详细的vuex源码分析之API 是如何实现", "desc": "Vuex 常见的 API 如 dispatch、commit 、subscribe 我们前面已经介绍过了，这里就不再赘述了，下面介绍的一些 Store 的 API，虽然不常用，但是了解一下也不错。 watch 作用是响应式的监测一个 getter 方法的返回值，当值改变时调用回…"}, {"id": "6844904144264773639", "title": "基于vue和jsplumb的工作流编辑器开发", "desc": "需要实现一个工作流，支持拖拽节点生成工作流。 主要是利用css的 linear-gradient 和 background-size 实现的。 主要结合 css的 属性选择符 E[att=\"val\"] ,通过修改zoom的值，来实现缩放功能。 主要是依赖 jsplumb 实现的…"}, {"id": "6844903576007868429", "title": "用 vue 写小程序，基于 mpvue 框架重写 weui", "desc": "上周美团开源了 mpvue 框架，他基于Vue.js 的小程序开发框架，从底层支持 Vue.js 语法和构建工具体系。what，小程序可以用vue写了？简直有点不太敢确定，花了5分钟看了一下简介，没错，真的可以用vue开发小程序。真的是**限制了我的想象力，明白又该学写了，于是…"}, {"id": "6992853911493148702", "title": "封装Vue组件库的方法", "desc": "封装组件库让我们在之后的工作中可以复用现成的代码，同时保持了组件的稳定性。 本文简要概述了封装Vue组件库的2种方法：vue-cli、webpack"}, {"id": "6844904183150149639", "title": "五.记一次用webpack搭建vue项目", "desc": "1. 初体验 2. 配置 3. 我们生成了main.js之后,不可能每次都手动在index.html里面引入，所以我们需要这个插件来帮我们自动引入 4. 由于hash每次生成的不同，导致每次打包都会将新的main.js打包到dist文件夹，所以我们需要一个插件来打包前删除dis…"}, {"id": "6984433351432077325", "title": "Vue 封装DOM元素曝光和点击埋点上报的自定义指令", "desc": "在项目中，免不了要上报一些曝光和点击埋点，如果在每处需要上报埋点的时候都写一套上报逻辑，代码就会很冗余，如果是vue项目的话，就可以通过自定义指令，将埋点上报逻辑全部封装在自定义指令里面..."}, {"id": "6884875189130100744", "title": "在vue中使用FullCalendar（vue2.0的日历插件）", "desc": "强大轻巧：拥有100多种可自定义的设置。作为单独的模块构建，以减小文件大小。 这里要说一下，fullcalendar/vue 和 vue-fullcalendar 不是同一个东西，所以要注意安装的是前者还是后者。文中使用的是fullcalendar/vue 5.3.1，不同版本…"}, {"id": "6844903747479404557", "title": "vuepress爬坑之旅", "desc": "前些天我突然想搞个个人博客，自己搞网站觉得太麻烦，百度来百度去好像hexo很不错。可是不知道为啥，我搞了一个星期都没搞出来，不是这错就是那错。怎么分类，怎么管理标签又是一塌糊涂，文档写起来又很麻烦。然后我就放弃了。没过多久我就了解到还有一个东西叫vuepress。虽然现在马上要…"}, {"id": "6986518323366199303", "title": "基于vue和高德实现线条绘制和线条编辑以及道路搜索", "desc": "最近整理代码感觉这个功能挺有意思记录一下 就是能随便的在地图上绘制线条，选中后能随意删除 修改，也可以查询数据库后根据数据库的线条来编辑， 主要用到了高德提供的这些插件功能，后端是按照一条线一条线存的"}, {"id": "6844903593229680654", "title": "解密Vue SSR", "desc": "关于Vue SSR的第二篇文章，上一篇偏重于实战，这一篇侧重于原理，发布在团队知乎专栏中，喜欢的就请给个赞吧～"}, {"id": "6968977454924824613", "title": "vue3 效率提升主要表现在哪些方面？", "desc": "这是我参与更文挑战的第2天，活动详情查看： “更文挑战” 😛 vue3.0的各种表现还是非常棒的，相比vue2.0确实上了一个台阶，据说在客户端渲染效率比vue2提升了1.3~2倍，SSR渲染效率比v"}, {"id": "6908640084061323277", "title": "【Vue-Element-Admin 分析】- 02 网络请求的是怎么封装的？", "desc": "显然，这个问题的核心在于 axios 的封装和使用。 整体的思路是：创建实例 → 添加请求和响应拦截器 → 导出实例。 显然，请求拦截器的核心功能就是为请求加上 token 信息。 响应拦截器的主要功能则是做各种错误处理。"}, {"id": "6893303835251441677", "title": "VUE的“动态”案例", "desc": "实时告警功能：通过WebSocket协议，从服务器端中接收实时告警信息，在页面中将其的向下移动的同时立即消失。 弹出，展示一分钟后自动退出。实时告警信息弹窗依次增加，先弹出的弹窗向下移动，最新的弹窗在最上方。而且页面只展示最新的3个实时告警信息，其余 其中topCount是根据…"}, {"id": "6844904066301050894", "title": "关于addRoutes、axios动态添加路由", "desc": "在遇到的一些问题，我都在写在的代码注释中先看代码main.js登录先从登录开始就从登录看起vue-routervuexmain.vue后台总结先定义一份公共的路由表，里面仅有一些公共的路由，如logi"}, {"id": "6921340882113429518", "title": "基于Vue.js的Web视频播放器插件vue-vam-video@1.3.6 今日正式发布", "desc": "今日正式发布一款基于Vue.js的Web视频播放器插件。可配置，操作灵活。跟我一起来体验吧！ 基于vue3.0和vue-vam-video，我开发了一款在线视频播放器。 键入命令，即可安装。 | canplaythrough | 播放可以继续，不应中断。读取状态为3 |"}, {"id": "6844903711630688269", "title": "Vue SSR（Vue2 + Koa2 + Webpack4）配置指南", "desc": "正如Vue官方所说，SSR配置适合已经熟悉 Vue, webpack 和 Node.js 开发的开发者阅读。请先移步 ssr.vuejs.org 了解手工进行SSR配置的基本内容。 从头搭建一个服务端渲染的应用是相当复杂的。如果您有SSR需求，对Webpack及Koa不是很熟悉…"}, {"id": "6844903673043091469", "title": "iview在ie9及以上的兼容问题解决方案", "desc": "可是ie不是你不想兼容就不兼容啊。说多了都是泪。 使用iview已经有一年多的时间。总的来说，iview还是给我的工作带来了很大的方便。 主要的吐槽点就是文档写的不够清楚。 比如组件的按需引入，寥寥数语，看完按照文档引入了，结果控制台一直报错。 然后到隔壁element一看，原…"}, {"id": "6844903549323706381", "title": "简单的 Vue SSR Demo", "desc": "官方给的 Demo 有点复杂，对新手不太友好，我这儿写了一个更简单的。"}, {"id": "6987307331105062942", "title": "监听全局点击事件", "desc": "点击指定区域以外的地方触发关闭 方法一: document.addEventListener方法监听全局, 然后判断是否点击了指定区域 方法二: 在最外层绑定一个事件, 指定区域绑定 @click.s"}, {"id": "6879355716130308103", "title": "Vue3新增特性", "desc": "前置知识Vue2.xTypeScriptnpmVue3项目的搭建这里使用Vue-cli搭建项目首先全局安装vue-cli，版本需在4.5以上找到一个空目录下，打开终端执行vuecreatevue3-1"}, {"id": "6995826446497218574", "title": " 实现一个简洁版 Mini-Vue", "desc": "mini-vue 源码链接 Vue 三大核心系统 Vue源码包含三大核心： Compiler模块： 编译模板系统 Runtime模块： 也可以称为Renderer模块，真正渲染的模块 Reactivi"}, {"id": "6844904191375196168", "title": "【项目实战篇】Vue结合路由配置递归实现菜单栏", "desc": "在日常开发中，项目中的菜单栏都是已经实现好了的。如果需要添加新的菜单，只需要在路由配置中新增一条路由，就可以实现菜单的添加。 相信大家和我一样，有时候会跃跃欲试自己去实现一个菜单栏。那今天我就将自己实现的菜单栏的整个思路和代码分享给大家。 本次实现的这个菜单栏包含有一级菜单、二…"}, {"id": "6967588280070045733", "title": "Vite + Vue3开发一个自定义浏览器起始页网站", "desc": "一个基于Vite + Vue3 + Typesript开发的项目，个性化的浏览器导航首页面板，支持自定义添加组件，可编辑组件各种属性。响应式设计，可自定义随机壁纸背景图或"}, {"id": "6844903906967814151", "title": "浅析 NextTick", "desc": "来自 Vue 官网讲述： 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。"}, {"id": "6961658865876205576", "title": "lib-flexible与viewport--关于移动端适配方案的替换", "desc": "本文主要从flexible的源码开始解析，其实际场景的应用，为何目前不推荐继续使用flexible而推荐使用viewpoint，以及他们的区别。"}, {"id": "6972350540210503693", "title": "Vue3.0 reactive响应式原理简要解读", "desc": "在2019.10.5日尤大发布了Vue3.0预览版源码，其中的响应式机制也被ES6中的新语法重写了，本人整理出了Vue3.0 reactive响应式原理供大家参考。"}, {"id": "6907608357914607629", "title": "Vue弹出框的优雅实践", "desc": "页面引用弹出框组件是经常碰见的需求,如果强行将弹出框组件放入到页面中,虽然功能上奏效但没有实现组件与页面间的解耦,非常不利于后期的维护和功能的扩展.下面举个例子来说明一下这种做法的弊端. Modal是外部引入的弹出框组件,父组件通过is_open来控制弹出框的隐藏和显示.仔细分…"}, {"id": "6850037260855803911", "title": "你想要知道的Vue组件间数据传递的方式", "desc": "$attrs 会收集组件上绑定的属性，对应class和style不会处理。如果与props同用，props的优先级要高于attrs $listeners 会收集组件上绑定的方法。 可以通过传递实参的方式改变父组件的值 子组件中this.$listeners会收集绑定在组件上的方…"}, {"id": "6991340328078802958", "title": "vue实现双向事件绑定v-model的原理 ｜ 8月更文挑战", "desc": "与js或者jquery直接改变操作dom不同，vue使用v-model实现数据的双向绑定，它会根据控件类型自动选取正确的方法来更新元素。 v-model就是vue的双向绑定的指令，能将页面上控件输入的"}, {"id": "6955286476401836045", "title": "每天一道面试题 vue 初始化做了什么", "desc": "面试者众多 如何在其中脱颖而出 干掉一大批面试者 至少有在某个领域有深度 在这里和后面写的文章里给所有的求职者一份小白都能够看懂的 vue 技术栈源码剖析 不管是你在面试中还是在项目中都能够从容应对"}, {"id": "6967234534504923172", "title": "【Vue学习】关于transition过渡动画的收获", "desc": "这两天做了一个Vue页面需要自己写一个动画，但是项目中的动画都是直接在元素中使用封装好的动画class名。于是我就想为啥不用一下transtion呢？ 于是我就参考了两篇文章....."}, {"id": "6999598910180163592", "title": "Vue源码分析之extend实现", "desc": "分析Vue.extend实现，了解Sub构造函数是如何继承Vue来实现的。同时还对Sub构造函数做了缓存"}, {"id": "6992505038266433566", "title": "回首Vue3之指令篇（四）", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 这篇文章我们来讲一下key、ref以及v-for怎么去使用，使用它们的时候需要注意什么，以及它们配合使用的时候在Vue3与Vue2中的差异。"}, {"id": "6844903795260981262", "title": "vue-cli3 项目框架优化(OneLine周分享)", "desc": "项目是通过vue-cli3 来构建的, 项目随着需求的不断增加. 代码量也在随着增大. 项目的文件大小也随着增加. 但是这一情况就变得,异常棘手. 我们也需要找到解决办法, 来处理这件事情, 来提高项目的运行效率. 在考虑优化之前, 我们来看下在之前项目的结构中, 我们需要做什…"}, {"id": "6959747856370499620", "title": "Vue使用uuid-npm快速生成uuid，适用于多种场景", "desc": "UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，是一种软件建构的标准，亦为开放软件基金会组织在分布式计算环境领域的一部分。其目的，是让分布式系统中的所"}, {"id": "6844904169418014734", "title": "如何在10分钟之内完成一个业务页面 - Vue的封装艺术", "desc": "lzx告诉我们，每天少睡几个小时，你就有更多的时间去做运动。 对于程序员来说，每天少点时间写业务，就有更多时间去做(hua)优(hua)化(shui)。 我们今天讲的是Vue中如何更灵活的封装业务组件，使效率翻倍。因为Ctrl + c加Ctrl + v都不足以满足我们了，搬过来…"}, {"id": "6994419124025688078", "title": "Vue-长列表优化", "desc": "开头瞎扯淡   作为一个前端页面仔，经常会需要运用长列表去展示大量数据，虽然说已经用了分页展示，但是极端情况下页面足够多的时候数据就会特别多然后出现卡顿等性能问题。当然有的人觉得自己平时要处理的数据没"}, {"id": "6844904183011770375", "title": "潇潇洒洒写一个KeepAlive动态缓存组件", "desc": "你们好呀，我是wangly。一名不怎么摸鱼的前端小倒霉蛋。 这篇文章主要写了一下大部分Admin系统中常见的动态缓存组件，说通俗一点就是TagsBar组件。可以看下@panjiachen大佬Admin项目。集成在一完整项目中的组件或多或少会依赖一些其他的东西，这一次就开始从零实…"}, {"id": "6844903774570414087", "title": "值得一看，Vue 作者尤雨溪的回答【TypeScript 不适合在 vue 业务开发中使用吗？】", "desc": "尤大现身说法，讲解了当初 Vue 在2.0为什么会采用flow的各种历史原因和兼容考虑，而在3.0中又会如何与 TypeScript 结合。"}, {"id": "6861471544200462350", "title": "vue源码分析（一) -----双向数据绑定", "desc": "自己之前看过一些Vue2源码解析的文章，视频，博客等，之前面试也经常会被问到双向数据绑定甚至被要求手写代码（身为一个学习前端一年半的垃圾练习生，被问原理我可以跟你将博客上一些高大上的解释跟你吹上半天，但是你要我写，哼，那我只好理直气壮的告诉你：我不会！）。因此这次想要从一个简单…"}, {"id": "6972334587875688455", "title": "Vuex系列(二) -- 模块化的使用", "desc": "这是我参与更文挑战的第11天，活动详情查看： 更文挑战 前言 上一篇文章我们简单介绍了一下 Vuex 的简单使用，但随之也会产生一个问题。由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当"}, {"id": "6844903553631272967", "title": "基于create-react-app 和 koa2 快速搭建react同构渲染项目总结", "desc": "前段时间业余做了一个简单的古文网 ，但是项目是使用React SPA 渲染的，不利于SEO，便有了服务端渲染这个需求。后面就想写个demo把整个过程总结一下，同时也加深自己对其的理解，期间由于工作，过程是断断续续 。总之后来就有了这个项目吧。关于服务端渲染的优缺点，vue服务端…"}, {"id": "6916833911234363405", "title": "Vue2.0源码分析：指令Directive", "desc": "同组件一样，指令的注册方式有两种：全局注册和局部注册。 全局注册指令可以使用全局API方法：Vue.directive()来注册，注册完成以后所有的指令都在Vue.options['directives']选项中。 在以上代码中，我们全局注册了一个名为focus的指令，其作用是…"}, {"id": "6982850827861884958", "title": "【Vue2基础】ref的用法", "desc": "简介 ref，是一个组件（可以是原生组件或自定义组件）暴露给它所在环境的一个引用，定义ref时会设置一个数值，这个数值就是该组件在该环境内被引用时的id。 通过调用某个ref的数值，一个环境（例如：一"}, {"id": "6876807001532268552", "title": "VUE3学习日志，一、选型及初始项目搭建", "desc": "vue3发布有一段时间了，有心的同学该学起来了，技术红利就在眼前了呢~由于我也是在正式发布时才刚刚上手希望各位大神如果看出来有错误指出来，咱们共同进步学习项目git地址:https://github."}, {"id": "6913710656428457991", "title": "Vue3.0自定义组件|Vue3模态框V3Layer", "desc": "介绍如上图：支持拖拽、缩放、最大化，恢复窗口会位置记忆。V3Layer是之前vlayer的Vue3.0版本，功能及效果延续之前的，并且高度保持一致。引入组件v3layer继续支持标签式+函数式两种调用"}, {"id": "6973607325454041095", "title": "better-scroll滚动卡顿解决及防抖", "desc": "在使用better-scroll管理滚动时发现，页面滚动时会出现卡顿现象，通过事件总线EventBus解决了这个问题，然后又添加防抖解决频繁调用refresh的问题。"}, {"id": "6985353677519192078", "title": "Vue 2 基础", "desc": "这是看《[想入門，我陪你]Re Vue 重頭說起》视频教程和阅读 Vue 2 官方文档时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "6844903621155536909", "title": "<link>标签实现预加载功能", "desc": "vue-cli 3.0生成的工程里面，会使用这一特性，之前不懂，最近抽时间研究了下，感觉还是挺有用的，希望对大家有所帮助"}, {"id": "6923469286912557064", "title": "错误上报和应用性能监控平台 Sentry", "desc": "当我们开发的系统上线之后，需要对其运行状况进行监控。因为测试往往不可能覆盖所有可能出现的异常，用户也不一定会完全按照理想的方式去操作我们的系统，上游数据返回非预期可能也会导致触发一些异常。 对于后端应用，我们一般会通过日志的方式去发现和定位问题（比如 level 为 ERROR…"}, {"id": "6844904063969001480", "title": "vue-cli创建的项目中的gitHooks原理解析", "desc": "在使用vue create my-app创建项目的时候，Vue 会自动帮我们做好一些预配置，你可以不使用它，但是一旦需要的时候，突然发现，咦~原来它已经帮我做好准备工作了，只需要按自己的需求配置一下就可以了，就会觉得 vue-cli 很贴心啊，帮我们节省了很多时间。 在pack…"}, {"id": "6844903543569121293", "title": "基于vue、vuex、vue-router、echarts搭建的数据展示平台", "desc": "真的好久没有更新博客了，但是我最近并没有偷懒哦，一直在学习vue这个框架，并且用它做了一个小项目，现在就给大家分享一下我的这个还比较有意思的小项目咯，本项目是基于vue2.0开发的。 这是一个数据可视化相关的项目，作为一个学生班主任，需要对班上同学的各方面的情况都有所了解，于是…"}, {"id": "6844904109838090247", "title": "observer | 每天读一点Vue源码", "desc": "面试的时候经常被问一些Vue源码相关的问题，通常情况下， 我会在面试前恶补掘金上的面筋来对付面试，什么双向绑定的原理呀，什么虚拟dom树呀，实际上我压根儿就没仔细研究过，其一是自己真的比较菜，其二工作上也用不上，别自己给自己添堵。但后面想一下，很多事情，为之则易，不为则难，给自…"}, {"id": "6996108491500814366", "title": "vue高级特性", "desc": "1.自定义v-model   使用场景比如vue颜色选择 。 引用子组件时通过绑定v-model=\"xxx\"，xxx为父组件中data的属性；当修改子组件中输入框的内容时，父组件中的xxx属性值也会跟"}, {"id": "6844903925024292871", "title": "Vue 项目性能优化 — 实践指南", "desc": "Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM；但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，所以我们仍然需要去关注 Vue …"}, {"id": "6844903741812916232", "title": "vue性能优化小结", "desc": "一般来说，你不需要太关心vue的运行时性能，它在运行时非常快，但付出的代价是初始化时相对较慢。先看一下常见的vue写法：在html里放一个app组件，app组件里又引用了其他的子组件，形成一棵以app为根节点的组件树。 而正是这种做法引发了性能问题，要初始化一个父组件，必然需要…"}, {"id": "6844904191907872781", "title": "Vue组件通信的六种方式", "desc": "如上图所示，A/B，B/C，B/D 组件是父子关系，C/D 是兄弟关系。那如何根据不同的使用场景，选择不同的通信方式呢？所以前提就是我们要了解不同的通信方式的作用和区别。 一. props / $emit 这个是我们平时用得比较多的方式之一，父组件 A 通过 props 参数向…"}, {"id": "6953207517484679204", "title": "🌵Vue网络应用", "desc": "1. 网络应用 Vue结合网络数据开发应用 2. axios 功能强大的网络请求库 使用方法： 3.axios+vue axios如何结合vue开发网络应用 语法： 总结： axios回调函数中的th"}, {"id": "6874969544633352200", "title": "Vue3 文档阅读 —— Composition API", "desc": "Vue 3.0 终于发布了，具体更新内容详见 v3.0.0。官网地址 Vue，但内容还都是英文的，毕竟刚发布嘛，中文内容还没那么快。 索性不如自己阅读仓库文档，看看 Vue3 都给我们带来了哪些具体变化。 在阅读文档之前，你应该已经熟悉了这两个 Vue 基础 和创建组件内容。 …"}, {"id": "6942123929062342692", "title": "[性能优化]为了把首页加载速度从15秒降到2秒我都做了哪些事情?", "desc": "对于一个网站来说, 首页打开的速度一定程度上决定了用户的访问量和留存率,很显然,5G时代下的人们是缺乏耐心的,如果一个网页卡十几秒还没开, 估计会弃之,那么怎么才能提高这个速度, 以下提供了五种提升网站速度的方式. 网上有很多查看性能优化的工具, 最简洁实用的就是chrome里…"}, {"id": "6901945056211664910", "title": "Vue2.0源码分析：编译原理(上)", "desc": "由于掘金文章字数限制，不得不拆分上、下两篇文章。 在之前我们提到过，Vue根据不同的使用场景，提供了不同版本Vue.js打包文件，其中runtime + compiler版本允许我们撰写带template选项的组件，它能够对template进行编译。而runtime + onl…"}, {"id": "7006127408763895816", "title": "Vue - The Good Parts: 类型支持", "desc": "虽然大家说 Vue 2 对于 TypeScript 支持不够好，但是这里边 Vue 也依旧做了很多事情，一起来学习下 Vue 2 是怎么做类型支持的，对于我们自身而言，可以学到什么？"}, {"id": "7007597229686915108", "title": "Vue果果记账-全局数据管理之Vuex", "desc": "Vuex 是什么？ Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vu"}, {"id": "7003259108031725575", "title": "Vue2.0是如何做到从浏览器不可识别到可识别的呢？(compile阶段源码解析)", "desc": "Vue2.0是如何做到从浏览器不可识别到可识别的呢？(compile阶段源码解析) 前言 vue 的构建其实是分为了两种版本，即完整版本: runtime+compiler 和 运行时版本: runt"}, {"id": "6999886459343732772", "title": "【万字实战长文】手把手教你赋予Vuex 4.x 更好的 TypeScript体验", "desc": "更好地在 Vue 3.x 中结合类型系统使用 Vuex 4.0，贴合实际工作场景，讲解细致，有完整示例代码可拿来主义"}, {"id": "7007256343136452621", "title": "手写Vue2.0源码（一）响应式原理", "desc": "大家都知道 Vue 的一个核心特点是数据驱动， Vue 帮我们做到了数据变动自动更新视图的功能，本篇主要介绍响应式数据的原理"}, {"id": "7005351791671902244", "title": "从0到1实现一个预览 vue 文件 CLI 工具", "desc": "背景 最近想做个类似 vue-cli 中 vue serve 的功能，能够直接指定一个入口文件进行快速预览开发的需求。 简单来说，就是在命令行输入 vue serve MyComponent.vue "}, {"id": "6995356588458377253", "title": "vue转react（第一天 看看React的组件 ）", "desc": "“这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战” 我争取把每一步都可以写成可以实操的，希望跟着写写练练。 项目跑起来 首先安装脚手架并使用脚手架新建一个项目 使用vscode打开项目,"}, {"id": "7007061567820791822", "title": "vue2中v-if和v-for同时出现执行先后问题", "desc": "今天在网上无意间看到一个面试题目，在vue中，如果v-if和v-for同时出现在一个node节点中，会怎么渲染，哪个的优先级更高？ 查看template渲染模板，我们可以看到v-for和v-if同时存"}, {"id": "6901466994478940168", "title": "基于Vue的前端架构，我做了这15点", "desc": "本篇文章针对于 vue2，目前正在基于 vue3 做一个开源的脚手架，如果有感兴趣的同学，可以来这里贡献代码。 考虑到后续招人和现有人员的技术栈，选择 Vue 作为框架。 公司主要业务是 GIS 和 BIM，通常开发一些中大型的系统，所以 vue-router 和 vuex 都…"}, {"id": "6999932338566070308", "title": "面试官：Vue项目中有封装过axios吗？怎么封装的？", "desc": "什么是axios，vue项目中使用axios为什么需要封装，如何封装一个能提高效率及体验的axios-ajax？"}, {"id": "7007316757782200333", "title": "vue和vite中怎么批量导入图片", "desc": "vue和vite动态加载图片库 需求 vue里面要加载一些备选本地图片,但又不经常用的图片文件. 问题 比如大屏有很多静态素材,vue的打包机制是用到了才会打包,不预加载是不会打包的,这就导致图片打不"}, {"id": "6850037277675454478", "title": "史上最强vue总结---面试开发全靠它了", "desc": "运行速度更快:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。 总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。 对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，当在一个组件中修改data时，其他重用的组件中的…"}, {"id": "7001897686567747598", "title": "Vue3 + TS 最佳实践", "desc": "笔者有 3 年多 React + TS 的实践经验，深刻体会到 TS 对生产效率的提升作用。最近换了新团队，Vue3 + TS 的最佳实践是笔者最近研究的方向，现将阶段性成果总结成文，供大家参考。"}, {"id": "6983867993805553671", "title": "10张脑图带你快速入门Vue3 | 附高清原图", "desc": "最近重学Vue3，整理了10张脑图！一来可以快速入门，二来方便以后查看！建议收藏！！！！！！！！！！"}, {"id": "7004619706724253732", "title": "用这招监听 Vue 的插槽变化", "desc": "最近，每当组件的内容(插槽、子组件等)发生变化时，我需要更新它的状态。对于上下文，它是一个表单组件，用于跟踪其输入的有效性状态。 下面的代码片段是以Options API格式编写的，但除了指定的地方外"}, {"id": "7005510893349912590", "title": "聊聊vue3.0 在项目中使用的一些招式  - 外功篇（一）", "desc": "童鞋，我这有本秘籍，今天不聊内功（源码），只聊聊 `vue3.0` 的外功招式套路。如何在武林中独树一帜的。"}, {"id": "7007312476614164511", "title": "手写Vue2.0源码（三）更新渲染原理", "desc": "上篇文章介绍了Vue的初次渲染流程，本篇就记录、分析下更新渲染的流程，本篇更多说的是与其他类之前的协作、联动"}, {"id": "7005763642159284255", "title": "新来的前端小姐姐问：Vue路由history模式刷新页面出现404问题", "desc": "摘要：vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。"}, {"id": "6844904196626448391", "title": "实战技巧，Vue原来还可以这样写", "desc": "每天上班写着重复的代码，当一个cv仔，忙到八九点，工作效率低，感觉自己没有任何提升。如何能更快的完成手头的工作，提高自己的开发效率，在上一篇《绝对干货~！学会这些Vue小技巧，可以早点下班和女神约会了》，小编整理了一些Vue开发技巧，今天小编又整理了一些新的Vue使用技巧。你们…"}, {"id": "7002222940448260133", "title": "喜大普奔！DevUI 1000 star 啦～", "desc": "8月真的是DevUI的幸运月！ 8月3日 8月3日，我们向社区同步了Vue DevUI的最新进展： Vue DevUI 已经有10个组件成员啦～🥳😋 第二天，我们的官网访问量就达到历史最高的峰值：20"}, {"id": "6844904113902223373", "title": "nextTick的原理及运行机制", "desc": "JS执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个部分： 所有同步任务在主线程上执行，形成一个执行栈。 主线程之外，还存在一个“任务队列”。只要异步有了运行结果。就在\"任务队列\"中放置一个事件。 一旦\"执行栈\"中所有的同步任务执行完毕，系统就会读取“任务队列”，看…"}, {"id": "6844904015495446536", "title": "【Vue源码】mixin 源码解析", "desc": "今天开始探索mixin的源码，我们可以知道mixin是什么时候进行合并的以及对各个类型是如何进行合并的。 当目标 data 对象不包含当前属性时，调用 set 方法进行合并，后面讲 set。 当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为…"}, {"id": "6865848252823142414", "title": "从0开始搭建一个vue-cli项目以及初始化工程（献给渣们，大神绕路）", "desc": "刚巧遇到有需要重构的项目，又要重新copy一份vue项目来。由于之前没有记录重构过程，故又要重新折腾一翻。 于是想起汇总一篇博客，方便自己下次快速copy，也希望能帮助到圈子的朋友们。 该项目框架搭建过程，适合中小企业，门户，商城网站等。 再选择路由所需，可参考笔者截图所需。 …"}, {"id": "6844903603413483527", "title": "VeeValidate在vue项目里表单校验应用案例", "desc": "VeeValidate是Vue.js的验证库，它有很多验证规则，并支持自定义规则。它基于模板，因此它与HTML5验证API相似并且很熟悉。您可以验证HTML5输入以及自定义Vue组件。它也是以本地化为基础构建的，实际上我们有大约44种语言由精彩的社区成员支持和维护。 如果需要这…"}, {"id": "6844903871890849800", "title": "Vue踩坑之旅（三）—— 修改子组件样式", "desc": "在vue组件中为 <style> 标签开启 scoped 属性，这样样式只作用于这个组件，而不会污染其他组件。 在项目中，我们经常要引入外部的 UI 组件（如 elementUI、mint-ui），但是在父组件中添加 scoped 属性后，父组件的样式将不会渗透到子组件中，所以…"}, {"id": "6930898496984154125", "title": "当css flex 遇到 Vue指令", "desc": "flex弹性盒子是最流行的布局属性，可以帮助我们快速完成响应式页面。 在开发vue时，我们会应用大量flex样式，这就需要我们去维护好我们的css代码。 所以就不得不折返到css代码区添加flex样式。 这样会比较麻烦，尤其是代码很多时，需要在海量代码里全局搜索，而且会出现大量…"}, {"id": "6844903824709140488", "title": "Electron-vue开发实战7——命令行调用与系统级别右键菜单项的实现", "desc": "前段时间，我用electron-vue开发了一款跨平台（目前支持主流三大桌面操作系统）的免费开源的图床上传应用——PicGo，在开发过程中踩了不少的坑，不仅来自应用的业务逻辑本身，也来自electron本身。在开发这个应用过程中，我学了不少的东西。因为我也是从0开始学习elec…"}, {"id": "6940976224537690119", "title": "你绝对看的懂的Vue虚拟dom", "desc": "1. 什么是虚拟dom？ 虚拟dom本质上就是一个普通的js对象，用于描述视图的页面结构。 2. 为什么需要虚拟dom？ 在vue中，渲染视图会调用render函数，这种渲染不仅发生在组件创建时，同时发生在视图以来的数据更新时，如果在渲染时，直接使用真实的dom，由于真实的do…"}, {"id": "6844903923279462414", "title": "基于Vue的日程排班表 - common-schedule", "desc": "common-schedule基于Vue的日程排班表，根据不同的时间显示粒度设置granularity的值，支持年/月/日/小时安装npminstallcommon-schedule实用场景为车辆添加"}, {"id": "6844904176078553102", "title": "H5加载Android本地路径图片", "desc": "1. 布局 2. 定义变量 3. 读取图片 4. 扩展"}, {"id": "6932747710634131469", "title": "[spa应用预渲染] prerender-spa-plugin 踩坑记", "desc": "[^puppeteer]: Puppeteer 是 Google Chrome 出品的一个无头浏览器，提供高级 API，通过 DevTools Protocol 来控制 Chrome 或 Chromium。https://www.npmjs.com/package/puppet…"}, {"id": "6986935526888587271", "title": "缓存路由组件", "desc": "默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的 如果可以缓存路由组件对象, 可以提高用户体验 解决方式 给router-view添加key属性"}, {"id": "6844904045501480968", "title": "2020年关于 Vue 3 你需要知道的事", "desc": "现在 VueJS 是最热的框架之一，它在2019的周下载量翻了一倍。 2020年Vue3发布时，它将更加流行。 现在Vue团队的重点在使它能够适合所有开发者，新版本将更强大、更有效率。同时有很多的内部优化将让我们用的更爽。 Vue3也给开发者更多的控制方法（如果你想要），它让我…"}, {"id": "6844903689447014414", "title": "马什么梅？I什么N？浅谈 web 前端开发中的国际化", "desc": "I. 国际化、本地化、全球化 很多开发者会有这样的经历，在若干年之前，一些企业、机构、学校的官方网站会要求：“翻译一下，也做个英文版的”，结果往往就是又单独维护一套英文版的页面。 而在当今的软件开发领域，随着越来越多的产品需要真正面向海外市场售卖的情况，以前那种简单粗暴的做法就…"}, {"id": "6930896449878097927", "title": "Vue-Class-Component中文文档", "desc": "Vue类组件是一个库，它允许您以类样式的语法创建Vue组件。例如，下面是一个用Vue类组件编写的简单计数器组件: 如示例所示，通过使用@Component装饰器对类进行注解，可以用直观和标准的类语法定义组件数据和方法。您可以简单地用类样式的组件替换组件定义，因为它等价于组件定义…"}, {"id": "6875972229440471048", "title": "Vue-ast|实现篇第一版|实现render函数", "desc": "前言文分【思路篇】和【实现篇】，本文为实现篇第一版，文末有第二版链接，建议看两个窗口同步阅读，或请先阅读-》Vue|思路篇|实现ast实现template写法兼容初始化时判断有无el属性，有则执行$m"}, {"id": "6844903959145152525", "title": "vue.js快速上手开发知识梳理（基础篇）", "desc": "Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。 Vue 只关注视图层， 采用自底向上增量开发的设计。 Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。 components：vue element、ivie…"}, {"id": "6972824984502665224", "title": "Vue生成动态表单配置我是这样处理的", "desc": "前言 我司最近在搭建一款后台管理系统，使用的是Vue全家桶配合Element-ui，遇到一个问题，需要处理很多的表单，所以想到的解决方案是通过后台配置生成动态表单，这对于我来说也算是新的挑战，涉及的功"}, {"id": "6985822204420325389", "title": "vue-quill-editor富文本编辑器视频上传iframe转video", "desc": "对vue-quill-editor部分源码重写 选择完视频......................................."}, {"id": "6844903613211344904", "title": "[译] 怎样更好地使用 Vue：我在新工作中遇到的一些问题清单", "desc": "下面列举一些人的做法。 不久之前，我找到了新工作。而且当我第一次看到代码库的时候，这真是吓坏我了。因此我想在这里展示一些你应该避免在 Vue.js 应用程序中出现的代码。 我们没有理由将静态属性传递给 data，特别是 computed。当你这样做时，Vue 将其声明为响应式属…"}, {"id": "6921581792507985927", "title": "vue3中的watch和watchEffect的使用和差异性", "desc": "1.立即执行，没有惰性，页面的首次加载就会执行。"}, {"id": "6844903514003488776", "title": "vue-cli 实战总结", "desc": "如果在created阶段的发送ajax请求，此时页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，请求建议放在mounted阶段，当然mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染 完毕再发生请求，可以用 vm.$nextTick。 …"}, {"id": "6844904015109554189", "title": "vue 版的老虎机抽奖活动效果折腾小记", "desc": "最近公司有一个活动，让做一个老虎机抽奖活动，对于之前没有做过的我来说还是有些吃力的，于是就开始各种网上找插件，发现大部分都是jquery的，要不就是好多一部分的，一个完整的流程都走不下来，更有甚者让花钱买他的代码，我就想说大家都是分享，互相交流，你们怎么就那么自私，所以今天把我…"}, {"id": "6844903986181439496", "title": "Vue.js的实时聊天应用+netlify自动部署", "desc": "简介项目是跟着sitepoint开发的一个Vue.js的实时聊天应用，核心chatkit，使用netlify进行自动部署.源码vuechat,可在pigchat体验，账号test,test2技术栈Vu"}, {"id": "6985818009432506404", "title": "Vue+Spring Boot前后端分离开发---图书管理系统", "desc": "一、效果展示 主界面： 添加图书： 修改界面： 二、前端实现 1、Vue.cli建立项目 命令行输入vue ui（vue版本在3.0以上的UI界面） 手动创建项目选择以下要用配置： 等待项目创建完成，"}, {"id": "6844904178326700045", "title": "前端预渲染踩坑记录", "desc": "开发一个官网项目，由于使用传统的多页面开发模式，不利于做优化。 这个的解决办法，google一搜也有很多的解决办法，比较好的办法就是使用代理，将cdn地址代理到本地。 我看了几篇文章，都是重新用node起一个代理服务，其实 prerender-spa-plugin 本身就可以设…"}, {"id": "6875640487580008462", "title": "又一篇介绍vue3.0组合式api的文章", "desc": "9月19号，万众期待的vue3.0如期而至，事实上很多人很早就已经体验过了，但是本人比较懒，再加上没有正式发布也不能在项目上使用，所以一直没去尝试，只在一些零星的文章上看到了它大概会有一些什么新功能，现在它的正式发布意味着已经推荐在新项目上使用它了，毕竟相对于2.0，它的优点还…"}, {"id": "6872671443201720328", "title": "尝鲜vue3.0- 看完就开干（4）", "desc": "距离正式开发还需要介绍一下路由变化，这样就算对vue3.0开发的以有了初步了解，以及完成项目的基础建设。 默认是'click',声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。也被删除，用作用域插槽代替。 安装了解完路由的相关变动，直接可以开干了。整个过程…"}, {"id": "6844903704361975815", "title": "不会发布node包？进来看看", "desc": "npm(Node Package Manager)，一个Node的包管理器，平时我们常用的公共模块（插件）或者叫做包大多都放在上面，所以接下来要封装的插件，我们就简单称它为npm包，本文从就从这个简单的例子开始，逐步对它进行封装-发布-更新-扩展-使用，进而到得一个相对完整的n…"}, {"id": "6992867650854469662", "title": "Vue项目中封装Echarts", "desc": "安装echarts依赖 首先需要全局引入 在main.js中 将Echarts封装好 Echarts.vue文件封装好组件 使用封装好的组件 index.vue 后面就看自己工作需求进行细微的修改就好"}, {"id": "6923351431617445902", "title": "Vue3.0 体验(API 及 TodoList Demo)", "desc": "记得有段时间特别想在Vue中玩TypeScript，但是 Vue2.x对 TypeScript 的支持并不是特别好，一种比较好的实现方式是通过 Vue Class Component 库去实现，主要是通过装饰器来对组件的行为进行修改，通过写Class组件的方式去写组件，从而加上…"}, {"id": "6909723449246089224", "title": "【electron+vue3+ts实战便笺exe】一、搭建框架配置", "desc": "诈尸更新系列，为了跟上脚步，尝试了vue3，在学习vue3的时候顺便学习一手electron和ts，本教程将分别发布，源码会在最后的文章发布。因为还在开发中，目前也是为了防止有些遇到坑不会及时忘掉，所以先整理一部分出来 打开动效，有一个放大、透明度的过渡，放不了动图这里暂时不演…"}, {"id": "6996941237412429861", "title": "后台所传数据生成，动态路由", "desc": "一.先设置生成路由的格式 假设业务路由放在 @/view/，路由文件结构模式如图（其中menuManage与userManage为业务路由）： 二. 在store的perims.js中获取后台数据并生"}, {"id": "6844903825610932238", "title": "[译] 2019 前端工具调研", "desc": "和往年一样，本年度调研的目的也很简单。是为了了解整个行业中，常见前端工具现有的知识和使用水平。 我非常感谢你能抽出时间来参与。每一份回答都能为前端社区提供一份更有代表性的样本。 去年，5461 名前端研发花时间回答了 24 个关于不同前端工具的问题。 受访者回答了三个关于 Ja…"}, {"id": "6844903799077732360", "title": "深入剖析Vue源码 - 选项合并(上)", "desc": "Vue的使用按照官方的说法支持CDN和NPM两种方式，CDN的方式是以script的方式将打包好的vue.js引入页面脚本中，而NPM的方式是和诸如 webpack 或 Browserify 模块打包器配置使用，以npm install vue的方式引入，这也是我们开发应用的主…"}, {"id": "6981703487839010846", "title": " (Vue3) compositonApi  简单聊系列", "desc": "全局混入 mixin 全局混入将会影响每一个组件 多个组件之间依赖一个相同的方法 如下： setup setup里面没有绑定this 如果在 CompositionApi（setup） 内定义的属性与"}, {"id": "6943571484409331719", "title": "Vue调试技巧：在Devtool中一键打开组件源码", "desc": "在开发时，定位一个页面/组件的源码文件的常见方式有在代码库中搜索页面关键字、Devtool中的组件名、DOM节点的class等，这些方式的效率都不算高。 Vue Devtools在4.0版本之后提供了一个十分实用的功能：一键在编辑器中打开组件的源码文件。 1. 安装launch…"}, {"id": "6917172707687825416", "title": "七日打卡-Vue自定义组件", "desc": "做前端项目开发，自定义组件是必不可少的一项基本技能，前端应用框架（像Vue、React、Angular）都提供一些已封装好、可复用的组件。但在实际项目开发过程中，根据具体的项目开发特点，肯定会遇到一些定制化的开发需求，此时，框架提供的通用组件就不再满足我们的需求了，就需要自己完…"}, {"id": "6844903602889179144", "title": "vue+koa2即时聊天，实时推送比特币价格，爬取电影网站", "desc": "技术栈vue+vuex+vue-router+socket.io+koa2+mongodb+pm2自动化部署+图灵机器人+[npmscript打包，cdn同步，服务器上传一个命令全搞定]功能清单登陆注"}, {"id": "6844903923732447245", "title": "打造vuecli3+element后台管理系统（四）讲讲让本秃头星人头大的动态菜单、页面权限和角色赋权在后台系统中的实现", "desc": "权限模块可以说是后台系统的重中之重，它可简单，可复杂，具体看产品大大如何定义。 平时后台兄弟的接口返回的数据体结构，都是他说了算，他怎么给滴，咱就怎么渲染。但是其实这样是很被动的，为了提高我们的开发效率，我们要把精力更多的放在页面上而不是把精力放在绞尽脑汁想怎么把后台给的数据遍…"}, {"id": "6930792459567890446", "title": "Vite 2.0 发布了！", "desc": "Vite（法语意思是 “快”，发音为 /vit/，类似 veet）是一种全新的前端构建工具。你可以把它理解为一个开箱即用的开发服务器 + 打包工具的组合，但是更轻更快。Vite 利用浏览器原生的 ES 模块支持和用编译到原生的语言开发的工具（如 esbuild）来提供一个快速且…"}, {"id": "7002510447932866568", "title": "了解Vue风格指南 | 良好的编程风格，往往事半功倍", "desc": "以图的形式汇总Vue相关的知识点，一来可以快速了解相关知识，二来方便以后查看！此部分关于Vue的代码风格推荐，快来看看吧~"}, {"id": "7004081972196671524", "title": "Vue从入门到精通", "desc": "第一部分 Vue知识框架 0.邂逅Vue Vue读音类似于view Vue的渐进式 Vue特点 1.如何安装 方式一 直接CDN引入 方式二 下载和引入 NPM 安装 2.HelloWorld 编程范"}, {"id": "7001945222145900558", "title": "实战：使用 Lumen 和 Vue 构建个人清单应用（四）开发清单模块接口", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 编辑用户信息 功能不复杂，我们只做昵称和性别的编辑，所以前端传入的参数只有nick_name和sex两个，直接更新用户的这两个字段即可。 "}, {"id": "6995777059725246472", "title": "Vue3.2发布了，我激动了，实在学不动了！", "desc": "？？VUE3.2 发布了 ？？   前两天一早收到尤大微博推送，Vue 3.2 发布了！好家伙，上个版本还没玩儿透，这新版本就来了。评论区也是一片哀嚎 \\ 但也正如评论区所言，很难不支持。"}, {"id": "6952671223989927943", "title": "一文带你掌握Vue3新特性，再也不怕面试官啦~", "desc": "给各位小伙伴们分享一些常用的Vue3新特性、新增了哪些方法、哪些方法更改写法、废弃了哪些方法等，一文带你搞懂"}, {"id": "7007060917875638303", "title": "响应式原理（Vue2.x）下篇", "desc": "这两天面试，或多或少都问些Vue响应式原理，问的我头皮发麻。虽然照着网上的文章我手写过，懂和能回答还是两回事。毕竟 纸上得来终觉浅，绝知此事要躬行。这一次吃透 vue2.x 响应式"}, {"id": "7003161998087176200", "title": "用JS简单实现Vue的双向绑定", "desc": "Vue实现数据双向绑定原理： 采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的setter，getter，在数据变动时发布消"}, {"id": "6961566848139657223", "title": "面试又造火箭了！我该怎么办？实用套路来了！", "desc": "小伙伴们是否在面试中因为造火箭的问题而苦恼？ 我不想抱怨什么，因为我就是那种让面试者造火箭的面试官：）"}, {"id": "7004710821318115336", "title": "从0开始搭建一个可用的vue3-webpack5-template（一）", "desc": "最近对知识点查漏补缺，发现对工程化这一块掌握的不太好，之前的项目又都是基于vue-cli搭建的，所以打算用webpack5手动搭建一套vue3的开发环境。"}, {"id": "6998040668568289311", "title": "vue两种方式实现：用户长时间不操作退出到登录页", "desc": "问题描述 产品说，出于安全考虑，用户长时间不操作，就回到登录页面，让用户重新登录，就像银行的app一样。本文就记录一下实现这种效果的两种方式，分别是前端控制和后端控制，各有细节及适用使用场景 前端控制"}, {"id": "7002537296075423752", "title": "前端项目自动化一键部署，教你一键下班", "desc": "前言 程序员忙碌了两个星期结束了开发任务，开始测试环节，准备上线。测试中我们要修改bug修改后需要部署，如果每次修改完成以后需要登录服务器或者手动部署一次会很麻烦。今天介绍一键部署。"}, {"id": "7003120831966478350", "title": "一份不错的前端国际化方案指南", "desc": "每个开发者能希望编写的程序可以让全世界的用户使用，它要求从产品中抽离所有地域语言，国家/地区和文化相关的元素。"}, {"id": "7006640791539941407", "title": "手把手Vue3项目（一）——安装配置 Vite + Vue3 + TypeScript + Ant-design-vue 项目", "desc": "vite搭建vue项目 具体步骤请参考，前面的文章——使用vite从开始搭建vue项目 安装配置 ant- design-vue 2.2.6"}, {"id": "6997579802215448606", "title": "Vue 虚拟 DOM 搞不懂？这篇文章帮你彻底搞定虚拟 DOM", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 模板转换成视图的过程 Vue.js通过编译将template 模板转换成渲染函数"}, {"id": "6996217326378942472", "title": "Vue DevUI 又新添了11位新成员啦～🥳😋", "desc": "月初我们在掘金同步了 Vue DevUI 的最新进展：Vue DevUI 已经有10个组件成员啦～🥳😋 很快就有超多掘金的小伙伴对 Vue DevUI 开源项目感兴趣： 3天之内就有超过100+社区的"}, {"id": "7001794654068801544", "title": "聊一聊Vue中的插槽", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 一、什么是Vue插槽 插槽是Vue中一个非常强大的功能，但是之前学的时候理解的不是很清楚，然后边学边忘。这篇博客主要是梳理学习插槽的内容。 "}, {"id": "7004387911202242568", "title": "【Vue2 VS Vue3 】- 浅析", "desc": "目录 Vue2的局限性 一、Vue2的局限性 组件逻辑膨胀导致的可读性变差 无法跨组件重用代码 Vue2对TS的支持有限 在传统的OptionsAPI中我们需要将逻辑分散到以下六个部分 这样会是我们编"}, {"id": "7006931967644008484", "title": "Vue2源码，生命周期的合并策略", "desc": "在刷源码的时候，看到了这个函数mergeHook，特别是里面，三元运算符的层层嵌套 下面分析一波 我一般是先分析最外层"}, {"id": "7007068321518452773", "title": "Vue3-笔记-我对watch侦听器的理解", "desc": "侦听器是干嘛用的？ 理论知识讲：当被侦听的信息发生变化时，触发侦听器的回调函数，从而在侦听器的回调函数中执行一些后续的操作。 典型的场景： 当路由参数发生变化后，重新调用接口获取组件的数据 这个操作计"}, {"id": "6844904045694418951", "title": "VUE源码系列二：Vue响应式原理解析（附超详细源码注释和原理解析）", "desc": "一旦对象有了getter和setter,那么我们就会把它叫做响应式对象。 我们可以看出，initProps和initData都是对props和data绑定到this上，对props进行响应式绑定，并监听data。接下来看一下proxy和observe 在组件初始化渲染的时候我们…"}, {"id": "6904624856214536200", "title": "vue中使用window.print()实现局部打印功能", "desc": "前一段时间需要使用vue实现一个页面的打印功能vue-print-nb是很好用但是由于他不兼容IE浏览器，而我恰好要用到IE所以就放弃了他window.print()这个方法是打印当前页面的所有信息，"}, {"id": "6909281009888395278", "title": "uni-app开发微信小程序引入vantWeapp库", "desc": "为什么使用nui-app开发微信小程序呢?一次开发,多端发布防止源码反编译,增加安全性提供插件市场,ui库,丰富的周边生态确实是优点多多,所以打算用uni-app开发一款微信小程序,奈何首席ui设计师"}, {"id": "6844904198698434573", "title": "浅析Vue批量更新原理", "desc": "答案是一次。 那么为什么会是一次呢？本文会围绕着这个问题的解释来粗浅地讨论一下Vue中批量更新的原理。 首先要知道，msg这个key，是通过Object.defineProperty被监听了的，Vue通过这个api实现在key被set的时候（也就是this.msg = xxx这…"}, {"id": "6909067214989557767", "title": "移动端滚动加载更多", "desc": "之前在移动端需求的时候，有个功能点就是关于滚动加载，滚动到底部以后，自动执行下次请求。本来想着使用公司内部基础组件的，但是发现基础组件没有（内部一般禁止引入一些大公司的组件，风险问题）。 看了其他开源的单组件，写的都挺好的，但是整体代码量较多，内心是存在排斥心理的，所以... …"}, {"id": "6901284877547765773", "title": "Vue组件", "desc": "现在的网站在公司业务发展的过程中体积越来越庞大，其中堆叠了大量的业务逻辑代码，不同业务模块的代码相互调用，相互嵌套，代码之间的耦合性越来越高，调用逻辑会越来越混乱。 当某个功能需要升级的时候，往往牵一发而动全身，不管是在 DOM 上面，还是 js逻辑 层面，都会让我们需要大量的…"}, {"id": "6879300070962003982", "title": "Vue 的 MVVM 思想(包含三个常见面试题)", "desc": "1. 正确理解： MVVM -Model View ViewModel，最核心的就是 ViewModel 。ViewModel 包含 DOM Listeners 和 Data Bindings。 Data Bindings 用于将数据绑定到 View 上显示，DOM Liste…"}, {"id": "6844904083334103054", "title": "基于travis-ci实现vuepress自动部署", "desc": "如果你想在一个现有项目中使用 VuePress，同时想要在该项目中管理文档，则应该将 VuePress 安装为本地依赖。 在 docs/.vuepress/config.js 中设置正确的 base。 如果你打算发布到 https://<USERNAME>.github.io/…"}, {"id": "6989920798504910878", "title": "使用Proxy手写一个简单的Vue", "desc": "根据自己理解和网上资料实现的一个Vue，有方法绑定，数据绑定等功能，数据改变时实现页面的局部改变，而不是上一版的全部改变。"}, {"id": "6844904097510850573", "title": "docker搭建jenkins拉取svn代码打包vue项目部署到nginx", "desc": "打开搜索引擎输入『Copy攻城狮』，发现最新的一条记录已经是去年的4月，意味着我又有一年时间没有再总结成长了。习惯了“温水煮青蛙”的日子，无论是经验水平还是薪资收入，已经被同期的小伙伴远远地甩在了后头。开年至今，一直在家“云办公”的我，被各种打包发布需求困扰。由于种种原因，小作…"}, {"id": "6844903919714304008", "title": "打造vuecli3+element后台管理系统（三）优化路由和vuex仓库，给router和store分模块", "desc": "定义常规路由，即那些不需要权限就可访问的页面，比如说登录注册、后台主页、404页面等。 该文件声明了vuex实例，同时批量引入modules下的store文件，也声明了vuex-persistedstate插件实例。"}, {"id": "6844904029315678221", "title": "从一次 vue ssr 渲染客户端报错, 来看 ssr 客户端激活过程", "desc": "vue 判断 vnode 的 class, 然后去和 dom 的 class 对比, 如果不一致就去更新. 但是由于 app.js 中的 v-if 在服务端和客户端结果不一致, 服务端时为 false, 渲染出了 comment(注释), 而客户端时为 true, 渲染出了 d…"}, {"id": "6979406652059418660", "title": "0x4 精读Vue官方文档 - Class 与 Style 绑定", "desc": "精读 Vue 官方文档系列 🎉 介绍 v-bind 指令可以将样式数据绑定到 class 与 style 属性上，因为它们与普通的 HTML-Attribute 没有本质区别。 v-bind 指令专门"}, {"id": "6844903928585256968", "title": "vue中使用G2问题汇总", "desc": "忙活完动态表单,动态附件,动态表格等等事情后,最近公司又在进军报表可视化问题了,对于我们前端而言如何将一份份数据美美的展示在页面上实为一项艰巨的任务. 对比了现有的几个比较有名的可视化工具之后,最终还是决定使用G2来进行项目开发. 该篇文章主要是记录一下近期在使用G2所遇到的一…"}, {"id": "6914560009720791053", "title": "高德地图API实现定位、地点搜索和周边搜索(H5/Vue/微信小程序)", "desc": "这里采取的是JSAPI Loader的方式（可有效避免异步加载问题，且多次执行加载操作时不会重复请求网络资源等）。 1. 普通html页面 2. Vue 3. 微信小程序（小程序的key和web端的不同，需重新创建）"}, {"id": "6963658186452795428", "title": "如何用 OpenWrite 给 VuePress 配置博客导流公众号插件 - 公众号获取验证码阅读全文", "desc": " 经常在网络上浏览文章的小伙伴可能会遇到一些这样的文章，当我们看的正起劲的时候，剩余的内容都被隐藏了，需要到指定公众号回复关键词解锁。 这两天我也给我的博客加上了，因为踩了一些坑，所以记录一下，希"}, {"id": "6882577678692515847", "title": "【Vue组件】从零开始实现一个支持插入自定义表情的评论组件", "desc": "近期由于产品迭代，需要新增一个评论功能，且需要支持插入自定义表情。评论功能很多人一开始跟我一样，第一个想到的就是用textarea，但是textarea是不支持的插入图片的，因为我们的表情包是以图片的形式插入文本中的，所以这里是使用HTML5的新特性contenteditabl…"}, {"id": "6953914990776713246", "title": "推荐一个开源的vue+Element UI前后端分离后台管理系统实战", "desc": "【转自乐字节】 最近在学习vue前后端分离开发，但是由于技术太菜，很难在项目上得心应手，最终找到了一个vue开源项目学习，最终在没有基础的情况下，他认识我我不认识他，呵呵。我想很多自学这块的小伙伴也遇"}, {"id": "6844903511684022285", "title": "如何自定义自己的vue-cli模板", "desc": "在使用vue-cli的过程中，常用的webpack模板只为我们提供最基础的内容，但每次需要新建一个项目的时候就需要把之前项目的一些配置都搬过来，这样就造成挺大的不方便，如果是作为一个团队，那么维护一个通用的模板，我认为是挺有必要的。 例如下面是我常用构建项目的目录。 从 htt…"}, {"id": "6844903711370657806", "title": "Vue一个案例引发的动态组件与全局事件绑定总结", "desc": "最近在自学 Vue 也了解了一些基本用法，也记录了一些笔记有兴趣的朋友可以去查看我的其他文章，技术这东西真的不能光靠看，看是没有的，你必须要动手实践，只有在实战项目中才能发现问题，才能发现我们没有掌握的知识点，然后发现问题解决问题，我们的能力才能得以提升，要不然就有点眼高手低了…"}, {"id": "6993686112476594190", "title": "一些vue你不太知道的知识 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 一、v-if和v-for哪个优先级更高？ 可以自己写这样一段代码，然后进行断点调试，会走到源码中compiler/codegen/index"}, {"id": "6986892424480047134", "title": "axios的get和post使用及传参", "desc": "axios的 get和post 传参以及使用方法，使用方法以vue 为例: axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征："}, {"id": "7000391288763711495", "title": "保姆级别Cli4创建Vue3项目 #11#vue3前端青铜到黄金王者", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 前篇写了很多vue的内容，都说单个页面的。 这篇我们建立一个vue3项目。 其实可以修改的我们再看看。 v cli是什么？ vue cli"}, {"id": "6844903808787546125", "title": "基于 vue-cli3 打造属于自己的 UI 库", "desc": "小小的前端有大大的梦想。做一个属于我们自己的 UI 组件库应该是个不错的小目标了。那。。。组件是什么😯？我想应该不用多说，在日常开发中我们天天与之打交道，你所写的每一个 vue 文件都可以当做是一个组件，只不过通用性有所区别而已。组件写得多了，随着时间的推移，你就会有写一个组…"}, {"id": "6844904198576832526", "title": "不是大佬，也得知道，Vue的一些小操作（一）", "desc": "写代码的时候经常会神游天外，写着写着又不知道自己准备干什么来着了，这个时候我尝尝想要看一眼自己的注释（正经人谁写注释啊）。回看一眼发现，哇哦，我！@#￥#@。继上一次老板娘看到我发的《这样写离线存储，老板娘再也没有让我加过班。localForage 的使用》之后，我已经连续加了…"}, {"id": "6844904058638221320", "title": "用 Vue+ElementUI 搭建后台管理极简模板", "desc": "此篇文章为一篇说明文档，不是教你从零构建一个后台管理系统，而是基于一个实际项目，已经搭建好了一个后台管理系统的基础框架，教你如何在此基础上快速开发自己的后台管理系统，能让读者能在掌握一些基础知识的情况下，也能上手vue后台开发。只有接触项目，才能更好地理解自己所学知识的意义，触…"}, {"id": "6844904192331481101", "title": "【vue选手极速进阶】图文详解vue+ts+class+注解风格开发排坑全指南（更新）", "desc": "从vue开始火热起来到现在，已经基本上前端开发小伙伴入门的技能了。相信这么久时间过去之后，大家也早已习惯vue的开发模式了。那么，你和别人比比的时候，难道不想有些许亮点吗？虽然目前vue2+对ts的支持没有像react、ng等支持的更友好，但是随着社区相关工具链的完善，其生产项…"}, {"id": "7001746072649334798", "title": "vue中mixin用法", "desc": "熟悉vue中mixin用法，总共从7个部分展开讲 1. mixins出现的原因？ 2.mixins是什么？ 3.mixin和mixins区别 4.mixins如何使用 5.mixins合并规则总结"}, {"id": "7001706479916941348", "title": "Vue 源码初探（五）对象异步更新nextTick()", "desc": "思维导图 前言 上一节我们实现了当我们改变了属性值之后页面会自动触发更新的流程，本节我们要考虑的是，当我们多次修改同一个属性的时候避免渲染多次的情况发生，所以我们在内部采用了异步更新页面的流程。 正文"}, {"id": "6844903863070228494", "title": "开箱即用 vue-cli4 vant rem 移动端框架方案", "desc": "Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。 以 VUE_APP_ 开头的变量，在代码中可以通过 process.env.VUE_APP_ 访问。 比…"}, {"id": "7001710151958790180", "title": "从动态表单说起，在vue中使用jsx", "desc": "为了实现用json动态渲染vue组件的功能， 我们使用jsx来编写组件，这样，我们获得了更底层的编程能力。"}, {"id": "6844903704663949325", "title": "面试官问：能否模拟实现JS的new操作符", "desc": "用过Vuejs的同学都知道，需要用new操作符来实例化。 那么面试官可能会问是否想过new到底做了什么，怎么模拟实现呢。 从这里例子中，我们可以看出：一个函数用new操作符来调用后，生成了一个全新的对象。而且Student和Object都是函数，只不过Student是我们自定义…"}, {"id": "6844903609667158030", "title": "解密Vue SSR", "desc": "最近笔者和小伙伴在研究Vue SSR，但是市面上充斥了太多的从0到1的文章，对大家理解这其中的原理帮助并不是很大，因此，本文将从Vue SSR的构建流程、运行流程、SSR的特点和利弊这几方面对Vue SSR有一个较为详细的介绍。最后还将附上一个笔者实现的去除Vue全家桶的Dem…"}, {"id": "6993329331061653518", "title": "Element 2 组件源码剖析之Icon图标", "desc": "本文将深入分析组件 Icon 源码，剖析其实现原理，耐心读完，相信会对您有所帮助(Element 2 组件源码剖析系列)。"}, {"id": "6991642741612478472", "title": "⚡qiankun微前端中的应用通信(三)-结构模块化，用法简单化｜8月更文挑战", "desc": "一个qiankun微前端的应用间通信模块，该方案以redux为核心，采用发布-订阅模式进行封装，实现应用间通信数据上的响应式，代码结构模块化，api仿照vuex，降低上手难度, 并可适用多框架"}, {"id": "6844904063176278029", "title": "Typescript+Vue大型项目构建+详细讲解", "desc": "这里单页面组件的书写采用的是 vue-property-decorator 库，该库完全依赖于 vue-class-component ，也是 vue 官方推荐的库。 @Emit()不传参数,那么它触发的事件名就是它所修饰的函数名. watch 是一个对象，对象就有键，有值。 …"}, {"id": "6984329866413867038", "title": "【框架 · 序】为什么需要亲手设计一个前端框架", "desc": "如何看待自制框架这件事情 在前端的远古时代，前端的框架就有很多了，如 knockout、backone、extjs …… 都曾由众多使用者。然而由于那时候还是以 jsp php asp 等后端渲染架构"}, {"id": "6982041650402951198", "title": "🌵「硬核Vue」Vue的高级特性你真的会用吗", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 写在前面 笔者理解的渐进式框架也非常简单，就是用你想用或者能用的功能特性，你不想用的部分功能可以先不用。Vue不强"}, {"id": "6996934851983048718", "title": "Vue组件使用时需要注意的几个细节点", "desc": "1. is标签解决模板标签上渲染时出现的小bug;2.子组件中定义的data，值必须为一个函数（函数返回的值为一个对象）3.ref的使用"}, {"id": "6981841976920375309", "title": "绑定class和内联样式style", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第7篇，关于v-bind绑定class和内联样式style ，一起来看看吧~~~~"}, {"id": "6994815696697982984", "title": "用 NuxtJS 构建 SSR 商城 实战笔记——统一管理 api 模块", "desc": "本篇主要介绍基于 NuxtJS 构建的 vue 后端渲染（SSR）项目中关于 api 模块的统一管理~"}, {"id": "6844903678533451783", "title": "做面试的不倒翁：浅谈 Vue 中 computed 实现原理", "desc": "虽然目前的技术栈已由 Vue 转到了 React，但从之前使用 Vue 开发的多个项目实际经历来看还是非常愉悦的，Vue 文档清晰规范，api 设计简洁高效，对前端开发人员友好，上手快，甚至个人认为在很多场景使用 Vue 比 React 开发效率更高，之前也有断断续续研读过 V…"}, {"id": "6844903882334666766", "title": "用Vue写几个小游戏玩玩", "desc": "当小鸟成功飞过管道时，记录当前管道的isCross字段，已被小鸟通过。"}, {"id": "6844904024118919176", "title": "给你的网站添加第三方登录以及短信验证功能", "desc": "OAuth 2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。比如掘金这种第三方账号 微信、微博、github 登录方式一样。思考一下这种登录方式是如何设计和实现的呢？日常生活中很多APP或者网站在用户输入完手机号之后都需要发送验证码校验，那么这整套流程又是如何…"}, {"id": "6844903989935341581", "title": "聊聊 Vue 中 provide/inject 的应用", "desc": "众所周知，在组件式开发中，最大的痛点就在于组件之间的通信。在 Vue 中，Vue 提供了各种各样的组件通信方式，从基础的 props/$emit 到用于兄弟组件通信的 EventBus，再到用于全局数据管理的 Vuex。 在这么多的组件通信方式中，provide/inject …"}, {"id": "6986196904107311112", "title": "[Element Plus 源码解析] Button 按钮", "desc": "一、组件介绍 官网链接：Button 组件 | Element (gitee.io) Button组件是最常用的组件之一，是常用的操作按钮。 1.1 属性 展示类： size: string类型，设置"}, {"id": "6995153719335600159", "title": "11x4 精读Vue官方文档 - CookBook - 在 VS Code 中调试", "desc": "精读 Vue 官方文档系列 🎉 先决条件 在 VScode 中调试由 Vue CLI 生成的 Vue.js 应用。 安装 Chrome 安装 Vscode 安装基于 Chrome 的 Debugger"}, {"id": "6844903957706326023", "title": "Vue 3.0 源码开放，看看都有哪些新特性", "desc": "当大多数国人还在庆祝国庆节的时候，尤雨溪大大在昨天凌晨发布了 Vue 3.0 源代码，源码地址：https://github.com/vuejs/vue-next 。虽然目前还 处于 Pre-Alpha 版本，但是可以预见后面的 Alpha、Beta 等版本应该不会太遥远。 之…"}, {"id": "6979222860074549278", "title": "熬夜总结Vue3中SetUp函数2个参数详解", "desc": "“这是我参与更文挑战的第10天，活动详情查看： 更文挑战” 1.setUp函数的第1个参数props 2.参数context的讲解 3. 子组件向父组件派发事件 4.优化事件派发 5.获取父组件传递的"}, {"id": "6844903905524973575", "title": "vue跨域方案指北", "desc": "jsonp虽然不是官方的跨域方案，但它是最早出现的跨域方案，另外不管你是怎么使用jsonp跨域，==服务端支持这种跨域是前提==。 vue要使用jsonp，可以借助第三方工具包，推荐使用jsonp，假如你喜欢axios风格，用起来肯定得心应手。 假如我们的需要使用上面列出的以外…"}, {"id": "6948987171554476045", "title": "关于项目中使用Vue的性能优化, 可以用来和面试官Battle", "desc": "Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发传统工厂中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM；但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，所以我们仍然需要去关注 …"}, {"id": "6968755799107567623", "title": "Vue.js简介之基础语法", "desc": "vue.js简介， Vue.js 核心特性，Vue.js 基础语法，Vue.js 生命周期函数，综合案例：TodoMVC"}, {"id": "6989128683843747870", "title": "超级实用的vue小技巧，用了之后直呼好棒~", "desc": "1. 原型注入2. 对象冻结3.img 加载失败4. 递归组件5. 解决繁乱的template —— render函数6. 延迟更新 —— Vue.nextTick()7. 1. // main.import router from \".import store from \".i..."}, {"id": "6959334406582435877", "title": "Vue3 与 Vue2 的Props、全局组件的异同点！", "desc": "Vue3 Props Props 是任何现代 JS 框架的重要组成部分。在组件之间传递数据的能力是Vue项目的基本要素。 Vue3 中，在组件中访问Props的方式与 Vue2 会有所不同。 为什么使"}, {"id": "6844903910692356109", "title": "Vue 3.0 前瞻，体验 Vue Function API", "desc": "笔者计划写两篇文章，本文为笔者计划的第一篇，主要为笔者在体验 Vue Function API 的学习心得。第二篇计划写阅读vue-function-api的核心部分代码原理，包括setup、observable、lifecycle。 本文阅读时间约为15~20分钟。 Vue …"}, {"id": "6844903649143947271", "title": "深度解析 Vue 响应式原理", "desc": "无论是对象还是数组，需要实现双向绑定的话最终都会执行这个函数，该函数可以监听到 set 和 get 的事件。 在 Object.defineProperty 中自定义 get 和 set 函数，并在 get 中进行依赖收集，在 set 中派发更新。接下来我们先看如何进行依赖收集…"}, {"id": "6844903843298279438", "title": "用VS Code开发Vue应用", "desc": "摘要： 0错误0警告应该是每个程序员最基本的要求。 现在用VSCode开发Vue.js应用几乎已经是前端的标配了，但很多时候我们看到的代码混乱不堪，作为一个前端工程师，单引号双引号乱用，一段有分号一段没有分号，有的地方有逗号有的地方没有逗号，空格回车都对不齐，还说自己做事认真，…"}, {"id": "6973930798147698696", "title": "Vue 拖拽选择列表", "desc": "哈喽！小伙伴们。最近因为某个需求，简单做了一个小拖拽选择列表 demo，这篇文章记录如何从零到一完成。"}, {"id": "6844903825711562766", "title": "this.$toast() 了解一下？", "desc": "前言 在平时的开发过程中，我们总是先写好一个组件，然后在需要的页面中用 import 引入即可，但如果是下面这种类型的组件呢👇 上面这种类型的浮层提示有一个很大的特点，就是使用频率特别高，几乎每个页面"}, {"id": "6980258325170995236", "title": "vue3新特性及使用感受", "desc": "VUE3新特性 1. Composition API setup 使用setup时，它接受两个参数： props: 组件传入的属性 context：提供三个属性 setup 中接受的props是响应式"}, {"id": "7005949233664622600", "title": "如何解决axios请求远程数据会遇到的跨域问题-设置代理", "desc": "参考网址： vue cli: https://cli.vuejs.org/zh/ axios: https://github.com/axios/axios 安装axios 在项目文件夹下安装axio"}, {"id": "7005812217320833032", "title": "Vue中的组件传参「二」", "desc": "一、组件传参的方式 父组件向子组件传参「属性传参」 子组件向父组件传参「自定义事件」 组件之间相互传参「Eventbus & $emit & $on」 Vue实例属性传参「$parent、$child"}, {"id": "7007333299345424397", "title": "vue代理跨域", "desc": "通过 vue 代理，解决跨域问题。 如果直接请求，就会报跨域的错。配置代理后，跨域解决跨域的问题了。"}, {"id": "6890545920883032071", "title": "做了一夜动画，就为让大家更好的理解Vue3的Composition Api", "desc": "众所周知，Vue3.0带来了一个全新的特性——Composition API。字面意思就是“组合API”，它是为了实现基于函数的逻辑复用机制而产生的。 动画的创意来自网络，但如果只是拿人家的视频转成Gif，那就显得我太没有诚意了。"}, {"id": "6844904191224184840", "title": "绝对干货~！学会这些Vue小技巧，可以早点下班和女神约会了", "desc": "每天都在写代码，虽然手底下马不停蹄的敲，但是该来的加班还是会来的，如何能更快的完成手头的工作，提高自己的开发效率，今天小编给大家带来了这几个Vue小技巧，终于可以在六点像小鹿一样奔跑着下班了。 先赞后看，艳遇不断，哈哈哈哈 前几天产品经理给我甩过来一份管理系统的设计原型，我打开…"}, {"id": "7006668640787529735", "title": "vue项目中如何封装通用axios", "desc": "如何在vue项目中封装通用的axios呢?为什么要封装呢？直接发请求不好吗？封装后有什么好处呢？你是否同样有这样的疑问呢？一起跟随本文的脚步来看看如何封装一个通用的axios吧~"}, {"id": "6984939784133148685", "title": "手写 Vue2 系列 之 异步更新队列", "desc": "实现 Vue 的异步更新队列，让你彻底理解 Vue 的异步更新过程都发生了什么..........."}, {"id": "7005084796573450270", "title": "vue中实现图片拖动、放大、缩小，拖动不影响编辑", "desc": "封装成组件，可以直接在需要的页面调用，使用自定义指令实现拖动，url也可以接受一个数组，这样可以实现上一页下一页的更多更多功能"}, {"id": "6844903682455109640", "title": "2万5千字大厂面经 | 掘金技术征文", "desc": "简历不是一份记流水账的东西，而是让用人方了解你的亮点的。 平时有在做一些修改简历的收费服务，也算看过蛮多简历了。很多简历都有如下特征 以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。除非你呆过大厂或者教育背景不错或者技术栈符合人家要求了，否则基本就是看运气约面试了。 …"}, {"id": "6986899594491723806", "title": "Vite 是如何实现的", "desc": "Vite 是由 Vue 作者尤雨溪开发的 Web 开发工具，Vite 具有极速的服务启动、 轻量快速的热重载等特点，那这些特点是如何实现的呢，今天我们来一探究竟！"}, {"id": "7003156518342246436", "title": "🌵理解Vue3响应式原理", "desc": "这篇文章就来谈一谈Vue3是如何实现响应式的，此前Vue2实现响应式主要依靠的API是ES5的Object.defineProperty，我们来用它使对象变成可观察的，再结合依赖收集实现了响应式系统"}, {"id": "7004619171258449934", "title": "Vue（v2.6.14）源码解毒（一）：准备工作", "desc": "前言 Vue3 出来也有好一整子了，但 Vue2 的源码原理学习，不论在升职加薪还是在另谋高就的路上，一直是一个必要的环节，正应了“面试造火箭，上班拧螺丝”这句话。尽管之前对 Vue2 的源码也有学习"}, {"id": "6989618653998088228", "title": "我在几期薅羊毛活动中学到了什么～", "desc": "前言 为什么突然想写一篇总结了呢，其实也是被虐的。今年 3 月份初期，我们商城接了一个 XX 银行的一分购活动（说白点就是薅羊毛），那时候是活动第一期，未曾想到活动入口开放时，流量能直接将 cpu 冲"}, {"id": "6881795051492474893", "title": " 🎉🎉🎉 一个基于vue3+vite+ts的完整项目", "desc": "vue-vben-admin-2.0 是一个全新的开源系统,基于ant-design-vue2.x,typescript4,vue3,vite实现的 vue3 风格的后台管理系统。 yarn > npm > cnpm: - 包管理工具. Ant Design Vue Icon …"}, {"id": "6999637789079765005", "title": "剖析vue中的nextTick", "desc": "本文从nextTick API 的概念到使用，再到源码，层层剖析。系统地回顾nextTick的相关用法，以及内部调用逻辑。"}, {"id": "6844904200598454286", "title": "前方高能，这是最新的一波Vue实战技巧，不用则已，一用惊人", "desc": "最近一直在开发后台管理系统，日复一日的重复着表单表格表格表单，标准的CV仔，感觉好无聊，如何能在这种无聊的开发过程中去提升自己，小编今天又整理了一波新的Vue实战技巧，这些技巧，不用则已，一用惊人。同时你也可以点击下面的链接阅读近期小编的文章。 插槽，相信每一位Vue都有使用过…"}, {"id": "6870737289736093710", "title": "他写出了 Vue，却做不对这十道 Vue 笔试题", "desc": "请原谅我起了这么个浓浓营销号味道的标题。但这可丝毫没有夸大宣传，而是前端娱乐圈今日份的瓜—— 然后他自己也做错了（其中的某两道）。 Vue Core Team 的 @胖茶 40 分，可能说明带他的 mentor 不懂 Vue？不过他第二次做就拿了 90 分……这很赘婿逆袭啊。 …"}, {"id": "6997238044487057445", "title": "排名前10的vue前端UI框架", "desc": "最近在逛各大网站，论坛，SegmentFault等编程问答社区，发现Vue.js异常火爆，重复性的提问和内容也很多，小编自己也趁着这个大前端的热潮，着手学习了一段时间的Vue.js，目前用它正在做自己"}, {"id": "7007441912026103816", "title": "Vue3 造轮子做 Tabs 组件时，展示子组件内容/检查子组件类型的问题", "desc": "我现在需要确认 TabsDemo.vue 中引用的 Tabs 组件里的两个子组件的类型 怎么检查类型 怎么获取插槽内容 怎么展示内容"}, {"id": "6924912613750996999", "title": "备战2021：Vite2项目最佳实践", "desc": "Vite1还没用上，Vite2已经更新了，全新插件架构，丝滑的开发体验，和Vue3的完美结合。 2021年第一弹，村长打算以Vite2+Vue3为主题开启大家的前端学习之旅。 Vite2主要变化在插件体系，这样更标准化、易扩展。Vite2插件API扩展自Rollup插件体系，因…"}, {"id": "6913127343347204110", "title": "登录demo：vue3 + vue-router(4.x) + vuex(4.x) + Element3 + 简单鉴权", "desc": "简单的登录demo使用了vue3+vue-router(4.x)+vuex(4.x)+Element3主要的功能有登录的逻辑和简单的登录鉴权项目搭建创建项目（vue3）首先要确保安装最新的脚手架，如果"}, {"id": "6981408531161448462", "title": "深入Vue3.0 的 v-model学习", "desc": "前两天看到elementplus的sync修改成为了v-model,正好也在学习vue3.0的父子组件传值，就深入的看了官方文档的v-model。"}, {"id": "6844903911279558664", "title": "Vue页面转Pdf实践", "desc": "这一次我们来聊聊如何把页面转换成Pdf文件，经常会有这种场景，一些合同、协议等的页面需要进行下载，而且需要和页面保持一致，那么最好的方式就是直接把页面转换成相应的格式就好了，目前基本上就是Doc和Pdf这2种比较流行，我们就以Vue写的页面为例来看看如何转成Pdf文件。"}, {"id": "6844903729167089678", "title": "用 vue + d3 画一棵树", "desc": "坐标计算只需要一些 api，本文使用 d3。 数据绑定既可以借助 d3，也可以使用 vue。d3 通过操作 dom 实现，有点像 jQuery，d3 针对数据和 dom 的状态提出了三个概念：Update、Enter、Exit，感兴趣的可以看官网。本文使用 vue 做数据绑定 …"}, {"id": "6844904173591330829", "title": "CKEditor5 Vue 入门使用教程", "desc": "CKEditor是一款非常全面的富文本编辑器，也出来很多年了，各方面支持得都比较好（对vue、react、angular都做了相应的封装），今天主要给大家总结下自己在使用过程中的经验。本文主要总结的是 CKEditor5 在vue中的用法，包括classic、inline、ba…"}, {"id": "6844903814357581832", "title": "跟混乱的页面弹窗说再见", "desc": "对于一些快速迭代的产品来说，特别是移动端C端产品，基于用户运营的目的，在app首页给用户展示各种各样的弹窗是很常见的事情，在产品初期，由于迭代版本和运营策略变化地还不是太大，所以可能觉得没什么，但当产"}, {"id": "6962421626247839780", "title": "1. 使用Vite搭建Vue3 + TypeScript项目 -- 环境准备", "desc": "从零搭建一个Vite + Vue3 +TypeScript的项目, 记录一下开发过程中的一些知识点以及踩到的坑"}, {"id": "6883002751769378829", "title": "如何debugger vue源码", "desc": "1. 下载源码安装依赖 在项目的examples目录下有很多的demo,随便打开一个，复制index.html路径在浏览器中打开就可以查看。 2. 为了进行源码debugger做两个改动 我们可以看到在这个demo中引用的vue是压缩版本的。我们改成引用/dist/vue.js…"}, {"id": "7003917932082249735", "title": "重读Vue文档系列【1】", "desc": "使用Vue有两年半啦，想回过头来，看看自己收获了什么，就出来这一系列，就当温故知新~😊😊😊 👀P.S. 如有不对，欢迎指正~ tempalte Vue通过template模板，声明式地把数据渲染到DO"}, {"id": "7003945042020663326", "title": "Vue.Keep-alive", "desc": "Keep-alive:中文意为保持活动，顾名思义是让组件保持状态，不销毁组件 用法：使用包裹住动态组件 使用@cilick 点击事件切换组件，由于有keep-alive包裹动态组件，所以组切换后的效果"}, {"id": "6844903512086675469", "title": "一个干净优雅的 Element UI Admin 模板", "desc": "最近做了很多单页应用，当项目越来越大的时候，才发现刚开始多做一些基础工作，多想想项目合理的结构和一些必要的封装会带来事半功倍的效果。以后再也不要接到需求就干了。 hh~~ 这个是基于Element UI的后台单页应用模板，封装了api,做了一些基础工作，可以自行查看，就只有登陆…"}, {"id": "6877466802415206414", "title": "分享一些常用的 Vue filters", "desc": "在 Vue 中，filters 与 methods、computed、watch 等有所不同，在 filters 中不能对原始的响应式数据进行更改，而只是改变其渲染的结果，并返回过滤后的文本。 所以，可以将一些常用的文本格式化工具函数封装成 filters。"}, {"id": "6997268405384380446", "title": "vue项目中使用proxy解决调试时的跨域问题，使用nginx解决前后端分离部署时的跨域问题", "desc": "前言 我们在做项目的时候，经常碰到跨域问题，在Java中我们可以让后端使用CorsFilter这个类，给我们做相应的配置，允许哪些域名进行跨域请求，例如我之前就是这么做的，代码如下： 但是如果后端不想"}, {"id": "6911137088775651341", "title": "antdv的Upload组件实现前端压缩图片并自定义上传功能", "desc": "在上传图片前获取该图片的文件流（beforeUpload中获取），对这个文件流进行压缩操作，再将压缩后的文件流传过去（resolve(newFile)），最后进行自定义的上传请求（customRequest中实现）。 前端本地图片的预览则可以选择blob或者base64的方式，…"}, {"id": "6844904053193834509", "title": "vue3.0响应式原理", "desc": "类型推导：Vue3.0 最核心的点之一就是使用 TS 重构，以实现对 TS 丝滑般的支持。而基于函数 的 API 则天然对类型推导很友好。 打包尺寸：每个函数都可作为 named ES export 被单独引入，对 tree-shaking 很友好；其次所有函数名和 setup…"}, {"id": "6914913275402518541", "title": "2021新年 Vue3.0 + Element UI 尝鲜小记", "desc": "2021年，又是新的一年，Vue 已经发布 3.0 版本，最好用的 UI 组件库 Element UI 也发布了适配 Vue3.0 的新版本，是时候开始学习一下这两个新技术。 本文主要记录了使用 Vue CLI 来完成项目搭建的过程。 输入vue -V (大写的V) 查看版本 …"}, {"id": "6914679056051109901", "title": "Vue2.0源码阅读计划(一)——工具函数", "desc": "经常使用Vue2.0 + ElementUI进行开发，总是会遇到莫名其妙的问题，最常见的莫过于我的数据为啥没实时响应，不应该啊，当然不止如此。有了问题就找度娘，CV一下一般就解决掉了，总是这样不自行思考永远都是垃圾，对于问题一定要有自己的思考。阅读源码这个操作，总是提升最快的，…"}, {"id": "6970991141588041741", "title": "Vue3 的 SFC Style CSS Variable Injection 提案实现的背后", "desc": "在 5月22日的 Vue Conf 21 上，尤大在介绍单文件组件（SFC）在编译阶段的优化的时候，讲了 SFC Style CSS Variable Injection 这个提案，即 <s"}, {"id": "6997027965750116388", "title": "vue 2.0 中理解 computed", "desc": "computed 是vue 中的计算属性，接下来会带着问题去看下他是怎么工作的。 计算属性什么时候会计算 计算属性是怎么知道它本身依赖于哪些属性的。以便知道其什么时候更新 vue官方文档的缓存计算结果"}, {"id": "6931269145388384263", "title": "vue中怎么使用ts -- 入门版", "desc": "这边是结合vue-property-decorator使用ts。不需要理解，基本就是句型照抄~ =。="}, {"id": "6987317974147268616", "title": "vue 基础温故知新", "desc": "近期复习了一遍vue的基础知识，并把其中的一部分记录到了脑图中，大致如下： 前往此处下载源文件：vue基础"}, {"id": "6844903888525459464", "title": "vue-draggable-resizable 可拖拽缩放的组件", "desc": "距离上1.7版本版本的修改已经过去快一年的时间了，原版组件在之前已经更新到了2.0版本。 虽然之前适配过旧版组件，但是因为2.0版本原作者对代码进行了重构，原来修改的代码照搬是不可能的了。 所以也就一直没有将冲突检测以及吸附对齐功能适配到2.0版本，最近正好有时间就适配一下。 …"}, {"id": "6977564213749219341", "title": "nextTick的实现原理", "desc": "nextTick的作用 vue的数据更新操作 nextTick的实现原理 当我们更新了数据的状态之后，我们希望可以能够获取最新的节点来做一些我们的回调操作"}, {"id": "6915967073432633357", "title": "vue 中我是这么封装 wangEditor 的", "desc": "从对比实验中得知，我们是不是可以粗浅的理解为 v-model=\"html\" 等效于 v-bind:value=\"html\" + v-on:input=\"(e) => { this.html = e.target.value }\"， 现在是不是好理解多了。"}, {"id": "6844904198895566862", "title": "vue项目初始化模板（后台/大屏可视化/webApp）", "desc": "初始化VUE项目的时候我们会用到vue-cli脚手架来快速生成模板代码。我在vue-cli的基础上，结合工作中不同的项目场景，整理了三个模板，并写了一个Cli小工具来快速拉取这三个模板。具体用法如下： 自动拉取 vue 项目模板的 cli 工具。 vue-admin-templ…"}, {"id": "6992388944172154893", "title": "vue修改数组对象触发视图更新问题", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 问题 - 直接修改数组元素是无法触发视图更新 比如： - 直接给对象添加元素也不会触发视图更新 均不会触发视图更新       官方给出的解"}, {"id": "6844903609558106120", "title": "面向Vue新人：使用Vue自定义指令来完善一个Select组件", "desc": "下面可供选择的options用的是绝对定位；同时input设置了readonly，使input变的不可输入，整体布局很简单。 这两项目功能都挺简单，先来完成第一个，点击input框切换显示options，借助v-show就好。 如上所示，在选项里添加v-show=\"showOp…"}, {"id": "6914824008043069448", "title": "Vue+Element表格通过前端导出为Excel文件", "desc": "注：此方法能够导出多级表格，默认已安装ElementUI。 注:表格导出实现解释，给展示表格添加选择功能，通过handleSelectionChange函数将选中数据与selectData绑定，在选中需要导出数据后点击导出按钮，展示el-dialog并将selectData数据…"}, {"id": "6919732430509522957", "title": "整理目前支持 Vue 3 的 UI 组件库 (2021 年)", "desc": "最近，让前端圈子振奋的消息莫过于 Vue 3.0 的发布，一个无论是性能还是 API 设计都有了重大升级的新版本。距离 Vue 3.0 正式版发布已经有一段时间了，相信相关生态周边库也正在适配新版本中，像我们熟悉的 Element UI，Vant 等优秀组件库，是否完成了对 V…"}, {"id": "6844903870578032648", "title": "记一次忏悔的前端面试经验（Vue 双向绑定原理）", "desc": "2019年6月6号，为了爱情，我离开工作了一年多的广州来到了杭州这个互联网城市。开始我的前端面试之旅... 放下拧螺丝的扳手，开始造起了飞机... 面试的第一家，一开始就问 Vue 双向绑定怎么实现。 在软件架构中，发布订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直…"}, {"id": "6999840511662129182", "title": "vue 任意组件间通信-全局事件总线（GlobalEventBus）", "desc": "全局事件总线（GlobalEventBus） 一种组件间通信的方式，适用于任意组件间通信 安装全局事件总线 main.js入口文件配置 使用事件总线 1、接收数据：A组件想接收数据，则在A组件中给$b"}, {"id": "6844903970469576711", "title": "vue-cli基础配置以及webpack配置修改", "desc": "脚手架vue脚手架vue-cli我们使用任何东西第一步都是安装1.安装脚手架(一般安装在全局)安装成功后，全局环境会生成$vue的可执行命令，我们可以基于$vue--version来查看版本号，看是否"}, {"id": "6992857769707733028", "title": "「Vue」.sync修饰符", "desc": "一、$emit 子组件通过props可以引用父组件的数据，那么当子组件想要修改这个数据时，则可以通过$emit在子组件上修改父组件的数据。 $emit 共接收两个参数 ： {string} event"}, {"id": "6989050898789957639", "title": "超详细！Vuex手把手教程", "desc": "最近在重温vue全家桶，再看一遍感觉记忆更深刻，所以专门整理记录一下Vuex，专为Vue.js开发的状态管理模式。"}, {"id": "6850418121619177486", "title": "vue-grid-layout+component 实现动态布局", "desc": "是什么？官方demo常用参数解析参数含义数据类型colNum将一行分为多少块数字默认12rowHeight行高数字默认是单位是pxisDraggable是否可以拖拽booleanisResizable"}, {"id": "6988086842000146440", "title": "详解Vue.component和Vue.extend", "desc": "众所周知，Vue 的灵魂在于: 数据驱动视图 + 组件化，本篇将为大家讲解 Vue组件 的创建，还有与其息息相关的 Vue.extend 方法。"}, {"id": "6987602944665321480", "title": "vue数据劫持：参照vue源码实现的demo，简单易懂", "desc": "本文所写的数据劫持 demo，主要参考 vue2.0 源码。为简便易懂，仅抽离了核心功能并做出了一点小小的改变。希望本文对你阅读 vue2.0 源码的数据劫持部分有所帮助。"}, {"id": "6978648118560555015", "title": "Vue中 Vue.use() 原理及使用", "desc": "这是我参与更文挑战的第 22 天，活动详情查看：更文挑战 相信很多人在用 Vue 使用别人的组件时，会用到 Vue.use() 。例如：Vue.use(VueRouter)、Vue.use(MintU"}, {"id": "6969839369259745317", "title": "Vite 2.0 + Vue3 + Ts + Vant3移动端项目", "desc": "Vite 2.0 搭建 Vue3 移动端项目 涉及技术点 vite vue3 ts router vuex axios vant3 移动端适配 请求代理"}, {"id": "6988809863082016781", "title": "从创建实例到模板编译前Vue都做了些什么？", "desc": "本篇讲的是深入 _init 方法，探索从创建实例到模板编译前 Vue构造函数 都经历了些什么，做了那些事儿。"}, {"id": "6844903621369298957", "title": "[译] Vue.js 还是 React？你会选择哪一个？为什么？", "desc": "两者之间的区别很有意思，但不仅仅局限于 JSX 与 Templates 或者丰富的 API 与少量的 API 的区别。React 和 Vue 两者之间的选择可能导致截然不同的结果，这一点在你一开始选择的时候可能并没有意识到。当选择一个框架的时候，一个重要的问题是「我希望项目的复…"}, {"id": "6844903824918839303", "title": "ionic4+vue+cordova\b开发混合应用", "desc": "ionic是可以让我们使用web开发即使来移动应用的框架。ionic4之前，ionic只能和angular搭配使用，ionic4后把ionic抽离成四个版本，@ionic/core，@ionic/angular，@ionic/react，@ionic/vue来满足更多开发者的需…"}, {"id": "6922617172598456333", "title": "从零开始，用elementui躺坑vue - 国际化I18n", "desc": "i18n（其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数）是“国际化”的简称。通过vue-i18n来实现此功能。对于国内的绝大多数开发人员而言，是用不到此功能的，可以直接进行掠过。 前端国际化，简单的说：就是语言的不同切换。 如：…"}, {"id": "6976232466059100197", "title": "Virtual DOM到底有什么迷人之处？如何搭建一款迷你版Virtual DOM库？", "desc": "为什么使用Virtual DOM 手动操作DOM比较麻烦。还需要考虑浏览器兼容性问题，虽然有JQuery等库简化DOM操作，但是随着项目的复杂DOM操作复杂提升。 为了简化DOM的复杂操作于是出现了各"}, {"id": "6883052338337185799", "title": "【study】Vue中如何快速获取当前时间", "desc": "1.主要使用原生的原理在vue中实现（自己拼接字符串） 这种写法，每秒都在更新这个字符串，但是实际上，每秒不是时分秒都在变化，所以实际上这种写法的性能不是很好，按需求，我们应该局部更新视图，所以我们可"}, {"id": "6917940704347160583", "title": "八. 使用vue+antd搭建后台管理系统(实现篇)        ", "desc": "写在前面上一篇完成了后台管理系统的基础搭建和一些具体功能，现在就直接开始完成页面功能的具体实现和项目优化。页面基础功能实现1.登录页分为用户名+密码登录和手机号+验证码登录两种，验证码mock随机六位"}, {"id": "6999196959223316517", "title": "创建vue3项目", "desc": "官方文档 https://vitejs.cn/ 这个项目我们尽量用yarn命令。 # 1、创建项目的命令 # 2、选择创建vue项目 # 3、选择你想要的版本 4、回车后项目下载完成 5、安装node"}, {"id": "6844904001461288968", "title": "Vue多语言实战", "desc": "最近在做一个香港的项目，需要项目支持简体中文、繁体中文和英文。经调研后，使用Vue生态中比较成熟的是vue-i18n。项目实战时，自己也积累了些有用的经验，写出来和大家分享。 这里默认各位看官使用Vue-cli搭建前端工程。 其实这三种情况都依赖于i18n挂载后的全局$t方法。…"}, {"id": "6977526834246189069", "title": "vue监听数据：computed与watch/methods", "desc": "computed计算属性与methods方法的对比、watch侦听属性的特性、computed与watch侦听属性的对比，并举例说明"}, {"id": "6844904129215594504", "title": "vue项目打包上线", "desc": "这时我们需要使用服务器的方式来访问index.html就可以了。这里可能很多人也会遇到一些问题，比如大家可能在开发的时候使用的proxytable来解决跨域的问题，这里就会没有数据了，这个需要自己通过服务器在解决一下才可以的，proxytable在这里只是为了方便大家开发的跨域…"}, {"id": "6844903641824903176", "title": "微信小程序开发框架从入门到放弃", "desc": "半年时间，我已经开发了四个小程序，其中三个微信小程序，一个支付宝小程序。原生开发过，框架也用过。到底最优雅的开发模式是什么呢，聊聊，聊聊。 使用框架来开发，总结起来就干了一件事——加糖，但这糖好不好呢，不好说。 wepy框架来说，组件化的支持不成熟，在实际的开发过程中，如果组件…"}, {"id": "6974021696382566413", "title": "现在还有必要用jQuery吗？来看看vue和jQuery相同示例代码横向对比解心中疑惑", "desc": "本文适用于还在使用传统js原生和jquery方式操作dom的小伙伴，以及还在困惑，究竟是传统js/jqurry开发效率高对开发者友好还是vue表现得更好。那么废话少说，让我们一起来对比以下jquery"}, {"id": "6980668661929345038", "title": "脚手架实现原理分析", "desc": "脚手架的核心目标： 提升前端研发效 脚手架核心价值 将研发过程： 自动化：项目重复代码拷贝/git操作/发布上线操作 标准化：项目创建/git flow/发布流程/回滚流程 数据化：研发过程系统化、数"}, {"id": "6844904063687983112", "title": "全栈“食”代：用 Django + Nuxt 实现美食分享网站（上）", "desc": "Django 作为 Python 社区最受欢迎的 Web 框架之一，凭借其高度抽象的组件和强大方便的脚手架，将快速且流畅的开发体验演绎到了极致。而 Nuxt 作为从 Vue.js 进化而来的前端框架，能够轻松胜任复杂的 SPA（单页应用）开发。两者相遇，能够擦出怎样的火花？这篇…"}, {"id": "6844904021220655117", "title": "Vue.js项目刷新当前路由(页面)的方法与实践", "desc": "越来越多的前端项目使用MVVM框架Vue.js进行架构开发，充分利用了Vue.js的数据驱动、双向数据绑定、组件化开发以及其优秀的社区生态(官网+第三方扩展支持)等能力。Vue.js在提升性能方面着重的使用了组件复用能力，极大的优化了DOM更新的速度，提升了用户体验。 问题： …"}, {"id": "6844903505669390343", "title": "基于 Nuxt 的 Vue.js 服务端渲染实践", "desc": "服务端渲染（Server Side Render）并不是一个新的概念，在单页应用（SPA）还没有流行起来的时候，页面就是通过服务端渲染好，并传递给浏览器的。当用户需要访问新的页面时，需要再次请求服务器，返回新的页面。 为了优化体验，开发者们开始选择采用 JavaScript 在…"}, {"id": "6998333783560683527", "title": "vue框架开发-02(vue指令)", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 第二章：Vue指令 本章目标 了解什么是 Vue.js 指令 理解 Vue.js 指令的用途 掌握 Vue.js 指令的书写规范 能够使用 "}, {"id": "6844904118205562893", "title": "使用vue实现排序算法演示动画", "desc": "嗯，舒服了很多，这个需求到这里就完了，但是事情并没有结束，我突然想到了以前看一些算法文章的时候通常会配上一些演示的动画，感觉跟这个很类似，那么是不是可以用这个来实现呢，当然是可以的。 之前看到这些动图的时候也有想过怎么实现，但是都没有深究，这次业务开发无意中也算找到了其中的一种…"}, {"id": "6844903959883218951", "title": "Vue项目 使用拦截器和JWT验证 完整案例", "desc": "几乎在所有的项目中都离不开拦截器和登录验证，这是必需的。如果你学会了这个demo，那么几乎所有网站的登录验证，加载动画就都会了，所以背也要背会 如果你在 20秒 之内，操作页面的话，那么token的值是不会失效的，所以是不需要再次登录的。也就是说，在 20秒 之内，你每次进行路…"}, {"id": "6870815945188147208", "title": "前端重复请求，不存在的！", "desc": "某一天，老大突然把我叫到座位，指着屏幕。我一看，运维群，惊了！难道有事故，有bug！？情况是钱包系统数据有异常，后台同事查证同一笔手工批量充值发起了两次，怀疑可能是前端没有控制好，重复发起了批量充值请求。吓的我赶紧检查相关代码，发现在前端“点击按钮之后会有弹窗二次提醒用户是否操…"}, {"id": "6981810274848210952", "title": "Vue3之setup初始化工作流程", "desc": "参数 使用setup函数时候，接受两个参数： props：setup函数中的第一个参数，响应式的，当传入新的props时，它将被更新 content：即上下文，setup函数中的第二个参数，是一个普通"}, {"id": "6844903960025759757", "title": "响应式导航栏实现", "desc": "Tips：若 gif 图片未加载出，请尝试刷新。 将导航栏分为左右两部分，当窗口宽度减少时，使用css媒体查询实现样式修改，当宽度减小至最小时，隐藏当前导航显示，替换为下拉列表展示。"}, {"id": "6844904205678116877", "title": "使用element-ui + cropper.js自己封装一个图片裁剪组件", "desc": "在cropperBox.vue中写入以下内容,(finishCropImage方法中的blob的数据格式请自行选择以下两种，第一种是blob，第二种是普通文件方式。)"}, {"id": "6977245169531912199", "title": "关于一段时间不操作自动退出系统", "desc": "如果登录用户在进入系统后，一直没有操作的情况下，一段时间后强制登出系统 刚开始同事写了一个，思路是： 在访问系统登录页面的时候执行一个setInterva"}, {"id": "6844904070356942862", "title": "【项目实践】使用Vue.js和ElementUI快速实现后台管理系统的界面布局", "desc": "大家都知道，后台管理界面不需要很酷炫的动画效果，也不需要花里胡哨的界面布局，只需要简洁易用、清爽明了的界面以便于管理数据。而现在普遍的后台管理系统的界面布局都差不多，上中下结构，然后左边是导航栏。随便贴两个Bootstrap的主题模板就是这样的： 这其中难的不是布局，而是如何点…"}, {"id": "6844904142469595143", "title": "Nuxt 深度实践", "desc": "Progressive，其实是我们考虑的重点。作为一个互联网产品，各种日常活动以及不定期的运营活动是必然的。很多重复的逻辑都可以抽离成模块来进行管理。Nuxt 的 module 为我们提供了便捷的“即插即用”的模块管理方式。目前，我们的项目中已经拥有了 10 个左右的大型模块，…"}, {"id": "6935600283451916295", "title": "Vue SSR 详解", "desc": "之前 使用 Vue + Koa + Node 搭建了服务器端单页面应用程序。后续维护的时候发现对整体流程不太清楚了😄，所以花了点时间整理了每个模块的功能如上图。接下来按流程来分析下 Vue SSR。 更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。采用服务…"}, {"id": "6884483221749252109", "title": "逐行阅读Vue3响应式系统核心源码(reactive和effect)", "desc": "自从很久之前(已经忘了多久了)Vue发布了alpha版本以来，网上已经涌现了一大批优秀的博客、文章来分析Vue3的全新的响应式系统，所以我在这个时候再写一篇分析关于Vue响应式系统的文章可以说是在炒冷饭的感觉了。不过我还是想把自己看源码时的想法记录分享出来供大家的批评指正(顺便…"}, {"id": "6996663540908032013", "title": "vue组件封装", "desc": "创立一个VUE。template，div（在div根标签里面放置组件）。可对组件进行大量的自定义修饰。 1.1 在其他地方引用时： 1.2 为输入的变量重新取一个名字，import命令使用as关键字，"}, {"id": "6844904164959453198", "title": "高德地图+vue实现页面点击绘制多边形及多边形切割拆分", "desc": "3.地图的js算法是turf.js，turf是一个用于空间分析的js库。它包括传统的空间操作、用于创建GeoJSON数据的辅助功能以及数据分类和统计工具。Turf可以作为客户端插件添加到你的网站上，或者你可以用在Node.js开发后端上，感兴趣的可以看一下它的github，一个…"}, {"id": "6979543698510086175", "title": "当 Vite 搭配上 Vue 全家桶", "desc": "随着 Vue3.0 的发布，Vite 也逐渐进入我们的视野。 Vite有着极速的服务启动、轻量快速的热重载、优化的构建、丰富的功能等的特点。"}, {"id": "6906032587606196237", "title": "云集中后台搭建系统 - 麻鸡", "desc": "一、产品介绍为什么叫麻鸡？因为我们都在云集里养鸡！表单列表天天写，没提升又没技术产出？组件库生态早已成熟，砸了再造？麻鸡是一个基于vue框架搭建中后台页面的解决方案，已经在云集落地应用了一年多，承接需"}, {"id": "6979501229407731726", "title": "记录几个vue3 demo项目开发的问题", "desc": "做了一些小demo项目，像[md-editor-v3]，[vue3-admin]等。喜欢在vue项目中使用jsx语法来编写，几乎项目中都使用到了ts，某一些写法，在谷歌的时候没找到，所以做一个小总结。"}, {"id": "6844903735521460238", "title": "Vue学习路线图", "desc": "如果你是一名 Vue 开发新手，可能已经听过很多行话术语，比如单页面应用程序、异步组件、服务器端渲染等等，或者还听说过与 Vue 有关的一些工具和库，比如 Vuex、Webpack、Vue CLI 和 Nuxt。 Vue.js是一套用于构建用户界面的渐进式框架，主要用于快速的构…"}, {"id": "6964660629760131080", "title": "循序渐进理解Vue SSR", "desc": "vue ssr官方文档很久没更新了，如果根据文档去了解vue ssr，会遇到各种各样的报错。本文依赖最新的vue-cli初始化项目，解决了build中遇到的各种问题。 代码地址 安装 开发 配置nod"}, {"id": "6947589859045277732", "title": "vue cli3 性能优化实战", "desc": "性能优化知识追寻者搞了个人站点后，心血来潮来了一波前端性能优化实战！！！个人站点地址：https://zszxz.com/index生成分析报告在 packge.json 中引入\"analyz\": \""}, {"id": "6844903622359121928", "title": "Vue + Koa 搭建 ACM OJ", "desc": "花了两个多月时间，我与 lazzzis 完成了第二版本的Putong OJ，因为中间忙着春招以及毕业设计等，项目最近才正式上线。 我们学校 acm 起步较晚，最早的 OJ 是由 Hust OJ 魔改而来，界面写的比较粗糙。2年前，那届的 acm 队长本来决定使用 Vue + G…"}, {"id": "6961557123587112967", "title": "请阐述一下computed和methods有什么区别？", "desc": "🙌 computed和methods区别 一些浅显的回答 在使用时， computed可以当做属性使用，而methods则可以当做方法调用。 computed可以具有getter和setter方法，因"}, {"id": "6986449385722740749", "title": "vue3 简单实现 Message 组件", "desc": "目录机构 src/Message.vue src/Message.less src/Message.js src/Instance.js index.js"}, {"id": "6844903838818779143", "title": "没有废话的vue高级进阶( 一 )   组件精髓概述", "desc": "惟沉默是最高的轻蔑。。 -------鲁迅 总之一定对得起高级进阶这几个字。。。 元素可以用一个特殊的属性 name 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 slot 特性的元素 作用域插槽是一种特殊类型的插槽，用作使用一个…"}, {"id": "6939161615421931534", "title": "vue中动态绑定类名v-bind:class的几种常见的用法（以导航菜单点击高亮为例讲解）", "desc": "vue中动态绑定类名:class的用法比较灵活，本案例以导航菜单点击高亮为例，简单进行讲解，我们先看一下最终的效果图。 :class除了上述三种写法以外，还有数组的写法、三元表达式的写法。不过我个人觉得，别的写法和上述介绍的写法都类似，触类旁通。灵活运用上述三种写法，基本上可以…"}, {"id": "6891085508173119496", "title": "用vue实现数据操作", "desc": "波谱拟合用来对某种材料或物质的谱图进行识别和分析，每种物质可以有多种成分，每种成分用component1、component2...表示，用Add another component和Remove component来控制每种成分的增加和删除，每种成分由多种原子核构成，即nuc…"}, {"id": "6844903727329968141", "title": "用canvas实现一个vue弹幕组件", "desc": "看B站时，对弹幕的实现产生了兴趣，一开始想到用css3动画去实现，后来感觉这样性能不是很好，查了下资料，发现可以用canvas实现，于是就摸索着写了一个简单的弹幕。 弹幕滚动的基本思路就是通过定时器不断地改变弹幕的位置，时时重绘画布。 先加入一个canvas标签，这里有个注意点…"}, {"id": "6844903585625407495", "title": "vuex 源码：深入 vuex 之 module", "desc": "store 将应用的状态集中起来，但如果应用变得非常复杂时，即状态非常的多时，store 就有可能变得相当臃肿。module 能够帮 store 划分了模块，每个模块都拥有自己的 state、getter、mutation、action 和 module。 那么 module …"}, {"id": "6844903591988330509", "title": "Vue.js实现可配置的登录表单", "desc": "表单是后台项目业务中的常用组件，这次重构了登录功能以满足登录方式可配置的需求，在此记录和分享一下。 在之前，项目只支持手机号+密码登录，前端是直接把表单写死的，后来有客户希望能支持验证码登录，有的客户还希望能有手机号+验证码+密码的登录方式...所以登录方式的灵活性需要可配置的…"}, {"id": "6844903608207540237", "title": "vuex其实超简单,喝完这3步,还有3步", "desc": "如果你没看过上篇,请戳链接过去先看一下再回来,否则,你会觉得本文摸不着头脑. 上经过复杂计算得来的,刚好这个getName要在好多个地方使用,那么我们就得复制好几份. 只有当依赖改变的时候,才要重新计算. 当项目越来越大的时候,单个 store 文件,肯定不是我们想要的, 所以…"}, {"id": "6904651972243111944", "title": "Vue2.6：keep-alive 简述", "desc": "不过这也意味着，在没有特殊处理的情况下，被缓存的组件显示的数据始终是第一次加载时候的样子。 keep-alive 的使用方法非常的简单，只需要使用 &#x3C;keep-alive>&#x3C;/keep-alive> 标签去包裹需要缓存的组件即可。 被 keep-alive …"}, {"id": "6844904117568012295", "title": "vue与iframe之间的信息交互", "desc": "使用场景：在vue中使用百度地图，需要使用离线地图先上代码然后细细品第一张图第二张图第三张图1.首先iframe引入你要嵌套的地址2.通过vue中给出的ref来获取ifarme的DOM元素3.vue如"}, {"id": "6844903811245424653", "title": "Vue 2.x折腾记 - (15) 捣鼓一个中规中矩loading组件", "desc": "说作为全局的页面loading ，但是自己想了想，还是选择画一个。 一开始想过用svg,canvas,最终还是选择了css3+js来实现这个效果。 除了常规的引入使用，还支持函数调用,挂载了一个$loading。 props的传递没有做增量合并(递归每个key赋值)，直接浅复制…"}, {"id": "6926359064242814983", "title": "手撕Vuex---------Vuex实现原理分析", "desc": "1.添加全局$store2.实现共享数据效果3.实现getters方法效果4.实现mutation方法效果5.实现actions方法效果6.模块化共享数据提取模块信息自定义vuex.jsindex.j"}, {"id": "6968691125716697118", "title": "骑虫历险记 01 ｜ 消失的scopeId", "desc": "复现 观察下面这段vue代码： 这个组件实现的功能是：渲染一个列表，点击load按钮，list字段从[]切换为[{id: 1}]。 代码中的List组件非常简单： 基于以上的代码，出现的问题是：在点击"}, {"id": "6844903544462508040", "title": "vuex 闲置状态重置方案", "desc": "大型单页应用（后面都是指spa），我们往往会通过使用状态管理器 vuex 去解决组件间状态共享与状态传递等问题。这种应用少则几十个单页，多则上百个单页。随着路由的频繁切换，每个路由对应的 vuex 中的状态将越来越多。为了做到页面的极致优化，我们需要将那些闲置的状态重置，以减小…"}, {"id": "6979616096802308127", "title": "Vue快速入门学习笔记（五） ", "desc": "十八、vue-router路由 1. 什么是vue-router Vue Router是Vue.js官方的路由管理器（路径跳转）。它和Vue.js的核心深度集成，让构建单页面应用变得易如反掌。包含的功"}, {"id": "6844904074094051335", "title": "💡（三）complier模板编译-vue源码动手写系列", "desc": "在上一篇文章，我们介绍了虚拟Dom的内容，创建vnode需要调用createElement去生成，但是在日常的开发当中，我们很少去写一堆复杂的createElement代码去描述页面，在Vue中通常是写一个template模板，而最终我们会把这个模板编译成一个渲染函数，用这个渲…"}, {"id": "6844904121988808718", "title": "如何记录验证element后台管理系统中表单（表格？）的修改痕迹", "desc": "最近接了个需求，要求我写一个表格，这个表格用户可以自由增加删除行以及修改行内的数据，输入的内容有一定的验证要求，同时记录下用户的操作，在上传数据的时候提示用户进行了哪些操作。如图： 这是表格中的内容，为数组对象，其中我们要记录修改痕迹的grade_list是不带id标识的，最终…"}, {"id": "6844903967265308685", "title": "【译】Vue.set实际上是什么？", "desc": "谈到Vue.set就要说响应式原理，所以得为你自己准备下这方面的理论知识。然而，一如即往，这并不难或者枯燥。准备点鳄梨和薯条，制作些鳄梨酱，然后我们再进入话题。 在一个Vue组件中，无论你何时创建一个data()功能属性，都会返回一个对象。Vue在组件背后做了很多事情，来使得它…"}, {"id": "6936771575110696991", "title": "VUE3 项目开发实战入门系列 （10.-单元测试）", "desc": "​ 测试是项目开发里一个非常重要的回归环节，完整的测试能为代码和业务提供保证，减少BUG的出现。 ​ 在前端框架的测试中可以分为3种类型，分别是单元测试、组件测试和端对端测试，这里我们主要讲解的是组件测试，组件测试某种意义上已经包含了单元测试在里面了，点击查看更多测试的介绍。 …"}, {"id": "6844903941629558792", "title": "Vue 源码剖析 —— 模板编译原理", "desc": "日常工作中可能大家或多或少的在 JS 中使用 HTML 渲染模板，特别是在 jQuery 时代，我们可以在模板中方便的使用 JS 表达式甚至是一些指令。在 Vue.js 中模板功能变得更为灵活，这依赖于其强大的模板编译功能。模板编译的主要功能是将模板编译成为渲染函数，而渲染函数…"}, {"id": "6844903497805070343", "title": "WEB直播技术入门及在 Vue 中应用 video.js", "desc": "最近总结的 web 直播在 vue 中的应用~"}, {"id": "6993324326053216264", "title": "《图解Vue3.0》- 第7节 模板语法-插槽", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 Vue 实现了一套内容分发的 API，这套 API 的设计灵感源自 Web Components 规范草案，将 <slot>元素作为承载分发"}, {"id": "6979098704380690469", "title": "基于el-tooltip二次封装的tool-tip-ellipsis全局气泡提示", "desc": "基于el-tooltip二次封装的tool-tip-ellipsis全局气泡提示 输出背景 el-select下拉组件中的el-option，通常有多个，需要遍历出来，也有做成滚动加载更多el-opt"}, {"id": "6847902216758493191", "title": "[译]Vue 3：2020年中状态更新", "desc": "我们的许多用户都在问这个问题：Vue 3到底何时才能准备就绪？我们无法给出确切的答案，因为预估软件的交付时间本来就是不准确的。作为一个非营利性项目，我们希望专注于编写优秀的软件，而不是按时赶工期。但这确实是一个漫长的等待，而且我们知道这些不确定性会导致计划使用Vue 3的项目变…"}, {"id": "6999615432198094879", "title": "封装elementui上传组件upload单个图片或视频上传", "desc": "vue + elementUi框架做后台管理系统时，使用到elementui中的Upload组件做单张图片或单个视频上传时。"}, {"id": "6844903951695872007", "title": "vue-cli脚手架搭建项目及Axios封装", "desc": "vue运行是基于node环境的,构建vue框架之前,需要确保node环境安装成功。 在node.js官网下载安装包，傻瓜式安装。 安装node.js后，就已经自带npm（包管理工具），不需要另外再进行安装npm了。 npm的服务器是外国的，所以有时候我们安装“模块”会很慢很慢。…"}, {"id": "6844903847660371982", "title": "vue-vue项目中mock.js的使用", "desc": "mockjs是用来模拟产生一些虚拟的数据，可以让前端在后端接口还没有开发出来时独立开发。我们可以使用真实的url，mockjs可以拦截ajax请求，返回设定好的数据。 这里主要讨论在vue项目中，使用axios发送ajax请求，mock.js模拟数据的流程。 在项目中新建moc…"}, {"id": "6983523761643323429", "title": "搞懂Vue的作用域插槽---从分析到案例演示", "desc": "这是我参与新手入门的第3篇文章 作用域插槽，简而言之，就是带数据的插槽，要求在slot上面绑定数据，供将来使用组件时使用。本文将通过案例分析，详细地介绍作用域插槽，快来看看吧~"}, {"id": "6957702418515623966", "title": "【中台】靓仔请留步，跟我一起撸中后台啊~（系列篇二：项目配置及依赖 ）", "desc": "`系列篇一` 中的 `Demo` 项目不会作为正式的项目，在写那个Demo项目时，`Vue3` 还没有出来。现在我们可以好好玩玩Vue3和TypeScript了。先来初始化我们的项目吧~~"}, {"id": "6992762038082600973", "title": "vue3.0 ts版项目配置axios", "desc": "./src/api 目录下需要 api.ts、status.ts、type.ts 三个文件。 ./src/api/api.ts 整体还是创建实例的方式，通过给实例添加请求和响应拦截，做对应处理。"}, {"id": "6991840365854605325", "title": "Vue实现简单汇率转换器优化篇 | 8月更文挑战", "desc": "Vue实现简单汇率转换器优化篇 | 8月更文挑战 前言 在上篇文章Vue实现简单汇率转换器中实现了在给定Map数据的条件下进行数据的查询，计算，展示等的操作。今天对这个小东西做了一些改进，数据通过访问"}, {"id": "6844904095594381325", "title": "40行代码把Vue3的响应式集成进React做状态管理", "desc": "vue-next是Vue3的源码仓库，Vue3采用lerna做package的划分，而响应式能力@vue/reactivity被划分到了单独的一个package中。 如果我们想把它集成到React中，可行吗？来试一试吧。 话不多说，先看看怎么用的解解馋吧。 可以看出，store…"}, {"id": "6991631410817663006", "title": "在vue中全局禁止按钮二次提交 | 八月更文挑战", "desc": "在vue中全局禁止按钮二次提交 最近在做后台管理系统中碰到一个问题，例如网络状态不好的情况下，用户可以连续点击保存按钮，最终造成数据多次提交的一个情况。 场景概述 处理场景：用户点击了保存按钮后，后端"}, {"id": "6844904130616492039", "title": "vue组件回调返回值，让你的代码更为简洁", "desc": "最近写公司业务代码的时候遇到这样一个需求，我写这块部分需要新增加一个弹窗，进行二次确认。使用的组件库是比较老的ant desgin vue 1.2.4。这个组件库是没有像elementUI的$confirm方式可以自定义html部分的。但是我的内容其实非常少。 缺点2：我本身是…"}, {"id": "6844903885476200461", "title": "vue 2.6 中 slot 的新用法", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 最近发布不久的Vue 2.6，使用插槽的语法变得更加简洁。 对插槽的这种改变让我对发现插槽的潜在功能感兴趣，以便为我们基于Vue的项目提供可重用性，新功能和更清晰的可读性。 真正有能力的插槽是什么？ 如果你是V…"}, {"id": "6942329716971929613", "title": "一键生成基于Vue3+Webpack5开箱即用的管理台", "desc": "互联网时代，形形色色的H5应用、小程序……各种C端B端业务都少不了中后台管理系统，市面上有antd、iview等各种UI框架组件库，但是一个管理台往往涉及到公司统一的登录、权限管理、统一的请求处理、数据管理、自动化测试、甚至还有国际化等场景，如果从零搭建，这些都是我们需要考虑的…"}, {"id": "6844903919965962254", "title": "Vue 动态改变css样式的方法总结", "desc": "在网页开发中，我们经常会遇到动态的改变某个元素样式的需求，在vue里如何实现呢？官网上其实写的很详细了，对象语法，数组语法等。我自己总结了在开发中，个人用的比较多的三种方式 这两种方式很像，区别在于，使用方法的时候，视图刷新，函数就会重新计算一遍值。计算属性，会把以前的值缓存起…"}, {"id": "6844903813313200136", "title": "vue表单验证你真的会了吗？组件之表单验证（form）validate", "desc": "童鞋们现在可能感觉还是没懂，没关系继续往下看。 为什么要用广播和派发呢。通常我们和业务没有关系的组件尽量不要使用vuex和bus(事件总线)。 下面我送上广播和派发的代码。我们在需要调用组件绑上this.$on('event',res=>())，通过派发和广播进行调用$emit…"}, {"id": "6983497502079057934", "title": "vue2.x VS vue3.x的自定义指令实现简单的v-model指令", "desc": "为了更好的了解vue2.x与vue3.x在自定义指令上面的差别，并简单的实现了一个v-model功能的自定义指令。"}, {"id": "6844903939289120782", "title": "手摸手 Webpack 多入口配置实践", "desc": "最近在做项目的时候遇到了一个场景：一个项目有多个入口，不同的入口，路由、组件、资源等有重叠部分，也有各自不同的部分。由于不同入口下的路由页面有一些是重复的，因此我考虑使用 Webpack 多入口配置来解决这个需求。 1. 目标分析 2. 准备工作 首先我们 vue init w…"}, {"id": "6990544334546272286", "title": "vue源码图解01-深入分析响应式原理", "desc": "vue从源码图解深入分析响应式原理，核心有observe、Observer、Dep、Watcher、defineReactive等。可以深入理解到$watch、$set、$delete等方法。"}, {"id": "6984061695844941838", "title": "Vue 异步更新机制", "desc": "前言 因为目前的项目使用的是 Vue.js, 最近也在看 Vue.js 源码，基于此做了以下总结和输出。本章主要是关于 Vue 的异步更新机制以及源码实现的分析。 dep.notify 根据Vue的响"}, {"id": "6881789130699702279", "title": "Vuejs2.x 的逻辑复用与状态管理", "desc": "可以看出来，mixin 是逻辑复用利器，但唯一的缺点就是，当记不清当前 mixin 中所有的方法属性时会不小心覆盖，所以 mixin 一般跟随项目，如果做为第三方公共包，一定要提供详尽的文档，不然就只能翻源码了。 混入仍然不解决不了状态传递的问题，业务中还是需要一层层传递。 更…"}, {"id": "6909665694741168142", "title": "vue3.0报错：Cannot find module ‘vue-loader-v16/package.json‘的解决办法", "desc": "    近期使用3.0写项目，安装依赖之后总会提示我没有找到vue-loader-v16，试过了很多方法都没法解决，无论是使用npm还是删除依赖重新下载，都没法解决这个报错。   报错信息：在网上找了"}, {"id": "6907943390877319182", "title": "vue响应式原理", "desc": "数据响应式数据响应式数据模型仅仅是普通的js对象,当我们修改数据试图更新,避免频繁dom操作,提高性能双向绑定数据改变试视图改变,视图改变数据改变数据驱动仅关心数据本身,不关心数据如何渲染到视图观察者"}, {"id": "6844903823400681485", "title": "关于vue响应式原理的一点理解：observer，watcher，dep", "desc": "一直以来都搞不清，或者是勉强理解过后又忘记了，observer, dep, watcher 这三个傻傻分不清，结合vue源码和自己的理解，特写此文记录一下。 Dep可以看做是书店，Watcher就是书店订阅者，而Observer就是书店的书，订阅者在书店订阅书籍，就可以添加订阅…"}, {"id": "6844903645645897736", "title": "JavaScript 事件循环详解(翻译)", "desc": "对于目前Web浏览器上最流行的脚本语言JavaScript。这篇文章为你提供了该语言基本的事件驱动模型的讲解，它与那些典型的有求必应的语言比如Ruby, Python, Java不同。在这篇文章中，我会为你解释这些JavaScript中并发模型的核心概念，包括事件循环，消息队列…"}, {"id": "6869220072074936334", "title": "Vue.js原理之nextTick实现", "desc": "tips:第一次发技术文章，篇幅比较简短，主要采取文字和关键代码表现的形式，希望帮助到大家。(若有不正确还请多多指正)nextTick作用和用法用法：nextTick接收一个回调函数作为参数，它的作用"}, {"id": "6943478944347717662", "title": "JavaScript实现一个链表结构源码分享", "desc": "刷题的时候看到一个关于链表的题目，写了一会发现写不出来，所以干脆就将链表的知识使用js重现一遍，这里写一个js实现的链表。this.this.this.this.//判断一下当前的链表是不是一个空的 this.if (this.this.let current = this.ge..."}, {"id": "6844903666709708808", "title": "vue双向数据绑定原理", "desc": "VUE双向数据绑定用到了文档碎片documentFragment、Object.defineProperty、proxy及发布订阅模式，下面来分别介绍一下这几个知识点，然后运用它们写一个JS原生的双向数据绑定案例。 创建一个新的空白的文档片段。DocumentFragments…"}, {"id": "6978769543648772104", "title": "vuex总结", "desc": "1.vuex的具体构成关系图 2.vuex的使用 2.1 创建store.js 在使用Vue CLI生成的项目时会让你选择store，选择了后会在页面给你生成一个store.js，这就是最初的stor"}, {"id": "6844903557208997896", "title": "Vue官网todoMVC示例", "desc": "这个示例是模仿官网示例样式和功能用我自己的方式写的，基本上没有看官网的源码，只参考自定义指令。让我们一步步来探讨一下。官网demo 把每条todo的对应状态都存在同一个对象当中，在操作改变todo状态的时候不会被统一处理，使得每条todo都有单独的状态。 在每个li元素上绑定了…"}, {"id": "6844904196538531847", "title": "从零写一个 Vue（六）组件化", "desc": "本篇是从零实现vue2系列第六篇，将在 YourVue 中实现 component。从这篇开始实现的内容，博客上讨论的就比较少了，不过啃源码肯定要啃完整。 文章会最先更新在公众号：BUPPT。 将 main.js 中的内容一部分提取到组件 helloWorld 中，在 Your…"}, {"id": "6844903581250748423", "title": "潜入理解MVVM＆Vue", "desc": "MVC即为Model + View + Controller的一种软件架构。View为前端视图，和用户直接打交道的；Model是数据模型，可以理解为数据库持久化存储；Controller即为连接Model和View之间的业务逻辑控制器。 当用户在View视图页面修改了数据，通过…"}, {"id": "6844904068003921927", "title": "vue实现GitHub的第三方授权", "desc": "最近在完善我的博客系统，突然想到从原本临时填写 name + email 进行评论改成使用GitHub授权登陆以发表评论。 首先，你需要一个GitHub账户然后前往GitHub developers，根据要求填写完成之后，会自动生成Client_ID和Client Secret…"}, {"id": "6844904069551620110", "title": "💡（一）响应式原理--vue源码动手写系列", "desc": "让项目中import Vue from 'vue'指向source目录的vue。 接下来的篇幅我们将逐步实现initData、initComputed、initWatch、$mount。 这一节的开始我们先要了解defineProperty，\b这里就不多介绍了。 初始化Vue实…"}, {"id": "6978849927321518087", "title": "Vue:造轮子-05:tabs组件", "desc": "Vue:造轮子-05:tabs组件 需求 点击 Tab 切换内容 有一条横线在动 设计API 新建Tab和Tabs组件，TabsDemo.vue 如何在运行时确认子组件的类型 问题： tabsDemo"}, {"id": "6909605467459321864", "title": "vue 精简教程（五)   vue-cli脚手架", "desc": "前言一、重要的部分？1、vue-cli脚手架1）VueCLI是一个基于Vue.js进行快速开发的完整系统其实就是一个配置好了的使用webpack完成打包构建的初始化工程，和我们前面讲的webpack打"}, {"id": "6844903874424209422", "title": "Vue生命周期钩子简介", "desc": "在本文中，我们来学习可用于 Vue JS 工作流程的所有hooks。 Vue JS 是一个非常先进的 JavaScript 框架，由尤雨溪和 Vue 核心团队创建，超过 230 个开源社区爱好者贡献了代码。 Vue 的用户超过 870,000 人，并且已经 在 GitHub 上…"}, {"id": "6844903687572160526", "title": "Nuxt升级2.0.0时出现的问题", "desc": "喜大普奔，Nuxt终于正式发布2.0了，最近趁热把博客从1.4升级到了2.0，并且用Typescript重构了下，可以点Jooger.me看下，在升级Nuxt过程中出现了一个小问题关于release2"}, {"id": "6844903682102788110", "title": "Vue 应用单元测试的策略与实践 01 - 前言", "desc": "本文主要尝试解决三个问题： 在 TDD 做完Tasking列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？ 在Vue应用的单元测试中，对UI组件和vuex store等测试的区别有何不同？颗粒度该细到什么程度？ 测试…"}, {"id": "6971421373344251917", "title": "vue2组件中data为什么必须是个函数而Vue的根实例则没有此限制？", "desc": "结论 Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致他们公用一个data对象，那么状态变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函"}, {"id": "6844903700176044040", "title": "Vue SPA 项目webpack打包优化指南", "desc": "最近一个小伙伴问我他们公司的Vue后台项目怎么首次加载要十多秒太慢了，有什么能优化的，于是乎我打开了他们的网站，发现主要耗时在加载vendor.js文件这个文件高达2M，于是乎我就拿来他们的代码看看，进行了一番折腾。最终还是取得了不错的效果。 对于网页性能，如何提升加载速度、等…"}, {"id": "6998083044976361502", "title": "vue3预渲染和服务端渲染（同构）示例讲解", "desc": "SSR 特别指支持在 Node.js 中运行相同应用程序的前端框架（例如 React、Preact、Vue 和 Svelte），将其预渲染成 HTML，最后在客户端hydrating"}, {"id": "6844903919290679304", "title": "深入剖析Vue源码 - 揭秘Vue的事件机制", "desc": "9.1. 模板编译 Vue在挂载实例前，有相当多的工作是进行模板的编译，将template模板进行编译，解析成AST树，再转换成render函数，而有了render函数后才会进入实例挂载过程。对于事件而言，我们经常使用v-on或者@在模板上绑定事件。因此对事件的第一步处理，就是…"}, {"id": "6844904014346207240", "title": "vue实现数字动态翻牌的效果（开箱即用）", "desc": "实现效果图原理将1~9的数字竖直排版，通过translate移动位置显示不同数字，使用transition控制transform属性有动画效果技术点实现代码（注释比较详细，不再赘述）数字背景图片"}, {"id": "6844903760494329870", "title": "Vue 系列二 之 猛龙行动之绝密代码", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 刚好，本文…"}, {"id": "6844904145380442119", "title": "vue实战项目：项目技巧总结(汇总成一篇了）", "desc": "这是因为当前 sass 的版本太高，webpack 编译时出现了错误，这个时候只需要换成低版本的就行，下面说一下修改方法，很简单，如下，找到 package.json 文件，里面的 \"sass-loader\"的版本更换掉 就行了。 然后在 main.js 引入 font-awe…"}, {"id": "6844903882024288263", "title": "面试官最爱问的vue(上)", "desc": "闲事少管，走路陈展。开始正题。 引用vue官网的一段话。 Object.defineProperty在本次项目中扮演着至关重要的角色。 通过Object.defineProperty来定义所有的属性，这些属性就可以拥有get/set方法。 用vue官网的一个🌰。当我在控制台输…"}, {"id": "6977643057671831566", "title": "vue配合echarts简单进行数据可视化开发02", "desc": "一、通用配置 title：标题组件 tooltip：提示框 组件 trigger：‘item’ | ‘axis’，前者表示数据触发，后者表示坐标轴触发； triggerOn：触发时机，mouseove"}, {"id": "6844903502196506631", "title": "聊聊Vue.js的template编译", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6844904094533074951", "title": "如何修复Vue中的 “this is undefined” 问题", "desc": "别担心，不只有你一个人，我也经常遇到这个问题很多次，接下我们一起来看看如何解决这个问题。 一个可能的原因是混淆了常规函数和箭头函数的用法，如果你遇到这个问题，我猜你用的是箭头函数。如果用常规函数替换箭头函数，它可能会为你修复这个问题。 我们再深入一点，试着理解为什么会这样。 毕…"}, {"id": "6970960193181974559", "title": "Vue patch过程（一）—— diff算法", "desc": "源码阅读Vue 整个patch过程， 介绍diff算法的整个过程，了解vue怎么把将虚拟节点怎么转变成真实节点"}, {"id": "6898575518804017160", "title": "如何开发一个Vue脚手架", "desc": "实现一个脚手架之前我们必须知道什么是脚手架？通俗来说脚手架就是帮我们自动完成一些重复做的内容，比如大名鼎鼎的Vue脚手架Vue-Cli,只需要执行一行代码就能帮我搭建好Vue环境的项目，它帮我们自动创建了一个Vue的开发环境项目，我们不需要每次都自己搭建环境了。 Yeoman是…"}, {"id": "6996310041854738445", "title": "vue 动画入门之小球飞入购物车", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 商品飞入购物车动画，是购物类 APP 常见的效果，比如美团外卖、饿了么外卖等，飞入的动画效果可以有多种方式来实现。 1、技术方案 第一种方"}, {"id": "6974257801862316069", "title": "无星的前端之旅（二十一）—— 表单封装", "desc": "背景 我们做的是后台类型的管理系统，因此相对应的表单就会很多。 相信做过类似项目的老哥懂得都懂。 因此我们希望能够通过一些相对简单的配置方式生成表单，不再需要写一大堆的组件。 尽量通过数据驱动。 思路"}, {"id": "6844903923778584589", "title": "vue-小爱ADMIN系列文章(一)：用Vue-cli3+mockjs 实现后台管理权限和三级菜单功能", "desc": "最近完成了我的小爱ADMIN后台管理系统基本功能,同时进行了页面整体布局和样式的全新改版。新增了系统权限功能的实现，同时觉得后台系统所有的菜单都左置，会限制菜单的扩展，因此我改进了三级菜单的显示。 根据用户登录的roles信息与路由中配置的roles信息进行比较过滤，生成可以访…"}, {"id": "6886844248126128135", "title": "Vue3.0系列——「vue3.0学习手册」第一期", "desc": "vite是尤大大开发的一款意图取代webpack的工具。其实现原理是利用ES6的import发送请求加载文件的特性。拦截这些请求，做一些编译，省去webpack冗长的打包时间。并将其与Rollup捆绑在一起用于生产。 在开发过程中没有捆绑。源代码中的ES Import语法直接提…"}, {"id": "6985417264761667620", "title": "Vue  svg-symbol 的使用步骤", "desc": "下载 svg 文件 引入文件 import svg from '@/assets/icons/xx.svg' 安装 svg-sprite-loader yarn add svg -sprite-loa"}, {"id": "6981370375485521950", "title": "请教一个vue3+vite跨域代理的问题", "desc": "项目使用的是vue3+vite+axios 问题： 配置vite代理 请求接口 浏览器查看请求 问题来了，浏览器里面的请求地址中间的 api 没有被替换掉，导致请求的地址不对，服务器就一直没有响应，知"}, {"id": "6985933420492750878", "title": "结合源码去理解Vue响应式原理", "desc": "1. 前言 本文主要是梳理一下vue中响应式的处理与实现，部分代码是经过删减或是自己理解的，并不等于vue中的源码 2. 了解一下MVVM 2.1 什么是MVVM？ MVVM是Model-View-V"}, {"id": "6844903648456081415", "title": "Vue UI：Vue开发者必不可少的工具", "desc": "随着最新的稳定版本Vue CLI 3即将发布，是时候来看看有什么新鲜有趣的特性了。基于整个Vue.js开发者社区的反馈而大幅度改良，该版本提供了很多以工作流为中心的工具。 我想会提升每一位Vue.js的开发者工作效率的特性就是Vue UI。一个可视化图形界面方便你去创建、更新和…"}, {"id": "6987364053970583589", "title": "【Vue源码学习】深入理解watch的实现原理 —— Watcher的实现", "desc": "秋招来袭，笔者最近正在学习Vue的源码，通过对源码的解读，结合常考的面试题，深入理解Vue的源码原理，并动手实现Vue的一些方法。该系列文章即为这项学习计划的总结和输出，后续将持续更新。。。"}, {"id": "7002184364062670879", "title": "vue3 响应式 借助Proxy 版代码解析", "desc": "Reactivity 响应式 1. object.defineProperty的缺点和vue2.0的hack 1.1新属性设置不上 正常来说，被监听的数据在初始化时就已经被全部监听了。后续新增的属性无"}, {"id": "6998445156068229150", "title": "三步编写一个Neumorphism风格的小时钟", "desc": "又到了自己编写组件的时节了 作为一名前端开发者，平时也是阔以没事可以写写自定义的组件，增加一下自己的阅历，实际开发中用到也可以通过CV大法去快速开发"}, {"id": "6999998404751261710", "title": "基于Vue实现跨表格（单选、多选表格项，单表格限制）相互拖拽", "desc": "今天，我们将使用Vue.js来实现一个跨表格相互拖拽。在开发这个业务之前呢，也调研了网上很多解决方案，但个人感觉不太符合现在做的这个需求。所以，压根就自己再开发一套，方便以后维护。"}, {"id": "7001837062554910728", "title": "你可能没用过的，VueRouter高级匹配模式", "desc": "所谓站在巨人的肩膀上，VueRouter使用这个模块作为路径匹配引擎。path属性作为路由核心属性之一，我们有必要仔细了解一下其匹配机制，以便我们在路由设计上更加得心应手。"}, {"id": "7005871026093424654", "title": "vue2.x反思与总结（持续迭代更新……）", "desc": "学习过程中的总结与反思，拓展深度。 本篇会持续更新与2.x版本相关联的知识点，从常见问题的结论到源码层面的实现，确保理解的深度。"}, {"id": "7000940642603892749", "title": "vue3按需引入Element Plus", "desc": "第一步：安装依赖 第二步：安装配置babel-plugin 第三步：在项目根目录创建babel.config.js（如果有则直接添加） 第四步: 在src下创建文件夹global，并在global文件"}, {"id": "6864324361621995533", "title": "学习Vue3.0，先从搭建环境开始", "desc": "vite是尤大大在今年新鼓捣出来的一个工具，尤大大对vite的描述是这样的: Vite is an opinionated web dev build tool that serves your code via native ES Module imports during …"}, {"id": "6844904041651109895", "title": "Vue3体验卡～", "desc": "也就是observe。这个observe的优势大家都能感觉到，就是方便，劣势就是性能，因为他这个东西本质来说就是所有的东西我都监听，其实这在大型应用来说就比较不舒服了，因为你控制不了，而且功能也比较多，消耗也就高 可能有朋友比较喜欢vue 2.x的装饰器写法，这里官方说明了，装…"}, {"id": "6844904097544405000", "title": "高级前端开发者必会的34道Vue面试题系列（一）", "desc": "提到MVVM，很多前端开发者都会想到Vue的双向绑定，然而它们并不能划等号，MVVM是一种软件架构模式，而Vue只是一种在前端层面上的实现，其实不单在Vue里，在很多Web 框架应用里都有相关的实现。MVVM模式到底是什么呢？要说到MVVM这种模式，则必须要提及另一种大多数开发…"}, {"id": "6971791486593531941", "title": "Electron+Vue3 MAC 版日历开发记录(9)——Vuex 使用", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️"}, {"id": "6844903981458653191", "title": "基于vue+vant搭建移动端通用架子", "desc": "开发一个H5的通用架子，让前端同学开箱即用，迅速投入战斗。 按照Vant官网推荐自动按需引入组件，同样，Vant官网中也有对Rem适配的推荐配置，按照官网说明的使用。需要注意的是postcss的配置中，autoprefixer下的browsers需要替换成overrideBro…"}, {"id": "6964530621079093261", "title": "Vuex 4 指南，使用 Vue3 的需要看看！", "desc": "Vuex 是 Vue.js 生态系统中必不可少的工具。但是新接触 Vuex 的开发人员可能会被诸如“状态管理模式”这样的术语所排斥，并且对他们实际需要Vuex的目的感到困惑。"}, {"id": "6978621084862005285", "title": "面试中的网红虚拟DOM，你知多少呢？深入解读diff算法", "desc": "深入浅出虚拟DOM和diff算法 众所周知，在前端的面试中，面试官非常爱考vdom和diff算法。比如，可能会出现在以下场景🤏 滴滴滴，面试"}, {"id": "6844903616101220365", "title": "你或许不知道Vue的这些小技巧", "desc": "用Vue开发一个网页并不难，但是也经常会遇到一些问题，其实大部分的问题都在文档中有所提及，再不然我们通过谷歌也能成功搜索到问题的答案，为了帮助小伙伴们提前踩坑，在遇到问题的时候，心里大概有个谱知道该如何去解决问题。这篇文章是将自己知道的一些小技巧，结合查阅资料整理成的一篇文章，…"}, {"id": "6987080258126086157", "title": "在Vue-cli中使用mock.js", "desc": "以我的方式分享一下，我们在开发中，需要后端提供api接口，然后拿到接口去遍历生成数据，渲染到页面上显示。在有的时候，还没拿到后端提供的接口时，前端可以自己模拟后台制作简单的json格式数据"}, {"id": "6988141757900800037", "title": "Electron+Vue3 MAC 版日历开发记录(33)——打包问题", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6999630222391771173", "title": "Vue3从0到1组件开发-业务组件：封装文章列表", "desc": "业务组件的定义 在现有的组件库中其实也可以看到这一分类，不确定背后的原因，但盲猜有些是定制的组件、有些是构思(脑补)的业务组件。 不过别人"}, {"id": "6844904146785533959", "title": "基于vue3.0.1 beta，搭建仿京东的电商H5项目！", "desc": "vue3-jd-h5是一个电商H5页面前端项目，基于Vue 3.0.0-beta.1 + Vant 实现，主要包括首页、分类页面、我的页面、购物车等。 ⚠️master分支是线上生产环境代码，因为部分后台接口已经挂了😫，可能无法看到实际效果。 进入刚才clone下来的项目根目…"}, {"id": "6998038537950429220", "title": "Vue 3 和 React 16.8 到底能多像", "desc": "很多人说二者越来越像了，那么它们到底有多像？哪里像？能像到什么程度？我想没有比列出代码对比更直观的方式了，毕竟 “Talk is cheap, show me the code.” 才是程序员的风格。"}, {"id": "6962017482353672228", "title": "深入介绍从options到Vue组件的几种方式", "desc": "Vue中大家关注最多都是Vue响应式原理，以及实现方法，反倒忽略了Vue组件的构造原理。如何从平时所写的options构造成组件的构造函数，期间转换流程有必要深入了解一下，不然就会踩一些不必要的坑。"}, {"id": "6997402283222761480", "title": "Vue3 + Electron + Element Plus + Typescript 项目搭建流程（超详细）", "desc": "最近有个需求，需要新起一个 Electron 的项目，既然现在都是 Vue3 了，那肯定要玩一玩呀，然后开始搜各种资料，踩了一些坑，把过程记录下来，一个是方便自己后面再查，还有一个是帮助大家少踩坑"}, {"id": "7002878353640259592", "title": "vue引入 Element  按需引入组件", "desc": "vscode 有时候控制台vue引入element有问题在cmd用管理员启动，或者vscode启动时用管理员启动试试。 参考： https://blog.csdn.net/weixin_4423139"}, {"id": "6844903667884097543", "title": "Vue.js的computed和watch是如何工作的？", "desc": "Vue的组件对象支持计算属性computed和侦听属性watch两个选项，但这两个属性用法有什么异同以及它们底层实现的原理是什么？本文将用例子结合源码来进行总结。 1.computed是计算属性，类似于过滤器,对绑定到视图的数据进行处理,并监听变化进而执行对应的方法，对这部分不…"}, {"id": "6895637829389385736", "title": "利用思维导图带你阅读Vue源码", "desc": "在这之前，偶尔的会去阅读Vue相关知识点的源码，比如看到一些面试：“nextTick的原理是什么？” ，或者是：“请说一下响应式的实现原理”，或者在开发中遇到了棘手的bug（耽误我下班啦），也就不得不去找资料 or 阅读相关源码啦，以上等等情况.... 大家也是不是跟我差不多？…"}, {"id": "6844903624531935246", "title": "一个Vue页面的内存泄露分析", "desc": "什么是内存泄露？内存泄露是指new了一块内存，但无法被释放或者被垃圾回收。new了一个对象之后，它申请占用了一块堆内存，当把这个对象指针置为null时或者离开作用域导致被销毁，那么这块内存没有人引用它了在JS里面就会被自动垃圾回收。但是如果这个对象指针没有被置为null，且代码…"}, {"id": "6933005298198118413", "title": "TS 加持的 Vue 3，如何帮你轻松构建企业级前端应用", "desc": "在如今被三大框架支配的前端领域，已经很少有人不知道 Vue 了。2014 年，前 Google 工程师尤雨溪发布了所谓的渐进式（Progressive）前端应用框架 Vue，其简化的模版绑定和组件化思想给当时还是 jQuery 时代的前端领域产生了积极而深远的影响。Vue 的诞…"}, {"id": "6882740003642966030", "title": "Vue 组件开发中的小技巧", "desc": "前言日常开发中，我们会用到很多第三方组件库，学习组件开发最好的方法就是看这些组件库的源码，并从中学到一些小技巧element-ui大家基本都用过，总结一下组件库中Tree和Collapse 用到的小技"}, {"id": "6844904191270322183", "title": "【vue 系列】开发组件、封装成vue插件、编写文档、配置gh-pages分支demo、发布npm包一波流", "desc": "你是如何界定要不要造轮子的？于我而言，将需要多处调用的重复代码封装成组件、插件，把繁琐的操作流程开发成提效工具，后续能简化工作量，提高工作效率，就值得造轮子。为业务封组件、封插件，为提效造工具，做有价值的事，才能实现自我价值。 我们先来看看，这次造的什么轮子，针对我们请假审批的…"}, {"id": "6844903984247865357", "title": "项目级，Vue-cli3+node多页面配置+性能优化", "desc": "对于vue多页面配置，可以说cli2-cli3，是一个从0到1的过程，想起cli2的不堪回首，cli3是香的不是一丁半点；虽然cli3本身提供了pages多页面的入口配置，但是想要灵活的根据配置去适应结构，还是需要一些操作，避免后期不停的修改；本文就配合node做一个灵活配置以…"}, {"id": "6997693095156400159", "title": "Vue3.0源码解析「reactive」篇 — 6.collectionHandler", "desc": "collectionHandler collectionHandler 定义了一系列将集合转变为某种(响应、浅响应、只读、只读浅响应)代理对象的拦截器； CollectionType 先来看看 col"}, {"id": "6967772574407688205", "title": "VUE3学习第四天 ---深入响应式原理（一）", "desc": "今天我们开始学习响应式原理，模拟实现一个toy响应式系统，深入的去了解vue3的响应式原理！ vue3响应式系统介绍 Proxy对象实现属性监听 vue3响应式系统采用，Proxy对象实现。在初始化的"}, {"id": "6986203871928385549", "title": "Vue中的$nextTick原理", "desc": "1. 前言 本文主要是梳理一下vue中异步更新的机制，其中会涉及到JS的运行机制，如果不太了解的，可以先看一下 JS事件循环。 2. 基本使用 3. nextTick的实现 3.1 异步更新的入口 数"}, {"id": "6938247508325842958", "title": "跨平台文档在线预览解决方案（五）-水印、防复制、在线编辑等", "desc": "最近很多童鞋问我，“预览功能挺好的，要是支持水印就完美了”。这是我自从基于腾讯X5开发Android原生插件（《跨平台文档在线预览解决方案（四））以来，听到的最普遍的心声。然而，不仅仅支持水印，还有回调返回总页数和当前页码，甚至还有在线编辑等功能。 在文档预览技术领域中，经过2…"}, {"id": "6968992317717872677", "title": "vue-自定义directive实现v-copy指令", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 注：以下是个人理解、如有不对还望指正！大概的效果 需求： 项目多个页面需要使用、点击按钮默认选中文本复制、用户只需按ctrl + v 粘贴 考虑到"}, {"id": "6963048999922171917", "title": "vue3相关最新技术栈项目实践", "desc": "vue3 + typescript + vite + element-plus + sass + axios + vue-router + pinia"}, {"id": "6984977229562249252", "title": "vue中使用svg图片（cli2.x、cli3.x、cli4.x配置）", "desc": "vue中使用 svg 图片（cli2.x、cli3.x、cli4.x配置） 。"}, {"id": "6844903666944573447", "title": "Vue.js从Virtual DOM映射到真实DOM的过程", "desc": "Virtual DOM的概念相信大家都不会陌生，Vritual DOM是相对与DOM(文档对象模型)来说的，MDN上关于DOM的定义：“DOM模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM的方法(met…"}, {"id": "6987677782012592141", "title": "给微信小程序设计一个Vuex玩玩吧，支持数据驱动视图变化！！！", "desc": "微信小程序并没有提供像 Vuex 或者 redux 这种全局状态管理机制的插件。让我们给微信小程序也设计一个 Vuex 来管理全局的状态吧！！！"}, {"id": "6991390768900341774", "title": "Vue 数据更新了但页面没有更新的 7 种情况汇总及延伸总结", "desc": "注意: 这里是我在学习react时发现了当修改引用类型数据时无法检测的情况 然后以前没有在vue中遇到这些情况 发现vue和react都是存在这样的情况的 1. Vue 无法检测实例被创建时不存在于 "}, {"id": "6844903496928477197", "title": "react都这么无情了，vue还是那么有义，4种父子组件数据双向传递大法", "desc": "自定义事件可以用来创建自定义的表单输入组件，使用 v-model 来进行数据双向绑定。看看这个：input v-model=\"something\" 这个我们直接用v-model像表单那样绑定就直接可以进行父子组件双向绑定了。在v-model的语法糖里封装了v-on:input …"}, {"id": "6844903911808040967", "title": "Vue CLI 3.x 与 2.x的区别", "desc": "在JavaScript或template/css(vue)中通过相对路径导入。这类资源会被webpack处理（不在public目录） 放在public目录或者使用绝对路径被导入的静态资源。这类资源会被直接拷贝，不会经过webpack处理 将预设配置写在vuerc的'preset…"}, {"id": "6966606592024576013", "title": "vue3学习（2）选项式API和组合式API的区别", "desc": "区别 Options API vue2中如何组织代码的：我们会在一个vue文件中data，methods，computed，watch中定义属性和方法，共同处理页面逻辑 优点：新手上手简单 -上图解释"}, {"id": "6844903667682770957", "title": "mpvue微信小程序-仿网易云音乐", "desc": "在尝试开发了一个微信小程序之，后发现有mpvue这么个东西可以来开发小程序以后就忍不住了，所以把小程序和我用vue开发过的版本结合修改以后，再尝试用mpvue+iview-weapp开发一个版本。 第二种：在所有页面组件内可以通过 this.mp.query 获取,要注意就是：…"}, {"id": "6867348995866361870", "title": "vuecli3改ssr，验证你的ssr是否成功", "desc": "概述文章主要是抄的别人的，主要是作为记录。先放大佬的文章地址：通过vue-cli3构建一个SSR应用程序基于vue-cli3SSR程序实现热更新功能怎么说呢，个人对于ssr有点执念。首先，我们知道ss"}, {"id": "6977643173195710478", "title": "vue/cli脚手架 4.5.12 兼容IE10+（包含ie10）", "desc": "项目中要兼容ie10+ 很难受 在此记录下 1. 首先在package.json中找到browserslist项，添加如下代码 默认是生产环境，如果需要开发环境可以自己配置。"}, {"id": "6913368050628558856", "title": "赶上Vue3 Composition函数集这班车", "desc": "本文主要目的是为了介绍 vue-reuse 仓库，它提供了一个 TS + Composition API、TS + jest以及vuepress的练手机会，也能够在练习的同时产出将来会用得上的Composition函数集。 reuse顾名思义就是重复使用，而我们的主要目的就是实…"}, {"id": "6844904047367946254", "title": "带你了解 vue-next（Vue 3.0）之 初入茅庐", "desc": "这几天，陆续学习了解了关于vue-next（Vue 3.0）的一些新特性，尤其是新的Composition API的用法。这套新的API中最重要、最核心的部分，恐怕就是实现响应式功能的这一块了。而且，这套响应式API不仅可以在vue-next环境下使用，也可以独立使用。 笔者在…"}, {"id": "6844903551446040590", "title": "Electron-vue开发实战1——Main进程和Renderer进程的简单开发", "desc": "前段时间，我用electron-vue开发了一款跨平台（目前支持Mac和Windows）的免费开源的图床上传应用——PicGo，在开发过程中踩了不少的坑，不仅来自应用的业务逻辑本身，也来自electron本身。在开发这个应用过程中，我学了不少的东西。因为我也是从0开始学习ele…"}, {"id": "6996243406133411848", "title": "Vue-2中svg-icon组件的使用方法", "desc": "理解svg-icon的工作原理 如何把它用到新项目中？ svg-icon是一个全局组件，在src/icons/index.js中定义并注册成立全局组件。 在main.js中引入了 它额外需要svg-s"}, {"id": "6844904029940629512", "title": "Electron+Vue跨平台桌面应用开发入门", "desc": "虽然B/S是目前开发的主流，但是C/S仍然有很大的市场需求。受限于浏览器的沙盒限制，网页应用无法满足某些场景下的使用需求，而桌面应用可以读写本地文件、调用更多系统资源，再加上Web开发的低成本、高效率的优势，这种跨平台方式越来越受到开发者的喜爱。 Electron是一个基于Ch…"}, {"id": "6844903734644834318", "title": "vue SPA项目，浏览器和nginx反向代理缓存问题解决实方案", "desc": "a.浏览器端在每次发布新的版本时候，总会出现因为单页面项目中index.html文件（200 ok from disk cache 不发送请求，直接取用了本地磁盘缓存）和服务端版本不一致的问题，导致用户不能及时更新，需要通过手动刷新来强制从服务端更新文件。 b.补充一下，服务端…"}, {"id": "6892317013734064135", "title": "Vue3开发踩坑", "desc": "本来以为可以通过watch()函数直接watch(()=>attrs.xxx)，结果是不行。这里官网有些，一开始自己没注意： 通过组件调用，没有问题。但是配置为vue-router项时会报错："}, {"id": "6844903988412809223", "title": "table 组件了解一下？", "desc": "国庆去了一趟西藏，那边的风景很赞👍，但是天天都会头疼😣，不禁感慨，还是写文章好啊✍，So，今天要和大家分享的是 table 组件的实现，是从 0 到 1 的实现哦，这个组件对于我们来说应该是挺复杂的一个了，看过那么多个初级组件，是时候装个叉了😏。 😂），然后就搜了一下，…"}, {"id": "6844904200162246669", "title": "学习一波Vue3新特性", "desc": "去年前端界最轰动的事无非是React Hook的发布，上到react-router、react-redux等生态库，下到React应用开发者都从class component开发方式积极拥抱Hook。那今年我认为最值得关注的是Vue3.0，目前我们可以从vue-next看到Vu…"}, {"id": "6898182484400275470", "title": "Vue3组件封装（TypeScript + Tsx ）—— 打地基", "desc": "前言基于vue-cli4.5以上的版本vue-cli安装我就不写了，网上一大把。官方安装教程新建项目时要选择vue3的模板哦！！！安装其他依赖安装TypeScript安装less预处理器修改目录结构初"}, {"id": "6844904169954869262", "title": "vue-router原理及其核心功能实现", "desc": "路由是什么?自从网站，web等诞生开始，路由就一直存在；在前后端分离之前，一般提到的路由都是后端路由；路由通过一个请求，然后分发到指定的路径，匹配对应的处理程序；它的作用就是分发请求，把对应的请求分发"}, {"id": "6977909672644706335", "title": "Vue3初始化过程", "desc": "createApp 你可以在 createApp 之后链式调用其它方法，这些方法可以在应用 API 中找到。 参数 该函数接收两个参数，第一个是根组件选项对象，第二个是将根prop传递给应用程序 从一"}, {"id": "6844903909253726215", "title": "Vue社区的路由解决方案：vue-stack-router", "desc": "vue-router 是 Vue 官方的路由管理器，用法简单、功能强大。但在移动端场景中，特别是 hybrid 项目，我们在使用中遇到了一些问题。 大部分页面都支持手势返回，比如说左滑返回。 因此在面向移动端的产品中，用户的操作习惯、产品的设计理念也大多趋同于以上几点。但我们从…"}, {"id": "6844903682501246983", "title": "通过一个案例理解 JWT", "desc": "JWT（json web token）是为了在网络应用环境之间传递声明而基于 json 的开放标准，JWT 的声明一般被采用在身份提供者和服务器提供者间传递被认证的身份信息，以便于从资源服务器获取资源。 JWT 一般用于用户登录上，身份认证在这种场景下，一旦用户登录完成，在接下…"}, {"id": "6888558610923110407", "title": "Vue2.0源码分析：Rollup构建，目录设计和整体流程", "desc": "本篇Vue2.6.11源码分析文章由观看Vue.js源码全方位深入解析视频，阅读深入浅出Vue.js书籍以及参考其他Vue源码分析博客而来，阅读视频和书籍请支持正版。 2013年7月，Vue.js在Github上第一次提交，此时名字叫做Element，后来被改名为Seed.js…"}, {"id": "6973678851658350606", "title": "Vue.js 源码（11）—— 优化器", "desc": "前言 前面我们学习了模板编译中的解析器，这次我们将学习优化器。 优化器 什么是静态子树？ 静态子树指的是那些在 AST 中永远都不会发生变化的"}, {"id": "6985804469850259493", "title": "一步步完善vuex4的commit, dispatch 的 ts语法提示", "desc": "vuex4的commit,dispatch似乎不支持直接语法提示 故在项目的store基于vuex的modules的情况下，对项目进行了改造 创建项目 使用vue-cli创建项目，勾选上ts和vuex"}, {"id": "6844903497800908807", "title": "前端面试之ES6篇（高产似母猪）", "desc": "这也是前端面试经常询问的问题，经常问你es6出现了哪些新的特性，平时又使用过那些。在编写此教程的时候，第一句话往往就是面试常常问到的地方，然后后面就是他的详细解释，面试要求的内容我会用*标记出来。写技术文档是真的累啊，虽然是看别人的文档，但是你得看很多，而且还得自己总结啊。所以…"}, {"id": "6844903637022425102", "title": "vue项目技术随笔", "desc": "最近都在做vue相关的项目，在公司推行前后端分离，重构以前的项目，真的好忙，一个项目接着一个，爬不完的坑，不说了，说多了都是眼泪。开始正文了！！！ 问题原因：在组件mounted钩子中调用的刷新页面内容，但测试发现这个钩子没有被调用。后来发现App.vue中使用了： keep-…"}, {"id": "6960480138525933599", "title": "vscode-router-file 插件首发", "desc": "前言 很早之前就看过antfu大佬给vscode团队提过关于vscode://协议的issue。 直到前2天看了slidevjs项目示例，给了我很大的启发。 我发现目前真的可以通过vscode 协议方"}, {"id": "6984975881898819621", "title": "Vue2.x项目骨架屏注入(下)", "desc": "vue-skeleton-webpack-plugin通过预渲染手动书写的代码生成相应的骨架屏，通过 vueSSR 结合 webpack 在构建时渲染写好的 vue 骨架屏组件，将预渲染生成的...."}, {"id": "6868257054676090887", "title": "实现一个 mini-vue", "desc": "实现一个简单的 Vue.js。用于理解 Vue响应式原理，妈妈再也不用担心我不会用 Vue了！ 实现mini-vue之前，先看看官网的描述。在Vue官网，深入响应式原理中，是这样说明的： Vue类负责把data中的属性注入到Vue实例，并调用Observer类和Compiler…"}, {"id": "6844903599735046152", "title": " Vue 父子组件数据传递( inheritAttrs + $attrs + $listeners)", "desc": "非父子组件的通信传递 Vue Event Bus，使用Vue的实例，实现事件的监听和发布，实现组件之间的传递。 基本是大部分的公司或者项目都是用前面两种，我司也不例外；好像曾经在官方文档看到过，vuex 适合用在大型的项目中。第三种方式我曾在我的毕设中用到过，其他地方我好像目前…"}, {"id": "6995349440336756766", "title": "vue使用webpack-obfuscator", "desc": "vue2.6 + vue-cli3 构建代码混淆 webpack-obfuscator git地址：https://github.com/javascript-obfuscator/webpack-o"}, {"id": "7000339697142595592", "title": "Provide/Inject + TypeScript 使用", "desc": "翻译来自： https://logaretm.com/blog/2020-12-23-type-safe-provide-inject 本文是一篇关于 provide/inject TypeScrip"}, {"id": "6844903917961084942", "title": "vue中Axios封装、API接口管理记录", "desc": "在Vue项目中，和后台交互数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。它有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御XSRF等。所以我们的尤大大也是果断放弃了对其官方库vue_res…"}, {"id": "6988486072397201444", "title": "使用vscode远程开发一个全栈Web项目", "desc": "基于Vue.js和Node.js开发一个全栈Web应用，使用PM2完成后端服务管理及日志管理，使用express读取IP获取位置信息。"}, {"id": "6844903663970828296", "title": "vue-markdown编辑器", "desc": "一款使用marked和highlight.js开发的一款markdown编辑器，除常见markdown语法外，支持快捷输入、图片粘贴、代码复制、全屏编辑、预览等功能。 使用起来简单方便，只需几行代码，即可在你的页面上引入一个markdown编辑器，编辑区支持像专业编辑器那样。 …"}, {"id": "6996284009890185223", "title": "前端小白不迷路 - 今天来介绍下Vue2的响应式原理Object.defineProperty() -下篇", "desc": "为什么一些数据必须要在data中先定义，后续使用this. 这个语法就可以拿到值或者定义值，比如拿到后端返回的数据，赋值给事先定义的数据或对象，块来一起了解下把~"}, {"id": "6844904201097576462", "title": "这些vue技巧，你值得拥有", "desc": "描述Vue在开发过程中的各种技巧，轻松且优雅地技术进阶，分享我在vue开发中积累的开发技巧总结，有些会结合使用环境或者是我的个人网站中的实例来说明"}, {"id": "6951645726329798687", "title": "VUE3.0有哪些改变，以及新特性 Composition API 的实现原理", "desc": "距离发布 vue3.0 正式版本已经有一段时间了，作为技术人员，随时保持技术同步是很重要的事情。本文带领大家看一看3.0对比2.x到底有哪些改变。"}, {"id": "6844903636888207373", "title": "5分钟学会Vue动画效果", "desc": "v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。 v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函…"}, {"id": "6967267078973685790", "title": "【Vue 技巧】自定义Vetur快捷代码块snippet", "desc": "如果通过官方指南Snippet来自定义代码块的话（根目录创建.vscode/vetur/snippets文件夹），不会生效。然后去插件设置开关也没用（偶尔也生效了，但重新打开又失效了）。不断网上找办法"}, {"id": "6990239769275940900", "title": "Vue源码解析：Vue编译过程的设计思路", "desc": "知识要点： Vue的挂载过程是怎样的？ 一个编译器由哪些部分组成？ Vue的整体编译过程是怎样的？ Vue编译过程的设计思路 概览 前面的章节已经提到过，在实例化Vue的时候，首先会经过选项合并环节，"}, {"id": "6979349314506063880", "title": "vue3--teleport传送api使用、组件之间的双向绑定、setUp中路由跳转", "desc": "这是我参与更文挑战的第28天，活动详情查看： 更文挑战 一、vue3--teleport传送api使用、组件之间的双向绑定、setUp中路由跳转"}, {"id": "6990151248284483591", "title": "Vue开发遇坑记--各模块发请求至不同的本地后端地址", "desc": "需求： 一个项目中不同的模块对应的后台本地地址不同，如何用一个配置好的axios来发送？ 举例： A 问卷模块的所有API发送至 8081； B 微信模块的所有API发送至 8086 ✅ 在开发环境下"}, {"id": "6998726715589525534", "title": "【知识】Uni-app-学习笔记 03", "desc": "Uni-app学习笔记系列 【知识】Uni-app-学习笔记 01 【知识】Uni-app-学习笔记 02 【知识】Uni-app-学习笔记 03 持续更新中........ uni中的事件 导航跳转"}, {"id": "6998725450914594847", "title": "【知识】Uni-app-学习笔记 04", "desc": "### 5、网络请求 在uni中可以调用uni.request方法进行请求网络请求 #### uni.request 在各个小程序平台运行时，网络相关的 API 在使用前需要配置域名白名单。"}, {"id": "6979267724195135502", "title": "前端开发：基于移动端的Vue项目的Loading使用", "desc": "这是我参与更文挑战的第30天，活动详情查看：更文挑战 前言 在前端开发过程中，常用的组件有必要做一下使用的总结，尤其是对于刚入门的前端开发者来说既有利于知识点的掌握，又有利于总结归纳方便后期使用查看。"}, {"id": "6844903668488093704", "title": "Vue项目预渲染机制引入实践", "desc": "周末想顺便把已经做好静态页面的webApp项目做一下SEO优化，由于不想写蹩脚的SSR代码，所以准备采用预渲染，本来想着网上有这么多预渲染的文章，随便找个来跟着做不就完了嘛，结果年轻的我付出了整个周末..... 这篇文章就记录一下最后是怎么配置的 T.T 1. 简介与使用场景 …"}, {"id": "6844903674116833287", "title": "聊聊我对现代前端框架的认知", "desc": "最近看到一篇国外的文章，说现代JS框架存在的根本原因是保持UI与状态同步、这其实与我这篇文章的思想是一致的，同时也认证了我对现代前端框架的认知是正确的。 现在前端界有三大框架横行，Vue，React，Angular，几乎是所有身为一名前端工程师所必备的一项技能。 现在的一些应届…"}, {"id": "6896007907050487816", "title": "VUE SSR初探", "desc": "在正式开始接触SSR之前，我们先来了解一下前端的发展史。在前端的发展过程中，经历过一下几个阶段： 单页面应用是目前使用最广泛的开发方式，页面内容由JS渲染出来，这种方式称为客户端渲染。 当我们使用SSR服务端渲染后，以后将会有多个客户端向服务端请求首屏，为了使每个用户的数据、路…"}, {"id": "6844903961837699079", "title": "【Vue原理】Diff - 源码版 之 Diff 流程", "desc": "能不移动，尽量不移动。不行就移动，实在不行就新建"}, {"id": "6914545381216894984", "title": "[vite-plugin-imp] 一个自动导入组件库样式的vite插件", "desc": "一个自动导入组件库样式的vite插件。 只需使用如下所示的组件，组件样式就会自动注入。"}, {"id": "6972831720919957512", "title": "vue数据改变页面不刷新? 对vue响应式的理解", "desc": "在做项目的时候，需求是一个动态表单的功能。编写过程中，当我在JS中改变item.value的值时，页面的表单没有刷新，表单的输入框无法输入内容。"}, {"id": "6997788259640147981", "title": "Vue.nextTick源码解析", "desc": "Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。并且当一个watcher被多次触发，只会被推入队列一次，然后在当前事件循环"}, {"id": "6941009454376681479", "title": "探索 Snabbdom 模块系统原理", "desc": "近几年随着 React、Vue 等前端框架不断兴起，Virtual DOM 概念也越来越火，被用到越来越多的框架、库中。Virtual DOM 是基于真实 DOM 的一层抽象，用简单的 JS 对象描述真实 DOM。本文要介绍的 Snabbdom 就是 Virtual DOM 的…"}, {"id": "6844903561831120909", "title": "VUE 完整项目构建 (1) -- 初始化", "desc": "使用 vue-cli 构建大型单页应用：vue.js 的脚手架工具。 执行下述代码，即可完成项目基础构建（已配置好 webpack、依赖包的安装、基本目录的生成）。 1. scripts：编译项目的一些命令 例：执行 npm run dev，即执行 scripts 中对应的 n…"}, {"id": "6866788394614620168", "title": "vue所有组件传值方法的应用", "desc": "存在的问题：1. 页面刷新数据丢失；2.只在当前用户的浏览器中存在"}, {"id": "6972704942695907358", "title": "Vuex系列(三) -- store.commit和store.dispatch的区别及用法", "desc": "这是我参与更文挑战的第12天，活动详情查看： 更文挑战 Vuex 是什么？ Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证"}, {"id": "6981743922072059941", "title": "从vue1到vue3及周边插件分析————手写简易vue1、及分析原理", "desc": "vue到现在已经出到了3的版本，我们一步步回顾一下它的发展。以及分析核心原理。 vue1是没有虚拟dom的，在这个版本我们只关注相应式。在vue1中实现数组双向绑定的是Object.definePro"}, {"id": "6987745699399991304", "title": "手动封装一个加载更多组件 ( Vue3 )", "desc": "手动封装一个加载更多组件 ( Vue3 ) 一个独立的全局组件，如果这个组件可见，通知下一页加载数据，如果加载成功又会被挤到最下边不可见"}, {"id": "6844903860167770119", "title": "【vue-page-stack】Vue页面堆栈管理器", "desc": "由于重度使用了Vue全家桶在web App、公众号和原生Hybrid开发，所以很自然的会遇到页面跳转与回退这方面的问题。 曾经在查看cube-ui的例子的时候，发现他们的例子好像解决了页面缓存的问题，我借鉴(copy)了他们的处理方式，升级了一下，使用CSS和嵌套route的方…"}, {"id": "6844903796426932232", "title": "「从源码中学习」彻底理解Vue选项Props", "desc": "props 是通过 defineReactive定义的，此时虽然是响应式数据，但没有进行深度定义。 重新打开观测开关，避免影响后续代码执行。 感悟：相比分析源码，理解后写成博客更难。用文字讲清楚一件事可比敲代码难多了。"}, {"id": "6844903590750846990", "title": "Vue.js 源码解析 1 - 响应式原理", "desc": "系列文章的第一篇. 注释过后的源码地址 lets-read-vue: https://github.com/wendzhue/lets-read-vue."}, {"id": "6922314649236930567", "title": "Vue 3.0 Composition-API基本特性体验", "desc": "setup() 函数是 vue3 中专门为组件提供的新属性，相当于2.x版本中的created函数,之前版本的组件逻辑选项，现在都统一放在这个函数中处理。它为我们使用 vue3 的 Composition API 新特性提供了统一的入口,setup 函数会在相对于2.x来说，会…"}, {"id": "6894992457818357767", "title": "Vue 3.0初体验", "desc": "vue3.0特性全面刨析新特性:Performance:重写了虚拟Dom的实现（跳过静态节点，只渲染动态节点）updata性能提高了1.3-2.0倍SSR性能提高了2-3倍Treeshaking：可以"}, {"id": "6844904137755197447", "title": "移动端列表滚动解决方案之better-scroll", "desc": "1、基本使用1.1、npm安装及使用better-scroll托管在Npm上，执行如下命令安装：HTML基本结构导入及初始化2、选项配置2.1、在实例化better-scroll时的第二个参数中进行选"}, {"id": "6908253785265537032", "title": "Mockjs随机生成浅色图片 | 十六进制颜色码调色大法", "desc": "为了在期末答辩场上“一展雄风”，在我一番研究之后，终于搞出了mockjs生成浅色图片的方案。 要想做出心仪的调调，首先要知道十六进制颜色码(#eeeeee)的原理。 十六进制颜色码由 ‘#’和3个16进制数相连组成。 我们知道，任何颜色都能通过红绿蓝三基色通过特定的比例调和而成…"}, {"id": "6844903605976170504", "title": "前端优化的一些小技巧", "desc": "减少HTTP请求次数或者减少请求数据的大小1、采用CSS雪碧图（CSSSprit/CSS图片精灵）技术，把一些小图合并在一张大图上，使用的时候通过背景图片定位，定位到具体的某一张小图上2、真实项目中，"}, {"id": "6844904041613361160", "title": "如何实现Vue组件化", "desc": "通过共同的祖辈组件搭桥，$parent或$root。 由于嵌套层数过多，传递props不切实际，vue提供了provide / inject API完成该任务。 provide：包含一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。 injecct：一个字符串数组，或…"}, {"id": "6844903840014155790", "title": "vue项目拖拽排序", "desc": "我用的是vue-slicksort拖拽组件，这是一个功能强大的可拖拽的vue.js组件。 它可以自动滚动，锁定坐标系。支持拖拽时，流畅的动画效果。可以支持水平，垂直或者网格的拖拽。支持触摸。"}, {"id": "6927644914217910285", "title": "Vite中使用ArcGIS API for JavaScript 4.18", "desc": "这篇文章将会介绍如何使用在使用Vite初始化的vue3项目中使用ArcGIS API for JavaScript 4.18来进行GIS项目开发。 1. ArcGIS API for JavaScript 4.18 简介 2. Vite简介 Vite是由尤雨溪开发的Web开发工…"}, {"id": "6844904071158202376", "title": "Vue实例$mount", "desc": "Vue实例挂载的实现$mount重写原型上的$mount方法如果el指向body或者html根节点则报错判断当前实例有没有定义render函数,如果没有就去取template,通过compileToF"}, {"id": "6844903640423989256", "title": "vue.js 实践总结（二）Render 函数", "desc": "上一篇说了项目搭建和结构，这篇说说vue 的render 函数，比较核心的概念。去年写过一点react，所以知道render 函数是用来创建虚拟dom 的，那个时候写 jsx 还是不亦乐乎的。列出几个问题作为这篇的结构： 这个问题是由于当前写的组件没注册为vue 组件，或者组件…"}, {"id": "6949366025829744677", "title": "基于Vue Cli4搭建Vue3 TSX移动端项目（三）", "desc": "我们目前的生产环境使用的k8s，会用到docker去发布前端的代码，所以这里我用到了express作为项目的启动服务。本篇主要讲述3个点：资源上传CDN、express启动服务、Dockerfile"}, {"id": "6959185193538158606", "title": "【前端工具】【scrolltrigger页面滚动侦测】", "desc": "滚动检测可以用DOM提供的Intersection，但资源耗费太高。 知识点 scrolltrigger DOM Element 使用 1. 安装 2. 引入 3. 检测 需求是探测一块区域，并触发动"}, {"id": "6844904182017687566", "title": "Vue3.0版本快速入门并实现基础组件通信", "desc": "相信关注我的小伙伴们已经彻底掌握了Vue3响应式原理的底层变化，今天我们来快速尝鲜Vue3.0的最新beta版本。 我们可以访问github：https://github.com/vuejs/vue-next，查看最新的Vue3.0代码，截止今日（2020年6月6日）最新版本为…"}, {"id": "6898998468308795400", "title": "vue合并单元格合并--多列", "desc": "一.多列合并1.在el-table中添加:span-method=\"objectSpanMethod\"属性来控制合并单元格，如下图2.合并代码，每一列都要设置一个不同的key，这样可以防止合并的时候上"}, {"id": "6844903506772508680", "title": "Vue响应式原理源码浅析", "desc": "先大概说下Vue响应式实现的原理。 Vue的响应式原理是通过“观察者/订阅者”模式实现的。 首先，Vue会给data及data下的数组、对象循环调用Object.defineProperty方法来设置getter和setter，以此来拦截data的赋值和取值。也就是说，当我们赋…"}, {"id": "6844903510710943752", "title": "500行代码实现迷你版vuejs，麻雀虽小，五脏俱全", "desc": "最近看vuejs v1.0 的源码，萌生了能不能自己实现一个vuejs的想法，于是就有了这个迷你版的vuejs。几乎所有的代码都是我自己重写的，但是在写的过程中完全参照vuejs，所以文件组织，生命周期以及类名方法名等都几乎一样。如果你想学习vuejs源码，这个项目将会很有帮助。"}, {"id": "6844903743536758791", "title": "如果你习惯在Vue里使用css简写属性，记得避开这个坑", "desc": "然后用一个按钮（或者任何方式）将样式换成下面的样式, 一个1px的绿色边框，和1px的红色右侧边框。 我们期望的结果应该是右侧边框是红色的，其余三边的边框是绿色的，但实际结果却是所有边都是绿色的， 这里已经出现了问题, 然后再点击按钮，将样式切换回去， 此时期望的结果应该是跟一…"}, {"id": "6844903590666960903", "title": "前端开发碎碎念", "desc": "2333，怎么都是关于Vue的问题。。。我真没黑Vue开发者，不过也可以看出，Vue的小白受众的确比较多。 现在基于Vue，React的SPA单页应用开发，都倾向于采用webpack的模块化构建方案。可能大多数人，开发一个项目，会使用脚手架工具（vue-cli, create-…"}, {"id": "6875984478158716942", "title": "VUE计算属性和侦听器", "desc": "但是设计他们的初衷时用于简单的运算，在模板中放入太多的逻辑会让模板过重且难以维护，此时就可以考虑计算属性和监听器。 从上面的代码你可以发现使用watch获取totalScore需要监听两个值而computed一个函数就返回了。下面我们来对computed和watch做一个对比：…"}, {"id": "6844904105542959118", "title": "Vue-cli+Element+vue-cropper裁剪头像", "desc": "向FormData对象附加File或Blob类型的文件,使用append()方法时，可以通过第三个可选参数设置发送请求的头指定文件名。frm.append('file',data,this.filename)"}, {"id": "6844903602469732359", "title": "前端路由", "desc": "后端有后端路由，根据路由返回特定的网页，代表者是传统的mvc模式，模板引擎+node。前端也有前端的路由，我们用三大框架做spa的时候，总是和路由离不开关系。主要有两种方法：基于哈希路由、基于history #后面的内容是网页位置标识符，一般是锚点<a name='xx'>或i…"}, {"id": "6844904190028808205", "title": "VUE项目性能优化-实战-案例记录", "desc": "v-if是 真正 的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。 v-show 就简单得多， 不管初始条件是什么，元素总是会被渲染，并且只是简…"}, {"id": "6844903520475316237", "title": "Stylelint in .vue", "desc": "如果说js的代码检测和规范工具在jslint，jshint之后，你肯定听说过eslint。同eslint对js代码校验规则一样，stylelint也有一套类似的处理系统. 3.在工程的根目录下建立stylelint.config.js文件，将以下内容复制进去。 5.控制台执行 …"}, {"id": "6980232637625401352", "title": "计算属性和虚拟DOM的入门知识点", "desc": "### 1、计算属性 > 复杂逻辑，模板难以维护，这时候计算属性就出现了，将部分模板中复杂的不适合写入的表达式放到计算属性（`computed`）中，也使得项目容易维护。 - 特点1：计算缓存和met"}, {"id": "6908630401464418317", "title": "我们为什么选择VUE来构建前端", "desc": "很多使用过VUE的程序员，对VUE的评价是“Vue.js兼具angular.js和react.js的优点，并剔除了它们的缺点”。那么，他真的值得这么高的评价嘛?Vue.js的创造者是一位杰出的中国人-"}, {"id": "6943053588100825095", "title": "探索Vue响应式API之toRefs", "desc": "先看toRefs函数。这里传入进去的counter因为调用了reactive，所以是一个proxy，也就是vue中所说的响应性对象。toRefs函数首先判断传入进去的对象是不是Proxy，如果不是将会"}, {"id": "6988041389435486238", "title": "Vue响应式原理的简单模型", "desc": "本文从观察者模式入手，简单介绍Vue响应式的简单原理，并通过自己实现一个简单版Vue的方式介绍一下Vue2.0和Vue3.0响应式的简单模型。"}, {"id": "6847902225033854990", "title": "VUE-入门笔记3-Vue-cli", "desc": "一定是在main.js里面， 这是我们逻辑入口文件。 全局注册的组件 ，在任何地方都可以使用。 插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 渲染一个“元组件”为动态组…"}, {"id": "6988034920845148167", "title": "Vue前端路由", "desc": "1. 路由的基本概念与原理 1.1. 路由 路由是一个比较广义和抽象的概念，路由的本质就是对应关系。 在开发中，路由分为： 后端路由 前端路由 1.1.1. 后端路由 概念：根据不同的用户 URL 请"}, {"id": "6844903657893429261", "title": "Element源码分析系列2-Container(布局容器)", "desc": "它是一个3元运算符，首先判断this.$slots&& this.$slots.default,如果不存在直接返回false，不存在的情况就是子元素为空。this.$slots是组件的实例属性，组件是可复用的Vue的实例，和 new Vue()一样是实例，因此有以下属性 因此这…"}, {"id": "6946452909588480007", "title": "vue命名规范", "desc": "views 文件夹下面是由 以页面为单位的vue文件 或者 模块文件夹 组成的，放在 src 目录之下，与 components、assets 同级。"}, {"id": "6988025006655537188", "title": "Vue中插槽的基本使用", "desc": "1.1 作用 让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于父组件 ===> 子组件，分类：默认插槽、具名插槽、作用域插槽 2.1 基本使用 2.1.2 默认插槽 2."}, {"id": "6844903514011861006", "title": "用 Jest 测试 JavaScript 应用", "desc": "Jest 是 FaceBook 用来测试 JavaScript 应用的一套测试框架，这些应用当然也包括了 React 应用。它的优点之一是自带了对 React 的支持，同时也很容易支持其它框架。 从最简单的开始，我们可以看看如何用 Jest 测试纯 JS 项目。"}, {"id": "6844903629804011533", "title": "vue-router 源码：实现一个简单的 vue-router", "desc": "通过上篇，我们知道前端理由的两种实现方法，Hash 路由与 History 路由，并且用它们分别实现了一个前端路由。 接下来我们就将 Vue 与 Hash 路由结合，实现一个非常简单的 vue-router 吧。 这里会有 router-link 和 router-view 两…"}, {"id": "6987955720222146597", "title": "聊聊关于Vue的动画效果", "desc": "1.1 动画属性实现 通过自己动手写原生animate,借助Vue的transition标签来实现效果 xxx.vue 2.1 过渡属性实现 通过写Vue定义好的样式（v-enter,v-leave等"}, {"id": "6921893546119135240", "title": "为什么 Vue3.0 要重写响应式系统", "desc": "那么接下来，我就尝试拆解一下这个面试题了，提取其中的知识点。"}, {"id": "6844903711265783816", "title": "Vue 使用 Axios 发送请求的请求体问题", "desc": "后来经过调试发现是因为 请求体内 Form Data 和 Request Payload 的问题。后台对这两者的处理是不一样的，就会导致我们拿不到数据。 给服务器发送请求时，axios默认会用Requset Payload发送参数，但后台是以Form Data方式处理的，所以会…"}, {"id": "6844903970280849416", "title": "如何实现一个通过js调用使用的消息提示组件（Vue）", "desc": "在项目开发过程中可能我们习惯了使用各种现成的UI库,它可以帮助我们快速的完成项目开发,例如我们在项目中经常使用到的Toast、Message提示组件，我们通常只需要通过js来调用就可以使用了，和我们平常使用组件的方式（import导入、components注册）并不一样，那接下…"}, {"id": "6844904025725337614", "title": "[Nuxt 系列 08] Nuxt Plugin：为应用加入第三方统计代码", "desc": "只需要把它插入到网站的每个页面之中，用户每次访问页面就会执行脚本，并获取一个 js 文件，继而发送请求进行必要的数据收集工作。 每一次进入新的页面都将产生上图所示的 4 个 http 请求，分别代表从上个页面的离开，在新页面加载统计代码，代码加载后执行并发送当前页面的统计信息。…"}, {"id": "6844904194256683015", "title": "手摸手教你搭建前端报错收集系统Sentry(下)", "desc": "上回说到，上传了sourseMap后还存在一些问题，比如开发调试的时候，报错也会被收集，那么多错，我看的岂不是头都大了，同时开发时报错不会再显示，就会为开发造成困扰，这次我们着重解决这些问题。 至此我们就已经做到了只有正式环境会生成.map文件并上传至服务器上。但此时有一个问题…"}, {"id": "6844904003541663757", "title": "Element-UI（2.11.1）  构建流程", "desc": "如果你对上面存在问题存在疑问，或者下面的内容，可以帮助到你一点点。 我们可以在很多地方应用了这个文件去参与Webpack、nodejs脚本的自动化构建流程，比如自动生成文件、自动生成多入口等等。。 一个组件库，最重要的是组件库的源码。 ElementUI的组件库源码主要存在于p…"}, {"id": "6844903763312902151", "title": "移动端js模拟截屏生成图片并下载功能的实现方案+踩坑过程", "desc": "一. 项目中有需求如下： 二. 踩坑思路： 三. 实现流程： 四. 下面逐步说明： 五. 优化点 六. 最后说一下在ios上面碰到的情况 1. html2canvas版本问题： 2. canvas画出的图片过大，导致canvas.toDataUrl()在ios上运行被系统强行阻止"}, {"id": "6953867516682698766", "title": "Vue3源码解析，实现mini版Vue3", "desc": "距离Vue3正式发布已经大半年时间了，在过去的三四月份的前端面试中Vue3已经是Vue框架必问的点了，如果你还没有看过Vue3的源码还不赶快更着作者一起来看看。"}, {"id": "6844903824704929799", "title": "Vue中后台鉴权 - 自定义指令实现权限颗粒化", "desc": "因为项目的后端接口部署在easy-mock上面，所以接口偶尔会挂掉，如果出现登录网络错误，肯定是easy-mock挂了，过段时间就好(感谢easy-mock的开发者以及维护者)借用大佬的一张图，侵权立"}, {"id": "6898673337749700622", "title": "虚拟dom和diff算法", "desc": "本文章原生编写.模拟vue中render和更新dom的diff算法. 通过render函数把虚拟dom转化为真实dom渲染到浏览器. 通过新旧虚拟dom的更新(diff算法). 通过patch打补丁更新dom渲染. 创建完虚拟对象,创建render函数把虚拟dom渲染成真实do…"}, {"id": "6844903650360295431", "title": "在vue里添加好看的lottie动画 (^_^)", "desc": "为什么用lottie★~★1.能让你的程序不那么单调2.能让一些有审美强迫症的同学好受一点3.网上有丰富的资源点我进入lottie资源网站引入lottie库（>.<）在vue中引入lottie非常非常"}, {"id": "6844903934377590792", "title": "Vue同构赋能之 NUXT 篇", "desc": "但是相应的，Nuxt的入侵性是特别高的，我们需要理解Nuxt的思路，才能发挥它的优势。"}, {"id": "6887884087915184141", "title": "Vue SSR 性能优化实践", "desc": "估计大部分读者对标题中的性能优化更感兴趣，可惜我分享的重点其实更多在于实践。实践有深有浅，下面介绍的时候会存在比较大的侧重。当然，篇幅不代表难易程度，考虑到不少信息已经有非常棒的公开资料，对这一部分我只会简单提起关键词，希望能起到抛砖引玉的作用。 本次分享围绕着 Vue SSR…"}, {"id": "6844904181719891976", "title": "vue路由权限校验", "desc": "做后台系统的时候，难免会有用户权限的判断。admin可以查看全部菜单，user只能查看部分菜单。 一开始接触这个需求的时候，完全是纯前端做的。在配置路由的时候，加一个roles的属性，通过判断用户的roles是否与路由的roles属性相匹配来作为显示隐藏的依据 这样做确实可以实…"}, {"id": "6991474528438190110", "title": "详解Vue的Diff算法", "desc": "看到这个标题是不是有点激动？终于轮到这个哥中哥出场了。 众所周知，Vue 的 Diff算法 灵感来源于 snabbdom，snabbdom 这个单词来源于瑞典语，意思为速度。"}, {"id": "6844903604437041160", "title": "HTML5拖拽API实现vue树形拖拽组件", "desc": "因业务场景需要一个可拖拽修改节点位置的树形组件，因此动手撸了一个，乘此机会摸了一把html5原生拖拽。近期有时间将核心部分代码抽出，简单说下实现方式。 vue组件允许在它们自己的模板中调用自身，因此可以形成树形结构，在组件中必须填写唯一的name。 这里将ondragstart…"}, {"id": "6954137869141164068", "title": "手写mini 版 vue 响应式框架", "desc": "自己手撸的一套简易的 vue 框架,简单实现了 click model 文字模板编译功能. 可以直接测试 欢迎指正,后期会加上教学注释"}, {"id": "6844903967361613832", "title": "Vue中JSX的基本用法,以及如何使用JSX二次封装Element UI的Table组件", "desc": "JSX是React出的一种对JavaScript的语法扩展。 在Vue中大多数情况推荐使用模板语法，通过template中的Vue指令进行快速开发。但是template也是存在一些缺陷的，扩展难度大，造成逻辑冗余。这时候我们就需要JavaScript的完全编程能力，结合rend…"}, {"id": "6844904174769946637", "title": "探究SEO与VUE首屏渲染及其解决方案", "desc": "1. SPA单页面应用 首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后再渲染页面。 根据这几个缺点，我们便又引出了接下来讨论的两个主题，SEO和SSR，先谈谈SEO。 2. SEO搜索引擎 搜索引擎优化。SEO是一种通过了解搜索引擎的运作规则（如何…"}, {"id": "6920489568282083342", "title": "Vue nextTick的实现原理", "desc": "以上代码有删减，vue中因为需要兼容多平台，写了web weex nodejs 的兼容写法，但是逻辑一样，主流程也一样，其中的精髓在于使用浏览器的setTimeout 微任务的特性，实现nexttick的队列。"}, {"id": "6844903780840898574", "title": "轻量级滑块Swiper插件发布（仅3kb）", "desc": "以上是最初需要的结构：一系列元素包裹在两个容器中。 在每个swipe-item可以自定义你想要的内容。初始化Swiper只需简单一行代码，传入swiper的最外层DOM即可，如下所示： Swipe现在兼容所有浏览器，包括IE7 +。 Swipe最适合支持CSS变换和触摸的设备，…"}, {"id": "6871796816032038920", "title": "vue+node.js手把手教你搭建一个直播平台（三） 前端界面初步切图", "desc": "上一期，帅气的小羽给老铁们介绍了直播平台的项目的前端框架的搭建，这期就让小羽带大家切图，没错啦，就是老铁们心心念念的切图啦。 好了，正式开启本期教程。 没错，就是它们的头部导航栏都是一样的，而vue中一个很重要的概念就是组件。什么是vue中的组件，小羽的个人理解就是一个小的功能…"}, {"id": "6844903504595648526", "title": "在百度地图打点后自动生成geojson的工具", "desc": "做一个城市（或者国家）的地图，里面有多个区域，每个区域点击后有联动的数据展示。 何况最近echarts 关闭了地图信息的下载入口。 因此做了这个工具，手绘地图，自动生成geojson 格式的文件供下载。 如果有需求就开源。"}, {"id": "6844903810603679757", "title": "前端曝光数据埋点——Intersection Observer+vue指令", "desc": "在电商产品中（可以打开你的淘宝、天猫、京东App），通过对商品的曝光进行数据埋点，就能反推出用户的行为和交互习惯，从而优化推荐和搜索算法以及交互，最终的目的当然是为了增加用户购买力。 这两种办法都能用，但是getBoundingClientRect这个API是会引起页面回流的，…"}, {"id": "6844903638213591053", "title": "[小程序] mpVue 踩坑", "desc": "1. mpVue与vue生命周期的区别 mpVue支持vue的生命周期、小程序的生命周期，常用beforeMount、mounted、onShow、onUnload。在beforeMount的时候，其实已经是在小程序前几个生命周期onLoad、onReady、onShow之后了…"}, {"id": "6960953125117263886", "title": "仿写vue依赖收集笔记", "desc": "仿写vue依赖收集笔记 1. 基于发布订阅模式。 2. 创建一个Observer来劫持所有属性，充当‘发布者’角色，通知变化。"}, {"id": "6923934636926042126", "title": "【Vue3】CompositionAPI思考与总结", "desc": "最近公司新项目启用了vue3+element-plus+webpack（暂未使用vite），最大的改变是CompositionAPI，这里记录一下使用的一点经验。 使用CompositionAPI进行代码抽离与复用。因为一开始都会有个不熟悉到熟悉的过程，如果语法都还没有写熟练的…"}, {"id": "6995548566429106189", "title": "Vue响应式原理（一）", "desc": "什么是响应式? 数据变化，视图(也就是DOM)会自动变化。 我们在使用vue差值表达式时，改变数据后，页面上相应数据会自动改变。"}, {"id": "6844904024861327373", "title": "Vue生命周期说明", "desc": "在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶…"}, {"id": "6844904201945022471", "title": "自己把web应用丢到服务器上，告别求助后端（单页应用与服务端渲染）", "desc": "你需要到阿里云（或者其他云服务器）买个你自己的服务器耍耍。我买的是云服务器ECS，操作系统是CentOS。 2. 安装命令yum install nginx，出现确认时按y 3. 安装完成后，输入 service nginx start 启动nginx 接着我们重启nginx服…"}, {"id": "6943618888638660638", "title": "使用Vue.js和MJML创建响应式电子邮件", "desc": "MJML是一种现代的电子邮件工具，使开发人员可以在所有设备和邮件客户端上创建美观、响应迅速的出色电子邮件。这种标记语言是为了减少编写响应式电子邮件的痛苦而设计的。 它的语义语法使其易于使用。它还具有功能丰富的标准组件，可缩短开发时间。在本教程中，我们将使用MJML构建漂亮的响应…"}, {"id": "6844904131715416072", "title": "vue3.0 Beta发布了", "desc": "2020 年 4 月 16 日，vue 3.0 Beta 测试版发布了。 目前，所有被列入计划的 RFCs 已经实现了，接下来 Vue 团队的重点是让 Vue 3 变得更加稳定，以及让 vue 相关的第三方库支持 vue 3。 主要体现在 性能、Tree-shaking sup…"}, {"id": "6844903597675659271", "title": "Vue 服务端渲染技术", "desc": "所谓的Vue服务端渲染就是，将vue实例在服务端渲染成HTML字符串，将它们直接发送给浏览器，最后将静态标记“混合”为客户端上完全交互的应用程序。 更好的SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。 更快的首屏渲染速度。特别是对于网路速度慢或者运行缓慢的设备，无…"}, {"id": "6980604812958105630", "title": "vue - obsever dep watcher", "desc": "Vue双向数据绑定的核心和基础api是Object.defineProperty,其内部真正参与数据双向绑定流程的主要有Obderver、Dep和Watcher,基于defineProperty和发布"}, {"id": "6913507917853360135", "title": "Vue 4（前后端交互）", "desc": "1. 前后端交互模式 1. 传统形式的url 2. Restful形式的url 2. Promise用法 p509 所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。…"}, {"id": "6844903800185028622", "title": "Kuuga——转化任何 Web 页面为桌面应用的跨平台工具", "desc": "Kuuga 是一个基于 Electron + VueJS 构建的跨平台桌面应用，能够转化任何 Web 页面为桌面应用。 Kuuga 这个名称来源于《假面骑士古迦》。古迦是一个为了保护人们笑容而选择和恶魔战斗的英雄，他能够根据战斗场合的不同而切换不同的战斗模式——而这款工具也从古…"}, {"id": "6844903891268534279", "title": "优雅管理Vue全局组件和插件", "desc": "项目中新建plugins目录，和components目录保持同级。 这样main.js看起来就清爽很多了，后面有新增的插件，只需要再plugins目录下新建相应的插件名称，然后在index.js中引入即可，再多的插件也可以很方便的进行维护。 最后可以components/glo…"}, {"id": "6844903798280978445", "title": "Vue倔强青铜-入门和组件化通信G", "desc": "Vue单文件组件。Vue的单文件组件相信大家都体验过，通过vue-cli初始化的项目自动就支持了，新建Child1.vue 1. 父传子组件 2. 子传父 3. 兄弟组件 4. 祖先后代 provide & inject 5. dispatch 6. boardcast 7. …"}, {"id": "6844903687576354824", "title": "webpack dll打包重复问题优化", "desc": "关于webpack dll的使用，我这里不做过多介绍，网上都有，一撸一大把，今天我要说的是在使用dll plugin过程中出现的一个包依赖问题，这个问题导致打出来的包会包含重复的代码。"}, {"id": "6921563400992456712", "title": "Vue 使用js来调用一个组件", "desc": "在引用第三方库的时候，一般都会有通过js来显示一个正确提示或者错误提示的弹窗，如果开发的项目里要有自己独特的风格，可以自己实现一个。"}, {"id": "6844904127852445704", "title": "【项目记录】Vue H5适配/vue中Axios的封装", "desc": "已有PC非后台、资讯介绍类项目，技术栈Vue、Nuxt。 1. 使用vue-cli初始化项目：vue init webpack 2. 移动端适配： 在iPhone3G和iPhone4的Retina屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在Retina屏幕下变…"}, {"id": "6904967987883671560", "title": "Vue3 学习笔记之 watchEffect", "desc": "最近在看 Vue3 的一些新 feature，顺道学习了一些 hooks 编程的思想，感觉挺有启发的。今天就以 watchEffect 这个很小的 case 为例，开启我的 Vue3 学习笔记。 Vue2 v.s. Vue3 这是一个比较大的风格转变，通俗来说，就是从基于对象的…"}, {"id": "6844903775887441933", "title": "基于vue全家桶的移动端音乐web app", "desc": "由于项目使用的 API 接口完全是基于 NeteaseCloudMusicApi 项目，因此需要事先启动该项目作为接口服务器（无论是本地还是云上）；启动好后修改 src/index.js 文件中的 API 接口设置为实际使用的接口地址即可。 由于是针对移动端设计的 web ap…"}, {"id": "6844903721281781768", "title": "[Vue2.0]手撸手淘H5购物车", "desc": "最近一直在写React，Vue有段时间没写了，所以趁这个时间设计个Vue的小项目练练手。 年轻时在电商的公司实习过，所以还是打算写一个电商相关的小项目，也算是一个总结。 因此这次就拿手淘H5购物车开刀。项目GitHub 数据都是来自手淘的真实数据，也是观测了一段时间才定义好数据…"}, {"id": "6844903703636508680", "title": "基于Vue构造器创建Form组件的通用解决方案", "desc": "在应用Vue框架去开发业务时，会将页面上每个独立的可视/可交互区域拆分为一个组件，再通过多个组件的自由组合来组成新的页面。例如 当用户的某个行为触发表单时（例如注册、建立内容等），期望在页面中弹出一个From组件。通常的做法是在template中填入一个<form>组件用于开发…"}, {"id": "6937664813321420808", "title": "带你入门体验 Vue3 ", "desc": "一直都是 React 进行开发，虽然 Vue 是接触最早的，但现在实际工作也不怎么有机会用，Vue3 都出了。其中新写法有点像 React Hook，于是，这段时间迅速对 Vue3 进行了基本知识入门，体验下 Vue3。 首先 Vue3 出现之前，让我们来理理 Vue2.x 有…"}, {"id": "6989801100765298724", "title": "Vue源码笔记-1.选项合并策略", "desc": "Vue源码学习笔记1，主要介绍Vue初始化时的选项参数合并的校验、合并过程。结合网上解析文章、实际Vue源码和小部分自己尝试、理解进行学习。"}, {"id": "6989779498728161287", "title": "【操作】vue-markdown使用", "desc": "引入vue-markdown npm 安装 npm install --save vue-markdown 引入github-markdown-css npm 安装 npm install githu"}, {"id": "6844903616046710791", "title": "vue双向绑定原理", "desc": "Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。本文仅探究双向绑定是怎样实现的。先讲涉及的知识点，再用简化得不能再简化的代码实现一个简单的 hello world 示例。 ​ 访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过 def…"}, {"id": "6844903799983702029", "title": "Vue.js基础拾遗", "desc": "1、Vue.js的数据绑定形式是使用“Mustache”语法（双大括号）的形式，针对Html代码，需要使用v-html指令。 2、Mustache语法不能作用在HTML特性上面，此时需要使用v-bind指令。 1、一些指令能够接收一个“参数”，在指令名称之后以冒号表示，如v-b…"}, {"id": "6930450822157303815", "title": "Vue-SSR", "desc": "服务端渲染(SSR)是将同一个组件渲染为服务器端的HTML字符串，将它们直接发送到浏览器，最后将这些静态标记\"激活\"为客户端上完全可交互的应用程序。和纯客户端的单页面应用不同(SPA)，服务端渲染可以"}, {"id": "6945307209819488270", "title": "参考element源码用vue写一个input的受控组件", "desc": "在react当中，表单元素input 中设置了 value，则为受控组件，通过onChange 事件中setState()改变value值来更新state值和DOM中渲染的值。但在vue中，表单元素设置value值，即使value值改变了，dom中value的表现也和data中…"}, {"id": "6921638899378814984", "title": "在Chrome、Edge等最新版浏览器中继续使用Flash Player方案", "desc": "一、背景    最近大连车务段在其公众号发表了题为《全力攻关一昼夜，确保运输三十站》的文章，迅速在网络上引发了群嘲，面对舆论压力只好自行删除了此文。起因是其现在车子系统在浏览器中运行的网页代码依赖Fl"}, {"id": "6844903542059171847", "title": "合格前端系列第八弹-造一个属于自己的 UI 库", "desc": "1. swiper 2. scroller（下拉刷新上拉加载） 3. search 4. Dialog 弹框 5. Toast 轻提示 6. Picker 选择器 使用 startYear，endYear，startDate，endDate，startMinute，endMin…"}, {"id": "6912749734818447374", "title": "(三)vue3之Async Components异步组件", "desc": "在vue3中，定义async components异步组件必须使用defineAsyncComponent方法来明确定义async components异步组件而不是同步组件。同时，component配置项重新命名为loader。示例如下："}, {"id": "6896101802241081352", "title": "你了解 Vue 静态节点的优化吗？", "desc": "Vue 在 template -> AST -> parse -> optimize -> generate -> render -> vnode 这个template 转化为 vnode 流程中，在 optimize 阶段会做一些优化，就是检测不需要进行DOM改变的静态子树，…"}, {"id": "6844903838470635528", "title": "用 Vue 编写抽象组件", "desc": "组件的实现是一个对象，注意它有一个属性 abstract 为 true，表明是它一个抽象组件。 Vue 的文档没有提这个概念，在抽象组件的生命周期过程中，我们可以对包裹的子组件监听的事件进行拦截，也可以对子组件进行 Dom 操作，从而可以对我们需要的功能进行封装，而不需要关心子…"}, {"id": "6844903778349498382", "title": "设计模式在vue中的应用（五）", "desc": "为什么要写这些文章呢。正如设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结（来自百度百科）一样，也是想通过分享一些工作中的积累与大家探讨设计模式的魅力所在。 这一篇要讲的可能和之前有点区别，前面几篇要达到我们的目的不得不造出…"}, {"id": "6844904025939410951", "title": "后台管理系统焕然一新的(上) -性能优化", "desc": "接下来, 作者会分享在我目前公司的项目里，是如何在满足业务需求的基础上，让整个系统焕然一新的过程. 1.从缩短打包角度出发."}, {"id": "6844903586694955015", "title": "走进Vue-cli源码，自己动手搭建前端脚手架工具", "desc": "前段时间看了一些vue-cli的源码，收获颇深。本想找个时间更新一篇文章，但是最近事情比较多，没有时间去整理这些东西。趁这两天闲了下来，便整理了一下，然后跟大家分享一下。如果小伙伴们读完之后，跟我一样收获很多的话，还望各位小伙伴们多多点赞收藏支持一下哦。 Vue-cli是一款非…"}, {"id": "6844904128435453966", "title": "说说Vue的几个watcher（二）——computed watcher", "desc": "得为computed属性创建watcher（正是computed-watcher），并添加到相关data属性值的订阅者队列里。watcher的回调函数正是computed属性值（函数） computed属性值的变化是由data属性变化引起的。因此若想模板也跟着变化，render…"}, {"id": "6963181961233989645", "title": "🍺Vue3 新特性", "desc": "Vue3 值得注意的新特性->组合式 API、Teleport、片段、emits选项、v-dodel指令的变化。"}, {"id": "6935681446002556959", "title": "vite 的使用", "desc": "index.js : #!/usr/bin/env node 文件头。 启动3000端口。 使用的路径必须 / ./ ../ 像第三方模块的无法加载。"}, {"id": "6974335438114783246", "title": "ant-design-vue 按需加载 （踩坑）", "desc": "前言 之前一直全部引入，导致打包很大。3.x 出来后，越来越注重Tree-shaking.网上的方法比较残缺， 达不到目的， 特此记录... 文档的配置我们就不说了 vue.config配置 特别要提"}, {"id": "6844903837556277255", "title": "Vue-Cli 3.0从0 开始搭建项目（篇1）", "desc": "从0开始搭建项目，相信更多人都做过，但是你真的独立搭建整个项目了吗，有没有考虑周全，是否从UI的框架的选型、权限、图标、路由、登陆拦截、第三方工具库、性能优化等多方面搭建出适合本公司项目的人员和环境。本文总结的是Vue-Cli3.0构建项目 根据实际情况而定。 值得注意的Vue…"}, {"id": "6844903587915497486", "title": "如何在 Vue 中优雅地使用 CSS Modules？", "desc": "CSS Modules 为每一个局部类赋予全局唯一的类名，这样组件样式间就不会相互影响了。如： 当导入一个 CSS 模块文件时，它会将局部类名到全局类名的映射对象提供给我们。就像这样： 的确，CSS Modules 对于 Vue 组件是一个不错的选择。但也存在以下几点不足： v…"}, {"id": "6844903655447986183", "title": "Vue 小API大妙用", "desc": "最近做的项目是从0开始采用Vue作为数据驱动框架。所以有很多Vue实战上的经验体会，下面就专门拿几个常用的但难度不高的VUe功能说一下： 冒泡概念普及： 当单击事件在dom结构上存在父子关系时，单击子dom，不仅会触发子dom单击事件还会触发父dom单击事件。 上面的大概就是典…"}, {"id": "6844903640272994312", "title": " 前端如何优雅的制作带LOGO的二维码", "desc": "说在前面的话... 这里有一个问题是画图时我们是需要用到img.onload方法，而这个方法是异步，且需要本地服务支持，有些同学可能会在本地静态页面写demo ，却展示不出最后合成的base64，就是因为无服务的原因。所以需要利用node,或者放在类似vue ng 这类项目中 …"}, {"id": "6970677288971010085", "title": "Vue.js 源码（3）—— Array 的变化侦测", "desc": "前言 之前我们学了 Object 的侦测变化，那为什么 Array 要单独来讲呢？我们用下面的例子来说明一下： Object 可以通过 getter/setter 来实现状态的侦测，而数组的 push"}, {"id": "6875198510221197319", "title": "如何监听路由变化？SPA实现原理及DEMO", "desc": "本篇文章主要讲解常见单页应用路由库的实现思路。通过其实现方法我们可以了解到一些浏览器的工作原理，并且深入学习理解一些平时不常用的API。 由于业务需要，我们要监控页面的访问次数。对于传统的多页应用来说，很简单，我们只需要在页面加载完毕后上报就可以了。但是对于单页应用来说就没那么…"}, {"id": "6844903678504255502", "title": "使用Vuex解决Vue中的身份验证", "desc": "传统方式中，许多人使用本地存储，来管理通过客户端验证生成的tokens。一个大问题是如何有更好的方式，来管理验证tokens，从而允许我们来存储更大的用户信息。 这就是Vuex的作用。 Vuex为Vue.js应用管理状态.。对于应用中所有的组件来说，它被当做中央存储，并用规则确…"}, {"id": "6883363601730502663", "title": "初探vue3响应性基础 API", "desc": "我们在vue2中直接用prototype直接进行挂载。 可以用来为源响应式对象上的 property 性创建一个 ref。然后可以将 ref 传递出去，从而保持对其源 property 的响应式连接。(官话)"}, {"id": "6844903670937550861", "title": "Vue异步组件处理路由组件加载状态", "desc": "在大型单页面应用中，处于对性能的考虑和首屏加载速度的要求，我们一般都会使用webpack的代码分割和vue-router的路由懒加载功能将我们的代码分成一个个模块，并且只在需要的时候才从服务器加载一个模块。 但是这种解决方案也有其问题，当网络环境较差时，我们去首次访问某个路由模…"}, {"id": "6844903801275564039", "title": "浅出Vue 错误处理机制errorCaptured、errorHandler", "desc": "JavaScript本身是一个弱类型语言，项目中容易发生错误，做好网页错误监控，能帮助开发者迅速定位问题，保证线上稳定。 指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例 2.2.0 起，捕获组件生命周期钩子里的错误。同样的，当…"}, {"id": "6844903637697691662", "title": "应用于 Hybrid App 的 Vue 多页面构建", "desc": "本文介绍一款基于 Vue 的使 App 支持离线缓存 Web 资源的混合开发框架。本人小白一枚，请将它视作一份我的学习总结，欢迎大神们赐教。本文多阐述思路，实现细节请阅读源码。 高效率界面开发：HTML + CSS + JavaScript 被证实具备极高的界面开发效率。 跨平…"}, {"id": "6844903854979416072", "title": "由Vue中三个常见问题引发的深度思考", "desc": "工作中我们通过搜索引擎或者官方文档很容易就会知道一个语法怎么使用，但是你知道其中的原理吗？我想有一部分同学应该做不到清楚的说明其实现原理。众所周知，如今技术更新迭代速度很快，据 Vue 作者尤雨溪表示 Vue3.x 会在今年的下半年发布正式版本，视频地址在这里 VUE CONF…"}, {"id": "6992551785378349092", "title": "Vue3练习系列--宫格转换+拖动填色", "desc": "前言 因为公司业务需要,做一个宫格转换,并且选中宫格 或者拖动颜色能填充的,拿Vue3做个demo熟悉一下 宫格转换实现效果 核心思路 因为业务不需要兼容IE,就直接采用了grid布局进行分配,点击切"}, {"id": "6922712927040438286", "title": "vue-cli 4.0 搭建项目配置😍", "desc": "1. 根目录下创建 .env文件(我比较常用以下三种)： 2. package.json文件中进行相关配置： 3. 运行/打包： 因为vue-cli 3.3版本后后将baseUrl废除了,使用publicPath代替,将baseUrl换为publicPath就好了。 publi…"}, {"id": "6844903662716731406", "title": "为什么Vue.mixin中的定义的data全局可用", "desc": "0. 背景 目前在丁香医生的业务中，我会负责一个基于Vue全家桶的WebApp项目。 一直有件不太弄得明白的事：在每个组件的template标签里，都会使用dataReady来进行渲染控制。例如像下面这样，请求完了以后再渲染页面。 但是实际上，我在组件的data选项里并没有定义…"}, {"id": "6992530281232072712", "title": "Vue3.0源码解析 （二）", "desc": "更新过程 vue3.0更新的核心基础：采用了es6的Proxy，首先来介绍下Proxy的基础用法。 vue3.0使用reactive来包装响应数据，进行数据劫持。查看源代码中reactivity/re"}, {"id": "6986128961260486687", "title": "Vue 响应式原理之源码分析", "desc": "Vue 响应式原理之源码分析 数据响应式是MVVM框架的一大特点，Vue2 中利用 Object.defineProperty() 通过定义对象属性的setter/getter拦截属性的访问，Vue3"}, {"id": "6989155005051699213", "title": "Vue学习笔记 - 组件化开发 - 插槽", "desc": "组件插槽基本用法 示例： html: js: 注意：默认值会被替换，而不是一起展示。 具名插槽 根据 slot 名称 name 进行匹配，没有匹配到的放到没名字的默认插槽。 示例： js: 作用域插槽"}, {"id": "6844903846880215047", "title": "用vue 编写一个日历组件（非常详细-让日历简单起来）", "desc": "虽然我知道日历组件肯定已经有很多人发过文章，写过思路了，但是我还是想写一下。 我是选择弄一个新的脚手架去开发，所以我是去vue-cli官网去拉取一个新的脚手架在本地，相信这个大家应该都会。 相信很多小伙伴和我一样看到日历之后不知道怎么下手，如何能区分上下月和当前月呢，其实明白思…"}, {"id": "6844903567636070408", "title": "前端开发大杀器hey-cli，全局支持vue react es6开发部署", "desc": "其实，这是一个集成的webpack脚手架。 现今网络上，相信关于webpack的配置，大家也看了不少，基本上比较流行的框架大家都推荐使用webpack来开发部署。 前面有vue-cli的工具，后有ant-design的，大家都基本上帮我们把webpack的那一些配置配置好。 可…"}, {"id": "6844903876944986120", "title": "提前使用Vue 3.0新特性，vue-function-api尝鲜", "desc": "Vue3.0的预告已经快一年了，本月的Vue Conf大会上尤雨溪放出了Vue 3.0最重要的RFC，即Function-based API，有不少的小伙伴对此提出质疑。对此，我也想知道这样的一个升级究竟能带来怎样的改变。 正好VueJs的开发团队放出了基于Vue2.0的vue…"}, {"id": "6920131072692846599", "title": "提高生产力插件 word生成lodop代码的报表工具", "desc": "因为上周接到一个任务说html的表格用lodop打印出来在客户那有样式错乱问题，公司以前解决这种问题是用lodop画线工具一字一线画出来的，我一看好家伙，十几个报表模板，都还挺复杂，如果纯画，那不是没时间摸鱼了🐕，索性我就开发了个插件来实现自动生成lodop画线工具，好家伙生…"}, {"id": "6844903712767344648", "title": "vue 项目快速输出微信、支付宝、百度小程序", "desc": "上周，Megalo@0.2.0 正式发布，优化了数据更新性能的同时，支持了百度智能小程序，着实激动了一把，这“可能”是目前社区里第一个同时支持三端小程序的 vue 小程序框架。下面我们就来试试他的效果。 官方文档的第一部分就是快速入门，顺藤摸瓜，构建一个 megalo 项目。 …"}, {"id": "6935744925359161351", "title": "Vue3组件（11）封装一个成熟的表单控件", "desc": "把表单需要的属性，统统放入json里面，然后用require（方便） 或者aioxs（可以热更新）加载进来，这样就可以实现动态渲染了。 比如要实现公司信息的添加、修改，那么只需要加载公司信息需要的json即可。 想要实现员工信息的添加、修改，那么只需要加载员工信息需要的json…"}, {"id": "6844903865108676615", "title": "精读vue-hooks", "desc": "最近研究了vue3.0的最新进展，发现变动很大，总体上看，vue也开始向hooks靠拢，而且vue作者本人也称vue3.0的特性吸取了很多hooks的灵感。所以趁着vue3.0未正式发布前，抓紧时间研究一下hooks相关的东西。 当一个模版依赖了很多mixin的时候，很容易出现…"}, {"id": "6936004235490557959", "title": "vue组件缓存之keep-alive正确使用姿势", "desc": "从详情页返回，希望列表页缓存，不重新渲染数据，这样会提高用户体验。 所有列表页和详情页是两个webview，当我们进入详情页，列表页webview，只是会在详情页webview下面，不会销毁。 但是但是，我们的项目是用vue开发的webapp,多个组件共用一个窗口，当我们切换路…"}, {"id": "6983713700146315300", "title": "初识Vue", "desc": "一、Vue简介 Vue是一套用于构建用户界面的渐进式框架。 渐进式：可以控制一个页面的一个标签，也可以控制一系列标签，还可以控制整个页面，甚至可以控制整个前端项目 Vue 的核心库只关注视图层，不仅易"}, {"id": "6897168958915346440", "title": "前端vue3_typescript_antd模版", "desc": "真香警告⚠️确实上手vue3之后感觉看一些逻辑的部分会更加容易的一点，自定义的hook就像是一个具名化的mixins，把我们一套逻辑溶于在一起，确实方便了后期的维护。而ts写了一些我们的逻辑类型，如虎添翼（大型项目） vue3模版整体的写完了，但是还是缺少很多东西，有想要加的一…"}, {"id": "6979603223065657357", "title": "从源码学习vue生命周期整个流程", "desc": "初始化实例属性 vue是通过initLifecycle函数来向实例中挂载属性的 初始化事件 根据上面的流程图所表示:vue是通过 initEvents 函数来执行初始化事件的 初始化状态 初始化状态包"}, {"id": "6893884574854545422", "title": "小白也能懂的VUE的生命周期探寻", "desc": "官方：Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期"}, {"id": "6990241921285226504", "title": "7x5 精读Vue官方文档 - 特殊的 attribute", "desc": "精读 Vue 官方文档系列 🎉 一些特殊的 Attribute，它们的行为看上去很类似于指令。 ref ref 被用来给元素或子组件注册引用信息。引用信息将会附加在父组件的 $refs 对象上。如果在"}, {"id": "6976898166100590628", "title": "如何用vue3+ts，写一个异步请求的hooks", "desc": "描述 我们在业务中，经常要异步请求数据，来渲染我们的页面，而且为了代码和逻辑的复用，我们可以封装成一个hooks"}, {"id": "6934539800527503368", "title": "vue中的nextTick完整解析", "desc": "nextTick是Vue中经常见并且实用的一个方法，这里做一个完全的解析。 首先看下nextTick api在官网中的描述。 DOM更新循环结束是什么意思，什么时候DOM更新循环结束？nextTick怎么在DOM更新结束后执行延迟回调的？首先说下Vue中的异步更新队列。 Vue…"}, {"id": "6844904065034354702", "title": "2020前端实践|优雅的实现一个全栈项目（一）", "desc": "vweb_visual是一个简单的后台管理项目，疫情在家为了不无聊抽时间写的，一来呢自己的github有点空荡荡的，想想自己已经步入社会，不能像学生时代一样觉得时间充足。所以下定决心做一个长期维护的全栈项目，不仅仅是为了自己的成长。 当我使用typescript作为和vue.j…"}, {"id": "6995357978840809480", "title": "vue中自定义指令解决图片加载失败", "desc": "目标： 通过自定义指令的形式解决异常图片的处理 自定义指令 注册自定义指令 首先定义第一个自定义指令 v-imagerror 然后，在main.js中完成对于该文件中所有指令的全局注册"}, {"id": "6844904016112009223", "title": "Vue3源码解析：nextTick", "desc": "本文是本人的一些拙见，如有错误请观众老爷们指出。 我们为什么需要nextTick？考虑如下的场景。如果每一次foo的变化，都会同步的触发watch的更新。那么，如果watch中包含了大量耗时的操作，则会造成严重的性能问题。所以在Vue的源码中，watch的更新发生在nextTi…"}, {"id": "6924583125847080967", "title": "实战技巧、vue+vant开发移动端", "desc": "整个页面列表相对简单、局部列表就有点麻烦了，下拉刷新+加载更多结合体还是需要结合场景做出相应改变的，生搬硬套是不行的。（文章最后会给出完整代码） 1. 进页面会触发一次onload事件，第一次如果在子组件触发的话会很慢,出现局部空白的情况，所以选择在父组件触发,看下onload…"}, {"id": "6844903593997238285", "title": " Vue SPA项目 + Sentry 实现前端错误监控", "desc": "前端监控是相对于后端监控而言的，以往的后端监控只能记录接口被请求之后所发生的错误，但是现在随着用户复杂度不断提高，很多错误是在后端接口被请求以前就发生的JS错误。对于这种错误，传统的后端错误监控是无能为力的，因此前端监控应运而生。 最近想在公司的项目上部署前端监控，以主动捕捉用…"}, {"id": "6985798431897813029", "title": "4x1 精读Vue官方文档 -  测试", "desc": "精读 Vue 官方文档系列 🎉 介绍 测试的目的是用于保证应用功能的 可靠 与 稳定。哪些情况会造成开发者失去对代码的信心？ 构建新特性 重构代码 修复 BUG 尽管测试的流派有很多，但在 Web 应"}, {"id": "6885340352618709006", "title": "vue编译过程分析", "desc": "先正式讲解之前先看一张来自Vue官网的实例生命周期图。 由图中可知，当我们实例化一个Vue对象并完成初始化后，Vue会检查el和template属性，以获取模板字符串。然后将得到的模板编译成render函数。 只有当template未指定时，vue才会以所制定的el元素的out…"}, {"id": "7000764049906466829", "title": "快速入门Vue3 | 高阶指南篇", "desc": "以图的形式，汇总相关知识点~本文是关于高阶指南，其实主题内容是Vue的响应式，一共7张脑图，可快速看完！！"}, {"id": "6996973419153588261", "title": "vue那些指令实现你还不会嘛？", "desc": "上篇文章数据搞到页面上展示已经成功将文本节点的{{ 值 }}用DVue内部的变量提换。这篇文章将接着上文内容，将实现一些基本指令，以及简单的更新操作。"}, {"id": "7005093006453784590", "title": "Vue2.0详解diff算法", "desc": "关于Vue中的diff算法，一直是我们前端工程师面试绕不开的一个点，索性花点时间搞懂，对自己平时写代码也有很大帮助。 虚拟Dom（VNode） 假设我们的真实dom是： 那么他对应的VNode就是： "}, {"id": "6850037281559543821", "title": "总结我对Vue项目上线做的一些基本优化", "desc": "大家好啊，我是wangly19，一名前端摸鱼小能手。最近忙着开源项目的东西，还有公司项目的迭代问题，导致更新文章的频率有点低了。也来聊聊我在干嘛吧。 第一个事情就是比较我的阉割版UI Design，要开始Vue3.0的开发工作，所以近期都在看Vue3.0的东西。 其次就是和UI…"}, {"id": "6844904132109664264", "title": "Vue3 究竟好在哪里？（和 React Hook 的详细对比）", "desc": "这几天 Vue 3.0 Beta 版本发布了，本以为是皆大欢喜的一件事情，但是论坛里还是看到了很多反对的声音。主流的反对论点大概有如下几点： 在我看来，Vue 黑暗的一天还远远没有过去，很多人其实并没有认真的去看 Vue-Composition-Api 文档中的 动机 章节，本…"}, {"id": "6997293636681482253", "title": "App开发新选择：使用 Vue Native 构建移动应用", "desc": "Vue Native 是一个 JavaScript 框架，旨在使用 JavaScript 构建可以在 Android 和 iOS 上运行的跨平台移动应用程序。通过封装 React Native，开发人"}, {"id": "6983843979133468708", "title": "Electron + Vue3 开发跨平台桌面应用【从项目搭建到打包完整过程】", "desc": "本文将探讨Electron + Vue3结合使用的问题，通过实用案例手把手教你基于@vue/cli从零搭建完整项目框架。"}, {"id": "6903717128373796871", "title": "Vue Router 4.0 发布！焕然一新。", "desc": "今天，Vue Router 4 正式发布稳定版本。 在经历了 14 个 Alpha，13 个 Beta 和 6 个 RC 版本之后，Vue Router v4 闪亮登场，为你带来了 TypeScript 集成、新功能以及对现代应用程序的一致性改进，已经准备好成为 Vue3 新应…"}, {"id": "6987227498912153607", "title": "在 Vue 里如何优雅的清除一个定时器？", "desc": "前言 清除定时器，相信有相当一部分人是这么写的： 这是一段常见的代码，至少我身边的好几个小伙伴（1-3年经验的都有）都是这么写的，这里存在3个不优雅的问题"}, {"id": "6862560722531352583", "title": "听说你熟练使用Vue，那这9种Vue技术你掌握了吗？", "desc": "现在，Vue.js已成为前端开发的热门框架。有很多工程师利用Vue.js的便利性和强大功能。但是，我们完成的某些解决方案可能未遵循最佳做法。好吧，让我们看一下那些必备的Vue技术。 1. 函数组件 创建一个函数组件非常容易，你需要做的就是在SFC中添加一个 functional…"}, {"id": "7007062876485582861", "title": "Vue3-笔记-computed计算属性理解", "desc": "计算属性是不能直接修改，因为它是只读的。 computed计算属性中有get(){}和set(){}方法配合修改计算属性，使用它就可以修改计算属性的值了！ 这里千万注意： 调用computed的get"}, {"id": "7002869322737516581", "title": "Vite + Vue3 项目配置 ESLint 规范和 Jest 单元测试", "desc": "在新建一个 vite2.x + vue3.x 的项目中，加上ESLint 的检查和 Jest 的单元测试，更好的进行团队协同合作。"}, {"id": "7004771727171387422", "title": "一个项目带来的复习（一）", "desc": "本来是想借着一个Vue项目复习一些知识，但因为复习知识不断的拓展，笔记也越记越多，期间看了很多大佬的文章，本着学习到的开源精神，把一些记录的笔记给一些可能需要的人。"}, {"id": "7007242275369680927", "title": "两种方式配置vue全局方法", "desc": "在Vue项目开发中，肯定会有这样一个场景：在不同的组件页面用到同样的方法，比如格式化时间，文件下载，对象深拷贝，返回数据类型，复制文本等等。这时候我们就需要把常用函数抽离出来，提供给全局使用"}, {"id": "6844903577220349959", "title": "前端面试考点多？看这些文章就够了（2019年6月更新版）", "desc": "金三银四跳槽季，offer快到碗里来，前端面试考点众多，而网上各个知识点的博客文章又太多，看的眼花缭乱……所以便整理了一下常见知识点的精华文章，每个知识点的文章控制在3篇以内，尽量覆盖该知识点的下容易被面试到的所有内容，文章都是之前自己读过的，确定是精华干货。文章会一直更新，也…"}, {"id": "6964141635856760868", "title": "Vue 源码解读（12）—— patch", "desc": "深入理解 Vue 的 patch 阶段，理解其 diff 算法的原理 ..............."}, {"id": "7003731126850158628", "title": "2021年面试复习题（上 - 基础知识篇）", "desc": "2021年面试复习题（上 - 基础知识篇） 主要包括Js、Css、Vue2.x、Vue3.x、Webpack、浏览器、Http等模块"}, {"id": "7007337251810050084", "title": "Vue修饰符native", "desc": "父组件中引用一个子组件，直接在子组件上写@click绑定点击事件（当前页面是父组件）点击事件无法触发解决方法"}, {"id": "6994979622060294151", "title": "vue的路由权限控制，如何从后台获取数据呀~来瞧瞧~", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 路由权限控制常用于后台管理系统中，对不同业务人员能够访问的页面进行一个权限的限制， 对于无权限的页面可以跳转404页面或者提示无权限。 方"}, {"id": "7005908899022766110", "title": "ServiceWorker工作原理、生命周期和使用场景", "desc": "service worker 是现代web开发的关键部分，在最近几年获得了关注，这都要归功于 PWA（渐进式 Web 应用程序） 的流行。"}, {"id": "6989203507878314014", "title": "element el-upload 自定义上传 限制上传文件的类型", "desc": "因为默认的el-upload 用起来不舒服，于是使用自定义上传 主要配置是 在httpRequest 中，就可以自定义上传方法了 accept=\".pdf\"设置为只允许上传pdf，只会 在这里限制，用"}, {"id": "6898200567383621645", "title": "基于组件库换肤方案的设计于实现", "desc": "4. 利用命名空间写不同的样式 5. 动态换肤，与后端交互，把修改的参数打包打给后端，后端把新生成的样式返回给前端，写到style样式内"}, {"id": "6987569528473403406", "title": "vue2.0对比vue3.0的响应式原理", "desc": "vue2.x的响应式 实现原理: 对象类型:通过Object.defineProperty()对象属性的读取,修改进行拦截(数据劫持)。 数组类型:通过重写更新数组的一系列方法来实现拦截(对数组的变更"}, {"id": "6971043782280577061", "title": "记录一些Vue2笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6971245771538563102", "title": "Vue3 响应式原理探索Part 3 - Proxy + Reflect + activeEffect", "desc": "利用 Proxy (get、set) + Reflect 实现 Vue3 的自动响应式，并解决多余字段被依赖的问题"}, {"id": "6979376724878458916", "title": "vue学习-数据绑定-操作元素的class列表", "desc": "vue官网教程 （1）vue 官网教程：https://cn.vuejs.org/v2/guide/ （2）数据绑定-操作元素class 教程： https://cn.vuejs.org/v2/gui"}, {"id": "6993603854336000013", "title": "Vue构造函数", "desc": "Vue应用 Vue应用从new Vue开始，构造函数接收一个包含组件选项的对象为参数，其中有一个render方法用于将根组件渲染为vnode；再调用$mount函数渲染到dom"}, {"id": "6979261408420560927", "title": "Vue学习-路由router", "desc": "Vue学习-路由router 认识路由 什么是前端渲染，什么是后端渲染？ 后端渲染阶段 后端渲染： JSP - java server page 后台收到请求之后，html+css+java, jav"}, {"id": "6844903608232722446", "title": "mpvue: vuejs和小程序碰撞出来的火花", "desc": "框架基于 Vue.js 核心，mpvue 修改了 Vue.js 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 Vue.js 开发体验。（这段直接copy的）"}, {"id": "6844903923183157261", "title": "Vue中的虚拟DOM及diff算法", "desc": "浏览器解析一个html大致分为五步：创建DOM tree –> 创建Style Rules -> 构建Render tree -> 布局Layout –> 绘制Painting。每次对真实dom进行操作的时候，浏览器都会从构建dom树开始从头到尾执行一遍流程。真实的dom操作代…"}, {"id": "6989548562430296094", "title": "Vue生命周期钩子函数以及实例上的属性和方法简单总结", "desc": "Vue生命周期钩子函数 大致分为三个阶段： 1、初始化阶段： beforeCreate（组件创建前）：data和methods中的数据还未被初始化 —— 一般用不到 created（组件创建结束）：d"}, {"id": "6844903911673823246", "title": "[vue源码][nextTick]原理以及源码解析", "desc": "Vue中的nextTick涉及到Vue中DOM的异步更新，感觉很有意思，特意了解了一下。其中关于nextTick的源码涉及到不少知识，nextTick 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。…"}, {"id": "6992868867588653064", "title": "回首Vue3之指令篇（五）", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 这篇文章我们来讲一下v-on的使用方法，以及在使用它的时候我们需要注意的地方。 v-on指令：绑定事件监听器。事件类型由参数指定。表达式可以"}, {"id": "6920939733983969294", "title": "Vue3+tsx 父子组件通信", "desc": "在template语法中，解决这个问题非常简单，只需要通过v-on:getData就可以监听子组件通过emit发送的事件，并获取传来的data，但是tsx中并不能够使用v-on。 在tsx中处理监听事件的时候，是通过on[EventName]处理的，例如onClick可以监听点…"}, {"id": "6844903575416487949", "title": "Cordova使用（vue）", "desc": "Cordova 能够将你的 HTML/JS 代码打包在一个原生的容器中运行，并且可以调用系统的各类软硬件接口（JavaScript API）。我们将这种架构称之为 hybrid app , 得益于这种架构，我们能将前端代码跨平台运行，并且得到接近原生应用的系统特性。最终发布到各…"}, {"id": "6844904110391558151", "title": "《Vue不看源码懂原理》系列——Vue模板编译", "desc": "模板编译的主要作用是将Vue模板编译为渲染函数，首先将模板解析成AST（抽象语法树），然后使用AST生成渲染函数。 首先我们要知道Vue每次渲染，都会生成一份新的vNode与旧的vNode进行对比，在生成渲染函数之前还会遍历一遍AST，为所有的静态节点做一个编辑，在重新渲染时，…"}, {"id": "6919293076380860424", "title": "这款小众的响应式vue后台开发框架，让他滚去收藏夹吧", "desc": "今天小编介绍的EuiAdmin 是一款免费开源后台模板，通过使用EuiAdmin你可以很简单的搭建一个成型的后台。 EuiAdmin是基于element-ui的vue快速开发后台管理框架，EuiAdmin是一个响应式的后台管理框架，通过监听窗口窗口大小变化和设备的类型，调整视图…"}, {"id": "6844903705729318919", "title": "浅探 Vue 组件化思路", "desc": "都说前端是个更新迭代飞快的领域，前端框架的演进也越来越激烈，以至于在技术社区里总看到有人求饶：“求不要更新了，老子学不动了”。 在过去的好多些年，jQuery 在前端领域都处于统治地位，在众多框架中脱颖而出，很多写惯了 jQuery 语法的开发者们，都发现再也回不去写原生 JS…"}, {"id": "6844903577274548231", "title": "vue-design 桌面端页面可视化构建程序", "desc": "Your star is the greatest encouragement to me. 对于第一点，相信不少大公司有很多实践。例如阿里开源的ice工具走得是代码块复用的思路，非常值得借鉴。 而对于第二点，目前开源的也有不少项目，但都是基于web的。在我看来，可视化构建需要…"}, {"id": "6943469100203311134", "title": "vue - 封装组件", "desc": "组件是可复用的 Vue 实例，且带有一个名字，它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。 因为你每用一次组件，就会有一个它的新实例被创建。 这个 prop…"}, {"id": "6995562194511331365", "title": "把数据搞到页面上展示", "desc": "根据上文提到了数据响应式的实现，这次我们再一次升级，模仿vue框架，实现这些响应式数据渲染到页面中。"}, {"id": "6992367196433285127", "title": "Vue3从0到1组件开发-基础组件：Button", "desc": "基础组件之Button组件，基础组件中最简单的一个组件了，由此来切入到整个组件的开发当中。从0开始学习组件开发"}, {"id": "6844903517564436493", "title": "手摸手，带你优雅的使用 icon", "desc": "首先我们来说一下前端 icon 的发展史。 在我刚开始实习时，大部分图标都是用 img 来实现的。渐渐发现一个页面的请求资源中图片 img 占了大部分，所以为了优化有了image sprite 就是所谓的雪碧图，就是将多个图片合成一个图片，然后利用 css 的 backgrou…"}, {"id": "7005750348954468388", "title": "Vue3.0   composition-api 详解", "desc": "创建项目之前的准备 在创建项目之前需要确认是否安装了vue脚手架 安装脚手架 上面安装的是Vue CLI3版本 创建项目 创建步骤 node版本在10.0以上 值得注意的Vue3 新特性 Compos"}, {"id": "6935344605424517128", "title": "手写Vue2.0源码（一）-响应式数据原理｜技术点评", "desc": "前言 时间过得太快 一晃半年都没写文章了 哈哈 如今又到了一年一度的金三银四的好时节 我李汉三回来了 先说一下写此系列的初衷--最近公司招聘高级前端岗位 于是面了很多人 这面着面着就有点 痛心疾首 了"}, {"id": "7002197849794412557", "title": "RBAC权限设计-后台管理-页面级别权限应用 - 使用动态添加路由addRoutes方法会出现的 Bug 及解决方案", "desc": "RBAC权限设计-后台管理-页面级别权限应用 - 使用动态添加路由addRoutes方法会出现的 Bug 及解决方案 为了达成不同的帐号登陆系统后能看到不同的页面，能执行不同的功能的目标..."}, {"id": "7004378443500486692", "title": "【Vue2源码】模板编译compile原理(1)【template str->ast->优化ast->render->虚拟DOM更新】", "desc": "Vue 源码目录 响应式原理 模板编译原理 异步更新原理 diff算法原理 Mixin混入原理 Vue-router原理 生命周期的原理 ... 本文目录 模板编译原理 Vue2 的版本 参考 3.1"}, {"id": "7007616729618579493", "title": "Vue2相关知识点", "desc": "性能优化 Vuex 生命周期 插槽 自定义指令 mixin data工厂函数 nextTick webpack"}, {"id": "6964997137025204260", "title": "尤雨溪在VueConf上关于Vue3生态进展的分享速览", "desc": "尤雨溪在VueConf上关于Vue3生态进展的分享速览：主要包括数据、生态进展，开发体验、兼容性相关等话题"}, {"id": "7007239239133823007", "title": "vue-cli关于devServer不生效问题", "desc": "配置代码如下 项目配置了.env.development文件 删除该配置再重启服务, devServer就生效了"}, {"id": "6933136061044359182", "title": "老板要我做一个1天搭建100个表单和列表的开发平台(1)", "desc": "牛年新的一天，老板兴冲冲地走进办公室，三步并作两步来到了我的工位：“大师啊，听说现在做XXXAdmin、低代码开发平台火得不要不要滴，我们务必抓紧搞一个出来！”。“我们再造一个新的轮子？”“大师”满脸"}, {"id": "6986202846903402503", "title": "组长让我把所有state都放Redux里", "desc": "大家好，我是卡颂。 在我们React进阶源码群里，除了React外，状态管理是最常讨论的话题。 诡异的是，有多个群友说过类似的话： 他们觉得不对，又不知道如何反驳。 今天我们来聊聊Redux、Mobx"}, {"id": "6959019076983209992", "title": "Vue 源码解读（8）—— 编译器 之 解析（上）", "desc": "深入理解 Vue 编译器的解析过程，理解如何将类 html 模版字符串转换成 AST 对象 ...."}, {"id": "6995422249058910221", "title": "Vue.js 中使用defineAsyncComponent 延迟加载组件", "desc": "使用 Vue 3 的 defineAsyncComponent 特性可以让我们延迟加载组件。这意味着它们仅在需要时从服务器加载。 这是改善初始页面加载的好方法，因为我们的应用程序将以较小的块加载，而不"}, {"id": "6945072070132760590", "title": "🎉🎉Vue 3  + Element Plus + Vite 2 的后台管理系统开源啦🎉🎉", "desc": "如果觉得我写得还行的话，请献上你宝贵的一赞👍，这将是我持续写作的动力！感谢大家啦。 所有的代码、文件全部都开源到 GitHub 仓库中，前后端代码全部都在仓库里。 并没有任何藏着掖着的行为，包括后端 API 接口的代码也全部开源，不会说缺少哪个页面或者某个重要功能，这种事情是…"}, {"id": "6844903736498716685", "title": "新年献礼 技术胖262集前端免费视频 让您走的更容易些", "desc": "2018还有十几天就要过完了，我觉的这一年我的成长并不是很快，有很多2018新年许的愿望都没有达成。这篇文章算我2018年的一个总结吧！ 在这岁末迎新的时候，把所有的视频送给你，希望你可以在2019年，无论是学习还是工作都有所进步。 有很多人问我为什么要录制这么多免费视频，是不…"}, {"id": "6844903982742110216", "title": "「前端进阶」高性能渲染十万条数据(虚拟列表)", "desc": "在工作中，有时会遇到需要一些不能使用分页方式来加载列表数据的业务情况，对于此，我们称这种列表叫做长列表。比如，在一些外汇交易系统中，前端会实时的展示用户的持仓情况(收益、亏损、手数等)，此时对于用户的持仓列表一般是不能分页的。 在高性能渲染十万条数据(时间分片)一文中，提到了可…"}, {"id": "7002945823080202253", "title": "基于VUE框架ElementUI库的后台系统实现多语言功能", "desc": "多语言支持 国际化处理 vue项目中的多语言支持使用的是vue-i18n 实现elementUI中英文切换功能，感受中文切换的效果"}, {"id": "7002156832152092702", "title": "小案例学 Vue 之更新行数据", "desc": "前言 页面效果展示 需求分析 首先，进入用户信息管理列表，就获取用户注册的所有信息数据，并通过数据表格动态渲染出来，每一个用户独占一行，并且根据用户 id 号给定固定的序号。 其次，表格的最后一列作为"}, {"id": "7000398131057655822", "title": "小案例理解何为 Vue 组件、插槽", "desc": "前言 页面效果展示 需求分析 首先，进入到用户管理列表，就获取用户注册的所有信息数据，并通过数据表格动态渲染出来，每一个用户独占一行，并且根据用户 id 号给定固定的序号。 其次，表格的最后一列作为操"}, {"id": "6844903586443296781", "title": "移动spa商城优化记（二）--- 减少70%的打包等待时间", "desc": "上篇讲了首屏优化，具体文章详见移动spa商城优化记（一）---首屏优化篇，这次来分享一下打包速度的一些优化经验，因为在实际项目开发中，随着项目的不断增大，依赖项不断增多，我们会发现webpack打包速度会越来越慢，有时候npm run一下可能出去上个厕所的时间都够了，在这快速发…"}, {"id": "6844904086806986765", "title": "加速访问——vue项目打包部署到oss服务器", "desc": "上面的图片有两个vue.config.js是为了我自己方便调试，因为如果改成下面的配置的话，npm run serve将无效，这时候每次都要npm run build比较麻烦，也无法实时修改代码看效果。（另外一个js是你之前的vue.config.js）"}, {"id": "6844903623554498567", "title": "vue使用vue-router beforEach实现判断用户登录跳转路由筛选", "desc": "在开发webApp的时候，考虑到用户体验，经常会把不需要调用个人数据的页面设置成游客可以访问，而当用户进入到一些需要个人数据的，例如购物车，个人中心，我的钱包等等，在进行登录的验证判断，如果判断已经登录，则显示页面，如果判断未登录，则直接跳转到登录页面提示用户登录，今天就来分享…"}, {"id": "6947633983052054535", "title": "浅析vm.$set方法", "desc": "接下来用一个小项目的形式告诉你set有什么用。 当你点击change时，界面完全没有任何变化，但当你看控制台却发现数据确确实实填充了进去。 之所以会出现这个现象是因为直接ES5已经舍弃了Object.observe方法，Vue无法监听对象属性删除和新增，故即使使用deep方法监…"}, {"id": "6844904115420528648", "title": "Vue.use 源码分析", "desc": "vue提供了 Vue.use 的全局api来注册插件，了解它的内部实现，无论是看插件的源码，还是自己写插件，都会轻松很多。 这个方法需要在 new vue() 之前调用。 Vue.use 会自动阻止多次注册相同插件，即使调用多次也只会注册一次。 最近发起了一个100天前端进阶计…"}, {"id": "6961342948390731783", "title": "对Vue数据响应式的个人理解", "desc": "文章出处部分来源 一.一张图追踪数据响应式变化 数据响应式是Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。 当"}, {"id": "6874854990079328269", "title": "Vue+js鼠标拖动图片 滚轮缩放图片", "desc": "最外层开启相对定位，中间层使用绝对定位。通过对绝对定位的Top Left的加减，实现拖动"}, {"id": "6844903929667387405", "title": "【前端】vue 图片路径的深入浅出", "desc": "webpack相关脚本中的require和我们前端js文件中使用的require函数不是一回事，它的require是nodejs的关键字。 而前端js文件中，使用到的require在编译时相当于一个webpack定义的关键字，运行时则是webpack提供的一个函数。主要能力有：…"}, {"id": "6844903830623092744", "title": "前端工程化（4）：http-proxy-middleware在多环境下的代理应用", "desc": "...... 是的，就是有这么多的环境等着你去访问它们。那么跑前端代码的时候如何才能与各个环境进行联调呢？最简单直接的办法就是修改proxy选项中的target，然后再重新执行开发脚本。这个方法在项目小的情况你还能忍受，如果项目大的话，过长的编译时间将直接消磨掉你的工作激情。 …"}, {"id": "6922376557701005319", "title": "走进Vue3源码：响应式原理（超详细）", "desc": "响应式原理主要由 3 个部分构成：1. 初始化；2. 收集依赖；3. 触发依赖 1. 初始化阶段 2. 收集依赖阶段 3. 触发依赖阶段 响应式原理的核心是收集依赖和触发依赖，通过使用 Proxy 对要观测的对象进行各种拦截设置（get, set, deleteProperty…"}, {"id": "6933142007489658894", "title": "0年前端的Vue响应式原理学习总结4：最终章", "desc": "终于到了本系列的最后一篇文章了，这篇文章将会做一个简单的模板编译器，并结合上一篇文章的渲染watcher来实现一个小demo。 将数据设置为响应式后，开始模板编译。模板编译思路如下：先将el从页面上取出来放到fragment中，编译完成后再放回页面中。 这个系列文章的到此就告一…"}, {"id": "6844903848541159432", "title": "VUE组件化开发的精髓", "desc": "由 ==vue-router产生的每个页面==，它本质上也是一个组件（.vue），主要承载当前页面的 HTML 结构，会包含数据获取、数据整理、数据可视化等常规业务。整个文件相对较大，因为它作为路由的渲染，不会被复用，因此也不会对外提供接口；在项目开发中，我们写的大部分代码都是…"}, {"id": "6844903648405749774", "title": "D2Admin 7月份更新内容：cli3以及更方便的全局控制等", "desc": "D2Admin 这次完成了 vue-cli3 的重构，省去了以前繁琐的 webpack 配置，打包速度更快，环境变量设置更简单，文件目录更简洁。 创建页面最重要的 d2-container 组件进行了重构，详见 页面容器，依旧是支持 full + card + ghost 三种…"}, {"id": "6988020934598721573", "title": "vue脚手架配置代理", "desc": "1.1 作用 解决跨域问题：通过Vue-CLI里的proxy 2.1 使用 在根目录在的vue.config.js文件下配置 （注意：每次修改此文件都需要重新启动项目） 2.1.1 方式一 2.2.2"}, {"id": "6844904177936629774", "title": "page-skeleton-webpack-plugin 官方Demo 踩坑史", "desc": "目前page-skeleton-webpack-plugin 似乎没怎么维护了，初看一堆的issues 难以下手呀。 不过看了自动生成骨架屏的原理，这个文章基于page-skeleton-webpack-plugin分析自动生成骨架屏原理，还是很有必要进行一次DEMO 演习，以…"}, {"id": "6844904202875961351", "title": "那些你不知道的对象的方法", "desc": "方法用于将所有可枚举的属性值从一个或者多个元对象复制到目标对象，然后返回目标对象. 如果把null或者undefined放在目标对下个的位置，则会报错，因为null和undefined无法转化为对象。 「Object.create(proto[, propertiesObjec…"}, {"id": "6987999714146779144", "title": "uni-app引入echarts-for-wx，formatter 自定义函数不起作用的问题", "desc": "在使用uni-app时，引入echarts-for-wx遇到formatter不正常的问题解决方法。"}, {"id": "6844903721055289357", "title": "10分钟快速精通rollup.js——前置学习之rollup.js插件篇", "desc": "本文是《10分钟快速精通rollup.js——Vue.js源码打包过程深度分析》的前置学习教程，讲解的知识点以理解Vue.js打包源码为目标，不会做过多地展开。教程将保持rollup.js系列教程的一贯风格，大部分知识点都将提供可运行的代码案例和实际运行的结果，让大家通过教程就…"}, {"id": "6844904019576651784", "title": "简单仿写一个 ElementUI 的 Form 组件", "desc": "使用 vue 做了不少管理后台方面的业务，都使用了 ui 框架，或iview，或Element。用框架很香，但业务写多了也不免想自己试着实现一下框架中的一些组件，于是我选择了Form组件，没有特别的理由，就是表单组件用的实在很频繁。我看了下Element的源码，兼顾的很多，代码…"}, {"id": "6844903644953837576", "title": "完美解释 Javascript 响应式编程原理", "desc": "很多前端 JavaScript 框架，包含但不限于（Angular，React，Vue）都拥有自己的响应式引擎。通过了解响应式变成原理以及具体的实现方式，可以提成对既有响应式框架的高效应用。 在页面中更新 price 的值。 在页面中重新计算 price * quantity …"}, {"id": "6978381134505705485", "title": "Vue指令实现原理", "desc": "前言 自定义指令是vue中使用频率仅次于组件，其包含bind、inserted、update、componentUpdated、unbind五个生命周期钩子。本文将对vue指令的工作原理进行相应介绍，"}, {"id": "6947567734242672653", "title": "vue3开发拾亿", "desc": "vite Brotli压缩 50字50字50字50字50字50字50字50字50字50字50字50字50字50字50字50字50字50字"}, {"id": "6992892530178129934", "title": "天地图开发时如何调用类参考的方法", "desc": "今天有个需求，需要我去玩一玩天地图，以前只玩过百度地图，但是只要有文档，难不死人的~ 最多掉点头发而已啦。"}, {"id": "6988489193215229982", "title": "vue3 diff  中的 【最长递增子系列】", "desc": "vue3 diff 最长递增子系列，vue3 diff 主要使用最长递增子系列来优化节点的移动 最长递增子系列（求长度）"}, {"id": "6977761131678924836", "title": "Vue-SSR 客服端激活失败（Vue hydration fails）", "desc": "前一阵遇到了一个Bug..... 整整排查了2个多小时，如果要追究其根本原因，找到了这篇文章，解释完美。 原文地址：Vue激活失败（h"}, {"id": "7000382448223649828", "title": "vue 2.0 通过model 指令来学习双向绑定", "desc": "这里通过讲解model 指令的实现来学习双向绑定的实现过程 首先将整个实现的思路顺下。 在初始化中，首先 new一个vue 实例，通过调用的过程我们可以知道， 先将参数options 对象存为$opt"}, {"id": "6844903581095575560", "title": "常用的前端设计模式，让你写出更优雅的代码", "desc": "写代码容易，写出优雅的代码难，写易于维护的、容易扩展的、结构清晰的代码应该是每位开发者努力的目标，而学习设计模式，合理的的使用能让我们离这个目标更进一步。最近看了《Javascript 设计模式与开发实践》这本书, 一言以蔽之，真不错的一本书，在这里总结一下书中介绍的主要的在 …"}, {"id": "6976447185726472205", "title": "【Vue2零基础学习】学习 Vue2 的单组件开发", "desc": "什么是组件 组件是可复用的 Vue 实例 组件名字更有意义 可复用：只维护一套逻辑即可 通常一个应用会以一棵嵌套的组件树的形式来组织 页头、侧边栏、内容区 每个组件又可以包含子组件 入口组件：App."}, {"id": "6844903504843112455", "title": "使用 Nuxt.js 改善现有项目", "desc": "本文由票牛技术团队 @徐嘉轶 投稿。 票牛的移动站一直使用的是多页 web 应用的形式，分别使用 jade、less 和 es6+zepto 来分开书写页面、样式及脚本，再用 gulp 进行打包发布。api 接口则是和移动端保持同步，并在nginx 上做了反向代理以避免跨域问题…"}, {"id": "6974626472254242852", "title": "Vue组件间通讯方式（历史最全）", "desc": "组件之间存在父子关系、兄弟关系、隔代关系，针对不同的场景，选择更适合自己的通讯方式。十种通讯方式总结，总有一种适合你！"}, {"id": "6850418114732294157", "title": "Vue之理解.sync修饰符", "desc": ".sync 修饰符是事件绑定的语法糖。 应用场景是在父子组件传值的，且子组件要修改这个数据的时候使用。它的原理是利用EventBus，子组件触发事件，父组件响应事件并实现数据的更新，避免由子组件直接修改父组件传过来的内容。（如果子组件直接操作，vue会有警告提示） 用一个现实中…"}, {"id": "6976527695647621150", "title": "vue3.0简介", "desc": "在新版当中setup等效于之前2.0版本当中得到beforeCreate,和created，它是在组件初始化的时候执行，甚至是比created更早执行。值得注意的是,在3.0当中如果要想使用setup"}, {"id": "6878188676444160014", "title": "从iframe到微前端实践", "desc": "在项目最初，学校管理和主站（即商城）就是两个单独的项目，并独立部署通过各自的域名访问，用户点击‘学校管理’的tab新打开窗口浏览页面。 在某次的需求中，产品要求将‘学校管理’放在主站当前页的tab下访问，由于排期时间较紧，就采取了iframe的方式将其嵌入到主站中。 由于每次从…"}, {"id": "6858202395621621767", "title": "Element组件源码研究-Message组件", "desc": "本文的研究思路是通过阅读Element源码，然后自动动手一步一步编写组件，完善其对应功能。 一个静态的，在页面上的message消息。 可以看到message是通过 position: fixed;定位到页面上。 我们的组件是包裹在transition name=\"el-mes…"}, {"id": "6976541821883138085", "title": "vue3 + G6 采坑笔记", "desc": "vue3 + G6 采坑笔记 1.axios 获取数据异步问题 2.reactive的数据存取问题 3.G6的数据更换之后的图形再次渲染问题 4.添加节点的相关代码"}, {"id": "6978426847331778568", "title": "vue模仿element组件封装01", "desc": "一、组件封装涉及的知识点 vue基础语法 组件基础语法 组件通信（sync、provide、inject） 插槽的使用 props校验 过渡与动画处理 计算属性和监听属性 v-model语法糖 vue"}, {"id": "6988460470520774687", "title": "* ../../vue-temp/vue-editor-bridge报错", "desc": "原因：使用func快捷创建function的时候，vscode自动帮你导入func模块依赖 解决：删掉如下代码即可"}, {"id": "7000313721687900191", "title": "vue自定义修饰符", "desc": "v-on的按键修饰符 Vue 内置的按键修饰符 通俗一点讲，指的是：监听键盘输入的事件。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符。如下： Vue内置的按键修饰符： .enter .ta"}, {"id": "6844903993672482823", "title": "vue-router结合vuex实现用户权限控制", "desc": "为了实现前端校验用户，后端需要在用户登录的时候记录下该用户的状态并加密之后返回给前端。之后该用户的所有请求都应该附带这个加密后的状态，后端取到这个状态解密，并与之前保存的状态对比，以此来判断该用户是否登录或合法。 我这里使用了node简单了写了个本地的express服务，来实现…"}, {"id": "6995232345749979172", "title": "Vue系列：vue模板编译原理与vue组件的渲染、更新过程", "desc": "模板编译的总体过程：使用 vue template complier 将模板编译为 render 函数，然后执行 render 函数生成vnode 前置知识：JS的 with 语法 with 语法改变"}, {"id": "6844903668391608327", "title": "试用 vue-admin-template 写一个自己的dashboard", "desc": "其实自己还是比较热衷于基于CLI的dashboard，也有心去做一些尝试，比如 用 Nodejs CLI 的方式实现一个TODO应用 - 简书 ，后续也会继续增加新想法到这个里面。但是我今天意识到一个问题，基于CLI的DashBoard的使用场景更适合类似Todo，以及一些快速…"}, {"id": "6988105366521249805", "title": "条件渲染", "desc": "v-if v-if 指令用于有条件地渲染元素，元素是否会被渲染取决于 v-if 指令绑定的表达式值的真假： 如果一开始 visible property 的值为真，那么 <div> 元素会被渲染；反之"}, {"id": "6844904042217340941", "title": "一起撸vue组件：带妹上分之<大家来找茬>'辅助'工具", "desc": "hello，大家好。我们继续来撸组件，这次我们一起撸个花里胡哨的组件，那就是大家来找茬的辅助工具。最初的点子来自黄轶老师粉丝群，老师再玩找茬，然后截了个图出来，底下除了喊666，不知道说什么，第一次感觉到了技术离生活这么近。觉得很cool，于是自己研究了一番，终于实现了，在此分…"}, {"id": "6844903649106378766", "title": "跨域总结", "desc": "同源策略控制了不同源之间的交互，例如在使用XMLHttpRequest 或 标签时则会受到同源策略的约束。这些交互通常分为三类： 通常允许跨域写操作（Cross-origin writes）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 prefl…"}, {"id": "6993134954641096717", "title": "Vue常见问题汇总", "desc": "1、vue-router的redirect属性使用 如果页面有判断vuex的值是否存在，存在则使用vuex的值，否则走默认值这样的写法。 这种vuex存值一般只在自己流程中使用，其他模块跳转过来就要重"}, {"id": "6844904157963354126", "title": "Vue中使用provide和inject", "desc": "相信大家在工作中一定遇到过多层嵌套组件，而vue 的组件数据通信方式又有很多种。 比如vuex、$parent与$children、prop、$emit与$on、$attrs与$lisenters、eventBus、ref。 今天主要为大家分享的是provide和inject。…"}, {"id": "6992961465984647175", "title": "《图解Vue3.0》- 第3节 组件基础实例", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 组件是vue中最推崇的，也是最强大的功能之一，就是为了提高重用性，减少重复性的开发。在vue中，代码按照templeate、script、s"}, {"id": "6844903624414330893", "title": "Vue自定义组件事件传递：EventBus部分", "desc": "我会通过两种不同的交互方式，它们对于父子组件间数据交互和兄弟组件间数据交互。 由于篇幅关系，本文主要介绍EventBus进行数据消息传递；关于运用Vuex框架进行状态管理在下一篇文章中介绍。 本章节会有大量的代码示例，为了让读者阅读轻松，做如下目录和组件介绍。本章节主要运用了两…"}, {"id": "6844903705410699277", "title": "vue 地图可视化（2）mapbox篇", "desc": "待续，文章持续更新修改...... 有不懂的地方，可以在下方留言，或者私聊。对文章感兴趣的话，点下赞、收藏和github收集小星星，谢谢大家。"}, {"id": "6997973393710514213", "title": "vue不用index作key(diff算法)", "desc": "patchVnode、Vnode请看这篇。 示例 那么它的vnode也就是虚拟dom节点大概是： 假设更新以后，我们把子节点的顺序调换了一下： children部分是diff算法的重点。 首先响应式数"}, {"id": "6844903959757340679", "title": "你为什么看不懂源码之Vue 3.0【1】", "desc": "记得很早之前，有个人说过，看源码就像武侠小说里的 学习武林秘籍。会耍刀耍剑那是外力，学习武功秘籍才是内力，才能和别人在对波或战前拼气时更升一筹。 读框架的源码的确可以装以上的逼，但...... 你可能会想：是不是我太笨？是不是源码太难懂？是不是我不适合这一行...... 别担心…"}, {"id": "6844903729414537224", "title": "JavaScript黑客是这样窃取比特币的，Vue开发者不用担心！", "desc": "如果你是JavaScript或者区块链开发者，如果你有关注区块链以及比特币，那么你应该听说了比特币钱包Copay被黑客攻击的事情。但是，你知道这是怎么回事吗？ 有人说什么Vue可能遭受攻击，其实没有这回事，因为黑客代码只会在copay项目中正确执行。只有copay项目的pack…"}, {"id": "6943785355103436831", "title": " Vue-cli（Vue脚手架）中引入jQuery （快来吐槽）", "desc": "安装成功后 jQuery(两种方法) 下载npm包 在vue ui的可视化页面中下载 jquery 安装成功后 package.json显示： 创建 vue.config.js文件 在最上面定义 va"}, {"id": "6982742639833530376", "title": "vue提升性能写法", "desc": "v-for和v-if同时使用解决方案； v-show和v-if的使用情况； 路由、图片懒加载； 子组件分割……"}, {"id": "6917135776849330183", "title": "无星的前端之旅（十四）——巧用plop生成模板偷懒", "desc": "在开发过程中，总会有一些模板代码需要编写，比如我是写vue的，vue2中的各种namespace，vue3中的各种引入。几乎是每个vue文件都需要的。 每次写都累的一批，也毫无技术含量。纯体力活，但还不得不做。 这时候大伙可能会用各自习惯的编辑器去编写各式各样的代码块来减轻工作…"}, {"id": "6993227582191697951", "title": "Vue$BUS的全局事件 $bus 组件通信的使用 和 pubsub的消息订阅与发布", "desc": "@TOC 如题Vue的全局事件 $BUS组件通信的使用类似消息订阅与发布 第一 全局注册 $bus 挂载到 vue的prototype上 第一种方法: main.js中写 第二种方法: vue构造里面"}, {"id": "6844903920775462926", "title": "Object.defineProperty的缺点及vue3为什么用proxy", "desc": "vue2的数据双向绑定是用的这个Object.defineProperty,vue3会用proxy实现数据劫持。那vue3为什么会这么做呢？ 这个问题我之前试着描述过很多次，但是因为都自认为不够清楚。 vue是利用数据劫持结合发布订阅模式实现的数据双向绑定。在vue的实现里面，…"}, {"id": "6844903831411638279", "title": "webpack-chain源码 vue-cli3.0配置webpack", "desc": "展开运算符 ... Chainable 以able 为后缀表示具有什么能力。这个库维护了 parent ,用end来实现链式。很像jq的end(). ChainedMap.js ChainedSet.js 这两个里面分别包装了 js 原生的 Map, Set 结构。 打开这个文…"}, {"id": "6844903799279091720", "title": "加快你的网站响应速度-Vue懒加载", "desc": "众所周知，对于页面内容比较丰富的网站，dom的解析会很复杂，这样就会导致首屏加载过慢，对于图片很丰富的网站，我们知道可以使用图片懒加载来提高网站的响应速度，我在我的另外一篇文章中写过，有兴趣的点击这里。像淘宝、京东等等的首页都是经过懒加载处理的，他们会先渲染出骨架，然后懒加载的…"}, {"id": "6950481985772978212", "title": "Vue-CLI 多页分目录打包", "desc": "修改 Vue-CLI 配置，支持打包不同模块代码到单独目录中，保持开发时和打包后不同模块之间的跳转方式一致。"}, {"id": "6911566706108268551", "title": "Vue 3.0新特性之Teleport", "desc": "Teleport Vue 3.0新特性之一。 Teleport 是一种能够将我们的模板渲染至指定DOM节点，不受父级style、v-show等属性影响，但data、prop数据依旧能够共用的技术；类似于 React 的 Portal。 父级无法捕获Teleport节点的事件冒泡…"}, {"id": "6844904048714317837", "title": "前端深入之Vue篇 丨如何在项目中优雅的使用Echarts（下）", "desc": "最近由于一些不可抗力因素，我跳槽去了一家做高校教育服务的公司，刚入职就正好赶上了PC端项目的重构，而我主要负责数据可视化这一模块，其实做起来不算复杂，但是在使用Echarts的过程中也踩到了一些坑。 这是vue项目实战echarts的下篇，还没有看过上篇的同学请点击这里进行查阅…"}, {"id": "6844903823903817735", "title": "【项目实战篇】Element Form表单实践（下）", "desc": "上一篇文章 Element Form表单实践（上）参照着文档将表单部分内容实践了一下。 这个表单看似是比较简单的，但实际上比一般表单存在一些细节的东西需要设计和处理。 首先是主页面的实现。 主页面的逻辑非常简单，直接将代码贴出来。 这段代码中的内容都是上一篇文章中实践过的，没有…"}, {"id": "6844903634891735054", "title": "Vue源码阅读 - 依赖收集原理", "desc": "1. 响应式系统 通过官网的介绍我们知道 Vue.js 是一个MVVM框架，它并不关心视图变化，而通过数据驱动视图更新，这让我们的状态管理非常简单，而这是怎么实现的呢。盗用官网一张图 每个组件实例都有相应的 Watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后…"}, {"id": "6844903651157213198", "title": "基于Vue实现动态组织结构图", "desc": "最近一个项目里有个前端绘制家谱图的需求，大概是下面这个样子： 点击节点会弹出操作菜单，实现增删改查等操作，查阅网上资料发现，现有案例基本都是基于orgchart这个jQuery插件实现的，我们的项目是基于Vue的，不希望因为这个功能引入jQuery，所以基于就Vue实现了一个简…"}, {"id": "6960258892974522381", "title": "【Vue】009. Vuex状态管理（一）", "desc": "本文主要介绍Vue中状态管理器Vuex的基础知识，包括Vuex的概念和使用方法，一级5个核心属性的相关知识。"}, {"id": "6972062963960119327", "title": "vue的$watch与数据修改时的触发时间先后问题", "desc": "解决方法 把setBudgetTotal的$Bus的emit事件中的代码抽离出来，封装成一个方法，在initInfoData()中也调用，在setBudgetTotal的emit事件中也调用。 代码如"}, {"id": "6907038892726157319", "title": "前端框架Vue、angular、React的优点和缺点", "desc": "Vue.js通过简单的API（应用程序编程接口）提供高效的数据绑定和灵活的组件系统。"}, {"id": "6989066672686497799", "title": "uniapp里的scoped使用注意事项", "desc": "众所周知,scoped可用于uniapp(/vue)页面或组件的样式隔离,在使用过程中发现一小问题,就是组件的最外层标签样式是无法被隔离的"}, {"id": "6982061359412281352", "title": "vue3，后台管理列表页面各组件之间的状态关系", "desc": "后台管理的列表页面的各种状态的管理和传递方式。细分组件，每个组件都是原子性的，更灵活的组合。没有采用Vuex，因为感觉有点臃肿，而是用了自己封装的一个轻量级的状态管理。"}, {"id": "6971432130505080863", "title": "记录Vue使用代理的方式解决前端跨域问题", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844903840039305224", "title": "vue嵌入iframe的问题", "desc": "项目用的是vueCli3.0脚手架搭建的，这里我们需要引入的静态HTML就放在public下面的static文件夹下面。如下所示： 需要注意的是：iframe的src属性直接写“static/index.html”即可，这里src的根路径就是public。 之前无论把HTML放…"}, {"id": "6850037279268798472", "title": "Vue diff算法核心", "desc": "核心用处解决最频繁更新的 table 的行排序提高性能的关键由于创建dom的损耗很大，可以的话 最好能利用原来的dom，换位子就行 Node.insertBefore() ，而不是createElem"}, {"id": "6899365984617332750", "title": "Vue移动端适配方案", "desc": "在移动端，通常都会使用 REM + FLEX布局 来实现移动端的完美适配。 rem就是根元素(html)的 font-size 属性。 的话，那么这个库里面自带了适配方案，可以不使用下面的这种方案，如果使用别的UI库的话，就可以使用这种方案。 然后通过 px2rem-loade…"}, {"id": "6974990486587047972", "title": "Vue2基于Element封装自定义组件的方案设计", "desc": "当我们想要做一个新的东西的时候，我们无非是从”做什么“、”怎么做“，”如何做“这些基础的问题出发的，封装组件也不例外"}, {"id": "6903763444312571917", "title": "深入学习keep-alive", "desc": "keep-alive是vue的内置组件，无需单独安装手动注册，keep-alive不会向DOM添加额外节点。 keep-alive是一个能提供缓存功能，保存子组件内部状态的组件。 keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 当被缓存的子组件再次…"}, {"id": "6844904194969698317", "title": "Vue+Ts搭建项目(二)： Vuex的使用", "desc": "Vuex结构目录目录结构index.ts代码vuex-module-decorators@ModuleVuexModule@Mutation相当于mutation,作为唯一修改数据的途径@Action"}, {"id": "6844904031345704967", "title": "vue3.0 音频插件（vue-aplayer）", "desc": "同样我们先安装这个插件我们需要在main.js里面导入并引用那么我们怎么使用了？首先我们需要在使用的vue文件里面引入他我们的html部分js部分最后我们来看一下效果​"}, {"id": "6844903749631082503", "title": "关于v-for的一点小总结", "desc": "在一个玩具组装车间，小A, 小B, 小C，小D以及其他96个流水线工人一起完成组装玩具的工作，每个人都有自己的一辆玩具在组装，突然，小B肚子痛跑去上厕所了，但是小B的工作还没完成，为了不影响整体进度，工人都依次往前补，小C顶替了小B的工作，小D顶替了小C的工作，以此类推，这样虽…"}, {"id": "6844903865209323527", "title": "Vue - 动态创建注册component", "desc": "在深入了解Vue动态创建Component前先了解一下常规组件声明形式。 一种是通过 Vue.component，另外一种则是 Single File Components（SFC） 单文件组件 。 在上面的代码中我们声明了一个叫做 button-counter 的组件。 如果…"}, {"id": "6844904100195205134", "title": "Vue3.0 的 reactive API 定义和源码实现", "desc": "今年，对于从事前端开发的同学而言，很是期待的一件事就是 Vue3.0 的发布。但是，Vue3.0 离发布还是有点时间的，并且正式发布也不代表我们就马上就可以用于业务开发。它还需要完善相应的生态工具。不过正式使用是一码事，我们自己玩又是一码事（hh）。 Vue3.0 特地准备了一…"}, {"id": "6897258481573871624", "title": "下一代构建工具vite 的实现原理", "desc": "如今前端的打包工具 webpack 一统江山。但是在开发一些大型项目或者多页面应用时，webpack的首次启动速度往往需要数分钟才能编译成功，大型的ts项目中，启动时间往往更长。同时webpack的是按需加载实际是假按需，一个文件的改动，需要从新编译所有文件，导致热更新的速度在…"}, {"id": "6877065281097695246", "title": "🚩Vue源码——组件是如何注册和使用", "desc": "在上一篇 🚩Vue源码——组件如何渲染成最终的DOM 中详细介绍了在 Vue 中组件如何渲染成最终的 DOM。而在 Vue 中，除了它内置的组件如 keep-alive、component、transition、transition-group 等，其它自定义组件在使用前必须…"}, {"id": "6979530486234218527", "title": "vue的生命周期钩子函数", "desc": "每个vue实例在被创建时都要经过一系列的初始化过程。 所有的生命周期钩子自动绑定this上下文到实例中，因此可以在函数中访问数据，对属性和方法进行运算。 vue的生命周期： 一、vue实例创建阶段 1"}, {"id": "6968447462491029534", "title": "vue-esign签字板的使用步骤小demo", "desc": "问题描述 在我们开发项目中，特别是流程审批类的项目，最后一步会提交审核，审核员看完相应信息以后，没问题就会签字通过审批。所以就要用到本篇文章中的vue-esign签字技术。 vue-esign技术是基"}, {"id": "6959730845611458596", "title": "CSS自定义变量以及其在Vue中的应用", "desc": "在 css 自定义变量的功能以及出来许久了，但实际开发中大家使用并不多。归其原因是因为 less、sass 等预处理器已经拥有定义变量的功能，以及Vue、react很方便设置 style 样式，大家可"}, {"id": "6889629822574657549", "title": "Vue源码解析：模板编译v-if与codegen(五)", "desc": "在日常开发中v-if/v-for指令的使用频率很高。本文将通过分析Vue如何处理这两种指令，来梳理前四篇模板编译文章，及最后的codegen过程。parseHTML在利用正则逐个解析template字"}, {"id": "6844903822247264269", "title": "Vue 理解之白话 getter/setter", "desc": "简单理解就是访问 vm.data.msg 其实就是访问 vm._data.msg。如果直接在开发环境对 vm.data = xxx这样的赋值，而不是vm.$data.msg = xxx` 这样的赋值，后者是没问题的） watcher.deps 数组表示该 watcher 的依赖…"}, {"id": "6987958410276782094", "title": "vue2 与 vue3 v-model 实现组件传值的写法", "desc": "首先是我们的vue2中的两种写法 父子组件通信，都是单项的，很多时候需要双向通信。方法如下： 　　1、父组件使用：msg.sync=\"aa\"  子组件使用$emit('update:msg', 'ms"}, {"id": "6920162608620404743", "title": "Element-ui upload上传文件限制", "desc": "在accept中添加上传文件的类型只能起到“表面”作用，选择“所有文件”之后，还是可以上传任何类型的文件，根本起不到限制作用。 在before-upload（上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。）钩…"}, {"id": "6920034558628855815", "title": "30秒内实现前端数据mock", "desc": "数据mock除了mock.js、或者使用花瓶等抓包工具引入本地json文件的方法还是有啥子呢？？是不是感觉这些方法使用起来都很麻烦，主要还都不能模拟真实的数据增删改查，哥哥们别急，接下来介绍的这个方法，可以完全模拟真实的接口调用情况。 JSON Server顾名思义就是，起一个…"}, {"id": "6844903556714070024", "title": "从 vue 源码看观察者模式", "desc": "观察者模式（Observer）：通常又被称作为发布-订阅者模式。它定义了一种一对多的依赖关系，即当一个对象的状态发生改变的时候，所有依赖于它的对象都会得到通知并自动更新，解决了主体对象与观察者之间功能的耦合。 上面对于观察者模式的概念可能会比较官方化，所以我们讲个故事来理解它。…"}, {"id": "6844903833995313165", "title": "3分钟了解vue数据劫持的原理", "desc": "通过Object.defineProperty对监听的每一个属性设置get 和 set 方法。 1. 先定义一个对象 2. 定义一个监听函数 ok. 到这里初版已经实现了。尝试一下吧 以上已经实现设置obj的属性的时候，被监听到，并且可以去执行一些代码了。但是，如果对象里面嵌入…"}, {"id": "6844903603484770311", "title": "解密vue-router: 从源码开始", "desc": "前几天笔者看到一个问题：你真的了解vue-router的吗？你知道vue-router的运行原理吗？抱着这样的问题，笔者开始了vue-router的源码探索之旅。本文并没有逐行去深究源码，而是跟着笔者画的流程图来简析每一步的运行流程。 笔者根据源码的结构和自己的理解事先画好了一…"}, {"id": "6995383784963047460", "title": "vue源码学习：02数据驱动视图：依赖收集", "desc": "通过自我提问学习 每日三问 what:它是什么? why:为什么要使用它? how:怎么使用它? 什么是依赖收集？ 在vue源码学习-02数据驱动视图：数据观测学习了如何使数据变得可观测。在数据变得可"}, {"id": "6844903654353436686", "title": "Vue同构(一): 快速上手", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 我们可以看到，我们收到服务器的模板中其实并没有我们所期待界面对应的html结构，而仅有一个用于挂载应用的根元素，在客户端浏览器执行加载的JavaSc…"}, {"id": "6844904155278999559", "title": "使用Vue3 composition-api重写一个抽象可复用的增删改查页面", "desc": "vue3.0 beta版本已经发布一段时间了，尝试着用composition-api来重写一个简单的后台管理系统中的增删改查。 点击表格中的一项，能够弹出详情页进行编辑。 保存或取消更新表格数据。 这种常用的模式在vue2下，这次试着用vue3的api来改写，让我们抛弃被吐槽了…"}, {"id": "6890554258932891661", "title": "在工作中开发的树形递归组件", "desc": "最近的工作主要内容就是开发组件，这里记录一下经常开发的递归组件。 最近在参与开发项目组的类BI工具，不得不说真的是学习到太多东西啦！因为BI工具主要涉及到数据处理与操作。有时候的过滤条件比较复杂，需要根据不同的业务需求与筛选条件需求自定义过滤条件。 用户可以自己组合且条件或者或…"}, {"id": "6844904117895168008", "title": "从 javascript 事件循环看 Vue.nextTick 的原理和执行机制", "desc": "高阶函数是对其他函数进行操作的函数，可以将它们作为参数或通过返回它们。简单来说，高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回。 例如Array.prototype.map，Array.prototype.filter，Array.prototype.reduce …"}, {"id": "6905070468898750478", "title": "vue开发中如何更优雅生成data数据", "desc": "如果纯手写就太浪费时间了，10条还好，假设是100条，总不能copy100次吧。 额。。效果贼烂"}, {"id": "6983827167079563295", "title": "手写 Vue2 系列 之 computed", "desc": "手写 Vue2 系列 之 computed，实现 computed 计算属性，完成模版中计算属性的展示"}, {"id": "6983626263327932429", "title": "上手后才知道 ，Vue3 的 script setup 语法糖是真的爽", "desc": "还记得刚体验 script setup 语法糖的时候，编辑器提示我这是一个实验性的提案，要使用的话，需要固定 Vue 版本。 而在 6 月底，该提案被正式定稿。"}, {"id": "6999531044374315015", "title": "一图胜千言，9张脑图带你快速了解Vue3组合式API和复用", "desc": "以图的形式汇总Vue3.x相关知识点~本文是关于Vue3 Composition API和复用性的相关内容，一共12张脑图，可快速看完！！"}, {"id": "7002845173562638366", "title": "vue-axios-vuex-全家桶", "desc": "vue-axios-vuex-全家桶[vue-axios-vuex-全家桶] ❤️关注+点赞+收藏+评论+转发❤️"}, {"id": "7005779287164846117", "title": "【Vue3】实用指南", "desc": "通过上一篇文章Vue3基础与入门，我们知道了Vue3的一些基础用法，接下来就看看相关的生态和使用技巧。"}, {"id": "7006196789405548558", "title": "Vue入门属性", "desc": "一：el和data选项 二：methods,components和四个钩子 三：外部属性props"}, {"id": "7005899039875006500", "title": "教练，怎么在vue项目里写react？", "desc": "1.前言 我承认了我是标题党，本篇文章是在vue项目里写tsx的一篇介绍。作为一个reacter，目前的业务天天使用vue2+ts让我十分的不舒服。我对于vue也不是很熟悉，想回到我的react时代。"}, {"id": "6924368956950052877", "title": "实现Web端自定义截屏", "desc": "当客户在使用我们的产品过程中，遇到问题需要向我们反馈时，如果用纯文字的形式描述，我们很难懂客户的意思，要是能配上问题截图，这样我们就能很清楚的知道客户的问题了。 那么，我们就需要为我们的产品实现一个自定义截屏的功能，用户点完\"截图\"按钮后，框选任意区域，随后在框选的区域内进行圈…"}, {"id": "7006883646795677726", "title": "基于Vue-Gantt-chart组件实现可拖拽甘特图", "desc": "可拖拽可拉伸甘特图 1. 可上下拖拽到指定行 2. 可左右拖拽到指定位置 3. 可通过左右拖拽按钮，随意调整甘特块长度"}, {"id": "7005824561279139876", "title": "ElementUI el-select 数据过多解决办法", "desc": "1. 场景描述 不知道你有没有这样的经历，下拉框的选项很多，上万个选项甚至更多，这个时候如果全部把数据放到下拉框中渲染出来，浏览器会卡死，体验会特别不好 用人会说element-ui的select有一"}, {"id": "6950826293923414047", "title": "Vue 源码解读（3）—— 响应式原理", "desc": "详细讲解了 Vue 响应式的实现原理 以及从源码层次来回答一些和响应式相关的面试题 ........"}, {"id": "7005000246505766920", "title": "前端vue项目打包--性能优化", "desc": "项目开发完成，优化是必不可少的操作，在保证功能的前提下让项目体积更小，运行速度更快，这也是程序员的价值所在"}, {"id": "6942251234191654949", "title": "Vue3教程：开发一个 Vue 3 + element-plus 的后台管理系统", "desc": "本来不想写这些话的，翻文章的时候翻到了几年前写的一篇旧文，里面记录了我为什么做开源项目，忽然被那时的自己感动了，于是有了下面这些话，希望大家看一看。 写了几年的博客，也做了不少开源项目，最令我感动的不是“牛逼”、“厉害”、“大佬”这样的评价，因为我不牛逼，我也不是大佬，我更喜欢…"}, {"id": "6979394726927532068", "title": "源码浅析-Vue3中的13个全局Api", "desc": "最近对照着源码学习Vue3的全局Api，边学习边整理了下来，希望可以和大家一起进步。 我们以官方定义、用法、源码浅析三个维度来一起看看它们。"}, {"id": "7005958508617138207", "title": "为什么Vuex的state有些需要computed包装？", "desc": "今天我们来讨论一下为什么有些vuex里的state需要使用computed进行包装，而有些则直接定义在data中就可以使用"}, {"id": "7007324069833998344", "title": "Vue3 新特性～～～", "desc": "`Vue3` 的发布已经差不多快一年了，笔者也是在中途跟了波热潮，学习了一下 `Vue3` 的新特性，但一直没有用于工作开发。好在这家公司比较鼓励新技术的使用，笔者也是在不久前将 `Vue3` 投入"}, {"id": "6844904134303301645", "title": "抄笔记：尤雨溪在Vue3.0 Beta直播里聊到了这些…", "desc": "在4月21日晚，Vue作者尤雨溪在哔哩哔哩直播分享了Vue.js 3.0 Beta最新进展。 1. 全新文档RFCs 所有的进度和文档都将在全新RFCs文档可以看到。 2. 六大亮点 Performance：性能更比Vue 2.0强。 Tree shaking support：…"}, {"id": "7004072883362201608", "title": "Vue3 script-setup不完全指北", "desc": "本文列举了 script-setup 比较常用的一些写法，更多内容可以移步至官方vue-script-setup查阅。"}, {"id": "6965057432544346143", "title": "探索 Vue 3 中的 JSX", "desc": "字节跳动大力智能团队前端工程师 林成璋 做为 Vue.js 团队成员和 Vue 3 JSX 插件维护者，参加了《Vue Conf 21》，在会上做了一篇题为《探索 Vue 3 中的 JSX》的分享。"}, {"id": "7002289255712030757", "title": "实战：使用 Lumen 和 Vue 构建个人清单应用（五）前端篇", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 使用 Vue-Cli3.x 创建前端项目 上面我们完成了用户模块和清单模块的后台接口开发以及测试，那么我们接下来开始前端项目的创建以及部分"}, {"id": "6944880337965039629", "title": "手把手教你写出优雅的条件判断", "desc": "本文开始前先分享一些平时写代码中比较容易错的代码片段，大家可以看看自己日常工作中有没有写出过下面这些代码导致程序经常出错呢。随着ES版本不断的更新，ES6+编写JS方式几乎普遍运用于前端项目中了，也很少在代码中看到var、arguments..等影子，不得不说ES6+编写代码确…"}, {"id": "6911126769420468238", "title": "TradingView使用心得", "desc": "因为公司在做一个交易所的项目，页面中需要用到 k 线图,参考了另外几个类似网站，决定用 tradingview 这个专业的股票交易所类的图表库。基于一些类似的项目，加上 Tradingview 的文档，终究是把 K 线做出来了。现在整理一下笔记，以记录自己的心得。分享给大家，以…"}, {"id": "6889766555916828680", "title": "🚩Vue源码——订阅者的响应", "desc": "在上篇专栏中介绍了发布者是如何收集订阅者（Watcher），本专栏来详细介绍发布者发生变化后，如何通知订阅者，而订阅者是如何响应。 在 Vue 中发布者一般是数据，当数据发生变化了会触发数据 setter 函数，其定义在 defineReactive 函数中。 可以看到在 se…"}, {"id": "6955661107566493726", "title": "使用Intersection Observer接口实现可视区域渲染", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 在图文列表渲染时，在较低配置的Android手机出现内存暴涨，无法回收导致客户端崩溃的"}, {"id": "6991835997684138020", "title": "effect安装渲染", "desc": "在组件的渲染过程中，会安装（创建）一个渲染 effect，即 Vue 3.0 在编译 template 的时候，对是否有订阅数据做出相应的判断，创建对应的渲染 effect"}, {"id": "6992598982203539470", "title": "Vue3深入源码了解key", "desc": "key的作用主要是为了高效的更新虚拟DOM,使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除/销毁 key 不存在的元素。有相同父元素的子元素必须有独特的 key。"}, {"id": "6946089083902885895", "title": "最详细的Vue实现日历组件Calendar（日期点击多选，滑动多选）", "desc": "1. 成果演示 2. 实现基本的日期渲染 new Date(2020, 4, 1).getDay() 计算传入的日期是星期几，返回值0表示星期天，1表示星期一，以此类推... ps: notCurMonth和currentDay这两个类名自己写，示例没有贴出来，不然就全是一个颜…"}, {"id": "6869937634714583053", "title": "🌓vue页面换肤实践", "desc": "最近要做一个换肤的功能，不过只是对一个页面换肤，换一下背景图呀，背景、边框、字体颜色呀之类的，并非整个项目换肤，相对比较简单，所以以下介绍的换肤方法仅适用于页面换肤而非整个项目换肤。"}, {"id": "6990272269251510286", "title": "Vue 中 computed 与 watch 的区别", "desc": "字面上的区别 computed 是计算属性，它会根据你所依赖的数据动态显示新的计算结果 watch 是一个对 data 的数据监听回调, 当依赖的 data 的数据变化时, 会执行一个回调函数。在回调"}, {"id": "6998033845157117965", "title": "Vue3 造轮子--学习记录", "desc": "学习过程记录 效果链接：https://wbs99.github.io/good-ui-website/#/ 源码链接：https://github.com/wbs99/Good-UI 使用 Vite"}, {"id": "6844903773240819726", "title": "手把手实现图片懒加载+封装vue懒加载组件", "desc": "以上实现的只是比较粗糙的版本，要真正实现性能大幅提升优化还需要处理较多的细节，本文旨在让帮助部分同学了解基本原理，有了宏观的认识后，可以尝试去读一下相关这种懒加载插件的源码，能学到不少东西。"}, {"id": "6966066287365586958", "title": "elementui移除tab报Avoided redundant navigation to current location: ***", "desc": "0 环境 系统环境：win10 1 问题 2 解决 参考文章 1 路由push异常处理 2 修改移除标签方法里代码逻辑"}, {"id": "6932301613298089992", "title": "微前端-vue3.0 实践", "desc": "微前端就是将不同的功能按照不同的维度拆分成多个子应用。通过主应用来加载这些子应用，核心在于拆，拆完在合。 Single-SPA是一个用于前端微服务化的JavaScript前端解决方案（没有处理样式隔离、js隔离）实现了路由劫持和应用加载。 子应用安装single-spa-vue…"}, {"id": "6921644175200878606", "title": "精细控制transition细节 - 实现一个活泼的弹框", "desc": "作为一个前端，用户的良好体验是我们的基本信仰！一个有趣的交互会使用户对页面的好感提升，一个恰当的反馈能使用户轻松理解你想表达的意思。 本篇文章带大家一步一步打造一个活泼的轻量级弹框。你会学到： 其实这两个元素是叠在一起的，为什么要单独用一个div来做遮罩呢，是因为我们想要独立控…"}, {"id": "6917231385518276616", "title": "element-ui 二次封装系列- button(三)", "desc": "很多时候 ,我们希望按钮能有一个 tooltip的功能,鼠标放在按钮上能够展示一些解释性的文字,el-tooltip组件正是实现这个功能的,但是直接用el-tooltip组件代码非常多,需要将el-button作为slot插入内容,如果能直接给button上添加content自…"}, {"id": "6974669399844192270", "title": "vue element-ui表格关闭时，清空表单", "desc": "1.在html( <el-dialog)中 添加 @close=\"resetForm('datadialogsell')\" 2.在methods中 添加 resetForm(formName) { t"}, {"id": "6844904185092112391", "title": "2020年，你可能需要基于Vue的微服务架构实践，在服务端或客户端聚合子服务", "desc": "微服务是一个新兴的软件架构，就是把一个大型的单个应用程序和服务拆分为数十个的支持微服务。 随着业务的发展，项目规模越来越大，给编译打包、合并的代码冲突带来了巨大的挑战，而服务的拆分可以获得更快的编译打包，独立部署、增量更新、不同的团队只需要负责自己的服务、更好的支持多端，在大型…"}, {"id": "6995364952852660237", "title": "回首Vue3之组件篇（三）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 这篇文章我们来讲一下内置组件keep-alive和slot的使用方法，在使用它们的时候我们又该注意什么呢，下面让我们一探究竟把。 keep"}, {"id": "6844904035628122120", "title": "UI组件库开发-从开发到发布到npm（更新用插件按需加载）", "desc": "在参考过一些资料和开源的UI组件库后，写下了这篇文章，希望能给大家一些帮助。 本次开发没有基于Vue CLI来搭建开发环境，而是基于我上次webpack4自己搭建的环境来构建的环境，虽然官方CLI也可以，而且也有自己的库模式来发布组件库。但是为了能够更多的有自己自定义的选项，还…"}, {"id": "6917525035276042247", "title": "七日打卡-addEventListener() 事件监听", "desc": "第二个参数是事件触发后调用的函数。 第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。 注意:不要使用 \"on\" 前缀。 例如，使用 \"click\" ,而不是使用 \"onclick\"。 事件传递有两种方式：冒泡与捕获。 事件传递定义了元素事件触发的顺序。 如果你将…"}, {"id": "6951281282881945631", "title": "vue中实现多附件上传", "desc": "本篇主要记录在 Vue项目中 实现附件上传功能，可实现单/多附件上传，识别文件格式并用不同图标展示功能，及控制是否可编辑功能。内容简洁易懂，如有需要可自取。"}, {"id": "6878648701078896647", "title": "Re:从零开始的仿网易云webApp", "desc": ".... 这个项目算我最新的一个个人项目，所以目录结构以及代码也算目前的最高水平。兼容性问题以及细节优化并没有做很多处理，还有很多界面没有实现（要学东西，要刷面试题，等有工作后慢慢折腾），因为当务之急得找工作。另外我的个人博客 https://www.adicw.cn记录了很多…"}, {"id": "6974400885656911879", "title": "【Vue2.x 源码学习】第十四篇 - 生成 ast 语法树 - 模板解析", "desc": "【Vue2.x 源码学习】第十四篇 - 生成 ast 语法树 - 模板解析；使用正则对 html 模板进行解析和处理，匹配到模板中的标签和属性"}, {"id": "6974363009544093709", "title": "关于Vue的简单使用", "desc": "一、vue数据 1、div中{{msg}}表示动态绑定数据； 2、<script>标签中定义数据； 则页面会动态获取数据并渲染出来。 二、vue常用指令"}, {"id": "6844903927461183502", "title": "Vue基础篇: 组件参数校验与非props属性", "desc": "一、组件的参数校验子组件如何对组件进行约束父组件通过属性的方式对子组件传递内容数据，而子组件通过props的方式对数据进行接收，这时，子组件可以组件中的props传参的规则，设定属性的数据类型：单一数"}, {"id": "6844904051545473037", "title": "自建vue组件 air-ui (2) -- 先分析一下 element ui 项目", "desc": "工欲善其事必先利其器，既然我们的 air-ui 大部分都是借鉴 element-ui 项目，所以本章我们就来分析一下 element-ui 项目源码。 第一次的时候，会先安装依赖。在本地浏览器打开 localhost:8085，可以看到跟官网的站点一样: 1. dev 环境的构…"}, {"id": "6930434653484482568", "title": "Vue-组件", "desc": "为什么data不能为对象，因为data如果是对象也就是引用数据类型 ，在重复使用同一个组件时，每一个组件的data都是同一个地址，使用data数据会相互影响，也就是浅拷贝。 在父组件中使用slot-scope属性，接收子组件绑定的属性上的数据 ，然后进行加工。"}, {"id": "6844903856468393997", "title": "【第二期】创建 @vue/cli3 插件，并整合 ssr 功能 ----【SSR第二篇】", "desc": "在上一篇文章《基于 @vue/cli3 与 koa 创建 ssr 工程》中，我们讲解了如何基于 @vue/cli3 创建一个 ssr 工程。 在本篇文章，我们来创建一个 @vue/cli3 插件，并将第一篇文章中 ssr 工程的服务器端部分整合进插件中。 除了上述两个功能外，我…"}, {"id": "6988399138735915022", "title": "Element中el-table-column的常见问题", "desc": "问题1：在el-table中后台返回的数据是Boolean时，表格会直接显示后台返回的Boolean值，而我们想要为true时为'是'，false为'否' 解决问题1： 绑定formatter用来格式"}, {"id": "6916759124009025549", "title": "vue数据响应式白话版", "desc": "我们都知道在vue示例中，data数据发生改变时，视图层也会发生改变，匹配更新为最新的值。 也正是因为这个系统，让我们可以脱离界面的束缚，只需要操作数据。往下看⬇⬇⬇⬇⬇"}, {"id": "6844903646652547079", "title": "5分钟彻底理解Object.keys", "desc": "为什么Object.keys的返回值会自动排序？本文详细讲解了原因以及Object.keys的内部原理"}, {"id": "6914110659014148109", "title": "谈一谈Vue组件通信", "desc": "组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树： 可以有一部分内容放在父组件文件中写，然后由子组件组织并展示，这就用到slot插槽。"}, {"id": "6844903543166468110", "title": "基于 vue.js 的前端开发环境，用于前后端分离后的单页应用开发", "desc": "项目简介基于vue.js的前端开发环境，用于前后端分离后的单页应用开发，可以在开发时使用ESNext、scss等最新语言特性。项目包含：基础库:vue.js、vue-router、vuex、whatw"}, {"id": "6844904104989294599", "title": "2020前端技术面试必备Vue：(一)基础快速学习篇", "desc": "本章节，我将带领大家一起刷Vue 技术点，来应对接下来的面试，此次会陆续更新Vue全家桶：Vue VueX Vue-Router ；以及后面时间充足的话，来实现一个Vue项目。"}, {"id": "6920164673773895688", "title": "Vue事件总线和keep-alive", "desc": "一些特殊的场景（如没有父子关系），那么Vue自带的通信事件解决不了。需要用到事件总线：、 后面再一次依次去触发的时候会出现，每一次都会发现好像之前的on事件分发都没有被撤销一样，导致每一次的事件触发执行越来越多。 如下 但是又多了俩个生命周期函数activated、deacti…"}, {"id": "6844903651559866382", "title": "从源码解析vue的响应式原理-依赖收集、依赖触发", "desc": "想要搞清楚这些，不得不看一波源码了。下面，请跟我从vue源码分析vue的响应式原理 其中划重点的 initState() 方法中进行了 props、methods、data、computed以及watcher的初始化。在instance/state.js中可以看到如下代码。 划…"}, {"id": "6844904135599325197", "title": "Vue3中对VDOM的改进", "desc": "vue-next 对virtual dom的patch更新做了一系列的优化，从编译时加入了 block 以减少 vdom 之间的对比次数，另外还有 hoisted 的操作减少了内存的开销。本文写给自己看，做个知识点记录，如有错误，还请不吝赐教。 VDOM的概念简单来说就是用js…"}, {"id": "6904811612809625614", "title": "使用Swiper快速实现3D效果轮播", "desc": "最近经常接到轮播图3D效果的需求， 特在此记录一下以备之后使用。 在这里介绍两种使用方式， 一种原生的html+php后端渲染， 一种是使用vue。 首先我们介绍原生的使用方式，按照swiper官方文档引入swiper.min.css和swiper.min.js。 主要通过sl…"}, {"id": "6988063307840110629", "title": "Vue的数据响应式？怎么理解？", "desc": "图画版本（建议看图说话） 上面的图完美解决了问题“为什么我修改vm.n，界面中的UI也会改变，因为装了监听之后，所有的改变都会实时走图中的逻辑闭环。 关于图中的一些说明 Object.definePr"}, {"id": "6864396298394189832", "title": "Vue3响应式原理剖析", "desc": "通过上面测试代码发现，reactive方法中的对象中如果还嵌套其它对象就不能正确get取值了，下面我们来解决这问题。 通过完善，对象嵌套嵌套对象不能触发get的问题就解决了，下面来建立响应数据和更新函数之间的对应关系。"}, {"id": "6844904050966659085", "title": "理清Vue响应式系统中的Watcher和Dep的关系", "desc": "响应系统中的Watcher即这个系统的观察者，它是响应系统中观察者模式的载体，当响应系统中的数据发生改变的时候，它能够知道并且执行相应的函数以达到某种业务逻辑的目的。打个比方，如果你是一个商家，要寄一批货分别给不同的客户，那么watcher就是一个个快递员，发出的动作就是数据发…"}, {"id": "6984218819354951710", "title": "Vue+ElementUI 侧边菜单栏修改大小，保留折叠效果", "desc": "问题：侧边菜单栏有很多分级，子菜单缩进了，如果子菜单过长就会被挡住。 解决方案：用三目判断，根据sidebarFold的tf值来修改style，保留折叠的效果。 ps：折叠效果"}, {"id": "6985006422333325325", "title": "菜鸡学源码Vue —— (_render()做了什么)", "desc": "回顾 上节讲到了Vue的实例化过程，实际上就是调用了updateComponent()中的_render()生成虚拟化dom，_update()将虚拟化dom生成真实的dom，那么本节来看一下_ren"}, {"id": "6844903744530808846", "title": "炫酷的圆环加载及数字滚动效果（上）", "desc": "实际项目开发时候需要实现圆环加载及数字滚动的效果,接下来分享下自己的实现思路和做法。 vue本身就是根据数据来驱动view层的显示,实现数字的滚动本质就是设置一个延迟函数改变数据的同时，view层的显示也会随着改变达到渐变的效果。 逻辑部分抽离出来放在 countup.js文件…"}, {"id": "6870872163386146824", "title": "前端工程化(1)—带你用node手写脚手架", "desc": "随着自己技能和工龄的增长，接手的项目业务逻辑越来越复杂，需求也在不断增加。自己对于技术的思考也会越来越深入。 创建vue、react项目时，我们可以使用cli工具快速构建，但是其原理是什么，如何实现呢？如果想在普通项目中也引入能提高开发效率的es6、sass等，上线前的编译却又…"}, {"id": "6987058003081953316", "title": "用vue-cli4来封装一个自己的ui库", "desc": "一、组件库是基于vue-cli框架的的，用vue-cli创建项目 二、修改目录，以及重新修改配置文件。 1、很多的开源组件库的源码，都喜欢用packages目录存放组件，examples目录用来展示组"}, {"id": "6844903990350610446", "title": "一份配置，轻松搞定Vue表单渲染", "desc": "表单可以说是前端开发中最经常遇到的元素之一。在日常表单的开发中，存在着 v-if 条件渲染、满屏 magic number 枚举值，再加上表单之间的复杂的联动交互的情况，往往使得一个看似简单的表单变得愈加臃肿不堪。 表单的联动关系与状态重置往往散落在各个函数方法中，随着需求的不…"}, {"id": "6844903809823539207", "title": "给你的 VuePress 添加 Gitalk 评论插件吧", "desc": "目前 VuePress 的稳定版是 0.44.x，不过这里我们直接用 1.0.0-alpha.44，因为稳定版功能实在是太烂了... 关于安装 Vuepress 及配置这里不详细说，具体请看 官方文档。 网上有一些教程使用 enhanceApp 创建 Gitalk， 但此方法有…"}, {"id": "6887935163712405517", "title": "Vue源码之组件化", "desc": "Vue另⼀个核⼼思想是组件化，把⻚⾯拆分成多个组件，每个组件有自己的 template、js、CSS。组件可复⽤，组件和组件之间可嵌套。 接下来用下面代码为例，来分析⼀下 Vue 组件初始化的⼀个过程。 Vue.extend 的作⽤就是构造⼀个 Vue 的⼦类，它使⽤⼀种⾮常经…"}, {"id": "6921612226931458055", "title": "vue-element-admin后台项目总结（一）", "desc": "权限路由主要作用是进行权限的认证，不同角色进入到系统给出不同的菜单以及路由，大部分权限路由是通过在router中设置路由拦截器 beforeEach 进行判断Cookie或者Session是否已经存在登录验证的Token，如果有就进行下一步的操作去后端获取路由信息，没有就弹出到…"}, {"id": "6895942825385558030", "title": "vue实现坐标拾取器功能示例", "desc": "需求1、搜索具体地址，自动填写经纬度，并在地图上标记2、点击地图上一点，可重新填写经纬度并且标记代码在dom新建div渲染地图js定义地图变量并设置需求文档参考以上代码使用的是jsapi功能，目前对应"}, {"id": "6858102204927049735", "title": "（一）Vue常见面试题，看看你都会了吗？", "desc": "Vue通过设定对象属性的 setter/getter 方法来监听数据的变化，通过getter进行依赖收集，而每个setter方法就是一个观察者，在数据变更的时候通知订阅者更新视图。 observe这个函数传入一个 obj（需要被追踪变化的对象），通过遍历所有属性的方式对该对象的…"}, {"id": "6844904103500316680", "title": "Vue修饰符集合", "desc": "这样会把 doc 对象中的每一个属性 (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。"}, {"id": "6937610621634641956", "title": "重学Vue【异步组件原理分析】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 我们可以通过上面的例子创建一个全局组件，和上篇分析组件注册有点不一样的是，例子中注册的全局组件不是一个对…"}, {"id": "6987025791867420709", "title": "mixin混入的简单使用", "desc": "mixin 混入 vue中提供了一种混合机制--mixins，用来更高效的实现组件内容的复用。 作用：多个组件可以共享数据和方法，在使用mixin的组件中引入后，mixin中的方法和属性也就并入到该组"}, {"id": "6893788892944662541", "title": "vue 图片裁剪上传组件", "desc": "但是浏览器原生的文件上传按钮的颜值不尽人意，而且按钮上的文字是无法改变的，我需要把这个上传文件的按钮改造一下。 方法2：或者在这个label元素的click事件函数中手动触发文件上传按钮的click事件。 弹窗使用的 Element-UI 中的弹窗, 图片裁剪是第三方插件 vu…"}, {"id": "6917218644711702541", "title": "快速搞定，查询 + 表格，这种页面", "desc": "做后台系统的时候，估计接触最多的就是表单 + 表格，以此进行增删改查的操作。 本篇，努力将增删改查的通用逻辑分析清除，使用的时候，能通过简单的配置，就搞定一个复杂的页面。 1. 基础的查询和表格 第一步，先将表单显示出来，表格的数据通过请求拿到数据，也显示出来。 之前封装过表格…"}, {"id": "6844904154448527374", "title": "Vue CLI 源码探索 [三]", "desc": "Vue CLI 源码探索 [六] 探索下 Vue CLI 的插件机制，内容较多，请慢慢看。涉及如下插件（@vue/cli-plugin-vuex/router/babel/typescript/eslint） 被实例化的 Serice 是 const Service = req…"}, {"id": "6844903839569543182", "title": "vue权限问题解决方案", "desc": "最近一直在忙着一个用vue来做的权限管理的项目，其实在此之前，我也研究过vue的权限如何实现，并且也为之写过一篇博客，但当真正应用在项目中的时候，还是发现了许多问题，所以此篇也会就着我在项目中遇到的一些问题，拿出来和大家分享一下，当然示例代码还是我的github仓库中的ant-…"}, {"id": "6869067224465408008", "title": "Vuejs--认识脚手架", "desc": "cli，俗称脚手架。全称是command line interface. vue-cli 是vue官方发布的开发vue项目的脚手架。 在生活中，脚手架是我们为了建房子搭的架子。为了我们建房子做的准备工作。同样，cli，就是为了我们开发项目，搭建环境。它的作用主要是 搭建Vue开…"}, {"id": "6931296144295198728", "title": "vue项目中实用的自定义指令", "desc": "在我们开发过程中，有些处理起来非常麻烦的小功能，用自定义指令可能非常简单就能实现。首先看下vue官网关于自定义指令的介绍： 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件…"}, {"id": "6992015968708853797", "title": "前端开发 初步了解Vue与前端历史", "desc": "VUE.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。另一方面，在与相关工具和支持库一起使用时，VUE.js 也能完美地驱动复杂的单页应用。"}, {"id": "6844903896985387022", "title": "翻译：Vue.js 2.6.0 中的新指令v-slot", "desc": "为了提高英文水平，尝试着翻译一些英文技术文章，首先就从这个Vue的小技巧文章开始，目前英文版一共22篇。计划用时2~3个月翻译完成。 上周发布了Vue.js的版本2.6.0-beta.3，启用新的功能能够进一步简化作用域插槽。 它引入了新的v-slot指令及其简写，如RFC-0…"}, {"id": "6941918738320982023", "title": "Vue3实践总结-状态管理", "desc": "多个组件，多个模块之间共享状态是最常见的开发述求，场景之多不胜枚举，例如全局用户状态，修改用户信息全局响应变化等等。 简单方案基于事件监听机制利用回调传参，多处订阅实现数据的流转。例如官方推荐的mitt事件库。优势简单的数据事件通信是能满足的，劣势随着数据复杂性变动，回调写法的…"}, {"id": "6984252233089024008", "title": "探索Vue-CLI 源码", "desc": "探索Vue-CLI 源码 ps：建议配合源码看、基于`@vue/cl 当我们看到`vue-cli-service serve`和`vue-cli-service build`，不想知道是发生什么事吗？"}, {"id": "6913837929718611975", "title": "还是自己Vue.js封装地区级联组件吧！", "desc": "我们要有一个演示页面，或者在已有的vue项目中能够展示，因为我们是要建立组件库，所以我们直接新建vue-cli项目。 准备地区级联的数据，我是从github上下载的到区级的数据。 新建组件文件，命名为if-cascader，这里使用的sass编辑样式。 地区数据更新后，需要组件…"}, {"id": "6921510821046517773", "title": "Vue-Element-admin 的动态路由手把手教学", "desc": "Vue-Element-admin的动态路由手把手教学概要本文讲述了如何在vue-element-admin的基础模板下完成动态路由的功能整篇的登录权限流程再此就不赘述了，直接上代码喜欢的小伙伴或者有"}, {"id": "6921263173890916365", "title": "vue组件中的data为什么必须是函数？", "desc": "可在源码中找到答案：src/corn/instance/state.js  （initData方法中）首先我们熊源码中找一下答案，贴出一张源码图源码中判断了data是否是个函数，如果是函数，就会使用g"}, {"id": "6911352757400109063", "title": "从0到1搭建一款Vue可配置视频播放器组件（Npm已发布）", "desc": "话不多说，这篇文章主要讲述如何从0到1搭建一款适用于Vue.js的自定义配置视频播放器。我们平时在PC端网站上观看视频时，会看到有很多丰富样式的视频播放器，而我们自己写的video标签样式却是那么丑。其实像那些网站都是基于原生video标签进行开发的，只不过还得适当加工一下，才…"}, {"id": "6988033429564719111", "title": "Vue中几种常用的组件通信方式", "desc": "在Vue项目开发中，会使用到很多组件，组件间的通信是Vue中的核心知识，掌握这几个知识，会让你Vue开发中游刃有余。"}, {"id": "6844903551932563464", "title": "超简单入门Vuex小示例", "desc": "本文旨在通过一个简单的例子，练习vuex的几个常用方法，使初学者以最快的速度跑起来一个vue + vuex的示例。 学习vuex需要你知道vue的一些基础知识和用法。相信点开本文的同学都具备这个基础。 另外对vuex已经比较熟悉的大佬可以忽略本文。 进入项目目录，使用npm r…"}, {"id": "6868473780180615175", "title": "[组件篇]-我是这样写lazyLoad和v-lazy", "desc": "图片懒加载是一种可是范围内的网页优化技术。图片作为一种网络资源，在被请求时也与普通静态资源一样，将占用网络资源，而一次性将整个页面的所有图片加载完，将大大增加页面的首屏加载时间。为了解决这种问题，通过前后端配合，使图片仅在浏览器当前视窗内出现时才加载该图片，达到减少首屏图片请求…"}, {"id": "6904469622922149902", "title": "推荐在vue中最好用的编辑器 —— vue-json-editor", "desc": "普通vue，使用起来就方便多了，可以全局注册，也可以组件注册，直接引入，在components中注册即可使用，后面的使用就是一样的，不多赘述。"}, {"id": "6970294335740837918", "title": "Vue.js 3.0 探索", "desc": "1.源码组织方式的变化 源码采用 TypeScript 重写 使用 Monorepo 管理项目结构，每个模块可单独测试、发布、使用 源码目录结构：compiler 开头的为编译相关的代码， compi"}, {"id": "6916135317397307400", "title": "Vue项目中的路由鉴权", "desc": "之前重构公司的管理系统项目，到现在基本就剩权限部分了。整个项目由于前期需求不明确，逻辑不清晰等，导致一开始就没有做权限的划分，后续随着需求的增加，整个系统的前后端的用户鉴权部分均出现一些问题，无法满足现有业务的需求，所以重构这部分的内容也就迫在眉睫了。 项目现有的权限划分基于功…"}, {"id": "6844904029877698568", "title": "深入理解Vue完整版和runtime版", "desc": "运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切"}, {"id": "6935265213553836039", "title": "Vue源码之event", "desc": "1.在闭合标签后执行closeElement，然后执行processElement执行processAttrs。 2.processAttrs获取到el.attrsList，遍历判断name是否是指令，是的话获取修饰符通过对象返回出来。 3.判断name为v-on进入逻辑执行，…"}, {"id": "6906757025356021767", "title": "1.0之了解vue3的改动", "desc": "vue3 的版本现在也已经发布了正式版本，这就说明之后不管怎么变动都不会太大，只会打点补丁新增写特性之类的。而其他一些 vue 的相关配件， 如 vuex , vue-router, vue-cli 等都处于 beta 状态了。在这个时候， vue3 可能还不会大规模的使用， …"}, {"id": "6844904162258321415", "title": "每天一个偷懒小技巧之开发一个poptip指令", "desc": "即要实现一个poptip指令，当trigger触发poptip时，render出一个poptip，提示还是采用当前的组件。 「注意：new Vue挂载的节点会直接替换当前的DOM，所以不能直接在当前的el上挂载。el可以为DOM或者‘#’+id。」 当前的节点不能作为Vue实例…"}, {"id": "6909013495010820104", "title": "检测元素点击在指定范围之外指令实现，vue3+ts，文末有非ts实现，看elementPlus源码所得", "desc": "闲言碎语自己在写组件库，目前已经写了popper组件，popup组件，然后现在在写颜色选择器。全部都是用的vue3和ts。缘起于popper组件的细节优化。我的颜色选择器组件，基于popper为底层组"}, {"id": "6844903555598401544", "title": "Vue2.5 结合 Element UI 之 Table 和 Pagination 组件实现分页", "desc": "2017年底了，总结了这一年多来的前端之路，Vue从入门到放弃，再二进宫，从 Vue1.0 持续跟踪到 Vue2.5。结合公司的一些实际项目，也封装了一些比较实用的组件。 由于现在公司管理平台主要运用Element UI，索性就结合组件Table 和 Pagination 封装…"}, {"id": "6979793490016223239", "title": "MessageBox组件的Promise使用原理", "desc": "背景： 搭建前端框架时，需要对提示框进行定制化。开始查看MessageBox的源码，在梳理源码代码的过程中，我发现MessageBox里使用到了Promise。学习之路就此开启"}, {"id": "6844903626205298701", "title": "html2canvas的踩坑之路", "desc": "早有耳闻这个html2canvas比较坑,但无奈于产品需求的压迫,必须实现html转图片的功能,自此走上了填坑之路,好在最后的效果还算令人满意,这才没有误了产品上线周期. html2canvas的详细介绍可以点击这里查看,其实简单来说就是通过canvas将HTML生成的DOM节…"}, {"id": "6985188012569133070", "title": "Vue2.0 侦听器模拟实现", "desc": "Object.defineProperty 的使用 第一个参数，需要定义属性的对象 第二个参数，需要在第一个参数对象上定义的属性名 第三个参数，一些配置（描述符） configurable 描述符能否"}, {"id": "6968070822653067295", "title": "vue+element大型表单解决方案(6)--自动标识", "desc": "上一篇实现了保存时校验表单，并把未通过的子表单标识在锚点中。美中不足的是，标记不会随表单填写自动标记，这给用户带来一定的困扰，这一篇将实现在锚点中自动标识表单的状态。"}, {"id": "6985872601441075231", "title": "Vue 组件传值", "desc": "vue中的组件传值有三种方式:父传子、子传父、非父子传值 前言 简而言之，父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息，如下图所示 父传子 父组件里面用属性传递 ，子组件内用"}, {"id": "6914239652136714247", "title": "通过vue.extend实现消息提示弹框", "desc": "在你还没有解决第二个需求的时候，又一个需求来了，第三个需求是不仅仅是注册页面需要用到这个消息弹框组件，在其他多个页面中也需要用到这个消息弹框组件。"}, {"id": "6992870949980733448", "title": "vue watch 如何监听一个对象内部的变化(deep)", "desc": "监听某个属性 如果只是监听对象的某个属性的话，可以使用字符串的形式监听属性 (对象.属性名) 深度监听 当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，此时需要deep属"}, {"id": "6844903927129849864", "title": "深入剖析Vue源码 - Vue插槽，你想了解的都在这里!", "desc": "从根实例入手进行实例的挂载，如果有手写的render函数，则直接进入$mount挂载流程。 只有template模板则需要对模板进行解析，这里分为两个阶段，一个是将模板解析为AST树，另一个是根据不同平台生成执行代码，例如render函数。 $mount流程也分为两步，第一步是…"}, {"id": "6989820543989989389", "title": "Vue插件要点分析", "desc": "一、vue.use源码分析 要点一：避免重复安装，首先会有检验是否已经安装过了，是的话，直接返回 要点二： 如果插件有install方法，则直接调用install方法 如果插件本身是一个方法，则直接运"}, {"id": "6844904040455733262", "title": "Vue with TypeScript", "desc": "最近重新看了下这个文章，发现这个文章没有标明 ts 预发预发高亮，于是把预发高亮加了上去，还有就是编写本文的环境是 Vue 2.5.*，可能对于现在的环境有些不太合适，里面有些插件或者一些实现方式，可能有些改变，或者 Vue 官方已经有不同的实现方式，所以本文章还是当做参考，毕…"}, {"id": "7000552107321327629", "title": "回首Vue3之实例篇（二）", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 这篇文章我们来讲一下实例 property $options、$parent、$parent、$root、$refs和$attrs的使用，"}, {"id": "6991440484908400648", "title": "vuex的使用，简单明了，大白话教学", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式，作为vue生态的重要组成部分，了解并能熟练使用vuex是每一个vue开发者必备的技能。"}, {"id": "7000703062767566878", "title": "Vue的自定义指令", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 1.什么是自定义指令 要弄明白这个东西的话，我们要先知道什么是指令，在vue中像v-bind,绑定解析表达式v-on绑定事件函数， 指令 "}, {"id": "6844903614469636110", "title": "Touch UI：基于vue的高质量移动端UI框架", "desc": "Hi，我们做了一款高质量的、免费的移动端UI框架。 经过将两年多开发和项目实践，我们终于把Touch UI开放出来了。这是一套基于vue.js打造的移动端UI框架，包含近百种组件，几乎囊括了开发移动应用的所有细节。 Touch UI有何亮点？ 我们认为，一套足够好的移动端UI框…"}, {"id": "6844904162946187277", "title": "vue中的修饰符", "desc": "但是有时候我们希望，在我们输入完光标离开才更新视图,相当于在onchange事件触发更新。 如果你先输入数字，那它就会限制你输入的只能是数字。 一键阻止事件冒泡，相当于调用了event.stopPropagation()方法。 用于阻止事件的默认行为，例如，当点击提交按钮时阻止…"}, {"id": "6844904135238647821", "title": "移动端pdf预览-水印&电子签章问题", "desc": "记录一下在开发pdf文件预览时遇到的问题，主要是水印和电子签章问题。由于网上也查了不了方案，但解决方案都不适用在生产环境，所以决定贴一下自己的方案。 目前主流的移动端pdf文件预览库都是基于mozilla的pdf.js，本文要介绍的两个库也不例外，分别是react的react-…"}, {"id": "6973828606933860382", "title": "令人眼前一亮的Vue实战技巧", "desc": "本文主要介绍日常项目开发过程中的一些技巧，不仅可以帮助提升工作效率，还能提高应用的性能。以下是我总结一些平时工作中的技巧。"}, {"id": "6949481542431277093", "title": "一文搞定数据响应式原理", "desc": "该文由浅入深、层层递进的讲述数据响应式原理，讲述内容包含侦测数据变化及依赖收集。通过本篇文章一定能够彻底了解数据响应式原理，为面试加分。"}, {"id": "6995911736343674887", "title": "在Vue项目中如何使用SVG矢量图", "desc": "首先我们先简单了解一下什么是SVG矢量图，使用它有什么优点？然后再来讲解如何在一个新的Vue项目中使用它。"}, {"id": "6907424006580731918", "title": "『前端工程』—— 如何搭建一个UI组件库", "desc": "年前入职新公司，公司要求搭建一个UI组件库，本专栏详细记录搭建思路和步骤，最后有项目github地址。 安装完成后，输入命令vue --version，查看Vue CLI的版本号是否是3.0以上，是则表明安装成功。 1、在文件夹地址中输入cmd，打开命令行工具。 2、在命令行工…"}, {"id": "6991593579592286244", "title": "NutUI 3.0 助力企业业务售后门户建设", "desc": "NutUI 是一套京东风格的轻量级移动端 Vue 组件库。Vue 3.0 正式发布后，NutUI 作为 Vue 生态中最流行的 UI 组件库之一，及时推出基于 Vue 3 语言版本的 NutUI3.0"}, {"id": "6965340608118390815", "title": "如何基于vue开发ui组件库（heaven-ui）", "desc": "Vue是⼀套⽤于构建⽤户界⾯的渐进式框架,⽬前有越来越多的开发者在学习和使⽤。⽽组件库能帮我们节省开发精⼒，⽆需所有东⻄都从头开始去做，通过⼀个个⼩组件拼接起来，就得到了我们想要的最终⻚⾯。"}, {"id": "6844904163772629005", "title": "什么情况下Vue使用index作为key会出问题", "desc": "在动态删除v-for渲染的列表的过程中，如果key指定为index，则可能出现渲染错乱的问题。比如，你的列表有两行，你明明删了第一行，结果却是第二行消失了。 问题源于key的重复，假设你的列表有两行，当你删了第一行，那么第二行的key就变成了第一行的key，这两个key是相同的…"}, {"id": "6844903656827912206", "title": "带你走近Vue服务器端渲染（VUE SSR）", "desc": "上篇文章（《服务器端渲染与Nuxt.js》）介绍了服务器端渲染和一些Nuxt.js的概念，现在我们就Vue SSR方面，从基础开始，分低、中、高三个层面，来手写实现下传说中的服务端渲染。 在正式搭建项目之前，我们还是要回顾下vue服务器端渲染的一些特性。 服务器端渲染的 Vue…"}, {"id": "6844904144935845901", "title": "手拉手带你开启Vue3世界的鬼斧神工", "desc": "2020注定是不平凡的一年，无论是疫情的横空出世，还是世界局势的激烈动荡，抑或是股市的跌宕起伏，我相信很多国人都会有一种庆幸我是中国人的深刻感悟。作为一名技术宅，除了疫情，更多的还是雨女无瓜，随着Vue3.0 Beta的推出，大家都争先恐后的尝了鲜，笔者也不例外，经过一番研究，…"}, {"id": "6986646914440085512", "title": "使用MathJax 3 渲染数学公式及在Vue中的使用", "desc": "最近在重构一个项目时，新增了一个需求支持latex数学公式渲染和编辑。在经过一番调研对比后，目前浏览器兼容性比较好的有两个，分别是KateX和MathJax。 性能对比截图 MathJax3 Math"}, {"id": "6844903692987023373", "title": "基于 Webpack4 搭建 Vue 开发环境", "desc": "自从工作之后，就已经很久没有写过博客了。时间被分割得比较碎，积累了一段时间的学习成果，才写下了这篇博客。 之前有写过 Webpack4 的文章，但是都比较偏入门，唯一的一篇实战篇 —— 基于Webpack搭建React开发环境，也是比较简单的，没有涉及到 CSS 抽取，第三方库…"}, {"id": "6966419951057895432", "title": "VUE 实现超简单星级「展示、选择」组件", "desc": "星级展示应该是个挺常见的需求，刚好项目中有碰到。所以分享一下实现的过程，方便以后复用 一、需求分析 先看个常见的星级展示 UI ​ ​ 分析组件需要的参数 ​ 属性 ** 含义** 默认值 类型 va"}, {"id": "6967891978725883935", "title": "Vue 高阶，你值得拥有！｜周末学习", "desc": "用了很久 Vue 全家桶开发项目，自我感觉还是挺熟练的。但是面试的时候竟然还是被 Vue 相关知识点问倒？这不应该啊，因此下决心一口气记录下以下问题，相信我搞懂了这些，Vue 再也难不倒你！"}, {"id": "6978528548793352199", "title": "【项目实战】Vue项目开发之自定义指令（二） ", "desc": "这是我参与更文挑战的第 17 天，活动详情查看： 更文挑战 工欲善其事，必先利其器。实践（巧偷懒）促进科技发展-_-! 本文分享项目实战中的 自定义指令 （二）"}, {"id": "7004833916431532063", "title": "vue3 笔记", "desc": "vue3 官方文档笔记，记录自己不会的知识点或者第一次看到的知识点，目前正在阅读文档，后续持续更新。"}, {"id": "6921589536233390093", "title": "【Vue 故地重游】03.细读 Vue2 核心源码", "desc": "Vue3发布已有 9 个月，相比Vue2确实做了太多优化，于是想着重新再仔细全面地研究一下Vue2源码，然后对比Vue3做个整理，方便以后复习查阅。 2.1. 全局安装 rollup 2.2. 修改 dev 脚本，package.json 3.1. 打包脚本： npm run …"}, {"id": "6844904153936822285", "title": "通过10个实例小练习，快速熟练 Vue3.0 核心新特性", "desc": "Vue3.0 发 beta 版都有一段时间了，正式版也不远了，所以真的要学习一下 Vue3.0 的语法了。 api 的使用都是很简单的，下文的内容，看例子代码就能懂了的，所以下面的例子不会做过多解释。 使用 Composition API 时，反应性引用和模板引用的概念是统一的…"}, {"id": "6986767051045994532", "title": "vue知识点", "desc": "1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？ SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS"}, {"id": "6844903646677696526", "title": "\b简易商城小程序全栈开发(mpvue+koa+mongodb)", "desc": "接触小程序有一段时间后并且多多少少做了一些项目之后，又开始了vue的旅程，受其核心思想的影响，对数据/状态管理、组件化、跨平台等都有较高的追求，mpvue 是一个使用 Vue.js开发小程序的前端框架，由此开始了mpvue踩坑之旅，想在提高代码可读性的同时，也增加一点vue.j…"}, {"id": "6966810767551103012", "title": "Vue 3 学习笔记", "desc": "Vue 3 数据响应式 Vue 2 的数据响应式底层实现是 Object.defineProperty(),对于数组则是拦截了数组的七个方法。这种方式存在的问题是对于对象没有办法检测到属性的添加或删除"}, {"id": "6992208596591181860", "title": "记录一次两年前的Vue项目升级", "desc": "记录一次两年前的Vue项目升级。 包括vue配置、webpack配置、babel配置、eslint及husky配置"}, {"id": "6993184301911130149", "title": "vue3.0 视频播放插件（vue-vedio-player）", "desc": "首先我们先安装这个插件 我们需要在main.js里面导入并引用 那么我们怎么使用了？ html部分 js部分 style部分 最后我们来看一下效果"}, {"id": "6844903752164442120", "title": "（译）函数式组件在Vue.js中的运用", "desc": "你是否曾经遇到过这样一个场景，你有个需求需要引入一个第三方库，然而你只需要使用这个库里面某一个功能，如果这个库不支持分模块导出的话，就会因为引入整个库而导致项目体积变大，进而影响项目加载性能。 再比如，下拉列表、时间选择器或者自动填充属性等自定义控件都是非常复杂的，需要考虑很多…"}, {"id": "6932778086903578632", "title": "可视化拖拽页面编辑器 四", "desc": "当选中block后 mousedown事件，在dragState中记住初始位置，计算出选中block与所有未选中block，左右、上下对齐的各种情况的坐标位置，并进行缓存。 1. 数据准备 3. 新建一个属性面板组件 visual-editor-operator.tsx在vis…"}, {"id": "7000027690459725832", "title": "No.25 vue-element-admin 学习使用（二十）CountTo 计数，BackToTop 返回顶部", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 CountTo CountTo是作者写的一个计数的组件，基于vue-count-to写的 看似没什么用，但是又不是完全没用，例如在一些活动"}, {"id": "6997715093760770078", "title": "Vue开发遇坑记--select下拉框放图片以及选择后显示图片", "desc": "el-select的下拉框中放入图片选项，且选择某个图片后选择框能够显示选中的图片，最后通过显隐另一个div来达到此效果"}, {"id": "6844903506621497358", "title": "Vue2 原理浅谈", "desc": "本文重点讲述Vue2渲染的整体流程，包括数据响应的实现（双向绑定）、模板编译、virtual dom原理等，希望读者看完有所收获。 前者固然直接，但是当应用变得复杂则代码将难以维护，而后者框架帮我们实现了一系列的操作，无需管理过程，优势显然可见。 为了实现这一点，就是实现如何输…"}, {"id": "6894635161326256141", "title": "vue-element-admin的登录权限校验和动态路由的实现逻辑", "desc": "感觉 vue-element-admin 开源项目 对登录的权限校验和动态路由的逻辑复用性还是很强的，可以在自己的项目中直接拿来用了。为了加深记忆就写个文章记录一下学习笔记。 点击登录后，会返回该用户的权限信息，拿去和动态路由数组的角色权限做配对，把该用户可以访问的路由筛选出来…"}, {"id": "6844903879985856525", "title": "Vue-cli 3.x + axios 跨域方案踩坑指北", "desc": "最近实验课上需要重构以前写过的一个项目（垃圾堆），需要添加发生邮件提醒的功能，记得以前写过一个PHP版的实现，所以想把PHP写的功能整理成一个服务，然后在前端调用。但是这个项目是JavaWeb，也就是说我需要面对跨域的问题。不过本篇文章，讲的并不是如何解决这样的跨域问题，而是我…"}, {"id": "7000321597361897509", "title": "【 Vue 】源码解读复习（二）｜8月更文挑战", "desc": "目录 ① vue双向绑定 整体demo代码 ② 代码思路 ③ Vue初始化过程和数据被修改后的过程 ④ watcher对象 ① vue双向绑定整体代码demo ② 代码思路 2.1 首先创建一个Obs"}, {"id": "6999257142305751054", "title": "Vue 源码初探（三）单组件挂载（渲染）", "desc": "思维导图 前言 上一篇文章里面主要讲了，Vue内部是如何实现将template转换成ats代码的。以及怎样用ast代码生成出render函数的。Vue 源码初探（二）模板编译。 这一篇我们主要来讲怎样"}, {"id": "6973913260257247245", "title": "Vite + TypeScript + Ant Design Vue 搭建后台管理系统（一）", "desc": "从零开始搭建后台管理系统 采用的技术是Vite2，Vue3，Vue Router 4.x，Vuex 4.x，Ant Design Vue 2.x，Typescript"}, {"id": "6994780682882908173", "title": "Vue知识点梳理", "desc": "Vue基础 v-if 和 v-show v-if 控制dom节点是否存在、更高的切换消耗、惰性的（初始条件为假什么也不做）、有局部编译和卸载的过程 v-show 控制css:display、更高的初始"}, {"id": "6942501204266057765", "title": "又快又小的 Vite", "desc": "需要澄清一点，我们的 H5 项目体量较小，仅能通过短信链接打开。对于这种小的项目来说，实践一些新 ~~姿势~~ 技术是再好不过的，各位不要盲目跟风！ 对于这个问题，官方文档的第一句就给出了答案：Vite (French word for \"fast\", pronounced /…"}, {"id": "6944897907158056974", "title": "composition API重构mixin实践", "desc": "业务项目中的 mixin 代码逻辑繁杂，开发维护成本高，亟待重构， vue3 composition API 是 解决 mixin 现有问题的方案之一。 出于长远考虑，vue3 稳定后，项目也会逐步迁移到 vue3 版本（毕竟咱们都是技术的弄潮儿 🤘 ），提前迁移部分功能也是…"}, {"id": "6979233862337429534", "title": "【项目实战】Vue自定义指令-水波纹效果&水印效果（三）", "desc": "工欲善其事，必先利其器。实践（巧偷懒）促进科技发展-_-! 为大家分享日常开发用到的一些工具函数，总结的样式，代码规范本文介绍vue自定义指令 点击水波效果 和 简易水印效果"}, {"id": "6844903635537625095", "title": "创建前端数据模型，vue开发必备", "desc": "其实，这个库，我们已经用了2年了。 我们将前端所有使用的业务数据模型都定义出来了。 减少了无数的冗余代码，避免了非常多容易产生的bug。 也没有出现过什么因为数据缺失，导致页面报错的问题，比如一些：{{user.org.title}}这种展示。 同时，这里用到的日期格式工具是m…"}, {"id": "6909287804510371847", "title": "基于Vue快速实现列表拖拽排序", "desc": "在业务中列表拖拽排序是比较常见的需求，常见的JS拖拽库有Sortable.js，Vue.Draggable等，大多数同学遇到这种需求也是更多的求助于这些JS库，其实，使用HTML原生的拖放事件来实现拖拽排序并不复杂，结合Vue的transition-group,还能快速的给排序…"}, {"id": "6844904158185668616", "title": "微前端架构设计和实践:vue+qiankun", "desc": "因为主项目和子项目都是用的 vue 开发，所以使用 vue-cli4 创建项目，创建 2 个项目，一个主项目，一个子项目。 下面正常开始编写项目，我之前也在网上看了好多 demo 和实际项目，大家主项目都是直接把乾坤的代码放在 main 里面。然后在 app.vue 中用 v-…"}, {"id": "6996568831204261896", "title": "浅谈Vue作用域插槽", "desc": "前言 在Vue的官方文档中对于插槽的描述比较凝练不容易理解，作者在刚开始接触插槽时也是一头雾水，在实践中好像也可以简单的使用，但是想把插槽用的得心应手就比较困难了。 最近因为工作需求需求手动封装一个类"}, {"id": "6998759493852987399", "title": "回首Vue3之API篇（八）", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 这篇文章我们来讲一下响应性基础 API的使用，以及我们需要注意的地方。 如何使用 reactive reactive 让我们得到一个对象的"}, {"id": "6997211013888081950", "title": "回首Vue3之API篇（四）", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 这篇文章我们来讲一下最后三个应用APIprovide、use和version的使用，以及我们需要注意的地方。 provide 我们要知道p"}, {"id": "6999811532490014756", "title": "回首Vue3之API篇（十一）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 这篇文章我们来讲一下组合式APIsetup、Provide / Inject、getCurrentInstance的使用，以及我们需要注意"}, {"id": "6844904039923073038", "title": "Pug 介绍和在 Vue 中使用", "desc": "易理解，同时极大的简约了我们的代码。 . 感谢支持。 若不足之处，欢迎大家指出，共勉。 欢迎关注。"}, {"id": "6992855115871256590", "title": "vue 2.0 源码学习概览", "desc": "虽然Vue3.0 已经问世很久，但个人认为如果是PC应用，除非IE彻底消失，否则也很难大面积都普及。 随着工作年限的增长，听到“源码”的学习越来越频繁，本篇文章就大概介绍下Vue2.0 的源码概览"}, {"id": "6912632681813508109", "title": "【译】Vue3生命周期钩子（hooks）完整指南", "desc": "Vue3与Vue2的生命周期钩子（hooks）非常相似——我们仍可以在相同的场景下使用相同（或类似）的钩子。 如果项目使用Options API方式构建，那就无须修改任何生命周期相关的代码。这是因为Vue3在设计时已对先前版本做了兼容处理。 然而，如果使用Composition…"}, {"id": "6881280745013248014", "title": "用Vue3写了一个简单的Composition API", "desc": "就在2020年9月的时候，尤大大发布了Vue3的正式版。在这个新版与旧版之间，我觉得变化最大的是多了一个Composition API。 当你在开发一个大型项目的时候，遇到创建Vue组件时，一个组件跟项目中另外一个组件中存在着大量的重复代码，一旦维护起来所花费成本就大了，最后在…"}, {"id": "6844903966057168903", "title": "【Vue原理】Vue源码阅读总结大会 - 终", "desc": "其实如果只用晚上下班回去的时间写的话......写文章估计得用一年......我不仅内容追求简单，可以让我们在以后忘记的时候迅速捡回来，我还要追求排版好看（鳖跟我说难看好不喽，我花了很多心思的哈哈），因为我知道排版难看的文章一秒都不想爱看下去.... 比如写完这个系列，我打算给…"}, {"id": "6844904067001483271", "title": "让你的el-dialog更优雅", "desc": "在使用Vue+Element实现需求时常会遇到单个Vue文件内出现多个弹窗需求，一般会这样写这样的写法在文件内容多的时候容易出现模板臃肿的问题，而且需要外部管理弹窗组件的开关状态visible可以如何"}, {"id": "6922687963407548424", "title": "我是如何开发第一个 chrome 插件的", "desc": "自己摸鱼的时候，看盗版小说🤣发现总是弹出不可描述的广告页面，想着公共场所不合适，有啥办法可以去除广告，总不可能每次都点消除按钮，而 chorme 浏览器插件可以完美的实现这个小需求。 上图其实就是这个插件，我们可以看到其实 chorme 浏览器插件就是个页面，我们前端上手完全…"}, {"id": "6974283248499163172", "title": "单页面表单改造成分步骤的多页面表单", "desc": "原有的多个模块的表单在同一个页面里面一次性输入。现在需求将同一个页面改成多步多页面来做展示。这里记录自己的方案。。。"}, {"id": "6870482648750358535", "title": "快速写你的第一个vue3.0—Todolist吧~", "desc": "很多时候，当我们面对着新技术的到来，有些人看文档已经大概了解其中缘由，甚至已经能直接上手项目。但~是不是还会有一些刚入门的小伙伴，对于新技术可谓是又爱又恨。其实，不要害怕写错代码，要勇于尝试，要在错误的代码中寻找自己的薄弱点并攻破~ 加油，从写第一个todolist开始吧。 大…"}, {"id": "6992765608240644109", "title": "Vue 3 组件", "desc": "这是我在学习 Vue 3 时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "6844903741334749198", "title": "vue-cli3.0全面配置", "desc": "√多环境配置 √proxy √修复HMR失效 √修复Lazyloading routes Error √添加别名 √去除无效css √打包分析 √ 配置externals √sass提供全局样式及变量 √文件上传alioss √添加IE兼容 √开启gzip"}, {"id": "6951652265044213791", "title": "mustache模板引擎 - 01", "desc": "什么是模板引擎？模板引擎是将数据变为视图最优雅的解决方法。历史上曾经出现过的其它数据变视图的方法纯 DOM 法数组 join 法..."}, {"id": "6994231237023907847", "title": "Vue - Todo案例(五)", "desc": "终于来到了这一天了啊！期待不期待呢？前面搞完了事件、渲染指令、过渡。那么今天就来搞个基础版的Todos啊。后面会讲到计算属性这一知识点"}, {"id": "6917907347452985352", "title": "Vue 3 项目实战总结", "desc": "作为今年前端圈中最大的新闻之一，vue 3 的正式版的发布引起了几乎所有前端 er 的围观。步入 2021 年，我开始在项目中使用 vue 3 进行开发。以下是我使用 vue 3 一个月后的一些经验总结以及看法。 一般我们使用 vue 3 都是使用 vue 官方的脚手架新建项目…"}, {"id": "6918591578822934536", "title": "七日打卡-Vue中watch用法", "desc": "第一种方式有一个缺点： 就是当值第一次绑定的时候 不会执行监听函数，只有当值改变的时候才会执行。 如果我们想在第一次绑定的时候执行此监听函数，则需要设置immediate为true。比如当父组件向子组件动态传值时，子组件props首次获取到父组件传来的默认值时，也需要执行函数，…"}, {"id": "6995204870114377741", "title": "Vue系列：虚拟DOM和diff算法", "desc": "虚拟DOM DOM操作非常耗费性能，在操作DOM时，会出现DOM的回流（Reflow：元素的大小或者位置发生了变化） 和重绘（Repaint：元素样式的改变），重新渲染DOM，可以看看我以前的文章--"}, {"id": "6844903766102130701", "title": "10分钟精通Ant Design Form表单", "desc": "antd被人吐槽最多的除了彩蛋之外，那应该就是Form表单了。如果需要使用Form自带的收集校验功能，需要使用Form.create()包装组件，每一个需要收集的值还需要getFieldDecorator进行注册。官方文档大量的让人眼花缭乱的API，大概率没有多少人读完了整个文…"}, {"id": "6960854636299288613", "title": "写给 React 开发的 Vue 上手指南", "desc": "Vue 和 React 是前端三大流行框架之二，其中选择 Vue 的团队对 Vue 的第一印象是：简单、易上手。本文从 React 开发的视角入手，介绍 Vue 的简单使用、特性和对比。"}, {"id": "6986455161220628487", "title": "[ Vue ] 通过使用 Vue-Router 梳理通用知识点", "desc": "Vue Router 的作用 实现基本的组件之间的路由 vue 是 Vue Router 是 Vuejs 官方的路由器，他和 Vue.js 深度集成，是用于单页应用中组件之间的导航，本质上就是通过 c"}, {"id": "6977269399308730398", "title": "Vue3初探", "desc": "Vue3初探 花了大量时间看完了Vue2和核心源码，是时候开始全面接触Vue3了。我们知道Vue3新增了很多特性,Composition Api，Teleport，Fragments，Emits Co"}, {"id": "6844903891629244430", "title": "vue中使用video.js进行视频播放", "desc": "关于video.jsvideo.js是一个拥有h5背景的网络视频播放器，同时支持h5以及Flash视频播放（可加载本地静态资源视频以及网络链接视频）官网：https://videojs.com/安装m"}, {"id": "6906442142894260232", "title": "vue实现弹幕 -- 简单版", "desc": "最近做年终活动，许愿的时候希望可以以弹幕的形式出现。 以下一步步，说明弹幕逻辑。本文的弹幕较为简单，重在说明弹幕逻辑。 先写段静态的文字。 但是一行通常不止一个弹幕，肯定不能block，所以这里的bullet-item需要处理下，这里我用定位的方式（主要为了之后的弹道，定位更方…"}, {"id": "6877406785636925447", "title": "手把手教你使用 Vue3 中的 Composition API 来封装一个商品列表组件", "desc": "本文我们将使用 Composition API 来封装一个商品列表组件，功能分为两块逻辑：列表查询和按商品名称过滤，涉及到新的 API 有 setup 中的 ref、onMounted、watch、computed，看完后你将掌握 Composition API 的基本用法。 …"}, {"id": "6877908866579824653", "title": "Vue实现移动端侧边栏城市联动效果", "desc": "其实，只要换一下数据结构，它也可以变成一个类似于手机通讯录列表，那个圆形气泡联动跟随，就是模仿 魅族 的手机通讯录上下滑动侧边栏时，指示当前字母的效果。 题外话，你拿到的数据不一定就是这个格式，而且也没有按字母分类，而是一份偏平化的城市列表数组，那你可以通过安装 pinyinj…"}, {"id": "6844903592520843277", "title": "浅入浅出图解domDIff", "desc": "我们常说的虚拟DOM是通过JS对象模拟出来的DOM节点,domDiff是通过特定算法计算出来一次操作所带来的DOM变化。 react和vue中都使用了虚拟DOM，vue我只停留在使用层面就不多说了，react了解多一些，就借着react聊聊虚拟DOM。 干前端的都知道DOM操作…"}, {"id": "6986900588537741342", "title": "父子组件的生命周期", "desc": "一、 vue的生命周期是我们都比较熟悉的，现在我们来回顾一下： beforeCreate:初始化，此时调用方法和data的值都是获取不到 created:将data,method注入，此时可以获取到d"}, {"id": "6986888911385526308", "title": "Vue源码解析： 丰富的选项合并策略", "desc": "Vue 实例化过程中的第一个关键的步骤就是选项合并，mergeOptions函数则是实现实例化，继承和混入三大功能的核心函数，所以分析它的实现是理解`Vue`实例化过程和继承的必经之路。"}, {"id": "6980987158710452231", "title": "Vue3中watch的最佳实践", "desc": "Vue3的watch如何获取新老值？👻 本文通过实验的形式为大家揭晓~~~🧡💛💚💙💜🤎🖤🤍"}, {"id": "6892273677342244877", "title": "vue组件实现原理解析", "desc": "组件机制的设计，可以让开发者把一个复杂的应用分割成一个个功能独立组件，降低开发的难度的同时，也提供了极好的复用性和可维护性。本文我们一起从源码的角度，了解一下组件的底层实现原理。 在Vue中使用组件，要做的第一步就是注册。Vue提供了全局注册和局部注册两种方式。 全局注册的组件…"}, {"id": "6983932716878135327", "title": "vue3源码解析:1.2 vue3构建流程搭建-monorepo", "desc": "搭建 monorepo yarn 安装项目依赖 目录结构 根package.json private:true:表示是个私有包 指定工作空间:workspace:[\"packages/*\"],所有包都"}, {"id": "6844903641380290567", "title": "vue海量数据列表操作的性能优化，渣渣手机性能一秒变丝滑！", "desc": "我们在做移动端的点餐程序的时候，发现当菜品数量巨大的时候，特别是外加很多操作的时候（比如菜品半整份切换的时候），列表里面的菜品数量 进行快速 加减和半整份切换就会卡顿。 我写了个用例，用了2277条数据（找不到性能差的手机，可以适当增加数据量来测试）在 红米3（安卓版本：5.1…"}, {"id": "6844903584853655565", "title": "Vue实现导出excel表格", "desc": "iView可以实现表格的导出，不过只能导出csv格式的，并不适合项目需求。"}, {"id": "6844904165324357646", "title": "Vue3源码分析——数据侦测", "desc": "Vue3.0发布beta版本了，还是来凑个热闹看看源码。本系列大概会有两篇文章，包括应用整体流程、新的响应式系统、组合式API相关内容。 Vue的一个特点就是数据响应式系统，由于这是一个比较独立的系统，因此我们先从这里开始，看看新的Proxy是如何实现数据依赖收集和通知的。 本…"}, {"id": "6976932937929326605", "title": "Vue项目中使用codemirror编辑器", "desc": "最近尝试了几个嵌入到项目的编辑器，有monaco，json-editor，然后就是这个codemirror了。为什么要用？那必须是因为项目需求呀。 纪念成功嵌入，在此做一个小小的记录。 使用的内容比较"}, {"id": "6969221097380118565", "title": "vue+element大型表单解决方案(7)--表单形态", "desc": "表单一般分为新增、编辑和详情(本系列还多一种自创需求的比对形态)等使用形态，根据不同的业务形态，表单可能会有不同的逻辑和状态，比如新增使用空的初始化数据，编辑和详情需要回显数据，详情表单项不可修改，比"}, {"id": "6910470057961193480", "title": "vue3的新特性custom renderer", "desc": "在vue3中允许用户自定义目标渲染平台，以往的版本中目标渲染被局限于浏览器dom平台，而现在可以把 vue 的开发模型扩展到其他平台。点击进入官网 我们先来弄懂vue是如何定义默认的目标渲染平台的，也就是说如何将目标渲染到浏览器dom平台上。可以先参考官方图： 我们知道canv…"}, {"id": "6844903537516740615", "title": "vue mixins和extends的妙用", "desc": "经过测试，watch的值继承规则一样。 结论：子类再次声明，data中的变量都会被重写，以子类的为准。 如果子类不声明，data中的变量将会最后继承的父类为准。 经过测试，props中属性、methods中的方法和computed的值继承规则一样。 extends用来继承现成组…"}, {"id": "6995355231353602084", "title": "Vue3学习笔记-模板语法", "desc": "Vue 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。 Vue 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。 结合响应"}, {"id": "6844903588070703118", "title": "Vue实现内部组件轮播切换效果", "desc": "我们可以引入一个轮播组件，但是有个问题，通常轮播组件都会把所有的slide都渲染出来再进行切换，这样就导致所有的资源都会触发加载，这可能不是我们所期待的，毕竟如果slide比较多的情况需要一次性加载的图片等资源太多了。所以我们可以手动简单地写一个，满足需求即可。 现在一步步来实…"}, {"id": "6983684058417283103", "title": "深入vue响应式原理", "desc": "当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty"}, {"id": "6844903687190478855", "title": "揭密 Vue 的双向绑定", "desc": "Vue 中需要输入什么内容的时候，自然会想到使用 <input v-model=\"xxx\" /> 的方式来实现双向绑定。下面是一个最简单的示例 在这个示例的输入框中输入的内容，会随后呈现出来。这是 Vue 原生对 <input> 的良好支持，也是一个父组件和子组件之间进行双向数…"}, {"id": "6937243374453784613", "title": "解析Vue3.0的dom-diff核心算法——最长递增子序列 | 刷题打卡", "desc": "去年Vue3.0正式版本推出，受到很多人的追捧。vue3.0中也对dom-diff算法进行了优化，其中就用到了 「最长递增子序列」。 先简要介绍下基础背景。我们在vue开发项目的时候，常用模板或者jsx语法来编写DOM。实际上我们编写的代码会被@vue/compiler-dom…"}, {"id": "6989052048708730910", "title": "vue + vuex + element-ui 购物车", "desc": "这个购物车功能相对简单，路由控制进入home页（商品列表页），添加商品后，cart页（购物车页）链接后会显示加入商品数量。进入cart页会列出添加的商品，可加减数量、删除单个商品、清空购物车。"}, {"id": "6971005471385714702", "title": "工作上的小问题：解决el-select数据过多卡顿、回显。", "desc": "开发时遇到一个问题：el-select数据过多导致页面卡顿、以及解决el-select回显，并使用和el-select无大差异。"}, {"id": "6844903608731828232", "title": "前端的gitlab的ci初尝试", "desc": "本文记录一个前端部署Gitlab的CI。不是在自己的服务器上面搭建的Gitlab。使用的是Gitlab.com的Gitlab的CI，在腾讯云撸的羊毛的小水管也搭不起Gitlab，做个CI的服务器还是能勉勉强强的。 从 GitLab 8.0 开始，GitLab CI 就已经集成在…"}, {"id": "6994335381332164622", "title": "回首Vue3之指令篇（九）", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 这篇文章我们来讲一下剩余指令v-pre、v-cloak、v-once、v-is和is的使用方法，以及在使用它的时候我们需要注意的地方。 剩余"}, {"id": "6965049624373493773", "title": "Vue nextTick 实现原理", "desc": "由于 Vue 更新 DOM 是异步执行的，如果在数据修改后面直接做某些操作，会被立即执行，而此时DOM还未更新。因此要用到nextTick，其原理则是利用了事件循环机制。"}, {"id": "6990533148543025188", "title": "Highcharts vue时间少8个小时", "desc": "在vue项目中用到highcahrts 的时候，接口传来时间戳，但是highcharts自动转换为时间格式的时候少了一天 我想要的结果是这样"}, {"id": "6914173342555570183", "title": "模板编译compiler", "desc": "所谓模板，是我们写在template标签中的内容。 模板编译，则是将这一部分内容处理成render函数代码字符串的过程。 先来看一个🌰，有个基本的认识，了解解析之后的AST结构大概是什么样子的。 我们根据源码来看一下解析过程的实现。 parseHTML 的主要逻辑是使用whi…"}, {"id": "6933866537053290504", "title": "前端项目搭建-day03", "desc": "往期文档前端项目搭建-day01前端项目搭建-day029、项目引入axios，配置响应拦截和请求拦截1）、安装axios2）、录在src\\config\\axios文件夹下进行axios配置①axio"}, {"id": "6996163301650464775", "title": "Vue系列：Composition API 、ref/reactive/toRef/toRefs深入", "desc": "Composition API 给 Vue 带来了什么 更好的代码组织 更好的逻辑复用 更好的类型推导 更好的代码组织 在optionsAPI组件中，当一个组件过大时，不同的业务逻辑的列表也会增长。在"}, {"id": "6966568597418147877", "title": "vue中如何实现换肤？", "desc": "需求，通过button按钮实现不同主题风格的切换。实现方法：通过js动态修改scss变量。整体思路是通过声明皮肤文件，通过@mixin解析结果，通过@include在页面中调用。"}, {"id": "7002794926903820295", "title": "mescroll在vue中的使用方式", "desc": "官方文档 http://www.mescroll.com/api.html#mescrollvue 在 vue-cli 中 mescroll组件的使用: 执行npm命令安装mescroll :   n"}, {"id": "6904451616158515214", "title": "Vue项目打包部署总结", "desc": "使用Vue做前后端分离项目时，通常前端是单独部署，用户访问的也是前端项目地址，因此前端开发人员很有必要熟悉一下项目部署的流程与各类问题的解决办法了。Vue项目打包部署本身不复杂，不过一些前端同学可能对"}, {"id": "6965668371585040415", "title": "vite2 + vue3 项目简易入门和使用经验总结", "desc": "Vue3.0 在去年 9 月正式发布了，看大家都有在热情的拥抱 Vue3.0。今年初新项目也开始使用 Vue3.0 来开发，这篇文章就是在使用后的一个总结， 包含 Vue3 新特性的使用以及一些使用经"}, {"id": "6991666265689423908", "title": "vue使用keep-alive详解——实现数据缓存不刷新、修改值后刷新、相同参数区分等｜8月更文挑战", "desc": "应用场景：从列表页跳转到详情页面，然后从详情页返回列表页的时候，列表页的数据不刷新，但是从首页进行跳转到列表页的时候，列表页的数据刷新。 简单来说，是一个前进刷新，后退不刷新的功能。 使用locals"}, {"id": "6985031451548844040", "title": "Vue3第四篇之Vuex", "desc": "Vuex 单向数据流的问题： 多个视图依赖同一个状态 来自不同的视图的行为需要变更统一状态 ----Vuex应运而生---- 一般在应用中进行统一状态管理的比如： 用户的登录状态、用户名称、头像、地理"}, {"id": "6969732761384910884", "title": "vue-keep-alive源码分析", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 注：以下是个人理解、如有不对还望指正！ keep-alive使用 需求 完成对一个组件进行缓存配置 我们发现页面只会对第一个test组件进行展示、"}, {"id": "6965745846004482084", "title": "在 Vue3 中使用 markdown 编辑器组件", "desc": "使用的是 v-md-editor 组件 安装 引入组件 基础用法 保存后的 markdown 文本如何渲染在页面上？ 如果你的项目中引入了编辑器。你可以直接使用编辑器的预览模式来渲染。例如： 如果你的"}, {"id": "6921992936171241479", "title": "vite2.0配置学习(typescript版本)", "desc": "尤于溪的原话。 vite与 Vue CLI 类似，vite 也是一个提供基本项目脚手架和开发服务器的构建工具。 vite基于浏览器原生ES imports的开发服务器。跳过打包这个概念，服务端按需编译返回。 vite速度比webpack快10+倍，支持热跟新， 但是出于处于测试…"}, {"id": "6844903603061129223", "title": "更酷的Console，更简单的输出方式，Enjoy it in Vue", "desc": "Tableofcontent老生常谈Console不如换种姿势？vue-pretty-logger做了什么安装方式开始使用使用命令输出LoaderOption配置项Example提交IssuesCha"}, {"id": "6916790173116301325", "title": "Vapperjs - 一个基于 Vue 的 SSR 框架", "desc": "如果你正在使用 Vue 做同构的项目，那么 Nuxt 以及 Quasar Framework 都是不错的选择。但是今天我要介绍的是由水滴前端研发的一个基于 Vue 的 SSR 框架：Vapper​vapperjs.org 我猜大部分同学在看到这篇文章之后的第一个疑问应该是：为什…"}, {"id": "6844903620878532622", "title": "Vue开发的电影预告webApp介绍", "desc": "即将迎来的端午小假期，小伙伴们都准备好怎么度过了么😄。我每次出去玩都避免不了去看场电影，这次借此机会向大家介绍下我开发的可以查看电影预告片的小项目，希望大家可以去测试，浏览一波即将上映的电影同时可以帮助我测试一下，指出不足，我都会虚心接受的呦！谢谢大家。 前端是通过vue-c…"}, {"id": "6921530159099510791", "title": "你可以手写Vue3的响应式原理吗？", "desc": "在上一篇哔哩哔哩面试官：你可以手写 Vue2 的响应式原理吗？中，我们已经了解了Vue2中的响应式原理并且动手实现了其核心逻辑。但是Vue2的响应式原理是存在一些缺点的： 而Vue3使用ES6的Proxy特性来解决上面这些问题，本篇文章我将带大家深入了解Vue3的响应式原理并在…"}, {"id": "6859541760797442062", "title": "Vue3.0变动简介", "desc": "Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。 vue2.x的diff方式为全部节点递归对比，vue 3 利用分析模版优化编译时的diff内容。 Vue提供类似于HTML的模板语法，将模板编译为可返回虚拟DOM树的呈现函数。通过DIFF算法，递…"}, {"id": "6915597652633616392", "title": "Vue实现一种简单的无限循环滚动动画", "desc": "这种类似轮播的效果，通常可以使用轮播的方案解决，只不过相对于我要分享的方案来说，轮播实现还是要复杂些的。 如比，效果得以实现，是不是更简单点。顺带提一下，我这边实现的效果是单条滚动，就像新闻滚动那样，所以视图窗口只能看到一条数据，你也可以不这样限制，那么就能显示整个列表了，不过…"}, {"id": "6975505160726380580", "title": "Vue3中readonly 和 shallowReadonly和toRaw", "desc": "“这是我参与更文挑战的第3天，活动详情查看： 更文挑战” 1.readonly 深度只读 2. shallowReadonly 浅只读 3 toRaw将代理对象变成普通对象"}, {"id": "6844904051478528008", "title": "使用 Vue + Element UI + STS 将图片直接从前端上传至阿里云 OSS （附 Node 代码）", "desc": "这篇文章是《不是所有的 No 'Access-Control-Allow-Origin' header... 都是跨域问题》的后记，因为在评论区中，@ redbuck 同学指出：“为啥图片不前端直接传 OSS ？后端只提供上传凭证，还省带宽内存呢。” 于是，我一拍大腿：对啊，当…"}, {"id": "6991788684320178212", "title": "Vue打包后页面出现空白解决办法（臻享版）", "desc": "一、 vue-cli创建项打包后打开页面为空白的问题解决 命令行输入：npm run build 打包出来后项目中就会多了一个文件夹dist，这就是我们打包过后的项目。 二、打包完成后配置会自动生成v"}, {"id": "6844903677837180941", "title": "弹弹弹，弹走鱼尾纹的弹出菜单（vue）", "desc": "上一篇面试的总结，大家看的还行，因为量很大，错误在所难免，希望大家发现错误了可以告诉我一声，我的邮箱是236490794@qq.com，一个小前端的希望。 这里我将这个控件几个属性独立出来，方便下次开发，其中包含，menu的背景，整个控件在屏幕的哪个角落，menu的宽高，ite…"}, {"id": "6844903632857464846", "title": "写在 D2Admin 开源一个月之后", "desc": "今天 D2Admin 1.1.4 大更新发布，谨以此文表达我对编码的热爱。 距离我在掘金正式把 D2Admin 介绍给大家——这个我自己做了五个月后公布的开源项目，已经过去一个多月了，也就是说到现在为止，大概做了六个多月，六个月付出了很多也收获了很多。 现在想想这一个月真是很忙…"}, {"id": "6844903854358659086", "title": "基于 Vue 的移动端富文本编辑器 vue-quill-editor 实战", "desc": "优秀的富文本编辑器有很多，比如：UEditor，wangEditor 等，但并不是每个都能在移动端有很好的表现。 我们暂且不讨论移动端是否真的需要富文本，既然有这需求，就把它实现出来。 正确的选择是成功的开始，开发之前肯定要做一些调研。 通过各种资料搜集，确定了几个备选的：UE…"}, {"id": "6984626013107929101", "title": "Vuex状态管理一——之回顾vue间通信方式", "desc": "状态管理 state：驱动应用的数据源 view：以声明方式将state映射到视图 actions：响应在view上的用户输入导致的状态变化 单项组件流 组件间通信方式回顾 父组件给子组件传值 子组件"}, {"id": "6844903612930326541", "title": "vue-router原理剖析", "desc": "页面中所有的内容都是组件化的，只需要把路径跟组件对应，在页面中把组件渲染出来。 页面实现：在vue-router中, 它定义了两个标签 和来对应点击和显示部分。 就是定义页面中点击的部分， 定义显示部分。 js中配置路由：首先要定义route,一条路由的实现，他是一个对象，由p…"}, {"id": "6981771063407427615", "title": "0到1搭建Vue3+Vite+Node自动化部署图床项目", "desc": "这是我参与新手入门的第1篇文章 从0到1搭建一个Vue3+Vite+Node图床项目，实现版本管理、服务器自动化部署"}, {"id": "6859972542199758861", "title": "Vue-Element-Admin 中获得的Vue技巧", "desc": "`v-on=\"$listeners\"`封装组件时，可传入未识别的事件。`v-bind=\"$attrs\"` 可传入未识别的属性 逻辑： 传入该按钮的权限，获取当前用户的权限，判断用户权限是否在按钮权限中，如果不在代表没有权限，移除该按钮的DOM。 监听滚动，使用getBoundi…"}, {"id": "6968516139483660302", "title": "VUE3学习第六天----vite 实现原理", "desc": "1. vite 概念 Vite 是一个面向现代浏览器的一个更轻，更快的Web应用开发工具 它基于ECMAScript标准原生模块系统（ES Modules）实现 Vite出现是为了解决webpack开"}, {"id": "6929008264906539022", "title": "Vue源码解读(入口到构造函数整体流程)", "desc": "在之前的介绍中，我们知道Vue.js内部会根据Web浏览器、Weex跨平台和SSR服务端渲染不同的环境寻找不同的入口文件，但其核心代码是在src/core目录下，我们这一篇文章的主要目的是为了搞清楚从入口文件到Vue构造函数执行，这期间的整体流程。 在以上代码中，我们发现它引入…"}, {"id": "6966405535880970277", "title": "Vuex（加深印象）", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 存储状态响应式 不能直接改变store中的状态，必须通过唯一方法commit去改变mutation state 单一状态树，可以对应到组"}, {"id": "6982001553540382733", "title": "你真的了解vue2.0 和 vue3.0 响应式原理区别吗？", "desc": "Vue2.0 和 Vue3.0的原理是面试或者入场开发中需要彻底弄懂的问题，我们通过简单的源码实现来理解透彻两者的底层区别"}, {"id": "6844903605397356551", "title": "关于input的一些问题解决方法分享", "desc": "input是我们接受来自用户的数据常用标签，在前端开发中，相信每个人都会用到这个标签，所以在开发过程中也时候也会遇到一些问题，本文的内容是我在跟input相爱相杀过程中产生的，在此记录分享一下。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。 移动端底部i…"}, {"id": "6976598398359044133", "title": "axios 拦截器", "desc": "拦截器分为 request请求拦截器 和 response响应拦截器，创建 axios 实例后，可配置请求拦截器 axios 基础使用及配置"}, {"id": "6994605040694460446", "title": "Vue中 实现函数的防抖、节流及应用场景", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 1. 简介 1.1 函数防抖(debounce) 定义： 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时；(类似于 王者"}, {"id": "6989409063595425828", "title": "《深入分析Vue两个版本》", "desc": "一、Vue的两个版本 Vue有两个版本，分别是完整版和非完整版， 1.1 完整版 完整版同时包括编译器(compiler) 和 运行时(runtime) 编译器的功能是将模板字符串编译为 JavaSc"}, {"id": "6953917583363932197", "title": "keep-alive 删除指定页面key缓存", "desc": "一、概要 1.本文主要针对web端后台系统打开指定页面tab，关闭该tab后清楚keep-alive中页面缓存 2.结合vuex和vueRouter应用 二、代码实现 1.关闭tab tabs.vue"}, {"id": "6986280970416553991", "title": "Vue2+TS 实现自定义指令： v-loading", "desc": "vue实现自定义指令：v-loading。介绍了实现vue自定义指令的大致思路。以v-loading为例，并贴出了源码。"}, {"id": "6876953766831063048", "title": "Vue源码探索之知识小储备 ——01.Object.defineProperty VS proxy", "desc": "本文先来讲解vue实现数据双向绑定的第一步：如何检测到Data的变化。 我们修改obj.a = 3, 那怎样才可以监听到这个改变呢？我们很容易想到大名鼎鼎的Object.defineProperty()。Object.defineProperty() 方法会直接在一个对象上定义…"}, {"id": "6994459426203975716", "title": "Vue项目实战", "desc": "这是我参与 8 月更文挑战的第 1 天，活动详情查看： 8月更文挑战 实战 项目创建(通过VueCLI创建) vue create 项目名 选择项目配置依赖 cd 项目名(出现git提示，选择是) n"}, {"id": "6844904136777941005", "title": "Element-UI: Message组件", "desc": "Message的调用方式都是通过this.$message进行调用，通过传递不同的options进行组件样式和内容的控制，展示的html是动态的插入到document中并在duration之后移除，组件的展示通过vue实例访问并控制。"}, {"id": "6844903734737109005", "title": "vue-admin 详细注释，必须手把手做项目系列之（一）", "desc": "1 在终端中运行：npm run dev，实际上就是运行了：webpack-dev-server ... 注意：通过CDN引入 element-ui 的样式文件后，就不需要在 main.js 中导入 element-ui 的CSS文件了。所以，直接注释掉 main.js 中的导…"}, {"id": "6844903976270299150", "title": "你不知道的vue组件传值方式", "desc": "上一篇关于vue面试的文章 （面试时面试官想要听到什么答案） 中提到了多种组件传值方式，本文对几种传值方式如何使用具体说明一下。 props、$emit、eventbus、vuex、$parent / $children / ref、sessionStorage、localSt…"}, {"id": "6947967614194810893", "title": "【深入浅出】Vue3 虚拟 DOM", "desc": "此篇我们将深入 Vue3 虚拟 DOM，以及了解它是如何遍历找到对应 vnode 的。 多数情况下我们不需要考虑 Vue 组件内部是如何构成的。但有一些库会帮助我们理解，比如 Vue Test Utils 的 findComponent 函数。还有一个我们都应该很熟悉的 Vue…"}, {"id": "6985747019805491214", "title": "vue项目中使用echarts", "desc": "1. package.2.如果你项目里需要用到各种各样的图表，建议使用本条。main.Vue.prototype.msg: 'Welcome to Your Vue.this.let myChart = this.$echarts.init(document.myChart.3...."}, {"id": "6977194743855841310", "title": "写一个 tags-input 组件？", "desc": "转眼半年没写文章了，上个月离职还出去玩了一遭，都不会写代码了😂。 最近入职新公司，需要写一个 tags-input 这样的组件。"}, {"id": "6844903571197018126", "title": "要做软件工程师，而不是前端工程师", "desc": "最近几个月一直有些事情没有想通，但可幸的是，有些问题的答案逐渐开始明朗起来了。好久没写文章，籍此献上一篇短文。 当初准备毕业的时候，其实并没有想过要当前端工程师，毕竟当时基本都是全栈（PHP + jQuery）。但由于并不是科班出身（大学读Business），自信心不足，以及机…"}, {"id": "6994087364452679693", "title": "vue实战之打包多页面", "desc": "前言: 由于公司业务需要,网站需要被蜘蛛爬虫收录,要做seo,所以需要访问地址后需要添加.html后缀. 在大部分实际场景中，我们都可以构建单页应用来进行项目的开发和迭代，然而对于项目复杂度过高或者页"}, {"id": "6995845382005751815", "title": "在vue2的基础上快速学习和入门vue3", "desc": "前言 本文旨在帮助有vue2基础的同学，能够快速的入门vue3，所以前提条件就是需要会vue2。vue3已结发布有一段时间了，作为一个开发者自然是需要了解的，至于目前的项目中是否使用最新的vue3，根"}, {"id": "6994839871240011789", "title": "No.11 vue-element-admin 学习使用（六）复用component，布局index页面", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 tabs的keep-alive tab切换的时候，会重新加载，如果不希望每次切换tab都重新加载的话，就用keep-alive包裹起来。 "}, {"id": "6844904137696493582", "title": "解放双手系列：基于 ElementUI table组件二次封装", "desc": "在开发后台类的系统，经常会使用到表格展示形式，但我们往往都会发现这些表格的展示出来的样子都基本都是大同小异的，极个别是不一样的。基于这样背景之下，希望开发一个可自定义配置的表格、根据配置自动渲染表格内容。 其它 Element 的 el-pagination支持的属性，它也都支…"}, {"id": "6999552498411241479", "title": "Vue 中不要用 index 作为 key，key的用途", "desc": "简要回答 用组件唯一的 id（一般由后端返回）作为它的 key，实在没有的情况下，可以在获取到列表的时候通过某种规则为它们创建一个 key"}, {"id": "6987661586953404453", "title": "ts报错Declaration of public instance field not allowed after declaration of public", "desc": "ts报错Declaration of public instance field not allowed after declaration of public instance method. In"}, {"id": "6844903762880888845", "title": "【vue-cli3升级】老项目提速50%（二）", "desc": "上一遍写到了项目中 eslint 的错误处理，原谅我并不怎么会写文章，哈哈... 继续说明下本文只作为个人在实际工作中的经历总结... 本着不影响业务代码的原则和初心，继续这次升级改造工程的历程... 以 VUE_APP_ 开头命名的变量VUE_APP_*就可以在项目中愉快的使…"}, {"id": "6952846988266176543", "title": "深究vue3中provide与inject", "desc": "在vue中,组件之间的通讯方式有很多种, 比如props、emit、eventBus、provides/inject。现在就一起来研究一下provide与inject的实现吧."}, {"id": "6977932616024637471", "title": "Vue：使用elementUI upload组件上传excel文件", "desc": "页面效果支持文件的二次确认上传,demo中仅以excel举例，若需要支持其他格式，可修改accept值"}, {"id": "6844903672518819848", "title": "PWA踩坑记，手把手教学vue搭建PWA", "desc": "前端的日益发展，都离不开性能优化的手段，包括 CDN、CSS Sprite、文件的合并压缩、异步加载、资源缓存等等。更多的时候为了减少用户量的请求，于是就有了PWA，秒开网站，离线访问等等的炫酷装B技能。 通过设置请求缓存后，静态资源都必须设置为强制缓存，才能达到离线访问的效果…"}, {"id": "6977920992148455454", "title": "vue 不生效打包样式 用深度选择器＞＞＞ （ /deep/ ）解决vue调用第三方组件库覆盖样式不生效问题", "desc": "vue 不生效打包样式 用深度选择器＞＞＞ （ /deep/ ）解决vue调用第三方组件库覆盖样式不生效问题 穿透方法实际上违反了scoped属性的意义。而且在vue中过多使用scoped导致页面打包"}, {"id": "6844903826705776648", "title": "优雅地使用loading", "desc": "不知道从什么时候开始有了写博客的想法，奈何自己的知识储备还很薄弱，迟迟无法下笔。这是我的第一篇博客，算是记录一下自己学习前端以来的一些知识吧。如有错漏，恳请指出，您的批评和指正是我前进路上的一大动力！ 在平时的开发过程中，我们需要异步等待数据，常常会利用loading图来加强用…"}, {"id": "6992985052451700744", "title": "No.6 vue-element-admin 学习使用（一）clone项目，yarn安装依赖，选择国际化分支", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 vue-element-admin 是一个很棒的后台前端解决方案,主要用的是vue和element实现，由于我之前一直在用的是element"}, {"id": "6844903582970429454", "title": "Vue SPA项目SEO优化之预渲染Prerender-spa-plugin", "desc": "由于基于Vue的SPA项目普通的爬虫无法爬取项目的静态文本的内容，通过预渲染插件prerender-spa-plugin解决vue的SPA项目的SEO问题。 可以看到项目编译后的index.html中只有一些HTML和js，css文件的引用，而无关于内容的静态文本。当然你也可以…"}, {"id": "6913712767753158663", "title": "vue3+typeScript 不到100行代码的轮播组件(每周一个小组件)", "desc": "每周分享一个vue3+typeScript的小组件，我只想分享下自己的实现思路，楼主是个菜鸡前端，记录下实现过程，说不定对你有帮助。 思路：循环要轮播的内容，用样式和v-show控制只显示一个内容，用一个active变量来接收要显示的轮播内容的索引。 vue3持续更新中..."}, {"id": "6986217748741226509", "title": "vue的父子组件传值", "desc": "#前言 我们在开发vue项目的时候经常会遇到一些,组件之间的数据传递,有父组件向子组件传值,子组件想父组件传值 ## 父组件传递参数给子组件 父组件通过import + component写入子组件，"}, {"id": "6952312803159965709", "title": "Element UI Table组件源码分析", "desc": "本文章从如下图所示的最基本的table入手，分析table组件源代码。本人已经对table组件原来的源码进行削减，源码点击这里下载。本文只对重要的代码片段进行讲解，推荐下载代码把项目运行起来，跟着文章"}, {"id": "6998482476037308453", "title": "Axios的用法和作用,附带复习AJAX 和promise", "desc": "Axios的学习 axios是基于promise用于浏览器和nodejs的HTTP客户端,可以用在浏览器和 node.js 中。 它本身有以下特征： 从浏览器中创建 XMLHttpRequests 从"}, {"id": "6979250199919067149", "title": "使用Vue.js，这些问题你都遇到了么？", "desc": "1、当在父组件通过props传Array/Object类型值给子组件的时候，如果子组件的props接收default为 时，系统会报错 Invalid default value for prop \""}, {"id": "6844903521091862542", "title": "基于element-ui实现table可配置化", "desc": "感谢 饿了么前端团队提供组件化框架elememt-ui，本文基础组件使用element-ui。 在开发一些系统过程中，使用table作数据展示在所难免。先来看看el-table组件。 非常简单易用的组件，根据提供的data数据，配置table每一列的数据和label。没错，这样…"}, {"id": "6847902225428119565", "title": "《前端会客厅》对话winter和尤雨溪，深度探寻Vue3设计思想(中)", "desc": "其实Vue2现在就有一个全局的方法，方法叫做Vue.observable。 effect其实并不会在我们每次所有的reactive对象发生变化的时候都执行。 他是会只有在这个counter.num有变化的时候才会执行一次。"}, {"id": "6912705483929288718", "title": "(二)vue3之v-for Array Refs", "desc": "在vue2中，v-for绑定$refs将会自动生成一个refs的数组，但是在v-for中这种行为将会变得有歧义和不高效。 而在vue3中，这种用法就不会生效，因为vue3不会自动生成refs的数组。如果我们需要拿到多个的refs组成的数组，那么就需要使用函数的方式手动去绑定。 …"}, {"id": "6844903710330454029", "title": "Vue 服务端渲染（SSR）、Nuxt.js - 从入门到实践", "desc": "10月初有幸接到公司官网改版需求，要求采用服务端渲染模式对原网站进行seo优化。 由于团队一直使用的vue技术栈，所以我第一时间想到的就是采用vue 服务端渲染（SSR）来实现该需求，即能减少团队其他成员后期维护的成本，又能把现有其他项目封装好的内容稍微改改就能直接copy过来…"}, {"id": "6994744143285059620", "title": "回首Vue3之组件篇（一）", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 这篇文章我们来讲一下内置组件component的使用方法，以及在使用它的时候我们需要注意的地方。在回首Vue3之指令篇（九）中我们稍微的提"}, {"id": "6844903717917949960", "title": "Cube-UI 最近做的更新", "desc": "Toolbar 就是常用的工具栏，每个选项都可以有独立的行为，此外，考虑到移动端宽度不够的场景，还支持了更多模式，一些优先级不够的操作可以放到更多里。 更多详情，还请移步官方文档。 TabBar 可以是独立的一些 Tab 集合，响应当前选中的 Tab。当然，如果有更负责布局需求…"}, {"id": "6987737754293501988", "title": "实现一个vite（react版）", "desc": "本文参考了vite的0.x版本的源码，由于0.x版本只支持vue和esm依赖，react并没有esm包，所以这里并进行了一些react支持方面的改造，供学习和交流"}, {"id": "7002150806765961229", "title": "Vue3追本溯源(六)生成render方法之generate函数", "desc": "上文解析了transform方法对ast对象进一步转化，依本例为模版，在type=0的根节点和type=1的元素节点对象上生成codegenNode属性。生成新的属性对象；合并相邻两个文本子节点；将创"}, {"id": "6997034772996309028", "title": "Vue3从0到1组件开发-系统组件：Notice提示", "desc": "前言 原定计划到这一部分应该是讲业务组件了。 但是想来，业务组件本身和组件库的关系不算特别大，更多的是一种工作中的经验积累；"}, {"id": "6908501447730528264", "title": "用Vue实现一个街机游戏摇杆", "desc": "最早实现这个效果，是2011年用Objective-C在iOS里实现的。原仓库地址：https://code.google.com/archive/p/ccjoystick/downloads 在Vue里实现这个东西没啥用处，毕竟Vue也不是一个游戏框架，但是谁叫Vue这个话题…"}, {"id": "6995747891474087967", "title": "Vue 源码（七）事件机制", "desc": "开发工作中，处理组件间的通讯，原生的交互，都离不开事件。这篇文章将从源码角度分析Vue是如何实现事件机制的。"}, {"id": "6982191931639988232", "title": "vue轻松实现虚拟滚动", "desc": "前言 移动端网页的日常开发中,偶尔会包含一些渲染长列表的场景.比如某旅游网站需要完全展示出全国的城市列表,再有将所有通讯录的姓名按照A,B,C...首字母依次排序展示. 长列表的数量一般在几百条范围内"}, {"id": "6944875414208643102", "title": "Vue 3.0 自定义指令的这些知识你掌握了么？", "desc": "在 Vue 的项目中，我们经常会遇到 v-if、v-show、v-for 或 v-model 这些内置指令，它们为我们提供了不同的功能。除了使用这些内置指令之外，Vue 也允许注册自定义指令。接下来，阿宝哥将使用 Vue 3 官方文档 自定义指令 章节中使用的示例，来一步步揭开…"}, {"id": "6844903607913938951", "title": "详解vue的diff算法", "desc": "目标是写一个非常详细的关于diff的干货，所以本文有点长。也会用到大量的图片以及代码举例，一起来get吧。 先来了解几个点... 1. 当数据发生变化时，vue是怎么更新节点的？ 要知道渲染真实DOM的开销是很大的，比如有时候我们修改了某个数据，如果直接渲染到真实dom上会引起…"}, {"id": "6925346648836112391", "title": "公众号打开小程序最佳解决方案（Vue）", "desc": "由于一些特殊的需求导致了项目的分离，当前的项目是在微信的公众号，部分需求要求用小程序来做，但是两者之间存在关联，需要通过公众号去跳转小程序。 这部分是官方文档中的，我是挪过来方便大家看，也可以自己去官方文档看。 官方文档 如需进一步提升服务稳定性，当上述资源不可访问时，可改访问…"}, {"id": "7002463909055561764", "title": "深入浅出Vue3 Composition API", "desc": "vue3改动的地方 使用Typescript 放弃class采用function-based API（vue2是new Vue，vue3是createApp） option API => Compos"}, {"id": "6992001722268778509", "title": "vue升级webpack5 | 八月更文挑战", "desc": "vue升级webpack5 webpack5已经发布快一年了，其中有很多新功能让人跃跃欲试，身为技术热爱者的我们怎么能够停滞不前呢 🐶，今天就来学习一下用webpack5搭建项目和新特性了解。 升级v"}, {"id": "6985314580339621901", "title": "React与Vue状态更新原理对比", "desc": "为什么要学习源码呢？每个人都有不同的看法，这就好比开车一样，如果你只会开车不会修理的话，那么车开到一半怎么办？所以想要使用好React，或多或少都得了解一些React的源码。毕竟靠人不如靠自己！"}, {"id": "6999900724326842399", "title": "【前端--面试】常见面试题（九）—— Vue", "desc": "最近沉迷于 你是我的荣耀，下载了一年多不玩的游戏，沉迷于于途大神和晶晶女神的绝世容颜里，总是会忘记写文章ε=(´ο｀*)))唉~"}, {"id": "6937939181356187662", "title": "基于饿了么骨架屏方案，使用Chrome扩展程序自动生成网页骨架屏", "desc": "前言但是page-skeleton-webpack-plugin需要puppeteer这个依赖，这玩意会导致整个项目在开发阶段很笨重,而且不是所有的页面都要用到骨架屏，后面找了套方案，决定使用谷歌插件"}, {"id": "6844903871110709256", "title": "富文本原理了解一下？", "desc": "最近产品想让我在富文本里加个旋转图片的功能，我一想🤔，就觉得事情并不简单，因为印象中好像没见过这种操作。果然，经过一番百度之后，确实没怎么看到相关信息，这也就意味着要自己动手丰衣足食了😢。但我自己对富文本又没什么了解，所以顺带稍微看了下富文本的实现方式，特此来沉淀一下，还是…"}, {"id": "6923938637377716231", "title": "我是这么设计业务[封装组件]", "desc": "hello，大家好！我是lin。 今天又想和大家分享封装组件这件事。在开发业务需求的过程中，我们可能会遇到一个全新的业务需求，也可能会遇到一个原来已有的功能去迭代新的功能。 显然，如何去设计一个全新的业务需求值是值得我们去思考的。 同样，在一个原有的功能基础上去开发迭代也是值得…"}, {"id": "6991299475499122702", "title": "用 NuxtJS 构建 SSR 商城 实战笔记——初始化项目 ｜ 8月更文挑战", "desc": "公司最近要做一个电商项目，为了更好的 seo 老板说要用 Nuxt.js 来做服务端渲染（SSR）。于是我研究了一礼拜，开始上手实战，做个记录，有不足之处或是任何意见建议，欢迎各位大佬不吝斧正~"}, {"id": "6973450516294533151", "title": "vue3的provide和inject", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 浅析 provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。 定义说明：这对选项是一起使用的。以允许一"}, {"id": "6880792496444538887", "title": "前端一键自动部署工具🛠 v1.2.0（支持集群部署） 更新咯", "desc": "当然也提出了不少的问题与优化的点。在假期的最后的两天，虽然非常的不想碰代码，但是想到之前答应大家更新的需求，还是默默地打开了电脑 🙄🙄。 当然所有的更新都是对之前的配置文件做向下兼容的，所以大家可以放心的升级使用。请阅读下方文本熟悉工具使用方法。 前端一键自动化部署脚手架服…"}, {"id": "6943211155133300743", "title": "Vue 原理（大厂必考！！！）", "desc": "考察重点，而不是考察细节。掌握好2/8原则 而 Vue ,React 引入了数据驱动视图的概念后，大大提高了效率。 数据驱动视图的概念这里就不过多赘述了。 这个方法就是在一个对象上定义一个新的属性，或者改变一个对象现有的属性，并且返回这个对象。里面有两个字段 set,get。顾…"}, {"id": "7003856201620389918", "title": "Vue果果记账-项目搭建", "desc": "创建项目 打开命令行 yarn global add @vue/cli@4.1.2 vue create vue-1 手动设置（回车确定，空格选择） cd vue-1 webstorm中打开文件夹 在"}, {"id": "7005392532079116295", "title": "Vue中.sync修饰符的作用", "desc": "1.vue规则 组件不能修改props外部数据 this.$emit可以触发事件，并传参 $event可以获取$emit的参数 2.一个场景 2.1场景描述 父组件有10000元 子组件引用父组件的1"}, {"id": "6997412902713950221", "title": "vue3.x 的生命周期和钩子函数，你get了么？", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 什么是生命周期 Vue 是组件化编程，从一个组件诞生到消亡，会经历很多过程，这些过程就叫做生命周期。 你理解了什么是生命周期，你还了解一个"}, {"id": "6989175654331711518", "title": "Vue 前端打包 chunk-vendors文件过大的问题", "desc": "Vue 前端打包 chunk-vendors文件过，性能优化处理: 1.在 vue.config.js 文件中使用 webpack的compressionPlugin 2.nginx 开启gzip优化"}, {"id": "6997745443329277982", "title": "关于海康威视SDK在VUE中的使用", "desc": "前言 在开发过程中遇到了海康威视SDK的调用，遇到了一些坑，特此记录一下。讲述了视频闪动问题以及如何引入海康SDK。"}, {"id": "6844903940262199303", "title": "终于实现滑动拼图验证码，vue", "desc": "缘由：之前看哔哩哔哩官网登录的时候有一个拼图验证码，很好奇怎么去实现。然后就想着自己弄一个。先给大家看我的最终效果。后面再一点点拆解代码。 为什么想着写这个功能呢，主要在于拼图验证码在前端这里会比较复杂并且深入。相比文字拼写，12306的图片验证码都没有拼图验证码对前端的要求来…"}, {"id": "6995091475222495269", "title": "从0开始实现响应式，仿Vue写Demo", "desc": "本文不扒源码，只需要基本得js知识就可以跟着写。跟着写可以体会一下Vue2得响应式实现。话不多说马上开始。"}, {"id": "6844903683059089416", "title": "做完小程序项目、老板给我加了6k薪资～", "desc": "最近这个项目跟团队小伙伴沟通在众多框架中最后选择了wepy，没有直接用原生的，小程序原生就……，大家都懂的，用wepy框架，给自己带来了便利，也带来了不少坑，但纵是如此，我还是怀着：“纵你虐我千百遍，我仍待你如初恋”的心态去认真把项目做好。 其实很简单，大家看了之后就都 “哦，…"}, {"id": "6881910894473773069", "title": "Vue3源码解读(一)-createApp", "desc": "距离上一篇文章源码解读预热过去了两周多的时间了，度过了国庆和中秋节，迟到的中秋国庆快乐送给大家，祝大家no bug，线上不报警，天天早下班。 Vue3系列文章将会围绕文件夹来进行讲解，主线流程走通后，再进行部分的讲解，会按照这个原则进行Vue3源码的逐一阅读和分析。 Vue3中…"}, {"id": "6876002080235274247", "title": "你要知道的vue面试题汇总", "desc": "1. vue和react的区别 2. 介绍下MVVM(数据的双向绑定 只关心数据的流传，减少强耦合性。最关键的就是数据的双向绑定 mvc和mvvm其实区别并不大。都是一种设计思想。主要就是mvc中Controller演变成mvvm中的viewModel。mvvm主要解决了mvc…"}, {"id": "6930879590554402830", "title": "Vue3组件库工程化实战 --Element3", "desc": "随着对前端功能和性能的不断提高，前端早就不是一段内嵌于页面的一段JS代码了。已经进化为一个系统复杂的工程了。 下面我就结合element3组件库的搭建经验。带大家搭建一个mini版组件库。 前端工程化大体可以分为四个方面内容。 一个文件分拆为多个互相依赖的文件，最后进行统一打包…"}, {"id": "6844903566319026184", "title": "面试的信心来源于过硬的基础", "desc": "在过去的一年很多人不满于公司没有福利、人际关系不好相处、没有发展前途的境遇等等，想着在开年来换一份工作来重新开始自己，那么 你 准备好了吗？ 下面是本人整理的一份面试材料，本想自己用的，但是新年第一天 公司突然给了我个惊喜，涨工资了！！！ 延伸 提问 怎样处理 移动端 1px …"}, {"id": "6991391154298159111", "title": "了解vue的computed  ｜  8月更文挑战", "desc": "1.了解vue的计算属性computed 1.为什么需要设计出计算属性computed 对于复杂的逻辑，如果直接写在模版内会使模版过重并且难以维护， 下面有一个简单的例子，模版的渲染是根据数据a,b进"}, {"id": "6844903593896574990", "title": "Vue前端开发规范", "desc": "1. 组件名为多个单词 2. 组件数据 3. Prop定义 4. 为v-for设置键值 6. 为组件样式设置作用域 1. 组件文件 2. 单文件组件文件的大小写 3. 基础组件名 4. 单例组件名 5. 紧密耦合的组件名 6. 组件名中的单词顺序 7. 模板中的组件名大小写 8…"}, {"id": "6995469683847594015", "title": "VUE组件入门，学的特迷糊", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 1.组件作用 组件作用：用来减少Vue实例（对象）中的代码量，日后在使用Vue开发过程中，可以根据不同的业务功能将页面中划分不同的多个组件"}, {"id": "6997040363546345486", "title": "Element 2 组件源码剖析之 Layout (栅格化)布局系统", "desc": "组件提供了布局的栅格化(Grid Layout)系统，通过基础的 24 分栏，迅速简便地创建布局。本文将深入分析源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "6965481239448911885", "title": "Vue组件设计 | 如何定制js、css动画曲线", "desc": "我们的组件库团队还在募集爱好者来参与贡献，近期有进一步丰富一部分通用组件的计划，有兴趣的小伙伴欢迎加入讨论。这里分享一下我在组件库中是如何定制动画曲线的。"}, {"id": "6989069984848674823", "title": "vue3.0-ts-Element集成的后台管理模板（强力推荐）", "desc": "vue3.0-ts-Element集成的后台管理模板（强力推荐）! 如果你是新接触vue3.0+ts那这个新模板最不能错过！"}, {"id": "6984268372930199583", "title": "组件库实战 | 用vue3+ts实现全局Header和列表数据渲染ColumnList", "desc": "🖼️序言 最近在用 vue3 和 ts 捣鼓一些小工具，发现平常开发中一个很常见的需求就是，数据列表的渲染。现在重新学习，发现我在学 `vue2` 时的很多设计规范和逻辑都考虑的不是特别妥当。"}, {"id": "6992480792634982436", "title": "防抖和节流在vue中使用", "desc": "防抖：频繁操作防止抖动，在操作后 n 秒内不操作，才触发事件，若继续操作，则重新计时。 节流：频繁操作稀释函数执行，频繁操作时，每隔n秒才触发一次"}, {"id": "6994233392946479117", "title": "No.9 vue-element-admin 学习使用（四）登录成功后，userinfo获取，根据权限生成路由", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 用户登录成功之后，需要展示页面了，但是不同的用户权限是不一样的，可以看到的左侧侧边栏，可以直接通过url访问的页面，都需要知道当前登录用户的"}, {"id": "6844903838164451336", "title": "细谈 vue - slot 篇", "desc": "今天我们将分析我们经常使用的 vue 功能 slot 是如何设计和实现的，本文将围绕 普通插槽 和 作用域插槽 以及 vue 2.6.x 版本的 v-slot 展开对该话题的讨论。当然还不懂用法的同学建议官网先看看相关 API 先。接下来，我们直接进入正文吧 对于此，大家可能都…"}, {"id": "6844903993727008776", "title": "TypeScript系列🔥尾声篇, 什么是声明文件(declare)? [🦕全局声明篇]", "desc": "年底比较忙🔥, 受个人时间限制, 暂把\"声明\"部分的内容分为\"全局声明篇\"和\"模块声明篇\", 👷还请多多包涵, 本次先说\"全局\". 声明文件就是给js代码补充类型标注. 这样在ts编译环境下就不会提示js文件\"缺少类型\". 看过vue3源码的同学一定知道这些是vue中的变量…"}, {"id": "6844903975230111757", "title": "跟我一起，从0实现并封装拖拽排列组件", "desc": "这是这次系列文章的第二篇，我自己封装了一个用vue实现的拖拽排列卡片组件，并且发布到npm，详细地记录下来了整体制作过程。总共有三篇文章，介绍组件的制作思路和遇到的问题，以及在发布到npm上并下载使用的过程中，发生了什么问题并如何解决。 移动卡片在另一张卡片上方附近区域时，要进…"}, {"id": "6844903919273918477", "title": "Vue keep-alive深入理解及实践总结", "desc": "在平常开发中，有部分组件没有必要多次初始化，这时，我们需要将组件进行持久化，使组件的状态维持不变，在下一次展示时，也不会进行重新初始化组件。 也就是说，keepalive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染 。也就是所谓的组件缓存 &#x3C…"}, {"id": "6993965295530590221", "title": "创建一个项目【一】搭建vue脚手架，创建git仓库", "desc": "1. 在要创建文件的目录下打开cmd窗口（文件夹目录处输入cmd回车打开） 2. 输入指令 vue create 项目名回车，选择需要的配置 3. 输入指令 npm run serve启动项目"}, {"id": "6977385689222479908", "title": "Electron+Vue3 MAC 版日历开发记录(24)——样式调整开始", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6992750559350489096", "title": "Vue配置起步(一)", "desc": "前言 有小伙伴看见标题开头就可能觉得是水文章的，至于为啥要写个这么基础的文章呢？因为Vue系列的文章也写了有几篇了，有组件、反向传值、Vue"}, {"id": "6993687565278806023", "title": "vue3和vue2中渲染函数使用区别", "desc": "由于其他的都和好理解。当看vue官网的时候，看到在h函数中使用插槽的时候一脸懵逼。然后就在网上找一找解释。没有找到讲解好的。于是就又仔细看官网，最后无意间理解了。"}, {"id": "6858866879339954189", "title": "用（Node+MongoDB）搭建最简单的图床或者网盘", "desc": "在掘金白嫖了这么久，总觉得得有个产出，否则白嫖的怪不好意思的🤣看到网上各种各样的附件上传，觉得对于入门的人可能有些难度，今天就带来了关于Node+Mongodb的附件上传下载方面的文章。该项目比较简单，所以目录简单的一批，各位学到的可以快速搭建一个小网盘图床啥的。感谢掘金各位…"}, {"id": "7002499019662426120", "title": "脚手架vue-cli搭建项目问题总结", "desc": "简要总结一下，自己在利用脚手架搭建项目过程中所遇到的一些问题，比如stylus安装出错，rem插件配置不起作用等，持续更新。"}, {"id": "6895360073460416525", "title": "Vue3教程：用 Vue3 开发小程序，这里有一份实践代码！ ", "desc": "Vue 3 发布以后，最近也在学习和写一些 Vue3 的 demo 和项目，我也一直想着什么时候能在小程序里使用新特性，经过一段时间的实践，最终整理了这篇文章。 寻寻觅觅冷冷清清，凄凄惨惨戚戚。 于是我翻遍了市面上的小程序框架，如 uni-app、wepy、mpvue，目前（截…"}, {"id": "6885134472929345544", "title": "【图文并茂，点赞收藏哦！】重学巩固你的Vuejs知识体系（上）", "desc": "置身世外只为暗中观察！！！Hello大家好，我是魔王哪吒！重学巩固你的Vuejs知识体系，如果有哪些知识点遗漏，还望在评论中说明，让我可以及时更新本篇内容知识体系。欢迎点赞收藏！ 插值语法：Mustache，v-once，v-html，v-text，v-pre，v-block。…"}, {"id": "6844904005265686542", "title": "wl-gantt：一个简单易用且高度可配置的甘特图、进度计划、项目管理插件", "desc": "甘特图（Gantt chart）又称为横道图、条状图(Bar chart)、生产计划进度图。其通过条状图来显示项目，进度，和其他时间相关的系统进展的内在关系随着时间进展的情况。以提出者亨利·劳伦斯·甘特（Henry Laurence Gantt）先生的名字命名。 目前市面上最有…"}, {"id": "6976972929384841253", "title": "Electron+Vue3 MAC 版日历开发记录(23)——事件完整功能完成", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6956022225862393870", "title": "技术期刊 · 耿耿星河欲曙天 | SpaceX 上的前端架构;跨平台新选择;开源世界的新“大门”;用户推荐算法的敲门砖;关于“鸿蒙”，你应该知道这些", "desc": "迟迟钟鼓初长夜，耿耿星河欲曙天。仰望星空是人类最质朴的梦想，承载了人们太多太多的美好愿景，作为程序员不断接受挑战，用代码开创一个时代；将代码埋入北极薪火相传……当你脚踏大地眺望星河，又在思考些什么呢？"}, {"id": "6844903872637632525", "title": "【Vue项目总结】项目nginx部署", "desc": "项目开发完成，接下来是上线，关于vue项目的部署，我司前端是部署在nginx服务器上，关于nginx的相关文档，请自行查阅；本文只记录部署时碰到的一些问题。 vue项目打包后，是生成一系列的静态文件，包括项目的请求IP都打入包内，如果后台服务改动，这时你的前端文件，又要重新编译…"}, {"id": "6981800084686143518", "title": "移动端适配rem/vw,vh原理(详细)", "desc": "了解像素相关知识: 移动端适配 掌握web开发基础系列--物理像素、逻辑像素、css像素 为什么给750px的设计图 其实我一直很想写一些关于适配方面的文章,因为很多东西只有实践才能对这个知识点更加的"}, {"id": "6844903864559206414", "title": "详解Vue计算属性和侦听属性", "desc": "一些初学者可能对计算属性和侦听属性的使用场景感到困惑不解，本文主要介绍两者的用法、使用场景及其两者的区别。 计算属性是自动监听依赖值的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。它有以下几个特点： 数据可以进行逻辑处理，减少模板中计…"}, {"id": "6844903648795836424", "title": "我为什么要立刻放弃 React 而使用 Vue？", "desc": "......."}, {"id": "6990405472922632229", "title": "vue源码之模板编译和组件化", "desc": "模板编译的作用 用户只需要编写类似html的代码-vuejs模板，通过编译器将模板转换为返回VNode的render函数，用户就不用写复杂的render函数了 .vue文件会被webpack在构建的过"}, {"id": "6962088402174869517", "title": "用 RollupJs 从 0 搭建一个属于自己的 vue 组件库", "desc": "Rollup是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library 或应用程序。结合vue3搭建一个属于自己的ui库。"}, {"id": "6844903854111195144", "title": "基于vue做一个禅道主页拖拽效果", "desc": "最近在做一个基于vue的后台管理项目。平时项目进度统计就在上禅道上进行。so~ 然后领导就感觉这个拖拽效果还行，能不能加到咱们项目里面。 既然领导发话，那就开干。。 拖动的实现基于 vuedraggable的插件开发。 主页为两栏流式布局，每一个组件可以在上下拖动，也可以左右拖…"}, {"id": "6899620558087356423", "title": "【Vue.js进阶】总结我从Vue源码学到了什么（上）", "desc": "阅读Vue源码仅仅只是为了面试吗？我想，大概很多人都会这么觉得吧！但我并不这么想...为什么呢？（ps:后续再慢慢讲述...）当然，当你选择去阅读Vue源码也真的是需要一定的勇气，为什么会这么说？如果自己花了时间但却没有一点收获，心情肯定是失落的。好在功夫不负有心人，这段时间通…"}, {"id": "6844904100304257031", "title": "编写可复用的组件，我们可以收获很多", "desc": "轮播图组件想必是使用最多的组件之一了，尤其是每个首页当中必定会出现它的身影。 很多轮播图效果都是自带自动播放的，所以我们当前也不会置之不理。我们通过给Swiper组件传递autoplay的prop来进行设置 默认自动播放的时候，图片都是向左移动到-100%的位置。如果考虑到用户…"}, {"id": "6996262702272217118", "title": "Vue3.0的新语法糖-script setup", "desc": "vue3.0的语法糖 script setup 写在前面 进入vue3.0 我们的vue代码模板格式也发生变化 也许你看到的代码是这样的 但是每次 都要 import defineComponent "}, {"id": "6979488635628290061", "title": "前端vue基础面试题", "desc": "本文整理总结了vue常见面试题，以便前端开发爱好者学习，更好的理解vue框架，拿到满意的offer。如有不对之处，欢迎指正"}, {"id": "6989898980784078855", "title": "Vue3追本溯源(二)双向数据绑定", "desc": "本篇接上篇入口函数，以一个简单的事例(后续称之为本例)详细解析mount之后的操作(解析传入的options参数、template模版编译、生成虚拟DOM对象、虚拟DOM对象解析生成真正的DOM、数据"}, {"id": "6888924565183922184", "title": "初试vue3+vite+ant-design-vue2.0开发后台项目总结", "desc": "vue3的到来在前端社区尤为火爆，vue3的更新在开发，性能以及构建方面都有了较大的更新，也是未来的一个开发趋势。随着vue3的更新，尤雨溪还开发了vite构建工具，在项目开发阶段少了打包阶段，对比vue-cli，速度方面提高了好几倍 与vue2不同，vue3的index.ht…"}, {"id": "7002476396056412173", "title": "Vue 计算属性缓存和方法的区别，从本质上看", "desc": "Vue 计算属性缓存和方法的区别：从另一段代码来看 Vue 计算属性缓存与方法的区别官方文档说的很清楚，但是其中以Date.now()为例似乎不能太直观的看出他们的差异，因为当我们重复使用方法调用Da"}, {"id": "6898504898380464142", "title": "Vue3,我决定不再使用Vuex", "desc": "在开发基于Vue3的项目中发现我们可以不再依赖Vuex也能很方便的来管理数据,只需要通过Composition Api可以快捷的建立简单易懂的全局数据存储. 通过暴露的IState我们也可以实现对State的代码访问. 创建好State和Action后我们将它们通过Store整…"}, {"id": "7002470127862022152", "title": "阅读Vue2的diff算法源码", "desc": "通过学习vue2的patch主要源码，理解diff算法的是实现，参考已有的网络答案，总结面试题答案。"}, {"id": "6975137341128540190", "title": "Vue3中shallowReactive和shallowRef对数据进行非深度监听", "desc": "“这是我参与更文挑战的第2天，活动详情查看： 更文挑战” 1.Vue3 中 ref 和 reactive 都是深度监听 2.说明 ref 对数据进行深度监听 3.使用 shallowReactive "}, {"id": "6916302771129942030", "title": "开源⚡ auto-deploy-app自动化构建部署工具", "desc": "之前实过现从零开始 Node实现前端自动化部署，并实现对Docker的支持升级 前端docker自动化部署。但仍存在较多不足。 鉴于上一版本（终端执行版本）的痛点，提供一个实时交互、直观的用户界面尤为重要。 考虑到SSH连接、文件压缩、上传等操作，需要Node提供支持，而交互场…"}, {"id": "6844903830090416136", "title": "基于 vue 的移动端页面可视化搭建工具思路", "desc": "首先我承认我标题党了。。。与其说是可视化搭建工具，不如说是可视化生成页面配置工具，即用拖拽的方式生成页面配置，再通过框架的动态组件的方式，基于配置，生成页面。 现在的公司，一个个都开始整自己的组件库，组件库搭建好以后，通过业务积累、聚合基础组件及抽象部分业务代码，又会产出复用性…"}, {"id": "6844903671906435080", "title": "snabbdom 源码阅读分析", "desc": "随着 React Vue 等框架的流行，Virtual DOM 也越来越火，snabbdom 是其中一种实现，而且 Vue 2.x 版本的 Virtual DOM 部分也是基于 snabbdom 进行修改的。snabbdom 这个库核心代码只有 200 多行，非常适合想要深入了…"}, {"id": "6844903664000172040", "title": "动画道路上的新宠 -- Lottie", "desc": "1. lottie 简介 Lottie是一个iOS，Android和React Native库，可以实时渲染After Effects动画，并且允许本地app像静态资源那样轻松地使用动画。Lottie使用名为Bodymovin的开源After Effects的扩展程序导出的JS…"}, {"id": "6924872565672706062", "title": "vue实现禁止浏览器记住密码功能", "desc": "由于 autocomplete=\"off\" 现代浏览器已经不支持，所以直接放弃了对密码框设置，直接使用 autocomplete=\"new-password\" ，亲测Chrome(v88.0.4324.104)、edge(v88.0.705.56)及火狐(v67)可用，但火狐(…"}, {"id": "6844903670300016648", "title": "Vue-cli@3.0 插件系统简析", "desc": "Vue-cli@3.0 是一个全新的 Vue 项目脚手架。不同于 1.x/2.x 基于模板的脚手架，Vue-cli@3.0 采用了一套基于插件的架构，它将部分核心功能收敛至 CLI 内部，同时对开发者暴露可拓展的 API 以供开发者对 CLI 的功能进行灵活的拓展和配置。接下来…"}, {"id": "6844903577215827982", "title": "为什么使用v-for时必须添加唯一的key?", "desc": "两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。 同一层级的一组节点，他们可以通过唯一的id进行区分。基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从O(n^3)降到了O(n)。 当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程…"}, {"id": "6987023309091110919", "title": "js显示格式化代码并高亮（vue中实现代码高亮）", "desc": "使用 Highlight.js 和 js-beautify.js 实现代码格式化高亮显示。并且封装为vue指令使用"}, {"id": "6971594929470603271", "title": "浅谈Vue中的12种组件通信方式及理解", "desc": "这是我参与更文挑战的第9天，活动详情查看 更文挑战 重新梳理了一下，个人认为Vue中组件通信思想与React一致，都是单向数据流，高阶流向低阶(父传子)，子组件只可通知父组件，此时数据还是在父级变更而"}, {"id": "6844904142465400840", "title": "Vuejs+ElementUI项目开发中遇到的坑（一）", "desc": "错误现象：vue-router跳转到子路由页面时，一直报错路由找不到或者直接跳到404页面。 需求场景：需要从父级路由跳转到子级隐藏的路由中，左侧侧边栏只显示第一个子路由对应的菜单项，第二个子路由通过第一个子路由跳转过去。 上述路由配置文件与规则还是要结合vue-router的…"}, {"id": "6909009001233514510", "title": "一劳永逸，解决基于 keep-alive 的后台多级路由缓存问题", "desc": "用过 vue-element-admin 的同学一定很清楚，路由的配置直接关系侧边栏导航菜单的展示，也得益于这种设计思路，几乎大部分后台框架都采用这个方案，当然也包括了我写的 Fantastic-admin 这个中后台框架。 但这个方案有个明显的问题，就是为了实现多级侧边栏导航…"}, {"id": "7003623646484758536", "title": "Vue3中的的ref函数和reactive函数及其浅层次响应式原理", "desc": "在这里我会用通俗易懂的语言和浅层次的原理来帮助学习Vue的小伙伴去理解ref函数和reactive函数和二者的区别以及其响应式原理，帮助大家少走弯路。这里对于不会描述底层核心代码，想了解底层原理的小伙"}, {"id": "6998165868332990471", "title": "vue3响应式原理--Proxy", "desc": "什么是响应式? 数据变化，视图(也就是DOM)会自动变化。 我们在使用vue差值表达式时，改变数据后，页面上相应数据会自动改变。"}, {"id": "6844903666382553102", "title": "用Vue实现一个美团app的影院推荐选座功能", "desc": "上图是点击推荐选座5人后选出的座位(绿色)，这个demo和美团app不同的地方在于可以连续进行推荐选座，美团app点击了推荐选座就必须买票才能继续选择。 这里注意vue中改变data中的二维数组必须先缓存二维数组，修改后，最终将二维数组重新赋值，否则修改不生效，因为Vue无法侦…"}, {"id": "6854573213985275911", "title": "从Vite工具看ESM模块化开发探索（一）", "desc": "当时就想到我们公司内部的代码，在webpack加持下，那是一个“重”，每次跑项目的时候，我的16G内存的MBP就扛不住了，风扇很响，烫的可以煮鸡蛋，编译时间也是非常头疼。 随后在后续的开发中，我也一直持续在关注尤大仓库的vite代码更新，发现他更新得比较频繁，可以看出尤大对于这…"}, {"id": "6844903763589726222", "title": "一个零配置开箱即用的React/Vue应用自动化构建脚手架", "desc": "在前端技术的日益壮大下，从以前简单的几个文件到现在的一堆文件，各种扩展和工具植入到项目里，使得项目越来越庞大越来越难管理，前端项目也因此而趋于工程化和一体化。日新月异的前端技术已经让前端代码的业务逻辑和交互效果越来越复杂，项目会一直维护和迭代，令开发者更加不易于管理。模块化开发…"}, {"id": "6911301654008561672", "title": "从0到1封装表单组件（TypeScript + Vue3.0 版）", "desc": "我们直接使用 bootstrap 的精美样式。首先在通过 Vue-Cli 安装的项目中安装 bootstrap。 Vue-Cli初始化项目的方法 https://juejin.cn/post/6908185323801575432 有介绍，这里不再赘述。 为了能在 vue 文件…"}, {"id": "6900538755934633991", "title": "九种简洁的Vue数据通讯", "desc": "这里就略过一下api吧.毕竟这个东西用vue的基本使用到这个东西.大家都很熟. Action 提交的是 mutation，而不是直接变更状态。 Action 可以包含任意异步操作。"}, {"id": "6844903599764406286", "title": "vuex 源码：深入 vuex 之辅助函数 mapState", "desc": "当一个组件要获取多个 state 的时候，声明计算属性就会变得重复和冗余了。我们可以使用到辅助函数 mapState 来更快更简洁地生成计算属性。 所以我们得清楚，mapState 的作用就是帮我们把一个对象或数组里的值转化成计算属性的写法。同理，其它的辅助函数也是大同小异，只…"}, {"id": "6929038446837104647", "title": "无星的前端之旅（十八）-Vue3+ts常见问题", "desc": "第一次用Vue3+ts，采用了eslint（aribnb），遇到了一些问题，又不想用经常性使用any，只能逼迫自己解决问题。 新建一个xxx.d.ts声明文件，并在tsconfig中引入（可以使用include，也可以使用typeRoots等，主要看自己项目配置和路径）。 这样…"}, {"id": "6844903862931832846", "title": "【Vue进阶】青铜选手，如何自研一套UI库？", "desc": "Github上关于Vue的UI库，大大小小不计其数，即便是已经被推广使用的成熟库，也有很多。很多时候，我们自研一套UI库，不是想要做得多牛逼，竞争过别人（事实咱也干不过人家，除非你不是一个人在战斗。毕竟这不仅是个技术活，还是个体力活），我们仅仅是源自一个青铜对王者的仰望或者是为…"}, {"id": "6844903671461838862", "title": "Vue与React比较", "desc": "提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。 1. 运行时性能比较 React 和 Vue 都是非常快的，所以速度并不是在它们之中做选择的决定性因素。对于具体的数据…"}, {"id": "6998329060556439559", "title": "回首Vue3之API篇（七）", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 这篇文章我们来讲一下最后五个全局APIcreateRenderer、nextTick、mergeProps、useCssModule和ve"}, {"id": "6990553182866767908", "title": "控制elementUI的Popover弹出框显示OR隐藏", "desc": "认识Popover组件 先来个基础版的Popover组件，具体属性可以查看官网。这时候的组件，当点击组件外时会自动关闭组件。"}, {"id": "6993640312404967454", "title": "Vue2.xx 响应式原理及Observer、Dep、Watcher 介绍 computed、nextTick原理简述", "desc": "总结下 Vue2 中部分常用的 api 的原理，方便开发与复习时备用 主要内容如下： 一、Vue2 实现原理简述：简要介绍 Observer、Dep、Watcher的作用 Observer 的作用： "}, {"id": "6969606290620284965", "title": "Vue进阶-从0到1搭建UI组件库", "desc": "基本介绍 课程介绍 做什么？ 哪些内容？ 涉及知识点 课程收货 学习前提 效果演示 初始化vue项目 安装组件库 全局导入 使用组件 常见组件封装 项目初始化 使用vue-cli脚手架快速搭建一个vu"}, {"id": "6844904033874886663", "title": "[VUE] vue配置反向代理解决跨域", "desc": "在客户端和原始服务器(origin server)之间架设一个代理服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。 客户端无需做任何配置。…"}, {"id": "6993881292806832164", "title": "极简系列---vue3.x表单组件form", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 本文从零开始实现一个极简版的vue3.x表单组件ti-form"}, {"id": "6844904000655998984", "title": "『前端工程』—— Vue CLI3搭建组件库并实现按需引入实战操作", "desc": "因为多入口组件库中开发环境和生成环境的配置是不同，所有要区分开来。 通过process.env.NODE_ENV变量来判断，生产环境时process.env.NODE_ENV为development。 在Vue组件库项目中原来src文件夹的内容是demo展示的内容，所以文件名改…"}, {"id": "6998417353063006222", "title": "VUE——登录/注销 路由守卫", "desc": "token http:无状态的 cookie:【客户端】记录状态 session:【服务器】记录状态 token:维持状态————存在【跨域】 路由导航守卫 如果用户没有登录，但是直接通过URL访问特"}, {"id": "6994053500678340621", "title": "一些vue你不太知道的知识（2） | 8月更文挑战", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 一、vue组件data为什么必须是个函数而vue根实例没有这个限制？ 1、函数每次执行都会返回全新的data对象的实例 2、vue组件可能会"}, {"id": "7000005438259331108", "title": "vue这些小细节我知道吗", "desc": "本文整理了前端高频vue考点，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6986975014473957412", "title": "Vue: Uncaught TypeError: Cannot read property 'component' of undefined", "desc": "Vue: Uncaught TypeError: Cannot read property 'component' of undefined"}, {"id": "6919053614711308301", "title": "速度与激情之 Vite 初体验", "desc": "大家最近学习 Vue3 学废了吗？尤雨溪尤大大马不停蹄地又给大家送来了专门为 Vue3 打造的开发利器 — Vite。你是否在开发过程中使用 Webpack 觉得不那么丝滑，是否等待启动编译可以喝好几口热水？本文将带领大家简单了解 Vite 的基本知识和作用，让我们更好的开启 …"}, {"id": "6999936532329005093", "title": "vue中的插槽slot使用方法", "desc": "什么是插槽？ 插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 插槽显不显示、怎样显示是由父组"}, {"id": "6999179759800287269", "title": "Vue项目搭建和配置", "desc": "创建Vue项目 1、在当前目录下创建项目 2、选择自定义创建，反选掉lint / formatter选项 3、添加eslint所需的包 4、创建eslint配置文件 配置vscode 1、下载相关插件"}, {"id": "6885535026184716295", "title": "骨架屏(page-skeleton-webpack-plugin)初探", "desc": "最近频频看到了骨架屏这个词，其实在这之前鲜少听过骨架屏这个词。只是平时在浏览网站时，会经常看到某个页面在尚未获取到真正数据时展示的一些占位图形。 那实际上这个就是前面所描述的骨架屏，即在页面数据尚未加载前先给用户展示出页面的大致结构，在获取到数据以后在具体展示页面的内容。那骨架…"}, {"id": "6844904081987731463", "title": "总结Vue组件的通信", "desc": "总结是一种学习方式，取长补短是一种学习态度。 最常用的一种父子间传递数据的方式。 父组件通过绑定属性来向子组件传递数据，子组件通过 props 属性来获取对应的数据；子组件通过 $emit 事件向父组件发送消息，将自己的数据传递给父组件。 props使得父子之间形成一种单向数据…"}, {"id": "6972431757677330440", "title": "vue封装的可视化滚动表格组件", "desc": "前言 在大屏数据可视化方面，我们经常会使用到表格组件，这次封装的是不带分页的表格组件，对于长列表表格，我们采用的是滚动轮播的形式向下滚动展示表格数据。"}, {"id": "6910458312865611784", "title": "Vue CLI 插件开发实战——10 分钟实现组件自动生成", "desc": "近期工作的过程中跟 Vue CLI 的插件打交道比较多，想了想自己在学校写项目的时候最烦的就是项目创建之后手动创建组件/页面和配置路由，于是突发奇想决定写一个脚手架的插件，自动实现创建组件/页面和配置路由的功能。 本文会一步一步教你如何编写一个自己的 Vue CLI 插件，并发…"}, {"id": "6999162902221422599", "title": "基于Vue3造轮子之实现H5的Picker组件", "desc": "Vue3出现一段时间了，也有看过基础知识，所以准备小小造一个轮子。Picker组件的话，是H5里面比较常用的一个组件，这里就拿它开刀，实现一个非常简单的Picker组件。"}, {"id": "6883365724228681742", "title": "🚩Vue源码——如何监听数据变化", "desc": "Vue 是用数据来驱动来生成视图的，当数据发生改变时视图也跟随改变。要实现这个功能，首先要能监听到数据的变化，然后才能在数据发生变化时通知视图做出对应的改变。数据可分为对象类型和数组类型，其监听的过程是不一样的。 回想一下，在 Vue 开发过程中，当改变 props 、data…"}, {"id": "6952332420716691486", "title": "snabbdom源码解析：利用分治思想理解diff算法", "desc": "本文从最短编辑距离问题的动态规划思路出发，通过分治思想理解snabbdom源码中diff实现的原理，此外还简单分析了snabbdom中patch、createElm和updateChildren等方法"}, {"id": "6844903960902369287", "title": "从零开始构建 vue3", "desc": "2019年10月5日凌晨，Vue 的作者尤雨溪公布了 Vue3 的源代码。当然，它暂时还不是完整的 Vue3，而是 pre-alpha 版，只完成了一些核心功能。github 命名为 vue-next ，寓意下一代 vue 。在笔者发文前，已经有很多大佬陆续发布了一些解读 Vu…"}, {"id": "6844903871668551687", "title": "Vue踩坑之旅（二）—— 监听页面刷新和关闭", "desc": "我在做项目的时候，有一个需求，在离开（跳转或者关闭）购物车页面或者刷新购物车页面的时候向服务器提交一次购物车商品数量的变化。 将提交的异步操作放到 beforeDestroy 钩子函数中。 但是发现 beforeDestroy 只能监听到页面间的跳转，无法监听到页面刷新和关闭标…"}, {"id": "6844903924252540941", "title": "Element ui表格组件修改，实现可编辑单元格，自定义下拉筛选，数据化结构，快捷选择。", "desc": "在使用ElementUI过程中，表格的使用占了很大一部分，但是使用起来总感觉不方便，而且部分想要的功能也没有。这促使我在ElementUI 表格组件上再进行一次封装。在这基础上添加所需功能，并且要使用更方便，但是不能破坏原有功能。 此项目已经上传GitHub，欢迎交流，希望能给…"}, {"id": "6941749743970320421", "title": "vue3.0实战踩坑", "desc": "年前公司开了一个新项目，普通的业务系统，心痒难耐的就上了 3.0 的船，遗憾的是工期比较紧没上ts (我倒是希望搞一搞tsx， 此处叹气),小坑有一点。不过也算是踩过来了。 本文主要整理记录一些，实际开发中遇到的问题，所以vue3.0 实践大佬 可以不用继续看了，面向的是像我一…"}, {"id": "7002514874173489189", "title": "elementUi +vue 实现 表格添加动态列", "desc": "“这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战” 前提 在利用elementUI写表格的时候 经常会遇到表格 自动增加列的功能，在此记录一下"}, {"id": "6874583350850355208", "title": "Vue3-one piece尝鲜：React Hooks VS Composition API", "desc": "万众期待的Vue3在9月18号发布了正式版本，代号为One Piece，看过海贼的都知道One Piece是大秘宝，也就意味着这次从2.x到3.x的升级有很多的亮点和惊喜等着去发现。比如说全新的 Proxy 架构， Composition API ，对 TypeScript 的…"}, {"id": "6983654843902607391", "title": "08.Vue事件总线（EventBus）", "desc": "如果咱们的应用程序不需要类似Vuex这样的库来处理组件之间的数据通信，就可以考虑Vue中的 事件总线 ，即 **EventBus**来通信。 一.EventBus事件总线简介 EventBus又称事件"}, {"id": "6992883090126045191", "title": "Vue中 \".sync\"修饰符的作用", "desc": "一、$emit 子组件通过props可以引用父组件的数据，那么当子组件想要修改这个数据时，则可以通过$emit在子组件上修改父组件的数据。 $emit 共接收两个参数 ： {string} event"}, {"id": "6991731267909713928", "title": "在 vue3 中使用 markdown 编辑器 md-editor-v3", "desc": "整理了大家的需求后，给编辑器添加了图片裁剪上传和内容预览功能。本文详细演示了编辑器的使用，均写了一部分演示代码~~"}, {"id": "6992852229761794084", "title": "vue的通信方式总结及案例分析", "desc": "本文主要基于的vue 2.x版本 vue中的通信方式比较多，以我个人使用到的做了一些总结，大致有一下几种： props events slot ref eventBus..."}, {"id": "6917231784581136391", "title": "Vue定时器与JS 定时器 setInterval() 和 setTimeout()【七日打卡】", "desc": "建议使用window对象自带的，因为不容易错。 如果一不小心只引入一个，就怎么也清不掉了。 一定要在beforeDestroy中清除定时器。 setInterval() ：按照指定的周期（以毫秒计）来调用函数或计算表达式。方法会不停地调用函数，直到 clearInterval(…"}, {"id": "6998312310448062471", "title": "No.20 vue-element-admin 学习使用（十五）国际化，错误处理", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 国际化 本项目通过vue-i18n实现国际化，由于使用了element，所以在项目国际化的时候，也需要把element国际化，在@/lan"}, {"id": "6876811850068328462", "title": "Vue 轻松实现可视化店铺装修", "desc": "可视化店铺装修可以归属于可视化页面配置，比如我们常见的可视化活动配置、H5页面编辑配置、店铺装修这类，主要交互都是通过拖动页面组件实现快速搭建一个页面。 接下来我们以实现一个 店铺装修 的需求来解决此类场景。 需求大致就是要实现一个类似淘宝店铺装修的需求，允许用户选择需要的页面…"}, {"id": "6844903695591686152", "title": "基于Vue实现可以拖拽排序的树形表格（已开源）", "desc": "效果图如下：在线体验DEMOdrag-tree-table使用方式参数可选值描述idString唯一标志parent_idString父节点IDorderNumber排序,0开始,onDrag后\bor"}, {"id": "6844904047187591182", "title": "前端深入之Vue篇 丨如何在项目中优雅的使用Echarts（上）", "desc": "最近由于一些不可抗力因素，我跳槽去了一家做高校教育服务的公司，刚入职就正好赶上了PC端项目的重构，而我主要负责数据可视化这一模块，其实做起来不算复杂，但是在使用Echarts的过程中也踩到了一些坑。 希望小伙伴阅读完之后可以在项目中掌握Echarts正确的使用方式，并且在我的基…"}, {"id": "6979186001411473444", "title": "vue 实现 el-select 下拉选项的懒加载", "desc": "下拉选择是常用的用户交互选择的操作;常用固定选择项或者动态渲染选择项. 通过监听容器的滚动事件,滚到最底部时,执行加载数据函数."}, {"id": "6844903566298054670", "title": "巧用 CSS 动画实现动态气泡背景", "desc": "然鹅，还是被昨晚特意设置的八个闹钟⏰吵醒，冬天早上起床的难度...想必各位都心有体会 😭，抱着一万个不情愿起床早早地来到了办公室，还是熟悉的环境，还是熟悉的味道。。。 还有，熟悉的任务需求😂。 今天的第一个任务是写个登录页面，老大给了我一个参(chao)考(xi)案例，大家…"}, {"id": "6986414886716702728", "title": "在vue项目中使用jsx的技巧", "desc": "1、JSX是什么 JSX 是 Facebook 工程团队创造的一个术语。 2、绑定变量 在JSX中绑定变量，跟在template中绑定变量，不太一样。 3、绑定HTML 在JSX中设置HTML内容，跟"}, {"id": "6984669558162325535", "title": "用Vue3.0开发音乐Web app （视频源码齐）", "desc": "用Vue3.0开发音乐Web app Vue3.0高阶实战：开发高质量音乐Web app 第2章 的内容有如下这些：使用脚手架工具创建项目 、（视频资源vx（cmL46679910））脚手架生成代码介"}, {"id": "6844903955948896263", "title": "vue中的渲染函数/jsx和插槽slot", "desc": "1. 前言 这段时间重新看了下vue的文档，发现还有很多使用使用频率不是那么高，或者简单使用过但不那么清晰的知识点。今天我们就来看一下其中的渲染函数render，jsx语法和插槽slot的用法。 2. 模板语法的弊端 熟悉vue单文件组件写法的同学们都知道，vue文件的html…"}, {"id": "6844903885555925000", "title": "iView 2019 新品发布会", "desc": "iView 2019 新品发布会将在 2019年07月27日14点在首都北京举办。 由于现场至多容纳 150人，为防止无效报名，收取 35元-50元 门票，门票的所有收入将捐赠给 Vue.js 开源项目。"}, {"id": "6998726746321207310", "title": "【知识】Uni-app-学习笔记 05", "desc": "<template> <view> <button type=\"primary\" @click=\"setStor\">存储数据</button> </view> </template> <sc"}, {"id": "6995912380299345927", "title": "前端小白不迷路 - 今天来介绍下Vue2的响应式原理Object.defineProperty()", "desc": "大家知道，vue2的响应式原理是用到了数据劫持，语法是Object.defineProperty()，这个是ES5的语法，作用就是劫持对象的某个属性"}, {"id": "6844903838508384269", "title": "[Vue.js进阶]从源码角度剖析计算属性的原理", "desc": "当 Dep.target 存在，说明在上一步弹出了 computed watcher 后全局的栈中仍有其他的 watcher。比如当视图中依赖了当前的计算属性，那当前栈顶的 watcher 就是 render watcher，亦或者另外一个计算属性内部依赖了当前的计算属性，那栈…"}, {"id": "7004627859696255007", "title": "前端vue使用bus通讯操作方法", "desc": "第一步：建立bus文件 组件通信 在文件夹下面写一个bus.js的文件写入以下代码 第二步：建立bus文件 发送 第三步：建立bus文件 接收"}, {"id": "6972078529529774094", "title": "使用Vue3和NodeJS搭建h5移动端单页和后端RESTful项目模版", "desc": "一、项目介绍 本项目使用Vue3搭建h5移动端单页，使用NodeJS基于MVC搭建RESTful框架模版。"}, {"id": "6844903591262552077", "title": "vuepress：Vue 官方出品的文档生成器", "desc": "基于 Vue 的简约文档生成器，相对 docsify 优势在于对 SEO 友好。"}, {"id": "6959474220799639559", "title": "vue打包优化——vendor体积过大", "desc": "在Vue项目中，引入的所有js、css文件，编译时都会被打包进vendor.js，浏览器在加载该文件之后才能开始显示首屏。若是引入的库众多，那么vendor.js文件体积将会相当的大。对其进行打包优化"}, {"id": "6844904190255300615", "title": "全局挂载组件之Vue.extend", "desc": "Vue.extend 属于Vue的全局 api，在实际业务开发中我们很少使用，因为相比常用的 Vue.component 写法使用 extend 步骤要更加繁琐一些。但是在一些独立组件开发场景中（例如：ElementUI库），所以Vue.extend + $mount 这对组合…"}, {"id": "6926835519703744519", "title": "记Vuex--源码初体验.", "desc": "使用Vue插件Vuex也有一端时间了.手里的项目我也使用Vuex抽离了一部分Common数据 可能这就是那句 Flux 架构就像眼镜：您自会知道什么时候需要它. 之前在面试的过程中.也被问到过一些感觉挺奇怪的问题.抱着学习的态度.花了几天时间看了下源码了解总结了一下.最近还看到…"}, {"id": "6844903560463777805", "title": "从1万篇文章中挑出的40篇最棒的 Vue 学习指南（2018版）", "desc": "你们要的，有关 Vue 最棒的学习指南来了！作者研究了近1万篇 Vue 生态相关的文章得出这篇总结，全文既包含新手指南、年度回顾也包括框架对比、案例分析等专题，非常适合 Vue 开发者用于查漏补缺、收藏阅读。请大家注意该文中的大部分链接均为英文原文。文中如有错误，欢迎评…"}, {"id": "6978302254793097252", "title": "Vue 源码之指令、双向绑定和 watch", "desc": "自己手写一个简单的 Vue 库，实现对双大括号的识别，数据的双向绑定（对 v-model 指令的处理）以及对 watch 的实现"}, {"id": "6914593379695198222", "title": "watch经常失效的场景和解决方案", "desc": "使用过watch的，应该起码经历过一次失效。 引用类型的指针是固定的，所以如果不是重新赋值，那么其赋值的变量自然也不会发生变化。 设置deep:true，这样obj中的属性发生变化（可被监测到的），便会执行 handler 函数；。 引用类型，除了对象，很容易想到数组，那数组是…"}, {"id": "6916484415463882759", "title": "Vue中template标签【七日打卡】", "desc": "html5中template标签内容在页面中并不会显示。但是在后台查看页面DOM结构却存在template标签。这是因为template标签天生不可见，它设置了display:none;属性。 可以看到文字外面是 div.root ，所以本质上的&#x3C;template>标…"}, {"id": "6982444129271676942", "title": "Vue-cli3创建typescript项目  vue3+ vuecli + ts", "desc": "1.vue-cli3创建js项目 创建命令：vue create vue3-ts-demo 中间配置截图： 项目目录如图所示： 2.在js项目基础上创建ts项目 创建命令：vue add typesc"}, {"id": "6997389512561131533", "title": "vue 2.x 响应式核心特性实现｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 本篇围绕着 Vue 的响应式核心特性来分析，主要是 data、computed、watch。 下面分两个部分来分析： 数据监听变更的"}, {"id": "6844903598510309390", "title": "虚拟滚动的轮子是如何造成的？", "desc": "相信大家都遇到过渲染一个很长的列表或者页面带来的痛苦，长列表与页面可能对首屏渲染速度造成很大的影响，并且会对页面的滚动造成一些不流畅的体验。 我也在最近遇到了这个问题，发现除了直接使用分页外，虚拟滚动这种解决方案很是流行，于是也重新造了一下vue中虚拟滚动的轮子。虚拟滚动简单的…"}, {"id": "6997980990178066469", "title": "用vue实现一个轮播图", "desc": "一、首先我们定个三个变量 轮播图数组、当前位置、定时器对象 二、基本样式 我们定义一个大盒子来包裹，然后子元素一个容纳图片的盒子，一个容纳切换样式的盒子 目前展示的大概是乱的样子，然后我们来优化样式 "}, {"id": "6998157839881469966", "title": "vue绑定数字类型  value为数字", "desc": "下面先看一下需求：\\ 游戏端，有一个一键关闭游戏数据过滤的按钮。 直接加:这一句就够了，数组对象生成，下拉也没问题，接下来就是通过@change事件进行增强功能的开启，也很简单。"}, {"id": "6974671859640090660", "title": "Vite + TypeScript + Ant Design Vue 搭建后台管理系统（二）", "desc": "从零开始搭建后台管理系统 采用的技术是Vite2，Vue3，Vue Router 4.x，Vuex 4.x，Ant Design Vue 2.x，Typescript"}, {"id": "6871081408815693837", "title": "🤚手摸手带你实现Vite", "desc": "在当今Webpack横行的时代，Webpack的影响力不可谓之不大。对于一个主流Web项目的开发而言，大多数时候我们都会采用现有的脚手架作为项目开发或打包工具如：Vue-cli、Cra，而他们都基于Webpack。但是，在不断的使用和日常项目的迭代中，我们慢慢会走入一个窘境，就…"}, {"id": "6997283064661409822", "title": "如何使用 Vue.js 创建一个简单的 Notes 应用程序", "desc": "这是我参与8月更文挑战的第5天，活动详情查看： 8月更文挑战 Vue.js 不仅是一个 JavaScript 框架，它为 Web 开发带来了全新的概念，而且还推动了我们实现和交付应用程序的方式。Web"}, {"id": "7002223351246782478", "title": "Vue3样式绑定", "desc": "小编今天和大家分享关于Vue中的样式和class的绑定，首先声明，这篇文章出现的class不是类声明的关键字，而是标签内部的属性"}, {"id": "6979890344766734373", "title": "Vue图片裁剪组件", "desc": "Vue 简易图片裁剪组件，支持裁剪输出指定比例图片，旋转，等功能，可基于vue-cropper增加更多功能。"}, {"id": "6970676595342196767", "title": "使用Vue开发项目(黑马头条项目)--第二天（下）", "desc": "需要实现的主要功能如下： 上面实现了登录的功能，下面我们具体的来实现对token的处理 1 Token的基本使用流程 1）用户登录，获取token； 2）保存token到本地； 3）发起其它请求，携带"}, {"id": "6844903608169791496", "title": "开箱即用的 Vue Webpack 脚手架模版", "desc": "开箱即用的 Vue Webpack 脚手架模版，对于如何构建中大型 Vue 项目，根据过往的提供脚手架、以及大量的推荐 & 参考性建议。默认引入了 vuex vue-router vue-18n dayjs lodash 等依赖库，以打造高效开发单页面应用 ......"}, {"id": "6844903989117452295", "title": "vue组件以及父子组件之间的通信", "desc": "最近在学vue，vue刚开始感觉还蛮简单。但是学到后面感觉着实有点绕，真的非常绕，研究组件这一块花了一下午。从一头雾水到逐渐明朗，决定写一篇博客加深自己理解。这篇文章就主要讲一下怎么运用组件，以及父组件向子组件传递数据，子组件向父组件传递数据这三部分。希望对大家对组件的来理解也…"}, {"id": "6941237062074892301", "title": "Vue2.0 学习笔记五 路由", "desc": "1. 路由发展阶段 vue2.0 B站有个大佬讲的很好，很多概念都是从他那里学习来的，包括一部分笔记。叫ilovecoding老师。 路由时一个比较广义和抽象的概念，路由的本质是对应关系。 当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, …"}, {"id": "6844903969756545032", "title": "vue-cli3.0 创建项目流程", "desc": "vue-cli3.0 的包名称由 vue-cli 改成了 @vue/cli。 如果之前有全局安装了旧版本的 vue-cli (1.x 或 2.x)，需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。这…"}, {"id": "6870298090948493325", "title": "蒲公英 · JELLY技术周刊 Vol.21 -- 技术周刊 · React Hooks vs Vue 3 + Composition API", "desc": "该篇文章内容可以加深读者对JavaScript基础知识的理解，通过对Loadsh潜在安全漏洞及其修复方案的分析，可以帮助读者对原型污染的产生、原型污染攻击方式及相关防范措施进行深入了解，涉及到的知识点包括但不限于：Object 原型、原型、原型链、NodeJS 相关问题、Obj…"}, {"id": "6975452719012118542", "title": "手把手教你10分钟做一个音乐播放器", "desc": "这是我参与更文挑战的第17天 一.话不多，先看效果： 视频B站效果演示地址~  （大佬勿入，大佬勿入，大佬勿入）这是个单页面音乐播放器，只用到了 html+css 与很基础的vue语法，所以适合初学者"}, {"id": "6844903593749774343", "title": "如何优雅的绘制一棵省市区三级可选择的树？", "desc": "开始总结一下开发过程中的思路想法各位大佬们看看就好首先你拥有的数据结构所有省市区的信息列表以及已经选中的信息用的是element-ui的el-tree按需渲染首先作为有相对要求的开发人员不会考虑说直接"}, {"id": "6896671607167647751", "title": "props/$emit、v-model、.sync的适用场景 -- vue组件通信系列", "desc": "vue组件的数据通信方式很多，本篇着重讲props/$emit，神助是v-model/.sync语法糖。 其实语法糖只是在父组件用的时候更加方便，而子组件该咋样还是咋样。 子组件想要显示父组件的数据，就props。 子组件想要改变父组件的数据，就$emit。 v-model是属…"}, {"id": "6844903507401637896", "title": "前端每周清单第 37 期：Bootstrap 4 必知必会、2017 Vue.js 报告、Graphcool 开源框架", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 再见，Firebug: Firebug 是…"}, {"id": "6862955082237870087", "title": "Vue 2.6 源码分析之旅【4】 —— diff 算法", "desc": "这个名词相信大家已经非常熟悉了，这里就当简单复习一下了。 所谓虚拟 DOM，其实就是 js 的对象，主要的目的是描述真实 dom 的结构和关系。 也就是说，虚拟 DOM 就是真实 DOM 的映射。 ... 那么我们来看看 vue 源码中，关于虚拟 DOM 的操作吧。 通过 re…"}, {"id": "6925048400731701261", "title": "可复用性的组件详解", "desc": "5. 单向数据流 通过 props 传递数据是单向的流， 也就是父组件数据变化时会传递给子组件，但是反过来不行。 是尽可能将父子组件解耦，避免子组件无意中修改了父组件的状态。 总结：除了在html里 都用驼峰就完事了。 1. 自定义事件—子组件给父组件传递数据 使用v­-on除…"}, {"id": "6909441368234393607", "title": "Vue + TypeScript 实战项目（一）", "desc": "本系列将从零开始创建一个项目，文章将持续更新项目代码：https://github.com/no-pear/edu-fed.git搭建项目结构一、创建项目1）使用VueCLI创建项目安装VueCLI创"}, {"id": "6844903518394908679", "title": "让Vue的v-for支持迭代器遍历", "desc": "在写一个项目的时候希望使用Map来进行遍历，然后我取出了Map的keys，keys是一个Map Iterator（迭代器，ES6引入的Symbol.iterator）类型，这时我尝试使用v-for来对迭代器进行遍历，当然我的期望是能够遍历出来。 这时我不禁就想，既然如此，v-f…"}, {"id": "6844903967860719623", "title": "【源码导读 】在new Vue()之前，Vue是什么样子的？", "desc": "初步读完vue(v2.6.10)的源码，现将读后感记录如下，故事就是由此开始。 开始的开始，vue就是一个简单的函数。 设计模式之混入模式，对Vue进行扩展，很值得学习的一种方式。 定义了_init方法，是入口函数，在new Vue()时第一时间执行的方法。 数据相关的扩展。 …"}, {"id": "6917807084926943245", "title": "简单了解JS事件循环（Event Loop）", "desc": "本文章参考阮一峰大佬对EventLoop详解一、什么是事件循环（EVENTLOOP）EventLoop是一个很重要的概念，指的是计算机系统的一种运行机制。任务队列(EventQueue)任务可以分为同"}, {"id": "6844903686867517448", "title": "重磅！尤雨溪发布Vue 3.0开发路线", "desc": "在上周的 Vue.js 伦敦大会上，尤雨溪简要介绍了 Vue 下一个主要版本要发布的内容，9 月 30 日，尤雨溪在 medium 个人博客上发布了 Vue 3.0 的开发路线，全文如下： 为什么要推出新的主要版本？ Vue 2.0 发布于两年前，时间过得真快！在此期间，核心部…"}, {"id": "6844903573608726536", "title": "vue.js原理初探", "desc": "vue.js是一个非常优秀的前端开发框架，不是我说的，大家都知道。本人也使用过vue.js开发过移动端SPA应用，还是学习阶段，经验尚浅，能力有限。不过我也懂得只会使用轮子不知所以然是远远不够的，凭自己浅薄的见识，斗胆写一篇略微深入的一点文章。 首先我现在的能力，独立阅读源码还…"}, {"id": "6914084151704928270", "title": "如何实现一个vue的element ui库?", "desc": "本 UI 库参考了线上活跃度与使用频率较高的一些成熟 UI 框架 如： Element UI 、 Ant Design 、iView UI 、Bootstrap 可学习更高层次的代码原理与规范。"}, {"id": "6844903670560063496", "title": "Vue 数据响应式原理", "desc": "Vue.js 的核心包括一套“响应式系统”。 “响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。例如，视图渲染中使用了数据，数据改变后，视图也会自动更新。 代码执行后，页面上对应位置会显示：luobo。 这样页面上就会显示修改后的名字了，并不需要去手动修改 DOM…"}, {"id": "6844903545448169479", "title": "基于vue-ssr服务端渲染入门详解", "desc": "服务端渲染实现原理机制：在服务端拿数据进行解析渲染，直接生成html片段返回给前端。然后前端可以通过解析后端返回的html片段到前端页面，大致有以下两种形式： 1、服务器通过模版引擎直接渲染整个页面，例如java后端的vm模版引擎，php后端的smarty模版引擎。 2、服务渲…"}, {"id": "6862201364308492302", "title": "在Vue中使用音频可视化插件wavesurfer.js", "desc": "3. 自定义复杂时间线 8. timeInterval与primaryLabelInterval和secondaryLabelInterval关系 以传入的pxPerSec大于等于100为例，_timeInterval(100)返回0.5,_primaryLabelInterv…"}, {"id": "6968619255461838855", "title": "vue编码之优化手段", "desc": "这是我参与更文挑战的第1天😛 性能优化本身就是一个很大的话题，并且它没有一个定式，最好是在具体的项目中具体分析，而不是说看到一个优化技巧一定要用在项目当中，这篇文章主要聊聊在vue编码阶段有哪些常见"}, {"id": "6996328142205878309", "title": "如何打开掘金的 Vue Devtools？", "desc": "打开掘金首页，nuxt 图标亮了起来 🐒 。那就借掘金的宝地，记录一下如何在生产环境开启 vue 项目的 Devtools 调试工具。"}, {"id": "6924611373091536910", "title": "codemirror 代码编辑器", "desc": "... 等功能 当设置mode的时候，需要引入相应mode.js。同样的，设置theme的时候，也需要引入相应的theme.css。由于json属于JavaScript的一种，所以也得引入JavaScript。 json需要引入json-lint.js，如果是yaml，则需要引…"}, {"id": "6979785868932284446", "title": "vue实现粘贴截图上传图片", "desc": "vue实现粘贴截图上传图片 当初提出这个需求的时候，可把我难住了，在网上各种搜索，大多数都是利用富文本的粘贴功能，但是富文本大多都有工具栏，想偷懒的我就放弃了😁。代码如下(已做精简)！ html js"}, {"id": "6992491309156007944", "title": "vue中引入echarts报错", "desc": "vue中引入echarts报错一、问题 运行报错 export 'default' (imported as 'echarts') was not found in 'echarts' 二、原因 5"}, {"id": "6916383417525338125", "title": "七日打卡-Vue Promise讲解", "desc": "Promise意在让异步请求逻辑代码变得干净和直观，让异步请求逻辑代码变得井然有序。 Promise在设计上具有原子性，即只有三种状态：等待（Pending）、成功（Fulfilled）、失败（Rejected）。在调用支持Promise的异步方法时，逻辑变得非常简单，在大规模…"}, {"id": "6844903512678088712", "title": "另辟蹊径：vue单页面，多路由，前进刷新，后退不刷新", "desc": "目的：vue-cli构建的vue单页面应用，某些特定的页面，实现前进刷新，后退不刷新，类似app般的用户体验。 注： 此处的刷新特指当进入此页面时，触发ajax请求，向服务器获取数据。不刷新特指当进入此页面时，不触发ajax请求，而是使用之前缓存的数据，以便减少服务器请求，用户…"}, {"id": "6844904116070645768", "title": "通过vuecli3.0+兼容IE踩坑记录，学习解决问题的方式", "desc": "看完这篇文章，如果还不能解决你的vue兼容ie问题，我来手把手教你，我希望在这篇文章中，你不仅仅为了解决兼容性问题，而是学会一种解决问题的思路。 我们这篇文章重点讨论是vuecli3.0+，对于IE兼容的问题。当我们的项目升级到3.0的时候，IE浏览器每次打开的错误提示还是不一…"}, {"id": "6844903865758793742", "title": "用 Vue 开发自己的 Chrome 扩展程序", "desc": "浏览器扩展程序是可以修改和增强 Web 浏览器功能的小程序。它们可用于各种任务，例如阻止广告，管理密码，组织标签，改变网页的外观和行为等等。 好消息是浏览器扩展并不难写。可以用你已经熟悉的 Web 技术（HTML、CSS 和 JavaScript）创建 —— 就像普通网页一样。…"}, {"id": "6945744786414370823", "title": "每日一篇，Vue 第二篇 \"环境搭建\"", "desc": "1.前言2.环境搭建2.1安装node.jsnodejs下载地址 window电脑 安装一路回车即可 没有王者荣耀中露娜的高端操作检测node版本检测npm版本安装开发依赖 --save-dev 简写"}, {"id": "6844903569544462343", "title": "关于 Vue 的路由权限管理", "desc": "曾经在工作上对 vue 路由权限管理这方面有过研究，这几天又看到了几篇相关的文章，再加上昨天电面中又再一次提及到，就索性整理了一下自己的一些看法，希望对大家有帮助。 大体上实现的思路很简单，先上图： 无非是将路由配置按用户类型分割为 用户路由 和 基本路由，不同的用户类型可能存…"}, {"id": "6911577367060152328", "title": "换个思路掌握Vue3", "desc": "为什么第一部分叫猜想呢？因为我感觉当我们接收一份新的知识点之前，最好先宏观的去看一下过往，然后猜测她可能的发展方向，希望支持什么能力。带着这些疑问去看知识点更有目标感和带入感，也能更快地吸收。 带着以上这些猜想在Vue3里找答案。 这里的指的是Vue3在加载时的体积更小。作为一…"}, {"id": "6917174934473179144", "title": "vue3.0 setup风格实现轮播图", "desc": "虽然样子简陋了点，但是功能还可。 先说一下思路吧，假设有4个图要轮播1->2->3->4。那么安排dom(本文使用div)的时候,要这么安排：4->1->2->3->4->1。 因为要实现无限滚动呐！比如，当前位置是图1，那么左移到图1前的图4，再使用点技巧定位到真·图4，即3…"}, {"id": "6844903839133335565", "title": "nextTick 在 vue 2.5 和 vue 2.6 之间有什么不同", "desc": "我们知道对于 Vue 来说，从数据变化到执行 DOM 更新，这个过程是异步的，发生在下一个 tick 里。 它会创建一个更新队列 queue，队列中维护着各个属性的 watcher，在需要时执行、更新它们。 在 Vue 2.5 中，nextTick 的实现是 microTime…"}, {"id": "6914922312038875144", "title": "Vue3 学习笔记", "desc": "通过列举关于vue3的实例,整理vue3中一些常用知识点，以及使用vue3时，相较于vue2我们要注意的变化。"}, {"id": "6940559895330717709", "title": "一分钟读懂Vue3.0的改进与优化", "desc": "本文旨在通俗易懂的回答：相较于2x，Vue3.0都做了哪些改进与优化。 分为三个层面：性能、源码和新特性。 众所周知，ES6的Module，当我们引入某个模块，模块是整个加载的，构建时也会被全部打包。即便我们只用了其中1个方法。 我只想收获一缕春风，你却给了我整个春天。 tre…"}, {"id": "6916402800444325895", "title": "⒒ Vue子组件向父组件传值", "desc": "在子组件中自定义一个事件，使用 this.$emit('btn-click', item)的语法，emit指代发射事件，btn-click是我们自定义的事件名，item是子组件中的数据。 注意：：vue官方推荐你始终使用 kebab-case格式的事件名。 组件之间的事件传递多…"}, {"id": "6865863765863677960", "title": "[译] Vue 3 迁移策略 —— 过滤器（移除）", "desc": "在 2.x 中，开发人员可以使用过滤器来应用常见的文本格式。 尽管这似乎很方便，但是它需要一种自定义语法，该语法打破了花括号内的表达式只是“ JavaScript”的假设，这既有学习成本，也有实现成本。 在 3.x 中，已将过滤器移除，不在支持。作为替代，我们建议将它们替换为方…"}, {"id": "6992717360452861960", "title": "vue基础 ｜ 8月更文挑战", "desc": "说明：本文本来是提供给公司内开发阅读，有些地方不必参考 认识项目结构 详细的看https://juejin.cn/post/6844904087280943111（包含项目结构和webpack） 如果"}, {"id": "6917875965079060493", "title": "如何在 Vite 中使用 Element UI + Vue 3", "desc": "在上篇文章《2021新年 Vue3.0 + Element UI 尝鲜小记》里，我们尝试使用了 Vue CLI 创建 Vue 3 + Element UI 的项目，而 Vue CLI 实际上为我们生成了一个我们熟悉的 Webpack 工程项目。 Webpack 无需过多介绍，一…"}, {"id": "6983495769445629959", "title": "VeeValidate 中文文档-Examples", "desc": "本篇总结 Examples 验证表单： 我们可能希望在提交表单之前触发所有的 inputs 输入框验证，如果检测到任何错误，可能展示一个 alert 弹窗或阻止表单提交。使用验证器的 validate"}, {"id": "6906871851365564424", "title": "Vue-Router", "desc": "SPA 就是单页Web应用的英文缩写（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。 浏览器一开始会加载必需的HTML、CSS和JavaScript…"}, {"id": "6989215399615135758", "title": "Vue3学习 --- 模板语法", "desc": "Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，能被遵循规范的浏览器和 HTML 解析。"}, {"id": "6993328430104182820", "title": "Vue原理解析(一)：任何人都能看懂的响应式原理和数据劫持原理以及实现一个$set", "desc": "实现数据代理和数据递归劫持 在vue2.x的源码中使用Object.defineProperty()这个api实现数据代理, 也可以实现数据劫持, 数据代理和数据劫持的简单实现"}, {"id": "6995800604111011848", "title": "vue3 依赖收集和派发更新", "desc": "前言 最近在看vue3 的源码时，遇到了两个概念    依赖收集和派发更新............."}, {"id": "6844904152984715271", "title": "前后端分离那些事--Vue", "desc": "Vue框架的跨域(vue-cli脚手架); 主要利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server下面，所以页面与代理接口之间不再跨域，无须再设置head…"}, {"id": "6844903694811693063", "title": "vue多页面首页加载优化", "desc": "还是以自己的多页面博客为例，执行npmrunbuild，将打包代码部署上线后访问项目,会发现表现很糟糕，页面会出现长时间的空白等待。通过下图可以看到，总加载时长达到将近12s，这是无法忍受的性能问题，"}, {"id": "6844904069958467591", "title": "Vue CLI3.x  配置指南「初识Vue CLI3.x  版本」", "desc": "由于之前的项目中都是用的vue-cli 2.x 版本，最近新开的项目使用了vue-cli 3.x 版本的脚手架，因此总结一下笔记，方便以后查看使用。 安装之后，你就可以在命令行中访问 vue 命令。你可以通过简单运行 vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它…"}, {"id": "6844903890823970829", "title": "细谈 vue - component 篇", "desc": "本篇文章是细谈 vue 系列的第六篇。看过我这个系列文章的小伙伴都知道：文章贼长，看不下去的建议先点个赞当收藏，然后等有时间静下心来慢慢看，前端交流群：731175396。以前的文章传送门如下 用过 vue 的小伙伴肯定知道，在 vue 的开发中，component 可谓是随处…"}, {"id": "6844903634812010503", "title": "Re0：在Vue里用Service Worker来搞个中间层（React同理）（超详细）", "desc": "事情是这样的，由于后台给的接口是获取源数据的，一开始只是拿来做一些简单图表的展示。但是后来需求越来越复杂，逻辑嵌套深，需要在各个图表之间串联依赖关系，把这一层放在前端来写太蛋疼了，因为业务代码里太多跟业务逻辑没有关系的代码了。这种情况其实就挺适合用node来做一个中间层来解决这…"}, {"id": "6844903666885853191", "title": "vue-cli 自动化测试 Nightwatch 详解", "desc": "vue-cli 是我最喜欢的脚手架工具, 提供了很多开箱即用的功能, 每次新建一个项目, 我都会一路回车按下来, 唯独到这一步... 《奇舞周刊》是360公司专业前端团队「奇舞团」运营的前端技术社区。关注公众号后，直接发送链接到后台即可给我们投稿。"}, {"id": "6991414565950980103", "title": "《Vue修饰符总结》", "desc": "一、.sync修饰符 假设有以下场景，爸爸给儿子钱， 儿子要花钱： 爸爸和儿子通过属性 ‘money’ 来沟通 第一步 儿子触发一个要花钱的事件，然后告诉爸爸花完之后剩多少，这里假设儿子每次花100元"}, {"id": "6844903908561649678", "title": "Vue全局loading以及错误提示", "desc": "近期项目马上上线，前两天产品提个需求，加个全局loading，我这半路出家的vue选手，有点懵逼，这玩意还是第一次，但是作为一个初级的前端切图仔，这个东西是必须会的，花了五分钟思考了一下，然后动键盘码出来 ，今天总结一下，与各位分享交流，有错误还请各位指出。"}, {"id": "6995584519910719501", "title": "Vue 3.0组件的更新流程和diff算法详解", "desc": "上篇文章我们介绍了组件的渲染流程，本篇文章我们来介绍响应式数据变化后组件的更新渲染流程。最后有不看文章的分析总结图。 案例 为了方便介绍流程，我们这里举一个例子： App组件中有一个Hello组件，并"}, {"id": "6955031775374475301", "title": "VUE学习要点整理", "desc": "理解VUE原理 用于构建用户界面的渐进式框架。通过Vue指令，实现JS和HTML的分离，JS代码仅仅是通过Module去控制View，而不是定义View。"}, {"id": "6844903541400698887", "title": "vue-cli解析", "desc": "这篇文章的主题是vue-cli的理解。或许，很多人在开发vue的时候，我们会发现一个问题——只会去用，而不明白它的里面的东西。现在的框架可以说是足够的优秀，让开发者不用为搭建开发环境而烦恼。但是有时候，我们还是得回到原始生活体验一下，才能够让自己更上层楼，希望大家共勉。如果你喜…"}, {"id": "6844903600720707591", "title": "vue项目可以从哪些方面进行优化", "desc": "js文件一般是同步加载的，放在页面内会阻塞主要js文件加载。 使用场景：有的项目必须引入jquery等文件时，在组件内部引入这些文件一定程度会阻塞页面渲染，因而通过特定事件（点击或者弹窗）动态加载jquery等JS文件，可以使主页面快速显示出来。 当页面展示的版块是固定的时候且…"}, {"id": "6993163555688153101", "title": "回首Vue3之指令篇（六）", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 这篇文章我们来讲一下v-bind的使用方法，以及在使用它的时候我们需要注意的地方。 如何使用 v-bind指令：动态地绑定一个或多个 att"}, {"id": "6913351290525483022", "title": "vue项目一：电商后台管理项目PC端(上)", "desc": "1：源码仓库地址-欢迎点击下载！(已通过测试，源码结合文章可一步步完成项目搭建)2：api接口和数据库仓库地址-欢迎点击下载！(注意：后台管理项目的-web服务器和数据库，`两者缺一不可！)\"expo"}, {"id": "6939479680269418526", "title": "一个vue项目开发的复盘，思如泉涌~~", "desc": "选择router+使用配置文件+3个默认勾选的，eslint可以去掉，格式检查过于繁琐。 选择2.0版本,3.x界面搭建方式正在动手试验中。 开发依赖是什么，也就是开发中所使用的的依赖，线上生产环境上并不需要他们。 **开发依赖的目的：**是为了减少在安装依赖时node_mod…"}, {"id": "6844903624477261831", "title": "vue-cli 3.0 下发布一个 TypeScript 组件", "desc": "vue-cli 3.0 提供了一系列功能，包括对 Babel, TypeScript, ESlint, PWA 等开箱即用的支持，同时，它也提供了一个 CLI 上的 GUI 界面，你只需输入 vue ui 即可看到配置界面，这里不过多说明，有兴趣的同学，可以参考文档： http…"}, {"id": "6945369292032458783", "title": "手把手学习Vue3.0：Vue3.0跟Vuex、Router、Axios等组件的版本对照大全", "desc": "因为要做全栈，我本身又是后端出身，前端的知识还停留在十几年前的水平。着手学习Vue的时候，Vue3.x版本已经发布可惜还是不是release版本，网上的很多例子都是基于Vue2.x版本，出了不少错误，没少耗时。现在我基本上都学习一遍了，现在把我用的组件版本整理如下。如果你也在学习..."}, {"id": "6971043829751218213", "title": "记录一些Vue3笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844903635516653576", "title": "keep-alive组件使用", "desc": "在点击button时候，两个input会发生切换，但是这时候这两个输入框的状态会被缓存起来，input标签中的内容不会因为组件的切换而消失。 keep-alive提供了两个生命钩子，分别是activated与deactivated。 因为keep-alive会将组件保存在内存中…"}, {"id": "6971337470025678861", "title": "vue项目使用微信JS-SDK实现自定义分享（前端）", "desc": "需求：h5链接分享到微信好友、朋友圈的链接卡片内容可以自定义，如下图 实现步骤： 公众号绑定域名：登录微信公众平台-->公众号设置-->功能设置-->js接口安全域名 在微信公众平台获取appid v"}, {"id": "6844904110194425864", "title": "vue插件开发详解", "desc": "废话不多说，直接进入正题。在开发vue的时候我们经常会开发自己的插件以供大家使用，下面就具体介绍下怎么开发插件。"}, {"id": "6971345715851329549", "title": "Vue patch过程（二）—— 创建节点", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 前言 上一篇已经将Vue diff的整个过程走了一遍，这一篇主要看一下Vue 在patch过程中怎么创建新节点。"}, {"id": "6844903672334254094", "title": "网易云音乐接口+vue全家桶开发一款移动端音乐webApp", "desc": "注意如果你希望在 Vue Router 的路由组件中使用上述语法的话，你必须使用 Vue Router 2.4.0+ 版本。 有反馈说项目clone之后运行，会显示不了，因为接口用的我服务器上的地址，node端的是Access-Control-Allow-Origin是请求头里…"}, {"id": "6844903533372768269", "title": "Vue SPA 打包优化实践", "desc": "随着我们的项目的增长，打包会越来越慢。每次打包都会将第三方的js打包一遍，但是这些第三方的不会经常变化，如何能将第三方的js只打包一次呢？ 我们先将路由组件改成异步组件。官方文档 webpack提供了一个插件 DllPlugin ，用于将不常变动的js单独打包。 这里只需要im…"}, {"id": "6844903895043407879", "title": "shotCat_doc  一个开箱即用的UI组件库文档", "desc": "最近开始接手公司的公共ui组件库，于是想到做一个类element官网的组件库文档。 shotCat_doc能帮你快速构建属于自己的组件库文档，它基于vuepress实现。仿照了element-ui文档，实现了组件展示，代码显示，在线运行，api表格展示，文档版本切换，支持评论等…"}, {"id": "6871669209445695495", "title": "用 Vue3 写一个 swipe-cell", "desc": "最近升级了下 vue-cli，发现已经能够创建 Vue 3 的项目了，为了跟进最近技术，决定开发一个swipe-cell组件来学习一下如何使用 Vue 3。 目前官方有两种脚手架供我们生成项目，分别是原来的 vue-cli 和 尤大新开发的 vite。我这边是使用 vue-cl…"}, {"id": "6844904168952446989", "title": "Vue+Ts搭建项目(一)： 前置知识", "desc": "是我们在ts项目中使用频率最高的组件，它可以使用我们的装饰器，使组件完美的使用typescript. 和平时使用vue的方式完全相同，但是不能使用装饰器。 如果使用过react的话会知道react中有函数式组件，并且性能相比于其他组件要好一点但是没有生命周期。"}, {"id": "6932300320722649102", "title": "vue-cli3.x配置babel转换node-modules中的安装包", "desc": "首先我们先了解一些跟babel相关的基础知识，了解什么是babel，如何配置babel等等什么是babel？babel官网介绍戳戳戳：https://www.babeljs.cn/docs/啊哦哦~~"}, {"id": "6898483758085701646", "title": "手把手教你如何在生产环境检查 Vue 应用程序", "desc": "在开发环境中，Vue devtools 是很有用。 但是，一旦部署到生产环境，它就不再可以访问我们所编写的代码。 那么发布到生产环境时，我们要怎么检查应用程序呢？ 在这篇文章中，我们会介绍一些技巧，用来检查和调试我们的代码。 除了弄清楚如何检查Vue内部变量外，我们还尝试更新组…"}, {"id": "6844903824126115848", "title": "手把手教你实现vue3.0的响应式", "desc": "Proxy是es6提供的新语法，Proxy 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）。"}, {"id": "6934976477444341790", "title": "简单的理解 $nextTick 原理。", "desc": "在使用 nextTick 的时候发现很神奇，只要是操作完 dom 更新之后就调用这个函数，然后就可以得到反馈，为了知道其中原理，所以就打开了源码仔细得看了一遍。 在说 nextTick 之前我们先将一下节流这个东西，为什么将这个呢，看官们继续往下看。节流函数的文章呢大家也都看烂…"}, {"id": "6899362623020597256", "title": "怎么封装弹框组件", "desc": "弹框组件有两个特点：一是弹框的元素一般是body的子元素，而不是位于#app内部；二是，使用的时候一般通过函数，比如Message(\"创建成功\")。 其实只是信息差的事，很容易理解的。 一般，组件的模板编译之后，默认挂载在app里，但其实我们可以手动选择将其挂载在任意处。 这个…"}, {"id": "6844904068964417550", "title": "vue3.0源码速读", "desc": "最近简单看了下vue3.0的源码，正好记录一下自己的阅读心得，后续有机会，会写逐行分析的系列RuntimeTreeShaking相比于2.0，3.0的runtime不再挂载在vue的原型下，这样做一个"}, {"id": "6844903607301570568", "title": "使用 Mpvue 开发微信小程序的最佳实践", "desc": "小程序面世一年多以来，给前端开发带来了巨大的影响，有移动应用的地方，就有小程序的踪迹。经过一年多的发展和沉淀，小程序能力不断放开，产品形态日趋成熟，已经发展成独立的端上开发技术体系，俨然与 H5、native 形成鼎足之势。但与此同时，小程序社区并不够活跃，小程序技术体系和解决…"}, {"id": "6989127008165429279", "title": "vue2中，在路由守卫中this.$store获取vuex失败问题的解决（vue小技巧）（vue面试必会知识点）", "desc": "我们通常使用的是this.$store的方式来获取vuex中的数据，但是在vue-router的路由守卫中，this并不是指向vue实例的，这个时候我们就需要变通一下了，一起学习这个vue小技巧吧！"}, {"id": "6844903959023321095", "title": "vue3 实现 v-model 原理", "desc": "这样我们就可以对 target 对象设置了一层代理，当我们对 target 进行取赋值操作的时候就可以接可以截获到它的行为了，但是如果你以为就只有这么简单你就错了。 我们再获取 observed.a.b = 2 的时候，get 方法取到的是 a 的值 { b: 1 }, 而 s…"}, {"id": "6989119589384732680", "title": "vue页面跳转，滚动条回到顶部", "desc": "前言 在vue项目，我的一个页面内容滚动到底部，再跳转至其它页面，滚动条会停在底部... 测试了好多种 在进行跳转后 滚动条的位置还是在上一个页面 解决办法 只要在路由跳转时手动把滚动条的位置设置到顶"}, {"id": "6844903665220730888", "title": "Vue.js的响应式系统原理", "desc": "Vue.js是一款MVVM框架，核心思想是数据驱动视图，数据模型仅仅是普通的 JavaScript 对象。而当修改它们时，视图会进行更新。实现这些的核心就是“响应式系统”。 这部分的代码是非常多的，为了让大家对响应式系统先有一个印象，我在这里先实现一个简易版的响应式系统，麻雀虽…"}, {"id": "6956857537425588255", "title": "Vue项目部署到服务器通过公网IP访问", "desc": "Vue项目部署到服务器通过公网IP访问 ,打包项目及修改文件 ​ 在本地的项目完成后，可能需要将其部署到服务器上，并且通过公网IP就可以访问到这个项目，下面介绍一下具体的部署流程"}, {"id": "6989128690709823502", "title": "从源码理解vue的响应式二", "desc": "上一篇文章我们可以了解到vue2是如何处理对象的响应式，那么这篇我们来了解一下数组是如何实现的，了解的更多，我们的代码才会越来越健壮"}, {"id": "6844904087679401991", "title": "🔥🔥 用vue全家桶实现mac版微信（不断更新...）", "desc": "概述图片预览项目步骤项目地址🥺🥺项目地址在这里预览地址🥺🥺预览地址在这里项目进度个人信息用户头像资料展示聊天列表主体页面聊天列表聊天对话框聊天资料发送图片群聊天公众号对话框切换用户聊天表情选择列表右击"}, {"id": "6844903655380893703", "title": "canvas实现炫酷的黑客帝国数字雨特效", "desc": "对于这种较为复杂的动画特效，canvas是首选，当然css肯定也可以做，不过肯定超级复杂，代码量巨大。首先我第一眼看到这个特效，思路是这样的："}, {"id": "6844904148278706184", "title": "Electron + Vue开发一款音乐播放器", "desc": "劳动节放假了，给大家分享一个轻松的开源项目，一个基于 Electron + Vue 开发的音乐软件。项目的一大特色就是多平台搜索歌曲，并支持下载功能（有些平台的vip歌曲也可以哦！）。 本地安装Node12.x+环境，Node.js是一个运行在服务端的JavaScript框架，…"}, {"id": "6844904205669367822", "title": "[译]: Vue.js 函数式组件：what, why & when?", "desc": "functional component (别跟 Vue 的 render function 搞混) 是一个不持有状态也没有实例的组件。 说白了，这就意味着这种组件不支持反应式，并且不能用 this 关键字引用到自身。 你肯定会疑惑，离开了状态或实例，怎么引用诸如 data 或…"}, {"id": "6969774015544049677", "title": "Vue3 响应式原理探索Part 2 - 多重结构的响应式  ", "desc": "多个属性、对个对象的响应式如何实现。我们可以通过 Map 和 WeakMap 这两种结构，建立更深层次的存储结构，进而实现。"}, {"id": "6989024576730562597", "title": "Vue3.x新特性总结及与vue2.x的对比", "desc": "一.Vue3.x与Vue2.x的区别 1.OptionsApi 和 CompositionApi的区别 须知:你仍然可以在Vue3.x中使用vue2的选项式Api写法,但我更建议你选择最新的组成式Ap"}, {"id": "6988885034593681415", "title": "vue源码解析：组件化-patch函数", "desc": "patch patch activeInstance为当前激活的vm实例；vm.$vnode为组件的占位符; vm._vnode为组件的渲染 vnode 嵌套组件的插入顺序是先子后父 当我们通过cre"}, {"id": "6988855401735258149", "title": "vue inpute textarea 支持录入tab键，以及在input光标后追加内容", "desc": "遇到一个需求 需要在textarea中支持tab键的输入 但是在浏览器中，默认tab键是自动聚焦在下一个可以聚焦的元素上 思路如下： input中接收到tab键时，阻止默认事件 在input中获取到光"}, {"id": "6844904199247888392", "title": "打造一款适合自己的快速开发框架-前端篇之下拉组件设计与实现", "desc": "相信使用过elementui的同学肯定也使用过Select选择器组件，同时也肯定使用过其远程搜索模式。在开启远程搜索后，可以根据输入的关键字去后端获取列表，然后进行选择。本文说的下拉组件其实也是elementui的Select选择器组件，不过会对其进一步封装，以方便业务系统使用…"}, {"id": "6866330015970099208", "title": "基于AntV G2实现一个通用可视化Vue插件 | 🏆 技术专题第三期征文", "desc": "AntV G2坚持自然、确定性、意义感、生长性的设计价值观。与其他可视化插件不同的是，G2是以数据驱动的高交互可视化图形语法，具有高度的易用性和可扩展性。 随着业务可视化不断发展，数据复杂度越来越高。实现一个通用的可视化插件越来越迫切。本文基于G2实现了一个可视化Vue插件——…"}, {"id": "6975043044227678215", "title": "vue 纯前端把部分页面生成图片并下载保存本地", "desc": "vue 纯前端把部分页面生成图片并下载保存本地 需求：制作名片并把名片导出下载到本地 html2canvas"}, {"id": "6844904046013349902", "title": "优化Vue中date format的性能", "desc": "在很多项目中，都需要将长整型的日期格式转换成其他的日期格式，而在Vue中，我们可以利用自定义相应的 filter 过滤器来进行 date format 的功能。如果直接引入 moment 的方法，在利用 npm run build --report 时，会发现 moment.j…"}, {"id": "6977733575537852430", "title": "vue2.x老项目typescript改造过程经验总结", "desc": "前言： 关于Vue2.x 的TS改造，其实没有啥好说的。 对于vue-cli项目来说，从新跑一遍 vue create xxx-project ，选择Manually select features "}, {"id": "6844903618705883149", "title": "聊一聊Vue中的回调函数", "desc": "有句话怎么讲来着，书到用时方恨少。平常我们撸Vue，感觉即使用props封装组件。。也很少自己制作回调这种看起来高大上的东西....... 但是实际开发中封装组件并不是这样的。许多组件需要子父组件进行通信 产品经理有个需求，需要让你做一个优惠券列表。然后需要把优惠券列表封装成组…"}, {"id": "6844903661345177614", "title": "记一次element-ui组件开发经历", "desc": "从老东家离职后，闲着没事，想到之前一个后台管理系统的需求，当时需要一个图片预览的组件，但是工程中使用的element-ui并没有这个组件，于是乎自己开始了这个组件的编写。 首先将element-ui库fork到自己的git仓库，clone到本地。 先看看element-ui的主…"}, {"id": "6844904149587329037", "title": "01-Vue项目实战-网易云音乐-准备工作", "desc": "在接下来的一段时间，我会仿照网易云音乐，利用Vue开发一个移动端的网易云音乐项目。在做这个项目之前，需要做一些准备工作。 1. 安装 node 环境 在获取网易云API之前我们必须先搭建好 Node 环境，有关 Node.js 的介绍和 Node 环境搭建请移步到这两篇文章。 …"}, {"id": "6844903784448000014", "title": "H5在WebView上开发小结", "desc": "来自我司业务方要求，需开发一款APP。但由于时间限制，只能采取套壳app方式，即原生app内嵌webview展示前端页面。本文主要记述JavaScript与原生app间通信，以及内嵌webview开发时，前端方面可能踩的一些坑。 android 传送门 和ios 传送门，因为两…"}, {"id": "6892231633907220493", "title": "简简单单写个九宫格抽奖组件（一）", "desc": "最近，开发的微信小程序接到一个九宫格抽奖的需求，写的过程感觉还蛮有趣的，就写成组件，顺便记录下心理路程。开发前思考了下，大致分成以下几个模块：布局、动画以及事件。技术栈是 uni-app + ts + less。 至此，就完成了九宫格的布局。 未完待续..."}, {"id": "6844904201206628359", "title": "Vue DOM Diff算法详解", "desc": "所以从这里可以知道：key可以为vue dom diff提供辅助方法，让其快速定位是否为同一个元素，且要保证其唯一性。所以在循环中给元素的key复制最佳实践是：元素的唯一标识：id或者其他属性，而不是列表的index。使用index只会适得其反 2.在key Map中找到new…"}, {"id": "6992402014529568781", "title": "对Vue的生命周期详细的理解 以及生命周期钩子函数", "desc": "在 Vue中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程"}, {"id": "6844903512707432456", "title": "[译] State of Vue.js report 2017 中文版", "desc": "几年前，Monterail 因其在 Ruby 和 Rail上 的专业建树，还是一家享有盛誉的软件开发商。不过现在看来，Monterail 和她的产品似乎有点过时了。当我们用 Ruby开发传统多页面应用程序时，很快意识到，随着技术的进步和发展，许多好的开发实践和规范已经发生了变化…"}, {"id": "6844903697403609096", "title": "使用Vue做一个购物车", "desc": "最近我实习的公司在做网上商城的一个项目，我负责购物车这一块。这个项目是一个Web项目，没有进行前后端分离，但是又得做手机端，感觉好像哪里不对。。。 web框架使用的是SpringMVC，模板框架是FreeMarker，想到以后要做移动端，果断还是用json来进行数据交互，并没有…"}, {"id": "6979134691316072478", "title": "【Vue.js】组件化解析", "desc": "这是我参与更文挑战的第8天，活动详情查看： 更文挑战 一、Vue中的组件 Vue视图层的灵魂 — 组件化 二、全局组件的创建和注册 三、局部组件的创建和注册 四、另一种组件创建和注册方式 直接通过Vu"}, {"id": "6946168100584685598", "title": "一行一行详解Vue3 watch/watchEffect源码", "desc": "track会去查找最\"新\"的effect，然后保存住 obj&#x3C;-->a&#x3C;-->effect这三角恋关系。这个时候如果我更改了它：obj.a = 1，那么trigger会去找obj，a对应的effect是谁，找到之后重新运行这个effect保存的函数，这就是v…"}, {"id": "6916495973929713678", "title": "Vue页面渲染中key的应用【七日打卡】", "desc": "在前端项目开发过程中，el-table展示的结果列使用组件形式引入，其中某些字段通过:formatter方法转码，结果栏位的字段显示/隐藏控制也使用组件形式引入，前端在控制字段显示属性时，发现码值转换及字段信息展示均有问题。 通过阅读代码结构，发现el-table-column…"}, {"id": "6875708782199570446", "title": "@vue/composition-api速成课", "desc": "Composition API 将是 Vue 3 的核心功能，，它具有许多更改和性能改进。可以在 Vue 2 中通过 npm 插件@vue/composition-api 使用它。 通过引入的 ref、onMounted等方法实现数据的双向绑定、生命周期函数的执行。 react…"}, {"id": "6916777108517683214", "title": "基于Vue 甘特图dhtmlxGantt配置", "desc": "甘特图样例data数据结构中render属性有无区别API快速链接dhtmlxGanttAPI任务样式配置https://docs.dhtmlx.com/gantt/desktop__styling_"}, {"id": "6992188106073964575", "title": "不习惯的插值表达式", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 创建Vue的实例（对象） 代码 在使用{{变量名}}进行获取data中数据时，可以在{{}}中书写表达式，运算符，调用相关方法以及逻辑运算等"}, {"id": "6844904152716279821", "title": "逐行分析v-model源码，助你工作面试排雷解难", "desc": "哈喽，大家好呀。我是wangly。 一名一年经验的前端老倒霉蛋了，前两篇文章非常感谢大家的支持，为了感谢大家，这次给掘友们带来了一篇关于Vue中经常使用到 v-model 指令的源码分析，充分的给大家说说，碰到类似的面试题和工作上碰到的问题扫盲。希望看完之后能对你有帮助。本篇文…"}, {"id": "6915182039910055949", "title": "vue新手学习笔记--巧用函数处理v-if与v-for同步执行", "desc": "不推荐将v-for和v-if添加在同一个元素上,因为v-for比v-if优先级高，所以使用的话，每次v-for都会执行v-if,造成不必要的计算，影响性能，尤其是当之需要渲染很小一部分的时候。 当你需要进行同步指令的时候。尽量使用计算属性，先将 v-If 不需要的值先过滤掉。"}, {"id": "6844903789405683719", "title": "Vue简史", "desc": "发端于2013年的个人项目，已然成为全世界三大前端框架之一，在中国大陆更是前端首选。 它的设计思想、编码技巧也被众多的框架借鉴、模仿。 学习研究Vue的演进，对于前端同学来说，是提高自身认识和水平的法门。 Ø 2013年，在Google工作的尤雨溪，受到Angular的启发，从…"}, {"id": "6854573210285899789", "title": "面试官，你再试试问Vue响应式原理？（标题党）", "desc": "这文章不会再详细介绍Vue响应式原理、源码，因为类似的优秀文章掘金一大推。 要了解Vue响应式源码的话，建议去看看别人的详细文章，此文章默认你已经掌握了响应式原理，毕竟我记录下来也是为了应付面试官。（狗头） 因为每次面试官问Vue响应式原理，自己语言都组织不好，所以干脆提前在这…"}, {"id": "6992102930643943454", "title": "vue2 to vue3 你可能用到的", "desc": "在用Vue开发前端时，不论使用原生还是封装好的UI库，对于表单组件，一般都会使用到v-model。虽然v-model是一个语法糖，但是吃到嘴里挺甜的啊。学会自定义v-model，还是很有必要的。 一个组件上的v-model默认是通过在组件上面定义一个名为value的props,…"}, {"id": "6844903661542309895", "title": "Vue同构(二): 路由与代码分割", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 上一篇文章Vue同构(一)我们介绍了如果使用Vue同构在服务端渲染一个简单组件并在服务端对应激活。对应的代码已经上传到Github。本篇文章我们介绍Vu…"}, {"id": "6954747603665813535", "title": "通过keepalive对后台管理列表进行缓存", "desc": "问题： 我目前正在负责一个后台管理项目，管理系统最多的无外乎就是这张表，那张表。而这个问题就是出现在表上，基本上表上的每个数据都要有一个详情，而且由于表的中的数据量一般都很大，都会用到分页或者查询搜索"}, {"id": "6844904206017658893", "title": "Vue项目下IE报错 SCRIPT1003: 缺少 ':'，导致页面空白的解决方案", "desc": "当时的情况是IE浏览器在登录系统时，登录页无法加载，页面显示空白，所以也无法访问系统里的其他页面。 第一个想法就是需要对webpack进行一些兼容性配置，于是小编低下头默默的先进行了一通通用配置操作。 由于本系统前端框架用到的脚手架是3.x版本，因此得针对cli3来进行配置。 …"}, {"id": "6973920599714299935", "title": "Vue中你不知道的watch用法", "desc": "当需要在数据变化时执行异步或开销较大的操作时，需要watch 选项提供了一个更通用的方法，来响应数据的变化。"}, {"id": "6997092606580621348", "title": "Vue.js组件化开发", "desc": "Vue.js组件 组件是可复用的 Vue 实例。组件用于封装页面的部分功能，将功能的结构、样式、逻辑代码封装为整体。这提高了功能的复用性及可维护性，使我们更好的专注于业务逻辑。"}, {"id": "6873364525061111821", "title": "【2021-08-05】Vue 2.x TS 项目升级支持 Vue 3.0 项目改造记录", "desc": "勿喷，毫无深度内容，这是一个记录过程，是持续更新的，会不断记录新的问题和如何解决。 目前学习小组的学习项目能够支持 2.x 与 3.0 风格在项目中共存，但是不能同时存在于同一个组件内。 主要是考虑了能够让小组里的小伙伴们能够逐渐熟悉过度，而不是硬上 Vue 3.0。 我使用了…"}, {"id": "6844903970498936846", "title": "Vue 3.0 源码逐行解析（一）：响应式模块（1）", "desc": "vue 3.0 源码刚出没多久 本人平常开发惯用vue 之前看过 vue 2.0 的一些源码 这次准备做一次逐行分析 3.0 的源码 欢迎大家在下方留言 大家一起讨论。 之前vue 2.0 是用 Flow 来做静态类型代码检查，后面发现这个团队不靠谱 Flow项目烂尾了，根本拼…"}, {"id": "6844903577631227912", "title": "再谈前端虚拟列表的实现", "desc": "书接上文，在之前的 聊聊前端开发中的长列表 中，笔者对「可视区域渲染」的列表进行了介绍，并写了一个简化的例子来展现如何实现。这种列表一般叫做 Virtual List，在本文中会使用「虚拟列表」来指代。在本文中，笔者会把上篇文章中的简化例子一步步强化成一个相对通用、性能优异的虚…"}, {"id": "6913497628911075341", "title": "Vue2.X 安装CKEditor5 以及基本使用（二）", "desc": "上次写了Vue2.X 安装CKEditor5 以及基本使用（一）,讲的官网提供的几种集成方案，可以快速使用，但是功能较少，而且难以扩展，这次讲使用源码集成方案。可以完全的自定义需要的功能 使用CKEditor的感受，读英文文档还是挺头疼的，半看半翻译，文档相对冗杂，感觉是要兼容…"}, {"id": "6844903711622299662", "title": "Vue应用框架整合与实战--Vue技术生态圈篇", "desc": "Element-UI ★13489 - 饿了么出品的Vue2的web UI工具套件 Vux ★8133 - 基于Vue和WeUI的组件库 iview ★6634 - 基于 Vuejs 的开源 UI 组件库 mint-ui ★6253 - Vue 2的移动UI元素 muse-ui…"}, {"id": "6844904144398974984", "title": "带你了解 vue-next（Vue 3.0）之 小试牛刀", "desc": "看完上一章 初入茅庐之后，相信大家已经对vue-next（Vue 3.0）有所了解了。本章带你掌握 vue-next 函数式的API，了解这些的话，无论是对于源码的阅读，还是当正式版发布时开始学习，应该都会有起到一定的辅助作用。 直接拷贝下面代码，去运行看效果吧。推荐使用高版本…"}, {"id": "6854573210982825997", "title": "vue3 中的响应式处理---> Reactive", "desc": "value[ReactiveFlags.SKIP]：ReactiveFlags.SKIP 的值为 '__v_skip' 表示有此属性的值就不能转换为响应式数据，你可以自己手动给你不想转换的数据添加此属性，就会使数据必能进行响应式变换（不建议你这么做，一般自定义组件会有这个属性）…"}, {"id": "6910923199538528263", "title": "「每日一题」到底该如何回答：vue数据绑定的实现原理？", "desc": "2020.12.23 日刚立的 flag，每日一题，题目类型不限制，可以是：算法题，面试题，阐述题等等。 这个题目本身不是特别难，只能说是作为社招的基础面试题，但是如果想回答好这道题也不是很容易。 vue几个核心的地方：vue实例化，虚拟DOM，模板编译过程，数据绑定。 我们开…"}, {"id": "6980132002619981832", "title": "VUE3（十）生命周期及钩子函数", "desc": "一：什么是生命周期 Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁"}, {"id": "6994083249504911374", "title": "Vue3 响应式API-扩展方法", "desc": "什么是响应式 响应性是一种允许我们以声明式的方式去适应变化的编程范例。 当一个值依附另一个值进行计算时, 如果前一个值发生了变化, 依附的那个也会同时进行变更. 典型案例参见 excel 函数. 当单"}, {"id": "6844904137914580999", "title": "解决 vue 开发中 scoped 样式问题", "desc": "在 vue 项目开发的过程中我们常常需要引用子组件，包括第三方的 ui 组件（element、iview），但是在父组件中 添加 scoped 之后，在父组件中无法编写子组件的样式。 要解决在父组件中编写子组样式的失效问题，有必要先了解一个.vue 组件的编译前后的情况对比。 …"}, {"id": "6908368803877355533", "title": "在vue项目中编写高阶组件", "desc": "带着这些问题，我们可以很容易的就联想到，我们需要对这些组件进行封装，如果对这些组件进行封装之后，我们的设计应该考虑到该如何提升组件的易用性，我的结论是：不改变组件本身的API，新增能满足以上特定功能的扩展API，为此我们引入一个概念，叫做高阶组件。 具体而言，高阶组件是参数为组…"}, {"id": "6888112131548872712", "title": "Vue源码分析（三）-----更新策略", "desc": "在Vue源码分析(二)中大概讲解了Vue中的模板编译过程：将编写的模板字符串转化为虚拟Dom节点。 在之前的解析中，曾经提到过：在vue中我们为每个组件创建一个watcher，利用Object.defineProperty的set方法中获取到数据更新之后，调用组件级别的watc…"}, {"id": "6972415579680407559", "title": "Vue源码解析之Mustache", "desc": "Mustache Vue中的Mustache就是Vue中的模板引擎，另外v-for指令也是一种模板引擎的应用。 模板引擎是将数据变为视图的最优雅的解决方案。 数据： 视图： 历史上的方案 纯DOM法："}, {"id": "6921993704710340621", "title": "create-vant-cli-app 使用小记", "desc": "发现了一个很好用的构建UI组件库的库create-vant-cli-app，基本满足了UI组件库开发的需求。 运行yarn dev后，项目中的md自动生成文档，又有内嵌的demo页面方便调试，非常方便。使用过程中也遇到了一些问题，我做了一些梳理。 这是package.json中…"}, {"id": "6994714239986302990", "title": "【YcDynamicForm文档】前端动态表单（一套配置/多套UI） - 戴向天", "desc": "大家好！我叫戴向天 QQ群：602504799 如若有不理解的，可加QQ群进行咨询了解 yc-dynamic-form Introduction 文档编辑者：戴向天 / 白玺东 更新时间：2021 年"}, {"id": "6921873416215592973", "title": "「强烈推荐」实用性超强的vant组件魔改教程", "desc": "之后npm会在项目根目录下的patches目录中创建一个名为vant+version.patch的文件，提交到git，这样别人更新下来同样会起作用。 前面的方式是在项目中应用所有补丁。如果当这个包版本更新后，要单独应用补丁，可以使用git执行命令："}, {"id": "6906788973981466637", "title": "使用vue封装右键菜单插件", "desc": "上周跟大家分享了如何使用vue的自定义指令实现自定义浏览器右键菜单，大家都觉得挺有意思的，这次我把它做成了插件，上传到了npm仓库。 在做这个插件的过程中，踩了蛮多坑，本文就跟大家分享下我的实现思路以及过程，欢迎各位感兴趣的开发者阅本文。 一开始我是直接用的typescript…"}, {"id": "6997355269252448286", "title": "如何使用vue的transition做动画效果", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 问题起源 问题起源于在生产环境要做一个轮播图，之前我们在文章：纯CSS实现轮播图 以及文章：无框架从零实现一个轮播图 | 8月更文挑战介绍"}, {"id": "6844903569632526344", "title": "Vue 服务端渲染（SSR）", "desc": "什么是服务端渲染，简单理解是将组件或页面通过服务器生成html字符串，再发送到浏览器，最后将静态标记\"混合\"为客户端上完全交互的应用程序。 于传统的SPA（单页应用）相比，服务端渲染能更好的有利于SEO，减少页面首屏加载时间，当然对开发来讲我们就不得不多学一些知识来支持服务端渲…"}, {"id": "6844903716756127751", "title": "你想要的全平台全栈开源项目 - Vue、React、小程序、Android原生、ReactNative、java后端", "desc": "很多人还不太明白项目到底是干什么的，还有很多疑问。为此我们整理了两篇简单的文档介绍： 最近几天跟多位大佬沟通，对项目未来发展、使命和规划有了新的理解和计划。 目前正在快马加鞭筹建团队，邀请了经验丰富的架构师指导，每个技术栈都会由该领域专业的大佬把关，尽全力做精品开源项目，为大家…"}, {"id": "6999533747313852429", "title": "vue2 双向数据绑定和数据响应式", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 前言: 对于 vue 的双向数据绑定和数据响应式本人最近花了一些时间去深究，自认为算是理清了它们之间的关系和主要的实现原理 双向数据绑定和数"}, {"id": "6844903568642670599", "title": "Vue组件库大对比--HeyUI, iView, Element", "desc": "目前，市面上主流的Vue组件库大概就是iview, element。 当然，heyui不在范围内，38个star屈指可数，大部分还是认识的同事。 更可恶的还是骗不来后端同学的star，心塞。 element，iview都支持按需加载。 heyui不支持。 关于支不支持按需加载，…"}, {"id": "6966412425843343373", "title": "Vue2 Diff算法深入解读", "desc": "一、前言 Vue的核心是双向绑定和虚拟DOM（下文我们简称为vdom），关于双向绑定可以参阅木琴的文章《剖析Vue原理&实现双向绑定MVVM》，vdom是树状结构，其节点为vnode，vnode和浏览"}, {"id": "6881522276768940039", "title": "vue中使用echarts来绘制中国地图", "desc": "基于echarts的大数据中国地图展示，结合API定制，开发样式，监听鼠标事件，实现带参数路由跳转等自定义事件。 实际项目中大概率会遇到很多需要进行数据展示的地方，如折现图，柱状图等，今天给大家介绍一个更加炫酷的中国地图大数据展示，结合echarts免费开源第三方插件，可以实现…"}, {"id": "6990921144291295246", "title": "vuex 引用的三种写法", "desc": "mapState，mapGetter，mapMutations，mapActios 引用的各种写法:数组展开，对象展开，函数调用"}, {"id": "6844904085494185991", "title": "基于Vuex实现小米商城购物车", "desc": "上学期利用课余时间学习了Vue.js、Node.js，一直想做个完整的项目实践一下，但之前在学校并没有那么多的时间。现在恰好有时间，就想着做一个项目巩固之前学到的东西。 思来想去，最后决定模仿 小米商城 做一个电商项目，目前已经差不多做完了，本文就购物车模块的实现进行总结。 1…"}, {"id": "6996483214629928967", "title": "Vue中 $attrs、$listeners 详解", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 1. 前言 多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点"}, {"id": "6989477987754180638", "title": "vue i18n 实现前端国际化", "desc": "1.安装 2.使用 1.新建一个js文件（随便自己命名，我的命名时lang.js），导出文件; 上面引入的语言包是js的文件，就是你页面上要用到切换的语言文字都放在这个文件里面；"}, {"id": "6999252124106227725", "title": "阅读Vue中的工具函数", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 1.babelParserDefaultPlugins 列举三个babel插件 1.大数 2.可选链 3.控制合并运算符 第二个和三个对于提"}, {"id": "6844903735047503879", "title": "Vue 性能优化之深挖数组", "desc": "最近在用 Vue 重构一个历史项目，一个考试系统，题目量很大，所以核心组件的性能成为了关注点。先来两张图看下最核心的组件 Paper 的样式。 从图中来看，分为答题区与选择面板区。 答题模式与学习模式可以相互切换，控制正确答案显隐。 单选与判断题直接点击就记录答案正确性，多选是…"}, {"id": "6844903618680881165", "title": "前端开发-领域驱动设计", "desc": "随着我们解决的场景越来越专业化和复杂化，大型SPA应用的流行，前端承担的职责越来越多。代码的质量和系统的完整性越来越难把握。很容易导致迭代着迭代着发现代码改不动了。最后只能新起炉灶，重新开发。归根到底在于复杂度的失控，本文会尝试分析其中的问题以及从前端如何应用领域模型开发的角度…"}, {"id": "6999471079689289735", "title": "chrome and firefox 安装 vue-devtool ", "desc": "1. 从git克隆代码 git clone https://github.com/vuejs/devtools.git or 下载zip包 如果git clone太慢或者报错, 下载zip快一些，解压"}, {"id": "6982839147476189221", "title": "vite+vue3+ts+elementplus", "desc": "公司一直用的`Vue2`开发的项目，上次开会主管说：“我们下次的后台项目用vue3吧，之前项目清闲的时候也跟你们说过，不知道你们学了没有。。。。。”"}, {"id": "6999218218351099935", "title": "四步简易实现vue里的watch", "desc": "1. watch里函数名必须是data数据源里对象的key值，这样才能对data数据源里对应key值的对象进行监听。 2. watch里的函数接收两个参数，第一个参数为赋的新值，第二个参数为初始值。"}, {"id": "6911608146737758221", "title": "如何优化  Vue 祖传代码", "desc": "我们主要看首屏加载速度，在测试环境我们项目其实跑得还是蛮快，但是生产环境是用印尼比较差的服务器，再加上需要 kexue 上网（总是网络出现波动），在这次 UI 2.0 上线之后，堆积的东西终于越来越多，项目也越来越庞大。毫不夸张的说我们现在使用 4G 首次打开页面的速度大概在 …"}, {"id": "6844904195473031176", "title": "打造一款适合自己的快速开发框架-前端篇之框架分层及CURD样例", "desc": "和后端一样，前端也有对应的分层和CURD，本文主要是定制前端CURD模板样例，规范化代码，也为后续的代码生成器做铺垫。 这里的方法即js的方法。 上一篇对路由进行了模块化，也简单地对页面进行了模块化，本文会进一步对单个模块的页面进行说明。 上面就是对一个单表操作要创建的全部文件…"}, {"id": "7000003551355371550", "title": "vue组件之间的传值", "desc": "父组件向子组件传值 我们可以这样理解：Vue实例就是一个父组件，而我们自定义的组件（包括全局组件、私有组件）就是子组件。 【重点】需要注意的是，子组件不能直接使用父组件中的数据。父组件可以通过prop"}, {"id": "6844903503517728775", "title": "《京东E维》基于VUE+Webpack的单页面实践", "desc": "本篇文章和大家聊一聊我们近期的项目——京东E维平台，这是一个专门为运维工程师设计的工单处理系统。它所要肩负的任务是，针对公司内部所有员工在办公时遇到的有关计算机、网络、软件方面等问题，通过E维平台发起问题上报请求。工程师通过该系统可以根据上报工单的紧急程度进行抢单、解决事件单、…"}, {"id": "6844903801443500046", "title": " Vue秩序白银 —构建自己的Vuex", "desc": "1. Vuex实战 2. 实现自己Vuex 3. 实现插件机制 4. 传递store 5. state 6. mutation 7. 响应式state 8. action 9. getter 类似computed，实现也不难 ,使用Object.defineProperty代理…"}, {"id": "6976920004851662879", "title": "Vue3 - Notification 组件开发", "desc": "往期文章： Vue3 - 使用tsx编写组件 Vue3 还没入门-就想放弃 Vue3-Vuex-TypeScript 踩坑之旅 前言 简单研究了一下 vue3，感觉与 vue2 相比，差别还是蛮大的，"}, {"id": "6844903696950624264", "title": "vue-cli 3.0新特性解读", "desc": "在9 月 30 日的Vue.js 伦敦大会上， 作者尤雨溪介绍了 Vue 下一个版本将要发布的内容，以及 Vue 3.0 的开发路线，和后面版本的发展情况。虽然，Vue 3.0版本的正式版还没有发布，不过作为vue 项目快速构建工具的vue-cli 早已发布，我们可以通过vue…"}, {"id": "6998335507079888904", "title": "Vue3源码解析-defineComponent", "desc": "defineComponent 从API名称来看，为定义一个组件 参数： 具有组件选项的对象： 或者是一个setup函数，函数名称将作为组件名称来使用： 核心源码： 附录：https://github"}, {"id": "6997327954111889422", "title": "vue 系列 -- 组件复用、传参、扩展", "desc": "前言 一个页面里面有着不同的操作，每个操作对应打开一个弹窗，比如我之前实习做的一个项目，有 10 种操作对应 10 个不同的弹窗，所以基于代码复用原则，我们需要对弹窗进行复用 组件注册（局部注册） 官"}, {"id": "6844904149239201800", "title": "Vue(2.x 和 3.0) 双向绑定原理及实现（Object.defineProperty 和 Proxy）以及常见错误区分", "desc": "vue实现双向绑定原理，主要是利用Object.defineProperty 来给实例data的属性添加 setter和getter. 并通过发布订阅模式（一对多的依赖关系，当状态发生改变，它的所有依赖都将被通知）来实现响应。 Observer 用来监听拦截data的属性为监察…"}, {"id": "6979152637846945806", "title": "快来学vue吧", "desc": "vue源码解析（一） 前段时间用vue3开发了几个项目，由于vue3有蛮多新特性的所以还是有必要去学习一下vue3的源码，在此之前呢，先来复习一遍vue2的源码吧。下面我会分为几部分来解剥vue的底层"}, {"id": "6844903984017178632", "title": "面试时面试官想要听到什么答案（关于es6中let、const、promise、块级作用域的问题）", "desc": "前面写了一篇关于vue方面问题的面试题（面试时面试官想要听到什么答案（关于一些vue的问题）），感谢大家的阅读和意见，今天整理了一下我面试时经常会问到的一些关于es的问题，写了这篇文章，感谢拨冗翻阅拙作,敬请斧正。 作为es6问题的开始的一个问题，想通过这个问题知道对方写代码时…"}, {"id": "6844904025024888846", "title": "在vue cli 3脚手架里引入tinymce 5富文本编辑器", "desc": "1. tinymce的安装 1. 安装tinymce-vue 2. 安装tinymce 3. 下载中文语言包 2. 使用方法 1. 文件操作 2. 目录截图 3. tinymce初始化 1. 引入基本文件 2. 注册组件并使用 3. 初始化配置项 4. 简单demo 5. 封装…"}, {"id": "6997309949365714958", "title": "用Vue.use()来优化全局组件注册", "desc": "Vue.use()是Vue提供一个静态方法，用来向Vue注册插件。我们也可以以插件的形式来注册全局组件,方便统一管理及使用 Vue.use 可以接收一个对象，Vue.use(obj) 对象中需要提供一"}, {"id": "6997314437849808932", "title": "Vue中，Watch与Computed的用法与场景分析", "desc": "Watch(侦听器) 作用：监听某一个属性发生变化时候需要执行的操作。 场景：当一条数据改变，影响多条数据的时候。(计算属性：当多条数据改变影响一条数据的时候。如：购物车 商品总价格)。 示例： 1."}, {"id": "6911151669975711751", "title": "Vue3中的响应式对象reactive(proxy)怎么使用在简单的项目中", "desc": "vue3的教程大家肯定已经看到很多了，今天我！来说说vue3升级的重中之重响应式对象改用proxy，它到底怎么用，如果只是想在很简单的项目页面中使用该怎么用。 本文章是我上完winter老师的前端训练营之后，写的总结，大家感兴趣的可以去极客时间自己看，广告就不做了。 上面是ob…"}, {"id": "6844904063125946375", "title": "vue:3年挖坑血与汗的教训", "desc": "vue.js使用的人越来越多了，大多数的公司也在使用vue框架进行开发自己公司的产品。虽然vue.js语法比较简单，官网文档也比较详细，但是越简单的东西，越容易让人忽视细节，从而容易导致代码水平参差不齐，风格各不相同。 对于初学者，感觉一般不怎么会花时间去查看官网文档，不知道把…"}, {"id": "6918682112179027975", "title": "Vue Table表单拖拽", "desc": "因为数据展示使用的是 elementUI的 Table进行数据展示的，现在的需求是通过拖拽表单进行表单排序。同时，动态修改表单中的数据排列顺序。查阅了好多资料，也翻看了好多github上别人封装好的表单插件，但是最终都不是自己想要的，其中主要原因就是，后台管理系统页面中，同一个…"}, {"id": "6844903961510559758", "title": "给vue3源码添加注释：数据响应式部分", "desc": "项目地址vue3.0，版本Pre-Alpha数据响应源码地址引入的代码加注释isObjecttoTypeStringbuiltInSymbolsisReftrackcreateGettermutabl"}, {"id": "6942413119436095495", "title": "这回把Promise给你写的明明白白🚀🚀", "desc": "回调函数嵌套调用，外部函数异步执行结果是嵌套的回调执行的条件。 说明： exector会在Promise内部立即同步调用，异步操作在执行器中执行。 说明： 指定用于得到成功value的成功回调和用于得到失败reson的失败回调返回一个新的promise对象。 finally()…"}, {"id": "6844903798683484173", "title": "[译] Vue.js 优雅地集成第三方 JavaScript", "desc": "摘要：Vue.js 的一个主要的优点是可以很好地与其他代码一起工作：也就是说它不仅很容易嵌入到其他的应用程序当中，而且也很容易将非 Vue 代码包装到 Vue 当中。本文讨论了 Vue.js 的第二个优势，包括了三种不同类型的第三方 JavaScript，以及将它们嵌入到 Vu…"}, {"id": "6978020341981380621", "title": "从0开始vue3.0", "desc": "step： npm install -g @/vue-cli vue -V vue create project-name //创建项目，回车选择vue3.0版本 vue add typescript"}, {"id": "6923105370596933645", "title": "Vue源码解析-初始化流程", "desc": "前言想学习一个框架的源码最好从初始化流程开始逐步深入，本篇幅主要介绍vue的初始化流程Trustme绝对完整建议本篇幅可能需要阅读大概半个小时左右可以泡上一杯雀巢或者一杯花茶慢慢看，但是我觉得花上一些"}, {"id": "6987329142073065503", "title": "Vue 组件传值（非父子组件传值）", "desc": "前言 如果想要更加的了解非父子组件传值，首先要了解父传子的思维逻辑，这样非父组件传值会更加的了解、 非父子组件传值（兄弟组件传值） 要了解非父组件传值首先好了解 $emit 和 $on , $emit"}, {"id": "6979030268732669988", "title": "Vue中 $nextTick() 与 Vue.nextTick() 原理及使用", "desc": "这是我参与更文挑战的第 23 天，活动详情查看：更文挑战 1. 举例说明 点击后： 从上图可以得知： msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的。 其根本原因是因为V"}, {"id": "6844904007069089805", "title": "实现一个掘金Style的markdown目录", "desc": "已经几乎很久没有更新文章了，由于工作和生活的原因，仿佛失去了之前在大学时候的样子，变得慵懒起来。刚踏入社会还是需要不停的鞭策自己，有很多东西要学，定期的写作对自己的提升是很大的。在写的过程你依旧在思考，你会想着把这东西变得更好展现到别人眼前。不会像写业务一样，完成了功能和需求很…"}, {"id": "6866803898590593031", "title": "这些需要知道的Vue相关开发规范", "desc": "执行npm run lint-fix 将自动修复。无法修复的将在控制台给出提示。 原则上每次git commit前我们都需要先执行一下 lint-fix命令的，避免遗忘或者偷懒，我们使用预检查工具进行处理。 husky 是一个 npm 模块，可以在 git 提交前做拦截，如果拦…"}, {"id": "6844904200472625165", "title": "【进击的Vue(四)】webpack打包优化", "desc": "本文主要讲以下内容。webpack-bundle-analyzer占用统计查看所有的文件占用情况，使用在线cdn替换本地导入的包，使用clean-webpack-plugin清除webpack打包残留。 使用webpack-bundle-analyzer插件查看项目文件资源占用…"}, {"id": "6847902225063215111", "title": "仿Element自定义Vue组件库🍊", "desc": "市面上目前已有各种各样的UI组件库，他们的强大毋庸置疑。但是有时候我们有必要开发一套属于自己团队的定制化组件库。还有时候原有的组件不能满足我们的各种需求，就需要在原有的组件上进行改造。 所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，大能架构和维护一个组件库不…"}, {"id": "6844904003680075783", "title": "VUE.CLI 4.0 配置多页面入口礼包送你！", "desc": "在实际工作中，肯定会遇到大型项目，往往一个架构里面会开发多个应用，而这些应用又没有太大的关联，但有可能会共用一些组件或者是样式表等，那么就会出现一个问题，打包的时候会将这些互不相关的应用全部打包。"}, {"id": "6909411219988283405", "title": "使用QrCodeJS生成二维码", "desc": "在上班中遇到一个需求，需要在填报完信息后需要查看填报的进度情况。填报过程只有在PC端的浏览器完成，但是老板死活要我加上一个手机扫码查看填报动态的功能。在提出这个需求的时候我就直接否定了，问他：为什么在电脑端填报了，我还要在特意拿起手机扫个二维码吗？老板：我不管，我就要。 好家伙…"}, {"id": "6914584513813643271", "title": "vue3 组件通信", "desc": "vue3组件通信和vue2的通信方式基本一致，只是存在写法上的差异props/emitsetup函数接收两个参数，props和context(上下文，其中有一个emit)用法展示refvue2.x是通"}, {"id": "6969741580412387336", "title": "数据响应式原理 - 01", "desc": "本文是关于数据响应式原理的学习笔记，目的在于更好的理解 Vue 的底层原理，篇幅较长，故而拆分为几篇，今后会陆续更新"}, {"id": "6980160246275080229", "title": "Vue前端项目国际化", "desc": "Vue前端项目国际化1.下载依赖 终端进入项目，执行命令安装国际化插件vue-i18n npm install vue-i18n --save"}, {"id": "6980681319885864968", "title": "Vue.js详细笔记总结", "desc": "Vue.js详细笔记总结(其一) 基本语法 插值表达式 使用v-cloak能够解决差值表达式闪烁的问题 使用v-html指令用于输出html代码： 默认 v-text是没有......"}, {"id": "6969493315628564510", "title": "vue相关知识整理-v-if和v-show", "desc": "vue基础知识整理 为了回避错误、小纠结和反模式，整理一份文档进行参考，不定期更新内容，作为工作查找和基础知识积累的记录。 1.v-if 和 v-show 区分使用场景 v-if 是真正的条件渲染，因"}, {"id": "6979987308820824077", "title": "JS汉罗塔递归算法", "desc": "JS汉罗塔递归算法 把三个步骤转化为简单数学问题： （1）把 n-1个盘子由A 移到 B； （2）把 第 n个盘子由 A移到 C； （3）把n-1个盘子由B 移到 C；"}, {"id": "6844903636343095304", "title": "这才是我想要的彩虹进度条-[vue-ins-progress-bar]", "desc": "vue-ins-progress-baravuecomponentofins-styleprogressbar一款ins风格的vue进度条组件DemoLiveDemoInstallUsagemain."}, {"id": "6934897578668458015", "title": "Vue基础入门(二）", "desc": "当页面加载时，该元素将获得焦点 (注意：autofocus 在移动版 Safari 上不工作)。事实上，只要你在打开这个页面后还没点击过任何内容，这个输入框就应当还是处于聚焦状态。 el：指令所绑定的元素，可以用来直接操作 DOM。 bind：只调用一次，指令第一次绑定到元素时…"}, {"id": "6979504310732193805", "title": "vue 项目的环境变量只能 VUE_APP_ 前缀？", "desc": "vue cli 官方文档指导中 .env 文件的环境变量，如果需要在前端的文件中使用，必须以 VUE_APP_ 打头命名的变量才能使用到，那么我们有办法突破这个限制吗？那必须安排。 通过 vue in"}, {"id": "6977265550934147086", "title": "Vue使用asset文件夹中静态资源", "desc": "一、为图片URL绑定变量 二、在JS中设置变量 直接将图片引入为模块 将imgurl变量放在数据中 在生命周期函数中设置变量值"}, {"id": "6844903837635969038", "title": "深入剖析Vue源码 - 完整挂载流程和模板编译", "desc": "在正文开始之前，我们先了解一下vue基于源码构建的两个版本，一个是runtime only(一个只包含运行时的版本)，另一个是runtime + compiler(一个同时包含编译器和运行时的版本)。而两个版本的区别仅在于后者包含了一个编译器。 通俗点讲，编译器是一个提供了将源…"}, {"id": "6844903650586951694", "title": "受够了移动端的数字输入，我用vue写了个模拟键盘", "desc": "在H5开发过程中，涉及到用户输入的表单时，有一个非常常见的场景：输入数字，在此基础上往往还会涉及到限定数字范围等一系列逻辑处理。 这些限定倒还好说，我受不了的是设备键盘，目前常见的处理方式是用type=\"tel\"直接唤起手机号码的键盘，如果想要输入负号，就只能忍受默认键盘了。 …"}, {"id": "6977184382679252999", "title": "vue页面里的name究竟有什么用？", "desc": "之前vue只是进行过简单学习，并且工作上并不常用，渐渐忘记了，今天重拾vue项目，看到了一个name属性，（因为之前都是不写的），故很好奇name属性有什么作用。 本人渣渣，希望互相学习，互相进步 递"}, {"id": "6955691720432582670", "title": "Vue3 provide/inject", "desc": "1. options Api 通常我们从父组件传值给子组件使用的是props，如果我们需要深层的传递如从父组件传递给孙子组件，那么再使用props去传递，这种做法可能会使你发怒。 遇到这种情况，就可以"}, {"id": "6965775927045259294", "title": "Vue-Router 原理实现", "desc": "问题：创建 Vue 实例时传入的 router 的作用是什么？ 会给 vue 实例注入两个属性 $route 路由规则 $router 路由对象 01 动态路由 在组件中获取这个 id 的方式 02 "}, {"id": "6844903695143043086", "title": "记一次 VUE 项目优化实践", "desc": "爱康体检宝 PC（https://www.tijianbao.com/) 算是一个“老”项目，为什么说“老”呢，因为在前端技术日新月异，每天都有新知识、新概念，甚至新框架的今天，它还是基于vue-cli 2.x、webpack 3.x构建，显然有些老了。其次，在早期开始这个项目…"}, {"id": "6844903934901878797", "title": "Vue UI组件库开发经验漫谈", "desc": "我在一个名为Admin UI的Vue UI组件库（GitHub地址：https://github.com/BboyAwey/admin-ui）上投入了大量时间。该库到目前版本发展到3.x，几乎全部出自我手。它的优劣请先搁置不问，但至少，我从中积累和学习到的经验足够回答一个问题：…"}, {"id": "6918569473419165709", "title": "从源码角度来回答keep-alive组件的缓存原理", "desc": "今天开门见山地聊一下面试中被问到的一个问题：keep-alive组件的缓存原理。 官网的例子是 tab 切换保存了用户的操作，实际中还可能遇到从列表页跳转去了详情页，再跳转回列表页需要保存用户进行过的筛选操作，这就需要用到 &#x3C;keep-alive>，这样也能避免重新渲…"}, {"id": "6980981278296260638", "title": "vue.sync 自定义事件修饰符", "desc": "面试中会被问到的sync事件修饰符， 下面是事件修饰符的详解，以及实现过程，如何实现子组件对父组件中值进行修改 `"}, {"id": "6987686410065018911", "title": "Vue 组件通信 知识点", "desc": "vue组件通信方式很多人不知道啥时候采用哪种方式来解决，这里做个笔记给需要的人。 包括父子组件通信 、隔代组件通信、vuex和事件车方式。"}, {"id": "6844903536937943054", "title": "Vue.js Demo 汇总网(适合想学习 Vue和找某些功能模块的)", "desc": "这个网站汇总了大多有用的,且都基于Vue 的项目和最佳实践(DEMO),不管是菜鸡还是上手了想加深认知的.在上面花些时间应该是可以更近一步的,比如阅读人家的源码实现,尝试自己写,打包,发包等"}, {"id": "6987658708020887589", "title": "Vue 中的 .sync 修饰符作用", "desc": "vue 修饰符 sync 的功能是：当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定。 场景： 爸爸给儿子钱，儿子要花钱怎么办？ 儿子打电话(触发事件)向爸爸要钱 Vue规则"}, {"id": "6919293060186636296", "title": "使用prettier格式化你的代码", "desc": "prettier是目前比较流行，用的比较多的代码格式化工具，当你在编辑器里面保存代码滴时候自动格式化你的代码格式，统一团队代码格式，尤其是配合eslint的时候，更能节省时间。 3.然后在vscode里面配置，搜索format，在这里需要注意的是，vscode的配置分为用户，和…"}, {"id": "6958800097765228557", "title": "【VUE】005. 组件插槽", "desc": "本文主要介绍组件插糟的用法，包括匿名插槽、具名插槽、动态插槽和作用域插槽的相关概念、定义方法和使用方法。"}, {"id": "6844903498253860878", "title": "Vue 生产项目链接 -- 上线项目大集合", "desc": "昨天闲来无事，便从网上搜集了一下使用vue的生产环境的项目，我先声明我不是vue、react、angular等框架的粉丝阵营，只是我们自己用vue做了一个项目，做完以后想找一些参考，看看大家是怎么实现的，所以才搜集了一下关于vue的生产项目，也希望大家把自己的vue或者发现比较…"}, {"id": "6941336881309319205", "title": "[Vue源码]当我们谈及v-model，我们在讨论什么?", "desc": "当提及到v-model时，我们都会想到它时一个语法糖，相当于在使用该指令的元素或者组件上绑定了props中的value值以及注册了input事件。但其实深入挖掘其中，可以学习到更多的东西，下面就看一下相关的Vue源码吧。 在初始化时，Vue构造函数会执行this._init，然…"}, {"id": "6969809380346691597", "title": "vue项目通过插件vue-esign实现签名", "desc": "vue项目通过插件vue-esign实现签名vue项目通过插件vue-esign实现签名vue项目通过插件vue-esign实现签名"}, {"id": "6955408084286046216", "title": "vue-router源码分析(一)", "desc": "1. 先分析下 vue-router 引用方式 发现是Vue.use(VueRouter)引入。 Vue.use 会加载 当前对象的install方法， 所以VueRouter提供了一个install"}, {"id": "6844903736356126734", "title": " 几种常见的Vue组件间的传参方式", "desc": "Vue父子组件通讯的方法其实有很多，本文只是做一个总结，说说他们的优缺点，具体如何使用相关文档和网上大神已经总结的很多里，这里就不再说明。 解决了多层组件之间繁琐的事件传播。 解决了多组件依赖统同一状态的问题。 不能做数据持久化，刷新页面就要重制，要做数据持久化可以考虑使用lo…"}, {"id": "6844904005231984653", "title": "Docker+Nginx解决跨域发布Vue项目到生产环境", "desc": "devServer.proxy完成代理配置即可。 下面将采用Docker+Nginx的方法完成前端项目的发布，并使用Nginx反向代理完成跨域支持。 设置 .dockerignore 文件能防止 node_modules 和其他中间构建产物被复制到镜像中导致构建问题。"}, {"id": "6881612925048946695", "title": "vue学习笔记之插槽篇", "desc": "插槽作用：为了让组件更加具有扩展性。抽取共性，保留不同为插槽，让其他组件可以传递自己想展示的标签到预留插槽。 &#x3C;slot> 元素作为组件模板之中的内容分发插槽。&#x3C;slot> 元素自身将被替换 1. 插槽的基本使用 2. 插槽的默认值 如果其他组件使用cpn组…"}, {"id": "6997693463672127518", "title": "Vue3.0源码解析「reactive」篇 — 7.effect&trigger&track", "desc": "Effect 学习 effect 源码，先从一个测试用例开始，首先我们构造了一个 counter 响应式代理，然后调用了 effect 函数传入一个会产生副作用的操作。此时 effect 中的函数会自"}, {"id": "6966231677727178782", "title": "Vue 3中Composition API浅析", "desc": "ref 作用: 定义一个数据的响应式 (响应式数据:数据变化,页面跟着渲染变化) 一般用来定义一个基本类型的响应式数据 ref是一个函数,作用:定义一个响应式的数据,返回的是一个Ref对象,对象中有一"}, {"id": "6876428234171514894", "title": "Vue 中使用 $on 绑定的事件监听记得移除", "desc": "事件监听，组件注销时记得销毁。 组件中销毁要指定销毁事件。 如果组件注销时事件监听没有被销毁，那么之后触发的话依然会执行，可能产生副作用。"}, {"id": "6870889824383926279", "title": "创建你自己的 vue cli preset", "desc": "前一阵子从0到1做了一个 vue的项目，为了下次使用方便，写了一个preset，也顺便聊聊这个项目中的一些东西。 我们先在 GitHub 新建一个 repo，在这个 repo 中增加三个文件：preset.json、generator.js、prompts.js。 genera…"}, {"id": "6906362999703863304", "title": "vue cli项目babel配置解析", "desc": "在使用vue-cli工具生成的项目中，如果选择的是In dedicated config files，则在项目完成后，会有一个babel.config.js文件，项目中的Babel都会在这里配置。 简单介绍一下Babel， Babel是一个工具，主要用于将 ECMAScript…"}, {"id": "6844903845282185229", "title": "深入剖析Vue源码 - 完整渲染过程", "desc": "当浏览器接收到一个Html文件时，JS引擎和浏览器的渲染引擎便开始工作了。从渲染引擎的角度，它首先会将html文件解析成一个DOM树，与此同时，浏览器将识别并加载CSS样式，并和DOM树一起合并为一个渲染树。有了渲染树后，渲染引擎将计算所有元素的位置信息，最后通过绘制，在屏幕上…"}, {"id": "6971426978377728008", "title": "Vue.js 源码（5）—— 虚拟 DOM", "desc": "前言 虚拟 DOM 现在大部分同学都已经很熟悉了，所以本文只是作为笔记记录下。 什么是虚拟 DOM 刚学前端的时候，还不知道虚拟 DOM。虽说 React 在2013年就"}, {"id": "6919361874622414861", "title": "基于vue3音乐播放器进度条的实现", "desc": "一些零基础小白学习vue3的开发记录，目标实现web端音乐播放器。github开发代码，欢迎一起交流学习。 说到进度条，在html里面首先想到的是input组件，其中的range类型，通过vue的props传递属性可以很方便的实现想要的功能。 拖动进度条首先想到的vue的双向绑…"}, {"id": "6984397891972382734", "title": "[动态界面 json2render] 动态表单中使用自定义容器组件", "desc": "需求 上次碰到一个需求要求动态表单配置中加载另一个动态表单配置的组件，利用 json2render 已经能实现这个功能，具体实现 [动态界面 json2render] 动态界面中加载自定义模板组件 这"}, {"id": "6948769022628331550", "title": "使用iframe+postMessage通信实现商城多页面可视化装修", "desc": "演示视频演示视频背景​ 开发项目是多商家的类似有赞的商城后台，需要支持客户端的店铺装修功能​ 系统用户多为企业用户对页面效果要求较高，导致首页变化非常频繁前言2020年第一版本装修上线了，方案是后台“"}, {"id": "6911510246326272014", "title": "基于Vue3实现的动态表单组件", "desc": "动态组件是基于Vue3 和 element-plus组件库. 动态表单组件，很容易知道，表单里的小组件是根据动态配置参数生成。那到底是什么做到的？思路很简单，是这样的： 设计一个动态组件，可以根据动态配置参数(传入组件名称)生成对应的组件，如，el-input组件、el-sel…"}, {"id": "6984351170215034917", "title": "Vue学习笔记 - 模板语法，指令", "desc": "模板语法概述 Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层组件实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTM"}, {"id": "6971624574085496862", "title": "最全的 Vue 面试题+详解答案", "desc": "最全的 Vue 面试题+详解答案 前言 本文整理了高频出现的 Vue 相关面试题并且附带详解答案 难度分为简单 中等 困难 三种类型 大家可以先不看答案自测一下自己的 Vue 水平哈 如果对原理感兴趣"}, {"id": "6844903666206375943", "title": "vue-video-player,通过自定义按钮组件实现全屏切换效果", "desc": "最近公司的产品上线，一些高级功能在基础版本中不对用户开发，通过视频的形式展示。 这种办法，虽然能实现，但在强制退出全屏那一下，整个页面会跳一下，碰到网速慢，或电脑卡的情况，效果更差..."}, {"id": "6844903844745314311", "title": "webpack4手动搭建Vue开发环境实现todoList项目（1）", "desc": "引入，若成功输出Hello World即证明webpack运行环境配置成功... url-loader可以通过limit属性对图片分情况处理，当图片小于limit（单位：byte）大小时转base64，大于limit时调用file-loader对图片进行处理。 webpack上…"}, {"id": "6976664972843548680", "title": "前端开发：Vue项目报错Unknown custom element：XXX - did you register the component…的解决方法", "desc": "这是我参与更文挑战的第23天，活动详情查看：更文挑战 导读 在前端开发的时候，运行Vue项目，遇到提示报错Unknown custom element:XXX - did you register t"}, {"id": "6976960944769335303", "title": "数据驱动 - 学习vue源码系列2", "desc": "决定跟着黄轶老师的 vue2 源码课程好好学习下vue2的源码，学习过程中，尽量输出自己的所得，提高学习效率，水平有限，不对的话请指正~ 将vue 的源码clone 到本地，切换到分支2.6。 Int"}, {"id": "6919081903928639496", "title": "防止前端按钮重复提交数据问题", "desc": "一、问题导入当我们在页面进行点点点的操作时，很可能遇到点击两次的行为，这时候提交或保存按钮也没有进行校验，很可能保存两份数据，因此，作为开发人员，对需要保存类似的按钮进行校验很有必要。二、问题分析我们"}, {"id": "6958023518986616868", "title": "Vue template 到 render 的过程", "desc": "过程分析 Vue的模版编译过程主要如下：template->ast->render函数。 Vue在模版编译中会执行compileToFunctions将template转化为render函数。 1.调"}, {"id": "6975138661700468743", "title": "vue图片旋转, 缩放, 裁剪组件me-image-crop", "desc": "一款vue图片旋转、缩放、裁剪组件。兼容移动和pc端。包括图片预览/单指拖动/双指缩放/双指旋转/鼠标拖动/鼠标滚轮缩放/鼠标单击旋转和长按旋转/图片裁剪输出等。 简单方便，皮实易用，解决项目中的头像"}, {"id": "6999815125880274952", "title": "在vue-cli创建的项目里加一个全局变量（发布后可修改的）", "desc": "日常开发中可能会有例如后端请求路径动态生成，或者根据不同的打包环境读取不同的配置文件的需求。如果在开发阶段能获取到环境对应的地址，则可以通过设置环境变量进行指定不同的配置，但是有时候可能是前端打包完成"}, {"id": "6933041656765612039", "title": "0年前端的Vue响应式原理学习总结3：渲染watcher", "desc": "终于到了渲染watcher，看完这篇文章的内容后，大家就可以实现一个响应式系统了，并且能够在页面上有所体现。 1. 基本原理 2. 数组的处理 4. 最终章 持续更新中。。。 vue中有多种watcher，我们之前实现的watcher类似于Vue.$watch，当依赖变化时执行…"}, {"id": "6844904035745529863", "title": "拖拽排列卡片组件", "desc": "前言之前在掘金上看到了一遍分享拖拽卡片组件的文章，看了大致思路，觉得很清晰，也想动手实现一下；在过程中发现了蛮多的细节问题，完成后对比了原作者的代码，发现许多可以优化的地方，在这里记录一下；以下是个人"}, {"id": "6844903985971740685", "title": "Vue Cli浏览器兼容性实践", "desc": "在处理浏览器兼容性问题之前，我们先来看一下现在的浏览器市场份额是怎样的，👇下面是来自statCounter的数据，基本上覆盖了全世界浏览器市场份额的统计，而且前端er经常使用的caniuse所拉取的浏览器数据就是来自statCounter。 从统计数据可以看出，对于国内的PC…"}, {"id": "6971351043707781157", "title": "Vue+Vant实现手机端(H5)日期选择组件（实时、前一天、前七天、前三十天、前一周、前一个月）并前后切换", "desc": "Vue+Vant实现手机端(H5)日期选择组件（实时、前一天、前七天、前三十天、前一周、前一个月）并前后切换"}, {"id": "6844903638129704973", "title": "面试官：请简述一下vue-cli命令行工具，你能自己手写一个吗？", "desc": "本篇的主要内容是：实现可以在命令行中，直接运行代码(下面的名字可以自己取)。 在实现自己的命令行运行代码前，你需要对命令行,npm(包管理器)的基本用法有些了解。 完成上面几个步骤之后 我们能看到生成了一个xl-cli文件夹 文件中包含一个package.json文件。 第一行…"}, {"id": "6960238878527586317", "title": "vue3.0新特性", "desc": "1. vue2.0与vue3.0响应式原理对比 1. vue2.0响应式原理 vue2.0中使用ES5中的Object.defineProperty方法实现响应式数据 缺点： 无法监听到对象属性的动态"}, {"id": "6937691963709718558", "title": "Vue模仿ElementUI的form表单", "desc": "1、自定义组件要实现 v-model 必须实现 :value 和 @input。 2、当输入框中的数据发生变化时，通知父组件执行校验。 3、当 Input 组件绑定的 type 类型为 password 时，在组件内部使用 v-bind=\"$attrs\" 获取 props 之外…"}, {"id": "6844903970528460813", "title": "vue实现一个简单的吸顶、锚点和滚动高亮按钮效果", "desc": "因公司后台管理系统很多功能技术老旧，最近在用vue重构公司的后台管理系统，在做商品管理添加商品这一块，借鉴淘宝的添加商品的交互，需要实现一个简单的吸顶、锚点和滚动高亮按钮的效果。 1. 什么是position:sticky? 2. 如何使用sticky？ HTMLElement…"}, {"id": "6844903638029041672", "title": "vue 实践技巧合集", "desc": "本文纯属个人平时实践过程中的一些经验总结，算是一点点小技巧吧，不是多么高明的技术，如果对你有帮助，那么不胜荣幸。 本文不涉及罕见API使用方法等，大部分内容都是基于对vue的一些实践而已。由于涉嫌投机取巧，可能会带来一些不符合规范的副作用，请根据项目要求酌情使用。 如果只是这样…"}, {"id": "6954164431282503693", "title": "Fower: 一个可在 Vue 和 React 方便使用的 CSS in JS 库", "desc": "一年多没写过文章了，今天给大家介绍一个我断断续续花了半年开发的 CSS 项目： Fower. Fower 是什么？ Fower 是一个让你高效开发 UI 的样式工具库，目标是让你写 CSS 不再痛苦。"}, {"id": "6844903962030637063", "title": "vue打包优化大小,vue服务端渲染，非cli环境实现spa单页面项目", "desc": "写这篇文章的目的主要在于刚才看了一位掘友的文章，但是我看了他的代码有点粗糙，甚至是我觉得无法作为一篇好的给予新手的引导文章。 这里我先抱歉一声，因为我这样做有损你的声誉。 但是一般情况下没太多人选择ssr，因为只要不需要seo，ssr更多的是增加了项目开销和技术难度的。很多公司…"}, {"id": "6850037279650807816", "title": "用Vue实现一个简单的图片轮播", "desc": "每一篇文章都希望您有所收获，每一篇文章都希望您能静下心来浏览、阅读。每一篇文章都是作者精心打磨的作品。 如果您觉得杨戬这个小白还有点东西的话，杨戬希望正在看文章的您可以帮忙点亮那个点赞的按钮(效果更加)，对于杨戬这个暖男来说，真的真的非常重要，这将是我持续写作的动力。 写这篇文…"}, {"id": "6918613709556285453", "title": "vue-resource应用【七日打卡】", "desc": "vue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。 这两种方式本质上没有什么区别，阅读…"}, {"id": "6922365402106462216", "title": "Vue富文本编辑器", "desc": "根据业务要求，需要能够上传图片，且上传的图片能在移动端中占满屏幕宽度，故需要能等比缩放上传的图片，还需要能拖拽、缩放、改变图片大小。尝试多个第三方富文本编辑器，很难找到一个完美符合自己要求的编辑器。经过多次尝试，最终选择了wangEditor富文本编辑器。 最初使用的是vue2…"}, {"id": "6844903607607754765", "title": "从零开始做Vue前端架构（9）", "desc": "相信很多人都用过vue-cli或create-react-app或者类似的脚手架。 脚手架方便我们复制，粘贴，或者clone代码库，而且还可以更具用户的选择，引入用户所需要的插件。 脚手架往往搭配着早已设计好了架构的项目，然后按需进行拷贝。 yeoman是一款来做脚手架的工具，…"}, {"id": "6868668287195185165", "title": "Vue使用高德地图", "desc": "主要是想记录一下使用高德地图地位以及标记当前位置，搜索位置的过程。创建Vue项目的流程引入高德地图进入高德开放平台注册账号创建新应用并添加key在index.html的head中引入代码。设置容器，初"}, {"id": "6972934364179120159", "title": "Vue.js 源码（9） —— 解析器", "desc": "前言 通过前面的学习，我们了解了模板编译的三个模块。本文，我们将一起继续深入学习其中的编译器。 解析器的作用 我们只有将模板解析成 AST 后，"}, {"id": "6918714856891908109", "title": "结束也是新的开始 | 七日打卡", "desc": "不知不觉7天就要结束了，自己竟然成功的坚持下来了。短暂的休整后，全新的生活将要开启，不能再像之前一样懈怠，自己要会明辨是非。今天总结下使用vue中遇到的小问题。 有的项目很简单，就没必要使用脚手架，但是通过CDN引入又会出现很多问题，下面是我工作中遇到的问题，希望对你们会有所帮…"}, {"id": "6918704019443712013", "title": "Vue 原理之从新建实例到 Diff", "desc": "本文为 Vue Diff 内容的引文，主要阐述 Virtual DOM 相关概念以及从新建 Vue 实例到 Diff 的代码流程，为 Diff 算法的学习做储备。 具体的 Diff 算法内容在后续文章中再深入介绍。→ Vue 原理之图解 Diff 流程 开篇，先了解下 Virt…"}, {"id": "6844903506378244110", "title": "vue2.0 实现一款web App---- BOSS直聘", "desc": "还在更新阶段，，"}, {"id": "6844903554637889549", "title": "[译] Vue Devtools 4.0 有哪些新内容", "desc": "几天前，Vue devtools 发布了重大更新。让我们来看看有哪些新特性与改进！🎄 现在可以直接在组件检查面板中修改组件的 data 了。 通过点击完成图标或者敲击回车键来提交你的改动。也可以通过敲击 ESC 键来取消编辑 字段内容会被序列化为 JSON 。举个例子，如果你…"}, {"id": "6967265340669558815", "title": "vue3学习笔记之应用变化（二）", "desc": "vue3 transition类名变化，watch不再支持点分割路径，自定义制定API和组件保持一致"}, {"id": "6844903955869204493", "title": "不可不知的 Vue.js 列表渲染", "desc": "vue.js 使用的是 v-for 指令来处理组件元素的循环迭代逻辑。通常它会和 v-if 配合使用，达到我们所需要的处理逻辑。 v-for 的语法形式是 item in items，其中 items 就是我们要循环的数组，而 item 则是被迭代的数组元素的别名。 我们都知道…"}, {"id": "6967277063950565407", "title": "vue3+typescript上传文件到七牛云", "desc": "项目中使用的是vite.js构建的，而且用的是typescript，网上的示例几乎没有，下面来一步步记录如何实现，七牛云的示例代码直接访问是无法访问的，这里就不挂地址了，直接看过程。 首先安装qini"}, {"id": "6907107557211537415", "title": "基于element upload的限定大小，比例的图片上传组件", "desc": "需求，限制上传的图片大小和比例尺寸1.html部分2.js逻辑部分3.样式部分4.组件使用<uploadImg@getImgInfo='getImgInfo(arguments)'></uploadI"}, {"id": "6969426495856967710", "title": "手撕Vue源码——从vue源码入口开始", "desc": "从入口开始开始 我们之前提到过Vue.js构建过程，在web应用下，我们来分析Runtime + Compiler构建出来的Vue.js，他的入口时src/platforms/web/entry-ru"}, {"id": "6844903951163195399", "title": "vue-cli 3.0脚手架，从入门到放弃（四）-UI（sass）", "desc": "为你们学习操碎心啊。。 （未完待续。。） 既然我们创建好项目了，是不是已经按不住想写代码的手了呢！ 那么我们从哪里入手好。一般来说，前端项目是由我们可见的html+css样式决定的，然后加上js构成完整的一个页面。 html就不说了，最基本的东西。页面样式的好看程度，是由css…"}, {"id": "6889990106506067982", "title": "Vue 原型链\"注入\", 修改掘金字体颜色", "desc": "之前看react能去除知乎div, 就想着vue应该也能有类似的玩法, 就试了一下..."}, {"id": "6844903968779272200", "title": "Electron + Vue + Vscode构建跨平台应用（二）Electron  + Vue环境搭建", "desc": "但是因为受到服务器影响（被墙），所以无敌的淘宝制作了cnpm,cnpm官网，cnpm是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 安装完毕后会产生一个node_modules目录，其目录下就是安装…"}, {"id": "6844903607578394637", "title": "前后端UI产品开发协作", "desc": "接口这些是没有什么限制的，文件名，架构，这些你就要和后端统一一下概述接口这些是没有什么限制的，文件名，架构，这些你就要和后端统一一下，可以采用驼峰式命名，也可以采用下滑线命名.开发文档，主要是api文档，目前用的是postman，主要是记录接口，仅做测试用.但是这远远是不足够的…"}, {"id": "6898501323193319437", "title": "vant PullRefresh组件分析", "desc": "用于提供下拉刷新的交互操作。"}, {"id": "6921595106252292109", "title": "el-select框在页面滚动时el-option超出元素区域", "desc": "问题场景：有页面内嵌了表格（含滚动条），内嵌了大量input和select，在点击select出现下拉框时，正常的情况是图1，但是在滚动表格内的滚动条时，会出现图二的情况。 导致原因：select的下拉框的元素标签不是跟随在select之后，而是在body标签下面，并且z-in…"}, {"id": "6844903636456177678", "title": "记一次nodejs+mongodb数据库项目学习经历", "desc": "在学习vue的路上从开始看api到写了几个小项目后，对vue有了一定的了解，但是一直没做过web全栈类的项目。这次跟着慕课的视频做了web全栈类项目，特此一记，来巩固下知识！ 在routes文件夹下创建users.js和goods.js分别对应/users和/goods路由。同…"}, {"id": "6844903838088953864", "title": "Vue-CLI-2.x全家桶架构，支持打包后自动部署到服务器构建案例", "desc": "今天有时间分享一些平时自己开发上的一些构建配置，我们以Vue-CLI-2.x来构建开发环境。 好，我们先来看一下我们要做哪些工作。 在过去我们都习惯使用npm或者cnpm安装依赖，因为这种操作非常方便，但是有利必有弊，有些小伙伴在将项目打包后会发现打包后的js文件非常庞大，有些…"}, {"id": "6967405418507141133", "title": "Vue的绑定原理", "desc": "1.Vue的绑定原理:其实就是 new Vue的原理 (1).先创建一个vue类型的子对象 a.引入data对象: b.引入并打散methods对象: (2).构建虚拟DOM树: a.什么是虚拟DOM"}, {"id": "6844904002019131405", "title": "你真的了解 v-model 吗？", "desc": "众所周知，v-model 是 Vue.js 中实现的一个语法糖，和 Vue.js 中推崇的单向数据流表现不一致，用于实现所谓的双向绑定。 但看似简单的 v-model 具体是怎么做到双向绑定的，为了满足下好奇心，不得不深入到源码中看一看。 v-model 的使用情景分为两种：直…"}, {"id": "6844903834368606222", "title": "Vue源码: 构造函数入口", "desc": "编译器: 把template变异为Render函数。 我们如果使用vue-loader, 那么*.vue文件模板会在构建时候预编译成JS, 所以打包完成的文件实际上不需要编译器的, 只需要引入运行时版本(体积小)即可。 如果确实需要使用完整版只需要在打包工具中配置一个别名。 它…"}, {"id": "6844903861744844813", "title": "[Vue.js进阶]从源码角度剖析vue-router（三）", "desc": "或许源码的阅读并不能像某些文章一样直接对日常开发有所帮助，它的影响是长远的，在源码中往往用到了很多 JavaScript 技巧，例如闭包，柯里化，回调，异步编程，事件循环，原型继承。而这些都是需要有足够扎实的 JavaScript 基础才能够理解的，同时在阅读的过程中可以进一步…"}, {"id": "6844903841960312845", "title": "个人对vue中生命周期的理解", "desc": "什么叫钩子函数？我认为，钩子就是随时可能或者有需要时挂到什么东西上，从而引发一些流血事件的发生。显而易见，vue中的生命钩子函数，就是随时或者说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件。需要注意的是，所有的生命周期钩子自动绑定 this 上下文到实例…"}, {"id": "6920496288609861646", "title": "Vue.js源码解析——响应式", "desc": "| .. | initData() | 获取data的所有属性名，判断是否和props,methods重名，如果不重名把data中的成员注入到vue实例 data中| | .. | initData() | 执行observe(data,true /* asRootData *…"}, {"id": "6844903703753785358", "title": "mpvue小程序开发 - 生命周期梳理", "desc": "最近在开发小程序，尝试性地使用了一下mpvue框架。 mpvue 是一个使用 Vue.js 开发小程序的前端框架。框架基于 Vue.js 核心，mpvue 修改了 Vue.js 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整…"}, {"id": "6896777102369456142", "title": "Vue响应式数据原理", "desc": "学过 vue 如果不了解响应式的原理，怎么能说自己熟练使用 vue，要是没有写过一个简易版的 vue 怎么能说自己精通vue，这篇文章通过300多行代码，带你写一个简易版的 vue，主要实现 vue 数据响应式（数据劫持结合发布者-订阅者）、数组的变异方法、编译指令，数据的双向…"}, {"id": "6844904090338607117", "title": "Vue基础之非父子组件间传值", "desc": "我们已经知道，从父组件向子组件传值可以通过在子组件中添加props实现，而子组件向父组件传值主要通过向外触发函数。 当我们的页面采用三层嵌套，颜色由浅到深并对应图中1，2，3。 那么如果我们想沿着蓝色的线传递值，是否需要将值从1-> 2-> 3这样;如果我们想沿着紫色的线传递值…"}, {"id": "6881530845161586695", "title": "深入理解Render函数和函数式组件用法", "desc": "Vue 选项中的render函数若存在，则 Vue 构造函数不会从template选项或通过el选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。"}, {"id": "6844903559092256781", "title": "Vue-cli + express 构建的SPA Blog（采用前后端分离方案）", "desc": "最近这几年的前端圈子，由于戏台一般精彩纷呈，从 MVC 到 MVVM，你刚唱罢我登场。 backbone，AngularJS 已成昨日黄花，reactjs 如日中天，同时另一更轻量的 vue 发展势头更猛，号称兼具了 angularjs 和 reactjs 的两者优点。 移动端…"}, {"id": "6945046350820016159", "title": "组件", "desc": "为了可以复用，因为每次复用的时候，就会重新调用函数，得到一个新的对象，这样就避免了组件之间的数据相互影响。 就算是复用同一个组件，但每一个组件之间是不同的实例。 创建完组件之后页面还是没东西，他都不知道组件往哪里放。 所以，创建完之后还要注册，注册完之后才能使用组件。 注意：注…"}, {"id": "6959939047061979143", "title": "手写MiniVue", "desc": "本文内容也输出于拉勾教育，通过手写一个简陋版的Vue，梳理了Vue的核心工作流程，也明白了哥哥模块的作用"}, {"id": "6948355685973229598", "title": "Vue 组件传值：自定义事件 🆚 修饰符 .sync", "desc": "前言.sync 是「实现 Vue 组件间传值」的一个语法糖先说「实现组件传值的通用方案 —— 自定义事件」再说「如果用 .sync 来简化组件传值」通过「自定义事件」实现组件间传值思路数据从父组件传入"}, {"id": "6971973314831417358", "title": "Vue全家桶学习笔记（三）——组件", "desc": "写在前面 最近看尚硅谷的视频有点懵逼了，直接跳过了组件来讲用CLI搭建项目了，找到了coderwhy老师的vue教学视频，好好学了一下组件。 组件的创建及使用步骤 创建组件构造器对象 Vue.exte"}, {"id": "6844904079500509198", "title": "vue双向绑定实现之源码解析", "desc": "Vue的响应式数据都会有一个__ob__的属性作为标记，里面存放了该属性的观察器，也就是Observer的实例，防止重复绑定。 所以判断数据是否可响应，看当前数据是否包含__ob__属性 如果当前浏览器支持__proto__属性，则可以直接覆盖整个属性为VUE重写的数组对象，如…"}, {"id": "6844903733847916557", "title": "基于Vue-Cli 打包自动生成/抽离相关配置文件", "desc": "基于Vue-cli 项目产品部署，涉及到的交互的地址等配置信息，每次都要重新打包才能生效，极大的降低了效率。我们的目的是让项目实施的小伙伴重新快乐起来。网上实现的方式，都是半自动化的，还需要重新修改。 研发人员无痛感：对于产品研发人员来说，不需要增加额外的打包成本，基于Vue-…"}, {"id": "6844903591392575495", "title": "基于vue的在线聊天软件", "desc": "Document中文English功能列表1.登录注册2.添加好友&删除好友3.发送消息4.重新连接5.消息重发6.上传头像&个人信息7.附近联系人8.国际化待开发1.朋友圈2.优化消息重发机制效果登"}, {"id": "6844903506801852429", "title": "影子节点ShadowDOM", "desc": "上面这是最简单的视屏标签，里面有默认的音量等按键。在源代码中根本没有一点痕迹。那这些节点是从哪里来的？ 简而言之，Shadow DOM 是一个 HTML 的新规范，其允许开发者封装HTML组件（类似vue组件，将html，css，js独立部分提取）。 非常的简单好用，但是这些东…"}, {"id": "6874494525226614792", "title": "Vue中的css作用域", "desc": "PostCSS给所有的dom都添加了一个独一无二的动态属性，给css选择器也添加了一个对应的属性选择器，这样就可以让样式只作用于该属性的dom元素（组件内部的dom）。 有些像 Sass 之类的预处理器无法正确解析 >>>。这种情况下你可以使用 /deep/ 操作符取而代之——…"}, {"id": "6844903927415046157", "title": "前端小纠结-axios.js的实战经验", "desc": "原文地址axios.js的流程图axios.js版本问题拦截器interceptorinterceptor的返回值类型具体细节看源码分析走心篇interceptor的执行顺序把拦截器放入数组chain"}, {"id": "6903860377990365192", "title": "vue混入(mixin)的冲突处理及特点", "desc": "混入(mixin)关于选项冲突处理什么时候要用mixin?mixin的缺点使用vue-cli创建项目使用mixin"}, {"id": "6909273559105798157", "title": "vue项目中使用api的优化", "desc": "一般使用api的方式编写自定义的axios.js文件，包括请求发送和响应拦截的一些配置（一般我会配置请求超时时间、发送请求时的token、处理响应时的异常信息）引入axios.js，定义接口在页面中使"}, {"id": "6943210336027672590", "title": "vue常见面试题(2)-补充", "desc": "当v-if 与 v-for 一起使用时，v-for 比v-if 优先级高,如果连用的话会把 v-if 给每个元素都添加一下,会造成性能问题，所以不推荐v-if和v-for在同一个标签中同时使用。 1、ul和li搭配使用，或者是渲染父级标签下的子标签。 2、使用过滤器将v-if中…"}, {"id": "6844903566671347719", "title": "组件库webpack构建速度优化经验总结", "desc": "在公司的主要工作是组件库（基于vue的ui组件库，类似element-ui）的开发，也已经有两个多月，期间一直觉得项目的开发构建太慢，每次开发打开开发环境需要 40s 左右，简直不能忍。前前后后尝试了各种优化手段，但是都不理想。终于在今天，找到了问题所在，构建速度提升了 50%…"}, {"id": "6844903734179266574", "title": "推荐一个很好用的vscode插件：一个可以给出vuex中store定义信息的vscode插件", "desc": "在使用Vuex管理自己应用的状态时，因为状态过多，为了正确性每次都要打开vuex定义文件，去复制定义时的函数名或者状态名，无形中就浪费了许多时间，为了解决这个痛点，开发了这个vscode插件。 在扩展中搜索 VueThis$Store,安装即可。 示。当你的 vscode 插件…"}, {"id": "6997951152750854181", "title": "VueJs - 过滤器", "desc": "在接触ElementUI学习Vue的过程中，有看到关于过滤器(filters)的使用。在此对过滤器的使用做个总结，以备自己和供他人参考。"}, {"id": "6844904049980997646", "title": "基于 Flask 和 Vue 的词云生成应用", "desc": "这是一个前端用 Vue，后端用 Python 的 Web 框架 Flask 开发的词云生成应用，代码已上传到 flask-vue-word-cloud。写这个小项目的起因是最近团队年终述职，有一些大佬的 PPT 上用了词云来展示自己团队一年的工作成果。还有大佬说不要守着自己的一…"}, {"id": "6967379968481296420", "title": "runtime-compiler和runtime-only", "desc": "我们在创建vue-cli的时候，会遇到runtime-compiler和runtime-only的选择，在这里简单介绍一下两者的区别。"}, {"id": "6889987666210488328", "title": "Vue组件通信方式的使用总结和对比", "desc": "前言：组件通信是最基础常用也是非常重要的知识，项目组件化，功能模块化都离不开组件之间的通信传值。本篇系统来整理一下用的比较多的7种方式。 这是我们最常用的方式，它能够满足基本和绝大多数需求。 Props（父传子）：单向数据流由父到子。props可以是数组或对象，用于接收来自父组…"}, {"id": "6844904181396930573", "title": "学习vue源码（1） 手写与事件相关的实例方法", "desc": "这5个函数的作用就是向Vue的原型上挂载方法。 当函数initMixin被调用时，会向Vue构造函数的prototype属性添加_init方法，执行new Vue()时，会调用_init方法。 这四个方法实在eventsMixin中挂在到Vue构造函数和prototype属性中…"}, {"id": "6844903810788229127", "title": "Vue 服务端渲染 & 预渲染", "desc": "关于 Vue 的 SPA 说的已经太多了（在我之前的多个项目中，已经多次使用到了，包括 sell，music，vue-cms 等多个项目），它为我们带来了极速的开发体验，极强的开发效率。可能唯一有些许不足的就是：当我们对 SEO 很在乎的时候，我们如何去处理 SEO 的需求？ …"}, {"id": "6844903587722575879", "title": "webpack中的热刷新与热加载", "desc": "相信大部分的vue开发者都是从vue-cli开始的，很多初学者欢快的跑着vue项目却不敢改随意改变vue-cli的配置（毕竟webpack确实很复杂，vue-cli也做了很多工作来优化初学者的体验）。 相比之下react没有提供一个比较健壮的脚手架了(至少没有明显地被我找到，望…"}, {"id": "6844903725631275015", "title": "Vue一个案例引发「动画」的使用总结", "desc": "项目开发中动画有着很重要的作用，而且也是用到的地方非常多，例如：鼠标的进入离开，弹窗效果，组件的显示隐藏，列表的切换等等，可以说我们网页上的动画无处不在，也有人说了，这些东西也可以不使用动画。 对，你说的没错可以不使用，但是，首先你要说服你的产品经理咱能不能简单点，不搞这么多虚…"}, {"id": "6887462943835979784", "title": "我写了一个青铜版vue", "desc": "observe 方法的作用是遍历对象，在内部对数据进行劫持添加 get 和 set方法，把劫持的逻辑单独抽取成 defineReactive 方法，observe 方法作用是对数据类型验证，符合需求后会调用Observer方法进行属性响应式，然后再循环对象每一个属性进行劫持，当…"}, {"id": "6913834421741158413", "title": "vue中 iframe 引入 本地静态html文件，vue-cli2与vue-cli3引用的差异。", "desc": "在写个人网站的时候，需要用到 iframe 引用本地静态的 html 文件，发现引用方式的一些差异，在此分享一下。 在vue-cli 2.0 构建的项目中，如果要使用 iframe 引用本地的静态 html 文件，静态文件需要放置在和 src 同级的文件加夹 static 中。…"}, {"id": "6844904093786308621", "title": "TS + Vue 构建vuex和vue-router模块", "desc": "vuex模块首先,我们要在store文件夹内建立几个文件这几个文件是vuex里的几个模块,每个文件都导出一个对象;然后在index.ts文件下引入这些对象,如下代码:然后我们在modules文件夹内创"}, {"id": "6951764204810420254", "title": "Vue生命周期", "desc": "什么是生命周期？每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周"}, {"id": "6915018376851144718", "title": "Vue3.0实现todoList案例", "desc": "1. ToDoList功能列表 3. 添加待办事项 双击进入编辑状态，按esc退出编辑，按enter提交编辑，如果删光了文本，则删除这一项。 7. 切换待办事项"}, {"id": "6912259850667982861", "title": "⑦ Vue的动态数据计算", "desc": "如图所示： 计算属性computed与mefthods是同级，将我们在methods中定义的totalProice方法移到computed中，名称改为totalProice1。 当在控制台去执行app.fullName = 'The Vue'的时候，Vue 会先调用 sette…"}, {"id": "6978365719121494023", "title": "第05期 任务界面", "desc": "1、任务列表 src/pages/Todo.vue 先设置背景颜色，并且填充整个页面 在Quasar组件库中，找到任务列表的组件，复制代码 绑定数据源及列表项的循环 2、删除任务 添加完成任务时的样式"}, {"id": "6844903638033252360", "title": "Vue mixins浅谈使用方法及需要注意的点", "desc": "大家好啊，我又来了这次继续我们上周的话题Vue mixins，经过几天的研究发现Vue mixins并不能代替Vuex全局状态管理或者eventvue传递参数，究竟为什么请先看下面的讲解。 混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可…"}, {"id": "6844903604076150797", "title": "Vue组件通信深入Vuex", "desc": "上一篇博客（Vue组件通信深入）中，介绍了多种方法来实现组件之间的通信，但是涉及到深层嵌套和非直接关联组件之间的通信时，都会遇到无法追踪数据和调试的问题，而vuex就是为解决此类问题…"}, {"id": "6844903506676023310", "title": "Vue + TypeScript 新项目起手式", "desc": "TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。 TypeSc…"}, {"id": "6964262845840097294", "title": "vite+vue3.0项目搭建", "desc": "1 项目初始化 运行完以上命令之后,一个vue3.0的项目就可以了，目录如下： 那么接下来我们就参照vue2.x的全家桶来从零填充一下项目基础模块: 2 vite.config.js配置 3. vue"}, {"id": "6882565127246184455", "title": "vue-print-nb实现打印功能踩坑记", "desc": "安装与使用main.js中全局引入页面使用方式（其它详情见npmjs.com）页眉页脚字符串问题打印预览时发现页眉页脚会有页码网址undefined之类的字符直接利用样式解决，优点是简单粗暴，缺点是页"}, {"id": "6844904163583721479", "title": "pdf.js实战，含水印、电子签章解决方案", "desc": "项目涉及到移动端查看电子合同的问题，前前后后试了三种方案，真是一步一个坑，三种方案各有各的优点，不水，直接上代码，按照自己的需求选择。 直接使用vue-pdf插件，核心的代码是pdf.js，只不过就是自己封装了一下，优点是方便快捷，缺点是无法加载电子签章。 使用非常方便，尤其是…"}, {"id": "6950974720015597604", "title": "手把手教你玩转render函数「组件封装-dynamic-select」(上）", "desc": "先来看下效果👇上面展示了select组件的两种很常见的使用常见１．表格的过滤(根据项目过滤数据)２．表单的使用(基于项目来创建单据)组件用例先给份用例了解下组件大致提供那些功能支持格式化选项数据自定义"}, {"id": "6981448822861856776", "title": "formulate-el-ui 项目介绍", "desc": "formulate-el-ui 为 vueformulate 项目加上了 element-ui 皮肤，可以让你在 element-ui 项目中使用 vueformulate 时保持风格统一 语义化版本"}, {"id": "6844903657515794446", "title": "小程序开发实践总结", "desc": "css样式不能引用本地图片资源，只能引用线上资源(background-image)，引用本地图片资源只能用<image>标签。 {{}}不能执行函数方法，{{}}只支持基本的简单运算和ES6拓展运算符。如价格格式化这种常用的处理，只能在js代码中处理好然后再模板中渲染。 可以…"}, {"id": "6844903951389851655", "title": "两万字长文-电商sku组合查询状态细究与实现", "desc": "最近做到一个需求，需要做一个类似于京东或者淘宝等电商的商品详情页，其中有一个功能就是商品SKU的选择查询问题如上图，网络类型、机身颜色、套餐类型、存储容量这些每一个都是一个SKU属性，当选择好了所有的"}, {"id": "6992388292234706957", "title": "Vue3.x的Compositon API  |  8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，给自己点赞哦！新的开始，新的挑战，加油！！！ Compositon API 学习途径 RFC(Request For Comments) Composition API"}, {"id": "6844904085200601102", "title": "从0实现一个single-spa的前端微服务（下）", "desc": "上一篇文章：从0实现一个single-spa的前端微服务（中）中我们已经实现了single-spa + systemJS的前端微服务以及完善的开发和打包配置，今天主要讲一下这个方案存在的细节问题，以及qiankun框架的一些研究对比。 single-spa的三个生命周期函数bo…"}, {"id": "6957965225471508493", "title": "Vue3使用mitt进行组件通信", "desc": "Vue3.x全家桶加入的新品——mitt.js事件触发器。它足够小，支持全事件监听和移除，不依赖底层JS框架，Vue/React都可以使用"}, {"id": "6876510903357931534", "title": "前端 真一键打包自动化构建部署", "desc": "前段时间在掘金已经有个小伙伴分享了他的前端自动构建方式👉前端一键自动部署工具，我也来分享一下我的方式吧，与他的相比，使用方式和技术都差不多，他的还更漂亮，哈哈哈，我的也并没有啥优势，主要是做个分享，让各位小伙伴有更多的选择。本篇文章主要是上一篇文章👉分享一下我用VueCli…"}, {"id": "6882214189184761869", "title": "翻了翻element-ui源码，发现一个很实用的指令clickoutside", "desc": "指令(directive)在 vue 开发中是一项很实用的功能，指令可以绑定到某一元素或组件，使功能的颗粒度更精细。今天在翻 element-ui 的源码时，发现一个还挺实用的工具指令，跟大伙分享一下。 该指令的源码在 src/utils 下的 clickoutside.js。…"}, {"id": "6900702340412604430", "title": "如何在Vue中使用Mixin来管理异步数据的实践思考", "desc": "不知不觉写文章没有以前频繁了，主要是转到React后，花费了一些精力从使用React到搞懂，再加上花了大价钱入手的红宝书不能不看所以说这个月除了工作时间都是在看红宝书计划。先沉淀下自己。 为什么会有一个异步数据的管理解决方案？我们为什么要去进行管理它？大家都知道在很久之前，我们…"}, {"id": "6998425564893675551", "title": " vue-element-admin 项目代码学习 - 01 -  main.js", "desc": "vue-element-admin 项目代码学习- 01 main.js，入口文件代码讲解。 系列文章第一篇。从入门到放弃~"}, {"id": "6844903762251743246", "title": "VUE单页应用骨架屏方案", "desc": "简单的说，骨架屏就是在页面未渲染完成的时候，先用一些简单的图形大致勾勒出页面的基本轮廓，给用户造成页面正在加载的错觉，待页面渲染完成之后再用页面替换掉骨架屏，从而减少页面白屏的时间，给用户带来更好的体验。 可以看到，DOM里面有一个div#app，当js被执行完成之后，此div…"}, {"id": "6994056942062665759", "title": "vue中proxy劫持数据的依赖收集与触发", "desc": "前言 写这篇文章的痛苦程度堪比申论，恰逢追的小说打更人也完结了，以前觉得这个作者每天就更个几千字，是不是能力不行啊。现在再看看自己，妥妥一个粗鄙的码农，写个代码读后分析都写不出来。"}, {"id": "6844903879100858382", "title": "「进击的前端工程师」从源码解读Vue生命周期，让面试官对你刮目相看", "desc": "在我们的实际项目中，与Vue的生命周期打交道可以说是家常便饭。掌握Vue的生命周期对开发者来说是特别重要的。那么如果能够从源码角度理解Vue的生命周期，对我们的开发和成长会有进一步的提升。 本文从基础知识开始讲起，分为基础知识和源码解读两部分，对基础知识已经掌握的开发者可自行跳…"}, {"id": "6982519889378410503", "title": "TS+Vue3配置并衍生出一些面试题", "desc": "了解怎么配置TS+Vue3+vue-router+vuex，并在配置的过程中总结出一些面试题，主要包括provide/inject替代vuex的使用方法及不易注意的细节，和setup的细节点"}, {"id": "6906791889777721352", "title": "每个人都需要github，每个人都需要图床，so，github = 图床", "desc": "说起来，图床应用这东西，在github上有很多，但是大多都是基于一些云厂商免费的静态存储服务来实现的，比如七牛云的静态存储，考虑到这些云厂商的赚钱欲望，所以我并不放心将他们作为图床的服务提供商。 也有支持github的，比如picgo，不过涉及到personal token，我…"}, {"id": "6981256571997126669", "title": "vue中element的DatePicker组件日期限制", "desc": "项目迭代过程中，碰上一个需求，table表格，其中一列计划开始时间一列计划结束时间，使用的是不同的日期选择器，开始时间会限制结束时间只能选相同日期以及之后的日期，反之结束时间也如此。项目用的"}, {"id": "6844903520861159437", "title": "WEEX-EROS | 移植自网易严选 app demo", "desc": "本项目是根据 yanxuan-weex-demo，在其基础上使用eros编写完成，在此感谢yanxuan项目作者zwwill的支持。 根据 eros 文档配置好所需的所有环境。文档地址 eros install 安装完项目后 ios 端的 xcode 会自动打开，安卓导入 pl…"}, {"id": "6923009566994841613", "title": "vue 全局插件制作", "desc": "因为业务需求，制作了一个全局的活动弹窗，归纳一下主要用到的知识点。 值得注意的是，目前这个插件多次调用会多次产生dom，考虑到可能需要弹出不一样的东西，暂时没有处理。"}, {"id": "6922855909546786830", "title": "Vue的MVVM模式响应式原理之observe、Observer和defineReactive", "desc": "笔者会竭尽所能的减少复杂逻辑描述，和需要阅读的时间。 这好像是所有学习Vue源码中最开始的部分。笔者初学前端半年，最近认真学习了一下MVVM模式的实现。希望把知识简单的呈现给读到的朋友们。这个部分的知识其实不复杂，主要就是围绕着Object.defineProperty()这个…"}, {"id": "6844903938005663751", "title": "从业务角度看如何设计Dialog、Modal组件", "desc": "唠叨一个工作中让人不太爽的场景，现在可以的UI组件库一大堆，但在实际业务开发中他们提供的Dialog组件（有的库叫做Model，文中统一称作Dialog）却没有一个用的顺手。怎么回事呢？ 我们先看一个业务场景设计。 把Register类copy一下造一个Login类，然后修改r…"}, {"id": "6844903543950802952", "title": "大白话Vue源码系列(05)：运行时鸟瞰图", "desc": "Vue 运行时这一块是非常有意思的，不像 Vue 编译器那么枯燥，这里面有大量的实用技巧和设计思想可以学习。使用过 Vue 的小伙伴应该对 Vue 【响应的数据绑定】（也叫双向绑定）的印象非常深刻，在修改了数据之后，视图就会实时得到相应更新，这无疑极大地减轻了开发者的负担，使得…"}, {"id": "6844903621897781262", "title": "从最简单的数据劫持了解vue双向绑定原理", "desc": "当我学习vue时，带给我最大的感觉是双向数据绑定太方便了，不用操作DOM，视图会根据数据的改变而改变。所以我感觉学习vue的同学有必要了解一下它的实现原理 已经了解到vue是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过Object.defineProperty()…"}, {"id": "6844903646572838919", "title": "使用继承思想，去开发一款组件（element-ui collapse组件为例子）", "desc": "然后就报错了，呼~ 报错在于，collapse-item组件。 可以看到计算属性isActive通过父级activeNames来定义的，然而现在组件的层级结构是这样。 collapse-item的父级是draggable， 肯定拿不到原本collapse的父级。 通过this.…"}, {"id": "6935638962958991396", "title": "SpringBoot+Vue豆宝社区前后端分离项目手把手实战系列教程11---退出登录及页脚功能实现", "desc": "本项目实战教程配有免费视频教程，配套代码完全开源。手把手从零开始搭建一个目前应用最广泛的Springboot+Vue前后端分离多用户社区项目。本项目难度适中，为便于大家学习，每一集视频教程对应在Github上的每一次提交。"}, {"id": "6844903968796049422", "title": "【源码解析】创建Vue实例时干了什么？", "desc": "在阅读本篇文章之前建议阅读 【源码导读 】在new Vue()之前，Vue是什么样子的？。 未挂载状态的vue实例，挂载过程将在后面分析。 在初始化data props 之前初始化 用于覆盖。 【敬请期待】... 感谢各位的阅读，错误是在所难免的，若有错误，或者有更好的理解，请…"}, {"id": "6844903864852840455", "title": "前端路由实现 history|hash", "desc": "在技术的世界，没有奇迹，只有精妙的，令人咂舌的技术运用。 ---- 南方小菜语 再加上一些数据库加密避免http无状态而利用session等等blablabla的小点。 加大服务器的压力，代码冗合。 当然，前端路由也存在缺陷：使用浏览器的前进，后退键时会重新发送请求，来获取数据…"}, {"id": "6854573218926166024", "title": "Vue造轮子——Grid布局详解", "desc": "我最近在学习vue源码的同时，一直在不停的造Vue轮子，目前了Button、Input两个最基础的轮子，也已经做了一些小的测试，在这个过程中，我发现，其实单纯比用组件库，完成一个简单的项目更加考验vue的基础知识呢~。"}, {"id": "6898105841887641613", "title": "vue-next 响应式模块源码分析 -- effect 篇", "desc": "终于到了心心念已久的 effect 篇了，真可谓千呼万唤始出来，费了老大的劲。 此篇章主要分析三个部分 createReactiveEffect 如何创建侦听函数; track 如何收集侦听函数(依赖收集)； 以及 trigger 如何触发侦听函数执行依赖更新。这三部分是该篇的…"}, {"id": "6953600667508293669", "title": "手把手教你Vue的源码解析", "desc": "Vue.js 框架源码与进阶 一、手写 Vue Router、手写响应式实现、虚拟 DOM 和 Diff 算法 1.vue-router的实现原理 1.1 路由规则中的props属性，可以设置动态路由"}, {"id": "6957702481677647903", "title": "Vue 的核心竞争力：数据双向绑定", "desc": "1.原理 View的变化能实时让Model发生变化，而Model的变化也能实时更新到View。 Vue采用数据挟持&发布-订阅模式的方式，通过ES5提供的Object.defineProperty()"}, {"id": "6844903970079522830", "title": "基于 requirejs、vue全家桶、ant design 实现的 antd-vue-pro(模仿版)", "desc": "如果您对项目源码感兴趣，在阅读源码之前，我已经默认了你已经熟练的掌握了HTML/JAVASCRIPT/CSS3 中级编程知识，熟悉 Vue.js，并且对其异步组件加载原理有了深入的认识，对 Vue 组件 template 中使用 html 模板的注意事项（不能使用PascalC…"}, {"id": "6844903597205880845", "title": "react配合antd组件实现的管理系统demo", "desc": "前言：此文需要有一定react，redux基础，具体学习资料请科学上网。 webpack的import动态加载的模块的函数，import(参数)，参数为模块地址。 注意：import后会返回一个promise对象。 本demo使用的是router4,官方文档演示为单行Route…"}, {"id": "6988035515526152229", "title": "Vue学习笔记 - 组件化开发 - 组件基础", "desc": "组件化开发思想 标准：统一的标准规范 分治：不同功能封装到不同组件 重用：代码重用提高效率 组合：组件组合形成产品 组件基本使用 组件的创建与使用 创建一个组件： 组件使用： 注意事项 1、data必"}, {"id": "6844903555338338312", "title": "基于Vue.js的简单的svg进度条", "desc": "svg-progress-bar发现bug或者有什么不足望指点,感觉不错点个star吧。"}, {"id": "6918992812688179208", "title": "scrollIntoView()方法导致整个页面产生偏移", "desc": "今天在做页面UI改版的时候发现，我之前使用的是dom.scrollIntoView(); 使得点击右侧题目编号的时候，让左侧题目滚动到页面可视区域。 但是现在有个问题就是，当点击题目编号的时候，除了题目会滚动到可视区域，整个页面也会稍稍往上滚动，导致页面错位。 如下图所示，当我…"}, {"id": "6985430571052695589", "title": "【学习笔记】Vue中使用cypress进行组件测试", "desc": "【学习笔记】Vue中使用cypress进行组件测试，cypress支持Vue3、Vue2，本篇学习记录使用Vue2版本"}, {"id": "6844904013352140814", "title": "基于single-spa的vue微前端项目", "desc": "微前端的概念是从后端的微服务的迁移过来的。将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署。 微前端只在前后端分离的单页应用中讨论才有意义。单页应用的核心是：在特定的时刻将一段由js运行生成的html代码片段插…"}, {"id": "6979523938929868836", "title": "Vue 3 生命周期", "desc": "在组件化的框架中，比如Vue为组件定义了生命周期这个概念。每个组件实例在被创建时都要经过一系列的初始化过程，比如模板编译、更新、销毁等。"}, {"id": "6844903587739336717", "title": "Vue CLI 3.X 初体验", "desc": "接下来我们尝试用typescript写点东西，体验一下。点开component目录下的HelloWorld.vue文件，发现编辑器居然画了红线，这不科学啊"}, {"id": "6844903864861196302", "title": "前端面试准备---Vue篇", "desc": "v-show为false时，通过js设置display为none;为true时，设置display:''; 这样为了让js设置的display属性失效。 v-if是通过js手动添加或删除dom元素。 所谓数据双向绑定，就是指视图层和数据层相互影响，比如input框输入数据，存储…"}, {"id": "7000194235026636814", "title": "vue中Promise理解", "desc": "1.promise作用？ 1、主要用于异步计算 2、可以将异步操作队列化，按照期望的顺序执行（简单理解的话就是异步请求变成同步请求），返回符合预期的结果 3、可以在对象之间传递和操作promise，帮"}, {"id": "6943530727258456100", "title": "Vue3+Typescript 搭建PC端组件库", "desc": "本项目技术栈为vue3+typescript，PC端组件库。 项目gitee地址 本文将从环境搭建开始，一步步完成组件库的打包工作。组件库内组件不定期更新。 1. 代码管理方式 组件库采用monorepo的代码管理方式。 monorepo 是管理项目代码的一种方式，指在一个项目…"}, {"id": "6968985129163161608", "title": "Vue事件处理指南– Vue3更新", "desc": "Vue事件处理是每个Vue项目的必要方面。 它用于捕获用户输入，共享数据以及许多其他创造性方式。在本文中，会介绍基础知识，并提供一些用于处理事件的代码示例。 它仅包含我认为最有用的技巧/方法。"}, {"id": "6985532237580402695", "title": "Vue的v-show不能是数组的元素值", "desc": "在需要用数组元素的值实现v-show的切换时，如果数组元素是bool值，则无法实现v-show的展示和隐藏。但如果数组中的元素是对象，就可以实现展示和隐藏"}, {"id": "6956523058157305864", "title": "vue3.0中的响应式钩子是如何实现的", "desc": "先来聊聊Vue3.0的变化 Vue3.0相比Vue2.0发生了翻天覆地的变化，从设计理念，到架构模式都发生了变化，笔者列入最核心的变化 diff设计变化，将dom渲染做到极致 优化静态变量提升，提高无"}, {"id": "6844903607075078158", "title": "vue-quasar-admin  一个包含通用权限控制的后台管理系统", "desc": "Quasar-Framework 是一款基于vue.js开发的开源的前端框架, 它能帮助web开发者快速创建以下网站：响应式网站，渐进式应用，手机应用(通过Cordova)，跨平台应用(通过Electron)。 Quasar允许开发者在只写一次代码的情况下发布到多个平台 web…"}, {"id": "6844903565777960974", "title": "基于Vue开发一个日历组件", "desc": "2.23修复了2026年2月份会渲染多一行的bug，谢谢@深蓝一人童鞋提出的bug，解决方案是给二月份的日历做特殊处理，new Date(year, month+1, 0).getDay() === 6时不会再渲染后面的日期。 下面是借鉴px2rem模式，写的基于vw为主单位的…"}, {"id": "6844904136983445518", "title": "前端部署项目到服务器", "desc": "node.js其实上学的时候学过一些，但是学过的知识全都还给老师了，之后走了前端这条路，不得不拾起node,年前架构师让我部署项目，我一头雾水，之前也没有接触过部署。最后稀里糊涂在同事的帮助下用nginx反向代理了一下，勉强算是部署了。这次因为项目需求，再加上确实也想学习一下部…"}, {"id": "6919779057366368270", "title": "vue3.0封装轮播图组件", "desc": "    接着上一篇文章，熟悉vue3.0的基本用法，和使用一段时间以后，开始准备开发适用于vue3.0使用的pc端的组件库。会陆续跟新一些组件库的写法和注意事项，有兴趣的同学可以多多关注哦，不多bb，"}, {"id": "6874426465060913166", "title": "基于openlayers、cesium实现二、三维地图切换", "desc": "本文介绍如何在普通2d的gis项目里实现地图的二、三维切换。二维地图引擎市面上比较多，比较有代表性的像openlayers、leaflet等。三维地图目前比较流行的开源方案有cesium，它本身是基于webGL实现的地图引擎。 我之前写过一篇总结，是基于vuecli2.0实现的…"}, {"id": "6954245046690381831", "title": "80行代码实现运行时Vue骨架屏🏆", "desc": "作为spa中路由切换的 loading, 结合组件的生命周期和ajax请求返回的时机来使用.（ 作为loading 使用）。作为与用户联系最为密切的前端开发者，用户体验是最值得关注的问题。"}, {"id": "6844903649529823240", "title": "Vue 全站缓存二：如何设计全站缓存", "desc": "从早期粗暴得将 css、js 资源设定浏览器本地缓存，到后来小图标合并成大图节省请求资源，还有动态请求304状态判断，然后 ajax 开启 web2.0 时代， pjax 大放光彩，到如今 vue.js 等前端框架的繁荣盛世，所有的这一系列发展，我认为，提速是一个核心驱动力。 …"}, {"id": "6867330846194892808", "title": " vue-ssr + vue-router + vuex 搭建项目", "desc": "最近学习了 vue-ssr 服务端渲染，为了加深记忆，将使用 vue-ssr 搭建一个简单项目。 接下来就是 webpack 打包配置工作，因为存在两个 entry 入口，所以配置文件可以分成 base、client、server 三个文件，最后会打包出 Server Bund…"}, {"id": "6967234233332924447", "title": "v-slot插槽实践用法讲解", "desc": "当声明的子组件需要在某个位置留出一段空间，让调用子组件的父组件自己扩展维护时，就需要用到vue的插槽概念 v-solt。 v-solt分为三种类型： 1.匿名插槽(也叫默认插槽)，不需要命名,并且每个"}, {"id": "6856661502053744654", "title": "Vue3响应式原理", "desc": "1.如果喜欢本文，就点个赞支持下吧，你的「赞」是我创作的动力。 2.扫码即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。"}, {"id": "6925030198370893832", "title": "手撕Vue源码全过程(中)---数据驱动界面更新", "desc": "数据驱动界面更新效果"}, {"id": "6844903733432696840", "title": "【vue插件篇】vue-form-check 表单验证", "desc": "##vue-form-check（基于vue的表单验证）安装引用调用Component"}, {"id": "6930243603713228813", "title": "vue-cli 3使用vue-bootstrap-datetimepicker日期插件", "desc": "最近打算使用vue并结合前端工程化体系重构之前的一个Demo，其中有一个功能是使用bootstrap的datepicker插件选择查询日期。在网上找到了一个基于vue扩展的datepicker插件：vue-bootstrap-datepicker。这篇博客主要介绍在使用vue-…"}, {"id": "6844903578021150734", "title": "mixins,自定义指令,render函数(待研究填坑),过滤器", "desc": "混入(mixins)自定义指令render{挖个坑}过滤器"}, {"id": "6844904069278990350", "title": "Vue基础之组件传参&小知识点", "desc": "那么为什么没有将模板内的<tr>显示在页面。 那么我们在实例vm中加上el:\"#root\"。问题就解决了！ 这里的组件 <row> 跳出 <tbody> 和 <table> 在同级了。 H5编码规范中规定：在<table>内有<tbody>，而<tbody>内又必须为 <tr>…"}, {"id": "6844904083115999240", "title": "Vue 更新Data数据页面无反应问题", "desc": "问题描述更新了data里的数据，页面无同步变化原因分析原因1：存在this指向问题，没有真正更新到data原因2：Vue不能检测对象属性的添加或删除原因3：更新的层级太深解决方法处理原因1：存储外部环"}, {"id": "6916806624636043272", "title": "Vue实战时用到的API(三)：$event", "desc": "可以看到 $event 竟然有着这么多的东西，首先是事件的类型，这里是鼠标事件。还有点击的位置等等，这里给大家提一个比较常用的属性，也就是 $event.target 。"}, {"id": "6844903588334927880", "title": "bing Map 在vue项目中的使用", "desc": "拥有全球数据库国内好像就只有百度地图有，高德、搜狗、腾讯的都不行，但是由于百度地图的数据更新不及时，所以在做相关项目要用到国外数据的时候，最好还是推荐使用bingMap。 解决“Mirosorft is not defined”的错误，只要在项目中保证调用地图之前，能够正确引入…"}, {"id": "6844903876584275976", "title": "Vue nextTick 变迁史", "desc": "官方说明：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。 主线程之外，还存在一个\"任务队列\"（task queue）。只要异步…"}, {"id": "6936519603694600228", "title": "Raining-UI 一个小白做UI的制作记录（持续更新）", "desc": "完成官网创建。"}, {"id": "6936769679306260511", "title": "VUE3 项目开发实战入门系列 （4.-组件和样式）", "desc": "Vue3的单文件组件在结构上和Vue2并无区别，都是由template | script | style 3个部分组成，以下就是一个普通的单文件组件结构。 但是为了方便项目开发，我们需要组件具备以下功能。 下面来测试下效果，新建一个按钮组件 src/components/CtB…"}, {"id": "6844903825136943118", "title": "Vue2.0源码阅读笔记（二）：响应式原理", "desc": "Vue是数据驱动的框架，在修改数据时，视图会进行更新。数据响应式系统使得状态管理变的简单直接，在开发过程中减少与DOM元素的接触。而深入学习其中的原理十分有必要，能够回避一些常见的问题，使开发变的更为高效。 Vue使用观察者模式（又称发布-订阅模式）加数据劫持的方式实现数据响应…"}, {"id": "6844903745604550669", "title": "『 深入 VUE 』响应", "desc": "给定 a 和 b 两个参数，要求无论 a 如何变化，b 永远等于 a 的 10 倍，如何实现？ 即如下效果： 在每次改变 a 的值之后手动更新 b 的值，这是山顶洞人的做法，我们想要的是 a 的值改变之后，自动执行 b 的改变函数。 我们可以维护一个 state 对象： 然后每…"}, {"id": "6844904096575537160", "title": "在Vue.js中使用TypeScript", "desc": "此时，你的vue项目已经有fully-typed的可能了，当然也会有更好的自动补全以及错误提示。 为了更好的确定类型，可以创建例如interfaces这样的文件夹，充分利用ts的接口和类来使项目有更好的组织结构，可读性和维护性。 其实当然也可以不使用class风格啦，这样的话，…"}, {"id": "6844903558140133383", "title": "如何去开发一个webApp", "desc": "Vue.js 不支持 IE8 及其以下版本，因为 Vue.js 使用了 IE8 不能模拟的 ECMAScript 5 特性。 Vue.js 支持所有兼容 ECMAScript 5 的浏览器，一般都会推荐使用NPM进行Vue 的安装。 vue的安装依赖于node.js,要确保你的…"}, {"id": "6904180986397851656", "title": "vue中金额格式化 失去焦点格式化 获得焦点去格式化 全局注册", "desc": "想要全局使用还需要在mine.js中use注册一下下边是使用方法(由于在template中，所以不需要加this)"}, {"id": "6916433672820228110", "title": "解析snabbdom源码,理解virtual dom 实现", "desc": "文档对象模型 (DOM) 是HTML和XML文档的编程接口，将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合， 简单的说，DOM就是解析文档，将web页面和脚本或程序语言连接起来。更多内容可以参考MDN中对DOM的定义 以前直接使用 DOM API 比较繁琐，…"}, {"id": "6916413715638304782", "title": "Vue生命周期 $nextTick", "desc": "created (实例创建后被调用) 此时,实例已完成以下的配置：数据观测，属性和方法的运算，watch/event 事件回调。 beforeMount (实例被挂载到容器前被调用)此时，render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成…"}, {"id": "6923076254862147598", "title": "小白学习 Vue 1.介绍", "desc": "小白学习Vue系列目录小白学习Vue1.介绍小白学习Vue2.指令小白学习Vue3.绑定Class与Style小白学习Vue4.条件渲染和列表渲染基本用法自定义组件今日总结五种指令：v-bind:at"}, {"id": "6923064810527686664", "title": "以 JSX 的方式来编写 Vue3 代码", "desc": "创建项目使用vueui创建vue3项目安装vue-routervuex@vue/cli-plugin-typescript,@vue/babel-plugin-jsx修改babel.config.js"}, {"id": "6943480212956905502", "title": "响应式设计布局要不要了解一下？", "desc": "我们正在跑步进入移动互联网时代，所以针对移动环境下web开发响应式设计成为发展的一个必然的趋势。所以这几天一直没更新文章，也是在准备怎么写关于这个响应式设计，毕竟用可以，但是想写的明白还是需要费点功夫的，有人说不会响应式布局不算一个合格的前端，也有人说响应式是css的高阶玩法，不..."}, {"id": "6950047862361161764", "title": " Vue 2.0与3.0 的数据响应式实现 (待改进)", "desc": "数据响应式：当vm/options发生了变化(用户进行了互动)或(options内的变化-->使用props)，用户/开发者都会得到-->响应"}, {"id": "6844903969828012046", "title": "分析 Vue 的观察者模式（中）", "desc": "在上篇分析-Vue-的观察者模式（上）中，简单实现了“手动”版观察者模式，而在本篇中我们继续沿着该思路往下探索，看如何实现“自动”版的观察者。 紧接着上文的思路，因为我们只是实现了 Dep 依赖（管家），却还没有对平台的观察处理方式优化，因此我们需要将此步骤给完善起来。 首先，…"}, {"id": "6949828239992832030", "title": "Vue源码分析④ 组件挂载", "desc": "什么是组件挂载？组件挂载就是将一个Vue实例挂载到一个真实的DOM元素上，当Vue实例被解析为虚拟DOM（节点 / 树）并渲染时，它会替换掉所挂载的真实DOM，这就是组件挂载。"}, {"id": "6844903821760528392", "title": "VUE学习笔记：环境准备", "desc": "1. Node Node是JavaScript语言的服务器运行环境。 所谓“运行环境”有两层意思：首先，JavaScript语言通过Node在服务器运行，在这个意义上，Node有点像JavaScript虚拟机；其次，Node提供大量工具库，使得JavaScript语言与操作系统…"}, {"id": "6844904147557285896", "title": "vue源码中用到的知识点", "desc": "Object.defineProperty方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象配置选项（整体叫属性描述符）1、数据描述符configurable:是否可以重"}, {"id": "6943479866549338142", "title": "Java继承特性以及重写现象的内存分析", "desc": "今天我们说一下Java面向对象中的一个特性-继承，然后做一下他的内存分析，理解一下重新现象的情况。package com.gaojizu.* 是在java.lang.System.out.System.out.System.out.System.out.package com.g..."}, {"id": "6943479848396390407", "title": "说一下Java中抽象类和接口存在的意义与价值", "desc": "System.out.这里为了区别普通的类，我们一般加abstract这个关键字，我们就认为他是一个抽象类。既然是一个类，那么普通类的属性他都有，它也可以写普通的方法。这里就有人说了，那这个有什么用呢？没有实现体，就是调用也没用啊，JDK也想到这个了，所以呢他是不让你直接实例化调..."}, {"id": "6844903928430067719", "title": "Vue.js技术细节", "desc": "为了方便Vue实例跟踪每个节点的身份，从而重用和重新排列现有元素，需要为每项提供一个唯一的key属性。理想的key属性值是每项都有并且唯一的id。key的工作方式类似于一个属性，所以需要用v-bind来绑定动态值。 在Vue中通过props传递数据是单向的，也就是父组件数据会传…"}, {"id": "6943479690438918158", "title": "vue+element-根据用户选择的日期重置当前的表头的第一位", "desc": "我记得之前我是写过一篇文章，写的是怎么根据用户选择的天数来重置当前的表头数量，那么当时我写的是将天数改变，但是一直没有改变的是开始的日期，我当时写的是没有处理好第一天的日期，所以一直没有更新，那么其实我们既然是需要定制自己的表头的话，开始的日期一般是不会固定的，所以我们今天就简单..."}, {"id": "6844903605061812237", "title": "vue  最“糟糕”实践", "desc": "Not so long ago, I got a new job. And when I saw the code base for the first time, it terrified me. Here I want to show the things you shou…"}, {"id": "6943479826577620999", "title": "JS处理函数将对象作为参数传递", "desc": "var odata = data.for(var i = 0; i < odata.detalData = JSON.parse(odata[i].//console.JSON.stringify(detalData).$('#order-detail').JSON.string..."}, {"id": "6943479166155096095", "title": "聊聊js最无聊的技术点-原型链", "desc": "js 作为一种动态语言，他的强大之处已经不用我来废话了，那么如果要学习js，你可以学习一些基础入门的简单的，也就是我们常用的一些操作数组啊、格式转化啊等，这些为什么简单呢？其实本质不是它多简单，是它的实用性有多强，我们在写项目的时候很多的时候用到的知识点我们认为是很简单的，原因是..."}, {"id": "6943479050052567076", "title": "关于JS中this指向问题的探究", "desc": "本篇文章的所有例子来源都是《JS设计模式与开发实践》这本书，写这篇文章之前也去查阅了很多关于this指向问题的探讨，包括但不仅仅有像阮一峰老师，还有很多的博主的帖子，还是决定写这篇文章有以下几个原因，第一，加深自己的理解，重新理一遍关于这方面的知识，第二，我尽可能的使用通俗简单的..."}, {"id": "6943479393234714638", "title": "vue实现全局函数以及生成md文档目录和html文件", "desc": "vue实现全局函数以及生成md文档目录和html文件vue中写全局函数新建一个log.js文件main.新建一个log.新建一个logs.js，尽量和main.Vue.prototype.this.url: this.api.}).console.}).console.main...."}, {"id": "6844903988056293389", "title": "[ 经典面试题 ]在浏览器中输入url到页面显示出来的过程发生了什么？", "desc": "在浏览器中输入url到页面显示出来的过程发生了什么？考点：dns解析（可做dns预取）  cdntcp连接（3次握手）   TCP/IP协议栈：应用层（应用层，表示层，会话层），传输层，网络层，数据链"}, {"id": "6847902224958357511", "title": "vue源码阅读（七）：响应式原理", "desc": "vue 中数据是普通的js对象，当数据变化时，视图会进行更新。数据之所以能驱动视图的更新，关键的部分就是它的响应式系统。 在new Vue()初始化阶段，this._init(options)方法执行的时候，会执行initState(vm)，它定义在src/core/insta…"}, {"id": "6844903854044086286", "title": "[问题小结]避免重复定义同样的内容，把服务协议抽离成配置文件", "desc": "这周有一个需求，需要在不同的页面添加平台服务协议，协议目前有2个，以后可能会有更多协议。添加协议的位置是在‘我的->关于’和‘开户首页的弹窗’。在‘开户首页的弹窗’这个地方会比较麻烦，因为这里弹窗展示的券商的协议，我要新增平台的服务协议进来。 考虑到要在不同的页面展示协议，在不…"}, {"id": "6844903678315331597", "title": "Composition实现科学文字计数器", "desc": "本来就是基于vue来做，想起来也是很简单的事情，就是获取$input.value.length~确实也是如此。 在看ElementUI源码的时候发现了一个以前没有用过的事件（见识短浅），composition事件。这个事件有三个事件组成，分别是：compositionstart…"}, {"id": "6904095197756391437", "title": "Vue的响应式原理 -- 实现一个观察者Observer", "desc": "前言提示：标题写不下了，除了实现Observer，我们还实现了Watcher，完整实现了数据变化=>视图更新，视图更新=>数据变化的双向数据绑定。前面我们实现了一个指令解析器，现在我们来实现一个观察者"}, {"id": "6844903695478439949", "title": "VUE-cli3使用 svg-sprite-loader ", "desc": "svg-sprite-loader 的插件，用来根据导入的 svg 文件自动生成 symbol 标签并插入 html，接下来就可以在模版中方便地使用 svg-sprite 技术了。 这时候发现还是不行啊，body 中并没有看到 symbol 标签。 配置好了，就可以用了。使用方…"}, {"id": "6919070510793883662", "title": "Vue2.0源码分析：Event事件", "desc": "在我们编写Vue应用的过程中，一定少不了event事件。Vue中的event事件可以让我们处理click、mouse等原生交互效果，也可以同来处理组件通信。 在event事件处理章节，我们首先先回顾一下event事件的常见用法，然后再结合编译原理来分析事件是如何被解析的、紧接根…"}, {"id": "6844903624833761294", "title": "Vue单元测试探索", "desc": "一类是相似度很高的项目，比如管理后台，这类项目的页面通过各种公共组件搭建而成。公共组件的复用性很高，所以质量尤为重要。如果开发人员在修改了公共组件之后留下了bug，那么将会直接降低了整个项目的质量。我希望让程序去测试这些公共组件，保证每一个公共组件是可用的。 另一类是公司的核心…"}, {"id": "6989800640356548638", "title": "第1期 从底层了解Vue实例的创建", "desc": "我们平时在搭建Vue项目时都是用官网提供的脚手架进行搭建，但对于底层逻辑的东西很少了解，为了帮助大家更深入了解Vue底层原理【快智岛】专门开设了【从源码开始学Vue专栏】和大家一起开启学Vue之旅。"}, {"id": "6844904151546232845", "title": "【读vue 源码】溯源 import Vue from 'vue' 到底做了什么?", "desc": "flow 是由Facebook出品的javascript静态类型检查工具。vue.js 的源码是采用flow做了静态类型检查。因为javascript是动态类型的语言。语言灵活的同时也很容易引发一些隐蔽的隐患代码。在编译的时候看上去不会报错，但运行的时候就会出现奇奇怪怪的bug…"}, {"id": "6991816711473201183", "title": "vue-property-decorator用法介绍", "desc": "在Vue2.0中使用TypeScript语法时，需要引用 vue-property-decorator。 vue-property-decorator 完全依赖于vue-class-compon"}, {"id": "7002858754085486628", "title": "vue响应式数据原理", "desc": "初始化Vue实例的时候，Observer遍历data里所有属性，使用Object.defineProperty()把所有的属性都添加上getter、setter方法，并创建Dep。 在解析指令的时候，"}, {"id": "7001012191281283086", "title": "Vue中.sync修饰符的作用", "desc": "在Vue中，子父组件最常用的通信方式就是通过props进行数据传递，props值只能在父组件中更新并传递给子组件，在子组件内部，是不允许改变传递进来的props值，这样做是为了保证数据单向流通。 但有"}, {"id": "6887867687897301006", "title": "Vue3、Vuex、Typescript 项目实践、工具类封装", "desc": "1. webpack require 自动化注册路由、自动化注册异步组价 2. axios 请求封装（请求拦截、响应拦截、取消请求、统一处理） 3. vuex 业务模块化、 接管请求统一处理 4. home 文件代码 5. login 文件代码"}, {"id": "6844904143002271758", "title": "Vue悬浮球效果", "desc": "1）一个是吸边效果。位置判断，然后缓动到目标位置： 2）一个是页面滚动过程中隐藏悬浮球的防抖。 3、touchstart里设置禁止点击以免touch和click事件冲突，同时让transition为none因为跟随手指移动时不需要缓动效果。 4、touchmove中设置悬浮球跟…"}, {"id": "6995421703803240484", "title": "Vue3框架学习—组件全局注册警告（无法编译）", "desc": "组件全局注册报警告——出现无法编译的效果： 警告原因： ① .vue里面文件template给你编译处理过的 html文件里面标签不识别大小写 ② html文件里的template不识别大小写 正确代"}, {"id": "6844903710993170445", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi+四期vueX的使用+图片上传+富文本编译器", "desc": "1."}, {"id": "6990299952131866637", "title": "Vue3追本溯源(三)双向数据绑定", "desc": "接上篇解析mount方法到setupStatefulComponent方法中，当调用createApp存在setup属性时(以本例为模版解析)开始执行setup方法，本文将详细解析setup方法，及数"}, {"id": "6997204886483894308", "title": "使用coding托管vue仿饿了么项目，实现可直接查看效果", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 最近在学习vue,照着视频敲了一边饿了么app,在朋友的帮助下将项目部署到了coding上，现在可直接通过链接查看项目，下边记录一下； 首"}, {"id": "7000988233651879944", "title": "vue解决跨域方法", "desc": "vue解决跨域方法 1.什么是跨域 跨域指浏览器不允许当前页面的所在的源去请求另一个源的数据。源指协议，端口，域名。只要这个3个中有一个不同就是跨域。 举例: 2.跨域解决方法 使用proxy代理: "}, {"id": "6860107861134540814", "title": "源码篇（六）：手写vue_route版mini源码分析route。附送简版vue-route源码", "desc": "路由以及是前端必须掌握的技能之一。“用上\"路由很简单，\"用好\"路由却需要了解以route是什么，才能用得更好。本文适合1.5~3.5经验的博友们，提高自己。 什么是路由。可以简单的理解成一个url的地址，来展示不同的内容或者页面。 很久以前，在单页面时代还没开启之前，我们习惯用…"}, {"id": "6945643512725504030", "title": "每日一篇，Vue 第一篇 \"基础篇\"", "desc": "前言1 chainWebpack 链式操作config.plugin 插件use 使用插件tap 更改参数use 使用插件tap 更改参数use 使用插件tap 更改参数use 使用插件tap 更改参"}, {"id": "6844903558832193550", "title": "使用Vue的nextTick引发的执行顺序之争", "desc": "在Vue中有一个nextTick方法，偶然一天，我发现不管代码的顺序如何，nextTick总是要比setTimeout先要执行。同样是排队，凭什么你nextTick就要比我快？ 开局一道题，内容全靠编。（在node下运行，答案在文末给出。） 这道题想必大家都见得很多了，答案脱口…"}, {"id": "6844903519309283335", "title": "基于Vue的组织架构树组件", "desc": "由于公司业务需求，需要开发一个展示组织架构的树组件（公司的项目是基于Vue）。在GitHub上找了半天，这类组件不多，也没有符合业务需求的组件，所以决定自己造轮子！ 那么，问题来了。递归组件怎么写？ 至此，一个简单的组织架构树组件就完成了。 然而，事情还远远没有结束。。。 我们…"}, {"id": "6877104768230752264", "title": "自己动手写一个render函数", "desc": "此时我们的元素已经创建成功，接下来我们需要做的就是，把它的文本，渲染上去。 .... 等等，我拿下锤子... on 里面是用来绑定事件的，所以我们不能跟class与 id 同等对待。渣男！区别对待 到这里我们就已经完成了这个 props 里面经常会用到的一些操作了。 那我们就不…"}, {"id": "6844904084319764488", "title": "Vue之虚拟DOM(vdom)", "desc": "在开始虚拟DOM之前，让我们先来了解一下真实的DOM以及浏览器是怎么进行解析的。浏览器渲染引擎工作流程大致分为以下四类：创建DOM树 -> 生成render树 -> 布局render树 -> 绘制render树 创建DOM树：解析HTML生成DOM树 - 渲染引擎首先解析HTM…"}, {"id": "6867798692460494861", "title": "年轻人如何从0到1封装发布一个vue组件", "desc": "封装发布组件是前端开发中非常重要的能力，通过对常用组件的封装可以提升团队开发的效率，避免重复劳作且不方便维护。好的组件的抽象和封装能让组件得到更广泛和多环境兼容的应用。 本文讲述了如何一步步从0到1封装发布一个常用的toast组件的过程。本文是搭配实例书写的，所以理论上根据本文…"}, {"id": "6976409863890944036", "title": "vue基础语法学习", "desc": "vue基础 vue 是什么 vue是一套渐进式的javascript框架,用于构建用户界面 什么是渐进式 渐进式:就是逐渐增强,可以在项目中使用一部分vue的功能,也可以使用整个vue全家桶来管理整个"}, {"id": "6944864246312697887", "title": "关于 v-model 你需要知道的这一切！", "desc": "Vue v-model是一个指令，它提供了input和form之间或两个组件之间的双向数据绑定。 这是Vue开发中的一个简单概念，但v-model的真正威力需要花些时间才能理解。 本文主要讲解v-model的不同用例，并学习如何在自己的项目中使用它。 刚才讲过，``v-mode…"}, {"id": "6971213136015654919", "title": "vue框架缓存过期业务处理｜Java 开发实战", "desc": "这是我参与更文挑战的第 7 天，活动详情查看：更文挑战 本文正在参加「Java主题月 - Java 开发实战」，详情查看：活动链接"}, {"id": "6985349149399089165", "title": "vue头像编辑实时裁剪预览功能(element+vueCropper)", "desc": "公司其中一个项目的需求，根据UI图实现头像修改功能，点击头像编辑，弹出头像修改框，需要裁剪及实时预览。"}, {"id": "6986818106056245261", "title": "replaceState+sessionStorage解决页面刷新后原先在Vuex中的state丢失的问题", "desc": "利用 pagehide 事件在用户刷新页面时将vuex的store存入sessionstorage中，然后在页面加载时，从sessionstorage中获取"}, {"id": "6844904168520433678", "title": "『前端技巧』—— 导出功能的实现", "desc": "这种导出，我最喜欢了，后端比较有良心，前端很省事。当然在这种场景下，还分两种情况。 域名是请求后端的域名，不是前端页面的域名。项目一般是给多个客户使用，故后端的域名一般都交给运维来配置。项目中这么实现。 在静态资源public文件夹中建立config.js文件和config.j…"}, {"id": "6974231567812018184", "title": "Vue Conf关于Vite的分享给我带来的启发", "desc": "本文写完带给我更多的是一些思考。从一次分享去发掘其背后庞大的生态体系以及那些我们一直在用却并未深入了解的技术黑盒。"}, {"id": "6987562123182211080", "title": "用 Vue 3+Vite+TypeScript 从0打造一个UI组件库", "desc": "前言 最近在系统学习 Vue 3 ，想做一些轮子来提高自己开发的效率，就萌生了做一个UI组件库官网的想法。目前拥有Input、Switch、Dialog、Button、Tabs组件。"}, {"id": "6966033014891495455", "title": "使用vue3的自定义指令给 el-dialog 增加拖拽功能", "desc": "element-plus 的 el-dialog 没有提供拖拽功能，有点小遗憾。这里提供一种使用 vue3 的自定义指令的方法，实现拖拽功能的方法。"}, {"id": "7005514747395178503", "title": "vue[v2]笔记 [dictionary]  ", "desc": "错误多，就先不校对了******************************************************"}, {"id": "6893687159195336717", "title": "🚩Vue源码——收集订阅者引起的性能问题", "desc": "在这篇专栏中详细介绍了订阅者的收集过程，但是漏掉当发布者的值是对象或数组时是如何收集订阅者的介绍，其收集过程可能会引发性能问题。当然这不是 Vue 本身的问题。 在这篇专栏中介绍过，当读取数据时会触发 getter 函数，在 getter 函数中收集订阅者。而 getter 函…"}, {"id": "6861547167358648327", "title": "九种 Vue 组件间通讯方式合集", "desc": "Vue 提供了各种各样的通讯,其中包括兄弟间的通讯和非兄弟间的通讯,借此机会做个总结，查阅起来方便。如果喜欢的话可以帮忙点个赞 👍 或者关注一下 😋 ref获取的是真实的dom元素，如果放到组件上代表的是当前组件的实例。 父组件中可以直接获取子组件的方法或者数据。 Vuex…"}, {"id": "6844903669922529287", "title": "VueSSR高阶指南", "desc": "我们都知道，对于node来说，前端vue代码的迭代节奏是很快的，可能一周要迭代几次，但是node的迭代却没那么平凡，可能一周更新一次甚至更久，那么为了node服务的稳定，减少node服务的发布次数，是非常有用的。 为了前后端分离，我们在前端和api层中间，架构了一层node层，…"}, {"id": "6994687684325195789", "title": "vue3中使用watch注意事项与HOOKS模块化处理", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 vue3中使用watch注意事项 编写watch函数需要编写两个参数,第一个是要监听的值,然后是一个回调函数。在函数中你可以获得到新知和老"}, {"id": "6845166890701029384", "title": "使用Vue开发浏览器插件", "desc": "浏览器插件是前端领域比较小众的应用范畴，我们所说的浏览器插件指的就是Chrome 插件。在Chrome 插件市场上有非常多有趣又实用的Chrome 插件，比如octotree(显示github代码树)、Adblock Plus(拦截广告)等。 因此本篇文章旨在分享笔者在基于vu…"}, {"id": "7000925048521375774", "title": "回首Vue3之实例篇（三）", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 这篇文章我们来讲一下实例方法$watch、$emit、$forceUpdate和$nextTick的使用，以及我们需要注意的地方。 如何使"}, {"id": "6923811335016808461", "title": "用Vue.js+Meteor.js实现仿微信web即时通讯软件", "desc": "毕业设计打算使用vue.js+egg.js实现前后端分离的方式开发仿微信即时通讯应用，但选题的时候导师建议我用meteor框架实现，刚开始并没有了解过meteor框架，兴致冲冲就同意了下来﹋o﹋，结果到要学习相关知识的时候却头皮发麻，meteor框架在国内占取的份额太低了，即便…"}, {"id": "6992206966797893639", "title": "Vue基础-2", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 前言 吃饱才有力气写代码~ 在Vue基础-1中，简单介绍了一些Vue常用的概念，当然相关内容还可以扩展很多。那今天我们就一起来总结一下Vue"}, {"id": "6910584102974881799", "title": "Vue实现一个Tree组件", "desc": "Tree组件在实际应用中非常广泛,例如省市县地域的展现.一般一些包含从属关系的数据都可以使用Tree组件来进行展示,下面通过一个实战的demo来深入学一下实现一个Tree组件所要了解的原理和实现细节.本文实现的功能包含以下三点. 最终Demo的效果图如下. 实现一个基础版的Tr…"}, {"id": "6962078064364748808", "title": "ant-design-vue 运行时换肤方案", "desc": "背景 公司需求：在项目运行时支持更换主题。项目vue为3.0版本，antd版本为2.0.0，网络上关于 antd-theme-generator教程有些坑点没有写的很详细，这里记录总结一下 原理 使用"}, {"id": "6872235455824265229", "title": "尝鲜vue3.0-tyepscript开发组件(3)", "desc": "Vite是一个web开发构建工具，它在开发期间通过本地ES模块导入为您的代码提供服务，并将其与Rollup捆绑在一起用于生产。 实际上就是先启动服务（koa），如果你需要某一个文件，再进行编译。这就造成Vite启动服务的速度比Webpack快了很多，即“按需编译”。 至此，使用…"}, {"id": "6844903632454811656", "title": "RxJS实践，Vue如何集成RxJS", "desc": "这是一个台湾开发者编写的关于RxJS的教程，教程涉及到原理解析、简易实现，以及常用operator的介绍。 各种常用操作符的作用与例子，可以结合RxJS的官方文档进行查阅。 如上所示，Rx.Observable.of(23)在被订阅时会被发出值23，this.setName$则…"}, {"id": "6844904084617560071", "title": "Vue3.0尝试", "desc": "有关vue2的相关相关语法我相信大家都已经的语法我相信大家都已经会了，现在都已经2020年了vue作为前端这么热门的框架, 不去学一波对的自己是做前端的吗？哈哈哈哈🤣🤣🤣。 一路就开始折腾，那是一路曲折啊，重不会到会也不知道自己经历了什么，到现在vue3.x马上又有开始了…"}, {"id": "6966062176851197989", "title": "【Vue3.x版】基于vant的cell、popup、picker组件二次封装一个选择器组件", "desc": "前一阵子在Vue2.x中基于Vant的cell、popup、picker二次封装了一个选择器组件（传送门）。 鉴于最近开始整Vue3.x项目了，于是抽空把这个组件用Vue3.0重构了一遍。"}, {"id": "6978772143748153381", "title": "vue3中使用keep-alive", "desc": "目的：介于产品非要我实现进入详情页出来页面筛选项不变这个需求~于是我学习了下 一、介绍 keepalive是Vue的内置组件，作用是将组件缓存在内存当中，防止重复渲染DOM，属于消耗内存获取速度。常用"}, {"id": "6912245318377537550", "title": "收下这款 Vue 项目模版，它将让你的开发效率在 2021 年提高 50%", "desc": "默认提供开发环境和生产环境两套配置，分别在根目录下 .env.development 和 .env.production 文件里，可配置项有网站标题、接口请求地址和是否开启CDN支持。 开发者可根据实际业务需求进行扩展，如果对这块不熟悉，可阅读 Vue CLI 环境变量和模式 …"}, {"id": "6844903693373046792", "title": "基于vue-cli3 SSR 程序实现热更新功能", "desc": "通过上一篇文章 通过vue-cli3构建一个SSR应用程序 我们知道了什么是SSR，以及如何通过vue-cli3构建一个SSR应用程序。但是最后遗留了一些问题没有处理，就是没有添加开发时的热更新功能，难道要每次更新代码都要重新编译打包吗？显然不是很合理。那接下来我们将为该SSR…"}, {"id": "6844903784598994952", "title": "[译] Hooks 对 Vue 而言意味着什么", "desc": "不要把 Hooks 和 Vue 的生命周期钩子（Lifecycle Hooks） 弄混了，Hooks 是 React 在 V16.7.0-alpha 版本中引入的，而且几天后 Vue 发布了其概念验证版本。虽然 Hooks 是由 React 提出的，它是一个对各 JavaScr…"}, {"id": "6994234457519554574", "title": "ant-design-vue按需引入icon以及组件", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 3.75M → 1.81M → 99kb的转变 一、初始化vue项目文件夹 1.安装vue/cli （默认电脑已安装了node）打开命令行终"}, {"id": "6966084939301421063", "title": "「将 Vue SFC 编译为 ESM 」探索之路", "desc": "探索「将 Vue SFC 编译为 ESM 」之路 最近造了个轮子，基于 Vue3 代码示例的组件。"}, {"id": "6985452912826679332", "title": "vue项目中基于element-ui的Tree和Select进行二次封装", "desc": "vue项目中基于element-ui的Tree和Select组件进行二次封装，实现一个在功能上类似于Cascader的组件"}, {"id": "6914473873639473160", "title": "vuex 我在项目中是这样统一接管请求的", "desc": "最近在把博客园那边的文章渐渐的搬过来,所以没太多的新东西... 最近在把原有项目使用微前端 qiankun 重构(vue3+TS 和 Umi3.x+react16+TS)； 踩坑中... ; 后面分享出来 async 函数内部 return 返回的值。会成为 then 方法回调…"}, {"id": "6844904046608809992", "title": "Vue多页面优化踩坑记录", "desc": "这里我添加了index.html和user.html两个页面。 vue-router官方给出的示例如下，这里webpackChunkName如果不写打包时会自动生成序号代替。 为了方便追踪打包情况最好写上，就可以看到about.[hash].js的大小了。 打包后about.j…"}, {"id": "6987963187312214023", "title": "在vue中销毁被keepalive的组件", "desc": "背景 我相信某些靓仔开发们会遇到这样的需求，你们被要求开发一个类似谷歌浏览器的tab选项卡，该选项卡要求被缓存，于是你就会想到keepalive，而且在选项卡被关闭时要销毁那个组件的实例，释放内存，于"}, {"id": "6929538305398669320", "title": "「快速学习系列」我熬夜整理了Vue3.x响应性API", "desc": "Vue3.x正式版发布已经快半年了，相信大家也多多少少也用Vue3.x开发过项目。那么，我们今天就整理下Vue3.x中的响应性API。 作用： 创建一个响应式数据。 本质： 传入数据（复杂类型：数组和json对象）包装成一个Proxy对象。如果传入其他对象，默认情况下修改对象，…"}, {"id": "6844904079169159181", "title": "还在写最简单的vue功能组件么？", "desc": "在日常项目开发过程中，往往离不开封装组件的过程。比如a页面有一个功能恰巧b页面和c页面也使用。这时候我们考虑到代码复用，会考虑将这个功能做成组件。这篇文章我们就来讲一讲开发vue组件时候的一些小技巧和一些黑(骚)科(操)技(作)。 首先我们用脚手架搭建一个项目，用来写我们的组件…"}, {"id": "6844903607507107853", "title": "纯正后端的vue轮子笔记", "desc": "1. 路由加载 2. 404路由 3. 路由拦截 4. 动态路由 5. 路由加载时动画 1. 小知识 2. 多模块 3. 辅助函数 4. 数据持久化插件 5. 日志插件 1. 需要实现的功能 2. 路由设计 3. 页面级的权限控制 4. 元素级的权限控制 1. 如何封装一个支持…"}, {"id": "6948246479899197471", "title": "Vue项目实战（二）——Vue3+Vite+TypeScript实现ToDoList｜刷题打卡", "desc": "如果看完了《Vue 小白课》，那么对 Vue3 项目的整体情况有了一定了解，并且搭建好了 Vue3 的环境。本篇我们就来练习一下 Vue3，实现 ToDoList 项目。 我们首先看下 main.js文件， 在 2.X 版本中创建一个 vue 实例是通过 new Vue()来实…"}, {"id": "6995911736343674887", "title": "在Vue项目中如何使用SVG矢量图", "desc": "首先我们先简单了解一下什么是SVG矢量图，使用它有什么优点？然后再来讲解如何在一个新的Vue项目中使用它。"}, {"id": "6844903593921757198", "title": "推荐一款基于Vue的Markdown编辑器插件——mavonEditor", "desc": "代码高亮highlight.js中的语言解析文件和代码高亮样式将在使用时按需加载."}, {"id": "6960444984247975949", "title": "vue项目 如何 打包成App ?", "desc": "1. 修改 index 访问 资源路径 在vue_cli脚手架中新建 vue.config.js 文件 ，在文件中 添加 publicPath：\"/\" 可修改 index.html访问资源的路径 ，这"}, {"id": "6844903711437750280", "title": "实现一个可无限折叠的table", "desc": "1. 明确需求 在代码里很东西其实都是伪装出来的，例如我们要实现的这个可无限折叠的table。但在用户操作的时候看来就是那么回事咯 ~ ~ 2. 树形结构数据准备 这里已经准备好了树形结构的数据，存放于data.js的文件中，节点通过Children连接。如标题所说，可无限折叠…"}, {"id": "6844903863145725966", "title": "聊聊 Vue 中 title 的动态修改", "desc": "由于之前的 Vue 项目打包成果物一直是嵌入集成平台中，所以一直没有关注过项目的 title。直到最近，突然有个需求，要求点击按钮在集成平台外新开一个页面，此时我才发现，原来我的项目的 title 一直是万年不变的 vue-project。理所应当的，这个问题被测试爸爸提了一个…"}, {"id": "6955387358728421383", "title": "Vue3状态管理的新尝试", "desc": "随着Vue3的逐步应用，对状态管理的需求越来越多。起初是基于Vuex4进行状态管理的，但是Vuex4也暴露了一些问题。从个人角度来说，Vuex4类似于过渡期产品，对TypeScript的支持性并"}, {"id": "6847009773116882957", "title": "很多人不知道可以使用这种 key 的方式来对 Vue 组件时行重新渲染！", "desc": "在某些情况下，我们必须强制Vue重新渲染组件，如果没有，那可能，你做的业务还不够负责，反正我是经常需要重新渲染组件，哈哈。 虽然Vue不会自动更新这种情况是相对比较少，但是知道如何在出现这个问题时修复它还是很有用的。 在大多数情况下，此问题根源还是我们对 Vue 的响应式理解还…"}, {"id": "6983870121949265950", "title": "html2canvas在vue2中的应用-移动端", "desc": "将DOM页面中的一部分（动态生成的二维码、动态生成海报）转化为图片，甚至点击下载按钮，将这部分保存为图片下载到手机里或者电脑上......"}, {"id": "6995948726678192142", "title": "Vue中 实现 DES 加密和解密", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 1. 简介 DES是一种对称加密 (Data Encryption Standard) 算法。于1977年得到美国政府的正式许可，是一种用"}, {"id": "6844903890094129160", "title": "Vue缓存 菜单、多Tab解决方案", "desc": "在项目开发中，前端难免遇到需要路由缓存的需求。在之前一个React项目中，查询各种资料和插件后，了解到React要配合React-router进行路由缓存，会有很多意想不到的问题。所以在React项目中，我们都避免接收到需要路由缓存的需求。 最近在开发一个vue项目中，由于v…"}, {"id": "6985800727159373855", "title": "使用vue3+vite+ts+element-plus制作的TodoList示例", "desc": "初始化项目 创建 选择框架：vue, 选择变种：vue-ts 进行项目目录，安装依赖 启动 出现如下，运行成功 浏览器访问 http://localhost:3000/ 安装element-plus "}, {"id": "6982745130448977927", "title": "Vue 全解：.sync 修饰符", "desc": "Vue 规定：在子组件中，不可以直接修改 props 外部数据。 但是我们常有在子组件中修改 props 的值并同步到父组件的需求，要实现这个需求，可以使用 JS 的发布、订阅功能(EventBus)"}, {"id": "6988829960739749895", "title": " Vue 封装 loading 自定义指令", "desc": "在项目中，免不了要请求一些数据，一般都会在数据请求时加上`loading`效果，提高用户体验，而且这个可以用在项目的需求地方，所以为了减少代码重复，就可以封装成自定义指令，在需要使用的地方加上就行。"}, {"id": "6844903751778566157", "title": "Vue实现函数防抖组件", "desc": "这两篇文章中作者都分享了关于把函数防抖/函数节流包装成通用组件的经验。 在这里我就不介绍函数防抖/函数节流的概念了，将这样的功能封装是组件真的是非常实用。 这里我使用了abstract: true来创建一个抽象组件。 我们常用的transition和keep-alive就是一个…"}, {"id": "7000379377305419790", "title": "vue3学习 --- vue-router", "desc": "vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。"}, {"id": "6931913871275851784", "title": "Vue3组件（九）Vue3+element+json实现一个动态渲染的表单控件", "desc": "把表单需要的属性，统统放入json里面，然后用require（方便） 或者aioxs（可以热更新）加载进来，这样就可以实现动态渲染了。 比如要实现公司信息的添加、修改，那么只需要加载公司信息需要的json即可。 想要实现员工信息的添加、修改，那么只需要加载员工信息需要的json…"}, {"id": "6873149175245701128", "title": "【前端体系】关于js与vue的一些重点基础", "desc": "1. js重点知识 这一块的知识非常重要，所以原来就进行过总结。故这里不再重复进行整理了（随着知识储备的上升感觉以前写的比较尴尬...但起码还是没有多大问题的） 2. js执行机制 这个全局的执行上下文中，全局对象、this是必须的。并且这个this的指向就是全局对象 在js运…"}, {"id": "6844904037930778638", "title": "Vue解析剪切板图片并实现发送功能", "desc": "我们在使用QQ进行聊天时，从别的地方Ctrl+C一张图片，然后在聊天窗口Ctrl+V，QQ就会将你刚才复制的图片粘贴到即将发送的消息容器里，按下Enter键，这张图片将会发送出去。接下来跟各位开发者分享下这项功能在Vue中如何来实现。先跟大家展示下最终实现的效果。在线体验地址 …"}, {"id": "6974648109737607204", "title": "Vue2升级Vue3", "desc": "升级vue-loader后报错 升级 \"vue-loader\": \"^16.1.2\"后升级后报错 解决办法：修改webpack配置文件中的VueLoaderPlugin 修改前： 修改后: 实例化Vu"}, {"id": "6844904105954000910", "title": "Bpmn.js 在线流程编辑器的汉化", "desc": "距离上一篇的 《Vue 整合Bpmn-js 工作流模型编辑器》 也一个多月了，在最近又收到公司的一个需求就是要我把Bpmn.js 流程编辑器给汉化了，没得办法又要回头去汉化这个编辑器。今天呢我就跟着上篇的基础来说说怎么汉化Bpmn.js。 1. 先把编辑器搭建好 对于这一部就直…"}, {"id": "6844904089902383112", "title": "三年前端面试经验加感悟", "desc": "不要写精通什么什么东西，精通这个东西每个人理解得都不一样，你觉得精通就是能在任意场景下熟悉运用。面试官可能觉得你既然精通 js，怎么 vue是 Evan You写的而不是你呢？搞不好要为难你一把，所以尽量避免这些可能引起争论的东西"}, {"id": "6844904065353121799", "title": "「 如何优雅的使用VUE? 」不可不知的VUE实战技巧", "desc": "其实，很多人对于vue只停留在基础使用。想要提升自己，就应该想办法将其运用到更高的层次。 当我们在项目需要重复多次使用该组件，会导致出现很多重复的引入和注册代码，既繁琐又不雅观。因此我们可以通过一个全局的Js文件来管理，将需要多次使用的组件进行全局注册"}, {"id": "6844903511835017230", "title": "[译] 2017 年比较 Angular、React、Vue 三剑客 ", "desc": "为 web 应用选择 JavaScript 开发框架是一件很费脑筋的事。现如今 Angular 和 React 非常流行，并且最近出现的新贵 VueJS 同样博得了很多人的关注。更重要的是，这只是一些新起之秀。 那么我们如何选择使用哪个框架呢？列出他们的优劣是极好的。我们将按照…"}, {"id": "6995332032591036452", "title": "手摸手，带你尝鲜 naiveui 撸 admin 骨架（核心骨架篇）", "desc": "前言 根据以往几篇手摸手系列文章发布，以及粉丝私信反馈，多数还是希望实例直接上代码，方便复制粘贴，这个确实是个不好的习惯哈，俗话说自己动起手来，发现问题才能解决问题嘛"}, {"id": "6844903942451642376", "title": "不要肆无忌惮地在你的项目中使用 ES78910 了～", "desc": "我再一看兼容性.. 打扰了.. 我 : 我...我真想跳起来打他的膝盖啊～ 凭一句话 好像是毫无说服力啊,是时候表演真正的技术了.. \bcore-js 是 babel 转码的核心包,它使用 es5 API实现了一些 ECMAScript 到 2019 年的 polyfills,…"}, {"id": "6997684939206426661", "title": "vue3源码分析01-初始化渲染流程", "desc": "今天来开新坑了,最近状态比较萎靡.想通过这种方式强迫自己学习一下. 此系列文章不定时更新 但最迟两个礼拜会更新一篇(虽迟但到)! 声明: 分析版本为当前 vue-next 仓库 master 分支代码"}, {"id": "6991388457750773796", "title": "Electron+Vue3 MAC 版日历开发记录(34)——dmg打包下载 | 8月更文挑战", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6967213312752746532", "title": "VUE开发者必须知道的实用技术点！", "desc": "前言 vue 作为目前前端三大框架之一，对于前端开发者可以说是必备技能。掌握这些实用小技巧，可以让你事半功倍。 1、路由懒加载，能让你首次加载更快 路由懒加载可以让我们的包不需要一次把所有的页面的加载"}, {"id": "6844903606332882957", "title": "Vue 全家桶实现网易云音乐 WebApp", "desc": "基于 Vue(2.5) + vuex + vue-router + vue-axios +better-scroll + Scss + ES6 等开发一款移动端音乐 WebApp，UI 界面参考了安卓版的网易云音乐、flex 布局适配常见移动端。 因为服务器的原因，所以可能多人…"}, {"id": "7001373906816729124", "title": "深入 Vue3 源码，学习响应式原理", "desc": "Vue2 响应式原理 学过 Vue2 的话应该知道响应式原理是由 Object.defineProperty 对数据进行劫持，再加上订阅发布，实现数据的响应的。 Object.defineProper"}, {"id": "6982011418899906567", "title": "【解决方案】Vue3多组件异步任务队列", "desc": "最近公司有个需求，是一个移动端页面。一个页面包含多个楼层，每个楼层是一个单独的组件。每个组件内部有自己的弹窗。需要实现每次只能展示一个弹窗，无论点击确认还是取消，关闭上一个弹窗之后，自动打开下一个弹窗"}, {"id": "7004724551272071205", "title": "解决elementUI上传多张图片出现闪动的bug", "desc": "解决elementUI上传多张图片出现闪动的bug 实现效果:上传图片获取到路径过后，展示在image里面，自己手扣的删除及图片渲染"}, {"id": "6997294377554935838", "title": "vue3.0组合式API-useAsync", "desc": "更多文章 前言 承接上篇文章，这里分享useAsync 介绍 useAsync是对接口请求的统一封装，接收一个promise请求，对接口返回数据存储，同时使用try catch捕获服务端或语法上的错误"}, {"id": "6954173708344770591", "title": "手写Vue2.0源码（八）-组件原理 ", "desc": "前言 此篇主要手写 Vue2.0 源码-组件原理 上一篇咱们主要介绍了 Vue diff 算法原理 是对渲染更新的优化 大家都知道 Vue 的一大特色就是组件化 此篇主要介绍整个组件创建和渲染流程"}, {"id": "7000935224754470943", "title": "Electron-vue之登录页面与开机自启动的实现", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 Electron如何加载vue页面的呢 第一步 createWindow()，创"}, {"id": "6986155273140305934", "title": "手把手教你搭建Vue3企业级开发环境", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 本文是一篇白话的技术教程文章，手把手教你搭建一个Vue3+Typescript的开发环境，其中可能涉及..."}, {"id": "6955823017624600583", "title": "微前端落地系列-复盘", "desc": "上图为落地过程中遇到的一些问题，接下来围绕这些问题跟大家分享我的认知体系是如何去解决的 1. 应用权限控制如何做？ 路由权限：比如当用户从门户中登陆后，要访问应用A或者应用A下的某个菜单页面时，但该用"}, {"id": "6844903688297775112", "title": "如何轻松拿到淘宝前端 offer | 掘金技术征文", "desc": "如果你要面试一些大厂，(这里以个人经历的淘宝面试为例)，准备肯定是需要的，就算是网上的各种技术大神，从繁忙的业务项目中脱离，回答一些具体的技术问题时，在没有准备的情况下，也很难回答的出色，毕竟这不像他们写文章或者回答问题时有充足的查阅、消化和总结的时间。 嗯，回到正题，那么我们…"}, {"id": "7002584686232862734", "title": "Vue中的data是什么", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：              8月更文挑战 序言 相信每一个有使用过 Vue 的朋友都对其中的 data 很熟悉，必然使用的，但是一直以来我都有一些疑惑，"}, {"id": "7005065217788870692", "title": "vue 双向绑定源码", "desc": "```js class Watcher { constructor(target, key, cb) { Dep.targetWatcher = this; this.cb = cb; this.va"}, {"id": "6844903688188739591", "title": "麻雀虽小五脏俱全的Vue拉勾项目，看看应该有帮助", "desc": "本项目是本人在闲暇时间编写的一个初级引导项目，麻雀虽小五脏俱全，所使用的东西绝大多数在开发中都能用得到，但难免会存在很多地方需要完善。 由于近期要备战法考，且工作繁忙，没有时间维护，还存在很多BUG或需要优化的地方，希望多多提出（有空了就改），当然能给个star什么的就更好了。…"}, {"id": "6987548503933190181", "title": "vue(utils.js工具类)常用的公共方法的整理", "desc": "vue(utils.js)常用方法的封装,以下是我搜集到的认为vue中可能会用到的一些公共方法的整理，在后面开发过程中遇到的方法或浏览到比较好的方法我会持续补充："}, {"id": "6844903561327820808", "title": "深入理解Vue响应式原理", "desc": "最近一段时间在阅读Vue源码，从它的核心原理入手，开始了源码的学习，而其核心原理就是其数据的响应式，讲到Vue的响应式原理，我们可以从它的兼容性说起，Vue不支持IE8以下版本的浏览器，因为Vue是基于 Object.defineProperty 来实现数据响应的..."}, {"id": "6850418121224912909", "title": "Vue3全家桶 + Vite + TS + TSX尝鲜，先人一步!", "desc": "到这一步，一个Vue3+TSX的项目就搭建起来了，以上配置文件的具体内容就不做解释了。 因为默认项目模板是以src/main.js为入口的，我们需要把它修改为src/main.ts。 这里创建router的方式与之前不同，在vue3中，结合TS的类型推断，开发效率会高很多。 v…"}, {"id": "6847902223918170126", "title": "Vue Composition API 和 React Hooks 对比", "desc": "minix 与组件之间存在隐式依赖，可能产生冲突。倾向于增加更多状态，降低了应用的可预测性 ... React Hooks 允许你 \"勾入\" 诸如组件状态和副作用处理等 React 功能中。Hooks 只能用在函数组件中，并允许我们在不需要创建类的情况下将状态、副作用处理和更多…"}, {"id": "6987018468054958117", "title": "Vue实现登录记住账号密码功能", "desc": "使用本地缓存的技术（localStorage和cookies）将用户的登录账号密码保存起来，方便下次直接使用。"}, {"id": "6922278949058215949", "title": "几种解决 element-ui 的 el-upload 组件上传文件跨域问题的方法", "desc": "最近在开发基于 SpringBoot 和 Vue 的前后端分离项目的时候，在使用 element-ui 的 el-upload 组件的时候遇到了跨域的问题，尽管之前我也写过一篇关于解决跨域问题的文章，但是发现还是无法解决使用 action 时的跨域问题，因此本文将基于后端 Sp…"}, {"id": "6982004709145968677", "title": "[建议收藏] 你想知道的Vue3核心源码这里都有", "desc": "Effect、Reactive、Watch、Computed、Mixin、Vuex4、Diff算法优化，你想看的Vue3核心源码这里都有，建议收藏！！"}, {"id": "6966803203467771912", "title": "VUE3.0 Composition API（组合API）和3.0中vuex的使用", "desc": "vue3.0中新增了非常多的组合API，组合式API受到了 React Hooks 很大的启发。 由于在setup中没有this，所以数据想要响应到template中必须使用相关api的帮助"}, {"id": "6985349983662768141", "title": "Vue3.x和Vue2.x共存基础上进行构建项目", "desc": "由于本地环境中全局安装了vue2.x，且还有很多项目都是vue2.x，因此想兼容vue2.x与vue3.x的脚手架，这样可以灵活切换自如的玩耍......"}, {"id": "6911209139834191886", "title": "Vue.extend 登录注册模态框", "desc": "模态框是我们 UI 控件中一个很重要的组件，使用场景有很多种，我们在 Vue 组件中创建模态框组件而用到的一个知识点是利用 Vue.extend 来创建。 在最近在做一个常用的类似下面的登录/注册业务场景时，利用 Vue.extend 来改善我们的代码，使我们代码逻辑更清晰化。…"}, {"id": "6979041003575443486", "title": "Vue2 代码转换为 Vue3 原理剖析—— eventHub 篇", "desc": "前言 几天前我们发布了《阿里妈妈又做了新工具，帮你把 Vue2 代码改成 Vue3 的》，这篇文章分享一下其中一个转换规则：eventHub（或称为 eventBus）的转换的思路。 Vue 官方的迁"}, {"id": "6844904070872825870", "title": "高级 Vue 技巧：控制父类的 slot", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 最近一位同事问我这个问题，答案很简单：可以的。但我的解决方案可能和你想的完全不一样，这是涉及一个棘手的Vue架构问题，但也是一个非常有趣的问题。 在我们的应用程序中，我们有一个顶部栏，其中包含不同的按钮、搜索栏…"}, {"id": "6844903812797333512", "title": "【Vue原理剖析】Object的变化侦测", "desc": "正则表达式的基本使用。（例如分组） 首先，我们按照以下代码创建一个HTML文件，本文主要就是教大家如何实现以下功能。 我们都知道，vue是基于MVVM设计模式的渐进式框架。那么在JavaScript中，我们该如何实现一个MVVM框架呢？ 实现一个Watcher 侦听器。讲Com…"}, {"id": "6903725986567684109", "title": "简单构建 ThinkJS + Vue2.0 前后端分离的多页应用", "desc": "最近在使用 ThinkJS + Vue2.0 写一个简单的项目，该项目分为用户端和管理界面，分别对应 vue 的两个页面index和admin，用户端、管理界面自身是基于 vue 构建的单页应用，服务端采用 thinkjs 的提供 api。 直接使用 vue 官方的 vue-c…"}, {"id": "6844903965943922695", "title": "漫漫人生路，走走又停停", "desc": "转眼之间，已经过去了一个多月了，自从上次到达济南之后，又继续走了很多个城市。目的地是杭州，但是到达之后并没有太多的激动心情 漫漫人生路，一段接一段。走下去，停下来，做自己想做的事实属不易。愉快悲伤，在身边转又转，一路辛徒都有所得。 南京1912的风格有点民国时期的感觉。而且据说…"}, {"id": "6844903576838340621", "title": "express+mongodb+vue实现增删改查-全栈之路", "desc": "最近一直想学下node,毕竟会node的前端更有市场。但是光看不练，感觉还是少了点什么，就去github上看别人写的项目，收获颇丰，于是准备自己照葫芦画瓢写一个。 作为程序员，一定要保持不断学习的状态，这样我们才可以在职场中有一席之位。 我相信现在出去面试，被问到的问题一定不限…"}, {"id": "6844903588817289224", "title": "前端笔试题面试题记录（下）", "desc": "接上篇前端笔试题面试题记录（上）。趁清明小长假，把上篇剩下的部分也写一下，因为最近比较忙这篇已经拖了很久了。现在刚刚开始银四了，应该还是有些小伙伴在找工作，时间还不算太晚，希望本篇可以帮到这些小伙伴。 在同一个作用域里面：var可以重复声明变量，let不能重复声明同一个变量。 …"}, {"id": "6844903607003774983", "title": "可能是 GitHub 上第一款 Vue 全家桶 + TypeScript 的完整项目", "desc": "基于Vue.js的2.5.13版本和TypeScript编写的模仿原生应用的WebApp. 建议直接添加到主屏幕(ios端体验差一些). 学习vue全家桶，本人很长一段时间在用React。 利用PWA技术来模仿原生应用,来探究PWA与原生的差异。 作者声称2.5之后vue增强了…"}, {"id": "6844903879788724238", "title": "9012年了你还在用单色图标？(iconfont多色图标详解)", "desc": "多色图标出来已经很久了，现在才拿出来说貌似有点过时... 但为了方便自己以后知道怎么使用，也为了让更多刚入门的新手熟悉iconfont，还是决定写一篇比较详细的文章来记录它的使用方式。 在iconfont官网上创建一个自己的账号，并创建一个项目。在官网上挑选响应的图标添加进项目…"}, {"id": "6844903509607858189", "title": "基于 Vue 配置 axios", "desc": "1、背景在项目开发中ajax请求是必不可缺少一部分ajax请求不需要loading或则请求时间少于多少是不显示loading项目中对请求的同一化处理（错误处理，返回数据格式化处理，loading处理，"}, {"id": "6981254826709483550", "title": "1x0 精读Vue官方文档 - 组件注册", "desc": "精读 Vue 官方文档系列 🎉 组件命名 组件命名方式有两种： kebab-case : 短横线分隔命名(烤肉串式)，字母全小写，单词与单词之间用“连字符”链接。 PascalCase : 驼峰命名法"}, {"id": "6995553277941121060", "title": "vue原理解析(三)：实现一个VDOM, 必须了解的vue原理面试题（建议收藏）", "desc": "实现一个VDOM VDOM：简单来说就是一个js对象，它可以用来描述当前DOM长什么样子。 优点： 1.大多数情况下，提供了比暴力刷新整个dom树更好的性能。因为js的执行速度是非常快的，但是操作do"}, {"id": "6890189256434647054", "title": "vue渲染过程解析-VDOM&DOM", "desc": "从上篇文章《编译过程解析》中，我们了解到HTML模板经过编译，最终会生成一个render函数。render函数的主要功能是生成vnode。在vue的渲染过程中总共涉及两大工作：创建vnode和创建DOM节点。本篇文章作为上一篇的延续，重点聊聊渲染过程的实现。 大家知道一个复杂的…"}, {"id": "6850037268283916295", "title": "完全理解vue的渲染watcher、computed和user watcher", "desc": "这篇文章将带大家全面理解vue的渲染watcher、computed和user watcher，其实computed和user watcher都是基于Watcher来实现的，我们通过一个一个功能点去敲代码，让大家全面理解其中的实现原理和核心思想。所以这篇文章将实现以下这些功能点…"}, {"id": "6990588342546989087", "title": "Vue之Vuex", "desc": "1.Vuex安装 【NPM】 【Yarn】 【备注】有的时候在构件Vue项目时，Vuex在项目创建时已经同步安装，并创建相应的文件目录结构，无需在单独安装。当前内容前半部分时基于单独安装Vuex说讲述"}, {"id": "6980353592477630472", "title": "学习Vue3.0从环境开始", "desc": "Vue3.0生态大行其道。而学习一门语言的开始便是环境。本文就 Vue3.0 的环境搭建开展。 参考文献 vue3.0官网 Vue3.0 的四种安装方法 在页面上以 CDN 包的形式导入。 *使用： "}, {"id": "6844904058759675918", "title": "Vue图片浏览插件v-viewer的使用", "desc": "在项目中点击小图查看大图，对大图进行旋转、放大、缩小是个很常见的需求，今天就跟大家分享下v-viewer插件如何在vue项目中使用。先看下最终实现的效果(图片较大，点击链接进行查看)"}, {"id": "6858234998605938702", "title": "slot插槽——Vue组件封装利器", "desc": "组件化是Vue中非常核心的概念，如果想要组件化，那必须要对组件进行封装。 而想要封装组件，那你一定要了解slot才能更好进行封装。"}, {"id": "6844904185423462408", "title": "Vue动态组件 & keep-alive", "desc": "在 vue 中，实现 Tab 切换主要有三种方式：使用动态组件，使用 vue-router 路由，使用第三方插件。本文将详细介绍Vue动态组件。所谓动态组件就是让多个组件使用同一个挂载点，并动态切换。 通过使用保留的 <component> 元素，动态地绑定到它的 is 特性，…"}, {"id": "6994568856807145479", "title": "Vue、React 也可以互相引用？｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 Vuera 可以使 Vue 和 React 开发的组件相互混用。 当已经有成熟的 React 组件或某个开源组件不是用你使用的技术栈 "}, {"id": "6844903618777186311", "title": "基于Vue的SPA如何优化页面加载速度", "desc": "..... 2. 静态文件本地缓存有两种方式 而开启GZip压缩和使用SSR原理都比较简单，我们很容易想到这两种方式是如何提高页面加载速度的。 但是除了上面几种方式，另外一种优化方案也不容小觑，这也是我在近期项目开发中使用并理解到的。我们先说说通常项目中是如何加载页面数据：Vu…"}, {"id": "6904618015619448840", "title": "写在Vue的第一次体验", "desc": "从周一装好Vue环境，到今天，看语法，看公司项目，都觉得无从下手。直到今天网上找到一个小demo下来改改，增加一点功能，不懂得地方问问大佬，遇到了一些语法概念，才感受了入门的感觉。"}, {"id": "6993608346188120101", "title": "vue3 + ts(typescript) ref 获取单个/多个dom元素", "desc": "vue3 + ts(typescript) ref 获取单个/多个dom元素 template setup"}, {"id": "6998461369620594695", "title": "Vue | 使用less全局变量", "desc": "在vue项目中使用less全局变量配置 1. vue-cli2中通过sass-resources-loader 2. vue-cli3中通过style-resources-loader"}, {"id": "6933082486096429070", "title": "Vue3疑问系列(3) — v-show指令是如何工作的？", "desc": "根据上2篇文章的讲解,指令的工作原理明白了, 那接下来就是实战篇. 本文的实战不是我们工作的业务场景使用指令实战,而是Vue3中内置的vShow指令的解读. 看看尤大是如何编写vShow指令的. 我们知道指令的作用就是在元素安装、更新、卸载时分别调用不同的钩子,我们开发者在不同…"}, {"id": "6995067633372495903", "title": "回首Vue3之组件篇（二）", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 这篇文章我们来讲一下内置组件transition和transition-group的使用方法，在使用它们的时候我们又该注意什么呢，下面让我"}, {"id": "6844903647629803534", "title": "vue如何刷新当前路由（router）页面的方法", "desc": "在处理列表时，常常有删除一条数据或者新增数据之后需要重新刷新当前页面的需求。 2.遇到的问题 1. 用vue-router重新路由到当前页面，页面是不进行刷新的 2.采用window.reload()，或者router.go(0)刷新时，整个浏览器进行了重新加载，闪烁，体验不好…"}, {"id": "6844903623483195399", "title": "nuxt缓存实践", "desc": "nuxt是基于vue的ssr解决方案，可以是使用vue语法完成前后端的同构。 在高并发的情况下可以考虑使用缓存，而缓存策略的使用需要视场景而定，这里不再赘述，还可以考虑使用pm2开启集群模式去管理我们的进程，从而满足更高的并发。"}, {"id": "6882914212655005709", "title": "微信公众号开发weixin-js-sdk实现自定义分享", "desc": "前段时间开发的公众号，有一个自定义分享功能，今天分享一下代码和开发中遇到的问题，避免踩坑。 微信公众号开发需登录才能获取appid，此文章只有分享部分代码，授权采用静默授权，后台提供的接口，我这里只负责调用。 哪个页面需要分享就把这个代码放在哪个页面，由于我这个分享出去的页面不…"}, {"id": "6989483587804332040", "title": "driver.js 源码增加跳过事件回调 （vue新手引导", "desc": "给新手引导插件——driver.js，增加跳过按钮的事件回调，区分完成与跳过的事件回调，方便在vue中使用。"}, {"id": "6861737267426394125", "title": "图解 Vue 异步更新", "desc": "上一篇 图解 Vue 响应式原理 中，我们通过 9 张流程图，理解了 Vue 的渲染流程，相信大家对整个 Vue 的渲染流程有了一定的了解，这一篇我们来重点关注一下 Vue 异步更新原理模块。 本文主要分析 Vue 从 Data 更新，到通知 Watcher 异步更新视图的流程…"}, {"id": "6844903620438147085", "title": "基于Vue的点对点聊天项目", "desc": "一个基于平台内部的聊天项目，需要实现用户之间可以相互聊天发送消息，可以添加好友等功能。且消息必须是实时性的，并且用户下线后再次上线可以接受离线消息。"}, {"id": "6976611999757107231", "title": "Vue3类型判断和ref的两个作用", "desc": "“这是我参与更文挑战的第6天，活动详情查看： 更文挑战” 1.类型判断的四种方法 2 ref监听数据的变化 3. ref获取页面中的元素"}, {"id": "6844904096504233998", "title": "vue-cli3项目 升级到 vue-cli4 的方法总结", "desc": "这是我对以前配置的基于vue-cli3搭建的前端H5模板的升级，主要把vue-cli3项目升级为vue-cli4，并删除一些过时插件。插件版本升级到当前(2020-03-19)最高版本（升级了很多webpack插件版本），升级完后新加多域名代理配置，官方升级文档点我点我 按着官…"}, {"id": "6844903921543200775", "title": "vue-video-player使用心得（兼容m3u8）", "desc": "下载vue-video-player在main.js文件引入在页面中引入在页面中data中配置挂载视频组件（非必须）不写这一步也可以实现播放，添加这个是为了自定义按钮使用官方文档不需要兼容m3u8的，"}, {"id": "6844903572950220807", "title": "从零开始搭建一个vue项目", "desc": "具体怎么安装nodejs和vue-cli的部分就不再具体说明了，查看官方文档按步骤执行即可（安装nodejs会默认安装npm（包管理工具），vue-cli依赖npm来安装，注意这个先后关系）。 关于什么是模块化？推荐阅读这两篇文章 JavaScript 模块化入门Ⅰ：理解模块 …"}, {"id": "6979154044719742990", "title": "Vue2源码分析(一)", "desc": "1.项目搭建 2.对象，数组数据劫持 3.数据代理 4.模版编译-->模版解析-->构建AST树-->codeGen生成-->虚拟DOM-->挂载"}, {"id": "6844903613924392974", "title": "Vue的自定义滚动，我用el-scrollbar", "desc": "基础笔记的github地址：https://github.com/qiqihaobenben/Front-End-Basics ,可以watch,也可以star。 最近在写一个内部平台系统，相信大家都知道，其中会有很多自定义的滚动区域，就比如说现在有一个列表需要滚动，第一个念头…"}, {"id": "6995172395476746271", "title": "vue3学习 --- 脚手架", "desc": "在真实开发中我们不可能每一个项目从头来完成所有的webpack配置，这会使我们的开发效率大大的降低。所以在真实开发中，我们通常会使用脚手架来创建一个项目通用模板，并在此基础上进行二次开发。"}, {"id": "6844903956867448840", "title": "vue+element-ui实现动态的权限管理和菜单渲染", "desc": "前言：项目地址：https://github.com/cgq001/vue-admin欢迎star, 留着也许就用到了，毕竟权限管理 还是很普遍的嘛使用到的规则1、动态设置权限的UI展示2、将侧边导航"}, {"id": "6997660598913728548", "title": "可复用 & 组合--③：自定义指令", "desc": "自定义指令 简介 除了默认内置的指令（列如 v-model 和 v-show），Vue 也允许注册自定义指令。"}, {"id": "6934675768643420174", "title": "Vite2.0搭建Vue3.0应用实践", "desc": "最近Vite2.0很火热，说是要替代webpack作为下一代前端构建工具。上个周末搬完房子仔细研究了一下，照着我们目前的项目环境，尝试搭建了一套基础环境,简单了解了Vite2.0的配置，以及各种库的集成。这里对Vite2.0不做过多的介绍，主要优点就是快，快，快。 在终端,输入…"}, {"id": "6986931172815142943", "title": "Vue路由", "desc": "Hash模式 vue-router默认使用是Hash模式，Hash模式主要是通过url中的hash值来变化的。Hash（即#）是url的一个锚点，代表的是网页中的一个位置，当hash值变化时，浏览器就"}, {"id": "6844904102841810952", "title": "Vue高级指南-02 Vue.js源码深入解析", "desc": "目前社区有很多 Vue.js 的源码解析文章，很多大牛写的都非常详细，但说到底。光看文章自己不去研究源码和总结笔记，终究不会深入了解和记忆。 本篇文章将自己研究 Vue.js源码的一些内容做成笔记并且记录下来。加深印象和理解，俗话说读书百遍不如手写一遍。 MVC模式是指用户操作…"}, {"id": "6989409760990724103", "title": "VUE3（二十七）自定义upload上传组件（显示上传进度）", "desc": "项目中需要使用到文件上传。我这里自己定义了一个上传文件的组件 支持显示上传进度显示（我这里显示的是真实的上传进度，当然，这个可以根据你自己的需求修改）。 支持多文件上传。 最终效果如下： 代码： Up"}, {"id": "6950088782381056013", "title": "VUE组件间通信方式总结", "desc": "props和$emit父组件向子组件传值在父组件中通过props来把数据传入子组件父组件中在子组件标签中添加自定义属性，并通过 v-bind 动态赋值绑定要传给子组件的值子组件中通过props选项来拿"}, {"id": "6854573210717929480", "title": "Vue3.0文档 VS Vue2.x文档 有哪些不同", "desc": "尤大宣布 Vue3.0 已经进入候选阶段【贺电】！！！现在也可以提前试用，通过 Vite 直接初始化一个项目。 Vue3.0 的文档 Beta 版也已上线，感兴趣的小伙伴可以先睹为快。另外指路 ➡️ 之前发布过的 Vue3 的部分 API 手册，里面包含了重难点响应式系统 AP…"}, {"id": "6931160126837489678", "title": "一个 Vite 插件，统一团队规范，不做重复的事", "desc": "安装 convue. convue 提供了一套初始化项目的脚手架工具，目前支持 sfc (vue 单文件) 形式和 tsx 方式两种开发模式。 convue 采用约定式的目录形式，因此我们需要遵守这一套开发方式.往往在项目中要做到统一规范，提高效率，这是一种有效的措施。 如果需…"}, {"id": "6844903858611683336", "title": "细谈 vue - transition 篇", "desc": "本篇文章是细谈 vue 系列的第三篇，这篇文章主要会介绍一下 vue 的内置组件 transition 。前几篇链接如下 自动嗅探目标元素是否使用了 CSS 过渡或动画，如果使用，会在合适的时机添加/移除 CSS 过渡 class。 如果过渡组件设置了 JavaScript 钩…"}, {"id": "6844903590046203918", "title": "改造vue-cli,使用mockjs搭建mock server", "desc": "最近准备开发一款web应用，考虑到可能会有前后端并行开发的场景,所以决定使用mockjs做mock server。 浏览官网文档时发现没有跑在webpack上的例子，索性自己找方法解决。 这时可以考虑前端搭建web server自己模拟假数据,mockjs用来生成随机数据,拦截…"}, {"id": "6844903702462119950", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi+二期项目结构文件搭建+以及路由的使用", "desc": "前言昨天写了vue+ts+vuecli3.0第一场主要是一个vuecli搭建的内容，今天讲一下vue项目结构搭建+以及路由的使用，看了一个小伙伴$refs报错问题有大佬可以回复我一波困扰已久，伸手党本"}, {"id": "6993580619418566670", "title": "Vue渲染指令(三)", "desc": "在此之前我们已经讲过了基本配置以及事件绑定，今天搞搞渲染指令。主要有条件渲染，列表渲染，更新检测 条件渲染 指令 v-"}, {"id": "6963429394102616077", "title": "Vue3+Typescript 踏坑小记", "desc": "本文学习过程中遇到的一些问题和相应的解决方案，不一定是最佳解决方案。如有更好的解决方案，欢迎评论区留言讨论。Vue3 Vue2 迁移 Vue Router 4 Typescript"}, {"id": "6875492931726376974", "title": "Vue的nextTick具体是微任务还是宏任务?", "desc": "官方解释 - 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。 基于不同时期的源码，会有不同的答案。 实际上，nextTick在vue发展的不同版本中，针对各种渲染和dom事件问题进行了多次调整。宏/微任务，甚至两种并行。在最新版本…"}, {"id": "6993120002828140575", "title": "vue3前端青铜到黄金王者 - 第三个入门v-on指令监听事件", "desc": "今天学习v-on。给HTML标签的绑定事件。<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.<script src=\"/vue3.1.5_vue.global.const url = 'http..."}, {"id": "6999293509941329927", "title": "Vue源码学习系列 一", "desc": "前言 作为一名前端开发，日常开发用到的技术栈有vue和react,各有千秋，我第一份工作用的技术栈就是vue，对齐用法也算比较清晰了， 但是有时候吧，用到它的一些生命周期或则api不知所然，碰到一些问"}, {"id": "6944962862410367006", "title": "我在vue移动端项目中如何实现页面缓存", "desc": "在移动端中，页面跳转之间的缓存是必备的一个需求。 例如：首页=>列表页=>详情页。 从首页进入列表页，列表页需要刷新，而从详情页返回列表页，列表页则需要保持页面缓存。 对于首页，一般我们都会让其一直保持缓存的状态。 对于详情页，不管从哪个入口进入，都会让其重新刷新。 说到页面缓…"}, {"id": "6985335132399878180", "title": "vue-trackjs 自定义指令轻松实现前端埋点", "desc": "埋点技术，即在正常的功能逻辑中添加统计逻辑，进行数据收集，后续经过各种自定义的数据整理，为对应的产品提供数据分析，实现数据可视化。 常见的前端埋点技术有：代码埋点、可视化埋点、无埋点。 代码埋点"}, {"id": "6901593859717857288", "title": "Vue3有哪些不向下兼容的改变", "desc": "作为技术人员，随时保持技术同步是很重要的事情。虽然Vue3已经发布很长时间了，现在开始保持更新也还不晚。新项目可以拿来练练手XD，老项目就不建议升级了。本篇文章整理自官方文档-BreakingChanges部分 1. 使用 vite-app 这里的vite-app是一个新项目，…"}, {"id": "6913198785904672781", "title": "VITE2.0 +VUE 3.0 +jsx/tsx 工程化开发", "desc": "VUE 3.0带了一些振奋人心的更新，最让人激动的莫过于composition api，使用composition api我们可以用一种全新的逻辑去组织代码，让代码变得更易读，更好维护。 在使用VUE 3 的过程中，我们发现使用composition api，jsx/tsx无疑…"}, {"id": "6844903617762492423", "title": "来聊聊源码学习", "desc": "现如今我们的开发工作并不会从零开始，往往会基于很多开源库，就前端而言，构建工具我们会使用 webpack，MVVM 框架我们会使用 Vue、React 或者 Angular，这些开源工具帮助我们大大提升了生产效率。 通常我们学习一个开源项目的步骤都是先去阅读它的官方文档，下载安…"}, {"id": "6929475332240048135", "title": "vue登录页实现使用cookie记住7天密码功能（思路）", "desc": "项目的登录页中，会有要求记住7天密码的功能，本篇文章记录一下写法，主要是使用cookie，注释我写的很详细了，大家可以看一下我写的注释的步骤，还是比较详细的。亲测有效 其实也很简单，就是设置一个过期时间，也就是cookie的失效的日期，当然中间需要有一些格式的处理，数据的加工。…"}, {"id": "6994073360707616781", "title": "LOLstyle-ui组件开发实战（四）—— Radio-group组件", "desc": "radio-group组件是再radio组件上进行优化的，它的目的是在我们使用radio组件时，不必给每个组件都添加一个v-model，而是通过绑定一个v-model来实现数据绑定。"}, {"id": "6989534375066992647", "title": "vue自我修养", "desc": "vue自我养成记 记录自己在开发中的从0到1的过程。统计业务常见的功能，提升开发效率，独立思考，解决问题，提高自己"}, {"id": "6992502285305643021", "title": "vue模板编译（原理篇）", "desc": "概念 平时使用模板时，可以在模板中使用变量、表达式或者指令等，这些语法在html中是不存在的，那vue中为什么可以实现？这就归功于模板编译功能。 模板编译的作用是生成渲染函数，通过执行渲染函数生成最新"}, {"id": "6854573219970564104", "title": "【vue系列】从发布订阅模式解读，到vue响应式原理实现（包含vue3.0）", "desc": "事情是这样的，技术群里有小伙伴想让笔者讲讲发布订阅、观察者模式、以及vue3 改用了proxy之后，发布订阅有什么改变。虽然最近挺忙的，但是既然笔者应允了，就不能食言。 于是就有了这篇，笔者会从发布订阅模式的基础实现，到 Vue 中 EventBus 中的发布订阅模式实现，再到…"}, {"id": "6989465557296742430", "title": "Vue源码解析：详解数据初始化过程及computed实现原理", "desc": "本章知识要点： 生命周期和事件机制的初始化过程是怎样的？ 父组件如何快捷监听子组件的生命周期触发事件？ inject/provide的computed、watch等是如何实现的"}, {"id": "6985817257544941581", "title": "从函数式组件引发的性能思考", "desc": "vue函数式组件大部分人在开发过程中用到的不多，就连官方文档位置放置的也比较隐晦，但是在我们对项目做性能优化时，却是一个不错的选择。"}, {"id": "6979145924358438948", "title": "Vue.js常用知识点，你都掌握了么？", "desc": "做了多年的前端开发，Vue.js也用了好几年啦，总结了些常用的知识点纪录下来，方便自己查看。 常用指令 v-once 进入页面时 只渲染一次 不在进行渲染 v-cloak 防止闪烁 v-pre 把标签"}, {"id": "6923775676587704327", "title": "这里有一篇关于nextTick你所要知道的东西~", "desc": "我自己本身的技术栈是Vue，之前也多多少少在看了一些关于Vue的源码层面的东西。虽然进了公司以后用的是React，但是我觉得学什么技术栈并不是最重要的，最重要的是我们在学习的过程中去弄懂它的原理，我们看源码也不是为了看而去看，更重要的是去学习人家的设计思想和设计理念以及编码风格…"}, {"id": "6894506232359436295", "title": "Vue项目首屏加载速度优化", "desc": "一、路由懒加载1、作用提升用户体验，提升首屏组件加载速度，解决白屏问题2、代码示例2.1未使用路由懒加载2.2使用路由懒加载二、组价懒加载1、代码示例1.1原本写法1.2组件懒加载写法三、通过线上引入"}, {"id": "6991754201873268749", "title": "Vue3.0 的新特征 | Vue3.0 面试题总结", "desc": "Vue3.0 从整体来说，既修改了 Vue2.x 时期遗留的一些缺陷，又引入了 组合式 API 、自定义渲染 API 等新特性。"}, {"id": "6844904074140188680", "title": "Vue组件化开发之通用型弹出框", "desc": "相信很多刚入门的小伙伴，经常会写很多重复的代码，而这些代码一般情况下也都是大同小异，在这种情况下，如何让开发和学习变得更加高效，组件化的思想就显得尤为重要。这里通过设计一个简单的弹出框，给小伙伴们分享组件化的应用。 在实际的开发中，我们应该避免去编写重复的代码，将精力放在更…"}, {"id": "6844903582701993997", "title": "技术胖的Nuxt.js 入门视频教程【共11集】，让你玩转Vue.js 的SSR渲染", "desc": "11集图文视频教程，带你点亮Nuxt.js的技能。Nuxt.js简单的说是Vue.js的通用框架，最常用的就是用来作SSR（服务器端渲染）。再直白点说，就是Vue.js原来是开发SPA（单页应用）的，但是随着技术的普及，很多人想用Vue开发多页应用，并在服务端完成渲染。"}, {"id": "6844903721437003784", "title": "VUE CONF大会之后的感想(非技术)", "desc": "应该不止一次参加这样全国规模的前端会议了，从六年前踏入前端到今天依然在带一个前端小组在夜以继日的写业务代码。在会议中会因为切实的大佬对技术的独到观点而兴奋而替他们高兴、会因不同团队对前端轮子创造的充实和自豪感、会因他们对技术前驱的倡导而膜拜。是的，我整个会议议程听下来是这三种感…"}, {"id": "6844903834263764999", "title": "用vscode开发vue应用", "desc": "现在用VSCode开发Vue.js应用几乎已经是前端的标配了，但很多时候我们看到的代码混乱不堪，作为一个前端工程师，单引号双引号乱用，一段有分号一段没有分号，有的地方有逗号有的地方没有逗号，空格回车都对不齐，还说自己做事认真，这不是开玩笑的事情。"}, {"id": "6844904206105772046", "title": "不会吧！都2020年了你还不会这些VUE面试题？", "desc": "面试中可以问的问题很多，最近几年，我也面试，或者视频面试过很多工作 2-4 年的前端，我一般会抓住他们做的项目，进行更详细的追问。所以，初中级前端面试的时候，除了掌握基础知识之外，项目中用到的技术要理清楚，假如你项目中用到的技术，问的时候却一问三不知，那么，基本上就会 pass…"}, {"id": "6991751771458797576", "title": "vue中容易被忽略的那些小细节【持续更新中】", "desc": "1. 定时器 很多时候我们可能会有写定时器的需求（比如有个轮播图的任务），当我们离开这个页面时，你会发现定时任务还在跑，浏览器的性能炸了。 我们可以这么解决： 最重要的就是 就在当我们离开这个页面（组"}, {"id": "6993108604882518053", "title": "Vue事件绑定(二)", "desc": "上一篇我们讲到了Vue的基本配置，有了配置总得搞点东西玩玩是吧。今天来搞搞事件啊，说不多说，直接开搞。 事件处理 概念 在vue中可以"}, {"id": "6962145835224301598", "title": "如何使用Vue集成其它UI组件？如何阅读UI官网？移动端组件Vant实例教程（熬夜干货）", "desc": "前言 首先，我是一个全栈小白，我的前端很菜，我本就是一个后端开发者，凭啥写前端的东西，我也很纳闷，公司本来说我写接口就可以了，然而呢？生活就是如此，套路啊！你可以不信我的教程，但不能不相信官网，哈哈哈"}, {"id": "6844904016288350216", "title": "Vue实现渲染数据后控制滚动条位置📜", "desc": "需求场景如下:实现了消息发送，如果容器内消息过多，会出现滚动条，最新的消息位于最底部，不能及时出现在可视区域内，此时就需要在渲染列表后，将滚动条的位置定位到最底部。先来看看最终实现的效果 使用setTimeout()，将DOM操作改为异步(我的解决方案)。"}, {"id": "6844903588586586126", "title": "聊聊 cube-ui 的技术内幕", "desc": "cube-ui 是滴滴去年底开源的一款基于 Vue.js 2.0 的移动端组件库，主要核心目标是做到体验极致、灵活性强、易扩展以及提供良好的周边生态—后编译。 自 17 年 11 月开源至今已有 5 个月，在这个过程中 cube-ui 受到了不少的关注，同时从社区中也收到了很多…"}, {"id": "6962038712905498631", "title": "讲真：Vue图片懒加载怎么做?", "desc": "图片懒加载大家都很熟悉了，优点如下： 提升页面渲染效率，避免大量图片加载造成页面卡顿。 按需加载，减少无效的图片加载，节约网络资源。 本文将使用vue自定义指令的方式，实现图片懒加载的功能。要点"}, {"id": "6999654362825883662", "title": "Vue项目实战(2)", "desc": "这是我参与 8 月更文挑战的第 3 天，活动详情查看： 8月更文挑战 封装请求模块 项目中需要通过接口进行数据请求，为了方便操作，需要封装用于请求操作的函数。 在Vue.js中通常搭配Axios进行A"}, {"id": "6844904080955932685", "title": "打通Vue开发前后台业务的任督二脉", "desc": "本文会在宏观视野上，讲述从全栈开发到整栈开发的能力，会展示一个简单的后台开发项目片段，其中采用了element-ui作为后台界面开发框架，会分享前后台通信之间的API设计经验，以及vue3.0中使用proxy代理服务解决跨域问题。 先创建三个项目目录，这里以ele为例，分别创建…"}, {"id": "6964666440771338248", "title": "从Vue2.x源码中看到的知识点", "desc": "构造函数 我们使用vue时，会使用 这里生成了一个Vue实例，显然Vue是一个ES6的class或者是构造函数。查看源码看到是一个构造函数。 在Vue源码中，是使用了ES6语法的，但这里面没有用cla"}, {"id": "6960129244076703757", "title": "vue3.0中为啥要删除过滤器功能，因为功能重复吧？", "desc": "问题描述 去年，也就是2020年9月份，vue3出来了。增加了很多新功能，但是也删掉了一些功能。比如删掉了vue2中的过滤器filter功能。与此同时，官方建议：用方法调用或计算属性替换过滤器。 wh"}, {"id": "6844903854581121037", "title": "vue全家桶+Echarts+百度地图，搭建数据可视化系统（【续】接口篇）", "desc": "实现数据监控的系统。有线图、柱状图、地图，并具有定时刷新的功能。 上一篇介绍了 1-6 部分。本篇将介绍一下剩下的 7-10 部分。 主要内容是 对数据的处理方式 和 整体的数据逻辑 。 望各位看官多提 建议和不足 哈，也希望能本篇能给需要人带来 启发。 成品效果图不方便发，还…"}, {"id": "6844903624066203661", "title": "鹅厂视频部笔试及面试问题整理", "desc": "最近有小伙伴在群上和后台私信我说想要点面经，今天给大家整理了一下真实面试问题。 至于笔试题，直接在公众号后台回复「腾讯视频笔试题」即可，整理压缩成图片了。 还有想要系统性学习 JavaScript 的童鞋，直接在公众号后台回复「js学习路线」，也整理成图片方便大家保存阅读了。 …"}, {"id": "6906508256479772685", "title": "vue源码分析（十二）", "desc": "当完成了首次的渲染之后，组件的响应式数据发生了更新，再次触发了渲染watcher的getter，也就是调用了 vm._update(vm._render(), hydrating)调用update的这一过程就是组件更新的过程。_update函数首先通过const prevVno…"}, {"id": "6844903591195443214", "title": "从单向到双向数据绑定", "desc": "用户最满意的，无非就是界面的操作能实事反应到数据。而实现这种的可以有双向数据绑定、单向数据流的形式。双向数据绑定是，ui行为改变model层的数据，model层的数据变了也能反映到ui上面。比如点击按钮，数字data+1，如果我们自己在控制台再给data+1，那么v层也能马上看…"}, {"id": "6935744599134568478", "title": "Vue3组件（七）封装选择类的组件", "desc": "就是一个单独的CheckBox，这个一般用在用户注册的时候，选择同意条款的地方。 一个方框，打个勾勾就可以用软件，否则不让你用。 特点就是返回true和false。 共用函数都已经分离出去了，所以这里设置一下模板就好。 可能是UI库觉得框框打对号不好看吧，于是做了这种开关的方式…"}, {"id": "6994431868506636319", "title": "深入浅出 | 重新认识Vue", "desc": "重新认识 Vue 一、引言 ​ 写在前面：（以下内容主要针对Vue2版本展开） ​ 提起Vue，人们往往会说出MVVM模式，数据双向绑定，数据劫持等等。但你们是否真的了解Vue？尝试了解以下的问题可以"}, {"id": "6917931182718107662", "title": "el-dialog 填写表单时，蒙版下面的列表跟着变化", "desc": " 1.使用JSON.parse(JSON.stringify(row))   JSON.parse(JSON.stringify(row))一般用来深拷贝，其过程就是利用JSON.stringify将"}, {"id": "6994402605854113799", "title": "从snabbdom理解VDOM", "desc": "序言 Vue 的三大核心，响应式，VDOM，模板编译，我们之前有研究过响应式了，接下来就是研读 VDOM 了，于是我决定从 VD"}, {"id": "6844903922579030024", "title": "摩拜前端周刊第22期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～深入JavaScript设计模式，从此有了优化代码的理论依据地址:https://"}, {"id": "6899710963147079693", "title": "vue源码分析（六）", "desc": "局部注册会通过Vue.extend中的mergeOptions(Super.options,extendOptions)函数进行配置的合并，其中extendOptions是组件传入的内容。 在调用createComponent的时候，如果是一个异步组件。那么会先调用resolv…"}, {"id": "6914845442777808910", "title": "Mock", "desc": "1. 搭建vue脚手架 2. 安装项目项目所需要的相关依赖 3. 在项目根目录下创建.env.development文件 4. 创建mock文件 在目录mock里面新建index.js文件 5. 创建json5数据源文件 6. 新建vue.config.js配置文件 7. 发送…"}, {"id": "6906412723350405128", "title": "② Vue基础语法 - 渲染类型🤞", "desc": "1. 声明式渲染 这种声明式渲染的时候可能会因为网络卡顿，无法渲染出数据的时候会把模板语言标签直接渲染出来，或者本地刷新的时候会有一瞬间看见模板标签一闪而过的迹象，这种现象产生的原因是 Vue 尚未编译到关联实例的时候，指令还无法被解析而造成的。 Vue提供了一个v-cloak…"}, {"id": "6844903689090514958", "title": "从头开始学习Vuex", "desc": "当我们的应用遇到多个组件共享状态时，会需要多个组件依赖于同一状态抑或是来自不同视图的行为需要变更同一状态。以前的解决办法： 传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。在搭建下面页面时，你可能会对 vue 组件之间的通信感到崩溃 ，特别是非父…"}, {"id": "6844903648934248456", "title": "Redux流程分析与实现", "desc": "随着应用程序单页面需求的越来越复杂，应用状态的管理也变得越来越混乱，而Redux的就是为解决这一问题而出现的。在一个大型的应用程序中，应用的状态不仅包括从服务器获取的数据，还包括本地创建的数据，以及反应本地UI状态的数据，而Redux正是为解决这一复杂问题而存在的。 redux…"}, {"id": "6844903975477575693", "title": "vue 3. 0 runtime-core 源码阅读指南", "desc": "最近又抽时间把 vue-next/runtime-core 的源码陆陆续续地看完了，期间整理了很多笔记，但都是碎片化的。本来是想整理一下，写成一篇文章分享出来的，但是感觉最终的成果物只能是一篇篇幅巨长的解析文，就算我一行一行的把源码加上注释，其阅读体验也会很差，因为每个人读代码…"}, {"id": "6976546899947945997", "title": "vue3特性学习", "desc": "这是我参与更文挑战的第22天，活动详情查看： 更文挑战 不知不觉22天了，每天更文对自己来说真是一个挑战，从被掏空到主动学习 尤大说，要看文档，要看文档，要看文档。 官方文档 setup 文档将set"}, {"id": "6844903856355164168", "title": "vue-cli3+ts+webpack实现多入口多出口", "desc": "最近公司有一个需求，需要在项目里面嵌套h5的页面，而且不止有一个嵌套的页面，那么就想办法运用webpack的多入口多出口的打包模式，网上查了很多资料，也有多入口多出口的案例，github上也有相应源码，我就不做过多讲解了。这里把博客贴出来vue多入口多出口打包，相应的多入口多出…"}, {"id": "6844903828593049613", "title": "深入浅出 Vue 系列 -- 数据劫持实现原理", "desc": "本篇文章主要介绍 Vue 实现数据劫持的思路，下一篇则会介绍发布订阅模式的设计。 对于 Object 类型，主要劫持其属性的读取与设置操作。在 JavaScript 中对象的属性主要由一个字符串类型的“名称”以及一个“属性描述符”组成，属性描述符包括以下选项： enumerab…"}, {"id": "6844904181682159629", "title": "Vue学习总结之Vue的生命周期(二)", "desc": "每一篇文章都希望您有所收获，每一篇文章都希望您能静下心来浏览、阅读。每一篇文章都是作者精心打磨的作品。 如果您觉得二郎神杨戬有点东西的话，作者希望你可以帮我点亮那个点赞的按钮，对于二郎神杨戬这个暖男来说，真的真的非常重要，这将是我持续写作的动力。您只需要小手轻轻一点，带来的却是…"}, {"id": "6844904200422293517", "title": "基于 Proxy 实现简易版 Vue", "desc": "EventTarget.addEventListener(type, listener, options/useCapture)：在 EventTarget 上注册特定事件类型的事件处理程序。 EventTarget.removeEventListener(type, list…"}, {"id": "6900716227723788295", "title": "【学习笔记】vue中单向数据流、双向数据绑定、响应式原理的概念", "desc": "简单点说就是父子组件间的值传递，只能是由父组件单向传递给子组件，子组件不能直接改变props中的值返回给父组件，这是一个单向的过程，所以叫做单向数据流。 如果想在子组件中改变数据值怎么办呢，这时候就引入了一个概念叫'双向数据绑定'。有两种方式可以实现，.sync修饰符和v-mo…"}, {"id": "6844903768367038471", "title": "几十行代码实现一个vue的状态管理", "desc": "介绍采用集中式存储管理应用的所有组件的状态,就能实现组件间数据共享实现逻辑图从图上有两条线:Vue.use(vuec),与newVuec.center(options)第一条线Vue.use(vuec"}, {"id": "6885340352618709006", "title": "vue编译过程分析", "desc": "先正式讲解之前先看一张来自Vue官网的实例生命周期图。 由图中可知，当我们实例化一个Vue对象并完成初始化后，Vue会检查el和template属性，以获取模板字符串。然后将得到的模板编译成render函数。 只有当template未指定时，vue才会以所制定的el元素的out…"}, {"id": "6844903796573913096", "title": "Vue嵌入iframe,iframe如何跨域调用vue内路由", "desc": "项目中vue域名为a.com,iframe域名为b.com。明显跨域了。 7.服务器配置CORS接口,CORS是一个W3C标准,全称是\"跨域资源共享\"（Cross-origin resource sharing）它允许浏览器向跨源服务器，发XMLHttpRequest请求,从而…"}, {"id": "6979509256881963039", "title": "Vue3知识点，vue.config.js配置和组合式api的使用。", "desc": "Vue3知识点 1、vue.config.js配置 创建vue.config.js vue.config.js 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在"}, {"id": "6901450239236898824", "title": "Steps 组件的设计与实现", "desc": "本文的主题是 Steps 组件的设计与实现。Steps 组件是 Steps 步骤和 Timeline 组件结合的组件，在此之前他们是两个不同的组件，在 NutUI 最近一次版本升级的时候将他们合二为一了，来看看在组件的开发过程中是如何一步步实现组件功能的。 说到 NutUI ，…"}, {"id": "6993919066670891039", "title": "前端面试之vue路由hash与history之间爱恨区别", "desc": "hash模式中带了一个丑丑的#号 history模式中则简介明了不带 vue中默认采取hash模式，区别在于···"}, {"id": "6900179996942761997", "title": "vue3 之 响应式 ref 、computed 、reactive的区别", "desc": "前言ref原理和使用方式computed计算机属性3.0实现源码reactive通过上述的分析，我们不难看出，ref和reactive，computed的区别还是蛮大的；今天的分享就到这了，如果有哪些"}, {"id": "6844903711764905997", "title": "为何要再封装 AJAX？", "desc": "再封装AJAX所带来的好处是你想象不到的! 无论是对于代码的高效管理，还是系统的设计...其收益远远超出你的想象。 封装其实很简单，就是对原来真正的AJAX套一个壳，这个壳就是一个函数！ 在这个函数里都干了些什么见不得人事呢？干什么都可以，上面说的1、 2、 3、 4、 5都可…"}, {"id": "6844903961896435720", "title": "Vue3.0 中的 monorepo 管理模式", "desc": "前段时间9月21日参加了在成都举办的第五届FEDAY， 印象比较深刻的是白鹭引擎首席架构师@王泽分享的《框架开发中的基础设施搭建》，提到了在下一代白鹭引擎中使用到monorepo模式，以用来管理多个模块，协调各个模块之间的依赖更新。 正好在国庆期间10月5日尤大公开了vue3.…"}, {"id": "6844904147309821966", "title": "React.js和Vue.js的语法并列比较", "desc": "React.js和Vue.js都是很好的框架。而且Next.js和Nuxt.js甚至将它们带入了一个新的高度，这有助于我们以更少的配置和更好的可维护性来创建应用程序。但是，如果你必须经常在框架之间切换，在深入探讨另一个框架之后，你可能会轻易忘记另一个框架中的语法。在本文中，我总…"}, {"id": "6844903945530245128", "title": "vue面试题之一：生命周期函数面试题", "desc": "1. 生命周期函数面试题 1. 什么是vue生命周期？ Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载DOM-渲染、更新-渲染、卸载等一系列的过程，我们称这是 Vue 的生命周期。 2. vue生命周期的作用是什么 Vue 所有的功能…"}, {"id": "6954631125629304839", "title": "vue--父子组件、同组件通信", "desc": "父子组件通信 1.父组件和子组件通信 props 通过 Prop 向子组件<blog-post>传递数据 props可以是一个字符串、数值、布尔、数组、对象或对象中的所有属性 父组件访问子组件：$re"}, {"id": "6844903897115394056", "title": "深入剖析Vue源码 - 来，跟我一起实现diff算法!", "desc": "之前讲到Vue在渲染机制的优化上，引入了Virtual DOM的概念，利用Virtual DOM描述一个真实的DOM,本质上是在JS和真实DOM之间架起了一层缓冲层。当我们通过大量的JS运算,并将最终结果反应到浏览器进行渲染时，Virtual DOM可以将多个改动合并成一个批量…"}, {"id": "6987223336908505096", "title": "Electron+Vue开发跨平台桌面应用", "desc": "前言 Electron是一个基于Chromium和 Node.js，使用 HTML、CSS和JavaScript来构建跨平台应用的跨平台开发框架，兼容 Mac、Windows 和 Linux。"}, {"id": "6993725457573085192", "title": "5. Vue生命周期函数", "desc": "Vue实例的生命周期 什么是生命周期 主要的生命周期函数分类 创建期间的生命周期函数 运行期间的生命周期函数 销毁期间的生命周期函数 图"}, {"id": "6844903560266645511", "title": "better-scroll滚动排坑", "desc": "BetterScroll号称目前最好用的移动端滚动插件，因此它的强大之处肯定是存在的。要不...哈哈。个人感觉还是很好用的。这篇文章不是笼统的讲BetterScroll，而是单讲滚动，想要深入了解它，请移步或者这里。 绿色部分为 wrapper，也就是父容器，它会有固定的高度。…"}, {"id": "6844904149553774599", "title": "一个月写完vue音乐播放器", "desc": "我觉得每一段自己努力的时光都需要被自己记录下来，所以就有了想法记录我这一个月看视频的所得。在这个过程中自己没有像之前一样，遇到自己解决不了的问题就逃避。虽然说解决一个问题的速度还是有点慢，大概是自己有点轴，这个方面行不通不知道去换一个方向。 还有就是在这个过程中，自己体验到一个…"}, {"id": "6990961603348791326", "title": "Vue面面后台-01-项目初始化", "desc": "基于Vue-cli脚手架搭建项目，进行初始化并实现登录功能。新版本提供模拟面试功能，用户可以通过微信小程序进入模拟面试模块，完成定向企业面试和自由组题模式。"}, {"id": "6987565769366175751", "title": "VUE3（二十四）自定义alert弹窗组件", "desc": "我这里自定义了几个alert弹窗组件： 1：带有确定取消的alert弹窗组件：效果如下图所示 代码： 调用示例： 2：自定义alert，在自定义时间消失（仿layer），效果如下图所示： 代码： 调用"}, {"id": "6844903636489732103", "title": "Vue中eventbus很头疼？我来帮你", "desc": "怎么样？是不是除了在事件名字前面加了global:其他都没变化，如果你还不了解Vue这部分内容，我帮你准备好了，官方文档。 接下来，尽情的使用吧。 如果对此实现感兴趣，源码地址奉上。"}, {"id": "6992059075823403045", "title": "LOLstyle-ui组件开发实战（一）——项目搭建 | 8月更文挑战", "desc": "自己写一个 LOLstyle 的 vue2.x 的组件库来提升一下自己，便在掘金上记录一下，来督促自己以免半途而废，也希望可以帮到同样有想写组件库却无从下手的朋友，我们共同进步！！"}, {"id": "6844903644953837576", "title": "完美解释 Javascript 响应式编程原理", "desc": "很多前端 JavaScript 框架，包含但不限于（Angular，React，Vue）都拥有自己的响应式引擎。通过了解响应式变成原理以及具体的实现方式，可以提成对既有响应式框架的高效应用。 在页面中更新 price 的值。 在页面中重新计算 price * quantity …"}, {"id": "6844903503383658504", "title": "关于Vue服务端渲染（nuxt）的简单学习", "desc": "近期我司开始了一个新项目，因为上一个项目完成的差不多了，所以将这个项目交给了我（其实就是我先踩踩坑，后续大家在一起开发）。因为客户要求要做SEO优化，所以一开始的决定是使用原声js加jq做，我自己也花了俩三天时间来做了一个demo，但是老大觉得效果不理想，周一上午开会决定用服务…"}, {"id": "6966985241286148126", "title": "vue 指令实现水印效果", "desc": "vue 指令实现水印效果 在vue项目中通过自定义指令，使用canvas特性生成base64格式的图片文件，创建div并将其设置为背景图片，再定位到想要添加水印的地方，从而实现页面或组件局部水印效果。"}, {"id": "6966996525968801822", "title": "LRU算法在Vue内置组件keep-alive中的使用", "desc": "1.什么LRU算法 全称为least recently use 最近最少使用，核心思路是最近被访问的以后被访问的概率会变高，那么可以把之前没被访问的进行删除，维持一个稳定的最大容量值，从而不会导致内存"}, {"id": "6917422075678457870", "title": "(window,parent,opener,top).location.reload方法分析【七日打卡】", "desc": "项目开发过程中，通过iframe引入其他页面，返回至前一页面时调用parent.location.reload(true)时Chrome、IE10(11)下均可以正常返回，但是在IE9下却无效。 改成top.location.reload(true)就可以了。 window.l…"}, {"id": "6844904096940425230", "title": "深入浅出vm.$watch和watch初始化", "desc": "watch是用来监听某个数据发生变化，之后调用什么函数处理。一个数据可以去影响多个数据，比如说浏览器自适应、监控路由对象、监控自身属性变化等等。 定义：官方文档是这么写的：观察 Vue 实例上的一个表达式或者一个函数计算结果的变化。回调函数得到的参数为新值和旧值。表达式只接受监…"}, {"id": "6966920932346560526", "title": "【Vue】Vue-router路由的基本使用--简单侧边栏的实现", "desc": "通过一个实例，简单侧边栏的实现，来进行对vue路由的基本使用的讲解，简单易懂易上手，条理清晰，有不懂的欢迎留言一起讨论哦"}, {"id": "6947934657627291662", "title": "使用 VueCli 搭建 Vue3 + Vant + Ts4 技术栈", "desc": "之前一直使用的react框架，利用业余时间了解了vue的源码及Vue3的原理。更是巧合的是工作中要开发一个简单的移动端页面，所以借此机会调研了Vue3+Vant+Ts，算是第一次比较正式的使用Vue框架吧，同时也想让自己养成记录的好习惯，欢迎大家提意见哈!!!!"}, {"id": "6854573209329598472", "title": "从源码层面解读16道Vue常考面试题", "desc": "1. new Vue() 都做了什么？ 2. Vue.use 做了什么？ 3. vue 的响应式？ 4. vue3 为何用 proxy 替代了 Object.defineProperty? 5. vue 双向绑定，Model 怎么改变 View，View 怎么改变 Model？…"}, {"id": "6966862986791092231", "title": "工作章 - 上传图片编辑头像", "desc": "最近修改bug，测试提了一个优化:上传图片，然后对图片进行平移，放大缩小来调整做头像,因此记录一下整个开发过程的思路。"}, {"id": "6844904084479164424", "title": "浅析Vue系列之(一)详解keep-alive", "desc": "结合路由meta使用（&#x3C;keep-alive>和&#x3C;transition>相似，是一个抽象组件，它自身不会渲染一个 DOM 元素，也不会出现在父组件链中），通过路由meta信息中的keepAlive字段的值来进行判断是否需要使用keep-alive，嵌套在&#…"}, {"id": "6927193583846391815", "title": "倒计时读秒不受页面刷新、关闭、跳转影响", "desc": "实现功能：前端在做登录或者注册模块的时候可能会涉及到验证手机号，点击获取验证码按钮后按钮处于禁用状态，同时显示倒计时秒数，当秒数读完的时候恢复按钮原本状态，同时在页面刷新后或者关闭或跳转都不会影响读秒"}, {"id": "6914110923179474952", "title": "elui-china-area-dht发布，基于vue3和element-plus的省市区级联组件", "desc": "说明其实该组件很简单，核心在于全国省市区数据的来源，还有数据格式化以及组件封装。然后大家应该知道在vue2阶段其实有一个省市区的第三方封装的组件，我想大家应该不少人使用过。看源码，作者应该暂时没有发布"}, {"id": "6914937895778418696", "title": "vue2和vue3的数据响应式原理剖析, Proxy 真香？", "desc": "相信大家都知道，vue实现数据双向绑定无非就是采用数据劫持的方式，结合发布订阅模式，通过Object.defineProperty()来劫持各个属性的setter，getter以监听属性的变动，在数据变动时发布消息给订阅者，以上是vue2.x的实现原理,3.0的话就是proxy…"}, {"id": "6896732256396640264", "title": "根据登陆用户动态展示Vue菜单", "desc": "在 使用Gateway网关实现用户认证与鉴权这一篇博客中，我介绍了基于Gateway实现的基本用户认证与鉴权，可以将对用户权限的控制精细到API级别，但在前台页面的展示中，我们也需要根据用户的角色权限决定为用户展示哪部分特定内容，例如侧边栏菜单项。"}, {"id": "6844903969144176653", "title": "VNode与递归diff", "desc": "本文将深入研究虚拟DOMVNode相关的技术实现，了解前端框架的基础。 排在后面文章内会大量采用前面文章中的一些概念和代码实现，如createVNode、diffChildren、doPatch等方法，因此建议逐篇阅读，避免给读者造成困惑。本文相关示例代码均放在github上，…"}, {"id": "6987940921580978190", "title": "一份v2学习整理文档", "desc": "Vue2 1.基础使用 对 SPA 应用的理解 单页 Web 应用（single page web application，SPA）。 整个应用只有一个完整的页面。 点击页面中的导航链接不会刷新页面，"}, {"id": "6957939775114313742", "title": "Vue 事件与表单处理", "desc": "事件处理 v-on指令 用于进行元素的事件绑定 书写方式 Vue.js还为v-on指令提供了简写方式。 事件程序代码较 多时，可以在methods中设置函数，并设置为事件处理程序。 设置事件处理程序后"}, {"id": "6844904001285144589", "title": "浅谈Vue SSR中的Bundle", "desc": "写过Vue SSR的都知道，Vue通过提供server和client的webpack插件生成bundle josn，从而实现类似服务端的热更以及客户端资源的优化注入。那么这两个个bundle到底有什么神奇的呢？OK，话不多说，进入正题"}, {"id": "6844903794308808718", "title": "Vue案例引发的「过滤器」的使用", "desc": "最近在项目的开发中，出现一些格式化数据的情况，比如字母的大小写，比如一些价格的数据格式。等等一些格式的显示。 在上面的表格中，我们需要处理数据的显示。这是我们时常遇到的情况。 通常我们会直接处理数据的输出，可以这么做。 这些都是通过修改数据做到的。 不过，Vue 中给我们提供了…"}, {"id": "7003237236791590948", "title": "Vue.js 容易忽略的 API 详解", "desc": "Vue.js 容易忽略的 API 详解 nextTick nextTick 是 Vue.js 提供的一个函数，并非浏览器内置。nextTick 函数接收一个回调函数 cb，在下一个 DOM 更新循环之"}, {"id": "7007320696812470309", "title": "手写Vue2.0源码（四）diff算法", "desc": "上篇文章介绍了Vue的更新渲染是如何达到的，本篇文章介绍：非初次渲染，patch更新渲染是如何对比更新的"}, {"id": "7006878623151947806", "title": "Vue果果记账-全局数据管理", "desc": "在做完标签页后发现了一个bug，即Label.vue和Money.vue的数据不会同步更新，需要手动刷新才行（如，在标签页新建一个标签，点击记账页发现标签没有自动更新）。这是因为他们俩的数据“各自为政"}, {"id": "7002391275345281032", "title": "如何从 vue-element-admin 迁移到 Fantastic-admin", "desc": "如果你还不知道 Fantastic-admin 是什么，那么我先用几张预览图给大家了解一番。 看来预览图，如果你感兴趣，可以点这里来详细了解并试用，这是一款完成度极高，开箱即用的后台框架，并且刚刚发布"}, {"id": "6911897255087702030", "title": "[Vue官方教程笔记]- 尤雨溪手写mini-vue", "desc": "🔥这周我看了看了尤大神亲手写的mini版Vue3，笔记如下请大家指正。 1. 数据响应式模块 提供创建一切数据变化都是可以被监听的响应式对象的方法。 2. 编译模块 3. 渲染函数 MVVM框架其实就是在原先的View和Model之间增加了一个VM层完成以下工作。完成数据与视…"}, {"id": "7007307568821305381", "title": "vite插件环境变量指定打包入口文件", "desc": "项目结构： vite.config.js 配置如下： index.html 配置如下： 通过动态改变 html 中引入的 vue 入口文件路径来实现 package.json 配置："}, {"id": "7005001569879982087", "title": "前端脚手架 webpack 迁移 Vite2 踩坑实践", "desc": "项目背景 首先介绍一下我的个人开源项目 X-BUILD ，是一款前端脚手架，从2017年2月至今已有4年多的时间，目前我正在针对 vue3 做一套全新的版本，全面使用 Vite 作为构建工具，在这个过"}, {"id": "7002786243826155533", "title": "面试必备vue2和vue3响应式源码，简单实现", "desc": "vue2，defineProperty响应式源码简单实现 ；vue3 ，proxy响应式源码简单实现，以及简单的总结"}, {"id": "6900733850540834830", "title": "🎉 Element UI for Vue 3.0 来了！", "desc": "2016 年 3 月 13 日 Element 悄然诞生，经历了 4 年的风雨洗礼，我们从一个饿了么内部业务组件库成长为 Vue 生态里最流行的 UI 组件库之一。 截至本文撰写时，Element 已获得 48200 Github Star， NPM 下载量 95 万次/每月的…"}, {"id": "7002066697821618190", "title": "@vue/composition-api 与 Vue3 的前生今世", "desc": "通过本文你将会 GET compositions-api 的诞生背景 @vue/composition-api 和 vue3 的‘姻缘’ @vue/composition-api 实现原理 @vue/"}, {"id": "6994289281141309476", "title": "尤雨溪开发的 vue-devtools 如何安装，为何打开文件的功能鲜有人知？", "desc": "1. 前言 第一周读的是：据说 99% 的人不知道 vue-devtools 还能直接打开对应组件文件？本文原理揭秘。虽然我写过文章，但我还是相信有部分小伙伴还是不知道这个功能。 文中项目用的是vue"}, {"id": "7002867286205808670", "title": "项目打包去掉 console.log", "desc": "打包去掉 console.log 大家在项目开发的时候，需要看看一些后端接口返回的结果，会多次使用 console.log 项目开发完成打包的时候，发现控制台一堆的 console.log。。。"}, {"id": "7006186893406650381", "title": "Vue3系列--1.入门（对比与Vue2.0有哪些不同）", "desc": "Vue3已经发布一年多了，不知道大家在日常开发中有没有用上Vue3呢，通过这篇文章让我们来看看Vue3和之前的版本有哪些不同吧： 什么是选项API写法：Options ApI 咱们在vue2.x项目中"}, {"id": "7003240214147629070", "title": "Vue3基础与入门", "desc": "字数：7887， 阅读时间：40分钟，点击阅读原文 基础篇 从2013年12月8日发布第一个版本至今已，Vue已走过了快八个年头，你了解每个版本名字的意义吗？"}, {"id": "6949370458793836580", "title": "Vue 源码解读（1）—— 前言", "desc": "深入研究 Vue 技术栈的源码原理，从框架源码解读到手写框架 ..................."}, {"id": "6994249999844376590", "title": "vue3不同语法格式对比", "desc": "默认的模板方式，和vue2差不多，在组件中使用setup函数 在script标签上写setup <script setup> 通过jsx方式渲染，非常接近react的方式，也是我最推荐的方式，jsx对"}, {"id": "7002133567421710349", "title": "精读文档，了解Vue的规模化", "desc": "📚以图的形式汇总Vue相关知识点，本文是关于Vue的规模化，涉及路由、状态管理以及SSR，来了解一下吧~🙆"}, {"id": "7002871603268681736", "title": "前端H5支付，微信支付和支付宝支付", "desc": "这两天写H5支付，记录一下，我这边几乎所有配置都是后端搞的，提交订单后 微信支付 微信支付会返回一个mweb_url地址，支付跳转到微信支付中间页进行H5权限的校验，安全性检查，支付宝支付，微信支付"}, {"id": "7006232382885855239", "title": "一行代码，帮你管理项目的请求接口 | vue-request", "desc": "VueRequest ⚡️ 一个能轻松帮你管理请求状态（支持SWR，轮询，错误重试，缓存，分页等）的 Vue 3 composition API 请求库"}, {"id": "6844903959266590728", "title": "Vue 开发必须知道的 36 个技巧【近1W字】", "desc": "Vue 3.x 的Pre-Alpha 版本。后面应该还会有 Alpha、Beta 等版本,预计至少要等到 2020 年第一季度才有可能发布 3.0 正式版; 后续 Vue 3.x 出来后持续更新. 3. 14种组件通讯 provide 和 inject 主要为高阶插件/组件库提…"}, {"id": "6981746482508464136", "title": "Vue 安装 CSS 预处理器（Less、Sass、Stylus）", "desc": "一、简介 Sass 和 Less 语法严谨，Stylus 相对自由。因为 Less 长得更像 css，所以它可能学习起来更容易。 Sass 和 Stylus 都具有类语言的逻辑方式处理：条件、循环等，"}, {"id": "6875967807922798599", "title": "Vue|思路篇|编译ast", "desc": "默认执行渲染逻辑：优先级 1. 找el属性 2. 先找render方法 3. 再找template 思路：1. 将html用ast语法树去描述，这样js就可以处理了 2. 通过ast生成render函数 这样就实现了将不同的问题转为已处理过的问题"}, {"id": "6992087342106279943", "title": "vue轮播插件vue-concise-slider，支持手机和pc", "desc": "文档地址：https://warpcgd.github.io/vue-concise-slider/zh/docs.html vue轮播插件vue-concise-slider，支持手机和pc"}, {"id": "6844904181820555278", "title": " 有一种坑叫做代码重构--vue转nuxt", "desc": "当接到领导说某某“seo精鲤”（实际上只会搞搞百度推广，连代码都不会写的）要将之前开发好的h5商城适应seo，心里顿时一万只草泥马在奔腾，因为我知道接下来绝B很多坑在等着我去踩。没办法，生活在底层的技术开发为了苟且也只能将这口气憋回去，硬着头皮，一个字，就是干。 vue、rea…"}, {"id": "6981365687755210783", "title": "【Vue3 $listener】获取注册事件", "desc": "这么一种情况： 组件需要判断是否注册事件来走下一步。在vue2中this.$listeners就可以获取到相应事件，而在vue3中，就行不通了。 需求 如何在Vue3中获取到this.$listene"}, {"id": "6892791644476276750", "title": "Vue3 Composition-API", "desc": "本文将简要介绍一下当前Vue3组合式API的使用方式及意义。 watchEffect对执行过程中用到的响应式状态作为依赖进行跟踪（与2.x中的watch选项类似，但是它不需要把被依赖的数据源和副作用回调分开），并在依赖变更时重新运行该函数。当组件的setup()或者生命周期钩子…"}, {"id": "6844904144000516109", "title": "【每天两小时】手撸象棋的第一天😀", "desc": "让我们直接撸起柚子开干前端的话我选用vue-cli3.0+ts+pug+stylus象棋的话肯定是俩个人玩的，俩个人的话就存在了及时更新，所以会加入websocket后端的话我选用egg.js数据库用"}, {"id": "6844903955797901319", "title": "CMS全栈项目之Vue和React篇（下）（含源码）", "desc": "由于每一个技术点实现的细节很多，建议先学习相关内容，不懂的可以和我交流。如果只想了解vue或react相关的内容，可以直接跳到文章的第4部分。 Koa 应用程序是一个包含一组中间件函数的对象，它是按照类似堆栈的方式组织和执行的。我们可以使用koa提供的use接口和async函数…"}, {"id": "6844903622346539021", "title": "原生JS实现一个无缝轮播图插件(支持vue)", "desc": "前段时间准备用vue加上网易云的nodejs接口，模拟网易云音乐移动端。因为想自己写一遍所有的代码以及加固自己的flex布局，所以没有使用UI组件。在轮播图部分，本来在vue里面写了一下，但是发现总是出现bug,所以后来准备封装一个插件来实现。 其次的一个原因是，以为这一学期学…"}, {"id": "6985440224100745223", "title": "vue报错TypeError: Cannot read property 'XXX' of undefined", "desc": "\"TypeError: Cannot read property 'XXXX' of undefined\""}, {"id": "6844904111813443598", "title": "解析Vue2.0和3.0的响应式原理和异同(带源码)", "desc": "2019.10.5日发布了Vue3.0,现在2020年了，估计Vue3.0正式版也快出来了。 TypeScript。 性能: 3.0优化了Virtual Dom的算法。 ... Vue2.0实现MVVM(双向数据绑定)的原理是通过 Object.defineProperty 来…"}, {"id": "6966117214164353054", "title": "Vue 局部组件自动化注册", "desc": "原版本 目录结构 界面有独属于自己的组件，在界面目录下新建components文件封装组件，方便复用和更改 组件管理 在index.js中，对组件进行统一管理并暴露出来，让界面的vue文件可以引入组件"}, {"id": "6844903737031409677", "title": "vue预渲染之prerender-spa-plugin插件应用", "desc": "前几天应需求做了一个网页测速小工具，经过考虑，进行了一些选型，由于在公司一直用react搬砖，所以这次决定提高全方面能力，接触并使用vue构建一个小型项目，vue用gizp压缩后仅有约33KB，加上axios和prerender-spa-plugin以及业务代码，压缩后仅不到5…"}, {"id": "6844904163692937229", "title": "vue-ssr服务端渲染透析", "desc": "spa单页面seo不友好，因为vue的话是只有一个HTML页面，实现页面的切换是通过监听router进行路由分发，结合ajax加载数据进行渲染的，但是搜索引擎爬虫识别不了js，所以就不会有一个好的排名。但是通常情况下移动端不需要做seo优化，甲方这么要求的，说现在市面上也有实现…"}, {"id": "6949834037238169608", "title": "在移动端视频播放器的实践笔记", "desc": "关于在移动端视频播放器的笔记。分别使用了原生video标签，video.js，flv.js， TC player几个来实现在移动端各设备间视频/直播 播放的兼容适配。"}, {"id": "6844904136589180935", "title": "如何在Vue2与Vue3中构建相同的组件", "desc": "为了显示这些更改，我们将在Vue2和Vue3中构建一个简单的表单组件。 在本文结尾，你将了解Vue2和Vue3之间的主要编程差异，并逐步成为一名更好的开发人员。 对于大多数组件，Vue2和Vue3中的代码即使不完全相同，也是非常相似的。但是，Vue3支持Fragments，这意…"}, {"id": "6844904062417109005", "title": "vue源码解析事件派发（$on、$emit、$once、$off）", "desc": "2、每当我们要监听一个事件，就往vm._events里添加一个键值对，事件的名称作为键，一个空数组作为值。例如我们要监听的事件名称为event1，则vm._events = {event1: []}"}, {"id": "6844904031261818893", "title": "基于vue-cli4构建的web app", "desc": "2、创建项目时的配置选项，可以保存为 preset 文件。 被保存的 preset 将会存在用户的 home 目录下一个名为 .vuerc 的 JSON 文件里。如果你想要修改被保存的 preset 选项，可以编辑这个文件。 vue-cli 使用了一套基于插件的架构，这与老的 …"}, {"id": "6844903854379630599", "title": "vue cli3.0 引入eslint 结合vscode使用", "desc": "最近一个项目里，最开始使用cli3.0搭建的时候没有默认选用eslint，导致现在有的人使用其他编辑器，就会出现格式错乱的情况。所以引入eslint做代码检测 面板会提示有xx个错误，而且会标明哪个文件。 至此eslint已经引入,并且可以自动修复。但是--fix并不能完全修复…"}, {"id": "6940801575426195464", "title": "刨根问底，揭开 Vue 中  Scope CSS 实现的幕后（原理） ", "desc": "确实是这样的，不过这只是最终 Scope CSS 呈现的结果。而这个过程又是如何实现的？我想能回答上一二的同学应该不多。 Scope CSS 即作用域 CSS，组件化所密不可分的一部分。Scope CSS 使得我们可以在各组件中定义的 CSS 不产生污染。例如，我们在 Vue …"}, {"id": "6995500451407855623", "title": "vue2性能优化之Object.freeze()测试", "desc": "vue2.x中object.defineProperty()会对data中所有的属性进行劫持增加get和set方法，而Object.freeze()可以冻结对象，被冻结的对象无法新增删除属性。"}, {"id": "6989568319841910820", "title": "前端Vue框架在PostCSS怎样使用sass", "desc": "为什么要使用PostCss 众所周知转换 px 单位的插件有很多，知名的有 postcss-px-to-viewport 和 postcss-pxtorem，前者是将 px 转成 vw，后者是将 px"}, {"id": "6844903716001169416", "title": "正则表达式详解及实战", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 正则表达式…"}, {"id": "6969353777195253774", "title": "vue3之糟糕透顶Api——Reactivity ", "desc": "小伙伴们是不是很惊讶？也许会联想到Reactivity是不是设计上有缺陷？其实是醉翁之意不在酒！Reactivity可以说是vu"}, {"id": "6887478361623527431", "title": "Vue3+TS体验并开发+Vite浅析", "desc": "Vue3已经出了一段时间了，本人也一直在学习，但楼主是学生，最近一直在做一些微信小程序和可视化的一些东西，所以更新的有点慢。请大家理解一下。 个人的Ts不能说学的很好，只能说会一部分基础。所以在这里就不 误导大家了，本文会在下面Vue3中进行简单的使用。 如果想深入学习。推荐下…"}, {"id": "6986814340196204558", "title": "前端开发之完整的项目结构及含义解释", "desc": "前端开发之完整的项目结构及含义解释 文件目录含义 public 和 assets 的区别 配置文件含义 .vscode：编辑器的配置文件，可以为该项目单独配置格式 .browserslistrc： 浏"}, {"id": "6968352814858764296", "title": "One Piece，Vue.js 3.0 带来了哪些更新", "desc": "Vue 团队发布 v3.0 版本已经有一段时日了，作为一次主版本更新，Vue.js 3.0 带来了哪些更新？"}, {"id": "6982251438332182542", "title": "在输入框实现@ At功能的一些思考", "desc": "1. 按住shift + @ 的时候，弹出通知人列表 2. 选择时 @的用户标签插入当前的光标位置中 3. 生成@的用户标签的规则是：高亮、携带用户ID、一键删除信息、不可以编辑。 4. 文本框要随内"}, {"id": "6983339056230826021", "title": "【扩展版】uni-app跨端自定义弹窗uaPopup.vue", "desc": "ua-popup 一款基于uniapp加强版自定义弹框组件。完美兼容h5+小程序+app端。支持组件式和函数式混合调用模式。"}, {"id": "6974588315089502238", "title": "用Vue如何从0开始做一个在线的web音频编辑器", "desc": "在公司做了个在线的web音频编辑器,链接：https://yan.qq.com/audioEditor.大概介绍下整体的思路和架构设计，以及遇到一些难点并如何解决。"}, {"id": "6983891819587174413", "title": "Vue 页面如何监听用户预览时间", "desc": "最近的业务中涉及到这样一个需求，在线培训的系统需要知道用户对某个在线预览的页面追踪用户的预览时长。初步我们首先想到借助 Vue 页面的生命周期函数 mounted 和 destroyed，分别在其中加"}, {"id": "6924911113012248590", "title": "我想用大白话讲清楚watch和computed", "desc": "一直以来我对vue中的watch和computed都一知半解的，知道一点(例如：watch和computed的本质都是new Watcher,computed有缓存，只有调用的时候才会执行，也只有当依赖的数据变化了，才会再次触发...)，然后就没有然后了。 也看了很多大佬写的文…"}, {"id": "6844903922469961741", "title": "Vue性能提升之Object.freeze()", "desc": "在 Vue 的文档中介绍数据绑定和响应时，特意标注了对于经过 Object.freeze() 方法的对象无法进行更新响应。因此，特意去查了 Object.freeze() 方法的具体含义。 Object.freeze() 方法用于冻结对象，禁止对于该对象的属性进行修改（由于数组…"}, {"id": "6994684424302362654", "title": "Vue 源码（二）响应式原理", "desc": "这篇文章从 data 角度出发讲述对象、数组的响应式原理是如何实现的；以及依赖收集和派发更新的详细过程"}, {"id": "6854573217462534151", "title": "通俗易懂的vue虚拟（Virtual ）DOM和diff算法", "desc": "最近在看一些底层方面的知识。所以想做个系列尝试去聊聊这些比较复杂又很重要的知识点。学习就好比是座大山，只有自己去登山，才能看到不一样的风景，体会更加深刻。今天我们就来聊聊Vue中比较重要的vue虚拟（Virtual ）DOM和diff算法。 Virtual DOM 其实就是一棵…"}, {"id": "6959001155904995342", "title": "浅入vue脚手架 手把手教你撸一个简单脚手架", "desc": "整个vue init大致流程如我上图所示，应该还是比较好理解的。这里我大致阐述一下大致的流程。 vue-cli会先判断你的模板在远程github仓库上还是在你的本地某个文件里面，若是本地文件夹则会立即"}, {"id": "6844903977058844686", "title": "React VS Vue：2020年选哪个更好？", "desc": "Javascript 框架以及 HTML 和 CSS 已成为每个现代软件项目前端开发的重要组成部分。 2020 年将会是为你的 Web 项目选择正确的 javascript 框架的又一个年头。 如果你正在阅读本文，相信你对下一个程序的技术栈感到困惑。确定它并不容易，本文旨在解决…"}, {"id": "6983235523376578573", "title": "使用vuepress-vite+vite+tsx+vue3配置ui库", "desc": "最近跟朋友想用vue3造轮子，希望使用 vite tsx vue3等技术开发，并且可以边开发边通过vuepress文档查看到组件更新，以下是环境搭建的一些总结"}, {"id": "6999461086034395149", "title": "无限滚动之vue-infinite-scroll源码解析与拓展", "desc": "最近项目正在做一个web版客服聊天工具，里面有聊天窗口需要滚动加载聊天记录，刚好记得饿了么团队有个vue-infinite-scroll插件，但只支持向下滚动加载，于是分析其源码并拓展了向上滚动加载"}, {"id": "6993695890053529630", "title": "LOLstyle-ui组件开发实战（三）—— Radio组件", "desc": "在之前的系列文章中，已经了解了封装button组件，对组件的封装流程有了一定认识，这篇文章就一起来学习如何封装一个简单的Radio组件。Radio组件就是在一组备选项中进行单选"}, {"id": "6844903897895534606", "title": "大白话讲解 Vuex 该怎么样使用", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-trave…"}, {"id": "6844904098622341133", "title": "前端vue打包后部署方式", "desc": "在当前背景下，前后端分离已经成为趋势，再也不是以前那个前后混合在一起的时代了。这次主要是记录下我从项目开发打包上线前部署时所遇到的坑，希望能帮助到其他小伙伴，后端部署没什么好讲的，主要是前端的部署。点赞，点赞，点赞！！！！ （1）设置打包后的静态资源路径（重要。说明：小编由于是…"}, {"id": "6870421714946228238", "title": "vue-ssr| 从0到1实现ssr | 思路篇", "desc": "vue-loader：将解析.vue文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。 遗留问题：1. 未将第一阶段实现的服务端渲染功能和第二阶段实现的编译vue项目功能联系起来；2. 编译之…"}, {"id": "6844904169212493832", "title": "Vue 使用 vue-svg-icon", "desc": "1. 阿里巴巴矢量图 4. 引入 5. 使用 可在样式里设置大小及颜色。"}, {"id": "6971383221455945742", "title": "这可能是element-ui第二好用的表格组件", "desc": "有时候大家肯定在想，我能不能直接一个columns,直接出来一个表格 怎么实现呢？是不是可以在element-ui的基础上再封装一层呢？！！！上代码 非常的简单普通就达到的我们想要的目的，如果你以为到"}, {"id": "6844903581599039496", "title": "你也许不知道的Vuejs - 定制开发项目模板", "desc": "有了前面几篇文章的铺垫，我相信我们回过头来再看看用 vue-cli 脚手架工具初始化的项目，就很好理解了。本篇将带着大家全面认识下用 vue-cli 脚手架工具初始化的项目，并会讲解如何定制化自己的项目模板。 规范的目录结构可以很好的规范化你的开发习惯，代码分工明确，便于维护，…"}, {"id": "6993129078102425607", "title": "vue路由传参的三种基本方式 ", "desc": "项目中很多情况下都需要进行路由之间的传值，想过很多种方式 sessionstorage/localstorage/cookie 进行离线缓存存储也可以，用vuex也可以，不过有些大材小用吧，不管怎么说"}, {"id": "6844903714952593422", "title": "浅探VUE的MVVM模式实现", "desc": "我们先简单看一下这个方法它也是用来实现我们数据劫持（数据监听）的关键方法，我们知道vue框架是不兼容IE6~8低版本的，主要是因为它的用到了ES5中的这个Object.defineProperty的方法，而且这个方法暂时没有很好的降级方案。 第二个参数：需要定义的属性或方法的名…"}, {"id": "6992961815290314760", "title": "《图解Vue3.0》- 第4节 模板语法-插值和过滤器", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 插值 在使用vue定义模板时，双大括号（Mustache语法）“{{}}”是最基本的文本插值的方法，它会自动将我们的数据实时显示出来。例如在"}, {"id": "6844903495733084167", "title": "Emitter | 每天读一点Vue源码", "desc": "面试的时候经常被问一些Vue源码相关的问题，通常情况下， 我会在面试前恶补掘金上的面筋来对付面试，什么双向绑定的原理呀，什么虚拟dom树呀，实际上我压根儿就没仔细研究过，其一是自己真的比较菜，其二工作上也用不上，别自己给自己添堵。但后面想一下，很多事情，为之则易，不为则难，给自…"}, {"id": "6926339430726762510", "title": "重新认识 v-slot ", "desc": "为什么不能用有时候我们想在父组件中给子组件加点内容，满足开发需要。所以就想着以下做法：假设我们现在已经建好nav-head并引入了组件，每次引用的时候传递不同的内容。有时候我们会冲动的有以下写法：运行"}, {"id": "6906104800782647309", "title": "探讨vue2.x的数据劫持是怎么实现的？", "desc": "你好，我是终身学习的阿飞。 我做了个青柠檬读书会的公众号，每天分享我的学习、读书的内容，同时也会分享我的一些学习方式和一些软件推荐。 如果您有任何问题，可以在博客下方留言，我们一起探讨。 当我们使用vue的时候，我们会引入「VUE」。 我们再new Vue的时候，会传入一个da…"}, {"id": "6992949615230517278", "title": "Vue重学 Day3", "desc": "上期，简单介绍了关于Vue基本指令。这期，来探讨下Vue生命周期 Vue生命周期 从创建到销毁的过程，称为生命周期。即创建、渲染、更新、销毁。 详细过程为创建前后、渲染前后、更新前后、销毁前后。 详情"}, {"id": "6866331596090736647", "title": "仿van-popup实现一个从底部弹出的Popup", "desc": "有点类似于手风琴的展开收起，如果自己手动通过css去实现，还是挺麻烦的。但在Vue中为我们提供了一个内置的transition组件，用它来实现上述的效果非常简单，几行代码就可以搞定！不过在次之前，你需要了解一下Vue 过渡 &#x26; 动画 van-popup提供了从多个方向…"}, {"id": "6911490852657299463", "title": "vue2中通过数组索引修改数据，会引起视图的变化吗？", "desc": "带着这个问题，跟我一起手写vue响应式数据原理，一探究竟吧。 1. 导出vue构造函数 2. init方法中初始化vue状态 3. 根据不同属性进行初始化操作 今天我们就只讲data初始化，其他的我放下篇文章再讲。 4. 数据劫持 先使用walk方法对data的进行遍历，将da…"}, {"id": "6870082203712225294", "title": "OSS is not defined? 检查检查你依赖的core-js吧", "desc": "小李猛然惊醒，这是他为产品专设的铃声，一看时间，马萨卡。 接到电话：\"线上上传不了图片了，你干啥了，昨天还行，快 快 快，快看看\"。 他开始梳理上传的逻辑，是按照阿里云官方的方法引入了aliyun-upload-sdk-1.5.0.min.js和aliyun-oss-sdk-5…"}, {"id": "6902233955982901262", "title": "Vue 快速入门", "desc": "Vue 即 Vue.js，它是流行的前端开发框架，目前已经发展成为优秀的前端生态。 如果不熟悉 JavaScript，基本上无法理解 Vue.js。所以读者朋友，请根据自己的情况，做好学习 Vue.js 的准备工作吧。 一旦具备基础知识后，便开始搭建环境，一边使用一边学习。 毫…"}, {"id": "6985107085272842247", "title": "从性能角度看vue component是否拆分", "desc": "前言 面对一个功能的实现是把分成几个组件，还是不分呢，这是个问题？对于是否要拆分，我列了些常见的理由如下： 更好的复用代码 降低组件的复杂度（毕竟没人想看几百行代码的组件） 测试更方便些 ... 然而"}, {"id": "6917881155040034824", "title": "Vue实现的水波球进度展示组件", "desc": "最近需要用到一个水波球效果的进度展示组件，查阅了一些资料后借鉴了他人的代码，最终完成了需求效果图：主要是通过canvas实现，可以动态设置以下内容：参数：|props|含义|类型|取值范围|defau"}, {"id": "6945822264915361823", "title": "尝试封装基础组件-table｜小册免费学", "desc": "在业务中，经常会使用到table组件来展示数据，往往在使用el-table时会遇到样式之类的不能随心改变，在这种情况下通常采用封装第三方组件的方式实现效果。 二次封装el-table来满足一些界面效果，同时可以统一使用，在props中添加需要的属性，并且可以在组件内对于数据进行…"}, {"id": "6872967325637836808", "title": "TS 4.1 新特性实现 Vuex 无限层级命名空间的 dispatch 类型推断。", "desc": "前几天，TypeScript 发布了一项 4.1 版本的新特性，字符串模板类型，还没有了解过的小伙伴可以先去这篇看一下：TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？。 那么接下来的重点就是实现 dispatch(action: Action&#x…"}, {"id": "6844903516775907341", "title": "vue快速入门的三个小实例", "desc": "用vue做项目也有一段时间了。但是关于vue入门基础的文章，我还没有写过，那么今天就写vue入门的三个小实例，这三个小实例是我刚接触vue的时候的练手作品，难度从很简单到简单，都是入门级的。希望能帮到大家更好的学习和了解vue，也是让自己能够复习一下vue。如果发现文章写得有什…"}, {"id": "6982791202307309581", "title": "教你0基础，速成web前端", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 0基础速成web前端"}, {"id": "6989589232700358687", "title": "vue+Jenkins前端自动化部署", "desc": "前言 前端自动化是指前端代码的自动化构建、打包、测试及部署等流程 前端自动化通常与持续集成CI/持续部署CD流程相结合 自动化流程的意义在于： 减少人为失误，提高软件质量 效率迭代，便捷部署 快速交付"}, {"id": "6908185323801575432", "title": "Vue3.0学习笔记", "desc": "Vue2.0中，重复的含有响应式数据的逻辑复用时采用 mixins 方法不够灵活和方便。Options API中，可以看到多个处理逻辑在 data、methods、computed和watch都有涉及，杂糅在了一起。Composition API尤大大暂时将其翻译为“组合API…"}, {"id": "6984273630746132517", "title": "Element-plus 学习源码系列 --Layout 布局组件", "desc": "想写关于 Element-plus 源码的内容主要有两个原因: 1. `vue-next v3.0.0-beta.1` 版本在 2020-5-17 发布,距离现在也有一年多了。作为平时主要使用 `"}, {"id": "6996582016338640926", "title": "iview中form表单组件动态校验源码分析和正确使用（vue）", "desc": "需求场景和问题 声明：本文章所讲的内容都是以iview中form表单的校验规则属性 rules，model为前提的，并没用到单项form-item的校验规则属性。 大家在做前端开发的时候，可能会经常使"}, {"id": "6844904039608500237", "title": "Koa的洋葱中间件，Redux的中间件，Axios的拦截器让你迷惑吗？实现一个精简版的就彻底搞懂了。", "desc": "前端中的库很多，开发这些库的作者会尽可能的覆盖到大家在业务中千奇百怪的需求，但是总有无法预料到的，所以优秀的库就需要提供一种机制，让开发者可以干预插件中间的一些环节，从而完成自己的一些需求。 本文将从koa、axios、vuex和redux的实现来教你怎么编写属于自己的插件机制…"}, {"id": "6868260498417123335", "title": "Vue超好玩的新特性：DOM传送门", "desc": "自从上一篇《Vue超好玩的新特性：在CSS中引入JS变量》大火之后，很多小伙伴纷纷点赞留言，所以我决定将《Vue超好玩的新特性》做成一个系列。 因为目前大多数的 Vue 3 文章重点都在讲 Composition API 和 响应式的优化 ，虽然这些新特性很棒，但大家都把其他的…"}, {"id": "7000771573279883272", "title": "No.27 vue-element-admin 学习使用（二十二）Mixin 小组件，水波纹，悬浮动效，抽屉", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 继续学习Mixin小组件， 首先是水波纹效果 就是在点击按钮的时候，就会出现一个水波纹的动态效果 代码用起来也很简单，给普通的el-but"}, {"id": "6967899877481119780", "title": "将模板字符串转成AST思路", "desc": "抽象语法树（AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。"}, {"id": "6997309953543258120", "title": "vue常用特性总结", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 表单域修饰符 number：转化为数值 trim：去掉开始和结尾的空格 lazy：将input事件切换为change事件，可以设置inpu"}, {"id": "6969743835253604388", "title": "Electron+Vue3 MAC 版日历 开发记录(4)——农历功能", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 M ac 版日历📅️。"}, {"id": "6884922737077256200", "title": "如何使用 Vue 3 和 Canvas 实现哔哩哔哩首页 banner?", "desc": "没错我说的就是哔哩哔哩弹幕网, 前段时间我在摸鱼的时候发现这个网站的 banner 换了, 人物的眼睛还会一眨一眨的, 鼠标移上去会有景深和位移的变化. 有丶意思, 我按 F12 观察了一波, 发现是用几张图片配合 CSS 实现的. 正好之前 Vue 3.0 发布了, 想搞个 …"}, {"id": "6973856019453575181", "title": "ant-simple-pro2.0正式发布，助力vue3社区", "desc": "ant-simple-pro2.0正式发布，开发了很多支持vue3+ts的插件和库，助力vue3社区，献出一份微薄之力。"}, {"id": "6994455902124408869", "title": "你的专属 Vue 脚手架", "desc": "搭建属于自己的 Vue 脚手架，方便在自主练习时，能快速搭建符合自己习惯的 Vue 开发环境，节省项目搭建时间！"}, {"id": "6918978676596047880", "title": "Vue3入门指南-基础用法", "desc": "终于 Vue3 的正式版发布了，两年多的开发，多位贡献者的努力。凝聚了这么多优秀开发者的智慧和努力，注定 Vue3 会成为下一个前端主流开发框架。本篇文章将带领大家一步步学习和了解使用vue3,当然更多的是我的学习过程。 前端就是这样，要时刻保持学习，每个月都有新技术的产生。如…"}, {"id": "6844903959140777991", "title": "Vue3响应式系统源码解析-单测篇", "desc": "10.5号，国庆佳节，小右男神发布了vue@3.0.0的alpha版代码。反正也没啥事干，最近也在学TypeScript，正好看看男神的代码，学习一下。 从入口文件packages/vue/index进去，初极狭，7行代码。复寻数个文件，直至runtime-core，豁然开朗。…"}, {"id": "6844904169967452174", "title": "通俗易懂的Vue异步更新策略及 nextTick 原理", "desc": "最近在学习一些底层方面的知识。所以想做个系列尝试去聊聊这些比较复杂又很重要的知识点。学习就好比是座大山，只有自己去登山，才能看到不一样的风景，体会更加深刻。今天我们就来聊聊Vue中比较重要的异步更新策略及 nextTick 原理。 这段代码很简单，相信很多人都会说yes。当然也…"}, {"id": "6989082141933961246", "title": "Vue 可拖拽组件 Vue Smooth DnD 详解和应用演示", "desc": "Vue Smooth DnD 是一个快速、轻量级的拖放、可排序的 Vue.js 库，封装了 smooth-dnd 库。 Vue Smooth DnD 主要包含了两个组件。"}, {"id": "6844903582446288910", "title": "vue组件之间的数据传递", "desc": "最近在整理项目中代码，在组件之间数据传递遇到了问题，所以做了这次总结，如有不对的地方，望指正。 父组件可以通过Prop传递数据到子组件中。 Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据…"}, {"id": "6922655423627542536", "title": "如何使用 vue + intro 实现后台管理系统的新手引导", "desc": "data-step 是步骤，data-intro 是对每一步的介绍。"}, {"id": "6844903988572209159", "title": "从零开始，手摸手搭建前端组件库", "desc": "Babel7 是对整个项目都生效的配置。 优化代码与使用jsV8补丁做效能调校，编译速度更快。 Storybook是一个辅助UI控件开发的工具。通过story创建独立的控件，让每个控件开发都有一个独立的开发调试环境，可以单独的查看每个组件的不同状态，以及交互式开发和测试组件。 …"}, {"id": "6844904054343090183", "title": "Vue实现一个全屏加载插件并发布至npm仓库🎁", "desc": "在做头像上传功能时，为了防止用户多次点击，通常会在上传时添加一个遮罩，提示用户：图片正在上传中，上传完毕后，关闭这个遮罩层，本来想找个UI框架引入进来，使用框架提供的弹层，找了很多没找到满意的，干脆自己做一个吧😂。接下来就跟大家分享下如何制作一个插件，先跟大家展示下最终实现的…"}, {"id": "6957660252997156900", "title": "vue2.0复习", "desc": "vue 用vue-cli创建一个vue项目 安装 创建项目 安装配置：具体配置按具体情况来 第一步 ? Please pick a preset: (Use arrow keys) 第二步 ​ ? C"}, {"id": "6884527747570515981", "title": "如何搭建一个完整的Vue3.0 + ts 的项目", "desc": "1. 安装nodejs 3. Vue-cli3.x 将提供以下特性供选择，大家可以根据项目需要进行选择添加的配置项： Babel, PostCSS, ESLin等配置文件怎么存放, 是放到单独的配置文件中?还是package.json里? 这里方便配置清晰好看, 我选择每个配置…"}, {"id": "6920802720228048910", "title": "前端权限逻辑（Vue 版）", "desc": "以前觉得“永远相信美好的事情即将发生” 这句话很矫情，现在却很喜欢这句让人信心满满的话。“ 这个孩子在以后，不管遇到任何的对他的贬低、羞辱，说你不行。这孩子都会自信的像鲁豫一样，真的吗？我不信。” 哈哈哈。 言归正传，这篇博客主要记录的是前端权限逻辑，以最简单的代码还原其本质。…"}, {"id": "6994364603857633310", "title": "事关我对于Vue数据响应式的理解", "desc": "写在前面: 这里其实就开始有意思起来了,都是一些比较有用的知识,虽然说是Vue深层次,其实也算是js的更高级应用."}, {"id": "6844903860574617614", "title": "vue组件props传值,对象获取不到的问题", "desc": "父组件定义了personal这个值。在父组件接口中给这个值重新赋值。 子组件接受这个值,浏览器console能看到这个值，但是取不到属性的值。 所以，其实我们子组件一开始根本就没有取到这个personal这个对象。"}, {"id": "6932037172178616334", "title": "在vue3+vite项目中使用svg", "desc": "今天在vue3+vite项目练习中，在使用svg时，发现之前的写法不能用，之前的使用方法参考：vue2中优雅的使用svg然后就各种资料查找，终于实现了，废话不多说，直接上代码：stept1:文件目录s"}, {"id": "6844903876034838541", "title": "一文学会Vue中间件管道", "desc": "通常，在构建SPA时，需要保护某些路由。例如假设有一个只允许经过身份验证的用户访问的 dashboard 路由，我们可以通过使用 auth 中间件来确保合法用户才能访问它。 在本教程中，我们将学到怎样用 Vue-Router 为Vue应用程序实现中间件管道。 **中间件管道（m…"}, {"id": "6855574498390769677", "title": "如何封装一个Vue UI组件库，并实现按需加载？", "desc": "这篇文章会介绍如何基于Vue CLI 命令行工具封装一个Vue UI组件库。之前有写过 React 版本从零开始配置做一个React UI 组件的文件，有兴趣的可以看下。 可通过 vue --version 命令查看是否安装成功。 这条命令会生成一个 lib 文件夹，将所有的组…"}, {"id": "6904519226707410951", "title": "vue3+typeScript中使用‘highlight.js’代码高亮组件", "desc": "vue3持续更新中..."}, {"id": "6844903917898186766", "title": "Vue响应式原理 - 关于Array的特别处理", "desc": "相信初学Vue的同学一定踩过这个坑，改变数组的索引，没有触发视图更新。 以上案例摘抄Vue官方文档 - 数组更新检测。 Vue官方文档也有给出，使用Vue.set即可达到触发视图更新的效果。 Vue官方给出了解释，不能检测。 那原因是什么？我在学习的过程中发现很多文章都在断章取…"}, {"id": "6844903973640470535", "title": "H5实现直播间评论滚动效果", "desc": "直播间评论滚动效果，下划查看历史消息并停止滚动，如有新消息会出现新消息提醒，点击滚动到底部。"}, {"id": "6844903896670797838", "title": "Vue原理解析（三）：初始化时created之前做了什么？", "desc": "5. initInjections(vm): 主要作用是初始化inject，可以访问到对应的依赖。 provide：提供一个对象或是返回一个对象的函数。 inject：是一个字符串数组或对象。 大概是因为会让组件数据层级关系变的混乱的缘故，但在开发组件库时会很好使。 一但触发h…"}, {"id": "6844903743985549320", "title": "一本让你醍醐灌顶的小册：《Vue.js组件精讲》", "desc": "三年前，我开始接触 Vue.js 框架，当时就被它的轻量、组件化和友好的 API 所吸引。与此同时，我也开源了 iView 项目。三年的磨(cǎi )砺(kēng)，沉淀了不少关于 Vue.js 组件的经验，于是乎，将 Vue.js 最精髓的内容，编写了一本掘金小册 《Vue.…"}, {"id": "6913809806943846407", "title": "vue2依赖收集原理也太绕绕绕了", "desc": "相信看完这篇文章的你，跟我的想法是一样的。 为了实现数据变化影响视图，vue采用了观察者模式，将数据和页面渲染关联起来。通过dep收集依赖，当数据变化时，通知对应watcher更新视图。 取值时，给每个属性都加了个dep属性，用于存储这个渲染watcher （同一个watche…"}, {"id": "6949734634007560228", "title": "💬 聊聊Vue2.x组件通信那些事", "desc": "基于Vue 2.x，对组件通信方式进行梳理，分为4类：内置类：prop & $emit等；封装类：findComponents 系列方法等；第三方类：Vuex状态管理；其他：eventBus"}, {"id": "6844903655313768461", "title": "手把手教你用原生JavaScript造轮子（二）——轮播图（文章内容已过期，可不看）", "desc": "通过上一篇文章的学习，我们基本掌握了一个轮子的封装和开发流程。那么这次将带大家开发一个更有难度的项目——轮播图，希望能进一步加深大家对于面向对象插件开发的理解和认识。 老规矩，在写代码之前，我们需要对要开发的东西有个感性的认识，比如你可以先在脑中大致过一遍最终的项目效果是如何的…"}, {"id": "7006989852843442183", "title": "Vue3 造轮子时制作 Button 组件踩的坑（属性绑定）", "desc": "如果我的 button 是被 div 包住的 我引用了 Button 组件，并添加了@click、@mouseover，然后我让鼠标点击按钮或放在按钮上都打印出“你好” 为了方便观察，给 div 添加"}, {"id": "6844903957421096967", "title": "Vue 3 源码导读", "desc": "5号凌晨，尤雨溪公布了 Vue 3 源代码。 话不多说，我们趁热对 Vue 3 源码进行一些简要的分析。 如果你还没有阅读过 Composition API RFC，可能无法完全看懂下面的内容。 目前打包后的代码是 ES2015+，不支持 IE 11。 目前的代码 98% 以上…"}, {"id": "7001243500029149220", "title": "实战：使用 Lumen 和 Vue 构建个人清单应用（二）搭建认证体系和接口规范", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 搭建 JWT 认证体系 JWT 是一个典型的前后端分离式开发的应用，将采用 JWT（JSON-Web-Tokens）认证，JWT 是一个非"}, {"id": "6994979622060294151", "title": "vue的路由权限控制，如何从后台获取数据呀~来瞧瞧~", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 路由权限控制常用于后台管理系统中，对不同业务人员能够访问的页面进行一个权限的限制， 对于无权限的页面可以跳转404页面或者提示无权限。 方"}, {"id": "7003573024863715365", "title": "vue3+ts(3)：vue3组合式api及重要属性变更", "desc": "在 react 和 vue 社区中也越来越多人开始使用TypeScript，使用 TS 可以增加代码的可读性和可维护性。从发布的 Vue3 正式版本来看， Vue3 的源码是用 TS 编写的，更好的 TypeScript 支持也是这次升级的一大亮点。当然，在实际开发中如何正确拥…"}, {"id": "6872128694639394830", "title": "一个合格的中级前端工程师应该掌握的 20 个 Vue 技巧", "desc": "之前写过一篇文章，关于 Vue 属性透传的，文章中我列举了很多种方法去实现属性透传。其中包括直接设置 props，v-bind=\"$attrs\"，render function 等方式。感兴趣，详情看 【Vue进阶】——如何实现组件属性透传？ 这让我意识到了自己对一些 Vue …"}, {"id": "6844903913410314247", "title": "Vue 项目性能优化 — 实践指南（网上最全 / 详细）", "desc": "Vue 框架通过数据双向绑定和虚拟 DOM 技术，帮我们处理了前端开发中最脏最累的 DOM 操作部分， 我们不再需要去考虑如何操作 DOM 以及如何最高效地操作 DOM；但 Vue 项目中仍然存在项目首屏优化、Webpack 编译配置优化等问题，所以我们仍然需要去关注 Vue …"}, {"id": "7005441505024278558", "title": "Vue+Electron随缘更新指南", "desc": "一、创建Vue+Electron项目随缘更新指南 1. 创建vue项目 2. 运行 3. 确保项目成功运行后安装electron-builder 安装electron-builder的过程中会选择安装"}, {"id": "6990682369992704007", "title": "vue3 + setup sugar + TS 经验分享", "desc": "前言 目前setup sugar已经进行了定稿，而vue3 + setup sugar + TS的写法看起来很香，所以我大胆尝试了下，期间发现一些小问题，分享下我的经验，如有问题，欢迎斧正。"}, {"id": "7005061241068584967", "title": "2x6 VueRouter - 进阶 - 路由懒加载 与 RouterLink  扩展", "desc": "VueRouter 基础教程系列 🎉 路由组件的懒加载 VueRouter 的 component 和 components 配置可以接受一个返回 promise 组件的函数，再结合构建工具 (web"}, {"id": "6981991469036863501", "title": "Vue3 script setup提案终于定稿了", "desc": "vue3的script setup提案处于实验阶段已经几个月了，当我们用vite的vue模板时终端会提示我们这仍是一个实验性提案，并且建议我们如果使用这个写法要锁vue版本以避免breakage。"}, {"id": "7002396727483301896", "title": "vue项目中的扫码支付", "desc": "这篇文章主要为大家介绍了vue项目中的扫码支付功能，文中示例代码介绍的非常详细，具有一定的参考价值，感兴趣的小伙伴们可以参考一下。"}, {"id": "7002483521210023966", "title": "Vue全局自定义指令实践-Modal拖拽", "desc": "最近一直在做的项目是Vue2搭建的项目，UI框架用的antdV，项目中用到了很多Modal对话框，然后突然有一天产品说：“这个对话框"}, {"id": "6844903670589423623", "title": "近两万字小程序攻略发布了", "desc": "OpenId 是一个用户对于一个小程序／公众号的标识，开发者可以通过这个标识识别出用户。 UnionId 是一个用户对于同主体微信小程序／公众号／APP的标识，开发者需要在微信开放平台下绑定相同账号的主体。开发者可通过UnionId，实现多个小程序、公众号、甚至APP 之间的数…"}, {"id": "7001788378211418143", "title": "解决Vue项目中使用addRoutes出现的bug", "desc": "这两天做vue后台权限管理系统的时候，发现使用vue提供的addRoute添加路由以后，会出现两个bug，一起来看看如何解决吧~"}, {"id": "6935811262752227335", "title": "实现Web端指纹登录", "desc": "现在越来越多的笔记本电脑内置了指纹识别，用于快速从锁屏进入桌面，一些客户端的软件也支持通过指纹来认证用户身份。 前几天我在想，既然客户端软件能调用指纹设备，web端应该也可以调用，经过一番折腾后，终于实现了这个功能，并应用在了我的开源项目中。 本文就跟大家分享下我的实现思路以及…"}, {"id": "7001779741883629582", "title": "基于Vue实现Excel的解析与导出", "desc": "前言 基本介绍 主要基于Vue+element实现文件的解析与导出，用的的插件是 xlsx,里面的具体方法，感兴趣的去研究一下，基本的样式，配置就不赘述了，也比较简单，我们直接上主食 代码实现 基本结"}, {"id": "6950522097483399176", "title": "Vue2 核心成员战斗力：几天内把 Flow 重构为 TypeScript！", "desc": "尤雨溪在推特说，Vue2 收到了一个将整个代码库迁移到 TypeScript 的 PR，一起来看看怎么回事儿。"}, {"id": "7000891646204182565", "title": "实战：使用 Lumen 和 Vue 构建个人清单应用（一）环境准备和数据库设计", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 写在前面 本场 chat 将带你使用 PHP 框架 Lumen 和 Vue 构建一个清单类的单页应用，不仅可以让你初步学到相关的开发知识和"}, {"id": "6911175470255964174", "title": "为什么我推荐使用JSX开发Vue3", "desc": "关于本文异常热闹的评论区，我在https://juejin.cn/post/6911883414110994439进行统一回应，后面没什么必要我不会直接在评论区进行回应，如果之前的回应有一些过激的语言我表示抱歉，因为太长时间没有发文有点没控制住。 以防万一有的同学实在不看官方文…"}, {"id": "6994437871230779422", "title": "Element 2 组件源码剖析之Link文字链接", "desc": "本文将深入分析组件Link源码，剖析其实现原理，耐心读完，相信会对您有所帮助(Element 2 组件源码剖析系列)。"}, {"id": "6844903782376046606", "title": "前端面试总结篇（初级）", "desc": "1. 你熟悉的es6 JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符…"}, {"id": "6844903729490034701", "title": "VUE开发微信H5页面总结", "desc": "刚入门前端的时候写过很多的微信H5页面，时隔多年感觉应该是手到擒来，不曾想竟很是费了一些功夫。现在把本次开发过程中遇到的问题以及我是如何解决的，做个记录。防止自己以后再去解决解决过的问题。 网页授权流程分为四步，这里只说前端需要做的，其中的第一步：跳转授权页面获取code。 本…"}, {"id": "6967164077831536648", "title": "Vue的反向传值 ($emit事件)", "desc": "首先介绍一下什么叫单项数据流？ 　　我们都知道在Vue中组件之间是单项数据流的，规定子组件不可以直接访问父组件的数据，只能通过props属性让父组件把数据传递给子组件。并且子组件不可以直接修改父组件传"}, {"id": "6998388583904051230", "title": "Vue脚手架中主要的文件及其作用", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言：之前自己使用Vue脚手架编写项目可以大概使用，但是不清楚原理和这么多文件的作用，在学过vue的一部分基础知识后渐渐明白了些主要文件的作"}, {"id": "6992465497417596936", "title": "Vue响应式原理2到3「扫盲推荐」", "desc": "这篇文章我们将探讨Vue响应性系统的底层原理，主要讲述何为响应性、Vue 2与3中响应式的原理以及为什么Vue 3需要对响应式进行优化。"}, {"id": "6955758086262882340", "title": "从0到1 抄一个甘特图", "desc": "前文概述 日常需求需要一个可以展示项目集合总时间流程，以及每个环节占的时间的总览。 选型 基于项目开发是vue2.x所以倾向找原本就是vue所写的甘特图插件。github 里vue gantt排名前三"}, {"id": "6844903887040675854", "title": "vue项目实现缓存的最佳方案", "desc": "1. 前提条件 2. 路由配置 3. vuex配置 4. keep-alive包裹router-view <keep-alive :exclude=\"excludeComponents\"><som-component></some-component></keep-alive>…"}, {"id": "6997278100711014414", "title": "0x0 VueRouter - 介绍 & 安装", "desc": "VueRouter 基础教程系列 🎉 什么是路由？ 路由 (routing) 是一个动词，主要用于工程技术领域，其定义是： 路由在软件领域的应用最早源于服务端，客户端浏览器通过发送 HTTP 请求到服"}, {"id": "6901603815267991560", "title": "一篇鸡汤文，几个vue面试题", "desc": "我们总是听到从五年后看现在，但是我想说从五年后你想要成为的人，看自己，（请你一定不要停下来，成为你想要成为的人）。先2年规划，然后再逐步规划。不要抱怨，反思自己，不埋怨（就算埋怨也是无用功，你改变不了别人，你能改变的只有自己）。持续不断的学习（哪怕是阶段性）（只要持续不断）。我…"}, {"id": "6910038190829076488", "title": "使用JS实现图文混发", "desc": "在我的开源项目中，很早之前实现了图文混输的功能，但是在解析消息时，解析到图片需要将其上传至服务器拿到图片地址进行特殊拼接，上传图片是异步，解析图片是同步，这就造成了文字消息已经发出去了，图片才开始上传，导致图片拼接失败。 本文就跟大家分享下我解决这个问题的实现思路以及过程，欢迎…"}, {"id": "6884042453758771207", "title": "完全开源的 Vue.js 入门级教程：HelloVue，发车啦！", "desc": "欢迎来到 HelloVue-todo-tutorial，这个教程将手把手教你从零开始使用 Vue 搭建一个 Todo（待办事项）应用。 这个教程可以看做是 HelloDjango 系列的番外篇，通过这个教程熟悉 Vue 的基本概念后，我们将使用前后端分离的方式，开发 Djang…"}, {"id": "6996150379389927432", "title": "Vue3源码系列（一）：初探Vue3", "desc": "Vue3源码系列（一）：初探Vue3 Vue3新特性 composition API。 不同于Vue2的选项式API，组合式API将组件初始化时使用setup方法，包含所有数据、方法，并统一返回。 举"}, {"id": "7006188643895214088", "title": "vue源码中this.data,this.props的解读", "desc": "vue源码src\\core\\instance\\state.js有对状态的初始化。 即在beforeCreate钩子函数执行后会初始化$data,$props,$mounted,$watch,$comp"}, {"id": "7002587898453327902", "title": "VUE3-傻瓜式开发一（基础搭建篇）", "desc": "前言： 大家好，本篇文章是vue3傻瓜式教程，适用于CV工程师，面向百度编程同学等等，意在让大家十分钟搭建一个简单的vue3项目，后续会在此基础上扩展，欢迎大家留言。"}, {"id": "6994712289261649934", "title": "二蛋个人 Vue CLI3搭建项目初始", "desc": "vue设置代理的时候，顺便整理了一个自己感觉用的舒服项目初始化的全过程，这也大量用到了两个大佬的代码"}, {"id": "6844903762037850126", "title": "Vue新手向：14篇教程带你从零撸一个Todo应用", "desc": "欢迎来到 Vue2.x Todo 系列教程，这个教程将手把手教你从零开始使用 Vue 搭建一个 Todo（待办事项）应用。 Vue 作者尤雨溪在 新手向：Vue 2.0 的建议学习顺序 中给出了中肯的 Vue 学习建议，本系列教程和项目可以看做是这个建议的实践可操作版本。 Vu…"}, {"id": "6997401682615205919", "title": "通过Plop自动生成vue页面", "desc": "通过自定义模板生成文件 前言 在编写常规的后台管理系统时，通常发现多数页面都具有相似结构，基本上由头部查询框，中间分页查询的表格以及弹出框用于新增或者编辑."}, {"id": "6926351479494311944", "title": "记录一篇html2canvas截图的踩坑之旅", "desc": "2.在上传之前一定一定要压缩图片的大小，你上传一个10几兆的图片直接能托死微信的浏览器，我要关机从启才可以，用lrz 压缩，非常好用，返回的是base64格式，可以直接显示在页面上，不用再去转file文件的实际路径。"}, {"id": "6844904074249240584", "title": "手把手教你搞定权限管理，结合Vue实现菜单的动态权限控制！", "desc": "权限管理在后端项目中主要体现在对接口访问权限的控制，在前端项目中主要体现在对菜单访问权限的控制。在《手把手教你搞定权限管理，结合Spring Security实现接口的动态权限控制！》中我们实现了对后端接口的动态权限控制，今天我们讲下如何结合Vue来实现菜单的动态权限控制。 V…"}, {"id": "6844903894980509703", "title": "Vue原理解析（二）：初始化时beforeCreate之前做了什么？", "desc": "先需要交代下，每一个组件都是一个Vue构造函数的子类，这个之后会说明为何如此。从上往下我们一步步看，首先会定义_uid属性，这是为每个组件每一次初始化时做的一个唯一的私有属性标识，有时候会有些作用。 首先要找的组件需要定义name属性，当然定义name属性也是一个好的书写习惯。…"}, {"id": "6954244558938963982", "title": "mustache 模板引擎 - 02", "desc": "上篇我们大致介绍了什么是模板引擎并举了几个小例子帮助理解。本篇的主要内容则分为两大部分：mustache 的底层 token 思想，以及正式开始手写实现 mustache"}, {"id": "6844904180792967182", "title": "一个封装iframe的vue插件，可修改样式，隐藏滚动条", "desc": "最近有空，就抽空把以前做过的公司业务组件慢慢抽离出来做成插件，也算是对近年来的技术方面做一个总结吧。 今天要写的是一个用vue-jsx封装的iframe插件，可修改iframe中的样式，隐藏滚动条，默认设置保证页面安全等功能。不想看想直接使用的话请前往项目处pikaz-ifra…"}, {"id": "6998165443009576967", "title": "用Vue3.0 开发一款导入浏览器书签的在线书签", "desc": "【红隼书签】是一款简洁的在线书签导航网站。 名字的由来其实是，本着保护动物，爱护动物的初心，想到起一个鸟类的名称，其实最开始想了很多名字，小詹书签，麻雀书签等。"}, {"id": "6987710942318428173", "title": "vue项目浏览器弹框打印功能实现", "desc": "vue项目浏览器弹框打印功能实现 前言 浏览器自带打印功能，一般右键，点击打印就能调起浏览器打印功能，不过这是打印的内容是浏览器当前界面的内容。现在项目中需要点击界面打印按钮，跳出弹框，然后点击打印，"}, {"id": "6894961204951793672", "title": "2020年末了，快来看Vue全家桶系列之Vue基础 (后面含Vue3.0)", "desc": "知道答案的同学，欢迎大家勇于评论以上六个问题。勇敢的说出来，你就能很好的跟面试官进行沟通 v-show 隐藏元素 如果确定要隐藏, 会给元素的style加上display:none。是基于css样式的切换 v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监…"}, {"id": "6998422286197850143", "title": "vue为什么需要nodejs 的环境", "desc": "一、JavaScript 传统的JavaScript是运行在浏览器上的，因为浏览器的内核分为两个部分 渲染引擎: 渲染html&&css JavaScript引擎：运行 JavaScript，随着技术"}, {"id": "6844903934541512711", "title": "vue中如何使用i18n实现国际化", "desc": "在4k广告机中需要实现多语言切换，这时候接触到国际化，前端框架无数，其中几种热门的框架都有相匹配的国际化插件工具。比如： 在4K广告机项目中使用的前端框架为Vue，故而我们将使用vue-i18n这个插件进行国际化功能的实现。 1、首先在自己的项目中安装 vue-i18n依赖包。…"}, {"id": "6992081939725287461", "title": "10x1 精读Vue官方文档 -  示例 - 模板递归", "desc": "精读 Vue 官方文档系列 🎉 什么是递归组件？ 与普通的递归的含义相同。组件递归就是组件调用自己，Vue 中需要在模板中使用组件的 name 来实现组件递归。 个人总结 当我们递归模板时，比如生成一"}, {"id": "6844903874688450568", "title": "揭秘 Vue 中的 Virtual Dom", "desc": "Vue.js 2.0引入Virtual DOM,比Vue.js 1.0的初始渲染速度提升了2-4倍，并大大降低了内存消耗。那么，什么是Virtual DOM？为什么需要Virtual DOM？它是通过什么方式去提升页面渲染效率的呢？这是本文所要探讨的问题。 在对 Model 进…"}, {"id": "6987952992225853470", "title": "前端全局控制console.log的输出", "desc": "开发环境下，为了方便调试，会有一些控制台的输出，但如果忘了删除或注释，打包到生产环境中，就会不太友好，容易产生歧义，以下通过几种方式来实现根据环境变量全局控制console.log的输出"}, {"id": "7000929489572069389", "title": "vue3  vite  esbuild  errno: -4058,   code: 'ENOENT'", "desc": "报错信息如下: 解决方案 在项目的命令行中运行 node node_modules/esbuild/install.js 然后运行执行命令即可"}, {"id": "6844903937141637127", "title": "vue-router的addRoutes的刷新404和重复路由的终极解决方案", "desc": "Vue后台管理项目经常有权限控制，不同角色使用不同权限，常用方法就是用addRoutes来动态添加路由，但有两个问题是官方文档上找不到解决方案的 角色切换，addRoutes提示有重复的路由，无法删除"}, {"id": "6990242344876867597", "title": "7x6 精读Vue官方文档 - 内置组件", "desc": "精读 Vue 官方文档系列 🎉 component 相当于一个组件的占位符。根据 is Attribute 来动态渲染匹配到的组件。 transition <transition> 组件可以为单个元素"}, {"id": "6997011076013359111", "title": "Vue-router参数传递乱码问题解决", "desc": "日更文章做一些问题记录，在使用vue-router传递参数时遇到中文乱码的问题。 代码 页面跳转并传参 接收参数 解决办法 在传值之前"}, {"id": "6844903648527384583", "title": "Vue父子组件如何双向绑定传值", "desc": "父子组件之间的双向绑定非常简单，但是很多人因为是从Vue 2+开始使用的，可能不知道如何双向绑定，当然最简单的双向绑定（单文件中）就是表单元素的v-model了，例如&#x3C;input type=\"text\" />它会响应表单元素的value属性，当输入框文本改变时，会将v…"}, {"id": "6844903609151258631", "title": "基于VUE自定义指令实现按钮级权限控制", "desc": "登录：当用户填写完账号和密码后向服务端验证是否正确，验证通过之后，服务端会返回一个token，拿到token之后（我会将这个token存贮到sessionStorage中，保证刷新页面后能记住用户登录状态），前端会根据token再去拉取一个 user_info 的接口来获取用户…"}, {"id": "6844903737308233741", "title": "Vue工程化最佳实践", "desc": "api目录用于存放 api请求,文件名与模型名称基本一致,文件名使用小驼峰, 方法名称与后端restful控制器一致. 上面展示的是一个后台系统, empty为一个空布局.用于登录页面, 其他页面则使用default布局. 布局不需要过多介绍,写过laravel blade都很…"}, {"id": "6996648818502533133", "title": "Vue2的虚拟DOM与DOM-Diff算法", "desc": "1. 什么是虚拟DOM 简单来说，虚拟DOM是指使用JS对象来描述一个DOM节点。 2.为什么要使用虚拟DOM？ 由于浏览器的标准，真实DOM对象本身被设计的非常复杂，而且由于JS引擎、DOM引擎和排"}, {"id": "6991114257865637896", "title": "vue 项目地址去掉 #", "desc": "vue-router 设置 history 模式 vue 项目往往会搭配 vue-router 官方路由管理器，它和 vue.js 的核心深度集成，让构建单页面应用变得易如反掌。vue-router "}, {"id": "6844903834020478983", "title": "vue+h5仿微信网页版聊天室vueWebChat项目", "desc": "vue技术选型MVVM框架：Vue2.5.6状态管理：Vuex页面路由：Vue-routericonfont图标：阿里巴巴字体图标库自定义滚动条：vue-gemini-scrollbar弹窗组件：el"}, {"id": "6844903775950356488", "title": "VUE CLI 3 配置", "desc": "VUE CLI3的包名称由vue-cli改成@vue/cli。如果你已经安装了旧版本的vue-cli(1.x或2.x)，你先通过npm uninstall vue-cli -g或 yarn global remove vue-cli卸载它。 VUE CLI3和旧版本使用了相同的…"}, {"id": "6968661891979673608", "title": "浅谈vue中ref实现原理", "desc": "vue3中ref的解析来了。上一篇文章给大家解析reactive在源码中的实现原理，这次小编来履行承诺了，给大家解析ref实现原理，知道大家求知的心情是迫切的，后续还有vite webpack解析，"}, {"id": "6989853567095930911", "title": "Vue的运行机制", "desc": "Vue.js 运行机制全局概览 全局概览 我们先来看一张关于Vue运行机制的内部流程图 初始化及挂载 在 new Vue() 之后。 Vue 会调用 _init 函数进行初始化，也就是这里的 init"}, {"id": "6999430974723325959", "title": "No.23 vue-element-admin 学习使用（十八）SplitPane， 头像上传", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 SplitPane 功能上看是一个拆分窗格，可以任意拖动，之前没有做过相关的功能，学习一下 vue文件在@/views/component"}, {"id": "6989566183804502024", "title": "Vue3项目搭建", "desc": "TypeScript 4.x + Vue 3.x + Vue Router 4.x + Vuex 4.x"}, {"id": "6982467008482770952", "title": "实现组件v-model双向绑定：Vue2.x VS Vue3.x ", "desc": "这是我参与新手入门的第2篇文章，由于面试官经常问vue如何实现v-model的数据双向绑定。然后我对model选项也是半知不解的，因此给自己学习也是给大家学习。"}, {"id": "6990176156985065502", "title": "vue3+ts 开发组件库", "desc": "架构参考element-ui tsconfig.json Typescript项目配置文件 命令行执行tsc后，会根据该配置文件将项目中的ts编译为js 选项 类型 默认值 描述 --declarat"}, {"id": "6983836509602807838", "title": "Aliplayer视频点播加密播放", "desc": "Aliplayer视频点播加密播放（私有加密） aliplayer视频点播分为Flash和HTML5两个版本，移动端不支持Flash播放器。 Flash播放器兼容IE8+，HTML5播发器支持比较新的"}, {"id": "6995357928764997668", "title": "Vue动态组件和require.context实现单页面多组件配置化引入", "desc": "在公司进行项目开发过程中，我们可能遇到相对复杂的页面，此时我们会把页面拆分成多个子组件， 然后在定义一个index组件来引入所有的子组件"}, {"id": "6961170732743131173", "title": "Vue3 源码解析（三）：静态提升", "desc": "Vue3 尚未发布正式版本前，尤大在关于 Vue3 的分享中提及了静态提升，今天的文章就一起来对静态提升一探究竟。"}, {"id": "6970281486469562375", "title": "Vue组件中如何引入外部的js文件？", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 背景 在Vue中，通常我们引入一个js插件都"}, {"id": "6990565530084048903", "title": "函数实现合理设置表格宽度", "desc": "前情提要 在平时的项目里，elemengUI的表格算是一个高频使用点，绑定个数组，给每列一个列名绑定一个属性就可以优雅的展示出来。"}, {"id": "6990537893269733390", "title": "前端面试知识点梳理——Vue", "desc": "如何应对面试题 框架使用（基本使用，高级特性，周边插件） 框架原理（基本原理的了解，热门技术的深度，全面性） 框架的实际应用，即设计能力（组件结构，数据结构） Vue基础 Vue使用 基本使用，组件使"}, {"id": "6991404517518966820", "title": "浅谈vue中的组件缓存｜ 8月更文挑战", "desc": "什么情况下要有组件缓存？ 什么是组件缓存？如果还有些迷惑，不妨让本篇文章带你了解vue中的组件缓存。"}, {"id": "6910100912367206414", "title": "vue3.0新特性teleport是啥，用起来真香", "desc": "在vue2.0时代，我们经常会有这样的需求，写代码逻辑的时候希望将组件写在某个模板之下，因为这样我们很好的使用组件内部的状态数据，控制组件的展示形态。但是从技术的角度上我们又希望将这段代码移到DOM中Vue app之外的其他位置。 举个简单的例子，我们在使用modal组件的时候…"}, {"id": "6844903942275465230", "title": "Vue & Vuex in Typescript - 使用指南", "desc": "概述：最近在学习 vue & typeScript，发现有有一些写法和方法需要去梳理和总结。主要是参考 参考文章 vue-property-decorator、vue-class-component，所以选择一些关键点用于沉淀和思考。 vue-class ReadMe。 与之前…"}, {"id": "6999872203802017823", "title": "vue中scroll滚动判断，包括：是否滚动到底部、滚动方向、滚动节流、获取滚动区域dom元素等", "desc": "这是我参与8月更文挑战的第1天 vue scroll滚动判断，包括：是否滚动到底部、滚动方向、滚动节流、获取滚动区域dom元素等"}, {"id": "6844903780262084616", "title": "我的这套VuePress主题你熟悉吧", "desc": "最近熬了很多个夜晚, 踩坑无数, 终于写出了用VuePress驱动的主题. vuepress-theme-indigo-material 的原主题是hexo-theme-indigo, github 的 star 数高达2042, fork 的有451个, 它在静态博客网站中的…"}, {"id": "6987304177026383880", "title": "Vue 指令之 v-icon-tooltip 实现指南", "desc": "“又是充满希望的一天！”。 前言 最近项目的各个模块及特殊操作需要增加名词解释，效果图如下，功能很简单，但现有的 Tooltip 组件却无法满足新需求，为此单独开发 IconTooltip 组件，并基"}, {"id": "6906047152733192199", "title": "vue3实验性功能的探索", "desc": "最近vue3偷偷的在3.0.3的版本中支持了的实验性的新特性&#x3C;script setup>、ref:语法糖、css v-bind，现在我们就来尝试一下这几个新特性，最后总结一下目前这几个新特性的问题和优点。 新的特性里可以使用ctx.expose（之后可能可以直接到vu…"}, {"id": "6925035707136213000", "title": "如何快速搭建积木式搭建平台", "desc": "低代码开发平台不仅适用于特定的小型应用程序，可以更灵活地进行定制。 我们能看到积木式搭建平台分成了4个部分，头部工具栏，左边物料库，中间展示区，右边动态修改内容区。 物料库里统一存储着我们各种活动的组件库。但是因为我们的积木式搭建平台涉及到的活动和搭建场景很多样（比如：各自机构…"}, {"id": "6995761286063587341", "title": "Vue—关于响应式（二）", "desc": "本节需要准备知识点：Event Loop、Promise 关于Event Loop介绍参考阮一峰老师的文章： http://www.ruanyifeng.com/blog/2013/10/event_"}, {"id": "6844903725094404104", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi 集合看这篇就够了", "desc": "最近尝试了vue+ts的组合个人感觉vue对于ts并没有特别的像angular2这样的友好，但是对于ts和js之间个人还是选择ts的。语法糖来说es6简直舒爽，下面我详细介绍下怎么使用ts+vue。ts+vue的插件会少上很多，但是肯定会随着vue对ts的支持插件也会越来越多当…"}, {"id": "6844904191706529799", "title": "vue实现公告栏文字上下滚动效果", "desc": "setInterval是循环执行，setTimeout是延迟执行。我们这里要的是setTimeout循环执行。通过嵌套setTimeout可以实现循环，但是每次都会注册一个计时器，然后时间上也是需要等当前setTimeout执行完再延迟比如说两秒执行，实际上就不只2s。"}, {"id": "6954670412605161509", "title": "如何设计一个数据采集器？", "desc": "场景 在业务上现在有一个场景，当发生业务行为变化时，需要对各个模块的行为进行数据收集，数据用途可以用作回顾，也可以是例如监控这样的场景。 核心问题 说白了这个需求就是需要对各个模块状态变更进行记录，然"}, {"id": "6895753584214802440", "title": "Vue3-Vuex-TypeScript 踩坑之旅", "desc": "vue3 已经来了，vuex 新版本也在 beta 中，在应用于项目前，先过过水，气的我差点把电脑砸了，为啥要砸，咱们开始正文吧... 阿西巴，这什么鬼，any，此时内心已经崩溃，无力吐槽... 好吧，把 script 部分拿出来，总可以了吧，耐心已经耗尽... 抬眼看窗外，天…"}, {"id": "6914189011288981512", "title": "⑧ Vue中常用API的使用场景", "desc": "注意 delete的key值在vue2.2以上版本中支持Array + index 即list[1]用法。 假如我们有一个商品列表，每个列表包含了商品名称、商品价格和用户购买商品的数量，这三个字段，但是在服务器端对于商品列表而言是没有用户购买商品的数量这个概念的，所以服务器只能…"}, {"id": "6927261239668277261", "title": "Vue更新流程nextTick详解", "desc": "Vue更新流程nextTick详解接上一篇初始化流程前言这一篇主要会讲解vue的异步更新策略，包括虚拟dom和diff详细过程（还是最好对着源码流程看）源码下载以及配置调试工具的过程在上一篇都有讲解这"}, {"id": "6994587064398250015", "title": "vue 2.0 中数据响应式原理", "desc": "首先将数据响应的关系图通过图形的形式画出来 通过流程图可以看到 大致分为几个不同的方法和类 能够对数据进行观察的 observe 和 observer类 对数组的处理 对数据进行观察的 defineR"}, {"id": "6988888782246248478", "title": " Vue3.0 项目实战总结（一）", "desc": "年初团队开始引入vue3版本，为后期ts的全栈使用，从语言层面（Typescript）作准备，但是由于团队小伙伴新人较多，对ts的接受程度需要一定的时间来作准备，顾先在小型项目中使用js版本的vue3"}, {"id": "6844903577761103880", "title": "面向Vue新人：使用Vue写一个图片轮播组件", "desc": "在制作这个组件之前，笔者google了不少关于轮播的文章，发现实现一个轮播的思路虽然各有不同，但是大的逻辑其实差不多，本文主要依据慕课网上焦点轮播图特效这节课，不过慕课网主要用原生JS写，而笔者则用Vue进行了重构，并且进行了一点修改。完成后的组件效果图如下： 1. 要写一个什…"}, {"id": "6977759567656681509", "title": "为什么同样的配置别人可以提高效率，你反而降低了", "desc": "相信大家如果需要对项目进行优化的时候都会去搜索引擎上搜索相关的资料，但是如果遇到了不一样的情况呢？你会怎么办呢？这篇文章带你掌握调试，以及插件编写，只要你耐心看完，相信你的收获会很多"}, {"id": "6943787411423887368", "title": "B端配置化平台实践（基于VUE）", "desc": "通过配置平台配置页面，减少开发量，快速上线。 可以看出来，一个页面只需要这几行代码就可以了，之后不管页面如何修改，都不需要更改crm系统代码。 （渲染器的具体实现下面会写。） 拒绝：复杂的页面，定制化UI,这种页面往往实现起来困难，且无法复用，走配置需要开发很多纯业务组件，只服…"}, {"id": "6844903766982918152", "title": "解决移动端滚动穿透", "desc": "全局滚动即滚动是在body上的滚动。如果只有一个全局滚动是没有问题的，问题在于全局滚动的页面出现了弹窗 局部滚动，还是刚才的图片，在弹窗里的滚动，在Android上滚动没啥问题，但是在ios局部滚动有时就会实现。 ②在滑动滚动区域，发现滚动竟然失效了！！！活见鬼了....这TM…"}, {"id": "6917805693860839431", "title": "详解Vue中的computed和watch", "desc": "1. 前言 作为一名Vue开发者，虽然在项目中频繁使用过computed和watch，但从来没有系统的学习过，总觉得对这两个知识点有些一知半解。 如果你也和我一样，就一起来回顾和总结一下这两个知识点吧。 2. Vue中的computed Vue中的computed又叫做计算属性…"}, {"id": "6998491138601140237", "title": "Vue中常用的工具函数——（持续更新）", "desc": "本文记录了一些Vue项目中常用的工具函数，为了工具函数的统一管理，统一将这些函数放到src目录下的utils文件夹里。"}, {"id": "6951594151443955749", "title": "FormMaking 1.3.0 新版发布，自定义表单支持数据源配置", "desc": "这次更新主要为表单设计器加上了数据源，让表单和后端数据间实现了方便的交互，通过配置数据源可以方便的拿到后端的数据，数据源配置也是采用通用的接口配置模式。"}, {"id": "6999205780922744846", "title": "一文了解webpcak在Vue中的使用", "desc": "一，认识webpack Webpack 是一个打包模块化 JavaScript 的工具，在 Webpack 里一切文件皆模块，通过 Loader 转换文件，通过 Plugin 注入钩子，最后输出由多个"}, {"id": "6844903703657316359", "title": "electron-vue模仿网易云桌面应用体验", "desc": "像官网说的那样，electron-vue就是基于 vue 来构造 electron 应用程序的样板代码。electron-vue开发起来就和vue一样，只是如果有特殊的需求需要修改应用的话就要用到electron相关的api，项目中的数据来自这里，感谢大佬的分享。项目地址git…"}, {"id": "7005569747228033055", "title": "Virtual Dom中的diff算法", "desc": "虚拟Dom是由普通JS对象来描述DOM对象 虚拟DOM可以维护程序的状态，跟踪上次的状态 通过比较前后两次状态差异更新真实DOM 虚拟DOM的作用和虚拟库 作用： 维护状态和视图的关系 复杂视图情况下"}, {"id": "7002918107912077319", "title": "vue项目实现国际化和全屏功能", "desc": "Vue项目中如何配合elementUI做国际化操作呢？能不能自定义多语言配置呢？一起来看看实现的步骤吧~"}, {"id": "6957960737042104350", "title": "Vue3中级指南-Compostition API详解", "desc": "Compostition API集合，解决Vue2组件开发问题 更好的TypeScript支持 新的Api支持 什么是reactive？ reactive是vue3中提供的实现响应式数据的方。"}, {"id": "6844903665388486664", "title": "可能比文档还详细--VueRouter完全指北", "desc": "特点:本文主要是参考了官方文档.除了不常用的过渡动效和数据获取,都进行了分析说明.说明:每一节都在文档的基础上进行了更通俗的解释;例子:每一节都添加了单独的例子进行详细的说明,官方没有或复杂或略过的都有详细的说明.总结:每一节都会有tips注意点,实际开发的经验和总结. 如果是…"}, {"id": "6939704519668432910", "title": "手写Vue2.0源码（五）-异步更新原理", "desc": "前言 此篇主要手写 Vue2.0 源码-异步更新原理 上一篇咱们主要介绍了 Vue 渲染更新原理 咱们已经可以实现数据改变 视图自动更新了 那么此篇主要是对视图更新的性能优化 包含 nextTick "}, {"id": "6844903714017247246", "title": "一份超级详细的Vue-cli3.0使用教程[赶紧来试试！]", "desc": "在vue-cli 2.X的时候，也写过一篇类似的文章，在八月份的时候vue-cli已经更新到了3.X，新版本的脚手架，功能灰常强大，试用过后非常喜欢，写篇教程来帮助各位踩一下坑。 如图所示，服务启动的时候回生成一个node_modules包，稍微测试了一下，服务支持ES6语法和…"}, {"id": "6983697630270324744", "title": "组件的基本使用 | 重学Vue3", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第12篇，关于组件的基本使用 ，一起来看看吧~~~~"}, {"id": "6951207347402473485", "title": "基于vue3.0+TS的自定义表单工具 ✨", "desc": "基于 Vue3.0 + TS 的自定义表单生成器。支持 npm 与 cdn 引入的方式。UI 库支持 ant-design-vue 与 element-plus。"}, {"id": "6984972209240408078", "title": "超实用的AST的基本操作，你学会了吗？", "desc": "超实用的AST的基本操作 什么是AST? 我们可以把AST看成一棵千变万化的树，它能够变成任何我们开发中想要的东西。 抽象语法🌲(Abstract Syntax Tree) 简称AST,是以树状形式"}, {"id": "6864383032233721864", "title": "Vue3 + TypeScript 实现递归菜单组件", "desc": "小伙伴们好久不见，最近刚入职新公司，需求排的很满，平常是实在没时间写文章了，更新频率会变得比较慢。 周末在家闲着无聊，突然小弟过来紧急求助，说是面试腾讯的时候，对方给了个 Vue 的递归菜单要求实现，回来找我复盘。 正好这周是小周，没想着出去玩，就在家写写代码吧，我看了一下需求…"}, {"id": "6951933446339952676", "title": "使用vue写项目的准备工作【学生必看】", "desc": "前言Hello大家好，学习vue的小伙伴，在学习vue-cli脚手架之前，总会遇到一些困惑，我在真正使用vue开发项目的时候，我该怎么去做？走哪些流程？我先说一下我的学习心得：学脚手架之前，那些Vue"}, {"id": "6984811275188436999", "title": "今天，学会这几个Vue高级实战技巧就够了!", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 前言 今天，我们来分享几个不可不知的vue高级实战技巧。 技巧 自动注册组件 我们平时可能这样引入注册组件。每次都得需"}, {"id": "6844903991491444744", "title": "[实战] 为了学好 React Hooks, 我抄了 Vue Composition API, 真香", "desc": "前几篇文章都在讲 React 的 Concurrent 模式, 很多读者都看懵了，这一篇来点轻松的，蹭了一下 Vue 3.0 的热度。讲讲如何在 React 下实现 Vue Composition API(下面简称VCA)，只是个玩具，别当真。 实现 'React' Compo…"}, {"id": "6987634135443439646", "title": "Vue实战之从零搭建Vite2+Vue3全家桶（二）", "desc": "主要介绍从零开始搭建Vite2 + Vue3+Element-Plus + Vue-router4 + Vuex + Axios + Eslint"}, {"id": "6896438269291347976", "title": "vue3 学习 之 vue3使用", "desc": "5.watchEffect 监听器的升级版本，立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。 6.reactive 接收一个普通对象然后返回该普通对象的响应式代理。等同于 2.x 的 Vue.observable(),注意在源码中明确显示需要传递一…"}, {"id": "6997250418002624549", "title": "分享一个免费开源的vue3项目", "desc": "初入者必备的vue3 入门实战项目 技术栈 vue3 vuex router element-plus axios setup"}, {"id": "6973598301157326879", "title": "Electron+Vue3 MAC 版日历开发记录(14)——Mac打包", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "7003326157445660703", "title": "elementUI分页组件实现表格数据序号累加功能", "desc": "Vue项目借助elementUI开发后台管理系统时，遇到的一个需求，就是每页展示5条数据，数据序号为1-5，下一页就需要从6开始，以此类推.......一起来看看如何实现吧~"}, {"id": "6992378626758934558", "title": "谈一下vue数据绑定经常出现的一个小问题以及解决办法 ", "desc": "这是我参与8月更文挑战的第3天 我们在使用vue做开发过程中，常常会遇到一些“诡异”的事件，我明明绑定了数据了，为啥没有响应了，经常有开发在使用TDF的时候也遇到类似这种的问题，他觉得自己明明写的没有"}, {"id": "6945796799860834340", "title": "vue slot 插槽里面传递事件 调用外层的函数", "desc": "由于 有些页面比较类似 都是有相同的东西 我就想着用插槽的方法 去写个模板组件减少 代码重复量 也可以节省开发时间 在helloWorld 组件里面定义一个具名插槽 名字为head 这里捆绑了2个属性"}, {"id": "6935239102056890376", "title": "Vue项目中修改不了网页图标？？？", "desc": "由于每次都会忘记更换的步骤，所以记录一下。 今天给大家分享的是如何在网页标题中加入小图标，就像掘金前面那个蓝色的logo。 1. 在html文件的head部分添加下面代码（注意href的路径）。 你的图标格式 最好是.ico格式的，手贱试了一下，发现png，jpg的格式都可以，…"}, {"id": "6844903800113725454", "title": "基于vue解决大数据表格卡顿问题", "desc": "点我在线体验Demo(请用电脑查看)先看一下效果,一共1000X100=10W个单元格基本感受不到卡顿，而且每个单元格点击可以编辑，支持固定头和固定列Github项目源代码觉得可以就Star一下,哪里"}, {"id": "6878097147649064974", "title": "Vue3.0 响应式数据原理：ES6 Proxy", "desc": "注意：如果一个属性不可配置 || 不可写，则该属性不可被代理，通过 Proxy 访问该属性会报错。 可以记录各种各样的信息而不用修改应用程序的代码或是阻塞代码执行。并且只需要在这些代码的基础上稍事修改就可以记录特性函数的执行性能 1. Object.defineProperty…"}, {"id": "6844903607062675463", "title": "手把手带你撸一个vue组件库！", "desc": "目前，我们能接触到的模块化组件库真可谓是数不胜数，尤其是vue相关的那更是多如牛毛，譬如element，iview等等，虽然有很多，但是轮子虽多，合不合适自己还不好说，就像买衣服，有件衣服虽然好看，但是貌似容纳不了自身肥胖的身躯那也只能望洋兴叹。当然这时候，量身定做就显得那么重…"}, {"id": "6999156499788349448", "title": "（一）launch-editor（vue-devtools直接打开页面相应组件代码）", "desc": "一句话简述原理：利用nodejs中的child_process，执行了类似code path/to/file命令"}, {"id": "6995192695501094920", "title": "Vue 2.x / nextTick", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 | 前言 JS事件循环和异步执行机制在 Vue 中的一个应用场景 —— $nextTick"}, {"id": "6949432566545907742", "title": "【译】Vue 3 Composition API: Ref vs Reactive", "desc": "Vue 3.0 Composition API中的Ref和Reactive的区别是什么呢？什么时候用Ref，什么时候用Reactive呢？"}, {"id": "6901317922837397518", "title": "数据可视化平台 [vue+webpack + node + echarts + d3实现方案]", "desc": "随着公司的发展和进步，数据大屏的业务日益增长，公司目前的做法大致可以分为两种 人工标配 or 第三方工具 . OKey，综上所述，随着公司业务的增多 ，市场未来对数据可视化的需求，为了降低开发成本，提高开发效率，降低开发难度，我们的《数据可视化平台》 就这样诞生了，在这里，我作…"}, {"id": "6986810628098916383", "title": "使用vue-awesome-swiper实现缩略图", "desc": "这里使用的是vue-awesome-swiper3.1.3 这是官网的例子 效果图如下: 当前的缩略图在中间显示,这样看起来比较奇怪 这是修改后的代码 这里面还有一个知识点 解决办法 定义一个isMo"}, {"id": "6905280645115674632", "title": " Vue如何跨组件传递Slot", "desc": "在开发过程中遇到这样一个问题，如何跨组件传递插槽。因为在开发类似树组件的过程中，插槽需要通过外部传递到树的根节点，然后通过根节点依次传递到各个叶子节点。那么如何把根节点的Slot如传递给子组件呢? 那么如何在组件内传递Slot就是一个问题。 通过固定级别的组件结构里可以通过直接…"}, {"id": "6844904062916247566", "title": "用Vue3(Vue-Composition API) 写一个疫情查询小工具", "desc": "因为疫情太过严重，只能呆在家，所以前几天用 React+ Antd 写了一个疫情查询小工具：React 版本，也算为疫情的防控做了一点点贡献。这两天呢，看见 Vue3-Alpha 版本都出到 v3.0.0-alpha.4 了，如图： 在这个版本中，主要的工作就只剩下处理服务器端…"}, {"id": "6877383634349719565", "title": "深入理解v-model之自定义组件用法（vue3和vue2对比分析）", "desc": "根据上一篇《深入理解 v-model 之表单用法》基本对 v-model 有了比较深的理解，接下来我们看看它如何在自定义组件中使用。 通过示例我们发现 v-model 是接收属性modelValue的值，然后触发事件update:modelValue来更新该值，那么我们可不可以…"}, {"id": "6844904002992209928", "title": "Vue & TypeScript 初体验", "desc": "项目使用的是Vue全家桶系列(vue, vuex, vue-router)构建的, 项目代码量和业务复杂度还是有一些. etc... 凡此种种, 想起之前看过的一段话\"欠的债, 迟早要还的\". => TypeScript, 也许可以试试. TypeScript 具有类型系统，且…"}, {"id": "6844903696409559053", "title": "企业管理系统前后端分离架构设计  系列一  权限模型篇", "desc": "取这个标题，可能有点膨胀，毕竟看到“架构”这个词，很多人想到的可能是大项目，涉及到分布式，高并发等一些高大上的东西。 前段时间分别用vue和react写了两个后台管理系统的模板vue-quasar-admin和3YAdmin。两个项目中都实现了基于RBAC的权限控制。因为本职工…"}, {"id": "6995150523988967455", "title": "vue3父子组件通信，父组件控制模态框的显示隐藏", "desc": "父组件通过给子组件传值，子组件通过props接收，同时使用watch监听父组件传值的变化，然后动态的修改弹窗组件中visible的值 ，当子组件关闭弹窗的时候 通过emit发布通知父组件"}, {"id": "6966653147909455903", "title": "VUE3学习第二天 学以致用 ----todolist 需求开发（一）", "desc": "功能介绍 可以输入代办事项 输入回车键，添加一条代办实现，展现在输入框下，形成待办事项列表 某条待办事项不想要了，可以删除 某项待办事项完成了，可以勾选掉 还需要显示未完成事项 还可以全选 可以对待办"}, {"id": "6933223111114358798", "title": "聊聊Object.defineProperty和Proxy", "desc": "写在开头，我相信只要稍微是对vue源码有一定了解的人，都知道vue2.0是通过Object.defineProperty来实现数据的劫持的，而vue3.0换了以一种数据监听的方式proxy，毋庸置疑，proxy相比于Object.defineProperty肯定是有一定优势的，…"}, {"id": "6844903589249286151", "title": "Node.js+Mysql+Vue+ElementUI 实现登录注册注销功能", "desc": "前两个月一直学习vue,node.js，但没有真正地动手做项目，恰好赶上公司要求我们做一个的登录注册的独立运行系统，趁着这个机会学习巩固下自己之前学的内容。前端使用 vue，后端用 Express 做服务端提供数据接口，数据库用 MySql。 实现对数据库的增改查操作。 完成一…"}, {"id": "6974697569494499341", "title": "vue 高德地图鼠标选取地址并可以选择地址，经纬度、vue-amap安装和使用", "desc": "这只一个按钮，可选择并有弹出框的按钮 弹出框展示的方法 高德地铁弹出框html 弹出框关闭 vue-amap安装和使用 vue-amap安装和使用文档 npm 安装 vue-amap main.js使"}, {"id": "6854573216459915277", "title": "基于Vue3.0开发知乎日报实战", "desc": "一个简单的小项目，基于Vue3.0 + axios + swiper实现。让大家对Vue3.0 API有一些新的认识。 Vue3.0个人觉得学习挺容易的，Vue2.0水平怎么样，Vue3.0也就差不多那样，所以Vue2.0学的不太好的同学还是回去补一补，现阶段急于学习Vue3.…"}, {"id": "6844903630152302599", "title": "lazy-mock ，一个生成后端模拟数据的懒人工具", "desc": "lazy-mock 是基于koa2构建的，使用lowdb持久化数据到JSON文件。只需要简单的配置就可以实现和json-server差不多的功能，但是比json-server更加灵活，后期可配置性更强，完全可以模拟真实后端业务逻辑。 lazy-mock默认包含了jwt实现的登录…"}, {"id": "6993731941279203358", "title": "Mustache学习笔记二", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 在上篇文章我们回顾了之前将数据变成视图的三种方法，可以看到对于程序开发者来说是越来越简单，越来越方便了，而接下来接触的Mustache模板引"}, {"id": "6987942531472457759", "title": "vue3.0中shallowRef和shallReactive", "desc": "shallowRef 只处理基础数据类型的响应式，不进行对象类型的响应式。 为什么shallowRef只处理基础数据类型的响应式 我们知道如果给ref传入一个对象的话,那么底层会默认调用reactiv"}, {"id": "6999587882281205797", "title": "vue 2.0 抽象语法树AST", "desc": "先探究下语法树是什么，是做什么的 它本质上是一个js对象，vue会字符串的视觉看待.vue文件中的内容。将它解析为AST,下面举个例子 上面的内容会被解析为下面的对象 抽象语法树和虚拟节点的关系 下面"}, {"id": "6988484168279654414", "title": "Vue3和Electron实现桌面端应用", "desc": "为了方便记录一些个人随笔，我最近用Laravel和Vue 3.0撸了一个博客系统，其中使用到了一个基于 markdown-it 的 markdown 编辑器Vue组件v-md-editor。我感觉用它"}, {"id": "6981740041844293663", "title": "😿微前端架构部署踩坑—以system.js为核心构建的Vue微前端项目在部署时遇到的问题", "desc": "基于system.js 手工打造微前端架构，在部署过程中不断踩坑，直至头秃。 部署上线后system.import先是报错 undefind <再是error loading 后来又 跨域， 问题不断"}, {"id": "6844903824214196237", "title": "手摸手教你搭建前端报错收集系统Sentry(上)", "desc": "我能怎么办？我也很绝望啊。。我也不知道客户咋玩出来的啊。。一脸蒙圈。。 现在你们的救星来了。。。sentry。。简单几步就能让你快速定位到用户报错位置 学习一个框架，最好的就是先收藏他的官网链接（全是英文。。。脑袋疼） 地址最后的是项目编码，如果你一个账户有多个项目，每个是不同…"}, {"id": "6966159720121892877", "title": "2. 使用Vite搭建Vue3 + TypeScript项目 -- 初始化", "desc": "后续~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~够50字了？"}, {"id": "6972849098680434718", "title": "vuex的五个属性和使用", "desc": "1、概念 2、属性 3、创建store下的js文件 vuex是集中式存储管理应用中的所有组件的状态，并以相应的规则来保证状态以可预测的方式发生变化。"}, {"id": "6885624435865288718", "title": "聊一聊 Vue3 中响应式原理", "desc": "相比于 Vue2.x，Vue3.0 在新的版本中提供了更好的性能、更小的捆绑包体积、更好的 TypeScript 集成、用于处理大规模用例的新 API。 在发布之前，尤大大就已经声明了响应式方面将采用 Proxy 对于之前的 Object.defineProperty 进行改写…"}, {"id": "6844903891713130510", "title": "再不用写查询列表页面了 | 减少低端重复劳动 vue+iview", "desc": "在群里请教了一下这样的页面有没有标准的称谓，有的叫标准的CRUD页面，有的说是表格信息页，我也不知道叫什么，上边是查询下边是列表，索性就叫查询列表页了，借助罗永浩的口头禅：”少废话，先看东西“。 从去年9月份换工作以后，参与了几个项目，有数据BI平台，有可视化平台，有大屏项目，…"}, {"id": "6844903575781376007", "title": "阅读前端项目源码的正确姿势", "desc": "在准备看一个开源项目源码的时候先去熟悉下这个项目的背景、功能以及相应的API。这步为了理解整个项目的功能做准备，也是为了后面重点看哪些模块做准备 查看项目的README.md文件。有些项目会在将设计文档和架构图放到md文件上，这样会让你宏观上对一些概念有些认识。例如immer …"}, {"id": "6844903802185891848", "title": "在 WebStorm 中，配置能够识别 Vue CLI 3 创建的项目的别名 alias @", "desc": "当然，这是很基础的 Webpack 配置，但本文介绍的是 IDE WebStorm 能够通过 Ctrl + 点击左键直接进入别名的某个目录下。WebStorm 默认是能够解析 webpack 配置文件的，也就是说你配置了 webpack 别名 alias 后，天生就支持这种快速…"}, {"id": "6844903705414729736", "title": "vue地图可视化（3） ArcGIS篇", "desc": "如图所示：可视化界面采用三层三文治结构，从server（后台，非online server）读取数据，vueJS负责数据驱动，ArcGIS与echarts负责数据的图形化。同时引入浏览器的web sql db本地数据库进行海量数据缓存。 ArcGIS API for Javas…"}, {"id": "6844904191928827912", "title": "Vue 3.0 初探 - 组合式 API", "desc": "Vue 3.0 中引入了一种新的代码编写方式，那就是 Composition API，这是有别于 Vue 2.0 Options API 的一种函数式 API。无需通过指定一长串选项来定义组件，Composition API允许用户像编写函数一样自由地组合逻辑和代码。那么我们接…"}, {"id": "6994989643707973645", "title": "【前端Vue学习系列】一、初识Vue", "desc": "Hi，大家好，我是希留。 现在前后端分离技术越来越流行，很多公司的传统Jsp项目也慢慢重构成前后端分离的项目，虽然大型公司都是有专门的前端人员，但是也有很多的公司"}, {"id": "6844904197108793351", "title": "封装属于自己的组件库", "desc": "不管是快餐项目型还是架构持续完善型的架构，在搭建架构时，选择一个可靠合适的 UI 组件库至关重要，关系着系统架构后期的维护，组件的积累，项目的沉淀。一旦选择了一个不成熟的组件库，整套架构就会处处踩坑。那么如何选择一个合适的组件库 除了挑选合适的组件库之外，项目开发过程中，项目经…"}, {"id": "6844903591942193165", "title": "免费，一键发布web页面", "desc": "到这里为止，如果一切顺利，即可使用firebase免费托管静态页面并且拥有属于自己的线上地址，此外，还可以在firebase控制台进行版本管理。"}, {"id": "6992390296734531597", "title": "Vue3：使用服务方式来调用vue组件", "desc": "在用 elementUI、antdUI 等 ui 框架的时候，而平时常用的 Vue 组件都是写成 tag 来使用，那在 Vue3 中，如何实现使用 JS 调用 Vue 组件"}, {"id": "6988051391033901070", "title": "Vue中使用axios(Promise)", "desc": "一、axios的使用 axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，有以"}, {"id": "6844903640533041159", "title": "Webpack 中的 sideEffects 到底该怎么用？", "desc": "webpack v4 开始新增了一个 sideEffects 特性，通过给 package.json 加入 sideEffects: false 声明该包模块是否包含 sideEffects(副作用)，从而可以为 tree-shaking 提供更大的优化空间。 基于我们对 fp…"}, {"id": "6941284747918671879", "title": "vue-element-admin学习总结（一）", "desc": "一 前言1.简介这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint，这些搭建后"}, {"id": "6996254686839832607", "title": "vue3学习 --- 非父子组件通信和slot", "desc": "vue.js的灵魂是组件，而组件的灵魂是插槽。借助于插槽，我们能最大程度上实现组件复用。所谓插槽，就是组件内部留一个或多个的位置，可供插槽调用者传对应的模板代码进去。从而使我们的组件更具有通用性。"}, {"id": "6969825746332155918", "title": "Vue.js 源码（2）—— Object 的变化侦测", "desc": "前言 Vue.js 最独特的特性之一是看起来并不显眼的响应式系统。 从状态生成 DOM，再输出到用户界面显示的一整套流程叫做渲染，应用在进行时会不断地进行重新渲染。"}, {"id": "6980674979570548767", "title": "Vue3进阶之详解应用创建的过程", "desc": "本文的目的是从createApp 开始详细解读一下Vue3创建应用的过程，从创建应用开始是我们Vue3进阶的第一步。"}, {"id": "6908927786707222535", "title": "10个相见恨晚的vue.js库！用好了，事半功倍！", "desc": "Vue 结合了 React 和 Angular 的优点，并且有着团结、活跃且庞大的社区，可以帮助解决开发中遇到的问题。开源社区不断提出解决问题的新方法。工具和库的数量也贡献量不断的增加。 **该框架非常小。**约为18–21KB； 详细的文档。这对于初学者来说很容易上手； **…"}, {"id": "6997288099394879502", "title": "vue3.0组合式API-useTimeout", "desc": "更多文章 前言 之前分享很多次组合式API，今天将实践出的一些内容分享一下，先从一个简单的useTimeout开始 由来 setTimeout大家一定不陌生，但是在使用过程中却很少去做组件卸载时清空定"}, {"id": "6995518429952212999", "title": "vue项目中封装echarts的比较优雅的方式", "desc": "封装组件，以方便在Vue项目中使用Echarts图表，调用方便，复用方便。可用于toB类展示数据项目，更多的是用在大屏数据可视化项目"}, {"id": "6844903589266079752", "title": "前端3大JS框架走势图：vue增长最快，react或被Preact 取代", "desc": "Javascriptreport 近日发布了一篇文章来比较流行前端框架的走势。走势图是通过统计最新的数据，并与前一年的数据进行比较而生成。数据来源于 npm trends 的每日下载量。 前端框架三巨头 React、Angular 和 Vue，虽然都很受欢迎，且保持着上升趋势，…"}, {"id": "6844903541962702855", "title": "webpack 搭建 vue 项目", "desc": "由于在使用vue时会用到很多es6的语法，但是现在很多浏览器对es6的支持不是很好，所以在编译时需要将这些语法转换es5的语法，此时我们使用babel来进行编译。 babel的使用请阅读官网文档http://babeljs.cn/。 此时一个基于webpack的vue 项目就搭…"}, {"id": "6934530581216788488", "title": "Vue路由history模式部署到域名二级目录刷新404", "desc": "问题描述去除路由中难看的/#/路由带#号，微信公众号微信支付微信分享和自动登录，处理起来比较坑需要部署在域名二级目录中刷新404解决问题vue路由中去除#路由history模式官方文档vueroute"}, {"id": "6917224804064067598", "title": "如何做出一个与ElementUI一样高质量的Toast组件？| 七日打卡", "desc": "可以说Toast组件是一个项目的必不可少的组成，一个好看的Toast提示更能给用户良好的体验，本文我们就来实现ElementUI中的Message消息提示组件。 先上效果图。（这...能留住你吗？） 基础Vue知识。 Vue.extend()方法。传送门 vm.$mount()…"}, {"id": "6995485523213025317", "title": "vue+postMessage实现与贩售机交互", "desc": "一、页面效果图 二、功能实现 1.1  html如何调用贩售机内置app提供的sdk 1.2 html中利用iframe引入vue h5链接地址 1.3 html父页面、vue h5子页面互相通信 这"}, {"id": "6844903955642728456", "title": "PV UV IP 与埋点技术实现", "desc": "埋点技术在很多流量较大的应用中经常使用到的热门技术，旨在通过在用户进行操作或者请求的时候，记录下这些操作，然后针对记录的操作数量、操作频率才重新设计产品，提高用户体验，而埋点技术在前端的实现相比起后端来说也较为多见，这是因为用户的操作并不一定会带来http请求，而且前端SPA盛…"}, {"id": "6844903670618816520", "title": "学习不易，用vue写了一个入门项目——知乎日报", "desc": "使用vue开发的一款知乎日报，样式主要参考安卓版知乎日报(版本号2.6.6)。这个项目比较适合初学者参考学习，大神可以指点指点 一直在学习vue，看文档、看博客、写小例子，但是仔细想想还是需要一个项目来加强对vue的掌握程度。项目不是很庞大，非常适合用来练习和检验，而且有大神分…"}, {"id": "6844903545607553032", "title": "探索Vue高阶组件", "desc": "探索Vue高阶组件高阶组件(HOC)是React生态系统的常用词汇，React中代码复用的主要方式就是使用高阶组件，并且这也是官方推荐的做法。而Vue中复用代码的主要方式是使用mixins，并且在Vu"}, {"id": "6844903655926136846", "title": "iview admin 使用爬坑", "desc": "前段时间公司需要开发一个后台管理系统，时间比较急迫，一两天时间。想一想自己一点一点的搭建起来可能性不太大，就想着有没有现成的可以改一改，就找到了基于Vue.js和iview组件库的现成后台，拿来改改就可以了 iview admin。 1. iview UI组件库是基于Vue.j…"}, {"id": "6992511817310273566", "title": "Vue源码学习笔记-mustache模板引擎(五)-折叠token", "desc": "Vue源码学习笔记-mustache模板引擎-折叠token 基于栈的概念 栈FIlO 先进后出 栈FIlO 先进后出"}, {"id": "6890443384440553486", "title": "手把手教你搭建 Vue 服务端渲染项目", "desc": "建议先阅读官方指南——Vue.js 服务器端渲染指南，再回到本文开始阅读。 好了，下面开始正文。 访问客户端渲染的网站。 服务器返回一个包含了引入资源语句和 &#x3C;div id=\"app\">&#x3C;/div> 的 HTML 文件。 客户端通过 HTTP 向服务器请求资…"}, {"id": "6952506011408138247", "title": "vue3 与 vue2 写提示（Toast）组件的区别", "desc": "一直就像写点东西，所以今天得闲就说说 vue2 与 vue3 中如何写 Toast 提示组件，写法有什么区别。"}, {"id": "6981699495327170574", "title": "Vue高级实战", "desc": "什么是Vue-cli Vue cli是基于Vue的应用开发提供的一个标准的脚手架工具.为应用搭建基础的框架结构,提供插件、开发服务、Preset、构建打包功能 Vue cli 背后集成了现代化开发的诸"}, {"id": "6844903774914347022", "title": "Vue 源码中一些util函数", "desc": "JS中很多开源库都有一个util文件夹，来存放一些常用的函数。这些套路属于那种常用但是不在ES规范中，同时又不足以单独为它发布一个npm模块。所以很多库都会单独写一个工具函数模块。 最进尝试阅读vue源码，看到很多有意思的函数，在这里分享一下。 上述两个表达式都是尝试将一个参数…"}, {"id": "6987540608755695653", "title": "Vue - 生命周期详解", "desc": "前言 Vue实例有一个完整的生命周期，也就是说从开始创建、初始化数据、编译模板、挂在DOM、渲染-更新-渲染、卸载等一系列过程，我们成为Vue 实例的生命周期，钩子就是在某个阶段给你一个做某些处理的机"}, {"id": "6989168699655585828", "title": "前端知识点总结之VUE", "desc": "Vue 2.x 的全链路运作机制？ 初始化及mount 在执行new Vue()后，vue 会执行一个init()的方法，这里的初始化包括生命周期、事件、props、data、methods、comp"}, {"id": "6844903504532733966", "title": "基于vue的简单流程图开发", "desc": "严重拖延症，一方面这项目模块纯属个人娱乐。另一方面，流程图这块涉及的东西还是蛮多的，这次也只是介绍一些简单的部分。拖了这么久，现在终于要开始硬着头皮写一篇基于vue+svg的流程图\"伪教程\"文章了。初次献丑，还请轻喷。 出于学习vue而非兼容的目的，本项目仅考虑现代浏览器( 谷…"}, {"id": "6991840391997685790", "title": "10x0 精读Vue官方文档 -  示例 - computed 应用", "desc": "使用 Computed 进行值的转换。 非异步的基于数据变更监听来进行值的转换完全可以使用 computed 来代替 watch。 如果转换的值会被多个地方使用到，更应该使用计算属性，因为计算属性具有"}, {"id": "6844903555598385165", "title": "vue引入新版 swiper,vue-awesome-swiper填坑", "desc": "发现网上关于最新 vue-awesome-swiper就两三篇，而且没说清楚。于是写下这篇，希望对大家有帮助。"}, {"id": "6903424598637969416", "title": "vue编译流程分析", "desc": "vue实例生成vnode是基于render函数，但平时我们很少直接写render函数，而是写template，vue会通过编译将template转化成render函数。 在vue包的package.json中，\"module\"字段指向的是\"dist/vue.runtime.es…"}, {"id": "6891914700880085006", "title": "Vue系列（一）3.0尝鲜", "desc": "在Vue3.0正式版发布之前，相信很多小伙伴和我一样期待着，因为尤雨溪大佬用TypeScript重构了它了，这意味着继续使用3.0，逼格只增不减😄，我们可以在.vue文件中愉快的使用ts了。项目基于Vite+Vue3.0+TypeScript。 对比一下就会发现，4.x是直接…"}, {"id": "6992009111558684709", "title": "封装Axios思路", "desc": "axios 定义 Axios是一个基于Promise的HTTP库，可以用在浏览器和node.js中。 为啥要封装axios 随着项目规模的增大，每次发送请求，都需要设置超时时间、设置请求头、状态码的拦"}, {"id": "6985873696363642917", "title": "vue2，vue3引入全局组件的异同", "desc": "vue2全局组件的定义 main.js中： vue3全局组件的定义 在main.js中： import"}, {"id": "6970361227755307045", "title": "项目初始化  vant组件库  ESLint  REM适配  axios封装", "desc": "项目初始化 vant组件库引入 ESLint介绍与改正错误的四种方式 用REM解决多屏适配 axios二次封装"}, {"id": "6961719892215070727", "title": "Element-ui Tree", "desc": "Element-ui Tree 用清晰的层级结构展示信息，可展开或折叠。 Tree Attributes 参数 说明 类型 可选值 默认值 data 展示的数据 Array — — node-key "}, {"id": "6996234260092813348", "title": "Vue2.0 Diff算法", "desc": "一、前言 1、什么是虚拟dom？ 虚拟dom就是真实DOM以对象的形式模拟成树形的一种结构 我们看一下真实DOM与虚拟DOM长啥什么样？ 真实Dom 对应的虚拟DOM 2、当数据发生变化时，vue是怎"}, {"id": "6844904178901319687", "title": "一次性讲明白vue插槽slot", "desc": "我们在构建页面过程中一般会把用的比较多的公共的部分抽取出来作为一个单独的组件，但是在实际使用这个组件的时候却又不能完全的满足需求，我希望在这个组件中添加一点东西，这时候我们就需要用到插槽来分发内容。 对于这样的情况，<slot> 元素有一个特殊的 attribute：name。…"}, {"id": "6993227641004228616", "title": "vue Mixin的妙用", "desc": "遇到问题 今天遇到一个问题，element ui组件的图片预览功能有点不符合需求，我们希望显示的小图是通过阿里云路径拼接裁剪过后的，预览的大图才是原图，这样就导致预览有问题了，因为src的路径和pre"}, {"id": "6868997861040734221", "title": "[译] 在 Vue 组件中分离 UI 和业务逻辑", "desc": "我在大型 Vue 和 React 项目中观察到的常见事件之一就是，随着时间的增加，UI 逻辑和业务逻辑纠缠不清、相互破坏。让我们来看一个这种情况的例子，以及如何分离这些关注点。 糅杂的关注点也意味着应用贫弱的测试覆盖率 —— 单元测试总会迫使你将业务逻辑和 UI 逻辑分开，不若…"}, {"id": "6844903834507018248", "title": "Vue 递归多级菜单", "desc": "Vue递归多级菜单Vue递归多级菜单考虑以下菜单数据：需要实现的效果：首先创建两个组件Menu和MenuItemMenuItem是一个li标签和slot插槽，允许往里头加入各种元素Menu组件外层是一"}, {"id": "6844903510362816520", "title": "Vue响应式----数组变异方法", "desc": "查看官方文档才发现，不是女神太高冷，而是你没用对方法。 看来想让女神自己动，关键得用对方法。虽然在官方文档中已经给出了方法，但是在下实在好奇的紧，想要解锁更多姿势的话，那就必须先要深入女神的心，于是乎才有了去探索Vue响应式原理的想法。(如果你愿意一层一层地剥开我的心。你会发现…"}, {"id": "6844903938102149134", "title": "【Vue原理】Diff - 白话版", "desc": "如果你觉得排版难看，请点击下面链接或者拉到下面关注公众号也可以吧【Vue原理】Diff-白话版终于到了最后一块内容了！今天我们就来简单概括一下Diff，内容一点都不多哦，全是图片Diff作为Vue比较"}, {"id": "6936089237934571527", "title": "vue3中v-model里小众但很好用的语法", "desc": "在vue2中将方法绑定在一级子组件上后，一级子组件引入二级子组件在子组件上通过v-on绑定$listeners，这样二级子组件就可以直接调用父组件的方法。注意注意！！在vue3中移出了$listeners,但是并不代表调用方法消失了，在官方文档中，调用绑定方法被合并到了$att…"}, {"id": "6993258551493787655", "title": "VUE里computed的SET和GET方法", "desc": "写给新手，大佬请忽略 computed里的方法其实是默认使用了get方法 computed里set方法写法"}, {"id": "7001852611943104549", "title": "Vue(一) - Vue基础知识", "desc": "Vue.js 核心特性 数据驱动视图 组件化开发 1. 数据驱动视图 • 数据变化会自动更新到对应元素中，无需手动操作 DOM，这种行为称作单向数据绑定 (数据变化导致视图变化)。 • 对于输入框等可"}, {"id": "6990614363019149326", "title": "vue表格导出成Excel表格", "desc": "vue项目中导出Excel表格功能 1.安装3个依赖包file-saver，xlsx和script-loader 2.在src文件下新建文件夹excel（文件名自定义），引入两个js文件（两个js文件"}, {"id": "6990400990813880357", "title": "Vue实现简单汇率转换器", "desc": "用Vue实现简单的汇率转换器 1.数据绑定 select 里绑定 option 的 value 属性值 2.@change和 @click 的运用 动态展示及数据处理 3.不同类型数据之间的关联"}, {"id": "6844903557628428302", "title": "VS Code 折腾记 - (12) 春节前的最后一波插件推荐(前端/协作/主题)", "desc": "emmm，失业之后,只能卷铺盖回家了，待来年开春再战。 回老家卖小吃，顺便学学车(考驾照),利用碎片化的时间扫荡插件。 于是,这篇文章就诞生了... Copy With Imports: 相当牛逼的插件,复制部分引用代码自动引入相关依赖... Vue Theme: 应该有部分人…"}, {"id": "7002039438222049288", "title": "diff---vue", "desc": "VNode如何生成真实Dom，这只是patch内首次渲染做的事，完成了一小部分功能而已，而它做的最重要的事情是当响应式触发时，让页面的重新渲染这一过程能高效完成。其实页面的重新渲染完全可以使用新生成的"}, {"id": "6855473771013226503", "title": "Vue Composition API 陷阱", "desc": "自从React Hooks出现之后，批评的声音不断，很多人说它带来了心智负担，因为相比传统的Class写法，useState/useEffect的依赖于执行顺序的特点让人捉摸不透。与此相对的，在Vue3 Composition API RFC 中，我们看到Vue3官方描述Com…"}, {"id": "6844904143698526222", "title": "基于vue3.0+TypeScript的简易日历", "desc": "vue3.0新的api很强大；例如就是reative, ref, watcher, watchEffect...，选择太多了，给开发者的组合方式也就多了，现在最缺的应该是最佳实践了。 我的思路是写一个dispatch，靠action的type去控制，只要改变当然输入日期就行了。…"}, {"id": "6995824520623816734", "title": "手写Vue的方式了解响应式原理", "desc": "Vue是当今最火的前端框架之一，是一套优秀的前端渐进式框架，它的简单易用性的特点也是众多前端工程师选择的原因"}, {"id": "6869908820353810445", "title": "金九银十，初中级前端面试复习总结「Vue篇」", "desc": "MVVM 对应 3个组成部分，Model（模型）、View（视图） 和 ViewModel（视图模型）。 View 是用户在屏幕上看到的结构、布局和外观，也称UI。 ViewModel 是一个绑定器，能和 View 层和 Model 层进行通信。 Model 是数据和逻辑。 V…"}, {"id": "6928252486054576135", "title": "Vue 实验性语法 script setup", "desc": "这篇文章或许某些地方有问题，这篇文章只是在我看过别人写的 vite2的介绍文章 后，自己在看了下声明文件后写，根据自己的想法写的，并没有看过vue的代码，所以有些地方的原理我也不知道。 import导入组件后，模板中就可以直接使用，无需在components中注册组件。 scr…"}, {"id": "6987714601731227685", "title": "大白话讲明白vue数据双向绑定", "desc": "大白话讲明白vue数据双向绑定，最近在网上看了很多的vue数据双向绑定的博客，大部分都是复制粘贴，连文字都是一样的，只是把代码放上去了，究竟为什么需要这样也没有说清楚，这里教你大白话，不搞华丽花哨的"}, {"id": "6844903607309959175", "title": "优化页面的打开速度，要不要了解一下~", "desc": "对于一个网站来说打开速度是一个很重要的指标，只是大部分时间内我们的精力可能都用来对付需求了，特别是当我们做的是一些内部的项目时，我们常常的会忽略了这一方面的优化。其实要对一个页面的打开速度做出一些比较常见的优化并没有想象中的困难，本文将带你做一些既不费力也不费时间的优化操作，这…"}, {"id": "6844904147901235208", "title": "vue3.0实战从0到1实战电商管理系统（第三天）", "desc": "任何事情都需要时间的沉淀，技术也不例外，今天编写Vue3.0系列的章节文章，只是希望能够比别人更早的去尝鲜一些新的技术，毕竟Vue3.0已经Beta版本了，所以里正式版本也不远了，提前去学习和了解，我们就会比别人有更多的时间去充分理解Vue3.0的特性，只有当你真正理解一门技术…"}, {"id": "6844903621927108615", "title": "Vue 兼容 ie9 的全面解决方案", "desc": "Vue 官方对于 ie 浏览器版本兼容情况的描述是 ie9+，即是 ie9 及更高的版本。经过测试，Vue 的核心框架 vuejs 本身，以及生态的官方核心插件（VueRouter、Vuex等）均可以在 ie9 上正常使用。 Vue 作者尤雨溪对于 Vue 的学习建议 中有提及…"}, {"id": "6980219106247049252", "title": "封装一个能够过滤空格的input组件", "desc": "首先说一下我们系统使用的是ant-design-vue1.x 的版本,表单使用a-form。 解决方案 我大概想到了以下三种解决方案： 使用a-form提供的自定义校验规则，当用户输入的内容首尾有空格"}, {"id": "6994316350390796301", "title": "vue的原理", "desc": "vue响应式原理 Dep 是 vue 实现的一个处理依赖关系的对象， 主要起到一个纽带的作用，就是连接 reactive data 与 watcher,代码非常的简单 initState方法当组件实例"}, {"id": "6994250492868034574", "title": "vue源码学习-02数据驱动视图：数据观测", "desc": "vue响应式原理--什么是数据驱动视图？ 简单来说，数据驱动视图，就是通过改变数据来达到改变视图的目的。"}, {"id": "6844903998672076813", "title": "Vue.extend 编程式插入组件", "desc": "日常中我们要使用一个弹框组件的方式通常是先通过Vue.component 全局或是 component 局部注册后，然后在模版中使用。接下来我们尝试编程式的使用组件。 其实想要插入一个元素，通过 document.createElement 就可以实现，并非一定需要上面两步，但…"}, {"id": "6999503123538509837", "title": "vue构建移动端项目技术方案", "desc": "近期需要开发h5端项目，基于Vue Cli4 构建的项目（已引入vue、vue-router和vuex）。 关于移动端UI库的选择"}, {"id": "7004736476789342244", "title": "【vue3.0】19.0 某东到家（二）——CSS样式和图标：flex + iconfont", "desc": "底部图标开发使用 https://www.iconfont.cn/ 首先注册一个账号，然后在图标管理中点击我的项目：\\ 新建项目 搜索图标，找到心仪的图标后悬停，加入购物车： 然后加入项目，导出到本地"}, {"id": "6910084379566047240", "title": "基于网易云音乐API实现PC端音乐网站", "desc": "项目代码地址Gitee项目效果视频哔哩哔哩介绍初学vue后然后写的第一个项目《 基于网易云音乐API实现PC端音乐网站》，采用VUE及网易云音乐Node.jsAPIservice实现，网站风格参考了各"}, {"id": "7006208029569843213", "title": "vue通信", "desc": "1.父子间的通信 使用v-model双向绑定,如果组件有多个数据需要双向绑定使用 :prop.sync , update:prop 父级代码 子级代码 2.兄弟组件相互通信 通过 $parent.$o"}, {"id": "6982761988623433741", "title": "Vue 内置组件 keep-alive, 官方文档看不懂就看这个！", "desc": "keep-alive 是什么 keep-alive 的作用 举个栗子 kepp-alive 生命周期钩子函数 keep-alive 的 props"}, {"id": "6844903597075857421", "title": "Vue还有这种骚操作？浅析几个新手常常忽略的API", "desc": "一般来说，我们实现父子组件值的传递通常使用的是【props】和自定义事件【$emit】。父组件通过【props】将值传给子组件，子组件通过【$emit】将值传给父组件，父组件通过【$on】事件获取子组件传过来的值，如果说想要实现子组件修改父组件传过来的值，最容易的就是这种方法了…"}, {"id": "6992140325548458020", "title": "解决Vue重复点击相同路由,报 Uncaught (in promise) NavigationDuplicated: Avoided redundant n~", "desc": "报错如图： 问题描述：重复点击导航时，控制台出现报错 ，虽然不影响功能使用，但也不能视而不见。 解决方法： 解决方法1：使用 catch 方法捕获 router.push 异常 解决方法2：在跳转时，"}, {"id": "6844903620916281358", "title": "📦vue组件发布npm最佳实践", "desc": "如果觉得文章“太长不看”，可以直接使用开发工具：vue-sfc-cli，集成 travis ci，快速发布 npm。 做好以上三点，才可以通过npm publish简单地发布一个包。若要遵循最佳实践，还有一些准备工作要做好，下面将为你讲述 version是语义化的，major.…"}, {"id": "6989172835117694983", "title": "MONOREPO 下 VETUR 提示找不到声明文件", "desc": "问题描述 最近搞了一个 monorepo 项目 ，其中有某个 package 为 前端Vue项目。 项目大概目录结构如下: 在书写代码过程中遇到如下问题 检查tsconfig.json配置是有 pat"}, {"id": "6877832502590111757", "title": "Vue3.0 进阶、环境搭建、相关API的使用", "desc": "前端技术生态一直不断的更新换代，许多人都觉得亚历山大，学不动了；但不是学不动就可以不学了么。。。 0.0；学不动也得学，不然适应自己的只会是淘汰 目前作者的意思是：对于 vue2.0 的项目强烈不建议升到 vue3.0；因为目前的beta版本以及现有的框架及插件，不是很支持和兼…"}, {"id": "6844903965180575751", "title": "为什么Vue3.0使用Proxy实现数据监听？defineProperty表示不背这个锅", "desc": "vue3.0中，响应式数据部分弃用了 Object.defineProperty，使用 Proxy 来代替它。本文将主要通过以下方面来分析为什么vue选择弃用 Object.defineProperty。 这种说法是有问题的，事实上，Object.defineProperty …"}, {"id": "6844903753129295880", "title": "vue基于d2-admin的RBAC权限管理解决方案", "desc": "前两篇关于vue权限路由文章的填坑，说了一堆理论，是时候操作一波了。 选择d2-admin是因为element-ui的相关开源项目里，d2-admin的结构和代码是让我感到最舒服的,而且基于d2-admin实现RBAC权限管理也很方便，对d2-admin没有大的侵入性的改动。 …"}, {"id": "6999269893434507271", "title": "vue 中的install函数", "desc": "install函数的实现 我们在使用vuex的时候是vue.use(vuex),这个是怎么实现的呢？ vue的插件系统，提供了use函数，方便我们引入插件 use函数规定，每个插件都需要编写insta"}, {"id": "6970309861502386184", "title": "vue多工程间公共模块处理最佳实践", "desc": "vue多工程间公共模块你是如何处理的，iframe？npm？怎么才能做到“一次开发、一次部署、多处应用”？"}, {"id": "6855517117778198542", "title": "深入 TypeScript 中的子类型、逆变、协变，进阶 Vue3 源码前必须搞懂的。", "desc": "TypeScript 中有很多地方涉及到子类型 subtype、父类型 supertype、逆变和协变covariance and contravariance的概念，如果搞不清这些概念，那么很可能被报错搞的无从下手，或者在写一些复杂类型的时候看到别人可以这么写，但是不知道为什…"}, {"id": "6844903558085607438", "title": "杭州17届前端期待加入一个更好的团队", "desc": "本来想等过完年回来再换工作的，但是前段时间有猎头在简书私信我，说看我的文章写得还行，问我想不想换工作。 然后我就更新了简历，发过去了，邀请我面试，但是这家公司在北京 /西安，后来就没去，但是故事就此开始了，这反而促使我走上了换工作的道路。 自己从大三暑假实习到现在工作半年多，接…"}, {"id": "6844903800692555789", "title": "vue 组件的三种使用方式教程", "desc": "在vue angular react三大前端框架的大前端时代。许多人选择了vue，在 github 上的star，vue已经超过react的数量了。虽然star并不能代表vue更强，不过在发展速度上看来，vue确实很快。 在模块化的前端时代，万物皆组件，vue学习组件是必不可少…"}, {"id": "6844904166041600014", "title": "vue3.x结合typescript初体验", "desc": "vue3.x 采用Function-based API 形式组织代码，使其更容易压缩代码且压缩效率也更高,由于 修改了组件的声明方式，以函数组合的方式完成逻辑，天然与typescript 结合。（vue2.x中的组件是通过声明的方式传入一系列options的，所以在2.x下使用…"}, {"id": "7002867058014683144", "title": "Vue脚手架搭建流程", "desc": "脚手架搭建流程 1-安装脚手架工具（全局） 2-查看Vue CLI安装版本 3-创建新项目 4-生成项目内容： 单文件组件：模板、样式、js在一个文件里面； 脚手架中.vue结尾文件是组件 4-运行开"}, {"id": "6844903624099758094", "title": "vue中前进刷新、后退缓存用户浏览数据和浏览位置的实践", "desc": "2.搜索结果页面==>点击进入详情页==>从详情页返回列表页时，要保存上次已经加载的数据和自动还原上次的浏览位置。 最近在项目中遇到这个问题，思考了几套方案，总是不太完善。百度搜到的方案也基本都只能满足一些很简单的需求。对于复杂一些的情况，还是有些不完善的地方。以下是个人对于这…"}, {"id": "6988508008267874317", "title": "关于Vue监听不到Array响应变化以及响应式原理剖析的一个问题", "desc": "Vue 通过Object.defineProperty 这个Api来进行对对象的响应式监听，对数组通过重写数组方法的方式来进行监听，而我们直接使用 **arr[0] = 123** 这种的"}, {"id": "6993982845899243551", "title": "Vue 3.0组件的渲染流程", "desc": "Vue简单易上手，只需要简单的文档说明就能上手开发。虽然本人也有一直使用Vue 2.0的项目开发经验，以前也只了解一点核心代码逻辑，没有全面阅读过Vue 2.0的源码。Vue 3.0发布后我也有了一些"}, {"id": "6880152826803290119", "title": "🚩Vue源码——异步组件是如何使用", "desc": "在上一篇🚩Vue源码——组件是如何注册和使用中，详细介绍了组件注册和使用的内部逻辑流程，里面所介绍都是同步组件的注册和使用。但是在实际开发中，异步组件才是经常使用的。先来看一下，官方文档中是如何注册异步组件，可以分为三种方式。 从以上示例中可以看到，通过Vue.compone…"}, {"id": "6844903805851697159", "title": "一个Vue引发的性能问题", "desc": "这个会不会是因为html嵌套太深导致Layout等计算复杂，所以CPU上升了呢，笔者尝试把DOM结构简单化，以及加上contain: strict等Layout隔离的方法，也是没有效果。所以只能是JS执行问题了，通过Chrome devtools的Performance可以研究…"}, {"id": "6876066773720891399", "title": "Vue中实现输入框Input输入限制", "desc": "这样封装在使用时会出现一个隐蔽的bug，就是在输入指令中正则限制以外的字符时，视图中输入框显示是正确的，但是在浏览器控制栏Vue Devtools中的testValue最后一位字符是最后输入的时的字符。 比如输入abc、123abc输入框内是 、123，但实际testValue…"}, {"id": "6989880565973385247", "title": "# Vue实战之从零搭建Vite2+Vue3全家桶（一）", "desc": "前言 开启2021学习之旅，主要介绍学习vite2和vue3的实战过程。 本篇主要介绍从零开始搭建Vite2 + Vue3+Element-Plus + Vue-router4 + Vuex + Es"}, {"id": "6844903680030801933", "title": "VScode 插件工具集，不求全但求好", "desc": "根据调查发现，VScode 和 sublime 是前端开发者比较喜欢的 IDE 。“工欲善其事，必先利其器”，我是一个爱折腾的工具控，刚开始用 VScode 的时候，装了一堆的插件，导致只要开启 VScode 再接上大屏，我的 Mac 就会强烈的反抗，风扇一直呼啸，😳😳..…"}, {"id": "6994385881352110116", "title": "Vue+ElementUI 搭建后台管理系统（实战系列七）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6987254959918039048", "title": "Vue setup函数初识", "desc": "setup函数 setup是Composition API 表演的舞台 从参数说起,setup函数接受两个参数props和context。 setup第一个参数props 正如在一个标准组件中所期望的"}, {"id": "6844903927045947405", "title": "基于Vue CLI3 搭建五脏俱全的移动端H5应用", "desc": "之前开发vue项目，一直是自己搭建脚手架，并没有使用配套的Vue-CLI。原因是： 二、是觉得自己从零配置项目可控性更强。 Vue-CLI 3.0 于去年8月份就已发布，却一直没去了解。近日，有新Vue H5项目开发，就想着用Vue CLI3.0脚手架构建项目。并记录一下构建使…"}, {"id": "6844903846293028872", "title": "vue 在移动端体验上的优化解决方案", "desc": "去年年底自己搭了一个vue在移动端的开发框架，感觉体验不是很好。上个星期又要做移动端的项目了。所以我花了两天时间对之前的那个开发框架做了以下优化 如果每个页面在数据加载完成前，展示loading。你首先想到的是每个页面设置状态，show和hide状态。但是这样冗余代码太多了，而…"}, {"id": "6983925947934195749", "title": "vue 集成腾讯地图基础api Demo集合", "desc": "使用vue结合网上的开源框架vue-admin参照官方网站demo，做一个开箱即用的Demo集合出来。"}, {"id": "6966503793718460424", "title": "vue-router使用keep-alive动态缓存页面。一种新的解决方案。", "desc": "首先，在配置router的地方配置meta。 然后在含有router的路由出口文件中 当需要缓存时，给相应页面的相应路由myKeepAlive设置为true就行了，不需要缓存时设置为false。 当然"}, {"id": "6981990666133995551", "title": "新建一个 Vue 3.0 + Vite + ts 项目", "desc": "1. 新建项目 2. 关联 git 仓库 3. 设置本机IP地址为默认服务IP 4 多语言配置 5. scss配置"}, {"id": "6992216386345336869", "title": "Vue 通过一个案例来复习组件间通信", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 背景 之前学习过Vue组件间的通信机制，有父子组件间通信（props/$emit），中央事件总线 $emit/$on,Vuex状态管理等等。"}, {"id": "6950478072906776589", "title": "实现无规则截图", "desc": "大家所见到的大多数都是有规则截图,可以应付大部分的应用场景,但是对于图片处理,想要将规则交给用户,普通的截图已经满足不了用户了,那我们能不能前端实现图片的任意规则截取,接下来让我一起探讨一下吧!通过 "}, {"id": "6844903990610624520", "title": "用初中数学知识撸一个canvas环形进度条", "desc": "周末好，今天给大家带来一款接地气的环形进度条组件vue-awesome-progress。近日被设计小姐姐要求实现这么一个环形进度条效果，大体由四部分组成，分别是底色圆环，进度弧，环内文字，进度圆点。设计稿截图如下： 我的第一反应还是找现成的组件，市面上很多组件都实现了前3点，…"}, {"id": "6997057282454323214", "title": "【Vue2.x 源码学习】第四十三篇 - 组件部分 - 组件相关流程总结", "desc": "组件相关流程总结:Vue.component 的实现;Vue.extend 的实现;组件合并的实现;组件编译的实现;创建组件的虚拟节点;组件生命周期的实现;创建组件的真实节;"}, {"id": "7001875768334614542", "title": "vue3.0带来的新变化", "desc": "8月更文挑战 Vue.js 3.0并没有沿用Vue.js 2.x版本的代码，而是从头重写了，代码采用TypeScript进行编写。 新版的API全部"}, {"id": "6844903607985258510", "title": "记一次vue+element+echarts项目的优化（如何轻松将项目性能提升70%）", "desc": "最近在做一个项目，技术栈为vue全家桶 + element-ui + echarts，打包后发现有1.44M，首屏体验很差。这能忍？果断开始优化。下面说说我是如何将一个打包后1.44MB的项目变成打包后只有0.42MB，性能提升70% 的。 vue-cli提供了一个很方便的查看…"}, {"id": "6878320007072186382", "title": "Vue3 项目搭建俺来了", "desc": "如果出现上面的错误信息，则需要把下面的npm地址信息加入到windows Path环境变量中，然后重启dos窗口或者vscode再次验证。 此时按钮已显示，但无样式，下面配置按需引入样式。编辑babel.config.js，plugins属性为增加部分"}, {"id": "6844903773245014023", "title": "Vue-Cli3多页面配置与编译时构建优化", "desc": "结合dllPlugin预构建公共代码块，从而优化编译时的构建速度。 2.1. app目录说明 项目中分别有new_years_festival和spring_festival两个页面，index.js为页面入口文件（必须），config.json为多页面配置文件(必须)。 a.…"}, {"id": "6844904194302803975", "title": "Vue中引入Echarts封装组件的两种方式（全局引入和按需引入）", "desc": "1. 安装echarts 2. 全局引入 3. 按需引入 4. 参考文档 1. 安装echarts 当然，你不使用vue-echarts也可以实现按需引入，就可以不安装vue-echarts，下面会讲到。 2. 全局引入 使用 import echarts from 'echa…"}, {"id": "6997793607247724551", "title": "【知识】Uni-app-学习笔记 01", "desc": "Uni-app学习笔记系列 【知识】Uni-app-学习笔记 01 持续更新中........ Uni-app-学习笔记 01 环境搭建 页面外观配置 数据绑定 uni-app的生命周期 组件的使用 "}, {"id": "6844904073565585421", "title": "彻底搞定vue2.0生命周期钩子函数问题", "desc": "花10分钟读下去，相信我你一定会有一些收获（仅仅指刚入门的小伙伴，作者也是一名刚入门的前端小白，大佬请见谅哈。😁😁） beforeCreate：在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。 created：实…"}, {"id": "6997425553271701535", "title": "Vue3.0 diff更新过程", "desc": "vue3.0的节点中增加了一个dynamicChildren属性，直接遍历所有的动态子元素，省略了遍历静态元素的时间，如果dynamicChildren没有的时候，直接进行全量的diff运算。"}, {"id": "6999297270533341214", "title": "Vue Provide / Inject 祖孙组件传值", "desc": "祖先组件提供数据 子组件注入数据 注意 provide/inject 绑定并不是响应式的。我们可以通过传递一个 ref property 或 reactive 对象给 provide 来改变这种行为。"}, {"id": "6999278371293265956", "title": "vue3前端青铜到黄金王者 - 第8个入门v watch使用", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 什么是组件监听，监听是 Vue.js 最强大的功能之一。"}, {"id": "6982023224414617614", "title": "vue 系列 -- vue-router 传参", "desc": "前言 有个项目需求：从 A 页面携带参数跳转到 B 页面 在网上查了一下，总共有两种方式：params 方式 和 query 方式 其中涉及到 this.$router 和 this.$route 两"}, {"id": "6873377646458683406", "title": "尝鲜vue3.0- 扶我起来学一下组合式API（5）", "desc": "立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。"}, {"id": "6844903849262579725", "title": "从vue组件三大核心概念出发，写好一个组件【实战篇】-写一个抽屉组件", "desc": "我们想象一下用户会如何使用我们的组件，它可能需要哪些自定义的功能，比如内容的宽度，控件的位置，抽屉的位置，控件样式自定义等等，可能的交互比如：点击控件/鼠标悬浮打开抽屉，点击抽屉外部收起抽屉等等，接着我们判断一下哪些是需要暴露给外部组件的，哪些是属于组件内部的状态，尽可能的做到…"}, {"id": "6844904128435470350", "title": "说说Vue的几个watcher（一）——render watcher", "desc": "我们都知道Vue.js具有数据响应式的特点。 我们用三篇文章来看看这三种watcher都是什么、干什么用、以及怎么用的。 结合上面的代码来看，响应式意味着：当name属性值改变时，渲染的内容也应随之变化。 用了和变了，是可以通过对该属性值设置访问描述符（get/set）知道的。…"}, {"id": "6999250650651426852", "title": "Vue3.0学习总结", "desc": "一、生命周期（钩子） 1. 创建期间的生命周期函数 创建期间的生命周期函数： beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好data和 methods 属性。 created"}, {"id": "6844904080284844046", "title": "vue+ egg 仿缤客网", "desc": "这个项目是仿制缤客网的页面，因为缤客网机票页面打不开，所以就没有编写机票页面，并且后端的api我只写了booking页面、login页面、register页面,不足之处请见谅。"}, {"id": "6930581997102628877", "title": "前端初学者的第一个Vue后台管理项目总结1：基础架构篇", "desc": "最近终于完成了自己的第一个Vue项目，是一个简单的后台管理系统，业务模块很少，主要是实现了一些自己想做的功能。在做项目期间踩了很多坑，体会到了前端对于非科班转行同学深深的恶意，因此想把自己的经验总结为几篇文章，希望能够帮到和我一样的同学。 对于路由文件来说，同样可以使用自动注册…"}, {"id": "6844904150560423950", "title": "Vue3.0 中 Object.defineProperty 的代替方案 Proxy", "desc": "handler.deleteProperty() 方法用于拦截对对象属性的 delete 操作。 handler.get() 方法用于拦截对象的读取属性操作。 handler.getOwnPropertyDescriptor() 方法是 Object.getOwnPropert…"}, {"id": "6844903606127165453", "title": "vue中使用高德地图搭建实时公交应用（地图 + 附近站点+线路详情   + 输入提示+换乘详情）", "desc": "注意不管是采用哪种方式，都要保证你想要加载地图的js文件，在引入的sdk之后。这样，在第三步的时候，才不会报错"}, {"id": "6999251232623689759", "title": "vue.use()做了什么工作", "desc": "vue.use()做了什么工作 该js如果是对象 该对象里面要有一个install方法,调用里面的install方法 该js是一个function Vue.use时function会直接执行"}, {"id": "6906779250972590087", "title": "记Vue3.0", "desc": "vue3.0正式版本终于在九月低发布了，本人在实习的过程中主要进行的项目也是基于Vue3.0的Beta版本composition-api开发的，就抱着热情学习了下Vue3.0，并在此做如下总结。 源码的优化主要体现在使用 monorepo （更好的代码管理方式）和 TypeSc…"}, {"id": "6976800153696993311", "title": "vue3.0中setup函数中参数props，以及 Context的含义", "desc": "setup函数 props指的是父组件传递过来的值 context指的是上下文 注意：（在使用props时不能使用es6周的解构，因为这会让props消除响应式，如果想使用解构应该使用Composit"}, {"id": "6844903725539016712", "title": "vscode下的vue文件格式化", "desc": "我相信基本上每一个在vscode上面码Vue代码的都会下载Vetur插件用来格式化等操作，今天Vetur更新了0.14.2版本，最近在使用的时候，感觉格式化总是出问题，去Vetur上面看了下，发现Ve"}, {"id": "6844904081476042759", "title": "NutUI2.2震撼发布", "desc": "与时俱进，拥抱未来。NutUI Next 版本基于即将发布的 Vue 3.0 实现，并争取和 Vue 3.0 同期发布。 随着前端应用的复杂度不断飙升，组件的可维护性以及扩展性愈加困难。需要兼顾各个类以及方法的复用性和扩展性，为了解决这一痛点，在NutUI Next版本中将全面…"}, {"id": "6976227341190037541", "title": "Vue3中ref和toRef的区别", "desc": "ref复制， 修改响应式数据，不会影响以前的数据，界面会更改。 toRef引用， 修改响应式的数据，会影响以前的数据，界面不会更新。"}, {"id": "6844903961154207757", "title": "记一次vue-cli 3.0 build包太大导致首屏过长的解决方案", "desc": "前端弟中弟，问题都是项目中遇到的，所以记录了下来。"}, {"id": "6990612599582752782", "title": "Vue源码解析：编译过程之parse方法", "desc": "parse方法其主要思想就是遍历html的字符，然后进行匹配，将所有匹配到的开始标签压入栈中。当匹配到结束标签时，从栈中找到最近的相匹配的标签，将其弹出栈，然后形成一个完整的ast节点。最终形成ast"}, {"id": "7001255311063384101", "title": "回首Vue3之路由篇（一）", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 我们的路由篇是围绕着Vue Router 4.x来讲的，这篇文章我们来讲一下路由的左右护法:router-link和router-view"}, {"id": "6974682461343055908", "title": "vue+element 表单验证 自定义验证 正则验证 多表单验证", "desc": "项目中经常会出现的表单验证环节，一般是一个表单，提交时验证一波就可以了，难免遇到业务繁杂的时候，一个表单不能满足需求了，就需要设置多个表单，验证方式也需要稍作调整"}, {"id": "6985193653798961160", "title": "总结一下Vue中的那些骚操作一二三", "desc": "使用Vue的人很多，也见过各种比较骚的操作，今天就来总结一下这些骚操作都是有多骚……(^ ^) 1、Vuex状态管理的替代品 开发过微信小程序的朋友肯定非常清楚，经常需要在全局app的globalDa"}, {"id": "6948326578434605064", "title": "Vue 移动端开发记录", "desc": "因为接下来有个 H5 的页面要开发，虽说是 H5，但整体比较偏向 WebApp 形式。为了方便接下来的开发工作，于是就花了 3 - 4 天简单的封装了一套适用于项目的架子，并且将过程记录了下来，希望能与大家一起进步。 在进行移动端页面开发时，屏幕适配是首要问题。 移动端的界面开…"}, {"id": "6874012730597212173", "title": "vue+node.js手把手教你搭建一个直播平台（四） 接入直播接口", "desc": "上一期，帅气的小羽给老铁们介绍了直播平台的项目的前端页面的初步切图，这期就让小羽带大家接入直播相关的api接口。敲黑板！敲黑板！敲黑板！重点来啦~ 在src目录下个新建api文件夹，api下新建modules文件夹和index.js文件。其中index.js是我们api的统一入…"}, {"id": "6844904136492728327", "title": "element-ui -- 彻底搞懂element-ui里面的form校验", "desc": "基本使用看官方文档就好了，这里我把官方文档再解析下。 el-form需要传两个参数，model和rules, model是 表单数据对象 , rules是 表单验证规则。 表单里面使用值都需要在model里面，这样才能算是遵守规范。 这样官方文档我们看完了。剩下底部一个更多的a…"}, {"id": "6844903569896767495", "title": "Vue+ElementUI实现表单动态渲染、可视化配置", "desc": "前些日子碰到了动态渲染表单的需求，在这里记录一下，也许能帮到大家。 本文着重梳理动态渲染思路，关于超级表单，由于还不够完善，就不做赘述。 了解这些后，我们再来一步一步实现这个组件。 第二步，设置默认值。 因为在每个form-item都会需要一个v-model，所以在渲染之前，保…"}, {"id": "6957248737466908709", "title": "是时候从vue2 迁移到 vue3了 （系列二）", "desc": "上一篇文章：是时候从vue2 迁移到 vue3了 （系列一） 16.内联模板 Attribute 非兼容 变化概览： 对内联特性的支持已被移除。 2.x 语法 在 2.x 中，Vue 为子组件提供了 "}, {"id": "6859237405854171144", "title": "Vue 前端可视化活动编辑器", "desc": "先看效果，为一个可视化活动编辑器。 基于 JSON Schema 开箱即用的简单活动可视化编辑器。 在做生成一个可视化店铺装修系统的时候，需要解决配置数据表单的通用性，参阅了一些现用的解决方案，最终通过 JSON Schema 来生成对应的表单和校验规则。 首先可视化编辑器需要…"}, {"id": "6854573213096247304", "title": "从Vue源码中学到的28个编程好习惯", "desc": "笔者最近在读Vue2.6.11的源码，在阅读过程中，不仅体会到Vue组件化及数据响应式的设计之美，也感叹于尤大撸码的规范、优雅。所以这里一一将其总结罗列出来，保证新手看了，写代码更老练。老人看了，更进一步。 || 、&& 代替 ...? ... : ... if...else.…"}, {"id": "7003134077180051493", "title": "v-model vue2-vue3实现跨组件双向绑定不同方法 ", "desc": "vue2: 1.在调用组件父组件内 创建响应式数据 并使用v-model绑定传入封装好的input组件内 2.input组件内使用value接收并绑定v-model传入值，在输入动作发生时，通过inp"}, {"id": "6844903825401184270", "title": "高仿移动端网易云音乐 Vue前端项目", "desc": "后端操作见文档。 banner、排行榜左边的三个按钮点击没有效果( ´▽｀) ，没时间写那些啦... 登录后展示头像和昵称，且可进入个人中心即“我的”页面，可查看收藏的音乐和最近播放过的音乐。 打勾的为已完成的内容，现在本项目除个人信息修改以外，其他功能都已完成。 字体加粗的部…"}, {"id": "6844903497687646222", "title": "移动 Web 开发问题和优化小结", "desc": "到目前为止，互联网行业里，手机越来越智能化，移动端占有的比例越来越高，尤其实在电商，新闻，广告，游戏领域。用户要求越来越高，网站功能越来越好，效果越来越炫酷，这就要求我们产品质量越来越高，web前端开发而言是一个挑战，是一个难题，也是一个机遇。如何让我们所开发的手机页面能有更好…"}, {"id": "6844904201752068109", "title": "手摸手带你理解Vue的Watch原理", "desc": "watch 是由用户定义的数据监听，当监听的属性发生改变就会触发回调，这项配置在业务中是很常用。在面试时，也是必问知识点，一般会用作和 computed 进行比较。 那么本文就来带大家从源码理解 watch 的工作流程，以及依赖收集和深度监听的实现。在此之前，希望你能对响应式原…"}, {"id": "6994453317078220837", "title": "Web3+vue-cli-plugin-web3modal 快速来创建你的第一个以太坊 dAPP", "desc": "Web3是为让互联网更去中心化、可验证、安全而发起的一组广泛的运动和协议；Web3愿景是实现无服务器、去中心化的互联网，即用户掌握自己身份、数据和命运的互联网；Web3将启动新全球数字经济系统，创造新"}, {"id": "6997172216211177502", "title": "vue3学习 --- Mixin 和 Composition API 介绍", "desc": "Composition API是Vue3中核心逻辑及代码组织方法。是一组基于功能的附加API，可以灵活的组合组件的逻辑。用于解决Vue2的Options API中代码逻辑分散的问题。"}, {"id": "6844903560358920199", "title": "Vue封装Swiper实现图片轮播", "desc": "在实现封装之前，先介绍一下Swiper。 Swiper是纯Javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。 Swiper能实现触屏焦点图、触屏Tab切换、触屏多图切换等常用效果。 Swiper开源、免费、稳定、使用简单、功能强大，是架构移动终端网站的重要选…"}, {"id": "6990241841404706852", "title": "Vue中绘制echarts地图", "desc": "现在的Echarts库不再自带地图 地图js or json需要自己下载。 1、启动项目 2、引入自己下载的地图JS 3、绘制自己想要的地图样式，以及动态效果 这里需要自己定义地图的点，我是在百度地图"}, {"id": "6991838938113507365", "title": "ElementUI 树形表格懒加载，内层数据实时更新问题｜8月更文挑战", "desc": "背景 这几天做需求，有一个表格是树形数据，内层的数据采用懒加载，但是在内层数据修改之后，UI页面的数据没有实时更新，感觉用户体验不是特别好，记录一下优化的过程。 采用的是ElementUI来实现的树形"}, {"id": "6844903926819454983", "title": "Vue原理解析（九）：搞懂computed和watch原理，减少使用场景思考时间", "desc": "之前的章节，我们按照流程介绍了vue的初始化、虚拟Dom生成、虚拟Dom转为真实Dom、深入理解响应式以及diff算法等这些核心概念，对它内部的实现做了分析，这些都是偏底层的原理。接下来我们将介绍日常开发中经常使用的API的原理，进一步丰富对vue的认识，它们主要包括以下： 这…"}, {"id": "6844903824742678541", "title": "「Vue进阶」5分钟撸一个Vue CLI 插件", "desc": "如果你正在使用Vue框架，那么你肯定知道Vue CLI是什么。Vue-cli 3，它是Vue.js 开发的标准工具（脚手架），提供项目支架和原型设计。 除了日常构建打包项目，Vue CLI3 的一个重要部分是cli-plugins，插件开发。 本文将教你如何科学的创建一个Vue…"}, {"id": "6992374705890000927", "title": "在vue项目中使用webpack5的模块联邦", "desc": "在vue项目中使用webpack5的模块联邦 这是我参与8月更文挑战的第3天，最近公司要进行微前端技术转型，新的项目准备使用webpack5，之前用的是阿里的qiankun.然后我这边开始尝试用web"}, {"id": "6997745020971253773", "title": "vue3数据响应式原理分析", "desc": "按响应流程和简化版源码来分析响应式系统vue3 中的 reactivity 是一个独立的包，可以完全脱离 vue 使用，理论上在任何地方都可以使用(react 都可以)我们先来看看 reactiv"}, {"id": "6958395697133518878", "title": "Vue3基础-02：vue3中ref和reactive", "desc": "1.改写计数器例子： Vue2中的代码： 使用vue3改写后的代码： setup:在生命周期之前运行的 通过代码可以发现，increase函数改变count的值是改变的count对象的value,但t"}, {"id": "7000253909742649375", "title": "ESlint 配置使用指南", "desc": "ESLint 是一个开源的 JavaScript 代码检查工具，它是用来进行代码的校验，检测代码中潜在的问题，比如某个变量定义了未使用、函数定义的参数重复、变量名没有按规范命名等等。 VSCode 可"}, {"id": "6970892572398977061", "title": "从 Ajax 拦截到使用 Vue3 + Element Plus 构建 Chrome Extension", "desc": "Vue3 项目实践，构建可用的 Chrome Extension；Vite + Vue3 + TS + VScode + Volar 加持，开发体验良好"}, {"id": "7002443512276844552", "title": "petite-vue源码学习之v-for", "desc": "v-for 紧接着前面的系列文章，今天的目标就是学习v-for这个指令，petite-vue中的用法比较灵活，首先就来认识一下语法吧。 认识语法 ...of... ...in... ({ ... },"}, {"id": "6956431101141352485", "title": "vite+vue3+ts+eslint编写移动端rem自适应", "desc": "vite+vue3+ts+eslint编写移动端rem自适应，使用postcss进行css兼容和px转rem计算，已安装vant，axios"}, {"id": "6844903502586576904", "title": "BetterScroll：可能是目前最好用的移动端滚动插件", "desc": "BetterScroll 是一款重点解决移动端各种滚动场景需求的开源插件（GitHub地址），适用于滚动列表、选择器、轮播图、索引列表、开屏引导等应用场景。 为了满足这些场景，它不仅支持惯性滚动、边界回弹、滚动条淡入淡出等效果的灵活配置，让滚动更加流畅，同时还提供了很多 API…"}, {"id": "6981452258579841037", "title": "vue2 vue3中使用Echarts", "desc": "安装 vue2中使用Echarts 在main.js文件中 给定一个容器 echarts初始化应在钩子函数mounted()中，这个钩子函数是在el 被新创建的 vm.$el 替换，并挂载到实例上去之"}, {"id": "6844903557934628872", "title": "使用vue构建一个自动建站项目", "desc": "不过基本能满足公司的需求了，能编辑的都可以编辑，组件的background(包括背景图片) color border box-shadow margin padding width height 对齐方式(字体和组件内部元素) border-radius font(font-s…"}, {"id": "6975686914267414565", "title": "基于Vue 的单元测试", "desc": "Vue项目单元测试意义 单元测试是软件开发非常基础的一部分。单元测试会封闭执行最小化单元的代码，使得添加新功能和追踪问题更容易。Vue 的单文件组件使得为组件撰写隔离的单元测试这件事更加直接。"}, {"id": "6997583973622743071", "title": "1x0 VueRouter - 基础 - 入门", "desc": "VueRouter 基础教程系列 🎉 实例 JavaScript: HTML： 路由模式 hash 模式使用 createWebHashHistory() 方法创建。 HTML5 history 模式"}, {"id": "6844903593284206605", "title": "DMap(谛听)——实战Vue百万条数据渲染表格组件开发", "desc": "近几个月在开发一个基于Vue的数据可视化分析辅助应用———DMap(谛听)，一套为数据分析师和数据科学家提供的基于位置大数据分析的工具，旨在提高数据分析效率，降低获取多数据并行分析成本，简化大屏和数据报告开发制作流程。UI组件使用的是iView，地图可视化库使用的是inMap，…"}, {"id": "6844903731981467661", "title": "初探 Vue3.0 中的一大亮点——Proxy !", "desc": "MDN 上是这么描述的——Proxy对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。 官方的描述总是言简意赅，以至于不明觉厉... 上述例子中，我们事先定义了一个对象 obj , 通过 Proxy 构造器生成了一个 proxyObj 对象，并对其的 se…"}, {"id": "6844903895949557768", "title": "Vue探究：精读mixin与mergeOptions", "desc": "mixin在vue框架中的定位是实现逻辑复用的功能，可以类比javascript中的混合继承方式。实现逻辑复用的方式有很多种，比如react提倡的高阶组件、hooks等等，当然，在Vue中官方推荐的且使用频次最高的还是mixin。 本篇文章将会探讨Vue底层如何实现mixin，…"}, {"id": "6844903594261479437", "title": "复习Vue中的方法,计算和侦听者", "desc": "最近一直在Vue和angualr.js 1.x之间切换。大脑都快切换不过来了。 趁着周末，还是把Vue的基本知识复习一下。 工作中我喜欢用Vue的原因之一就是因为方法，计算属性和侦听者非常有用，并且他们之前差异的可读性很好。在理解这三者之前，我很难充分的利用Vue的全部功能。尽…"}, {"id": "6975918273074298917", "title": "Vue源码解析之虚拟DOM和diff算法", "desc": "虚拟DOM和diff算法也是vue高效的原因。 DOM如何变为虚拟DOM，属于模板编译原理范畴，本课次不研究。 介绍 diff算法可以进行精细化比对，实现最小量更新，只需要更新修改的DOM，而不是整个"}, {"id": "6976277236194213919", "title": "环境变量", "desc": "一. 认识环境变量 1. 端口配置 前端项目启动时，占用端口号是在vue.config.js配置的 上面的 process.env.port实际上是一个nodejs服务下的环境变量"}, {"id": "6969597398758735903", "title": "【Vue2.x源码学习】第一篇 - 源码环境搭建", "desc": "【Vue2.x 源码学习笔记】第一篇-使用 rollup 构建 Vue 环境（Vue工程的初始化，Rollup、babel配置，项目构建）"}, {"id": "6901866983835959309", "title": "vue2.x从零到一的搭建自己风格的后台管理系统 - 动态路由", "desc": "哈哈哈，看到了自己上一篇文章被推荐到了首页，很激动，于是就开始迫不及待的准备这一篇文章了了，这篇文章只有一个目的，就是解决动态路由的匹配和使用。 先介绍一下我现在项目的背景，一个项目被分为N个不同的系统（模块），每个系统（模块）都执行各自内容，有公共数据也有模块私有数据（以后会…"}, {"id": "6844903582588731405", "title": "从零开始搭建webpack应用", "desc": "最近研究webpack配置神烦，打包工具指不定哪天又要被取代。要想自己手动搭一个复杂应用的webpack脚手架不是一件容易的事, 看看vue-cli的webpack配置文件就有8+个，使用的插件有14+个，代码800行＋。还没开始写代码就要搞懂这么多“规则”，还不如多花点时间研…"}, {"id": "6909271326477778952", "title": "弹窗滚动穿透原理与解决方案的探讨", "desc": "发现在安卓手机上完美实现，但是IOS的滚动机制让使人头大，依然可以穿透，这时我们在弹窗后需要把滚动的div上加上 overflow:hidden; 去掉 -webkit-overflow-scrolling: touch; 属性在关闭弹窗的时候恢复为 overflow: aut…"}, {"id": "6897073144066998280", "title": "vue directives 使用详解", "desc": "格式: v-focus=\"value\" ，这里的 value 是变量名，而不是字符串。 可以看到，通过绑定 value ，指令中接收的 binding 多了个 value 的属性，值就我们传递进来的变量值。而且还多了一个 expression ,expression：字符串形式…"}, {"id": "6966242781735944223", "title": "vue3.0埋点方案初探", "desc": "对vue的$on及$emit原理进行学习。vue3.0中，指令式埋点方案可行性探索及对应的源码分析。使用装饰器进行通用埋点。"}, {"id": "6950201335815864350", "title": "Vue源码之computed", "desc": "computed大法秒呀！ 页面P 与 computed A 与 data B 三者不清不楚的依赖关系是啥!"}, {"id": "6844903647801802766", "title": "关于Vue和React区别的一些笔记", "desc": "这篇文章记录我在使用Vue和React的时候，对他们的不同之处的一些思考，不仅局限于他们本身，也会包括比如 Vuex/Redux 等经常搭配使用的工具。因为涉及到的内容很多，可能下面的每一个点都能写成一篇文章，这次先简单做一个概要，等我有空做一个详细的专题出来。 为什么 Rea…"}, {"id": "6969527075262693389", "title": "vuex的state真的需要持久化吗？", "desc": "vuex是vue生态的重要组成部分，那么vuex的state究竟需不需要持久化，这篇文章是我的看法。"}, {"id": "6855129005754941454", "title": "vue2.x使用typescript开发记录", "desc": "早在去年vue官方已经支持了脚手架生成TypeScript项目了，加上即将到来的vue3是用TS编写的。 故开始尝试现有项目的重构 此文为vue2.x + TypeScript记录文,我会将踩过的坑一一记录。 结果毫无作用，自信满满的重新编译，一看结果还是报错，百度google…"}, {"id": "6930128846062780430", "title": "【Alpaca】.Net版开源配置中心 - 技术选型 Vue 3.0", "desc": "考虑下团队内对Vue + TS + VS Code的熟练程度。过程中你会遇到一些问题，要么靠耐心解决，要么靠经验。 能，只是用起来没有那么顺滑。毕竟正式版发布也没多久，生态需要慢慢跟上。但这并不妨碍你使用，而且很多改进的亮点也促使我克服这些小障碍。 搭配Vite使用，显著提升项…"}, {"id": "6976217313750188039", "title": "vue插槽", "desc": "对vue插槽的内容回顾和记录总结。参照vue 2.6.0及之后的版本。 用途 插槽主要是用在组件中可灵活变动的地方，不过，最近遇到gs代码规范不让使用v-html,那也可以用插槽达到同样效果。 基础使"}, {"id": "6923852311781441549", "title": "Vue - HR-saas中台管理项目（上）", "desc": "4. 获取用户资料接口和token注入"}, {"id": "6844903538133303309", "title": "移动端Modal组件开发杂谈", "desc": "Vant 是有赞开发的一套基于 Vue 2.0 的 Mobile 组件库，在开发的过程中也踩了很多坑，今天我们就来聊一聊开发一个移动端 Modal 组件（在有赞该组件被称为 Popup ）需要注意的一些坑。 在任何一个合格的UI组件库中，Modal 组件应该是必备的组件之一。它…"}, {"id": "6844903961086918663", "title": "你为什么看不懂源码之Vue 3.0 面面俱到【2】", "desc": "熟悉一个源码/工具的方法就是让它跑起来，更快速的熟悉一个源码/工具的方法就是让它的测试用例跑起来。 命令行输出了让人赏心悦目的结果。 为什么要从测试用例看源码呢，因为它就像我们的产品经理，它会告诉我们输入什么，预期什么。它会考虑边界情况，基本上源码难懂的地方都是边界情况，所以这…"}, {"id": "6844904181443067912", "title": "学习vue源码（5） 手写Vue.use、Vue.minxin、Vue.compile", "desc": "安装Vue.js插件。如果插件是一个对象，必须提供install方法。如果插件是一个函数，它会被作为install方法。调用install方法时，会将Vue作为参数传入。install方法被同一个插件多次调用时，插件也只会被安装一次。 注册插件，此时只需要调用install方法…"}, {"id": "6895355256939479047", "title": "如何避免在Vue应用中违反SOLID原则", "desc": "在这篇文章中，我将讨论如何在 Vue 应用中使用 SOLID 原则。 接下来我们看看如何在 Vue 实战中避免这些原则，我们从一个 TODO LIST 项目中去体会这些观点。 用 vue cli 初始化一个 Vue 项目。 我们用 vue2.6.10 + typescript3…"}, {"id": "6898523017236709383", "title": "vue基础知识点(笔记)", "desc": "前言总结是基于vue2.x,vue-cli3.x,主要记录些，vue常用的指令、事件，监听、数据绑定、过滤器、组件、动画、vuex，vue-router等日常工作中时常用到的东西,也有些常用的插件和开"}, {"id": "6888636460774195214", "title": "Vue3.0响应式原理模拟实现", "desc": "Vue3.0 的响应式系统底层使用了 Proxy 对象实现，在初始化的时候不需要遍历所有的属性，再把属性通过 defineProperty 转化成 getter和setter，另外如果有多层属性嵌套的话，只有访问某个属性的时候才会递归处理下级的属性，所以Vue3.0中的响应式系…"}, {"id": "6844903872268337165", "title": "用Vue.js在浏览器中裁剪图像", "desc": "你是否写了一个需要接受用户上传图片的 Web 应用，后来才意识到用户总是提供各种形状和大小的图像来破坏你的网站主题？在网络上处理图像很容易成为一种痛苦 —— 当然，除非你使用了正确的工具。 在本教程中，我们将探讨如何在浏览器中使用 JavaScript 库来操作图片，为服务器上…"}, {"id": "6906834504716845064", "title": "使用 FormMaking 为表单添加事件处理", "desc": "表单在日常使用中，面对很多特殊的业务场景，需要为表单中某些控件单独设置一些事件来做自定义操作。为此，我们为 FormMaking表单设计器 添加了新的功能，可以快速的对表单中的元素绑定各种事件，使得表单能够有更好的扩展性。 查看 官方文档，可以了解到新版本添加了获取表单项组件的…"}, {"id": "6992760817028431886", "title": "V-Model与表单", "desc": "基本用法 VUE提供了v-model指令，用于在表单类元素上双向绑定事件。 input和textarea 可以用于input和textarea 注意：所显示的值只依赖于所绑定的数据，不再关心初始化时的"}, {"id": "6896330877903568903", "title": "Vue的变化侦测原理", "desc": "Vue.js会自动通过状态生成DOM，并将其输出到页面上显示出来，这个过程叫渲染。Vue.js的渲染过程是声明式的，我们通过模板来描述状态与DOM之间的映射关系。 通常，在运行时应用内部的状态会不断发生变化，此时需要不停地重新渲染。这时如何确定状态中发生了什么变化？ 变化侦测就…"}, {"id": "6844903590297878541", "title": "Vue DevTools可使用修正方法", "desc": "因为工作要求，目前主要在用Vue.js技术栈做开发，调试是必不可少的，这里会用的Vue DevTools的调试工具，问题就出在这里，当用Vue DevTools做调试时，很多时候都不能用，提示没有监测到Vue，这让工作效率瞬间拉低了。 好了，开始正题，下面来说一下修正的方法。 …"}, {"id": "6904573979554807815", "title": "Vue各版本对比", "desc": "1. Vue完整版和运行时版本不同 因为如果没有编译器的话，vue和html语法之间就没有桥梁接通，所以完整版就包含了编译器。 编译器的作用就是把上述代码中template的代码翻译成为render函数。 但是编译器有一个问题就是体积很大，完整版本要比非完整版本大43%左右。 …"}, {"id": "6879272609667219464", "title": "芒果 UI 项目实现思路", "desc": "1. 项目简介 芒果 UI 是一个基于 Vue / TypeScript 实现的 UI 框架，提供了Button、Input、Grid、Layout、Toast、Tabs、Popover、Collapse等常用组件，适合移动端和 PC 端使用。 2. 项目实现思路(以 Butt…"}, {"id": "6844903812285595662", "title": "深入剖析Vue源码 - 基础的数据代理检测", "desc": "数据代理的另一个说法是数据劫持，当我们在访问或者修改对象的某个属性时，数据劫持可以拦截这个行为并进行额外的操作或者修改返回的结果。而我们知道Vue响应式系统的核心就是数据代理，代理使得数据在访问时进行依赖收集，在修改更新时对依赖进行更新，这是响应式系统的核心思路。而这一切离不开…"}, {"id": "6891657936515366920", "title": "vue-next-reactivity debug + 乞丐版实现", "desc": "写在最后：上述代码根据vue3源码进行大量删减，保留最基本的逻辑功能（依赖收集），会存在很多问题，只进行了基本类型的测试，勿杠。"}, {"id": "6844904015436709902", "title": "[译] Vue 3 Composition API 之单元测试", "desc": "为了让开发者们更早的尝鲜 Composition API，Vue 团队释出了一个让我们能在 Vue 2 中使用的插件，可以在 https://github.com/vuejs/composition-api 找到它。 本文速览了新的 Composition API 如何玩转官方…"}, {"id": "6844903892967227406", "title": "你真的理解nextTick吗？", "desc": "Vue中的nextTick，大家都喜欢用，但是你真的理解其背后的原理吗？相信这篇文章能解开你心中的不少疑惑。"}, {"id": "6943481296685367333", "title": "做Vue性能优化的一些点", "desc": "之前在看到了一片文章，写的比较好，这里记录下自己的理解。 Vue性能优化自己也一直在做，不过没有成体系的列出来，这里记录下，方便以后新项目或者新公司做系统的优化时有遗漏。 这里指的是Vue语法的使用，需要注意到的方面。 vue会对数据进行劫持，如果只是单纯的需要展示很多数据不做…"}, {"id": "6938377890912436255", "title": "Vue3组件（19）如何优雅的给组件设置属性", "desc": "属性，多乎哉不多也。 原生HTML5提供了一些属性，然后UI库又在此基础上扩展了好多属性，所以与其说学习UI库，倒不如说是学习这些属性都是啥意思。 当然平时在使用的时候还是挺轻松的，设置需要的属性就好，其他的用到的时候再去看就好。 但是感觉哪里不对的样子。 这样是不是更优雅了一…"}, {"id": "6844903869504290829", "title": "Vue封装三方库的运用： $attrs + $listeners", "desc": "在封装一个插件时，大家往往会先从使用插件者能传递的数据，开始设计插件的入口，封装vue组件同理。vue中封装一个组件，组件上dom绑定传递的各种东西，除class style外，在vue里本质上只有以下三种 下面简单demo封装一个三方组件，我们希望首先是继承这个三方组件的所有…"}, {"id": "6844903811253796872", "title": "如何开发一个基于 Vue 的 ui 组件库（二）", "desc": "书接上回，说道利用 sideEffects 字段，只需读取源文件即可实现按需加载，还有个坑忘了说... 因为我们只注意到了作为组件库的源代码，而忘了我们的文档是通过 vuepress 编译，即底层也是基于 webpack 进行打包。所以 sideEffects 中也要加上文档中…"}, {"id": "6972183637701689381", "title": "自学Vue five day！！！", "desc": "1.1、Vue的局部过滤器 1.2、Vue的全局过滤器 1.3、过滤器的使用 2、本地存储 2.1、localStorage永久存储 通过控制台来查看是否有存储到。"}, {"id": "6844903586971779085", "title": "快应用，快入门 ", "desc": "开篇也不扯那些没用的，让我们高效的开始教程。 无论学习什么语言、框架、库，首先你要做的，就是登陆它的官网，认真阅读它的入门手册、文档等，这比任何《xx 分钟从入门到精通》、《xx 深入浅出》都要靠谱得多，再加上现在编程体系的愈加完善，开发者越来越注重基础设施的搭建，官网绝对是学…"}, {"id": "6844904163420176391", "title": "读Vue3的Composition API RFC笔记", "desc": "不知道在哪个瞬间,尤大 发了一条微博，我就知道\"大事不妙\"。要来了……千呼万唤始出来 的vue3 就在这个特别的日子发布了。 最核心的一点便是Composition API ，在本文咱们先揭开它的面纱，简单的进行横向对比一下，最后我们将一同构建两个版本：一个使用 Composi…"}, {"id": "6975099057928667173", "title": "面试中的网红Vue源码解析之虚拟DOM，你知多少呢？深入解读diff算法", "desc": "众所周知，在前端的面试中，面试官非常爱考dom和diff算法。比如，可能会出现在以下场景 滴滴滴，面试官发来一个面试邀请。接受邀请📞 详情戳"}, {"id": "6844904105295478797", "title": "手摸手从浅析vue-cli原理到定制前端开发模板", "desc": "从迷糊小生到职场菜鸟，遇到无数难以解决的问题。幸得职场路上有大佬手摸手悉心教导，终于学会独自开着手扶拖拉机出混迹江湖。遥想当时初入江湖，灵魂三问“听说你vue用得挺熟练，写个vue-cli吧？”、“这边需要定制化前端开发模板，你来加优化方案吧？”、“把vue-cli和webpa…"}, {"id": "6844903700759068685", "title": "vue移动端项目缓存问题实践", "desc": "先描述下问题场景：A页面->B页面->C页面。假设A页面是列表页面，B页面是列表详情页面，C页面是操作改变B页面的一些东西，进行提交类似的操作。A页面进入B页面，应该根据不同的列表item显示不一样的详情，从B进入C，也应该根据item的标识比如ID展示不一样的内容，在C页面操…"}, {"id": "6844903592122384397", "title": "vuepress踩坑记", "desc": "vuepress是尤大大4月12日发布的一个全新的基于vue的静态网站生成器，实际上就是一个vue的spa应用，内置webpack，可以用来写文档。恰好最近需要为一些组件写文档，就动手撸了一波，毕竟刚发布，遇到不少坑，最终还是磕磕碰碰的运行起来了，为了避免大家踩同样的坑，特意将…"}, {"id": "6914581766841843719", "title": "Vue视图未更新再次踩坑", "desc": "今天遇到一个Vue数据更新了，但是视图未更新的问题，折腾了我2小时才搞定，有必要记录下来，防止日后再次踩坑。 我需要显示一个列表，而且列表是可编辑的。比如可以修改列表每一项的名称等。 我从后端获取列表后，对其中的每一项数据进行初始化，增加一个editing 可编辑属性。 之后在…"}, {"id": "6844903686657802247", "title": "Vue 2.x折腾记 - (14) Nuxt.js 2 正式版升级采坑以及部署姿势改动", "desc": "前言记录下过程遇到的一些问题及修正知识;之前用的nuxt1.4,仅做备忘录,有兴趣瞧瞧,没兴趣止步;问题开发模式正常,部署模式下找不到静态资源因为我这边用的nginx,这个需要配置下nginx静态资源"}, {"id": "6844903624137523213", "title": "玩烂 Vuex", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 从软件设计的角度，就是以一种统一的约定和准则，对全局共享状态数据进行管理和操作的设计理念。你必须按照这种设计理念和架构来…"}, {"id": "6939412510327963655", "title": "Vue源码解析系列(九) -- 新老虚拟dom是如何进行diff算法的", "desc": "为了解决这个问题，我们的解决方案是--根据真实DOM生成一颗virtual DOM，当virtual DOM某个节点的数据改变后会生成一个新的Vnode，然后Vnode和oldVnode作对比，发现有不一样的地方就直接修改在真实的DOM上，然后使oldVnode的值为Vnode…"}, {"id": "6844904048118726663", "title": "vue组件通信总结", "desc": "11月份的面试越来越觉得自己学的不够踏实和深入。现在实习了有空总结下 此时需要借助vue提供的事件监听机制来完成子组件向父组件数据流动更新的功能。 在子组件使用$emit定义监听事件名称，在父组件使用v-on监听该事件，在事件中改变父组件的状态。 $children用来访问子组…"}, {"id": "6922375815111933966", "title": "Vite+VueRouter+Vuex+Ant Design", "desc": "Vite requires Node.js version >=12.0.0."}, {"id": "6844903829981397000", "title": "egg+vue 管理后台系统的权限认证与控制", "desc": "前言授权流程(直接上图吧)权限控制页面级控制，前端定义路由meta新增permission字段来判断侧边menu菜单是否显示按钮级控制，自定义指令关键接口控制，node转发服务器接口，中间件判断是否在"}, {"id": "6844904145325916174", "title": "如何让TypeScript完美兼容Vue2.x的JSX", "desc": "TypeScript参考了React的JSX，那么我们就以React为例，来分析TypeScript是如何处理React的JSX的。 这段代码足以囊括React的JSX使用的各种方面：宿主元素、宿主元素属性、自定义组件、自定义组件属性、Children，其实看似复杂的JSX片段…"}, {"id": "6916684354634645517", "title": "浅谈vue的两种编译模式---七日打卡", "desc": "$\\color{red}{2.只包含运行时版本}$(用来创建Vue实例，渲染并处理虚拟DOM等的代码,基本上就是除去编译器的其它一切)。 在页面中直接通过script标签引入的vue.js文件就是完整版的。完整版既可以使用render 函数,也可以使用 template 模板。…"}, {"id": "6844903507506495501", "title": "vue-calendar 基于 vue 2.0 开发的轻量，高性能日历组件", "desc": "遇到提示UglifyJs打包编译错误。 src 下面的 App.vue 有 demo 可以参考."}, {"id": "6953551046220185636", "title": "vue3 compile系列一：parse", "desc": "compile的第一步，如果模版template传入的是一个字符串类型，那么就需要用到parse模块，将template转化成ast。 其中，options是CompilerOptions类型，是Pa"}, {"id": "6844903945567993870", "title": "Vue生命周期详解", "desc": "一. Vue生命周期介绍 二. 生命周期解析图"}, {"id": "6844903849958834184", "title": "Vue生命周期总结", "desc": "这些天在尝试开始对Vue源码的解读，一点一点去了解框架的设计以及实现思路。今天在编码时候想了有关生命周期的问题，刚好晚上就看到了相关知识。作为其中一小步记录一下 每个Vue实例在被创建之前都要经过一系列的初始化过程。例如设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更…"}, {"id": "6844903913502703623", "title": "Vue-CLI and Leaflet （10）加载 Esri ArcGIS Map Service", "desc": "这篇文章讲介绍如何在 Vue-CLI 工程中添加 ESRI 的地图服务 ArcGIS Map Service，相信需要用到 ArcGIS Map Service 的对 ArcGIS 平台都有一些了解。 这里我们要是实现加载 ArcGIS Map Service 功能都是基于 l…"}, {"id": "6844903541866250247", "title": "Vue2 技术栈归纳与精粹", "desc": "Vue是一款高度封装的、开箱即用的、一栈式的前端框架，既可以结合webpack进行编译式前端开发，也适用基于gulp、grunt等自动化工具直接挂载至全局window使用。本文成文于Vue2.4.x版"}, {"id": "6844903825115971592", "title": "记一次 Vue 移动端活动倒计时优化", "desc": "通常写倒计时效果，用的是 setInterval，但这会引发一些问题，最常见的问题就是定时器不准。 1. setInterval 定时器 值得注意的是，在 setInterval 里面使用 this 的话，this 指向的是 window 对象，可以通过 call、apply …"}, {"id": "6844903650645508104", "title": "服务器端渲染与Nuxt.js", "desc": "前段时间在知乎上看到一篇提问，说的是为什么现在又开始流行服务器端渲染html了。整理了网上一些评论，结合自己的想法，整理出了一段前端发展史。 早在1989年，HTML的诞生是一个物理学家为了方便学术文档的分享而创造，这个也是前端起始的时间。后来，CSS和Javascript加入…"}, {"id": "6844903669553430536", "title": "Vue作用域插槽 ：slot-scope 实例", "desc": "昨天看vue的官网文档，在slot-scope这块不是特别的明白，今天自己做了一个小例子，便于理解。 先说一下我们假设的应用常用场景，我们已经开发了一个代办事项列表的组件，很多模块在用，现在要求在不影响已测试通过的模块功能和展示的情况下，给已完成的代办项增加一个对勾效果。 解决…"}, {"id": "6889223867068317709", "title": "第 1 篇：Vue.js 很高兴认识你", "desc": "既然是学习编程，那就遵循一下那个古老的传统仪式。 我们写了一个简单的 HTML 文件，使用 Script 标签引入了 Vue，版本是 2.5.16。然后我们写了几行 js 代码。在代码中我们 new（创建） 了一个 Vue 对象，并向这个对象传递了一些选项，例如告诉 Vue 挂…"}, {"id": "6978506564181164045", "title": "Vue响应式原理及简单实现", "desc": "准备工作 先了解一下这些： 数据驱动 响应式核心原理 发布订阅模式和观察者模式 数据驱动 数据响应式：数据模型是普通的js对象，但是当修改数据时，视图也会随之更新，避免开发者手动进行DOM操作 双向数"}, {"id": "6910141614384119815", "title": "【干货】element UI表单校验，他不香吗？", "desc": "在methods生命周期内的valid方法内返回一个箭头函数，箭头函数内写入你想要的验证规则，这样就能接收到自定义参数了。"}, {"id": "6986833250551332901", "title": "tree实现虚拟滚动", "desc": "tree实现虚拟滚动，将数据和dom扁平化，通过children引用，实现树节点的展开隐藏，用虚拟滚动来优化"}, {"id": "6984750633106538533", "title": "鼠标拖拽建立选区，选中元素", "desc": "个人博客网站欢迎交流：萤火之森：https://blog.xkongkeji.com 近段时间做一个编辑器，就需要一个鼠标拖拽选区的功能，方便批量选中元素，进行相应操作，所有就有了这篇文章。 效果展示"}, {"id": "6844903645637509127", "title": "Vue的使用总结和技巧", "desc": "当然是尤大的官网入手了,许多刚学框架的新手都喜欢从网上找视频教程，例如慕课网这种，本人不建议这种学习方法，因为视频的作者会让你跟着他的思维去写一套他的风格的代码，这是一个细思极恐的事情。 其实vuejs官网的东西是非常丰富的，并且我认为需要加入浏览器书签，是需要不间断的重复看的…"}, {"id": "6844903564934922253", "title": "Electron-vue开发实战2——引入基于Lodash的JSON数据库lowdb", "desc": "前段时间，我用electron-vue开发了一款跨平台（目前支持Mac和Windows）的免费开源的图床上传应用——PicGo，在开发过程中踩了不少的坑，不仅来自应用的业务逻辑本身，也来自electron本身。在开发这个应用过程中，我学了不少的东西。因为我也是从0开始学习ele…"}, {"id": "6844903766232137735", "title": "Select 组件实现", "desc": "单选、多选的区分，以及对应处理。 1. 实例 2. 原理 下拉框：包含已选中的高亮项，禁用项，默认选择选项等，具备点击选中，再次点击取消的操作。 利用 tabIndex 属性使得最外层的 div 能够触发 blur 事件，如果失焦就收起下拉框。 组件实现数据双向绑定，当 v-m…"}, {"id": "6897139078794313735", "title": "使用 antd vue2.x 、Vue3.0.2 和Ts 开始你的 Vue3.x 旅程", "desc": "①、首先创建一个文件夹，通过 VsCode 打开文件夹。 ... setup 是围绕 beforeCreate 和 created 生命周期钩子运行，不需要显式地定义。 换句话说，在这些钩子中编写的任何代码都应该直接在 setup 函数中编写。 ref ：将给定的值创建一个响应…"}, {"id": "6970339467957633060", "title": "【Vue2.x源码学习】第三篇 - 对象的单层劫持", "desc": "【Vue2.x 源码学习笔记】第三篇 - 对象的单层劫持；介绍了 Vue 数据初始化-对象属性的单层劫持：data为函数和对象的处理；data函数中this的指；Observer 类，对数据进行观测；"}, {"id": "6993610054263898120", "title": "11x0 精读Vue官方文档 -  CookBook - 添加实例 property", "desc": "精读 Vue 官方文档系列 🎉 Why? 通过为 Vue 构造函数的原型对象 prototype 绑定属性或方法，来实现数据与功能的全局共享和复用。 对比 模块化代码复用 require/import"}, {"id": "6911102469535694856", "title": "手摸手，配置项目中全局loading", "desc": "在后台管理项目中接口的请求响应速度取决于很多因素，如网络、带宽、同时发起的请求数量===，无法将请求结果及时响应的页面上，而我们又需要告诉用户，数据已经在加载了，你需要先等一等，喝杯茶。这个时候就需要 loading了 ，但是一个项目里又不仅仅是只有一个请求，每个都写一遍 lo…"}, {"id": "6844903993425018888", "title": "彻底搞懂Vue SSR", "desc": "服务端将Vue组件渲染为HTML 字符串，并将html字符串直接发送到浏览器，最后将这些静态标记\"激活\"为客户端上完全可交互的应用程序。 开发条件受限。 （服务端只执行beforeCreated 和 created 生命周期函数， 并且没有window, DOM, BOM等）。…"}, {"id": "6993589453293879327", "title": "vue-router 参数汇总 - 自用", "desc": "vue-router相关配置的参数汇总~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"}, {"id": "6969860972869582861", "title": "Vue2 VS Vue3 Diff算法的比较", "desc": "Diff算法 Diff算法即差异查找算法。 Vue的diff策略 传统的计算两颗树的差异时间复杂度为O(n^3),显然成本比较高（老树的每一个节点都去遍历新树的节点，直到找到新树对应的节点。那么这个流"}, {"id": "6844903711249022984", "title": "双十一，打包半价理解Vue的nextTick与watcher以及Dep的蓝色生死恋？", "desc": "这段脚本执行我们猜测会依次打印：19，20，21。但是实际效果中，只会输出一次：21。为什么会出现这样的情况？ 在点击click触发handleClick()事件之后，number会被遍历增加10000次，在vue的双向绑定-响应式系统中，会经过 “setter -> Dep …"}, {"id": "6999500102565888007", "title": "Vue 动画详解", "desc": "CSS 过渡 文档中的例子 Vue 封装了用于 transition 动画的 标签： <transition></transition> transition 标签用有个 name 属性，这个属性传入"}, {"id": "6915228176348102664", "title": "vue3-compile编译原理（一）-- 脱胎换骨", "desc": "背景引入  vue3的学习已经有一段时间了，本着奔浪不奔就可能变成后浪的态度，学习梳理了下vue3的编译，基于vue3的整个编译源码的学习，准备把编译源码按照编译过程分三部分记录学习下来，同各位奔浪一"}, {"id": "6844903954346688520", "title": "Vue基础（十八）vue-cli（Vue脚手架）", "desc": "1. 作用 2. 安装 3. 使用Vue-cli来构建项目 Project name (baoge)： -----项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital…"}, {"id": "6861572888420581390", "title": "在Vue中使用EventBus，你应该知道这些细节！", "desc": "大家或许都听说EventBus,或者说或多或少都了解过，他可以在任何两个组件中进行传值，不局限于父子、祖孙或是兄弟组件，也可以说他是一种发布——订阅的设计模式。"}, {"id": "6844904200803975175", "title": "[译] 用 Web Worker 改善 Vue 组件性能", "desc": "有时开发者需要和一些“很重”的组件打交道 -- 这通常是指由于执行了复杂的任务，所以创建和渲染开销都很大的组件。 比方说，我昨天就在使用“StoryBlok”工具库创建富文本编辑器的时候遇到了麻烦。 事情是这样的，从 StoryBlok API 获取富文本内容的时候，得到的数据…"}, {"id": "6844903635604733959", "title": "如何优雅的升级到webpack4", "desc": "现在距离2018年2月15号webpack4.0.0出来已经有一段时间了，现在已经出了 @vue/cli 3.0，但是楼主还没试过，听说很强大，想要试水的可以看文档 @vue/cli，官方脚手架都用上webpack4了，你项目还停留在webpack3，甚至webpack2，是不…"}, {"id": "6844903698447990798", "title": "使用CSS自定义属性构建骨架屏", "desc": "设计Web上的加载状态常常被忽略或被认为是事后考虑。性能不仅是前端开发人员的职责，构建与慢速连接一起工作的体验也是设计挑战。 虽然前端开发人员需要注意一些事情，比如压缩和缓存，但是设计人员必须考虑UI处于“加载”或“离线”状态时的外观和行为。 随着我们对移动体验的期望发生变化，…"}, {"id": "6844903637446049800", "title": "《地图气球》小程序从产品到运维的个人全栈开发过程分享（长文）", "desc": "怕过不了审，先声明一下，这不是广告，因为这个小程序没上架。 从5年前入行的时候就一直想做一个社交产品，最近工作略闲，加之小程序火爆，下班后时间多，于是就花费了一个月业余时间，动手做了一个基于地理位置的信息社交类小应用，由于个人资质无法上线此类的小程序，开发过程仅为锻炼思维和技术…"}, {"id": "6972056970664607751", "title": "axios+vue生命周期", "desc": "一.axios 1.什么是axios 2.如何使用 二.生命周期 1.问题: 2.何时使用生命周期: 3.什么是生命周期: 4. 生命周期4个阶段 5.生命周期钩子函数"}, {"id": "6976643929315737607", "title": "多页面应用、移动端混合开发H5通信解决方案实践", "desc": "背景介绍： 移动端混合开发，APP中90%的内容均为内嵌H5，由于种种原因，我在客户端内无法使用单页面路由跳转，只能新开窗口跳转页面，于是被迫"}, {"id": "6844904185922600968", "title": "vue组件化中slot的用法", "desc": "如果没有指定无名slot（默认slot），父组件内多余的内容将会被抛弃。 这是作用于插槽使用最多的案例，允许组件自定义应该如何渲染组件的每一项。 实际开发中作用域插槽的使用场景主要为：既可以复用子组件的slot，又可以使slot内容不一致。"}, {"id": "6966866832686841887", "title": "非域名根目录下如何部署Vue项目", "desc": "1. 修改vue.config.js配置文件 2. 修改路由配置 vue-router中有一个base属性 base属性默认值为 '/'，如果需要部署在域名下的 /vue-app下，则base就设为v"}, {"id": "6862185275817197582", "title": "Vue 防抖与节流的使用", "desc": "场景   在一个电影项目中，我想在电影的列表中，保存下拉的当前位置，防止你切换页面后，再切换回当前的电影列表页，他就又回到电影的第一条数据。这时候，我不想每次只要滑动一点，就保存当前位置，我想隔一段时"}, {"id": "6974226393232048142", "title": "vue组件编写文档如何一份代码既显示UI样式，又显示文件源代码？", "desc": "这是我参与更文挑战的第13天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 前言 在编写组件文档的时候，需要在一个页面"}, {"id": "6992487716663328799", "title": "Vue重学 Day02", "desc": "** 初序 ** 纸上得来终觉浅，绝知此事要躬行 在上一章关于《Vue重学Day01》中已经讲了Vue的基本指令，接着补充几点 v-bind:class 绑定类样式 class和style是HTML元"}, {"id": "6844904054192078855", "title": "React中引入Vue3的@vue/reactivity 实现响应式状态管理", "desc": "React的状态管理是一个缤纷繁杂的大世界，光我知道的就不下数十种，其中有最出名immutable阵营的redux，有mutable阵营的mobx，react-easy-state，在hooks诞生后还有极简主义的unstated-next，有蚂蚁金服的大佬出品的hox、hoo…"}, {"id": "6850037271417061383", "title": "使用内联的 CSS 变量技巧，提高灵巧布局效率！", "desc": "有些情况下，我需要用一种简单的方法来创建网格布局。 例如，每次我改变主意时，在不修改CSS的情况下快速画出五列网格。 在本文中，我们一起探索一些用例，并思考如果实现及使用它们。 在深入探讨这些概念之前，首先我们来回顾一下 CSS 变量的基础知识， 我们也可以将它称为“自定义属性…"}, {"id": "6844903619385360397", "title": "编写可维护的JavaScript", "desc": "软件生命周期中80%的成本都消耗在了维护上；而且几乎所有的维护者都不是代码的直接开发人。如何让自己写的代码让别人阅读起来更高效？当然是写代码的时候注入一些规范。那么在Javascript中有哪些编程风格值得我们去注重呢？这篇文章将总结《编写可维护的JavaScript》里面的观…"}, {"id": "6844903729305485320", "title": "Toast 组件实现思路", "desc": "概述： 在前端项目中，有时会需要通知、提示一些信息给用户，尤其是在后台系统中，操作的正确与否，都需要给与用户一些信息。 1. 实例 在页面的右侧会出现一个Toast弹框，多次点击时，会依照顺序进行显示，并且Toast可自动关闭，具体效果如图。 2. 原理 在组件外构建一层代理并…"}, {"id": "6844903535885172743", "title": "vue 项目如何引入微信sdk，使用微信分享接口", "desc": "做微信的网页基本上都要接入微信的sdk，我在做的时候，也颇费了一番功夫，然后就想记录一下，供自己日后翻阅，以及让有需要的朋友可以做一下参考，如果喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 开始之前大家可以先读一读微信公众号的 接入文档，vue是单页面项目，比如你想要接入…"}, {"id": "6990561716434108423", "title": "vue批量下载多个文件，合成一个压缩包", "desc": "1. 安装依赖 安装 3 个依赖: axios, jszip, file-saver 2.具体代码 如果文件过多或者过大，等待时间会很长，建议加个loding提示"}, {"id": "6956927603802374158", "title": "前端入门学习-Vue内置组件", "desc": "动态组件 动态组件适用于多个组件频繁切换的处理。 <component> 用于将一个‘元组件’渲染为动态组件，以 is 属性值决定渲染哪个组件。 用于实现多个组件的快速切换，例如选项卡效果。 is 属"}, {"id": "6906864262812024845", "title": "10分钟学会嵌套路由的使用（router-view）", "desc": "一篇搞定VUE嵌套路由使用（router-view）router-view介绍router-view是vue-router里的一小块知识点，但是很重要，很多tab栏切换都会用到，字面意思是路由视图，其"}, {"id": "6956785355366334477", "title": "初识Vue", "desc": "Vue初识 传统的网页开发需要解决的问题 DOM操作繁琐 DOM操作与逻辑代码混合 功能区域可维护性低 模块依赖关系复杂 Vue的核心特性 数据驱动视图 数据变化会自动更新到对应的元素中，无需手动操作"}, {"id": "6844903901829971982", "title": "本地离线预览 React/Vue 等开源工具官方文档网站", "desc": "外网访问组件库官方文档网站、React 官方等文档网站太慢，解决办法，是将他们克隆到本地预览，即可离线预览，速度也快。 将文档克隆到本地，通过 sgo 工具预览本地各种文档的。"}, {"id": "6869757494873292813", "title": "vue中的nextTick实现原理", "desc": "根据数据的响应式原理，在数据变化之后会触发dom的更新。但是如果一个数据更新就引起dom的重新渲染，这样显然会导致大大降低性能。因此vue采用异步更新，更新数据后不能立刻拿到最新的节点，但是可以通过nextTick等待页面更新好之后再获取最终的dom。 在vue中，数据的更新通…"}, {"id": "6991653511071006728", "title": "vue3初探", "desc": "vue3基本语法初探，组合式API，响应式语法，生命周期钩子变更，Teleport，片段，非兼容的变更"}, {"id": "6917159666306154509", "title": "vue关于element和nuxt的使用技巧", "desc": "当使用v-if或v-show来控制el-form-item的显示与隐藏时，会出现校验失效的bug。"}, {"id": "6919018419488555022", "title": "手摸手带你拥有自己的cli脚手架（一）", "desc": "对每个前端的程序而言，都应该有个称心如意的框架，当然，大家会说，我们都用vue，react，angular，uniapp，小程序，本身就是一个框架，都用上了各自官方的脚手架，还要啥自行车😄，No No No！这里所指的cli脚手架，不仅仅是官方的版本，而是可以指定git上自己…"}, {"id": "6844903941713428494", "title": "从一次性能优化看Vue的一个“feature”", "desc": "首先，我们都知道 Vue 或者 React 得以高效更新的一个核心是使用了 virtual dom（下面称 vdom），当有数据变动的时候，通过对组件新旧 vdom 的 diff 操作，计算出需要实际修改的 DOM 节点然后进行增删改操作。从这可以知道，diff 的准确性和性能…"}, {"id": "6912441027018113031", "title": "从Vue.js源码中我学到了尤大大几点精妙方法", "desc": "话不多说，赶快试试尤大大教给我们的这几个精妙方法吧！在工作中肯定会用得到。 页面加载完成后只执行一次的设置函数。 通常，全局变量被作为一个参数传递给立即执行参数，这样它在函数内部不使用window也可以被访问到。 三目运算符嵌套的写法，使得代码可读性差，简单业务场景下可以试着使…"}, {"id": "6844903668035108878", "title": "熟悉 Vue ？你能解释这个死循环吗？", "desc": "最新填坑：Vue 源码(一)：响应式原理 ======= 最新：官方已修复 ================= 很久没关注，发现这个问题几个月后，有人提了相关issue，bug已修复 见：https:"}, {"id": "6978041856374341639", "title": " Vuejs 动态路由文档详解踩坑经验总结", "desc": "文档详解 下面我们从 Vue Router 官方文档的内容开始讲解 响应路由参数的变化 在实际开发中经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 "}, {"id": "6994078643643236388", "title": "【Vue2.x 源码学习】第三十五篇 - 组件部分 - Vue.component 实现", "desc": "第三十五篇 - 组件部分 - Vue.componen： Vue.component 全局 API 的初始化处理；Vue.component 的定义和参数说明；组件构造函数全局存储的方式和作用；"}, {"id": "6844904152087134215", "title": "2020 有哪些不容错过的前端技术趋势？", "desc": "四位技术人不四、杜欢、海波和堂主对 2020 年前端发展趋势进行了展望，同时也阐述 2020 年前端从业者可能将要面临的挑战。 **不四：**随着大前端领域开始进入深水区，越来越多的资源开始往两端倾斜，Low Code 领域解决大量营销活动和中后台的业务场景， Pro Code…"}, {"id": "6994073187701293064", "title": "《图解Vue3.0》- 第15节 组件通信", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 父传子（父->子） props 在组件数据管理中，我们知道，可以利用porps将父组件数据传递给子组件。 示例 Generator1.vue"}, {"id": "6994073006930657310", "title": "《图解Vue3.0》- 第14节 动态组件和异步组件", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 动态组件 在内置指令中，有一个指令is，使用它可以实现动态组件。 使用动态组件方式： <component :is=\"currentView"}, {"id": "6844903861732261895", "title": "细谈 vue - 抽象组件实战篇", "desc": "本篇文章是细谈 vue 系列的第五篇，这篇的内容和以前不太一样，这次属于实战篇。对该系列以前的文章感兴趣的可以点击以下链接进行传送 前两篇我们分别分析了 &#x3C;transition> 和 &#x3C;transition-group> 组件的设计思路。 今天我会对之前研究…"}, {"id": "6844904196739694605", "title": "NutUI 组件 popup 源码分析", "desc": "NutUI 是一套京东风格的移动端 Vue 组件库，生态系统覆盖面广，支持按需加载、主题定制、多语言等，功能强大。目前 40+ 京东项目正在使用，设计精美，风格统一。在开发组件库的过程中，NutUI 是如何处理组件间的层级关系的呢？今天就给大家解析 NutUI 中具有处理层级关…"}, {"id": "6844903999468994567", "title": "Vue 中的 Render 全面详解 (渲染函数 & JSX)", "desc": "Render 函数是 Vue2.x 新增的一个函数、主要用来提升节点的性能，它是基于 JavaScript 计算。使用 Render 函数将 Template 里面的节点解析成虚拟的 Dom 。 简单的说，在 Vue 中我们使用模板 HTML 语法组建页面的，使用 Render…"}, {"id": "6989549949029449764", "title": "Vue环境搭建（Vue-cli脚手架）", "desc": "一、Vue环境搭建（Vue-cli脚手架） 1、你要安装nodejs； 安装nodejs可以看： 2、安装Vue-cli脚手架 Vue-cli是官方的快速构建这个单页应用的脚手架。 3、创建项目 可视"}, {"id": "7000756172844171278", "title": "在vue3中使用iconfont图标和自定义的svg图标", "desc": "创建一个Icon组件，供自定义的svg图标使用和iconfont图标使用 如何inconfont图标 访问iconfont官网，保存图标到自己创建的项目中，然后点击symbol的形式引入。 将js文件"}, {"id": "6990170277162254372", "title": "vue-cli 3 dart-sass替换node-sass", "desc": "为何要替换 1:node-sass仓库在墙外, 且新特性都会先在dart-sass实现2:它不仅兼容了 css 的`>>>`写法，还兼容了 sass `/deep/`的写法"}, {"id": "6844903629535576078", "title": "排名前10的vue前端UI框架框架值得你掌握", "desc": "iview一套基于 Vue.js 的高质量 UI 组件库,友好的 API ，自由灵活地使用空间，细致、漂亮的 UI。由TalkingData开发维护，有很多知名互联网企业都在使用 该仓库包含一系列基于 Bootstrap 标记和 CSS 的本地 Vue.js 组件。所以不需要 …"}, {"id": "6981380471695343653", "title": "总结一下Vue3常用API，实现Vue2到3的平滑过渡", "desc": "尤大又一力作Vite不知不觉间升级到2.0，作为风头正盛号称下一代前端构建工具，有什么理由不去体验一下。"}, {"id": "6906304632406933512", "title": "跟我一起读源码丨Vue源码之依赖收集", "desc": "1. 观察者模式 2. defineProperty 对一级/多级对象进行拦截 对于一级对象的拦截相信小伙伴们都会啦。 解释：observer 这个方法表示如果当前是一个对象，就会继续被遍历封装拦截。 延伸到实际业务场景：「获取用户信息然后进行展示」。我在 data 设置了一个…"}, {"id": "6844903725320896520", "title": "月下载量千万的 npm 包被黑客篡改，Vue 开发者可能正在遭受攻击", "desc": "event-stream 被注入恶意代码，黑客扫描整个 node_modules 窃取用户的数字货币。"}, {"id": "6992419154535907365", "title": "Vue集合面试题（进阶）", "desc": "Vue 1.vue.js的两个核心是什么？ 数据驱动和组件化。 2.vue 的双向绑定的原理是什么？ vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。具体实现过程：我们已经知道实"}, {"id": "6844903976937209863", "title": " 现代浏览器观察者 Observer API  指南", "desc": "前段时间在研究前端异常监控/埋点平台的实现。 在思考方案时，想到了浏览器自带的观察者以及页面生命周期API 。 Intersection Observer，交叉观察者。 Mutation Observer，变动观察者。 Resize Observer，视图观察者。 | 用途 |…"}, {"id": "6909698939696447496", "title": "源码系列：Vue3深入浅出（一）", "desc": "Vue.js 3.0 (以下简称Vue3)，正式发布在 2020 年 09 月 18 日，Vue3 Beta版本更是早在今年四月份就发布。相信有些同学早已上手体验一番。或者早已看过官方文档，英文不好的同学阔以点击这里,这是个中文文档。😂😂😂😂😂😂 想来大家肯定会对 …"}, {"id": "6986463124358430756", "title": "react+vue2+vue3 diff算法分析及比较", "desc": "此文内容包括以下： 深度介绍react、vue2、vue3的diff算法原理，并分别对比它们的区别。几个算法，套路都是找到移动的节点，然后给它移动到正确的位置。该加的新节点添加好，该删的旧节删了。"}, {"id": "7002236902279495693", "title": "Vue项目实战(3)", "desc": "这是我参与 8 月更文挑战的第 6 天，活动详情查看： 8月更文挑战 请求发送 引入前面封装好的请求模块request 提交时发送请求 通过async与await处理异步操作 控制台查看后端返回的错误"}, {"id": "6893289942596714503", "title": "Vue3造“hooks”轮子前先看看这个", "desc": "Composition API 的设计理念就是把接口的可重复部分及其功能提取到可复用的代码段中，增加代码的可复用性、逻辑性，有点借鉴 react hooks 的意思。哪些逻辑需要封装起来进行复用就是造轮子的关键，所以还得从存量问题中寻找公共逻辑复用的方案。 这是一个经典的vue…"}, {"id": "6913538991241461768", "title": "🔥使用vue3.0.0全家桶重构vue2.6.1的一个商城demo！", "desc": "⚠️master分支是线上生产环境代码，因为部分后台接口已经挂了😫，可能无法看到实际效果。 在2.x中，Vue 实例可用于触发由事件触发 API 通过指令式方式添加的处理函数 ($on，$off 和 $once)。这可以创建 event hub，用来创建在整个应用程序中可用的…"}, {"id": "6911207790241382407", "title": "vue3+typeScript 手风琴(每周一个小组件)", "desc": "每周分享一个vue3+typeScript的小组件，我只想分享下自己的实现思路，楼主是个菜鸡前端，记录下实现过程，说不定对你有帮助。 思路：点击手风琴标题传入它的索引,定义一个参数来接收点击的索引，这个参数等于索引就显示手风琴内容。自定义内容可以根据索引来动态显示。 vue3持…"}, {"id": "7004445790202495006", "title": "Vue 引入 iconfont 的项目实践", "desc": "图标库的发展过程，iconfont图标库的重要性（项目常用） 对于前端而言，图标的发展可谓日新月异。从img标签，到雪碧图，再到字体图标，svg，甚至svg也有了类似于雪碧图的方案svg-sprite"}, {"id": "6989932460184174606", "title": "vue相关面试点-2021", "desc": "style-scope作用及实现原理 1.什么是scoped 在Vue文件中的style标签上有一个特殊的属性，scoped。当一个style标签拥有scoped属性时候，它的css样式只能用于当前的"}, {"id": "7004682084631461925", "title": "Vue的响应式原理", "desc": "最近一直在看响应式，在掘金上类似的文章已经多的不能再多了，如果要问响应式我相信大家都能说上来几句，在前端社区中vue的响应式也是一个火热的话题。笔者此次炒冷饭的主要原因是之前看代码的时候，虽然能够大致"}, {"id": "6844904094692278286", "title": "总结vue知识体系之高级应用篇", "desc": "vue 作为目前前端三大框架之一，对于前端开发者可以说是必备技能。那么怎么系统地学习和掌握 vue 呢？为此，我做了简单的知识体系体系总结，不足之处请各位大佬多多包涵和指正，如果喜欢的可以点个小赞！本文主要讲述一些vue开发中的几个高级应用，希望能对大家有所帮助。 我们使用的第…"}, {"id": "6966813426291048455", "title": "在Vue2项目中使用@vue/composition-api", "desc": "Vue2中使用组合式API。生态问题，许多开源的库目前正在逐步升级到vue3，如果非常庞大那么做起vue2 -> vue3的迁移还是非常麻烦的。"}, {"id": "6994709041633034247", "title": "Vue3-组合式Api以及响应式原理解读（一）_setup理解", "desc": "全方位解析setup setup描述 setup参数解析 setup返回值解析 setup生命周期钩子解析 v"}, {"id": "6998084315636563976", "title": "vue大屏中使用echarts实现区域地图", "desc": "vue大屏上使用echarts -geo组件使用json格式文件生成地图散点图,有解决其它组件与geo地图同时缩放功能"}, {"id": "6844903593024159752", "title": "关于passive event listener的一次踩坑", "desc": "没错，的确很标题党，但是我最近发现我的一个朋友（谁说是我的！）真的不太会用addEventListener。 我最近参与了一个开源项目，vue-carousel，Vue生态圈里的一个轮播组件，由加拿大的一个电商公司SSENSE开源的。然后刚好有人提了一个issue 这句警告翻译…"}, {"id": "6972769060324900871", "title": "vue3.0响应式函数原理", "desc": "Vue3重写了响应式系统，和Vue2相比底层采用Proxy对象实现，在初始化的时候不需要遍历所有的属性再把属性通过defineProperty转换成get和set。另外如果有多层属性嵌套的话只有访问某"}, {"id": "6982940267456397320", "title": "理解事件处理及相关修饰符 | 重学Vue3", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第10篇，关于vue的事件处理 ，一起来看看吧~~~~"}, {"id": "6844903512225087496", "title": "优雅的使用 element-ui 中的 table 组件", "desc": "又重复写模版了... table 作为数据展示组件，在日常开发中经常被用到，通过这篇文章，可以看到结合 vue 的 slot/component 特性，做一层封装，可以大大简化 table 的使用，大部分时候只需写一个配置属性就可以了。"}, {"id": "6920422878500519950", "title": "Vue 魔法师 —— 将 API “类化”", "desc": "【类】和【接口】是 JavaScript 未来的方向，我们的 API 调用也将如此，朝着这个方向和业务模块同步分类、同步升级。本文讲的正是 —— Vue 魔法师，如何将 API “类化”？ 万物皆模块，万物可归类。闲言少叙，直接正题。 然后，我们再创建一个子类：包含 fetch…"}, {"id": "6990974525273800712", "title": "带你快速手写一个简易版vue了解vue响应式", "desc": "在使用vue的时候,数据双向绑定,插值语法...等等,一系列让人眼花缭乱的操作.作为一个使用者搞懂轮子是怎么造,并不是为了自己造一个轮子,而是为了更好的使用轮子."}, {"id": "7002128252173025311", "title": "回首Vue3之路由篇（三）", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 这篇文章我们来讲一下routes的类型：RouteRecordRaw及其里面的属性配置，我们需要知道怎么去使用它们。 RouteRecor"}, {"id": "6883072260123394061", "title": "Vue3源码解读(二)-mount", "desc": "前面讲到了Vue3中mount里面做的事情，其中第一步的mount前面已经讲解了，本篇文章将会从第二步的runtime-core文件夹下面的apiCreateApp文件mount函数开始讲起，依次讲解剩下的几步。按照主流程进行核心代码的解读，跳跃可能会比较大，不过在讲解过程中都…"}, {"id": "6995415212513820703", "title": "Vue 源码（五）patch 过程（一）", "desc": "初次渲染时，Vue是如何将VNode渲染到页面上的。组件的渲染过程是什么样的以及mounted生命周期的执行顺序"}, {"id": "6994235816272723999", "title": "Vue中 使用定时器 （setInterval、setTimeout）", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 js中定时器有两种，一个是循环执行 setInterval，另一个是定时执行 setTimeout。 注意：定时器需要在页面销毁的时候清除掉"}, {"id": "6844904008583217165", "title": "为 Vue3 学点 TypeScript , 体验 TypeScript", "desc": "vue3是用typescript开发的, 我揣测在vue的带领下typescript会成为主流呢, 要不先学点. 很多小错误比如: 对象的字段不存在或者字段名字拼写错误, 编辑器会在写代码的时候就提示你, 降低出低级错误的几率. 标注了类型的变量, 使用的时候编辑器都会列出变量…"}, {"id": "6966807646175232030", "title": "学习vue源码过程中的技巧收集", "desc": "前言 最近在学习vue源码，看到了一个特别亮眼的操作，函数柯里化 之前也了解过，但看完就往，没深刻理解它的意义 大概就是看过就忘，用了也不知道为啥这么用"}, {"id": "6875556933365940238", "title": "源码分析 | 透过表象看本质， Vue3来了、看看里面到底有什么", "desc": "哈喽，大家好！我是前端Up主。一个有代码洁癖的前端攻城狮( 哈哈，生活很邋遢(*￣︶￣) ) 作为一名优秀的前端攻城狮(自吹一波)，我想说Vue是我们中国程序员的骄傲,是尤雨溪大神呕心沥血的杰作，Vue.js正式发布于2014年2月，对于目前的Vue.js的在开发人数上，总共有…"}, {"id": "6994019020143853604", "title": "Vue+ElementUI 搭建后台管理系统（实战系列六）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6997040024952782879", "title": "patch，从VNode到DOM", "desc": "Vue 系列第五篇，分析从 VNode 到页面真实 DOM 的过程，还有一些小的编码技巧哦！一起耕耘，一起收获"}, {"id": "6844904113914773518", "title": "Vue中父子组件生命周期执行顺序回顾", "desc": "在created中发起请求获取数据，依次在子组件的created或者mounted中会接收到这个数据。 beforeUpdate和updated触发时，el中的数据都已经渲染完成，但只有updated钩子被调用时候，组件dom才被更新。 在mounted钩子对挂载的dom进行操…"}, {"id": "6965660033728135176", "title": "【源码】Vue-i18n你知道国际化是怎么实现的么？", "desc": "Vue I18n 是 Vue.js 的国际化插件，它可以轻松地将一些本地化功能集成到你的 Vue.js 应用程序中"}, {"id": "6899642866693423111", "title": "最好的uniapp入门实战教程", "desc": "uniapp是Dcloud公司的产品，是一个跨端开发框架，基于vue.js技术栈。开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。这是它的功能架构图，可以看下，了解下它的架构。…"}, {"id": "6844904110848917511", "title": "Vue项目经验总结（持续更新中...）", "desc": "本文讲述了毕业实习和正式工作1年以来，使用Vue开发项目的一些个人经历和想法，仅是个人总结，如有不合理的地方，欢迎吐槽。以下是本文的大概内容。 一开始实习接触Vue的脚手架是VueCli2版本，学习的webpack配置也都Cli2的，后来公司使用的是Cli3，所以有一个学习和适…"}, {"id": "6996264079648096264", "title": "手摸手之日历组件", "desc": "开始 本文纯靠自己思路来写，如有雷同，也不是抄袭。 阅读本文前，需要了解一点ts，vue3，jsx语法。😯 还有moment相关语法。 预想效果 or 实际效果 简直是一模一样😄 预想效果 eleme"}, {"id": "6994332073209102350", "title": "keep-alive 的简单应用", "desc": "用户浏览某个数据列表，当数据列表数量很大或者有许多筛选/搜索条件时，点击查看详情然后返回，需要回到离开这个列表时的状态；"}, {"id": "6991347502288994311", "title": "前端Vue套入高德地图、并触发实现多个标点", "desc": "1、 在public下的index.html中引入地图 2、引入组件设置宽高100% 3、数组形式数据固定（一） 4、用ajax请求后端真是接口（二） 5、其他需求请看文档请看官方文档 https:/"}, {"id": "6932802993175674887", "title": "Vue SPA 首屏优化实战", "desc": "常规 vue 项目打包后访问，返回一个只包含 div 的 html，其他内容块都是通过 js 动态生成的。 1. 路由文件中按需引入组件 2. 静态库按需引入模块，而不是全部 1. css、js 放置顺序 2. 使用字体图标，icon 资源使用雪碧图 拆分入口 chunk 文件…"}, {"id": "6844904008771977230", "title": "「前端进阶」vue+koa2+mongodb+oss阿里云部署自己的网站", "desc": "由于使用Element框架实现前端，并没有做移动端适配，所以建议PC端观看。 最近想学习下koa框架，于是便从网上找了一些资料，在大致了解了koa框架的基本用法后，想要自己做点什么东西出来。 在掘金平台找到一篇文章，是一个前端用vue，后端用koa，数据库用mongodb实现的…"}, {"id": "7000768402205704206", "title": "[vue2]熬夜编写教你们去深入理解双向绑定，指令并手写一个", "desc": "添加observer劫持所有属性和compile解析指令 1. observe()我们做了遍历对象的处理，这里传入data去处理下data"}, {"id": "7002596773466210312", "title": "Vue3学习 --- vuex基本使用(下)", "desc": "在开发中，我们会的应用程序需要处理各种各样的数据，这些数据需要保存在我们应用程序中的某一个位置，对于这些数据的管理我们就称之为是状态管理。vue官方为我们提供了vue中进行状态管理的插件vuex。"}, {"id": "6926091251666288648", "title": "可视化拖拽页面编辑器 二", "desc": "注册的组件对象放在componentList（用于渲染组件菜单）和componentMap(方便查找)里。 在 mousemove 中通过计算鼠标 按下时位置 与 当前位置 的差值，计算出最新的选中的组件坐标。"}, {"id": "6998844775969505310", "title": "【VUE】动态组件，keep-alive简介以及v-once", "desc": "通过使用保留的 <component> 元素，动态地绑定到它的 is 特性，可以实现动态组件；keep-alive组件切换过程中将状态保留在内存中，防止重复渲染DOM，减少加载时间及性能消耗。"}, {"id": "7001004981882519582", "title": "vue 将指定div区域，转为pdf下载", "desc": "下载依赖 npm install html2canvas jspdf --save 使用的页面引入 方法区定义方法，转化下载 使用（最好添加一定的padding值，防止生成的pdf文件效果不好）"}, {"id": "7000168833667317791", "title": "【VUE】JS动画以及Velocity.js动画库", "desc": "vue动画：除了用CSS来实现vue的组件过渡与动画，还可以用JavaScript的钩子函数来实现，还可以用Velocity.js动画库。"}, {"id": "7002574532615602190", "title": "vue scope的用法和添加全局样式", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：“8月更文挑战“ 用法   scope是实现组件的私有化，不对全局造成样式污染，表示当前style属性只属于当前模块。 scope的渲染规则 给HTML"}, {"id": "6844903780736040973", "title": "详解 Vue 生命周期实现", "desc": "在我们平时使用各种框架的时候，都避免不了使用到一种特性，就是 生命周期 钩子，这些钩子，可以给我们提供很多便利，让我们在数据更新的每一个阶段，都可以捕捉到它的变化。 这张图其实已经大概的告诉了我们，每个阶段做了什么，但是我觉得还有必要详细的去分析一下，这样在未来如果我们要实现类…"}, {"id": "7005832390102745119", "title": "Vue的组件为什么要export default", "desc": "Vue 的模块机制 此外，你还可以在 bulid/webpack.base.conf.js 文件中修改相关配置： 意思是，你的模块可以省略 \".js\"，\".vue\"，“.json” 后缀，webpac"}, {"id": "6991834017825832974", "title": "可以编辑的 DIV", "desc": "背景介绍 模拟实现 Textarea 的功能，当用户输入 @ 的时候弹出选择框选择人员，同时，将 @人员 变成蓝色插入到编辑框中。这样的需求想到的解决方案就是利用 DIV 的 contentedita"}, {"id": "6978965732633608222", "title": "模板编译template的背后，究竟发生了什么事？带你了解template的纸短情长", "desc": "依稀记得我们在写 vue 时，最上方总是有一个 template 包围着。而很多时候，我们也没有很在意的去意识到 <template><"}, {"id": "6945437876737802277", "title": "JavaScript ES2021 最值得期待的 5 个新特性解析", "desc": "在写本文时，本文提到的新的 JavaScript 提案功能已进入第 4 阶段，并且几乎肯定会包含在 ES2021 中。你已经可以开始在 最新版本的浏览器，Node.js 和 Babel 中使用。 注意：ECMAScript 是 JavaScript 所基于的标准，由 TC39 …"}, {"id": "6985835063476748295", "title": "在Vue中使用Antv G6", "desc": "笔者最近在做一些可视化方面的任务，具体的需求就是要在页面上绘制出树状的关系图。在参考并且对比了社区的主流方案后，最后选择了Antv G6。在使用的过程也遇到了一些问题，就想写篇博客记录一下"}, {"id": "7005805654124281886", "title": "教你用vue的install方法来创建工具类函数及全局组件", "desc": "我们在利用vue的cli来做开发的时候，我们会引入一些框架以及各种插件，我们经常能看到类似于 这样的代码，老弟，牛X哈，这代码一看就高大上呀。 实际上，这个是通过vue官方暴露出来的开发插件的inst"}, {"id": "6976614592659079175", "title": "Electron+Vue3 MAC 版日历开发记录(22)——配置 Tray 显示功能", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903700243316749", "title": "Vue.js 父子组件通信的1212种方式", "desc": "自己先想一分钟。 无可否认，现在无论大厂还是小厂都已经用上了 Vue.js 框架，简单易上手不说，教程详尽，社区活跃，第三方套件还多。真的是前端开发人员必备技能。而且在面试当中也往往会问到关于 Vue 方面的各种问题，其中大部分面试官会问到如上这种问题。 最近一直在做 Vue项…"}, {"id": "6979414392773279752", "title": "在vue中如何使用mqtt服务端实现即时通讯", "desc": "在大部分项目中，前后端交互只是前端请求后端的接口，拿到数据后再处理，前段时间我手上的一个项目需要用到mqtt，使用后觉得真神奇，只需要订阅就能实时获取到数据，废话不多说，妹妹给你们上步骤！"}, {"id": "6967654599696056328", "title": "深入理解nextTick", "desc": "nextTick什么时候用 道理讲再多，不如带你真真切切的踩个坑。从事件循环EventLoop流程，到Vue.2.x源码深入了解nextTick。"}, {"id": "6881464786400477198", "title": "初探 Vue3 + TS", "desc": "用 vue-cli 创建的项目在 WebStorm 中 main.ts 可能会有如下情况。 但到了 Vue3 中不适用 Vue2 的方法定义全局实例，而且还报错。 加上之后需要重启，否则还是报这个错误。"}, {"id": "7000647493163679752", "title": "从Vue源码学习JavaScript 之 this instanceof Vue", "desc": "通过 this instanceof Vue 来判断有没有用 new 关键词调用。 那么，为什么可以这么判断呢？我们分别了解一下 `this` 和 `instanceof` 的用法。"}, {"id": "6987660158508171300", "title": "Vue 创建 Chrome 掘金作者榜扩展", "desc": "浏览器扩展是可以修改和增强 WEB 浏览器功能的小程序，可以用于各种各样的任务，例如屏蔽广告、管理密码、组织标签、改变网页的外观和行为等等。"}, {"id": "6844903788919128072", "title": "如何优雅的在 vue 中添加权限控制", "desc": "在一个项目中，一些功能会涉及到重要的数据管理，为了确保数据的安全，我们会在项目中加入权限来限制每个用户的操作。作为前端，我们要做的是配合后端给到的权限数据，做页面上的各种各样的限制。 因为这是一个工作上的业务需求，所以对于我来说主要有两个地方需要进行权限控制。 第一个是侧边菜单…"}, {"id": "6986460075116199973", "title": "在vue3中使用富文本编辑器", "desc": "富文本编辑器（Rich Text Editor，RTE）是一种可内嵌于浏览器，所见即所得的文本编辑器。它提供类似于Office Word 的编辑功能，方便那些不太懂HTML用户使用。"}, {"id": "6990607743648268325", "title": "vue项目打包发布时去除所有console", "desc": "写项目的时候个人习惯会写很多的console，测试环境还好，生产环境被人看到就不好了，一个个去除也太麻烦 这个插件可以解决发布时候的问题 babel-plugin-transform-remove-c"}, {"id": "6880529850159874062", "title": "vue-router源码解析 | 1.4w字 | 多图预警 - 【上】🏆 掘金技术征文|双节特别篇", "desc": "关于路由的定义，维基是这样定义的；路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动。路由发生在OSI网络参考模型中的第三层即网络层。路由引导分组转送，经过一些中间的节点后，到它们最后的目的地。作成硬件的话，则称为路由器。路由通常根据路由表——一个存储到…"}, {"id": "6966904699173732382", "title": "撸了一个基于vue3,vite2,element plus的admin模板", "desc": "vue3,vite2我就不吹了,用过的都说好. 这个模板我叫它fuep admin,如果对你有帮助的话,记得给个star哦."}, {"id": "6997605125950799879", "title": "【VUE】组件参数校验与非props特性", "desc": "组件参数校验 父组件向子组件传递一些内容，子组件有权对接收的内容进行一些约束；非props特性与props特性。"}, {"id": "6995540805175738404", "title": "Element 2 组件源码剖析之Card卡片", "desc": "组件 `Card` 作为容器多用于信息聚合展示。 本文将深入分析源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "6981633206848061477", "title": "用vue3开发一个打砖块小游戏", "desc": "用vue3写了几个实例，感觉Vue3的composition Api设计得还是很不错，改变了一下习惯，但写多两个就好了。 这次写一个也是儿时很觉得很好玩的游戏-打砖块， 无聊的时候玩一下也觉得挺"}, {"id": "6991363168832339975", "title": "在自己的后台集成微信公众号菜单设置｜ 8月更文挑战", "desc": "背景 最近项目当中遇到了一个需求，就是需要在自己的后台系统中集成公众号菜单操作，当时给我整懵了，难道登录微信公众号设置不好嘛？人家一句，我用你后台，完了设置个公众号菜单你还让我又跑去登录公众号后台设置"}, {"id": "6977237451660066853", "title": "什么场景下使用Render函数，如何配置JSX", "desc": "今天来聊聊什么情况下使用Render函数，如何配置JSX及为什么使用JSX，来吧一文搞懂。go go go"}, {"id": "6991492292452286477", "title": "【Vitejs源码学习】Debug ViteJS,走进学习源码的第一步", "desc": "Vite是一个由原生ESM驱动的Web开发构建工具。开发环境下使用原生ESM imports，文章以图文结合的方式，一步一步进行viteJs源码调试，走进学习源码的第一步,"}, {"id": "6984241097878798373", "title": "uniapp(Vue) 实现可粘贴的 个性化验证码 输入框", "desc": "在uniapp的框架下做一个 个性化验证码 输入框，完成了可依次输入和可粘贴的功能。主要思路在文中有说明，也遗留了一些问题暂未解决。"}, {"id": "6844903585751236621", "title": "axios请求超时,设置重新请求的完美解决方法", "desc": "自从使用Vue2之后，就使用官方推荐的axios的插件来调用API，在使用过程中，如果服务器或者网络不稳定掉包了, 你们该如何处理呢? 下面我给你们分享一下我的经历。 最近公司在做一个项目, 服务端数据接口用的是Php输出的API, 有时候在调用的过程中会失败, 在谷歌浏览器里…"}, {"id": "6968272707410460680", "title": "vue3 可拖动的左右分割面板组件", "desc": "vue3如何实现一个可拖动面板？ 在vue3中的生命周期有点奇怪，求大佬在线教学一下。 本组件收录于小裁缝项目中。 什么？为什么叫小裁缝，就是这里剪一点，那里剪一点，裁缝师啊"}, {"id": "6991475510563831845", "title": "Vue源码解析：编译之generate方法", "desc": "Vue编译过程中generate的阶段，实际上就是将抽象语法树根据不同的情景使用不同的render工具方法拼接成可以生成Vnode的render函数。"}, {"id": "6994326833420304391", "title": "vue踩坑记录-echarts的使用", "desc": "1. 图表重叠混乱 ，2.找不到dom元素，3.无数据的时候图表显示暂无数据，4.dom自适应高度."}, {"id": "6844903983069282312", "title": "一起写一个即插即用的Vue Loading插件", "desc": "无论最终要实现怎样的网站，Loading状态都是必不可少的一环，给用户一个过渡喘息的机会也给服务器一个递达响应的时间。 。要想注册成全局状态，还需要给axios类的网络请求包添加拦截器，然后设置一个全局Loading状态，每次有网络请求或者根据已经设置好的URL将Loading…"}, {"id": "6844903833806585870", "title": "Vue.js - 构建你的第一个包并在NPM上发布", "desc": "本文我们将学习如何制作一个vue插件，并将其分发到npm上，能够让其他人安装使用. 插件大大地提高了开发者的开发效率。我们的大多数项目都依赖于它们，因为它们能够以极快的速度发布新功能。 正如官方Vue.js文档中所述，插件的范围没有限制。通常我们想实现的功能有下面5种: 通过n…"}, {"id": "6844903973795659789", "title": "关于Vue Loading chunk {n} failed的一些思考", "desc": "测试偶尔会出现这个问题，遂提出一个bug，从bug字面意思来看，有一个js的块加载失败了。丢失了一个${domain}/js/chunk-${hash}.js。 前提：部署方式为删除上一次构建的资源文件，替换成新的打包文件。 上面也提到了刷新页面，但是仅仅捕获到错误就刷新，很可…"}, {"id": "6994298142631919629", "title": "从Vue源代码中来聊聊[Symbol.toPrimitive]方法", "desc": "阅读Vue3源码中引发的思考。如果我们在模板中直接访问一个整体数组，内部究竟是会如何处理的？最终还是通过[Symbol.toPrimitive]方法进行的hack方式。"}, {"id": "6844904102585974792", "title": "了解发布订阅模式之后，vue响应式原理竟如此简单！", "desc": "最近在复习一些常见的设计模式，联想到vue的响应式原理（2.x），决定整理一篇浅显易懂的文章阐述其核心思想。 ok，让我们开始。 发布订阅模式基于一个主题事件通道，接收通知的对象可以通过自定义的事件订阅主题，对象会在主题事件发布时收到通知。 说到发布订阅模式，不得不提观察者模式…"}, {"id": "6952416640642318343", "title": "Vue VNode更新方式引发的BUG", "desc": "VNode更新中可能存在的问题，看看你是不是也(可能）遇到过？？避免在以后的业务代码中引入此类bug，避免挖坑"}, {"id": "6957985093805686797", "title": "vue 实战中一个常见的报错及解决方案【一】", "desc": "vue小项目的报错问题以及我是怎么解决的： 出现该问题的原因：是在发送异步请求返回数据之前，虽然请求数据初始值都为空对象或者空数组，你使用三层表达式（二层是没有问题的，比如info.name）调用到的"}, {"id": "6984334355858489381", "title": "全面总结 Vue 3.0 的新特性", "desc": "web前端工程师（教育） web前端工程师（社交方向） web前端开发工程师（vue） web前端工程师（js） Vue3.0从20年九月发布第一个One Piece版本，到现在一直在更新优化；中文版"}, {"id": "6844904015516401678", "title": "用自己的话总结vue双向绑定数据原理", "desc": "vue是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发响应的监听回调。 MVVM作为数据绑定的入口，合 observer、 Compile和 Watche…"}, {"id": "6844903670849470472", "title": "5分钟即可掌握的前端高效利器：JavaScript 策略模式", "desc": "我们在写代码的时候，一定也遇到过许多类似的场景。随着经验的增加，我们对于这些常见场景的处理越来越得心应手，甚至总结出了针对性的“套路”，下次遇到此类问题直接运用“套路”解决，省心又省力。这些在软件开发过程中逐渐积累下来的“套路”就是设计模式。 设计模式的目标之一就是提高代码的可…"}, {"id": "6882650885399248904", "title": "【study】Vue如何实现一个倒计时器", "desc": "1.分析过程 问题：做一个定时器，设定3分钟开始，倒计时到0时，发出警告alert 分析： 2.利用computed+watch+data实现倒计时 3.利用computed+watch+data+f"}, {"id": "6878210541177798663", "title": "Vue3自定义指令初探以及插件的使用", "desc": "在我司的项目中，权限管理方面涉及到了Vue自定义指令功能，也使用了一些以自定义指令形式调用的插件。Vue3.0发布后，不再直接暴露一个Vue类而且directive()方法注册自定义指令的hooks也有所改变，意味着2.x版本的Vue.use()方法不再可行，同时在注册组件时各…"}, {"id": "6958998044423487524", "title": "Vue3源码解读之reactivity", "desc": "Vue源码解读之reactivity 前言 文件总览 在正式进入源码之前，我们先总览一下src目录下有那些文件 根据这些文件，我们可以把响应式模块分为这几部分：effect、reactive、ref、"}, {"id": "6986292827994980366", "title": "vue3初尝试", "desc": "vue3更多的是使用解构赋值去实现原来的watch computed data(使用steup) 以及生命周期 下面我使用了平时用的可能比较多的属性 vue2更多的是在vue({el:\"\"})去挂载 "}, {"id": "6844903660707659783", "title": "可视化构建工具探索之Vue Cli3.0 & 阿里飞冰", "desc": "安装了最新的Vue CLI。打开Terminal，输入： 点击页面列表右侧对应的+号，即可选择对应框架下的物料源，将在该页面目录下生成一侧Component文件夹，存放下载的组件资源，配置路之后，即可生效。 package.json 文件 keywords 字段增加 ice-s…"}, {"id": "6844903742987304968", "title": "Vue 前端应用实现RBAC权限控制的一种方式", "desc": "2.在登录成功设置$vp.rabcUpdateAuthorizeInterfaces已授权接口列表的时候，大家需要将数据结构构造好。 ... 而前端我和团队，检索了很多地方都没有很成熟或者说可行的关于 RBAC基于角色的访问控制相关的前端权限控制方案，可能是我们检索的方法不对，…"}, {"id": "6986253285494063117", "title": "复用面板骨架组件", "desc": "面板骨架组件的作用：在页面加载数据之前显示骨架样式 以上代码显示效果如下图： 可以传递的值有：宽高背景颜色，可以根据需求再决定别的传递参数 使用时，引入这个组件，通过父传子传值即可"}, {"id": "6986231761319493662", "title": "VueX,VueX持久化", "desc": "VueX的作用: VueX是用来在Vue项目开发中使用的状态管理工具。试想一下，如果在一个项目开发中频繁的使用组件传参的方式来同步data中的值，一旦项目变得很庞大，管理和维护这些值将是相当棘手的工作"}, {"id": "6844903701551775758", "title": "Vue项目History模式404问题解决", "desc": "本人是Java后台开发，Vue其实使用也没有多久，只能说简单了解。发现问题的时候其实也一头雾水，第一思想就是百度看别人的思路。 首先看看项目打包后文件内容，看看有没有什么能突破的地方。文件目录如下： 1.在之前百度的时候看到了一个信息，就是引入js文件使用scr的时候，如果前面…"}, {"id": "6993690518983016485", "title": "vue3前端青铜到黄金王者 - 第四个入门v-if和v-show条件渲染", "desc": "今天学习v-if和v-show, 一起学了。根据条件展示html标签。v-if 指令用于根据标志变量（flag）来决定标签出现与否，相应为true就显示出现。v-show 指令用于根据标志变量（flag）来决定标签显示与否，标签一定会被渲染，但是通过display来控制标签显示。..."}, {"id": "6930044792713773064", "title": "vue 计算属性和监听器（computed and watch）", "desc": "模板内的表达式特别遍历，但是其设计初衷用于简单运算，在模板中放入太多的逻辑会让模板过于复杂以致难以维护计算属性vs监听器神奇的模板语法是如何实现的在底层的实现上，vue将模板编译成虚拟DOM渲染函数，"}, {"id": "6993679995654635556", "title": "《图解Vue3.0》- 第10节 组件注册与使用", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 组件是vue中最推崇的，也是最强大的功能之一，就是为了提高代码重用性，减少重复性的开发。那么vue组件拥有哪些功能如何使用呢？以下是常用的功"}, {"id": "6993679749113446414", "title": "《图解Vue3.0》- 第9节 过渡和动画", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 过渡 & 动画概述 Vue 提供了一些抽象概念，可以帮助处理过渡和动画，特别是在响应某些变化时。这些抽象的概念包括： 在 CSS 和 JS "}, {"id": "6914264226819211272", "title": "vue 组件间常用传值方法", "desc": "父子组件之间传值（props/$emit）：父组件： <childerComponent:fatherVal=\"fatherVal\"@backValFather=\"backValFather\"></c"}, {"id": "6954558130114494478", "title": "做个开源博客学习Vite2 + Vue3 （四）实现博客功能", "desc": "写代码实现博客的基础功能。发布博文、博文列表、发布讨论、讨论列表等等功能。还有在线演示哦。还有一个简单的路由。"}, {"id": "6844903495934427143", "title": "Nuxt SSR 阿里云部署之nginx代理--详解篇", "desc": "我的服务器版本是CentOS7～一. 安装配置nvm安装node：点击地址二. 安装mysql：点击地址   安装完毕设置密码 sourcemysql.sql 导入你的sql文件三. 配置nginx "}, {"id": "6844904136861810695", "title": "Vue首屏优化记录", "desc": "使用cdn的方式在index.html中引用，不过我试了，不知道是不是没有弄对，按照网上的操作了之后，打的包是小了，但是element-ui没有引入进去，好像是因为我只引入了element-ui的cdn，vue还是使用的打包的方式，我觉得Vue还是用打包的方式引入好一点，加上这…"}, {"id": "6844903589509349383", "title": "js 深浅拷贝知多少", "desc": "最近在 vue 框架下写业务代码，不可避免地涉及到对象深浅拷贝的问题，趁机会总结记录一下。 首先要讲一下大家耳熟能详的「堆栈」，要区分一下数据结构和内存中的「堆栈」定义。 数据结构中的堆和栈是两种不同的、数据项按序排列的数据结构。 而我们重点要讲的是内存中的堆区与栈区。 在 C…"}, {"id": "6945728675375480868", "title": "全面了解Vue3的 reactive 和相关函数", "desc": "Vue3的 reactive 怎么用，原理是什么，官网上和reactive相关的那些函数又都是做什么用处的？这里会一一解答。 Proxy 是 ES6 提供的一个可以拦截对象基础操作的代理。因为 reactive 采用 Proxy 代理的方式，实现引用类型的响应性，所以我们先看看…"}, {"id": "6844903585864482823", "title": "Vue项目如何分环境打包", "desc": "在项目目录下运行如下命令安装cross-env，我的ide是webstorm，要以直接在ide里的Terminal窗口中运行，也可能通过windows的CMD、Linux的Terminal定位到项目根目录运行下面的命令。 在config/目录下添加test.env.js、pre…"}, {"id": "6844904047368126472", "title": "带你了解 vue-next（Vue 3.0）之 炉火纯青", "desc": "看完上两章 初入茅庐 小试牛刀 之后，大家应该对vue-next（Vue 3.0） 的 API 使用已经了如指掌了。好奇的同学一定对 vue-next 响应式的原理充满好奇，本章就带你解密！ 最新vue-next 的源码发布了，虽然是 pre-alpha 版本，但这时候其实是阅…"}, {"id": "6867904943434432520", "title": "记一次vue-slidepage全屏滚动插件的使用", "desc": "前言数据可视化项目有两个主要页面，需要快速便捷的上下切换两个页面安装引入使用templatecomponentsmethodsOptions|name|type|default|description"}, {"id": "6907881461001486343", "title": "从源码的角度分析Vue面试题[二]", "desc": "答案：通过$parent 就可以访问到父组件的实例了，除了$parent，我们还可以通过$children 访问子组件的实例。相信这个答案各位小伙伴都知道，但是这个$parent 和$children 是通过什么方式实现的呢，或者说，Vue 内部是如何建立这种父子组件关系的？ …"}, {"id": "6844903663584935944", "title": "关于VUE项目地图开发中大量点标记绘制一些总结", "desc": "在地图开发中，当地图中绘制大量的标记点后，无论是拖动或者缩放，都会感觉到明显的卡顿现象。（一般超过800个点后就比较明显了）.在平时的工作业务中，由于公司的实时监控页面需要展现5000-20000车辆的实时定位跟踪，特别是切换到车辆密集的港口码头卡顿现象非常严重(如下图)，看起…"}, {"id": "6979204930330591262", "title": "如何开始阅读VUE源码", "desc": "前言 关于vue响应式的文章其实已经挺多了，不过大多都在浅尝辄止，基本就是简单介绍一下Object.defineProperty，覆盖一下setter做个小demo就算解决，好一点的会帮你引入obse"}, {"id": "6844903504834740232", "title": "深入理解 Vue 单向数据流", "desc": "深入理解 Vue 单向数据流"}, {"id": "6844903583159156743", "title": "vue-music 音乐网站", "desc": "在学习完vueJS,一直想做个项目来锻炼一下,选来选去，还是做个网易云音乐，其间遇到了很多坑,也逐渐接受了vue这种组件化的思想以及从Dom操作转换为用数据去驱动视图。并且在某部分基础组件上借鉴(搬运)了elementUI的源码(不过elementUI写的是真好)"}, {"id": "6988656381960126478", "title": "简易的文字跑马灯 Vue", "desc": "实现原理: 定时器 + translateX 效果 使用方式 注意事项 附上代码基于Vue的一个组件"}, {"id": "7000557603998662664", "title": "人类高质量vue学习笔记（四）", "desc": "说起路由大家可能会立即联想到家里的路由器，对，我们都知道那玩意是用来分发网络的。路由其实就是一种对应关系，比如说我们在浏览器中输入网址，浏览器要去请求这个 url 地址对应的资源。"}, {"id": "6968094627375087653", "title": "全面总结Vue3.0的新特性", "desc": "Vue3.0从20年九月发布第一个One Piece版本，到现在一直在更新优化；中文版的官方文档也已经放出；那么作为终端用户的我们来看下Vue3新增了哪些功能和特性。"}, {"id": "6997776616294187015", "title": "new Vue鬼知道经历了些什么？", "desc": "本文主要从源码开始着手，跟着vue2初始化（new Vue）的流程，看看源码内部都做了哪些让人服气的神操作。"}, {"id": "6959174069577220110", "title": "Vue3 全家桶 + TS+ Vite2 + element-plus 搭建简洁时尚的博客网站实战及踩坑记", "desc": "网站终于都用 Vue3 + TypeScript + Vite2 + Vuex4 + Vue-Router4 + element-plus 重构完啦！"}, {"id": "7003223509312733192", "title": "基于Vue + fabric.js的图片标注组件搭建", "desc": "`fabric`是基于canvas进行的api封装，可以实现绘制矩形、圆、椭圆、文本等一些基础图形，同时支持画笔自定义图形，`fabric`的优点在于它对生成的canvas画布进行了良好的封装"}, {"id": "6966495817792389150", "title": "vue实战中的一些小魔法", "desc": "已经好久好久没写过文章，上一次写应该是年前吧，可能是变懒了吧。最近都在看坑找坑，闲下来有点无聊，就想水一遍文章，打发一下时间... 能让你首次加载更快的路由懒加载，怎么能忘？ 路由懒加载可以让我们的包"}, {"id": "6951558024540454925", "title": "VueConf 2021 抢先看，Evan You 和你聊聊 Vue 的未来", "desc": "Vue 目前有 158 万的周活跃用户（通过 devtools 插件来统计），940 万的月下载量。 今年会有什么大动作呢？尤雨溪带你了解一下！"}, {"id": "7007416099952148487", "title": "事件处理", "desc": "监听事件 Vue 使用 v-on 指令来监听 DOM 事件，并在触发事件时执行一些 JavaScript。v-on 指令绑定的表达式的值可以有以下几种： 简单的表达式 对于比较简单的逻辑可以作为一个表"}, {"id": "7005890560149946375", "title": "html5和Vue中如何导出数据为表格", "desc": "html5和Vue中如何导出数据为表格 1.原始html写的table表格的导出： 像这种单独定制的表格可以直接使用以下方式导出，支持多个表格导出 2.vue搭配elementUI的表格导出： 1.先"}, {"id": "6864350927768748039", "title": "ElementUI 组件库之外，供我们选择的 Vue 组件库还有很多！", "desc": "Vue 组件千千万，只要不行咱就换。 我的答案是：耐心等待更新，不要着急不要惊慌，团队核心成员依然在进行项目的更新，下一代 Element Plus https://github.com/element-plus/element-plus 也在持续迭代中。 先抛开大不大厂不说，…"}, {"id": "6924997323214815240", "title": "尤雨溪 3 天 10 更的 Vite 究竟有什么魔力？", "desc": "上篇《尤雨溪是个恶魔，Vite三天10更》谈到了Webpack这一系列打包工具出现的原因。这些工具的出现是为了解决ESModules模块系统本身的环境兼容问题、以及零散的模块文件导致的频繁网络请求发送"}, {"id": "6932700939086200840", "title": "🎊 Element UI 新春快报", "desc": "新年好，Element UI 开发团队给各位支持我们的开发者们拜个晚年，祝大家在新的一年里工作没 bug， 天天不加班。 在过去一年里，Element UI 团队在稳定维护 Vue 2.x 版本的同时，推出了适配 Vue 3.x 的全新版本，丰富 Vue 3的社区生态，也希望在…"}, {"id": "7000613236605354020", "title": "详解 Template ref 在 Vue3 的实现", "desc": "最近我的 Vue3 音乐课程后台问答区频繁出现一个关于 Template ref 在 Composition API 中使用的问题，于是我就想写一篇文章详细解答这个问题。"}, {"id": "7002518470730448933", "title": "Vue：Axios异步通信", "desc": "一、什么是Axios Axios是一个开源的可以用在浏览器端和Node JS的异步通信框架， 它的主要作用就是实现AJAX异步通信，其功能特点如下： 从浏览器中创建XMLHttpRequests 从n"}, {"id": "7001560096601800735", "title": "实战：使用 Lumen 和 Vue 构建个人清单应用（三）开发用户模块接口", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 用户模块接口 实现用户注册接口 用户注册不需要登录认证，是一个简单的数据新增的操作，在 UserController.php 中新建 re"}, {"id": "7004860251077869599", "title": "从0开始搭建一个可用的vue3-webpack5-template（三）", "desc": "前言 在上一篇文章中，我们对配置进行了抽离和优化，在这篇文章中，我们会进一步的完善和优化我们的template,这一篇文章的代码可以在vue3-webpack5-templatetag1.0.0中看到"}, {"id": "7006607669708455967", "title": "Vue微信开发中微信分享的优雅实现", "desc": "微信分享主要是可以把我们做的网页分享给好友或者分享到朋友圈，在发送给好友时，展示出来的消息不是一段很丑的网址，而是带着图文描述的特殊模板消息，很多传播性质比较强的网页都会借助这个特性提升传播性。"}, {"id": "6869915676501835783", "title": "面向未来的前端构建工具-vite", "desc": "如果近期你有关注 Vue 的动态，就能发现 Vue 作者最近一直在捣鼓的新工具 vite。vite 1.0 目前已经进入了 rc 版本，马上就要正式发布 1.0 的版本了。几个月前，尤雨溪就已经在微博介绍过了 vite ，是一个基于浏览器原生 ESM 的开发服务器。 早期 We…"}, {"id": "7006978340972298247", "title": "Vue组件生命周期-created、mounted、destroyed", "desc": "组件生命周期 当我们 new 一个 vue 时或者当我们创建一个组件时，会创建一个实例。比如：当我们使用<Comp />组件，就会创建一个组件实例，实例创建之后会经历以下流程： 1、 注入 把配置项里"}, {"id": "7006925694345150501", "title": "Linux安装 nignx +部署 vue 项目", "desc": "本文介绍了如何在linux中安装nignx，以及将vue项目打包并部署到服务器中，最后附上一些参考文章。"}, {"id": "7004347602594447390", "title": "使用element-ui遇到过哪些问题——常见问题踩坑集合(一)", "desc": "element-ui目前是vue技术栈、中后台系统绝大部分前端选择的组件库解决方案，无论是从element-ui的基本使用，基于组件再次封装，还是到组件库源码实现，如何设计一个组件库都值得研"}, {"id": "6867515263672123399", "title": "首个 Vue 3 组件库发布", "desc": "不对 Vite 做过多评价和解析了，总之这玩意真的有点吊，丝滑的程度不是抹点油就能达到的级别，研发提效nn%不是梦。 一直被吐槽，很少做改变，不得不说，我们一直站在自己的角度去思考，去设计 API，总认为我们提供的就是最好的。 在重构 2.0 的时候，我们深刻的反思这个问题，我…"}, {"id": "6981626324880195614", "title": "Vue 2 系统如何快速迁移 Vite 作为开发工具", "desc": "Vue2系统迁移Vite作为开发工具，将会以内部系统作为案例改造, 开发用 vite，生产依旧保持 webpack。"}, {"id": "6984682096291741704", "title": "微前端模块共享你真的懂了吗", "desc": "在中后台应用场景中，不同微应用和基座之间可能存在通用的模块依赖，那么如果应用间可以实现模块共享，那么可以大大优化单应体积大小"}, {"id": "7001010700420120584", "title": "「站在上帝的角度」谈谈Element组件结构-Icon", "desc": "这次我们来谈谈Icon组件，用户就是上帝，站在上帝的角度也就是站在使用者的角度去看待组件。 用过不少优秀的UI库，用的时候美滋滋，轮到自己搭组件库的时候往往会去..."}, {"id": "7004024247366451237", "title": "【Vuex】回顾系列一（共用数据管理）", "desc": "目录 Vuex 是什么，解决什么问题 使用方式 一、Vuex 是什么，解决什么问题 是什么 解决什么问题 store/index.js main.js 二、 Vuex 包含什么 1. state （全"}, {"id": "6844903632815521799", "title": "Vue 项目里戳中你痛点的问题及解决办法（更新）", "desc": "最近要求使用vue进行前后端分离开发微信公众号，不断摸索踩坑之后，总结出如下几点vue项目开发中常见的问题及解决办法。如果你是vue大佬，请忽略小弟的愚见^V^ 列表进入详情页的传参问题。 列表进入详情页的传参问题。 c页面的路径为http://localhost:8080/#…"}, {"id": "7002080306064785415", "title": "你真的会使用v-slot么，安排~", "desc": "在子组件中，使用特殊的元素就可以为子组件开启一个插槽。 该插槽插入什么内容取决于父组件如何使用。 我们通过一个简单的例子，来给子组件定义一个插槽： 中的内容表示，如果没有在该组件中插入任何其他内容，就"}, {"id": "6999823892348928014", "title": "以脑图的形式，快速了解Vue的渲染函数render", "desc": "以脑图的形式，言简意赅汇总Vue中渲染函数相关知识点，附高清原图和源文件，方便二次修改，一起来看看吧！！"}, {"id": "6953503236254859294", "title": "Vue 源码解读（6）—— 实例方法", "desc": "详细介绍了 Vue 各个实例方法的实现原理，以及在面试中如果被面试官问到相关方法的实现原理时应该如何回答"}, {"id": "6943534547501858824", "title": "『前端工程』—— 封装Vue第三方组件的三板斧", "desc": "在封装第三方组件中，经常会遇到一个问题，如何通过封装的组件去使用第三方组件的Attributes(属性)、Events(自定义事件)、Methods(方法)、Slots(插槽)。 当然这个问题并不是难以解决，用普通方法解决难免陷入繁琐重复的工作中，而且封装的组件代码可读性也不高…"}, {"id": "6926822933721513998", "title": "2021必知必会的vite+vue3项目最佳实践", "desc": "2021第一更是尤大的Vite2，全新插件架构，丝滑的开发体验，和Vue3的完美结合。 2021年第一弹，村长将以Vite2+Vue3为主题开启大家的前端学习之旅。 Vite2主要变化在插件体系，这样更标准化、易扩展。Vite2插件API扩展自Rollup插件体系，因此能兼容现…"}, {"id": "6992500880364797960", "title": "这种微前端设计思维听说过吗？", "desc": "从single-spa到qiankun，各种微前端架构解决方案层出不穷。那一夜，我在翻阅github时，留意到一个新的微前端框架，来自京东零售开源的`MicroApp`，号称无需像上面提到那两个框架"}, {"id": "6892783570016796679", "title": "🎉🎉一个基于 Vue 3 + Vant 3 的开源商城项目🎉🎉", "desc": "由于正常上班的缘故，所以只能抽出空闲时间来做，适逢几次加班，导致比预估的工时推迟了一些时间，2020 年 11 月 3 日把项目开发的差不多了，之后一直处于自测和修改小问题的阶段。 我发现大家对这个项目的热情也挺高，所以在上周末也把项目部署到线上，让大家帮忙测试了一波。不过时间…"}, {"id": "6994126063114649631", "title": "实战：使用 Vue3 开发一个 24 分栏的 Layout 组件", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 在主流的 Vue 组件库中，layout 组件是最基础的组件之一，用于快速布局页面 UI 和制作响应式系统，在这篇文章将带你着手设计并实现一"}, {"id": "6844904056939347976", "title": "593集前端视频教程全部免费 抗击疫情 身体力行", "desc": "我是技术胖，在全国新冠疫情的笼罩下，很多小伙伴不敢出门（我们小区已经戒严，每家只发一个通行证，每天只可以外出一小时），可能很多小伙伴会因此丢掉工作，技术胖作为一个还有100万房贷要还的程序员，经济上实在没办法帮助太多，但也要身体力行，抗击疫情，尽自己所能作点什么。 所以我在这里…"}, {"id": "6844903928761417741", "title": "正确姿势开发vue后台管理系统", "desc": "相信许多人和我一样刚接触 vue 时看文档都很枯燥，看完 vue，还有 vueRouter 、vuex 、vue-cli、es6 (学不动了。。。 ) 对于看完教程之后又迟迟不能上手实际项目，只能写一些简单的小demo,这肯定和实际生产工作是有出入的，于是乎我就打算自己从零开始…"}, {"id": "7002757814133211150", "title": "收下这7款插件，让你在使用 Vite 的时候如虎添翼", "desc": "相信已经有不少小伙伴已经开始用 Vue3 做开发了，也一定使用上 Vite 了，而我今天要介绍的这几款插件，能让你在使用 Vite 做开发时如虎添翼。"}, {"id": "6844903887162310669", "title": "vue中8种组件通信方式, 值得收藏!", "desc": "作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数据库，祝您成为优秀的高级 Node.js 工程师。【程序员成长指北】作者，Github 博客开源项目 https://github.com/koala-codi…"}, {"id": "6890135726647296014", "title": "开源推荐|我不能没有的5个Vue.js库", "desc": "有的时候，我们需要在用户点击元素之外的时候触发一个事件。最常见的用例是当你想通过点击关闭一个下拉框或对话框时。这是一个必不可少的包，几乎在我构建的每个应用中都会用到。 我通常会将它安装在 main.js 中，以便在我的应用程序中使用。如果你只在一个或两个页面上使用它，你可能会想…"}, {"id": "6846687603710935053", "title": "Picker组件的设计与实现", "desc": "今天的主题是 NutUI Picker 组件的设计与实现，Picker组件是 NutUI 的一个拾取器组件，它用于显示一系列的值集合，用户可以滚动选择集合中一项，也可以支持多个系列的值集合供用户分别选择。我们通过一张效果图，来看看组件具体实现了什么功能。 说到 NutUI， 可…"}, {"id": "6847902220348981261", "title": "渲染 Vue3 component 的新方式", "desc": "众所周知，UI 组件是现代前端框架的核心概念之一，同时伴随着社区的蓬勃发展，越来越多创建组件的方式被开发出来，给开发者带了极大的便利；层出不穷的概念，特别是React社区对组件的探索，开发者经历了Mixin，HOC，render props 再到 hooks；组件的抽象方式逐渐…"}, {"id": "6943932316808904735", "title": "vue - 关于页面全局自动关闭吐司解决方案（uniapp）", "desc": "解决方案一、全局自定义吐司组件记录点击的坐标(x,y)具体的操作列表类型（上弹出、下弹出、左右）每个点击项的执行函数（返回父级页面，自动执行）高度一定是整个页面的高度和宽度，透明，点击、触动、隐藏都要"}, {"id": "6854573220691968013", "title": "Vue CLI3.x 配置指南「生产环境去除console.log」", "desc": "每天一个小技巧，每天一个优化点。慢慢积累慢慢总结。 按照以上配置内容，打包后的项目只会保留error和warn的console。 关注公众号「番茄学前端」，我会定时更新和发布前端相关信息和项目案例经验供你参考。 加个好友， 虽然帮不上你大忙，但是一些业务问题大家可以探讨交流。"}, {"id": "6903390675023167502", "title": "el-form-schema 中后台表单解决方案", "desc": "前言一年多前自己就在公司弄了个简易版本的表单方案，当时的方案其实是不成熟的，但是方向是对的。对于vue的中后台表单解决方案知名的非常少，不像react生态有uform、formily、amis等等。所"}, {"id": "6844903669897363469", "title": "记录一次vue2.0（history模式）下微信自定义分享的坑", "desc": "吐槽：关于微信自定义分享前前后后翻了文档两三遍，感觉大佬们写文档都是这么潇洒么？躲在角落里的我瑟瑟发抖了两天..... 1. 根据文档来配置（公众号安全域名，引入官方微信js） 2. 配置权限，根据微信文档描述：所有需要使用JS-SDK的页面必须先注入配置信息 3. 通过rea…"}, {"id": "6987229549264109576", "title": "vue vuex 监听对象数组变化，新旧值相同", "desc": "我的需求：需要监听vuex中一个对象数组，比较新旧值，做一些处理。 出现的问题：watch中打印出来的新旧值相同 出现问题的原因： 解决方案："}, {"id": "6844904138786996232", "title": "如何理解vue的computed？", "desc": "这道考察computed属性的题蛮有意思的。 不仅仅考察了computed，而且还考察了vue的依赖收集以及脏检查。 众所周知，首次a，b，c均为1时，foo()返回值为1。 foo()的返回值会从this.a变为this.b+this.c，2。 vue会重新执行一遍evalu…"}, {"id": "6844903821899104269", "title": "理理Vue细节", "desc": "1. 动态属性名：可使用表达式来设置动态属性名或方法名： 2. computed/methods/watch computed可缓存，但不可传参，会根据data中的属性变化而变化，即是根据响应式依赖来变化，而Date不是响应式依赖，即不会变化；method则每次都会进行计算，但…"}, {"id": "6986809718723346440", "title": "从 Vue 中 parseHTML 方法来看前端 html 词法分析", "desc": "先前我们在 从 Vue parseHTML 所用正则来学习常用正则语法 这篇文章中分析了 parseHTML 方法用到的正则表达式，在这个基础上我们可以继续分析 parseHTML 方法。"}, {"id": "6974016964964384776", "title": "Vue源码分析之nextTick", "desc": "vue源码，通过了解事件循环，主线程，任务队列，执行栈，宏任务微任务等来分析next-tick的具体实现"}, {"id": "6997217399170662413", "title": "vue解决解决开发环境的跨域问题", "desc": "方向代理 解决开发环境的跨域问题 开发环境的跨域 开发环境的跨域，也就是在**vue-cli脚手架环境下开发启动服务时，我们访问接口所遇到的跨域问题，vue-cli为我们在本地开启了一个服务,可以通过"}, {"id": "6967232647642742820", "title": "vue中遇到scrollIntoView无效问题处理", "desc": "官方文档写的简单： Element 接口的scrollIntoView()方法会滚动元素的父容器，使被调用scrollIntoView()的元素对用户可见。 语法： element.scrollInt"}, {"id": "6989130505002172453", "title": "webstorm已经设置了ES6还是出现了红色波浪警告（VUE-CLI项目中）", "desc": "> webstorm 版本为 2019.1.2 理论上来讲已经是最新版本，webstorm新版本自动兼容ES6 ![在这里插入图片描述](https://p3-juejin.byteimg.com/t"}, {"id": "6844903506030116872", "title": "axios的一些常见用法", "desc": "在项目开发中，可以通过 axios.create 创建一个实例，对该实例进行一些配置，便得到了一个专门用来与后端服务器进行通信的 ajax 函数。 在单网页应用中，通过在请求头设置一些信息，比如说把 token 放在请求的头部。 通过配置拦截器，对请求与响应进行处理。 其中 d…"}, {"id": "6966792884838203428", "title": "vue中自动化引入组件，模块", "desc": "背景 1、组件内-自动化引入 目录 组件目录有两层，因为项目的特殊性，差不多有30个组件，一个一个引入非常麻烦 传统引入, 万一有很多就麻烦了。。 自动化引入代码 在组件内引入 2、vuex-模块自动"}, {"id": "6926408651758370830", "title": "使用RoughViz可视化Vue.js中的草绘图表", "desc": "图表是数据的图形表示，用于使数据集更易于阅读，并且易于区分各部分。虽然大多数用户习惯于看到简洁而正式的图表，但一些用户更喜欢看到手绘或素描的图表，这就是roughViz的用武之地。 roughViz是一个基于D3.js和Rough.js的JavaScript库。该库旨在帮助构建…"}, {"id": "6951945211584970765", "title": "Vue3 封装第三方组件（一）做一个合格的传声筒", "desc": "各种UI库的功能都是非常强大的，尤其对于我这种不会 css 的人来说，就更是帮了大忙了。只是嘛，如果再封装一下的话，那么用起来就会更方便了。那么如何封装呢？封装三要素 —— 属性、插槽、事件、方法可以"}, {"id": "6996612144926031903", "title": "Vue中父子组件传值的多种方式", "desc": "![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70c27c9f0276432eba06bf19f0e5155b~tplv"}, {"id": "6854573211728904206", "title": "在Gitee收获近 5k Star，更新后的Vue版RuoYi有哪些新变化？", "desc": "作为 Gitee 上的王牌项目，权限管理系统 RuoYi 受到了许多开发者的欢迎，此前 Gitee 也为大家推荐过前后端分离版本的 RuoYi ：。今天为大家推荐的就是刚刚发布 3.0 版本的 Vue 版 RuoYi，一起来看看 Vue 版本的 RuoYi 有哪些特点，以及本次…"}, {"id": "6970335594975068173", "title": "Vue自定义指令基础学习与简单使用~｜周末学习", "desc": "这是我参与更文挑战的第5天，Vue指令的基础知识， 并实现一个简单的通过指令来控制按钮权限的Demo~"}, {"id": "6844904105731686408", "title": "编译器（一）概览", "desc": "非生产环境下会判断下new Function是否可以使用，在CSP（内容安全策略）严格的话new Function会报错，错误信息包含unsafe-eval、CSP。有俩办法解决：预编译、放宽CSP 这段代码就是结合baseOptions、options。前者可以理解为编译器的…"}, {"id": "6896468951510908942", "title": "vue入门之main.js介绍及配置(4)", "desc": "main.js配置定义:main.js是项目的入口文件，项目中所有的页面都会加载main.js。主要有三个作用： 1.实例化Vue。 2.放置项目中经常会用到的插件和CSS样式。3.存储全局变量。项目"}, {"id": "6844904006364446727", "title": "Vue.directive 实现元素scroll逻辑复用", "desc": "继上篇 Vue 滚动触底 mixins,将对于文档滚动触底的逻辑迁移到某个dom上，将会用到 Vue.directive 来实现代码逻辑复用。 符合滚动条件，可以通过 Element.scrollTop 来获取它的子元素的顶部到父级元素顶部的距离，不包括(border,padd…"}, {"id": "6969844641868808199", "title": "前端VUE环境变量配置打包（生产、测试环境）", "desc": "生产、测试环境不同模式打包 第一步 package.json中加入打包模式 例上图： build:prod 生产环境打包                 build:stage 测试环境打包 第二步 "}, {"id": "6844903976802975758", "title": "Vue脚手架使用介绍", "desc": "博主在更新此文档时，Vue脚手架已经更新到v4.0.5点击查看最新版本。可以说vue团队的工作劲头还是很足，出活儿~~ 一. vue-cli 2.x使用 1. vue-cli安装 2. 创建项目 template-name表示模板名称，project-name标识项目名称，这个…"}, {"id": "6844904131568599048", "title": "利用Github webhook 自动部署VUE项目之乞丐版", "desc": "用VUE写了个小项目，每次更新了都要在本地 build 好了后打包再上传到服务器上，再解压。 这就很麻烦，一开始想要的用 jenkins 来自动集成，但是操作起来很麻烦，且没必要。但是我注意到了 github 提供了一个 webhook 钩子，当 push 了代码后，githu…"}, {"id": "6844903708782755854", "title": "md在web良好展示的处理，三种实现定位时平缓滚动的方法（vue + Element ui + mark.js）", "desc": "内容contain，静态定位, margin-top值为header的高度，margin-left的值为aside的宽度，是router-view的出口。分为两部分： js的scrollIntoView方法，优点是不需要锚点定位，代码简单。缺点也是浏览器兼容性问题，不支持saf…"}, {"id": "6973956532975173645", "title": "手撕Vue源码——createComponent", "desc": "组件化 Vue.js另一个核心思想就是组件化。所谓组件化，就是把页面拆成多个组件（component），每个组件依赖的css,JavaScript，模板，图片等资源放在一起开发和维护。组件是资源独立的"}, {"id": "6994844473226166303", "title": "vue2响应式原理array部分", "desc": "实现响应式 操作类型为数组的属性的属性时不会触发 getter 函数。虽然不可以，但是如果在对操作数组的方法进行修改，使这些方法被调用的时候可以携带一些额外的方法，那么也可以起到 getter 的作用"}, {"id": "6994995817698295816", "title": "升级vue-cli、qiankun应用—— 第一步、升级webpack5", "desc": "故事由来 老大：突然兴起，那个我们现在那些vue-cli构建的项目能不能使用webpack5进行构建，后面可以应用联邦模块进行函数复用，父应用组件共享给子应用等。 我：。。。这个，应该可以吧 从何下手"}, {"id": "6844903925573763086", "title": "# 探索-如何将单个vue文件转换为小程序所需的四个文件(wxml, wxss, json, js)", "desc": "最近在做需求的时候，经常是，同一个需求是在h5端实现一次，再在小程序实现一次，公司的h5端是用vue写的，微信小程序则是小程序的原生语言，这就导致了很多很重复的劳动，虽然语言不同，但逻辑和设计都是一模一样的。 而公司也没想过花点时间统一一下，比如考虑使用一下mpvue之类的，所…"}, {"id": "6844903574938320909", "title": "CSS Modules", "desc": "CSS命名规范，基本又是每个团队都要面临的问题，规范必定会出一则，但最后能严格执行的，始终是一件很难的事。 这套法则注重 CSS 语义的表达和管理，初衷就是为了方便区分样式模块的归属，也方便日后复用，有点像 BEM 方法。但缺点也很明显：难理解，命名需要花额个的时间考虑其独特性…"}, {"id": "6994807633383260168", "title": "箭头函数、Promise对象、position", "desc": "这是我参与 8 月更文挑战的第 9 天，活动详情查看： 8月更文挑战 一、箭头函数 在Vue中箭头函数相当于匿名函数，并且简化了函数定义。 (1) 种类一 只包含一个表达式，省略{ }花括号和retu"}, {"id": "6844903651333373959", "title": "基于React的表单开发的分析(上)", "desc": "本文主要讲解后台系统与表单相关的页面开发，并分析如何才能更好地、高效地开发。 Ant Design是个服务于企业级产品的UI框架，主要可以用于中后台系统,它有基于React、Vue和Angular的实现。个人感觉Antd还是很强大的,API相当完善、全面，基本能实现你想要的各种…"}, {"id": "6844903639119577095", "title": "于是，我们给前端分享会定义了一个未定义的名字", "desc": "我个人私底下是挺喜欢和其他同学扯些和技术有关的话题的，相信和我类似的开发小伙伴们也一定不少。不过在个人有限的经历里，和一对一交（chui）流（bi）时的谈笑风生比起来，很多公司在小组和部门层面的分享相对就会平淡一些了。当然这完全是可以理解的：诸如业务繁忙程度、技术栈迭代速度、团…"}, {"id": "6844903517421830151", "title": "vue组件开发练习--焦点图切换", "desc": "vue用了有一段时间了，开发的后台管理系统也趋于完善，现在时间比较算是有点空闲吧！这个空闲时间我在研究vue的另外的一些玩法，比如组件，插件等。今天，我就分享一个组件的练手项目--焦点图切换组件。这个项目是我用于vue组件练习的一个项目，当然了，代码也会提交到github（ec…"}, {"id": "6844904131216277511", "title": "vue3 reactive 思路引导", "desc": "假设设计一个 晚餐价格计算的功能。 render 函数中，需要三个变量为dinnerPrice,tip, total。 这样，就能够实现当设置dinnerPrice 或者 tip 自动更新total。 但是，这里的key是固定死的，可以进行进一步的优化。方法：将key 列表通过…"}, {"id": "6909369743887564808", "title": "Vue - 基础", "desc": "1. v-if+v-for+v-else控制购物车商品的显示 2. v-for遍历数组(列表)、对象(字典)、数字 3. key值 的解释 4. 数组更新与检测"}, {"id": "6947686992519888926", "title": "【vue】computed的原理？", "desc": "computed的初始化是在this._init里完成的。 this._init里面调用了initState方法。从下面的代码可知data是在computed之前进行初始化的，所以是访问不到computed属性。那如果执意要访问呢？ initState内部调用initCompu…"}, {"id": "7000950346793091102", "title": "仿vue写一个极简版MVVM框架（二）（实现$nextTick优化）", "desc": "目录结构 此次我们https://juejin.cn/post/7000280471045144613 （一）的基础上新增了$nextTick异步更新策略 没有修改的文件就不展示了，只展示修改和新增的"}, {"id": "6844903720929460237", "title": "Cookbook：优化 Vue 组件的运行时性能", "desc": "Vue 2.0 在发布之初，就以其优秀的运行时性能著称，你可以通过这个第三方 benchmark 来对比其他框架的性能。Vue 使用了 Virtual DOM 来进行视图渲染，当数据变化时，Vue 会对比前后两棵组件树，只将必要的更新同步到视图上。 Vue 帮我们做了很多，但对…"}, {"id": "6997675884236767240", "title": "可复用 & 组合--④：Teleport", "desc": "Teleport 基本用法 Teleport 提供了一种方法，允许我们控制在 DOM 中哪个父节点下渲染 HTML。"}, {"id": "6999557591793664031", "title": "从0搭建Vue2 UI组件库（七）", "desc": "如何封装form组件和formItem组件？前面写了封装button组件、dialog组件、input组件、switch组件、radio组件、radioGroup组件，有需要的童鞋请冲~~"}, {"id": "6992860149530492964", "title": "Vue2源码解析（二）", "desc": "我们在上一章vue2源码解析(一)简单介绍了Vue的执行流程，本章我们创建一个例子来看一下挂载前的处理流程"}, {"id": "6844903767431708686", "title": "「Vue实践」项目升级vue-cli3的正确姿势", "desc": "一. 原以为升级vue-cli3的路线是这样的： 对比新旧 package.json，然后yarn install，完毕。 然鹅... 运行项目，报错You are using the runtime-only build of Vue......： 噢，原来是vue-cli3…"}, {"id": "6844903840278380552", "title": "快速上手BootstrapVue ", "desc": "Vue.js 是一个流行的 JavaScript 库，用于在短时间内开发原型。这包括用户界面、前端应用、静态网页和本机移动应用。它以易用的语法和简单的数据绑定功能而闻名。 最近，Vue.js 生态系统发布了一个新的软件包。它是流行的 Bootstrap 框架与 Vue.js 的…"}, {"id": "6997957692828418061", "title": "回首Vue3之API篇（六）", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 这篇文章我们来讲一下全局APIdefineComponent、defineAsyncComponent、defineCustomEleme"}, {"id": "7000757316626694175", "title": "VUE中子元素的diff算法", "desc": "VUE 子节点diff算法 第一步创建变量 创建新旧子起始和结束四个索引oldStartIdx、newStartIdx、oldEndIdx、oldEndVnode 获取新旧起始和结束四个子Vnode "}, {"id": "6971358611012337695", "title": "Electron+Vue3 MAC 版日历开发记录(8)——专注模式", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844904045589577735", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（四）", "desc": "随着前端应用的日渐复杂，状态和数据管理成为了构建大型应用的关键。受 Redux 等项目的启发，Vue.js 团队也量身定做了状态管理库 Vuex。在这篇教程中，我们将带你熟悉 Store、Mutation 和 Action 三大关键概念，并升级迷你商城应用的前端代码。 我们在第…"}, {"id": "6945606524987244558", "title": "Vue 3 生命周期完整指南", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 Vue2 和 Vue3 中的生命周期钩子的工作方式非常相似，我们仍然可以访问相同的钩子，也希望将它们能用于相同的场景。 如果项目使用 选项 API，就不必更改任何…"}, {"id": "6844903923778584583", "title": "Vue中级指南-04 Vue中跨域以及打包部署到nginx跨域设置", "desc": "众所周知,我们在做前后端分离项目的时候,经常需要在本地起前端工程,接口希望拉取服务端的实际数据而不是本地的mock数据,而如果本地程序直接访问远程接口， 肯定会遇到跨域问题。 这还没完，现在我们要将项目部署到nginx上，此时原来可以访问的接口又访问不到了，所以这个时候还要对n…"}, {"id": "6992492433804099597", "title": "Vue watch与watchEffect", "desc": "watchEffect 它立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。 副作用刷新时机 pre sync post 更新时机 组件更新前执行 强制效果始终同步触发 组"}, {"id": "6844903904585449486", "title": "Vue各阶段数据可使用情况：created，computed，data，prop，mounted，methods，watch", "desc": "created时，可用data和prop中的数据。 computed的属性，当在mounted或者dom中使用到时，才会属性的执行代码。 最后是mouted，可使用前面的数据，并且此时才可以操作dom。 watch不会再创建阶段自动执行，除了添加立即执行这个配置项。 计算属性是…"}, {"id": "6993339530413785125", "title": "Vue框架的使用方法（三）", "desc": "Vue框架——Vue的单、双向绑定；Vue条件渲染的分类和使用方法；Vue的列表渲染语法；Vue的事件驱动；Vue和JS中的this分别指代什么；Vue的Event对象；Vue的监听（watch属性）"}, {"id": "6844903585885470734", "title": "前端进阶系列-目录", "desc": "之前我分享了文章《大厂前端面试考什么》,你们一定很想看答案吧？说实话，答案我是有，在准备面试的时候会时不时翻看，但内容比较多，比较凌乱，也不能指望我在一篇文章中写完。 我打算写一系列文章来进行解答面试中碰到的问题。目前只有目录，赶时间的同学可以根据关键词自行搜索资料"}, {"id": "6950280074876682276", "title": "手摸手教你docker+jenkins+gitlab部署你的vue前端项目", "desc": "前言:学习了一周的CICD,踩了很多坑,都是泪,特此记录一下整个过程,本次项目产出效果是,git push的时候自动帮构建并部署到服务器,一下是整个大致流程:1.本地代码push到gitlab 2.g"}, {"id": "6992745253014880293", "title": "Vite工具Vue3.x的坐骑 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，继续坚持！！！ ES Module 现代浏览器都支持ES Module（IE不支持） 通过下面的方式加载模块 支持模块的script默认延迟加载 类似于script标签"}, {"id": "6844903710816993287", "title": "VS Code书写vue项目配置 eslint+prettier 统一代码风格", "desc": "以前公司的vue项目只是我一个人在写，代码风格统一，但是后来随着团队增加，统一的代码风格就越来越重要。我的主力工具是sublime，ws辅助，vscode基本很少使用（就下载安装放在冷宫），但是听说用来写vue项目还不错，就开启了一番折腾。当然工具么，没有谁好谁坏了~~ 不盲目…"}, {"id": "6844903496286732296", "title": "Vue2.0 项目开发总结", "desc": "项目目录是采用 vue-cli 自动生成，其它按需自己新建就好了。 我们在项目中引入了 vuex ，通常情况下是不需要使用 event bus 的，但是有一种情况下我们需要使用它，那就是在路由钩子函数内部的时候，在项目中，我们需要在 beforeEnter 路由钩子里面对外抛出…"}, {"id": "6844903807340527629", "title": "一个Vue图片上传剪裁压缩组件", "desc": "大佬赏个star吧github:https://github.com/Storm4542/vue-picture-uploader文档&&示例地址https://storm4542.github.io"}, {"id": "6844903513470795789", "title": "【填坑】vue+webpack 升级后在原有项目上的适配问题", "desc": "1. loaderUtils.parseQuery() ...... 2. vue - scope 3. 番外篇：vue-loader 的报错"}, {"id": "6844903901406183432", "title": "Vue：数组有哪些方法支持响应式更新，如不支持如何处理，底层原理如何实现的？", "desc": "Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： 你可以打开控制台，然后对前面例子的 items 数组尝试调用变异方法。比如 example1.items.push({ message: 'Baz' })。"}, {"id": "6971974649303269407", "title": "Vue插槽（slot）详解与使用方法", "desc": "这是我参与更文挑战的第 5 天，活动详情查看： 更文挑战 插槽：简单理解就是组件内部留一个或多个的插槽位置，可供组件传对应的模板代码进去。插槽的出现，让组件变的更加灵活。 1. 匿名插槽 父组件 子组"}, {"id": "6920395657366732813", "title": "分享几个Vue 自定义指令", "desc": "前天看到github上有人分享Vue自定义指令结合实际业务需求调整做出了优化版本，不喜勿喷。 在 Vue，除了核心功能默认内置的指令 ( v-model 和 v-show )，Vue 也允许注册自定义指令。它的作用价值在于当开发人员在某些场景下需要对普通 DOM 元素进行操作。…"}, {"id": "6858423788451987470", "title": "Vue.js 插件开发", "desc": "按照Vue.js 官网的说法。插件通常用来为 Vue 添加全局功能。Vue 插件 这篇文章说下我自己用插件的方式提供一个包含登录界面的插件，插件内提供 axios 的封装。这样每次新项目就可以按照插件，快速实现登录和 axios 功能了。只是提供一个思路，大家可以在参考下自己做…"}, {"id": "6943479032788811813", "title": "VUE组件传值案例讲解", "desc": "没写之前呢先搞明白一个问题，组件引用的时候到底谁是老子，谁是儿子，被打的是儿子，打人的老子，记住这个就可以了，被引入的是儿子，引入他的是老子，也就是说我们一般写公共组件的时候都是在写子组件，父组件是调用这些子组件的。<el-dialog :title=\"title\" :visib..."}, {"id": "6939710219874205710", "title": "Vue2.0 学习笔记四 组件化开发", "desc": "1. 什么是组件化 组件化就是把重复的代码提取出来合并成为一个个组件，组件最重要的就是重用（复用），位于框架最底层，其他功能都依赖于组件，可供不同功能使用，独立性强。 Vue 的组件分为全局组件和局部组件。 2. 全局组件与局部组件 全局组件： 全局组件注册后，任何Vue实例都…"}, {"id": "6844903511361060872", "title": "如何控制多个同级视图的显示隐藏（Vue.js）", "desc": "这样看起来代码又变多了，虽多此一举的做法但是会使得代码可读性更好一些。 一个编程的小技巧，可能没有什么太大的意义，且在实际项目中很少有机会会用到，只是开拓一下思路，水平有限，希望能对大家有帮助。"}, {"id": "6923551921785536520", "title": "基于Vue.js技术栈的几种项目工具打造", "desc": "如果你想改变@vue/cli创建的项目的一些配置，首先可以找一找有没有这样的Vue CLI插件。如果没有，相比于写成一个普通的命令行工具，不如把它写成一个Vue CLI插件。 写成Vue CLI插件的好处是遵循Vue CLI插件规范，可以让你的工具成为Vue CLI生态的一员，…"}, {"id": "6923509739301126157", "title": "vue+cropper图片裁剪", "desc": "效果如上：安装：npminstallvue-cropper-Smain.js里面使用组件内使用需要使用外层容器包裹并设置宽高(class=\"cropper\"需设置高度)更多配置项和方法可查看GitHu"}, {"id": "6899639171124559886", "title": "怎么写一个vue插件", "desc": "最近在看vue的课程，说到vue插件，其实还蛮希望有一天自己能写一个vue插件。 添加 Vue 实例方法，Vue.prototype.$xx=.. 如果你手上有好几个项目，每个项目都添加一些相似的全局方法、资源等，就可以试着写一个插件，这样方便管理，万一一不小心，可能成为网红，…"}, {"id": "6844903897379635213", "title": "Vue：v-slot 插槽指令", "desc": "Vue的slot，是组件的一块HTML模版，这块模版由使用组件者即父组件提供。可以说是子组件暴露的一个让父组件传入自定义内容的接口。【在实际项目开发当中，时常会把父组件的内容与子组件自己的模板混合起来使用。而这样的一个过程在Vue中被称为内容分发。也常常被称为slot（插槽）。…"}, {"id": "6877044310798254088", "title": "CDN+Vue-Cli优化打包体积引起的对环境变量的迷思", "desc": "需求： 在打包发布的时候，根据配置打包出将常用的库使用CDN的版本。 在vue-cli中，可以使用htmlPlugin配置生成的html模板文件，使用了cli中插值的能力，在模板中嵌入表达式，将预设的cdn的脚本标签添加到模板中，同时使用webpack的external功能将本…"}, {"id": "6844904057291685901", "title": "小白有关Vue中$on和$emit的看法和一些疑惑", "desc": "可以看出，他主要是和$emit 配合使用。第一个是 事件 名称（也可以是一个数组，通过调试也可以看出来）。 第二个是回调函数，也就是 事件的执行函数 这个原因是什么呢？ 我也尝试了利用数组循环，同样也不行。只会console.log 第一个，如果传入的是一个数组，会直接把数…"}, {"id": "6844903825355046919", "title": "浏览器事件循环（结合vue nextTick）", "desc": "线程：线程则是进程内的一个独立执行单元，在不同的线程之间是可以共享进程资源的，是进程内可以调度的实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。 简单讲，一个进程可由多个线程构成，线程是进程的组成部分。 js是单线程的，但浏览器并不是，它是一般是多进程的。 一个页…"}, {"id": "6844903668429357063", "title": "用 Vue 编写一个长按指令", "desc": "最近学习了一下vue.js。对这一框架的最深刻印象就是vue的组件化思想和数据驱动视图而不直接操作DOM的思想。在JQuery逐渐黯淡的前端发展趋势下，这种UI状态的变化操作方式势必会成为主流。那么在此以一个小例子作为说明。 创建一个按钮，按下一次就可以清除单次输入（或者持续按…"}, {"id": "6844903555493527566", "title": "我理解的函数柯里化", "desc": "对于函数柯里化之前就了解过，大概知道是个什么东西。 最近在读Vue源码的时候，看到了 cached 函数的使用，让我觉得这个代码写的挺有意思，于是在sg发问，看了 @sunyongjian 回答，于是又绕到了 柯里化 和 高阶函数上。。。"}, {"id": "6916556262880575496", "title": "Vue Baidu Map - 可能是 Vue 接入百度地图 API 的最佳组件了", "desc": "基于 Vue.js 封装的百度地图组件，运行流畅，代码简单易懂，可能是在 Vue 生态里最好的地图组件了。 Vue Baidu Map 是一个基于Vue.js封装的百度地图组件，几乎包含百度地图官方所有的 API 示例，同时也支持引入百度地图扩展包。 接入百度地图，是一个比较常…"}, {"id": "6971708345757466661", "title": "vue封装的可配置水球图组件", "desc": "前言 基于 echarts-liquidfill 开发的适用于大屏可视化的水球图组件，根据传入的数值决定水球图水量高度，可定义水球图的三条水波纹的颜色色值、水球图的背景颜色、边框颜色以及外发光阴影的颜"}, {"id": "6995787006357798949", "title": "vue开发中常见的跨域方案（能用的）", "desc": "实际开发中遇到跨域怎么办，这几种方式大家都可以参考下，同时也是比较实用的解决方式，每天学习一点点，希望自己越来越好"}, {"id": "6985028423848558623", "title": "RTC月度小报5月 |教育aPaaS灵动课堂升级、抢先体验VUE版 Agora Web SDK、声网Agora与HTC达成合作", "desc": "本月亮点速览 产品与技术： 声网Agora 教育 aPaaS 灵动课堂升级 视频通话/语音通话/互动直播 Native SDK 升级上线 3.4.2 版本 视频通话/语音通话/互动直播 Web SDK"}, {"id": "6945122785752514567", "title": "【Parcel 2 + Vue 3】从0到1搭建一款极快，零配置的Vue3项目构建工具", "desc": "一周时间，没见了，大家有没有想我啊！哈哈！我知道肯定会有的。言归正传，我们切入正题。上一篇文章中我主要介绍了使用Vite2+Vue3+Ts如何更快的入手项目。那么，今天我将会带领大家认识一个新的Vue3项目构建工具——parcel-vue-cli。这是什么？怎么以前没有听说过。…"}, {"id": "6844903582643273735", "title": "vue2 + koa2 + webpack4 的SSR之旅", "desc": "因为webpack也已经到了 4.1 的版本了，所以顺带把webpack3迁移到了webpack4。 所以vue-ssr也可以理解为就是把我们以前在客户端写的 .vue文件 转换成 html片段，返回给客户端。 实际上当然是会复杂点，比如服务端 返回 html 片段，客户端直接…"}, {"id": "6844904185352159239", "title": "Vue组件为什么data必须是一个函数？", "desc": "我们需要先复习下原型链的知识，其实这个问题取决于 js ，而并非是 vue 。 实例它们构造函数内的this内容是不一样的。 Component.prototype ，这类底下的方法或者值，都是所有实例公用的。 自己突然对这个问题懵逼，不过事后想了想还是自己基础知识忘得太快。以…"}, {"id": "6986526653165879333", "title": "Vue自定义指令", "desc": "Vue允许注册自定义指令,当对普通DOM元素进行底层操作这个时候就会用到自定义指令. 初识 input自动获得焦点 1.注册一个全局的指令 2.注册一个局部组件 钩子函数 动态指令参数"}, {"id": "6949487696096002085", "title": "从开发一款基于Vue技术栈的全栈热重载生产环境脚手架，我学到了什么？", "desc": "我们有必要开发一款可热重载的生产环境脚手架。如果增加模拟数据接口服务，那就更完美了。光说不练假把式，我们就开发一款基于Vue技术栈的全栈热重载生产环境脚手架。"}, {"id": "6844903682618687496", "title": "记录一次基于vue、typescript、pwa的项目由开发到部署", "desc": "最近秋招之余空出时间来按自己的兴趣动手做了一个项目，一个基于vue，typescript，pwa的实验浏览移动端webapp，现在趁热打铁，将这个项目从开发到部署整个过程记录下来，并将从这个项目中学习到的东西分享出来，如果大家有什么意见或补充也可以在评论区提出。先介绍一下这个项…"}, {"id": "6844903577815613453", "title": "移动spa商城优化记（一）---首屏优化篇", "desc": "随着公司业务的不断壮大，最近老是有用户反应公司APP内的商城打开比较慢，这可不行啊，慢了容易流失用户，流失用户减少公司业绩，公司业绩少我的年终奖就少…………，所以为了公司，也为了自己，开始优化之路。 商城系统是去年开发的，是一个基于vue2.0的spa项目，最好的优化思路当然是…"}, {"id": "6993229743466217509", "title": "Vue—关于实例中为什么只能有一个根元素？", "desc": "这个问题分两种情况： new Vue({el: '#app'}) 单文件组件template中根元素只能有一个 要解释这个问题，最好的方式就是直接看源码 Vue实例 一个vue实例的创建大致分为如下两"}, {"id": "6982805449489776671", "title": "vite2 js antd系列01 - 快速上手", "desc": "全部代码都会使用 vue3 composition api 以及 setup syntax sugar 本人有代码洁癖， 项目一开始会引如prettier, eslint, commitlint"}, {"id": "6844903869730799629", "title": "深入剖析Vue源码 - 响应式系统构建(上)", "desc": "回顾一下之前的内容，我们对Vue源码的分析是从初始化开始，初始化_init会执行一系列的过程，这个过程包括了配置选项的合并，数据的监测代理，最后才是实例的挂载。而在实例挂载前还有意忽略了一个重要的过程，数据的初始化(即initState(vm))。initState的过程，是对…"}, {"id": "6994459104945291295", "title": "手写 Vue3 响应式（Reactivity） 模块", "desc": "什么是响应式？响应式中最重要的元素是什么？如何手写一个 vue3 的响应式（Reactivity）模块？"}, {"id": "6844903653992562695", "title": "全栈开发--vue.js+php开发个人博客系统", "desc": "一直想搭建自己的个人博客，写博客可以记录我的学习笔记、总结经验、分享技术等等。尝试过csdn、博客园、hexo写博客，但作为一名程序猿，还是想拥有属于自己的个人博客！ 最初接触vue是今年年初的时候，我的毕业设计是做一个二手车销售网站（呃(⊙o⊙)…一开始看到这题目我是拒绝的，…"}, {"id": "6983958213297504269", "title": "vue + elementUI + file-saver + xlsx 导出可合并的Excel", "desc": "一, 安装依赖; 二, 确定表格结构; 三, 获取接口数据; 四, 处理源数据; 五, 表格合并; 六,调用插件方法"}, {"id": "6844904019631013901", "title": "基于Webpack4的Vue移动端开发环境-搭建篇", "desc": "在使用Vue开发单页面的时候，我们大多数时候都是使用的官方CLI工具，现在的Vue CLI已经迭代到了4.X了，可以说很成熟稳定了，能满足大多数要求，而且上手简单。本着折腾摸索的精神，还是打算自己搭建一个开发环境，熟悉各个流程。 这样一个项目就先初始化完毕，接下来开始进入各种工…"}, {"id": "6896636024186011655", "title": "Vue3 demo初体验笔记 -Vue3跟Vue区别", "desc": "https://zhuanlan.zhihu.com/p/184903118先挂上giuhub地址，用Vue3做个ui库，欢迎star，佛系更新Github：JamesLHY/vue3-ui官网：Vi"}, {"id": "6844903784963899400", "title": "v-model 摸爬滚打原理详解", "desc": "v-model 是 Vue 框架提供的众多指令中的一个，其主要作用是可以实现在表单 <input>、<textarea> 及 <select> 标签元素上创建双向数据绑定。 * 最后点击 input 标签上面的 button 标签，发现 input 标签的值和 p 标签里面显示…"}, {"id": "6844903735806656526", "title": "2019年Vue学习路线图", "desc": "如果你是 Vue 开发新手，可能已经听过很多行话术语，比如单页面应用程序、异步组件、服务器端渲染，等等。你可能还听说过与 Vue 有关的一些工具和库，比如 Vuex、Webpack、Vue CLI 和 Nuxt。 浸没在术语和工具的浩瀚海洋中难免会令人感到沮丧，但其实并不是只有…"}, {"id": "6844903573000568845", "title": "用Vue.js开发微信小程序：开源框架mpvue解析", "desc": "用Vue.js开发微信小程序：开源框架mpvue解析"}, {"id": "6976958947790061599", "title": " 详解 Vue 2.X 核心源码，手撸一个简易版Vue框架（上篇）", "desc": "属性描述符 Object.defineProperty（属性描述符）可以说是Vue中非常核心的API了,通过它完成了属性代理和数据劫持继而实现了数据的响应式。 Object.definePropert"}, {"id": "6992215084097503240", "title": "Vue3+ts+tsparticles 实现粒子背景效果", "desc": "前言 之前看到博客论坛上背景页的粒子效果觉得很新奇，于是去网络上找了一下demo，结果发现基本上都是vue+js去实现粒子背景效果，于是自己写了一篇关于ts实现粒子背景的文章"}, {"id": "6844903624561147917", "title": "160行代码仿Vue实现极简双向绑定[详细注释]", "desc": "现在的前端面试不管你用的什么框架，总会问你这个框架的双向绑定机制，有的甚至要求你现场实现一个双向绑定出来，那对于没有好好研究过这方面知识的同学来说，当然是很难的，接下来本文用160行代码带你实现一个极简的双向绑定机制。如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以…"}, {"id": "6844903520005521415", "title": "vue项目中对axios的二次封装", "desc": "可能你会问，这里的axios返回的就是promise对象，为什么还要再次对get,post封装一次promise.因为我这边的话，在开发中使用async await会出现数据请求失败的情况，报的错就是返回的不是promise对象。(ps：可async await返回的就是pro…"}, {"id": "6844903506772492295", "title": "Element 2.0 正式发布", "desc": "Element 2.0 已经在今天上午发布正式版，官网也同步更新为默认显示 2.0 版本的文档（当然，你仍然可以从下拉菜单中选择查看 1.x 版本的文档）。另外，最近收到一些大陆用户反馈官网加载慢的问题，随着 2.0 版本的上线，你也可以访问部署在国内的 http://elem…"}, {"id": "6844903823752822792", "title": "load-vue(定制化+趣味性的加载动画插件)", "desc": "大家好，我是六六。经过测试，一款加载动画插件完美发布。写这个插件的初衷有两点，第一就是加载loading的有趣性,在加载过程变的有趣，大大地提升用户体验感。第二就是定制化，开发者可以根据自己的需求随意改变动画的大小，颜色，速度等。已经成功运用在我的仿蘑菇街商城项目里面运行了，效…"}, {"id": "6844903655108280328", "title": "Vue实现左右菜单联动实现（更新）", "desc": "之前在外卖软件上看到这个左右联动的效果，觉得很有意思，所以就尝试使用Vue来实现，将这个联动抽离成为一个单独的组件，废话少说，先来一张效果图。 这个组件分为两个部分，1、左菜单；2、右菜单。 这里是为了做demo，所以在数据上只是单纯捏造。"}, {"id": "6916710516744421389", "title": "VUE的面试总结（一）", "desc": "Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态 变更将会影响所有组件实例，这是不合理的;采用函数形式定义，在initData时会将其作为工厂函数返 回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程…"}, {"id": "6977010503902199822", "title": "Vue3-watch和watchEffect", "desc": "这是我参与更文挑战的第21天，活动详情查看： 更文挑战 一、watch与watchEffect watch可以监听一个或多个响应式数据， 一旦数据变化， 就自动执行监听回调， 如果监听rective对"}, {"id": "6996165998843789320", "title": "No.14 vue-element-admin 学习使用（九）指令权限，快捷导航tag-view", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 指令权限，实现按钮级别的权限判断。v-permission，像这样，只有指定权限的用户，才能看到对应的内容。 全局权限判断函数， 在某些情"}, {"id": "6951217009237442568", "title": "手摸手实现Vue3 Reactivity", "desc": "Vue3中Reactivity的最小实现，基于Proxy，实现自己的响应式系统，理解Vue3双向绑定的第一步~。"}, {"id": "6942030120383168542", "title": "vue中computed、watch、methods与生命周期的执行顺序", "desc": "最近有看到一个问题说：vue中computed、watch、updated谁先执行？因为之前没有注意过执行顺序，今天特地研究了一下。希望研究结果能给各位小伙伴做个参考！话不多说，先上代码："}, {"id": "6844903637450227726", "title": "基于后编译的国际化解决方案", "desc": "在之前做一些前端国际化的项目的时候，因为业务不是很复杂，相关的需求一般都停留在文案的翻译上，即国际化多语言，基本上使用相关的 I18n 插件即可满足开发的需求。但是随着业务的迭代和需求复杂度的增加，这些 I18n 插件不一定能满足相关的需求开发，接下来就和大家具体聊下在做国际化…"}, {"id": "6985042636033753096", "title": "VUE虚拟 dom 转换真实dom", "desc": "虚拟DOM 转换真实DOM - ADNY（2021.7.15 | 01版） 感谢王红元老师 创建虚拟节点vnode最后挂载到app节点上 返回一个虚拟DOM对象判断对象中各个属性的边界值（只考虑基础数"}, {"id": "6899286066864324616", "title": "Vue写一个SPA登录页面的过程", "desc": "用户做出注销操作时删除登录状态。 下面我根据列出的步骤一一分析如何做代码实现，所有在代码在https://github.com/doterlin/vue-example-login中，并带有较详细注释帮助理解代码。 在此之前假设登录页面路由为/login，登录后的路由为/use…"}, {"id": "6950447892037386247", "title": "Vue重构项目之实战技巧篇", "desc": "实战技巧（后续持续补充）项目中的遇到的问题问题两个数组A=[],B=[]每个数组长度不确定A内的每个元素需要向B内的每个元素发送一次请求每个请求必须等待上个请求执行完毕后再执行最后执行完毕提示操作成功"}, {"id": "6923006396896116744", "title": "vue中，使用videojs 播放m3u8格式的视频", "desc": "1. 实现基本的自动播放 2. 实现换台 1. 视频不能自动播放 或报错 DOMException: play() failed muted=\"false\" 表示视频不用静音（视频播放便有声音），但设置 muted=\"fasle\" 的情况下，视频无法实现自动播放。 2. 换台的…"}, {"id": "6844903764017545224", "title": "VUE简单的定时器实时刷新", "desc": "我前段时间刚刚写了一个类似余股票的项目，上边的K线图是要实时去刷新的，所以要用vue做一个心跳，当然大家也可以选择用websocket，大佬们感觉肯定很简单，但是我只是一个刚入门的小前端，特此记录一下。 一开始我感觉很简单，不就是个心跳吗，在methods 中定义一个timer…"}, {"id": "6883081839507046408", "title": "深入理解.sync用法", "desc": "我们得知vue通过自定义事件系统来帮助我们修改父组件上的数据。 它有一个api：$emit，通过它我们可以在子组件上面修改父组件上面的数据。 通过以上方式可以让子组件修改父组件上的数据。 我们需要在子组件的template上调用$emit，然后在父组件上监听这个自定义事件，当执…"}, {"id": "6856661502053744654", "title": "Vue3响应式原理", "desc": "1.如果喜欢本文，就点个赞支持下吧，你的「赞」是我创作的动力。 2.扫码即可加我好友，我拉你进「前端进阶交流群」，大家一起共同交流和进步。"}, {"id": "6844903621545443342", "title": "vue 开发 2048/围住神经猫  小游戏", "desc": "写之前，我觉得如果利用好vue的双向绑定，那么就只需要操纵数组就可以玩2048了。但实际操作过程中遇到坑好多。不过基本功能已经实现，可以玩额。 阻止父元素原生的scroll事件，这关乎小游戏是否稳定，之前思路一直是觉得只要js就能搞定，现在发现，这个应该用css来做，但是ios…"}, {"id": "6844904179232686094", "title": "在Vue中创建可重用的 Transition", "desc": "Vue.js中的transition确实很棒。 毫无疑问，它们可以非常轻松地让应用程序栩栩如生，但是通常必须在每个项目中从头开始编写它们，甚至还需要引入animate.css之类的CSS库来使它们功能更强大。 如果我们可以将它们封装到组件中，并在多个项目中简单地重用它们，结果会…"}, {"id": "6844903930372030478", "title": "Vue-cli3.0 px转换为rem,完成h5自适应", "desc": "技术栈vue-cli3.0:使用脚手架工具创建项目postcss-pxtorem:转换px为rem的插件自动设置根节点html的font-size因为rem单位是相对于根节点的字体大小的，所以通过设置"}, {"id": "6920118166224666632", "title": "vuex4都beta了，vuex5还会远吗？", "desc": "随着vue3的出现，vue社区的其他核心包都进行了对于vue3的升级支持，例如vue-router、vuex等。那么vuex有了哪些变化呢？今天我们一起来聊聊vuex。 我们知道vue3比较核心的两个升级点:composition-api和 更好的 typescript 支持。…"}, {"id": "6844904111117336590", "title": "《Vue不看源码懂原理》系列——Vue的diff算法不难懂", "desc": "首先要说diff算法之前，还是稍微解释一下虚拟DOM，虽然大部分人都知道虚拟DOM的概念了。 我认为前端现代框架解决的是忽略对DOM的操作，让前端人员注重于维护状态。 对于视图更新以往的解决方式是，不关心任何状态，只需要将所有DOM删掉，然后重新生成一份DOM，但是这种访问DO…"}, {"id": "6960594631239139365", "title": "站在巨人的肩膀上分析vue3渲染过程", "desc": "在vue3中：什么是AST语法树，怎么产生Vnode结构，怎么将Vnode渲染成真实的DOM，怎么更新页面的变化"}, {"id": "6915310758859374606", "title": "Vue3聊天实例|vue3.0+vant-ui仿微信/朋友圈", "desc": "项目简述 实现技术编码+技术：Vscode+Vue3/Vuex4/Vue-Router4UI组件库：Vant3.x(有赞移动端vue3.0组件库)弹层组件：V3Popup（基于vue3自定义弹层组件）"}, {"id": "6844904020633452558", "title": "基于Vue+VueRouter+Vuex+Axios的用户登录态路由级和接口级拦截的原理与实现", "desc": "前后端分离开发、独立部署，为前端的开发人员提供了极大的便利，同时也带来了新的挑战。 接下来胡哥就给小伙伴分享下在实际项目中的基于Vue+VueRouter+Vuex+Axios的用户登录态路由级和接口级拦截的原理与实现。"}, {"id": "6981246709414395917", "title": "VUE3（十一）自定义组件子父传值", "desc": "在创建项目的时候，官方给出的页面，其实就给出了一个自定义的组件helloworld，里边包含了父传子传值，VUEX的使用，计算属性computed使用，方法的定义以及自定义组件的使用。 计算属性com"}, {"id": "6929655390950916103", "title": "Vue3组件（二）做一个百变input组件", "desc": "先整理一下 input 的 type 都提供了哪些类型。 原：HTML5之前的类型。 新：HTML5提供的新的类型。 具体使用方式下面说。 准备工作做好了，我们开始做组件。 这个比较简单，就是把 input 具有的属性都给绑定上。 这里要感谢vue的数据绑定功能，没有设置的属性…"}, {"id": "6932273982091558919", "title": "我用开源工具给女朋友写道歉信！", "desc": "又是一个可乐配赘婿的晚上，我和女朋友舒服的窝在沙发里，一边看爽剧一边傻笑。 其实，我并不太喜欢看这种剧，但是为了陪女朋友，我还是乐此不疲。可能因为长期996，我的脑子已经坏掉了。 说完我就后悔了，真是嘴欠。 我就知道，我女朋友又把一件事说成另外一件事了，当然，她只是犯了全天下女…"}, {"id": "6997036958073487397", "title": "vue中虚拟DOM", "desc": "DOM(Document Object Model文档对象模型) 是 W3C（万维网联盟）定义的访问 HTML 和 XML"}, {"id": "6844903879205715981", "title": "vue打包后vendor.js文件过大解决方案", "desc": "将productionSourceMap的属性设置为false即可。"}, {"id": "6858174634019192845", "title": "Vue — 详解mixins混入使用", "desc": "前言当我们的项目越来越大，我们会发现组件之间可能存在很多相似的功能，你在一遍又一遍的复制粘贴相同的代码段（data，method，watch、mounted等），如果我们在每个组件中去重复定义这些属性"}, {"id": "6844904112539058189", "title": "Vuejs+ElementUI实现可配置的动态表单配置", "desc": "实现目标：将后台管理系统中的表单部分重新渲染实现成可配置的（通过数据库配置），动态的。需要支持系统中的所有附带搜索项的页面（如输入框、下拉框、日期、单选框等） 将搜索、重置、收起功能放在一个组件DynamicForm内，将搜索项放在另一个组件DynamicFormItem。此处…"}, {"id": "6844903846414647303", "title": "Vue+Express全栈购物商城", "desc": "基于Vue和Express框架写的一个全栈购物商城，记录项目过程中遇到的一些问题以及经验和技巧。 这个分支版本是一两年前的，基于Vue-CLI2.0写的，数据请求是Mock，纯前端的项目。 这个分支版本是基于Vue-CLI3.0的，将脚手架从2.0迁移升级到了3.0，遇到的一些…"}, {"id": "6846687587667542024", "title": "关于vue3你需要知道的事", "desc": "1. 写在前面的话 vue3在今年内应该就会推出，尤大之前也针对vue3的设计和api给出了RFC和最新征求意见稿。本人阅读后总结了一些个人心得，希望对大家有用。 2. Vue3 Function-based API RFC vue2在近几年不太长的生命周期内，经历了大小各种项…"}, {"id": "6889305025297088520", "title": "【译】速览Vue3.0中的 proxy", "desc": "Proxy 可以理解为，在操作对象时要先经过一层“拦截器”。访问对象时，都必须先经过这一层拦截。这就意味着你可以在拦截里做各种骚操作。 让我们先看看怎么使用 Proxy. 以上例子，只是展示了 proxy 怎么操作对象属性，而他的核心是为了扩展对象的能力。 当你把一个普通的 J…"}, {"id": "6844903636938522638", "title": "vue中extend，mixins，extends，components,install的几个操作", "desc": "前言1.Vue.extend1.使用vue构造器,创建一个子类,参数是包含组件选项的对象;2.是全局的结论:Vue.extend实际是创建一个构造器,对应的初始化构造器,并将其挂载到标签上github"}, {"id": "6844904080159014920", "title": "如何实现一个全局复用的自定义组件？", "desc": "组件在vue开发中是必不可少的，如果一个组件在多个页面中都需要使用，那么每次都要引入，注册，使用，还是有点繁琐的。所以对那些要频繁使用的我们要实现一次引入，全局使用。 本文就带你了解自定义一个全局复用的组件(Toast)，在main.js中引用组件，以后只要在需要的页面上写一句…"}, {"id": "6981625996965314567", "title": "如何巧妙的实现系统的主题切换", "desc": "前言 前几天不是一百周年呢，看了看一百周年庆典，人的思绪回到了那篇被鲜血染红的年代，激情瞬间澎湃。然后，打开很多软件都是鲜红的一片，我又想起了之前接触的系统，想了想，还是想对之前主题的实现思路做个总结"}, {"id": "6974598287839985672", "title": "Vue项目性能优化", "desc": "Vue-CLI 性能优化 是否有首屏加载时间过长的问题.? 为什么会出现这样的问题.? 解决方法是什么.? 下面方法都可以大程度的优化项目结构, 进而减少首屏加载的时间"}, {"id": "6844904181942190093", "title": "从零开始在vue-cli4配置自适应vw布局", "desc": "简介viewportWidth也是vw布局从配置上来说比rem布局的配置要简洁了很多不需要配置安装lib包也不需要增加一个rem.js文件简称拎包使用安装包或者配置移动端在vue.config.js中"}, {"id": "7002922520902893599", "title": "Vue3中的slot", "desc": "小编今天和大家一起探讨Vue中的插槽(slot)的概念，熟悉Vue的小伙伴都知道父子组件之间可以相互传递数据，"}, {"id": "6966887481438371853", "title": "⚡️ 懒癌福利！一种全新的路由组织方式 —— 基于 vite 的插件介绍", "desc": "以往我们在基于 Vue 或者 react 做页面开发时，往往需要通过安装 vue-router 或者 react-router ，然后手动编写其路由组织文件来完成文件对路由结构系统的映射......"}, {"id": "6981809588429389832", "title": "Vue.$nextTick结合Echarts详解面试考点", "desc": "这是我参与新手入门的第1篇文章 前言 不知道有没有同学和我一样，没有经历过项目的问题很难印象深刻地记住并在遇到问题时适时运用。所以今天就以一个demo举例说明nextTick在echarts图表场景下"}, {"id": "6980184139488198664", "title": "vue打包上线", "desc": "打包之前的路由模式 总的代码： **目标**配置打包之前的路由模式 hash模式 ： #后面是路由路径，特点是前端访问，#后面的变化不会经过服务器 history模式：正常的/访问模式，特点是后端访问"}, {"id": "6875987872886259719", "title": "给elementui的table组件加上虚拟列表", "desc": "关于什么是虚拟列表，这里不赘述。elementui的table组件本身并不支持虚拟列表功能，在对付上100条数据数十列的情况下渲染就很慢，对列表的各种操作都慢，比如点个编辑打开弹窗等等，肉眼可见的延迟。数据越多这样的卡顿越是明显。最近在做的项目就有用到elementui，80%…"}, {"id": "6844903745742979079", "title": "前端如何配合后端完成RBAC权限控制", "desc": "关联上一篇Vue 前端应用实现RBAC权限控制的一种方式，这篇写的比较懒，哈哈，还是谢谢支持的朋友。 承蒙李杨的邀请，就写了这篇文章，平时写的不多，失误之处，请大家多多包涵。 我认为前后端是相辅相成的，所以要做好前端的权限控制，如果能提前了解后端的权限分配规则和数据结构是能够更…"}, {"id": "6974405039490400263", "title": "仿Codepen在线前端代码编译器项目开发记录", "desc": "OnlineCodeEditor是笔者基于Vue3 + Typescript开发的一个类似Codepen的开源项目。支持在线实时预览编写的前端代码，界面基于响应式设计，兼容手机端。"}, {"id": "6844903683566600206", "title": "精读《12 个评估 JS 库你需要关心的事》", "desc": "特性。 稳定性。 性能。 包生态。 社区。 学习曲线。 文档。 工具。 发展历史。 团队。 兼容性。 趋势。 下面总结一下作者的观点。 当你调研一个 JS 库，功能当然是最重要的，就好比 React 的用于开发 UI 界面非常方便，这是流行起来的一部分因素。 但同时 React…"}, {"id": "6844903940648075278", "title": "深入剖析Vue源码 - Vue动态组件的概念，你会乱吗？", "desc": "动态组件我相信大部分在开发的过程中都会用到，当我们需要在不同的组件之间进行状态切换时，动态组件可以很好的满足我们的需求，其中的核心是component标签和is属性的使用。 例子是一个动态组件的基本使用场景，当点击按钮时，视图根据this.chooseTabs值在组件child…"}, {"id": "6844904062031249421", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（五）", "desc": "组件化和逻辑复用能帮助写出简洁易懂的代码，随着应用越写越复杂，我们有必要把视图层中重复的逻辑抽成组件，以求在多个页面中复用；同时对于 Vuex 端，Store 中的逻辑也会越来越臃肿，我们有必要使用 Vuex 提供的 Getters 来复用本地数据获取逻辑。在这篇教程中，我们将…"}, {"id": "6844904081085956109", "title": "vue封装通用的通知组件alert", "desc": "继上次搭完一个组件库的基本框架, 今天再来实现一个通用组件(alert)的开发, 使用方式与普通组件不一样,它是函数式调用(例如: this.$alert('test')), 与之类似的组件还有loding、message这些通用的函数式组件. 实现方法也与之类似, 这里就来实…"}, {"id": "6992587983207530504", "title": "electron + vue3 + ts 实现桌面小工具第三天", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 electron + vue3 + ts 实现桌面小工具第三天 前言 今天我们要做的事情是把框架基本搭建起来，一些基础代码写一写，详尽的基础"}, {"id": "6977575628904087582", "title": "video 标签 在vue中的踩坑", "desc": "当video中的视频源存放在source中时，浏览器渲染之后会自动去获取地址，即便地址改变，浏览器也不会再去获取地址。为啥？todo 导致的问题：在页面（有video的页面）切换页面，再切换回来，视频不会重新播放。"}, {"id": "6995148051312541732", "title": "Vue3-组合式Api和响应式原理解读（二）_ref和reactive理解", "desc": "ref的定义 ref的使用 下方代码作为参考 如之前所说,setup是所有组合式API的入口。。。。"}, {"id": "6995147964427534373", "title": "vue本地模拟服务器请求mock数据", "desc": "简单的实现了不用依赖后台接口的mock数据请求。资源放在public文件夹，方便修改和替换。打包生产后，可以直接放静态服务器运行。"}, {"id": "6844904190477598728", "title": "vue3.0项目创建指南", "desc": "vue3.0已经发布很久了，作为一个靠vue吃饭的程序员，真心表示学不动了。。。前几天看了一些关于3.0的视频，今天总结一下vue3.0项目创建的几种方式，以及demo。 直接引入vue-next，要注意vue-cli的版本，如果版本低于4.0则要升级vue脚手架：npm in…"}, {"id": "7002238017628798983", "title": "vue3.0中的响应式实现原理-2", "desc": "8月更文挑战 使用Proxy模拟实现Vue 3.0的响应式系统。代码如下： Reflect是一个内置对象，它提供了可拦截JavaScript操作的方法"}, {"id": "6844903496232206349", "title": "VirtualDOM与diff(Vue实现)", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6949335303081443335", "title": "全面了解Vue3的 ref 以及相关函数和计算属性", "desc": "基础类型的响应性 —— ref在vue3里面，我们可以通过 reactive 来实现引用类型的响应性，那么基础类型的响应性如何来实现呢？可能你会想到这样来实现：这么做确实可以实现，而且也很像 ref "}, {"id": "6956842033617043493", "title": "Vue3.0初体验(2) | 小册免费学", "desc": "前言 上篇我们说到了Vue3.0的组合Api，现在我们来了解下setup。 什么是setup setup是Vue3.0新增的方法,而在Vue2.0中的watch等都变成hooks从Vue中解析出来 s"}, {"id": "6959421748416774180", "title": "Vue3 源码解析（二）：AST解析器", "desc": "上一篇文章中，我们从 packges/vue/src/index.ts 的入口开始，了解了一个 Vue 对象的编译流程，在文中我们提到 baseCompile 函数在执行过程中会生成 AST 抽象语法"}, {"id": "6844903510719348749", "title": "vue router 如何使用params query传参，以及有什么区别", "desc": "传参是前端经常需要用的一个操作，很多场景都会需要用到上个页面的参数，本文将会详细介绍vue router 是如何进行传参的，以及一些小细节问题。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 query：/router1?id=123 ,/rou…"}, {"id": "6844903663555575815", "title": "Vue项目中最简单的使用集成UEditor方式，含图片上传", "desc": "封面是UEditor的 百度指数 折线图。虽然今天已经是 2018 年，且优秀的富文本编辑器层出不穷（包括移动端），但从图中可以看出UEditor仍然维持着较高的搜索热度。而不少公司和个人也仍然在项目中使用UEditor。目前，UEditor官网的最后一次版本更新是 1.4.3…"}, {"id": "6988890446772568101", "title": "vue源码深入浅出系列-vue实例挂载的实现2", "desc": "mount源码分析 Vue 中我们是通过 $mount 实例方法去挂载 vm 的，$mount 方法在多个文件中都有定义，如 src/platform/web/entry-runtime-with-c"}, {"id": "6976209276364652558", "title": "如何在 Vue 的计算属性中传递参数", "desc": "在 Vue 中，计算属性（computed ）是从其他响应式属性派生的属性，是用于自动监听响应式属性的变化，从而动态计算返回值。计算属性（computed ）通常是一个没有参数的函数。"}, {"id": "6994750317791313957", "title": "vue 中实现商城的楼层效果", "desc": "楼层效果在购物网站比较常见。 典型的楼层效果，需要照顾两个到需求： 点击某个楼层，则页面滚动到相对应的位置 页面滚动到某个位置，对。。。"}, {"id": "6997053372507521055", "title": "从initProps开始理解vue2的响应式原理", "desc": "从initProps开始理解vue2的响应式原理 在vue2中初始化一个vue实例会先调用this._init(options)方法(代码位于src/core/instance/index.js)，t"}, {"id": "6897101782900703245", "title": "vue-element-admin总结", "desc": "1. 先在/src/api 新建xxx.js，例如bind.js 2. 引入 3. 使用 1. /src/utils/request.js 1. ./store/index.js 2.0. 在/store/modules/新建xxx.js，例如，bind.js 2.1. bin…"}, {"id": "6893763807899271181", "title": "深入了解 Vue3 响应式原理", "desc": "这些知识可以看一下阮一峰老师的《ES6 入门教程》。 阅读源码，建议先过一遍该模块下的 API，了解一下有哪些功能。然后再看一遍相关的单元测试，单元测试一般会把所有的功能细节都测一边。对源码的功能有所了解后，再去阅读源码的细节，效果更好。 handler，包含捕捉器（trap）…"}, {"id": "6988422534781730853", "title": "vue 系列 -- vuex 的学习记录1", "desc": "vuex 是什么 官方文档： vuex 要解决什么问题 官方文档： 也就是说，开发大型单页应用的时候使用 vuex 能够更好地解决问题 用 vue 去类比 vuex 我们用 vue 去类比 vuex "}, {"id": "6844903599474999309", "title": "饿了么购物车动画", "desc": "之前用饿了么印象最深刻的是联动菜单和小球飞入购物车动画，所以想看看别人是怎么实现的，但是看了很多仿饿了么的demo都是实现了一个完整的大的项目，要找到那个小模块很麻烦，所以自己将联动菜单和动画提取出来写了一个demo，方便学习。 1. 联动菜单 该元素定位表现为在跨越特定阈值前…"}, {"id": "6876775762662424590", "title": "vue3和vue2在API使用上有哪些差异？", "desc": "文章内容有点多，加不了样式了，大家将就看一下。 上周，vue3 one piece正式版发布了（话说尤大这个用动漫名定义版本号的习俗什么时候轮到火影啊啊啊），在给尤大疯狂打call的同时，也是咱们开始爆肝学习的时候了。 我对比了vue2和vue3，在这里列举出使用方法，功能或者…"}, {"id": "6938345842508038158", "title": "趁storybook还没支持vue3 来撸个自己的md-loader", "desc": "简述：为了保证各人群的观感，本文一共分三大块，分别对应了详细的分析+开发过程，只有代码版本以及避坑大赏，可以自行跳转各取所需(毕竟详细版本实在太长了)。 element3作为组件库，其核心作用就是让用户可以根据文档正确使用组件，所以文档自然也应是重点之一。 既然是文档，那么作为…"}, {"id": "6918314093498040333", "title": "前端工程化-自动生成页面", "desc": "在views文件夹下面新建一个文件夹，用来存放新页面的.vue文件。 需要在routes.js文件里面新添加一个路由。 按照上述操作以后，才可以正常访问新添加的页面，之后才开始对新页面进行正常开发。但是这样的机械化步骤我们完全可以用代码帮我们执行，更进一步，对于一些简单的页面，…"}, {"id": "7000923771565539335", "title": "Vue 路由跳转的时候遇到一些图片CSS不加载 解决方案", "desc": "思路分析： 通常在我们写js 的代码的时候都会加入 window.onload() 再onload 函数中写代码，这样做的意义就是能够在文档加载完成之后才执行js 代码。 而在用 jquery 时， "}, {"id": "6993615265242021896", "title": "vuex从入门到实战多功能TodoList", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 1.vuex的核心盖概念 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应"}, {"id": "6844903555837493256", "title": "深入理解vue中的slot与slot-scope", "desc": "vue中关于插槽的文档说明很短，语言又写的很凝练，再加上其和methods，data，computed等常用选项在使用频率、使用先后上的差别，这就有可能造成初次接触插槽的开发者容易产生“算了吧，回头再学，反正已经可以写基础组件了”的想法，于是就关闭了vue的说明文档。 实际上，…"}, {"id": "6844903861572861959", "title": "[现场实录] VueConf 2019 尤雨溪演讲总结", "desc": "Chrome DevTools 有约 90 万的周活用户，React 相比有 160 万。Evan 推荐用 Chrome DevTools 来预测 Vue 的项目的真实开发者数据。Vue 有全球化的影响力，在非常多的国家有相应的活动，可以通过 https://events.vu…"}, {"id": "6919748637908008967", "title": "看完这篇文章，Vue3一点也不难！", "desc": "感觉时间好快啊，也有一个月多没更文了。这图片还是2020年产的呢~ 整理了一下这段日子里学习的Vue3，我想之后Vue3会成为一种趋势。那就捉急学起来吧~ 这个api的调用时机：创建组件实例，然后初始化 props ，紧接着就调用setup 函数。从生命周期钩子的视角来看，它会…"}, {"id": "7000664887290495013", "title": "Component inside <Transition> renders non-element root node that cannot be ani..", "desc": "问题现象，如下图所示，左侧“发版配置”菜单对应的路由是/release-config/index，在这个路径上刷新页面时候 右侧的内容（组件）是可以加载出来的。 但是当点击左侧的其他菜单，比如“消息通"}, {"id": "6978468999336034335", "title": "Electron+Vue3 MAC 版日历开发记录(27)——FullCalendar 主题样式统一", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6999888515609690149", "title": "Vue中的钩子函数", "desc": "这是我参与8月更文挑战的第24 天，活动详情查看：8月更文挑战 每个Vue实例在被创建之前都要经过一系列的初始化过程,这个过程就是vue的生命周期，同时在这个过程中也会运行一些叫做生命周期钩子的函数，"}, {"id": "6844903636808499214", "title": "手把手教你封装 Vue 组件，并使用 npm 发布", "desc": "本文主要记录一下如何基于 Vue 开发组件，并在 npm 上发布。废话不多说，进入正题 好了，到这里准备工作做好了，我们可以开始开发组件了，接着上面的例子，下面开始开发一个 switch 组件。 \b写的比较简单，主要还是提供思路。用习惯了开源的组件自己总得了解一下嘛，有的时候在…"}, {"id": "6883398472368652296", "title": "Vue3源码解读(三)-patch", "desc": "大家好，我是德莱问，上一篇，我们讲到了first render的部分，对上篇文章有疑问的同学，欢迎留言，我们一起探讨，一起学习；本篇文章将会着重讲解Vue3中数据发生更新时所做的事情。 iPhone12发布了，看了下价格，我觉得我的iPhone7 plus还能再用一年。 web…"}, {"id": "6994631755667865608", "title": "浅谈vue数据劫持(2)", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 前言: 上一篇讲解了defineProperty方法今天来讲讲proxy vue3中数据劫持使用了proxy"}, {"id": "6995206206138613773", "title": "Vue中 使用 WebSocket", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 1. WebSocket 简介 前端和后端的交互模式最常见的就是：前端发数据请求，从后端拿到数据后展示到页面中。 如果前端不做操作，后端不"}, {"id": "7005899967420170270", "title": "关于 vue 部署到github后图片无法正常显示的问题", "desc": "解决了我用 Vue 做的项目部署后，静态图片因为部署后路径错误导致的图片不显示（404错误）的问题。"}, {"id": "7003593346329346056", "title": " vue可视化开发工具mxdev 0.4版更新", "desc": "引言：        Vue可视化开发工具，编辑器，平台，IDE，快速设计开发工具mxdev 0.4版更新        助力企业快速高质量开发，小白上手，老鸟摸鱼，效率提升的阶梯就是mxdev。  "}, {"id": "6959464199126777893", "title": "使用vue3打造一个物料库", "desc": "为什么要做物料库？ 我们写过很多登录页面。而每个登录页面除了一些背景图和颜色外，主体布局几乎是一致的，就那么几种类型。如果有个地方能帮我管理登录页面的代码，那么下次我再写登录的时候就可以直接把界面生成"}, {"id": "6850037269227634702", "title": "手把手从零开始---封装一个vue视频播放器组件", "desc": "现在，在网页上播放视频已经越来越流行，但是网上的资料鱼龙混杂，很难找到自己想要的，今天小编就自己的亲身开发体验，手把手从零开始---封装一个vue视频播放器组件。 经过在网上不断的查阅之后，我最终选择了video.js这个轮子，作为我的播放器。好，现在轮子找好了，乍一看，天，好…"}, {"id": "6974413192420130852", "title": "Electron+Vue3 MAC 版日历开发记录(16)——全面使用Naive UI 重构 Setting 页面", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844904085808742407", "title": "从零到一教你基于vue开发一个组件库", "desc": "Vue是一套用于构建用户界面的渐进式框架,目前有越来越多的开发者在学习和使用.在笔者写完 从0到1教你搭建前端团队的组件系统 之后很多朋友希望了解一下如何搭建基于vue的组件系统,所以作为这篇文章的补充,本文来总结一下如何搭建基于vue的组件库. 一步步搭建一个组件库并发布到n…"}, {"id": "6967024166118080520", "title": "VUE3学习第三天 学以致用 ----todolist 需求开发（二）", "desc": "承接昨天编辑todo，接下来切换代办事项状态，对todolist进行完成，和未完成状态进行筛选！ 切换代办事项状态 这件事情还是比较麻烦，分好几个子任务 分析： 第一个子任务，点击左上角的折线（che"}, {"id": "6999614064955506718", "title": "Vue 常用修饰符的使用方法", "desc": "Vue 提供了一些修饰符, 使得编码的时候更方便, 在此整理一些项目中常用的使用方法 .trim 去掉 value 的首尾空格"}, {"id": "6997690882954625038", "title": "Vue3.0源码解析「reactive」篇 — 2.reactive functions 响应式入口", "desc": "reactive reactive用于返回一个普通响应式代理(非只读或者禁止响应式代理)。 reactive 代码分析的入口就从 vue 提供的 reactive函数开始，先来看看 vue 官方的组合"}, {"id": "6940555448198103070", "title": " Vue 魔法师 —— 重构“布局”", "desc": "虽然这些其实也并不是一些什么大不了的点，但是由于受到 NuxtJS 的启发，所以咱们决定进行 breaking change，改变这一现状。 你可以定义【布局】为组件的一个【属性】，而不是设置一个个布局父组件到你的应用中。 你可以选择 Vue2+ 或 Vue3+，本篇都会作相应…"}, {"id": "6992041387080286215", "title": "Vue+ElementUI 搭建后台管理系统（实战系列一）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6999453258024484895", "title": "Vuex在uniapp中的使用", "desc": "三、Store的简单实用 1、State 单一状态树，定义应用状态的默认初始值，页面显示所需的数据从该对象中进行读取。 Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。它便作为一个“唯"}, {"id": "6844903598258651144", "title": "【大型干货】手拉手带你过一遍vue部分源码", "desc": "学会看package.json文件，就像你在使用MVVM去关注它的render一样。 既然$ npm run dev命令可以重新编译出vue.js文件，那么我们就从scripts中的dev开始看吧。 注意上面指令中的两个关键词scripts/config.js和web-full…"}, {"id": "7002904037569855519", "title": "项目问题解决", "desc": "简介 个人在工作用遇到的一些小问题，和比较好的方法（持续更新） element table 批量获取选择的行的数据（selection 勾选框） 第一种： 第二种： 方法内对数组进行赋值 下载文件 发"}, {"id": "7002994746612252703", "title": "Vue + Node + MongoDB 前后端分离搭建一款简约的个人博客系统", "desc": "一款用Vue+Node+MongoDB开发的简约个人博客系统 wallBlog，功能：文章、标签、搜索、留言。"}, {"id": "6941785036173606926", "title": "封装vue通用拖拽滑动分隔面板组件（Split）", "desc": "在vue工程中创建SplitPane组件，引入页面使用。 SplitPane组件由三部分组成：区域1，区域2，以及滑动器。添加这三个元素，并分别添加class名，注意.pane为区域1和区域2共用。 将容器设置为flex布局，区域2的flex属性设为1，则区域2会根据区域1的宽…"}, {"id": "6920645929187934216", "title": "Vue 组件通信的 8 种方式", "desc": "1. 父组件 向 子组件 传递值 2. 子组件 向父组件传递值 3. 父组件 通过 $refs / $children 来获取子组件值 4. 子组件 通过 $parent 来获取父组件实例的属性和方法 5. $attrs 和 $listeners 获取父组件实例属性和方法(组件…"}, {"id": "6972932151805231111", "title": "模拟实现Vue3初始化流程", "desc": "文章实现了Vue3初始化整体流程~实现的API有createApp、mount、compile、createRenderer等等！"}, {"id": "6984222376108130311", "title": "十分钟 带你强势入门 vue3", "desc": "十分钟 带你强势入门 vue3 案例效果图 vue3 介绍 自从去年v3推出以来，发现我不会 vue3 都没有办法和周边朋友愉快聊天了"}, {"id": "6985458176749469733", "title": "Vue-Jest 自动化测试基础配置", "desc": "目前开发大型应用，测试是一个非常重要的环节，而在 Vue 项目中做单元测试可以用 Jest，Jest 是 facebook 推出的一款测试框架，集成了 Mocha, chai, jsdom, sino"}, {"id": "6844904047011430408", "title": "如何实现最真实的web打印", "desc": "公司组织了体检，在医院发现可以使用身份证快捷打印体检单，觉得很方便，但仔细一看，打印效果极差。 注：如直接调用Ctrl + P，则是打印当前的视口，可以选择打印机及打印机纸张，这显然不满足业务要求；若调用window.print()，则只能将css写在html上一起传到打印机，…"}, {"id": "6997664107230937118", "title": "vue router 根据路由区分用户权限并生成动态侧边栏", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 背景 在管理后台系统中，vue-router 往往要承担更多的事情。 因为在管理后台，一个非常重要也非常常见的功能，就是用户权限的区分。一"}, {"id": "6884138429181870093", "title": "坚持造轮子第一天 - 模板引擎", "desc": "一天造一个轮子，干就完了。 为了实现视图与业务逻辑的分离，无论MVP、MVVM、MVC那个V都会使用模板引擎。线面我们说说模板引擎的要求。 其实就是 将{{ }}中的值根据替换为表达式的结果。"}, {"id": "6984445762998370335", "title": "基于Vue实现自定义的图标组件", "desc": "在项目开发中，使用图标的方式有很多种，可以在iconfont上面找到合适的图标，通过http或者直接下载使用，这里我分享一种通过实现自定义组件的方式引入图标。"}, {"id": "6844903842375532558", "title": "从今天开始，拿起VuePress打造属于自己的专属博客", "desc": "在默认主题下，导航栏需要在themeConfig属性上进行配置nav，导航栏的两个重要属性为text和link，其中text指明了导航的文字内容，link指明了导航的链接。 第二种： 单个禁用导航栏，在每一个页面(.md文件)最顶部，配置navbar属性为false，此种方式禁…"}, {"id": "6988527649790361614", "title": "vue源码深入浅出系列-vue实例挂载的实现1", "desc": "数据驱动 相信大家都知道，Vue.js 一个核心思想是数据驱动。所谓数据驱动，是指视图是由数据驱动生成的，我们对视图的修改，不会直接操作 DOM，而是通过修改数据。它相比我们传统的前端开发，如使用 j"}, {"id": "6844904176187605000", "title": "Vue 3教程（适用于Vue 2用户）", "desc": "Vue 3尚未正式发布，但是维护者已经发布了Beta版本，供我们的参与者尝试并提供反馈。 如果你想知道Vue 3的主要功能和主要变化是什么，那么我将在这篇文章中重点介绍一下，告诉你使用Vue 3 beta 9创建一个简单的应用程序。 我将介绍尽可能多的新内容，包括fragmen…"}, {"id": "6844904110303477773", "title": "这 10 个技巧让你成为一个更好的 Vue 开发者", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 我比较喜欢使用 Vue 来开发，所以有时会深入研究其功能和特性。 通过这篇文章，向你们介绍十个很酷的窍门和技巧，以帮助大家成为更好的 Vue 开发者。 随着Vue 2.6的推出，已经引入了插槽的简写方式，之前简…"}, {"id": "6999843797333082143", "title": "vue子组件向父组件传值的两种方法", "desc": "一、子组件主动触发事件将数据传递给父组件 1、在子组件上绑定某个事件以及事件触发的函数子组件代码 事件在子组件中触发的函数： 在父组件中绑定触发事件： 父组件触发函数显示子组件传递的数据： 二、不需要"}, {"id": "6887709516616433677", "title": "Vue组件通信方式居然有这么多？你了解几种", "desc": "今天对vue组件通信方式进行一下总结，如写的有疏漏之处还请大家不吝赐教。 1. props/$emit props和$emit相信大家十分的熟悉了，这是我们最常用的vue通信方式。 props：props可以是数组或对象，用于接收来自父组件通过v-bind传递的数据。当prop…"}, {"id": "7007711364693098503", "title": "对Vue数据响应式的理解", "desc": "当一个物体能够对外界刺激作出反应，那么它就是响应式的。 示意图如下： 将vm.n的值改变，那么UI(data)中的n就会来响应 当把一个JS对象传入Vue实例作为data选项，Vue将遍历此对象所有的"}, {"id": "6997181966671937573", "title": "vue入门：vuex概括与使用", "desc": "本教程为入门教程，如有错误，请各位前端大佬指出。 1.什么是vuex  Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态"}, {"id": "7005493362304221215", "title": "log-tree", "desc": "vue入门项目，tree结构的组件。支持虚拟滚动优化，可以折叠和层级分布。可以了解tree的css布局方法"}, {"id": "6962867528909799454", "title": "Vue3能用到生产环境了吗？", "desc": "最近，有不少朋友问我：“十三，看你写了几个Vue3的项目，你觉得Vue3能用到生产环境了吗？”结合自己的想法和尤大直播说的话，给一点建议。"}, {"id": "6844904034663399437", "title": "吃透 Vue 项目开发实践｜16个方面深入前端工程化开发技巧《上》", "desc": "之前使用过 Vue 开发后台、中台项目，也做过移动端 H5，弄过一点小的前端架构。每做一个项目都会收获了不一样的经验和理解。下面我把这些点点滴滴的经验总结下来，做一个系列的文章分享和阶段性的总结。 自己手动规范 git 的提交原则或者团队统一制定。这个靠自觉，好习惯养成之后就没…"}, {"id": "6897030228867022856", "title": "快速使用Vue3最新的15个常用API", "desc": "那么在Vue3中，对外暴露了很多的API供开发者使用，我们可以根据自己的需求，将所需要的API从Vue中导入。例如 main.js 中的代码 provide ：向子组件以及子孙组件传递数据。接收两个参数，第一个参数是 key，即数据的名称；第二个参数为 value，即数据的值 …"}, {"id": "7000032012488671269", "title": "vue3如何封装一个在js中也能使用的全局组件？vue3的三种组件封装形式（导入式组件、全局组件、函数式组件），建议收藏！", "desc": "vue3的开发中应该有三种组件封装形式，分别是 最普通的导入式组件 全局组件（就类似于组件库antd的全局导入） 函数式组件（也就是能够在js代码中使用的组件，类似于this.$messag"}, {"id": "6874604408030789640", "title": "Vue 3.0 来了，我们该做些什么？", "desc": "想必 Vue3.0 发布这件事，大家都知道了。 装不知道，我是一只快乐的鸵鸟，我不知道 Vue 更新了，继续摸鱼爽歪歪。 为了下半年的 KPI，冲冲冲！把手头的 Vue 项目进行版本升级和重构。 让我总结的话，就只有两个比较重要的更新（我目前还没有完完整整的体验过新版本，有些地…"}, {"id": "6952643167715852319", "title": "Vue 源码解读（5）—— 全局 API", "desc": "目标 深入理解以下全局 API 的实现原理。 Vue.use Vue.mixin Vue.component Vue.filter Vue.directive VUe.extend Vue.set 等"}, {"id": "7000693155498557477", "title": "还你一个为所欲为的掘金抽奖", "desc": "寒暄 掘金的抽奖系统已经出来一段时间了，不知道大伙都抽中了什么呢，还是像我这样经历了绝望，看破红尘，存起来留给下一代。 这种抽奖场景在活动中很常见，为了更好的摸鱼，决定自己去写一个插件来解决重复劳动。"}, {"id": "6992313934912946206", "title": "vue实现滑块拖拽校验", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 定义骨架，写html和css html部分 实现滑动拖拽校验 1. 在mounted里面，根据滑块宽度计算可拖动最大宽度以及监听手指的触摸和"}, {"id": "7002007103850151966", "title": "在后台框架同质化的今天，我是如何思考并做出差异化的", "desc": "后台框架是一片大红海，那在后台框架同质化的今天，我是如何思考并做出差异化的，感兴趣的欢迎立马点击阅读"}, {"id": "6959115798841393160", "title": "手摸手教你用Vue3+Typescript+Rollup+Tailwinds打造插拔式的业务组件库", "desc": "前言: 随着前端业务的不断扩大,也造了一些的轮子或者面向业务二次封装的代码用在各个项目当中,为了提升团队开发效率,稳定开发质量,一个服务于业务的业务组件库必不可少~"}, {"id": "6867123749565497358", "title": "Vue3.0全家桶最全入门指南 - 3.x跟2.x的其他差异  (4/4)", "desc": "本系列文章目录Vue3.0全家桶最全入门指南-快速搭建(1/4)Vue3.0全家桶最全入门指南-vue3.0新特性(2/4)Vue3.0全家桶最全入门指南-vue-router@4.x和vuex@4."}, {"id": "6963048982079602696", "title": "Vue 源码解读（11）—— render helper", "desc": "在 Vue 编译器的基础上，进一步深入理解一个组件是如何通过这些运行时的工具方法（render helper）生成 VNode 的"}, {"id": "6991945706017652744", "title": "使用 Vite2+Vue3 渲染Markdown文档｜8月更文挑战", "desc": "大部分使用 Vite2 的开发者遇到的一个问题，就是文档里并没有相关支持 Markdown 的介绍，那么如果想要在 Vite 项目中支持 Markdown 引入并渲染，需要怎么操作？"}, {"id": "7004354982229065759", "title": "为什么 vue element ui的dialog需要用 sync 修饰 visible？（visible.sync）", "desc": "作为一个后端开发者，前端虽然也需要涉及，但是了解的不够多，最近在使用vue element ui的组件时，发现指定dialog是否展示的组件，需要在visible属性后添加 .sync。因此特意去查了"}, {"id": "7000387369773826056", "title": "Vue3从0到1组件开发-业务组件：emoji表情", "desc": "吧唧吧唧一下 即时通信(Instant Messaging,简称 IM )，在当下应该是部分网站都会选择的在线客服联系方式，尤其是以售卖线"}, {"id": "6968996649515515917", "title": "Vue3自定义指令-10个常见的实用指令，带详细讲解，快拿去收藏！！！", "desc": "Vue 在除了提供默认的十几个内置的指令外，还允许开发人员根据实际情况自定义指令，那我们在何时使用它呢？"}, {"id": "6989045239201693704", "title": "深入理解vue父子组件之从零开始Tree插件", "desc": "Tree树形控件在前端开发中必不可少，对于数据的展示现在网站大都采取树形展示。因为大数据全部展示出来对于用户来说是不友好的。今天我们自己手写一个Tree插件。"}, {"id": "6844904110848917511", "title": "Vue项目经验总结（持续更新中...）", "desc": "本文讲述了毕业实习和正式工作1年以来，使用Vue开发项目的一些个人经历和想法，仅是个人总结，如有不合理的地方，欢迎吐槽。以下是本文的大概内容。 一开始实习接触Vue的脚手架是VueCli2版本，学习的webpack配置也都Cli2的，后来公司使用的是Cli3，所以有一个学习和适…"}, {"id": "6993316433509744677", "title": "在vue+element-ui中，select选项值动态从后台获取，同时将选中值的id传给后台的方法", "desc": "哈喽大家好哇，欢迎来看大冰块的博客，今天我们来谈一个很常见的问题，就是选择select值的时候，获取选中值对应的id。"}, {"id": "6844903571041812488", "title": "此面试题版本落后-请勿观看", "desc": "在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。 ViewModel…"}, {"id": "6967152855824220196", "title": "组件封装必学之实现v-model语法糖", "desc": "本文将讲述如何在自定义的公用组件上实现 `v-model`,在实际项目的公共组件开发中有着很大的帮助！"}, {"id": "6844903648355418120", "title": "前端性能与异常上报", "desc": "对于后台开发来说，记录日志是一种非常常见的开发习惯，通常我们会使用try...catch代码块来主动捕获错误、对于每次接口调用，也会记录下每次接口调用的时间消耗，以便我们监控服务器接口性能，进行问题排查。 刚进公司时，在进行Node.js的接口开发时，我不太习惯每次排查问题都要…"}, {"id": "6965837907181436936", "title": "关于 Vue 我们需要知道的原理", "desc": "面试题篇 1.老生常谈之， MPA/SPA 的理解，优缺点是什么？ MPA 多页面应用。 构成：有多个页面 html 构成， 跳转方式：页面的跳转是从一个页面到另一个页面 刷新的方式：全页面刷新 页面"}, {"id": "6844904120499830792", "title": "2020年的12个Vue.js开发技巧和窍门", "desc": "我真的很喜欢使用Vue.js，每次使用框架时，我都会喜欢深入研究其功能和特性。通过这篇文章，我向你介绍了十个很酷的提示和技巧，你可能尚未意识到这些技巧和窍门，以帮助你成为更好的Vue开发人员。 随着Vue 2.6的推出，已经引入了插槽的简写方式，可用于事件（例如，@click …"}, {"id": "6844904100992155661", "title": "🔥 深度解析！Vue3 & React Hooks 新UI组件原理：Modal 弹窗", "desc": "在某个月黑风高的晚上...没剧刷的我无意想起以前处理的一些弹窗的坑。 然后又无意间刷到“Portal”，才知道Modal的实现还有如此妙的方式，顺而想着干脆把UI组件库的实现原理看完。 1. Modal弹窗的基本原理 我给弹窗类的定义是脱离固定的层级关系，不再受制于层叠上下文的…"}, {"id": "6874720017863147527", "title": "Vue 3 任意传送门——Teleport", "desc": "2020 年 9 月 18 号，尤大大发布了 Vue 3.0，代号 One Piece。同时中英文版本的文档相继出来，笔者也去通读了一遍，发现很多宝藏，其中有个新特性非常吸引我——Teleport （中文译为：传入，读着有点奇怪，本文统一以英文 Teleport 来讲） 如果用…"}, {"id": "6927215610552123406", "title": "『前端BUG』—— toFixed四舍五入的不准确性", "desc": "某天，客服告诉我，有客户投诉，说账单金额数据统计不对，同时测试也反馈在IE11浏览器上又是正确的。 经过排查发现是toFixed()引起的。 来看一下toFixed()在chrome、火狐、IE下的不同表现。 可以看到toFixed()的四舍五入在chrome、火狐上并不准确。…"}, {"id": "6884851623382745102", "title": "vue3为什么要用proxy替代defineProperty", "desc": "在这之前，我们得先了解下vue的核心理念mutable不管是vue2还是vue3，在实现的过程中，核心概念一直保持稳定，以可变数据源为核心的理念，来实现整个UI变动更新用最简单的讲法就是：初始化数据生"}, {"id": "6992134870516367390", "title": "从零编写属于自己的组件库(Vue版)之遮罩层", "desc": "开头 因为作者才开源了一个uni-app的组件库, 所以对编写组件还是有一点心得的。在此, 我会长期更新每个组件的编写, 各位可以在评论区评论想学习哪个组件, 后续都以文章的形式更新。当然只是自己的一"}, {"id": "6984604019272450085", "title": "Vue3+TS 优雅地使用状态管理", "desc": "Vue3的引入了新特性Composition Api，相比于Vue2的代码出现了重大变化，也为状态管理方式提供了新的途径。而Vue3中利用typescript的全面加持则可以让我们更优雅地使用状态管理"}, {"id": "6981734584568250376", "title": "(一)Vue3 + SSR + Vite", "desc": "不知不觉都已经2021年7月了，靓仔依然没用崛起，还在继续躺平。然而大佬们关于vue3的文章已经层出不穷了，而我却没有再项目中使用过。 闲来无事，突然想弄一个vue3+ssr+vite的demo，来做"}, {"id": "6955821415421444103", "title": "提高 DevTools 控制台调试的 12 种方法(译)", "desc": "还有一高级的用法还有很多人不知道，所以并未得到充分利用，更快，更容易和更有用的高级的用法，这些高级的用法可用于客户端脚本。"}, {"id": "6891824408281743367", "title": "一个业务小需求引发了我对封装的思考", "desc": "上文是前段时间写了一篇根据公司的业务需求我是如何封装组件，也算是对那段忙碌的工作一份小小的总结吧。有时在忙碌的开发过程之后，我们需要停下脚步去思考自己写的代码是否具有可读性？是否还可以再健壮一些？同时也要去总结业务，回过头来看看自己在业务的需求的基础上去设计的组件代码是否是合理…"}, {"id": "6844903837770203144", "title": "彻底揭秘keep-alive原理", "desc": "用户在某个列表页面选择筛选条件过滤出一份数据列表，由列表页面进入数据详情页面，再返回该列表页面，我们希望：列表页面可以保留用户的筛选（或选中）状态。keep-alive就是用来解决这种场景。当然keep-alive不仅仅是能够保存页面/组件的状态这么简单，它还可以避免组件反复创…"}, {"id": "6988051826058723364", "title": "Vue实现pdf在线预览、导出下载功能总结(后端返回流，pdf.js)", "desc": "先说这次的需求，需要在一个vue页面中的一部分实现预览pdf功能 一、全屏预览模式 先说直接全屏预览的，直接axios获取到数据，将流转为二进制文件， 可以window.open 也可以嵌入到a标签的"}, {"id": "6866656374407823368", "title": "分享一下我用VueCli创建项目以后都干了哪些准备工作", "desc": "最近工作很忙，迟迟没产出新文章，特来补上。虽说vue3已经正式版出现了（现在用最新的脚手架创建一个项目vue的版本就是3.0了），但是现在生态还没完善起来，掘金其他小伙伴已经做了很多vue3的分享，这边我就不做了，当然各位可以先去康康它👉（vue3）。今天的主要成员还是vue…"}, {"id": "6982189096697331720", "title": "了解Vue条件渲染的基本使用", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第8篇，关于条件渲染指令 ，一起来看看吧~~~~"}, {"id": "6977621088154943495", "title": "Vue 小型状态管理器 认识Vue.observable", "desc": "前言：每天多学一个知识点，就能少些一行代码，让项目更加轻量级。 随着项目组件的细化，经常性的遇到多组件之间状态共享的情况，之前可使用Vuex解决这类问题，不过参照Vuex官网介绍，如果应用不够大，为避"}, {"id": "6999271472665477150", "title": "小白轻松搭建vue项目", "desc": "从 0 到 1，步骤全齐，小白轻松搭建Vue项目，决无烦恼！不懂就问，不会就搜，经验从来不给任何人捷径！"}, {"id": "6844903818048569358", "title": "Vue-cli3 项目在安卓低版本系统和 IE 上白屏问题解决", "desc": "最近遇到一个问题，用 Vue 开发的项目在最近两年新出的安卓手机上没问题，在三四年前的旧手机上出现白屏问题。分析一下应该是安卓系统版本的原因，目前已知的是Android 6.0 以上都 OK，6.0 以下就不行了。 低版本安卓系统内置的 webview 不支持 ES6 语法等一…"}, {"id": "6854573208255856648", "title": "Element组件源码研究-Button", "desc": "为锻炼封装组件得能力，我打算研究Elment UI组件，学习人家的设计和代码。 本文的研究思路是通过阅读Element源码，然后自动动手一步一步编写组件，完善其对应功能。 第一个想研究的就是Button组件，是我们最常用也最熟悉的，对标官方文档中介绍的Button特性，我们一个…"}, {"id": "6979911783012122660", "title": "h函数为什么叫h？", "desc": "大白话，h函数就是用节点的描述（标签名、标签的其他自身信息、子元素）创建虚拟节点。 h函数的参数最多三个，但只有第一个是必传项，第二个参数和第三个都是可传项，所以内部对各种情况作了判断"}, {"id": "6917449999416557582", "title": "vue-vite浅析", "desc": "大家好，我是小雨小雨，致力于分享有趣的、实用的文章。 内容分为原创和翻译，如果有问题，欢迎随时评论或私信，很乐意和大家一起探讨，一起进步。 分享不易，希望能够得到大家的支持和关注。 vite出了好久了，也出了好多相关文章，我也想出，然后我就写了。:) 其中洋葱模型如果将next…"}, {"id": "6995152207687450654", "title": "Vue中v-model指令和.sync修饰符是如何实现父子组件之间数据绑定的呢？", "desc": "Vue的v-model指令和.sync修饰符都可以做到父子组件之间数据的双向绑定，那么它们都是如何实现的呢？又有什么区别呢？下面通过父子组件间相互传值来给大家讲解。"}, {"id": "6861919402872209416", "title": "vuecli实现移动端视频类webAPP-项目搭建", "desc": "在平时的前端开发中，我们更多的是完成螺丝钉的角色，即在公司的前端框架下，实现各种业务逻辑，Vue技术栈并不是难点所在，难点往往在于从 0 到 1 搭建一个完整的实践项目，以及项目开发过程中对于很多技术细节的再学习和处理，帮助读者具备开发和统筹一个完整项目的能力是此项目的目标，本…"}, {"id": "6844903580864888839", "title": "Vue封装一个简单轻量的上传文件组件", "desc": "项目中多出有上传文件的需求，使用现有的UI框架实现的过程中，不知道什么原因，总会有一些莫名其妙的bug。比如用某上传组件，明明注明（:multiple=\"false\"）,可实际上还是能多选，上传的时候依然发送了多个文件；又比如只要加上了（:file-list=\"fileList…"}, {"id": "6975475059435503653", "title": "Vue实现动态路由", "desc": "这是我参与更文挑战的第1天，活动详情查看：更文挑战 通常我们在vue项目中都是前端配置好路由的，但在一些项目中我们可能会遇到权限控制，这样我们就涉及到动态路由的设置了。 动态路由设置一般有两种： (1"}, {"id": "6997337223817330702", "title": "Vue.use优化全局组件注册", "desc": "1.作用: 它是Vue提供一个静态方法，用来向Vue注册插件(增强vue的功能) 文档地址: https://cn.vuejs.org/v2/api/#Vue-use 2.格式: Vue.use(ob"}, {"id": "6875133281138901005", "title": "🚩Vue源码——组件如何渲染成最终的DOM", "desc": "Vue有两个核心思想，一个是数据驱动，简单来说就是通过模板和数据渲染成最终的 DOM ，具体是如何实现在上一篇🚩Vue源码——模板和数据如何渲染成最终的DOM中详细地介绍过了。 另外一个是组件化，谓组件化，就是把一个页面拆分成多个组件，这些组件是独立的，可复用的，可嵌套的，等…"}, {"id": "6844904148979154952", "title": "记录一次基于jsPlumb流程图编辑器的开发过程", "desc": "接到项目需求后，发现没有做过相关项目，盘算着拖拽倒是没有问题，但是控件的连线好像挺复杂，所以先开始了一番搜索，希望有合适的轮子那最好不过了。看了这篇对比文章：超级好用的流程图js框架，也看了一个新出的轮子topology，选轮子的时候我习惯性去npm trends，找一些类似的…"}, {"id": "6975305584392273933", "title": "Vue-Router安装与使用", "desc": "这是我参与更文挑战的第19天，活动详情查看： 更文挑战 介绍 Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。 安装 1.在"}, {"id": "6844903720942059528", "title": "深度与广度，我们该如何选择？求高手指点", "desc": "先简单介绍一下自己 15年本科毕业 通信工程（和计算机属于兄弟专业吧） 毕业后通过关系，进入了某地级市的电信公司，工作一年后果断辞职，偷偷摸摸的就辞职了，还被父母骂了好几次，进入了前端领域，进入前端领域前自学了几个月，因为在电信上班真的是太闲了，跟我性格不太相符。 2016年8…"}, {"id": "6883646523834548232", "title": "vue+node.js手把手教你搭建一个直播平台（五） 接入用户相关接口", "desc": "在src/api/modules新建user.js文件。在src/api/index.js中引入user.js。 像用户相关信息的这种数据，可能会有很多个页面会用到，属于公共数据来着，总不能我们每次都要从数据库里面拉取我们想要数据吧，这样就会浪费很多不必要的资源，那可怎么办呢？…"}, {"id": "6954288182674325534", "title": "做个开源博客学习Vite2 + Vue3 （三）博客设计和代码设计", "desc": "项目搭建好了之后是不是可以编码了呢？ 等等不要着急，我们是不是应该先设计一下？设计一下博客的功能，以及编码方式。"}, {"id": "6975048928408371213", "title": "Vuejs 免重复打包在开发及生产环境下的接口URL配置", "desc": "Vue 免重复打包在开发及生产环境下的接口URL配置。工作中遇到了打包文件后需要手动修改接口基础 URL 的需求，避免URL更改后需要重复打包的麻烦，涉及到开发环境，生产环境等一些知识，在此总结"}, {"id": "6985349672709652488", "title": "使用Vite 创建 Vue 3.0 项目(最新体验)", "desc": "Vite 是一个面向现代浏览器的一个更轻、更快的 Web 应用开发工具。快来开启你的第一个Vite项目吧"}, {"id": "6967231299127885838", "title": "vue前进加载页面后退缓存数据记录运动位置 以及 vue destroy替代方案", "desc": "移动端 h5页面经常会遇到 ，希望用户从当前页面往下滚动一段距离后点击进入其他页面，然后返回当前页面，用户看到的应该还是点击进去前的位置，并且不需要重新刷新数据。 vue中可以使用 keep-aliv"}, {"id": "6987678959181758472", "title": "vite2 + vue2 + tsx + pinia开发todo-list实战总结分享", "desc": "尝试用vue3的语法开发vue2，希望平滑衔接vue3，将vue2加入到vite的生态贡献自己一份力~"}, {"id": "6890153359966371854", "title": "Vue3快速上手", "desc": "5、组件中同时存在两种写法时，当setup返回值中定义的方法和methods中的方法同名时，会抛出错误。 computed包装后的值，需要用 .value去取值，template中不需要使用.value。 一个不带 name 的 出口会带有隐含的名字“default”。"}, {"id": "6999270213938053150", "title": "vue实现全屏滚动", "desc": "文章正文第一句：本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 是什么 网页的一个页面占据一屏的宽高，多个页面上下或者左右拼接在"}, {"id": "6906134996575059976", "title": "Vue3组件通信总结", "desc": "最近在咱们社区看到一位大佬的这篇文章Vue组件通信方式及其应用场景总结，感觉对vue2的通信方式和应用场景总结的非常到位，所以向大佬salute😄。刚好最近在学习vue3，于是也思考总结一下在vue3中的组件通信的方式。 我们知道vue3的Composition Api是它几…"}, {"id": "6959458564012425252", "title": "Vue2迁移到Vue3.0.5,<srcipt setup>开发到部署避坑指南", "desc": "开始 Vue3出来也一段时间了，最近公司有个项目需要重构,用Vue3重构了一遍,开发体验上来讲个人觉得改变其实不是特别大,但是必须吹一下vite是真的快,在开发过程中遇到的问题也不少，特别是部署的时候"}, {"id": "6963931012191485982", "title": "【流莺书签】基础组件(Form,Input)", "desc": "流莺书签,一个用来收藏网站的项目 使用Vite+Vue3+Ts进行开发,具有书签、标签的增加,删除,修改,一键导入,导出配置,自动获取网站图标、标题等功能 你一定会喜欢的!"}, {"id": "6921945008136257550", "title": "Vue3源码（二）：从源码来看Vue3新特性", "desc": "上一篇文章《Vue3源码（一）》简单介绍了Vue3源码结构，也通过源码学习了解Vue3基础也是核心响应式。这一次咱们接着了解另一核心组件，学一学Vue3组件初始化及其渲染过程。如有不对之处、遗漏之处，还望指正、补充。 上次我们了解了 createApp(App) 的过程，通过闭…"}, {"id": "6844903598409646088", "title": "Vue 使用中的小技巧", "desc": "在vue的使用过程中会遇到各种场景，当普通使用时觉得没什么，但是或许优化一下可以更高效更优美的进行开发。下面有一些我在日常开发的时候用到的小技巧，在下将不定期更新~ 1. 多图表resize事件去中心化 这里使用了lodash的节流throttle函数，也可以自己实现，这篇文章…"}, {"id": "6990263672941576228", "title": "Vue3项目使用better-scroll实现滑动效果", "desc": "BetterScroll 日常有许多业务代码，会要求实现滚动功能，比如某东的商城 这样的效果不难，但是用原生的overflow:hidden实现不了灵动的效果，所以引入了一款插件better-scro"}, {"id": "6855129007668035591", "title": "Vue首次渲染过程", "desc": "2.判断是否有render选项,如果没有render选项,则会把模版template取出,把模版编译成render函数,接着调用mount方法,渲染DOM。 在_init方法中,最终调用了$mount,一共有两个$mount,第一个定义在entry-runtime-with-c…"}, {"id": "6976168053029470244", "title": "3x2 精读Vue官方文档 - 渲染函数 & JSX", "desc": "废话少说，直接上阅读总结后的干货！！！ 模板语法 模板语法的优点： 上手简单方便。 可对 VNode 进行优化。 当然，模板语法也存在一些局部的学习成本与心智负担，例如： scopeSlots 作用域"}, {"id": "6962002661268783117", "title": "从0到1开发一个简单的 eslint 插件", "desc": "1.eslint的配置 上图👆是eslint主要的配置，我们简单回顾下每个配置的背后包含的意义 1.1 parse 关于Espree可以参考下面这个例子 而常用的解析器还有包括以下几种 Esprima"}, {"id": "6844903549617307661", "title": "Electron-vue开发实战0——Electron-vue入门", "desc": "前段时间，我用electron-vue开发了一款跨平台（目前支持Mac和Windows）的免费开源的图床上传应用——PicGo，在开发过程中踩了不少的坑，不仅来自应用的业务逻辑本身，也来自electron本身。在开发这个应用过程中，我学了不少的东西。因为我也是从0开始学习ele…"}, {"id": "6844903882338861063", "title": "Vue 实现前端权限控制", "desc": "在用户登录成功的回调中将后台返回的token直接存储到localStorage，然后同步配置请求默认参数的形式将token取出放入headers中传给后台。代码如下： 当前项目中使用axios.interceptors.request.use设置发送请求前的拦截,直接将toke…"}, {"id": "6844904170227499016", "title": "Vue开发规范经验总结(部分)", "desc": "这样你便可以在任何地方使用该组件，使得该组件更易于重用和测试。 data数据具有数据层级结构，切勿过度扁平化或者嵌套层级过深，若是过度扁平化会导致数据命名空间冲突，参数传递和处理，若是层级嵌套过深也会导致vue数据劫持的时候递归层级过深，若是嵌套层级丧心病狂那种的，小心递归爆栈…"}, {"id": "6892577964458770445", "title": " 什么，lodash 防抖失效了？", "desc": "应某人要求被迫营业，望各位看官不要吝啬手中的赞-。- 这时才回头想起代码中的 debounce ...."}, {"id": "6844903607909744654", "title": "在vue中使用jsx语法", "desc": "JSX就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到<，JSX就当HTML解析，遇到{就当JavaScript解析. 想折腾一下呗,开玩笑.最开始是因为近期在学习react,在里面体验了一把jsx语法,发现也并没…"}, {"id": "6977750758758285320", "title": "Electron+Vue3 MAC 版日历开发记录(25)——theme设置", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "7001279902523588639", "title": "[Vue源码]--mixin与extend（逐行注释）", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 Vue.extend 案例分析 拓展一个组件，与mixins用法类似，只不过只能继承一个 继承时，extends的组件优先级更高，所以运行结"}, {"id": "6951540864787152927", "title": "用了很多动效，介绍 4个很 Nice 的 Vue 路由过渡动效！", "desc": "本文主要介绍 Vue3 路由过渡的基础知识，与Vue2的区别。 介绍 4 种用的最多的路由动效，可用于实战中。"}, {"id": "6982835728728211493", "title": "vue-next: effect", "desc": "vue-next: effect ，记录一下对于 effect 的一些理解，这里是 z7xisoo_溪"}, {"id": "6844903954606718989", "title": "聊聊h5中的媒体播放器（定制播放器播放控件）", "desc": "那么定制媒体播放控件就可以通过一些属性来控制媒体播放、暂停还是播放进度之类的。 通过play和pause事件我们可以控制媒体的播放和暂停，并通过一个变量感知音频是否在播放，通过这个变量我们就可以变换我们的播放和停止图标了。 通过timeupdate可以实时获取音频播放时的进度，…"}, {"id": "6844903688616542215", "title": "教你撸一个简单的Vue", "desc": "摘要：你会实现一个Vue吗?原文：JavaScript之实现一个简单的Vue地址：https://segmentfault.com/a/1190000016365102作者：wclimbFundebu"}, {"id": "6992962273262190600", "title": "《图解Vue3.0》- 第5节 模板语法-指令", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 指令（Directives）是vue模板中最常用的一项功能，它带有前缀v-。指令的主要职责就是当其表达式的值改变时，相应地将某些行为应用到D"}, {"id": "6992946677564833800", "title": "第二讲 前端页面开发-Vue2版本", "desc": "第二讲 前端页面开发-Vue2版本 1、前序准备 重要：请先浏览jQuery版本的教程 在 jQuery 版本中我们已经完成了基本的静态页面，所以直接拿来改造即可，当然，为了方便开发，我已经将基础代码"}, {"id": "6844903842828533767", "title": "论如何监听一个对象某个属性的变化", "desc": "本文分为入门和进阶两部分，建议有经验的读者直接阅读进阶部分。 如何去通过诸如o.name的字符串访问到vm.o.name呢? vm['o.name']当然是不行的，需要写成vm['o']['name']这样的形式。 也就是说subject用来维护依赖列表, 每个依赖都是一个ob…"}, {"id": "6901603817499688967", "title": "【中台】靓仔请留步，跟我一起撸中后台啊~（系列篇一: Demo）", "desc": "什么是微前端 优点是什么？ 微前端架构具备以下几个核心价值： 技术栈无关 主框架不限制接入的技术栈，微应用具备完全自主权 独立开发、独立部署 微应用仓库独立，前后端可独立开发，部署完成后主框架完成同步"}, {"id": "6844903554109407245", "title": "ios微信下vue项目组件切换并自动播放音频的解决方案", "desc": "最近在做一个英语答题项目 , 项目需求是通过答题取的成绩 , 答题的题型是分为 , 听音选图 , 看图选词 , 和填空题 . 项目总共分为了3个页面 , 开始页 ,答题页 和结束页面 ,答题页关于每种题型 , 我做了相应的组件 , 每次切换题目的时候 ,显示对应的的组件 , 要…"}, {"id": "6844903846775357453", "title": "从源码看 Vue 中的 Mixin", "desc": "最近在做项目的时候碰到了一个奇怪的问题，通过 Vue.mixin 方法注入到 Vue 实例的一个方法不起作用了，后来经过仔细排查发现这个实例自己实现了一个同名方法，导致了 Vue.mixin 注入方法的失效。后来查阅资料发现 Vue.mixin 注入到实例的 methods 方…"}, {"id": "6969096572969680927", "title": "Vue3学习第四天", "desc": "这是我参与更文挑战的第1天，活动详情查看：更文挑战 条件渲染 v-if 当show为true时,控制台显示结果: 当show为false时,控制台显示结果: 我们发现v-if为true时,对应的dom"}, {"id": "6934658088523792391", "title": "33.1 Vue入门-完整版vue和不完整vue的区别 ", "desc": "vue完整版有compile, 不完整版没有, 所以不完整版大小会少40%. 完整版可以通过html, template来写文件, 而不完整版, 只能通过h函数来写."}, {"id": "6914558721448214536", "title": "vue2核心原理(简易)-watch笔记", "desc": "前言本章项目地址watch中每个属性都会new一个用户watcher(newWatcher)在数据初始化得时候开始newWatcher,Dep.target指向此时的用户watcher,此时该属性中的"}, {"id": "6992922537302687757", "title": "浅析Vue数据响应式", "desc": "Vue 响应式原理是怎么实现的？ 答： 响应式的核心是通过 Object.defineProperty 拦截对数据的访问和设置 响应式的数据分为两类： 对象，循环遍历对象的所有属性，为每个属性设置 g"}, {"id": "6844904047196143624", "title": "核心版vue-router, 仅仅只需80行代码", "desc": "使用一个vue-router的正确姿态. 最简单的是通过cli安装一个vue-router插件, 会自动的修改我们项目的代码, 正确的使用vue-router. 一条命令搞定. 正确的姿态. 新建一个路由配置文件. 根组件, 挂载router. 使用router-link做导航…"}, {"id": "6844903829985722381", "title": "10分钟搭建属于自己的 Vue CLI3 项目模板", "desc": "Vue CLI3 出来已经很长时间了，一直想研究它的插件系统却没有时间~~（其实是懒），刚好最近需要统一一下项目组的规范（借口）~~，于是就有了契机。 还可以理解为一套预置的项目模板，也就是本文要讲的。 使用vue create 创建过项目的小伙伴应该都记得，在创建完成后 CL…"}, {"id": "6917819182994341895", "title": "$attrs和$listeners，inheritAttrs的使用", "desc": "vm.$attrs包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$…"}, {"id": "6857062204722642951", "title": "从0开始用vue-cli3打造一个leaflet的地图组件npm包（一）编写一个测试包", "desc": "介绍使用过leaflet的小伙伴应该都觉得他非常好用但同时也非常麻烦因为需要安装许多我们想使用的对应插件并且都没有官方的中文文档只能靠着有道快译等软件去翻译可能有时候运气好能碰到大佬翻译过的文章所以我"}, {"id": "6844903806174494733", "title": "Vue基础知识讲解——记一次给后端的培训", "desc": "挂载点就是Vue实例里面el属性对应的dom节点。 模板就是挂载点里面的内容，也可以写在实例的template中。 实例就是new的时候指定一个dom节点，一个模板内容，一个data属性，vue会自动生成一段动态的数据放在挂载点中。 在这里 href 是参数，告知 v-bind…"}, {"id": "6844904113780555784", "title": "vue中数组响应式解决方案", "desc": "背景vue中两种操作方式将不会更新视图直接通过索引修改数组，将不会更新视图直接改变数组的length将不会更新视图解决方案vue提供了数组的7个变异方法总结Vue包含一组观察数组的变异方法，所以它们也"}, {"id": "6941732215352983560", "title": "【0～1】新业务线开发上线｜项目复盘", "desc": "有人说对于一个新人来说做业务是能让其最快成长的一种方式。但对于工作有一定年限的同学来说，单纯做业务可能会出现疲倦感。 作为一个毕业快2年的前端开发，下面我将带你一起回忆复盘我的前端小白业务开发学习成长之路中的其中一个小小历程。 简单介绍一下自己：我司所属在线旅游行业，而我所属部…"}, {"id": "6897165348426235918", "title": "浅析Vue数据响应式", "desc": "当我修改Vue实例中的数据时，视图就会重新渲染，出现最新的内容。这就是Vue的数据响应式 我们使用Object.defineProperty(obj,'n',{...})的时候，必须要有一个'n'，才能对其进行监听和代理，而且Vue为了节约计算能力，只会检查第一层属性，如果n在…"}, {"id": "6844903668441939975", "title": "React.js和Vue.js有感—前端开发组件化思想的局部要点理解", "desc": "无论是vue还是react，核心思想离不开组件化，而组件化中，脱离了传统的操作DOM对UI状态的改变，更进一步通过对数据的操作来改变UI状态，避免了直接操作DOM的繁琐和易出现的bug。 而组件化中的关键两点就是组件的props和state，说直白一点就组件的属性和状态。这两点…"}, {"id": "6911695779786817550", "title": "从零实现Vue3的响应式库(2)", "desc": "在这个ownKeys里面直接执行 track 收集依赖，注意我们之前的 track 只有两个参数(target, key)，我们等下还要对 track 做下修改，使它接收参数是(target, type, key)，type表示收集依赖的类型，就是刚才定义的TrackOpTyp…"}, {"id": "6844903502813085709", "title": "一个只有十行的精简MVVM框架", "desc": "MVVM模式相信做前端的人都不陌生，去网上搜MVVM，会出现一大堆关于MVVM模式的博文，但是这些博文大多都只是用图片和文字来进行抽象的概念讲解，对于刚接触MVVM模式的新手来说，这些概念虽然能够读懂，但是也很难做到理解透彻。因此，我写了这篇文章。 这篇文章旨在通过代码的形式让…"}, {"id": "6844904153722929165", "title": "设计一个简单的Vue模态组件", "desc": "在ElementUI组件库中，MessageBox组件（包括注入原型链中的$confirm方法，实际上就是MessageBox实例）和Dialog组件本质上都是模态，但ElementUI并未提供一个统一的模态组件，虽然Dialog组件可以充当这一角色，但是在使用时容易踩坑，比如…"}, {"id": "6844904203077287944", "title": "实现一个数据响应式小Demo", "desc": "当我们修改了 price 的值时，虽然在计算 total 时会使用到 price，但是 total 的值并不会响应式地更新。 我们可以提取出计算 total 的逻辑，之后每次 price 或者 quantity 发生变化的时候，都会再执行一遍这个逻辑。这样的话，当 price …"}, {"id": "6989777688970379300", "title": "vue3 基础", "desc": "基础 应用程序和组件实例 生命周期 数据属性和方法 Class 与 Style 绑定 事件处理 多事件处理器 事件处理程序中可以有多个方法，这些方法由逗号运算符分隔： 系统修饰键 .exact 修饰符"}, {"id": "6989640872459501582", "title": "vue-cli 配置全局组件（手动&自动化）", "desc": "手动注册全局组件&自动化注册全局组件 1. 在Component文件夹下配置index.js文件及对应的组件 install(Vue) -- 使用install方法来注册组件"}, {"id": "6844903591216414728", "title": "Vue中的EventBus使用时你遇到过这个问题吗？？？", "desc": "从控制台可以看到，当我们从SecondPage返回到HomePage的时候控制台已经打印出我们从SecondPage传过来的值了。但是！！！！，不要高兴的太早。。。。。，看看页面上！！！并不是显示的我们传过来的值。。。而是初始值，这是什么情况！！！？？？？ 所以，新组件只要在旧…"}, {"id": "6989624745750691871", "title": "vue2 源码学习-编译器与组件挂载", "desc": "1.模板编译 1.1定义 主要将模板template 转化为 渲染函数 render， 由于vue需要使用vnode做比较更新，所以需要用到render来返回vnode 为了方便用户生成render函"}, {"id": "6989613736881291294", "title": "初学vue3之watch的用法", "desc": "一、vue3中的wacth的用法有许多小细节需要注意的，接下来总结一下它的各种使用情况，总有一款你会喜欢的。 vue3中的watch用法与vue2中的用法稍微有一些差异,vue3中使用了组合式api，"}, {"id": "6844903989599797261", "title": "Vue 详尽的组件通信", "desc": "1. props 值得一提的是，子组件中可以用 $attrs 获取父组件传来的所有属性（除了 class、style），从而不用一个个声明 prop。 如果不用 prop 声明接收，Vue 会默认将这些属性挂载到 子组件的 dom 根元素上。如果不希望这样，可以设置 inher…"}, {"id": "6904832195345547278", "title": "Vue 使用 Element-ui upload 组件实现上传文件到七牛和数据回显", "desc": "limit：限制文件的个数。 把数据给后台的时候，如果fileList为上面的格式，那么你怎么给他的就让他怎么给你就好了，如下。 请求数据回来之后，直接给data中的fileList赋值，回显完成。"}, {"id": "6844903810108751885", "title": "vue生命周期", "desc": "我们都知道vue项目都是通过组件化进行实现的，一个页面通过若干组件组成，构成一个组件树，那么每一个组件都通过一个vue实例来进行管理，每当要渲染一个组件前，都会为该组件创建一个vue实例来管理组件中的数据和事件方法。 完成数据(data props computed)的初始化 …"}, {"id": "6844904069971066894", "title": "一个element.__vue__引发的馒头", "desc": "猜测是这个插件引起的，注释掉之后果然好了。 把测试环境的数据mock到本地复现，经过一番debug，发现原因是这样的。 这个时候又触发了errorHandler，errorHandler里面又访问了toJSON，这样循环触发，就卡死了。 当然sentry的设计也有缺陷，应该避免…"}, {"id": "6844903587227631624", "title": "[译] 使用 Web3 和 Vue.js 来创建你的第一个以太坊去中心化应用程序（第三部分）", "desc": "大家好，欢迎来到本系列的最后一部分。如果你还没进入状况，那么我告诉你，我们将为以太坊区块链创建一个简单的去中心化应用程序。您可以随时查看第 1 和第 2 部分！ 到目前为止，我们的应用程序能够从 metamask 获取并显示帐户数据。但是，在更改帐户时，如果不重新加载页面，则不…"}, {"id": "6931262463937609741", "title": "JS Event Loop(VUE  nextTick)", "desc": "js是一个单线程的语言（非阻塞），最初的目的是为了和浏览器交互，也就是事件的输入输出流，计算机根据人类的指令做出不同的反应结果，但是在JS执行的过程环境中 我们有 几个特殊的 “单词” setTimeout 、setInterval、 Promise、另外在 Node中还有 p…"}, {"id": "6997039339490246663", "title": "Vue3实现字符串反转和内容隐藏", "desc": "经过一周时间的努力，小编今天继续和大家学习Vue3，今天还是以实际例子为主，先让小小白感受一下Vue的魅力"}, {"id": "6844903684472569864", "title": "小程序多业务线融合【完整分包业务接入】", "desc": "因为我们这条业务线小程序是用mpvue构建的（整个项目也是通过mpvue的cli生成的），所以后面相关配置都是以mpvue为例，如果是wepy项目基本也大同小异。 登录问题，推荐和主程序使用同样的cookie名称，这样可以通用一套用户信息，免得双方各维护一套，还能避免重复授权。…"}, {"id": "6922314589828972558", "title": "Vue数据响应式", "desc": "在说数据响应式之前，我们要解决一个很重要的问题，那就是Vue到底对data做了什么？先从getter和setter说起，我们用那个他们来对虚拟的属性进行读写。 此时我们使用getter ，不加括号也能得出值。那么我们要怎么改变这个名字呢？ 有get就有set,setter就是这…"}, {"id": "6844904103483539469", "title": "使用 Coding.net 提供的服务搭建项目的组件仓库", "desc": "我们公司目前开发的项目是使用 Vue 搭建的后台管理应用. 随着同质的项目慢慢的变多, 原先维护在一个项目里的组件在其他项目也会用到, 而组件会随着业务的要求, 进行相应的升级和修改. 这就导致修改一个组件需要同步代码到其他项目. 所以非常需要一个组件仓库的存在, 将自己的通用…"}, {"id": "6945003981659701255", "title": "noticeBar的实现", "desc": "前提概要： 由于element中没有类似于noticeBar的组件，根据公司业务需要，自己实现一个noticeBar，满足需求。 主要使用样式表中inertRule()和deleteRule()两个方法，对样式表中的控制动画的@keyframes规则进行新增和删除。 第一个动画…"}, {"id": "6844904129295286285", "title": "简易实现一个 Vue（1）【原理解析】", "desc": "简单实现一个Vue，还原一些基本功能。当然，实现之前需要先了解它的实现原理。 其实 Vue 的源码确实很清楚了，这里可能讲的也就一知半解，也就是个大概思路。 要想实现一个 Vue，还是应该先来理解一下MVVM。（以下源码均为2.6版本，讲解较简单，大概思路） MVVM是Mode…"}, {"id": "6944876787889340423", "title": "React与vue3功能点对比（一）：状态 hooks", "desc": "Vue3推出了composition api，并且官方支持了jsx，这使得vue3与react变得很相似，熟悉React的同学基本可以直接上手Vue3。我可能会写一个系列，去介绍React和vue3功能上的区分点。 这是一个简单的例子。React通过useState hook来…"}, {"id": "6900212781337804807", "title": "看得懂的 Vue 框架核心原理（上）", "desc": "Vue 作为当下流行的三大前端框架之一，简单易用的特性深受大家的喜爱，也一直是大家平时做业务开发项目的不二利器。但是，光会用肯定不行，不明白框架内部的实现和设计思想，在使用过程中碰到问题难免会有点懵。自古有云，知其然，亦知其所以然。接下来从简单的例子一步步深入了解 Vue 框架…"}, {"id": "6844903566990278664", "title": "Vue.js源码学习四 —— 渲染 Render 初始化过程学习", "desc": "本文记录了作者学习Vue渲染部分的学习笔记。"}, {"id": "6910593054067916807", "title": "详细讲解vue.use全局API源码", "desc": "1.前言最近在编写前端项目底层的时候，发现我们在导入其他UI库的时候，都会执行vue.use()进行挂载，比如全部导入antd、elementUI库之后我们就可以全局引用他们内部的所有组件2.vue."}, {"id": "6844903911959035918", "title": "【Vue原理】Compile - 源码版 之 generate 拼接绑定的事件", "desc": "如果你觉得排版难看，请点击下面链接或者拉到下面关注公众号也可以吧【Vue原理】Compile-源码版之generate拼接绑定的事件今天我们来探索事件的拼接啦，上一篇我们已经讲过了generate阶段"}, {"id": "6986116899725639694", "title": "VUE创建cli", "desc": "下载node.js，配置环境变量 你可以使用 vue serve 和 vue build 命令对单个 *.vue 文件进行快速原型开发，不过这需要先额外安装一个全局的扩展,查看npm安装的所在位置 p"}, {"id": "6985922784979320868", "title": "Vue 3 响应式精简化解析", "desc": "Vue 3 响应式是如何实现的，只考虑 reactive 一种情况的实现，以及最重要的 effect、trigger、track 的原理"}, {"id": "6844904160958103566", "title": "Vue2源码-响应式原理", "desc": "_init初始化Vue实例，_init定义在原型链上,查看Vue.prototype._init中的内容，其中initLifecycle，确定组件的层级，父组件，根组件，定义属性来保存子组件、wather对象、记录生命周期执行状态属性等；initEvents做一些承父级相关监听…"}, {"id": "6899752179670712333", "title": "实现 Vue 的响应式系统", "desc": "Vue 最独特的特性之一，是其非侵入性的响应式系统。比如我们修改了数据，那么依赖这些数据的视图都会进行更新，大大提高了我们的\"搬砖\"效率，回想一下初学 JS 的时候海量的 Dom操作~.~......，Vue 通过数据驱动视图，极大的将我们从繁琐的DOM操作中解放出来。 Dep…"}, {"id": "6844903504931192846", "title": "fish-ui A Vue.js 2.0 UI Toolkit for Web.", "desc": "一个基于vue2, semantic开发的后台应用组件库"}, {"id": "6854573209388318728", "title": "Vue学习笔记3-样式绑定、事件处理器、表单经典模型", "desc": "结合官方文档与菜鸟教程的学习总结系列。 class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。 可以在对象中传入更多字段来动态切换多个 class。v-bind:class 指令也可以与普通的 class attri…"}, {"id": "6869411844851777543", "title": "我理解的Vue虚拟DOM/组件", "desc": "回顾了一下浏览器渲染的知识：https://juejin.im/post/6844904199419854855其中有关于重绘与重排的内容。问题1：操作真实DOM的成本web最终是要进行用于与界面交互"}, {"id": "6844904181459845133", "title": "小白分享：我的一次Vue学习非寻常之路", "desc": "包含三个功能子菜单，子菜单的主页面都是查询类条件+表格+分页。 都包含导航批量设置功能（即可以选中多行记录），然后进行批量设置。 行记录展现字段项一致，操作栏位的功能按钮也一样。 无论对于批量弹出窗口批量设置，还是操作栏位功能按钮弹出窗口，都需要父子页面传值操作。 功能中包含一…"}, {"id": "6844903581842178056", "title": "深入浅出 - vue变化侦测原理", "desc": "深入浅出 - vue变化侦测原理"}, {"id": "6844903961628000263", "title": "浅析Vue3数据响应系统", "desc": "源码整体结构还是比较清晰，相比较于Vue2.x做了比较大的调整，代码话说98%都是用ts编写，所以看源码还需要大概了解ts的一些知识。而在还没发布Vue3源码之前，官方也已经给出了 Vue Composition API RFC，可以初步了解Vue3的一些写法和特性，这两天花了…"}, {"id": "6898774296320016391", "title": "【XXG学习记录04】在vue中销毁监听removeEventListener", "desc": "在回顾之前作品demo时发现，我在监听鼠标的时候，即使退出了“当前页面”也没有消除监听。 配合window.removeEventListener('mousemove',this.move)来销毁监听。 还有一个原因:我在监听和销毁时 所指定的那个方法。 而且也不要使用匿名函…"}, {"id": "6919743698586730510", "title": "深入理解vue组件", "desc": "使用组件的细节点is属性：有些html标签如table，ul，ol，select对哪些标签可以出现在其内部是有着严格的要求的。因此当这些标签内部出现了自定义组件，有可能会被作为无效的内容提升到外部，导"}, {"id": "6978323529905389582", "title": "Vue：进阶构造属性", "desc": "Directives 指令 自定义指令 之前已经学习了一些内置指令，比如v-if、v-for、v-show、v-html等 那么怎么自己造一个指令呢？ 目标：造v-x，点击即出现一个x 两种写法 声明"}, {"id": "6897934019942744077", "title": "Vue 源码系列之 computed 的初始化和更新", "desc": "从官方文档里我们能看到，当我们需要在模板里，依赖某些 data 做一些复杂操作得到一个结果的时候，可以使用计算属性 computed。当 data 改变时，计算属性的值也会产生改变，然后更新视图。官方文档里还提到了，只有当计算属性依赖的响应式数据发生改变时，才会重新计算计算属性…"}, {"id": "6844903645889167368", "title": "Vue: Binding与Watcher", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。接下来的日子我应该会着力写一系列关于Vue与React内部原理的文章，感兴趣的同学点个关注或者Star。 上一篇文章Vue响应式数据: Observe…"}, {"id": "6847902222726987783", "title": "vue实现双向数据绑定 （附代码及讲解）", "desc": "简介首先看下效果图文件目录源码点这里去github下载代码流程分析（建议对照源码来看）所以title属性的dep数组中存放两条数据,每个是个watcher源码点这里去github下载代码index.h"}, {"id": "6844903504029417486", "title": "Vue.js打造一个开源的CNode社区", "desc": "Vue.js打造一个开源的CNode社区，实现了浏览、发帖、新手入门、api等等功能。 源代码地址：👉 https://github.com/yaoyanweb/vue-cnode 欢迎大家star和fork😄 Vue2.0：前端页面展示。 Vuex：Vuex，实现不同组件…"}, {"id": "6897405357329645575", "title": "ueditor（vue-ueditor-wrap）集成秀米踩坑记录vue-cli4", "desc": "首先， KB编辑器! ，官网都提莫的没了。然后得感谢某某某等大佬，因为确实查了好久的资料，你问我为什么不换个编辑器，？？？（手动问号），我没这个权力......，业务需要，开搞吧（项目是vue-cli4）。 先按照教 readme 试试水，下载1.5.0版本代码，结合某些古代的…"}, {"id": "6881983049236480013", "title": "「Vue」对 Vue 的数据响应式研究过程", "desc": "打印出来的 myData 第一个初始值是{n：0} ，而第二个是{_ ob_: Observer}。 所以从这个例子看出 obj3 只有姓，名，get 姓名 和 set 姓名四个属性，并没有姓名这个属性，浏览器在打印这个姓名的时候后面加...,意思就是确实可以对姓名进行读和写，…"}, {"id": "6844903751866646542", "title": "我们是如何从ng1迁移ing到vue的", "desc": "原本的app是使用ng1来进行编写js部分，slim来编写页面模版，同时使用gulp来完成遍历所有的js文件，并打包到一个js中，后来一些新的页面部分采用iframe引入另一个vue-cli项目，两者之间通过cookie来进行登录数据的共享。 最终决定使用vuex作为整个项目的…"}, {"id": "6921717230656995335", "title": "Vue3只读代理---readonly、isReadonly、shallowReadonly", "desc": "readonly效果,没有任何变动shallowReadonlyisReadonly"}, {"id": "6881629431194976264", "title": "Vue3 源码分析(2)：一起动手造运行时", "desc": "Vue3 的 JSX 语法已经跟 React 很像了，除了 props.children 是通过 Slots 实现以外，基本都一样，这里我们并不打算实现 Slots，因为 Slots 实现的 children 也是一种 props，是一段 JSX 而已，并不算特殊，毕竟你随便写…"}, {"id": "6844903886352826382", "title": "【Vue原理】Event - 源码版 之 绑定组件自定义事件", "desc": "如果你觉得排版难看，请点击下面链接或者拉到下面关注公众号也可以吧【Vue原理】Event-源码版之绑定组件自定义事件组件自定义事件其实是我最感兴趣的，我当时花了好多时间去探索的哈哈哈，探索完了之后，发"}, {"id": "6936204367380873230", "title": "解决 iscroll 滚动的问题以及 MutationObserve构数的使用", "desc": "它把DOM变动记录封装成一个数组进行处理，而不是一条条地个别处理DOM变动。"}, {"id": "6977742134757572615", "title": "VUE学习-脚手架cli", "desc": "VUE学习-脚手架cli 考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情 使用vue-cli可以快速搭建vue开发环境以及对应的webpack配置 安装VUE脚手架 拉取2.x模板 VU"}, {"id": "6844903641313198094", "title": "了解Vuex方法的使用初级篇", "desc": "Hellow,大家好啊有一周不见了呢，这周想要讲一讲Vuex方法的使用，不是state和mutations这么简单了，大家可以把这个当成是入门级教学来看，接下来我们进入正题。 有人可能问了问什么要了解Vuex的modules，下面我来讲讲modules是什么，当项目越来越大的时…"}, {"id": "6912294340131815437", "title": "vue中this.$router.push()路由传值和获取的两种常见方法", "desc": "页面跳转可以使用this.$router.push(location)来修改url，完成跳转。push后面可以是对象，也可以是字符串：跳转页面并传递参数的方法（两种）：params和query1.pa"}, {"id": "6844903901401972743", "title": "Vue源码解析 ：深入理解响应式原理", "desc": "Vue.js 最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。 可以这样理解：当一个状态改变之后，与这个状态相关的事务也立即随之改变，从前端来看就是数据状态改变后相关 DOM 也随之改变。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行…"}, {"id": "6844903617074298887", "title": "Vue2 dist 目录下各个文件的区别", "desc": "vue2经过2.2版本升级后,文件变成了8个:vue.common.jsvue.esm.jsvue.jsvue.min.jsvue.runtime.common.jsvue.runtime.esm.j"}, {"id": "6844903861379923981", "title": "Observer源码解析", "desc": "在Observer源码部分主要有三个角色：Observer、Dep、Watcher。 （1）必须是一个对象，且不能是vnode的类型的。 这段代码就是判断传入的值是不是数组，如果是数组，走observeArray方法，如果不是数组，那么走walk方法。 walk这个方法就是遍历…"}, {"id": "6844903981504790542", "title": "做题学知识（2）之JS 的 Number 的标准IEEE 754", "desc": "这俩道题主要考察了 js 数字标准的问题，js 用的是 IEEE 754 64 位双精度浮点数。所以需要注意俩个问题： 其所能表示的范围为-2^53~2^53(包括边界值)。因此当值超出这个范围的时候是不会计算的 针对第二题，IEEE 754 标准的 64 位双精度浮点数存在小…"}, {"id": "6935319177397796877", "title": "part5 - 模块2 - 01 - Vue组件", "desc": "书写方式：this.$root.数据名...... 可以直接使用ES6的解构操作进行数据接收，例如v-slot:default=\"{ value ,one..... }\"，使用的时候就可以直接使用value和one了 Animate.css | A cross-browser …"}, {"id": "6992618090160717832", "title": "Vue3从0到1组件开发-基础组件：Mask", "desc": "在一个完整的组件库中，抽出Mask作为一个单独的组件仍然是可有可无的一种处理方法。而讲Mask暴露给开发者使用的似乎更少，多见于主攻移动端的UI库当中，但仍有值得思考的地方"}, {"id": "6844904122479542285", "title": "Vue3 的响应式和以前有什么区别，Proxy 无敌？", "desc": "大家都知道，Vue2 里的响应式其实有点像是一个半完全体，对于对象上新增的属性无能为力，对于数组则需要拦截它的原型方法来实现响应式。 这种时候，Vue 提供了一个 api：this.$set，来使得新增的属性也拥有响应式的效果。 但是对于很多新手来说，很多时候需要小心翼翼的去判…"}, {"id": "7001107742391795719", "title": "一个盆友，今天问我，watch里箭头函数的this指向…", "desc": "一个盆友问我，为啥他在watch里handler使用箭头函数，this指向是undefined ？？？？"}, {"id": "6987267852575195143", "title": "【面试题解】vue-router有几种钩子函数？具体是什么及执行流程是怎样的？", "desc": "本文以解答常见面试题，详细介绍了 vue-router 的几种钩子函数，以及使用流程图的方式展现几种钩子的执行流程。 演示代码基于 vue-router 4.x 。"}, {"id": "7005822844265299998", "title": "hilink-ui组件库", "desc": "基于Vue与华为hilink平台UI设计模式编写的前端UI框架，用于搭建自定义华为hilink平台应用"}, {"id": "7004791905900822565", "title": "Vue3.0 常用响应式API的使用和原理分析(二)", "desc": "reactive对传入的类型是有限制的，必须是对象或者数组。对一些基础类型，例如string, number，boolean等不支持，如果要使用reactiveAPI必须将这些基础类型封装成对象，这样"}, {"id": "6844904130494857229", "title": "Vue 3.0 全家桶抢先体验", "desc": "完成上述操作后，项目正式升级到 Vue 3.0，注意该插件还能支持 typescript，用 typescript 的同学还得再等等。 Vue 3.0 中初始化状态通过 setup 方法，定义状态需要调用 ref 方法。接下来我们定义一个事件，用来更新 count 状态： 通过…"}, {"id": "7005814704144662536", "title": "vue3源码之旅-computed", "desc": "更多文章 前言 今天分享computed，computed和effect、ref、reactive息息相关，不了解这些的话翻一下之前的分享 简化代码 vue3-computed源码位置 compute"}, {"id": "7001031527714783269", "title": "Vue3 从ref 函数入手透彻理解响应式原理", "desc": "vue前言 vue3从发布开始已经有一年有余，近来开始撸源码，真是惭愧至极，啥也别说了，洗心革面 开干！直接上源码枯燥乏味 这里仅仅是我自己的理解响应式原理之后的简版代码，深入理解vue响应式原理"}, {"id": "6844903858804621325", "title": "公司要求会使用框架vue，面试题会被问及哪些？", "desc": "如果你是一个已经在学习前端开发的初学者亦或者是一名在代码界纵横多年的程序员，那你一定知道现在最火的前端框架之一Vue.js。它相比于React与Angular上手更加容易，或许这也是很多初学者选择vue的原因之一。 我们看到很多招聘上都写着掌握vue开发项目，那么面试都会问什么…"}, {"id": "6916664414422695949", "title": "Vue.js笔试题解决业务中常见问题 | 七日打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 希望可以通过这篇文章，能够给你得到帮助。(感谢一键三连) 页面分为3个部分：页面的顶部header，底部footer，中间部分（侧栏side和主要部分main）。 MVVM框架是一个Model-View-View…"}, {"id": "6995394981519179790", "title": "我给大家肝了一个1天搭100个表单的设计器~~", "desc": "如何解决前端表单变化多端的需求，如何实现表单动态交互逻辑，如何高效完成日常CRUD开发？VForm另辟蹊径，为您提供不一样的实现思路，欢迎交流点拨~~"}, {"id": "6960322464471744542", "title": "Vue 3.1.0 的 beta 版发布", "desc": "以往都是翻译给大家，这次换个形式为大家介绍。 本次 beta 版本带来了一些有趣的新特性和错误修复。"}, {"id": "6991631875043229733", "title": "【解决方案】如何在Vue2的工程中书写Vue3语法？ ｜8月更文挑战", "desc": "随着Vue3正式版本的发布，公司的部分新项目开始启用Vue3，部分老项目也在向Vue3迁移，但是公司还是有部分项目是基于Vue2的，那么如何在Vue2的工程中书写Vue3语法？"}, {"id": "7002947484100067342", "title": "Vue源码的工具库|shared", "desc": "Vue 2.x & 3.x 的源码中均定义了一些工具方法，具体涉及方面有：类型判断，数据转换，缓存数据（利于性能优化），判断对象是否相等，获取全局this指向对象，以及一次性执行多个函数等"}, {"id": "7005926039171891207", "title": "Vue学习之---动态组件中的activated与deactivated钩子函数", "desc": "Vue学习之---动态组件中的activated与deactivated钩子函数 在学习这两个钩子函数之前呢，怎么需要先了解下Vue内置的动态组件< component >以及与之相配套的< keep"}, {"id": "7005800783685877767", "title": "[Element Plus 源码解析] Form 表单组件", "desc": "一、组件介绍 el-form表单组件，是日常开发中使用频率很高的一个组件，通常由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据。 大家应该对el-form组件十分熟悉，直接看源码吧"}, {"id": "6995116353224966181", "title": "从设计理念到数据响应式", "desc": "本文从vue系列的基本设计思路开始，到手写基本api的实现。让大家从实践中体会vue的数据驱动的神秘之处。"}, {"id": "6999473771253874701", "title": "论如何在vue3中正确的使用vuex的辅助函数", "desc": "前言 在实际开发中，我们经常会用到 vuex 来对数据进行管理，随着数据越来越多，我们逐渐开始使用一些语法糖来帮助我们快速开发。 即 vuex 中的 mapState、mapGetters、mapMu"}, {"id": "7003619857862230029", "title": "Vue.js 运行机制全局概览", "desc": "初始化及挂载 在 new Vue() 之后。 Vue 会调用 _init 函数进行初始化，也就是这里的 init 过程，它会初始化生命周期、事件、 props、 methods、 data、 comp"}, {"id": "6916707319325687815", "title": "js addList最详细用法", "desc": "使用过jquery开发的童鞋都知道：jquery中addClass与removeClass是两个使用高频的方法，操作dom元素增删class类是十分方便的。如今原生的js classList可以跟jquery操作class功能想媲美，在某些操作上甚至可以说更优于jquery。 …"}, {"id": "6844903999989088264", "title": "迫于菜🐶 - Vue.js 源码（三）", "desc": "前面两章中，我们跟随 Vue.js 技术揭秘 学习了 Vue.js 的源码目录结构和项目构建，今天我们分析一下从 import Vue 开始，到底做了哪些事情来完成初始化的。 Runtime + Compiler 版本的入口文件是 src/platforms/web/entry…"}, {"id": "6844903929281511432", "title": "6. Vue内部是如何渲染视图", "desc": "以前M的命令式操作DOM即使用jQuery操作DOM节点，随着状态的增多，DOM的操作就会越来越频繁，程序的状态也越难维护，现在主流的框架都是采用声明式操作DOM，将操作DOM的方法封装起来，我们只要更改数据的状态，框架本身会帮我们操作DOM。 不再依赖HTML解析器进行模板解…"}, {"id": "6844903677895901191", "title": "拜读及分析Element源码-checkbox多选框组件篇", "desc": "checkbox-group：适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。 checkbox：多选。 checkbox-button： 按钮样式的多选。 aria-checked： true代表选中，false代表未选中，mixed代表：元素…"}, {"id": "6916438488921571335", "title": "vue 二级菜单", "desc": "vue带展开动画二级菜单，大家如果有更好的写法欢迎交流index.vueNavItem.vue"}, {"id": "6855129006879342600", "title": "JavaScript设计模式之单例模式", "desc": "JavaScript设计模式之旅设计模式开篇学习设计模式的作用单例模式如何处理命名空间污染呢？命名空间使用闭包封装私有变量通用的惰性单例模式场景1场景2本文使用👉mdnice排版参考资料<<JavaS"}, {"id": "6968657795977576455", "title": "Vue 2.x和Vue 3.x 数据劫持的实现和优缺点", "desc": "数据劫持是Vue数据响应式的核心和基础，通过添加代理来给属性的变化添加额外的操作的方式 1、Vue 2.x数据劫持的方法 这个方法可以精确修改对象的属性，decriptor有四个参数，分别是 conf"}, {"id": "6844903506378227719", "title": "基于七牛SDK构建的Vue单页图片管理应用", "desc": "Vue-cli脚手架构建的七牛图片管理图床单页应用（基于museui），前后端分离。后端基于express及七牛nodejs-SDK开发，服务原本部署在Heroku，由于服务响应速度慢的原因，已将服务部署在云服务器上。 若有任何问题、反馈或者建议，请提交issue中。 欢迎fo…"}, {"id": "6844903503714844686", "title": "Vue 2.5 & TypeScript: API 参数中的类型推导", "desc": "在刚刚发布的 Vue.js 2.5 中加强了对 TypeScript 的支持，TypeScript 可以直接推导出 Vue.extend(options), Vue.component(options) 和 new Vue(options) 等 API 的参数中的 this 的…"}, {"id": "6934609651233210381", "title": "cool-admin 模块开发", "desc": "模块的本质是一堆代码复用的集合，你可以将复用的业务代码，或者功能模块都放到模块中进行维护。 模块的目录结构没有特别明确的规范，导出参数保持一致即可。 注册的路由会直接添加到路由列表中，即浏览器 http://localhost:9000/login 可直接访问。 系统注册 vu…"}, {"id": "6844903973028102151", "title": "MVVM的实现原理(手写一个简版Vue)", "desc": "先看下Vue是怎样写的Vue中双向绑定的原理模板编译数据劫持观察数据的变化(watcher)(简易版vue原理)MVVM.js编译Compilecompile.js下面开始执行第二部==>编译isDi"}, {"id": "6940640276486553637", "title": " OnebayUI (一个vue3编写的移动Web UI库)", "desc": "OnebayUI是使用vue3编写的移动Web UI库，它可以帮助您快速轻松地编写vue3应用程序。 所有组件均使用tsx编写。 文档中的所有组件demo均由vue模板和tsx编写。 如果您的应用是由vite创建的，则强烈建议您在项目中使用vite插件vite-plugin-i…"}, {"id": "6844903702298361870", "title": "Vue源码阅读--过滤器", "desc": "过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示： 1. 属性中 v-bind:id=\"xxx | filterA\" 在parse处理开始节点的proce…"}, {"id": "6844903511767924744", "title": "Vue2.0开发风格指南", "desc": "本文是对Vue官方风格指南的注解，过滤了极少数我认为重要性很低的项目，并将其余项按照作用相关性重新归类，便于读者针对性的选择某一方面进行参考。"}, {"id": "6844904070893797383", "title": "从源码分析Vue的响应式原理", "desc": "据Vue的官方介绍，Vue的响应式系统是非侵入性的，那Vue是如何做到将不同类型的数据（基本类型、普通对象、数组等）转换为可检测的呢？在了解Vue的具体实现之前，我们先了解一下为什么要将数据变为可检测的。 因为Vue是MVVM框架，即数据可以驱动视图的，在传统的开发中（非数据驱…"}, {"id": "6844903543736893453", "title": "「React & Vue」优雅而炫酷的 Dropdown 组件，极大提高交互效果和操作愉悦性。", "desc": "适用于 React 的优雅而炫酷的 Dropdown 组件。 在线示例：https://xbt1.github.io/effect-dropdown-react/ Vue 版本：https://github.com/XBT1/effect-dropdown-vue/"}, {"id": "6921981829536808967", "title": "Vue2 源码系列之响应式原理", "desc": "众所周知，vue 2.x是通过Object.defineProperty来实现数据响应式的。那vue中具体是如何实现的呢？数据初始化的流程又是什么样的呢？还有数组又是如何实现响应式的呢？让我们从vue的初始化一步步分析，看看这其中到底经历了什么。 上述代码为vue的构造函数，我…"}, {"id": "6844903624208809992", "title": "强大的脚手架：vue-cli 3.x UI控制台初体验", "desc": "众所周知，vue的官方脚手架是vue-cli，但它已经很久没有大版本更新了，原来是憋了个大招。最近发布的vue-cli 3.x ，虽然还是bata版本，但它新增的功能是非常强大的，小编已经迫不及待的下载体验。 ps：墙内的朋友们可以使用cnpm， mac的朋友们记得加上sudo…"}, {"id": "6844904084701446157", "title": "Vue造Toast轮子引发的思考💡", "desc": "最近一直在不停的造Vue轮子，目前已经完成了Button、网格布局、默认布局、Input等轮子。 今天在编写Toast轮子的时候遇到了一个问题，说一说我的思考过程，拿出来和大家分享一下，希望对大家有所帮助。🙌 在决定去造一个轮子之前，首先要做的就是需求分析，其中最重要的一步就…"}, {"id": "6910066895760654344", "title": "vue3.0 Composition API上手初体验", "desc": "vue3.0 暴露出很多 API 供开发者使用，可以根据需求，将所需要的 API 从 Vue 中导入。考虑到 tree-shaking，利用了 import 和 export 的语法，实现了按需打包模块的功能 this 在 setup() 中不可用，直接使用声明的变量名来访问数…"}, {"id": "6992207855252144165", "title": "模拟Vue.js响应式原理", "desc": "数据驱动 数据响应式 数据响应式中的数据是指数据模型，数据模型仅仅是普通的javascript对象，而当我们修改数据时，视图会进行更新，避免了繁琐的DOM操作，提高开发效率。 双向绑定 数据改变，视图"}, {"id": "6992207139817291783", "title": "vue源码研究之响应式原理初探（下）", "desc": "- vue对象观察模块源码学习（下） 本文源码基于2.6.11版本 尝试着从源码角度来学习，当数据修改以后是如何触发视图更新的"}, {"id": "6992189110286975006", "title": "Vue2中nextTick和promise的更新顺序", "desc": "Vue2中nextTick和promise的更新顺序。 1、视图更新的时机是在什么时候。 如果nextTick和promise互相嵌套又是怎么更新"}, {"id": "6992178709906063373", "title": "vue hash模式微信code授权路径异常处理", "desc": "hash模式进行微信code授权，返回的路径会变成 正常的history模式是 处理方法 对路由进行拼接，因为如果不做拼接。 1-接口请求报错Content-Type跨域； 2-页面跳转出问题"}, {"id": "6992175092700545032", "title": "vue组件之路 - 自带滚动居中的Tab组件", "desc": "一个能够自动滚动居中的tab栏组件，当你点击某个tab项目的时候，tab项被激活高亮后，自动滚动居中。"}, {"id": "6992162704945479716", "title": "Vue.js 3.0源码解读：组件的实现-组件更新概述", "desc": "我们都知道组件是有模版、组件描述对象、数据构成的，数据的变化会引起组件的更新。组件的渲染过程中创建了一个带副作用的渲染函数，当数据发生变化的时候，就会执行这个渲染函数，触发组件的更新。 副作用渲染函数"}, {"id": "6844903585738653709", "title": "漫谈Vue组件库开发", "desc": "聊聊基于webpack脚手架开发一个Vue移动端UI组件库的经验与思考"}, {"id": "6844903766982934535", "title": "【译】Vue 的小奇技（第一篇）：提高大型数据列表的性能", "desc": "嗨，大家好！欢迎来到 VueDose 的第一篇文章。我已经准备好在 VueDose 上开启这段旅程，来帮助像你一样的开发者们来学习一些厉害的技巧。 首先，在 VueDose 上发布的文章都是很简洁明了的，因为我相信这样的行文风格对于读者来说会更有帮助，所以我们现在就直接开始吧。…"}, {"id": "6989493181981130759", "title": "ResizeObserver初探", "desc": "ResizeObserver 接口可以监听到 Element 的内容区域或 SVGElement的边界框改变。内容区域则需要减去内边距padding。（有关内容区域、内边距资料见盒子模型 ） Resi"}, {"id": "6844904002782511118", "title": "vue项目中使用swiper实现中间大，两边小的轮播图", "desc": "使用activeIndex属性就可以获取到当前图片的索引啦。"}, {"id": "6909663174736216071", "title": "Vue 结合 Axios 接口超时统一处理", "desc": "当网路慢的时候;又或者公司服务器不在内地的时候，接口数据请求不回来超时报错的情况相信大家肯定遇到过的，这里我把我公司项目请求超时的处理方法分享下，希望看过后有帮助。 retry ：第一次失败请求后重试请求的次数。 retryDelay: 失败请求之间等待的毫秒数（默认为1）。上…"}, {"id": "6997042686754553864", "title": "vue/composition-api 解析｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 目录 compositionApi 的基本概念 compositionApi 解决的问题 compositionApi 做了哪些工作 核心"}, {"id": "6847902221552582669", "title": "Proxy API--Vue3响应式对象reactive初探", "desc": "Proxy API对应的Proxy对象是ES2015就已引入的一个原生对象，用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）。 从字面意思来理解，Proxy对象是目标对象的一个代理器，任何对目标对象的操作（实例化，添加/删除/修改属性等等），都必须通过该代理器…"}, {"id": "6844903702654894088", "title": "uni-App引入iconfont", "desc": "uni-app 是一个借鉴 Vue.js、小程序、mpVue 开发跨平台应用的前端框架。 通过编写 一套代码，将其编译到iOS、Android、微信小程序等多个平台。"}, {"id": "6844903587072442375", "title": "美团小程序框架mpvue(花名：没朋友)蹲坑指南", "desc": "但是还是有很多坑的,这里就不列举了..... 也就是说,不但可以用我们熟悉的vue语法开发,还有可能直接把你的h5页面编译成小程序. 该项目到目前位置，开源不到20天，已经收到将近7000个star,可见天下苦秦已久。 发现只要改动一点点,就可以顺利从wepy切换到mpvue上…"}, {"id": "6976187035610513439", "title": "Vue 组件发布 NPM", "desc": "基于Vue-cli4.x二次封装Element-ui组件并发布到npm 转载自：https://www.yuque.com/homacheuk/dmqta3/mbro9z#bS1LQ 需求 由于需要重"}, {"id": "6934581587075465223", "title": "Vue基础入门(一)", "desc": "易用 : 入门简单， 熟悉html,css,JavaScrip知识后，可快速上手 。 ......... 跳过这个元素和它的子元素的编译过程。 mvc是后端的分层开发概念；mvvm是前端视图层的概念，主要关注于视图层分离，也就是说:mvvm把前端的视图层，分为了三部分。Mode…"}, {"id": "6844903503538847758", "title": "Vue 2.5 && 2.5.1(Bug Fixes) 正式发布!! 带来大量的更新!", "desc": "其中包括核心库对TS的支持更加完善,错误捕获的提升,函数式组件,服务端,更多的事件修饰符,简化插槽的使用,注入可以增加默认值等~~~~ https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b(墙:详细)"}, {"id": "6932389261681360904", "title": "vue3项目搭建", "desc": "设计技术点vue3不适用ts配置vant3移动端适配创建vue3项目部分步骤说明默认vue2版本默认vue3版本手动配置我们这里选第三种选择vue版本babel用于处理兼容这里不使用tsPWA(Pro"}, {"id": "6844903600766844942", "title": "Vue 常见业务场景以及细节心得", "desc": "上一年末，公司需要开启新的业务线，并且是需要以新的前端框架技术 Vue，去完成这项工作。我很开心能做为其中的开拓者之一，在此之前，我并没有多少 Vue 的开发经验，也仅仅是停留在学习阶段，而且公司一直采用的前端框架还是 jQuery，所以公司也没 Vue 框架开发经验沉淀。外面…"}, {"id": "6981732252933701668", "title": "分析Vue-Router", "desc": "一、动态路由 页面中的使用 二、嵌套路由 三、编程式导航 1. this.$router.replace('/login') 2. this.$router.push({ name: 'Detail'"}, {"id": "6844903568420388872", "title": "公司vue组件库开发心得", "desc": "公司移动端产品主要以微应用的形式发布，所以微应用总数是很大的，而且开发频率也相当高（技术栈为vue）。这就导致一个问题，在高的产品开发频率下，必然会导致许多无用功现象的发生，列如最常见的loading、message组件每次都要重新再新的项目里面复制粘贴，偶尔文件地址放错了还会…"}, {"id": "6994829701629870087", "title": "【Vue2.x 源码学习】第三十七篇 - 组件部分 - 组件的合并", "desc": "【Vue2.x 源码学习】第三十七篇 - 组件部分-组件的合并:- 组件初始化情况；组件合并的位置；组件合并的策略；组件合并后测试；"}, {"id": "6936854066832080927", "title": "[Vue源码]学习一下Vue常用API的源码(二)", "desc": "继续上一次的Vue源码阅读，学到更多的一些API的内部源码，这里再次分享一下自己的理解。 向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增…"}, {"id": "6844904066426863624", "title": "Vue.js 项目打包优化实践", "desc": "另外就是对于自己编写的业务代码进行分包，根据路由进行懒加载，可以较好的提高首屏加载速度。 添加了全局 loading 来提高体验。 CDN 优化是在 webpack 中实现的，主要分为环境切换，webpack 打包技巧和 html-webpack-plugin配置三个部分。 通…"}, {"id": "6844904114623610893", "title": "使用Vue-cli、typeScript开发Vue通用插件", "desc": "作为渐进式框架，Vue可以灵活地引入各种为它量身定做的插件。想必每一位Vue开发者都想过自己去实现一款Vue插件，将自己的新奇脑洞可以发布到npm社区供其他Vue开发者细品。这里我就自己前一阵使用Vue-cli脚手架和typescript开发Vue插件的环境搭建和注意事项做一个…"}, {"id": "6985094235062009893", "title": "菜鸡学源码Vue —— (createElement的实现)", "desc": "回顾 上节讲到了_render()实现了vnode虚拟dom，那么是vnode是什么，又是如何创建的虚拟dom 调用_createElement()内部函数 src/core/vdom/create-"}, {"id": "6844903655401848839", "title": "终极蛇皮上帝视角之微信小程序之告别 setData", "desc": "众所周知 Vue 是借助 ES5 的 Object.defineProperty 方法设置 getter、setter 达到数据驱动界面，当然其中还有模板编译等等其他过程。 而小程序官方的 api 是在 Page 中调用 this.setData 方法来改变数据，从而改变界面。…"}, {"id": "6937667832284971021", "title": "从0搭建一个微前端项目(Single-spa)", "desc": "微前端架构模式早就在2016年由ThoughtWorks年提出，微前端是模仿服务端微服务的理念而应用于浏览器端，即将多个单一的单体应用组合起来拼凑成唯一应用，各个单体应用还可以独立开发、独立运行、独立部署，这也是微前端比较重要的特点。 我司要开发一个中后台项目,本身toB的中后…"}, {"id": "6844904153542557703", "title": "如何实现深拷贝？", "desc": "利用正则快速转换指定时间格式正则表达式校验输入百分比值iviewtree为指定节点设置展开不生效获取map数组的key值如何实现深拷贝？vuerules校验不能输入汉字"}, {"id": "6844903943957381128", "title": "这可能是你见过的最便捷的Vue i18n Vscode插件", "desc": "在vue/js文件中找到汉字位置，区分是在template中标签的label或者其他property中，或者{{}}中script，又或者script中的，手动将一层一层的国际化key拷贝，粘贴。"}, {"id": "6909280005864783885", "title": "vue使用全家桶搭建项目", "desc": "一. 全局安装脚手架vue-cli 二. 创建一个基于webpack模板的新项目 Myproject是项目名称,可以根据项目需求进行改变. webpack的创建可以在命令行中全程enter键,但是有个ESlint功能建议关掉,是一个代码规范原则,纵然对代码很beautify,但…"}, {"id": "6844903748477648910", "title": "<vue-clamp>：轻松实现多行文本截断", "desc": "# 功能 * 可以选择限制行数与/或最大高度，无需指定行高。 * 支持在布局变化时自动更新。 * 支持展开/收起被截断部分内容。 * 支持自定义截断文本前后内容，并且进行响应式更新。"}, {"id": "6913892973277085704", "title": "Vue3+Vite引入Echarts5.0图表库", "desc": "环境Vue3+Vite，需要引入ECharts库。 即可。 问题是这是以前的版本可行的，更新到5.0版本后需要使用其他方法。 这样就能正常使用了。"}, {"id": "6844903894359736333", "title": "如何制作一款在线编译器(1)", "desc": "大概三四个月之前我开始有了制作在线编译器的想法，在此之前我接触过很多的在线编译器，如CodePen、JsBin、JsFiddle等，这些都非常优秀且有着庞大的用户群体的编译器。 我一直对在线编译器的实现抱有浓厚兴趣，这些在线编译器支持很多种语言，代码变色，诸多的快捷键以及一些个…"}, {"id": "6972468877481476133", "title": "Vue3响应式原理傻瓜式教程（一）——Reactive", "desc": "非常详细的傻瓜式原理教程，适合小白。初步理解响应式原理，实现更新计算结果，理解targetMap、depsMap、dep。"}, {"id": "6972407881790390308", "title": "解读vue的diff算法原理", "desc": "1. 当数据发生变化时，vue是怎么更新节点的？ 要知道渲染真实DOM的开销是很大的，比如有时候我们修改了某个数据，如果直接渲染到真实dom上会引起整个dom树的重绘和重排，有没有可能我们只更新我们修"}, {"id": "6991704478483709965", "title": "在使用vue3开发了几个项目后的总结", "desc": "响应式数据reactive使用时的注意事项、全局组件封装及调用、vue-router4及vue-router3使用时的小技巧；"}, {"id": "6844904147397902344", "title": "Vue之proxy和defineProperty", "desc": "Vue3.0 中，响应式数据部分弃用了 Object.defineProperty，使用Proxy来代替它。 Object.defineProperty 有一个缺陷是无法监听数组下标的变化，导致直接通过数组的下标给数组设置值，不能实时响应。 所以 Vue 才设置了 7 个变异数…"}, {"id": "6844904078686814215", "title": "Vue Router的手写实现", "desc": "在前后端分离的现在，大部分应用的展示方式都变成了 SPA（单页面应用 Single Page Application）的模式。为什么会选择 SPA 呢？原因在于： 用户的所有操作都在同一个页面下进行，不进行页面的跳转。用户体验好。 对比多页面，单页面不需要多次向服务器请求加载页…"}, {"id": "6844904115949027336", "title": "10个Vue开发技巧助力成为更好的工程师", "desc": "在组件中使用 $route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。 函数式组件是无状态，它无法实例化，没有任何的生命周期和方法。创建函数式组件也很简单，只需要在模板添加 functional 声明即可。一般适合只依赖于外部数…"}, {"id": "6990555039706120206", "title": "前端如何写后台管理系统登录验证详细流程和代码（框架Vue）", "desc": "项目前景：后台管理系统是公司必备的，从前些年由于技术人员的稀有，导致后台系统非常昂贵，近些年IT行业的快速发展，使得一些中小型公司开始自己写后台，自己维护，从而获取利益的最大化。 今天是一个简单的后台"}, {"id": "7007259800916459527", "title": "vue(五) - vue.js组件", "desc": "组件用于封装页面的部分功能，将功能的结构、样式、逻辑代码封装为整体。 提高功能的复用性与可维护性，更好的专注于业务逻辑。 组件使用时为自定义 HTML 标签形式，通过组件名作为自定义标签名。 组件注册"}, {"id": "6950802238524620837", "title": "理解Vue SSR原理，搭建项目框架", "desc": "一、为什么使用SSR ？在传统vue单页面应用中，页面的渲染都是由js完成，搜索引擎爬虫抓取工具无法爬取页面的内容，如果 SEO 对你的站点很重要，则你可能需要服务器端渲染(SSR)解决此问题。"}, {"id": "6985104364813680670", "title": "【源码学习】你知道data，props，methods初始化的顺序么？ (附思维导图)", "desc": "本文继续学习其中的一个初始化过程，响应式原理的核心部分 initState 。也就是 data，props，methods，watch，computed 的初始化过程。"}, {"id": "6994296888065261599", "title": "Vue3从0到1组件开发-布局组件：Card卡片", "desc": "Vue3从0到1组件开发，布局组件的开篇，从简单的Card开始，一步步的理解布局组件的构思、开发思路。"}, {"id": "6991354556349153293", "title": "温故而知新，浅入 Vue scoped 原理｜8月更文挑战", "desc": "最近在思考如何做系统中的样式隔离，为了借鉴参考，浅入了解了一下Vue scoped的原理，发现原理挺简单！分享给大家。"}, {"id": "6991029480223408165", "title": "Vue的常用指令详细解析你知道吗？", "desc": "总结一笔： 1.自定义事件的事件名字大小写问题 跟组件和 prop 不同，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。举个例子，如果触发一个 camelCa"}, {"id": "7003255603673956359", "title": "你必须要知道的vue打包技术rollup", "desc": "前言 最近在写一个前端工具库，刚开始用webpack搭建，但是偶然间发现rollup的介绍，发现rollop更满足我的需求。这篇文章介绍了用rollup搭建一个简单版的js工具库。 需求 代码层面 1"}, {"id": "7007240585396518926", "title": "vue 图片添加水印", "desc": "用两种不同的方法实现图片添加水印： 1、用canvas实现图片添加水印 2、利用dom-to-image实现图片添加水印"}, {"id": "6972098481510940702", "title": "哇！原来 Vue 的版本代号这么有意思的？", "desc": "村里刚通网，冲浪‍偶然发现 Vue 从【V0.9版本】开始后的每个版本代号竟然都是那些经典动漫的名字！ 本瓜的小心心总是会被这些小细节打到！ 本篇就和大家来一起考古下 Vue 的版本代号，回忆这些经典"}, {"id": "7007248567068803109", "title": "vue 工程pdf在线预览", "desc": "​  使用pdfjs-dist实现vue工程pdf在线预览 1、安装（我安装的是这个版本，安装最新的版本在文件中import时会报错：You may need an appropriate loade"}, {"id": "6899334776860180494", "title": "Element3开发内幕 - Vue CLI插件开发", "desc": "我们团队的Element发布了。为了让大家使用起来便捷。需要加入vue-cli和vite生态之中。 今天先说说vue-cli插件如何开发。 Vue CLI工具是Vue生态在Vue生态中负责工具基础标准化。他使用一套基于插件的架构。 比如vue-router、vuex或者安装组件…"}, {"id": "6961545472204865572", "title": "Vue 源码解读（10）—— 编译器 之 生成渲染函数", "desc": "深入理解渲染函数的生成过程，理解编译器是如何将 AST 变成运行时的代码，也就是我们写的类 html 模版最终变成了什么？"}, {"id": "6844904009162063885", "title": "15个 Vue.js 高级面试题", "desc": "1. 渲染项目列表时，“key” 属性的作用和重要性是什么？ 渲染项目列表时，key 属性允许 Vue 跟踪每个 Vnode。key 值必须是唯一的。 如果没有使用 key 属性，并且列表的内容发生了改变（例如对列表进行排序），则虚拟 DOM 宁愿使用更新的数据来修补节点，来反…"}, {"id": "6981232153233195039", "title": "实战：用 Vue3 实现 Image 组件，顺便支持懒加载", "desc": "在一个完善的 web 项目中，图片是极为常见的页面展现元素之一，大部分前端开发者做的 Image 上的优化，可能仅是想办法压缩图片，减少体积、或者搞个懒加载减缓页面加载压力。"}, {"id": "6911662617178144776", "title": "分享一个一分钟就学会的vue小技巧（真的一看就会～～）", "desc": "及通过css定义变量的方式，将变量在行内注入，然后在style中使用var()获取我们在行内设置的数据即可。"}, {"id": "6995181489960779806", "title": "我为 Devui 开发的脚手架", "desc": "前言 最近在掘金上看到 DevCloud 团队在招小伙伴共同建设 VueDevui 项目，关键词：vue3、vite、ts、ui，是符合我的类型，开打开打。 VueDevui 是我第一次参与开源建设的"}, {"id": "6844903600737484808", "title": "Vue.js中 watch 的高级用法", "desc": "上面的代码的效果是，当我们输入firstName后，wacth监听每次修改变化的新值，然后计算输出fullName。 这里 watch 的一个特点是，最初绑定的时候是不会执行的，要等到 firstName 改变时才执行监听计算。那我们想要一开始就让他最初绑定的时候就执行改怎么办…"}, {"id": "6967706999706353672", "title": "Vue3对比Vue2", "desc": "vue3的出现就是为了解决vue2的弊端，composition API很好的解决了逻辑复用的问题，而且vue3源码就是用ts写的，对ts的支持非常好。我们在开发项目过程中可以使用ts的加持，使代码更"}, {"id": "6974311380790804511", "title": "vue 组件+组件化开发", "desc": "1.什么是组件 拥有专属的HTML和CSS+JS+数据的可重用的页面独立功能区域 2.为什么使用组件 因为重用!"}, {"id": "6891951171116728334", "title": "深究 Vue 响应式原理", "desc": "Vue 的响应式原理好像挺神奇的，但是仔细观察，不用看源码也能明白其中的原理。 可以发现，一个简简单单的对象经过 Vue 之后就变得比较复杂了，多了对原来属性 n 的 getter 和 setter，那么 Vue 又是怎样实现数据响应式的呢？先从 getter 和 setter…"}, {"id": "6943134795664883743", "title": "初识Vue3.0", "desc": "直接选第二项，cli会自动下载依赖，然后我们进入project-name目录，这样vue3的脚手架就安装好了。 那我就改成createApp(App).use(router).mount('#app')，Ctrl + s运行，object is：not function。看了v…"}, {"id": "6922973420120440839", "title": "vue-router 守卫模式", "desc": "导航守卫分类导航守卫按照维度分三个：全局的：进入任何一个路由都会执行beforeEach：进入路由前执行beforeResolve：在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析"}, {"id": "6844904045891551240", "title": "Vue组件通信方式", "desc": "Vue组件通信方式主要有props, eventbus, vuex, 自定义事件等等。。。 1. 事件总线eventbus-发布订阅模式 大致原理是定义一个全局的事件存放数组，当进行事件订阅时，将事件存放到全局的数组里；当发布事件时，则执行全局事件数组里存放的对应事件。这是比较…"}, {"id": "6844904183267590152", "title": "浅析 Vue 的双向绑定", "desc": "Vue 中的双向绑定是指当我们改变 data 中的一个变量时，页面中该变量也会随之跟新，我们在页面中改变一个变量时，data 中变量的值也随之变化。 通常我们使用 v-model 来实现双向绑定，并且 v-model 只能在 input、selsect、textarea 元素和…"}, {"id": "6844903577979191310", "title": "vue-design 桌面端页面可视化构建程序", "desc": "用Vue和Electron开发最好的页面可视化构建程序，目前支持功能： 1. 使用electron构建的桌面端应用 2. 通过简单的配置引入UI组件库 3. 通过可拖拽、可编辑的组件设计页面 4. 可编辑页面css 5. 保存为.vue文件 6. 保存/导入一个项目"}, {"id": "6936141557913354253", "title": "element-ui 时间日期选择器的开始时间和结束时间做限制", "desc": "-接着就是对时间做限制，看过源码后，发现可以绑定input事件，当你点击日期选择器的某一天时就会触发此函数，因此当一开始确认了开始时间，那么此时就可以对结束时间的时分秒做限制。 -以上只是对开始选择的操作，结束的操作基本相同，可以参考上面即可。"}, {"id": "6950210814737399821", "title": "Vue 弹窗组件传值问题", "desc": "刚入门学习，记录一下踩的坑，垃圾代码写着写着就会优雅的了，项目用到Vue及ant design。 一、应用场景： 1. 点击“设置”按钮，弹出“设置表达式”弹窗（子组件），手动设置或修改表达式"}, {"id": "6950189618327191566", "title": "vue使用问题整理", "desc": "vue的v-if和v-show 使用时机首先说 v-if初始的时候初始值为false的组件不会渲染,也不会触发任何一个生命周期钩子函数,由此可见v-if 的渲染是有惰性的初始值为true的组件会进行渲"}, {"id": "6916029701123211271", "title": "Vue 源码笔记 - initState 相关", "desc": "iniState 是 vm._init 中在 initInject 和 initProvide 中间的一步初始化操作，用于处理 props，methods，data，computed，watch 属性的初始化。iniState 一开始就有个 vm._watchers = [] …"}, {"id": "6844903828840513543", "title": "【译】Vue 的小奇技（第十三篇）：在 Nuxt.js 中重定向 404 页面", "desc": "由于译者最近跳槽到了新公司，上手新业务，有两周没有及时更新译文了，时效性实在是差，还请各位读者见谅。 第一，这周三 10 号，中欧夏令时的正午 12 点，我们将会开售 VueDay 的门票，届时会在阳光明媚的西班牙亚里坎提举行。这是一个由社区驱动的 Vue.js 技术研讨会，会…"}, {"id": "6844904019517767693", "title": "vue源码学习第一篇，import vue后发生的事情", "desc": "1. vue工程结构 2. Vue 3. 剩余挂载"}, {"id": "6844903855184936974", "title": "d2-crud动态修改表单中的组件", "desc": "最近在用d2-crud开发后台，d2-crud是一套基于Vue.js 2.2.0+和Element UI 2.0.0+的表格组件。D2-Crud 将 Element 的功能进行了封装，并增加了表格的增删改查、数据校验、表格内编辑等常用的功能。大部分功能可由配置 json 实现，…"}, {"id": "6844903505510039559", "title": "前端每周清单第 36 期：深入 Vue 2.5 类型增强、Puppeteer 端到端测试、PayPal 跨域套装", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 MSDN 将 7700 余份文档重定向到 …"}, {"id": "6899005015067721742", "title": "vue合并单元格行列一起合并", "desc": "一：vue合并单元格行列一起合并看图，合并如下图1.数据如下：2.在el-table中设置属性:span-method=\"objectSpanMethod\"，如图下3.代码如下，每一列要设置不同的ke"}, {"id": "6844903827590610951", "title": "间歇性笔记--Vue组件间通信传值的各种方式", "desc": "当希望prop在子组件可以当做本地data使用时，可以在data中复制localData=this.data。但是若prop为数组或者对象时，需使用深拷贝； 当希望在子组件对prop进行转换时，可以使用计算属性转换。但是若prop为数组或者对象时，需使用深拷贝； 可以通过插槽的…"}, {"id": "6942738932836597768", "title": "svg引入及问题解决", "desc": "项目使用 vue + webpack + typescript。 所使用的svg图标为从iconFont上下载得到，需要引入至项目中。 1. 直接引入 首先解决如何引入的问题。 此时通过import得到的为对应的svg的路径，但这并不是我们想最终得到的。 2. 使用svg-sp…"}, {"id": "6844903637127266311", "title": "vue-router爬坑记", "desc": "简介因为我们用Vue开发的页面是单页面应用,就相当于只有一个主的index.html,这时候我们就不能使用a标签来进行页面的切换了,所以这时候我们今天的主角Vue-Router就闪亮的登场了Vue-R"}, {"id": "6936051450761969700", "title": "vue生命周期详解", "desc": "vue所有功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。学习实例的生命周期，能帮助我们理解vue实例的运行机制，更好地利用钩子函数完成我们的业务代码。下图说明了实例的生命周期、你不需要立马弄明白所有东西、…"}, {"id": "6844903837774397447", "title": "[手把手系列之]Docker 部署 vue 项目", "desc": "Docker 作为轻量级虚拟化技术，拥有持续集成、版本控制、可移植性、隔离性和安全性等优势。本文使用Docker来部署一个vue的前端应用，并尽可能详尽的介绍了实现思路和具体步骤，以方便有类似需要的同学参考。 /api/json 接口 404，当然此时这个接口还不存在，暂时写到…"}, {"id": "6844903601416978439", "title": "面试官: 实现双向绑定Proxy比defineproperty优劣如何?", "desc": "双向绑定其实已经是一个老掉牙的问题了,只要涉及到MVVM框架就不得不谈的知识点,但它毕竟是Vue的三要素之一. 可以实现双向绑定的方法有很多,KnockoutJS基于观察者模式的双向绑定,Ember基于数据模型的双向绑定,Angular基于脏检查的双向绑定,本篇文章我们重点讲面…"}, {"id": "6844903848050589704", "title": "7个有用的Vue开发技巧", "desc": "随着组件的细化，就会遇到多组件状态共享的情况，Vuex当然可以解决这类问题，不过就像Vuex官方文档所说的，如果应用不够大，为避免代码繁琐冗余，最好不要使用它，今天我们介绍的是vue.js 2.6新增加的Observable API ，通过使用这个api我们可以应对一些简单的跨…"}, {"id": "7003506780890202126", "title": "使用Vue + fabric.js构建标注工具的细节", "desc": "上篇文章大致介绍了使用Vue + fabric.js构建标注工具的流程，本篇则将其中的一些细节以及fabric的踩坑进行补充 1.鼠标从右向左画框 承接上篇的描述，使用fabric在canvas上画标"}, {"id": "6919638463168020488", "title": "让你的vue项目体积更小点，打包速度更快点", "desc": "以上是笔者平时针对自己项目或者公司项目累积的一点vue项目打包优化知识，也许你有更好的优化点，或者更好的优化方案，欢迎提供案例，学习学习。"}, {"id": "7001879601156718605", "title": "17个vue的性能优化选项，面试强心剂", "desc": "无状态的组件可以标记为函数式组件优化性能，函数型组件中，生命周期的耗时处理将不再操作，会作为一个函数进行处理，所以整体页面的效率会提高"}, {"id": "7005389447193690125", "title": "Element UI 使用 table 组件设置 el-table-column 宽度width为百分比无效的问题解决方案", "desc": "关于 Element UI 使用 table 组件设置 el-table-column 宽度width为百分比无效的问题解决方案"}, {"id": "6844904056893243400", "title": "2年vue项目实战经验汇总", "desc": "vue作为前端主流的3大框架之一，目前在国内有着非常广泛的应用，由于其轻量和自底向上的渐进式设计思想，使其不仅仅被应用于PC系统，对于移动端，桌面软件（electronjs）等也有广泛的应用，与此诞生的优秀的开源框架比如elementUI，iView， ant-design-v…"}, {"id": "6930779336530198536", "title": "动态表单form-create2.5版本来啦,帮你轻松搞定表单", "desc": "form-create 是一个可以通过 JSON 生成具有动态渲染、数据收集、验证和提交功能的表单生成组件。支持3个UI框架，并且支持生成任何 Vue 组件。内置20种常用表单组件和自定义组件，再复杂的表单都可以轻松搞定。 1. 自定义组件 2. 自定义布局 3. 组件前后缀 …"}, {"id": "6987909222646153246", "title": "Vue defineAsyncComponent Api 这些知识学习起来~~", "desc": "使用 Vue3 的 DefileAsyncComponent功能可让我们懒加载组件，说白了就是创建一个只有在需要时才会加载的异步组件。"}, {"id": "7004804052122861582", "title": "vue小小知识点", "desc": "常见修饰符 stop修饰符的作用是阻止冒泡 once修饰符的作用是，事件只执行一次 prevent修饰符的作用是阻止默认事件（例如a标签的跳转） sync 当父组件传值进子组件，子组件想要改变这个值时"}, {"id": "6935231099102560293", "title": "京东 Vue3 组件库闪亮登场", "desc": "京东零售开源项目 NutUI 是一套京东风格的轻量级移动端 Vue 组件库，是开发和服务于移动 Web 界面的企业级产品。经过长时间的开发与打磨，NutUI 3.0 终于要和大家见面了！3.0 版本在技术和视觉方面都做出了较大改进，让组件看起来更绚丽，用起来更舒服。 1. 拥抱…"}, {"id": "6860703641037340686", "title": "如何用 Typescript 写一个完整的 Vue 应用程序", "desc": "Vue 是一个惊人的，轻量的渐进式前端框架。因为 Vue 是灵活的，所以用户不需要使用 Typescript。但是不像 Angular，老版本的 Vue 并没有很好的支持 Typescript。因为这点，大多数 Vue 应用程序都是直接使用 JavaScript 写的。 现在随…"}, {"id": "6903796293445877773", "title": "Vue组件通信方式及其应用场景总结", "desc": "相信实际项目中用过vue的同学，一定对vue中父子组件之间的通信并不陌生，vue中采用良好的数据通讯方式，避免组件通信带来的困扰。今天笔者和大家一起分享vue父子组件之间的通信方式，优缺点，及其实际工作中的应用场景 prop通信方式大家最常见的，也是最常用的父子组件通信类型，我…"}, {"id": "7005568311085760520", "title": "Vue学习之---computed计算属性中你不曾注意到的小细节", "desc": "Vue学习之---computed计算属性 1.当写computed属性的时候要注意 所有的计算属性，都要定义在computed 属性中； 计算属性在定义的时候，要定义成方法的形式，而且定义成方法的形"}, {"id": "6940020429692076039", "title": "🎉🎉开源1年半，newbee-mall 收获 9K star｜项目复盘", "desc": "总结了一些真心话，对于如何做好一个开源项目有很大的帮助。本文将从项目背景、项目的开发历程、项目规划、技术栈总结进行项目复盘，讲一讲如何保持开源项目的生命力、如何选择优化的方向、开源项目究竟会帮助到谁？ 开源项目 newbee-mall 项目是一套电商系统，包括 newbee-m…"}, {"id": "7002952820882145293", "title": "VIte + Vue3 + ElementPlus仿写掘金抽奖", "desc": "字节跳动前端青训营大作业，使用vite + vue3 来初始化项目，学习vue3与vue3组件化开发"}, {"id": "7000904036996087838", "title": "我写了一个vue全局状态管理器，被喷的五体投地", "desc": "const store = new Store({ a: 1 }); app.use(store); ----------------- this.$state.a = 2;"}, {"id": "6997966632022704135", "title": "Vue源码（十）插槽原理", "desc": "Vue中实现了具名插槽和作用域插槽两种，从源码角度分析两种插槽是如何实现的，以及他们的区别。包含v-slot形式的具名插槽的实现原理。"}, {"id": "6903335881227108366", "title": "我是如何阅读源码的", "desc": "最近写了很多源码分析相关的文章，React、Vue 都有，想把我阅读源码的一些心得分享给大家。 说到看源码，很多人都有个误区，觉得看源码必须要到 github 上把完整的代码 clone 下来，认为只有把完整的代码下载下来，才能开始愉快的学习。 这里我们先拿 React 举例，…"}, {"id": "6865126297602818056", "title": "[译] Vue 3 迁移策略 —— data 选项（破坏性改动）", "desc": "data 选项只可声明为 function，不可再使用纯粹的 object 来声明。 在 2.x 中，开发者可以使用 object 或 function 来声明 data 选项。 尽管这种方式在共享根实例状态方面提供了一些便利，但是也导致了可能在根实例上出现混淆的情况。 在 3…"}, {"id": "6894879037958094862", "title": "Vue3源码解析-响应式原理", "desc": "Vue3对Vue2中的响应式原理使用Proxy进行了重写，本文我们将对Vue3响应式的源码进行分析。 由于篇幅问题这里我们只对reactive类型的响应进行分析，其他流程和这个类似，只是根据不同的参数进入不同的处理流程。 在Vue3中我们可以通过Composition API而…"}, {"id": "6844904050928910343", "title": "JS的作用域、闭包", "desc": "作用域是使用一套严格的规则来分辨哪些标识符对那些语法有访问权限。通俗的讲，作用域就是查找变量的地方，作用域可以分为动态作用域个静态作用域; 结合上面的例子我们在函数内部查找a变量的时候，先在函数作用域中查找，没有找到，就去上一级的作用域去找，直到找到全局作用域，也就是在查找标识…"}, {"id": "6844903780685709326", "title": "连等的思考", "desc": "年前写了一篇博客，立了一个flag说是以后一个星期写一篇博客，但被年前的997和过年给耽误了，算了一下一共欠了四篇博客，后续会补上从18年到这篇博客之前都是在简书上写，当然写的都是一些浅显一点的东西，"}, {"id": "6844903926010118158", "title": "【Vue原理】Render - 源码版 之 主要 Render", "desc": "如果你觉得排版难看，请点击下面链接或者拉到下面关注公众号也可以吧【Vue原理】Render-源码版之主要Rendercompile我们已经讲了九篇的内容了，终于走到了render，今天就来给自己记录下"}, {"id": "6844903896171675656", "title": "关于webpack require.context() 的那点事", "desc": "我们这里只研究require.context()怎么回事，不是讲解vuex怎么改造。 总结 require.context() 用法就是 遍历目录下的文件名，再用文件名来加载文件中的模块。 还是发一下吧。。直接上代码 获取到文件名map并使用reduce遍历，按文件名作为key…"}, {"id": "6951656139268456455", "title": "基于Element的弹窗分页选择器", "desc": "弹窗分页选择器el-dialog-select，适用于复杂场景下的数据选择，支持单/多选，跨页选择，选中状态反显。Attributes参数说明类型可选值默认值value / v-model绑定值，必填"}, {"id": "6844903844896309261", "title": "你真的知道如何使用Vue.set吗", "desc": "一般想到这个api的开发者，都是遇到明明更改了数据，然而浏览器的dom却没有更新新的数据，有时候会出现操作一下其他数据，之前更新的数据才渲染到dom，有时候不管怎么操作都不会更新，这种类似的bug一直让很多开发者苦恼。 首先让我们看看尤大的文档。 文档写的很明白，向响应式对象中…"}, {"id": "6844904080771563534", "title": "Vue3将要使用Proxy作为数据驱动，不想进来看看吗？", "desc": "尤大大在开发者大会上说新版的Vue会采用Proxy作为数据驱动，来代替原本的 defineProperty。今天聊一聊使用Proxy的好处和Vue是怎样实现数据驱动的。 这个版本的底层数据驱动是通过Object.defineProperty 方法来实现了getter/sette…"}, {"id": "6855618387377946638", "title": "Vue.js 3 正式进入 RC 中", "desc": "进入RC阶段意味着Vue 3核心的API和实现均已稳定。原则上，我们不希望在最终版本发布之前引入新的主要功能或做出重大更改。现在，大多数官方框架部件也提供了v3支持。请在此处查看最新状态。 Vue文档团队已经更新了v3文档，现在可以在v3.vuejs.org上使用！这是一项艰巨…"}, {"id": "6881555347484442631", "title": "「Vue」浅入分析 Vue 两个版本", "desc": "webpack 通过 vue-loader 就可以引入 compiler, 会把 vue 文件里的 HTML 或者 template 转为 h 函数,可以做到和完整版一样的事，节约文件大小，还能提升用户体验。"}, {"id": "6844903783747551239", "title": "【译】Vue 的小奇技（第七篇）：在 vue-multiselect 基础上创建 ImageSelect 组件", "desc": "在 第五篇文章 中，两条 tips 让你学习到了自适应组件的概念，以及怎么通过使用 v-bind 和 v-on 来代理 props 和 events，继而创建自适应组件。 现在是时候实践一下了。在此之前，要问一下，你知道 vue-multiselect 这个第三方库吗？这是一个…"}, {"id": "6844904196836163597", "title": "学习vue源码（14）深入学习diff", "desc": "这一节，先对diff进行简单的描述，不会出现任何的源码，只是为了帮助大家建立一种思路，了解下 Diff 的大概内容。 1. Diff 作用 2. Diff 做法 3. Diff 比较逻辑 4. Diff 简单例子 2. 从新建实例到开始diff 这一节不会对源码深入研究，而是跟…"}, {"id": "6844904196425138183", "title": "轻松掌握纯前端js框架---VUE", "desc": "由于小编时间经历有限，所了解所有VUE的知识分为私企与大家分享，内容如有处处还请您点拨，指正。TEL/V：15200025778 一. 什么是VUE: (1). 第三方开发: 下载才能用 (2). 基于MVVM: ? (3). 渐进式: 可以在项目中逐步引入vue相关功能，很容…"}, {"id": "6844903600490037256", "title": "快速构建项目vary-admin：vue+vue-router+less+webpack 4+es6", "desc": "Vue是一个轻量级的前端库，是当下最火热的前端MVVM框架之一。网上关于Vue的教程已经很多，所以这一篇文章并不是教你如何学习Vue，而是教你如何快速的构建一个Vue项目，同时给你提供一个可以直接使用的Vue项目。"}, {"id": "6844903582383210504", "title": "记手撸一个轮播组件的踩坑之旅", "desc": "因为前前后后做了两种实现，第二种是在第一种的基础上优化的（其实第一种没做完），所以分开来讲。 图中红线区域即是我们的视口（其他图片会被隐藏）。 这个轮播只展示5张图片，但是在它的首尾各还有两张图片，在图1前面放置了图5，在图5后面放置了图1。 之所以这么做，是为了做无限滚动。 …"}, {"id": "6868543314204262414", "title": "🌈  Vue2的生命周期", "desc": "1. 生命周期是什么？ Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。 2. 各个生命周期的作用 3. 生命周期示意图"}, {"id": "6974767195192557581", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】002-Vue语法基础：Vue中的应用和组件的基本部分解析、生命周期", "desc": "二、Vue语法基础 1、Vue中的应用和组件的基本部分 代码 运行结果 2、理解Vue的生命周期函数* 生命周期图 代码 运行结果 关于模板 Vue3的生命周期函数图 Vue3全部的生命周期钩子与Vu"}, {"id": "6844903624594685960", "title": "Vue.js项目中管理每个页面的头部标签的方法", "desc": "在 Vue SPA 应用中，如果想要修改 HTML 的头部标签，如页面的 title，我们只能去修改index.html模板文件，但是这个是全局的修改，如何为每个页面都设置不一样的 title 呢？下面介绍两种方法。"}, {"id": "6921267970240937992", "title": "从原理上实现Vue的ssr渲染", "desc": "本篇文章将从一个实战案例的角度逐步解析vue服务器端渲染的具体实现方式,整个过程不使用第三方服务器端渲染框架,以讲解底层实现原理为主. 服务器端渲染(ssr)主要解决了以下两个问题. 提升了首页的加载速度,这对于单页应用而言有明显的优势. 服务端渲染优化了seo.使用服务器端渲…"}, {"id": "6844904143027617800", "title": "基于@vue/cli 3.x的从0到1搭建Vue项目的实践", "desc": "Vue官方的脚手架工具Vue Cli有了一次较大的更新，相比于2.x版本，新版本3.x中对项目的搭建，相关包、插件的安装都有了新大的不同。本文即立足于此，选择@vue/cli 3.x版本的脚手架工具，动手实践从0到1搭建Vue项目，包含了项目的初始化，以及Vue全家桶(VueR…"}, {"id": "6922647389560012813", "title": "Vue 3自定义指令开发", "desc": "在Angular和Vue中都有Directive的概念，我们通常讲Directive 翻译为“指令”。 在计算机技术中，指令是由指令集架构定义的单个的CPU操作。在更广泛的意义上，“指令”可以是任何可执行程序的元素的表述，例如字节码。 在Vue开发中我们在模板中经常会使用v-m…"}, {"id": "6906434268827353096", "title": "Vue官方文档解读系列(一)：禁用 Attribute 继承", "desc": "本文主要根据官方文档中的禁用Attribute继承一栏，阅读后加上自己的一些理解和例子的补充。因为在参阅Vue官方文档过程中，有一些内容作者没有加上例子配合解释(可能觉得太简单了吧哈哈)，所以有些含糊不清，初学者不是很能理解，所以写了这个系列。在自己的理解上加上一些例子，希望能…"}, {"id": "6844903861077934088", "title": "摩拜前端周刊第11期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～一文读懂前端缓存地址:https://zhuanlan.zhihu.com/p/4"}, {"id": "6844903503899394055", "title": "[译] Vue 2.5 发布了", "desc": "我们很高兴宣布 Vue 2.5 Level E 的发布！本次发布包括多个功能提升并且我们推荐你查看发布说明来获取完整详细信息。 在这篇文章中，我们将重点介绍一些更重要的的变化：更好的 TypeScript 集成，更好的错误处理，更好地支持单文件组件中的功能组件以及与环境无关的服务"}, {"id": "6844904181401141262", "title": "学习vue源码（2） 手写Vue.extend方法", "desc": "使用基础Vue构造器创建一个“子类”，其参数是一个包含“组件选项”的对象。data选项是特例，在Vue.extend（）中，它必须是函数。 （3）全局API和示例方法不同，后者是在Vue的原型上挂载方法，也就是在Vue.prototype上挂载方法，而前者是直接在Vue上挂载方…"}, {"id": "6844903832636358669", "title": "如何在iView中动态创建表格", "desc": "最近在使用iView中的表格组件时，碰到许多坑和疑惑，仔细研究了一下table组件，发现官方文档讲的不是很清楚，本文将介绍并使用table组件，做一个动态创建表格的demo，效果如下图。欢迎到我的博客访问。 查看官方文档可知，表格中主要的两个属性分别为columns和data。…"}, {"id": "6844903827406061576", "title": "探讨父组件和兄弟组件的生命周期", "desc": "当我们被问起vue的生命周期的时候，我们自然就回答到有beforeCreate,created,mounted,updated,destroy。就是一个生命的开始和结束。这次我们探讨的是我们有兄弟组件的时候，各个组件在执行钩子函数的时候的执行顺序是怎么样的，按照之前的理解：是先…"}, {"id": "6898306667771854861", "title": "浅析Vue中computed与watch的区别", "desc": "computed是计算属性的意思，会根据你所依赖的数据动态显示新的计算结果，并且自动缓存。这个值在调用的时候可以当属性一样用， 不需要加括号 watch是监听的意思，它更像是data的数据监听回调，如果某个属性变化了，就去执行一个函数的值。这个值可以是值也可以是方法名，或者包含…"}, {"id": "6844903993995427853", "title": "迫于菜🐶 - Vue.js 源码（一）", "desc": "原本并非技术科班出身的我，是在泥地里摸爬滚打一年后才算入门前端，我都时刻谨记“纸上得来终觉浅，绝知此事要躬行。”，作为一名合格的键盘侠，只有一切落到键盘上，才会有所收获嘛。 前几天钉钉提示我入职一周年，再一次让我感受到时间过得好快，就是在我们程序员的指尖溜走的。 那么回顾这一年…"}, {"id": "6844904041005187079", "title": "Vue2.0源码阅读笔记（十一）：自定义事件", "desc": "Vue 事件分为两类：原生DOM事件、自定义事件。其中原生DOM事件既可以在元素上使用，也可以在组件上使用，在组件上使用时要添加.native修饰符。 Vue 通过调用原生API来处理元素和组件上绑定的原生DOM事件，在组件上的自定义事件则是由基于发布/订阅模式的事件中心机制完…"}, {"id": "6844903630147944455", "title": "vue服务器端渲染（SSR）实战", "desc": "SSR(Server-Side Rendering)，在SPA(Single-Page Application)出现之前，网页就是在服务端渲染的。服务器接收到客户端请求后，将数据和模板拼接成完整的页面响应到客户端，客户端将响应结果渲染出来。如果用户需要浏览新的页面，则需要重复这…"}, {"id": "6844903506982207496", "title": "手写Vue组件踩坑与心得", "desc": "记录一下自己在尝试自己一个独立的Vue组件时，遇到的一些坑和一些小经验 更新了关键字 更新了父子组件间的$emit和$on非同一组件无效传递的情况"}, {"id": "6924685537185890318", "title": "表单与v-model", "desc": "基本用法v-­model:input和textarea可以用于input框，以及textarea等注意：所显示的值只依赖于所绑定的数据，不再关心初始化时的插入的value单选按钮：单个单选按钮，直接用"}, {"id": "6844904205736476679", "title": "vue组件通信的10种方法", "desc": "常用方法1,Props（父子组件之间）2,Eventbus3,Vuex创建唯一的全局数据管理者store,通过它管理数据并通知组件状态变更边界情况4,$parent（父子组件之间，兄弟组件之间通信可以"}, {"id": "6944972392963768328", "title": "21 天学会写个仿 Vue3 的轮子：（四）升级响应式模块 --（上）", "desc": "目前已经有了简单的渲染器模块和响应式模块，接下来我们要将二者逐步升级，从一本科技升到二本。 因为响应式模块，跟其他模块的耦合度很低，我们先从它下手。 并且，开始建立单元测试，让我们这个玩具开始变得更正式一点。 一些针对数据特殊情况（corner cases）的检查。 数据是数组…"}, {"id": "6844903830392406030", "title": "Vue2.0源码阅读笔记（三）：计算属性", "desc": "计算属性是基于响应式依赖进行缓存的，只有在相关响应式依赖发生改变时才会重新求值，这种缓存机制在求值消耗比较大的情况下能够显著提高性能。 Vue 在做数据初始化时，通过 initComputed() 方法初始化计算属性。 首先将变量 watchers 与变量 _computedW…"}, {"id": "6844903512896176142", "title": "另辟蹊径：vue单页面，多路由，前进刷新，后退不刷新", "desc": "另辟蹊径：vue单页面，多路由，前进刷新，后退不刷新"}, {"id": "6844903961238241293", "title": "VUE 组件间通信---单向数据流", "desc": "所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。 每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue …"}, {"id": "6984222622477189127", "title": "2021.7.13 Vue--绑定样式，条件渲染，列表渲染", "desc": "绑定样式，条件渲染，列表渲染。 要加强对Vue源码的理解：Vue框架时通过什么方式进行对象属性的监测的？"}, {"id": "6998924555347558414", "title": "Vue3+SpringBoot+WangEdit 完成图片/视频 上传功能", "desc": "开发文档 说明：本套教程核心讲解如何上传图片和视频，并出现回显功能 1.功能展示 请见页尾 2.环境配置： 后端 SpringBoot 前端 Vue-cli Vue3 wangeditor@4.6.3"}, {"id": "6954996635617198093", "title": "Vue3 的新特性 —— Composition-Api", "desc": "Vue3 的新特性 —— Composition-Api 前言 随着Vue3.0正式的发布，正如你所期望的那样，Vue3.0带来了很多令人兴奋的新功能。今天我们就来探究一下新特性(Compositio"}, {"id": "6989242715078656008", "title": "Vue中scoped及/deep/解析", "desc": "在Vue.js中，避免样式污染我们会用到scoped，但是这同样带来一个问题，如何修改第三方组件样式。本文将详细介绍scoped和/deep/，帮助大家理解它们有何作用，"}, {"id": "6990645997080674311", "title": "vue手写城市组件", "desc": "1. 预览城市组件 2. 组件基础结构代码 3. 实现功能代码： 4 注意点 4.1 需要传递的值 从父组件传进来的值，是为了要默认显示在页面中的 4.2 在组件外部点击隐藏 具体功能看下图： 5 注"}, {"id": "6972419102958682125", "title": "Vuex的使用", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。state是响应式的，如果在组件中使用..."}, {"id": "6967275096192843807", "title": "奇葩需求之一个滚动加载的表格", "desc": "今天在系统开发中遇到了这么一个问题： 后端一次性返回上百条的数据，我需要把返回的数据全部显示在表格里，而且甲方爸爸明确指定了表格是不允许使用分页的。 可是当使用a-table装载上百条数据时，页面出现"}, {"id": "6989882774618374151", "title": "# 基于Vue的架构设计", "desc": "前言 架构包含非常广泛的概念与内容，架构的核心目的是为了提高效率、降低成本、保障质量， 同时需要结合实际业务情况综合考虑，为未来提供可持续发展空间。 目前在公司我负责做一个运维服务云平台中后台管理系统"}, {"id": "6932298745329483784", "title": "Vue封装组件并发布到npm", "desc": "在vue的插件模式中提供了一个 install。 Vue的插件必须提供一个公开方法 install，这个方法会在你使用Vue.use(yourPlugin)时被调用。这样也就将插件注入到了Vue的全局,所有的子组件都能够使用"}, {"id": "6866802944697139213", "title": "基于Vue实现一个有点意思的拼拼乐小游戏", "desc": "笔者去年曾写过一个类似的拼拼乐小游戏，技术栈采用自己的Xuery框架和原生javascript实现的，脚手架采用gulp来实现，为了满足对vue的需求，笔者再次使用vue生态将其重构，脚手架采用比较火的vue-cli。 为了加深大家对vue的了解和vue项目实战，笔者采用vue…"}, {"id": "6969079432371765262", "title": "vue3 JSX 从零开始", "desc": "本文讲解了vue中的jsx 基本语法及详细使用案例。新手友好。适合新手观看。需要了解vue相关知识。友情提示请阅读官方文档。"}, {"id": "6844903608140431368", "title": "Vue单页及多页应用全局配置404页面实践", "desc": "前后端分离后，控制路由跳转的责任转移到了前端，后端只负责给前端返回一个html文档以及提供各种接口。下面我们用作例子的两个项目，均采用vue作为基础框架，一个是SPA应用，另一个是多页应用，均由前端进行路由控制及渲染的。 无论单页还是多页，我的实现思路是总体配置404页面的思路…"}, {"id": "6997060777471377421", "title": "Vue中 子组件向父组件传值 及 .sync 修饰符 详解", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 1. 之前的写法 子组件中可以通过 $emit 向父组件通信，通过这种间接的方式改变父组件的 data，从而实现改变子组件 props 的"}, {"id": "6844903751057145869", "title": "奇技淫巧 - Vue Mixins 高级组件 与 Vue HOC 高阶组件 实践", "desc": "1. Mixin是什么 2. 怎么解决需求 3. 原理 2. 怎么解决需求 3. 原理"}, {"id": "6844903873174306824", "title": "[英] Vue 社区最“黑暗”的一天", "desc": "在尤小右最新发布的 3.0 更新了 RFC 之后，Reddit、Hacker News 等社区内出现大量的负面争议和讨论，甚至包含了不少无意义的“谩骂”此文解释了事件及相关 3.0 更新真正的意义和价值！"}, {"id": "6948405540703698974", "title": "通过分析ElementUI的源码，我学到了这些知识点（上）", "desc": "本例以element-ui@2.14.0作为参考，从一些常用的组件中根据其中涉及的Vue知识点为大家分析其在实际开发中的作用。 element-ui/lib存放webpack打包之后的文件。 element-ui/packages存放element-ui提供的所有组件。 src…"}, {"id": "6889246674401624078", "title": "利用vue3+ts实现管理后台（增删改查）", "desc": "简单的管理后台基本上就是数据的增删改查。主要就是 列表 + form 表单。每个页面的逻辑基本上都相同。不同的地方就是每个页面需要调用的具体 API 及参数。 以前 vue2 的时候最简单的做法是写出来一个页面的逻辑，然后直接 copy 到各个页面中，修改 API 及参数即可。…"}, {"id": "6844903742534336520", "title": "当「SPA」应用遇上了膨胀的项目", "desc": "... 基于以上问题有了对git进行拆分的技术需求。具体如下 之后路由调用next。会自动继续请求 #/hello/index对应的页面chunk（js,css）页面跳转成功； 此时hello已经与主项目完成融合，hello可以自由使用全部的store，使用router可以自由…"}, {"id": "7003303651045277703", "title": "Vue3的动态组件和异步组价", "desc": "今天小编在网上闲逛的时候，发现前端这几年的发展离不开组件的概念，之前小编接触到的组件，基本都是这样的。大家还可以关注我的微信公众号，蜗牛全栈。"}, {"id": "6844903936583794702", "title": "Vue从甜小白到皮大佬系列(八) Vuex", "desc": "Vuex是用来管理Vue的所有组件状态,说白了就是组件中通信的一种高级方式。 Vuex官方文档已经讲解的非常详细,建议通读一遍,本文是自己的学习总结实践和归纳,有些概念和语句借鉴官方。 在之前的文章组件通信中我们讲了组件中的常用通信方式有props,$emit/v-on,$pa…"}, {"id": "7001503743950716959", "title": "Vue 3.0中的响应式实现原理-1", "desc": "8月更文挑战 前言 Vue 2.x是利用Object.defineProperty()方法侦测对象的属性变化，但该方法有一些固有的缺陷： 性能较差 在"}, {"id": "6914081930447159303", "title": "Vue前端HTML保存为PDF的两种常用方式", "desc": "Vue前端HTML保存为PDF常用方式有两种。 使用html2Canvas和JsPDF库，转化为图片后保存PDF。 调用浏览器window.print()，然后手动保存为PDF。 开发便利快速。 不可选取部分Dome，只能保存当前整页面。 第一种:使用html2Canvas和J…"}, {"id": "6856919378836455432", "title": "VUE程序调试的方法", "desc": "调式与测试实际有异曲同工之妙，只不过对象不同。测试面向的是产品级，系统级；而调试往往是程序里的某一部分，某个方法，某个属性或者对象。最终效果也很类似，好的测试人员，测试方案可以将产品系统的问题解决在摇篮中；好的调试方法也会让你对程序的运行理解很深刻，对问题的查找定位变得很容易，…"}, {"id": "6934498215895138312", "title": "玩起来，使用vite，做vue3.0的服务端渲染(ssr)", "desc": "新春伊始，想必在座的各位都正在嗷嗷待哺的等待需求中(ps:划水摸鱼)，不好意思，理直气壮的说我也是。几天鱼摸下来，心里也不是滋味，看着身边的同学一个个每天都在学这学那，搞得我也不是很好意思。于是趁着现在各种完全体的方案和框架还没出来之前，那我们把vue3.0的服务端搭一搭吧，自…"}, {"id": "6975746278202277901", "title": "组件传值之父传子", "desc": "在开发中，有时候为了让一个文件中代码更简化和重复利用 会将一些代码重新放在一个文件里作为组件使用 首先创建项目，然后在components里面创建一个文件Hello.vue 之后在里面写上模板代码 来"}, {"id": "6974283138910388261", "title": "Vue 之 More in js", "desc": "灵感来源于生活，More in js 是什么？能带给开发者怎样的体验？一切迷题尽在于此，让我们来一起看看吧！"}, {"id": "6987220741313789989", "title": "【Vue实战技巧】如何处理多个组件依赖同一个接口数据？", "desc": "可能很多小伙伴都会遇到：A、B、C组件都依赖了同一个接口的数据，每次加载A、B、C都要调一次接口；很显然，虽然这么做能满足需求，但！会存在如下问题: 重复请求 代码冗余，每个组件/页面都要编"}, {"id": "6986847203885056036", "title": "Pinia 快速入门", "desc": "Pinia 是一个用于 Vue 的状态管理库，类似 Vuex, 是 Vue 的另一种状态管理方案 Pinia, 支持 Vue2 和 Vue3"}, {"id": "6844903842375532557", "title": "一张思维导图辅助你深入了解 Vue | Vue-Router | Vuex 源码架构", "desc": "本文内容讲解的内容：一张思维导图辅助你深入了解 Vue | Vue-Router | Vuex 源码架构。 2. Vue 全家桶 3. Vue 4. Vue-Router 5. Vuex 6. 已完成与待完成 因为该项目都是业余时间做的，笔者能力与时间也有限，很多细节还没有完善…"}, {"id": "6844903599764406280", "title": "Vue二次封装axios为插件使用", "desc": "封装回调有点多，在使用的时候也需要加上 then()\b \b来处理结果，\basync & await 了解一下哟，好东西当然要藏起来，我才不会分享出来呢..."}, {"id": "6899439012331651079", "title": "Vue 3.0.3 : 新增CSS变量注入以及最新的Ref提案", "desc": "在 Vue 3.0.3 版本中，Ref 语法糖已经实现，即使反对的人再多，尤雨溪也坚信这一语法糖会像 TypeScript 一样，用之前都觉得不好，用过之后说真香。 但是在好多人的心目中，这个a就像上面这行代码一样，觉得它应该是基础类型，一方面不符合直觉，经常会忘记写.valu…"}, {"id": "6844903895341236238", "title": "vue中使用高德地图自定义开发", "desc": "用一个在地图上挖宝的小例子，来总结下自己使用高德地图的心得。"}, {"id": "6995086967130030094", "title": "vue2.0响应式原理", "desc": "vue2.0响应式原理 三个核心 Observer，Dep，Watcher Observer data通过Observer转化成了getter/setter的形式来追踪变化 Dep 收集依赖，删除依赖"}, {"id": "6888681604621795336", "title": "校验开源库async-validator用法", "desc": "最近在看掘金小册Vue.js组件精讲时，自己也有跟着一起操练，在写一个具有校验功能的组件时有用到async-validator，在学习如何使用这个库时，感觉他的使用说明有一些晦涩，网上又没有很好的中文文档，便按照自己的理解做了一份用法指南。 source: 需要校验的对象（必选…"}, {"id": "6844903768446763016", "title": "从4个方面优化你的Vue项目", "desc": "比如 v-for=\"user in users\" v-if=\"user.isActive\"。在这种情形下，请将 users替换为一个计算属性 (比如activeUsers)，让其返回过滤后的列表 比如 v-for=\"user in users\" v-if=\"shouldShow…"}, {"id": "6983159211244912670", "title": "一文搞懂 filter、computed、watch", "desc": "计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值。每当触发重新渲染时，调用方法将总会再次执行函数。"}, {"id": "6997332045043073054", "title": "路由跳转方式", "desc": "1.  router-link 不带参数 // 注意：router-link中链接如果是'/'开始就是从根路由开始，如果开始不带'/'，则从当前路由开始。 带参数 // params传参数 (类似po"}, {"id": "7004321742248230920", "title": "vue实现一个拖拽生成框框并进行标注的组件，用于标记图片，地图等", "desc": "有个功能是需要在图片上进行框选并标注，写了个小demo最终结果如图 主要就是三个事件 和控制div在data里面的插入 ` ` 三个事件配合页面结构和DATA使用，具体地址"}, {"id": "6882566603762843655", "title": "Vue3.0系列——「vue3.0性能是如何变快的？」", "desc": "先学习TypeScript，vue3.0是用TS重写的，想知其然知其所以然必须学习TS。 vue2.x中的虚拟dom是进行全量的对比。而vue3.0新增了静态标记。在与上次虚拟节点进行对比的时候，只对比带有patch flag的节点，并且可以通过flag的信息得知当前节点要对比…"}, {"id": "6978781674070884366", "title": "vue中的css深度选择器   :deep(<inner-selector>)、/deep/、>>>、::v-deep 到底是什么？", "desc": "如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用深度选择器。"}, {"id": "7005868578402467876", "title": "深入理解Vue的钩子函数使用，及父子组件的生命周期", "desc": "钩子函数的通常用法 在created钩子中可以对data数据进行操作，这个时候可以进行ajax请求将返回的数据赋给data。 虽然updated函数会在数据变化时被触发，但却不能准确的判断是那个属性值"}, {"id": "6846687601609408520", "title": "Vue.js轮播库热门精选", "desc": "要创建一个轮播图，我们必须动态地创建显示图片，并添加导航按钮来在它们之间导航，我们可能还需要自动播放功能。 这些都需要时间来构建，而且极有可能我们可以更好地利用这些时间做其他事情。在这篇文章中，我们将看看Vue.js的一些轮播图库，让我们的生活变得更轻松，并让我们拿回一些宝贵的…"}, {"id": "6989197887498354724", "title": "组件化的合并配置 - 学习vue源码系列 3.2", "desc": "决定跟着黄轶老师的 vue2 源码课程好好学习下vue2的源码，学习过程中，尽量输出自己的所得，提高学习效率，水平有限，不对的话请指正~ 将vue 的源码clone 到本地，切换到分支2.6。"}, {"id": "6844903815771062279", "title": "【前端发动机】深入 Vue 响应式原理，从源码分析", "desc": "作为 Vue 面试中的必考题之一，Vue 的响应式原理，想必用过 Vue 的同学都不会陌生，Vue 官方文档 对响应式要注意的问题也都做了详细的说明。 但是对于刚接触或者了解不多的同学来说，可能还会感到困惑：为什么不能检测到对象属性的添加或删除？为什么不支持通过索引设置数组成员…"}, {"id": "6998483011779969032", "title": "vue3---Compisition API", "desc": "setup函数配置项 setup()是 Vue3.x 新增的一个选项，setup是所有Composition API（组合API）表演的舞台 ” , 他是组件内使用 CompositionAPI的入口"}, {"id": "6844903503362523143", "title": "优化向：单页应用多路由预渲染指南", "desc": "Ajax 技术的出现，让我们的 Web 应用能够在不刷新的状态下显示不同页面的内容，这就是单页应用。在一个单页应用中，往往只有一个 html 文件，然后根据访问的 url 来匹配对应的路由脚本，动态地渲染页面内容。单页应用在优化了用户体验的同时，也给我们带来了许多问题，例如 S…"}, {"id": "6991749673300000799", "title": "vuex：弄懂mapState、mapGetters、mapMutations、mapActions", "desc": "一、state 1.1 引入vuex 以后，我们需要在state中定义变量，类似于vue中的data，通过state来存放状态 注册两个组件分别引入到app.vue中 如图，显示出显示出相应的内容，有"}, {"id": "6844903689656893454", "title": "利用prerender-spa-plugin提升单页面应用的体验", "desc": "目前 Vue、 React 在前端界混的风生水起，它们的开发思想使得我们能真正做到前后端分离、解耦。单页面的使用给用户带来了更好体验。不过对于 Vue 和 React 这种框架来说， HTMLinJS 的思路在首屏加载慢、白屏以及 SEO 等问题就日益突出了。 不仅需要拼框架的…"}, {"id": "6995555920591716388", "title": "前端小白不迷路 -  一个小demo来理解vue中计算属性的完整写法", "desc": "什么是vue的计算属性： 比如官网举出的这个小例子，在插值表达式中写了大量的对数据的操作，使得结构非常的庞大，什么能使它变得简单嗯，当然是计算属性啦"}, {"id": "6859161259351212046", "title": "解决页面需要上下左右选中元素的问题，富操作", "desc": "前言纯粹是因为无聊吧，然后就是突发奇想。我以前开发过web端的收银系统。之前更早的时候也是做过零售软件方面的实施，通常在门店的时候收银员为了更为快速的去收银，是很少会去用鼠标的。都是键盘解决。但是we"}, {"id": "6979281412021026829", "title": "vuex4 中 typescript 的使用，以及 store 的一些坑", "desc": "根据官方文档，进行了vuex4+ts的体验，ts不熟练就会有些奇怪的飘红，但总体的使用体验是比较轻松的，跟着官方文档走就没事了。有坑但不完全有。"}, {"id": "6983856130535473183", "title": "Vue 3.0 性能提升主要是通过哪几个方面体现的？", "desc": "Vue 3 与 Vue 2 相比，在 bundle 包大小方面（tree-shaking 减少了 41% 的体积），初始渲染速度方面（快了 55%），更新速度方面（快了 133%）以及内存占用方面（减"}, {"id": "6844903647151652871", "title": "Vue.js是如何做到数据响应的？", "desc": "许多前端JavaScript框架（例如Angular，React和Vue）都有自己的数据相应引擎。通过了解相应性及其工作原理，您可以提高开发技能并更有效地使用JavaScript框架。在视频和下面的文章中，我们构建了您在Vue源代码中看到的相同类型的Reactivity。 如果…"}, {"id": "6844904202364420109", "title": "揭秘 Vite 的原理", "desc": "Vite 现在正在疯狂的更新，目前在 Beta 中，可能很快就会发布 1.0。 Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞…"}, {"id": "6984033527520051208", "title": "来一个vitepress版的博客主题吧(简约版)", "desc": "本博客主题基于 vitepress 最新版的0.15.6开发 已经实现的功能： 归档档功能 、标签功能 、分页功能 、非评论功能"}, {"id": "6964615297915420702", "title": "基于xlsx实现通用的前端导出方案", "desc": "前言 在最近开发报表中碰到了需求需要前端导出，原因是表格中的表头大多数都是动态生成的，后端那边觉得前端做起来更简单，我想着没做过这块的也想学习下, 也没跟他杠啥。上gitHub找了下插件对比下发现前端"}, {"id": "6965138595434725390", "title": "【vue3源码学习系列】一、先导篇：看懂 vue.js 3.0 的优化", "desc": "今天线上观看了 vueconf，对于很多嘉宾的分享一些底层原理的地方，思路明显跟不上；回想起来，我也从vue2.x开始，使用了两年多的vue了，但是对于很多底层的实现机制了解的并不是很深入。最近在一些"}, {"id": "6991416861237706760", "title": "无聊的VUE概述｜ 8月更文挑战", "desc": "1.VUE的介绍 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式的js框架，发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用"}, {"id": "6844904162522562574", "title": "[⏰5分钟学会,或者1秒CV代码] d3.js 组合 vue, 新手也实现 🌿 拓扑(svg 版)", "desc": "如果急用, 可先cv走代码修改, 哪里没明白再回来看哪里. d3 是一个大而全的图形库, 集成了svg 元素操作和常见图表(图形)的数据结构. 本文基于v5 版本的 d3 编写, d3 的功能都是拆分成独立包的, 我们这里只需要引入d3-hierarch和d3-shape生成拓…"}, {"id": "6900048258005991438", "title": "前端页面可视化搭建实践", "desc": "电子相册，一个可以可视化编辑的H5网页，用户只需要选择相应的模板进行组合，替换页面里的素材就能制作出一套可以媲美专业人员进行开发的H5宣传页。 使用者是没有任何开发经验的用户，这种情况对系统的可用性和拓展性的要求非常的高，因为每个人的想法是不一样的，这样就导致系统对接的需求是多…"}, {"id": "6989515498895441933", "title": "基于Vue+Antd的验证码组件封装", "desc": "主要记载了对验证码组件的封装过程，从需求分析到实现方式的考虑，再到封装结束后的问题总结，进行了相对完整的记录。"}, {"id": "7005802610997329933", "title": "Vue3核心Typescript类解析", "desc": "与使用JavaScript不同的是，用Typescript写Vue程序要需要了解Vue的相关类型。Vue核心的类型，大部分写在@vue/runtime-core包中。"}, {"id": "7004850828850757640", "title": "记一次微前端开发与部署", "desc": "1.基座 - vue3 index.html文件设置约定的id，如id=\"base\" 入口文件main.ts引入qiankun框架并进行注册子应用等等 修改App.vue文件，设置子应用挂载的容器 至"}, {"id": "6844903548870721549", "title": "Vue学习看这篇就够", "desc": "可以看看。"}, {"id": "6869195042599206919", "title": "优美的v-for列表加载动画：vue动画钩子实践", "desc": "交错列表稍微复杂点，不过我们可以分解为两个动画。 每个复杂的动画其实都是很多简单小动画的拼接，所以下次设计师拿来充满想象力的动画设计稿，先别急着掏菜刀，仔细分析下动画的组成部分，可能也没有那么难。 想在动画上根据不同的dom设置不同的动画延迟是十分困难的，但是我们可以很方便的给…"}, {"id": "6844904165378883591", "title": "vue 3.x 如何有惊无险地快速入门", "desc": "本文所分享的是关于 vue 3.x 在用法上的改变，而不是在代码实现上的不同。 虽然 vue2 到 vue3 的实现大改，但在用法上变化基本不大，比较明显的一个变化就是添加了 setup(){} 函数了，几乎所有的配置变成了以函数的方式进行定义。即使是这样，但小改动还是很多的。…"}, {"id": "6984015633490903053", "title": "如何在不看源码情况下学petite-vue源码", "desc": "大家好，我是卡颂。 周末没啥事，准备找个优秀且代码量不多的库学习下。最终选择了最近发布的petite-vue，原因如下： 代码量少（只有5.8kb），且源码模块化程度高（相比于React），易读 基于"}, {"id": "7004703976566292516", "title": "Vue 中methods使用箭头函数冲突", "desc": "Vue中箭头函数的冲突 本人小白，记录自己学习过程，欢迎指点，大神轻喷~~学完h5，c3，js，迫不及待的开始学习Vue.js框架，前段时间遇到了一个小错误。在这里记录下，希望大家不会遇到。"}, {"id": "6998013089966719007", "title": "浅谈 ref 引用", "desc": "浅谈 ref 引用 1. 什么是 ref 引用 ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用"}, {"id": "7005101151506923557", "title": "Vue3 实现一个简单的日历组件", "desc": "Vue3 实现一个简单的日历组件，使用vite + vue3，功能简单，支持完全自主的定制化和修改。"}, {"id": "6844903569422811150", "title": "记录面试中一些回答不够好的题（Vue 居多） | 掘金技术征文", "desc": "flex 布局 与 grid 布局。 实现 Vue SSR 。 从 SPA 使用最小成本迁移到 SSR 。 根据指定元素，在数组里面找出 ff 数组（ff 数组这个名字是我瞎说的）。比如数组 [2, 3, 6, 7] ，指定元素 7，则 ff 数组是 [2, 2, 3]（2+2…"}, {"id": "6850418111985352711", "title": "vue响应式详解（重学前端-vue篇1）", "desc": "使用Object.defineProperty和ES6的Proxy，这就是进行数据劫持或数据代理。 Vue通过设定对象属性的 setter/getter 方法来监听数据的变化，通过getter进行依赖收集，而每个setter方法就是一个观察者，在数据变更的时候通知订阅者更新视图…"}, {"id": "6986455896708612110", "title": "如何优雅的管理 HTTP 请求和响应拦截器？", "desc": "本文通过一次简单的项目重构总结出一个请求层拦截器调度方案，目的是为了实现所有拦截器职责单一、方便维护，并统一维护和自动调度，大大降低实际业务的拦截器开发上手难度。"}, {"id": "6870374238760894472", "title": "一次关于Vue的自我模拟面试", "desc": "昨晚做了一个梦，梦见自己到了一家大厂面试，面试官走近房间，坐了下来：是杨溜溜吧？国际惯例，先来个自我介绍吧。 我嘴角一笑，心里暗喜：幸好有专门看Vue的面试题，看来这次稳了。于是谦虚又装逼的回答：还行吧，您随便问。 于是面试官看我口气那么大，心想：哟嚯，来了一个装逼的，劳资今天…"}, {"id": "6844904126283776014", "title": "Vue3 跟着尤雨溪学 TypeScript 之 Ref 类型从零实现", "desc": "Vue3 中，ref 是一个新出现的 api，不太了解这个 api 的小伙伴可以先看 官方api文档。 简单介绍来说，响应式的属性依赖一个复杂类型的载体，想象一下这样的场景，你有一个数字 count 需要响应式的改变。 这样肯定是无法触发响应式的，因为 Proxy 需要对一个复…"}, {"id": "6916362519279829005", "title": "Vue3丨TS丨7 个思路封装一个灵活的 Modal 对话框", "desc": "✅ 一个对话框需要的基本要素「标题，内容，确定/取消按钮」。内容需要灵活，所以可以是字符串，或一段 html 代码（也就是 slot ）。 ✅ 对话框需要“跳出”，避免来自父组件的“束缚”，用 Vue3 Teleport 内置组件包裹。 ✅ 调用对话框需要在每个父组件都进行引入…"}, {"id": "7005773894942457869", "title": "手把手写一个Vue3全局api组件", "desc": "Vue3正式发布也有一段时间了，关于Vue3的文章也是有一大把，组合式API、Typescript、源码等都介绍的非常详尽，但是关于全局ap组件这块好像介绍的比较少，那么接下来就分享一下Vue3中如何"}, {"id": "6999657240550440973", "title": "为什么推荐使用 TypeScript 开发 Vue3", "desc": "在 Vue3 中，官方全面采用 TypeScript 进行开发，极大的增强了对 TypeScript 的支持，Vue3 可以说是先天就支持类型提示，和 Vue2 相比好了太多。"}, {"id": "7003730838491758605", "title": "你这手写vue2.x/3.x的响应式原理保熟吗？", "desc": "现在vue3已经出来了，是不是研究vue2.x过时了？非也非也。 抛去大部分vue使用者还在用的情况，vue3的很多思路都可以在vue2中得到体现，所以学习还是有必要的。"}, {"id": "6996588746221027358", "title": "vue入门：element组件与动画使用", "desc": "本教程为入门教程，如有错误，请各位前端大佬指出。 1.什么是Element Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库，封装很多常用组件，官网是https"}, {"id": "6980267119933931551", "title": "来吧，解锁vue3全家桶+Ts的正确姿势", "desc": "本文主要介绍vue3全家桶，vue-router4,vuex4和ts的结合，以及elemmenPlus和axios的引入方式，以及setup script的语法介绍。"}, {"id": "6844904087490674695", "title": "使用 Vue 写一个通用轮播组件", "desc": "可以看到，它分成了两部分，视窗里每一个可以滚动图片都被包裹在了 CarouseItem 里，之所之样设计，是可以在父组件里通过 this.$children 拿到所有子组件的根节点$el，方便后续的操作。 CarouselItem的布局非常非常，内部就是一个 slot，组件根元…"}, {"id": "6844903925913649165", "title": "vue-小爱ADMIN系列文章(二)：微信微博等分享，国际化，前端性能优化，nginx服务器部署", "desc": "最近在做我的小爱ADMIN后台管理系统，结合当前市场后台管理系统对相关功能的需求，我又开始新增了一些新的功能和组件，如分享功能组件，项目国际化功能；项目完成后，部署在nginx服务器，发现首次访问的速度特别慢，严重的影响了用户体验，因此，我又开始进行了一系列的前端性能优化;以及…"}, {"id": "6932667176872574984", "title": "初探Vue3.0--响应式api理解～", "desc": "如果参数为 ref，则返回内部值，否则返回参数本身。这是 val = isRef(val) ? val.value : val。 setup是vue3.x中加入的一个新的生命周期，也是组合api的入口，由于在执行 setup 时尚未创建组件实例，因此在 setup 选项中没有t…"}, {"id": "6854573222285803534", "title": "focus focusin focusout 傻傻分不清楚", "desc": "focusin与focusout事件会冒泡。 focus与blur事件不会冒泡。 默认情况并不是所有元素都能获得焦点。需要满足以下条件之一： 可交互的元素（如 input,select,a）。换言之，默认情况下，用于布局的元素（如div, span, table）则不能获得焦点…"}, {"id": "6846687601999806472", "title": "实用！最新的几个 Vue 3 重要特性提案", "desc": "在几天前开启的 SFC Improvements #182 中，yyx990803 提交了 3 个改进开发者体验的征求意见稿。 1. <component> 组件导入语法糖 在目前的写法中，要引入其它组件，就得先在 <script> 中 import，再将其模块名放入组件的 c…"}, {"id": "6934961537366884383", "title": "Vue3疑问系列(6) — v-model(vModelRadio)指令是如何工作的？", "desc": "这次就不编写 vModelRadio 指令对象了,因为比较简单. 看完使用姿势接下来看看内部是如何使用的. a. 绑定值: str b. vnode.props!.value : 'foo' c. el: input 这个dom元素 d. onUpdate:modelValue…"}, {"id": "6966105838364655652", "title": "使用vue3二次封装Element-plus过程", "desc": "萌新启航 应为不是很懂所以先封装个简单的confirm框： 然后就要开始写渲染函数了函数： 接下来说说patchFlags 到这里该知道的就差不多了 接下来我会继续补充的。。。"}, {"id": "6909346339457826830", "title": "vue3笔记", "desc": "1.setpup的执行时机在beforCreate之前，所以在在setup函数中无法使用data和methods，并且在setup中vue把this修改为了undefined。 3.在setup函数中添加响应式数据数要配合ref（）和reactive（）方法。 1.单独使用re…"}, {"id": "6955369896871985159", "title": "初探 vue3", "desc": "1.效率与体积 与vue2.x相比，mount提升50%，内存占用小120%；官方宣称有1.3到2倍的性能提升。 核心代码 + Compostion API: 13.5KB, 最小11.75KB。"}, {"id": "6844904160056492040", "title": "vue-codemirror基本用法：实现搜索功能、代码折叠功能、获取编辑器值及时验证", "desc": "1. vue-codemirror 搜索功能 其实引入这些资源基本的搜索功能已经实现，按ctrl+F 或者command+F就编辑器顶部就可以出现搜索框。 产品考虑到有的人可能不知道用快捷键，就设计了一个按钮，点击进行搜索，点击搜索按钮，搜索框出现在编辑器的顶部。searchC…"}, {"id": "6844904021262598151", "title": "一个基于vue的网页图片浏览插件", "desc": "因为某天我在用电脑逛p站(pixiv)时，发现看图的效果不是那么令人满意，点开一个图片后居然不能放大，上移下移要通过鼠标滚轮，感觉有点反人类，我希望在网页看图时能全屏浏览图片，并且支持图片的放大缩小和拖拽，不知道是不是搜索关键字不对，逛了一圈发现莫得喜欢的轮子，刚好又有些思路而…"}, {"id": "6844903581678583822", "title": "让骨架屏更快渲染 - xiaOp的博客", "desc": "在之前「为vue项目添加骨架屏」一文中，介绍了骨架屏的概念以及在 Vue 项目中的应用。本文将介绍如何加快浏览器对骨架屏的渲染。"}, {"id": "6844903861724020744", "title": "webpack手动搭建Vue项目", "desc": "之前也是一般选用框架自带的脚手架工具，趁着端午有时间，主动配置一下webpack & Vue，当然以上只是一些简单的配置，更复杂的配置还需要修改webpack配置，有时间再补充。另外一篇配置webpack & React。"}, {"id": "6844903604982136846", "title": "使用canvas打造一款像素风头像生成工具", "desc": "网上曾有人讨论过那些头像自动生成是如何实现，有些是采用的注册ID的首字母直接生成，也有些是直接使用的头像数据库，那么如何来制作一个让每个用户的头像都不同的头像自动生成工具呢，于是我搅了搅脑汁，想到一个不知为谁所知的办法。 当我们发现我们不会机器学习的时候，这就很难受了，最好的想…"}, {"id": "6995163355916812319", "title": "vue路由实现", "desc": "动态路由 路由规则填写props为true，在组件内部通过props获取对应路由参数，这里的路由参数理解为组件的属性 嵌套路由 将公共部分抽离需要渲染的部用router-view展示,Layout组件"}, {"id": "6844903551089508365", "title": "Nuxt.js踩坑分享", "desc": "1. 如何在 head 里面引入js文件? 踩坑成功，下一个坑... 2. 如何使用预处理器 这个问题解决方法非常简单，只需要安装这些依赖就好。 但是解决过程并不是很顺利的，在阅读中文文档时，忽略版本号，按照上面的提示进行操作，发现不能成功，后来各种debug，最后发现了该解决…"}, {"id": "6972340688369385503", "title": "vue中mixins的使用方法", "desc": "这是我参与更文挑战的第9天，活动详情查看：更文挑战 怎么使用呢？举个栗子： 定义一个混入对象mixin.js，也就是一个js文件 引入混入对象到需要的vue的文件 用法非常简单！ mixins和vue"}, {"id": "6844903928987910151", "title": "vue 实现微信浮标", "desc": "微信的浮窗，大伙应该都用过，当我们正在阅读一篇公众号文章时，突然需要处理微信消息，点击浮窗，在微信上会有个浮标，点击浮标可以再次回到文章。 浮标的核心功能的就是拖拽，对鼠标或移动端的触摸的事件来说，有三个阶段，鼠标或手指接触到元素时，鼠标或手指在移动的过程，鼠标或手指离开元素。…"}, {"id": "6844903568546217992", "title": "谈谈 Vue 业务组件", "desc": "春节的假期刚刚过去不久，大脑还没有从假期综合症中缓过来，就迎来了开工的日子，不知道各位有没有收到开工大红包？有没有被虐狗？ Web 页面上的每个独立的可视/可交互区域视为一个组件，组件就好像我们的 PC 组装机一样，整个机器（应用）由不同的部件组成，例如显示器、主板、内存、显卡…"}, {"id": "6844903498350493703", "title": "[译] 使用Vue.js创建自定义输入框", "desc": "基于组件的库或者框架（例如 Vue）给我们在开发可复用的组件带来了极大的方便。这些组件可以非常简单的在独立的应用程序中被使用，并且最终呈现的效果一致。 比如，在表单输入的场景，在功能上往往会比较复杂，通常我们的做法是希望使用组件将表单中自定义的设计、标签、验证、帮助信息等进"}, {"id": "6896641710538326030", "title": "深入了解 Vue3 模板编译原理", "desc": "其中 compiler-core 模块是 Vue 编译的核心模块，并且是平台无关的。而剩下的三个都是在 compiler-core 的基础上针对不同的平台作了适配处理。 Vue 的编译分为三个阶段，分别是：parse、transform、codegen。 其中 parse 阶段…"}, {"id": "6844903750713212942", "title": "[译] 为什么我放弃了 React 而转向 Vue。", "desc": "最近，在 Github 上 Vue.js 比 React 获得更多的 star。该框架受欢迎程度近期飙升，并且由于它并没有类似于 Facebook（React）或者 Google（Angular）这样的公司支持，看到它从不知名的地方崛起，着实让人惊讶。 回顾过去的光辉岁月，在 …"}, {"id": "6896389431256121351", "title": "vue3 “用后感”", "desc": "vue3的源码已经开放很久了，官网也火速出了新文档。但奈何我的速度总是能和蜗牛相比。正好，最近有做到vue3的项目。那我来写一篇 “用后感” 吧！把项目中学习到的关于vue3的理解分享给大家。 vue2 通过 Object.defineProperty() 方式来截持数据的变更…"}, {"id": "6996220925431513095", "title": "前端工程化和webpack", "desc": "首先我们先了解什么是前端工程化，再来看前端工程化的有哪些解决方案解决方案，其次了解webpack的基本使用及其常用插件。最后看看webpack是如何实现打包发布的，以及如何通过Source Map排错"}, {"id": "6961339963799502885", "title": "JS-VUE-九宫格抽奖", "desc": "前言 继之前两篇“老虎机抽奖”、“大转盘抽奖”，所以把九宫格也一并补全了，整体的实现方案不是很复杂，就是dom以及中奖的配置需要特别注意一下，好了话不多少，直接开始~"}, {"id": "6985050732592365582", "title": "日常开发分享", "desc": "ElementUi Table表格与分页组件的封装合并 封装的目的 提高开发效率 减少代码重复性 提升可维护性 更方便的使用 封装前后对比 封装前 封装后 如何进行的封装 封装主要使用的概念是配置生成"}, {"id": "7002562498754773028", "title": "vue-video-player 视频重载问题解决方案", "desc": "记录一下 业务需要做自定义进度条、视频内做题功能开发。在操作各种组件时，难免需要触发视频的内部方法。一旦组件跨组件调用视频方法时，视频组件就会自动重载，该问题导致很多功能无法实现。"}, {"id": "6947878373091704846", "title": "【技术胖】Vue3.x从零开始学-第二季 组件篇", "desc": "在学习这个视频之前，你需要先学习《Vue3.x从零开始学-第一集-基础语法篇》。第二季（本教程）主要讲解Vue3中组件的一些知识，包括什么是全局组件、局部组件、组件如何复用、组件间的传值，单项数据流、Non-Props属性、父子组件的 通信、组件双向绑定、组件中使用插槽、还包括…"}, {"id": "7002067120351608869", "title": "你知道 Vue 3 是如何发布新版本的吗？Vue 3 release 源码解析带你了解 Vue 3 发布流程", "desc": "Vue.js 是如何发布的 原文链接: https://github.com/upupming/vue-next-analysis/blob/master/md/release/README-upup"}, {"id": "6982849675640438821", "title": "由浅入深破解 vue3.0 新特性", "desc": "2020年09月18日，vue3.0正式发布。作为一个大的版本更新，Vue3.0相比于 Vue2.0，自然有着不小的变化。"}, {"id": "6961701657205800967", "title": "Vue3移动端组件库Varlet,寻求社区有兴趣的小伙伴加入...", "desc": "对于不熟悉这个项目的小伙伴们做个简单的介绍，Varlet是一个基于Vue3开发的Material风格移动端组件库，全面拥抱Vue3生态，追求轻量的组件体积，简单的使用方式，最小的思维负担。"}, {"id": "6990546455282843656", "title": "Vue刷新页面有哪几种方式", "desc": "在Vue项目中，刷新当前页除了 window.reload()，你还能想到什么办法？而且这种办法会重新加载资源出现短暂的空白页面。体验不是很好。 在某个详情页面的时候，我们经常需要通过路由中的详情 i"}, {"id": "6994709426997297189", "title": "简易分析下vuex源码", "desc": "前言 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。他维护着一个对象，所有的属性都是相应式的。更新任意属性都触发依赖组件发相应式更新。Vuex中只有commit 方式可以修改状态，是"}, {"id": "6907269427520077837", "title": "Vite使Vue CLI过时了吗？", "desc": "Vue生态系统中有一个名为Vite的新构建工具，它的开发服务器比Vue CLI快10-100倍。 这是否意味着Vue CLI已经过时了?在本文中，我将比较这两种构建工具，并说明它们的优缺点，以便你可以决定哪一种适合你的下一个项目。 大多数Vue开发人员都知道，Vue CLI是使…"}, {"id": "6992083502254522399", "title": "研究大佬写的倒计时组件(Vue)，学到了不少东西｜ 8月更文挑战", "desc": "一、前言 入职的第一个需求是跟着一位前端大佬一起完成的一个活动项目。 由于是一起开发，当然不会放过阅读大佬的代码的机会。 因为我的页面中需要使用到倒计时功能，发现大佬的已经写了个现成的倒计时组件，于是"}, {"id": "6844904177437507592", "title": "万字总结Vue(包含全家桶),希望这一篇可以帮到您", "desc": "以下代码均经过自己测试，可以复制直接看效果。注意引入Vue文件 VueX和VueRouter 部分更新也上传了。需要点击这里 VueX差了辅助函数之类。VueRouter基本完成。后续可能会有单元测试和SSR computed不会立马取值,用到的时候才会取值. 并且有缓存,依赖…"}, {"id": "6995432765005004814", "title": "vue3.0+element plus 日期选择器修改中文", "desc": "element plus的日期选择器默认是英文版的 图二的解决方案是没有任何作用的 真正能解决的方法如下 首先单独引入日期选择器的配置组件和中文js文件 在components组件中注册日期选择器配置"}, {"id": "6911883529098002446", "title": "vue3下jsx教学，保证业务上手无问题！手敲代码，有知识点，附带和template对比", "desc": "前言原因：闲的。还有一个原因吗？嘿嘿然后之前就说过了，我拿vue3直接干公司项目了，是内部的孵化项目，客户不多，但是也是正规的生产项目。技术栈说明：公司项目：js，element-plus，vue3，"}, {"id": "7002446112804044837", "title": "2x2 VueRouter - 进阶 - 获取数据", "desc": "VueRouter 基础教程系列 🎉 在 Vue 中请求服务端数据的时机有两种： 路由导航完成之前：在路由的生命周期期间发起请求。 路由导航完成之后：在路由组件生命周期期间发起请求。 路由导航完成之前"}, {"id": "7000583666556469284", "title": "Vue-webpack打包配置那些事", "desc": "webpack打包优化 先去掉默认生产的以map结尾的js文件，这个js文件差不多占了js文件夹一半的容量，所以没必要用到。位置config"}, {"id": "6844903505669390349", "title": "vue + vuex + directives实现权限按钮的思路", "desc": "对于这种问题，很显然不能每个按钮都去判断，所以我思考了一下结合自定义指令和vuex完成了相应的实现。 vuex里面的showLogin这个action无非就是对login的显示隐藏flag的操作。 这里只是完成了简单的登陆权限控制，从登陆权限出发，可以加入更多的权限控制，比如根…"}, {"id": "6954284127528943629", "title": "vue中多级表头自定义插槽的递归嵌套", "desc": "对element-plus的表格组件二次封装中表头和表格内容区域都可以进行自定义(插槽),多层级的插槽会涉及到透传，而且表格列组件需要进行递归，这里主要解决了递归+插槽嵌套的问题"}, {"id": "6844903881583886349", "title": "【Vue原理】Computed - 源码版", "desc": "今天要记录 computed 的源码，有时候想，理解不就好了吗，为什么要记录一遍源码。现在终于想通了 1、保存设置的 getter。 看累了吗..... 1、页面更新，读取 computed 的时候，Dep.target 会设置为 页面 watcher。 computed-wa…"}, {"id": "6909763442169610248", "title": "⑤ Vue基础语法-事件处理🤞", "desc": "在默认情况下滚动的时候，浏览器会在整个事件处理完毕之后再触发滚动，因为浏览器并不知道这个事件是否在其处理函数中被调用了 event.preventDefault() （通知 Web 浏览器不要执行与事件关联的默认动作）。 .passive 修饰符用来进一步告诉浏览器这个事件的默…"}, {"id": "6844903536224894984", "title": "vue: 从一个下拉框组件理解vue中的父子通讯", "desc": "这里先提出两个关键词：props与emit：写这个组件之前，先看看效果图：组件开发分析：既然是组件:首先组件内部数据内容肯定是可变的(如上图中的\"按时间排序\"之类的)，这必须由父组件传入(即父组件如何"}, {"id": "6844903667846348814", "title": "小程序从入门到实战系列（一）", "desc": "随着小程序日渐火热，扇贝在近一年投入了大量的精力来做小程序的相关业务，小程序相比于 APP 更容易传播，因为小程序是基于强大的社交平台微信的基础上的，这使其具有极强的传播能力，甚至可以在微信朋友圈产生病毒性传播，一夜爆红。 在看到头脑王者小程序几乎一夜爆红之后，其日活最好时期达…"}, {"id": "6948798223674769438", "title": "Vue的学习笔记（中篇）", "desc": "一、什么是Vue.js?Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目"}, {"id": "6904949314146009101", "title": "详解 Vue3 侦听器", "desc": "侦听器是常用的 Vue API 之一，它用于监听一个数据并在数据变动时做一些自定义逻辑，本文将先列举侦听器在 Vue 中的使用方式，然后再分析源码讲述为什么可以这样使用、以及侦听器的实现原理。 在 Vue3 中使用侦听器有两种方式，一种是传统的 Options API ，另一种…"}, {"id": "6844903924453867533", "title": "第二弹   Vue项目总结", "desc": "移动端ui库饿了么Mint-UI http://mint-ui.github.io/#!/zh-cnmain.js引入编写组件，全局组件注册props谁用我谁来传时间格式转换需要定义时间格式的转换涉及"}, {"id": "6844903602067079181", "title": "（VUE!jQuery！插件！）盘点前端群的无脑回答", "desc": "然后有一些稍微高级的：我想快一点的解决方法。我想用性能好一点的方法。 然后当你发现水群是解决不了的问题的时候，你已经迈出了进阶的一步了。在群里问，如果不是一堆熟人，都是陌生人的话，太简单人家嫌无脑，太难人家嫌麻烦或者压根不会，中等的稍微查一下资料也能做出来。所以说在一个全是陌生…"}, {"id": "6844903842715271176", "title": "vue中的scoped坑点", "desc": "不要使用scoped属性。于是我查找了下关于scoped的文章。 推荐使用scoped推动组件私有化，文章所提到的不使用仅出现在已有UI库的样式覆盖上（当然人家用了scoped 那就很难办了）。 首先，解决组件样式全局污染，也就是我们在这里不使用scoped 覆盖了样式，那么我…"}, {"id": "6844903619184033800", "title": "分析vue-cli@2.9.3 搭建的webpack项目工程", "desc": "项目放在笔者的github上，分析vue-cli@2.9.3 搭建的webpack项目工程。方便大家克隆下载，或者在线查看。同时也求个star ^_^，也是对笔者的一种鼓励和支持。 如果对webpack还不是很了解，可以查看webpack官方文档中的概念，虽然是最新版本的，但概…"}, {"id": "6844903928023220231", "title": "vue+iview表单校验", "desc": "1.使用v-show或v-if动态切换校验selecthttps://blog.csdn.net/ztx114/article/details/92806695----引用描述问题：select学生类"}, {"id": "6953176014679703566", "title": "基于MVVM模式开发的表单插件", "desc": "表单插件 开发背景 业务开发，经常要使用框架layui，bootstrap等。为了写一个表单，有的经常要把整个库导进来，增大项目体积； 有的还要额外导入的扩招包，使用起来非常麻烦。开发这个插件，可以解"}, {"id": "6844903575743807501", "title": "亲自踩过的vue的坑", "desc": "一、Vue不能检测对象属性的添加或删除：运行的结果是浏览器什么都没渲染出来因为obj的属性是我动态添加上去的！！vue文档里说了：还是由于JavaScript的限制，Vue不能检测对象属性的添加或删除"}, {"id": "6844903513361743886", "title": "《京保养》基于Vue+Vuex的单页面应用实践", "desc": "接到《京保养》项目需求，了解到是移动端项目，运用于微信公众号及京东 APP 。通过与后端研发沟通，后端将提供所有的数据展示接口，这样最终商定使用前后端分离技术，而作为前端这边就非常适合选择基于 webpack + Vue 的单页面应用来实现。 前期组内也有基于单页面应用的项目总…"}, {"id": "6996525525028044830", "title": "VUE 实战加油，加油 fighting！", "desc": "实战篇 cnode社区的基本架构 组件： Header 头部 Posltlist 首页列表 Article 文章的详情页 Sidebar 侧边栏 Userinfo 用户个人信息 psgination "}, {"id": "6844903903314575374", "title": "Vue2.0源码阅读笔记（五）：模板编译", "desc": "在使用Vue进行实际开发的过程中，大多数时候使用模板来创建HTML，模板功能强大且简洁直观，最终模板会编译成渲染函数，本文主要介绍模板编译的具体过程。 Vue从能否处理 template 选项的角度分为两个版本：运行时+编译器、只包含运行时。运行时+编译器版本也被称为完整版。只…"}, {"id": "6989139398323339278", "title": "Vue学习笔记 - 组件化开发 - 兄弟组件数据交互", "desc": "基本原理 单独的事件中心管理组件间的通信 事件监听与事件销毁 触发事件 示例 html: js:505050505050"}, {"id": "6850418105500303367", "title": "带你了解 vue-next（Vue 3.0）之 炉火纯青", "desc": "看完上两章 初入茅庐 小试牛刀 之后，大家应该对vue-next（Vue 3.0） 的 API 使用已经了如指掌了。好奇的同学一定对 vue-next 响应式的原理充满好奇，本章就带你解密！ 最新vue-next 的源码发布了，虽然是 pre-alpha 版本，但这时候其实是阅…"}, {"id": "6844904048181657613", "title": "Vue 图片压缩并上传至服务器", "desc": "本文主要讲解基于 Vue + Vant ，实现移动端图片选择，并用 Canvas 压缩图片，最后上传至服务器。还会封装一个工具类，方便直接调用。 定义的最大宽度和最大高度均为 500，如果图片的宽高至少有一个超出了 500，都会被 **等比例 **压缩，不用担心变形。可以根据自…"}, {"id": "6872715359435587597", "title": "Vue源码分析（二）-----编译（compile）", "desc": "在上文中，编写的Vue的双向数据绑定的demo中是通过Compile来完成模板到真实Dom节点的转换。其中使用document.createDocumentFragment()来创建一个文档碎片，即存在内存中的Dom节点。当时我们只是做了一个简单的处理。但是Vue实际的编译比这…"}, {"id": "6994698605198049316", "title": "Vue—关于插件", "desc": "在Vue中提供了use方法来安装插件，那么Vue插件的原理是什么呢？ use方法官方描述如下图： 也就是说Vue.use()方法接收一个函数或者提供install方法的对象作为参数（必须提供insta"}, {"id": "6993701864445313031", "title": "关于Vue的两种版本", "desc": "完整版和运行时版 完整版 同时包含编译器（compiler）和运行时版，文件名是vue.js，或者代码体积更小的vue.mini.js 完整版的 编译器的作用是把视图中的HTML或者template中"}, {"id": "6982145763828563975", "title": "Vue2.0源码阅读计划(七)——All in", "desc": "前言 首先，这篇文章名称为什么叫All in？ 因为这是收尾篇，兔兔要梭哈。收尾很匆匆？ 倘若真的按长篇系列写下去，后面还应该有<实例方法篇>、<全局API篇>、<过滤器篇>、<指令篇>、<插件篇>、"}, {"id": "6994077959879393317", "title": "如何用vue工程发布单个组件", "desc": "1. 新建工程与组件 用vue-cli搭建一个基础工程，然后新建一个组件，例如一个Banner组件： src/components/alee-banner/AleeBanner.vue: 然后在其他组"}, {"id": "6844903950932525063", "title": "从实际出发，前端如何解决需求问题！", "desc": "H5图片保存，一般是长按保存，所以，首先要实现一个长按功能。 移动端使用touchstart和touchend来做长按功能，prevent阻止浏览器默认行为，浏览器很多事件有默认行为，不阻止默认行为的话，浏览器会执行它的默认行为，我们用 JavaScript 处理一个事件，通常…"}, {"id": "6844903998563024910", "title": "Vue项目中优雅使用icon", "desc": "CSS Sprites在国内很多人叫css精灵/css雪碧图(啥都行)，是一种网页图片应用处理方式。它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，这样一来，当访问该页面时，载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。加速的关键，不是降低质量，而是减少个数 …"}, {"id": "6844904163327868941", "title": "Vue 打包体积优化方案", "desc": "Vue-cli3打包体积优化方案前言:在vue.config.js中进行配置执行npmrunbuild或者npmrunserve会出现这花里胡哨的界面用来分析文件大小分析还没进行优化前vendor~a"}, {"id": "6989881330590826532", "title": "# Vue实战之从零搭建Vite2+Vue3全家桶（三）", "desc": "前言 闲暇时间写写文章，能写多少写多少，主要是用来总结完善一下自己的技术栈，查漏补缺。 上一篇完善了http请求工具的使用，本篇主要介绍icon图标管理插件的使用。 上一篇传送门 Vue实战之从零搭建"}, {"id": "6844904008658731022", "title": "Vue.js 无限滚动列表性能优化方案", "desc": "大家都知道，Web 页面修改 DOM 是开销较大的操作，相比其他操作要慢很多。这是为什么呢？因为每次 DOM 修改，浏览器往往需要重新计算元素布局，再重新渲染。也就是所谓的重排（reflow）和重绘（repaint）。尤其是在页面包含大量元素和复杂布局的情况下，性能会受到影响。…"}, {"id": "6844903664327344135", "title": "我写了一个面向源码阅读者的 UI 框架（基于 Vue）", "desc": "轱辘 UI 是一个不太一样的 UI 框架。 本 UI 框架是一个「面向源码阅读者」的框架。如果对你有帮助，请不要吝惜你的 star。 也就是说，我制作这个框架的目的就是让前端新人学习轮子的制作思路。所有代码都追求可读性。 （抱歉，由于制作非常耗时，所以视频是收费的。不过项目搭建…"}, {"id": "6982126442641358855", "title": "vue 从指定页面进入到form表单页面时用户填写数据缓存 ", "desc": "需求描述： 有一个巨长的form表单A页面（大概有287项这么多）用户填写完毕，核验通过会跳转进入下一B页面。用户进入B页面会发现之前填写的信息有误，想回退A页面进行修改，然后A页面信息没有保存，需要"}, {"id": "6968360033436467236", "title": "FullCalendar-日程表vue使用", "desc": "Fullcalendar是一个非常受欢迎的日历日程处理的js组件，它功能强大，文档齐全，可定制化高，可与你的项目无缝对接。本站之前有很多文章介绍了Fullcalendar（v3）的使用。今天我们来看看"}, {"id": "6995809825732952077", "title": "深入浅出vue源码一(变化检测章)", "desc": "MVVM最大特点就是数据驱动视图，那我们如何得知数据何时变化以及何时通知视图更新呢？下面跟着我一起看看Vue是如何完成数据的变化检测和依赖更新的，我将由浅入深的解析基本原理和核心思想。"}, {"id": "6992817215166906382", "title": "vue cli 教你快速搭建一个vue项目", "desc": "vue cli 脚手架 介绍 vue cli是一个脚手架，用于快速搭建一个vue项目并且配置好使用的插件等"}, {"id": "6844903713195163655", "title": "用Vue开发仿旅游站webapp项目总结 （上）", "desc": "此文章，仅是做完项目后的个人觉得可以总结下来的操作/思路，接触vue不久的朋友应该会有收获。此项目也才是萌新做的第二个Vue项目，使用了脚手架工具（ vue-cli 2.x 非 3 ），前辈老手们有时间看的话，有写得不好的地方还请多多指导！~ 仅实现项目首页、项目详情页、城市列…"}, {"id": "6906489884031713288", "title": "菜鸟在Vue中使用Axios请求后台的坑与排查", "desc": "开始以为是后台的问题，但用postman请求下这个接口，发现是有返回值的，说明问题并不是在接口的上。 那么问题就来了，既然排除了是后台接口的问题，那么会不会是这个Axios的问题呢？因为这前端的页面之前用Ajax请求是能接收到这些参数的。前端请求代码如下： 由于刚学Vue(昨天…"}, {"id": "6972337499850932238", "title": "Vue开发中可以使用的ES6特征", "desc": "在Vue应用开发中使用的所有必要功能来改善编程体验，提高开发效率及代码质量。通过Vue CLI的Babel或core-js集成，使开发中的代码严格按照配置规范进行迭代，有助于团队协作。"}, {"id": "6981324282122993700", "title": "前端开发vscode eslint 代码规范 插件配置记录", "desc": "前言 最近有幸参与到公司的前端开发项目中，由于公司项目使用了严格的 eslint 来规范代码。之前，的项目全是用 webstrom 作为开发工具。但是我还是笔记喜欢使用 vscode 来编码，在设置 "}, {"id": "7004002556728836132", "title": "react/vue中的key有什么作用？（key的内部原理是什么？）", "desc": "# react/vue中的key有什么作用？（key的内部原理是什么？） 为什么遍历列表时，key最好不要用index? 1. 虚拟DOM中key的作用： 2. 用index作为key可能会引发的问题"}, {"id": "6903263924255195149", "title": "将 Vue 渲染到嵌入式液晶屏", "desc": "如标题所示,就是将Vue渲染到嵌入式液晶屏。这里使用的液晶屏是0.96 寸大128x64分辨率的SSD1306。要将Vue渲染到液晶屏,我们还需要一个桥梁,它必须具备控制液晶屏及运行代码的能力。而树莓派的硬件对接能力和可编程性天然就具备这个条件。最后一个问题来了,我们用什么技术…"}, {"id": "7003991754105946148", "title": "[Element Plus 源码解析] Descriptions 描述列表", "desc": "一、组件介绍 官网链接：Descriptions 组件 | Element (gitee.io)。 el-descriptions组件是一个展示类组件，其使用表格展示多个字段的信息；需要和el-des"}, {"id": "6994964686215053326", "title": "表头加字体图标hover显示信息 vue", "desc": "文章是针对需求当表格每个表头的字体图标鼠标放上去悬停展示不同的信息时的处理方法，本文使用的是vue框架+element ui，下面图中我对：render-header=\"icons\"画了红框，这里注意"}, {"id": "6844903702411608072", "title": "vue组件通信全揭秘(共7章)", "desc": "这文章在一年前已经写出来了。今天还是决定放出来供所有人学习。为什么我会写vue组件通信全揭秘，因为无论任何组件模式的框架。组件是核心，只有把组件写组件之间能理顺了。项目也就自然顺了。内容非常多，而且一年后我觉得组件的通信部分的没有任何变化。没有任何一点过时。希望对大家有帮助 V…"}, {"id": "6887590229692121096", "title": "Vue3实战系列：Vue3.0 + Vant3.0 搭建种子项目", "desc": "最近在用 Vue3 写一个开源的商城项目，开源后让大家也可以用现成的 Vue3 大型商城项目源码来练练手，目前处于开发阶段，过程中用到了 Vant3.0，于是就整理了这篇文章来讲一下如何使用 Vue3.0 + Vant 3.0 搭建种子项目。 众所周知，Vue 3.0 发布已经…"}, {"id": "6992511682077524004", "title": "学习Vue源码之前要先打基础--概念解析", "desc": "在学习源码之前，我们需要了解这么几个东西的概念。什么是AST、什么是render函数、什么是模板等等。。。在此，我总结了一些编译过程的相关概念，希望大家喜欢哦！"}, {"id": "7000613932553486343", "title": "Vue3 解析系列之 mount 函数", "desc": "Vue3 解析系列之 mount 函数 本期会对核心方法 mount 挂载逻辑 进行解析.分为 创建VNode 和 组件初始化挂载 阶段"}, {"id": "7005900263286374431", "title": "vue中transition组件的正确使用姿势", "desc": "一、背景 Vue 在插入、更新或者移除 DOM 时，使用动画能让页面效果更炫。 二、实现 使用Vue的transition组件提供多种不同方式的实现过渡效果。 transition组件：包含过渡方式和"}, {"id": "6844903806132568072", "title": "让虚拟DOM和DOM-diff不再成为你的绊脚石", "desc": "createElement方法也是vue和react用来创建虚拟DOM的方法，我们也叫这个名字，方便记忆。接收三个参数，分别是type，props和children 到目前为止，已经轻而易举的实现了创建虚拟DOM。那么，接下来进行下一步，将其渲染为真实的DOM，别犹豫，继续回到…"}, {"id": "6999458470650970142", "title": "vue中的cloneVNode", "desc": "前言 首先，这篇文章肯定对我们的日常开发和代码完全没有任何帮助，写这篇文章纯属是为了自己的脑残，花了那么多时间去寻根究底找个慰藉。 之前在阅读diff源码时候经常会出现一个 cloneIfMounte"}, {"id": "6844903821513064456", "title": "封装Vue组件的一些技巧", "desc": "写Vue有很长一段时间了，除了常规的业务开发之外，也应该思考和反思一下封装组件的正确方式。以弹窗组件为例，一种实现是在需要模板中引入需要弹窗展示的组件，然后通过一个flag变量来控制弹窗的组件，在业务代码里面会充斥着冗余的弹窗组件逻辑，十分不优雅。 本文整理了开发Vue组件的一…"}, {"id": "6951671158198501383", "title": "手写Vue2.0源码（七）-Mixin混入原理 ", "desc": "前言此篇主要手写 Vue2.0 源码-Mixin 混入原理上一篇咱们主要介绍了 Vue 异步更新原理 核心是运用 nextTick 实现异步队列 此篇主要包含 Mixin 混入"}, {"id": "6844904120290131982", "title": "Vue 的计算属性真的会缓存吗？（保姆级教学，原理深入揭秘）", "desc": "很多人提起 Vue 中的 computed，第一反应就是计算属性会缓存，那么它到底是怎么缓存的呢？缓存的到底是什么，什么时候缓存会失效，相信还是有很多人对此很模糊。 本文以 Vue 2.6.11 版本为基础，就深入原理，带你来看看所谓的缓存到底是什么样的。 本文假定你对 Vue…"}, {"id": "6998086817333379080", "title": "vue响应式的原理 | Vue 核心知识点和实现原理", "desc": "本文章将带领大家理解vue数据驱动、响应式的核心原理、发布订阅模式和观察者的原理与基本实现。本文已参与掘金创作者训练营第三期「话题写作」赛道。"}, {"id": "7000008650706124813", "title": "Vue3从0到1组件开发-业务组件：列表上下拉动画", "desc": "这个组件是公司项目中运用到的一个组件，我接受项目时仅完成了下拉即以及下拉刷新的动画，后来boss觉得滑到底部之后无交互不好看，于"}, {"id": "6968972252389851172", "title": "Electron+Vue3 MAC 版日历 开发记录(2)——功能清单", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 M ac 版日历📅️。"}, {"id": "6844903603421839368", "title": "VUE组件汇总", "desc": "内容UI组件开发框架实用库服务端辅助工具应用实例Demo示例UI组件element★13489-饿了么出品的Vue2的webUI工具套件Vux★8133-基于Vue和WeUI的组件库iview★663"}, {"id": "7000526832923574286", "title": "揭开Vue3.0 setup函数的神秘面纱", "desc": "在Vue 3.0的使用中我们可以不使用data、props、methods、computed等Option函数，可以只下在setup函数中进行编写代码逻辑。当然为了和Vue 2.0兼容，也可以继续使用"}, {"id": "7002485341848829966", "title": "[Element Plus 源码解析] Popper 弹框", "desc": "一、组件介绍 element-plus的官方文档中没有ElPopper组件，ElPopper在其他组件内部使用，如：Select、Cascade、ColorPicker等组件中都用到了ElPopper"}, {"id": "6844904162442870792", "title": "还在用字体图标吗，试试svg图标吧(内附vuecli-svg-sprite-loader插件)", "desc": "相信每位前端童鞋都对字体图标不陌生，毕竟网页必然少不了用大量的图标来装饰页面效果。在很早的时候，我们一般都是用img来当作图标来使用，由于大量地使用img会造成http请求过多的问题，所以这类使用方式也很快就被抛弃了，即使雪碧图也退出了历史的舞台(因为各种定位写法真的太麻烦了…"}, {"id": "6979531445832253470", "title": "vue-simple-uploader 解析", "desc": "一、文件来源 二、src目录 三、components下各文件详解 1、uploader.vue 引入 页面逻辑 (1)provide uploader 指向 this，以便在子组件中调用 (2)在c"}, {"id": "6976962493159571464", "title": "vue篇之全屏功能", "desc": "前言 前言不知道写什么，直接上代码 注意 全屏状态下，无法监听ESC按键事件，通过监听全屏事件来改变全屏状态进而控制图标展示 存在的问题 F11全屏，无法通过按钮退出全屏 这个问题虽然可以通过阻止F1"}, {"id": "6905297335136288775", "title": "vue后台管理系统——增删改查列表一键配置", "desc": "这样一个简单table列表就已经完成，tableData就是列表数据，listOption就是列表项，是不是方便许多，那么我们一步一步去分析mn-crud这个组件的神秘面纱。 等等..."}, {"id": "6960158051101835277", "title": "Vue源码中的生命周期", "desc": "前情回顾 理解vdom的前提下，component，element的创建实际上对vnode的实例化。而创建组件的时候会将生命周期混入进去，一起来看下这个生命周期 生命周期 生命周期的变量定义在shar"}, {"id": "6844904008855846925", "title": "关于Vue代码如何写的一些见解", "desc": "大家都知道Vue是目前前端三大流行框架之一，是中国人尤雨溪推出。或者基于这个原因，中国大部分中小公司都选择了Vue。我觉得应该还有另外一个重要原因，Vue比较容易入门。今天我不是要对比Vue和其它框架的优劣，我只是想谈谈Vue应该怎么写。之所以萌发这个想法，主要是因为最近接到了…"}, {"id": "6976916696661491749", "title": "关于vue3 的onMounted，有坑", "desc": "首先说说onMounted 问题 but 父组件 子组件 结果 ps: 我不是很明白为什么会出现这个问题，为什么父组件会比子组件更先构造完成 子组件代码地址 父组件代码地址"}, {"id": "6982476935934787614", "title": "Vue2.0的笔记", "desc": "Vue2.0复习笔记，视频学习，是从我完全入门开始写的一些经历，中间可能会有一些加深印象的，其他知识点·的补充。"}, {"id": "6952769479172423688", "title": "Vue3学习第二天", "desc": "数据,方法,计算属性和侦听器如果我们在click方法中使用箭头函数,因为this会一层一层往上找,那么此时的this执行的是window控制台显示结果:结论: 所以在Vue中我们最好定义方法的时候不要"}, {"id": "6946482671518220319", "title": "vue2项目升级至vue3踩坑", "desc": "最近学习TS中，借这个机会用vue3+ts重构了之前的后台模板，对于升级过程中遇到的问题做一些简单的记录vue2版项目源码：https://github.com/BaiFangZi/vue-antd-"}, {"id": "6844903671466033165", "title": "Vue 源码学习（一)", "desc": "vue 无疑是一个非常棒的前端MVVM库，怀着好奇的心情开始看VUE源码，当然遇到了很多的疑问，也查了很多的资料看了一些文章。但是这些资料很多都忽略了很重要的部分或者是一些重要的细节，亦或是一些很重要的部分没有指出，特别是在computed的实现上。所以才打算写这篇文章，记录一…"}, {"id": "6844903847496777742", "title": "记一次开源学习--D2Admin 人人企业版", "desc": "上个月月底@D2开源组 开源了使用 D2Admin 适配 人人企业版(专业版) 的前端工程--d2-admin-renren-security-enterprise,具体详情见☞D2Admin 人人企业版适配发布。由于最近有开发后台管理系统的需求，加上其他诸多因素，如：想学习优…"}, {"id": "6844904181719891981", "title": "快速搭建 vue 组件方案 vue-general-components", "desc": "在日常开发中，我们经常会在项目中写很多组件，有些是通用的有些是非常业务的，而一些优秀的组件会随着项目结项而封印；而不会说提炼成对应的 npm 仓库；社区上有很多优秀的 ui 库比如，element-ui、ant-design-vue等，又无法加入自己的组件到其中，也无法魔改他们…"}, {"id": "6916440099592863751", "title": "vue下表单场景的思考", "desc": "最近在网上看到了一篇阿里的开源文章：【中后台应用】从表单抽象到表单中台；引起了很深共鸣和思考，文中其实是提出了一种动态表单（也可称为数据配置表单）的解决方案，开发者通过这套方案，由（写页面（组件）+写状态=>表单）转变为配置生成表单，思路与主轴十分明确。 作为面向toB业务的前…"}, {"id": "6885252127934349320", "title": "【真香系列】Vue-Next 源码第五章", "desc": "回顾下我们的案例，我们使用 reactive 创建了一个 state，之后该 state 的变化都会触发响应式的更新渲染。 调用 createReactiveObject 方法并返回创建的 state 代理对象。 isReadonly 用来区分是否为只读，Vue3 中可以使用 …"}, {"id": "6942133986105753608", "title": "Vue2.x中常见的几种值传递方式", "desc": "您好，我是沧沧凉凉，是一名前端开发者，目前在掘金、知乎以及个人博客上同步发表一些学习前端时遇到的趣事和知识，欢迎关注。 在面试中，Vue值传递问题一直是各大面试官最喜欢问到的问题之一，了解了各种值传递后，遇到一些比较复杂的界面，需要大量运用值传递时，你就可以从众多的值传递方式中…"}, {"id": "6844903856548085774", "title": "Element-ui中 元素滚动时el-option超出元素区域的问题", "desc": "popperEl是在mouseup事件里去做隐藏逻辑的, 而按下鼠标, 移动滚动条的时候, 并没有触发mouseup事件. 通过监听$root的scroll事件,利用事件冒泡,只需要在根元素上添加scroll事件的监听就可以了, 测试一番之后, 发现scroll事件根本不支持冒…"}, {"id": "6870727967119507463", "title": "vue3 从入门到实战（中）", "desc": "由于笔者只是学习了前端11个月的小白，对vue3很多原理并不了解，如dom-diff，虚拟dom，模板编译等，这些知识笔者大多只是知其然不知其所以然，本篇主要写一些vue3的简单原理，如computed，reactive，watchEffect，vuex等，然后稍微简单分析一下…"}, {"id": "6844904205694550024", "title": "Vue props 原理分析", "desc": "vue的props属性用于父组件向子组件传递值，是一个高频使用的特性。 ​ props的使用需要父子组件的配合，在父组件中使用v-bind绑定要传递的值，在子组件中的props属性中声明接受属性的类型和默认值。使用示例： ​ 从上面的使用示例可以看出，父组件的templat…"}, {"id": "6982845288826273829", "title": "05.Vue插件的封装", "desc": "一.Vue的插件在一个页面里的使用 这样子基本上没有太大的效率 无法重复利用，没起到封装的作用 二.封装plugin的JS页面 封装的Vue插件可以重复利用"}, {"id": "6844903843478667271", "title": "少女风vue组件库制作全攻略~~", "desc": "git clone到本地安装依赖后，执行npm run serve进行本地组件库开发，npm run docs:dev进行组件库官网开发。一般在src/demo.vue进行单个组件测试通过后，再引入到.vuepress/components中放入组件库官网。 $children…"}, {"id": "6966418770768166919", "title": "vue须知（5）—— 你知道nextTick吗，它是干什么的，实现原理是什么？", "desc": "这道题考查大家对vue异步更新队列的理解，有一定深度，如果能够很好回答此题，对面试效果有极大帮助 答题思路 1.nextTick是啥?下一个定义 2.为什么需要它呢?用异步更新队列实现原理解释 3我再"}, {"id": "7004256850627526692", "title": "[Element Plus 源码解析 - 指令篇] click-outside 指令", "desc": "一、指令介绍 见名思意，click-outside指令是点击元素节点之外时进行相应的处理。 常见的用途是点击弹框之外的部分时关闭弹出框，在element-plus源码中被用于el-select/el-"}, {"id": "6982529246480564238", "title": "Vue3+Vite+TS+Eslint（Airbnb规则）搭建生产项目，踩坑详记（一）", "desc": "从0 开始Vue3 + Vite + TypeScript + ESLint + Prettier 搭建生产项目，引入Airbnb规则；项目搭建踩坑实录"}, {"id": "7001126401881407495", "title": "Vue2源码系列-数据绑定", "desc": "我们这里以 Vue 的 2.6.14 版本为例讲解；篇幅有限，仅节选关键源码展示。先给总结，毕竟不是所有人都喜欢有趣（bushi）的源码。 官方图镇楼 当你把一个普通的 JavaScript 对象传入"}, {"id": "6971622260490797069", "title": "图文并茂地来详细讲讲Vue Diff算法", "desc": "最近刚好看完Vue源码中的Diff算法，刚好在参加更文挑战，就做了一些动图还有流程图，图文并茂地来详细讲一讲，Vue的Diff算法叭。"}, {"id": "6984594496142966814", "title": "尤雨溪的5KB petite-vue源码解析", "desc": "近期尤雨溪发布了5kb的petite-vue,好奇的我,clone了他的源码，给大家解析一波。 最近由于工作事情多，所以放缓了原创的脚步！大家谅解 想看我往期手写源码+各种源码解析的可以关注"}, {"id": "6865477717220851720", "title": "学习Vue应用测试，让你的项目更加健壮和稳定", "desc": "本篇文章由阅读《Vue.js应用测试》书籍、学习《Vue Test Utils》官网知识以及实际工作经验总结而来，阅读书籍请支持正版。 前端应用程序主要编写三种测试类型：单元测试、快照测试、端到端测试。本篇文章着重介绍Vue组件的单元测试和快照测试，对于端到端测试请自行搜索相关…"}, {"id": "6971069922289909797", "title": "试试图森未来开源的一个Vue3组件库-NaiveUI （上）| 尝鲜记", "desc": "昨天尤老师发布了一条微博，说图森未来的小伙伴开源了一个Vue 3组件库 Naive UI，看上去很不错。于是我今天来体验体验~"}, {"id": "6983196916334985247", "title": "是时候放弃 el-form 组件了", "desc": "相信很多正在用 element-ui 组件的同学，都会用到过 el-form 表单组件，这个组件帮助我们完成了表单验证和表单提交功能，但是在用的时候，会发现一些不方便的地方，比如说验证规则无法复用。 "}, {"id": "6857359743817220104", "title": "30行写一个Vue图片懒加载指令", "desc": "OK,兄弟们。前面一篇文章就说过要用指令的方式来实现图片的懒加载。其实，前端发展这么多年，要实现图片懒加载非常的简单，配合上Vue的指令，30行轻轻松松实现一个高复用的Vue指令。一起来看看吧。 这里我是用的IntersectionObserver API去实现的。 简单来说可…"}, {"id": "6867785919693832200", "title": "TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？", "desc": "TypeScript 4.1 快要发布了，老爷子 Anders Hejlsberg 加入了一项重大更新，「字符串模板类型」 的支持。昨天看到这个更新的我特别兴奋，曾几何时，只要一遇到字符串拼接相关的类型，TypeScript 就束手无策了，比如： Vuex 中加了 namesp…"}, {"id": "6888125003024629768", "title": "根据公司的业务需求我是这样封装组件", "desc": "一个项目下来发现有很多看似相似但又有区别的功能，想想如果一个一个的去写这种相似又有区别的功能，就会显的乏味枯燥，而且更关键的是这样的代码使得项目更难的去维护。如何让项目焕然一新，并且方便以后需求迭代的时候更好的维护呢？ 那就动手封装组件吧，让那些相似的功能需求都统一管理统一配置…"}, {"id": "6982876819292684318", "title": "Vue3+Vite+TS+Eslint（Airbnb规则）搭建生产项目，踩坑详记（二）：配置husky和lint-staged", "desc": "上回我们说到配置ESLint以及添加vue-recommended、airbnb-base、prettier规则。这篇文章我们将消息介绍如果配置在提交前校验代码。"}, {"id": "6875209402035634184", "title": " Vue3新特性", "desc": "vue3的一些新特性 Composition API , Fragment, teleport等等，以及和vue2对比一些api的改变"}, {"id": "6998172977728585765", "title": "Web Socket的实现和应用", "desc": "什么是WebSocket? WebSocket 是HTML5 中的协议，支持持久连续，http 协议不支持持久性连接。Http1.0 和H"}, {"id": "6844903955080675336", "title": "收下这波 vue 技巧，让开发效率翻倍", "desc": "vue 提供的模块化无疑是提高开发效率的神器，而且对于后期代码优化和维护也提供的极大地便利。 vue 提供了组件功能，组件又可以分为全局组件和非全局组件。区别是全局组件你可以直接在 .vue 文件中直接使用自定义的 html 即可。非全局组件必须在 Vue 的对象中定义 com…"}, {"id": "6989132702775525407", "title": "⚡qiankun微前端中的应用通信-不受框架限制的响应式数据管理", "desc": "一个qiankun微前端的应用通信模块，以redux为核心，采用发布-订阅模式进行封装，实现应用间通信数据上的响应式，并在代码结构上实现模块化，api方面仿照vuex，降低上手难度, 并可适用多框架。"}, {"id": "6854573219911827470", "title": "「Vue项目」我是如何解决滚动组件&联动效果", "desc": "最近的一个项目做的是vue组件中的一个应用，「处理滚动列表」，这个应该是很常见的需求了，在项目中遇到的痛点，难点，如何一步步解决的，以及小细节一些优化。 经常会遇到的问题就是初始化了，「还是不能滚动」。那么对于这个而言，我最近用到一些经验是什么呢？ wrapper是父容器，它一…"}, {"id": "6882393804310052871", "title": "Vue3实战系列：结合 Ant-Design-of-Vue 实践 Composition API", "desc": "Vue 3 出来之后，很多人有如下想法，“又要学新东西啦”、“我学不动了”等等。 但是事物总有它的两面性，前端知识更新的很快，利好勤奋好学的同学。计算机行业的迭代速度很快，前端在计算机领域里，算是前浪被拍在沙滩上比较快的。 我很羡慕还在学校的同学，因为现在的大学生，信息的获取量…"}, {"id": "6926810474407428104", "title": "Vue数据驱动-如何成为一个合格的侦察兵", "desc": "最近这段时间在学习Vue数据驱动的实现原理，看过网上很多大牛写的关于Vue数据驱动的文章，发现讲的都很抽象，不适合小白阅读，今天我就从小白的角度出发，详细的分析一下Vue数据驱动的实现原理，希望大家看过以后可以更好的理解Vue数据驱动。 在正式开始之前，先给大家讲一个小故事。大…"}, {"id": "6934504824558288904", "title": "Vue源码解读(methods,data)         ", "desc": "在分析完props相关逻辑后，接下来分析与methods相关的逻辑，这部分相比于props要简单得多。 在initState()方法中，调用了initMethods()并传入了当前实例vm和撰写的methods。接下来，看一下initMethods方法具体的实现： 它首先判断了…"}, {"id": "6969127215149613086", "title": "vue3学习（4）reactive源码阅读理解", "desc": "这是我参与更文挑战的第1天，活动详情查看更文挑战 reactive作为vue3中最重要的几个响应式API，它的定义是为传入一个对象并返回一个基于原对象的响应式代理，即返回一个 Proxy，相当于 Vu"}, {"id": "6844903909882855437", "title": "Vue的运作原理——浅析MVVM及Virtual DOM", "desc": "前言本文不会拉出Vue的源码出来剖析一番，也不会挂一大段代码去笼统地讲，尽量会从逻辑角度一步步来梳理如果你跟之前的我一样，听说过MVVM，也对VirtualDom有所耳闻，但是说不出个大概那么希望这篇"}, {"id": "6844903990279274503", "title": "Vue 3 对 Web 应用性能的改进", "desc": "有关即将发布的 Vue.js 的第 3 个主要版本的信息越来越多。通过下面的讨论，虽然还不能完全确定其所有内容，但是我们可以放心地认为，它将是对当前版本（已经非常出色）的巨大改进。 Vue 团队在改进框架 API 方面做得非常出色。 尤雨溪将 Vue 3 的目标描述为： 通过查…"}, {"id": "6844904105412935688", "title": "Vue响应式原理", "desc": "实例化：会遍历data和props上的每一个属性，使用defineProperty（vue3.0实现proxy）把它变为响应式的，同时实例化一个Dep（收集Watcher和通知Watcher渲染元素）。 在第一渲染的时候，属性flag和a的Dep收集了Watcher，当flag…"}, {"id": "6966616937598025765", "title": "vue双向绑定原理和Angular的双向绑定原理", "desc": "在vue2中，采用数据劫持结合订阅者-发布者模式的方式，通过objec.defineproperty()来劫持各个属性的getter与setter。在数据变化时发布消息给订阅者，触发相应的监听回调。 "}, {"id": "6897131259517779981", "title": "miniVue3的简单实现-reactive响应式实现", "desc": "reactive, 此api可实现对数据转换为响应式数据，保证经过reative转换过的数据使用后，改变数据，界面能随之更新。 1 rective函数中调用createReactiveObject函数创建响应式对象， 因为在源码中不光有有reactive数据， 还有readOn…"}, {"id": "6966579541439414280", "title": "手把手带你实现一个min版的vue2（3）编译模板", "desc": "提到模板，我们最熟悉的就是es6新增的字符串模板了。例如： 模板是一个模式,在字符串模板里， 当msg是 hello时，a中的msg就会替换成hello，所有a是 hello world; 当msg是"}, {"id": "6915059531228086285", "title": "vue2核心原理(简易) - diff算法解析", "desc": "其他的情况(详细请看注释) 如 文本替换 标签属性比较与生成(patchProps)... 1. 头头比较"}, {"id": "6918297210190987277", "title": "vue2 手写一个简易的服务端渲染 - vue ssr(含vuex+vue-router)", "desc": "前言为什么服务端渲染客户端不利于SEO搜索引擎优化服务端渲染是可以被爬虫抓到的,客户端很难被抓取到SSR直接将HTML字符串传递给浏览器大大加快了首屏加载时间但同时SSR占用更多的CPU和内存资源一些"}, {"id": "6847902223314190350", "title": "Vue.js实现原理-实例方法和全局API", "desc": "将回调fn注册到事件列表中即可，_events在实例初始化时创建。 先移除事件监听，再执行函数。 nextTick接收一个回调函数作为参数，它的作用是将回调延迟到下次DOM更新周期之后执行。如果没有提供回调且支持Promise的环境中，则返回一个Promise。 在同一轮事件循…"}, {"id": "6915714091470290958", "title": "「快速get」Vue响应式原理", "desc": "vue最大的特点就是数据响应式，可以实现数据模型和试图的统一，当修改数据时试图中对应位置会相应的改变，其实vue源码中对使用Object.defineProperty对进行了数据劫持和依赖收集。接下来来屡一屡源码是如何实现的？"}, {"id": "6844903890127683592", "title": "[译]使用 Router 在 Vue 页面之间跳转", "desc": "当你在构建现代 web 应用程序时，无可避免地需要在页面之间跳转。轻易地做到这一点是非常重要的。为了实现这一点，Angular、React 和 Vue 等框架都具有路由功能。 接下来，我们将会学到如何使用 vue-router 配置路由，并实现在不同路由之间的跳转。 如果你一直…"}, {"id": "6941218609519656996", "title": "El-table优化&列表生成器｜项目复盘", "desc": "工作中难免遇到重复劳动。每次对着 element-ui 中 的 el-table 一顿乱撸。为了避免重复劳动，代码生成器一定是一个不错的选择。附图。 在日常开发中难免对后台返回的数据进行一些处理。然而在使用 el-table-colume 的时候，经常使用 el-table-c…"}, {"id": "6844903811111190536", "title": "一分钟开发一个表单", "desc": "<(￣︶￣)>。 OK，不到几秒，唰的一下，一个表单就生成了。 优化 email 字段：对于邮件，加个邮件格式验证规则是有必要滴。再画蛇添足一下吧，来个必填，呵呵。 充分测试：该大版本加入了大量的自动化测试来保障项目的质量。 自动支持dx表达式：用户自定义的widget的wid…"}, {"id": "6844903655695450126", "title": "详解Vue Native", "desc": "译者按： 一家叫GeekyAnts的印度公司开发了Vue Native，基于React Native实现。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 尽管整个JavaScript社区对Vue的情感是比较微妙的(不懂为啥)，但也不能阻止我…"}, {"id": "6844903543510417415", "title": "如何开发自己的 yeoman 脚手架", "desc": "脚手架能够帮我们自动生成包含本地调试、编译、打包、发布等工具的项目目录，使我们能够减少大量重复劳动的同时，遵循一定的开发规范，大大提升我们的开发、协同效率。 下文中出现的 generator 统一代指 yeoman 脚手架生成器。 yeoman 脚手架生成器（generator…"}, {"id": "6844903512975867917", "title": "VUE组件间的数据传递", "desc": "众所周知，Vue 是基于组件来构建 web 应用的。组件将模块和组合发挥到了极致。Vue 是虽说吸取了 AngularJs 的 MVVM的思想，但是它是单向数据流的，也就是说子组件无法直接改变父组件状态。下面总结出常用的组件消息传递的方式。 该方式的数据传递是遵循 Vue 单向…"}, {"id": "6909625744486301709", "title": "Vue3 新特性总览", "desc": "1、Vue3新特性总览性能Tree-shaking支持CompositionAPIFragment、Teleport、Suspense更好的TS支持自定义渲染API2、Vue3关于性能方面的优化引入t"}, {"id": "6970293600944914463", "title": "VUE__基础知识点总结", "desc": "事件-自定义指令-表单修饰符-计算属性-侦听器-过滤器-生命周期-组件--变异方法-组件插槽-___"}, {"id": "6921993981660561422", "title": "Vue CLI模式及环境变量配置详解", "desc": "环境变量前端项目在开发过程中,通常将其环境分为:开发环境,测试环境,线上环境环境变量的意义:在不同的生产环境下可以使用相应的配置变量如何配置环境变量你可以在项目的根目录下进行如下配置:环境文件内应该只"}, {"id": "6941007693314916383", "title": "Vue响应式原理", "desc": "一：首先需要了解的东西数据驱动响应式的核心原理发布订阅模式和观察者模式二：数据驱动数据响应式：数据模型仅仅是普通的javaScript对象,而当我们修改数据时,视图对进行更新,避免了繁琐的DOM操作,"}, {"id": "6984798242886123551", "title": "亲测记录-\\src\\main.js: Cannot find module '@babel/compat-data/corejs3-shipped-propos", "desc": "在使用npm run server运行项目的时候，出现\\src\\main.js: Cannot find module '@babel/compat-data/corejs3-shipped问题"}, {"id": "6844903621428002830", "title": "简单的写一个发布订阅器", "desc": "发布-订阅模式在开发中的应用其实是很广泛的，比如大家都知道的Vue，使用数据驱动模板的改变，将我们的双手从繁琐的dom操作中解放出来，稍微懂一些原理的同学们都知道，其双向数据绑定就是通过数据劫持、发布"}, {"id": "6941172755869990942", "title": "项目记录 — 微信h5跳转小程序 ", "desc": "实际项目中，我们期盼微信内置的h5网页能够拉起微信小程序，终于在2020年3月份，微信推出了开放标签，能够让我们在微信端调起小程序；微信配置1.测试公众号非常重要：必须是已经认证成功的服务账号；个人测"}, {"id": "6844903968791871496", "title": "Electron + Vue + Vscode构建跨平台应用（五）Electron-Vue项目源码分析", "desc": "1) app模块属于Electron里面的一个子模块，他负责整个应用的生命周期，有点类似Android里面的Applicatio类，当通过import关键字导致之后，便可以在项目当中使用了。 3.2）window-all-closed：当所有的窗口都被关闭时触发。 如果没有监听…"}, {"id": "6844903745956872200", "title": "vue响应式系统源码解析", "desc": "vue和react是现在前端框架的双子星。vue以其简单好用而闻名。vue以数据驱动视图，数据响应系统是vue的核心。这篇文章主要是结合源码分析vue响应式系统的原理和实现。 我们\b可以看到当我们给this.message赋值时，视图会自动更新。这就是vue\b数据响应系统做的事…"}, {"id": "6844903542386327559", "title": "使用 vue + thinkjs 开发博客程序记录", "desc": "一入冬懒癌发作，给自己找点事干。之前博客程序写过几次，php的写过两次，nodejs用ThinkJS写过，随着ThinkJS版本从1.x升级到2.x之前的博客程序也做过升级。但是因为前面考虑搜索引擎抓"}, {"id": "6916680728080023566", "title": "vue组件是如何解析及渲染的？", "desc": "本文将对vue组件如何解析以及渲染做一个讲解。 为了保证组件的隔离，每个组件通过extend方法产生一个新的类，去继承父类。并把用户通过Vue.component方法传入的 opts 合并到 vue.options.components，再vue初始化时合并Vue.option…"}, {"id": "6957516250905837599", "title": "Vue学习笔记(八) 组件进阶", "desc": "像 HTML 元素一样，我们常常需要给组件传递内容 比如在下面的例子中，我们给自定义组件 prompt-info 传入 `出错啦` 的文本"}, {"id": "6844904165366300686", "title": "前端工程师如何处理一个烂摊子", "desc": "起因有很多，上任团队的技术水平，代码规范；当前团队的不靠谱队员；经历了产品大型改革之后，新老逻辑耦合在一起，等等原因，最终导致你手上的工作就是一坨shit。 所以，价值（按时交付功能）永远是我们排优先级的最重要指标，但是代码质量，和产品的进度，落实到你手上的一行行代码时，就要加…"}, {"id": "6844903668626489357", "title": "VUE实例：使用 CSS Filter 处理图片", "desc": "CSS 的 filter 函数，可以给图像设置高斯模糊，亮度，调整图像的对比度等的效果，利用 Vue.js 的双向绑定，可以十分方便的实现一个利用 filter 处理图片的应用。 然后将这些值使用 v-model 指令绑定到UI控件上，这里我用的是 ant-design-vue…"}, {"id": "6935800675548790798", "title": "重学Vue【createElement函数做了什么?】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 这个函数在初次挂载和之后的更新都用到了，而 _render() 方法最终会调用 $option.rend…"}, {"id": "6935798499711647752", "title": "重学Vue【Vue实例挂载的实现】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 本篇过一下 Vue 的实例挂载，也就是 vm.$mount 都做了什么事情。 最开始的 Vue.prot…"}, {"id": "6901209110591733774", "title": "手把手教你实现一个Vue无限级联树形表格（增删改）", "desc": "平时我们可能在做项目时，会遇到一个业务逻辑。实现一个无限级联树形表格，什么叫做无限级联树形表格呢？就是下图所展示的内容，有一个祖元素，然后下面可能有很多子孙元素，你可以实现添加、编辑、删除这样几个功能。 这里需要重点说明的是，主要使用了递归的算法以及给数据标识的重要性。详细说明…"}, {"id": "6949753405321510949", "title": "computed和watch", "desc": "computedcomputed虽然写法上像个函数，但是实际上是计算属性。它会根据data数据的数据对象做计算处理，就类似于getter跟setter一样创造一个存取器属性。它有个特点，就是Vue内部"}, {"id": "6844904155002175495", "title": "从源码解惑-$mount执行后，被挂载的节点最后是如何处理的", "desc": "想要知道这些问题的答案，我们可以做一个简单的实验，比如把这两个文件中的某一个id改掉，看一下页面中最终渲染的是哪个，看一下哪个文件中的id改变会导致执行$mount('#app')报错，可以很轻松的得出结论。 为了方便查找到我们要看的源码，所以选择在浏览器打断点调试。那么断点打…"}, {"id": "6844904100493000712", "title": "vue生命周期详解", "desc": "mounted 是在patch完成之后执行。从流程图可以看出，vue组件的挂载是先子后父，所以mounted的执行顺序也是先子后父吗？理论执行顺序是这样的，但是子组件挂载的时候，由于根组件还没挂载到页面上，所以此时访问不到dom元素，也违背了mounted挂载完成的意思。 in…"}, {"id": "6968628843246534686", "title": "一个组件在另一个组件中, 传值", "desc": "手风琴组件 我们需要item项接收single g-collapse g-collapse-item 这样就接收到了"}, {"id": "6998804817309073421", "title": "Vue源码（十一）keep-alive 原理", "desc": "开发过程中，经常使用keep-alive缓存组件。这篇就是分析Vue是怎么通过keep-alive实现缓存的，以及keep-alive特有的两个生命周期函数是什么时机执行的"}, {"id": "7000921976537612324", "title": "Vue-微前端从singleSpa到qiankun", "desc": "什么是SPA？什么是MPA？什么是PWA？ SPA：单页Web应用（single page web applic"}, {"id": "7006639264943308830", "title": "Vue3系列--4.v-model语法糖", "desc": "在说Vue3中的v-model之前，让我们先来看一下Vue2中的v-model是怎么样的。 1.Vue2中v-model的应用场景 对于上述代码中(*)部做出说明 <button @click=\"co"}, {"id": "6996121382207782920", "title": "Vue3从0到1组件开发-布局组件：Scroll滚动", "desc": "如果说之前的轮播图还能因为其常见性，普遍性而跻身布局组件的话， 那么滚动这个也能算布局组件？来看看吧"}, {"id": "6966424310449717284", "title": "Vue中的动态菜单和权限控制指令", "desc": "需求可具体描述为如下内容: 根据权限动态筛选路由 根据权限控制组件的是否展示 我们默认后端权限接口可用, 且返回的是权限实体平铺数组, 并非树形结构 技术栈 Vue Vuex Vue Rou"}, {"id": "6844903815116750862", "title": "「Vue实践」武装你的前端项目", "desc": "1. 接口模块处理 这里封装的依据是后台传的JWT，已封装好的请跳过。 这里做的处理分别是会话已失效和登陆超时，具体的需要根据业务来作变更。 最后是导出基础请求类型封装。 其中给get请求加上时间戳参数，避免从缓存中拿数据。 除了基础请求类型，还有很多类似下载、上传这种，需要特…"}, {"id": "6844903938764832775", "title": "收下这波 JS 技巧，从此少加班", "desc": "界面展示的时间千变万化, 所以一个处理时间的函数，它的重要性就不言而喻了。 formatDate 接受俩个参数, oldDate 类型可以是 Date，String，Number。因为现在用时间戳传递时间真的是蛮多，也蛮方便的，而JS 是一门弱类型语言，所以我将 String …"}, {"id": "6995716757998534664", "title": "Vue3从0到1组件开发-布局组件：Breadcrumb面包屑", "desc": "不整那些有的没的了， 回到面包屑，想必做web开发的小伙伴对这个不会陌生。 而其他的小伙伴可能不知道是啥"}, {"id": "6986648575623036965", "title": "Electron+Vue3 MAC 版日历开发记录(32)——使用vueuse", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6995697357580927006", "title": "vue入门：http客户端axios", "desc": "这是我参与 8 月更文挑战的第 13 天，活动详情查看： 8月更文挑战 1.axiox简介 jquery时代，我们使用ajax向后台提交数据请求，Vue时代，Axios提供了前端对后台数据请求的各种方"}, {"id": "6997690005707554823", "title": "Vue3.0源码解析「reactive」篇 — 0.Reactivity 基本概念", "desc": "0.Reactivity 基本概念 本章节内容非原创，摘自 vue 官方文档以及对 vue-master 上的响应式教学部分翻译，放这篇文章单纯是因为我觉得读 reactive 代码之前，理解其概念尤"}, {"id": "7000683859763265566", "title": "vue响应式原理解析 (进阶必备知识)", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 我们以这张图为基础，先帮助大家重新捋一遍响应式的机制。在这个基础上，再去做更进一步的分析。注意我们图中有三个关键角色：Watcher、Da"}, {"id": "6977529842040471565", "title": "京东 Vue3 组件库支持小程序开发啦！", "desc": "源码抢先看： https://github.com/jdf2e/nutui NutUI 3.0 官网：https://nutui.jd.com/3x/#/ 小程序多端适配 设计初衷 在跨端小程序的开发"}, {"id": "6966537107816841223", "title": "axios在vue里的封装", "desc": "前言： 随着公司移动端业务越来越少，大部分都是web端工作。因为之前也自学过一点html5，所以这次也是打算真的把web学会。当然了我首选了vue。这篇文章要说的就是我对axios在vue里的使用封装"}, {"id": "7006973406516084744", "title": "细读Vue2.6.14 Core 源码(6): defineReactive", "desc": "细读Vue2.6.14 Core 源码(6): defineReactive defineReactive=>observe=>new Observer()=>walk=>defineReactive"}, {"id": "6958292554047553549", "title": "请阐述vue的diff算法", "desc": "diff是什么？diff就是比较两棵树，render会生成两颗树，一棵新树newVnode，一棵旧树oldVnode，然后两棵树进行对比更新找差异就是diff，全称difference，在vue里面 "}, {"id": "7002784871999504391", "title": "vue3.0 响应式", "desc": "vue2.x 是利用 Object.defineProperty 方法侦测对象的属性变化，但该方法有一些固有的缺陷： 性能较差； 在对象上新增属性是无法被侦测的； 改变数组的 length 属性是无法"}, {"id": "6997513670150324231", "title": "实战：让你的网站支持一键切换深色模式的核心要点", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 深色模式对于经常大部分人并不陌生，大多数的 APP 和 web 网页都已经支持了深色模式。深色模式通过调整整体颜色和对比度，从而降低白点值"}, {"id": "6987172006747701256", "title": "Vue实战之从零搭建Vite2+Vue3全家桶（一）", "desc": "本篇主要介绍从零开始搭建Vite2 + Vue3+Element-Plus + Vue-router4 + Vuex + ESLint"}, {"id": "6953506088041840677", "title": "Vue3生态又添一笔！面向Vue3的Material风格移动端组件库现已发布！", "desc": "介绍 Varlet是一个基于Vue3开发的Material风格移动端组件库，全面拥抱Vue3生态，追求轻量的组件体积，简单的使用方式，最小的思维负担。由社区的小伙伴开发和维护，经过半年的coding和"}, {"id": "6844903831004807181", "title": "auto-vue-file:一个自动创建vue组件的包", "desc": "然后改成你自己需要的样子。"}, {"id": "6844903575584243720", "title": "如何写一个可爱的脚手架 (一)", "desc": "体验过上述工具的同学，有没有发现他们都有一个共同点——提供了一个可供快速开发的样板文件（boilerplate）。本文就将从样板文件入来进行阐述。通过本文，你将学到： public/manifest.json: 这是PWA 的一部分，用来描述应用相关的信息。以前开发cordov…"}, {"id": "6937302853807669278", "title": "重学Vue【组件注册原理分析】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 在vue中提供了2种组件注册的方式：全局注册 和 局部注册，下面来把它们分析一下。 可以看出来通过遍历 …"}, {"id": "6965766748163440654", "title": "vue-router", "desc": "1、前端路由 router 原理及实现； 2、vue-router 的具体实现； 3、vue-router中的一些问题；"}, {"id": "6844904121137381389", "title": "Vue 组件通信的几种方式汇总", "desc": "Vue 组件通信的几种方式汇总，Vue 组件间通信主要有 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信。"}, {"id": "6878170287997714445", "title": "Vue开发技巧合集（一）", "desc": "合理地使用计算属性可以让代码更加优雅、严谨且易于维护。那么，何时应该使用计算属性呢？使用计算属性时，你应当遵循这个准则： 如果属性依赖了props data中定义的属性，那么它应当是个计算属性。 以上例子中，isEmpty属性依赖了list属性，因此它必须是一个计算属性，当li…"}, {"id": "6844903889607606280", "title": "使用 vue-asyn-manager 管理 Vue 应用中的异步调用", "desc": "不知道大家对 React Suspense 是否有过关注，也许 Suspense 让人比较激动的是在服务端的流式渲染，然而从目前来看，React Suspense 的功能其实就是个 Loadable。当然啦这是我个人的看法，不过这不是今天的重点，今天的重点是介绍如何在 Vue …"}, {"id": "6884774340668162056", "title": "【真香系列】Vue-Next 源码第四章", "desc": "在第一篇文章中使用了下面这个 demo，其中用 setTimeout 模拟了一个更新，我们知道 Vue3 中使用 Proxy 代替了 Object.defineProperty 做响应拦截，在 Proxy setter 中会有一个 trigger 的触发，这个就是更新的入口。 …"}, {"id": "6932015302569885704", "title": "Vue 服务端渲染原理解析与入门实战", "desc": "Nuxt.js 是一个基于 Vue.js 的通用应用框架。Nuxt.js 预设了利用 Vue.js 开发服务端渲染的应用所需要的各种配置，为基于 Vue.js 的应用提供生成对应的静态站点的功能。打开 Nuxt.js官网：https://www.nuxtjs.cn/ ，学习指南…"}, {"id": "6914312340779302920", "title": "vue2核心原理(简易) - 生命周期初次实现 + Vue.mixin笔记", "desc": "前言本章项目地址拿beforeCreate举例,在new实例将所有beforeCreate(可能多个，如Vue.mixin)放到一个数组当中在其数据初始化前循环调用生命周期是在某个时刻就将其调用正题示"}, {"id": "6844904138099130381", "title": "Vue 兼容IE9的后台下载excel文件", "desc": "前端代码：html部分：新建一个a标签，后面要通过他来下载js部分：点击导出按钮时给a标签的href属性赋值，并触发a标签点击事件（这里注意:recmdName这个参数传了中文时页面会报400错误）拼"}, {"id": "6920888791284580365", "title": "简单实现vue3相关功能，带你探索它的奥秘（基本按照源码名称和流程）", "desc": "这个函数在vue3中叫自定义渲染器，可以通过这个函数自定义自己的渲染逻辑，比如小程序，app。 当副作用依赖的响应式数据变化的时候，触发set，从而触发trigger，trigger搜寻被这个响应式数据以来的所有副作用并执行它们。"}, {"id": "6844904200829140999", "title": "[译] 监听第三方 Vue 组件的生命周期钩子", "desc": "在某些情况下，开发者需要在父组件中了解一个子组件何时被创建、挂载或更新。 如果只是单纯的这样 emit 并监听，让我来告诉你吧：大可不必。 可以取而代之的办法是，只需要加上前缀 @hook: 来监听相应的生命周期钩子函数就可以了。 这个解决方法也适用于第三方组件。"}, {"id": "6844904185532678151", "title": "VUE-SSR框架搭建步骤及与SPA应用结合，实现一套代码两种渲染方式", "desc": "Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的HTML字符串，将它们直接发送到浏览器，最后将这些静态标记\"激活\"为客户端上完全可交互的应用程序。 服务器渲染的 V…"}, {"id": "6907157300805369870", "title": "④ Vue基础语法-双向绑定🤞", "desc": "当我们使用v-model绑定select的时候，如果select设置为多选的（multiple），那么我们的绑定值（selectedMessage），为数组类型。 如果select为单选的，那么我们的绑定值（selectedMessage）为字符串类型。 将用户输入的值转为数值…"}, {"id": "6981732995686203422", "title": "Vue3之条件渲染", "desc": "v-if v-if指令用于条件性地渲染一块内容，当指令中的表达式返回truthy值得时候会被渲染。 在<template>元素上使用v-if条件渲染分组 <template>元素不会被渲染，可以用在需"}, {"id": "6844904047367946248", "title": "带你了解 vue-next（Vue 3.0）之 小试牛刀", "desc": "看完上一章 初入茅庐之后，相信大家已经对vue-next（Vue 3.0）有所了解了。本章带你掌握 vue-next 函数式的API，了解这些的话，无论是对于源码的阅读，还是当正式版发布时开始学习，应该都会有起到一定的辅助作用。 直接拷贝下面代码，去运行看效果吧。推荐使用高版本…"}, {"id": "6913801275037941767", "title": "vue如何使用Echarts图表", "desc": "在vue-cli项目中添加webpack配置，本文引入的最新版本。在 3.1.1 版本之前 ECharts 在 npm 上的 package 是非官方维护的，从 3.1.1 开始由官方 EFE 维护 npm 上 ECharts 和 zrender 的 package。 使用这种…"}, {"id": "6976442421202649102", "title": "「免费开源」基于Vue和Quasar的前端SPA项目crudapi后台管理系统实战之文件上传（十）", "desc": "基于Vue和Quasar的前端SPA项目实战之文件上传（十） 回顾 通过之前一篇文章 基于Vue和Quasar的前端SPA项目实战之数据导入（九）的介绍，实现了业务数据批量导入功能，本文主要介绍文件上"}, {"id": "6912031278850113544", "title": "Vue3 源码解析 06下篇--响应式 collectionHandler", "desc": "具体原因我们可以参考一下Proxy 的局限性,这跟内置对象(例如 Map、Set、Date、Promise)的内部机制有关，他们的内部所有的数据存储在一个“internal slots”中。当我们访问 Set.prototype.add 其实就是通过内部的 this 来访问该方…"}, {"id": "6844903792270376967", "title": "从一个埋点日志上报脚本说起", "desc": "设计和封装一个前端埋点上报脚本， 并逐步思考优化这个过程。 我们先用最直接的方式来实现这个埋点上报脚本。 这样子就能通过调用analytics()，往我们的统计服务端提交一条消息，并指明一个行为类型。 head请求方式和参数传递方式与get请求一致，也会受限于浏览器，但因为其不…"}, {"id": "6844904080549085198", "title": "vue-组件化-插槽(slot)", "desc": "... 所谓匿名插槽，就是这个插槽里，没有声明任何名称，使用者放进来的东西，都扔进这个插槽中。 理解：所谓具名插槽，就是这个插槽里，这个插槽被命了名，使用者放进来的东西，声明了插槽的名称，会被分发进这个具名插槽中。 理解：一种能够将子组件可用的内容暴露给父组件的插槽。"}, {"id": "6966542052653793316", "title": "Vue项目异常上报实践", "desc": "大多数web的异常报错，都可以在浏览器通过控制台查看。但是如果混合开发，h5页面在原生中，就不好确认是否报异常了。 这时，异常的收集和上报就至关重要了。 同步异常收集 Vue的异常信息都是通过Vue."}, {"id": "6844903593783328782", "title": "VUE从零开始系列（初体验），呆萌小白上手VUE", "desc": "前一章我们介绍了脚手架的搭建，本章开始正式开发，废话不多说，我们直接开发一个后台管理系统，ui框架用神器element ui，api数据我们自己模拟，用mock.js。 刚搭起的框架有一堆乱七八糟的文件和文件夹，我不认识它们，它们也不认识我，憋着急，让它们自我介绍一下。 bui…"}, {"id": "6844903609558122510", "title": "Vue中computed的本质—lazy Watch", "desc": "两个月前我曾在掘金翻译了一篇关于Vue中简单介绍computed是如何工作的文章，翻译的很一般所以我就不贴地址了。有位我非常敬佩的前辈对文章做了评价，内容就是本文的标题“感觉原文并没有讲清楚 computed 实现的本质- lazy watcher”。上周末正好研究一下Vue的…"}, {"id": "6926037779616890887", "title": "vue完整版和runtime版本", "desc": "完整版: 同时包含编译器和运行时的版本。 使用vue实例有3种方法。 该方法就是文档说的完整版vue，通过bootCDN引用vue.js或者vue.min.js即可做到。 由于我们创建的vue项目默认使用runtime版，没有编译器，直接把数据写在html里，并不会把数据渲染出…"}, {"id": "6966055526257917965", "title": "Vue(2) render函数", "desc": "先看一点点代码 h 是createElement的简写 主要说的是h（createElement）函数，有三个参数： 第一个参数,第三个参数，如果是字符串该怎么写： 第一个参数是对象时： 第一个参数是"}, {"id": "6977388091258437640", "title": "Vue里面的事件总线", "desc": "EventBus的简介 EventBus 又称为事件总线。在Vue中可以使用 EventBus 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可"}, {"id": "6907439103223005197", "title": "前端高手系列-echarts桑基图运用", "desc": "可用于数据从一系列节点到另一系列节点流入流出的可视化。例如： 图书章节，资金流向，渠道分析，用户行为分析。 做一个app用户行为分析,点击某个节点或支流流向，能后点亮整个链路。 实现能点击某个节点或支流流向，能后点亮整个链路。"}, {"id": "6977375354499547150", "title": "Vue3.0 重学", "desc": "这是我参与更文挑战的第24天，活动详情查看: 更文挑战 1，环境搭建 ​ 1, CDN引入最新的vue3 ​ 2, 升级vue-cli 升级到v4.5版本以上 -注意事项：最好提前卸载掉之前的版本,不"}, {"id": "6899272633792086029", "title": "vue2.x  SSR 服务端渲染从零剖析构建，优缺点解读", "desc": "数据量太大，加上动画的渲染导致完全呈现能交互的页面等待的时间有点... 原因： 客户端渲染如果你的应用程序初始展示 loading 菊花图，然后通过 Ajax 获取内容，抓取工具并不会等待异步完成后再行抓取页面内容。 原因： 当一个页面在3s内还未看到感兴趣的内容，大多数人都是…"}, {"id": "6844903825245995015", "title": "开发Vue组件系列之模态框", "desc": "感谢那您的观看,以上就是我为大家带来的模态框组件,本文同步更新于我的github点击前往。如果对您有帮助,请为我点个小星星"}, {"id": "6844903840488095758", "title": "基于 Github API 的图床 Chrome 插件开发全纪录", "desc": "最近基于 Github API 开发了一款图床 Chrome 插件 Picee，现在已经开源并上架 Chrome 应用商店。当中的过程涉及到一些有趣的知识点，故将其记录下来。 平时有写点东西的习惯，但是奈何一直找不到合适的图床。有人推荐以微博或者七牛来做图床，但是总给我一种”受…"}, {"id": "6977314612647559182", "title": "Vue源码分析之vm对象", "desc": "vue源码中的vm对象就是Vue实例的一个引用 整理常用的vm对象中的属性 了解vm对象中都有什么。。"}, {"id": "6844903783424589838", "title": " 深入了解 Vue 响应式原理(数据拦截)", "desc": "在上一章节我们已经粗略的分析了整个的Vue 的源码(还在草稿箱，需要梳理清楚才放出来)，但是还有很多东西没有深入的去进行分析，我会通过如下几个重要点，进行进一步深入分析。 这一章节我们针对1. 深入了解 Vue 响应式原理(数据拦截) 来进行分析。 我们在上一章节中已经分析了，…"}, {"id": "6844903712012386317", "title": "Tinymce富文本编辑器 在 vue 项目中的封装与使用 解决上传图片与文件", "desc": "在我们前端开发中有时候需要对文章或者商品详情之类的进行编辑，需要图文并茂，文字排版.......普通的form表单已经不能担此重任。 本文呢？讲的如何在vue项目中如何封装富文本编辑器 Tinymce 成组件 如何上传图片 文件 公司采用的是阿里云oss上传 所以以这个为例 简…"}, {"id": "6911692308563886087", "title": "vue3源码分析二 生成ast（编译总览）", "desc": "这个函数就会编译p标签。那问题来了如果是这样呢 因为子节点会有多种类型，有普通的元素标签类型、文本类型、注释类型等，所以第二个参数mode就是区分这些类型的。"}, {"id": "6934706558655791118", "title": "vue3.0系列—渲染流程", "desc": "渲染器可以说是vue最核心的部分，也是非常复杂的一部分，包括element的渲染、component的渲染、文本的渲染等等，同时vue3也引用了teleport和suspense。本文主要介绍了以下代码最终是如何渲染到浏览器中的。 在介绍渲染逻辑之前，先说明一点，vue3.0已…"}, {"id": "6935803726397440007", "title": "重学Vue【Vue的patch】", "desc": "重学Vue源码，根据黄轶大佬的vue技术揭秘，逐个过一遍，巩固一下vue源码知识点，毕竟嚼碎了才是自己的，所有文章都同步在 公众号(道道里的前端栈) 和 github 上。 前面提到 createElement 创建了组件VNode，接着调用 vm._update ，执行 vm…"}, {"id": "6844903496513224712", "title": "使用 Vue & SVG 快速绘制曲线图（带动画）", "desc": "当接到类似以上需求时，你的第一想法是不是跟我一样，使用 Canvas 来绘制，啥都不说就开始撸代码。如果你是用 Vue 之类的 MVVM 框架，那意味着你得提供一个结点供 Canvas 着陆，同时让 Canvas 能够响应数据变动。"}, {"id": "6844903731482329096", "title": "Omi 入坑指南 第四场 Router", "desc": "我们只需要在我们的组件中加入入口文件omi-router可能能拥有一个全局的router变量。我测试后看看是不是。 看来install并不是我想象中那样是create的生命周期,所以我们的代码要修改一下。 还有我们这里app-intro是我们web components里面定义…"}, {"id": "6844903686821380103", "title": "Reason Powerplug", "desc": "Reason PowerPlug is a set of reuseable components and functors for reason react. This project is inspired by react-powerplug."}, {"id": "6844903891230785550", "title": "Vue响应式原理简易Mvvm三步走第二步 (模板解析）", "desc": "数据代理其实就相当于将 vm._data 中的属性做了一层映射, 代理到 vm 上。"}, {"id": "6844903518550278158", "title": "vue-cli打包后的思索--代码优化", "desc": "第一次打包，发现打包后的文件怎么这么大，.map文件又是什么鬼？ 经过一顿搜索，发现js的map文件.原来map文件只是帮助我们调试用的，毕竟打包后的代码都是压缩的，调试起来很不方便。测试没问题，正式上线时，我们完全可以去掉这个文件。 怎么去掉这个文件呢？一个一…"}, {"id": "6914863046661767181", "title": "Vue 加油包 1", "desc": "1. watch，computed 和 methods 的区别 一个对象，key 是需要 watch 的表达式，value 是对应的回调函数，也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个 property …"}, {"id": "6844903605456076814", "title": "vuex-class.js 0.1.0版本支持在组件中连接class了", "desc": "使用ES6 class来编写vuex模块，使得代码更易于维护和拓展"}, {"id": "6914197686011265031", "title": "Vue CLI 学习笔记 2", "desc": "本文是对VueCLI官方文档复习的摘抄笔记（非原创，侵删）前文指路：VueCLI学习笔记1基础插件和Preset插件安装和管理插件命令：vueadd插件名；⚠️注意：vueadd的设计意图是为了安装和"}, {"id": "6844904130557935623", "title": "记一次 bug : 表单提交时携带不上文件数据", "desc": "这段时间我负责的基于 coreui/vue 的后台管理项目遇到难题了。在开发商品上架功能时，表单提交时，上传的图片数据始终为空，参数携带不了。但在发送请求之前是可以正常打印文件数据的。 结果是不 OK。 结果依旧不行。 尝试操作 b-form-file 的 name 属性依旧不…"}, {"id": "6844903668018315272", "title": "通过断点跟踪探索Vue响应原理", "desc": "文章对于Vue原理的探索基于下面的测试工程，结合浏览器断点跟踪堆栈的方式阅读源码。"}, {"id": "6847902219283464206", "title": "Vue2.0使用总结-组件间通讯", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"}, {"id": "6844903826424610824", "title": "老菜鸟分析 Vue 的观察-订阅模式：数据变化之后是如何更新页面的呢？", "desc": "假设 Vue 已经完成了页面初始渲染处于状态 A，现在进行了某些操作，调用了 changeMessage 方法，执行了 this.message = 'New Hello Vue'; 语句，对 message 属性重新赋值了。那么接来，Vue 究竟会做些什么来让我们在页面上看到…"}, {"id": "6844903930208468999", "title": "v-selectmenu 更新至 2.0.1 - 简洁、易用、高定制化的菜单解决方案", "desc": "更新内容：使用render函数的方式完全重构插件重构样式设计，使得交互界面更加简洁、清晰新增disabled参数，设置菜单是否禁用新增width参数，自定义菜单宽度新增full-width参数，设置菜"}, {"id": "6894587077338677262", "title": "Vue中Watcher的简要说明(2)", "desc": "前一篇文章中，通过watch属性的工作来简要说明Watcher类的最最基本结构，以及最简单工作流程，除此之外，Vue.prototype.$watch的工作原理也是类似的。同时也看到了状态变动时，watch指定的函数被执行，照这个思路延伸下去，computed属性也可以用这种方…"}, {"id": "6844904181787000845", "title": "小白分享：我的一次Vue学习非寻常之路（章二）", "desc": "在实现相关功能中，总会遇到相关交互上的体验设计，譬如联动效果、表单验证等等，借助于毕竟java出身，有一定编程语言基础，况且曾经也业余的开发过相关前端，毕竟那都是早期的jQuery，或者Bootstrap了，那就顺便介绍相关实践案例吧。 譬如实现，倘若选择【否】那就隐藏下面两个…"}, {"id": "6844903536149397518", "title": "Web开发这十年", "desc": "Web 开发这十年都发生了怎样的变化？"}, {"id": "6844903592395014158", "title": "mvvm-simple双向绑定简单实现", "desc": "mvvm模式解放DOM枷锁"}, {"id": "6844903605816786951", "title": "一个简单template engine", "desc": "A simple template engine,only 50 rows. 与大佬约饭有一种约会的感觉（平淡脸.jpg），偶然听从大佬写了一个简单的模板编译工具，就兴致勃勃的拿下来看看。 最近看vue源码一脑袋包，在一路堵堵的情况下，也算是看懂了watcher observe…"}, {"id": "6950943042664661023", "title": "vue-use详细使用", "desc": "添加插件全局功能添加全局方法或者 属性添加全局资源：指令/过滤器/过渡等通过全局混入来添加一些组件选项添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现一个库，提供自己的 A"}, {"id": "6943480719561719816", "title": "H5学习之路之Input类型新特性", "desc": "input的输入类型在H5之前已经有很多很广泛的使用了，但是H5其实加入了很多新的属性和验证，提供方便的同时给我们开发带来了更多的是安全性的提升，今天我们就简单的说一下H5中新的input属性和用法。ok，我在邮箱上面可能分别用了不同的浏览器来实现效果，目的有几个，第一测试一下兼..."}, {"id": "6844903735420796942", "title": "react-whc-notification", "desc": "支持React、Vue、React-Native、H5的消息通知组件库，支持一对多发送通知、主要解决跨组件以及页面之间的通信问题"}, {"id": "6934327537447370765", "title": "[半成品] Vue2 +TS项目Pre-Commit时 Lint  TS & Vue Template 错误", "desc": "最近项目遇到一个问题是：部门用的是 Vue2+TS 项目，Type类型自动同步于接口文档，那么容易出现部署到测试环境失败的问题。原因为后端改动接口 + 自身编码时忽略，导致 TS 的类型变更没及时修正。因此同事好奇为啥已有的 pre-lint 没有在 commit 阶段把这些问…"}, {"id": "6989218324215398413", "title": "手动实现一个vue响应式", "desc": "vue2的响应式原理可以用一句话来简述，那就是结合数据劫持和发布/订阅模式实现的。 那么是怎么对数据进行劫持的呢？发布/订阅模式又是什么？"}, {"id": "6844903942317408269", "title": "使用webpack配置一个小型vue-cli脚手架", "desc": "使用vue的朋友都是知道vue-cli，他是一个基于webpack的vue脚手架，通过vue-cli配置好一整套环境可以更快的开发，从而提高了工作效率。而我们可以学习它的一些配置可以熟悉webpack的构建流程，从而更好的开发，本文讲述了如何配置一个小型的vue-cli脚手架。…"}, {"id": "6844904201122742286", "title": "从零开始配置一个简单的vue路由权限控制", "desc": "1. APP.vue 配置 1. 确认默认路由 2. 导入路由中 3. 配置全局路由导航守卫"}, {"id": "6870699721002844167", "title": "尝鲜vue3.0-了解变化(2)", "desc": "经过上一篇文章尝鲜vue3.0-从ToDoList开始的介绍，大家可以初步了解一下vue3.0的简单写法。接下来，我描述一下尤大总结的总体变化，以及目前成熟的rfcs（语法变化）。 v-slot在单一指令语法中统一了卡槽和槽作用域。 v-slot简写为#，可以统一作用域槽和卡槽…"}, {"id": "6913852172266373134", "title": "基于elementui尝试封装一个表格组件", "desc": "在后台管理页面中，我们总是难免会和表单以及表格打交道，根据业务需求的不同，它们的复杂程度也不尽相同，上一篇封装了后台管理系统中的表单组件，本文打算继续分享一下封装一个简单的表格组件过程。 需要表格顶部具有页面唯一性按钮，如导出，批量操作按钮，如删除。 要带有分页功能。 需要具有…"}, {"id": "6844903872448692231", "title": "Vue单页SPA后台管理点击刷新当前页面", "desc": "前言​使用vue都知道SPA页面中跳转当前页面是不会有反应的,例如在login页面使用this.$router.push('login'),页面是不会出现任何现象的,push的路由也不会进入你是记录,"}, {"id": "6936585331646922782", "title": "vue3核心组件更新diff算法(简易)", "desc": "前言数据发生变化时组件更新新老虚拟节点进行比对最长递增子序列主要通过patch(老虚拟节点,新虚拟节点,父元素,参照物)方法比对有以下几种情况类型不同直接替换比对属性老的是数组新的是文本(孩子)都是文"}, {"id": "6900908504635965447", "title": " svg 在 vue 项目中的使用方法及步骤 ", "desc": "1. 安装 svg-sprite-loader 2. 配置 vue.config.js 3. components 中创建 SvgIcon 组件 4. 在 src 目录创建 icons 文件夹, svg 存放后缀为 .svg 的图片 , index.js 配置如下： 5. ma…"}, {"id": "6956467785585147912", "title": "Vue生命周期概览  ｜小册免费学", "desc": "在Vue 2.x 单一组件中，钩子的执行顺序是beforeCreate-> created -> mounted->... ->destroyed，但当父子组件嵌套时，父组件和子组件生命周期如何执行呢"}, {"id": "6844903679376490504", "title": "接口异常状态统一处理方案：优先业务端处理，再按需统一处理。", "desc": "最近工作贼忙，这篇文章按说应该两个月之前就产出，可是每天的精力基本都用在工作上，一写文章就犯迷糊，断断续续的每次要重新屡逻辑，以后再也不这样了。这篇文章是我司后台项目中遇到的一个基础需求，自己设计了一个实现方案，感觉还不错。 后端接口响应，根据与后端约定的状态码（非 http …"}, {"id": "6911970467674849293", "title": "el-table 实现sticky效果", "desc": "elmenet-ui的el-table组件在所展示数据行数过多且浏览当前页视窗外数据时，会无法直观获取每一列所代表的含义。这就需要固定列表头在视窗顶部已提供良好的你用体验。且需要table支持固定列和滚动 首先先整体说下三种开发思路的优劣。 首先如果使用隐藏表格的话是开发比较复…"}, {"id": "6844903571264110606", "title": "微信小程序开发库grace vs wepy", "desc": "grace和wepy都是辅助小程序开发的开源库，本文对两者做个对比。 自小程序发布后，现在最著名的小程序开发框架就是wepy, 它借助一系列工具，通过预编译的手段实现了和Vue接近的开发风格，可以认为wepy更就是小程序的 vue（但还有一些不同，如布局模板），首先，必须承认w…"}, {"id": "6946403441434427406", "title": "Vue中使用mixins｜小册免费学", "desc": "在业务组件中，可能存在大量相同的操作，例如获取数据,数据格式处理等等,重复写代码对于cv能手来说也比较烦，mixin可以帮助减少单个业务组件的代码。 在刚接手项目的时候看到部分文件的代码超过千行,顿感不适,细看代码存在大量重复的操作，甚至还存在一些没有用的代码，在git管理下应…"}, {"id": "6864665318003277838", "title": "[翻译]vue3指南-06Class and Style Bindings 类名和样式值绑定", "desc": "A common need for data binding is manipulating an element's class list and its inline styles. Since they are both attributes, we can use v-…"}, {"id": "6896783432932655112", "title": "$parent/$children的使用场景 -- vue组件通信系列", "desc": "vue 组件的数据通信方式很多，本篇着重讲$parent/$children，神助是$broadcast/$dispatch。 $parent/$children的常用场景：封装嵌套组件时，直接使用长辈或者子孙组件的方法，该方法并不改变数据，常常结合$broadcast/$di…"}, {"id": "6985733235921649700", "title": "Vue对数组对象特定字段的监听", "desc": "最近公司项目需要主表下添加若干个子表，而子表的某些字段之间有联动，且子表由和主表有联动。针对对象的深层次特定字段实现监听，不使用deep:true。"}, {"id": "6985560166447972389", "title": "Vue实现拖动鼠标改变DIV高度", "desc": "模拟微信PC客户端的聊天窗口-发送框，通过拖动发送框的上沿，可手动调节高度。借鉴思路来自 element-ui 的 table 组件，列可以通过拖动改变宽度。"}, {"id": "6844903662678966286", "title": "Element源码分析系列6-Checkbox(复选框)", "desc": "简介复选框的逻辑比单选框更为复杂，代码量也更多，这里只介绍其与单选框不同的逻辑，其余的分析参考单选框先上代码,官网代码点此是不是看的一脸懵逼，最好是打开官网，对照checkbox用法一项项来分析其原理"}, {"id": "6844903639568351239", "title": "Vue无限滑动周选择日期的组件", "desc": "写在最前面···先看效果思路根据用户传入日期（不传默认今天），获取上一周，当周，下一周对应的日期放数组dates里根据datas生成每一周对应的日期生成每一个滑动单元的style然后就是处理touch"}, {"id": "7002868153201983519", "title": "vue.js中，使用vue.config.js文件，配置跨域代理", "desc": "vue.js中，使用vue.config.js文件，配置跨域代理 配置内容：单个IP口时，跨域的目标接口"}, {"id": "6990998089783836708", "title": "基于vue2.x 聊天(IM)UI组件,开箱即用", "desc": "m-chat 介绍 基于vue2.x 聊天(IM)UI组件(3.x以后支持) 演示 Demo 安装 全局安装 局部安装 功能 文字展示（支持html标签渲染） 图片展示和预览 视频播放 语音播放 自定"}, {"id": "6998420361343680520", "title": "将vue+js项目改造成vue+typescript", "desc": "为什么要使用typescript 优点 程序更容易理解 javascript：函数输入输出的参数类型，外部条件等，需要手动调试 typescript：已解决此问题 效率更高 在不同代码块和定"}, {"id": "6844904186304266253", "title": "流程设计器", "desc": "Hello 大家好，我是易样(容易不一样，我们不一样，一天一个样)。 好久没更新文章了，没更新文章的这些时间我都在闭关修炼，努力提升自身技术，毕竟我2020年的flag是成为大牛。 今天给大家带来的这篇文章是整理我使用bpmn-js实现activiti流程设计器的经验之谈，bp…"}, {"id": "6976997792652722207", "title": "从Vue2.0到React17——React函数组件的生命周期", "desc": "React函数组件中无法使用React类组件的生命周期钩子函数，故要使用React Hook模拟React类组件的生命周期钩子函数。"}, {"id": "6844903972050829320", "title": "吃透 Vue 项目开发实践｜16个方面深入前端工程化开发技巧《中》", "desc": "据上节文章发布已经有了两个星期了。期间收到了 1000+ 个赞，30000+ 阅读量，这是我万万没想到的。自己的文章能有这么高的关注度，真的很令人满意！ 但是相反，写文章的压力更加大了。一篇文章总是反反复复的修改，总是担心自己的认知水平和技术水平不够，甚至导致有些地方会误导读者…"}, {"id": "6874748339246776327", "title": "Vue3.0 不畏惧祖传代码的 Composition API", "desc": "昨晚写这篇文章的时候，隔壁在聚餐，几位女生欢聚一堂，整个楼层充满了欢声笑语的味道，就好像早上刷牙刷一半就跑去吃了个鸡蛋。 隐隐约约传来了菜刀与菜板的碰撞声，这刀切的技术似乎略输我一筹。 可就算再怎么样，她们也是一群人吃饭啊。而我只能吃两桶泡面，且还能吃出优越感来~~ 可叹可叹，…"}, {"id": "7000645590660939806", "title": "深入 Vue3 源码，学习初始化流程", "desc": "搭建调试环境 为了弄清楚 Vue3 的初始化，建议先克隆 Vue3 到本地。 安装依赖 修改 package.json，将 dev 命令加上 --sourcemap 方便调试，并运行 npm run "}, {"id": "6942060751272017928", "title": "一文搞定Diff算法", "desc": "一、 首先比较一下新旧节点是不是同一个节点（可通过比较sel（选择器）和key（唯一标识）值是不是相同），不是同一个节点则进行暴力删除（注：先以旧节点为基准插入新节点，然后再删除旧节点）。 新节点有子节点，这个时候就要仔细考虑一下了:若老节点没有子元素，则直接清空老节点，将新节…"}, {"id": "6877137483067637773", "title": "是 jsv 而不是 jsx：这可能是你想要的魔改vue3代码编写方式 ", "desc": "vue官方推荐的是单文件 .vue 编写组件，简单易学但没有jsx灵活，很多知名的UI库最终选择了使用jsx，例如：ant-desing-vue, vant。但是在 vue 中使用 jsx 也存在一些问题。比如：大部分 vue 指令无法使用或者很难使用。在 vue3 中专门开了…"}, {"id": "6844903714164047879", "title": "看看这些被同事喷的JS代码风格你写过多少", "desc": "现在写代码比以前好多了，代码的格式都有eslint,prettier,babel(写新版语法)这些来保证，然而，技术手段再高端都不能解决代码可读性（代码能否被未来的自己和同事看懂）的问题，因为这个问题只有人自己才能解决。我们写代码要写到下图中左边这样基本上就功德圆满了。 你可以…"}, {"id": "6885364720056926221", "title": "Vue 3 的组合 API 如何请求数据？", "desc": "之前在学习 React Hooks 的过程中，看到一篇外网文章，通过 Hooks 来请求数据，并将这段逻辑抽象成一个新的 Hooks 给其他组件复用，我也在我的博客里翻译了一下：《在 React Hooks 中如何请求数据？》，感兴趣可以看看。虽然是去年的文章，在阅读之后一下子…"}, {"id": "6998145797267128350", "title": "Vue3从0到1组件开发-系统组件：Tooltip文字提示", "desc": "Tooltip是指什么呢？ 这里呢，Tooltip文字提示顾名思义，就是文字提示了... 废话吼。 说一千道一万，看个图片全明了。 先看一"}, {"id": "6844903875334537230", "title": "你要的Vue面试题都在这里。", "desc": "1. Vue.js介绍 15. vue 组件通信 25.v-for key的作用。 34.vue如何兼容ie的问题。 本文主要是一些基础知识。希望能帮助那些即将或正在找工作的同行们。加油~~~ 如果你觉得有用 请帮忙点点赞呦~~~"}, {"id": "6998396827766620190", "title": "Vue—关于computed（在计算属性中return函数的问题）", "desc": "项目中偶然遇到有人在computed中这样写代码： 这段代码看似没什么毛病，实际上它违背了computed的设计初衷，computed设计的原因是为了简化模板中又长又臭的计算逻辑，使模板代码看上去更加"}, {"id": "7002259583628476447", "title": "No.31 vue-element-admin 学习使用（二十六）集成vxe-table  树形表格", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 普通树形表格 树形表格是常见的需求，学习一下使用，基础的树形表格是这样的，指定数据中的children字段，该节点就可以展开了，但是这种情"}, {"id": "6999525002592649252", "title": "Vue模板编译的原理", "desc": "模板编译的原理 模板编译的原理核心主要分为三部分 1. 将html模板解析成AST对象 解析 通过循环遍历html模板字符串，依次去处理其中的各个标签丶以及去标签上的属性 处理开始标签、结束标签、文本"}, {"id": "6844903973036490765", "title": "高频组件你还在import吗？太low了", "desc": "对于高频组件你还在这样引入么使用require.context实现前端工程自动化快速应用到项目中require.context是什么？一个webpack的api,通过执行require.context"}, {"id": "6994968947124617224", "title": "小白也能弄明白vue项目的启动、打包等基本配置", "desc": "这是我参与 8 月更文挑战的第 2 天，活动详情查看： 8月更文挑战 现在的前端工程都走模块化的风格，不像之前前端给html页面给后台人员，后台人员双击就能在浏览器打开查看效果。 现在的后台人员面对前"}, {"id": "7001851383607459848", "title": "Vben Admin 深入理解之路由、菜单、权限的设计", "desc": "本部分主要分析路由、菜单、权限之间的关系，以下代码主要是流程的内容某些相关的数据处理函数和分支可自行阅读。 路由可以影响到菜单的生成，菜单根据权限模式做不同的处理、权限影响到路由的注册和登录的校验。"}, {"id": "6844903647675940871", "title": "简单的Web应用，从数据的获取到页面的展示", "desc": "大神请绕道，如有说的不对的地方望指正。 应届毕业生在求职中，很多都是因为经验不足而不被录用（很牛的程序猿另说），在面试的时候不仅要对专业的技能熟悉掌握，最好是有自己的一些小作品小项目等等，才能博取面试官的青睐，于是很多毕业生开始自己的面试项目制作，记得回看刚出来求职的面试项目，…"}, {"id": "6844903624997339144", "title": "Vue之网易云音乐PC版轮播图的实现", "desc": "这个子组件主要分为两块。 上面是页面的DOM结构和表现的实现代码，接下来我们要讲的是连招的实现，小心啦，我要摸眼W + R3了。"}, {"id": "6951636577575665695", "title": "数组过滤 filter || 方法和事件|| 修饰符", "desc": "数组过滤 filter-- 返回字符串中含有 aa 的字符串案例方法和事件v-on 绑定的事件类似于原生的onclick等写法修饰符.stop ：阻止单击事件向上冒泡当子盒子被父盒子包裹住，点击子盒子"}, {"id": "6844903513474990088", "title": "Vue2 源码漫游（二）", "desc": "接下来就是mountComponent。这里面有一个关键点 vm._watcher = new Watcher(vm, updateComponent, noop)，这个其实就是上篇中说到的依赖收集的一个触发点。你可以想想，组件在这个时候其实数据已经完成了响应式转换，就坐等收集…"}, {"id": "6844903909320818701", "title": "【Vue原理】Compile - 源码版 之 Parse 主要流程", "desc": "今天，要记录的就是 parse 解析 template 成 ast 的大致流程，而怎么解析标签名，怎么解析标签属性会暂时忽略，而独立成文。当有解析标签名和解析属性的地方会直接出结果。比如当我说在 模板 \"<div></div>\" 匹配出头标签时，直接就得到 div ，而不会去考…"}, {"id": "6844903586506227726", "title": "新版vue-cli模板下本地开发环境使用node服务器跨域", "desc": "我们都知道浏览器有一个既核心也最基本的安全功能，即同源策略。同源分别是:协议，域名，端口。如果浏览器访问服务器不同源的话，就会访问不到数据。那开发中常常访问的服务器不同源，那么可以借助一个服务器当做中介来访问需要访问的服务器从而获得数据。因为同源策略是浏览器的安全机制，而服务器…"}, {"id": "6844904152099733512", "title": "Vue数据绑定原理之依赖收集触发", "desc": "在上一篇我们讲到了数据劫持，和数据观测。那么怎么将数据和相关的DOM关联起来呢？本篇我们将解开这个过程。 上一篇讲解中我们知道Watcher是实际执行数据变更之后操作的主要对象，我们先找到它的实例化路径，发现它是在mount的时候进行的操作。 我们先解释下参数：首先传入了组件实…"}, {"id": "6865470838494691336", "title": "VUE源码-Object的变化侦测", "desc": "1.前言在上一篇文章中，我们知道：数据驱动视图的关键点则在于我们如何知道数据发生了变化，只要知道数据在什么时候变了，那么问题就变得迎刃而解，我们只需在数据变化的时候去通知视图更新即可。要想知道数据什么"}, {"id": "6844904102938279944", "title": "唯心主义蠢货的[vue学习] Vue的nextTick", "desc": "MutationObserver是HTML5中的新API，是个用来监视DOM变动的接口。他能监听一个DOM对象上发生的子节点删除、属性修改、文本内容修改等等。 通过给MutationObserver的构造函数传入一个回调，能得到一个MutationObserver实例，这个回调…"}, {"id": "6907246138408042504", "title": "Vue 3.0 源码分析-数据侦测 与 开发实例", "desc": "作为前端三大主流框架之一的Vue，其作为一个构建数据驱动的渐进式框架，由于其易用，灵活且高效的特性，在国内外一直受到很多前端开发者追捧。 2020年前端大事件之一，Vue 3.0终于正式发布了。作为一个大的版本更新，Vue 3 与 Vue 2相比，实现原理，使用方式等均有着不小…"}, {"id": "6966103386412302350", "title": "【Vue】响应式原理", "desc": "基于`Object.defineProperty`这个`API`将`data`选项遍历出的属性全部转为`getter/setter`，在数据变动时发布消息给订阅者，触发相应的监听回调。"}, {"id": "6844903919114518536", "title": "Vue源码笔记，看懂核心原理", "desc": "该章节是从打包文件vue.runtime.common.dev.js中查看源码内容。 2. 通用函数 注意：创建实例的时候，调用this._init(options)才是真正的开始。。。 生命周期混入，主要是更新，销毁；create，mount是在init实例方法里触发。 Vu…"}, {"id": "6966543568907272228", "title": "vue 组件学习笔记", "desc": "引入vue时，调用renderMixin初始化渲染用的相关方法到vue的prototype上：$nextTick,_render方法。 通过new Vue()创建一个vue实例，合并选项，然后调用in"}, {"id": "6844903587970023431", "title": "移动端手势库AlloyFinger源码分析", "desc": "AlloyFinger 是由腾讯前端团队 AlloyTeam 出品的一个小巧轻量级的移动端手势库，整个手势库的代码不超过400行，却支持绝大多数的手势操作，能够满足日常的开发需求。AlloyFinger传送门： AlloyFinger。 手机移动端浏览器提供了4种触摸事件：to…"}, {"id": "6844904147104301070", "title": "Vue 的主要内容", "desc": "diff 算法中通过 tag 和 key 来判断是否是 sameNode ，减少渲染次数，提升渲染性能。key 必须使用的 不能是 index 和 random 。 单个组件的生命按正常的顺序执行。这里主要说一下父子组件的情况 异步渲染，将回调延迟到下次 DOM 更新循环之后执…"}, {"id": "6844903636468776968", "title": "Redux 概要教程", "desc": "Redux 是一个面向 JavaScript 应用的状态管理工具。它可以帮助我们写出更清晰，更容易测试的代码，并且可以使用在任何不同的环境下。Redux 是 Flux 的一种实现，它简化了 Flux 繁琐的 store 而采用单一数据源的方式，大大减小了状态管理的复杂度。相比 …"}, {"id": "6966527824412803086", "title": "在Vue 3中使用Typescript和Jsx", "desc": "本文将介绍如何在Vue 3中使用tsx 首先回答两个问题： Why Vue 3 在Vue 2中，组件相关的逻辑都被写在一个文件中，经常会出现一个组件几千行代码，非常难以维护；而且一个功能的相关代码通常"}, {"id": "6844903497817653262", "title": "你想要的——vue-i18n源码分析", "desc": "vue-i18n源码分析 前端工程师进阶干货"}, {"id": "6844904201043050504", "title": "「前端两三问」之JS如何去除数组中相同的数值", "desc": "1、图片之间有空隙2、阿里云部署个人静态页面无法访问3、如何去除数组中重复的值4、vue中点击按钮返回页面顶部前端微信群"}, {"id": "6925030198370893832", "title": "手撕Vue源码全过程(中)---数据驱动界面更新", "desc": "数据驱动界面更新效果"}, {"id": "6910974318927151112", "title": "针不戳，虚拟DOM", "desc": "简单点理解： 虚拟DOM就是js对象，该js对象模拟真实DOM的结构，有tag，props,chidren等属性分别保存了节点的名称，属性，子节点等。 构建CSSOM的时候，css样式嵌套越多，解析越慢。 JS 操作真实 DOM 的代价？ js操作真实DOM时，浏览器会从构建D…"}, {"id": "6844903712129974286", "title": "走进Vue-cli源码，自己动手搭建前端脚手架工具", "desc": "前段时间看了一些vue-cli的源码，收获颇深。本想找个时间更新一篇文章，但是最近事情比较多，没有时间去整理这些东西。趁这两天闲了下来，便整理了一下，然后跟大家分享一下。如果小伙伴们读完之后，跟我一样收获很多的话，还望各位小伙伴们多多点赞收藏支持一下哦。 构建基于Vue的Web…"}, {"id": "6979588085042380814", "title": "简单理解Vue的双向绑定实现", "desc": "Object.defineProperty() 定义： Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。 语法: Obj"}, {"id": "6979617212784967694", "title": "JS写斐波那契数列的六种方法(搬运)", "desc": "JS写斐波那契数列的六种方法 方法一：普通递归 方法二：把前两位数字做成参数避免重复计算 方法三：利用闭包特性把运算结果存储在数组里，避免重复计算"}, {"id": "6979595275555831822", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】031-Composition API：ref，reactive 响应式引用的用法和原理", "desc": "2、ref，reactive 响应式引用的用法和原理 动态改变setup中定义的属性 运行结果 使用ref是基本数据类型变成响应式 运行结果 实际上ref也能处理非基本类型的数据 运行结果 使用rea"}, {"id": "6979586077153558535", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】028-Vue中的高级语法：插件的定义和使用", "desc": "5、插件的定义和使用 基本写法 运行结果 使用插件做更多事情 运行结果插件的定义和使用 基本写法 运行结果 使用插件做更多事情 运行结果"}, {"id": "6903372514177908749", "title": "Vue 数据响应式", "desc": "在 Vue 中，当 data 中的数据发生改变时，视图会进行更新，这就是数据响应式的概念。Vue 2 则是通过 Object.defineProperty 来实现数据响应式的。 通过代码示例，myData 中的 n 数据类型发生改变，一开始是 {n: 0} ，传给 new Vu…"}, {"id": "6847902215395360775", "title": "结合源码聊一聊Vue的响应式原理", "desc": "Vue通过响应式设计实现了数据的双向绑定，能够做到页面数据的动态更新。我们都知道Vue实现响应式的核心是 Object.defineProperty()，但是具体是如何实现的？相信很多人都是不清楚的。这篇文章我们就结合Vue源码来了解一下响应式的实现方式。 Vue的响应式实现方…"}, {"id": "6979586845499752485", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】029-Vue中的高级语法：数据校验插件", "desc": "6、数据校验插件 先使用app.mixin实现校验 运行结果 通过插件实现 运行结果数据校验插件 先使用app.mixin实现校验 运行结果 通过插件实现 运行结果"}, {"id": "6969150934723067911", "title": "Vue源码构建过程", "desc": "Vue.js源码构建 Vue.js源码是基于Roolup够贱的，他的构建相关配置都在scripts目录下。 构建脚本 通常一个基于NPM托管的项目都会有一个package.json文件，他是对项目的描"}, {"id": "6844903869747576845", "title": "第2章 项目准备工作", "desc": "包括项目需求分析、脚手架初始化代码、项目目录介绍及图标字体、公共样式等资源的准备 。 使用beauty美化代码之后，一般地，代码会符合eslint的校验要求。但是，禁止函数圆括号之前有一个空格(space-before-function-paren)和文件末尾保留一行空行(eo…"}, {"id": "6844903939184263181", "title": "使用proxy实现一个简单完整的MVVM库", "desc": "MVVM 是当前时代前端日常业务开发中的必备模式（相关框架如react，vue，angular 等）， 使用 MVVM 可以将开发者的精力更专注于业务上的逻辑，而不需要关心如何操作 dom。虽然现在都 9012 年了，mvvm 相关原理的介绍已经烂大街了，但出于学习基础知识的目…"}, {"id": "6867198126113947662", "title": "Vuejs--父子组件之间的通信", "desc": "首先，我们知道，组件有自己的data。他只能访问自己data中的数据，而不能访问其他组件或实例中的数据，但是往往我们需要进行一些数据传递。从父组件传给子组件，比如说最外层的根组件进行了数据请求，但是里面的数据有一些是属于子组件展示的，我们就需要将父组件请求来的数据，传递给子组件…"}, {"id": "6844903606865379336", "title": "基于Vue.js 2.x的后台设计方案TUI正式发布", "desc": "希望有来些战友一起搞搞"}, {"id": "6844904144436723719", "title": "Vue 服务端渲染入门介绍", "desc": "搜索引擎爬虫可以抓取到静态 HTML 以及同步Javascript 生成的页面，但是搜索引擎\"可能不会等待\" （Google 和 Bing 已经支持单页应用和AJAX，据说连百度对中文单页应用的支持也不错）AJAX 等异步 Javascript 执行完成再抓取页面。 如果使用服…"}, {"id": "6991058591234916360", "title": "B2C-02-项目基础架构", "desc": "项目起步 创建项目 第一步：打开命令行窗口。 注意，所在目录将会是你创建项目的目录。 第二步：执行创建项目命令行 第三步：选择自定义创建第四步：选中vue-router,vuex,css Pre-pr"}, {"id": "6991054249169780743", "title": "3、v-bind以及class与style的绑定", "desc": "v-bind绑定活得属性 v-bind活属性示例1： v-bind活属性，示例2： 绑定class 给v-bind：class设置一个对象，可以动态的切换class，值对应true，false。 当c"}, {"id": "6950245453858340895", "title": "[vue源码笔记]vue3.0-Proxy变化监听", "desc": "前言：前文已基本介绍了在vue2.x版本中vue实现响应式或者数据驱动的原理，接下来就看一下在3.0版本带来了哪些变化"}, {"id": "6950575739775221796", "title": "vue-cli4.x + elementUI复选框checkbox的使用", "desc": "页面的大致效果就是这样的：1、点击最上面的框进行全选2、可以对每一行的数据进行单选3、将单选/全选的数据在请求后台接口的时候传给后台这里呢实际上没有用到checkbox，只是用到了element中ta"}, {"id": "6844904088497291277", "title": "跟着大佬技术胖学vue系列-Hello World与初学vue的v-if，v-show，v-for指令", "desc": "每天学一点，自己总结一下。记录一个萌新的爬坑之路，如果有错欢迎各位大佬指正O(∩_∩)O 之后创建vue实例。 v-if和v-show用法相同，绑定值判断是否显示区别在于v-if是判断是否加载模块，v-show是改变css（display：none）。 首先sort()函数，方…"}, {"id": "7002415847222280228", "title": "vue源码分析【5】-vue 生命周期", "desc": "vue源码分析【5】-vue 生命周期 1.beforeCreate new Vue前，首先会执行initMixin(Vue); ,但是此时只是挂载一个_init到Vue上，并没有执行_init。 接"}, {"id": "7002855786682515486", "title": "关于vue项目断点位置会发生错位的问题 ", "desc": "在webpack devtool的配置中可以看到下列描述: configureWebpack Type: Object | Function 如果这个值是一个对象，则会通过 webpack-merge"}, {"id": "6913812233382264846", "title": "项目开发中到底能不能使用vite👀", "desc": "很多人其实并没有拿vite用于正式的项目开发中,仅仅是用vite运行下vue3跑跑demo。因为现在基于webpack构建的脚手架足够稳定及好用。 下面就我自己在vite使用中遇见的槽点而言,和大家分享下现阶段vite使用上的一些不爽之处,如有错误,欢迎留言评论。 这种报错自然…"}, {"id": "6854573215969181703", "title": "10个简单的技巧让你的 vue.js 代码更优雅🍊", "desc": "构建插槽时，最好规划一下布局。这就是我的文章布局。 构建插槽与构建组件没有什么不同。本质上，插槽是具有超强功能的组件,让我们细分一下上面的布局，组件的外观如下： 这里的 attributeName 会被作为一个JavaScript表达式进行动态求值，求得的值将会作为最终的参数来…"}, {"id": "6996030172923166751", "title": "Vue3组件库打造一个 Table 组件实战分享", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 Table 组件大家肯定都不陌生，在进行数据展示和一部分页面布局的时候，Table 是不错的选择方案。这篇文章将使用 Vue3 打造一个简"}, {"id": "6994000718671642631", "title": "小白都能看懂，只需4步，解决vue keep-alive缓存组件问题", "desc": "1.首先在路由中配置需要缓存组件的标识:(keepAlive: true)，尝试过先设置为false,然后在路由守卫里通过判断条件设置为true,但是遇到第一次不生效，第二次才生效的问题 2.在App"}, {"id": "6996032490691362830", "title": "从Vue2.0到React17——React路由入门(二)", "desc": "React作为一个MVVM框架，路由功能是必不可少的，回顾我们在使用Vue Router的过程中，最常用的一些功能是路由页面的渲染，路由页面内容的添加，路由地址的配置，路由跳转，路由传参、嵌套路由等等"}, {"id": "7006963929196789797", "title": "Vue 完整版（vue.js）与运行时版（vue.runtime.js）", "desc": "一、区别 图片作者：饥人谷方应杭老师 二、使用方法 接下来使用 bootcdn 分别引入 完整版 和 运行时版，使用不同的方式，做一个“+1” demo。 1. 完整版 视图写在 HTML 中 cod"}, {"id": "6844903709055401991", "title": "Vue最全知识点，面试必备（基础到进阶，覆盖vue3.0，持续更新整理，欢迎补充讨论）", "desc": "Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何根据Data变化更新View。 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data …"}, {"id": "6854573214371151886", "title": "10个Vue开发技巧助力成为更好的工程师(二)", "desc": "更新 prop 在业务中是很常见的需求，但在子组件中不允许直接修改 prop，因为这种做法不符合单向数据流的原则，在开发模式下还会报出警告。因此大多数人会通过 $emit 触发自定义事件，在父组件中接收该事件的传值来更新 prop。 这种做法没有问题，我也常用这种手段来更新 p…"}, {"id": "6875236411349008398", "title": "Vue3.0全球发布会干货总结", "desc": "观看Vue3全球发布会的总结笔记，翻译水平有限大家海涵。 最后有学习资料汇总。 抽象渲染器与渲染目标无关 - （Dom、Canvas、终端显示）支持自定义渲染器。 可扩展是编译器 可以通过实现编译器插件来扩展编译器。 通过编译推断型虚拟Dom实现静态提升是Vue3.0的非常显著…"}, {"id": "6976458717579444237", "title": "🌱vue3只用ref, 12行代码实现\"useAxios\"", "desc": "ref 是 vue3 新增的 api, 他的意义就是单独定义一个可以\"被追踪\"的变量, vue2 中所有变量都需要在data中定义, vue3 中增加了一个setup字段, 在这里我们可以更灵"}, {"id": "6999513778144411661", "title": "「站在上帝的角度」谈谈Element组件结构-Input", "desc": "这次我们来谈谈Input组件，用户就是上帝，站在上帝的角度也就是站在使用者的角度去看待组件。 用过不少优秀的UI库，用的时候美滋滋，轮到自己搭组件库的时候往往会去"}, {"id": "6844903959455334414", "title": "视图更新科技发布 View UI 组件库（即 iView 4.0），超过50项更新", "desc": "金秋十月，iView 4.0 如约而至。但是标题信息量有点大，所以先来解读一下标题。 iView 作者 Aresn 于 2019 年创办了北京视图更新科技有限公司，开始自由、全职地维护 iView 及其相关的软件。View UI 即为原先的 iView，从 2019 年 10 …"}, {"id": "6997672012231655437", "title": "vue源码解析之调度原理(响应式原理)", "desc": "vue源码解析之调度原理(响应式原理) 可先看我的前篇会更好理解：vue源码解析之编译过程-含2种模式(及vue-loader作用) 测试文件：.html文件 CDN引入vue的未压缩版，在scrip"}, {"id": "6858558735695937544", "title": "Vue3文档【Vue2迁移Vue3】", "desc": "Vue2.x【注册或获取全局组件。注册还会自动使用给定的 id 设置组件的名称】 Vue3【注册或获取全局组件. 注册还会自动使用给定的 name组件 设置组件的名称】全局组件 指令绑定到的元素。这可以用来直接操作DOM。 oldValue：指令绑定的前一个值，仅在 befor…"}, {"id": "6845166890436788232", "title": "Vue、Nuxt服务端渲染、NodeJS全栈项目~面向小白的完美系统~", "desc": "第一次发帖子，有点小紧张，不知道待会给我点赞的会是哪位帅气的哥哥，还是漂亮的姐姐呢，嘿嘿。 这是一个入门全栈之路的小项目，从设计、前端、后端，一路狂飙的学习，不发水帖，出贴必属精品。 前后台均为绞尽脑汁的设计，整体风格为简约风，人的心灵到达一定阶段，心思愈渐愈偏向于简单，「大道…"}, {"id": "7002832430658764830", "title": "2x3 VueRouter - 进阶 - 组合式 API", "desc": "VueRouter 基础教程系列 🎉 相比于 OptionsAPI，CompositionAPI 给我们带来了更多的可能性。 以 CompositionAPI 方式来使用 VueRouter 需要注意"}, {"id": "6947835848813445128", "title": "我在react里写vue3 ,还写了自定义hooks和Hoc构建了响应式 ", "desc": "自从vue3.0正式发布之后，vue3.0核心响应式部分被单独抽离成@vue/reactivity包，也就是说，我们可以脱离vue框架之外，单独使用@vue/reactivity做一些其他的愉快的事😊，于是乎笔者突发奇想，为何不用@vue/reactivity在react中，…"}, {"id": "6972094589251354632", "title": "极致的开发体验 ! Vite + Vue 3 + tsx 完整教程", "desc": "Vite + Vue 3 + Typescript + tsx + less + router + vuex + elementplus 教程示范demo"}, {"id": "7007795725920632869", "title": "vue2响应式原理", "desc": "概述 响应式数据的目的，就是当数据、对象属性、数组某项发生改变时，能够自发的运行某些函数。在 vue 中最常见的就是数据发生改变时重新运行 render 函数刷新页面。 vue 中实现响应式主要依靠一"}, {"id": "7003183135579963406", "title": "一个小程序也能获得 50W 天使投资！图书社交小程序的核心步骤及源码分享", "desc": "前言 2017年8月，我曾开发过一个小程序，叫懂你觅书（谐音梗扣钱）。用户可以通过这个小程序管理自己家的书架/书房，然后通过图书的品位去匹配和你有相同喜好的人，并且在地图上显示出来。 当时开发完后在某"}, {"id": "7007087038809767950", "title": "vue3 teleport 分析", "desc": "如果在element-plus的表格使用multi-select会神奇发现下拉被隐藏起来了，可是使用自身的select时发现下拉能正常显示。"}, {"id": "7005764803843063845", "title": "关于vue生命周期", "desc": "Vue 生命周期 1、生命周期 Vue 实例从创建到销毁的过程，根据流程图大致可以分为四个阶段： 初始化阶段、模板编译阶段、挂载阶段、销毁阶段"}, {"id": "7007999951863021575", "title": "Vue3.2 双向绑定源码分析", "desc": "双向绑定精简版（版本：3.2）——track trigger effect Vue3 中双向绑定的核心函数为： track trigger effect 还有 targetMap，这是一个 WeakM"}, {"id": "7007292467569983495", "title": "element ui tree组件 的使用 ", "desc": "element ui tree组件 的使用,场景一,将组件tree选中的值拼接成字符串传给后台;场景二,将后台返回的值对tree复显值来选中或者重新编辑再次传给后台;"}, {"id": "7000625827708682270", "title": "用vue+node开发一个全栈博客", "desc": "前台预览地址：https://blog-web.jiangly.com 后后管理地址：https://blog-web.jiangly.com/home 作为一个前端工程师、能拥有一个自己的博客用来记"}, {"id": "7000192770753167396", "title": "vue3.2新增的defineCustomElement底层原理", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 Web Components Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且"}, {"id": "6992233443585163300", "title": "Vue DevUI 已经有10个组件成员啦～🥳😋", "desc": "3个月之前，我们在掘金发了一篇文章，正式发起了 Vue DevUI 项目。让我们一起建设 Vue DevUI 项目吧！🥳 很快就有不少热爱开源的小伙伴参与进来，于是我们迅速成立了Vue DevUI 核"}, {"id": "7000160263521435685", "title": "[技术前沿] 最新的 Vue3.2 都更新了些什么了解一下", "desc": "对于Vue3.2，尤大说：“真香，没有理由不用”。一起来看看都有哪些变化吧，及时了解前端前沿技术，奥力给"}, {"id": "6981601061840617503", "title": "关于微前端(阿里QianKun)的那点事——上线一个“微前端”逼走了2位90后", "desc": "作为一个团队领导者，需要经常帮助组员解决各类阻塞问题。 而我一直从事后端的开发，导致对前端的知识储备并没有那么丰富（实际很简陋）。 鉴于当下流行的开发模式几乎都是前后端分离的，为了组建..."}, {"id": "6997186627781001229", "title": "Vue第二波ref语法提案来袭 这次会进入到标准吗？", "desc": "前言 其实之前Vue3做过好多次语法糖的提案，最经典的莫过于<script setup>提案。但一开始这个提案夹杂着ref语法糖，所以很多批评的声音接踵而来：什么Vue又开始创造新概念啦、不忠于Jav"}, {"id": "7007394262778118152", "title": "vue3——自己封装骨架屏", "desc": "有很多时候，我们在浏览网页的时候，因为网络原因，没有办法第一时间看到网页里面的内容，那么骨架屏可以对网页有一个大致的展示。也可以很友好的让用户感知网页正在加载中，一起来看看如何实现骨架屏效果吧~"}, {"id": "7006215037987586079", "title": "Vue3源码系列之依赖收集的实现", "desc": "effect effect方法是响应式的核心，叫做副作用函数。初始会默认执行时会进行取值操作，只要取值就会调用get方法，我们就可以将对应的effect函数存放起来，等会我们去更新effect函数内部"}, {"id": "7006247594477223949", "title": "Vue深入学习系列:vue-router的核心原理学习剖析", "desc": "Vue Router 是 Vue.js (opens new window)官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。但是它的实现原理又是什么样的呢?"}, {"id": "6999932053466644517", "title": "我用index作为key也没啥问题啊", "desc": "所有熟悉 Vue 技术栈的小伙伴，都知道在列表渲染的场景下，不能使用 index 或 random 作为 key，我若偏要用呢🐶"}, {"id": "7000530780057239565", "title": "vue、react函数式编程", "desc": "函数式编程 JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可"}, {"id": "6994976281053888519", "title": "初学者也能看懂的 Vue3 源码中那些实用的基础工具函数", "desc": "1. 如何学习 JavaScript 基础知识 2. 如何学习调试 Vue 3 源码 3. 如何学习源码中优秀代码和思想，投入到自己的项目中 4. 学习 Vue 3 源码 shared 工具函数等"}, {"id": "7004644128659095589", "title": "Vue - The Good Parts: 文档", "desc": "Vue的文档，大家都觉得写得好，我们自己写文档似乎总是写不好，这里边的差异到底在哪里？我们来分析下Vue的文档，一起来分析和思考从中可以学到些什么"}, {"id": "7004724017504452638", "title": "聊聊使用 composition-api plugin 遇到的坑", "desc": "本文字数约 2000 字，阅读时间约 6 分钟 看懂本文需要一些 Vue2 响应式的源码知识 背景 部门要开发一款小程序，技术栈为 Vue"}, {"id": "6844904051243483150", "title": "从源码上来看，Vue对象的每个生命周期钩子前都干了什么？", "desc": "在mounted后，Vue实例对象才是完整的对象，这个转改能够维持到beforeDestroy。 对于一些全局同步的操作，比如解析路由来对应页面显示的内容等等这些操作，那么我们是想要它尽早地完成，以便全局使用。 在这里的话，我们可以对我提出的第一个问题进行解决。现在场景是这样的…"}, {"id": "6844903865100271630", "title": "深入浅出理解virtual Dom", "desc": "我们来模拟这样的一个场景需求。 都需要全部渲染。对于浏览器而言，渲染DOM是一个非常“昂贵“的过程。那么，有没有什么办法，修改部分数据的时候，只是渲染我修改的DOM呢？ 我们首先来使用一下snabbdom这个库，它会利用VDOM来实现局部渲染。一起来感受一下 以上代码，则实现了…"}, {"id": "6915685342800674829", "title": "【22】 如何理解 Vue 的数据响应式", "desc": "Vue 能实现对实例中声明过的数据进行监听。当数据发生变化时，视图会根据变化内容重新渲染页面，从而简化使用者的工作。 vm = new Vue({data: myData}) ，会让vm成为myData的代理，对myData的所有属性进行监控，防止myData发生变化，vm不知…"}, {"id": "6844903998365892621", "title": "从零构建Vue1.0之MVue", "desc": "文章语雀文档-从零构建vue使用效果"}, {"id": "6898314649784025095", "title": " 白话说前端", "desc": "如果你只会使用 Vue 或者 React，那么这篇文章适合你。 本文不深入聊原理，只对比基础功能的使用，先看下面这份数据，百度搜索指数，很明显 Vue 搜索指数明显高于 React 以及 Angular。 想想自己除了 Vue， 你还有什么？写此文的目的就是让大家领悟到使用框架…"}, {"id": "6844903842119696391", "title": "基于elementUI的一个使用v-model实现的经纬度输入的vue组件", "desc": "绑定一个 [12.34,-45.67] (东经西经，南纬北纬 正负表示) 形式的经纬度数组，能够按度分秒进行编辑，效果如下所示，点击东经，北纬可切换。"}, {"id": "6950661761565458469", "title": "Vue 响应式", "desc": "一、数据驱动数据响应式： 数据模型仅仅是 JavaScript 对象，当数据发生改变时，视图就会更新，避免了繁琐的 dom 操作，提高开发效率.双向绑定： 数据改变，视图改变；视图改变，数据改变.数据"}, {"id": "6950515689585279006", "title": "[vue源码笔记]vue2.x/3.0嵌套依赖收集以及订阅者异步更新策略", "desc": "本篇关于两个问题的讨论: 1. 订阅者嵌套情况下的依赖收集 2.一轮数据变更中多次数据变更导致多次订阅者更新"}, {"id": "6844904057266503687", "title": "菜鸟初探Vue源码（十）-- 计算属性和侦听属性", "desc": "在开发过程中，我们对这两个属性已经非常熟悉了：computed和watch。但是究其实现原理，或者说二者到底有何区别，以及什么时候使用计算属性，什么时候使用侦听属性，相信有不少朋友们仍存在疑惑。下面就一起来探讨一下： 关于计算属性的使用，见如下代码。 在初始化时（initSta…"}, {"id": "6908239708514418702", "title": "一篇学透 类型转化（上）", "desc": "原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。 null 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会…"}, {"id": "6935820509540007967", "title": "Vue的MVVM模式响应式原理——如何追踪变化之Dep、Watcher、Observer", "desc": "既然所有层次的数据都已经是响应式的了。 【题内话】回忆一下Vue中 watch的用法，它的原理正是本章要阐述的。 观察wacht的运用，思考一下它内部是如何实现的呢？这里先抛出问题引起思考，现在来一步一步解答。 在get和set中加入这部分的逻辑。并且发现收集依赖的前提是Dep…"}, {"id": "6909604540731883528", "title": "vue 精简教程（三)大 组件它真的来了    组件通信方式 浅谈    过滤和 自定义组件", "desc": "2. vue 动态组件 3. 我们来加一点 组件的动画 1."}, {"id": "6844904104649555976", "title": "记录下Object.defineProperty", "desc": "注意点：get set 不能与value,writable一起使用。互斥。对某个对象属性的修改或者增加，可以通过内部的`get`和`set`进行对数据的劫持。类似`axios`的拦截器。"}, {"id": "6943480239901114405", "title": "用织梦实现一个从零到可以正常访问的网站--第三章", "desc": "我们今天接着把怎么调用导航栏的链接写完，之前两章已经基本上将怎么购买域名，空间，怎么将织梦建起来，还有怎么将代码的样式调好，但是最后我们是发现，什么都好了，只有链接还是错的。{dede:global.<link rel=\"stylesheet\" type=\"text/css\" h..."}, {"id": "6844903969966260237", "title": "[译] VueJs 最佳实践✓", "desc": "开发者们，你们好。 经过网上的一段搜索以及查阅Vue.js的文档，我写下了本文中关于Vue的最佳实践以及风格指南，从而可以更正确，更优雅的使用Vue.js。 下面的要点指出了其中一些功能/优化相关，其他是VueJs命名约定和元素排序。 更详细的信息可以在链接中找到。 当我们在使…"}, {"id": "6896761566457233422", "title": "Vue2.x 原理剖析（二）之手写一个简版Vue", "desc": "1. Watcher 2. Dep 3. 关系 Watcher解析一个表达式并收集依赖，当数值变化时触发回调函数，常用于$watch API和指令中。 每个组件也会有对应的Watcher，数值变化会触发其update函数导致重新渲染 4. 改造 defineReactive 方…"}, {"id": "6844903644886728711", "title": "Vue业务实践指北", "desc": "写业务，对于一个前端而言，应该是再正常不过的事了，业务对标着需求，前端 er 们根据产品的需求以及设计师的设计稿开发出相应的 web 应用，无论是一个简单的页面或是一套复杂的系统，或多或少掺杂着业务逻辑。然而，我们有时候写的业务逻辑到底是为了去写业务逻辑而写的吗，作为一个常年与…"}, {"id": "6949561086743937031", "title": "Vue2组件通信总结", "desc": "父子组件之间的通信1. props最常见的通信方式之一，父组件传递给子组件2. event最常见的通信方式之一，子组件内发生某些事件，通过event通知父组件父组件 传递数据给子组件 触发子组件抛出的"}, {"id": "6844903535096627207", "title": "1kb 简单但强大的 Vue 翻译插件，支持服务端渲染", "desc": "Adeadlysimplei18ntranslatepluginforVue,readyforServerSideRendering.Democlientsiderendering:https://J"}, {"id": "6844903861677735943", "title": "为vue项目自动设置请求状态", "desc": "在进入一个页面的时候，一般在获取数据的同时，会先显示一个loading，等请求结束再隐藏loading渲染页面，只需要用一个属性去记录请求的状态，再根据这个状态去渲染页面就好了虽然是很简单的功能，可是"}, {"id": "6989129869938442271", "title": "vue put 提交 400 Bad Request(有时候可以提交成功)", "desc": "> vue put 提交 400 Bad Request(有时候可以提交成功)，证明是参数携带有问题 ![在这里插入图片描述](https://p3-juejin.byteimg.com/tos-cn"}, {"id": "6963927907404087310", "title": "vue 基础用法", "desc": "vue: 一套构建用户界面的渐进式框架； vue的一些基础内容，包括：语法、生命周期、axios、脚手架vue-cli..."}, {"id": "6844903543430709262", "title": "前后端分手大师——MVVM 模式", "desc": "之前对 MVVM 模式一直只是模模糊糊的认识，正所谓没有实践就没有发言权，通过这两年对 Vue 框架的深入学习和项目实践，终于有了拨开云雾见月明的感觉。MVVM 已经相当成熟了，主要运用但不仅仅在网络应用程序开发中。KnockoutJS 是最早实现 MVVM 模式的前端框架之一。"}, {"id": "6914947718154567688", "title": "tsx 整一个vue3.0组件", "desc": "需求分析：一个可以关闭的消息提示横幅组件解构动词：关闭=>Event.close消息：消息=>Props.msg横幅：类型=>Props.type定义组件定义props.type参数类型定义props"}, {"id": "6844903701619081229", "title": "3天学写mvvm框架[一]：数据监听", "desc": "首先我们将从数据监听开始讲起，对于这一部分的内容相信许多小伙伴都看过网上各种各样的源码解读了，不过当我自己尝试去实现的时候，还是发现自己动手对于巩固知识点非常重要。不过鉴于Vue3将使用Proxy来实现数据监听，所以我这里是通过Proxy来实现了。如果你还不了解js中的这部分内…"}, {"id": "6933214712863653896", "title": "Vue3实践SOLID五大设计原则", "desc": "本篇内容在国外的一篇博客的基础上修改的，基于Vue3 + JavaScript实现，使用腾讯前端AlloyTeam的代码规范对演示代码进行校验，Git提交规范使用开源工具husky来验证。本文涉及的代码均以上传到GitHub和Gitee中。文章中有不正确的地方，请大家不吝赐教，…"}, {"id": "6844903966472405000", "title": "vue小白入手（二），对你多多少少会有一点帮助的", "desc": "vue.js 的循环渲染是依赖于 v-for 指令，它能够根据 vue 的实例里面的信息，循环遍历所需数据，然后渲染出相应的内容。它可以遍历数组类型以及对象类型的数据，js 里面的数组本身实质上也是对象，这里遍历数组和对象的时候，方式相似但又稍有不同。 me 是绑定在实例 da…"}, {"id": "6969769336487542792", "title": "前端开发规范：VUE规范", "desc": "和渲染无关的数据不要放在data中 vue中data的数据默认便会进行双向数据绑定，若是将大量的和渲染无关的数据直接放置在data中，将会浪费双向数据绑定时所消耗的性能，将这些和渲染无关的数据进行抽离"}, {"id": "6844903726579220488", "title": "在 Vue-CLI 中引入 simple-mock 快速实现简易的 API Mock 接口数据模拟", "desc": "你可能只是需要一个简单省事的 API Mock 方案，那么不如试试 simple mock? 本文以 Vue-CLI 为例介绍引入 simple-mock 实现前端开发数据模拟的步骤。"}, {"id": "6953174814588682254", "title": "vue组件通信", "desc": "1.Vue 如何实现组件间通信？ 父子组件：使用 v-on 通过事件通信 爷孙组件：使用两次 v-on 通过爷爷爸爸通信，爸爸儿子通信实现爷孙通信 任意组件：使用 eventBus = new Vue"}, {"id": "6969586232787468296", "title": "vue 基础学习", "desc": "1.vscode 调试 Debugger for Chrome 2.vue 插件 可以使用 v开头的快捷命令。 3.脚手架 4.vue的思想 是一个数据驱动的应用 是MVVM的践行者 vm：连接数据与"}, {"id": "6897042512439934984", "title": "vue入门之路由守卫实现权限验证(5-1)", "desc": "一、前期准备1.创建脚本auth.js作用:用来管理登录用户的token。token简述：前后分离的开发模式下，客户端进行请求后台服务的一个令牌。为一串密文形式的字符串，一般在用户请求登录后，后台返回"}, {"id": "6969503329479032845", "title": "手撕Vue源码之——render函数与Virtual DOM", "desc": "render Vue的_render方法是实例的一个私有方法，他用来吧实例渲染成一个虚拟node。他的定义在src/core/instance/render.js文件中 这段代码最关键的是render"}, {"id": "6914529563099807752", "title": "Vue弧形导航栏(自动轮播)", "desc": "搞了个弧形轮播导航栏，轮播有动画过渡，可设置自动轮播，以及手动左右切换，只提供我的实现方法，没有集成为组件，大家可做参考根据自己的需求进行修改，优化封装成组件使用。视频演示，有点模糊，手机拍的。有什么"}, {"id": "6844903508932558855", "title": "基于Vue2的一个人员选择插件", "desc": "支持设置自定义选择器人员列表项customdatas，默认是空数组。 支持设置限制选择人员数量limit，超出的人员选择默认选取最后添加的几项，其余的会截取掉。 支持设置初始的已选择人员项initcurlists，默认是空数组，数组内容是由人员的id组成。 支持快速搜索人员（英…"}, {"id": "6844903960139005959", "title": "vue3的数据响应原理和实现", "desc": "话说vue3已经发布，就引起了大量前端人员的关注，木得办法，学不动也得硬着头皮学呀，本篇文章就简单介绍一下「vue3的数据响应原理」，以及简单实现其reactive、effect、computed函数，希望能对大家理解vue3响应式有一点点的帮助。话不多说，看下面例子的代码和运…"}, {"id": "6844903830899916807", "title": "Vue源码探究-虚拟DOM的渲染", "desc": "在虚拟节点的实现一篇中，除了知道了 VNode 类的实现之外，还简要地整理了一下DOM渲染的路径。在这一篇中，主要来分析一下两条路径的具体实现代码。 按照创建 Vue 实例后的一般执行流程，首先来看看实例初始化时对渲染模块的初始处理。这也是开始 mount 路径的前一步。初始包…"}, {"id": "6844904160958087181", "title": "Vue2源码-computed和watch的实现", "desc": "首先Vue实例上会存在一个_computedWatchers属性，然后以每个computed属性作为key值生成一个一个的watcher对象。 computed使用一般有两种形式，一个是返回直接返回一个计算函数，另一种是使用对象对象，定义一个get属性方法对应计算函数。总之拿到…"}, {"id": "6914459847161282567", "title": "Vue 3 组件开发：搭建基于 Vite 的在线表格编辑系统（组件集成）", "desc": "通过前文的学习，我们已经用 Vite 搭建出了Vue 3 的项目原型。今天，我们将基于这个原型，集成 SpreadJS 电子表格组件和在线编辑器组件，使其具备 Excel公式计算、在线导入导出 Excel 文档、数据透视表和可视化分析能力，实现在线表格编辑系统的雏形。 · 同时…"}, {"id": "6901159716371169293", "title": "最近开发遇到的问题 Vue+TypeScript", "desc": "1.箭头函数参数有无{}如果有多个参数，就需要用()括起来语句有无{}如果有多条语句，就需要使用{}和return只有一条语句的情况下，可以省略{}和return,但是写了{}就得加上return否则"}, {"id": "6970710597382586382", "title": "登录页面完成", "desc": "项目登录页面的页面创建、路由配置、布局结构、样式处理、数据绑定、表单验证功能、登录功能、等待效果功能"}, {"id": "6942665901367885838", "title": "Fes.js for Vue3，简洁却不简单", "desc": "Fes.js 是一套优秀的中后台前端解决方案。提供初始项目，开发调试，模拟接口，编译打包的命令行工具。内置布局，权限，数据字典，状态管理，存储，API 等多个模块。以约定，配置化，组件化的设计思想，让"}, {"id": "6916706147172876301", "title": "这款漂亮的Vue3.0后台管理系统模板，我粉了", "desc": "今天给小伙伴们推荐一款超牛X开源vue3中后台前端项目CigoAdminVue3。 cigoadmin-vue3.0 基于vue3.x+antdv 2.0构建的通用后台管理前端仓库。包括常用的内容管理、系统管理、图表及地图等功能。 antdv 阿里推出的vue3.0桌面端UI组…"}, {"id": "6894993303486332941", "title": "闪电五连鞭：Composition API原理深度剖析", "desc": "作为一枚有追求的武者，我还是想从原理上给大家弹一弹到底为什么会有这些限制和约束，正所谓知其然知其所以然。 结论：到这里我们知道了vue3对setup和其他选项的处理逻辑：如果设置了setup则先调用它，随后再处理别的options。 结论：所以setup中的this就是它执行时…"}, {"id": "6972551210993713188", "title": "Electron+Vue3 MAC 版日历开发记录(11)——Notion事件获取", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844904130289352712", "title": "好消息，vue 3 进入 beta 阶段！", "desc": "昨天，4 月 16 日，vue 3 正式进入 beta 阶段。同日，尤大参加了 State of Vue 的线上活动，以下是他上传到 google docs 上的 slides ： 能科学上网的可以直接打开以上链接查看。如果不方便的话，可以继续往下看： 目前，所有被列入计划的 …"}, {"id": "6844903784963899405", "title": "Vue 组件通信方式全面详解", "desc": "众所周知，Vue 主要思想之一就是组件式开发。因此，在实际的项目开发中，肯定会以组件的开发模式进行。形如页面和页面之间需要通信一样，Vue 组件和组件之间肯定也需要互通有无、共享状态。接下来，我们就悉数给大家展示所有 Vue 组件之间的通信方式。 用过 Vue 技术栈开发项目过…"}, {"id": "7001649914979549192", "title": "[Vue源码]--$nextTick与异步渲染（逐行注释）", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 案例分析 获取更新后的dom 使用vue经常遇到更改一个dom，然后读取这个dom的值的操作，但是往往结果不是我们所预期的，这与vue异步更"}, {"id": "6844903597264601102", "title": "移动端适配问题解决方案", "desc": "随着时间的发展，现在基本上人手一部手机的低头族。做为前端开发的程序猿，在开发移动端web应用的时候，对面一堆各色尺寸不一样的屏幕，就有点淡淡的忧伤。 很明显我们所要实现的就是在上述如此之多的屏幕,都能实现UI大大出的视觉图上的效果。而要实现这样的效果主要有两个难点 各屏幕的适配…"}, {"id": "6992422151370309646", "title": "Vue+ElementUI 搭建后台管理系统（实战系列二）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6962122946353561630", "title": "Vue|电商后台管理系统（项目概述篇）", "desc": "通过这个项目可以学到 能够基于 Vue 初始化项目 能够基于 Vue 技术栈进行项目开发 能够使用 Vue 的第三方组件进行项目开发 能够说出前后端分离的开发模式 二.项目概述"}, {"id": "6844904182357426190", "title": "新版vue-router的hooks用法", "desc": "虽然Vue 3还没有正式发布，但是热爱新技术的我早已按捺不住自己的内心，开始尝试在小项目中使用它了。 根据这篇《今日凌晨Vue3 beta版震撼发布，竟然公开支持脚手架项目！》我搭建了一个Vue 3的脚手架项目，用这种方式搭建的脚手架项目不仅仅只有vue是新版的，就连vue-r…"}, {"id": "7000722928304291848", "title": "ElementUI自定义校验规则", "desc": "使用Vue做后台管理系统绕不开的一个框架就是ElementUI，而做后台管理系统，经常会遇见的就是对表单进行规则校验，很多时候基础校验没有办法达到我们的需求，就需要我们自己自定义校验规则。"}, {"id": "7005150040784109598", "title": "Vue-Cli配置跨域代理", "desc": "-------------Vue-Cli配置跨域代理｜REQUEST中环境变量-----------"}, {"id": "6996247119354920991", "title": "11x6 精读Vue官方文档 - CookBook - 在 GoogleMaps 中实际使用作用域插槽", "desc": "精读 Vue 官方文档系列 🎉 Render Less 当你存在某个组件需要使用另一个组件内部的数据，但又不想把该组件作为另一个组件的子组件紧密的方式来耦合使用，那么 render less 将会是一"}, {"id": "7005858832102457380", "title": "vue项目 性能分析和CDN的应用", "desc": "vue项目 性能分析和CDN的应用 性能分析 我们可以使用vue-cli本身提供的性能分析工具，对我们开发的所有功能进行打包分析 它的应用非常简单 这个命令会从我们的**入口main.js**进行依赖"}, {"id": "7001505941761818661", "title": " vue3前端青铜到黄金王者 #14 vue-cli-service （下）serve使用", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 前篇我们解析了一下Vue3项目的构成，修改了一下组件的代码。 效果如下， 我们也在package.json看到vue-cli-servic"}, {"id": "6844903837505945607", "title": "尝试用 vue 实现灭霸打响指英雄消失的效果 demo", "desc": "灭霸打响指的消失效果。效果来源于 Google 搜索“灭霸” 或者 “thanos”。算是蹭热度的一个 Feature, 我通过 F12 试图去查看是如何实现的，也抠了一些音频、图片资源下来。后来在 github 上找到了一个现有的项目 Thanos_Dust, 所以参考了部分…"}, {"id": "6984054351379562509", "title": "Pinia（Vuex5.0 ?） 源码分析（一）", "desc": "前言 最近翻看vue的rfcs提案时，忽然看到vuex5.0的提案，看到社区也有很多的探索讲解，于是我想给大家来点干货，顺便记录下我学习pinia的过程。"}, {"id": "7001387907227484197", "title": "No.28 vue-element-admin 学习使用（二十三）drag-dialog 等拖拽组件", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 drag-dialog 拖拽dialog 这是一个可以拖拽的dialog，看起来挺好玩的，但是真的会有这么鬼畜的需求么，撕不过产品么。。。"}, {"id": "6986921261297303565", "title": "封装组件的技巧和坑", "desc": "对于Vue的双向绑定大家一定不陌生，入门基础的东西为啥要提？因为这是封装组件的基础！ 这里提出一个问题👇 不妨试试你的基础😏"}, {"id": "7007421920891109389", "title": "Vue3系列--基于第三方使用组合式API实现吸顶功能", "desc": "1）安装@vueuse/core 包，它封装了常见的一些交互逻辑 2）在吸顶导航中使用src/components/header-sticky.vue 除了使用第三方来实现吸顶功能之外，我们也可以通过"}, {"id": "6993676123385102373", "title": "[点线面Vue3]先跑起来再说！", "desc": "一直觉得框架只是工具，工作中用不上就没必要去学，要用的时候再去学习即可。 所以对国内非常火爆的Vue框架也只有一个初浅的印象： Vue是一个渐进式的JavaScript框架 Vue2通过defineP"}, {"id": "6844903673009553416", "title": "2018前端面试总结，看完弄懂，工资少说加3K | 掘金技术征文", "desc": "文章涉及的内容可能不全面，但量很多，需要慢慢看。来源于各个地方，我花了很长的时间整理，希望对大家有帮助。但是难免会有打字的错误或理解的错误，希望发现的可以邮箱告诉我236490794@qq.com，我会及时的进行修改，旨在能帮到大家，谢谢。 意义：根据内容的结构化（内容语义化）…"}, {"id": "6950084496515399717", "title": "Vue 源码解读（2）—— Vue 初始化过程", "desc": "详细讲解了 Vue 的初始化过程都做了哪些事 ..........................."}, {"id": "6973106775755063333", "title": "Vue3.x 推荐使用 mitt.js", "desc": "Vue2.x 使用 EventBus 进行组件通信，而 Vue3.x 推荐使用 mitt.js。 比起 Vue 实例上的 EventBus，mitt.js 好在哪里呢？"}, {"id": "7006890304217284638", "title": "vue3——vuex简单使用及持久化处理", "desc": "vue2和vue3中如何使用vuex呢？有什么不同之处呢？vue3中vuex如何做持久化处理呢？本篇文章将给你答疑解惑，一起来看一下吧~"}, {"id": "7006970881171947533", "title": "vue在线聊天室 附源码", "desc": "先附上截图 支持钉钉机器人群聊通知 技术栈： vue.js、Element UI、node.js、socket.io、mysql 源码地址 ："}, {"id": "7001776879535390727", "title": "哪些你不得不知道的vue开发技巧", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 代理和https里面的地址配置 在vue开发过程中，我们会遇到一个问题就是跨域，那么我们都知道跨域就是在配置文件中配置就好了，但有的新手就懵"}, {"id": "6981224810386833422", "title": "手写 Vue2 系列 之 初始渲染", "desc": "实现 Vue.js 的初始渲染过程，涉及内容包括： render helper、VNode、patch 初始渲染、指令、实例化子组件、插槽的处理"}, {"id": "7006648017499455519", "title": "讲讲Vue3的v-model语法糖~（内含Vue2写法的回顾）", "desc": "​ 写在前面         晚上好呀朋友们，最近做了一个Vue3的项目，可能最近会多多写有关于Vue3的知识点。         本文会写到Vue3中v-model的语法糖原理，以及回顾Vue2中V"}, {"id": "7002780603032535077", "title": "大概几集下饭剧时间就能懂的VUE3原理", "desc": "大家好，我是卡颂。 最近中午没胃口，找来VUE源码相关视频来当下饭剧。几顿饭下去，人胖了，VUE也整明白了。 这篇文章为你带来一份VUE3原理速成指南。 模块划分 如果我们用VUE的模版语法定义： 最"}, {"id": "6844903840626507784", "title": "手摸手，带你用vue撸后台 系列五(v4.0新版本)", "desc": "vue-element-admin 从 2017.04.17提交第一个 commit 以来，维护至今已经有两年多的时间了了，发布了四十多个版本，收获了三万多的 stars，远远的超出了自己的预期。距离上次手摸手系列教程也已经过去了很久，主要因为：作为一个个人开源项目，维持它已经…"}, {"id": "7001046527045025828", "title": " Vue 3 源码学习之路-01-源码结构&createApp", "desc": "1.准备工作-源码结构 1.1目录结构 在正式学习源码之前，首先在Vue官方 github 官网下载源码 ，下载之后解压目录大概是这样的。 compiler-core compiler-dom com"}, {"id": "6997975922880020488", "title": "再聊 Vue.js 3.2 关于 vnode 部分的优化", "desc": "在 Vue.js 3.2 优化升级中，还有一个运行时的优化： 即针对普通元素类型 vnode 的创建，提升了约 200% 的性能。来看看是怎么做的吧~"}, {"id": "7002131748301570079", "title": "Vue基础知识", "desc": "Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。"}, {"id": "7006533729845788708", "title": "Vue中插槽的使用", "desc": "一、具名插槽 在一个封装好的组件中展示一些不确定的内容，或者是在封装好的组件上增加一些内容，有两种方案 在组件内部把未来可能要使用到的内容全部开发好，基于用户调取组件的时候，是否传递了对应的属性来决定"}, {"id": "6942492146725290020", "title": "推荐 7 个 Vue2、Vue3 源码解密分析的重磅开源项目 👍", "desc": "1. 为什么要学习源码 ? 阅读优秀的代码的目的是让我们能够写出优秀的代码。 不给自己设限，不要让你周围人的技术上限成为你的上限。 其实就跟我们写作文一样，你看的高分作文越多，写出高分作文的概率就越大。 基于现在的程序员工作模式(模块化开发，只需要拿到需求做自己的部分)，别说看…"}, {"id": "7002466160025272357", "title": "Vue技术团队都在推广的代码规范", "desc": "规范与每个团队和个人都是息息相关的，因为其影响的不只是代码的维护和理解成本，严重的时候是会影响成员开发的心情 一个团队的编码规范、git 规范等，并没有绝对的最优解，心里要清楚明白 没有银弹，规范是为"}, {"id": "6906143905922678797", "title": "2020更新，Vue仿探探拖拽卡片的效果", "desc": "类似Tinder和探探的卡片效果的组件，社区中已经非常多了。我这一版除了可以实现和他们一样的效果外。还增加了飞卡的效果，就是类似我的女神邱淑贞这样。 其实我最早实现这个效果，是在2018年的时候，在weex上实现过一版。原帖请看这里：https://zhuanlan.zhihu…"}, {"id": "6999803911364149262", "title": "Vue3学习笔记-Ajax(axios)", "desc": "Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。 Github开源地址： https://github.com/axios/axios 安装方法 使用 "}, {"id": "6968500711390707749", "title": "v-model 双向数据绑定实现原理", "desc": "我们来手动实现一个 v-model 的功能。 准备工作 首先定义了一个component组件，里面有一个template。 然后再定义一个vue对象，里面引用了该组件。 好了，准备工作完成。 实现 效"}, {"id": "7000265605118951455", "title": "【 Vue 】源码解读复习（一）｜8月更文挑战", "desc": "① Vue 响应式流程 1.1 Vue初始化流程中的编译阶段进行render时 1.1.1 getter依赖收集流程（订阅发布模式） render 模板时 -> 得到视图中使用到的响应式数据 -> 触"}, {"id": "6984058038218915871", "title": "vue3 script-setup 语法糖 父子组件通信 使用defineEmit,defineProps,defineExpose (useContext 弃", "desc": "官方地址 https://github.com/vuejs/rfcs/blob/script-setup-2/active-rfcs/0000-script-setup.md#closed-by-de"}, {"id": "7000767955973865509", "title": "Syntax Error: SassError: expected selector报错的解决方案", "desc": "Syntax Error: SassError: expected selector报错的解决方案 今天在写Vue项目的时候，在写样式的时候突然遇到了这么一个报错： 因为写样式的时候，我在 < sty"}, {"id": "6976254495160434725", "title": "Vue3中的MVVM--ref、reactive函数使用、Vue3响应式原理", "desc": "Vue3中的MVVM--ref、reactive函数使用、Vue3响应式原理, 快来快速了解吧, get it!!!!"}, {"id": "6992958909455532068", "title": "Element 2 组件源码剖析之Backtop布局", "desc": "本文将深入分析组件 Backtop 源码，剖析其实现原理，耐心读完，相信会对您有所帮助(Element 2 组件源码剖析系列)。"}, {"id": "6844903721596387341", "title": "NPM生态报告，React和Vue的差距居然这么大？", "desc": "作者爬取了 https://www.npmjs.com 上所有公开仓库的数据。从这些数据中分析了过去一年下载量最大的npm包排名；常见前端框架热、构建工具下载热度对比；以及各种常见框架的生态现状。这些数据帮助我们了解Npm现有生态，也帮助我们进行前端技术选型。 NPM这个东西大…"}, {"id": "6844903649517240328", "title": "Vue 全站缓存之 keep-alive ： 动态移除缓存", "desc": "以一个记账项目举例，常见的场景有首页、记到账页面、选择合同、新建合同、选择客户、新建客户这些页面。 在这些页面中，很显然，用户的浏览行为应该是逐渐深入的，通俗得讲就是浏览页面在不断前进。 一. 用户前进时，总是进入新的页面。（比如在合同列表页反复加载多次列表之后，进入其中一个合…"}, {"id": "6844904001813610510", "title": "Vue3 深度解析", "desc": "距离尤雨溪首次公开 Vue3 (vue-next)源码有一个多月了。青笔观察到，刚发布国庆期间，出现不少解读 Vue3 源码的文章。当然不少有追风蹭热之嫌，文章草草讲讲响应式原理，或者只是做了一些上层的导读，告诉读者应该先看哪再看哪。不能说这些文章就没有一点价值，它确实能够让你…"}, {"id": "6995928892330475550", "title": "你了解keep-alive吗？", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 概念 keep-alive 是 Vue 内置的一个抽象组件，可以使被包含的组件保留状态，即keep-alive 可以实现组件的缓存，当组件切"}, {"id": "7004328249270468639", "title": "细读Vue2.6.14 Core 源码(5): initState", "desc": "细读Vue2.6.14 Core 源码(5): initState 处理 props, methods, data, computed, watch"}, {"id": "6995470002153324580", "title": "Vue响应式原理+Virtual DOM", "desc": "vue响应式原理分析，与virtual dom分析，Snabbdom的使用，Snabbdom的源码分析"}, {"id": "6844903592164327432", "title": "vue中需要注意的问题总结", "desc": "当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新…"}, {"id": "6983830610091442183", "title": "开发一款云暖手宝！让你在办公室不再受冻~", "desc": "为什么有这个项目 受 云空调 启发，我想做一个云暖手宝。重点是，我的暖手宝真的能暖手！ 大夏天的为什么要暖手？ 各位大佬的办公室空调温度开的一定很低，此时云空调显得不重要了。 为什么呢？ 因为我们特么"}, {"id": "6844904136299790349", "title": "尝鲜Vue3——vite源码分析", "desc": "前两天尤大在Vue 3.0 beta直播中提到了一个vite的工具，其描述是：针对Vue单页面组件的无打包开发服务器，可以直接在浏览器运行请求的vue文件，对其原理比较感兴趣，因此体验并写下了本文，主要包括vite实现原理分析和一些思考。 vite重度依赖module scip…"}, {"id": "6966055951342403614", "title": "没错，我又在vite中尝试了暗黑主题在线切换", "desc": "在上次在nextjs开发的博客中添加了暗黑主题后（一些网友想要的nextjs博客源码已经上传到github，blog-template-nextjs），这几个月在学习使用vue3及vite开发环境时."}, {"id": "6844904048043229192", "title": "从0实现一个single-spa的前端微服务（中）", "desc": "上一篇文章：从0实现一个前端微服务（上）中讲到，single-spa的原理就是，将子项目中的link/script标签和<div id=\"app\"></div>插入到主项目，而这个操作的核心就是动态加载js和css。 动态加载js我们使用的是system.js,借助这个插件，我…"}, {"id": "6949794411236556836", "title": "vue/h5,利用vue-qrcode-reader实现简单的实时扫一扫功能", "desc": "vue 利用 vue-qrcode-reader 插件实现 h5/wap 端简单的实时扫一扫功能,"}, {"id": "7002076068580425759", "title": "vue3 release 源码解读", "desc": "vue3 release 源码解读，对于vue3发布流程release.js的学习和记录解读。。。。"}, {"id": "7000727829960720421", "title": "前端小白不迷路 - 今天来讲一下vue中的插槽基础使用技巧", "desc": "在日常工作中，插槽真的是组件嵌套使用非常频繁的了，插槽的种类也很多，今天来讲一下vue中的插槽基础使用技巧。"}, {"id": "6990512775906721799", "title": "VUE3（三十）自定义抽屉组件Drawer", "desc": "我这里计划做一个即时聊天的小功能，计划是在一个抽屉组件中实现这个功能。 但是最后能不能成功我也不知道，毕竟我没做过，但是抽屉组件可以提前做一个嘛，这个不是很难。 代码： Drawer.vue： Dra"}, {"id": "6978378505402712071", "title": "Vue中 Vue.prototype 详解及使用", "desc": "这是我参与更文挑战的第 21 天，活动详情查看：更文挑战 我们可能会在很多组件里用到数据/实用工具，但是不想污染全局作用域。这种情况下，可以通过在原型上定义它们使其在每个 Vue 的实例中可用。 1."}, {"id": "6997362020458692622", "title": "在Vue项目中注册全局组件", "desc": "为什么要封装全局组件？ 如何封装全局组件呢？给大家整理了两种方式，快来看看你都学会了吗？思路、代码演示都有哟~"}, {"id": "6960915764765261837", "title": "使用Vue transition 实现点赞动画效果", "desc": "点赞时爱心缩小变大，变大时略微大一点再变正常。 同时数字滚动。+1 时向上滚动，-1 时向下滚动。。"}, {"id": "6880710529355251726", "title": "vue nextTick原理", "desc": "前面谈到了vue2.x的响应式原理，vue.js在视图更新采用的是异步更新策略，我们来看看它是怎么做到的。 这篇文章呢我们主要从源码角度来分析nextTick的原理实现。 watcher对象在进行更新执行update，内部主要执行了一个queueWatcher函数，将watch…"}, {"id": "6944985371943895077", "title": "Vue3+TS+Vite2+Element Plus 两天写个抽奖小系统（前端篇）", "desc": "功能不多，毕竟是随意练手的，目前给的是个本地版的，不需后台就能使用的。 看标题大家应该就清楚用的技术栈是什么了，没啥好说的，前端攻城狮就是得用新技术哈~然后我用的编辑器是VSCode。 如果不知道Vite是啥？那你先去官网https://cn.vitejs.dev/ 了解一下。…"}, {"id": "6989220687517286431", "title": "Vue2 自定义指令 input 数字格式化", "desc": "痛点：PC管理后台项目中经常会有input 输入框需要进行格式校验。 例如： 输入正整数 1-100， 输入 整数 输入大于0的数字 输入数字 .... 等各种需求。 这个时候按照正常的写法 对不同业"}, {"id": "6967919789876445198", "title": "Vue2.0源码阅读计划(三)——三类Watcher", "desc": "前言 很多人问我：为什么已经Vue3.0时代了，我却还在搞2.0？ 我给出的回答正如上面的警句一样走得慢点，走得远些。在我看来，2.0版本持续了很长一段时间，我用它做了很多东西出来，它陪了我很久很久，"}, {"id": "6982215312858939428", "title": "当Vue2遇到Composition API，它们之间到底能擦出怎样的火花？", "desc": "在Vue2项目上怎么使用CompositionAPI ？它们之间到底能擦出怎样的火花？Vue2如何平滑迁移到Vue3项目?"}, {"id": "6869537683736100871", "title": "【Vue 进阶】从 slot 到无渲染组件", "desc": "插槽（slot）通俗的理解就是“占坑”，在组件模板中占有位置，当使用该组件的时候，可以指定各个坑的内容。也就是我们常说的内容分发 在 Vue 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-sco…"}, {"id": "6844903601953849352", "title": "Vue源码简析(版本vue-2.4.4)", "desc": "1. 先进入 initMixin(Vue),在prototype上挂载 2. 进入 stateMixin(Vue),在prototype上挂载 3. 进入eventsMixin(Vue),在prototype上挂载 5. 最后进入renderMixin(Vue),在protot…"}, {"id": "6844903623999094791", "title": "淘宝、网易移动端 px 转换 rem 原理，Vue-cli 实现 px 转换 rem", "desc": "在过去的一段时间里面一直在使用Vue配合 lib-flexible和px2rem-loader配合做移动端的网页适配。秉着求知的思想，今天决定对他的原理进行分析。目前网上比较主流使用的就是淘宝方案和网易的解决方案，所以今天我就从这两方面入手深度了解这两个方案。本着互联网分享的精…"}, {"id": "6999540517897764900", "title": "vue.h，和react.createElement区别对比（传参，返回值）", "desc": "vue.h 返回值： React.createElement 返回值： 对比： 传参： 创建函数传参都是一样的，第一个参数为标签类型（包括script），第二个参数为标签的属性（style，class"}, {"id": "6997692879023898655", "title": "Vue3.0源码解析「reactive」篇 — 5.baseHandlers", "desc": "mutableHandlers mutableHandlers 是非集合对象的普通响应式代理处理函数，来看看代码： Set handler set 拦截器方法通过 createSetter 创建，这个"}, {"id": "6990183087015477284", "title": "Vue3之异步加载组件-defineAsyncComponent", "desc": "使用 Vue3 的 DefileAsyncComponent功能可让我们懒加载组件，说白了就是创建一个只有在需要时才会加载的异步组件。 这是改进初始页面加载的好方法，因为我们的应用程序将加载到较小的块"}, {"id": "6911883414110994439", "title": "傲慢才是阻碍技术提升的最大障碍", "desc": "这是刘慈欣老师在小说《三体》中对于地球人面对三体的狂妄态度的评价。 在 29 这一天文章一直前端板块首页的前五位置，到晚上基本锁定了第一的位置。 我并没有想到这篇文章能够这么火，虽然文章确实干货满满，并且非常客观有理有据地进行分析，但毕竟是推荐性质的，并不应该能够这么热。 这在…"}, {"id": "6914970829621035021", "title": "面试官问你Vue.extend时，怎么回答才能唬住他？（源码级详解）", "desc": "Vue.extend是 Vue 里的一个全局 API，它提供了一种灵活的挂载组件的方式，这个 API 在日常开发中很少使用，毕竟只在碰到某些特殊的需求时它才能派上用场，但是我们也要学习它，学习这个 API 可以让我们对 Vue 更加了解，更加熟悉 Vue 的组件初始化和挂载流程…"}, {"id": "7002057842471469093", "title": "vue和react的区别", "desc": "本段汇总摘抄基于文章1：https://juejin.cn/post/6844904158093377549 两者的底层编译原理都是VDOM+diff算法 Vue 使用的是可变数据，而React更强调"}, {"id": "6990650611838484488", "title": "VUE2学习", "desc": "vue使用初体验。MVVM模式 视图与模型的双向绑定，即数据的变动会导致页面的变化。视图与模型分开。"}, {"id": "7000718078333943844", "title": "Vue 非父子组件传值", "desc": "在Vue的组件通信过程中，除了之前讲到的 父子组件通信，本文讲解一下 Vue 项目中的 非父子组件之间的传值方式"}, {"id": "6994370886526566436", "title": "Vue 源码（一）如何创建VNode", "desc": "VNode是什么时候创建的，以及创建过程是怎样的；组件VNode和普通VNode在创建过程中和属性上有什么区别。"}, {"id": "6847902215458258958", "title": "Vue3.0 && Vue3.0初体验 一", "desc": "我:：3.0? 我现在学他干嘛,尤大大说最近还会更新2.7呢,现在学了到时候肯定忘啊。 同事： Vue3.0 和 React有点像了。 Vue3.0 可以完全支持Vue2.0!!!!, 升级以后不需要更改关于Vue的代码,但是你引用的插件就...,看运气了. 优点: 快就完了.…"}, {"id": "7006864463043395614", "title": "vue中插槽的具体使用说明", "desc": "插槽是什么？ 在vue组件开发中，一个组件通常在很多地方都会使用到，插槽可以在使用子组件时，传入自己的自定义的内容，从而渲染出不同的界面，当然props也可以实现相同的功能。 插槽基础 插槽允许我们这"}, {"id": "6930895635277316103", "title": "参与 Element3 开源项目，使用 TDD 的一些感受", "desc": "总的来说，这个 TDD （测试驱动开发）就跟很多体验性的能力一样，不亲身体验，不深入体验，不会有深刻的感受，正应了现在流行的“真香”定律，总是要用过了，体会过了，才会说好用的。 就好比，有人跟我们说，健身很快乐、很上瘾，收益非常大，而我们却没办法体会，也明知这个道理，也不能实践…"}, {"id": "6844903587043082247", "title": "面试官:既然React/Vue可以用Event Bus进行组件通信,你可以实现下吗?", "desc": "本文标题的题目是由其他问题延伸而来,面试中面试官的常用套路,揪住一个问题一直深挖,在产生这个问题之前一定是这个问题. 我们大体上都会有以上回答,接下来很可能会问到如何实现Event(Bus),因为这个东西太重要了,几乎所有的模块通信都是基于类似的模式,包括安卓开发中的Event…"}, {"id": "6949433236787298335", "title": "Vue开发移动端项目，这个工具对你一定有帮助", "desc": "基于Vue-devtools和vConsole，实现移动端和任意浏览器调试Vue.js工程，无需安装插件。从此放飞自我吧！"}, {"id": "6990923305523871751", "title": "Vue slot 详解", "desc": "Vue slot 详解 在Vue中，我们使用组件来组织页面和组织代码，类似于搭积木，每一个组件都是一个积木，使用一些相同或者不同组件就能搭建出我们想要的页面。slot（插槽）是组件功能的重要组成部分，"}, {"id": "6904217845019312135", "title": " 用 Vue 3.0 来写个小程序框架", "desc": "由于小程序的开发起来比较原始复杂且繁琐，跟我们主流的开发方式差距很大，所以为了提高我们开发小程序的效率，市面上出现过很多的小程序的框架：mpvue，Taro，uni-app 等等，这些框架或多或少地将我们带到现代化的开发方式中来，他们可以让你使用 React 或者 Vue 来开…"}, {"id": "6932659815424458760", "title": "0年前端的Vue响应式原理学习总结1：基本原理", "desc": "同学们，你是否想学习Vue的数据响应式原理而无从下手呢？是否有过被复杂的源码教程劝退的经历呢？如果你和我一样，做过一个项目之后想深入原理的话，恭喜你，你来对地方了。这个系列文章将从纯粹的Vue响应式原理出发，没有其他因素的干扰，带领大家实现一个自己的响应式系统。 使用Vue时，…"}, {"id": "6960245513509699614", "title": "🔥React 转 Vue2.0 转 Vue3.0 不完全指东🔥", "desc": "前几天看到了 Vue 转 React不完全指北这篇文章@俊劫，感觉挺有意思，突然想到自己以前写taro+react+ts,而现在刚好公司使用的是vue+ts,于是本文就开始了。 vue 与react "}, {"id": "6844904106612654088", "title": "高级前端开发者必会的34道Vue面试题解析（三）", "desc": "通过前面的文章，我们认识了页面的响应是由Vue实例里的data函数所返回的数据变化而驱动，也重点学习了页面的响应与数据变化之间是是如何来联系起来的，并且分别在Vue2.x与3.x中，从零到一实现了两个版本下的数据变化驱动页面响应原理。 接下来在本文里一起看看当数据变化时，从源码…"}, {"id": "6995928107895128077", "title": "Element 2 组件源码剖析之Result结果", "desc": "组件 `Result` 用于对用户的操作结果或者异常状态做反馈。 本文将深入分析源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "6940053362058461198", "title": "聊一聊 Vue 3 动态组件是如何工作的", "desc": "在这篇文章中，阿宝哥将介绍 Vue 3 中的内置组件 —— component，该组件的作用是渲染一个 “元组件” 为动态组件。如果你对动态组件还不了解的话也没关系，文中阿宝哥会通过具体的示例，来介绍动态组件的应用。由于动态组件内部与组件注册之间有一定的联系，所以为了让大家能够…"}, {"id": "7005886964318601246", "title": "Vue `v-for、 v-if` 等key值绑定index和唯一id值时的对照测试", "desc": "执行操作 数组方法和数组下标更改 模拟分页情况 数组内容不变，下标发生改变 叠加2和3 深层次的obj对象变更 通过set方法变化 测试数据 场景一： 场景二： 场景三： 结论： key为唯一值时渲染"}, {"id": "6953879183600648229", "title": "6个实用的Vue自定义指令推荐", "desc": "6个实用的Vue自定义指令推荐 在 Vue2.0，除了核心功能默认内置的指令 ( v-model 和 v-show )，Vue 也允许注册自定义指令。本文给大家分享6个开发中可能用到的自定义指令。"}, {"id": "6997235410749358088", "title": "vue 父子组件间的数据传递", "desc": "父组件向子组件传递数据：通过属性传递数据；子组件通过props接收数据。 子组件向父组件传值 （通过事件形式($emit)传值 ）"}, {"id": "6953199671430873118", "title": " Vue 实现携带 Token 免密登录验证 ——Token使用（二）", "desc": "前言 看文章之前，强烈建议先把项目拉取下来！案例来自小弟的开源项目，这是 Token 免密登录验证的前端实现。「项目Github」 文章内容只是个人学习的一些总结经验，不具有权威性，强烈建议先移步：N"}, {"id": "6984713292686032909", "title": "vue封装axios时因该做些什么？", "desc": "1.设置项目的及地址 2.设置请求拦截器 设置发送请求时对token的处理 3.设置相应拦截器 处理401错误（token过期处理）"}, {"id": "6981792539078557710", "title": "新手入门第二课：2个文章美化的小技巧", "desc": "第二节课主要介绍2个文章美化的小技巧，分别是使用Markdown主题和制作合格的封面图，快来一起来学习吧！"}, {"id": "6992510650719141925", "title": "vue 2.0使用tinymce-vue富文本", "desc": "npm下载，如果是vue3.0版本执行以下代码 在tinymce4.0以后不支持vue2.0，所以需要固定版本，或降级版本，否则会报错 vue2.0使用以下npm安装 安装完成后需要把node_mod"}, {"id": "6987583249573363749", "title": "promise增加超时；改造promise.all不管参数多个实例的结果成功与否都进入到resolve状态，同时增加超时", "desc": "promise增加超时；改造promise.all不管参数多个实例的结果成功与否都进入到resolve状态，同时增加超时"}, {"id": "6967570296677236743", "title": "Vue3.0七大亮点", "desc": "一，性能比2.x快1.2～2倍 diff算法的优化 在vue2中，虚拟dom是全量比较的。 在vue3中，增加了静态标记PatchFlag。在创建vnode的时候，会根据vnode的内容是否可以变化，"}, {"id": "7002545470627119111", "title": "vue项目 webpack转vite 遇到的问题以及解决方案", "desc": "最近公司的项目越做越大，每次启动一下就要花费一两分钟，为了更长时间摸鱼，于是决定转vite 直接引用大神的小工具：wp2vite 即使用完了还是会发现很多小问题： 1. 导入一个文件夹下的多个文件时,"}, {"id": "6844903924768440334", "title": "Element-UI 技术揭秘（1）- 前言", "desc": "如果你用 Vue 技术栈开发 PC 的 to B 业务，那么对 element-ui 一定不会陌生，我目前在 Zoom 工作，fork 了一份 element-ui 的源码做二次开发，对 element-ui 的源码也有了一定的研究。由于自研组件库并不是开源的，所以我也不能把它…"}, {"id": "6989447158047080456", "title": "vue中的$nextTick()", "desc": "1. 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。2. 当父组件引入了某子组件时，父组件去调用子组件的方法。this.$refs.h..."}, {"id": "7002598107557052423", "title": "v-if和v-show的区别", "desc": "共同点：v-if 和 v-show 都能实现元素的显示隐藏 区别：     1. v-show 只是简单的控制元素的 display 属性，而 v-if 才是条件渲染（条件为真，元素将会被渲染，条件 "}, {"id": "6959808183988650014", "title": "Vue重构项目完结篇", "desc": "前言 2021年3月底，我决定开始重构公司的后台管理项目。 2021年5月初，我完成了项目重构。 50+个页面，预期2个月，结果一个多月提前完成了。 为什么重构？ 项目是18年开始的，过手人数较多且没"}, {"id": "6993478891243307022", "title": "vue diff算法 v-for中key的作用", "desc": "vue diff算法 v-for中key的作用 react vue中key有什么作用(key的内部原理) 虚拟DOM中key的作用 key是虚拟DOM对象的标识 当状态中的数据发生改变时,Vue会根据"}, {"id": "6991765464070242317", "title": "你不知道的Vue双向数据绑定-新手篇", "desc": "面试官:请你描述一下你对Vue的数据双向绑定原理的理解 我：Vue2.0版本的数据双向绑定是基于Object.defineProperty这个API来实现的,它是底层暴露给我们的一个封装方法.参数分别"}, {"id": "7005807595659198471", "title": "el-select 下拉框多选实现全选", "desc": "el-select 下拉框多选实现全选 在写一个功能时发现el-select支持多选，但是竟然不支持全选，好无语哦，那就自己实现一下吧~有两种方法，第二种感觉简单些 方法一： 下拉项增加一个【全选】，"}, {"id": "6994116188347301895", "title": "Vue 中的computed 和 watch", "desc": "Computed 计算属性是通过监听依赖的变化而产生对应的属性，这让计算属性必须包含return。 计算属性包含了get和set两部分，默认只有get，set需要自行添加，set在设置属性是，是修改属"}, {"id": "6992966173058924574", "title": "手写简版vue-router(hash模式版) | 8月更文挑战", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 单页面应用程序中,url发生变化的时候,不能刷新页面但是对于的视图内容会发生变化 1. 要手写咱们先来说说vue-router的使用步骤 在"}, {"id": "7000702856349089822", "title": "Vue3.0会带来什么？—— 2018 vue conf回顾笔记", "desc": "* 更快 * 更小 * 更易于维护 * 更好的多端渲染支持 * 新功能 当我们将模板编译为Virtual DOM的渲染函数的时候，Vue2.0的做法是不管是组件还是浏览器自带的原生html元素，都是统"}, {"id": "6992023405893681188", "title": "Vue3 实战总结（二）", "desc": "总结了vue3开发中，defineAsyncComponent 异步组件和ref获取dom的使用方法"}, {"id": "6981656757458173988", "title": "⚡vue3+ts+qiankun的微前端快速上手", "desc": "技术栈：vue3、typescript、qiankun(阿里的微前端框架)、vue-cli4 最近正在设计微前端项目，发现qiankun的官方文档只有vue2.x的写法，没有vue3.x的"}, {"id": "6970752937047883789", "title": "🔥🔥Vue2.0为什么不能检查数组的变化？又该如何解决？", "desc": "前言 我们都知道，Vue2.0对于响应式数据的实现有一些不足： 无法检测数组/对象的新增 无法检测通过索引改变数组的操作。 分析 无法检测数组/对象的新增？ 无法检测通过索引改变数组的操作。即vm.i"}, {"id": "6959699784634466318", "title": "请阐述vue生命周期", "desc": "📌 new Vue之后，发生了什么？数据改变后，又发生了什么？ 创建vue实例和创建组件的流程基本一样 首先做一些初始化的操作，主要是设置一些私有属性到实例中，例如：_开头的的属性以及$开头的属性 运"}, {"id": "7003615485422272525", "title": "关于vue里elementui组件的级联选择器cascader回显懒加载重载问题", "desc": "饿了么的级联选择有时候需要通过后台动态返回选择器的项，调用props里面的懒加载函数 通过懒加载动态加载级联的选项，比如省/市/区， 但是在回显的时候需要对已经选好的数据回显会有麻烦，比如回显第一条("}, {"id": "6844903905923448840", "title": "「2019 JSConf.Asia - 尤雨溪」在框架设计中寻求平衡", "desc": "这是一个由 simviso 团队对 JSConf.Asia 中关于 前端框架设计取舍 相关话题进行翻译的文档，内容并非直译，其中有一些是笔者自身的思考。而分享者正是 Vue.js 的作者 @尤雨溪，Vue 仓库地址：https://github.com/vuejs/vue 让我…"}, {"id": "7002496276314980366", "title": "适用于hls.js的vue3插件，vue3-video-play。", "desc": "插件Github地址 vue3-video-play vue3-video-play hls.js player component for Vue3. 适用于 Vue3 的 hls.js 播放器组件"}, {"id": "6994990610176278542", "title": "从项目搭建到学习 Vue3 新特性 ", "desc": "Vue2.x 已经发展了很久，周边的生态也都非常的完善了，使用 Vue.js 几乎满足开发我们的日常所有需求，在我们看来 Vue.js 框架已经足够优秀，而尤大看来还不够完美，仍然还有许多痛点值得让他"}, {"id": "6963941445451382792", "title": "【流莺书签】基础组件(Button,Overlay,Dialog,Message)", "desc": "流莺书签,一个用来收藏网站的项目 使用Vite+Vue3+Ts进行开发,具有书签、标签的增加,删除,修改,一键导入,导出配置,自动获取网站图标、标题等功能 你一定会喜欢的!"}, {"id": "6983962414924431374", "title": "VUE3（十六）封装axios", "desc": "一：axios 基础 从浏览器中创建XMLHttpRequest 从node.js发出http请求 支持Promise API 拦截请求和响应 转换请求和响应数据 取消请求 自动转换JSON数据 客户"}, {"id": "6844904143937601550", "title": "Vue的'奇技淫巧'", "desc": "混入 (mixin) 提供了一种非常灵活的方式，来分发Vue组件中的可复用功能。一个混入对象可以包含任意组件选项即生命周期、基础数据、实例方法、当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。当我们在每个单页面中都需要使用到数据、方法都可以在一个外部的…"}, {"id": "6955460404159971342", "title": "开发人员‍的终极VueJS资源", "desc": "众所周知，Vue是最好的JavaScript框架之一。受到全球开发人员的强烈推荐。在这里，我们将列出一些VueJS的惊人资源。虽然，在开始列表之前，让我们先了解一下VueJS。好吧，Vue是用于构建用户界面的渐进式框架。它是从头开始设计的，可以根据您的目标轻松地成为库和框架。它由..."}, {"id": "6984004322736472095", "title": "Vue3+Vite+TS+Eslint（Airbnb规则）搭建生产项目，踩坑详记（三）：引入Element-plus，解决字体文件404问题", "desc": "Vue3搭建项目的踩坑详记已经来到了第三篇，这次我们将引入大杯Element，并解决字体文件 404 的问题"}, {"id": "6943474376767438885", "title": "可视化布局的新思路", "desc": "你可能会说，bootstrap-layout布局出来的代码只能用于bootstrap的项目中，如果我用的是element，这个工具对我而言就没法用了。 这个工具在这种场景下基本用不了，因为它的行容器只能在同一行。我们左边的col需要放两个垂直排列的文本，它做不到，所以只适用于一…"}, {"id": "6977929393511514148", "title": "Vue3第一篇之ref和reactive详解扩展", "desc": "一、ref和reactive 1.reactive reactive的参数必须是一个对象，包括json数据和数组都可以，否则不具有响应式 如果给reactive传递了其他对象（如时间对象），默认情况下"}, {"id": "6999837347206397988", "title": "学习Vue源码前需要了解的defineProperty和Proxy", "desc": "前言 大家有使用Vue开发想必对响应式都有了解，知道Vue2是用Object.defineProperty实现数据劫持，进而实现的双向绑定。在已经发布快一年的Vue3中，数据响应式的实现由Object"}, {"id": "6975541036290408456", "title": "vue-admin-template创建项目与熟悉目录", "desc": "创建vue-admin-template项目 1.拉取代码 2.创建库 3.推送代码 熟悉根目录和src目录"}, {"id": "7002027334853197838", "title": "No.30 vue-element-admin 学习使用（二十五）集成vxe-table  别的编辑方式，插入数据", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 除了手动触发编辑，vxe-talbe还提供了别的编辑方式 弹框编辑 点击编辑后，弹出一个弹框，里面是一个表单，对表单的数据进行修改后，提交"}, {"id": "6986438080085360671", "title": "让你彻底理解TypeScript中的readonly", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 1.readonly的讲解 2.什么时候使用readonly 3.readonly的基本使用 4.有新的发现 5.这样"}, {"id": "6844903843872899085", "title": "从vue组件三大核心概念出发，写好一个组件【理论篇】", "desc": "vue 的 computed 属性默认是只读的，你可以提供一个 setter。它可以优化我写组件的逻辑，适用于父组件处理的值和子组件处理的值是同一个的情况 我们常看到一些优秀的组件库，传入的值既可以是一个 String/Number，也可以是一个函数。 比如ElementUI的…"}, {"id": "6996990661610176548", "title": "vue3.0项目实战总结", "desc": "前言 正所谓磨刀不废砍柴工，优秀的代码一定是基于优良的设计之上的！ 页面该如何进行组件化的拆分？ 首先需要先明确自身对于组件的提炼的标准，然后再依据这个标准进行区分设计提炼封装 我个人是主要以两种进行"}, {"id": "6844903833898844174", "title": "vue组件封装指南", "desc": "因为直接赋值，对于对象和数组而言只是浅拷贝，指向的是同一个内存地址，其中一个改变另一个也会改变。而通过 JSON颠倒转换之后，实现了深拷贝，则可以互不影响。 这样既降低了耦合性，也保证了各自的数据不被污染。 上面是一个通用组件，在某些场景中，右侧的按钮是 “处理” 和 “委托”…"}, {"id": "6993153057571749902", "title": "vue3 中 script setup", "desc": "script setup是Vue3新出的语法糖，类型是Vue的Git RFC中的建议。其目的是为开发人员提供更简洁的语法，简化使用Composition API时冗长的模板代码，以编写其单个文件组件"}, {"id": "6844903718010224653", "title": "vue3.0 尝鲜 -- 摒弃 Object.defineProperty，基于 Proxy 的观察者机制探索", "desc": "写在前面： 11月16日早上，Vue.js的作者尤大大在 Vue Toronto 的主题演讲中预演了 Vue.js 3.0的一些新特性，其中一个很重要的改变就是Vue3 将使用 ES6的Proxy 作为其观察者机制，取代之前使用的Object.defineProperty。我相…"}, {"id": "6844904080960126989", "title": "总结vue知识体系之实用技巧", "desc": "vue 作为目前前端三大框架之一，对于前端开发者可以说是必备技能。那么怎么系统地学习和掌握 vue 呢？为此，我做了简单的知识体系体系总结，不足之处请各位大佬多多包涵和指正，如果喜欢的可以点个小赞！本文主要讲述一些vue开发中的实用技巧。 当然这里不仅仅是可以监听 mounte…"}, {"id": "6980624175455010829", "title": "理解Vue的模板语法", "desc": "本系列将从理解基本使用到模拟实现的方式，来学习Vue3~~本文是Vue3系列的第4篇，关于模板语法，一起来看看吧~~~~"}, {"id": "6981792539078557710", "title": "新手入门第二课：2个文章美化的小技巧", "desc": "第二节课主要介绍2个文章美化的小技巧，分别是使用Markdown主题和制作合格的封面图，快来一起来学习吧！"}, {"id": "6996662966934306823", "title": "Element 2 组件源码剖析之Breadcrumb面包屑", "desc": "组件Breadcrumb用于显示当前页面的路径，快速返回之前的任意页面。 本文将深入分析源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "6979609720852054024", "title": "Electron+Vue3 MAC 版日历开发记录(30)——告一段落", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6869686131756269576", "title": "vue3 从入门到实战（上）", "desc": "笔者目前大四，在北京得到App实习，因导师需我做一个技术分享，考虑再三，决定分享最近学习的vue3，又因分享形式不限，因此打算在掘金发文。 笔者目前接触vue3已经差不多100天，对vue3的理解可能存在错误，如有错误的理解还请谅解。又因vue3对typeScript以及笔者更…"}, {"id": "6932302211305340941", "title": "总结一下Vue那些常用必会面试必考的API", "desc": "Vue 全局 api 及实例 api 很多，有很多会被遗忘在角落，如果不熟读文档很难想起它们。但是这些 api 又是日常开发必备，并且在面试的时候常考必考的。所以这里放在这里总结一下，其实了解这些 api 能扩展出很多知识点。当然这里不会过多设计扩展的知识点。 Vue 为何需要…"}, {"id": "6991612977103241247", "title": "Vue3 开发一个基础的的 tabs 组件 - 体验 JSX 的灵活性", "desc": "近几天有位小伙伴问到我，他在用 vue3 实现 tabs 组件时遇到一些困惑，让我帮忙看看。 他的实现方式是：想在 tabs 组件中，直接去修改 tab-panel 的 show/hide"}, {"id": "6893045604592418830", "title": "Vue3源码解读(四)-compositionApi", "desc": "hello，大家好，我是德莱问。 休了半个月多的假，继续回来写bug了，前面文章中讲到了Vue3源码的mount和patch部分，对Vue3中的createApp和render进行了主流程式的分析和讲解。 本篇文章将会围绕Vue3的另外一个主要的文件夹reactivity来进行…"}, {"id": "6877373779471761416", "title": "Typescript在Vue中的实践", "desc": "项目变的越来越庞大时，记住一个变量描述的具体是什么也是一件很困难的事，可能需要我们不停的去查找类型的定义，事实上 ts 可以很好的解决这个问题，虽然一开始的类型定义稍显繁琐，但是他带来的类型提示、代码补全等会让我们觉得这份工作量是值得的。 这可能是类型系统一个比较大的优势了，之…"}, {"id": "6966502107230765070", "title": "Vue3 + <script setup> + Typescript 使用手册", "desc": "Vue3 + Vite + script setup 在 Typescript 中的使用 很方便，但目前该写法尚在完善中，所以还是有许多坑需要踩的，文档暂时也不全，本文主要列举一"}, {"id": "6992396770437234701", "title": "Vue组件分类｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 动手搭建一个不论属于公司还是个人的组件库，都是一件很有意义的事情。对于公司而言，搭建一套符合公司业务的组件库，可以提升开发的效率，节省后续的"}, {"id": "6996692743888044068", "title": "手摸手教程：如何实现一个可编程的Vue动态表单？", "desc": "通过暴露组件的交互事件和API方法，给Vue动态表单增加了可编程接口，轻松实现表单的复杂交互逻辑，详情请点击阅读。"}, {"id": "6844904040711585799", "title": "一起撸vue组件：拖拽API实战之拖拽组件", "desc": "很有幸，将自己有使用过的，也是标准组件库里可能没有的组件封装成了一个小小的组件库，没想到start数破百了，vue-gn-components，接下来就是一步步丰富这个项目了~。期待大家的start~，这也是我持续丰富这个组件库源源不断的动力！ 首先第一个添加的是一个拖拽组件，…"}, {"id": "7006724401823481870", "title": "Vue.js事件修饰符", "desc": "在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation()是非常常见的需求。尽管我们可以在 methods 中轻松实现这点，但更好的方式是："}, {"id": "6896367626441654279", "title": "Vue3 中让 Vuex 的 useStore 具有完整的 state 和 modules 类型推测", "desc": "如今 vue3 已经接近尾声，各方面也得到了完善，对ts的支持也更强了。可是 vuex4 对 ts 的支持却没有任何改变，使用 useStore 的类型仍然为 any，在此官方提供了解决方案。 定义类型InjectionKey。 InjectionKey在将商店安装到Vue应用…"}, {"id": "6844903877133729799", "title": "一张图教你快速玩转vue-cli3", "desc": "本文系统的梳理了vue-cli3搭建项目的常见用法，目的在于让你快速掌握独立搭建vue项目的能力。你将会了解如下知识点： 本文末尾会给出一个以上提到的所有功能的一个配置文件，可供大家学习参考。 接下来，我们根据思维导图，一步步来解释和实现我们的目标。 此时即可按需引入eleme…"}, {"id": "6997775325899784200", "title": "Vue3从0到1组件开发-系统组件：Message消息", "desc": "基础三大件 前面已经写过了Modal弹框组件，Notice信息组件，加上这章的Message信息组件，基本就覆盖了信息反馈的几大主要方式了"}, {"id": "6994638518547021838", "title": "webpack&vue-cli迁移vite专业指北", "desc": "webpack/vue-cli工程使用vite专业指北，目前我们提供了使用Webpack/Vue-CLI的Vue项目自动转换工具"}, {"id": "6997033439400574984", "title": "vue3组件之间方法互相调用", "desc": "“这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战” 场景描述 父组件页面 子组件页面 出现 Uncaught TypeError: listRef.value.fatherMess is"}, {"id": "6990266419879346206", "title": "vue Router源码简单分析", "desc": "前言 在学习VueRouter源码之前我们先来了解一下path-to-regexp 在VueRouter中会有/foo/:id 这样的动态路由，这个库就是解析路由生成与之对应的正则表达式 安装 pat"}, {"id": "7005741077273509902", "title": "vue elementUi导出excel表格功能实现", "desc": "vue elementUi导出excel表格功能实现 Excel 的导入导出都是依赖于js-xlsx来实现的。 在 js-xlsx的基础上又封装了Export2Excel.js来方便导出数据。 安装e"}, {"id": "6930378495587516423", "title": "Vue3组件（五）封装一个更好用的url组件", "desc": "官网有一个url组件的例子，但是比较简陋，基本不太好用，那么我们来完善一下。 官网还是很灵活的嘛，把三个部分都给分开演示了。那我们就把他们合并在一起把。 接收父组件的v-model的属性值，并且提交数据的代码抽象出来放在独立的js文件里面，这样各种组件就都可以拿来用了。 这样写…"}, {"id": "6991770439282327566", "title": "技术博客｜深入浅出 Vue 数据响应式原理", "desc": "在使用 Vue 框架进行开发的过程中，常常会遇到更新数据但是视图无法更新的 bug，从而对开发的进度造成阻塞。为了提高开发效率， 我们可以通过遵守最佳实践来减少类似的 bug 的频率。"}, {"id": "6844904200686551054", "title": "带你了解基于 Vue 的微服务解决方案 Genesis", "desc": "这几年，因为忙于业务，都很少在社区发言了，直到今年要重构整个 FOLLOWME5.0 网站，为了满足业务发展的需要，才设计了 Genesis ，顺势推出了基于 Vue 的微服务解决方案。 在设计之初，不是没有考虑过社区的一些解决方案，但是无一例外的都是基于客户端聚合的微前端解决…"}, {"id": "6844903652285480968", "title": "使用webpack4搭建一个基于Vue的组件库", "desc": "组内负责的几个项目都有一些一样的公共组件，所以就着手搭建了个公共组件开发脚手架，第一次开发 library，所以是参考着 iview 的配置来搭建的。记录如何使用webpack4搭建一个library的脚手架 然后就是书写配置文件。 我写的 library 的目录结构如下，仅供…"}, {"id": "6958629965038682120", "title": "使用Vue.extend封装组件", "desc": "既然要使用Vue.extend（）封装组件，那这玩意儿到底是什么呢？我们且来看官方解释 官方眼里的Vue.extend（） 1.参数： {Object} options 2.用法： 使用基础 Vue"}, {"id": "6844904148295483400", "title": "Vue keep-alive 使用及缓存机制详解", "desc": "在VUE项目中，有些组件或者页面没必要多次渲染，所以需要将部分组件有条件的在内存中进行\"持久化\",不过这里的持久化不是简单的数据持久化，而是整个组件（包括数据和视图）的持久化，刚好VUE提供了&#x3C;keep-alive>这个内置组件来完成这件事情。 &#x3C;keep-…"}, {"id": "6955277086743330846", "title": "记一次编写检测敏感词汇组件的经历", "desc": "写在前面   在做商户端敏感词检测的过程中，发现了一些问题，特在此总结。本文的行文思路是编写敏感词检测代码，前两个思路未采用组件化的开发思想，后三个思路根据需求变更，采用组件化的思想和mixins混入"}, {"id": "6854573218515124237", "title": "Vue  created 中的异步请求的影响分析", "desc": "最近接手了别人写的前端代码，填了两个星期的坑了。周四填的这个坑比较有意思，是关于 created 钩子和异步请求的问题，反复验证了一个小时，终于弄清楚了同步请求和异步请求对钩子执行顺序的影响。 常规思路写出的代码，还真看不出问题，但是一运行就有问题，还是值得细究的。 代码的前任…"}, {"id": "6877519826546327566", "title": "多选，复选，穿梭框之日常总结", "desc": "今天小编接到一个优化，需要把选中数据进行默认回填，特此小记作为总结：做一个父子无关的tree(ps:无半选，全选等默认操作)拿到这个需求就是用官方通用el-tree加根据其类型回调其图标方法，使用插槽"}, {"id": "6993233890244575245", "title": "Vuex的学习和使用", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 什么是vuex？ Vuex 是专门为 Vue.js 设计的状态管理库，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可"}, {"id": "6978772587165777957", "title": "Vue2性能优化（面试够用了）", "desc": "前言：面试时经常被问到Vue性能优化。实践总结之后，面试的过程完全没问题，在此把心得分享给大家 性能优化分为四个模块：代码层面的优化，打包层面的优化，服务层面的优化，图片资源的优化。"}, {"id": "6844903923342393351", "title": "用户评论及回复功能设计[一]", "desc": "打开评论弹窗，input框获取焦点，input框默认提示文字为留下你精彩的评论吧,输入内容点击提交，即可向服务器发送请求，并将评论内容，评论时间，用户头像，用户昵称等内容在页面进行渲染。 点击用户评论，input框获取焦点，修改input框的默认提示文字为回复 @被回复用户的昵…"}, {"id": "6844904013360529416", "title": "table 组件了解两下？", "desc": "午后写的这篇文章，微风加阳光，很是惬意🏖。 然后，话不多说，我们直接进入正题，今天主要会讲解一下可伸缩列、固定列、多级表头和几个表格的常见问题✍️，干货满满哦😯。 我们在表头的每个 th 里面都多增加一个 div，也就是上图中红色的部分，然后绝对定位于 th 的右边即可。 …"}, {"id": "6917858477033390088", "title": "Element Table 表格组件实现多级、动态表头", "desc": "就是红色标记部分，会根据后端接口返回，动态变化。"}, {"id": "6925013384069038088", "title": "Vue computed是如何实现的？", "desc": "Vue 中的 computed 是一个日常开发中常用到的属性，也是面试中经常被问到的一个知识点，你几乎能在任何一个和 Vue 相关的面试题集锦里找到这样一个题目：methods 和 computed 有什么不同？你可能会毫不犹豫地回答：\"methods 不会被缓存，comput…"}, {"id": "6844903657306062862", "title": "vue2实现搜索结果中的搜索关键字高亮", "desc": "更多angular1/2/4/5、ionic1/2/3/4、react、vue、微信小程序、nodejs等技术文章、视频教程和开源项目，请扫一扫下面的二维码关注微信公众号——全栈弄潮儿。"}, {"id": "6844903640407375886", "title": "一步步实现VUE-MVVM 系列，储备面试技能", "desc": "回答: mvvm 主要通过 Object 的 defineProperty 属性，重写 data 的 set 和get 函数来实现。 ok，回答得60分，那么你知道具体实现过程么？想想看，就算他没问到而你答了出来是不是更好？前提下，一定要手撸一下简单的mvvm才会对它有印象~ …"}, {"id": "6996201195513577502", "title": "vue 响应式浅读", "desc": "响应式 = 数据劫持 + 发布订阅者模式 数据劫持： vue2.x版本中使用Object.defineProperty + 重写数组方法; vue3.x版本使用proxy"}, {"id": "6996191140726865957", "title": "Vue实例的源码解析 (实例二)", "desc": "实例二 该实例的模板如下： 主要是组件实例的创建流程。 实例二基本介绍 对于我们的实例二，你可能因为实例一的组件渲染过程而对实例二心存忌惮，因为实例一只是一个根组件，但是却写了那么多的流程。"}, {"id": "6983861759652151309", "title": "前端代码规范-Vue", "desc": "第一：Vue组件命名-前缀 尽量使用完整单词（不要过于具体，也不要过于抽象），2-3个单词，具有可读性 第二：函数命名规则 常量大写 避免单字母命名。命名应具备描述性 使用驼峰式命名对象、函数和实例。"}, {"id": "6844903887527231502", "title": "Vue项目减肥之旅（前端项目体积精简的几种方法）", "desc": "P.S. 本文同时适用于：使用webpack打包的项目。 俗话说得好，引用依赖一时爽，一直引用一直爽。 在开发项目的过程中，我们往往需要引用到大量的第三方模块(node modules)。确实，通过引用第三方模块，能大大的简化开发的过程，提高工程质量。但难免的，也带来了“体积”…"}, {"id": "6989978064339861518", "title": "vue的keep-alive源码解析", "desc": "参考 可以看出keep-alive和我们定义组件的过程一样，设置了一个组件名为keep-alive的一个组件。因此我们可以在.vue中直接使用<keep-alive>标签。 销毁的时候遍历cahe将缓"}, {"id": "6966029569195737101", "title": "利用混入将公共方法挂载到VUE实例原型上", "desc": "function install(_Vue) { Vue = _Vue Vue.mixin({ beforeCreate(){ if(t"}, {"id": "6895527373886881800", "title": "Vue全家桶系列之Vue-cli、单文件组件、如何设计自己的组件", "desc": "在很多Vue项目中,我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: '#app '}) 在每个页面内指定一个容器元素。 这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂…"}, {"id": "6949724161157627918", "title": "Gridsome 案例", "desc": "创建项目启动项目:使用github中的 开源模板，最好是将其fork到自己的账户当中，防止模板文件被作者删除或者做一些其他的修改。处理首页模板根据模板中的package.json，安装依赖 npm i"}, {"id": "6900571574458384397", "title": "vue+typescript", "desc": "目录解析：多了tsconfig.json、shims-tsx.d.ts、shims-vue.d.ts这几个文件，那这几个文件是干嘛的呢：tsconfig.json:typescript配置文件,主要用"}, {"id": "6844903518457823245", "title": "聊聊 vue 中的 watcher", "desc": "上面的写法告诉 vue，我需要监听 someProp 属性的变化，于是 vue 在内部就会为我们创建一个 watcher 对象。（限于篇幅，我们不聊 watcher 的具体实现，感兴趣的可以直接看源码 watcher）"}, {"id": "6844903825921294344", "title": "Vue 2.x折腾记 - (18) 用Vue的Inject Provide结合Event Bus来实现局部的状态维护", "desc": "想拆分成对应的组件(全部写在一起是贼恐怖的事情)，又不想用Vuex这类来实现。 那最终的方案就是Vue的eventbus了, 这只是一种方案的实现。"}, {"id": "6844903601744134158", "title": "你也许不知道的Vuejs - 自定义路由实现", "desc": "对于单页面应用，前端路由是必不可少的，官方也提供了 vue-router 库 供我们方便的实现，但是如果你的应用非常简单，就没有必要引入整个路由库了，可以通过 Vuejs 动态渲染的API来实现。 我们知道组件可以通过 template 来指定模板，对于单文件组件，可以通过 t…"}, {"id": "6989975733951004686", "title": "初学vue3之watchEffect", "desc": "一、上一期我学习了vue3中watch的用法，这一期带来一个很特别的api watchEffect,它也可以用于监听属性，但是它的特别之处就是可以监听某个属性的变化，且它无法获取oldValue,而且"}, {"id": "6914112369618747399", "title": "SSR服务端渲染", "desc": "如果应用程序依赖于一些异步数据，那么在开始渲染之前，需要先预取和解析好这些数据。 在客户端，在挂载 (mount) 到客户端应用程序之前，需要获取到与服务器端应用程序完全相同的数据。"}, {"id": "6944900219348156424", "title": "「免费开源」基于Vue和Quasar的前端SPA项目crudapi后台管理系统实战之动态表单（五）", "desc": "通过上一篇文章 基于Vue和Quasar的前端SPA项目实战之序列号（四）的介绍，我们已经完成了元数据中序列号的增删改查，本文主要介绍动态表单设计功能的实现。 在crudapi系统中，所有的业务表单都是通过配置动态生成的，代码无需写死，有关基本概念参考之前文章 元数据管理—动态…"}, {"id": "6844903581598892039", "title": "vue小记", "desc": "数据存储的利器啊，我之前是采用easy-mock，遗憾的是其只能使用get请求。 在json-server中 我们采用npm install -g json-server安装依赖。 新建文件夹store，下建index.js和mutation.js,这里我只建了mutation…"}, {"id": "6913200823933599757", "title": "盘点那些vue源码中的实用函数", "desc": "1. 缓存函数 2. 原生bind的兼容性写法 3. 伪数组转真数组的方法 4. 代码混入 5. 判断对象是否全等的方法 6. 只需要执行一次的函数"}, {"id": "6844903857487609864", "title": "基于vue-cli3脚手架，后处理工程自动化脚本", "desc": "工具在使用前，需要按需配置，自行新增技能也可以在此配置文件中添加配置项。"}, {"id": "6901614577146920967", "title": "【Vue学习（一），Vue和MVVM介绍、Vue常用标签】", "desc": "​ Vue.js是当下很火的一个 JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。 相比于Angular.js，Vue.js提供了**更加简洁、更易于理解的API，**使得我们能够快速地上手并使用Vue.js。 如果你之前已经习惯了用 jQuery操作 D…"}, {"id": "6844903507607158798", "title": "前端开发：如何写一手漂亮的 Vue", "desc": "前几日听到一句生猛与激励并存，可怕与尴尬同在，最无奈也无解的话：“90后，你的中年危机已经杀到”。这令我很受触动。显然，这有些夸张了，但就目前这日复一日的庸碌下去，眨眼的功夫，那情形就会在这骨感的现实面前，悄然的被显现。所以，越发体验到，当必要有计划的去做，去写，去玩，去嗨，利…"}, {"id": "6916444963177758734", "title": "vue  动态设置路由权限", "desc": "之前看到网上有些动态设置路由的，但是跟目前的项目不是很匹配，就自己动手实现了一种。主要思路就是： 1.配置路由的时候绑定好id，可后端开发完成后，与后端同步id就行，这id唯一不变，根据此id可找到路由地址及icon。"}, {"id": "6866429607785005069", "title": "Vue3 源码分析(1)：响应式原理", "desc": "ReactiveFlags 是 proxy 上的一些常量的定义。对于 target 类型的判断，在 createReactiveObject 中对于 COMMON 和 COLLECTION 有不同的 handlers 来处理。toRaw 用来取一个 reactive 对象的原对…"}, {"id": "6844903830249799688", "title": "从零到一详聊如何创建Vue工程及遇到的常见问题", "desc": "npm install -g cnpm --registry=\"cnpm\"全局安装淘宝cnpm。 开发工具选择很多，VUE无专用开发工具，开发项目多以SPA形式体现，本例使用 Visual Studio Code。 调试工具选择很多，官方推荐 vue-devtools 。 安装…"}, {"id": "6844903840848805901", "title": "Vue源码分析系列五: 响应式原理", "desc": "vue.js采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty来触发各个属性的getter以及setter，在数据变动时发布消息给订阅者，并触发相应的监听回调。 调用Vue原型上的 _observe() 以及 _compile() 方法。、…"}, {"id": "6891064380340273165", "title": "vue3.0响应式原理之proxy", "desc": "vue3.0响应式原理之proxyProxy是ES6的构造函数defineProperty做数据劫持->给对象进行扩展->属性进行设置defineProperty和Proxy区别理解ProxyProx"}, {"id": "6844904104288862215", "title": "panda-utils:构建发布一个自己的函数库", "desc": "虽然市场有很多牛逼的库比如loadsh、underscore.js等等，公司也有公共的函数库，但是如果你自己上手构建一个自己专属的函数库，用着会更爽，也更香。 一方面是为了学习，一方面是为了提高生产。 先去github上新建个仓库，在本地上下载打开它并输入命令初始化并安装下we…"}, {"id": "6844904128095715335", "title": "Vue3 响应式原理和实现笔记", "desc": "由于 proxy 代理的对象只能代理到第一层，当对多层级的对象操作时，set 并不能感知到，但是 get 会触发，需要我们进行递归实现，利用 Reflect.get() 返回的“多层级对象中内层” ，再对“内层数据”做一次代理。 r.push('c') 会触发 set 执行两次…"}, {"id": "6844903565262061576", "title": "【babel+小程序】记“编写babel插件”与“通过语法解析替换小程序路由表”的经历", "desc": "话不多说先上图，简要说明一下干了些什么事。图可能太模糊，可以点svg看看 最近公司开展了小程序的业务，派我去负责这一块的业务，其中需要处理的一个问题是接入我们web开发的传统架构--模块化开发。 我们来详细说一下模块化开发具体是怎么样的。 我们的git工作流采用的是git fl…"}, {"id": "6844903670052716557", "title": "在你的下一个Web应用中使用Vue.js的三个理由", "desc": "选择一个JavaScript框架真是太难了——因为有太多的框架可以供我们使用，并且它们之间的差距并不是很明显。如果你认为生产率（“我开发起来有多快”）和性能（“我的网页性能如何”）是最重要的两点的话，就让我展示一下为什么Vue.js是一个非常可靠的构建网页以及SPA（单页Web…"}, {"id": "6844903518877270029", "title": "Element 中的 AT 可访问性", "desc": "AT 是 Assistive Technologies 的简写，是指具有以下特征的硬件或者软件： 依赖 UA(User Agent，下文简称”UA“) 提供的服务来提取和呈现页面内容 通过 API 和 UA 进行交互 提供了一系列服务来方便残障用户和网站内容进行交互 其中包括：…"}, {"id": "6973672269633552420", "title": "自学Vue nine day！！！", "desc": "一、不写子传父有什么问题 点击按钮，他加的只是子组件的num，并不会改变父组件的num。 现在看不出什么影响，在举个栗子："}, {"id": "6973637607834009613", "title": "axios的请求拦截与相应拦截", "desc": "问题: 1.请求携带token 2.全局的请求loading 解决: 解决携带token问题 --初次登陆获取token保存在本地 1.每一个需要token的请求都携带token,但是代码重复很多, "}, {"id": "6947320359859257358", "title": "vue之diff算法（看这篇就够了！）", "desc": "我们知道 Vue 使用的是虚拟 DOM 去减少对真实 DOM 的操作次数，来提升页面运行的效率。今天我们来看看当页面的数据改变的时候，Vue 是如何来更新 DOM 的。Vue和React在更新dom时，使用的算法基本相同，都是基于 snabbdom。 当页面上的数据发生变化时，…"}, {"id": "6844903624242380808", "title": "JavaScript异步编程之事件", "desc": "dom0是节点元素的私有属性。同一个事件只能绑定一个，绑定多个，只有最后一个有效。直接写在html节点上的也会被覆盖。如下面的代码，最后点击触发的时候只会打印3。 所以，在使用如window.onload之类的事件的时候就需要注意了。 有标准，不涉及实践。 addEventLi…"}, {"id": "6844903880027799560", "title": "【Vue原理】Slot - 源码版之普通插槽", "desc": "今天我们来解读Slot 的源码啦。我们都知道 Slot 分为 普通Slot 和 作用域Slot，两个内容都很多，所以分两部分进行讲述。 其实普通Slot，表示默认Slot和 具名Slot，只是他们的处理方式都差不多，就只是是否有自定义名字而已，所以，表示一种类型。 插槽的作用域…"}, {"id": "6961241653248000013", "title": "vue响应式原理学习", "desc": "vue响应式的简单实现，实现大体思路为，劫持监听所有属性，在解析模板中初始化视图，数据变化通知观察者Dep内的watcher执行更新视图操作。"}, {"id": "6844903502699823112", "title": "vue移动助手实践（三）————结合vue和localstorage的移动端记账demo", "desc": "最近在做的是小demo,这个是其中的一两个页面，是记账模块。专门抽出来讲。总的代码我会放在github上，今天讲的这一部分代码主要是下面三个文件内。 数据格式的定义：因为涉及到可以筛选出某一年的某一个月的所有数据，同时每一个月的某一天的数据也可以被筛选，所以数据格式的定义以及数…"}, {"id": "6844904146408046600", "title": "Vue之实现MVVM", "desc": "调用$mount的mountComponent方法，先执行beforeCreate周期函数，实例化一个渲染watcher，在它的回调函数（初始化及数据变化时执行）中调用updateComponent方法。 在init时会调用Object.defineProperty方法监听实例…"}, {"id": "6949491458306998280", "title": "Vue源码分析② 模板编译", "desc": "Why虚拟DOM？Vue在2.0版本引入虚拟DOM，这被认为是革命性的成果，因为虚拟DOM大大地提高了页面的渲染速度。What虚拟DOM？虚拟DOM是一个JavaScript对象，它是页面中真实DOM"}, {"id": "6844903909312430094", "title": "【Vue原理】Compile - 源码版 之 从新建实例到 compile结束的主要流程", "desc": "比如 页面A到页面B，页面B又转到页面A。"}, {"id": "6854573222412140552", "title": "vue 基础入门（三）", "desc": "更新元素的 innerHTML。注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。如果试图使用 v-html 组合模板，可以重新考虑是否通过使用组件来替代。 在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-h…"}, {"id": "6910939039495356424", "title": "Vue3中的响应式系统简要分析", "desc": "Vue2响应式缺点1.无法监听数组变化2.无法监听对象属性添加/删除此外，在组件初始化的时候就将所有的数据加入响应式系统，有一定的性能消耗。ProxyAPIES6中有原生的代理功能，完美地解决了Vue"}, {"id": "6844904030712365069", "title": "Vue中数组索引项、对象属性增删无法触发更新检测", "desc": "当你在用Vue开发的时候，你可能不经常，只是偶尔地遇到，“哎？我明明把异步数据赋值给我定义的数组变量或者对象变量了，为什么页面上数据还是老旧的并没有改变呢？”，这时候你可能各种尝试，比如把生命周期函数mounted()更改为created()，于是数据的重新绑定直接被你提前到n…"}, {"id": "6881608234633789453", "title": "vue源码解析之keep-alive原理", "desc": "keep-alive是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中；使用keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 在mounted这个钩子中对include和exclude参数进行监听，然后实时地更新（删除）this…"}, {"id": "6844903587617701902", "title": "前端单页面应用的权限管理", "desc": "在如今前端框架发展的今天，单页面应用越来越比较常见了，随之而来也将面对权限的管理。针对VUE主要说说以下方面： 接口的权限一般和UI库关系不是很大，这里用axios举例来说明。常用在管理后台这些需要获取用户登录信息的接口。这里使用axios的拦截器就能很方便的实现。 举个小例子…"}, {"id": "6844903651018817544", "title": "Nuxt配合Node在实际生产中的应用", "desc": "上个星期，甲方说要在应用上做一个促活活动（其实就是让用户领OFO的骑车券），考虑到之前在我另一个应用上已经做过客户端token验证，想想，撸起袖子直接在之前的Node上开搞吧。 这个东西类似与React中的Next，做Vue服务端渲染在Nuxt确实挺方便的，整个目录结构与Vue…"}, {"id": "6972324364637175845", "title": "简单实现手写vue以及分析初始化流程", "desc": "背景 vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现，首先要对数据进行劫持监听，所以我们需要设置一个监听器Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者W"}, {"id": "6972154741539373092", "title": "Vue.js 源码学习 - 数据驱动", "desc": "Vue.js 一个核心思想是数据驱动。所谓数据驱动就是指视图是由数据驱动生成的，对视图的修改，不会直接操作 `DOM`，而是通过修改数据。本文主要分析模板和数据如何渲染成最终的 DOM。"}, {"id": "6977726846150377502", "title": "1-vue3入门基础知识与引入", "desc": "vue3入门基础知识与引入，主要讲关于vue的入门知识点，与各类cdn知识点与vue3的cdn引入。"}, {"id": "6844903890832326669", "title": "Vue CLI and Leaflet （8）地图量测", "desc": "地图的量测功能，是地理信息系统中的常用功能。主要量测地图上的距离，面积，或者线要素的长度，面要素周长和面积。 这篇文章将介绍第一个基于 leaflet.js 实现地图量测插件 leaflet-measure-path 。使用这个插件的原因是它简单好用，如果你看了之前的文章或掌握…"}, {"id": "6844903677908484109", "title": "Iceworks 2.7.0 发布，海量图表供你选择", "desc": "阿里巴巴图表库 Bizcharts 正式开源 Bizcharts 是基于 G2 引擎的 React 版本的封装。 Bizcharts 的语法设计非常贴切 React 的使用方式，图表的各个部分都拆分成了独立的 React 类，如：<Tooltip /> 代表提示信息， <Axi…"}, {"id": "6844903647386550286", "title": "vscode中vue-cli项目es-lint的配置", "desc": "感谢掘金提供平台。"}, {"id": "6844903680265682958", "title": "使用BindingX开发客户端炫酷动画", "desc": "Weex 是一套简单易用的跨平台开发方案，能以 web 的开发体验构建高性能、可扩展的 native 应用，为了做到这些，Weex 与 Vue 合作，使用 Vue 作为上层框架，并遵循 W3C 标准实现了统一的 JSEngine 和 DOM API，这样一来，你甚至可以使用其他…"}, {"id": "6844903554562392078", "title": "JavaScript 2018: 你需要和不需要深入的 - The New Stack", "desc": "JavaScript 现今已发展成熟 -- 我们也不再是在页面上做一些小小的互动元素了，而是使用 JavaScript 构建整个大型应用。 当然，这也使得其比过去更为复杂， 在这个变化万千的 JavaScript 生态系统中，我们也已难以知道整个系统到底有多大。"}, {"id": "6977751438562689038", "title": "vuex中直接修改state 与 commit来修改state的区别", "desc": "这是我参与更文挑战的第17天，活动详情查看更文挑战 背景 当我们使用vuex进行状态管理的时候，我们总是会看到一句话更改Vuex 的store 中的状态的唯一方法是提交commitzongz，那么我们"}, {"id": "6844903848805416968", "title": "HeyUI组件库按需加载功能上线，盘点HeyUI组件库有哪些独特功能？", "desc": "如果你还不了解heyui组件库，欢迎来我们的官网或者github参观。 当heyui组件库的组件越来越多的时候，按需加载的功能终于上线了。 话不多说，先把按需加载的使用方式放出来。 以此图为例，按需加载后，js与css的大小将大幅度减小。 其中，common.base.less…"}, {"id": "6928775382149627918", "title": "前端学习日记 (二） --Vue 3 基础篇 · 上", "desc": "摘要：大家新年好！作者作为一个前端小白，为了能紧跟前端技术的步伐，早日迈入大厂的门槛😂，所以春节期间也不敢闲着，开始着手Vue 3的学习，此篇主要记述 API 相关的知识。 文章基本按照 Vue 3 官方文档进行整理总结，因为之前学过Vue 2，此次加上一些个人理解学习 Vu…"}, {"id": "6937522054144999431", "title": "Vue + Element UI 电商管理系统的盲点记录", "desc": "git add . 6. 项目编写前再进行一次初始化项目 1.这里的:model不写可以对v-model的双向数据绑定不会有任何影响，但是在进行表单规则校验的时候没有:model是不行的。 这样就可以通过scope.row来获取userList中的数据。在通过组件来使用这个数据…"}, {"id": "6844904150430384136", "title": "【vue@leaflet】 通过MapV实现 运行轨迹", "desc": "之前有网友留言出，希望出一个关于点位的历史轨迹。点位的历史轨迹，我想的是通过 L.polyline 修改对应的点位数据 latlngs 然后通过 setLatLngs 的方式更新即可。如下代码所示。不知道是否是该网友所需要的答案。"}, {"id": "6844904196895047694", "title": "项目优化的几个方面", "desc": "1. 移除所有的console 2. 在vue.config.js中使用chainWebpack的方式来配置不同的环境入口 3. 通过externals加载外部CDN资源 4. 路由懒加载"}, {"id": "6844904142612201480", "title": "【整理】Vue开发中遇到的问题", "desc": "问题： 开发项目时，我创建了一个名为MyForm.vue的单文件组件，并在App.vue中注册该组件。然而当我使用<myform></myform>标签时，组件却并未生效。查阅官方文档后终于发现问题所在。 根据官方文档，定义组件名的方式分两种：短横线分隔命名(kehab-cas…"}, {"id": "6844903670291628039", "title": "webpack4+vue2+vuex+rue-router+axios的多页+单页混合应用框架", "desc": "一个集 多页应用 + 单页应用 的混合项目框架。 适用于主要入口页面生成多页，子页面和次要页面使用单页形式的项目。 ES6+ Vue2.0 Vuex Vue-Router Axios Webpack4 npm模块(vue、vuex之类)打包成一个单独的js文件 公共组件和公共函…"}, {"id": "6844903891650215949", "title": "给大家分享一个vue的移动端的事件项目", "desc": "在引入 vue-mb-touch 时，可以传入一个全局配置对象。该对象目前支持 maxDistance 与 pressTime， maxDistance 用于手指在屏幕上移动多长距离内可触发事件默认10，pressTime 用于手机按住屏幕多长时间触发长按事件,默认650。具体…"}, {"id": "6996945401655853069", "title": "【VUE】websocket重连", "desc": "场景描述：手机锁屏后大约60秒，IOS会自动断开websocket连接，连接丢失了，那我们的数据也就断了"}, {"id": "6996947997334601742", "title": "【VUE】引入使用G2图表", "desc": "G2 是一套基于图形语法理论的可视化底层引擎，以数据驱动，提供图形语法与交互语法，具有高度的易用性和扩展性"}, {"id": "7007197855102287885", "title": "因为使用peerDependencies而引发的bug", "desc": "前几天有个人跟我反馈说，她fork了我右键菜单那个开源项目，一直无法打包成功。我寻思着应该不可能吧，当我尝试打包时，果然翻车了🤡。 经过了一番调试后，终于找到了问题所在，本文就跟大家分享下这个问题"}, {"id": "7006700954716209183", "title": "整理vue面试题", "desc": "本期面试题干货，记得来看哦，整理挺费时间的，希望对你有用，题目大概如此，思路还是靠自己去摸索，答案仅供参考……"}, {"id": "7007346932062355463", "title": "vite核心原理及在vue2项目中的使用", "desc": "Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。"}, {"id": "7005725809822416909", "title": "登录业务几种方式的完整流程", "desc": "本文参与了掘金周边礼物🎁活动哦，在评论区留言就有机会免费得掘金周边礼品，具体规则请看文末，登录功能，几乎是每一个网站或应用都有的功能"}, {"id": "7005336858049642527", "title": "Vue：知道什么时候使用计算属性并不能提高性能吗？", "desc": "如果你是一个 Vue 用户，你肯定知道计算属性，它用起来很舒服！ 个人认为，计算属性是由其他状态（其依赖项）组成的状态。但在某些情况下，计算属性也许达不到我们想要的效果，可能很多人都不知道这一点，所以"}, {"id": "7007205653198405668", "title": "为老vue项目添加vite支持", "desc": "1、前言 接手公司的某个项目已经两年了，现在每次启动项目都接近1分钟，hmr也要好几秒的时间，but vite2发布之后就看到了曙光，但是一直没有动手进行升级，昨天终于忍不住了，升级之后几秒钟就完成了"}, {"id": "6986453616517185567", "title": "产品经理：能不能让这串数字滚动起来？", "desc": "在很多场景下我们需要展示一串数字，这串数字可以是写死固定在页面上的，也可以是动态刷新实时请求的，还有一些是根据用户的交互产生变化的数字。之前我们网站在数字发生变化时是用 anime.js 做的类似于…"}, {"id": "7000300247947673630", "title": "产品经理：你能不能让词云动起来？", "desc": "事情是这样的，前段时间拿到公司的数据大屏原型图让我一天内把一整个页面做出来。 简单看了看，就是一个3840 * 1840的大屏然后几个列表几个图例看起来也没有多复杂。 唰！很快啊加了一会班"}, {"id": "7005355551928352776", "title": "[Vue DevUI]Vue3组件库移动端预览实现原理 | 本文参与掘金周边礼物🎁活动 评论即可抽奖🏆", "desc": "如何实现Vue3组件库移动端预览功能，并通过AST方式自动生成移动端预览的Demo。本文参与掘金周边礼物活动，欢迎大家对本文和DevUI组件库进行评论，评论即可参与抽奖！"}, {"id": "7007280952967692296", "title": "从vue3.0源码推导reactive与ref 的用法及场景", "desc": "体验了一段时间vue3，在阅读官方文档时，有些新的API说明并不能很清楚的理解字面意思，导致在使用中大家的用法五花八门，也会出现一些疑问，本文就从源码角度简单剖析一下，算是抛砖引玉了。"}, {"id": "7007300572227305485", "title": "Element-ui el-table 使用 SortableJS 实现表格拖拽排序", "desc": "当我们使用 el-table 组件时，需要用到拖拽排序的需求时，虽然 el-table 自带支持按列排序，但是当我们自己拖拽进行排序时，现有组件是无法满足的，这个时候我们就需要SortableJS。"}, {"id": "7007234876760031269", "title": "Vue项目模板 - Css规范", "desc": "Vue项目模板 - Css规范 前言 关于项目css规范有很多，css选择器、css命名、css预处理（less）、组件库等。 本项目： 组件库：element-plus -->1.1.0-beta."}, {"id": "7004045635620405278", "title": "Vue项目优化打包——前端加分项", "desc": "Vue项目开发完毕后，对项目进行打包发布之前，必不可少的操作就是项目优化，这也是程序猿的加分项。跟随本文的脚步来看看如何对项目进行优化吧~"}, {"id": "6995732683435278344", "title": "细说 Vue.js 3.2 关于响应式部分的优化", "desc": "Vue.js 3.2 已经正式发布，其中关于响应式部分的性能优化，你知道是怎么做的吗？本文会从源码层面分析具体做了哪些优化，以及这些优化背后带来的技术层面的思考。"}, {"id": "7006146528876167181", "title": "vue3 使用 qrcode.vue 生成二维码", "desc": "需求 前端根据后台返回链接生成二维码 复制链接 下载生成的二维码图片 vue3使用qrcode.vue 生成二维码 并下载"}, {"id": "7005383075248996359", "title": "画了5张图，助你轻松打败动态权限路由！| 文末送掘金周边礼物🎁", "desc": "👨‍💻本文保证你能彻底弄懂动态权限路由系统，让你不管是面试还是开发，都游刃有余，哪怕你之前一点也没接触过动态权限。"}, {"id": "7006634698822680613", "title": "vuex利用第三方包实现数据持久化", "desc": "让在vuex中管理的状态数据同时存储在本地。可免去自己存储的环节。 在开发的过程中，像用户信息（名字，头像，token）需要vuex中存储且需要本地存储。"}, {"id": "6991289524915535908", "title": "【建议收藏】8张脑图快速了解Vue组件 | 8月更文挑战", "desc": "以图的形式，言简意赅的总结Vue3组件相关的内容⭐️，附原图o🧚🏻‍♀️，可以方便你按照自己的想法二次修改，欢迎阅读👇"}, {"id": "6844903520278151176", "title": "eros | 基于weex ，使用 vue 写法来快速构建你的 app 应用", "desc": "eros 是基于 weex 封装面向前端的 vue 写法的解决方案，由于 app 开发的特殊性，eros 则更偏重关心于整个 app 项目。 eros 对 weex 官方进行二次封装，能及时跟进 weex 的新特性， eros-cli 支持生成开发模板，更新平台相关依赖，打包等…"}, {"id": "6922284724392034317", "title": "vscode自定义vue模板", "desc": "用vscode编辑器创建vue模板，再也不用每次新建vue文件的时候都去一遍遍的重复敲某些代码片段。输入 vue 再按回车键，即可生成自定义的vue文件内容，相当的好使，开发效率蹭蹭的上去了。 打开vscode，选择文件 > 首选项 > 用户片段。随后在出现的输入框内输入vue…"}, {"id": "6935057667639476237", "title": "Vue2.0 学习笔记二 基础语法", "desc": "1. Mustache语法 Mustache语法也叫插值表达式，Mustache语法式通过{{}}渲染到页面，并且数据是响应式的。 2. 指令 指令的本质就是自定义属性。 Vue指令的格式: 通常以V开头 比如v-block。 2. v-once 指令 v-once指令只会执行…"}, {"id": "6854573210499973128", "title": "vue实现的多页面项目如何优化打包", "desc": "在多页面框架打包的过程中会，随着业务的增加页面越来越多，使用的三方包也会越来越多，但并不是所有页面都会使用到三方插件，使用webpack打包会让所有的三方包打包到一起，会导致vendor.js(三方包打包后的文件)越来越大，即使没使用过三方插件的页面也会引入，页面加载会越来越慢…"}, {"id": "6844903649529856008", "title": "Vue 全站缓存之 vue-router-then ：前后页数据传递", "desc": "在前文 Vue 全站缓存之 keep-alive ： 动态移除缓存 和 Vue 全站缓存二：如何设计全站缓存 中，我们实现了全站缓存的基础框架，在页面之间后退或同层页面之间跳转时可以复用缓存，减少了请求频率，提升了用户体验，最赞的是，开发逻辑理论上会简单直观很多。 在父子组件之…"}, {"id": "6882924908247171079", "title": "watch监听通俗易懂", "desc": "假设有如下代码：上面的代码的效果是，当我们输入firstName后，wacth监听每次修改变化的新值，然后计算输出fullName。handler方法和immediate属性这里watch的一个特点是"}, {"id": "6844903815213236237", "title": "vue项目封装icon", "desc": "在项目中常遇到使用图标的地方，找了许多解决方式，最终还是选择了iconfont图标作为常用图标库。 但是在实际开发当中，使用iconfont提供的开发方式有诸多不便的地方。例如当需要新增一个图标是，需要更新在线链接，然后再将项目当中的链接替换。 接下来记录一次如何在vue中封装…"}, {"id": "6844903801816776717", "title": "Vue构建工具的设计与实现", "desc": "简介：想了解Vue技术栈构建工具设计思路吗？一个简易好用的构建工具都是为了提高生产效率，用工具解放生产力，关注业务开发。 一、前言 在前端界 React、 Vue、 Angular三足鼎立的形式下，我们也针对 Vue 技术栈设计了一套构建工具解决方案。力求做到开箱即用，又可以根…"}, {"id": "6844904052707295245", "title": "一次Vue改版多标签页的实录", "desc": "临近放假，又接到一份来自甲方长长的需求整改表。 然后参加了一场完全都听不懂的会，大多数都是业务上的问题，由于我本人没具体参与过这个项目的开发，所以基本上完全没插上嘴，加上大屏幕光线太亮，照的我头晕目眩，后面都快睡着了。 其中前端方面有几个问题，其中一项较大的问题是要加上多标签页…"}, {"id": "6844903757700939790", "title": "使用NodeJS  生成Vue中文版 docSet 离线文档", "desc": "Dash所需的文档都是.docSet后缀的文件，其实docSet文件就是一个文件夹而已，里头包含最终的html文档，以及根据html建立的索引（索引放在sqlite数据库中）。 可以选择 镜像时处理，也可以镜像后处理。只需要结果中包含html，以及sqlite 就OJBK。 1…"}, {"id": "6844903863166697480", "title": "谈谈Vue/React中的虚拟DOM(vDOM)与Key值", "desc": "在了解虚拟DOM前，先来了解DOM的一个对象属性——DocumentFragment。 在一次操作中，需要频繁操作DOM时，就可以先将要改变的节点附在DocumentFragment上，之后再将该对象渲染到DOM中，改方法只对DOM进行了一次操作，可以显著提高性能。 紧接着，对…"}, {"id": "6917071626656251911", "title": "你知道vue中key的作用和工作原理吗", "desc": "key的作用主要是为了高效的更新虚拟DOM，其原理是vue在patch过程中通过key可以精准判断两 个节点是否是同一个，从而避免频繁更新不同元素，使得整个patch过程更加高效，减少DOM操 作量，提高性能。"}, {"id": "6945834478749089805", "title": "随手记Vue3.0文档阅读差异(1)", "desc": "本文为作者记录自身所理解的2.*与3.0差异，主要是帮助作者自身理解3.0，并非严谨的教学，如出现不准确的地方，请勿责怪，相互学习。 首先根据自己阅读文档后，把整体在使用上的差异基于自己对Vue这个框架的理解分为了四个部分，后续本人讲根据顺序进行编写。 实际上会发现跟我们的第二…"}, {"id": "6844903697995005966", "title": "Vue中使用MouseMove事件 获取鼠标坐标频率降低或事件卡顿", "desc": "本文章使用常见的拖拽为案例。 上述所示，testData是测试的数据（用于数据数据循环），testFun是测试的方法（此方法用于拉长函数执行时长）, 以及Style。 我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性…"}, {"id": "6899724135602716679", "title": "教你在vue中使用i18n和require.context中国际化", "desc": "id 是上下文模块里面所包含的模块 id. 它可能在你使用 module.hot.accept 的时候被用到"}, {"id": "6987425001532031013", "title": "Vue构造函数的创建过程", "desc": "上一篇文章 《一口气看完Vue源码》 中对大体流程做了个分析，但由于过程太过冗长导致文件零散，所以可能还不了解 Vue构造函数 中的某些值是哪儿来的。这一章节主要讲的是 Vue构造函数 的创"}, {"id": "6914894879692849166", "title": "wangeditor ios点击无效，不聚焦问题", "desc": "因为手机端要用到富文本编辑器，因为手机上功能操作起来不是很方便，就选了wangeditor使用中遇到一点问题，就是ios系统的时候，点击了编辑器，键盘也弹出了，但是编辑器无法输入，无法编辑，也米有光标"}, {"id": "6917422832926326791", "title": "vuex---七日打卡", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 $\\color{red}{state}是页面状态管理容器对象。$集中存储组件中data对象的零散数据，全局唯一,以进行统…"}, {"id": "6873803103016386568", "title": "Vue 性能优化实践指北", "desc": "因为最近在来到了新的公司，在写新的项目，前端技术栈是vue，就打起了vue的性能优化的主意。 更改下思路，现在认为图片的优化在一个项目起到的作用是最大的，例如将一个原本有着1M或者五六百k的图片优化一下，包括但不限于使用CDN、压缩文件等。 这里的 /* webpackChun…"}, {"id": "6844903895949557768", "title": "Vue探究：精读mixin与mergeOptions", "desc": "mixin在vue框架中的定位是实现逻辑复用的功能，可以类比javascript中的混合继承方式。实现逻辑复用的方式有很多种，比如react提倡的高阶组件、hooks等等，当然，在Vue中官方推荐的且使用频次最高的还是mixin。 本篇文章将会探讨Vue底层如何实现mixin，…"}, {"id": "6979760646837518367", "title": "【vue】根据checkbox选项动态往表格里加数据记录", "desc": "HTML 里定义了一个checkbox多选框及一个table表格： js 的data里定义了html中用到的一些变量： js的methods里实现全选及单选功能，并根据多选框选项动态更新表格数据；若选"}, {"id": "6844903988781907975", "title": "妈妈：我会写Vue-CLI插件了😸", "desc": "通常我们需要将自己的一些配置/公用组件抽出来，以供各个项目使用，在其他使用cli创建的工程可以使用vue add oview的方式自动引入。 一个发布为 npm 包的 CLI 插件可以包含一个 generator.js 或 generator/index.js 文件。插件内的 …"}, {"id": "6844903773228236814", "title": "【译】VueJS 最佳实践", "desc": "经过一段时间对VueJs官方文档以及网上其他相关vue资源的研究，我整理了一份最佳实践和样式指南列表，方便大家写出更正确、更容易让小伙伴接受的vue代码。 以下有几点是一些功能/优化相关，其他是VueJs命名约定和元素排序相关。更多详细信息可以直接到最下方的总结中查看。 当我们…"}, {"id": "6844903896360419341", "title": "使用 Vue Cli3 + TypeScript + Vuex + Jest 构建 todoList", "desc": "Vue3.x 即将来袭，使用 TypeScirpt 重构，TypeScript 将成为 vue 社区的标配，出于一名程序员的焦虑，决定现在 Vue2.6.x 踩一波坑。 类似于 eslint ，对 ts 代码进行检测。 vscode 需要安装 tslint 插件 ，并在 vsc…"}, {"id": "6949530814354817061", "title": "可拖曳的树状结构图", "desc": "最近用vue做了一个小项目--可拖曳的树状结构图。Vue递归组件结构通过Vue的递归组件实现布局使用flex，结构线由CSS伪类实现需要注意的是居中布局，当X轴元素过多导致子元素宽度超出视图，元素居中"}, {"id": "6844903846385287181", "title": "vuejs项目性能优化总结", "desc": "待下项目开发完成。进行打包源码上线环节，需要对项目开发环节的开发提示信息以及错误信息进行屏蔽，一方面可以减少上线代码包的大小；另一方面提高系统的安全性。在vuejs项目的config目录下有三个文件dev.env.js(开发环境配置文件)、prod.env.js(上线配置文件)…"}, {"id": "6844903705540558855", "title": "computed的原理", "desc": "推荐vue/cli的一个工具，零配置直接运行vue文件。 这篇文章分享一下computed计算属性的实现原理。首先分享一个工作中遇到的code review问题！利用3分钟先看一个例子： 在Vue实例初始化时，注意到有一个 initState 的方法。这个方法就是初始化 pro…"}, {"id": "6844903779188342791", "title": "Vue 后台管理类项目兼容IE9+", "desc": "目前系统是用vue-cli@2.0生成的，UI框架使用的是iview,ajax请求使用的是axois,此外就没有什么特殊的npm包了。 IE自动缓存ajax请求结果。 我们可以看到，其针对3个文件加的js代码使用babel-loader，将需要使用babel-loader的np…"}, {"id": "6844903508676706318", "title": "Vue 常用的过渡", "desc": "Vue 常用的过渡"}, {"id": "6844903769923141646", "title": "Vue 源码解析（实例化前） - 初始化全局API（三）", "desc": "这两天的把 1w 多行的 vue 过了一遍，看了一下把剩下在实例化 vue 构造函数前做的所有事情，做了一个总结，写下了这个最终章，文中有哪些问题，还希望大家可以指出。 通过 Object.defineProperties 为 VNode 的原型绑定了对象 prototypeA…"}, {"id": "6919357914989723655", "title": "Vue知识点补缺补漏", "desc": "最近重读了一遍vue2.0文档，感触颇深。在经过大量业务实践之后，回过头再读它们，会带着全新的视角去认识和理解。 另外在读文档的过程中还发现了一些盲区，有的是以前读文档时没注意一略而过，有的是实际业务开发中用的很少而渐渐忘记了，重读之后，感觉豁然开朗，有一种如汤化雪、水到渠成的…"}, {"id": "6921589186537455630", "title": "Vue仿bilibili左右联动导航", "desc": "先看b站的效果，是当页面滚动时左边的菜单到达某个位置后，右侧的导航条对应的导航会高亮，然后点击右侧导航的某项时，页面会滚动到对应的菜单。 说到这呢，其实心里也大概会有点头绪，点击的效果类似tab栏切换，只是需要滚动而已，而滚动页面时则需要记录滚动值来进行右侧导航栏的高亮显示。好…"}, {"id": "6914914159876374535", "title": "vue+TS项目中引入swiper插件 （vue-awesome-swiper） 缩略图", "desc": "npminstallswiper@^5vue-awesome-swiper--save不同的swiper版本下载方式npminstallswiper@^'版本号'不同的vue-awesome-swip"}, {"id": "6862215979745673224", "title": "手写Vue-Router", "desc": "先看平时使用的 Vue-Router ,引入Router , Vue.use 注册插件。直接从这里开始入手 先看vue-router.js文件,先生成一个VueRouter类，然后导入install方法，因为Vue-Router的install方法比Vuex复杂一些，所以将in…"}, {"id": "6844903959153344526", "title": "Vue3.0数据响应式原理", "desc": "ES6 Proxy，整个响应式系统的基础。 新的composition-API的基本使用，目前还没有中文文档，可以先通过这个仓库(composition-api-rfc)了解，里面也有对应的在线文档。 先把vue-next仓库的代码clone下来，安装依赖然后构建一下，vue的…"}, {"id": "6844903516822044679", "title": "基于vue+canvas的excel-like组件", "desc": "vue-grid-canvasInstallNPM/YarnInstallthepackage:ThenimportitinyourprojectUsageSimplyuseitlikeso:##公式"}, {"id": "6993180149105557541", "title": "Vue中 .sync修饰符", "desc": "一、$emit 子组件通过props可以引用父组件的数据，那么当子组件想要修改这个数据时，则可以通过$emit在子组件上修改父组件的数据。 $emit 共接收两个参数 ： {string} event"}, {"id": "6957898982915833870", "title": "前端笔记：Vue2.x的虚拟dom及diff", "desc": "snabbdom 是著名的虚拟 DOM 库，是 diff 算法的鼻祖，Vue 源码就是借鉴了 snabbdom。让我们来学习虚拟dom+diff吧，明白key的重要性以及diff的核心思想"}, {"id": "6844903552813367310", "title": "vue-cli之webpack3构建全面提速优化", "desc": "在这其中，相信很多人都会选择官方的vue-cli初始化工程模板，然后通过引入第三方组件框架和工具的方式进行开发构建，我个人也十分推崇这种做法。但是vue-cli初始化的项目模板毕竟是面向所有开发者的，在兼容性方面会有一定妥协。相信很多人都已经搜索过各类的webpack构建优化文…"}, {"id": "6877554673008689166", "title": "vue源码解析之生命周期原理", "desc": "beforeCreate：最初调用触发，data和events都不能用。可以在这里处理整个系统加载的Loading； created：已经具有响应式的data，可以发送events。可以在这里去发送请求。 beforeMount：在模板编译后，渲染之前触发。SSR中不可用。基本…"}, {"id": "6956472567297212446", "title": "Vue3 性能提升  ｜小册免费学", "desc": "Vue3 发布已经有一段时间了，相信不少人也开始用起来了，但是我为什么一定要学 Vue3 呢？ 性能比vue2.x快1.2～2倍 按需编译，体积比vue2.x更小 组合API（类似React Hook"}, {"id": "6844903726860206093", "title": "探讨把一个元素从它所在的div 拖动到另一个div内的实现方法", "desc": "接到一个新需求，要求用vue搞，主要是拖动实现布局，关键点有：单个组件拖动，一行多列里面的组件拖动， 单个组件可以拖入一行多列里， 单个组件的拖动好实现，关键是把一个组件拖动到另一个类似于表格里面，而且有的情况下还需要限制拖动只能在水平方向，自己搜集资料， 实验，终于搞出来了。…"}, {"id": "6906410985733816333", "title": "从零手写简易Vue3（四）—— Virtual Dom", "desc": "英文全称Virtual Document Object Model，直译：虚拟的文档对象模型。 简而言之，就是使用js 对象去描述一个dom节点，有很多相关的文章描述，这里不再赘述。 我们可以像这样理解一个Virtual Dom。 操作虚拟dom比操作真实dom元素性能好。 将…"}, {"id": "6904483260110209037", "title": "[element-ui源码]element-ui中的神器Popper（使用方法）", "desc": "1.场景描述有一个我们自定义的组件，里面有用transition组件包裹着的弹出框，例如：以上组件主要由el-input和el-cascader-panel组成的组件。el-input内部右侧的“浏览"}, {"id": "6916308672998014983", "title": "呜呼~ vue生命周期原理原来如此 ", "desc": "在讲生命周期原理之前，我们还要先讲一下vue.mixin这个和生命周期有关的api。 通俗点讲，就是对Vue构造函数做一些混入操作，影响每个vue实例。 采用策略模式，不同options（比如data、method、lifeCycleHooks）对应不同合并策略。 通过call…"}, {"id": "6970997826457174052", "title": "Vue：浅析vue.js完整版 和 vue.runtime.js运行时版", "desc": "不同构建版本 UMD CommonJS ES Module (基于构建工具使用) ES Module (直接用于浏览器) 完整版 vue.js vue.common.js vue.esm.js vue"}, {"id": "6844903525948850190", "title": "【轮子】Element UI 的Form, Table, Pagination组件封装来一波", "desc": "造轮子的目的，是为了更爽的开发。当然，大家都在说，不要重复造轮子，只是我没有找到同样的轮子，才自己造了一个。也看到有人封装过 Element 的 Table，只是感觉封装的太浅，不够深入。下面说的这个，可能也是你需要的。"}, {"id": "6844904176732864520", "title": "Vue 2.x使用ant-design-vue 1.6.2版本,jsx写法下弹出组件报ant-portal指令异常解决姿势", "desc": "今天遇到这个问题,我觉得有必要放出来."}, {"id": "6863260665684246542", "title": "Vue创建组件的方式，你知道几种？", "desc": "现在前端开发中使用Vue的估计比较多，组件也是Vue比较核心的内容，也是我们平常开发中接触最多的东西了，那么什么是组件呢？组件可以是小到一个按钮，一个图标，也可以大到一个页面，甚至是一个系统。 最近接手了一个Vue的项目，可以说是学到了不少东西，当然也包括本篇说的“组件”，所以…"}, {"id": "6844903992078630926", "title": "虚拟滚动那些事儿", "desc": "在APP使用hybrid架构后，APP内页面绝大部分都由原生转为h5实现。在处理APP内长列表（如评论列表等）时，若元素数量过多，DOM节点也会随之增加，降低整个页面的性能，所以就有了这个虚拟滚动轮子的应用场景（基于Vue）。 这个轮子考虑的情况十分周全，给出了列表项高度已知且…"}, {"id": "6844903541262254094", "title": "Vue组件实战", "desc": "上面代码中[column, search-key, data-list]都是组件grid-template的属性，[columns,searchQuery,people ]就是使用container传给grid-template组件的数据。 定义全局组件方式Vue.compon…"}, {"id": "6978852182657351694", "title": "Vue 响应式原理模拟", "desc": "模拟一个最小版本的vue 响应式原理在面试中常问的问题 实际项目中问题的原理层面解决 为学习源码做铺垫"}, {"id": "6916041502418272264", "title": "vue3源码阅读笔记(三)---虚拟dom+diff算法", "desc": "这篇文章应该是vue3源码阅读系列的最后一篇了，今天学习的是关于vue3的虚拟dom以及它的diff算法。虚拟dom也是vue里比较重要的一个部分，其实三大框架里，react和vue采用的是虚拟dom，angular采用的还是真实的dom。虚拟dom也是由react先提出的。今…"}, {"id": "6871878204169617416", "title": "Vue 中的添加滚动事件设置", "desc": "在看Vue的事件文档中,测试scroll事件发现如下是行不通的,触发不了scroll事件, 经过一番搜寻未找到原因,不过找到了另外两种在Vue中设置滚动事件。 mousewheel鼠标滚轮,显而易见动动鼠标滚轮就能触发事件,但是用光标拖拽滚动条就不能触发事件。 这种方法既能用滚…"}, {"id": "6844904020293713933", "title": "Vue 原生实现右键菜单组件, 零依赖", "desc": "vue-contextmenujsVue原生实现右键菜单组件,零依赖项目地址https://github.com/GitHub-Laziji/menujs在线演示快速安装npm安装CDN使用参数说明M"}, {"id": "6844904159284559886", "title": "Vue组件实现百度地图弹窗，Vue组件插入节点", "desc": "今天碰巧有位朋友提到了这个问题，记录一下。如今很多人习惯了用主流MVVM框架开发，但是碰到如百度弹窗的这个需求的时候，不知道该如何把vue组件与第三方插件混合使用。其实这类问题都可以通过插入节点的方式实现。 案例是使用的vue框架，话不多说，直接上代码。"}, {"id": "6844904022135029773", "title": "基于Webpack4的Vue移动端开发环境-优化篇", "desc": "本文章上接搭建篇，因为篇幅原因，我把优化单独放一篇文章来讲。 1、如果开发环境和生产环境都使用插件把CSS分离出来成为单独的文件，那么你在开发过程中会发现热更新对CSS不生效，所以解决方法就是分离CSS仅配置在生产环境。给大家埋了个坑！ 我们可以看见那个硕大的index.css…"}, {"id": "6997969480450048031", "title": "vue请求接口并且携带token", "desc": "一、处理跨域问题 1.在vue2.0的config文件夹下面的index.js文件里面或者在vue3.0中新建vue.config.js文件，写入以下代码： 在需要调取接口的方法中通过/apis加上接"}, {"id": "6844903881248342023", "title": "使用VuePress开心地写文档", "desc": "随着工作年限的增加，越来越认同，文档是程序必不可少的一部分。话不多说，今天给大家推荐一个写文档的插件 VuePress，它可以将你写的md文档渲染成静态html页面，现在就可以开心地用md文件地形式来写文档 VuePress有两种使用方式，第一种就是单独使用，第二种就是集成到项…"}, {"id": "6967601192369127455", "title": "325行代码搞懂vue双向数据绑定原理", "desc": "简单vue2双向数据绑定代码，支持解析{{}},v-bind,v-on指令，支持数据监听，mounted钩子回调和methods方法调用，介绍proxy语法。"}, {"id": "6911570536321515533", "title": "Vite源码解析(二)之预优化篇", "desc": "为了更加完整舒适的阅读体验强烈建议跳转到以下地址进行阅读。包含源码解析章节的完整目录https://vite-design.surge.sh/guide/如果觉得该文章对你有帮助，可以到原仓库点个St"}, {"id": "6844903503186362376", "title": "监测数组变动的两种实现", "desc": "我们都知道，vue 的数据监听是通过 Object.defineProperty 实现的，在 getter 中收集依赖，在 setter 中触发变更，当我们通过 this.xx = xyz 的方式对 data 中定义的某个 key 赋值的时候，vue 便能够监测到这个行为，并响…"}, {"id": "6844904006574145549", "title": "【手把手系列之】实现一个简易版vue2", "desc": "项目目录结构与vue2源码一致，通过本项目的学习，你也能对vue的具体实现有一个较全面的了解。相信当你去阅读vue源码时会更得心应手。"}, {"id": "6911324790863167502", "title": "vue3.0 传送teleport", "desc": "我们先看一段代码，功能很简单，模板里有一个按钮，点击按钮，展示一个模态窗口。 整个模态窗口呈绝对定位，left、right、top、bottom 全部给0，背景色为黑色半透明。我们期望的效果，应该点击按钮，模态窗口覆盖整个页面。 现在我们来运行下，我们会发现，其实模态窗口只覆盖…"}, {"id": "6854573212496297997", "title": "学习Vue响应式原理，实现一个小“框架”（1）：思路分析", "desc": "这个同样是写博客的产出，之前在写博客的时候，瞎弄了一个模板引擎，当时就想之后把他优化一下，把 Vue 响应式原理放进去，弄成一个小的可以用来减少我写博客前端代码的组件化的”框架“，于是我就来填坑了。这个只是自己用来学习 Vue2.0响应式原理的一个小项目，代码的实现可能很初级，…"}, {"id": "6844903877716738055", "title": "【Vue原理】VModel - 源码版之input详解", "desc": "我设置了 trim，然后输入的时候，故意多加几个空格，然后失去焦点（触发设置的 blur），再点发现空格不见了。因为失去焦点之后被强制更新了一波"}, {"id": "6844903520504659976", "title": "vue-cli 中使用 TypeScript", "desc": "在 vue-cli 中使用 TypeScript 的一次小结"}, {"id": "6844904103621951501", "title": "让小白顺利启动一个vue项目之避坑小攻略", "desc": "笔者经历了无数的坑，才找到了一招启动一个vue项目的万能避坑方案。如果你在启动一个vue项目的过程中遇到了问题，接下来请务必按照我说的去做！不要偷懒和耍小聪明，不然你就卡在坑里吧！！ 避坑第一点：在完整安装vue-cli之前禁止以大写字母命名你所要安装的目录文件夹和文件。举个例…"}, {"id": "6844903857659576333", "title": "用 Vue 写个移动 SPA 应用", "desc": "最近看了Vue的文档，想着应该写点什么加深下印象，能力有限，就照着葫芦画下吧😂，这次的葫芦是图灵社区移动端页面Github:https://github.com/Jimzjy/ituring-mobi"}, {"id": "6933229421973700616", "title": "Vue源码，你真的看懂了吗（二）", "desc": "变化侦测就是侦测数据的变化。从Vue2.0开始，引入了虚拟DOM，将更新粒度调整为中等程度，也就是一个状态所绑定的依赖不再是具体的dom节点，而是一个组件。当状态变化之后，会通知到组件，组件内部再使用虚拟dom进行比对。这样可以大大降低依赖的数量，从而降低依赖追踪所消耗的内存。…"}, {"id": "6909766010204700679", "title": "Vue源码阅读-从入口开始的运行流程", "desc": "在 main.js 顶部引入 vue 的那一刻就像打开了潘多拉的盒子，Vue.js 内部会做一系列的初始化，首先是Vue.prototype原型对象上绑定一堆方法，接着就是 Vue 构造函数本身绑定全局方法和属性（也可以叫静态方法），在然后入口文件的$mount方法绑定到Vue…"}, {"id": "6875854159728345095", "title": "vue2.0|具体实现篇|数据劫持", "desc": "前言文分【思路篇】和【实现篇】，本文为实现篇，建议看两个窗口同步阅读，或请先阅读-》vue2.0|思路篇|数据劫持第一二阶段是框架搭建，代码见思路篇第三阶段：实现初步数据劫持，监听用户对对象属性的赋值"}, {"id": "6875854698738352142", "title": "vue2.0|思路篇|数据劫持", "desc": "前言文章结构采用【指出阶段目标，然后以需解决问题为入口，以解决思路为手段】达到本文目标，若使诸君稍有启发，不枉此文心力^-^文分【思路篇】和【实现篇】，本文是思路篇，建议看两个窗口同步阅读-》vue2"}, {"id": "6905735221816885261", "title": "小白白仿网易云项目经验总结。", "desc": "问题1：怎么注册一个全局的防抖函数，减少防抖函数的重复引用编写。 2.VUE在生命周期函数绑定了一个防抖函数，但是防抖的函数是一个闭包，在离开该组件时，无法销毁该事件函数。 遗留问题：歌手详情页面的mv页面一刷新，获取的数据就是没有传limit（获取多少条数据）值的。 6.在搜…"}, {"id": "6978290291883114510", "title": "vue初学者入门教程之hello-vue", "desc": "vue初学者入门教程之hello-vue 欢迎关注博主公众号「java大师」, 专注于分享Java领域干货文章, 关注回复「资源」, 免费领取全网最热的Java架构师学习PDF, 转载请注明出处 ht"}, {"id": "6844904042456416264", "title": "vue源码阅读（六）：diff 算法", "desc": "在vue中，首先是将模板编译成虚拟DOM，然后再将虚拟DOM转为真实的DOM。当我们的页面有更新时，仅仅是改变了很小的一部分，要去替换整体旧的DOM的话，势必会影响性能和用户体验的。所以vue中使用diff算法来优化DOM的更新渲染。 在将虚拟DOM转为真实DOM中，有一个很重…"}, {"id": "6844903815561510920", "title": "Vue源码学习之双向绑定", "desc": "上面那段话是Vue官方文档中截取的，可以看到是使用Object.defineProperty实现对数据改变的监听。Vue主要使用了观察者模式来实现数据与视图的双向绑定。 在第一篇数据初始化中，执行new Vue()操作后会执行initData()去初始化用户传入的data，最后…"}, {"id": "6910930799780954119", "title": "从零实现Vue3的响应式库(1)", "desc": "Vue3 和 Vue2 的响应式有很大的不同，由于 Vue3 使用 Proxy 代替了 defineProperty，使得 Vue3 比 Vue2 在响应式数据处理方面有着更好的性能，更简洁高效的处理方式，还实现了诸多在 Vue2 上无法实现的功能。此外 Vue3 的响应式库 …"}, {"id": "6978132798729093156", "title": "bug修复-在表单中做编辑时表格中数据也跟着变", "desc": "在表单中做编辑时，表格中数据也跟着变 原因 这里有一个引用关系： this.roleForm和row指向同一个对象，改了一个，另一个也受影响 上面的这种写法俗称：浅拷贝（把地址赋值给地址）"}, {"id": "6978131760487858207", "title": "【Vue2.x 源码学习】第二十四篇 - 异步更新流程", "desc": "【Vue2.x 源码学习】第二十四篇 - 异步更新流程；为什么要做异步更新；异步更新的实现思路；数据变更缓存的位置；缓存 watcher 更新逻辑；vm.$nextTick 获取更新后的 dom；"}, {"id": "6971008618326196238", "title": "自学Vue Two Day ! ! !", "desc": "今天的学习重点是练习相关项目，只有通过做项目，才能将之前所学的知识融会贯通。里面的一些小项目，都需要学习完之后多敲几遍。"}, {"id": "6971006535509999623", "title": "vue-element-admin引入第三方icon", "desc": "下载完成之后将下载好的 .svg 文件放入 @/icons/svg 文件夹下之后就会自动导入 -----来自官网文档"}, {"id": "6915266832169451534", "title": "vue2.0+Element UI 实现动态表单（点击按钮增删表格及嵌套输入框的增删）", "desc": "动态实现表单的行增减删除，先看下效果如图，点击添加按钮行数下方会新增一行表格，点击删除会删除相应行的表格，表格行内嵌套了input输入框最近刚写了这个项目，所以我们一切以后端请求接口返回数据为例我们这"}, {"id": "6871119267316793358", "title": "vue|源码篇|watch及computed的实现", "desc": "实现computed 更有趣（更难懂。。）"}, {"id": "6844903717964087303", "title": "从源码里面了解vue的nextTick的使用", "desc": "这句话就是说，当我们在父组件设置this.name=name的时候，vue并不会直接更新到子组件中（dom的更新也一样未立即执行），而是把这些更新操作全部放入到一个队列当中，同个组件的所有这些赋值操作，都作为一个watcher的更新操作放入这个队列当中，然后等到事件循环结束的时…"}, {"id": "6844903961321799688", "title": "vue3.0 pre-alpha之reactivity源码解析", "desc": "vue3.0中比较大的改动之一就是响应式的实现有Object.defineProperty改为Proxy实现。阅读之前可以先提前了解下Proxy。 Object.defineProperty对Object侦听需要遍历递归所有的key。所以在vue2.x中需要侦听的数据需要先在d…"}, {"id": "6844904019647791111", "title": "【前端性能优化】vue性能优化", "desc": "v-show，v-if 用哪个？第一个维度是权限问题，只要涉及到权限相关的展示无疑要用 v-if ，第二个维度在没有权限限制下根据用户点击的频次选择，频繁切换的使用 v-show ，不频繁切换的使用 v-if ，这里要说的优化点在于减少页面中 dom 总数，我比较倾向于使用 v…"}, {"id": "6844903956032782350", "title": "记IOS下UIWebView的坑", "desc": "最近做了一个需求，需要做吸顶的效果，在安卓机器和IOS高版本系统下，能改完美实现吸顶效果，但是在低版本的IOS中，却遇到了坑，当我滚动到吸顶的位置的时候，它仍然没有吸顶，只有滚动停止的时候才吸顶。 google分析了原因，有两种原因会导致这种情况。 如果你监听滚动是使用addE…"}, {"id": "6844903887489466382", "title": "深入剖析Vue源码 - 响应式系统构建(下)", "desc": "在之前介绍数据代理章节，我们已经详细介绍过Vue数据代理的技术是利用了Object.defineProperty,Object.defineProperty让我们可以方便的利用存取描述符中的getter/setter来进行数据的监听,在get,set钩子中分别做不同的操作，达到…"}, {"id": "6945330659829219336", "title": "Vue的学习笔记（上篇）", "desc": "一、什么是Vue.js?Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目"}, {"id": "6911570886974390280", "title": "Vite 源码解析最终章之组件渲染篇", "desc": "原文地址：https://github.com/zhangyuang/vite-design组件渲染前面的章节我们说到了本地文件在发送给浏览器之前是会根据文件类型做不同的transfrom代码转换的。"}, {"id": "6966514417101963301", "title": "Vue中使用axios图片上传问题", "desc": "好家伙，自学前后端分离开发一步一个坑，填完后端填前端，当真正扎入现代前端的开发过程中，才发现现在的前端程序员工资高那是应该的，在之前我们后端全干前端的时候只记得，前端就是个切图写个HTML,甚至连交互"}, {"id": "6953424859917451295", "title": "页面不稳定的优化方法 | 创作者训练营第二期", "desc": "前言 在线音乐戳我呀！ 音乐博客源码上线啦！ 目前页面不稳定存在的问题？ 切换不同模块，有一个模块叫“综述”，时显示时不显示，不太稳定。 下面我们分析为什么会存在该问题。 为什么会出现此问题？ 因为该"}, {"id": "6844903641854443534", "title": "【译】使用Vue创建一个Excel插件", "desc": "Translated by FrankZhang. 在这篇文章中，你将会经历一遍使用Vue和Excel JavaScript API 打造一个Excel插件的过程。 全局安装最新版本的Yeoman和Yeoman generator for Office Add-ins 。 使用…"}, {"id": "6844903672107761678", "title": "拜读及分析Element源码-input组件篇", "desc": "输入完成（也就是我们回车或者选择了对应的文字插入到输入框的时刻）触发compositionend事件。 查阅资料后发现，这三个事件不仅包括中文输入法还包括语音识别。 $attrs: 获取到子组件props没有注册的,除了style和class以外所有父组件的属性。（感觉好强!）…"}, {"id": "6844903924239974408", "title": "Vue组件化开发", "desc": "组件化开发：1、组件化开发指的是将复杂的业务拆分为一个有一个的组件2、组件化开发的组件一般来说要灵活3、组件化开发涉及到了Vue的js组件封装，需要掌握Vue基础、Vue实例方法与属性、Vue.ext"}, {"id": "6896487478975922190", "title": "VUE PWA 插件，接收server端消息推送并显示通知", "desc": "server端保存endpoint，push消息时根据特定条件获取要通知的endpoint，然后sendNotification。 service woker接收到server端Push的通知后，当我们点击通知，将消息内容显示在vue组件中。 vue工程需build后部署运行，…"}, {"id": "6844903629497827336", "title": "Yargs写一个新建模板工具", "desc": "以往每次建模块都需要手动创建觉得很繁琐，看了公司项目的有自动化创建的工具，参考了下，是用到Yargs，能够自定义命令、参数来处理问题。通过学习yargs，顺便自己写一个自动化创建模块工具出来。 1. 步骤 2. 目录 ReactTemplat、VueTemplate： 是自定义…"}, {"id": "6844903700687749133", "title": "高级 Vue 组件模式 (8)", "desc": "在第七篇文章中，我们对 toggle 组件进行了重构，使父组件能够传入开关状态的初始值，同时还可以传入自定义的状态重置逻辑。虽然父组件拥有了改变 toggle 组件内部状态的途径，但是如果进一步思考的话，父组件并没有绝对的控制权。在一些业务场景，我们期望父组件对于子组件的状态，…"}, {"id": "6844903505539366919", "title": "Vue代码模块定位插件vue-component-finder介绍", "desc": "vue-component-finder是一款用于Vue项目的代码模块预览与快速定位的chrome插件，对于文件目录繁多的vue项目，可以使用该插件快速查看组件对应的代码模块，以及快速打开IDE修改组件代码。 4.运行项目开发构建npm run dev，打开页面，鼠标移动到组件…"}, {"id": "6844903885539115022", "title": "【Vue原理】Component - 源码版 之 挂载组件DOM", "desc": "开始深入探索它........."}, {"id": "6844903882246602765", "title": "【Vue原理】从模板到DOM的简要流程", "desc": "今天的计划是，探索Vue模板挂载到页面是怎么样的一个流程，内容是指 正常 HTML 标签的模板挂载，这部分内容很重要。"}, {"id": "6844903846322372615", "title": "vue从入门到实战（1）", "desc": "学习vue也有一段时间了，用vue开发过几个项目。为了帮助自己加深对vue的理解，准备开始写一套关于vue的从入门到实战的教程。 vue是一套用于构建用户界面的渐进式框架，vue的核心层只关注视图层。采用了mvvm的方式，实现了数据的双向绑定。 安装vue之前，你需要先安装no…"}, {"id": "6914182634734256136", "title": "Vue 3 组件开发：搭建基于SpreadJS的表格编辑系统（环境搭建）", "desc": "Vue是一套用于构建用户界面的渐进式框架，与其它大型 JS 框架不同，Vue 被设计为可以自底向上逐层应用，更易上手，还便于与第三方库或既有项目整合，因此，Vue完全能够为复杂的单页应用提供驱动。 2020年09月18日，Vue.js 3.0 正式发布，作者尤雨溪将其描述为：更…"}, {"id": "6914197387430871047", "title": "聊一聊Vue2的diff算法", "desc": "前言双端比较算法是vue2.x采用的diff算法，本篇文章只是对双端比较算法粗略的过程进行了一下分析，具体细节还是得Vue源码，Vue的源码在这过程假设当前有两个数组arr1和arr2那么其过程有五步"}, {"id": "6844903904811941896", "title": " Vue源码之响应式原理", "desc": "像Vue官网上面说的，vue是通过Object.defineProperty来侦测对象属性值的变化。 函数 defineReactive 是对 Object.defineProperty 的封装，作用是定义一个响应式的数据。 不过如果只是这样是没有什么用的，真正有用的是收集依赖…"}, {"id": "6844903605544157198", "title": "VBlog 的代码结构, 使用 vue-element, vue-vant 组件开发的纯前端博客", "desc": "VBlog 是一个纯前端, 无须服务器, 实现动态发布的博客 这个帖子主要介绍一下 VBlog 的原理, 使用的组件和代码结构 这是之前发了一个如何快速部署 VBlog 的帖子 https://www.v2ex.com/t/454125#reply6"}, {"id": "6844903881911058439", "title": "【Vue原理】生命周期 - 源码版", "desc": "这个函数会在 beforeCreated 钩子触发前调用，在 Vue.prototype._init 中，下个问题源码有显示。其中的标志位什么时候设置呢，是在相应的钩子触发之后，具体看下面源码 很简单4不4，直接拿到钩子，然后遍历执行，绑定上下文对象。"}, {"id": "6913533127923073037", "title": "vue2.x的双向绑定原理及实现", "desc": "简单概括一下：vue内部通过object.defineProperty方法对data里面的数据进行劫持，把数据的读取转换为setter/getter方法，通过订阅和发布的方式，当数据发生改变通知视图更新。 obj：要在其上定义属性的对象。 prop：要定义或修改的属性的名称。 …"}, {"id": "6971784990392746014", "title": "【Vue2.x 源码学习】第七篇 - 阶段性梳理", "desc": "【Vue2.x 源码学习笔记】第七篇 - 阶段性梳理；通过断点调试，对当前版本数据劫持、数据代理进行了简单的流程梳理；同时，对照 Vue2.x 提供的功能，分析了当前版本数据观测的问题和不足；"}, {"id": "6844903602708807687", "title": "GraphQL 渐进学习 09-graphql-apollo-client-vue-客户端开发", "desc": "* 创建 graphql 客户端 * 封装请求处理 * 基于 token 验证"}, {"id": "6844904144378036231", "title": "Vue - 拉取服务器数据时涉及的复杂跨域问题", "desc": "此篇涉及cors跨域和proxy跨域。 上一篇记录iView UI说到它的Table组件十分常用，练手时模拟了一下将服务器数据渲染上Table，由此遇到了jsonp无法解决的复杂跨域问题，此篇为解决问题的笔记整理。 看很多人练手时搭建服务器都是指定返回某个具体的文件，而这里只指…"}, {"id": "6844903638469443592", "title": "构建你的第一个Vue.js组件", "desc": "我记得当时我拿起CakePHP，我很喜欢，开始使用它是多么容易。这些文档不仅结构合理，详尽无遗，而且用户友好。多年以后，这正是我在Vue.js中感受到的。然而，与Cake相比，Vue文档仍然缺少一件事：一个真实的项目教程。 无论框架的文档记录如何，这对每个人来说都是不够的。阅读…"}, {"id": "6943479008717701133", "title": "web页面性能优化总结及原理解释", "desc": "我们面试的时候很多的问题，其中问的频率比较高的一个就是页面怎么进行性能优化， 我们一般直接回答很多条，然后导致一个问题就是很多的面试官还会继续问，说具体怎么实现你说的这些方法，下面我们就简单的说几个典型的。记住页面性能优化的终极目的还是提高用户体验，所以一定意义上说提高用户体验也..."}, {"id": "6946379116748734471", "title": "拉勾教育管理系统项目实战（一）- 准备工作", "desc": "询问把配置内容单独存放还是存放在package.json，这里选择单独文件。路遇后期管理 13. 项目创建完毕 olo v```````q1a Q 进入目录，cd....... Main.js - 入口文件。里面引入模块创建vue实例"}, {"id": "6883121347074424839", "title": "STUDY-响应式", "desc": "对象属性响应化处理数组响应化处理执行统一响应化处理TEST"}, {"id": "6913011383529373709", "title": "vue ui 的使用", "desc": "vueui创建件项目不用新建文件1.3使用vue的脚手架，配置路由（安装一次就不用再次安装了）1.4使用可视化面板创建项目，vue-ui命令创建gui面板1.5initproject初始化git1.6"}, {"id": "6847902215923826702", "title": "为什么说  Vue 的响应式更新精确到组件级别?(原理深度解析~)", "desc": "我们都知道 Vue 对于响应式属性的更新，只会精确更新依赖收集的当前组件，而不会递归的去更新子组件，这也是它性能强大的原因之一。 我们在触发 this.msg = 'Hello,Changed~' 的时候，会触发组件的更新，视图的重新渲染。 但是 <ChildComponent…"}, {"id": "6844903655993245703", "title": "eventbus-cjs 基于JavaScript装饰器（Decorator）实现的通信库", "desc": "1. 安装 vue-cli 3.x 以默认支持 Decorator。 2. 引入 eventbus-cjs 3. 使用 欢迎大佬们吐槽。"}, {"id": "6971410776045125668", "title": "v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么去优化得到更好的性能？", "desc": "vifhe在vue2源码中找到答案src\\compiler\\codegen\\index.js 从源码中就可以清晰的看出来，vue内部是先对v-for进行处理，然后再对v-if进行处理的。 举个例子，list是一"}, {"id": "6969974971644936206", "title": "vue-vueRouter+route-link + router-view简单实现", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 注：以下是个人理解、如有不对还望指正！ 认识vue-router 正版vue-router的使用 安装 初始化两个页面 目录：/src/route"}, {"id": "6981372395810455566", "title": "Vue3 ref toRef 和 toRefs", "desc": "Vue3 Composition API有添加3个新的概念，ref、toRef和toRefs。花了不少时间研究，写把自己的笔记写下来，之后如果项目里还有更深入的使用，可以更新自己的知识库"}, {"id": "6850418117189828622", "title": "Vue实现Tab标签路由效果，并用Animate.css做转场动画", "desc": "类似于浏览器窗口一样的路由切换逻辑，看着还是挺高大上的，本以为有很多高级的玩意儿，奈何复杂的东西总是由简单的东西拼接而成的，这个功能也不例外。 如何为路由切换添加转场动画。 首先是该组件的模板部分，ContextMenu组件是我们自定义的右键菜单，后面会说到。a-tabs组件则…"}, {"id": "6844903832762204174", "title": "9102年webpack4搭建vue项目（二）", "desc": "好了废话不多说开始撸代码。 babel-preset-env 帮助我们配置 babel。我们只需要告诉它我们要兼容的情况（目标运行环境），它就会自动把代码转换为兼容对应环境的代码。 11. 区分环境引入不同地址 解决更改文件打包时dist文件没有清除，再次打包。 tips: i…"}, {"id": "6844904080402284552", "title": "@vue/cli-单个 *.vue 快速原型开发—遇到的坑", "desc": "@vue/cli为我们提供了很方便的开发方式，但当你不明白一些cli插件内部原理时，遇到问题很可能会到处乱撞，不得要领。"}, {"id": "6844904106415357959", "title": "4k+ 字分析 Vue 3.0 响应式原理（依赖收集和派发更新）", "desc": "前几天写了一篇关于Vue 3.0 reactive API 源码实现的文章，发现大家还是蛮有兴趣对于源码这一块的。阅读的人数虽然不多，但是 200 多次阅读，还是阔以的！并且，也有同学指出了文章存在的不足，就是没有分析 Proxy 是如何配合 Effect 实现响应式的原理，即…"}, {"id": "6844903704781389838", "title": "100行代码实现一个vue分页组件", "desc": "今天用vue来实现一个分页组件，总体来说，vue实现比较简单，样式部分模仿了elementUI。所有代码的源码可以再github上下载的到：下载地址 我们在pageComponentsTest.vue页面引入了pageComponent.vue分页组件。整体思路是通过props…"}, {"id": "6897487792696524808", "title": "Gridsome+strapi实现个人博客", "desc": "最近在学习gridsome，顺带按照视频教程来实现了一个案例并成功部署，在此记录一下学习的过程，以免后面遇到什么坑再回来翻一翻。strapi工程源码 gridsome工程源码 另外，Next.js合Nuxt.js也能生成静态网站，但是他们更多被认为是SSR框架。 这类静态网站生…"}, {"id": "6995036053060976654", "title": "Vue组件化 | 8月更文挑战", "desc": "本文目的是对Vue组件化内容在网课当中学习知识的总结和复习，分享出来或许对新人有益。其中多有不足之处，请多多交流，多谢。"}, {"id": "6844904083124404232", "title": "利用better-scroll实现Vue轮播图组件", "desc": "上一次基于better-scroll实现了移动端纵向滚动的演示。这一次继续利用它实现一个横向滚动——轮播图组件。演示如下： 能够根据异步请求到的图片数据进行轮播图展示。 能够控制它是否自动播放，是否循环播放，自动播放间隔。 能够提示当前播放页。 由于是一个demo，从网上找了几…"}, {"id": "6969882584503287839", "title": "Project(1)-vue3.0+ts+elementUi-Plus", "desc": "基于vue3.0+javascript去搭建一个项目原型，学习并实践使用vue3.0从0到1搭建的过程。"}, {"id": "6995015040805896200", "title": "vue2.x中eventBus的使用及坑点", "desc": "基本使用 eventBus适用于兄弟组件之间传值。因为是小型项目，不需要使用上vuex，于是考虑使用eventBus进行兄弟组件之间传值。"}, {"id": "6995007872274792456", "title": "vue-cli4 使用axios 开发环境与生产环境同时设置代理与baseURL", "desc": "vue.config.js vue-cli 4.x中没有这个文件，在项目根目录下自己新建一个 main.js (或者其他文件下) 还有一种方式是，在根目录下创建两个文件 分别配置地址 然后使用"}, {"id": "6864156289267597326", "title": "深入分析Vue-Router原理,彻底看穿前端路由", "desc": "如今大前端的趋势下，你停下学习的脚步了吗？Vue3.0都Beta了,但是还是感觉有些知识点云里雾里的，小编研究了一下Vue-Router源码整理和总结了一些东西,看尤大大怎么设计的。希望能够对你们有所帮助,如果喜欢的话，可以帮忙点个赞👉。 3.如果喜欢的本文的话，关注小编公众…"}, {"id": "6960970939370569758", "title": "vue系列 -- 生命周期", "desc": "说 vue 的生命周期之前我们先来看个 vue 实例 vue 实例 先看一句话： el 属性，template 属性，render 渲染函数 都可以指明 vue 对象对应的 HTML 元素（DOM 对"}, {"id": "6960965999021522952", "title": "【Vue2.0源码系列】：响应式原理", "desc": "Vue的经典设计思想就是数据驱动，即：数据改变自动更新视图。为了实现这一目标，Vue需要观察数据的变动，当感知到数据变化后，自动执行对应的视图更新操作函数（常见为render function）。由此"}, {"id": "6844903910881099789", "title": "【译】Vue.js 3: 面向未来编程", "desc": "如果你对Vue.js感兴趣，那么你应该知道Vue3马上就要发布了（如果你在将来来读我这篇文章，那我希望他仍然是有用的）。新版本仍在积极开发中，不过所有新功能都能在RFC仓库中找到。其中有一项是function-api，这将会较大地改变开发vue app的“姿势”。 最好的方法是…"}, {"id": "6844903694815723534", "title": "vue开发多页面应用 - hash模式和history模式", "desc": "我们知道vue可以快速开发web单页应用，而且官方为我们提供了自己的应用脚手架vue-cli，我们只需要下载脚手架，安装依赖后就可以启动vue应用雏形。这得益与webpack的依赖追踪，各种资源后缀的"}, {"id": "6954323849919856648", "title": "🌵Vue综合应用-打造一款属于自己的音乐播放器", "desc": "1.音乐播放器案例 歌曲搜索接口： 请求地址：https://autumnfish.cn/search 请求方式：get 请求参数：keywords 响应内容：歌曲搜索结果 2. 开始操作啦！ 2.1"}, {"id": "6868467348513226760", "title": "我在vue是这样玩echart的", "desc": "该模块也是平时工作中所负责的一个模块，目的是为了能够快速生成图表。 该功能模块技术栈使用了vue,而只要使用到插件则是 echart+vue-drag-resize,echart是一款经典的图形生成库,它内置了许许多多的常见图表，用兴趣的朋友也可以上去官网查看。主要是vue-d…"}, {"id": "6885376102596870158", "title": "使用Vue3重构Vue2项目", "desc": "2020年9月18日，vue3正式版发布了，前几天把文档整体读了一遍，感触很深，可以解决我项目中的一些痛点，于是就决定重构之前那个vue2的开源项目。 本篇文章就记录下重构vue2项目的过程，欢迎各位感兴趣的开发者阅读本文。 本来打算使用vite + vue3 + VueRou…"}, {"id": "7002415737511870478", "title": "vue源码分析【3】- vue响应式", "desc": "当前篇：vue源码分析【3】-vue响应式 模板代码 1. 前言 本文的结构依据点，线，面来展开。 点即函数的作用 线即函数的执行流程 面即源码的详细解读 十分不建议直接看源码，很多函数非常长，并且链"}, {"id": "6992855176541372453", "title": "以 iview 组件库为例，Vue2 升级 Vue3 实战", "desc": "前一段时间，我们团队发布了工具：阿里妈妈又做了新工具，帮你把 Vue2 代码改成 Vue3 的 这个工具使用 GoGoCode 来做代码转换的方式帮助 Vue2 的项目迁移到 Vue3，发出后我们收到"}, {"id": "6991620806338052127", "title": "Vue3从0到1开发组件前戏（中）：$emit,$on,$off替代方案｜8月更文挑战", "desc": "在 Vue 3 中，已经不可能使用$on,$emit,$off这些API 从组件内部监听组件自己发出的事件了，所以官方推荐使用第三方库来完成迁移，而在开发过程中，又如何去选择、使用呢？"}, {"id": "6996289418030120968", "title": "vue复习，组件间通信方式有哪些", "desc": "组件是vue最强大的功能之一，每一个.vue`文件都是一个组件。每个组件都是一个组件对象实例，都有自己的上下文、属性和方法，因此组件间的数据是无法共享的。"}, {"id": "6844903760917954567", "title": "vue-cli3 从搭建到优化", "desc": "如果已安装旧版本，需要先npm uninstall vue-cli -g 卸载掉旧版本。 注：项目名称不能驼峰命名。 如果选择 y 会让输入名称，以便下次直接使用，否则直接开始初始化项目。 这样的好处是方便管理、后期维护，还可以和后端的微服务对应，建立多文件存放不同模块的api…"}, {"id": "6956407362085191717", "title": "手写Vue2.0源码（十）-计算属性原理 ", "desc": "前言 此篇主要手写 Vue2.0 源码-计算属性 上一篇咱们主要介绍了 Vue 侦听属性原理 知道了用户定义的 watch 如何被创建 此篇我们介绍他的兄弟-计算属性"}, {"id": "6937750049715650591", "title": "聊一聊 Vue 3 双向绑定是如何工作的", "desc": "本文是 Vue 3.0 进阶系列 的第三篇文章，在阅读本文前，建议你先阅读 Vue 3.0 指令的本质是什么 和 Vue 3.0 $emit 之后发生了什么 这两篇文章。在看具体示例前，阿宝哥先来简单介绍一下双向绑定，它由两个单向绑定组成： 视图 —> 模型事件绑定。 而在表单…"}, {"id": "7005815244983386126", "title": "手写简版vue-router插件", "desc": "可以思考下平常在使用vue-router时经历了那几个步骤？ 步骤一：使用vue-router插件 router.js 步骤二：创建Router实列，router.js 步骤三：在更组件上添加改实例 "}, {"id": "6844903509331181575", "title": "Vue 2.x脱坑记 - 查漏补缺(汇总下群里高频询问的xxx及给出不靠谱的解决方案)", "desc": "一般入门级的无需太早考虑这方面的，只要专心学好Vue的使用姿势便可。 这种情况一般报错信息可以看到是哪个包抛出的信息，一般卸载这个模块,安装重新安装下即可。 官方解释如下: data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。 Vue 在2.2的时候…"}, {"id": "7006550486312550430", "title": "Vue.js 组件 deep 选择器的用法和原理", "desc": "随着代码规模的增长，前端项目中的 CSS 管理成了问题，其中之一就是 CSS 规则冲突。多人协作开发的项目，通过命名约定的方式有时候可能也无法完全避免。对此，不同的前端框架有不同的解决方案。Vue.j"}, {"id": "6844903969152565261", "title": "聊聊 Vue 中 axios 的封装", "desc": "作为一个优秀的 HTTP 库，axios 打败了曾经由 Vue 官方团队维护的 vue-resource，获得了 Vue 作者尤小右的大力推荐，成为了 Vue 项目中 HTTP 库的最佳选择。 虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所…"}, {"id": "6983855808559710239", "title": "【源码学习】Vue源码的敲门砖(目录结构)", "desc": "本文以一个源码初学者的角度介绍了Vue.js 2.6.14版本的目录结构,以达到对Vue源码目录结构的了解,方法后续对于源码的深入学习。"}, {"id": "6891309786290192391", "title": "🚩Vue源码——nextTick实现原理", "desc": "在上一篇专栏讲到订阅者的响应是先把订阅者添加到一个队列，然后再 nextTick 函数中去遍历这个队列，对每个订阅者进行响应处理。大家所熟悉的 Vue API Vue.nextTick 全局方法和 vm.$nextTick 实例方法的内部都是调用 nextTick 函数，该函数…"}, {"id": "6992018506812227597", "title": "温故而知新，浅析 Vue nextTick 原理 ｜8月更文挑战", "desc": "nextTick 在面试中会经常出现，面试官一般通过 nextTick 考验候选人的 Event Loop，或者通过 Event Loop 衍生 nextTick。文章从几个方面浅析了 Vue 的 n"}, {"id": "6999260884631552037", "title": "DevUI中VUE的TSX函数式组件实践", "desc": "最近有幸参与了devui开源组件库的开发，开始接触vue。在使用了vue3 + tsx一段时间之后，感觉非常有趣，且舒适。 在开发过程中，很多时候我需要从网上查找资料，借鉴团队内部的代码，边学边做。总"}, {"id": "7006957257015427079", "title": "Vue3 造轮子时制作 Switch 组件踩的坑（使用 v-model）", "desc": "我在一个组件引入 Switch 子组件时，发现外界无法知道当前状态是开还是关，并且外界无法输入最开始的状态。 怎么办？ 添加 value 属性，添加 input 事件 用 props 让 Switch"}, {"id": "6892295955844956167", "title": "（建议收藏）Vue3 对比 Vue2.x 差异性、注意点、整体梳理，与React hook比又如何？（面试热点）", "desc": "全文14200多字，平均阅读20分钟，坚持看完你会有收获，还望支持，不对的地方望指正，提出建议。 前不久 Vue3的RC 版本终于发布，一直没时间研究，这篇文章我将以下面的结构，为大家整体梳理下Vue3，顺便对比下vue2.x和react hook结合着带大家看看，可能有些长，…"}, {"id": "7005909680304160781", "title": "vue 的两种基础结构", "desc": "vue的两种基本结构用法， 1. 通过 el 作为我们的挂载点 2. 通过render 函数进行渲染"}, {"id": "6921126536313569287", "title": "天天造轮子 - 手写Vue3.0 (建议收藏)", "desc": "前一段时间我写的一篇mini-vue受到大家的欢迎。为了让大家能更好的的理解。我在B站录了视频带大家一起手写。"}, {"id": "6844903564767150094", "title": "交互元素的「:focus-visible」", "desc": "我们开发基于 Vue.js 的百度商业系统的组件库 VEUI 已经快一年了（速度的确有点慢 😂），期间也遇到一些问题，后面可能不定期地发一些文章来说说。 今天讲的是标题中的:focus-visible。"}, {"id": "6844903640977637389", "title": "简单构建 ThinkJS ＋ Vue2.0 前后端分离多页应用", "desc": "最近在使用ThinkJS+Vue2.0写一个简单的项目，该项目分为用户端和管理界面，分别对应vue的两个页面index和admin，用户端、管理界面自身是基于vue构建的单页应用，服务端采用think"}, {"id": "6910795356133392397", "title": "Vue两个版本的区别", "desc": "在BootCDN等网站直接下载或复制链接用 &#x3C;script> 标签引入，Vue 会被注册为一个全局变量。 完整版可以直接在main.js的template标签中写入HTML代码，渲染到视图或修改index.html中的代码都可以直接渲染到视图。 非完整版的main.j…"}, {"id": "6844903512950702093", "title": "实现一个自己定制的函数库-单测编写篇", "desc": "单测的意义就在于当你重构代码的时候，能够避免你的新代码不出现以前解决的问题，虽然它很重要，但是工作中总是会把它忽视，因为太耗时间了。但我们要搭建的函数库大概当然是我们积累的精华代码，它值得我们花点功夫编写单测。"}, {"id": "6844903826130993165", "title": "间歇性笔记--从头过一遍组件的\"三要素\"", "desc": "如果传入的特性与子组件的根元素特性相同时。一般情况下，外部传入的值会替换掉子组件的值。class/style除外,会合并值。 子组件中设置：inheritAttrs: false。但是设置不会影响style/class的绑定;子组件可以通过$attrs获取未绑定的特性； 子组件…"}, {"id": "6844903568923852814", "title": "一个初学者是如何制作移动端B站画友社区的", "desc": "过年前的某天午休，我一边吃饭一边逛B站，不小心手抖点进了B站画友板块，无意中发现这个板块居然是用vue写的。所以就习惯性地打开了f12，所有的请求一目了然。因为之前曾学习过黄轶的音乐课程，就想着自己是否也可以做一个类似的移动端项目，这就是社区app的背景。 ps.为了避免涉及侵…"}, {"id": "6844903705427312654", "title": "[译] 在 vue-test-utils 中 mock 全局对象", "desc": " "}, {"id": "6844903945920331784", "title": "Creating Custom Directives in Vue.js - Vue.js Developers - Medium", "desc": "一篇关于vue directives的教程，清晰、易懂而又全面！"}, {"id": "6902346710769467405", "title": "深入vue2响应式原理,在对象或数组新增属性无响应解决方法", "desc": "前言vue2是如何追踪数据变化形成响应vue2响应的注意点解决方案对象方案一:初始时设定方案二:调用Vue.set方法方案三:创建一个新的对象,替换原对象数组方案一:切割替换原数组方案二:Vue.se"}, {"id": "6844903617485340679", "title": "vue组件之数据增长效果", "desc": "超轻量级，大数小数稳定可控的数据增长效果"}, {"id": "6844903640600150029", "title": "React-Demo 部分重构", "desc": "最近在做从vue=>react的迁移性学习，然后找到了阮一峰老师在15年写的《React入门实例教程》，讲的内容丝丝入扣，里面所透露的思想也让我收获颇多。 关于react的安装不再多表，因为想快速的开始练习。我用的是create-react-APP这个脚手架帮助安装 这只是我的…"}, {"id": "6844903861749022728", "title": "Vue初体验", "desc": "终于结束了麻烦的环境配置，现在正式进入 Vue 体验之旅，Talk is cheap. Show me the code！"}, {"id": "6923904330848272391", "title": "Vue基础准备篇1", "desc": "MVC框架是MVC、MVP、MVVM这3个框架中历史最悠久的。20世纪70年代，施乐公司发明了Smalltalk语言，用来编写图形界面的应用程序，脱离了DOS系统，让系统可视化，不用一直看着黑白的界面 在Smalltalk发展到80版本的时候，MVC框架被一位工程师提出来，MV…"}, {"id": "6844903589794562055", "title": "Hubble - Vue实现的查询github start历史的小工具", "desc": "FeaturesRevealarepository'sstarhistory.HowmanystarshaveIearnedthisyear?MotivationIwanttoknowhowmanys"}, {"id": "6844904024253136910", "title": "Vue.js 源码分析三：深入响应式原理", "desc": "上一节我们讲到了 initState,如果还不熟悉可以参考之前写的一篇文章 《Vue.js 源码分析二：initState 原理》,这一节我们重点聊一下 Vue.js 核心的响应式原理。 当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue…"}, {"id": "6844903972344430605", "title": "浅析MVC", "desc": "EventBus 也就是观察者模式，又被称为发布-订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己 表驱动法是一种编程模式(scheme…"}, {"id": "6916017504833929223", "title": "Vue 两个版本的区别和使用方法", "desc": "其中min和不带min的区别是min不带注释,变量注释更加简洁。 一个版本是完整版vue.js，一个是运行版runtime。其中完整版有compiler，代码体积大，运行版相对独立，但是无法将字符串变成节点。具体区别如下图 打开官网,选择create sandbox 创建一个沙…"}, {"id": "6844903619968368647", "title": "【第1302期】基于 MobX 构建视图框架无关的数据层-与 Vue 的结合", "desc": "前言今日早读文章由@kuitos投稿分享。正文从这开始～mobx-vue 目前已进入mobxjs官方组织几周前我写了一篇文章描述了mobx与angularjs结合使用的方式及目的【第1270期】老树发"}, {"id": "6913119551051792392", "title": "用iview框架制作一个商家的评分功能", "desc": "结构也非常简单使用Rate 组件，然后用v-model来绑定组件选中之后的值。 除了使用Rate以外，我们可以看到上图中有show-text这么一个属性，也就是添加了这个属性之后图左边评分的时候会自动显示文字结果，如上图左边的3星。当然还有其他的属性如下： 我们可以看到既要写h…"}, {"id": "6912796798104895496", "title": "day03上传图片和名称给后端", "desc": "``` ```"}, {"id": "6844903730173722638", "title": "Vue源码解析之数组变异", "desc": "众所周知，在 Vue 中，直接修改对象属性的值无法触发响应式。当你直接修改了对象属性的值，你会发现，只有数据改了，但是页面内容并没有改变。 原因在于： Vue 的响应式系统是基于Object.defineProperty这个方法的，该方法可以监听对象中某个元素的获取或修改，经过…"}, {"id": "6844903636640727054", "title": "web前端基于vue的大型项目分模块开发", "desc": "众所周知，在webpack和单页面应用出现之后，前端工程师从开发到打包已经是一站式解决方案，由之前繁琐的很多个js,css,html文件到现在打包成1个或几个，可以说是一个进步。但是随着项目越来越大，团队的人越来越多，需要开发的模块也越来越多。这样传统的单页面应用已经满足不了项…"}, {"id": "6844903845257183246", "title": "🚀150行代码带你实现小程序中的数据侦听", "desc": "在小程序项目中, 我们的通常会使用到使用到一个全局对象作为各个页面通用的数据存储容器, 将它绑定到app对象后, 就能在每一个页面都自由的操纵这个对象. 然而在实践中, 由于这个对象及其属性不具备响应式条件, 它不能直接参与业务逻辑的编写, 能力仅仅局限于数据储存. 若是在Vu…"}, {"id": "6966851598043594766", "title": "vue组件之间有哪些通信方式？", "desc": "父子组件通信 绝大部分vue本身提供的通信方式，都是父子组件通信 prop 最常见的组件通信方式之一，由父组件传递到子组件 event 最常见的组件通信方式之一，当子组件发生了某些事，可以通过even"}, {"id": "6844904030905303053", "title": "mvvm的概念、原理及实现", "desc": "代码实现来源于珠峰公开课mvvm原理的讲解。此文在此记录一下，通过手写几遍代码加深一下自己对mvvm理解。 model-view-viewModel，通过数据劫持+发布订阅模式来实现。 mvvm是一种设计思想。Model代表数据模型，可以在model中定义数据修改和操作的业务逻…"}, {"id": "6844904025071026190", "title": "简单描述 vue 和其他框架的区别", "desc": "现在vue已经是前端主流的框架了，采用MVVM模式，虚拟dom，diff算法，数据双向绑定，提供响应式和组件化的视图组件。将注意力集中保持在核心库。体积小，性能好，生态系统庞大，发展也很不错。相对应的还有React，Angular，Riot，Ember等框架，那么为什么要推荐使…"}, {"id": "6954632453940051981", "title": "简单粗暴地手撸了一个基于Vue的颜色选择器", "desc": "基于 Vue 的颜色选择器 实现思路 首先需要有颜色显示的小方块，提供一个颜色选择的入口 通过入口，打开一个颜色面板，面板的主要内容有四大部分内容：顶部是左侧显示用户当先选择的颜色，右侧显示默认颜色按"}, {"id": "6844903638477832205", "title": "Vue随笔：Render()函数&JSX", "desc": "由浅入深，从Vue组件的Slot、VNodes讲解Render函数和JSX"}, {"id": "6844904205379960840", "title": "vue是怎么做一个跟踪狂的", "desc": "自己声明了一个对象obj并且修改里面的属性值，发现是可以的，但是试图修改javascript的Math属性值发现是不可以的，这是为何？这里我们需要对对象的属性作进一步的学习。 javascript的属性分为数据属性和访问器属性，而不管是什么类型的属性都好，属性里面都有一个描述。…"}, {"id": "6856606052889788429", "title": "热气冒泡的 Vue 大杂烩面 试题(tu xie zheng li)", "desc": "下一篇学习vue-router。"}, {"id": "6844903834158891015", "title": "高仿头条-广告系统中的级联面板组件", "desc": "根据效果图，首先需要把省市区的数据按列展示在左侧区域，点击父级节点联动展示子级数据，每次点击展开节点的下一级所在的列。 勾选父级节点，子级节点全选，反之全选子级节点，父节点变为勾选状态。每次进行勾选之后，右侧面板展示勾选结果。 这里有一个细节，就是右侧面板展示的选择结果不是简单…"}, {"id": "6943880335063023624", "title": "miniVue3的简单实现-异步更新机制", "desc": "vue框架对于数据的改变是敏感的，其能具体准确知道是哪一个数据改变， 所以vue是能对更新粒度进行控制，在vue1中是细粒度的更新（dom小范围更新），所以内存占用高，性能消耗大。 在vue2以后改变为中等力度的更新，定位在组件级别，一个组件包含大量状态，在一个事件循环周期内，…"}, {"id": "6969496496618078216", "title": "基于vue3组件开发--toast", "desc": "基于vue3+vite+ts组件库简单开发之--toast组件，目前效果比较简单，后续会新增整个组件库的开发流程"}, {"id": "6954625552623861791", "title": "vue样式加scoped后不能覆盖组件的原有样式解决方法", "desc": "为了vue页面样式模块化，不对全局造成污染，建议每个页面的style标签加上scoped，表示他的样式只属于当前的页面，父组件的样式不会泄漏到子组件中。但是scoped也会造成一些额外的负担，如无法覆"}, {"id": "6993679467642093575", "title": "点了登录请求是如何发出去的？", "desc": "表单验证（login/index.vue） utils/validate.js ---> validMobile 调用 api/user.js中封装好的api 找到axios实例：utils/requ"}, {"id": "6844903635885752333", "title": "如何搭建一个功能复杂的前端配置化框架(一)", "desc": "现在很多公司主要业务是c端，拥有巨大用户和流量的同时，b端业务不可或缺，CRM，CMS，运营配置化管理平台，数据可视化平台，各种审批平台。这些系统都有几个共同的特点：需求多，变化快，查询页，列表页，提交页面。而这些页面都是相似的，UI要求低，功能简单。所以我们能不能开发一套配置…"}, {"id": "6873873999521284104", "title": "解析 vue3 实例创建过程源码", "desc": "开始mount挂载创建vNoderender方法渲染vNode创建instance实例开始init初始化优先处理setup上下文优先初始化props和slots然后检测是否有render方法，有则不需"}, {"id": "6870421399455531021", "title": "vue-ssr | 具体实现篇 | 基础实现", "desc": "1. Vue+koa实现简单服务端渲染 2. webpack实现编译Vue项目 3. 返回渲染后的html且css、js功能实现(客户端激活)"}, {"id": "6987007140103716878", "title": "Vue 两个版本的区别和使用方法", "desc": "1. 两个版本对应的文件名 vue.js（完整版） vue.runtime.js（非完整版） 区别如下图所示 完整版里有编辑器compiler，有占位符或其他比较复杂的Vue语句时，可以通过分析DOM"}, {"id": "6844903510455107598", "title": "不吹不黑聊聊前端框架--尤雨溪知乎Live整理", "desc": "最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈"}, {"id": "6844904113432444942", "title": "为什么说 Vue 的响应式更新精确到组件级别？（原理深度解析）", "desc": "我们都知道 Vue 对于响应式属性的更新，只会精确更新依赖收集的当前组件，而不会递归的去更新子组件，这也是它性能强大的原因之一。 我们在触发 this.msg = 'Hello, Changed~'的时候，会触发组件的更新，视图的重新渲染。 但是 <ChildComponent…"}, {"id": "6994330536239955981", "title": "从defineProperty 和 proxy 了解vue2和vue3的响应式原理", "desc": "说到响应式，大家肯定都有了解。这篇文章会带领我们从底层去了解vue的响应式实现原理，并手写一个注册响应式的方法。"}, {"id": "6996181756529344526", "title": "Vue源码（八）异步组件原理", "desc": "Vue中总共有3种异步组件，分别是普通函数异步组件、Promise异步组件和高级异步组件，本篇围绕这三种情况，分别介绍它们的实现原理"}, {"id": "6972099403213438984", "title": "写给vue转react的同志们（2）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "7000642680204034078", "title": "Vue原理从0到1实现变化侦测", "desc": "Vue2原理篇，Vue的介绍（历史），Vue从0到1实现变化侦测，双向绑定原理，依赖收集，发布订阅模式"}, {"id": "6844904069182521351", "title": "2020年大厂面试指南 - Vue篇", "desc": "vue的一些基础知识，以及相关实现原理，一直是面试中比较热门的题目，本文梳理了常见的Vue面试题。系列文章将在公众号「前端小苑」首发，可微信扫描文章底部二维码添加。 1. 组件通信方式有哪些？ 2. 子组件为什么不可以修改父组件传递的Prop？ Vue提倡单向数据流,即父级 p…"}, {"id": "6912702361798443022", "title": "前端面试指南之Vue面试题总结", "desc": "1. Vue 框架的优点是什么？ （5）虚拟 DOM加载 HTML 节点，运行效率高。 2. 什么是 MVVM？ MVVM 是Model-View-ModelView的缩写，是一种脱胎于 MVC 模式的设计模式。 ViewModel 是的作用是同步 View 和 Model 之…"}, {"id": "7006151416565727245", "title": "Vue3中的reactive的用法（基础）", "desc": "Vue3优点： 最火框架，它是国内最火的前端框架之一，官方文档 中文文档 性能提升，运行速度事vue2.x的1.5倍左右 体积更小，按需编译体积比vue2.x要更小 类型推断，更好的支持Ts（type"}, {"id": "6994213974489169956", "title": "Vue学习系列之二、nextTick", "desc": "首先，都2021了，大家对`task`、`mircotask`、`task queue`这些概念都很清楚了。但大家能否回答以下的问题"}, {"id": "6844903903822086151", "title": "0 到 1 掌握：Vue 核心之数据双向绑定", "desc": "当被问到 Vue 数据双向绑定原理的时候，大家可能都会脱口而出：Vue 内部通过 Object.defineProperty方法属性拦截的方式，把 data 对象里每个数据的读写转化成 getter/setter，当数据变化时通知视图更新。虽然一句话把大概原理概括了，但是其…"}, {"id": "6999107562301833223", "title": "人类高质量Vue学习笔记（一）", "desc": "跟着我！跟着我！跟着我！跟着我！跟着我！跟着我！跟着我！跟着我！跟着我！跟着我！跟着我系统化学习vue!"}, {"id": "6985463630653292574", "title": "你不知道的国际化插件vue-swift-i18n", "desc": "vue-swift-i18n RichieChoo/vue-swift-i18n 前言 💌 如今国际化项目已经成为各个公司必不可少的业务项目，关于国际化项目的解决方案也有很多，目前市场上用的比较多的还"}, {"id": "6947703226128924702", "title": "程序员的副业：写了一个专栏《Vue 3企业级项目实战    》", "desc": "五年了，免费文章 → 付费专栏 → 付费视频 → 实体书籍，从一开始的免费文章，之后在各个不同的平台上线付费专栏，并且录制付费视频和写书，每年都在变化和进步。 今年的副业呢，目前为止主要做了两件事：写书和写专栏，后面如果有新的机会也会继续做些其它事情。 关于《Vue 3.0 企…"}, {"id": "6844904004720263176", "title": "「中高级前端」干货！深度解析瀑布流布局", "desc": "2019年终岁尾，最近对布局相关的内容比较有兴趣，在此整理一下和瀑布流相关的使用场景以及多种实现方案。 瀑布流又称瀑布流式布局，是一种比较流行的页面布局方式，专业的英文名称为[Masonry Layouts]。与传统的分页显示不同，视觉表现为参差不齐的多栏布局，最早是由Pint…"}, {"id": "6970660403189645320", "title": "vue引入iconfont的优雅实践", "desc": "前言 本文撰写的初衷是为了向组内成员推行使用svg sprites的方式管理项目的图标,由于实际工作中很多项目仍然采用font class的方式,这样不自觉带来一个痛点. 当项目一期开发完毕后,过段时"}, {"id": "6966041374441504782", "title": "在线参与 Vue Conf 2021 是怎样的体验？", "desc": "没去杭州参加线下还挺遗憾，不过线上定了个大屏 配合好吃的，还挺爽，很有收获 前几天还写了一篇 帮你在Vueconf上收获更大的一篇文章 ，今天写点看完的感想吧 开场 线上59的门票真的是公益大会了，开"}, {"id": "6993223862263480327", "title": "「站在上帝的角度」谈谈Element组件结构-Rate", "desc": "用户就是上帝，站在上帝的角度也就是站在使用者的角度去看待组件。 用过不少优秀的UI库，用的时候美滋滋，轮到自己搭组件库的时候往往会去"}, {"id": "6997694323005341733", "title": "require.context()让VUE开发更简单，get it~", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 最近学习了一些代码优化的东西 挺有意思，学习就是不断打怪升级的过程~ 下面带大家看一下这些“真香定律” require.context()"}, {"id": "6921498669816479758", "title": "🌠一文带你看CSS过渡动画艺术，附带常见动效分享", "desc": "在使用手机时，都会或多或少都会接触到 过渡动画 的使用场景。从最基本的页面切换到一个按钮的点击后的常态都是动画的应用场景。这些动画无时无刻不在 优化 （欺骗）着我们的大脑，加强我们对一件事情的认知度。不同情况下不同的动画操作能够无形中引导用户进行接下来的行为。并给人脑一定反应的…"}, {"id": "6999920801986117668", "title": "vue axios拦截封装(get、post)二次封装axios方法", "desc": "一、axios请求的简易封装 1.下载安装axios：npm install axios --save 2.在/src/static/目录下建立一个http.js 3.在main.js中引入 二、二次"}, {"id": "6999505229045727263", "title": "Vue演变史 —— 1.0（原理刨析、代码实现）", "desc": "本文讲解vue1.0的核心原理，以及我们自己手写1.0版本的Vue。 Tips：后面陆续会出vue2.0、vue3.0的核心原理以及代码实现 课前准备 Object.defineProperty(ob"}, {"id": "6972468512165986340", "title": "从基本使用到原理来一次Vue.js的全面复盘", "desc": "Vue是一套用于构建用户界面的渐进式框架。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支支持类库结合使用时"}, {"id": "6921532337029283854", "title": "在vue用throttle居然这么黑盒？", "desc": "首先我们都知道，throttle(节流) 和 debounce(防抖) 是性能优化的利器。 本文会简单介绍一下这两个的概念，但是并不会对这两个函数再进行老生常谈地说原理了，而是会说它和 vue 之间的爱恨情仇~，但是在步入正题以前，我们得先知道它的一些简介。 函数节流(thro…"}, {"id": "6930539560476606478", "title": "一文搞懂Vue2和Vue3的Proxy", "desc": "hello,大家好，我是德莱问，又和大家见面了。 当在初六抱怨假期为何如此短暂的时候，已然来到了初七。 正文在此开始。 虽然Vue2中对上面代码中对数组的修改方式提供了Vue.$set方法去弥补，但是对于开发人员来说，也是增加了额外的工作量嘛。关于这部分内容Vue2的官方文档也…"}, {"id": "6896748218076364814", "title": "Vue3+TS，写一个逼格满满的项目", "desc": "本文将介绍如何使用Vue3+TS写一个基础项目，有了主要框架概念之后，后续对于应用的开发能更加地得心应手。 3.x版本开始使用函数式编程，因此可以使用链式调用。 规定了数组元素类型是RouteRecordRaw，它可以在定义路由时进行友善地提示。 基本路由定义好后，下面开始写数…"}, {"id": "6914997086295916551", "title": "JSX+Vue3+Vant  实现 网易云播放器(一)", "desc": "对于使用 babel7 的用户，可以在 babel.config.js 中配置。地址:根文件夹/babel.config.js 对main.js的改造。方法之一，有更好的方法。 位置：src/main.js 完成jsx的配置。可以使用jsx了 到此、我们的Home模块算完成了。…"}, {"id": "7002858190958231565", "title": "vue3 <script setup> 引入自定义指令", "desc": "使用<script setup>局部引入自定义指令，记得使用v前缀，加强意图，以免与其他同名变量冲突"}, {"id": "6951564460964347912", "title": "Vue实战技巧Element Table二次封装", "desc": "利用`Vue+Element Table`二次封装出了一套表格组件 开发后台管理项目或者表格多的项目神器 3分钟就可以实现一个表格页面的骚操作，你值得拥有！！！"}, {"id": "6979061382415122462", "title": "写给vue转react的同志们（3）", "desc": "本系列文章将由浅慢慢深入，一步步带你领略react和vue的同工异曲之处，让你左手react，右手vue无忧。"}, {"id": "7004007430828851208", "title": "vue2.6.0 作用域插槽小案例", "desc": "父组件不传模板 父组件规定模板 覆盖掉slot原有的 父组件也可以规定 呈现的内容 详细代码如下：父组件不传模板 父组件规定模板 覆盖掉slot原有的 父组件也可以规定 呈现的内容 详细代码如下：父组"}, {"id": "6992126729607200805", "title": "petite-vue：【源码解析】回归原生，无虚拟DOM的极简体验", "desc": "petite-vue以极简、去虚拟DOM的特点令大家眼前一亮。大家都以为它是不是尤大大推出vue3的mini版（可能看到名字会被诱导），但其实它的存在，也是有它一个独特的意义。它也许会引领我们关于原生"}, {"id": "6999223127137845255", "title": "Vue3从0到1组件开发-系统组件：Drawer抽屉", "desc": "简单说说抽屉 在开篇写的组件中，专门写过一篇基础组件Mask遮罩，这个组件在Web端属于是用的比较少的，所以一般在组件库中不会单独去写。"}, {"id": "7006628117032730632", "title": "Vue3系列--3.父子通信", "desc": "父子通信 父传子 子传父： 依赖注入 使用场景：有一个父组件，里头有子组件，有孙组件，有很多后代组件，共享父组件数据。 孙子把数据直接传递给爷爷"}, {"id": "6992811164426043429", "title": "从0到1实现留言墙", "desc": "留言墙，顾名思义，就是类似一个留言板，上面可以让人留下自己的话。一个以在线便利签的形式，也可以扩展成许愿墙、树洞的一个项目。整个项目很简单，分为两个区域，一个是展示别人留言的区域；一个是写留言的区域"}, {"id": "6993633574297534495", "title": "vue 代理服务器解决跨域", "desc": "在vue.config.js的devServer下配置 所有以api开头的请求都会使用代理服务器去请求真实的服务器 自己请求的那个ajax的url会自动拼接到真是服务器路径的后边 总结就是请求一个aj"}, {"id": "6978623230328176670", "title": "【插件系列】别摸鱼了，来开发一个掘金专属版的chrome天气预报插件", "desc": "Hello，大家好，我是小羽同学，一个平凡而又不甘于平凡的前端开发工程师~本期内容主要是和好兄弟们，通过sulgPlugin脚手架一起开发一个掘金专属版的chrome插件。"}, {"id": "6998417807465529358", "title": "用jsx二次封装你的组件库 ", "desc": "用jsx二次封装你的组件库 这是我参与8月更文挑战的第6天，目前我们在开发前端项目的时候大多都会使用各种UI库来增加我们的开发效率，但是偶尔也会出现组件与我们的预期不符合需要进行改造的情况。如果经历过"}, {"id": "6975407348374306823", "title": "vue+node.js手把手教你搭建一个直播平台（七）实现弹幕轨道功能", "desc": "Hello，大家好，我是小羽同学，一个平凡而又不甘于平凡的前端开发工程师~ 嘿嘿嘿，好兄弟们，是不是很意外，该系列文章突然又更新了！！！！ 其实吧有两个原因。 一是阿宽连小册都出来了，而我的第一篇系列"}, {"id": "6995455015972241444", "title": "Vue首屏加载白屏问题及解决方案", "desc": "首先说一下首页加载为什么会白屏? 先说下 SPA 单页面的加载过程 首先就是 html ,也就是 FP 阶段 然后是静态资源css，js，之后解析js，生成HTML,也就是 FCP 阶段，css,js"}, {"id": "7007235040526467085", "title": "升级vue及elementPlus", "desc": "遇到一些莫名其妙的问题时，升级vue版本和所使用的UI框架版本是非常有用的 1，升级vue （官方提供的命令） 对于 Vue 3，你应该使用 npm 上可用的 Vue CLI v4.5 作为 @vue"}, {"id": "6844903657297674254", "title": "一个vue加egg.js的博客", "desc": "之前自己的博客是用hexo做的，后面想做一个有后台的博客就打算用vue加node来试试，于是就有了这个博客。 安装MongoDB数据库和Node.js环境。"}, {"id": "6918270595771662349", "title": "vue的响应式原理", "desc": "在vue中，通过发布订阅的模式来监听数据状态的变化，通知视图进行更新。那么，是在何时进行订阅，何时进行发布，这就要用到数据劫持。"}, {"id": "6992168893334683656", "title": "Part1 - Vue2 基础篇1", "desc": "vue基础篇1，包括应用的组成、插值模板、内置指令、绑定类名、绑定样式等知识点及基础篇1的脑图大纲总结。"}, {"id": "6844903602117410829", "title": "持续更新的前端资源图谱", "desc": "前端资源图谱，更好的管理自己的技术栈。日常工作中可随时翻阅，平日休息中可随时学习。工作生活必备的利器。"}, {"id": "6989445910174367781", "title": "Vue2不同组件注册方式导致的生命周期问题", "desc": "vue $refs undefined 生命周期 mounted created 组件注册方式 ref"}, {"id": "7003624171942969352", "title": "Vue2组件间通信---子传父值自定义事件", "desc": "Vue2中组件间通信系列，本篇是关于子组件向父组件传值的介绍，这里我会用通俗的语言帮助大家理解自定义事件"}, {"id": "6844903669809283086", "title": "什么时候该用vuex?", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化 很简单的道理，你总不能什么时候都使用Vuex吧。 我已经用vue+vuex进行起码四五个项目的编写和上线了。以下是我一些个…"}, {"id": "6986148303071084580", "title": "[Element Plus 源码解析] Badge 标记", "desc": "一、组件介绍 官网链接：Badge 组件 | Element (gitee.io) Badge组件常用于信息提示，如显示有xx条的通知/待办。 1.1 属性 value: number|string类"}, {"id": "6844903918472790023", "title": "Vue异步更新 && nextTick源码解析", "desc": "1. Vue响应式原理-理解Observer、Dep、Watcher 2. Vue响应式原理-如何监听Array的变化 3. Vue响应式原理-如何监听Array的变化？详细版 4. Vue异步更新 && nextTick源码解析 当我们触发这个事件，视图中的a和b肯定会发现一…"}, {"id": "6998318777368576036", "title": "Vue2 数据响应式", "desc": "Vue2 数据响应式原理 数据响应式，是Vue 最独特的特性之一。\"响应式\"，指当数据(model)发生变化时，页面(view)自动更新。 getter 和 setter 要理解 Vue2 的数据响应"}, {"id": "6971438110358011934", "title": "vue2.6踩坑之vchart的使用（图表）", "desc": "这是我参与更文挑战的第8天，活动详情查看： 更文挑战 介绍 vchart 官网地址 图表种类如下图： 引入 官网上有非常多图表类型给我们选择，我们在main.js中按需引入即可,如折线图： 使用 如果"}, {"id": "6989492187641675789", "title": "VUE-H5 微信网页分享配置", "desc": "Vue-H5 微信网页分享配置 一、微信公众平台配置 按照官网教程在微信公众平台配置安全域名 二、引入JS文件"}, {"id": "6844903619846897672", "title": "csv和excel读取和下载", "desc": "同时，使用FileReader对象，web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容，可以使用File对象或者Blob对象来指定所要处理的文件或数据。FileReader 提供了如下 几个方法。 readAsText(file,encoding)：以…"}, {"id": "6844904198740377613", "title": "【进击的Vue(三)】使用这些让你快速开发", "desc": "本文主要讲以下内容，会尽可能的通过简短的例子以更清晰的方式展示出来。less的安装使用，注入less全局模块；mixin分发 Vue 组件中的可复用功能；axios封装进行模块化请求接口；vue-router懒加载、路由拦截；filter过滤器，格式化文本。 less是一门cs…"}, {"id": "6981274541112688670", "title": " Vue常用特性", "desc": "Vue常用特性 表单基本操作 获取单选框中的值 通过v-model 获取复选框中的值 通过v-model 和获取单选框中的值一样 复选框 checkbox 这种的组合时 data 中的 hobby 我"}, {"id": "6986157152612122660", "title": "[Element Plus 源码解析] Breadcrumb 面包屑", "desc": "一、组件介绍 官网链接：Breadcrumb 组件 | Element (gitee.io) Breadcrumb组件用于显示当前页面的路径，快速返回之前的任意页面；该组件需要与Breadcrumb "}, {"id": "6917425818566295565", "title": "一次Vue代码bug定位", "desc": "下面bug如何找到问题出在哪里？之前，如果报错的变量不是普通的单词，还可以在代码里面搜索，看看哪里写的有问题。但是现在的变量是i，如果搜索的话，代码里面有几十个位置，很难找到错误的地方。那么这种情况如"}, {"id": "6975834636177899556", "title": "基于element- plus 二次封装el-table", "desc": "一般在后台管理系统的开发中，都会遇到很多table，但每一次都去引入el-table就会导致代码十分冗余，代码效率也会低下，所以基于组件做一下二次封装成自己需要的组件就十分有必要。 拿element-"}, {"id": "7002033828172660766", "title": "VUE 3 造轮子：纯洁版", "desc": "1.搭建环境 进入某一个文件夹 cd Jirengu 全局安装 yarn global add create-vite-app@1.18.0 创建一个vite app cva bad-cat-1 进入"}, {"id": "6844903606676799501", "title": "深入理解Vue的computed实现原理及其实现方式", "desc": "Vue的computed实现相对于watch和data来说比较难以理解，要真正的理解computed的工作方式，你需要深入理解Vue的双向数据绑定原理和实现方式。 如果以上三个问题你都已知，你可以忽略下文了，若未知或一知半解，请抱着学习的态度看看别人的理解。 以下大部分代码摘自…"}, {"id": "6931160242528976910", "title": "vux-form——一个base vux的form解决方案", "desc": "vue移动端有很多优秀的组件库，其中个人开发者airyland开发的开源组件库vux在众多公司级别的开源组件库中独树一帜，拥有高达17.4k的star。 但是在业务开发中使用vux存在一个长期的痛点：移动端表单的需求很常见，而vux缺少一个统一管理表单项的组件。因此vux-fo…"}, {"id": "6964294198321233927", "title": "Vue响应式实现原理解析", "desc": "Vue响应式实现原理涉及到Object.defineProperty的getter和setter、依赖跟踪（订阅发布模式）、实现迷你观察者。"}, {"id": "6919663315857702925", "title": "开发问题小Tips集锦", "desc": "原因:在数学中，e是极为常用的超越数之一 它通常用作自然对数的底数，即：In(x)=以e为底x的对数。e=2.71828"}, {"id": "6874842367792185351", "title": "写vue的尽量按照规范来", "desc": "官方的风格指南。 本文按照自己的逻辑，稍微简化了。规范的好处是，排雷更加容易，踩雷更加艰难，项目更赏心悦目。 建议先看完官方详细的文档，然后再顺带看看这篇回忆总结下。 这样做可以避免跟现有的以及未来的 HTML 元素相冲突。比如以前不小心写了个masker的组件，然不生效。 在…"}, {"id": "6844903665254268936", "title": "聊聊毕业设计系列 --- 系统实现", "desc": "在上一篇文章中，主要是对项目做了介绍，并且对系统分析和系统设计做了大概的介绍。那么接下来这篇文章会对系统的实现做介绍，主要是选择一些比较主要的模块或者说可拿出来与大家分享的模块。好了，接入正题吧~~ 服务端这边使用的是Express框架，数据库使用的是MongoDB，通过Mon…"}, {"id": "6847902219027611662", "title": "webpack+Vue实现轮播图", "desc": "本来如果只是想做个轮播图的话不太需要这么麻烦的构建webpack项目，但是我的目的不是只做个轮播图这么简单，主要是想用webpack搭建一个vue项目，然后在里面实现了一个轮播图组件。在这个框架的基础上还可以实现很多其他的功能，大家可以下载源码自己往里面加东西。这里我提供本项目…"}, {"id": "6844903846259621902", "title": "[译] 理解 Vue.js 中的 Mixins", "desc": "本文是针对 Vue 中的 Mixins 的实用性介绍，探讨了 Mixins 为何重要，以及如何在工作流中使用。 Vue JS 中的 Mixins 基本上是定义一大堆逻辑的地方，它们以 Vue 规定的特殊方式存储，它们可以反复使用来为 Vue 实例和组件添加功能。因此，Vue m…"}, {"id": "6978873132450856973", "title": "根据不同命令打包不同的配置文件——vue", "desc": "这是我参与更文挑战的第7天，活动详情查看：更文挑战 第1步：安装cross-env cross-env能跨平台地设置及使用环境变量 大多数情况下，在windows平台下使用类似于: NODE_ENV="}, {"id": "6844903830723756045", "title": "Vue-Cli3插件实战一：vue-cli-plugin-dll", "desc": "vue-cli3版本的发布距今已经过了大半年，前后迭代了50多个版本，终于趋于稳定；这里不得不得感叹vue开源团队对vue技术栈的倾力贡献，使得vue社区的前端工程化实践又向前迈了一大步。相比vue-cli2版本的'大锅混'，三版本的插件系统卓识令人惊艳了一把，因此组内也在第一…"}, {"id": "6977162981708660773", "title": "组件事件", "desc": "组件事件 什么是组件事件？ 在组件里抛出的自定义事件，参数是自定义的事件名称和事件的数据，写法如下： 出现的意义是什么？ 用于自组件向父组件传递数据。在vue里，数据传递是单向的，子组件不可改变父组件"}, {"id": "6844903997090824205", "title": "Vue 3.0 响应式方法解析", "desc": "前一段时间，尤雨溪公布了Vue 3.0 的核心部分代码。我们趁着目前代码量还比较少，来赶紧学一下。 reactivity ：Vue3.0的数据响应式系统，我们肯定都听说 Vue3 摒弃了 Object.defineProperty，基于 Proxy 实现了一套响应式系统，就是这…"}, {"id": "6978812404788363301", "title": "Vue组件基本知识", "desc": "Vue组件 组件实质就是一个可复用的模板，创建一个拥有指定功能的组件，在任何需要使用的时候，都可以直接拿来使用。 组件注册分为全局注册和局部注册。全局注册的组件可以在任何Vue的实例中使用。而局部注册"}, {"id": "6905974121570828301", "title": "Vue组件通信", "desc": "1. props 2. sync/update 3. provide/inject 4. $attrs/$listeners $attrs 包含了父作用域中不作为 prop 被识别 (且获取) 的属性绑定 (class 和 style 除外)。 5. $children/$pa…"}, {"id": "6844903635781058573", "title": "👍解说vue开发过程中的“深坑”，HeyUI组件库开发总结", "desc": "首先，这一篇，说的是vue开发中的“深坑”，并不是有一些文章写的“vue安装失败，模块找不到，或者vue-router如何定义”等等基础错误。 然后，这一篇需要阅读者对vue有着基本的了解，并且使用过，如果你对vue还不懂，建议先收藏，以后再看。 这一篇主要说的是vue使用中遇…"}, {"id": "6844904134974373896", "title": "车型参数配置页的实现与优化（dom过多造成页面卡顿，优化dom）", "desc": "最近做个车型参数配置页，页面长下面这样，包括输入框，单选多选，下拉框，横向配置功能。 首先就是优化后端返回来的数据，把所有无用的属性删除，想法很简单，以为能减轻vue监听的数据量，但是现实啪啪打脸，并没任何效果，思考了一下，vue框架应该不会监听view层没有用到的model,…"}, {"id": "6906010564175069191", "title": "vue 组件业务逻辑复用", "desc": "前言个人学习过程中的记录，便于后续的复习使用，如果有错误或者更高的方法，希望看到的大佬指出组件业务逻辑复用常用的有三种，mixins，HOC(高阶组件)，Renderless组件MixinsMixin"}, {"id": "6844903856275456013", "title": "Vue-CLI and Leaflet （4）添加tooltips 和 popup", "desc": "上一篇文章中分享了点、线、面的添加，下一步将为大家分享基础的信息绑定。 ​ 在地理信息系统中经常可以看到用户浏览地图时，鼠标移动至地图上某个目标或者点击地图上某个目标，地图都会有相对应的响应。通常当鼠标移动到某个特殊位置上时，首先地图自动显示出一个框关于此位置上的一些简要的…"}, {"id": "6989045709555105800", "title": "vue引入音乐播放器插件", "desc": "欢迎大家进群，一起探讨学习 微信公众号，每天给大家提供技术干货 博主技术平台地址 博主开源微服架构前后端分离技术博客项目源码地址，欢迎各位star vue引入音乐播放器插件 main.js引入 测试"}, {"id": "6844903504486596615", "title": "瀑布流组件初探（Vue.js）", "desc": "瀑布流对于图片的展现，是高效而具有吸引力的，用户一眼扫过的快速阅读模式可以在短时间内获得更多的信息量,而瀑布流里懒加载模式又避免了用户鼠标点击的翻页操作，瀑布流的主要特性便是错落有致，定宽而不定高的设计让页面区别于传统的矩阵式图片布局模式，巧妙的利用视觉层级，视线的任意流动又缓…"}, {"id": "6844904100966957069", "title": "【面试题解析✨】Vue 的数据是如何渲染到页面的？", "desc": "面试的时候，面试官经常会问 Vue 双向绑定的原理是什么？我猜大部分人会跟我一样，不假思索的回答利用 Object.defineProperty 实现的。 其实这个回答很笼统，而且也没回答完整？Vue 中 Object.defineProperty 只是对数据做了劫持，具体的如…"}, {"id": "7003900131682549774", "title": "vue-drag-resize拖拽组件实际应用", "desc": "介绍 vue-drag-resize是一个用于拖拽，缩放的组件 因为项目上有个自由拖拽的小需求，自己纯js写又有点小麻烦，就花了点时间寻找到这个小组件，根据网上搜索到的使用教程，都是照着文档翻译了一遍"}, {"id": "6928468842377117709", "title": "手把手教你使用Vuex，猴子都能看懂的教程", "desc": "如图所示，它是一个程序里面的状态管理模式，它是集中式存储所有组件的状态的小仓库，并且保持我们存储的状态以一种可以预测的方式发生变化。对于可以预测，现在我不多做说明，相信在看完这篇文章之后，你就会有自己的理解。 对于第一个问题，假如是多级嵌套关系，你可以使用父子组件传参进行解决，…"}, {"id": "6929808677561958407", "title": "给大家推荐一款Vue组件切换动画库", "desc": "hello,大家好，我是德莱问，又和大家见面了，年后开工在即，新的一年新的气象，祝大家新年快乐，牛年大吉。 目前共支持24种动画类型，具体选择哪种动画类型，可以参考例子codesanbox,多试试，说不定有意外惊喜哦。下面放几个例子给大家看看："}, {"id": "6970693669972082701", "title": "Electron+Vue3 MAC 版日历 开发记录(6)——黄历功能", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "7006228411404255262", "title": "vue项目首屏加载缓慢项目优化粗略记录", "desc": "vue 项目首屏加载缓慢，优化方法记录。 1、静态文件压缩 2、打包配置不生成map文件 3、同样是打包时配置生成压缩文件 4、路由懒加载"}, {"id": "7004780859727282184", "title": "Vue 3.0 vs. React Hook", "desc": "目前三大主流前端框架中，Angular 作为单页应用的先行者，虽然目前市场占有份额正在被 Vue 和 React 慢慢抢占，但是不可否认的是，Angular 为后来的 React 和 Vue 提供了很"}, {"id": "6882198352549642254", "title": "2020年，我是如何从一名Vueer转岗到React阵营", "desc": "大家好呀，我是wangly19。一名专注于Vue的前端萌新。 国庆后如约和大家见面了。经历了金九银十和十一长假后的我也要开始努力写文章了，这次主要是分享下我是如何快速横切到React技术栈。如果看文章的你正在学习React或者说也是转换技术栈，那么本文一定能够给你有一些启发和帮…"}, {"id": "6859775573837742087", "title": "Vue开发中的一些常见套路和技巧（上）", "desc": "大家好呀，我是 wangly19 ，这次文章主要是来总结下我在使用 Vue.js 总结出来的一些套路，可以做一些查缺补漏。如果还有有趣的小技巧，也可以在评论区给我留言哦，让我也学习一下呀。本文纯文字，无图，建议在地铁坐车的时候看，大部分你可能知道，但也有没见过的。细心查缺补漏以…"}, {"id": "6997285990830178341", "title": "[ 浅谈前端 ] Vue基本使用", "desc": "这是我参与8月更文挑战的第17天，活动详情查看： 8月更文挑战 Vue & jQuery jquery的定位是获取元素完成特效 vue的定位是方便操作和控制数据完成特效 VUE介绍 vue.js是目前"}, {"id": "6982783563288543269", "title": "vue3 根据json生成表单简单实现 主要是基于render函数和tsx", "desc": "json生成表单主要是解决一些业务上的烦恼,可以用json来描述一个表单组件,主要是解决业务上的一些需求和二次封装的能力"}, {"id": "6995061164572950564", "title": "Vue 3.2正式发布，拿来吧你", "desc": "8 月 5 日，Vue.js 作者尤雨溪在博客上宣布 Vue.js 3.2 版本正式发布。 本文的相关内容为中文翻译。 我们很高兴地宣布 “Vue.js 3.2” 的发布！"}, {"id": "7002199259642593310", "title": "vue el 和 data的两种写法", "desc": "这是我参与8月更文挑战的第29天，活动详情查看:8月更文挑战 el 第一种写法 我们前几篇文章都是通过 el 使 实例和容器进行绑定的。 第二种写法 我们现在不用 实例中的el了。我们先打印一下vue"}, {"id": "6986838175062687752", "title": "Vue源码分析——slot是如何渲染的", "desc": "今天主要分析 Vue.js 中常用的 Slots 功能是如何设计和实现的。 本文将分为普通插槽、作用域插槽以及 Vue.js 2.6.x 版本的 v-slot 语法三部分进行讨论。"}, {"id": "7002554719897927694", "title": "vue双向绑定", "desc": "什么是双向绑定 我们先从单向绑定切入单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新双向绑定就很容易联想到了，在单向绑定的基础上"}, {"id": "6844904185910018062", "title": "qiankun 微前端方案实践及总结", "desc": "1. 复用别的的项目页面 如果我们的项目需要开发某个新的功能，而这个功能另一个项目已经开发好，我们想直接复用时。PS：我们需要的只是别人项目的这个功能页面的内容部分，不需要别人项目的顶部导航和菜单。 一个比较笨的办法就是直接把别人项目这个页面的代码拷贝过来，但是万一别人不是 v…"}, {"id": "6916304048505225223", "title": "Vue + TypeScript + Element-ui + Axios 搭建前端项目基础框架", "desc": "利用 Axios 提供的 CancelToken 结合队列来实现。（队列中存放的是当前请求的信息（自定义的一些规则，来判断是否是同一个请求）和取消函数） 类似这种取消请求，其实服务端是有收到的，只是浏览器层面做了一层处理等不到响应而已。 为了方便开发过程中减少模版的编写，将表格…"}, {"id": "6979282880690126885", "title": "[项目篇]vue3+ts  canvas实现贝塞尔曲线波浪特效 - 第四天", "desc": "这是我参与更文挑战的第20天，活动详情查看：更文挑战 效果图 引经据典 原文：贝塞尔曲线原理 原理这里就不介绍了，好长啊= = 直接上代码 1. 先写骨架和确定canvas 写一个canvas，并确保"}, {"id": "6884991023811215374", "title": "Vue3 来了，Vue3 开源商城项目重构计划正式启动！", "desc": "我打算用 Vue3 写一个商城项目，目前已经开始着手开发，测试完成后正式开源到 GitHub，让大家也可以用现成的 Vue3 大型商城项目源码来练练手。 主要用到的技术栈为 Vue 和 Vant，版本分别为 Vue2.6.10 和 Vant 2.5.0，至今为止，已经开源到 G…"}, {"id": "6844904116603486221", "title": "Vue 进阶必学之高阶组件 HOC", "desc": "高阶组件这个概念在 React 中一度非常流行，但是在 Vue 的社区里讨论的不多，本篇文章就真正的带你来玩一个进阶的骚操作。 先和大家说好，本篇文章的核心是学会这样的思想，也就是 智能组件 和 木偶组件 的解耦合，没听过这个概念没关系，下面会详细说明。 这可以有很多方式，比如…"}, {"id": "7002874867167019045", "title": "vue admin template最详细的动态菜单路由权限改造+按钮权限", "desc": "第一步：git命令拉取代码 第二步：剔除烦人的eslint及删除多余路由 执行npm i下载依赖自动运行： 可以看到左侧菜单栏只剩dashboard一个菜单 第三步：配置跨域 第四步：修改生产和开发环"}, {"id": "6844903989151006728", "title": "Vue Cli3.0可视化构建工具——Vue UI", "desc": "安装了最新的Vue CLI。打开Terminal，输入："}, {"id": "6844904077793591304", "title": "使用webpack的require.context按需打包", "desc": "手工import所有需要打包的组件；目前大部分前端 ui 库都使用的这种方式，在入口文件处导出所有的组件。 我的工程目录下所有的组件都存放在packages目录下。每一个组件又分为: 1. 手动使用 import 逐个引入 2. 使用 lerna 管理 使用 lerna 管理，…"}, {"id": "6844904106549592071", "title": "Vue+Typescript起手式", "desc": "TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，TypeScript 在 JavaScript 的基础上添加了可选的静态类型和基于类的面向对象编程。 其实TypeScript就是相当于JavaScript的增强版，但是最后运…"}, {"id": "6844903834003701768", "title": "Vue源码: 关于vm.$delete()/Vue.use() 内部原理", "desc": "vm.$delete用法见官网。 在ES6之前, JS没有提供方法来侦测到一个属性被删除了, 因此如果我们通过delete删除一个属性, Vue是侦测不到的, 因此不会触发数据响应式。 见下面的demo。 然后查看del函数位置, vue/src/core/observer/i…"}, {"id": "6844903918829305863", "title": "让你也看懂某开源平台的vuex模块化应用的源码", "desc": "首先我这篇分享基于某开快速开发平台的源码，大概花了2天专门整理了一下它前端项目中的vuex应用模式，但是我要先给你们讲个我觉得蛮搞笑的事情，你们会很感兴趣。 首先，这个框架不是我选的……，我只是被选用来填坑，当然本人不介意，该框架开源4个月，但是官方文档从开始到现在几乎是无法吐…"}, {"id": "6844903887413985293", "title": "vue中父子组件通信", "desc": "vue的设计理念是单向数据流，不建议在子组件直接更改父级的数据。 未在父组件data中声明的对象属性，子组件无法获取更新内容。 数组的变化和更新，取决于vue重写数组方法是否有实现数据监听功能。vue有两种观察数组的方法：变异方法(push、pop、shift、unshift、…"}, {"id": "6930231448322441224", "title": "vue使用elementui框架点击对应复选框，el-table表格呈现对应数据（前端处理）", "desc": "前段时间项目中有一个小功能，就是上面一排复选框，下面是一个表格，点击对应复选框，发请求获取对应的内容，呈现到页面上。其实很简单，但是因为临近过年，后端的同事要提前回家相亲（大龄剩男的悲伤），所以后端同事就说，要不我把所有的数据都给你，你自己做存储，点那个复选框，就呈现那个对应内…"}, {"id": "6844903614582882311", "title": "10个为您的下一个Web应用程序使用Nuxt.js的理由", "desc": "如果你是一个Vue开发者，可能你听说过Nuxt.js。但是你可能不太知道关于它的所有炒作。你可能会问，为什么我要在一个框架里面再用一个框架，Vue已经让开发JavaScript应用变得很容易了，Nuxt.js背后的想法是什么？ 这篇文章，我们将讲述为什么要在你的下一个项目中使用…"}, {"id": "6881491383929192455", "title": "都用TypeScript，还不来分析Vue3源码(第一期)", "desc": "baseCreateRenderer最后implementation出了vnode的diff算法生成正式DOM的方法，这个方法调用了rendererOptions的所有关于节点的操作通过diff算法，里面还包含了一些热更新的方法。这里暂不细讲 我们打印app的话，可以在其实例上…"}, {"id": "6844904062970757134", "title": "Vue export import 导入导出的多种方式与区别", "desc": "部分导出和部分导入的优势，当资源比较大时建使用部分导出，这样一来使用者可以使用部分导入来减少资源体积，比如element-ui官方的就推荐使用部分导入来减少项目体积，因为element-ui是一个十分庞大的框架，如果我们只用到其中的一部分组件， 那么只将用到的组件导入就可以了。…"}, {"id": "6844903535411200007", "title": "express，koa2等node处理前端上传图片并保存到文件中", "desc": "在另个项目中，同样的代码却报错了... 我也是一脸懵逼"}, {"id": "6844903715564945416", "title": "Webpack devServer.proxy反向代理地址模糊相似规则问题", "desc": "在开发模式下请求数据多少会涉及到它里面提供的devServe.proxy即Node.js的反向代理中间件。 Node.js代理很简单。轻松的配置代理服务器中间件连接，快递，浏览器同步以及更多。 假设当我们访问/api135/abc时，也就是真实地址B服务器/api/abc。 此…"}, {"id": "6962145229910573070", "title": "中等难度Vue 面试题+详解答案", "desc": "中等 1 Vue2.0 响应式数据的原理 整体思路是数据劫持+观察者模式 对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已"}, {"id": "6899682555067531278", "title": "vue3.0新特性", "desc": "动机：组合式api更好的逻辑复用与代码组织。 1. setup函数 setup函数是vue3中所有api的入口。 2. ref()和reactive() ref()和reactive()定义变量的时候使用。 定义单值。 获取单值。 定义响应式对象。 3. toRefs() 解构…"}, {"id": "6844904048479436814", "title": "一个高性能的 Vue 高德地图组件库", "desc": "这个想法来源于之前开发的一个项目，该项目需要在 zoom 16 的级别下渲染 (100 * 100) 的小方格，使用高德地图的多边形覆盖物 Polygon 进行渲染，在 mac 13 寸屏幕下渲染 1k+，在外接 27 寸(不太记得多少寸了)显示屏下需要渲染近 3K 的覆盖物。…"}, {"id": "6844903728995106823", "title": "Vue源码解析之nextTick", "desc": "nextTick是Vue的一个核心功能，在Vue内部实现中也经常用到nextTick。但是，很多新手不理解nextTick的原理，甚至不清楚nextTick的作用。 那么，我们就先来看看nextTick是什么。 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使…"}, {"id": "6844903697936285703", "title": "Vue-SSR: head Mixin 实现头部信息管理", "desc": "下面进入这篇文章的主题，尤大大的例子里是做了一个 tilte 的 Mixin 方法，可以修改各个页面的 title，但是我司的需求可能是不同的页面不仅是要不同的 title，还要不同的 description，author，keywords，网上有很多人使用 vue-meta,…"}, {"id": "6844903998814683149", "title": "Vue3.0中针对Virtual DOM优化", "desc": "数据变更之后，新的Virtual DOM和旧的Virtual DOM进行 patch 算法比较，并算出二者之间的差异，将差异进行修改。但是传统Virtual DOM，进行算法比对时颗粒度是组件，每个组件作为一个颗粒。 虽然Vue能够保证触发更新的组件最小化，但是单个组件内部依然…"}, {"id": "6844904064489095175", "title": "vue中利用iscroll.js解决pc端滚动问题", "desc": "项目中经常遇到区域超出部分会出现滚动条，滚动条在pc端可以通过鼠标滚轮控制上下，在移动端可以通过鼠标拖动页面进行滚动，这两种场景都是符合用户习惯，然而这种滚动条一般都是竖【vertical】项滚动条，如果pc端出现横向滚动条【horizontal】，在不做处理的情况下，你只能用…"}, {"id": "6976246978850062367", "title": "遇事不决nextTick，为什么​nextTick这么神奇？", "desc": "场景说明 最近使用Vue全家桶做后台系统的时候，遇到了一个很奇葩的问题：有一个输入框只允许输入数字，当输入其它类型的数据时，输入的内容会被重置为null。为了实现这一功能，使用了一个父组件和子组件。为"}, {"id": "6844903608610193421", "title": "vue-loader解析", "desc": "最近在做一个玩具，其中用到了vue结构。 本文主要简单介绍下Webpack的loader具体做了些什么，然后简单解析一下vue-loader。 首先先介绍一下Webpack的loader究竟是什么，按照官网的说法，简单来说loader是让其他类型的文件转换成webpack能理解…"}, {"id": "6844903568617521159", "title": "vuex 源码：深入 vuex 之 state", "desc": "接下来我们则开始要研究的是 vuex 的 store 对象。 store 对象中有一个属性叫 state。state 包含了全部的应用层级状态。应用中的各个组件若使用了 state，则会保持与同步最新的状态。state 就好比是 vue 中的 data，但它是整个应用的 dat…"}, {"id": "6844903958171877383", "title": "vue-v-xxx基于 Vue拓展的 v-xxx 库", "desc": "作为vue轻车熟路的老司机，经常会用到一些指令，vue官方提供的指令又太少，无法满足旺盛的欲望，而每次要写一遍，终日郁郁寡欢，从小就教育我们乐于助人，为了将奉献精神贯彻始终，用了这个库，空下来大把时间陪陪家人朋友岂不乐哉。 闲话少叙，直逼主题，毕竟我们是正经的官方软文。 1. …"}, {"id": "6969786671696986119", "title": "解决el-table 使用slot=\"header\"内筛选数据异步无法渲染的问题", "desc": "实现 el-table 使用 slot=\"header\" 内筛选数据由于异步请求而无法渲染筛选项的问题"}, {"id": "6919650694110642184", "title": "Vue源码之数组与$set", "desc": "set ⽅法接收 3个参数， target 可能是数组或者是对象， key 代表的是数组的下标或者是对象的键值， val 代表添加的值。⾸先判断如果 target 是数组且 key 是⼀个合法的下标，则调用数组的splice，这⾥的 splice 其实已经不仅仅是原⽣数组的 s…"}, {"id": "6844904162770026503", "title": "前端开发之标准化(未完）", "desc": "前端开发通常我们不会自己去造轮子，通常是利用已有轮子，或者已有的汽车去制作改装车。但改装车过程多了，也会想去了解底层的轮子，或者自己造轮子。 vue是一个非常实用的MVVM framework,规定了我们的对于前端的写法，隐藏了结构生成和渲染的细节，但vue官方本身是不造轮子的…"}, {"id": "6969754261856976933", "title": "new Vue后发生了什么", "desc": "初始化流程 1.引入 vue 文件 会调用几个方法 一.new Vue new Vue 的时候会调用 initMixin 里面的_init 方法 1.init 的方法中会判断传入的是否是组件 由于第一"}, {"id": "6844903533695729672", "title": "基于手淘 flexible 的 Vue 组件：TextScroll -- 文字滚动", "desc": "基于手淘 flexible.js 的 Vue 组件"}, {"id": "6969706754208727071", "title": "vue双向绑定", "desc": "问题:单向绑定的确可以将new Vue()中的变量值更新到页面显示,但还是无法将页面中用户输入的新内容,自动反向更新到new Vue()中保存 单向绑定:只能将new Vue()中模型对象转给你变量值"}, {"id": "6876101558430334983", "title": "手把手教你通过vue-cli搭建手机端框架", "desc": "前言：欢迎前端的小伙伴们前来围观、学习借鉴，如果你是后端、测试和其他的小伙伴也没关系，如果自己也想玩一下前端，想搭建一个前端的框架，那么不妨静下心来看看这篇文章。如果你不是从事开发工作的人员，内容可能相对而言比较枯燥，但是如果想找错别字，也不妨进来看看。 初衷：有的前端的小伙伴…"}, {"id": "6969563620959060004", "title": "Vue全家桶学习笔记（一）——Vue的基本概念与操作", "desc": "写在前面 Vue全家桶的学习笔记参考了尚硅谷的Vue框架教学视频和Vue官方教学文档 Vue介绍 Vue是一个js库，它的关键词是渐进式：Vue的库分为核心库和插件库，核心库能满足基本需求。插件库是用"}, {"id": "6872908917970567175", "title": "Vue 数据绑定解析", "desc": "Vue.js之所有能实现数据的双向绑定，最核心也是最基础的是Object.defineProperty的使用。 第三步：有data参数就执行initData,执行observe方法。没有data，给一个默认的{}值。 第五步：新建一个Dep对象，用来收集依赖。数组执行obser…"}, {"id": "6844904194411855886", "title": "P1攻城狮的江湖总结-项目篇", "desc": "单枪匹马在前端战场上厮杀两年多，创业公司没有独立的前端团队，也没有专门的前端项目规范，久而久之自己就成了前端的自我规范。"}, {"id": "6897415259301085192", "title": "vue之更改数据触发视图更新小坑", "desc": "更改对象数据触发视图更新解决办法方法一：更改整个obj的地址方法二：借助其他被vue劫持的数据（偏方，不推荐使用）方法三：使用官方推荐：实例.$set(目标对象,新的属性名,属性值)更改数组触发视图更"}, {"id": "6934622109767303182", "title": "如何\"实现\"一个form组件--卡卡西🤣🤣", "desc": "因为在某个老项目中，用到了mintui这个ui框架，看着小伙伴写的表单校验异常痛苦，到了我这里，觉得不能忍了，就去研究了一下并写了组件。研究对象为 element-ui，对开发element-ui的大佬深深佩服，其中大部分代码是element-ui的源码搬运过来的。如果你们项目…"}, {"id": "6844903815229997070", "title": "告别原生，打造自己的topBar", "desc": "前段时间项目忙到一半，产品突然说h5页面要加个top-bar（之前说好的混合开发呢）。WFT，项目做到了一半，突然要加这个； 本文涉及的知识点和细节点还是蛮多的，自己在整理的时候，也认真的消化吸收了一波；有些小知识点，写起来比较占篇幅，再者比较时间匆忙，笔者在此就一笔带过了。"}, {"id": "6969485609559818248", "title": "手撕Vue源码之——vue实例挂载实现方法", "desc": "Vue实例挂载的实现 Vue中我们是通过$mount实例方法去挂载vm的，$mount方法在多个文件中都有定义，如src/platform/web/entry-runtime-with-compile"}, {"id": "6844903605900673031", "title": "如何解决数据驱动带来强交互和深层次通信的痛点", "desc": "2. 一次订阅方法 3. 冻结订阅者 4. 解除冻结 5. 发布订阅 6. 取消订阅"}, {"id": "6934549908582039566", "title": "Vue源码解析(computed,watch)", "desc": "处理computed相关的逻辑，发生在initState中，接下来详细分析与computed相关的逻辑。 知道computed计算属性是依赖于其它响应式变量的，因此分析computed的时候会分为两个步骤：computed初始化和computed更新。 在initState()…"}, {"id": "6844903641543868424", "title": "Vuex 原理浅析笔记", "desc": "不能直接改变store，改变store唯一途径就是显示地提交mutations。这样使得我们可以方便跟踪每一个状态的变化，从而让我们实现一些工具帮助我们更好的了解我们的应用 mapActions 辅助函数将组件的methods映射为store。dispatch调用 Vuex 运…"}, {"id": "6914185513884712973", "title": "积少成多--window.location.origin兼容性", "desc": "然后下午回了一句：卧槽！你给的这个有兼容性(IE11及以上才行)。我去搜了下得到一下解决方案。"}, {"id": "6844903817369092103", "title": "（实战）indexedDB + webSocket实现数据持久化保存数据", "desc": "一、前言二、实现数据持久化方法三、项目需求四、实现过程"}, {"id": "6901941305568739335", "title": "聊一聊 Vue 的不同构建版本", "desc": "完整版 Vue.js ，包含运行时和compiler编译器的版本。 非完整版 Vue.runtime.js ，只有运行时的版本。 由于运行时版本没有 compiler ，打包体积更小，更推荐用户使用运行时版本。开发环境通常使用完整版开发，然后通过配置转成运行时版本提供用户使用。…"}, {"id": "6975101450976247845", "title": "【Vue2.x 源码学习】第十六篇 - 生成 render 函数 - 代码拼接", "desc": "【Vue2.x 源码学习】第十六篇 - 生成 render 函数；render 函数拼接generate(ast)；处理属性genProps(ast.attrs)；处理属性中的样式；递归深层处理儿子g"}, {"id": "6844903895638999048", "title": "IE11下处理Promise以及复习Vue的单项数据流", "desc": "在写vue组件的过程中，经常会遇到这样的情形：子组件需要的参数以props属性里面的prop来获得，父组件通过具名的prop来把子组件需要的内容传递给子组件，而且Vue提倡数据流的方向只能由父组件流向子组件。当父组件的数据发生变化时去通知子组件更改相应的属性，而不能反过来，子组…"}, {"id": "6937207840230768676", "title": "# Vue3 源码解析 07--实现自己的 min-vue(reactive)", "desc": "经过之前的探索，基本上弄明白了 Vue3 的响应式的大概内容，所以为了巩固一下，来实现一个简易的 reactivity 响应式。 这样，我们修改数据 rawData 的时候调用 reactive()就可以同时得到修改后的 reactData。这其实就是一个最简单的响应式了。 上…"}, {"id": "6901591997870505997", "title": "在vue中为高德infoWindow添加点击事件", "desc": "在地图上的InfoWindow添加点击事件。"}, {"id": "6844904173914292237", "title": "vue动态配置小程序页面（一）", "desc": "最近花时间弄了一个动态配置小程序页面的功能主要分配置端和渲染端（参考萤火商城后台配置小程序）设计思路1.先设计出页面有哪些展示类组件2.设计组件样式3.抽取能够动态变化的配置参数4.开发页面组件把每个"}, {"id": "6844903670010626062", "title": "【英】利用 Vue.js、Nuxt.js 以及 AWS Lambda 进行 SSR 实践", "desc": "That's a mouthful of a title right there. Don't let it scare you away. What it boils down to is rather simple. We want the best of both wor…"}, {"id": "6844903606139748366", "title": "[译]Vue.js 结合 Firestore 实际应用", "desc": "Firestore 是 Google Firebase 的一种新的数据存储方式(目前处于测试阶段)，它以 Firebase 实时数据库为基础，且增加了一些漂亮的功能。在本文中，我们将使用 Vue.js 和 Firestore 建立一个网站。"}, {"id": "6907490999224762382", "title": "React及vue实现按需异步加载", "desc": "异步组件：定义的时候什么都不做，只在组件需要渲染（组件第一次显示）的时候进行加载渲染并缓存。 Vue实现按需加载，结合使用webpack的代码分割功能进行。定义为异步加载的组件，在打包的时候，会单独打包成单独的js文件存储在static/js内，在调用的时候使用ajax请求回来…"}, {"id": "6907488498341642247", "title": "前端实现搜索分页添加功能", "desc": "​ 添加数据采取了子组件 dialog 添加，在添加后，将数据传给父组件。 ​ 调取分页的函数，重新分页，重新计算总页数。 ​ 由于在编辑态和正常态切换时，就是 span 和 input 之间的切换，input 就要涉及到校验，因此选择了表单嵌套表格，用 editable 标志…"}, {"id": "6844903961665732621", "title": "Vue----生命周期钩子函数", "desc": "什么是生命周期Vue的实例具有生命周期Vue的实例在生成过程中会经历一系列初始化的过程数据的监听编译模板实例挂载DOM元素或者数据更新导致DOM更新在执行过程中会运行生命周期的钩子函数实例在生命周期中"}, {"id": "6844903663022899214", "title": "使用Vue全家桶+typescript 还原 cnodejs前端页面", "desc": "功能 1、所有文章的浏览位置记录 2、查看过的文章缓存 3、查看过的用户缓存 4、 回复文章 5、支持(文章详情页头部(用户名)、文章详情页内@用户、评论@用户)用户跳转 所有地方的用户跳转 6、 代码高亮 7、图片放大预览"}, {"id": "6898949606294421511", "title": "Vue源码之异步组件", "desc": "1.首先在Vue初始化全局API时将设置的异步组件以key,value的形式(key为组件名，value为工厂函数)设置到Vue.options.components对象中。 2.在_render创建vnode阶段，碰到组件标签首先在Vue.options.components…"}, {"id": "6844903549298540551", "title": "利用Vue、Socket.io 实现在线五子棋对战", "desc": "网上有很多利用前端技术来做五子棋的Dome，所以本人为了学习socket.io 就自己也撸了一个"}, {"id": "6938397868843614216", "title": "Vue动画", "desc": "Vue中transition动画原理transition动画显示在想要添加动画的标签上包裹一个transition标签，给一个name为xxx解释一下：有了transition标签，在动画开始的前一帧"}, {"id": "6844903934968987655", "title": "写给vuer的react项目指南", "desc": "我所在公司一直是vue技术栈，最近在做市场调研的时候发现，很多公司都要求react技术栈。众所周知，react的上手难度还是比较高，但是，它的难度并不在业务代码本身，而在于项目搭建过程中的各种插件配置。 vue是一个渐进式框架，意味着他是随着你的项目逐渐丰富的，很多时候可能只需…"}, {"id": "6844903520550780941", "title": "一步一步分析vue之observe", "desc": "那么 Dep 又是什么东西呢。 好，让我们回到observe最开始出现的地方。在代码的3360行。 接着，按f11跟进去，我们可以看到，程序用new Observer(value)初始化了value,如下图所示。 我们可以看到在程序的874行，用def(value, '__ob…"}, {"id": "6975123682498707469", "title": "7个实用的Vue开发技巧", "desc": "7个有用的Vue开发技巧 1 状态共享 随着组件的细化，就会遇到多组件状态共享的情况，Vuex当然可以解决这类问题，不过就像Vuex官方文档所说的，如果应用不够大，为避免代码繁琐冗余，最好不要使用它，"}, {"id": "6844904128624197646", "title": "vue中的数据通信", "desc": "一. props $emit **高级: **在此基础上我们扩展一下，再我们的子组件是表单类组件（用户填写选择数据的输入选择组件）时，我们需要大量的数据通信，父组件管理表单数据，子组件回显表单数据，数据改变时通知父组件，这无疑是一种比较普遍的场景，此时我们劲量推荐使用 v-mo…"}, {"id": "6844903821907345415", "title": "Vue的mergeOptions函数分析-下", "desc": "上篇文章分析了mergeOptions函数的主要逻辑，最后知道是分别遍历俩个选项对象都去执行mergeField函数，其中mergeField函数其实是根据不同的key值来获取到相应的合并策略，从而执行真正的合并。接下来我们主要分析下Vue针对不同的内部选项实施的合并策略 我们…"}, {"id": "6844904160509460488", "title": "浅析 Vue 的数据响应式", "desc": "数据响应式是指我们在 JS 中修改页面中的数据时，修改了的数据会实时响应到/出现在页面上。 1. 数据响应式的实现 在了解数据响应式如何实现之前，我们需要了解一些函数。 getter 是一个获取某个特点属性的值的方法。 setter 是一个设定某个属性的值的方法。 Obejct…"}, {"id": "6844904058549977102", "title": "Vue实例", "desc": "1. Vue 实例的数据对象。Vue 将会递归将 data 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化。对象必须是纯粹的对象 (含有零个或多个的 key/value 对) 当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，…"}, {"id": "6909282048037355527", "title": "React学习记录（一）—— Hello World", "desc": "什么是React？React是用于构建用户界面的 JavaScript 库。 这种实现方法叫做命令式编程，每做一个操作，都是给计算机（浏览器）一个命令。 对于Vue来说，只需要依赖一个vue.js文件即可，但React需要三个依赖，原因是:三个库是各司其职的，目的就是让每一个库…"}, {"id": "6844903648619675655", "title": "Vue2.x源码解析系列三：Options配置的处理", "desc": "笔名言川, 前端工程师，精通 Vue/Webpack/Git等，熟悉Node/React等，涉猎广泛，对算法/后端/人工智能/linux等都有一定研究。开源爱好者，github上目前总计5000+ Star。 在正式说数据响应化之前，先让我们简单说下options的处理，其实对…"}, {"id": "6924229151083724814", "title": "服务端与客户端同构 —— Vue.js 应用框架 Nuxt.js", "desc": "通用（也称同构）的JavaScript已经成为JavaScript社区很常用的一个术语。通用的JavaScript用来形容可以在客户端执行，也可在服务端执行的Javascript代码。 很多现代的JavaScript框架，比如Vue.js, 旨在构建单页应用(SPA)。单页应用…"}, {"id": "6844903956204912654", "title": "Vue 数据响应式源码分析笔记", "desc": "在Vue中主要使用到的是descriptor中的get和set，get 是一个给属性提供的 getter 方法，当访问了该属性的时候会触发getter方法。set 是一个给属性提供的 setter 方法，当对该属性做修改的时候会触发setter方法 建议去下载一份Vue2代码，…"}, {"id": "6844904190758617096", "title": "深入了解 vue 响应式原理", "desc": "vue 的响应式原理主要基于：数据劫持、依赖收集和异步更新，通过对象劫持来做 依赖的收集 和 数据变化的侦测，通过维持一个队列来异步更新视图。 主要是通过 Object.defineProperty 方法来实现。举个小例子：“如果一个穷小子，有房子就有女朋友，房子没了，那么女朋…"}, {"id": "6844903810758869005", "title": "【Vue.js 牛刀小试】：第十章 - 组件间的数据通信", "desc": "在上一章的学习中，我们继续学习了 Vue 中组件的相关知识，了解了在 Vue 中如何使用组件的 data、prop 选项。在之前的学习中有提到过，组件是 Vue 中的一个非常重要的概念，我们通过将页面拆分成一个个独立的组件，从而更好地实现代码复用，使我们的代码更加简洁，容易维护…"}, {"id": "6908189294226046984", "title": "模拟 Vue.js 响应式原理", "desc": "数据指的是数据模型，基于Vue开发的时候数据模型仅仅是普通的JavaScript 对象，数据响应式指的是当我们修改数据时，视图会自动更新，不需要任何的DOM操作，提高开发效率。 开发过程中仅需要关注数据本身，不需要关心数据是如何渲染到视图的。 Proxy代理的是整个对象，也就是…"}, {"id": "6844903588230070285", "title": "教你如何检查一个函数是否为JavaScript运行时环境内建函数", "desc": "首先，检测要被检测者是否是函数类型，然后会检测这个被检测的函数toString之后的字符串中是否带有native code字眼，如果符合这两个条件，那么说明被检测者是一个当前JavaScript运行时原生支持的函数。 有些人可能会问：为什么要检测这个被检测的函数toString…"}, {"id": "6844903974890373127", "title": "Vue 3.0 响应式原理浅析", "desc": "Vue 3.0 的源码已经公布出来 链接，大家感叹学不动了，但是还是要趁热学起来。当然在了解源码之前，还是要熟悉下新的API说明 然而，本文并不是要一行一行的分析 Vue 3.0 的源码，而是想要以自己的语言来讲清楚 Vue 3.0 的响应式原理。 在 Vue 3.0 中使用 …"}, {"id": "6844904053160280078", "title": "菜鸟初探Vue源码（四）-- 组件化", "desc": "Vue.js 的另一个核心思想是组件化。所谓组件化就是将页面拆分成多个组件，组件之间资源相互独立，组件可以复用，组件之间也可以嵌套。 接下来以Vue/CLI初始化的代码为例，分析一下Vue组件初始化的过程。 本篇要从_createElement方法说起（_createEleme…"}, {"id": "6923105696292536328", "title": "Vue.js源码学习——项目构建", "desc": "通过函数的方式来对Vue进行了定义，我们在Vue实例的时候用new来初始化对象。所以Vue的本质就是利用Function来构建，同时在使用的时候针对不同的场景来给Vue的原型上挂载方法。"}, {"id": "6844903701614706696", "title": "Vue 应用单元测试的策略与实践 02 - 单元测试基础", "desc": "金。 在 TDD 做完 Tasking 列完实例化数据之后，完全没有UT基础不知道该怎么写单元测试？ 在上一篇文章当中我们介绍了单元测试的意义，以及为何选择 Facebook 的 Jest 作为我们的测试框架。现在就让我们一起来学习如何编写最基础的单元测试。"}, {"id": "6844903861988098061", "title": "数据响应式初探", "desc": "近些年来，一股 MVVM 之风刮遍全球，大家无不为之称赞。关于 MVVM 架构模式的实现，大家讨论的最多的算是 Vue.js 了吧！Vue.js 很好的利用 MVVM 中的 VM 声明式的实现了与数据模型 Model 和视图 View 的联通，使得用户只需对数据模型进行操作，就…"}, {"id": "6844903577417154574", "title": "H5 Audio ES6版 系列教程之二", "desc": "为保证功能的正常，基本的浏览器检测是必要的。 Audio 内置方法和属性在不同浏览器下表现不一致或未实现等情况，此时应该区分浏览器类型及版本。 生成播放器的 DOM 结构，并插入到文档树中。 使用数组来存储 DOM 结构，通过配置项选择性地往数组里 push 相应的 DOM，最…"}, {"id": "6844903965704847367", "title": "小白入手vue教材", "desc": "一个简单基础知识总结，小白级的可以看看"}, {"id": "6844903540863795213", "title": "2017前端发展回顾", "desc": "老技术日趋成熟，新技术层出不穷。"}, {"id": "6844904183619944462", "title": "从源码解惑，为什么v-if和v-for不应该一起用？", "desc": "这个操作看起来很简单，就是过滤要展示的列表，但是官方是不推荐这么写的，官方链接。 官方给出了两点原因： 哪怕我们只渲染出一小部分用户的元素，也得在每次重渲染的时候遍历整个列表，不论活跃用户是否发生了变化。 通过上文的描述，大概是懂了，嗯。。。但是看完还是不知所以然。 我们可以做…"}, {"id": "6844903508806729742", "title": "在 vue-cli 里基于 axios 封装复用请求", "desc": "自从Vue2.0推荐大家使用 axios 开始，axios 被越来越多的人所了解。使用axios发起一个请求对大家来说是比较简单的事情，但是axios没有进行封装复用，项目越来越大，引起的代码冗余。就会非常麻烦的一件事。所以本文会详细的跟大家介绍，如何封装请求，并且在项目组件中…"}, {"id": "6844904194730622989", "title": "打造一款适合自己的快速开发框架-前端篇之登录与路由模块化", "desc": "后端篇一阶段内容已经完成得差不多了，前端篇还没正式开始，这段时间会先转前端篇，就着之前搭建的前端脚手架搭建继续添加后续的内容。本文重点讲一下前端登录与路由模块化思路，顺便会讲一下elementui-admin脚后架的自定义图标的使用。 做为后台管理系统，登录模块是不可缺少的。这…"}, {"id": "6923417451333959694", "title": "浅谈Vite 原理与 Webpack比较", "desc": "去年vue3发布弯屁斯版的时候，伴生打包工具vite的说明吸引了我。实际跑了一下，项目构建速度和webpack没有差太多，但是开发热更新速度真的是快的飞起！ 主流的浏览器（IE11除外）均已经支持，其最大的特点是在浏览器端使用export import的方式导入和导出模块，在 …"}, {"id": "6844903733860548622", "title": "vue权限路由实现方式总结二", "desc": "之前已经写过一篇关于vue权限路由实现方式总结的文章,经过一段时间的踩坑和总结，下面说说目前我认为比较“完美”的一种方案：菜单与路由完全由后端提供。 这种方案前文也有提过，现在更加具体的说一说。 很多人喜欢把路由处理成菜单，或者把菜单处理成路由(我之前也是这样做的)，最后发现挖…"}, {"id": "6844904199596015624", "title": "手摸手带你理解Vue的Computed原理", "desc": "computed 在 Vue 中是很常用的属性配置，它能够随着依赖属性的变化而变化，为我们带来很大便利。那么本文就来带大家全面理解 computed 的内部原理以及工作流程。 在这之前，希望你能够对响应式原理有一些理解，因为 computed 是基于响应式原理进行工作。如果你对…"}, {"id": "6992392964391567397", "title": "Vue 中使用 flv.js 播放视频", "desc": "Vue 中使用 flv.js 播放视频，由于`video`标签仅支持Ogg、MPEG4、WebM 三种格式，现在需要支持flv格式，研究后发现可以使用`flvjs`，实现flv格式的视频播放"}, {"id": "6990210267753742344", "title": "vue 中实现同时弹出多个div 并移动弹框位置", "desc": "vue 中实现同时弹出多个div 并移动弹框位置。用于同时点开多个div详情框，进行详情数据对比查看。"}, {"id": "6993498596440031269", "title": "ant design vue 的实战应用与部分总结", "desc": "前端框架层出不穷，虽说万变不离其宗，但对于小白🤦🏻‍♂️来说上手也需要一个过程，🤡真实的项目总是面临着各种各样的要求，没有时间去学习，只有上来就干，从实战中学习是最好的方式。"}, {"id": "6993265904054173726", "title": "vue学习(一) - vue.use", "desc": "新公司主要技术栈是vue，虽然自己这些年主要还是在react-native方面深耕的更多，但是即来则安，开始多做些学习分享吧"}, {"id": "6844903697781096462", "title": "《从零构建前后分离的web项目》实战 - 欲善其事必先利其器 继续打磨前端架构", "desc": "上回还真的有同学提到了这个问题，感谢细心的你。@_noob 其实是没任何问题的，只不过看起来违背了常见的结构，像是有问题。其实是上文为了照顾初学者，怕大家因为麻烦而放弃，并没有一次性改的“看起来那么复杂”，我们来填下坑。 我们把上文的 renderer/src 改成比较容易理解…"}, {"id": "6844904197297537037", "title": "Vue.js 组件复用和扩展之道", "desc": "软件编程有一个重要的原则是 D.R.Y（Don't Repeat Yourself），讲的是尽量复用代码和逻辑，减少重复。组件扩展可以避免重复代码，更易于快速开发和维护。那么，扩展 Vue 组件的最佳方法是什么？ Vue 提供了不少 API 和模式来支持组件复用和扩展，你可以根…"}, {"id": "6844903943223377933", "title": "解放双手-vue语法自动转typescript", "desc": "对于数组类型，其每一个数组项，其实都相当于是字符串类型、函数类型和对象类型的聚合，所以实际上只要处理这三种类型即可，数组类型则直接遍历数组项，每个数组项的类型肯定在这三个类型之内，按照类型调用相应的处理方法即可。"}, {"id": "7000016824444125198", "title": "vue3前端青铜到黄金王者 - 第10个入门computed使用set和get", "desc": "前篇写了computed属性，但是我们发现不能修改computed属性的值。其实可以修改的我们再看看。计算属性, 一个变量的值根据其他变量（一个或者多个）的变化，自动反映，算出新的结果。我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 compu..."}, {"id": "6844903577987579912", "title": "Vant 1.0 发布：轻量、可靠的移动端 Vue 组件库", "desc": "距离 Vant 首次发布刚好过去了半年时间，在这半年时间里 Vant 团队广泛吸纳社区的反馈和建议，持续对组件进行打磨、优化，使得 Vant 逐渐成长为一个轻量、可靠的移动端 Vue 组件库。 在这个时间点上我们决定发布 Vant 的 1.0 正式版，希望未来有更多小伙伴能够参…"}, {"id": "6956429517904674829", "title": " vue - 使用swiper插件实现轮播图", "desc": "hello大家好，最近我在做一个仿饿了么的项目，我会将我的项目经验同步到这里，与大家分享！ vue - 使用swiper插件实现轮播图 下载安装： npm install swiper --save "}, {"id": "6913734532206166023", "title": "Vue+scss白天和夜间模式切换功能的实现方法", "desc": "图片被压缩了不够清晰。 注：若安装失败可以考虑使用cnpm，或者切换npm源等方式安装。 注：如需更多颜色及样式切换，只需要在_themes.scss设置好变量，通过 _handle.scss设置切换函数，即可以在页面中通过该函数对指定样式进行设置。"}, {"id": "6984611768458805261", "title": "小技巧系列 -- vue 父子组件绑定及弹窗初值问题", "desc": "需求 主页点击按钮打开弹窗，弹窗为子组件，主页为父组件。弹窗复用，有“复制弹窗”和“重命名”弹窗。两种弹窗除了弹窗名字不同，“复制弹窗”需要实现文件名称的初始值加上_副本的文字。 父子组件绑定 父子组"}, {"id": "6844904042242523144", "title": "Vue3.0时代你必须了解的：compositon api 用法和注意事项", "desc": "直奔主题，看就完事了。 目前 Vue 3 处于 Pre-Alpha 版本。后面应该还会有 Alpha、Beta 等版本。 API文档点这里，当然，应该是国外友人写的英语版本。 setup是一个新的组件选项，也是其他API的入口。也就是说，你所有的操作都将在setup函数内部定义…"}, {"id": "6984063601929814030", "title": "Vue 封装全局 toast 组件", "desc": "Vue 封装全局 toast 组件 一. 借助 vue-cli 1. 定义 Toast 组件 2. 在 main.js 里面配置 3. 在其他组件内使用 二、不借助 vue-cli ​ 在借助 vue"}, {"id": "6844903511084253197", "title": "GitLab的vuejs风格指南", "desc": "GitLab的vuejs风格指南"}, {"id": "6942141805685112840", "title": "父子prop问答", "desc": "当我们在使用vue框架进行开发应用的时候，经常需要进行父子组件之间的通信，同时在vue框架中，也提供了prop这样的一种方式，但我们经常会对一些比较细节的问题搞懵逼。那么接下来，我们将对prop进行一"}, {"id": "6895705223310868494", "title": "Vue中Observer的简要说明（1）", "desc": "前两篇文章让Watcher可以处理单一状态的观察和多个状态计算过程的观察，都是针对基础类型数据，对于引用类型，甚至更深层次的数据结构应当如何处理。直观的来看，引用类型的状态，其包含的数据字段也应当通过getter/setter的包裹，从而能被深层次的观察。所以为属性设置gett…"}, {"id": "6844904077655015437", "title": "Vue2.0变化侦测Array类型的处理", "desc": "在ES6之前没有源编程能力，无法拦截原型方法的能力。(ES6的Proxy有元编程能力) 所以为了拦截原型方法，实现拦截器覆盖Array.prototype。 那就是Observer(将变量从数据描述符变为存取描述符的函数)中，并且这个Observer保存于值Value的不可枚举…"}, {"id": "6941972457645572126", "title": "使用装饰器和class关键字编写Vue2.x组件", "desc": "您好，我是沧沧凉凉，是一名前端开发者，目前在掘金、知乎以及个人博客上同步发表一些学习前端时遇到的趣事和知识，欢迎关注。 相信目前在前端行业中，大部分项目依然是使用的Vue2.x来进行编写，除了很多人不愿意跳出自己的舒适圈去学习新的东西之外，还有一个原因就是Vue2.x比Vue3…"}, {"id": "6844903497612132359", "title": "剖析Vue原理&实现双向绑定MVVM", "desc": "本文能帮你做什么？ 1、了解vue的双向数据绑定原理以及核心代码模块 2、缓解好奇心的同时了解如何实现双向绑定 为了便于说明原理与实现，本文相关代码主要摘自vue源码, 并进行了简化改造，相对较简陋，并未考虑到数组的处理、数据的循环依赖等，也难免存在一些问题，欢迎大家指正。不过…"}, {"id": "6844903619943202830", "title": "小白的diff算法试试水之旅", "desc": "1. 主角1：Element构造函数 先介绍一下虚拟dom的数据结构，我们都知道源码里面有createElement函数，通过他创建虚拟dom，然后调用render函数。还记得VUE脚手架住入口文件那句足够装逼的h=>h(App)吗，其实就是类似createElement(Ap…"}, {"id": "6941330938714390558", "title": "关于Vue里面is属性的解读", "desc": "Vue里面的is属性在Vue的官方文档里面 关于is这个attribute有一个这样的例子这是一个点击不同的button会动态切换下面的文字其实下面的文字其实是一个组件 当点击上面不同的按钮就会切换到"}, {"id": "6905004815248523277", "title": "vue源码provide/inject原理解析", "desc": "当深层嵌套的子孙组件想要拿到父组件的数据时，我们可以使用provide和inject。官网原理图： 上例中的provide定义为一个对象。如果需要在provide里使用data中的属性，需要把provide定义成一个方法，否则会报错。 了解了inject和provide的使用后…"}, {"id": "6844903606219440136", "title": "miti-ui之picker踩坑记", "desc": "菜鸟面前尽是坑！"}, {"id": "6844903576087560206", "title": "template汉字提取 & 有道Api翻译", "desc": "为了简化vue-i18n国际化实现的小工具。"}, {"id": "6844904198664880136", "title": "Vue_手把手入门就那个不谈", "desc": "2008年，google的Chrome发布，随后就以极快的速度占领市场，超过IE成为浏览器市场的主导者。 2009年，Ryan Dahl在在谷歌的Chrome V8引擎基础之上，打造了基于事件循环的异步IO框架：Node.js。 Node.js的伟大之处不在于让js迈向了后端开…"}, {"id": "6871478709506244615", "title": "Vue 源码阅读第一步-深度解读响应式原理", "desc": "vue 是一个基于 MVVM 模式实现的渐进式框架。 view 是视图层（DOM）, model 是数据层（data）。 viewModel 充当了一个中间角色，它能够根据绑定的 model 数据渲染 view 视图, 同时也能监听视图层的事件来改变 model 的数据从而更新…"}, {"id": "6844904170500128775", "title": "关于 Vue 构造选项", "desc": "1、Vue实例constvm=newVue(options)其中vm对象封装了对视图的所有操作，包括数据读写、事件绑定、DOM更新vm的构造函数是Vue，按照ES6的说法，vm所属的类是Vueopti"}, {"id": "6871150667105959943", "title": "Vue2.0 $set()的正确使用详解", "desc": "原因是：受 ES5 的限制，Vue.js 不能检测到对象属性的添加或删除。因为 Vue.js 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue.js 转换它，才能让它是响应的。 要处理这种情况，我们可以使用$set()方法，既…"}, {"id": "6897948628485144583", "title": "小菜鸡的成长之路（Vue.js源码剖析-响应式原理）", "desc": "VUE源码解析与手写响应式实现文档结构剖析vue源码模拟实现一个最小版本的vue响应式原理在面试中常问的问题问题给vue实例新增一个成员是否是响应式的？给属性重新赋值成对象是否响应式的概念理解数据驱动"}, {"id": "6915601780235567111", "title": "Vue组件通信原理剖析（二）全局状态管理Vuex", "desc": "首先我们先从一个面试题入手。 Vuex集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以可预测的方式发生变化。 使用Vuex只需执行 Vue.use(Vuex)，保证vuex是以插件的形式被vue加载。 state的数据具有响应式，A组件中修改了，B组件中可用修改后的…"}, {"id": "6844904143606267912", "title": "一步一步的实现Vue（一）", "desc": "01. 看看真正的Vue 此时,vue 会找到el这个节点，（如果有template属性，则会将此字符串模板编译为render函数），然后生成抽象语法树（AST），然后用data替换对应的数据，创建虚拟DOM，生成真正的DOM，并最终挂载到文档中。 既然我们要一步一步来，那么先…"}, {"id": "6844903696803840007", "title": "Element package.json 中的 scripts 分析 —— \"build:file\" ", "desc": "执行这个脚本的作用是：读取 packages/theme-chalk/src/icon.scss 文件， 对文件中的所有类似于 el-icon-close 这样的图标类名进行正则匹配，把所有符合正则的图标类名组成一个图标数组，最后把图标数组写入到 example/icon.js…"}, {"id": "6844904084579811341", "title": "从源码深入分析vue生命周期机制", "desc": "最近在工作之余也陆陆续续研究了vue2.x的源码，打算通过文章来记录对源码的一些学习收获和总结，本人第一次写文章，有点紧张又有点激动，希望今后能继续坚持下去。这篇是通过源码来分析整个生命周期执行的机制，如果文章有错误不对的地方，欢迎指出，不胜感谢，如果对你有帮助，请为我点个赞吧…"}, {"id": "6844904084588216328", "title": "手写实现一个v-model的不同做法(含封装组件用法)", "desc": "由于疫情的原因啊，我猜大多数人都跟我一样，在家里度过，偶尔学习学习。这不，我遇到了一个如何手动一个v-model的问题，由此展开了学习。 父组件中我加了一个注释的代码行，其实是帮助我自己理解的，不知道有没有小伙伴跟我一样，第一次看的时候压根不知道它在做什么的？哭唧唧。 跟上面的…"}, {"id": "6844903600460660750", "title": "首个使用 Weex 和 Vue 开发的 Hacker News 原生应用", "desc": "首个使用Weex和Vue开发的HackerNews原生应用。预览用WeexPlaygroundApp扫描下方二维码即可。编译项目文件安装依赖：编译代码：拷贝bundle文件：启动Web服务启动服务后会"}, {"id": "6844903863686807565", "title": "如何解决跨域问题?", "desc": "一. 什么是跨域? 二. 实现跨域的方式有哪些? 三. JSONP 四. CORS"}, {"id": "6844903689115664397", "title": "我练习项目眼中的 vue", "desc": "因为毕业设计开始了 vue 的学习之路，曾写过一些入门的 vue 小白学习文章系列（2018 我所了解的 Vue 知识大全（一））。如今已经工作半年了，这一次想说说我我平时练习项目中的 vue ，我习惯采用 ES6 书写,仅供参考，如果有可以改进的希望能够学习到，下次我说说我在…"}, {"id": "6856756261464702990", "title": "53. Vue名称案例-使用computed计算属性", "desc": "前面在写名称拼接案例的时候使用了keyup监听文本框，还使用了watch来监听数据变化，那么本篇章来使用computed计算属性来监听实现。 那么在使用之前，先来看看computed属性的官网说明。 模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的…"}, {"id": "6945997922966175751", "title": "vue3的几个新特性的使用", "desc": "Vue3 生命周期钩子，使用setup()方法替换beforecate和created。 这意味着，在这些方法中放入的任何代码现在都只在setup方法中。 reactive是Vue3中提供实现响应式数据的方法. 如果想更新,可以通过重新赋值的方式. ref底层其实还是react…"}, {"id": "6844903709873274894", "title": "webpack+git开发环境将git中tag自动显示到web中", "desc": "每个文件里面记录着commit 标识,也就是该tag是在哪个节点上的,这里我们暂时不用处理那么深入(也许这个功能在别的地方能用到). 那我们就可以获取这些文件名称,然后再进行遍历得到tag编码最大的那个就好了,(通常tag都是逐渐增大的). 获取到最大的tag后导出一个对象出去…"}, {"id": "6844904117106655246", "title": "Vue2.0源码阅读笔记（十三）：性能分析", "desc": "在对Vue项目进行性能优化时，除了借助外部工具之外，还可以利用框架自身的性能埋点来加以分析。在分析具体Vue中性能埋点代码之前，先对监控前端性能的一些API进行简单阐述。 Performance 接口可以获取到当前页面中与性能相关的信息，可以通过 window.performa…"}, {"id": "6953904045505380365", "title": "理解Vue响应式原理", "desc": "通过手动去写一个简单模拟vue响应式原理demo，整理思路，去理解vue响应式原理。 在学习中不断进步！！！"}, {"id": "6844903864475320334", "title": "Vue 2.x折腾记 - (21) CNZZ统计在引流页中的应用姿势", "desc": "因为单页面开发，所以统计代码的封装和考虑点是我们需要着手设计的(比如维护性）。 我这边用的是第一种，为了方便定位问题，采取问答式来写这篇水文。 就是 .env 文件 + 模板插值 来实现； 前者是环境配置文件，后者是模板语言。 接着看我业务代码的实现，来加深你的了解。 为什么要…"}, {"id": "6844903654453936142", "title": "Cabloy全栈JS框架微创新之一：不一样的“移动优先 PC适配”", "desc": "目前流行的前端UI组件库都支持移动设备优先的响应式布局特性。但基于Mobile和PC两个场景的不同用户体验，也往往会实现Mobile和PC两个版本。 PC场景下的Web工程，如大量的后台前端管理模版，虽然支持Mobile自适应，但其用户体验差强人意。 Cabloy采用不同的思路…"}, {"id": "6844903601958027277", "title": "Vue官网中的约束源码解释 -- 生命周期", "desc": "关于生命周期的源码执行首先我们先来看一张官网的图：然后我们来看一下源码里什么时候开始执行各个生命周期的：1.beforeCreate、createdbeforeCreate和created钩子在cor"}, {"id": "6844903775291834381", "title": "Vue源码探究-核心类的实现", "desc": "几乎所有JS框架或插件的编写都有一个类似的模式，即向全局输出一个类或者说构造函数，通过创建实例来使用这个类的公开方法，或者使用类的静态全局方法辅助实现功能。相信精通Jquery或编写过Jquery插件的开发者会对这个模式非常熟悉。Vue.js也如出一辙，只是一开始接触这个框架的…"}, {"id": "6948688861773955102", "title": "前端自动化测试", "desc": "前端自动化测试主要应用在组件开发以及公共组件库的开发的一般不怎么变化的逻辑使用的时候才会用到，像是一般的业务代码开发平常是用不多的。因为业务会经常变化。 集成测试（integration Testing）将已测试过的单元测试函数进行组合集成暴露出的高层函数或者类的封装，对这些函…"}, {"id": "6948621728947896334", "title": "电商管理项目登录页面完成详细流程", "desc": "1. 电商项目的基本业务 2. 电商后台管理系统开发模式采用前后端分离 2. 后端项目技术栈（了解内容） 3. 项目初始化 1. 安装vue-cli 参考我安装了@vue-cli@4.5.9 2. 通过vue脚手架创建项目 3. 配置路由 4. 配置Element-UI 5. …"}, {"id": "6844904039142916104", "title": "vue移动端列表页缓存不刷新", "desc": "在移动端列表页中，上拉加载更多。当点击某一条li标签进入详情页，再返回时因为vue的特性，会重新加载列表页，就会导致刚刚查看列表内容的进度。为了解决这个问题，可以查用keep-alive。 目前可以解决返回刷新的问题。如有问题，再更正。"}, {"id": "6854573221560352781", "title": "这是一个有声音的Demo", "desc": "时常混迹于全世界最大同性交友社区的我，无意中发现了一个名为Tone.js的开源库，于是就在我幼小的心灵埋下了一颗种子🌱。似乎我可以用它来做点什么，终于有了一个尝鲜的机会，为了体验vite和vue3的魅力。总要写个demo练练手学习一下，花了一些业余时间，撸了一个有声音的dem…"}, {"id": "6844903591832977421", "title": "初探 VuePress", "desc": "前言文档内容不多，就花半天时间翻译了一下，比较匆忙，有一些不是很理解的地方翻译的不是很通顺甚至有错误，欢迎大家指正。VuePress中文个人觉得最大的亮点就是：VuePress文档是用VuePress"}, {"id": "6861898907069186061", "title": "Vue2响应式原理解析（一）：从设计出发", "desc": "Vue 的响应式系统是 Vue 最有意思的特性之一，data 只需要返回一个普通的字面量对象，在运行时修改它的属性就会引起界面的更新。现在都是数据驱动界面开发，这种设计对于程序员开发来说非常爽，关注点只用放在数据变化的逻辑上。并且 Vue 把这个特性抽象成了一个独立的 obse…"}, {"id": "6844903505900077064", "title": "使用 Skeleton Screen 提升用户感知体验", "desc": "一直以来，无论是web还是iOS、android的应用中，为了提升应用的加载等待这段时间的用户感知体验，各种奇门遁甲之术层出不穷。其中，菊花图以及由它衍生各种加载动画是一个非常大的流派，如下图所示： 在很多的应用的交互中，这种菊花的加载的设计已然要一统江湖了。 不过，现在对于加…"}, {"id": "6870627817009184776", "title": "Vue3 设计背后的思考", "desc": "本文翻译自：https://increment.com/frontend/making-vue-3/在过去的一年中，Vue团队一直在为Vue.js的下一个大版本工作。我们希望能在2020年的年中发布（"}, {"id": "6844904056532516872", "title": "基于vue实现一个新型肺炎疫情动态Demo", "desc": "这2020年可真不友好，新年伊始就爆发了这么严重的疫情，看着新闻上每天增加的数字，想想都害怕。作为一个小小的程序媛，除了待在家为国家做贡献之外，能做也就是写写demo实时关注着动态了(其实也是看到掘金上有好多大佬也写了相关的例子，所以自己也想玩玩)，希望有一天我们能战胜疫情，脱…"}, {"id": "6844903985124491272", "title": "深入浅出篇 — Vue", "desc": "一. 创建vue实例 二. 模板语法 - 插值 三. $watch - 用于监控数据前后的改变 四. 模板语法 - 指令 五. 模板的配置 六. 小结： 七. 计算属性 computed 八. 组件的创建和注册 九. vue的生命周期 十. 扩展 - 初识模块化 历史上，Jav…"}, {"id": "6850418108793651213", "title": "如何实现跨项目代码复用", "desc": "通常我们前端不仅仅只有一个项目，而是有多个项目同时开发，但是往往这多个项目之间代码有一些可以公用的地方，比如说我们的一些组件啥的，一般我们遇到相同的地方都是会直接选择复制，但是这样的问题也很明显，就是一个地方改了，要同时去修改其它的地方，这样显然不太合理，没有达到复用的目的。所…"}, {"id": "6844904163583721480", "title": "vue-cli骚操作之库的构建", "desc": "本文会探讨一下如何利用vue-cli快速构建一个库的工程化环境。 添加babel插件,less-loader,vue-loader,jsx-loader,ts-loader... 配置webpack的lib，umd,cmd,es... webpack优化，import(),压缩…"}, {"id": "6844903831461953549", "title": "ES6入门之函数的扩展", "desc": "1. 函数参数的默认值 2. rest 参数 3. 严格模式 4. name属性 5. 箭头函数 6. 尾调用优化 注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。 ES6 的尾调用优化只在严格模式下开启，正常模式是…"}, {"id": "6844903497716989965", "title": "像VUE一样写微信小程序-深入研究wepy框架", "desc": "微信小程序自发布到如今已经有半年多的时间了,凭借微信平台的强大影响力，越来越多企业加入小程序开发。 小程序于M页比相比，有以下优势： 1、小程序拥有更多的能力，包括定位、录音、文件、媒体、各种硬件能力等，想象空间更大 2、运行在微信内部，体验更接近APP 3、在过度竞争的互…"}, {"id": "6844903689539289102", "title": "Vue provide/inject 部分源码分析 实现响应式数据更新", "desc": "我这里理解应该没错哈，有不对的地方请指出。 现做了如下修改，可以达到父亲组件改变，下面的孙子组件都能更新数据.这样就是传入了一个响应式数据，如果需要双向数据的话，需要在child页面的computed 中手动写set 函数，computed 本身就只相当于一个get函数。 值得…"}, {"id": "6949052265802137630", "title": "从源码开始的vue3学习之路 - 响应性", "desc": "从源码开始的vue3学习之路 - 响应性新的响应性原理 —— Proxy新的语法 —— composition-api新的生态 —— vuex@next、vue-router@next、element"}, {"id": "6844904085632581646", "title": "Vue-API之全局配置（个人向）", "desc": "分析： 可以看出来整个config是进行了单独的整体的举例，然后配置完默认项后暴露出去，那么我们又是如何能够使用vue.confige.XXX 使用呢。 分析：，我们在这个文件中可以中看到，Vue在全局注入API 的时候将config注入.依然是用了Object.defineP…"}, {"id": "6961394878240718885", "title": "【Vue】012. v-show | v-if | v-for", "desc": "本文主要介绍Vue常用的三个API——v-show、v-if、v-for之间的练习与区别，以及在使用这三个API时的注意事项。"}, {"id": "6930634117948276744", "title": "手动实现Vue2.0响应式基本原理（小白纯属自己想像的写）", "desc": "在这个initData就是上文构造函数中的this.initData(),在这个函数中就要利用到我们之前讲到的Object.defineProperty,接下来就让我们来创建它吧。 这是很多小伙伴可能会疑惑了，我们平常再用Vue的时候直接给this实例本身上的属性赋值就可以了，…"}, {"id": "6900838982448316430", "title": "Vue 源码分析 - initComputed", "desc": "为计算属性新建 Watcher 实例，又称 computedWatcher - new Watcher()。 将计算属性代理到 vm 上 - defineComputed。 创建一个全空对象 vm._computedWatchers = Object.create(null)，…"}, {"id": "6844903609281445896", "title": "如何将 Vue 组件转成 React 组件？", "desc": "🛠️ 👉 Try to transform Vue component(jsx syntax) to React component"}, {"id": "6844903877704155149", "title": "【Vue原理】Mixin - 白话版", "desc": "今天我们用白话文解读 mixin 的工作原理，轻松快速理解 mixin 内部工作原理。你说，你只懂怎么用的，却不懂他内部是怎么工作的，这样也不太行。 而我觉得现在出一个 白话版，是让大家有兴趣去研究源码的时候，可以提前理清一下思路。暂时没时间了解源码的，也可以先了解下内部流程，…"}, {"id": "6923764693928509447", "title": "浅谈vue中key的作用及工作原理", "desc": "源码中找答案：corn/vdom/patch.js(updateChildren方法)demo:执行以上代码，正常返回的结果应该是：a,b,e,c,d，e插入到b和c中间；但是在不适用key的情况回发"}, {"id": "6844903590503383048", "title": "Vuex源码阅读分析", "desc": "Vuex是专为Vue开发的统一状态管理工具。当我们的项目不是很复杂时，一些交互可以通过全局事件总线解决，但是这种观察者模式有些弊端，开发时可能没什么感觉，但是当项目变得复杂，维护时往往会摸不着头脑，如果是后来加入的伙伴更会觉得很无奈。这时候可以采用Vuex方案，它可以使得我们的…"}, {"id": "6900551894993731597", "title": "VueRouter [路由机制原理]", "desc": "老样子，Vue.use(\"vue-router\") 会直接执行 install 初始化进行安装插件，这里我就不多做解释了，不太理解的童鞋可以去前章看一下简单的介绍。 好，install 初始化写的很清楚，跟 vuex 非常相似，都是安装，注册相关组件，通过mixin在生命周期创…"}, {"id": "6844903699911819272", "title": "我与Microtasks的前世今生之一眼望穿千年", "desc": "本文有标题党之嫌，内含大量Microtaks相关总结性信息，请谨慎服用。 2018年9月21日，虽然没有参加该场GDD，但是也有幸拜读了百度@小蘑菇小哥总结的文章深入浏览器的事件循环(GDD@2018),配注的说明插图形象生动，文终的click代码也很有意思，推荐大家阅读。这里…"}, {"id": "6844904105320644615", "title": "打造属于自己的项目脚手架工具----Vue CLI", "desc": "在index.js中将复制过来的代码简化。 可见生效。 可见，成功。 可见文字提示有颜色了。 成功。 可见发布成功。 测试拉下来的的pgx能不能用。 我们需要先把使用 npm unlink 把之前的映射去除。 到此为止就实现了自己的脚手架根据， 想要下载下来的模板跟vue 一样…"}, {"id": "6986828137724117022", "title": "vue 2.0基础汇总", "desc": "Vue 是一套用于构建用户界面的渐进式框架 1. 声明式渲染 文本插值 2.指令 自定义指令 3.动态参数 （:[]） 4.修饰符 5.监听与计算属性 （对象） 6.Vue能监听倒得数组方法 7.事件"}, {"id": "6964406592368279566", "title": "Vue 插件", "desc": "插件是自包含的代码，通常向 Vue 添加全局级功能。它可以是公开 install() 方法的 object，也可以是 function 插件的功能范围没有严格的限制——一般有下面几种： 添加全局方法或"}, {"id": "6844903560832876557", "title": "你也许不知道的Vuejs - 工欲善其事必先利其器", "desc": "具体工具的操作界面和如何使用，这里就不展示了。随便用搜索引擎搜索，就是相关介绍。大家可以根据个人喜好，来选择适合你的开发环境。 前面的文章中使用 Vue，都是直接引入源码方式来使用，但是实际开发中项目一般很复杂，并且会涉及到很多页面模板，不可能所有的功能我们都写在同一个js文件…"}, {"id": "6844903832938364935", "title": "论如何监听一个对象所有属性的变化", "desc": "本文分为入门和进阶两部分，建议有经验的读者直接阅读进阶部分。 好了，以上就是关于如何通过Object.defineProperty这个API来监听一个对象的变化的全部。 好了，以上就是关于如何通过Proxy来监听一个对象的变化的全部。 以上就是监听一个对象变化的所有内容了。不过…"}, {"id": "6865126806073294861", "title": "[译] Vue 3 迁移策略 —— 异步组件（破坏性改动）", "desc": "相对于 2.x 来说，另外一个改变是 component 选项现在被重命名为 loader，以便准确地传达不能直接提供组件定义的信息。 此外，与 2.x 不同，加载函数不再接收 resolve 和 reject 参数，并且必须始终返回Promise。"}, {"id": "6844904098500706312", "title": "Vue2.x的diff算法记录", "desc": "为什么在Vue3.0都已经出来这么久了我还要写这篇文章，因为目前自己还在阅读Vue2.x的源码，感觉有所悟。作为一个刚毕业的新人，对Vue框架的整体设计和架构突然有了一点认知，所以才没头没尾地突然写下了diff算法。 大体分为以上几点（可能是我还没看完全代码，有遗漏的地方希望大…"}, {"id": "6844903651337584653", "title": "使用D3.js+Vue实现一个简单的柱形图", "desc": "最近想在Vue的项目里尝试使用d3.js，封装一些常用的图表。这里记录一下自己搭建项目的过程，以及实现一个简单的柱形图。不了解D3的请移步D3 Data-Driven Documents，它是基于数据驱动文档工作方式的一款JavaScript函数库，主要用于网页作图、生成互动图…"}, {"id": "6844903939167485960", "title": "每天一点网站优化之：给vue应用添加骨架屏", "desc": "骨架屏是在页面数据尚未加载完成前先给用户展示出页面的大致结构, 解决了js加载时间过长页面白页的问题，同时，相对于loading动画，骨架屏的过渡效果更加平滑，用户体验更好。 骨架屏可以由开发人员手动编写，这篇文章中我们使用chrome推出的Node库puppeteer，自动为…"}, {"id": "6844903741892591624", "title": "Vue教程15：Vue组件", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 通过Vue.component可以注册一个组件，再将其导出到入口vm.js即可。 可以直接通过<cmp1 name=\"Lee Chen\" age=\"18\" :list=\"[1, 2, 3]\" />使用组件，这样无…"}, {"id": "6943779391813976078", "title": "前端动画展示方案", "desc": "在开发过程中我们通常需要一些动画特效使页面变得更加精致，通常我们会使用css的animation、svg等来实现这些效果，但对于一些复杂的效果就不适合了。我们业务使用的uniapp，所以需要进行跨端，为了解决这些问题我们可以使用以下方案。 在具体中会产生一个canvas，所以在…"}, {"id": "6844904032436240397", "title": "Python Flask 模板参数传值给 Vue", "desc": "最近在项目开发中遇到这样一个问题：后端使用的是 Python Flask 框架，渲染方式为后端渲染。而前端使用的 Vue 技术栈。页面的显示通过后端渲染生成的 dist 包中的 index.html 文件来实现。由于项目的历史包袱，后端需要传值给前端，前端需要在某些组件中使用后…"}, {"id": "6844904131136585742", "title": "手写 Vue （二）：响应式", "desc": "1. 响应式的本质 提到 Vue 的响应式，通常指的是视图跟随数据的改变而更新。开发上带来的便利是，在需要更新视图呈现时，只需修改视图渲染所需要的数据即可，而不用手动操作DOM。从实现来说，可以分为两个部分： 我们很熟悉如何监听鼠标的点击，键盘的输入等用户事件，但是很少直接去监…"}, {"id": "6844903956984905741", "title": "vue-type-check: Vue 模板中的 Typescript 类型检查", "desc": "越来越多人开始尝试使用 Typescript 编写他们的 Vue 项目，Vue 本身也在不断加强对 Typescript 的支持（官方提供 vue-class-component 库、使用 Typescript 编写 Vue 3.0 等），但是对于组件中模板部分的类型检查仍然有…"}, {"id": "6844903651014606862", "title": "[译] 用 React 和 Vue 创建了两个完全相同的应用后，发现了这些差异", "desc": "在工作中使用 Vue 一段时间后，对它的工作原理有了相当深入的了解。然而，我很想知道篱笆另一边的草地是什么样 - React。 我已经阅读了 React 文档，也观看了一些教程视频，虽然它们都很棒，但我真正想知道的是 React 与 Vue 到底有什么不同。这里的「不同」不是指…"}, {"id": "6906046456449204231", "title": "理解&实现（二）：Vue3 响应式原理", "desc": "Vue3 使用 Proxy 对象重写响应式系统。相比 Vue2有以下不同： 修改属性，响应式。重新赋值，不是响应式，需要再次使用 reactive 处理 参数为基础类型，内部创建具有value属性的对象，value属性具有getter和setter。 返回的对象，重新赋值成对象…"}, {"id": "6844903702562603016", "title": "在 React 和 Vue 中尝鲜 Hooks", "desc": " "}, {"id": "6904513212134195214", "title": "从搭建UI组件库了解Vue3", "desc": "起步使用vite搭建yarnnpm总结Vue3与Vue2区别90%的写法完全一致，除了以下几点Vue3的Template支持多个根标签Vue3有createApp()，而Vue2的是newVue()c"}, {"id": "6844903541031583752", "title": "vue-router先hash模式部署项目，然后开启histroy模式 ，引发的几个问题以及histroy模式的开启方式、优点", "desc": "vue路由有一个HTML5 History 模式,这个模式要在路由里面另外开启的，很多人在刚使用路由的时候之前不知道这个模式，所以并没有启用，然后就把项目部署上去了，因为这个模式还是有挺多优点的，最后还是会开启这个模式。 然而因为之前使用hash模式再改为histroy模式还是…"}, {"id": "6990979274907844615", "title": "Vue3学习 --- 条件-列表渲染-diff算法", "desc": "key主要用在Vue的虚拟DOM算法，在新旧Nodes对比时辨识VNodes。不使用key，Vue默认用“就地复用”策略。使用key时，会基于key的变化重新排列元素顺序，并且会移除key不存在的元素"}, {"id": "6854573219660496909", "title": "Element组件源码研究-Layout，Link，Radio", "desc": "本文的研究思路是通过阅读Element源码，然后自动动手一步一步编写组件，完善其对应功能。 研究过Input和Button之后，再来看看Element布局的实现。看看有什么值得我们学习的。 Element是通过24 分栏，迅速简便地创建布局。实现原理是利用百分比，将一行视为宽度…"}, {"id": "6844903589081513991", "title": "[基础向]Vue主要原理最简实现与逻辑梳理", "desc": "Vue的主要原理中主要用到了定义的这么几个函数Dep，Watcher，observer。 我们来使用这几个函数简单的实现一下vue构造函数数据绑定和相互依赖部分，梳理一下它们之间的关系。 省略了编译部分和proxy代理与其他的一些复杂逻辑。 劫持过程中，在闭包内创建对当前属性的…"}, {"id": "6906747927356669965", "title": "Vue官方文档解读系列(二)：自定义组件上的 v-model", "desc": "本文主要根据官方文档中的自定义组件上的 v-model 一栏，阅读后加上自己的一些理解和例子的补充。因为在参阅Vue官方文档时，有一些内容作者没有加上例子配合解释(可能觉得太简单了)，所以有些含糊不清，初学者不是很能理解，所以写了这个系列。在自己的理解上加上一些例子，希望能帮助…"}, {"id": "6844903877708349448", "title": "【Vue原理】Methods - 源码版", "desc": "如果你觉得排版难看，请点击下面链接或者拉到下面关注公众号也可以吧【Vue原理】Methods-源码版今天我们解读methods的源码，其实methods挺简单的，所以就不打算出白话版了，但是metho"}, {"id": "6844903697458135047", "title": "饿了么技术沙龙 | 前端开放日", "desc": "饿了么技术沙龙第33弹前端开放日将于10月28日在北京大学第二教学楼519教室举行"}, {"id": "6913516171723538445", "title": "[vue2] 一个很简易的计算器", "desc": "目前实现的功能： 1.X后退一步，C全部清除 2.支持小数点和负数 3.一次运算输出一个结果，再次运算是与上一次的结果 核心代码: 还存在的问题： 限制用户输入3.0.0.0这类不合法数据 限制用户输"}, {"id": "6944014823491534855", "title": "源码分析vue watch侦听器", "desc": "{boolean} deep 为了发现对象内部值的变化，可以在选项参数中指定 deep: true。注意监听数组的变更不需要这么做 在vue源码入口文件vue/src/core/index.js中，可以看到import Vue from './instance/index'，导…"}, {"id": "6844904181451456525", "title": "学习vue源码（8）手写优化器", "desc": "前面的 学习vue源码（6）熟悉模板编译原理我们谈到 模板编译分为解析器，优化器，代码生成器。 在学习vue源码（7）手写解析器里我们已经学会了解析器怎么实现，现在 就来看看 优化器怎么实现吧。 ul 就是静态根节点。 然后在循环 children，如果 children 中出…"}, {"id": "6980294817934737415", "title": "vue-cli3用图形化的方式创建项目", "desc": "用图形化来添加element-ui依赖 推荐 说几个重要的点。 预设要选择 手动配置 功能 要选 第一个babel router vuex Linter/Formatter 和最后一项 使用配置文件。"}, {"id": "6844903945769320462", "title": "Vue.js slot 插槽", "desc": "在开始学习插槽的时候并不是很理解,看了一眼就过了,现在进入项目组后不得不看了,所以决定重新学习一遍,通俗来讲插槽(也就是slot)，是组件的一种HTML的模板，这块模板显示不显示、以及怎样显示由父组件来决定。实际上，一个slot最核心的两个问题在这里了，是显示不显示和怎样显示。…"}, {"id": "6844903655406043143", "title": "终极蛇皮上帝视角之微信小程序之告别“刀耕火种”", "desc": "这样一来和日常开发前端页面的体验相比来说，简直就像在刀耕火种。 在 webpack-simple 中文件结构和小程序相似。 而在 webpack-vue 中还增加了 vue-loader，因此你甚至还能利用 .vue 文件编写单文件组件。 既然用 webpack 来编译源代码，…"}, {"id": "6844903965469966343", "title": "VirtualDOM的简单实现", "desc": "虚拟DOM(Virtual DOM)是Vue和React框架实现数据动态更新视图的关键技术，它利用JS运算速度优与DOM从而大大提高的视图渲染性能。由于虚拟DOM是用一个普通对象来表示视图节点结果，所以可以利用这个对象来渲染到不同平台，生成对应的原生控件来实现跨平台。 我们创建…"}, {"id": "6943898616217993229", "title": "前端学习笔记01——Vue解决跨域问题", "desc": "跨域问题在前端可以说是很常见的，在解决这个问题之前，我们可以先了解为什么需要跨域。以下内容参考自MDN，链接：浏览器的同源策略。目前因为我只试过Vue解决跨域，所以只会Vue解决方法，还有一些内容后续会改进啦！ 简单来说就是判断脚本是不是和自己同源，只有和自己同源的脚本才会被执…"}, {"id": "6943623495372767245", "title": "源码分析vue响应式原理", "desc": "在vue源码入口文件vue/src/core/index.js中，可以看到import Vue from './instance/index'，导入了Vue这个对象。 可以看到Vue是一个函数方法，调用该方法时会调用一个叫_init的初始化方法，并传入options参数，同时这…"}, {"id": "6844904154456915981", "title": "Vue CLI 源码探索 [五]", "desc": "Vue CLI 源码探索 [六] 探索下 Vue CLI 的插件机制，内容较多，请慢慢看。涉及如下插件（@vue/cli-plugin-vuex/router/babel/typescript/eslint） 上面这段代码已经清晰的告诉我们，测试工具 jest，为了熟悉这个工具…"}, {"id": "6844903838923620359", "title": "Vue数据绑定简析", "desc": "作为MVVM框架的一种，Vue最为人津津乐道的当是数据与视图的绑定，将直接操作DOM节点变为修改data数据，利用Virtual Dom来Diff对比新旧视图，从而实现更新。不仅如此，还可以通过Vue.prototype.$watch来监听data的变化并执行回调函数，实现自定…"}, {"id": "6991488986271186974", "title": "对vue响应式数据不是对所有的属性都起作用", "desc": "这里是我读文章注意到的问题: 注意到data方法中的属性 就是vue只有写到data中的才会去绑定监听他的变化, 例如对象obj中如果在data外面新添加的属性obj.test就不会被监听可以看下面两"}, {"id": "6927226793954902029", "title": "Vue3.0的深入学习", "desc": "2020年09月18日在万众期待中Vue3.0正式版发布于git上并被命名为‘One Piece’。这也许在这个并不平凡的一年里不算一件大事，但是对于我们广大的前端开发者开讲是一个轰动的事情。Vue3.0历经了2年多的开发工作，终于带着全新的特性在万众期待中来了。 Vue3.0…"}, {"id": "6844903540708605959", "title": "vue 数独", "desc": "咋样是不是很酷炫，看到这个顿时按耐不住一颗程序员的心，然后花了2、3个晚上的时间写了个大概。。 怎么样是不是感觉（完全没有）掌握到精髓。。。 恩好吧，虽然我们长得丑但基本功能还是有的，在数据生成这块也是有些值得思考的地方。 数独是源自18世纪瑞士的一种数学游戏。是一种运用纸、笔…"}, {"id": "6919762899858620424", "title": "基于vue2手写一个简易的Vuex", "desc": "前言vuex官方使用说明文档vuex源码地址Vuex是专为Vue开发的状态管理器,因为内部是基于vue开发state存放状态,getters加工state给外界mutations修改state的唯一途"}, {"id": "6844904175055159304", "title": "【Vue2】2. 文本响应式更新（响应式原理）", "desc": "Vue是数据驱动视图模式，数据变更后，会自动更新视图。开发很便利，不要手动管理视图更新。哪 Vue 是如何实现自动更新，也就是响应式的？ 一般而言，对于基本类型的值是否变化，可以对比前后值是否相同。对于引用类型是否有变化，则可能需要递归判断属性是否都一致。 在 Vue 中，组件…"}, {"id": "6980255686433177608", "title": "配 置", "desc": "..................................................................."}, {"id": "6844903671914856462", "title": "mpvue“踩坑”指南", "desc": "mpvue是一个使用 Vue.js 开发小程序的前端框架。框架基于 Vue.js 核心，框架整体和vue语法保持一致，整体开发体验良好。但是越往深处走，越会发现一些问题。 1. 同一个页面被多次打开所引发的问题 这个需求是没毛病的，就是当我们从 别人的主页 -> 我的关注 ->…"}, {"id": "6887875789635715079", "title": "vue+express+mongodb——个人全栈博客项目（一）", "desc": "后台管理与博客分开写在两个vue项目里，使用vue-cli脚手架的项目，自己再改造一下。 这次是我的第一个完整的全栈式开发，作为一个小白，在这次开发中，遇到了很多问题。往后的时间里(最近在尝试项目的优化、项目文档的补全)，我会就我这个项目中的三个部分(web、admin、ser…"}, {"id": "6954264499444514824", "title": "从0到1  搭建H5版网易云音乐（1）", "desc": "基于vue3.0 vue-router4.0 vuex4.0 typescript Vite2.0 H5版本的网易云音乐项目,欢迎大佬指点😘"}, {"id": "6992878683165818887", "title": "Vue3追本溯源(四)template模版编译", "desc": "接上篇双向数据绑定解析完setup方法并代理了数据，setupState 和 ctx属性都设置了get、set钩子函数后开始进行template模版编译(以本例为模版进行解析) 本例 template"}, {"id": "6933415994727612429", "title": "这次我们要说点不一样的Vue中h5移动端开发知识点", "desc": "在某个狂风暴雨的早晨，经过漫长的讨论研究的深度学习后，解决了一个传值过程中的深度大坑，写下此篇文章记录一下。 大家可以看到我在上面注释了很多代码，说出来都是泪。我将监听输入中文的两个方法单独拿出来封装，这是因为要将输入中文和其他字符进行区分开，先看handleInput方法，当…"}, {"id": "6844903639815815181", "title": "3YAdmin-专注通用权限控制与表单的后台管理系统模板", "desc": "3YAdmin基于React+Antd构建。GitHub搜索React+Antd+Admin出来的结果没有上百也有几十个，为什么还要写这个东西呢？ 一个后台管理系统的核心我认为应该是权限控制，表单以及错误信息收集这三大块，前两个最为重要。而GitHub上的大多数项目关注点都不在…"}, {"id": "6844904187126349831", "title": "【踩坑】微信端vue+vant+better-scroll ，目前基本填平欢迎讨论~", "desc": "本篇文章为基于better-scroll的 vue 移动端项目踩坑记录，主要围绕better-scroll这个插件在项目中所带来的问题进行记录。 详情可以参考下方目录。 的这个问题。 如图所示，微信浏览器还真的是奇奇怪怪（还有比如说 ios 的底部导航条）。于是我就很好奇为什么…"}, {"id": "6844903698431213582", "title": "实例入门 Vue.js 单元测试", "desc": "作为一个以 文档丰富 而广为人知的前端开发框架， Vue.js 的官方文档中分别在《教程-工具-单元测试》、《Cookbook-Vue组件的单元测试》里对 Vue 组件的单元测试方法做出了介绍，并提供了官方的单元测试实用工具库 Vue Test Utils；甚至在状态管理工具 …"}, {"id": "6844903975041368078", "title": "Vue 中使用jsx示例", "desc": "为什么要在Vue中使用jsx呢，首先我们需要了解JSX是什么，它解决了什么问题，最后如何使用它。 可以将 模版分离 这样模版的每个部分更加独立，又可以随机的组合，复用性更高。相比与组件的组合，粒度更细 虽然了解了jsx的相关定义，可能对它还是比较陌生，首先要知道无论在 Vue中…"}, {"id": "6844904100996333581", "title": "vue 中4个级别的作用域", "desc": "除了 JS 已有的功能外，Vue还具有自己独特的作用域级别。作用域控制可以使用哪些变量以及在何处使用。它控制它们对应用程序的不同部分的“可见性”。 了解 Vue 提供的作用域级别之间的差异会帮助我们编写更清晰的代码。 来看看这些作用域分别是什么。 Vue 应用程序中的全局作用域…"}, {"id": "6844904112979443720", "title": "keep-alive的实现原理及LRU缓存策略", "desc": "我们先来看看 官方文档中keep-alive 的用法。 max: 最多可以缓存多少组件实例。(2.5.0 新增, 一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉) keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁他们。…"}, {"id": "6844904202683039751", "title": "利用husky&lint-staged构建代码检查工作流", "desc": "对于具有一定工程素养的同学来说, 都会尤为注重编码规范, 而代码风格检查(lint)是确保编码规范一致性的重要手段. 更高的代码可读性. 代码写出来最终还是需要给其他人阅读的, 乱乱糟糟的代码, 会让代码阅读者望而却步, 代码通常难以理解, 也就无从谈起代码的可维护性了. 更少…"}, {"id": "6844903555602612231", "title": "Vue 实践过程中的几个问题", "desc": "本篇是我在使用vue过程中，遇到的几个小问题和之前不了解的东西，记录下来，希望能够帮助各位踩坑。如果喜欢的话可以点波赞，或者关注一下，希望本文可以帮到大家。 比如一些弹幕，走马灯文字，这类需要定时调用的，路由跳转之后，因为组件已经销毁了，但是setInterval还没有销毁，还…"}, {"id": "6844903587097608200", "title": "美团小程序框架mpvue入门教程", "desc": "一发不可收拾，今天趁周末空闲，来写个mpvue(没朋友)的简单入门教程，本教程只针对新手，老鸟勿喷。 安装一下依赖，即可直接在此基础在开发，不需要做任何配置。如果你觉得该项目对有帮助， 学习最好的方式就动手，我们就徒手撸一个demo项目出来跑一跑，看看到底有没有官方说的那么好。…"}, {"id": "6844903967877513230", "title": "在vue3🔥源码中学会typescript🦕 - \"is\"", "desc": "vue3🔥是用typescript实现的, 所以我认为他的源码是我们学习tyepscript的最佳实践, 下面我就用他源码中的实例让大家学会使用typescript的\"is\"特性. 是一种类型推断表达式的关键字, 通过和函数返回值的比较, 从而\"缩小\"参数的类型范围. 😠看…"}, {"id": "6856717272997462029", "title": "初识g6：编辑可视化流程图", "desc": "..."}, {"id": "6844903728764452878", "title": "骚年，Koa和Webpack了解一下？", "desc": "有必要声明下，很多人在没看完这篇文章之后，就评论一些和文章主题不相符的内容。 这篇文章主要讲述的是如何在本地开发环境下通过启动node服务器之后，无缝启动webpack，从而达到前后端配置一体化。 适合做node全栈项目、node中间层，配合前端项目、等等。 实现继承,采用的是…"}, {"id": "6884903713966981127", "title": "Vue3.0 尝鲜", "desc": "setup方法接受2个参数。 第二个参数是 context ，它是一个普通的对象（不是响应式的）并且暴露出3个组件属性。1. arrts 2.emit 3.slots 值得注意的是：在 Vue2.x 中，销毁实例的两个钩子是 beforeDestory 以及 destoryed…"}, {"id": "6979138978809118734", "title": "vue3.x的插槽实现原理", "desc": "使用方法 用于只有一个插槽的情况： 具名插槽 用于多个插槽的情况： v-slot也可简写成# 作用域插槽 作用域插槽可以给插槽传入组件的作用域参数 也可使用es6的解构语法解构插槽 也可用动态插槽名 "}, {"id": "6988439349574500383", "title": "vue对数组的响应式", "desc": "```js export function initState (vm: Component) { vm._watchers = [] const opts = vm.$options if (opt"}, {"id": "6962508549830213646", "title": "vue中的keep-alive的用法详细讲解", "desc": "问题描述（什么是keep-alive） keep-alive顾名思义，保持活跃。保持谁活跃呢？ 首先我们知道，因为vue就是组件化编程，一个.vue文件就是一个组件。就像万事万物一样，都有从出生到消亡"}, {"id": "6844903750218285070", "title": "理解virtual dom的实现细节-snabbdom", "desc": "最近想了解一下React和Vue框架分别在virtual dom部分的实现，以及他们的不同之处。于是先翻开Vue的源码去找virtual dom 的实现，看到开头，它就提到了Vue的virtual dom更新算法是基于Snabbdom实现的。于是，又去克隆了Snabbdom的源…"}, {"id": "6844904149507637256", "title": "从剖析Vue-cli源码出发完整的React业务脚手架实践（二）——项目的构建及服务（create）", "desc": "这是一篇长期持续更新的React脚手架实践，吸取Vue Cli的脚手架经验，通过我们习惯的插件-预设的思想去构造我们的React业务脚手架，这可能不是最好的脚手架的开发实践，但是一定是最完整的脚手架开发实践教程。 上一篇文章，我们写到了create.js业务，上述命令是终端命令…"}, {"id": "6945634348464865317", "title": "Vue的前世今生", "desc": "对于对象属性进行递归调用walk，以保证data整个对象树中的属性都是响应式对象。 defineReactive中使用watchers数组储存watcher，使用Object.defineProperty的get函数收集watcher和返回值，set函数用来设置值和对watch…"}, {"id": "6942132016510926861", "title": "vue之diff算法", "desc": "我们知道 Vue 使用的是虚拟 DOM 去减少对真实 DOM 的操作次数，来提升页面运行的效率。今天我们来看看当页面的数据改变的时候，Vue 是如何来更新 DOM 的。Vue和React在更新dom时，使用的算法基本相同，都是基于 snabbdom。 当页面上的数据发生变化时，…"}, {"id": "6844904006100189191", "title": "Vue异步组件加载失败重试", "desc": "近期在做一个活动，涉及到的弹窗比较多，想着把这些弹窗都作为异步组件来加载，能尽可能地提高首屏加载速度。 既然用了异步组件，就要考虑异常情况（网络的不确定性，不信你进个电梯试试。上图利用DevTools的请求拦截功能模拟网络异常的情况），而查阅Vue文档并没有发现异步组件重新加载…"}, {"id": "6844903655229882382", "title": "koa2+vue+axios搭建一个博客台管理系统之session踩坑", "desc": "我的博客的服务端是采用的koa2 + MySQL，后台管理界面采用的是：Vue+ElementUi+axios。这都是些常规组合，没有什么好说的。 ==koa-session-minimal：== 因为koa本身并不能处理 session，在 koa 中处理 session 需…"}, {"id": "6844903872553549832", "title": "vue  项目工程化规范", "desc": "在一个团队中，一般会同时有多个项目在开发，我们除了要开发自己主要负责的项目，偶尔也会因为客观因素去开发别的团队或个人主导的项目。这时问题就出现了，我们需要花一定的时间去了解项目的目录结构，并且努力遵循当前项目的一些潜在的规范（即使这些规范内心是拒绝的，为了不破坏整体性也会去遵守…"}, {"id": "6909294917172887565", "title": "基于vue+vuedraggable实现拖拽布局效果", "desc": "采用flex布局左右自适应1.先介绍配置页面：遍历模块数组渲染模块：引入单页面模块组件：初始化数据：钩子函数获取页面布局：在拖动结束的onEnd()事件中设置新布局：附上拖拽相关的样式代码：前台配置并"}, {"id": "6911612447329632263", "title": "[Vue组件]一口气码了一个适用性高的卡片式轮播图组件", "desc": "最近做店铺页面，需要一个卡片式轮播组件。网上很多都是类似于网易云的普通轮播组件，探索几番还是决定自己写一个组件出来。 编写轮播组件要克服的难点是切换图片时的动画设计。以下是我的设计思路： 1.存在两个div元素，分别为.image-list和.virtual-list。.ima…"}, {"id": "6946077427680575519", "title": "基于vue+element-ui实现Cascader级联选择器+Table树形数据", "desc": "开发进度提前50%，啊，真香。 options属性指定选项数组即可渲染出一个级联选择器，所以后端接口返回的数据结构要保持一一致性，这样处理起来会省很多事。 到这里级联选择器就写完了。 当我按部就班准备写Table列表时，就发现了神奇的一幕，如开篇图所示，树形结构自动生成了，当时…"}, {"id": "6857432749172031502", "title": "用vue-cli3从0开始搭建一个多入口，国际化的前端项目", "desc": "大家好，我是Frank。最近公司准备开发一个功能，由于功能复杂，且需要多端协同开发，所以，单拎出来新建了一个git项目。项目中用到的技术也是大家耳熟能详的，比如，vue-cli3、vie-router、vue-i18n、element-ui、dayjs、eslint、style…"}, {"id": "6844904115806404615", "title": "Vue通过$emit实现父子组件的通讯原理", "desc": "父子组件通讯的方法之一是使用$emit。 它的作用是循环执行当前 vm （组件实例）的 _events 属性内某个 event （事件名）对应的事件回调列表。也就是触发事件。 Vue.prototype.$emit定义在src/core/instance/events.js中。…"}, {"id": "6847902222747975688", "title": "基于vue-cli4.0+Typescript+SSR的项目实践", "desc": "简介极速传送门:基于vue-cli4.0+Typescript+SSR的小Demo最终效果:访问，返回的是html片段，并且从chunk中分离了vue依赖VueSSRDemo已实现：项目搭建本地ssr"}, {"id": "6844904104322400269", "title": "手摸手系列-和你深入浅出源码解析Vue diff过程", "desc": "要理解diff过程，那必须了解虚拟Dom，vue是声明式操作dom，通过描述状态和dom之间的映射关系，将状态渲染成视图，Vue中使用模板来描述状态与Dom之间的映射关系，通过编译将模板转换成渲染函数(render)，执行渲染函数就可以得到一个虚拟节点，然后使用这个虚拟节点树就…"}, {"id": "6897102171037237261", "title": "解决 vue-element-admin Tags-view 标签刷新消失问题", "desc": "1. /src/store/index.js 代码如下 2. /src/layout/components/TagsView/index.vue 代码如下： 2.1. 全部代码"}, {"id": "6844903656785969159", "title": "Vue 项目升级到 webpack4.x 小纪【附代码】", "desc": "自 webpack 4.x 发布以来，就独得码农恩宠。我公司的项目是基于 webpack 3.x 版本的 vue 项目， 替换它，于是开始了折磨人的升级过程。 现将自己的升级过程记录如下，希望能给需要升级 vue 项目的朋友一点参考价值。 由于要升级的包很多，一个个操作起来麻烦…"}, {"id": "6844903615241404423", "title": "你也许不知道的Vuejs - 最佳实践(1)", "desc": "有了前面文章的铺垫，相信一路看过来的新手的你开发一个中型的 Vuejs 应用已经不在话下，包括 Vuejs 生态核心工具（vue-router，vuex）的使用也不成问题。但是在实际项目开发过程中，我们要做的工作不仅仅是完成我们的业务代码，当一个需求完成后，我们还需要考虑更多后…"}, {"id": "6977629961268297765", "title": "【面试】以面试者的角度回答Vue中的diff算法（附图示diff运算过程）", "desc": "面试者角度回答 面试官：“请你简述Vue中的diff算法”。 你： diff算法在什么时候运行呢？当我们当前组件所依赖的数值更新和组件创建时运行update函数，update函数会调用组件的rende"}, {"id": "6871052602205798407", "title": "「Vue学习记录一」开发环境准备", "desc": "① 找到 vue-devtools 的 github 项目，并将其 clone 到本地. vue-devtools 浏览器输入地址\"chrome://extensions/\"进入扩展程序页面点击\"加载已解压的扩展程序...\"按钮，选择 vue-devtools>shells 下…"}, {"id": "6943132678233260045", "title": "axios的get、post、文件上传、下载封装", "desc": "该文只讲封装，不涉及下载安装原理讲解。以下所有的封装代码需要写在一个文件内并将其暴露，并在写入 API 的文件内引入。 withCredentials: true 在发起跨域请i去的时候，后端已经开启CORS，前端需要也携带cookie，此时需要前端的请求头加上此配置，表示请求…"}, {"id": "6844903590901841928", "title": "借助webpack对项目进行分析优化", "desc": "由于项目过于庞大，老旧。目前项目包含了打包过慢，冗余文件过多等诸多问题。文章中会一步步介绍我是如何通过webpack进行分析，定位并解决这几点问题的。告别刀耕火种，向坏代码说再见！"}, {"id": "6924930584774967310", "title": "Vue3.0笔记之🙈生命周期", "desc": "开始创建组件之前，创建data和method，在beforeCreate之后和created之前执行。 挂载前，组件挂载到节点上之前执行的函数。 挂载完成，组件挂载完成后执行的函数。 组件更新前，组件更新之前执行的函数。 组件更新完成后，组件更新完成之后执行的函数。 组件销毁前…"}, {"id": "6844903768086036487", "title": "如何在Vue中书写JSX", "desc": "因为在全局加载了element-ui库，所以在JSX中可以识别el-button组件。如果是自己编写的控件，需要在components中引入该控件，或者像babel-plugin-transform-vue-jsx文档中介绍的，直接在render函数中使用import进来的控件…"}, {"id": "6844903517149200397", "title": "Vue实现一个页面缓存、左滑返回的navigator", "desc": "本文将介绍如何在不使用vue-router提供的router-view的情况下，实现一个渲染路由对应组件的navigator控件，并逐步增加主副舞台区分、页面缓存、页面切换动画、左滑返回支持等功能。 笔者所在公司所开发的webapp为单页面应用，原来使用的框架为Backbone…"}, {"id": "6979415878873907236", "title": "VUE踩坑——less-loader的安装", "desc": "VUE踩坑篇 npm install less less-loader --save-dev报错总结及解决方案"}, {"id": "6922266264207360007", "title": "IM系统中的表情、emoji打开的正确姿势！~~~", "desc": "上面类似表情的展示的时候是一个img，但是他的实质内容是文本例如:smile: :applaud: 这些可以把他当做是占位符，我们实际服务器存储的也是文本。 我猜各位大佬都已经猜到了使用雪碧图嘛。（不详细讲了！~~~~） 思路：就是我们直接往里面插标签不就OK了嘛！！~ 以下代…"}, {"id": "6922258176582778894", "title": "Vue源码之patch", "desc": "可以看到第一次初始化渲染时把旧的vnode赋值给了vm._vnode,后面再次渲染时把首次渲染的vnode赋值给了preVnode，最后调用了vm.patch(prevVnode, vnode) 传入新旧vnode。也就调用了patch函数。这⾥执⾏ patch 的逻辑和⾸次渲…"}, {"id": "6901682730329702408", "title": "Vue源码解析系列(四) -- 来实现一个双向绑定吧(吊打面试官)", "desc": "通过学习了Vue源码解析系列(三) -- 响应式系统的依赖收集与视图更新和Vue源码解析系列(二) -- 响应式系统内部是怎么运行的,我们对Vue的响应式系统有一定的了解，并且知道它是如何实现数据更新视图，视图改变数据的,那么有这样的基础，我们来手写一个MVVM，以便面试的时候…"}, {"id": "6975159069673783309", "title": "vue-cli v2版本初始化本地模板教程", "desc": "万事开头难 首先我们得找到怎么玩这个东西。直接去github上面的vuejs，正确入口https://github.com/vuejs 点击vue-cli脚手架 注意到这个版本没有，选择v2版本，我们"}, {"id": "6904560856210620429", "title": "[element-ui源码]element-ui的collapse-transition到底写了什么？", "desc": "1.回顾涉及到的基础[Vue深入浅出]知晓Vue中的render函数2.element-ui中的collapse-transition.js源码：场景：在el-tree，el-menu，el-coll"}, {"id": "6854573218640953351", "title": "小白看源码之Vue篇-1：new Vue()干了什么？", "desc": "距离本小白接触前端开发也已经快将近一年了，从开始的连闭包的原理都需要了解一个晚上（虽然目前深入其原理我也说不明白）到现在能够自己独立完成一个简单的单页webapp，回顾近一年的时间，也是按照前人留下的足迹，一步一个脚印的走，从html到css再到js再到jQuery库，再到we…"}, {"id": "6844903919944990728", "title": "自定义模态框--Vue.js", "desc": "在实际开发某个项目的时候，使用的是Element-UI库，因为该库的模态框默认颜色只有白色，而项目的需求是需要其他的颜色，在尝试修改原UI的颜色之后，发现在初始渲染的时候，会有颜色的闪动，放弃这个方法，又开始使用JS直接操作DOM结合setTimeout函数，实现了最终的效果，…"}, {"id": "6844904195238150157", "title": "Vue1.x 2.x 3.x 的响应式实现", "desc": "Vue 的响应式原理一直都在被人解析，每个人都有不同的理解，在这里我只是记录自己所学的知识，以及尽可能写的清晰，并且希望能帮到还没有理解的同学。 编译模版，只要模版内引用了 data 内的属性，就创建一个 Watcher，通过 Watcher 与更新函数、渲染函数之间建立一个关…"}, {"id": "6943480916622704653", "title": "js的常见的三种密码加密方式-MD5加密、Base64加密和解密和sha1加密详解总结", "desc": "写前端的时候，很多的时候是避免不了注册这一关的，但是一般的注册是没有任何的难度的，无非就是一些简单的获取用户输入的数据，然后进行简单的校验以后调用接口，将数据发送到后端，完成一个简单的注册的流程，那么一般来说，密码是不做加密的。但是也有一些数据库里面存放的是加密后的密码，这样有一..."}, {"id": "6844903783835631629", "title": "Vue案例引发的「嵌套组件」通信的简单方式", "desc": "我们都知道 Vue 是采用组件化开发的模式，组件化的优势在于相对独立，易于维护，可复用。你可以把项目看成许多组件的组合而成。 既然项目中存在很多的组件，而且又是相对独立的，但组件间肯定是存在数据的传递交互。Vue中给我提供比较多的方式去进行组件间的交互通信。 这篇文章不打算详尽…"}, {"id": "6844904110974566414", "title": "如何使用gitee pages部署vue cli3静态页面", "desc": "话不多说，我们先来了解一下什么是gitee pages。 注意：在打包的过程中，是默认不把忽略dist文件的，这样我们的线上代码就不能够获取到最新的dist文件夹。我们只需要将.gitignore里的/dist注释掉就好了。 1.我们选中代码分支，将部署目录改为dist，这样我…"}, {"id": "6905999691977392142", "title": "手把手教你实现一个简易的Vue组件在线编辑器", "desc": "vue-cli使用过vue的我想大家都知道，那么xxx.vue组件是怎么运行的呢？怎么把template,script,style渲染到页面上的呢？今天我们手动写了个简易的Vue组件在线编辑器玩一玩。 我们想到的是在拿到输入的内容之后，我们希望获取都tempalte,scrip…"}, {"id": "6844903588334927885", "title": "源码解读： Vuex 的一些缺陷", "desc": "众所周知，Vuex 是 Flux 架构的一种实现。Flux 清晰确立了数据管理场景下各种职能单位，其主要准则有： Vuex 也是紧紧围绕这些准则开发的，通过 store 类提供 Flux 模式的核心功能。在满足架构的基本要求之外，则进一步设计了许多便利的措施： 网上已经有很多解…"}, {"id": "6844903553115357192", "title": "解读 Vue 的模板编译", "desc": "Vue 的 template 是如何编译成真正的 HTML 并做到双向绑定等等特殊功能的呢？这篇文章会给你一个答案。"}, {"id": "6844903594009821192", "title": "从零搭建 Vue.js 组件库模板", "desc": "功能齐全的 Vue.js 组件库模板，支持一键拉取，随时进行组件库的开发。"}, {"id": "6844903606349463566", "title": "从开发到发布一款基于Vue2x的响应式自适应轮播组件插件VueSliderShow", "desc": "本文讲述的是从开发一款基于Vue2x的响应式自适应轮播组件插件的一个全过程，包含发布到npm，构建自己的npm包，供下载安装使用的技巧，阅读本文需要些Vue的语法糖（自定义标签、计算属性、父子组件通信等），以及ES6、npm等基础知识。先来看下Demo 2、初始化项目，Vue …"}, {"id": "6897120432860708872", "title": "vue-next 响应式模块源码分析 -- ref 篇", "desc": "ref 中文翻译过来叫一个 响应式的引用。给 ref 方法传入一个原始值，会返回一个可改变的响应式对象，所以可以理解为 ref 就是一个 响应式对象的引用，俗称 ref 对象。 ref 对象是一个包装对象，它有一个指向内部值的单一属性 .value。通过操作 value 属性(…"}, {"id": "6910446393131794439", "title": "实现一个简易的vue-router", "desc": "最近在研究vue的源码，打算自己着手实现一些简单的功能，加深一下对框架的了解，于是准备实现一个简单的vue-router。 先用vue-cli创建一个包含vue-router的demo，然后把项目引入的vue-router注释掉，改成自己写的js。 Vue Router默认使用…"}, {"id": "6844904117429633038", "title": "Vue(v2.0)全局API的实现原理", "desc": "Vue.js最独特的特性之一是看起来并不显眼的响应式系统。数据模型仅仅是普通的javascript对象。而当你修改它时，视图会进行更新。这使得状态管理非常简单、直接。不过理解其工作原理同样重要，这样你可以回避一些常见的问题。 -----官方文档 vue.js无疑是前端目前最火的…"}, {"id": "6844903655410237447", "title": "微信小程序之如何使用自定义组件封装原生 image 组件", "desc": "图片未加载完成时先展示占位图，等到图片加载完毕后再展示实际的图片。 假如图片链接有问题（比如 404），依然展示占位图。甚至你还可以增加点击图片再次加载的功能。（例如知乎） 然鹅，小程序原生组件 image 并没有提供这些常用功能... 在小程序没还没推出自定义组件功能时，只能…"}, {"id": "6917097043269795847", "title": "ztree插件实现简单封装增删改查功能", "desc": "在 vue 项目中使用ztree插件，实现增删改查功能，并对增删改查功能实现二次封装。 ztree官网下载ztree插件，并将对应的 js 和 css 文件放到vue项目中。 在vue项目的 vue.config.js中进行配置。 完成以上几步就可以使用ztree了。 进行增、…"}, {"id": "6844903734862938119", "title": "Vue源码之数据的代理访问", "desc": "也就是说当我们这样this.message写的时候，Vue通过Object.defineProperty给this.message设置一层代理，实际访问的是this._data里的message属性，而this._data指向的对象就是我们写的data对象。 完。"}, {"id": "6844904182042853384", "title": "父组件利用事件总线向子组件通信，子组件没有响应是怎么回事", "desc": "首先看看订阅事件和发布事件都在哪？父组件发布的事件写在created生命周期阶段，子组件订阅写在mounted生命周期阶段。 了解vue生命周期肯定知道，父组件的created在子组件的mounted之前运行，也就是说父组件在发布事件的时候，子组件还没有生成。可以猜测是因为父组…"}, {"id": "6954286386060984350", "title": "Vue简单数据传递、模拟数据、数据持久化", "desc": "组件化 开始使用 引入组件 注册组件 ，使用components进行注册 使用 组件数据传递 父子关系之父传子 父组件: 使用:name这种形式进行数据的传递 子组件：使用props进行接收 父子关系"}, {"id": "6844903880812167181", "title": "【Vue原理】依赖收集 - 源码版之基本数据类型", "desc": "首先，我们都知道，Vue 的数据是响应式更新的，一旦数据改变了，那么相应使用到 数据的地方也会跟着改变。 比如当前页面开始渲染时，Dep.target 会提前指向当前页面的 watcher。 就好比，你去商店买东西，东西还没有发售，于是你把你的电话给老板，老板把你的记在电话本上…"}, {"id": "6844904017768742926", "title": "Vue核心概念及特性 (一)", "desc": "Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。 库是将代码集合成一个产品,库是我们调用库中的方法实现自己的功能。 框架则是为解决一类问题而开发的产品,框架是我们在指定的位置编写好代码，框架帮我们调用。 允许开发者声明式地将 DOM 绑定至…"}, {"id": "6844903537042784269", "title": "千呼万唤始出来！一键构建Vue-TypeScript应用", "desc": "A simple TypeScript CLI for scaffolding Vue.js projects. Prerequisites: Node.js (>=4.x, 6.x preferred), npm version 3+ and Git. Example: Th…"}, {"id": "6902706834495569928", "title": "miniVue3的简单实现-初始化渲染流程", "desc": "理解vue3的初始化渲染过程首先要弄清楚vue3非常重要的两个核心模块runtime-dom和runtime-core。 runtime-dom名字中有dom， 明显可以看出runtime-dom是和平台相关的操作，所以和平台操作相关的东西全部封装在runtime-dom模块中…"}, {"id": "6902696913817534477", "title": "Vue.js 3.0相关总结", "desc": "3.0源码全部采用Typescript的方式编写，项目的组织方式也发生了变化，采用Monorepo的方式来组织项目的结构，把独立的功能模块都提取到不同的包中。 性能方面，vuejs 3.0使用proxy重写了响应式的代码，并且对编译器做了优化，重写了虚拟DOM，使得渲染和upd…"}, {"id": "6896295409812488199", "title": "原来Vue的mixin策略不是简单的合并", "desc": "可以看到第一次从mixin打印，然后从app打印。"}, {"id": "6844903599651160072", "title": "开源的 Vue 上传组件", "desc": ""}, {"id": "6844903641694863367", "title": "手动编写mock服务（ma-mock）", "desc": "上一篇文章json-server的实践与自定义配置化提到过，json-server在我看来不太适用；之前有赞开源的zan-proxy我也尝试用过，其痛点在于mock数据保存在第三方，这个特性使得公司项目不适合使用zan-proxy，所以尝试自己搭建一个mock服务——ma-mo…"}, {"id": "6930857531510112270", "title": "Vue3.0的响应式系统原理的简单分析", "desc": "1. Vue3.0响应式特点 2. 核心函数 1. 在严格模式下，Proxy的函数必须返回布尔类型的值，否则会报TypeError 2. Proxy和Reflect中使用receiver 如果return Reflect.get(target, key, receiver)写成…"}, {"id": "6936413790082695176", "title": "vue 组件间通信", "desc": "常用方法 通过属性传值，引入子组件，绑定属性 :属性名 或 v-bind:属性名，子组件通过props接收传递过来的值 通过 this.$emit将事件和参数传递给父组件 (a): 给子组件加一个re"}, {"id": "6844903649534017543", "title": "Vue 全站缓存之 vue-router-then 实现原理", "desc": "就效果而言，我很满意v-model-link指令带来的开发效率的提升，不过 vue-router-then 这个插件本身的代码实现得有点粗暴，总觉得自己对 vue 的理解还是比较肤浅，有时候看别人家的文章总有不明觉厉的感叹，然而正如我在知乎专栏在博客的自我介绍里所说，高楼大厦平…"}, {"id": "6844903734179266568", "title": "vue轻量高效的前端组件化方案以及MVC MVVM思想", "desc": "旧浏览器逐渐被淘汰，移动端需求增加，旧浏览器是指ie6-ie8是不支持es5的，而vuejs利用了Object.defineProperty特性，es5在移动端和pc端也都是支持的，所以vuejs可以在移动端和pc端充分发挥自己的长处，架构从传统后台MVC向REST api+前…"}, {"id": "6844904053013495816", "title": "360°玩转tips，你需要这个组件", "desc": "web端但凡涉及到用户输入回显情景的时候，总是不可避免的会出现用户输入过长显示不完整的情况，虽然UI库会提供tips组件，但是当页面tips过多时，需要添加大量额外的dom元素，并且需要包裹在每个要显示tips的元素上，这显然是非常不友好的。 本着造轮子的精神，写下了这个组件。…"}, {"id": "6844904135498678280", "title": "Vue 3.0 bate版尝鲜", "desc": "4月21日晚，Vue作者尤雨溪在哔哩哔哩直播分享了Vue.js3.0Beta最新进展，也建议前端开发者们不要在大项目中使用，小项目是可以的，怀着激动心情，体验一下3.0版本，目前并未全局安装vue-n"}, {"id": "6844903497654091789", "title": "vue封装第三方插件并发布到npm", "desc": "写此文前特意google了一下，因为有较详细的开发教程我再写意义不大，有把插件封装成组件的教程，有把自己的组件封住成插件的教程，本文主要说明如何把第三方的插件封装成vue插件，简化配置，一键安装，主要提供思路，封装方法大同小异·，文章略长要有耐心。 gitment是一个基于gi…"}, {"id": "6844903848436301832", "title": "【Vue.js 牛刀小试】：第十二章 - 使用 Vue Router 实现 Vue 中的前端路由控制", "desc": "前端路由是什么？如果你之前从事的是后端的工作，或者虽然有接触前端，但是并没有使用到单页面应用的话，这个概念对你来说还是会很陌生的。那么，为什么会在单页面应用中存在这么一个概念，以及，前端路由与我们后端的路由有什么异同呢。本章，我们就来简单介绍下前端路由的概念，以及如何在 Vue…"}, {"id": "6844903879239286792", "title": "【Vue原理】Slot - 白话版", "desc": "插槽作为组件一个重要的部分，在项目中也是经常会用到的，起到自定义组件的作用。"}, {"id": "6908622540554371079", "title": "Vue : sync修饰符", "desc": "在某些情况下，我们可能需要对一个 prop 进行“双向绑定”。 但是以上父组件定义 自定义事件的步骤过于繁琐了。 这样设置父组件就不再需要单独再去绑定@update:show事件了 。"}, {"id": "6844904070080118791", "title": "Vue项目总结（1）-基本概念+Nodejs+VUE+VSCode", "desc": "通常JS项目的开发都是从安装依赖包开始的，就是执行npm i xxx命令。实际使用中，最好使用cnpm代替npm，速度快很多，出错情况也少。安装时要区分3中情况：dependencies（-S或--save），devDependencies（-D或--save-dev），pee…"}, {"id": "6903409589740371981", "title": "vue组件传递函数", "desc": "vue中的方法都有BoundThis这个属性，如果方法是本组件的，那么这个属性会指向本组件实例本身；如果vue中的方法是从外部传入的，那么方法内部的BoundThis属性绑定的是外部组件实例。 这点和react不一样，react传递函数时需要手动绑定this；但是在vue中传递…"}, {"id": "6844903874571010061", "title": "全网稀缺，完整链家地图找房的实现(二)", "desc": "在全网稀缺，完整链家地图找房的实现(一)章节中，我们已经实现了地图找房中地图的初始化、区域气泡和区域边界的显示及交互，那么在本文中我们要做的就是地图周边房源的显示及交互。 在分析完周边房源显示的场景之后，我们就分为三步来逐步实现。 这样是不行的，因为数组 aroundGeoPo…"}, {"id": "6844903694111096846", "title": "Vue学习笔记（1）——在页面右上角实现可悬浮/隐藏的系统菜单", "desc": "这是个大多数网站很常见的功能，点击页面右上角头像显示一个悬浮菜单，点击页面其他位置或再次点击头像则菜单隐藏。 作为一个jQuery前端攻城狮实现这个功能可以说是很easy了，但是对只刚粗看了一遍vue文档的菜鸟来说，坑还是要亲自踩过才算圆满。 1. 父组件 这里暂时只涉及系统菜…"}, {"id": "6997771715849748487", "title": "vue子组件的详解", "desc": "子组件的定义和注册 通过Vue.component形式定义的是全局组件。这一段中，我们来讲一下子组件。 在父组件中定义子组件 比如说，一个账号模块是父组件，里面分为登陆模块和注册模块，这两个晓得模块就"}, {"id": "6997770114539978759", "title": "vue-组件之间的通信方式", "desc": "前言：组件之间的通信方式，包括子组件===>父组件的通信，父组件===>子组件的通信，以及任意组件之间的通信三种情况，具体方法看下面介绍： 1.组件的自定义事件 适用于子组件===>父组件的通信 使用"}, {"id": "6844903504033611783", "title": "MVVM 式的热区组件开发", "desc": "1. 什么是热区 热区，是指在一张图片上选取一些区域，每个区域链接到指定的地址。 因此热区组件的功能，就是在图片上设置多个热区区域并配置相应的数据。 2. 热区功能介绍 设置数据可显示。 3. 实现手段与结构划分 MVVM 讲究以数据驱动视图，然而热区这类场景需要需要大量的 D…"}, {"id": "6844904106939809805", "title": "懂一点前端—Vue快速入门", "desc": "01. 什么是 Vue Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架，是当下很火的一个 JavaScript MVVM 库，是以 数据驱动和组件化 的思想构建的。 下图不仅概括了 MVVM 模式 （Model-View-ViewModel…"}, {"id": "6844903508471185415", "title": "vue当中设计Tabbar插件时的思考", "desc": "之前做移动端的项目一般会选用Mint-ui或者是Vux框架，不得不说这两款都是非常棒非常好用的UI框架，能给开发工作节省很多时间。 使用了以后就想...为什么一定要对每个mt-tab-item指定一个id呢？对于tabbar来说，我并不需要关心我按下的对象id是多少，而需要关心…"}, {"id": "6881793088860848135", "title": "vue2响应式原理", "desc": "vue是怎么知道当数据改变的时候都要去通知谁呢？它用了一个订阅者Dep，用来存放我们的观察者对象，当数据发生改变，就通知观察者，观察者通过调用自己的update方法完成更新。"}, {"id": "6935983432702902286", "title": "[Vue源码]从源码角度详细分析Vue的生命周期", "desc": "一般靠使用Vue的经验和背网上的答案都可以基本答出个大概，但如果被细问其中就可能答不出来，这里就从源码的角度开始分析Vue的生命周期。 这里首先要介绍一下callHook函数，以方便一下阅读源码，在Vue的源码中，当要执行到生命周期钩子的函数时，都会通过该函数去调用执行用户注册…"}, {"id": "6844904109951156238", "title": "VUE CLI3 结合 cross-env 配置环境变量（含环境变量源码解析）", "desc": "着急写项目的同行们，写在前面拿走不谢。 vue cli3 中 环境变量和模式 写到它可以通过获取.env、.env.local、.env.[mode]、.env.[mode].local文件中的内容定义环境变量。 文档中写道：只有以 VUE_APP_ 开头的变量会被 webpa…"}, {"id": "6962783046009356295", "title": "手写简化版的 vue3 diff 算法", "desc": "不涉及树的递归遍历，因为 vue2 / vue3 遵循的都是深度优先的先序遍历算法处理树与树的 diff，在此不做赘述。该篇文章主要为了理清老子节点数组与新子节点数组的 diff 过程。 vue3 d"}, {"id": "6844903886910652423", "title": "面向未来编程，如何在 Vue2 中使用 Vue3 的语法[实践篇]", "desc": "面向未来编程(Future-Oriented Programming)，vue-function-api 提供开发者在 Vue2.x 中使用 Vue3 的语法逻辑开发应用。(为方便以下以 Vue2 表示) 本文不对文档 api 对过多说明，仅讨论在项目实践中遇到的问题。比较两者…"}, {"id": "6934192033393442830", "title": "nextTick 解析", "desc": "因此本人带着好奇心翻阅了源码，以此做下记录。 以上四个机制进行处理，按照以上到下的优先级使用，做了兼容性，前两个是异步微任务，后两个是异步宏任务。 这个任务了，所以这时候可以拿到最新的 dom 数据。"}, {"id": "6871047893546237959", "title": "前端工程化(2)—带你了解项目的自动化构建", "desc": "除了第一节介绍的脚手架，自动化构建也是前端工程化中非常重要的组成部分。它使我们可以在开发环境中使用es6新特性、sass、模板引擎等高效率语法，自动转换为浏览器支持的特性，帮我们脱离开发环境兼容带来的问题，解决重复且无聊的操作。 npm scripts：是实现自动化构建工作流最…"}, {"id": "6844903726046511112", "title": "你可能需要的一本前端小册：Vue 项目构建与开发入门", "desc": "最近抽时间写了一本关于 Vue 的小册：《Vue 项目构建与开发入门》，前前后后断断续续花了大概两个月的时间。作为 Vue 的第一批用户，同时也作为一名专栏作者，虽然我之前写过好几篇关于 Vue 的文章，但是该小册是我第一本系统性介绍 Vue 项目构建与开发相关知识的书籍，也是…"}, {"id": "6844903927188553735", "title": "【译】Vue — 使用Mixins", "desc": "当你的项目越来越大，你可能会发现在相似的组件里一遍又一遍的在复制粘贴相同的代码段（data，method，watcher等）。当然，你也可以把这些独立文件（指相似的组件）写成一个组件，然后用props来定制它，但是使用太多的props很容易导致混乱。为了避免这个问题，大多数人仅…"}, {"id": "6885169758757453837", "title": "Vue以及React都要会的JSX使用及源码总结😮", "desc": "学习前端的同学们应该都知道React和Vue在国内属于最热门的框架或者库。两者之间有许多相似，比如它们都有： 但是又不一样，Vue是一个渐进式的Javascript框架，特点是易用，灵活，高效。React是一个用于构建用户界面的JavaScript库，特点是以声明式编写 UI，…"}, {"id": "6844903512090886157", "title": "Vue响应式----数据响应式原理", "desc": "Vue的数据响应主要是依赖了Object.defineProperty()，那么整个过程是怎么样的呢？以我们自己的想法来走Vue的道路，其实也就是以Vue的原理为终点，我们来逆推一下实现过程。 例如const obj = {},然后再调用defineReactive(obj,'…"}, {"id": "6844903640444960781", "title": "优雅配置vue项目，webpack 4.x + Vue模仿vue-cli配置 (一)", "desc": "url-loader对未设置或者小于limit设置的图片进行转换，以base64的格式被img的src所使用；而对于大于limit byte的图片用file-loader进行解析。 minify 使用minify会对生成的html文件进行压缩。默认是false cache 默认…"}, {"id": "6989991599631499294", "title": "我发现了vue的一个bug", "desc": "事情得从同事的一行代码说起，如果严格按官方文档为准，我觉得写错了，因为参数不对，但是这种错误写法没有报错，而且执行似乎成功了。于是，我开始了一系列的溯源分析，最后终于找到终极奥义。整个过程收获良多！"}, {"id": "6881226060189564941", "title": "优雅使用el-table组件", "desc": "使用Vue业务开发中碰到最多的就是table，项目使用的是Vue+Element-ui, 正常写法如下，尝试过写过snippet每次快速复制粘贴，渐渐地有点写吐了，感谢网上的分享优雅的使用 element-ui 中的 table 组件，在此基础上进行了一些改进，如有写的不对的地…"}, {"id": "6916817639452966925", "title": "七日打卡-详解Vue router.push()", "desc": "在Vue2.0路由跳转中，除了使用 &#x3C;router-link> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。 想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记…"}, {"id": "6895619216050044936", "title": "✍Vue源码——学习如何判断数据类型", "desc": "Vue 框架作为一个成熟的框架，里面有很多值得去学习、借鉴、使用。本专栏主要学习 Vue 中如何判断数据类型。 到 ECMAScript 10 为止，规定了 8 种 数据类型，又把数据类型分为原始类型和对象类型。 | Null | 只包含一个值：null。| | Undefin…"}, {"id": "6844904074144382990", "title": "利用vue-cropper剪裁图片并上传", "desc": "此次主要是利用Element-ui+vue-cropper完成此需求,话不多说上代码。 上传图片时会触发changeUpload此钩子函数，由于剪裁图片是以弹框形式唤起，因此我们的行为可以在此钩子函数中写。 在cropper.vue中主要起剪裁作用的是finish()方法以及c…"}, {"id": "6971214543229812772", "title": "vue2.0 开发一定用得着的(一)", "desc": "这是我参与更文挑战的第7天，活动详情查看：更文挑战 1、$nextTick: 用于延迟执行一段代码，当你需要操作dom时，将dom操作的js放在this.nextTick()的回调函数中。 2、wat"}, {"id": "6844903624405942286", "title": "Vue.js中的MVVM", "desc": "MVVM拆开来即为Model-View-ViewModel，有View，ViewModel，Model三部分组成。View层代表的是视图、模版，负责将数据模型转化为UI展现出来。Model层代表的是模型、数据，可以在Model层中定义数据修改和操作的业务逻辑。ViewModel…"}, {"id": "6971609940569882632", "title": "vue中如何自定义svg图标", "desc": "前言 svg图标的好处就是可伸展，可自定义图标的颜色。码字不易，欢迎大家批评指导，互相学习。 1. 在iconfont中将自己待使用的图标添加入库 2. 选择好所有图标后，点击右上角的购物车"}, {"id": "6892296081145593863", "title": "Vue 文件解析、编译流程", "desc": "本文将以目前（2020/10/26）最新的 vue-cli 版本 @vue/cli-service 4.5.8 （后文以 CLI4 代指）以脉络，详细分享 .vue 文件解析和编译的过程。解析指 .vue 文件被解析为 template|script|style 三份源码，编译…"}, {"id": "6844903650645508104", "title": "服务器端渲染与Nuxt.js", "desc": "前段时间在知乎上看到一篇提问，说的是为什么现在又开始流行服务器端渲染html了。整理了网上一些评论，结合自己的想法，整理出了一段前端发展史。 早在1989年，HTML的诞生是一个物理学家为了方便学术文档的分享而创造，这个也是前端起始的时间。后来，CSS和Javascript加入…"}, {"id": "6844903973208457229", "title": "Vue3的虚拟dom", "desc": "传入的事件会自动生成并缓存一个内联函数再cache里，变为一个静态节点。这样就算我们自己写内联函数，也不会导致多余的重复渲染 真是优秀啊"}, {"id": "6844903775304433677", "title": "vue-cli 3.0 源码分析", "desc": "其实最开始不是特意来研究 vue-cli 的源码，只是想了解下 node 的命令，如果想要了解 node 命令的话，那么绕不开 tj 写的 commander.js。在学习 commander.js 过程中发现 vue-cli 的交互方式挺炫酷的，然后就去看了下源码，所以就有了…"}, {"id": "6844903710053629966", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi+三期aixo的使用vueX的使用element的引入项目结构的搭建", "desc": "前言生病了，没有及时写上，各位观众老爷抱歉，今天写上第三期的应该比较干货，具体讲我们怎么搭建项目，以及怎么和后端进行交互，element的引入，vuex在ts改版后的使用方式当前项目demo预览内容总"}, {"id": "6877430232987467789", "title": "将原型对象设置成Proxy后的一系列迷惑行为", "desc": "Proxy代理 相信大家或多或少都有所耳闻，这是一个ES6推出的新特性，能够拦截用户对对象的各种操作。 Vue3 也是用了 Proxy 代理替换掉了原来的 Object.defineProperty() ，不但解决了之前添加新属性不会触发响应式等bug，更是大幅度提高了性能。因…"}, {"id": "7000931195819130894", "title": " Vue 两个版本的区别", "desc": "vue完整版和runtime版本 比较项 vue.js vue.runtime.js 区别 特点 有编译器(compiler) 无编译器 编译器占40%的体积 视图 写在HTML里或者写在templa"}, {"id": "6844903784166981646", "title": "Vue插件从封装到发布", "desc": "通过全局方法 Vue.use() 使用插件。它需要在你调用 new Vue() 启动应用之前完成： Vue.js 的插件有一个公开方法 install。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象： 当我们编写插件的时候理所当然的就会省去挂载这一步操作…"}, {"id": "6926812009006628871", "title": "Docsify v4.12.0 发布，神奇的文档网站生成工具", "desc": "Docsify 是一个神奇的文档网站生成器。可以快速帮你生成文档网站。不同于 GitBook、Hexo 的地方是它不会生成静态的 .html 文件，所有转换工作都是在运行时。如果你想要开始使用它，只需要创建一个 index.html 就可以开始编写文档并直接部署在 GitHub…"}, {"id": "6844904103076691975", "title": "Vue 编辑 & 新建表单复用的一些思考", "desc": "以下将通过一个小案例结合几种常见场景一步一步进行分析并实现。 上面图中可以看出，员工的编辑表单和删除表单基本一致。 以下涉及到的代码使用element组件，其实无论使用iview、element或其他vue组件库，思路上没有太多差别。 不容易维护，复制的代码中如果存在bug，相…"}, {"id": "6933169002176839693", "title": "Vue中props与$parent的区别💪💪💪！！！", "desc": "都能够接收来自父组件数据。 props仅仅只能接收，单项绑定。着重数据传递。向子组件传递数据。 $parent既可以接受父组件数据 ，又可以修改父组件数据,是双向的 。 $parent还可以调用父组件的方法。 场景1. 子组件发生某个事件，在事件执行的方法中，需要访问或者更改父…"}, {"id": "6983957594058522631", "title": "vue 集成腾讯地图基础api Demo集合", "desc": "使用vue结合网上的开源框架vue-admin参照官方网站demo，做一个开箱即用的Demo集合出来。"}, {"id": "6844903542906421256", "title": "VS Code使用之Vue工程配置ESLint", "desc": "详细记录在VS Code的使用中，Vue的工程中如何配置ESLint。 帮助大家更好的使用VS Code来开发Vue"}, {"id": "6844903923392872461", "title": "vue-resize深度解读", "desc": "基本上我们已经知道vue-resize带来的好处，沙箱保护，全自动卸载，对于使用者来说，唯一的要求，就是元素的position不为static，这个库远不止这点干货，毕竟作者是vue team里面的。"}, {"id": "6966044238567964685", "title": "Vue学习之与MVVM的对应关系", "desc": "Vue是受MVVM启发的。MVVM可以分成四部分 Model:模型 View:视图 ViewModel:视图模型Binder:绑定器 主要形式还是Model-ViewModel-View"}, {"id": "6962446016524058637", "title": "Vite + Vue3.0 构建项目, 引入模块报错", "desc": "Vite + Vue3.0 构建项目, 引入模块报错, The requested module '/@modules/qs/lib/index.js' does not provide an exp"}, {"id": "6844903893848047630", "title": "基于Canvas+Vue的弹幕组件", "desc": "这一次改版做了插入弹幕立即显示，原来的弹幕插入只会出现在列表的最后。弹幕的插入轨道也是上一条弹幕出现一定距离后自动插入到后面，符合流式布局的格式。"}, {"id": "6844903581259137031", "title": "手拉手，用Vue开发动态刷新Echarts组件", "desc": "因为生产需要（其实是懒），所以本教程使用了 vue-cli进行了项目的基础结构搭建。 直接使用npm进行安装。 到此，准备工作已经完成了。 因为被《React编程思想》这篇文章毒害太深，所以笔者开发组件也习惯从基础到高级逐步迭代。 静态组件要实现的目的很简单，就是把Echart…"}, {"id": "6911863086487961607", "title": "vue中实现点击空白区域关闭弹窗", "desc": "1. 第一种做法,ref=\"main\" 2. 第二种做法,在外层容器里面定义一个阻止冒泡事件点击空白区域关闭弹窗"}, {"id": "6993693604346626085", "title": "Vue3 响应式API-Reactive", "desc": "什么是Reactive Reactive 是Vue3中核心方法，是响应式API的心脏。 官方也把此响应式API进行单独打包，即便不使用Vue3的情况下也可以独立使用：@vue/reactivity ."}, {"id": "6854573217328300046", "title": "【vue-win10-admin交个朋友系列】之主题切换方案", "desc": "前言【vue-koa2全栈撸win10风格管理系统】交个朋友系列文章，带各位全栈撸win10风格管理系统开发，当然项目也参考很多优秀的前后端项目构建方案和我在工作中的一些中的一些经验应用，主要是交个朋"}, {"id": "6917622548377108494", "title": "vue3.0 搭建和使用流程", "desc": "最近在重构一个老项目，领导要求使用新的技术栈。好吧，是时候秀一波我新学的vue3.0了。不多bb，开始我的表演。。。(以下只是我自己个人的理解和使用习惯，仅供参考哦）一：项目搭建1.可以自己配置vit"}, {"id": "7002574423257514014", "title": "vue项目练习之 可可爱爱购物街(WEB APP) 总结", "desc": "WEB APP 可可爱爱购物街 之 第一个小项目学习总结~ 项目说明 项目展示 学习到的东西 一：熟悉vue开发以及vue框架的编程思想 正确的封装让代码有更好的可维护性和复用性！ 这次项目最主要的是"}, {"id": "6844903526947110919", "title": "基于node.js的脚手架工具开发经历", "desc": "我们团队的前端项目是基于一套内部的后台框架进行开发的，这套框架是基于vue和ElementUI进行了一些定制化包装，并加入了一些自己团队设计的模块，可以进一步简化后台页面的开发工作。 这套框架拆分为基础组件模块，用户权限模块，数据图表模块三个模块，后台业务层的开发至少要基于基础…"}, {"id": "6997947830753034247", "title": "No.19 vue-element-admin 学习使用（十四）cdn， 更换主题", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 cdn webpack打包后，有些第三方依赖占用的空间很大，例如vue，element，Echarts，这种，可以使用CDN外链来引入这些"}, {"id": "6886338194141347854", "title": "Vue实战：文件上传组件", "desc": "文件上传是我们作为开发者在日常工作中经常遇到的一个需求，各个流行的组件库中也都有现成的组件可以很方便的直接调用。具体的用法不再赘述，小伙伴们可以在组件库中查看demo，这里笔者主要介绍下如何实现一个Upload组件。 在书写前端Upload组件之前，首先需要通过Node.js来…"}, {"id": "6990235856476831751", "title": "vue3 diff 算法详解", "desc": "前言 关于 vue 的 diff 算法，大家可能在文章中或多或少都有了解过，我也一样。但是，纸上得来终觉浅，绝知此事要躬行。本文就比对着源码来对 diff 算法进行一个分析。"}, {"id": "6991134810827653156", "title": "Vue3 组合式API", "desc": "Vue3.0的组合式API,本篇文章主要为笔者师从杨洪波老师学习Vue3.0的随手笔记, 可以帮助读者快速熟悉Vue3.0的语法及使用"}, {"id": "6966208708523065374", "title": "vue实战 - 项目优化/扩展", "desc": "1. 缓存路由组件对象 2. 路由组件懒加载 3. 图片懒加载: vue-lazyload 安装npm install --save vue-loader 4. 打包文件分析与优化 vue 脚手架提供"}, {"id": "6973227219074154503", "title": "一文搞定前端自动化测试（Vue 实战）", "desc": "距离上一次更新自动化测试相关的内容已经过去大半年了，之前写了基础篇和 React 实战，这次通过实现一个 Button 组件并完善其测试用例带大家学习 Vue 中的自动化测试。"}, {"id": "6993899069932306446", "title": "vue-virtual-scroller源码分析", "desc": "当页面数据量较大，例如有几千条数据渲染的时候，dom过多产生滚动卡顿的现象。此时使用该插件可以动态渲染可视区的dom，滚动时实时计算和变更可视区显示的数据。 原理 根据可视区的高度以及it"}, {"id": "7000429534566678541", "title": "学习vue心得（1）", "desc": "前言：我也是最近学习了vue的，写的不好麻烦各位大佬多提一点意见。 1.vue的介绍 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vu"}, {"id": "6972060553636216845", "title": "如何搭建团队内部的脚手架", "desc": "公司不同项目组，使用不同的技术框架（vue or react）,即便是同一项目组不同开发人员由不同的开发习惯。最终会导致在项目结构混乱，给其他人员维护造成了一些不必须的维护成本。"}, {"id": "6904686261080948750", "title": "自定义 loader 读取 *.vue 文件源码", "desc": "1. 前言（需求） 就是想读取 *.vue 文件的源码并高亮展示到页面上，又不想用第三方的依赖（其实是找不到）。 2. 实现思路 通过 vue-loader 自定义块 功能，获取目标文件的文件路径，然后通过 fs 读取源码，再用 @vue/compiler-core 的 API…"}, {"id": "6995478235655962638", "title": "vue项目中promise解决回调地狱和并发请求", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 博主相关个人技术博客、微信公众号、视频号、设计作品集 场景需求： 需要同时请求5个接口 都请求成功后执行下一步操作 解决方法： 定义一个变量"}, {"id": "6997698936903319582", "title": "vue3.0组合式API-useCharts", "desc": "更多文章 前言 继续组合式api的分享，今天分享useCharts 介绍 useCharts是针对echarts图表类公共逻辑的抽离，useCharts只是一个基类，比如useBar是在当前业务场景下"}, {"id": "6981381808503930917", "title": "浅谈前端优化点之一：路由懒加载", "desc": "这是我参与新手入门的第1篇文章 当我们打开浏览器，访问网站时，此时默认是刚打开就去加载所有页面，路由懒加载就是只加载你当前点击的那个模块。 按需去加载路由对应的资源，提高首屏加载速度"}, {"id": "7002975291962294286", "title": "Vue视频播放进行+水印的截图", "desc": "视频相关项目，有时候需要对视频进行截图的，图片一般加上水印。这里展示下普通视频播放和直播视频播放的加水印方式"}, {"id": "6989542193228677150", "title": "vue2.0  笔记", "desc": "学习vue中做的笔记，主要是一些基本使用方法，对于深层次的运行原理，编译原理，源码等的研究后续会补上"}, {"id": "6986812032297205767", "title": "VUE3（二十二）vue-router 开启路由懒加载", "desc": "一、为什么要使用路由懒加载 为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题。 二、定义 懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载。 三、使用 常用的懒加载方式"}, {"id": "6985401027289677832", "title": "从keep-alive看vue内部如何实现组件缓存", "desc": "都知道keep-alive是用于vue中组件之间切换的时候，保持这些组件的状态，以避免反复重渲染导致的性能问题的。那内部如何实现缓存的呢，一起来看看吧"}, {"id": "6974662080049872909", "title": "Naive UI简易上手", "desc": "N久之前我写过一篇文章讲到了简易上手vue3.x并配合ant-design-vue做了一些学习。当时文章的结尾我说随着3.x版本的发展市面上一定会出现很多不错的UI框架。结果没多久element-pl"}, {"id": "6982462196630421540", "title": "列表之虚拟滚动节点的实现", "desc": "前言 这是我参与新手入门的第2篇文章 为了坚持心中所想，想来想去，还是准备写写这个，揭开虚拟滚动节点的面纱。 需求场景 综合之前开发经验，我们会发现一般列表的要求也很简单，首先固定表头，其次加载不可太"}, {"id": "6844903662217625608", "title": "Vue开发——实现吸顶效果", "desc": "因为项目需求，最近开始转到微信公众号开发，接触到了Vue框架，这个效果的实现虽说是基于Vue框架下实现的，但是同样也可以借鉴到其他地方，原理都是一样的。 其实js做这个效果还是挺简单的，因为在css中我们可以设置一个元素的position: fixed;，这样它就可以固定在那里…"}, {"id": "6844903701379809294", "title": "H5拍照上传填坑汇总", "desc": "最近工作一直在使用vue+vux做移动端项目，有一个拍照上传照片的需求，发现vux里并没有实现，调研过非官方的vux-uploader后，感觉还不是很理想。 其实网上已经可以找到很多已经实现的成熟方案，但是在调研这个需求的时候，我发现在各种实现方案中也有一些puzzle的知识点…"}, {"id": "7005010651269562405", "title": "vue(二) - 基础指令", "desc": "指令的本质就是 HTML 自定义属性, Vue.js 的指令就是以 v- 开头的自定义属性 内容处理 v-once 插值表达式只生效一次 作用: 使元素内部的插值表达式只生效一次。 v-text 设定"}, {"id": "6992015245334020103", "title": "⚡qiankun微前端中的应用通信(四)-上手micro-shared及原理解析｜8月更文挑战", "desc": "micro-shared 一个qiankun微前端的应用间通信模块，基于redux，以发布订阅模式封装，实现应用间通信数据上的响应式，代码结构模块化，api类似vuex，上手难度低, 并可适用多框架"}, {"id": "6844904114514558984", "title": "Drag,drag,drag！拽出哔哩哔哩侧边导航组件", "desc": "文章主要以宏观的形式来聊哔哩哔哩侧边导航拖拽组件，非常适合正在渐进式学习VUE的你，适当的模仿开发项目是前端学习必须要有的技能。大多数人都知道的是，面试需要有自己的作品，而作品最重要的不是切页面，而是：创新+用户体验+性能优化+技术展示 。作者也是一个前端小白，正在摸索阶段，我…"}, {"id": "6844903949883932679", "title": "6个有用的Vue开发技巧", "desc": "随着组件的细化，就会遇到多组件状态共享的情况，Vuex当然可以解决这类问题，不过就像Vuex官方文档所说的，如果应用不够大，为避免代码繁琐冗余，最好不要使用它，今天我们介绍的是vue.js 2.6新增加的Observable API ，通过使用这个api我们可以应对一些简单的跨…"}, {"id": "6883862821289852936", "title": "下一个时代的打包工具 esbuild", "desc": "关注「Vite」底层实现的同学，我想应该清楚它使用「esbuild」来实现对 .ts、jsx、.js 代码的转化。当然，在「Vite」之前更早使用「esbuild」的就是「Snowpack」。不过，相比较「Vite」拥有的巨大社区，显然「Snowpack」的关注度较小。 「Vi…"}, {"id": "6844903608622956557", "title": "Vue全家桶打造自适应 web 音乐播放器", "desc": "先去 网易云音乐 获取自己的 UID 然后通过调用对应的 API 接口 获取该用户的歌单，然后传入歌单 ID 获取歌单详情。 最后我们切入主题，欢迎小哥哥、小姐姐们给我点 \"Star\" \"Fork\"（地址在这里 Vue-mmPlayer 源码地址），毕竟第一次发文骗赞（微微一笑…"}, {"id": "6999226562839052302", "title": "基于vue封装简单的弹框组件", "desc": "前言： 项目中肯定会涉及到弹框，当热第三方的ui库提供了很好的支持，但有时要根据自己的业务需求进行第二次封装，这样就比较麻烦了。这时还不如自己封装一个，可以做到在可控的范围内进行持续性扩展。"}, {"id": "6999654621853515812", "title": "聊聊vue中的keep-alive", "desc": "8月更文挑战之，聊聊vue中的keep-alive，一起看看前端面试中keep-alive的常问知识点"}, {"id": "6993723578252279816", "title": "重学vue之computed计算属性", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 图片取自官方文档。 官方文档上面对computed的解释及使用场景看似简单清晰，但是在实际的开发中就会发现，我知道computed这是个计算"}, {"id": "7000771880739143716", "title": "Vue中style使用scoped深度访问（样式穿透）的几种方式", "desc": "Vue中style使用scoped深度访问（样式穿透）的几种方式 1. >>> 如果Vue项目中style的 lang 是 css，那么： 但是有时候 >>> 这种写法不会被 scss 或 less "}, {"id": "6844904071896236040", "title": "Vue2.6.10(Vue-cli4)项目打包性能优化实践", "desc": "2.将静态资源存储在云端，个人用的七牛云,对象存储用于存储文件，使用cdn加速让存储的静态资源访问速度更快。(推荐，速度能快挺多) 2.将静态资源存储在云端，个人用的七牛云,对象存储用于存储文件，使用cdn加速让存储的静态资源访问速度更快。(推荐，速度能快挺多)"}, {"id": "6844903600494215175", "title": "vue+canvas如何实现b站萌系登录界面", "desc": "当初在掘金看到那个小熊的登录页面，很多人都很喜欢，于是恬不知耻的说了一句要用canvas来实现一遍，真的是给自己立了个flag,还好结果很糟糕。 为什么小熊会跟着输入框的输入而移动。 通过输入向量与角度值，来进行计算，生成坐标在空间旋转后的坐标，此处使用的计算公式为旋转矩阵，矩…"}, {"id": "6844903751203962893", "title": "【新手向】Vue.js + Node.js(koa) 合体指南", "desc": "Webpack 是大家熟知的前端开发利器，它可以搭建包含热更新的开发环境，也可以生成压缩后的生产环境代码，还拥有灵活的扩展性和丰富的生态环境。但它的缺点也非常明显，那就是配置项又多又复杂，随便拿出某一个配置项（例如 rules， plugins， devtool等等）都够写上一…"}, {"id": "6981365404287369252", "title": "Vue antdv 定制主题配置（高低版本配置问题）", "desc": "一、简介 在使用 ant-design-vue 时，需要修改一下全局的主题颜色，按照官方的配置流程配置失败，应该是版本问题。 二、安装 antdv 安装 ant-design-vue main.js "}, {"id": "7001837920772423716", "title": "Vue3.0实现原生高度可自定义菜单组件vue3-menus", "desc": "vue3-menus Vue3.0 自定义右键菜单 Vue3.0 原生实现完全自定义右键菜单组件, 零依赖，可根据可视区域自动调节显示位置，可支持插槽完全重写每一项菜单 在线演示 完整菜单功能演示。"}, {"id": "6990983394620342279", "title": "composition-api——对后台查询界面的一些封装探索", "desc": "在vue2中，我们可以通过引入composition-api的方式来享受主要升级，同时也能兼容生态。本文将记录笔者在尝试封装后台表格展示页面逻辑方面做的努力。"}, {"id": "7000178107608989727", "title": "回首Vue3之实例篇（一）", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 这篇文章我们来讲一下实例 property $data、$props和$el的使用，以及我们需要注意的地方。 如何使用 $data 该函数"}, {"id": "6960216584241545224", "title": "rollup+vue3开发个人的组件库", "desc": "首先我们需要知道rollup是干嘛的 rollup是做什么的？ rollup是一个JavaScript打包模块器，可以将小代码编译成大块复杂的代码，例如 library 或应用程序。 Rollup 对"}, {"id": "6958744693723267085", "title": "使用Vue3实现一个Upload组件", "desc": "通用上传组件开发 开发上传组件前我们需要了解： FormData上传文件所需API dragOver文件拖拽到区域时触发 dragLeave 文件离开拖动区域 drop文件移动到有效目标时 首先实现一"}, {"id": "6890572689799380999", "title": "使用Vue3+TS重构百星websocket插件", "desc": "前几天我用Vue3重构了我那个Vue2的开源项目，最后还遗留了一个问题：项目中用的一个websocket插件还不能正常使用。于是，我决定重写这个插件，让其支持Vue3。 本文将记录下重写这个插件的过程并将其发布至npm仓库，顺便给插件作者提个PR，欢迎各位感兴趣的开发者阅读本文…"}, {"id": "6844903989641740296", "title": "vue视频播放插件vue-video-player", "desc": "安装引入可以全局引入插件，也可以在需要用到该插件的组件内单独引入（二选一）【1】全局引用，在main.js里面导入并引用【2】组件内引用使用【1】html部分【2】js部分【3】效果图​视频格式控制播"}, {"id": "6844904050438193166", "title": "我命由我不由天，手写表单费时间", "desc": "我们都知道做后台项目打交道最多的就是表单了，因人而异在表单这块花费的时间也是不一样的，可以说表单占据了我们大部分的页面开发时间，因为起初团队里没有个统一的页面表单规范，可谓每个人都写得很freestyle了。也许我们当时只顾敲的一时爽，一直敲一直爽。但是欠下的债迟早有一天是要还…"}, {"id": "6994468137584295973", "title": "深入 vue-loader 原理", "desc": "前言 vue-loader 相信大家都不陌生，作为 webpack 中一个为解析 .vue 文件的 loader。主要的作用是是将单文件组件(SFC) 解析为 vue runtime是可识别的组件模块"}, {"id": "6993115621160386590", "title": "温故而知新，浅入 Vue  Mixin 底层原理", "desc": "本文带大家一起探索了 Vue mixin 的合并策略，在不同场景有不同的混入策略，涉及到 data、provide、钩子函数、watch、component、directives、filters。。。"}, {"id": "6954259388336963597", "title": "做一个官网需要多长时间", "desc": "-想学习CSS技能，但不知道从何下手的 - 想简单复习一下CSS技能 - 最近有意愿做官网项目的 - 纯前端开发，有意向入门后端，希望能独立做一套完整但是又不复杂的前后端项目以上几种就可以点开了~"}, {"id": "6987938740127662117", "title": "v3学习整理文档", "desc": "Vue3快速上手 1.Vue3简介 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王） 耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者 g"}, {"id": "6994727828650459143", "title": "Vue+ElementUI 搭建后台管理系统（实战系列八）｜8月更文挑战", "desc": "使用ElementUI已经有一段时间了，在一边上手开发后台管理系统的同事，也记录了一些笔记，一直都没有时间将这些零零散散的笔记总结起"}, {"id": "6988677615112421389", "title": "7x1 精读Vue官方文档 - 全局 API", "desc": "精读 Vue 官方文档系列 🎉 全局 API 指的是 Vue 构造函数上提供的静态方法。 Vue.extend 该方法用于支持 typescript 的类型声明。 该方法内部返回一个 VueCompo"}, {"id": "6978869676344344583", "title": "Electron+Vue3 MAC 版日历开发记录(28)——使用 Eslint 优化代码", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6992476452721524750", "title": "Vue 3 动效", "desc": "这是我在学习 Vue 3 时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "7003516005846630408", "title": "手写一个min-vue", "desc": "手动模拟一个min-vue 通过手动实现一个min-vue，来掌握vue中数据响应式原理。 准备html 写好html方便我们验证每次写的功能是否正确。 vue 在index.html中我们引入了js"}, {"id": "6989837400042110983", "title": "vuex 源码解析", "desc": "版本说明 原文链接：https://4ark.me/post/vuex-score-code/ 本文是针对 vuex v3.6.2 版本的一次源码解析，主要是想研究以下几点： vuex 的初始化过程 "}, {"id": "6844903934545362952", "title": "vue中如何实现后台管理系统的权限控制", "desc": "在广告机项目中，角色的权限管理是卡了挺久的一个难点。首先我们确定的权限控制分为两大部分，其中根据粒的大小分的更细： 下面我们就看一看是如何实现这些个权限控制的。 接口权限就是对用户的校验。正常来说，在用户登录时服务器需要给前台返回一个Token,然后在以后前台每次调用接口时都需…"}, {"id": "6997610344638054413", "title": "vue常见重点理解知识点", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 本文总结vue常见的重点的知识点便于日常的工作理解 持续更新中.... 1. v-for 与v-if的优先级 显然v-for优先于v-i被"}, {"id": "6923946134025191432", "title": "【初级】个人分享Vue前端开发教程笔记 | 打卡每天一份劝退技能", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 不要害怕做梦，但是呢，也不要光做梦，要做一个实干家，而不是空谈家，求真力行。 作为一名Vue开发使用者，必须了解其使用规则。 前端发展的行业非常快，大部分学习者赶不上发展的速度，每天都在学习Google的Angu…"}, {"id": "6992442729129050119", "title": "封装一个支持sortable.js选项的el-table拖拽组件", "desc": "目前现状 当前使用的 element-ui-el-table-draggable 提供了对element-ui内el-table的行进行拖拽排序的能力 不足之处 element-ui-el-table"}, {"id": "6844903512959107080", "title": "基于 Docker 打造前端持续集成开发环境", "desc": "本文将以一个标准的 Vue 项目为例，完全抛弃传统的前端项目开发部署方式，基于 Docker 容器技术打造一个精简的前端持续集成的开发环境。 1. CI（持续集成）：阮一峰老师的关于 CI 的介绍 2. Docker： Docker 快速入门 1. 代码无需在本地构建 2. 只…"}, {"id": "6844904179572424711", "title": "前端动画必知必会：React 和 Vue 都在用的 FLIP 思想实现小姐姐流畅移动。", "desc": "乍一看，让我们手写出这个逻辑应该是非常复杂的，先看看本文最后要实现的效果吧，和这个案例是非常类似的。 图片素材依然引用自知乎问题《有个漂亮女朋友是种怎样的体验？》，侵删。 拿到了这个需求，第一直觉是怎么做？假设第一行第一个图片移动到了第二行第三列，是不是要计算出第一行的高度，再…"}, {"id": "6844903877574295560", "title": "精读《Vue3.0 Function API》", "desc": "1. 引言 不，100% 兼容 Vue 2.0，且暂未打算废弃任何 API（未来也不）。之前有草案试图这么做，但由于用户反馈太猛，被撤回了。 没有呀，这次精读的稿子就是 RFC（Request For Comments），翻译成中文就是 “意见征求稿”，还在征求大家意见中哦。 …"}, {"id": "7004848960720338958", "title": "Vue--添加动画效果的树状递归展开组件", "desc": "前段时间要做一个树状递归的展开组件，原来都是用的第三方框架直接用，突然要用一个自定义能力比较强的，就想着看看有没有写的差不多的自己改一下得了，结果用某度搜了一下，清一色复制粘贴的文章，而且也写的极其简"}, {"id": "6865842981618843656", "title": "vue3项目--让我们更快开发vue（一）", "desc": "是的上面所说的就是我这个项目想要实现的目标，我需要的不是简简单单一个ui组件库，我想要的是一个ui组件自定义拼装平台。 其实现有的平台已经有分析代码模块并可以实现在线引入和单个的npm安装，但是我们也不希望我们项目里面能有几十个不同ui组件的npm吧，所以我的最主要目的就是将多…"}, {"id": "6982577605870845960", "title": "Vue3 + TypeScript 开发实践总结", "desc": "迟来的Vue3文章,其实早在今年3月份时就把Vue3过了一遍。在去年年末又把 TypeScript 重新学了一遍，为了上 Vue3 的车，更好的开车。"}, {"id": "6991603333660147726", "title": "Vue后台系统中如何优雅的书写状态标签", "desc": "一个开发小技巧，告别标签里频繁的 v-if，通过数据抽离和二次封装来减少重复代码，让代码维护更加轻松。"}, {"id": "6844904145602740231", "title": "当前端基建任务落到你身上，该如何推动协作？", "desc": "要么大牛带队，但是后端大牛。 要么临时凑的团队，受制于从前，前端不自由。 要么从0到项目部署，都是为了敏捷而敏捷，颇不规范。 话虽如此，经过4年生涯摧残的废猿我，也是有自己的一番心得体会的。 1. 从DevOps流程看前端基建 很多前端在接触到什么前端工程化，什么持续构建/集成…"}, {"id": "6917592199140458504", "title": "使用Vue3的CompositionAPI来优化代码量", "desc": "在我的开源项目中有一个组件是用来发送消息和展示消息的，这个组件的逻辑很复杂也是我整个项目的灵魂所在，单文件代码有1100多行。我每次用webstorm编辑这个文件时，电脑cpu温度都会飙升并伴随着卡顿。 就在前几天我终于忍不住了，意识到了Vue2的optionsAPI的缺陷，决…"}, {"id": "7002411995756494862", "title": "通过码云gitee来搭建vue项目", "desc": "码云（gitee）新建仓库 在注册完成并成功登录 Gitee 账号后，用户可以开始创建自己的第一个仓库。"}, {"id": "6844903638389915661", "title": "Vue源码阅读前必须知道javascript的基础内容", "desc": "vue目前是前端使用频率较高的一套前端mvvm框架之一，提供了数据的响应式、watch、computed等极为方便的功能及api，那么，vue到底是如何实现这些功能的呢？在探究vue源码之前，必须了解以下几点javascript的基本内容，通过了解这些内容，你可以更加轻松的阅读…"}, {"id": "6875151513753223176", "title": "Vant 3.0 Beta 版本发布 🔥", "desc": "目前 Vant 已完成了对 Vue 3.0 的适配工作，并发布了 Vant 3.0 Beta 版本，欢迎大家在新项目中尝试 Vue 3.0 + Vant 3.0。 在使用 Vant 3.0 前，请先了解一下 Vue 3.0 的变更内容：Vue 3.0 官方文档。 近期我们还发布…"}, {"id": "6895213945997492238", "title": "为什么 Vue3 的 ref 让很多大佬操碎了心？", "desc": "感兴趣的同学可以先阅读上面的讨论，本文不再重复讨论。 提案目的是将 ref.value 的写法进一步简化，但因为修改了 js 语言本身的语义，引起了很多的争论。 1. 回顾 vue-composition-api-rfc 读写 ref 的操作比普通值的更冗余，因为需要访问 .v…"}, {"id": "6844903766496395272", "title": "离职后才搞懂vue项目开发流程中的疑惑点", "desc": "在离职的最后一个月，帮两位同事申请加薪，确切的说，申请加薪是导火索，我被扣上了哄抬同事工资以提高自己工资的帽子，在推动前后端分离工作中处处碰壁，点燃了压抑许久的离职冲动，领导培养自己四五年，不让声张，答应悄悄离开。 离开时原来公司项目里剩下很多问题没有解决，现在自己还在做vue…"}, {"id": "6956002822420693029", "title": "vue3语法笔记,vue3+vite2 配置 axios router  vuex element++", "desc": "vite 不支持ie11 创建项目 命名： 选择要创建的框架，这里选择vue 选择语言 这里用TypeScript或者javaScript都可以 这样一个vite2+vue3项目就创建完成了 cd 项"}, {"id": "6991634023835500552", "title": "vue组件传值之事件总线（EventBus）｜ 8月更文挑战", "desc": "前言 最近在面试的时候，会问到一个问题就是你知道vue的事件总线吗？事件总线干嘛的？知道它的具体内容是什么吗？当我问到这些时，好多都没有听说过，有的听说过没用过，知道的不多。自己在想这就奇怪了，是做的"}, {"id": "6998322455173398536", "title": "Vue-cli中 vue.config.js 的配置详解", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 1. Vue-cli2 升级到 Vue-cli3+ 1.1 卸载旧版本 Vue CLI 的包名称由 vue-cli 改成了 @vue/cl"}, {"id": "6987640075513233438", "title": "vue如何动态加载本地图片", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我(全网同名)，解锁前端成长新姿势。 以下正文： 今天遇到一个在vue文件中引入本地图片的问题，于是有了这篇文章。 通常，我们的一个im"}, {"id": "7000183079121715230", "title": "Vue-腾讯地图的使用", "desc": "用vue实现如下的地图，包括了： 一.绘制线 1.绘制线路，拖动线路可编辑，双击可删除节点 二。绘制点"}, {"id": "6958609646013644836", "title": "【Vue】Vue-i18n 变量使用以及采坑总结", "desc": "前言 笔者目前在 Shopee 工作，我们公司主要业务是跨境电商，业务涉及到多个国家，所以我们各个系统都会涉及到国际化翻译。我们 Vue 项目技术上采用了 Vue-i18n 这个库。 今天就聊聊这个库"}, {"id": "6961227243322507278", "title": "你需要知道的vue开发公众号网页", "desc": "因为项目需要，近期做了一个公众号网页开发。在此期间也踩了一些坑，解决这些坑之后，准备对这个项目进行复盘。记录下项目从开发到上线所解决的问题，并对使用vue进行公众号开发的步骤进行一个总结。方便以"}, {"id": "6844904105853321223", "title": "text-parser | 每天读一点Vue源码", "desc": "面试的时候经常被问一些Vue源码相关的问题，通常情况下， 我会在面试前恶补掘金上的面筋来对付面试，什么双向绑定的原理呀，什么虚拟dom树呀，实际上我压根儿就没仔细研究过，其一是自己真的比较菜，其二工作上也用不上，别自己给自己添堵。但后面想一下，很多事情，为之则易，不为则难，给自…"}, {"id": "6844903527979073549", "title": "h5 和 原生的双向交互", "desc": "项目有可能是原生的app 中嵌入 h5 的页面，但是二者之间的数据交互对于我这个初次接触的小白来说刚开始的时候有些不知所措，还好安卓同事是一个经验丰富的的小伙伴，我们一起按照他往常的经验开始调试。 此时需要 app 设置 userAgent H5 需要 获取 userAgent…"}, {"id": "6991359338690379807", "title": "vue JS的内置指令：v-cloak,v-if等。", "desc": "基本指令 v-cloak的用法 作用：解决初始化慢导致页面闪动的最佳实践 注释：若网速较慢时，不能立刻显示数来msg里面的内容，会出现页面闪动，为了避免这一现象，可以用v-cloak,一般与displ"}, {"id": "6844903877104369677", "title": "探索Vue的业务模块化设计", "desc": "基于Observable模型下的Vue有着简单直观的API，借助MVVM架构模式，在中小Web应用中使用Vue有天然优势。随着Vue的流行度日益增长，Vue在大型项目中的运用略显捉襟见肘；尤其在一些高度复杂的前端应用中，Vue2在TypeScript的支持情况不甚乐观，更重要的…"}, {"id": "6987210302223810574", "title": "学习笔记-reactive, ref, toRef, toRefs", "desc": "vue3中 reactive ref toRef 和 toRefs关系和区别 以及各自的特点, 对比"}, {"id": "6991304406893330439", "title": "vue组件传值之$refs和$parent", "desc": "vue组件传值之$refs和$parent vue组件传值中有好多中方法比如props emit和provide inject还有利用中间vue实例$on $emit触发 还有就是vuex,但是我们今"}, {"id": "6987194894162853895", "title": "ElementUI问题记录1：This relative module was not found", "desc": "Vue+element开发问题记录：“This relative module was not found”。"}, {"id": "6844903495829569550", "title": "Vue-Select", "desc": "A vue component"}, {"id": "6844903553836793870", "title": "基于vue-cli重构多页面脚手架", "desc": "官方提供的项目生成工具vue-cli没有对多页面webApp的支持，但是在实际的项目中，我们需要这样的脚手架，参考了很多大牛的方法，这里提供了一种我的单页面脚手架转换为多页面脚手架的方案，供大家参考。不好的地方也请大家指正。 \b使用vue-cli生成一个你需要的单页面项目脚手架…"}, {"id": "6844903510165684237", "title": "搭建 vue2 vue-router2 webpack3 多入口工程", "desc": "通过两个具体场景来介绍如何配置多入口工程"}, {"id": "6844903703376297992", "title": "【Vue.js 牛刀小试】：第三章 - 事件修饰符的使用", "desc": "熟悉了 Vue 的指令系统后，在实际开发中，不可避免的会使用到对于事件的操作，如何处理 DOM 事件流，成为我们必须要掌握的技能。不同于传统的前端开发，在 Vue 中给我们提供了事件修饰符这一利器，使我们可以便捷的处理 DOM 事件，本章，一起来学习如何使用事件修饰符来实现对于…"}, {"id": "6975824985419939876", "title": "Vue源码分析之new Vue过程", "desc": "Vue源码分析new Vue和$mountde 过程：包括初始化各个钩子函数，数据等和挂载实例过程中的重点部分。"}, {"id": "6844903829251555342", "title": "使用异步组件优化Vue应用程序的性能", "desc": "单页应用其一个问题是首屏屏渲染速度较慢。这是因为页面首次加载时服务器将向客户端发送大量JavaScript，在屏幕上显示任何内容之前必须下载并解析。可以想象，随着应用程序规模的扩大，这个问题对用户体验的影响也会越来越突出。 现在幸运的是，当使用Vue CLI构建Vue应用程序时…"}, {"id": "6844903511872765965", "title": "Vue 项目中接入sentry", "desc": "最近在公司的内部Vue项目中接入sentry技术栈，跟踪运行时错误。 针对这件事分享下，有不完整或者错误的地方欢迎交流。 github 如果项目允许，你可以在sentry申请一个免费账户，管理你项目上传的运行时错误。也可以在公司搭建一个sentry。关于搭建sentry这块与本…"}, {"id": "6936479017822322701", "title": "vue中@Action的异常处理你了解吗？（实践）", "desc": "终于熬到星期六日，睡到中午精神饱满，打开音乐博客想听会歌，发现登陆按钮一直在转，就算密码输错了，也不应该一直在转，便一探究竟。 「现象」：密码输入错误。 「分析」：应该是接口没有返回data，只是在if(data) { this.loading = false }，所以就算没有…"}, {"id": "6850418115776675848", "title": "Vue中使用自定义指令directives 实现兼容PC和移动端的触摸滑动事件", "desc": "前言H5提供了touch事件来进行移动端的交互，但touch事件在pc上是无效的pc上可以使用mouse事件实现同样的效果，可以在使用的时候判断是否为移动端来切换对应的事件，这样写的坏处不用多说不优雅"}, {"id": "6844903696866738183", "title": "React 的几种条件渲染以及选择", "desc": "针对以上三种情况, react渲染列表的时候要正确判断并渲染出相应的视图, 也就是条件渲染. 不同于vue的v-if, v-show等框架提供的api, react的条件渲染都是js原生的再加上一点点的hack. 比如react文档提到的. if/else, && 和三目等等.…"}, {"id": "6844903941197709319", "title": "vue-cli3.0 + webpack 4 + vant + less + rem + axios构建h5移动端项目，持续更新！", "desc": "See Configuration Reference."}, {"id": "6844903624577908750", "title": "从概念到实际项目__vuex指北", "desc": "这篇文章总结了vuex实际开发涉及到的大部分概念，并加上了很多tips是自己实际开发工程中的经验，最后再加上自己实际项目的vuex构建。总之文字很多，代码也很多，建议大家先收藏（滑稽脸~）再结合官方文档慢慢看。 建议初学者先看“1,核心概念”，再根据“5,实际项目构建本地”进行…"}, {"id": "6844904115449888775", "title": "简单粗暴 · 手把手教你在Vue项目中使用Typescript", "desc": "近几个月来，关于Typescript的讨论越来越多，在阅览相关资料后，笔者也开始了自己的学习之旅，尝试在Vue项目中使用，虽然其他大大也分享了相关的教程，但在实际使用过程中难免有所纰漏，抑或随着时间出现更好的方式，因为就有了这篇文章，分享我的构建过程和一些使用技巧。 下面分享的…"}, {"id": "6844903741456384014", "title": "vue-property-decorator使用指南", "desc": "在Vue中使用TypeScript时，非常好用的一个库，使用装饰器来简化书写。"}, {"id": "6985500915969032222", "title": "Vue3+Vite+TS+Eslint（Airbnb规则）搭建生产项目，踩坑详记（终章）：vite配置多入口，多页面应用", "desc": "Vue3+Vite配置生产项目系列终章：Vite配置多入口、多页面应用。感谢大家对这一系列文章的支持和点赞，谢谢~"}, {"id": "6998449117726769183", "title": "Taro 正式发布 3.3 版本：支持使用 H5 标签与框架 DevTools", "desc": "Taro 3.3 最重要的特性就是支持使用 H5 标签进行开发，让开发者在小程序环境中复用部分的 Web 生态。进一步地提升开发者的开发体验，Taro 对 React DevTools 和 Vue D"}, {"id": "6932744687660990477", "title": "Vue权限路由[菜单权限/按钮权限控制]", "desc": "前言权限授权登录登录获取当前用户菜单，解析路由解析后端返回来路由(重点)后端接收路由格式前端接收到的真实菜单树页面刷新，路由丢失总结"}, {"id": "6863241580753616903", "title": "Vue模板编译原理", "desc": "写过 Vue 的同学肯定体验过， .vue 这种单文件组件有多么方便。但是我们也知道，Vue 底层是通过虚拟 DOM 来进行渲染的，那么 .vue 文件的模板到底是怎么转换成虚拟 DOM 的呢？这一块对我来说一直是个黑盒，之前也没有深入研究过，今天打算一探究竟。 Vue 3 发…"}, {"id": "7005065795722510350", "title": "v-bind  如何实现 v-model 的效果", "desc": "以上代码是如何使用 v-bind 和事件对象方法实现 v-model 的双向绑定效果，当然了建议你看一下源码，巧了我下一篇就是的，哈哈哈。 简单来说， v-modeL 是双向的数据绑定，而 v-bin"}, {"id": "6844903650729394190", "title": "可视化搭建前端工程 - 阿里飞冰了解一下", "desc": "做完了这个页面做下个，新建文件，复制代码，注册路由... \"海量可复用物料，通过 GUI 工具极速构建中后台应用\"。 飞冰是一套综合解决方案，用来极速构建中后台应用（其实也可以做非中后台应用）。 可以做到极速是通过『海量可复用物料』和『GUI 开发工具』实现的。 在整个流程中，…"}, {"id": "6844904013322944525", "title": "基于Vue的移动端h5项目总结", "desc": "以前都是写pc，后来需要写h5移动端项目，会遇到一些自适应和兼容性等方面的问题，下面从自己写过的h5项目中稍稍做点总结。 开启一个移动端项目的基础，首先是想好如何在代码中实现移动端适配。之前没有经验，第一个项目里简单粗暴地采用px写死的方法，觉得不好，本项目采用的是像一位优秀同…"}, {"id": "6996221037536870413", "title": "vue入门：定制自定义指令和过滤器", "desc": "本教程为入门教程，如有错误，请各位前端大佬指出。 1.什么是自定义指令 Vue中内置了很多的指令，如v-model、v-show、v-html等，但是有时候这些指令并不能满足我们，或者说我们想为元素附"}, {"id": "6984687414618898445", "title": "Vue3+Vite+TS+Eslint（Airbnb规则）搭建生产项目，踩坑详记（四）：引入vuex、vuex源码类型声明推导", "desc": "保姆级教程：引入Vuex，对Vuex进行模块划分；推导Vuex源码中的类型声明，并据此优化项目中vuex类型声明。"}, {"id": "6947820768898056223", "title": "喜大普奔，Vue 3 将不会支持 IE11 了", "desc": "清明时节雨纷纷，尤大发文欲断魂。没错，小长假这几天，大家又被爱在假期搞事情的尤大的新闻霸屏了，就在 4 月 3 日凌晨，尤大在知乎发了一篇名为“[RFC] 关于 Vue 3 的 IE11 支持”的文章， 内容是关于 Vue 3 不再支持 IE11 的提案： 看到这条消息，心里竟…"}, {"id": "6948635226453049374", "title": "0成本上手AST，用GoGoCode解决Vue2迁移Vue3难题", "desc": "总之。。。 这不是我的错！ 首先先要写个案例，找到一个可执行方案。 唯一的方案是基于AST（抽象语法树）解构代码，根据Vue官网给出升级文档的修改建议，批量修改输出文件的方案。 只是。。。AST操作有点复杂。 一. 利用 jscodeshift 操作 AST去掉console.…"}, {"id": "7004071333885640718", "title": "[Element Plus 源码解析] Overlay 覆盖层", "desc": "一、组件介绍 el-overlay是element-plus内部使用的组件，官方文档没有给出此组件的相关描述。 该组件用于弹出一个覆盖层，被用于el-dialog和el-messagebox等组件中。"}, {"id": "6925976869334417421", "title": "可视化拖拽页面编辑器 一", "desc": "最终效果实现功能：主页面结构：左侧可选组件列表、中间容器画布、右侧编辑组件定义好的属性从菜单拖拽组件到容器；单选、多选；容器内的组件可以拖拽移动位置；组件拖拽调整宽高；组件拖拽贴边，显示辅助线；操作栏"}, {"id": "7002804981027864583", "title": "vue 系列 -- 插槽", "desc": "插槽的作用是什么？ todo-button.vue——自定义组件 index.vue——引入 todo-button 组件 为了能给自定义组件添加或设置自定义内容，使得自定义组件通用化，于是有了插槽 "}, {"id": "6995808271034482696", "title": "vite + vue3 + ts 移动端实践", "desc": "技术栈选择 公司的技术栈主要是react,然后刚好有一个项目，看到vue3的发布一时手痒,直接开干，总结了一下项目的搭建以及一些坑"}, {"id": "6844903648057622536", "title": "vue权限路由实现方式总结", "desc": "全局路由守卫每次都判断用户是否已经登录，没有登录则跳到登录页。已经登录(已经取得后台返回的用户的权限信息(角色之类的))，则判断当前要跳转的路由，用户是否有权限访问(根据路由名称到全部路由里找到对应的路由，判断用户是否具备路由上标注的权限信息(比如上面的roles: ['adm…"}, {"id": "7005607810918514702", "title": "Vue果果记账-Money.vue组件", "desc": "css与React版本除颜色分配外几乎一致，需要的话请参见之前的文章React果果记账-styled-components，整体框图如下，css具体代码此处不赘述。 Types.vue 用装饰器的好处"}, {"id": "6844904183611523085", "title": "10+个很酷的Vue.js组件，模板和demo示例", "desc": "众所周知，Vue.js 组件是Vue创建自定义元素的重要功能之一，同时，模板可帮助你避免从头开始创建网页设计。总之，这些工具对于希望其开发过程更快，更高效的任何Web开发人员都是必不可少的。 此外，在过去的几年中，Vue.js 变得非常流行，许多企业将其添加到他们的技术栈中。该…"}, {"id": "7004449155883991054", "title": "【Vue3】setup函数的那些事儿", "desc": "setup函数执行顺序在 beforeCreate 和 created这两个钩子函数之前，是最早执行的。setup函数的参数是props和context，setup里的函数有ref、reactive"}, {"id": "6974728258109603847", "title": "【Vue2.x 源码学习】第十五篇 - 生成 ast 语法树 - 构造树形结构", "desc": "【Vue2.x 源码学习】第十五篇 - 生成 ast 语法树 - 构造树形结构；基于 html 特点，使用栈型数据结构记录父子关系；开始标签，结束标签及文本的处理方式；代码重构及ast 语法树构建过程"}, {"id": "6844903604013236231", "title": "实战Parcel构建一个基于Vue.js的相册应用", "desc": "前段时间发了一篇《前端构建工具发展及其比较》，回顾了前端构建工具的发展历程和进化，其中最新出来的零配置打包工具Parcel我一直很好奇，它到底怎么零配置了？众所周知此前 Webpack 的配置简有点让人茫然和无措，虽然现在 Webpack 4 也号称零配置，但也是相对的，依然需…"}, {"id": "6921716860388360199", "title": "customRef---创建一个自定义ref", "desc": "效果为什么要自定义ref?效果异步写法"}, {"id": "6844903505631821831", "title": "基于Vue2.0的Web App", "desc": "历时半个多月的敲代码过程，终于完成了这款仿lofter的项目，通过这个项目熟悉了对Vue2.0的使用，在项目中使用vuex的状态管理模块，统一的状态的管理，让我们更好的去对数据操作，对axios的跨域问题有了更深了解。遇到问题时一定要去阅读文档，可以发现使用时遗漏或者没有注意的…"}, {"id": "6944970823094501406", "title": "21天学会写个仿Vue3的轮子：（三）将响应式模块连入框架（下）", "desc": "今天是第三节的收尾篇，把上篇写好的响应式模块连入框架。 我们之前写了一个超级简单的 reactivity 模块，能够做到监视数据，以及自动执行数据更新后的后续影响。 但是它目前更多的是作为一个独立的模块，还没有和之前写的框架连起来。 我们希望它能监视组件的数据，在数据变化时，触…"}, {"id": "6889694647090675719", "title": "从零学习Vue.js（一）", "desc": "Vue 是一套用于构建用户界面的渐进式框架。Vue 被设计为可以自底向上逐层应用。响应式的更新机制：数据改变之后，视图会自动刷新。 虚拟 DOM（Virtual-DOM） 不会立即操作 DOM，而是等一系列更新DOM操作完成，一次性插入到html里去，再进行后续操作，避免大量无…"}, {"id": "6844903507070287880", "title": "如何不用构建工具开发Vue全家桶项目", "desc": "Vue是目前最流行的前端开发框架之一，与Vue-router和Vuex组成俗称的Vue全家桶，更是开发前端富交互应用的利器。配合webpack等构建工具，开发大型应用也可以得心应手。随着Vue的普及，可能一些老旧项目也希望能“渐进式”的使用Vue，或者有的项目想用Vue来做但不…"}, {"id": "6968747967704465416", "title": "vue-diff算法详解", "desc": "vue-diff算法详解：什么是dif算法？什么是vnode？vue2.xdiff算法详解；vue3.xdiff算法优化"}, {"id": "6951413869122158629", "title": "Vue 入门", "desc": "Vue入门，后端渡劫，简单入门下VUE，里面的内容都来自于官网，更新还会继续，希望同样入门的小伙伴可以一起探讨。更新还会继续！"}, {"id": "6844904039893712909", "title": "一个 vue-cli chrome extension 开发模板，支持同步刷新与 支持 crx 打包", "desc": "一个 Vue-cli chrome 扩展开发模板，支持同步刷新与 crx 格式打包。 使用： vue init kinglisky/vtemp-chrome-extension my-project cd my-project npm install npm run dev 最…"}, {"id": "6844903536887595021", "title": "Vue-Socket.io源码解读", "desc": "有一个项目，今年12月份开始重构，项目涉及到了socket。但是socket用的是以前一个开发人员封装的包（这个一直被当前的成员吐槽为什么不用已经千锤百炼的轮子）。因此，趁着这个重构的机会，将vue-socket.io引入，后端就用socket.io。我也好奇看了看vue-so…"}, {"id": "6930899895943430152", "title": "你不知道的vue", "desc": "替换数组 例：filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组。 （你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM …"}, {"id": "6844903838697127950", "title": "Vue-Cli 项目基础搭建", "desc": "Vue CLI. step.2 自定义配置，有 TypeScript支持，也有PWA。 iview-admin axios 用继承封装。当中亮点，对请求队列做了处理，多次请求同一个地址，会节流。 号外，对请求队列优化，尤其是翻页时多次请求。（未完成） 面试通常都会被问到，数据通…"}, {"id": "6946079636212154398", "title": "【场景实现】基于Vue搭建的后台管理系统，如何实现修改密码功能（md5加密）", "desc": "设置的password和confirm_password为123456，这里看到的是已经经过md5加密处理过的数据。 crypto模块的目的是为了提供通用的加密和哈希算法。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。Nodejs用C/C++实现这些算法后…"}, {"id": "6844903619817373704", "title": "✨HeyUI新组件：TextEllipsis多行省略✨✨", "desc": "如此多的复杂组件，可是当遇到这种需求的时候，还是束手无策。 话说，需求合理的不行，但是写起来酸爽无比... IE，Edge，Firefox妥妥的一片红啊。 应该是按照字数计算的，参差不齐。 忍无可忍，看来只能自己出马了。 组合任意调用，而且当执行收缩的时候，还给事件，防止更加变…"}, {"id": "6854573210839564296", "title": "点进来！和尤大一起写vue3源码！", "desc": "以下代码只介绍VUE的实现逻辑，不会覆盖所有的实际应用用例。 OK，这样我们就完成了一个非常简单的dom挂载过程。 假设我们已经实现了这样一个patch函数，他可以对旧元素打补丁。 这里需要对比新旧的vdom，所以我们对mount改造一下，存储一下真实dom结构，方便后面操作。…"}, {"id": "6981360545483980836", "title": "解读源码-vue-lazyload", "desc": "疑问： add为什么要执行两次lazyLoadHandler？ src/lazy.js add (el, binding, vnode) { this.lazyLoadHandler()"}, {"id": "6844903604738850824", "title": "Autocomplete自动补全组件-HeyUI组件库", "desc": "作为一个有“只能用自己写的库类”的毛病的人，其实都是有着许多别人所不知道的血泪史的。 AutoComplete作为一个经常性的需求，然后还具备一大堆很复杂的交互，想想大概只能找一个成熟的开源库吧。 然后，找到了一个api貌似老长老长的开源库，不错哟，用起来。 然后，被产品无尽的…"}, {"id": "6844903887736930312", "title": "Vue-CLI and Leaflet（6）: 线 绘制", "desc": "接着上一篇文章，这里介绍 线绘制 的功能。Leaflet 中因为没有图层渲染的相关类，所以再图形上没有Geometry 和 Graphic 这两个概念没有很明确的划分。这样使得在完成图像功能时，代码会简单了许多。如上一篇文章讲到的提到的**点，线，面的绘制的关键在于根据用户在的…"}, {"id": "6844903889704058888", "title": "[译] 如何用钩子解耦 Vue.js 应用", "desc": "Recently, I was wondering how best to decouple the code needed to track certain form submissions (e.g. conversion tracking in Google Analyt…"}, {"id": "6908604840620851213", "title": "Vue源码解析系列(八) -- 虚拟dom是怎么样生成的", "desc": "上一章Vue源码解析系列(七) -- 模板tamplate在解析的时候做了哪些优化我们讲了optimize静态打点优化，以便于后期虚拟dom进行diff算法时候跳过当前静态节点，我们都知道递归对比是非常昂贵的操作，所以能减少次数，就减少次数。我们的入口文件: 我们看到了AST经…"}, {"id": "6844903575726850055", "title": "WEB网站国际化的一种解决方案", "desc": "这个场景中，logo需要国际化，tab以及面包屑的文字需要国际化，详情需要国际化，动态详情以及动态详情中的文字需要国际化。 如场景图中面包屑，比如面包屑文字首页->详情, 像这种固定的文字不适合在后台管理由运维人员配置。用文件统一存储这些国际化的文件比较合适。这里采用Sprin…"}, {"id": "6988779692589318181", "title": "vue客户端发送两次请求的解决办法", "desc": "vue客户端发送两次请求的解决办法 vue客户端发送两次请求的解决办法 vue客户端发送两次请求的解决办法"}, {"id": "6988519321244794910", "title": "Vue前端工程化", "desc": "1. 模块化相关规范 1.1. 模块化概述 传统开发模式的主要问题 ① 命名冲突 ② 文件依赖 通过模块化解决上述问题 模块化就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通"}, {"id": "6988485137834967053", "title": "vue3中emits验证返回的布尔值无效", "desc": "请问vue3中的emits的验证功能返回一个布尔值，有什么用？就算返回了false，也阻止不了父组件传过来的事件，而且控制台还会有告警。（求求大佬帮忙看看，谢谢） 父组件 子组件 、 点击子组件的p标"}, {"id": "6844903536652713997", "title": "前端线上故障响应方法", "desc": "处理线上问题第一原则：先保障线上服务可用性，第一时间降低故障影响范围。 目前监控平台：实时数据监控平台prajna，实时错误日志平台CAT和 打点日志平台GALAXY。 CAT上可以观测到当天的异常报错数据，对比前一天和上周同一天同事间段的数据，是否错误异常。 GALAXY上可…"}, {"id": "6939102974278893575", "title": "你真的了解Vue2.0的生命周期执行顺序吗？", "desc": "最近面试遇到一个很有意思的问题：“你知道Vue的同一生命周期在子组件先执行还是父组件先执行？”可能了解Vue的执行机制的同学就已经知道答案了，不着急说答案，想请你慢慢看完。我们来测试一下：探索1：生命"}, {"id": "6844903728831528967", "title": "Vue一个案例引发「内容分发slot」的最全总结", "desc": "今天我们继续来说说 Vue，目前一直在自学 Vue 然后也开始做一个项目实战，我一直认为在实战中去发现问题然后解决问题的学习方式是最好的，所以我在学习一些 Vue 的理论之后，就开始自己利用业余时间做了一个项目，然后通过项目中的一些案例进行总结。 <slot> 功能，所以掌握这…"}, {"id": "6844903728680550408", "title": "在移动端使用vue-router和keep-alive", "desc": "首先一个问题是keep-alive的行为。我们可以通过keep-alive来保存页面状态，但这样的行为对于类似于APP的体验是有些奇怪的。例如我们的应用有首页、列表页、详情页3个页面，当我们从列表页进入详情页再返回，此时列表页应当是keep-alive的。而当我们从列表页返回首…"}, {"id": "6981716009753247781", "title": "【study】Vue全家桶之Vuex", "desc": "一.组件之间共享数据的方式 1.父传子：v-bind属性绑定，props接收 2.子传父：v-on事件绑定，on接收数据的那个组件，emit发送数据的那个组件 3.兄弟组件之间共享数据：EventBu"}, {"id": "6981641547741659149", "title": " Vue component 和  vue CLI", "desc": "Vue.component使用注意点， 以及使用Vue CLI搭建我的第一个项目 vue-demo-dands。"}, {"id": "6844903870527701000", "title": "Vue.js 2.0 手把手入门笔记", "desc": "框架则是为解决一类问题而开发的产品，框架是我们在指定的位置编写代码，框架帮我们调用。 v-for循环数组 当用for来更新已被渲染的元素时，vue的“就地复用”机制 是不会改变数据项的顺序的。要想重新排序，需为每项添加key属性（也就是每项唯一的id） 当某一层有很多相同的节点…"}, {"id": "6924477494942760974", "title": "Vue响应式原理剖析", "desc": "响应式原理是Vue的核心思想，vue2.x使用的是Object.defineProperty(),3.x使用了Proxy代理。本文主要描述了defineProperty和Proxy的使用原理和特点。 Proxy是浏览器基本的api实现，已有很好的兼容性。目前主要IE不支持，我们…"}, {"id": "6844903848520187918", "title": "vue 工具函数封装，持续更新。。。", "desc": "只需要将绑定的这段js引入到main.js即可。绑定方法十分简单，这里不再详细说明 获取 cookie 值。options 参数可选，取值如下： converter 转换函数。如果所获取的 cookie 有值，会在返回前传给 converter 函数进行转换。 选项对象。对象中…"}, {"id": "6960637777037754404", "title": "详细分析Vue的数据响应式", "desc": "由于原文档比较晦涩难懂，所以本文详细分析了Vue的数据响应式的原理。带你了解set，get等属性的作用。 这会让你对 new Vue有比较深刻的了解。"}, {"id": "6844903989281030158", "title": "keep-alive 解决vue单页面应用tab页切换缓存问题", "desc": "基于vue 2.6版本开发的功能复杂的单页面应用，产品提出的需求是像浏览器tab页一样，从菜单打开的若干个页面之前可以切换，且切换到其他页面时能保留其他页面正在编辑的数据。同时，关闭tab页之后，数据就不保留了。 <keep-alive> 主要用于保留组件状态或避免重新渲染，包…"}, {"id": "6917275333129404424", "title": "关于Vue eventBus总线传值时的生命周期问题", "desc": "在Vue的非父子组件传递数据时，我们会用到Vue的bus总线机制，也就是在Vue的原型上声明一个vue实例，通过Vue的属性来链接各个页面。 有的时候我们需要从B页面返回A页面时带回数据来赋值给A页面，比如：在B页面点击返回方法中触发$emit()，然后在A页面的mounted…"}, {"id": "6951953681164009485", "title": "Vue 3.0 所采用的 Composition Api 与 Vue 2.x使用的Options Api 有什么区别", "desc": "Composition API 产生背景：当我们的组件变得更大时，业务逻辑关注点的代码也会变长，假如想找到某个在多处代码中有频繁操作的属性进行新需求的具体操作，会在100甚至更多行代码中跳来跳去，找到"}, {"id": "6910461853688676359", "title": "VUE3源码阅读笔记----初始化流程", "desc": "vue3正式版发布已有不少时间了，一直没有机会去使用，这周用了vue3写了一点页面，对vue3的源码产生了好奇，所以趁着周六来学习一波vue3的源码。这里就不讲vue3的相关写法了，只关注它的源码。v"}, {"id": "6978365322155786248", "title": "Vue3+Vant+Vue-cli+Restful api实战—图书商城移动端", "desc": "Vue3+Vant+Vue-cli+Restful api实战—图书商城移动端 经过将近一个月的努力，项目终于做完了，编写的时候在代码中写了很多注释，方便自己后期查看!有问题的小伙伴可以找我！"}, {"id": "6844903604076150797", "title": "Vue组件通信深入Vuex", "desc": "上一篇博客（Vue组件通信深入）中，介绍了多种方法来实现组件之间的通信，但是涉及到深层嵌套和非直接关联组件之间的通信时，都会遇到无法追踪数据和调试的问题，而vuex就是为解决此类问题…"}, {"id": "6844904045144965134", "title": "跨域请求问题总结", "desc": "他指示了是否使用资格证书来创建一个跨站点访问控制（cross-site Access-Control）,同一个站点下该参数无效。 Failed to load http://localhost:3000/login: Response to preflight request …"}, {"id": "6844903877527994381", "title": "学习vue源码—mvvm", "desc": "稍微有去了解过vue是如何双向绑定的我们都很容易知道vue是通过Object.defineProperty劫持data属性的setter和getter，但是这仅仅只是实现的一部分，在这个实现里我们还要理解dep（订阅中心）和watcher（订阅者）的概念。 dep的定义参考了观…"}, {"id": "6868060397094731789", "title": "vue常见问题,样式穿透，e-charts图表使用等", "desc": "一、vue样式穿透1.stylus的样式穿透使用：（>>>）2.sass和less的样式穿透使用：（/deep/）3.通用样式穿透使用：（::v-deep）二、echarts图表的使用1.echart"}, {"id": "6844903727002812424", "title": "Vue.js的复用组件开发流程", "desc": "接下来我们会详细分析下如何完成由多个组件组成一个复用组件的开发流程。 本节我们主要要完成这样一个列表功能，每一行的列表是一个组件，列表内可能出现按钮组件或者箭头组件，点击按钮组件可以自定义事件，同时可以根据不同的参数来决定当前列表是带按钮的列表or带箭头的列表。 至于点击事件，…"}, {"id": "6844903614725521422", "title": "手动开发一个日历组件", "desc": "应用场景是公司的一个每日推荐专题需要加入日历功能，点击日历可以跳转到当日的推荐。 日历实现的核心是利用js的Date对象（项目代码环境是依赖在vue当中）。 我们首先考虑我们日历的第一页，当前月。 值得一提的是我们的日期数据，因为这里涉及到2个变量，第一个是每个月份的天数是不一…"}, {"id": "6844903913552871438", "title": "Vue 技能进阶：使用设计模式写出优雅的前端代码", "desc": "文针对 Vue 中如何控制组件子树之外的东西，探讨了四种解决方案，并展示了每种解决方案的优缺点。希望读者能从中受到启发。 可以。 但我找出的解决方案可能与你想到的有很大区别。 我一开始想到的法子非常糟糕，然后试了好几次才找出来这个问题的最佳方案，起码我觉得够好了。 这是一个棘手…"}, {"id": "6844903497821863943", "title": "简单记录上拉加载更多实现思路", "desc": "下拉刷新、上拉加载更多是移动端常见的交互效果，也有很多封装好的库供我们方便的调用。但是如果只是一个简单的临时页面，也许不用第三方库手写实现会是一个不错的选择。今天就来简单说说上拉加载更多的实现思路。 把上拉加载更多这个过程拆解一下，可以分成这几个步骤： 页面向下滚动… 页面滚动…"}, {"id": "6844903614301880328", "title": "定制化vue-cli Template/webpack", "desc": "以前的项目要不是前人搭建的，要不就是从 vue-cli 搭建，然后将一些旧项目公用的代码搬过来，这些操作下来一个小时估计是跑不了的了，所以搭建属于自己的 template 是一件省时省力的事情。 本文章不会讲到 vue-cli 的原理和实现，有兴趣的同学可以阅读 从vue-cl…"}, {"id": "6928561346950725639", "title": "前端增长（vue基础）", "desc": "pushState()设置新的url可以是和当前url同源的任意url；hash只可修改#后面的部分，只能设置当前url同文档的url。 pushState()设置的新url可与当前url一致，这样也会把记录添加到栈中；hash必须设置与当前url不同的url的，才会触发动作将…"}, {"id": "6844903617640529933", "title": "为什么Vue不能观察到数组length的变化？", "desc": "因为vue的响应式是通过Object.defineProperty来实现的，但是数组的length属性是不能添加getter和setter，所有无法通过观察length来判断。 这样可以手动指定需要观察的key，那么就可以达到预期的效果。 vue对数组的length直接改变无法…"}, {"id": "6974567803466547214", "title": "Vue中 实现动态样式的几种方式", "desc": "这是我参与更文挑战的第 11 天，活动详情查看：更文挑战 1. 三元运算符判断 2. 动态设置class 2.1 主要运用于：实现循环列表中点击时，相应的元素高亮；（默认首个元素高亮） 2.2 主要运"}, {"id": "6844903956456407047", "title": "用Vue模仿antd的样式造UI组件之button", "desc": "在终端跳转至项目文件夹下，执行npx parcel --no-cache index.html.便会将相关的依赖下载。 如果本文有错漏的地方，请各位看官指正。如果决定本文对你有那么一点点帮助，请点赞哦!"}, {"id": "6954734002846728223", "title": "Vue3 响应式系统 ｜小册免费学", "desc": "前言 vue3中最核心的就是基于Proxy实现的响应式API（用于代理对象类型） 响应式系统 API，顾名思义，就是指在新的特性中是如何去实现 Vue 的响应式功能"}, {"id": "6844904037947539464", "title": "VUE学习｜使用v-for和checkbox中遇到的问题", "desc": "本文记录了我在实现一个简单的TodoList的过程中遇到的问题即解决方法。由于我目前水平较低，仍有未明白的地方，同时文中也可能出现纰漏或者错误指出，若是有人可以看到此文，希望可以解答我的疑惑或者指出不正之处，谢谢。 在一个简单的TodoList应用中，使用v-for指令绑定待办…"}, {"id": "6844903865570033677", "title": "Vue组件库工程探索与实践之按需加载", "desc": "一个组件库通常有数十个组件，随着版本迭代组件数量还可能进一步增加。组件库文件的体积也随之膨胀，动辄几百KB。而我们的业务项目中，有可能只用到了这个组件库的少数几个组件，这时把整个组件库打包进去，非但没有必要，还会徒增项目构建文件的体积，这与应用性能优化的方向是背道而驰的。因此，…"}, {"id": "6995165142321201165", "title": "vue中 localStorage的使用方法（详解）", "desc": "一 什么是localStorag ，使用 Web Storage 存储键值对比存储 Cookie 方式更直观，而且容量更大，它包含两种：localStorage 和 sessionStorage"}, {"id": "6964360152468160525", "title": "【Vue】020. Axios和Vue中的几个问题", "desc": "本文主要介绍Axios的配置和封装，包括Axios的配置项、请求拦截、响应拦截、接口配置和使用方法，以及对Vue中几个问题进行了粗略的解答。"}, {"id": "6844903629971783694", "title": "首屏优化系列（一）", "desc": "八一八本次项目中使用的优化手段，以及自己从中获得的知识。 由于本次项目较为复杂，模块较多，（当然不比大型电商网站），首页的请求就有8个，并且是精简之后的，稍有不慎，白屏现象就会很严重。体验极差。 1. 分类 2. 轮播图 3. 推荐 4. 收藏数 5. 购买数 6. 案例展示 …"}, {"id": "7000314237687955493", "title": "vue列表功能", "desc": "列表功能举例 步骤 1：列表功能 完整的代码如下： 代码分析：数据是存放在data的list中的，将data中的数据通过v-for遍历给表格。 上方代码运行的效果： 步骤 2：无数据时，增加提示 如果"}, {"id": "6910928132413325320", "title": "Vue2核心原理(简易版)-响应式原理", "desc": "我们在使用vue.js的时候，options.data的api规定了data接收一个函数(返回对象)或者对象，像下面这样的代码中的data属性符合官方要求。 data是Vue 实例的数据对象。Vue 将会递归将 data 的 property 转换为 getter/setter…"}, {"id": "6844904003805904903", "title": "创建vue组件库并发布到npm", "desc": "version中是我们需要发布到npm的版本号。 配置对应的webpack.common.js,webpack.dev.js以及webpack.prod.js，这里webpack的知识点就不详细展开了。 随后在src文件夹中和我们平常书写一个vue组件一样。 创建一个组件，这个…"}, {"id": "6887090741014134792", "title": "【Vue全解3】Vue的data代理和数据响应式", "desc": "结论：一开始是{n:0},传给new Vue之后立马变成{n:(...)}。可以看见，两次打印出来的myData不一样！其中的原因是什么呢？接下来让我们了解一下ES6的新语法getter/setter，通过这个新语法，能让我们有进一步的认识。 坑预警：get/set函数不需要写…"}, {"id": "6966395930115309582", "title": "vue须知（3）—— vue中key的作用和原理", "desc": "源码中找答案：src\\core\\vdom\\patch.js - updateChildren() 测试代码如下 上面案例重现的是以下过程 不使用key 前两次比较A/B,进行了2次patchVnode"}, {"id": "6844904103076708366", "title": "解决vue 在ios微信“复制链接”功能问题", "desc": "这个问题在安卓上是完全没有问题的，可是到了iPhone上就彻底失效了。因为ios微信对vue路由中的#号识别问题。 我的解决办法是在初始进入项目时重新拼接项目地址，再重定向到拼接的地址去。"}, {"id": "6844903616969441288", "title": "前端路由简介以及vue-router实现原理", "desc": "前端路由简介以及vue-router实现原理"}, {"id": "6844903625790062599", "title": "🚀HeyUI完成国际化支持啦🌏🇨🇳🐼", "desc": "距离上一次的TextEllipsis两周，终于又要迎来一次大的变动了。 是的，我终于把HeyUI的国际化写完了，还顺便把整个网站翻译了一遍。 总之，花费大半个月的时间。 😂😂， 默默回首我的端午假期..... 首先，我们已经有了英文版的系统啦。 HeyUI默认使用中文，如果…"}, {"id": "6844903592042692622", "title": "A theme for VScode.", "desc": "一款简单的 VSCode 主题，老少皆宜，童叟无欺。"}, {"id": "6844904008541290503", "title": "Vue3.0 数据响应机制解析", "desc": "我们在看上面简化的这段代码，实际上就是使用ES6中的Proxy，相信大家对于Vue2.0的响应式是通过Object.defineProperty来实现的，兼容主流浏览器和IE9已上的IE浏览器，能够监听数据对象的变化，但是监听不到对象属性的增删、数组元素和长度的变化，同时会在v…"}, {"id": "6844903518902419469", "title": "不求甚解 - VUE实践", "desc": "之前就是laravel自带的blade加上jquery，配上boostrap。看前端都上Vue了，新页面尝试下，总结下体验 好处：表单操作变得方便了，简化了动态渲染页面的逻辑。 缺点：以前使用的js库，在Vue的框架下，会有初始化的问题。目前都是在updated回调了重新初始化…"}, {"id": "6971431841287012382", "title": "自学Vue Three Day！！！", "desc": "内容有点多，如果感兴趣的话，建议先点赞关注后观看，以防后面找不到回家的路。 1、v-for中的key属性： 这个地方没有加:key，只要增加或减少元素里面的内容，浏览器就会进行DOM操作，如下图所示："}, {"id": "6971387761840357412", "title": "【Vue2.x 源码学习】第六篇 - 数据代理的实现", "desc": "【Vue2.x 源码学习笔记】第六篇 - 数据代理的实现；data暴露到vm._data 实例属性上；利用Object.defineProperty将vm.xxx操作代理到vm._data上；"}, {"id": "6844903656362344462", "title": "vue升级之路（三）--  vue-router的使用", "desc": "在创建的 router 对象中，如果不配置 mode，就会使用默认的 hash 模式，该模式下会将路径格式化为 #! 开头。 添加 mode: 'history' 之后将使用 HTML5 history 模式，该模式下没有 # 前缀，而且可以使用 pushState 和 rep…"}, {"id": "6955748663180132360", "title": "Vue 双向数据绑定", "desc": "原理分析 通过数据劫持实现数据双向绑定 监听器Observer, 用来劫持并监听所有属性, 所发生变动则通知订阅者 订阅者Watcher, 可接收到属性的变化通知并执行相应的函数, 从而更新视图 由于"}, {"id": "6863343746080210951", "title": "通俗易懂让你认识到 slot 插槽的魅力", "desc": "我们都知道组件的目的是为了可重用，开发中我们有的时候需要用这个组件，但是组件的功能又不能完全满足需求。我们想要在一个组件内加入一些开发者可自定义的一些内容，这个时候就可以在组件中利用slot插槽更好的对组件进行扩展与自定义。 vue 的 slot 插槽提供给了开发者更加灵活的方…"}, {"id": "6844904064744947726", "title": "Vue.js的模板语法", "desc": "Mustache 标签将会被替代为对应数据对象上 “msg” 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。 如果使用 v-once 指令，你也能执行一次性插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定。…"}, {"id": "6844904198933315592", "title": "撸一个图片懒加载指令v-lazy", "desc": "图片懒加载其实就是延迟加载。也就是不用一次性加载所有的图片，等到用户需要某张图片的时候再加载，这样可以避免在同一时间请求大量的数据。也就是当图片滚动到可视区域的时候再去加载图片。 Vue中除了平时常用的v-show、v-bind等指令外，还可以自定义指令。由于自定义指令过于简单…"}, {"id": "6977259442329010213", "title": "vue自定义指令", "desc": "vue自定义指令 1.仅输入数字 2. 自动聚焦 3.点击复制到剪切板 4. 快捷键映射 ...."}, {"id": "6965847981815758862", "title": "Vuex的使用并实现一个简易版Vuex", "desc": "Vuex 回顾 什么是 Vuex Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件 的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 Vue"}, {"id": "6844903960046731277", "title": "五分钟看懂Vue3-数据绑定", "desc": "Vue3在伟大祖国70周岁时终于和大家见面了。🚩 1、Proxy，我之前写过一篇Proxy介绍，可以参考下。 然后我们就能愉快的玩耍了。 我们主要关注reactive.ts和baseHandlers.ts这两个文件里的内容。 解决第一个问题，对于初学者，我们可以采用暴力递归的…"}, {"id": "6999844791114530852", "title": "Vue中如何使用WebSocket 以及nginx代理如何配置WebSocket", "desc": "简述websocket特性: 1.主要有ws(不加密)和wss(加密)；ws是基于http请求建立握手，wss是基于https请求建立握手。 2.ws的握手基于http的get方式，协议应不小于1.1"}, {"id": "6844903814793969678", "title": "细谈 vue 核心- vdom 篇", "desc": "很早之前，我曾写过一篇文章，分析并实现过一版简易的 vdom。想看的可以点击 传送门 聊聊为什么又想着写这么一篇文章，实在是项目里，不管自己还是同事，都或多或少会遇到这块的坑。所以这里当给小伙伴们再做一次总结吧，希望大伙看完，能对 vue 中的 vdom 有一个更好的认知。好了…"}, {"id": "6990915486347165726", "title": "vue 踩坑笔记", "desc": "长期更新，总结vue开发过程中遇到的各种问题。 npm指令，yarn指令，axios，jsonplaceholder..."}, {"id": "6844903645624926215", "title": "基于vue.js实现树形表格的封装", "desc": "首先这里的子组件tree-item没有在页面上有引入，但是也可以正常使用。这里就是关健点，因为这个子组件是需要递归实现，所以，需要动态注册到当前组件中。代码如下（由于代码太多，先贴图说明吧，点击这里可以看源码）： 这里子组件看起来是不是挺奇怪的，但是为了递归他本身，暂时也只想到…"}, {"id": "6993718053062049805", "title": "【vue】生命周期详解", "desc": "1.创建vue实例流程 首先做一些初始化的操作，主要是设置一些私有属性到实例中 运行生命周期构子函数beforeCreate 进入注入流程：处理属性，computed，methods，data，pro"}, {"id": "6999174590551293959", "title": "（二）vue3-shared（vue3工具函数）", "desc": "文中主要通过学习 shared 模块下的几十个工具函数，比如有：isPromise、makeMap、cacheStringFunction、invokeArrayFns、def、getGlobalTh"}, {"id": "6994826589997383694", "title": "JS 错误捕获机制", "desc": "Javascript引擎是单线程的，因此一旦遇到异常，Javascript 引擎通常会停止执行，阻塞后续代码并抛出一个异常信息，因此对于可预见的异常，我们应该捕捉并正确展示给用户或开发者。"}, {"id": "6999937914507362318", "title": "Vue Router详解", "desc": "Vue Router 是 vue.js 的官方插件，用来快速实现单页应用。 指的是网站的 “所有” 功能都在单个页面中进行呈现。具有代表性的有后台管理系统、移动端、小程序等。"}, {"id": "6989133512456699935", "title": "Vue3.0 部分实验性 API 将弃用以及script-setup的正式加入", "desc": "最近看了一下 release 记录，发现最新的 2 个小版本对 script-setup 这个新特性改动还算蛮大的，虽然截止至 7 月 2 日的 3.1.4 版本，script-setup 还是处于实"}, {"id": "7000008336921853983", "title": "从0搭建Vue2 UI组件库（八）", "desc": "如何封装成vue插件~~~前面写了封装button组件、dialog组件、input组件、switch组件、radio组件、radioGroup组件、form组件和formItem组件，有需要的童鞋请"}, {"id": "7000568103226572831", "title": "一篇搞定Vue 中属性及样式的花样绑定", "desc": "一、普通的绑定样式 直接在style中写好样式，然后直接在需要的地方使用class=\"定义的样式名称\"就可以了 运行后展示下图 二、绑定动态的样式 在data中定义一个属性，然后在需要用到的地方使用 "}, {"id": "6844903661793984526", "title": "vuex工作原理详解", "desc": "vuex作为vue官方出品的状态管理框架，以及其简单API设计、便捷的开发工具支持，在中大型的vue项目中得到很好的应用。作为flux架构的后起之秀，吸收了前辈redux的各种优点，完美的结合了vue的响应式数据，个人认为开发体验已经超过了React + Redux这对基友。 …"}, {"id": "6992082690279211039", "title": "Vue编写的页面部署到springboot网站项目中出现页面加载不全问题", "desc": "问题描述: 在用Vue脚手架 编写出一个页面之后, 部署到后台项目中, 因为做的是一个页面 按理来说 怎么都能够在服务器上运行 , 我也在自己的node环境测试 , 在同学的springboot上运行"}, {"id": "6977163177738010631", "title": "Vue 路由钩子（导航守卫）详解及应用场景", "desc": "这是我参与更文挑战的第 18 天，活动详情查看：更文挑战 在vue-router的官方文档中, 将路由钩子翻译为导航守卫。 1. 路由钩子语法 1.1 全局前置守卫 你可以使用 router.befo"}, {"id": "6986448728081039391", "title": "4x3 精读Vue官方文档 - 生产环境部署", "desc": "开启生产环境模式 与开发环境的区别： 代码会被压缩。 代码中的警告信息会被移除（性能上更好）。 不使用构建工具 需要使用完整版 vue.js (同时包含编译器与运行时的版本)。 需要自己判断环境差异，"}, {"id": "6996314441914531871", "title": "【Vue2.x 源码学习】第四十一篇 - 组件部分 - 生成组件的真实节点", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 一，前言 上篇，介绍了组件部分-组件的生命周期，主要涉及以下几部分： 本篇，组件部分-生成组件的真实节点； 二，生成组件的真实节点 1，前"}, {"id": "6995395030504439845", "title": "删除列表元素的时候有必要通知父组件吗？——uni-app#vue3的一个特性引发的思考", "desc": "删除列表元素的时候有必要通知父组件吗？——uni-app#vue3的一个特性（bug）引发的思考 通过尝鲜uni-app的vue3版本，发现了子组件更新父组件列表数据导致渲染结果不正确，最终如何解决？"}, {"id": "6981283588696178718", "title": "Vue插槽&过滤器", "desc": "插槽 什么是插槽？ 概念 Vue 实现了一套内容分发的 API，为组件提供了一个 <slot> 元素作为承载分发内容的出口。 简单来说就是<slot> 元素作为组件模板之中的内容分发插槽。<slot>"}, {"id": "6844904003633954829", "title": "Vue & TypeScript 初体验 - 使用Vuex (vuex-module-decorators)", "desc": "在上一篇文章中简单介绍了Vue项目中使用TypeScript, 以及相比原来Vue组件写法的一些改变. 本文主要针对在TypeScript下Vuex写法如何更贴近TS的面向对象编程. 该包最终生成的代码是ES2015(ES6)格式的, 因此, 如果你的Vue项目如果最终生成的是…"}, {"id": "6886250990409318414", "title": "Vue3: 如何以 Vite 创建，以 Vue Router, Vuex, Ant Design 开始应用", "desc": "访问 https://ikuokuo.github.io/start-vue3/ 体验在线演示。"}, {"id": "6989529331760365604", "title": "数据大屏六：组件开发思路", "desc": "概要：本文主要记录数据大屏中，容器组件，变换分类组件，面板条目滚动组件的开发思路以及用到的技术。 容器组件 1、resize事件调整屏幕宽高比。放大缩小，或者是屏幕宽度变化的时候，容器中的内容保持同样"}, {"id": "7000252707529785381", "title": "解决页面滚动, 🍖ant design的select框和选项分离问题, 同时理解ant的html设计技巧.", "desc": "通过解决我们也学一下ant的html/css设计技巧. 现象 滚动的时候, 这里\"负责人\"的选项和select框已经分离了. 我用的vue版本的, 我看了下react版本的api设计, 我想2个都会出"}, {"id": "6844904143081996301", "title": "告别无聊的undefined判断, 让老vue-cli3支持🚀\"可选链\"等\"ES2020\"特性", "desc": "让老项目(基于vue-cli)支持ES新语法(处于试验阶段), 比如\"可选链\". 了解其他目前在实验阶段的ES新语法. 近期看到多个群中都在聊\"可选链\", 所以就把单位的老项目也开启了\"可选链\"功能, 使用了1个月后的感受就是: 再也不用写那么长的\"undefined\"判断了,…"}, {"id": "6997567108720623629", "title": "Vue面试题", "desc": "5. Vue面试题 1. Vue中更新是异步还是同步的,为什么? 2. Vue中nextTick的原理是什么? 3. Vue中extend的原理是什么? 4. Vue中生命周期的原理是什么? 5. V"}, {"id": "6951627219412189214", "title": "lodash中一些比较常用的方法", "desc": "无意间看到了公司项目中同事有用到lodash的方法就看了一下,它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数"}, {"id": "7001851854615379981", "title": "【VUE面试题】生命周期钩子", "desc": "VUE的生命周期？ vue每个组件都是独立的，每个组件都有一个属于它的生命周期，从一个组件创建、数据初始化、挂载、更新、销毁的过程"}, {"id": "6944190150406570020", "title": "vue3新语法糖——setup script", "desc": "vue3上线已经很久了，许多小伙伴应该都已经使用过vue3了。那么在使用vue3composition API的时候有没有觉得整个过程会比较繁琐呢。比如当你定义了一个方法，然后发现模板需要使用该方法，然后就必须将方法返回。当一个组件中存在大量方法和属性的时候，这个过程就会非常的…"}, {"id": "7001102970959953933", "title": "我是怎么把源码应用到实际开发中的", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 本文的主要目的是为了学习vue-next的发布流程。学习本文后，将获得三个技能 准备工作 clone项目到本地 vue-next，并且"}, {"id": "6844903543397154824", "title": "B站的前端之路", "desc": "过去的开发模式中，我们采用了以后端为主的 MVC 架构方式。具体来说，每次项目评审后，前后端会先一起约定好接口，之后分别进行开发，开发完，前端需要把页面提供给后端，后端配置上数据，然后返回出来。正式基于这样的开发模式，导致了总工作量的增加，同时沟通和联调成本的消耗也十分显著。 …"}, {"id": "7002965176719048740", "title": "vue3实践，从setup与ref(),reactive(),toRefs()谈起", "desc": "写在前文vue3.2不久前发布，那么对于处于一线的前端工程师，有必要将vue2升级到vue3,迎接全新出现的composition API?"}, {"id": "6983325702825345054", "title": "v-model双向数据绑定及其修饰符", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第11篇，关于v-model及其修饰符 ，一起来看看吧~~~~"}, {"id": "7000995071134793764", "title": "【VUE】列表过渡效果", "desc": "在前面的章节中一直在操作单个元素以及同一时间渲染多个节点中的一个的过渡，那么怎么同时渲染整个列表，transition-group"}, {"id": "6885115003289436174", "title": "适合Vue用户的React教程，你值得拥有（二）", "desc": "上周小编我写了 适合Vue用户的React教程，你值得拥有，得到了小伙伴们的一致好评，今天这篇文章是这一系列的第二篇文章。今年的9月18日是九一八事变89周年，同时在这一天，Vue3.0正式版发布了。相信很多小伙伴已经看过了Vue3.0相关的很多文章了。今天这篇文章将会对Vue…"}, {"id": "7005101670858227742", "title": "React与Vue区别", "desc": "1.Vue有更好的渲染优化: React中当某个组件发生变化时，会以该节点为根，重新渲染所有的子组件，如果要避免子组件的重新渲染，可以在生命周期函数shouldComponentUpdate中进行设置"}, {"id": "6994614088248606750", "title": "Vue3编写一个可以用js调用的组件", "desc": "项目开发中基本都会用到组件库，但是设计稿样式和功能不一定和组件库相同，尤其像是消息提示弹窗、确认弹窗，各个项目各个设计师都有自己的一套风格。我们可以实现一个通过js函数调用的自定义组件"}, {"id": "6844904205363183623", "title": "为京东PLUS会员保驾护航的日子", "desc": "改版页面增加沉浸式以及楼层换肤功能，烘托氛围，增强用户感知；以及整个页面实现配置化，减少后期前端维护上线成本。 目前正式用户已经接近两千万大关，一切是那么的欣欣向荣、朝气蓬勃。 然而沉下心来，无论是技术的升级，还是项目的不断完善，在《2019年京东PLUS会员前端开发之路》一文…"}, {"id": "6967268351835897892", "title": "请阐述keep-alive组件的作用和原理", "desc": "🥕 keep-alive 作用 keep-live组件是vue的内部组件，主要用于缓存内部组件实例。这样做的目的在于keep-alive内部组件切换时，不需要重新创建组件实例，比如说使用v-if来决定"}, {"id": "6977373208370479117", "title": "从Vue2.0到React17——React组件之间的通讯", "desc": "React组件之间的关系可以分为父子关系，跨级关系，非嵌套关系。本文主要介绍一下各种关系的React组件之间是如何通讯的。"}, {"id": "6992467229090512903", "title": "10x2 精读Vue官方文档 -  示例 - 内嵌组件 & 弹力拖动", "desc": "精读 Vue 官方文档系列 🎉 内嵌组件 使用 Vue 兼容第三方生态的范例。例如基于 JavaScript 或 Jquery 的插件、widget、库等。 一些诀窍： 选用的插件、widget 最好"}, {"id": "6844903976920416263", "title": "Vue登录注册-掘金可爱萌猫", "desc": "各位掘友久等了,最近在写Vue全家桶+Vant从零开发搭建电商App实战项目,项目基本完结,后面会不定期分享出来,期待各位掘友的关注。 注册登录,几乎是所有电商App必备模块,正好今天想把这块知识拆出来,详尽的写下来了,用过掘金的小伙伴都知道,掘金PC端的登录界面非常的萌,当你…"}, {"id": "6844903591228997646", "title": "Step-by-step，打造属于自己的vue ssr", "desc": "笔者最近在和小伙伴对vue项目进行ssr的升级，本文笔者将根据一个简单拿vue cli构建的客户端渲染的demo一步一步的教大家打造自己的ssr，拙见勿喷哈。 在学习一项新技术的时候我们首先要了解一下他是什么。这里引用官网的一句话: 这里我们用vue-cli去简单的做一个vue…"}, {"id": "6945369286537904135", "title": "手把手学习Vue3.0：Vuex4.x集成+使用理论总结大全", "desc": "我在做一个页面效果，就是在首页上点击导航，或者其他的按钮需要在主显示区域创建一个tab，同时也要与面包屑的效果。开始我没有开通菜单的router效果，仅仅是利用菜单组价的点击事件做出了想要的效果，使用的是事件总线传参，因为事件总线可以在任何组件间传递参数，事件总线的使用可以参考我..."}, {"id": "6894391051046354958", "title": "VUE 2.x 的 ntxtTick 实现（nextTick）连载", "desc": "jsvascript 事件环机制是 nextTick 的核心原理，不理解强烈建议仔细阅读下面文章在看下面的代码。 在 Vue2.5 版本以上，单独维护了一个 nextTick 实现的文件 src/core/util/next-tick.js。 src 目录下存放着 Vue 的源…"}, {"id": "6844904169896148999", "title": "你真的理解Vue的数据响应式吗", "desc": "我相信很多同学对Vue的数据响应式是通过Vue.js文档来了解的，但毕竟文档的篇幅有限，你能知道自己理解了多少吗？先来看看下面几道题目，来看看你的理解是否到位。 好了，以上三题你都能想明白吗？带着这些疑问我们来深入了解一下Vue的数据响应式。 先聊一聊，什么是响应。 “响应”，…"}, {"id": "6844903589077352462", "title": "\"双非\"应届生校招如何获得大厂青睐?（内附前端大厂面经）|掘金技术征文", "desc": "笔者从17年的2月份开始准备春招，其中遇到不少坑，也意识到自己走过的弯路。故写了这篇文章总结一番，本文适合主动学习的，对自己要学的课程不明确的，对面试有恐惧症的...等将来打算从事技术岗位的同学们。 为什么要准备校招？社招不一样能够进入大公司吗？对于一些不懂校招这个概念的人来说…"}, {"id": "6844903620786257934", "title": "[实用] 如何配置 iview 调试环境", "desc": "1. 在开发环境中使用源码 从 package.json 文件来看，入口指向：dist/iview.js。 这是我们日常使用的 iview 代码，单纯从调用的角度来说，这完全没有问题，还省性能；但作为调试就稍显麻烦，想找个组件的源码都麻烦。 2. 使用 babel-loader…"}, {"id": "6844903782296322056", "title": "设计模式在vue中的应用（六）", "desc": "为什么要写这些文章呢。正如设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结（来自百度百科）一样，也是想通过分享一些工作中的积累与大家探讨设计模式的魅力所在。 每次点击新增联系人按钮页面上会增加一个这样的form，点击保存按钮…"}, {"id": "6844903561248112648", "title": "利用Node Github Profile Summary来生成你的Github简历吧", "desc": "之前看过国外一个开发者tipsy用kotlin开发了一个github profile summary，我觉得他的想法非常棒，所以我想着用Node的技术栈来实现一遍。 我的技术栈是Vue和Koa，所以在实现上我就用了它们分别来做前端和后台。 基本就是vue-cli生成的项目结构+…"}, {"id": "6844903765762392077", "title": "窥探 Vue CLI3 UI 内置插件 - 关闭网络端口", "desc": "傻瓜式的工具可以先用，但最终要掌握原理哦。 这里是kill-port这个插件注册的位置，插件注册实现的很优雅。 pid-from-port 和 fkill 实现了关闭端口的功能。 这里的 this.$apollo.mutate 是 apollo 的更新方法，variables …"}, {"id": "6844904054703783949", "title": "Vue-5个进阶属性（指令等）", "desc": "其实之前我们就已经学习了指令，如：v-if、v-for，类似这些以 v- 开头的就是指令，而v-if、v-for这些属于内置指令，除此之外我们还可以自定义指令。 全局自定义指令：在全局作用域下自定义指令，同时这个指令也能够用于全局，即任何组件都能够使用这个全局指令。如要声明多个…"}, {"id": "6844903593015771143", "title": "从0搭建一个Weex项目", "desc": "然后在根目录下新建index.html文件。 entry文件夹是webpack打包的入口，page文件夹是各个.vue页面。 weex最常见的使用场景就是编写某一个页面而不是整个APP，即开发一个一个的页面，然后把这个页面放到native端呈现。所以我们的weex-starte…"}, {"id": "6854573214094983181", "title": "基于vue-cli3.0脚手架建立新建页面命令的步骤", "desc": "现在vue-cli3.0已经普及，本身脚手架也提供了很多功能，我们也可以在它的基础上搭建个性化的脚手架，以满足更多的需求。但是vue-cli本身不支持新增页面的功能，而每次新增页面都需要手动修改。那么手动新增一个页面需要几个步骤呢？ 因此，每次新增页面，都要修改上面的五个配置，…"}, {"id": "6844904085250932750", "title": "开发一个Vue插件", "desc": "Vue 项目开发过程中，经常用到插件，比如原生插件 vue-router、vuex，还有 element-ui 提供的 notify、message 等等。这些插件让我们的开发变得更简单更高效。那么 Vue 插件是怎么开发的呢？如何自己开发一个 Vue 插件然后打包发布到npm…"}, {"id": "6844903977297903630", "title": "VUI创建日志(二)——防抖节流组件的实现", "desc": "1. 项目实现介绍 2. Throttle 组件的实现 3. 使用组件 4. 存在问题与解决方法 5. 完整代码 本文是对render及抽象组件的使用总结，若有错误，望指出共同进步。"}, {"id": "6971239897948487687", "title": "Vue渲染函数（render）的介绍和应用", "desc": "这是我参与更文挑战的第 3 天，活动详情查看：更文挑战 1. render函数的介绍 简单的说，在vue中我们使用模板HTML语法组建页面的，使用render函数我们可以用js语言来构建DOM。 因为"}, {"id": "6844903970259861512", "title": "vue-cli3.x 配置vux", "desc": "第一步、安装vue-cli3新建一个vue项目项目跑起来的效果：二、安装vux配置vux安装vux的依赖安装vux安装vux-loader(必须安装)安装less安装指定vue-loader，解决按需"}, {"id": "6910476523925405703", "title": "实现一个简单的vue-响应式模拟(一)", "desc": "最近在研究Vue的源码，探索一下Vue的响应式原理。研究它是怎么实现的。Vue2.0是用 Object.defineProperty 去实现的， Vue3.0是用Proxy 去实现的。然后再结合观察者模式去实现数据跟视图的更新。本节先分享一下基础原理，下一节分享一下具体的实现。…"}, {"id": "6884130367658442765", "title": "【真香系列】Vue-Next 源码第三章", "desc": "上文提到 setupComponent 之后，会调用 setupRenderEffect 生成一个渲染的副作用方法。componentEffect 就是更新时会执行的方法，这里会执行组件的生命周期方法等，renderComponentRoot 会执行之前编译出来的 code 以…"}, {"id": "6854573222046728205", "title": "总结一些Vue的性能优化", "desc": "1. 模块化、组件化 组件是把常用的东西封装起来，最重要的就是复用。 模块是把同一功能或业务的代码进行分离，降低模块间的耦合性，可以独立运行和管理。 包括css也可以通过less和sass来减少重复代码。 2. vFor 的 key 在使用v-for渲染元素列表时，为每一项都设…"}, {"id": "6935354560718307365", "title": "手写一下Vue2.0 数据劫持", "desc": "一：搭建webpack简单的搭建一下webpack的配置。新建一个文件夹，然后init一下。之后新建一个webpack.config.js文件，这是webpack的配置文件。安装一下简单的依赖。在同级"}, {"id": "6844903711186255885", "title": "vue 源码学习 - 实例挂载", "desc": "在学习vue源码之前需要先了解源码目录设计(了解各个模块的功能)丶Flow语法。 flow语法可以参照 v-model源码学习中提到的flow语法介绍，以及到官网了解更多。 通过源码我们可以看到，它实际上就是一个构造函数。我们往后看这里有很多 xxxMixin 的函数调用，并把…"}, {"id": "6844904058449297421", "title": "Vue入门之版本区别及安装使用", "desc": "对于刚开始学习Vue的新人来说，第一眼看到下面这张图是不是会有同感，以我的经验来看，版本问题可能是新人学习Vue时遇到的第一大问题，怎么有好几个版本？这两个版本到底有什么区别？我到底该用哪个？别着急，本文会给你答案。 打个比方，完整版是iPhone 11 Pro Max的话，运…"}, {"id": "6844903866387939341", "title": "vue 状态管理（一）", "desc": "父子组件之间往往使用props和 $emit 实现数据共享，任意组件可通过bus（一个vue实例）作为桥梁，实现数据共享。当项目中组件越来越多时，组件之间的数据共享变得复杂，难以维护。使用 Vuex 可集中管理组件之间的数据（状态），使组件之间的数据共享变得简单。 父→（pro…"}, {"id": "6924175276851068942", "title": "关于自己在vue2.0中遇到的一些问题", "desc": "1. 首先获取屏幕的宽度，对生成的图片等比缩放，我这里是将海报图的宽高同时缩放0.6倍以后再等比缩放的，2.16为 海报的height/海报的width 2. clientWidth 为 clientWidth:document.documentElement.clientWi…"}, {"id": "6936084571155464228", "title": "聊聊如何保障前端团队代码质量", "desc": "对于多人参与的中大型前端项目，代码质量与代码风格的重要性不言而喻，对于开发者而言，当你重构或者接手别人工作时，都期望是一目了然的舒爽，而不是令人头晕眼花的\"shi shan\"。对于团队而言，良好的代码质量可以减少产品的缺陷，一致的代码风格能够提升团队开发效率。 那么，如何去保障…"}, {"id": "6976994213556650014", "title": "Vue 开发如何针对搜索引擎做 SEO 优化", "desc": "Vue SEO 众所周知，Vue SPA 单页应用对 SEO 不友好，当然也有相应的解决方案。 1. SSR 服务器渲染 Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vu"}, {"id": "6844903696296329230", "title": "了解虚拟DOM", "desc": "Vue在2.0版本引入了虚拟DOM。其了虚拟DOM算法是基于snabbdom算法所做的修改。参看https://github.com/vuejs/vue/blob/dev/src/core/vdom/patch.js注释部分。要想了解Vue，必须了解虚拟DOM，本篇文章主要介绍…"}, {"id": "6844903545439797256", "title": "Vue & Vuex 入门级研究与发现", "desc": "我从入门前端，第一次亲密接触的就是React，直到最近team重组，新的leader在一次晨会中曰：“希望以后我们组的前端能使用Vue来开发。” 而我们组的前端，貌似就剩我自己了，另外一个还想着回归Java。 这让我这个React起家的小前端工程师，内心一万头XXX...奔腾而…"}, {"id": "6906802070204973063", "title": "总结分享项目中非常实用的几个Vue自定义指令", "desc": "在 Vue2.0 中除了默认内置的指令（v-model 和 v-show）以外，也支持注册自定义指令。虽然代码复用和抽象的主要形式是组件，但是有时候仍然需要对顶层的 dom 元素进行操作，此时自定义指令就派上用场了。 bind：只调用一次，指令第一次绑定到元素时调用。在这里可以…"}, {"id": "6844903503865839629", "title": "基于 Electron 和 Vue 的旅行地图生成工具：iMap", "desc": "iMap 是一个基于 Electron 和 Vue 的旅行地图生成工具。它具备简洁、跨平台、智能提示坐标经纬等特点，帮助你打造专属于你的旅行地图。"}, {"id": "6969216921686245383", "title": "实操一道vue题目（对数据的增删改查）", "desc": "在今年初，我去赴约boss上的公司面试，好家伙，啥也没问，简历也没要，直接把我领到台式机面前，上机直接实操一道vue题目。大神请直接绕开，哈哈哈。 考察点——数据的增删改查。 需求如图： 1. 数据循"}, {"id": "6844903642038796301", "title": "基于Vue的Qabler组件库", "desc": "参考Tabler的项目，使用Vue技术栈来实现。 显示头像的组件：包括默认头像、不同大小的头像、如果没有图片则文字占位的头像、有状态的头像。"}, {"id": "6844903641535643656", "title": "数独动态解题演示小网站 - 基于Vue/pixi.js/Flask", "desc": "网站需要绘制数独题目，pixi.js比较方便。其实用Canvas画布也够了，主要是顺带学习下HTML小游戏的绘图。UI框架，可以任意选择。这里选择了Vuetify，跟Vue.js完美搭档，适合桌面+手机。如果是纯手机端，可以选择Framework7。 Flask适合快速原型开发…"}, {"id": "6901177097062989832", "title": "vuejs| 通过promise实现图片批量上传", "desc": "因为觉得element组件的el-upload有点复杂，所以这里使用原始的input标签。不过通常需要换掉原始样式，只需给input添加一条style=\"display:none\"，接着用具有其他样式的元素包裹它，并在该元素上添加事件（不包裹也行，包裹主要是为了容易看）。 现在…"}, {"id": "6912314024495595527", "title": "理解Vue中的computed和watch", "desc": "前言：Vue模版（template）中的表达式{{}}可以直接放入简单的运算，如 {{ msg.split('').reverse().join('') }}，但如果模版中过多的出现这样的运算语句会使模版变得逻辑复杂且冗余，会对页面的可维护性造成很大的影响。 于是Vue便推出了…"}, {"id": "6864471219518111752", "title": "vue|源码篇|1.0版本数据观测  依赖收集", "desc": "我们更改数据之后，如何触发渲染视图的逻辑 （顺带解释Vue文档中说的两个缺陷及解决：1. 对象属性的增删无法被监听 2.数组索引改值无法被监听） 核心思路：vue 1.0 1. 文档碎片fragment采集 2. complier 遍历vue语法（解析器）；vue2.3 1. …"}, {"id": "6844903857751851021", "title": "vue2之简易的pc端短信验证码的问题", "desc": "昨天在做项目的时候，遇到了一个小小的问题(大神或大佬)可以略过此处，给刚刚入门或者想学习vue的朋友准备的小小的福利。 说明（*****向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。）"}, {"id": "6844903969274200078", "title": "【源码分析】Vue的响应数据", "desc": "先讲这样一个过程。 在$mont()的时候，会创建Watcher实例的过程，把Dep.target设置为当前Watcher，然后会开始render，render的时候就会读取到响应数据，从而触发get，只有被观察的数据才配置了get，get执行过程中会创建一个Dep实例，此时有…"}, {"id": "6844903943424704519", "title": "基于vueCli2发布一个vue组件的npm包", "desc": "接下来做一些改动。src目录改为examples用于本地开发及案例展示，新增一个packages目录用于存放组件源码及导出文件。 由于文件名称做了改动，webpack的打包配置也要做对应修改。默认webpack.config.js会导出一个对象，这里我们改为导出一个函数，然后由…"}, {"id": "6844903614339629069", "title": "干货--手把手撸vue移动UI框架： 滑动加载", "desc": "在我们移动端还有一个很常用的组件，那就是滑动加载更多组件。平常我们看到的很多插件实现相当复杂就觉得这个组件很难，其实不是的！！这个组件其实可以很简单的就实现出来，而且体验也能非常的棒（当然我们没有实现下拉刷新功能）！！下面我们就一起来实现这个组件。Github源码（不麻烦的话帮…"}, {"id": "6844903729645256717", "title": "Vue技巧：无渲染组件", "desc": "Vue技巧：无渲染组件最近，使用Vue开发组件时遇到了这样一个问题：开发的组件所能够自定义的props比较多，导致使用该组件时需要传入太多属性，数据、样式控制什么的属性都在一起了，看起来很不美观，像下"}, {"id": "6948607108283629599", "title": "vue之key篇", "desc": "1. key作用：保证唯一性，防止重复渲染，导致的额外性能开销作为唯一标识节点加速虚拟DOM渲染最常见的用例是结合 v-for：以下是否出现报错信息的场景：例1：相同父级使用index出现报错信息例2"}, {"id": "6913915045093048333", "title": "Composition API", "desc": "reactive是把普通对象转化成响应式对象，而ref是将基本类型数据包装成响应式对象。 computed可以创建一个响应式数据，这个响应式数据依赖于其他响应式数据，就是计算属性。 1. Watch的三个参数："}, {"id": "6844904174665089037", "title": "Vue双向绑定的实现", "desc": "一. MVVM Model和View之间使用ViewMode进行关联，ViewModel负责将Model的数据变化显示在View上，通过将View的改变反馈到Model上。 二. Object.defineProperty() 我们可以看到属性a有两个相对应的get() / s…"}, {"id": "6985839432020525070", "title": "2021.7.17 Vue复习---自定义指令，生命周期，非单文件组件，单文件组件，脚手架", "desc": "自定义指令 我们可以自己创造一个指令：v-xxx的形式，通过directives:'xxx'(element,binding){}来定义指令，其中element指的是我们调用指令时传入的参数，bind"}, {"id": "6844904119203807240", "title": "从Jquery到Vue 一次编程思维的转换", "desc": "已经很多年没有写前端代码了，我的前端水平还停留在Jquery一统天下的年代。最近想趁着假期，恶补一下前端的知识，于是就看了一下最近特别流行的Vue.js。这一看不要紧，发现自己已经落后了整整一个时代。 前端编程思想已经由Jquery 时代的事件驱动编程 模型过渡到了以Vue.j…"}, {"id": "6847009771195744264", "title": "手把手教学系列之：web图片裁剪（一）", "desc": "大家好，我是六六。在学习裁剪功能的过程中，发现有很多文章讲的不是那么清晰易懂，让六六绕了很多弯路，所以今天呢，为了让大家不再绕弯，六六要详详细细的手把手教大家写一个裁剪功能出来。 裁剪功能的核心之中当然是canvas这个技术，如果不懂的可以去mdn上过一遍这个，不用看的太深，了…"}, {"id": "6916299149008699406", "title": "手摸手之vue单选组件", "desc": "本次是一个单选组件，现在基本上可以说是个ui框架都有单选组件。换句话说，你连一个单选组件都没有好意思说自己是个ui框架（开玩笑） 在vue的文档中有一章叫做 表单输入绑定 其中有一章是介绍单选按钮的。"}, {"id": "6844903975725383694", "title": "基于Nuxt.js项目的服务端性能优化与错误检测，容错处理", "desc": "它具有可能依赖于全局状态的子组件。 它具有对渲染上下文产生副作用(side effect)的子组件。"}, {"id": "6924658051953721351", "title": "vue原理学习系列(四)：状态管理", "desc": "需要记住的“事物/信息”称为“状态”。 状态是程序用来完成某些任务的信息，它在是程序的整个运行过程中被更改或操纵的数据或信息。程序在给定时间的“状态”是指程序当前正在查看或分析以执行下一步的数据。 Vue、React、Angular最大的优势之一是状态已经透明连接到视图中，但这…"}, {"id": "6844903721051095048", "title": "10分钟快速精通rollup.js——前置学习之基础知识篇", "desc": "本文是《10分钟快速精通rollup.js——Vue.js源码打包过程深度分析》的前置学习教程，讲解的知识点以理解Vue.js打包源码为目标，不会做过多地展开。教程将保持rollup.js系列教程的一贯风格，大部分知识点都将提供可运行的代码案例和实际运行的结果，让大家通过教程就…"}, {"id": "6844903586845966350", "title": "如何写一个Vue的插件", "desc": "插件通常会为 Vue 添加全局功能。插件的范围没有限制——一般有下面几种： 添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。 ..."}, {"id": "6844903732736442376", "title": "采用 vue+webpack 构建的单页应用——私人博客 MintloG 诞生记", "desc": "MintloG是我在五天之内完全由自己开发的私人博客，前端技术方案采用了vue+vue-router+vue-resource+webpack的构建方案，后端技术采用了原生PHP+MySQL。博客完全由ajax实现和后台的通信，后台只提供了一个接口，通过传入不同的参数实现不同的…"}, {"id": "6844903506994823175", "title": "用vue优雅地编写UI组件的几条指导原则", "desc": "最近在尝试写几个UI组件，并通过阅读element-ui的源码，与其反复比较，然后认真思考，最后总结出一些自己的一些心得和体会。在造轮子的过程中，既巩固了html,css,js基础，又加深了对vue源码的理解，更重要的是给了我一个温习和实践所学过的设计模式和思想的机会，来编写更…"}, {"id": "6844903555342532622", "title": "Laravel框架中缩小Vue应用的体积", "desc": "这两天写一个很小的Laravel+Vue的前后端分离应用，前端的代码文件并不多，但webpack打包生成的app.js居然有3M，生成的production版也有1.4M，放到自己的服务器上，那速度完全无法忍受。于是探究起如何缩小应用体积。 这里使用webpack-bundle…"}, {"id": "6980362557651419149", "title": "03.VUE：自定义指令（directives ）选项的用法", "desc": "自定义指令分为全局指令和局部指令。全局指令可在任意vue组件内生效，局部指令仅在注册了指令的组件内生效。 全局指令和局部指令写法几乎相同。全局指令是在main.js内使用Vue.directive注册"}, {"id": "6844903527987298312", "title": "reactivity 诞生记", "desc": "看完 vue3 的 reactivity 模块后，脑子里面有无数的念头冒出来。 \b那我们就需要考虑一下了。 有没有可能，当我们改变了 data.name 的时候，让所以依赖它的视图或者函数都自动执行呢？就像我们手动调用 update 那样。 好，其实思考到这里就有了响应式编程的…"}, {"id": "6844903842790932488", "title": "Vue2.0源码阅读笔记（四）：nextTick", "desc": "在阅读 nextTick 的源码之前，要先弄明白 JS 执行环境运行机制，介绍 JS 执行环境的事件循环机制的文章很多，大部分都阐述的比较笼统，甚至有些文章说的是错误的，以下为个人理解，如有错误，欢迎指正。 GUI 渲染线程解析 html 生成 DOM 树，解析 css 生成 …"}, {"id": "6915698506774609928", "title": "vue自定义指令--clickoutside", "desc": "需求  某天，产品觉得老是点击x关闭窗口，觉得体验不爽。于是给了一个需求，需要点击A窗口之外时，自动进行关闭A窗口。还要求点击某些B窗口时，不能关闭A。项目总这种东西用的频率也很频繁，就干脆摸着石头过"}, {"id": "6844903941713444878", "title": "Vue 前端uni-app多环境配置部署服务器的问题", "desc": "Vue 经过这一年的进化，模版也是相当丰富了，但在使用多界面时，个人感觉还是有点弊端，CSS的样式问题。 多环境部署会引发很多问题，当然，是开发环境下了，这次博主我也引发了这个小问题，从而看到很多人对部署的环境会有疑问，毕竟Vue没有暴漏出像JAVA那样的可配置环境。 Vue …"}, {"id": "6855928401962729486", "title": "Element组件源码研究-Checkbox多选框", "desc": "本文的研究思路是通过阅读Element源码，然后自动动手一步一步编写组件，完善其对应功能。 相信量变引起质变，我们继续来研究Element的组件。 还是老套路，先实现最简单的组件封装，再不断给其添加功能。 区别于原生checkbox只有一个方形选择框，element的check…"}, {"id": "6981364920507957285", "title": "Vue antdv 报错 .bezierEasingMixin()", "desc": "解决办法：创建 vue.config.js，加入下面配置！解决办法：创建 vue.config.js，加入下面配置！"}, {"id": "6844903688612347917", "title": "Vue 中的无渲染组件", "desc": "此篇文章内容来源于@Adam Wathan的《Renderless Components in Vue.js》一文。 无渲染组件探索了一种模式来分离组件的表现和行为，无渲染组件只处理状态和行为，它们不会对设计或布局强加任何的决策。它从更高的层面去抽象组件，实现组件的复用。"}, {"id": "6844903641724223501", "title": "创建、发布自己的 Vue UI 组件库", "desc": "在使用 Vue 进行日常开发时, 我们经常会用到一些开源的 UI 库, 如: Element-UI, Vuetify 等. 本文笔者将介绍如何一步步, 创建并发布自己的 Vue UI 组件库. 接下来让我们写一个简单的 Vue component. 这里我写了一个简单的顶栏控件…"}, {"id": "6978751858403704839", "title": "vue项目总结", "desc": "一、项目开发流程 1.创建项目 一是通过CLI命令行创建，二是通过图形化界面创建项目，我个人觉得通过图形化界面创建项目相对简单方便些。 2.下载依赖 vue-router：路由是必须要有的，有时需要手"}, {"id": "6915312152257495054", "title": "vue中实现自定义拖拽店铺布局和配置功能", "desc": "当在展示区域选中组件时，默认会在组件上包含一个虚影边框，告诉用户选中了哪一个。"}, {"id": "6931255350565961736", "title": "Vue3源码解读之runtime（上）", "desc": "在该函数内部中通过调用ensureRenderer()和createApp(...args)创建了app实例并把实例返回出去，因此我们可以在app实例中安装插件，设置全局指令等等。这其中又是怎么实现的呢？ 我们可以看到调用该函数后返回一个renderer，若没有renderer…"}, {"id": "6844904095124291597", "title": "深入浅出Vue变化侦测", "desc": "我们都知道vue是个很优秀的框架，官网上也说明了是一个渐进式框架。那么什么是渐进式框架呢？ 所谓渐进式，就是把框架分层。如图所示： 最核心的部分就是视图层渲染，然后往外就是组件机制，在这个基础上再加入路由机制，状态管理，构建工具。 所谓分层，就是既可以只用最核心的视图渲染功能快…"}, {"id": "6899230521126027277", "title": "一台电脑存在多个版本的Vuecli，方便快速初始化不同版本的Vue项目", "desc": "比较熟悉Vue的同学应该知道（偶是Vue的骨灰粉~），Vuecli2与Vuecli3是有区别的。不仅初始化项目的命令不同了，连Label，Webpack这工具进行了大版本的升级依赖，Webpack更是用了内嵌的方式依赖了，其中Webpack从三升级到了四版本是我觉得挺大的一个变…"}, {"id": "6992431113838788622", "title": "面试遇到的题目--vue", "desc": "vue也算是一个比较常见的前端框架了，在不少公司中都有进行使用，而且我从接触vue到上手写vue的项目也有两三年的时间了，正好这两天也在面试，就把面试过程中遇到的问题就整理了一下。 面试前呢，我是在开"}, {"id": "6992418612002684935", "title": "Vue3组件化开发知识总结", "desc": "vue3组件化开发知识总结, 包含组件注册, 父子组件通信, 非父子组件通信, 插槽, 组件访问, 动态组件,异步组件, 缓存组件, 组件声明周期, 组件v-model的使用和原理"}, {"id": "6844903599412084744", "title": "Electron-vue开发实战4——通过CI发布以及更新的方式", "desc": "前段时间，我用electron-vue开发了一款跨平台（目前支持Mac和Windows）的免费开源的图床上传应用——PicGo，在开发过程中踩了不少的坑，不仅来自应用的业务逻辑本身，也来自electron本身。在开发这个应用过程中，我学了不少的东西。因为我也是从0开始学习ele…"}, {"id": "6948023506915622919", "title": "全面解析Vue.nextTick实现原理", "desc": "转自https://juejin.cn/post/6844903590293684231编者按：本文由大豹杂说公众号吕大豹授权奇舞周刊转载。来一起学习吧！vue中有一个较为特殊的API，nextTic"}, {"id": "6992224880917741582", "title": "【Vue2.x 源码学习】第三十篇 - diff算法-比对优化（上）", "desc": "【Vue2.x 源码学习】第二十九篇 - diff算法-比对优化（上）: 介绍了如何进行儿子节点比对；新老儿子节点可能存在的3种情况及代码实现；新老节点都有儿子时的 diff 方案介绍与处理逻辑分析；"}, {"id": "6992220774874497054", "title": "Vue源码学习笔记-mustache模板引擎(三)-创建扫描类对模板字符串扫描", "desc": "准备工作 1.Webpack安装，配置 2.创建UMD模块（兼容AMD和commonJS规范的同时，还兼容全局引用的方式） 3.创建scanner Webpack 安装 创建UMD模块 创建扫描类对模"}, {"id": "6965776439073308708", "title": "Vue.js响应式原理介绍", "desc": "数据驱动 数据响应式 数据模型仅仅是普通的JavaScript对象，而当我们修改数据时，视图会进行更新，避免了繁琐的DOM操作，提高开发效率 双向绑定 数据改变，视图改变；视图改变，数据也随之改变 我"}, {"id": "6882232177870929934", "title": "动态生成的表单如何用 el-form 校验，你知道吗？", "desc": "Vue 的 el-form 提供了表单校验功能，常规用法是用 :rules 属性设置校验规则，并通过 el-form-item 的 prop 属性绑定校验规则。但是有一种情况，如果表单位于 v-for 标签中，是动态生成的，该怎么使用 el-form-item 来校验呢？ 本文…"}, {"id": "6869204485622169614", "title": "教你如何基于Element-UI通过配置来生成表单", "desc": "作为一名sass系统开发的前端工程师，少不了要和表单打交道，我们选择的UI库是Element-UI,但是使用久了就感觉是在复制粘贴，而且特别长，为了解决这种重复枯燥的问题。所以通过配置组件来了。 就是根据配置规则，通过vue里面的render函数，把对应的规则渲染出来。好了，直…"}, {"id": "6844903807701221383", "title": "【Vue 实践】页面生成 pdf 文件-01", "desc": "为了找工作，花了七八天完成了自己的线上简历，结果发现并没有人来看这东西。 说实话，这个是自己的第一个前后端项目，自我感觉还好，结果根本没人在意，一定是我做得太差，那就得好好改这个项目，增加功能。 在开始动工之前，需要考虑自己做什么了，没有接触大公司的规范的开发流程，那也得自己编…"}, {"id": "6844903511004545032", "title": "用vue做一个酷炫的menu", "desc": "写在前面    最近看到一个非常酷炫的menu插件，一直想把它鼓捣成vue形式，谁让我是vue的死灰粉呢，如果这都不算爱😔。😆开个小玩耍，我们一起来探索黑魔法吧。观看本教程的读者需要具备一定的vue和"}, {"id": "6912315298414592008", "title": "Ant Design of Vue input 添加 特殊字符", "desc": "有个需求是在input里显示特殊的字符,使用 unicode均被原封不动输出;这里以人民币符号为例:页面显示效果:这不是想要的结果,难道是编译的时候转码了,渲染到页面上被原封不动的输出了;这时灵机一动"}, {"id": "6844903625240608775", "title": "Redux、rematch、dva的替代品：smox", "desc": "halo，大家好，我是132，第一次发文章hhh背景我们平时在开发React项目中，深深的感受到了Redux的“长得丑，用得烦”，有的人去改造它，如dva、rematch，对Redux包装语法糖，也有"}, {"id": "6844903559071268872", "title": "vue——一个页面实现音乐播放器", "desc": "做音乐播放器，界面一定要炫酷。太low了听歌没感觉。本身是为了在上班的时候用，于是做成了一个类似网易云音乐的界面，大小合适。不用兼容手机端。 本怀着简单实用的需求去考虑，图标可用SVG、url或者css。相对于url，SVG和css更好一些。为了修炼，最终选择的css。利用好a…"}, {"id": "6924980060634284045", "title": "vue技术栈上手react hook", "desc": "1. 简介 2. 基本语法 2.1. useState 点击按钮时，使用setCount对count进行自增，视图中的count同时会更新。 2.2. useEffect useEffect支持传入两个参数，其中第一个是需要执行的回调函数，第二个是非必传参数，类型是数组。 回调…"}, {"id": "6844903814575685645", "title": "Vue中使用create-keyframe-animation、动画钩子完成复杂动画", "desc": "对于第二种【动画】,我们就要用keyframe来完成了。 结构很简单，基本就是两个大div，然后把div的布局按效果图那些布置。 这个插件是用js写css的keyframe动画用的，至于为什么keyframe不在css里面写呢？那是因为屏幕大小不一样，会导致需要移动的px不一样…"}, {"id": "6989432996210147358", "title": "vue element popover input focus() 不生效 解决办法", "desc": "popover中有input 但是在点击触发popover时，input未获取到焦点 需要手动点击才能输入，效果如图 影响用户体验， 需要改进一下 首先想到的方法是 给el-input 添加ref，获"}, {"id": "6989422003920994341", "title": "Vue基础篇(二)", "desc": "vue组件之间的传值 父组件向子组件传值 子组件向父组件传值 兄弟组件之间相互传值或者是两个没有关系的组件之间的传值 一、Vue父子 组件之间传值 vue使用中，经常会用到组件，好处是： 1、如果有一"}, {"id": "6979504082603999268", "title": "浅谈Vue3的响应式原理与watch的实现（1）", "desc": "前言 vue3从发布beta到现在已经有一段时间了，本次大版本的改动有不少地方，不管是使用了TypeScript开发或者是编译方面和composition api方面的优化来说，改动都是挺多的。"}, {"id": "6976203863346905124", "title": "vue事件修饰符", "desc": "在vue组件中经常会用到事件修饰符，今天用到修饰符发现又有些忘了，记录总结一下vue中的事件修饰符。 事件修饰符 .self .stop .capture .prevent .once .passiv"}, {"id": "6906022040994578440", "title": "使用 Vue 和 Gridsome 构建静态站点", "desc": "静态网站生成器所做的事情也就是传统开发中所谓的「静态化渲染」，经常出现在一些 CMS 系统中。 它是预渲染的，但是和服务端渲染有所不同。具体差异可以看这篇文章，静态化与服务端渲染。 静态网站不需要服务端支持，只需要将静态生成的文件放到任意的文件托管服务器或者 CND 上即可。比…"}, {"id": "6844904190406295565", "title": "从源码解惑，为什么写列表v-for必须设置key", "desc": "在列表中使用key已经是老生常谈的问题了，官方 最佳实践 也大力推荐使用key。。。不对，官方原话是： 既然官方都说的这么中肯了，那么肯定是很重要了。但是，当初不明真相的我，总是觉得写和不写也没啥区别啊，反正都能渲染出来。写着好麻烦啊～🥱，算了，下次，下次一定写。。。 其实之…"}, {"id": "6956467785585147912", "title": "Vue生命周期概览  ｜小册免费学", "desc": "在Vue 2.x 单一组件中，钩子的执行顺序是beforeCreate-> created -> mounted->... ->destroyed，但当父子组件嵌套时，父组件和子组件生命周期如何执行呢"}, {"id": "6979134575498756126", "title": "Vue 全解：起手式", "desc": "快速创建一个 Vue 项目 安装 @vue/cli Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统 更多信息请移步 Vue 官网文档 链接 使用 @vue/cli 创建一个新的项目目"}, {"id": "6844903965742612488", "title": "web项目部署上线前后端及nginx跟服务器相关配置(Vue-cli3.0 + Laravel + nginx)", "desc": "user为云服务器用户名，默认是root，@符号后面接云服务器的公网IP地址。注意是公网IP，不要弄成内网IP,接着输入密码就可以了 本地测试一切都没问题了，就开始打包, 并提交代码。或者不打包直接提交，但是要在服务器打包，两者都可以，根据自己的爱好来就好了 将http:// …"}, {"id": "6932282452505264142", "title": "使用RecordRTC对video视频进行录制", "desc": "在实现对监控画面进行抓拍以及录像功能时。由后端使用ffmpeg对直播流进行截取，但是由于直播流有一定的缓冲，前端看到的画面对于服务器来说已经是过时的画面，这就导致截取的画面不是自己想要的画面。为了解决这个问题，现考虑从前端页面进行画面的截取。 使用canvas容易实现对vide…"}, {"id": "6969967122176802824", "title": "【Vue2.x源码学习】第二篇 - Vue 的初始化流程", "desc": "【Vue2.x 源码学习笔记】第二篇 - Vue 的初始化流程； 本篇主要介绍了 Vue 数据的初始化流程，核心的几个点： initMixin、vm.$options、initState"}, {"id": "6844903649974435854", "title": "在 CSS 动画中使用硬件加速(翻译)", "desc": "近些年，我们总是听到硬件加速，以及它如何帮助我们提升网页的动画性能，让网页动画变得更好，在移动端更流畅。但是我想一大部分经验少的工程师是不知道硬件加速是如何工作的以及我们如何使用它来帮助我们让动画变得更流畅。 硬件加速听起来非常复杂，像高等数学。在这篇文章中，我会简明的讲解如何…"}, {"id": "6844903513546293262", "title": "基于 Vue2.0 + Element 的单页面可视化开发实践", "desc": "项目迭代，要重构出一个可供用户操作的，可自由选择模板，可定制内容的页面。相当于这个单页面上最终展示的所有内容，都是由用户自己去定制完成的。 细想之后觉得使用 Vue 来做比较合适，因为页面上大部分操作都可理解为是对总体数据的再排序编辑。下边是记录的开发过程中一些相对关键的问题。…"}, {"id": "6979414614299639816", "title": "vue实现上传图片并预览效果 html+css+js", "desc": "这是我参与更文挑战的第27天 一.话不多，先看效果：   大家好，(๑╹◡╹)ﾉ” 这是我在逛b站时看到一个上传图片的效果，想着可以自己也做一个，因为原作者是用原生js写的，那我不如就用vue写好了，"}, {"id": "6844903998189731853", "title": "Element的markdown-loader源码解析", "desc": "最近打算重写自己组件库的官网，在写展示组件部分的时候遇到了一个问题,所有组件的功能展示都在一个.vue文件里面写的话，会很麻烦。如果只用简单的md就可以转成需要的页面并且有代码高亮、demo展示框和页面样式，那该多好。 一个这样的demo-block就包含三样东西，标题、示例组…"}, {"id": "6874007172578033677", "title": "34条我能告诉你的Vue之实操篇", "desc": "这是我学习整理的关于 Vue.js 系列文章的第一篇，另外还有两篇分别是关于优化和原理的。希望读完这3篇文章，你能对 Vue 有个更深入的认识。 组件通信是 Vue 的核心知识，掌握这几个知识点，面试开发一点问题都没有。 用于实现父子组件间通信。通过 props 可以把父组件的…"}, {"id": "6844903621805473800", "title": "使用ESLint+Prettier来统一前端代码风格", "desc": "想起自己刚入行的时候，从svn上把代码checkout下来，看到同事写的代码，大括号居然换行了。心中暗骂，这个人是不是个**，大括号为什么要换行？年轻气盛的我，居然满腔怒火，将空行一一删掉。 但是关于代码风格，我们很难区分谁对谁错，不同的人有不同偏好，唯有强制要求才能规避争论。…"}, {"id": "7001851258101301255", "title": "Vben Admin 深入理解之插件、环境变量的设计", "desc": "新加了一个规则是以 `VITE_GLOB_` 开头的的变量，在打包的时候会。那么怎么处理的环境变量做了什么转换、做了什么扩展？那么 `_app.config.js` 是怎么生成的、内容怎么写入的？"}, {"id": "6992770501940609055", "title": "「站在上帝的角度」谈谈Element组件结构-Switch", "desc": "用户就是上帝，站在上帝的角度也就是站在使用者的角度去看待组件。 用过不少优秀的UI库，用的时候美滋滋，轮到自己搭组件库的时候往往会去"}, {"id": "6844903999129436174", "title": "1小时搞定vuepress快速制作vue文档/博客+免费部署预览", "desc": "先来一下演示效果。和vue的官方文档几乎是一致的，页面内容都可自定义。 此教程部署后的效果预览。 快速搭建一个文档/博客，后期只需要修改markdown内容和导航参数，即可一键打包生成页面。 页面具有非常好的加载性能和搜索引擎优化（SEO），其他的页面则会只在用户浏览到的时候才…"}, {"id": "6986926737552572447", "title": "elementUI中的el-date-picker日期月份时间选择器禁用选中当前和以后的日期", "desc": "问题描述 时间选择器选择日期、月份在项目中比较常见，比如查询历史记录，我们需要选择具体日期或者发请求，获取历史数据。所以我们需要对时间选择器做一些控制，比如历史记录查询的话，就不能选择当前日期和以后的"}, {"id": "6999876444885106725", "title": "vue3.0组合式API-useTable", "desc": "更多文章 前言 继续组合式API，今天分享的是useTable，其实之前已经分享过useTable了，但是之前的没有业务验证，经过一段时间的业务实践，这里分享一版比之前更加完整的 介绍 useTabl"}, {"id": "7002506660069523463", "title": "Vue项目预览PDF的简单解决方案", "desc": "需求及引言 最近在项目中，因为有一处需求，需要预览图片/PDF文件，Vue项目，索性采用了element-ui的dialog组件来展示文件。 图片预览很简单，直接在dialog组件放置一张图片，加入u"}, {"id": "6997647722010378247", "title": "[ 浅谈前端 ] Vue - axios实现ajax请求", "desc": "这是我参与8月更文挑战的第18天，活动详情查看： 8月更文挑战 vue通过axios实现数据请求 vue.js默认没有提供ajax功能的。 所以使用vue的时候，一般都会使用axios的插件来实现aj"}, {"id": "6986186787425255454", "title": "4x2 精读Vue官方文档 -  TypeScript 支持", "desc": "精读 Vue 官方文档系列 🎉 发布为 NPM 包的官方声明文件 Vue 已经为 Vue-core、Vuex、Vue-Router 提供了 NPM 包形式的类型声明文件，最新版本的 TypeScrip"}, {"id": "6982943321970704398", "title": "用纯css制作的3D模型，开发一个打飞机小游戏", "desc": "一般公司都注重JavaScript的功底，css熟悉掌握常用的就可以，但css远不止这些，css可以做很多事情，有些场景直接代替JavaScript，比如纯css可以制作轮播、选项卡、甚至用纯css制"}, {"id": "7006206318532902925", "title": "Vue模板语法、指令、修饰符", "desc": "模板template三种写法 1. Vue完整版，写在HTML里 2. Vue完整版，写在new vue template 里面 3. Vue非完整版，配合xxx.vue文件 注意：此时templat"}, {"id": "6977869719546101796", "title": "vue3的传送门teleport究竟有多神奇？suspense发起异步请求有多简约？", "desc": "一文讲解vue3的Teleport和Suspense 大家都知道，在我们平常的前端开发中，实现模态框和发起异步请求是再常见不过的事情了。但"}, {"id": "6931901497953222670", "title": "实现图文消息的正确加载", "desc": "昨天，在我的开源项目chat-system中查看聊天记录时，发现消息中如果有图片滚动条的位置就会算错，导致最后一条消息定位不准确。 经过一番排查后，终于解决了这个问题，本文就跟大家分享下我的解决方案与思路，欢迎各位感兴趣的开发者阅读本文。 如下图所示，我们点开一个聊天窗口，最后…"}, {"id": "6913382963593871374", "title": "vite1.0都还没学呢 就出2.0了？", "desc": "jsx 和 enableEsbuild 已被删除；请改用新的 esbuild 选项。 现在，与CSS相关的选项嵌套在 css 里面。 现在，所有特定于构建的选项都嵌套在 build 里。 rollupInputOptions和rollupOutputOptions被替换为bui…"}, {"id": "6999421512788738055", "title": "【VUE】过渡效果transition原理分析", "desc": "过渡效果transition原理：进入过渡的开始状态；进入过渡生效时的状态；进入过渡的结束状态。离开过渡的开始状态，离开过渡生效时的状态，离开过渡的结束状态。"}, {"id": "6850037258863673357", "title": "一个多文件断点续传、分片上传、秒传、重试机制的组件", "desc": "文件上传相信很多朋友都有遇到过，那或许你也遇到过当上传大文件时，上传时间较长，且经常失败的困扰，并且失败后，又得重新上传很是烦人。那我们先了解下失败的原因吧！ 请求超时：当你设置了接口的超时时间为10s，那么上传大文件时，一个接口响应时间超过10s，那么便会被Faild掉。 网…"}, {"id": "7003362506383032334", "title": "大白话解释addRoute刷新页面出现空白", "desc": "前言 最近公司的一个后台管理系统技术太老，太难维护了，于是跟组长提出重构的想法，组长决定把大旗交给我，刚好尤大大发布vue3，不容置疑，技术选型vue3和element-plus这对好闺蜜，在后端接口"}, {"id": "7001705185659617316", "title": "vue入门-第四章", "desc": "与jQuery手动操作dom的方式不同，vue采用指令进行双向数据绑定的方式，数据更新则dom更新。"}, {"id": "7001512792083677191", "title": "vue的内置指令", "desc": "指令是Vue.js 中一个重要的特性，主要提供了一种机制将数据的变化映射为DOM 行为。 那什么叫数据的变化映射为DOM 行为？前文中阐述"}, {"id": "6844903897853591566", "title": "💡我们的表单解决方案 el-form-renderer", "desc": "可以通过 hidden 控制某一表单项的显示或隐藏。 可以通过 on 来监听 blur , focus 等事件来实现表单联动。 拿 日期范围选择器 为例，组件输出的值是一条字符串，但后端接口格式是两个字段 {startDate, endDate}，则此时需要对数据进行格式化处理…"}, {"id": "6844903639442522119", "title": "vue + typescript 进阶篇", "desc": "本文是继 Vue + TypeScript 新项目起手式 之后的进阶+踩坑配置，所以推荐先行阅读前文 完整阅读完之后，基本可以顺利在新项目中使用vue + typescript 了 另外特别注意！！！ 不推荐在已有项目上强加 typescript， 因ts写法的组件跟之前的…"}, {"id": "6844903856258678797", "title": "【第一期】基于 @vue/cli3 与 koa 创建 ssr 工程 ----【SSR第一篇】", "desc": "基于同构代码的 SSR 指的是同一份代码（spa代码），既能在客户端运行，并渲染出页面，也可以在服务器端渲染为 html 字符串，并响应给客户端。 它与传统的服务器直出不同，传统的服务器直出指的是路由系统只存在于服务器端，在服务器端，任何一个页面都需要服务器响应内容。 根据上图…"}, {"id": "6844903516931112974", "title": "一个行为标准Popup组件(vue), 强大的过度动画支持, 和定位支持", "desc": "前言之前看过很多的组件库,但是它们的Popup行为和原生的界面差别不大,但是行为上面却各种小细节不足,所以有了这个强调行为标准的popup组件特点支持返回键,可以按浏览器返回按钮关闭popup可以写出"}, {"id": "6905961701514936334", "title": "自定义QQ和微信分享卡片", "desc": "自定义分享卡片有两种方式：通过\bJS-SDK实现和通过修改meta标签实现。 实践证明，使用JS-SDK的方式适用且仅适用于自定义微信分享卡片，修改meta标签的方式适用且仅适用于自定义qq分享卡片。 特此美文，献给想两全其美的你。 1. 引入weixin-js-sdk 这里是…"}, {"id": "6844904132441030663", "title": "Vue + TypeScript 项目放弃 TSLint，拥抱 ESLint", "desc": "然后在 .eslintrc.js 文件中引入 prettier 配置，在 extends 数组中添加 prettier/@typescript-eslint 和 plugin:prettier/recommended，到这里 ESLint 和 prettier 相关配置已经完成…"}, {"id": "6844903618949169166", "title": "vue中vuex,echarts,地图,ueditor的使用(一篇就够)", "desc": "前言1.动态效果图2.技术栈技术栈:vue+vue-router+webpack+axios+echarts+ueditor+elementUI+map+node-sass;功能模块:数据可视化,地图"}, {"id": "6941012046167146533", "title": "每天学习一个vue插件(19)——vue-treeselect", "desc": "前言1 介绍常用属性 propsoptionsvaluedefault-expand-levelnormalizermultiplemultipleflat常用插槽 slotoption-label常"}, {"id": "6907963222611984397", "title": "深入理解Vue 3.0 Reactive", "desc": "因为Vue 3.0刚推出，本身打算只是简单了解下，但了解Vue 3.0的新特性后，如monorepo代码管理，源码偏向函数性编程，还有Composition Api设计，拍手叫绝，决定认真学习下，刚好前段时间拉勾教育搞特惠，用便宜的价钱买了Vue 3.0源码解析，结合最近在拉勾…"}, {"id": "6910105766422970381", "title": "vue项目中引入iconfont在线链接", "desc": "该插件可以通过npm安装。"}, {"id": "6933395391152914440", "title": "vue以_、$开头的属性的变量名", "desc": "实例创建之后，可以通过vm.$data访问原始数据对象。Vue实例也代理了data对象上所有的属性，因此访问vm.a等价于访问vm.$data.a。以 _或$开头的属性不会被Vue实例代理，因为它们可"}, {"id": "6977708792599445535", "title": "按需引入ant-design-vue的坑", "desc": "按需引入ant-design-vue 所使用的技术是vue3 框架ant-design-vue https://2x.antdv.com/docs/vue/introduce-cn 安装的组件库 官网"}, {"id": "6897953507790290957", "title": "小菜鸡的成长之路（gridsome、strapi开发博客应用）", "desc": "学习重点gridsome的使用strapi的使用graph服务端部署mysql数据库同服务器下部署strapi后台应用vercel部署gridsome网站资源vercel和strapi共同创建depl"}, {"id": "6844903934138531848", "title": "prerender-spa-plugin实战", "desc": "因为该插件是渲染单一页面，所以需要自己指定渲染路由，无路由可指定routes为['/']。"}, {"id": "6844904064170344456", "title": "基于vue的tab-list类目切换商品列表组件", "desc": "每次写类似场景的时候，都需要去为类目商品列表写很多逻辑，为了提高开发效率我决定将这一部分抽离成组件。 其实对于手机列表的上拉翻页操作，还有很多的点要去注意，比如如何去避免连续请求等，由于我将这些交给了另一个专注列表渲染的组件，这里就不需要再去考虑这些操作。 作为一个组件，不同点…"}, {"id": "6844903556919607303", "title": "Vue.js学习系列七——Vue服务器渲染Nuxt学习", "desc": "我又回来啦~这次我们来学习Vue的服务器渲染SSR。 关于SSR的文章网上很多，一开始看得我云里雾里。然后去Vue.js 服务器渲染指南和nuxt官网看了看，发现文章大多都是搬运官网的内容，真正讲的清晰明了的很少。所以想写篇文章学习下SSR，希望能够帮助大家快速理解Vue SS…"}, {"id": "6844904168545583112", "title": "基于 Vue CSR 的微前端实现方案", "desc": "在这里就不讲微前端的各种优缺点，直接假设你在负责一个中后台管理系统的开发，所有的业务模块全部都在一个项目中打包，随着业务量的不断增长，编译越来越慢，你期望可以从老的项目中将新的业务进行独立开发、独立部署，以微应用的形式嵌入到老项目中。 如果你是根据官方文档来走的话，你只需要自己…"}, {"id": "6844903895475421198", "title": "vue源码分析前置知识必备", "desc": "最近利用空闲时间又翻看了一遍Vue的源码，只不过这次不同的是看了Flow版本的源码。说来惭愧，最早看的第一遍时对Flow不了解，因此阅读的是打包之后的vue文件，大家可以想象这过程的痛苦，没有类型的支持，看代码时摸索了很长时间，所以我们这次对Vue源码的剖析是Flow版本的源码…"}, {"id": "6986915265363574798", "title": "vue 几个可复用方法", "desc": "vue过滤器 插件 自定义指令 ,自定义过滤器，开发插件、开发自定义指令时，会用到一些vue的高级用法"}, {"id": "6844903888441573384", "title": "vue2.x使用beforeRouteEnter路由钩子进行鉴权", "desc": "第一次在掘金发文章，不对的地方还请大家多多指点。后台管理系统，其中比较重要的一点就是权限控制。最近一年一直在使用vue全家桶进行后台管理系统的开发，说说我的一点心得。 后台管理系统主要分为一个登录页和主页面，主页面里面的路由是需要进行鉴权的，而权限数据一般都是登录接口返回的。下…"}, {"id": "6909338855808172039", "title": "会用就行？快来康康怎么手撸一个vue-router！", "desc": "和官方的使用方式一样，通过Vue.use来注册插件。"}, {"id": "6921304033873362952", "title": "一个简单的四子棋项目", "desc": "周末无聊刷leetcode刷到个四子棋的算法，就做了这个小小的demo。 elementui的组件，魔改都没魔改TnT. 1.首先是画一个棋盘. for in创建格子key绑定cid,xid、yid用来实现后面的一些显示逻辑，判断逻辑。 这样一个简单的四子棋demo就完成了，请…"}, {"id": "6844903664348299271", "title": "Vue 2.x折腾记 - (12) Nuxt.js写一个校验访问浏览器设备类型及环境的中间件", "desc": "有不对之处亦或者更好的实现请留言,会及时修正,谢谢阅读。"}, {"id": "6972085454921269262", "title": "Vue3.0高阶组件之Transition", "desc": "对于Vue 3.0 Transition高阶组件仰慕已久，一直很想知道是Transition组件是如何工作的，下面一步一步解析它是如何添加和删除我们常用的动画class。"}, {"id": "6901831670404481038", "title": "vue-cli4.x构建项目", "desc": "vue-cli是基于webpack 构建vue自动化开发环境的脚手架。 对，如果我们写的项目是一栋大厦的话，那么vuecli就是,勤劳的农民工兄弟，帮我们在写项目前,把项目的基础结构搭建起来。好啦，接下来我们看看脚手架如何使用吧。 css 的预处理器我选择的是 Sass/SCS…"}, {"id": "6875972140160532493", "title": "Vue-ast|实现篇第二版|实现ast/vnode及页面渲染", "desc": "前言文分【思路篇】和【实现篇】，本文为实现篇第二版，文末有第一版链接，建议看两个窗口同步阅读，或请先阅读-》Vue|思路篇|实现ast实现template生成render函数目标定义正则通过html字"}, {"id": "6844903991491428366", "title": "Vue自定义指令结合阿里云OSS优化图片", "desc": "根据显示设备pixelRatio和元素宽高来显示合适图片略微压缩图片质量使用webp注册全局自定义指令获取元素宽高和显示设备pixelRatio判断webp质量降低至80%完整版"}, {"id": "6984584334233567240", "title": "nuxt 使用中国地区数据", "desc": "nuxt 使用中国地区数据 1、安装依赖 2、创建 area.js 3、组件使用，（来源element-ui）"}, {"id": "6844903605057617934", "title": "这一次 彻底搞懂Vue针对数组和双向绑定(MVVM)的处理方式", "desc": "Vue内部实现了一组观察数组的变异方法，例如：push()，pop()，shift()等。 Object.definePropert只能把对象属性改为getter/setter，而对于数组的方法就无能为力了，其内部巧妙的使用了数组的属性来实现了数据的双向绑定，下面我们来一步一步…"}, {"id": "6980147241650487303", "title": "「免费开源」基于Vue和Quasar的前端SPA项目crudapi后台管理系统实战之联合索引（十一）", "desc": "本文主要介绍了联合索引功能，在创建和编辑表单元数据时候都可以设置联合索引，索引可以用来优化查询速度，也可以用来唯一性验证，避免数据库中插入重复数据。"}, {"id": "6924496352789397518", "title": "Vue（一）：Vue的生命周期以及场景应用", "desc": "Vue的生命周期可以说是最基本的知识之一也是老生常谈的话题了，虽然很基础但是面试和平时使用中总是少不了它，这里我想根据我自己平时学习和工作中对Vue生命周期的理解和应用来做一个总结。 状态：this已经指向了实例，但是并不能访问实例中的诸如data、methods、comput…"}, {"id": "6844903710129127431", "title": "vue源码分析", "desc": "Vue.js的核心思想是数据驱动，就是指视图是由数据驱动生成的，我们对视图的修改，并不会直接去操作DOM,而是通过修改数据。 下面从源码角度来分析Vue是如何实现的。 首先我们可以看到vue的源码在github上有，大家可以克隆下来。 我们主要看src下的内容。 可以看到vue…"}, {"id": "6844903842811740167", "title": "vue-cli3 单页应用修改配置成多页应用", "desc": "1. vue.config.js 2. title.js设置每个页面标题 3. 修改public/index.html中的<title></title> 4. 注意此时项目目录是这样的： 5. 把每个单页应用下的router.js的mode改为hash模式 6. 注意把原来的a…"}, {"id": "6844903495942799367", "title": "尝一尝Vue全家桶", "desc": "Vue.js 是当下很火的一个 JavaScript MVVM 库，它以数据驱动和组件化的思想构建。不管你是 Angular 的忠实粉，还是 React 的迷恋者，有机会多了解一个框架也没什么坏处，更何况 Vue 上手难度还是比较低的 。 本文将介绍 Vue 全家桶（Vue+V…"}, {"id": "6844904094495473678", "title": "前端跨域问题", "desc": "B/S架构的项目中前端经常会遇到跨域问题，什么是跨域问题，常用的解决方法又有哪些呢？可能大多数人对跨域问题都只是一知半解吧。 先来说说那么到底什么是跨域？跨域是指一个域下的文档或脚本去请求另一个域下的资源。跨域问题则是指浏览器出于安全考虑而需要遵循同源策略，限制不同源的网站的文…"}, {"id": "6943406347392122916", "title": "【vue.js】一文搭建vue-admin-template项目", "desc": "说明 这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint，这些搭建后台必要的东"}, {"id": "6844903554939879437", "title": "VueJs 监听 window.resize 方法", "desc": "Vuejs 本身就是一个 MVVM 的框架。 但是在监听 window 上的 事件 时，往往会显得 力不从心。"}, {"id": "6844903896830197767", "title": "一个Vue.nextTick  DEMO 引发的学（血）案", "desc": "这段代码执行的顺序有人说是1、2、promise、3。也有人说是1、promise、2、3。 江湖传说vue官方文档有一个神奇的特点，当你解决一个问题后，反过去去原文档里找，总能找的着。但是假如你没找着解决办法的时候，你也别指望在文档里找到办法。这就是把“什么都有，什么都找不到…"}, {"id": "6845166890969464839", "title": "Vue源码 new Vue()后都干了啥？", "desc": "本人毕业到现在工作一年,一直在开发React项目,但在毕业之前的实习基本上都在用vue开发,前一段时间工作比较轻松,又因为好久没有写vue项目,所以想再去熟悉一下vue, 但是痴情的我,居然想看vue的源码,于是我就去慕课网上买了一门源码讲解的课.前后看了两遍,可能是我太笨了,…"}, {"id": "6844903902626709517", "title": "Vue中Slot如何渲染", "desc": "今天我们将分析我们经常使用的 vue 功能 slot 是如何设计和实现的，本文将围绕 普通插槽 和 作用域插槽 以及 vue 2.6.x 版本的 v-slot 展开对该话题的讨论。当然还不懂用法的同学建议官网先看看相关 API 先。接下来，我们直接进入正文吧 对于此，大家可能都…"}, {"id": "6844904152204591112", "title": "实现一个简易的Vue双向数据绑定", "desc": "Vue数据绑定主要是通过数据劫持和发布订阅一起实现的双向数据绑定数据更新时,可以更新视图视图的数据更新是,可以反向更新模型组成说明Observe监听器劫持数据,感知数据变化,发出通知给订阅者,在get"}, {"id": "6844904084563197965", "title": "（我的）项目基本规范", "desc": "编写 HTML 代码时，尽量避免多余的无意义的父元素。 全局变量以及常量, 使用全部字母大写，单词间下划线分隔的命名方式。 一般变量, 使用 Camel（驼峰） 命名法。 使用扩展运算符（...）拷贝数组。 需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定…"}, {"id": "6844903591891697672", "title": "前端技术周刊 Apr 15th, 2018", "desc": "本周开始，我开始总结一周阅读或者参考过的文章给大家，都是精挑细选出来觉得非常好的文章。我看过一些 coder 写的技术周刊，基本都是给一个文章的链接和标题，然后给一段原文引用就没了，我在想，我既然读了，而且我还要介绍给大家，那我就有责任给大家总结出来文章的阅读姿势，读完我们起码…"}, {"id": "6844903891574718472", "title": "Vue 应用单元测试的策略与实践 05 - 测试奖杯策略", "desc": "Vue 项目中测试收益如何最大化，如何配置高性价比的测试策略，即什么地方最该花力气测试，什么地方又可以暂且放一放？ 前言从敏捷：团队和企…"}, {"id": "6944325035750326308", "title": "vue.$nextTick 实现原理", "desc": "这里有这么一大堆注释，我翻译下吧。 这里我们有使用微任务的异步延迟包装器。在2.5的版本中，我们使用了(宏观)任务(与微观任务相结合)（注：2.5x,依次使用setImmediate(宏)、MessageChannel(宏)、setTimeout(宏)、promise（微）），…"}, {"id": "6913522245168168974", "title": "Vue源码分析（一）——运行机制", "desc": "执行机制1、执行newVue({})，初始化，初始化生命周期，绑定props,data,methods,computed,watch等属性，还有注册相关全局方法（如$emit，$destory等）2、"}, {"id": "6913130458645528583", "title": "配置extenals减少打包体积", "desc": "在vue.config.js中配置extenals在main.ts中修改相关引入在public/index.html中，通过CDN引入相应的js和css"}, {"id": "6943885869816217607", "title": "[实践总结]给Vue项目封装一个带代码提示的api插件", "desc": "前端经常要和后端对接接口了，封装一个通用的接口请求很有必要，不过光有统一的接口库还不够库，能不能用typescript的d.ts文件外加webpack插件实现代码提示的自动化呢？今天我来分享我的项目实践总结。 目录中手动新建index.js、runner.js、webpack.…"}, {"id": "6943481013733425189", "title": "写个localStorage的小例子", "desc": "我在搜狗问问帮别人写代码的时候遇到一个小的问题，问题是这样的，就是题主希望在别的页面获取到前一个页面存在js里面的数据，这个时候一般都会想到的是用cookie，但是其实cookie是很有局限性的， 所以我就说其实是可以用localStorage离线缓存技术的，不过我不想写例子，所..."}, {"id": "6943481139076005919", "title": "jquery怎么给循环出来的列表（类似于text框）取值和赋值", "desc": "  场景描述：这样的我在项目的时候遇到了一个很常见的问题，但是一直没有解决，最后在朋友的帮助下解决了，所以简单的将这个代码和解决的过程描述一下，给以后你们遇到类似问题的时候一个参考。  问题描述：我需要做一个生成验证码，然后将生成的验证码放到对应的框里面的功能。所以就出现了，te..."}, {"id": "6844903968150126600", "title": "Vue源码浅析之响应式系统（二）", "desc": "在上一篇文章Vue源码浅析之响应式系统（一）中分析了Vue2.X版本中响应式系统的依赖收集与派发更新，这篇文章主要围绕响应式系统中的更新机制与侦听/计算属性的实现。 在mounted阶段中，number的值被重复多次累加。那么在拦截器函数setter被触发了100次后，DOM的…"}, {"id": "6844903630340898823", "title": "老话题，vue中的数据绑定原理", "desc": "以vue2.0源码，了解vue中的数据绑定原理，nice！"}, {"id": "6844903877716918279", "title": "【Vue原理】VModel - 源码版 之 select 详解", "desc": "的确是更新了绑定值哦，可是为什么要更新绑定值为 undefined 呢？想不通....."}, {"id": "6844904001553743886", "title": "vue2.X之vue-cli源码学习", "desc": "熟悉vue开发的同学肯定对vue-cli不陌生，Vue-cli是一款基于模板化的开发工具，等于就是把别人的项目结构给照搬过来，所有的配置都是暴露出来的，你可以根据实际情况去做一些配置的修改，更加灵活自由一点。前段时间也学习了下cli的源码，特此来记录下。 commander：一…"}, {"id": "6942828270748434462", "title": "Vue 3.0 新特性", "desc": "2020年9月19日凌晨，尤雨溪大大正式发布了 Vue.js 3.0 版本，代号：One Piece。此框架新的主要版本提供了更好的性能、更小的捆绑包体积、更好的 TypeScript 集成、用于处理大规模用例的新 API，并为框架未来的长期迭代奠定了坚实的基础。 3.0 版本…"}, {"id": "6844904135725154311", "title": "记录vue2.0我理解的依赖收集过程", "desc": "watcher在src\\platforms\\web\\runtime\\index.js中$mount方法的注册中最后用到的mountComponent方法mountComponent()在这个方法里我们"}, {"id": "6844903558773489677", "title": "关于Vue组件化开发的思考", "desc": "说到组件，会想到的是？？？"}, {"id": "6844903871257509895", "title": "Vue 源码剖析 —— 对象变化侦测", "desc": "当应用在运行时，内部状态是会不断变化的。而对于 web 应用而言这会直接导致页面不停的重新渲染。那么如何通过状态变化确定具体要重新渲染哪个部分呢？在 MVVM 框架出现之前，大多数时候都需要手动去创建并维护数据与显示层的联系，随着应用的复杂度提高，内部状态和 UI 的联系变得错…"}, {"id": "6844903806510055431", "title": "浅尝Vue.js组件（一）", "desc": "当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。也就是说 和 都是可接受的。 注册之后可以用在任何新创建的Vue跟实例(new Vue)的模版中。 我们往往有很多功能单一的基础组件，而这些组件有经常会被各个功能组件…"}, {"id": "6844903731012583437", "title": "FIS3+mod.js开发方案在线上部署时出现无法找到文件的bug的解决过程", "desc": "本地开发过程非常顺利，第一次线上部署也非常顺利，一切似乎都在平稳进行着。然而在今天上午的一次更新部署以后，出现了意想不到的事情。 我们线上更新代码是通过把fis3 release出来的文件放入服务器文件目录内，再重启服务器的方式进行的。在之前的多次修改中都没有出现问题，但是在今…"}, {"id": "7005077555292143647", "title": "vue3条形码 vue3-barcode", "desc": "最近在使用vue3重构项目，发现之前vue-barcode不兼容vue3，于是自己花时间琢磨了一下这个插件，写完发布上去vue3-barcode，获得了vue-barcode也是jsbarcode作者"}, {"id": "6972371296713703460", "title": "Vite+Vue3+TS搭建一个后台管理系统架子", "desc": "前言 vite 作为vue祖师爷尤大的又一神作。值得我们使用 这篇文章主要通过 vite + vue3 + element-plus + ts搭建一个后台管理系统架子"}, {"id": "6844903768362860557", "title": "vue-cli3 项目从搭建优化到docker部署", "desc": "1. 创建一个vue项目 7. 选择测试框架 （Mocha + Chai） 8. 选择将这些配置文件写入到什么地方 (In dedicated config files) 选是的话，下次创建一个vue项目，可以直接使用这个预设文件，而无需再进行配置。 2. 全局组件自动注册 在…"}, {"id": "7002415626350231583", "title": "vue数据渲染的初始化（vue源码分析1）", "desc": "一. 代码 二.执行步骤 1. initMixin，初始化vue，挂载_init方法 执行initMixin(Vue) Vue是一个构造函数。 在Vue原型上挂载一个_init方法，这一步只是挂载方法"}, {"id": "6961317142465609742", "title": "JS-VUE-大转盘抽奖", "desc": "前言 “运营三宝”（九宫格、大转盘、老虎机，当然次三宝当然是最基础的营销运营手段），本片文章聊聊大转盘，转盘的实现逻辑应该是营销方案较为简单的一种了；"}, {"id": "6983688046843527181", "title": "petite-vue源码分析：无虚拟DOM的极简版Vue", "desc": "最近发现Vue增加了一个petite-vue的仓库，这是一个无虚拟DOM的mini版Vue，前身貌似是vue-lite(瞎猜的~)，主要用于在服务端渲染的HTML页面中上通过Vue添加一些交互"}, {"id": "7001668615682555918", "title": "2x0 VueRouter - 进阶 - 路由导航守卫", "desc": "VueRouter 基础教程系列 🎉 什么是导航守卫 ？ 导航是用来描述路由跳转链接的动作。而导航守卫则是用来控制路由是跳转还是取消。 导航守卫的作用范围有：“全局守卫”、“路由独享”、“组件级导航守"}, {"id": "6902420248851382285", "title": "使用Vue自定义指令实现右键菜单", "desc": "浏览器里右键时会有一个默认的菜单，在我的开源项目中正好有自定义右键菜单的需求，在npm库找了下与之相关的包，发现都是以组件形式实现的，感觉那种做法太过繁琐。 于是，我就想着能不能像vue的内置指令那样，绑定到元素上，在这个元素上右键就能出现右键菜单，这样做就方便很多了。 看了下…"}, {"id": "6959019174215548935", "title": "Vue 源码解读（8）—— 编译器 之 解析（下）", "desc": "深入理解 Vue 编译器的解析过程，理解如何将类 html 模版字符串转换成 AST 对象 ...."}, {"id": "7003921226267623437", "title": "vue源码图解03-diff（patch）算法", "desc": "虚拟DOM概念 虚拟DOM（Virtual DOM）是对DOM的JS抽象表示，它们是JS对象，能够描述DOM结构和关系。应用 的各种状态变化会作用于虚拟DOM，最终映射到DOM上。 vue 1.x中有"}, {"id": "6854573219890872328", "title": "封装element-ui表格，我是这样做的", "desc": "使用过element-ui的表格的同学应该都有这样的体会，做一个简单的表格还比较容易，但如果这个表格包含了顶部的按钮，还有分页，甚至再包含了行编辑，那开发工作量就成倍的增加，特别是在开发管理系统的时候，表格一个接一个的去开发， 即浪费时间，还对个人没有什么提升。今天小编带来了自…"}, {"id": "6994599997563994142", "title": "同时改变两个表格的宽 element ui", "desc": "需求是两个表格，改变其中一个表格列的宽，另一个表格也随之相应改变同等宽度。本文是用的vue+element ui框架。 文中使用head"}, {"id": "6999107975788888078", "title": "人类高质量vue学习笔记（二）", "desc": "跟着我！！！跟着我！！！跟着我！！！跟着我！！！跟着我！！！跟着我！！！跟着我！！！跟着我系统化学习 vue!!!"}, {"id": "6995348089150111775", "title": "Vue3从0到1组件开发-布局组件：Carousel轮播图", "desc": "轮啊轮播图 为什么放在布局组件？ 我的天啊，这个作者肯定脑子抽了， 轮播图一看就是业务组件啊，他居然当成布局组件，肯定是瞎写，关了关了。且看我慢慢说来。"}, {"id": "6990214006682157063", "title": "Vue3 Hook 到底是啥黑魔法？", "desc": "早就听说，React社区，已经全面拥抱Hook。Vue3的发布也支持了自定义Hook，作为只会Vue的前端小码农自然要去看看Vue3 Hook到底是啥黑魔法？ 从不了解React Hook的角度来看一"}, {"id": "6934350829394591758", "title": "🎉🎉一个基于 Vue3 的开源项目，3个月时间 star 终于破千！🎉🎉", "desc": "本文主要是对如何做开源项目的一些思考。 关于 newbee-mall-vue3-app 这个开源项目的开发背景和详细介绍之前都已经介绍过，可以在上述两篇文章中查看。 真的很巧合，我看到这张统计图表的时候也有点意外。 整理本篇文章的时间是 2021 年 2 月 28 日凌晨，目前…"}, {"id": "6996654736652894222", "title": "[点线面Vue3]把模板语法这条线串起来！（包含学习新技术的方法论）", "desc": "本文字数：5570，阅读完全文大约要花费25分钟。 我把一个初学者学习新技术分成3个大阶段8个小阶段，分别是： 阶段一：入门和熟悉 先用起来：从一个工作多年的Vue初学者角度学习Vue3：初识Vue组"}, {"id": "6999929501060694047", "title": "Vue中的watch与computed区别理解", "desc": "计算属性computed : 支持缓存，只有依赖数据发生改变，才会重新进行计算，计算属性可用于快速计算视图（View）中显示的属性。这些计算将被缓存，并且只在需要时更新。computed是计算属性的;"}, {"id": "7002064993612988424", "title": "Element el-table 表格二次封装", "desc": "内容背景 公司开发的管理后台系统需要用到大量的表格数据，每个页面内容大致相同，为了便于后期维护，便考虑将el-table进行封装，将公共部分内容提取出来，后期只需对表格内容进行维护即可。"}, {"id": "6995173758809931812", "title": "CSS也能像组件状态一样响应式更新？", "desc": "大家好，我是卡颂。 不知道平时在项目里你怎么处理CSS呢？ 我们知道，由于原生CSS存在一些问题，比如： 复用时容易样式冲突 没有作用域、没有模块化 没有编程能力 社区涌现出很多解决方案，比如： 命名"}, {"id": "6894536331205017613", "title": "还在为写.vue文件烦恼吗？快来用dot-vue-cli交互式生成吧！", "desc": "Vue2.x single file component .vue generator. Set name, props, data, computed, watch and choose lifecycles, methods by interactive command l…"}, {"id": "6844903762813779981", "title": "Vue 实践小结", "desc": "记一次 Vue 复习实践小结，编码技术总得时不时拿出来实践一番，不然很多细节的东西就会随着时间流逝，并且通过每一次实践你总能发现一些自己之前没有注意到的知识点，加深自己对一门语言或者框架的理解。 话不多说，让我们开始吧。 其中，方式三是方式一的语法糖。 如果，Vue 是使用 V…"}, {"id": "6844903762797019150", "title": "Vue 源码解析（实例化前） - 初始化全局API（二）", "desc": "在前面的两章，介绍了Vue 源码解析（实例化前） - 初始化全局API（一）和Vue 源码解析（实例化前） - 响应式数据的实现原理。 由于数据双向绑定的内容会比较多一些，而且涉及到的知识点也比较多，所以我当时就从初始化全局API里面单独拿了一章出来，去讲解 vue 到底是如何…"}, {"id": "6929097824743211016", "title": "Vue3（四）CND模式下的“工程化”开发方式", "desc": "我只是想学一下vue，官网上说vue是“渐进式的”，啥意思呢？一直是晕晕的。那么只好用笨办法了——官网的代码一行一行敲出来看看效果呗。 简单的都学的差不多了，然后发现大家都在用“工程化”的方式做开发。 webpack、node、npm、cnpm、yarn、脚手架、开发环境、测试…"}, {"id": "6897030056032337934", "title": "Vue3源码解析-响应式原理", "desc": "Vue3对Vue2中的响应式原理使用Proxy进行了重写，本文我们将对Vue3响应式的源码进行分析。 由于篇幅问题这里我们只对reactive类型的响应进行分析，其他流程和这个类似，只是根据不同的参数进入不同的处理流程。 在Vue3中我们可以通过Composition API而…"}, {"id": "6844903592814444558", "title": "vue中点击空白处隐藏div的实现（用指令优雅的实现）", "desc": "结合着本思路和指令咱们来实现。 bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。 inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。 update：所在组件的 VNode 更新时调用，但是可能发生在其…"}, {"id": "6844903509574287374", "title": "让vue-cli初始化后的项目支持服务端渲染，SSR 实战", "desc": "当前 SPA 架构流行的趋势如日中天，但在 SEO 方面好像一直是个痛点，所以众多流行的 mv* 等框架也为此痛点提出了解决方案。 vue 官方提供了快速构建项目的工具 vue-cli，其方便快捷性众所周知。本文章来分享一下使用vue cli构建项目后如何集成 SSR(serv…"}, {"id": "6844903576238571534", "title": "记一次mpvue-loader源码探究", "desc": "根据官网的文档，可以很迅速的完成quick start，之后很愉快地把自己写的tabbar组件搬了过来，首先先引入组件... 由于是基于实际问题出发的源码探究，所以本质是为了解决问题，那么就得先定位出该问题可能会产生的原因，并带着这个问题去阅读源码。从warning可以很明确的…"}, {"id": "6844903705733513223", "title": "v-model 使用场景和源码学习", "desc": "在使用v-model时习惯的想到数据双向绑定，但是关于v-model的使用场景和原理并不熟悉。接下来说说v-model的使用场景，和vue的源码。 通过使用v-model指令在元素的输入元素上创建双向数据绑定，它会根据控件类型自动选取正确的方法来更新元素。v-model 本质上…"}, {"id": "6844903620400381960", "title": "详解Parcel：快速，零配置web应用打包工具", "desc": "译者按： 新一代Web应用打包工具Parcel横空出世，快速、零配置的特点让人眼前一亮。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 虽然webpack提供了非常多灵活的配置，但是与之带来的是复杂度的提升，而Parcel却非常的简洁。Pa…"}, {"id": "6844903549139173384", "title": "从搭建vue-脚手架到掌握webpack配置（二.插件与提取)", "desc": "很多插件功能是在开发环境（development）用到的但是在生产环境（production）用不到的，反之亦然。比如 ...... 第二种方法涉及到二次封装，就像官方vue-cli构建的项目一样，分成了三个配置文件，对目前的我们来说比较复杂，我们使用第一种方法，设置环境变量来…"}, {"id": "6913716964422582280", "title": "从零开始，用elementui躺坑vue - ElementUI & Axios", "desc": "1. 为什么选择elementui 2016 年 3 月 13 日 Element 悄然诞生，经历了 4 年的风雨洗礼，我们从一个饿了么内部业务组件库成长为 Vue 生态里最流行的 UI 组件库之一。 持续迭代 : Element 已获得 48200 Github Star， …"}, {"id": "6980520982884646942", "title": "0x8 精读Vue官方文档 - 表单输入绑定", "desc": "精读 Vue 官方文档系列 🎉 双向数据绑定 Vue 通过 v-model 指令实现数据双向绑定。 双向数据绑定本质是一个 “语法糖”(Syntactic sugar)，它分别封装了“数据更新”与“事"}, {"id": "6980363549340073997", "title": "04.Vue-Cli(Vue脚手架)", "desc": "一.Vue-cli说明 Vue-cli是Vue官方提供的脚手架工具，cli:command line interface 最新的版本是4 3.X版本和4.X版本变化不大，但是3.X相对于2.X的版本变"}, {"id": "6980515542197075982", "title": "Vue2 虚拟Dom和Diff算法", "desc": "什么是虚拟Dom: 通过一个对象去保存和记录页面真实Dom节点,当我们的页面发生变化时,会生成对应的新的虚拟Dom,新的虚拟Dom则会和旧的虚拟Dom进行比对,如果对比发现旧的虚拟Dom和新的虚拟Do"}, {"id": "6844903503463186446", "title": "Webpack 核心开发者 Sean Larkin 盛赞 Vue", "desc": "dev.io 近日邀请了 Webpack 核心开发者 Sean Larkin 回答开发者提问，其中几个问提比较有意思，和掘金的小伙伴们分享一下。 有一个开发者问 Sean 如何成为一个热门项目的核心作者。Sean 没有一上来就说该做什么，而是先告诉提问者需要明确自己是否对该项目…"}, {"id": "6910901877534113805", "title": "vue.config.js中modules属性替换为requireModuleExtension导致element样式不生效", "desc": "看到了吧，requireModuleExtension跟modules正好是相反的。设置成requireModuleExtension: true就可以了。 至于为什么设置成requireModuleExtension: true会导致样式不生效，大致原因是这样的， css m…"}, {"id": "6844903765556854792", "title": "聊一聊Vue组件模版，你知道它有几种定义方式吗？", "desc": "前端组件化开发已经是一个老生常谈的话题了，组件化让我们的开发效率以及维护成本带来了质的提升。 当然因为现在的系统越来越复杂庞大，所以开发与维护成本就变得必须要考虑的问题，因此滋生出了目前的三大前端框架 Vue、Angular、React。 那今天我们就来看看 Vue 中有哪些定…"}, {"id": "6910500958761926663", "title": "vue， vue-router 直接页面引入", "desc": "坚持养成一个懂得总结得习惯，以备不时之需。生活虽苦，但还是处处有光。生活还是充满希望。 今天记录一下关于 vue , vue-router 不用模块工程文件编写，直接引入页面得实践总结。若方法不够完善，请指出，互相学习"}, {"id": "6844903968309526536", "title": "ElementUI之Message功能拓展", "desc": "在最近项目开发中，接口错误信息是在拦截器统一处理，在一次产品大大验收过程中，由于服务器没有重启完成，导致前端弹出一推错误提示语，产品大大对于提示语的交互效果提出了一系列的建议。由于项目使用了ElementUI框架，加上本人喜欢投（xin）机（shou）取（nian）巧（lai）…"}, {"id": "6948684670225940487", "title": "记录一下vue监听路由变化时watch方法会执行多次的解决方案", "desc": "本人前端菜鸟一名，一直致力于不间断的生产管理后台的bug，并以此自勉自励。近几天接到一个需求，网上也搜了很多例子，但是没有从根本上解决。在这里记录一下我自己的解决的过程，这也是第一次在掘金发言，求轻虐。 如果是你，你拿到这个需求，应该很容易想到在B页面对路由变化做watch，然…"}, {"id": "6844903649479507981", "title": "vue+axios+express图片上传并利用js-xlxs插件将图片链接导出到excel里", "desc": "vue + express实现图片上传，使用createObjectURL方法在前端页面显示图片缩略图，使用ClipboardJS实现复制剪切功能，最后利用js-xlxs插件将上传后的服务器端图片资源url地址导出到excel里面。本项目只是演示用，如果你是组件式开发，直接安装…"}, {"id": "6844903513756008461", "title": "浅入浅出Vue", "desc": "本篇主要是一些vue的学习总结。开始写的原因——也是工作中，对于它的使用，逐渐增多了。并且也觉得是时候做一个总结。其实，我也算是三大框架的使用者啦！！！从最早期的angular，中期的react，直至vue。那么，就此开始做一个总结。如果你喜欢我的文章，欢迎评论，欢迎Star~…"}, {"id": "6916758740574142477", "title": "VueJs篇", "desc": "具有跨平台的作用：因为虚拟dom 是以js对象为基础而不依赖真实平台环境，所以有跨平台的优点，可以是浏览器、nodeJs、weex，为前后端同构提高了可能。 提高了渲染的性能：在我们大量、频繁的数据更新下，能够对视图进行合理、高效的更新。 提高浏览器性能：我们将dom的对比操作…"}, {"id": "6844903502351712263", "title": "美团点评酒旅前端的技术体系", "desc": "随着科技的发展，终端种类越来越丰富，前端作为连接用户终端与后端服务、提供视觉体验的关键环节，发展迅速。相比十年前，前端的边界和范围变得更加广泛，甚至有点模糊，一名优秀的前端工程师不仅需要精通自己的专业领域，了解设备终端的特点、OS、运行环境，同时还需要具备良好的审美和对用户体验…"}, {"id": "6844904126254415885", "title": "记一次vue项目的优化", "desc": "前言环境系统：windows10脚手架：vue-cli2、vue-cli3推荐文章来自掘金1来自掘金2html中的优化资源优化字体图标，集中管理纯色的小图标，适合一个图标大小和颜色频繁变动的场景；我们"}, {"id": "6844903537030201351", "title": "Webpack实战-构建同构应用", "desc": "同构应用是指写一份代码但可同时在浏览器和服务器中运行的应用。 搜索引擎无法收录你的网页，因为展示出的数据都是在浏览器端异步渲染出来的，大部分爬虫无法获取到这些数据。 对于复杂的单页应用，渲染过程计算量大，对低端移动设备来说可能会有性能问题，用户能明显感知到首屏的渲染延迟。 为了…"}, {"id": "6921635741978066957", "title": "基于vue2手写一个简易的Vue-router", "desc": "前言vue-router官方使用说明文档vue-router源码地址本文主要讲vue-router二种获取路径模式history和hash路由守卫的实现原理(这里主要以beforeEach为例)rou"}, {"id": "6916439929350914062", "title": "精读el-form", "desc": "个人使用el-form组件开发表单编辑场景已有一年之余，先后基于el-form组件几次封装了动态表单组件，封装的动态表单组件说白了就是预先写了一套全量的form模版，并内置了基础的校验逻辑，增加了一些定制的插槽，这样使用动态表单组件的时候，可以传入配置项来选择性的加载想要的基础…"}, {"id": "6844903568244228109", "title": "OIDC及其在RESTful AP与SPA架构下的SSO实现思路（第一版）", "desc": "最近在对基于token做身份认证的项目中扩展sso。 其中服务器端是RESTful风格的API服务器，客户端基于Vue开发的SPA。 身份认证是基于token，客户端登录之后，服务器端验证并发送JWT token给客户端，客户端将token存入localStorage中并每次恢…"}, {"id": "6844903921270390792", "title": "vue基础", "desc": "Vue(读音类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue也完全能够为…"}, {"id": "6905003988480393224", "title": "vue2源码解析（二）", "desc": "我们使用Vue时都是从new Vue()开始的，很少人去关注背后发生了那些事，我们都知道，new关键字在JavaScript中代表实例化一个对象，而Vue实际上是一个类，我们看一下源码，在src/core/instance/index.js中。 可以看到Vue只能通过new 关…"}, {"id": "6844903680039206920", "title": "一套自生成组件系统的构想与实践", "desc": "一套功能类似于有赞商城后台管理系统中店铺-微页面的系统，该系统实现用户可以选择所需要的组件，拖动调整组件的顺序，以及编辑组件的内容并且在移动端展示等相关功能,如下图所示。 因为之前且尝试开发过element ui库的组件，详情点这，对于element ui的架构有一定的了解，于…"}, {"id": "6924236490654859278", "title": "Vue学习笔记【基础入门知识】", "desc": "数据和 DOM 已经被建立了关联，所有东西都是响应式的。浏览器的 JavaScript 控制台 ，并修改 app.message 的值，你将看到上例相应地更新。 一个 Vue 应用会将其挂载到一个 DOM 元素上 (对于这个例子是 #app) 然后对其进行完全控制。那个 HTM…"}, {"id": "6844903613488168973", "title": "JS中的深拷贝与浅拷贝了解一下", "desc": "在使用Vue做项目的时候，通常会有许多组件间传递对象的情况。如果只是简单的赋值的话（浅拷贝），是很危险的，因为你不知道什么情况下这个值就被修改了，还一脸蒙蔽，所以我们需要进行深拷贝。深拷贝和浅拷贝的概念，需要一点数据结构的知识去了解。 内存内同一个地址指向了两个变量，其中一个变…"}, {"id": "6844903591459848205", "title": "大二新人的一次搜狐前端实习电面", "desc": "暑假想找一份实习，碰巧看到了学长的搜狐内推，就把自己的没有诚意的简历投了过去，过了一个多星期收到了电话面试的邮件(十分怀疑是学长面子比较大)。 Promise 本质是一个状态机。每个 promise 只能是 3 种状态中的一种：pending、fulfilled 或 rejec…"}, {"id": "6948304430085177351", "title": "vue3利用store实现记录滚动位置", "desc": "在首页列表进行滚动浏览时进入详情页后，切换回首页时可以定位到之前浏览的位置。"}, {"id": "6911195147812700168", "title": "关于Vue组件通讯那点事", "desc": "抽空梳理了一下Vue常用的组件之间的通讯方式，然后想通过使用的技术进行分类整理笔记。 父组件向子组件传值。 父组件通过Prop传值给子组件是属于单向数据流，因此当父组件修改该值的时候，子组件也会随之更新数据；而子组件是不应该在内部改变 prop的。如果你可以这么做，但是Vue不…"}, {"id": "6906093905080270855", "title": "Vue双向绑定原理浅析", "desc": "前言前端框架百花齐放，技术发展亦是瞬息万变，关注框架的底层原理也许有利于我们走的更远，下面我们通过一个简易版的Vue基类来浅析其双向绑定原理双向绑定的构成任务分解数据代理模版编译nodeFramgme"}, {"id": "6844903641703284749", "title": "换个角度学习 VUE CLI 3", "desc": "通过提问解决 vue cli 3 中遇到的问题，通过源码简单了解 vue cli 的实现原理。帮助刚入手 vue cli 3 的同学快速入门，少踩点坑~"}, {"id": "6994459218648498206", "title": "【Vue2.x 源码学习】第三十六篇 - 组件部分 - Vue.extend 实现", "desc": "第三十六篇 - 组件部分 - Vue.extend 实现：Vue.extend 简介；Vue.extend 实现，包括：组件初始化；子类继承父类；修复 constructor 指向问题；"}, {"id": "6994436768133021709", "title": "vue打印兼容xp32位系统/vue的打印功能", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 一、vue-print-nb 这个插件很好用，也很简单，但是问题就是不兼容xp32位。 官方安装及使用文档 1.安装 2.main.js中全"}, {"id": "6844904153806798855", "title": "深入理解computed 、watch 、 methods的使用场景及其区别", "desc": "举个例子，总价 = 数量 * 价格，当数量和价格发生变化时都会影响总价，这时计算属性就派上用场了。 举个例子，当商品的数量减少是，商品的价格就会上升。 结果：computed只会打印一次，当点击change按钮，methods会再次打印，computed这不会在打印。 如果做信…"}, {"id": "6869292582686425096", "title": "从零开始编写一个时间线组件", "desc": "在编写代码时，我们需要用到es6的语法，因此我们还需要安装@babel/core @babel/cli @babel/preset-env babel-loader依赖来处理es6兼容语法。继续执行如下命令: 这只是一个默认的配置，也可以自行根据需求来进行配置，更多信息详见ba…"}, {"id": "6911987521094320136", "title": "【vue系列】2020年度报告的复盘", "desc": "高逼格的设计，炫酷的动效，给作为前端的我留下了深刻的印象。刚好有机会，由我来主导开发我司的2020年底报告，摩拳擦掌跃跃欲试搞了一波。 拿到设计稿，傻眼了。设计师是头次设计移动端全屏年报，整体效果很炫酷，但是对开发十分不优好。最严重的的问题是稿子按照 iphoneX 出图，核心…"}, {"id": "6973877590893264910", "title": "【Vue2.x 源码学习】第十三篇 - 生成 ast 语法树 - 正则说明", "desc": "【Vue2.x 源码学习】第十三篇 - 生成 ast 语法树 - 正则说明；简要说明了 HTML模板的解析方式；对模板解析相关正则说明和测试；"}, {"id": "6844904116880146439", "title": "【洋小洋同学】 我大胆地修改了父组件传来的prop之后？", "desc": "第一种情况：这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值。借助data 第二种情况这个 prop 以一种原始的值传入且需要进行转换。在这种情况下…"}, {"id": "6844903517119856648", "title": "vue-loader 源码解析系列之 整体分析", "desc": "简单来说就是：将 *.vue 文件变成 *.bundle.js，然后放入浏览器运行。 以上的输出就是最终可以拿到浏览器上运行的 javaScript，尽管笔者已经删除了一些会影响理解的部分代码，但是这么直接观察这个文件，难免还是无从下手。 那么我们继续细化分析步骤，vue-lo…"}, {"id": "6947453632853835790", "title": "梳理一下你脑子中vue的watch源码!!!", "desc": "按步骤一步一步看下来 上面先遍历watch，后面给每个侦听属性添加一个user-watcher，其中传的参数expOrFn是key,handler是该key的监听回调,handler的取值可能会有几种情况，列出我们可能的watch形式。 是一个对象时，就把该对象的handler…"}, {"id": "6912240565807480846", "title": "ElementUI cascader级联动态加载回显和搜索看这个就够了", "desc": "这一篇是上一次讨论cascader级联动态加载回显问题的延续，文末有链接。 以下是思考和开发的过程，不感兴趣可以直接看使用文档。 当然不是思想觉悟有多高，还不是因为产品提的需求，产品哭哭唧唧的说：“类目太多啦，我要有一个搜索的功能。” 一开始我是拒绝的，毕竟上一次为了解决回显问…"}, {"id": "6844903622463979533", "title": "结合 Vue 源码谈谈发布-订阅模式", "desc": "最近的工作学习中接触到了发布-订阅模式。该思想编程中的应用也是很广泛的, 例如在 Vue中也大量使用了该设计模式,所以会结合Vue的源码和大家谈谈自己粗浅的理解. 这么看下来,其实就像 JavaScript 中的事件模型,我们在DOM节点上绑定事件函数,触发的时候执行就是应用了…"}, {"id": "6844903591086391304", "title": "在 Typescript 中使用可被复用的 Vue Mixin", "desc": "转到用 Typescript 写 Vue 应用以后，经过一轮工具链和依赖的洗礼，总算蹒跚地能走起来了，不过有一个很常用的功能 mixin，似乎还没有官方的解决方案。 既想享受 mixin 的灵活和方便，又想收获 ts 的类型系统带来的安全保障和开发时使用 IntelliSens…"}, {"id": "6844903670656565261", "title": "读 VuePress（二）：使用 Webpack-chain 链式生成 webpack 配置", "desc": "vuepress 有三套 webpack 配置：基础配置、dev 配置、build 配置，看似和普通的一个前端项目也没什么差别，但它使用 webpack-chain 生成配置而不是传统的写死配置。 在引入详细的示例之前，先让我们介绍一下 webpack-chain 中内置的两种…"}, {"id": "6844904085980708878", "title": "NutUI 3.0 中单元测试的探索和实践", "desc": "众所周知，单元测试功能，是组件库开发中必不可少的一部分，负责进行检查和验证，保证了组件的合理性和规范性。本文主要讲的就是单元测试在 NUTUI 组件库 中的探索实践，我们将从如何编写单元测试、持续集成服务、Coveralls 自动测试代码覆盖率三方面进行阐述。如图所示： 在进入…"}, {"id": "6881092514661548040", "title": "一个使用index作为虚拟DOM的key而导致的问题", "desc": "我之前遇到过一个设计师开的bug，是说当用户在一个列表里添加了一行记录时，界面上的 CheckBox 异常地执行了一个动画效果。接到这个bug时第一反应是看看 CheckBox 对应的布尔值有没有发生变化，确认没有之后，我觉得这需要调查一下控件CSS的实现逻辑了，所以这个bug…"}, {"id": "6943896363495227428", "title": "uni-app页面生命与vue生命周期", "desc": "监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面 监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发 实例已经创建完成之后被调用，在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data…"}, {"id": "6874131616344588302", "title": "基于 vue 自定义指令实现图片懒加载", "desc": "在实际的项目中还是有很多图片懒加载的需求，尤其是c端的应用，在一些列表页，像商品列表等含有大量图片展示。我们能做的一个优化项就是对未进入当前视口的图片元素，延迟加载，减少一进入页面时的请求数。 图片的懒加载从实现上来说，就是一开始不设置 img 元素的 src，在上滑过程中，当…"}, {"id": "6919730347332599816", "title": "vue-awesome-swiper使用笔记", "desc": "安装使用踩坑点https://codesandbox.io/s/polished-http-qe4em?file=/src/components/testswiper.vue&resolutionWi"}, {"id": "6844903568609296392", "title": "你也许不知道的Vuejs - 使用ES6快乐的玩耍", "desc": "上一篇中我们已经学会使用 babel 将 ES6 转化为 ES5 了，并且展示了一些 ES6 代码，这一篇将重点聊聊 ES6 在 Vuejs 项目中一些部分应用。 说是下一代，其实早在 2015 年 6月就正式发布了（所以又称 ES2015），截止今日已经快3年了，很快 ES7…"}, {"id": "6991089178662404103", "title": "关于Vue.js 3.x的拾遗", "desc": "1、Vue.js里面的变量如何让它只生效一次？ 有一个v-once指令，用它就可以了。 在 Vue 中渲染纯 HTML 元素的速度非常快，但有时你可能有一个包含很多静态内容的组件。在这些情况下，可以通"}, {"id": "6844903543984521224", "title": "Vuex框架原理与源码分析", "desc": "Vuex是一个专为Vue服务，用于管理页面数据状态、提供统一数据操作的生态系统。它集中于MVC模式中的Model层，规定所有的数据操作必须通过 action - mutation - state change 的流程来进行，再结合Vue的数据视图双向绑定特性来实现页面的展示更新…"}, {"id": "6844903677946232846", "title": "elementUI upload 对图片的宽高做校验", "desc": "一开始我直接百度google，发现都没有这个问题，这应该是一个很常见的需求啊，element 为啥没有实现呢，也许是很简单吧，网上竟然没有此类问题，我到GitHub的issue里看，确实有类似的问题，但没有系统的解决方法，凉凉。 onload 事件在图片加载完成后立即执行。 现…"}, {"id": "6844903640386404360", "title": "从 Vue typings 看 “this”", "desc": "在 2.5.0 版本中，Vue 大大改进了类型声明系统以更好地使用默认的基于对象的 API。 ...... 在这篇文章里，我们来谈谈上述背后的故事。 这会存在一个问题，Methods 上定义的方法里的 this，全部都是 Vue 构造函数上的方法，而不能访问我们自定义的方法。 …"}, {"id": "6844903639828414478", "title": "Vue，Springboot前后端分离项目初体验", "desc": "前端：Vux 做移动网页版（朋友推荐，也确实比较溜。文档还算比较齐全的，不过我到现在还是没搞出来 InlineCalendar的marks是怎么用的） 后端：Springboot 参考 @Mr_初晨 的专栏，一步步搭的框架。感谢！ 2.通过路由钩子对每次请求进行拦截，判断是否已…"}, {"id": "6988866287241789470", "title": "史上最全的vue.js源码解析（二）", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 虽然vue3已经出来很久了，但我觉得vue.js的源码还是非常值得去学习一下。vue.js里面封装的很多工具类在我们平"}, {"id": "6880329638158008333", "title": "超级详细的v-model实践总结", "desc": "checkbox 和 radio 使用 checked 属性和 change 事件。 允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是…"}, {"id": "6844904024899059720", "title": "vue-jsx的写法小全（附高清代码）", "desc": "class与styledomProps事件原生事件，对应模板语法的@click.native自定义事件（通过'emit'触发）事件引用，回调slot插槽与slotScopeslot插槽slotScop"}, {"id": "6844904085301231624", "title": "VUE源码系列七：v-model实现原理", "desc": "v-model即我们常说的双向绑定，但一定不能跟数据响应原理混为一谈，因为数据响应式是通过数据的改变去驱动视图渲染，而双向绑定除了可以数据驱动DOM渲染，DOM的变化反过来也可以影响数据，是一个双向的关系。 当我们在表单中输入文案，那么message也会跟着变化，OK，让我们来…"}, {"id": "6897084678021316615", "title": "Vue自定义指令--实现文字溢出显示...鼠标移入浮层展示全部", "desc": "首先要知道当前元素的宽将文字放到一个容器中，将容器的样式（主要是有关字体的样式）都设置为当前元素的样式，然后获取容器的宽，也就是文字的宽如果文字的宽度超过了当前元素的宽度，则给溢出隐藏的css样式ov"}, {"id": "6844903605439299598", "title": "VUE从零开始系列（上手），呆萌小白上手VUE", "desc": "抱歉这回拖得时间有点长，不过我尽量保证抽出时间来坚持写下去，另本人水平有限，欢迎大家指正和拍砖。在上一章，大家对整个项目结构应该有所了解了，那我们就开始着手开始写页面。 由于我们用脚手架搭建并不能完全满足项目的需要，所以我们要再增加一些东西。 作用就是用来ajax请求， 之前有…"}, {"id": "6877101934600273934", "title": "面试官：说说Vue组件间通信有哪些方式（总结了6种）", "desc": "但是当出现全局共享的状态、兄弟组件间通信等场景时，使用 Prop 和自定义事件可能会让逻辑变得非常复杂。这个时候，你应该考虑使用一个全局状态管理方案，例如 Vuex。 当然，Vue 组件间通信的通信方式远不止以上两种，下面分别讨论。 通常情况下，子组件不处理业务逻辑，只向上派发…"}, {"id": "6955096329349496840", "title": "Element-ui checkbox-group", "desc": "Element-ui checkbox-group 剖析 属性: v-model双向绑定值, 且为数组类型 方法: change事件,双向绑定的值value发生变化后的回调 如何将checkbox-g"}, {"id": "6844904173893337102", "title": "Vue-cli3.0 使用less全局变量", "desc": "需要安装两个插件style-resources-loadervue-cli-plugin-style-resources-loader安装插件配置插件将themes.less配置到vue.config"}, {"id": "6975533461637431326", "title": "Vue.js 源码 （15）—— 指令的奥秘1", "desc": "这是我参与更文挑战的第16天，活动详情查看： 更文挑战。 前言 指令（directive）是 Vue.js 提供的带有 v- 前缀的特殊特性。指令属性的值预期是单个 JavaScript 表达式。指令"}, {"id": "6844904098605563911", "title": "Vue 源码阅读（九）：编译过程的optimize 阶段", "desc": "在$mount的时候，当遇到 Vue 实例传入的参数不包含 render，而是 template 或者 el 的时候，就会执行编译的过程，将另外两个转变为 render 函数。 本文只针对其中的 optimize 阶段进行重点阐述。 编译过程首先就是对模板做解析，生成 AST，…"}, {"id": "6975422620988604452", "title": "Vue插槽实现原理", "desc": "vue.js的灵魂是组件，而组件的灵魂是插槽。本文主要是对插槽的实现原理进行详解，描述render中插槽使用方法以及为何这么使用。"}, {"id": "6978122235445772301", "title": "第7期 YAML入门学习", "desc": "前言 我们在使用VuePress书写文档的时候,我们会接触到YAML，进行小编就带大家一起认识下YAML，同时也带大家认识下VuePress中的YAML Front Matter,如果对大家有帮助，大"}, {"id": "6844903698359910407", "title": "用Vue实现一个掘金沸点图片展示组件", "desc": "整个系统比较复杂，包含图片文字上传组件，emoji表情组件，一级评论，二级回复，以及二级回复要能展示图片，点赞组件，图片展示组件等。其实主要是后台比较复杂，如何有效地设计数据库表结构以及各种增删评论。本文主要介绍下图片展示模块的构思和代码编写逻辑，如下图，下图是新鲜事中的图片展…"}, {"id": "6844904142138245128", "title": "Vue深入浅出computed（进阶必看系列）", "desc": "大家好，我是六六。在我们开发当中，当然少不了使用computed计算属性，都知道结果会被缓存起来，那是怎么做到的呢。当然了，在面试中也经常会问到与watch到底有什么不同，那儿接下来，我们将走进computed的内部，详细的去了解一下。 学习中最常见听到的一句话就是，compu…"}, {"id": "6844903639102783495", "title": "动态Vue.js布局组件", "desc": "vue.js是渐进增强的视图库，可以作为.html页面部分使用，也可以结合vue-router、vuex、axios用来构建单页面或多页面应用。以开发单页面为例，开发过程中为遇到，不同的页面需要使用不同的页面布局情况，下面我们将探索Vue.js中处理布局的多种方式。 构建Vue…"}, {"id": "6881603169848786958", "title": "vue重构老项目时，对于vue源码的一些收获（1）", "desc": "由于上一篇中说到的“对于vue源码的意外收获”这一小节内容比较多，索性单独挑出来另成一篇。 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM"}, {"id": "6844903890849103880", "title": "Vue 的 computed、watch 的实现", "desc": "本文章纯为学习中的经验总结，并非教程，若有疑问欢迎讨论。 之前有总结 Vue 双向绑定的实现，建议先去看看再看这篇文章，这篇文章是在其基础之上进行拓展的，所以先去瞅瞅吧，如果已经看过的话，把代码拷过来，后面要用。 之前说过，双向绑定是对某个属性进行了劫持，在其get的时候进行订…"}, {"id": "6987946990260879391", "title": "1. vue2的应用：vue的简单使用", "desc": "前言 上一篇，我们针对vue2的应用层面，抛出了3个问题： vue是什么？ 怎么使用vue？ vue都有哪些API，它们是如何使用的？ 这一篇，让我们逐个去解决上面的问题。 Vue是什么？ 以上引用官"}, {"id": "6877157758169448461", "title": "vue源码解析之data原理", "desc": "判断 data 对象的每一个 key，不可以和 props、methods 中的 key 相同。否则会报警告。可以看出优先级是 methods > props > data; __ob__这个属性是在初始化 Observer 实例的时候加上的。有了这个属性就表示这个对象被观测过…"}, {"id": "6844903856552280072", "title": "Vue 2.x折腾记 - (20) JSX在业务中的具体实践以及跟React书写的差异化", "desc": "Vue JSX：让Vue支持JSX来书写代码的一个开发构建依赖。 最近已经到1.0 正式版了，稍微梳理下，就落实到具体业务去尝试。 更多的姿势可以看上面仓库的README，这里只说说我用到的。 总体来说还是挺实用的，一些情况下写起来舒服很多。 vue jsx 这个开发依赖解析还…"}, {"id": "6844903920267952142", "title": "vue项目搭建流程", "desc": "一、node.js安装配置1.下载地址http://nodejs.cn/download/cmd中输入：node-v查看是否安装，及版本号2.环境变量（1）查看是否配置node为环境变量cmd中输入："}, {"id": "6844903502305558541", "title": "Vue 2.5发布在即 将全面支持TypeScript", "desc": "由于是本人第一次翻译，且无TypeScript使用经验，如果有错误之处，请阁下不吝赐教。 从Vue 2.0发布以来，就一直有呼声说要将TypeScript更好地和Vue整合到一起，主要的库（Vue, Vue-Router, Vuex）也有了TS的类型声明。然而，目前的Vue和T…"}, {"id": "6844903710888329229", "title": "还在为部署Vue SSR烦恼？Koa-vuessr-middlware 了解一下", "desc": "前言最近在写一个新应用时，想用Koa结合VueSSR，同时写Api接口和页面，于是开始上手写，结果发现需要写的东西很多，参考的大多数例子都用的是十分类似的代码（好像大多都是基于尤大大的hackerne"}, {"id": "6854573212785704973", "title": "Vue学习笔记10-深入了解混入、渲染函数节点树相关", "desc": "这块放到后面的开发demo里再写吧，说不定能够结合数据可视化组件进行分析写。 混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。 当组件…"}, {"id": "6844903501743521799", "title": "用Proxy 在 Vue 中解决动态加载数据的需求", "desc": "但是对于这个table来讲就不一样了，你拿不到该行引用值!..... 这个table的源码是这么传值的... 说白了就是这个 this.subTableProxy 的代理对访问者进行了提前 “布置” 当要访问的属性不存在的时候根据业务的需求生成了不同类型的对象以供访问。 完。"}, {"id": "6844903631972466696", "title": "以手写代码的方式解析 Vue 的工作过程", "desc": "对于 Vue 的工作过程，我们可以从下面这张图中得到一点思路。 我们可以从两个方面来解析 Vue 的工作过程：初始化阶段、数据修改阶段。 在创建实例的过程中，我们调用了一个init()方法。它做了什么事情呢？它将传入的props、事件、data等都做了初始化。 我们通过调用$m…"}, {"id": "6844903505421926413", "title": "Vue组件通信方式", "desc": "前端在处理交互时，经常会遇到一个问题:组件之间如何通信？ 下面介绍几种常用的组件通信方式,包括父子组件，兄弟组件，复杂组件下的不同通信方式； 包括Vuex，event-bus，props＋emit"}, {"id": "6844903633474060296", "title": "如果你也想写个完整的 Vue 组件项目", "desc": "其实上面的除了文档都比较容易做到，除了可能会在构建上踩坑外。那么做到了这些可以上线了吗？是的。不过看一些优秀的库其实还可以做更多的，例如下面的这些： 2.那么，有没有..."}, {"id": "6844903889389486094", "title": "Vue CLI and Leaflet （7）面绘制", "desc": "面绘制功能用户的操作方式和线绘制功能几乎是一模一样的。不同在于对用户操作的响应的部分。二响应部分只有两处不同。 1）当用户添加的点数为1时，地图上的显示线状橡皮筋效果。 2）当用户添加的点数大于2时，地图上的显示线状橡皮筋效果。 *所有的代码都是在第一章的项目结构中添加或者修改…"}, {"id": "6916092022533128200", "title": "「精简版」Vue响应式原理", "desc": "当你给Vue示例传递数据作为data时，你可能奇怪为什么当数据更新的时候，视图会跟随着数据一起更新？其实在Vue内部会进行数据劫持，即Vue遍历data对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。 Obje…"}, {"id": "6928008793708199943", "title": "Vue2.x源码解析 - 数据驱动", "desc": "newVue实例Vue实例挂载render函数virtualdomcreateElementupdate"}, {"id": "6844903629686571016", "title": "webpack结合reactjs、vuejs项目中图片处理", "desc": "这篇文章主要整理一下自己在使用 webpack 结合 vuejs 或 reactjs 开发过程中图片的处理方法。 项目打包之后（假定输出目录为 dist），除了 index.html，将所有的静态资源上传至 cdn，而并非打包之后所有静态资源都在应用服务器上。 不适合我。 它会…"}, {"id": "6844904132432642056", "title": "VueJS核心-computed属性源码解析与面试参考回答", "desc": "今天就来聊聊我们非常熟悉的计算属性吧，这也是前端面试常见的一个题目了，而且是属于稍微有点难度的题目， 如果你答得很好那就是一个很棒的加分点，要答好这个问题，那至少都要做到从源码的角度去分析计算属性的原理。 本文就从源码的角度去分析计算属性，适合那些了解响应式原理这部分源码的同学…"}, {"id": "6844903859807059975", "title": "前端打包混编压缩js代码，如何不重新打包，修改js文件内部配置参数？", "desc": "1.多线程方法2.配置外部配置文件3.内部js利用worker调用调用配置文件4.部署后，生产环境config.js文件位置5.使用"}, {"id": "6844903845433180174", "title": "我在vue开发中的小技巧", "desc": "或者是使用promise等es6的方法，但是我们的需求是在Android4.4上面完美运行。这样就会出现includes is not undefied等错误提示。如果看了我之前谈到webpack的文章就会疑问：我们之前不是用了babel插件用来转成es5了呢？我当时也疑问了好…"}, {"id": "6924521091914776584", "title": "Vue3 + Electron 开发图片压缩桌面应用", "desc": "现在我们就可以在页面引入electron、path等node模块了，使用 window.require(\"electron\")引入。 样式略..."}, {"id": "6844904191240962061", "title": "[初探] proxy 的优势与使用场景", "desc": "随着 vue3.x 的消息越来越多，proxy 的讨论也越来越多。相对于 Object.defineProperty ，proxy 有什么区别，有什么优势，以及可以应用在什么地方。该文章就简单的介绍下 讲 proxy 之前，先回顾下 Object.defineProperty …"}, {"id": "6999558553472073758", "title": "【前端--面试】常见面试题（八）—— Vue", "desc": "又迎来了新的一周，八月就要快过去了，金九银十的季节仿佛近在咫尺，不知道要跳槽的同学准备的如何了，今天就整理Vue的知识点吧~"}, {"id": "6844903735668244488", "title": "加快Vue项目的开发速度", "desc": "Webpack是实现我们前端项目工程化的基础，但其实她的用处远不仅仅如此，我们可以通过Webpack来帮我们做一些自动化的事情。首先我们要了解require.context()这个API 不要困惑，接下来我们来探讨在项目中怎么用。 对于Vue中的路由，大家都很熟悉，类似于声明式…"}, {"id": "6844904170839900168", "title": "Vue+ Node全栈开发仿王者荣耀手机端官网/后台管理「更新」", "desc": "本项目是一个移动端的仿王者荣耀手机端官网和后台管理系统（pc端）的全栈开源项目，基于 vue + node (Express + ElementUI) +mongodb实现。部署在阿里云服务器，本项目使用了最新的Vue全家桶技术栈，后台数据通过node+mongodb搭建。 p…"}, {"id": "7002873256470396959", "title": "vue中的虚拟dom和diff算法", "desc": "虚拟dom和diff算法，以及diff算法的核心，如何进行比较，比较的规则，更新的规则，新旧节点的比较"}, {"id": "7006226317481902116", "title": "vue - 双向绑定", "desc": "2.x通过defineProperty来劫持一个对象，通过里面的get，set方法可以操作获取或者赋值时的操作 无法监听数组索引和长度发生变化的 但是兼容性比proxy强 会修改源对象，因为是引用 v"}, {"id": "6997561064049082398", "title": "提供可制定化的路由加载方式，Vue 如何做到？| 小智内部团队分享", "desc": "背景 在开始之前，先介绍一下我们目前新项目的采用的技术栈 前端公共库： vue3 + typescript + jsx + antdVue 后台项目：vue3 + typescript + jsx +"}, {"id": "6994060677316870152", "title": "vue3在项目中的逻辑抽离和字段显示", "desc": "“这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战” 逻辑分层 将各个区域业务分开 这样做的优势 这样的场景应该如何处理 优化 reactive 不一定非要写在setup函数中 如何在页面上"}, {"id": "6994705971989708807", "title": "恶心的修饰符，记不住啊", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 1.事件修饰符 Vue提供了事件绑定的语法糖，我们在标签中可直接使用形如v-on:click，@click，@focus的形式绑定事件监听"}, {"id": "6989116182120890404", "title": "vue中$attrs属性的使用", "desc": "vue中有很多属性，在使用的时候会有些地方需要注意的，按照官网的文档说明，做了一些测试，希望对你有用。"}, {"id": "6974677073453383687", "title": "WangEditor 富文本編輯器", "desc": "WangEditor 富文本编辑器 之前使用的是vue-quill-editor 但是此编辑器，无法展示表格，故使用此编辑器"}, {"id": "6844904002526642184", "title": "Vue前进刷新后退不刷新，简易页面堆栈实现", "desc": "现在有一个小商城，从首页（Index）可以进入商品列表页面（List），这个List是一个无限列表，现在用户往下翻，看到某一个商品似乎比较喜欢，于是点击进入到商品详情页面（Info），看完后觉得比较满意。恩，但是货比三家嘛，于是用户返回商品列表页面，准备继续往下浏览，这时如果你…"}, {"id": "7000298964830388254", "title": "vue3.0之加深印象", "desc": "原因：对vue3.0不熟悉，因此需要加深印象 响应式基础 声明响应式状态 reactive 要为 JavaScript 数组或对象 创建响应式状态，可以使用 reactive 方法： reactive"}, {"id": "7001138300178137118", "title": "正确使用externals，vue工程构建性能提升67%", "desc": "webpack性能优化中必不可少的一环就是externals，本文详细阐述externals的使用场景以及如何使用"}, {"id": "6994046166245572615", "title": "Element 2 组件源码剖析之Avatar头像", "desc": "组件Avatar用来代表用户或事物，支持图片、图标或字符展示。 本文将深入分析组件Avatar 源码，剖析其实现原理，耐心读完，相信会对您有所帮助。"}, {"id": "7005891246904311839", "title": "vue双向数据绑定", "desc": "1. 原理 vue的双向数据绑定主要是通过Object对象的defineProperty属性，重写data的set和get函数来实现。 vue是采用数据劫持结合发布者-订阅者模式的方式，通过Objec"}, {"id": "6982112944863576100", "title": "Vue 代码 AST 转换升级实战 —— vue-router 篇", "desc": "前言 最近我们发布了《阿里妈妈又做了新工具，帮你把 Vue2 代码改成 Vue3 的》这个 Vue2 升级工具，下面跟大家分享下我们如何利用GoGoCode对 VueRouter 进行代码升级的。 V"}, {"id": "6996266362590986270", "title": "面试题-Vue篇", "desc": "1. Vue的生命周期（必背） 2. Vue的通信方式有几种？隔代组件通信方式用哪种方式解决？（必背） 3. Vue常见指令有哪些？（背一些） 4. V-if和V-show的区别？（必背） 5. 谈谈"}, {"id": "7000718078333943844", "title": "Vue 非父子组件传值", "desc": "在Vue的组件通信过程中，除了之前讲到的 父子组件通信，本文讲解一下 Vue 项目中的 非父子组件之间的传值方式"}, {"id": "7004638823237812255", "title": "Vue2+Vant2从Vue-cli4迁移到Vite2的实践", "desc": "自从尤大发布vite以后，就一直在关注，vite2的爆炸启动速度，不论是开发体验还是构建打包都更好。这里是把一个大约30+模块的移动端vue2项目从vue-cli迁移到vite。"}, {"id": "7005482672411639816", "title": "前端使用ASE加解密(AES/CBC/NoPadding)", "desc": "前言 最新因需求变动,原有Android系统已经不满足现有的需求,需开发PC端的客户端,对应的数据加解密也不能公用同一个类库(后端服务使用的JAVA),现有架构使用的是nodejs,所以记录以下加解密"}, {"id": "6963205355702583303", "title": "4 个 Vue 路由过渡动效", "desc": "Vue 路由过渡是对 Vue 程序一种快速简便的增加个性化效果的的方法。 可以让你在程序的不同页面之间增加平滑的动画和过渡。如果使用得当，可以使你的程序显得更加专业，从而增强用户体验。 本文中会先介绍"}, {"id": "6992831921747132446", "title": "⚙️ Vue3 传送门组件用过都说好 ⚙️", "desc": "在实际项目开发中，我们常常会封装一些常用，复用性高的组件，例如全屏`loading`、模态框等组件，到这里有的同学就联想到了这些组件的显示层级（`z-index`）都要比平常页面组件要高。"}, {"id": "7005082862344994846", "title": "vue3的Watch监听事件的使用", "desc": "一、watch的使用 参数说明： WatcherSource: 用于指定要侦听的响应式变量。WatcherSource可传入ref响应式数据，reactive响应式对象要写成函数的形式。 Callba"}, {"id": "6861725116389130254", "title": "学习Vue3.0,先来了解一下Proxy", "desc": "据悉Vue3.0的正式版将要在本月(8月)发布，从发布到正式投入到正式项目中，还需要一定的过渡期，但我们不能一直等到Vue3正式投入到项目中的时候才去学习，提前学习，让你更快一步掌握Vue3.0,升职加薪迎娶白富美就靠它了。不过在学习Vue3之前，还需要先了解一下Proxy,它…"}, {"id": "6937939870018961439", "title": "Vue 虚拟列表，纵享丝滑【实践篇】", "desc": "现如今，我们总是在无止境的刷。刷微博、刷抖音、刷沸点......一次次丝滑下拉体验的背后却是前端攻城狮的用心。 本篇讨论基于 Vue.js 的列表无限下拉实践。 我们的目标就是：让列表下拉纵享丝滑，而不是像以往的下拉就 loading 等待的体验。 咱还是用 Vue CLI 来…"}, {"id": "6945601440064733198", "title": "京东 vue3 组件库震撼升级，如约而至！", "desc": "弃用 webpack，引入下一代前端构建工具 Vite。启动速度由原来 30s 提升到 500ms 左右，将大幅提升开发效率。 NutUI 3.0 使用 TypeScript 作为主要开发语言，在前端应用复杂度不断飙升的大背景下，应对组件不易维护且难于扩展的问题。 面对不断生长…"}, {"id": "6869521076771094536", "title": "Vue3.0来袭，你想学的都在这里（一）", "desc": "近期工作感觉很忙，都没有多少时间去写文章，今天这篇文章主要是将自己前期学习Vue3.0时候整理的一些笔记内容进行了汇总，通过对本文的阅读，你将可以自己完成Vue3.0环境搭建，同时还会对Vue3.0的一些新的特性进行了解，方便自己进行Vue3.0的学习。 在前面的文章中，我们通…"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "6998817961129721893", "title": "Vue3从0到1组件开发-系统组件：Steps步骤条", "desc": "缘何 前面的几篇关于系统组件的文章可以在专栏中看到，这几个组件在如今的前端开发中可以说是必不可少的常见组件。 而Steps步骤条这一组件相"}, {"id": "6998028941780844581", "title": "如何在富文本中插入表情，word文档，及数学公式？", "desc": "校外培训迎来下岗潮，教育行业的小伙伴，大家过的还好吗？不过话说回来，技术过硬，你在哪里都是最靓的仔。今天就给大家补充一点弹药，如何在富文本中插入表情，word文档，及数学公式。"}, {"id": "7002794121576316964", "title": "全面介绍一下vuex，快到碗里来~这是一个系列博客（三) ", "desc": "vuex之Actions异步修改状态 actions和前面博客中的Mutations功能基本一样，不同点是，actions是异步的改变state状态，而Mutations是同步改变状态。 在store"}, {"id": "6995700436502069256", "title": "这7个 Vue 模式，可能你经常用！但现在看对你很有帮助！", "desc": "说实话，阅读文档并不是我们大多数人喜欢的事情，但是当使用像Vue这样不断发展的现代前端框架时，每一个新版本都会有所变化，我们很有可爱已经错过了一些后来推出的新且好用的功能。"}, {"id": "7005106444714377230", "title": " Vue中常用的工具函数", "desc": "前言 本文记录了一些Vue项目中常用的工具函数，为了工具函数的统一管理，统一将这些函数放到src目录下的utils文件夹里 一、自定义聚焦指令 1、方式一 mouted周期，ref+querySele"}, {"id": "6994462804740669477", "title": "Vue3从0到1组件开发-布局组件：List列表", "desc": "列表是web展示中常见的组件，那么针对不同情况的布局，如果用一个组件完成差异化的处理呢？来这里看看吧"}, {"id": "7005098527260934181", "title": "vue 系列 -- computed，methods，watch 的区别", "desc": "使用方法 computed 目的：计算属性 示例： 注意： 计算属性的结果会被缓存，计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 a 的值没有"}, {"id": "7002794004630732813", "title": "全面介绍一下vuex，快到碗里来~这是一个系列博客（二) ", "desc": "# 全面介绍一下vuex，快到碗里来~这是一个系列博客（一) vuex之Mutations修改状态 学习了怎么读取State, 学习一下怎么样修改状态, 如何操作Mutations. Vuex提供了c"}, {"id": "6978474642562351117", "title": "5个用于测试Vue.js应用程序的有用工具和库", "desc": "在过去的几年中，Vue.js已成为最受欢迎的Web应用程序框架之一，考虑到它的灵活性、易用性和生产力，这并不令人惊讶。但是，如果你未正确测试应用程序，那么这些都不重要。 无论你想做什么类型的测试，选择"}, {"id": "6991288553305014280", "title": "Vue3从0到1开发组件前戏（上）：One piece｜8月更文挑战", "desc": "换个角度再认识一次Vue，简介一些Vue2到3的主要改变。另外作为自己第一个专栏的第一篇文，介绍下未来要做的东西。"}, {"id": "6916791806931763208", "title": "如何实现一个检测vue单文件template是否有合并冲突的webpack插件(兼容vue2和3)", "desc": "前面react的文章实现了如何在打包模式下检测render模板中是否有遗留的合并冲突代码。vue也可以吗？ 答案是肯定的！只是实现的思路以及方法从babel插件变为了webpack插件。 上偏文章说过了，react中的jsx其实最终都是会被babel编译成react.creat…"}, {"id": "6844903619796402190", "title": "wepy+weappx开发小程序遇到的坑以及解决方案", "desc": "从小程序的发布，到现在已经有一年多的时间了，从当时信誓旦旦的要替代APP，到近期实现了APP和小程序互跳的功能，定位也悄然变为APP的一个补充，都是现实给逼的，就像当时卸载了摩拜和美团的APP，觉得只用小程序就行的同事，最后都又把APP装了回来，为什么呢？因为小程序只是实现了原…"}, {"id": "6844903615799230477", "title": "iview组件轮子。可能是你想要的二级城市多选。", "desc": "不多说先看效果。 再来几张静态图。 需要说明的是，这是一个基于iview提供的 checkbox 和 poptip 组件封装而成。 area组件在项目 src/components/ 目录下，包括 area-source.json、area-producer.js、area.v…"}, {"id": "6844903665170382856", "title": "Hello Vue: Vue快速入门教程", "desc": "Vue快速入门教程，此教程包括使用Kendo UI for Vue的组件。希望通过此教程能够成为你学习vue的一个很好的起点。这其中还包含一个可扩展的事例，如果你感兴趣可以深入学习下去。 本教程针对的是第一次使用Vue资源管理器。我将向您展示如何使用Vue创建一个简单的示例，然…"}, {"id": "6844903721034317832", "title": "Typescript版本VUE+组件封装+最简单的策略模式，地址选择", "desc": "去年做的公司项目，最近再从做升级2.0版本。因为需求是用户需要填写五级地址，从省到你家的自然村。 之前一个项目做过，因为在整个项目中只用到了一次，也没去封装。 如果不想看文章的可以直接去 gayhub 代码就在这里。 我们先分析一下需求。 组件注册 注册组件这个必然的。 $em…"}, {"id": "6854573222487130125", "title": "对比 Vue 和 React 的差异", "desc": "我想很多人和我一样, 先学会了 Vue 或者 React, 然后再去学另外一个, 但是突然发现两者的实现在思维上还是有很大差异的, 然后就开始嫌弃另外一个语言, 觉得哪哪不如我先学的这个. 我在学习了 Vue 之后再去学习 React 的. 发现如果能找到两者的相似和差异之处,…"}, {"id": "6844904154461126670", "title": "Vue CLI 源码探索 [六]", "desc": "Vue CLI 源码探索 [六] 探索下 Vue CLI 的插件机制，内容较多，请慢慢看。涉及如下插件（@vue/cli-plugin-vuex/router/babel/typescript/eslint） 台式电脑可以分为三部分，显示器、主机、键鼠，主机，内部再次拆分为主板…"}, {"id": "6972084343950802975", "title": "【转载】web前端学习分享-如何在vue中引入swiper及自动播放功能不能实现的问题", "desc": "原文链接：https://bbs.huaweicloud.com/blogs/197978 【摘要】 虽然swiper官方网站中的使用文档中有关于vue如何引入swiper的描述，但是在初次接触的过程"}, {"id": "6844903544886132750", "title": "vue2组件通信-使用dispatch和broadcast", "desc": " "}, {"id": "6930073899086872584", "title": "vue3源码分析系列之一 (createApp)", "desc": "首先是为了我自己在架构设计和程序设计上有一个更好的提升,以及对web更升入的了解, 在语法层面基本都ok的前提下,学习最优秀的源代码是最好的提升途径. 提升自己技术写作的能力, 我一直希望能用更简单易懂的语言传播技术,因为我也是前端技术的受益者. 如何分析优秀的代码,观察优秀代…"}, {"id": "6986914788815142949", "title": "Vue组件整理一", "desc": "组件说明 组件是可复用的Vue实例,可以把组件作为自定义元素来使用.组件可进行任意次数的复用. 组件的data必须是一个函数. 由于html不区分大小写,所以组件命名最好使用羊肉串命名法 通过Prop"}, {"id": "6916416698614710286", "title": "前端2021：vue3.0调试和环境准备", "desc": "clonevue-next仓库vuejs/vue-next安装依赖：安装项目的全部依赖源码目录vue3packages中存放着所有的源码；采用多包架构，在rollup打包时进行细分多包的方式打包；编译"}, {"id": "6844903671973543943", "title": "Vue-Router源码分析之install方法", "desc": "Vue.use方法会寻找插件上的install方法，并且执行，如果插件没有install方法的话，就会报错，无法使用use来注册插件。 用ES5的defineProperty的方式设置$router 与 $route属性。 对路由钩子进行一个统一设置（这块没看Vue.confi…"}, {"id": "6844903811589341198", "title": "VUE 项目：API配置、版本控制(V1.0方案)", "desc": "项目的api的baseUrl 需要灵活配置，不能打包在代码中。 项目需要写入版本号，用以保证用户的浏览器资源为最新。"}, {"id": "6844903652319035405", "title": "当 Vue 处理数组与处理纯对象的方式一样", "desc": "通过索引设置项，Vue 不能监测到。 修改数组长度时，Vue 也不能监测到。 我好像得到了字符串。 也就是说，当你尝试在页面输出一个变量时，JavaScript 会自动调用 toString() 方法。 数组成员里的 empty 在经过 JSON.stringify 后，转化成…"}, {"id": "6986889016285085732", "title": "vue watch用法 及 immediate和handler", "desc": "watch的一种简单的用法 ### 使用   deep   深度监听  （对象里面的属性值发生改变） 使用     immediate和handler 。 watch时有一个特点，就是当值第一次绑定的"}, {"id": "6844903897262194696", "title": "图文详解 vue diff 核心方法 updateChildren", "desc": "updateChildren"}, {"id": "6844903588699832327", "title": "vue实践02之vue-router", "desc": "本文主要参考技术胖老师的视频教程。 由于Vue在开发时对路由支持的不足，后来官方补充了vue-router插件，它在Vue的生态环境中非常重要，在实际开发中只要编写一个页面就会操作vue-router。要学习vue-router就要先知道这里的路由是什么？这里的路由并不是指我们…"}, {"id": "6903768303514583047", "title": "Vue源码解析系列(七) -- 模板tamplate在解析的时候做了哪些优化", "desc": "上一章Vue源码解析系列(六) -- 模板tamplate是如何解析编译的我们讲了tamplate经过parse函数解析，经过词法分析、语法分析生成了AST对象，那么我们这一章就来讲讲在解析编译过程中Vue机制做了哪些优化吧,我们知道Vue就是通过optimize函数进行静态打…"}, {"id": "6986828137724117022", "title": "vue 2.0基础汇总", "desc": "Vue 是一套用于构建用户界面的渐进式框架 1. 声明式渲染 文本插值 2.指令 自定义指令 3.动态参数 （:[]） 4.修饰符 5.监听与计算属性 （对象） 6.Vue能监听倒得数组方法 7.事件"}, {"id": "6844903799249862664", "title": "Vue2.0源码阅读笔记（一）：选项合并", "desc": "Vue本质是上来说是一个函数，在其通过new关键字构造调用时，会完成一系列初始化过程。通过Vue框架进行开发，基本上是通过向Vue函数中传入不同的参数选项来完成的。参数选项往往需要加以合并，主要有两种情况： Vue函数定义在 /src/core/instance/index.j…"}, {"id": "6947924535056433188", "title": "vite+vue+elementplus安装过程遇到的问题", "desc": "因为最近忙的差不多了，而且vite据说用起来很快，所以正好现在有空闲时间，所以就来尝试一下配置一下vite+vue+elementPlus。注：本文主要是用yarn来安装包，用npm或者cnpm的同学相对应的切换即可。 打开vite的官方文档，你会看到下面的图。vite中文官网…"}, {"id": "6988464658399100942", "title": "Vue全家桶简单实现 01", "desc": "VueRouter 简单实现。 Vue.use(Router)的时候内部会做什么事情？ 为什么要把router作为选项，设置到选项中？ router-link 为什么可以直接使用，而不需要注入？"}, {"id": "6884864961223327751", "title": "Vue响应式原理（二）Observer、Dep、Watcher", "desc": "改数据时，触发set，调用dep的notify方法通知所有watcher（订阅者）执行更新。"}, {"id": "6844903969119010830", "title": "从零实现支持洋葱模型中间件的 vuex", "desc": "刚开始看 redux 时候，reducer、store、dispatch、middleware 这些名词都比较难以理解，后面接触了 vuex 就比较好理解了。本章会从零开始实现一个简单版本的状态管理器。方便大家今后理解 vuex 和 redux 的状态管理库的源码 一个状态管理…"}, {"id": "6844904110127333389", "title": "Vue 2.x 源码解读系列《 Event 事件》", "desc": "这个初始化方法就是挂载一些常用的事件，比如：组件上的事件监听，组件里调用实例的 $emit() 方法，等等这些都是在 eventsMixin(Vue); 方法中完成。 在组件上监听事件有两个写法，一种是简写使用 @event 标识，一种是 v-on:event 标识。 执行一些…"}, {"id": "6844903574925901831", "title": "基于 mpvue 的 weui 框架", "desc": "mpvue 组件化开发"}, {"id": "6844903637534130183", "title": "【译】使用 Webpack 和 Poi 构建更好的 JavaScript 应用", "desc": "Webpack 是一个将你所有的 JavaScript 文件，图片、字库以及 CSS 等打包到一个依赖关系图的构建工具。这使得你可以在源码中使用 require() 来引用本地文件并且决定在最终的 JavaScript 包中如何处理这些本地文件代码。 Poi 是一个零配置的基于…"}, {"id": "6911310551184310285", "title": "Vue实战时用到的API(一)：$refs和ref", "desc": "这两个东西放在一起一看，很明了，总结来说就是我们通过$refs去调用ref注册的元素或者子组件，那这样有什么用呢？待我慢慢道来，我们先去验证下我们的结论，在这过程中或许我们就能清楚他们的用法了。"}, {"id": "6979022717538271245", "title": "快速入门vue组件", "desc": "初识vue组件应用，包括：1.实例化多个vue对象；2.全局组件与局部组件；3.父向子传值/传引用(props)；4.子向父事件传值($emit)；5.使用脚手架创建项目并运用组件and传值的案例"}, {"id": "6847902222949285901", "title": "从源码了解Vue生命周期", "desc": "Vue构造函数就只做了一件事，调用内部方法_init() , _init是混入Vue原型对象上的一个方法，我们继续往下看。 _init简要代码如下（已省略于本文无关代码）,记住_init里调用的方法也就大概能记住Vue实例化的过程了。这一步可以多看看 _init函数中，merg…"}, {"id": "6978849232102883341", "title": "Vue: 造轮子-04:Dialog组件", "desc": "Vue: 造轮子-04:Dialog组件 需求分析 点击后弹出 有遮罩层 overlay 有 close 按钮 有标题 有内容 有 yes / no 按钮 期望效果 支持visible属性 注意不要用"}, {"id": "6844903872650182664", "title": "vue/uni-app之空手撕日历", "desc": "js 中new Date('2019/06/21')传入一个日期，可以用来判断某个月是否有某一天。 没有的话，返回下一个月一号的构造函数；有的话返回这一天的构造函数；超出31号的则是Invalid。 这里在安卓App上面（webview），new Date('2019/06/2…"}, {"id": "6969958355200639013", "title": "作为一个vuer，为什么一定要知道composition-api", "desc": "Why Compostion-api？ 我们以前是怎么写vue的？ options-api 上面是信息，下面是表格。 同一个功能，放在不同的地方。当代码量一大，维护一个功能，得上下来回跳，而且很难确定"}, {"id": "6969921693032644638", "title": "基于MVVM模式手写实现Vue响应式~再也不怕面试考了", "desc": "现在面试中，只要技术栈中写到了Vue，面试官很可能问：“请说一下Vue实现数据相应式的原理，能手写一个初步的demo吗？”这篇文章，主要就是解决这个问题，希望你从此以后从害怕面到这题转为希望面到这题~"}, {"id": "6844903509788196872", "title": "Vue 服务端渲染 入门学习和注意事项（内含推荐文档）", "desc": "更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。 更快的内容到达时间(time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。 nuxt（官网提供框架。 后文会针对提供一些区分和注意点） 例如： assets、components、esl…"}, {"id": "6844903554499493901", "title": "基于vue开发活动页-路由相关", "desc": "首先介绍一下项目的背景，脱离了背景谈需求都在瞎逼逼，本次活动页是独立于主站项目(SPA)的新独立项目，但是由于对微信的强依赖，新项目还是需要挂在主域名下。 这有啥的，让运维同事帮忙配个nginx把主站的某个路径指向新项目目录就好呗~事实上确实是的，一开始配的域名是m.kuris…"}, {"id": "6844904025700335624", "title": "[Nuxt 系列 06] 不停机更新：基于 PM2", "desc": "上一篇文章中的做法（监听所有 nuxtdist/* 下的文件变更），其弊端也就在于此，pm2 因为大量文件变更而频繁重启项目，造成了长时间的空档期（502 状态）。那就不要再监听 nuxtdist/ 文件夹下的文件不就可以了？ 在项目根目录下增加该文件，目的是想通过它来实现一定…"}, {"id": "6884490483624574990", "title": "Vue3 响应式原理剖析", "desc": "上面的案例就是对 ref 的一个简单实现了，其实已经能够很好的表示 Vue3 在源码中对 ref 的实现逻辑了。 ref 在源码中会对传入的数据进行类型判断，如果判断为对象数据类型会使用 reactive 去进行响应式分装的，否者会使用 RefImpl 的 get,set 方法…"}, {"id": "6844903810247327751", "title": "vue 脚手架 配置 及文件介绍 2.0 版本", "desc": "作用 : vue-cli 提供了一条命令, 我们直接通过这条命令就可以快速的生成一个 vue 项目 (vue init XX) 。 运行时模式 : 用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。 编译器：用来将模板字符串编译成为 Ja…"}, {"id": "6933422876062121992", "title": "SpringBoot+Vue豆宝社区前后端分离项目手把手实战系列教程06---推广信息模块实现", "desc": "本项目实战教程配有免费视频教程，配套代码完全开源。手把手从零开始搭建一个目前应用最广泛的Springboot+Vue前后端分离多用户社区项目。本项目难度适中，为便于大家学习，每一集视频教程对应在Github上的每一次提交。"}, {"id": "6844903678206279688", "title": "WEB实例：开发一个聊天室应用", "desc": "这篇文章介绍如何使用 Vue.js 以及 chatkit 快速的开发一个聊天室应用，chatkit 提供了一系列 api 用以更方便的开发聊天功能，源码地址. yarn add express cors pusher-chatkit-server 启动服务。 开发完成后，使用 …"}, {"id": "6844903889137827848", "title": "【Vue 牛刀小试】：第十六章 - 针对传统后端开发人员的前端项目框架搭建", "desc": "在之前学习 Vue 基础知识点的文章中，我们还是采用传统的方式，通过在 html 页面上引用 vue.js 这个文件，从而将 Vue 引入到我们的项目开发中。伴随着 Node.js 的出现，以及 React、Angular、Vue 这类的前端 MVVM 框架的发展，前端越来越像…"}, {"id": "6844903941721980936", "title": "vue的渲染过程", "desc": "Vue的模板编译在$mount之后，通过compile方法，经过parse、optimize、generate方法，最后生成render function来生成虚拟DOM，虚拟DOM通过diff算法，来更新DOM。 在了解 parse 的过程之前，我们需要了解 AST，AST …"}, {"id": "6911260158547116045", "title": "源码探秘 - Vue 3.0 响应式原理解析", "desc": "前情提要：在 Vue3 初始化 的过程中，我们在 setupStatefulComponent 中留下一个 TODO 坑：Reactive，介绍到：在这里会初始化响应式。 我们把断点打在 reactive 函数调用这里，看一下调用堆栈的情况，回顾 Vue3 初始化 过程，来衔接…"}, {"id": "6844903926840442893", "title": "vue源码学习-引入Vue时，Vue做了什么", "desc": "Vue.js作为我们当今前端开发中最常出现的框架之一，其受到了许多前端开发者的喜爱，为了更深入的了解其中的原理，来学习一下其实现机制。 从上述代码中看到，initGlobalAPI(Vue)这句代码就是我们的核心入口了。 代码中首先先定义了一些基本的配置信息，同时不允许后续的修…"}, {"id": "6907503717755387911", "title": "vue3源码分析一   首次渲染流程", "desc": "看到个字符串，是一个很像函数的字符串，是的，这个字符串是可以作为参数，通过new Function转成真正的函数。从函数体大概可以了解到里面的逻辑：_createBlock函数处理div标签，第三个参数是div里面的东西，使用_toDisplayString函数处理,里面包含变…"}, {"id": "6919245601284554760", "title": "Vue文件转Dom", "desc": "以上代码仅仅为一个简单的例子，如果页面弹窗结构以及内容复杂可想而知开发以及修改的困难成倍增长。 返回 Vue 实例使用的根 DOM 元素。 代码逻辑统一，可阅读性强。 可拓展性、可复用性强。 需要将项目的运行时构建更改为独立构建,性能消耗有所增加。"}, {"id": "6915203368084307982", "title": "Vue + TypeScript 实战项目（三）", "desc": "本系列将从零开始创建一个项目，文章将持续更新项目代码：https://github.com/no-pear/edu-fed.git登录和认证一、登录1）页面基本布局2）登录接口封装3）登录处理表单验证"}, {"id": "6905729933558874119", "title": "跳转同一路由但是参数不同，组件不刷新的问题", "desc": "不同的MV都是用到MV详情组件，只是根据不同MV的id，路由不同，组件中渲染的内容不同而已。 当我在一个MV的详情页面，通过里面的相关推荐去到另一个MV中时。 正常来讲应该是当前我的路由是/mv/details?id=123456,点击另一个MV则路由变为/mv/details…"}, {"id": "6844904100719493134", "title": "以一个🌰梳理Vue 更新流程", "desc": "Vue 如日中天，几乎每一个Web 开发者都知道Vue 是通过Object.defineProperty 对数据劫持以达到响应式处理，通过发布订阅模式进行事件处理，通过key 确保元素状态复用... 针对这些知识点，通过一个例子进行梳理。俗话说，“光练不说傻把式”，那么进行一次…"}, {"id": "6844903710217371656", "title": "【Vue.js 牛刀小试】：第五章 - 计算属性与监听器", "desc": "在 Vue 中，我们可以很方便的将数据使用插值表达式（ Mustache 语法）的方式渲染到页面元素中，但是插值表达式的设计初衷是用于简单运算，即我们不应该对差值做过多的操作。当我们需要对差值做进一步的处理时，这时，我们就应该使用到 Vue 中的计算属性来完成这一操作。同时，当…"}, {"id": "6899688435657900039", "title": "你不知道的vue3 ♥", "desc": "dynamic-directive-arguments由于指令参数是静态的，因此当前用户将不得不想把属性以及方法用动态的体现treeshaking随着vueapi的增长，官方一直在努力平衡功能以及减少"}, {"id": "6844904126250221576", "title": "Vue框架事件声明、创建、绑定的详细过程", "desc": "Vue框架相比于React框架，提供了模板的功能，而模板与HTML代码极为相似，这使得我们可以花费很少的时间从原生到Vue框架的过渡，这是Vue的优点之一。不过模板到处理的时候只是一个字符串，而不是真正的HTML代码。所以如果我们以原生的方式来对节点进行监听的话，很可能会出…"}, {"id": "6844903554516254727", "title": "组件的划分", "desc": "本篇主要来聊一聊组件的划分的那些事。现在的前端开发，都是围绕着组件展开的。我们逐渐意识到，理解组件化的含义，清楚组件划分的规则至关重要。如何做到组件与组件之间的耦合度尽量的小，如何完成子组件和父组件的划分，或许，是我们开发一个优秀的系统前，需要去认真思考的问题。 本篇文章主要使…"}, {"id": "6844903608723439629", "title": "你也许不知道的Vuejs - 状态管理", "desc": "好了，言归正传，今天来聊聊 Vue.js 中的状态管理，也许一提到状态管理，大家首先想到的就是 vuex，但是如果你的应用够简单，其实是不需要使用 vuex 的，反而会让你的项目变得繁琐起来。 下面我将分别实现一遍。 所以大家在写代码的时候会尽量的避免此类事情的发生，但是也正是…"}, {"id": "6844903864219467784", "title": "vuepress主题改造-标签云的改造(2)", "desc": "上一章已经讲了 vuepress 主题如何实现继承，这样我们可以任意修改默认主题的任何组件及样式了。我们知道 vuepress 是无法自动根据我们 markdown 文件中的 我这样配置的原因是 nav 是给头部目录添加菜单，tags:\"/tags\"是定义标签路由路径，这样不管…"}, {"id": "6870315059189383176", "title": "Vue 知识点汇总", "desc": "1.HelloVue安装2.理解Vue的设计思想3.模版语法插值文本列表渲染表单输入绑定事件处理class与style绑定计算属性与侦听器5.生命周期特殊点：6.组件基础插槽分发动态组件组件化理解7."}, {"id": "6977648865541357581", "title": "使用Vue.js组成API的首页滚动商店", "desc": "在这个系列中，我们已经探索了各种官方和DIY的商店解决方案。在这个系列的最后，我们将看一下使用Vue 3的组成API的家庭卷的解决方案。 在我们继续之前，如果你还没有读过本系列的前几篇文章，我鼓励你回"}, {"id": "6844904158328258568", "title": "初识Vue 尝试理解vue API的第一天", "desc": "Vue实例的数据对象.Vue将会递归将data的property转换为getter/swetter,从而让data的property能够响应数据变化.对象必须是纯粹的对象(含有零个或多个key/value对) 浏览器API创建的原生对象, 原型上的property会被忽略.大概…"}, {"id": "6953489469651730462", "title": "[vue源码笔记06]vue2.x的全局方法", "desc": "本文将对常用的Vue全局静态方法做简单的介绍，了解其基本用法和原理：Vue.use/mixin/extend/component/directive/filter"}, {"id": "6897508381561454600", "title": "Vue中Watcher的简要说明（3）", "desc": "前文提到了Observer类和observe过程，由于遇到的场景简单，暂时没有去使用Observer类来解决问题。通过observe过程的子过程observeObject和observeArray来特殊处理引用类型的可观察拦截。结合使用Vue的经验，假设有关于数组类型数据arr…"}, {"id": "6844903911912898573", "title": "【Vue原理】Compile - 源码版 之 generate 节点数据拼接", "desc": "如果你觉得排版难看，请点击下面链接或者拉到下面关注公众号也可以吧【Vue原理】Compile-源码版之generate节点数据拼接上一篇我们讲了不同节点的拼接，这一篇需要详细记录的是节点数据的拼接节点"}, {"id": "6923941923485859847", "title": "Vue.js源码学习——Vue对象在data中定义的属性为什么可以直接通过this.xxx访问？", "desc": "我们在Vue对象中可以通过this.xxx去访问Vue中data对象中定义的数据，但是为什么可以直接使用this.xxx来访问呢？我们可以用过看源码的方式来进行理解。 当我们使用new的方式创建一个Vue实例的时候，实际上调用的是一个Vue的方法。 初始化的时候，Vue方法中主…"}, {"id": "6844903641367707661", "title": "MVVM机制浅析", "desc": "来公司一年多了，接触了angular，vue这两种主流的MVVM框架，之前一直没有去思考其实现的原理，但框架其实也是用基础的js方法实现的，所以还是很有必要去了解下其原理的，在这里简单的总结一下。 脏值检查: ng是通过脏检查的检测机制来对比数据是否发生了变更，来决定是否更新视…"}, {"id": "6844904115928039432", "title": "谈谈虚拟dom和diff算法", "desc": "我喜欢带着问题去学习一个东西。所以，在开始看这篇文章开始之前，我先问大家一个问题。 这里所说的解决的问题是和以前的开发模式比，在没有此类mvvm框架之前，我们主要是通过jquery来开发。通过jquery来开发个人感觉有两点不够友好 在涉及到频繁的操作dom时，性能不够好。我们…"}, {"id": "6923841533414211592", "title": "Vue进阶属性", "desc": "如果我们说directives的作用是为了减少DOM操作的重复，那么mixins就是为了减少data methods和钩子的重复。 举个例子：如果我们需要在每个组件上添加name和time，在created和destroyed时，打出提示，并报出存活时间，一共有五个组件。如果用…"}, {"id": "6943104523141398558", "title": "简单封装侧边可收起面板（Vue）", "desc": "在后台管理系统中，可能会有类似查看文章或其它文件读取进行操作等功能，本身后台管理系统页面除去侧边菜单栏的宽度后，剩余的可操作空间就变得比较少，当页面内存在文件列表查看文章等类似功能后，还需放置其它内容时，空间就十分不足了。 如果侧边类似文件列表的内容在进行其它操作时不需要展示，…"}, {"id": "6924129899305238536", "title": "vue学习笔记之组件篇", "desc": "1. vue组件生命周期图 2. 组件生命周期函数 刚初始化了一个空的实例对象, 这时候只有默认的一些生命周期函数和默认事件, 其他都未创建。 生命周期函数补充：activated和deactivated函数，这两个生命周期函数是在组件实例被保持了状态使用了keep-alive…"}, {"id": "6844903576959975437", "title": "Vue-rap 构建基于 Vue 的流应用", "desc": "前几年前端还是html+css+js简单的配合,还记得那几年公司招前端要求很低,工资开的也低,前端需要学习的东西很低,一个新人(特别是刚出来的应届毕业生)只需要简单的培训下就可以快速进入公司前端的工作"}, {"id": "6844904196844552205", "title": "学习vue源码（16）初探生命周期之各阶段都在干嘛", "desc": "每个Vue.js实例在创建时都要经过一系列初始化，例如设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等。 同时，也会运行一些叫作生命周期钩子的函数，给在不同阶段添加自定义代码的机会。 Vue.js生命周期可以分为4个阶段：初始化阶段、模板编译阶段、挂载阶段、…"}, {"id": "6844903680567672845", "title": "Web 应用中的撤销与重做", "desc": "Web 应用中的撤销与重做，很容易想到富文本编辑器，但本文不特指富文本编辑器，而是更具有普遍意义的 Web 交互应用。只要有用户操作发生的地方，就有可能出错，需要提供挽救的方法。在富文本编辑器里，用户的操作就是编辑文本内容，document.execCommand 能实现最基本的"}, {"id": "6844904196882333704", "title": "学习vue源码（19）四探生命周期之初始化props", "desc": "前面文章已经 把 created钩子函数触发前，beforeCreate触发后 的initInjections和initProvide讲完了，现在开始讲 initState的props部分。 如代码所示，这一部分，也是created钩子函数触发前，beforeCreate触发后…"}, {"id": "6844904042217340935", "title": "理解vue数据驱动", "desc": "vue是双向数据绑定的框架，数据驱动是他的灵魂，他的实现原理众所周知是Object.defineProperty方法实现的get、set重写，但是这样说太牵强外门了。本文将宏观介绍他的实现 示例中msg初始值为hello，因此页面渲染时为hello，一秒之后，msg变为了hi，…"}, {"id": "6905305340108079118", "title": "正确姿势教你在vscode上发布适用于团队的代码片段拓展", "desc": "简单来说这就是快捷生成代码片段。 然后CV一下代码大功告成。"}, {"id": "6913928097653850126", "title": "(四)vue3之key值绑定", "desc": "我们知道，key值在vue中是非常重要的，可以在dom diff中提高dom的可复用性。那么在vue2和vue3中的使用有什么不同呢？"}, {"id": "6844903892178698247", "title": "virtual-dom 梳理分析【diff 算法】", "desc": "上一篇介绍了VD的是怎么创建VD Tree的和怎么根据VD Tree生成真实的DOM。上一章链接。 这一章主要是来梳理当我们的VD有变化的时候，它的diff算法是怎么去比较生成一个diff对象的。 Diff 算法是 VD 中最核心的一个算法。通过输入初始状态状态A（VNode）…"}, {"id": "6844903877750292487", "title": "【Vue原理】Directive - 白话版", "desc": "当然了，其实你只要了解它是什么时候触发的，就完全可以用在项目。但是我们是不会满足于此的，我要知道他是怎么触发的，怎么调用到我设置的钩子的 首先，Vue 在绑定了指令的DOM 创建之后，插入页面之前，对一些DOM 本身的事件或者属性等进行处理。 因为inserted 需要在 节点…"}, {"id": "6844903516985622536", "title": "Vue 升级小记", "desc": "最近接手了一个 Vue 1.0 的陈年老项目，需要将其升级到Vue 2.0。下面记录一下升级过程： 首先需要安装 vue-migration-helper CLI 工具： 控制台运行命令：npm install --global vue-migration-helperCLI …"}, {"id": "6904853717405663245", "title": "Vue3 从入门到实战 进阶式掌握完整知识体系", "desc": "Vue3从入门到实战进阶式掌握完整知识体系下载地址：百度云盘谁说为0基础准备的课，就一定浅薄？本课程带你轻松入门、深度掌握Vue3，夯实前端硬技能。课程从Vue3基础语法，到组件原理，动画，代码设计，"}, {"id": "6844904040598339598", "title": "分享一个 vue-admin-template 纯净版 ", "desc": "最近有空所以整理了一下之前的后台管理项目，觉得有必要分享一些有用的东西：扩展性高、代码提示更直观、新手更易看懂的起手项目。10 行代码一定比 100 行更易看懂，所以我选择写 10 行的代码。 对比开源项目 vue-typescript-admin-template 仿写的一个…"}, {"id": "6872992692268990478", "title": "VUE响应式原理", "desc": "通过Object.defineProperty去劫持data里的属性，将data全部属性替换成getter和setter，配合发布者和订阅者模式，每一个组件都有一个watcher实例，当我们对data属性赋值和改变，就会触发setter，setter会通知watcher，从而使…"}, {"id": "6969370423867736072", "title": "Vue.js 源码 （1）——如何开始学习", "desc": "前言 最近在看 vue.js 2.x 的源码，后面会陆续的写一些笔记和大家分享和学习。 前置条件 Flow Flow 是 facebook 出品的一个静态类型检查工具，它的语法和 Typescript"}, {"id": "6844903517426024461", "title": "vue插件开发练习--实用弹窗", "desc": "上回说了组件（vue组件开发练习--焦点图切换）的一个练习项目，这次换下口味，说下vue的插件练手的项目。相对于现在之前的焦点图切换的组件，这个可能就更简单了，基本就是熟悉下插件开发的步骤就可以了！这个项目，我更建议大家动手练习了，这个弹窗比之前的焦点图更加的实用性，也更常用。…"}, {"id": "6844904151227301902", "title": "利用vue-cli + vant搭建一个移动端开发模板", "desc": "在项目开发过程中，一个新的项目需要我们从零开始搭建框架，这个时候我们就可以用网上很多的脚手架进行开发，但是我们在业务开发时，还需要对项目的架构进行完善。如果有一个类似于ant design pro这种类型的项目可以拿来即用，不需要过多的配置，就可以进行开发的话，岂不是美滋滋。 …"}, {"id": "6970992514085945375", "title": "死磕系列之——Vue.js 核心原理", "desc": "死磕系列之——Vue.js 核心原理 前言 前端三大框架对比 框架 发布年份 出自 star数 特性 Angular 2010年 Google 73.7k 双向数据绑定 React 2013年 Fac"}, {"id": "6994301742225555493", "title": "Vue中下载文件", "desc": "VUE 一个按钮下载一个或多个文件 下载一个文件 下载一个文件时，用a标签点击即可实现 下载多个文件 下载多个文件时，需要将要下载的链接放到一个数组内"}, {"id": "6844903593334554631", "title": "面向Vue新人：用Vue写一个分页器", "desc": "最多时候有11个标签页，包括两个 ... ，但是它们不能点击，所以我也把例子里的页码设为11 首页和尾页都保留，第二个页码和倒数第二个页码都为 ... ，同时页面从当前页码位置向两侧算 从上面的思路来看，页码具体如何呈现由当前页码的位置决定，所以我们要在data里设置一个cur…"}, {"id": "6971211006479433741", "title": "尤大在 Vue的生态进展中提到的 <style> 动态变量注入是啥？", "desc": "在 Vue RFC 中有一个关于样式的提案 SFC style CSS variable injection，这个 RFC 为Vue开发者提供了一种使用组件的响应性数据作为CSS变量的方法。"}, {"id": "6912039389916823560", "title": "vue3递归组件的封装", "desc": "今天在写项目时，遇到一个自定义右键菜单的需求。在菜单中还有子菜单，所以这个时候就要用到递归组件了。所以写下这篇文章来记录一下自己编写递归组件的过程。 递归组件，顾名思义就是在组件本身内部调用自身。所以我们先构建一个组件，并在自身内部调用自身。常见的递归组件就是我们项目中经常会用…"}, {"id": "6860000229454790663", "title": "最全的Vue3.0升级指南", "desc": "本文将会全方位的介绍Vue3的新功能，新优化，新特性，以及升级指南。 Vue3重写了虚拟DOM的实现方法，初始渲染/更新可以提速达100%。 对于Vue2.x版本的虚拟DOM来说，Vue会遍历&#x3C;template>模板中的所有内容，并根据这些标签生成对应的虚拟DOM（虚…"}, {"id": "6844904081975148557", "title": "Vue全家桶 + vant + koa + mysql 仿移动端网易严选", "desc": "学习vue也有一段时间了，而且也想多练习练习写后端，所以想自己写一个vue移动端项目，于是前阵子就着手开始写了，到现在也算是写得差不多了。 前端运行在8080端口上，后端运行在3000端口上，前端使用axios进行接口请求，后端定义接口并使用koa2-cors解决跨域问题，使用…"}, {"id": "6993190688850444301", "title": "vue2源码解析(三) —— $mount", "desc": "我们在上一章vue2源码解析(二)分析了new Vue之后的初始化实例各种属性的过程，今天接着上文继续讲解$mount"}, {"id": "6844903749626888200", "title": "在VUE中使用RSA加密解密加签解签", "desc": "RSA加密算法是最常用的非对称加密算法，它既能用于加密，也能用于数字签名。"}, {"id": "6844904067580297229", "title": "在Vue中实现回车键切换焦点", "desc": "几乎在所有浏览器中，都具有 Tab 键切换焦点的功能。 但是任性的用户强烈要求一定要有 Enter 键切换焦点的功能。 为了交付上线拿到钱，我们只好再一次毫无原则性的接受了客户的需求。 在上一代人中，大多都有这种操作习惯。习惯把保存称为编辑，习惯用回车替换 Tab。这是受到微软…"}, {"id": "6981618447226503175", "title": "vue3 ts 获取组件 ref 实例", "desc": "在 vue3 中获取组件的类型： 在template中获取组件的ref tsx等render组件中获取的方式更简单 需要注意的是，如果使用expose暴露方法出去，无法获取到对应的类型，您需要自定义类"}, {"id": "6992470243427745800", "title": "有关VUE", "desc": "一、 vue组件传值之事件总线（EventBus） 初始化 其实事件总线就是vue的一个实例，也就是在这种情况下被称作为EventBus，让后将这个实例导出就可以使用了。定义如下： 淡然啦，我们也可以"}, {"id": "6973184053230960648", "title": "diff和虚拟DOM（附:手工图解，手工源码注释）", "desc": "snabbdom 介绍 Snabbdom 是一个虚拟 DOM 库，专注提供简单、模块性的体验，以及强大的功能和性能。由于vue2.x中的diff借鉴了snabbdom。所以我们在这篇文章以snabbd"}, {"id": "6987364726745333774", "title": "使用APICloud人人都能开发《表白神器APP》- 入门基础", "desc": "某一天，我被部门经理分配到一个项目上，项目经理就直接问我，会APICloud么？（有点点懵逼，这个好像听过，但是是个什么东西呀？）我答到：“可以学”，“嗯不错，那你先学习一周就跟着我去项目上开发“"}, {"id": "6992452565875032095", "title": "Vue实例中的this指向问题", "desc": "this指向问题的注意点很明确，普通函数就是谁调用它this就指向谁；箭头函数就是根据函数定义时，所在的父级作用域。但是有一个注意点是函数参数所处的作用域并不是函数作用域，而是其上级作用域。"}, {"id": "6987252921625018381", "title": "vue v-html事件失效？自定义指令有何不可", "desc": "> img标签中可以使用 @error 事件去处理图片地址，显示一些默认图片或者做一些其他的事情 ``` ``` ![在这里插入图片描述](https://p3-juejin.byteimg.com/"}, {"id": "6844903977352429575", "title": "15 分钟掌握 vue 3.0 函数式 api", "desc": "在分享 vue-next 各个子模块的实现之前，我觉的有必要比较全面的整理下 vue-next 中提出的函数式 api，了解这些的话，无论是对于源码的阅读，还是当正式版发布时开始学习，应该都会有起到一定的辅助作用。 类似的东西在网上有很多，只是会比较零碎，同时有些也相对过时了，…"}, {"id": "6844904205723893773", "title": "快速上手Vue3（支持TypeScript）", "desc": "目前两种方式没有提供TypeScript支持，目前我fork了vue-next-webpack-preview仓库做了基本TypeScript支持。 安装依赖即可使用。 如果您想使用vuex和vue-router可以使用这个老哥的仓库。"}, {"id": "6844904198539395079", "title": "打造一款适合自己的快速开发框架-前端篇之字典组件设计与实现", "desc": "后端篇的时候已经对字典模块进行了设计，相应的接口也已经完成。在前后端未分离的情况下，因为页面是由服务端渲染的，所以一般都会自定义一个字典标签用于对字典数据的取值、渲染。该种情况下，服务端很方便地对字典做缓存处理。前后端分离后，前端与后端都是通过接口进行交互的，所以维护字典的方式…"}, {"id": "6987205223991214117", "title": "关于Vue3在setup中调用接口加载数据赋值给变量后，数据没有响应", "desc": "关于Vue3在setup中调用接口加载数据赋值给变量后，return之后的数据没有响应。 接口获取的数据对象，需要遍历添加myArray数组中才可以更新到数据"}, {"id": "6844903560539275271", "title": "仿造网易云音乐轮播图", "desc": "这几天忙着毕业设计，其中一个页面需放上轮播图，遂听着音乐在网上寻(chao)找(xi)灵(an)感(li)，猛地发现原来网易云音乐客户端的轮播图就非常好看，所以就尝试着模仿了一个，虽然十分简陋，但好在也迈出了第一步。 轮播图的原理大家应该都知道，那让我再重复一遍(23333)，…"}, {"id": "6844903629904674829", "title": "vue+element-ui使用babel-plugin-component按需加载组件及自定义主题对应的scss样式", "desc": "不过也还是能够完成前端页面+后端接口+服务端部署的整个流程了。 如果不愿意看分析过程，可以直接拉到最后看结果。 首先前端页面使用了Vue作为前端开发框架，我相信点这个标题进来看文章的都用过这个框架的吧。。。 这是.babelrc配置参数，component是babel插件的名字…"}, {"id": "6844903862092955655", "title": "书写一个管理平台开发常用的通用table组件", "desc": "管理平台的表格页面一般包含这几部分功能：1.操作按钮（添加，批量删除等）；2.表格数据筛选项（常用的有select过滤，时间过滤，搜索过滤等）；3.表格主体；4.分页。 需求满足了，但是只是个妥协之计，该怎么在format返回的标签字符串上面绑定方法呢，如有想法，不胜感激，解决…"}, {"id": "6844903838416109582", "title": "【vue源码】深度理解v-for", "desc": "用来判断当前宿主环境是否支持原生 Symbol 和 Reflect.ownKeys。首先判断 Symbol 和 Reflect 是否存在，并使用 isNative 函数保证 Symbol 与 Reflect.ownKeys 全部是原生定义"}, {"id": "6992597438557061157", "title": "《图解Vue3.0》- 第2节 Vue项目搭建", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 第一步：安装vue-cli 检测是否安装成功 vue -V: 第二步：初始化项目vue create project-name 如果选择Ma"}, {"id": "6987003043267297317", "title": "细读Vue2.6.14 Core 源码(1):  入口", "desc": "细读Vue2.6.14 Core 源码(1): 入口 2021-07-20: Vue2核心代码的入口。"}, {"id": "6844903575747821582", "title": "像easyUI一样写vue——avue后台集成组件", "desc": "avue 是一个类似easyui那种去写vue的方案支持SSR(服务端渲染)和SPA(单例页面),全部基于json可配置化去开发界面，节约开发成本和提高开发效率，基本构成由 Vue.js 和 element。它使用了最新的前端技术栈，权限验证，第三方网站嵌套等功能，很多功能还在…"}, {"id": "6986984977233608718", "title": "一些vue实用小技巧总结", "desc": "抛开机械化的的cv操作，回顾一下自己的项目，跟着我静下心来总结一下一些常用的vue 使用小技巧吧~~"}, {"id": "6947646934211379231", "title": "【vue】什么是vnode hook？", "desc": "在对新旧vnode进行patch的过程中，在不同的阶段提供的一些访问vnode的钩子。vnode hook贯穿整个patch的过程， 像dom元素的属性、事件、class、style的更新，ref, 指令，transition都是通过vnode hook来实现的。patch方法…"}, {"id": "6985824388603969567", "title": "vue组件懒加载三种方式及区别", "desc": "1、vue异步组件 2、es6中import懒加载 3、require.ensure() resolve => require([''],resolve) import(/* webpackChunk"}, {"id": "6987300938985766942", "title": "Vue开发遇坑记--upload上传图片", "desc": "需求:想要上传图片后 同时给预览的图片生成一个名字+单选框，同时图片名字要求点击可以编写 👇 思路一、使用el-upload踩坑。思路二、原生input 然后v-for循环"}, {"id": "6981807850716823583", "title": "Vue3学习笔记：关于升级后的一些用法变动", "desc": "这是我参与新手入门的第1篇文章。 vue是我司项目开发使用的主要框架，，对vue3的学习也是迫在眉睫。此文主要记录在阅读vue3文档时发现的一些跟vue2不同的用法，以及此前的开发中未曾注意到的知识点"}, {"id": "6976924974971879432", "title": "mockJS的初始使用总结", "desc": "1.搭建测试项目 1.1创建项目 1.2安装依赖 2.mockjs使用 2.1testMock.js的使用 在testMokejs文件中引入mock： 3.json5的使用 3.1引入json5库来解"}, {"id": "6844903871941197837", "title": "安利一款基于element的大数据树形表格", "desc": "渲染树形数据时，必须要指定 row-key和isTreeTable属性， row 中包含 children字段。 支持子节点数据异步加载。设置 Table 的 lazy 属性为 true 与加载函数 load 。通过指定 row 中的 hasChildren 字段来指定哪些行是…"}, {"id": "6995572686776696840", "title": "【Vue2.x 源码学习】第三十九篇 - 组件部分 - 创建组件虚拟节点", "desc": "【Vue2.x 源码学习】第三十九篇 - 组件部分 - 组件的编译：组件编译流程介绍:html->render->vnode；创建组件虚拟节点:createComponent；"}, {"id": "6887759985242013709", "title": "vite一定能替代webpack吗？", "desc": "vite是尤大大在vue3发布的时候，使用的一个构建工具相信大家对vite的产生过程是相当的清楚了，现在就来深度的剖析下这个vite他究竟好在哪里，让尤大大这么用心的推广他vite是做什么的首先我们知"}, {"id": "6991405764275339295", "title": "vite2+vue3+vuex4+typescript4项目实战来了", "desc": "基于vite2 + vue3 + vue-router4 + vuex4 + less + typescript项目实战模板，vuex自动提示ts封装"}, {"id": "6861960532048642061", "title": "全面解析 vue3.0 diff算法", "desc": "4 用索引index做key真的有用？ 到底用什么做key才是最佳方案。 如果遇到这些问题，大家是怎么回答的呢？我相信当你读完这篇文章，这些问题也会迎刃而解。 在vue update过程中在遍历子代vnode的过程中，会用不同的patch方法来patch新老vnode，如果找到…"}, {"id": "6968361569952481316", "title": "21年前端实操项目-官网dy（你会在这里收获到不一样的细节点~）", "desc": "技术栈、开发思路、创新以及具体有记录性功能思路： 下拉栏组件， 轮播图组件，推荐产品组件，产品组件，图片懒加载，SSR迁移等。"}, {"id": "7004657172369899528", "title": "ant-design-vue antd-theme-webpack-plugin 动态改变主题", "desc": "Vue ant-design-vue antd-theme-webpack-plugin 动态改变主题"}, {"id": "7000765377139441701", "title": "保姆级别解析Vue3项目 #12#vue3前端青铜到黄金王者", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前篇我们建立一个vue3项目，大概展示了一下。 其实可以修改，我们再深度看看。 v 项目结构是什么？ vue cli架起vue项目如下： "}, {"id": "6989281607848820744", "title": "vue2 vue3 双向绑定对比", "desc": "背景 前几天被问到了关于 vue2 和 vue3 双向绑定这部分的区别，总觉得自己很熟悉，但是不能用言语表达。于是呼，希望通过这篇文章整理一下"}, {"id": "6994614956553404452", "title": "手把手教你实现vue数据双向绑定（下）", "desc": "在平时的工作中亦或者是出去找工作的时候，我们在面对面试官提出的：你了解`vue数据响应原理`吗？这样的问题时，我们就能爽快的回答：我了解啊，我还动手实现过一个呢~"}, {"id": "6981447256482283534", "title": "理解Vue的计算属性和监听器", "desc": "这次将通过从理解基本使用到模拟实现的方式来学习Vue3~~本文是本系列的第6篇，关于计算属性和监听器，一起来看看吧~~~~"}, {"id": "6844904131610542087", "title": "Vue3 Composition-Api + TypeScript  + 新型状态管理模式探索。", "desc": "Vue3 Beta 版发布了，离正式投入生产使用又更近了一步。此外，React Hook 在社区的发 展也是如火如荼。 这篇文章就从 Vue3 的角度出发，探索一下未来的 Vue 状态管理模式。 在组件的对象里面声明，使用场景的也很少，所以之前我也并没有往状态管理的方向去想。 …"}, {"id": "6995185609908158472", "title": "vue 递归组建", "desc": "这是我参与8月更文挑战的第11天，递归组件，顾名思义，就是自己的内部实现又调用自己的组件，我们一起学学吧"}, {"id": "6977516415758630926", "title": "模块化妙用！用vue3实现一个鼠标追踪器和异步加载组件", "desc": "周一最近学完 vue3 新特性，就想着用 vue3 来捣鼓点新的小工具。突然想到以前自己遇到的一个问题，想要获取当前鼠标点击的位置，但是以"}, {"id": "6889414644906065933", "title": "Vue组件间的通信 ☎️", "desc": "并且为了保证单行数据流，不会造成其他子组件使用到父组件传递过来的数据的异常，要求子组件是不能够修改props的数据的值（程序也会通过报错来告知我们）。 在子组件可以通过this.$parent来获取到父组件的实例，从而从实例上面调用子组件的属性或者方法！用法同上。 当我们的组件…"}, {"id": "6989504234026696735", "title": "Vue.js基础环境的搭建以及简单使用Element-ui", "desc": "Vue（2.x） Vue的环境配置 Node.js的安装 Vue的运行是依赖node进行的，所以安装Vue之前，要先去node的官网去安装node。安装结束之后可以使用下面的命令查看安装是否成功。 n"}, {"id": "6995099701649522725", "title": "Vue 源码（四）Computed 和 Watch 原理", "desc": "逐步分析computed和watch的初始化过程和更新原理。以及从源码层面分析computed和watch的区别。"}, {"id": "6983961596829646878", "title": "vuecomponent-seed —— 一个开箱即用的 Vue 3 组件库模板", "desc": "vuecomponent-seed 是一个 Vue3.0 组件库的“次佳”实践，旨在提供较好的开发体验，较为清晰、美观的文档，助力同学们快速启动组件UI库的开发。"}, {"id": "6997610344638054413", "title": "vue常见重点理解知识点", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 本文总结vue常见的重点的知识点便于日常的工作理解 持续更新中.... 1. v-for 与v-if的优先级 显然v-for优先于v-i被"}, {"id": "6992863276300238862", "title": "vue：五分钟，让你从0开始搭建国际化（多语言）vue-i18n", "desc": "五分钟，让你从0搭建国际化方案（多语言）vue-i18n，史上最简单国际化教程，适合新手，适合小白。"}, {"id": "7004758102465576967", "title": " vue项目实现国际化和全屏功能", "desc": "vue项目实现国际化和全屏功能 前言 Vue项目中如何配合elementUI做国际化操作呢？能不能自定义多语言配置呢？一起来看看实现的步骤吧~ 多语言国际化 一、国际化处理 国际化处理经常可以见到的场"}, {"id": "6844903807919325192", "title": "仿 vue-cli 搭建属于自己的脚手架", "desc": "从前我总觉得脚手架是个很高大上的东西，好像得牛叉🐂一点的人才写的出来，可望而不可即。其实并不是因为困难使我们放弃，而是因为放弃才显得困难（这是个好词好句🙈）。只要你肯花个一天半天的时间✊，也能写出属于你自己的脚手架。 早前脚手架这个词是从 vue-cli 这里认识的，我们通…"}, {"id": "7001343081467346952", "title": "Vue3 解析系列之数据响应式", "desc": "前言 在上一期 Vue3 解析系列中我们对 mount 挂载逻辑 进行了解析,本期对 数据响应式 进行解析"}, {"id": "6996106955097899039", "title": "如何引进 Typescript 到现存 Vue-cli3+项目中", "desc": "前言 在把项目改造支持 Typescript 之后, 跑了几个迭代,也踩了一些坑。还好这些坑总体可控， 没翻车， 所以就写篇文章分享一下， 如果想要体验 vue+typescript 的同学可以看看。"}, {"id": "6999252272475537421", "title": "vue-router原理解析", "desc": "一、vue-router原理解析 整体内容较长，需要一定的耐心，可以先理解大概思想再进行一个内容一个内容的突破。我们先从vue-router的基本使用开始讲起。"}, {"id": "7003627738464518175", "title": "template 模板是怎样通过 Compile 编译的", "desc": "Compile compile 编译可以分成 parse、optimize 与 generate 三个阶段，最终需要得到 render function。这部分内容不算 Vue.js 的响应式核心，只"}, {"id": "6964677053006217247", "title": "vue+element大型表单解决方案(2)--表单拆分", "desc": "从这篇开始，我就逐步去实现概览中演示的表单效果。平时我们写表单时，都是一个表单写一个组件，保存时使用el-form提供的validate方法进行校验，当任何一个表单项校验失败时，阻止表单提交；"}, {"id": "6977513378256257031", "title": "从手写 Vue 3 Reactivity 开始深入 Vue 3 源码", "desc": "本文将带大家从头开始学习如何实现简单版 Vue 3 响应式，帮助大家了解其核心，后面阅读 Vue 3 响应式相关的源码能够更加得心应手。"}, {"id": "6981270498889973796", "title": "Vue - The Good Parts: 组件", "desc": "组件基本上是现代 Web 开发的标配，在 Vue 中组件也是其最核心的基石之一。 Vue 在组件的这方面设计也是非常用心，开发者使用的成本可以说已经很低了，我们就一起来分析下，并学习其中的技巧和思想"}, {"id": "6999801672646000670", "title": "1x4 VueRouter - 基础 -  重定向 & 路径别名", "desc": "VueRouter 基础教程系列 🎉 重定向 重定向功能 需要在路由 routes 配置项中进行定义。 重定向的目标可以是一个路径，也可是一个命名路由或者别名。 redirect 属性也可以是一个方法"}, {"id": "6991959559145259045", "title": "Vue3 ref/toRefs 源码学习 | 8月更文挑战", "desc": "前言 准备一个 demo ref 根据 debug 进入到 ref 的源码发现里边调用了 createRef，在当前这个文件中有两个地方调用了 createRef ref 函数中 createRef("}, {"id": "7000912803079028750", "title": "[Vue源码]--Diff算法（逐行注释）", "desc": "案例+源码，彻底弄懂diff算法匹配节点及更新的规则，源码逐行注释方便阅读，diff算法旨在对旧节点进行最小的改动来实现与新节点的统一，通过key来复用节点，不能进行复用才进行增删改的操作。"}, {"id": "6929037868346621960", "title": "教你阅读vue源码的正确姿势", "desc": "1. 先整体 - 后细节 先弄清楚源码分为哪几个模块，整套流程是怎么将各个模块串起来的。 然后细化了解每个模块的核心原理。 2. 站在别人的肩膀上 推荐先读别人的源码简介，源码分析（推荐：Vue.js 技术揭秘），弄清楚脉络，还有每个部分的大概功能和核心流程。心里带着思路去看源…"}, {"id": "6844903848230780941", "title": "VUE防抖与节流的最佳解决方案——函数式组件", "desc": "解释：当持续触发某事件时，一定时间间隔内没有再触发事件时，事件处理函数才会执行一次，如果设定的时间间隔到来之前，又一次触发了事件，就重新开始延时。 案例：持续触发scroll事件时，并不立即执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发一次han…"}, {"id": "6845166890390667271", "title": "快速在你的vue/react应用中实现ssr(服务端渲染)", "desc": "我们都知道, Vue和React是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出自定义组件，进行生成 DOM 和操作 DOM, 也就是我们常说的客户端渲染, 并且我们大部分主流的场景都是SPA(单页面)应用, 而随着 SPA尤其是 React、Vue、Angular …"}, {"id": "6991395710889377799", "title": "vue el-table 表头搜索（筛选）功能 头部添加搜索icon 点击popover外时，关闭popover 自定义指令（二）", "desc": "在可以点击打开后 发现和antd还有什么不一样的地方 原来是在点击icon打开popover时，想关闭这个popover需要再次点击icon 这很明显不合理，更合适的方法是点击其它任何区域，都会隐藏这"}, {"id": "6993906401651195917", "title": "实现一个拖动旋转图片的安全验证器", "desc": "简单详细的讲解如何实现一个拖动滑块以旋转图片至正确角度，来验证用户是否为真人。文章底部包含完整代码链接奥~"}, {"id": "6918720683807604744", "title": "【七日打卡】 Vue项目架构团队自动化资产生成的管理思考", "desc": "在之前总结我对Vue项目团队开发的一些基本配置封装分享文章中，我们已经对大部分的常见封装都做出了处理，从API约定式到Model数据层，这类行为都赋予了项目更加自动化的处理方式，使团队前端工程师不需要关注生成，而只需要注意代码结果和代码质量，从而得到更多实践上得意义。 同时，对…"}, {"id": "6986874766476984334", "title": "【vue组件发布】el-table-draggable", "desc": "看名字就知道了，是让element-ui的table可拖拽的容器组件 项目地址 el-table-draggable 让vue-draggable支持element-ui中的el-table demo"}, {"id": "6844903816593145864", "title": "Vue中后台鉴权的另一种方案 - 动态路由", "desc": "案例:vue-element-asyncLogin2020-2-8更新优化流程,简化逻辑,去除_import.js文件,改为直接动态导入优化404页面2020-1-17更新更新为最新的vue-elem"}, {"id": "6844903553765474311", "title": "2017 年崛起的 JS 项目", "desc": "和 2016年 一样，又到了我们回顾 2017年 Javascript 领域发展与变化的时候。 通过对比各项目过去 12 个月在 GitHub 上新增 star 数量，来评估其在 2017 年度的受关注程度，进而选出 2017 年度 JavaScript 领域崛起的明星项目。 …"}, {"id": "6992324985347899428", "title": "Vue3 computed 源码学习", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 照旧是准备一个 demo 从 debug 开始 开始吧 在 computed 函数中主要做了两件事，一个是定义 getter 和 se"}, {"id": "6985035199432097823", "title": "vue部分高级特性", "desc": "概述 文章将讲述指令、混入、高阶组件、函数式组件、@hook、异步组件等内容。如果文字有不当的地方欢迎指正哦！"}, {"id": "6994843842545451039", "title": "Vue混入（mixins）理解及应用", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 1. mixins 简介 混合 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。 混合对象可以包含任意组件选项。 "}, {"id": "6960482093788823583", "title": "【vue-debug-plugin 重构版 】| 不来体验一下vue数据了如指掌的快乐？", "desc": "前言 上个月入职了新公司，开始新的造梦（填坑）之旅，开发过程中遇到了VueDevTool无法使用的情况，概括而言即因项目过大导致VueDevTool崩溃的情况，console了几天顶不住了，遂尝试开发"}, {"id": "6989510730269753374", "title": "Vue3追本溯源(一)入口函数", "desc": "Vue3追本溯源(一)入口函数 现如今前端的三大框架Vue、React、nodeJS是从事前端开发的必备技能，2020年9月随着Vue3的发布，Vue也迎来了更多开发者的目光，学习源码也要提上日程。这"}, {"id": "6844903678244028429", "title": "七年切图仔如何面试大厂web前端？（沟通软技能总结） | 掘金技术征文", "desc": "最近面了很多大厂的web前端岗位，都被刷了，在决定入职前，手里拿了几分待遇差不多的offer，后期的面试越来越顺，自己思考和总结了一下，原来面试也有好多技巧和方法可循，希望这些方法可以帮助到为找工作而且苦恼的你，可能每个人的方法不一样，不过至少可以提供一些参考。 先说明一下我的…"}, {"id": "6845166891124670471", "title": "《前端会客厅》对话winter和尤雨溪，深度探寻Vue3设计思想(上)", "desc": "前端会客厅第一期B站地址前端会客厅是我和winter设计的一档技术节目，每期会邀请一个嘉宾，畅聊前端技术上次B站尤大的直播讲解了很多Vue3新的设计，有幸前端会客厅第一期邀请到了尤大从另外一个角度聊聊"}, {"id": "6973530729162473502", "title": "写给 React 或者 Vue 同学的 Svelte 尝鲜和踩坑", "desc": "写给 React 或者 Vue 同学的 Svelte 尝鲜和踩坑 缘起 去年因为某个博文了解到 Svelte，但是一直不敢丢大项目尝试，最近手头上有个小项目，然后就尝试了一下，会 React 或者 V"}, {"id": "6958277351520075789", "title": "关于Echarts与百度地图相结合，在内网环境下开发离线地图，实现描点，连线，范围值。", "desc": "引言 前端er必备技能之一：地图开发。也不能说是开发，只是拿百度地图大牛们开发好的插件，做一个简单使用。建议阅读本文前，先尝试一下在线地图的开发，如：申请AK码，了解百度地图相关api，echarts"}, {"id": "6844903557930418189", "title": "Vue项目自动转换 px 为 rem，高保真还原设计图", "desc": "前端开发中还原设计图的重要性毋庸置疑，目前来说应用最多的应该也还是使用rem。然而很多人依然还是处于刀耕火种的时代，要么自己去计算rem值，要么依靠编辑器安装插件转换。 而本文的目标就是通过一系列的配置后，在开发中可以直接使用设计图的尺寸开发，项目为我们自动编译，转换成rem。…"}, {"id": "6941995130144587789", "title": "[Vue源码]为什么v-for的优先级比v-if的高？", "desc": "有时候有些面试中经常会问到v-for与v-if谁的优先级高，这里就通过分析源码去解答一下这个问题。 下面的内容是在 当我们谈及v-model，我们在讨论什么?的基础上分析的，所以阅读下面内容之前可先看这篇文章。 我们再次顺着这三个步骤对上述例子进行分析。 parse过程中，会对…"}, {"id": "6914517242298236942", "title": "使用 JSX/TSX 开发 Vue3 组件", "desc": "然后在 tsconfig.json 中配置 jsxFactory 为我们封装的这个函数就可以了。但是这个函数限制了我们在为组件传递 slots 时只能： 但是这也没啥问题嘛。 有了 JSXFactory 工具函数之后其实我们可以很开心的用 tsx 写了，那为啥还要 jsx 插件…"}, {"id": "6993237438135025672", "title": "LOLstyle-ui组件开发实战（二）—— Button-group组件", "desc": "在我们的实际开发中，常常会需要使用按钮组，在用于多项的类似操作时就需要封装button-group组件"}, {"id": "6844903580931981320", "title": "饿了么快应用初体验", "desc": "在很长一段时间里，原生饿了么应用对于新用户来说体验成本略高，对于迫切想要点餐的老用户操作有点繁琐；而 Web 版的饿了么应用在体验、速度、功能支持上都无法达到原生应用的水平，因此迫切需要一个功能上足够支撑饿了么服务体验、体验上足够轻量化的平台，而快应用恰好满足了我们的需求。 因…"}, {"id": "6844904114879463437", "title": "Vue 的生命周期之间到底做了什么事清？（源码详解，带你从头梳理组件化流程）", "desc": "相信大家对 Vue 有哪些生命周期早就已经烂熟于心，但是对于这些生命周期的前后分别做了哪些事情，可能还有些不熟悉。 本篇文章就从一个完整的流程开始，详细讲解各个生命周期之间发生了什么事情。 注意本文不涉及 keep-alive 的场景和错误处理的场景。 进入了 _init 函数…"}, {"id": "6974622986011672612", "title": "反编译获取任何微信小程序源码——看这篇就够了", "desc": "1 node.下载地址：https://nodejs.链接：https://pan.baidu.下载地址：https://www.yeshen.打开文件管理器，找到/data/data/com.tencent.node wuWxapkg.js C:\\Users\\pc-03\\Nox..."}, {"id": "6979853847007068197", "title": "keep-live的使用原理", "desc": "keep-live的使用原理 keep-live组件是vue的一个内置组件，可以实现组件的缓存，当组件切换时，不会对当前组件进行卸载。 常用的两个属性include/exclude,允许组件进行有条件"}, {"id": "6970220868853039118", "title": "Electron+Vue3 MAC 版日历 开发记录(5)——天气预报", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6844903673672237069", "title": "VuePress 手摸手教你搭建一个类Vue文档风格的技术文档/博客", "desc": "VuePress是尤大为了支持 Vue 及其子项目的文档需求而写的一个项目，VuePress界面十分简洁，并且非常容易上手，一个小时就可以将项目架构搭好。现在已经有很多这种类型的文档，如果你有写技术文档的项目的需求，VuePress绝对可以成为你的备选项之一。 config.j…"}, {"id": "7000664693622718477", "title": "有这样一个需求之vue项目中表格合并行或列", "desc": "前言 开发过程中不可避免的会有需要合并表格行或列的需求，在这里记录一下代码，方便搬运，做一名合格的搬运工。 原结构 期望效果 Template JavaScript 参考 # 补充 感觉代码还是有点啰"}, {"id": "6992002419190136845", "title": "中高级前端需要了解的vue-cli优化技巧", "desc": "压缩60%，本文将从10个打包优化点出发，探索一下我们基于vue-cli创建的项目如何从零开始进行打包优化"}, {"id": "6993265901822804005", "title": "Vue3 | Composition API 学习总结", "desc": "为了能够使用Composition API, 我们需要有一个可以实际使用它的地方。在vue组件中，我们将此位置称为setup setup函数 需要注意的是： 我们不能在setup函数中使用this， "}, {"id": "6953457808046047239", "title": "为什么Vuex的State需要通过computed引入到视图组件中以完成视图更新响应化？", "desc": "Motivation 在Vuex的官方文档中，有这么一段话。 Vuex宣称自己的store数据是响应式的。当Vue组件从store里获取到状态时， Vue组件会有效更新视图去反应状态的变化。 我们都知"}, {"id": "6844903654370066439", "title": "学了这么久，vue和微信小程序到底有什么样的区别？", "desc": "写了vue项目和小程序，发现二者有许多相同之处，在此想总结一下二者的共同点和区别。相比之下，小程序的钩子函数要简单得多。 写了vue项目和小程序，发现二者有许多相同之处，在此想总结一下二者的共同点和区别。 相比之下，小程序的钩子函数要简单得多。 vue的钩子函数在跳转新页面时，…"}, {"id": "6993252766453858334", "title": "创建虚拟滚动列表 Vue.js滚动列表", "desc": "单独渲染DOM上的项目会给用户带来明显的性能滞后，特别是当他们滚动浏览大型列表时。为了使滚动更有效，我们应该使用虚拟滚动列表，这样可以提高页面的加载速度，防止网络应用的卡顿。 虚拟滚动列表类似于标准的"}, {"id": "6844903916954451982", "title": "Vue原理解析（七）：全面深入理解响应式原理(下)-数组进阶篇", "desc": "再初步了解了响应式的原理后，接下来我们深入响应式，解析数组响应式的原理。 对于这两种改变数据的方式，vue内部的实现并不相同。 实现原理和对象是一样的，再vm._render()时有用到list，就将依赖收集起来，重新赋值后走对象派发更新的那一套。 走对象的那一套就不行了，因为…"}, {"id": "6844903598447394824", "title": "Vue项目编译后部署在非网站根目录的解决方案", "desc": "同一个生产部署项目，基内外网的访问路径并不相同，内网是基于域名根目录来访问，而外网却指向了一个子目录。 eg. ： 由于开发出来的项目是要部署在客户方，且客户并不想单独拿一个域名（或子域）来部署，这时，打包后的程序就要作一些配置方面的修改了。 在路由的history模式下，所有…"}, {"id": "6917526952282685454", "title": "七日打卡-窗口间通信postMessage", "desc": "在前端应用中，窗口间的通信用的地方还是挺多的，比如弹出qq登录认证窗。 如果你使用postMessage时没有带window，那么，你就是用的本页面的window来调用了它。 这就是要传递的消息了。它可以是一切javascript参数，如字符串，数字，对象，数组，而不是和jso…"}, {"id": "6928280731248984072", "title": "Vue源码解读(设计篇)", "desc": "benchmarks：vue 的性能测试,给使用者一个足够的性能展示。 dist：rollup构建目录，里面存放了所有Vue构建后不同版本的文件。 flow：它是Facebook出品的JavaScript静态类型检查工具，早期Vue.js选择了flow而不是现在的TypeScr…"}, {"id": "6844904195389128717", "title": "Vue技巧 | 在Vue3中使元素在滚动视图时淡入", "desc": "除了视差组件和滚动事件外，添加响应式触摸的一种好方法是使元素在滚动视图时淡入。 在本技巧中，将介绍如何使用滚动事件和CSS转换在Vue3中实现此功能。 这是我们将学习如何在本教程中进行构建的屏幕截图。 我们要做的第一件事是构建模板并设置组件样式。在此示例中，我们将使用空白块来说…"}, {"id": "6991646129582538789", "title": "petite-vue源码学习之事件实现", "desc": "开始 上一次模仿petite-vue实现了一个乞丐版的demo，可以绑定值实现文本的渲染，还支持表达式的语法，语法与petite-vue一致，具体可点击查看这篇文章，这一次在前面的基础上，来实现事件的"}, {"id": "6844903745042857997", "title": "VUE缓存：动态keep-alive", "desc": "keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 transition 相似，keep-alive 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。 由于现在组件的\bkeep-alive是动态根据路由元信息中的\bkeep…"}, {"id": "6844903614800986119", "title": "手把手教你在小程序里使用 Redux", "desc": "这里跟 reducer 里面的要区分，这里是可以对数据进行一系列处理的，我们通过 createAction 创建一个 action , 该方法主要有两个参数，第一个参数 type 表示 action 的类型，第二个参数 payloadCreator 是一个 function，处…"}, {"id": "6844904201378594824", "title": "基于ElementUI封装一个表格组件 tableList", "desc": "我们项目中使用的表格一般都比较类似，如果不进行封装的话，那么每个页面都可能有一些类似的代码。不仅浪费时间，而且由于开发人员不同的开发习惯。后期维护人员需要花费一点时间去看每个人的代码。所以我直接将表格做一个二次封装，只要一个人去维护这份代码即可。下面是我封装的内容"}, {"id": "6981382128189571103", "title": "VSCode整合prettier和EsLint【团队编码风格】", "desc": "VUE项目VSCode整合prettier和EsLint,保存代码自动格式化【团队编码风格】2021年你还不整规范就真的out了！！！"}, {"id": "6844904150442983438", "title": "使用cli-4.x搭建vue项目详情过程", "desc": "到这里配置就基本完成了，等待项目加载各种包... 加载完成后，进入项目，npm run serve启动就可以了..."}, {"id": "6844903581477421063", "title": "[prerender-spa-plugin]--微型Vue项目的静态化利器", "desc": "我们的官网是特别“纯正”的vue-cli项目，也就是说这是个用webpack进行打包的单页应用。 在路由方面选择的是vue-router，mode是hash模式，因为并不需要考虑IE浏览器以及移动端浏览器(特别是微信这个小妖精)，所以并没有特别注意路由这一块的配置。 在页面开发…"}, {"id": "6844903682727772173", "title": "vue 巧用过渡效果", "desc": "vue提供的了transition组件来实现组件的过渡和路由的过渡，合理使用这个组建可以让我们的页面更加的灵活，提高用户体验。 看起来还是有有点乱，先来捋一下。 enter 定义开始的状态， active定义过程， enter定义结束， 但是在实际进行的时候是有交叉的。 这里要…"}, {"id": "6844904159146164231", "title": "教你轻松搞定vue-codemirror的基本用法：主要实现代码编辑、验证提示、代码格式化", "desc": "1. 需要实现codemirror编辑器功能，主要是json数据的编辑 2. 写功能前需要安装的一些组件及用法简单说明，vue的就不说了，就光说这个编辑器需要的 这个跟codemirror还是有区别的，codemirror我们需要初始化编辑器，然后拿着初始化对象就可以调用方法了…"}, {"id": "6844903710661804046", "title": "一个vue前端的VSCODE插件分享（2018）", "desc": "VSCODE的插件系列丰富的插件让vscode更加好用顺便推荐图床（图床地址）美化插件background给编辑器窗口加个背景！唯一的缺点是vscode会\b显示已损坏，当然啦，并不影响使用可以参考以下"}, {"id": "6844904023640932359", "title": "[Nuxt系列01] Nuxt 简介", "desc": "自从入坑 NuxtJs,转眼之间一年多过去了，Nuxt 版本已由初入手时的 2.0.x 版本来到了现在的 2.11.x 版本并继续火速迭代中，而我们的线上版本在无重大 bug 的前提下便“永恒”维持在 2.4.x 版本，于是很多新的功能或特性只有眼馋的份。就一个商业项目来说，自…"}, {"id": "6844903556919590925", "title": "Vue.js学习系列六——Vue单元测试Karma+Mocha学习笔记", "desc": "在使用vue-cli创建项目的时候，会提示要不要安装单元测试和e2e测试。既然官方推荐我们使用这两个测试框架，那么我们就动手去学习实践一下他们吧。 Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具在Vue中的主要作用…"}, {"id": "6844903877196644359", "title": "你不知道的Vue.nextTick源码系列", "desc": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 具体使用场景各位小伙伴应该也不用笔者多啰嗦了，今天笔者的重点还是研究一下这个东西源码是怎么实现的，毕竟作为当代前端一员至少不能只会用 API 了，咱们还是去底层假装研究一下是吧…"}, {"id": "6844903500975980557", "title": "从 Template 到 DOM（Vue.js 源码角度看内部运行机制）", "desc": "从 Template 到 DOM（Vue.js 源码角度看内部运行机制）"}, {"id": "6844904113742807048", "title": "实现手淘金刚区类目列表的scroll滑动效果", "desc": "在h5开发的过程中，轮播图下面放个类目的list（产品术语叫金刚区）是电商产品中很常见的布局，以前都是一行或两行排完，但是随着类目越来越多，出现了这么几种设计：1、最后一个类目为查看更多，点击跳转去一个新的页面；2、用swiper包裹，将多个类目当轮播图展示；3、类目scrol…"}, {"id": "6844903574900572168", "title": "Electron开发初体验", "desc": "平时总会写markdown，markdown整体语法用起来很方便，但依然有晦涩的地方，比如表格。markdown的表格语法写起来很容易出错，而且每行每列单元格里的内容长短不一编辑器里就很容易乱掉，所以我在写表格时候都是借助Tables Generator来写的，但是这个网站不能…"}, {"id": "6854573219597254670", "title": "学习Vue响应式原理，实现一个小“框架”（2）：实现Vue2.0响应式", "desc": "这个同样是写博客的产出，之前在写博客的时候，瞎弄了一个模板引擎，当时就想之后把他优化一下，把 Vue 响应式原理放进去，弄成一个小的可以用来减少我写博客前端代码的组件化的”框架“，于是我就来填坑了。这个只是自己用来学习 Vue2.0响应式原理的一个小项目，代码的实现可能很初级，…"}, {"id": "6844903552205357069", "title": "通过vue组件化方式实现常见动态图标", "desc": "vue-dynatic-iconBuildSetupexample:"}, {"id": "6844904154452738061", "title": "Vue CLI 源码探索 [四]", "desc": "Vue CLI 源码探索 [六] 探索下 Vue CLI 的插件机制，内容较多，请慢慢看。涉及如下插件（@vue/cli-plugin-vuex/router/babel/typescript/eslint） todo，暂时忽略该命令。一个是因为调试过程中出现报错，第二个是根据…"}, {"id": "6977657676570296351", "title": "微型Vue框架构建Part4——Render渲染前", "desc": "在上文 $Mount方法实现中，我们根据入口点分析了分析了HTML结构，且为每一个HTML节点构建了虚拟DOM(vnode)。本文将在此基础上实现Render渲染前的一些准备工作，为Render渲染数"}, {"id": "6908905796206067725", "title": "vue2.0源码-initMixin(一)", "desc": "我们可以先简单了解下，hasProxy是利用/native code/.test(Proxy)判断当前浏览器是否支持Proxy，不支持则将vm直接赋值给vm._renderProxy，如果在支持的情况下，先判断是否有render的写法，如果没有，则利用Proxy去改写vm的ha…"}, {"id": "6963307308025643016", "title": "回首Vue的单文件组件(SFC),探索新的模式,然后一起飙车?(Vue2)", "desc": "什么是Vue单文件组件,Vue单文件组件构建流程,如何在js中开发多个vue组件,如何更快乐地coding?"}, {"id": "6844903504784572423", "title": "从零开始基于vue2 webpack3构建多页应用", "desc": "序：基于vue2和webpack3进行的多页面应用构建，github地址：https://github.com/FedWithMori/vue2-webpack3。 任何一个项目开始构建之前最先要做的就是先确定我们项目的目录结构，包括开发目录和生产目录。 1. 开发目录 2. …"}, {"id": "6926418790821396493", "title": "从vue3.0源码解析响应式实现原理", "desc": "WeakSet：类似Set，但是WeakSet的成员只能是对象，而不能是其他类型的值，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，WeakSet 不可遍历。 Map：它类似于对象，也是键值对的集合，区别于对象的的是对象的键只能是字符…"}, {"id": "6844904119128293390", "title": "vue-transition原理分析(二)", "desc": "在上一篇博文中，我们知道vue中的transition是一个抽象组件，其功能是给子组件的data上绑定了transition属性，而这个transition属性是由绑定在transition组件上的属性和事件组合而成，也就是说把绑定在transition组件上的属性和事件透…"}, {"id": "6844903576754454541", "title": "H5 Audio ES6版 系列教程之一", "desc": "本项目基于 ES6+scss+webpack 开发的原生 JS 版 H5 Audio ，此次分享的目的是让前端对 H5 的 Audio 有更深的了解，同时对现代前端技术也有个大致的了解，最终可以基于 vue 或 react 开发一个 H5 版的 网易音乐，QQ 音乐... 预览…"}, {"id": "6844904117907750925", "title": "学习VUE时遇到的一些问题", "desc": "可见在vm实例对象上并没有vm.data.msg这样的属性。直接打印vm之后发现 其实msg直接被就放在vm的实例对象上，使用vm.msg就可以直接获取到变量值。也就是说 创建vue实例的时候，vue会将data当中的成员带到vm实例上。 既然要实现响应式，那么我们得知道数据变…"}, {"id": "6925736206030340109", "title": "来一份属于自己的脚手架吧！从零搭建一个自己VUE脚手架", "desc": "3.在主入口文件 index.js 第一行加入 #!/usr/bin/env node 用于指明该脚本文件要使用node来执行。 /usr/bin/env 用来告诉用户到path目录下去寻找node，#!/usr/bin/env node 可以让系统动态的去查找node，目的是…"}, {"id": "6844904118524313614", "title": "加速vue组件渲染之性能优化", "desc": "然而这种静态数据是不需要动态响应的，这样势必会造浪性能浪费，于是我们想办法避免这种不必要的性能浪费。 其实这种场景在开发中经常遇到，比如查询条件有很多selectlist字段，我们也可以把它封装到一个大json里面，然后对其进行避免重写属性，可以降低不少性能开销。"}, {"id": "6920157507885203470", "title": "IDEA使用Alibaba Cloud Toolkit 发布VUE项目服务器Nginx", "desc": "因为我是一个后端工具人，前端工具用的也不熟悉，最近使用AlibabaCloudToolkit发布SpringBoot到服务器，现在手头刚好又一套前端代码，所以我们这里演示一下如何使用AlibabaCl"}, {"id": "6844904065567195144", "title": "Vue源码阅读（七）：组件化机制的实现", "desc": "MVVM框架中，组件化是一种必要性的存在。 通过组件化，将页面做切割，并将其对应的逻辑做一定的抽象，封装成独立的模块。 那么Vue中的组件化是怎样做的呢？我们分几个点来具体阐述这个过程：组件声明过程Vue.component()的具体实现，组件的创建与挂载过程。 发现Vue.c…"}, {"id": "6992007508164345887", "title": "vue之keep-alive加深印象", "desc": "定义： 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们 生命周期： activated：当 keepalive 包含的组件再次渲染的时候触发 deactivated： 当 keepalive "}, {"id": "6844903693985251341", "title": "IMWeb Conf2018 Native跨端融合总结", "desc": "“一次编写，到处运行”(Write once, run anywhere, WORA)，最早是Sun公司在跨平台方面的宣传口号，也代表着我们作为开发人员对于效率的极致追求。近几年随着移动互联网的快速发展，移动终端设备的软硬件、操作系统、开发工具链和技术社区等日趋成熟完善，在前端…"}, {"id": "6844904195540123655", "title": "用vue简单写一个音乐播放组件", "desc": "前言公司有个单位项目，需要读取语音文件并进行播放，其实用audio引入个播放链接即可，不需要太多功能后来想到网站是不是也可以放个小播放器插件，索性查了audio相关api，也学习其中相关技巧，分享给大"}, {"id": "6844903767595302920", "title": "【译】Vue 的小奇技（第二篇）：衡量 Vue 应用的运行时性能", "desc": "在上一篇文章中我们谈到了如何提高大型列表数据的性能，但是我们没有测试过这个小技巧到底带来多少的性能优化。 我们可以通过 Chrome 浏览器的 DevTools 工具中的 Performance 标签页，来完成我们想要的测量工作。为了能够获得准确的数据，我们需要在 Vue 应用…"}, {"id": "6844903586204385293", "title": "简单易懂的Vue数据绑定源码解读", "desc": "1. 对象的访问器属性——getter和setter： 大家可以把getter和setter理解成获取对象属性值和给对象属性赋值时的钩子就可以了。 2. 订阅者模式： 订阅者模式也叫“订阅-发布者模式”，对于前端来说这种模式简直无处不在，比如我们常用的xx.addEventLi…"}, {"id": "6854573214665408525", "title": "Vue中的$nextTick机制", "desc": "因为Vue是异步驱动视图更新数据的，即当我们在事件中修改数据时，视图并不会即时的更新，而是等在同一事件循环的所有数据变化完成后，再进行视图更新。类似于Event Loop事件循环机制。 在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后DOM。…"}, {"id": "6914662010672119816", "title": "微前端是什么？", "desc": "“微前端”一词 2016 年首次出现，它是将微服务的概念扩展到前端领域。 将前端整体分解为更小、更简单的块的模式出现，这些块可以独立开发、测试和部署，同时在客户面前仍然被视为单一的内聚产品。我们称此技术为微前端。其定义为：一种架构风格，其中独立交付的前端应用程序组成一个更大的整…"}, {"id": "6844903841486340103", "title": "D2 日报 2019年5月10日", "desc": "Startalk 是一款高性能的企业级im套件。在去哪儿稳定运行3年多，同时为去哪儿网内部企业办公和商家to b业务，用户端提供的售前及售后咨询。Startalk适用于多种场景，如办公OA，商业客服，各种im场景SDK嵌入。 您可以访问下面的链接浏览往期内容，或者模糊检索。"}, {"id": "6844903878173949960", "title": "vuex了解一下？", "desc": "一个专为 Vue.js,应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接…"}, {"id": "6991856220730720287", "title": "【Vue2.x 源码学习】第二十九篇 - diff算法-节点比对｜ 8月更文挑战", "desc": "【Vue2.x 源码学习】第二十九篇 - diff算法：介绍了 diff 算法、对比方式、节点复用；实现了外层节点的 diff 算法；不同节点如何做替换更新；相同节点如何做复用更新：文本、元素、样式"}, {"id": "6844904049465098253", "title": "Vue 3 SFC 来实现一个todoMVC", "desc": "到目前，vue 3 gayhub 官选 除了服务端渲染外，大部分工作已经完成了，vue-loader也有了初版,意味着可以去尝鲜了。 拆分业务和组件交互逻辑。这样的好处: 关注点分离，业务逻辑也可以复用。 目前工程化还在完善中。 目前这版本还没有导出vue.d.ts ，所以木办…"}, {"id": "6944695121677910023", "title": "前端常见(Vue、React)面试及答案", "desc": "概念：块级元素格式化上下文。 原理：BFC是一个容器是容器内外的元素不会互相影响，使BFC内的浮动元素参与到容器的宽高计算，通常用来解决边距冲突重重叠，或者清楚浮动。 事件模型 捕获、冒泡，指事件由捕获到达目标元素再由冒泡发送到全局。window-document-html-b…"}, {"id": "6902365777068982280", "title": " Vue3 源码解析 05--响应式 reactive 和 ref", "desc": "我们都知道 Vue 的响应式是通过数据劫持实现的，Vue2 的数据劫持是通过 Object.defineProperty 实现的，而 Vue3 升级的一部分原因就是将defineProperty替换成更为强大的 Proxy。 众所周知，Proxy 是 definePropert…"}, {"id": "6844903573529198605", "title": "Vue 组件的通信", "desc": "定义后，可以在template模版中使用\b<my-list></mylist>，此时会将组件中定义的内容显示出来。 页面会显示出\b我们定义的my-list的组件内容，``这个符号是ES6中的模版字符串，想详细了解的话，可以看MDN上关于模版字符串的说明。 \b\b上面是简单的组件，…"}, {"id": "6844903938127298574", "title": "Vue生命周期详解。", "desc": "一说到Vue的生命周期，大家都能说上来一点.我自己会随着自己对Vue的深入了解，不断的完善自己对Vue的整体认识。 在这个调用beforeMount判断vm.$options是否存在el，如果没有的话则会停止编译，也就意味着停止了生命周期，直到在改vue实例上调用vm.$mou…"}, {"id": "6844903505400954887", "title": "2018web前端校招面试总结", "desc": "2018web前端校招面试总结"}, {"id": "6844903636485554189", "title": "vue项目通过命令行传参实现多环境配置(基于@vue/cli)", "desc": "大多数项目都有生产环境和开发环境,一般情况下应该够了,但是有时候还需要sit,uat,本地等环境,这时候假如要通过注释的方式切换环境就相当麻烦了. 如果可以像下面这样切换环境就方便了 如果不自动获取本地ip,那么每个同事都得在配置文件中保留一份自己得ip地址,很麻烦，所以就自动…"}, {"id": "6844903920452501511", "title": "从零开始构建 Vue + TypeScript 脚手架模版", "desc": "通常我们开发vue项目，都会使用到vue-cli脚手架工具构建想要的项目模版，这样固然能无视各种配置，高效地编写项目。可是vue-cli这样类似黑盒的模版配置，对于初学者来说，其实是很伤的。每天都只会关注业务逻辑代码，写了一两年甚至连webpack的基本配置都不了解。 而且，v…"}, {"id": "6991823123956006943", "title": "Vue源码~初始化过程及响应式原理 | 八月更文挑战", "desc": "### 首次渲染过程 * `Vue` 初始化，实例成员，静态成员 * `new Vue()` * `this._init()` * `vm.$mount()` * `src/platforms"}, {"id": "6910756357117313031", "title": "Virtual DOM 的实现原理", "desc": "可以发现一个DOM对象它的成员非常多，所以创建一个DOM对象的成本是非常高的。 可见创建虚拟DOM的开销较小。 为了简化DOM的复杂操作于是出现了各种MVVM框架，MVVM框架解决了视图和状态的同步问题，数据变视图变，视图变数据变。"}, {"id": "6938219484259811342", "title": "VUE3.X学习笔记", "desc": "VUE3.X学习笔记起步模板指令CompositionAPI官网：Vue3官方文档起步创建项目Vite（推荐使用）Vite是一款作者意图取代webpack的工具，目前仅为vue3提供服务，同样支持热更"}, {"id": "6844903648372195335", "title": "JavaScript 代码格式化", "desc": "使用 Prettier，不做代码检测，直接格式化。也可以添加配置文件 .prettierrc 自定义格式 使用标准的 JavaScript Standard Style，直接安装即可 npm install standard --save-dev, 不需要任何配置文件。 然后使…"}, {"id": "6939185485667532814", "title": "vue 中如何自定义指令及其原理", "desc": "看了一些自定义指令的文章，但是探究其原理的文章却不多见，所以我决定水一篇。 其实关于这个问题官方文档上已经有了很好的示例的，我们先来温故一下。 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和…"}, {"id": "6844903965700653063", "title": "30分钟  小白级入手vue教程", "desc": "vue是一个前端框架，是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。 首先在在Vue官网下载vue.js文件。 Vue特…"}, {"id": "6844904014425899015", "title": "vue 实现LED数字时钟（开箱即用）", "desc": "每一个数字由七个元素构成，即每一个segment元素。0~9 的数字都有自己的构成方式，用数组表示，即digitSegments数组。例如： 数字0用数组表示就是[1,2,3,4,5,6]，定时器每隔一秒获取最新时间，然后通过改变透明度将之前的数字消失，显示最新的数字。通过tr…"}, {"id": "6844903590104924168", "title": "你也许不知道的Vuejs - 插件开发", "desc": "虽然 Vue.js 已经足够强大了，但是在实际开发中，我们还是需要引入各种模块来实现我们的功能需求，或者给全局的 Vue 对象添加一些全局功能，而 Vue 插件 就是来帮助我们完成这项工作的。 添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。 我们…"}, {"id": "6844903869831446541", "title": "Vue parse之 从template到astElement 源码详解", "desc": "在紧张的一个星期的整理，笔者的前端小组每个人都整理了一篇文章，笔者整理了Vue编译模版到虚拟树的思想这一篇幅。建议读者看到这篇之前，先点击这里预习一下整个流程的思想和思路。 本文介绍的是Vue编译中的parse部分的源码分析，也就是从template 到 astElemnt的解…"}, {"id": "6933182345906225160", "title": "VUE进阶知识-01", "desc": "兄弟组件之间通信可通过共同祖辈搭桥，$parent或$root。 但是这方式，存在耦合过高问题，因为一旦组件层级发生了改变，那么就会有问题，特别是$parent。 例如当我们自己封装组件时（自己封装表单），有嵌套关系，很多人会直接梭哈使用$parent，但是如果后面重构层级关系…"}, {"id": "6978272800230342664", "title": "Vue进阶（幺叁玖）：textarea文本框根据内容自适应改变高度", "desc": "项目开发过程中，在展示用户录入意见信息时，使用el-input标签，type=”textarea”属性，在指定:row=”number”后，若输入文本量或显示文本量超过指定行数后，会出现垂直滚动条，但在IE环境下，该滚动条是隐藏的，用户体验性不好，故考虑实现文本框根据文本内容自适..."}, {"id": "6978392437374844941", "title": "P4M2：组件化开发、Vue Router、Vue CLI", "desc": "T1：Vue.js 组件 组件注册 全局注册 全局注册的组件在注册后可以用于任意实例或组件中，需要在根 Vue 实例创建前注册。 Vue.component('exampleName', { /*op"}, {"id": "6990599200308199431", "title": "计算属性", "desc": "先把字符串变成数组，用逗号分割text.split(',');变成[123,456,789] 然后数组的逆转顺序，用.reverse；变成了[789,456,123] 把数组变成字符串，用逗号分割.j"}, {"id": "6863773988863246349", "title": "Vue脚手架系列08-表单组件-设计FormItem组件", "desc": "Vue脚手架系列08-表单组件-设计FormItem组件1.Form-Item组件：在设计FormItem组件的时候需要注意以下几点：绑定label和prop属性获取当前输入框的规则如果输入框和rul"}, {"id": "6903772610615181326", "title": "实现一个简易版@Vue3/reactivity", "desc": "@Vue3/reactivity 模块作为可以独立于 Vue3 框架使用的一个模块，它可以单独作为一个响应式的工具库，用在任何项目中，甚至是Node项目。其底层原理是基于 Proxy 实现的，IE11 及以下是不能使用的，具体兼容性见：https://caniuse.com/p…"}, {"id": "6916470147150528520", "title": "Vue2.0源码解读系列 - 来自Vue的神秘礼盒", "desc": "目前 Vue3.0 打的很火热，都已经出了很多 Vue3.0 源码解析系列的博客， 但是 Vue2.0 的源码我觉得还是有必要细品一下， 掌握了原有通用的源码原理，才能知道新版本的 Vue3.0 到底做了哪些更改。如果已经很熟悉了，可跳过~ 首先整体看一下整个页面渲染的流程图，…"}, {"id": "6916440221462740999", "title": "vue-element-template实现权限管理、动态路由、动态加载侧边栏", "desc": "上面👆这段代码，根据实际情况改，主要就是修改code值，如果，后端返回的code成功状态值是200，那么这里就改成200。if (res.code === 50008 || res.code === 50012 || res.code === 50014)这里也根据后端返回的…"}, {"id": "6844903496974598152", "title": "Vue 状态管理的一点思考", "desc": "最近在写项目的时候碰到一个场景：一个地图应用，有个侧边栏，侧边栏里面放着很多选项，选项改变的时候，应用会根据侧边栏的条件请求数据，然后在地图上放 markers 。页面可以简单抽象成如下结构："}, {"id": "6951974032145121293", "title": "reactive是如何实现深层响应的？", "desc": "proxy是浅层的，但是reactive却是深层的，那么reactive是怎么实现对嵌套对象的属性的操作进行拦截的呢？"}, {"id": "6919314197168226318", "title": "⒖ Vue/cli 构建项目", "desc": "先用普通的apt工具安装低版本的node，然后再升级最新。 vueapp为你项目的名称。"}, {"id": "6854573212916891656", "title": "NutUI 实战--持续升级企业业务之福礼", "desc": "福礼是京东为优质企业客户打造的以年节福礼/季度劳保兑换为主的员工福利商城。该产品致力于提升员工福利感知度、降低福利发放和领取成本，为企业客户提供京东品牌保障的海量正品、搭配企业专属优惠价格和极速物流配送服务，进而帮助企业合理规划年度福利方案，完成一站式企业员工福利的管理及采购。…"}, {"id": "6844903634862342151", "title": "vue jsx 不完全指北", "desc": "Vue 作为日前最为火热的前端框架之一，其流行程度很大部分得益于对开发者友好。尤其是SFC(单文件组件)的模式深得人心，开发者通过在一个文件里同时书写模板，JS 逻辑以及样式，就能完成组件的封装，相比其他方式，组件更加内聚，便于维护。 在 Vue 2.0 版本之后，Vue 增加…"}, {"id": "6844903890576654349", "title": "Vue 响应式原理简易 MVVM 三步走第一步 (数据劫持）", "desc": "Vue2实现数据劫持是利用ES5的 Object.defineProperty , 利用它会为对象添加get/set方法，从而监听属性的读取与修改。"}, {"id": "6844903845416419335", "title": "关于Android 工程师转成vue的三两事儿(2)--前端开发技巧", "desc": "正如前文所说，代码的风格是一个很麻烦的事儿，但是一旦养成了一种习惯却又能给自己今后的发展有着很大的裨益。以前在刚开始做Android开发的时候，根本就不会注意到这种东西，然后命名也是从a到z，从1-n的这种。但是写着写着发现自己都没办法看懂前面写的代码的意思了。更不必去谈及协作…"}, {"id": "6844903811371237384", "title": "根据调试工具看Vue源码之虚拟dom（一）", "desc": "Vue 通过建立一个虚拟 DOM 对真实 DOM 发生的变化保持追踪。请仔细看这行代码： createElement 到底会返回什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需…"}, {"id": "6844904078292549639", "title": "VueJs best practices [译]", "desc": "在探索了一段时间的 VueJs 文档和 web 之后，为了更加正确的或更普遍易于接受的方式来使用 vuejs，创建了一个最佳实践和样式指南的列表。 下面的要点是与功能/优化相关的，其他的是关于 VueJs 命名约定和元素排序。更详细的信息可以在摘要中的链接中找到。 当使用 $o…"}, {"id": "6844904070818299917", "title": "Vue深入响应式原理", "desc": "当把一个普通的js对象传入Vue实例作为data选项，Vue将遍历此对象的所有属性，并使用Object.defineProperty把这些属性全部转为getter/sertter。 Object.defineProperty是ES5的特性，所以Vue不支持IE8及以下版本的浏览…"}, {"id": "6914245175766155277", "title": "Vue 源码笔记- mergeOptions 相关", "desc": "mergeOptions 是 Vue 中比较重要的一个函数，它的作用是将 parent options 和 child options 里的各个属性按照某些合并策略生成一个新的 options。这里的 options 就是用于生成 vm 实例的对象。因为 Vue 中创建根 vm…"}, {"id": "6844903881588244494", "title": "【Vue原理】Props - 源码版", "desc": "今天记录 Props 源码流程，哎，这东西，就算是研究过了，也真是会随着时间慢慢忘记的。 幸好我做了详细的文章，忘记了什么的，回忆起来必然是很快的。 Props 设置响应式，也是旨在数据改变时动态更新。 当 对象内部被修改的时候，会通知到 父和子 更新。"}, {"id": "6844904104813166599", "title": "vue中避免使用函数来绑定依赖", "desc": "如果你正在使用vue编写业务，可能遇到一个数据比较多，他们都遵循相同的模式，需要在data里定义多个变量来绑定依赖，然后你不想在data里定义多个变量，在接口调回后每个都重新赋值，采用这种方式绑定依赖"}, {"id": "6844904065483145223", "title": "Vue源码阅读（二）：数据响应式与实现", "desc": "这篇文章我们来详细了解数据响应式的原理与具体实现。 聊到 Vue 的数据响应，很多人都会对其非侵入式的数据响应系统津津乐道，大概都知道它是通过数据劫持的方式(修改 Object.defineProperty() )来轻量化实现数据响应式。 所谓轻量化，指的是：Vue 中的数据模…"}, {"id": "6844903609641992206", "title": "最后说 Vue2 SSR 的 Cookies 问题", "desc": "本来想前面写点什么的, 还是算了, 直接说思路吧. 从 Vue2.3 版本后, SSR 的 cookies, 就变成一个无比麻烦的问题, 具体请访问官网文档: https://ssr.vuejs.org/zh/api.html#runinnewcontext 之前也说不少的思路…"}, {"id": "6943479411282804772", "title": "NodeJS知识点梳理-第一篇", "desc": "废话先说好，不然你们看到后面没有耐心以后就不会看我说的废话了，为什么我要写这个node系列的文章呢？我发现现在很多公司对node的要求越来越多了，（虽然也不知道为什么吧，可能是因为他们觉得自己的公司太强大（low）了，需要一些会nodejs的人充场面吧），所以不管怎样我都觉得有必..."}, {"id": "6943479397575819301", "title": "NodeJS知识点梳理-第二篇", "desc": "npmpackage.json安装package.node_modules卸载第三方库 [npm uninstall]在package.交互过程 我们开发的都知道，一个一个项目都是由客户端和服务端组成的，那么客户端发送一个request到server上面，然后server直接re..."}, {"id": "6943479161764151304", "title": "mixins的实用案例和常见问题", "desc": "全局引用mixin新建一个mixinjsmain.说人话就是vue给我们提供了一种更加灵活的实现业务实现逻辑的方式。console.info(this.console.info(this.this.我们首先看到了mixins是怎么使用的，我们定义一个变量，直接将我们需要的逻辑实现..."}, {"id": "6914097285680857096", "title": "Vue源码分析（二）——响应式", "desc": "这里的响应式，是指作为现在 MVVM 主流思想下的前端框架采用的一种数据驱动视图的方案，即对数据监测，来进行相应的 DOM 更新。而 Vue 实现的方案也是比较特别的，其很巧妙的借助 JS 原生的对对象进行监听的 API 来处理，一定程度上提升了性能，但是也有其缺陷的地方。 所…"}, {"id": "6913842782092132365", "title": "Vue CLI 学习笔记 1", "desc": "本文是对VueCLI官方文档复习的摘抄笔记（非原创，侵删）介绍VueCLI基于Vue.js进行快速开发的系统，提供@vue/cli交互式项目脚手架@vue/cli+@vue/cli-service-g"}, {"id": "6844903740852404232", "title": "VueThis$Store总结", "desc": "上次答应一个掘金的读者介绍下开发此插件的一些原理和技巧，在此也一并做下总结了。 你怎么使用正则表达式捕获到a, b, c三个属性并且拿到三个函数的第一个参数呢，不排除有人能做到，但是可能会耗费不少时间吧。 astexplore，你可以在网站上练习，做一些很酷的事情。 有了这两种…"}, {"id": "6844903517530882062", "title": "好用的格式化时间的插件", "desc": "包含多种处理日期类型的方法，日期类型与字符串类型的相互转化，计算时间差等 觉得好的话 可以star一下"}, {"id": "6844904068603707405", "title": "Vue实例", "desc": "vm的构造函数是Vue（vm所属的类是Vue）。 vm对象封装了对视图的所有操作，包括数据读写、事件绑定、DOM更新（不包括Ajax！）。 el表示这个属性或实例的挂载点。 在el里写想要挂载到的节点，然后这么这个节点的内容将被替换。 因为如果把一个data同时传给多个Vue组…"}, {"id": "6924138595473326088", "title": "vue学习笔记之computed&watch", "desc": "作用：用于在data数据被渲染前的操作，有利于逻辑代码和模板的分离。这里指明是data中的数据，因为data中的数据是响应式的。 注意点：computed中定义的属性名不能和data中的属性名重名，不然警告已经被定义The computed property \"categori…"}, {"id": "6854573221967527949", "title": "浅析Vue的两个版本", "desc": "其实我们使用Vue的时候，有两个不同的版本，它们分别是Vue完整版（vue.js）和Vue非完整版（vue.runtime.js），这篇文章就来简单的介绍一下Vue两个版本的区别和使用方法。 完整版的视图是写在HTML里或template选项的，由于有 compiler(编译器…"}, {"id": "6844904128347373576", "title": "关于vue过滤器的原理解析", "desc": "过滤器实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理。我们看一下官方的定义： 过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，capitalize 过滤器函数将会收到 message 的值作为第一个参数。过滤器可以串…"}, {"id": "6844903864374657031", "title": "基于 ElementUI 手撸穿梭树（一）", "desc": "当然这个项目中记得引入 ElementUI。 树的每个节点都要记住自己的当前状态，树闭合展开选中的操作，也通过改变当前节点状态来改变。所以我们就需要，去把数据进行遍历，生成一个有状态，同时每个节点有改变的状态的构造树。 在 Tree.vue 中传入，将 treeData 传入构…"}, {"id": "6844903689971335181", "title": "处理 Vue 单页面应用 SEO 的另一种思路", "desc": "（设置vue 单页面meta info信息，如果需要单页面SEO，可以和 prerender-spa-plugin形成更优的配合） 单页面应用在前端正大放光彩。三大框架 Angular、Vue、React，可谓妇孺皆知。随着单页面应用的普及，人们在感受其带来的完美的用户体验，极…"}, {"id": "6844904118813720589", "title": "[手把手式教程，适合新手入门Vuex]-Vuex入门实践（中）", "desc": "上一篇文章 [手把手式教程，适合新手入门Vuex]-Vuex入门实践（上），我们一共实践了Vuex的这些内容。 在state中定义共享属性，在组件中可使用$store.state.属性名访问共享属性。 在mutations中定义修改共享数据的方法，在组件中可使用$store.c…"}, {"id": "6844903990052782094", "title": "VUE 组件间通信方式", "desc": "组件间的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用，接下来，我们就悉数给大家展示所有 Vue 组件之间的通信方式。 简单来说，我们可以通过 Prop 向子组件传递数据。用一个形象的比喻来说，父子组件之间的数据传递相当于自上而下的下水管子，只能从上往下流，不能逆…"}, {"id": "6985732346347520036", "title": "Vue-三栏布局组件", "desc": "写一个vue的组件—————蕴含插槽的三栏布局，在网页的布局中很重要，且具有灵活性 组件整体是一个三栏布局 每栏使用了具名插槽。组件的高撑满父元素，宽度自适应，根据子元素来。如果对应的具名插槽中不填充"}, {"id": "6919125800637693959", "title": "如何打包一个Vue组件库", "desc": "大多数的教程写都是使用最直接的方式，即使用webpack的lib模式进行打包，一些教程的区别可能在于使用Vue-cli2/vue-cli3的形式而已，这里罗列一下简单的组件库模板是怎么生成的，本教程以vue-cli3为例。 经过上述步骤，一个基本的组件库模板就出来了。那么问题来…"}, {"id": "6931698925661323278", "title": "vue技术栈：从设计思想到实现原理", "desc": "本文是react技术栈：从原理到源码的姊妹篇，也是这篇框架概论的延伸，因此彼此关联比较大，至少建议阅读完框架概论再回来继续。 这里的vue-next指的是vue.js 3.0，其他是配套库，本文参考链接大部分是vue官方资料。 本次会对前两章进行讨论，后续会持续更新。 vue的…"}, {"id": "6844903651622780941", "title": "iview 升级指南 —— MenuItem 篇", "desc": "循例是该先聊聊新特性的。Menu 有四个关联的组件，分别为：Menu、MenuItem、SubMenu、MenuGroup， 这些组件的新旧版本之间并没有太大差异，向后兼容的很好，理论上可以平滑升级。 新版本只有 MenuItem 增加了一个特性：支持链接模式，可以通过向组件传…"}, {"id": "6844903742383325197", "title": "vue+vue-router+vuex地址管理思路", "desc": "在组件库中创建了appHeader.vue，用于头部的名称展示。 “页面”库中新建了四个“页面”Home.vue（个人中心）、OrderConfirm.vue（订单确认）、AddressList.vue（地址列表）、AddressEdit.vue（地址编辑）。项目初始化时的“页…"}, {"id": "6980325222264078366", "title": "干货！帮你总结最实用的Vue小技巧", "desc": "在vue的使用过程中，我们普遍会遇到各种场景，当普通使用时没有什么影响，但是或许只要优化一下，便可以更高效更优美地进行开发。下面将展示一些日常开发的实用小技巧。 1. 多图表resize事件去中心化 "}, {"id": "6844903956024410119", "title": "模仿elemtnUI实现v-loading，浅浅的了解vue指令编程", "desc": "文章是csdn之前写过的。打算重新写一下，蹭蹭热度。因为之前批量迁移的时候这篇文档热度不行，排版也有问题。还有就是因为批量迁移博客，导致一些好文章没有出来。 我认为我主页里面的富文本开发部分还是挺有深度的，不过这块写的人也少，我就不多去推广了。 还有就是再回顾一下，很久没写了。…"}, {"id": "6844903558463094798", "title": "Vuejs渡劫系列三：构建一个包含路由控制、状态管理和权限校验的vue-cli项目", "desc": "Vuejs渡劫系列的第三篇文章，主要通过vue-cli构建容器，并应用vue-router实现前端路由控制，应用vuex实现状态管理，以及通过axios的拦截器进行页面访问的权限控制，读者在阅读后，可以完成一个常规的后台管理应用模型。"}, {"id": "6844903906066038798", "title": "vue在混合开发中应用的思考", "desc": "我目前在做的一个项目，前端这块虽然说使用的是CS架构，但其实是C#提供了一层Chrome内核来运行app的。也就是混合开发的一种。现在的工作是将以前的jquery一把梭的开发模式转移到vue上来，这就带来了vue在混合开发中应用的思考。 像Android,WPF和IOS等等这些…"}, {"id": "6844903502347501576", "title": "Vue 2.5 中关于 TypeScript 的改变要来了！", "desc": "类型改进 自Vue2.0发布以来，我们一直在收到更好集成TypeScript的请求。从那时起，我们已经为大多数核心库（vue，vue-router，vuex）加入了官方的TypeScript类型声明。然而，当使用开箱即用的Vue API时，目前的集成还是有所欠缺。例如：TypeS"}, {"id": "6991673403421917214", "title": "重新过vue文档---实例生命周期钩子（一）", "desc": "生命周期钩子？？ 实例被创建是都要经过一系列的初始化过程：设置数据监听、编译模板、将实例挂在到DOM并在数据变化时更新DOM...,这一过程中会运行一些叫做生命周期钩子的函数。 生命周期的作用 写代码"}, {"id": "6970237564326248485", "title": "Vue.js组件简介及组件通信（1）", "desc": "组件简介 组件用于封装页面的部分功能，将功能的结构、样式、逻辑代码封装为整体。 提高功能的复用性与可维护性，更好的专注于业务逻辑。 组件使用时为自定义HTML标签形式，通过组件名作为自定义标签名。 组"}, {"id": "6844903927062724621", "title": "从零开始搭建 Vue 脚手架工具（一）", "desc": "在实际的开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具应运而生。它们功能丰富，但最核心的功能都是能够快速搭建一个完整的项目的结构，开发者只需要在生成的项目结构的基础上进行开发即可，非常简单高效。 接下来就让我们一来看看一个脚手架是如何从0开始搭…"}, {"id": "6918988755713916941", "title": "从0实现简易版的vuex", "desc": "想要更好的使用一个插件，可以尝试理解其实现的方式。 当然，了解一个优秀的插件，本身也会增强自己的能力。 本文，努力从零开始实现一个简易版的vuex，期间会用到很多编程思想，希望自己越来越灵活使用。 先可以用vue create xx创建一个项目，不带vuex的。 先看看，如果有…"}, {"id": "6844903518394908685", "title": "个人博客开发系列：Vue.js + Koa.js项目中使用JWT认证", "desc": "更多的介绍和说明，以及各种原理，我在此就不多赘诉了。JWT不是一个新鲜的东西，网上相关的介绍已经非常多了。不是很了解的可以在网上搜索一下相关信息。 Talk is cheap. Show me the code. JWT本质来说是一个token。在前后端进行HTTP连接时来进行…"}, {"id": "6844903583456952327", "title": "初体验egg-vue-singal-page", "desc": "egg在koa框架的基础上进行了封装，并集合了现今热门的vue、react框架，支持服务端渲染，可以说是全端开发的一个优秀实践。关于demo和api，可以在官网自行查看。这里只对本人觉得比较有意思的一些点进行总结。 egg为了统一前后端代码的构建，对webpack进行了进一步的…"}, {"id": "6844903927469572110", "title": "Vue基础篇：动态组件components和v-once指令", "desc": "使用v-show,则会只是隐藏在dom元素中，组件都会被创建。"}, {"id": "6844903729209016334", "title": "记一次简单的vue组件单元测试", "desc": "记录一些在为项目引入单元测试时的一些困惑，希望可以对社区的小伙伴们有所启迪，少走一些弯路少踩一些坑。 这并不是最终结果，测试vue单文件组件，当然少不了vue-test-utils，但是将它放在什么位置呢。 需要阅读vue-test-utils源码。 Chai是一个node和浏…"}, {"id": "6844903507883982861", "title": "用针对Vue的Onsen UI来提升滑动选项卡的用户体验", "desc": "滑动选项卡将内容分割成不同的页面，并且它允许用户使用手指将自己想要的页面滑到当前视图。那如果，在用户拖拽页面的同时，这个应用程序随着拖拽逐渐改变自己的外观呢？是不是听起来很酷炫但是有点难呢？让我们来看看用Vue.js实现有多么简单。"}, {"id": "6915609118342381581", "title": "搭建一个直接使用的vue项目", "desc": "最近要做个新项目，使用vue框架，从头搭了一个，平时从头搭的机会还真不多，有一些小坑，在这记录以下防止下次忘记。首先在要创建的目录下vuecreatedemo（node那些开发环境安装配置就不来了，网"}, {"id": "6844904199269023757", "title": "轻松掌握纯前端js框架---VUE Ⅳ", "desc": "一. 组件化开发 (1). 封装组件: 创建一个组件对象，添加到Vue大家庭中 (2). 在页面中使用组件：vue中的组件其实就是一个可重复使用的自定义HTML标签而已 (1). 当new Vue()扫描到不认识的自定义HTML标签时，会回vue家找有没有同名的组件对象 (2)…"}, {"id": "6968092547289710622", "title": "vue与react的数据绑定", "desc": "什么是单项绑定、双向绑定？ 单项绑定（例：react）：顾名思义，就是将model值绑定至视图层，更新model时自动更新视图。 双向绑定（例：vue）：用户在视图层操作数据的同时，model也被更新"}, {"id": "6909720261520523278", "title": "v-move指令，让元素可以随意移动，vue3+TS", "desc": "缘由还是写颜色选择器的完善，因为要有滑块功能。所以需要编写一个这么一个小东西。而且，以后页面中所有滑块都需要用到它吧。功能我已经写完了。需要的直接拿走。非vue3的用户自己改改。原理注意说明当前元素会"}, {"id": "6844904084487536653", "title": "开源项目vue-i18n的一次PR", "desc": "给开源项目做贡献，一方面能够增加自己看源码的积累，另一方面也是对自身代码能力的检验。因为开源项目本身已经是完整的项目，对于开源项目我们能贡献的大概分三种（docs文档、bug、feature新特性），其中难易度为 docs < bug < feature，但我提倡入手的时候可以…"}, {"id": "6844903940534829064", "title": "【Vue原理】Diff - 源码版 之 从新建实例到开始diff", "desc": "需要把旧节点和新节点比较，尽量找到最小差异部分，然后进行更新，这部分内容就是 Diff 的重点了，需要花费不少精力的。会放在其他文章进行记录"}, {"id": "6844903607964270605", "title": "前端开发思路超详解（Vue组件篇）", "desc": "其实不管是什么框架，在开发中都有一些比较常规和通用的东西，那就是思想，接下来我将从以下三个点并基于vue开发一个Slider（滑条）组件，在这里我默认大家都会基本使用vue，若对vue相关概念还不是很"}, {"id": "6921500585665658893", "title": "vue 项目使用html2canvas插件进行截屏（截取iframe页面的一部分）", "desc": "在项目开发中有一个需求，用户上传一个时间线的数据，通过选择不同的模板，将时间线数据可视化。用户保存这个文件时，将模板预览图截取作为文件的封面。 最终的结果就是把相应的DOM转换成一张图片传回后台。关键难点在于如何把DOM转换成图片。然鹅，最难搞定的那部分已经有了一个较为成熟的框…"}, {"id": "6909650719566102535", "title": "vuejs-base-interview", "desc": "整理一下vuejs的面试题。个人觉得框架方面还是要从源码原理出发，对于数据响应式，虚拟dom的源码原理应该刻意重复的练习。曾经看过某节目尤雨溪说自己学习的方法就是看源码写源码，大道至简。 Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -…"}, {"id": "6975872775151943710", "title": "【Vue2.x 源码学习】第十八篇 - 根据 render 函数，生成 vnode", "desc": "【Vue2.x 源码学习】第十八篇 - 根据 render 函数，生成 vnode；封装 vm._render；_s，_v，_c的实现；"}, {"id": "6921716980253163533", "title": "vue中toRef理解", "desc": "效果ref：toRef："}, {"id": "6844903984780558344", "title": "前端VUE2.6：如何对某个对象的一个属性进行watch监听？", "desc": "设置deep: true 可以监听到newAddData.ticketAmountTotal属性的变化，此时会给newAddData的所有属性都加上这个监听器，当对象属性较多时，每个属性值的变化都会执行handler。如果只需要监听对象中的一个属性值，则可以做以下优化：使用字符…"}, {"id": "6850418114808119303", "title": "深入剖析：Vue核心之MVVM原理其手动实现数据双向绑定", "desc": "当被问到Vue是如何实现数据的双向绑定，大部分人的回答是：其内部是通过Object.definedProperty()的get和set方法实现的。其核心原理是通过这个API实现，但是还是有必要理解整个过程的实现和其运行原理。 MVVM模式是Model-View-ViewMode…"}, {"id": "6914929602418704392", "title": "关于百度地图的一些使用（一）", "desc": "最近工作常常接触一些地图的显示，为了避免下次使用找不到也就做了个相对应的笔记。前面的初始化：一、画出一个城市的地图，举例广州效果图如下：周边可以加层边框完整程序如下其他的一些下次遇到再补上。。。"}, {"id": "6844903730903515150", "title": "前端技术周刊 2018-12-03：DOM", "desc": "Chrome 71 开始将试用 SXG 功能，它是由 IETF 提出，Web Package 协议规范下的 Signed HTTP Exchanges 功能的缩写。该技术使得一个第三方服务器可以直接向用户提供可靠资源，且不用与原站共享 HTTPS 证书密钥。🔗 Safari …"}, {"id": "6844903585977729038", "title": "在微信小程序里使用 watch 和 computed", "desc": "我们知道在 vue 里是通过 Object.defineProperty 来实现数据变化检测的，给该变量的 setter 里注入所有的绑定操作，就可以在该变量变化时带动其它数据的变化。那么是不是可以把这种方法运用在小程序上呢？ 实际上，在小程序里实现要比 vue 里简单，应为对…"}, {"id": "6969754917166645284", "title": "vue项目前端性能优化总结", "desc": "0. 路由懒加载 路由组件不使用直接引入，而是匿名函数返回形式，如下注释可以定义编译后的js文件名，在未进入该路由时此js文件的内容将不会被请求到"}, {"id": "6988891084155797518", "title": "Vue学习笔记 - 组件化开发 - 父子组件传值", "desc": "父向子传值 基本用法 父组件通过属性将值传给子组件 子组件通过props接受传递过来的值 props属性命名规则 在props中使用驼峰形式，模板中需要使用短横线形式。 字符串形式的模板没有这个限制。"}, {"id": "6844903577060638728", "title": "Vue生命周期详解+对应代码解析", "desc": "浏览器解析到这段代码的时候，自动执行beforeCreate => created => beforeMount => mounted方法，每当data的某个属性值更改了，比如==app.mes = \"hi\"==，自动执行beforeUpdate => updated方法。 当…"}, {"id": "6844903721051111437", "title": "10分钟快速精通rollup.js——Vue.js源码打包原理深度分析", "desc": "terser模块：用于Javascript代码压缩和美化。 我将这些基础知识点整理成一篇前置学习教程：《10分钟快速精通rollup.js——前置学习之基础知识篇》，感兴趣的小伙伴可以看看。 rollup-plugin-terser插件：代码压缩，取代uglify，支持ES模块…"}, {"id": "6979003415871356941", "title": "更标准的 vue 目录结构", "desc": "想重构下 Vue 的目录结构，希望更标准点，以后项目开发，都可以有一个大概的标准。 搜索了几篇文章： 最后总结的目录，打算以后项目使用： main.js 最终的目录结构： main.js App.vu"}, {"id": "6844903568240017422", "title": "vue 实现剪裁图片并上传服务器", "desc": "1. 图片选择与读取 创建图片对象，使用createObjectURL\b显示图片。 2. 在canvas中展示图片\b 根据图片大小，计算canvas宽高（data:cropperCanvasSize），以致图片能够在裁剪区域自适应展示，并确定裁剪的左上角位置（data:crop…"}, {"id": "6844903649580154894", "title": "VUE Cookbook 系列：实现可配置组合表单", "desc": "本案例将会讲解如何使用 vue.js + ElementUI 开发一个简单的 可配置组合表单 Demo。 在左侧新建表单区块，选择区块标题和表单组件类型后点击确定，会在中间区域生成一个块新的表单，右侧展示了所有表单的数据合并结果。 为了快速开发页面本项目使用 ElementUI…"}, {"id": "6844903772771221517", "title": " 深入认识 vue-cli：能做的不仅仅是初始化 vue 工程", "desc": "相信对于大部分使用过VueJS的同学来说，vue-cli是他们非常熟悉的一个工具。借助vue-cli，我们通过非常简单的问答形式，方便地初始化一个vue工程，完全不需要担心繁复的webpack、eslint配置等等。 但是，仍然有许多同学没有搞清楚vue-cli和vue工程之间…"}, {"id": "6912058687376850957", "title": "VUE3源码阅读笔记（二）---响应式", "desc": "上回，搞了一波vue3初始化流程的源码学习，其实那只是开胃小菜，学习初始化这部分源码能让我先了解到了vue3的基本架构，其次也让我更深入理解了vue3初始化的整个流程以及用法。学习源码的好处就是在这，之后做项目的时候用vue3在初始化碰到了啥问题就能够更快定位，这也算提升了自己…"}, {"id": "6867824057471991815", "title": "日事清的微前端实践", "desc": "日事清的web端从诞生之初就一直在用backbone进行开发，当时的包管理器还用的require.js，构建方案还是grunt。后来在2016年，我们把构建方案换成了webpack，但是考虑到整个团队的学习成本，也考虑到项目的稳定性，再加上为了快速上线，视图框架还是用的Back…"}, {"id": "6982110275914694670", "title": "vue-element-ui 树形子节点默认不关闭的问题", "desc": "树形控件的基本使用可以访问element-ui官方文档进行查看和练习。 现在测试人员提了一个需求，就是要在收缩父级部门的时候,把子部门的展开节点也要进行收缩。element-ui默认是不会把树的子节点"}, {"id": "6844903555036348424", "title": "前后端分离实践：基于vue实现网站前台的权限管理", "desc": "具体实现1、点击“登录”按钮触发登录事件其中异步触发的actionsLoginByEmail的处理内容如下：很容易看出想做的是将从服务器端拿到的token（唯一标示用户身份）放到浏览器本地Cookie"}, {"id": "6920521946757070862", "title": "Vue2.0源码分析：v-model双向绑定", "desc": "v-model指令可以用来在表单元素input、select等或者组件上创建双向数据绑定，既：数据的改变会驱动视图更新、视图的更新反过来又会影响数据的变化。 在directive指令章节，我们提到过v-model和v-show是Vue默认提供的全局指令，我们可以直接拿来使用。 …"}, {"id": "6996685248629047304", "title": "【Vue2.x 源码学习】第四十二篇 - 组件部分 - 组件挂载流程简述", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 一，前言 上篇，组件部分-生成组件的真实节点； 本篇，组件部分-组件挂载流程分析； 二，组件挂载流程分析 1，示例 全局组件：my-but"}, {"id": "6844903943374389256", "title": "从0开始搭建Vue组件库 fungwey-ui", "desc": "个人网站想要做一个类似 eleUI tabs 的效果，想着以后说不准别处也要用呢，而且以后可能还会有其他组件，索性就写一个自己的UI库吧。因为暂时还没想到要什么样式，所以目前没有css效果。 这里记录一下过程，只针对于个人网站定制需求进行开发。第一次发文讲不明白的我会继续修改 …"}, {"id": "6909699685972181000", "title": "uni-app+uniCloud 初体验", "desc": "写在前面最近公司不忙，抽空学习uni-app了解了下uniCloud开发相关，感觉未来云开发是个不错的方向，uniCloud是DCloud联合阿里云、腾讯云，为开发者提供的基于serverless模式"}, {"id": "6844903877695766536", "title": "【Vue原理】Props - 白话版", "desc": "你看到的，每一个 实例都会有 一个 _props 的同时，也会把属性直接放在 实例上。"}, {"id": "6896807654492995597", "title": "Vue 自检", "desc": "所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 例如 created: () => this.fetchTodos()。这是因为箭头函数绑定了父上下文，因此 thi…"}, {"id": "6844903557594873869", "title": " vue项目实现记住密码到cookie功能(附源码)!这只是demo", "desc": "觉得对你有帮助的话，star下哦。"}, {"id": "6925398633642721287", "title": "Vue中的watch和computed", "desc": "这里的例子,在computed中写上了一个计算函数,然后返回了data中数据的变化,在这里可以直接的使用这个函数即可得到在计算后的结果,但是在计算属性中是有缓存的,当数据没有变化时则不会再次进行计算."}, {"id": "6935354560718307365", "title": "手写一下Vue2.0 数据劫持", "desc": "一：搭建webpack简单的搭建一下webpack的配置。新建一个文件夹，然后init一下。之后新建一个webpack.config.js文件，这是webpack的配置文件。安装一下简单的依赖。在同级"}, {"id": "6955834410146988069", "title": "vue系列 -- 响应式原理", "desc": "原文地址：vue的双向绑定原理及实现 前言 本文主要介绍两大内容： vue数据双向绑定的原理。 实现简单版vue的过程，主要实现{{}}、v-model和事件指令的功能 vue数据双向绑定原理 vue"}, {"id": "6971099422549606408", "title": "Vue模板", "desc": "模板template三种写法 Vue完整版，写在html里 Vue完整版，写在选项里 Vue非完整版，配合xxx.vue文件 XML和HTML区别 XML里有闭合标签 Vue模板里有哪些语法 展示内容"}, {"id": "6844904104943157256", "title": "Render函数详解", "desc": "Vue通过创建一个虚拟的DOM来对真实的DOM节点发生的变化保持追踪。例如下面这行代码： createElement返回的并不是一个实际的DOM元素，它更准确的名字可能是createNodeDescription(创建描述Node)，因为它所包含的信息会告诉 Vue 页面上需要…"}, {"id": "6971076366544404510", "title": "Vue.js 源码（4）——变化侦测相关的API实现原理", "desc": "前言 因为 Object 和 Array 的变化侦测有一些缺陷，所以 Vue.js 又提供了 $set 和 $delete 方法。本文，我们将深入学习具体实现..."}, {"id": "6971018388831207437", "title": "【Vue2.x 源码学习】第五篇 - 数组的劫持", "desc": "【Vue2.x 源码学习笔记】第五篇 - 数组的劫持；性能考虑，Vue没对数组使用Object.defineProperty进行劫持；通过对能够导致原数组变化的 7 个方法进行拦截和重写实现数据劫持；"}, {"id": "6975066117949620255", "title": "再回首web", "desc": "android开发者又一次被内卷到web，内容包括，js基础 、ES6语法、vue语法糖、vue-cli脚手架、router、vuex等"}, {"id": "6895375463595081742", "title": "Vue3实战 开发TaskList App Demo", "desc": "掘金社区已经有一大堆Vue3入门了，所以本片文章不会侧重Vue3源码或Api分析，所以在实战前最好能看一下Vue3的特性和用法，本片文章主要记录一款无聊的App Demo😂，以及本人对Vue3的一些见解和踩坑点。 在Vue2.x中，this应该是出现频率最高的关键词了，thi…"}, {"id": "6844903909853511694", "title": "vue源码解析：nextTick", "desc": "vue中dom的更像并不是实时的，当数据改变后，vue会把渲染watcher添加到异步队列，异步执行，同步代码执行完成后再统一修改dom，我们看下面的代码。 可以看到，修改数据后并不会立即更新dom ，dom的更新是异步的，无法通过同步代码获取，需要使用nextTick，在下一…"}, {"id": "6844903811446734862", "title": "vue框架下部署上线后刷新报404问题解决方案", "desc": "给个警告，因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。"}, {"id": "6844903989645934600", "title": "Vue3响应式原理 - Ref/Reactive/Effect源码分析", "desc": "众所周知，Vue3使用ES6 Proxy替代ES5 Object.defineProperty实现数据响应式，这也是Vue最为核心的功能之一。Vue3相比Vue2.x，API变化很大，提出了Vue Composition API。但在响应式原理实现方面，源码依然还是依赖收集 +…"}, {"id": "6844903837619191816", "title": "Vue 中如何正确引入第三方模块", "desc": "上述代码 export 一个对象，对象包含一个 install 方法，该方法的参数是 Vue 构造函数，我们使用 Object.defineProperty 或 Reflect 的方法将 $echarts 定义到 Vue.prototype 中去。"}, {"id": "6844903558874136590", "title": "Vue | 一个支持数据抓取的JSON树组件", "desc": "一个将 JSON 字符串渲染成树形结构的 Vue2.x 组件，主要原理是利用 Vue 的递归组件，进行深度优先的先序遍历。不仅可以将一段不可读的 JSON 字符串转化为可读的树形结构，同时可用于抓取某一子树的数据。 通过 parent-data 传入父亲的数据，data 传入孩…"}, {"id": "6922321207635214350", "title": "Vue新老数据双向绑定比较", "desc": "因此，可以通过设置属性的 set 方法来实现监听数据变化的效果。 这样一看没什么问题， 但是当通过数组方法去改变值时，会发现并没有被 set 监听到。 因为我们是调用了数组方法，而不是通过 obj.b = [] 重新赋值，所以解法也简单：重写数组方法，让我们的数组去继承这些方法…"}, {"id": "6844904113172414477", "title": "如何实现一个vue组件库的在线主题编辑器", "desc": "一般而言一个组件库都会设计一套相对来说符合大众审美或产品需求的主题，但是主题定制需求永远都存在，所以组件库一般都会允许使用者自定义主题，我司的vue组件库hui的定制主题简单来说是通过修改预定义的scss变量的值来做到的，新体系下还做到了动态换肤，因为皮肤本质上是一种静态资源（…"}, {"id": "6971036585282240520", "title": "Vue组件全局注册和局部注册使用", "desc": "1. 全局组件用Vue.component()创建；局部组件在vue实例对象中的components字段注册 2.全局组件可以在任意vue实例对象下使用；局部组件只能在注册处的vue实例中使用"}, {"id": "6844903608706662413", "title": "让Vue也可以使用Redux", "desc": "上周末看Vuex源码，突发灵感，为什么都是Vuex啊。 这是一个用于帮助Vue使用Redux管理状态的插件。Redux是一个非常流行的状态管理工具。vue-with-redux为大家提供一个可以在Vue环境下使用Redux的途径。这回带来不同的开发体验。 Note: 你并不需要…"}, {"id": "6979447388381380615", "title": "Vue2与Vue3的双向数据绑定（二）", "desc": "Vue2采用了defineProperty Vue2.x实现双向数据绑定原理，是通过ES5的 Object.defineProperty，根据具体的key去读取和修改。其中的setter方法来实现数据"}, {"id": "6912771416026775565", "title": "用设计模式、this巧妙整理vue中的methods", "desc": "vue组件中，methods中只能定义函数，有时在开发过程中，一个组件的功能会比较多，导致定义了一堆的函数。这种情况下，methods里堆放了多个函数，占空间不说，调试时找起某个函数也不容易。今天介绍一个技巧来整理methods中的函数，让你的代码思路清晰，整洁清爽。 思路就是…"}, {"id": "6844903630546403336", "title": "深入MVVM模型带你理解Vue.js的双向绑定", "desc": "MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。 Vue.js 是一个提供了 MVV…"}, {"id": "6863087597711785998", "title": "[翻译] vue/next 指南——01安装", "desc": "When using Vue, we recommend also installing the Vue Devtools in your browser, allowing you to inspect and debug your Vue applications in a…"}, {"id": "6844903591233191949", "title": "Vue Element使用icon图标教程详解(第三方)", "desc": "element-ui自带的图标库还是不够全，还是需要需要引入第三方icon，自己在用的时候一直有些问题，参考了些教程，详细地记录补充下 对于我们来说，首选的当然是阿里icon库 教程"}, {"id": "6966847169744371720", "title": "video标签在ios上出现的问题", "desc": "问题： 问题1：简单使用video标签，在安卓上会正常,进度条的UI也可以接受。但是在ios是上会出现播放完视频后出现黑屏情况并且存在点击视频会进行全屏放大，进度条UI也和安卓的显示不一样并且会出现音"}, {"id": "6844903622250070030", "title": "说说vue项目中自动添加前缀的那些事", "desc": "如此一来,我们便不再需要手动写私有前缀,这样极易出错,写起来也很累.即使我们通过less/sass等定义一些minxin.less来出来兼容的问题,还是没有这种方式暴力. 那么假如我想改变一些兼容的需求呢,例如我对某个浏览器的某个版本需要兼容或者其他兼容需求,我们可以自行配置。…"}, {"id": "6844903550921736206", "title": "从搭建vue-脚手架到掌握webpack配置（三.多页面构建）", "desc": "postcss官方的GitHub上还有中文的介绍。 简单来说postcss就是一个css的转换器，有了postcss或许你就不用再用less和sass了，通过在postcss上添加插件可以组装出你需要的语法需求和功能（属性变量，父子嵌套，版本兼容等），在postcss上通常会用…"}, {"id": "6844903693410648071", "title": "手把手教你发布一个vue组件到npm上", "desc": "直接存放到项目中(需要在不同的项目中拷贝)发布到npm上公用的模块,一、依赖环境1、node环境2、vue-cli的脚手架二、使用vue-cli构建一个项目及基本配置1、创建一个基本的项目2、项目的基"}, {"id": "6973564457834250247", "title": "vue2.0项目CSS3动画打包后动画失效解决办法", "desc": "前言 vue2.0 + webpack做项目时，css3动画打包前正常，打包后失效 原因 vue-cli脚手架package.json配置文件里面对浏览器的版本做了css的前缀处理 意思是 只兼容主流"}, {"id": "6932815738562592775", "title": "[译] Vue3 Composition API", "desc": "1. Why the Composition API 1.1. why the composition api 如果你对新的Vue3 Composition API引起了一些困惑，那么在本课程结束时，应该明确为什么Vue 2的局限性导致了它的产生，以及它如何为我们解决了一些问题…"}, {"id": "6844903860562034695", "title": "vue keep-alive组件的使用", "desc": "最近自己在写vue练习，内容相对简单，主要是对vue进行熟悉和相关问题发现，查漏补缺。简单说下练习的项目内容及问题的产生： 练习使用的vue-cli 2.0脚手架搭建，内容就是简单的仿音乐播放app，功能也相对简单，大体就是单页router切换各个专辑列表，点击进入专辑内容页面…"}, {"id": "6940960360224522254", "title": "vue中的路由懒加载", "desc": "1. 当进行打包构建应用时，打包后的代码逻辑实现包可能会非常大。 2. 当我们把不同的路由对应的组件分别打包，在路由被访问时再进行加载，就会更加高效。 1. 将路由对应的组件加载成一个个对应的js包 。 2. 在路由被访问时才将对应的组件加载。"}, {"id": "6882407216704880653", "title": "一文看懂 Vue.js 3.0 的优化", "desc": "monorepo 把这些模块拆分到不同的目录中，每个模块有各自的API类型定义和测试。这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性。 使用Flow做类型检查，Flow 是 Facebook…"}, {"id": "6844903597528842248", "title": "从零开始做Vue前端架构（6）单元测试 & 代码覆盖率", "desc": "之前因为上家公司的经营出了问题，年前的大裁员，过了一个漫长的春节。 之后加入了新公司，然后正好赶上一个很紧急的项目，忙成狗，因此好久没更新文章了。 其实，单元测试一般用在写公共包的时候，比如通用的js函数库，通用的UI组件库。基本不太会在做业务项目的时候还使用单元测试。 然后，…"}, {"id": "6991724268274843685", "title": "Vue重学 Day1", "desc": "Vue基础 初体验 效果 列表展示 效果展示 浏览器追加数据 app.movie.push('海王') 效果 什么是MVVM? mvvm简述 MVVM(Model-view-viewmodel)是一种"}, {"id": "6991703456624934943", "title": "ElementUI 03 - 表单重置和表单验证", "desc": "ElementUI的表单如何重置，通过调用resetFilels方法来实现。如何对整个表单的数据进行校验，则需要validate方法。"}, {"id": "6844904178339315719", "title": "小小试水—npm上传自己的vue组件", "desc": "因为新增了packages目录，目录未加入webpack编译，默认不被webpack处理。 chainWebpack链式操作，加入packages目录。 可以看到，多出了一个lib文件夹。 若没有账号，前往npm 官网注册账号。 不要忘记用户名和密码哦。 我们可以在scrpit…"}, {"id": "6844903998835654670", "title": "Vue cli3 lib模式封装alioss图片上传组件并发布到 npm", "desc": "通过vuecli3创建一个初始化项目，具体可以查看官网。https://cli.vuejs.org/zh/guide/creating-a-project.html 我们需要一个文件夹存放组件，一个文件夹存放示例，按照以下方式对目录进行改造。 注：vue.config.js 是…"}, {"id": "6920156269177372686", "title": "element table标题栏自定义样式", "desc": "Vue 推荐在绝大多数情况下使用模板来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力。这时你可以用渲染函数，它比模板更接近编译器。 简单的说，在 Vue 中我们使用模板 HTML 语法组建页面的，使用 Render 函数我们可以用 Js…"}, {"id": "6983953795810066462", "title": "按照vue的用法封装react路由", "desc": "前言 习惯了vue的小伙伴可能对react中路由的使用感到不习惯。在vue中，我们可以下面的方式配置路由并绑定组件。 并在页面中用<vue-router>给路由组件占位。这使得不同页面的嵌套路由结构十"}, {"id": "6844903668546797575", "title": "Event Loop 其实也就这点事", "desc": "前段时间在网上陆续看了很多关于 Event loop 的文章，看完也就混个眼熟，可能内心深处对这种偏原理的知识有一些抵触心情，看完后也都没有去深入理解。最近在看 Vue 的源码，在读到关于 nextTick 的实现时，总有一种似曾相识的感觉，于是去网上查了下资料，原来 next…"}, {"id": "6844903633989943309", "title": "H5数字键盘组件适配React/Angular/Vue", "desc": "为什么不直接使用系统键盘？H5键盘和H5页面完美适配，没有挤压页面的问题解决系统键盘不支持autofocus的问题自定义键盘布局，定制化输入体验产品需求你怕不怕这个轮子有什么好？支持原生JS、Reac"}, {"id": "6844903598124433415", "title": "vue 组件使用中的细节点(你极有可能遇到但却不知所措小问题)", "desc": "在H5的规范里面，要求我们 table 里面有 tbody, tbody 里面必须得放 tr,而现在我们使用子组件里面写成 row, 所以我们的浏览器在解析的时候就会出问题。 那么我们一旦遇到这种情况出现 bug 要怎么解呢？ 这时候我们可以借助 vue 提供的 is 属性来解…"}, {"id": "6844903506671828999", "title": "记vue大型表单项目的一个性能问题", "desc": "身为一个表单表格工程师，自然日复一日的写着表单表格，本以为已经没啥难点的时候转眼间就来了一个有意思的情况，在超大量 数据绑定在 vue 的时候出现了表单操作起来卡顿的情况。 这里先贴上本项目出现的情况演示的 github 上的地址，tag1.0.1 如图所见，当在 input …"}, {"id": "6963525414580928542", "title": "Vue2.x中父子组件通信", "desc": "简单介绍一下vue2.x中，父子组件间的通信，通过项目代码来进行剖析。可能了会有的不好的地方，请多多包涵"}, {"id": "6895625035281596424", "title": "Vue2.0源码分析：组件化(下)", "desc": "由于掘金文章字数限制，不得不拆分上、下两篇文章。 在之前的章节中，我们介绍了_render方法及其createElement和createComponent的逻辑，知道_render返回的是一个VNode树形结构。而_update方法的作用就是利用这个VNode树形结构，来生成…"}, {"id": "6975069593719013389", "title": "vue自定义事件-将原生事件绑定到组件", "desc": "问题 在父元素中使用子组件，在子组件上绑定如点击事件，希望这个点击事件直接绑定到子组件元素上。 解决方式 使用.native修饰符 不加.native修饰符，发现点击时，并不会触发点击事件，也不会执行"}, {"id": "6975063400753659917", "title": "执行 setup 时，组件实例真的如官方所说未创建？", "desc": "Vue.js 官网 结论的一处的错误 一、前言 二、验证这个错误 正所谓了解真相，方能自由。探索这个问题的对错必须依赖 Vue3源码 下载 vue-next 源码 在整个源码中核心文件： runtim"}, {"id": "6844903601899503624", "title": "构建vscode的vue组件代码补全插件以及上传", "desc": "照着葫芦画瓢就行。 我们需要做的就是把每一个组件的信息拿出来，按snippet的格式输入到snippet.json文件中去，如何从组件库中提取每一个组件对应的props呢，当然不是手工收集这种蠢蠢的方式，程序员的方式当然是用代码工具避免重复劳动。我的想法是写一个工具方法从组件中…"}, {"id": "6906772870601375758", "title": "vue echarts饼图封装以及同一个组件2个饼图不加载问题解决", "desc": "--- # 主题列表：juejin, github, smartblue, cyanosis, channing-cyan, fancy, hydrogen, condensed-night-purp"}, {"id": "6844903496001519623", "title": "vue2 + vue-router+ es6，vue2最新SPA项目实战-仿懂球帝-爆炸足球", "desc": "Vue2—爆炸足球模仿懂球帝移动端官网，欢迎各位童鞋stargithub地址：https://github.com/vqlai/vue2-football技术栈前端es6vue2vue-router2"}, {"id": "6882551569200939022", "title": "nodejs 制作从远程仓库下载项目的简易脚手架", "desc": "1.commander:解析用户命令行输入和参数，简化简化命令行开发。 2.chalk：美化命令行的模块。 4.fs-extra：fs-extra是fs的一个扩展，提供了非常多的便利API，并且继承了fs所有方法和为fs方法添加了promise的支持。它应该是 fs 的替代品 …"}, {"id": "6988673552912236552", "title": "vue中不用插件实现复制功能方法", "desc": "copyUrl(data){ let url = data; let oInput = document.createElement('input'); oInput.value = url; doc"}, {"id": "6844903581196222478", "title": "一个vue-cli创建项目webpack相关都配置合简介", "desc": "使用vue-cli 脚手架创建，其实很简单的，主要是和后台合作，项目整合在一起。开发者了解webpack的相关配置非常有利于项目构建。如果搞不懂的话，自己可以去尝试修改配置查看效果。"}, {"id": "6899425621726887949", "title": "把vuecli源码翻了个遍，最后跪在了IDE", "desc": "今天这个事吧，由来已久。前些日子，团队同学抱怨，vue-cli4配置alias怎么不管用，引用模块必须使用默认的`@`别名才可以，直接使用模块名配置不生效，举例如下。当模块路径很长的时候，开发同学写起"}, {"id": "6844903925343223822", "title": "d2-crud使用心得", "desc": "近期主要在做后台管理系统，里面大量使用表格，由于要求表格能够实现增删改。其实如果时间充裕，自己封装是最好的，但是很显然，3天时间业务都写不完，还封装个毛线。 开启后会每次blur的时候，会激活CellDataChange这个事件，这个事件会返回一个对象，可以直接解构. 当输入完…"}, {"id": "6844903608115265549", "title": "jtalk第七期前端场--收获分享", "desc": "本次分享主要是三个主题吧，一个是阿里通信染陌大神渐进式pwa的入门级介绍，一个是有赞连成杰分享涉及前后端协作的技术产物zanProxy和zanApi的部分，一个是宋小菜--scott老师关于前端一些方法论的分享。 然后我自己的话大概前端做了三年多一点，分享下自己的感受吧，有整理…"}, {"id": "6844903968783466510", "title": "Electron + Vue + Vscode构建跨平台应用（三）利用webpack搭建vue项目", "desc": ". 引入 required 模块 这个就跟java当中的import一样 . 创建服务器，通过这个我们可以简单开发一个服务端程序，你在开发移动App的时候，就不用费心思去让服务端同学配合你了，自己搞定就好 . 接收请求与响应请求 . vue help ： 查看vue可用命令 .…"}, {"id": "6981689583448621070", "title": "Vue基础入门", "desc": "Vue.js 介绍 Vue.js是什么? Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计 为可以自底向上逐层应用. Vue"}, {"id": "6844904093626925063", "title": "vue nextTick 引发的思考", "desc": "很显然，解决问题的关键是 this.$router.replace 和 this.$nextTick，要分析这个问题必然要分析两者的执行逻辑。 没办法，只能打断点看源码调试了，具体函数调用栈这里就不赘述了。路由403在项目 router.ts 中的定义为： this.$rout…"}, {"id": "6968802094920761381", "title": "指令:为HTML添加新功能的特殊属性", "desc": "1.v-bind (1).问题 如果元素的属性值可能随变量自动变化,则不能用{{}} (2).解决 a.标准 <元素 v-bind:属性名 = \"js表达式\"> b.原理 new Vue()在扫描页面"}, {"id": "6917545251242508295", "title": "vue+node(express)做中间层开发一", "desc": "vue+node(express)做中间层开发1 * vue v2.9.6 * vue-cli * iview * node v15.4 * express v4.16.1 * axios v0.18"}, {"id": "6923108689364647950", "title": "computed 和 watch", "desc": "在使用了computed之后我们就不要在每点击一个按钮之后再去写相应的逻辑了，computed让我们的代码变得更加清晰了。但是如果以来的属性没有发生变化，就不会进行重新计算，也就是我们的computed是默认有缓存的，还是上面的例子我们第一次点击：全部，男，女的时候，displ…"}, {"id": "6844904071485194254", "title": "💡（二）虚拟dom+diff--vue源码动手写系列", "desc": "Virtual DOM是对DOM的抽象, 在Web中我们用JS对象来描述DOM，把DOM从浏览器抽离出来后，我们得到一个更加轻便且灵活的描述对象，不依赖于HTML解析器我们更加容易做到组件的复用和跨平台。虚拟DOM相当于一个中间层，连接我们编写的代码和真实的DOM，在真实渲染之…"}, {"id": "6909072159051251720", "title": "手写vue-Router源码", "desc": "前言个人学习过程中的记录，方便后续的复习，如果有错误或者更好的方法，希望大佬指出路由跳转过程页面的url变化（点击浏览器的箭头，直接输入地址，或者根据mode的不同，如history模式通过windo"}, {"id": "6844904023699505160", "title": "【译】vue-loader是怎么工作的", "desc": "vue-loader不是简单的源转换器。它用自己专用的加载链（你可以认为每个块是虚拟的模块）处理SFC(Single-file Component 单文件组件)内部的每个语言块，最后将这些块组成最终的模块。这是整个过程的简要概述 我们想要script的内容被视为.js文件（如果…"}, {"id": "6920968219893170184", "title": " Vue.js 源码剖析 - 虚拟 DOM", "desc": "虚拟 DOM(Virtual DOM) 是使用 JavaScript 对象来描述 DOM，虚拟 DOM 的本质就是 JavaScript 对 象，使用 JavaScript 对象来描述 DOM 的结构。应用的各种状态变化首先作用于虚拟 DOM，最终映射 到 DOM。Vue.js…"}, {"id": "6844903637018230791", "title": "让在Vue中使用的EventBus也有生命周期", "desc": "最近遇到了vue项目中的性能问题，整个项目不断的进行操作五分钟左右，页面已经很卡，查看页面占用了1.5G内存，经过排查一部分原因，是自己模块使用的eventBus在离开页面未进行off掉。我们进行下验证： 我们在home首页的代码是这样的： (1)在home页时：我们拍个内存快…"}, {"id": "6844903854077640717", "title": "[Vue.js进阶]从源码角度剖析vue-router（二）", "desc": "这个函数只是被定义了，并没有执行，但是我们可以通过函数体观察它是如何加载异步路由的。同样通过 flatMapComponents 遍历新增的路由记录，每次遍历都执行第二个回调函数 可以看到成功回调里 vue-router 又往 queue 中添加了路由守卫，同时会开启第二轮遍历…"}, {"id": "6844903556860870664", "title": "聊聊我对现代前端框架的认知", "desc": "聊聊我对现代前端框架的认知现在前端界有三大框架横行，Vue，React，Angular，几乎是所有身为一名前端工程师所必备的一项技能。但是我不知道有多少人仔细思考过为什么会这样？现在的一些应届生和刚入"}, {"id": "6901180550401409038", "title": "vue2.x从零到一的搭建自己风格的后台管理系统 - 项目整体布局", "desc": "页面文件布局和vue-element-admin保持高度一致，但是内容相对减少了许多，还是那句话，根据vue-element-admin修改成适用自己的框架。 这个是页面布局大致样子，可以根据自己的喜好去调整。简单介绍一下，左边aside是侧边栏，header中，左边是面包屑，…"}, {"id": "6844903517392470024", "title": "Promise 与 Confirm 提示框", "desc": "Promise 是 ES6 新引入的对象。使用 Promise 封装一个异步过程，避免了使用回调函数，链式调用让代码更加清晰。 1. Promsie 的基本概念 Promise 对象是个构造函数，通过 new 创建一个 Promise 实例。 pending: 初始状态，不是成…"}, {"id": "6906324370658951181", "title": "浅谈Vue3新特性", "desc": "Vue3的release版本已发布一段时间了，新的Vue3在语法以及底层都进行了全新的重构，带来了更快的运行速度，更小的构建包，更友好的编程规范，让我们来看看有哪些变化吧。 组件patch的时候，需要重新创建整个vdom树，然后遍历整棵树进行diff，update... ...…"}, {"id": "6934342516107902990", "title": "Vue源码，你真的看懂了吗（五）", "desc": "在使用 Vue 的时候，要使用 new 操作符进行调用，这说明 Vue 是一个构造函数。 如上面代码所示，首先分别从 ./init.js、./state.js、./render.js、./events.js、./lifecycle.js 这五个文件中导入五个方法，分别是：ini…"}, {"id": "6989445257717334024", "title": "vue——created与activated的区别", "desc": "keep-alive生命周期钩子函数：activated、deactivated 　　使用<keep-alive>会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在activate"}, {"id": "6844904185343770632", "title": "你也说slot,我也说slot", "desc": "slot使用这一章节主要代用代码解释匿名slot具名slot作用域slot匿名slot首先定义两个组件一个子组件一个父组件然后我们可以看到浏览器是这样渲染的slot就是允许父组件向子组件插入一些内容的"}, {"id": "6844904079685058568", "title": "结合vue源码复习javascript寄生组合式继承", "desc": "2019年本命年已经够坎坷了，没想到2020开局更难，因疫情原因，公司公告说为了可持续发展，1月工资要等疫情稳定后在发放，当时心里就不平衡，本来打算再好好干半年，公司这边操作真是猝不及防，那好吧，第二天我直接提了离职继续在家躺尸，躺了20多天也累了，昨天回了长沙，准备好好复习一…"}, {"id": "6990045611814813703", "title": "computed 和 watch的区别以及如何使用？", "desc": "1.computed 和 watch的区别以及特点 computed是计算属性，watch是监听 computed是用来计算一个值的，有缓存（依赖不变，值不重新计算） 不需要加括号 watch有俩选项"}, {"id": "6844903989687894029", "title": "Vue、MVVM、MVC、双向绑定", "desc": "Mvvm定义MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。 【模型】指的是后端传递的数据。 【视图】指的是所看到的⻚面。 【视图模型】mvvm模式的核⼼，它是连接view和model的桥梁梁。 1、是将【模型】转化成【视图】，即将后端传递的数…"}, {"id": "6898887568318791687", "title": "vue原理浅析", "desc": "使用正则等方式解析模板，生成词法树，优化之后生成render函数，然后生成VDom对象，再通过h函数生成真实Dom节点，最后通过patch函数渲染到页面，另一个核心是响应式，使用Object.defineProperty，在模板解析的时候使用其getter方法进行依赖收集，将相…"}, {"id": "6844903582211244045", "title": "换个姿势上传？el-upload + qiniu-js 的实现", "desc": "关于element-ui的el-upload，实际上issue中提到的次数也不少，很多初试者可能 get 不到愉快使用的点，提了issue之后又大多因为规范问题直接被机器人过滤或者关闭。例如最近一次相关的issue是想寻求关于http-request的使用，但也因为规范问题被直…"}, {"id": "6844903598229291016", "title": "Today：基于 Electron 和 Vue.js 的 GTD 应用", "desc": "这是我的一个 side project。今天发布了第一个预览版本 v0.0.2，欢迎访问 GitHub 上面的 Repo 获取试用下载（目前仅为 Mac 用户提供 build），并提供你们的宝贵意见和建议，欢迎 star。另外，如果你对 GTD 感兴趣，请联系我参与到这个项目的…"}, {"id": "6902214639984050183", "title": "Vue源码之依赖收集", "desc": "收集依赖的⽬的是为了当这些响应式数据发生变化，触发它们的 setter 的时候，能知道应该通知哪些订阅者去做相应的逻辑处理，一个key创建一个Dep管家,管家里面存放着与key相关的Watcher。 当对数据对象的访问才会触发他们的 get ⽅法，那么这些对象什么时候被访问呢？…"}, {"id": "6916141503941181448", "title": "Vue-Router核心实现原理", "desc": "点击home，form，helloWorld可以切换路由页面。 我们需要明白的是，router-link和router-view是两个Vue全局组件,必定是在vue-router中实现了全局定义两个组件，他们分别用来跳转路由和展示路由对应的组件内容。 我们点击了router-l…"}, {"id": "6844903702709420046", "title": "用Vue来进行移动Hybrid开发和客户端间数据传输的一种方法", "desc": "JSBridge是前端和客户端交互的核心概念，下面就分享一下我们的经验，因为目前android设备一般都是4.4以上系统，故我们直接废弃了protocol自定义协议的交互方式，直接使用上下文方式，这点需要客户端开发人员注意。"}, {"id": "6844903815099973639", "title": "快速实现一个基于Vue的APP自助拼装自助打包的平台", "desc": "我们公司有一款app，它有一些通用化的功能，也存在一些根据客户需求定制化的一些功能，同时还会不定时升级，功能拆分组装等，这种就会出现遗漏升级，重复开发，出错率也会增加。所以我就想实现只写一套代码，通过勾选☑️的配置方式实现非技术人员也可以自助生成app，这样释放了劳动力，也提高…"}, {"id": "6934623909027250190", "title": "vue与require开发", "desc": "最近开发了一个单页面应用，但不是基于vue-cli开发。 项目整体使用ES5开发，采用将require与vue相结合的AMD开发模式。 1、RequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用，提高代码的加载速度和质量。 2、Vue是一套用于构建用…"}, {"id": "6978276845196148772", "title": "ElementUI中el-from验证el-upload上传的文件", "desc": "解决了ElementUI中el-form验证el-upload上传的文件的验证问题，欢迎大家来阅读。"}, {"id": "6978136375182770184", "title": "Composition API", "desc": "Vite 简单介绍 Vite在开发环境下不需要打包，开发模式下vite使用浏览器原生支持的ES Module的方式加载模块 Vue-Cli 在开发模式下必须对项目打包才可以运行 vite开启的web服"}, {"id": "6844903824424091655", "title": "vue的数据劫持以及操作数组的坑", "desc": "vue是构建用户界面的渐进式框架。所谓的渐进式：vue + components + vue-router + vuex + vue-cli可以根据需要选择相应的功能。 来串命令mkdir vue-apply;cd vue-apply;npm init -y;npm i vue…"}, {"id": "6978055571857489956", "title": "vue后台管理项目总结", "desc": "一、项目搭建 使用Vue-CLI4.x命令行工具创建Vue.2.x工程 1.使用小皮面板创建数据库 方法一：电脑应用搜索cmd--->右键以管理员身份运行--->输入sc delete mysql s"}, {"id": "6886429830535970829", "title": "构建简单的 Vue 3 响应式系统", "desc": "我们将了解新的 Vue 3 响应式系统（reactivity system）。了解它是如何从头构建的，将帮助您理解 Vue 中使用的设计模式，提高您的 Vue 调试技能，使您能够使用新的 Vue 3 模块化响应式库，甚至自己编写 Vue 3的源代码。 在本节课中，我们将使用与 …"}, {"id": "6977977999203237902", "title": "Vue绑定class / 绑定内联样式", "desc": "使用v-bind:class动态绑定class；使用v-bind:style动态绑定内联样式；可以选择使用对象语法或数组语法输入想要绑定的值"}, {"id": "6844904067236364296", "title": "解决 | iview低版本实现表格拖拽，滚动条列宽计算问题", "desc": "\"iview\": \"2.13.0\"由于一些原因，版本并没有升级【os：不要问我什么原因~】。 由于列数较多，用户想要自己拖拽列宽来更好的对比某些数据。但是，拖拽功能在iview新版本4.0.0+才实现的。 查看渲染出来的实际表格宽度与设置的表格宽度是相差一些宽度的。此时，每一列…"}, {"id": "6844904065705443336", "title": "Vue源码阅读（三）：数组的响应式处理", "desc": "回答这个问题，实际上回答的是：Vue 的数据响应式原理有什么限制？理解了 Vue 的数据响应式原理的限制，就可以很好回答这个问题。 在实际使用 Vue 的过程中，对于响应式 Data 的声明，必须将需要响应的各个属性都逐一在声明阶段写清楚。如果对于一个响应式的 Object，动…"}, {"id": "6844903495699693576", "title": "自建vue组件 air-ui (1) -- 为啥我要自建一个类 element ui 的组件", "desc": "最近的一个月大部分时间都在忙这个事情，就是以 element ui 为基础，做一个属于我们自己的 vue 组件库，并且扩展。 现在已经完成了。并且已经成功替换原项目里面的 element ui 组件，并且开始要编写其他的 element ui 组件没有的组件。 因为要完整兼容我…"}, {"id": "6907811400320548871", "title": "学透作用域链", "desc": "查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。"}, {"id": "6844903511868571661", "title": "Vue2 源码漫游（一）", "desc": "先通过normalizeProps、normalizeInject、normalizeDirectives以Object-base标准化，然后依据strats合并策略进行合并。 strats是对data、props、watch、methods等实例化参数的合并策略。除此之外还有…"}, {"id": "6844903568525230087", "title": "webpack深入——使用篇（二） | 席小白的边缘世界", "desc": "水平有限，欢迎批评指正 目录： webpack深入 ——使用篇（一） 在我们打包项目时，除了js文件之外，还有许多其他类型的文件，比如css，less，ts以及图片等资源都是需要打包进去的，webpack默认是不识别其他类型的文件或者说是模块的，是通过 各种不同的loader…"}, {"id": "6844903589702270984", "title": "vue nextTick深入理解－vue性能优化、DOM更新时机、事件循环机制", "desc": "一、定义［nextTick、事件循环］　　nextTick的由来：　　　　由于VUE的数据驱动视图更新，是异步的，即修改数据的当下，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一"}, {"id": "6844903581254942727", "title": "vue项目使用WebViewJavascriptBridge", "desc": "现在在做的项目是 hybrid 开发，H5 页面会嵌入到 IOS 客户端 app 中，于是就涉及到了 H5 与 IOS 交互的问题。在这里记录一下项目中用到的交互方式，重点介绍 WebViewJavascriptBridge。 项目中最简单的一个交互需求，是在客户端打开 H5 …"}, {"id": "6844903876655579143", "title": "「组件」设计一款Collapse组件", "desc": "最近在使用Vue+TypeScript鼓捣自己的组件库，期间参考不少（抄😂）element，iview的源码。发现了一些常用的功能的背后，往往是复杂的实现。于是准备写一系列文章，介绍这些组件背后的原理。今天是第三篇，手把手带你实现Collapse组件。 参考iview和ele…"}, {"id": "6926474077389455367", "title": "[Vue源码]学习一下Vue常用API的源码(一)", "desc": "最近阅读Vue源码，从打包的入口文件开始阅读，学到一些API的内部源码，这里分享一下自己的理解。 用于安装Vue插件，例如vue-router、vuex。 如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install …"}, {"id": "6898992479765757960", "title": "【果汁啃源码系列】面向未来的前端构建工具--Vite ", "desc": "大意是说 vite 是一个基于浏览器原生 esmodule 的特性来工作的前端开发构建工具，并且通过 rollup 来实现生产打包，也就是说，本身 vite 是不需要将 import/export 等es语法转成 AMD 规范让浏览器去读取，而靠浏览器原生的引模块的能力去引入，…"}, {"id": "6931244699357282311", "title": "虚拟DOM与diff学习总结", "desc": "​ 用javaScript对象描述DOM的层次结构.DOM中的一切属性都在虚拟DOM中有对应的属性. 只能是同一个虚拟节点,才进行精细化比较.否则就暴力删除旧的DOM节点,插入新的DOM节点. 命中一种就不再进行命中判断了. 如果都没有命中,就需要用循环来寻找了."}, {"id": "6947589511563968549", "title": "【vue】异步组件是怎么渲染的？", "desc": "为了更好的说明，异步组件会在1分钟后被resolve。 在runtime版的vue入口文件中$mount是这样定义的。这里提一下compiler版的vue入口重写了$mount方法，多了一个将template编译成render方法的过程，因为接下来的逻辑render是一个很重要…"}, {"id": "6844903919911436296", "title": "VueCli3 MPA 多页面配置", "desc": "5. vue 模板文件"}, {"id": "6844903502917926920", "title": "vue移动助手实践（四）——分分钟自定义一个属于自己的vue组件(基于Vue的侧边栏和返回顶部组件)", "desc": "嗯，在写之前，我先说一下，我会这篇文章中写下面三个小组件中的其中两个。分别如下所示: 在编写组件的时候，复用组件是很有好处的。可复用组件应该有一个清晰的公共接口。 props: 允许外部环境传递数据给组件。 Events: 允许组件对外部环境产生副作用。 Slots: 允许外部…"}, {"id": "6930963373978812430", "title": "[vue3 vs vue2] Async Components", "desc": "当项目越来越大当时候我们需要考虑性能优化，一般采用两种方式。 在 vue 2.x 就支持异步组件，在看异步组件之前我们来看下普通的静态引入的方式使用的组件。 上面代码中，无论是否用到 Book 组件，都会加载该组件。 由于我们使用了Dynamic imports 的方式在路由中…"}, {"id": "6844904201739304967", "title": "被写烂了的Vue组件通信", "desc": "在编写Vue的代码时，组件间的通信是永远绕不开的话题。在日常的开发中，最常见的当属父子组件间的通信，除去父子组件，还有兄弟组件等。通信的内容包含数据的传递和事件的传递，即要搭建不同组件间的桥梁。 虽说写烂了，但个人感觉这篇也没写得多好。日后有新的东西会更新到文章中。 props…"}, {"id": "6976503564583567373", "title": "Vue3.0源码逐行解析(三) 响应系统", "desc": "Vue2 跟Vue3 的响应式系统概念从框架本身来看没有任何的改变。 我们来回顾下 Vue2 说: Vue3说: 虽然概念相似但底层实现方式却有本质的不同， Vue2 采用的是 ES5 Object."}, {"id": "6933158767970222093", "title": "Vue Router最常用的小tips～", "desc": "根据你的 history 栈 来的，如果是-1，表明就是返回上一级。"}, {"id": "6920251051488739341", "title": "Vue wangEditor增加自定义字号", "desc": "用wangEditor还没休闲两天，新的需求来了（全沾工程师是这样的），需要在原来的基础上新增多几个字号，但是wangEditor官网明确写着菜单配置的字号数量只能减少不能增加，看来只能自己动手丰衣足食了。 从结果来说是实现了这么一个功能，但是操作的话和整个富文本编辑器格格不入…"}, {"id": "6844903656710471694", "title": "[译] 如何向带有插槽的 React 组件传递多个 Children", "desc": "假如你需要写一个可以重复使用的组件。可是呢，名为 children 的 prop 不能解决这个需求。这个组件得有能力接收不止一个 children，而且这些 children 的放置还不是相邻的，而是按照需求而定。 可能你在写的是带有一个标题、一个边栏和一个内容区块的名为 La…"}, {"id": "6844903599932178439", "title": "帮助你开始理解async/await", "desc": "一边学习前端，一边通过博客的形式自己总结一些东西，当然也希望帮助一些和我一样开始学前端的小伙伴。 async/await使用同步的思维，来解决异步的问题。 async可以直接接收传递的变量，但是peomise的then是独立作用，如果要取值，就要将部分数据暴露在最外层，在 th…"}, {"id": "6932726705521950733", "title": "vue源码解析-$mount", "desc": "上一篇中，我们一起探讨了new Vue({...})背后发生了什么。那么当我们实例化vue之后，进行dom挂载又发生了什么呢？ 一. $mount 主干代码如下： 如果没有手写render函数， 那么先获取template内容。再将template做为参数，调用compileT…"}, {"id": "7001484797889478687", "title": "一、邂逅Vue.js", "desc": "一、邂逅Vue.js 1.遇见Vue.js 为什么学习Vue.js 我相信每个人学习Vue的目的是各部相同的。 可能你的公司正要将原有的项目使用Vue进行重构。 也可能是你的公司新项目决定使用Vue的"}, {"id": "6844903834104365063", "title": "[译] 基于虚拟DOM(Snabbdom)的迷你React", "desc": "React 是 JavaScript 社区的新成员，尽管 JSX （在 JavaScript 中使用 HTML 语法）存在一定的争议，但是对于虚拟 DOM 人们有不一样的看法。 对于不熟悉的人来说，虚拟 DOM 可以描述为某个时刻真实DOM的简单表示。其思想是：每次 UI 状态…"}, {"id": "6915322480194224141", "title": "vue开发问题记录", "desc": "JPEG是图像文件中的一种类型（格式），该类型的图像文件后缀名可以包含：JPEG 、JPG 、JPE 、JFIF 。所以图像的MIME类型中不会有：image/jpg，有的只是：image/jpeg 注意：Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这…"}, {"id": "6844904029370187784", "title": "Vue为什么不能检测到以元素赋值方式的数组变动", "desc": "Vue的双向绑定是通过 Object.defineProperty 给对象添加 getter 和 setter 方法实现的。 事实证明，是可以通过 array[index] = newValue 这样的方式触发响应的。那Vue为什么不这样做呢？ 不仅如此，由于JavaScrip…"}, {"id": "6901107360673038343", "title": "技术提炼｜盘点那些Vue项目中的优秀实践-小程序篇", "desc": "这一篇我们来聊聊小程序，这里的小程序开发使用的是uniapp。 这样我们只需要通过package.json里不同环境的script运行，就可以切换到想要的环境。在小程序里，我们通常都是在微信开发工具里编译运行，这个时候我们就可以借助cross-env和script来进行环境的切…"}, {"id": "6965389140062175262", "title": "VueCLI", "desc": "什么是VueCLI 如果只是简单写几个Vue的Demo程序，那么不需要Vue CLI 如果在开发大型项目，需要使用Vue CLI 使用Vue.js开发大型应用时，需要考虑代码目录结构，项目结构和部署、"}, {"id": "6924507731659341831", "title": "Vue单文件组件", "desc": "单文件组件的组成结构传统的Vue组件的缺陷问题全局定义的组件名称不能重名字符串模板缺乏语法高亮不支持css（当html和js组件化时，css没有参与其中）没有构建步骤限制，只能使用H5和ES5，不能使"}, {"id": "6844903976421310471", "title": "尝鲜Vue3之六：响应式原理的革新 - Vue2、Vue3实现对比", "desc": "首先我们说说什么是响应式。通过某种方法可以达到数据变了可以自由定义对应的响应就叫响应式。 具体到我们MVVM中 ViewModel的需要就是数据变了需要视图作出响应。 假定我们需要的是数据data变化时可以触发fn函数也就是作出相应，当然相应一般是触发视图更新当然也可以不是。我…"}, {"id": "6844904110785822727", "title": "Vue传值与状态管理总结", "desc": "使用prop使得父子组件形成一个单向下行绑定：一般情况下，父级prop的更新会流动到子组件中，但是反过来则不行；子组件向父组件传递数据可以使用自定义事件，在子组件里使用$emit触发事件，然后在在父组件中使用v-on监听相应的事件。 一个组件上的 v-model 默认会利用名为…"}, {"id": "6992029624947458062", "title": "vue+elementui实现移动端图片手指滑动", "desc": "欢迎大家进群，一起探讨学习 微信公众号，每天给大家提供技术干货 博主技术平台地址 博主开源微服架构前后端分离技术博客项目源码地址，欢迎各位star vue实现移动端图片手指滑动 安装 main.js中"}, {"id": "6914831509501247495", "title": "vue3新特性介绍和基本使用", "desc": "新特性https://vue-composition-api-rfc.netlify.app/zh/api.html#setupref、reactive、computed、watch新的生命周期自定义"}, {"id": "6943488981703065614", "title": "vue中v-model和.sync修饰符区别", "desc": "两者本质都是一样，并没有任何区别： “监听一个触发事件”=\"(val) => value = val\"。 1.只不过v-model默认对应的是input或者textarea等组件的input事件，如果在子组件替换这个input事件，其本质和.sync修饰符一模一样。比较单一，不…"}, {"id": "6983492105360375844", "title": "vue2轮播图组件", "desc": "适合初学者 原先使用DOM写的，转到vue暂时没去更改成ref 整体的效果实现，通过更改margin来显示切换图片的样式"}, {"id": "6844903870854856718", "title": "前端项目之vue分环境打包", "desc": "vue-cli 2.x版本分环境打包步骤可以猛戳这里.一位同事写的一篇关于vue-cli 2.x多环境下打包的文章,绝对是干货中的战斗机,所以就尽量不再重复造轮子,今天我们还是以vue-cli 3.0版本下的分环境打包方式为主。 首先还是老规矩,能用代码说明的问题,绝不多bb一…"}, {"id": "6981104468330807304", "title": "如何实现Excel导入", "desc": "一. 安装依赖 xlsx --> excel处理库 excel的导入导出都是依赖于 js-xlsx 来实现的 --> 在此依赖包的基础上封装了便于导出数据的Export2Excel.js文件 二. 创"}, {"id": "6850037276706078727", "title": "听过graphql吗？来看看vue中 是怎么实现graphql", "desc": "上周和后端同事一起入门了graphql。嗯，发际线好像又后移了。。。。 对比与最常用的rest,我们向后端发送请求的时候，后端返回的数据不一定都是我们需要的，通常返回的都会多一点。传输的数据数量也就多了。graphql就实现了前端根据ui自己去请求所需要的字段，不会造成多余的数…"}, {"id": "6844904036357898248", "title": "一起来撸个简易的小程序框架", "desc": "概括一下，大致意思是小程序框架核心是通过2个线程来完成的，主线程负责webView的渲染工作，worker线程负责js执行。说到这里，你是不是会产生一个疑问：为什么多线程通信损耗性能还要搞多线程呢？ 可能大多数人都知道因为Web技术实在是太开放了，开发者可以为所欲为。这种情况在…"}, {"id": "6893144723721355272", "title": "Vue.js 3.0 组件是如何渲染为 DOM 的？", "desc": "本文主要是讲述 Vue.js 3.0 中一个组件是如何转变为页面中真实 DOM 节点的。对于任何一个基于 Vue.js 的应用来说，一切的故事都要从应用初始化「根组件（通常会命名为 APP）挂载到 HTML 页面 DOM 节点（根组件容器）上」说起。所以，我们可以从应用的根组件…"}, {"id": "6844903772955770888", "title": "Vue实战：简单几步，优化你的开发体验与效率", "desc": "Vue系列教程，是前面通用渡劫篇的后续教程，从实战项目中的总结，融合的实战过程中的设计思想和经验总结。古语有云：工欲善其事必先利其器 ,因此，本教程的初篇为学习者先铺垫好开发工具，后续再继续完善业务和经验的输出。 上一年写了 Vue.js渡劫系列, 读者如果有兴趣也可以先进行通…"}, {"id": "6844903741229891591", "title": "用console.log分析Vue源码", "desc": "本文通过console.log的一些特性,结合vue.js的源码,通过一个简单的例子,让你了解Vue的各个过程的变化."}, {"id": "6844903703732813838", "title": "vue2.0中的：is和is的区别", "desc": "最近，工作之余在翻阅vue.js的官方文档，在查看到动态组件和解析 DOM 模板时的注意事项的时候，讲到一个特殊的is特性，觉得很有意思，就来写一篇自己理解的总结。 我们平时用局部注册的情况更多些，那我就写一个局部注册组件的栗子。 这里我们会发现，虽然标签是< componet…"}, {"id": "6920047356683485192", "title": "1202年了,学习Vue3.0原理之前，一起回顾一下Vue2.x版本的响应式源码", "desc": "转眼2021年了，Vue3.0正式发布也已经过去了几个月。但框架仅仅做到会用是不够的，要深入去了解其相关原理，需要知道一下它与之前版本到底有啥区别，优势在哪里。所以今天就一起重新品2.x版本的响应式源码！ 用过Vue的同学或多或少都知道尤大是使用数据劫持与订阅-发布模式来实现响…"}, {"id": "6978032574723522567", "title": "Vue 3 新人快速入门", "desc": "vue 3 相对于 vue 2 做出了哪些改变呢？ Vue 3 移除了原有的生命周期函数 、data 、watch 、computed 、method、filter等。 Vue 3 采取了对 Type"}, {"id": "6844903590465634317", "title": "Vue render深入窥探之谜", "desc": "在使用Vue进行开发的时候，大多数情况下都是使用template进行开发，使用template简单、方便、快捷，可是有时候需要特殊的场景使用template就不是很适合。因此为了很好使用render函数，我决定深入窥探一下。各位看官如果觉得下面写的有不正确之处还望看官指出，你们…"}, {"id": "6845166891292426248", "title": "从〇带你实现一个图片懒加载插件", "desc": "图片的多少直接影响了网页加载的速度，尤其是当你手机网不好的时候（手动@苹果）一张图片转啊转，转半天也转不出来，气的直接想把手机给砸了... 所以日常开发中我们不会一次性让图片全部加载出来，而是先加载几张图片让用户觉得网页已经加载完毕了，实际上我们在后台再悄咪咪的去加载其他图片，…"}, {"id": "6988862544421077022", "title": "vue-router的必备知识点", "desc": "1.1 路由传参 1.1.1 query xxx.vue about.vue 1.2.1 params xxx.vue router/index.js about.vue 1.2.1 props xx"}, {"id": "6901927785087336462", "title": "vue axios简单封装", "desc": "--- # 主题列表：juejin, github, smartblue, cyanosis, channing-cyan, fancy, hydrogen, condensed-night-purp"}, {"id": "6976959440188604429", "title": " 详解 Vue 2.X 核心源码，手撸一个简易版Vue框架（下篇）", "desc": "《 详解 Vue 2.X 源码，手撸一个简易版Vue框架（上篇）》记录了Vue响应式系统的实现、虚拟DOM的生成，DOM的定向更新等。本篇文章对源码实现流程的总结 Vue源码实现流程 Vue实例初始化"}, {"id": "6909280469590736909", "title": "在vue中使用session Storage和vuex保存用户登录状态", "desc": "图一所示,sessionStorage.setItem即为保存数据方式,第一个参数为变量名,第二个参数为所储存的数据,在登陆页面中,登陆成功后返回用户登陆信息. 如图二,在其他页面中查看用户登陆登陆状态,在钩子函数mounted中,通过sessionStorage.getIte…"}, {"id": "6979598722850586661", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】037-Composition API：Provide,Inject,模版Ref的用法", "desc": "8、Provide,Inject,模版Ref的用法 基本使用 运行结果 子组件修改父组件传递过来的数据 运行结果 子组件让父组件修改父组件里面的数据 运行结果 禁止自组件对父组件传递过来的数据进行修改"}, {"id": "6844903665463984135", "title": "Vue 页面掉东西组件", "desc": "之前项目还用 jQuery 的时候，要在页面上做一个飘东西效果，类似下雪那样。当时使用的是一个开源组件 jquery.let_it_snow。 props 大致和 jQuery 版本的 let_it_snow 差不多，多添加了用来控制显示隐藏的 show 和多图片支持的 ima…"}, {"id": "6981274774357966878", "title": "Vue组件", "desc": "组件 组件 (Component) 是 Vue.js 最强大的功能之一 组件可以扩展 HTML 元素，封装可重用的代 组件注册 全局注册 Vue.component('组件名称', { }) 第1个参"}, {"id": "6971597020205154317", "title": "P4M1：Vue.js 框架基础", "desc": "Vue.js 框架基础 T1：初识 Vue.js 选择 Vue.js 传统开发的弊端： DOM 操作频繁 DOM 操作与逻辑代码混合，可维护性差 不同功能区域的代码写在一起，可维护性差 模块间的依赖关"}, {"id": "6971453429562474532", "title": "首页频道列表", "desc": "一. 基本结构 二. 获取频道并显示 三. 设置滚动条的样式并使用全局样式覆盖vant库的样式 四. 组件的数据加载机制"}, {"id": "6844903688054505486", "title": "浅析Vue源码（九）——VirtualDOM与path", "desc": "在未出现双向绑定之前，我们需要在各个触发事件方法中直接操作DOM节点来达到修改相应视图的目的。但是当应用一大就会变得难以维护，reflow(回流)很影响性能的。 因此就有人提出来，那我们是不是可以把真实DOM树抽象成一棵以JavaScript对象构成的抽象树，在修改抽象树数据后…"}, {"id": "6875215230826184712", "title": "尝鲜vue3.0- one Piece发布后的新鲜事（6）", "desc": "上周六晚上，vue3.0正式发布。本以为距离正式发布还需要一段日子，突然就发了正式版本“One Piece”。 表面上看很像jsx ，但是这仅是 JavaScript 的语法。lit-html并没有虚拟 dom 的概念也没有 diff 检查，更专注做为渲染引擎，不提供组件、应用…"}, {"id": "6844903654785286151", "title": "记一次基于vue的spa多页签实践经验", "desc": "要求通用性高,需要在后期四十多个子项目中使用，所以大部分地方都做成可配置的. 组件要求异步加载,减少首屏加载时间. 很明显,这就是一个 类 ERP 的应用. 做过 JSP 等后台的同学,对多页签应该都很熟悉吧. 那接下来我们就来谈谈实现. 这点其实没啥难点,无非就是麻烦了点,把…"}, {"id": "6940455584349192222", "title": "免费开源 基于Vue和Quasar的前端SPA项目实战之环境搭建（一） ", "desc": "crudapi增删改查接口系统的后台Java API服务已经全部可用，需要一套后台管理UI，主要用户为开发人员或者对计算机有一定了解的工作人员，通过UI配置元数据和处理业务数据，经过调研最终决定通过Vue实现SPA单页面Web应用，打开浏览器就可以很方便使用。 目前主流的三大前…"}, {"id": "6854573215524585480", "title": "Vue 3.0初步使用和原理", "desc": "源码位置是在package文件件内，实际上源码主要分为两部分，编译器和运行时环境。 一. 创建方式变化,以前以$引入的全局方法，变成实例方法 Composition API字面意思是组合API，它是为了实现基于函数的逻辑复用机制而产生的。 一. setup方法基础用法，主要依赖…"}, {"id": "6979779054727594014", "title": "【Vue】vue中获取本地json文件", "desc": "首先在项目中新建一个static目录，将json文件拷到该目录下，如图所示： json文件的格式如图所示： 在配置文件的resolve中定义一下json文件存放的路径，方便后期页面中引入，如图所示： "}, {"id": "6979613691536900126", "title": "Vue快速入门学习笔记（一）", "desc": "Vue 的核心库只关注视图层，方便与第三方库或既有项目整合。 HTML + CSS + JS : 视图 ： 给用户看，刷新后台给的数据 网络通信 ： axios 页面跳转 ： vue-route"}, {"id": "6844904110190231560", "title": "【干货】详解vue生命周期", "desc": "每个vue实例在被创建之前都要经过一系列的初始化过程，这个过程就是vue的生命周期。详细来说，就是Vue实例从开始创建，初始化数据，编译模板，挂在dom->渲染，更新->渲染，卸载等一系列过程，我们称这是vue的生命周期，各个阶段有相对应的事件钩子。 钩子函数：当代码执行到特定…"}, {"id": "6910873458448531463", "title": "Vue全家桶系列一： Vue基础", "desc": "源码中的目录层级和文件名称，都和文章目录中的一致，一目了然，根据文章目录找到对应的源码文件。 源代码我也相应的进行了优化，相对于文章中的章节，源码优化后阅读和理解起来更容易些。"}, {"id": "6985408980600389640", "title": "Vue3 <style>状态驱动 CSS 变量", "desc": "用法就是在style中使用关键方法 v-bind()，vue回去实例里找到对象变量并加入style变量中。 新版是如下： 这东西用途在哪里？ 其一，做动态主题肯定是可行这块没有太多值得说的。 其二，我"}, {"id": "6859517410169831432", "title": "NutUI 落地实践-让组件库服务慧采协同采购业务", "desc": "帮助企业解决两大采购场景难题移动端采购。适用于移动流动性办公、网络限制等工作场景，突破时空限制，支持多账号体系，随时随地采购、审批等。员工福利/渠道奖励发放。支持员工福利商城、积分兑换、渠道奖励等B2"}, {"id": "6979603731012648991", "title": "Vue3源码 | 读懂keep-alive组件以及缓存机制", "desc": "vue3源码系列文章连载中...日常开发中，如果需要在组件切换时，保存组件的状态，防止它多次销毁，多次渲染，我们通常采用 <keep-alive/>"}, {"id": "6844903842966929416", "title": "详解Vue生命周期【上】", "desc": "如果非要在beforeCreate()取data也不是没有办法，异步方式可以通过this.$nextTick()或seTimeout，同步方式可以通过this.$options。当然一般不会这么操作。 在实例创建完成后被立即调用，可以操作data、computed、watch、…"}, {"id": "6844903695767830542", "title": "vue的状态管理模式—vuex", "desc": "如果你在使用Vue.js，肯定有很多组件之间相互传递参数的经历。当遇到父子组件需要通信的时候，我们经常用的方法是传递参数。其实除了传递参数的方式，我们还可以结合业务需要考虑是否用Vuex去解决。 状态管理模式、集中式存储管理初次了解的话感觉有点难以理解，我们通过官方文档中提供的…"}, {"id": "6966137499806760990", "title": "【Vue】基于脚手架创建Vue项目+Vue组件基本使用", "desc": "基于脚手架创建Vue项目，并且通过实际例子演示了Vue组件之间的通信和使用方法。内附有完整的代码和代码说明。"}, {"id": "6914321191754792967", "title": "[设计器 vjdesign] 动态表单设计器自定义属性编辑器", "desc": "vjdesign是一个具有高扩展性的动态表单设计器，本示例实现一个自定以属性编辑器例子说明自定义组件首先做一个vue自定义组件editor方法用于注册属性编辑器，第一个参数就是设计器配置文件中edit"}, {"id": "6844903757164052487", "title": "造轮子之图片预览组件(preview)", "desc": "图片放大预览是种很常见的场景和功能，一般移动网站首页的轮播banner，商品详情页的商品图片等位置都会用到此功能像这种常用的场景功能肯定是有人早就写好插件了的，所以遇到这种场景，一般都遵循以下三步：打"}, {"id": "6902310695862435847", "title": "Vue 3.0 新特性与使用 二", "desc": "composition Api 实际上最终会把 setup return 的变量和方法会放到和 option Api 的 data 和 methods 一样的地方，所以我们能后直接 this.xx 去使用。 Vue 在解析数据之前，会自动判断这个数据是否是 ref 数据，如果是…"}, {"id": "6844903824805609485", "title": "[集成框架]基于VueCli3的微信公众号项目前端框架", "desc": "开发：跟普通的vue单页应用开发方式一致。 如果要进行真实账号测试或者是生产环境下，可以通过微信开发者工具进行调试，调试方式跟chrome类似。 vuex的调试，请先科学上网，然后在chrome拓展工具里搜索安装 Vue.js devtools ，安装完成后打开开发者工具，在最…"}, {"id": "6844903790219362318", "title": "React与Vue模板使用比较(一、vue模板与React JSX比较)", "desc": "本人原为React开发者，现在转战Vue。在这些天接触Vue的日子里，说说自己的感觉：同样的登山活动，React就像父亲，给你必要的登山工具就让你出发了；Vue就像母亲，在你登山之前为你准备好了所有东西，唠唠叨叨了一波，规划了路线，给了你厚厚的导航指南，才让你出发。 1. 表达…"}, {"id": "6844904039109378061", "title": "vue的开发总结", "desc": "1. router.go(n) 2. router.push(location) 想要导航到不同的URL，则使用router.push方法，这个方法会向history栈添加一个新的记录，所以，当用户点击后退按钮时，则回到之前的URL。 3. router.replace(loc…"}, {"id": "6918727665482465294", "title": "Vue2.0 异步更新解读", "desc": "那么我想问一下视图会更新几次呢？貌似只更新了一次，什么原因呢？😂下面我们带着问题来探讨一下。 我们都知道Object.defineProperty会对data中的数据劫持，当修改数据的时候会触发set方法，同时set会执行dep.notify(), dep.notify()会…"}, {"id": "6993245126797557790", "title": "Vue3.0探讨与交流", "desc": "Vue3.0探讨与交流，主要介绍Vue3.0的新特性及原理，围绕Vue3和Vue2的对比，相比较得出其异同！"}, {"id": "6993333659096842271", "title": "表单验证和props", "desc": "“这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 表单验证详解 注意点 场景 vue中props的验证规则"}, {"id": "6844903549072048136", "title": "[跳一跳] Nodejs + Opencv 版", "desc": "openstf/minicap socket方式安卓设备屏幕截图图像流。Android 5.0 以上，stream输出帧率与设备一致。 openstf/minitouch 安卓设备 sendevent 替代者，实时性高。 electron-vue 使用electron直接与so…"}, {"id": "6847009772349161486", "title": "Vue组件中的名称探究", "desc": "调试Bug不是太难的事，更难的事是取名字，而如何取好一个名字就显得尤为重要。在Vue中，有多处涉及到组件名称的使用，各处的风格有框架内的既定要求。 写这篇的缘由是之前在编写UI库的时候，遇到了引入组件时名称不规范的问题。 在写测试用例时，有个测试用例一直无法通过，但是来回看了很…"}, {"id": "6973930980201463815", "title": "Vue2：Vue2中无法检测到数组的变动问题", "desc": "由于JavaScript 中Object.defineProperty()的限制，Vue2.x出于对性能的考虑，并没有对数组执行walk对每项添加监听。"}, {"id": "6977183032671207432", "title": "了解Vue.js中的$nextTick", "desc": "一个前端开发者（假设他的名字是Eric）走进了一家Vue酒吧。 Eric点了他最喜欢的鸡尾酒：Nuxt。调酒师正在调酒。然后他开始咆哮。 他开始说他是如何在Vue 3文档中的实例方法下发现$nextT"}, {"id": "6844904036206903304", "title": "2020年再也不用为多级表头和行列合并头大了", "desc": "1. 需求 几个月前接过一个这样的需求，如上图，是说，表头由后台返回，并且要求单元格列合并，前段时间又接到一样的需求。于是乎，在codepen中写了个demo，codepen在线地址。 2. 想法及实现 接到这个需求的时候，跟后段确定的数据格式是这样的，单单一个包含表头和单元格…"}, {"id": "6980140312861605895", "title": "Vue", "desc": "VUE 学习目标 前端知识体系 前端三要素 HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容 CSS（表现）：层叠样式表（Cascadin"}, {"id": "6869552527965159431", "title": "快速入门vue-render", "desc": "​ 虚拟DOM不会进行排版与重绘操作 ，虚拟DOM就是把真实DOM转换为Javascript代码，并且真实DOM频繁操作排版、重绘效率相比虚拟DOM 效率会低很多，比如原生操作真实DOM浏览器会从构建DOM树开始从头到尾执行一遍流程。而虚拟DOM是用Object来代表一颗节点，…"}, {"id": "6844903811773890574", "title": "DIY 一个 Vuex 持久化插件", "desc": "在做 Vue 相关项目的时候，总会遇到因为页面刷新导致 Store 内容丢失的情况。复杂的项目往往涉及大量的状态需要管理，如果仅因为一次刷新就需要全部重新获取，代价也未免太大了。 那么我们能不能对这些状态进行本地的持久化呢？答案是可以的，社区里也提供了不少的解决方案，如 vue…"}, {"id": "6945748911147450405", "title": "[vue]一个省心省力的骨架屏实现方案", "desc": "在我的前前公司，接口经常出问题，基本每个接口都会出问题，这就要求我们前端对每个接口都要做错误信息的提醒，非常麻烦，当然这也是必须的，所以就想着做一个组件能够帮我们自动处理和展示这些错误信息，当时开发用的是Flutter，所以应该叫widget。后来又做vue和小程序了，想着能不…"}, {"id": "6844904160597377031", "title": "Vue源码学习3.9：深入Props", "desc": "我们在《响应式对象》一章简单介绍了 initProps 会调用 defineReactive 来设置响应式对象。本章来深入介绍 props 相关概念~ 1. 规范化 合并配置我们在组件化章节讲过，它主要就是处理我们定义组件的对象 option，然后挂载到组件的实例 this.$…"}, {"id": "6844903992942657549", "title": "打造基于VueCli3.0以及Less的私人UI库", "desc": "开源项目目前还在持续更新组件中，各位小伙伴喜欢的话，givemeastar！！！！起步·安装npm、node的安装就不多说了，我们直接开始安装vue/cli·初始化项目vue/cli脚手架创建项目与平"}, {"id": "6981365778381701156", "title": "vue项目中图片&视频上传后的信息处理", "desc": "1.element upload组件 2.获取视频相关属性 3.获取图片相关属性 4.因为我们项目是上传云端的，所以在上传之前会获取和处理信息"}, {"id": "6844903545641107469", "title": "教你用webpack搭一个vue脚手架[超详细讲解和注释！]", "desc": "4.1 生成package.json文件,配置npm scripts. 6.1 该文件主要用来配置构建开发环境和生产环境差异化的参数. 7.1 此文件主要是webpack开发环境和生成环境的通用配置. 9.1 此文件主要用于构建生产环境的配置. #10. 创建 build/bu…"}, {"id": "6844903507573620744", "title": "使用 electron-vue 构建你的桌面应用", "desc": "官网里这么说：Electron提供了一个Nodejs的运行时，专注于构建桌面应用，同时使用web页面来作为应用的GUI，你可以将其看作是一个由JavaScript控制的迷你版的Chromium浏览器。 翻译一下：它是一个运行时，可以像 node 一样这样执行：…"}, {"id": "6858106657416282125", "title": "当 Vue H5 项目需要接入 Udesk WebIM 网页插件 ", "desc": "本文记录了一次 Vue 版本 H5 接入 Udesk WebIM 网页插件的踩坑过程，一方面是自己记录一下，另外一方面是希望能帮助到即将踩坑的童鞋，避免踩坑。 如果没有账号需要进行注册。 注册之后可以免费向客服获取到试用的账号，自己或者公司的账号要使用 IM 插件的功能需要付费…"}, {"id": "6844903647197790221", "title": "撸一个JS的事件管理", "desc": "列举一个生活中的例子来帮助大家理解这一种模式。炎热的夏天，妈妈烧好了饭盛上桌，冒着热气，这时妈妈喊小明吃饭（小明在旁边的屋子里饿着肚子大吉大利晚上吃鸡...），小明出来一看，跟妈妈说，等一会 ‘饭凉了’ 再叫我，太烫了...十分钟后...妈妈喊你 ‘饭凉了’，快来吃饭，而这时小…"}, {"id": "6990367290034241550", "title": "vue2 源码学习 事件处理", "desc": "1.事件生成的render 2.事件类型 2.1 原生事件 2.1.1执行流程 Vue -> Vue._init -> Vue.$mount -> mountComponent -> watcher "}, {"id": "6888569152853393416", "title": "Vue2.0源码分析：响应式原理(下)", "desc": "在介绍完props、data、watch以及computed后，我们对响应式原理有了一定的初步认识，在这一章节中我们再次回顾响应式，来探究其实现原理。 在之前的章节中，我们以及介绍过：Vue.js通过Object.defineProperty(obj, key, descrip…"}, {"id": "6911940089945784328", "title": "vue和react中的组件动态加载", "desc": "道理是一个样子的, 需要将其作为一个 state 属性进行传递, 触发 render. 动态加载其实就是动态触发, 需要结合一个触发事件然后动态的加载需要的组件内容. 需要注意的是 webpack(babel) 中解析 import 的时候, 需要给定具体的路径."}, {"id": "6844903817633333255", "title": "如何理解vue的key属性", "desc": "如果没有这个属性的时候vue应用 in-place patch（就地复用）策略。列表里的顺序发生改变的时候比如shuffle（列表打乱）的时候，vue为了提升性能，不会移动dom元素，只是更新相应元素的内容节点。 如上引用自官网，这个模式就是上面的“就地复用”策略。那么是不是依…"}, {"id": "6915416605522395143", "title": "Sentry 10 K8S 云原生架构探索，Vue App 1 分钟快速接入 ", "desc": "Sentry 10 算是目前开源界集错误监控，日志打点上报，事件数据实时分析最好用的软件了，没有之一。将它部署到 Kubernetes，再搭配它本身自带的利用 Clickhouse （大数据实时分析引擎）构建的 Snuba 服务进行数据分析~简直了。（已无敌😂） 要将 Sen…"}, {"id": "6972799316159102984", "title": "Vue3全局可替换内容模态框", "desc": "模态框是常用的组件，常用在需要显示较少但是重要内容的时候。它需要立即抓到用户的焦点，所以常设计为一个居中的对话框和一个处在背后的黑色半透明遮罩。整体的样式不会有多少变化，但是内容经常变化。"}, {"id": "6844903709206380551", "title": "[译] 用 Vue 3 Composition API 实现 React Context/Provider 模式", "desc": "React Context API 提供了一种 不用在组件树中逐层传递 props （也称 prop drilling）的前提下 共享被多个组件都需要的属性 （比如用户设置、UI 主题等）的方式。尽管 Vue.js 没有自带的完全一致的抽象，但在本文中，我们将看到 在 Vue …"}, {"id": "6844903662200832014", "title": "[译] 使用 Vue 编写一个长按指令", "desc": "想过？太好了，英雄所见略同。 本文就是讲解如何在按下（或者按住）一个按钮时，既执行一个函数，又清除输入。 首先，我会讲解如何使用纯 JS 实现。而后也会创建一个 Vue 指令。 请系好安全带。好戏在后头呢。 要实现长按，用户需要按下并按住按钮几秒钟。 想通过代码模拟这一效果，我…"}, {"id": "6987251722636754952", "title": "Vue响应式原理上篇：如何从零构建一个响应式系统？", "desc": "响应式系统是什么？ 以一个简单例子来说明响应式系统？ 什么是依赖？什么是依赖搜集？ Watcher 是什么？ Dep 是什么？ 如何建立Dep和Watcher之间的关系？ 完整的实现一个简单响应式系统"}, {"id": "6844903881973973006", "title": "🔨揭秘vue-sfc-cli: 组件研发利器", "desc": "本文将揭示vue单文件组件的工具 vue-sfc-cli 的内涵，说明它是如何在整个组件研发流程中提升效率的。 根据 template目录下模板，生成新的文件，更新到当前组件中。使用的是覆盖策略，默认覆盖的文件定义在 update-files.js。常用于使用最新版本vue-s…"}, {"id": "6987207113890086943", "title": "学习笔记-组合式api基础", "desc": "问题: 什么叫选项式api和组合式api ? ? ? 组合式api: 我们可以将界面上重复的部分连同其功能一起提取为可重用的代码段. 实现代码的共享和重用"}, {"id": "6844903571222167566", "title": "bio: 一站式前端开发工具", "desc": "前端开发一站式解决方案。 使用 bio，您将只需关注业务逻辑，无需关注脚手架配置信息，即可快速完成前端开发。 额外的，bio 提供了 eslint、styleint 检测、mock 服务。 初始化项目目录。 在本地安装脚手架，以确保脚手架存在。脚手架安装在 bio 缓存目录（/…"}, {"id": "6844903536585605133", "title": "我劝你别在数字键盘上刁难我——Vue自定义数字键盘组件", "desc": "既然要用户体验，而我又对原生控件感到很绝望，于是！我有一个大胆的想法.... 确认键，判断当前字符是否为空，为空就提示信息并返回，不为空我们也要进行判断，如果输入的是 8. 这种格式，我们需要对齐格式化成 8.00 这种形式，否则就直接保留两位小数，最后在触发 回调，并把结果作…"}, {"id": "6844903552918241287", "title": "vue-piczoom：基于vue2.x的电商图片放大镜插件", "desc": "最近在撸一个电商网站，有一个需求是要像淘宝商品详情页那样，鼠标放在主图上，显示图片放大镜效果，找了一下貌似没有什么合适的vue插件，于是自己撸了一个，分享一下。小白第一次分享，各位大神莫见笑。 组件默认是100%的高宽，所以建议将组件包含在一个有固定高宽的容器内。如："}, {"id": "6844903607171547144", "title": "vuejs添加环境常量----多环境开发打包场景解决方案之一", "desc": "vuejs添加环境常量----多环境开发打包场景解决方案之一"}, {"id": "6905946214462652423", "title": "关于vue3的新语法提案", "desc": "Vue3.0的两个提案，最近吸引了许多开发者的注意跟讨论。一个是script-setup提案，一个是ref-sugar提案。对于script-setup提案，大部分开发者持正面态度。对于ref-sug"}, {"id": "6978007559038828557", "title": "vue后台管理项目常见的Excel导入导出功能", "desc": "安装依赖包后在src目录下新建一个excel文件夹引入Blob.js和expor2Excel.js， webpack.base.conf.js修改配置， 在你项目的工具js里面加上下面本人封装好的方法"}, {"id": "6844904067043426311", "title": "Vue从js迁移到ts", "desc": "Typescript正广泛成为前端工程师开发项目的首选，我手头上有一些使用js编写的Vue项目，最近准备使用ts重写。项目中单单是页面的数量就超过100个，更不用提组件的数量，如果对这么多Vue文件进行一一重写的话，工程量浩大，并且十分枯燥。其实在此之前也手动转换过几个项目，发…"}, {"id": "6844903692890537998", "title": "vue单页应用前进刷新后退不刷新方案探讨", "desc": " "}, {"id": "6927229354632019981", "title": "vue 封装原生高德地图", "desc": "最近再写一个大屏 需要引入原生的高德地图就想着简单封装一下，避免后面重复造轮子！高德地图 简介amap.jsamap.js文件"}, {"id": "6897108239289155591", "title": "vue-next 响应式模块源码分析 -- prepare 篇", "desc": "1. git clone git@github.com:vuejs/vue-next.git 将 vue-next 源代码克隆至本地 2. 项目根目录 yarn install 安装依赖包 3. npm run dev 本地启动项目 4. 安装 Jest Runner 插件 +…"}, {"id": "6856288219584331790", "title": "前端边角料 | 聊聊 Vue 的 $nextTick 原理", "desc": "Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个…"}, {"id": "6844904037893013512", "title": "记录Computed源码分析", "desc": "之前看了很多文章通过源码分析computed的原理，借此机会把自己对源码所理解的，所以这篇记录大多数都是对源码批注的形式写下来的，当做自己的学习笔记。写的不好还请担待。 平时我们在获取后台返回的数据后可能会对某些数据进行加工直接放在模板中太多的逻辑会让模板过重且难以维护。例如：…"}, {"id": "6844903811278962696", "title": "从零开始构建一个vue项目 --- webpack历险记", "desc": "vue项目搭建之vue全家桶和element ui、规范、单元测试等等。。。(中) vue项目优化之打包优化，页面加载优化等等。。。(下) 网上很多文章一上来就介绍安装各种包，看完一遍之后还是一知半解，无从下手。 自己写一个文章，按自己需要的功能加载各种包。 第一次配置webp…"}, {"id": "6946109156394811422", "title": "vue 项目启动serve失败报错Error: spawn cmd ENOENT", "desc": "当时看到这个,我都懵了,虽然我技术也不咋地,但是,搞个这个还能报错,自我怀疑了. 嗯...... 我又看有帖子说重启电脑在试,我也试了,搞了一下午,还是没搞来,嗯,就需要找大佬请教了,我觉得这已经超出了我的能力,然后赶紧找大佬请教,花了十分钟把,就解决了,哎,与大佬技术差了个洪…"}, {"id": "6854573212685041677", "title": "Vue学习笔记9-深入了解组件3-动态组件、异步组件、边界处理", "desc": "这块基本参照官方文档与API文档进行知识点整理。 当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。 每次切换新标签的时候，Vue 都创建了一个新的 currentTabComponent 实例。导致如果切换选项卡，不会保存之前选项卡中的…"}, {"id": "6844903655204880398", "title": "vue-geventbus - 一个优雅的 Vue 全局事件处理插件", "desc": "先创建一个名为 eventBus 的全局 Vue 实例。 在 Vue 组件中使用时，一般在 mounted 生命周期中注册事件处理函数。在 destroyed 生命周期函数中解除注册的事件以免造成内存泄漏。 这样使用起来颇为繁琐。注册了某一个事件之后，必须在适用的时候取消注册。…"}, {"id": "6860750673261101063", "title": "Vue kibana接入及在不同环境下初始上报域(曲线救国)", "desc": "先说说为什么会有这个需求. 测试环境可以构建. 正式环境不允许构建. 为什么要判断?因为开发模式下肯定找不到那个文件,会抛出文件异常. 所以开发模式下要么不初始化代理,要么就默认初始化开发环境的."}, {"id": "6950908400125345822", "title": "vue组件开发——基础", "desc": "前端组件化开发的原因以及组件化开发解决的痛点。前端组件的四大分类：纯展示类组件、接入型组件、交互型组件、功能型组件。vue组件化开发的三大API：event、props、slot"}, {"id": "6957215521393606670", "title": "Vue进行Electron开发近期增补记录", "desc": "这篇文章主要介绍 asar包的简单保护 支持快捷键的使用 菜单的动态修改 日志功能 1. asar的包的使用 从上篇我们知道, asar包可以用7z的插件或者直接使用asar命令解压, 但是有时候我们"}, {"id": "6944644028759539748", "title": "21天学会写个仿Vue3的轮子：（二）第一次渲染虚拟树", "desc": "假设我们要删除bar节点，无脑的办法就是分别找到bar和父节点。 但是为了删除一个节点，我们还得先找到节点的爸爸是谁，才能把它干掉。每次删除都要进行“找爸爸”这种重复劳动。 其次，没有数据绑定，count的值变化了，可能每次都还得手动选中节点更新。 最后往往业务逻辑里，混杂了一…"}, {"id": "6985898347110334501", "title": "极简系列---vue 响应式实现(2.x)", "desc": "用过vue的同学想必都知道它是基于`Object.defineProperty`实现的响应式，那么具体是怎么做到呢，下面我将用不到两百行代码逐步拆解响应式原理，实现极简版vue"}, {"id": "6945084298890477582", "title": "Vue的数据响应式（双向绑定）", "desc": "今天讲一讲vue的双向数据绑定。 我发现我解释不通这个现象，为什么我传入的值会变？于是我开始查找资料，最后我得出了结论，是vue在我传入这个值的时候，对我这个对象的做了改动，并将改动的值传给了我的对象的地址值。它是怎么做到的?为什么要这么做？首先解释为什么要这么做。 答案很简单…"}, {"id": "6844904193958871047", "title": "Vue源码解析(一): data的挂载", "desc": "大部分知识点主要集中于code目录（核心代码部分）。 接下来，就让我们开始进入vue的世界吧。 可以看到new Vue的时候，会执行this._init()函数，即运行了Vue.prototype._init的方法，如下图所示。 初始化生命周期，声明data，props等，也是…"}, {"id": "6844903970494742536", "title": "vue 2.x内部运行机制系列文章-虚拟DOM", "desc": "从 vue内部运行机制系列文章-template模板编译原理 知道，template经过编译会形成render function，然后render function 会被转化成 VNode 节点。Virtual DOM 其实就是一棵以 JavaScript 对象（VNode 节…"}, {"id": "6844903919382953991", "title": "基于Vue的防淘宝(手机端)模块化加载解决方案", "desc": "前段时间在掘金上看到一位小伙伴写的模块化解决方案，今天心血来潮也弄了一个第一次发帖，文笔有限，技术有限，请各位多多包涵！demo源码地址解决问题首屏内容过多导致的FPS降低卡顿加快首屏加载速度动态控制"}, {"id": "6908977018655342599", "title": "Saber前端框架用ESlint规范统一项目代码风格", "desc": "由于公司Saber前端框架没有进行ESlint代码规范的约束，导致在开发过程中，各种代码风格迥异，无法形成规范，造成以后维护的困难。为此，我司决定用ESlint规范统一项目风格。 解决Prettier格式化时与ESlint规范冲突报错。冲突原因可参考prettier 不支持函数…"}, {"id": "6976557950470995998", "title": "Axios基本使用01", "desc": "一、axios简介 二、axios的使用方式 下载源文件，script_src方式使用。 cdn引入使用。 npm加载使用。 三、axios的基本使用 默认无参请求方式 指定请求为get无参方式 使用"}, {"id": "6944898560395575333", "title": "2019-10-29 Vue-简单的表情组件", "desc": "首先，定义表情对象包括src和title的JSON格式表情对象为一个对象数组集合文件face.json然后，定义表情组件样式文件index.vue，与face.json在同一目录下定义表情图片的样式最"}, {"id": "6917545809076551688", "title": "vue+node(express)做中间层开发二--使用axios", "desc": "拦截器可以用于api请求的错误处理，包括请求拦截和响应拦截。axios既可以用着前端项目也可以用在node后端项目中，所以把这套移植过来。 addErrorLog是添加错误日志的方法，可不关注，这部分主要是输出了HttpRequest这个类，里面包含request请求方法。re…"}, {"id": "6844904170865033229", "title": "【译】尤雨溪 Vue2 设计过程 Vue3 的蜕变？", "desc": "在过去的一年中，Vue团队一直在研究Vue.js的下一个主要版本，我们希望在2020年上半年发布该版本。（在撰写本文时，这项工作仍在进行中）。 Vue的主要版本于2018年底形成，当时Vue 2的代码库已有两年半的历史了。在通用软件的生命周期中听起来可能并不长，但在此期间，前端…"}, {"id": "6844904003591995406", "title": "vue源码阅读一：Vue 的初始化", "desc": "使用 vue 有段时间了，对 vue 的认识还停留在使用上，即使代码写的很 6 ，也只过是个 API 工程师，这样可是不行的呀。 遂心生看源码的念头，一是可以学习大神们的代码、编程技巧，二来也可以看看 vue 的实现原理。有点滴收获也是好的。 我看的版本是 2.6.10，是目前…"}, {"id": "6917091900738502669", "title": "vue导航守卫", "desc": "next: Function: 执行下一步操作。如果不调用next，路由就卡在这里了 不往下走了"}, {"id": "6844904110634827784", "title": "带你探究vue-router源码", "desc": "主要知识点Hash与History路由原理实现路由一个vue路由的工作流程前端路由输入url---js解析地址---找到对应页面的地址---执行页面生成的js---看到页面后端路由输入url---请求"}, {"id": "6844903566197391373", "title": "基于 Vue.js 的支持本地化储存记事本 SPA", "desc": "💯VUEMEMO🚀DEMO点击这里看演示：DEMO源代码：github🚨BUILDSETUP🎯主要功能v1✔️响应适配✔️创建、修改笔记✔️删除部分或全部笔记✔️查看笔记详细内容✔️标记笔记是否完成✔"}, {"id": "6954286339684565005", "title": " vue2.5+ 之基础入门", "desc": "起步 安装vue-cli3 新建项目 启动服务 编写 vue单文件组件 .vue文件 组件化 开始使用 引入组件 注册组件 ，使用components进行注册 使用 组件数据传递 父子关系的组件的数据"}, {"id": "6867410898034786311", "title": "Vue基础之Vuex", "desc": "1). this.$store.state.全局数据名称 在mutations中不能编写异步的代码，会导致vue调试器的显示出错。 在vuex中我们可以使用Action来执行异步操作。 并将列表数据来源更改为一个getters。"}, {"id": "6908001935920480264", "title": "自己动手实现类vue响应式库", "desc": "接下来将与副作用相关的函数整合为Dep对象内，Dep是dependency的缩写，依赖的意思，一个数据的副作用本质上就是数据修改导致副作用被执行，那么该副作用函数也就相当于是该数据的依赖项，副作用函数的执行依赖于数据的修改。Dep也是vue内部的命名定义，这里准确理解Dep的含…"}, {"id": "6916765866134601742", "title": "关于proxy一篇就够了", "desc": "关注 vue2.0 的同学都知道， vue2.0 实现响应式的方式的是通过 Object.defineProperty，而 vue3.0的响应式实现是用的 ES6 的新语法 proxy 代理实现的。 通过ts 的接口的定义可以发现 Proxy 有两种使用方式，可以通过 new …"}, {"id": "6844903712649904142", "title": "仿制一个element tabel组建", "desc": "最近接到一个新需求，一个表单组件， 要求横向和纵向两种模式，要求固定表头和首列。这里做个记录。 这样就比较清晰了。剩下的就是核心代码编写了。 接下来遇到的一个问题就是多级表头了。 仔细分析这个dom结构。其实他是分成三行来渲染的， 然后通过rowspan和colspan来实现的…"}, {"id": "6844904086005874696", "title": "Laravel+Vue 问答平台项目实战前端 - 提问题", "desc": "在构建项目时，创建了提问题的路由/question/create，映射了一个CreateQuestion组件安装markdown组件本文将使用vue-meditor库，来实现提交问题时，可以提交mar"}, {"id": "6844903981165051911", "title": "Vue源码简析之Watcher（下）", "desc": "本文聊聊另一种watcher:computedWatcher的实现。 当getter触发时，根据key拿到对应的watcher，判断watcher依赖的值是否有更新，有则计算值，最后返回watcher的value。 这里的this.getter就是前面的userDef,进行求值…"}, {"id": "6844903648217006088", "title": "关于React的高阶组件", "desc": "高阶组件是什么？乍一听，感觉是个很高级的概念，但是不要被这个名词吓到，说简单点 就是给已有的一个组件外面“包一层”。 我们知道 “高阶函数” 是传入函数作为参数， 高阶组件 其实就是传入 组件作为参数，并返回一个新组件。 高阶组件的作用是什么？项目开发当中，通常我们会把一些公用…"}, {"id": "6844903823039807501", "title": "vue2.x+vue-cli3.0地图demo踩过的坑", "desc": "最近在做数据可视化的学习，从网上找了一下，没有相关的学习资料，打算结合自己的摸索和学习，记录一下踩过的坑，便于后续查阅以及供大家参考学习。 打开cmd命令窗口，进入本地某个路径下，运行vue create vue-map命令，即可初始化一个vue项目。用vscode打开项目，目…"}, {"id": "6900890090873700359", "title": "Vue 3 的 provide / inject 用法", "desc": "最近在写一个 Vue 3 项目，使用到了 provide / inject，因此做一个学习记录。 需求：点击顶部栏的 logo 对侧边栏的显示或隐藏进行切换。 需要一个变量来记录侧边栏的显示或隐藏. 变量即不能放在顶部栏也不能放在侧边栏，因为在两个组件是无法互相进行访问。 放哪…"}, {"id": "6844903648116342792", "title": "Vue 中 computed 计算属性的应用场景", "desc": "计算属性是 Vue 组件的一个重要内容，它具有 分离逻辑、缓存值、双向绑定 等作用或功能。"}, {"id": "6844904198136397832", "title": "漫谈vue组件设计", "desc": "本来标题准备起 vue 组件设计，不过觉得不太好太过于广泛了，下面就以一个实际的例子来谈谈项目中用到的设计思想。 基于以上两点，直接硬怼肯定不行了，要保证这个组件的足够低耦合同时也要方便自己使用，比如使用的时候肯定期待，只需要放置组件，一些组件的变动交给内部处理。 向上抽离一个…"}, {"id": "6844903944477491207", "title": "探索Vue高阶组件", "desc": "高阶组件(HOC)是 React 生态系统的常用词汇，React 中代码复用的主要方式就是使用高阶组件，并且这也是官方推荐的做法。而 Vue 中复用代码的主要方式是使用 mixins，并且在 Vue 中很少提到高阶组件的概念，这是因为在 Vue 中实现高阶组件并不像 React…"}, {"id": "6950576440190435336", "title": "vue-cli4.x + elementUI树形控件的使用（根据点击内容显示不同数据 + 带多选框的树形控件）", "desc": "点击第一层、第二层、第三层都要显示其对应的数据（包括来回点击父子层节点，多次点击）看了很多文章都说获取父级和子级的当前节点啥的，有点麻烦，em…，直接上代码渲染出来的样子大致是这样：点击对应层级节点显"}, {"id": "6844903910482640904", "title": "零基础教你搭建Vue项目", "desc": "今天我要讲一下我的第一个vue脚手架项目的搭建。可能很多人会想， vue脚手架有什么可说的呢， 一个vue init命令就完事了。话虽如此，可是一个完整的项目不应该只有命令。话不多说，直接正文吧。 下载一个node安装包， 然后安装到电脑上就ok了， 如果弄得版本过低， win…"}, {"id": "6844903655779336206", "title": "结合 UI 框架实现可配置 Vue 表单组件浅析", "desc": "引入 <AutoForm /> 组件。 fieldsMap.js 中配置表单项，包括 label、type、tag、options等。 Vuex state 中添加数据来源。 剩下的关键是 <AutoForm /> 组件是如何实现配置化，其实本质是动态生成表单项（根据配置文件）…"}, {"id": "6844903712259833864", "title": "3天学写mvvm框架[二]：模板解析", "desc": "（注：对于生成的代码，为了方便展示，这里手动的添加了换行与空格；对于模板，接下来将实现的代码还不能正确处理换行和空格，这里也是为了展示而添加了换行和空格。） 首先将字符串形式的模板解析后处理为我们需要的数据格式，这里将其称为AST Tree（抽象语法树）。 接着，我们将遍历这颗…"}, {"id": "6919496772062543885", "title": "💬 聊聊Vue2.x插槽那些事", "desc": "根据数据，可知需要设置7个插槽，其name对应取date值。在此，补充一个知识点： 实际上，方法二这样编写并不常见，更多的场景，是像Element-Tree组件，根据需要，既可使用默认树节点样式，也可自定义节点内容。"}, {"id": "6844903889569857549", "title": "vue 多项目配置", "desc": "需求一个项目中配置多个项目它们的差异性，网站logo、api地址、title、部分组件页面差异它们之间的差异性不是很大，用多分支切换项目成本太高，维护起来不方便场景启动项目时读取不同的配置eg：npm"}, {"id": "6844903831080271885", "title": "深入了解Vue响应式系统", "desc": "当然，仅仅从上面这个例子我们也只能知道，Vue不允许动态添加根级响应式属性。这意味我们需要将使用到的变量先在data函数中声明。 😅显然，变量 b 并不是响应式的，这也就造成了二次赋值的时候，对应的 computed 并没有发生变化。接下来我们来深究下这其中的原因。 文档中提…"}, {"id": "6904080006453362702", "title": "Vue3.0新特性及带来的性能”核变“", "desc": "前言Vue3.0也发布了有一段时间了，尤大今年四月份也开了直播介绍了Vue3.0的能力，最近沉下来学习了解了新特性，个人感觉Vue3.0还是非常强大的，我选了Vue3.0的绝对核心亮点来介绍，分别是本"}, {"id": "6844904051243483144", "title": "VUE源码系列四：计算属性和监听属性，到底该用谁？", "desc": "可以看出，本质上就是利用Object.defineProperty去给属性添加setter和getter，并且无论计算属性是函数还是对象，都会去执行createComputedGetter方法，并传入属性键。 createComputedGetter方法返回一个函数，即对应的是…"}, {"id": "6844904040829042702", "title": "[译] Vue.js 内部原理浅析", "desc": "说到 JavaScript 框架，Vue.js 绝对是个热门的 UI 框架（译注：截至本文翻译时其 Github 155k ⭐️ & 23k 🍴, 关注数已经超过了 React）。于我来说 Vue.js 最吸引人的地方在于 -- 其学习曲线，非常之低。个人角度来讲，我感觉就像…"}, {"id": "6844903560866430983", "title": "VUE + UEditor 单图片跨域上传", "desc": "UEditor官网说不提供单图片的跨域，所以只能自己解决。查了网上的很多方案，但是没看到和vue一起用的，不过倒是获得了一些思路。本着不想改太多源代码的基础上尝试着...一不小心就可以用了 3、创建一个页面展示JSON数据。我直接用路由参数接收返回的结果后再拼接，整个JSON接…"}, {"id": "6844904084772749319", "title": "Vue--手写虚拟 DOM", "desc": "virtual dom，它通过js对象模拟DOM中的节点，然后再通过特定的render方法将其渲染成真实的DOM节点。当我们更改元素的节点、属性，并不是真正的改变DOM,做dom diff算法来进行对比 比较老属性和新属性的差异，算出最新的，赋给真实DOM,子节点递归. DOM…"}, {"id": "6844903556038787086", "title": "我所知道的 vue-router", "desc": "哈哈哈哈😄"}, {"id": "6844903552528154638", "title": "vue实战-组件编写-todolist组件", "desc": "1. 父组件topNav中注册子组件，引入子组件 2. 先看看组件的功能 3. 开始写我们的todo子组件了 那删除功能呢？首先，我们要选中该行list，再点击删除才能删除该行数据，对吧。所以我们将按钮绑定一deleteItem方法，方法做的事情就是先检测该行的finished…"}, {"id": "6901047675227996167", "title": "vue-router源码解析 | 1.5w字 | 多图预警 - 【中】| 掘金年度征文", "desc": "这样就实现了官网上说的/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。效果 route目标路由对象，需要解析的目标，可以理解为路由跳转时的to对象，而current则可以理解为from对象。 next…"}, {"id": "6844903859605749774", "title": "翻译：测量vue应用运行时的性能！", "desc": "为了提高英文水平，尝试着翻译一些英文技术文章，首先就从这个Vue的小技巧文章开始，目前英文版一共22篇。计划用时2~3个月翻译完成。 在上一篇文章中，我们讨论了如何提高大型数据的性能。但是我们还没有测量它提高了多少。 我们可以使用Chrome DevTools 的性能选项来实现…"}, {"id": "6907148521544581134", "title": "【Vue-Element-Admin 分析】- 01 Mock 是怎么实现的？ ", "desc": "对于这个问题，第一反应是在 vue.config.js 中配置 devServer，通过 proxy 代理让流量流向 mockServer。 出乎意料的是，并没有 proxy。 不过这个问题暂不在本章讨论的范畴之内，后面的打包篇章会另行分析的。"}, {"id": "6844904110869708808", "title": "你还不知道Vue的生命周期吗？带你从Vue源码了解Vue2.x的生命周期(初始化阶段)", "desc": "相信很多人和我一样，在刚开始了解和学习Vue生命明周期的时候，会做下面一系列的总结和学习。 结合前面示例1的运行结果会有如下的总结。 最后的总结，就是来自Vue官网的生命周期图示。 那到这里，前期对Vue生命周期的学习基本就足够了。那今天，我将带大家从Vue源码了解Vue2.x…"}, {"id": "6977312999098810375", "title": "vue3 响应式Reactivity源码阅读", "desc": "Reactivity Readme: 谷歌翻译是： 该软件包内联到面向用户的渲染器的Global＆Browser ESM版本中（例如，@ vue / runtime-dom），但也可以作为可独立使用的"}, {"id": "6844903986873499662", "title": "Vue3.0尝鲜", "desc": "执行yarn dev命令后即可在packages/vue/dist/目录下看到vue.global.js文件，这个文件可以直接在<script>脚本中引入，这样就方便了我们去调试源码。 保存文件后，刷新浏览器可看到就是一个小按钮点击后会有+1的小功能效果。在看上面的代码是与之前…"}, {"id": "6844904113868636167", "title": "带你了解 vue-next（Vue 3.0）之 初入茅庐", "desc": "这几天，陆续学习了解了关于vue-next（Vue 3.0）的一些新特性，尤其是新的Composition API的用法。这套新的API中最重要、最核心的部分，恐怕就是实现响应式功能的这一块了。而且，这套响应式API不仅可以在vue-next环境下使用，也可以独立使用。 笔者在…"}, {"id": "6844903730828017671", "title": "巧用设计模式构建可配置Vue前端应用-活动页生成系统实践", "desc": "活动页，是各个互联网公司一个头疼的问题。为了跟上对手的脚步，需要时不时就要搞点花样。频繁重复的作业对于前端团队来讲是一件非常头疼的事情。活动发布系统是迫切需要的，让运营人员自己通过这个配置化活动页发布系统完成活动的发布。 但是配置化活动发布系统对灵活性，扩展性，维护性都具有很大…"}, {"id": "6844903567359229959", "title": "咱来聊聊 Vue - compile", "desc": "其实 eMount 最后还是去调用的 rMount，只不过在 eMount 做了一定的操作，如果你提供了 render 函数，那么它会直接去调用 rMount，如果没有，它就会去找你有没有提供 template，如果你没有提供 template，它就会用 el 去查询 dom …"}, {"id": "6844904184727207950", "title": "小白分享：基于vue-cli从零搭建一个Vue项目-Vcharts", "desc": "下面的是我的公众号二维码图片，欢迎关注，或公众号搜索【秋夜无霜】。"}, {"id": "6912419591847313422", "title": "vue3更新机制的理解", "desc": "写到这里,我们已经解决了提问三的该值的依赖收集后要存储在什么地方的问题。还需要解决的是提问一和提问二的问题，答案在下方的代码中： 写到这里，我们自己封装实现了watchEffect函数，该函数的功能实现是类比@vue/reactivity第三方库的effec函数的功能实现的，传…"}, {"id": "6844904116100186125", "title": "掌握了这些Vue指令，才算是入门Vue.js了，适合新手收藏【精心整理】", "desc": "指令（Directives）是带有 v- 前缀的特殊属性，指令属性的值一般是单个JavaScript表达式（v-for除外）。指令的功能是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。 在模板中输出真正的HTML，如果是使用 v-text 输出带标签的字符串的…"}, {"id": "6977280408505286670", "title": "vue", "desc": "Vue.js vue.js vue.js 是一套用于构建用户界面的渐进式框架 渐进式 Vue 核心 声明式渲染 组件 引入 我们还是先通过 <script> 的方式来引入 vue 组件 vue 的核心"}, {"id": "6844903921418829837", "title": "[Vue]强迫症发作，我是如何注册全局组件的？", "desc": "1. 常规操作 在全局组件中通常也会创建一个main.vue文件用于定义组件，创建一个index.js用于引入组件和对外暴露组件。如图： 2. 优化操作 当时觉得每次都需要创建一个index.js文件，并且里面只有两行代码，于是就想能不能把index.js文件去掉。目录变成这样："}, {"id": "6934608263845511182", "title": "cool-admin 发布啦！！！", "desc": "请确保您的操作系统上安装了 Node.js（> = 8.9.0）、@vue/cli （> 3.0.0）。 安装过程完成后，运行以下命令启动服务。您可以在浏览器中预览网站 http://localhost:9000"}, {"id": "6992018540328927240", "title": "实现简单版Vuex | 8月更文挑战", "desc": "介绍 本文目的是实现一个简易版本的Vuex用以学习，也是对从网课学习的总结和复习。其中内容为简易实现，多有不足之处，请多多交流。"}, {"id": "6844903512581603342", "title": "基于mongodb+express+vue+axios+bootstrap的掘金最热文章收藏评论分析", "desc": "最近浏览技术文章的时候，偶然看到一篇关于分析简书热荐文章中代码块数量的文章，链接我翻了一遍了历史记录也没有发现，可能被“吃了”把，好吧不管他的文章在哪了。看了那边文章后，我对掘金的首页开始了非分之想（嘿嘿嘿嘿~~,掘金君不要怪我奥！！） 看了掘金的最热文章后，我开始了一次“天马…"}, {"id": "6844903891415498765", "title": "vue仿小米商城-我知道的都在这里了", "desc": "在编写代码的过程中我会注意自己的代码规范以及命名的可读性，我也会在这个过程中边学习边记录。接下来让我们一起开启这一段令人期待的旅程吧！ 这里着重说一下HardSourceWebpackPlugin和autodll-webpack-plugin插件。在项目中使用这俩个插件之后，首…"}, {"id": "6844903800327634952", "title": "小tips-一种移动端模拟实现返回拦截的方案", "desc": "移动端作为互联网重要入口，切图仔前端工程师开发移动端页面早已是司空见惯的事了，并且其中大部分都是内嵌于客户端(app，小程序)的h5页面，即webview有次被同事问到一个问题，他有个需求，是一个内嵌"}, {"id": "6973969187190341646", "title": "如何使用 render 函数封装高扩展的组件", "desc": "如何使用 render 函数封装高扩展的组件 前面的文章有提到，vue 官网给出的 render 函数的例子只能体现 render 函数的优雅的一方面，却不能看出其扩展性。"}, {"id": "6919726191666528263", "title": "vue 中使用柱状图 并自修改配置", "desc": "1.在html文件导入echart2.在main.js上挂载echarts对象3.页面结构4.data中的数据mounted钩子函数调用更改柱形图配置1.在index.html引入主题配置文件2.在需"}, {"id": "6844904117924691982", "title": "60行代码 | Proxy实现一个数据驱动简易DEMO", "desc": "运行截图本文能做的带你了解一下Proxy的使用了解通过插值表达式怎么实现简易版的数据驱动代码仅是简单Demo，参考了50行代码的MVVM，感受闭包的艺术，一篇好文章，因为时间，沉底了，掏出来再学习一下"}, {"id": "6844904100811767822", "title": "剖析Vue实现原理 - 如何实现双向绑定mvvm", "desc": "目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。 D…"}, {"id": "6844903773878353928", "title": "Vue知识点", "desc": "1. vue的生命周期 beforeCreate : el 和 data 并未初始化。是获取不到props或者data中的数据的 created ：已经可以访问到之前不能访问的数据，但是这时候组件还没被挂载，所以是看不到的。 mounted：将虚拟DOM渲染为真实DOM，并且渲…"}, {"id": "6844903624137506824", "title": "谈一谈对vue-router的简单理解", "desc": "这就是比较简单和比较全的结构了，除去（参数和钩子，后面讲）。 vue-router默认使用的是hash模式，就是在路由跳转的时候，会有很多 #，看起来不太美观，因此我们可以使用 history模式 ，这种模式充分利用了 history.pushStateAPI来完成URL跳转而…"}, {"id": "6906331373406322696", "title": "桌面与Web的信使：Notification API（附Vue3中使用）", "desc": "引言这是在初次进入Facebook的时候Chrome在地址栏弹出的提示👇当你点击了“允许”后，即使你最小化了标签或者切到其他标签去了，朋友发给你的聊天信息也会通过桌面级的通知告诉你，FB还使用了FCM"}, {"id": "6933236452612374541", "title": "Router路由-VUE-CLI脚手架-VUE..JS组件", "desc": "1. 父传子有哪些方式 2. 子传父有哪些方式 商品为子组件，购物车为父组件，父组件需要统计商品个数，就需要在子组件个数变化时传值给父组件。 3. 如何让 CSS 只在当前组件中起作用 4. keep-alive 的作用是什么 主要用于保留组件状态或避免组件重新渲染。 5. v…"}, {"id": "6844903551446024205", "title": "自己动手写一个 SimpleVue", "desc": "双向绑定是 MVVM 框架最核心之处，那么双向绑定的核心是什么呢？核心就是 Object.defineProperty 这个 API，关于这个 API 的具体内容，请移步 MDN - Object.defineProperty ，里面有更详细的说明。 监听者(Observer)…"}, {"id": "6844903981861306376", "title": "Vue3.0数据响应系统分析(主要针对于reactive)", "desc": "Vue3.0与Vue2.x的数据响应机制Vue3.0采用了ES6的Proxy来进行数据监听优点:缺点:源码导读在分析源码之前，我们需要得知几个变量先:首先我们来看一下reactive函数首先我们检测了"}, {"id": "6844903577224216590", "title": "【翻译】Vue.js中的computed是如何工作的", "desc": "这篇文章，我们通过实现一个简单版的和Vue中computed具有相同功能的函数来了解computed是如何工作的。 尽管person.age看起来像是访问了对象的一个属性，但其实在内部我们是运行了一个函数。 有趣的是，25和‘Brazil’还是一个闭包内部的变量，只有当赋给它们…"}, {"id": "6844904131451158536", "title": "40.vue全解(起手式1)", "desc": "详细：组件不仅仅是要把模板的内容进行复用，更重要的是组件之间的通信，通常父组件的模板中包含子组件，父组件要向子组件传递数据或者参数，子组件接收到后根据参数的不同来进行对应的渲染。数据传递在vue组件可以通过props来实现"}, {"id": "6972548822287417352", "title": "【Vue2.x 源码学习】第九篇 - 对象数据变化的观测情况", "desc": "【Vue2.x 源码学习】第九篇-对象数据变化的观测情况；实现了对象老属性值变更为对象、数组时的深层观测处理；结合实现原理，说明了对象新增属性不能被观测的原因，及如何实现数据观测；"}, {"id": "6936708299786190856", "title": "SpringBoot+Vue豆宝社区前后端分离项目手把手实战系列教程14---帖子列表分页功能实现", "desc": "本项目实战教程配有免费视频教程，配套代码完全开源。手把手从零开始搭建一个目前应用最广泛的Springboot+Vue前后端分离多用户社区项目。本项目难度适中，为便于大家学习，每一集视频教程对应在Github上的每一次提交。"}, {"id": "6947969424921985031", "title": "el-tree数据回显，解决子级部分选中，父级全选效果", "desc": "在el-tree中回显数据有一个很明显的坑，只要回显的数据里有父级的id，不管当前父级下的子级是部分选中还是全选，父级的check效果都是全选。 我看了很多博主说用setChecked循环便利来勾选叶子节点，但我试了半天也没用，setTimeout，nextTick都试了，无效…"}, {"id": "6972757240411324447", "title": "Vue CLI", "desc": "初识Vue CLI Vue CLI的使用 Vue CLI 2 创建项目 项目目录结构 runtimecompiler和runtimeonly的区别 同时新建两个项目，左为配置了runtimecompi"}, {"id": "6892582663765377038", "title": "Vue数据响应式、模板解析的实现原理（实现一个简易的Vue）", "desc": "在上方，我们把模板解析和数据响应分成2个方法去执行。但是他们相互之间没有关联的话怎么去实现页面和数据同步呢？"}, {"id": "6844903640432377869", "title": "vue、react隐式实例化", "desc": "这是一篇几个月前写的文章，那时候理解也不是特别透彻，但还是搬运到掘金发一遍。 可以看的出来，我们的需求是想有一个组件能像html原生的alert一样，在需要的地方能够直接去调用，而不是需要把message组件写进节点中。 react相当明显地创建了一个class，vue表面上好…"}, {"id": "6854573213632954375", "title": "Vue.js源码学习(完结)-虚拟DOM的patch算法", "desc": "虚拟DOM将虚拟节点vnode和旧虚拟节点oldVnode进行对比，得出真正需要更新的节点进行DOM操作。对两个虚拟节点进行对比是虚拟DOM中最核心的算法（即patch）。 由于Vue.js的变化侦测粒度很细，一定程度上可以知道哪些状态发生了变化，所以可以通过细粒度的绑定来更新…"}, {"id": "6844903968791855111", "title": "Electron + Vue + Vscode构建跨平台应用（四）利用Electron-Vue构建Vue应用详解", "desc": "主进程是指： 运行 package.json 里面 main 脚本的进程成为主进程。 渲染进程是指： 每个 electron 的页面都运行着自己的进程，称为渲染进程。 通俗的来讲主进程也就是 npm run start 出来的窗口，而窗口里面的内容，即是渲染进程。"}, {"id": "6844903518344577037", "title": "深入浅出 - vue变化侦测原理", "desc": "一年前我写过一篇 响应式原理的文章，但是最近我发现讲的内容和我现在心里想的有些不太一样，所以我重写一篇文章。 我的目标是能让读者读完我写的文章能学到知识，有一部分文章标题都以深入浅出开头，目的是把一个复杂的东西排除掉干扰学习的因素后剩下的核心原理通过很简单的描述来让读者学习到知识"}, {"id": "6936000066234613773", "title": "Vue起手笔记", "desc": "尤雨溪尤大，英文名 Evan You。 本科就读于美国科尔盖特大学，艺术与艺术史专业，帕森设计学院艺术硕士，毕业后在Google Creative Lab担任UI相关工作后，后来转为全职JavaScript开发工程师。现为独立开发者，靠每个月十几万以上的捐款生活还有其他赞助。-…"}, {"id": "6922988153067044878", "title": "从零开始，用elementui躺坑vue - Router", "desc": "Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。学习Vue，Vue Router是必须要掌握的技能之一。官方教程是最好的的阅读文献，请仔细阅读 产品经理: 某天，产品经历拿着掘金APP说，这是APP很漂…"}, {"id": "6989066157755990023", "title": "从源码理解vue的响应式一", "desc": "我们都知道vue可以实现响应式，且实现方式是重写对象的Object.defineProperty中的setter和getter，那么具体是怎么实现的呢，我们可以一起学习一下"}, {"id": "6950584069511970847", "title": "Vue中路由到一个公共组件，然后根据路径中是否存在文件动态加载组件", "desc": "1、实现多个路由1个组件这个直接定义即可，我使用的是 vue-element-admin，因此定义的路由如下：这里使用import，webpackage可以支持动态载入组件，当然直接引入组件也是可以的"}, {"id": "6844903619934814222", "title": "基于 flex 的 order 实现 carousel 轮播图", "desc": "最开始找到了这篇文章，里面讲解了传统的轮播图实现思路和作者原创的轮播思路，并在文末给出了性能较高的原创方案。 作者的原创方案性能是很高了，但是我注意到每次执行轮播都需要移动一个 DOM 节点，这会触发浏览器重排重绘，性能依旧不够高，还可以继续优化。 可以看到只有现代浏览器才支持…"}, {"id": "6844904184903385102", "title": "学习vue源码（10）手写render渲染函数", "desc": "update里 有一系列 diff操作。 怎么获取下面继续....... 太简单了，总结跟没总结一样....... 如图所示，是在挂载阶段执行的。 到这里其实基本就已经结束了render的思路，但是源码中有个静态render，这个 对渲染性能的提高有极大的帮助，所以必须看下。 …"}, {"id": "6975035828233830437", "title": "全新又古老又简单的状态管理库", "desc": "#####这是一个新的状态管理库，来自一点新的思想。源码地址 前端届特别喜欢把简单的事情搞复杂。 本来原生代码就已经可以实现的事情。非要为了当前端网红，造一些复杂的，大而无当的东西。 现在让我们抛弃复"}, {"id": "6897019654670123016", "title": "Vue2中缓存列表页搜索参数", "desc": "当前列表页可进行条件搜索，有一些操作例如：查看详情，编辑等需要跳转路由。现在是想要在返回列表页时保留之前的搜索项等 2.编辑操作成功之后进行返回。 第二种场景：对数据进行了操作，所以返回列表页的时候必须保证列表页数据时最新的状态。比如当前数据是暂存状态，是可以对数据进行修改的，…"}, {"id": "6844903630730952717", "title": "HeyUI组件库发布vscode插件，PS教程: 如何开发vscode插件？", "desc": "HeyUI组件库，我们项目组已经用了一年多了。 一直没有对应的组件库插件，我一直耿耿于怀。 所以，抽时间查阅了vscode的插件开发教程，终于把vscode的插件完成了。 在此奉上我们的插件库链接，多谢大家提建议。 或者大家可以通过在vscode插件库中搜索 heyui-sni…"}, {"id": "6974954180351885326", "title": "vue3基础", "desc": "Vue3基础 1. Vue的createApp()和mount()方法 createApp()创建一个Vue的实例。 它接受一个对象形式的参数{}。 这个对象就是告诉Vue应该如何展现我们最外层的组件"}, {"id": "6911591494272942093", "title": "理解Vue数据响应式", "desc": "拿Vue官方教程举例来说，在Vue中我们只需要改变data中的price，页面会立马自动做出响应来显示更新后的数据。而不是像使用原生JS需要许多DOM操作才能完成。Vue是怎样监听到数据的改变让视图立马做出响应的呢？ 而我们定义在data中的数据并没有set，get的计算属性，…"}, {"id": "6844904015239577613", "title": "vue+leaflet（四）—— 使用PruneCluster实现地图点聚合效果", "desc": "vue+leaflet（四）— 使用PruneCluster实现地图点聚合效果，防止标记点过于密集。"}, {"id": "6999636096858488868", "title": "vue-i18n语言开发", "desc": "看了很多多语言都是英文来定义的，这样对应我们英语不好的可读性太差了，所以找了一个方法用中文来定义KEY"}, {"id": "6844904113247895566", "title": "用混入的方式写分页-Vue管理端项目分页写法新尝试", "desc": "对于一个经常写管理端系统的前端来说，写分页是一件绕不过去的事情；一般的做法是将分页与表格封装在一个组件里，在渲染列表时，通过触发changePage和changeSize分页事件来渲染分页列表。"}, {"id": "6930049191767080974", "title": "VUE的生命周期（预习）", "desc": "每个vue实例在被创建时都要经过一系列的初始化过程---例如，需要设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等，称为vue实例的生命周期使用生命周期钩子探讨生命周期从一道面试题"}, {"id": "6871647448188747790", "title": "vue响应式原理|模版编译|虚拟DOM源码分析", "desc": "最近翻读vue的源码,总结一下几点:vue首次渲染的过程在源码中有4个导出vue的文件src/core/instance/index.jssrc/core/index.js调用initGlobalAP"}, {"id": "6844904084114259981", "title": "vue双向绑定原理解析", "desc": "Vue可以说是最近比较火的一个框架了，自己也用vue写过几个小项目了，所以在空余时间研究了一下vue双向绑定的原理，最后形成博客让自己印象更加深刻，也算给大家分享一些经验。 首先我们来说一下vue的双向绑定到底是如何实现的。其实vue是使用了数据劫持+订阅发布模式来实现的双向绑…"}, {"id": "6949395217153785864", "title": "Gridsome 静态站点生成", "desc": "一、Gridsome 介绍Gridsome 是一个免费、开源、基于 Vue 技术栈的网站生成器官方网站Github什么是静态网站生成器静态网站生成器是使用一系列配置、模版以及数据、生成静态HTMl文件"}, {"id": "6877143195840544776", "title": "vue源码解析之props原理", "desc": "前言最近会陆续的对vue进行源码分析，一系列课程如下：state系列props原理methods原理data原理computed原理方法执行时机在beforeCreate之后，created之前，会i"}, {"id": "6975444044730073102", "title": "准备工作 - 学习vue源码系列1", "desc": "学习黄轶老师的vue源码解读 认识 flow的使用、 vue的源码目录设计结构、 vue怎么构建的、 vue的入口在哪"}, {"id": "6969121218771288071", "title": "举个栗子，简易代码，对比Vue2和3的响应式原理", "desc": "Vue3.0 使用proxy代替了vue2.0版本中的defineProperty Vue2.0响应式原理的一系列问题，在Vue3.0中得到了优化解决方案。"}, {"id": "6969118265175965710", "title": "基于 element-plus 封装一个依赖 json 动态渲染的查询控件", "desc": "一个非常好用的查询控件。针对管理后台的查询功能量身定制。基于 vue3 + element-plus。对用户非常友好，节省开发人员的大量时间。还在不断完善中，要不要来关注一下？"}, {"id": "6944375391918227486", "title": "vue3奇淫技巧--如何让视图同步更新", "desc": "之所以写这篇是因为我之前写了一篇 vue中data改变后，如何让视图同步更新，之前的是vue2的，现在vue3出了，所以写一篇vue3的。 事先声明，文章中的内容了解即可，千万千万不要用于生产环境。 众所周知，在vue中，更改数据后，会在微任务中更新dom，这是一个异步操作。如…"}, {"id": "6844904015059238919", "title": "基于vue-cli4脚手架搭建的cesium所踩的坑(2020年6月1日 更新)", "desc": "最后总结下，当时搭建这个确实踩了一些坑，就是诸如网上说的那些常见报错，而且很多文章都是他抄他，他搬他的，不过也都解决了，写出来感觉也没什么东西，但是确实是被路径啊，找不到包啊，声明之类的报错弄的烦躁，然后当时网上出了那些文章的小伙伴也不分享的实例，我就好了，下面分享个实例，结合…"}, {"id": "6985011945975840781", "title": "Vuex状态管理二——基本使用", "desc": "什么是Vuex Vuex是专门为Vue.js设计的状态管理库 Vuex采用集中式的方式存储需要共享的状态 Vuex的作用是进行状态管理，解决复杂组件通信，数据共享 Vuex集成到了devtools中，"}, {"id": "6860178370928312328", "title": "从Vue 2到Vue 3的迁移指南之破坏性特性（二、全局API的tree-shaking）", "desc": "Vue.nextTick() 是一个从 Vue 对象直接暴露出来的全局 API，其实 $nextTick() 只是 Vue.nextTick() 的一个简易包装，只是为了方便而把后者的回调函数的 this 绑定到了当前的实例。 但如果你从来没有手动操作 DOM 的需要，或者你不…"}, {"id": "6847902215684751374", "title": "vue分环境自动化部署前端项目", "desc": "    各位小伙伴们，大家好！今天我们来说一下vue项目如何分环境自动化部署，提到到自动化部署，有些小伙伴可能想到了jenkins，这个也是本人公司目前在用的一个方案，不过考虑到部署jenkins需要"}, {"id": "6895747320550260750", "title": "elementui 中 loading 组件源码解析", "desc": "很明显，我们的入口在./examples/play.js，然后我们根据这个文件找到 examples/play 文件夹下的 vue 文件，那么我们的准备工作就算是完成了。 根据以上代码，我们就可以知道支持指令来调用的在./src/directive文件中，支持添加 Vue 实例…"}, {"id": "6986851818059857928", "title": "如何解决vue在相同页面中跳转路由，页面内容不更新的问题", "desc": "问题：当几个页面渲染在同一个路由下，依靠id来改变页面时，页面地址改变了但是页面并没有变（视图没有更新） 问题解析： 虽然地址改变了，但是页面只会创建一次，不会再次去发送请求,setup只会执行一次，"}, {"id": "6895703097352388615", "title": "Vue-i18n异步加载翻译资源文件方式探讨", "desc": "背景：所在的项目是一个海外电商项目，涉及不同国家的翻译文件较多，有20+，如果将所有的翻译文件都打包的部署包中，会导致页面首屏渲染较慢；项目分多个区域进行部署，在不同的区域下，只服务单独几个国家的业务"}, {"id": "6971694745512837134", "title": "vue 2.x  diff源码解析", "desc": "背景 1. 为什么要用Diff算法 由于在浏览器中操作DOM的代价是非常“昂贵”的，所以才在Vue引入了Virtual DOM，Virtual DOM是对真实DOM的一种抽象描述,说到底就是个js对象"}, {"id": "6971691624434761736", "title": "vue静态资源及数据的配置总结", "desc": "如果把图片、样式文件这类称作静态资源，配置文件中的内容称作静态数据，那如何实现这些资源及数据的正确配置呢？一起来看看！"}, {"id": "6844903832418254861", "title": "Vue-CLI and Leaflet（2）：地图基本操作（放大，缩小，平移，定位等）", "desc": "接着上一篇文章。地图加载成功之后，接下来要开始对对地图的常见功能的实现，一个地图的基本功能包括:地图显示，平移，放大，缩小，定位 等功能。 ​ 通常 WebGIS 中地图平移是最为基本且常用的功能，地图会默认开启平移功能。通常情况下都不需要开发者自己去实现 平移的功能。 ​…"}, {"id": "6844903697667850248", "title": "自定义文件上传功能实现方法", "desc": "本文采用的是vue框架，但是不管什么框架，原理是相通的，所以希望大家不要将自己的格局局限在 框架里。 说句题外话，最近尤雨溪说要开发vue 3.0 了，而且听说变动挺大的。我倒是觉得其实没什么大不了的。我准备趁着这个机会学习一下React，然后找个小项目实践一下。毕竟学习vue…"}, {"id": "6881926986256613389", "title": "Vue/Cli项目创建入门和项目发布", "desc": "下载地址：https://nodejs.org/zh-cn/ ，选择长期支持版或者最新版都可以。 下载完成后双击开始安装，选项全部下一步即可。 使用win+r，输入cmd，进入命令行模式。由于npm源位于国外，使用淘宝npm镜像来加速下载。命令行中输入如下指令： 接下来会让你选…"}, {"id": "6980567161068748807", "title": "啥，Vue又出新单曲？", "desc": "啥，Vue又出新单曲？ 今天周六来加班，对于还没机会开始使用Vue3的前端来说，生怕被你们落下， 于是打开了Vue官方仓库，想看看你们都学习到哪了，就在刚打开仓库的一瞬间， 居然发现了..."}, {"id": "6844903713031585799", "title": "如何实现一个 鼠标点击特效的 chrome插件", "desc": "在这个年代，不用chrome都不好意思说自己是敲代码的。特别是前端，chrome对于前端来说简直是调试利器，不可或缺的存在。不得不说chrome的功能是极其强大的，其中最亮眼的功能莫过于扩展程序(浏览器插件)，国内各大浏览器品牌也都纷纷“效仿”，今天就为大家带来一次chrome…"}, {"id": "6980359316448641054", "title": " 02.Vue里面的过滤器", "desc": "一 Vue 过滤器分类 过滤器分为两种，一种是局部过滤器，一种全局过滤器。所有的过滤器都是函数，并且参数为要过滤的数据。 局部过滤器：只允许在当前组件中使用 全局过滤器：所有组件都可以使用 二.局部过"}, {"id": "6883756330180575240", "title": "vue  cli2.0+ 和 vue cli3.0 用户无感发布版本配置部署", "desc": "这种更新部署方式会引起下面的问题: Webpackhash有三种方式hash:hash是跟整个项目的构建相关，只要项目里有文件更改，整个项目构建的hash值都会更改，并且全部文件都共用相同的hash值"}, {"id": "6986684413278945310", "title": "Vue.js上手", "desc": "初识Vue.js Vue.js是流行的渐进式JavaScript前端框架。“渐进式”指的是你的项目可以部分或全部采用Vue的特性，而不是要求所有功能模块都必须用Vue实现，你可以逐渐地使用Vue.js"}, {"id": "6992147369450045471", "title": "响应式原理 - 学习vue源码系列4.2", "desc": "响应式对象，核心就是利用 `Object.defineProperty` 给数据添加了 `getter` 和 `setter`。 这样在访问数据以及写数据的时候能自动执行一些逻辑"}, {"id": "6991646499775971359", "title": "如何优雅的使用Vuepress编写组件示例（下）👈", "desc": "最近在搭自己的组件库，关于文档用的是Vuepress 官网在文档说明展示组件示例的方法有很多种，但种种都不合心意 通过查阅网上的资料和Element的源码找出了我认为的一种最优解，借此机会分享..."}, {"id": "7004721320101412894", "title": "Vue项目中市与区联动下拉选择框完整代码", "desc": "1.创建一个城市下拉选择的组件 2.写js 引入文件请看 https://juejin.cn/post/7004716997002919973 3.在所需要的vue文件中导入即可"}, {"id": "6844903641829081095", "title": "TypeScript + 大型项目实战", "desc": "TypeScript 已经出来很久了，很多大公司很多大项目也都在使用它进行开发。上个月，我这边也正式跟进一个对集团的大型运维类项目。 每一个模块要做的事情也很多，由于牵扯到公司业务，具体要做的一些事情这里我就不一一列举了，反正项目整体规模还是很大的。 在做了一些技术调研后，再结…"}, {"id": "6940946304885325860", "title": "手把手撸一个 Vue3 + Ts + ElementPlus 简易后台模板", "desc": "脚手架用的是vue-cli,vite还不太稳定，很多第三方库也存在兼容问题，为了能正常在实际项目中使用，还是选择了vue-cli。 然后 Vue 选 3.0, css预处理器，看个人习惯，sass,less,stylus都可以。 创建完项目，把那些不需要的页面例如:hellow…"}, {"id": "6954925963226382367", "title": "手写Vue2.0源码（九）-侦听属性原理 ", "desc": "前言 此篇主要手写 Vue2.0 源码-侦听属性 上一篇咱们主要介绍了 Vue 组件原理 深入了解了 Vue 组件化开发的特色 此篇将介绍我们日常业务开发使用非常多的侦听属性的原理"}, {"id": "7006243423837487141", "title": "Vue3系列--2.基本用法", "desc": "上一篇文章介绍了Vue3和Vue2的一些区别，现在来接着上一篇文章继续介绍Vue3的基本用法。 1.组合API-computed函数 computed函数，是用来定义计算属性的，计算属性不能修改。(计"}, {"id": "6976212516850532365", "title": "从Vue2.0到React17——React中实现Vue指令", "desc": "Vue提供了一些列的指令，帮助我们快速开发组件，如最常用的`v-model`、`v-show`、`v-if`、`v-for`，这些指令的功能在React中是如何提供的。"}, {"id": "6997650099690012680", "title": "vue的系统学习|各种基础知识和细节篇", "desc": "目录 vue基础（本篇） vue-cli vue-router vuex element-ui vue3 1.vue简介 1.1 vue是什么 一套用于构建用户界面的渐进式JavaScript框架"}, {"id": "6919285014991470600", "title": "你可以手写Vue2的响应式原理吗？", "desc": "这道题目是面试中相当高频的一道题目了，但凡你简历上有写：“熟练使用Vue并阅读过其部分源码”，那么这道题目十有八九面试官都会去问你。 作为一个前端的MVVM框架，Vue的基本思路和Angular、React并无二致，其核心就在于: 当数据变化时，自动去刷新页面DOM，这使得我们…"}, {"id": "7005561221919277092", "title": "使用 Vue-CLI 初始化项目", "desc": "--- highlight: agate --- > **使用 vue-cli 可以`快速搭建Vue开发环境` 以及 `对应的webpack配置`** ```js //由于国内直接使用 npm 的官方"}, {"id": "6962061198665728014", "title": "基于vue的简单轻便的开源图片预览组件", "desc": "先上效果图 vue-dark-photo 基于 vue2.x 开发的预览图片组件 支持 放大、缩小、复原、下载、打印等功能"}, {"id": "6936024530016010276", "title": "手写Vue2.0源码（二）-模板编译原理｜技术点评", "desc": "前言 此篇主要手写 Vue2.0 源码-模板编译原理 上一篇咱们主要介绍了 Vue 数据的响应式原理 对于中高级前端来说 响应式原理基本是面试 Vue 必考的源码基础类"}, {"id": "6960465810682806308", "title": "Vue 源码解读（9）—— 编译器 之 优化", "desc": "详细讲解了 Vue 编译器的优化工作 —— 静态标记 ......................."}, {"id": "7000946856163278878", "title": "vue中使用file-saver和xlsx导出数据", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 导出表格数据 有时候在做后台项目的时候通常会有这样一个需求，需要把很多用户筛选出来的数据导出进行传递，其实可以利用原声js实现的，今天只是记"}, {"id": "6998811925630959653", "title": "Vue源码（十二）常用API", "desc": "Vue提供了很多API，比如$set、Vue.use、Vue.extend、Vue.mixin、Vue.$nextTick等，逐行分析这些API是如何实现的"}, {"id": "6973307410089771015", "title": "模拟实现所有Vue3响应式API（上）", "desc": "本系列是要模拟实现所有Vue3响应式相关的所有API，这是第一篇，此篇模拟实现了响应式中的核心函数reactive~"}, {"id": "7002077134017527839", "title": "2x1 VueRouter - 进阶 - 路由元信息", "desc": "VueRouter 基础教程系列 🎉 路由元信息 首先规范下术语，我们将路由配置对象（routes）中的每个配置项称之为 “路由记录”。 路由记录可以通过 children 进行嵌套，所以当一个路由被"}, {"id": "6844903972508008462", "title": "推荐一个基于Vue 的 H5 快速开发模板", "desc": "本项目已经为你生成了一个完整的开发框架，下面是整个项目的目录结构。 启动完成后会自动打开浏览器访问 [http://localhost:9000， 你看到下面的页面就代表操作成功了。 目前前端的一个开发趋势是以搭建单页应用 (SPA) 为主的。当应用体系比较大，或者你的应用业务…"}, {"id": "6987364053970583589", "title": "【Vue源码学习】深入理解watch的实现原理 —— Watcher的实现", "desc": "秋招来袭，笔者最近正在学习Vue的源码，通过对源码的解读，结合常考的面试题，深入理解Vue的源码原理，并动手实现Vue的一些方法。该系列文章即为这项学习计划的总结和输出，后续将持续更新。。。"}, {"id": "7001124769697366030", "title": "Vue3从0到1组件开发-业务组件：城市选择器", "desc": "分析一下 这类组件的话常见于服务性质或者商业性质类的项目上，例如美团、饿了么、去哪儿等项目，这类项目为客户提供的服务需要直接用户当前的位置"}, {"id": "6989647768411176968", "title": "vue的就地更新策略", "desc": "vue有个指令我相信大家都写烂了，就是v-for，只要涉及到有重复元素需要遍历时，就会用到它，但是它还会跟着有个附属条件，就是必须加一个key值，这是为什么呢？ 我们首先去vue官网看一下它咋写的： "}, {"id": "6854573211422572557", "title": "让Vue项目更丝滑的几个小技巧", "desc": "在开发Vue的过程中，我们经常会遇到一些这样那样的问题，然后要卡好半天，等问题解决了才发现原来一些细节知识点还是没有掌握好。今天小编就整理了几个在项目中会用到的一些实战技巧点，希望可以帮助到正在努力赚钱的你。江湖规矩，先赞后看，艳遇不断。 前几天有朋友给我发了一段代码，然后说V…"}, {"id": "6904494023554105358", "title": "自己设计的Vue3的实用项目（\b内含对项目亮点的实现思路与介绍）", "desc": "我现在也是个非计算机专业的大四在校生，平时前端都是自学的，所以从初学到现在基本上都是通过白嫖网上的视频、买书或从图书馆借书看、逛技术博客长长见识等等。这期间我会看到很多实用的工具网站或一些有趣的网站，我都会把他们收藏下来，生怕之后找不到了，但是随着时间的推移，收藏的网站越来越多…"}, {"id": "6992360799951912968", "title": "VUE3 教程：理工直男都是如何一步一步带妹构建插件？", "desc": "插件是为Vue应用添加可重用功能的好方法。有了大量用于组件、路由等的现有插件，Vue的生态系统为许多常见的用例提供了解决方案。"}, {"id": "7002822778302758948", "title": "Vue实现返回上一页，页面停留在原来位置，不刷新", "desc": "一、配置路由缓存 二、配置App.vue文件中得<router-view/> 三、使用this.$router.back()返回 当用户在详情页点击返回的按钮时，我们把按钮的返回事件 this.$ro"}, {"id": "6874383765070675976", "title": "尤大 3 天前发在 GitHub 上的 vue-lit 是啥？", "desc": "尤大北京时间 9月18日 下午的时候发了一个微博，人狠话不多。看到这个表情，大家都知道有大事要发生。果然，在写这篇文章的时候，上 GitHub 上看了一眼，刚好碰上发布： 除此之外，我在尤大的 GitHub 上发现了另一个东西 vue-lit，直觉告诉我这又是一个啥面向未来的下…"}, {"id": "7005857469767352350", "title": "Vue2ElementUi封装一个能把图片上传到腾讯云的组件", "desc": "思路： 这个组件的封装借用elementUi的组件 upload 组件，在它的基础上进行二次封装，这个组件的作用顾名思义就是上传组件 先去官网复制它的代码，让项目跑起来看看效果 自定义上传配置 关键属"}, {"id": "6992976063479431175", "title": "深入源码理解reactive和ref", "desc": "最近一直重新学习Vue3，目前看到composition API了，尝试结合源码看看，理解深刻一些。本文先来看看 reactive 和 ref~"}, {"id": "6997591351487365128", "title": "Vue开发可视化大屏项目解决方案", "desc": "在大数据时代，我们经常听到“用数据说话”这句话。但是数据本身只是一个个冰冷的数字，很难直接告诉我们哪些数据是有价值的信息。 只有通过适当的可视化工具来展示和表达数据，才能更直观地向用户传达数据的价值。"}, {"id": "6995360856703762445", "title": "@vue/composition-api 解析", "desc": "组合式 API 是 vue3 提出的一个新的开发方式，而在 vue2 中我们可以使用新的组合式 API 进行组件开发。本篇通过一个例子，来分析这个插件是如何提供功能"}, {"id": "7002884007981481997", "title": "vue3源码之旅-reactive", "desc": "更多文章 前言 用了组合式api一段时间了，报着知其然、知其所以然的态度去阅读尤大大的代码，分享一下关于reactive部分，按照官网APIreactive部分逐个分析，为了方便理解可以参考简化后代码"}, {"id": "7005213922215067678", "title": "vue3 setup 获取dom元素（ref）", "desc": "不知道vue3的火热程度如何，最近需要用vue写个小项目，于是想用vue3来写，顺便学习进步，一切都挺顺利，在vue3里新的特性十分简洁，不到一会儿就都学会了，有的时候事情也没有想象中的顺利。 1、首"}, {"id": "6999901520057597960", "title": "Vue中ref和$refs的用法与介绍", "desc": "介绍：ref 被用来给DOM元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例。 注意"}, {"id": "6910009240053055496", "title": "Vue3丨从 5 个维度来讲 Vue3 变化", "desc": "Vue：Mixins（混入）、HOC（高阶组件）、作用域插槽、Vue Composition API（VCA/组合式API）。 React：Mixins、HOC、Render Props、Hook。 我们可以看到都是一段越来越好的成长史，这里就不再举例赘述，本文重心在 VCA，…"}, {"id": "6970621849835307045", "title": "Vue 中插槽slot的用法和应用场景", "desc": "什么是插槽？ 我们知道在Vue中 Child 组件的标签 的中间是不可以包着什么的 。 可是往往在很多时候我们在使用组件的时候总想在组件间外面自定义一些标签，vue新增了一种插槽机制，叫做作用域插槽。"}, {"id": "6926776849066360846", "title": "Vue3丨进一步了解这 20 个响应式 API，写码如有神", "desc": "我们希望 val1 或 val2 的值改变的时候，sum 也会响应的做出正确的改变。 让我们记住三个关键的英语单词，它们的顺序也是完成一个响应式的顺序。 浅浅的解释一下：在组件渲染过程中，假设当前正在走一个 “effect”（副作用），这个 effect 会在过程中把它接触到的…"}, {"id": "6895497352120008717", "title": "Vue 项目一些常见问题的解决方案", "desc": "本文已经授权掘金开发者社区公众号独家使用，包括但不限于编辑、标注原创等权益。 有一些问题不限于 Vue，还适应于其他类型的 SPA 项目。 1. 页面权限控制和登陆验证 就是一个网站有不同的角色，比如管理员和普通用户，要求不同的角色能访问的页面是不一样的。如果一个页面，有角色越…"}, {"id": "6993729338843594783", "title": "Vue3从0到1组件开发-基础组件：BackTop回顶", "desc": "基础组件之最后一文，回到顶部的组件开发，分享下如何开发一个定时回到顶部动画的回顶组件，希望能有助于大家"}, {"id": "6997269931863572511", "title": "vue低代码（一）-- 走进低代码", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战。 低代码算是最近比较热门的一块领域了，通过拖拽组件，添加数据等等方式，可以快速的实现一些规范化的页面，提高了项目工程的效率"}, {"id": "6871066457258590216", "title": "Vue学习笔记（二）", "desc": "一. 数据请求 1. fetch 而且基于事件的异步模型写起来不友好。 二. 组件 1. 虚拟dom与diff算法 key的作用 2. 为什么组件化 3. 组件注册方式 4. 组件编写方式与Vue实例的区别 5. 组件通信 i. 父子组件传值 (props down, even…"}, {"id": "6844904128355926029", "title": "Vue数据响应式和编译原理分析 和 模拟实战", "desc": "引入MyVue文件，New一个 Vue对象，挂载元素，处理数据。响应化设置，模板编译。 我们首先要接收一个 配置项options,然后保存一下并拿出来数据。 拿出data数据后要进行 数据的响应式 也就是observe,并把data传入。最后编译模板 众所周知，我们需要的d…"}, {"id": "6844904166364545037", "title": "Vue响应式原理", "desc": "Vue是数据驱动视图实现双向绑定的一种前端框架，采用的是非入侵性的响应式系统，不需要采用新的语法（扩展语法或者新的数据结构）实现对象(model)和视图（view）的自动更新，数据层（Model）仅仅是普通的Javascript对象，当Modle更新后view层自动完成更新，同…"}, {"id": "6959896372061405198", "title": "input 文字和placeholder字体大小不一样placeholder不垂直居中的问题", "desc": "试过给input 设置 line-height: normal;然而并没用 最后找到给placeholder做定位搞定"}, {"id": "6844904025691799565", "title": "[Nuxt系列04][译]组织并解耦你在 NuxtJs 中调用的 api", "desc": "你的 Nuxt 应用总是和与之匹配的后端服务共同成长，慢慢发展壮大的。这时，你的 API 也从屈指可数直到变成了如广袤丛林般的庞大资源，而你依然想要在这“丛林”中称王。这意味着你必须合理地组织这些 API 以保证它们都是有迹可循的，而非一团乱麻。假设这样一个场景，你想要重命名一…"}, {"id": "6844903854132183047", "title": "Vue-js 源码解读系列——this 直接调用数据源", "desc": "这篇文章根本没有说清楚，或者说根本就说错了。可能不知道误导了多少人，而且网上对于该问题的解释都一致的看向源码中的： data.call(vm, vm) 并没有实现我们想要的功能。 这里遍历了我们之前所取到的 data，对其中每一个属性都进行了proxy(vm,_data, ke…"}, {"id": "6979584353097646088", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】025-Vue中的高级语法：自定义vue指令", "desc": "2、自定义vue指令 使用ref获焦点 运行结果 自定义指令实现获取焦点 运行结果 局部自定义指令 运行结果 说明 我们上面使用了生命周期函数 mounted ，实际上其他的生命周期函数也可以使用在自"}, {"id": "6979555533527187464", "title": "如何在项目中复用 “导出Excel”（备忘）", "desc": "excel.export_json_to_excel({ // header为导出表格的头部信息，data为内容信息 header: tHeader, data"}, {"id": "6844904199298220039", "title": "基于Vue2.0树形组件的实现", "desc": "先简单列一下在实现树组件的过程中一些值得关注的节点。 由于树是一个递归的数据结构，必然需要对组件自身的递归调用。 我们只需给组件指定name属性，即可以在组件内部直接使用。此处需要注意的是每次调用都会生成一个独立的作用域。 我们在使用组件的时候可能会指定一些属性以实现对组件的差…"}, {"id": "6979616593651171364", "title": "Vue快速入门学习笔记（六） ", "desc": "二十、路由嵌套 1. 什么是路由嵌套 嵌套路由，又称子路由。 在实际应用中，通常由多层嵌套的组件组合而成。 2. 实战 创建用户信息组件，在 views/user 目录下创建一个名为 Profile."}, {"id": "6844904000496599048", "title": "Vue2.X和Vue3.0数据响应原理实例（下）", "desc": "实例：在页面上初始化“I am Hector”，延时2s，修改“Hector”部分的值，修改为“Hector Real”，页面显示“I am Hector Real”，实现数据响应。 Proxy 把以 _ 开头的变量都认为是私有的。"}, {"id": "6844903941986058253", "title": "【Vue 牛刀小试】：第十七章 - 优化 Vue CLI 3 构建的前端项目模板（1）- 基础项目模板介绍", "desc": "在上一章中，我们开始通过 Vue CLI 去搭建属于自己的前端 Vue 项目模板，就像我们 .NET 程序员在使用 asp.net core 时一样，我们更多的会在框架基础上按照自己的开发习惯进行调整。因此在后面几章的学习中，我将会在整个项目基础上，按照自己的需求进行修改设定。…"}, {"id": "6844903710049435662", "title": "react 脚手架,了解下？", "desc": "这里，受 Vue-cli 和 create-react-app 的启发，我做了这样一个 react 的脚手架 handy-cli，让你一键搭建项目，快速开始。 可以选择在代码保存或者提交代码的时候校验,为了代码更快的编译，在提交时校验比较好。提交代码校验的相关配置在 packa…"}, {"id": "6881632044963938311", "title": "Vue3 源码分析(3)：周边特性", "desc": "调用的时机就是有关 vnode 节点位置改变的时候，分别是 mount、move 和 unmount。mount 时就调用 BeforeEnter，并注册 enter 到 post 任务队列中；unmount 时就调用 leave 和 afterLeave，并注册 delayL…"}, {"id": "6861104265419571207", "title": "从Vue 2到Vue 3的迁移指南之破坏性特性（四、渲染函数API）", "desc": "这个修改不会影响到使用 &#x3C;template> 的用户。 2.x 中，render 函数会自动接收如 h 之类的参数。 3.x 中，render 函数不需要再接收任何参数了，并且主要用于 setup() 函数内，这对于作用域内定义的响应式状态、函数以及传入 setup(…"}, {"id": "6844903781734285326", "title": "浅谈VUE响应式双向绑定", "desc": "前者固然直接，但是当应用变得复杂则代码将难以维护，而后者框架帮我们实现了一系列的操作，无需管理过程，优势显然可见。 VUE框架从整体上来讲，最大的特点即在于数据驱动视图的响应式、数据双向绑定特点，这也是我入职面试时楠哥第一个问我的面试问题，当时时间原因和理解不够深入原因，对此理…"}, {"id": "6844904000479838221", "title": "Vue2.0源码阅读笔记（八）：slot", "desc": "Vue 实现了一套内容分发的 API，将 <slot> 元素作为承载分发内容的出口。<slot> 在子组件中可以有多个，使用 name 属性实现具名插槽。 从插槽内容能否使用子组件数据的角度可将插槽分为两类：普通插槽、作用域插槽。 普通插槽不能使用子组件的数据，父级模板里的所有…"}, {"id": "6844903568240017415", "title": "快速入门vue-cli配置", "desc": "Vue-cli有两个文件——build和config：build文件包含了脚手架在开发环境和生产环境下webpack该如何配置。config文件则包含了build文件下webpack具体配置的值。换句话说，build下的webpack配置的值要引入config后才能获取到。 w…"}, {"id": "6902992939115855880", "title": "【完结】vue-router 源码解析 | 6k 字 - 【下】", "desc": "vue-router源码解析|6k字-【下】各位好，我是光辉😎本篇是vue-router源码解析的下篇，即收尾篇本篇主要介绍了下面几点介绍了vue-router是如何处理滚动的view、link组件都"}, {"id": "6844903702269001735", "title": "Vue 页面状态保持页面间数据传输的一种方法", "desc": "util-http.js 针对axios进行了二次封装的ajax模块。 模块对axios进行了一次封装，目的是为了减少开发人员的工作量，简化和服务器端、客户端（JSBridge 代理请求）的交互，配合login-state-check.js模块进行身份认证权限控制。 帮我们处理…"}, {"id": "6991436405012758564", "title": " 记录---------关于vue-cli启动本地服务局域网不能访问的原因分析", "desc": "记录---------关于vue-cli启动本地服务局域网不能访问的原因 在创建的vue项目中 使用npm run serve启动项目时候 会出现2个链接地址 一个是本地访问的 一个是局域网访问 项目"}, {"id": "6844903496408383495", "title": "San - 一个传统的MVVM组件框架", "desc": "前置声明：这个框架是 @董睿 大神开发的，我只是转发一下文章而已。"}, {"id": "6844903569280204813", "title": "vue全家桶与typescript使用总结", "desc": "最近重构了我之前项目 qq 音乐移动端，使用的技术是 vue，vuex，vue-router，和 typescript，在这期间，遇到的问题还是蛮多的，一会儿我会把我遇到的问题以及解决方法列出来，避免忘记。 重构完成的项目 ===> vue-qq-music TypeScrip…"}, {"id": "6979939072143785991", "title": "简单理解 Vue 父子组件通信", "desc": "爸爸传给孩子，孩子传给爸爸，真的那么难？本篇文章主要总结了组件的概念、props、emit、v-model、parent等组件通信方式。"}, {"id": "6844903510572531719", "title": "Vue组件渲染机制源码浅析", "desc": "之前研究Vue的响应式原理有提到， 当数据发生变化时， Watcher会调用 vm._update(vm._render(), hydrating)来进行DOM更新， 接下来我们看看这个具体的更新过程是如何实现的。 ( 这里我们就将一些不太重要的代码忽略掉不讲了， 比如call…"}, {"id": "6844904137314795534", "title": "Vue源码学习2.5：组件注册", "desc": "在 Vue.js 中，除了它内置的组件如 keep-alive、component、transition、transition-group 等，其它用户自定义组件在使用前必须注册。很多同学在开发过程中可能会遇到如下报错信息： 一般报这个错的原因都是我们使用了未注册的组件。Vue…"}, {"id": "6934711893147779109", "title": "为Vue组件添加非响应式数据", "desc": "在vue组件中内data内函数返回的对象默认是响应式的，vue的observe函数会遍历此对象所有的属性和子孙属性并转化为getter/setter， 使Vue能够追踪依赖，在属性被访问和修改时通知变更。这种响应式在被用在模板更新、watch变更、computed依赖中非常有用…"}, {"id": "6934697007017623559", "title": "Java后端应该掌握的前端知识Vue入门（中）", "desc": "v-bind attribute 被称为指令。指令带有前缀 v-，以表示它们是 Vue 提供的特殊 attribute。它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 title attribute 和 Vue 实例的 message…"}, {"id": "6919023197358653453", "title": "关于vue页面缓存keep-alive踩的坑", "desc": "哇 ~~~ 今天踩了个vue的大坑 ... 刚用就是不行啊，跟时代脱轨了都。 点击就算页签我点了关闭，页面也还在缓存中.... 就是我再点新增页面还保留这上次的操作，这就很难受了。之后上网问了同事他们给的方案是keep-alive的include和exinclude属性，研究了…"}, {"id": "6844904152892456968", "title": "踩坑记之基于Vue+Element+Koa实现云上存储", "desc": "最近在做项目等时候，需要处理图片，表格，文本等多种格式的文件到数据库，用传统等方法进行处理既繁琐又比较麻烦，所以第一次尝试使用云上存储等方式来实现。比较了阿里云和腾讯云之类的网站之后，最终选择七牛云来进行实战，在七牛云上个人注册并且实名认证成功后可免费使用储存空间10GB，这个…"}, {"id": "6844904118234906637", "title": "在Vue项目中，Provide，inject实现数据绑定", "desc": "这里简单说下。父组件通过按钮 加一，减一来控制 count的值。父组件通过provide传递给子组件，子组件inject接收。注意，在传值的过程中，通过对象传递count，由于是对象，便可使用 Object.defineProperty 来检测。当子组件调用时，便会触发 Obj…"}, {"id": "6969781616407216164", "title": "使用el-input时和placeholder的过招", "desc": "事件经过：优化代码时，发现想给input输入框一个提示，但是我的input的框的绑定值，由于要进行运算，所以初始值给了0，又不想动前后的逻辑，所以只能将错就错，再此基础上进行优化(el-input在绑"}, {"id": "6844903545364283406", "title": "安利一个React同构渲染脚手架 —— razzle", "desc": "客户端渲染：页面在 JavaScript，CSS 等资源文件加载完毕后开始渲染，路由为客户端路由，也就是我们经常谈到的 SPA（Single Page Application）。 服务端渲染：页面由服务端直接返回给浏览器，路由为服务端路由，URL 的变更会刷新页面，原理与 AS…"}, {"id": "6951301993700786189", "title": "Vue3（五、Reactivity API）", "desc": "1.reactivereactive就是把一个对象用proxy代理处理之后变成了一个响应式的对象，与vue2的observerable是一样的，他们都是深度监听的在vue2中：是用数据劫持完成的在vu"}, {"id": "6844903590687932429", "title": "列表渲染和Vue的v-for指令", "desc": "特别声明：此篇文章内容来源于@HASSAN DJIRDEH的《List Rendering and Vue’s v-for Directive》一文。 Web渲染是Web开发中最常用的实战之一。动态列表渲染通常用于简洁友好的格式向用户渲染一系列相似的分组信息。在我们使用的每个W…"}, {"id": "6844903983132180488", "title": "从V8的内存管理算法出发-教你如何管理内存", "desc": "@[toc]导语什么是V8？为什么要关注内存？一、V8引擎如何回收垃圾1、V8的内存分配（1）内存大小内存的大小和操作系统有关，64位为1.4G，32位为0.7G。64位下新生代的空间为64MB，老生"}, {"id": "6844903598128627725", "title": "vue 中 SFC 文件解析为 SFCDescriptor 的流程", "desc": "我们平时写的 .vue 文件称为 SFC(Single File Components)。vue 会先对 .vue 文件进行解析，分成 template、script、styles、customBlocks 四个部分，称为 descriptor。之后，再对这四个部分分别进行编译…"}, {"id": "6844903703749754893", "title": "Vue 应用单元测试的策略与实践 04 - Vuex 单元测试", "desc": "2.2 在Vue应用的单元测试中，对 Vuex store 该如何测试？如何测试与 Vue 组件之间的交互？如何理解 Vuex 模式？ Vuex 的前车之鉴：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规…"}, {"id": "6976668472730189861", "title": "Vue学习-模块化开发", "desc": "Vue学习-模块化开发 多个js文件造成的问题 全局变量同名，造成多人开发变量被其他人修改 匿名函数的解决方案（原始雏型） 函数具有自己的作用域 常见的模块化规范 CommonJs 模块化的两个核心模"}, {"id": "6910974318927151112", "title": "针不戳，虚拟DOM", "desc": "简单点理解： 虚拟DOM就是js对象，该js对象模拟真实DOM的结构，有tag，props,chidren等属性分别保存了节点的名称，属性，子节点等。 构建CSSOM的时候，css样式嵌套越多，解析越慢。 JS 操作真实 DOM 的代价？ js操作真实DOM时，浏览器会从构建D…"}, {"id": "6979585816280432648", "title": "【Vue3 从入门到实战 进阶式掌握完整知识体系】027-Vue中的高级语法：更加底层的render函数", "desc": "4、更加底层的render函数 通过render函数实现显示不同的h标签 运行结果 render函数和template对比 执行逻辑 无限嵌套render 运行结果"}, {"id": "6959721824804405256", "title": "深入理解Vue响应式原理笔记", "desc": "Vue2的响应式是通过数据劫持（Object.defineProperty）和发布-订阅模式完成的。 比较核心的几块内容是Observer、Watcher、Compile以及Dep这4个概念。 介绍一"}, {"id": "6858833225523937294", "title": "您可能不需要使用Vue 3的Vuex", "desc": "Vuex是一个很棒的状态管理库。它很简单，并且可以与Vue很好地集成。为什么有人会离开Vuex？原因可能是即将发布的Vue 3版本暴露了底层的反应系统，并引入了构建应用程序的新方法。新的反应系统非常强大，可以用于集中式状态管理。 在某些情况下，多个组件之间的数据流变得如此困难，…"}, {"id": "6844903618043183118", "title": "Vue2.5+ Typescript 引入全面指南", "desc": "Vue2.5+Typescript引入全面指南-Vuex篇系列目录：Vue2.5+Typescript引入全面指南Vue2.5+Typescript引入全面指南-Vuex篇前言Vuex正是我下决心引入"}, {"id": "6925360511655657480", "title": "Vue.js源码学习——Vue如何和真实DOM建立联系", "desc": "在之前mount实例的挂载的学习中，已经知道了mount挂载过程中最后调用了vm._update(vm._render(), hydrating)来将我们的Vue对象变成真实的DOM。 这一行代码中，hydrating先忽略，这个参数和服务器渲染相关。主要的就是render和u…"}, {"id": "6881083364934156296", "title": "Vue源码解析之transition-group/重绘与重排🏆 掘金技术征文|双节特别篇", "desc": "上篇文章Vue源码解析之transition(二)主要分析了实现过渡效果最重要的enter函数及其调用时机。transition-group组件也是与transition组件共用这部分逻辑。但是tra"}, {"id": "6844904102506266637", "title": "日常小记 - 排查VUX Search组件 fixed定位失效", "desc": "移动端项目一直使用VUX来开发，之前使用里面的Search组件做过一些二次封装的组件，最近发现Search组件内部的默认插槽，原本是fixed定位，在手机上打开是好的，但是在浏览器的模拟器打开居然失效了。 OK，我们尝试着把这个backdrop-filter属性取消掉，诶，fi…"}, {"id": "6844903865591021582", "title": "摩拜前端周刊第12期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～如何实现一个下载进度条/播放进度条地址:https://juejin.im/pos"}, {"id": "6844903893311160327", "title": "React Vue 解决火狐下禁用输入框无法复制", "desc": "根据不同条件禁用input框，是开发中常见的问题。但是在火狐浏览器的表现上，火狐禁用了input框所有的交互事件。无法触发用户勾选字段进行复制操作。 在配合Antd开发React中，我们一般讲Antd的Input组件多封装一层我们自己的组件，可以统一修改组件的样式和逻辑，在处理…"}, {"id": "6995554833512022029", "title": "前端开发之vue动画", "desc": "前言 动画的作用：提高用户的体验，帮助用户更好的理解页面中的功能。 使用过渡类名实现动画 官方文档的截图 过渡类名如下： 动画进入： v-enter：动画进入之前的初始状态 v-enter-to：动画"}, {"id": "6844904114774605837", "title": "Vue.js 的 computed 计算属性和 watch 侦听器的区别在哪里？", "desc": "记得在以往的面试中多次被问到这个问题，回答的都不理想，仔细想想也是理解的不到位。今天借着休息的时间准备查阅文档，写写示例代码去仔细理解下。 computed 计算属性是一个对象。它的使用方法是在 computed 属性中定义一个方法，和给对象定义方法一样，方法名可以直接在页面（…"}, {"id": "6895222218100637704", "title": "从 new Vue 到所有组件 mounted", "desc": "本篇的目的就是讲清楚从 new Vue({ render: h => h(App) }).mount('#app') 到页面上出现对应的 DOM 内容，这中间的过程是如何发生的，主要分为以下几小结：Vue 以及由它创建的 vm 实例的属性是如何来的、vnode 和 vm 实例的…"}, {"id": "6844903535918710791", "title": "译：Code Splitting with Vue.js And Webpack", "desc": "用webpack来打包你的单页应用的一个可能的缺点是你可能会得到一个非常大的打包文件，有时甚至会有几兆大小。 随之带来的问题是用户在屏幕上看到任何东西之前，必须要下载整个文件并运行它。如果用户使用的是网络连接不好的设备，这个过程可能需要很长时间。 Code splitting …"}, {"id": "6916342533769396238", "title": "vue自定义指令--move-with-dragger", "desc": "需求  项目某些窗口需要能添加拖拽条，拖着拖拽条随意拖动测试组件预期效果按住handerA和handlerB能进行A/B窗口的拖动，handlerA执行相关事件结果GIF如下使用方法完整代码如下"}, {"id": "6979417262356692999", "title": "Vue源码解析——响应式原理(Dep收集依赖)", "desc": "概述 本文是解析Vue的响应式原理。在Vue2.0中，数据的代理是用使用Object.difineProperty实现，但这只是响应式原理的部分。在源码中，还涉及到Dep、Watcher这两个类，负责"}, {"id": "6844903559117406215", "title": "你也许不知道的Vuejs - 深入浅出响应式系统", "desc": "虽然说是Vuejs实践，但是有些重要的理论还是必不可少的，本文将简单的带你了解 Vuejs的响应式原理。 编译组件：对特殊标记的部分（比如双大括号部分）进行替换为相应的数据值。 通知更新：当步骤2中监听的数据发生变化时，会通知 watcher 进行重新计算，触发关联视图更新。 …"}, {"id": "6914588002865905677", "title": "vue脚手架搭建项目", "desc": "1. 随机选择一个项目目录，cmd输入如下命令，创建项目 2. 选择手动配置项目（方向键即可选择），也可以选择之前保存的模板直接配置项目 3. 选择配置项：空格键选择或不选，一般选项如下，也可以自定义选项 4. 选择一个vue版本，这里我们默认是2.x 5. 是否使用histo…"}, {"id": "6844904160421232654", "title": "基于 Vue 微前端 生产项目实践", "desc": "对于公司内部管理系统、ToB的SaaS系统等一系列的项目中，由于项目本身的生命周期较长，又长期不断的迭代，加入新的功能模块，最终会导致项目本身的体积越来越大，结构越来越复杂。不但影响了日后的维护成本、性能等方面，而且对于开发来讲，也是越写越写不下去，最后的建议可能就是 Emm.…"}, {"id": "6932625335309565960", "title": "手撕代码", "desc": "双飞翼和圣杯布局：和三栏布局要求相同，不过中间列要写在前面保证优先渲染。 CSS 部分完，总结，Flex 无敌。 通过this下面的数据直接获取vue实例这种方法比较暴力，因为我们所谓的组件，最终都会是一个对象，存放组件的各种信息,组件和组件通过this.$children和t…"}, {"id": "6972211467223302174", "title": "vuu2 中的函数式组件", "desc": "函数式组件 函数式组件（functional component）是一个不持有状态data、实例this和生命周期的组件。"}, {"id": "6997011811950313508", "title": "恭喜你，你的系统离 vue-next 只有一步之遥", "desc": "vue2 只剩下最后一个2.7版本和18个月的维护时间，而且会在提示中不断的用 removed/changed in v3来提醒我们 vue-next 的存在。"}, {"id": "6912606020673994760", "title": "vue3.0自定义插件|vue3弹框组件V3Popup", "desc": "概述如上图：在功能效果及UI上基本保持和之前vue2.x的完美一致。引入组件在main.js中全局引入使用。同样的支持组件式和函数式两种灵活调用方式。组件式函数式大家都知道在vue2.x中可以通过pr"}, {"id": "6844903542851895303", "title": "Dive into Vue.js", "desc": "Vue.js作为先进的前端MVVM框架，在外卖已经广泛应用在各业务线中。本文阐述了Vue.js作为前端MVVM框架的主要优势，并从Vue.js的三个核心点：Observer, Watcher, Compiler出发，深入阐述Vue.js的设计与实现原理。 Vue.js 是一个轻…"}, {"id": "6988064451295445005", "title": "iview默认样式覆盖", "desc": "本文主要介绍了几种view ui组件（vue中）默认样式修改的方法，保证vue页面样式模块化，不对全局样式造成污染。"}, {"id": "6844903545846644750", "title": "从搭建vue-脚手架到掌握webpack配置（一.基础配置）", "desc": "接下来我们从初始化到写配置再到添加loader和插件逐步构建一个可用的vue工程化环境，让初学者亲自搭建vue-cli之余还了解到webpack常用的一些配置项。 vue-loader,是用于编译vue项目中组件化文件 *.vue ，把其转换为JavaScript的webpac…"}, {"id": "6844903605057617927", "title": "Vue页面骨架屏注入实践", "desc": "作为与用户联系最为密切的前端开发者，用户体验是最值得关注的问题。越来越多的APP采用了“骨架屏”的方式去展示未加载内容，本文将讨论如何为Vue页面注入骨架屏的实践。"}, {"id": "6844903799417470983", "title": "前端如何搭建一个简单的脚手架", "desc": "这里先简单了解一下基础知识，接下来会基于typescript和rollup参考写一个较为完整的脚手架（动态模板），以下只能拉取较为简单的静态模板。 这样当我们发布上npm，别人下载下来后，就可以直接使用ds命令了。 我们通过询问交互后，肯定内部做了些改变。这里我们可以把pack…"}, {"id": "6859944479223185416", "title": "谈谈Vue.use的原理", "desc": "2. 添加全局资源 3. 注入组件选项 4. 添加实例方法 1.通过全局方法 Vue.use() 使用插件。它需要在你调用 new Vue() 启动应用之前完成 2.Vue.use 会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件。 通过定义_installed…"}, {"id": "6844903555334160398", "title": "vue.js无缝滚动", "desc": "See the GitHub 历史版本. 如果你想要js无缝滚动(无依赖)你可以切换到这里seamscroll。 vue-simple-spinner is open source and released under the MIT License. vue-seamless…"}, {"id": "6916489242008879118", "title": "element-ui 二次封装系列- button(二)", "desc": "在上一篇中, 我们用一个简单的 autoLoading属性 二次封装了el-button得到了pl-button组件,本篇中,我们继续丰富pl-button组件. 如上代码,这种场景是非常多的,虽然仅仅就是一个确认,但每处都写,实属麻烦,重复代码过多,如果能够点击button自…"}, {"id": "6968033872151838728", "title": "学习 Vue 原理：响应式", "desc": "近来在学习Vue，对于它的核心概念之一——响应式一直有所困惑，偶然间发现一门课程vue advanced workshop with Evan You。Vue的作者尤雨溪亲自讲解Vue。"}, {"id": "6975794239493898248", "title": "实现简易版的路由 手动实现vue中的hash路由（上）", "desc": "实现简易版的路由 手动实现vue中的hash路由 思路就是 创建一个构造函数 然后将routes中的path与location中的hash对应起来。 缺点: 没有重定向以及对于错误的跳转处理机制 待更"}, {"id": "6844903801460113416", "title": "【重学Vue】数据响应原理真的是双向绑定吗？", "desc": "最近 Ant Design Vue 作者 - 唐金州，在某平台开课了，在整个课程中系统的讲述了Vue的开发实战。在第八讲中介绍了Vue双向绑定的问题，这里我整理一些资料客观的分析一下 Vue数据响应原理到底是不是双向绑定。 很多同学在理解 Vue 的时候都把 Vue 的数据响应…"}, {"id": "6844903893680259085", "title": "我们一起学习Vue中的 slot 吧。", "desc": "代码已放到Github上。可以下载跟着练习一下。 当子组件渲染的时候，<slot></slot> 将会被替换为“确定”。slot是不会被渲染的,它是用来接收父组件传过来的内容。 游戏卡就是父组件传给的内容,插口就相当于子组件的slot标签,组合起来就是最终的渲染。 当然上述就是…"}, {"id": "6844903813950734350", "title": "vue 中this.$emit()的返回值是什么？", "desc": "#vue中this.$emit();返回值是什么vue中的三大属性:属性、事件、插槽，---事件在事件中有普通事件：@click/@input/@change/@xxx...事件；修饰符事件：@inp"}, {"id": "6883660225555988493", "title": "Vue封装的组件全局注册并引用", "desc": "当vue接触的多了之后，你可能也会到自己封装组件的程度，试想每个页面的功能级模块全部拆分成组件，然后后续请求后台数据传入进去或者自己模拟数据，是多么方便的一件事情。 每当我们需要修改的时候，只需维护那一个功能性组件即可，不需要这个功能了，只需要从页面中删除这个组件的引用即可。 …"}, {"id": "6844903894783361032", "title": "Vue中对iframe实现keep alive（无刷新）", "desc": "最近一个需求，需要在Vue项目中加入含有iframe的页面，同时在路由切换的过程中，要求iframe的内容不会被刷新。一开始使用了Vue自带的keep- alive发现没有用，于是自己研究了一下解决方案。。。。。。 要实现对保持iframe页的状态。我们先搞清楚为什么Vue的k…"}, {"id": "6844904200191606792", "title": "为什么 Vue 更符合这个时代的大势所趋？", "desc": "不久前，尤雨溪发布了 Vue 3.0 Beta 版本。 发布之后我们对社区里的前端开发者做了一次调查沟通，大家普遍认为 Vue 已经具备了商业项目开发的必备条件，如语法精炼、优雅而简洁、代码的可读性高、成熟的组件模块化能够让开发者从编码中获得乐趣等等，当然，还有商业项目开发最为…"}, {"id": "6844903568458153992", "title": "用vue全家桶+koa2+soket.io +mysql写一个聊天应用", "desc": "这是我的毕设项目，产品功能和页面参照qq，微信，TIM，不完全一样，有些是自己的想法。前后端都自己写。 感觉是一个挺不错的全栈入门项目，各种交互各种业务逻辑，不花哨，但实用。 前端vue，vue-router,vuex ，vue-cli和axios，scss,用rem做了移动端…"}, {"id": "6937607243063885861", "title": "用Vue实现一个谷歌浏览器搜索扩展", "desc": "在平时的工作机中，一般安装了两个浏览器，一个最新版的 Chrome 专用于前端开发，一个 360极速浏览器 用于日常事务处理。但由于某些原因，工作机不再允许安装 360浏览器 ，但是 Chrome浏览器 中缺少了一个非常便捷的功能：工具栏和右键中的自定义引擎搜索，缺少了这个功能…"}, {"id": "6991484757259321358", "title": "回首Vue3之指令篇（一）｜8月更文挑战", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 v-text指令是我们在项目中经常用到的指令之一，那么这个指令它是怎么实现的呢，在Vue3和Vue2中它们的使用方式是否有差异呢，下面让我"}, {"id": "6916897172143702023", "title": "vue中递归组件的简单用法 | 七日打卡", "desc": "递归 相信很多同学已经不陌生了，算法中我们经常用递归来解决问题。比如经典的：从一个全为数字的数组中找出其中相加能等于目标数的组合。思路也不难，循环数组取值，不断递归相加，直到满足目标数条件。递归虽然能解决大部分，但弊处在于，很容易写出死循环的代码，导致爆栈。下面以我实际业务场景…"}, {"id": "6907058525513056263", "title": "前端经典面试题集锦", "desc": "运行速度更快:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。 不同点：实现本质方法不同，v-show本质就是通过控制css中的display设置为none，控制隐藏，只会编译一次；v-if是动态的向DOM树内添加或者删除DOM元素，若初始值为f…"}, {"id": "6966539693894664206", "title": "记账本踩坑（Vue+TS）", "desc": "使用Vue技术栈做了一个记账本（纱卡记账本），涉及到 vue-cli、Vuex、VueRouter、Typescript、ECharts、scss。其中有些个人认为值得记录的点，因此写下这篇博客记录。"}, {"id": "6976537703626063880", "title": "用vue简单封装单选组件", "desc": "这边根据业务场景，简单封装一个单选组件。 考虑到父组件更好的调用，直接使用了`sync`语法糖。 使用方式：<radio-component :value.sync=\"x\" :options=\"x\">"}, {"id": "6911983128844189704", "title": "别再问我vue模版怎么编译了", "desc": "最近在学习vue模版编译原理，整理一下，以后复习用。 参照这张图，一起看看具体怎么实现的吧。 上面我们已经，匹配出 开始标签、文本、结尾标签。那么问题来了，怎么把匹配出来的开始标签、文本、结尾标签，组装成一个AST树结构呢？ 前面我们已经通过调用_render函数生成一个的vn…"}, {"id": "6993716779323228196", "title": "【Vue2.x 源码学习】第三十四篇 - 组件部分-Vue组件与初始化流程简介", "desc": "【Vue2.x 源码学习】第三十四篇 - Vue组件与初始化流程简介：组件使用介绍；组件初始化流程介绍；Vue.component、Vue.extend、保存全局组件构造函数、组件的渲染和更新；"}, {"id": "6995728278498017294", "title": "回首Vue3之组件篇（四）", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 这篇文章我们来讲一下最后一个内置组件teleport的使用方法，在使用它们的时候我们又该注意什么呢，下面让我们一探究竟把。 为什么使用 t"}, {"id": "6971433632892190733", "title": "vue-router4.x的使用", "desc": "这是我参与更文挑战的第5天，活动详情查看更文挑战 Vue Router 是 Vue 生态系统的一部分，是一个获得 MIT 许可的开源项目。vue-router4.x适用于vue3.x版本，在vue-r"}, {"id": "6918244426900996109", "title": "微前端的生产实践和我的使用姿势", "desc": "前言自己在服务器部署的一个微前端demo1、技术栈无关2、主框架不限制接入应用的技术栈，微应用具备完全自主权3、独立开发、独立部署4、微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新"}, {"id": "6908355359170101261", "title": "Vue原理-自定义指令 directive", "desc": "最近在业务开发过程中，发现了之前使用不是很多的Vue功能-自定义指令，实现了部分元素逻辑的抽象复用。这里对其进行了简单的分析整理。 注意，若Vue.directive第二个参数未传入数据，则根据指令名称返回已注册的指令。 注册完毕后，可以直接在元素上添加v-focus来使用。 …"}, {"id": "6987558253324402718", "title": "Vue 大型项目热更新优化", "desc": "优化目的 当项目路由和组件文件变多，在开发时的 hot reload 变得缓慢，和 react native 真机调试有的一拼，严重影响到开发效率。 定义组件 improt 和 require 方法 "}, {"id": "6978356200240840717", "title": "axios 取消请求", "desc": "当切换步骤或切换tab等情况，前一个组件中发起的请求可能还在进行中，用户就已经退出了步骤流程，也可能是切换到了其他的tab页面，之前的请求还在进行"}, {"id": "6844903815175487495", "title": "Vue中computed、methods和watch之间的区别", "desc": "对于那些开始学习Vue的人来说，对于方法、计算属性和观察者之间的区别有点混淆。 尽管通常可以使用它们中的每一个来完成或多或少相同的事情，但了解每个人在哪里胜过其他人还是很重要的。 在这个快速提示中，我们将了解Vue应用程序的这三个重要方面及其用例。我们将通过使用这三种方法中的每…"}, {"id": "6927196293085265928", "title": "你是如何设计一个工具链的？｜牛气冲天新年征文", "desc": "前言前端工程化已经是一个老生常谈的话题了，迄今为止比较成熟的方案也越来越多好比vue同学经常用的vue-cli，react这边也有create-react-app，这些都是比较基础的脚手架工具，随着业"}, {"id": "6987406709325037599", "title": "Vuex", "desc": "这是看《[想入門，我陪你]Re Vue 重頭說起》视频教程和阅读 Vuex 官方文档时做的笔记，这一篇主要是与 Vuex 相关的知识点，还包括一些需要注意的细节。"}, {"id": "6967351287864098824", "title": "用jQuery写出vue的味道，这个小插件真猛！", "desc": "你肯定用过vue，别猜，我隔着屏幕都能读到你此刻的想法。但是，你想过用jquery写出的代码像vue一样简单，也具有响应式效果吗？话不多说，先来 show me the code： 怎么样有没有一种熟"}, {"id": "6954570269843587103", "title": "Element-ui checkbox", "desc": "Element-ui checkbox 剖析 checkbox 有三种状态：选中，取消选中，半选 checkbox 有三种使用情况： 单独使用, v-model绑定的值为布尔类型 单独使用，v-mod"}, {"id": "6854573212060090381", "title": "【Vue+Koa2+Mysql全栈撸win10风格管理系统】交个朋友系列（1）", "desc": "【Vue+Koa2+Mysql全栈撸win10风格管理系统】交个朋友系列（1）-基础阶段，主要讲述：项目框架搭建思想和项目运行相关的配置。目前已经开发完一个基础项目，接下来【Vue+Koa2+Mysql全栈撸win10风格管理系统】交个朋友系列文章，会根据项目搭建和讲功能点实现…"}, {"id": "6844904167534805005", "title": "记一次惨痛的 Vue SSR 内存泄漏排查", "desc": "近期，对一个老项目进行直出改造，将其从 Vue 客户端渲染改造成支持 Vue 服务端渲染（SSR），然而在测试环境进行压测的过程中，就发现其存在明显的内存泄漏问题。这个问题可能是一般人在做 Vue SSR 时不容易踩的坑，但是一旦踩到，则可能是不容易排查出来的坑，尤其对于老项目…"}, {"id": "6867690349746847752", "title": "想要成为前端Star 吗？一首歌时间将React/Vue 应用Docker 化", "desc": "然而在近两年的编程生涯，在每一次产品迭代中，渐渐体会到了容器化其魅力所在。 应用部署从刀耕火种，到DevOps崛起，原来不止前端在迅捷发展。接下来，我将用一首歌的时间，带大家真实的体验一番Docker容器化。 1. 朴素的Dockerfile 首先准备一个有标准运行指令的Web…"}, {"id": "6988470004454948872", "title": "带你认识vue3", "desc": "1、Vue 3.0 性能提升主要是通过哪几方面体现的？ 2、Vue 3.0 所采用的 Composition Api 与 Vue 2.x使用的Options Api 有什么区别？"}, {"id": "6997936239127035935", "title": "vue cli中的env详解", "desc": "前言 相信使用过 vueCli 开发项目的小伙伴有点郁闷，正常开发时会有三个接口环境（开发，测试，正式），但是 vueCli 只提供了两种 development,production(不包含 tes"}, {"id": "6921986236408152077", "title": "在vue中使用tinymce", "desc": "由于公司有个功能，需要用到用到富文本编辑器，最初便选择了简单便捷的wangEditor，可经过一年的使用情况来看，wangEditor已经逐渐无法满足用户各式各样的需求了，几经挑选最终决定换成Tiny"}, {"id": "6988360578850881549", "title": "VSCode支持.vue文件自动保存的格式设置", "desc": "VSCode支持.vue文件自动保存的格式设置 实现步骤： 1、安装如下插件 1) ESLint： eslint编码规范 2) Vetur： vue格式化代码"}, {"id": "7001831740696166408", "title": "【vue3】provide/inject API", "desc": "👋欢迎评论，点赞，收藏哦~ 😗要是有不对的地方，欢迎指正哦~ provide/inject是什么呢 在进入正文前，先讲一个真实的故事，是我N年前读到的，虽然故事的名字，主人翁和背景我都忘记了，但是一点"}, {"id": "6844904003797516302", "title": "你已经是成熟的前端，应该学会自己使用 Vue 高阶组件了", "desc": "高阶组件(HOC)是一种架构模式，在React中非常常见，但也可以在Vue中使用。它可以被描述为一种在组件之间共享公共功能而不需要重复代码的方法。HOC的目的是增强组件的功能。它允许在项目中实现可重用性和可维护性。 只要你向一个方法传入组件，然后返回一个新的组件，这就是一个HO…"}, {"id": "6989538413246414878", "title": "npm发包遇到的问题", "desc": "概要： 本文主要记录下npm发布的时候遇到的问题。 npm发布的步骤 先去npm注册账号，然后在自己的组件库下面运行以下命令，根据提示输入用户名密码 报错1：npm login登陆报错 主要是因为我之"}, {"id": "6977648886869393444", "title": "Pinia，一个替代Vue.js的商店", "desc": "为你的Vue.js应用程序创建一个商店的另一个选择是Pinea。在谈到Vue的商店时，Pinea是街区的新孩子。它是由Vue核心团队成员Eduardo San Martin Morote发起的，第一次"}, {"id": "6987951646886068232", "title": "6x0 精读Vue官方文档 - 深入响应式原理", "desc": "精读 Vue 官方文档系列 🎉 介绍 Vue 的非侵入性响应式系统依赖于其特殊的“数据模型”。更具体点指的就是具有响应式（反应式）特性的普通 JavaScript 对象，当它被修改时，视图也会随着更新"}, {"id": "6844903960218697741", "title": "Element-UI 技术揭秘（5）- 色彩、字体、边框与图标", "desc": "element-ui 组件库之所以受欢迎，除了组件丰富，文档友好之外，还得益于它的精美的设计。之前在组件库的整体设计文章中提到，element-ui 背后有一只强大的设计团队，他们为组件库了制定了一套设计规范。 当我们去设计一套组件库的时候，首先要考虑颜色、字体、边框、图标这些…"}, {"id": "6990553766101516325", "title": "详解Vite2.0+TypeScript+Vue3项目搭建以及介绍Vue3相关特性", "desc": "详解Vite2.0+TypeScript+Vue3项目搭建以及介绍Vue3相关特性 结合尤大在 Vue 3.0 beta 直播中推荐了 vite 的工具"}, {"id": "7002975848152170504", "title": "高德开放平台GeoHUB初用（Vue使用高德地图Loca 2.0）", "desc": "以往地图打点、连线、做特定地市的区域地图，都不知道哪里找GeoJSON数据的，现在有这东西就超级方便了。这里通过Loca.ScatterLayer的来展示下GeoHUB的简单使用"}, {"id": "6953467114707501093", "title": "TypeScript + Vue3 快速上手 【下】", "desc": "hello大家好，上一篇我们学了TypeScript的，接下来我们一块学习vue3吧！ Vue3快速上手 1. 认识Vue3 了解相关信息 Vue.js 3.0 \"One Piece\" 正式版在今年9"}, {"id": "6844904078724562951", "title": "深入vue响应式原理（包含vue3.0）", "desc": "熟悉vue的小伙伴应该都知道，谈到vue的原理，最重要的莫过于：响应式，虚拟dom及diff算法，模版编译，今天，我们一起来深入vue的响应式，探讨vue2.x响应式的实现原理与不足，以及vue3.0版本如何重写响应式实现方案。 1. 什么是响应式 vue是一个MVVM框架，所…"}, {"id": "6994336347255210020", "title": "实践积累：用Vue3简单写一个单行横向滚动组件", "desc": "展示数据始终一行，多余的部分可以出滚动条，同时隐藏滚动条样式。支持笔记本触控滑动展示,支持鼠标点击滑动，多余的时候出现箭头按钮，默认滑动3个卡片的位置，顶头就切换方向,当页面出现变动的时候要监听及时."}, {"id": "6994260790375088135", "title": "Vue生命周期详解", "desc": "Vue实例和组件都会经历从初始化创建到销毁的完整过程，这个过程叫生命周期，同时在这个过程中会运行一些叫生命周期钩子的函数"}, {"id": "6844903810457042957", "title": "Vue + TypeScript + Element 项目实践(简洁时尚博客网站)及踩坑记", "desc": "本文讲解如何在 Vue 项目中使用 TypeScript 来搭建并开发项目，并在此过程中踩过的坑 。 TypeScript 具有类型系统，且是 JavaScript 的超集，TypeScript 在 2018年 势头迅猛，可谓遍地开花。 Vue3.0 将使用 TS 重写，重写后…"}, {"id": "6900957010808963079", "title": "Vue3 Teleport 组件的实践及原理", "desc": "Vue3 的组合式 API 以及基于 Proxy 响应式原理已经有很多文章介绍过了，除了这些比较亮眼的更新，Vue3 还新增了一个内置组件：Teleport。这个组件的作用主要用来将模板内的 DOM 元素移动到其他位置。 业务开发的过程中，我们经常会封装一些常用的组件，例如 M…"}, {"id": "6987398878312005646", "title": "vue+element大型表单解决方案(10)--表单通信和动态表单", "desc": "这个大型表单解决方案的本质在于将大表单拆分成多个子表单，这个在表单拆分篇中已经完整演示说明过；后面大量篇幅都是我在实践中遇到的附加需求，比如辅助锚点工具、数据比对等。实践中，不仅仅有演示中那些简单的表"}, {"id": "7004419251708624932", "title": "使用vue3的插槽遇到的问题", "desc": "今天在做页面表格的时候遇到个问题。平时开发的过程中我们都会将element的表格进行二次封装，使用的时候传入 在vue2中我的话进行了如下二次封装，具体的代码大家都可以看懂 那么我们在使用的时候传入所"}, {"id": "6992919453855907854", "title": "vue 管理后台封装form", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 在上一篇vue 管理后台table封装中，讲解了如何封装table,这一篇写如何封装form。封装form说难也难，说简单也简单，毕竟你封装"}, {"id": "6844904008667103240", "title": "前端面经题记：长列表怎么优化？", "desc": "昨天上午接了一个电话面试，聊着聊着接说到了性能优化，然后面试官问到了长列表。其实之前做过的都只是简单的分页处理，但面试官问的肯定不是这个咯，他关心的是虚拟列表，大概以前粗略看过这个效果的实现源码，虽然我自己没实现过但有一些自己的想法，于是blablabla......，可能碍于…"}, {"id": "6999656561584898061", "title": "二、Vue3+Ts+Vite+AntdUI构建后台基础模板——登录页开发", "desc": "Vue3+Ts+Vite+AntdUI构建后台基础模板系列文章 此篇文章为第二篇：《登录页开发》"}, {"id": "7004800854742007845", "title": "VueRouter基本使用以及底层原理理解", "desc": "本文整理了VueRouter的基本使用以及底层原理理解相关知识总结，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6971211983559327752", "title": "VUE3后台管理系统【路由鉴权】", "desc": "🌏前言： 在“VUE3后台管理系统【模板构建】”文章中，详细的介绍了我使用vue3.0和vite2.0构建的后台管理系统，虽然只是简单的一个后台管理系统，其中涉及的技术基本都覆盖了，基于vue3的vu"}, {"id": "7000183586024341534", "title": "SpringBoot + Vue前后端项目分离后台管理系统 笔记 （以及错误总结） 第一篇 前端笔记", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 学习视频的来源（链接） B站的 博主 ps (讲的很不错) 前端的学习笔记记录 安装前端的Vue 环境 ，新建 Vue 项目 安装node"}, {"id": "6966847977625223182", "title": "不要重复你自己 Don’t repeat yourself", "desc": "程序员有个信条叫做“不要重复你自己（Don’t repeat yourself, DRY）”实现代码复用，去冗余。除了使用公共js工具类方法，公共样式，封装公共组件，还有比较常用的混入mixin功能。"}, {"id": "6844903657377366030", "title": "当大多数人对Vue理解到炉火纯青的时候，是不是该思考一下怎么让vue页面骚气起来", "desc": "场景需求：最近设计湿丢来这样的页面设计，要求响应式。正常老铁们看到类似标签栏的设计，作为前端要切出来估计头皮一发麻，基本上实现的话要么简单粗暴上背景图，要么几个div，作为对代码有的洁癖的我就直接上v-for表单渲染，把中间这块封装了一个公用的容器组件wapper，于是乎下面代…"}, {"id": "6955445902693629959", "title": "影响了一代代前端人的 20 个里程碑式的顶级开源项目！2021 成为里程碑的项目又是哪个呢？", "desc": "本文介绍 2006 年至 2020 年的 20 个重要的顶级前端项目，每一个都是里程碑式的影响了一代代前端人的开源项目。"}, {"id": "6989167699888701476", "title": "一种Vue应用程序错误/异常处理机制", "desc": "现在构建前端应用程序不像以前那么简单，现在，应用程序更加复杂和多样。这就需要在构建前端应用程序的时候考虑很多，错误/异常处理是最重要的方面之一。"}, {"id": "6844903910881116174", "title": "vue文档里你没捡起来的宝藏", "desc": "在日常的业务的处理中，尤其是数组的for循环渲染，当你使用完v-for之后，动态的通过操作index指定数组的值，不是响应的。 这就很有意思了，我们可以看到这个过程中，执行changeList()方法，页面上的11并没有变成16且数组也没有变为空数组，但是执行第二个方法时，th…"}, {"id": "6995460030573051912", "title": "Vue 移动端的长按与触摸事件", "desc": "Vue 移动端的长按与触摸事件 博客说明 说明 在手机端的需求难免会遇到与手势相关的，比如div的长按和单击事件，长按可能是分享或者删除等操作，一般的形式是通过弹窗来展现。 实现 其实主要是利用dom"}, {"id": "6974327517368811527", "title": "Vue详解 mixins & slots", "desc": "好久没写文章了，鸽了时间有点久~ 那么最近在忙啥呢？嘿嘿，我先不说。 今天给大家开一个新坑，讲一讲跟Vue相关的知识点。此坑不深，纯属入门~"}, {"id": "6973852307024773127", "title": "详解 Vue 八大生命周期钩子函数", "desc": "摘要：Vue为生命周期中的每个状态都设置了钩子函数(监听函数) 。每当Vue实例处于不同的生命周期时，对应的函数就会被触发调用。"}, {"id": "6889320306800852999", "title": "活动可视化搭建系统——你的KPI被我承包了", "desc": "对于C端业务偏多的公司来说，在增长、运营等各方同学的摧残下永远绕不过去的一个坑就是大量的H5页面开发，它可能是一个下载、需求告知、产品介绍、营销活动等页面。此类需求都有几个明显的缺点： 开发性价比极低、上线时间紧，每次需要指派单独同学支持。 沟通成本高，而业务逻辑高度相似。 有…"}, {"id": "6965321244828762126", "title": "VueConf China 2021 《Vue3生态进展-尤雨溪》 Reaction", "desc": "文章尽可能的以图文形式还原尤大的直播内容(为了你有更好的观看体验，欧巴添加了一些相关链接)。还没观看的同学可以和大家一起来一波图文 Reaction，看过的同学也可以再梳理一遍重点内容。"}, {"id": "6920464793900384270", "title": "使用vue3重构拼图游戏,真香!", "desc": "原有拼图游戏是通过开源代码加以改造，使用的是 vue2 。在实际项目使用一切正常，但还是存在以下痛点 无论是拼图片还是拼数字，其原理都是要把原本打乱的数组移动成有序状态。网上也有很多实现数字华容的的算法，算法主要需要解决的就是如何生成一组 随机且有解 的数组，有的人可能有疑问，…"}, {"id": "6989107179001217055", "title": "7x2 精读Vue官方文档 - 组件对象选项", "desc": "精读 Vue 官方文档系列 🎉 创建组件时的配置项，属于 optionsAPI 范畴。 组件选项 - 数据 data 值必须是一个函数 为了防止跨组件共享数据，组件的 data 选项必须是一个函数。 "}, {"id": "6874020661476458503", "title": "Vue3.0正式发布，本次发布所有总结【附全球发布会视频】", "desc": "全球发布会B站视频(中英文版)https://www.bilibili.com/video/BV1iA411J7cA/2020年09月18日，Vue.js3.0正式发布。本次发布框架本身带来了几个大点"}]