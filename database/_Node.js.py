[{"id": "6844904055777689607", "title": "前端模块化演进之路", "desc": "有这样一个场景，客户端运行很久，但是法务部和数据部需要收集用户的一些信息，这些信息收集好之后需要进行相应的数据处理，之后上报到服务端。客户端提供一个纯粹的 JS 执行引擎，不需要 WebView 容器。iOS 端有成熟的 JavaScriptCore、Android 可以使用 …"}, {"id": "6844903617648918535", "title": "所谓的 Virtual DOM 到底是什么？", "desc": "首发地址在知乎，由于个人精力有限，可能无法在此进行快速回应。 最近写了一个 ng-vdom 的 POC，用于将 Virtual DOM 对象渲染为原生 Angular 内容。 希望大家不要对 POC 有太多的误解，换句话说，不要有太大的期望。 通过最近（以及不那么近）的诸多问题…"}, {"id": "6922274745622724616", "title": "使用 async_hooks 模块进行请求追踪", "desc": "async_hooks 模块是在 v8.0.0 版本正式加入 Node.js 的实验性 API。我们也是在 v8.x.x 版本下投入生产环境进行使用。 简而言之，async_hooks 模块可以用来追踪异步回调。那么如何使用这种追踪能力，使用的过程中又有什么问题呢？ v8.x.…"}, {"id": "6844904016221044750", "title": "走进前端 BFF 之  grpc-node 拦截器操作指南", "desc": "BFF （Back-end for Front-end）， BFF的概念大家可能都听滥了，这里就不复制粘贴一些陈词滥调了，不了解的可以推荐看这篇文章了解下。 那么简单来说，BFF 就是做一个进行接口聚合裁剪的 http server。 随着后端 go 语言的流行，很多大公司的都…"}, {"id": "6844903630663843848", "title": "React16.x中的服务端渲染（SSR）", "desc": "简要介绍：为了SEO和加快首屏加载速度，React提供了服务端渲染（Server Side Render）。本文结合express，来介绍一下React16.x中的SSR。 单页应用将UI层和内容都由javascript来渲染，搜索引擎或网页爬虫需要完成的HTML结构，因此单页…"}, {"id": "6844903663052259335", "title": "手写一个node中的发布订阅", "desc": "之前我们聊过发布订阅的模式就是，当一个用户订阅了一些事件之后，如果这些事件触发了，那我们就要去执行用户在订阅事件的时候定义的函数。 node中有一个核心模块就是events，他实现的功能其实就是我们的发布订阅模式，上面的解释其实就是说明了events这个模块在我们node的一些…"}, {"id": "6844903891276939277", "title": "Node.js RPC框架sonorpc介绍", "desc": "sonorpc是一个轻量级、高性能的node rpc框架，由Registry(注册中心)、Provider(服务提供者)、Consumer(服务消费者)组成，提供远程方法调用、负载均衡、服务自动注册和发现功能。 doubbo没有提供js版本的provider，而我们的主要技术栈…"}, {"id": "6844903573302542349", "title": "聊一聊 URI Encode", "desc": "前段时间公司有人反馈部分上传的文件无法下载，由于我们 CDN 用的是七牛云，而那个出问题的系统后端用的是 Node.js，因此想到有可能是七牛官方的 Node.js SDK 的 bug。首先查了一下那些无法下载的文件名字，一看都是文件名中包含了特殊字符 “#” 号。这样大体..."}, {"id": "6921878115174055944", "title": "【大咖分享】BFF在千寻位置网前端的落地和演进", "desc": "团队日常工作内容，主要对公司门户、电商、营销、分销等业务提供前端支持，业务覆盖 PC、H5、App、小程序、NodeJS 等各种技术场景。 serverAPI：后端直接将接口暴露给前端开发，进行业务调用，也是我们前端开发最常接触到的模式。 internalRest：后端同学在底…"}, {"id": "6844903814437273607", "title": "Node.js常用模块Module的加载机制与使用", "desc": "native模块，在开发中使用的Nodejs的http、buffer、fs等，底层也是调用的内建模块(C/C++)。 在Nodejs中模块加载一般会经历3个步骤，路径分析、文件定位、编译执行。 系统缓存：模块被执行之后会会进行缓存，首先是先进行缓存加载，判断缓存中是否有值。 系…"}, {"id": "6844903828383334408", "title": "用\bNuxt express element 开发自动部署管理平台 node auto deploy", "desc": "开发中各种测试开发环境，开发环境，生产环境。需要多次频繁打包上传项目。当开发的项目过多，容易导致包上错环境，手动scp rm backup 容易出错。 For detailed explanation on how things work, checkout Nuxt.js d…"}, {"id": "6844904019542933511", "title": "【重学Node.js 第3篇】mongodb以及mongoose的使用", "desc": "mongodb是典型的非关系型数据库，关于它的背景介绍和优势劣势这里就不赘述，我们直接讲实操或者说最有可能用到的部分。 mongod --config /opt/mongodb/mongod.conf 启动mongod服务。 如果想在后台启动，需要修改mongod.conf，添…"}, {"id": "6844903668643266567", "title": "基于 HTML5 的 WebGL 3D 档案馆可视化管理系统", "desc": "档案管理系统是通过建立统一的标准以规范整个文件管理，包括规范各业务系统的文件管理的完整的档案资源信息共享服务平台，主要实现档案流水化采集功能。为企事业单位的档案现代化管理，提供完整的解决方案，档案管理系统既可以自成系统，为用户提供完整的档案管理和网络查询功能，也可以与本单位的O…"}, {"id": "6844903711739740168", "title": "初次端内开发及node压测优化", "desc": "1. 无衬线字体 由于一开始UI给的prd里的字体不是浏览器自带的字体，因此我这边使用了默认字体，没有特意的添加font-family属性，后来在实际页面中发现文字都变成了带衬线的字体了，被UI提醒了一下才改成了Helvetica字体。 2. 禁止用户长按链接与图片弹出菜单和选…"}, {"id": "6844903502121009165", "title": "《Node.js设计模式》Node.js基本模式", "desc": "本系列文章为《Node.js Design Patterns Second Edition》的原文翻译和读书笔记，在GitHub连载更新，同步翻译版链接。 对于Node.js而言，异步特性是其最显著的特征，但对于别的一些语言，例如PHP，就不常处理异步代码。 在同步的编程中，我…"}, {"id": "6844903925569552397", "title": "Nodejs调试的各种姿势", "desc": "对于绝大部分前端人员，对JavaScript的调试更多停留在浏览器中，类似console.log和debugger，但这种方式对代码侵入性较高，甚至需要刷新页面或重启编译器。转向服务端后，没有浏览器界面，如果仅停留在原来的调试方式，开发效率想必是较低的。因此，前端人员转向服务端…"}, {"id": "6847902219509956616", "title": "page-skeleton骨架屏的实现", "desc": "骨架屏指的是当你打开一个 web 页面，在页面解析和数据加载之前，首先展示给用户大概的样式。 Google Research 的研究显示，53% 的用户在等待加载 3s 后，选择关闭 Web 页面或应用，导致用户流失。 当下前端框架，基本都是js 驱动型的，也就是说在JS 代码…"}, {"id": "6844903633788600333", "title": "浅析node中流应用(一)  可读流(fs.createReadStream)", "desc": "当我们学习新知识的时候，首先我们知道为什么要学习，那我们为什么要学习流?因为在在node中读取文件的方式有来两种，一个是利用fs模块，一个是利用流来读取。如果读取小文件，我们可以使用fs读取，fs读取文件的时候，是将文件一次性读取到本地内存。而如果读取一个大文件，一次性读取会占…"}, {"id": "6844903507036733453", "title": "使用fjpublish发布前端项目（基础篇）", "desc": "曾几何时，我相信部分Web Developer（包括我）使用的项目发布方式比较传统（使用xftp或者sublime text的插件sftp等），发布方式简单又粗暴，想发布哪个目录就直接上传覆盖... 发布时由于选错文件或者选错发布环境导致的上传(＞﹏＜)悲剧，可没有后悔药吃。 …"}, {"id": "6844903681062600711", "title": "Stream（流）的基本使用", "desc": "在NodeJS中，我们对文件的操作需要依赖核心模块 fs， fs 模块中集成了 createReadStream 可读流。 highWaterMark :// 最高水位线，每次读多少个。 默认：64*1024 字节 1. open open 事件用来监听文件的打开，回调函数在打…"}, {"id": "6844903727975890952", "title": "markdown 写 api 系统", "desc": "note: application/json 表示前台json格式传输给后台，也可以选择 text/plain。Request需要搭配Attributes来描述具体的参数格式 note1: application/json 表示前台json格式传输给前台，也可以选择 text/…"}, {"id": "6883047861806694414", "title": "module.exports 和 exports 区别", "desc": "Node 内部提供一个 Module 构建函数。模块是Module的实例。 每个模块内部都有一个 module 对象，module 代表模块本身，module 的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 modul…"}, {"id": "6876818735395831822", "title": "Next.js全解", "desc": "缺点：白屏，seo不友好。 优点：无白屏，有利于seo。"}, {"id": "6844903934562140173", "title": "Navigation网站收藏和导航平台", "desc": "估计很多人和小编一样，一开始将浏览过的觉得不错的网站收藏到浏览器的收藏夹中。日积月累，网站越来越多，在收藏夹里找所需网站越来越麻烦。后来浏览器从火狐转到Chrome，收藏的网站却不能同步过来。浏览器需要登录才能同步收藏夹的内容，这很痛苦……鉴于种种原因，有这样一个收藏、搜索和分…"}, {"id": "6854573218419474439", "title": "从Deno跟Node的性能对比说起", "desc": "今年五月份Deno发布了1.0版本，作为一个经常用Node来构建项目的前端，对Deno官网描述的那几点优点其实并不太关心(Deno优点)。主要还是想知道Deno的性能怎么样，用Deno能不能大幅减少前端构建项目的耗时。对网络上Deno能不能替代Node的讨论也比较感兴趣，于是便…"}, {"id": "6844903824558145543", "title": "nodejs检测因特网是否断开方案", "desc": "最近在用Electron开发一款应用，其中有涉及到检测因特网是否断开的需求。Electron基于Chromium和Node.js，让你可以使用HTML、CSS和JavaScript构建应用。所以Electron提供nodejs、浏览器两套运行环境。 笔者最先考虑到的方案HTML…"}, {"id": "6924605870135312397", "title": "腾讯云服务器部署node应用-部署node项目", "desc": "在上面的代码中我们创建了一个node项目，主机名0.0.0.0，端口7500，启动了一个http服务，当访问这个主机的时候返回'hello world'。 因为云服务器上的服务已经停止了，这就是为什么要用pm2，他可以帮我们管理node线程。 这时候又能看到hello worl…"}, {"id": "6844904201932406798", "title": "在 linux 上搭建 express 图床服务（支持多图上传），奥利给！", "desc": "不得不说，Node 真牛，是所有在全栈道路上挣扎前行的前端开发者的福音！JavaScript 是世界上最......"}, {"id": "6844903688444739592", "title": "LESS即学即用", "desc": "我们大家都知道HTML和CSS不属于编程语言而是属于标记语言，所以很难像JS一样定义变量、编写方法、实现模块化开发等。而目前的CSS编写模式中，都是定义一些公共的样式类名，哪一块的HTML需要这个样式，就去增加对应的样式类名，所以我们经常看到一个标签上存在很多样式类名，在这种模…"}, {"id": "6949558220218171429", "title": "egg 插件-addSingleton ", "desc": "addSingleton用处使用addSingleton的一些插件egg-mysqlegg-redisegg-oss...addSingleton源码egg.jslib/core/singleton."}, {"id": "6976276776863399950", "title": "Node系列学习之简单博客前台", "desc": "今天完成了前端页面的搭建, 与Node后端进行联调, 但是前端页面还差点,需要再优化一下, 简单封装了下axios."}, {"id": "6844904047799959565", "title": "[译] 在生产环境运行 PM2 & Node.js", "desc": "维护你的代码库并保持其相关性确有难度；但与之相比我们会发现，维护一个应用时最大的挑战来自于保持其存活和运行。不仅如此，随着 Node.js 变成大部分后端 API 的核心语言，单线程程序的伸缩也变得困难；这就是 PM2 出现并受到欢迎的原因了。 有很多进程管理工具，广为人知的如…"}, {"id": "6844903794610798606", "title": "Nodejs教程19：WebSocket之一：使用Socket.io建立WebSocket应用", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 性能高。 根据测试环境数据的不同，大约会比普通Ajax请求高2-10倍。 HTTP是文本协议，数据量比较大。 而WebSocket是基于二进制的协议，在建立连接时用的虽然是文本数据，但之后传输的都是二进制数据，因…"}, {"id": "6954239034893795359", "title": "从零开发一个脚手架(进阶)", "desc": "在脚手架入门版我们了解到了脚手架的作用好处以及开发一个脚手架的基本套路，那么在脚手架进阶版我会带着大家一起来探索下vue官方版脚手架vue-cli实现的核心主要逻辑～"}, {"id": "6953803916484018206", "title": "使用nvm管理node.js版本以及更换npm淘宝镜像源", "desc": "手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的node.js，如果没有一个合适的工具，这个问题将非常棘手。"}, {"id": "6844904048261333000", "title": "Node.js + TypeScript 开发服务端是什么样的体验", "desc": "Node.js 和传统的后端语言 Java 在设计上是有很大区别的。一个是动态语言，一个是静态语言；一个是单线程模型，一个是多线程模型。 Node.js 其实不是一门语言，它是 Javascript 的服务器运行时环境, 在它出现之前 Javascript 只能运行在浏览器中。…"}, {"id": "6912044504098799624", "title": "使用 Chrome Devtools 调试您的 Node.js 程序", "desc": "俗话说：“工欲善其事，必先利其器”，调试是每一个开发人员都要遇到的问题，选择一个合适的调试工具也尤为重要。 在 Node.js 开发过程中除了万能的 console.log 之外，本节介绍一个 Node.js 与 Chrome Devtools 结合的调试工具，以后你可以选择使…"}, {"id": "6911264538759430158", "title": "浅记 nunjucks - 模板引擎", "desc": "Nunjucks 是 Mozilla 开发的一个纯JavaScript编写的模板引擎，既可以用在Node环境下，又可以运行在浏览器端。但是，主要还是运行在Node环境下，因为浏览器端有更好的模板解决方案，例如MVVM框架 以前的 WEB 项目大多会采用后台 MVC 模式，这样做…"}, {"id": "6932116522441637901", "title": "node.js中的核心概念", "desc": "同步进行，只有前面的代码执行完了才会往下面执行。但是node.js程序在宏观上看是并行的，这是由于它具有非阻塞I/O和事件驱动的特点。 好处：减少了内存开销，不再有进程创建，销毁的开销；比较简单。 坏处：一个用户造成了线程的崩溃，整个服务就都崩溃了。 I/O会阻塞代码的执行，极…"}, {"id": "6868097837889126414", "title": "node学习笔记（三十八）", "desc": "一、什么是NodeJS?二、什么是V8引擎？三、Node可以做什么？注意：在node中无法使用window对象下面的一些方法，因为node中没有DOM和BOM的概念，同时node中也有一些属性浏览器无"}, {"id": "6919115089958305800", "title": "node.js操作文件实现增、删、改、查", "desc": "[TOC]1.效果展示1.1目录结构2.初始化项目3.安装插件安装express框架、body-parserPOST请求解析、art-template模板渲染插件nodemon自动重启工具4.创建服务"}, {"id": "6844904133464424456", "title": "node实战入门总结", "desc": "bin/www.js（第一层）：node构建服务的基本流程配置，和业务无关。package里面配置好的入口文件 pm2 start ... 启动进程 操作系统会限制一个进程的最大可用内存。因为按照软件设计拆分这种模式来说，如果一个进程做很多很多的事情，该进程万一奔溃，这可是天灾…"}, {"id": "6844904019383549959", "title": "VUE 项目基于 i18n 的国际化处理工具", "desc": "该脚本还不够完善，目前仅支持部分常用模版的文案提取，有其他使用场景的，可以帮忙补充。"}, {"id": "6844903511197483022", "title": "初识Http缓存君", "desc": "二零一七年十一月十三日，就是我开始前端之旅的第n日，我独在卧室外徘徊，遇见程君，前来问我道，“你可曾为http缓存写了一点什么没有？”我说“没有”，他就正告我，“你还是写一点罢，http缓存应该很高兴与你相识，你们可以相互认识多一点”。 可是我实在无话可说。我只觉得所住的并非人…"}, {"id": "6935719776685834254", "title": "看完即入门express+mongoose 搭建数据接口", "desc": "1.express简单的搭建一个本地服务3部曲server.js2.连接MongoDB数据库1.注册登录mongoDB的云存储https://cloud.mongodb.com/选这个不要钱的按照下面"}, {"id": "6844904032826310670", "title": "Nodejs调用百度AI接口实现人脸识别", "desc": "1. 项目创建 首先使用Express的脚手架创建一个项目。 项目创建好之后，安装 axios，用来做网络请求。 2. 登录百度AI，创建项目 登录成功后点右上角进入到控制台。 点击左侧的人脸识别，进去之后，创建一个项目。在创建页面，根据自己的需求填写就可以。 点击管理项目可以…"}, {"id": "6943558430997086222", "title": "nodemon的安装与使用", "desc": "nodemon并没有要求任何对你的代码或开发的方法中的额外变化。nodemon可以直接替换node指令。 PS：甚至你可以去nodemon的根目录下找一个叫做defalut.js的文件直接更改全局配置。 此时,ceshi.js如果有变动,那么控制台会输出in index.js,…"}, {"id": "6844903669134000136", "title": "Javascript模块全揽", "desc": "之前写的文章急速Js全栈教程得到了不错的阅读量，霸屏掘金头条3天，点赞过千，阅读近万，甚至还有人在评论区打广告，可见也是一个小小的生态了；）。看来和JS全栈有关的内容，还是有人颇有兴趣的。 这次文章的内容，是JavaScript模块。JavaScript Module 真是很讨…"}, {"id": "6844904201026273287", "title": "从零构建一个服务器环境前端项目自动更新部署服务（上）", "desc": "今天我们来从零构建一个简易的前端自动部署项目，为了方便大家理解，除了基础依赖，尽量不使用其他第三方插件（我连ui库都没装），尽量减少学习成本，项目中用到了pikaz-shell，一个操作shell插件，对此有疑惑的话可以前往我之前的pikaz-shell文章查看。 搭建一个服务…"}, {"id": "6844903943508606989", "title": "源码解读系列之 node-http-proxy", "desc": "在日常的开发中，经常使用 Nginx 作为反向代理服务器进行 http 请求代理。既然 Nginx 可以进行请求反向代理 NodeJs 肯定也是可以的。开源社区上，比较出名的项目就是 node-http-proxy 了，尝试对该项目进行一次源码解读，藉此机会了解一下 NodeJ…"}, {"id": "6844903637496365064", "title": "ES7 Decorator 应用小结", "desc": "许多面向对象的语言都有 装饰器(Decorator) 函数，用来修改类的行为。目前，这个方法已经被引入了 ES7，但是无论是主流浏览器还是 Node.js 对它的兼容性都不是特别友好。 因此要在项目中使用Decorator的话，需要使用 Babel 进行转译，或者使用 Java…"}, {"id": "6844903501986791432", "title": "实战系列之Node.js玩转Java", "desc": "Nodejs调用Java方案"}, {"id": "6987191157088321543", "title": "MERN堆栈", "desc": "【转自GeeksforGeeks的@Jasraj《MERN Stack》翻译】 MERN堆栈: MERN堆栈 是一个 Javascript 堆栈，用于更轻松、更快速地部署全栈Web应用程序。"}, {"id": "6844904195317825550", "title": "Express基础", "desc": "在Express核心之中间件这篇文章中，我们讲解了Express的核心——中间件，理解了Express的核心功能之后，再去熟悉Express的基础API就变得很容易了。通过进一步掌握Express的基础知识，我们就可以使用Express进行简单的后台开发了。Express的核心…"}, {"id": "6945807323138883615", "title": "【深入探究Node】（2）“模块机制” 有十三问", "desc": "CommonJS规范为JavaScript制定了一个美好的愿景——希望JavaScript能够在任何地方运行。 CommonJS对模块的定义十分简单，主要分为模块引用、模块定义和模块标识3个部分。 在CommonJS规范中，存在require()方法，这个方法接受模块标识，以此…"}, {"id": "6844903905541750791", "title": "Nodejs监听日志文件的变化", "desc": "最近有在做日志文件的分析，其中有一个需求：A服务器项目需要用Nodejs监听日志文件的变化，当项目产生了新的日志信息，将新的部分通过socket传输到B服务器项目。socket暂时不做分析。 这个需求很简单，通过分析我们开始撸码吧。 监视 filename 的更改。 每当访问文…"}, {"id": "6844903989134557191", "title": "多种模板引擎在Node中的应用（性能对比及使用方法）", "desc": "由于浏览器和js的优化和性能的提升，大多数公司采用的前后端分离式的开发，代码区分明确，易于维护，易于开发，但是不易爬虫，还好有强大的Node.js，它几乎可以处理所有我们开发时后端处理的事务，也就弥补了前后端分离后不方便服务端渲染的问题。 Node渲染读取的页面本身是纯静态的，…"}, {"id": "6844903614889066504", "title": "node跨域转发  express+http-proxy-middleware ", "desc": "最近公司在尝试前后端分离的开发模式，现有应用是java语言，要从中间拆除一个小的模块来做前后端分离，工具上还是jquery，只不过是流程和分工上的分离，不想在前端的机器上搭建一套java环境，就根据教"}, {"id": "6877869159309377544", "title": "排查 Node.js 服务内存泄漏，没想到竟是它？", "desc": "团队最近将两个项目迁移至 degg 2.0 中，两个项目均出现比较严重的内存泄漏问题，此处以本人维护的 goldenserver 为例进行排查。服务上线后内存增长如下图，其中红框为 degg 2.0 线上运行的时间窗口，在短短 36 小时内，内存已经增长到 50%，而平时内存稳…"}, {"id": "6844903557066391565", "title": "说说node中可读流和可写流", "desc": "nodejs中大量的api与流有关，曾经看到公司的一些大神的node代码，实现一个接口只需要pipe一下另一个java接口就可以了。简单的一行代码实在让人困惑。作为小白的自己一脸懵逼却又不敢问，因为根本不知道从何问起。现在终于通过学习，也能对流说出个123，希望和大家共同交流。…"}, {"id": "7005411118441037855", "title": "node.js搭建本地服务器", "desc": "node.js是基于JavaScript的一门后端语言，前端小伙伴儿可以很快上手，并自己搭建一个本地的服务器。一起来看看如何做到的吧~"}, {"id": "7005934264902483982", "title": "Node.js又一框架：Nest.js（四）", "desc": "Nest.js（v7.x）控制器之Request篇：Request：访问客户端的请求细节。在处理函数的签名中使用 @Req() 装饰器，指示 Nest 将请求对象注入处理程序。"}, {"id": "7006672621131530247", "title": "案例：npm包从创建到发布", "desc": "npm包从创建到发布 npm项目初始化 在本地磁盘上创建一个空项目，取文件夹名为myNpm。注意请先去npm网官去确定一下，这个项目名是否已经被占用了。（如果这个名字已经被占用了，则你是无法向npm上"}, {"id": "6844903745755545614", "title": "Node - 从0基础到实战企业官网", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 整合 No…"}, {"id": "7003518794505158670", "title": "node.js react typescript 构建拖拽生成html文件项目", "desc": "近期抽空写了一个可拖拽生成html文件的项目。 html5实现拖拽；typescript、react实现元素模型设计与展示；node.js编译生成html文件。"}, {"id": "6981820158046109703", "title": "让你 nodejs 水平暴增的 debugger 技巧", "desc": "学习 nodejs 最重要的是什么？可能每个人都有自己的答案。 我觉得学习 nodejs 除了要掌握基础的 api、常用的一些包外，最重要的能力是学会使用 debugger。因为当流程复杂的时候，断点"}, {"id": "6885751452015263758", "title": "写给前端的 Nest.js 教程——10分钟上手后端接口开发", "desc": "沉默了很久，一直都没发文章，有些惭愧。 最近实习结束之后回了学校，提前开始做毕业设计了。对，就是毕业设计。 近两个月把 React Native、Vue 3.0 和 Nest.js 都摸了一下，大概都摸懂了。 鉴于掘金已经很多优秀的 Vue 3.0 教程了，本人自认为文笔远逊于…"}, {"id": "7005944216182325278", "title": "Nodejs 中的 Stream", "desc": "什么是 Stream 流的英文stream，流（Stream）是一个抽象的数据接口，Node.js中很多对象都实现了流，流是EventEmitter对象的一个实例，总之它是会冒数据（以 Buffer "}, {"id": "7001411229323362335", "title": "React SSR 服务器渲染原理解析与实践", "desc": "一、为什么使用服务器端渲染。 1. 客户端渲染 2.服务器端渲染 3. 使用 SSR 技术的主要因素 首屏等待: CSR 项目的 TTFP（Time To First Page）时间比较长 S"}, {"id": "6981921291980767269", "title": "Serverless Custom (Container) Runtime", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 我们知道 Serverless 可以理解为 Serverless = FaaS + BaaS 。Serverle"}, {"id": "6997943659261853704", "title": "带你入坑Nodejs(终篇) ", "desc": "这是我参与8月更文挑战的第15天，活动详情查看:8月更文挑战 关系型数据库 关系型数据库：指采用了关系模型来组织数据的数据库。 关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联"}, {"id": "6993278063190474788", "title": "技术周报 · 2021-08-06", "desc": "小编推荐 企业 Node.js 基础建设与框架设计讨论集合 探索类型友好的 Node.js Web 框架 复杂系统架构设计应对之道 技术方案 跨平台解决方案的技术分析 大前端工程提效分享与总结 如何实"}, {"id": "6995740183610015758", "title": "20行代码做个卡通P图微信机器人", "desc": "七夕将至，又到了各位程序猿给女友，老婆送礼物的节日。今年老婆规定了，不能花费太多钱，还禁止买淘宝直男礼物。真的太难了😿，想破头皮也不知道送啥好，头发却已经掉了一缕又一缕，什么代码绽放烟花都不好使了"}, {"id": "7005821150136090654", "title": "初探cloudbase+云函数/云托管", "desc": "我们想使用typescript做nodejs的开发怎么做？不用怕，nestjs来啦！我们想使用云开发cloudbase怎么做？不用怕，我来啦！"}, {"id": "7000610442695426079", "title": "深入理解 Node.js  Buffer 的 encoding", "desc": "计算机最小的单位是一个位，也就是 0 和 1，在硬件上通过高低电平来对应。但是只有一位表示的信息太少了，所以又规定了 8 个位为一个字节，之后数字、字符串等各种信息都是基于字节来存储的。 字符怎么存储"}, {"id": "7000671562382704670", "title": "Node V8 作用域相关", "desc": "一. 前言 对于一门编程语言来说，变量的存储和访问，是最基本的功能之一。今天，将向大家深入介绍一下，JS 程序在运行的时候，如何找到变量，这需要一套良好的规范来规范，这套规则，就成为了作用域 二. V"}, {"id": "7005842478326611981", "title": "Node.js又一框架：Nest.js（三）", "desc": "Nest.js（v7.x）控制器之路由篇：控制器，负责处理传入的请求和向客户端返回响应。路由，控制哪个控制器接收哪些请求，由可选的控制器路径前缀和请求方法装饰器中声明的任何路径字符串组合而成。"}, {"id": "7005192934446497829", "title": "Node.js又一框架：Nest.js（二）", "desc": "Nest.js（v7.x）核心基础知识：创建 project-nest 项目目录，安装 node_modules 和一些其他样板文件，并创建一个 src 目录。"}, {"id": "7002589221923848222", "title": "NodeJs深入浅出之旅：异步I/O （下）🐂", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战。Promise/Deferred模式采用先执行异步调用，延迟传递处理的方式"}, {"id": "7006670203358560269", "title": "npm的使用", "desc": "npm的使用 npm下载使用包 第一步：初始化项目 这里提到的项目并不是某个具体的功能，只是要创建一个空文件夹即可（文件夹名字不要中文）。进入到项目所在的根目录下，启动小黑窗（按下shift键，点击右"}, {"id": "6994700373487271967", "title": "一文读懂前端模块化(CommonJS、AMD、CMD、UMD、ES6)", "desc": "JS中的模块规范（CommonJS，AMD，CMD）以及ES6新增的import/export，理解他们之间的关系和使用方式，提高代码的复用率和可读性，争取做一名合格的前端工程师，为后续精进打好基础。"}, {"id": "6875271902269538312", "title": "npm 超详细教程", "desc": "npm，全名 node package manger。 npm 在按照 Node.js 时会连带被安装。但有可能不是最新版本，需要 npm install npm@latest -g 升级到最新版本。 用来初始化生成package.json文件。在这个过程中会向用户提问一系列问…"}, {"id": "6995865258040492068", "title": "Node.js基础学习-介绍安装和文档", "desc": "day12 学习贵在坚持, 笔记是灵魂, 温故而知新, 时不时翻一翻, 回顾一下知识点, 加深记忆, 事半功倍! 这里记录一些学习 Node.js 的基础入门"}, {"id": "6844903866153041933", "title": "多站点单点登录实现方案", "desc": "今天写一篇关于多域名下单点登录的实现。 有这么个场景，公司下有多个不同域名的站点，我们期望用户在任意一个站点下登录后，在打开另外几个站点时，也是已经登录的状态，这么一过程就是单点登录。 因为多个站点都是用的同一套用户体系，所以单点登录可以免去用户重复登录，让用户在站点切换的时候…"}, {"id": "6875615895423549447", "title": "Node.js入门系列（五）Node.js的模块管家：npm", "desc": "VUE3.0和Webpack5相继在周末发布，又开始技术焦虑了吗？铺天盖地的源码解析带来的焦虑和自我好奇心的驱使，使自己放下了手里正在学的东西，赶紧看了看最新的技术。结果，新的没学会，老的也半途而废。 不能专一于只做一件事，结果往往所有的事都会半途而废。所以，即使VUE、web…"}, {"id": "6844903973816631310", "title": "使用 Nodejs 开发的 SpaceX-API 开源了！", "desc": "上面是这个图片不是从网上随便找的，来自于 SpaceX-API 项目的 Github 网站，想起了之前说的一个玩笑 “面试造火箭” 这次是真的造火箭了。。。 SpaceX-API 是一个用于火箭、核心舱、太空舱、发射台和发射数据的开源 REST API。 https://doc…"}, {"id": "6844903598803910663", "title": "从0到1搭建和部署个人博客", "desc": "此教程会教你从0到1搭建一个完整的博客，包括前端展示页、后台管理系统、后端接口及接口文档、服务端部署整个完整流程。这个博客十分简单，功能远少于我们所用的博客。但是学会了整个流程，再在此基础上扩展就会很容易了。 所以此教程适合新手小白，高手请绕道，浪费你的时间。 搭建自己的博客，…"}, {"id": "6961680424368078862", "title": "全栈搭建个人博客(2)--nest+typeorm搭建博客后端", "desc": "博客后端选用的是Nest框架，Nest 是一个用于构建高效，可扩展的 Node.js 服务器端应用程序的框架。"}, {"id": "6890358903960240142", "title": "手写Express.js源码", "desc": "上一篇文章我们讲了怎么用Node.js原生API来写一个web服务器，虽然代码比较丑，但是基本功能还是有的。但是一般我们不会直接用原生API来写，而是借助框架来做，比如本文要讲的Express。通过上一篇文章的铺垫，我们可以猜测，Express其实也没有什么黑魔法，也仅仅是原生…"}, {"id": "6922815205575491597", "title": "5分钟上手开发浏览器插件——油猴脚手架wokoo(使用篇)", "desc": "油猴插件是什么？油猴插件(Tampermonkey)是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于Chrome,Edge,Safari等多个浏览器。油猴脚本本质上是在网页上插入一段Java"}, {"id": "6878157413006966798", "title": "GraphQL初体验，Node.js构建GraphQL API指南", "desc": "在过去的几年中，GraphQL已经成为一种非常流行的API规范，该规范专注于使客户端（无论客户端是前端还是第三方）的数据获取更加容易。 但是，在GraphQL中，客户端可以精确地确定其从服务器获取的数据。例如，客户端可能只需要用户名和电子邮件，而不需要任何地址信息： 通过这种新…"}, {"id": "6844903818186981383", "title": "如何自动化部署项目？折腾服务器之旅~", "desc": "本篇文章讲的不是如何把一个项目部署上线，而是如何自动化上线。 开发了一个需求管理和发布系统。 通过这个系统，可以创建需求、创建发布计划、创建分支、部署到测试环境、部署到生产环境、正式上线、合并代码等。 9.9元的阿里云服务器真的很慢，但还是足够折腾完这个项目。 用3个目录来模拟…"}, {"id": "6864824992626901005", "title": "使用Deno构建一个命令行天气预报程序", "desc": "在本文中，我将通过安装Deno运行时，并创建一个命令行天气程序，该程序将把一个城市名称作为参数，并返回未来24小时的天气预报。 要为Deno编写代码，我强烈建议将Visual Studio Code与官方的Deno插件一起使用。为了使事情更有趣，我们将使用TypeScript编…"}, {"id": "6844904098613952520", "title": "使用nodeJs开发自己的图床应用", "desc": "本文主要复盘笔者的nodeJS，通过一个线上的实战案例来总结node生态常用的技术点和最佳实践。后面会花费大概一个月的时间输出3篇以实战为主的nodeJs项目，本文是第一篇，主要介绍如何使用nodeJs开发一个图床应用。该项目对于测试和个人服务型网站非常实用，大家可以基于此扩展…"}, {"id": "6974934246729187359", "title": "超简版的koa小框架和egg小框架🐱‍👓", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 step1:简单手写超简版的koa小框架（Pok）✨step2:简单手写Egg框架实现mvc分层(基于koa)"}, {"id": "6998158614963683358", "title": "使用 node-cron 在 Node.js 中调度任务", "desc": "没有一个开发人员愿意把所有时间都花在繁琐的任务上，比如系统维护和管理、日常数据库备份以及定期下载文件和电子邮件。你更愿意专注于富有成效的工作，而不是跟踪这些烦人的琐事何时需要完成。 这时就需要使用到任"}, {"id": "6930565860348461063", "title": "Node.js + typescript 写一个命令批处理辅助工具", "desc": "工作中遇到这样一些场景：在php混合html的老项目中写css，但是css写着不太好用，然后就想使用预编译语言来处理，或者写上ts。然后问题来了: 每次写完以后都要手动执行一次命令行把文件编译成css文件，然后又要再输入一行命令把css压缩添加前缀；或者把ts编译成js，然后j…"}, {"id": "6967668389162516488", "title": "从0开始Node.js - common.js规范", "desc": "开始之前，我们先在本地新建一个目录，然后 生成一个包含package.json的目录结构，然后在目录下新建一个index.js作为入口js文件。新建一个module目录包含index.js及lib.j"}, {"id": "6987688264119353380", "title": "掉光头发的node.js 文件上传_下载", "desc": "本文章内容仅作为自己的学习小计,内容仅供参考,如有侵权请联系.关于上传是希望能跟java接口一样 上传到接口之后返回一个ip+端口号+文件名的地址回来,但是网上的教程大部分止步于将文件上传至服务器"}, {"id": "6844903775044370445", "title": "微信小程序websocket聊天室", "desc": "最近做了一个微信小程序的即时通讯功能，之前我也做过node.js的websocket服务，不过是在web端应用的socket.io服务。小程序本身对http、websocket等连接均有诸多限制，所以这次项目选择了node.js自带的ws模块。 定义wss实例方法，实现sock…"}, {"id": "6844903761966530568", "title": "玩转Koa -- koa-bodyparser原理解析", "desc": "在理解koa-bodyparser原理之前，首先需要了解部分HTTP相关的知识。 HTTP报文主要分为请求报文和响应报文，koa-bodyparser主要针对请求报文的处理。 而koa-bodyparser中的body指的就是请求报文中的报文主体部分。 HTTP底层采用TCP提…"}, {"id": "6957930535574306847", "title": "Node系列-阻塞和非阻塞的理解", "desc": "原文：https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/ 对于阻塞和非阻塞这两个概念大家应该都有一些自己的理解： 再简单说一下，阻塞"}, {"id": "6871832597891121166", "title": " Node.js VS 浏览器以及事件循环机制", "desc": "异步非阻塞：在涉及需要等待的操作，我们选择让程序继续运行，在等待时间结束的时候，通知一下我们的程序内容执行完毕，你可以操作这些资源了，这段等待时间并不影响你程序的继续执行，只是在未来的某个时间段（不确定），有一个操作一定会执行。 Engine（执行引擎）：如V8 Engine，…"}, {"id": "6953769861768020004", "title": "初识Node.js (一）", "desc": "JavaScript可以做后台开发，需要借助 Node.js JavaScript想要做后端开发，需要在 Node.js运行环境下开发。 Node是一个后端的运行环境 ,并不是一门后端语言 浏览器是J"}, {"id": "6946023412162641927", "title": "玩转 WSL", "desc": "很早就听说WSL了，作为一名前端一般来说是不需要跟linux打交道的毕竟各种ci都已经可以自动化运行了，但是作为一名程序员我觉得还是有需要了解下我们的代码的运行环境而WSL作为初次接触linux的介质再好不过了。 适用于 Linux 的 Windows 子系统可让开发人员按原样…"}, {"id": "6893870075783643144", "title": "6.ORM框架-Sequelize", "desc": "Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, MariaDB, SQLite 以及 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 预读和延迟加载,读取复制等功能. No…"}, {"id": "6957382494639357966", "title": "Node脚本快速同步CNPM项目内用到的依赖", "desc": "前言 还是为了解决之前的问题;公司用CNPM作为内部私有仓,没有开启全量实时同步;所以有些包会相对落后,所以常用同步上游就显得很重要了; 我想了想,每次都要手动去执行个别的包或者少量包的查询,操作太多"}, {"id": "6906390752046743565", "title": "Node", "desc": "1. 认识node 2. Node.js与JavaScript的关系 node.js是JavaScript的一个可运行环境(可独立出来的解析引擎)，JavaScript是一门编程语言。 node.js在chrome的V8引擎的基础上，对JavaScript语言进行了增强，使其具…"}, {"id": "6869602883998842888", "title": "Chrome动画调试最佳实践", "desc": "前端开发过程中针对复杂的动画，往往调整起来比较无力，这个时候如果借助devTools的Animations工具，就会把复杂的动画变得\"有迹可循\"。面板介绍打开Chrome的devTools面板，点击x"}, {"id": "6844903748423122957", "title": "玩转Koa -- koa-router原理解析", "desc": "Koa为了保持自身的简洁，并没有捆绑中间件。但是在实际的开发中，我们需要和形形色色的中间件打交道，本文将要分析的是经常用到的路由中间件 -- koa-router。 如果你对Koa的原理还不了解的话，可以先查看Koa原理解析。 koa-router的源码只有两个文件：route…"}, {"id": "6941305031878508551", "title": "Redis 在 Node.js 中的应用", "desc": "相信很多开发者都了解 Redis，至少听说过它。 Redis 是为集群应用提供分布式缓存机制而闻名。然而，这只是它其中的一个亮点。 Redis 是一个功能强大、通用的内存数据库。强大是因为它非常快；通用是因为它可以处理缓存、类似数据库的特性、会话管理、实时分析、事件流等... …"}, {"id": "6995062111282036750", "title": "前端开发效率提升神器！！！（通过Swagger文档生成前端service文件）", "desc": "PS：项目在最下面，如果不想看文章的话，直接拉到最后↓ 在企业级的项目开发过程中，一般会采用前后端分离的开发方式，前后端通过api接口进行通信，所以接口文档就显得十分的重要。 目前大多数的公司都会引入"}, {"id": "6844903661110296584", "title": "尝试手写一个 nodejs http-server（含发布到npm的流程）", "desc": "即npm安装后，在命令行输入指令http-server直接开启服务器，在服务器启动的目录下，默认会找public静态资源目录，去访问默认的127.0.0.1:8080 可以访问到静态目录站点。 具体用法就是cmd: http-server -p 3001 那么启动时就会访问30…"}, {"id": "6844903910855950343", "title": "node 删除和复制文件或文件夹", "desc": "[toc]首先引入相关包(会在使用处具体说明)：对文件的操作复制文件这里列出三种方式：使用writeFileSync和readFileSync结合使用copyFileSync使用promises的co"}, {"id": "6918659348109459464", "title": "基于websocket、rabbitmq、nest构建即时通讯(一)——单聊设计篇", "desc": "基于websocket和消息队列构建即时聊天系统（个人基于node的微服务的实践项目）。 涉及技术栈主要包括kafka(日志收集)、rabbitmq(消息推送)、mongodb|mysql|redis(数据缓存、持久化)，websocket。基本框架采用nest.js系统工程包…"}, {"id": "6941200296446001165", "title": "前端工程化之ffp-cli", "desc": "提供一套完整的前端项目 脚手架 支持，通过选择对应配置直接集成，免去安装依赖再配置的麻烦。 1. 选择工具，可用 -D 参数声明，或在命令行中进行多选 2. 添加全部工具 3. 显示支持的工具列表 文档地址均为官方文档地址。 1. eslint 代码校验 安装 eslint 相…"}, {"id": "6902278302606557191", "title": "javascript开发后端程序的神器nodejs", "desc": "javascript虽然一直都可以做服务端编程语言，但是它更多的是以客户端编程语言来展示在世人面前的。也许javascript自己都忘记了还可以做服务器端编程，直到2009年nodejs的横空出世。 javascript作为一门解释性语言，是不需要像C或者C++那样进行编译的。…"}, {"id": "6972185881507528711", "title": "Node系列学习之MySQL", "desc": "MySQL的安装与增删改查基本命令的简单使用,初次学习使用Node操作SQL,过程略显丝滑,一步一步学习Node与MySQL。"}, {"id": "6897973866733338631", "title": "手把手带你进阶全栈打工人，手撸H5商城项目从0到1实战分享（附源码）", "desc": "全栈工程师是指掌握多种技能，胜任前端与后端，能利用多种技能独立完成产品的人。 现代项目的开发，需要掌握多种技术。互联网项目，需要用到后端开发、前端开发、界面设计、产品设计、数据库、各种移动客户端、三屏兼容、restFul API设计和OAuth2.0等等，比较前卫的项目，还会用…"}, {"id": "6844903592889942023", "title": "HTTP从入门到放弃", "desc": "个人觉得只要了解请求首部及响应首部即可。其中响应首部中的range（可以做断点续传，会在下文提及），还有缓存（ETag），这些是必须要掌握的知识。 在上一篇的最后内容中，有提及req的一些属性，那么我们来看一下res有哪些方法吧。 它与writeHead的区别是：它不会真正的把…"}, {"id": "7002436676895113246", "title": "node在物流的应用", "desc": "背景 期望通过api统一生成图片对内对外，但是java生成图片在热敏打印机中 打印出来文字不清晰 应用方案 采取node+koa2+puppeteer生成图片返回给java koa2 Koa.js 是"}, {"id": "6844903652562305038", "title": "如何与NPM package-lock.json愉快地玩耍", "desc": "富途一天天的在成长，小伙伴们也越来越多。前端的更新迭代，一直都在进行。Vue已经作为前端的主要开发框架，想想2年前，我还在写JQ，后面写angular.js。前端打包也从原来的打包文件提交入Gitlab库，到后来接入jenkins（打包文件不入库），再到今天的Gitlab CI…"}, {"id": "6844903609990119431", "title": "EventLoop", "desc": "毋庸置疑，大家都很了解js是一门单线程语言，这也就说明JS无法进行多线程，但是JS中异步的功能完全可以模拟多线程，而且效果还杠杠滴。当然，如果想完全理解异步，首先要了解JS的运行核心——事件环（Event Loop），下面分两部分理解事件环： 图虽然有些乱，但是我们只需关心ti…"}, {"id": "6950853672343453709", "title": "AutoJs Web Control 部署指南", "desc": "前言AutoJs Web Control 是基于nodejs typescript vuejs 等前端语言开发的,可以实现Android手机免root的群控控制系统,本篇文章详细介绍如何编译及部署"}, {"id": "6844903838776819720", "title": "Node.js一行代码实现静态文件服务器", "desc": "nodejs不仅仅可以用来写服务端接口，用来做静态文件服务器替代nginx的功能， 也是分分钟可以搞定的。 上述代码实现静态文件服务器后，意味着项目根目录下所有的文件（递归）都可以通过浏览器直接访问和下载了，这样会带来一些安全性的问题，想想看，你的服务器端代码和配置文件都能通过…"}, {"id": "6917622556115763207", "title": "谁说只有python可以爬虫，Node专题系列之cheerio实现爬虫", "desc": "获取页面信息后，我们来定义一个函数getHotNews()来抓取页面内的“热点新闻”数据。 现在，继续我们的目标，抓取“本地新闻”数据（编码过程中，我们会遇到一些有意思的问题） 有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。 OK！分析了DOM结构，…"}, {"id": "6954207659914428429", "title": "从零开始搭建实战级Nodejs服务项目 —— 2. 洋葱模型", "desc": "前言 Express 和 Koa 基本上是我们最熟悉的开发框架。 我们在这里选用 Koa2 ，不仅仅是因为它是由 Express 原班人马打造的下一代Web开发框架， 更是因为它遵循的“洋葱模型”。"}, {"id": "6844903712570212360", "title": "小程序云开发初体验", "desc": "开发者可以使用云开发开发微信小程序、小游戏，无需搭建服务器，即可使用云端能力。 云开发为开发者提供完整的云端支持，弱化后端和运维概念，无需搭建服务器，使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这一能力，同开发者已经使用的云服务相互兼容，并不互斥。 云…"}, {"id": "6844903584983678990", "title": "Koa2 之文件上传下载", "desc": "上传下载在 web 应用中还是比较常见的，无论是图片还是其他文件等。在 Koa 中，有很多中间件可以帮助我们快速的实现功能。 在前端中上传文件，我们都是通过表单来上传，而上传的文件，在服务器端并不能像普通参数一样通过 ctx.request.body 获取。我们可以用 koa-…"}, {"id": "6879265583205089287", "title": "前端CLI脚手架思路解析-从0到1搭建 | 掘金技术征文-双节特别篇", "desc": "在实际的开发过程中，我们经常用别人开发的脚手架，以节约搭建项目的时间。但是，当npm没有自己中意的脚手架时，我们不得不自己动手，此时学会开发前端CLI脚手架的技能就显得非常重要。搭建一个符合大众化的脚手架能使自己在项目经验上加个分哦！ 其实很多时候从0开始搭建的项目都可以做成模…"}, {"id": "6972565004516065294", "title": "Node系列学习之MySQL(二)", "desc": "封装SQL执行函数,优化之前使用假数据的路由,完成了接口从假数据到真数据的转换,技术上可能没有恒大突破,但这是个值得纪念的时刻~"}, {"id": "6935334265760514085", "title": "windows下通过nvm安装node(内含卸载node)", "desc": "日常开发中有时候会维护多个项目，随着时间跨度的增加而我们前端技术又日新月异，不可避免有些项目是不同的node版本依赖。这个时候我们就想要是有一个node的版本切换(管理)工具那就好了，事实上的确有那么一个工具那就是nvm 这样就通过nvm成功安装node自己想要的版本了，切可以…"}, {"id": "6844903621444763662", "title": "剖析nodejs的事件循环", "desc": "nodejs是单线程执行的，同时它又是基于事件驱动的非阻塞IO编程模型。这就使得我们不用等待异步操作结果返回，就可以继续往下执行代码。当异步事件触发之后，就会通知主线程，主线程执行相应事件的回调。 以上是众所周知的内容。今天我们从源码入手，分析一下nodejs的事件循环机制。 …"}, {"id": "6844903637773189127", "title": "渴望力量吗？少年！流的原理", "desc": "今天跟大家分享的是node.js中的流(stream)。它的作用大家应该都在平常使用node的时候看到过，比如： gulp中的pipe就是流的一种方法，通过可写流和可读流的配合，达到不占用多余缓存的一种读写方式。 express和koa中的res和req也是流，res是可写流，…"}, {"id": "6999452037008064526", "title": "在项目中操作MySql", "desc": "在项目中操作MYSQL的步骤 1.安装操作mysql数据库的第三方模块（mysql） 2.通过mysql模块连接到Mysql数据库 3.通过mysql模块执行mysql语句 npm i mysql 安"}, {"id": "6882290865763680264", "title": " 玩转 node 子进程 — child_process", "desc": "在 node 中，child_process 模块的重要性不言而喻，特别如果你在前端工作中有编写一些前端工具，不可避免需要使用 child_process 这个模块，并且可以使用它进行文件压缩、脚本运行等操作，所以深入掌握它变得刻不容缓，希望通过本篇文章，你能和我一样彻底掌握 …"}, {"id": "6844903614146691085", "title": "作为前端，如何帮帝都的朋友租到合适的房子？", "desc": "在帝都打拼的小伙伴都知道，要租个合适的房子真心不易。中介要收一个月的房租作为中介费。而且很多黑中介打着租房的旗号各种坑蒙拐骗。要想在茫茫帖子中找到真正的房东，宛如大海捞针，同时需要和各路黑中介斗智斗勇。接下来就讲讲我浴血奋战的故事。 那么，How to start? 我们先选一…"}, {"id": "6886818067913900046", "title": "简单聊聊 npx 和 npm", "desc": "之前就有用过 npx 安装过一些依赖，但是一直没时间看看 npx 和 npm 到底有什么区别。 npm（node package manager）是我们用于 node.js 包管理的工具，在现在前端开发的环境下，我们会经常使用到这个命令来管理和发布自己的包。 在正常情况下，我们…"}, {"id": "6844903944645246984", "title": "万物皆可爬-puppeteer实战", "desc": "puppeteer 是一个Chrome官方出品的headless Chrome node库。它提供了一系列的API, 可以在无UI的情况下调用Chrome的功能, 适用于爬虫、自动化处理等各种场景 puppeteer 是一个Chrome官方出品的headless Chrome …"}, {"id": "6844903717947310093", "title": "WEB 前端模块化都有什么？", "desc": "说到前端模块化，你第一时间能想到的是什么？Webpack？\bES6 Module？还有吗？我们一起来看一下下图。 相信大伙儿对上图的单词都不陌生，可能用过、看过或者是只是听过。那你能不能用一张图梳理清楚上述所有词汇之间的关系呢？我们日常编写代码的时候，又和他们之间的谁谁谁有关系…"}, {"id": "6905702208931627021", "title": "Sequelize ORM", "desc": "Sequelize ORM 是基于 Promise 的 Nodejs ORM。 ORM（Object-relational mapping），对象-关系映射，就是这么一个工具，它能把数据库映射成对象，把对数据库的操作简化成对对象的操作。 连接数据库，要连接数据库，需要先创建一个…"}, {"id": "6844904056155013128", "title": "Mosh的Node.js教程（一）", "desc": "本系列文章是根据Mosh大佬的视频教程全方位Node开发 - Mosh整理而成，个人觉得视频非常不错，所以计划边学习边整理成文章方便后期回顾。该视频教程是英文的，但是有中文字幕，感谢marking1212提供的中文字幕翻译。 Node.js或Node是一个开源跨平台的运行环境，…"}, {"id": "6844903764499890189", "title": "pkg版本规范管理自动化最佳实践", "desc": "何为版本？版本即语义版本控制（ Semantic version 后面简称为 SemVer ）是一种版本控制系统，在过去几年中一直在不断发展。 随着每天都在构建新的插件，插件，扩展和库，拥有通用的软件开发项目版本化方法是一件好事，可以帮助我们跟踪正在发生的事情。 通过 SemV…"}, {"id": "6844903552859504654", "title": "[翻译] SuperAgent 中文使用指南(v3.8.0)", "desc": "SuperAgentSuperAgent是轻量级渐进式ajaxAPI，相比于现有的请求API，它更加灵活，可读，且学习成本低。同样它也适用于Node.js！测试文档以下测试文档是由Mocha's\"do"}, {"id": "6844903589656133639", "title": "浅析TCP和nodejs中TCP的简单应用", "desc": "emmmmmmm... 我们应该都知道，tcp是一种网络协议。 说起网络，在大学学计算机网络的时候，记得老师讲过网络一共分7层，这7层从上到下依次是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 OSI是Open System Interconnection的缩写…"}, {"id": "6844904033627406350", "title": "理解node中的Buffer", "desc": "在node应用程序中，我们需要处理网络协议，文件流数据等，在网络流与文件的操作中，还有二进制数据。js中的string明显不能满足这些需求。而buffer对象为我们提供了操作二进制流数据的能力。 值得注意的是，在node中，new Buffer('xxx')和Buffer('x…"}, {"id": "6844903608538890253", "title": "lenneth -- 基于koa2 的web极简框架", "desc": "封装 lenneth 旨在快速方便的搭建出一个 node web 应用，不过度封装也不随波逐流，koa 的 node 是简单的，lenneth 也是。 基于 ES6+typescript 的一些特性，做了一些类似 spring 的注解，对开发本身不增加复杂度，并且不失 koa …"}, {"id": "6844903552817561614", "title": "JavaScript中的执行机制", "desc": "众所周知JavaScript语言是单线程语言，单线程就意味着所有的任务都需要按序执行，只有上一个任务结束后才能继续执行下一个任务，那JavaScript当中它的执行机制又是怎么样的呢？下面我们就将以代码为例，逐一的来理解。 以上图说明主线程在执行的时候产生堆（heap）和栈（s…"}, {"id": "6844903537038589959", "title": "唯快不破，让nodejs再快一点", "desc": "注： 本文为第12届D2前端技术论坛《打造高可靠与高性能的React同构解决方案》分享内容，已经过数据脱敏处理。 很多前端工程师在做页面性能调优的过程中，极少关注代码本身的执行效率，更多关注的是网络消耗，比如资源合并减少请求数、压缩降低资源大小、缓存等. 我并不觉得这不合理，相…"}, {"id": "6844903496525987848", "title": "在 Node.js 中使用原生的 ES 模块", "desc": "本文译自：Using ES modules natively in Node.js，原作者是 Dr. Axel Rauschmayer，圈内称之为\"德国阮一峰\"。 Node.js 从 8.5.0 开始原生支持 ES 模块，不过还需要通过命令行参数控制。这还得感谢 Bradley…"}, {"id": "6866306616040357901", "title": "为什么实现NodeJS沙箱很难？", "desc": "我今年为Nullcon HackIM CTF撰写BabyJS的挑战，其想法不是使用如sqli、lfi、rce等常见漏洞类，而是选择一些新颖、有趣的东西。过去在CTF中，有很多关于pathon-jail/python-sandbox的挑战，所以我们想为什么不尝试NodeJs沙箱呢…"}, {"id": "6941362106650329096", "title": "                                                                       初识Node.js", "desc": "了解一门技术前，首先要了解一下它的背景，这里我摘取了node.js中文官网的一段话。 简单的概况一下上面的话就是：可以让前端开发人员使用javascript来开发服务器端的应用，这让之前只能发开前端页面的javascript，触及到了web应用领域。之后基于node.js的工具…"}, {"id": "6844903568118398989", "title": "搭建Node.js应用部署平台（一）—— 综述", "desc": "当我们想要写一个 Node.js 应用时，需要解决很多编写代码之外的事情（机器、环境、部署、etc），这很大程度上提高了编写应用的成本。Node Labs 平台将提供应用创建、运行环境、部署、监控等功能，让创建 Node.js 应用变得更加简单。 我们前期的目标是针对内部使用的…"}, {"id": "6844903645394272270", "title": "Webpack 黑魔法之 CSS Entry", "desc": "大家都知道 webpack 的 Entry 都是 js，如果想输出 css 文件只能在 js 文件里导入 css，所以很多人都会想要是 entry 也可以是 css 那多好，这样就可以任意输出 css 。那么问题来了：怎么让 webpack 支持 css 作为 entry 呢？"}, {"id": "6959141249471217694", "title": "Node.js 入门：就是运行在服务端的 JavaScript", "desc": "Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。 Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Java"}, {"id": "6844903676922822663", "title": "NodeJS 模块化的简易实现（commonJS）", "desc": "CommonJS 是一种模块化的标准，而 NodeJS 是这种标准的实现，每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。 得到对应文件的内容，加一个闭包，把内容塞进去，之后执行即可。 因为我们只是实现 CommonJS …"}, {"id": "6899027528019607560", "title": "node浅入浅出之断言", "desc": "throws方法用于执行一个函数中的代码并判断该函数中是否会抛出一个异常，如果判断结果为真（函数中抛出异常），则不抛出AssertionError异常，如果判断为假（函数中不抛出异常），则抛出AssertionError异常。 doesNotThrow方法用于执行一个函数中的代…"}, {"id": "6844903559352303629", "title": "Node Stream 入门与深入", "desc": "Stream 是Node.js中最重要的组件和模式之一，之前在社区中看到这样一句格言“Stream all the things(流是一切)”。 具体的来说流是一组有序的，有起点和终点的字节数据传输手段，它是一个抽象的接口。 流是数据的集合 —— 就像数组或字符串一样。区别在于…"}, {"id": "6844904019484246029", "title": "打算写一个《重学Node.js》系列，希望大家多多支持", "desc": "先放上链接吧，项目已经开始2周了：https://github.com/hellozhangran/happy-egg-server目录目前项目进度已经可以涵盖前5篇的内容了，文档部分可能会延后【重学"}, {"id": "6844903750616743944", "title": "一个 npm 包的坎坷“续命”之生", "desc": "memwatch 几经易主，传奇的一生"}, {"id": "6844903953029677064", "title": "详解cookie、session、webStorage", "desc": "（2）. 获取localStorage中的值 （4）. localStorage.clear : 清空所有的key和value; （2）. 获取sessionStorage中的值 （1）cookie机制：如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器…"}, {"id": "6844903591547764743", "title": "async/await", "desc": "async和await作为ES7新的API,解决了异步编程过程中的很多问题，在Node.js V7也添加了对这两个API的支持。 await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。 单一的 Promise 链并不能发现 async/await 的优势，…"}, {"id": "6844903555703259149", "title": "极简易node服务器", "desc": "本地使用引入less.min.js文件来进行调试时，也依赖服务器环境，不要吐槽为什么不用less-loader...... 只需要放置一个静态页面的简单服务器。 etc. 以往使用的是类似基于appche的xammp工具，但xammp有些笨重(200M+)，于是选择用nodej…"}, {"id": "6919037855642288141", "title": "express 超级简单的mock数据", "desc": "3. mock/index.js 引入全部模块并导出"}, {"id": "6844903502351712263", "title": "美团点评酒旅前端的技术体系", "desc": "随着科技的发展，终端种类越来越丰富，前端作为连接用户终端与后端服务、提供视觉体验的关键环节，发展迅速。相比十年前，前端的边界和范围变得更加广泛，甚至有点模糊，一名优秀的前端工程师不仅需要精通自己的专业领域，了解设备终端的特点、OS、运行环境，同时还需要具备良好的审美和对用户体验…"}, {"id": "6844903710712135694", "title": "node.js爬虫中关村在线电瓶车信息", "desc": "最近打算买一辆电瓶车来上下班，但又不知道哪个好，网上是各说纷纭啊，于是就想着，干脆用node.js自己写一个小爬虫，来爬一下中关村在线里面电瓶车的信息吧。 （以后完整代码请前往 www.yubowen2003.com 暂时还在建设中，欢迎大家提issue😂 。）"}, {"id": "6844904194533490695", "title": "Postman是如何构建一个安全可靠的BFF", "desc": "本文介绍Postman公司是如何构建安全可靠的BFF，可以作为参考来逐步完善的BFF安全建设。 主要是学习如何全局安全建设，具体实现的方式与工具可以选择适合项目情况的。 下图反应了BFF在一个完整数据流扮演的角色，涵盖从流入到流出中各个阶段关键点。 关键路径指在请求到达业务逻辑…"}, {"id": "6844903537030201351", "title": "Webpack实战-构建同构应用", "desc": "同构应用是指写一份代码但可同时在浏览器和服务器中运行的应用。 搜索引擎无法收录你的网页，因为展示出的数据都是在浏览器端异步渲染出来的，大部分爬虫无法获取到这些数据。 对于复杂的单页应用，渲染过程计算量大，对低端移动设备来说可能会有性能问题，用户能明显感知到首屏的渲染延迟。 为了…"}, {"id": "6844903788990431245", "title": "Nodejs教程12：path（路径）模块", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 path模块主要用来对文件路径进行处理，比如提取路径、后缀，拼接路径等。 值得一提的是path.resolve方法，它可以接收任意个参数，然后根据每个路径参数之间的关系，将路径最终解析为一个绝对路径。 __dir…"}, {"id": "6844903663371026439", "title": "关于node中的流，只想说让上天知道我不认输！", "desc": "我们先来介绍介绍今天的主角，流。 那么流到底是什么呢，我们先来通过fs中的creatReadStream和createWriteStream来了解一下。 我们通过名字就能知道这个方法是一个继承了可读流的方法，这个方法和我们的fs.read其实作用一样都是用来读取文件的，它的底层…"}, {"id": "6844903983631482887", "title": "Node单机集群实现", "desc": "文章开头，先给大家抛出一个问题。 用过 Node 的人都知道，Node 采用的是类似 Nginx 单进程、异步IO 的运行模型，这也是 Node 性能强劲的根源。我们可能也经常听人说 js 的执行是单进程、单线程的，那么，如果换个说法，若说 Node 是单进程、单线程 的，是对…"}, {"id": "6850418113779859464", "title": "从源码解读 Node 服务原理", "desc": "很多同学或多或少都使用过 Node 创建 HTTP Server 处理 HTTP 请求，可能是简易的博客，或者已经是负载千万级请求的大型服务。但是我们可能并没有深入了解过 Node 创建 HTTP Server 的过程，希望借这篇文章，让大家对 Node 更加了解。 这个过程是…"}, {"id": "6844903586403024904", "title": "基于 HTML5 Canvas 实现的文字动画特效", "desc": "文字是网页中最基本的元素，一般我们在网页上都是展示的静态文字，但是就效果来说，还是比较枯燥的。文字淡入淡出的动画效果在项目中非常实用，如果有某些关键的文字，可以通过这种动态的效果来提醒用户阅读。 这个 Demo 是不断重复地设置文字的大小和透明度，这些英文字母也是我自己利用 H…"}, {"id": "6844903567388573703", "title": "Accept-Language与多语言网站应用", "desc": "其中多种语言之间用,隔开，而每种语言又可用;分隔，分隔的前面为该种语言的简称，后面为其权重（优先级）。 一般支持多语言的网站，其服务器都存储了多种语言包。当客户端向其请求时，服务器会查看请求头看一看客户端所愿意支持的语言，然后在自己的语言包中进行查找。客户端给的接收清单中包含每…"}, {"id": "6844903736976867335", "title": "【译】Node.js中的Event Loop", "desc": "为了了解Node，Event Loop(后面我会翻译成“事件循环”)是其中最重要的方面。 为什么它如此重要？因为它表明了Node是怎样做到异步并且拥有非堵塞的I/O操作，当然也是使得Node的“杀手级”应用得以成功的重要原因。 Node.js的代码在单线程上运行。也就是每一个时…"}, {"id": "6844903680135692302", "title": "自己写一个Babel插件", "desc": "之前看到一位大佬的博客, 介绍了babel的原理, 以及如何写一个babel的插件, 抱着试试看的想法, 照葫芦画瓢的自己写了一个简单的babel插件, 该插件的作用就是将代码字符串中的表达式, 直接转换为对应的计算结果。例如: const code = const resul…"}, {"id": "6844903929071796238", "title": "网络模型--OSI & TCP/IP", "desc": "在正式介绍TCP协议之前，我们先来介绍一下网络的分层模型。现在主流的模型有两种： 一种是ISO（international standard orgnization国际标准组织）提出的OSI 模型（open system interconnect开放式系统互联）。 另一种就是T…"}, {"id": "6844903622006800392", "title": "JS实现异步timeout", "desc": "这样我们就能实现10次，每次1秒的定时设定了，是不是很简单。"}, {"id": "6844903942816546823", "title": "用 Mongoose 插件记录Node.js API 日志", "desc": "随着程序的增长，日志记录成为跟踪所有内容的关键部分。它对于调试目的尤为重要。 现在已经有了 npm 的日志记录模块。这些模块可以将日志存储在不同格式或级别的文件中。我们将使用流行的ORM Mongoose 讨论 Node.js Express 程序中的 API 日志记录。 在 …"}, {"id": "6844904036957683720", "title": "【进阶全栈-02】：Koa源码分析（中间件执行机制、Koa2与Koa1比较）", "desc": "Koa是由Express原班人马打造，但是相较于Express的大而全，Koa是小而精的。Koa没有绑定很多的框架以及插件，更容易让我们进行扩展，包括现在较为流行的EggJS and ThinkJS都是基于Koa开发的。 Koa避免了Express中间件基于callback形式…"}, {"id": "6844903508529905677", "title": "认识node核心模块--深入EventEmitter", "desc": "node 采用了事件驱动机制，而EventEmitter 就是node实现事件驱动的基础。在EventEmitter的基础上，node 几乎所有的模块都继承了这个类，以实现异步事件驱动架构。继承了EventEmitter的模块，拥有了自己的事件，可以绑定／触发监听器，实现了异步…"}, {"id": "6844903869416226824", "title": "RDE - 一种基于Docker的前端生态集成解决方案", "desc": "    RDE诞生的背景是，我们发现前端工程目前存在以下问题：工程的开发与维护都是以工程为单位进行管理，每个工程都在重复开发基础设施脚手架都只负责初始化工程，只能保持在创建时一致，后续维护靠业务开发者"}, {"id": "6844903567854141448", "title": "每个 node 应用可能存在的 timing-attack 安全漏洞", "desc": "假如你在项目中遇到过 eslint 报错 Potential timing attack ，不可忽视！这是一个涉及到安全的问题：时序攻击。 首先eslint引入了一个叫做eslint-plugin-security的插件，这个插件有助于识别出潜在的安全问题，但同时也会产生误报的…"}, {"id": "6844903958914269192", "title": "gitbook 入门教程之从零到壹发布自己的插件", "desc": "遗憾的是,目前 Gitbook 已经停止了旧版服务,gitbook-cli 脚手架甚至也早已停止了维护,但是我心依旧钟爱于轻量级的脚手架,不抛弃不放弃,所以花费了一定心血整理出相关的资料文档. 现在问题很清楚了,那就是需要开发一款 Gitbook 插件帮助文章自动添加版权保护信…"}, {"id": "6844903501533806599", "title": "ES6 Promise：模式与反模式", "desc": "这是一篇有用的关于常见 Promise 模式和反模式的概述"}, {"id": "6844903556428857352", "title": "如何让你代码更酷炫——异步改造篇", "desc": "一场大雪，整个杭城银装素裹，外面太冷就待在家里写点东西吧。这次就来简单谈谈Node.js中异步编程的几种写法。 在我们工作中异步变成应该是非常常见的，请求接口，定时器，读取文件等等。本篇文章主要通过一个读取文件的例子简单介绍一下Node.js应用中如何从 CallBack方式 …"}, {"id": "6844903509385543687", "title": "antd源码解读（8.2）- 番外篇 Trigger 之 index.js 完整篇", "desc": "这个组件的index文件就有很多代码，590行代码，而且在头部引入的额外文件特别的多，所以我们这一个组件就先从这些额外的组件中开始吧，先看看这些外部方法能够做些什么。 Creates a portal. Portals provide a way to render child…"}, {"id": "6921978173726916616", "title": "node学习之理解流（stream）", "desc": "一：nodeJS中的stream(流)的概念及作用？        什么是流呢？日常生活中有水流，我们很容易想得到的就是水龙头，那么水龙头流出的水是有序且有方向的(从高处往低处流)。我们在nodejs"}, {"id": "6844904200007057421", "title": "node服务开发实战---猜数字游戏-express版本", "desc": "nodemon index ：nodemon上篇已经全局安装了，所以这次可以直接使用了。 对比与原生node模块，这部分只是调用方法不太一样，接下来看看express对路由对处理方式有啥不一样。 express为开发者提供了一个十分好用的路由分发的机制，我们不用再自己去提取路由…"}, {"id": "6844903558060441614", "title": "模拟实现和深入理解Node Stream内部机制", "desc": "在调用完_read()后，read(n)会试着从缓存中取数据。 如果_read()是异步调用push方法的，则此时缓存中的数据量不会增多，容易出现数据量不够的现象。 如果read(n)的返回值为null，说明这次未能从缓存中取出所需量的数据。此时，消耗方需要等待新的数据到达后再…"}, {"id": "6844903926299361287", "title": "服务端预渲染在可视化搭建业务的实践", "desc": "最近在做可视化搭建的业务，为了追求页面的极致渲染，对比了SSR等服务端渲染方案之后，决定用比较轻量的预渲染来加速页面渲染速度，期间碰到的一些坑记录下。 关于 CSR / SSR / 同构 / 预渲染 这几种渲染方式都有各自的优缺点，在我做的可视化搭建业务里面，SSR太“重”不适…"}, {"id": "6844903926064496653", "title": "工具类-将线上资源批量替换为本地资源", "desc": "注意2，注意标红的问号，是正则的停止匹配的贪婪模式。如果不加的话，会一直匹配到下一个符合正则的url。 1. 同一级下，命名为相同名字的目录和文件名，并不会相互覆盖，在建立好目录后，都会追加到相应的目录里（Ep:demo目录和demo.html） 2. 脚本应放在要匹配目录的外…"}, {"id": "6844903697458135047", "title": "饿了么技术沙龙 | 前端开放日", "desc": "饿了么技术沙龙第33弹前端开放日将于10月28日在北京大学第二教学楼519教室举行"}, {"id": "6879280699183923208", "title": "Node.js必知必会学习笔记(第一章)", "desc": "通常，我们把发送请求（需求）的一方称为：客户端。接收请求（提供服务）的一方成为：服务端。 语言是不分前后端的，取决于使用的场景和工作场景。 node.js与JavaScript在于你将文件放在哪里(客户端还是服务端)执行。 同一局域网之下，如果两台电脑想要构建出客户端和服务器端…"}, {"id": "6844903630051475463", "title": "嘘🤫！不同环境下宏、微任务的秘密～", "desc": "先理解一下task（宏任务又称macrotask）和microtask（微任务）。 如图（画了好久。。） 我们来调试（by vsCode）一下，在setTimeout和promise上打上共6个断点。 造成timeout1和promise2的原因是无法比较then的回调和tim…"}, {"id": "6844903735647289357", "title": "【重写 CryptoJS】一、ECMAScript 类与继承", "desc": "无论是前端还是后端，信息的加解密、摘要校验是常常碰到的需求，开发中一旦涉及到敏感数据，什么 MD5 、 Base64 、 AES 算法基本上都是要来上一套的。 在 JavaScript 的各种加密算法工具库中， CryptoJS 以其全面的功能、良好的通用性，一直是首选。它诞生…"}, {"id": "6844903520357859342", "title": "用不到20行代码写一个freestyle外挂后台", "desc": "介绍下freestyle外挂：这是一个根据韵脚，以词搜词的软件。"}, {"id": "6844903605284274189", "title": "深入浅出node读书笔记", "desc": "目标：写一个基于事件驱动 ，非阻塞i/o 的web服务器，以达到更高的性能。构建快速，可伸缩的网络应用平台 web 2.0 : 提升了网页的用户体验，bs应用展现出了比cs(需要装客户端)应用优越的地方。h5崭露头角 已被编译进了二进制执行文件，node启动时就被加载进内存，所…"}, {"id": "6905545330914230285", "title": "child_process 在mac上的输出截断问题", "desc": "因为业务的选项，最近要在代码中使用child_process 进行一些计算 并通过stdout的形式返回一些计算结果。"}, {"id": "6844903506072043528", "title": "Fly.js 是一个基于 promise 的，轻量且强大的Javascript http 网络库", "desc": "浏览器支持✔✔✔✔✔>8简介Fly.js是一个基于promise的，轻量且强大的Javascripthttp网络库，它有如下特点：提供统一的PromiseAPI。支持浏览器环境，轻量且非常轻量。支持N"}, {"id": "6982152884013563940", "title": "Node中文件断点续传原理和方法总结", "desc": "目录 原理介绍 方法总结 实战演练 原理介绍 这里先介绍一下文件上传的原理，帮助理清这个头绪。 普通上传 一般网站上都是普通上传的比较多，大多数都是上传一些用户的头像，用户的动态评论附带图片什么的，所"}, {"id": "6885118377321463816", "title": "简单又灵活的权限设计？", "desc": "蛋先生：[]~(￣▽￣)~* 略懂略懂~！已有项目，那就是不能“随心所欲”咯。说吧，关于已有项目DB的相关信息 丹尼尔：数据库是用MySQL，连接数据库用的是Sequelize， 一个ORM的Node.js库。 丹尼尔：可以啊蛋兄，自动生成SQL，自动生成 Model。好久不见…"}, {"id": "6989887845406081032", "title": "使用node-canvas转换文字为图片", "desc": "功能描述 需要前端绘制图片+文字导出; 文字可编辑,字体只有ttf; 可以导出图片存储到oss; 简版需求 先不考虑字体,实现起来很简单,load图片绘制到canvas中,回调中把文字绘制进去; 文字"}, {"id": "6982773631927468046", "title": "tinyPNG（小熊猫） + nodejs 实现批量压缩并保存至对应文件夹下", "desc": "作为一个前端抠图仔，我经常会进行一些图片压缩，常用的就是 tinyPng了。然而网页端的一次只支持上传压缩 20 张图片，操作起来比较繁琐，压缩完保存也"}, {"id": "6844903669922529287", "title": "VueSSR高阶指南", "desc": "我们都知道，对于node来说，前端vue代码的迭代节奏是很快的，可能一周要迭代几次，但是node的迭代却没那么平凡，可能一周更新一次甚至更久，那么为了node服务的稳定，减少node服务的发布次数，是非常有用的。 为了前后端分离，我们在前端和api层中间，架构了一层node层，…"}, {"id": "6969179684797939720", "title": "回顾Node服务器端开发", "desc": "一、Node开发概述 1.为什么要学习服务器端开发基础 随着近年来互联网的发展，全栈工程师的概念开始兴起，所谓全栈。即包括用户界面，业务逻辑、数据建模、服务器、网络及环境等。这就意味着，全栈工程师要输"}, {"id": "6844903895680942087", "title": "阿里开源框架 Egg.js 入门与实战", "desc": "一. Eggjs是什么？ Eggjs是一个基于Koajs的框架，所以它应当属于框架之上的框架，它继承了Koajs的高性能优点，同时又加入了一些约束与开发规范，来规避Koajs框架本身的开发自由度太高的问题。 Koajs是一个nodejs中比较基层的框架，它本身没有太多约束与规范…"}, {"id": "6976868906937876517", "title": "Node.js 知识体系(二)-全局对象浅析", "desc": "所谓全局对象，就是可以直接访问的对象，比如 浏览器中的的全局对象就是window Node 中的全局对象就是global 下面让我们看看 Node 的全局对象具体有哪些？ 这些对象又有什么用？ 如何获"}, {"id": "6934126379718049805", "title": "node实现图片压缩并上传到七牛", "desc": "1. 项目初始化 2. 确定图片压缩接口的请求参数，定义辅助方法 是不是很简单呢，这里因为qiniuConf接受的是一个json字符串，所以在设置默认配置时，统一转成字符串。 其中filePath是我们上传图片后，通过multer处理后保存在original目录下的原图，通过方…"}, {"id": "6844903654244220936", "title": "真▪一行代码完成从前端代码build到部署线上", "desc": "在经历了6,7个项目同时开工，频繁发布测试 ，不得不学会一点偷懒的小技巧来提高效率了，所以这篇文章要讲的就是如何更加优化发布流程。 工作以来，经历了build后，然后用FileZilla上传服务器完成部署。再到前端打包后 ，在build仓库执行git push,后端在自动部署。…"}, {"id": "6844903890375163911", "title": "教你怎么实现缩短网址功能", "desc": "文章阅读大概需要8分钟。 短链接，通俗来说，就是将长的URL网址，通过程序计算等方式，转换为简短的网址字符串。 大家经常可以从微博或者各类营销短信中，看到短链接，形式一般类似于 t.cn/xxxxxx，点击后，就能跳转到对应的页面。 早期短链接广泛应用于图片上传网站，通过缩短网…"}, {"id": "6844903634786844679", "title": "Node.js + Express 认证微信公众号", "desc": "之前看过一些node做微信公众号认证的教程，自己也想用node把微信和小程序的开发内容学习一下，包括登录机制等，以后就不用总依赖后端的小伙伴帮忙了，期望可以自己完成全栈的开发。 结果却刚刚完成第一步的域名认证，记录了一下过程，共同学习。 1. 云服务器购买 这一步拖了好长时间，…"}, {"id": "6999167187894140958", "title": "node.js简单介绍及使用", "desc": "本文整理了node.js的概述及简单使用，node.js概述。 Node.js 不是一门编程语言，它是一个执行JavaScript 代码的运行环境"}, {"id": "6844904142733836302", "title": "Node CLI 工具的插件方案探索", "desc": "CLI 工具作为开发者们亲密无间的好伙伴，996 风雨无阻地陪伴着我们进行日常的开发工作。身为前端开发，你一定也亲自开发过一套属于你自己的 CLI 小工具！如果没有，本文也不会教~ 在接下来的五分钟里，我们来聊聊 Node CLI 工具的进阶设计，探索一下在 CLI 端需求复杂…"}, {"id": "6907428111332147208", "title": "2020年我们可以在Node中使用ES Modules了吗", "desc": "不同时期的的 JS 发展，诞生了不同的模块化机制；近些年，随着前端模块化的标准落地，不同端的 JS 对此也都做了各自的实现。今天我们就来聊聊这个话题。 Node verison 13.2.0 起开始正式支持 ES Modules 特性。 根据 ESM 规范，使用 import …"}, {"id": "6844903545276203022", "title": "GraphQL 搭配 Koa 最佳入门实践", "desc": "GraphQL一种用为你 API 而生的查询语言，2018已经到来，PWA还没有大量投入生产应用之中就已经火起来了，GraphQL的应用或许也不会太远了。前端的发展的最大一个特点就是变化快，有时候应对各种需求场景的变化，不得不去对接口开发很多版本或者修改。各种业务依赖强大的基础…"}, {"id": "6985142048357777416", "title": "Node.js 系列 -- 文件的读写（文件格式转换）", "desc": "前言 通常情况下我们 老板 / 客户 想要的数据是以直观的 Excel 格式展示出来，但我们前端或者后端的数据都是 JSON 格式的，那么就需要进行 JSON -> Excel 的文件格式转换；如果我"}, {"id": "6844904086949593101", "title": "面试官问：Node 与底层之间如何执行异步 I/O 调用", "desc": "核心模块(native模块)：包含在 Node.js 源码中，被编译进 Node.js 可执行二进制文件 JavaScript 模块，其实也就是lib和deps目录下的js文件，比如常用的http,fs等等。 内建模块(built-in模块)：一般我们不直接调用，而是在 nat…"}, {"id": "6844903841293418503", "title": "使用 Node.js 写一个代码生成器", "desc": "第一次接触代码生成器用的是动软代码生成器，数据库设计好之后，一键生成后端 curd代码。之后也用过 CodeSmith , T4。目前市面上也有很多优秀的代码生成器，而且大部分都提供可视化界面操作。 自己写一个的原因是因为要集成到自己写的一个小工具中，而且使用 Node.js …"}, {"id": "6953782239796658189", "title": "Node 模块机制不完全指北", "desc": "引言 Node 中采用了 CommonJs 规范，通过 module.exports 和 require 来导出导入模块。在模块加载机制中，Node 采用延迟加载的策略，只有到使用到时，才会去加载，加"}, {"id": "6908367114315235341", "title": "Node模块之path,url,os模块", "desc": "relative方法：方法接受两个参数，这两个参数都应该是绝对路径。该方法返回第二个路径相对于第一个路径的那个相对路径。 2. url模块 url模块用于生成和解析URL。该模块使用前，必须加载。 url 模块提供了两套 API 来处理 URL：一个是旧版本遗留的 API，一个…"}, {"id": "6844903748410720269", "title": "问答方式学 Node.js", "desc": "A：Node.js 是指运于 web 服务端的 JavaScript，基于 Chrome V8 引擎，有非阻塞，事件驱动 I/O 等特性。 A：JavaScript 引擎是执行 JavaScript 代码的程序或解释器，JavaScript 引擎可以实现为标准解释器，或者以某种…"}, {"id": "6844904181384347656", "title": "Deno 初体验，实战记录一个node项目迁移到Deno需要做什么", "desc": "文档中有很多方式，我们按需选择即可。这里我直接选择mac的脚本安装形式。执行一个脚本然后按照提示设置环境变量即可 vscode商店直接搜索安装即可。地址 我这里遇到了一个问题：安装好这个插件后，vscode还是会出现找不到Deno的报错（issue不少人也遇到了这个问题，如果无…"}, {"id": "6844904149255979021", "title": "关于Node.js中内存管理的思考与实践", "desc": "随着Node的发展，JavaScript的运行已经不再局限于运行在浏览器中了，Node在服务端的应用使得越来越多的问题也显现出来。对于刚接触JavaScript的开发者来说，基本上很少会想到内存分配或者内存泄露的问题，为了跟上潮流，就讲解一下Node是如何合理高效地使用内存，防…"}, {"id": "6844903894099689485", "title": "文件 package.json 的说明文档", "desc": "文档复制 yarnpkg 官方文档，并不是完全复制，增加了一些内容和一些描述，作为笔记存储。你也可以参考 npm documentation, std-pkg, clean-publish, package-json-validator, cosmiconfig, rc。 你的…"}, {"id": "6994767058579914760", "title": "Node中的模块", "desc": "在Node中，每个文件都是具有私有名称空间的独立模块。在一个文件中定义的常量、变量、函数和类都是该文件私有的，除非文件导出它们。一个模块导出的值只有在另一个模块显式导入时才在该模块中可见。"}, {"id": "6844903862977953806", "title": "package.json 中的 browser，module，main 字段优先级探索", "desc": "前端开发中使用到 npm 包那可算是家常便饭，而使用到 npm 包总免不了接触到 package.json 包配置文件。 老司机们很快地给出答案：main 字段中指定的文件。 浏览器/服务端都可以使用。 如果我们需要开发一个 npm 包同时兼容支持 web端 和 server …"}, {"id": "6844904023707877389", "title": "node 使用「request」 请求", "desc": "近期使用node做服务端渲染，作为中间层需要请求后端接口，需要封装服务端的请求，接下来来了解下如何使用 request。 引入这个包就可以开始使用了，最简单的使用方式就是 request(url) 就可以想指定的地址发起一个 get 请求。 从这里我们可以看出 request …"}, {"id": "6844903507632341006", "title": "趁着双11，写个京东商品自动下单", "desc": "京东有代下单服务，但是会有限制，遇到些商品无法使用代下单，只能收到到货提醒，所以想实现个自动下单功能，以免剁手不成，悔恨不已"}, {"id": "6844903587869360136", "title": "学习Koa", "desc": "就这样简单几行代码，就搭建了一个简单的服务器，服务器以回调函数的形式处理HTTP请求。上面这段代码还有一种更加清晰的等价形式，代码如下： 首先创建了一个HttpServer的实例，对该实例进行request事件监听，server在3000端口进行监听。HttpServer继承与…"}, {"id": "6948689967468003364", "title": "node.js使用express自动搭建项目", "desc": "node.js使用express自动搭建项目，并实现热更新，nodejs跨域问题和请求返回值的实现."}, {"id": "6845166891867045896", "title": "electron调用DLL库发送windows消息", "desc": "electron使用node-ffi调用windows系统DLL库(user32.dll)中的SendMessageW方法实现发送windows消息至windows窗口。 FFI（Foreign Function Interface）是一种跨语言调用方案，简言之就是我Java写…"}, {"id": "6985379855672016910", "title": "base64编码原理", "desc": "Base64是一种基于64个可打印字符来表示二进制数据的表示方法，可用于任意数据的底层二进制数据编码，以应用于只能传输ASCII字符的场合。不过最常用于文本数据的处理传输。"}, {"id": "6990301612514869261", "title": "nodeJs博客建站学习笔记一  ------使用mySql建表与查询", "desc": "column    列名 datatye    类型及限制 pk            主键 nn            表示不能为空 ai             自动增加，如id default "}, {"id": "6844903505811996679", "title": "使用 Electron 开发优秀的桌面客户端产品", "desc": "标题是我以第一视角基于 Electron 开发客户端产品的体验，我将在之后分一系列文章向有兴趣的朋友一步一步介绍我是怎么从玩玩具的心态开始接触 Electron 到去开发客户端产品，最后随着业务和功能的复杂度提升再不断地优化客户端。"}, {"id": "6844903716361863182", "title": "消息未读之点不完的小红点（Node+Websocket）", "desc": "这个项目本来是我学生时代为了找工作的一个练手项目，但是没想到受到了很多的关注，star也快要破K了，这也激励着我不断去完善他，一方面是得对得起关注学习的人，另一方面也是想让自己能过通过慢慢完善一个项目来让自己提高。 下面我通过自己思考的方式来进行讲解，代码可能讲的不多，但是核心…"}, {"id": "6844904008822308878", "title": "写一个N-API没那么难？", "desc": "诚如从暴力到 NAN 再到 NAPI——Node.js 原生模块开发方式变迁一文所提到的NAN和NAPI的历史，NAN为了搞定”封建时代“混乱的C++原生模块，不再让一个模块只能被若干个nodejs版本使用，而提出使用宏定义来解决这个问题，所以说NAN是一大堆宏定义，兼容各种n…"}, {"id": "6844903497851207688", "title": "前端必须要懂的浏览器缓存机制", "desc": "本文详细讲解了浏览器端缓存的分类：200 from cache和304 not modified；介绍max-age和 Expires的区别；介绍了 Etag、If-None-Match; Last-Modified、If-Modified-Since的区别。"}, {"id": "6844903913519316999", "title": "Serverless 掀起新的前端技术变革", "desc": "Serverless 趋势所向"}, {"id": "6844903695981740045", "title": "踩坑日记-element ui树形控件", "desc": "最近在做一个管理系统，页面左侧需要一个目录树，便于文件的操作，不想从头开始造轮子，于是就考虑采用iview或者element的tree，调研后发现iview的tree还是有点局限，没有拖拽移动功能，没有懒加载子目录的功能等等，而element则比较符合我们的需求，虽然坑也是有点…"}, {"id": "6844903502045511688", "title": "【翻译】React v16.0 官方博客升级指引", "desc": "我们非常激动地宣布 React v16.0 发布了！这些变更包含了一些存在已久的特性，包括碎片（fragments），错误边界，portals，支持自定义 DOM 属性，提升[服务端渲染]以及减小库的大小。"}, {"id": "6942301820131737614", "title": "Node.js核心入门", "desc": "因为以前学习Node.js并没有真正意义上的去学习它，而是粗略的学习了npm的常用命令和Node.js一些模块化的语法，因此昨天花了一天的时间看了《Node.js开发指南》一书。通过这本书倒是让我对Node.js的认识更为全面，但由于这本书出版时间过早，有些API已经发生了变化…"}, {"id": "6844903781230968845", "title": "[原] 探索 EventEmitter 在 Node.js 中的实现", "desc": "实际上这一切都是 EventEmitter 在背后做支持，它是 JavaScript 经典的事件驱动实现，现在我们来看下 Node.js 中是如何实现的。 _events：用来存储监听事件，可以是一个事件或事件数组。 _eventsCount：记录已注册的监听事件个数。 1. …"}, {"id": "6905027837992894471", "title": "手写一个仿微信登录的nodejs程序", "desc": "登录网页后台收到access_token后即可进行参数分析获得用户账号数据。 了解了大致原理之后，我们就开始简单实现这个逻辑。因为没有直接调用微信开发平台，所以这里只是演示效果。你也可以通过访问https://www.maomin.club/qrcodelogin/这个我的线上…"}, {"id": "6844903508462813197", "title": "教你如何搭建一个自动化构建的博客", "desc": "记得在1年之前搭建了一个个人主页的博客，但是当时功力尚浅，每次写博客，都是自己手动写html，这样会变得非常的繁琐，现在很多人用主流的wordpress，hexo之类的快速搭建一个平台，那些工具确实方便，但是对于主题以及一些额外的排版，就显得非常的麻烦，本文致力于教你如何搭建一…"}, {"id": "6844903640444960776", "title": "Koa2.0源码解析-中间件的设计", "desc": "createServer是connect的入口方法，它返回一个处理请求的方法，内部再调用handle来处理这些注册的中间件，也就是中间件的处理流程。 connect并没有采用构造函数的方式，而将需要用到的属性方法拷贝到app对象上使用，而对于Koa2.x中则是采用ES6的cla…"}, {"id": "6844903589555470350", "title": "node那点事(二) -- Writable streams（可写流）、自定义流", "desc": "可写流是对数据写入'目的地'的一种抽象。 接着我们实现write方法来让可写流对象调用，在write方法中我们首先将数据转化为buffer，接着实现一些事件的触发条件的逻辑，如果现在没有正在写入的话我们就要真正的进行写入操作了，这里我们实现一个_write方法来实现写入操作，否…"}, {"id": "6844904176829349902", "title": "准备了两年的  Semo，今天正式跟大家见面", "desc": "每隔一段时间都能看见新的讨论命令行工具的文章，大家都在探索怎么用 Node 开发一个命令行工具，并热情的分享 npm 社区若干优秀的和命令行开发有关的 npm 包。从学习的角度当然也不错，但我一直觉得怎么开发命令行工具不是最重要的，而是开发具体有用的命令行工具才是最重要的。 我…"}, {"id": "6844903709801971725", "title": "Electron 3 稳定版正式发布", "desc": "Electron 团队最近发布了Electron 3。最新版本包括很多增强和改进，支持读取海量文件，更好的应用程序管理 API 以及日志和性能测量功能。"}, {"id": "6844903577022889992", "title": "以太坊 DApp 开发入门，如何搭建一个区块链投票系统。", "desc": "对于初学者，需要了解以太坊开发相关的基本概念，另外就是如何构建一个基于以太坊的完整去中心化应用例如一个区块链投票系统。 一种面向对象的开发语言，例如：Python，Ruby，Java... 我们将会构建一个去中心化的（Decentralized）投票应用。利用这个投票应用， 用…"}, {"id": "6844903507615547406", "title": "使用Await减少回调嵌套", "desc": "Promise提供了一个resolve，方便通知什么时候异步结束了，不过本质还是一样的，还是使用回调，只是这个回调放在了then里面。 ES7的await/async可以让异步回调的写法跟写同步代码一样。第一个嵌套回调的例子可以用await改成下面的代码： Await让代码可以…"}, {"id": "6844903617976074248", "title": "import、require、export、module.exports 混合使用详解", "desc": "AD：百G视频免费分享前言自从使用了es6的模块系统后，各种地方愉快地使用importexportdefault，但也会在老项目中看到使用commonjs规范的requiremodule.export"}, {"id": "6844904074450583560", "title": "Redis 分布式锁 解决集群环境下多次定时任务执行", "desc": "如果key有值， SET 就覆写旧值，无视类型。 对于某个原本带有生存时间（TTL）的键来说， 当SET命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。 EX second：设置键的过期时间为second秒。SET key value EX second 效果等同 …"}, {"id": "6949389330573950983", "title": "nodejs-多进程", "desc": "为啥需要多进程nodejs中的多进程使用依赖cluster模块cluster（集群）cluster依赖child_process.fork实现，理解成自动的多次运行我们的脚本所以，同一份代码文件中，我"}, {"id": "6982573150240407560", "title": "Node.js 与 HBase 通信", "desc": "Node.js 与 HBase 通信 最近在搞数据检索平台，其中一环用到了 HBase。与其他常见的数据库不同，当你安装了数据库，下载了Node.js 包，你会发现几乎所有的包都不可用。"}, {"id": "6844904100170039304", "title": "千万级PV下的nodeJS运维方案（抛砖引玉版）", "desc": "我们将整个运维方案分为了6步，我们的目的：流量透明化 与 操作透明化。 为了解决微服务引起分布式流量链路问题，我们借鉴了spring cloud的思想。设计了traceid 和 tracecode两个跟踪字段，用于追踪落地容器的整个流量链路中的节点信息，通过每个请求的Respo…"}, {"id": "6844903637693497358", "title": "我的 Mock Server - Meow Mock", "desc": "业余时间基于 Node.js 搭建了 Mock Server 一枚，自娱自乐的产物。功能较简易，非常非常非常小白级，但可满足绝大多需求。 便于自测：创建虚拟对象代替具备不确定性或不易构造的真实对象。 避免等待：前端与服务端的开发进度往往不同步。前端可使用 Mock Server…"}, {"id": "6844903998659493902", "title": "Node 绑定全局 TraceID", "desc": "由于Node.js的单线程模型的限制，我们无法设置全局 traceid 来聚合请求，即实现输出日志与请求的绑定。如果不实现日志和请求的绑定，我们难以判断日志输出与对应用户请求的对应关系，这对线上问题排查带来了困难。 例如，在用户访问 retrieveOne API 时，其会调用…"}, {"id": "6844903701442723854", "title": "Node.js 系列 - 搭建 \"Hello World\" HTTP 服务器", "desc": "作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！ 在这一节, 我会先介绍 \"客户端\" 和 \"服务器\" 的概念. 然后我会简单介绍一下 \"HT…"}, {"id": "6897854905785319437", "title": "如何使用 nodejs 实现命令行游戏", "desc": "本文以贪吃蛇为例, 一步一步地分析如何实现一个命令行游戏. 小蛇每吃到一个鸟蛋, 身体会长一节, 并在画面中随机生成另一个鸟蛋. 到了这一步其实就很简单了, 随机生成一个点作为鸟蛋的位置, 插入到之前的二维数组中. 至此, 命令行贪吃蛇游戏基本逻辑都已实现, 剩下的就是使用定时…"}, {"id": "6844903551949340685", "title": "搭建简单的伪热更新Mock服务", "desc": "刚开始接触vue-cli，发现用它生成的框架代码是缺少Mock模拟的，于是自己摸索了许久，将自己的摸索的结果通过过程记录下来，希望对别人有所帮助，能少走弯路。 同时希望获得更好的解决方案，有更好方案的不要吝啬分享啊。 最简单的mock服务实现了，但是想想加入后期接口数量增加，那…"}, {"id": "6844904054737354765", "title": "《前端之路》--- 重温 Koa2", "desc": "从上下文中的 request 对象中获取的话，会更加的明确该属性来源，不容易混淆。"}, {"id": "6844903551353749511", "title": "Node.js design pattern : Reactor (Event Loop)", "desc": "Nodejs是非阻塞的，源于它是基于事件循环的设计模式，该模式也称为Reactor模式。 Nodejs同时也是单线程的，这里的单线程指的是开发人员编写的代码运行在单线程上，而Nodejs的内部一些实现代码却是多线程的，如对于I/O 的处理（读取文件、网络请求等）。关于Event…"}, {"id": "6844903504931209224", "title": "nodejs模块整理", "desc": "模块对于node来说是不可或缺的一部分，是服务端编程的基础。趁着整理模块之际，先将node部分的模块的封装等做一个总结。希望能够切实的帮助到你。本篇将对CommenJS规范，node的文件模块和核心模块等做一个综合的整理。如果你喜欢我的文章，欢迎评论，欢迎Star~。欢迎关注我…"}, {"id": "6932015429598740493", "title": "node js, so cool", "desc": "本栏博文大致会在这段时间和大家讨论如下几个问题:node是什么？node能给我们带来什么？node中的global全局对象(新能力)node中的模块化细节(新能力)node中的基本内置模块(新能力)n"}, {"id": "6844903497075261454", "title": "Node.js 异步异闻录", "desc": "提到 Node.js, 我们脑海就会浮现异步、非阻塞、单线程等关键词，进一步我们还会想到 buffer、模块机制、事件循环、进程、V8、libuv 等知识点。本文起初旨在理顺 Node.js 以上易混淆概念，然而一入异步深似海，本文尝试基于 Node.js 的异步展开讨论，其他…"}, {"id": "6844903592684437517", "title": "用node模拟一个简单的静态服务（女神镇楼）", "desc": "女神镇楼写之前我们先要搞清楚要做什么：用自己写的包，起一个服务，访问3000端口回车，应该显示出public下的目录列表，后面加/index.html，就应该显示index.html的内容来首先先in"}, {"id": "6905755877404311560", "title": "EventLoop、Webkit、V8原理分析之进阶知识", "desc": "软中断信号（signal，简称为信号）用来通知进程发生了异步事件。进程之间可以互相通过系统调用kill发送软中断信号。内核也可以因为内部事件而给进程发送信号，通知进程发生了某个事件。注意，信号只是用来通知某进程发生了什么事件，并不给该进程传递任何数据 收到信号的进程对各种信号有…"}, {"id": "6844903649286586375", "title": "Event Loop事件循环,看完你总会有点收获！", "desc": "我们都知道JavaScript是单线程的，这是它语言特性决定的，它的主要用途 在于一些I/O操作，Dom操作等，单线程提高了效率，但同时有很多操作比如读取文件，Ajax获取数据等，都是一些比较耗时的操作，用户等不了太长时间，因此衍生出了事件循环。 如上图是经典的Node.js中…"}, {"id": "6844903592340488206", "title": "浅度理解NodeJS的HTTP模块", "desc": "request事件是监听请求的事件，buffers是用来接收服务端发来的buffer数据，在end的时候console出来。res.write是可写流的write事件，往客户端写数据。当然，在这里我们并不能打印出来buffer因为还少一个请求头部，接下来，我们用代码模拟一下ht…"}, {"id": "6844903582030888967", "title": "记录node内存瓶颈分析", "desc": "概述：不知道因为什么原因，在某个项目新申请的两台服务器上将node版本从6.10.0升级到了6.10.1，发现在这两台机器上一个node进程占用内存一直再涨，启动10h左右就会飙升到800M。 排查内存问题首先需要借助工具来获取不同时间段的快照文件。 来发送信号生成堆转储文件。…"}, {"id": "6844903641858457608", "title": "Generator 由浅入深(一)", "desc": "Generator Function 是 ES6 提供的一种异步流程控制解决方案。在此之前异步编程形式有，回调函数、事件监听、发布/订阅、Promise 等。但仔细思考前面解决方案，实际还是以回调函数作为基础，并没有从语法结构来改变异步写法。 区别于普通函数，Generator…"}, {"id": "6844903966199775245", "title": "Dazejs高性能路由设计-前缀树路由", "desc": "机器比较烂，对比一下就好...."}, {"id": "6844903908519870472", "title": "[译] 使用 Node.js 读取超大的文件（第一部分）", "desc": "这篇博文有一个非常有趣的启发点。上周，某个人在我的 Slack 频道上发布了一个编码挑战，这个挑战是他在申请一家保险技术公司的开发岗位时收到的。 这个挑战激起了我的兴趣，这个挑战要求读取联邦选举委员会的大量数据文件，并且展示这些文件中的某些特定数据。由于我没有做过什么和原始数据…"}, {"id": "6844903955210878989", "title": "🚀为 nuxt 项目写一个 面包屑cli 工具，自动生成页面与面包屑配置", "desc": "前言公司项目的面包屑导航是使用element的面包屑组件，配合一份json配置文件来实现的，每次写新页面都需要去写json配置，非常麻烦，所以写一个面包屑cli，自动生成页面、自动配置面包屑数据，提高"}, {"id": "6844903961120653326", "title": "nodejs的异步I/O以及异步编程", "desc": "node是基于chrome的V8引擎，提供JavaScript能够在服务端运行的环境及能力。node保留了JavaScript在浏览器中众多熟悉的接口，同时保持了JavaScript语言本身的单线程、异步I/O，事件循环及回调机制等特性。 Node实现异步I/O涉及到事件循环、…"}, {"id": "6904833281045299213", "title": "node koa2 ssr项目搭建", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 一、创键项目 创建目录 koa2 npm init 创建 package.json，然后执行 npm install 通过 npm install"}, {"id": "6844903983882960904", "title": "Event Loop模型理解", "desc": "事件循环（event loop），是JavaScript用来解决由于单线程阻塞造成执行效率低下的机制，也就是我们常说的异步的基石。在不同的JavaScript宿主环境，Event Loop有着不同的模型。 任务队列是用来存放异步任务的回调，是一种先进先出的线性结构。由于异步任务…"}, {"id": "6844903560547663880", "title": "Express进阶：从一个例子看路由分组机制", "desc": "路由是Express的核心功能。本文通过一个简单例子，介绍Express的路由分组机制，以及next('route')的正确使用方法。 使用过Express的同学都知道，通过next()将代码执行权转移到下一个中间件（例子略）。 在SF上也有同学表达了同样的疑惑《对expres…"}, {"id": "6844903862676127752", "title": "你的Node应用，对接分布式链路跟踪系统了吗？(一）", "desc": " 戳蓝字「前端技术优选」关注我们哦！你的Node应用，对接分布式链路跟踪系统了吗？一、现状1.1背景随着互联网架构的扩张，我们从传统的单体应用演进到今天日趋复杂的分布式系统。如下图：一个请求，最终到后"}, {"id": "6900856531785351176", "title": "Node.js 多版本切换实践", "desc": "废话不多说，切入正题本人使用Cordova创建项目并添加平台时报如下Tips，会一直卡在这里原因是Node.js版本太高，需要降低版本实践方案： 使用Node版本管理工具n切换到低版本查看Node历史"}, {"id": "6954737459838058527", "title": "Node.js学习日记（七）：Connect框架和一些常用的中间件", "desc": "eg.一个简单的图片托管网站 服务器端 index.js 下面我们可以通过中间件来实现服务器逻辑 一、npm包常用api查找 npm官网：https://www.npmjs.com/ 原生api：ht"}, {"id": "6844903621818056711", "title": "分享一个 iView 调试案例", "desc": "分析调用的上下文代码后，发现在将 AutoComplete 组件的值设置为 null 时，会触发这个异常，我简化了调用的上下文代码，做了一个 Demo，代码如下所示。我在 codepen 上放了实例，建议点进去看看，直观感受下， 记住：请打开控制台看报错信息。 从异常信息看，问…"}, {"id": "6844903664059056142", "title": "探索 PM2 Cluster 模式下 Log4js 日志丢失", "desc": "Node 应用为单线程应用，JS 虽可利用异步 I/O 避免线程阻塞，但无法利用多核 CPU 的优势提升运行效率，提高吞吐量仍需多线程。Node Cluster 可产生多个工作线程共享同一 TCP 连接，主线程通过 IPC 通道与工作线程通讯，并使用 Round-robin 负…"}, {"id": "6844903905088765966", "title": "浅析 Nodejs 模块化", "desc": "我们知道 JavaScript 这门语言诞生之初主要是为了完成网页上表单的一些规则校验以及动画制作，所以布兰登.艾奇（Brendan Eich）只花了一周多就把 JavaScript 设计出来了。可以说 JavaScript 从出生开始就带着许多缺陷和缺点，这一点一直被其他语言…"}, {"id": "6844903869407838215", "title": "使用 nodejs 开发命令行小工具 - 谷歌翻译字幕", "desc": "使用 nodejs 可以非常方便的开发命令行工具，来解决我们遇到的一些问题。 现在就让我们看看如何使用 nodejs 开发一个把 .srt 格式的字幕文件翻译成中文和外语的双语字幕，然后在把它发布到 npm 仓库中。 来，创建 package.json 文件，然后我选择把主文件…"}, {"id": "6922731837265543181", "title": " globs简明指南", "desc": "Globs，也即 glob patterns是可以将通配符模式扩展为匹配给定模式的路径名列表的模式(通常用来匹配目录以及文件，而不是文本!)。 在Linux的早期版本中，命令解释器依赖于一个程序，该程序将这些字符扩展为无引号参数命令:/etc/ globs。 这个命令后来作为一…"}, {"id": "6844904176737058829", "title": "从零开始的NodeJS 第二章（前端模块化之路）", "desc": "自我使用JS这门语言以来，JS在整个发展历史中不断的变迁和优化，随着使用者的增多和浏览器的支持规范的发展，JS的发展大致我划分了六个阶段。 前端模块化的发展是把 函数 作为第一步的：模块的本质就是实现特定功能的一组方法，在JavaScript中，函数是创建局部作用域的唯一方式，…"}, {"id": "6844903581636640782", "title": "JS/NodeJS中的异步任务与事件环", "desc": "本文主要根据网上资源总结而来，如有不对，请斧正。 在进入正式的主题之前我们来探究探究这个历史问题，嗯，还是有点价值的哈，因为JS若不是单线程的也就不会衍生出后来的异步任务以及事件环了嘛。 js最开始时是跑在浏览器端的，主要的作用是与用户互动（接收用户输入并给出自定义的响应）以及…"}, {"id": "6844904158445699085", "title": "说说node中的可写流", "desc": "之前写过一篇流的文章，说说node中可读流和可写流,比较宏观的介绍了流的一些基本概念。 可以看到可写流相对是比较简单的，主要就是实现了一个缓存的能力。而这篇文章主要介绍可写流的实现细节。 这是对外暴露的write方法，核心逻辑是调用了writeOrBuffer方法，根据字面意思…"}, {"id": "6844904005911445517", "title": "node.js脚本与js的数据通信", "desc": "最近在写瀑布流视图，要用到很多图片，想拿到本地图片的数据信息，于是乎就写了Node脚本。就有了数据传输的问题。 err: 1、当时最先想到的是import与export，但是目前nodejs还不支持，听说快要支持了。 所以这个行不通。 最后实现方法为通过node的fs这个对象来…"}, {"id": "6905269205038596110", "title": "前端开发你不得不知道的 Node 知识", "desc": "在现在随着三大框架的崛起，我们都会安装 Node.js,使用里面的包管理工具（npm）。虽然平时我们只需要会安装会启动以及打包就行了，但是我们也是需要更加了解其更多知识。 核心模块是指 Node.js 自带的模块。node启动时，核心模块文件已经被编译到了二进制文件中了，我们只…"}, {"id": "6844903938722889742", "title": "你今天跨域了吗？--CORS解决跨域", "desc": "在使用浏览器发送请求的时候，经常会遇到跨域的问题，但是到现在也已经有了很多的解决方法。其中一个经典的方法就是跨域资源共享（Cross-Origin Resource Sharing）了，CORS使用额外的HTTP头部高数浏览器可以让哪些地址进行跨域资源请求。 从字面意思来看，跨…"}, {"id": "6844903741292986382", "title": "聊聊Typescript中的设计模式——装饰器篇(decorators)", "desc": "随着Typescript的普及，在KOA2和nestjs等nodejs框架中经常看到类似于java spring中注解的写法。本文从装饰模式出发，聊聊Typescipt中的装饰器和注解。 上述代码定义了一个处理url为“/cats”的控制器，该控制器对于url为“/cats”的…"}, {"id": "6844903542386327559", "title": "使用 vue + thinkjs 开发博客程序记录", "desc": "一入冬懒癌发作，给自己找点事干。之前博客程序写过几次，php的写过两次，nodejs用ThinkJS写过，随着ThinkJS版本从1.x升级到2.x之前的博客程序也做过升级。但是因为前面考虑搜索引擎抓"}, {"id": "6949529951284494344", "title": "Windows下node-gyp查找VS安装路径简单解析", "desc": "node-gyp的作用我已经不想赘述了，这里给一个我之前文章的链接：cnblogs看这里，知乎看这里，掘金看这里。本文主要从源码入手，介绍node-gyp查找VisualStudio的过程。"}, {"id": "6844903919525560334", "title": "实现一个SSR同构应用", "desc": "这里有一张草图能大概描述这个过程嘤嘤嘤. renderToStaticNodeStream 之于 renderToNodeStream 也是不会产生data-react-*属性，对于静态页面 可以采用此方法。 服务端不存在支持组件挂载的浏览器环境，所以react组件只有comp…"}, {"id": "6844903615669207053", "title": "玩Deno遇到问题的解决方案", "desc": "最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。 再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。 在开始之前请准备好vpn*。 大家需要去安装 Go 环境.并且去 export 各种Go相关的环境…"}, {"id": "6924993153892089864", "title": "Node专栏-fs(文件系统)", "desc": "最近在做一个多平台统一部署打包流程优化的专项。 其中插件中的一个小功能就是：将build的产物dist目录下的文件拷贝到.net项目静态资源目录下。于是就有了这个Node专栏。用到哪个模块哪个方法就整理记录一下～ fs 模块可用于与文件系统进行交互（以类似于标准 POSIX 函…"}, {"id": "6844903971081945096", "title": "P12：node实现静态服务器 ~ Content-Type优化设置", "desc": "我们出于学习得目的在此贴出一个常用的MIME类型对应关系。类型不全，商业项目慎用"}, {"id": "6844903695033843726", "title": "显微镜下的webpack4的新特性：mode详解", "desc": "webpack4支持的一个新特性就是zero配置，不需要config，也可以打包，这对于懒癌患者很有诱惑力，但是这也意味着我们不清楚零配置发生了写什么，也不知道打包出来的文件是否符合我们的心意，全部都是佛系打包。不过作为项目的亲爹亲妈，还是要对自己的孩子负责，每个打包过程都是要…"}, {"id": "6844903877909676045", "title": "爬虫爬不到数据？试试puppeteer（Node.js）", "desc": "前不久，在学校仿微博鲜知微信小程序的时候，正愁数据从哪来，翻到了数据一样的页面微博新鲜事（需退出登录状态），接着用cheerio爬取数据。结果翻车了，检查了一下发现发出请求拿到的body是空的，到微博新鲜事的网页源代码一看，发现...人家的html是js渲染的，应该是还有一次跳…"}, {"id": "6929135927323262983", "title": "nodejs模块机制深入浅出", "desc": "前言 一直以来，都想好好系统的分析分析nodejs源码，既能帮助我们在运用nodejs编写代码时更加游刃有余，也算是对编写好代码方法的一种学习，所以接下来就想以nodejs源码为出发点，写一些关于no"}, {"id": "6844903668014120967", "title": "用实验的思路优化webpack4项目编译速度", "desc": "最近开发的时候遇到一个问题：当项目越来越大的时候，webpack构建和编译的速度变得很慢。尽管webpack4官方宣称速度提高了90%以上，但实际使用的时候感觉速度和webpack2也差不多。我实在受不了热加载的时候要等几秒才能编译好，于是就开始了优化之路。 最终优化的效果不错…"}, {"id": "6953582989125107720", "title": "入门NODE.JS 这一篇就够了", "desc": "第一章：NODE.JS基础 第一节：http 利用node.js代码创建简单的http服务： 第二节：express 路由 Route methods: 支持get\\post\\all方法 Route "}, {"id": "6844903952715120648", "title": "nodejs（十）Koa使用教程", "desc": "0. 准备 一. 基本使用 二. 路由"}, {"id": "6844903696015294471", "title": "JavaScript 异步编程", "desc": "自己着手准备写这篇文章的初衷是觉得如果想要更深入的理解 JS，异步编程则是必须要跨过的一道坎。由于这里面涉及到的东西很多也很广，在初学 JS 的时候可能无法完整的理解这一概念，即使在现在来看还是有很多自己没有接触和理解到的知识点，但是为了跨过这道坎，我仍然愿意鼓起勇气用我已经掌…"}, {"id": "6844903790122909709", "title": "从零开始开发一个Node交互式命令行应用", "desc": "想追求更好的阅读体验，请移步拓跋的前端客栈。同时把项目地址放在显眼的位置 Puppeteer 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具。Chrome 作为浏览器市场的领头羊，Chrome Headless 将成为 web 应用 自动…"}, {"id": "6895980026132037646", "title": "使用node反向代理接口改造旧项目", "desc": "最近公司分配了一个旧系统维护任务，该系统用的是 springBoot，前后端没有分离，前端使用的是 jQuery+easyUI，并且和后端代码在一个总目录下，前端代码托管在后端起的静态服务下，由于前端对 SpringBoot 不熟，之前做修改都是前端代码改完之后用 maven …"}, {"id": "6844903575022206990", "title": "nodejs的用户权限管理——acl.md", "desc": "这里是结合express做校检...结果发现acl自己提供的中间件太鸡肋了,这里就重写了一个。 有点要说明的是express.Router支持导出一个Router模块 再在app.use使用,但是如果你这样使用app.use('/admin/user',auth(), user…"}, {"id": "6844904037335187463", "title": "JavaScript 和 Node.js 中的“事件驱动”是什么意思？", "desc": "事件驱动架构是建立在软件开发中一种通用模式上的，这种模式被称为发布-订阅或观察者模式。 在事件驱动架构中，至少有两个参与者：主题（subject）和观察者（observer）。 主题就像调频收音机一样，向有兴趣收听该主题所说内容的观察者进行广播。 观察者可能只有一个，也可能有一…"}, {"id": "6844903855499509768", "title": "教你三步爬取掘金前端优质文章", "desc": "hello，小伙伴们，我是你们的pubdreamcc，本篇博文出至于我的GitHub仓库node学习教程资料，欢迎小伙伴们点赞和star，你们的点赞是我持续更新的动力。 先来看看掘金首页获取前端文章的后端接口 API 在哪里。 创建服务器文件 app.js ，通过superag…"}, {"id": "6904134966334980109", "title": "node中的fs和流", "desc": "读取文件默认编码是null,二进制数据，文件不存在会报错写入文件默认以二进制写入，如果文件不存在会创建文件，如果文件存在会覆盖readFileSync同步读writeFileSync同步写readFi"}, {"id": "6844904135825817614", "title": "3种常用鉴权方法原理与实现", "desc": "学生一枚，作为学习和总结。如果有哪些不对的地方，还请指教 HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。 Cookie是由服务器端生成，发送给User-Agent（一般是浏览器），（通知浏览器设置一下cookie），…"}, {"id": "6979006508042289188", "title": "使用node将HTML生成PDF或图片：采用 puppeteer", "desc": "github 地址： https://github.com/GoogleChrome/puppeteer 文档地址： https://pptr.dev/ 中文文档地址： https://zhaoqiz"}, {"id": "6844903665254268936", "title": "聊聊毕业设计系列 --- 系统实现", "desc": "在上一篇文章中，主要是对项目做了介绍，并且对系统分析和系统设计做了大概的介绍。那么接下来这篇文章会对系统的实现做介绍，主要是选择一些比较主要的模块或者说可拿出来与大家分享的模块。好了，接入正题吧~~ 服务端这边使用的是Express框架，数据库使用的是MongoDB，通过Mon…"}, {"id": "6996920611175923719", "title": "Node.js——express", "desc": "什么是express express是基于Node.js平台，快速、开放、极简的web开发框架 express的作用和Nodejs内置的http模块类似，是专门用来创建web服务器的 express的"}, {"id": "6978783510815309861", "title": "前端进阶 - node基本操作：使用http手撸wx.request", "desc": "HTTP请求是最常用的网络IO操作，可简单归纳为GET读+POST写。本文通过node自带的http(s)库，带你实现一版符合wx.requset规格的网络操作工具。"}, {"id": "6844903649387216903", "title": "React 服务端渲染原理及过程", "desc": "服务端渲染在久远的 JSP、PHP 时期就已经在使用了，但是在单页面应用大行其道的情况下，却依然有着各种各样的方案来支持，因为服务端渲染确实有着很多好多好处，尤其是 Node 和三大框架相结合 的前后端同构，前后端共用一套代码，更是将单页应用的便利和服务端渲染的好处相结合，这里…"}, {"id": "6854573215784632334", "title": "前端命令行交互解决方案(一)", "desc": "process.argv 属性会返回一个数组，其中包含当 Node.js 进程被启动时传入的命令行参数。 第一个元素是 process.execPath（启动 Node.js 进程的可执行文件的绝对路径名 ）。 第二个元素是正被执行的 JavaScript 文件的路径。 其余的…"}, {"id": "7001894700596592653", "title": "node代理解决本地开发跨域问题", "desc": "本文介绍了node启动本地服务解决非webpack项目跨域问题，几行代码就可以实现，再也不用麻烦后端或者运维去修改服务器的配置了"}, {"id": "6844904198551666701", "title": "NodeJS全栈开发一个功能完善的Express项目（附完整源码）", "desc": "一. 前言 本文作者根据项目实战经验已将底层服务架构搭建完成，并且本项目已在github开源，供大家学习参考使用（如有不足，还请批评指正），希望能减轻大家的工作量，更高效的完成工作，有更多时间提升自己的能力。🤭 分享之前我们先来认识一下Node.js、Express都是什么东…"}, {"id": "6990623837700227108", "title": "自己写的几个node文件系统小方法", "desc": "1. 遍历入参中对应文件夹下的所有文件，并返回对应文件完整路径 2. 根据入参路径创建对应目录和文件"}, {"id": "6844904035053486087", "title": "Docker 搭建你的第一个 Node 项目到服务器(完整版)", "desc": "关于 Docker 的概念是确实不太好总结，下面我通过四点向你说明 Docker 到底是个什么东西。 Docker 是世界领先的软件容器平台。 Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 的cgroup，namespace，以…"}, {"id": "7006123106959900680", "title": "不升级服务器node版本，如何自定义node版本构建", "desc": "起因 最近发现了一个好玩的css工具库：tailwindcss，可以通过粒子化的类名来控制各种样式，让我基本很少写css代码了，配置自定义主题加上vscode插件提示那些是真香，安利一下。 功能完成之"}, {"id": "6997380597089828894", "title": "🌜 NodeJs深入浅出之旅：包与NPM 🌛", "desc": "包与NPM Node组织了自身的核心模块，也使得第三方文件模块可以有序的编写和使用。 但是在第三方模块中，模块与模块之间仍然是散列在各地的，相互之间不能直接引用"}, {"id": "6844903974248644622", "title": "7天撸完KTV点歌系统,含后台管理系统(完整版)", "desc": "等等... 首先不要改变服务器端口,否则报错. 你需要在装有Node和Vue的环境中测试，如果其中一个没有请先下载(Node下载,Vue下载).如果没有Mongodb数据库,请自行下载,对于环境就不多讲了. 接着进入ktv-client, npm install 下载用户前端依…"}, {"id": "6988484297485189127", "title": "前端不懂进程通信？看完这篇就懂了", "desc": "为什么前端要了解进程通信： 前端领域已经不是单纯写在浏览器里跑的页面就可以了，还要会 electron、nodejs 等，而这俩技术都需要掌握进程通信。 nodejs 是 js 的一个运行时，和浏览器"}, {"id": "6844904155086061576", "title": "大规格文件的上传优化", "desc": "第一步是结合项目背景，调研比较优化的解决方案。 文件上传失败是老生常谈的问题，常用方案是将一个大文件切片成多个小文件，并行请求接口进行上传，所有请求得到响应后，在服务器端合并所有的分片文件。当分片上传失败，可以在重新上传时进行判断，只上传上次失败的部分，减少用户的等待时间，缓解…"}, {"id": "6844903624632434702", "title": "Webpack 4 配置最佳实践", "desc": "Webpack 4 发布已经有一段时间了。Webpack 的版本号已经来到了 4.12.x。但因为 Webpack 官方还没有完成迁移指南，在文档层面上还有所欠缺，大部分人对升级 Webpack 还是一头雾水。 不过 Webpack 的开发团队已经写了一些零散的文章，官网上也有…"}, {"id": "6981749788714909727", "title": "为了方便，我改了别人的轮子😅", "desc": "本文主要解决了如何在node_modules中第三方模块的修改使用 如果可以的话发布一个新的轮子来使用 在解决的过程中也遇到了许多的问题以此来记录一下..."}, {"id": "6962009069750075400", "title": "\"无头\"浏览器初探", "desc": "无头浏览器是什么 无头(headless)浏览器是一种没有图形界面的web浏览器。 无头浏览器对于测试web页面特别有用，因为它们能够以与浏览器相同的方式展示和解析..."}, {"id": "7001681442895822884", "title": "Node 自动化单元测试", "desc": "一个简单的尝试，在 BFF 端做自动化单元测试。文章描述了背景、原理与最终的产出与挑战。多交流~~~"}, {"id": "6983690972307652621", "title": "每天学习10个实用Javascript代码片段（四）", "desc": "每天学习10个实用Javascript代码片段，加深对 Javascript 语法的理解，积累代码优化经验，第四天继续，如果觉得内容能够带来点帮助，可以查看专栏《碎片时间学习Javascript代码》"}, {"id": "6919389446068502535", "title": "2021 再看 Deno（CDN for JavaScript modules的思考）", "desc": "2018年，我曾经在 Deno 发布不久写过一篇《 Deno 不是下一代 Node.js！》的文章，正好最近有一些研究，站在2021年再来看看 Deno。 无疑，Deno 改变了大家的对包管理的看法。本身 Deno 够小，试错成本低，它确确实实引领了一个潮流方向。这个改进虽说不…"}, {"id": "6984531216233922567", "title": "request 已废弃 - 推荐一个超快的 Node.js HTTP Client undici", "desc": "推荐一个新的 Node.js HTTP Client undici，比内置的 HTTP 模块还要快～"}, {"id": "6988698858754686983", "title": "安装node-sass失败 或 npm install Error: not found: python2 解决方案", "desc": "使用npm安装node-sass时，或者安装需要python2的依赖时，会报出以下错误。 解决方案为: 1. 安装python2 可以用npm命令安装 也可以自行下载安装 Python 2.7 2. "}, {"id": "7002891236742807559", "title": "node将excel的表格按照某一列分组拆分成多个excel表格", "desc": "拿到所有班级的成绩按照班级生成表格发给每个老师 有了所有人工资后按照每个人生成工资表发放到个人 从数据中心拿到汇总数据后分发给各个单位"}, {"id": "7000923745128972324", "title": "探索nodemon的实现（源码）", "desc": "探索nodemon的实现 前言 nodemon是我常用的node源码监控工具。 背景 之前探索了node-watch，chokidar，看过它们源码后，大概了解了实现的思路。 现在遇到了另外一个问题，"}, {"id": "6998678824699297823", "title": "「从零开始」前端node够用指北(四)⚡---Express框架", "desc": "本系列带着大家一起从零开始学习NodeJS，感同身受的站在学习者角度分享知识，从基础到实战，如果感兴趣的同学可以点赞收藏留坑。"}, {"id": "6976536925330997261", "title": "Node.js系列", "desc": "什么是node.js？ node.js使用了一个事件驱动、非阻塞式I/O的模型，使其轻量又高效。 node.js是一个基于Chrome V8引擎的JavaScript运行环境。 → 在node.js中"}, {"id": "6844903519275728903", "title": "基于 nodejs 的 webSockt （socket.io）", "desc": "恩，今天先到这里，有什么问题，可以留言互相学习。 欢迎推荐~~~"}, {"id": "6844903497398222862", "title": "再见，babel-preset-2015", "desc": "我猜很多同学和我一样每次使用Babel的时候，必选的preset就是ES2015。然而就在最近，如果你再次安装babel-preset-es2015时你会发现有如下的Deprecated警告（文字很欢"}, {"id": "6844904079710224397", "title": "教你如何从零搭建一个Node.js 的 MVC 项目（一）", "desc": "一、准备工作安装koa、热更新用的supervisor建立入口文件app.js./app.js./package.json注意supervisor-i./node_modules./app.js这条命"}, {"id": "6844903809618034695", "title": "Nodejs核心模块之net和http", "desc": "net和http模块都是node核心模块之一，他们都可以搭建自己的服务端和客户端，以响应请求和发送请求。 这里写的net模块是基于tcp协议的服务端和客户端，用到net.createServer和net.connect实现的一个简单请求与响应的demo。 http.create…"}, {"id": "6844904012991430663", "title": "docker 部署 nodejs 服务-mongodb", "desc": "Ubuntu通过apt-get方式安装的 mongodb 版本比较老2.6.10,干脆全部删除通过 docker 安装，轻量简洁也方便，踩坑过程如下。 Failed: can't create session: could not connect to server: conn…"}, {"id": "6845166891401478158", "title": "Node.js 中的缓冲区（Buffer）究竟是什么？", "desc": "从前端转入 Node.js 的童鞋对这一部分内容会比较陌生，因为在前端中一些简单的字符串操作已经满足基本的业务需求，有时可能也会觉得 Buffer、Stream 这些会很神秘。回到服务端，如果你不想只做一名普通的 Node.js 开发工程师，你应该深入去学习一下 Buffer …"}, {"id": "6844903758908899341", "title": "V8引擎优化机制之隐藏类和内联缓存", "desc": "我们知道Javascript作为一种动态语言，性能方面与c#,Java之类的静态语言相比存在着一定的差距。而随着Web技术的发展，对Javascript的执行效率提出越来越高的要求。为了追求更好的性能，V8引擎借鉴了大量的静态语言编译技术来优化引擎的执行效率。比如V8引擎放弃生…"}, {"id": "6905930211817324558", "title": "Node.js + Express中间件详解", "desc": "Express是一种路由和中间件Web框架，它具有自己的最小功能：Express应用程序本质上是一系列中间件函数调用。 中间件函数是可以访问请求对象 （req），响应对象（res）以及应用程序的请求 - 响应周期中的下一个中间件函数的函数。下一个中间件函数通常由名为的变量表示n…"}, {"id": "6844903613307813895", "title": "浏览器和Node.js中的Event Loop", "desc": "众所周知，javascript是一门单线程语言，而当我们使用ajax和服务端进行通信的时候是需要一定时间的，这样当前线程就会被阻塞，使浏览器失去相应。因此，当js执行执行一些长时间的任务时，我们希望有一种异步的方式处理这种任务。事件循环（event loop）就是如何处理异步执…"}, {"id": "6844903582475501582", "title": "你真的了解Event Loop（事件环）吗？", "desc": "JavaScript语言最大特点就是单线程，但是这里的单线程指的是主线程是单线程的。那为什么js要单线程呢？ 所以为了避免复杂性，JavaScript从诞生起就是单线程的。 1）同步在发出调用后，没有结果前是不返回的，一旦调用返回，就得到返回值。调用者会主动等待这个调用结果。 …"}, {"id": "6844903840873971725", "title": "Node.js折腾记一（改进）：文件夹目录树获取", "desc": "前言改进：源码可以戳这里：github地址一、输出的内容components-dir-tree.jsoncomponents-dir-tree.json:output二、主函数getDirTree：三"}, {"id": "6844904017743740936", "title": "gitbook 入门教程之增强版 edit-link-plus 编辑此页插件", "desc": "In you gitbook's book.json file, add edit-link-plus to plugins list. In pluginsConfig, Set base value which is base path to your github or …"}, {"id": "6886271109998575624", "title": "【Node.js 系列 9】用 20 行代码带你了解模板引擎实现原理", "desc": "先简单科普一下模板引擎是什么，模板引擎就是将数据（data）和模板（template）合并然后生成 HTML 文本。 在 Node.js 里，常见的模板引擎有：ejs、handlerbars、jad 等等，相信不少人都用过。今天主要是让大家了解模板引擎的核心原理，并使用 ejs…"}, {"id": "6844903917508100103", "title": "小哥哥, React SSR 要不要了解下-实用篇", "desc": "来到皇冠赌场的大家那肯定是丈二的和尚, 摸不着头脑呀. 那么路由就应运而生了, 关于路由的原理建议大家看看这篇文章. 如果你看了还回来了, 那说明还是我们澳门 XXXX 更加的有意思 😹. 那么我们就开始, 创建几个页面. 页面的代码结构如下图所示. 为了便于各个 level…"}, {"id": "6844903716508663815", "title": "我们应该如何（以及为什么）要将Typescript与Express、nodejs一起使用（译文）", "desc": "在我的职业生涯开始时，我是一名桌面应用开发人员，其中强类型语言占据了市场主导地位。 当我迁移到Web开发时，我对JavaScript和Python等语言的每个新功能都很着迷。事实上，我没有必要声明变量的类型，这极大的提高了我的生产力，并且使我的工作变得更有趣了。 所以我第一次听…"}, {"id": "6916760887776772109", "title": "Eggjs入门使用", "desc": "国有国法，家有家规，当我们一群人共同在做一件事情时，如果不加以约束，每个人做事的方式就会按照自己喜爱的方式进行，凌乱不堪，让后来加入者需要更多的时间，熟悉前人所做事情，然而所做的事情也是凌乱不堪的，我们为何不加以约束。 eggjs是一个nodejs框架，继承与koa框架，egg…"}, {"id": "6844904019454853128", "title": "node事件循环", "desc": "当node.js启动后，会初始化事件轮询；执行脚本，然后启动事件循环。 每个阶段都有一个FIFO队列来执行回调。当事件循环进入一个阶段，会把该阶段的回调执行完或者达到最大回调数，才会移动到下一个阶段。 timers: 执行setTimeout()和setInterval()的回…"}, {"id": "6844903509574287374", "title": "让vue-cli初始化后的项目支持服务端渲染，SSR 实战", "desc": "当前 SPA 架构流行的趋势如日中天，但在 SEO 方面好像一直是个痛点，所以众多流行的 mv* 等框架也为此痛点提出了解决方案。 vue 官方提供了快速构建项目的工具 vue-cli，其方便快捷性众所周知。本文章来分享一下使用vue cli构建项目后如何集成 SSR(serv…"}, {"id": "6894170148127801352", "title": "使用Nodemailer调用自己的邮箱发送邮件（简单）", "desc": "1.搭建基础的nodemailer服务。 安装了nodemailer之后我们去看一下nodemailer的官方文档。这里附上链接： Nodemailer中用于传递邮件的主要传输方式是SMTP。关于SMTP邮件传输协议，各位有兴趣可以搜索了解一下。这里我们按照官方文档的SMTP发…"}, {"id": "6844903576922243086", "title": "理解 Koa 的中间件机制", "desc": "中间件概念在编程中使用广泛, 不管是前端还是后端, 在实际编程中或者框架设计都有使用到这种实用的模型, 下面我们就来谈谈它的作用. 相信很多人都听过所谓的 AOP 编程或者面向切面编程, 其实他们都是中间件模型的体现, 我举个例子, 在前端开发中, 产品会要求在代码中进行埋点,…"}, {"id": "6844904057136496648", "title": "koa应用的部署", "desc": "本例使用centos。"}, {"id": "6844903869386850312", "title": "Node.js进阶之进程与线程", "desc": "进程与线程在服务端研发中是一个非常重要的概念，如果您在学习的时候对这一块感到混乱或者不是太理解，可以阅读下本篇内容，本篇在介绍进程和线程的概念之外，列举了很多 Demo 希望能从实战角度帮助您更好的去理解。 进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，…"}, {"id": "6844903654802063367", "title": "Eventloop的秘密", "desc": "稍微了解异步的同学都会对答案呼之欲出。BUT! 别着急，本篇内容结束后以上问题都不再是事儿。解决以上问题的要点，首先需要清楚Javascript异步处理模块，事件队列，以及事件环-Eventloop. 对Javascript而言，从诞生之日起，它就是单线程的。为什么呢？举个小栗…"}, {"id": "6934896568541642788", "title": "this关键字在NodeJS和浏览器中的不同", "desc": "学习过JavaScript的人肯定清楚 处在不同环境下this的指向问题。那么看下面的代码 这里声明了一个全局变量type，当执行type=1的时候，赋值为1。之后toWhere函数调用，看到函数中有this 就去判断this的指向，这里很清楚，this指向了window，th…"}, {"id": "6844903994117062669", "title": "Node内存泄漏的那点事", "desc": "缓存在应用中的作用占很重要的地位，可以十分有效的节省资源。如有命中缓存，可以节省一个I/O的时间 Node中若用一个对象当做缓存，则它将常驻老生代。若缓存的键多，长期存活的对象也多，导致垃圾回收时对这些对象做无用功。影响整个应用。 JS开发者喜欢用一个对象的键值来缓存东西，严格…"}, {"id": "6844903700452868103", "title": "抓取网页生成 PDF", "desc": "看到自己喜欢的在线文档，是不是总想保存下来慢慢学习。可是苦于没有现成的工具，这里我来介绍两个 JS 类库，只需要简单封装一下，从此想抓哪里抓哪里。"}, {"id": "6844904078363852807", "title": "深入学习 Node.js Stream 系列（二）—— 暂停与流动模式", "desc": "系列一和大家分享了 Node.js 可写流和可读流的基本使用。系列二将深入讲解在 Node.js 中可读流的流动模式（flowing）与暂停模式（paused）。 其实流动模式和暂停模式，对应的是，推模型与拉模型。 笔者在介绍 Node.js 流的这两种模式之前，这里也想展开聊…"}, {"id": "6844904050891161608", "title": "📖 深入NodeJS模块 - os", "desc": "nodejs 提供了os.platform()和os.type()，可以用来识别操作系统平台。推荐使用: os.platform() 平均负载是指：单位时间内，系统处于可运行状态和不可中断状态的平均进程数。它和 cpu 使用率没有直接关系。 其中，这里的可运行状态指的是：正在使…"}, {"id": "6916892638260150286", "title": "从源码角度理解npm干了什么？", "desc": "我在整理npm相关知识时，发现有些问题比较困惑，网上也没有从源码层面解释npm的文章，所以我去看了源码来解决我的困惑。为了加深理解，我把源码里的重点内容整理出来，希望大家在读完后也能够对npm有更深的"}, {"id": "6903933232228597767", "title": "【每日一问】如何通过node在vscode及webstorm中打开文件？", "desc": "在命令行中安装code命令即可，此时我们只要在命令终端键入下面的指令，可以实现同样的效果。 此时我们只要在命令终端键入下面的指令，可以实现同样的效果。 在开始之前我们先创建一个open-ide文件夹，在这个文件夹下新建一个index.js文件。 在命令终端中，执行node in…"}, {"id": "6844903641724223495", "title": "TypeScript在node项目中的实践", "desc": "TypeScript可以理解为是JavaScript的一个超集，也就是说涵盖了所有JavaScript的功能，并在之上有着自己独特的语法。 最近的一个新项目开始了TS的踩坑之旅，现分享一些可以借鉴的套路给大家。 作为巨硬公司出品的一个静态强类型编译型语言，该语言已经出现了几年的…"}, {"id": "6844904203031166983", "title": "Node.js与二进制数据流", "desc": "二进制数据就像上图一样，由0和1来存储数据。普通的十进制数转化成二进制数一般采用\"除2取余，逆序排列\"法，用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为小于1时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二…"}, {"id": "6844903615232999431", "title": "Node.js Stream 流的使用及实现总结", "desc": "Readable - 可读的流 (例如 fs.createReadStream())。 Writable - 可写的流 (例如 fs.createWriteStream()). Duplex - 可读写的流(双工流) (例如 net.Socket). 如果读取一个文件，使用fs…"}, {"id": "6844904168541388814", "title": "实现微前端需要了解的 Vue Genesis 渲染器", "desc": "在 Genesis 中，核心的就是渲染器，它提供了最基础渲染能力，有了它，你可以实现微前端、微服务、远程组件、首屏渲染，甚至可以和 React、EJS 等配合使用。 如果你是传统的后端渲染的，需要做SEO，但是你希望在部分布局，部分页面引入 Vue，那么 renderer.re…"}, {"id": "6844903987909509127", "title": "express中的cookie和session", "desc": "这是同一个浏览器在访问同一个网站，换句话说，服务器无法识别两条http请求是否是同一个用户发送的。也就是说服务器端并没有记录通信状态的能力。 但是， 为了用户体验， 我们确实需要让服务器能够记忆用户的一些信息。 cookie应运而生 cookie是一个简单到爆的想法： 当访问一…"}, {"id": "6844903665266868232", "title": "每天阅读一个 npm 模块（2）- mem", "desc": "今天阅读的 npm 模块是 mem，它通过缓存函数的返回值从而减少函数的实际执行次数，进而提升性能，当前版本为 3.0.1，周下载量约为 350 万。 上述用法是 mem 的核心功能，除此之外它还支持 设置缓存时间、自定义缓存 Hash 值、统计缓存命中数据等功能。 当只有一个…"}, {"id": "6858226888645869575", "title": " Mysql在Node中的具体使用", "desc": "mysql有自己的客户端连接工具了。下面就介绍如如何使用mysql shell. 打开cmd。win徽标键+R，输入cmd。 在cmd中输入mysqlsh，进入MySQL shell命令行。 输入\\connect root@127.0.0.1 连接mysql。 root是用户名…"}, {"id": "6944642890991665160", "title": "关于Event loop的问题", "desc": "Event loop即事件循环，就是指浏览器或者Node（JS运行的环境）用来解决JS单线程运行阻塞的问题的一种机制。 关于Event loop,它分为MacroTask（宏任务）和MicroTask（微任务）。 首先，我们来谈一下JS的单线程运行。 当一个程序运行时，就可以视…"}, {"id": "6844904166683312141", "title": "是时候用Node.js搞一波事情了，基于Node.js的聊天小应用", "desc": "最近想做一个Node.js的应用，以把自己学到的Node.js技能初步落实一下，思前想后还是做一个小型聊天应用吧，博客之类的恐怕后期精力不够，（之前做phper的时候做博客就因为越想越多的功能半途放弃了😅），因为之前没有做过WebSocket相关的业务，所以也想在这方面实践一…"}, {"id": "6930170631031881741", "title": "如何使用nodejs自动发送邮件?", "desc": "之前用Nodejs做了很多服务端模块, 最近抽空复盘一下, 接下来笔者将介绍如何使用Nodejs来自动向用户发送邮件. 笔者将详细介绍自动发送邮箱的实现方案, 以及通过一个实际的案例来带大家掌握使用nodejs自动发送邮件, 最后会介绍一些实际的应用场景, 来加深对该方案的理解…"}, {"id": "6960427434235658277", "title": "新生代小鲜肉之代码生成器", "desc": "从一个脚手架说起 丹尼尔: 最近要搞个代码生成器，能够快速生成项目代码那种，蛋兄有什么推荐？ 蛋先生: 过往一直使用 yeoman，快超 10k star 的开源项目。但是，今天要推荐给你的，并非 y"}, {"id": "6992091006220894215", "title": "在Node.js 多进程模型中实现共享内存", "desc": "Node的应用为了利用多个CPU核心，需要使用多进程模型，而该模型中则需要可以跨进程共享的数据空间。本文提供了一种共享内存的实现，共享内存维护在Master进程，Worker进程通过IPC访问。"}, {"id": "6996667710897651749", "title": "NodeJs深入浅出之旅：模块🌀", "desc": "NodeJs 虽然曾经在以前写过nodeJs的一篇文章，不过系统性的开始学习还是从现在开始吧。（不过我也同时在学TypeScript，所以NodeJs不能保证不间断学习）"}, {"id": "6844903567912878094", "title": "前端知识集锦", "desc": "大家可以关注我的公众号，我在公众号中会更新视频，并且每晚都会推送一篇我认为不错的文章。"}, {"id": "6844904111263973384", "title": "《大前端进阶 Node.js》系列 P6必备脚手架/CI构建能力（下）", "desc": "P6 前端必备脚手架 /CI 构建能力，顺着怪怪的思路往下看，然后获取文章末尾的源码，跟着源码操作一遍，就是一个完整的前端脚手架构建、发布、部署工程化项目。 下图中左边部分的项目初始化、模板拉取、项目运行部分，在《大前端进阶 Node.js》系列 P6 必备脚手架/CI 构建能…"}, {"id": "7001475362962014215", "title": "Nodejs BFF之RPC", "desc": "BFF的的一个核心功能是接口聚合和剪裁，而要实现这个功能，RPC是绕不过去的一个坎儿，那我们就从0开始实现一个Nodejs 的RPC通信吧~"}, {"id": "7000767130840858632", "title": "使用 Mongoose 连接到 MongoDB", "desc": "本文将来看看如何使用 Mongoose 连接到 MongoDB 服务器。 mongoose.connect() 方法是使用 mongoose 连接 MongoDB 的最简单方法。一旦连接成功，就可以创"}, {"id": "6844903591375814669", "title": "从 0 开始了解 Docker", "desc": "Docker 自开源以来受到了各大公司的广泛关注，或许现在互联网公司的运维体系不承载在 Docker（或 Pouch 等）之上都不好意思说自己的互联网公司。 本文会简单介绍下 Docker 的基础概念，入门级使用方式和一些使用 Docker 能大大提升效率的场景。 对 Dock…"}, {"id": "6982554845249011720", "title": "NodeJS事件循环解析", "desc": "在浏览器中是两个任务队列，一个是宏任务一个是微任务。但是在NodeJS中一共存在六个事件队列，timers，pending callbacks，idle prepare，poll，check，clos"}, {"id": "6844903974529662990", "title": "Server-X：一款可能提升你十倍工作效率的工具", "desc": "对，盲生，你可能发现了华点。 这其中仅仅是为代码开发阶段，就可能有本地服务器、远程调试工具、代理工具、浏览器插件等等。 并且其中不乏全局安装、全局配置的「重器」。 试想现在你要换一台新电脑或者重装新系统了，你还得一个个把它们重新安装回来。 也就是说你在不同项目之间切换时还需要手…"}, {"id": "6844903616965246983", "title": "一点感悟：《Node.js学习笔记》star数突破1000+", "desc": "笔者前年开始撰写的《Node.js学习笔记》 github star 数突破了1000，算是个里程碑吧。 从第一次提交（2016.11.03）到现在，1年半过去了。突然有些感慨，想要写点东西，谈谈这期间的收获、心路历程，以及如何学习Node.js。 笔者一直有做技术笔记的习惯，…"}, {"id": "7006906379751391268", "title": "node js命令操作，环境变量设置，进程线程理解，模块引入导入导出", "desc": "--常用命令 dir//列出当前目录下所有文件 cd 文件名//进入此文件 cd .//当前目录 cd ..//上一级目录 tab键//自动补全文件名 md 目录名//创建文件 rd 目录名//删除文"}, {"id": "6844903569154375693", "title": "当面试官问你如何进行性能优化时，你该这么回答", "desc": "在开发好页面后，如何让页面更快更好的运行，是区分一个程序猿技术水平和视野的一个重要指标。所以面试时，面试官总会问你一个问题，如何进行性能优化呢？ 如果你这时是头脑一片空白，或是像之前的我一样，靠死记硬背或是之前的经历，答一下压缩代码，打包代码，雪碧图，cdn，事件代理，这说明你…"}, {"id": "7006900804607016968", "title": "node.js理论与基础操作", "desc": "node.js 是什么 node.js 并非任何一种语言，而是一个基于 Chrome V8 引擎 的 JavaScript 运行时。 名词解释 chrome V8引擎： chrome： chrome浏"}, {"id": "7006897811077742629", "title": "node.js基本用法", "desc": "什么是node.js？ node.js是基于Chrome V8引擎的javascript的运行环境，它是一个运行环境 而不是一门新的语言。 (大白话来说：nodejs提供了一个运行环境，我们在这个环境"}, {"id": "7001537120397426701", "title": "Webpack4 进阶 [ 核心配置与实战 ]", "desc": "前言 前边有写过关于 webpack 的核心配置概念与基础实践，今天主要分享 webpack 针对各种情况的配置与实战 webpack 配置概念 webpack 基础实践 这里需要知道一个前提 loa"}, {"id": "6868083707383644168", "title": "Node.js入门系列（三）开发调试、全局内置函数和变量", "desc": "Node.js入门系列是一整套参考教程，写到本篇已经是第四篇了，系列以结构脑图、文字解释、概括总结、练习实例、面试考点的形式讲述知识点。虽然学习这个系列不能让你立刻进阶资深，但学到的知识正是通往资深前端路上的基石。 同时，金九银十到了，很多小伙伴也开启了面试之旅，为助力大家拿到…"}, {"id": "6844903785001664526", "title": "用Node+wechaty写一个爬虫脚本每天定时给女(男)朋友发微信暖心话", "desc": "在评论区偶然看到一位读者说可不可以用微信实现一下。然后最近刚好在做微信机器人的小项目，那就把这个定时任务放到微信上去做吧，说干就干，撸了一下午终于撸出来了。 为了防止占用你的微信号，你和你的爱人添加我的微信后。你发送指定内容，我将会每天帮你发送消息"}, {"id": "6956587204189650957", "title": "🚕手摸手教你在 Linux 服务器部署 NodeJs 项目", "desc": "登录服务器 采用 GitBash 或者 Xshell 或者 CMD 等终端登录连接到服务器 假如第一次使用服务器先更新下，以下程序基本采用 Yum 源的安装方式： Yum 命令 Git 安装 服务器下"}, {"id": "6844903575336779789", "title": "React Portal的前世今生", "desc": "通常在设计这些模态窗的时候，会把整个DOM结构尽量渲染在HTML位置比较顶层的地方，比如body。这样相对来说样式的自由度会比较高。 但是在React的整体框架下，它的数据流向是自上而下的，如果你的modal中的内容依赖父级的数据，那可能就要将对应的组建挂载在依赖组建里面。当然…"}, {"id": "6964004470669705252", "title": "mern栈应用开发", "desc": "无论在后端还是前端，都使用 JavaScript。所以你只需熟悉一种语言，便可在客户端和服务器之间轻松切换，就可以高效开发一个完整的web应用。"}, {"id": "6844903799367139341", "title": "Node 深入 HTTP 模块", "desc": "1. HTTP服务器 # HTTP全称是超文本传输协议，构建于TCP之上，属于应用层协议。 设置超时时间，超时后不可再复用已经建立的连接，需要发请求需要重新建立连接。默认超时时间时2分钟 2. HTTP客户端"}, {"id": "6844904018561482759", "title": "gitbook 入门教程之自定义不一样的多语言首页插件", "desc": "在您的gitbook的 book.json 文件中，将 multilingual-index 添加到 plugins 列表中。 在 pluginsConfig ，将 enableSuper 设置为 false 可禁用默认主页，并添加 index值以自定义多语言主页。仅支持相对路…"}, {"id": "6844903904690307079", "title": "【工具】150行Node.js实现的dns代理工具", "desc": "这个我觉得应该还是挺实用的一个工具。开发过程中我们需要配置IP来访问测试环境域名。 使用电脑开发测试还好，直接使用Switch hosts! , 修改域名IP即可访问特定IP的域名网站。 手机要访问到测试环境的域名，我们需要做的就是建立一个代理服务，然后手机通过代理服务访问测试…"}, {"id": "6844903997195681799", "title": "彻底搞定Javascript事件循环", "desc": "众所周知，Javascript是一门单线程、非阻塞的脚本语言。这表示Javascript只有一个主线程来执行所有任务，各种任务必须排队来执行。既然如此，为什么浏览器可以在进行耗时较长的任务同时还能响应用户界面交互呢？所谓的非阻塞又从何说起呢？下面我们来具体探究一下。 异步任务可…"}, {"id": "6844903677786865671", "title": "Node中的两种遍历方式-深度优先和广度优先（附Node删除文件例子进行详解）", "desc": "树（Tree）是 n 个结点的有限集，n 为 0 时，称为空树，在任意一棵非空树中有且仅有一个特定的被称为根（Root）的结点，当 n 大于 1 时，其余结点可分为 m 个互不相交的有限集 T1、T2、......、Tm，其中每一个集合本身又是一棵树，并且称为 SubTree，…"}, {"id": "6871051790226292750", "title": "关于ES6尾调用优化", "desc": "ES6包含了一个性能领域的特殊要求。这与一个涉及函数调用的特定优化形式相关：即尾调用优化（TailCallOptimization，TCO）。简单地说，尾调用就是一个出现在另一个函数“结尾”处的函数调"}, {"id": "6844903504293675016", "title": "JS中的算法与数据结构——二叉查找树（Binary Sort Tree）", "desc": "主要是针对前端同学，将一些常见的算法和数据结构用 JavaScript 去实现，起到一个抛砖引玉的作用"}, {"id": "6977231962821885966", "title": "【Node.js】来了解下Node.js", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 一、Node.js能带给我们什么？ 如果你有一定的前端基础，比如HTML、CSS、JavaScript、jQuery；那么，Node.js能让你以"}, {"id": "6844903837912973326", "title": "Node - 内存管理和垃圾回收", "desc": "从前端思维转变到后端， 有一个很重要的点就是内存管理。以前写前端因为只是在浏览器上运行， 所以对于内存管理一般不怎么需要上心， 但是在服务器端， 则需要斤斤计较内存。 一般的后端语言开发中， 在基本的内存使用是没有限制的。 但由于Node是基于V8构建的， 而V8对于内存的使用…"}, {"id": "6844903790710423560", "title": "Node.js教程15：net模块初探", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 net 模块用于创建基于流的 TCP 或 IPC 的服务器（net.createServer()）与客户端（net.createConnection()）。 net模块是专门用于网络通信的模块，若当前的数据交互不…"}, {"id": "6844903661605224455", "title": "你可能会用到的一个路由适配器 ", "desc": "你是不是在想，这需求俺根本不用koa、koa-router，原生的node模块就可以搞定。 需要我们自己去解析路径。 路径的解析和逻辑的书写耦合在一块。如果未来有更多更复杂的需求需要实现，那就gg了。 通过上面的处理，路径的解析倒是给koa-router处理了，但是整体的写法还…"}, {"id": "6945044953517015047", "title": "模块化开发", "desc": "创建一个全局的对象，将所有的属性和方法都挂在这个对象上。 可以减少命名冲突问题。 通过封闭作用域，将想要外界调用的方法和属性，挂载到全局对象上（例:window.）。 模块与模块之间的依赖关系，可以通过参数来进行传递即可。 ES Modules 在语言层面实现了模块化，更为完善…"}, {"id": "6854573218301542413", "title": "Semo 系列文章之五：谈谈 REPL", "desc": "说到 REPL，基本上每个知名的编程语言都是有的，除了 Node，比如 PHP, Python 都是天然自带的，Java 和 Go 也有相应的解决方案可以进入到各自的 REPL 环境。 当你进入到 REPL，你很容易理解这是个什么东西，你可以在里面实验各种基本的语言特性，常见的…"}, {"id": "6844903971316842509", "title": "实现“乞丐版”的CommonJS模块加载", "desc": "最近看到“乞丐版”的Promise实现，所以想实现一个“乞丐版”的CommonJS规范的模块加载。希望由此： CommonJS规范相信大家都不陌生，Node.js正是因为实现了CommonJS规范，才有了模块加载能力，和在此基础上出现的蓬勃的生态。简言之： 每个文件就是一个模块…"}, {"id": "6907519458043133959", "title": "2020你应该知道的Node配置", "desc": "随着前端工程化和自动化的高效推行，NodeJS的发展起到了很大的推动作用，但对于经常使用脚手架的小伙伴们来说，对NodeJS除了安装之外，其它的都不是非常熟悉，导致出了问题无法排查，尤其在2020年换工作和找工作也异常的艰难，为了在逆境中脱颖而出，小编特意为大家总结了NodeJ…"}, {"id": "6844903510589341703", "title": "认识node核心模块--从Buffer、Stream到fs", "desc": "node中的Buffer和Stream会给刚接触Node的前端工程师们带来困惑，原因是前端并没有类似概念(or 有我们也没意识到)。然而，在后端，在node中，Buffer和Stream处处体现。Buffer是缓冲区的意思，Stream是流的意思。在计算机中，缓冲区是存储中间变…"}, {"id": "6844903890068979720", "title": "Node 的 3m 管理法，让你开发起来只专注写 bug", "desc": "不同的系统，安装 Node 的方式也是不同的，而且有的电脑上可能会存在很多 Node 版本，并且我们在使用到 Node 的地方，都会用到 Node 配套的 npm 包，大家最诟病的应该就是 npm 下载太慢的问题。这个时候就可以实践一下下面的 3m 安装法。 主要来自狼叔的《了…"}, {"id": "6844903556344971272", "title": "记一次简单的CSRF攻击实验", "desc": "CSRF攻击涉及用户受害者,受信任的网站和恶意网站。当受害者与受信任的站点拥有一个活跃的会话同时，如果访问恶意网站，恶意网站会注入一个HTTP请求到为受信任的站点，从而破话用户的信息。 CSRF 攻击总是涉及到三个角色:信赖的网站（Collabtive）、受害者的 sessio…"}, {"id": "6884675901603676167", "title": "MAC Homebrew安装node npm错误提示总结", "desc": "    mac安装了好几次node，但关机再开机就经常失效。有用安装包安装，也用homebrew安装过，最后导致管理混乱。今天开机发现node-v又不好用了。决定彻底解决一下。首先，尝试brewins"}, {"id": "6844903597675659271", "title": "Vue 服务端渲染技术", "desc": "所谓的Vue服务端渲染就是，将vue实例在服务端渲染成HTML字符串，将它们直接发送给浏览器，最后将静态标记“混合”为客户端上完全交互的应用程序。 更好的SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。 更快的首屏渲染速度。特别是对于网路速度慢或者运行缓慢的设备，无…"}, {"id": "6844903718542901255", "title": "CPM - 轻量的NPM私有源程序搭建", "desc": "建议前往NILPPM下载最新版本。此CPM不再维护。 CPM 是一套轻量且基础功能完善的私有Node包管理源。它是基于 clusic 的 rex 架构开发，拥有进程负载均衡的特点。它主要提供一整套简易安装模式，用户只需要clone此项目到本地，修改config文件夹下的文件即可…"}, {"id": "6844903827443810317", "title": "Node.js 一行命令上传本地文件到服务器", "desc": "现在存在的问题publish-sftp安全性实现快速上手installtipsexamplecopyremove谢谢阅读"}, {"id": "6974417058943467534", "title": "学习笔记：使用nodejs中的stream读取大文件内容", "desc": "在制作sitemap时，遇到使用readFileSync读取大文件受阻的情况，遂该用nodejs中的stream解决问题"}, {"id": "6854573208587206670", "title": "脚手架拉取模板文件的新思路", "desc": "通过编写脚手架，可以有效提高开发效率，减少一些重复性的工作，项目初始化时拉取远端模板就是一个比较好的方向。 之前有些大佬们（基于node.js的脚手架工具开发经历和【中高级前端必备】手摸手教你撸一个脚手架）已经给出了拉取远端模板的思路，美中不足的地方是都使用的download-…"}, {"id": "6963084439958061064", "title": "写一个 cli 命令行工具来管理自己的项目模板", "desc": "在我们使用 vue 开发项目的时候，一般都是使用命令行直接生成项目模板，eg: 如果我们想自己弄一个 cli 工具来管理自己的项目模板，该怎么弄呢？"}, {"id": "6844903614784225287", "title": "Node.js process 模块解读", "desc": "资源使用指运行此进程所消耗的机器资源。例如内存、cpu process是EventEmiiter的实例对象，因此可以使用process.on('eventName', () => {})来监听事件。 手动调用process.exit()或者触发uncaptException导致…"}, {"id": "6919075883458232328", "title": "不定日拱卒-通过模板动态生成可用代码", "desc": "背景现代前端开发中，模块化已经成为主流一般情况下，我们引入其他模块是使用es6的import方法在具体项目中，有时候我们的代码需要「通过变量拼接」动态引用其他的模块import语句不支持拼接路径遇到的"}, {"id": "6844903969127399432", "title": "Nodejs操作RabbitMq快速上手", "desc": "工作队列（又称任务队列）的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。相反，我们安排任务在以后完成。我们将任务封装 为消息并将其发送到队列。在后台运行的工作进程将弹出任务并最终执行作业。当您运行许多工作人员时，任务将在他们之间共享。 # （哈希）可以替代零个或多个…"}, {"id": "6962915702693396487", "title": "oclif，满足我对开发CLI的一切想象", "desc": "最近在做一个面向开发者的项目，需要开发一个CLI，用于连接开发者与项目站点。于是乎上手了oclif，一个开发CLI的好工具。"}, {"id": "6844904103961690126", "title": "Nodejs文件上传、监听上传进度", "desc": "文件上传如果加上进度条会有更好的用户体验（尤其是中大型文件），本文使用Nodejs配合前端完成这个功能。 前端我们使用 FormData 来作为载体发送数据。 下面我们实现upload 方法。 这部分比较简单，其实就是单纯的文件上传，我们用 Koa 来实现. 出于性能考虑，操作…"}, {"id": "6975716057847709703", "title": "记录第一次用node + mysql做接口", "desc": "一. 使用navicat建数据库 1. 下载mysql 安装指南 https://zhuanlan.zhihu.com/p/37152572 ，这篇文章很详细 安装时，MySQL会提示输入root用户"}, {"id": "6844903509704327182", "title": "Js 的多宿主时代", "desc": "Js运行机制深层剖析 这篇文章对事件循环机制的叙述基本是清楚的，但是并没有剥离出 Js 本身合宿主的部分。在此之前，我们对 Js 的讨论多是（默认）基于浏览器，不剥离似乎也不会有什么影响，时至今日，倘若要将我们的 Js 能力扩展到后台 Node、RN/Weex 端，剥离对待，将…"}, {"id": "6844904094776164365", "title": "SSR介绍 + NodeJS服务端渲染调研报告", "desc": "渲染生成页面，同时，JavaScript 代码会完成页面交互事件的绑定。 服务端渲染：所有数据请求和 html 内容已在服务端处理完成，浏览器收到的是完整的 html 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。 CSR 项目的 TTFP…"}, {"id": "6844904023443652622", "title": "生产环境下的 Node.js 日志记录方案", "desc": "使用 ElasticSearch，Fluentd和Kibana 设置 Node.js 日志记录基础结构。 设置正确的日志记录基础结构可帮助我们查找发生的问题、调试和监视应用程序。从最基本的角度来看，我们应该从基础架构中得到以下内容： 使用Bit（Github）在不同项目之间共享…"}, {"id": "6875249667027206157", "title": "【前端工程化】篇一 扬帆起航：开发环境", "desc": "老丈人爱吃核桃，昨天买了点陪媳妇儿送去，老丈人年轻时练过武，用手一拍核桃就碎了，笑着对我说：“你还用锤子，你看我用手就成”。我嘴一抽，来了句：“人和动物最大的区别就是人会使用工具”…… 虽然是个笑话，但是说得非常有道理的。人类从以前的石器时代到现在的信息科技时代，汽车代替了马车…"}, {"id": "6994253716148715534", "title": "Node 项目引入Ztree", "desc": "1.引入ztree依赖 2.main.js 引入ztree 3.vue.config.js 配置jquery"}, {"id": "6844904081148887048", "title": "教你用Node.js搭建本地服务器，并访问本地图片视频等静态资源", "desc": "看到这里如果对你有帮助的话帮忙点个赞吧。"}, {"id": "6960556263214153764", "title": "node.js快速入门", "desc": "当我们具备了足够的JavaScript知识后，下一步就要进行Vue的学习了。打开Vue的官方教程，第一步自然是安装： 那么这个npm是什么呢？该怎么调用这个命令呢？为什么会用到这个？"}, {"id": "6844903685466619911", "title": "读懂CommonJS的模块加载", "desc": "Common这个英文单词的意思，相信大家都认识，我记得有一个词组common knowledge是常识的意思，那么CommonJS是不是也是类似于常识性的，大家都理解的意思呢？很明显不是，这个常识一点都不常识。我最初认为commonJS是一个开源的JS库，就是那种非常方便用的库…"}, {"id": "6844903958595502093", "title": "nodejs 打印五彩斑斓的\"黑\"", "desc": "笔者上一篇博客 《如何在命令行中显示五彩斑斓的“黑”》，讲到了任何编程都可以在命令行终端打印彩色字体和彩色背景的文字，以及一些简单文本格式（粗体，下划线，闪烁，反转背景色，隐藏），并给出了 python 语言的实现。为了让前端开发的同学也能快速使用这一功能，在自己的项目中输出漂…"}, {"id": "6844903616902332424", "title": "JavaScript中不得不说的断言?", "desc": "仔细地查找一下JavaScript中的API，实际上并没有多少关于断言的方法。唯一一个就是console.assert： 当condition为false时，该方法则会将错误消息写入控制台。如果为true，则无任何反应。 几个方法的区别可以查看这可能是你学习ES7遗漏的知识点。…"}, {"id": "6844904183489888270", "title": "手把手带你实现装饰器路由", "desc": "很多小伙伴使用 Koa 或 Egg 之类框架写接口时一定碰到过下面这种令人头大的写法，每次我们定义一个路由写完 Controller 方法还要去 router 文件中再次定义一遍，非常的繁琐麻烦。 这种写法固然非常诱人，但是为了一个写法去切换框架的代价是非常大的，那么我们在 K…"}, {"id": "6876262553874989069", "title": "Node读取前端上传文件、图片通过FormData转换,搭配\"multipart/form-data\"上传图片，Node读取参数通过管道流储存图片", "desc": "问题是因为再使用Node，来接受前端传来的form-data参数，通过req.body获取不到，解析为{}空对象，后来发现原来是AJAX携带文件上传，前端采用的是multipart/form-data"}, {"id": "6895982513672421390", "title": "部署 Node.js 项目流程", "desc": "点击“用户身份验证”，输入你购买云服务器时设置给该服务器设置的用户名和密码，然后点击“确定”或者“连接”都可以。注意，不是你的阿里云账号密码，是云服务器的用户名和密码 随后你可以看到这个界面，说明连接成功。左侧的会话是你设置好的连接列表，双击即可进行连接"}, {"id": "6844903985426497543", "title": "在 Node.js 上运行 Flutter Web 应用和 API", "desc": "大量的跨平台应用开发框架，使你可以编写一次代码，然后在 Android，iOS 等多个平台上甚至在台式机上运行。你可能听说过一些流行的框架，例如 Ionic，Xamarin 和 React Native。另一个相对较新的框架是 Flutter。 在本文中，你将学到一些有关 Fl…"}, {"id": "6844903795269304328", "title": "Node.js微服务实践(一)", "desc": "作者|王澍什么是微服务微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所"}, {"id": "6844903705511215111", "title": "1. Context - React跨组件访问数据的利器", "desc": "2. React-Router的基本使用 3. react-router-dom源码揭秘 - BrowserRouter Context可以在组件树的组件之间共享“全局”数据。例如：登陆的用户信息，用户选择的主题、语言等等。下面的例子中，我们“手动”自上而下传递theme属性，…"}, {"id": "6892359241974153230", "title": "搭建 Typescript + Nodejs 的命令行开发环境", "desc": "本文记录了搭建基于 TypeScript 的 Nodejs 命令行开发环境的全过程。 首先，对于编写类库或者工具而言，使用 TypeScript 的最大好处就是其提供了类型机制，可以避免我们犯一些低级错误。 其次，配合编辑器(如 VS Code)，TypeScript 能提供强…"}, {"id": "6924616527236825102", "title": "decorator与依赖注入", "desc": "最近作者有在用Nestjs开发nodejs程序。 nestjs是构建在Express（默认）或Fastify之上的nodejs框架，借助Typescript和decorator提供了AOP（面向切面）、DI（依赖注入）等编程范式。 今天就来介绍，如何通过Typescript的d…"}, {"id": "6844903551785762824", "title": "使用vue-axios和vue-resource解决vue中调用网易云接口跨域的问题", "desc": "1. 新建vue项目 2. 使用axios 加载axios模块之后错误提示消失了。 这里的not allowed access就是提示我们浏览器不支持跨域请求，搜索了很多资料，网易云不支持跨域请求的(网易云的服务器在返回你的请求中没有Access-Control-Allow-O…"}, {"id": "6844904144969400334", "title": "node.js 请求谷歌和抓包那点事", "desc": "1. 用 node.js 请求谷歌的时候，访问不了。 2. node 做中间代理服务器的时候，会遇到 fiddler，whistle，charles 之类的软件抓不到 node 发出去的请求，难以调试。 1. 增加 proxy 属性配置 这里用 request.js 来举例，其…"}, {"id": "6844903741020192776", "title": "浅谈前端模块化", "desc": "前端模块化是前端工程化的基石。时下，大前端时代中对模块的运用更是无处不在。 模块应该是职责单一、相互独立、低耦合的、高度内聚且可替换的离散功能块。 模块化是一种分治的思想，通过分解复杂系统为独立的模块实现细粒度的精细控制，对于复杂系统的维护和管理十分有益。模块化也是组件化的基石…"}, {"id": "6963844415089541150", "title": "[Node系列] 模块机制一", "desc": "1. CommandJS的出发点 1.1. CommandJS的模块规范 CommandJS的模块规范分为三个部分: 模块引用、模块定义、模块标识. 模块引用 模块引用的方式: 模块的定义/模块的导出"}, {"id": "6903322902431531015", "title": "🚀🚀NODE爬虫，搞起～", "desc": "说到爬虫，大家想到的大多都是python。其实使用NodeJS也很适合写爬虫。针对一些简单，高效的小爬虫，Javascript比python更加合适。因为Javascript自带异步，能同时爬取多张网页内容比python更高效。但是python生态更加完整（主要是我还不会pyt…"}, {"id": "6844903733772419079", "title": "【小哥哥, 跨域要不要了解下】CORS 进阶篇", "desc": "众所周知, 后端 API 设计比较流行的范式就是 restful(到 2018 年 12 月 8 日). 在 restful 中分别用不同的 HTTP METHOD 标识后端的 CURD, 对于使用这些可能会更新后端数据的 HTTP METHOD 发出的跨域请求, 浏览器要首先…"}, {"id": "6844903617820901390", "title": "JavaScript柯里化", "desc": "Currying柯里化是函数式语言都有的一个特性，如Perl，Python，JavaScript。本篇就借用一下JavaScript，介绍一下柯里化的思想及应用。 这是个最普通的函数毫无新意。但对于你的站点来说，第一个参数固定为http，第二个参数固定为www.jackzxl.…"}, {"id": "6844903569166958605", "title": "node的process以及child_process", "desc": "在Node.js中每个应用程序都是一个进程类的实例对象。 使用process对象代表应用程序,这是一个全局对象，可以通过它来获取Node.jsy应用程序以及运行该程序的用户、环境等各种信息的属性、方法和事件。 在Node.js中，只有一个线程执行所有操作，如果某个操作需要大量消…"}, {"id": "6844903683163963406", "title": "阿里 Node 企业级框架 - Egg 10000 Star + 2 years ✨✨✨", "desc": "『大吉大利，明早吃蛋。』 底部有文化衫活动邀您参加。"}, {"id": "6844903552050003981", "title": "Nodejs Event Loop 详解系列", "desc": "目前看到关于解释Nodejs Event Loop最好的系列文章，共5篇。文章由面到点，讲解很详细，认真看完基本上对Event Loop的理解就不会有偏差了。"}, {"id": "6844904029978361870", "title": "event-promise 让事件回调，更容易使用Promise", "desc": "在 Node 中，我们经常需要连接数据库、Redis、Mq、Socket、Rpc等等，它们都是基于回调通知是否连接成功，在连接成功的时候才能进行对应的操作，EventPromise 就是专门为了解决它而存在，让你使用同步的形式调用异步的回调。"}, {"id": "6844903694622785543", "title": "IMWebConf 2018 圆满落幕，精彩内容回顾", "desc": "2018年10月14日，第七届IMWebConf前端大会在深圳科兴国际会议中心成功举办。今年大会现场参会人员近500人，线上直播参与人数累积近千人。 IMWebConf 是由腾讯前端 IMWeb 团队发起的国内顶级前端技术领域开发者大会。今年大会依旧汇聚了许多前端大咖，并且议题…"}, {"id": "6844903619343417358", "title": "概述nodejs核心机制", "desc": "non-blocking是指node.js进程中不同步等待执行非javascript操作（例如I/O）完成而继续执行下一块代码的特性。 pending callbacks 会在下一次loop中执行的系统级回调队列。如TCP ECONNREFUSED poll 接收新的I/O事件…"}, {"id": "6844903577249546253", "title": "认识并使用 Promise", "desc": "Promise 是一个异步操作返回的对象，用来传递异步操作的消息。 合并多个异步请求，节约时间。 Rejected 失败时的状态。 Promise.then()：用来指定 Promise 对象的状态改变时要执行的操作。 Promise.all()：接收一个数组，数组内是 Pro…"}, {"id": "6844903667401752584", "title": "新的V8是如何重构提速的？", "desc": "V8 进行了一次重大架构改造，包括对整个 V8 编译器体系结构以及大部分垃圾收集器的重构，用 TurboFan 取代了 Crankshaft，Orinoco 采用并行机制进行垃圾回收等，本文对这次升级改造进行了简单的介绍。 Node.js 社区中的很多人为最近 V8 的更新感到…"}, {"id": "6844903501902921742", "title": "Zepto中数据缓存原理与实现", "desc": "看一下上面那张图。简单地理解就是 对于DOM自定义数据的增删改查就是在对数字索引对应的对象进行操作。 基本用法大家肯定很熟悉，需要注意的地方是，我们也可以直接获取定义在html标签上以data-为前缀的属性。接下来我们就直接看源码实现啦 通过上面的例子我们知道，设置数据的时候可…"}, {"id": "6844903655368294414", "title": "前端另一种多语言的实现思路", "desc": "多语言i18n往常的做法是一个语言一个配置文件, 但是这样需要添加一个新的字符串时, 需要逐个打开许多个语言文件, 常常会漏, 并且每次修改一个字符都要编辑好几个文件. 我们换一种思路, 把 i18n 的多语言直接写在当前代码中,而不是写在配置文件中. 用一个方法,根据开发环境…"}, {"id": "6977410852244684836", "title": "初识buffer，stream和fs", "desc": "node中的Buffer和Stream给刚接触Node的我带来困惑，原因是前端并没有类似概念，而且也确实比较菜 Buffer是缓冲区的意思，Stream是流的意思。在计算机中，缓冲区是存储中间变量，方"}, {"id": "6844903645457186829", "title": "node中的http会了吗? 来手写一个属于自己的'cgp-server'静态服务", "desc": "用到debug插件，主要用于在命令行输出一些日志，我们只用基本的功能，所以没有难点。不会戳这里 1.txt的内容123456789。我们只想要前4个字符 npm link命令可以将一个任意位置的npm包链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该npm包。 简单…"}, {"id": "6844903612859023367", "title": "Promise异步控制流模式", "desc": "现在的 Node.js 核心实用工具库util里面已经支持(err, value) => ...回调函数是最后一个参数的函数, 返回一个返回值是一个promise版本的函数。 在看异步控制流模式之前，先开始分析顺序执行流。按顺序执行一组任务意味着一次运行一个任务，一个接一个地运…"}, {"id": "6844903521213480973", "title": "用commander做一个自己的eslint脚手架", "desc": "如今前端工程化，自动化已经成为了新趋势，如果我们要重新开始做一个项目，你会花费多久的时间在前期环境的搭建上呢？在我们前端的的积累中，我们需要将这些技术沉淀下来，便于我们开始一个新的项目，而不必花费过多的经历在环境搭建中。 这次我做的是一个集成了 eslint、stylelint…"}, {"id": "6844903584069353485", "title": "异步的发展过程", "desc": "我现在还是有两个文件，我要用fs去读取，然后异步的问题就来了，我怎么知道哪个先读完，哪个后读完。"}, {"id": "6844903758908932109", "title": "node开发web程序---04构建node web程序", "desc": "添加和移除响应头的顺序可以随意，但一定要在调用 res.write() 或 res.end() 之前。在 响应主体的第一部分写入之后，Node会刷新已经设定好的HTTP头。 设定 res.statusCode 属性。在程序响应期间可以随时给这个属性赋值，只要是在第一次调用 re…"}, {"id": "6844904048315858957", "title": "《深入浅出Node.js》学习笔记（五）", "desc": "基于无阻塞、事件驱动建立的Node服务，具有内存消耗低的优点，非常适合处理海量的网络请求。 1. V8的垃圾回收机制与内存限制 对于性能敏感的服务器程序，内存管理的好坏、垃圾回收状况是否优良，都会对服务构成影响。而在Node中，这一切都与Node的JavaScript执行引擎V…"}, {"id": "6844903506273386504", "title": "nodejs第三天(全局对象)", "desc": "就如同浏览器中的window一样，在Node中把一些全局都能够访问的变量方法都放到了global中。我们可以在node的REPL中输入global来看一看里面到底有些什么东西。 多的就不贴了，在global中我们可以发现几个全局对象: console 、 process 、 g…"}, {"id": "6844903535155363853", "title": "你可能不知道的 Date 类", "desc": "Date 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（不同于 Unix 时间戳的长度 10 位）。对于日期和时间，我们有无数的使用场景，因此需要特别注意一些细节和约定。 通过 …"}, {"id": "6844903775107465229", "title": "笔记：PostgreSQL 、Node.js 、函数计算", "desc": "前言技术栈node.jspostgresqlnodemailer编写postgresqllibconfig配置文件如下ControllerBaseControllerInqueryController"}, {"id": "6844903656228290573", "title": "我已经迷失在事件环(event-loop)中了【Nodejs篇】", "desc": "浏览器中和nodejs环境中的事件环是有一些区别的，这里我只研究了nodejs环境，小黑框情况下的事件环。 这里的事件环并不是指单独一件事件的循环，而是我们写的很多很多的事件按照一定地规则排着队去执行，然后队列清空后继续排队，就是事件环。 timers: 定时器setTimeo…"}, {"id": "6844903577161318407", "title": "异步流程处理", "desc": "await 顾名思义 等待。那他在等待什么呢。 这个取决于await 后面跟着的内容"}, {"id": "6844903604394917896", "title": "走在JS上的全栈之路(一)", "desc": "首先声明下写这篇文章的初衷，自己也还是在全栈之路探索的学徒而已。写系列文章其一是记录下自己在搭建整站中的一些心得体会(传说有一种武功是学了就会忘记的，那就是写代码。。。)，其二是希望与各位读者交流下其中遇到的坑和设计思路，怀着向即将出现的留言区学习的心态来此~~ 同构应用本身的…"}, {"id": "6989417061495767070", "title": "工程化项目配置文件", "desc": "tsconfig.json 标识Typescript项目的根目录。文件中制定了用来编译这个项目的根文件和编译选项。当tsc命令行指定了输入文件时，tsconfig.json文件会被忽略。 .babel"}, {"id": "6950982227941392398", "title": "Buffer模块简介【NodeJS】", "desc": "JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存"}, {"id": "6977399909532041247", "title": "NodeJS使用Koa框架开发对接QQ登陆功能", "desc": "NodJS+koa+Vue小白篇实现QQ登陆功能，前言：文章写的比较少，嘿嘿 开发准备 注册开发者账号 首先我们需要先去腾讯开发者平台认证注册成为个人开发者 输入网址：https://op"}, {"id": "6844903655473152008", "title": "浅析setTimeout与Promise", "desc": "关于JavaScript异步编程，前文解析过了JavaScript并发模型，该并发模型基于事件循环。正巧又在Stackoverflow上回答了一个关于setTimeout与Promise执行顺序相关的问题，于是总结这一知识点，与更多读者分享，同时完善JavaScript异步编程…"}, {"id": "6844903558848970760", "title": "零基础实现node+express个性化聊天室", "desc": "先用node搭建一个服务器，部署在localhost:3000端口，先尝试向浏览器发送一个“hello world”，新建server.js文件。 一个node服务器搭建成功。 express.static(__dirname + '/www');是将www文件夹托管为静态资源…"}, {"id": "6906081807234990094", "title": "滴滴NodeX生态", "desc": "Node.js 是一个非常新兴的开发工具，虽然它诞生自 2009 年，但是它确实有史以来发展最快的开发工具，没有之一。在这短短的几年间，我们看到了 Node.js 从当初的一无所有到如今的飞速发展，说明这背后的需求场景是巨大的。 滴滴NodeX FT是由普惠、金融、车服三个泛前…"}, {"id": "6984245750171598885", "title": "异步模型的脆折风险----从一次 Node 服务故障谈起", "desc": "当抵达 Node 服务的请求数达到理论最高吞吐量时, 单个请求的响应时间和所有请求平均响应时间会是什么关系"}, {"id": "6844904007270563848", "title": "「进击的前端工程师」Node.js事件循环", "desc": "事件循环的执行顺序从图中可以看出，每次的事件循环都包含了上图中的6个阶段，接下来我们来一一解读它们。 setTimeout()和setInterval()和浏览器中的API是相同的。它们的实现原理与异步I/O比较类似，但是不需要I/O线程池的参与。 这两个定时器创建后会被插入到…"}, {"id": "6844903618013822984", "title": " Node.js + Nginx 部署 HTTPS 服务", "desc": "今天，经过无数次折腾，向往已久的域名备案终于下来了。于是迫不及待地将个人博客网站进行 HTTPS 部署迁移，中间遇到一些坑，在此做个记录。 https 更安全，相对于 http 可以较为有效防止中间人攻击，每个项目都希望安全托底。博客虽然没有重要数据，但不失为练兵的好地方。 为…"}, {"id": "6844903653891899399", "title": "使用Sequelize连接数据库", "desc": "Sequelize.js是一款针对nodejs的ORM框架。 使用nodejs连接过数据库的人肯定对数据库不陌生了。如果是直接链接，需要自己建立并管理连接，还需要手动编写sql语句。简单的项目到是无所谓，可是一旦项目设计的东西比较复杂，表比较多的时候整个sql的编写就非常的消耗…"}, {"id": "6844903584933347335", "title": "webpack4.0打包优化策略(一)", "desc": "happypack提供的loader，是对文件实际匹配的处理loader。这里happypack提供的loader与plugin的衔接匹配，则是通过id=happypack来完成。\b\b 资料:happypack原理解析-淘宝前端\b 将web应用依赖的基础模块抽离出来，打包\b到单…"}, {"id": "6844904013054345223", "title": "crypto 前后端加解密简单了解", "desc": "文章记录crypto库的简单了解和用法。 文中主要介绍node 的cypto模块，结合前端crypto-js演示（crypto-js是javascript 实现的cypto库）。 1. crypto Crypto++ 库是一个用c++ 编写的密码类库,提供完整的加密实现，并且通…"}, {"id": "6958671748023730184", "title": "nodeJs + vueJs 实现大文件分片上传", "desc": "在常规的应用场景中，很少需要在浏览器上传几百兆、几千兆的文件，但假如在特殊场景中需要浏览器上传超大文件，那么我们如何上传？如何优化？ 下面的示例全部由 vueJs 和 nodeJs 来完成 做这个之前"}, {"id": "6844903653396971533", "title": "麻烦把JS的事件环给我安排一下！！！", "desc": "上次大家跟我吃饱喝足又撸了一遍PromiseA+，想必大家肯定满脑子想的都是西瓜可乐...... 呃，清醒一下，今天大家搬个小板凳，听我说说JS中比较有意思的事件环，在了解事件环之前呢，我们先来了解几个基本概念。 感觉说起来并不是很好理解，我们举个例子，比如有一个乒乓球盒，我们…"}, {"id": "6886289343544033287", "title": "Node.js 15 正式版发布", "desc": "前两天，Node.js官方发布了Node.js 15的正式版本，Node.js 15 将替代 Node.js 14 成为当前的的稳定发行版，后者将在本月晚些时候升级为 LTS（长期支持）版本。如果大家想体验下Node.js 15 的最新功能，可以从官方进行下载。 AbortCo…"}, {"id": "6844903602117410829", "title": "持续更新的前端资源图谱", "desc": "前端资源图谱，更好的管理自己的技术栈。日常工作中可随时翻阅，平日休息中可随时学习。工作生活必备的利器。"}, {"id": "6994076970514382885", "title": "node.js的readline在终端命令行中的执行流程", "desc": "node readline的解析分两个阶段，一是准备阶段，这个阶段实现对用户输入的监听；另外一个是命令行中的输入输出阶段，这个阶段对用户输入的字符做解析，然后回显，根据用户输入的字符触发不同的动作；"}, {"id": "6975850137960595487", "title": "Node.js系列六 - Buffer的使用", "desc": "一. 认识Buffer 1.1. 数据的二进制 计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。 JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给"}, {"id": "6844903542482960392", "title": "前端挑战全栈 13 集原创 Koa2.x 免费视频奉上", "desc": "Koa2是现在最流行的基于Node.js平台的web开发框架，它很小，但扩展性很强。13集免费视频，让你更简单快速得上手Koa2。Koa给人一种干净利落的感觉，体积小、编程方式干净。国内很多知名互联网公司都在使用。"}, {"id": "6844903621516066830", "title": "vscode 调试node之npm与nodemon", "desc": "调试nodejs有很多方式，可以看这一篇How to Debug Node.js with the Best Tools Available，其中我最喜欢使用的还是V8 Inspector和vscode的方式。 就能看到launch.json的文件了。 当request为lau…"}, {"id": "6983556902932185102", "title": "从零开始开发cli", "desc": "这是一篇篇幅很长的文章，分为四个部分1. 使用npm发布插件包2.学习使用commander.js插件3.学习使用inquirer.js插件4.在vue-cli基础上封装一个cli"}, {"id": "6844903636737196045", "title": "Promise到底解决了什么问题？", "desc": "大家都知道Promise解决了回调地狱的问题。说到回调地狱，很容易想到下面这个容易让人产生误解的图片： 这也是嵌套，虽然好像不是特别美观，可我们并不会觉得这有什么问题吧？因为我们经常会写出类似的代码。 在这个例子中的嵌套的问题仅仅是缩进的问题，而缩进除了会让代码变宽可能会造成读…"}, {"id": "6953538678803136549", "title": "三段代码区别Node中的exports和module.exports", "desc": "仅仅利用三段简单的代码就可以理解Node.js中的有关exports和module.exports的区别和联系。"}, {"id": "6844903998600773646", "title": "手写CommonJS 中的 require函数", "desc": "node.js 的应用采用的commonjs模块规范。 每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等，对其他的模块都不可见。CommonJS规范规定：每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exp…"}, {"id": "6844904193489125390", "title": "nodejs各种姿势断点调试", "desc": "2. 调试npm scripts 6666是任意指定的调试端口号。 增加以下3个配置项，runtimeExecutable，runtimeArgs，port。 3. 调试非node命令 以下配置，会自动执行npm run debug，但不会进入断点。 1. Auto Attac…"}, {"id": "6844904004502159373", "title": "Node.js v13.2.0 开始支持ES modules了", "desc": "Node.js 前不久发布了v13.2.0，宣布开始支持ES modules。在此之前，想要在node中使用ES modules，需要添加--experimental-module。v13.2.0版本后，可以直接使用ES modules了。 如果在命令行使用ES module，…"}, {"id": "6844904004024008711", "title": "Node新版本13.2.0正式支持ES Modules特性", "desc": "在本月 21 日，即2019.11.21，Node.js 发布了 13.2.0 版本，更新了一些特性。其中最令人兴奋的莫过于正式取消了 --experimental-modules 启动参数。这说明Node.js 正式支持 ES modules。我们一起来看看。 Stabili…"}, {"id": "6844903604437041160", "title": "HTML5拖拽API实现vue树形拖拽组件", "desc": "因业务场景需要一个可拖拽修改节点位置的树形组件，因此动手撸了一个，乘此机会摸了一把html5原生拖拽。近期有时间将核心部分代码抽出，简单说下实现方式。 vue组件允许在它们自己的模板中调用自身，因此可以形成树形结构，在组件中必须填写唯一的name。 这里将ondragstart…"}, {"id": "6946231743837896734", "title": "详细解读 Webpack 的模块热替换功能", "desc": "在开发 JavaScript 应用程序时，每次我们保存代码更改后，我们都需要重新加载浏览器以刷新用户界面。 像 Webpack 之类的开发者工具可以通过监视模式来监听项目文件的更改。一旦检测到更改，Webpack 就会自动地重新构建应用程序并重新加载浏览器。 我们正在使用的所有…"}, {"id": "6914107204404674568", "title": "nodejs从零开发CLI工具", "desc": "Command Line Interface，是一种通过命令行来在运行一些代码，来实现某些功能的工具或者应用，如我们前端开发的过程中使用到的，vue-cli，webpack等等，使用他们可以减少开发中的一些低级重复劳动，或者规范开发工作流，提高开发效率。 ./bin/index…"}, {"id": "6975499534860288036", "title": "PHP 和 CryptoJS AES 加解密互通", "desc": "PHP 和 CryptoJS AES 加解密互通。PHP 和 CryptoJS AES 加解密互通。"}, {"id": "6844903637446049800", "title": "《地图气球》小程序从产品到运维的个人全栈开发过程分享（长文）", "desc": "怕过不了审，先声明一下，这不是广告，因为这个小程序没上架。 从5年前入行的时候就一直想做一个社交产品，最近工作略闲，加之小程序火爆，下班后时间多，于是就花费了一个月业余时间，动手做了一个基于地理位置的信息社交类小应用，由于个人资质无法上线此类的小程序，开发过程仅为锻炼思维和技术…"}, {"id": "6949840237723910180", "title": "Buffer和文件流读写", "desc": "本文是buffer和文件流读写操作的学习记录，涉及到进制转换，buffer常用方法，以及可读流和可写流的简单原理理解和模拟实现"}, {"id": "6844903560988082184", "title": "React 16.3来了：带着全新的Context API", "desc": "React在版本16.3-alpha里引入了新的Context API，社区一片期待之声。我们先通过简单的例子，看下新的Context API长啥样，然后再简单探讨下新的API的意义。 文中的完整代码示例可在笔者的GitHub上找到，点击传送门。 需要安装16.3-alpha版…"}, {"id": "6844904055240654856", "title": "深入Node.js的进程与子进程：从文档到实践", "desc": "process 模块是 nodejs 提供给开发者用来和当前进程交互的工具，它的提供了很多实用的 API。从文档出发，管中窥豹，进一步认识和学习 process 模块： 传给 node 的参数。例如 node --harmony script.js --version 中，--…"}, {"id": "6921692824535007246", "title": "再学Node EventLoop", "desc": "一、概览1.浏览器的EventLoop浏览器的EventLoop是在Html5规范(参考：https://html.spec.whatwg.org/multipage/webappapis.html)"}, {"id": "6895702603003330573", "title": " 77.9K Star 的 Axios 项目如何优雅实现请求重试", "desc": "项目中，经常会有很多用户的网络抽风或者各种原因造成偶发性的网络异常请求错误，如果没有重试机制，有时候体验就比较糟糕。这个时候实现网络错误请求错误重试也能比较好的解决这种偶发场景。 我们可以使用axios-retry这个库去实现重拾。用法也非常简单 直接执行axiosRetry传…"}, {"id": "6844903609251921934", "title": "超简单的前端跨域、前后端分离解决方案", "desc": "LiveNode是一个基于Node.js轻巧的web服务，帮助前端开发者解决本地跨域，代码刷新，以及SPA(单页应用)前后端服务分离，并且可以用于生产环境项目部署。 src 目录为项目容器目录，html、css、js等代码放入该目录即可。(注意!不可修改src目录名称) 当sp…"}, {"id": "6974558861856358407", "title": "如何使用NodeJS调试神器VSCode Debugger", "desc": "在写NodeJS应用的过程中越发感受到VSCode Debugger有如神助。我通过加断点查看局部变量配合对照修改代码重新运行的方式帮我理清了很多问题，提高了效率。"}, {"id": "6965026047926484999", "title": "Nodejs之express用户登录的2种方法", "desc": "本文记录了nodejs中通过session和token如何实现用户登录。 欢迎大佬进来指点，希望能和大家共同进步！"}, {"id": "6994426626876375076", "title": "前端小白不迷路-介绍下Node.js提供的fs 文件系统模块", "desc": "浏览器固然很强大，但是不能操作用户电脑里的文件，比如打开指定的文件，对文件夹里新增或删除文件。而node就不一样了，它可以操作我们文件，其中fs 模块是 Node.js 官方提供的,一起来了解吧！"}, {"id": "6844903518826921998", "title": "为你的网站带上帽子 — 使用 helmet 保护 Express 应用", "desc": "Express 基于 Node.js，是一款用于构建 Web 服务的优秀框架。它很容易上手，且得益于其中间件的概念，可以很方便地进行配置与拓展。尽管现在有各种各样的用于创建 Web 应用的框架，但我的第一选择始终是 Express。然而，直接使用 Express 不能完全遵循安…"}, {"id": "6844904030905303054", "title": "深入了解Nodejs模块机制", "desc": "我们都知道Nodejs遵循的是CommonJS规范，当我们require('moduleA')时，模块是怎么通过名字或者路径获取到模块的呢？首先要聊一下模块引用、模块定义、模块标识三个概念。 模块上下文提供require()方法来引入外部模块，看似简单的require函数， 其…"}, {"id": "6898104998547161096", "title": "Base64 编码入门教程", "desc": "Base64 是一种基于 64 个可打印字符来表示二进制的表示方法。具体的 64 个字符如下图所示： 早期邮件传输协议基于 ASCII 文本，对于诸如图片、视频等二进制文件处理并不好。 为了解决上述问题，Base64 编码顺势而生。 （1）首先对待编码字符串进行每 3 个字节分…"}, {"id": "6939872514927493156", "title": "「造轮子」开发油猴插件脚手架Wokoo | 项目复盘", "desc": "这篇文件介绍的是油猴插件脚手架Wokoo的开发过程与复盘。Wokoo是我开发的脚手架，用来快速起一个基础项目用于油猴插件的开发。 在这个项目中我扮演了项目的产品经理，开发主R，运营官 这几个角色。从头到尾负责开发一个开源项目，让我有了满满的成就感。 回想当初想做Wokoo脚手架…"}, {"id": "6982592718916550687", "title": "定时器: Linux 中的 epoll", "desc": "在Libuv中的timer中大胆猜测了epoll是通过linux中低精度定时器实现的，不幸的是只猜对了一半。关于epoll在timer中的应用需要关注两个地方: 同步阻塞和定时触发，其中定时触发是通过"}, {"id": "6844903669301772301", "title": "三种缓存方式，再也不用麻烦运维小哥哥了！！！", "desc": "我们都知道，对于我们前端开发来说，缓存是一个十分重要的东西，即希望用户不能每次请求过来都要重复下载我们的页面内容，希望为用户节省流量，并且能提高我们页面的浏览流畅度，但是同时当我们修改了一个bug后，又希望线上能够及时更新，这时候就要求爷爷告奶奶让运维小哥哥帮我们刷新一下缓存了…"}, {"id": "6844903587391225863", "title": "合格前端系列第十一弹-初探 Nuxt.js 秘密花园", "desc": "笔者最近业余时间想着学点新东西，于是开始接触服务器端渲染（SSR），花了一周的时间学习和实战，然后在周末高仿掘金撸了一个 SSR 的 Demo 项目。 技术栈选的是平滑开箱的 Nuxt，整个项目整合了 vue + nuxt + axios + vuex + vue-router…"}, {"id": "6889226643525599240", "title": "node.js 沙盒逃逸分析", "desc": "日常开发需求中有时候为了追求灵活性或降低开发难度，会在业务代码里直接使用 eval/Function/vm 等功能，其中 eval/Function 算是动态执行 JS，但无法屏蔽当前执行环境的上下文，但 node.js 里提供了 vm 模块，相当于一个虚拟机，可以让你在执行代…"}, {"id": "6844903674183942152", "title": "http请求头与响应头的应用", "desc": "本文要聊聊浏览器可爱的头头头……们。 咱们挨个探个究竟。 Content-Type表示请求头或响应头的内容类型。作为请求头时，利用它可以进行body-parser。 即在处理数据之前用中间件对post请求体进行解析。 step3: 测试。 先启动server,再启动client…"}, {"id": "6900804943654060045", "title": "Node - 搭建自己的第一个Node服务（二）", "desc": "“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine”官网的一句介绍大致是说“Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时”，简单来说就是一个能让…"}, {"id": "6972006652631318564", "title": "Node 最新 Module 导入导出规范", "desc": "大力智能前端团队同学对Node包模块最新规则进行了详尽的研究，给大家带来了最新的Node包模块导入导出规则，希望大家在以后工作中能够得少踩一些坑。"}, {"id": "6844903710074601479", "title": "教你如何用node.js开发微信公众号（一）", "desc": "本文章简单介绍了如何用node.js开发微信公众号。主要内容包括微信公众平台的配置，signature的验证，以及用node.js去处理用户主动发起的行为。 开发前需要安装好node.js,因为我是基于express框架开发的，所以装了express(框架按自己的需求选择),需…"}, {"id": "6992520670034788365", "title": "前端小白不迷路，今天来学习如何利用express模块开启本地服务器", "desc": "express是NodeJs的第三方模块，用于快速搭建服务器，可以看作是http内置模块的升级，相当于jQuery,使用它可以非常便捷地开启本地服务，快进来看看吧"}, {"id": "6844903559733968904", "title": "Node.js：上传文件，服务端如何获取文件上传进度", "desc": "multer是常用的Express文件上传中间件。服务端如何获取文件上传的进度，是使用的过程中，很常见的一个问题。在SF上也有同学问了类似问题《nodejs multer有没有查看文件上传进度的方法？》。稍微回答了下，这里顺便整理出来，有同样疑问的同学可以参考。 下文主要介绍如…"}, {"id": "6844903709323837454", "title": "前端错误收集以及统一异常处理", "desc": "代码是很难真正意义的完全按照开发者的想法运行的，意外情况总是层出不穷，放任不管显然不是一个合格的开发者该做的事情，错误信息该如何进行处理、收集以及分析显得尤为重要，这篇文章就对于这部分内容进行讨论。 那对于前端同学来说，错误往往会阻塞程序运行，并抛出一个错误，给用户极其不好的体…"}, {"id": "6844903604898267144", "title": "小程序之图片瀑布流（最全实现方式，额外加送懒加载）", "desc": "所有的链接都是http://cued.xunlei.com/demos/publ/img/P_${name}.jpg这样的格式，我们需要改变name的值就行了，当name值小于10的时候，格式是00x,如002、003，大于10的时候就是023这种。 瀑布流布局是一种比较流行的…"}, {"id": "6968639978242834468", "title": "Node.js 环境设置 - for mac os", "desc": "Node.js 环境设置 - for mac os，mac os m1 中 解决方案，arch -x86_64 zsh"}, {"id": "6844904196848762888", "title": "从GraphQL到前端数据管理的革命 - GraphQL干货笔记", "desc": "你知道吗？FaceBook、GitHub，Pinterest，Twitter，Sky，纽约时报，Shopify，Yelp这些大公司已经在使用GraphQL规范的接口规范了。再不学习就落后了。 1. 面对复杂场景的API粒度问题 1. API版本划分问题 2. 实现双向通讯时接口…"}, {"id": "7008006326857138184", "title": "一篇文章带你了解Node.js的性能指标", "desc": "通过V8 GC和CPU Profile日志，分析Node.js进程内存和CPU使用，让你整体了解Node.js的性能指标，列举现有性能分析平台工具的能力，注服务器性能，让你的应用稳定性更强"}, {"id": "7007679263931367455", "title": " 我们身边的 node_modules", "desc": "引言 小明接收一个需求。需求是这样：” 升级 T (sdk) 以在 Q (App) 兼容 P项目 (h5) “。需求很简单，理论上只需要升级 A 就可以。但是在实际的过程中并不轻松。列举一个case "}, {"id": "7007619659201511432", "title": "Koa 拾遗 一 : Koa 的中间件机制", "desc": "Node.js HTTP 模块 Node.js HTTP 模块怎么使用? Node.js 中的 HTTP 模块, 是 Node 可以作为 Webserver 的基础. 是一个原生的模块. 基于这个模块"}, {"id": "7004967490790883365", "title": "前端工程化实战 - 自定义 CLI 插件开发", "desc": "前言 在上一篇的动态模板之后，我们已经完成了一个常规 CLI 工具需要的基本功能，包括了构建（webpack、rollup）、质量（eslint 校验）、模板（动态模板管理） 等等可以统一管理的模块。"}, {"id": "7007318998060630029", "title": "NodeJS 服务 Docker 镜像极致优化指北", "desc": "这段时间在开发一个腾讯文档全品类通用的 HTML 动态服务，为了方便各品类接入的生成与部署，也顺应上云的趋势，考虑使用 Docker 的方式来固定服务内容，统一进行制品版本的管理。"}, {"id": "7007077511779581982", "title": "没听过吧，用Node写一个TodoList😜（一、搭建一个简易Node服务器）", "desc": "没听过吧，用Node写一个TodoList😜（一、搭建一个简易Node服务器）一个不会Node的前端不是一个好的产品经理"}, {"id": "7007296290941861925", "title": "没项目经验，搞定这7个前端项目让你脱颖而出", "desc": "很多面临毕业的学生想入行前端，但苦于缺少项目经验，不知道做个什么项目能够达到公司的用人要求。也有很多前端的初学者，不知道做什么项目能找到工作。还有就是刚刚工作几年的前端工程师，可能在公司做的东西每天就"}, {"id": "7008024554433937445", "title": "一篇文章带你了解Node.js的性能指标", "desc": "前言 对于我们前端工程师来说，掌握Node.js应用开发是我们走上资深/专家的一条必经之路。此外Node.js是一门服务端语言，我们不仅要能够完成开发任务，而且更应该要关注服务器性能。"}, {"id": "7007285025586544654", "title": "一起来学习Node.js吧", "desc": "什么是Node.js 简单的说 Node.js 就是运行在服务端的 JavaScript。 Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。 Node.js是一个事"}, {"id": "7007233910681632781", "title": "浅析 Node 的模块系统", "desc": "模块化的背景 早期 JavaScript 是为了实现简单的页面交互逻辑, 但随着时代发展, 浏览器不单单仅只能呈现简单交互, 各种各样的网站开始大放光彩。随着网站开始变得复杂化，前端代码日渐增多，相对"}, {"id": "7005375860509245471", "title": "50行代码串行Promise，koa洋葱模型原来是这么实现？", "desc": "阅读本文，你将学到： 1. 熟悉 koa-compose 中间件源码、可以应对面试官相关问题 2. 学会使用测试用例调试源码 3. 学会 jest 部分用法"}, {"id": "7002486827227545607", "title": "为了多喝两杯奶茶☕，我给自己的项目写了自动化脚本", "desc": "事情是这样的，之前有段时间在搭自己的组件库，每次新增一个组件的时候都需要进行一些重复的操作花了我很多喝奶茶的时间..."}, {"id": "6994224541312483336", "title": "「万字进阶」深入浅出 Commonjs 和 Es Module", "desc": "一 前言 今天我们来深度分析一下 Commonjs 和 Es Module，希望通过本文的学习，能够让大家彻底明白 Commonjs 和 Es Module 原理，能够一次性搞定面试中遇到的大部分有关"}, {"id": "7006175283157925896", "title": "深入理解端口的本质、Node.js Socket 的本质", "desc": "作为 web 工程师，我们每天都在和端口、socket 打交道，用的话可能很多人会用，但是问到它们的本质，可能能答出来的就很少了。 这篇文章，我们就来探究下端口和 socket 的本质。 端口 我们网"}, {"id": "7006221233830395941", "title": "Node.js又一框架：Nest.js（六）", "desc": "Nest.js（v7.x）控制器之CRUD模板篇：基于一个完整的基本控制器示例，了解手动建立方式下如何将控制器跟模块绑定。最后，介绍如何采用 Nest CLI 自动实现上述内容。"}, {"id": "7002106372200333319", "title": "「Nodejs万字进阶」一文吃透异步I/O和事件循环", "desc": "一 前言 本文讲详细讲解 nodejs 中两个比较难以理解的部分异步I/O和事件循环，对 nodejs 核心知识点，做梳理和补充。 送人玫瑰，手有余香，希望阅读后感觉不错的同学，可以给点个赞，鼓励我继"}, {"id": "7006148188734226440", "title": "Node.js又一框架：Nest.js（五）", "desc": "Nest.js（v7.x）控制器之剩余概念篇：控制器模块相关的概念，除了路由、Request，还有状态码、Headers、路由参数、异步性、请求负载等需要了解。"}, {"id": "6997558431481593893", "title": "【玩转掘金】 我的赞，我的💗，都给了谁，有你吗？", "desc": "进入个人主页一看，自己已经给别人点赞过千了，我滴个神。我的这些💗，都给了谁呢，追寻真像，自己动手实现一个吧。"}, {"id": "7007317329583276069", "title": "把node文件拷贝写成npm包，并发布", "desc": "把node文件拷贝写成npm包，并发布 发布npm其实是一件很简单的事情，只是因为长时间不发布会忘记，又得上网去查一下，所以就写篇文章记录一下"}, {"id": "7007316927949307912", "title": "Node.js又一框架：Nest.js（七）", "desc": "初识 Nest.js（v7.x）数据库：了解单个 MySQL 数据库如何连接，然后观摩一个实体如何从定义到插入 module，再到在 service 中的使用。"}, {"id": "6844903956129251335", "title": "nodejs深入学习系列之libuv基础篇(一)", "desc": "学习完nodejs基石之一的v8基础篇(还没看过的童鞋请跳转到这里：nodejs深入学习系列之v8基础篇)，我们这次将要继续学习另外一块基石：libuv。关于libuv的设计思想，我已经翻译成中文，还没看过的童鞋还是请跳转到这里： [译文]libuv设计思想概述，如果还没看完这…"}, {"id": "6844904004376330247", "title": "「进击的前端工程师」Node.js异步编程进化论", "desc": "我们知道，Node.js中有两种事件处理方式，分别是callback(回调)和EventEmitter(事件发射器)。本文首先介绍的是callback。 error-first callback 错误优先是Node.js回调方式的标准。 第一个参数是error，后面的参数才是结…"}, {"id": "6844904191878496263", "title": "傻瓜式通俗易懂nodejs连neo4j教程，一个坑都不想踩！", "desc": "这是一个全套的傻瓜式教程，把可能出现问题的地方进行了汇总，日常项目习惯了nodejs，（也许java和python会很方便），加上nodejs的教程少，做一个分享帮助大家一次教程，快乐连通。 毕设内容里有一个图谱相关的内容，之前一直用静态的json文件，想着加个数据库能够实现动…"}, {"id": "6887937224059568141", "title": "Nodejs应用生产环境远程调试", "desc": "本文源于对Node应用生产环境的一次调试经历，当时遇到一些问题，遂作记录。如果对Node应用程序调试不熟悉的同学可以先行阅读以下官方文档： 为什么要选择Chrome DevTools进行调试而没有用VS code js debugger，这是因为虽然VS code可以通过Att…"}, {"id": "6844903921731780615", "title": "利用 Redis 解决 NodeJS 中 Session 存储问题", "desc": "session 同步问题，假设我们现有两个站点，分别为a.hello.com b.hello.com，如果要实现多站点共享 Cookie，基本就是把 Cookie 的 Domain 属性设置成 .hello.com，这样的话，我们在a.hello.com完成了登录，进入b.he…"}, {"id": "6844904201181462535", "title": "NodeJS 爬新闻，GitHub actions 部署服务", "desc": "由于最近看本地新闻时，总是这个新闻网看到那个新闻网，感觉实在是麻烦，兴起想自己写个小爬虫来爬取一些新闻组合成自己的一个新闻列表。选取 Node 来实现。源码：news-crawler 效果：news.imondo.cn 程序使用 ejs 来渲染，由于程序主要是使用 koa 来搭…"}, {"id": "6844903586795618311", "title": "Node.js核心入门（二）", "desc": "fs 模块是文件操作的封装，它提供了文件的读取、写入、更名、删除、遍历目录、链接等 POSIX 文件系统操作，且所有的方法都有异步和同步的形式。异步方法的最后一个参数都是一个回调函数。传给回调函数的参数取决于具体方法，但回调函数的第一个参数都会保留给异常。如果操作成功完成，则第…"}, {"id": "6915255619926622222", "title": "如何使用 Node.js 执行多线程", "desc": "从 Node.js 的第 13 版开始，它就能够执行多线程。 大部分 JavaScript 开发人员都认为 Node.js 是单线程的，通过非阻塞异步回调进程处理多个任务，不支持多线程，但现在已经不成立了。在 Node.js 第 13 版中，有一个名为工作线程（worker t…"}, {"id": "6844903870867439624", "title": "教大家使用Nodejs+Mysql+React写一个掘金和csdn优质文章的爬虫网站", "desc": "网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。 可能有部分模块没用，但不影响项目使用。 6）devServer配置项中p…"}, {"id": "6844904008415445005", "title": "简单了解 node http（一）", "desc": "文章记录了对http 模块的简单使用与理解。 1. http 服务端 http.createServer() 返回新建的 http.Server 实例。http.Server 继承自net.Server。requestListener 是一个自动添加到到 'request' 事…"}, {"id": "6844903607834247181", "title": "人生苦短，我用 ES6 模板", "desc": "ES6（ES2015）为 JavaScript 引入了许多新特性，其中与字符串处理相关的一个新特性——模板字面量，提供了多行字符串、字符串模板的功能，相信很多人已经在使用了。模板字面量的基本使用很简单，但大多数开发者还是仅仅把它当成字符串拼接的语法糖来使用的，实际上它的能力比这…"}, {"id": "6931253375195414535", "title": "使用express框架+mongodb快速搭建后端项目", "desc": "首先node环境不用多说然后我们使用express脚手架express-generator快速创建项目目录全局安装express-generator接着使用express命令创建项目,programn"}, {"id": "6969033743457583112", "title": "90%的人都不知道的Node.js 依赖关系管理（下）", "desc": "在上篇介绍Node.js依赖关系管理的文章中，我们介绍了关于Node.js模块的基础知识，如何使用module.exports和require方法处理依赖项，以及文件夹依赖项（folder depen"}, {"id": "6844903998982455304", "title": "手写一个 koa-ts-cli 脚手架", "desc": "最近把公司的 nodejs koa 后端项目用 ts 重构一遍。 在搭建整个工程，比如集成 koa、typescript、jest 以及 eslint 的过程中，还是会遇到挺多配置性的问题的。 考虑到工程的复用性，我写了一个 koa-ts-cli 脚手架，并且提供了三个工程模板…"}, {"id": "6844903788638109709", "title": "Nodejs教程10：Nodejs的模块化", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 Nodejs的模块化由于出现的较早，因此它遵循的是CommonJS规范，而非ES6的模块化。 在Nodejs的模块化中，最常用到的有module对象、exports对象、require方法。 其中module和e…"}, {"id": "6952147954761203726", "title": "node应用迁移至k8s实践", "desc": "本季度有一项工作是完成几个node应用到k8s的迁移工作，并完成原有两台node ecs的释放，本文主要记录我在node服务迁移中理解 k8s 部署的一些过程。"}, {"id": "6844903561780789261", "title": "[翻译]了解NodeJS看这一篇就够了", "desc": "如果你是前端开发工作者，那么对你来说，基于NodeJS编写web程序已经不是什么新闻了。而不管是NodeJS还是web程序都非常依赖JavaScript这门语言。 首先，我们要认识到一点：Node并不是银弹。也就是说，它不是所有项目的最佳解决方案。任何人都可以基于Node创建一…"}, {"id": "6944240279784423461", "title": "使用 Node.js 实现蒙特卡洛树搜索", "desc": "本文是上一篇文章的后续，我会提供足够的背景知识，也顺便提一下这篇文章。要注意的是，本文的技术含量会比较高。本文所有代码都可以在 GitHub 仓库中找到。 与上一篇文章一样，本文也假设读者具备一定的计算机科学知识，尤其是数据结构中关于树结构的工作原理，还需要具备 JavaScr…"}, {"id": "6844904021510062093", "title": "puppeteer入门及使用electron打包（一）", "desc": "(2)page.url()、page.name()。 page.url()得到的地址和看到的src有时不相同,"}, {"id": "6844903816987410445", "title": "我怎样用Node.js自动完成工作的", "desc": "我们在工作中经常会进行很多繁琐的任务：更新配置文件，复制和粘贴文件，更新 Jira 标签等。 慢慢的花在这些任务上的时间会越来越多。我在 2016 年时在一家网络游戏公司工作时，类似的工作很多。当时我在为游戏构建可配置的模板，这项工作也许很有价值，但是由于要重新设置皮肤，我必须…"}, {"id": "6953882449235410951", "title": "node.js 服务端实现excel导出以及vue前端本地保存文件并导出", "desc": "之前我在博客园写过,但是好文章被埋没了,当然丑逼样式让臭宝们无法下手是我的错,我们的项目是前端用vue,服务端用node.js,这个excel导出我们已经用了一年,我们目前用到的无非是图片导出,文本导"}, {"id": "6991035970904653860", "title": "node入门级教程", "desc": "Node.js 是一个基于 Chrome V8 引擎的 JavaScirpt 运行环境。 Node.js"}, {"id": "6844903633557913608", "title": "Taro 技术揭秘：taro-cli", "desc": "Taro 是由凹凸实验室打造的一套遵循 React 语法规范的多端统一开发框架。 使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、App 端等）运行的代码。实现 一次编写，多端运行。 关于 Taro 的更多…"}, {"id": "6945387293125541919", "title": "node+ts 入门小实例 ", "desc": "对于正在学习前端的我，相信很多的同学也跟我一样，特别怕与数据库打交道，但写项目是无法避免数据的存储，使用到数据库的。所以我们还是要撸起袖子加油干，不仅要做干饭人，还要做个光荣的打工人。通过下面这个实例，希望可以帮助你对node的理解，试着自己做一个小实例，会发现数据库也没有那么…"}, {"id": "6844904152632393742", "title": "搞一个Node Cli来提升工作效率", "desc": "我在1月发表过一篇：从0搭建自动版本管理的Vue组件库，是一篇搭建组件库的todo类型的文章，包括组件库的搭建、配置、打包、发布。随着公司前端基建越来越完善，我们会产出越来越多的像这样的前端库，而且类型越来越多：组件库、js库、css库，每个库都需要去从零开始搞搭建配置打包发布…"}, {"id": "6977244977705254926", "title": "Yarn使用入门", "desc": "Yarn 使用入门 Yarn 对你的代码来说是一个包管理器。它可以让你使用并分享全世界开发者的（例如 JavaScript）代码。 Yarn 能够快速、安全、并可靠地完成这些工作，所以你不用有任何担心"}, {"id": "6997743484325085214", "title": "手把手教你用Koa个项目的接口", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战新手，简单，快速，手把手教你用koa写个人项目的接口"}, {"id": "6964197984498089997", "title": "node使用Nodemailer发送邮件，可用于登录注册的验证码哟", "desc": "在开发个人开源项目或者个人博客的时候，需要用户进行认证登录，首先我们想到的是手机验证码，但是在各大厂商验证码都需要收费，这时候我们可以用邮件进行发送验证码。主要是免费！"}, {"id": "6957258059022499854", "title": "浅谈Nodejs框架里的“洋葱模型”", "desc": "欢迎访问个人博客网站： http://www.zhuxin.club 1. 洋葱模型 洋葱我们都知道，一层包裹着一层，层层递进，但是现在不是看其立体的结构，而是需要将洋葱切开来，从切开的平面来看，如图"}, {"id": "6999993930263560206", "title": "从零构建自己的CLI工具，提高效率", "desc": "前言 公司需要的新项目比较多，主管要求我准备搭建一个通用的框架，放在git上，以便于新项目直接套用。我不禁开始思考，如果每次要新建一个项目，做法的流程大概就是新建一个文件夹（或者在git仓库上新建），"}, {"id": "6976819955719225351", "title": "Node.js入门", "desc": "### Node.js环境 - 下载node并安装，自动配置环境变量，并顺带安装npm包管理工具 - 打开cmd命令行工具，输入：node -v 验证node是否安装成功，输入npm -v 验证"}, {"id": "6960919929109348366", "title": "开发一个跨平台的小 bot", "desc": "bot 开发 多平台支持 qq、discord、kaiheila、telegram... 快速便捷的开发你自己的多平台工作 bot."}, {"id": "6844903777720336392", "title": "Electron系列文章-什么是Electron？", "desc": "系列简介：本系列文章首先围绕Electron框架的关键知识点进行详细讲解，然后对DEMO程序进行分析，让前端开发人员对使用Electron开发桌面应用程序有一个初步的了解。该系列文章更新周期为每周1~2篇。 Electron是一个能让你使用传统前端技术（Nodejs, Java…"}, {"id": "6890413446576209927", "title": "最近写代码的感悟，如何摆脱搬砖", "desc": "曾经看过一个词，叫\"前端赋能\",这个词可能有点装逼，但是在我理解，就是造轮子，造一些对自己有帮助的轮子。我觉得这是一个摆脱板砖的方法。 我最近常做webApp的是一个基于混合开发的h5页面，它是一个一对多的产品，里面有很多地方需要手动打点。例如我们常用的adjust.adjus…"}, {"id": "6876363718578405384", "title": "前端工程化之强大的glob语法", "desc": "glob 在正则出现之前就有了，主要用于匹配文件路径，例如大名鼎鼎的 gulp 就使用了 glob 规则来匹配、查找并处理各种后缀的文件。在前端工程化的过程中，不可避免地会用 Node.js 来读取文件，例如想找到 src 目录下所有 js 和 jsx 文件，代码应该怎么写呢？…"}, {"id": "6844903999506923528", "title": "深入理解NodeJS事件循环机制", "desc": "ALL THE TIME，我们写的的大部分javascript代码都是在浏览器环境下编译运行的，因此可能我们对浏览器的事件循环机制了解比Node.JS的事件循环更深入一些，但是最近写开始深入NodeJS学习的时候，发现NodeJS的事件循环机制和浏览器端有很大的区别，特此记录来…"}, {"id": "6844903626205298701", "title": "html2canvas的踩坑之路", "desc": "早有耳闻这个html2canvas比较坑,但无奈于产品需求的压迫,必须实现html转图片的功能,自此走上了填坑之路,好在最后的效果还算令人满意,这才没有误了产品上线周期. html2canvas的详细介绍可以点击这里查看,其实简单来说就是通过canvas将HTML生成的DOM节…"}, {"id": "6982863994885242910", "title": "NVM快速切换NodeJS版本", "desc": "一、前言 在我们的日常开发中经常会遇到手上好几个项目，每个项目运行的环境也不一样，不同项目必须依赖不同版的 NodeJS 运行环境。每一个问题的提出总得有解决的办法，于是NVM应运而生。今天小编就带着"}, {"id": "6992626196664205325", "title": "NodeJs C++ 插件实现", "desc": "Table of Contents 前言 简单介绍 例子 3.1. 构建 3.1.1. 下载 node-gyp 3.1.2. 新增 binding.gyp 文件 3.1.3. 运行 node-gyp "}, {"id": "6986841930252435486", "title": "两种简单的Node.js转发服务实现", "desc": "在很多项目中，都会涉及权限校验接口。如果有第三方的接口请求，我们会让后端帮忙做一次转发。但是对于一些简单的纯前端项目而言，我们可以自己搭建一个简单的 Node.js 服务来实现接口请求的转发。"}, {"id": "6956201783345545224", "title": "node框架koa2的洋葱模型原理详解", "desc": "Koa -- 基于 Node.js 平台的下一代 web 开发框架。 详细解析 Koa 框架对于其核心 洋葱模型 的实现。"}, {"id": "6844903842048376840", "title": "What's New in JavaScript", "desc": "前几天 Google IO 上 V8 团队为我们分享了《What's New in JavaScript》主题，分享的语速很慢推荐大家可以都去听听就当锻炼下听力了。看完之后我整理了一个文字版帮助大家快速了解分享内容，嘉宾主要是分享了以下几点： 开场就用 11x faster 数…"}, {"id": "6844903651488563213", "title": "[译] JavaScript中的“this”是什么？", "desc": "如果你曾使用JavaScript库做过开发，那么你可能已经注意到一个名为 this的特定关键字。虽然 this在JavaScript中非常常见，但是完全理解this关键字的原理以及在代码中如何使用对相当一部分的开发者来说着实不易。在这篇文章中，我将帮你深入理解 this及其工作…"}, {"id": "6844903955143786510", "title": "基于nodeJS从0到1实现一个CMS全栈项目的服务端启动细节", "desc": "文章很短，希望大家可以更好的进行后面node和前端部分的开发。 linux系统下的安装，如果你是其他系统，可以去官网查看相关资料。 Redis 支持 32 位和 64 位。这个需要根据你系统平台来选择，下载压缩包到 C 盘，解压然后将文件夹重命名为 redis。（这里方便记忆）…"}, {"id": "6898581784150654984", "title": "[译]Node.js: 快捷的async函数会如何阻塞事件循环，使I/O饥饿？", "desc": "一个典型的Node.js应用基本上就是一个各类的事件响应执行的callback集合:一个接入的connection, I/O完成，timeout到期，Promise决议等等。这里有单个主线程（事件循环）执行所有的callback。因为其他正在pending的callback的在…"}, {"id": "6981646397367910437", "title": "解析事件循环机制（node、浏览器）", "desc": "一、为什么会有event loop? 二、浏览器中的Event Loop 1、micro-task和macro-task 浏览器端事件循环中的异步队列有两种：micro(微任务队列)、macro(宏任"}, {"id": "6844903636942880782", "title": "解放双手，利用 PM2 一键部署 Node 项目至 Centos7", "desc": "进入conf 目录，在该目录下创建include 文件。进入 conf/include 目录，创建 nginx.node.conf 文件，在里面输入如下代码： 进入conf ，打开nginx.conf, 在http 里面添加 。 这样，每次修改完成项目提交后，不需要服务器做任何…"}, {"id": "6844903613412671496", "title": "详解高级前端面试常问的EventLoop", "desc": "当我们的代码从上到下同步执行时，遇到setTimeout就记时，当时间到时就把此事件放到事件队列中，遇到微任务就把微任务放到微任务空间，代码会继续向下执行,直到同步代码执行完毕。 完毕后，会看看微任务空间中有没有微任务，有就把微任务空间中的微任务全部执行，然后去队列中取我们的事…"}, {"id": "6844903799530717192", "title": "Electron系列文章-主进程与渲染进程", "desc": "在上面的目录结构中，main.js就是我们所说的主进程。而通过browserWindows目录下窗口文件创建的进程，我们称之为渲染进程。渲染进程需要通过主进程来创建，并被主进程所管理。这里大家可能会有疑问了，什么是进程？为什么要分主进程和渲染进程呢？ 计算机进程相关的知识在搜索…"}, {"id": "6844903586019672071", "title": "node+koa2+mysql搭建博客后台", "desc": "本文将详细讲解使用node+koa2+mysql搭建博客后台的全过程。 创建项目文件夹server,进入文件夹后初始化项目npm init。 框架公用方法，包括参数校验、登录态校验等。config/index.js 以上配置完成后，便可以开始写设计路由了。 blog表 -> b…"}, {"id": "6844903783005175815", "title": "如何利用lerna管理模块", "desc": "当前端项目变得越来越大的时候，我们通常会将公共代码拆分出来，成为一个个独立的npm包进行维护。但是这样一来，各种包之间的依赖管理就十分让人头疼。为了解决这种问题，我们可以将不同的npm包项目都放在同一个项目来管理。这样的项目开发策略也称作monorepo。Lerna就是这样一个…"}, {"id": "6844904196571922445", "title": "基于node.js实现前端web项目自动化部署", "desc": "对于简单前端项目，频繁部署时，xshell、ftp两种方式较为繁琐，而jenkins 等自动化部署服务需要提前安装软件、并熟悉配置流程。 因此希望借助本地 node 服务实现对前端打包后文件的上传工作，既不需要服务器额外安装程序，还可以帮助我们实现快速上传部署，更能帮助我们深入…"}, {"id": "6953435296818020382", "title": "如何打造一个满足快速定制能力的私有化部署系统？", "desc": "打造私有化部署系统过程中的一些和总结 场景 我们来看一个场景，一个『规模不大』或者『精力有限』的中小型公司，接入三方公司的效率工具，比如 IM 工具（企业微信）、文档协作系统（语雀）、问卷系统（问卷星"}, {"id": "6910985796904288270", "title": "Hexo + GitHub Actions  + OSS 博客系统搭建", "desc": "Hexo 博客大家都应该比较熟了，使用也比较简单，本地生成下静态文件往 Github 一推就好了，需要的话还可以给 GitHub Pages 配置自定义域名。 但 Github Pages 的访问速度甚是感人，而且 github.io DNS 经常被污染，总之就是不太稳。每次本…"}, {"id": "6844903514007666702", "title": "node+express实现图片上传功能", "desc": "本篇文章适用于node刚刚入门的读者。 本篇文章使用node+express实现了一个简单的图片上传功能：用户点击图片上传，会跳转到上传成功页面并展示上传的图片。 一直想找资料入门node，试着一步步实现一个功能，都没有合适的资料。直到看到https://www.nodebeg…"}, {"id": "6844903700440285191", "title": "手把手教你用node撸一个图片压缩工具", "desc": "依然是先介绍一下工具，本次我们主要用到了 tinypng 这个工具。tinypng是一个主流的图片压缩工具，他可以实现高保真的压缩我们的图片，一般我们可以进入他的官网https://tinypng.com/压缩图片，手动点击上传，但是每次只能压缩20张，这对于追求方便的我们来说…"}, {"id": "6943062506034167821", "title": "Farrow 初探：与 Express/Koa/GraphQL 等框架对比", "desc": "几个月前我的 Mentor 也就是 @工业聚 开发了一个新的 Node.js Web 框架: Farrow。 这篇文章的内容就是围绕这个框架展开，如果你还不了解 Farrow，可以移步 @工业聚 大大介绍 Farrow 的文章。 可以简单概括这个框架的特点：友好的 TypeSc…"}, {"id": "6949692841530490916", "title": "每天一个npm包：has-flag", "desc": "源码地址。这个包的作用是用于检测process.argv中是否含有特定的标识，用于终端参数判断还是比较多。用法如下知识点process.argvprocess.argv返回的是一个数组，其中包含nod"}, {"id": "6844903715342647310", "title": "「译」更快的 async 函数和 promises", "desc": "JavaScript 的异步过程一直被认为是不够快的，更糟糕的是，在 NodeJS 等实时性要求高的场景下调试堪比噩梦。不过，这一切正在改变，这篇文章会详细解释我们是如何优化 V8 引擎（也会涉及一些其它引擎）里的 async 函数和 promises 的，以及伴随着的开发体验…"}, {"id": "6844904081710907406", "title": "NodeJS：图片验证码登录", "desc": "之后访问验证码接口地址，就可以看到图片了。 最后导出方法。 上面封装了set和get方法，那么我们就可以在redis中设置值了。 经过前面的express-session配置之后，我们在进入页面时，就会加载验证码图片并设置cookie(存着sessionID的值)，然后在登录的…"}, {"id": "6956461134299955213", "title": "为什么 Deno 没有众望所归？超越 Node.js 还要做些什么？", "desc": "Deno 是一个旨在改进甚至替代 Node 的 JavaScript / TypeScript 运行时。为什么Deno 没有众望所归？"}, {"id": "7001402688487292935", "title": "学习Node Express框架（三）", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 Express 路由 路由路径 路由路径与请求方法结合，定义了可以进行请求的端点。路由路径可以是字符串，字符串模式活或正则表达式。 字符？"}, {"id": "6912220538286899207", "title": "如何利用 JavaScript 实现并发控制", "desc": "在开发过程中，有时会遇到需要控制任务并发执行数量的需求。 例如一个爬虫程序，可以通过限制其并发任务数量来降低请求频率，从而避免由于请求过于频繁被封禁问题的发生。 接下来，本文介绍如何实现一个并发控制器。 上述示例代码利用 Promise.all 方法模拟6个任务并发执行的场景，…"}, {"id": "6844904003151593479", "title": "消息队列助你成为高薪的 Node.js 工程师", "desc": "后端开发者应该都知道消息队列，但是一些前端开发者可能知道的并不多，但是你们可能好奇抢票,商品秒杀等功能是如何实现的，其实没有多么高大上，看了消息队列就知道了。 作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数…"}, {"id": "7006665397197864967", "title": "第一个Node.js程序，和它的调试方法", "desc": "Node.js 的API + ECMAScript语法 = Web Server Web API + ECMAScript语法 = 前端程序 day1，学习了Node.js程序的调试。"}, {"id": "6974542964764704782", "title": "Node 系列 - 005 - colors.js", "desc": "接入 Inquirer.js 之后，本应该直接接上 colors.js，毕竟我们需要把控制台搞得飘飘亮亮（花里胡哨的）。但是上篇太给力了，上了 1.7w 字，所以相对而言，这篇就简短点呗。"}, {"id": "6961214445158662151", "title": "80行代码教你用Node+TypeScript写一个心灵预测魔术的终端应用", "desc": "前言: 中学有一段时间痴迷于各种魔术,放学就找书苦练魔术,课间给女同学变魔术炫技.后来.魔术在我的世界里沉沦了好一段时间,感叹当了程序员后放弃好多爱好,这一次我想把它们融合起来.圆规正转,这篇教你写出"}, {"id": "7001679138075459598", "title": "轻量级的数据实时更新方案", "desc": "事件推送（SSE） 什么是SSE 服务端发送事件（Server-Sent Events），服务端主动推送消息到客户端 消息：一定格式的文本事件流（数据流） SSE特点 基于 http 协议的单向通信 "}, {"id": "7001340488930295821", "title": "基于 Koa 框架的 WebServer 构建", "desc": "本文主要讲述了如何基于Koa构建一个WebServer,以及简单描述了一下中间件 上下文对象 路由的一些使用"}, {"id": "6996839535225077767", "title": "「从零开始」前端node够用指北(一)⚡---安装与模块", "desc": "本系列带着大家一起从零开始学习NodeJS，感同身受的站在学习者角度分享知识，从基础到实战，如果感兴趣的同学可以点赞收藏留坑。"}, {"id": "6945702722645524517", "title": "Libuv 之 - 只看这篇是不够的", "desc": "对 Node.js 的学习，无论如何都绕不开 Libuv。本文选择沿着 Libuv 的 Linux 实现的脉络对其内部一探究竟 Node.js 作为前端同学探索服务端业务的利器，自身是立志可以构建一个具有伸缩性的网络应用程序。目前的服务端环境主要还是 Linux，对于另一个主要…"}, {"id": "7000632305790238756", "title": "Node 中 AsyncLocalStorage 与异步资源状态共享", "desc": "大家好，我是山月。 在一个 Node 应用中，异步资源监听使用场景最多的地方在于： 全链路式日志追踪，设计每次请求的第三方服务、数据库、Redis携带一致的 traceId 异常捕捉时可提供用户信息，"}, {"id": "6844903657264136200", "title": "微任务、宏任务与Event-Loop", "desc": "首先，JavaScript是一个单线程的脚本语言。 所以就是说在一行代码执行的过程中，必然不会存在同时执行的另一行代码，就像使用alert()以后进行疯狂console.log，如果没有关闭弹框，控制台是不会显示出一条log信息的。 亦或者有些代码执行了大量计算，比方说在前端暴…"}, {"id": "7001673189042438152", "title": "基于 MySQL 数据库的后端数据持久化", "desc": "本文主要描述了Node基于MySql数据库的后端数据持久化，同时也简单描述了基本的增删改查的sql语句，"}, {"id": "7007054764986859534", "title": "搭建Node.js开发环境并初始化路由", "desc": "搭建一个Node.js的自启动项目，初始化项目目录，路由文件。写第一个GET和POST请求，并在Postman中验证。"}, {"id": "6992860503278092302", "title": "新一代打包工具esbuild", "desc": "esbuild是一个JavaScript的打包和和压缩工具。它使用golang开发，在打包的速度上非常快，我们熟悉的vite工具在dev模式下就是使用esbuild进行"}, {"id": "7002529514035085325", "title": "学习 Node.js 开发必备基础知识", "desc": "Node.js 一些必备基础知识 `解决服务器高性能瓶颈问题` 自身哲学: 花最小的硬件成本, 追求 更高的并发, 更高的处理性能"}, {"id": "6844904101893898248", "title": "《大前端进阶 Node.js》系列 P6必备脚手架/CI构建能力（上）", "desc": "随着前端工程化的发展，越来越多企业选择脚手架来从零到一搭建自己的项目。 其中大家最熟悉的就是 create-react-app 和 vue-cli，它们可以帮助我们”搭建-运行-构建“项目。 但是真正企业中，其实是需要我们自己去订制一套符合公司的脚手架，跟公司一些基础服务打通，…"}, {"id": "7002147865548029960", "title": "node项目开发(-)", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 NodeJS 项目 0. 初始化 1.1 创建项目 新建 api_server "}, {"id": "6959477438757896205", "title": "揭秘：如何考察前端的 Node.js 及工程能力", "desc": "工程能力其实就是把你的脑子里的对系统图、设计图、架构图去更好的落地的一个过程，一个工程，我认为它是非常有技术含量的，他需要去考虑系统的边界，并且还需要考虑从应用开发完成，从部署到后面系统的可"}, {"id": "6844904181040431118", "title": "如何通过nvm安装多版本nodejs？npm安装失败了怎么办？", "desc": "我们在开发项目的时候，最开始，是只有一个老的项目，老项目单独安装了node版本4.4.7，后来有了新项目，由于有两个项目，但是一个需要老一些版本的node，一个需要新版本的node，因此需要在两个版本之间进行切换，这时候应该怎么做呢？nvm可以很好的解决这个问题，我们一起来看看…"}, {"id": "6844903635617316877", "title": "面试高级前端工程师必问之流-stream", "desc": "流（stream）是一种在 Node.js 中处理流式数据的抽象接口。 stream 模块提供了一些基础的 API，用于构建实现了流接口的对象。 Node.js 提供了多种流对象。 例如，发送到 HTTP 服务器的请求和 process.stdout 都是流的实例。 流可以是可…"}, {"id": "6844903904958742535", "title": "从源码解读 Node 事件循环", "desc": "Node 是为构建实时 Web 应用而诞生的，可以让 JavaScript 运行在服务端的平台。它具有事件驱动、单线程、异步 I/O 等特性。这些特性不仅带来了巨大的性能提升，有效的解决了高并发问题，还避免了多线程程序设计的复杂性。 本文主要讨论的是 Node 中实现异步 I/…"}, {"id": "6844903693033144333", "title": "基于React的PC网站前端架构分析", "desc": "最开始接触前端的时候，是从简单的html、css、js开始的，当时盛行的WEB理念是结构样式行为相分离，即html、css、js分离，独立开发，互相之间通过link和script来互相调用。 最开始我所接触到的小项目，都是直接将html、css、js等静态资源直接部署到服务器上…"}, {"id": "6989891366973079583", "title": "使用webhook部署hexo博客", "desc": "问题来源 因为vps的网络环境无法保证，ssh上去打包部署的时候经常敲一下卡10s，着实难受； 其实每次ssh只是为了使用hexo g生成页面，于是想办法避免频繁的ssh登录； 本来想部署Jenkin"}, {"id": "6879701331410419725", "title": "Koa系列-基础功能实现 | 掘金技术征文-双节特别篇", "desc": "Koa与Express风格类似，不同在于默认异步解决方案和采用洋葱圈模型的中间件。 koa-parameter对传参进行校验，get请求会对query进行校验，post请求则对body进行校验，校验方法基于parameter。 使用postman模拟文件上传，调用/api/up…"}, {"id": "6844903662934818824", "title": "HTTP 缓存的那些事儿", "desc": "HTTP 缓存机制作为 Web 应用性能优化的重要手段，对于从事 Web 开发的同学们来说，应该是知识体系的基础环节，也是想要成为前端架构的必备技能。 我们为什么使用缓存，是因为缓存可以给我们的 Web 项目带来以下好处，以提高性能和用户体验。 减少服务器的负担，大大提高了网站…"}, {"id": "6844903758007107592", "title": "在Node.js中发起HTTP请求的5种方法", "desc": "创建HTTP请求使现代编程语言的核心功能之一，也是很多程序员在接触到新的开发环境时最先遇到的技术之一。在Node.js中有相当多的解决方案，其中有语言内置功能，也有开源社区贡献的开发库。下面咱们来看一下比较流行的几种方式。 因为太空是有史以来最酷的东西。 在开始之前，请先在自己…"}, {"id": "6911930969151045639", "title": "使用 Node 处理 I/O 密集型任务", "desc": "摩尔定律是由英特尔联合创始人戈登·摩尔(Gordon Moore)在 1965 年提出的，即集成电路上可容纳的元器件的数量每隔 18 至 24 个月就会增加一倍，性能也将提升一倍。也就是说，处理器（CPU）的性能每隔大约两年就会翻一倍。 距离摩尔定律被提出到现在，已经过去了 5…"}, {"id": "6941656303018180644", "title": "Pug/jade快速上手教程", "desc": "在nodejs中为什么要使用模板引擎。首先我们先想象一个场景，当前端请求到后端的一组数据后，我们要渲染dom，以前的常规操作就是使用js进行字符串的拼接，这样做虽然可以解决问题，但是这无疑增加了降低了代码的可读性和可维护性。一旦需求发生改变我们将束手无策。 在express框架…"}, {"id": "6844904053802188808", "title": "深入Nodejs模块fs - 文件系统操作", "desc": "node 的fs文档密密麻麻的 api 非常多，毕竟全面支持对文件系统的操作。文档组织的很好，操作基本分为文件操作、目录操作、文件信息、流这个大方面，编程方式也支持同步、异步和 Promise。 文件描述符是一个非负整数。它是一个索引值，操作系统可以根据它来找到对应的文件。 在…"}, {"id": "6914252499667353613", "title": "Node.js 小知识 — 实现图片上传写入磁盘的接口", "desc": "Node.js 小知识 记录一些工作中或 “Nodejs技术栈” 交流群中大家遇到的一些问题，有时一个小小的问题背后也能延伸出很多新的知识点，解决问题和总结的过程本身也是一个成长的过程，在这里与大家共同分享成长。 该问题之前由交流群一位同学提出，当时是遇到一个报错 “cross…"}, {"id": "6844903506290147342", "title": "nodejs几种文件路径及path模块", "desc": "最近在写一篇weex的webpack配置，刚刚踩坑了，weekpack中会用到path模块，而对于这个模块，我想抽离出来看一下，因为这个用到的还是比较多的,喜欢的朋友可以点个喜欢，或者去我的github点个star也行，谢谢支持，举起小手指点一点哦😯，写的不对的地方，评论拍砖…"}, {"id": "6844903616122208270", "title": "浏览器说：虽然都叫event loop，但是我和node不一样", "desc": "首先要确定好上下文，nodejs和浏览器的event loop是两个有明确区分的事物，不能混为一谈。 其次，讨论一些js异步代码的执行顺序时候，要基于node的源码而不是自己的臆想。 nodejs的event是基于libuv，而浏览器的event loop则在html5的规范中…"}, {"id": "6844904195145859086", "title": "从零构建一个操作shell的node插件并打包发布", "desc": "今天我们来从零构建一个简易的node脚本插件，方便操作shell，构建自己的脚本工具，帮助大家理解一些node模块，webpack打包过程及npm发布过程。 要使用node操作shell，首先要了解node中的child_process.exec，简单的来讲，exec会开启一个…"}, {"id": "6844904052841512973", "title": "commonjs的导出是值拷贝吗?", "desc": "近期学习nodejs时，我发现不少网上比较commonjs和esmodule不同之处的文章都提到commonjs的导出是值拷贝，导出值改变不会导致导入值改变，esmodule的导出是导出引用地址，导出值改变则导入值同时改变。 真的是这样吗？于是我试了试，发现问题没有那么简单。 …"}, {"id": "6844903727447425038", "title": "Puppeteer E2E测试入门", "desc": "本文内容涉及ES6 async、jest的相关知识，对于以上内容不太了解的读者可以先了解相关内容。 它由Chrome官方团队提供，通过Devtools协议在Node层提供了一系列API来控制chrome或者chromium，也就是说我们能够编写Node环境的代码即可对浏览器的行…"}, {"id": "6850418104892456967", "title": "踩坑指南：JavaScript解构赋值", "desc": "自从 2015 年ES6发布之后，到现在在项目中使用ES6语法应该是基本的操作，比如：const let class => 等等，就在今天我在使用 ES6 的解构赋值的时候翻车了... 在接下来使用avatar 的时候，发现值为 null的 avatar没有赋值为默认的属性，导…"}, {"id": "6953600277769355272", "title": "Node.js知识点整理（系列一）", "desc": "1. Node.js是什么？ Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 "}, {"id": "6844904013029195789", "title": "vuex + koa + mysql实现购物车功能（一）", "desc": "  效果图如下(基本是我们见过的购物车的效果):动手前思考  1.数据库需要建两个表: 所有商品表(cart), 购物车商品表(cartselected)  2.cart表:id(主键,自增),img"}, {"id": "6844904143727902727", "title": "NodeJS中的内存泄露", "desc": "内存泄露（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用内存的情况。如果内存泄露的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用内存的变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如V8的上限；也可…"}, {"id": "6844903618915598344", "title": "精读《如何在 nodejs 使用环境变量》", "desc": "本期精读的文章是：如何在 nodejs 使用环境变量。 介绍了开发与生产环境如何管理环境变量。 这里环境变量指的是数据库密码等重要数据，而不是指普通变量传参。 环境变量历史悠久，在运行第一行 JAVA 代码之前，你就得将环境变量设置好。 可问题是，系统变量并不易用，比如结尾是否…"}, {"id": "6844903656148451342", "title": "Facebook Messenger开发，这一篇文章就够了", "desc": "此代码将创建一个 /webhook 端点，用于接收 POST 请求，验证请求是否为 webhook 事件，然后解析消息。Messenger 平台会通过该端点发送所有 webhook 事件。 6. 部署webhook 7. 将 webhook 订阅到 Facebook 应用 捕捉…"}, {"id": "6844903555350921223", "title": "利用NODEJS+Puppeteer实现服务器保存网页为图片和PDF", "desc": "今年5月在github上创建的项目，属于比较新的chromium无头浏览器类库。 1：GOOGLE官方维护，活跃度很高，个人觉得前途光明。 2：我们的产品在chrome上适配最好。目前最新版本是0.13.0，我们采用0.12.0版本，因0.13.0版本API做了一些变化无法满足…"}, {"id": "6921232792453906440", "title": "工程化 - 利用 webhooks 进行集成", "desc": "为此，Git 通过提供 webhooks 来使我们具备可集成的能力。通俗来说，就是 Github 针对你的一系列活动，提供了一些“钩子”，当你进行某项活动时（比如：新建一个 tag），Github 会主动向你的服务器发送一个请求，通知你指定事件正在被触发，通过对请求进行捕获和分…"}, {"id": "6875659486431576071", "title": "node.js 概念", "desc": "轮询阶段 检查系统事件， 比如读文件， http请求。 poll阶段"}, {"id": "6905941001496428551", "title": "【每日一问】node.js如何设置cookie？", "desc": "要想解决这个问题，首先我们先要知道cookie存储在哪里，这样我们才能顺藤摸瓜找到存储办法。 我们发现这个方法有两个参数，一个参数是传入我们需要设置的名称，也就是Set-Cookie，那么如何设置cookie呢？此时我们看到②中的解释，如果是只设置一个cookie值，只需要传入…"}, {"id": "6912812029464674318", "title": "配合实际场景来理清客户端存储的几种方法", "desc": "cookie是http协议下，服务端或者脚本可以维护客户端信息的一种方式。"}, {"id": "6844903565605994510", "title": "Express进阶：log4js实用入门指南", "desc": "对于线上项目用来说，日志是非常重要的一环。log4js是使用得比较多的一个日志组件，经常跟Express一起配合使用。本文从入门实例开始，讲解log4js的使用，以及如何跟Express进行整合。"}, {"id": "6844903496253177870", "title": "腾讯IMweb Conf 2017大会图文笔记 -- 下", "desc": "下午的干货就比较多，我主要是在Node分场+小程序架构剖析，其他的没有整理了。 早上的整理链接《腾讯IMweb Conf 2017大会图文笔记 -- 上》。 分享是最好的学习，IMweb Conf 收获良多。 -- 写着写着笔记：突然发现讲师的PDF已经出来了 ，传送门：[gi…"}, {"id": "6844903917407600648", "title": "用nodejs和react实现即时通讯简易聊天室功能", "desc": "运行eject进行拆包，本项目也可以不拆，这是个人习惯。"}, {"id": "6844903840886718472", "title": "Node.js折腾记二：命令行交互", "desc": "前言代码：github地址目录结构：一、生成文件：npm命令：--path这个参数的值可以通过下面获取到:命令行交互inquirer.js简单使用：name：字段名,调用then的回调参数值里可以找到"}, {"id": "6844903593921740807", "title": "通过小故事，了解多一点何谓 Node 高性能", "desc": "hello~亲爱的看官老爷们大家好~最近身体抱怨，只好宅居家中天天啃书，将 Java 基础啃完一大部分。通过学习新语言，算是对以前 Node 底层部分一知半解的知识，有了较为全面的了解，因而有了这个可爱的小故事。 故事主要是简单地讲述何谓 Node 高性能，或者更应该说的是它低…"}, {"id": "6844903555732602894", "title": "Node Stream pipe的诞生", "desc": "Stream继承EventEmitter。流可以是可读的、可写的，或是可读写的。 Stream分为Readable（可读流）、Writable（可写流）、Duplex（可读写流）、Transform（读写过程中可以修改和变换数据的 Duplex 流）。 source是可读流：R…"}, {"id": "6844903854148943886", "title": "nodejs的crypto模块基础知识普及篇", "desc": "加密这方面nodejs自带原生的crypto模块，在网关开发中或多或少会牵涉到这块，大部分集中在des-ecb、aes的加密上，因此我们封装了这么一个工具库用来平时的加密和解密使用，传送门。 在使用这些api之前，我们来熟悉熟悉一下crypto模块，以及了解加密和解密的一些基本…"}, {"id": "6844903657268330510", "title": "Node.js 中的 Stream", "desc": "流，顾名思义，是流体的。与固体不同，它具有流动性，可轻易分离。 想象这样一个场景，我们要处理一大桶数据。 情况一：待处理的数据被是一整个固体的形式，那么我们要获取它处理它都必须是一次性的。这是若程序只有一次性处理一个碗级别的数据的能力时，那么程序就崩溃了（内存溢出或未处理的数据…"}, {"id": "6844903656819523597", "title": "腾讯 Node.js 非侵入开发框架 Tars.js 2.0 正式发布", "desc": "随着互联网的发展，越来越多的业务不仅仅由单一节点或是单一语言就可承载，而是趋向多语言分布式协同开发，例如接入层由Node.js完成，逻辑以及数据层由C++/GO/Python实现，并由此组成大型异构系"}, {"id": "6844903551961923591", "title": "细说javascript中的“指针”", "desc": "细说javascript中的“指针”"}, {"id": "6844903597746946062", "title": "TCP、HTTP和Node.js的那些事", "desc": "TCP是用来计算机之间进行通信的，通过编写客户端和服务端聊天的代码，对于服务器与客户端的工作步骤有了深刻的了解。在node中为了实现TCP，提供了一个net模块，net 模块给你提供了一个异步的网络封装，它包含创建服务器和客户端（称为流）的功能。 创建一个tcp服务，里面放的是…"}, {"id": "6844903630575763469", "title": "JS 异步系列 —— Promise 札记", "desc": "本札记系列总共三篇文章，作为之前的文章 Node.js 异步异闻录 的拆分和矫正。 对于 Promise.all(arr) 来说，在参数数组中所有元素都变为决定态后，然后才返回新的 promise。 对于 Promise.race(arr) 来说，只要参数数组有一个元素变为决定…"}, {"id": "6844903673349275655", "title": "「译」使用 Node 构建命令行应用", "desc": "在 JavaScript 的开发领域内，命令行应用还尚未获得足够的关注度。事实上，大部分开发工具都应该提供命令行界面来给像我们一样的开发者使用，并且用户体验应该与精心创建的 Web 应用程序相当，比如一个漂亮的设计，易用的菜单，清晰的错误反馈，加载提示和进度条等。 目前并没有太…"}, {"id": "6972154969336053768", "title": "每天一个nodejs模块-http", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 前言 今天，我们主要说nodejs中的Http模块，这个模块可以说是每个前端开发接触nodejs的第一个模块了，那我们接下来具体讲讲，Http模块"}, {"id": "6844904058654818312", "title": "Node.js排除内存泄漏演示", "desc": "关于Node的堆内存与堆外内存小记。 受到V8 GC的主要是堆内存。 Node中的内存并非都是通过V8来进行分配的，可通过堆中的内存用量(heapUsed)总是小于进程常驻内存(rss)看出。 对于那些不是通过V8来分配内存的我们称为堆外内存，比如Buffer，Buffer是基…"}, {"id": "6844903573533229063", "title": "node图片合成", "desc": "最近在工作上有一个需求是在server(node.js)，将几张图片和文字合成。 经过google一番，尝试了3个库： node-images： 国人开发的一个轻量级，不需要额外安装依赖的图片处理库。可以实现图片大小，合并等功能。本打算使用它来完成需求。不过已经近一年不维护了。…"}, {"id": "6906310353697636366", "title": "Node.js + Express 接口请求（GET、POST、PUT）示例", "desc": "app.post处理POST请求。有关完整列表，请参阅app.METHOD。 app.use（）将中间件指定为回调函数（有关详细信息，请参阅 使用中间件）。 实际上，路由方法可以有多个回调函数作为参数。使用多个回调函数时，重要的是提供next回调函数的参数，然后next()在函…"}, {"id": "6974791227246018567", "title": "Node系列学习之Redis", "desc": "开始学习Redis,本文包括redis安装, redis简单使用, NodeJS连接Redis的Demo, redis的工具函数封装."}, {"id": "6844904168545583112", "title": "基于 Vue CSR 的微前端实现方案", "desc": "在这里就不讲微前端的各种优缺点，直接假设你在负责一个中后台管理系统的开发，所有的业务模块全部都在一个项目中打包，随着业务量的不断增长，编译越来越慢，你期望可以从老的项目中将新的业务进行独立开发、独立部署，以微应用的形式嵌入到老项目中。 如果你是根据官方文档来走的话，你只需要自己…"}, {"id": "6844903845449973773", "title": "node批量抓取并下载小姐姐照片👧", "desc": "背景几番浏览欣赏后收工大吉正文开始所用到的模块http:创建服务、处理流相关fs：操作文件及文件夹(读、写)cheerio：简单粗暴的理解为node界的juquey先爬来整张网页过滤成果展示最后晒出劳"}, {"id": "6844903849044475911", "title": "Node js 集群（cluster）", "desc": "Node.js默认单进程运行，对于32位系统最高可以使用512MB内存，对于64位最高可以使用1GB内存。对于多核CPU的计算机来说，这样做效率很低，因为只有一个核在运行，其他核都在闲置。cluster模块就是为了解决这个问题而提出的。 cluster模块允许设立一个主进程和若…"}, {"id": "6882703110188302344", "title": "玩转Express（三）实现你的Express", "desc": "在第一第二节中，我们讲述了不少有关于 Express 的用法，但是对它的细节或原理避而不谈。那么今天我们就来实现自己的一个 Express ，加深对 Express 的理解。不力求完全实现 Express 的所有代码，但求实现它的核心逻辑。 那我们先来创建一个 my-expre…"}, {"id": "6844903504276881416", "title": "写给前端应届生的职业规划建议", "desc": "【前言】 近一年多的时间，笔者在公司中担任过应届生导师、实习生导师、应届生项目导师等一系列导师角色。期间，笔者发现一些即将和准备成为前端攻城狮的同学其实并没有明确前端真正的核心和定位，也没有给自己制定一个学习和发展的方向。当初选择前端这个职业，也仅仅只是为了找一份工作而已。笔者…"}, {"id": "6844903717204918286", "title": "轻量级配置中心Nodejs版", "desc": "单项目的时候只需要一个简单的配置文件即可完成配置管理。假如多个项目多个环境同时配置就会产生非常复杂的配置管理情况。 这个时候就需要用到配置中心了，它的原理其实类似于redis缓存这种。不同之处在于配置中心只关注配置，并且有更多的有利于配置的功能。大概的功能如下： 同时这些功能也…"}, {"id": "6925016767001526285", "title": "常见js宿主环境（二）：node.js", "desc": "本文是系列文章第二篇，介绍js的第二种宿主环境，即node.js，想了解本系列其他参考这里。 node.js是一个开源和跨平台的js运行时环境（runtime environment，也被称为host environment），和chrome一样 内置 v8 js引擎，另外的宿…"}, {"id": "6935086695284998181", "title": "Eventloop", "desc": "主线程从\"任务队列\"中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。 由于异步任务不相同，所以他们执行的优先级也不一样，不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。 顺序为：外部输入数…"}, {"id": "6844904101000511502", "title": "使用 async_hooks 监听异步资源的生命周期", "desc": "当在后端服务全局配置用户信息，以便异常及日志追踪。由于此时采用的 session 是异步的，用户信息极其容易被随后而来的请求而覆盖，那如何正确获取用户信息呢？ 官方文档如此描述 async_hooks: 它被用来追踪异步资源，也就是监听异步资源的生命周期。 然而，在官网中 as…"}, {"id": "6844903618538127373", "title": "node.js 中使用redis实现分布式事务锁", "desc": "在node项目中，我们常会跑一些定时任务，比如定时发送通知、定时发送邮件等，项目部署的时候，我们往往是多机多实例部署，这就导致每个实例都会跑一次同样的任务，所以我们需要一个分布式事务锁，来保证任务只能跑一次。 在测试过程中，发现事务没有被锁住，一查，发现两台机子的系统时间不一致…"}, {"id": "6909271048361869319", "title": "基于Express+xterm.js+ssh2的WebSSH", "desc": "1. 服务端 2. 客户端 3. 效果"}, {"id": "6844903797077065741", "title": "提高效率，记一个内部工具的开发经历", "desc": "起初我准备只使用 Nodejs 完成这个需求，后面开发到一半，发现 数据可视化 方面，实在找不到一个满意的可视化插件，于是想到 Python 的一个2D绘图库—— Matplotlib ，使用起来非常方便，于是便选择了它。 这也是我用 Nodejs 做的第一个作品，还有很多优化…"}, {"id": "6844903555980083213", "title": "探讨可用于实践的前后端分离方案", "desc": "业务发展过程中，技术团队已不再是原来的一人全包或是每个人啥活都干了，更看重每个人术业有专攻。那么，前后端开发如何减少耦合，各自独立地开展工作，是我们值得深层次的思考的问题。 出现影响开发效率的事情，就说明现有的模式存在问题。 显然问题的解题思路需要我们重新思考“前后端”的定义。…"}, {"id": "6847902215924318215", "title": "NodeJs获取文件流并导出到本地的三种方案", "desc": "即便java后端已经对数据做了处理，经node接口请求响应之后文件流的编码还是被修改了，之前一直想着应该以一对一的请求响应处理方式去获取最原始的数据的心理设定作祟，不应对响应response做处理，而是应该直接拿到什么返回什么。一直没往编码问题方向去思考，一番折腾甚至使用了三种…"}, {"id": "6950183282898108429", "title": "Node的异步I/O相关的内容(一)", "desc": "前情回顾上篇文章主要分享了的一个Node模块儿的解析和npm的知识点，Node会将我们写的代码重新进行包装，使其包含module,exports,require这三个遍量。今天接着聊一些Node的异步"}, {"id": "6844903788935905288", "title": "Nodejs教程11：assert（断言）模块", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 assert（断言）通常用来对代码进行校验，若出错则阻止程序运行，并抛出一个错误。 代码在运行到assert(2 > 1, '2 > 1')时，由于2 > 1为true，此时不会抛出错误。 提示了在\\lesson…"}, {"id": "6844903827582238733", "title": "linux安装nodejs及服务部署（二）", "desc": "由于在上一篇我已经进行了nginx配置和域名解析，所以这一篇部署之后，就可以直接通过上一篇配置的域名进行访问，我项目的后台端口也是4355。 两篇文章已经将nginx配置和node部署说完了，如有描述不清楚或错误的地方，烦请在评论区指出，如文章对您有作用，还烦请点个赞。🎉🎉…"}, {"id": "6844904035992993806", "title": "【重学Node.js 第4篇】实现一个简易爬虫&启动定时任务", "desc": "目前 node.js 爬虫工具比较火的有 node-crawler puppeteer。不过我目前没打算用这些，因为至少现在我们的项目还用不到。只要能发送请求、解析dom我们就能自己实现一个爬虫。所以我选择了axios + cheerio来自己写爬虫。 首先我们用 axios …"}, {"id": "6844903533444235277", "title": "关于mongodb的学习与探索一", "desc": "什么是mongodb？MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。 在wi…"}, {"id": "6903136253811081224", "title": "nodejs事件和事件循环简介", "desc": "熟悉javascript的朋友应该都使用过事件，比如鼠标的移动，鼠标的点击，键盘的输入等等。我们在javascript中监听这些事件，从而触发相应的处理。 同样的nodejs中也有事件，并且还有一个专门的events模块来进行专门的处理。 同时事件和事件循环也是nodejs构建…"}, {"id": "6943167766904078367", "title": "Node.js 多进程之 cluster 模块", "desc": "单个 Node.js 实例运行在单个线程中。 为了充分利用多核系统，有时需要启用一组 Node.js 进程去处理负载任务。 在 Node v0.8 版本之前，实现多进程架构必须通过 child_process 来实现，要创建单机 Node 集群，由于有这么多细节需要处理，对普通…"}, {"id": "6844903599525330957", "title": "模块化的一些小研究", "desc": "我们知道最常见的模块化方案有CommonJS、AMD、CMD、ES6，AMD规范一般用于浏览器，异步的，因为模块加载是异步的，js解释是同步的，所以有时候导致依赖还没加载完毕，同步的代码运行结束；CommonJS规范一般用于服务端，同步的，因为在服务器端所有文件都存储在本地的硬…"}, {"id": "6844903921652072461", "title": "Node events(事件触发器)(EventEmitter 类)", "desc": "例如，net.Server 会在每次有新连接时触发事件，fs.ReadStream 会在打开文件时触发事件，stream会在数据可读时触发事件。 所有能触发事件的对象都是 EventEmitter 类的实例。 这些对象有一个 eventEmitter.on() 函数，用于将一个…"}, {"id": "6844903533397934087", "title": "Javascript 异步编程", "desc": "所谓\"异步\"，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，当第一段有了执行结果之后，再回过头执行第二段。JavaScript采用异步编程原因有两点，一是JavaScript是单线程，二是为了提高CPU的利用率。在提高CPU的利用率的同时也提高了开发难度，尤其…"}, {"id": "6844903725929070605", "title": "深入理解Javascript之Callstack&EventLoop", "desc": "众所周知，Javascript是一个单线程的语言。这意味着，在Javascript中，同一时间只能做一件事情。 这样的设计有一些优点，例如简单，避免了多线程中复杂的状态同步，写程序时不用考虑并发访问。但同时也带来了一些其他问题，其中比较突出的一个问题是：代码逻辑不直观。由于Ja…"}, {"id": "6844903542004826126", "title": " 使用nodejs+express完成简单的文件上传功能", "desc": "1.建立express项目2.下载multer中间件3.在routes/index.js中引用multer，由于还要使用到文件操作，还要引用fs模块,并指定文件上传目录单文件上传:index.html"}, {"id": "6844903553085997064", "title": "javascript中的Event Loop详解", "desc": "下面一步步的了解，最后看看这块代码怎么去执行的。 学过JS的想必都知道JS是单线程的，那么既然有单线程就有多线程，下面首先看看单线程与多线程的区别。 从头执行到尾，一行一行执行，如果其中一行代码报错，那么剩下代码将不再执行。同时容易代码阻塞。 代码运行的环境不同，各线程独立，互…"}, {"id": "6844903569641095175", "title": "Node.js 调试指南", "desc": "分享自 GitHub ：Node.js 开发这几年的一些调试经验和思路，希望授人以鱼也能授人以渔。"}, {"id": "6844903588326539272", "title": "基于 Koa.js 的 Node.js MVC 框架", "desc": "基于 Koa.js 的 Node.js MVC 框架，参考了 Egg.js 框架及 iKcamp 分享的 Koa 视频教程。"}, {"id": "6844903872964591623", "title": "从一个简单的音乐播放器，竟然要用到这么些东西？", "desc": "前几天写了一个简易的音乐播放器,也收到了大家的一些反馈。最大的问题就是总是资源失效，针对这一点昨天我进行了一次重写，也把重构过程中的一些知识点和心得记录下来与大家一起分享。 没怎么写过文章，语句不通或者错误地方也请大家指出，我多多改正。项目地址 现在已经有很多基于binaryi…"}, {"id": "6869932379612381192", "title": "node学习笔记（四十一）", "desc": "一、手动封装body-parser中间件cookie-parser中间件1、封装axios请求方式body-parsercookie-parser二、express原理解析1、app.use的作用以及"}, {"id": "6844903944410365960", "title": "Gulp 学习小结", "desc": "注意：默认的，task 将以最大的并发数执行，gulp 会一次性运行所有的 task 并且不做任何等待。如果你想要创建一个序列化的 task 队列，并以特定的顺序执行，你需要做两件事： 上面三点分别对应了gulp的 pipe（这样写不太严谨，因为pipe是流的api），src和…"}, {"id": "6844903876701716493", "title": "Node.js - Buffer模块API整理", "desc": "网络序？本地序？傻傻分不清楚。。。 1. 创建Buffer 2. Buffer的迭代 3. 两个buffer间的碰撞 4. BE和LE世家 5. 小甜点 6. END"}, {"id": "6844903651442606087", "title": "浏览器事件环和Node事件环不得不说的故事！", "desc": "好了，话不多说，接下来让我们进入今天的话题。今天我们来谈一谈事件环到底是什么？javaScript的事件环和Node的事件环有什么区别？有没有一种无从下手的感觉，别捉急，只要你仔细阅读本篇文章，相信能够解开心中的疑惑。 俗话说，工欲善其事必先利其器。在进入浏览器事件环和Node…"}, {"id": "6844903726528872462", "title": "QUIC 简明教程", "desc": "QUIC (Quick UDP Internet Connections) (发音：quick) 由google开发的新一代网络传输协议。QUIC设计的初衷就是利用工程师几十年的经验来改进网络传输延迟。 说出来你可能不信，HTTP的发展被G家握在手里了，HTTP-over-SP…"}, {"id": "6896832791816880136", "title": "11.koa鉴权", "desc": "前后端未分离以前，⻚⾯都是通过后台来渲染的，能不能访问到⻚⾯直接由后台逻辑判断。前后端分离以后，⻚⾯的元素由⻚⾯本身来控制，所以⻚⾯间的路由是由前端来控制了。当然，仅有前端做权限控制是远远不够的，后台还需要对每个接⼝做验证。 为什么前端做权限控制是不够的呢？因为前端的路由控制仅…"}, {"id": "6844903692756320264", "title": "基于 cookie 的 node 中间层灰度流程的一些思考", "desc": "灰度方案说白了就是，分配一定比例或者筛选有特殊身份的用户，让这部分用户提前试用产品的最新版本，以便尽早发现问题也可将问题的影响最小化。不同公司都有自己独特的灰度流程，此处仅仅讨论灰度方案中的其中一个小环节，用户分配。 综合来看，方案 b,c 基本可以解决我们的上述问题。 bet…"}, {"id": "6844903551534104590", "title": "Nodejs 之 exports, require, module, __filename, __dirname", "desc": "Nodejs代码中常见的引入模块函数“require”。其实很少人了解为什么能使用“require”，以及Nodejs基本的运行机制。 是否还记得“arguments”，arguments可以直接拿到调用函数传入的参数。 其实Nodejs可以直接打印 arguments。用No…"}, {"id": "6844903651018817544", "title": "Nuxt配合Node在实际生产中的应用", "desc": "上个星期，甲方说要在应用上做一个促活活动（其实就是让用户领OFO的骑车券），考虑到之前在我另一个应用上已经做过客户端token验证，想想，撸起袖子直接在之前的Node上开搞吧。 这个东西类似与React中的Next，做Vue服务端渲染在Nuxt确实挺方便的，整个目录结构与Vue…"}, {"id": "6844903679049334791", "title": "使用node构建文件重命名脚本工具", "desc": "node对于前后端开发人员来说已经并不陌生了，对于前端小白来说，node更是高高在上，虽然同是JavaScript，但是node的学习路线还是蛮陡峭的，对于初出茅庐的程序员或许很难学的进去，但是学习还是要学，如果是带着问题去学习，或许就不会那么枯燥，学习起来也会事半功倍。 今天…"}, {"id": "6844903791569928199", "title": "Node fs模块学习", "desc": "1. fs模块 在Node.js中，使用fs模块来实现所有有关文件及目录的创建、写入及删除操作。 在fs模块中，所有的方法都分为同步和异步两种实现。 具有sync后缀的方法为同步方法，不具有sync后缀的方法为异步方法。 2. 整体读取文件 3. 写入文件 4. 从指定位置处开…"}, {"id": "6844903608484364302", "title": "一款破产版脚手架的诞生", "desc": "前些天一直在学习入门Webpack，后来尝试了自己搭建一下一个简单的React开发环境，后来就在想可不可以自己写一个简单的脚手架，以免每次搭建一个简单的开发环境都需要自己一个个的配置，这样很麻烦，使用create-react-app的话，配置一大堆可能不会用到的功能，比较冗余，…"}, {"id": "6844903600611819534", "title": "用whistle实现map local", "desc": "路径匹配会匹配该路径及其子路径的url，并把超出的路径自动补齐到本地指定的文件路径，如配置规则 www.test.com/abc E:\\workspace\\test 后，请求 http://www.test.com/abc，https://www.test.com/abc/in…"}, {"id": "6942344638892081166", "title": "Node.js调试的几种方式", "desc": "其中，runtimeExecutable 指定运行时的执行环境 ，这里指定为 npm，runtimeArgs 指定运行时执行环境对应的执行参数，这里指定运行 run dev。 借助 ndb ，正如它自己在官网上描述一样，ndb 提升了调试 nodejs 的体验，它是通过启用一个…"}, {"id": "6844903734145744903", "title": "使用 Docker 和 Node 快速实现一个在线的 QRCode 解码服务", "desc": "本文将会介绍如何使用 Docker、Node、JavaScript、Traefik完成一个简单的二维码解析服务，全部代码在 300 行以内。 最近折腾文章相关的东西比较多，其中有一个现代化要素其实挺麻烦的，就是二维码。 不论是“生成动态、静态的二维码”，还是“对已经生成的二维码…"}, {"id": "6844903501076660237", "title": "使用 Node.js 开发命令行程序的最佳实践", "desc": "在 Node.js 出现之前，我们所见的命令行程序大多是使用 shell、ruby、python 等脚本语言进行开发的。而现在，Node.js 已经被广泛用来开发各种命令行程序，提升着工程师的开发效率。 这篇文章，尝试总结我在开发一个真实的命令行程序时的最佳实践。希望对你有帮助。"}, {"id": "6844903577681395719", "title": "[译] 做好准备：新的 V8 即将到来，Node.js 的性能正在改变。", "desc": "做好准备：新的 V8 即将到来，Node.js 的性能正在改变。 本文由 David Mark Clements 和 Matteo Collina 共同撰写，负责校对的是来自 V8 团队的 Franziska Hinkelmann 和 Benedikt Meurer。起初，这个…"}, {"id": "6844903618827517966", "title": "JS加密算法简单分析", "desc": "看到有两个地方1. param，2. sign，基本可以断定sign是用的MD5加密的"}, {"id": "6844903908716838925", "title": "【Node】生产环境别在 console.log 了", "desc": "在node环境，仅仅是输出个string，为什么会内存不足？这是一个已知的\"问题\"，因为在tty / console的情况下写入stdout是异步的。因此，如果tty / console无法跟上，那么非常快速地记录大量数据很可能会导致大量写入缓冲在内存中。 着重观察下 _std…"}, {"id": "6911523140023615501", "title": "node.js异步和Promise", "desc": "但是nodejs回调函数有很多参数，所以约定第一个参数为error。第二个第三个为回调的结果"}, {"id": "6844904068276551688", "title": "基于Node.js的Express框架基础", "desc": "使用Express框架创建web服务器及其简单，调用express模块返回的函数即可。 中间件就是一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。 中间件主要由两部分构成，中间件方法以及请求处理函数。 中间件方法由Express…"}, {"id": "6844903603140837389", "title": "JS异常处理", "desc": "Error类的用法很简单，new或者直接把Error当成function来用都行，然后在你认为需要抛出异常的地方throw它。 你需要一个自定义错误类。JS原生的错误类型只能定义基本的语言类异常，而我们在业务代码中，需要频繁地定义、抛出一些与业务强相关的异常，比如： 校验验证码…"}, {"id": "6844903615870533646", "title": "node中的流(stream)", "desc": "流在node中是非常重要的，gulp的task任务，文件压缩，和http中的请求和响应等功能的实现都是基于流来实现的。为什么会有流的出现呢，因为我们一开始有文件操作之后，包括写文件和读文件都会有一个问题，就是会把内容不停的读到内存中，都读取完之后再往外写，这样就会导致内存被大量…"}, {"id": "6844904007236878350", "title": "Mongodb数据库自动备份并打包上传到七牛云", "desc": "目标技术要求js,nodejs基本shell脚本编写能力工具依赖shelljs：js编写shell脚本qiniu：上传七牛云node-schedule：nodejs定时思路mongodb数据库导出mo"}, {"id": "6844904000454656007", "title": "理解 OAuth2 协议", "desc": "昨天在组内分享了第三方登录与单点登录，其中着重分享了第三方登录当中的oAuth2协议，在这里记录整理一下。oAuth协议是一个授权的开放网络标准，主要是用来解决第三方登录的，即所谓第三方登录，实际上就是oAuth的授权。 很多网站登录时，允许使用第三方网站的身份来进行登录，这称…"}, {"id": "6984814891060166663", "title": "Node.js学习-01基本使用", "desc": "Node.js学习-01基本使用 使用Node执行JS脚本 注意： 文件名不要命名为node.js Node 中获取不到window和document（没有DOM和BOM） Node读取文件 Node"}, {"id": "6884913497377898504", "title": "让你的Mac自动同步代码", "desc": "相信大家在开发过程中肯定是并发运行多个需求。也相信大家一定会被频繁的同步远程分支代码搞的焦头烂额。 有的时候由于过度的投入到开发中，时间长了忘记了同步线上代码这项操作，等到上线的时候，啧啧啧~那个酸爽，各种解决冲突，而且还可能导致需求重新测试，不仅浪费了自己的时间，也会导致需求…"}, {"id": "6954138061244465183", "title": "Node.js（二）", "desc": "实现服务器步骤和核心代码 导入 http 模块 创建 web服务器实例 为服务器实例绑定 request 事件 启动服务器 注意 创建基本的服务器 req请求对象 （ request ） 服务器 后台"}, {"id": "6868896862141857805", "title": "使用 Node.js 定制你的技术雷达：上篇", "desc": "最近在梳理团队项目依赖和各个项目技术栈的时候，发现使用技术雷达的形式来进行呈现和管理是个不错的点子。但是没找到维护简单，界面又清爽好看的 UI。 正巧访问到 Thoughtworks 新版本技术雷达，发现在线版本十分漂亮，远比官方提供的生成版本漂亮。 那么，记录下折腾这个技术雷…"}, {"id": "6844903728764452878", "title": "骚年，Koa和Webpack了解一下？", "desc": "有必要声明下，很多人在没看完这篇文章之后，就评论一些和文章主题不相符的内容。 这篇文章主要讲述的是如何在本地开发环境下通过启动node服务器之后，无缝启动webpack，从而达到前后端配置一体化。 适合做node全栈项目、node中间层，配合前端项目、等等。 实现继承,采用的是…"}, {"id": "6992628930775613448", "title": "Node.js-搭建自动化开发环境-开工(三)", "desc": "搭建前端工程化环境: 假设， 我们是富二代，我们有钱没有地方花，准备去盖一栋大厦。 接下来正式开工啦: 1. 进行项目选址 项目想建在哪里就建在哪"}, {"id": "6844903574560833550", "title": "浏览器和Node不同的事件循环（Event Loop）", "desc": "Event Loop也是js老生常谈的一个话题了。2月底看了阮一峰老师的《Node定时器详解》一文后，发现无法完全对标之前看过的js事件循环执行机制，又查阅了一些其他资料，记为笔记，感觉不妥，总结成文。 浏览器中与node中事件循环与执行机制不同，不可混为一谈。 浏览器的Eve…"}, {"id": "6844903582492426254", "title": "webpack4新特性介绍", "desc": "当下最流行的模块打包器 webpack 于2018年2月25日正式发布v4.0.0版本，代号legato。从官方的 发布日志 来看, 本次大版本更新带来了很多新特性更新和改善，这将会让webpack的配置更加简单。本文，笔者将会全面介绍webpack4的新特性及实践。 在发布日…"}, {"id": "6844903501592887309", "title": "nuxt(vue) + koa + mongo 写blog的一次小结", "desc": "... 权限部分，登录时接受服务器返回的 token，储存在本地， 使用 axios 拦截，以及 vue-router 路由元信息部分拦截，会检查 token 以及是否过期。 使用 element-ui 上传组件配合七牛。 ... ... node 版本 6.x+，使用前，请安…"}, {"id": "6844904079420817422", "title": "初探 Nest.js", "desc": "Nest 是一个用于构建高效，可扩展的 Node.js 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 TypeScript（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 OOP（面向对象编程），FP（函数式编程）和FRP（…"}, {"id": "6947856427247468551", "title": "看了就会的 Node.js 常用三方工具包", "desc": "之前一篇文章介绍了 Node.js 的三个模块的基础 API，面对文档时不那么抓瞎，基础 API 用习惯了也差不多找到感觉，之后想用啥就可以自己照着文档找就好了。 除了 Node 提供的基础模块之外，我们在开发中必不可少地会用到第三方模块，也就是我们最常见的社区 NPM 包。这…"}, {"id": "6987026474972758024", "title": "基于TinyPng，通过node实现一个批量压缩图片的cli工具", "desc": "基于TinyPng，通过node实现一个批量压缩图片的cli工具。全局安装cli命令，即可在项目下压缩指定文件目录下的图片资源。"}, {"id": "6844903795252527118", "title": "深入浅出 Node.js Cluster", "desc": "如果大家用 PM2 管理 Node.js 进程，会发现它支持一种 cluster mode。开启 cluster mode 后，支持给 Node.js 创建多个进程。 如果将 cluster mode 下的 instances 设置为 max 的话，它还会根据服务器的 CPU …"}, {"id": "6844903684724228104", "title": "[译]JavaScript: Promises 介绍及为何 Async/Await 最终取得胜利", "desc": "异步函数在JavaScript中有好有坏。好的一面是异步函数是非阻塞的，因此很快 - 特别是在Node.js上下文中。缺点是处理异步函数可能很麻烦，因为有时必须等待一个函数完成才能在进行下一次执行之前获得“回调”。 有一些方法可以发挥异步函数调用的优势并正确处理它们的执行，但其…"}, {"id": "6922582727375978510", "title": "在 Node.js 中使用 Async Hooks 处理 HTTP 请求上下文", "desc": "作者简介：五月君，Software Designer，公众号「Nodejs技术栈」作者。 Async Hooks 一个实际的使用场景是存储请求上下文，在异步调用之间共享数据。上节对基础使用做了介绍，还没看的参见之前的分享 使用 Node.js 的 Async Hooks 模块追…"}, {"id": "6844903655313768461", "title": "手把手教你用原生JavaScript造轮子（二）——轮播图（文章内容已过期，可不看）", "desc": "通过上一篇文章的学习，我们基本掌握了一个轮子的封装和开发流程。那么这次将带大家开发一个更有难度的项目——轮播图，希望能进一步加深大家对于面向对象插件开发的理解和认识。 老规矩，在写代码之前，我们需要对要开发的东西有个感性的认识，比如你可以先在脑中大致过一遍最终的项目效果是如何的…"}, {"id": "6844903510941630471", "title": "一只node爬虫的升级打怪之路", "desc": "我一直觉得，爬虫是许多web开发人员难以回避的点。我们也应该或多或少的去接触这方面，因为可以从爬虫中学习到web开发中应当掌握的一些基本知识。而且，它还很有趣。 我是一个知乎轻微重度用户，之前写了一只爬虫帮我爬取并分析它的数据，我感觉这个过程还是挺有意思，因为这是一个不断给自己…"}, {"id": "6844904199805730823", "title": "Node.js 深度调试指南", "desc": "在 Node.js 项目开发过程中，随着项目的发展，调用关系越来越复杂，调试工具的重要性日益凸显。 Node(v6.3+)集成了方便好用 V8 Inspect 调试器，允许我们通过 Chrome DevTools 进行图形化的调试和性能分析。同时，我们也可以使用 VS Code…"}, {"id": "6997690221890371597", "title": "window下， nvm安装 node之后。node、npm使用不了。", "desc": "window下， nvm安装 node之后，提示node安装成功了，但是npm使用不了，记录一下。。"}, {"id": "6844903542482960392", "title": "前端挑战全栈 13 集原创 Koa2.x 免费视频奉上", "desc": "Koa2是现在最流行的基于Node.js平台的web开发框架，它很小，但扩展性很强。13集免费视频，让你更简单快速得上手Koa2。Koa给人一种干净利落的感觉，体积小、编程方式干净。国内很多知名互联网公司都在使用。"}, {"id": "6844903631074885639", "title": "什么是中间件？", "desc": "本文是我对中间件的收集整理及个人理解的记录。仅代表个人水平、个人理解。如有问题，师请雅正。 好吧，作为一个前端渣渣，看不懂。再看看百度百科吧，下面是一些相关中间件： 企业服务总线（ESB ： Enterprise Service Bus）：ESB 是一种开放的、基于标准的分布式…"}, {"id": "6844903607062675463", "title": "手把手带你撸一个vue组件库！", "desc": "目前，我们能接触到的模块化组件库真可谓是数不胜数，尤其是vue相关的那更是多如牛毛，譬如element，iview等等，虽然有很多，但是轮子虽多，合不合适自己还不好说，就像买衣服，有件衣服虽然好看，但是貌似容纳不了自身肥胖的身躯那也只能望洋兴叹。当然这时候，量身定做就显得那么重…"}, {"id": "6844903589249286151", "title": "Node.js+Mysql+Vue+ElementUI 实现登录注册注销功能", "desc": "前两个月一直学习vue,node.js，但没有真正地动手做项目，恰好赶上公司要求我们做一个的登录注册的独立运行系统，趁着这个机会学习巩固下自己之前学的内容。前端使用 vue，后端用 Express 做服务端提供数据接口，数据库用 MySql。 实现对数据库的增改查操作。 完成一…"}, {"id": "6989117482296410148", "title": "Node.js实现浏览本地文件（Demo）", "desc": "如何实现浏览本地文件（根目录下包含多个子目录）？通过Node.js中fs模块进行查询文件的位置，从而实现~"}, {"id": "7005213684695826462", "title": "node fs-Api 整理", "desc": "fs-Api 整理 权限位 mode 因为 fs 模块需要对文件进行操作，会涉及到操作权限的问题，所以需要先清楚文件权限是什么，都有哪些权限。 文件权限表： 权限分配 文件所有者 文件所属组 其他用户"}, {"id": "6858847833467371534", "title": "从 0 到 1 node 项目管理系统：搭建基础平台（中）", "desc": "搭建基础平台搭建上篇的时候，已经介绍过了项目流程设计、数据库搭建、jwt 登录等模块。 此篇我们介绍分支管理设计及其他的基础模块。 上述的 Git Flow 流程使用可以规范约束开发质量跟流程，我们稍微修改一下部分流程，融入到项目中进行使用。 如图每个工程都共享一个 versi…"}, {"id": "7003628161774649375", "title": "基于node和uniapp的聊天室人机对话简单功能", "desc": "框架使用：uniapp. node websocket库的ws库 WS 模块 ws 是一个第三方的 websocket 通信模块，需要安装 npm i ws，websocket 的通信模型跟 HTTP"}, {"id": "6996325032762802213", "title": "Node.js基础学习-效率工具 nvm & nvm ", "desc": "学习贵在坚持, 笔记是灵魂, 温故而知新, 时不时翻一翻, 回顾一下知识点, 加深记忆, 事半功倍! 这里记录一些学习 Node.js 的上手攻略 - nvm & nrm 等工具"}, {"id": "6965763023587770382", "title": "Node 模块化与事件循环小结", "desc": "梳理一下 Node 中 CommonJs 和 ES6 中导入导出的语法，同时对 Node 和浏览器中的事件循环大致整理。"}, {"id": "6844903608375328781", "title": "用JS搞了一个自动翻译，从此不再头疼看英文书了", "desc": "小记：作为一个有追求的码农，“懒”，不一定是一个贬义词。有时候“懒”，才是进步的动力！ 经常遇到这样的情况，发现一本眼馋的技术书📚，却发现只有英文版。慢慢啃吗？真的很痛苦。于是灵光一闪，我需要这样一个小工具，点击运行可以批量的完成翻译任务。于是，去吧皮卡丘！ 用某歌翻译的AP…"}, {"id": "6856646029358563336", "title": "手把手教学~搭建web聊天室", "desc": "WebSocket使得客户端和服务器之间的数据交换变得更加简单，并且允许服务端主动向客户端推送数据。(HTTP协议的缺陷：通信只能由客户端发起) 聊天室通讯还可以采用轮询的方式实现。所谓轮询就是客户端在特定时间间隔，由浏览器向服务器发送请求获得最新数据，这样会浪费很多带宽等资源…"}, {"id": "6844903870066327566", "title": "分享 10 道 Nodejs 进程相关面试题", "desc": "关于线程和进程是服务端一个很基础的概念，在文章 Node.js进阶之进程与线程 中介绍了进程与线程的概念之后又给出了在 Node.js 中的进程和线程的实际应用，对于这块不是很理解的建议先看下。 父进程创建子进程之后，父进程退出了，但是父进程对应的一个或多个子进程还在运行，这些…"}, {"id": "6844903549768302606", "title": "polyfill为何物", "desc": "Polyfill你可以理解为“腻子”，就是装修的时候，可以把缺损的地方填充抹平。 举个例子，html5的storage(session,local), 不同浏览器，不同版本，有些支持，有些不支持。 有些人就写对应的Polyfill（Polyfill有很多），帮你把这些差异化抹平…"}, {"id": "6946530710324772878", "title": "记录安装 node-sass 失败原因及解决办法汇总", "desc": "我们在安装 node-sass 的时候总是会因为各种原因不成功，今天我就一口气把这些可能导致失败的坑汇总一下，以免以后再被坑。 如果找不到对应的binding.node包，即失败，然后就会尝试本地编译。 首先要知道的是，安装 node-sass 时在 node scripts/…"}, {"id": "6988486072397201444", "title": "使用vscode远程开发一个全栈Web项目", "desc": "基于Vue.js和Node.js开发一个全栈Web应用，使用PM2完成后端服务管理及日志管理，使用express读取IP获取位置信息。"}, {"id": "6844904047732850696", "title": "【译】用Node.js编写内存效率高的应用程序", "desc": "软件应用程序在计算机的主存储器中运行，我们称之为随机存取存储器(RAM)。JavaScript，尤其是 NodeJS （服务端 JS）允许我们为终端用户编写从小型到大型的软件项目。处理程序的内存总是一个棘手的问题，因为糟糕的实现可能会阻塞在给定服务器或系统上运行的所有其他应用程…"}, {"id": "6869554196622868488", "title": "vue+node.js手把手教你搭建一个直播平台（一） 搭建直播平台的后端", "desc": "先甩锅，小羽主要是搞前端开发的，所以这期张主要讲后端内容，可能讲的不太好，后端大佬求放过。有错误之处，请大佬们指出哈~ 额，这个应该是属于准备工作的。给忘记了，那就凑合放在这里吧，别打我，我知道错了，但我就是不改【狗头保命】 接着我们使用编辑器打开我们刚刚创建好的项目。像小羽这…"}, {"id": "6844903678327914504", "title": "从观察者模式到手写EventEmitter源码", "desc": "观察者模式（observer）广泛的应用于javascript语言中，浏览器事件（如鼠标单击click，键盘事件keyDown）都是该模式的例子。设计这种模式背后的主要原因是促进形成低耦合，在这种模式中不是简单的对象调用对象，而是一个对象“订阅”另一个对象的某个活动，当对象的活…"}, {"id": "6990304091683422215", "title": "探讨Node.js、TypeScript如何解析模块", "desc": "了解下常见引入方式 node解析 通常，在Node.js里导入是通过 require函数调用进行的。 Node.js会根据 require的是相对路径还是非相对路径做出不同的行为。 相对路径 相对路径"}, {"id": "6844903832023990285", "title": "Node.js 调试 源码", "desc": "Node.js 是基于 V8 和 libuv 进行构建的，底层是以 C/C++ 实现，而标准库部分则是采用 JS 编写。所以 Node.js 的源码调试分为两部分，C/C++ 代码调试和 JS 代码调试。更多... Visual Studio Code 或其它调试 C/C++、…"}, {"id": "6979039667228246023", "title": "【node实战系列】自行实现应用缓存", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 bigo前端开始推广bff，hello农场作为首个bff落地项目，历经2个月，完成了从"}, {"id": "6844903495934427143", "title": "Nuxt SSR 阿里云部署之nginx代理--详解篇", "desc": "我的服务器版本是CentOS7～一. 安装配置nvm安装node：点击地址二. 安装mysql：点击地址   安装完毕设置密码 sourcemysql.sql 导入你的sql文件三. 配置nginx "}, {"id": "6844904022059515918", "title": "用spawn 来编写跨平台 Node.js命令", "desc": "Node.js 是跨平台的，也就是说它能运行在 Windows、OSX 和 Linux 平台上。很多 Node.js 开发者都是在 OSX 上做开发的，然后再将代码部署到 Linux 服务器上。由于 OSX 和 Linux 都是基于 Unix 的，因此两者共性很多。Window…"}, {"id": "6897076787931512839", "title": "基于 Wachaty 开发微信机器人 & 个人微信号小助手平台", "desc": "Wechaty 是一个开源的的对话机器人 SDK，支持 个人号 微信。它是一个使用 Typescript 构建的 Node.js 应用。支持多种微信接入方案，包括网页，ipad，ios，windows，android 等。同时支持 Linux, Windows, Darwin(…"}, {"id": "6844903662192427015", "title": "「译」如何用 Node.Js 和 Puppeteer 爬取网页", "desc": "如果你像我一样，有时非常急切地想要抓去某个网页，得到可读格式的数据，或仅是需要这些数据用做其他目的。 Puppeteer 是一个 Node 代码库，基于 DevTools 协议，提供高级 API 自动化控制谷歌Chrome 或 Chromium浏览器。Puppeteer 默认以…"}, {"id": "6857331115036770311", "title": "使用Node.js实现一个express框架   ", "desc": "发现此时的 req 和 res 正是我们想要的可读流和可写流. 初始化时候定义 get、post 的数组储存对应的 path 和 handle. 需要触发路由回调的时候,首先要找到对应的请求方式下对应的 url 的 handle 方法,然后触发回调. 另外一种就是不带路由的,像…"}, {"id": "6844903573512421384", "title": "从零开始写一个Javascript解析器", "desc": "简单点说，使用 Javascript 运行Javascript代码。 这篇文章来告诉你，如何写一个最简单的解析器。 可以把 Javascript 代码写进一个 Js 文件，然后在其他文件 require 它，达到执行的效果。 NodeJs 会缓存模块，如果你执行 N 个这样的文…"}, {"id": "6844903565744406541", "title": "nodejs微信支付之扫码支付", "desc": "上面操作完成之后，我们需要知道用户是否完成支付，因为用户会停留在该页面，我们需要在用户付完款之后，通知用户支付成功。 首先，用户发起支付的时候我们会生成二维码，让用户完成扫码支付，我们还要做的是，开一个定时器，每隔一段时间去发送一个请求，这个时候，我们node后台就需要写一个查…"}, {"id": "6983691693010714637", "title": "Koa2编写基本后端接口（二）", "desc": "这篇文章主要是简要介绍操作MongoDB数据库的mongoose插件，以及把业务与数据分离为controllers层、services层..."}, {"id": "6962904620117000228", "title": "动手打造一款脚手架工具", "desc": "作为一名前端开发，大家肯定都使用过vue-cli或者其他的脚手架，那么我们就一起动手来打造一款自己定制的脚手架工具吧"}, {"id": "6844903613266034701", "title": "React 快速上手 - 09 数据请求 fetch", "desc": "fetch ... 异常处理要用 try ... catch ... IE 全阵亡，低版本 Safari 兼容问题，Firefox Chrome Opera 如果特性不开的话也会出问题，懂的同学说可以浏览器配置和打 polyfill 补丁，但是这样需要自己做很多工作，如果你的代…"}, {"id": "6844903588074881031", "title": "春风十里不如Node中的一股清流", "desc": "清明时节雨纷纷，果然每逢清明是会下雨的。在这个雨夹雪，不方便外出的日子，宅在家里一起来相互学习分享吧！不然还能怎样呢！哈哈 用过node的朋友们都知道流的作用非常之厉害，可读可写，无所不能。 相比于fs模块，流更适用于读取一个大文件，一次性读取会占用大量内存，效率很低，而流是将…"}, {"id": "6844903988597358600", "title": "探究不在V8堆内存中存储的Buffer对象", "desc": "留下了悬念，stream对象数据流转的具体内容是什么？本篇文章将为大家进行深入讲解。 作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数据库，祝您成为优秀的高级 Node.js 工程师。【程序员成长指北】作者，…"}, {"id": "6844903668039286797", "title": "一次TypeScript, React, Node, MongoDB的模板式前后端分离开发实践", "desc": "在大概1年前接触了typescript之后, 日渐被它所吸引. 甚至一个简单的本地测试文件node ./test.js有时也会切到ts-node ./test.ts. 在同样的时间节点之前, 还是会不时地去学学node, mongodb相关的. 可是, 由于懒(需)惰(求), …"}, {"id": "6844904145606934542", "title": "你知道如何用Node.js做邮箱验证吗", "desc": "其实对于手机验证码来说，一般都要收费的，免费的一般是比较少的，而且都会有数量的限制。既然我们不能使用手机验证码来发送，那么我们就以曲线救国的方式来实现这个功能吧。 其实很简单，我们只要安装一个第三方的npm 包就可以了，这个包可以实现邮件的发送功能。这个包就是nodemaile…"}, {"id": "6844903686867533831", "title": " 【译】使用 ndb 调试 node 应用", "desc": "它使用了一个已经被弃用的协议叫做 V8 调试器协议，并且它并不算是一个功能完备的调试器，只有一些简单的检查功能。 过去在这种情况下，一个新的基于 V8 调试器协议和 Blink 的调试工具出现在开发者眼前，它能够允许我们在任何一个 Webkit 内核的浏览器 DevTools …"}, {"id": "6844903543321657352", "title": "教你用NodeJs+express玩跳一跳", "desc": "2017年12月28日下午，微信发布了 6.6.1 版本，加入了「小游戏」功能，并提供了官方 demo「跳一跳」。"}, {"id": "6863998510090584072", "title": "如何在Node+React项目中防止CSRF攻击", "desc": "CSRF(Corss-site request forgery)即跨站请求伪造攻击，也常缩写为XSRF，是一种常见的web攻击方式。 简单来说，CSRF攻击就是：用户访问正常网站A的时候，会在浏览器中留下一些登录信息（比如cookie），恶意网站B利用这些登录信息，伪造一些请求…"}, {"id": "6949823818097492005", "title": "【排障系列】记一次 Node gRPC 静态生成文件引发的问题", "desc": "本文记录了使用 Node gRPC（static codegen 方式）时，遇到的一个“奇怪”的坑。虽然问题本身并不常见，但顺着问题排查发现其中涉及到了一些有意思的点。去沿着问题追根究底、增长经验是一种不错的学习方式。所以我把这次排查的过程以及涉及到的点记录了下来。 如果在你了…"}, {"id": "6844903577052250119", "title": "JS事件循环", "desc": "上周写了篇关于setTimeout的文章，其实也就牵扯到了js的运行机制。所以，这周就来谈谈javascript的运行机制吧。 那就先问个问题吧😁。 单线程意思就是说同一个时间只能做一件事。那这样的话效率不是很低？也没有啦，其实javascript的单线程特点是跟他的用途有关…"}, {"id": "6844904130129952775", "title": "用 serverless 与 typescript 开发第一个 Koa 应用", "desc": "对于稍微大型的 Node 应用，typescript 已经是标配，它为 javascript 提供了强类型的铠甲，有效提高了代码质量。 这里是一个结合 ts 及 koa 快速部署到腾讯云函数计算中的模板。仓库如下 app.ts 即是你业务逻辑的入口文件，你可以像其他 Koa A…"}, {"id": "6992604387285663774", "title": "Node.js-搭建自动化开发环境-准备(二)", "desc": "我们继续去着手搭建一个自动化开发环境: 下载安装NodeJS环境 建议大家去NodeJS官网下载 安装， 配置环境变量 配置淘宝镜像"}, {"id": "6998705574565117965", "title": "node爬虫爬取csdn数据", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 环境搭建 必须安装Node，我装的是8.11.2版本，Mac开发； 使用到的一些第三方库： 后端服务： express 发出http请求："}, {"id": "6904071188708851720", "title": "最小学习成本用Node搭建后端", "desc": "其实我觉得很多前端的同学学Node的目的有点偏离轨道了，作为一个脚本语言，JS有天生的缺陷，虽然可以在服务端运行了，但是跟java这种老大哥还是比不了的。那Node还有存在的必要么？这当然是有的了 并不是所有的网站都需要一个复杂的后端作为底部支撑的，就像我以前说并不是所有的网站…"}, {"id": "6961227044214702088", "title": "我的package-lock.json被谁改了？", "desc": "豆皮粉儿们，大家好呀。一转眼又陪伴大家来到了不负春光和时行，人间最美的四月天。 大家在提交代码时，是否会经常遇到提示package-lock.json有莫名其妙变动的提示？下面就跟这篇文章一起来一探究"}, {"id": "6844903984994615310", "title": "烹饪一道美味的 CLI", "desc": "今天咱们就来聊一聊命令行工具（即 CLI：command-line interface，以下都会以 CLI 来代替冗长的命令行工具名词 ）的开发。 阅读完本文，你会对从头到尾开发一个 CLI 有一个较全面的认识。 你也可以收藏下这篇文章，当你想开发一个 CLI 时，回来翻一翻，…"}, {"id": "6844903998651121677", "title": "nodejs是如何和libuv以及v8一起合作的？(文末有彩蛋哦)", "desc": "首先，nodejs提供那么多模块，以及能在各个平台上跑的飞起，不是因为js很牛逼，而是因为底层依赖了一些你不知道的技术。最大的两个依赖便是v8和libuv。为什么这么说呢？因为一个帮助你将js代码转变成可以在各个平台和机器上运行的机器码，另外一个帮助你调用平台和机器上各种系统特…"}, {"id": "6844903957484011527", "title": "学习后端鉴权系列: 基于Cookie, Session认证", "desc": "说起鉴权大家应该都很熟悉, 不过作为前端开发来讲, 鉴权的流程大头都在后端小哥那边, 但是作为一个有志气的开发者肯定要好好学习整个鉴权流程以及方案, 不然怎么跟后端合作😄。 关于Cookie使用推荐阅读,HTTP cookies。 先上大家常见的一张Cookie, Sessi…"}, {"id": "6844903719008469006", "title": "「伪全栈」Vue2.5+Node.js搭建一个多页面商城应用", "desc": "远程库中已将前端代码打包放入 public 文件夹，因此运行后端项目即可预览完整效果。 浏览器打开 http://localhost:8000/home.html 预览。 前端项目需要后台数据支持，因此本地运行前端项目需要同时运行服务端项目，并且还需要做一些额外配置工作。 浏览…"}, {"id": "6885707465845899271", "title": "【持续更新】150+ 个优质的 Node.js 包和资源", "desc": "set-value - 使用 . 符号给对象设置值，如：a.b.c"}, {"id": "6866081343454773262", "title": "PM2源码分析", "desc": "其他的一些功能就都是基于 PM2 之上的辅助功能了。 PM2 的项目结构算是比较简洁的了，主要的源码都在 lib 目录下， God 目录为核心功能多进程管理的实现，以及 API 目录则是提供了各种能力，包括 日志管理、面板查看系统信息以及各种辅助功能，最后就是 Sysinfo …"}, {"id": "6965729386256334878", "title": "Whistle 2.7 发布，支持树形结构展示抓包数据", "desc": "感谢 @hxfdarling、@m3x2 两位同事的出色工作 #358、#564，大家期待已久的树形结构展示抓包数据（TreeView）已正式发布。"}, {"id": "6844903602910150669", "title": "node基金爬虫，自导自演了解一下？", "desc": "那是一个风和日丽的下午，我入手了人生第一把基金，从此以后，这只鸡🐔就跌入了万劫不复的深渊，之后我居然还傻傻地追加了几笔，到现在为止此坑都还没填平... “是时候动用一些封印的力量了”，我捂紧又皱又瘪的荷包，扛起node大宝剑，从新手村起步，屠龙...哦不，杀鸡之旅徐徐展开。 …"}, {"id": "6844903565643743245", "title": "谈谈Node中的常见概念", "desc": "在学习Node的过程中,我们要了解一些基础概念。什么是Node他又解决了哪些问题以及Node的特点。包括傻傻分不清的进程和线程，同步与异步，阻塞和非阻塞，以及Node中核心的(Event Loop)事件环的概念。 Node.js是一个基于 Chrome V8 引擎的JavaSc…"}, {"id": "6981797254705184798", "title": "【深入探究Node】（5）“Buffer与乱码的故事” 有十问", "desc": "我有时候这样读取数据，然后打印出来，有时候会出现乱码，是什么原因呢？哇塞，真是令人兴奋，Node是如何实现这个输出结果的呢？"}, {"id": "6916306332702392334", "title": "内容创作者不要再复制粘贴啦，一劳永逸自建个文章多发平台吧！", "desc": "大家好！这里是 HelloGitHub 推出的《讲解开源项目》系列，今天给大家带来的一款基于 Node.js 实现的一文多发平台开源项目——ArtiPub（文章发布者）。 众所周知文章每发到一个平台，就能增加一丝让更多人看到的机会。所以内容创作者们不仅需要编写高质量的文章，还要…"}, {"id": "6891224747737579534", "title": "别人收到秋天奶茶, 我收到了安全工单 - CSRF", "desc": "金九银十, 妥妥的收获的季节. 有的人拿到了 offer, 有的人获得了鲜花, 再不济的也收到了秋天的奶茶. 眼前欣欣向荣的景象让我这万年单身狗也开始心猿意马, 手机突然颤抖, 扣动了我的心弦. 难道是... 万万没想到, WTM 收到了这个... U1S1 虽然安全相关面试题…"}, {"id": "6844903600045424654", "title": "你真的了解回调？", "desc": "如果您想了解如何使用node，这是了解最重要的主题。几乎node中的所有内容都使用回调函数。它们不是由node发明的，它们只是JavaScript语言的一部分 回调函数是异步执行或稍后执行的函数。程序不是从顶部到底部读取代码，而是异步程序可以根据先前的功能（如http请求或文件…"}, {"id": "6844903605481242637", "title": "开发必备的webpack4", "desc": "首先webpack4建议使用node版本在8.5以上，是因为要兼容新版npm下的npx，cmd中node -v查看node版本。 WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss…"}, {"id": "6844904032071499784", "title": "前端进阶 node + koa2 + mysql 后台项目教程", "desc": "1.koa2 安装 node mysql 和 redis 安装方面就不介绍了，建议百度 主要讲 安装以及里面一些项目的文件呀，然后可以让小伙伴们基本了解koa2开发后台，希望大家可以学到后台开发到思想。建议观看前可以去github上先下载源码然后进行食用 的方式这个是回调我们前…"}, {"id": "6844903507321946126", "title": "一个非常适合nodejs初探者练手的全栈项目", "desc": "这是算是一个前端萌新第一次涉及到前后端的全栈开发项目，可能涉及到的技术栈用的并不是深入，对许多中间件的总结所述必然会有所欠缺，但本文旨在浅析整个项目过程，同时去还原深化一些相关的概念。而且第一次写文章思路排版等不是很明确，有不对的地方欢迎各位大佬们指正！ 效果实现 ：主体分为前…"}, {"id": "6844903728420487182", "title": "Mac 福利：从前端入手，搞定 iCloud 自动同步 node_modules 的痛点", "desc": "很多前端小伙伴都在使用 Mac 作为自己的主力开发机型，而苹果自家 iCloud 同步的便利性相信也不需要我多解释，特别是当你有多台苹果设备时，那种无缝的体验，一旦用了就回不去。可作为一名前端开发，今天，无论你使用的是 Vue 还是 React 亦或任何其他的前端技术栈，几乎是…"}, {"id": "6844903944628502542", "title": "Koa从零搭建之文件上传", "desc": "之前的课程讲过，Koa框架是一个基于中间件的框架，我们所需要的一些功能都需要安装相对应的中间件库。 ... 之前使用 koa2 的时候，处理 post 请求使用的是 koa-bodyparser，同时如果是图片上传使用的是 koa-multer。 这两者的组合没什么问题，不过 …"}, {"id": "6844903855407235085", "title": "[译] 为什么要用 Node.js | Node.js Foundation 官方介绍", "desc": "介绍 JavaScript 的日益发展带来了很多变化，当今的 Web 开发面貌已经变得截然不同。在几年前是很难想象在服务器上运行 JavaScript 的。 在深入研究Node.js之前，你可能想了解使用跨栈的 JavaScript 有什么好处，它统一了语言和数据格式（JSON…"}, {"id": "6992892466194022414", "title": "分析node.js应用程序", "desc": "使用 V8 profiler 常用命令 Profile 可以找到具体函数在整个程序中的执行时间和执行时间占比，从而分析到具体的代码问题，V8也提供了Profile日志导出命令。 prof 提供各个函数"}, {"id": "6854573215902564359", "title": "从零开始构建前后端AES加密通信", "desc": "推荐这里推荐使用ECB方式CBC方式还是有问题，后端没有解密成功使用方式前端加密接口参数后端解密参数，返回正常数据下包aes的ECB加密方式新建crypto.js文件，构建crypto类前端使用引入类"}, {"id": "6844903591518404615", "title": "moment太重? 那就试试miment--一个超轻量级的js时间库", "desc": "但是考虑到以后可能会经常使用到，打2个单词中间还要加一个下划线太累了，所以就把Mini-Moment缩水成Miment了。 这就是我们追求的极简，当然，也会有一丢丢的性能损失，不过个人觉得对于当今的硬件设备，你完全可以忽略这一点点性能。除非你的项目很特殊。 add返回的值是增加…"}, {"id": "6844903887078440967", "title": "来看各种加密算法在 Node.js 里的实现", "desc": "在大前端的趋势下，前端er也要懂点数据加密相关的知识才行，加密算法的实现和原理我们可以不用深究，毕竟加密是一门高深的学科，但是基本的加密方式和编码还是要掌握的，毕竟没吃过猪肉，猪跑还是见过的嘛。 我对常见的几种加密和签名的算法做个归纳，同时附上 nodejs 的编码实现。 为了…"}, {"id": "6987625609430040607", "title": "node express 搭建本地服务", "desc": "操作步骤： 安装node,执行命令 2.执行完以上操作，你会得到一个： 3.默认端口3000... express 跨域问题解决方案"}, {"id": "6844903888445784077", "title": "Deno 是什么？他和 nodejs 有什么不同之处？", "desc": "Ryan Dahl 创造 nodejs 的大牛，去年花了一年半的时间在新的项目Deno上。Deno 是什么呢？一个被认为是修复完善 nodejs 内在问题的新的 JavaScript 运行时的工具。 不要理解错了，在我自己看来 node 是一个很好的服务端 JavaScript…"}, {"id": "6844903597629505544", "title": "async/await，了解一下？", "desc": "因为写文章时太晚了，有点困，复制错代码了，已改正。 上一篇博客我们在现实使用和面试角度讲解了Promise(原文可参考《面向面试题和实际使用谈promise》)，但是Promise 的方式虽然解决了 callback hell，但是这种方式充满了 Promise的 then()…"}, {"id": "6844903850667671560", "title": "WebSocket协议以及ws源码分析", "desc": "1. 连接握手过程 2. 数据帧 3. ws库源码分析: 连接握手过程 4. ws库源码分析: 数据帧处理 5. 总结"}, {"id": "6844903641846038541", "title": "七天学不会nodejs——流", "desc": "流是数据的集合，你可以将它理解成数据链表或者字符串的形式，区别在于流中的数据并不能立即可用，这里又可以将其理解成水流。你无需将所有的数据一次性全部放入内存，相反，你可以使用\b流这一特有的性质，完成对大量数据的操作以及逐段处理的操作 Readable -- 可读流 可以读取数据的…"}, {"id": "6844903568365846536", "title": "process.argv与命令行工具", "desc": "process是node中的一个模块，通过访问process.argv我们能轻松愉快的接收通过命令执行node程序时候所传入的参数。 这是什么意思呢？我们都在命令行窗口中使用过npm命令来进行包的下载，在使用npm命令的时候我们还能进行一些传参，像要下载的包的名字啊，是开发依赖…"}, {"id": "6924201397231550472", "title": "如何分析 Node.js 中的内存泄漏", "desc": "内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如 v8 的上限…"}, {"id": "6844904195607232526", "title": "Node.js写一个前端项目部署脚本", "desc": "zr-deployWeb前端项目部署脚本前言部署流程：（执行zr-deploy后）选择部署环境配置文件zr-deploy-config.json打包：执行配置文件的打包命令buildCommand打包"}, {"id": "6844903971509764104", "title": "PM2实现Nodejs项目自动部署", "desc": "原理：本地git仓库与远程仓库关联（github、码云等平台），然后pm2按照指定配置登录服务器，拉取远程仓库的代码更新。 1. 环境搭建 2. 创建本地项目并关联到远程仓库 1. 创建本地仓库 2. 创建文件 3. 在github上创建远程仓库 4. 和远程仓库关联 4. 配…"}, {"id": "6844904143992127502", "title": "node 管理工具及使用", "desc": "nvm全名 node.js version management，顾名思义是一个nodejs的版本管理工具。通过它可以安装和切换不同版本的nodejs。 nrm全名 npm registry manager 是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 …"}, {"id": "6844904052107558920", "title": "将C++代码加载到JavaScript中", "desc": "熟悉Node.js的人都知道，Node.js是基于C++开发的一个JavaScript运行时，既然Node.js是用C++开发的，那么我能否将C++代码引入到Node.js中呢，这当然是可以的，这项技术被称为C++模块。官方对Node.js C++模块解释如下 动态链接库，即w…"}, {"id": "6985857675342905375", "title": " egg入门指引，你绝对用得到", "desc": "express，koa作为经典的node技术应用，曾经是node开发的不二之选，但有没有更灵活更可靠的框架作为代替呢？答案就是egg"}, {"id": "6914509716978663431", "title": "vscode 里混合调试 c++ 和 nodejs", "desc": "由于业务里涉及到 js 和 c++ 互相调用，为了调试方便，研究下如何在 vscode 里混合调试 c++ 和 js 代码。 在讲混合调试之前，先简单介绍下 vscode 下 c++ 的开发和调试, 后续所有都是在 Mac OS 环境下操作的。 默认生成的配置不支持 c++11…"}, {"id": "6982593920723075102", "title": "定时器: server timeout", "desc": "上篇中提到用户在请求服务时候可能会遇到socket hang up与connect ECONNREFUSED等问题以及timer作为资源保护的措施，那本篇将描述server端与client端超时那点事"}, {"id": "6844903654885949454", "title": "前端架构之小小node架构", "desc": "这次写个小小的node server架构，用到koa+swig，gulp，jsdocs生成文档，也没有多少内容权当记录下来吧，为接下来的大型项目架构准备一下。附上GitHub地址 不单只可以使用swig模板，还可以使用vue。 勉勉强强算是完成了吧，有点意思。 下次将更新一个大…"}, {"id": "6844903861493170189", "title": "JavaScript：Aho–Corasick算法实现敏感词过滤", "desc": "敏感词过滤应该是许多后端同事经常会遇到的需求，无论是评论、弹幕、文章，都需要做敏感词过滤处理来规避风险。在前端开发中，使用replace函数来替换字符串是我们的常规操作，在这之前我思考过如果用JavaScript来实现敏感词过滤该怎么做。在学习过程中，接触到了Trie树，瞬间有…"}, {"id": "6901690309303631880", "title": "Node.js cluster 模块学习指南", "desc": "node实例是单线程作业的。在服务端编程中，通常会创建多个node实例来处理客户端的请求，以此提升系统的吞吐率。对这样多个node实例，我们称之为cluster（集群）。 借助node的cluster模块，开发者可以在几乎不修改原有项目代码的前提下，获得集群服务带来的好处。 集…"}, {"id": "6844903715564945416", "title": "Webpack devServer.proxy反向代理地址模糊相似规则问题", "desc": "在开发模式下请求数据多少会涉及到它里面提供的devServe.proxy即Node.js的反向代理中间件。 Node.js代理很简单。轻松的配置代理服务器中间件连接，快递，浏览器同步以及更多。 假设当我们访问/api135/abc时，也就是真实地址B服务器/api/abc。 此…"}, {"id": "6844903535411200007", "title": "express，koa2等node处理前端上传图片并保存到文件中", "desc": "在另个项目中，同样的代码却报错了... 我也是一脸懵逼"}, {"id": "6982584844169510920", "title": "定时器: 石心", "desc": "定时器是编程中运用最广的特性之一， 那么定时器实现的基本原理是什么呢？ 无论多么复杂计算机，当一层层退去她的外衣，她的内核只是一块可以发出固定频率脉冲的石心（石英）， 好比人类的心脏，通过跳动给整个躯"}, {"id": "6844904070021382158", "title": "使用Nodemailer发送邮件", "desc": "这里使用的是qq邮箱，因为qq邮箱的权限比较好设置一些。"}, {"id": "6844903957500788744", "title": "Nuxt 实现用户鉴权登陆", "desc": "引言博客前台重构完毕了，接下来就是后台部分了，后台的主要功能就是发布、删除、修改文章，自然不是谁都能随便进的。在vue项目中，我是在VueRouter的全局前置守卫里判断当前用户是否有cookie从而"}, {"id": "6888878981682315277", "title": "nuxt项目 服务端 更新", "desc": "1、新手 服务器 就用镜像 【宝塔】 吧 安装nodejs root账户（一般默认都是）登录ssh上服务器"}, {"id": "6844903512309137421", "title": "从不用 try-catch 实现的 async/await 语法说错误处理", "desc": "前不久看到 Dima Grossman 写的 How to write async await without try-catch blocks in Javascript。看到标题的时候，我感到非常好奇。我知道虽然在异步程序中可以不使用 try-catch 配合 async/…"}, {"id": "6844904070184976398", "title": "[译] Node.js CLI 工具最佳实践", "desc": "这是一个关于如何构建成功的、可移植的、对用户友好的Node.js 命令行工具（CLI）最佳实践的集合。 一个糟糕的 CLI 工具会让用户觉得难用，而构建一个成功的 CLI 需要密切关注很多细节，同时需要站在用户的角度，创造良好的用户体验。要做到这些特别不容易。 在这个指南中，我…"}, {"id": "6844903696623468551", "title": "升级 Node.js 版本遇到的 co 和 pm2 问题解析", "desc": "nodejs 4.x 的项目, 需要升级到6.9.5(当时最新的稳定版本)以改善性能和可靠性. 业务中使用到了co, 进程使用 pm2 管理. 服务启动时即产生上述报警信息, 服务不可用, 通过搜索发现是存在某个promise最终reject了, 但是没有catch. 知道直接…"}, {"id": "6985720341322530829", "title": "个人记录贴：Node基础---文件读取", "desc": "I/O 文件读写 文件读取 同步读取 fs.readFileSync 异步读取 fs.readFile async/await读取（promisify包装） 文件流steam"}, {"id": "6844903553983594510", "title": "送福利：ROKID 语音开发板免费送，开启你的物联网之旅", "desc": "掘金联合 Rokid 开发者社区为大家准备了一些福利，只要秀出你的 skill 和技术栈，就有可能获得 Rokid 全栈语音智能开发套件。 活动主题：秀 skill 和技术栈，赢取ROKID开发板。 我想使用 Rokid 开发板做+『你的 skill』（需要两个skill）。 …"}, {"id": "6844903509448458254", "title": "找不到工作的我，只好研究自动投递简历了", "desc": "作者 steambap 最近我找工作进度缓慢，有意向的公司屈指可数，看着朋友圈里面天天晒“我很忙”的 hr，感慨当年拉钩论坛上可以扔出自己的简历，让有意向的公司找到自己，而现在没有拉勾论坛了，各公司的招聘的描述大同小异，很难看出谁就是我要的。"}, {"id": "6844903801757892621", "title": "浏览器eventLoop和node eventLoop", "desc": "今天我们来学习一下，浏览器的事件环（eventLoop）和node的事件环，它们之间有什么区别，这也是面试常问的知识，所以一定要仔细看哦，写的不好的地方，欢迎大家指正。 我们都知道js是单线程的，当然这句话说的不是很对，应该说它的主线程是单线程的。例如：ajax和setTime…"}, {"id": "6844904119283482637", "title": "强大的异步专家process.nextTick()", "desc": "在阅读mqtt.js源码的时候，遇到一段很令人疑惑的代码。 nextTickWork中调用process.nextTick(work)，其中函数work又调用了nextTickWork。 到底是怎么回事啊，下面我们来系统性学习一下process.nextTick()。 如果递归…"}, {"id": "6954278696597323806", "title": "nodejs文件上传及操作", "desc": "nodejs上传图片到服务器实现 form表单上传类型（注意：enctype=\"multipart/form-data\"） 初步上传 3.上图我们可以发现上传的图片并没有类型 所以我们需要对文件进行操"}, {"id": "6844903607129604109", "title": "性感慕课-在线被爬", "desc": "在学习了 alsotang 大神的 《Node.js包教不包会》后的一个爬虫小练习，期间也碰到挺多小问题，也学到了很多小东西。「单押×3」 在这里用到的是 superagent 和 cheerio 来爬取页面，这里有相关文档可以参考: superagent中文文档、cheeri…"}, {"id": "6844903678227251213", "title": "NodeJS中的事件（EventEmitter） API详解（附源码）", "desc": "EventEmitter 是 NodeJS 的核心模块 events 中的类，用于对 NodeJS 中的事件进行统一管理，用 events 特定的 API 对事件进行添加、触发和移除等等，核心方法的模式类似于发布订阅。 在构造函数 EventEmitter 上有一个属性 _ev…"}, {"id": "6916909772079890440", "title": "一个使用 node koa 后端做的 simple_todoList", "desc": "前言很多的练手、复习都是从一个简单的todoList开始的这个todoList我使用了node作为后端，koa框架，有首页和详情页，不过数据不多，内容也么得，不过无所谓~代码和资源在我的github："}, {"id": "6844903621486706701", "title": "node 之fs 操作文件 ？ 缓存Buffer ? ", "desc": "如果是汉字，是3个字节，那就是第三行。对于英语字母，是两个字节，和 ASCLL是相同的，我们区分他们用的就是编码前面的标识。 缓存输出，把不能拼成汉字的先缓存，在输出. ... TypeError: fd must be a file descriptorfs.write这个方…"}, {"id": "6844903725123764238", "title": "基于Electron + nodejs + 小程序 实现弹幕小工具（中篇）", "desc": "上两篇文章，分别对产品需求和Electron端的实现做了相关的介绍，有兴趣的朋友可以看看之前的文章。本文，将介绍服务端的实现。 因此，我们需要创建一个websocket服务。在这里，我们选择使用ws模块。 生成小程序二维码，我们需要使用到微信的API。我们将使用request这…"}, {"id": "6844903856908795911", "title": "使用 apiDoc 为你的Node.js API 生成文档", "desc": "当你为其他开发人员（前端，桌面，移动等）开发 API 时，需要生成一份风格良好的文档，以便他们知道可以使用的内容和方式，这非常重要。 为此，在Node.js项目中，我一直在使用apiDoc，因为它能够从源代码中的注释生成HTML文档。 对于本文，我将使用我开发的 TODO Li…"}, {"id": "6923099466471833614", "title": "node集群（cluster）", "desc": "为了让node应用能够在多核服务器中提高性能，node提供cluster API，用于创建多个工作进程，然后由这些工作进程并行处理请求。 上面例子中，使用cluster创建多个工作进程，这些工作进程能够共用8080端口，我们请求localhost:8080，请求任务会交给其中一…"}, {"id": "6869396236273729544", "title": "使用 Node.js 定制你的技术雷达：中篇", "desc": "在上一篇文章中，我们本地已经能够运行起 Thoughtworks 新版本在线雷达。 也能够通过修改 JSON 文件来完成对内容的更新维护，但是距离好用的技术雷达还差很远，尤其是在对雷达图上的技术点、页面内容进行更新维护的时候。 本篇我们就继续来折腾，先从最复杂的雷达图部分开始吧…"}, {"id": "6844903583280791566", "title": "[Gitlab]使用Webhook实现前端项目自动发布", "desc": "以我司为例，我们团队内部使用Gitlab作为代码仓库，所以以下内容都是在Gitlab中进行实践的，当然在Github上其实也是大同小异的。 Webhook顾名思义，其实就是一钩子。当我们在Gitlab上做出某些特定操作时，可以触发钩子，去进行一些我们事先设定好的脚本，以达到某些…"}, {"id": "6844904025112969230", "title": "gitbook 入门教程之网站域名备案 icp 插件", "desc": "在您的 gitbook 的 book.json 文件中，将 icp 添加到 plugins 列表中。 在 pluginsConfig ,将 number 值设置为您自己的 icp 网站备案编号. 在 pluginsConfig ,label 或 link 值是可选的,默认情况下…"}, {"id": "6844903573810053133", "title": "Nodejs + Face++ \b识别身份证照片", "desc": "因为有这样一件事情，需要获取身份证正面照中的姓名和身份证号，如果全部通过眼看手敲的话，很费事，而且浪费时间，当时能想如果能自动化执行就好了。 我是在mac的终端下开发的，如果是window环境系，部分命令不适用，需要替换合适的命令。"}, {"id": "6844904004116283399", "title": "如何优雅地在Node应用中进行错误处理", "desc": "不知道你有没有遇到这样一种情况，某天你写的代码在线上突然发生错误，然后你打开控制台，却对着打过包的错误信息毫无头绪？又或者说是代码在node端出现了问题，你查看错误日志的时候，却发现日志文件中都是杂乱的错误堆栈信息。 其实上面这些问题都可以通过在代码中引入合适的错误机制进行解决…"}, {"id": "6844903901615882248", "title": "精读《Nodejs V12》", "desc": "1. 引言 Node12 发布有几个月了，让我们跟随 Nodejs 12 一起看看 Node12 带来了哪些改变。 2. 概述 Node12 与以往的版本不同，带来了许多重大升级，包括更多 V8 特性，Http 解析速度的提升，启动速度的提升，更好的诊断报告、内置堆分析工具，E…"}, {"id": "6844903603497336846", "title": "NodeJS 微信公共号开发 - 实现微信网页授权获取用户信息", "desc": "使用 NodeJS 进行微信公共号开发，我们经常需要获取当前微信用户的用户信息，本文就使用 Express + mongoose 结合 Token 实现微信网页授权获取用户信息。"}, {"id": "6844903748280516622", "title": "iKcamp新书上市《Koa与Node.js开发实战》", "desc": "Node.js 10已经进入LTS时代！其应用场景已经从脚手架、辅助前端开发（如SSR、PWA等）扩展到API中间层、代理层及专业的后端开发。Node.js在企业Web开发领域也日渐成熟，无论是在API中间层，还是在微服务中都得到了非常好的落地。本书将通过Web开发框架Koa2…"}, {"id": "6844903841117241357", "title": "解析jsonwebtoken（jwt）在nodejs中的使用。", "desc": "这里要用到三个插件，加上前端一共是至少4个插件使用jsonwebtoken进行加密和使用jwt无密钥解析后端对发送给前端的token进行有密钥解析passport//token解析主插件相当于各种pa"}, {"id": "6844903580944580621", "title": "基于React的脚手架搭建", "desc": "为了能够在工作中更加快速的搭建起开发环境，所以在create-react-app的基础之上结合自身公司业务和个人习惯，搭建了个更加方便的脚手架。GitHub地址 按照如上操作即可,然后再添加src/**/*.css在.gitignore文件中。接下来我们希望项目能够监测scss…"}, {"id": "6844903504335601677", "title": "Js 中的模块化是如何达成的", "desc": "要对一个东西进行深入的剖析，有必要带着目的去看。模块化所要解决的问题可以用一句话概括 这样做的目的显而易见，更好的组织项目代码，注意到两个文件中的 require 和 module.exports，从现在的上帝视角来看，这出自 CommonJS 规范（后文会有一个章节来专门讲规…"}, {"id": "6844904034785034248", "title": "聊一聊 Node.js 错误处理", "desc": "软件程序中，我们可以将错误大致分为外部错误和内部错误两大类。 外部错误是正确编写的程序在运行时产生的错误。它并不是程序本身的 bug，更多是一些外部原因导致的问题，比如请求超时、服务器返回 500、内存不足等。 而内部错误是程序里的 bug。比如传参类型错误、读取 undefi…"}, {"id": "6844903589786157063", "title": "为什么React组件点击事件回调函数会需要绑定this", "desc": "js里面的this绑定是代码执行的时候进行绑定的，而不是编写的时候，所以this的指向取决于函数调用时的各种条件。"}, {"id": "6844903689107275784", "title": "打包升级：node-cron原理详解", "desc": "在正式进入源码的探索时，最好了解node-cron的基本用法以及相关参数的含义。 onComplete: 定时任务执行完后的回调函数。 aliases: 月份以及一周的别名。 以上常量都是采用数组的格式，内容正好与数组下标一一对应。 下面以'20-50/4 * * * jan-…"}, {"id": "6844903731088064525", "title": "编写自己的Babel插件（一）", "desc": "教你如何写组件按需加载插件，let/const转var，箭头函数转普通函数Note:前置知识：了解babel的使用，了解JavaScript语法树安装babel-cli,babel-core我们的打包"}, {"id": "6844903605619671053", "title": "前端工程师的技术进阶点在哪里?", "desc": "前端工程师的技术进阶点在哪里? 单纯讲技术进阶点意义不大，脱离场景都是耍流氓。我举个实际例子，今天的阿里大文娱优土，阿里接管2年，底层替换差不多了，由内容为王慢慢转变为产品技术驱动。这种情况下，前端如何进阶呢？业务很多，历史问题很多，老板迫切希望创新，赶超对手。 端上，我有pc…"}, {"id": "6844903590931234830", "title": "Mongoose初步学习", "desc": "Mongoose的地位是位于MongoDB与NodeJS之间的，看上去是增加了一些复杂度，但实际上却做了很多抽象，大大简化了使用MongoDB的难度。 Schema、Model、Entity的关系请牢记，Schema生成Model，Model创造Entity，Model和Ent…"}, {"id": "6925694338911436813", "title": "动手做一个通用代码生成器", "desc": "上面的这几点几乎所有流行的编程语言都可以做得到。我们这里选择使用nodeJs express 在获取到用户提交的信息之后我们还需要拿到数据库中的信息。"}, {"id": "6844903556772954126", "title": "快速搭建你的 github pages 个人博客 —— 基于 Create-React-App 的单页面应用实践", "desc": "相信各位github资深玩家们都有自己基于 github pages 搭建的个人站点。官方推荐的静态站点生成器是 Jekyll，关于 Jekyll 的使用感兴趣的各位请自行 google，这里就不赘述了。本文主要介绍下基于 Create-React-App 搭建个人博客的相关实…"}, {"id": "6900728875647500301", "title": "第四代Express框架koa简介", "desc": "熟悉Spring MVC的朋友应该都清楚Spring MVC是基于servlet的代码框架，这是最传统的web框架。然后在Spring5中引入了Spring WebFlux，这是基于reactive-netty的异步IO框架。 同样的，nodejs在最初的Express 3基础…"}, {"id": "6844903603564445710", "title": "实例：使用puppeteer headless方式抓取JS网页", "desc": "google chrome团队出品的puppeteer 是依赖nodejs和chromium的自动化测试库，它的最大优点就是可以处理网页中的动态内容，如JavaScript，能够更好的模拟用户。 有些网站的反爬虫手段是将部分内容隐藏于某些javascript/ajax请求中，致…"}, {"id": "6844903870087299085", "title": "JavaScript深入浅出第1课：箭头函数中的this究竟是什么鬼？", "desc": "JavaScript箭头函数与普通函数不只是写法上的区别，它们还有一些微妙的不同点，其中一个不同点就是this。 这句话很简单，不过听着稍微有点莫名其妙，得从头说起。 关于this的文章也够多了，有时候越描越黑，我就不再添乱了，我只负责搬运一下MDN文档：this，感兴趣的可以…"}, {"id": "6857669841399054344", "title": "极简 Node.js 入门系列教程 —— 1.2 模块系统", "desc": "其中 $HOME 是用户的主目录， $PREFIX 是 Node.js 里配置的 node_prefix。强烈建议将所有的依赖放在本地的 node_modules 目录，这样将会更快地加载，且更可靠 模块在第一次加载后会被缓存到 Module._cache ，如果每次调用 re…"}, {"id": "6844903544965824526", "title": "使用vue实现grid-layout功能", "desc": "先clone项目到本地。 git reset --hard commit命令可以使当前head指向某个commit。 点击复制按钮来复制整个commit id。然后在项目根路径下运行git reset。用浏览器打开index.html来预览效果，该插件的html主要结果如下： …"}, {"id": "6844904065684652040", "title": "解决80%docker起不来的问题", "desc": "部署过程中总是会碰到各种各样的问题，比如在本机能启动，放到docker容器中就无法正常运行，对于这样的问题，既不好调试，也不好定位。 于是求助了部门的架构师大佬，他告诉我，如果实在安装不上，可以使用本机打包一个基础镜像的方式来部署。 安装完依赖，进行docker build，把…"}, {"id": "6844903586917269511", "title": "node那点事(一) -- Readable streams（可读流）", "desc": "流（stream）在 Node.js 中是处理流数据的抽象接口（abstract interface）。 stream 模块提供了基础的 API 。使用这些 API 可以很容易地来构建实现流接口的对象。 Node.js 提供了多种流对象。 例如， HTTP 请求 和 proce…"}, {"id": "6844903864060084237", "title": "[译]基于NodeJS和Redis的任务调度", "desc": "在uSTADIUM，我们使用任务调度系统发送成千上万个推送通知。起初，对任务队列和调度程序的需求并不明显。我们的服务器通过一个请求处理通知就能满足我们的需求。但随着时间的推移，系统开始承受不住负载。一开始我不确定能否解决这个问题，所以解决这个问题过程是一段有趣的经历。在本文中，…"}, {"id": "6844903609679740941", "title": "来学着写自己的“jQuery”", "desc": "jQuery是开源软件，使用MIT许可证授权。jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层…"}, {"id": "6844903700431896589", "title": "8102年底如何开发和维护一个npm项目", "desc": "运行npm init，可以通过命令行进行一些初始化的设置，如果想快速进行设置，可以运行npm init -y，会在项目的根目录生成一个package.json的文件，具体包含哪些配置可以参考官方文档，下面介绍一些常用的配置。 最好增加README.md，用来对项目进行简单的说明…"}, {"id": "6844904153005850638", "title": "记一次 nvm-windows 安装踩坑", "desc": "前两天刚加入武汉新公司，公司配的 thinkpad 电脑，说实话二年多没用 windows 了，有点不习惯了，不过这并不是大问题，只好再熟悉熟悉呗。 在配置电脑环境的时候，需要安装 nvm， 与 mac 不同直接安装 nvm 不同，Windows 是安装 nvm-windows…"}, {"id": "6844903693607763982", "title": " JavaScript异步编程笔记", "desc": "事件！事件到底是怎么工作的？JavaScript出现了多久，对JavaScript异步事件模型就迷惘了多久。迷惘导致bug，bug导致加班，加班导致没时间撩妹子，这不是js攻城狮想要的生活。 只有一个名为i的变量，其作用域由声明语句var i定义(var定义的i作用城不是循环内…"}, {"id": "6844903606844391431", "title": "基于node.js平台的脚手架开发经历", "desc": "前言脚手架，不管是去年邀请在线分享还是前端早读课多多少少都有推荐过几期，但今天这篇算是分享的详细的。如果你准备给项目搞一个脚手架，这篇不要错过了。今日早读文章由阿里@张国钰授权分享。正文从这开始～前言"}, {"id": "6996313710067187720", "title": "es6的export和export default指令", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 上一篇文章说了CommonJS规范的exports与module.exports的异同， 今天来讲讲es6新增的export和exp"}, {"id": "6996314699420106789", "title": "Node.js基础学习-依赖包管理工具 npm & yarn", "desc": "day13学习贵在坚持, 笔记是灵魂, 温故而知新, 时不时翻一翻, 回顾一下知识点, 加深记忆, 事半功倍! 这里记录一些学习 Node.js 的上手攻略"}, {"id": "6844903641594216455", "title": "node-\"fs-extra\"模块代替fs使用", "desc": "fs-extra是fs的一个扩展，提供了非常多的便利API，并且继承了fs所有方法和为fs方法添加了promise的支持。 它应该是 fs 的替代品。 我厌倦了包括mkdirp，rimraf以及ncp在我的大部分项目中。 使用前，必须了解第三方库给现有库解决了哪些问题，不要为了…"}, {"id": "6995410743755538469", "title": "node自动化构建(三)--实践", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战。 其实掌握前面两个模块已经基本上算是没啥问题了，下面再聊点其他实用的东西吧"}, {"id": "6871437065754509325", "title": " 【写给初入前端职场同学的话】，顺便聊聊：Node.js入门系列（四）事件处理机制及事件环机制", "desc": "在写这篇文章的时候，我收到两个同学的私信，在看了我之前的一些文章，觉得有收获，想跟我聊聊自己的一些经历和想法，希望能得到一些建议。两位小伙伴有相同的状况，我把情况总结归纳了一下：2020年毕业，由于今年特殊，没有了校招，目前人在深圳，刚入实习，公司规模小，不甘心低薪，想辞职回家…"}, {"id": "6844903718345768973", "title": "react + node + express + ant + mongodb 的简洁兼时尚的博客网站", "desc": "此项目是用于构建博客网站的，由三部分组成，包含前台展示、管理后台和后端。 此项目是基于 react + node + express + ant + mongodb 的，项目已经开源，项目地址在 github 上，喜欢的，欢迎给个 star 。 1. 效果图 前台展示目前只支持…"}, {"id": "6969601737707487269", "title": "Node.js 入门系列（一）初识 Node", "desc": "Node.js 并不难学，它是运行在服务端的 JavaScript，如果你熟悉 Javascript，那么你将会很容易的学会 Node.js。"}, {"id": "6844903621872582669", "title": "Js 的事件循环(Event Loop)机制以及实例讲解", "desc": "大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop方案应运而生... js作为主要运行在浏览器的脚本语言，js主要用途之一是操作DOM。 为了避免这种问题，js必须是一门单线…"}, {"id": "6844904024118919176", "title": "给你的网站添加第三方登录以及短信验证功能", "desc": "OAuth 2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。比如掘金这种第三方账号 微信、微博、github 登录方式一样。思考一下这种登录方式是如何设计和实现的呢？日常生活中很多APP或者网站在用户输入完手机号之后都需要发送验证码校验，那么这整套流程又是如何…"}, {"id": "6844903895748050958", "title": "如何优雅地处理 Async / Await 的异常？", "desc": "async/await 中的异常处理很让人混乱。尽管有很多种方式来应对async 函数的异常，但是连经验丰富的开发者有时候也会搞错。 假设你有一个叫做run()的异步函数。在本文中，我会描述 3 种方式来处理run()的异常情形： try/catch, Go 语言风格, 函数调…"}, {"id": "6991832088936710175", "title": "做一个CLI版的时间管理工具（一）｜ 8月更文挑战", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6993730948235804680", "title": "搭建自动化开发环境 - 模块化编程的理解", "desc": "说到模块化, 本文详细整理学习一下 模块化 具体概念及运作原理 先上干货! 模块化理解 运用 工作中日常开发中必用到的!!! require/export/import/module.exports"}, {"id": "6965439044067000357", "title": "【排障系列】DNS 查询导致的 Nodejs 服务疑似“内存泄漏”问题", "desc": "某天下午，线上的服务监控发出报警：在同一个服务下，部署的众多容器中，某一个容器出现 OOM 问题。本文通过抽丝剥茧的方式，逐步排查并最终定位问题。"}, {"id": "6844903709592256525", "title": "KOA2框架原理解析和实现", "desc": "koa是一个基于node实现的一个新的web框架，它是由express框架的原班人马打造的。它的特点是优雅、简洁、表达力强、自由度高。它更express相比，它是一个更轻量的node框架，因为它所有功能都通过插件实现，这种插拔式的架构设计模式，很符合unix哲学。 koa框架现…"}, {"id": "6969969619587039246", "title": "Node.js 入门系列（二）Node 模块", "desc": "模块规范是构建一个大型 Node.js 应用的基础，所以非常重要；Node.js 模块规范也就是 CommonJS 模块规范，下面来简单了解一下吧"}, {"id": "6844903902307942414", "title": "Node.js 高级进阶之 fs 文件模块学习", "desc": "文件操作是开发过程中并不可少的一部分。Node.js 中的 fs 模块是文件操作的封装，它提供了文件读取、写入、更名、删除、遍历目录、链接等 POSIX 文件系统操作。与其它模块不同的是，fs 模块中所有的操作都提供了异步和同步的两个版本,具有 sync 后缀的方法为同步方法，…"}, {"id": "6995168533751529486", "title": "做一个CLI版的时间管理工具（十）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6996663290197704740", "title": "做一个CLI版的时间管理工具（12）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6992217618828492807", "title": "做一个CLI版的时间管理工具（二）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6993347133545906183", "title": "Node.js-搭建自动化开发环境-详细步骤(四)", "desc": "各种工具插件的使用: 压缩html等 6-9. 输出 src 中的 html 文件，并进行压缩，我们使用 gulp-htmlmin 工具 - 压缩html"}, {"id": "6844903617753776136", "title": "Node.js Event Loop与浏览器 Event Loop(事件环)", "desc": "进程是操作系统分配资源和调度任务的基本单位,线程是建立在进程上的一次程序运行单位，一个进程上可以有多个线程。 JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。 JavaScrip…"}, {"id": "6844904096172883981", "title": "撸一个自动压缩工具（nodejs）", "desc": "前端开发有这么一个场景：前端同学要去指定的地址去下载切图。还需要压缩，完后才能使用 针对这个场景，作为一名合格的前端工程师，应该可以有一些自己的想法，提高工作效率；使用 NODEJS 撸一个自动压缩工具，减少这些冗余的无意义的工作。 这个基类的作用就是底层处理，读取目标图片，然…"}, {"id": "6844903653120163848", "title": "聊聊Javascript的事件循环", "desc": "简而言之，在web前端编程里面JavaScript通过浏览器提供的事件模型API和用户交互，接受用户的输入。 事件驱动程序模型基本的实现原理基本上都是使用 事件循环（Event Loop）。 而JS的运行环境主要有两个：浏览器、Node。 在两个环境下的Event Loop实现…"}, {"id": "6844903918468595720", "title": "使用node.js开发命令行工具（一）创建与发布", "desc": "确保自己有node环境，并且node已经配置到环境变量。没安装的可以到官网下载或者国内镜像下载。 新建一个js文件，比如: hello.js。 在js文件中键入console.log('hello world!')，保存。 在打开控制台，切换到hello.js所在的目录，执行n…"}, {"id": "6844903749073240077", "title": "简易实现一个express", "desc": "Express是一个简洁、灵活的node.js Web应用开发框架，它提供一系列强大的特性，帮助你创建各种web和移动应用。丰富的HTTP快捷方法和任意排列组合的Connect中间件，让你创建健壮、友好的API变得既快捷又简单。 简单地说，就是根据方法和路径执行匹配成功后执行对…"}, {"id": "6844903558215630855", "title": "快速搭建你的 github pages 个人博客 —— 基于 Create-React-App 的单页面应用实践", "desc": "相信各位github资深玩家们都有自己基于 github pages 搭建的个人站点。官方推荐的静态站点生成器是 Jekyll，关于 Jekyll 的使用感兴趣的各位请自行 google，这里就不赘述了。本文主要介绍下基于 Create-React-App 搭建个人博客的相关实…"}, {"id": "6844903792387833863", "title": "Nodejs教程17：multiparty", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 上一节虽然完成了完整的文件上传流程，但实际工作中不可能自己从头开发所有功能，这样效率很低。 我们可以尝试使用第三方库来完成POST请求的处理，如multiparty。 通过如下例子，可以测试一下multipart…"}, {"id": "6844903693007978509", "title": "NodeJS：将文件夹按照存放路径变成一个对应的JSON", "desc": "在编程之前，一定要有一个信条：代码是为了减少工作量而生的，重复枯燥的工作是不能容忍的。 这是由上篇文章衍生出的需求，我已经将一个文件夹内所有的文件名转译为英文，但我在页面上还需要将这些图片引入加载。如果一个一个手写到程序里，未免有点劳心劳神。那么何不将这个文件夹按照存放路径变成…"}, {"id": "6844903617728610317", "title": "Virtual Dom算法实现笔记", "desc": "网上关于virtual dom（下面简称VD）的博客数不胜数，很多都写得很好，本文是我初学VD算法实现的总结，在回顾的同时，希望对于同样初学的人有所启发，注意，这篇文章介绍实现的东西较少，见谅。 很多代码来自github库：hyperapp，几百行代码的库，拥有了redux和r…"}, {"id": "6844904047363784717", "title": "Node.js微服务实践(二)", "desc": "选择Nodejs的理由：将证明选择Node.js来构建的正确性。介绍使用Node.js时设计的软件栈。 微服务架构Seneca：关于Seneca 的基本知识。 PM2：PM2 是运行 Node.js 应用的最好选择。 如今，Node.js 已经成为国际上许多科技公司的首选方案。…"}, {"id": "6844903742106501128", "title": "从源码上理解express中间件", "desc": "我们从一个app.use开始，逐步分析到下一个中间件函数的执行。 首先从github上下载express源码。 建立一个文件test.js文件，引入根目录的index.js文件，实例化express，启动服务器。 启动服务器，通过访问http://127.0.0.1:8888服…"}, {"id": "6961399327247990814", "title": "node-mongodb---通用的CRUD接口", "desc": "服务端经常涉及一些增删改查的接口编写，为了提高代码复用性，加强工作效率，开发一个基于node-mongoDB的通用CRUD接口。 代码分析 先看一下平常的服务端接口： 分析一下有哪些变量： 路由res"}, {"id": "6844903568554590222", "title": "深入浅出基于HLS流媒体协议视频加密的解决方案", "desc": "一套简单的基于HLS流媒体协议，使用video.js + NodeJS + FFmpeg等相关技术实现的m3u8+ts+aes128视频加密及播放的解决方案示例。"}, {"id": "6908913383962066951", "title": "「nodemailer」Node 邮件发送模块", "desc": "Nodemailer 是一个简单易用的 Node.JS 邮件发送模块（通过 SMTP，sendmail，或者 Amazon SES），支持 unicode，你可以使用任何你喜欢的字符集。 Windows支持–您可以使用安装npm在Windows上，与其他模块一样，没有编译的依赖…"}, {"id": "6844903747756228622", "title": "学习Node须知——中间件框架Connect", "desc": "Connect 是一个 node 中间件框架。Express 就是基于 Connect 开发的。 如果把一个 HTTP 处理过程比作是污水处理，中间件就像是一层层的过滤网，过滤网有各自不同的作用。 Connect 中间件就是 JavaScript 函数。函数一般有三个参数： 一…"}, {"id": "6844903634665209863", "title": "React Native组件之VirtualizedList", "desc": "React Native（简称RN）列表是基于ScrollView实现的，也就是可以滚动的，然而RN并没有直接使用IOS或Android的原生列表组件，这是因为RN真正调用native代码的过程是异步的，二Native的渲染要求必须同步渲染的。 在早期版本中，对于列表情况RN采…"}, {"id": "6844903721051095048", "title": "10分钟快速精通rollup.js——前置学习之基础知识篇", "desc": "本文是《10分钟快速精通rollup.js——Vue.js源码打包过程深度分析》的前置学习教程，讲解的知识点以理解Vue.js打包源码为目标，不会做过多地展开。教程将保持rollup.js系列教程的一贯风格，大部分知识点都将提供可运行的代码案例和实际运行的结果，让大家通过教程就…"}, {"id": "6844903558014304269", "title": "使用node脚本全自动删除豆瓣评论与帖子", "desc": "前两天刚转租出去，本来想去豆瓣把帖子删了，因为帖子中有太多的个人信息，一个一个清空太麻烦。无奈看了一遍没有删帖的地方，后来才知道原来豆瓣删帖必须是没有评论的帖子才可以删除，我看了一下我的帖子，瞬间石化，我自己的回复都已经有上百条了，一个一个删要到什么时候啊；本能的我开始研究豆瓣…"}, {"id": "6844904190666506247", "title": "使用Node.js和JSON搭建简单的动态服务器", "desc": "读取 users.json 的数据，创建一个空数组，将传递过来的参数 push 进去。将数组转换为字符串，在转换为对象。 获取数据库中最小的 id 值，将数据组成新的对象，添加进入 数据库 中。 读取 users.json 的数据，创建一个空数组，将传递过来的参数 push 进…"}, {"id": "6844903574573416456", "title": "Express实用技巧和设计模式", "desc": "监听所有的请求方法，可以匹配所有的HTTP动词。根据请求路径来处理客户端发出的所有请求，参数同上"}, {"id": "6888920137701785613", "title": "nodejs/Sequelize/MySQL——基础、联表及优化", "desc": "大部分人对 MySQL、SQL 是有了解的，毕竟教科书里都写着。 MySQL 是一种典型的关系型数据库嘛，怎么叫关系呢？ 这里两个点：::二维行列表::（体现在个体表数据结构上）、::互相连接::（体现在表关系和库引擎特点上）。 既然关系型数据库是一个统一的标准，那只要各家都按…"}, {"id": "6844903824738500622", "title": "node.js监听文件变化", "desc": "随着前端技术的飞速发展，前端开发也从原始的刀耕火种，向着工程化效率化的方向发展。在各种开发框架之外，打包编译等技术也是层出不穷，开发体验也是越来越好。例如HMR，让我们的更新可以即时可见，告别了手动F5的情况。其实现就是监听文件变化自动调用构建过程。下面就关注下如何实现node…"}, {"id": "6844903741091512327", "title": "玩转Koa -- 核心原理分析", "desc": "而Koa中则是自定义request和response对象，然后保持对res和req的引用，最后通过getter和setter方法实现扩展。 但是为了方便开发者调用这些属性和方法，Koa将response和request中的属性和方法代理到context上。 上述就是属性代理和方…"}, {"id": "6844903808330366989", "title": "Node.js 多线程完全指南", "desc": "很多人都想知道单线程的 Node.js 怎么能与多线程后端竞争。考虑到其所谓的单线程特性，许多大公司选择 Node 作为其后端似乎违反直觉。要想知道原因，必须理解其单线程的真正含义。 JavaScript 的设计非常适合在网上做比较简单的事情，比如验证表单，或者说创建彩虹色的鼠…"}, {"id": "6939684851750535181", "title": "一个Node进程的死亡与后事处理", "desc": "人固有一死，一个 Node 进程亦是如此，总有万般不愿也无法避免。从本篇文章我们看看一个进程灭亡时如何从容离去。 一个 Node 进程，除了提供 HTTP 服务外，也绝少不了跑脚本的身影。跑一个脚本拉取配置、处理数据以及定时任务更是家常便饭。在一些重要流程中能够看到脚本的身影：…"}, {"id": "6979616119153754119", "title": "Node系列学习之日志(二)", "desc": "对接口添加日志记录, 对每一次访问接口的请求都会将数据存入access.log中, 简单封装了一个写入日志的函数~"}, {"id": "6855129007508488206", "title": "超级详细的koa源码解析（看完不会我打你）", "desc": "如果你想提升node水平，那么我极力推荐你看看koa源码。 koa作者是神一般的男人TJ Holowaychuk，源码设计巧妙而又短小精悍，既能领略koa的设计思想，而又避免了源码过冗长而带来的疲劳感。 2. context的 委托模式 3. koa的 错误处理 然后用任何一个…"}, {"id": "6991372942349336607", "title": "10分钟快速了解node开发技术栈", "desc": "npm基础配置 npm是nodejs的包管理器 dependencies 设置作为依赖安装的 npm 软件包的列表。 devDependencies 设置作为开发依赖安装的 npm 软件包的列表。 它"}, {"id": "6844903581913448456", "title": "别人问你http协议，到底是想问什么？（二）http与缓存", "desc": "上一篇文章我们讨论了TCP三次握手，http请求头、响应头，Content-Type字段，如何使用node控制这个字段等。我这篇文章将从http状态码入手，讨论写常用的http方法和控制缓存。 我们调试一个接口时，喜欢的数字就是 200，或者说，除了这个数字，别的我们都不喜欢…"}, {"id": "6858118598813024264", "title": "使用nvm实现多版本node自由切换", "desc": "root和path分别是nvm和node的安装路径，这两个不要动，这是之前安装时根据你选择的路径自动生成的，这个配置文件默认也只有这两项。因为我没改配置文件，所以后面的4项我都没有，只是后来搜到了，就说一下，arch表示安装的node是多少位，proxy是设置代理，node_m…"}, {"id": "6909021679100362760", "title": "分片上传，有手就行", "desc": "最近学习node在用到fs模块的时候了解到stream流的概念，突然想到可以试着实践一下nodeserver端接收文件思路前端根据自定义的chunk大小切割文件后并发上传后端接收文件数据存下文件并根据"}, {"id": "6844903938945187854", "title": "FlutterGo 后端知识点提炼:midway+Typescript+mysql(sequelize)", "desc": "关于 FlutterGo 或许不用太多介绍了。 如果有第一次听说的小伙伴，可以移步FlutterGo官网查看下简单介绍. FlutterGo 在这次迭代中有了不少的更新，笔者在此次的更新中，负责开发后端以及对应的客户端部分。这里简单介绍下关于 FlutterGo 后端代码中几个…"}, {"id": "6844904200153874440", "title": "Mock数据从未如此简单", "desc": "前后端分离的项目中，前端往往需要自己构造假数据进行渲染。作为一名合格且优秀的前端开发人员当然是希望一次性编码，后面前后端联调的时候最好什么都不用做，直接一个文档丢给后端自己就可以愉快的进行下一个项目了。为了写代码能够一泻千里，我们一般在编写代码之前做一个简单的数据格式文档定义，…"}, {"id": "6844903709965549576", "title": "zanePerfor 一款完整，高性能，高可用的前端性能监控系统，不要错过", "desc": "HI!，你好，我是zane，zanePerfor是一款最近我开发的一个前端性能监控平台，现在支持web浏览器端和微信小程序段。 我定义为一款完整，高性能，高可用的前端性能监控系统，这是未来会达到的目的，现今的架构也基本支持了高可用，高性能的部署。实际上还不够，在很多地方还有优化…"}, {"id": "6844903541400698887", "title": "vue-cli解析", "desc": "这篇文章的主题是vue-cli的理解。或许，很多人在开发vue的时候，我们会发现一个问题——只会去用，而不明白它的里面的东西。现在的框架可以说是足够的优秀，让开发者不用为搭建开发环境而烦恼。但是有时候，我们还是得回到原始生活体验一下，才能够让自己更上层楼，希望大家共勉。如果你喜…"}, {"id": "6844903665803722759", "title": "【webpack进阶】前端运行时的模块化设计与实现", "desc": "webpack是一个强大而复杂的前端自动化工具。其中一个特点就是配置复杂，这也使得「webpack配置工程师」这种戏谑的称呼开始流行🤷但是，难道你真的只满足于玩转webpack配置么？ 显然不是。在学习如何使用webpack之外，我们更需要深入webpack内部，探索各部分的…"}, {"id": "6844904022843850766", "title": "创心-第14届D2参会总结", "desc": "又是一年前端盛会D2，度过了非常充实的一天。感谢各位分享嘉宾和组织者辛勤的准备~还收了很多好看的贴纸hhh，晒下参会证和电脑背面~ 前端这些年来，充满着变革和重塑，从应用上层逐渐深入到语言框架底层，对前端的要求也在不断变化，始终有着巨大的挑战和机遇。 端侧渲染体系的重塑， 从P…"}, {"id": "6844903989956313101", "title": "微信小程序工程化之路", "desc": "配置一台打包机，建议弄一台mini（具体配置根据大家的实际情况来定，ps一下我们公司用的16G+128的，目前来说资源已经明显不够用了）其次要去搭建一个jenkins服务，做任务的集中管理。 如果有可能的话对接一下各自公司的办公管理工具比如企业微信、钉钉等用来做消息的通知、审核…"}, {"id": "6892946418034540558", "title": "vivo悟空活动中台-打造 Nodejs 版本的MyBatis", "desc": "一、背景悟空活动中台技术文章系列又和大家见面了，天气渐冷，注意保暖。在往期的系列技术文章中我们主要集中分享了前端技术的方方面面，如微组件的状态管理，微组件的跨平台探索，以及有损布局，性能优化等等。还未"}, {"id": "6844903895030824974", "title": "跨域解决方案之Node中间层", "desc": "要明白Node层为什么能实现跨域，首先要明白一个原理：跨域问题是浏览器的同源策略的安全机制引起的，服务器之间是不存在跨域问题的，这也不是说服务器之间没有安全机制，只是服务器之间的调用无论是通过http访问还是通过rpc调用都是协议层面的机制，并没有限制必须同源。 我们这次的De…"}, {"id": "6844903648091176974", "title": "ES6版Promise实现，给你不一样的体验", "desc": "摘要： 在很久很久以前，Promise还没有来到这个世上。那时森林里的有这样一群攻城狮，他们饱受回调地狱（回调金字塔）的摧残，苦不堪言。直到有一天，一位不愿意留下姓名的特工横空出世，将他们从回调地狱中解救了出来，代号Promise。自此，很多人都踏上了寻找Promise的道路，…"}, {"id": "6844903653694767111", "title": "javaScript 之  蚁人<微任务>  ", "desc": "每次我在写技术类文章的时候都喜欢用引用一个神话故事或者一位超级英雄。没错，因为我的中二病很严重，写代码的时候都幻想自己有一对机械手臂帮我在那啪啪啪的调试bug，别想歪了不是那种啪啪啪。 好吧，为什么要说蚁人那。如果你看过漫威（虽然我是DC粉）的超级英雄电影你应该知道蚁人的能力。…"}, {"id": "6844903507951091720", "title": "避免回调地狱和长链式then，快速实现具有继发关系的请求", "desc": "这篇文章不是为了介绍回调地狱也不是介绍Promise，而是介绍如何实现具有继发关系的多个请求。"}, {"id": "6945666337276755981", "title": "利用 node 创建一个克隆脚手架的工程之简化命令行开发", "desc": "clear 清里 cmd 面板了。 chalk 例子：chalk.blue('Hello world!');明白作用了吧。 open 字面意思。 安装完依赖，就是开始自动运行了。 学习node，既能接触更深层的语言，也可以方便手写各种命令soso的，更重要的是作为一名前端，在性…"}, {"id": "6908593098536779784", "title": "Node模块的作用域", "desc": "1. 全局作用域和局部作用域 全局作用域：直接编写在script标签中，或者单独的一个js文件中的代码，都是全局作用域。全局作用域在页面创建时打开，在页面关闭时销毁。在前端js中，在全局作用域中有一个全局对象 window（代表的是一个浏览器的窗口，由浏览器创建），可以直接使用…"}, {"id": "6844903558765084679", "title": "iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ 错误处理", "desc": "那么如何在 Koa 中实现这种功能呢？其实，一个简单的中间件即可实现，我们把它称为 http-error。实现过程并不复杂，拆分为三步来看： 允许使用者自定义错误页面。 渲染页面逻辑渲染出对应的错误页面。 可以看到，关键点就是捕捉错误，以及实现错误处理逻辑和渲染页面逻辑。 基于…"}, {"id": "6844903586476867591", "title": "NodeJS和TCP：一本通", "desc": "维护ing... TCP用序列号读数据包进行标记，假设当前的序列号为s，发送数据长度为i,则下次发送数据时的序列号为s+i。在建立连接时通常由计算机生成一个随机数作为序列号初始值。 它等于下一次应该接受到的数据的序列号。假设发送端的序列号为s，发送数据长度为i，那么接收端返回的…"}, {"id": "6844903575441637383", "title": "Libuv初理解", "desc": "libuv是一个跨平台、专门写给nodejs的库，它的设计是围绕着事件驱动的异步I/O模型。在不同的I/O轮询机制上，libuv提供的不是简单抽象对象：handle和streams为sockets和其他实例提供了一个高级抽象。此外，libuv还提供了跨平台文件I/O和线程化功能…"}, {"id": "6913171407300100109", "title": "如何快速搭建一个本地的node服务", "desc": "进入package.json 执行 touch server.js (我在初始化时创建的server.js,可自行命名。如果无法识别 touch，在Windows 环境下执行 npm install touch-cli -g 即可) 启动项目 node server.js， 这…"}, {"id": "6844903549298540551", "title": "利用Vue、Socket.io 实现在线五子棋对战", "desc": "网上有很多利用前端技术来做五子棋的Dome，所以本人为了学习socket.io 就自己也撸了一个"}, {"id": "6945280047662465037", "title": "理解 Node.js 中的 Stream", "desc": "Node.js 中的流以难以使用而著称，甚至更难理解。 用 Dominic Tarr 的话来说：“stream 是 node 中最好用的也是最不易理解的存在。即使是 Redux 的创建者和 React"}, {"id": "6916438016412106766", "title": "nodejs中exports和module.exports的区别", "desc": "如果模块是一个特定的类型就用Module.exports。如果模块是一个典型的“实例化对象”就用exports。在另一个文件引用代码如下:其实，Module.exports才是真正的接口，export"}, {"id": "6844903635038502926", "title": "浅析node中流应用(二) 可写流(fs.createWriteStream)", "desc": "true表示可以继续写入,如果返回false，表示缓存区满了,我们应当停止读取数据以避免消耗过多内存。 完美。 一如既往贴上源码在github参考"}, {"id": "6844903536157786126", "title": "2017前端技术发展回顾", "desc": "前端领域在 2017 年再次以狂热的节奏向前发展。以下列出过去的一年中最值得关注的一系列事情…"}, {"id": "6844903640499503112", "title": "详解JavaScript之神奇的Object.defineProperty", "desc": "为JavaScript对象新增或者修改属性，有两种不同方式：直接使用=赋值或者使用Object.defineProperty()定义。如下： 可知，使用=赋值时，属性的属性描述符value是可以修改的，而writable、enumerable和configurable都为tru…"}, {"id": "6844903582349656071", "title": "Node CLI 开发调试技巧总结", "desc": "Node CLI 开发调试技巧总结"}, {"id": "6847902222534049799", "title": "Node.js中的事件循环", "desc": "在 NodeJS 中不止一个队列，不同类型的事件在它们自己的队列中入队。"}, {"id": "6844903679145803784", "title": "基于CommonJS规范，简单实现NodeJs模块化", "desc": "模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。 模块加载的顺序，按照其在代码中出现的顺序。 读取文件内容。如果是 .js 文件，就把内容加一个闭包 0. 创建module构造函数 每个…"}, {"id": "6844903501043073038", "title": "基于casperjs、resemble.js实现一个像素对比服务", "desc": "本次分享一个提供设计稿与前端页面进行一个像素对比的node服务，旨在为测试或者前端人员自己完成一个辅助性测试。"}, {"id": "6966614457603047431", "title": "[1] node 模块 require & modules & exports ", "desc": "例如，如果您有一个包含一些代码的文件，并且该文件名为xyz.js，则该文件将被视为Node中的一个模块，并且可以说您已经创建了一个名为的模块xyz。 假设你有一个circle.js的文件用于计算： 那"}, {"id": "6942329992311373832", "title": "视频网站：充钱你就是VIP。我：不好意思我是程序员", "desc": "这是一个全网影视采集解析播放的开源项目。 影视采集、播放于一体。 免疼讯、爱骑艺、悠酷视频vip就能看视频。 可以本地跑起来🏃追剧、看电影。 技术栈是 koa + swig模板引擎 + jQuery，代码清晰明了很容易理解。 目前仅做了最大资源网的资源接入，后续可以自己集成、…"}, {"id": "6990304091683422215", "title": "探讨Node.js、TypeScript如何解析模块", "desc": "了解下常见引入方式 node解析 通常，在Node.js里导入是通过 require函数调用进行的。 Node.js会根据 require的是相对路径还是非相对路径做出不同的行为。 相对路径 相对路径"}, {"id": "6975567311260352525", "title": "Node’s Streams", "desc": "醉里挑灯看剑，梦回吹角连营。八百里分麾下炙，五十弦翻塞外声。沙场秋点兵。 马作的卢飞快，弓如霹雳弦惊。了却君王天下事，赢得生前身后名。可怜白发生！"}, {"id": "6844903668492435470", "title": "AST抽象语法树——最基础的javascript重点知识，99%的人根本不了解", "desc": "抽象语法树（AST），是一个非常基础而重要的知识点，但国内的文档却几乎一片空白。 本文将带大家从底层了解AST,并且通过发布一个小型前端工具，来带大家了解AST的强大功能 Javascript就像一台精妙运作的机器，我们可以用它来完成一切天马行空的构思。 我们对javascri…"}, {"id": "6984984068924375076", "title": "关于Node.js版本管理工具，这一篇即学即用~", "desc": "Node.js 是什么？ 为什么需要版本管理工具？ 版本管理工具有哪些？ nvm n nodenv ...等等等等，本文暂时只详细介绍 nvm，其他的后续补充。 nvm 的安装与使用 一、nvm-wi"}, {"id": "6844903649454325773", "title": "ES6 Promise的使用和理解", "desc": "JS语言的执行环境是“单线程”的，即指一次只能完成一件任务；如果有多个任务，那么必须排队，前面一个任务完成，再执行后一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器…"}, {"id": "6844903668425162760", "title": "我是这样黑进你Node.js生产服务器的", "desc": "这篇文章讲述了从一个黑客的角度，以渗透前端项目为目标，从生成 payload，混淆，隐藏 payload，发布 npm，社会工程学提 PR，运行脚本，反向连接到攻击主机，最终主机拿到服务器 shell 的故事。 然后下了一堆你都不知道从哪里来的 npm 包。 此时，在网线的另一…"}, {"id": "6985421942681534495", "title": "nodejs版本管理", "desc": "前言 如今的web前端开发多数大多都离不开Node，而且node更新迭代很快；不同项目依赖的node版本不同，会导致需要安装对应的node版本才能正常运行;同时维护多个版本的node将会是一件非常麻烦"}, {"id": "7005189794124808205", "title": "node学习前的准备-node.js初级（一）", "desc": "​ Nvm的安装： 对于node来说，他有太多的版本了，而在各个项目的开发中，各种node版本都可能应用，所以要运行这些不同版本的项目，能够快速切换本机node的版本是很重要的，Nvm的作用就是完美的"}, {"id": "6951403417117917197", "title": "🙏初识JS，浅谈JS 里的一句代码是怎样运行的", "desc": "用第一性原理来推导1. 代码是顺序执行的话不多说先看代码为什么var myname = 'a'放在前后的结果不一样呢？代码是顺序执行的那为什么后面的代码不是报错而是显示undefined？变量提升了那"}, {"id": "6882685336829296648", "title": "Node.js微服务框架（Moleculer）", "desc": "从这张图可以看到 Moleculer 接管了内部的服务注册与发现、服务之间的消息通信以及负载均衡等底层复杂逻辑，用户只需要写核心业务逻辑即可，大大提升了开发效率。 节点就是本地或网络上的一个 Node 进程，每个节点内部可以承载多个服务。例如定义了数学计算 math 和统计分析…"}, {"id": "7005438851229450277", "title": "npm安装教程", "desc": "NPM是随同NodeJS一起安装的包管理工具，可谓是前端开发的必备工具。本文记录了npm的下载、安装、配置以及使用"}, {"id": "6844903997845962759", "title": "Node.js库Puppeteer常用API及骚操作总结", "desc": "这篇文章，主要用于收集整理常用的Puppeteer的一些常用API操作，自动化操作，爬虫测试，基础使用等等。当然至于是什么是Puppeteer呢，我们来看下官方介绍：Puppeteer是谷歌官方出品的一个通过DevTools协议控制headless Chrome的Node库。可…"}, {"id": "6844903950290780168", "title": "文件上传接口的转发（node）", "desc": "现有的接口中基本只用到了 get 和 post 两种，但是在文件上传的时候遇到了问题。 node 层使用 eggjs ，一般的 post 的请求直接在 ctx.body 就能拿到请求的参数，但是 /upload 的接口就不行，拿到的 body 是 {} ，下面我们来逐步分析。 …"}, {"id": "6844904200032239629", "title": "打造一款适合自己的快速开发框架-前端篇之代码生成器", "desc": "在后端篇中已对代码生成器的原理进行了详细介绍，同时也做了java和python版的实现。但是对于前端来说，仅靠后端提供的数据库元数据还是不足以满足代码生成的要求的，而且前后端分离后，个人还是想把代码生成的活独自交给前端维护，因此也为前端单独开发一个代码生成器。 该方案可以考虑，…"}, {"id": "6844903590524354574", "title": "VUE从零开始系列（安装脚手架），呆萌小白上手VUE", "desc": "前端是个大杂烩，各种技术、框架层出不穷，从pc端到移动端，从前端到后端，从web到桌面应用，乃至原生安卓及ios。 可以说js在手，天下我有（手动滑稽）。 说实话做了几年前端，在前一阵儿我还是觉得，管你什么框架，什么模块化的，老夫就用jquery，整那些花里胡哨的有啥用，我能实…"}, {"id": "6844904047091138574", "title": "面向开发人员的十大 NodeJS 框架", "desc": "Node.js 是基于 Chrome V8 javascript 引擎构建的开源、跨平台运行时环境。事件驱动的非阻塞 I/O 模型使 NodeJS 框架 能够开发极其轻便且高效的 Web 应用程序。 作为开发人员，可以顺利地在 客户端 和 服务端 脚本中使用相同的语言，并且这种…"}, {"id": "6891126082200993805", "title": "深入浅出node中间件原理", "desc": "中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。 在NodeJS中，中间件主要是指封装http请求细节处理的方法。我们都知道在http请求中往往会涉及很多动作, 如…"}, {"id": "6844903513181388808", "title": "解锁Charles的姿势", "desc": "Charles，作为mac开发的好基友，不知道大家是否对它的使用姿势了如指掌。相信很多童鞋只是熟悉几种简单的功能，今天为大家解锁几种高级姿势......希望能够帮到大家。 Charles是个啥，相信大家都会知道，如果真有不知道的，请百度之... ... 还有很多场景就不一一介绍…"}, {"id": "6844903498362912775", "title": "JS中的算法与数据结构——链表(Linked-list)", "desc": "主要是针对前端同学，将一些常见的算法和数据结构用 JavaScript 去实现，起到一个抛砖引玉的作用"}, {"id": "6911456081336074253", "title": "cluster是怎样开启多进程的，并且一个端口可以被多个 进程监听吗？", "desc": "本文分析 node 子进程,多进程,多进程集群架构原理,以及多进程应用示例. 进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；或者更专业化来说：进程是指程序执行时的一个实例，即它是程序已经执行到课中程度的数据结构的汇集。从内核的观点看，进程的目的就是担当分配系统资…"}, {"id": "6924282674345410568", "title": "一起来看看 Node.js v14.x LTS 中的这些新功能", "desc": "作者简介：五月君，Software Designer，公众号「Nodejs技术栈」作者。 Node.js 是一个基于 Chrome V8 引擎 的 JavaScript 运行时。在 2020 年 10 月 27 日 Node.js v14.15.0 LTS 版已发布，即长期支持…"}, {"id": "6872711612533473293", "title": "API设计进阶：通过Node和Redis进行API速率限制", "desc": "速率限制可以保护和提高基于API的服务的可用性。如果你正在与一个API对话，并收到HTTP 429 Too Many Requests的响应状态码，说明你已经被速率限制了。这意味着你超出了给定时间内允许的请求数量。你需要做的就是放慢脚步，稍等片刻，然后再试一次。 当你考虑限制你…"}, {"id": "6844903873811841037", "title": "多版本node安装相关知识", "desc": "对于了解Node的开发人员，我们都知道Node是基于Chrome V8引擎开发的能使JavaScript在服务器端运行的运行时环境（runtime environment）。一方面，它提供了多种可调用的API，如读写文件、网络请求、系统信息等。另一方面，因为CPU执行的是机器码…"}, {"id": "6844903585017233421", "title": "#每日一记#防止按钮在短时间内重复点击", "desc": "很多时候我们点击按钮来提交数据，但是在网络条件不好或者交互提示不明确的情况下，用户会在段时间内多次点击按钮，如果没有对按钮做保护就会造成重复的数据提交，造成数据异常，今天就分享一个比较通用的解决方案。 解决这个问题的思路就是增加一个变量来维护现有按钮的状态，但是一个页面里如果有…"}, {"id": "6844903811182493704", "title": "把HTML转成PDF的4个方案及实现方法", "desc": "在本文中，我将展示如何使用 Node.js、Puppeteer、headless Chrome 和 Docker 从样式复杂的 React 页面生成 PDF 文档。 背景：几个月前，一个客户要求我们开发一个功能，用户可以得到 PDF 格式的 React 页面内容。该页面基本上是…"}, {"id": "6844903516939485197", "title": "VS Code 折腾记 - (11) 再来一波插件推荐!(代码片段,框架,Node,touchbar,TS,Git,数据库,python!!)", "desc": "我看到很多人会在一些插件下面辱骂.说什么万年不更新,辣鸡插件卸载不掉. 真心替那些作者不值,浪费自己生命造福社区的人却不被尊重还辱骂,贼寒心... NPM Dependency Links : 这个就是方便你在初始化脚手架项目之后想了解某些模块,点击直接调到npm 模块发布页面…"}, {"id": "6844904177915658248", "title": "Event Loop事件循环机制--图文并茂详解", "desc": "js的事件循环机制用来协调事件、用户交互、脚本执行、渲染、网络等等，这由一种叫做worker机制的代理去管理。 下图很好的展示了worker-事件循环机制——客户端之间的关系。worker协调管理事件机制的执行，将执行的结果反馈到Client。 众所周知，js是单线程语言，所有…"}, {"id": "6844904017546444808", "title": "Node.js 内存溢出时如何处理？", "desc": "Node.js 做密集型运算，或者所操作的数组、对象本身较大时，容易出现内存溢出的问题，这是由于 Node.js 的运行环境依赖 V8 引擎导致的。如果经常有较大数据量运算等操作，需要对 Node.js 运行环境限制有充分的了解。 2. 为什么会内存溢出 我们都知道，V8是 G…"}, {"id": "6844903673357713422", "title": "webpack多页面入口生产项目开发配置", "desc": "这不是一个纯粹的学习帖子，最开始为了生产项目考虑的。公司有个新的、小的活动项目。以此为假想，所以我希望学习一些新的技术应用在上面；这个新的项目是作为旧项目的一个子系统存在的，所以又必须在一定程度上保持一致。 而这个旧项目的原有使用构建工具fis的版本比较老旧，不敢升级，怕出什么…"}, {"id": "6844903543715921927", "title": "前端项目重构的些许收获", "desc": "这个项目开始之初，赶时间上线。很多地方基本没怎么管代码规范，直到一期完毕回过头来看之前写的代码，不忍直视。为了之后接手的人能更加轻松，也为了自己之后debug更加顺手，边开始二期的部分需求，边重构一期的部分代码，还是有部分收获。 之前的架构是react-router2，后面换成…"}, {"id": "6942677573075746824", "title": "Node.js+Koa2+MySQL打造前后端分离精品项目《旧岛》", "desc": "download：Node.js+Koa2+MySQL打造前后端分离精品项目《旧岛》Nodejs逐渐成为前端同学进阶的必修技术之一,本课程将带大家从0到1开发一个前后端分离的精品项目《旧岛》，手把手教"}, {"id": "6844903705175654407", "title": "非常便捷的本地Mock", "desc": "Mock在软件开发领域，我们将其理解成 “模拟数据”、“虚假数据”。 好处有很多，一句话概括，有了Mock，前后端人员只需要定义好接口文档就可以开始并行工作，互不影响。 命令行执行node serser.js ，浏览器打开localhost:3737/index.html，页面…"}, {"id": "6844903551915786253", "title": "深入理解 Koa2 中间件机制", "desc": "我们知道，Koa 中间件是以级联代码（Cascading） 的方式来执行的。类似于回形针的方式，可参照下面这张图： 今天这篇文章就来分析 Koa 的中间件是如何实现级联执行的。 这个函数的作用在于将调用 use(fn) 方法中的参数（不管是普通的函数或者是中间件）都添加到 th…"}, {"id": "6906749228874203149", "title": "如何创建属于自己的脚手架", "desc": "我们每次搭建项目都需要创建项目，然后进行一系列的基础配置，封装基础api ，配置webpack,浪费了很多时间和精力，用自己封装的脚手架模板就可以每次像创建vue,react那样一样简单，有能力的还可以去封装自己的框架。 1. 先上插件依赖"}, {"id": "6844903594223730702", "title": "使用webpack搭建基于typescript的node开发环境", "desc": "正在学习node.js，这里介绍使用webpack来搭建基于typescript的node开发环境。"}, {"id": "6844903678252597262", "title": "生命在于折腾，写一个前端资讯推送服务", "desc": "去年年底开始写的一个小项目，断断续续做了些优化，在此简单的记录一下。 起源是之前一直没什么机会接触到 Node 项目，工作中接触到的也仅限于用 Node 写脚本，做一些小工具，与服务器上跑的 Node 服务相差甚远。所以想写一个在服务器上跑的 Node 小项目练手。 一直喜欢用…"}, {"id": "6854573214341808141", "title": "Node 中如何引入一个模块及其细节", "desc": "在 node 环境中，有两个内置的全局变量无需引入即可直接使用，并且无处不见，它们构成了 nodejs 的模块体系: module 与 require。以下是一个简单的示例 虽然它们在平常使用中仅仅是引入与导出模块，但稍稍深入，便可见乾坤之大。在业界可用它们做一些比较 tric…"}, {"id": "6844903635042697229", "title": "vue-cli配置环境变量", "desc": "通常会有测试服务器和正式服务器环境之分,我们请求的域名也得区分,所以通过proces.env.NODE_ENV来区分环境变量,通过这个能够全局访问的参数,我们可以处理很多需要环境处理不同的操作. 上面的process.env.NODE_ENV是vue-cli默认配置的,有时候我…"}, {"id": "6844904159745949704", "title": "基于 Travis CI + PM2 实现 NodeJS 应用的持续集成和部署", "desc": "我发现一旦手头的项目变多，且随着项目复杂度的提升，本来编码就已经是个够头痛的问题，再加上部署到生产环境就更心累了 😵。 之前在公司实习时，有一个依据用户输入网址进行截屏的项目，同时包含了 React 应用和 Node 应用。 部署 React 应用比较方便，只要通过 scp …"}, {"id": "6844904133024022536", "title": "轻松理解浏览器缓存（Koa缓存源码解析）", "desc": "缓存技术一直一来在WEB技术体系中扮演非常重要角色，是快速且有效地提升性能的手段。 如上图，在网页展示出来的过程中，各个层面都可以进行缓存。 之前在学习缓存的过程中，一直没有实践过，有些概念经常会忘记。 今天主要通过Node实践的方式学习浏览器缓存，顺便分析一下Koa处理缓存的…"}, {"id": "6844903582538399752", "title": " Event Loop、计时器、nextTick", "desc": "JavaScript 是单线程的，有了 event loop 的加持，Node.js 才可以非阻塞地执行 I/O 操作，把这些操作尽量转移给操作系统来执行。 我们知道大部分现代操作系统都是多线程的，这些操作系统可以在后台执行多个操作。当某个操作结束了，操作系统就会通知 Node…"}, {"id": "6996844192798343175", "title": "Nodejs处理压缩文件", "desc": "当我们在使用Node搭建服务端的时候，我们可能会碰到需要接收 压缩文件 的情况，例如：接收前端提交的压缩包、解压等，我们这里演示一下如何 接收 与 解压 前端 html css js 后台 后台采用e"}, {"id": "6960108736966819848", "title": "生产环境js错误收集及定位源码位置", "desc": "现在前端生产环境的代码基本上是压缩的，如果需要知道压缩代码报错对应的源码位置，我们可以通过sourcemap文件去实现。但对于前端而言，如果把sourcemap放出来，差不多相当于把源码暴露出来了。"}, {"id": "6982586301748871176", "title": "定时器: Linux中的定时器", "desc": "了解Linux的定时器的工作原理，有助于我们更深刻的认识Node中的定时器真面目。 定时器核心组件 石心 - 时钟源 - 硬件 守护者 - 记录时间 - 软件 定时狗 - 事件源 - 硬件 石心 硬件"}, {"id": "6844903887699197965", "title": "用优雅的代码武装我们的koa2项目", "desc": "众所周知，koa2是基于nodejs的一款非常轻量级的服务端框架，其简单易上手的特性更是大大节省了前端人员开发服务端api的成本。尽管许多功能能够实现，但是作为一个有素养的开发人员，代码的层次性、后期可维护性都是需要考虑周到的。 实话说，按照koa官方文档来照葫芦画瓢，我们的代…"}, {"id": "6844903833165004808", "title": "用 TypeScript 开发 Node.js 程序", "desc": "当我第一次发现 TypeScript 时，就把它用到了自己的 JavaScript 程序中。使用 TypeScript 有很多好处，现在你要让我在用原生 JavaScript 写任何东西的话，需要给我一个令人信服的理由。 在本文中，我将向你展示如何设置一个简单的开发环境，以便使…"}, {"id": "6978664510496178206", "title": "前端进阶 - node基本操作：path + fs", "desc": "很多前端同学没有服务端或者客户端经验，对node操作望而生畏，这大可不必。 正如大神Winter所说：所谓编程，无非IO。一般意义上的Web前端，处理的是基于http与浏览器（或宿主）的本地缓存、各种"}, {"id": "6844903652574887943", "title": "你真的懂模块化吗？教你CommonJS实现", "desc": "早期的 JavaScript 往往作为嵌入到 HTML 页面中的用于控制动画与简单的用户交互的脚本语言，我们习惯这样写。 所有的嵌入到网页内的 JavaScript 对象都会使用全局的 window 对象来存放未使用 var 定义的变量。这就会导致一个问题，那就是，最后调用的函…"}, {"id": "6928764276765097991", "title": "使用 node.js 发送基于 STMP 与 MS Exchange 邮件的方法", "desc": "本文主要介绍 node.js 发送基于 STMP 协议和 MS Exchange Web Service(EWS) 协议的邮件的方法。文中所有参考代码均以 TypeScript 编码示例。 提到使用 node.js 发送邮件，基本都会提到大名鼎鼎的 Nodemailer 模块，…"}, {"id": "6847902224073523208", "title": "Nodejs全栈进阶-Vue+Express+Webpack自建脚手架完善单页面应用，档次瞬间提高（附完整源码）", "desc": "分享到掘金后，受到很多小伙伴的点赞和喜欢，希望可以多出品这样的实战项目技术文章。可以让想进入Nodejs全栈开发的小伙伴提供指明灯，少走弯路，可供学习参考，减少工作量，提高工作效率。 也收到一些大佬的指点和建议，其中有位大佬，给了一些项目上的优化建议，是我曾经的同事，他看了我分…"}, {"id": "6844903665166188551", "title": "对node工程进行压力测试与性能分析", "desc": "上周在系统上线前，为了看下系统能承受多大的并发和并发下的负载情况，进行了一轮压测。在压测过程中，发现服务器的cpu飚的的非常高，而tps，接口耗时、服务可用等都是正常的，卧槽，这就奇了怪了，自己想了半天也没想出为啥，不得已求助了大佬，大佬说先查看 cpu processor w…"}, {"id": "6844903513244319758", "title": "前端如何处理emoji表情", "desc": "这段时间在做移动端的开发, 有一个功能就是发表评论,其实这个功能本身是比较简单的, 但是在提测是的时候QA给哦提了一个bug,说输入手机自带的emoji表情发送失败了.我就奇怪了,emoji表情也是文本内容,怎么就发送失败呢,我通过Chrome调试之后发现,向后台发送的时候就显…"}, {"id": "6844903865444237319", "title": "我是这样让公司使用Node.js的", "desc": "Node.js是一门用javascript编写服务端应用的语言，具有非阻塞、高I/O的优点。相信很多前端开发工程看到这个描述就跃跃欲试了。终于有机会跟后台开发一争天下，推翻程序员鄙视链理论指日可待啊(c>c++>java/.net>前端)。 然而事实上，Node.js已经走过了…"}, {"id": "6844904116586545159", "title": "《大前端进阶 Node.js》系列 异步非阻塞（同步/异步/阻塞/非阻塞/read/select/epoll）", "desc": "如果你还要再三思考这个问题（面试官此时心里绝壁在想，这 tm 还要思考，还跟我谈什么 Node 异步非阻塞！），请好好看下面的文章。 在提到 Node 的时候，异步非阻塞是一个经常被提及的话题，与之伴随的还有事件、回调、消息等等一系列词语。 看这些概念就像追一个渣女，你好像觉得…"}, {"id": "6844903635118194702", "title": "科普文：为什么不能在服务器上 npm install ？", "desc": "##背景Node.js很简单，容易上手。但也因此缺乏不少规范，使用者水平参差不齐。最近经常看到的一个问题是：很多新手，在部署的时候，是直接在服务器上npminstall，这是非常不推荐的。##存在的问"}, {"id": "6963170647207837710", "title": "Node系列 — v8引擎堆内存详解（一）", "desc": "看完本文你将学到什么 v8 堆内存的查看、限制、设置 v8 堆内存在不同 Node 版本的表现 v8 堆内存参数说明 关于 v8 关于 V8 在浏览器和 Node 中扮演的角色 v8 的堆内存限制 N"}, {"id": "6844903636108066830", "title": "这一次，我要弄懂javascript的模块化", "desc": "1. 无模块化 script标签引入js文件，相互罗列，但是被依赖的放在前面，否则使用就会报错。如下： 即简单的将所有的js文件统统放在一起。但是这些文件的顺序还不能出错，比如jquery需要先引入，才能引入jquery插件，才能在其他的文件中使用jquery。缺点很明显： 2…"}, {"id": "6993713613575815199", "title": "Node.js-搭建自动化开发环境-使用工具处理模块(五)", "desc": "Node.js 搭建前端工程化环境-五 使用工具处理模块 我们在 js 开发中使用了 commonJS 模块化规范，不需要合并 js 文件了， 需要使用工具来对其进行处理.打包后放入 dist中"}, {"id": "6872892721309319181", "title": "进阶全栈工程师，Deno你学会了吗？", "desc": "如果你一直关注 Web 开发领域，那么最近可能已经听到了很多关于 Deno 的信息——一种新的 JavaScript 运行时，它可能也会被认为是 Node.js 的继承者。但是这意味着什么，我们需要“下一个 Node.js” 吗？ Deno 是一个 JavaScript/Typ…"}, {"id": "6844903605284110350", "title": "session与登录机制", "desc": "由于 Session 是以文本文件形式存储在服务器端的，所以不怕客户端修改 Session 内容。（也可以用其他存储方式比如redis） 在 Web服务器上保持用户的 状态信息 供在任何时间从任何设备上的页面进行访问。 每个 Session 对象的持续时间是用户访问的时间加上不…"}, {"id": "6844903692760547342", "title": "前端进阶之路-利用Jenkins快速打造前端项目自动化工作流", "desc": "说人话就是，Jenkins是一个持续集成的工具，我们可以通过它丰富的插件系统，搭建自己需要的打包和编译环境，通过设定的触发机制，自动开始打包项目，并将打包好的项目部署到服务器。 一句话，我可以一个操作或者自动完成项目的打包部署工作。想看更多，点此 往下看，往下看，往下看。 点击…"}, {"id": "6844903624074592270", "title": "谁说前端需要懂 Nginx 了？ ", "desc": "读了上文发现内容虽然还是挺好的，但看完，为啥要懂nginx呀，负载均衡和前端哪里有什么半毛钱关系了，没说清楚呀。 当然这个面向前端做个科普文让大家多知道一项只是还是不错的，文章拉到最后面看了下作者的使用场景举例说起个 host 给让产品走查。 这篇内容很热，结合最近聊天群里总是…"}, {"id": "6844904122466992135", "title": "【纯干货】Node.js eventloop + 线程池源码分析（建议细看）", "desc": "在《大前端进阶 Node.js》系列 异步非阻塞(上)中，怪怪带大家看清了异步非阻塞这个渣女，讲了很多之前大家可能没有想清楚的概念细节。 这一期，我们回归 Node 的异步 IO 模型，开始之前，先提出几个问题，本文也将围绕这几个问题展开 xio 习。 先开启第一个问题，何为线…"}, {"id": "6859194104946016269", "title": "2019年的6个JavaScript用户认证库", "desc": "“两周内给我建一个用户认证系统”是现在研发团队中常见的一句话。由于种种原因，这个任务一直是留给团队中的一个开发人员去解决的。 一方面，你确实不想浪费很多时间。另一方面，你担心这种信息可能最好由自己内部编写的服务来处理，以便以后更好的扩展。 随着网络上出现新的教程（是一个很好的开…"}, {"id": "6994367415085858829", "title": "Node 使用 达梦数据库", "desc": "Node.js 连接 达梦数据库 Demo。dmdb 1.0.5537。 Node.js 连接 达梦数据库 Demo。dmdb 1.0.5537。"}, {"id": "6958406302351491086", "title": "【前端自动化】如何使用Node.js实现热重载页面", "desc": "前言 前不久我结合browser-sync+gulp+gulp-nodemon实现了一款生产环境热更新（我之前理解有点偏差，应该定义为热更新，不是热重载）的项目脚手架，那么，今天我们将使用Node.j"}, {"id": "6964568105917874212", "title": "Node系列 — v8引擎堆内存(二) 垃圾回收机制", "desc": "Node系列 — v8引擎堆内存详解（一） 看完本文你将学到什么 v8 堆内存分代机制 分代晋升机制 垃圾回收机制，涉及算法说明及其比较 了解堆内存及垃圾回收的意义 V8 对内存的限制对于浏览器而言，"}, {"id": "6994047513380519949", "title": "如何在 Node.js 应用程序中使用 ESLint", "desc": "ESLint 是一个开源 JavaScript linting 实用程序，它可以帮助您克服开发人员的错误，因为 JavaScript 是弱类型的语言。 Javascript 社区中有很多选项，比如 J"}, {"id": "6866942131777306631", "title": "浏览器跨域问题与服务器中的 CORS", "desc": "跨域，这或许是前端面试中最常碰到的问题了，大概因为跨域问题是浏览器环境中的特有问题，而且随处可见，如同蚊子不仅盯你肉而且处处围着你转让你心烦。你看，在服务器发起 HTTP 请求就不会有跨域问题的。 当谈到跨域问题的解决方案时，最流行也最简单的当属 CORS 了。 CORS 即跨…"}, {"id": "6844903661596835854", "title": "通过HTTP的HEADER完成各种骚操作", "desc": "作为一名专业的切图工程师，我从来不care网页的header，最多关心Status Code是不是200。但是HEADER真的很重要啊，客户端从服务器端获取内容，首先就是通过HEADER进行各种沟通！HEADER可以帮助我们完成许多骚操作，提高网站的性能，用户的体验。好了让我们…"}, {"id": "6844903831864606734", "title": "爬虫被封怎么办？用Node构建一个私人IP代理池", "desc": "还记得刚学爬虫的时候，选了一个美女网站来练手，效率极高，看到什么都想爬下来。爬得正高兴呢，出现了一连串错误信息，查看后发现因为爬取太过频繁，被网站封了ip，那时起就有了构建代理ip池的念头。 网上搜索一下代理ip就会发现有很多网站提供，但是稳定好用的都要收费，免费倒也有一堆，但…"}, {"id": "6844903543678189576", "title": "《Node.js设计模式》使用流进行编码", "desc": "本系列文章为《Node.js Design Patterns Second Edition》的原文翻译和读书笔记，在GitHub连载更新，同步翻译版链接。 Streams是Node.js最重要的组件和模式之一。 社区中有一句格言“Stream all the things（St…"}, {"id": "6844903828060373005", "title": "基于 socket.io 快速实现一个实时通讯应用", "desc": "随着web技术的发展，使用场景和需求也越来越复杂，客户端不再满足于简单的请求得到状态的需求。实时通讯越来越多应用于各个领域。 HTTP是最常用的客户端与服务端的通信技术，但是HTTP通信只能由客户端发起，无法及时获取服务端的数据改变。只能依靠定期轮询来获取最新的状态。时效性无法…"}, {"id": "6857716625764777991", "title": "Websocket原理及具体使用（ws+socket.io）", "desc": "服务器和客户端保持长连接通信，实现方式比较多。有很多成熟的框架可以完成，底层无非都是对Socket流的封装和使用。 Socket大致是指在端到端的一个连接中，这两个端叫做Socket。 HTTP是基于传输层的TCP协议的，而Socket API也是，所以只是从使用上说，可以认为…"}, {"id": "6844903624007499783", "title": "🐠从零开始Docker化你的Node.js应用", "desc": "给你一台新买的服务器(CentOS)，相关账户及密码，一个基于Node.js开发的web应用源码包(zip)，要求你在新机器上使用Docker的方式把应用部署起来。此时的你，并没有搞清楚什么是容器/镜像，也没记住几个相关的Linux命令，该怎么办？本文将帮助你摆脱困境 CE意为…"}, {"id": "6844903950546632717", "title": "[源码解读]一文彻底搞懂Events模块", "desc": "清楚的记得刚找node工作和面试官聊到了事件循环，然后面试官问事件是如何产生的？什么情况下产生事件。。。 之前封装了一个 RxJava 的开源网络请求框架，也是基于发布-订阅模式，语言都是相通的，挺有趣。表情符号 作者简介：koala，专注完整的 Node.js 技术栈分享，从…"}, {"id": "6844903760423026696", "title": "问答方式学 Node.js（二）", "desc": "Q: 好了，我们继续谈谈 Node.js 吧，我记得上次说到了「非阻塞」和「事件驱动」，这引起了我的好奇心，但是又给我泼了一桶冷水，这两个词有点高端。 人人网刷朋友新鲜事你应该用过吧？实现这样的功能有一种简单的方式，是让用户与服务器之间保持一个长轮询。 但是它与普通的 Ajax…"}, {"id": "6991026639480029221", "title": "Koa 中间件实现", "desc": "前面我们介绍过了，Koa 的核心就是中间件机制，起服务的话都是千篇一律的。中间件从上至下决定了执行顺序，我们可以在路由之前做权限认证等自己的操作，本篇分享下 koa 几个中间件的实现，也就是把 use"}, {"id": "6871053664610418695", "title": "使用node转发请求", "desc": "vue 项目开发过程中，接口跨域是一个很常见的问题。在开发时候可以用 vue 自带的 proxy 可以轻松解决。生产环境下，前端项目往往是部署在后端项目下，不会存在跨域的问题，接口前缀可以忽略。 问题来了，如果我们想在本地测试生产环境下的前端项目，会存在跨域的问题；发给后端部署…"}, {"id": "6844903510161489928", "title": "玩转异步 JS ：async/await 简明教程（附视频下载）", "desc": "在软件开发领域，简洁的代码 => 容易阅读的代码 => 容易维护的代码，而 ES2017 中的 async/await 特性能让我们编写出相比回调地狱和 Promise 链式调用更直观、更容易理解的代码，await 关键字接收一个 Promise，等待代码执行，直到 Promi…"}, {"id": "6992088882229542925", "title": "nodejs中session与token的区别 ｜ 8月更文挑战", "desc": "首先我们要清楚session与token的实现思想 session 思想 1、客户端用户名跟密码请求登录 2、服务端收到请求，去库验证用户名与密码 3、验证成功后，服务端种一个cookie或发一个字符"}, {"id": "6899752077807845383", "title": "Node.js模块化你所需要知道的事", "desc": "我们知道，Node.js是基于CommonJS规范进行模块化管理的，模块化是面对复杂的业务场景不可或缺的工具，或许你经常使用它，但却从没有系统的了解过，所以今天我们来聊一聊Node.js模块化你所需要知道的一些事儿，一探Node.js模块化的面貌。 在Node.js中，内置了两…"}, {"id": "6844903634321276942", "title": "前端遇上Go: 静态资源增量更新的新实践", "desc": "美团金融的业务在过去的一段时间里发展非常快速。在业务增长的同时，我们也注意到，很多用户的支付环境，其实是在弱网环境中的。 大家知道，前端能够服务用户的前提是 JavaScript 和 CSS 等静态资源能够正确加载。如果网络环境恶劣，那么我们的静态资源尺寸越大，用户下载失败的概…"}, {"id": "6993656937682305038", "title": "nodejs实践录：按行处理文件数据的示例", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 有时候，我们需要对日志做事后分析，抽离出特定的数据进行处理。比如： 1、中间件模块发送json数据到后台，每次发送的json都会转换成字符串"}, {"id": "6844903592474705927", "title": "[译] Node.js 能进行 HTTP/2 推送啦！", "desc": "本文由来自 @nearForm 的首席架构师、Node.js 技术指导委员会成员 Matteo Collina 以及谷歌软件工程师 Jinwoo Lee 共同撰写。 自从 2017 年 7 月 Node.js 中引入 HTTP/2 以来，该实践经历了好几轮的改进。现在我们基本已…"}, {"id": "6926515447231676430", "title": "使用 egg.js 定制业务 web 框架", "desc": "作者：ICBU谦行前面章节介绍了如何使用egg.js完成业务开发、定制插件，这些是把egg.js当做一个web框架使用，本章节介绍下egg.js做为框架的框架为业务定制一个web框架的能力设计目标可以"}, {"id": "6862234536571305991", "title": "有意思的 Node.js 内存泄漏", "desc": "如果暂时看不出来的话，一起来读读这篇文章吧。 文章的前半部分会先介绍一些理论知识，然后再举一个定位内存泄漏的例子，感兴趣的朋友可以直接先看看 这个例子。 新生代（New Space/Young Generation）：用来临时存储新对象，空间被等分为两份，整体较小，采用 Sca…"}, {"id": "6976091171156131877", "title": "Node系列 — 模块 requrie 机制 ", "desc": "CommonJS 规范 Node 的发展使得 npm 模块库的内容日益丰富，这些 npm 的生成也遵循着 CommonJs 的规范。如今对于前端开发者已经离不开 npm ，所以 CommonJs 的规"}, {"id": "6844904095048794120", "title": "Nodejs入门基础，Egg之CURL的get和post请求", "desc": "我们在学习nodejs时，我觉得比较简单的应用还是从爬虫着手去学习。毕竟我们在做项目的时候，没有数据也不方便分析。 我这里应用了egg的框架，不了解egg的可以查看官方文档，这里就不介绍了。 curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（clien…"}, {"id": "6980357726354276382", "title": "nodejs 安装和配置", "desc": "nodejs的安装以及配置 window安装，下一步下一步就行了，接下来是配置 创建好文件夹之后打开cmd 输入： 进入环境变量对话框，在【系统变量】下新建【NODE_PATH】， 输入【D:\\nod"}, {"id": "6969072718700347422", "title": "Koa源码解读及实现一个简易版Koa", "desc": "本文对koa的源码的application、context、request和response 4个文件以及koa洋葱圈模型做了详细的解读，以及针对其主要实现功能做了一个简易版koa的实现"}, {"id": "6970880470850633736", "title": "Node框架之Koa —— Koa+MongoDB实现简单的增删改查", "desc": "之前写过一篇关于《Node框架之Egg —— EggJS+MySQL（mysql2+egg-sequelize+egg-cors）实现简单的增删改查》。其实我学习Node的框架路线是：Express "}, {"id": "6844904199239499784", "title": "一文彻底弄懂jszip中的压缩与解压", "desc": "处理zip包的整个过程建议直接都使用buffer，尽量避免用string，转来转去容易导致乱码问题，且buffer体积小易存储与jszip无缝处理，还有就是在上传CDN的时候也直接上传buffer，我当时转为字符串上传导致拉下来时解压包失败了，注意fs.readFileSync…"}, {"id": "6844903535381839879", "title": "【译】如何用 TypeScript 玩转后端？", "desc": "我将从一个开发者的角度介绍几个优秀的库。它们可以满足你后端应用的绝大部分特性。装饰器和元数据的能力在这些库中得到的充分的应用，使其非常强大并且简单易用。 我希望这篇文章可以帮到像我这样，喜欢 TypeScript 而且想用它编写后端代码的人，让他们像我一样发现这些库之后乐在其中…"}, {"id": "6844903470827323400", "title": "0-1构建前端IM智能客服系统", "desc": "一. 背景 二. 客服系统 人工会话主要是个IM功能，功能包含普通文本消息，富文本，图片，视频，文件发送等，主要依赖的通信协议是websocket，而机器人会话可以直接使用http，下面我们来讲解下，如何快速实现一个简单的c端客服系统。 三. 技术选型 四. 具体实现 1. N…"}, {"id": "6954602475676663839", "title": "详解Jenkins 实现Gitlab事件自动触发Jenkins构建及钉钉消息推送", "desc": "实践环境 GitLab Community Edition 12.6.4 Jenkins 2.284 Post build task 1.9（Jenkins插件） Generic Webhook Tr"}, {"id": "6989901277148741646", "title": "使用Puppeteer实现SVG转换服务", "desc": "项目介绍 之前开发了一个使用SVG元素做海报的服务。 大致业务逻辑就是用户上传图片作为素材，以及添加一些艺术文字作为素材； 支持各素材的2D变换，最后整体导出一张图片的项目； 目前市面上做的最好的竞品"}, {"id": "6919805097752920071", "title": "浅入浅出前端监控系统落地", "desc": "前端代码不像java等后端语言运行在自己的服务器，错误可以直接捕获生成日志，前端代码运行在用户端，发生错误时前端工程师无法知晓。 做为一名合格的前端工程师，出于对项目认真负责的态度（技术驱动），开发了一套自己的前端监控系统，一方面可以促进项目更完善，增加用户体验，另一方面，学习…"}, {"id": "7004295236956454949", "title": "npx使用概览", "desc": "当使用 npm 将软件包安装到 node_modules 文件夹中或全局安装时，如何在前端代码中使用它？ npx了解一下"}, {"id": "6844903588825825294", "title": "Range/Content-Range与断点续传，了解一下？", "desc": "其中bytes = 0-999即是Range的值，于是乎我们就能利用整个值来控制读取的start和end。 拿到range后，我们就可以将range中的x-x和我们createStream的start/end形成映射，从而达到控制输出的目的。 告诉他这次我们返回的数据是哪里到哪…"}, {"id": "6906787897811501063", "title": "基于百度翻译API的node插件", "desc": "后面有时间的话我可以让这个不止在代码层面，还是上传到npm，完善一些功能，增加能命令直接生成其他语言版本的文件..."}, {"id": "6844904202276175886", "title": "如何处理 Node.js 中出现的未捕获异常？", "desc": "Node.js 程序运行在单进程上，应用开发时一个难免遇到的问题就是异常处理，对于一些未捕获的异常处理起来，也不是一件容易的事情。 运行以上程序，在右侧第二个窗口中执行了 /error 路由，因为没有定义 a 这个对象，则会引发错误。 进程崩溃退出之后导致整个应用程序也将崩溃，…"}, {"id": "6896393568420790279", "title": "Node.js系列四 - 常用的内置模块", "desc": "一. 内置模块path 1.1. 认识path模块 path模块用于对路径和文件进行处理，提供了很多好用的方法。 1.2. path常见的API 二. 内置模块fs 1.1. 认识fs模块 fs是File System的缩写，表示文件系统。 1.2. 文件描述符 在 POSIX…"}, {"id": "6844903509742075911", "title": "Promise 必知必会（十道题）", "desc": "Promise 想必大家都十分熟悉，想想就那么几个 api，可是你真的了解 Promise 吗？本文根据 Promise 的一些知识点总结了十道题，看看你能做对几道。 以下 promise 均指代 Promise 实例，环境是 Node.js。 运行结果： 解释：Promise…"}, {"id": "6844904085972320269", "title": "NodeJs入门，带你获取头条热搜形成好看的标签云", "desc": "在学习NodeJs之前，你可能需要学习JavaScript,最好也了解一下es6。 我们这篇文章是针对今日头条（以下称头条）的热搜榜数据的分析，形成一种标签云，重点是如何获取热搜榜的数据。 Node.js是一个JavaScript运行时环境（可以解析和执行JavaScript代…"}, {"id": "6844903626272423949", "title": "Call Me By Your Name - node.js的小美好", "desc": "node的出现，真是让用惯js的前端工程师遇见了爱情，进而大踏步的走向了后端，尽管有时候会被质疑，不被理解。那又有什么关系。 本文是《一站到底 ---前端基础之网络》 代码的整理。但也是一篇独立的node零基础学习笔记。 首先你需要安装node环境。大家自己去看教程 就好。本文…"}, {"id": "6844903598157987847", "title": "Node.js 10.0.0 正式发布，带来大量改进和修复", "desc": "Node.js 10.0.0 正式发布，这是自 Node.js Foundation 开展以来的第七个主要版本，并将在 2018 年 10 月成为下一个 LTS 分支。"}, {"id": "6971439781297258532", "title": "【搭建后台环境】linux搭建服务", "desc": "前言 搭建服务器说明，首先你必须有自己云服务器（本地liunx主机），如果是云服务器需要一个域名。 会在云服务器中安装 liunx 的 CentOS（6.8到7.9版本之间,不能使用8.0或以上）系统"}, {"id": "6844903582311907336", "title": "Node CLI 开发调试技巧总结", "desc": "一般情况下，一套CLI工具集合，包括CLI运行核心模块及各种插件体系。拿 webpack 来说，其由核心模块 webpack 及各种 loader plugin 组成其强大的构建生态体系。 单一的npm包，调试方法比较多，vscode node-debug 或者 chrome …"}, {"id": "6844903615346245640", "title": "快速了解 Deno 目前的 API", "desc": "Deno 是 Node.js 之父新造的轮子。旨在用 Golang 和 TypeScript 实现一个很小的 JS runtime。（其目标不是取代 Node.js） 第一种方式我在 macOS 上折腾了好久，依然出现各种报错，只好作罢，现在只能等 GitHub 网友推出 Do…"}, {"id": "6844903906225602568", "title": "WebRTC：一个视频聊天的简单例子", "desc": "在前面的章节中，已经对WebRTC相关的重要知识点进行了介绍，包括涉及的网络协议、会话描述协议、如何进行网络穿透等，剩下的就是WebRTC的API了。 相关API太多，为避免篇幅过长，文中部分采用了伪代码进行讲解。详细代码参考文章末尾，也可以在笔者的Github上找到，有问题欢…"}, {"id": "6844903795734872077", "title": "Node.js 基金会和 JS 基金会 -> 合并为 OpenJS 基金会", "desc": "经过 6 个月的仔细考虑和大量社区反馈与协作，在 13 日举办的 OpenSource Leadership Summit（开源领导力峰会）上，官方宣布 Node.js 基金会与 JS 基金会正式合并成为 OpenJS 基金会"}, {"id": "6844903985325801480", "title": "node.js框架设计搭建和部署", "desc": "主要介绍node.js的框架的技术选型和框架搭建，以及如何在服务器上部署发布。这里客户端使用小程序来介绍。小程序主要功能涉及到用户授权登录，地图定位，webSocket发送定位，二维码扫描添加设备。 Koa+Typescript，除了本身类型系统对数据库的数据模型定义有好处外。…"}, {"id": "6919730507240439815", "title": "Node.js 实战开发-Express", "desc": "Node.js的底层API会让人感觉到很繁琐，监听个get请求就要写多行代码，Express是基于Node.js的web开放框架，进行了封装，让开发者只关注业务逻辑开发，而且基于中间件开发模式，扩展性"}, {"id": "6844903753305292813", "title": "koa2第二篇: 图解中间件源码执行过程", "desc": "你可以理解为koa2会先按照中间件注册顺序执行next()之前的代码, 执行完到底部之后, 返回往前执行next()之后的代码。 重点是我们需要koa2源码究竟是怎么样执行的? 现在开始调试模式进入koa2源码一探究竟。 然后会进入callback. 这是因为 这个时候this…"}, {"id": "6901997583527641101", "title": "从构建自定义 cli 到 npm 包的发布使用", "desc": "1. 什么是 CLI CLI 是 command line interface 的简称，也就是命令行界面。用户可在提示符下键入可执行指令，然后计算机执行，它通常不支持鼠标。前端开发中也会用到很多 CLI，最典型的就是 react 对应的 create-react-app，vue…"}, {"id": "6844903511033921543", "title": "手把手教写 TypeScript Transformer Plugin", "desc": "在一个没有使用 antd 全部组件的项目里，这样做可以明显减少打包后的代码体积。 这就要用到本文的主角：custom transformation，这是从 TypeScript@2.3 开始引入的新能力，他让我们可以部分修改 TS 从源码转换成的语法树，从而控制生成的 Java…"}, {"id": "6844903602461343758", "title": "关于callback函数", "desc": "你懂 callback 机制吗？"}, {"id": "6844903710913462280", "title": "以中间件，路由，跨进程事件的姿势使用WebSocket--Node.js篇", "desc": "上一篇文章介绍了在浏览器端以中间件，路由，跨进程事件的姿势使用原生WebSocket。这篇文章将介绍如何使用Node.js以相同的编程模式来实现WebSocket服务端。 Node.js中比较流行的两个WebSocket库分别是socket.io与ws。其中socket.io已…"}, {"id": "6844903859094028301", "title": "一步步分析 Node.js 的异步I/O机制", "desc": "它的优秀之处并非原创，它的原创之处并非优秀。 本文章节如下图所示，阅读时间大约为10分钟~15分钟，图少字多，建议仔细阅读。 在计算机资源中，I/O和CPU计算在硬件支持上是可以并行进行的。所以，同步编程中的I/O引起的阻塞导致后续任务（可能是CPU计算，也可能是其他I/O)的…"}, {"id": "6844903618621997070", "title": "原生ES-Module在浏览器中的尝试", "desc": "首先在使用上，唯一的区别就是需要在script标签上添加一个type=\"module\"的属性来表示这个文件是作为module的方式来运行的。 然后在对应的module文件中就是经常会在webpack中用到的那样。 这里有一个类似于noscript标签的存在。 可以在script…"}, {"id": "6912306546990907406", "title": "nodejs写入json文件，格式化输出json的方法", "desc": "假如我需要把data序列化成json字符串，然后写入data.json文件中，代码如下：入json文件后，都会出现很恶心的一行式，看看不能忍对不对！！！VanillaJS的JSON.stringify"}, {"id": "6844904041240068103", "title": "如何在Node和浏览器控制台中打印彩色文字", "desc": "这篇文章中，我们主要研究的是如何在Node中打印出彩色文字，浏览器的只是附带。 1、在Wepack的打包过程中，显示打包完成后，控制台输出了几行注目的彩色文字信息。 2、在cli工具中，提示的信息有时会附带红色或绿色的提示。 急冲冲的挪过去一试验，然而显示的还是无情的白色文字。…"}, {"id": "6844903879113441288", "title": "JavaScript深入浅出第3课：什么是垃圾回收算法？", "desc": "最近垃圾回收这个话题非常火，大家不能随随便便的扔垃圾了，还得先分类，这样方便对垃圾进行回收再利用。 其实，对于写代码来说，也有垃圾回收(garbage collection)这个问题，这里所说的垃圾，指的是程序中不再需要的内存空间，垃圾回收指的是回收这些不再需要的内存空间，让程…"}, {"id": "6844903949997195277", "title": "nodejs（七）模版引擎的使用", "desc": "一. art-template 二. Demo 1. 创建Demo文件夹，使用 npm init -y命令初始化文件夹 2. 在文件夹下安装 art-template模版 3. 创建HTML模版 4. 创建服务器，渲染模版，加载数据 5. 启动服务器，在浏览器输入URL"}, {"id": "6844904033631600647", "title": "nodejs的异步流程", "desc": "通常情况下，我们最希望程序能一步步按顺序的执行，这和我们的思维方式一致。在最开始学习编程时，我们也是先了解的结构化程序设计，通过顺序结构、分支结构和循环结构组织代码，这样的代码流程最清晰。 但遗憾的是现实是残酷的，文件操作、网络操作等都是执行速度慢的操作。如果只是顺序执行，那么…"}, {"id": "6844903502024540173", "title": "让URLSearchParams帮你生成和解析参数字符串", "desc": "无论在Node.js程序还是HTML前端程序里，我们都免不了像下面这样手工拼URL搜索字符串（URLSearchString，或称QueryString）：如果你逐行阅读上面的代码，不难发现这段程序并"}, {"id": "6939497635329867806", "title": "sequelize使用总结", "desc": "要连接到数据库,必须创建一个 Sequelize 实例. 这可以通过将连接参数分别传递到 Sequelize 构造函数或通过传递一个连接 URI 来完成： 默认情况下,Sequelize 将保持连接打开状态,并对所有查询使用相同的连接. 如果你需要关闭连接,请调用 sequel…"}, {"id": "6903039729604755464", "title": "Node插件之inquirer", "desc": "其中prompt方法中的参数为question数组对象，每一个对象都可以配置一些属性，这个需要配合commander使用。 type：（String）提示的类型。默认值：input-可能的值：input，number，confirm， list，rawlist，expand，c…"}, {"id": "6844904058671595528", "title": "Node.js:Buffer为什么会这么有意思？", "desc": "应用程序在处理像TCP流或文件流时，必须使用二进制数据。Node.js通过Buffer类来处理： 我们直接打印出data，可以看到控制台输出类似<Buffer 2f 2f 20 4e 6f ... >，使用Buffer.isBuffer()判断data是否继承自Buffer类可…"}, {"id": "6844903763937853453", "title": "Express 上传图片", "desc": "Express 常用的中间件body-parser不能解决上传图片问题 针对图片上传，有专门的中间件multer，用来处理Content-Type为multipart/form-data的数据。"}, {"id": "6844903813585829902", "title": "使用 nodejs 写爬虫(二): 抓取 github 热门项目", "desc": "其实爬虫是一个对计算机综合能力要求比较高的技术活。 首先是要对网络协议尤其是 http 协议有基本的了解, 能够分析网站的数据请求响应。学会使用一些工具，简单的情况使用 chrome devtools 的 network 面板就够了。我一般还会配合 postman 或者 cha…"}, {"id": "6844904035900719112", "title": "【重学Node.js 第1&2篇】本地搭建Node环境并起RESTful Api服务", "desc": "说明：本想分两章讲环境搭建和起api服务，但操作下来确实过于简单。但考虑到整个系列的完整性也不能不讲，那就把这两篇合二为一吧 开发环境主要是指Node、MongoDB。本人是用的mac电脑，所以本地环境也是按照mac搭搭建的。 最简单的方式，直接从官网下.pkg文件，图形化安装…"}, {"id": "6844903586283913230", "title": "Node.js核心入门（一）", "desc": "因为以前学习Node.js并没有真正意义上的去学习它，而是粗略的学习了npm的常用命令和Node.js一些模块化的语法，因此昨天花了一天的时间看了《Node.js开发指南》一书。通过这本书倒是让我对Node.js的认识更为全面，但由于这本书出版时间过早，有些API已经发生了变化…"}, {"id": "6844903826235850760", "title": "Node.js折腾记一：读指定文件夹，输出该文件夹的文件树", "desc": "前言用来干什么：想干嘛干嘛为什么写：写来玩，学习node.js文件系统相关api；树结构这种东西还是挺不错的，会用会造才是真的会用了什么：fs.readdir(dir),fs.stat(dir).is"}, {"id": "6847902217861758989", "title": "node jwt鉴权实现protected router及node debugger（五）", "desc": "文章主要记录如何实现使用express连接数据库，做增删改查，关联数据库，封装路由，jsonwebtoken鉴权，bcrypt登录密码加密，multer文件上传和一些请求数据的处理，开发日志记录。"}, {"id": "6920491783948337159", "title": "JS堆栈和作用域链", "desc": "{n:12}是一个对象，在堆内存中创建一个空间，把对象的键值对n:12存储到堆空间中，把堆空间地址放到栈中（0x000）供变量a引用。在把a的地址赋值给b（0x000）存储。b['n']=13;成员访问，先基于地址0x000找到堆空间，把n的值修改为13。最后，访问0x000，…"}, {"id": "6971449952253935623", "title": "🔥Node系列学习之Node基础(二)", "desc": "这是我参与更文挑战的第8天 , 接上篇基础文章 《Node系列学习之Node基础》 ，基础环境已经搭建好，开始新的Node学习~"}, {"id": "6914238079989448717", "title": "Node RESTful ", "desc": "一RESTfulAPI理论1.1REST是什么？web软件架构风格用来创建网络服务RepresentationalStateTransferRepresentational:数据的表现形式(最佳实践J"}, {"id": "6868616801513799687", "title": "你应该了解的23个极为有用的NodeJS库", "desc": "这是一个市场上最好的javascript后端库列表，甚至我会推荐你把它收藏起来，以便将来参考，就像我为自己做的那样 😜。 1. Express 快速，简单，极简的Node Web框架。 2. Socket.io 3. Body-parser Node.js body解析中间件…"}, {"id": "6844904023380721678", "title": "一杯茶的时间，上手 Express 框架开发", "desc": "Node.js 已经成为 Web 后台开发圈一股不容忽视的力量，凭借其良好的异步性能、丰富的 npm 库以及 JavaScript 语言方面的优势，已经成为了很多大公司开发其后台架构的重要技术之一，而 Express 框架则是其中知名度最高、也是最受欢迎的后端开发框架。在这篇教…"}, {"id": "6936500545993572365", "title": "从零开发一款自动提取网页html并一键转换为md文件的工具(vue源码版)", "desc": "我们都知道程序员最爱的写博客的“语言”就是makedown, 并且目前大部分的技术社区都支持makedown语法, 所以说只要有makedown, 我们就能快速的同步到不同的技术平台. 也许有人会说, 我们写博客直接用makedown语法写不就好了? 的确这样做可以满足需求, …"}, {"id": "6884772550921715719", "title": "用Nodejs实现在终端中炒股", "desc": "前阵子在股票行情见好时拿出全部零花钱入了几手，后来大盘来来回回调整时也不想卖，准备再留一段时间看看。 开盘的时间都是要撸码的，在电脑上使用软件或网页去看行情总归不妥。由于股票界面过于明显，其他人票你屏幕一眼就知道你没在干正事而是在炒股。 所以想了一个办法，在IDE界面的控制台中…"}, {"id": "6844903617619558408", "title": "一起学习造轮子（一）：从零开始写一个符合Promises/A+规范的promise", "desc": "Promise 是异步编程的一种解决方案，比传统的解决方案回调函数和事件更合理更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。本篇不注重讲解promise的用法，关于用法，可以看阮一峰老师的ECMAScript 6系列里面的…"}, {"id": "6844904069488705550", "title": "基于nodejs线上代码热部署原理与实现", "desc": "大家都知道，nodejs启的后端服务，如果有代码变动，要重启进程，代码才能生效。 近段时间在做线上服务编译相关需求的时候，就出现了短时间内线上服务代码高频变动，代码功能模块高频更新，在不能重启服务的情况下，让更新的代码生效的场景。 这就涉及到一个热部署的概念，在不重启服务的情况…"}, {"id": "6844903620916281358", "title": "📦vue组件发布npm最佳实践", "desc": "如果觉得文章“太长不看”，可以直接使用开发工具：vue-sfc-cli，集成 travis ci，快速发布 npm。 做好以上三点，才可以通过npm publish简单地发布一个包。若要遵循最佳实践，还有一些准备工作要做好，下面将为你讲述 version是语义化的，major.…"}, {"id": "6847902225356980232", "title": "使用 wml 进行npm模块调试真香", "desc": "前端模块开发已经成为了开发标准。模块开发带来的一大便利就是让我们可以跨页面甚至跨应用复用代码。当我们跨应用复用模块时，就需要借助 npm 把模块发布出去供各个系统调用。今天介绍的 wml 是一个进行模块调试的利器。 wml 侦听某个文件夹中的更改（使用Watchman），然后将…"}, {"id": "6972568020942061581", "title": "Node.js 入门系列（九）阶段总结", "desc": "这个 Node.js 的入门系列不知不觉已经写到第九篇了，九为数之极，那么现在就来做一下阶段总结吧！"}, {"id": "6982578804233502727", "title": "Nodejs 与 Python 双向通信", "desc": "第三方数据供应商把数据和Python封装到一起，只能通过调用 Python方法来实现数据查询，如果可以通过Node 简单封装下实现 Python 方法调用可以快速上线并节省开发成本。 最简单粗暴的通信"}, {"id": "6993319628877332511", "title": "nodejs+koa2实现文件上传大文件切片上传断点续传服务器端完整代码", "desc": "nodejs+koa2实现文件上传大文件切片上传断点续传服务器端完整代码 const Koa = require('koa'); const Router = require('koa-router'"}, {"id": "6998220667942338573", "title": "Express的请求方式——get、post、patch、delete", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 Express 一、介绍Express Express有丰富的基础API支持，以及常见的HTTP辅助程序，例如重定向、缓存等；有强大的路由"}, {"id": "6844903604692713485", "title": "自动更新 Swagger 接口数据到 YApi 平台", "desc": "本篇教程主要介绍如何自动更新 Swagger 数据到 YApi 接口管理平台，我们假设你已经能够熟练使用 YApi接口管理平台。 yapi-cli 依赖 Node.js , 请安装不低于 7.6 版本的 Node.js，如果你的机器已经安装了 yapi-cli 工具，且版本号 …"}, {"id": "6995064426982277157", "title": "node自动化构建(二)--inquirer", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战。 首先，inquirer是什么呢？inquirer就是一个用户与命令行交互的工具，常见于各个地方。"}, {"id": "6844903634979782664", "title": "接口咋整？前端数据药神来也", "desc": "最近我的好友在写项目的时候经常会抱怨数据的来源，的确对于一个前端来说，数据接口数据资源永远是Mock。网上看很多大神python，node玩的飞起。但自我感觉，并没有一套好的流程方案可以走进我们开发的流程中。为了帮助我的好友并且需要数据的你来说，可以仔细的看看整套流程。因为我也…"}, {"id": "6995567985515577374", "title": "做一个CLI版的时间管理工具（11）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6986150088263335972", "title": "Nodejs中使用babel相关的库", "desc": "需求 有 js 文件的内容如下 客户端发来的请求如下 这时候 mock 程序要自动生成的内容如下 减少复制粘贴的成本 衡量 首先要定位到getApis这个函数，然后找到其return语句的{位置，再插"}, {"id": "6922279418714914824", "title": "Node.js之自动发送邮件 | 仅二十行代码即可", "desc": "因为我们执行完发送邮件之后，这个任务执行完成就已经关闭了。我们需要一个定时任务来给它一直跑 node-schedule"}, {"id": "6887797543212843016", "title": "使用Node.js原生API写一个web服务器", "desc": "Node.js是JavaScript基础上发展起来的语言，所以前端开发者应该天生就会一点。一般我们会用它来做CLI工具或者Web服务器，做Web服务器也有很多成熟的框架，比如Express和Koa。但是Express和Koa都是对Node.js原生API的封装，所以其实不借助任…"}, {"id": "6992021172230012942", "title": "浅谈JavaScript的事件循环机制（Event Loop）- Node.js篇｜8月更文挑战", "desc": "上篇文章我们聊了事件循环机制在浏览器中的表现，本篇我们来聊聊宿主环境换成为Node.js时，会有什么变化。 初探 我们先以宏观视角看下在Node.js中Event Loop长什么样"}, {"id": "6979046627952558093", "title": "PM2常用命令", "desc": "大致列了一些常用的命令，方便日后查询。Node进程管理器，具有负载均衡，守护进程，监控，日志等。含有常用命令，和高级用法示例"}, {"id": "6844903576188223495", "title": "egg重写博客接口", "desc": "之前用React全家桶和Java的SpringBoot重构了自己的个人博客，虽然做出来了，但是还是初成版，自我感觉还是存在很多问题。由于对Java不是完全熟悉，所以写出来的接口可能有些瑕疵，所以最近学习了eggjs，使用了egg重写了后台接口。 数据库设计跟之前的也略有不同，差…"}, {"id": "6923890395768160270", "title": "node篇  <菜鸟进阶一> node.js 实现简单爬虫，爬取 ‘’去哪了‘’  首页图片", "desc": "爬虫案例爬虫案例分析<主要步骤>获取目标网站需要被扒网页的数据分析网站内容（cheerio）获取有效信息下载或者其他操作直接上代码引入模块主模块安装cheerio第三方模块，可以使用jQ语法，进行ht"}, {"id": "6896355868758966279", "title": "Node系列-04-管道流操作以及压缩和解压", "desc": "Writable - 可写入数据的流（例如 fs.createWriteStream()）。 Readable - 可读取数据的流（例如 fs.createReadStream()）。 Duplex - 可读又可写的流（例如 net.Socket）。 Transform - 在…"}, {"id": "6844903569691246599", "title": "2018年3月前端开发者超实用干货大合集 - UISDC", "desc": "列举出了一些最新的 JavaScript 框架，测试工具，以及用于开发 WordPress 网站的工具组合"}, {"id": "6844903829008285710", "title": "[译]使用Babel7+nodemon打造你的Node.js项目开发", "desc": "想在你的Node.js项目中使用最新的js语法吗？想让你的项目具备热更新能力吗？本文的目标就是让你能够搭建起这样的一个基本项目。 大家之前可能用过babel的其他低版本，但是今天我们使用的babel7和其他低版本有一些不同之处。 1.Babel7的相关包都挂在了@babel域下…"}, {"id": "6844903578000162823", "title": "[译] 探索 Angular 使用 ViewContainerRef 操作 DOM", "desc": "每次我读到 Angular 如何操作 DOM 相关文章时，总会发现这些文章提到 ElementRef、TemplateRef、ViewContainerRef 和其他的类。尽管这些类在 Angular 官方文档或相关文章会有涉及，但是很少会去描述整体思路，这些类如何一起作用的相…"}, {"id": "6917256394743742472", "title": "shero-cli: 自动化管理github博客", "desc": "很多程序员平时喜欢使用 git 的 issue 来编写博客，因为 issue 里的 comment 部分能够提供一个作者和读者之间沟通讨论的平台。但是使用 issue 编写博客的话，涉及到博客内容和 issue 直接的关系需要维护，作者需要自己维护一个博客仓库，然后在博客完成后…"}, {"id": "6844903618823323662", "title": "理解模板引擎", "desc": "无论是前端的 MVVM 框架, 还是像我们常用的如 ejs 这样的模板引擎, 都是为了组件化工作的, 是为了减少重复编写某些代码而出现的.实际上模板引擎是为了实现模板文件与业务数据的结合, 实现界面与数据的分离. 为了能够深刻理解模板引擎的工作原理, 这里我通过实现一个简单的模…"}, {"id": "6869605004756877319", "title": "ReactHook快速上车", "desc": "React16.8开始内置了10个Hook，核心是2个：状态管理：useState副作用管理：useEffect有状态的函数useState有状态组件写法：无状态组件写法：hooks是有状态的函数：注"}, {"id": "6844903887007285256", "title": "面试必问之JSONP", "desc": "个人笔记，暂时没有附带源代码，见谅。 第一部分阐述什么是JSONP，附带面试题一个。 第二部分是发展历程，img法，script法，JSONP法。没有源代码阅读会笔记困难，再次见谅。 第三部分随笔记录一些基础知识。 第一句话： 因为JSONP是通过动态创建script实现的。 …"}, {"id": "6844903569234067469", "title": "实战node静态文件服务器", "desc": "1. 创建服务读取静态文件 客户端发送内容，通过请求头里Accept-Encoding: gzip, deflate告诉服务器支持哪些压缩格式，服务器根据支持的压缩格式，压缩内容。如服务器不支持，则不压缩。 服务器通过请求头中的Range: bytes=0-xxx来判断是否是做…"}, {"id": "6926511728951820295", "title": "Puppeteer: 更友好的 Headless Chrome Node API", "desc": "作者：ICBU 谦行很早很早之前，前端就有了对后端环境调用浏览器页面功能的需求，最多的应用场景有两个UI自动化测试：摆脱手工浏览点击页面确认功能模式，使用接口自动化调用界面爬虫：模拟页面真实渲染，解决"}, {"id": "6844903538133303304", "title": "JavaScript异步编程大冒险: Async/Await", "desc": "Async/Await 也就是大家知道的异步函数，它是一个用来控制 JavaScript 异步流程的一个记号。而在很多现代浏览器上也曾实现过这样的设想。它的灵感来源于C# 和 F#，现在 Async/Await 在ES2017已经平稳着陆。 通常我们认为 async funct…"}, {"id": "6844904164896538637", "title": "Koa 源码剖析 & 实现", "desc": "无论你在准备面试，或想提升编码能力，那么理解 Koa 源码是一个不错的选择。所以，我们的目标是： 只关注核心功能点，最大程度地精简代码，亲自实现一个 Koa。 当然这个服务暂时无法运行。 application.js 作为入口文件，它导出了一个 Class（本质为构造函数），用…"}, {"id": "6844903806107566094", "title": "Node.js之path模块的使用", "desc": "path模块包含一系列处理和转换文件路径的工具集，通过 require('path') 可用来访问这个模块。 按照顺序依次拼接，获取的是绝对路径，路径末尾的不会带有路径分隔符，若合并后的路径没有构成一个绝对路径，则会默认使用当前工作目录的绝对路径。 按照顺序，依次拼接路径、并转…"}, {"id": "6844903806107385870", "title": "Node.js之readline模块的使用", "desc": "readline允许从可读流中以逐行的方式读取数据，比如process.stdin等。 在node.js命令行模式下默认引入了readline模块，但如果是使用node.js运行脚本的话，则需要自己通过require('readline')方式手动引入该模块。 首先、创建一个接…"}, {"id": "6844903622325567502", "title": "[译]在Docker中构建平滑的Nodejs应用", "desc": "本文介绍了在Docker容器中平滑重启Nodejs服务会遇到的两个问题；文章比较长，如时间宝贵，可以直接跳转到文末看结论即可。本文翻译自：@becintec/building-graceful-node-applications-in-docker-4d2cd4d5d392"}, {"id": "6844903599231729671", "title": "React 深入系列1：React 中的元素、组件、实例和节点", "desc": "React 中的元素、组件、实例和节点，是React中关系密切的4个概念，也是很容易让React 初学者迷惑的4个概念。现在，老干部就来详细地介绍这4个概念，以及它们之间的联系和区别，满足喜欢咬文嚼字、刨根问底的同学（老干部就是其中一员）的好奇心。 React 元素其实就是一个…"}, {"id": "6844903577719144456", "title": "实战GraphQL+express+mysql项目完整demo", "desc": "安装步骤:1.npminstall2.数据库安装及连接使用/graphql.sql安装数据库修改conf/db.js中相关配置3.启动步骤npmstart4.访问:localhost:3003通过开发"}, {"id": "6844904150627516424", "title": "基于 Express 应用框架的技术方案选型浅谈", "desc": "现在的 Node 对于前端而言可以涵盖各个方面，包括命令行接口、插件、依赖库、脚手架以及 Web 服务等。本文是一篇对于 Node 使用的浅谈文章，会简单讲解一些个人使用 Node 的经验，分享的内容主要可分为三个方面： 工具篇会讲解使用 NPM 发布命令行接口的简单教程。插件…"}, {"id": "6844903715262955533", "title": "前端黑科技：美团网页首帧优化实践", "desc": "自JavaScript诞生以来，前端技术发展非常迅速。移动端白屏优化是前端界面体验的一个重要优化方向，Web 前端诞生了 SSR 、CSR、预渲染等技术。在美团支付的前端技术体系里，通过预渲染提升网页首帧优化，从而优化了白屏问题，提升用户体验，并形成了最佳实践。 通过对比，同构…"}, {"id": "6844903767129718791", "title": "async/await 优雅的错误处理方法", "desc": "这样写代码里充斥着 try/catch，有代码洁癖的你能忍受的了吗？这时可能会想到只用一个 try/catch。 在上面写法中，如果 fetchData 返回 resolve 正确结果时，data 是我们要的结果，如果是 reject 了，发生错误了，那么 data 是错误结果…"}, {"id": "6999203714212823047", "title": "Node.js 异步 api 的本质和 libuv", "desc": "Node.js 是一个 Javascript 的运行时，提供了系统能力的 api，主要是文件、网络相关的 IO api，而 IO api 的实现是在 libuv，提供了同步异步两种形式的 api。 本"}, {"id": "6844903593275817998", "title": "彻底理解浏览器的缓存机制", "desc": "浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，HTTP报文分为两种："}, {"id": "6993705674483957796", "title": "做一个CLI版的时间管理工具（六）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6959851582984814623", "title": "前端玩转mysql", "desc": "这篇文章会详细的介绍Mysql的使用，和一些常见的坑，以及如何使用Nodejs连接数据库，后续会开源一套基于Mysql数据库的CRM系统"}, {"id": "6994720465444945933", "title": "node自动化构建(一)--child_process", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战。 自动化构建中有一个很重要的node核心模块child_process，可以通过shell脚本完成很多有意思的事情。"}, {"id": "6878092891013677063", "title": "我为 Express 开了外挂", "desc": "随着 Nodejs 在前端涉及领域越来越广，也越来越成熟，相信很多朋友已经尝试或使用过 Nodejs 开发服务端项目了。 本文我将和大家一起回顾 Express，然后介绍一个超级外挂——OvernightJS，它强大的地方在于，它将为 Express 路由提供 TypeScri…"}, {"id": "6844903544978407431", "title": "WebSocket：5分钟从入门到精通", "desc": "WebSocket的出现，使得浏览器具备了实时双向通信的能力。本文由浅入深，介绍了WebSocket如何建立连接、交换数据的细节，以及数据帧的格式。此外，还简要介绍了针对WebSocket的安全攻击，以及协议是如何抵御类似攻击的。 HTML5开始提供的一种浏览器与服务器进行全双…"}, {"id": "6991631111705067528", "title": "前端开发肯定都会遇到node-sass引起的问题，终于官方推荐使用dart-sass 如何node-sass升级为dart-sass  ｜ 8月更文挑战", "desc": "我们在做前端项目的时候，经常性的会使用css预处理器，比如我们在用vue-cli来构建项目，可选择使用哪种预处理器(Sass/Less/Stylus)，目前vue-cli在选择sass预处理的时候也会"}, {"id": "6888676709105664013", "title": "如何实现后台管理系统的权限路由和权限菜单", "desc": "本文是继 前端如何一键生成多维度数据可视化分析报表 实战的最后一篇文章, 主要介绍如何实现后台管理系统的权限路由和权限菜单. 希望通过这3篇文章的复盘和实战, 可以让大家开发企业应用的时候更加游刃有余. 所以我们首要解决的问题就是面对未知层级菜单时的前端解决方案. 其次就是面对…"}, {"id": "6844903615681806344", "title": "前端的焦虑，你想过30岁以后的前端路怎么走吗？", "desc": "曾几何时，我总会很庆幸自己进了前端这个行业。因为在这个职业范畴里面，我如鱼得水，成长很快，成就感满满。然而，随着年龄和工龄的增长，渐渐发现自己的瓶颈越来越明显了，我感觉自己似乎碰到了前端的天花板。 1.从客观原因来看，前端相对于后端的入门门槛确实低了不少。公司对前端的需求量虽然…"}, {"id": "6847902223133835272", "title": "前端科普系列（3）：CommonJS 不是前端却革命了前端", "desc": "上一篇《前端科普系列（2）：Node.js 换个角度看世界》，我们聊了 Node.js 相关的东西，Node.js 能在诞生后火到如此一塌糊涂，离不开它成熟的模块化实现，Node.js 的模块化是在 CommonJS 规范的基础上实现的。那 CommonJS 又是什么呢？ 我们…"}, {"id": "6989267566531198990", "title": "xdm,异步编程", "desc": "关于 Promise，关于异步编程，连接数据库出现 bug,一学才发现自己的基础知识点确实没掌握好。"}, {"id": "6995103734053208095", "title": "记录常用的Nodejs文件API", "desc": "作为一个web开发工程师，免不了跟Nodejs打交道，其中的fs模块非常有用，可以执行一些文件相关的操作，可总是记了忘、忘了记。今天打算再整理记录一下，免的下次又忘了。"}, {"id": "6951172272023404552", "title": "Node 系列 - 001 - Node 介绍", "desc": "在日常工作中，**jsliang** 会用 Node.js 写写便捷小工具，优化工作流程和进行接口数据转发等。 本系列会由易到难，和小伙伴们一起探索 Node.js。"}, {"id": "6844903727552266254", "title": "2018 前端开发分享", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 查阅网上诸…"}, {"id": "6966944107314806821", "title": "一次 Node.js 服务线上问题引出的 DNS 缓存方案研究与思考", "desc": "某天上午，运营同学突然在群里反馈很多用户来报登录问题。起初以为是内网接口服务异常了，但接口反馈没有产生异常的日志，也就是说异常请求还没打过去。"}, {"id": "6942037239064952869", "title": "解秘 Node.js 单线程实现高并发请求原理，以及串联同步执行并发请求的方案", "desc": "最近在做一个支持多进程请求的 Node 服务，要支持多并发请求，而且请求要按先后顺序串联同步执行返回结果。 对，这需求就是这么奇琶，业务场景也是那么奇琶。 需求是完成了，为了对 Node.js 高并发请求原理有更深一些的理解，特意写一篇文章来巩固一下相关的知识点。 Node.j…"}, {"id": "6992585265902518302", "title": "做一个CLI版的时间管理工具（三）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "7002029271241719822", "title": "nodejs之cookie和session", "desc": "由于最近工作需要又将node捡了起来。翻了下之前的笔记，想着把几篇比较详细的整理下分享出来。第一篇就来说说经常会用到的cookie&session。 由来 众所周知http是一个无状态的协议，服务端无"}, {"id": "6988479655967719454", "title": "node爬虫puppeteer使用", "desc": "本文介绍了node 爬虫 puppeteer 使用。puppeteer 是一个基于 Chromium 的 node 爬虫框架。其厉害之处就是他具备浏览器的所有功能，并且通过 nodejs 就可以控制。"}, {"id": "6979829126395854861", "title": "Nodejs学习笔记", "desc": "一.什么是nodejs nodejs 二.node模块化 三.Buffer 四.事件循环 ········"}, {"id": "6997799224213504037", "title": "Node.js path 模块", "desc": "Node.js path 模块是一个内置模块，可帮助您以独立于操作系统的方式使用文件系统路径。如果要构建支持 OSX、Linux 和 Windows 的 CLI 工具，则 Path 模块是必不可少的。"}, {"id": "6957344500310081544", "title": "【排障系列】npm script 执行”丢失“ root 权限的问题", "desc": "近期，在线上运行服务时遇到了一个诡异的 Linux 权限问题：root 用户在操作本该有权限的资源时，却报了权限错误。"}, {"id": "6866982764256690189", "title": "谁说Session只能存储在服务器端？", "desc": "今天使用Koa遇到了一个诡异的问题，然后仔细研究了Koa-Session的实现原理，刷新了我的认知。好我们从头讲起。 session机制采用的是一种在服务器端保持状态的解决方案。由于采用服务器端能保持状态。也需要客户端保存一个标识。所以session机制可能需要借助于cooki…"}, {"id": "6999811397773164581", "title": "Linux 系统安装 Node.js", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 1. CentOS 安装 Node.js 用户：root 1.1 Node.js 下载并上传 查看系统位数 这里查看是64位的。 下载地址"}, {"id": "6998171049825140743", "title": "Node.js学以致用-文件系统模块结合HTTP模块-本地文件服务器", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 这里记录一些学习 Node.js 的笔记, 日积月累, 后续会有更多学习的记录, 一起来看看吧-- Node.js 搭建本地文件系统服务器"}, {"id": "6844903623273480200", "title": "ES6模块化之export和import的用法", "desc": "就是每一个需要导出的数据类型都要有一个name，统一引入一定要带有{}，即便只有一个需要导出的数据类型。这种写法清爽直观，是推荐的写法。 无论怎样导出，引入的时候都需要{}。 默认导出就不需要name了，但是一个js文件中只能有一个export default。 其实这种导出方…"}, {"id": "6993613040549625863", "title": "Node 04--使用Node处理表单请求与两种暴露方式", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 使用Node处理表单get请求 表单的格式 表单要有action属性，这个属性是告知浏览器要将数据发送到哪里。 每一个输入框要有name属性"}, {"id": "6992492250227802120", "title": "Node 01--使用Node读写文件与简单的Http服务", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 Node和浏览器环境的不同之处 1. Node中没有DOM和BOM 2. 浏览器环境下的JS是没有操作文件的能力的，但是Node有 使用No"}, {"id": "6999943690336763934", "title": "学习Node 中Express框架", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 Express是什么？ Express是一个快速，简单，极简的Node.js web应用开发框架。通过它，可以轻松的构建各种web应用。例"}, {"id": "6976549021678567437", "title": "Node.js 知识体系(一)-说说你对Node的理解", "desc": "这是我参与更文挑战的第二十一天，活动详情查看:更文挑战 Node.js 拥有广大的 JavaScript 程序员基础，并且完全开源！因此拥有一个强大的开发者社区！依靠繁荣的社区力量，已经发展出成熟的技"}, {"id": "6844903911095025678", "title": "基于 Lerna 管理 packages 的 Monorepo 项目最佳实践", "desc": "最近在工作中接触到一个项目，这个项目是维护一套 CLI，发到 npm 上供开发者使用。先看一张图： 项目仓库中的根目录上就三个子模块的文件夹，分别对应三个 package，在熟悉了构建和发布流程后，有点傻了。工作流程如图中所示： 最后使用拷贝文件的方式，把pkg-main、pk…"}, {"id": "6951574332090875941", "title": "初识Node--异步I/O", "desc": "“异步”这个名词其实在Node之前就已经诞生了。但是在绝大多数高级编程语言中，异步并不多见。在众多高级语言或运行平台中，将异步作为主要编程方式和设计理念的，Node是首个。"}, {"id": "6996827368576778247", "title": "手撸一个Web Server【基于Node.js原生API】", "desc": "官方文档讲到Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境，所以严格意义上来讲，Node.js不能算是一门语言，本质上还是基于JavaScript以及Ch"}, {"id": "6844903586384576520", "title": "小马的大前端之路——Node.js初探", "desc": "夜已深，愚人节有没有对中意的女生表白啊。哈哈。。。 小编在这里先祝福大家。 这个周末，本来想把最近还没有整理的几篇文章这里好发给大家的。无奈小编周末有点晕，还没整理好。可能是周六晚上烤串吃多了。 最近有一篇是关于module（模块化） & babel的文章不过还没整理出来。那先…"}, {"id": "6844903566289682440", "title": "利用puppeteer破解极验的滑动验证", "desc": "1. 打开前端网，点击登录。 2. 填写账号，密码。 3. 点解验证按钮，通过滑动验证，最后成功登陆。 github上可以checkout。 1. 将这个两个文件保存到文件夹下面，终端切换到当前路径下 2. npm i 3. 补上前端网的账号，密码 4. node run 1.…"}, {"id": "6982729571682484231", "title": "npm切换源，nrm安装、配置及使用", "desc": "为什么要切换npm源 1.速度太慢 因为默认的npm源是国外的，速度比较慢。可以选择国内镜像，加快下载安装速度，比如我们可以切换到taobao源或者公司内部的源。 2.手动切换太麻烦 切换源时，往往记"}, {"id": "6844903616059277325", "title": "《Design Mistakes in Node》Node 之父 Ryan Dahl 演讲 PPT 中文版 (2018 JS Conf Berlin)", "desc": "这是 Node 之父在 2018.6 在JS Conf 柏林上的演讲 PPT 的中文翻译，透过该 PPT 可以看到 ry 基本完整地阐述了 Node 的一些设计缺陷，以及为什么要启动 Deno 项目和对 Deno 项目的规划，这对于未来我们的技术选型可能会有一些启发式的指导。"}, {"id": "6844903661806567431", "title": "Node.js流，这样的打开方式对不对！", "desc": "俗话说的好：“人往高处走，水往低处流”；古语有云：“落花有意，流水无情”。（吃瓜群众：what？你特么这是要弄啥哩！二营长📣）哎呀🤣，各位大佬，这点小事用不着惊动二营长的意大利炮了吧，进错频道了，马上开始正题！ 呢，还是觉的它有那么点抽象，又有那么点难以理解！痛定思痛下，决…"}, {"id": "6894612412332032007", "title": "Node-邂逅Buffer", "desc": "00-准备知识计算机只能识别0和1(因为计算机只认识通电和断电两种状态)所有存储在计算机上的数据都是0和1组成的(数据越大0和1就越多)计算机中的度量单位1B(Byte字节)=8bit(位)//000"}, {"id": "6844903504553705485", "title": "Maptalks.js - 用于创建易集成的 2D/3D 地图的 JavaScript 轻量级框架", "desc": "MapTalks.js 是用于创建易集成的 2D/3D 地图的 JavaScript 轻量级框架，提供了高性能顺滑的交互体验、插件化的开发方式，并且易于上手与集成。MapTalks.js 基于 Mapbox.gl，并且完全使用了 ES2015 的代码，支持 IE9 以上的现代浏览"}, {"id": "6844903829159297037", "title": "【Node】常用基础 API 整理", "desc": "Node 的调试方法有很多，主要分为安装 node-inspect 包调试、用 Chrome DevTools 调试和 IDE 调试，可以在官网的 Docs Debugging Guide 查看安装方法。 如果我们使用node --inspect来启动脚本，那整个代码直接运行到…"}, {"id": "6847902225105321991", "title": "node中你不知道的遍历树状结构的数据（深度先序遍历+广度先序遍历）", "desc": "根节点a是唯一的，子节点b,c,d可以有多个（b,c,d）是同级节点，还有孙节点b1,b2等等的嵌套数据，这就是大致的树状结构数据。 那么如何遍历这样的数据呢？ 深度遍历是从纵向的维度去思考问题，就是实现一层嵌套一层的遍历。深度遍历也可分为串行和并行。 串行深度遍历：从根节点a…"}, {"id": "6844903828651769870", "title": "彻底理解Node.js中的Buffer", "desc": "每当在Node.js中遇到Buffer,Stream和binary data之类的单词时，是否总是像我一样感到困惑? 认为它们并不是常用的，而只适合Node.js专家和包开发人员去使用。 实际上，这些单词是非常重要的，尤其对于用Node.js进行web开发而没有任何CS学位的人…"}, {"id": "6844903994163200007", "title": "前端nodeJS：thinkJS 跨域处理", "desc": "thinkjs跨域处理：代码示例："}, {"id": "6844903510752886791", "title": "『好』维护的 NodeJS 应用", "desc": "得益于前端社区的活跃，近年来 NodeJS 应用的场景越来越丰富，JS 慢慢变得这也能做，那也能做，笔者也在这波潮流中，上了 NodeJS 全栈应用的这波车，也曾做出过日均访问千万级的 NodeJS 应用，本文将大概总结一下其中的一些「知识点」： 分层设计 可测试性设计 进程管…"}, {"id": "6844903697927913480", "title": "nodejs在自然语言处理中的一些小应用", "desc": "在阅读一篇文章的时候，通过相似度计算的结果，推荐相关的文章給用户。 这次也是我第一次做后端渲染的博客，ajax的网站，做seo是真的不好做... 然后这次也是我第一次正儿八经的用了下阿里大佬们的eggjs，这种“洋葱模型”的框架，我真的是超级喜欢，不管是用es7优雅地处理js异…"}, {"id": "6844903577467486222", "title": "那些年，遇到的乱码", "desc": "当我们在桌面创建一个.txt时,默认编码是gb2312，而又由于Node.js默认是不支持的，So我们通过fs读取到的buffer是转换不成我们想要的中文文字的。 大多数编辑器打开这些文件时候也会乱码。 这样虽然能让中文正常显示，但我们发现在开始的位置却出现了乱码。 在我们使用…"}, {"id": "6844903497373057032", "title": "node爬虫-小试牛刀（小说爬取）", "desc": "接触node两个多月来，因项目紧急，一直无法好好的学习node相关模块，以前接触过python爬虫，今天尝试用node也来写一个小爬虫。 本文用到node模块有： 拉取项目 选择小说目录页面 获取小说所有章节页面地址 使用request获取章节信息 使用cheerios获取章节…"}, {"id": "6928677975198007309", "title": "关于NODE", "desc": "什么是node一、node.jsnode.js是一个基于ChromeV8的运行时环境使用JavaScript语言来进行后台开发node.js是依靠事件驱动的非阻塞I/O为什么要学习node对于我们前端"}, {"id": "6844904047506374669", "title": "一篇搞懂跨域之CORS", "desc": "允许哪些地址访问。可以指定某些URL访问。也可以通过设置通配符*，允许所以地址访问，不过在设置Credentials时，不允许设置通配符，解决方法下面说。 允许客户端设置约定好的请求头参数。 响应头是否可以将请求的响应暴露给页面。主要是指的是Cookie 允许哪些方法访问我。 …"}, {"id": "6913519266155200526", "title": "爬虫快速入门（有实例）", "desc": "cheeiro是为服务器特别定制的，快速、灵活、实施的jQuery核心实现. .wait()参数可以使时间（毫秒），也可以是标签。表示会等待到这些时间后，或页面加载了这个标签后"}, {"id": "6844903678332108814", "title": "如果不用 Node.js 写业务", "desc": "最近整理博客，发现很久没有介绍语言相关的小用法了，正巧休息的时候把代码仓库归置了一遍，用几个简短的例子，聊聊 Node.js 除了写业务脚本、做构建运行时，它还能做些什么有趣的事情吧。 在做持续集成中，偶尔会遇到需要解析 API 结果，或者读取文件，获取文件指定数据的需求，当使…"}, {"id": "6844903672703369229", "title": "nodejs源码—初始化", "desc": "相信很多的人，每天在终端不止一遍的执行着node这条命令，对于很多人来说，它就像一个黑盒，并不知道背后到底发生了什么，本文将会为大家揭开这个神秘的面纱，由于本人水平有限，所以只是讲一个大概其，主要关注的过程就是node模块的初始化，event loop和v8的部分基本没有深入，…"}, {"id": "6844903610053050381", "title": "记一次 Node.js 源码分析", "desc": "1. 问题 前几日，我在测试express框架的时候，构造了一个测试样例死活过不来，即便调试到测试框架superagent ，依然不对。最终发现是Node.js的\"问题\"，而且最新版本的Node.js已经\"修复\"了，导致我中间饶了几圈都没发现是Node.js的事，下面来重现问题…"}, {"id": "6844903506378227719", "title": "基于七牛SDK构建的Vue单页图片管理应用", "desc": "Vue-cli脚手架构建的七牛图片管理图床单页应用（基于museui），前后端分离。后端基于express及七牛nodejs-SDK开发，服务原本部署在Heroku，由于服务响应速度慢的原因，已将服务部署在云服务器上。 若有任何问题、反馈或者建议，请提交issue中。 欢迎fo…"}, {"id": "6953859452118401055", "title": "node-1-基础知识与事件循环的拓展(node学习笔记)", "desc": "Node. js是一个基于 Chrome v8引擎的服务器端 JavaScript运行环境；Node. js是一个事件驱动、非阻塞式I/O的模型，轻量而又高效"}, {"id": "6844903654516867080", "title": "食用源码：debug", "desc": "一个微小的JavaScript调试工具，以Node.js核心的调试技术为模型。 适用于Node.js和Web浏览器 传送门 判断是 node 坏境还是 浏览器 坏境。 process.type === 'renderer' 判断是否为 electron 坏境。 process.…"}, {"id": "6939786150575865863", "title": "手写一个cli工具", "desc": "A. 关于 download-git-repo 包 B. 关于 spawn 包 4、npm发布的包只有在dependencies安装时才会有依赖，在dev下发布的包是不会安装这些依赖的。"}, {"id": "6939556120956502053", "title": "前端工程化概述和node.js基础", "desc": "工程就是项目。工程的整个生命周期可分为以下几个部分： 工程化就是完成项目过程中，用到的各种工具和技术。 前端工程化就是通过各种工具和技术，提升前端开发效率的过程。 前端工程化的内容：各种工具和技术。 技术是为解决问题而存在的。 等等。 工程化≠某个工具，工具和技术只是工程化落地…"}, {"id": "6844904013595410446", "title": "P11：node实现静态服务器 ~ 初步优化体验", "desc": "前面已经讲过如何输出页面，这次的需求又有了小小的变动。我们需要输出一个动态的页面，如何实现？ 有一点需要说明，在编写被调用的函数，模板或者库的时候，需要对传入值进行判断，给出相应提示。这样有利于后期维护和他人的使用"}, {"id": "6844903648372195336", "title": "浅谈Node.js的事件环（event loop）", "desc": "nodejs 具有事件驱动和非阻塞但线程的特点，使相关应用变得比较轻量和高效。当应用程序需要相关I/O操作时，线程并不会阻塞，而是把I/O操作移交给底层类库（如：libuv）。此时nodejs线程会去处理其他的任务，当底层库处理完相关的I/O操作后，会将主动权再次交还给node…"}, {"id": "6844903580856483847", "title": "Node构建一个静态文件服务器", "desc": "静态文件服务器实现的功能 首先先构建好项目目录，项目目录如下：要启动一个服务器，我们需要知道这个服务器的启动时的端口号,在config.js配置一下： 读取静态文件之前首先要先启动服务器,之后所有的方"}, {"id": "6844904047619604493", "title": "《深入浅出Node.js》学习笔记（十一）", "desc": "1. 项目工程化 所谓的工程化，可以理解为项目的组织能力。所谓的工程化，可以理解为项目的组织能力。体现在文件上，就是文件的组织能力。 主要的两类项目为Web应用和模块应用。普通的模块应用遵循CommonJS的模块和包规范。对于Web应用，组织方式各种各样，但是只要遵循单一原则即…"}, {"id": "6844903647357173767", "title": "Node.js Buffer(缓冲区)", "desc": "JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。 但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。 在 Node.js 中，Buffer 类是随 Nod…"}, {"id": "6844903648409944072", "title": "精读《手写 SQL 编译器 - 回溯》", "desc": "上回 精读《手写 SQL 编译器 - 语法分析》 说到了如何利用 Js 函数实现语法分析时，留下了一个回溯问题，也就是存档、读档问题。 我们把语法分析树当作一个迷宫，有直线有岔路，而想要走出迷宫，在遇到岔路时需要提前进行存档，在后面走错时读档换下一个岔路进行尝试，这个功能就叫回…"}, {"id": "6844904053692956679", "title": "[译]你不知道的NodeJS", "desc": "在今年的Forward.js会议（关于JavaScript的会议）上，我分享了题为“你不知道的NodeJS”的演讲。 在那次演讲中，我向观众提出了一系列有关Nodejs运行时的问题，大多数有技术背景的观众无法回答其中大多数问题。 我没有真正去统计这个数据但确实能在会议室里感觉到…"}, {"id": "6876229013589737480", "title": "极简 Node.js 入门系列教程 —— 4.2 初识 stream", "desc": "翻译过来流是 Node.js 中处理流式数据的抽象接口。 stream 模块提供了用于实现流接口的对象。基本就是用 stream 解释自己，第一次使用肯定不理解，但其实我们平时经常用到流 NodeJS 关于流的操作被封装到了 Stream 模块，这个模块也被多个核心模块所引用。…"}, {"id": "6844903858787860494", "title": "小程序构建发布系统", "desc": "现在是凌晨一点，可能是在夜里的时候人会变得比较感性，所以突然想到了王小波在黄金时代中写下的这段话，没有理由的在这篇技术文章中将它作为引言。希望大家在自己的黄金时代永远的生猛下去，什么也锤不了你。 书归正传，咱们上回书说到在我的第一版小程序发布系统被服务器拍倒在沙滩上后，我把目光…"}, {"id": "6844903587663839246", "title": "Node和http：一本通【附tcp实现http小代码】", "desc": "首先，HTTP 是基于 TCP 协议的，只有当tcp连接顺利建立时，浏览器客户端才能向服务器发送http请求。（详见TCP三次握手） 当TCP 让让一台pc端对端的连接上另一台pc后，两台机器之间可以互通数据，但这个数据并没有经过什么额外的加工，是纯粹的数据，即用户输入什么数据…"}, {"id": "6895985501318742029", "title": "Node系列-01-Node介绍以及运行脚本文件", "desc": "Node安装这里就不介绍了，这里对主要还是做个笔记，做个简单的介绍。 Node.js不是⼀⻔语⾔是⼀个js运⾏环境。 Node.js 是⼀个基于 Chrome V8 引擎的 JavaScript 运⾏环境。 Node.js 使⽤了⼀个事件驱动、⾮阻塞式 I/O 的模型，使其轻量…"}, {"id": "6844903697797873678", "title": "Node 案发现场揭秘 —— 如何利用 GC 日志不修改代码调优应用性能", "desc": "Node 案发现场揭秘 —— 如何利用 GC 日志不修改代码调优应用性能"}, {"id": "6844903735433363469", "title": " gulp-html-import，在html中引入外部html文件", "desc": "曾经学习PHP的时候，深深觉得include语法非常好用，后接触了ejs，发现里面也有类似的语法，能够方便地引入公共html文件；在学习了vue，react等框架以后，“组件化思想”更是在我脑海根深蒂固，再也无法忍受每个页面重复大量代码的原始方法。但是，在最最普通的静态html…"}, {"id": "6844903597474316302", "title": "手摸手带你入门ionic3(二)：环境配置", "desc": "学习一门新的计算机技能最基本的就是开发环境配置，顺利的情况下很简单，不顺利的时候能折腾人半天，令人头疼。从入门到放弃说的可能就是配置开发环境出错这个阶段吧。 ionic 开发必不可少 Node、Cordova 和 ionic 这三者。Android 和 Xcode 两者的环境配…"}, {"id": "6844903509729493000", "title": "在Node.js项目中，完成Lint代码检查的自动安装与强制运行", "desc": "前端团队在协作过程中，保障代码质量和代码风格的统一是非常必要的。使用 Lint 检查（如 Eslint 等）来规范代码是目前比较通用的方式。为了保证仓库中的代码都是通过 Lint 检查的，我们需要使每一个开发者在提交代码之前，强制对所提交的代码进行 Lint 检查，如果没有通过…"}, {"id": "6844903555770351629", "title": "Node.js系列-http", "desc": "最近一直忙着公司项目的事，战友们的留言也没空回复，博客也有段时间没有更新了，年底了就是一个的忙啊~~~（ps：同感的也给个赞吧） 现在前端的就是一直地更新一直有新的东西出来，什么ES2015，ES2016，到现在已经ES2018了，除了ES语法的更新迭代，JavaScript…"}, {"id": "6844903506327896078", "title": "Node.js合集之计时就是一切", "desc": "长期以来，一直有个问题很想解决，这周末我终于解决了一部分。那就是比照Node.js核心性能测试时间轴接口(Performance Timeline)的细节要求，实现了对其一些基本的支持。希望能很快全部落实。"}, {"id": "6844903623118290952", "title": "前端模块化（一）nodeJS中的CommonJS规范", "desc": "模块化，大家用vue，react等东西，都会接触到像exports，module.exports，export，export default，require，define，import等等字段，感觉很多人对于这些东西还是分不清，概念非常的模糊，便想着写这么一篇文章，一是帮助自己…"}, {"id": "6844903566465826829", "title": "ngrok+express解决本地环境中微信接口调试问题", "desc": "在微信项目的开发的时候，经常需要对微信jssdk提供的接口进行调试，比如说录音, 分享 ,上传图像等接口，但是微信jssdk要求绑定安全域名才能使用其提供的一系列功能 , 而在开发环境中使用localhost或者本地ip无法完成域名的认证和绑定, 所以无法在本地调试 。当然有一…"}, {"id": "6844903941474353159", "title": "NodeJs项目 CentOs linux服务器线上部署", "desc": "官网仓库下载好NodeJs的Linux包(我用的 node-v9.9.0-linux-x64.tar.gz)到本地然后通过FTP（filezilla）上传到服务器;或者可以直接在服务器终端使用 wget 命令下载。 一定要替换 “blob” 为 “raw”, 不然 wget 到…"}, {"id": "6844903843340222472", "title": "如何用NodeJS读取分析Nginx错误日志", "desc": "文件逐行读取：比如说进行日志分析。 自动完成：比如输入npm，自动提示\"help init install\"。 命令行工具：比如npm init这种问答式的脚手架工具。"}, {"id": "6844903747697672206", "title": "基于 PhantomJS + Node + Express + VueJS 1.x 的服务端渲染实践", "desc": "随着Vue 2.0的发布，服务端渲染一度成为了它的热卖点。在此之前，单页应用的首屏加载时长和SEO的问题，一直困扰着开发者们，也在一定程度上制约着前端框架的使用场景。React提出的服务端渲染方案，较好得解决了上述两个痛点，受到了开发者的青睐，但也因此多了一个抨击Vue的理由—…"}, {"id": "6844903507745751054", "title": "[V8]找出可能影响性能的代码（模式）", "desc": "现在你很可能会遇到不止一个响应迟钝的 app 或加载缓慢的页面。已经是 2017 年了，我们当然希望一切变的很快，但我们仍然会体验到恼人的延时。怎么会这样呢？难道我们的网络连接不是逐年变快的么？我们的浏览器性能不是也变的更好？我们将在下文中讨论这些。 事实上，浏览器和引擎越来越…"}, {"id": "6844903581334634510", "title": "Event Loop - JavaScript和node运行机制", "desc": "在H5中新增了一个后台运行的线程Web Workers,但是这个线程是受主线程控制的并且不能操作DOM。 存放在堆(heap)内存中的都是对象，栈里面的变量实际保存的是一个指针，这个指针指向堆(heap)内存中的对象。 需要注意的是，setTimeout()只是将事件插入了\"任…"}, {"id": "6874496814360297479", "title": "理论与API相结合理解Node中的网络通信", "desc": "TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这时报文首部中的同部位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需…"}, {"id": "6844903827460603912", "title": "使用 node 模拟请求接口", "desc": "使用 Vue 写项目肯定会遇到一个问题，如何模拟服务端请求数据，那这就需要用到 node.js了。这篇我们讲解一下如何使用 node.js 模拟服务器端请求数据。"}, {"id": "6844903506361450504", "title": "webpack配置之后端渲染", "desc": "2017年, vue, react, angular 已经占据前端的主流, 不得不承认这也是前端的未来发展方向. 但是后端渲染的开发方式仍然很常见, 不管是个人项目还是商业项目, 后端渲染搞起来真是糙猛快. 但是借着前端发展的东风, 后端渲染也有很大的改进空间. 这里就介绍一下…"}, {"id": "6908725575150469134", "title": "nodejs系列教程（1）", "desc": "1、安装用户量很多适合高并发场景可实现功能很多安装Node稳定版本node-v看版本app.js里面写一句使用nodeapp.js打印出来2、http模块url模块php需要apacheNginx的H"}, {"id": "6932378519917821959", "title": "redis在Node中的简易应用", "desc": "在编写【日程安排吧】微信小程序中有使用到 redis 进行缓存，刚好有同学问道如何在node中使用redis；现简单介绍一下在 nodejs 中如何使用 redis，以及如何对 redis 的读取进行简单的封装。"}, {"id": "6844903881814573063", "title": "保护 Node.js 项目的源代码", "desc": "SaaS（Software as a Service，软件即服务），是一种通过互联网提供软件服务的模式。服务提供商会全权负责软件服务的搭建、维护和管理，使得他们的客户从这些繁琐的工作中解放出来。对于许多中小型企业而言，SaaS 是采用先进技术的最好途径。 然而，对于大型企业而言…"}, {"id": "6844903565287260168", "title": "如何开发一个Node脚手架进阶版（Vue-cli学习篇）", "desc": "通过对Vue-cli 2.9.2的源码进行分析，解决相关问题。 如果没有看过之前一篇博客的，或者对Node.js的脚手架没有了解过的同学，推荐先看上一篇：如何实现一个简单的Node.js脚手架。 chalk是一个日志的样式库，可以在终端上面调整日志的样式。 通过说明文档，我们可…"}, {"id": "6844903509020639240", "title": "《Node.js设计模式》基于回调的异步控制流", "desc": "本系列文章为《Node.js Design Patterns Second Edition》的原文翻译和读书笔记，在GitHub连载更新，同步翻译版链接。 Node.js这类语言习惯于同步的编程风格，其CPS风格和异步特性的API是其标准，对于新手来说可能难以理解。编写异步代码…"}, {"id": "6844903812247846925", "title": "使用 nodejs 写爬虫(一): 常用模块和 js 语法", "desc": "通过在 async 函数中使用 await + promise 的方式来组织异步代码就像是同步代码一般，非常的自然和有助于我们分析代码的执行流程。 在 node 中， fs 模块是一个很常用的操作文件的 native 模块，fs (file system) 模块提供了和文件系统…"}, {"id": "6994837758933991431", "title": "Windows 中 Node.js 中 nvm 的安装配置和使用", "desc": "nvm 的安装还是比较简单的，主要是需要完成下载安装和路径配置即可。 首先可以使用命令 nvm 来查看当前系统中有没有安装 nvm。 下载安装 可以访问下面的地址来找到最新的 nvm 的安装版本： R"}, {"id": "6844903630571569160", "title": "深入理解Node.js-背景了解", "desc": "Node Standard Library 是我们每天都在用的标准库，如Http, Buffer 模块。 Node Bindings 是沟通JS 和 C++的桥梁，封装V8和Libuv的细节，向上层提供基础API服务。 这一层是支撑 Node.js 运行的关键，由 C/C++ …"}, {"id": "6844903586795618318", "title": "eggjs插件编写", "desc": "npm包方式package.jsonname和eggPlugin字段项目中使用插件和配置{app_root}/app/config/plugin.js{app_root}/app/config/con"}, {"id": "6844903555355279367", "title": "ShadowNode: 以更轻量级的方式使用 Node.js", "desc": "从名字来看，他可不是一个 Node.js 的 C++ Addon，而是可以运行 Node.js 程序的另一个运行时（Runtime），相比 Node.js，具有更快的启动速度以及更小的内存占用、更加节省内存的模块加载方式！原来一个 Node.js 应用需要好几十M的运行时内存，…"}, {"id": "6844903614893260807", "title": "手写node可读流之流动模式", "desc": "可读流之流动模式，这种流动模式会有一个\"开关\"，每次当\"开关\"开启的时候，流动模式起作用，如果将这个\"开关\"设置成暂停的话，那么，这个可读流将不会去读取文件，直到将这个\"开关\"重新置为流动。 打开文件，打开文件成功，将触发open事件，如果打开失败，触发error事件和clos…"}, {"id": "6844903727204139021", "title": "[译] 代码整洁的 JavaScript", "desc": "将源自 Robert C. Martin 的 Clean Code 的软件工程原则适配到 JavaScript 。 这不是一个代码风格指南， 它是一个使用 JavaScript 来生产 可读的， 可重用的， 以及可重构的软件的指南。 这里的每一项原则都不是必须遵守的， 甚至只有…"}, {"id": "6876970733243727886", "title": "极简 Node.js 入门系列教程 —— 4.3 可读流", "desc": "可读流是生产数据用来供程序消费的流。常见的数据生产方式有读取磁盘文件、读取网络请求内容等，看一下前面介绍什么是流用的例子： 通过简单的一句话可以把控制台的输入打印出来，process.stdin 生产数据的方式是读取用户在控制台的输入。 回头再看一下对可读流的定义：可读流是生产…"}, {"id": "6906742243680485390", "title": "Node.js & MongoDB 入门教程与使用", "desc": "最近在项目中用到了mongodb，然后在查阅资料的过程中，就感觉到了想要的资料文件都零零碎碎的。东一块西一块。很是不方便，今天就来整理一下关于node是如何操作使用mongoDB的，外加一些相关的配置详情介绍。话不多说，开整！ 1. node安装步骤 （简单带过） 下载就要看各…"}, {"id": "6844903506722160647", "title": "ES6 实现自己的 Promise", "desc": "​ 从去年ES2015发布至今，已经过去了两年多，ES2015发布的新的语言特性中最为流行的也就莫过于Promise了，Promise使得如今JavaScript异步编程如此轻松惬意，甚至慢慢遗忘了曾经那不堪回首的痛楚。其实从JavaScript诞生，JavaScript中..."}, {"id": "6844903798905765901", "title": "逐行分析Koa v1 中间件原理", "desc": "在上一篇文章里，已经对v2版本的koa中间件原理做了逐行分析，讲清楚了它的流程控制和异步方案。 但是，仍然有大量的基于koa的项目、框架、库在基于v1版本的koa在工作，而它的中间件是Generator函数，其运行机制与v2版本的koa中间件有比较大的不同。 因此，有必要解释清…"}, {"id": "6844903719209795592", "title": "[英] V8 更快的 async functions and promises", "desc": "Asynchronous processing in JavaScript traditionally had a reputation for not being particularly fast. To make matters worse, debugging live…"}, {"id": "6844903559838842894", "title": "Google发布浏览器自动化工具Puppeteer 1.0", "desc": "Puppeteer是一个headless自动化工具，它同时也是Chrome和基于Chromium网页浏览器的API。Puppeteer利用Node.js和DevTools协议，是一款良好的Selenium WebDriver替代品。"}, {"id": "6844903648959397896", "title": "JavaScript异步编程史：回调函数到Promise到Async/Await", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习 简单地说，回调函数(callback function)就是给另外一个宿主函数做参数的函数。回调函数在宿主函数内执行，执行结果返回给宿主函数。 现在，我们来实现一个回调函数，模拟在游戏中得分升级。…"}, {"id": "6844903997451534343", "title": "Angular开发需要了解的rxjs操作符实践", "desc": "本地使用环境为rollup+rxjs，具体的rollup配置，请参考另一篇文章，这里不再赘述。 版权声明： 本文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。"}, {"id": "6922365516812124168", "title": "原型与原型链", "desc": "大部分“函数数据类型”的值都具备“prototype（原型/显式原型）”属性，属性值本身是一个对象。浏览器会默认为其开辟一个堆内存，用来存储当前类所属实例，可以调用的公共的属性和方法，在浏览器默认开辟的这个堆内存中「原型对象」有一个默认的属性“constructor（构造函数/…"}, {"id": "6844903726361083911", "title": "基于Electron + nodejs + 小程序 实现弹幕小工具（终篇）", "desc": "首先说明一下，本文无干货，不喜勿喷。 本文是弹幕小工具系列的最后一篇文章，主要是做一下归档和总结。 本系列，我们从零开始实现一个简单可用的弹幕小工具，目前已部署在线上环境，有兴趣的朋友可以下载体验，扫码即用，十分方便。当然，对实现有兴趣的也可以查阅源码。 。。。 鲁迅曾经说过，…"}, {"id": "6844903535994224654", "title": "iKcamp团队制作｜基于Koa2搭建Node.js实战（含视频）☞ 环境准备", "desc": "由于 koa2 已经开始使用 async/await 等新语法，所以请保证 node 环境在 7.6 版本以上。 首先，创建一个目录 koa2-tutorial/ 用来存放我们的代码。然后开始初始化项目： 成功输出 Hello World，说明环境正常。至此，我们的准备工作完成…"}, {"id": "6844903544529616910", "title": "设计模式 in real world - 反应器模式(Reactor Pattern)", "desc": "从最早看的《Head First 设计模式》到后面看的一些书，里面对于设计模式的讲解大部分都是从抽象概念介绍一个设计模式是什么和一些例子。这些例子大多都是买咖啡(head first真的喜欢以咖啡举例)，玩具鸭子之类的。我也看过类似《Javascript设计模式与开发实践》，里…"}, {"id": "6844903975809253383", "title": "Node - Egg.js 框架从入门到放弃系列（3）- 主要的几种传参方式", "desc": "因为POST请求不能直接在浏览器模拟，所以接下来我们会借助了接口神器 postman 来测试接口。 这两种的调用方式与上面的请求大同小异，需要的童鞋可以看我在github放出的源码。 这节如要熟悉请求方式，所以。。 PS：仓库手误删除了，后面会补上。由于最近在忙项目，所以文章更…"}, {"id": "6844903634799427592", "title": "Node.js项目经历", "desc": "上一篇文章提到了我们项目中使用了Node，有兴趣的可以看下 刘卿：一个前端的自我回顾​zhuanlan.zhihu.com 随着前端组件化方案的落地，整体的前端效率得到了充分的提高，并且当前是有一层Node在做代理层的状态下，研发的瓶颈逐渐转移到php这一端。表现出来的是： 迭…"}, {"id": "6844903801435095047", "title": "Nodejs教程25：启动器", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 使应用不间断运行，如果不使用启动器，命令行窗口一旦关闭，或者出现报错，应用就会停止运行，启动器会帮助应用自动重启。 若出现服务器重启，启动器会自动启动应用，不需要手动操作。 常用的启动器有forever、pm2等…"}, {"id": "6921645474747269127", "title": "可视化通过在地图上绘制矩形获取当前区域osmbuildings数据", "desc": "在做可视化项目的时候,有一个需求就是让用户选择一个范围,自动根据选中的范围生成3d地图,3dtiles数据是一个老大难的问题,于是我通过node实现了一个小工具,从OSMBuildings获取3d楼层"}, {"id": "6932854002933563405", "title": "详解node中引入模块的原理", "desc": "1. 模块机制 1. 模块机制 CommonJS规范为JavaScript制定了一个美好的愿景——希望JavaScript能够在任何地方运行。 CommonJS对模块的定义十分简单，主要分为模块引用、模块定义和模块标识3个部分。 node在实现中并非完全按照connonjs规范…"}, {"id": "6844903764126597127", "title": " [NodeJs系列]NodeJs模块机制", "desc": "本节主要基于NodeJs源码，对其模块的实现做一个简要的概述，如有错漏，望诸君不吝指正。 路径分析其实就是模块查找的过程，由_resolveFilename函数实现。 这些在官方文档中已经阐述的很清楚了，这里就不再赘述。 如果模块存在，那么_resolveFilename会返回…"}, {"id": "6844903632467410952", "title": "Deno 兼容浏览器具体指的是什么？", "desc": "Deno 里面有一句描述：\"Aims to be browser compatible\"，可以看到 Deno 的目标是兼容浏览器。那么这里的兼容浏览器到底如何是什么意思呢？ 我简单谈谈我的理解吧。 首先这里的兼容性肯定不是 Deno 直接在浏览器端运行。因为 Deno 是一个和…"}, {"id": "6844903812042326023", "title": "使用 nodejs 写爬虫(-): 常用模块介绍和前置JS语法", "desc": "通过在 async 函数中使用 await 去调用 promise 的方式来组织异步代码就像是同步代码一般，非常的自然和有助于我们分析代码的执行流程。 在 node 中 fs 模块是一个很常用的操作文件的 native 模块，fs (file system) 模块提供了和文件系…"}, {"id": "6844903504218161165", "title": "Napa.js - 微软的多线程 JS 开源库", "desc": "Napa.js: a multi-threaded JavaScript runtime"}, {"id": "6844903641850052616", "title": "简单理解promise", "desc": "异步编程的一种解决方案。是一个构造对象，代表一个异步操作。有3种状态： pending（进行中）、fulfilled（已成功）、rejected（已失败）。 状态变更： pending -> fulfilled、pending -> rejected。 状态变更后就永久保持这个…"}, {"id": "6844903606886334477", "title": "Webpack 打包优化之体积篇", "desc": "谈及如今欣欣向荣的前端圈，不仅有各类框架百花齐放，如Vue， React， Angular等等，就打包工具而言，发展也是如火如荼，百家争鸣；从早期的王者Browserify, Grunt，到后来赢得宝座的 Gulp， 以及独树一帜的 fis3, 以及下一代打包神器 Rollup…"}, {"id": "6909461633962082311", "title": "nodejs 3分钟学会系列教程（6） 静态web服务器搭建（http url path fs模块） ", "desc": "1、先说最简单的http服务1）我第一篇里面有写可以安装在vscode尚待你敲一下nodesn安装第二个就行然后敲一下node可以得到下面的代码可以直接访问并且打印出结果2）新建一个app-1.js这"}, {"id": "6844903577169690638", "title": "JS异步编程的浅思", "desc": "最近使用egg写一个node项目时，被它的异步流控制震惊的泪流满面。话不多说，先上代码体验一下。 以上代码是付款的简易流程，先找人，再找订单，最后支付。其中找人、找订单和支付都是异步逻辑。写出这段代码的时候，回忆把我带到了callback的时代。 callback是我们最熟悉的…"}, {"id": "6907249286883328013", "title": "Node的模块系统", "desc": "1. 什么是模块 模块的优点: 有了模块,我们就可以非常方便地使用这些模块,因为模块总是完成了特定的功能,如果要修改模块中个功能,那么只需要修改这个自己的模块文件即可,模块独立于每一个文件中,不影响模块的代码。模块独立于每一个文件中,不影响模块的代码 2. 模块化 ③ IIFE…"}, {"id": "6844903792773693447", "title": "Node 深入Stream（2）", "desc": "1. Node.js 中有四种基本的流类型： Readable - 可读的流 (例如 fs.createReadStream()). Writable - 可写的流 (例如 fs.createWriteStream()). Duplex - 可读写的流 (例如 net.Sock…"}, {"id": "6844903600628432903", "title": "造了个 Egg.js 的轮子 - Less.js", "desc": "基于 Koa.js 的 Node.js MVC 框架，参考了 Egg.js 的部分思想。"}, {"id": "6899040154431225864", "title": "从前端的角度理解前后端交互的基本流程", "desc": "koa-static-cache是用来设置静态文件资源代理的，详情可参考官网https://www.npmjs.com/package/koa-static-cache 。 koa-router可以用来处理动态路由。 koa-body是对从服务器中post请求到服务器的数据进行…"}, {"id": "6948595581543514126", "title": "js模块化", "desc": "js承担的任务越来越重。其它语言像Java有包等模块化技术。 CommonJS是随着node js诞生服务端的模块化解决方案。主要是通过require来加载依赖项，通过exports或者module.exports来暴露接口或者数据的方式。 定义模块。根据CommonJS规范，…"}, {"id": "6844903616948469773", "title": "从一道执行题，了解Node中JS执行机制", "desc": "pending callback：这个阶段执行几乎所有的回调( 网络、流、tcp错误... )。除了，close 回调、定时器回调、setImmediate 回调这3个规定好的阶段"}, {"id": "6922369516756271111", "title": "node学习之http(一)简介", "desc": "1.http服务端大概代码执行流程：http.createServer()返回新建的http.Server实例。http.Server继承自net.Server。requestListener是一个自"}, {"id": "6844903601089806350", "title": "我们谈一谈CocosCreator", "desc": "我们创建一个场景时，默认会创建一个Canvas节点，之后我们可以在Canvas下创建子节点或在Canvas同级创建兄弟节点。"}, {"id": "6844903569947099149", "title": "Rize - 一个可以让你简单、优雅的使用 puppeteer 的 Node.js 库", "desc": "Rize 是一个可以让你简单、优雅的使用 puppeteer 的 Node.js 库。通过使用这个库不必写太多的 async/await 等烦琐代码，同时提供简单的断言方法用于测试。（欢迎前往 GitHub 并给个 star）"}, {"id": "6844903949909131278", "title": "Nodejs中监控事件循环异常", "desc": "最近在学习 libuv，也了解了一些 Node.js 中使用 libuv 的例子。当然，这篇文章不会去介绍 event loop，毕竟这些东西在各个论坛、技术圈里都被介绍烂了。本文介绍如何正确使用 Event loop，以及即使发现程序是否异常 block。 event loo…"}, {"id": "6844903583700221959", "title": "JS中的九个console命令以及用法", "desc": "console.dir()可以显示一个对象所有的属性和方法。 console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。 效果和上一个类似。 console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条…"}, {"id": "6860056713748283405", "title": "编写一个NodeJS版的Laravel模版渲染引擎", "desc": "这无形之中就给自己增加了不少的工作量。 在我通过初步的尝试之后，还是选了MVC的模式，后续再考虑是否迭代成别的模式。 但是这依然不是我心目中最佳的选择，这可能跟我的工作经验有关系吧，先入为主。 在这篇文章的指引下了解了引擎的基本思想，然后就动手开撸自己的定制引擎。 然后再通过后…"}, {"id": "6844903587923886087", "title": "浏览器/nodeJS中的EventLoop", "desc": "代码调用先进堆栈，堆栈是代码的总执行站，堆栈整个执行的过程中会先将微任务，宏任务放到相应的队列中，事件提出来等待触发，等到总执行站中的代码空了，会先看微任务队列中有没有，如果有就会放到总执行站中执行，然后在看宏任务队列中有没有。"}, {"id": "6844903592521007111", "title": "Nodejs在实现中用了哪些奇技淫巧？", "desc": "nexttick 空间换时间，当构建一个复杂的 javascript 对象时，我们可以使用对象池的方法进行对对象的重用，能够大量减少系统压力，虽然说多费一些内存，但对现阶段来说，内存几乎是不值钱的。"}, {"id": "6844903575554883592", "title": "koa@2.5.0源代码解读", "desc": "koa是由Express原班人马开发的一个nodejs服务器框架。koa使用了ES2017的新标准：async function来实现了真正意义上的中间件（middleware）。koa的源代码极其简单，但是借由其强大的中间件扩展能力，使得koa成为了一个极其强大的服务器框架。…"}, {"id": "6844903552343605261", "title": "JavaScript异步发展史", "desc": "JavaScript 的所有网络操作，浏览器事件，都必须是异步执行。 正如我们所知道的那样，在JavaScript中，异步编程方式只能通过JavaScript语言中的一等公民函数才能完成：这种方式意味着我们可以将一个函数作为另一个函数的参数，在这个函数的内部可以调用被传递进来的…"}, {"id": "6844903892883357710", "title": "深入理解异步编程的原理", "desc": "本文不是介绍 API，而介绍了异步编程的几种形式，发布-订阅，promise，await，以及它们之间的关系。也就是利用 JavaScript 实现发布-订阅模式，再利用发布-订阅模式来实现 promise，最后利用 promise 实现 await。以及穿插在之中的脉络，关联。"}, {"id": "6844903952631201799", "title": "实现 Javascript 版本的 `Laravel` 风格参数验证器", "desc": "required 这代表 title 参数必传，如果没有传递 title 参数，或 title 参数的值为：null、空字符串、空数组、空对象，则验证不会通过。 以上验证规则，使用符号 | 分割，看起来很紧凑。 我们参照上面的这些内容，设计一个 JavaScript 版本的验证…"}, {"id": "6844903502007762951", "title": "《Node.js在CLI下的工程化体系实践》成都OSC源创会分享总结", "desc": "关键点在于package.json里面的bin字段。模块全局安装，对于类unix系统，在/usr/local/bin目录创建软链接；对于windows系统，在C:\\Users\\username\\AppData\\Roaming\\npm目录创建软链接。 模块局部安装，会在项目内的.…"}, {"id": "6844903614272503815", "title": "从一个故事开始聊聊字符编码", "desc": "请不要误会，联通和移动和本篇文章所说的编码确实没什么关系，但请出联通和移动帮忙做个小实验，再来仔细说说编码。 在Windows系统下，在桌面上右键新建一个记事本文件，打开它输入“联通”两个汉字，Ctrl+S保存并关闭。 好吧，再次新建一个文件，这回输入“移动”保存再试试。神奇，…"}, {"id": "6844904048320053255", "title": "《深入浅出Node.js》学习笔记（七）", "desc": "利用Node可以十分方便的搭建网络服务器。 Node提供了net、dgram、http、https等4个模块，分别用于处理TCP、UDP、HTTP、HTTPS，适用于服务器端和客户端。 1. 构建TCP服务 TCP服务在网络应用中十分常见，大多数的应用都是基于TCP搭建而成的。…"}, {"id": "6844903688331329550", "title": "NodeJS 进阶 —— Koa 源码分析", "desc": "原创文章分享"}, {"id": "6844903616000557070", "title": "5分钟实现一个Koa", "desc": "最终要实现的效果是实现的一个5min-koa模块，直接将代码中第一行替换为const Koa = require('./5min-koa');，程序可以正常执行就可以了。 这样就完成了一个最基本的Context，别看小，已经够用了。 每一次有新的请求，都会创建一个新的ctx对象…"}, {"id": "6844903696942235656", "title": "详解JavaScript中的this", "desc": "相信javascript中的this会使很多同学在工作学习中产生困惑，笔者也同样是，经过阅读各种资料及实际工作中的应用，做了以下梳理，主要内容包括长期以来大家对this的错误认识及this的绑定规则，箭头函数、实际工作场景中遇到的问题，希望对于有此困惑的你能有所帮助。 下面示例…"}, {"id": "6844903827032768519", "title": "关于node.js中流的理解", "desc": "流是一个在node中与流数据工作的抽象接口，stream模块提供了一个基本的API，使得比较容易创建一个实现了流的接口的对象。node.js中提供了很多的流对象，例如，一个发向http服务器的请求，process.stdout都是流的实例。 流可以是可读的，可写或者两者兼备。所…"}, {"id": "6844903809601241096", "title": "Node.js中的事件循环，Timers和process.nextTick() 的探索之路", "desc": "事件循环就是node.js去做一些非阻塞I/O操作，那么问题来了，非阻塞操作又是什么呢？有一个事实对于js开发者都熟知的是，js是单线程的，也就是说在一段时间内只能够处理一种任务，其他任务要执行需要等待当前任务执行完之后再开始。 由于大部分的现代内核都是多线程的，它们能够处理不…"}, {"id": "6844903753192046600", "title": "node扩展 memwatch分析", "desc": "分析的版本为@airbnb/memwatch。首先从binding.gyp开始入手: 这份配置表示其生成的目标是memwatch.node,源码是src目录下的heapdiff.cc、init.cc、memwatch.cc、util.cc,在项目编译的过程中还需要include…"}, {"id": "6844903504931192846", "title": "fish-ui A Vue.js 2.0 UI Toolkit for Web.", "desc": "一个基于vue2, semantic开发的后台应用组件库"}, {"id": "6844903648208633863", "title": "一个基于 Node.js 的 LiveReload Server 工具 : Pavane ", "desc": "Pavane 是一个基于 Node.js 的 LiveReload Server 工具。提供修改文件自动刷新浏览器页面的能力。 Pavane 既可以作为一个 Node 模块使用，也可以作为一个命令行工具全局使用，还可以在其他 web 服务上使用"}, {"id": "6844904021593948167", "title": "Node学习笔记 函数自调用和crud增删改查", "desc": "处理post响应请求在处理get请求方式上，express可以使用req.query获得请求体数据，但是在post请求方式express并没有提供获得对应请求体的方法若需要使用post处理响应请求，需"}, {"id": "6844903545506889742", "title": "使用Node.js开发以太坊ERC 20标准的代币", "desc": "目前众多的山寨币都是基于以太坊开发出来的ERC 20标准代币，这也是为什么我要研究这个的原因，想看明白这些山寨币的潜在价值，从纯技术的角度来说，这些山寨数字货币似乎都没有太大的价值，因为随着以太坊工业级的开发平台形成，个人也可以开发和发行代币的，这篇文章就是要讲一讲如果使用No…"}, {"id": "6943871907733176357", "title": "通过集群提升 Node.js 性能", "desc": "在构建生产应用程序时，你通常会寻找优化其性能的方法。在这篇文章中，我们使用一种方法，改进 Node.js 应用程序处理工作负载的方式。 Node.js 应用是运行在单线程的，这意味着在一个多核系统（现在大多数计算机都是这样）上，并不是所有的内核都会被应用程序充分利用。为了使用其…"}, {"id": "6844903585960951816", "title": "Node.js EventEmitter 笔记", "desc": "说起Node中几个最重要的模块，那么events模块一定在其中，在Node中很多很多的其他模块都是基于或者依赖于events模块。 所以，两种方式都是可以的，但是感觉按照官方的方式会更好。 当 EventEmitter 实例中发生错误时，会触发一个 'error' 事件。 这在…"}, {"id": "7006120461553631262", "title": "利用http-server开启一个本地服务预览项目", "desc": "给大家分享一个本地服务器插件---http-server 你可以在你的电脑上通过它开一个本地服务，然后把你的项目放在上面运行。 大家作为前端开发，都有装node.js,然后我们在终端cmd运行 npm"}, {"id": "7001321000742682632", "title": "在手机上玩一把nodeJs", "desc": "有没有想过在手机上使用Linux环境，执行node程序？ 1.下载安装Termux Termux是一款linux模拟器。开源，且运行时不需要root，工作于Android终端，支持apt管理软件包，完"}, {"id": "6981249055070355492", "title": "这些node开源工具你值得拥有(下)", "desc": "通过阅读 awesome-nodejs 库的收录，我抽取其中一些应用场景比较多的分类，通过分类涉及的应用场景跟大家分享工具 1.图形处理 🖼️ 1.1 应用场景1: 如何实现给图片做裁剪、格式转换、旋"}, {"id": "7000303653940641828", "title": "如何基于 Node.js 开发一个完整的项目", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 本文我们将围绕Node.js为核心，开发一个具有前端页面和后端存储的完整应用。"}, {"id": "6921493257578872845", "title": "【Node】使用 koa2 实现一个简单JWT鉴权", "desc": "全称 JSON Web Token， 是目前最流行的跨域认证解决方案。基本的实现是服务端认证后，生成一个 JSON 对象，发回给用户。用户与服务端通信的时候，都要发回这个 JSON 对象。 用户向服务器发送用户名和密码。 服务器验证通过后，在当前对话（session）里面保存相…"}, {"id": "7000364283364114440", "title": "node + TS服务端开发实践", "desc": "主要技术栈：框架选择express，TS语言开发，TS在JS基础上增加了多种数据类型，包括其提供的接口编程、类型检查等特性，非常适合编写一套简单的服务端程序。"}, {"id": "6999645386725949476", "title": "做一个CLI版的时间管理工具（15）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6844903680978714638", "title": "[electron]终极奥义 五千字教程丢给你", "desc": "本文包含打包、自动更新、简易API、调试、进程通信等相关知识点，内容较多，可能会引起不适，请酌情查看（手动滑稽）。 electron是由Github开发，是一个用Html、css、JavaScript来构建桌面应用程序的开源库，可以打包为Mac、Windows、Linux系统下…"}, {"id": "6844903635017531405", "title": "VS Code 折腾记 - (14) 再来推荐一波大前端适用系列 (Node/React/Vue/小程序/主题/代码体验等) 的插件", "desc": "依旧是那句话,好的插件需要作者去创造,时间去迭代... Markdown Header Coloring : 给Markdown的标题区域添加一个亮瞎眼的颜色... 这里也不比较其他编辑器乃至IDE了,好不好用,用了就知道。 有不对之处请留言,会及时更正..."}, {"id": "6997958727856816158", "title": "用node.js从零开始去写一个简单的爬虫", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 如果你不会Python语言，正好又是一个node.js小白，看完这篇文章之后，一"}, {"id": "6844903783722401800", "title": "用Node + EJS写一个爬虫脚本每天定时女朋友发一封暖心邮件", "desc": "自从用邮箱注册了很多账号后，便会收到诸如以下类似的邮件,刚开始还以为是一张图片，后来仔细一看不是图片呀，好像还是HTML呀，于是好奇宝宝我Google一下，查阅多篇资料后总结出怎么用前端知识和Node做一个这样的“邮件网页”。 1. 如何获取天气预报和ONE上的data？ 答：…"}, {"id": "6844904150291972110", "title": "Node开发博客服务", "desc": "​ 因为最近打算自己搭建一个自己的博客系统，用来记录日常的学习和提升一下写作水平，所以能就打算自己搭建一下前后端项目。在网上找了下，也没有找到合适（现成）的项目，所以就打算自己动手来搭建一下。这篇文章主要描述如何搭建一个node的API接口服务。 网上的node框架也挺多的，用…"}, {"id": "6992037152456474661", "title": "nodejs爬虫——某平台的租房数据", "desc": "每到毕业季就是租房季，一房难求，加价不加量；租房信息中充斥着大量中介、二房东； 当拿到所有数据后，想怎么玩就怎么玩，比如数据可视化"}, {"id": "6972196093551443982", "title": "Node.js 入门系列（八）Koa 框架", "desc": "来看看 Koa 框架和 Express 框架有什么不同，然后用 Koa 框架对石头剪刀布游戏进行改造吧！"}, {"id": "6844903700905852936", "title": "socket.io让每个人都可以开发属于自己的即时通讯", "desc": "其实这个过程从用户的角度来说，其实无非就是连接上了，发送消息呗。"}, {"id": "6844903580860678158", "title": "面试分享：2018阿里巴巴前端面试总结 | 掘金技术征文", "desc": "脑子混了记得不多了，记得多少就记录多少吧。。。。 最开始的思路是用定时器实现，最后没有想的太完整，面试官给出的答案是用requestAnimationFrame。 由于之前没有用过这个 API 所以是现学的。 注：requestAnimFrame 和 定时器一样也头一个类似的清…"}, {"id": "6847902225025466376", "title": "详解前端脚手架开发排坑全指南【前端提效必须上干货】", "desc": "我们业务中可以通过Vue-cli脚手架快速生成vue项目，同样我们也可以开发一款cli脚手架用于快速生成我们日常提炼出来的业务基础模型/架构。本文将详细讲解脚手架如何开发，所涉及到的技术细节和坑以及各种第三方包的讲解，确保即使是小白同学也可以照着做出来自己的cli。 言归正传，…"}, {"id": "6999546356746420231", "title": "node开发必备基础知识", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 前言 JavaScript 是世界上最流行的编程语言之一。如今，它为数以百万计的"}, {"id": "6844904084709834766", "title": "node.js BFF开发8个月的心路历程", "desc": "忙碌的日子总是过得特别快，回头一看，我已经做node.js BFF开发8个月了，基本上没写过web前端的事情，做了大半年，写篇文章来记录一下我这大半年的心路历程。 其实我刚进公司那会是做前端的，做B端前端开发，用react画页面，系统是一个持续做了一年多的，超过上百个模块的系统…"}, {"id": "6871424158052384782", "title": "在线IDE开发入门之从零实现一个在线代码编辑器", "desc": "3年前在AWS re:Invent 大会上AWS 宣布推出 Cloud9, 用于在云端编写、运行和调试代码，它可以直接运行在浏览器中，也就是传说中的 Web IDE。3年后的今天随着国内云计算的发展, 各大云计算服务厂商都在部署自己的WEB IDE, 而且已经有非常成熟的落地方…"}, {"id": "6844903816454733837", "title": "Nodejs教程30（完结）：PM2入门", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 PM2是常用的node进程管理工具，它可以提供node.js应用管理，如自动重载、性能监控、负载均衡等。同类工具有Supervisor、Forever等。 使用PM2需要npm全局安装。 本文的测试项目直接选用上…"}, {"id": "6864520204731285511", "title": "初探视频原理和FFmpeg", "desc": "短视频大行其道的年代，作为程序员势必需要了解：视频编辑背后的原理和技术。本文简略的描述了视频的组成原理和常用的视频编辑工具，以及在 NodeJS 中的用法。 想要了解视频原理，首先应该从图像原理开始说起。 1. 像素 图像画面由一个数字序列表示的图像中的一个最小单位色块，被称之…"}, {"id": "6844904101331877895", "title": "从发布订阅模式入手读懂Node.js的EventEmitter源码", "desc": "前面一篇文章setTimeout和setImmediate到底谁先执行，本文让你彻底理解Event Loop详细讲解了浏览器和Node.js的异步API及其底层原理Event Loop。本文会讲一下不用原生API怎么达到异步的效果，也就是发布订阅模式。发布订阅模式在面试中也是高…"}, {"id": "6982226661081088036", "title": "NodeJs 网络与流", "desc": "前言 开始写一些博客主要是在看完代码后再温故总结一遍, 也是为了后面回头也能查阅。本系列会从官网的例子出发, 尽可能以链路追踪的方式记录其中源码核心模块的实现, 本篇例子来源 libuv - Netw"}, {"id": "6968769260965330981", "title": "Node 模块解析", "desc": "本文简单介绍了nodejs的模块加载，并分析了各种模块加载方式的原理、加载顺序、循环依赖等内容。。。"}, {"id": "6844903670291628046", "title": "带你彻底弄懂Event Loop", "desc": "我在学习浏览器和NodeJS的Event Loop时看了大量的文章，那些文章都写的很好，但是往往是每篇文章有那么几个关键的点，很多篇文章凑在一起综合来看，才可以对这些概念有较为深入的理解。 于是，我在看了大量文章之后，想要写这么一篇博客，不采用官方的描述，结合自己的理解以及示例…"}, {"id": "6992837459985989662", "title": "Node 02--Node中的模块系统与响应中文编码", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 require的加载顺序 a.js b.js 执行结果 Node中没有全局作用域只有模块作用域 a.js b.js 执行结果 使用expor"}, {"id": "7000909266269765640", "title": "了解使用node项目中的Koa", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 简介 koa是由Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的Web框架。使用 koa编写web应用，可以免除"}, {"id": "6861495065378832398", "title": "从 0 到 1 node 项目管理系统：搭建基础平台（下）", "desc": "从第一篇看到目前这篇博客的同学，如果团队缺少合适的项目管理或者想练习 node 的情况下，可以上手试试看，一般关键的代码，我有直接贴在博客上（大部分复制就能用啊）。 后面的内容就是贴合业务直接 curd 代码，基础篇到此结束。 下一篇就会出构建篇，团队可以结合自己项目实际情况增…"}, {"id": "6982894222173011976", "title": "Node加解密原理和功能探索总结", "desc": "目录 名词解释 方法实现 实战演练 名词解释 下面就文中涉及到的各个加密方法进行概念解释。 AES，密码学中的高级加密标准（Advanced Encryption Standard，AES），又称Ri"}, {"id": "6914547246759411720", "title": "Node.js从0到1", "desc": "Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent. ightweight and efficent. 轻量和高效 ... 注意：文件名不要用nod…"}, {"id": "6913498911973834759", "title": "Node.js process 模块学习指南", "desc": "process是node的全局模块，作用比较直观。可以通过它来获得node进程相关的信息，比如运行node程序时的命令行参数。或者设置进程相关信息，比如设置环境变量。 运行命令 NODE_ENV=dev node argv.js --env production，输出如下。（不…"}, {"id": "6976871479665229854", "title": "Node.js 知识体系(七)-异步编程之 Promise", "desc": "这是我参与更文挑战的第二十七天，活动详情查看:更文挑战 什么是 Promise Promise 是一种异步编程的解决方案！ 当前事件循环得不到的结果，但未来的事件循环会给到你结果 是一个状态机 pen"}, {"id": "6989991970202452005", "title": "Node.js 异常处理以及请求上下文隔离", "desc": "而node.js这里比较年轻，而开发人员就更年轻了，大家都没有太多的经验，也没有太多的参考。 1. 单进程 + PM2 最简单的方式http处理方式，可以经常见到这样的模式： 简单处理请求，没有任何的"}, {"id": "6844903535889367054", "title": "搭建一个前端监控系统,不再错过BUG", "desc": "还记得在我上一家公司中，某一大佬做了一个监控系统，牛逼哄哄，挺想研究他到底是怎么搞出来的。当然我们也不是拍拍脑袋干活的人，总不能人家咋干我们就咋干。下面先就介绍下，这样的平台到底有啥好处。 首先我们为什么要做前端系统呢，先看下面这张表，可以很显然的看出，前端的性能对于产品的价值…"}, {"id": "6989441931654725645", "title": "Node中的模块系统", "desc": "Node中的模块系统 什么是模块化 文件作用域 通信规则 加载require 导出 Commonjs模块规范 在node中的js还有一个很重要的概念模块系统 加载 require 语法： 导出 exp"}, {"id": "6845166891397283854", "title": "几个命令教你如何监控 Node 服务的内存情况", "desc": "当使用 Node 在生产环境作为服务器语言时，并发量过大或者代码问题造成 OOM (out of memory) 或者 CPU 满载这些都是服务器中常见的问题，此时通过监控 CPU 及内存，再结合日志及 Release 就很容易发现问题。 以下是一个 Node Server 的…"}, {"id": "6844903747110305805", "title": "2019 年，19 种方法让自己成为更好的 Node.js 工程师", "desc": "编者按：文中作者为大家提供了19种方法，大多数方法后面都提供了例子，如果你对这些例子感兴趣，请直接查看英文原文，并访问例子中的链接。 我已经汇集了 19 项 2019 年可能有价值的技能和主题。请别为难我 - 我和大多数开发人员一样，不可能熟悉每一个主题。 这些只是我所关注的令…"}, {"id": "6844904153890684935", "title": "【前端工程化】环境变量.env文件", "desc": "在现代前端项目中.env文件随处可见，里面都是一些项目中的配置项，可以在项目中拿来就用，虽然这是一个不太起眼的东西，但是这些.env文件在前端工程化中是有一定的用处和意义的。 就让我们通过这篇短文一起来看看。 现在的前端项目都是用 Node 来作为辅助开发工具，而 proces…"}, {"id": "6844904020813807629", "title": "一杯茶的时间，上手 Node.js", "desc": "Node.js 太火了，火到几乎所有前端工程师都想学，几乎所有后端工程师也想学。一说到 Node.js，我们马上就会想到“异步”、“事件驱动”、“非阻塞”、“性能优良”这几个特点，但是你真的理解这些词的含义吗？这篇教程将带你快速入门 Node.js，为后续的前端学习或是 Nod…"}, {"id": "6844903812809883662", "title": "Node.js 葵花宝典", "desc": "​ 知识就像海洋一样，永远也学不完，但是不断精益求精是一种态度，是对新事物的一种持续保持瞻望的态度，但愿你在学习的乐园里不断完善己身，不断修炼，等待破茧成蝶。 ​ 好的书写风格能够让读者的思路清晰，同样能让人有继续阅读的兴趣，但愿你能按照此风格继续完善本书籍。 ...... 进…"}, {"id": "6844903511553998856", "title": "53合1:Node.js 最佳实践大合集", "desc": "i0natan/nodebestpractices(github repo) 应该 (maybe) 是地球上最大的一份 Node.js 最佳实践合集，包含了关于项目目录、错误处理、编码风格、测试和代码质量、生产环境等,作者还说这个项目的汇总会一直持续跟进(更新)"}, {"id": "6844903556873453581", "title": "系列３｜走进Node.js之多进程模型", "desc": "之前的文章“走进Node.js之HTTP实现分析”中，大家已经了解 Node.js 是如何处理 HTTP 请求的，在整个处理过程，它仅仅用到单进程模型。那么如何让 Web 应用扩展到多进程模型，以便充分利用CPU资源呢？答案就是 Cluster。本篇文章将带着大家一起分析Nod…"}, {"id": "6844903575793958919", "title": "五分钟轻仿一套express源码", "desc": "Express是一个基于 Node.js 平台，快速、开放、极简的 web 开发框架。主要有 路由、中间件、模板引擎、 错误处理等功能 上面代码会在本机的3000端口启动一个网站，网页显示Hello World。 Express框架建立在node.js内置的http模块上。 上…"}, {"id": "6844903792236822535", "title": "用 Node.js 写一个多人游戏服务器引擎", "desc": "听说过文字冒险游戏吗？ 如果你的年龄足够大的话（就像我一样），那么你可能听说过、甚至玩过“back in zhe day”。在本文中，我将向你展示编写的整个过程。这不仅仅是一个文本冒险游戏，而是一个能让你和你的朋友们一起玩的，可以进行任何剧情的文本冒险游戏引擎。 没错，我们将通…"}, {"id": "6844903616621330439", "title": "Deno原理详解，让我们一起从源码分析开始", "desc": "不允许将任意本地函数绑定至 V8 当中。 所有系统调用都将通过消息传递完成（protobuf 序列化）。 两项原生函数：send 与 recv。 这既简化了设计流程，又使得系统更易于审计。 只允许GO和V8之间的消息传递(传统：暴露C++函数作为函数在JavaScript。)"}, {"id": "6844903649504657421", "title": "Git Worktree：解决分支依赖冲突的问题", "desc": "将一个项目不同平台的版本放在 git 仓库的不同分支，是一种常见的做法。比如我最近在考虑开发 Gitview （项目链接 ）的小程序版，计划将原先 React Native 版的代码放到名为 react-native 的分支，小程序版在一个新的名为 weixin 的分支中开发，…"}, {"id": "6844903567434711053", "title": "referer与防盗链", "desc": "如果有referer说明是引用过来的，要么是从HTML页面,要么是通过css @import，再或则通过background(url)引用。 我们能通过对比req.headers['referer']和req.url中的host来确认资源请求是否是别的站点发来的。 接着，当我们…"}, {"id": "6844904162094743565", "title": "node实现redis键空间通知和分布式锁", "desc": "在线聊天页面，当用户离开一定时间后，会触发超时结束会话的一个逻辑。 如果要开启键过期事件通知，可以在配置中写入notify-keyspace-events EX。 至此，redis的配置改完。 因为公司的redis服务是3主3从的架构，所以这里的redis是多台服务器，需要遍历…"}, {"id": "6844903673009537038", "title": "webpack性能优化不完全指北", "desc": "体积的大小直接关系到我们项目的加载速度， 而SPA的首屏加载速度又决定了用户的留存。对于体积优化，我们可以从俩个方面来下手。But 在那之前我们要先对自己的项目依赖构成进行分析，确定了优化的目标才能着手思考优化方案，进而实施优化方案。 我们只需要在每次打包的时候使用它，可以通过…"}, {"id": "6844903552863698952", "title": "Koa源码分析", "desc": "上篇文章写了如何阅读Koa的源码, 粗略的过了一下Koa的源码, 但是作为一个没有得出一个具体的结论, 中间件的运行原理也不清楚, 这里我们再仔细的过一遍Koa的源码. 起一个web服务, 来一个Hello World, 作为http模块的再封装, 我们还是慢慢来挖掘它是如何封…"}, {"id": "6990007738667368478", "title": "使用nvm管理node的不同版本", "desc": "nvm安装与使用 1、下载 nvm-noinstall.zip：绿色免安装版，但使用时需进行配置。 nvm-setup.zip：安装版，推荐使用 2、安装 3、安装好确认是否安装成功 4、安装/管理n"}, {"id": "6844903600452435976", "title": "NUXT内存泄漏引发问题", "desc": "在公司的项目中使用了nuxtjs框架进行开发，在开发测试过程中均无出现任何异常。在上线到正式生产环境之后，大概五六天之后node就异常，pm2无法自恢复。需要进入生产环境进行重启项目。 查阅日志之后发现生产服务器会缓慢堆积tcp链接。最后引发node程序 cpu 100%占用。…"}, {"id": "6844904062974951437", "title": "Node.js实战--资源压缩与zlib模块", "desc": "nodejs 的 zlib 模块提供了资源压缩功能。例如在 http 传输过程中常用的 gzip，能大幅度减少网络传输流量，提高速度。本文将从下面几个方面介绍 zlib 模块和相关知识点： 如下图所示，4.7Mb 大小的文件被压缩到了 575Kb。 在服务器中和客户端的传输过程…"}, {"id": "6844903921295556621", "title": "Node 流(stream) (可读流、可写流、双工流、转换流)", "desc": "顾名思义，流就是数据流动的意思。 二进制模式，都是 string 字符串 和 buffer。 对象模式，流内部处理的是一系统普通对象。 流动模式 ( flowing ) ：数据自动从系统底层读取，并通过事件，尽可能快地提供给应用程序。 暂停模式 ( paused )，必须显式的…"}, {"id": "6844904070805716999", "title": "深入学习 Node.js stream 系列（一）—— 认识”流“", "desc": "本来想写一篇 Node.js stream 完整的深入学习的文章。却发现，一篇文章难以透彻讲解完整个 stream，然后分享的概念太多，怕是一篇下去，可能长达十几万字，不仅自己一两个月都没写完博客，估计也鲜有读者会愿意仔细读完。 因此最好还是写成一个系列，不仅可以有点章法，而且…"}, {"id": "6844903591069614087", "title": "前端CORS请求梳理", "desc": "前后端分离来说，跨域请求是我们第一个需要解决的问题。下面是我在开发中总结出来的一些经验。 开发中，很多时候会出现Options请求（CORS预检请求），但是有的时候又不会出现。某些请求不会触发 CORS 预检请求，这样的请求被称为简单请求，其他的请求被称为非简单请求。首先我们来…"}, {"id": "6922378076764504078", "title": "node学习之http(二)使用例子篇", "desc": "1、使用http模块开始生成例子2、在基础上加载一个html文件同样，这样子的方法你会发现问题，就是每次请求都会返回html使用第三步需要加载出css文件，需要动态请求达到的需求是这样子：根据不同的路"}, {"id": "6844903590750846990", "title": "Vue.js 源码解析 1 - 响应式原理", "desc": "系列文章的第一篇. 注释过后的源码地址 lets-read-vue: https://github.com/wendzhue/lets-read-vue."}, {"id": "6844903665002610695", "title": "从零开始实现发送云短信", "desc": "有一天，一个叫小明的男孩子，想给一个他喜欢很久的女孩子发一段匿名告白短信。 a.签名内容：要与下面填写的签名类型主体一样，比如我的公众号叫做\"环球科技频道\"，这里就填写\"环球科技频道\"。 b.短信内容：根据提示填写，笔者这里填写的测试内容是\"在天愿作比翼鸟，在地愿为连理枝。\" …"}, {"id": "6844903821630521351", "title": "【入门指南】node.js", "desc": "node.js使用的JavaScript引擎为V8引擎，还使用了高效的 libev 和 libeio 库支持事件驱动和异步式 I/O 来代替传统平台的多线程模式，带来性能的提升（传统多线程模式对于 高并发的访问，一方面线程长期阻塞等待，另一方面为了应付新请求而不断增加线程，因此…"}, {"id": "6844903618605219854", "title": "React项目实践系列二", "desc": "上一篇文章说明了使用远程Mock Server，那下一步就是让前端请求Mock环境了。 在项目中便可直接fetch('https://mock.yonyoucloud.com/mock/212/user/getAll')便可。 但是此处会有一个问题，现在在开发环境下是请求Moc…"}, {"id": "6844903919840133134", "title": "造轮子：用Node写一个API Mock", "desc": "使用Node写一个Mock服务实现思路：读取mock文件夹遍历.js文件尝试导入文件内容将文件内容拼接成一个对象将请求类型+空格+请求地址作为key当收到的请求能在js对象中找到就返回结果找不到结果返"}, {"id": "6844903587043098632", "title": "JavaScript执行机制深层剖析", "desc": "小伙伴们，我们也出来活动活动筋骨，迎接我们2018年的春天。 今天我们说说JS执行流程，现在我们先暂且不考虑异步的情况。 如果你把下面的内容都吃透，那你就会发现JS内部是多么精彩的一个世界。 还等什么，go... 接下来，我们以一个简单例子进行分析。 1. JS引擎创建一个全局…"}, {"id": "6844903922138628104", "title": "店员端项目总结（前后端分离）", "desc": "1. 商城店员端 商城后台管理手机版（又称商城店员端），主要服务于方便客户使用移动设备（手机，pad）管理商品和订单，实现一键上架、下架，订单管理查询，销售统计，扫码核销，售后处理等大部分PC端后台管理功能。 2. 项目树 3. 项目文件解释 EditorConfig帮助开发人…"}, {"id": "6844904099092103181", "title": "Easy-Sftp，项目里的命令行上传库", "desc": "现在很多项目，比如简单的前端H5，最快的发布或者测试方式还是走sftp上传，有很好的上传工具，比如FileZilla，但是这个工具对项目不够耦合，每次新的开始都需要不断的找文件夹。 为了每次一行命令就可以发布，出现了Easy-Sftp这个工具。可以访问easy-sftp下载试用…"}, {"id": "6844903989805481992", "title": "使用 Async-hooks 串联 HTTP 请求上下文", "desc": "开门见山，之前在写业务要求的时候，有一个记录慢查询和慢请求的耗时并上报至 ES 的需求，同样也会有其他类型的日志需要记录上报，起初并没有统一字段，各种类型的日志的字段比较松散，现在需要统一日志字段。这个需求说起来也算是简单，提取一些公用的字段，比如 type、timeTaken…"}, {"id": "6844903575689281549", "title": "你不得不知的Event Loop", "desc": "众所周知，JavaScript是一门单线程语言，虽然在html5中提出了Web-Worker，但这并未改变JavaScript是单线程这一核心。可看HTML规范中的这段话： 为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，用户引擎必须使用event loops。Eve…"}, {"id": "6844903649479491597", "title": "缓解异步编程的不适", "desc": "在最初学习 MFC 编程时，回调函数便是遇到的第一个难点。看着书中的定义 —— “ callback 函数虽然由你来设计，但是永远不会也不该被你调用，它们是为 Windows 系统准备的。” 我一脸的蒙圈。但是通过长时间的磨（wu）炼（jie），我终于在记忆中深深的烙上了不可缓…"}, {"id": "6844903625592946701", "title": "前端技术周刊 2018-06-22：Webpack 生存指南", "desc": "Nodejs 发布了六月安全更新，建议开发者更新到 10.4.1 版本，包含对 HTTP/2 拒绝服务攻击、TLS 拒绝服务等的预防。🔗 五月底，欧盟的通用数据保护协议 GDPR 进入强制执行阶段，用户数据采集方式的不合规将导致欧盟追责，此举将影响各大全球化公司。对用户隐私的…"}, {"id": "6844903799107108872", "title": "Re: 从零开始的【comic spider】《最简单的实现》(上)", "desc": "一个最简单的漫画脚本最基本的功能是下载，但是在是下载之前还要做什么？是找资源！那么“搜索”功能也应该算在一个最简单漫画爬虫的基本功能。所以，接下来围绕这两个功能看看从一零开始的 ic-comic-spider！ 我们以 ONE-PUNCH MAN 的目录页为例子。 目录页面的分…"}, {"id": "6844903619507159053", "title": "Event Loop浅谈", "desc": "首先，让我们看一个经典的setTimeOut的问题　　浏览器打印的结果是怎样的呢？大家可以写一段脚本试一下，打印的结果是1，4，3，2；为什么不是按照js从上到下的执行顺序，输出1，3，4，2呢？这就"}, {"id": "6844903502272004103", "title": "一个智能快速且开源的浏览器", "desc": "Min is a smarter, faster web browser. It includes features such as: Information from DuckDuckGo in the search bar. Built-in ad and tracker …"}, {"id": "6844903865817513998", "title": "JS笔记(21): NODE", "desc": "一、关于node1)NODE概念基于V8引擎（谷歌浏览器的引擎）渲染JS的工具或者环境安装node（到node官网http://nodejs.cn/下载即可）把js代码放到node环境中执行2)NOD"}, {"id": "6844903839481462791", "title": "浅析libuv源码-node事件轮询解析(2)", "desc": "上一篇讲了轮询的边角料，这篇进入正题。(补两个图) 1、根据计算的timeout来进行I/O操作，这里的操作包括fs.readFile、fs.stat等，期间进程将被阻塞。 2、所有I/O的handles会使用一个给定的文件描述符进行操作，并会调用对应的callbacks。 从…"}, {"id": "6844903495892467726", "title": "这事要从node node.js说起", "desc": "导读：兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。 曾经有那么一段时间，一些node初学的同学遇到了同样的问题：Hello World 跑不动！ 问题的起源非常简单，当我们在编写一个入门程序时，就会迅速想起那句…"}, {"id": "6844903498295803917", "title": "超级快的 JavaScript 解析器，可用于生产环境。", "desc": "Cherow is a very fast, standard-compliant ECMAScript parser written in ECMAScript. It strictly follows the ECMAScript® 2018 Language Specif…"}, {"id": "6844903860503314446", "title": "APubPlat 一款Devops自动化部署、持续集成、堡垒机开源项目、友好的Web Terminal", "desc": "APubPlat - 一款完整的Devops自动化部署、持续集成、堡垒机、并且友好的Web Terminal开源项目。 如果你对它感兴趣，就给一个小小的关注吧，一款好的产品更需要碰撞和火花。： 接下来我还会持续的更新和迭代。 资产管理： 方便快捷的管理资产，可为资产分组，为应用…"}, {"id": "6844903605762261006", "title": "发布订阅管道化", "desc": "发布订阅作为一种常见的设计模式，在前端模块化领域可以用来解决模块循环依赖问题。 当c模块触发data事件的时候，a和b模块的监听函数都会被执行并输出相应的结果。 上面的例子基本可以满足需求了，但是有时候希望多个订阅函数之间可以传递执行结果，类似linux管道a.pipe(b).…"}, {"id": "6844903602960482317", "title": "如何使用 npm 管理 NodeJS 包", "desc": "在本指南中，我将解释使用 npm 基础知识，例如安装包（本地和全局）、安装特定版本的包、更新、删除和管理 NodeJS 包等等。"}, {"id": "6844903542679928839", "title": "iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ HTTP请求", "desc": "koa-router 提供了 .get、.post、.put 和 .del 接口来处理各种请求，但实际业务上，我们大部分只会接触到 POST 和 GET，所以接下来只针对这两种请求类型来说明。 当我们捕获到请求后，一般都需要把请求带过来的数据解析出来。数据传递过来的方式一般有三…"}, {"id": "6924323508155580430", "title": "切换虚拟生产环境", "desc": "提供环境切换的入口，方便验证不同环境数据（以微信小程序为例，仅供内部使用，因此【开发者-环境切换】入口在对外的生产环境不显示）。如：开发人员上传测试环境的小程序包到微信管理后台，产品或测试人员进入【开发者-环境切换】，切换为预发布环境，验收预发布数据，这样可以省去开发人员上传不…"}, {"id": "6859524276757004302", "title": "极简 Node.js 入门系列教程 —— 2.2 事件", "desc": "在浏览器环境中开发者事件相关的大部分工作是订阅事件，也就是绑定事件处理函数 listener，在 Node.js 事件编程中经常需要创建事件对象，在合理实际触发事件。使用 emit 方法可以按照 listener 注册的顺序，同步地调用每个注册到名为 eventName 的事件…"}, {"id": "6844903507997229063", "title": "Angular 5 正式版发布(带来大量的改动),以及对应的脚手架 1.5.0发布(适配 NG5)", "desc": "经过几次跳票.NG5正式版已经到来..带来一些有意思的东西,编译性能提升,支持导入装饰器,管道的国际化(数字及日期处理这些),zone 异步处理的改善,新的路由生命周期事件,表单及 htpp模块的完善,以及支持 rxj 5.5 等等!!!"}, {"id": "6844903560899985416", "title": "可能是最全的 Node.js 9 新特性整理", "desc": "这是一份迟到的 Node.js 9 新特性整理"}, {"id": "6996919148584370213", "title": "读书笔记（深入浅出Node.js）—— Node中的Buffer", "desc": "Buffer是一个像Array的对象，但它主要作用于操作字节。Buffer对象的内存分配不是在v8的堆内存中，而是在node的C++层面实现的。"}, {"id": "6844903544080826382", "title": "Nodejs进阶：crypto模块中你需要掌握的安全基础", "desc": "在信息安全重要性日益凸显的今天，作为一名开发者，需要加强对安全的认识，并通过技术手段增强服务的安全性。 crypto模块是nodejs的核心模块之一，它提供了安全相关的功能，如摘要运算、加密、电子签名等。很多初学者对着长长的API列表，不知如何上手，因此它背后涉及了大量安全领域的"}, {"id": "6844903612695445518", "title": "不要混淆nodejs和浏览器中的event loop", "desc": "1. 什么是 Event Loop? 举一个大家都熟知的栗子， 这样更能客观的理解。 大家都知道深夜食堂吧。厨师就一个人（服务端 Server）。最多再来一个服务生( 调度员 Event Loop )。晚上吃饭的客人（客户端 Client）很多。 假设我们把 厨师 和 服务生 …"}, {"id": "6989062670175436813", "title": "用nodejs读取文件并存入excel中", "desc": "文件格式 其中用到了fs模块 node-xlsx模块和line-reader模块。var fs = require('fs'); var xlsx = require('node-xlsx'); va"}, {"id": "6859995981484818439", "title": "NodeJS的适用场景(原理解析)", "desc": "NodeJS是近年来比较火的服务端JS平台，这一方面得益于其在后端处理高并发的卓越性能，另一方面在nodeJS平台上的npm、grunt、express等强大的代码与项目管理应用崛起，几乎重新定义了前"}, {"id": "6844903556990894088", "title": "写个爬虫呗", "desc": "之前写了个小爬虫，用来爬当当的图书信息用的，挺好玩，分享一下吧。整个爬虫非常简单，主要是使用request库+cheerio解析，实现非常粗糙，今天正好理一下思路。 首先，准备工作，就是各种库的安装以及其他前置工作的准备，比如页面分析。 整个流程实际上比较简单，适合像我这样的菜…"}, {"id": "6844904168524611598", "title": "vue+node+mongodb实现的简单TodoList", "desc": "初学node，js既然也可以写后台,也可以自定义接口，身为一个小前端就一直就想利用node来做一个简单的后端。由此有了这个简单的demo，看官见笑。 在mongodb中 数据库 -》集合-》文档文档的数据结构和JSON基本一样。所有存储在集合中的数据都是 BSON 格式。BSO…"}, {"id": "6975439067051720718", "title": "Node", "desc": "这是我参与更文挑战的第3天，活动详情查看：更文挑战 1.能学到啥 B/S 编程模型 Browser - Server 模块化编程 Node 常用 api 异步编程 Express Web 开发框架 E"}, {"id": "6900951570985254925", "title": "NodeJS运维: 从 0 开始 Prometheus + Grafana 业务性能指标监控", "desc": "一个复杂的应用，往往由很多个模块组成，而且往往会存在各种各样奇奇怪怪的使用场景，谁也不能保证自己维护的服务永远不会出问题，等用户投诉才发现问题再去处理问题就为时已晚，损失已无法挽回。 所以，通过数据指标来衡量一个服务的稳定性和处理效率，是否正常运作，监控指标曲线的状态，指标出现…"}, {"id": "6905280528736485390", "title": "为什么nodejs里面可以直接使用module?", "desc": "node 遵循的是CommonJS规范， 为了避免全局命名冲突,以及同名函数名或者变量名被覆盖的情况，提出了module的概念,并且内部实现了，每个js是个独立的modlue,内部的变量和方法都是私有的，其他模块要用的话，自己要先通过module关键字导出，其他模块要用的话要用…"}, {"id": "6844903773849010183", "title": "NodeJS Events模块源码学习", "desc": "events模块的运用贯穿整个Node.js, 读就Vans了。 1. 在使用层面有一个认识 为了解决这个问题，Node提供了EventEmitter接口。通过事件，解决多状态异步操作的响应问题。 2. 源码分析(Node.JS V10.15.1) 此部分不会从头到尾的阅读源码…"}, {"id": "6844904175155806215", "title": "【koa + vue + es6 + node】全家桶前后端分离项目实战（1）？", "desc": "之前说好的一周完成两篇技术文档，事实证明被打脸了。我高估了自己学习的速度和时间管理，实在没办法做到，但我还是在学习的路上坚持着。今天给大家带来是5月份自己学习的一个总结：即使用koa和vue全家桶独立完成一个前后端分离的项目。于是利用双休的时间，我写了一个小demo，来跟大家分…"}, {"id": "6844903965818126343", "title": "关于统计诗词字云中的解决方案", "desc": "周末写了两个脚本，用以统计诗词中的高频字，并抽取其中意象作为飞花令的令字。这两个脚本的地址以及所做如下 不一定，特别是在这种求 TOP 的情况下，他只需要得出相对排序即可。也就是说，你即使不对 postgres 做一些原子性保证的处理，最后得到的数据也会差不了多少。 只保留一些…"}, {"id": "6844903592009138190", "title": "node ( 5 ) -----process详解（这个标题不讨喜……）", "desc": "process 对象是一个全局变量，它提供当前 Node.js 进程的有关信息，以及控制当前 Node.js 进程。 因为是全局变量，所以无需使用 require()。在Node.js中每个应用程序都是一个进程类的实例对象。 platform 运行平台。 如 darwin、fr…"}, {"id": "6901468893135667213", "title": "万字长文深度剖析面向对象的javascript", "desc": "本将会深入讲解面向对象在javascript中的应用，并详细介绍三种对象的生成方式：构造函数，原型链，类。 对象是单个实物的抽象。 对象是一个容器，封装了属性（property）和方法（method）。 而面向对象是相对于面向过程来讲的，面向对象方法，把相关的数据和方法组织为一…"}, {"id": "6844903894582034440", "title": "node的模块机制", "desc": "在Node中引入模块，需要经历如下3个步骤。 在Node中，模块分为两类：一类是Node提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块。"}, {"id": "6844903856845881357", "title": "【译】容器环境下Node.js的内存管理", "desc": "此文章最初发布在IBM Developer。 在docker容器中运行Node.js应用程序时，传统的内存参数调整并不总是按预期工作。本文我们将阐述在基于容器的Node.js应用程序内存参数调优中并不总是有效的原因，并提供了在容器环境中使用Node.js应用程序时可以遵循的建议…"}, {"id": "6844903641522896909", "title": "多页项目的webpack配置", "desc": "在我们使用vue，angular等框架开发的时候，大多数都是构建单页项目。而且，像这样的框架都有对应的命令一步生成webpack配置（比如vue的vue init webpack my-project之类）。 但是如果我们要开发多页面项目的时候就没有这么方便了，你必须要自己配置…"}, {"id": "6844903583209488391", "title": "对Node.js异步的进一步理解", "desc": "上周写的JS异步编程的浅思，一步一步将反人类的异步回调演化到带有async/await关键字的同步/顺序执行，让我的异步编程处理能力有了质的突破，达到“异步编程的最高境界，就是根本不用关心它是不是异步”。 Node.js主要分为四大部分，Node Standard Librar…"}, {"id": "6899462561624752135", "title": "前端工程化（一）", "desc": "注意，工程化不是某个工具，工具化只是实现工程化的方式，如vue-cli。node对前端工程化起了非常大的作用 老牌强大的脚手架，可以创建任何类型的项目，不针对某一项目，这是优点也是缺点。 然后就可以选择配置了，一直回车，最后Yeoman会自动安装生成一个node项目的基础结构。…"}, {"id": "6844903591208058888", "title": "教你如何用nodejs爬掘金(一）", "desc": "开始我是尝试直接请求掘金首页，然后用cheerio解析，然后拿到网页继续干活的。。可是事情并没有这么简单，通过这个方法爬取的网页跟我们正常浏览的首页不一样（有可能是我哪姿势不对） 咦！recommend？推荐？好了，进去一看，果然是首页热门文章，但是。。。 但是。。。这并没有什…"}, {"id": "6844903605435138062", "title": "Hexo博客多端同步问题", "desc": "搭完博客，发现只有公司电脑上有源文件，如果回家就没发继续更新博客了。也不能拿着U盘到处拷贝。所以就把博客源文件放到github上解决同步问题。 这就成功了，github上已经有博客的源文件了。 推荐把hexo设置为默认分支。 因为之前是直接把第三方主题克隆到博客目录，有什么改动…"}, {"id": "6970330107885928461", "title": "HEXO博客的搭建及环境配置（一）", "desc": "https://lixins319070033.github.io/ https://lixins319070033.github.io/"}, {"id": "6844903598598389774", "title": "Koa2 源码学习(上)", "desc": "最近读了一下Koa2的源码；在阅读Koa2 (2.3.0) 的源码的过程中，我的感受是整个代码设计精巧，思路清晰，是一个小而精的 nodejs web服务框架。 作为web服务框架，都是要围绕核心服务而展开的。那什么是核心服务呢？其实就是接收客户端的一个http的请求，对于这个…"}, {"id": "6844903709873274894", "title": "webpack+git开发环境将git中tag自动显示到web中", "desc": "每个文件里面记录着commit 标识,也就是该tag是在哪个节点上的,这里我们暂时不用处理那么深入(也许这个功能在别的地方能用到). 那我们就可以获取这些文件名称,然后再进行遍历得到tag编码最大的那个就好了,(通常tag都是逐渐增大的). 获取到最大的tag后导出一个对象出去…"}, {"id": "6844903670010609678", "title": "WEB实战：使用MERN技术栈开发项目", "desc": "本文介绍如何使用 MERN 技术栈开发一个前后端分离的电商项目，水平有限，不足之处，请指出，Github。 这里的逻辑跟管理后台主要的区别在于请求的数据接口不同，以及页面的UI不同，具体实现，UI交互等按个人而定。 功能开发完毕后，使用 yanr build 将前端以及管理后台…"}, {"id": "6844903922243469320", "title": "Node入门---后台服务与访问接口", "desc": "简单摸索了 React + TypeScrip 因为没有新项目要用到，就开始摸一下node，今天写个hello world分享一下过程。(默认安装了node) 这样很清晰的看出来 res.end() 方法里面就是我们返回给前端的参数。 创建一个 post 用来存放前端传出来的参…"}, {"id": "6844903838881677320", "title": "浅析libuv源码-node事件轮询解析(1)", "desc": "好久没写东西了，忙得要死，前几天突然想起了脉脉上面一句话: 要时刻保持自己的竞争力。所以，继续开写！ 一般的JavaScript源码看的已经没啥意思了，我也不会写什么xx入门新手教程，最终决定还是啃原来的硬骨头，从外层libuv => node => v8一步步实现原有的目标吧…"}, {"id": "6943869952419954695", "title": "nvm for mac vscode  配置 指南 FE", "desc": "闲出P的我，升级了本地的Node，原版本 V10，漂亮的给自己升到了V14 ,然后就aba aba aba了。 fremark：MAC OS 系统, vscode , oh my zsh. termal : itemr2 , pokerMan. 可以 install 或者 up…"}, {"id": "6844903508781563918", "title": "Node.js 核心模块 Timers 详解", "desc": "Timers 模块应该是 Node.js 最重要的模块之一了。为什么这么说呢？ 在 Node.js 基础库中，任何一个 TCP I/O 都会产生一个 timer（计时器）对象，以便记录请求/响应是否超时。例如，HTTP请求经常会附带 Connection:keep-alive …"}, {"id": "6844903567455682568", "title": "请立即停止使用 node-open 模块", "desc": "node-open 是一个 npm 包，可以使用系统默认关联的方式打开 uri 和本地文件。从 commit 日志和 npm 发布时间来看，node-open 包似乎已经停止维护好几年了： 另外作者的用户名 pwnall 让我一度误认为是 pwnallthethings 的马甲…"}, {"id": "6844903702453551117", "title": "[译]Node.js中的事件循环，定时器和process.nextTick()", "desc": "由于大多数现代内核都是多线程的，因此它们可以处理在后台执行的多个操作。当其中任意一个任务完成后，内核都会通知Node.js，以保证将相对应的回调函数推入poll队列中最终执行。稍后我们将在本文中详细解释这一点。 当Node.js服务启动时，它就会初始化事件循环。每当处理到脚本(…"}, {"id": "6844903645134192654", "title": "【译】如何更好的编写CSS", "desc": "废话不多说，咱们就开门见山吧：想写出优质的CSS代码将会是非常痛苦的。很多开发者都不想做CSS开发。我可以做你想做的一切，但是，除了CSS！ 当我在构建应用时，CSS是我挺讨厌的部分。但你无法摆脱它，对吧？我的意思是，正是因为我们如此的专注于用户体验和设计，所以现在我们才不能跳…"}, {"id": "6844903790764621831", "title": "从 0 到 1 写一个简单依赖注入系统（1）", "desc": "前些日子一直在抽空搞一个自己的TypeScript相关项目，大体是一个base在依赖注入（DI，后面就缩写了）平面之下的node服务端框架。写着写着，觉得很有必要把 DI 平面从框架里面剥离出来，改善一下扩展性，沉淀成一个通用的解决方案。在这里呢，我打算整理一下之前所写的东西，…"}, {"id": "6844903745747157005", "title": "node项目错误处理与日志", "desc": "错误处理中，model,controller中的错误，有些是不能直接返回给用户的，应该只返回给model或controller的调用者。 在产生大量数据的应用当中，日志的输出是大量的，这是就需要对日志进行拆分处理，例如按照每天的频率来分别记录日志。"}, {"id": "6983226624493748231", "title": "Node常用模块解析", "desc": "path 是node中的内置模块，可以直接使用require将它导入，他的主要作用就是处理文件的目录和路径。只需要调用不同的方法。path相当于一个工具箱，只需要掌握它里面提供的工具，也就是方法。 b"}, {"id": "6998324314269286436", "title": "今晚不加班——从0到1为公司定制代码生成器", "desc": "在我们的日常开发中，有大量重复cv的操作，新建列表页面，写方法，写表格等等等等，其实重复性的操作我们都可以交给代码去完成，从而提高我们自身的开发效率"}, {"id": "6990301130387374116", "title": "谈谈水印实现的几种方式", "desc": "在安全部门工作的我们，数据安全的观念早已深入骨髓，每个文字，每张图片，都要留心是否有泄露的风险，怎么防止数据泄露，比如图片的水印，就是我们工作过程中经常涉及到的问题。本文探讨比较了几种水印方法"}, {"id": "6992569321297805348", "title": "🔥🔥 前端必知必会 | 一文快速掌握package.json ", "desc": "在每个`node`项目或者模块的根目录下，通常会有一个叫做`package.json`文件，它定义了这个项目所需要的各个模块信息和版本，以及整个项目的配置信息，例如项目的名称，版本，描述等等信息..."}, {"id": "6998091306933157901", "title": "node 安装及使用路由、fs模块 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 一、node 安装 node 开门注： Node.js® is a JavaScript runtime built on Chrome's"}, {"id": "6997204352683212831", "title": "「从零开始」前端node够用指北(二)⚡---文件操作", "desc": "本系列带着大家一起从零开始学习NodeJS，感同身受的站在学习者角度分享知识，从基础到实战，如果感兴趣的同学可以点赞收藏留坑。"}, {"id": "7002520369881939999", "title": "用node从0到1实现一个文件服务器", "desc": "在日常的工作中，有时需要一个http服务来访问我们的静态资源来测试的情况，也有时需要在一个庞大的文件夹里找某个文件，一层一层点还是比较麻烦。当然市面也有很多类似的解决方案，例如搭建NGINX本地服务来"}, {"id": "7002041657189203999", "title": "文件上传与用户鉴权", "desc": "本文主要描述了Node创建webserver，同时实现文件上传功能，并且在KOA中使用COOKIE实现用户会话鉴权"}, {"id": "7002031450115538951", "title": "如何实现一个最小化版本的 express？", "desc": "大家好，我是山月，这是我新开的一个坑：手写源码最小实现，每一行代码都有注释。 当我们在深入学习一个框架或者库时，为了了解它的思想及设计思路，也为了更好地使用和避免无意的 Bug，源码研究是最好的方法。"}, {"id": "6844903598707441672", "title": "几道高级前端面试题解析", "desc": "因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。 小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 0.1 = 2^-4 * 1.10011(0011)…"}, {"id": "6844903591417757710", "title": "实战笔记：Jenkins打造强大的前端自动化工作流", "desc": "公司的前端构建及部署工作都是人工去做，随着业务扩大，项目迭代速度变快，人员增多，各种问题都暴露出来，本文是对前端自动化工作流进行探索后的一篇经验分享，将通过一个简单案例分享一下基于Jenkins的前端自动化工作流搭建的过程，搭建完这套工作流，我们只需要在本地发起一个git提交，…"}, {"id": "6998951353754058766", "title": "Webpack 打包后解析原理", "desc": "前言 通过前两篇文章 从0到1实现一个 Hello Webpack Webpack 基础配置 我们可以知道 webpack 的安装与使用，以及一些基本配置，最终可以实现一个自动构建过程，那么构建之后的"}, {"id": "7004020987326889997", "title": "NodeJs快速使用（二）、模块概念、自定义模块、常用模块、三方模块安装、fs模块", "desc": "为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。 模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，"}, {"id": "6999807899149008910", "title": "2021年从零开发前端项目指南", "desc": "前端从零到一的项目配置，涉及到 `Webpack`、`React`、`Babel`、`TypeScript`、`Ant Design`、`Sass`、`Eslint`、`Prettier`"}, {"id": "6999624390404997157", "title": "NodeJs深入浅出之旅：异步I/O （中）🐉", "desc": "此文是承接上文《NodeJs深入浅出之旅：异步I/O （上）》的，所以对于监听器的介绍可以查看之前的内容。还介绍了多异步之间的协作方案"}, {"id": "6844904022080651277", "title": "一个开箱即用，功能完善的 Express 项目", "desc": "node.js 对前端来说无疑具有里程碑意义，在其越来越流行的今天，掌握 node.js 已经不仅仅是加分项，而是前端攻城师们必须要掌握的技能。而 express 以其快速、开放、极简的特性， 成为 node.js 最流行的框架，所以使用 express 进行 web 服务端的…"}, {"id": "7002566911456182303", "title": "对于M1芯片的Mac在安装NVM，并用nvm下载不同的node版本的时候遇到的坑", "desc": "对于M1芯片的Mac在安装NVM，并用nvm下载不同的node版本的时候遇到的坑，根据查阅官网获得的解决办法，希望对大家有帮助"}, {"id": "6887684959893454861", "title": "「 volute 」树莓派+Node.js造一个有灵魂的语音助手", "desc": "树莓派（英语：Raspberry Pi）是基于 Linux 的单片机电脑，由英国树莓派基金会开发，目的是以低价硬件及自由软件促进学校的基本计算机科学教育。 树莓派每一代均使用博通（Broadcom）出产的 ARM 架构处理器，如今生产的机型内存在 2GB 和 8GB 之间，主要…"}, {"id": "6952665400890884127", "title": "koa实践总结，总有你用的到抄的走的", "desc": "老王：因为koa比较轻量，几乎没有内置任何的额外功能。也是因为这个原因，koa的灵活度是很高的，喜欢折腾的人可以尝试下 老王：这个。。。。 我还是先说说怎么用吧 我们运行一下 node app/index.js 命令，这个时候，最简单的node服务已经启动起来了。浏览器里访问 …"}, {"id": "6858910962339856397", "title": "一年Node.js开发经验总结", "desc": "不知不觉的，写Node.js已经一年了。不同于最开始的demo、本地工具等，这一年里，都是用Node.js写的线上业务。从一开始的Node.js同构直出，到最近的Node接入层，也算是对Node开发入门了吧。目前，我一个人维护了大部分组内流传下来的Node服务，包括内部系统和线…"}, {"id": "6908955578123583496", "title": "Node的buffer和fs文件模块", "desc": "JavaScript比较擅长处理字符串，对于处理二进制数据(比如TCP数据流)，就不太擅长。Buffer对象就是为了解决这个问题而设计的。它是一个构造函数，生成的实例代表了V8引擎分配的一段内存，是一个类似数组的对象，成员都为0到255的整数值，即一个8位的字节 toStrin…"}, {"id": "6844903550846238733", "title": "前端每周清单第 47 期：NPM 年度报告与 2018 展望，Airbnb React Router 实践", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 NPM 发布 2017 JavaScri…"}, {"id": "6844903550120624142", "title": "用简单的demo学习各种跨域", "desc": "因为学习跨域需要配置本地服务器，可能会比较麻烦，所以自己根据网上的博客写了大多数跨域的简单demo，可以自己在本地运行，而且不用配置服务器。自己对于跨域的理解刚开始也仅仅在于网上的博客文章，通过写这些可以本地运行的demo让我对跨域有了更直面的理解，希望这些demo对你们有帮助，"}, {"id": "6844903577157107720", "title": "发布订阅模式---模拟Node中的EventEmitter", "desc": "态发生改变时，所有依赖于它的对象都将得到通知。 在 JavaScript开发中，我们一般用事件模型来替代传统的发布 — 订阅模式。 EventEmitter中的once方法可以做到绑定的事件只调用一次，之后不会再被调用，他的实现方式实在怎么样的？正常情况应该是在回调函数被调用一…"}, {"id": "6844903501563183118", "title": "[译]你并不知道Node", "desc": "你并不知道Node在今年Forward.js（一个JavaScript）会议中，我做了主题为“你并不知道Node”的演讲。在这个演讲中，我向观众提出一些关于Node.js运行时的具有挑战性的问题，大多"}, {"id": "6844903840945274894", "title": "手把手教你实现脚手架工具Koa-generator", "desc": "我们日常中经常使用各种cli来加速我们的工作，你们也一定和我一样想知道这些cli内部都干了什么？接下来我们就以实现一个koa-generator来打开脚手架工具的大门，来跟着我一步一步做吧：为了加快我"}, {"id": "6844903647181013005", "title": "聊聊 Node.js RPC（二）— 服务发现", "desc": "欢迎访问语雀地址以获得更好的阅读体验一、前言上一篇我们介绍了RPC通讯协议，它是实现RPC的第一步，接下来我们要讨论一下RPC的服务发现（ServiceDiscovery）二、什么是服务发现？概念上讲"}, {"id": "6844903517312811022", "title": "基于socket.io打造hybrid调试页面", "desc": "前言参考的钉钉调试页面实现，仅供学习！功能为：PC端编写代码，手机端执行解决的痛点是：避免了调试hybrid应用时重复写各种测试页面源码与示例源码https://github.com/dailc/no"}, {"id": "6844903808271646727", "title": "Nodejs教程27：Node.js项目之二：实现路由", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 在之前的例子中，我们总是要通过if else语句来判断请求的接口路径，并进行相应操作。 这样会极大地降低开发效率，也不利于后期代码维护。 因此，通常的开发中，都会使用路由对不同的接口进行操作。 1. 先创建一个r…"}, {"id": "6943149047196696583", "title": "浅谈 NodeJS 的事件循环和 Timers", "desc": "什么是事件循环 事件循环，即 Event Loop，其实就是 JS 管理事件执行的一个流程，具体的管理方法由 JS 运行的环境决定，目前 JS 的主要运行环境有浏览器和 Node。 浏览器和 Node"}, {"id": "6844903504901832717", "title": "用 Nuxt 开发部署一个 v2ex", "desc": "里面有线上网站的链接，因为链接随时可能变，在这里不直接给网站链接。 之前写过一篇 nuxt 入门级的文章 Vue 基于 NUXT 的 SSR，主要说一下 nuxt 是什么，以及为什么使用。 这里声明一下，不建议去阅读上一篇文章，因为当时写博文的时候是 0.8.0 版本，目前是 …"}, {"id": "6844903545636929544", "title": "PM2源码阅读", "desc": "PM2是Node中很流行的一个库，对于性能或者运维，都有很大的提升，并且它做到了对已有源码无入侵。对于这样一个实用且神奇的库，怎么能不去学习一下呢，所以我们一起来阅读一下PM2的源码吧。"}, {"id": "6844903601639260174", "title": "超轻量级web框架koa源码阅读", "desc": "koa是一个非常轻量的web框架，里面除了ctx和middleware之外什么都没有，甚至连最基本的router功能都需要通过安装其他中间件来实现。不过虽然简单，但是它却非常强大，仅仅依靠中间件机制就可以构建完整的web服务。而koa的源码同样很简洁，基础代码只有不到2000行…"}, {"id": "6844903938852913165", "title": "【Javascript系列】Event loop 在浏览器端与NodeJS中的差别 以及关于setTimeout与setImmediate引发的问题", "desc": "微任务处于宏任务作用域下时，会先执行宏任务队列中的任务，然后再执行微任务队列中的任 务,在当前的微任务队列没有执行完成时，是不会执行下一个宏任务的。 一个timer指定一个下限时间而不是准确时间，在达到这个下限时间后执行回调。在指定的时间过后，timers会尽早的执行回调，但是…"}, {"id": "6949500139769856008", "title": "Node.js | 多文件同步异步读写 简单应用", "desc": "node 读写是常见的需求，本文对读、同步写、异步写 简单应用。读取文件夹下所有目录读取文件我采用的是同步读取"}, {"id": "6844903648326057991", "title": "koa初了解", "desc": "Koa 提供一个 Context 对象，表示一次对话的上下文（可以理解为上(request)下(response)沟通的环境）。 通过加工这个对象，就可以控制返回给用户的内容。 ***为了便于访问和调用，许多 context 的属性和方法，代理了 ctx.request 和 c…"}, {"id": "6844904066007449613", "title": "如何发布一个自己的 node package?", "desc": "伴随着 Node 的兴起，npm 成为了前端工程中的模块小管家。当攻城狮们要在项目中使用第三方的开源框架或工具时，一行 npm install 就能把需要的东西从 npm 的服务器下载到本地。 在 npmjs.com 上可以看到目前已发布的所有 package。截止 2020 …"}, {"id": "6844903598862647310", "title": "Gundam-cli：前端项目创建发布流程解决方案", "desc": "Gundam-cli是一个前端项目创建发布流程解决方案，通过命令行工具来减少开发流程中的重复劳动。 当项目数一多，在这些繁琐的工作上所花费的时间也是不容小觑的。"}, {"id": "6844903501215203341", "title": "不再碎片化学习，快速掌握 H5 直播技术", "desc": "现在，大多数已工作的前端工作者的学习方式，要么直接到 Stackoverflow 上搜代码，要么直接看看相关博文。这样是快，但是零零碎碎只是一个一个孤立的知识点而已。有可能一下午都忘记了，唯一可能记住的收藏一下那个文章，然后就彻底躺尸了。那有没有啥更好的办法能解决呢？ 当然有，…"}, {"id": "6844903583477923848", "title": "Node.js  Stream(流)  ", "desc": "监听 'data' 事件。 调用 stream.resume() 方法。 调用 stream.pipe() 方法将数据发送到 Writable。 如果不存在管道目标（pipe destination），可以通过调用 stream.pause() 方法实现。 如果存在管道目标，可…"}, {"id": "6844903564741984270", "title": "缩减你的 Koa 控制器代码：更优雅的 RESTful 函数库", "desc": "使用一行代码帮助你完成大部分的 RESTful 状态回复，使代码更简单而标准。"}, {"id": "6921355973391024141", "title": "docker初试", "desc": "docker可以将运行环境和代码打包成一个镜像，使用时直接运行镜像，可以免去不同机器部署时的麻烦。今天研究一下docker的基本使用。用docker打包一个node 我的步骤很简单，使用node镜像提供node环境，然后把当前目录的内容复制到docker的容器里面。我把容器理解…"}, {"id": "6844903657784377351", "title": "browserify源码解析1——打包后文件解析", "desc": "四篇文字介绍browserify部分打包原理即所需基础——篇1打包后文件解析。"}, {"id": "6844903598829109255", "title": "从Node.Js源码一步步分析，cluster 多次fork一份代码时，如何实现端口重用", "desc": "起源，从官方实例中看多进程共用端口 执行结果： 了解http.js模块： 我们都只有要创建一个http服务，必须引用http模块,http模块最终会调用net.js实现网络服务 答案很快就可以通过cluster._getServer 这个函数找到 代理了server._list…"}, {"id": "6844904047615410184", "title": "《深入浅出Node.js》学习笔记（十）", "desc": "测试的意义在于，在用户消费产出的代码之前，开发者首先消费它，给予其重要的质量保证。 测试包括单元测试、性能测试、安全测试和功能测试等方面。 1. 单元测试 对于开发者而言，单元测试就是最基本的一种方式。如果开发者不自己测试代码，那必然要面对如下问题。 对于开发者而言，不仅要编写…"}, {"id": "6844903577048072199", "title": "测试用例驱动阅读Express源码", "desc": "Expres是基于Node.js平台，快速、开放、极简的web开发框架。（Expres中文官网首页原话）。之所以引用这句话，是因为这句话简单明了的告知了大家，它到底是什么。基于Node的一个开发框架，目的是给web开发提供了方便。今天我们就用测试用例开发的模式，一步步追踪Exp…"}, {"id": "6844903870661918734", "title": "node学习篇02-模块机制", "desc": "C/S：即Client/Server，客户机/服务器模式。 两层：客户机和服务器两层，第一层，在客户机系统上结合了界面显示与业务逻辑；第二 层，通过网络结合了数据库服务器。 优缺点：界面和操作可以很丰富；两层传输，安全性高；只有一层交互，响应速度快。一般在局域网中，适用面窄；需…"}, {"id": "6844903842677571591", "title": "来认识一下venus-init——一个让你仅需一个命令开始Java开发的命令行工具", "desc": "不知道你是否有过这样的经历。不管你是什么岗位，前端也好，后端也罢，想去了解一下Java开发到底是什么样的，它是不是真的跟传说中的一样。 于是你拿起键盘，用触控板 ? '' : 抄起鼠标'，开始了Java淌坑之旅。在一把梭的操作之后，面对你搭建的环境，你陷入了深深的沉思，开始了吾…"}, {"id": "6844903712347914254", "title": "koa源码中的promise", "desc": "koa 是一个非常轻量优雅的 node 应用开发框架，趁着双十一值班的空当阅读了下其源代码，其中一些比较有意思的地方整理成文与大家分享一下。 我们经常把 koa 中间件的执行机制类比于剥洋葱，这样设计其执行顺序的好处是我们不再需要手动去管理 request 和 re\bspons…"}, {"id": "6844903582580342792", "title": "[译]如何Mock Express的会话", "desc": "你是否正在使用Express框架？你是不是正在做服务端的集成测试（end-to-end）？这里我将讨论在项目中遇到的问题。这篇文章涵盖了我在使用Express框架做集成测试时所遇到的挑战，以及我是如何寻找技术解决方案的。 当你也遇到相同的问题时，希望这篇文章对你有所帮助。 我做…"}, {"id": "6844903650913943566", "title": "Event loops 中的异步函数", "desc": "起因是由于自己在使用asyncfunction时疑惑asyncfunction的本质到底是什么，它的函数体在执行时，是在宏任务队列taskqueue中执行（宏任务异步回调）还是在微任务队列microq"}, {"id": "6844903549533421581", "title": "使用setImmediate或多进程解决Node.js的CPU-bound任务", "desc": "大量占用CPU计算资源的任务称为CPU-bound的任务。 它的主要特点是CPU利用率较高，而不是I/O操作繁重。 让我们立即举一个例子上看看这些类型的任务在Node.js中的具体行为。 问题：类似于Leetcode-40. Combin…"}, {"id": "6844903854362853383", "title": "深入浅出node.js总结-模块机制（2）", "desc": "name：包名。==由小写的字母和数字组成，可以包含.、_和-，不能有空格。包名必须唯一==。不必带node/js等扩展名 maintainers：包维护者列表。NPM通过该属性进行权限认证 scripts：脚本说明对象。主要被包管理器用来安装、编译、测试和卸载包 devDep…"}, {"id": "6844903588116824071", "title": "nodeJS基础 Stream用法", "desc": "Stream是nodeJS的一个核心模块，在nodeJS中应用非常广泛,比如HTTP服务器request和response对象都是流流的特点1.有序的2.有方向的流分分为两种1.可读流2.可写流流不关"}, {"id": "6844903587986800647", "title": "Node.js中的事件循环（Event Loop），计时器（Timers）以及process.nextTick（）", "desc": "事件环使得Node.js可以执行非阻塞I/O 操作，只要有可能就将操作卸载到系统内核，尽管JavaScript是单线程的。 由于大多数现代（终端）内核都是多线程的，他们可以处理在后台执行的多个操作。 当其中一个操作完成时，内核会通知Node.js，以便可以将适当的回调添加到轮询…"}, {"id": "6844903614935203847", "title": "NodeJs内存管理", "desc": ""}, {"id": "6976058675047694372", "title": "如何将Gatsby应用程序部署到DigitalOcean应用平台上", "desc": "作者选择了/dev/color，作为Write for DOnations计划的一部分接受捐赠。 简介 在本教程中，你将在DigitalOcean的AppPlatform上部署一个Gatsby应用程序"}, {"id": "6844903812860231687", "title": "Node.js & JavaScript Testing Best Practices", "desc": ""}, {"id": "6844903586128887815", "title": "五分钟跑起来快应用", "desc": "快应用联合十大国内手机厂商，终于发布了，也因此公司市场部反馈了个bug，我又把尘封一年的快应用挖出来，更新跑起来。 快应用地址前身，小米新应用。17年的3月份，历时两周，赶在“他们公测”前，发布了第一版，也是目前唯一一版1.0美柚。毕竟我们还是家“小”公司，不会投入太大的资源，…"}, {"id": "6844903612854829063", "title": "[Node.js月刊]2018年第4期", "desc": "如何使用fastify实现http2 push。(fastify：专注于性能提升的web框架，Github star 7k+) 为了提高项目的伸缩性和可维护性，该如何处理不同的环境与配置、多进程的应用如何组织、test文件与build文件又该存放在何处。"}, {"id": "6844903506004934663", "title": "如何通过饿了么 Node.js 面试", "desc": "教你如何通过饿了么大前端的面试, 职位是 2~3 年经验的 Node.js 服务端程序员"}, {"id": "6844903537873272846", "title": "JS维护nginx反向代理，妈妈再也不用担心我跨域了！", "desc": "“问你自己啊，我们后台不配合解决的。” ...... ...... 1. 什么是正向/反向代理 2. 什么是跨域 我要拿C的数据，但请求不到C（例如谷歌），不过我知道B是能请求到C的，于是我去告诉B，B帮我拿回了C的数据，有点翻墙的意思。敲黑板，划重点（C只知道B是他的小伙伴，…"}, {"id": "6906319813342150663", "title": "H5必知必会之快速搭建开发环境", "desc": "今天我们这一篇的主题就是 “快速搭建开发环境”。快速，有多快？答案：取决于你的网速。因为我们真的有这么一个脚手架：qvk。 qvk 是一个集成现代前端工程化最佳实践的通用 Web 开发环境，可用于开发传统 C/S 架构的 Web 应用、SPA（单页应用）、H5（App 内嵌页）…"}, {"id": "6844903829616459783", "title": "Node 12 值得关注的新特性", "desc": "时隔一年，Node.js 12 如约而至，正式发布第一个 Current 版本。 V8 更新带来好多不错的特性。 HTTP 解析速度提升。 启动速度大幅提升。 更好的诊断报告和堆分析工具。 ESM 模块更新。 如果你不了解 Node.js 的 Long Term Support…"}, {"id": "6991349946381238303", "title": "jscodeshift 那点秘密", "desc": "jscodeshift 基于 recast 和 ast-types 做二次封装，其中 Collection 的处理是精髓，回答前文问题的基础上学习更多优秀的代码写法！爆赞"}, {"id": "6997032400043655181", "title": "做一个CLI版的时间管理工具（13）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6994260678722715679", "title": "nodejs体系 之 promise", "desc": "手写Promise 预备知识 函数对象 与 实例对象 两种类型的回调函数 JS的error处理 3.1 错误类型 ReferenceError: 引用的变量不存在 TypeError: 数据类型不正确"}, {"id": "6844903616143179784", "title": "Deno 并不是下一代 Node.js", "desc": "这几天前端圈最火的事件莫过于 ry(Ryan Dahl) 的新项目 deno 了，很多 IT 新闻和媒体都用了标题：“下一代 Node.js”。这周末读了一遍 deno 的源码，特意写了这篇文章。长文预警（5000字，11图）。 0. 为什么开发 Deno？ 这是我上周做的一张…"}, {"id": "6950913297948508173", "title": "2021 年值得关注的 8 个 Node.js 项目", "desc": "值得关注的一些 Node.js 项目，无论是用于自己的应用，还是找开源项目贡献代码，这些都是非常不错的选择"}, {"id": "7002639871252627464", "title": "node-sass安装问题", "desc": "node-sass直接npm i 经常因为下载相关依赖失败导致无法正常安装 对此可以直接手动把相关依赖下载下来放到指定的目录下,这样下载node-sass的时候就会从本地去加载对应的依赖"}, {"id": "6844903526947110919", "title": "基于node.js的脚手架工具开发经历", "desc": "我们团队的前端项目是基于一套内部的后台框架进行开发的，这套框架是基于vue和ElementUI进行了一些定制化包装，并加入了一些自己团队设计的模块，可以进一步简化后台页面的开发工作。 这套框架拆分为基础组件模块，用户权限模块，数据图表模块三个模块，后台业务层的开发至少要基于基础…"}, {"id": "7001863862416834567", "title": "Node.js 的基本概念[翻译]", "desc": "想象一个 Web 应用程序每秒向服务器发送数百个请求，该服务器每次只处理一个请求，然后再转移到另一个请求。您可能会遇到一些性能问题，并为您的用户提供糟糕的体验。"}, {"id": "6965382058973593636", "title": "node 内存溢出了？ 看看这篇。", "desc": "背景 在之前的一篇文章中， 我们遇到了一个项目在构建时内存溢出的问题。 当时的解决方案是: 直接调大 node 的内存限制，避免达到内存上限。 今天听同事分享了一个新方法，觉得不错， 特此记录， 顺便"}, {"id": "6864163222187540488", "title": "从 0 到 1 node 项目管理系统：构建篇-jenkins", "desc": "Jenkins 是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于 Hudson（Hudson 是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins 用 Java 语言编写，可在 Tomcat 等流行的 servlet 容器中运行，也…"}, {"id": "6844904200619425799", "title": "node实战系列：帮黄老师完善饿了吗项目", "desc": "学一项技术最好的方法就是用这个技术做点什么。 学习node的时候，看完一遍觉得自己能打能抗，第二天就做回了从前那个少年。可惜不是张无忌，太极剑法看完忘了就吊打倚天剑。在下看完忘了，那便是忘了。故决定做个项目巩固一下知识 整个项目是完全前后端分离的项目，包含后台接口，后台页面，前…"}, {"id": "6934987500540657701", "title": "2021 Node.js Stream 漫游指南", "desc": "其中基础概念这部分主要讲解 Node.js Stream 是什么，以及内部的工作原理。并附有动画来演示内部工作流程，可以帮助您更清晰的了解不同的流的工作方式以及差别。 如果对基础概念已经有了一个较为清晰的了解，则可以直接看第二及第三部分，将第一部分作为参考来阅读。 而管道链这一…"}, {"id": "7005197602064957454", "title": "Node 全局对象", "desc": "Node 全局对象的整体介绍，介绍了node全局对象中各个细节，以及每一部分的作用，适合node入门者"}, {"id": "6935701501008412708", "title": "都 2021 年了，也该抛弃 ExpressJS 了", "desc": "Express 长期以来都是 Node.js 生态系统的事实标准。随便找个学习 Node 的教程，都会介绍 Express。 在最近的 JS 调查中，Express 在各方面都是第一。 尽管如此，Express 并非很棒的技术，本该在 2015 年就停止使用。 Express …"}, {"id": "6913532512346046472", "title": "base64格式的数据是如何实现的", "desc": "Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。 对于前端来说，一切可以放路径的地方，都可以使用base64来替代。 node中的buffer对象可以通过toString('base64')将bu…"}, {"id": "6998440011389468703", "title": "node.js 上传文件图片", "desc": "接下来逐一解决，先来处理关键点，实际离线不离线的主重要重要的是能够批量的把图片给处理了。所以我们先来解决如何使用`原生js`结合`node`来处理文件与文件夹"}, {"id": "6844903536656908296", "title": "D2 - 打造高可靠与高性能的React同构解决方案", "desc": "随着React的兴起, 结合Node直出的性能优势和React的组件化，React同构已然成为趋势之一。享受技术福利的同时，直面技术挑战，在复杂场景下，挑战10倍以上极致的性能优化。"}, {"id": "6883401594097008653", "title": "如何拦截node的require", "desc": "都说知其然而知其所以然，require是我们做node开发接触最多的一个函数，了解require的原理有助对node模块系统的理解，还可以打出很多骚操作。 我比较喜欢带着问题去思考学习，所以这里也先来看两个例子。 jest 对 module 的 mock, 通过对module的…"}, {"id": "6844903693419053064", "title": "React SSR重构踩坑记录(持续更新)", "desc": "场景：第一次在node中直接使用import Story from '../js/containers/story';就会报这个错误。 错误说明：node本身使用的是commonjs的语法，支持的模块引入和导出方式为require以及module.export，然而es6定义的…"}, {"id": "6844903549349036046", "title": "[阿里国际UED]唯快不破，让nodejs再快一点", "desc": "Node.js(服务端)的角度来看，JS本身的执行时间至关重要，如果执行时间从30ms降到3ms, 理论上QPS就能提升10倍，换句话说，以前要10台服务器才能扛住的流量现在1台服务器就能扛住，而且响应时间更短.那到底Node端如何做性能优化呢?"}, {"id": "6844903608501141517", "title": "Node.js util 模块解读", "desc": "Node模块解读第四篇util模块，之前已经介绍过vm模块、Buffer模块、Event模块 。 util模块最初的目的是为内部API提供一些工具支持，然而很多工具函数对于普通的开发者来说也十分有用，因此util模块将一些方法实现了对外暴露。本文主要探讨以下三方面的工具函数： …"}, {"id": "6844903621541412871", "title": "axios源码分析——拦截器", "desc": "上一篇中分析了axios发送一个简单的get请求的完整的流程，传送门，戳这里。 这一篇讲主要来分析下axios是如何实现拦截器的，这里只分析请求拦截器。 axios是一个函数我们都知道了，interceptors属性是什么时候定义上的呢？上一篇分析了axios上好多属性都是从c…"}, {"id": "6844903730563776526", "title": "微信小程序推广二维码海报Node.js实现版", "desc": "最近公司的微信小程序项目由于业务需求需要实现二维码推广海报，而小程序的服务端代码是用node.js实现的，由于是第一次使用node.js作为服务端来实现图片的相关处理，不免走了一些坑。所以为了避免大家也像我一样花费不必要的时间爬坑，就将我再开发过程中遇到的一些过程记录下来，供大…"}, {"id": "6906402016957431821", "title": "hydra-microservice 中文手册（3W字预警）", "desc": "Hydra 是一个 NodeJS 包(技术栈不是重点，思想！思想！思想！)，它有助于构建分布式应用程序，比如微服务。 消息负载平衡（message load balancing）、日志记录（logging）、呈现（presence）和运行状况（health）监视等功能。 Hyd…"}, {"id": "6844903997422174222", "title": "简单了解node stream(一)", "desc": "开篇先吓吓自己。画画图，分析分析代码加深自己的理解。 stream 就像是一个抽象的模型（有点像水管），能有序的传输数据(有点像水)，需要时就拧开水管取点用，还可以控制大小。 Writable - 可写入数据的流（例如 fs.createWriteStream()）。 Read…"}, {"id": "6844903570634965006", "title": "package.json详解", "desc": "当你通过npm下载一个package的时候，在这个package的根目录下都会有一个package.json文件，这个文件描述了该package的详细信息，比如名称，版本号，作者等。还有些属性是作为开发人员需要熟悉的，下面的属性都是在开发过程中一些常用的属性。 该属性描述了pa…"}, {"id": "6844903753284337672", "title": "用NAN写一个nodejs的c++扩展", "desc": "NAN的优势在于可以屏蔽不同版本Node的API，使得C++扩展可以wirte once, compile anywhere，一份C++扩展可以适用于不同版本的Node.js。这里的c++扩展实现的功能是一个求和的扩展(hello world太多了，写个不一样的) 在开发之前我…"}, {"id": "6844904022340534285", "title": "2020年Node.js将会有哪些新功能", "desc": "2019 年是 Node.js 诞生的第 10 个年头，npm 上可用的包数量超过了 100 万。 Node.js 本身的下载量也在持续增长，同比增长了 40％。另一个重要的里程碑是 最近 Node.js加入了 OpenJS 基金会，该基金会承诺改善项目的状况和可持续性，并改善…"}, {"id": "6844903866174013454", "title": "简单入门Buffer", "desc": "如果你第一次认识buffer，你可能会很陌生，因为在前端的JavaScript中并没有buffer，因为前端只要做一些字符串操作或DOM基本操作就能满足业务需求。 buffer是Node底层通过C++申请的内存，通过JS来分配内存。也就是存放文件的缓冲区。那么问题来了，为什么叫…"}, {"id": "6847902220021661709", "title": "入门 Node.js Net 模块构建 TCP 网络服务", "desc": "想做一个简单的 Web API，这个时候就需要搭建一个 Web 服务器，在 ASP.NET 中需要 IIS 来搭建服务器，PHP 中需要借助 Apache/Nginx 来实现，对于新手在还没开始之前看到这么多步骤，也许就要放弃了，但是在 Node.js 中开启一个 Web 服务…"}, {"id": "6844903616382255118", "title": "Node之父ry：Node中的设计错误", "desc": "他主要讲述了过去他在设计 Node 时犯的一些错误，包括 Node 安全、构建系统（GYP）、package.json 等方面上的问题，并阐述了开发新项目 Deno 背后的一些故事、原因和未来规划。"}, {"id": "6844903586766258184", "title": "从Nest到Nesk -- 模块化Node框架的实践", "desc": "Nest是一个深受angular激发的基于express的node框架，按照官网说明是一个旨在提供一个开箱即用的应用程序体系结构，允许轻松创建高度可测试，可扩展，松散耦合且易于维护的应用程序。 在设计层面虽然说是深受angular激发，但其实从后端开发角度来说类似于大家熟悉的J…"}, {"id": "6844903923036192782", "title": "Node.js Event loop 原理", "desc": "流程是这样的，你执行 node index.js 或者 npm start 之类的操作启动服务，所有的同步代码会被执行，然后会判断是否有 Active handle，如果没有就会停止。 这里运行了 app.listen 函数就是一个 active handle，有这个的存在，就…"}, {"id": "6844903695134507022", "title": "node.js中exports与module.exports的区别分析", "desc": "关于Node.js中的exports和module.exports，很多时候都比较容易让人混淆，弄不清楚两者间的区别。那么我们就从头开始理清这两者之间的关系。 事实上，Node.js应用在编译的过程中会对JavaScript文件的内容进行头尾的封装。例如： 在进行了头尾封装之后…"}, {"id": "6844903505656823816", "title": "nodejs第一天", "desc": "我们来到Node的官方网站的时候就能看到这么一句话，这句话体现了node的几大特点，我们来一一细看。 一、 Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. 我们学习一个东西，首先我…"}, {"id": "6844903513990889480", "title": "VS Code 折腾记 - (10) 你想发布自己捣鼓的snippets到VSCode插件市场!", "desc": "趁着周六日的空闲时间,了解了下vscode插件或者代码片段的发布套路. 本来找下GG有啥文章前人走过的文章,最后似乎木有,那就只能自己摸索了. 从官方文档入手!!实践出真理.... 学会这个,你能收获什么?见仁见智... 但是起码你知道怎么发布了,且对 npm的package.…"}, {"id": "6867690497545076743", "title": "手把手教你实现 Promise", "desc": "很多 JavaScript 的初学者都曾感受过被回调地狱支配的恐惧，直至掌握了 Promise 语法才算解脱。虽然很多语言都早已内置了 Promise ，但是 JavaScript 中真正将其发扬光大的还是 jQuery 1.5 对 $.ajax 的重构，支持了 Promise…"}, {"id": "6844903646535106568", "title": "手把手教你用原生JavaScript造轮子（一）——分页器（文章内容已过期，可不看）", "desc": "日常工作中经常会发现有大量业务逻辑是重复的，而用别人的插件也不能完美解决一些定制化的需求，所以我决定把一些常用的组件抽离、封装出来，形成一套自己的插件库。同时，我将用这个教程系列记录下每一个插件的开发过程，手把手教你如何一步一步去造出一套实用性、可复用性高的轮子。 要开发一个J…"}, {"id": "6992768998534283271", "title": "如何做一个在线转码小说的爬虫网站", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 作为一个有6年书龄的程序员，不搞一波爬虫来看小说真是对不起自己。 所以，我就又开始了愉快的搞事情之旅。 不过接下来我要做的是在线转码，"}, {"id": "6844903689765781517", "title": "用Vue+Node从零开始实现拼多多前后端商城项目 — 记录踩坑之旅（上篇）", "desc": "1. web端-项目部分效果演示 项目整体结构用vue-router搭建的全局路由，一级版块包括：首页、推荐、搜索、聊天、个人中心、登录/注册、购物车等，二级版块我主要做了首页的二三级购物流程页面。基本上把电商项目的整个流程跑通了。 2. 服务器端 服务器端我主要用的是Node…"}, {"id": "6995178117304156174", "title": "Node.js的非阻塞I/O", "desc": "老早就想学Node.js了，觉得前端一定要是懂服务端知识，并且可以自己独立完成一个小型全栈项目的，但是碍于时间因素，上学期学了点基础之后，就再也没空学，正好今天科二过了，Node.js我又来卷你了！！"}, {"id": "6844904048768843784", "title": "pm2 实践指南", "desc": "pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务，所以特地对 pm2 进行一次比较全面的学习+实践…"}, {"id": "6844903764478918663", "title": "9102 年了，学点 Docker 知识", "desc": "最近工作需要，开发时需要用到 Docker。这篇文章从零开始演示几个 Demo，如果你之前没接触过 Docker，可以一步步跟着操作，加深对 docker 的理解。 无论你所处的公司大或小，多多少少都遇到开发环境和生产环境不一致的问题。有些开发者用 Windows，有些开发者用…"}, {"id": "6844903682799042568", "title": "node进阶——之事无巨细手写koa源码", "desc": "koa是一个基于nodejs的web开发框架，特点是小而精，对比大而全的express，两者虽然由同一团队开发，但各有其更适合的应用场景：express适合开发较大的企业级应用，而koa致力于成为web开发中的基石，例如egg.js就是基于koa开发的。 关于两个框架的区别和联…"}, {"id": "6864724659904970760", "title": "如何使用 Docker 高效部署 Node 应用", "desc": "一个合理并且高效的部署方案，不仅能够实现快速升级，平滑切换，负载均衡，应用隔离等部署特性，而且配有一套成熟稳定的监控。 kubernetes 把 Node 应用视作一个服务端应用的黑盒子，完美匹配了以上条件，越来越多的团队把 node 部署在 k8s 上。 但在此之前，需要先把…"}, {"id": "7002981241016287239", "title": "node服务中,@escook,@hapi/joi报错:Cannot mix different versions of joi schemas", "desc": "Cannot mix different versions of joi schemas 问题 解决办法: 将 node_modules/escook/express-joi"}, {"id": "6856485896724676615", "title": "从 0 到 1 node 项目管理系统：搭建基础平台（上）", "desc": "在上一个博客中，已经通过 Egg 对 Gitlab Api 进行了基础的封装，本文将会围绕 DevOps 流程介绍项目设计（偏后台），需要读者具备一定的后端知识储备。 此项目是从零开发，在正式开发之前，需要先将需求理清，以免设计出现严重缺陷，造成后期开发或拓展困难（路可以走的慢…"}, {"id": "6844903590729875463", "title": "腾讯一面总结-web前端-2018.4.11", "desc": "面完给我的总体感觉，要求你掌握的不仅有广度，更重要的是深度。我准备的烂大街的面试题没怎么问，可能自己欠缺的东西还比较多，不断学习，不断进步，再奶自己一口，fighting!!! 框架用过哪些，感觉他们不只需要熟练运用，更看重理解的深度，比如要懂源码，react中diff算法的思…"}, {"id": "6844904049632870407", "title": "从零开始 Node实现前端自动化部署", "desc": "1. 待部署工程本地完成打包构建 2. 确定远端部署目录及发布文件夹 3. 修改配置 4. 运行自动化部署 5. 查看远端效果 6. 再次部署 原目录已备份（开启远端备份生效） 对于简单前端项目，频繁部署时，xshell、ftp两种方式较为繁琐，而jenkins 等自动化部署服…"}, {"id": "6844903700327038984", "title": "厌倦了写活动页？快来撸一个页面生成器吧！", "desc": "如果你经常接触一些公司的活动页，可能会经常头疼以下问题：这些项目周期短，需求频繁，迭代快，技术要求不高，成长空间也小。但是我们还是马不停蹄的赶着产品提来的一个个需求，随着公司规模的增加，我们不可能无限制的增加人手不断地重复着这些活动。这里我就不具体介绍一些有的没的的一些概念了，…"}, {"id": "6875120334602371085", "title": "基于NodeJS从零构建线上自动化打包工作流（H5-Dooring特别版）", "desc": "NodeJS在前端领域正扮演着越越重要的地位，它不仅可以让前端工作者使用javascript编写后端代码，还能方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动，非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。 所以作为一…"}, {"id": "6844904029160472583", "title": "从零到部署：用 Vue 和 Express 实现迷你全栈电商应用（二）", "desc": "我们在平时所用到的一些网站、App，它们会将我们的数据进行保存，当我们关闭这些网站或者 App 后，下次打开还能看到我们之前的一些文字、视频记录。在迷你全栈电商应用实战系列的第二篇教程中，我们将通过基于 Node.js 平台的 Express 框架实现后端 API 数据接口，并…"}, {"id": "6908883342034632712", "title": "vivo 商城架构升级-SSR 实战篇", "desc": "一、前言在前面几篇文章中，相信大家对vivo官网商城的前端架构演变有了一定的了解，从稳步推进前后端分离到小程序多端探索实践，团队不断创新尝试。在本文中，我们来分享一下vivo官网商城在Node服务端渲"}, {"id": "6882681067971543047", "title": "如何搭建一个属于自己的脚手架（第二弹）", "desc": "之前写了下比较基操的脚手架搭建，后面去看了@vue/cli的源码，不得不说，确实很正式很规范化。参考了@vue/cli的部分功能，对脚手架进行修改。 @chuhc/cli 脚手架命令行内容，通过命令去初始化项目等等操作。 @chuhc/scripts 项目编译运行打包内容，暂未…"}, {"id": "6876751431374929934", "title": "如何实现H5可视化编辑器的实时预览和真机扫码预览功能", "desc": "所见即所得的设计理念在WEB IDE领域里一直是备受瞩目的功能亮点, 也能极大的提高 web coder的编程体验和编程效率. 笔者接下来就将对H5可视化编辑器的实时预览和真机扫码预览功能做一次方案剖析, 为大家在设计类似产品的时候提供一些思路. 我们还是基于笔者开发的 H5-…"}, {"id": "6999984717516783652", "title": "Node.js基础入门", "desc": "Node.js基础入门 简介，特点，包括异步I/O，单线程和跨平台等；模块化机制以及无模块化机制存在的问题；包管理机制，NPM常用命令；异步编程callback，promise，await，event"}, {"id": "6865953350211338253", "title": "Node.js入门系列（二）模块、REPL", "desc": "上一期《Node.js入门系列（一）》更新以后，有很多小伙伴评论和私信，这个系列能学到很多东西。整理和修改了一个星期，终于，写出了自己比较满意的版本。 Node.js入门系列将是一整套参考教程，系列将以结构脑图、文字解释、概括总结、练习实例、面试考点的形式讲述知识点。如果喜欢，…"}, {"id": "7000285322772742157", "title": "使用Node.js实现基金信息定时推送", "desc": "微信邮箱效果一览 工具准备 Node.js最近的版本都可 服务器或闲置电脑一台 微信开通QQ邮箱提醒 代码准备 使用的模块主要是3个：axios用于网络请求获取数据、nodemailer用于邮件发送、"}, {"id": "6967901728242925581", "title": "五分钟开发属于你自己的代码生成器", "desc": "温馨提示：本文是《新生代小鲜肉之代码生成器》的延续篇，如果你还不知道 ncgen 这个小鲜肉，那最好先去 Look 一 Look 《新生代小鲜肉之代码生成器》 丹尼尔：蛋兄，上次别后，按照你教我的那一"}, {"id": "6844903951742025736", "title": "NodeJS有难度的面试题，你能答对几个？", "desc": "所有的模块都是 Module 的实例。可以看到，当前模块（module.js）也是 Module 的一个实例。 在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程我们成为Tick。 每个Tick的过程就是查看是否有事件待处理。如果有就取…"}, {"id": "6899332861414146055", "title": "【译】Deno 已经死了吗？", "desc": "在今年 5 月，不止冠状病毒成为人们关注的焦点，在 JavaScript 和后端开发社区中，Deno 也成为了热点话题。Deno 的第一个稳定版本已经发布，业界对此大力宣传。我也一样，迅速地参与到 Deno 并且期望能尝试点新东西。 我写的一篇关于 Deno 的文章，仅仅通过谷…"}, {"id": "6998805881005539342", "title": "从小说爬虫入门 Node.js 吧 基于 Node.js 开发一个完整的项目", "desc": "今天我们要来开发一个小说爬虫，首先我们得选择一个适合我们爬取的网站笔趣阁，当然网上的笔趣阁有很多，但理论上经过我们的配置，我们可以达到写一个爬虫就可以爬尽各种“笔趣阁”。"}, {"id": "6972124481053523999", "title": "这些node开源工具你值得拥有(上)", "desc": "通过阅读 awesome-nodejs 库的收录，我抽取其中一些应用场景比较多的分类，通过分类涉及的应用场景跟大家分享工具"}, {"id": "6991830625594408967", "title": "electron集成dll的几个关键点｜8月更文挑战", "desc": "之前做electron集成外设读卡器dll的时候，花了不少的功夫，正好今天下午需要在新电脑上重新安装一下环境，所以记录一下几个关键点。 设备 windows电脑 安装环境软件之前考虑node版本 这里"}, {"id": "7004030878728847396", "title": "vscode 调试 nodejs 程序", "desc": "nodejs 服务在vscode 中的调试 1、安装vscode 略（这不用说了吧） 2、写一个能跑的nodejs 程序 其实看到这个，自己已经有一个能跑的nodejs 程序，不用看我的了 我这里是我"}, {"id": "6844903714164047879", "title": "看看这些被同事喷的JS代码风格你写过多少", "desc": "现在写代码比以前好多了，代码的格式都有eslint,prettier,babel(写新版语法)这些来保证，然而，技术手段再高端都不能解决代码可读性（代码能否被未来的自己和同事看懂）的问题，因为这个问题只有人自己才能解决。我们写代码要写到下图中左边这样基本上就功德圆满了。 你可以…"}, {"id": "6911987404039520270", "title": "手把手教你实现一个cli工具", "desc": "一说起脚手架，你肯定会想到vue-cli。有些人看到vue-cli那个酷炫的功能和交互就会打退堂鼓。如果我告诉你，我们只需要具备nodejs基础就能写出vue-cli那样的功能来，你是不是稍微会兴奋点呢？接下来跟着我的步伐一点一点揭开脚手架的面纱吧。 cmd输入node -v,…"}, {"id": "6940523830658105351", "title": "nodejs服务端系统架构设计基本思想及常见场景解决方案", "desc": "本文旨在给前端同学在进行nodejs服务端项目的架构设计时提供一些基本思路及常见场景的解决方案。开发node服务本质上属于服务端开发的范畴，但由于今时今日nodejs开发各种应用的普及、前端工具链向服务端的延伸等，对前端同学全栈开发能力的要求也日渐提高，故写下此文。由于服务端开…"}, {"id": "7001136864077824031", "title": "Mongoose 时间戳（timestamps）", "desc": "Mongoose Schema 有一个 timestamps 选项，告诉 Mongoose 自动管理文档上的 createdAt 和 updatedAt 属性。例如，下面介绍如何在 User 模型上启"}, {"id": "7000607734815162376", "title": "Node.js 异常捕获与退出机制：为什么我的程序不退出？", "desc": "JavaScript 中，虽然使用异步事件队列简化了并发事件的处理，但也增加了异常的情况和复杂度。于是，在编写 Node.js 程序时，我们常常会遇到这样的问题：为什么我的程序就是不退出？"}, {"id": "6995829177865732104", "title": "Node的模块机制介绍", "desc": "Node应用由模块组成，其模块系统借鉴了CommonJS模块规范，但是并未完全按照规范实现，而是根据自身需求增加了一些特性，算是CommonJS模块规范的一个变种。"}, {"id": "6979511969736818701", "title": "如何开发一个cli工具", "desc": "脚手架可以帮助我们通过简单的命令来快速构建内容，目前比较常见的脚手架有vue-cli、create-react-app等，它是团队提升效率的重要手段。一起来一步一步的开发一个简易的脚手架工具吧！"}, {"id": "6963922820971790372", "title": "使用Node crypto模块实现前后端数据加密", "desc": "使用Node crypto模块实现前后端数据加密,后台使用的是 express+crypto,前端使用 vite+vue3搭建的项目"}, {"id": "6844903891083984910", "title": "想学Node.js，stream先有必要搞清楚", "desc": "流的英文stream，流（Stream）是一个抽象的数据接口，Node.js中很多对象都实现了流，流是EventEmitter对象的一个实例，总之它是会冒数据（以 Buffer 为单位），或者能够吸收数据的东西，它的本质就是让数据流动起来。 注意：stream不是node.js…"}, {"id": "6922612857331056648", "title": "工作效率upup，一起来实现一个Node.js-CLI开发工具吧", "desc": "我们平时项目开发中，经常会有很多类似的代码文件，而我们在使用的时候也会经常的去复制粘贴。为此我之前也写过一篇文章，探讨过提高开发效率的方法，但是说实话，也并不是很好用。 看如今火热的前端框架，都有自己的CLI工具，例如Vue CLI，creat-react-app等等，搭建项目…"}, {"id": "6989160892961128485", "title": "一个简易 前端 node 热更新", "desc": "简单代码实现node热更新——【server代码更新client端浏览器页面自动刷新的功能】提高nodejs学习效率"}, {"id": "6941576023645356069", "title": "nodejs中错误捕获", "desc": "一般来说，我们将错误简单的分为两种类型：操作错误、编码错误。 写代码的时候都会处理一些常见的操作错误，例如JSON.parse总是会和try...catch一起，例如网络故障、远程服务器返回500等。这些错误并非bug。 对于明确的操作错误类型，直接处理掉。 对于预料之外你不知…"}, {"id": "6844903588125212680", "title": "模块机制", "desc": "在实应用中，JavaScript的表现能力取决于宿主环境中的API支持程程。在Web 1.0时，只有对DOM、BOM等基本的支持。随着Web 2.0的推进 ，HTML5崭露头角，它将Web网页带进Web应用的时代，在浏览器中出现了更多、更强大的API供JavaScript调用。…"}, {"id": "6844903507653296142", "title": "基于HTML5 Canvas的工控SCADA模拟飞机飞行", "desc": "能开飞机的感觉酷酷的！这篇文章最吸引人的地方是飞机能按照轨道的弧度飞行，而且飞机的部分不全是依靠obj模型完成的，需要控制的部分是添加进模型中的，这个方法也是非常方便"}, {"id": "6844903496492253192", "title": "学习之旅：我用javascript玩机器学习", "desc": "javascript玩机器学习？很新鲜，喜欢的进来看看"}, {"id": "6844903612900982797", "title": "ShadowNode v0.8.0 发布", "desc": "看完了上面那么一大堆的特性，是不是可以原谅 Delay 2个多月了呢！其实这三个月的工作远不止这些，我们在稳定性上做了很多工作，特别是在 WebSocket、MQTT 以及 TLS 这三个模块上，并且 ShadowNode 本身也在 Rokid 内部积极应用在了我们诸多产品中了…"}, {"id": "6844903603807715335", "title": "light house 3.0 发布", "desc": "Lighthouse 3.0 is out! 3.0 features faster audits, less variance, a new report UI, new audits, and more. CLI. Run npm install -g lighthouse…"}, {"id": "6844903619163062285", "title": "promise异步发展史", "desc": "JS 中最基础的异步调用方式是callback，它将回调函数callback传给异步API，由浏览器或 Node 在异步完成后，通知JS引擎调用callback。对于简单的异步操作，用 callback 实现，是够用的。但随着负责交互页面和 Node 出现，callback方案…"}, {"id": "6844903550502305805", "title": "Node.js design pattern : module", "desc": "Node.js design pattern一书中对Node的Module模块机制这一块，我觉得讲的挺透彻和易懂，这里根据自己理解做下总结。 自定义一个简单的模块加载方法loadModule，基本思路跟nodejs一致，将加载的模块内容包裹在一个函数里面实现变量的隔离，保证模块…"}, {"id": "6844903657821962253", "title": "IMWEB前端大会", "desc": "IMWEB前端大会将于10月14日在深圳科兴科学园举行"}, {"id": "6844903470839889928", "title": "通过 Jest 学习 node url 模块", "desc": "推荐全局安装 Jest, 然后就可以快乐的使用 Jest 了。"}, {"id": "6844903583201099784", "title": "浅析浏览器与nodejs中的event loop", "desc": "这篇文章我们来了解和简单的分析一下浏览器和node环境中的event loop（事件循环）。 有些小伙伴可能听说过eventloop这个名词，但是没有了解过，接下来我们就来了解一下。 我们先来看一组代码。 我们来捋一下。代码的执行肯定是由上自下而我们这里有两个定时器setTim…"}, {"id": "6844903509679144974", "title": "【webVR翻译】使用A-frame零基础一小时制作冬日雪人特效", "desc": "A-frame是一款基于WebGL库three.js构建的WebVR框架，Web开发人员使用它可以很方便地创建虚拟现实场景。尽管three.js在创建WebGL的场景方面已经够用了，但A-frame通过引入实体-组件-系统模式的JavaScript库，比起three.js能更进…"}, {"id": "6844903952023027720", "title": "揭开Node.js的神秘面纱", "desc": "前言：上周刚在组里做了一个关于node.js的技术分享，内容通俗易懂且简单明了。普遍反映不错，所以将它分享在掘金平台，希望更多需要了解node.js的人可以看到 1. 什么是Node.js? 基本概念：基于Chrome V8引擎的javascript运行环境。 换言之：首先，n…"}, {"id": "6844903778475343879", "title": "[译]IO 处理——NodeJS 事件循环 Part 4", "desc": ""}, {"id": "6844904041391063047", "title": "随笔——缓存系列开篇", "desc": "跨过了2019来到了2020年，新年新气象，准备写一些系列性质的文章，旨在更好的对知识归纳总结，更系统的理解一块知识面。好的废话不多说，2020年开篇的主题是缓存系列，是个程序员或多或少都跟缓存打过交道，作为一个Java程序员大部分时候还是在应用层使用缓存，接触的缓存框架和中间…"}, {"id": "6844903593015787527", "title": "Node.js can HTTP/2 push!", "desc": "This article was co-written by Matteo Collina, a Technical Steering Committee member of Node.js and Principal Architect @nearForm, and Jinwo"}, {"id": "6844903566360985613", "title": "[英] 在 Node.js 中使用 Promise.prototype.finally", "desc": "Promise.prototype.finally() recently reached stage 4 of the TC39 proposal process. This means the Promise.prototype.finally() proposal was a"}, {"id": "6844904114036457485", "title": "angular前端项目启动报错内存问题  --max-old-space-size", "desc": "angular前端项目启动报错解决方式为扩大node的内存在当前工程目录下的node_modules\\.bin\\ng.cmd添加以下代码--max_old_space_size=4096添加位置如图在"}, {"id": "6844903641959268359", "title": "美团技术沙龙第40期：前端遇上黑科技，打造全新界面体验与效率", "desc": "本次交流，为大家揭秘如何让 Hybrid 项目和 Native 体验一致，如何让项目只需要交互稿便可以开始研发，如何让页面首帧速度优化 70% 以上。同时我们邀请到百度的迪波威分享 Node.js 在百度扛起百亿级访问量的实践。"}, {"id": "6844903520076840974", "title": "Turbo: 5x faster than Yarn & NPM, and runs natively in-browser", "desc": "IntroducingTurbo:5xfasterthanYarn&NPM,andrunsnativelyin-browser🔥Note:ThisispartofatalkI’mgivingatGoo"}, {"id": "6844903622338150407", "title": "【JSConf EU 2018】主题总结 (部分主题已有中文文章）", "desc": "JavaScript 开发者大会是一个围绕 JavaScript 开发者为中心的活动，全球各地都有分支，包括 JSConf EU、JSConf US、JSConf AU 等等，当然，最为国内开发者熟悉的便是我们的 JSConf CN 了。 历时两天的 JSConf EU 201…"}, {"id": "6844903598837465101", "title": "NodeJS 微信公共号开发 - 响应微信发送的Token验证", "desc": "使用 NodeJS 进行微信公共号开发，首先需要响应微信发送的Token验证"}, {"id": "6879295352965464072", "title": "Node.js必知必会学习笔记(第二章)", "desc": "失败的方法一的基本思路：声明一个空数组(dirArr)和一个目标路径('./wwwroot'),利用fs.readdir对目标路径目录进行读取，如果该目录下有目录可读取数据会保存在data里，接着对data数据进行循环遍历筛选，想要利用fs.stat对data中判断为目录的数据…"}, {"id": "6844903727824896007", "title": "React源代码解析（2）：组件的挂载", "desc": "jsx语法是如何解析为虚拟dom的,接下来我将聊聊虚拟dom是如何挂载到真实dom上的。 我读的是React^15.6.2的源代码,因为最新的React^16.6.3版本，引入了Fiber架构,因为时间有限,Fiber我暂时没弄的太明白，但是它主要作用是优化组件的更新，所以不影…"}, {"id": "6844903568202268685", "title": "parcel-v1.6.0更新日志（翻译）", "desc": "文章是Parcel的主要开发者devongovett写的, 很值得一看, 于是翻译并发布出来. Parcel更新很迅速. Parcel v1.6.0是继v1.5.0三周后的一个重大更新, 其中包括超过15项新特性, 大量的bugfix和改进. 较为突出的有: ⚛️ 默认支持R…"}, {"id": "6844903778177515534", "title": "05_Node js 文件管理模块 fs", "desc": "fs.stat 检测是文件还是目录。 fs.mkdir 创建目录。 fs.writeFile 创建写入文件。 fs.appendFile 追加文件。 fs.readFile 读取文件（异步）。 fs.readFileSync 读取文件（同步）。 fs.readdir 读取目录。…"}, {"id": "6844903751245922318", "title": "Koa2第一篇: 图解Hello World学习源码", "desc": "个人觉得学习源码需要带着目的去看, 才能达到效果, 但是公司又没有上Node, 没有实践怎么办呢?最近发现通过调试Koa2源码也是个不错的法子。 关于Node下调试推荐阅读下:《Node.js 调试指南》。 我们这里只需要学习如何在vscode下调试即可。 具体就不详情说了, …"}, {"id": "6844903795722305550", "title": "45 Amazing Node.js Open Source for the Past Year (v.2019)", "desc": "For the past year, we’ve compared nearly 12,000 Node.js open source tools and projects to pick Top 45 (0.38% chance). The tools and project…"}, {"id": "6844903567204024333", "title": "使用 TypeScript 构建 Koa2 项目的最佳实践", "desc": "使用 TypeScript 构建 Koa2 项目的最佳实践"}, {"id": "6844903623088930830", "title": "技术分享 | Koa框架源码分析", "desc": "koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套， 并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件， …"}, {"id": "6844903645964681223", "title": "循序渐进教你实现一个完整的node的EventEmitter模块", "desc": "node的事件模块只包含了一个类：EventEmitter。这个类在node的内置模块和第三方模块中大量使用。EventEmitter本质上是一个观察者模式的实现，这种模式可以扩展node在多个进程或网络中运行。本文从node的EventEmitter的使用出发，循序渐进的实现一"}, {"id": "6844903622229098503", "title": "[JSConf EU 2018] 大脑控制 Javascript", "desc": "本文主要探索的是交互。 日常的生活离不开交互，我们的智能手环、语音输入、感应系统、面部识别、生物反馈全都是比较新型的交互方式。 回归到最初的生物活动： 当你想走路的时候，这个信号触发大脑产生信号，大脑再把信号传递给身体，身体得到信号，才会有走路这个动作。 作者就根据这样一个最基…"}, {"id": "6844903792018718727", "title": "NodeJS Https HSM双向认证实现", "desc": "工作中需要建立一套HSM的HTTPS双向认证通道，即通过硬件加密机（Ukey）进行本地加密运算的HTTPS双向认证，和银行的UKEY认证类似。 AES_128/AES_256的会话AES密钥长度分别为16/32字节。 TLS 1.1 在计算finish报文数据时，进行的是MD5…"}, {"id": "6844903625144156173", "title": "求不更学不动之Node.js多线程", "desc": "伴随10.5.0的发布，Node.js 新增了对多线程的实验性支持（worker_threads模块）。 Node.js由于JS的执行在单一线程，导致CPU密集计算的任务可能会使主线程会处于繁忙的状态，进而影响服务的性能，虽然可以通过child_process模块创建子进程的方…"}, {"id": "6844903624179449863", "title": "为什么要有事件循环机制（Event Loop）", "desc": "事件循环机制（Event Loop）是全面了解javascript代码执行顺序绕不开的一个重要知识点。虽然许多人知道这个知识点非常重要，但是其实很少有人能够真正理解它。特别是在ES6正式支持Promise之后，对于新标准中事件循环的理解就变得更加重要了。这里我们不具体讲Even…"}, {"id": "6844903705762873352", "title": "基于 Babel 来实现一个前端模板", "desc": "先前我们前端模板用的是 primer-template，这是一个语法和 EJS 类似的轻量级的 JS 模板。但是它不支持全局变量、不支持嵌套函数、不支持 HTML Encode 等。综合考虑了下决定还是基于 Babel 自己重新来撸一个吧。"}, {"id": "6844903588125212679", "title": "Node.js HTTP介绍  tcp模拟http服务", "desc": "req和res分别代表请求对象（可读流）和响应对象(可写流)。其中req是http.IncomingMessage的实例，res是http.ServerResponse的实例。 res.end([data],[encoding])：即可写流的end方法，结束响应，告知客户端所有…"}, {"id": "6844903588028743687", "title": "Node TCP /UDP 简易聊天室", "desc": "Node.js为实现tcp提供了一个模块->net使用时直接require这个模块创建一个tcp服务net.createServer(callback),回调函数是连接事件的监听器，当连接到来时才会执"}, {"id": "6844903682711126029", "title": "APPKIT打造稳定、灵活、高效的运营配置平台", "desc": "美团App、大众点评App都是重运营的应用。对于App里运营资源、基础配置，需要根据城市、版本、平台、渠道等不同的维度进行运营管理。如何在版本快速迭代过程中，保持运营资源能够被高效、稳定和灵活地配置，是我们团队面临的重大考验。在这种背景下，大众点评移动开发组必须要打造一个稳定、…"}, {"id": "6844903591497449486", "title": "Web SCADA 电力接线图工控组态编辑器", "desc": "SVG并非仅仅是一种图像格式， 由于它是一种基于XML的语言，也就意味着它继承了XML的跨平台性和可扩展性，从而在图形可重用性上迈出了一大步。如SVG可以内嵌于其他的XML文档中，而SVG文档中也可以嵌入其他的XML内容，各个不同的SVG图形可以方便地组合， 构成新的SVG图形…"}, {"id": "6844903778563391496", "title": "当我们在说事件循环时，我们在说什么", "desc": "梳理一下浏览器与Node中的事件循环。"}, {"id": "6844903777892483080", "title": "[译]定时器，Immediates 和 process.nextTick——NodeJS 事件循环 Part 2", "desc": ""}, {"id": "6844904002421784583", "title": "node 梳理（一）：npm 相关", "desc": "npm 全称为 node package manager，即 node 包管理。 所谓的包，是多个文件的集合。 npm 包分为全局包、本地包。 nrm 全称为 npm registry manager，即 npm 的镜像源管理工具。 使用这个工具我们可以在不同的 npm 源间切…"}, {"id": "6844903919802384398", "title": "serverless在微店node领域的探索应用", "desc": "目前微店中台团队为了满足公司大部分产品、运营以及部分后端开发人员的尝鲜和试错的需求，提供了一套基于图形化搭建的服务端接口交付方案，利用该方案及提供的系统可生成一副包含运行时环境定义可立即运行的工程代码，最后，通过 “某种serverless平台” 实现生成后代码的部署、CI、运…"}, {"id": "6844904199017201678", "title": "Node流入门    （一天一篇，防止脑瘫）", "desc": "流在我看来是一门比较高深的学问，不可能轻易的就掌握并且总结完。这里仅仅是对stream的入门介绍，大家在项目中遇到的问题肯定不是简单的使用就能解决的，还是需要多看文档进行复习。 流是数据的集合，就像数组和字符串。 其中的差别就是流是不会一次性全部获取到的，不然为什么叫做流。 像…"}, {"id": "6942083653770215431", "title": "浅谈Node中的模块化", "desc": "从最简单的加减乘除运算来举例说明，为了方便理解这里都没有采用ES6的语法。 以上通过一些简短的代码介绍了模块化发展大致情况。 ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：export 和…"}, {"id": "6942298266549780487", "title": "Node.js 包管理器 NPM 讲解", "desc": "包管理器又称软件包管理系统，它是在电脑中自动安装、配制、卸载和升级软件包的工具组合，在各种系统软件和应用软件的安装管理中均有广泛应用。对于我们业务开发也很受益，相同的东西不必重复去造轮子。 每个工具或者开发语言都有相应的包管理器，好比 Ubuntu 的 apt-get、Cent…"}, {"id": "6844903720094810120", "title": "javascript 资料型態/结构验证库 : Skeletons", "desc": "当初专案需要将资料以JSON格式储存在本地端，万一资料结构出了问题或是不符合预其，后面程式都会出问题，因此想写一个简单直觉的纯JS资料验证方法，并开源到npm上。 希望对大家有帮助。喜欢可以给个星:) 有任何讨论都欢迎。 特别的是 Function 广义来说也是属于物件。 等等…"}, {"id": "6844903552565903368", "title": "js学习之异步处理", "desc": "学习js开发，无论是前端开发还是node.js,都避免不了要接触异步编程这个问题,就和其它大多数以多线程同步为主的编程语言不同,js的主要设计是单线程异步模型。正因为js天生的与众不同，才使得它拥有一种独特的魅力，也给学习者带来了很多探索的道路。本文就从js的最初设计开始，整理…"}, {"id": "6844903778630500366", "title": "[译]事件循环最佳实践——NodeJS 事件循环 Part 5", "desc": ""}, {"id": "6844903778173321224", "title": "03_Node js 模块化 CommonJS", "desc": "CommonJS 就是为 JS 的表现来制定规范，因为 JS 没有模块系统，标准库较少，缺乏包管理工具，所以 CommonJS 应运而生，它希望 JS 可以在任何地方运行，而不只是在浏览器中，从而达到 Java、C#、PHP 这些后端语言具备开发大型应用的能力。 服务器端 Ja…"}, {"id": "6844903817834676237", "title": "Node.js内部是如何捕获异步错误的？", "desc": "Node.js内部是如何捕获异步错误的？"}, {"id": "6844903636233879565", "title": "node之HTTP  从服务端感受ajax和form", "desc": "ajax发送请求,需要传输数据,数据有不同的类型,所以也是靠请求头告诉后台处理逻辑传输数据的方式有很多种http:1.0,1.1(keep-alive)复用连接,2.0https新特点双向通信,多路复"}, {"id": "6844903591770062855", "title": "如何编写一个前端框架之二－执行时间(译)", "desc": "本章会阐述浏览器端执行异步代码的各种不同方法。你将会了解到关于事件循环和定时技术比如 setTimeout 和 Promises 之间的差别。 大多数人可能对诸如 Promise，process.nextTick()，setTimeout，或许还有 requestAnimati…"}, {"id": "6844903510681600008", "title": "根据矩阵变化实现基于 HTML5 的 WebGL 3D 自动布局", "desc": "矩阵在数学中是非常经典的一个知识，好好利用数学和物理中的知识真的能创造出 big things！拖动“弹力球”就会自适应，简直太酷啦！"}, {"id": "6844903496643280910", "title": "使用Node.js理解和测量Http时序", "desc": "理解和测量HTTP时序帮助我们去发现客户端与服务器、服务器与服务器之间通信的性能瓶颈。本文阐述了在一次HTTP请求中的时序，并展示了如何在Node.js中进行测量。"}, {"id": "6844903952782213127", "title": "NodeJS模块机制及其应用", "desc": "模块引用：模块所在的上下文提供require方法，能够接受模块标识为参数引入一个模块的API到当前模块的上下文中。 模块定义：在模块中，存在一个module对象以代表模块本身，同时存在exports作用模块属性的引用。 模块标识：模块标识即为require方法的参数，它要求必须…"}, {"id": "6844903581959585800", "title": "从实例代码讲解Node.js Event loop执行机制（1.0.1）", "desc": "Node是基于单线程的(主要主线程是单线程，用来执行同步任务。等遇到异步任务的时候，会调用另外一条异步线程来处理异步任务，如：setTimeout 这些会影响主线程运行的，需要等待一段时间) close callbacks 阶段: 比如socket.on(‘close’, ca…"}, {"id": "6844903825103388686", "title": "【核心模块】node.js", "desc": "这里建议使用 var、let、const 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。 fs.read() 读取文件(从指定的文件描述符 fd 中读取数据并写入 buffer 指向的缓冲区对象)，需要先执行fs.open()打开文件后，在其回调…"}, {"id": "6844903582089625608", "title": "AVA测试框架内部的Promise异步流程控制模型", "desc": "最近将内部测试框架的底层库从mocha迁移到了AVA，迁移的原因之一是因为AVA提供了更好的流程控制。 这个Sequence类可以理解成集合的概念，这个集合内部包含的每一个元素可以是由一个case组成，也可以是由多个case组成。这个类的实例当中runnables属性(数组)保…"}, {"id": "6844903522098479118", "title": "管理 Node.js 进程从未如此优雅", "desc": "说到 Node.js 的进程模型，脑子里第一个闪现的可能是 Cluster 模块，亦或是 Master / Worker 进程模型，在长期的使用过程中，我们逐渐发现，这样在应用的开发早晚会有局限性，除了不够优雅之外，每次增减进程或者自定义进程都会产生不可预知的问题。 在一些特定…"}, {"id": "6911945391579594760", "title": "关于模块导出", "desc": "背景在使用ts+node过程中，发现一个现象。搭建过程使用module.exports导出会引发命名重复的ts报错。但是使用exportdefault则不会。那么我们就来整理一波模块导出相关的知识。模"}, {"id": "6844903512380325895", "title": "Node.js EventEmitter模块源码浅析", "desc": "本次尝试浅析Node.js中的EventEmitter模块的事件机制，分析在Node.js中实现发布订阅模式的一些细节。"}, {"id": "6844903502557380621", "title": "TypeOrm： 可运行在 NodeJS, Browser, Cordova 等平台的 Orm 框架", "desc": "TypeORM is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap and Ionic platforms and can be used with TypeScript and JavaScript (ES5"}, {"id": "6844903504776003598", "title": "node文件批量重命名", "desc": "在一个实际需求中，需要对一批文件(如：文本、图片)进行重命名，按照数字编号。正好借此熟悉了一下node的fs文件操作，写了一个批量修改文件名的脚本。"}, {"id": "6906063583314968590", "title": "Node-邂逅http模块", "desc": "路径分发这个我都会在代码中进行讲解,直接看代码吧我们先来看看req对象拿到路径,是不是可以判断一下这个路径是什么,然后返回到对应的路径就可以了紧接着来看看res对象res对象其实就是http.Serv"}, {"id": "6844903640965054477", "title": "Node中的事件循环", "desc": "每个阶段都有自己的任务队列，当本阶段的任务队列都执行完毕，或者达到了执行的最大任务数，就会进入到下一个阶段。 这个阶段会执行被 setTimeout 和 setInterval 设置的定时任务。 当然，这个定时并不是准确的，而是在超过了定时时间后，一旦得到执行机会，就立刻执行。…"}, {"id": "6844903717603377165", "title": "如何为你的 angular app构建一个第三方库", "desc": "Angular 团队 在 angular6 中，使得创建 Angular 第三方库变得更为简单。如果你以前尝试过操作，你会发现其实不是很简单！ 首页我们构建一个搭建一个简单的环境，环境里面包含一些组件和服务以及一些接口。 在 angular-cli 第6个之后版本。配置文件的方…"}, {"id": "6844903846309789704", "title": "前后端分离之更好的mock你的后端api", "desc": "在一个web应用的开发周期中, 一般前端与后端都是并行开发的, 各自完成自己的开发工作后进行联调, 联调通过再进行提测/发布. 开发过程中, 前端都会以后端提供的 api 文档作为标准, mock 模拟 api 返回数据, 以确保在开发中就保证功能的完整性. 而关于如何更好的进…"}, {"id": "6844903540889124878", "title": "前后端分离与Node和NPM的那些事", "desc": "现在的前端同学如果去面试的话，面试的问题肯定会有你了解前后端分离吗，你了解nodejs吗？在没有了解的时候感觉这是个什么东西，好高大上，去网上查了查资料，再多做几个demo，终于对传说中的前后端分离以及nodejs有了一些了解。 其实在技术这个行业里面没有什么是绝对好的技术也没…"}, {"id": "6942084181337833480", "title": "Node模块化", "desc": "随着前端js代码复杂度的提高，JavaScript模块化这个概念便被提出来，前端社区也不断地实现前端模块化，直到es6对其进行了规范。 JavaScript最初的作用仅仅是验证表单，后来会添加一些动画，但是这些js代码很多在一个文件中就可以完成了，所以，我们只需要在html文件…"}, {"id": "6844903769730203661", "title": "node源码详解（二 ）—— 运行机制 、整体流程", "desc": "来自博客野路子程序员的分享。介绍nodejs从启动到加载javascript文件的执行流程。"}, {"id": "6844904048320053256", "title": "《深入浅出Node.js》学习笔记（九）", "desc": "JavaScript运行在单个进程的单个线程上。它带来的好处是：程序状态是单一的，在没有多线程的情况下没有锁、线程同步问题，操作系统在调度时也因为较小上下文的切换。可以很好地提高CPU的使用率。 1. 服务模型的变迁 从“古”至今,Web服务器的架构以及经历了几次的变迁。服务器…"}, {"id": "6844903630416379911", "title": "Event Loop详解", "desc": "事件循环其实就是入栈出栈的循环。上面例子中说到了setTimeout，那setInterval呢，Promise呢等等等等，有很多异步的函数。但是这些异步任务有分宏任务(macro-task)和微任务(micro-task)： macro-task包括： setTimeout,…"}, {"id": "6844903939670818830", "title": "基本的 Promise 和 Async 函数的用法", "desc": "实习已经结束很久了，但是还有很多事情拖着没做，报告也还没有给老板，现在休息了一周开始慢慢做。这里主要总结一下实习过程中遇到的 Node.js 中异步的问题。 阮一峰的博客已经讲的特别清楚了，我这里就记录一下阅读阮一峰博客和自己使用的心得。阮一峰的博客 Promise 对象有两个…"}, {"id": "6844903625089613831", "title": "记一次通过c#运用GraphQL调用Github api", "desc": "最近在折腾使用Github api做个微信小程序练练手，本篇文章就是在这个过程中记录。 这是一个多级对象嵌套的查询，这里就不继续展开了。关于egde和node在下文会有少许讲解。对GraphQL有兴趣进行更深入了解的可以自行研究学习，我自己也是刚入门，不坑大家了：），官网是ht…"}, {"id": "6844903713715273742", "title": "zanePerfor前端性能监控系统高可用之Mongodb副本集读写分离架构", "desc": "HI!，你好，我是zane，zanePerfor是一款最近我开发的一个前端性能监控平台，现在支持web浏览器端和微信小程序段。 我定义为一款完整，高性能，高可用的前端性能监控系统，这是未来会达到的目的，现今的架构也基本支持了高可用，高性能的部署。实际上还不够，在很多地方还有优化…"}, {"id": "6844903577253576712", "title": "来，一起来实现一个符合Promise/A+的Promose（1.0.1版本）", "desc": "为解决异步函数的回调陷阱，开发社区不断摸索，终于折腾出 Promise/A+。它的优势非常显著： 这套方案在迭代中逐步完善，最终被吸收进 ES2015。不仅如此，ES2017 中还增加了 Await/Async，可以用顺序的方式书写异步代码，甚至可以正常抛出捕获错误，维护同一个…"}, {"id": "6844903841817722888", "title": "编写node 插件", "desc": "我们推荐使用您自己熟悉的，并且秉承stylelint的编写规则惯例，包括命名、选项、消息、测试和文档。 您的插件规则命名必须有命名空间，例如：your-namespace/your-rule-name。如果您的插件只提供一个简单的规则或者您不能想到一个很好命名空间，您可简单用`…"}, {"id": "6844903576087560206", "title": "template汉字提取 & 有道Api翻译", "desc": "为了简化vue-i18n国际化实现的小工具。"}, {"id": "6901093313756332040", "title": "Node系列之node基础入门", "desc": "之前有过一次面试，对于前端开发者，会一门后台语言这是必要的了。 后续会针对这些问题，出一篇文章，欢迎大家的关注。 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高…"}, {"id": "6906125459352715272", "title": "复盘node项目中遇到的13+常见问题和解决方案", "desc": "笔者之前陆陆续续接手过几个nodejs项目, 也参与过几个有点意思的nodejs开源项目, 最近把其中遇到的一些问题和解决方案做一个梳理, 避免大家继续踩坑. 话不多说我们开始吧~ 1. window和mac下设置NODE_ENV变量的问题 从start指令中我们可以发现我们用…"}, {"id": "6844903617971879949", "title": "手把手教你撸一个简易的 webpack", "desc": "随着前端复杂度的不断提升，诞生出很多打包工具，比如最先的grunt，gulp。到后来的webpack和Parcel。但是目前很多脚手架工具，比如vue-cli已经帮我们集成了一些构建工具的使用。有的时候我们可能并不知道其内部的实现原理。其实了解这些工具的工作方式可以帮助我们更好…"}, {"id": "7002783906642559006", "title": "node 密码加密", "desc": "node 密码加密 const md5 = crypto.createHash('md5') return md5.update(content).digest('hex'"}, {"id": "6918260779472912392", "title": "浅谈nodejs中间层", "desc": "nodejs的出现为前端行业带来了无限的可能性,让很多原来只负责客户端开发的同学也慢慢开始接触和使用服务器端技术. 虽然nodejs带来了很多的好处,但是它也存在自身的局限性.和那些传统老牌的编程语言相比,如JAVA,PHP.nodejs并不能成为它们的替代品,而且在可预估的未…"}, {"id": "6954595557876695076", "title": "技术周刊：Node.js 16发布；中国首个 JavaScript 语言提案在 ECMA 进入 Stage 3", "desc": "前端快爆 Firefox 88 正式发布，主要包含以下特性： 正式禁用 FTP 协议，计划在 Firefox 90 版本中完全删除 FTP 支持。此前，Safari 14、Chrome 87 已禁用 "}, {"id": "6844903878253608974", "title": "作为一个前端工程师也要掌握的几种文件路径知识", "desc": "之前在做webpack配置时候多次用到路径相关内容，最近在写项目的时候，有一个文件需要上传到阿里云oss的功能，同时本地服务器也需要保留一个文件备份。多次用到了文件路径相关内容以及Node核心API的path模块，所以系统的学习了一下，整理了这篇文章。 作者简介：koala，专…"}, {"id": "6997057355015782431", "title": "Node.js基础学习-流", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 学习贵在坚持, 笔记是灵魂, 温故而知新, 时不时翻一翻, 回顾一下知识点, 加深记忆, 事半功倍! 这里记录学习 Node.js的-流-"}, {"id": "6844903633012817927", "title": "吉他和弦推导算法", "desc": "当一个民谣小哥抱着吉他哼唱着《情非得已》时，他右手扫着音孔处的琴弦，左手变换着按着琴颈处的琴弦，一段简单的弹唱便看起来有模有样。在不看脸不看唱功的情况下，是什么原理才赋予这位小哥如此风骚的魅力呢？ 这就是吉他伴奏。 而他只是一个吉他初学者，还没办法给歌曲编配伴奏，只好从网上找来…"}, {"id": "6844903608706678797", "title": "Node 在有赞的实践", "desc": "1. 从 Koa 到 阿童木（Astroboy） 有赞最早的一个比较完整的 Node 项目是公司内部的一个管理系统，这个系统是用 Node 全栈开发的，主要包括一个给 HR 用的员工管理系统和给小伙伴用的 APP。就像大多数公司一样，我们第一个 Node 项目也是直接用 Koa…"}, {"id": "6844904001578729485", "title": "Koa还是那个Koa，但是Nodejs已经不再是那个Nodejs", "desc": "曾几何时，在Nodejs 8以前的年代，我们被JS的回调机制虐得死去活来，想说爱并没有那么容易。而Koa的出现，尤其是co模块，让我们趋之若鹜。精简的代码风格，高效的性能，以及可以使用JS的新语法。都是广大JSer的向往。正如Koa介绍的那样【Expressive middle…"}, {"id": "6976925486714716174", "title": "mysql环境配置以及搭配 sequelize 使用", "desc": "使用sequelize的好处是它可以帮我们把关系数据库的表结构映射到对象上，从而使对sql语句不太懂的同学上手起来也不那么困难。"}, {"id": "6844904093475930125", "title": "《大前端进阶 Node.js》系列 必知必会必问（面试高频）", "desc": "很多前端初学者，特别是在校大学生，遇到的第一个技术瓶颈就是今天要讲的 Node.js，其实主要还是一些重要的概念没有理解，一些基础的知识没有掌握，比如编译原理。 PS：前端小伙伴也要重视计算机基础哦，等你工作越久，体会应该就会越深啦~ 很多看似很复杂的东西，其实追溯到底层，也就…"}, {"id": "6844904080955932680", "title": "CommonJS 和 ES6 Module 究竟有什么区别？", "desc": "带着这些疑问和好奇，希望阅读这篇文章能解答你的疑惑。 在 ES6 之前，ECMAScript 并没有提供代码组织的方式，那时候通常是基于 IIFE 来实现“模块化”，随着 JavaScript 在前端大规模的应用，以及服务端 Javascript 的推动，原先浏览器端的模块规范…"}, {"id": "6996159617805860900", "title": "nodejs--express数据库连接步骤", "desc": "第一步:打开xampp,启动(start)mysql,打开shell命令 第二部:用vscode新建一个后缀名为sql的文件 第四部:在VScode界面中输入 第五步:返回第一步打开shell窗口,输"}, {"id": "6993224664705138702", "title": "nodejs环境变量 、.env文件以及dotenv的使用", "desc": "nodejs中获取环境变量；.env文件；dotenv；dotenv-expand；webpack打包时注入环境变量"}, {"id": "6985338520801902628", "title": "前端猛男带你走进nodejs系列（三）", "desc": "一、nodejs之events模块 1、事件驱动模型 Nodejs 使用了一个事件驱动、非阻塞 IO 的模型（有兴趣的同学可以回去看一下系列一），events模块是事件驱动的核心模块。很多内置模块都继"}, {"id": "6982416460723257352", "title": "vscode 烟花抖动效果实现原理揭秘", "desc": "最近一直在研究 vscode 插件，今天给大家一分享一个效果特别炫的插件，名字叫 power mode。 编写代码边放烟花、编辑器还会抖动。 效果很炫，但是我们肯定不能满足于会用，得研究下它是怎么实现"}, {"id": "7001464972870058020", "title": "fetch是怎么取代ajax的?", "desc": "#### fetch 简介 * Fetch API 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 fetch() 方法，"}, {"id": "6991848361527607327", "title": "Node.js 文件系统模块 | 8月更文挑战", "desc": "文件系统模块（简称 fs）允许我们访问计算机上的文件系统并与之交互。 使用 fs 模块，我们可以执行以下操作： 创建文件和目录 修改文件和目录 删除文件和目录 读取文件和目录的内容 ... 本文将向您"}, {"id": "6960527999603064846", "title": "淘系张挺带你规划职业路径，扫码参与直播", "desc": "在5、6双月，我们策划了“Java主题月” 以及“掘力计划成长系列直播”，不仅给大家准备了 3 场干货满满的技术直播，还有 1 场线下 “Java主题沙龙”。不仅可以从 BAT 技术大佬处获得“初入职"}, {"id": "6844903871693717517", "title": "三步教你用Node做一个微信哄女友(基友)神器，小白可上手", "desc": "不知道大家最近有没有被python版的《微信每日说》刷屏呢，他可是霸占了github的python热门快两周了。我们前端的小伙伴是不是也看着有点眼馋呢，因为毕竟是不那么熟悉的python语言，学起来和用起来肯定没有那么舒服。想想要是用我们熟悉的js语言做一个属于自己的哄女友神器…"}, {"id": "6914245886042341389", "title": "从零打造一款轻量且天然支持SSR的CMS系统——simpleCMS", "desc": "2年前笔者开发了一款基于 nodejs 的全栈开源 cms 系统 XPCMS, 主要是为了解决技术开发者搭建自身内容平台的局限以及降低使用成本, 虽然1.0版本已经完成, 但是从整体部署和二次开发的便捷度上还是存在很多缺点, 更加适合有一定技术能力的开发者来使用. 为了解决 X…"}, {"id": "6996844957772283935", "title": "前端+Nodejs视频传输方案", "desc": "一般来说，网页上展示的视频，都是由后端传递给前端的，那么，后台是如何来完成视频传输的这个操作的呢，我们这里以 node 后台为例"}, {"id": "6844904170642735118", "title": "一杯茶的时间，上手 Koa2 + MySQL 开发", "desc": "凭借精巧的“洋葱模型”和对 Promise 以及 async/await 异步编程的完全支持，Koa 框架自从诞生以来就吸引了无数 Node 爱好者。然而 Koa 本身只是一个简单的中间件框架，要想实现一个足够复杂的 Web 应用还需要很多周边生态支持。这篇教程不仅会带你梳理 …"}, {"id": "6985339795392167973", "title": "npm把包安装到了什么地方", "desc": "准备花一段时间把Node的官方文档仔细的读一遍，然后总结一些常见的内容。今天总结了7个比较小的问题，汇总的比较简单。 NodeJs和浏览器的异同点 两者都使用Javascript。浏览器主要处理用户交"}, {"id": "6844903831994630158", "title": "用一次就会爱上的cli工具开发", "desc": "最近接手任务——使用nodejs开发一个公司内部使用的cli工具，简而言之就是输入一行命令快速搭建好项目结构，也可以通过不同的命令引入不同的文件。 首先要基于node环境,然后我们需要知道cli是什么？cli是command-line interface的缩写，即命令行工具，常…"}, {"id": "6994818939687534629", "title": "做一个CLI版的时间管理工具（九）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6866435508487225358", "title": "如何搭建一个属于自己的脚手架", "desc": "本文比较基操，主要是有一个流程概念。第二弹已出：传送门 所谓的脚手架，在我看来，就是一个集成项目初始化、调试、构建、测试、部署等等流程，能够让使用者专注于code的工具。用白话说就是，一个建筑已经搭好架子，我们只需要不断加入砖头就行。 脚手架命令脚本：我们所需要安装到全局的脚手…"}, {"id": "6895217723476738061", "title": "微服务过时了 - Serverless了解一下 | 🏆 技术专题第七期征文", "desc": "你知道吗我们天天使用的石墨文档、微博、芒果TV都在全部或部分使用Serverless技术。 其实知乎也是用的leancloud。 技术的发展使我们有可能不花一分钱、不雇佣一个只强大的后端团队也可以建立一个媲美大厂的高可用服务端。 1. 石墨文档案例 石墨文档并不是使用了常规意义…"}, {"id": "6844903848654585870", "title": "有助于理解前端工具的 node 知识", "desc": "缘起 平时写惯了业务代码之后，如果想要了解下 webpack 或者 vue-cli，好像是件很难上手的事情🙁 。拿 webpack 来说，我们可能会对配置熟悉点，但常常一段时间过后又忘了，感觉看起来不"}, {"id": "6979199376249847821", "title": "NodeJS中的Process对象解析", "desc": "process是一个全局的变量，所以使用的时候是不需要执行require操作，可以直接使用。 这里分两部分来说明，第一个就是可以借助它去获取进程信息，比如进程工作的时候本地是一个什么样的环境，通过pr"}, {"id": "6854573211124924430", "title": "Node.js + Socket.io 实现一对一即时聊天", "desc": "实现一对一即时聊天应用，重要的一点就是消息能够实时的传递，一种方案就是熟知的使用 Websocket 协议，本文中我们使用 Node.js 中的一个框架 Socket.io 来实现。 前端：HTML + CSS + JS 还用到了 Boostrap 来实现我们的页面布局和一些样…"}, {"id": "6844903696258564110", "title": "JavaScript多线程编程", "desc": "浏览器端JavaScript是以单线程的方式执行的，也就是说JavaScript和UI渲染占用同一个主线程，那就意味着，如果JavaScript进行高负载的数据处理，UI渲染就很有可能被阻断，浏览器就会出现卡顿，降低了用户体验。 为此，JavaScript提供了异步操作，比如定…"}, {"id": "6984993061315018782", "title": " 如何自定义实现一个EventEmitter", "desc": "Node采用了事件驱动机制，而EventEmitter就是Node实现事件驱动的基础 在EventEmitter的基础上，Node几乎所有的模块都继承了这个类"}, {"id": "6997793003922259981", "title": "做一个CLI版的时间管理工具（14）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6986452836129193991", "title": "Sentry接入企业微信消息通知", "desc": "一、背景 公司客户端项目是基于Electron开发的，里面集成了一些第三方的插件和库，经常会遇到一些兼容性和性能问题，目前是通过用户反馈，运维去远程协助，处理不了的就会提bug给开发人员排查，部分问题"}, {"id": "6963097187744120862", "title": "从一次重构组件代码来谈谈前端多语言最佳实践", "desc": "重构代码背景 我们的一些业务组件需要支持多语言，这些单独发包的组件翻译文案通常都维护在项目一些文件夹下，并且每个需要翻译的文案在代码中都需要手动用 intl.get(key)包裹来实现运行时翻译，开发"}, {"id": "6865926810061045774", "title": "Node.js日志神器（winston）", "desc": "任何程序都需要记录业务日志，因此各种语言都有对应的日志库，例如 Java 中的 Log2j，在 Node.js 中也有很多选择，例如 winston、log4js、bunyan 等等，其中 winston 简单易用，且支持多种传输通道。 默认会把日志打印到控制台中。我们还可以用…"}, {"id": "6867469476196155400", "title": "一文带你层层解锁「文件下载」的奥秘", "desc": "大家好我是秋风，今天带来的主题是关于文件下载，在我之前曾经发过一篇文件上传的文章（一文了解文件上传全过程（1.8w字深度解析，进阶必备 200+点赞），反响还不错，时隔多日，由于最近有研究一些媒体相关的工作，因此打算对下载做一个整理，因此他的兄弟篇诞生了，带你领略文件下载的奥秘…"}, {"id": "6999542851390898207", "title": "使用Node.js实现RESTful API（八）：错误处理", "desc": "1、处理404 ​ 在Express里404不被认为是出错的结果，我们要做的只是在代码底部加一个中间件去处理没有返回的情况，并且手动返回一个404 2、全局异常错误 ​ 定义错误处理的中间件跟定义普通"}, {"id": "6965020771269902366", "title": "Koa 中返回 html 文件引发的思考", "desc": "在使用 Koa 框架搭建网站时，一般返回 index.html 当做入口文件，这需要设置特定的 response header."}, {"id": "6997267735952539661", "title": "NodeJs总结之Fs文件系统", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战。 Fs是NodeJs的内置核心模块，提供文件系统操作的API 基本操作类 fs.stat() 获取目录及文件信息 fs.write() 将"}, {"id": "6968403360672284703", "title": "消息可靠性设计，看这一篇就够了", "desc": "随着直播、视频等应用的兴起，消息场景也丰富了起来，最典型的就是聊天。具体到教育行业，场景更多，比如签到、答题等，这些场景对消息可靠性提了更高的要求。本文就聊一聊消息可靠性的方案设计。文章较长，欢迎收藏"}, {"id": "6844903792836608008", "title": "前端同构渲染的思考与实践", "desc": "前端同构渲染的相关架构，给我最直观的感受，这是前端渲染最为复杂的一种方案，也是为了追求极致的用户体验不得不去做的一种尝试，虽然 Node.js 的引入赋能了传统前端领域、SEO 优化也不再是个问题，但很明显，这些只是副产品。 我们所知的传统型 SPA，单页面应用，贴近用户端越近…"}, {"id": "6865802427098988551", "title": "Node 在 Controller 层如何校验数据合法性", "desc": "幽默风趣的后端程序员一般自嘲为 CURD Boy。CURD, 也就是对某一存储资源的增删改查，这完全是面向数据编程啊。 真好呀，面向数据编程，往往会对业务理解地更加透彻，从而写出更高质量的代码，造出更少的 BUG。既然是面向数据编程那更需要避免脏数据的出现，加强数据校验。否则，…"}, {"id": "6844903635168526343", "title": "Javascript装饰器的妙用", "desc": "最近新开了一个Node项目，采用TypeScript来开发，在数据库及路由管理方面用了不少的装饰器，发觉这的确是一个好东西。 装饰器是一个还处于草案中的特性，目前木有直接支持该语法的环境，但是可以通过 babel 之类的进行转换为旧语法来实现效果，所以在TypeScript中，…"}, {"id": "6844903865716834318", "title": "基于前端技术生成PDF方案", "desc": "需求分为两步：报告预览和报告生成。 报告预览在前端进行展示，可使用前端技术，如React/Vue等技术栈对其进行还原，数据从服务端获取。 体检报告展示形式如下，格式相对固定，分为四个页面：个人信息页，建议页，原理页，个人信息页与建议页数据来源于服务器。 canvas是HTML5…"}, {"id": "6844903587919691784", "title": "想偷懒的话，toLocaleString 了解一下？", "desc": "hello~亲爱的看官老爷们大家好~最近沉迷于学习其他语言，有一段时间没写文章了。时间一晃就到了4月，再不写就怕彻底懒下去了。这次给大家分享 toLocaleString 的一点技巧，如果需要初始化数字或日期时，不妨考虑一下，会有偷懒奇效哦！ 注意！一般而言，数字与日期的显示是…"}, {"id": "6983566262639001636", "title": "手摸手带你从0到1实现Koa简易版本", "desc": "前言 大家好,我是作曲家种太阳,我相信最好的学习就是输出 这次我会带大家一步步从零到1封装一个Koa框架,让你掌握koa其内部运行原理,更好的使用koa框架."}, {"id": "6844903586275524615", "title": "ES6会这些就够了", "desc": "1. let、const 解构是es6新特性，可以对数组对象内容直接解析。 es6中加入了“`”反引号，反引号中${}处理模版字符串。 4. 函数 5. 数组 6. 对象 7. Class 类 8. Generator 9. async await"}, {"id": "6981692827872788488", "title": "从现在开始用 NanoID 会取代UUID", "desc": "如果你的项目有生成唯一 key 或者使用 uuid 的场合，那么从现在开始，请使用 NanoID。NanoID 是一个创建唯一 key 的轻量级的脚本库"}, {"id": "6844904086819569672", "title": "React Hooks完全上手指南", "desc": "createClass不需要处理this的指向，到了Class Component稍微不慎就会出现因this的指向报错。 不是所有组件都需要处理生命周期，在React发布之初Function Component被设计了出来，用于简化只有render时Class Componen…"}, {"id": "6950455203225141255", "title": "拉新活动必备——node + fc 部署海报生成服务", "desc": "项目介绍公司拉新和分享活动少不了海报的使用，考虑到生成海报是通用工具以及需要处理前端生成海报的各种兼容性问题，我们开发了此项目。"}, {"id": "6955314252702253093", "title": "基于Node框架Nest实现的短链接服务(附源码)", "desc": "日常生活中能见到各种奇怪的短链接，每次点击跳转的时候，笔者都会觉得神奇，这短链是怎么将用户引导到正确页面的呢？"}, {"id": "7000568492416040967", "title": "node.js基础概念", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 node.js的基础架构 Node.js是一个让JavaScript运行在服务器端的开发平台，它让JavaScript的使用范围延伸到了服"}, {"id": "6960843000939282469", "title": "Nodejs 进阶：核心模块 Buffer 常用 API 使用总结", "desc": "模块概览 Buffer是node的核心模块，开发者可以利用它来处理二进制数据，比如文件流的读写、网络请求数据的处理等。 Buffer的API非常多，本文仅挑选 比较常用/容易理解 的API进行讲解，包"}, {"id": "6980958355367952420", "title": "Node图形邮箱手机验证码实现方法总结", "desc": "目录 准备工作 原理解析 方法总结 在线体验 准备工作 安装依赖包 继续打开上次新建的demo文件夹，下载几个依赖包。 svg-captcha 可以创建图形验证码 nodemailer 可以发送电子邮"}, {"id": "6844903829977202702", "title": "技术驱动：前后端的协同效率从哪些方面发力推进", "desc": "Scott 近两年无论是面试还是线下线上的技术分享，遇到许许多多前端同学，由于团队原因，个人原因，职业成长，技术方向，甚至家庭等等原因，在理想国与现实之间，在放弃与坚守之间，摇摆不停，心酸硬扛，大家可以找我聊聊南聊聊北，对工程师的宿命有更多的了解，有更多的看见与听见，Scott…"}, {"id": "6951727383468572708", "title": "child_process子进程模块快【NodeJS】", "desc": "child_process 模块提供了衍生子进程的能力, 简单来说就是执行cmd命令的能力。默认情况下， stdin、 stdout 和 stderr 的管道会在父 Node.js 进程和衍生的子进程"}, {"id": "6986841930252435486", "title": "两种简单的Node.js转发服务实现", "desc": "在很多项目中，都会涉及权限校验接口。如果有第三方的接口请求，我们会让后端帮忙做一次转发。但是对于一些简单的纯前端项目而言，我们可以自己搭建一个简单的 Node.js 服务来实现接口请求的转发。"}, {"id": "6844903554788884493", "title": "实战WebSocket聊天室：从开发到部署上线", "desc": "本文仅对一些关键性的知识点进行解释，具体请Fork源码学习。 Demo页面如果没啥人的话可以自己新建几个页面复制地址进入，每个页面都是一个独立的访客，兼容PC和移动端访问。 socket.io：跨平台的WebSocket通信库，具有前后端一致的API，可以触发和响应自定义的事件…"}, {"id": "6980958131656343566", "title": "Node用户登录与注册功能总结", "desc": "目录 原理分析 实战案例 原理分析 用户注册简易流程图 输入用户名和密码 检查是否存在此用户 存在则返回提示 不存在注册成功 用户登录简易流程图 实战案例 mysql建表 建表的有关方法在这篇《nod"}, {"id": "6983957486571585549", "title": "【node实战系列】异步并发，自定义Promise.allSettled", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 bigo前端开始推广bff，hello农场作为首个bff落地项目，历经2个月，完成了从"}, {"id": "6844903901586522120", "title": "【愣锤笔记】中高级前端进阶之极速通关koa2全栈核心内容（图文并茂）", "desc": "随着Node.js的横空处世，本来目的是解决部分后端的问题，谁知道却无意间给前端开发带来了一场颠覆性的革命，从此前端拉开了现代化开发的序幕。如今，作为前端开发，无论是想进阶或是拓宽个人知识边界，node.js早已是前端必须掌握的了。拿下node.js，你还在犹豫什么？ Koa.…"}, {"id": "6844904169548021768", "title": "2020 年，JS 令一个新人沮丧", "desc": "本文是一篇译文，原文在 Hackers News 上的点数超过 200 点。 我的朋友是一位著名的计算机科学家，他之前没有用过 JS，今天他需要用到 GitHub 的一个 JS 库。而我在过去的 6 年主要的工作是在麻省理工学院进行可用性研究和教学，所以我其实也没什么把握。最终…"}, {"id": "6844903612842246157", "title": "Node.js执行系统命令", "desc": "当然是使用child_process模块了，这个模块翻译过来就是子进程，当然正如其名，这个模块主要是通过产生子进程来发挥作用，下面我们就用实例来看一下。 execSync是exec的同步版本，不过无论是execSync还是exec，得到的结果都是字符串或者Buffer对象，一般…"}, {"id": "6986674433410727950", "title": "NodeJs buffer 缓存区", "desc": "前言 开始写一些博客主要是在看完代码后再温故总结一遍, 也是为了后面回头也能查阅。本系列会从官网的例子出发, 尽可能以链路追踪的方式记录其中源码核心模块的实现。 涉及的知识点 Buffer 缓冲区 E"}, {"id": "6971232532306067463", "title": "【深入探究Node】（3）“异步IO” 有九问", "desc": "1.为什么要异步I/O？ 具体到实处，则可以从用户体验和资源分配这两个方面说起。 用户体验 与前端JavaScript在单线程上执行，而且它还与UI渲染共用一个线程 一样。JavaScript在执行的"}, {"id": "6972430337548746766", "title": "开发基于 gRPC 协议的 Node 服务", "desc": "本文由腾讯文档的前端开发工程师张南华撰写。他曾在 Shopee 主导上万 qps 配置中心项目的研发工作，负责 Node 项目架构、技术方案设计等核心研发工作。"}, {"id": "6981411971832741896", "title": "【深入探究Node】（4）“内存控制” 有十五问", "desc": "你知道Buffer对象吗？Buffer对象是通过V8分配内存的吗？可以利用fs.readFile()和fs.writeFile()方法 来 读写大文件吗？"}, {"id": "6993299285181743134", "title": "Node 03--在Node中使用模板引擎进行渲染", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 使用readdir获取指定路径下的所有文件名 在浏览器中使用模板引擎 1. 安装art-template 2. 通过script标签引入ar"}, {"id": "6844904159133564942", "title": "基于Apify+node+react/vue搭建一个有点意思的爬虫平台", "desc": "熟悉我的朋友可能会知道，我一向是不写热点的。为什么不写呢？是因为我不关注热点吗？其实也不是。有些事件我还是很关注的，也确实有不少想法和观点。 但我一直奉行一个原则，就是：要做有生命力的内容。 本文介绍的内容来自于笔者之前负责研发的爬虫管理平台, 专门抽象出了一个相对独立的功能模…"}, {"id": "6844904202402005000", "title": "服务器端如何获得客户端 IP 地址", "desc": "如果有 x-forwarded-for 的请求头，则取其中的第一个 IP，否则取建立连接 socket 的 remoteAddr。"}, {"id": "6844903505296097288", "title": "babel到底该如何配置？", "desc": "说起ES6，webpack，打包，模块化总是离不开babel，babel作为一个js的编译器已经被广泛使用。在babel的官网是这样介绍它的： 大家都知道js作为宿主语言，很依赖执行的环境（浏览器、node等），不同环境对js语法的支持不尽相同，特别是ES6之后，ECMAScr…"}, {"id": "6865060371481395213", "title": "Node 脚本遭遇异常时如何安全退出", "desc": "一个 Node 相关的项目中，总是少不了跑脚本。跑一个脚本拉取配置、处理一些数据以及定时任务更是家常便饭。 如果在这些重要流程中脚本出错无法及时发现问题，将有可能引发更加隐蔽的问题。 最近观察项目镜像构建，会偶尔发现一两个镜像虽然构建成功，但容器却跑不起来的情况。究其原因，是因…"}, {"id": "6844904192247595022", "title": "聊聊NPM镜像那些险象环生的坑", "desc": "由于国内网络环境的原因，在执行npm i安装项目依赖过程中，肯定会遇上安装过慢或安装失败的情况。有经验的同学通常会在安装完Node时顺便把NPM镜像设置成国内的淘宝镜像。 这样就能爽歪歪应付大部分npm i的安装情况了。当然，这只是解决了大部分的安装过慢或安装失败的情况，随着项…"}, {"id": "6999429127883194398", "title": "了解使用node（一）", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 简介 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时，可以搭建服务器运行JavaScript应用程序"}, {"id": "6844903887871148046", "title": "前端性能优化gzip初探（补充gzip压缩使用算法brotli压缩的相关介绍)", "desc": "通常在看一些面试题问到前端有哪些性能优化手段的时候，可能会提到一个叫做gzip压缩的方法。正好最近在学习node文件流操作和zlib模块的时候，对gzip压缩有了一个新的认识。今天就和大家一起分享一下，gzip是什么，从浏览器请求到收到服务端数据发生了什么。 对，没有错，gzi…"}, {"id": "6844903681096155143", "title": "Vue+Koa+Mongodb 小练习", "desc": "前段时间用vue+koa+mongodb搭建了一个个人博客，因为是第一次写前后交互，发现有很多地方不是特别的完善，同时代码对于新学者来说可读性也不是很大。所以这个小练习，从一个简单的方面入手，希望能给踩过同样多坑的同路人一点启发。 在我今年年初在学习vue以及koa的时候，网上…"}, {"id": "6844903635676053518", "title": "【多图】模仿 egg.js 使用 koa2 搭建项目（一）", "desc": "最开始学 koa，惊讶其简洁，甚至是简陋的语法，觉得自己好像什么都能干，可是好像又什么也干不了。 其中最头疼不是其洋葱模型，而是常用的组件，比如路由和session就有好几个推荐的，官方也调皮，一次维护两，视图组件现在都是自己瞎写凑合着用，个人项目没人管，随便瞎搞了。 后面接触…"}, {"id": "6844903539584532488", "title": "iKcamp团队制作｜基于Koa2搭建Node.js实战（含视频）☞ 中间件用法", "desc": "它的作用是：每收到一个 http 请求，Koa 都会调用通过 app.use() 注册的 async 函数，同时为该函数传入 ctx 和 next 两个参数。而这个 async 函数就是我们所说的中间件。 下面我们简单介绍一下传入中间件的两个参数。 ctx 作为上下文使用，包含…"}, {"id": "6844903664021143566", "title": "参考KOA，5步手写一款粗糙的web框架", "desc": "我经常在网上看到类似于KOA VS express的文章，大家都在讨论哪一个好，哪一个更好。作为小白，我真心看不出他两who更胜一筹。我只知道，我只会跟着官方文档的start做一个DEMO，然后我就会宣称我会用KOA或者express框架了。但是几个礼拜后，我就全忘了。web框…"}, {"id": "6844903504595664910", "title": "趁热点: Gracejs——支撑趣店亿级业务的前后端分离框架，欢迎star :)", "desc": "Gracejs(又称:koa-grace v2) 是全新的基于koa v2.x的MVC+RESTful架构的前后端分离框架。 Gracejs是koa-grace的升级版，也可以叫koa-grace v2。 主要特性包括： 支持MVC架构，可以更便捷地生成服务端路由； 标准的RE…"}, {"id": "6898115442221678605", "title": "NVM、NPM、Node.js的安装选择", "desc": "在安装和使用这三种工具时，我们有很多方式可以选择，这些方法各有优劣，每个人都有自己用起来比较习惯的配置，所以我在这里记录下自己比较习惯的一种安装方式与其他一些可能的选项。 第一种方式非常直接，搜索Node.js，在官网下载需要的的版本并进行安装就可以了，但是一般不推荐这种方式，…"}, {"id": "6981330409556541454", "title": "NVM 常用命令", "desc": "安装&更新 nvm 运行下面命令之一即可安装&更新nvm,或者下载 install 文件进行更新 nvm 会被安装到~/.nvm 目录下,并且会将下面的代码段追加的 profile 文件中(~/.ba"}, {"id": "6844903944624275463", "title": "Koa从零搭建之验证码实现", "desc": "验证码的本质属性——安全性，它除了能够防止恶意破解密码、刷票、论坛灌水、 刷页等行为外，还是用户与网站信息安全的有力保障。本文 基础功能不尽相同，可以自行尝试。 来解决跨域。 随机字符，很简单，我们使用svg-captcha来随机生成字符及图片，将图片返回前端，服务端存取其对应…"}, {"id": "6844903678097227783", "title": "node中的Event Loop", "desc": "关于事件这一块在《深入浅出的nodejs》中很少讲到，书里面只是在第三章提及了4个API方法，比如两个定时器（setTimeout和setInterval），process.nextTick()和setImmediate。 这个输出结果的原因我们已经在上一篇文章中说明，本章就不…"}, {"id": "6844903645969055757", "title": "食用源码：image-size", "desc": "一个Node模块，用于获取任何图像文件的尺寸。 nodejs 的包加载机制会把 '..' 解析成 '../'，然后会尝试去 package.json 内取 main 字段的值，作为文件加载的入口，所以这里加载了 lib/index.js。 通过 process.argv.sli…"}, {"id": "6844903566243528711", "title": "Functional JavaScript: 使用 Transducer 提升函数式性能", "desc": "1. 什么是 Transducer 在函数式编程中，Transducer 是一种用于处理数据的高效、可组合且不会产生的中间数据的函数。 上面是大多数时候的普通写法，不难发现，生成的数组被遍历了三次，并且因为我们只需要 reduce 计算的结果，中间 filter 与 map 函…"}, {"id": "6844903607830069261", "title": "一道题引发的EventLoop思考", "desc": "题目的本质，是考察setTimeout、promise、async await的实现顺序及JS的时间循环方面的相关问题。 这里涉及到同步异步Microtasks和Macrotasks。 Microtasks优先级别高于Macrotasks 其中Microtasks、Macrot…"}, {"id": "6844903898180747278", "title": "[译] 在 Nodejs 中运行多线程", "desc": "Node.js 因为其设计而饱受批评。 与 Java, C 或 Python 等编程语言相比，Node.js 不能直接访问线程显得有些奇怪。我们怎么能并发地执行任务呢？ 好吧，实际上早在 Node.js 11 之前我们就可以使用 cluster 模块来并发/并行地执行代码，正如…"}, {"id": "6844904195611426823", "title": "一文读懂 JWT", "desc": "JWT 全称为 JSON Web Token 是一种在跨域时验证用户的一种措施。 每当下次请求的时候，客户端就会携带上同域名的 cookie，里面就有 sessionId，以此标识用户身份。 这样会有一个问题，如果 网站A 和 网站B 都是同一家公司。现在要求，网站A 登陆了，…"}, {"id": "6844903552486391822", "title": "NODE_ENV跨平台设置", "desc": "其中“set NODE_ENV=PROD”却未在我的Mac下生效，其他成员使用Windows。 原因是Windows下使用set NODE_ENV=xx，Unix下应该为export NODE_ENV=xx，于是不得不区分操作系统进行设置，于是就有了cross-env这个方案。…"}, {"id": "6956487866646003742", "title": "NodeJs(一)", "desc": "##Node简介 Node是JavaScript语言的服务器运行环境，是一个基于Chrome V8引擎的JavaScript运行时。 所谓“运行环境”有两层意思： JavaScript语言通过Node"}, {"id": "6844903922046500871", "title": "through2源码学习及ts版", "desc": "Transform 是一个变换流，既可读也可写 是双工流 Duplex 的特殊形式。Duplex 的写和读没有任何关联，两个缓冲区和管道互不干扰，而 Transform 将其输入和输出是存在相互关联，通过转换函数将流进行转换。 创建一个新的类并继承 stream.Transfo…"}, {"id": "6844904009115910157", "title": "P10：node实现静态服务器 ~ 静态读取文件或文件夹", "desc": "上述代码存在很多回调，代码臃肿可读性差。下面利用异步将回调去除，达到优化效果"}, {"id": "6844904096042844174", "title": "Node 使用 dubbo 协议与 java 进行互相调用", "desc": "前言随着BFF的普及，越来越多的应用使用Nodejs作为中间层来提供SSR、WEBAPI聚合等能力，而类似Java等后端更加偏向于服务下沉，而node和java之间的调用如果走http的话，性能没有r"}, {"id": "6844903728831692808", "title": "前端工程化 / 构建自动化", "desc": "前端工程化的概念在近些年来逐渐成为主流构建大型web应用不可或缺的一部分，在此我通过以下这三方面总结一下自己的理解。 1. 为什么需要前端工程化。 2. 前端工程化的演化。 3. 怎么实现前端工程化。"}, {"id": "6844903594018226190", "title": "UNIX epoll 与 Node.js 事件循环多路分解器", "desc": "select、poll、epoll都是I / O复用的机制，在《UNIX网络编程》里重点讲了select、poll的机制，但select、poll并不是现代高性能服务器的最佳选择。包括现在的Node.js中的事件循环机制（event loop）也是基于epoll实现的。 epo…"}, {"id": "6844903696141123592", "title": "Angular7的新特性", "desc": "Angular7的新特性"}, {"id": "6957857871484682271", "title": "脚手架工作过程", "desc": "实现脚手架工作流程 1.创建一个新的仓库目录： mkdir small-node-js 2.初始化项目并生成package.json文件"}, {"id": "6857748764796157960", "title": "nodejs爬虫", "desc": "robots.txt是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络爬虫），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。 Robots.txt协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐…"}, {"id": "6881931753720643591", "title": "node CLS 全链路追踪以及其实现原理", "desc": "考虑这样一个问题，在复杂系统中，每一个请求过来，我们会调用不同的异步服务(db, fs，微服务等等)，调用过程中如果某一环节出现问题，如何去做链路追踪，或者说如何获取到原始的请求上下文。 在 JAVA/C++ 等多线程服务中，可以通过 TLS(Thread-local stor…"}, {"id": "6844903700205404174", "title": "【译】10个有趣的JSCSS库（2018.10）", "desc": "Tutorialzine每月都会给我们精心挑选优秀的web开发资源，这些资源可以帮助我们解锁最新和最炫酷的网络开发姿势。前端er,让我们一起先睹为快吧！ WatermelonDB是用于构建React和React Native应用程序的下一代数据库。快速，高度可扩展-从数百到数万…"}, {"id": "6844903991386570766", "title": "使用 Github + Hexo 从 0 搭建一个博客", "desc": "最近有几位同学在公众号后台留言问我的博客站是怎么建站的，思来想去，还是写一篇从 0 开始吧。 我们先聊一下前置准备，可能很多同学一听说要自己搭一个博客系统，直接就望而却步。不得有台服务器么，不得搞个数据库么，不需要域名备案么？当然，这些确实是建立一个博客站点需要的东西，如果都没…"}, {"id": "6844903597218496520", "title": "完善  VSCode 的 Node 自动补全", "desc": "这是一篇水文，讲讲踩坑的经历。本文的 Demo 已经上传到我的 GitHub 起因是在写 Node 时，受够了 require ('../../../../helper.js') 这种相对路径。不够直观不谈，如果将来在别的地方用，都不能直接 copy 过来，还得重新计算相对路径…"}, {"id": "6885523406830829575", "title": "【Node.js系列（8）】文件上传原理解析与实现", "desc": "大家上传文件时或许只是获取文件后将内容发送给了后端，至于后端是如何解析的相信大部分同学也都是一知半解。这样会造成很多问题，比如文件上传失败了，当我们定位问题的时候无从下手，后端同学说是前端的问题，而我们又找不到理由去反驳它们，最终我们只能依靠百度。 所以此篇文章会详细介绍文件上…"}, {"id": "6844903685512757256", "title": "深入了解nodejs的事件循环机制", "desc": "一直以来，我写的的大部分JS代码都是在浏览器环境下运行，因此也了解过浏览器的事件循环机制，知道有macrotask和microtask的区别。但最近写node时，发现node的事件循环机制和浏览器端有很大的不同，特此深入地学习了下。 在传统web服务中，大多都是使用多线程机制来…"}, {"id": "6844903661454229518", "title": "【webpack进阶】使用babel避免webpack编译运行时模块依赖", "desc": "babel是一个非常强大的工具，作用远不止我们平时的ES6 -> ES5语法转换这么单一。在前端进阶的道路上，了解与学习babel及其灵活的插件模式将会为前端赋予更多的可能性。 本文就是运用babel，通过编写babel插件解决了一个实际项目中的问题。 1. 遇到的问题 最近在…"}, {"id": "6844903612775137294", "title": "中国行政区划信息JS库china-location", "desc": "经常会在一些项目中用到地址选择的东西，特别是在一些在线商城要填写收货地址的时候，省市区3个联动的下拉列表是最常用的。然后我也突然有一天在一个小项目中要有收货地址时，突然发现好像没有一个现成的库(要能直接npm install xxx)去使用😰，然后在github去搜了一圈，确…"}, {"id": "6952895684886888484", "title": "NodeJS多版本切换使用(Windows)", "desc": "NVM版本管理工具: 下载地址: https://github.com/coreybutler/nvm-windows 安装后的目录: 命令使用: 查看已安装版本列表: nvm list 切换node"}, {"id": "6932361249829158925", "title": "Javascript性能优化【内联缓存】 V8引擎特性", "desc": "引用官方的描述：内联缓存（Inline caching）是部分编程语言的运行时系统采用的优化技术，最早为Smalltalk开发。内联缓存的目标是通过记住以前直接在调用点上方法查询的结果来加快运行时方法绑定的速度。内联缓存对动态类型语言尤为有用，其中大多数（如非全部）方法绑定发生…"}, {"id": "6844903685936381959", "title": "理解event loop（浏览器环境与nodejs环境）", "desc": "众所周知，javascript 是单线程的，其通过使用异步而不阻塞主进程执行。那么，他是如何实现的呢？本文就浏览器与nodejs环境下异步实现与event loop进行相关解释。 浏览器环境下，会维护一个任务队列，当异步任务到达的时候加入队列，等待事件循环到合适的时机执行。 这…"}, {"id": "6844903886285701133", "title": "Node 中的日志收集与 requestId", "desc": "使用 requestId 唯一标识每个请求，有时它又被称为 sessionId 或者 transactionId。 如上，在每次数据库查询时手动对 requestId 进行标记过于繁琐。可以统一设计 logger 函数进行标记 另外可以通过 zipkin 来追踪全链路耗时。"}, {"id": "6844903713061109767", "title": "NodeJs或者命令行爬取网络教程并生成PDF文件，以阮一峰JavaScript教程和ES6教程为例 ", "desc": "当然，不排除有些比较有毅力的同学，把所有url都拿到，然后拼到命令行中，就像我曾经在工作中见过某同事在项目做完后，一行一行的去删console.log()，为的是线上版本的控制台不出现打印的信息，得说下我们使用webpack打包的，这在打包的时候添加一个配置就能解决的问题，我们…"}, {"id": "6883113959394639885", "title": "前端Vue+后端Node.js，手撕一个文件上传功能", "desc": "最近需要做一个文件上传的功能。前端使用Vue，后端使用Node.js。 选择element-UI自带的上传组件el-upload，限制一次只能上传1个zip格式文件，大小不超过10M。大多数上传的场景，都是在el-dialog弹窗组件中包含el-upload组件。 这里不得不提…"}, {"id": "6844903732677705742", "title": "NestJS 6.x折腾记- (0) 开胃菜, TypeORM 连接远程的MySQL(ssh tunnel)及Linux信息过滤裁切基础", "desc": "开发模式有ng6既视感,这对有ng经验的小伙伴来说,莫名的亲切.. 远程数据库是5.7, 备份下来切换到本地的mysql8,因为mysql 8升级了安全机制,没法类似以前那样直连. 导入的时候也不能用...(rest)解耦的方式. 不然会报语法错误"}, {"id": "6844903546266058766", "title": "node 爬虫，使用 Google puppeteer 抓取 One一个 的网页数据", "desc": "puppeteer 就不多介绍了，就是一个无界面化的谷歌浏览器。 作者本人是前端，后端方面的知识不太擅长，感觉漏洞还是蛮多的。 本教程是作者见猎心喜然后把玩了一下写的，有不合理的地方还请包涵。 本例子是使用顺序爬取，没有用并行爬取，并设置了延时器，主要是担心访问频次太高会被屏蔽…"}, {"id": "6844903621281185800", "title": "axios源码分析——请求流程", "desc": "axios就不在里介绍了，直接步入正题，先从一个最基本的get请求来分析下源码。 找到axios/lib/axios.js就直接看到了var axios躺在哪里。 bind返回一个函数wrap，暂且不看里面得话，我们就可以知道instance是一个函数，那么当instance执…"}, {"id": "6844903970335358989", "title": "Node.js 使用JWT对接SSO", "desc": "在上一篇笔记中，提到使用Node.js做了中间层，对接SSO和RBAC系统，这篇就详细的来介绍一下具体实现的流程吧。 先说明一下技术栈，我们前端使用的是Ant Design Pro，后端用的express + jsonwebtoken + express-jwt。 本来想直接扔…"}, {"id": "6912246046441603080", "title": "TylooChat仿微信聊天室", "desc": "该项目初衷是供内部专网办公人员使用,互联网版本仅供大家娱乐(摸鱼),提意见交流用,不做他用,绿色聊天。 生产环境是作为第三方模块嵌入到现有系统中,单点登陆。集成现有系统的组织架构到通讯录中,不需要注册登陆。 tips: 绿色聊天,不要开车,不要上传太大的文件,服务器比较垃圾.."}, {"id": "6950193230088503333", "title": "自定义脚手架学习之commander.js", "desc": "Commander.js是node.js命令行界面的完整解决方案,受 Ruby Commander启发。"}, {"id": "6844903504981524494", "title": "Napa.js 简介", "desc": "本文介绍 Napa.js 的核心概念，带领大家探索 Napa.js 是如何运转起来的。关于它的由来和开发初衷，可以阅读 这篇文章 Zone 是 Napa.js 中的核心概念，它是执行 JavaScript 代码的基本单元，所有涉及多线程相关的内容都离不开 Zone 这个概念。一…"}, {"id": "6975533608278687757", "title": "Node系列学习之Redis(二)", "desc": "Node系列学习之Redis(二)，在Node中使用Redis,完成使用redis存储session数据，学会Redis的基本使用。"}, {"id": "6844903656408498190", "title": "前端离线开发指南", "desc": "最近，由于我们的产品无法满足客户的某些需求，需要去客户现场进行定制开发。 但客户现场禁止联网，只能把源码和工具拷贝过去。这样问题就来了，我们项目基于 npm 在线包管理模式，所以就带来了很多问题。 本文主要介绍如何搭建离线开发环境。 在官网下载 nodejs、vscode、ya…"}, {"id": "6844903585160019975", "title": "webpack4.0优化那些事儿", "desc": "You can also speed up babel-loader by as much as 2x by using the cacheDirectory option. This will cache transformations to the filesystem. …"}, {"id": "6844903689308602381", "title": "做面试的不倒翁：一道事件循环题引发的血案", "desc": "这次我们就不要那么多前戏，直奔主题，我们的龙门阵正式开始。 开局一道题，内容全靠吹。（此处应有滑稽） note: 上面的代码执行环境是 node v10.7.0，浏览器的事件循环和 node 还是有一点区别的，有兴趣的可以自己找资料看一看。 好了，上面的代码涉及到定时器、nex…"}, {"id": "6890168294851117063", "title": "为什么要学习Node.js?", "desc": "一.Node开发概述1.1为什么要学习服务器端开发基础能够和后端程序员更加紧密的配合网站业务逻辑前置，学习前端技术需要后端技术支撑（Ajax）扩宽知识视野，能够站在更高的角度审视整个项目1.2服务器端"}, {"id": "6867027029850587150", "title": "浅析EggJS接入NextJS", "desc": "需要说明的是，本文并非说Next的使用方式或者Egg的使用方式，建议阅读者对Egg和Next有一定了解。本文主要想表达的是对Next的一些吐槽，已经如何和Egg配合使用。最近在思考着一个问题，前端从曾"}, {"id": "6844903860104855566", "title": "大神是怎样用函数式JavaScript计算数组平均值的", "desc": "译者按： 有时候一个算法的直观、简洁、高效是需要作出取舍的。 函数式编程中用于操作数组的方法就像“毒品”一样，它让很多人爱上函数式编程。因为它们真的十分常用而且又超级简单。 .map() 和 .filter()都仅需一个参数，该参数定义操作数组每一个元素的函数即可。reduce…"}, {"id": "6844903830979624974", "title": "Koa2实现基本的登录注册", "desc": "koa是一个基于node实现的一个新的web框架，它是由express框架的原班人马打造的。它的特点是优雅、简洁、表达力强、自由度高。它更express相比，它是一个更轻量的node框架，因为它所有功能都通过插件实现。 此项目只是一个入门级的Demo，重在体现一个正常后台代码结…"}, {"id": "6844903809957756936", "title": "Nodejs中的require函数", "desc": "本文参考Node官网文档版本为v11.12.0。 本文主要分析了Nodejs中require导入JSON和js文件时得到的结果，同时简单涉及到了Nodejs中模块导出module.exports和exports的用法。 故引申出对Nodejs中require的学习。 在Node…"}, {"id": "6847902221028294669", "title": "基于exporess搭建node服务及部署", "desc": "服务器篇node安装node官网环境变量配置淘宝NPM镜像git安装GIT官网PM2安装PM2官网项目部署基本环境已经安装完成，接下来就是项目部署服务云防火墙番外篇--服务器及域名购买与解析服务器购买"}, {"id": "6844903616214499335", "title": "obs+node-media-server+flv.js实现录播和直播", "desc": "这里有很多种场景可以使用，我用显示捕获来示范一下吧... flv.js是来自Bilibli的开源项目。它解析FLV文件喂给原生HTML5 Video标签播放音视频数据，使浏览器在不借助Flash的情况下播放FLV成为可能。具体的介绍请自行google哈，继续刚才的项目"}, {"id": "6844903623651000334", "title": "腾讯云服务器迁移到Vultr", "desc": "好端端的为什么要迁移？因为已经毕业毕业毕业了。。。几天前腾讯云就发信息告诉我学生身份已过期，心里拔凉拔凉的。然后这几天云服务器也要到期了，已经拿不到64元的优惠券了，再也回不到那1元一个月的日子了。但是65元/月的最低配费用着实感觉有点贵，所以决定还是去找个实惠点服务器或vps…"}, {"id": "6844903607070900238", "title": "深入跨域问题(3) - 利用 JSONP 解决跨域", "desc": "什么是跨域，在这篇文章内部就不再讲述了，本文主要着重于实现 JSONP 。 根据同源策略的限制，在 端口，域名，协议 这三者 一个或者多个不同的情况下 ，就会出现跨域限制。 你可以看到，上述返回信息是一串字符串，字符串里写入了调用 jsonCallback() 函数，并传递 一…"}, {"id": "6844904079626338318", "title": "一文搞懂exports和module.exports的关系和区别", "desc": "而最终的导出结果是 module.exports 这个对象. 保持顶层变量（用 var、 const 或 let 定义）作用在模块范围内，而不是全局对象。"}, {"id": "6844903614977146887", "title": "node.js利用socket.io实现多人在线匹配联机五子棋", "desc": "client端的界面这里就不做过多解释了，只要稍微懂点h5就可以自行去 这里下载源代码观看，因为今天的主题主要是socket.io这一块，所以本章只概述client和server是如何通过tcp连接进行交互的。 为什么我们要用嵌入iframe改变src属性的方式来制造页面跳转的…"}, {"id": "6844903566339997704", "title": "gcoord: 转换WGS84、GCJ02、BD09坐标，转换百度高德地图坐标系", "desc": "做过地图相关开发的同学肯定会遇到这样一个问题：同样的经纬度坐标，在百度地图和高德地图上位置不一样。 我们通常用经纬度来表示一个地理位置，但是由于一些原因，我们从不同渠道得到的经纬度信息可能并不是在同一个坐标系下。 不同的坐标系之间可能有几十到几百米的偏移，所以在开发基于地图的产…"}, {"id": "6844903696040476686", "title": "VS Code 快速使用指南", "desc": "最近团队为了保持较好的前端开发规范，鼓励大家使用同一款编辑器，我们选择了vscode, 因为团队大部分人都在用，而且用起来很爽。为了让没有用vscode的同学快速了解它，我收集了网上一些资料加上自己的一点日常使用经验写了这篇介绍文章。 Visual Studio Code （简…"}, {"id": "6844903975301595150", "title": "Node.js 实现抢票小工具&短信通知提醒", "desc": "要知道在深圳上班是非常痛苦的事情，特别是我上班的科兴科技园这一块，去的人非常多，每天上班跟春运一样，如果我能换到以前的大冲上班那就幸福了，可惜，换不得。 尤其是我这个站等车的多的一笔，上班公交挤的不行，车满的时候只有少部分人能硬挤上去。通常我只会用两个字来形容这种人：“公交怪”…"}, {"id": "6988752065501593636", "title": "带你了解SSO登录过程", "desc": "什么是单点登录？ 上图为sso的登录方式，对比传统登录方式，sso只做一次身份验证，而传统需要做多次登录。下图为传统登录方式。 登录类型 无登录状态。需要用户登录。 已登录app1，再次登录app1。"}, {"id": "6844904190662164493", "title": "100 行 js 代码下载抖音无水印视频", "desc": "抖音平台下载一个视频，去掉左上角的水印id。 这时候就会发现，抖音官方下载下来的视频，会有抖音的水印，需要去掉水印。 1. 重定向 2. 一个关键的 ajax 利用上面 html 内嵌 script 获取的两个参数，请求下面的地址。 到这里，抖音官方的流程就走完了。 3. 如何…"}, {"id": "6973277530996342798", "title": "Prisma：下一代ORM，不仅仅是ORM（上篇-）", "desc": "前言 本篇文章将会介绍一个NodeJS社区中的ORM：Prisma。我接触它的时间不算长，但已经对它的未来发展充满信心。"}, {"id": "6962889645189234725", "title": "今天聊：Node.js 如何搭建自动化报表工具", "desc": "我们知道所有的应用都是从小到大，比如说一个网站，最早的时候也都是小网站，那个时候一般的架构是服务和数据库都放一起，后来慢慢的把服务和数据分离，再往后用户变多了，服务器性能开始慢慢跟不上了，这个最早是通"}, {"id": "6993343728463118344", "title": "做一个CLI版的时间管理工具（五）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "7000026472832319495", "title": "Node.js 中的 util.promisify() 方法", "desc": "Node.js 内置的 util 模块有一个 promisify() 方法，该方法将基于回调的函数转换为基于 Promise 的函数。这使您可以将 Promise 链和 async/await 与基于"}, {"id": "6968291704071782430", "title": "基于 Node.js Addon 和 v8 字节码的 Electron 代码保护解决方案", "desc": "背景 我们有一个项目使用了 Electron 开发桌面应用，使其能够在 Windows / Mac 两端上跨平台运行，因此核心逻辑都是通过 JavaScript 编写的，黑客非常容易对我们的应用进行解"}, {"id": "6972095839632097293", "title": "require() 方法详解", "desc": "在 NodeJS 中有一个方法是我们使用频率最高的，那就是 require 方法。NodeJs 遵循 CommonJS 规范，该规范的核心是通过 require来加载其他依赖的模块。"}, {"id": "6969875260472557582", "title": "V8引擎垃圾回收原理解析", "desc": "本文主要参考了《Nodejs深入浅出》这本书，从不同方面讲解了Node的内存分配和V8引擎的垃圾回收机制，理论性知识比较多，虽然日常业务中可能很少用到，但是相信对大家的面试有很大帮助！"}, {"id": "6999165106114265124", "title": "一分钟掌握Koa洋葱模型原理", "desc": "一、开始 首先我们来看下面这段代码： 按照正常的逻辑是输出是：1，2，3，4，5，6；但是根据koa的执行逻辑输出是：1，3，5，6，4，2；这种输出逻辑叫做洋葱模型（个人粗浅总结），下面我们就来实现"}, {"id": "6990302345208791054", "title": "性能分析利器火焰图（3）性能优化实战", "desc": "node.js 快速定位服务性能问题利器-火焰图实战，分析程序性能瓶颈，快速定位问题，优化并改善服务质量"}, {"id": "6844903583859621901", "title": "3月前端知识集锦", "desc": "JS相关深入理解javascript原型和闭包EventLoop必知必会（六道题）网络现状：性能提升指南【网络协议】Web协议未来优化指南不要混淆nodejs和浏览器中的eventloopJavaSc"}, {"id": "6844903587043082247", "title": "面试官:既然React/Vue可以用Event Bus进行组件通信,你可以实现下吗?", "desc": "本文标题的题目是由其他问题延伸而来,面试中面试官的常用套路,揪住一个问题一直深挖,在产生这个问题之前一定是这个问题. 我们大体上都会有以上回答,接下来很可能会问到如何实现Event(Bus),因为这个东西太重要了,几乎所有的模块通信都是基于类似的模式,包括安卓开发中的Event…"}, {"id": "6844903601060446221", "title": "Webpack中publicPath详解", "desc": "而关于如何应用该路径并没有说清楚... 这个最终静态资源访问路径在使用html-webpack-plugin打包后得到的html中可以看到。所以publicPath设置成相对路径后，相对路径是相对于build之后的index.html的，例如，如果设置publicPath: '…"}, {"id": "6998161168921526308", "title": "require与fs.readFile读取JSON文件的对比", "desc": "和大家一起探究一下fs与require读取文件的差异，着重与JSON文件的对比，和大家一起学习新知识共同进步"}, {"id": "6914891222884564999", "title": "Node.js + Express + MySQL 搭建项目框架", "desc": "本文主要是展示使用 Express 和 MySQL 来搭建项目框架的步骤，展示了如何搭建项目并进行基本操作。 Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架。 express-generator 是 Express 应用程序生成器工具，我们可…"}, {"id": "6974171023025389576", "title": "Node 系列 - 004 - Inquirer.js", "desc": "经过 TypeScript 环境的搭建和 commander.js 的配合，我们现在可以通过 npm run xxx 来运行项目了，但是当命令太多了会记不住，所以就有了 Inquirer.js"}, {"id": "7002786718873026574", "title": "编写一个koa参数校验中间件", "desc": "ajv是6版本，高于此版本，需要查看官网进行API更改 编写符合jsonschema的校验规则 使用中间件生成函数"}, {"id": "6844903621230854158", "title": "前端自动化发布实战总结", "desc": "遇到这种情况，首先会想到的肯定是前后端分离。但考虑到目前的人员、技术储备情况，直接过渡到基于NodeJS的全栈式开发，阻力大，周期长，很可能会难产。 publish：发布项目代码，执行publish后将执行项目仓库中对应开发分支下的代码发布任务。在云端构建后的代码最终会发布到对…"}, {"id": "6967254462747967495", "title": "NodeJS操作SQL Server数据库实战", "desc": "最近的项目有用到NodeJS对SQL Server数据库进行简单的增删改查操作，下面就针对相关的流程进行一下简单的记录。 安装相关依赖包 koa、koa-router、koa-bodyparser、k"}, {"id": "6844904036601167879", "title": "llhttp是如何使Node.js性能翻倍的？", "desc": "如果你关注 Node.js 社区，那么你一定记得 Node.js v12 一个非常重磅的功能就是，内核的 HTTP Parser 默认使用 llhttp，取代了老旧的 http-parser，性能提升了 156%。 但知其然也要知其所以然，llhttp 是如何做到这一点的呢？"}, {"id": "6898612811891474440", "title": "Node.js开发实践，前端工程师的MVP利器", "desc": "当然，这个过分的js帮助了我很多，从被后端大佬揪着耳朵按到工位上温声细语的说：“我套完页面样式乱了，帮我调下样式”，演变成大佬气冲冲的跑到我工位慈眉善目的拍着桌子说：“TM接口参数传错了”。 感谢Node吧，至少我可以在自己的工位上改自己写的Bug了🤓。 言归正传，再这么贫真…"}, {"id": "6844903827024396296", "title": "50行代码，Node爬虫练手项目 🕷️", "desc": "项目中基本每一个操作都写有注释，适合对 Node 爬虫感兴趣的同学对其有基础的了解。 50 lines, minimalist node crawler for Github Trending. 一个50行的 node 爬虫，一个简单的 axios, express, chee…"}, {"id": "6946169611461066789", "title": "详解base64原理", "desc": "第一步，将每三个字节作为一组，一共是24个二进制位。 第二步，将这24个二进制位分为四组，每个组有6个二进制位。 第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。 第四步，根据上表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。 二个字节的情况：将…"}, {"id": "6847902222253031432", "title": "从零手写pm-cli脚手架，统一阿里拍卖源码架构", "desc": "大概呢，就是介绍下，目前我的几个项目页面的代码组织形式。 用了几个项目后，发现也挺顺手，遂想着要不搞个 cli 工具，统一下源码的目录结构吧。 这样不仅可以减少一个机械的工作同时也能够统一源码架构。同学间维护项目的陌生感也会有所降低。的确是有一部分提效的不是。虽然我们大多数页面…"}, {"id": "6844903630038892558", "title": "node基础面试事件环？微任务、宏任务？一篇带你飞", "desc": "我们这里来举个例子，我们node和java相比，在同样的请求下谁更占优一点。看图 当用户请求量增高时，node相对于java有更好的处理并发性能，它可以快速通过主线程绑定事件。java每次都要创建一个线程，虽然java现在有个线程池的概念，可以控制线程的复用和数量。 异步i/o…"}, {"id": "6844903776785006605", "title": "从Express到Nestjs，谈谈Nestjs的设计思想和使用方法", "desc": "最近已经使用过一段时间的nestjs,让人写着有一种java spring的感觉，nestjs可以使用express的所有中间件，此外完美的支持typescript,与数据库关系映射typeorm配合使用可以快速的编写一个接口网关。本文会介绍一下作为一款企业级的node框架的特…"}, {"id": "6990649622716743717", "title": "从零实现一个koa（一）实现一个简易服务器", "desc": "功能说明 koa是一个新的 web 框架，比express更加小巧，额外的功能都通过中间件来实现。文章分为三节，第一节讲实现简易服务器，第二章为use中间件，三章为use中的ctx实现。"}, {"id": "6844904031534448653", "title": "node用2行代码解决👉 HTTP跨域😎", "desc": "1. 创建一个服务器3006，用于处理请求 2. 创建另一个服务器3008，用于请求数据"}, {"id": "6917875570806095885", "title": "Node+ts+mongodb 爬取接口数据存入数据库", "desc": "一开始运行成功，但是爬到的数据一直为空，排查到的问题就是request的post请求body参数没有传给服务端，后面才发现是没有允许post的请求方法，所以一定要注意请求头head里面的属性。"}, {"id": "6844904190947377165", "title": "为你的团队打造一个 Node CLI 工具吧", "desc": "想一想你的团队会有一些重复性工作吗？思考一下，CLI 工具也许可以减少掉许多重复工作，统一合作规范，提升工作效率。 Node 拥有最为庞大的生态社区，数十万的 Package，其中有许多 Package 是专门为建强大的 CLI 工具打造的。在社区生态的帮助下，你可以更快速构建…"}, {"id": "6999116080689971213", "title": "Node.js 多进程架构的负载均衡以及平滑重启", "desc": "Node.js 的单个实例在单个线程中运行。 为了利用多核系统，用户有时会想要启动 Node.js 进程的集群来处理负载。"}, {"id": "6844904151588012039", "title": "Node.js 应用日志切割原理与踩坑实践", "desc": "2019 年初的时候，我们业务组上线了一个新的 Node.js 应用，主要提供C端的 API 服务。 随着应用流量的逐渐增加，线上监控平台会偶发性报警，提示磁盘 disk_io 平均等待时间超出 1000ms，随后观察发现磁盘 IO 每秒写字节量突然飙高，但很快又下降。 具体的…"}, {"id": "6844903545011961869", "title": "NODE_ENV和webpack", "desc": "很显然，NODE_ENV 属性并不在 process.env 对象上，但通过字面意思（node environment）可以知道，这意为 node.js 环境。 express.js 中首次使用该变量，然后推广、普及至整个前端社区。 它的主要用途是：在使用 node.js 环境…"}, {"id": "6844903615023284238", "title": "Node之父ry发布新项目deno：下一代Node", "desc": "近日，Node 之父 Ryan Dahl 发布新的开源项目 deno，从官方介绍来看，可以认为它是下一代 Node，使用 Go 语言代替 C++ 重新编写跨平台底层内核驱动，上层仍然使用 V8 引擎，最终提供一个安全的 TypeScript 运行时。"}, {"id": "6844903556298850317", "title": "基于 Node.js 前后端分离的一点思考", "desc": "hello~亲爱的看官老爷们大家好~有一段时间没写文章了，最近忙于为一个对内的数据可视化平台进行完全的前后端分离。原来的项目是一个基于 Vue 的单页应用，重构后接入 Node 作为中间层，达到完全的前后端分离。 由于项目相对简单，成本并不是太高。下文将简单介绍一下使用的技术栈…"}, {"id": "6976676288891355172", "title": "NodeJs 微任务", "desc": "前言 作为 【libuv 源码学习笔记】1. 事件循环 的补充篇, 本篇主要讲解涉及的知识点 node 中 微任务的运行 node 中 process.nextTick 的具体实现 node 中 se"}, {"id": "6968081644632834079", "title": "✍️ 重学node", "desc": "Node可以做什么 轻量级、高性能的web服务 前后端js的同构开发 便捷高效的前段工程化 Node的架构和运行过程 当前层内容由js实现 提供应用可直接调用库，例如fs、path、http等 js语"}, {"id": "6953855863811473438", "title": "如何检测及升级项目中的 Node 依赖", "desc": "在现代前端开发中，一个项目往往依赖众多第三方包，多则几十个甚至过百，那么如何检测及升级这些依赖就成为了难题。"}, {"id": "6971695587657777166", "title": "vue3 + electron12+dll 开发客户端配置详解", "desc": "修改仓库源 由于electron版本的未知性，可能存在serve可用而build之后打开白屏的情况，因此需要谨慎对待。最好在版本可用的情况下commit一个版本，方便代码回滚，如果谁有更好的资料希望共"}, {"id": "6844903566369357838", "title": "记一次nodejs开发CLI的过程", "desc": "年前在工作中接到任务要开发一个自己的CLI，便去了解了一下。发现并不难，只需运用nodejs的相关api即可。 输入 new 命令从github下载一个脚手架模版，然后创建对应的app。 输入 create 命令可以快速的创建一些样板文件。 下面将分步去解析一个CLI的制作过程…"}, {"id": "6844903875720265736", "title": "适合初学者的koa2+mongodb初体验", "desc": "笔者的前端开发已经有些时日了，对于node一直保留着最初的恐惧，倘若一座不可跨越的高山，思前想后终于迈出最后一步，踏入了开拓自己视野的新视界，希望在看这篇文章的你可以一起跟我动手尝试。 你可以先star,再拉代码，慢慢的看这篇文章。 面向node.js的下一代web框架。 由E…"}, {"id": "6844903698305384455", "title": "捡了鼠标开网吧系列——nodejs爬取电影链接", "desc": "最近在看新出的电视剧“斗破苍穹”，可是一集电视剧的广告开头90s中间45s片尾15s，实在令人发指。之前有了解过，网上有很多免vip解析接口，于是本渣决定动手做一个可以去除广告的小网站，于是有一下采坑过程。 首先，这是最终在线预览。文章核心是爬取电影链接，然后和现有的会员解析接…"}, {"id": "6844903720057044999", "title": "基于Electron + nodejs + 小程序 实现弹幕小工具（上篇）", "desc": "上一篇文章，大概讲述我们即将要做的弹幕小工具是什么样的，将使用什么样的技术。那么，从这一篇开始，我们将一步步把想法落地成代码。本文，我们将使用Electron实现接收端，让我们的弹幕飞起来。 如上图所示，把放映PPT的同时，用户可以通过扫描小程序二维码，实时发表自己的想法，达到…"}, {"id": "6844904191316459527", "title": "[译] nodemon文档", "desc": "nodemon是一个自动重启node应用的工具，当监听的文件或监听目录下的文件发生修改时，自动重启应用。 使用nodemon不需要对应用本身的代码做任何修改。nodemon可以看作node的执行容器。使用nodemon，只需要在执行代码的时候，把node换成nodemon即可。…"}, {"id": "6844903681410727950", "title": "基于Nodejs的Tcp封包和解包", "desc": "我们知道，TCP是面向连接流传输的，其采用Nagle算法，在缓冲区对上层数据进行了处理。避免触发自动分片机制和网络上大量小数据包的同时也造成了粘包（小包合并）和半包（大包拆分）问题，导致数据没有消息保护边界，接收端接收到一次数据无法判断是否是一个完整数据包。那有什么方案可以解决…"}, {"id": "6844903727820718094", "title": "解决 \"Script Error\" 的另类思路", "desc": "前端的同学如果用 window.onerror 事件做过监控，应该知道，跨域的脚本会给出 \"Script Error.\" 提示，拿不到具体的错误信息和堆栈信息。 这里读者可以跟我一起做一个实验，来深入了解这个事情。先做一下实验准备： 创建一个 Node APP，只做静态服务器，…"}, {"id": "6844903650708602888", "title": "深入分析Node.js事件循环与消息队列", "desc": "因此异步IO就要发挥作用了，比如用多线程，如果用 Java 去读一个文件，这是一个阻塞的操作，在等待数据返回的过程中什么也干不了，因此就开一个新的线程来处理文件读取，读取操作结束后再去通知主线程。 这样虽然行得通，但是代码写起来比较麻烦。像 Node.js V8 这种无法开一个…"}, {"id": "6987740131016835079", "title": "NPM 入门使用", "desc": "本文主要讲解 npm 的一些入门知识，主要包括 npm 包的安装、使用、卸载、发布、更新等内容。欢迎阅读~"}, {"id": "6978019623316750349", "title": "Node.js系列八 - 深入事件循环", "desc": "一. 浏览器的事件循环 1.1. 进程和线程 线程和进程是操作系统中的两个概念： 进程（process）：计算机已经运行的程序； 线程（thread）：操作系统能够运行运算调度的最小单位； 听起来很抽"}, {"id": "6844903519896485901", "title": "全新打包工具-Parcel介绍", "desc": "快速打包 - 多核编译，以及文件系统缓存，即使在重新启动之后也能快速重新构建。 支持JS，CSS，HTML，文件资源等- 不需要安装任何插件。 在需要的时候自动使用Babel，PostCSS和PostHTML自动转换模块 - 甚至是node_modules。 零配置代码拆分，使…"}, {"id": "6844903593200320519", "title": "Node.js 之前端请求转发", "desc": "好几年之前【大前端】这个词语就开始在“dev er”中流行起来了，那么大前端到底包含了哪些技术呢？传统的FE、Native（Hybrid）、Node、图形技术、VR……，今天我们来着重说说其中简单的一块——Nodejs（请求转发）"}, {"id": "6844903743054413831", "title": "单机服务器部署Nginx/Node/Nuxt/React/NG,常规优化及自启脚本", "desc": "随手记,有兴趣的看看,也许可以帮你省点时间.."}, {"id": "6844903779670687751", "title": "Electron系列文章-程序目录结构", "desc": "这篇文章主要是通过对简单的Electron应用程序的开发目录进行介绍，让读者对整个开发视图有初步的了解，能大概知道开发一个Electron程序需要具备哪些模块。 对于做纯web开发的新人，可能对多进程开发结构不熟悉。在浏览器中，基于安全策略考虑，web页面通常是在一个沙盒环境中…"}, {"id": "6844903619209199624", "title": "Node.js 中间件模式", "desc": "中间件 在 Node.js 中被广泛使用，它泛指一种特定的设计模式、一系列的处理单元、过滤器和处理程序，以函数的形式存在，连接在一起，形成一个异步队列，来完成对任何数据的预处理和后处理。 它的优点在于 灵活性：使用中间件我们用极少的操作就能得到一个插件，用最简单的方法就能将新的…"}, {"id": "6844904161373339661", "title": "通过bodyparser源码深入了解koa运行机制", "desc": "请求成功，返回预期数据。但是post和get是有区别的，具体区别不细讲，通常的分页请求我们用post方式，调用一个分页接口会传pageNum、pageSize等查询参数，服务器端拿到这些查询参数拼接成SQL查数据库并返回，服务器怎么拿到这些数据呢？熟悉koa的都知道在ctx.r…"}, {"id": "6916337911180820494", "title": "Lerna笔记", "desc": "Lerna 是一个用来优化托管在 Git/NPM 上的多 package 代码库的工作流的一个管理工具，可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。 如上所示，module-1依赖于module-2的。当module-2修改后，…"}, {"id": "6844903714952593422", "title": "浅探VUE的MVVM模式实现", "desc": "我们先简单看一下这个方法它也是用来实现我们数据劫持（数据监听）的关键方法，我们知道vue框架是不兼容IE6~8低版本的，主要是因为它的用到了ES5中的这个Object.defineProperty的方法，而且这个方法暂时没有很好的降级方案。 第二个参数：需要定义的属性或方法的名…"}, {"id": "6900499908902518791", "title": "Egg 快速学习", "desc": "调用 Service 进行业务处理，必要时处理转换 Service 的返回结果，让它适应用户的需求。 通过 HTTP 将结果响应给用户。 config/config.{env}.js 用于编写配置文件。 测试文件应该放在项目根目录下的 test 目录下，并以 test.js 为…"}, {"id": "6945007957142667272", "title": "node 与 npm 的关系", "desc": "npm 全称是 Node Package Manager ，意思是 Node 的包管理系统。是用来管理 js 的。 以前 JS 只能运行在浏览器中，Node.js 出现之后，不管是服务器上，还是我们自己的笔记本上，只要安装了 Node.js 就可以运行 JS 代码了。假设，咱们…"}, {"id": "6844903630189887502", "title": "前端跨域问题及其解决方案", "desc": "其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。是指浏览器不能执行其他网站的脚本。是浏览器对JavaScript实施的安全限制。 同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核…"}, {"id": "6905296450377220109", "title": "看了这个,你不可能还不会自定义npm包吧?", "desc": "contributors：贡献者数组，格式与maintainers相同。包的作者应该是贡献者数组的第一个元素"}, {"id": "6844903668353859591", "title": "每天阅读一个 npm 模块（5）- ee-first", "desc": "今天阅读的模块是 ee-first，通过它我们可以在监听一系列事件时，得知哪一个事件最先发生并进行相应的操作，当前包版本为 1.1.1，周下载量约为 430 万。 源码中对参数的校验主要是通过 Array.isArray() 判断参数是否为数组，若不是则通过抛出异常给出提示信息…"}, {"id": "6844903600498409480", "title": "你不知道的那些DOM", "desc": "DOM2级和3级的目的在于扩展DOM API，以满足操作XML的所有需求，同时提供更好的错误处理及特性检测能力。从某种意义上讲，实现这一目的的很大程度意味着对命名空间的支持。 有了XML命名空间，不同XML文档的元素就可以混合一起，共同构成格式良好的文档，而不必担心发生命名冲突…"}, {"id": "6844903668509048845", "title": "理解 Node.js Stream 模块", "desc": "流概念是学习 Node 绕不过去的概念之一，它的底层代码也非常复杂，它能够优化对于文件或者数据处理的内存优化与流程优化，本文主要是讲述了对于 Stream 的实现与使用。 很多时候，我们需要搭建静态文件服务器或者向客户端传输静态文件，一般来说会有以下两种：这里例子中静态服务器会…"}, {"id": "6844903688402632711", "title": "基于NodeJS的HTTP server Plus 6：加密（crypto）", "desc": "加密是以某种算法改变原有的信息数据，使得未授权用户即使获得了已加密信息，因不知解密的方法，无法得知信息真正的含义，通过这种方式提高网络数据传输的安全性，加密算法常见的有哈希算法、HMAC 算法、签名、对称性加密算法和非对称性加密算法，加密算法也分为可逆和不可逆，比如 md5 就…"}, {"id": "6844903777229602830", "title": "Egg 支持 JS 智能提示", "desc": "Egg 研发委提示您： 代码千万行，测试要写完。 提示不过脑，上线两行泪。"}, {"id": "6844904148501037070", "title": "如何读取Shapefile(第一部分)", "desc": "本系列分为两部分第一部分，跑通基本技术路线，分析遇到的知识点。第二部分把读取数据中遇到的坑展示出来。 我选择用node.js 读取shapefile文件，工作量分为两部分：1 如何读取二进制文件 2 具体二进制格式解析。 ArrayBuffer用来表示通用的、固定长度的原始二进…"}, {"id": "6844903501982597128", "title": "在对比中理解 Node", "desc": "通过这个对比来服务于我们对于 Node 的理解，运行在浏览器的 Js 主要是操作 Dom （UI 层面），以及作为 HTTP 客户端操作网络通信。而扩展到服务器端的 Node，能力不再受浏览器沙盒的限制，可以启动 HTTP 服务（以及 WebSocket 等各种服务），可以操作…"}, {"id": "6844903645654286343", "title": "对package.json的详细说明", "desc": "每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。 下面是一个最简单的pack…"}, {"id": "6844903923166380039", "title": "Node.js爬虫获取天气与每日问候", "desc": "可打开墨迹天气网站找到女朋友对应城市修改url地址拼音即可。"}, {"id": "6844903645197107208", "title": "聊聊web缓存那些事！", "desc": "减少网络带宽消耗：当副本被重用时会减低客户端的带宽消耗；客户可以节省带宽费用，控制带宽的需求的增长并更易于管理。"}, {"id": "6844903702424371214", "title": "月度文章——Event Loop", "desc": "JS是一门单线程的语言，如果没有异步操作的话，一个很耗时的操作，就可以堵塞整个进程。而出现异步操作之后，就会有数据通信之间的问题，而event loop很好的解决了这个问题。 什么是Event loop?这是我们第一个需要知道的问题。 在html官方标准中是这么介绍的。 为了协…"}, {"id": "6844903785135865863", "title": "详解NodeJs流之一", "desc": "流从早先的unix初出茅庐，在过去的几十年的时间里，它被证明是一种可依赖的编程方式，它可以将一个大型的系统拆成一些很小的部分，并且让这些部分之间完美地进行合作。 在node中，流的身影几乎无处不在，无论是操作文件、创建本地服务器还是简单的console，都极有可能涉及到流。 R…"}, {"id": "6844903656639168526", "title": "实现一个简易的静态服务器", "desc": "静态服务器就是网站把一些在通常操作下不会发生改变的资源给浏览器。显示网站外观的图片和CSS文件，在浏览器中运行的JavaScript代码，没有动态组件的HTML文件就是这种资源中的代表，统称为静态文件。 我们的静态服务器的实现思路就是，启动一个静态服务器，监听用户发送的请求，当…"}, {"id": "6949528268512952333", "title": "node-pre-gyp以及node-gyp的源码简单解析（以安装sqlite3为例）", "desc": "nodejs是跨平台的，那么对于任何的node模块理论也是应该是跨平台的。然而有些node模块直接或间接使用原生C/C++库，这些东西要跨平台，就需要使用源码根据实际的操作平台环境进行原编译"}, {"id": "6844903619737681934", "title": "用node开发一个生成react项目的cli工具", "desc": "我们经常使用create-react-app、vue-cli来快速生成一个新的react或者vue项目，它们的原理是什么，下面就带使用node来开发一个简单的react-cli工具，来揭开其神秘的面纱。 在这里我维护了两套react模板供选择，放在src目录下去，大家可以根据需…"}, {"id": "6844903568944676872", "title": "前端异常监控实践", "desc": "之前写了一篇年终总结的文章，有些朋友对我们在做的监控比较感兴趣，特此写一篇文章来梳理我们的整体的一套思路给大家参考。 前端SDK，主要是用户行为追踪，错误拦截，上报策略，API设计。 上报的日志实现实时查询。 分级分层预警。 日志分析策略。 捕获用户的操作路径，根据操作路径我们…"}, {"id": "6844903592055275534", "title": "使用node爬虫做了一个vue小项目记录使用笔记", "desc": "做的是一个后台管理的项目，首先是页面的结构，根据页面的结构设计路由。 主页面是views/Index/index.vue,一些样式直接使用element-ui的样式,element-ui的使用参考src/main.js的全局引入并注册。分为顶部、左侧导航栏，右侧的主题三部分，在…"}, {"id": "6844903861681930248", "title": "使用Server Sent Events制作一个代码在线运行工具", "desc": "1. SSE 用作服务端推送 2. Code-Runner 具体实现"}, {"id": "6844903591518404616", "title": "【译】ES6 中的一些技巧，使你的代码更清晰，更简短，更易读！", "desc": "模板模版字符串使得字符串拼接比以前更容易。 它以反向标记（Tab 正上方那个字符）开始，并且可以使用${variable}插入变量。 比较以下两行代码： 这会让一切变的更简单，代码更易于阅读。 你可以将任何内容放入花括号中：变量，方程式或函数调用。 我将在整篇文章的示例中使用它…"}, {"id": "6844903668752334856", "title": "[译]理解 Node.js 事件驱动架构", "desc": "大部分 Node 模块，例如 http 和 stream，都是基于EventEmitter模块实现的，所以它们拥有触发和监听事件的能力。 事件驱动的世界中，对于大部分 Node.js 函数，通过回调的形式就是最简单的，例如fs.readFile。在这个例子中，事件会被触发一次（…"}, {"id": "6844903863560978446", "title": "什么时候不能在 Node.js 中使用 Lock Files", "desc": "“可是在我的机器上能工作啊！”这种场景可能是调试 bug 时最常见的问题。这通常是由于出错的机器和你自己的机器上系统的底层依赖性不同的结果。所以 yarn 和 npm 在引入了所谓的“lock file”，来跟踪你依赖项确切的版本。但是当你在开发要发布到 npm 的包时，应避免…"}, {"id": "6844903685097537544", "title": "打包优化实践(如何Code Spliting)", "desc": "介绍了三种 Code Spliting 的方法并进行实践。"}, {"id": "6860342710113566734", "title": "node.js入门到企业web开发中的应用", "desc": "(1)定义：Node让javascript在服务器跑。在chrome's v8上的javasctipt运行时。 (2)特点：事件驱动(I/O等异步操作结束后的通知,观察者模式)、非阻塞I/O模型。 nodejs单进程：单进程只是针对主进程，I/O操作系统底层多线程调度。 针对w…"}, {"id": "6907990587224358925", "title": "安装node，以及npm install报错问题，各种踩坑和解决方法总结。", "desc": "从node的镜像源先说起，下载node默认源是外国的，在中国可能相对来说，可能会出现连不上或者安装速度慢，我们这时可以优先选择国内淘宝镜像。Node版本下载可从官网下载指定版本https://node"}, {"id": "6844903934541332487", "title": "初始koa", "desc": "由于公司实行弹性工作制，但是呢每天晚上超过八点的话可以申请30块的加班餐补助😏，每天下班不固定，导致申请加班餐餐补不知道自己这个月到底加班多少天，所以就打算做个签到管理系统来记录每天的打卡时间，顺便练练手。 ok，我们需要再全局安装nodemon，这个可以使我们的node不需…"}, {"id": "6844903854018920462", "title": "Node.js核心内容", "desc": "前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。 js是单线程的，由于执行ajax请求…"}, {"id": "6844904088698617869", "title": "手把手体验http-server服务理解强缓存和协商缓存", "desc": "前提：我们先来体验下npm包http-server的功能访问下试试，有点牛皮的样子访问下html试试直接展示出来，是不是有种后台中出渲染的感觉实现下面我们来整一个吧创建一个http服务应用可显示文件直"}, {"id": "6844903552226344967", "title": "在 Node 的帮助下，横跨多平台的 JavaScript 已经赢了", "desc": "JS注定一统江湖，JS虽然在挺多领域不是最好的语言，但是万金油的特性和良好的生态圈却是最大的推动力，虽然现在有些人吐槽的不好设计和语言弊端，发展下去就不能修正？"}, {"id": "6844903594106306573", "title": "用JS写个小灯控制器呗", "desc": "作为一名端茶倒水、递烟递酒、擦窗扫地无所不能的全干打杂工，我是一点想法都没有，毕竟作为一名前端都算不上合格，更不用讲硬件这块了。 单片机的开发一般都是C++或者C开发者去搞的，甚至可能还要用到汇编。因此开发者在我脑海的印象一般是这样的： 看了下自己的发际线。。。。嗯，看样子我不…"}, {"id": "6863984873174990861", "title": "nodejs --- 融会贯通 （二）", "desc": "网络获取本地IPTCP客户端NodeJS使用net模块创建TCP连接和服务。启动与测试TCPUDP客户端利用dgram模块创建数据报socket，然后利用socket.send发送数据。文件发送服务H"}, {"id": "6844903993777504263", "title": "用Node写一条配置环境的指令", "desc": "工作中需要维护一个极老的项目，说来话长。在平时当需要往项目里添加新的模块时，我需要手动添加的东西太多了。由此希望通过编写一条node命令，可以让我一键完成配置我需要配置的东西，比如：路由，控制器，less文件等。最后我只需要在生成的模板index.jsx中写我们可爱的模块代码就…"}, {"id": "6844903711022514190", "title": "vue 博客优化，服务端渲染(SSR)指南", "desc": "，服务器阿里云 Ubuntu 16.04，web服务器nginx。 面临的问题。1：单页应用首屏加载过慢；2：无法被搜索引擎抓取；3：首屏白屏时间过长（重要）； 解决一：首屏加载过慢。 经过分析，页面首屏慢主要是首次需要加载的js文件过大。 1：对webpack打包过程进行优化…"}, {"id": "6844903622459785223", "title": "Node中Buffer学习笔记", "desc": "JS语言没有二进制数据类型，而在处理TCP和文件流的时候，必须要处理二进制数据。NodeJS提供了一个Buffer对象来提供对二进制数据的操作，比如文件流的读写、网络请求数据的处理等。 Buffer是一个全局类,无需加载就可使用。Buffer 存的都是16进制的。"}, {"id": "6844904009766010894", "title": "详谈CommonJS模块化", "desc": "模块化其实很早就在很多高级语言中如Java、Ruby、Python出现了，甚至在C语言都有类似的模块化，比如include语句引入头文件，各种库等等。而在前端中，JavaScript作为主要语言，它设计之初并没有实现模块化。随着Web的发展，JavaScript地位越来越高，同…"}, {"id": "6844904030410375181", "title": "Koa学习笔记 了解Koa和创建路由实例", "desc": "通过对14nodejs（7天）的学习，已经对Node.js略有了解终于尝试着逐渐接触自己一直想做而未达成的目标微信公众订阅号开发当然，以自己目前的水平，依然要依托教程的帮助，这里要学习的课程是7天搞定"}, {"id": "6912355964276932621", "title": "[译]保护Node.js应用程序指南", "desc": "开发人员在开发周期结束时倾向于考虑的一件事是应用程序的“安全性”。安全应用程序不是奢侈品，而是必需品。您应该在开发的每个阶段考虑应用程序的安全性，例如架构、设计、代码，最后是部署。 在本教程中，我们将学习保护Node.js应用程序的方法。让我们潜入其中。 您必须始终验证或清理来…"}, {"id": "6876839229268164621", "title": "系统性学习Node.js（5）—— 手写 fs 核心方法", "desc": "fs 是 Node 里用来进行文件操作的核心模块，这篇文章的目的是学习并手写一些常用的 api。 打开一个文件。对文件进行操作之前都要先打开文件。 flags：文件系统标志，默认值：'r'。意思是要对文件进行什么操作，常见的有以下几种： mode：文件操作权限，默认值：0o66…"}, {"id": "6844903598833287182", "title": "NodeJS 实现环境配置", "desc": "近期开坑 NodeJS 开发，该文主要实现了根据不同的环境变量加载 JSON 内的不同服务器配置"}, {"id": "6844903510572531726", "title": "Promise 必知必会（十道题）", "desc": "Promise 必知必会（十道题）"}, {"id": "6844903586506227726", "title": "新版vue-cli模板下本地开发环境使用node服务器跨域", "desc": "我们都知道浏览器有一个既核心也最基本的安全功能，即同源策略。同源分别是:协议，域名，端口。如果浏览器访问服务器不同源的话，就会访问不到数据。那开发中常常访问的服务器不同源，那么可以借助一个服务器当做中介来访问需要访问的服务器从而获得数据。因为同源策略是浏览器的安全机制，而服务器…"}, {"id": "6844903570584649735", "title": "npm ci 比 npm install 更快捷，更可靠", "desc": "区别： - 项目必须包含一个 package-lock.json 或 npm-shrinkwrap.json 文件 - package-lock.json 中依赖关系与 package.json 若不匹配，npm ci 会报错并退出 - npm ci 不能安装单独的 packag"}, {"id": "6844903811325100040", "title": "Nodejs初识", "desc": ".load filename -载入当前 Node REPL 会话的文件内容。 函数调用方式分为三类 ：同步调用、回调和异步调用。 阻塞和非阻塞关注的是程序在等待调用的结果（消息，返回值）时的状态。 文件和模块是一一对应的。一个Node.js文件就是一个模块 在javascri…"}, {"id": "6844903677770072077", "title": "Node中Buffer 常用API解读", "desc": "在 ES6 引入 TypedArray 之前，JavaScript 语言没有读取或操作二进制数据流的机制。 Buffer 类被引入作为 NodeJS API 的一部分，使其可以在 TCP 流或文件系统操作等场景中处理二进制数据流。 Buffer 属于 Global 对象，使用时…"}, {"id": "6844903508064337933", "title": "Node.js 9.0.0 发布", "desc": "Node.js 从 5.0 开始一直遵循着半年一个大版本的发布周期，每年 4 月左右发布一个主版本号为偶数的 LTS（Long-Term-Support）版本，每年 10 月左右发布一个主版本号为奇数的非 LTS 版本。 新版本发布后的半年内被称为“当前版本”，起初可能会遇到较…"}, {"id": "6844903809970339848", "title": "Nodejs教程29：Node.js项目之四：添加路由，完成项目", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 查询item_table表中的商品数据后，返回给前台，并将回调函数作为模块导出。 应禁止query语句使用如下写法，容易造成注入攻击。 这样就会导致item_table表中的所有数据被删除。 在/router/i…"}, {"id": "6844903577509429256", "title": "NODE基础总结(1) —— Eventloop", "desc": "Node.js 是一个基于 Chrome V8 引擎的JavaScript运行环境(runtime),Node不是一门语言,而是让js运行在后端的运行时,并且不包括javascript全集,因为在服务端中不包含DOM和BOM. Node也提供了一些新的模块例如http,fs模块…"}, {"id": "6844903746783150094", "title": "『NodeParty 开源基金会』 社区激励计划，知名项目 PR/原创文章现金奖励", "desc": "距离『NodeParty 基金会』收到第一笔赞助至今已经一年零四个月了，而距离『NodeParty 杭州』第一次分享会至今已经两年零四个月了。这些时间以来，我们举办了八次线下的大型分享会，基金会收入五万八千多 ，参与人数过千，讲师人数三十人左右，参与主办或赞助的企业和志愿者无数…"}, {"id": "6844903637626552327", "title": "ESLint 组件库 NPM 账户被盗，并被注入恶意代码", "desc": "Updatedblogpost:https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishesUpdatefrom"}, {"id": "6943510935994630151", "title": "node-sass安装失败", "desc": "修改版本号重新安装，如果还是失败... 1). 先运行： npm install -g node-gyp 2). 然后运行：运行 npm install --global --production windows-build-tools（这个方式我安装失败）"}, {"id": "6844903496735522830", "title": "使用puppeteer截图及线上问题调试", "desc": " "}, {"id": "6943147582545723423", "title": "跟着文档学Node（二）：Buffer", "desc": "从官方文档中的定义中可以看出两点：Buffer用来存储二进制字节、每个实例有固定长度。有点类似于存放字节的数组。 buffer数组每一项元素是16进制的两位数，即十进制的0到255。换算为二进制就是8位，刚好是一个字节。 Buffer的中文翻译就是缓冲，从模块名字就可以看出该模…"}, {"id": "6844903744027508750", "title": "函数式编程：如何在业务代码中使用 Maybe", "desc": "Maybe 是函数式编程中的一个概念，是一种常用的函子（functor），通常用来处理函数式编程中可能存在的空值问题。"}, {"id": "6844903865247088647", "title": "sed 命令实践: 升级 sequelize.js 时批量替换字符串", "desc": "sequelize 是 Node 中使用比较多的一个 ORM 库，最近计划将项目中的 sequelize 升级至 V5 版本。 根据 升级文档，其中一项是即将禁用 String based operators，使用 Sequelize.Op 等 Symbol operators…"}, {"id": "6943165472359759886", "title": "Node.js 多进程架构的原理", "desc": "Node 采用 事件驱动 最大的问题在于是一个 Node.js 进程实例，就是一个单进程、单线程的。在现代工业生产中，这会导致两个极其严重的问题： 在理想状态下，每个进程各自利用一个 CPU，以此实现多核的利用。所幸，Node提供了 child_process 模块，并且也提供…"}, {"id": "6844903954275368973", "title": "记一次Node.js直出服务的性能优化", "desc": "MPM（Market Page Maker）是京东社交电商部的组件化的页面可视化搭建平台，于2016年9月份上线，平均每周150+个页面，目前已经成为社交电商部的一个核心系统。系统使用Vue.js作为组件化的基础框架,并于2017年5月份上线了Node.js直出服务。MPM的页…"}, {"id": "6844903511197515783", "title": "uiw-iconfont 1.2.4 发布，开源图标字体", "desc": "uiw-iconfont v1.2.4 已发布，uiw-iconfont 是从 uiw 组件库抽离出来的图标字体，基于 svg 图片生成的图标字体。 新增 environment, eye, folder, man, user-add, user-delete, usergro…"}, {"id": "6844903693373046792", "title": "基于vue-cli3 SSR 程序实现热更新功能", "desc": "通过上一篇文章 通过vue-cli3构建一个SSR应用程序 我们知道了什么是SSR，以及如何通过vue-cli3构建一个SSR应用程序。但是最后遗留了一些问题没有处理，就是没有添加开发时的热更新功能，难道要每次更新代码都要重新编译打包吗？显然不是很合理。那接下来我们将为该SSR…"}, {"id": "6975743071317131277", "title": "Node文件操作fs.mkdir和fs.rmdir", "desc": "对fs.mkdir(path,cb)进行拓展解决 path 只能一级一级的创建 且只能在已有的目录下逐级创建的尴尬情况；对fs.rmdir(path,cb)进行拓展使其即支持目录删除也支持文件删除"}, {"id": "6844904024974573576", "title": "用 Node.js 实现定时任务", "desc": "我曾经想要在特定时间执行特定的操作，而无需亲自运行它们。 在本文中，我们将研究如何在 Node 程序中创建和使用 Cron 作业。为此我们将创建一个简单的程序，该应用程序会自动从服务器中删除自动生成的 error.log 文件。 Cron 作业的另一个优点是，你可以安排程序以不…"}, {"id": "6999446914785607688", "title": "CHALK - 美化 node 输出的神器", "desc": "不喜欢阅读文字可以观看B站视频版[CHALK -美化node输出的神器](CHALK -美化node输出的神器_哔哩哔哩_bilibili) 基本用法 粗细、删除线等等 输出可以跟写文档一样可以有字体"}, {"id": "6844903656723054599", "title": "node：爬虫爬取网页图片", "desc": "周末自己在家闲着没事，刷着微信，玩着手机，发现自己的微信头像该换了，就去网上找了一下头像，看着图片，自己就想着作为一个码农，可以把这些图片都爬取下来做成一个微信小程序，说干就干，了解一下基本都知道怎么做了，整理分享一波给大家。 安装成功后会出现你所安装的版本号。 新建一个·名为…"}, {"id": "6965841132752371742", "title": "2021了，真的不要再说 Node.js 是一门编程语言了", "desc": "众所周知，Node.js 不是一门编程语言，它是一个执行 JavaScript 代码的工具。但是还是有人会误解 Node.js。本文会带你从 0 到 1 学会 Node.js"}, {"id": "6844903861048573959", "title": "【译】Node.js 日志打印指南", "desc": "当你开始使用JavaScript开发时，可能要学习的第一个技能就是如何使用console.log将内容打印到控制台。如果你搜索如何调试JavaScript，将会发现数百篇博客和StackOverflow文章指向console.log。因为这是一种很常见的方法，我们甚至开始使用像…"}, {"id": "6953819275941380109", "title": "大势所趋：流式服务端渲染", "desc": "豆皮粉儿们，大家好，又见面了。 前言 随着互联网技术的日新月异，前端代码变得日益复杂。然而前端代码的复杂带来了客户端体积增大，用户需要下载更多的内容才能将页面渲染出来。为了降低首屏渲染时间，提高用户体"}, {"id": "6844903497897345032", "title": "Nodejs文件上传", "desc": "笔者用nodejs做项目时需要用到文件上传的功能，在网上搜索了很多教程，找到了一个express的中间件，用于处理multipart/form-data类型的表单数据，可以很方便的将表单中的文件数据保存到服务器。 multer是一个node.js文件上传中间件，它是在 busb…"}, {"id": "6844903702453551111", "title": "手把手教你使用nodejs编写cli(命令行)", "desc": "前端日常开发中，会遇见各种各样的cli，比如一行命令帮你打包的webpack，一行命令帮你生成vue项目模板的vue-cli，还有创建react项目的create-react-app等等等等。这些工具极大地方便了我们的日常工作，让计算机自己去干繁琐的工作，而我们，就可以节省出大…"}, {"id": "6844903518734827528", "title": "Nuxt.js服务端渲染实践，从开发到部署", "desc": "经过几个周六周日的尝试，终于解决了服务端渲染中的常见问题，当SEO不在是问题的时候，或许才是我们搞前端的真正的春天，其中也遇到了一些小坑，Nuxt.js官方还是很给力的，提issue后很积极的给予帮助，再次感谢Nuxt.js的开发团队。 第一个拦路虎就是登陆时候的鉴权问题，如何…"}, {"id": "6844903609440665607", "title": "前端自动化：Node 命令行前端自动构建发布系统", "desc": "目前就我所呆的公司来说，前端的发版都是开发完之后执行编译，然后通过 ftp 上传到服务器中。项目多起来之后，加上测试环境和正式环境的分离，导致管理混乱。而且整个流程也很麻烦，要一步步手动去做。 所以一直就有一个想法，能不能做一个像 Vue Cli 一样的自动化工具，可以通过命令…"}, {"id": "6892952604163342344", "title": "手写Koa.js源码", "desc": "Express的源码还是比较复杂的，自带了路由处理和静态资源支持等等功能，功能比较全面。与之相比，本文要讲的Koa就简洁多了，Koa虽然是Express的原班人马写的，但是设计思路却不一样。Express更多是偏向All in one的思想，各种功能都集成在一起，而Koa本身的…"}, {"id": "6991495867219836936", "title": "理解node.js中的buffer", "desc": "为什么node.js中要引入buffer buffer的英文释义 buffer在英文中是缓冲，缓存的意思，从这个意思中可以初步获悉引入buffer是为了在node服务器上面做缓冲的。 node服务器在"}, {"id": "6844903648061816840", "title": "微信网页授权并获取用户信息", "desc": "1. 微信开发者工具及微信测试号 因为是微信授权，所以必须要在微信环境下使用，首先我们要在这里安装微信开发者工具，因为我们没有自己的应用，所以还需要在微信公众平台申请一个接口测试号,这个接口测试号就相当于我们的第三方应用。 2. 参数设置 1. 引导用户进入授权页面同意授权，此…"}, {"id": "6844903680622198797", "title": "Nodejs如何调用Dll模块", "desc": "公司项目采用Electron（ https://electronjs.org/ ）开发pc应用，会涉及到与底层硬件设备的通信，而sdk封装 基本上都是通过 C++ 动态链接库dll实现的。 以上两种方案都可以解决dll调用问题，方案选型要个人对C++ 的掌握程度，如果熟悉C++…"}, {"id": "6886350762692214792", "title": "极简秒杀系统 -《大前端 Node.js》", "desc": "本文章将集成Node集群 + kafka集群 + redis集群 + mysql。node框架选用的是Egg ，本文也是看了接水怪 《大前端进阶 Node.js》系列 双十一秒杀系统（进阶必看）的设计方案。 项目开发测试用了3个服务器（A,B,C）。 选用Egg主要是封装的比较…"}, {"id": "6844903904728219661", "title": "Node.js 如何简洁优雅的访问 MySQL 数据库", "desc": "nodejs诞生以来出现了一大批的web框架如express koa2 egg等等，前端可以不再依赖后端可以自己控制服务端的逻辑。今天我们就来说说前端在nodejs中如何操作mysql数据库。 简单查询条件场景可以解决，但是我们的真实场景的查询条件中各种表关联、各种字段like…"}, {"id": "6844903558832193550", "title": "使用Vue的nextTick引发的执行顺序之争", "desc": "在Vue中有一个nextTick方法，偶然一天，我发现不管代码的顺序如何，nextTick总是要比setTimeout先要执行。同样是排队，凭什么你nextTick就要比我快？ 开局一道题，内容全靠编。（在node下运行，答案在文末给出。） 这道题想必大家都见得很多了，答案脱口…"}, {"id": "6844903621230854158", "title": "前端自动化发布实战总结", "desc": "遇到这种情况，首先会想到的肯定是前后端分离。但考虑到目前的人员、技术储备情况，直接过渡到基于NodeJS的全栈式开发，阻力大，周期长，很可能会难产。 publish：发布项目代码，执行publish后将执行项目仓库中对应开发分支下的代码发布任务。在云端构建后的代码最终会发布到对…"}, {"id": "6971310379683184653", "title": "node.js学习笔记二——如何处理文件系统", "desc": "fs文件系统 1.使用fs模块 所有的文件系统操作都具有同步的、回调的、以及基于 promise 的形式。 2.同步 运行node fs.js，控制台返回/delete.js 已被成功地删除，并删除d"}, {"id": "6926812902846529550", "title": "前端模块化的理解（AMD,CMD,CommonJs,ES6）", "desc": "初期的web端交互还是很简单，不需要太多的js就能实现。随着时代的的发展，用户对Web浏览器的性能也提出了越来越高的要求，浏览器也越来越多的承担了更多的交互，不再是寥寥数语的js就能解决的，那么就造成了前端代码的日益膨胀，js之间的相互依赖也会越来越多，此时就需要使用一定的规范…"}, {"id": "6922277754016628750", "title": "使用node的服务器请求初解", "desc": "前几天写了一个翻译小工具，使用了node.js的http服务器请求,在这里记录一下使用的步骤和注意事项本章知识点百度翻译平台接口md5加密转换http.request请求typescript转Java"}, {"id": "6971072490088955918", "title": "Node系列学习之Node基础", "desc": "这是我参与更文挑战的第7天, 今天正式开始学习Node,这是第一天的基础笔记, 略显稚嫩, 加油吧,奥利给~"}, {"id": "6844904122555039758", "title": "《微信每日说》的进阶历程", "desc": "去年从《微信每日说》写到《微信小秘书》，再到《哄女友神器》，一步一步的给微信每日说增添了许多功能，也帮助了很多朋友做出自己的微信机器人。但是我自己却不是很满意，因为我的想法是能够做一个可视化的界面来完成所有的配置工作，但同时又能让使用者有一定的参与感。带着这份想法还有自己的信念…"}, {"id": "6844903696845766663", "title": "学react哪家强，阿宽带你看React的生命周期", "desc": "学习一个框架，最重要的莫过于对生命周期的理解了。嗯，很懵，但是人傻就是要多看书，多看掘金上的优秀文章，看了两篇React生命周期的文章之后，大概也能懂得个大概。就记录一下吧 ～ 1 . 当使用 ES6 classes 编写 React 组件时，其实就是调用内部方法 create…"}, {"id": "6844903634673598478", "title": "WebRTC点对点通讯架构设计", "desc": "这是我在公司内部的一次分享，想要让小伙伴对WebRTC都有所了解，并且可以上手去做一个基于webrtc的应用。虽然几乎所有人都知道，webrtc是一个浏览器端内置的点对点接口，甚至是准标准了。但是，到底怎么利用这一个已经不是新特性，但是很不幸的是，不少人对这东西还是只停留在听说…"}, {"id": "6844903590494994445", "title": "node编码中的坑", "desc": "在上篇文章Buffer(Buffer(缓冲器))中，聊了关于编码的问题。但是编码有很多小坑，今天我们聊聊坑的问题。 第一个就是BOM头的问题。 在此之前得先知道，gb2312编码中，一个汉字是由两个字节(16个位)组成。 在我们写代码的时候经常会遇到一个问题，就是我们写的代码是…"}, {"id": "6844903669612150792", "title": "每天阅读一个 npm 模块（6）- pify", "desc": "之前阅读的 npm 模块都来源于 awesome-micro-npm-packages 这个项目，不过浏览了一些之后，发现好多都不太适合拿来做源码学习。如果读者有推荐的适合的模块，欢迎在评论区指出 😊 今天阅读的模块是 pify，通过它可以将很多采用 callback 方式进…"}, {"id": "6844903672615272461", "title": "nodejs“并行”处理尝试", "desc": "对比结果让我挺吃惊的，这样看来单进程的模拟效果居然会比多进程好，但突然想到自己电脑上才几核，怎么同时跑几百个进程....... 当threads设置与核数差距不大时，两者效果差不多。 client.js能模拟“并行”的效果实际上是利用网络耗时远大于代码循环的原理，第一次for循…"}, {"id": "6844903746686681102", "title": "mysqls为node.js而编写的sql语句生成插件 crud for mysql.", "desc": "It is written in JavaScript,crud for mysql.You can also use transactions very easily. mysqls 一款专为node.js生成sql语句的插件，链式调用，使用灵活。支持生成sql语法，也支持生…"}, {"id": "6844903958503407630", "title": "提高首页访问速度 and 记录一次Nuxt天坑", "desc": "起因将整个博客用Nuxt重构完成之后我发现首页访问速度还是不尽人意，白屏时间确实大大缩短，但是背景出现到最近文章出现这中间还是有比较长的一段时间，也就是说第一次网络请求比较慢，那有没有办法解决呢，首先"}, {"id": "6844903708694691854", "title": "彻底弄懂 NodeJs 事件循环-比官方更加详细", "desc": "翻译完了之后，才发现有官方翻译;但是本文更加全面。本文是从官方文档和多篇文章整合而来。 看完本文之后，你会发现这里内容与《NodeJs深入浅出》第三章第四节3.4 非I/O异步API中的内容不吻合。因为书上是有些内容是错误的。 1. 什么是事件循环(What is the Ev…"}, {"id": "6844903729716527117", "title": "技术周刊（2018-11-26 WebSocket）", "desc": "WebKit 推出新的着色语言 WHLSL，它对 HLSL 进行了扩展，变得更安全、更可靠。🔗 最新的 Safari 技术预览版让 a 标签默认开启 noopener 模式，此前当 a 标签使用 target=\"_blank\"在新标签打开页面时，可以使用 window.ope…"}, {"id": "6948103170698674184", "title": "回顾CommJS规范和Node模块儿", "desc": "上篇文章分享了的一个实现小程序的持续集成的问题，小程序的获取用户信息的接口getUserInfo将在2021-04-13号被getUserProfile替代，所以的需要考虑一下项目中是否需要更新了。 下篇会接着聊这个话题。 Javascript在很长一段时间内被认为是一种网页脚…"}, {"id": "6844904013310197767", "title": "浅析 commonjs 中的模块化实现原理", "desc": "module.exports和exports在nodejs模块化中，使用exports或module.exports都能够向外部模块导出对象打印console.log(a)可以看出module和exp"}, {"id": "6844903613169401869", "title": "浏览器的event loop和node的event loop", "desc": "event loops也就是事件循环，它是为了协调事件（event），用户交互（user interaction），脚本（script），渲染（rendering），网络（networking），用户代理（user agent）的工作而产生的一个机制。 JavaScript语言…"}, {"id": "6939523073435500580", "title": "Node.js专题讲解 第1期 概念篇", "desc": "经过这几年的发展，前端普遍进入了技术深水区，只会Web页面开发已经难以满足企业的需求，Node逐渐成为了刚性技能。为了回馈粉丝的支持，前端微服务特开启Node.js专题，系统学习Node.js知识，为还在迷茫路上的你，提供系统化的学习，在学习过程中任何问题可以在后台回复，小编拉…"}, {"id": "6844903686787825677", "title": "[译] 简单 5 步，理解 JWT", "desc": "这篇文章，将会解释 JSON Web Tokens (JWT) 的基本原理以及为什么使用它们。"}, {"id": "6950111111324631053", "title": "nvm node版本管理工具", "desc": "前提最近公司的业务不是很繁忙，想用一套新的前端框架来重构我们的小程序。我们之前的小程序就用mpvue来搭建的，现在mpvue这个项目已经不维护了，想多端的转化比较麻烦，所以学习一下taro,而且也没有"}, {"id": "6903309700033413127", "title": "node中的发布订阅(EventEmitter)", "desc": "1. on和emit 2. off 3. once 4. newListener"}, {"id": "6844903873727954952", "title": "深入koa源码（二）：核心库原理", "desc": "最近读了 koa2 的源码，理清楚了架构设计与用到的第三方库。本系列将分为 3 篇，分别介绍 koa 的架构设计和 3 个核心库，最终会手动实现一个简易的 koa。这是系列第 2 篇，关于 3 个核心库的原理。 koa2 种推荐使用 async 函数，koa1 推荐的是 gen…"}, {"id": "6844903829234778119", "title": "（一）Mocha源码阅读: 项目结构及命令行启动", "desc": "Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha …"}, {"id": "6844903956129415182", "title": "nodejs深入学习系列之libuv基础篇(二)", "desc": "好了，了解了上述的基本概念之后，我们来扯一扯Libuv的事件循环机制，也就是event-loop。还是以[译文]libuv设计思想概述一文展示的两张图片，再结合代码来学习整个Libuv的事件循环机制。 细心的童鞋会发现这张图片被我用红框分割成了两部分，为什么呢？因为Libuv处…"}, {"id": "6937948760374771725", "title": "写一个有道翻译的 Node 命令行工具🍳", "desc": "1. 前行提要 main 字段指定 package.json 中的出入口文件,如果安装命令行工具,则是由 bin 字段指定. 2. 写代码 process.argv 属性会返回一个数组，其中包含当 Node.js 进程被启动时传入的命令行参数。 第一个元素是 process.e…"}, {"id": "6844903713279049735", "title": "深入理解 V8 的 Call Stack", "desc": "Call Stack(调用栈) 一般指计算机程序执行时子程序之间消息处理的相互调用产生的一些列函数序列，而且几乎所有的计算机程序都依赖于调用栈。 在探讨 Call Stack 前，先来搞清楚 Stack(栈)的概念。 Stack 就是一种特殊的串列形式的数据结构，特殊之处在于只…"}, {"id": "6912370116105764871", "title": "node-glob", "desc": "[...]匹配一个字符范围，类似于RegExp范围。如果范围的第一个字符是!或^则它匹配所有不在范围内的字符。 !(pattern|pattern|pattern) 与提供的匹配规则都不匹配的所有内容。 ?(pattern|pattern|pattern) 匹配规则零个或一个。…"}, {"id": "6844903626125623304", "title": "前端测试：Part II （单元测试）", "desc": "我们在Part1里已经说过，但与那测试就是测试单元的代码，不管这些单元是函数、模块还是类。多数人认为测试应该以单测为主，但我不这么认为，如果你同意也没有问题。我会一遍一遍又一遍地在这一系列文章中强调，你怎测试都行，只要你写了足够多的测试，让你对你的上线有信心就行。 不管你写多少…"}, {"id": "6932757303686856718", "title": "node http server源码解析", "desc": "本文主要过下http生成服务和处理请求的主要流程，其他功能并未涉及。 调用http.createServer函数时，会返回一个Server实例，Server是从net Server类继承而来的。因此，http Server实例也就具备监听端口生成服务，与客户端通信的能力。前面例…"}, {"id": "6844903968116588557", "title": "axios 和 PromiseA+", "desc": "axios基于promise封装的ajax库用于客户端发送ajax请求安装axios库npmiaxios--save/yarnaddaxios--saveaxios常用方法####git请求axios"}, {"id": "6844903953084186638", "title": "Node.js 路由设计&错误捕获&错误处理", "desc": "其实 express 中间件的原理很简单，express 内部维护一个函数数组，这个函数数组表示在发出响应之前要执行的所有函数，也就是中间件数组，每一次 use 以后，传进来的中间件就会推入到数组中，执行完毕后调用next方法执行函数的下一个函数，如果没用调用，调用就会终止。 …"}, {"id": "6844903609960759310", "title": "浅析node.js的模块加载", "desc": "使用require引入相应的模块，即可使用。 vm模块是node.js提供在V8虚拟机中编译和运行的工具，node.js中的模块内部实现就是通过此模块完成。 说说vm的基本用法。 以上是可以正确访问num的值。 vm模块提供了方法创建一个安全的沙箱，在指定的上下文环境中运行代码…"}, {"id": "6844903542638002190", "title": "node简单实现一个更改头像功能", "desc": "首先，当用户点击上传头像，更新头像的时候，将头像上传到项目的一个文件夹里面（我是存放在项目的public/images/img里面），并且将图像名重命名（可以以时间戳来命名）。"}, {"id": "6883759802434977806", "title": "express中间件原理connect", "desc": "我简单看了一下connect源码，弄清楚了上面的这3个问题。 每次调用use，都会向这个应用(app)实例的栈(stack)推入一个带路径和处理函数的对象。 JavaScript的函数的长度属性：length。 这么说可能比较绕，看下面这个例子就懂了。 connect正是通过中…"}, {"id": "6844903601173692429", "title": "[译] 漫画：深入浅出 ES 模块", "desc": "ES 模块为 JavaScript 提供了官方标准化的模块系统。然而，这中间经历了一些时间 —— 近 10 年的标准化工作。 但等待已接近尾声。随着 5 月份 Firefox 60 发布（目前为 beta 版），所有主流浏览器都会支持 ES 模块，并且 Node 模块工作组也正…"}, {"id": "6844903560044363790", "title": "React+Mobx+Koa2+LeanCloud 搭建个人版TodoList", "desc": "最近在看Mobx和Koa相关的内容，实践初出真知，我们来做一个小项目实践一下。最容易想到的就是Todolist了，这次我们做得稍微实用一点，放到自己的vps上日常用用也是不错的~ 因为项目比较简单，bundler我用的是parcel，一行配置都不用写确实很爽，编译速度也非常快。…"}, {"id": "6844903967273533448", "title": "Node.js 技术架构简述", "desc": "V8 引擎、libuv、C/C++ 实现的 c-ares（DNS解析）、http-parser（HTTP 解析）、OpenSSL（HTTPS）、zlib（压缩） 等库。 假如 C/C++ 实现了一个 xxx 库，很好用，JS 无法直接调用它。Node.js 用 C++ 对其进行…"}, {"id": "6844903505958797319", "title": "Node 调试指南 —— Inspector 协议", "desc": "Node v6.3+ 的版本提供了两个用于调试的协议：v8 Debugger Protocol 和 v8 Inspector Protocol 可以使用第三方的 Client/IDE 等监测和介入 Node(v8) 运行过程，进行调试。 v8 Debugger Protocol…"}, {"id": "6844904019362594823", "title": "Angular8 组件样式不生效引发的思考", "desc": "背景从angularjs升级到angular8,对应ui-grid不支持。寻找替代方案，入门可以参考。小插曲基于组件思想，尝试把组件样式，放到组件同级目录将ag-gridcss样式引入到app.com"}, {"id": "6844903630475264007", "title": "Vue+Node全栈实践(带源码)", "desc": "使用Vue和Node实现前端，服务端，后台管理系统三个项目。 前后端分离，Restful API。 还没有添加权限管理的功能，后续会加上。进入登录页面，如果不懂或者需要账号私聊我。。。 第一次使用iview-admin，感觉功能还是挺多的，还在摸索阶段，只用来实现简陋的功能，后…"}, {"id": "6923141177172557838", "title": "定时器，Immediates 和 Process.nextTick —— Node 事件循环 Part 2", "desc": "欢迎回到⎣事件循环⎤文章系列！在第一篇文章中，我整体介绍了 Node 的事件循环。在这篇文章中，我准备用一些代码片段作为例子，来详细探讨我们前文提及的三个重要的事件队列 —— 定时器队列、immediates 队列以及 nextTick 队列。 先让我们再次看看前文出现过的图示…"}, {"id": "6898331270300991496", "title": "koa1.x中间件（middleware）执行流程", "desc": "首先koa中application.js是初始执行文件，暴露了一个Application构造函数，一般我们new Koa()时构造函数内部会初始化一些属性。上节讲到的middleware 数组也在构造函数的初始化属性中，下面是源码片段 接着就是listen函数，listen是绑…"}, {"id": "6844903607867801608", "title": "Commander写自己的Nodejs命令", "desc": "将介绍如何利Javascript做为服务端脚本，通过Nodejs框架web开发。Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们"}, {"id": "6844903629913063431", "title": "前端工程师最好的全栈开发实践-设计开发属于自己的nodejs博客", "desc": "我本是一名文科专业半路出家的前端开发人员，从最初只会切图和写CSS、Html到现在会写点JS，一路坑坑洼洼，也是经历了很多，从2010年开始就用WordPress开设了自己的博客，虽然内容零零散散的并不多，但是多多少少也留下了时光的缩影，一直希望自己有一个自留地。用Node.j…"}, {"id": "6844903629401358349", "title": "node 之EventEmitter实现", "desc": "node根据事件驱动,那基本都是回调,最常用的叫发布订阅模式,什么叫发布订阅呢?对比观察者模式,前者是主动地,后者是被动的可以正常输出1.txt里面的内容,那么EventEmitter是如何实现的呢?"}, {"id": "6950680006624280612", "title": "学习笔记(31):Node.js基础知识(下)", "desc": "NodeJS常见APIBuffer1. ArrayBuffer(注意:ArrayBuffer不是特指node.js中的Buffer).ArrayBuffer 实例对象用来表示固定字节长度的二进制缓存区"}, {"id": "6936180057886949389", "title": "koa开发笔记", "desc": "DEMO-01安装koa、koa-router2.引入koa、koa-router3.配置路由4.监听端口5.完整demo"}, {"id": "6844903534673002509", "title": "[译]NectarJS:编译JavaScript为任意平台原生二进制代码", "desc": "大家好，我是Adrien Thierry,我启动了一个alpha版本重要的项目，这个项目我付出了一年多的时间，这个项目就是NectarJs. NectarJS 是一个JavaScript编译器，他可以使JS开发者做任何事情都十分有效并且使用他们最喜欢的语言。 自从上个九月，我决…"}, {"id": "6844903840878198797", "title": "Node.js实现用户评论社区（体验前后端开发的乐趣）", "desc": "接着上一节的内容来，今天我们要完成一个用Node开发后台服务器，实现一个简单的用户评论社区。可以先看下效果图： 建立项目文件夹comment-list，在里面新建一个public文件夹，public文件夹存放我们允许客户端访问的资源，这里是公开的。app.js文件是我们服务端代…"}, {"id": "6844903582936858637", "title": "从node.js模块化开发来了解javascript闭包", "desc": "之前看过很多关于javascript闭包的解释，只有短短几个demo，一大段晦涩难懂的介绍，巴拉巴拉一大段闭包的概念，但是到最后也没看懂闭包到底是什么意思，起什么作用，直到昨晚凌晨，我在学习node.js模块开发的时候，才突然恍然大悟，所以赶紧记下来，免得以后忘记。代码来源：廖…"}, {"id": "6844903863607099405", "title": "50行代码实现Hexo等静态博客引擎的核心原理", "desc": "本文采用的语言是NodeJS，需要读者有一定的CSS、HTML、JS基础阅读。 像hexo、Jekyll等静态博客引擎的主要功能为将模板与数据通过程序进行拼接编译，生成可以浏览的网页。大量不同的数据与相同的模板拼接即可形成展示的静态网页组。多个网页组相结合即可生成静态网站。 本…"}, {"id": "6949499578957692941", "title": "Node.js | cluster 集群 多进程读写的简单使用", "desc": "在其他语言中，实现多进程或多线程是非常容易的事情，而对于一个node实例，它是单线程进行工作，不过，node仍能实现多进程工作，在读写方面会比单进程效率会提升很多。"}, {"id": "6844903507678642190", "title": "Node 8.X 正式成为 LTS , Node 9 (快速版本)也同时发布", "desc": "Node 8 改进了很多,不管对ES API 特性的原生实现,还是性能上. http://nodesource.com/blog/five-fantastic-features-shipping-with-node-js-8-lts-carbon/"}, {"id": "6844903497901555726", "title": "夯实JS系列--变量、作用域和内存问题", "desc": "在ECMAScript中，变量分为基本类型和引用类型两种。 基本类型就是存储简单的数据段。而引用类型指的是那些可能由多个值构成的对象。 在ECMAScript中，基本类型包括：Undefined、Null、Boolean、Number和String。 这些基本类型的对象都是按值…"}, {"id": "6844903815255179272", "title": "zanePerfor监控系统在高\b流量项目下的架构配置建议实践说明", "desc": "HI!，你好，我是zane，zanePerfor是一款我开发的一个前端性能监控平台，现在支持web浏览器端和微信小程序端。 我定义为一款完整，高性能，高可用的前端性能监控系统，这是未来会达到的目的，现今的架构也基本支持了高可用，高性能的部署。实际上还不够，在很多地方还有优化的空…"}, {"id": "6844903697281974285", "title": "Node 案发现场揭秘 —— 如何利用 GC 日志不修改代码调优应用性能", "desc": "GC 的全称是 garbage collection，它其实是一种自动内存管理机制，一般会由对应语言实现的垃圾回收器，在某些触发条件下对当前程序不再使用的对象内存进行回收处理。 GC 日志目前是文本格式输出的形式，需要大家获取到以后进行对应的按行解析处理，也可以使用 v8-gc…"}, {"id": "6844903701371420686", "title": "WebAssembly 后 MVP 时代的未来：卡通技能树", "desc": "日常忙着打 bug + 最近沉迷游戏，大半年没在知乎上发文章了，实在是有点惭愧 --||| 开发者可能普遍对 WebAssembly 还接触的不多，文末有关于 WebAssembly 的展开阅读 原文链接：WebAssembly’s post-MVP future: A car…"}, {"id": "6844903594244702216", "title": "创建本地服务，及服务代理(解决跨域)，支持热更新，针对老项目设计", "desc": "创建本地服务，及服务代理，支持热更新CreatehttpproxysupportHotupdateTODO特别针对老型项目设计，没有使用构建工具（webpack、gulp、gruntetc.）安装（i"}, {"id": "6844903616583581704", "title": "襁褓中的 deno（一）：运行时调用分析", "desc": "襁褓中的 deno（一）：运行时调用分析"}, {"id": "6844903615916670983", "title": "Stream -- Node.js中最好的却最容易被误解的部分", "desc": "Streams 是一个数据集——和数组、字符串一样。不同的是streams的数据可能不能马上全部获取到，他们不需要在内存中。这样使得streams在处理大数据集或者来自外部的数据源的数据块上能发挥很大的作用。 然而，streams不仅是能用在大数据上，也给我们在代码中的可组合的…"}, {"id": "6967929951999754253", "title": "nodejs内存监控2-prometheus+grafana监控实现", "desc": "nodejs内存监控2-prometheus+grafana监控实现 前言 本文是基于k8s为前提，所以这边会声明一些你提前需要做得或者有的环境： 一套k8s集群 已经提前部署了ingress 已经提"}, {"id": "6844903604013252621", "title": "打造跳跃音波播音乐放器(Electron+Nodejs+React)", "desc": "Electron可以让我们使用html,css,javascript来搭建跨平台（Windows、macOS、Linux）的桌面应用。下面通过Electron+Nodejs+React来实现一个支持播放在线音乐及本地音乐的播放器。播放器设计风格为windows的Fluent D…"}, {"id": "6844903645905977357", "title": "node-ffi使用指南", "desc": "在nodejs/elctron中，可以通过node-ffi，通过Foreign Function Interface调用动态链接库，俗称调DLL，实现调用C/C++代码，从而实现许多node不好实现的功能，或复用诸多已实现的函数功能。 node-ffi通过Buffer类，在C代…"}, {"id": "6911622635281612814", "title": "图解koa2核心原理", "desc": "koa是经常使用的node端框架，它封装了一系列node方法，通过它的api让写服务变得更加方便。而且相比express，koa支持promise写法，更加符合现在的前端代码编写习惯，代码可读性更强。"}, {"id": "6844903654718177293", "title": "十分钟上手chrome性能分析面板", "desc": "chrome 的开发者工具中提供了很多高效工具方便我们对页面进行性能分析.之前自己只用着一些基本的功能, 最近详细的过了一下官方文档,特别是 performance 面板(大部分都是之前的Timeline面板) 的使用(需要相对新一些的chrome浏览器版本). 如果勾选了 m…"}, {"id": "6970215487766528007", "title": "【前端实践系列之五】Express+MongoDB后台搭建保姆式教程", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 ! 👽概论 太卷了太卷了，前端不会点后台知识都不好意思吹牛逼了。Nodejs诞生以来，前端侵入后端的能力越来越强，虽说JS搭建的后台应用在性能等方"}, {"id": "6844903747693314055", "title": "教你从零开始搭建一款前端脚手架工具", "desc": "在实际的开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具应运而生。笔者使用较多的yoeman，express-generator和vue-cli便是当中之一。它们功能丰富，但最核心的功能都是能够快速搭建一个完整的项目的结构，开发者只需要在生成的项…"}, {"id": "6915200398512881672", "title": "Node.js 中如何收集和解析命令行参数", "desc": "在开发 CLI（Command Line Interface）工具的业务场景下，离不开命令行参数的收集和解析。 接下来，本文介绍如何收集和解析命令行参数。 由上述示例可以发现，Node.js 在处理命令行参数时，只是简单地通过空格来分割字符串。 对于这样的参数数组，无法很方便地…"}, {"id": "6844903779817488391", "title": "Hapi.js 起步 - 写给前端开发的 Node Web 框架入门", "desc": "或许你已经使用过 Express, Koa2 等 Node.js 的 WEB 框架，在构建 WEB 应用程序时，你的工作仅仅是产出 RESTFUL API，或者通过 Node 调用其他网络接口。你或许感觉到是不是有一种更简单的方式来处理请求，或在构建项目初期，有没有一种不必因为…"}, {"id": "6969457980198780942", "title": "登录校验-session、token", "desc": "更多文档 前言 小一个月没有写博客了，因为最近一直在忙项目和低代码平台的研究，低代码的服务端是用node去实现的，碰到的第一个问题就是登录校验的问题，这里做一下分享 session 先简单了解一下se"}, {"id": "6936755284685619213", "title": "通过集群提高 Node.js 应用程序性能", "desc": "在构建应用程序产品时，我们通常会寻找一些方法来尽可能优化应用程序的性能。在本文中，我们将探讨一种能有效改善 Node.js 应用程序处理工作负载的方法。 Node.js 实例是在单个线程中运行的，意味着在如今大多数计算机都在使用的多核系统（multi-core system）上…"}, {"id": "6957302012312567844", "title": "《深入浅出Nodejs》总结、记录（一）", "desc": "node是一个基于事件驱动来实现非阻塞I/O的服务器。 node结构和chrome十分相似，它们都是基于事件驱动的异步架构，浏览器通过事件驱动来进行页面交互、Node通过事件驱动来服务I/O。 因为node是异步I/O，所以处理I/O密集型的任务是毋庸置疑的（I/O密集型任务包…"}, {"id": "6844903694870265870", "title": "React 中同构（SSR）原理脉络梳理", "desc": "随着越来越多新型前端框架的推出，SSR 这个概念在前端开发领域的流行度越来越高，也有越来越多的项目采用这种技术方案进行了实现。SSR 产生的背景是什么？适用的场景是什么？实现的原理又是什么？希望大家在这篇文章中能够找到你想要的答案。 服务器端渲染：用户请求服务器，服务器上直接生…"}, {"id": "6844903653757698062", "title": "关于csrf,什么是csrf,怎么防范它?", "desc": "简单点说，CSRF 就是利用用户的登录态发起恶意请求。 妈妈: ... 可以对 Cookie 设置 SameSite 属性。该属性设置 Cookie 不随着跨域请求发送，该属性可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。 对于需要防范 CSRF 的…"}, {"id": "6844904129412726798", "title": "[译] 如何更新 package.json 中的依赖项", "desc": "Npm (Node Package Manager) 是一种应用于 JavaScript 编程语言的包管理器，也是 Node.js 的 JavaScript 运行时环境的默认包管理器。 在一个项目中，其包依赖项列表保存在 package.json 文件中。每个已安装的包都被分配…"}, {"id": "6989425792061014046", "title": "pm2常用命令汇总", "desc": "pm2可以用来管理项目的启停。 这两天修复了公众好的服务，服务出现故障的原因是我之前修改了nginx的配置，原先公众号的服务是在根目录下，修改了以后找不到对应的服务。改了个目录，把目录代理到对应端口的"}, {"id": "6995359230630821925", "title": "事件循环在Node.js和浏览器环境下的差异", "desc": "概述 不论在浏览器环境，还是Node环境，js运行的事件循环都是重中之重，但两个环境下的事件循环是基于不同的原理，尤其是Node.js 10+版本之前，一个是基于浏览器，一个是基于 libuv 库。 "}, {"id": "6975750260530675726", "title": "node + express + mysql实现简单的增删查改", "desc": "这是我参与更文挑战的第2天，活动详情查看：更文挑战 前提 实现步骤 1.新建数据库表 附数据表结构： 2.创建exprss项目 3.安装nodejs的mysql插件 4.创建数据库配置文件 项目根目录"}, {"id": "6844903652960763911", "title": "hey，你的Event Loop", "desc": "我们都知道JavaScript是单线程的，也就是说同一时间只能干一件事。这是因为JavaScript主要是用来操作DOM的，如果变成多线程，浏览器就懵逼了，不知道该听谁的了。但是虽然js是单线程，但是完全可以模拟多线程，靠的就是Event Loop。 我们都知道js中的代码分 …"}, {"id": "6982594815934332936", "title": "Node 多进程编程", "desc": "在多进程编成过程中，需要重点处理好父，子进程之间的关系，否则很容易出现孤儿进程和僵尸进程，造成意想不到的后果。 孤儿 / 僵尸 进程 孤儿进程 - 当父进程先于子进程退出时，子进程由系统进程接管 僵尸"}, {"id": "6844903576616042503", "title": "React服务端渲染改造框架(webpack3.11.0 + React16 + koa2)", "desc": "本地开发使用webpack-dev-server，实现热更新，基本流程跟之前react开发类似，仍是浏览器端渲染，因此在编写代码时要考虑到一套逻辑，两种渲染环境的问题。 当前端页面渲染完成后，其Router跳转将不会对服务端进行请求，从而减轻服务端压力，从而页面的进入方式也是两…"}, {"id": "6844903678315347981", "title": "JavaScript之实现一个简单的Vue", "desc": "vue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vueObject.defineProperty()实现之前我们得先看一下Obje"}, {"id": "6844903502951481357", "title": "使用Vue语法渲染你的Koa视图文件？", "desc": "前言Koa是Express团队开发新一代NodeWeb应用开发框架，当你使用她开发你的Web应用时，一件很重要的事肯定就是——怎样渲染我的视图？很多人想，那还不简单，选择一个模板引擎，再找个对应支持该"}, {"id": "6844904023955341320", "title": "使用 Node.js 处理 Excel 格式的多语言文件为 JS 版语言包", "desc": "在做国际化时，运营或者产品往往会给到 Excel 版的多语言包，少则几个，多则十几个，而且经常会频繁的修改语言包的内容。而前端要根据 Excel 文件转成对应的 JSON 或者 JS 文件，手动处理显然是不现实的，一来费时费力，效率低下，二来容易出错，最重要的是不符合程序员的做…"}, {"id": "6844904038396329992", "title": "踩坑自定义Conten-Type", "desc": "其中有个场景是这样, 前端页面需要同时提交 表单, 图片, 视频. 自然而然的就想到了FormData. 找到multer文档一看... 需要提前定义好下载路径 这不是我想要的... 经过一波艰苦的尝试后, 终于折腾出来了... | header | chunk0 | chun…"}, {"id": "6844903590532743175", "title": "ShadowNode v0.7.0 发布", "desc": "我也在今天抽空增加了在 TravisCI 的自动构建，在 ShadowNode 下个版本（v0.8.0）将会着手优化内存和性能方面的问题，以及 100% 兼容 N-API 的写法。内置模块以及社区兼容性将暂时不会再增加更多特性。 另外，今天将放出一个彩蛋，ShadowNode …"}, {"id": "6844903510664855559", "title": "JavaScript 三招两式之异步编程 (下)", "desc": "Javascript 这门语言由于其特有的使用场景，在异步编程方面历经多个版本的发展，在社区的推动之下衍生出了一系列优秀的语法和思想。本文主要介绍这门语言当中，对异步逻辑的实现方式。"}, {"id": "6847902203290583048", "title": "Node 引入模块过程", "desc": "调用require方法引入模块调用Module._load(request,parent,isMain)方法加载模块创建模块对象调用模块原型上的加载方法load获取文件扩展名根据扩展名调用对应加载策略"}, {"id": "6844903509448458247", "title": "一个简单的nodejs文件从运行到结束都发生了什么", "desc": "作者 xtx1130"}, {"id": "6844904113667309576", "title": "浅析Node是如何进行错误处理的", "desc": "错误处理是程序中一个重要的部分，也是判断你的程序是否专业的标准。一般来说我们写程序的时候都会选择使用try...catch来进行错误捕获，或者有时候我们会使用throw进行错误抛出，这是都是常用的错误捕获方法。但是我们在进行node进行开发的时候就会接触到异步过程的中的错误处理…"}, {"id": "6844903575668129799", "title": "Express源码级实现の路由全解析（下阕）", "desc": "本篇是 Express深入理解与实现系列 的第三篇，将着重讲述 中间件 、错误中间件、路由容器、动态路由和param的应用与实现。 emmm...前两章没点赞的话是看不懂这篇的哦！咳咳。。。 .all方法注册的路由在分发时可以无视method类别，也就是说只要请求路径是对的，不…"}, {"id": "6844903717544656909", "title": "如何构建通用存储中间层", "desc": "开门见山地说，这篇文章【又】是一篇安利软文~，安利的对象就是 tua-storage。 顾名思义，这就是一款存储数据的工具。 日常开发中，在不同的平台下由于有不同的存储层接口，所以往往导致相同逻辑的同一份代码要写几份儿。 在 React-Native 的场景下，使用的又是 As…"}, {"id": "6844903504882499598", "title": "Node 调试指南 —— Inspector 协议", "desc": "v8 Inspector Protocol 是 node v6.3 新加入的调试协议，通过 websocket （通常使用 9229 端口）与 Client/IDE 交互，同时基于 Chrome/Chromium 浏览器的 devtools 提供了图形化的调试界面。"}, {"id": "6844903512308973575", "title": "从小小题目逐步走进 JavaScript 异步调用", "desc": "也许这是个面试题，管它呢。问题的主要目的是考察对异步调用执行结果的处理，既然是异步调用，那么不可能同步等待异步结果，结果一定是异步的 setTimeout() 经常用来模拟异步操作。最早，异步是通过回调来通知（调用）处理程序处理结果的 不过回调在用于稍大型一点的异步应用时，容易…"}, {"id": "6844903561403301896", "title": "webpack-loader实现一个简化版gitbook", "desc": "最近在看weppack-loader，不看不知道，当我翻到markdown-loader的时候，大吃一惊，简直精简的不能再精简了，除去require和export语句，一共就有四行。基本上loader的作用一目了然：在js进入执行之前对其做改动。 babel-loader是最常…"}, {"id": "6844903828324614151", "title": "通过Webkit远程调试协议监听网页崩溃", "desc": "因为正在开发一个项目，而这个项目使用到了puppeteer，其中有个功能是在puppeteer打开的chrome里打开多个Tab，并进行管理。 虽然puppeteer可以打开多个网站，但是并不利于管理，所有我使用的是插件的方式，通过插件来打开多网站，并进行管理。 但是这里有个需…"}, {"id": "6844903742144249869", "title": "koa-mock-swich", "desc": "koa-mock-swich是一个前端mock数据、并可以管理返回数据的server。 为什么需要koa-mock-switch。 即，局域环境有一个专门模拟数据用的数据库，然后，后端开发完接口以后，和线上一样地进行增删改查，最后返回给前端数据。 时间上，前端在需要数据接口的时…"}, {"id": "6844903577861750797", "title": "node基础与event loop", "desc": "node是一个基于Chrome V8引擎的javascript运行环境，node不是一门语言，而是让javascript运行在后端的运行时环境，所以node中没有DOM和BOM，node也提供了一些内置模块，例如：http,fs等。nodejs使用了事件驱动、非阻塞式I/O的模…"}, {"id": "6844903517035954183", "title": "SimpleMarkdown - 一款基于NodeJs的Markdown编辑器", "desc": "一款基于NodeJs的Markdown编辑器"}, {"id": "6844903516742369293", "title": "Node-prune﹣﹣专门移除 node_modules 不必要档案的轻量工具", "desc": "如果你有试过打包整个 Node 项目到服务器上，那么你发现自己的项目体积比较大，其中一个原因是 node_modules 文件夹包含很多不必要的档案。在使用 npm 安装不同插件时，往往会包含很多不必要的文件夹，例如example, doc。要么我们就是手动删除它们，要么我们就是"}, {"id": "6974792010129489951", "title": "实践：使用Node.js从终端中读入内容", "desc": "平时在写练习算法题、遇到线上笔试时，大部分在线练题网站都需要自己写输入输出。本文就和大家分享一下Node.js如何从终端中录入内容"}, {"id": "6844903586971779080", "title": "快应用入门，看这篇就够了", "desc": "简单地说快应用是国内的十大主流手机厂商比如小米、华为、ov 等联合推出的一种新型应用。无需安装，秒开，体验媲美原生。还提供了像原生应用一样的入口：应用商店，搜索页等。 接下来会教大家如何搭建、启动、预览和调试快应用项目。和官方文档类似，这里我增加了一些我在这过程中遇到的坑及解决…"}, {"id": "6844903604961165319", "title": "在Node.js中使用C++模块", "desc": "对JavaScript程序员来说，Node.js确实是我们作为服务端开发的首选语言。Node.js的性能优势源于其使用Google的V8引擎，使用非阻塞式的I / O模型，依靠事件驱动。但涉及密集型计算的场景时，Node.js不一定能够有很优秀的表现。还好有C++ Addons…"}, {"id": "6980243199725944845", "title": "解决npm install时npm ERR! Unexpected end of JSON input while parsing near", "desc": "最近我的npm发抽了似的，安装各种依赖出现各种报错，直接记录一下。 问题 执行npm install时，控制台的部分报错： 报错截图，如下： 解决 清除缓存 重新安装 3. 试试npm run dev"}, {"id": "6844903757126303758", "title": "Node.js的进程管理", "desc": "众所周知Node基于V8，而在V8中JavaScript是单线程运行的，这里的单线程不是指Node启动的时候就只有一个线程，而是说运行JavaScript代码是在单线程上，Node还有其他线程，比如进行异步IO操作的IO线程。这种单线程模型带来的好处就是系统调度过程中不会频繁进…"}, {"id": "6897863234439610375", "title": "CommonJS模块源码解析", "desc": "在 CommonJS 规范中，一个文件就可以作为一个独立的模块，有自己的作用域，在这个文件内部定义的变量、函数等，都只属于这个模块，对其他模块是不可见的。如果想要其他模块能使用其内部的变量，就需要使用 module.exports 导出，然后在其他模块中使用 require()…"}, {"id": "6846687592709095438", "title": "利用 Node.js 中的 Module 类，执行字符串形式代码的方法", "desc": "mini-css-extract-plugin 中有一个直接执行字符串形式的 commonjs 代码，在编译阶段获取 css-loader 产物的方法。学习了一下这个方法所做的事情。 在写编译工具的时候，我们经常需要提取文件中的特定内容来完成后续的编译。举例来说假如我们正在写一…"}, {"id": "6844903872171884558", "title": "配置node服务器并且链接微信公众号接口配置（超详细）", "desc": "在购买好服务器后，用Xshell链接到服务器。 安装完，关闭重新启动一下Xshell。"}, {"id": "6991848489441312781", "title": "从Promise结构到Promise实现｜8月更文挑战", "desc": "nodejs面试时，会常常被问到promise的相关实现和原理，甚至还有现场写个Promise的实现。所以首先对Promise要有一定的了解。 Promise结构 Promise有三种状态：pendi"}, {"id": "6976538974776983582", "title": "node服务性能优化", "desc": "压力测试 想要优化性能，首先需要做性能检查。对于HTTP服务性能的检测，首先需要做的是压力测试，即在高并发的情况下该HTTP服务的表现/性能如何。首先了解一下压力测试相关的参数的概念： 吞吐率（Req"}, {"id": "6966891242906976293", "title": "Node.js列表功能实现", "desc": "这边文章是'小前端'学习完慕课网 Nodejs全栈入门 视频后总结的一篇使用nodejs写一个列表增删改查功能的小demo。主要介绍了nodejs和常用插件的api的使用。"}, {"id": "6933619429066407950", "title": "前端如何快速搭建自己的mock服务", "desc": "目前前后端分离作为主流的开发方式，在开发中，后端接口还未开发完成之前，前端需要自己造假数据，以便模拟页面显示和部分功能流程，而不必强依赖后端接口开发。 市面上已有几种mock方案，比如rap2，Easy Mock，不过这两种方案适合后端去搭建，因为需要定义接口。 接下来介绍一下…"}, {"id": "6844903654277791757", "title": "Javascript 模块化指北", "desc": "随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系…"}, {"id": "6880132264613642254", "title": "实战：在Node.js和Vue.js中构建文件压缩应用程序", "desc": "Node.js为我们提供了一个模块来协助文件压缩。在本文中，我们将构建一个应用程序，用户可以在该应用程序中上传他们想要压缩的文件，然后使用Node.js Zlib模块下载该文件的压缩版本。 我们将从构建后端开始，这是我们应用程序的基础。 在桌面上，为应用程序创建一个文件夹，群殴…"}, {"id": "6844904042037002254", "title": "node 的模块运行机制", "desc": "node 的模块运行机制简单了解。 涉及大概流程，略过底层系统区别。 模块标识: 模块标识传递给require()方法的参数，可以是按小驼峰（camelCase）命名的字符串，也可以是文件路径。 node.js 每一个文件都是一个单独模块，每个模块都用一个module对象来表示…"}, {"id": "6844903587445735437", "title": "React 深入系列１：React 中的元素、组件、实例和节点", "desc": "React 中的元素、组件、实例和节点，是React中关系密切的4个概念，也是很容易让React 初学者迷惑的4个概念。现在，老干部就来详细地介绍这4个概念，以及它们之间的联系和区别，满足喜欢咬文嚼字、刨根问底的同学（老干部就是其中一员）的好奇心。 React 元素其实就是一个…"}, {"id": "6847902218436542477", "title": "如何让不受信任代码“安全”运行？", "desc": "我们在 imgcook 智能生成代码过程中，希望提供一些自定义的能力，比如自定义 DSL、自定义逻辑点识别/表达，能够让开发者按照官方提供的标准协议数据，在可控范围和权限内自定义生成自己所需要的代码，也不用局限官方提供的代码生成模板，扩展自定义逻辑识别能力/表达能力，生成定义的…"}, {"id": "6844903799300030471", "title": "KOA2框架原码解析和实现", "desc": "koa是一个基于node实现的一个新的web框架，它是由express框架的原班人马打造的。它的特点是优雅、简洁、表达力强、自由度高。它更express相比，它是一个更轻量的node框架，因为它所有功能都通过插件实现，这种插拔式的架构设计模式，很符合unix哲学。 koa框架现…"}, {"id": "6844903824780427278", "title": "Node.js - 阿里Egg的多进程模型和进程间通讯", "desc": "最近用Egg作为底层框架开发项目，好奇其多进程模型的管理实现，于是学习了解了一些东西，顺便记录下来。文章如有错误， 请轻喷 伴随科技的发展， 现在的服务器基本上都是多核cpu的了。然而，Node是一个单进程单线程语言（对于开发者来说是单线程，实际上不是）。我们都知道，cpu的调…"}, {"id": "6844903703829299208", "title": "自定义Egg.js的请求级别日志", "desc": "统一格式之后，业务现有业务的日志工具打印出来的格式是无法满足该规范的，所以我们需要对此进行改造。 我们前端目前Node中间层使用的框架是Egg.js，所以下文讲述下如何在Egg.js上自定义请求日志格式。 Context Logger主要是用来记录请求相关的日志。每行日志都会在…"}, {"id": "6844903840450347015", "title": "cnpm 核心模块 npminstall 升级到 async 总结", "desc": "npminstall 是 cnpm 的核心逻辑库之一，它通过 link 的方式来安装 Node.js 依赖，可以极大的提升安装速度。 回顾 npminstall 第一版的代码，默认支持 Node.js 4，那个时候 async/await 还没成为 Node.js 的默认功能，…"}, {"id": "6977201922516353061", "title": "Nodejs——基础", "desc": "一、Node.js是什么 Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. 1. 特性 Node.js可"}, {"id": "6844903945156952072", "title": "Node + React : 服务端渲染SSR", "desc": "1.更好的 SEO，利于搜索引擎抓取页面信息。 2.加快首屏渲染。 1.请求接口返回html，服务端渲染完成某个单页面然后返回给前端。 2.前端项目放在node环境去渲染运行，相当于在node中开发项目。 app.js用来存放主要的node代码，新建start.js、.babe…"}, {"id": "6844903620643651598", "title": "【JSConf EU 2018】Ryan Dahl: Node.js 的设计错误", "desc": "在稍早前的 JS Conf Berlin 上，被称为 Nodejs 之父的 Ryan Dahl 发表了《10 Things I Regret About Node.js》演讲，并且发布了新项目 Deno，值得一提的是，这是 Ry 的第二次公开演讲，而第一次是发布 Node.js…"}, {"id": "6844903794539495432", "title": "Node 深入TCP模块", "desc": "1. TCP 在Node.js中，提供了net模块用来实现TCP服务器和客户端的通信。 使用close方法可以显式拒绝所有的客户端的连接请求,当所有已连接的客户端关闭后服务器会自动关闭,并触发服务器的close事件。 net.Socket代表一个socket端口对象,它是一个可…"}, {"id": "6844903608475975694", "title": "腾讯Node.js基础设施TSW正式开源", "desc": "经过六年的迭代与沉淀，腾讯Tencent Server Web (以下简称TSW)这一公司级运维组件于今日正式开源。TSW是面向WEB前端开发者，以提升问题定位效率为初衷，提供云抓包、全息日志和异常发现的Node.js基础设施。TSW每天为百亿次请求提供稳定服务，广泛应用在QQ…"}, {"id": "6844903986496028685", "title": "使用socket.io制作帧同步游戏（思路）", "desc": "不过上面的这种做法超级卡，无比的卡，异常的卡，迫不得已，百度了一下怎么做联机游戏。 网络上，有两种做联机游戏的方式，一种是状态同步，一种是帧同步。 下面就简单的介绍一下两种方法的区别，不过就不过多的说了。（因为我还是一知半解2333333） 这个做法是服务器为主，服务器将所有的…"}, {"id": "6911194331961524238", "title": "node 中间层怎样做的请求合并转发", "desc": "就是前端---请求---> nodejs ----请求---->后端 ----响应--->nodejs--数据处理---响应---->前端。这么一个流程，这个流程的好处就是当业务逻辑过多，或者业务需求在不断变更的时候，前端不需要过多当去改变业务逻辑，与后端低耦合。前端即显示，渲…"}, {"id": "6844903605728722958", "title": "Node.js 沙箱环境", "desc": "node官方文档里提到node的vm模块可以用来做沙箱环境执行代码，对代码的上下文环境做隔离。 沙箱环境中执行的代码对于外部代码没有产生任何影响，无论是新声明的变量b，还是重新赋值的变量a。 注意最后一行的代码默认会被加上return关键字，因此无需手动添加，一旦添加的话不会静…"}, {"id": "6844903581473046541", "title": "可能是目前市面上比较有诚意的Koa2源码解读", "desc": "本文会以如下的顺序进行解读： 1，koa是什么； 2，初读koa源码； 3，精读koa源码； 3.1，中间件机制解读 3.2，如何将generator函数转成类async函数 3.3，统一的错误处理机制"}, {"id": "6844903589643550728", "title": "webpack-loader详解", "desc": "Loader有些场景下还需要返回除了内容之外的东西。 Loader 有同步和异步之分，上面介绍的 Loader 都是同步的 Loader，因为它们的转换流程都是同步的，转换完成后再返回结果。 但在有些场景下转换的步骤只能是异步完成的，例如你需要通过网络请求才能得出结果，如果采用…"}, {"id": "6844903800491376653", "title": "Node 快速学习 crypto 模块", "desc": "1. crypto 2. 散列(哈希)算法 3. HMAC算法 PEM是OpenSSL的标准格式，OpenSSL使用PEM文件格式存储证书和密钥，是基于Base64编码的证书。 4. 对称加密 blowfish算法是一种对称的加密算法,对称的意思就是加密和解密使用的是同一个密钥…"}, {"id": "6928196834254913550", "title": "Lerna 给我们工程带来了什么", "desc": "最近在公司搭建脚手架，使用最近市面上🔥的Monorepo模式进行包管理。原因以下几点： Cli主要包含base-create、server、utils、plugin几个模块，通过Monorepo，使模块容易拆分、集中管理。 这里先介绍两种项目代码管理方式（monorepo、m…"}, {"id": "6844903735416586248", "title": "教你在Nodejs中如何获取当前函数被调用的行数及文件名", "desc": "在自定义Egg.js的请求级别日志这篇文章中，我们实现了自定义请求级别的日志模块。看上去功能是完整了，但好像还缺点什么。 大家在根据日志追查问题的过程中，很多时候看到了某条log信息想去找出处，但是实际上代码里面打相同类型的log地方可能不止一处，这时你就比较难去定位这行log…"}, {"id": "6844904049242800141", "title": "Eggjs 实现装饰器路由", "desc": "熟悉java的小伙伴都知道，可以通过以下形式定义路由但作为前端developer，我们应该很少亲自写java代码，更多接触的是nodejs，在nodejs的相关框架中，也有类似的写法，比如Nest.j"}, {"id": "6844903758866939918", "title": "脚手架的开发总结", "desc": "最近在做一个脚手架的项目，涉及到了一些关于nodeJS端的操作。网上找了很多资源，以及一些设想，都在此处记录下来，作为一种总结。 然后，逐个建立脚手架命令。例如create命令，如下： 编写脚手架的过程中，路径问题经常容易出错。下面总结了一些nodeJS中常常会使用到的路径变量…"}, {"id": "6938447703416242213", "title": "nodejs event-loop", "desc": "同步任务和异步任务上边这段代码中(()=>console.log(5))();为同步任务，所以最先执行，剩下的为异步任务，其中总是先于定时器执行，可以理解为process.nextTick和promi"}, {"id": "6844904106599907336", "title": "一步一步实现koa", "desc": "koa 是由 Express 原班人马打造的，相比 Express 的大而全，koa 致力于成为一个更小、更富有表现力、更健壮的 Web 框架，适合作为 web 服务框架的基石。 koa1 通过组合不同的 generator，可以避免嵌套地狱，并极大地提升错误处理的效率。koa…"}, {"id": "6844903623776796680", "title": "利用Swagger UI接口文档同步本地Mock数据", "desc": "Mock顾名思义是一种模拟。通常利用相同的接口来模拟出一个对象以代替真实对象，这样能有效隔离外部依赖，便于测试。对于前端开发，Mock作为重要一环，能带来很多好处： 前端开发可简单分为三个阶段：并行开发阶段、联调阶段和测试阶段。现在的前端项目大多为前后端分离，在开发、联调阶段不…"}, {"id": "6942632451269197831", "title": "cookie和session", "desc": "cookie session localStorage sessionStorage区别cookie:session:localStorage:sessionStorage:cookiename: 用"}, {"id": "6844904048424910861", "title": "如何在 Docker 中设置 Headless Chrome Node.js 服务器", "desc": "随着开发过程中自动 UI 测试的兴起，无头浏览器已变得非常流行。网站爬虫和基于 HTML 的内容分析也有无数的用例。 在 99％ 的场合下，你实际上不需要浏览器 GUI，因为它是完全自动化的。运行 GUI 比发布基于 Linux 的服务器或在微服务集群（例如 Kubernete…"}, {"id": "6844903677728129032", "title": "六十行代码完成 四则运算 语法解析器", "desc": "syntax-parser 是完全利用 JS 编写的词法解析+语法解析引擎，所以完全支持在浏览器、NodeJS 环境执行。 它可以帮助你快速生成 词法解析器，亦或进一步生成 语法解析器，将字符串解析成语法树，语法解析器还支持下一步智能提示功能，输入光标位置，给出输入推荐。 1.…"}, {"id": "6844904048307470343", "title": "《深入浅出Node.js》学习笔记（二）", "desc": "Web2.0时代，前端工程师利用JavaScript大大提升了网页的用户体验，经历了工具类库、组件库、前端框架、前端应用的变迁。 JavaScript的先天缺陷：模块。 commonJS的愿景：希望JavaScript能够在任何地方运行。 就是传递给require()方法的参数…"}, {"id": "6918766975778816007", "title": "Node读取文件夹下js文件自动加入路由", "desc": "主要做什么在原本的express初始项目中，注入路由一般是下面两条语句，但是每次添加一个接口都要有写面两条语句觉得太麻烦了，完全可以写一个循环自动注入嘛使用到的知识path获得目标文件夹路径fs读取文"}, {"id": "6844903681263943694", "title": "NodeJS 说说“重写” 自定义stream 的实现", "desc": "常见的自定义流有四种，Readable（可读流）、Writable（可写流）、Duplex（双工流）和 Transform（转换流），常见的自定义流应用有 HTTP 请求、响应，crypto 加密，进程 stdin 通信等等。 在 NodeJS 中要想实现自定义流，需要依赖模块…"}, {"id": "6844903571255721992", "title": "Giog (github issues blog) - 轻量级博客系统（built width vue ssr and koa)", "desc": "修改配置文件 config/config.js."}, {"id": "6844903653787041806", "title": "JavaScript运行机制：event-loop", "desc": "这里不得不提一个任务队列的概念，js代码中所有代码分两种：同步任务、异步任务。 一旦执行栈中所有同步任务执行完毕，系统就会读取任务队列，那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。 主线程不断重复上一步。 浏览器和node中宏任务和微任务是不同的，后面详细说明。…"}, {"id": "6936116540068593695", "title": "RPC 通信协议之 Protobufs 在 Node.js 中的应用", "desc": "Protobuf 是一种用于 序列化 和 反序列化 对象的格式规范。与 JSON 类似，但有几点不同。下面介绍在 Node.js 中如何使用 protobufs，以及如何在 Express 中使用它。 Protobuf 与 非结构化格式（如 JSON、XML）最大的区别在于，你…"}, {"id": "6844903730689769480", "title": "使用JavaScript实现SkipList这种数据结构", "desc": "前言为什么想到使用JavaScript把跳表这种数据结构来实现一遍呢？这个主要是因为我女朋友最近在学习数据结构和算法，然后遇到了这个问题；非要拉着我跟她一起来研究一下，然后，然后就有了下面的文章。这种"}, {"id": "6844903837547888653", "title": "Node.js学习之（第三章：简易小demo）", "desc": "我们前面已经学习完了Node中一些核心模块还有如何正确配置响应头的Content-Type，今天我们来实现一个简单的demo，巩固下之前学习的内容。 我们平时访问百度或者其他大的门户网站的时候，服务器给我们返回的基本都是一个HTML文档，然后浏览器解析渲染成页面。 今天我们就用…"}, {"id": "6844903621197316110", "title": "深入 TypeScript 的类型系统", "desc": "导语 在2017年，TypeScript 已经占领了前端非原生语言市场的主导地位。node 的后继者 deno 也是构建在 TypeScript 之上的。本文将介绍类型系统为我们带来了什么好处，然后从集合的角度探一探类型系统的究竟，并介绍 TypeScript 在可靠性和生产力…"}, {"id": "6844903677954621447", "title": "nodejs启动流程分析", "desc": "之前用过一段时间的v8 ，也只是会初始化那个流程，最近想深入了解一下，所以想要通过学习 nodejs 来加深理解。这篇文章主要是讲讲 nodejs 的初始化流程，如有错误，烦请指教~。（本文分析基于 v10.9.0，本文会尽量避免大段源码，但是为了有理有据，还是会放上一些精简过…"}, {"id": "6935742570249224200", "title": "Node.js 中的可读流", "desc": "一切正常，没什么问题。那如果把中间的 req.on('data') 去掉的话会怎样？ 这就涉及到了 Node.js 中的可读流相关的知识了。什么是可读流呢？在 Node.js 中，流是对提供数据的来源的一种抽象，例如： 为什么卡住的问题，要从可读流的两种模式说起。在任何时刻，可…"}, {"id": "6844903641569050637", "title": "解读js模块化方案modJS", "desc": "由于笔者所在的团队使用fis3打包工具搭配modJS来解决js模块化，并且最近也在研究js模块化方案，故写下这篇文章来解读modJS的实现细节。 限于笔者水平，如果有错误或不严谨的地方，请给予指正，十分感谢。 ES6 模块化是欧洲计算机制造联合会 ECMA 提出的 JavaSc…"}, {"id": "6948382539048288286", "title": "CommonJS规范", "desc": "Node.js是基于CommonJS模块规范的实现，每个文件就是一个模块，有自己的作用域，模块内代码的写法必须遵守CommonJS规范。文件里定义的变量、函数、类，都是私有的，其他文件不可见。 如果想在多个文件分享变量，必须定义为global对象的属性。 这样变量x就可以被所有…"}, {"id": "6844904181589868551", "title": "浅谈 rpc 通信协议设计", "desc": "在讲 rpc 之前，先讲讲通信协议的设计。什么是通讯协议，简单地说，是指通信双方对数据传送控制的一种约定。通信不仅仅是把消息传过去，还要保证消息的准确和可靠。 可以先看看 amp 协议的设计, 对于首个字节，我们把版本存到它的低四位，多少条数据存到它的高四位，刚好消耗完一个字节…"}, {"id": "6866433014306439176", "title": "Graphql + Node 实践（二）：基础知识储备~", "desc": "2. 基本的graphql + express使用 1. 建立一个graphql的基础服务器配置 1. 服务端配置 2. 前端请求配置 3. 使用构建类型定义schema的方法 4. 结果 2. 复杂对象graphql返回方法 1. 服务端的配置 2. 前端调用的规则 3. 结…"}, {"id": "6844903624305278989", "title": "javascript单元测试框架mocha 和 断言库 assert", "desc": "mocha是一款功能丰富的javascript单元测试框架，它既可以运行在nodejs环境中，也可以运行在浏览器环境中。javascript是一门单线程语言，最显著的特点就是有很多异步执行。同步代码的测试比较简单，直接判断函数的返回值是否符合预期就行了，而异步的函数，就需要测试…"}, {"id": "6844903860130021383", "title": "常见的Node.js攻击-恶意模块的危害", "desc": "根据最近npm的一项安全性调查显示，77%的受访者对OSS/第三方代码的安全性表示担忧。本文将介绍关于这方面的内容，通过第三方代码引入应用程序的安全漏洞。具体来说，我们考虑被恶意引入的漏洞的场景。 在探究这些答案之前，让我们先看看这篇文章:“我正在从你的站点获取信用卡号码和密码…"}, {"id": "6844903645301981197", "title": "深入理解js事件循环机制（Node.js篇）", "desc": "在浏览器篇已经对事件循环机制和一些相关的概念作了详细介绍，但主要是针对浏览器端的研究，Node环境是否也一样呢？先看一个demo： 肉眼编译运行一下，蒽，在浏览器的结果就是下面这个了，道理都懂，就不累述了。 那么Node下执行看看，咦。。。奇怪，跟浏览器的运行结果并不一样~ 例…"}, {"id": "6844903697021927437", "title": "[译]你不知道的Node", "desc": "这篇文章是由Kyle Simpson的系列书籍You-Dont-Know-JS所启发。它们是很好的JavaScript基础入门书籍。除了一些我将会在文章中强调的不同，Node基本上就是JavaScript。代码在you-dont-know-node github仓库下的code…"}, {"id": "6844903841796734983", "title": "浅析libuv源码-node事件轮询解析(3)", "desc": "本节简图如下。 上一篇其实啥也没讲，不过node本身就是这么复杂，走流程就要走全套。就像曾经看webpack源码，读了300行代码最后就为了取package.json里面的main属性，导致我直接弃坑了，垃圾源码看完对脑子没一点好处。回头看了我之前那篇博客，同步那块讲的还像回事…"}, {"id": "6844903957349810190", "title": "理解 Koa 的中间件机制", "desc": "中间件概念在编程中使用广泛, 不管是前端还是后端, 在实际编程中或者框架设计都有使用到这种实用的模型, 下面我们就来谈谈它的作用. 上面这两个函数是通过在 Function.prototype 上添加两个函数: before, after. 两个函数的返回值都是一个函数, 这个…"}, {"id": "6844903891587301389", "title": "理解 Node.js 的 GC 机制", "desc": "随着 Node 的发展，JavaScript 的应用场景早已不再局限在浏览器中。本文不讨论网页应用、命令行工具等短时间执行，且只影响终端用户的场景。由于运行时间短，随着进程的退出，内存会释放，几乎没有内存管理的必要。但随着 Node 在服务端的广泛应用，JavaScript 的…"}, {"id": "6844903586996944903", "title": "koa 源码解析", "desc": "koa 框架是基于 Node.js 下一代的 web server 框架, 舍弃了回调写法, 提高了错误处理效率, 而且其不绑定任何中间件, 核心代码只提供优雅轻量的函数库. 平时经常使用到 koa 框架, 所以希望通过阅读源码学习其思想, 本文是基于 koa2 的源码进行分析…"}, {"id": "6844903602910298120", "title": "浅析 NodeJs 的几种文件路径", "desc": "本地运行时一切 OK，线上部署时却死活找不到某个文件，后来才发现是因为线上启动应用时不是从当前目录启动了，不过为什么启动脚本的位置也会影响这个路径呢，且往下看..."}, {"id": "6844904047359574024", "title": "实战系列之 Node.js 玩转 Java", "desc": "我们抛开架构设计，抛开传统的http、socket、rpc通讯协议，我们聊一聊在Node.js应用里如何连接Java API，换句话来说就是在Node.js里直接写Java代码。 Node.js想要和Java连接，需要一个 node-java 模块。 上述方法只是带你了解nod…"}, {"id": "6844903949179305991", "title": "基于easy mock的新功能添加", "desc": "1. 入参required 2. 接口列表页的入参列表展示 3. 预览页根据入参配置, 自动生成参数 4. 配置项目标签和接口初始化mock 5. 接口标签配置 6. 接口标签筛选"}, {"id": "6844903816106606606", "title": "一段小代码来绕开浏览器的同源策略", "desc": "同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。而想要读取不同源下的资源就是一种跨域操作。对这种跨域行为，浏览器是拒绝的。由于服务端是不受同源策略影响的，所以我们可以启一个中间服务器来做下接口转发，来绕开这种同源策略。"}, {"id": "6844903591891697672", "title": "前端技术周刊 Apr 15th, 2018", "desc": "本周开始，我开始总结一周阅读或者参考过的文章给大家，都是精挑细选出来觉得非常好的文章。我看过一些 coder 写的技术周刊，基本都是给一个文章的链接和标题，然后给一段原文引用就没了，我在想，我既然读了，而且我还要介绍给大家，那我就有责任给大家总结出来文章的阅读姿势，读完我们起码…"}, {"id": "6914283291596029960", "title": "在Node.js上做一个使用命令行操作todo", "desc": "下载下载npm包：下载后可查看版本：如何使用todo查看所有任务列表能够操作所有增删改查todoadd添加一个任务todoclear清空所有任务单元测试用来测试读文件和写文件项目效果演示查看版本号：添"}, {"id": "6844903582089609224", "title": "Node.js Writable Stream的实现简析", "desc": "可写流是对数据写入“目的地”的一种抽象，可作为可读流的一种消费者。数据源可能多种多样，如果使用了可写流来完成数据的消费，那么就有可写流的内部机制来控制数据在生产及消费过程中的各状态的扭转等。 可写流对开发者暴露了一个write方法，这个方法用于接收数据源的数据，同时来完成数据向…"}, {"id": "6844903582009933832", "title": "一篇文章教会你Event loop——浏览器和Node", "desc": "最近对Event loop比较感兴趣，所以了解了一下。但是发现整个Event loop尽管有很多篇文章，但是没有一篇可以看完就对它所有内容都了解的文章。大部分的文章都只阐述了浏览器或者Node二者之一，没有对比的去看的话，认识总是浅一点。所以才有了这篇整理了百家之长的文章。"}, {"id": "6844903577220022280", "title": "模块与模块加载小册", "desc": "其中要做的第一件事是解析传入的文件名，是否是有效的，并且确保它是绝对路径。 为什么要确保它是绝对路径呢？有些相对路径在某些编辑器环境中代表的真正路径并不是我们想要的。我们使用绝对路径来读取文件会更可靠。 拿到解析后的路径后我们会尝试用这个路径作为key去Module._cach…"}, {"id": "6844903586577514503", "title": "逐步实现一个完整的、能通过所有Test case的Promise类", "desc": "剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类"}, {"id": "6844903504117497869", "title": "HostsDock - 存储、管理、快速切换你的hosts。", "desc": "🎉 存储、管理、快速切换你的hosts，尤其适合需要在开发环境、测试环境和生产环境之间频繁切换的开发人员使用。 基于 Node.js 和 Electron 构建。"}, {"id": "6844903496240594957", "title": "Node.js+jade抓取博客所有文章生成静态html文件", "desc": "这个周末，恶补了一下jade模板引擎，就为生成静态html文件，这篇文章需要知道jade以及看过我的上篇文章，我先给出他们的参考链接: [js高手之路]Node.js模板引擎教程-jade速学与实战1-基本用法 [js高手之路]Node.js模板引擎教程-jade速学与实战2-…"}, {"id": "6844904048315875335", "title": "《深入浅出Node.js》学习笔记（六）", "desc": "1. Buffer结构 Buffer是一个像Array的对象，但它主要用于操作字节。 Buffer是一个典型的JavaScript与C++结合的模块，它将性能相关的部分用C++实现，将非性能相关的部分用JavaScript实现。 Buffer所占用的内存不是通过V8分配的，属于…"}, {"id": "6844903617703460872", "title": "袋鼠云前端项目发布工具dtux-kangaroo", "desc": "在目前的大趋势下，前端和后端解耦已经是一个业界的趋势。前端和后端一旦解耦之后，前端的项目和后端的项目便可以自己发布，互不影响。这样极大地提高工作效率，免去了很多互相等待的时间。每家公司在前端项目发布体系可能不尽相同，本篇文章仅仅介绍袋鼠云的前端发布体系，希望能对大家能有所启发。…"}, {"id": "6844903630340898823", "title": "老话题，vue中的数据绑定原理", "desc": "以vue2.0源码，了解vue中的数据绑定原理，nice！"}, {"id": "6844903625060253710", "title": "webpack 划重点", "desc": "最近开始有精力比较细致的研究 webpack，暂时没有能力产出整篇的干货，本文用于记录在学习的过程中对于一些易混淆或者文档不清晰的地方所做的一些研究性探索。如果错误，请斧正。 看到这里，自己感觉比较疑惑了，入口文件是相对路径./examples/main,相对于当前路径查找，但…"}, {"id": "6844903614855512072", "title": "Node.Js实现端口重用原理解析", "desc": "起源，从官方实例中看多进程共用端口 执行结果： 了解http.js模块： 我们都只有要创建一个http服务，必须引用http模块,http模块最终会调用net.js实现网络服务 答案很快就可以通过cluster._getServer 这个函数找到 代理了server._list…"}, {"id": "6844903618726871048", "title": "ES6异步方式全面解析", "desc": "众所周知JS是单线程的，这种设计让JS避免了多线程的各种问题，但同时也让JS同一时刻只能执行一个任务，若这个任务执行时间很长的话（如死循环），会导致JS直接卡死，在浏览器中的表现就是页面无响应，用户体验非常之差。 因此，在JS中有两种任务执行模式：同步（Synchronous）…"}, {"id": "6844903588175544334", "title": "webpack用法小结", "desc": "根据文档的定义：本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这…"}, {"id": "6919099451634581512", "title": "《node-https模块》", "desc": "一. 百度翻译接口 百度翻译有免费可用的翻译API接口。输入需要将要翻译的单词，源语言，目标语言，用户id，随机码salt，密钥作为参数放在请求url中，其中还需要一个签名sign，它就是用md5对上述信息加密后的32位小写字母。 将以上形成的网址向服务器发出请求，就会得到如下…"}, {"id": "6844903685412093960", "title": "用Emscripten编译wasm版本的OpenCC，在浏览器上进行简繁体转换", "desc": "OpenCC很好，但遗憾的是它是个cpp项目，我们必须开个服务才能使用。而得益于Emscripten和wasm相关技术，我们可以通过对OpenCC进行编译来直接在javascript环境上运行其核心代码。"}, {"id": "6844903680106299399", "title": "【译】不要阻塞你的 Event Loop", "desc": "你是否应该读这篇指南？如果你编写的代码并不只是一行命令调用那么简单，那么阅读本篇指南可以帮助你写出高性能、更安全的程序。此文档是从Node服务器开发的角度编写的，但这些概念也同样适用于复杂的Node应"}, {"id": "6844903509024833550", "title": "继microtask后，再谈event loop", "desc": "关于event loop的详细理解"}, {"id": "6844903641053167630", "title": "node ~ 进程", "desc": "进程是计算机调度任务和分配任务的基本单位,node不能实现多线程,但是可以开子进程,有个自带模块child_process,可以为我们创建一个进程服务,不会影响node事件环多进程一个进程占用一个CP"}, {"id": "6844903550632329230", "title": "iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ 解析JSON", "desc": "前面的文章中，我们已经完成了项目中常见的问题，比如 路由请求、结构分层、视图渲染、静态资源等。 那么，JSON 呢？JSON 格式数据的传输，已经深入到了我们的码里行间，脱离了 JSON 的人想必是痛苦的。那么，复合吧！ 在数据传输过程中，传输的资源都可以称之为『数据』，而『数…"}, {"id": "6844903522354348046", "title": "Node.js 中遇到含空格 URL 的神奇“Bug”——小范围深入 HTTP 协议", "desc": "首先声明，我在“Bug”字眼上加了引号，自然是为了说明它并非一个真 Bug。 大概意思就是说：一台服务器通过 HTTP 协议去请求另一台服务器的时候，单方面被对方服务器断开了连接——并且并没有任何返回。 其实这次请求的一些猫腻很容易就能发现——在 URL 中有空格。所以我们能简…"}, {"id": "6844903838302863373", "title": "Node.js 实现类似于.php，.jsp的服务器页面技术，自动路由", "desc": "每增加一个接口都需要手工定义一个路由，需要抽离出来一个routers.js专门定义这些路由，频繁改动，甚至有些开发同学图省事就直接在文件里写逻辑代码了。 node.js能否实现页面技术自动路由到对应的js文件呢，答案是肯定的。"}, {"id": "6902680456366391303", "title": "谈一谈使用字体库加密数据-仿58同城", "desc": "对于前端同学来说其实做的更多的事情就是把数据整合好，按照UI同学的设计通过后端同学给的数据展示在网页中，这也就导致了很多人认为前端很简单，没有做什么工作也没有什么后端复杂的业务逻辑。 其实不然前端要做的工作有很多，就比如今天要说的，如何做到数据的反爬，笔者最近也接到了相同的任务…"}, {"id": "6844903560694497293", "title": "iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ 规范与部署", "desc": "随着 Node 流行，JavaScript 编码规范已经相当成熟，社区也产生了各种各样的编码规范。但是在这里，我们要做的不是『限制空格的数量』，也不是『要不要加分号』。我们想要说的规范，是项目结构的规范。 随着业务量的增大，我们就会发现有一个重复性的操作——『不断的 requi…"}, {"id": "6844903704374558728", "title": "V8 v7.1 发布，众多新特性", "desc": "改进了性能，WebAssembly模块，增加了相对时间格式化API，支持了全局对象提案"}, {"id": "6844903574514696205", "title": "Web 前端开发日志（四）：构建现代化 Node 应用", "desc": "使用装饰器，和诸如 TS.ED、Nest.js 来帮助您构建面向对象的 Node 应用. 其实通过一些方式，可以非常方便地在 Node.js 中以这种形式构建您的应用，如果您再配合 TypeScript，就可以瞬间找回类型安全带来的舒适感. 现在我们将把它改造成 OOP、现代化…"}, {"id": "6941577210767605797", "title": "微信公众号推广码实现并统计人数 Node配Koa2也不错哦~~", "desc": "微信公众号需要可以使用推广支持接口权限，和获取access_token接口权限，还有自定义菜单的接口权限。一般有这个权限认证主体需要是公司，个人认证的是没有接口权限的。 第一次掘金发布文章，格式这些可能不太好看，不太熟悉，大家见笑了。这里我使用的是NodeJS的koa2框架配置…"}, {"id": "6844903602843025416", "title": "谁动了我的 DOM??!", "desc": "就是一个很久以前写的页面，里面的代码很乱。而我的任务是将页面的高度与屏幕适配。在部分页面存在着几个 <iframe>，我需要调整样式使其高度与屏幕适配，但是无论我怎么调整，总会有一个 JavaScript 在不停地修改 <iframe> 的高度，使得它的高度超出屏幕而出现两个滚…"}, {"id": "6844904056310202376", "title": "Mosh的Node.js教程（二）", "desc": "本系列文章是根据Mosh大佬的视频教程全方位Node开发 - Mosh整理而成，个人觉得视频非常不错，所以计划边学习边整理成文章方便后期回顾。该视频教程是英文的，但是有中文字幕，感谢marking1212提供的中文字幕翻译。 通过本篇文章的学习，你将了解什么是模块，为什么需要模…"}, {"id": "6844903587852582920", "title": "Node.js Stream（流）总结", "desc": "1. 流的概念 流是一组有序的，有起点和终点的字节数据传输手段，而且有不错的效率。 借助事件和非阻塞I/O库,流模块允许在其可用的时候动态处理,在其不需要的时候释放掉。 流（stream）在 Node.js 中是处理流数据的抽象接口（abstract interface）。 s…"}, {"id": "6953974645716418596", "title": "nodejs的基本概念和应用场景", "desc": "欢迎访问个人博客网站： http://www.zhuxin.club 1. node是什么 Nodejs是一个基于Chrome V8的JavaScript运行环境。它使得JS可以运行在服务器端并且可以"}, {"id": "6844903934042046478", "title": "初识nodejs", "desc": "前端工程师需要学习nodejs来扩充自己的知识边界，也让自己更方便的理解webpack，前端工程化等。 1. process process对象是node中的一个全局变量，它提供了nodejs进程的信息并对其进行控制，作为全局变量，process始终可以直接使用。 argv是我…"}, {"id": "6844903501517029389", "title": "实战react技术栈+express前后端博客项目（1）-- 整体项目结构搭建", "desc": "本博客为连载代码博客同步更新博客，随着项目往后开发可能会遇到前面写的不合适的地方会再回头修改。如有不妥~欢迎兄弟们不啬赐教。谢谢！ 简单说下app里面react的项目结构。对于component，container这里不必多说了。saga用于对所有异步action的处理。 re…"}, {"id": "6844904197301731341", "title": "OAuth 的全方位渗透及node实现", "desc": "我们先从一个非常典型例子出发，假如你在某网盘上传了你的很多图片，网盘提供了图片存储，另一个某打印店提供了在线打印图片。 假设你的账户密码都不一样，你可以先将待打印的图片从网盘上下载下来，然后在上传到打印店的网站上，之后进行打印。这种模式是最原始，也是效率最低下。 之前很多公司包…"}, {"id": "6957687796563705886", "title": "Node系列-什么是callback?", "desc": "原文：https://nodejs.org/en/knowledge/getting-started/control-flow/what-are-callbacks/ 什么是callback?  很显"}, {"id": "6909411787779768334", "title": "nodejs 3分钟学会系列教程（5） fs模块的使用  fs.createReadStream 轻松时刻", "desc": "1、文件内容较多时以流的方式读取fs.createReadStream1）怎么写？执行nodeapp.js后可看到结果2、以流的方式写入文件fs.createWriteStream1）怎么写？3、管道"}, {"id": "6844904072386969607", "title": "「学习笔记」更好的了解Node.js中的缓存区，流", "desc": "计算机是以二进制形式存储和表示数据，二进制是 0 和 1 的集合。例如：0100，1010。比如，要存储数字 13 计算机需要将数字转换为 1101。 但是，数字不是我们唯一需要存储处理的数据，我们还需要处理字符串，图片，视频。 字符集是已经定义好的规则，每一个字符都有一个确切…"}, {"id": "6844903792308125703", "title": "Node 深入Stream（1）", "desc": "1. 流的概念 流是一个抽象接口，被 Node 中的很多对象所实现。比如HTTP 服务器request和response对象都是流。 当一个流不处在 drain 的状态， 对 write() 的调用会缓存数据块， 并且返回 false。 一旦所有当前所有缓存的数据块都排空了（被…"}, {"id": "6844903645746561031", "title": "lazy mock 一个快速生成后端模拟数据的懒人工具(文档更新)", "desc": "lazy mock 是一个使用koa2构建的，lowdb持久化数据到JSON文件的快速生成后端模拟数据的工具。只需要简单的配置就可以实现和json-server一样的功能，但是比json-server更加灵活，后期可配置性更强，完全可以模拟真实后端业务逻辑。 lazy mock…"}, {"id": "6844903601899503624", "title": "构建vscode的vue组件代码补全插件以及上传", "desc": "照着葫芦画瓢就行。 我们需要做的就是把每一个组件的信息拿出来，按snippet的格式输入到snippet.json文件中去，如何从组件库中提取每一个组件对应的props呢，当然不是手工收集这种蠢蠢的方式，程序员的方式当然是用代码工具避免重复劳动。我的想法是写一个工具方法从组件中…"}, {"id": "6988485394383765540", "title": "Yarn的简单使用", "desc": "安装Yarn 经典版地址：https://classic.yarnpkg.com/lang/en/ 我们可以通过NPM安装Yarn,需要注意Node.js版本必须为以下版本 命令如下： 检查安装 Ya"}, {"id": "6844904002778316814", "title": "gitbook 入门教程之一招彻底解决 favicon 图标失效问题", "desc": "在 book.json 配置文件中,添加 favicon-absolute 到 plugins 列表. 在 book.json 配置文件中,配置 pluginsConfig 节点的 favicon-absolute 对象. 运行 gitbook build 命令构建本地项目或者…"}, {"id": "6844903543644618760", "title": "webpack优化不完全指南", "desc": "实现思路(参考vue-cil)，通用配置可以设置一个base文件然后exports，在其他的配置文件中require进来。 上面这个配置中new webpack.optimize.UglifyJsPlugin()就可以放入webpack.prod.conf.js中，因为代码压缩…"}, {"id": "6894898179112697864", "title": "基于ES6面向对象封装Cascader级联选择器组件", "desc": "以省市区数据为例，组件效果如下：技术亮点：开发思路：组件代码如下：主页面js部分代码如下：接口文档如下：省级数据：请求方式：POST请求地址：http://服务端接口url/province请求参数格"}, {"id": "6844903587852582919", "title": "简述promise原理", "desc": "可以发现上面的代码看起来是非常可怕的，层层嵌套，如果在加上复杂的逻辑判断，代码可读性会变得非常差。 基于上面的应用场景发现promise可以有三种状态，分别是pedding 、Fulfilled、 Rejected。 构造一个Promise实例需要给Promise构造函数传入一…"}, {"id": "6844903545704022023", "title": "iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ 视图Nunjucks", "desc": "客户端和服务端之间相互通信，传递的数据最终都会展示在视图中，这时候就需要用到『模板引擎』。 模板引擎是为了使用户界面与业务数据分离而产生的，可以生成特定格式的文档。例如，用于网站的模板引擎会生成一个标准的 HTML 文档。 市面上常见的模板引擎很多，例如：Smarty、Jade…"}, {"id": "6844903653065621518", "title": "编译程序(compiler)的简单分析", "desc": "如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。 在现今前端项目中，模块化是一个避不开的话题。所以就会出现AMD,CMD等模块加载方式。同时由于JS不停的在更新迭代。出现很多实用的新语法。但是由于有些语法有些超前，JS的宿主环境(浏览器/Node没有跟上JS更新步骤)，但…"}, {"id": "6844903537617420295", "title": "编写一个分析代码依赖的工具（一）", "desc": "一个源码中，理不清的依赖是最烦的，让我们继续往下看，如何实现一个小工具，来分析依赖关系，工具的github地址,觉得可以的可以点个star，博客的地址，喜欢的也可以点个star，谢谢。 选中的情况下，会把其余的都隐藏，显示它引入的依赖。 我们先了解echart和node的fs和…"}, {"id": "6844903561416065031", "title": "利用adb shell和node.js实现抖音自动抢红包功能", "desc": "逻辑很简单，在抖音视频播完之后如果是红包视频，会跳出红包。 点击屏幕中央，如果有红包打开红包，没有红包则暂停视频。 点击返回按钮，如果有红包关闭红包界面，没有红包提示再按一次退出（其实没退出）。 进行上滑操作，进入下一个视频。 点击、返回、上滑，就这么三步行为，无论有红包没红包…"}, {"id": "6902979640801886215", "title": "Linux 服务器(CentOS)安装配置mongodb+node", "desc": "既然是在服务器上操作，那服务器肯定得准备好，我这里购买的是阿里云的服务器(CentOS 8)，因为我自己使用的电脑是 MacBook Pro , 所以下文中统一默认环境为：CentOS 8、mac 终端;服务器公网 IP 统一以：110.110.110.110 来举例。 首先登…"}, {"id": "6844903624590508045", "title": "Node中的一股清流，比流川枫还要樱花木道", "desc": "导读：由于事件流是基于EventEmitter实例，并且也是通过fs模块来创建的，所以在学习事件流之前，最好先了解一下发布订阅和fs文件的操作,才可以对源码有更好的理解。 在node中读取文件的方式有来两种，一个是利用fs模块，一个是利用流来读取。如果读取小文件，我们可以使用f…"}, {"id": "6844903859194707975", "title": "Node的事件循环", "desc": "Node的自身执行模型是事件循环，理解了事件循环可以清楚的知道代码的执行顺序。事件循环就像一个这样的循环体，不断的轮询。当然，如果没有观察者，进程就会退出，不会死循环的。哈哈。 事件循环里面都有对应的观察者，然后事件循环从观察者中取出事件并执行。观察者可以理解为一个数据存在一对…"}, {"id": "6844903585189199885", "title": "可读可写流简明实现指北【多图，附demo源码】", "desc": "可读可写流的简明实现，以求加深对可读流可写流的印象与理解。 本文用流程图概括了整个源码的实现，着重讲述了比较重要以及难实现的点，推荐打开尾巴处的仓库地址，对照实际的代码来阅读。 哼，这才不是骗字数呢，默认参数不重要吗？你记了那么多遍记住了吗？嗯。。 _write部分没有详细注释…"}, {"id": "6844903561432662030", "title": "一个牛X的例子", "desc": "话不多说，先上主角。 然后就是各种查资料，各种看。其中帮助最大的就是阮老师的那篇文章和朴灵老师对此文章的批注，经过这两篇文章的洗礼，逐渐有了自己的思路。然后又经过了官方文档的净化才成就了这篇文章（其实主要是官方文档🌹），不过其中应该还是有理解不到或者理解有误之处，请多多谅解❤…"}, {"id": "6844903517585408007", "title": "Typescript 构建命令行工具上手指南", "desc": "这篇小教程里演示使用 TypeScript 构建命令行工具，利用 async/await 进行非阻塞操作，利用 mocha 自动化测试以及 travis-ci 进行持续集成。 最近 TJ 发布了 node-prune 进行对 node_modules 里冗余文件的清理，但项目由…"}, {"id": "6906327386892009486", "title": "你知道npm包版本管理有多重要么(转)", "desc": "我之前确实对包版本管理这块的知识比较缺失，所以导致我在项目的某次需求当中掉进了很多深坑。这篇文章，希望可以帮助你避开这些包版本管理不善带来的问题。 我们的项目中使用的是preact，preact-compat的库。某天，小A要做需求，时间比较赶所以想引用一些库进来提升效率，但是…"}, {"id": "6844903650955886605", "title": "Node 案发现场揭秘 —— Coredump 还原线上异常", "desc": "来自 Alinode 对凶案现场的活体检验和死后验尸的经验总结，走过路过不要错过，传送门：https://zhuanlan.zhihu.com/p/41178823"}, {"id": "6844903756987908103", "title": "Reactor模式", "desc": "我们都知道Node.js是事件驱动模型，该模型涉及事件多路分解器和事件队列。所有的io请求都会变成一系列的事件。 事件多路分解器会接受来自应用程序的I/O请求, 然后转给对应I/O硬件处理, 当然应用程序同时会指定一个处理程序(Handler)。 当一组I/O操作完成时候,事件…"}, {"id": "6844903846582419463", "title": "node实现socket链接，与GPRS进行通信", "desc": "最近接到一个需求，在微信公众号界面设计一个独立界面，界面上有 A 电机进、A 电机退、B 电机进、B 电机退 4 个按钮，点击对应按钮，云平台发送不同的代码给电机本地的控制器，控制电机执行不同的动作，电机本地控制器具备GPRS网络功能。服务器与电机本地控制器（客户端）采用 TC…"}, {"id": "6905998235987345415", "title": "利用Node快速搭建web服务器", "desc": "1.完整的写法直接来看一段代码来简单了解如何通过Node创建web服务器先通过ctrl+shift+F10把服务跑起来请求一下,怎么请求?这个服务器是不是运行在本地执行的,我们本地的服务器ip地址是不"}, {"id": "6844903624288534541", "title": "Nodejs 断言 assert", "desc": "当使用 strict 模式时，任何 assert 函数都会使用严格函数模式的等式。 所以 assert.deepEqual() 会等同于 assert.deepStrictEqual()。 assert(value[, message])：assert.ok() 的别名。 va…"}, {"id": "6844904025062637576", "title": "P13：node实现静态服务器 ~ 实现文件压缩", "desc": "由于体积减小，也会降低我们服务器的负载，以及带宽的占用。 所以Request Header里的Accept-Encoding就是用来告诉服务端客户端是支持哪些编码方式的。 一般的值有gzip/compress/deflate/br等，可以多个，中间用逗号隔开。如： 当服务端接收…"}, {"id": "6914471363952508941", "title": "基于原生JS实现的Bean容器和AOP编程", "desc": "我们知道Bean是Spring最基础的核心构件，大多数逻辑代码都通过Bean进行管理。NestJS基于TypeScript和依赖注入也实现了类似于Spring Bean的机制：服务提供者（Provider） 1. 几乎所有事物都是Bean 2. Bean支持AOP 3. AOP…"}, {"id": "6844903686963986446", "title": "[小清新] 一段 node 脚本生成风格优雅的 Directory Tree", "desc": "使用图片输出的话，感官上不够和谐，尤其在移动端环境下，图片内容可能会被多次转码、缩放以至于影响阅读体验。 使用文本输出的话，在不同设备、编辑器下内容排版容易混乱。 某一天，你想修改一下内容或者结构时，一个字符一个字符的编辑简直让人抓狂。 使用文本输出的另一个毛病就是，不同设备、…"}, {"id": "6844903616235454471", "title": "襁褓中的 deno（零）：初次见面，多多关照", "desc": "襁褓中的 deno（零）：初次见面，多多关照"}, {"id": "6844903588049715214", "title": "理解JS中的Event Loop机制", "desc": "前几天在理解node的事件环机制中引发了我对浏览器里Event Loop的好奇。我们都知道javascript是单线程的，任务是需要一个一个按顺序执行的，如果javascript有两个线程，一个为DOM增加样式，一个却要删除DOM，这样岂不是就会很混乱。单线程可以节约内存，但是…"}, {"id": "6844903568856580110", "title": "从封装函数到实现简易版自用jQuery (二）", "desc": "上一篇文章 从封装函数到实现简易版自用jQuery (一) 已经介绍了如何实现基本功能和封装成自己的库，这篇文章着重讲对自己 API 功能的拓展，使其更强大。 以下是基于第一篇文章，在本次练习中要用到的代码，以 addClass( ) 为例进行拓展。 如果传参不是选择器，直接赋…"}, {"id": "6844903581032660999", "title": "2017年最佳的JavaScript和CSS库 -- 众成翻译", "desc": "The Best JavaScript and CSS Libraries for 2017.我们Tutorialzine的任务是让您了解最新的最酷Web发展趋势。在过去的一年中，我们向您展示了许多有趣的库和资源，我们认为这些库和资源值得一试。这就是我们决定在这篇文章中与你分享那"}, {"id": "6844903613408477191", "title": "NodeJS卷积滤镜处理图片Demo", "desc": "通过读取图片像素，使用卷积处理图片，从而达到锐化，高斯模糊等的效果，使用Nodejs处理，在此写出一个小demo，仅供参考。 使用不同的卷积核能够使图片呈现不同的效果。"}, {"id": "6844903585650589703", "title": "浅析nodejs中的stream(流)", "desc": "这篇文章我们来聊一下nodejs中的stream，也就是nodejs中的流。 什么是流呢？从字面上来看我们应该可以想到水流，对吧。那我们不妨想一下水流有什么特点呢？ 比如我们日常生活中的水龙头，流出来的水是有序且有方向的。 nodejs中的流也是一样，是有序且有方向的。 nod…"}, {"id": "6844903777867137038", "title": "[译]事件循环总览—— Nodejs 事件循环 Part 1", "desc": ""}, {"id": "6844903570479955976", "title": "【原】nodejs全局安装和本地安装的区别", "desc": "来微信支付有2年多了，从2年前的互联网模式转变为O2O模式，主要的场景是跟线下的商户去打交道，不像以往的互联网模式，有产品经理提需求，我们帮忙去解决问题。 转型后是这样的，团队成员更多需要去寻找业务的方向，思考能为商户或者业务做点什么来体现其身价值，这样的转变是机会也是挑战，我…"}, {"id": "6844903537638375431", "title": "Node应用内存泄漏分析方法论与实战", "desc": "随着node、react同构等技术越来越广泛地使用, 内存泄漏的事情时有发生，应当引起足够的重视。最近在做菜鸟物流市场的技术支持，就“中奖”了，把实践过程中的经验和心得整理了下，供大家参考。"}, {"id": "6844903588058103822", "title": "浅谈node.js中的stream(流)", "desc": "什么是流呢？看字面意思，我们可能会想起生活中的水流，电流。 但是流不是水也不是电，它只是描述水和电的流动；所以说流是抽象的。 流是一个抽象接口，被node中的很多对象所实现。比如HTTP服务器request和response对象都是流，TCP服务器中的socket也是流。 这里…"}, {"id": "6844903661559087111", "title": "[译] Dweb: 基于 Secure Scuttlebutt 的社交消息流 (中英)", "desc": "原文是 Mozilla 开发者网站发布的关于 Dweb 的概念、应用及使用案例介绍的系列文章中的第二篇。 In the series introduction, we highlighted the importance of putting people in control…"}, {"id": "6844903618517139463", "title": "在 Node.js 中使用 Promise.prototype.finally", "desc": "Promise.prototype.finally() 最近达到了 TC39 提案的 第 4 阶段 。这意味着 Promise.prototype.finally() 提案被采纳成为 ECMAScript 最新特性草案 的一部分，登陆 Node.js 现在只是时间问题了。这篇文…"}, {"id": "6844903778173321229", "title": "02_Node js 基础模块（http，url）", "desc": "format: 逆向 parse。 resolve: 追加或替换地址。"}, {"id": "6844903777930051598", "title": "[译]Promises, Next-Ticks 和 Immediates— NodeJS Event Loop Part 3", "desc": ""}, {"id": "6844903718391906311", "title": "回顾Node文件路径", "desc": "node中路径在很多地方都有使用，基础到不起眼。但有时候就是不起眼的东西，会在你不轻易间跳出来给你上一课。 想起来复习一下文件路径的起因，是因为最近整理了一下项目结构，调整了目录。这也是基于对现代IDE的信任（都是IDE给惯的病），IDE会处理好路径问题，所以我只管拖动，他负责…"}, {"id": "6844903586908864519", "title": "走源码路线，浅谈react的一些思路", "desc": "你已经成功启动了一个react项目。 最早的版本，react和react-dom这俩个是放在一起的，后来因为各种架构的优点，互补互惠。将react-dom给拆分出来，react相当于库的核心，其他的衍生的react库都如同女朋友一样偎在他身边。可以随时更换随时使用。 难着不会，…"}, {"id": "6844903648397361160", "title": "带你一起撸一遍 nodejs 常用核心模块（三）", "desc": "zlib 可以用来实现对 HTTP 中定义的 gzip 和 deflate 内容编码机制的支持。 HTTP 的 Accept-Encoding 头字段用来标记客户端接受的压缩编码。 使用 zlib 编码成本会很高, 结果应该被缓存。（下面的演示代码只演示压缩） crypto 模…"}, {"id": "6844903544525586439", "title": "记一个 Windows 命令行引发的 Bug", "desc": "2018 年刚开始就踩了一个很懵逼的雷，居然还是关于 Windows 的命令行的。 背景是这样的，在开发 Lavas cli 的过程中，需要通过开发者选定的模版类型拼接出对应的 repo 地址和分支名，然后通过 Node.js 从 github 上拉取合适的模版到本地给开发者使…"}, {"id": "6844903620845142023", "title": "一步步去阅读koa源码，中间件执行原理", "desc": "koa的中间件执行的流程控制，代码的是非常精妙的。由下面的一张洋葱模型的图来形容，记住这张图。 为什么是这样子的图，下面我们有一个例子来描述一下 上面\b的这个例子，顺序打印出来的是fn1-1、fn2-1、fn3-1、fn3-2、fn2-2、fn1-2，现在只知道，调用next(…"}, {"id": "6844903561856286734", "title": "记一次 Node debug 过程", "desc": "hello~亲爱的看官老爷们大家好~最近接手维护公司另一个 Node 项目，稍微熟悉一下代码后，便被提了一个解决线上 bug 的需求。定位问题后解决还是十分容易的，但是这个过程十分有趣，bug 出现的原因也值得深思。因而有了这篇文章，分享这次 bug fixes 的过程。 整个…"}, {"id": "6844903849384230920", "title": "深入浅出node.js总结-模块机制（1）", "desc": "Node没有完全按照CommonJS规范实现，做了一定的取舍并加入自身需要的特性。 Node对引入过的模块都会进行缓存，以减少二次引入时的开销。==Node缓存的是编译和执行之后的对象== require()方法/import语句对于相同模块的二次加载都一律采用缓存优先的方式，…"}, {"id": "6844903573738749965", "title": "在Node中使用ES模块加载", "desc": "使用包@std/esm，可以实现使用import加载模块"}, {"id": "6899404907284168711", "title": "遗传算法解决TSP问题（Node.js）", "desc": "旅行商问题是一个np难问题，此文是笔者最近学了Node.js和刚好需要做一份遗传算法解决TSP问题，就写了这一篇博文。 TSP问题是组合数学中一个古老而又困难的问题，也是一个典型的组合优化问题，现已归入NP完备问题类。NP问题用穷举法不能在有效时间内求解，所以只能使用启发式搜索…"}, {"id": "6844903503698067464", "title": "有效使用 Node.js 事件循环", "desc": "对于 Node.js 应用程序开发新手而言，作为学习曲线的一部分，他们需要了解单线程事件循环的工作原理，以及它可能导致意外结果的方式。您可以使用本教程中的 3 个交互式示例中的事件循环进行练习。您很快就能编写快速、高效的代码来轻松处理异步调用。"}, {"id": "6844903582085431310", "title": "Node.js Readable Stream的实现简析", "desc": "Readable Stream是对数据源的一种抽象。它提供了从数据源获取数据并缓存，以及将数据提供给数据消费者的能力。 接下来分别通过Readable Stream的2种模式来学习下可读流是如何获取数据以及将数据提供给消费者的。 在flowing模式下，可读流自动从系统的底层读…"}, {"id": "6844903632626778120", "title": "如何用tcp写一个聊天室", "desc": "Telnet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行…"}, {"id": "6844903688285208590", "title": "Koa2 洋葱模型 —— compose 串联中间件的四种实现", "desc": "原创文章分享"}, {"id": "6844903624821194759", "title": "如何在Koa集成Bigpipe首屏渲染服务", "desc": "通过上面的对比，可以看出为什么服务端渲染更快？因为前端通过ajax渲染，需要等到获取js后，再发起http请求获取到数据后才完成渲染，而服务端免去了多次http请求的过程（http请求耗时），直接让服务端返回渲染好的html页面。 那类似首屏这种对速度有要求的就可以使用服务端渲…"}, {"id": "6844903521305755655", "title": "再谈 CSS 预处理器 | EFE Tech", "desc": "百度 EFE团队，对比三个主流css预编译器的文章"}, {"id": "6844903569074700301", "title": "Node.js 静态服务器新知", "desc": "ETag是实体标签的缩写，根据实体内容生成的一段hash字符串,可以标识资源的状态。当资源发生改变时，ETag也随之发生变化。 ETag是Web服务端产生的，然后发给浏览器客户端。 yargs 模块能够解决如何处理命令行参数。它也需要安装。 执行 npm link 命令。"}, {"id": "6844903704366153736", "title": "精读《手写 SQL 编译器 - 性能优化之缓存》", "desc": "重回 “手写 SQL 编辑器” 系列。这次介绍如何利用缓存优化编译器执行性能。 可以利用 Frist 集 与 Match 节点缓存 这两种方式优化。 如图所示，只要构建好了 First 集，不论这个节点的路径有多长，都可以以最快速度判断节点是否不匹配。如果节点匹配，则继续深度遍…"}, {"id": "6844903561176809479", "title": "介绍 Node.js 未来两处很不错的新特性", "desc": "这个 PR 实验性地加入了 Promise 化的 fs API。虽然现在我们可以使用 util.promisify 来简单地封装 fs 这一套 API，但这只是“封装”。从 Node.js 内核层面上支持 Promise 会有更大的性能优势。 以后我们可以这样优雅的读取文件： …"}, {"id": "6948355784464203812", "title": "给你心爱的 npm 包上个『北京户口』", "desc": "一切从我司有两个 npm 源说起，一个叫杭州源，另一个叫北京源。本来各用各的相安无事，直到有一天我们想依赖另一个源的 npm 包时，就相互拉取不到对方的源了。杭州源这边也有做过兼容，当拉取的源不存在时，就尝试去北京源拉取，看似解决了这个问题。但是这只解决了我们依赖北京源的 np…"}, {"id": "6844903621960663048", "title": "让 deno 支持 HTTP 服务", "desc": "前段时间 ry 大佬公开了他目前投入其中的开源项目 deno, 还在演讲中细数 Node.js 「十宗罪」, 一时间圈子里那是『红旗招展』、『人山人海』, 众说纷纭, 也闹出了很多「笑话」, 当然看标题就知道这篇文章说的不是这些。 The main difference is …"}, {"id": "6844903567619260429", "title": "Koa源码分析", "desc": "最近一直都在开发基于node的前后端项目，分享一下Koa的源码。 Koa算是比较主流的node的web框架了，前身是express。相比于express，koa去除了多余的middleware，只留下了最基本的对node的网络模块的继承和封装，并且提供了方便的中间件调用机制，K…"}, {"id": "6844903496257585160", "title": "Koa引用库之Koa-compose", "desc": "compose 是一个工具函数，Koa.js 的中间件通过这个工具函数组合后，按 app.use() 的顺序同步执行，也就是形成了 洋葱圈 式的调用。 利用递归实现了 Promise 的链式执行，不管中间件中是同步还是异步都通过 Promise 转成异步链式执行。 函数开头对参…"}, {"id": "6844903591765868557", "title": "如何编写一个前端框架之一－项目结构（译）", "desc": "本系列一共七章，Github 地址请查阅这里。 虽然有一些通用的项目结构指南，但是没有适合所有项目的结构。有兴趣的童鞋可以看看来自Node Hero系列的 Nodejs 项目结构指南。 NX 旨在成为一个开源社区驱动的工程，易于扩展和可伸缩性强。 它拥有现代客户端框架所期望的所…"}, {"id": "6847902216171454472", "title": "NodeJs 生成项目公用文件", "desc": "当你想写一个新模块时候,是否还是一个一个手动去新建文件，本文将带你走入脚本自动化去新建模板文件。 1. Installer 2. 设置基本参数 3. 生成组件"}, {"id": "6844903601169498120", "title": "H5开发在QQ钱包的应用实践", "desc": "内容来源：2017年6月24日，腾讯前端高级工程师周明礼在“腾讯Web前端大会 TFC 2017 ”进行《QQ钱包h5应用开发实践》演讲分享。IT 大咖说作为独家视频合作方，经主办方和讲者审阅授权发布。 移动互联网时代，提高网页性能是每个前端团队的目标。作为QQ钱包团队的前端工…"}, {"id": "6905767716108369934", "title": "学Node,你不可能不知道Node的事件环吧", "desc": "1.概述和浏览器中一样NodeJS中也有事件环(EventLoop)但是由于执行代码的宿主环境和应用场景不同所以两者的事件环也有所不同2.NodeJS事件环和浏览器事件环区别2.1任务队列个数不同浏览"}, {"id": "6844903502313947149", "title": "谷歌加入 Node.js 基金会白金会员", "desc": "谷歌加入 Node.js 基金会成为白金会员，未来将和IBM，Intel，Joyent，Microsoft 和 Red Hat 等其它白金会员一起，为 Node.js 项目提供支持。"}, {"id": "6844903520781467655", "title": "Docker 容器与镜像的储存", "desc": "在 Docker 的生态中，有容器（container）和镜像（image）两个重要的概念，那么容器和镜像是如何在主机（host）上储存的呢？ 系统： Ubuntu 16.04 Docker: 17.10.0-ce Storage Driver: overlay2 首先来看下什…"}, {"id": "6947888973494779912", "title": "写接口到调接口", "desc": "由于mysql8.0和mysql5.0版本加密方式不一样:（mysql8.0:caching_sha_password，mysql5.0:mysql_native_password）。本地Workbench可以连接，但Navicat连接失败。"}, {"id": "6955750222894989326", "title": "Node-2-模块系统（node学习笔记，模块系统是后续所有内容的基础）", "desc": "什么是模块？关键词（数据私有，暴露接口） 公共的js文件，即将一个复杂的程序依据一定的规则封装成几个块文件，并组合在一起，模块的内部数据、实现是私有的，只是向外部暴露一些接口（方法）与外部其他模块通信"}, {"id": "6844903588385275918", "title": "解析 SMTP 协议", "desc": "SMTP 是属于应用层协议, 是基于 TCP 协议用于收发邮件的.我们常常需要在业务中使用邮件, 但是并没有对 smtp 协议有足够的了解, 我们下面就来全面地了解一下. smtp 服务器一般会开启 25 端口提供服务, 当然如果 smtp 服务器使用了安全认证也就是 ssl/…"}, {"id": "6844903503542894599", "title": "基于node实现文件路径替换", "desc": "本次分享一个简易路径替换工具。功能很简单，重点在于掌握：递归遍历文件夹目录 正则替换目标内容、解压上传文件，返回更新后的压缩文件"}, {"id": "6844903559364870151", "title": "koa源码学习", "desc": "曾经看过很多源码，但是却没有本着刨根问底的精神，遇到不懂的问题总是轻易的放过。我知道掘金是个大神云集的地方，希望把自己的学习过程记录下来，一方面督促自己，一方面也是为了能和大家一起学习，分享自己学习的心得。 koa一共只有四个文件，所以学习起来并不困难，稍微用一点时间就可以看完…"}, {"id": "6844903861874851853", "title": "node.js url模块", "desc": "参数:第一个参数 url地址字符串,第二个参数 为布尔值,默认false,当值为true,返回的url对象中query属性返回的是一个对象,第三个参数 为布尔值,默认false,如果设为 true,则//之后至下一个/之前的字符串会解析作为host.例如,//foo/bar会解…"}, {"id": "6904801247904792589", "title": "关于跨域", "desc": "1.首先，客户端要发送 OPTIONS 请求 给服务器。 2.在服务器内部，需要对 OPTIONS 请求 ，做出一些 设定 ，告诉客户端 是否允许访问 。 3.客户端确认服务器允许该方法，最终发送 PUT 请求；否则，抛出错误，服务器拒绝访问此方法。 1.使用了某些方法，比如说…"}, {"id": "6844903794367528967", "title": "Node内建模块和对象", "desc": "在node核心中有些内建模块，使用这些模块可以操作系统，文件和网络。打开nodejs.org官网可以看到文档中对应版本的API，推荐使用稳定版。 当然也不全是模块，比如console、buffer是对象，这里简单的讲下一些常用的内建模块。 比如有操作文件系统的filename、…"}, {"id": "6844903508232126477", "title": "Node.js处理国际化", "desc": "之前做国际化，用java写的一个工具提取代码中的中文，用于翻译。再将代码中的中文替换成变量，以便根据系统语言设置，转换语言。 这次我想通过NodeJS实现，下面写下具体思路。这里有全量代码 首先NodeJS需要实现两个功能：读文件和写文件。 可以读文件了，接下来就需要处理文件内…"}, {"id": "6844903570685329415", "title": "awesome npx ", "desc": "在gayhub闲逛时，不知怎么突然想看看create-react-app（以下简称 create）的源码，来到项目主页，无意中瞄到README.md好像发生了一点小小的变化。 这个 npx 是什么鬼，突然想起来前几天好像也在一些 npm 的工具包上看到过这个玩意儿，但是没有注意…"}, {"id": "6844903637571862536", "title": "你再说你不懂事件队列？", "desc": "写的真的很赞👍"}, {"id": "6844903558408568840", "title": "Node中stream的深度感知", "desc": "之前在开发ASP.NET的时候，根据源代码依次追踪整个程序的执行过程，发现最重要的过程是基于一个管道流的，像水管一样，依次处理管道流中的十几个事件，当时对流的认知是四个字，依次执行。那么现在做Node的开发，对于Node中的流是另四个字，那就是源源不断。本篇文章主要目的是带大家…"}, {"id": "6844903509024866318", "title": "前端每周清单第 38 期: Node 9 发布，Kotlin 与 React，Netflix 架构解密", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Node.js 8 宣布进入 LTS，No…"}, {"id": "6844903614050205710", "title": "基于 HTML5 的 WebGL 3D 版俄罗斯方块", "desc": "基于 HTML5 的 WebGL 3D 版俄罗斯方块"}, {"id": "6976042954398007327", "title": "Nodejs接入微信JS-SDK全过程`", "desc": "步骤一：设置JS接口安全域名 登录到你的微信公众平台后，左侧菜单选择设置-》公众号设置-》功能设置-》JS接口安全域名。它的上面给你列出了几个注意事项，比如要备案通过的域名，要将MP_verify_n"}, {"id": "6844903602557812749", "title": "node.js爬虫应用——前端程序员的词典command-translator", "desc": "虽然高考英语考了135分，大学英语四级也过了，可到现在，写了两年代码，经常在写一个变量的时候，想半天也想不出来对应的英文单词是什么，总不能很可 (sha) 爱(bi) 的去用拼音吧，最后还是只能去求助有道了。虽然说打开有道网页，然后输入词语翻译不算太麻烦，担保每次都这样，总觉得…"}, {"id": "6903182367788105736", "title": "前端云原生，以 Kubernetes 为基础设施的高可用  SSR(Vue.js) 渲染微服务初探（开源 Demo）", "desc": "笔者在逛掘金的时候，有幸看到掘友狼族小狈开源的 genesis — 一个可以支持 SSR 和 CSR 渲染的微服务解决方案。总体来说思想不错，但是基于 Kubernetes 云原生部署方面一直没有完整的实践。所以笔者决定做个非官方的 Demo 供大家参考。 这个项目怎么用，它的…"}, {"id": "6844903712461176840", "title": "深入理解Javascript之Promise", "desc": "相信大家都听过Node中著名的回调地狱（callback hell)。因为Node中的操作默认都是异步执行的，所以需要调用者传入一个回调函数以便在操作结束时进行相应的处理。当回调的层次变多，代码就变得越来越难以编写、理解和阅读。 Promise是ES6中新增的一种异步编程的方式…"}, {"id": "6844903711949455368", "title": "Node.js 10 LTS 值得关注的特性", "desc": "经过一年多的沉淀后，Node.js 10 终于正式进入 LTS 了，本文将为大家阐述值得关注的特性。 主要关键词： - HTTP/2 - BigInt - Window 安装包优化 - 解决原生模块安装编译问题 - Work Threads - 实验性 API"}, {"id": "6914480787236913165", "title": "Node.js 中的 Buffer 和字符编码", "desc": "众所周知，数据在网络中是通过二进制传输的，在 Node.js 中，Buffer 对象就是用于处理这些二进制数据。举个例子： 可以看到标准 ASCII 码使用 7 位二进制数来表示大小写字母、数字、标点符号以及控制字符。所以总共能够表示 2 的 7 次方，也就是 128 个字符。…"}, {"id": "6975424131299082276", "title": "Node.js问答系统流程", "desc": "Node.js问答系统的主要流程，包括注册、登录、上传头像、提问以及回答等几个方面和后端的交互，实现问答的功能"}, {"id": "6844903764093042695", "title": "NodeJS Cluster模块源码学习", "desc": "1. cluster模块如何区分主进程/子进程 2. 主进程中是否存在TCP服务器, 如果有, 什么时候创建的？ 并没有在cluster.isMaster条件语句中创建服务器, 也没有提供服务器相关的路径，接口。而主进程又需要承担代理服务器的 3. 为什么多个子进程可以监听同一…"}, {"id": "6844903586581872647", "title": "Node.js 系列：构建原生 Node.js 应用", "desc": "由上图可以看出，应用程序在调用过程中，如果数据报还没有准备就绪，会先返回一个错误信息(EWOULDBLOCK)，此时当前进程可以执行其他方法，而不会阻塞。而 A() 会轮询内核，返回缓冲区数据是否准备就绪"}, {"id": "6844904048311664653", "title": "《深入浅出Node.js》学习笔记（四）", "desc": "Node是首个将异步大规模带到应用层面的平台，它从内在运行机制到API的设计，无不透露出异步的气息来。 在JavaScript中，函数作为一等公民，使用上非常自由，无论调用它，或者作为参数，或者作为返回值均可。 函数式编程是JavaScript异步编程的基础。 高阶函数把函数作…"}, {"id": "6844903949825245192", "title": "创建Node脚手架工具（上）", "desc": "前端有各种各样的脚手架工具, 比如我们常用的vue-cli, create-react-app等工具. 为我们前端早期工程的开发, 带来极大的便利. 这么便利的node cli, 是不是特别想知道是如何开发的? 接下来, 为大家介绍一下怎样开发一个脚手架工具. （上）：主要介绍…"}, {"id": "6844903764130807816", "title": "[NodeJs系列]Q&A之理解NodeJs中的Event Loop、Timers以及process.nextTick()", "desc": "在上一篇文章理解NodeJs中的Event Loop、Timers以及process.nextTick中笔者提了几个问题，现在针对这些问题给出我的理解，如有错漏烦请指正。 再回到源码中，timeout的初始值为0，也就意味着poll阶段之后会直接转入check阶段而不会发生阻塞…"}, {"id": "6844903919886434317", "title": "搭建一个好用的API Mock服务", "desc": "通过Webpack设置代理。"}, {"id": "6844903955089080328", "title": "express + mongoose + nodemailer实现发送qq邮件", "desc": "语言根据自己选择，我选用Typescript，因为自己习惯用Typescript。"}, {"id": "6844903549252403213", "title": "基于 react 后端渲染模板引擎 noox 发布了", "desc": "React 组件化思想受到越来越多开发者的关注，组件化思想帮助开发者将页面解耦成一个一个组件，代码更加模块化, 更易扩展。而目前流行的后端模板引擎如 ejs, swig, jade, art 共同的问题是： 针对以上痛点，笔者基于 React 造出了 noox 这样一个工具，专…"}, {"id": "6844903679271632903", "title": "流“忙”", "desc": "这里就要提到一个网上的例子了。首先，我们需要先生成一个大文件： 这就生成了一个大概 450MB 的文件。第二步，我们需要启动一个简单的 Node 服务器。 把代码写好之后，我在本地全局安装了一个 pm2，当然了，你也可以使用系统自带任务管理器、活动监视器等等来监控内存消耗的变化…"}, {"id": "6844903516981657613", "title": "前端每周清单第 41 期 : Node 与 Rust、OpenCV 的火花，网络安全二三事", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID ： frontshow），及时获取前端每周清单。 PWA 是否能带来新一轮大前端技术洗牌…"}, {"id": "6844903497905733639", "title": "React技术栈实现XX点评App-Demo", "desc": "项目内容不多，就涉及到三个页面，主要是为了学习新的知识。项目中用的redux-saga也是前天才学习的。项目的架构也是最近在各种探讨研究。还求大神多指点~ 开发react-redux这一套，我个人的理解是 Redux体现的是代码分层、职责分离的编程思想,逻辑与视图严格区分。 而…"}, {"id": "6844903687115145229", "title": "Angular开发实践（六）：服务端渲染", "desc": "Angular在服务端渲染方面提供一套前后端同构解决方案，它就是 Angular Universal（统一平台），一项在服务端运行 Angular 应用的技术。 标准的 Angular 应用会执行在浏览器中，它会在 DOM 中渲染页面，以响应用户的操作。 而 Angular U…"}, {"id": "6844903621813878797", "title": "Node.js中TCP及聊天室的实现", "desc": "OSI网络模型分七层，由下至上分别为：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层，TCP协议处于传输层。 Node.js中的 net 模块提供了对TCP协议的封装，使用 net 模块可以轻松的构建一个TCP服务器，或构建一个连接TCP服务器的客户端。 这样就创建…"}, {"id": "6844903630659649543", "title": "从promise、process.nextTick、setTimeout出发，谈谈Event Loop中的Job queue", "desc": "1. 问题的引出 在上述的例子中，我们明白首先执行主线程中的同步任务，当主线程任务执行完毕后，再从event loop中读取任务，因此先输出2，再输出1。 event loop读取任务的先后顺序，取决于任务队列（Job queue）中对于不同任务读取规则的限定。比如下面一个例子…"}, {"id": "6844904100258119688", "title": "一篇就够·通关Event Loop执行顺序", "desc": "对吧，无数次被这种装X面试题恶心。 不过恶心归恶心，不管有没有实用性，透过这些题目来弄清楚技术的真相，是没有坏处的。 这部分主要是检查有没有可以执行的定时器，包括但不限于setTimeout``setInterval。 这里的的具体实现在deps/uv/src/unix/tim…"}, {"id": "6924524953433800717", "title": "更新 Node 模块的正确姿势 - Jama Software", "desc": "在 left-pad 风波平息之后，我们应该回头想想如何更好的使用 node 模块，确切的说是如何在安全、可靠且可重构（至少 Javascript 能够允许的程度）的前提下更新 node 包。 最近，我被要求更新我们过时的 react-router 到新版本。在我书写这篇文章的…"}, {"id": "6909227827095142413", "title": "nodejs  3分钟学会系列教程（4） fs模块 练习一下   async await", "desc": "1、第一个功能判断服务器上面有没有upload目录，如果没有则创建，如果有则不改动1）第一个思路手动写一个这个方法第一种方法有点问题之后再看第二个思路使用第三方包mkdirp新建demo-mkdirp"}, {"id": "6844903568609280014", "title": "记录一次nodejs爬取《17吉他》所有吉他谱（只探讨技术）", "desc": "突然就想扒一下吉他谱了，说做就做哈哈，中间也是没有想象中的顺利啊，出现了各种意想不到的坑，包括老生常谈的nodejs异步写法，还有可怕的内存溢出等问题。。我将一步步回顾各种重要的错误及我的解决方法，只贴关键部分代码，只探讨技术。(本篇文章不是入门文章，读者需要具有一定的ES6/…"}, {"id": "6844903637416673294", "title": "json-server结合mockjs模拟REST API(react)", "desc": "开发的时候，前后端不论是否分离，接口多半是滞后于页面开发的。所以建立一个REST风格的API接口，给前端页面提供虚拟的数据，是非常有必要的。json server 作为模拟工具，因为设置简单，容易上手。本文以react生态做一个整体的项目搭建结构，结合mockjs模拟数据有需要…"}, {"id": "6844903497205284877", "title": "ReactDOM 是如何把组件渲染到 DOM 中的？", "desc": "当我们在开发 React 项目中，第一次调用 ReactDOM.render 的时候都发生了什么呢？ 今天就从源码角度来追踪一下这个问题（主要看流程， 而不纠结与细节）。 首先我们可以从 ReactDOM 的入口文件 ReactDOMStackEntry.js 中找到 rend…"}, {"id": "6906321606516146189", "title": "二叉搜索树的实现，反转，前序，中序，后序，层序的遍历 --自我记录", "desc": "//二叉树一般会有一个节点的node类还有tree树类，树里面会有根节点rootclassNode{constructor(element,parent){this.element=elementth"}, {"id": "6844903876080959496", "title": "Node爬取大批量文件", "desc": "Node爬取大批量文件"}, {"id": "6906084194385199112", "title": "Node.js安装和修改NPM全局模式的默认安装路径以及替换npm下载源", "desc": "Node.js的安装是及其简单的，只需要进入Node.js官网或者进入Node.js中文网。 在官网中点击下面这两个按钮其中之一即可下载。（我这里下载的是带有LTS的长期支持版，比较稳定。） 下载完成后，双击安装即可。 我这里将node的安装目录更改成了D:/nodejs，你可…"}, {"id": "6844903623818739720", "title": "React-源码解析-DOM模型", "desc": "当node为空时,说明node不存在,则初始化一个空的组件. ReactEmptyComponent.create(instantiateReactComponent)。 当node类型为字符串或者数字时,则初始化文本组件,ReactNativeComponent.create…"}, {"id": "6844903970687680519", "title": "Structure-study-Node(http基本使用)", "desc": "Http状态码101Websocket双向通信200成功204没有响应体206断点续传301(永久重定向(music.baidu.com))302(临时重定向(负载均衡))304（缓存）只能服务端设置"}, {"id": "6844903576330829838", "title": "异步编程方案进化论", "desc": "本文以nodejs中最常用的文件异步读取操作readFile为例，来说明各个方案下的实现方式。 假设我们现在有两个文件1.txt和2.txt，1.txt的内容是'./2.txt'(2的路径),2.txt的内容是'异步，又见异步'。 拿到1的内容作为路径去读取2的内容打印出来。 …"}, {"id": "6844903789607010317", "title": "[译]Node v11 中定时器和微指令( microtasks )的新变化", "desc": "[译]Node v11 中定时器和微指令( microtasks )的新变化"}, {"id": "6844903598464188424", "title": "What’s New in Node 10 ", "desc": "Version 10 is the newest release of Node.js, and it is packed with features. Going under the codename “Dubnium”, Node 10 was released April…"}, {"id": "6844903510673195015", "title": "初探Node.js Stream中Readable类的内部实现", "desc": "本次试图浅析探索Nodejs的Stream模块中对于Readable类的一部分实现"}, {"id": "6844903624229781518", "title": "【译】NodeJS事件循环 Part 1", "desc": "NodeJS与其他编程平台的区别在于它如何处理I / O。我们经常听到NodeJS被称为“基于谷歌的v8 javascript引擎的非阻塞事件驱动平台”。什么意思？“非阻塞”和“事件驱动”是什么意思？所有这些答案都在NodeJS的事件循环的核心。 在本专题中，我将介绍什么是事件…"}, {"id": "6844903943659601934", "title": "js中有关this指向问题", "desc": "所以在这里对foo的调用存在上下文对象obj，进行了隐式绑定（即将this绑定在了obj上），因此打印出来的结果为3. 这里调用链不只一层，存在obj1、obj2两个对象，那么隐式绑定具体会绑哪个对象。这里原则是获取最后一层调用的上下文对象，即obj1，所以结果显然是4（obj…"}, {"id": "6844903498425827335", "title": "Preact 源码解析之 setState 相关流程", "desc": "Preact 作为实现大部分 React 的接口，并且专注于轻量的框架，本文作为 Preact 源码解读系列的第一篇，将介绍一些关于 Preact 的在调用 setState 后相关操作的基础源码。"}, {"id": "6844903517379887117", "title": "基于socket.io打造hybrid调试页面", "desc": "基于socket.io打造hybrid调试页面"}, {"id": "6844903924143489031", "title": "Node中的事件循环", "desc": "如果对前端浏览器的时间循环不太清楚，请看这篇文章。那么node中的事件循环是什么样子呢？其实官方文档有很清楚的解释，本文先从node执行一个单文件说起，再讲事件循环。 任何高级语言的存在都有一定的执行环境，比如浏览器的代码是在浏览器引擎中，那么在node环境中也有一定的执行环境…"}, {"id": "6946206005432680485", "title": "身份认证问题--jwt--token--登录拦截", "desc": "对于前后端分离模式的开发，大多使用 JWT（json web token）进行身份认证。 token：当成功登录后，后端就返回一个凭据（本质是一个长长的字符串），有了这个凭据之后，后续再发请求接口，带上它就可以访问那些需要权限的接口。 生成的token前面，必须拼接 Beare…"}, {"id": "6844903616352878606", "title": "深入理解Vue之模板", "desc": "Vue编译器读取一个组件的template，将会经过如下阶段：parsing, optimizing, codegen, render function, VNode。 最后生成的VNode将会由虚拟DOM处理来创建一个真实Dom。 模板首先会被编译器编译成AST树, AST包…"}, {"id": "6844903697277796359", "title": "ts-node 下错误堆栈问题排查小记", "desc": "此前 egg 需要支持 ts，所以我们在 egg-bin 中集成了 ts-node （ 详见 当 Egg 遇到 TypeScript，收获茶叶蛋一枚 ），从而能够让开发者直接跑用 ts 写的 egg 应用，当然也包括单元测试。 强迫症表示这可不行啊，这必须得解决，于是开始了对源…"}, {"id": "6844903518550097933", "title": "利用http-server测试vue-cli打包后的项目", "desc": "目前在练习Vue，利用vue-cli脚手架开发了个vue2.0仿唯妮海购项目，在生产环境中一切良好，项目暂时告一段落，根据官方的npm run build打包后发现，在自己没有线上服务器的情况下，测试成为一大难题（实践发现，后面还有很多坑等着去填~~）。 安利一个项目中遇到的大…"}, {"id": "6943142358846275591", "title": "ipynb文章中的图片转换服务", "desc": "对于工作中经常遇到 ipynb 文章上传后，图片丢失或者图片过大的问题。可以做如下讨论： 那么批量替换怎么达到效果？只上传ipynb文件是不行的。因为有些图片用的是相对地址、有的用的是base64。如何解决? 文件夹上传、解压。 找到ipynb文件存入数组。把文件的地址也进行记…"}, {"id": "6844903588079075336", "title": "快速认识Node.js中的Stream", "desc": "1. 流的定义 流是用于处理Node.js中的流数据的抽象接口。stream模块提供了很多API可供实现stream的接口。Node.js中提供了很多stream的实例，如HTTP server和process.stdout。在它们中能充分体验到stream的应用。 2. 流的…"}, {"id": "6844903645402628109", "title": "express 中间件之“模版引擎”", "desc": "在express里帮我们集成了ejs模版引擎,引入他之后可以直接用ejs,第一步安装模版引擎的应用ejs.js1.html模版引擎的实现解析简单对象解析if-else拼接出的r将r用函数包起来，实例化"}, {"id": "6844903876450222088", "title": "每周分享第（42）期", "desc": "（干货）罗列了一些面试知识，算法和前端等一些实用的面试题。 ES2019 新特性了解一下。 HTML attribute 和 DOM property 区别。 中台相关知识科普。 内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内…"}, {"id": "6844903597851803655", "title": "[开源库]TensorFlow backend for TensorFlow.js via Node.js", "desc": "This repo is under active development and is not production-ready. We will be actively developing this in open source. Stay tuned for an of…"}, {"id": "6998595791711535111", "title": "一文带你了解Express中间件✨", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 Express中间件 一、认识Express中间件 Express最大的特点就是它的中间件，一个Express应用就是由许许多多的中间件来"}, {"id": "6979136552882421791", "title": "NodeJS底层架构原理", "desc": "nodejs的架构分为三个部分，Natives modules, Builtin modules, 底层。 Natives modules 是由js实现的内容，提供应用程序可直接调用的库，例如fs，p"}, {"id": "7002405602274050084", "title": "5分钟学会nodejs文件增删改查", "desc": "这篇文章主要是写给初学node.js的同学，本篇文章主要姐介绍nodejs的文件模块，通过nodejs的文件模块，我们可以创建、读取、修改、删除我们操作系统上的文件或文件夹，同理在Linux服务器上也"}, {"id": "6902624049940135950", "title": "node实现图片压缩", "desc": "一开始是打算用TinyPNG的API实现图片压缩，但是尝试过后发现压缩速度特别慢，而且好像还要花钱，果断就放弃了。改为使用imagemin。 这里是有一个坑的： 由于imagemin不可以直接压缩图片，而是需要依赖imagemin-jpegtran和imagemin-pngqu…"}, {"id": "7000652347869233189", "title": "学习Node Express框架（二）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 中间件 中间件的顺序很重要 req 请求对象 res 响应对象 next 下一个中间件 总结：就是在现有代码程序中，在程序生命周期或者横向"}, {"id": "6844903504276881422", "title": "无头浏览器 Puppeteer 初探", "desc": "我们日常使用浏览器的步骤为：启动浏览器、打开一个网页、进行交互。而无头浏览器指的是我们使用脚本来执行以上过程的浏览器，能模拟真实的浏览器使用场景。 本文主要介绍 Google 提供的无头浏览器(headless Chrome), 他基于 Chrome DevTools prot…"}, {"id": "7000262974430511117", "title": "Node、node-watch、Chokidar实现文件监听封装思路解析", "desc": "Node文件变更监听 前言 文件监听是很多业务场景中常用的功能，简单的探索一下文件监听工具的差异。 场景 在学习rollup过程中初始化了一个node项目，希望做到每次文件变更的时候都能够监听得到具体"}, {"id": "6911113668050550792", "title": "Node.js 服务性能翻倍的秘密（二）", "desc": "前一篇文章介绍了 fastify 通过 schema 来序列化 JSON，为 Node.js 服务提升性能的方法。今天的文章会介绍 fastify 使用的路由库，翻阅其源码（lib/route.js）可以发现，fastify 的路由库并不是内置的，而是使用了一个叫做 find-…"}, {"id": "7004374803561840653", "title": "node Buffer 基础Api", "desc": "Buffer 1.无需require的一个全局变量 2.实现Nodejs 平台下的二进制数据操作 3.不占据v8堆内存大小的内存空间 4.内存的使用由Node来控制，由v8的gc回收 5.一般配合St"}, {"id": "6973285298356617224", "title": "分享一款自带工作流引擎的NodeJS全栈框架，接单快手、创业神器，欢迎拍砖", "desc": "CabloyJS是一款自带工作流引擎的Node.js全栈框架, 接单快手、创业神器, 基于koa + egg + vue + framework7 + mysql 在线演示 场"}, {"id": "6873700061000237069", "title": "使用NodeJS实现JWT原理", "desc": "我们用nodejs为前端或者其他服务提供resful接口时，http协议他是一个无状态的协议，有时候我们需要根据这个请求的上下获取具体的用户是否有权限，针对用户的上下文进行操作。所以出现了cookies session还有jwt这几种技术的出现， 都是对HTTP协议的一个补充。…"}, {"id": "6951303053739819038", "title": "Node.js eventloop + 线程池源码分析（建议精读）", "desc": "线程池线程池是个啥先开启第一个问题，何为线程池。 一项技术的诞生往往是为了解决某个问题，那线程池也不例外。我们先来假设一个场景。假如你在某纪佳缘网上班，你的老板让你开发一个推荐服务，做的事情很简单，当"}, {"id": "6949385808755294245", "title": "require加载器实现原理", "desc": "我们常说node并不是一门新的编程语言，他只是javascript的运行时，运行时你可以简单地理解为运行javascript的环境。在大多数情况下我们会在浏览器中去运行javascript"}, {"id": "6972834535167754270", "title": "Node 系列 - 002 - TypeScript", "desc": "TypeScript 是 JavaScript 的超集，为语言增加了新的功能（下面简称 TS）。jsliang 羡慕 TypeScript 很久了，一直没有自己去搭建过，都是用别人搭建好的……"}, {"id": "7000032048337387527", "title": "Node.js 开发必备基础知识", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。文件读写、网络请求、回调函数，这三点是使用Node.js进行开发的三项核心知识。"}, {"id": "6844903538204606471", "title": "大前端神器安利之 Puppeteer", "desc": "Puppeteer(中文翻译”木偶”) 是 Google Chrome 团队官方的无界面（Headless）Chrome 工具，它是一个 Node 库，提供了一个高级的 API 来控制 DevTools协议上的无头版 Chrome 。也可以配置为使用完整（非无头）的 Chrom…"}, {"id": "6996924516878254088", "title": "Node.js异步编程之Promise", "desc": "先来介绍一下Promise是什么？ Promise： - 当前事件循环得不到的结果，但未来的事件循环会给到你结果 - 是一个状态机 - pending------还没有得到结果 - fulfi"}, {"id": "6995942854325436424", "title": "exports与module.exports的异同", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 Node的模块加载是采用的CommonJS规范，区别于AMD的异步加载，CommonJS是同步加载，因为Node代码一般是部署在服务"}, {"id": "7001014593753448484", "title": "node.js实现一个\"图片压缩到指定目录\"的小工具", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 背景 项目里面经常需要将某个图片压缩到对应目录下，基本上都是使用网站tiny-png来实现。 但是这里有一个问题，就是每次都得反复的操作文"}, {"id": "6999442822105399309", "title": "node学习篇之基础api认知", "desc": "process.nextTick() node中每当事件循环进行一次完整的行程时，我们都将其称为一个滴答。 当一个函数传给 process.nextTick()时，则指示引擎在当前操作结束"}, {"id": "6998199173912723464", "title": "Node.js 开发必备基础知识", "desc": "Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，就是你的 JavaScript 代码可以在 Node.js 里面跑。"}, {"id": "6984070264615075847", "title": "Node 系列 - 007 - node-xlsx", "desc": "在通过 Puppeteer 操作浏览器下载到 Excel 之后，我们终于可以将预备将多语言的操作玩出花来了。本篇我们将通过 node-xlsx，对 Excel 进行多语言导入导出的操作。"}, {"id": "6844904017873616910", "title": "全国到底有多少人在看直播？我用Node写了个爬虫统计了一下", "desc": "为了解决这个困扰我已久的问题，我专门去学习了node爬虫的相关知识，下面就跟大家分享一下。 先从平常看的最多的斗鱼开始，后来也证明斗鱼是最简单的一个。 这个页面已经统计好了所有分类下的总人气，接下来要做的就是通过DOM解析操作拿到每个分类下的总人数，然后把这些人数相加就可以。 …"}, {"id": "6844904095514378254", "title": "《大前端进阶 Node.js》系列 双十一秒杀系统（进阶必看）", "desc": "于是，接水怪痛定思痛，下定决心对口罩秒杀系统架构一探究竟，虽然业界大部分的这种场景应该都是基于 Java 实现的，但是怪怪我决定尝试从 Node.js 的方向，配合业界一些成熟的中间件来分析一下整个系统的架构，以及一些常见的问题。 关于 Node.js 如何实现高并发的原理，怪…"}, {"id": "7002458838708273188", "title": "初识Nestjs", "desc": "基于Node.js，对前端开发者们有着莫名的熟悉感。 高内聚低耦合，有一套成熟的开发规范。 TypeScript加持，使其程序健壮性有一定的保障。 生态活跃，有成熟的解决方案开箱即用；"}, {"id": "6997761014192144420", "title": "NodeJs深入浅出之旅：异步I/O （上）🐋", "desc": "异步I/O 在前端，最经典的异步就是Ajax。 Node是首个大规模将异步I/O应用在应用层上的平台，力求在单线程上将资源分配的更高效"}, {"id": "6993257762473902117", "title": "如何制作一个属于自己的cli工具", "desc": "通常我们在创建项目的时候都会使用一些cli工具来创建，以省去重新配置新项目的时间。大部分的cli工具都只是让你配置一个最基本的运行项目。但实际上我们在开发过程中可以能会用到一些很常用的框架配套的库.."}, {"id": "6996935339386339336", "title": "使用 Node.js 构建 BFF 层（一）", "desc": "我们开发一个简单的应用的业务架构如下： 最开始的时候前端只需要调用一个服务就可以完成对应的业务。 后来，业务逻辑逐渐复杂..."}, {"id": "6995437307159379981", "title": "了解NodeJs中的多线程", "desc": "node中的多线程是在node版本v10.5.0引入的一个的一个新特性，在很长一段时间内Worker Thread都是实验性质的，到目前为止，这个特性已经稳定可用"}, {"id": "7002045956317265957", "title": "使用Node JS获取WI-FI密码", "desc": "演示效果 全局安装wifi-password-cli依赖 使用 觉得Node.js很神奇是么？其实并不是，我们看看它是如何实现的 实现原理 OSX系统 通过下面的命令查询wifi密码 Linux系统 "}, {"id": "6844903714017247246", "title": "一份超级详细的Vue-cli3.0使用教程[赶紧来试试！]", "desc": "在vue-cli 2.X的时候，也写过一篇类似的文章，在八月份的时候vue-cli已经更新到了3.X，新版本的脚手架，功能灰常强大，试用过后非常喜欢，写篇教程来帮助各位踩一下坑。 如图所示，服务启动的时候回生成一个node_modules包，稍微测试了一下，服务支持ES6语法和…"}, {"id": "6982595736512757767", "title": "鸡蛋(Egg)里挑骨头", "desc": "虽然本人不是 Egg 的重度使用者， 但是仍然不得不承认 Egg 是一个真香的框架。 可是炒蛋吃多了也会腻， 今天就在鸡蛋里挑下骨头， 纯属一家之言， 不喜勿喷。 今天就从性能和多进程上着手， 在 E"}, {"id": "6961679951925870623", "title": "NVS —— js 实现的node版本管理工具", "desc": "node版本管理工具已有很多成熟的产品了，但是今日为大家带来一个js实现node版本管理工具——NVS！带给你一些不一样的体验~"}, {"id": "6862262233494192141", "title": "漫谈Node.js入门", "desc": "Node.js是一个运行环境，可以运行JavaScript语言写出的代码；在Node.js出现以前（2009年以前），JavaScript主要运行在浏览器客户端，在Node.js出现后，JavaScript又多了一个运行环境---Node.js。 运行在浏览器的JavaScri…"}, {"id": "7002552252003024909", "title": "记安装nvm的两个错误", "desc": "1、小记nvm、node、npm的区别 2、常规安装nvm方法。来了！来了！它来了！就知道你们喜欢吃瓜。3、使用gitee安装。4、配置环境变量"}, {"id": "6939329970086871047", "title": "nodejs：如何设计一个秒杀系统", "desc": "对于前端来说，“并发”场景很少遇到，本文将从常见的的秒杀场景，来讲讲一个真实线上的node应用遇到“并发”将会用到什么技术。 本文示例代码数据库基于MongoDB，缓存基于Redis。 规则：一个用户只能领取一张券。 首先我们的思路是，用一个records表来保存用户的领券记录…"}, {"id": "6844903696560553991", "title": "WebSocket是时候展现你优秀的一面了", "desc": "好了，看完了特点，那就......"}, {"id": "6946154957645021191", "title": "前端猛男带你走进nodejs系列（一）", "desc": "在前端技术发展之初，前端工程师只能使用html、css和javascript进行页面的交互开发，但是随着Nodejs的出现，打破了javascript只能在浏览器中运行的局面，实现了前后端编程环境的统一。下面来简单介绍一下Nodejs的特点： 笔者在前面介绍typescript…"}, {"id": "6987551621500633118", "title": "Node 系列 - 008 - ShellJS", "desc": "在工作中，你可能会碰到：Git 系列操作、关闭被占用的系统端口、删除指定文件/文件夹等……但是，对于这些操作你可能一时半会又忘记它的指令，或者它的指令太繁琐了，所以将这些内容装起来，岂不省事？"}, {"id": "6960843722644783141", "title": "PM2实用入门指南", "desc": "简介 PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 下面就对PM2进行入门性的介绍，基本涵盖了PM2的常用的功能和"}, {"id": "6844903555871014925", "title": "使用 Verdaccio 和 ngrok 规避发包尴尬", "desc": "大家还在为发的包可能不会正常工作而担心吗？还在通过增加 debug 版本号来区分正式包和测试包吗？ Verdaccio 可以在我们本地搭建一个私有仓库，而 ngrok 可以将这个端口暴露出来，实现在其他机器也能访问和下载，是不是很棒"}, {"id": "6844903920599302157", "title": "关于表单提交的数据类型和后端接收文件类型中间件multer的使用", "desc": "<form> 标签的属性enctype设置以何种编码方式提交表单数据。可选的值有三个: 第一种：这是默认的编码方式。它只处理表单域里的value属性值，采用这种编码方式的表单会将表单域的值处理成URL方式。 第二种：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把…"}, {"id": "6844903508538294286", "title": "认识node核心模块--全局对象及Cluster", "desc": "node 模块是node 完成强大功能的实现者。node 的核心模块包括events、fs、buffer、stream、cluster、http、net、一些操作OS和工具模块、全局对象等。本文将在node核心特性理解的基础上进一步深入探讨node核心模块的具体细节。本文主要探…"}, {"id": "6844903506705416205", "title": "zzz周刊 - 第1025期 - 龙猫", "desc": "别了，Firebug！ - 资讯 - 伯乐在线 随着下月 Firefox Quantum 的发布，是时候和 Firebug 说告别了。虽然这是一个悲伤的消息，但是 Firebug 的所有功能已经集成在 Firefox DevTools 中了 V8 JavaScript Engi…"}, {"id": "6844903540960264206", "title": "【quickhybrid】API规划", "desc": "当一切就绪后，就要开始进行API规划，这一块是整个Hybrid框架中非常重要的内容，毕竟对于前端页面来说，只会通过JS API来调用功能。 基本上，API调用起来是否方便简洁影响着整个体验。 如果没有权限认证？可以想象下，随便一个页面就能调用任意API，获取敏感信息。。。 那么…"}, {"id": "6844903502272004104", "title": "Node8’s util.promisify is so freakin’ awesome!", "desc": "Node 8 中 util.promisify 的介绍和使用"}, {"id": "6844903583163351053", "title": "浅析浏览器与nodejs中的event loop", "desc": "这篇文章我们来了解和简单的分析一下浏览器和node环境中的event loop（事件循环）。 有些小伙伴可能听说过eventloop这个名词，但是没有了解过，接下来我们就来了解一下。 我们先来看一组代码。 来猜一下执行结果 我们来捋一下。代码的执行肯定是由上自下而我们这里有两个…"}, {"id": "6844903624749875208", "title": "web学习：服务端开发的业务需求-路由解析", "desc": "后端（服务端）对于前端（客户端）的来说就像是中转站，后端调用底层（操作系统）服务上层（浏览器），而他们之间的桥梁便是IO流，后端与操作系统之间的是文件IO流，与前端的便是网络IO流。这次，我们先探讨下服务端与浏览器间的业务需求。 经过层层网络协议的解析，我们最终从浏览器请求中获…"}, {"id": "6844903570093899789", "title": "[英] Packaging Node.js Apps the Easy Way", "desc": "文中用 nexe (https://github.com/nexe/nexe) 把 JS 包装成可执行文件，各环境通用"}, {"id": "7007758878553473038", "title": "服务器与客户端", "desc": "服务器的类型 根据服务不同，服务器的类型也不同： web服务器 安装apache, tomcat, iis, nginx, 或者在nodejs环境写代码 来提供:图片浏览，新闻浏览....等服务的服务"}, {"id": "7003976141249708063", "title": "安装node后npm-v 报错", "desc": "报错信息： C:\\Users\\Administrator>npm -v``npm ERR! path C:\\Program Files\\nodejs\\node.exe npm ERR! code EN"}, {"id": "6991689670027542564", "title": "如何优化 node 项目的 docker 镜像（像老板压榨员工一样压榨镜像）", "desc": "本文将以 Node 程序展示如何优化 Docker 镜像（优化思想是通用的，不分程序），主要解决镜像大小过大、CI/CD 构建镜像速度，本文演示如何一步步优化 Dockerfile 文件，绝对的干货，"}, {"id": "6987420993568374797", "title": "vscode 是怎么跑起来的", "desc": "vscode 是前端工程师常用的 ide，而且它的实现也是基于前端技术。既然是前端技术实现的，那么我们用所掌握的前端技术，完全可以实现一个类似 vscode 的 ide。但在那之前，我们首先还是要把 "}, {"id": "7004627542522986532", "title": "Node.js 应用全链路追踪技术——[全链路信息获取]", "desc": "随着 Nodejs 对大前端技术栈的渗透，开发场景越来越多，如小程序、H5、BFF、工具链，同时和微服务外部系统交互多，如数据库场景 MySQL，Mongodb，Redis、RPC的分布式异构语言服务"}, {"id": "6994255090219483172", "title": "带你入坑Nodejs (一)", "desc": "Nodejs 概述 Nodejs 介绍 Nodejs 是一个基于 Chrome V8 引擎的ECMAScript运行时环境。"}, {"id": "7005757024445136904", "title": "中秋节来袭，使用油猴 + Node.js + 部署Serverless，监控每日月饼销量", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 下周就是中秋节啦，在这提前祝大家中秋快乐。 今天我们来用JS写一个程序来爬取京东上的前100页的月饼销量，看看到中秋节结束每天能卖多少钱的月饼。"}, {"id": "7002832459133878309", "title": "Node.js 的 api 设计的源头：POSIX", "desc": "如果你用过 Node.js 的 api，会不会觉得奇怪，为什么 api 的名字是这样的： 比如创建目录： 创建进程： mkdir、fork、exec、spawn 等，这些名字是怎么起的？ 如果你用过 "}, {"id": "6961101653709684772", "title": "推荐 9 个 Node.js 学习、进阶、debugging 分析、实战 的重磅开源项目 👍", "desc": "今天给大家带来的是 Node.js 学习的最佳开源项目！Node.js 最佳的学习资源。相信你会找到学习 Node.js 的兴趣！"}, {"id": "6995733584971563021", "title": "带你入坑Nodejs(三)", "desc": "这是我参与8月更文挑战的第9天，活动详情查看:8月更文挑战 前言 今天是手摸手系列第三篇了感觉好难啊这种更文哈哈，需要考虑的太多了后续需要写什么种种问题废话不多说接着肝用最通俗的话，讲最难的知识点。。"}, {"id": "7004618095775973390", "title": "手摸手带你写一个简易版的webpack", "desc": "大家好,我是作曲家种太阳 之前对webpack了解的只限于表面,业务项目中用到了配置再去网上去搜索用法, 虽然能勉强应付的过去,但是对webpack内部的运行机制并谈不上透彻,直到最近开始系统学习,才"}, {"id": "6994980351298764808", "title": "带你入坑Nodejs (二)", "desc": "Node创建Web服务器 服务器与浏览器之间的请求响应处理 请求：浏览器向服务器发送请求，请求服务器的某个文件。 处理：服务器接收到浏览器请求之后，找到对应的文件。响应：服务器读读取出文件内容，再返回"}, {"id": "7005062477239025672", "title": "VSCode 中如何调试 Node？", "desc": "大家好，我是山月。 不啰嗦，直接开始。 最简单的调试方式: Run Current File 由于 VSCode 内置 Node 调试器，调试 Node 极其简单，遵循以下步骤 在 ToolBar 中"}, {"id": "7006683778865168420", "title": "Mongoose中的鉴别器", "desc": "鉴别器（discriminator）是一种模型继承机制，可以在同一个集合（collecton）中定义不同的结构。"}, {"id": "6991433381363843102", "title": "ECMAScript 2020(ES11)新特性简介｜ 8月更文挑战", "desc": "简介 ES11是ECMA协会在2020年6月发行的一个版本，因为是ECMAScript的第十一个版本，所以也称为ES11. 今天我们讲解一下ES11的新特性。 ES11引入了9个新特性，我们接下来一一"}, {"id": "7002138057851797518", "title": "进击Electron(1)——初次使用和创建一个完整Electron桌面应用，及在vscode中调试Electron主进程", "desc": "Electron 是一个使用 JavaScript、 HTML 和 CSS 等 Web 技术创建跨平台桌面应用程序的框架，可以通过纯 JavaScript 调用丰富的原生（操作系统）API..."}, {"id": "6999617823249006606", "title": "获取 NodeJS 程序退出码", "desc": "那么对于一些意外退出的 NodeJS 程序，如何来获取 exitCode ？每一个退出码又代表什么？今天我们就来学习一下。"}, {"id": "7006182926505213989", "title": "mac版本nvm的使用", "desc": "安装 nvm 安装命令： or Wget: 注意后面的“v0.33.8”这是nvm的版本号，当前最新版本是v0.33.8 详见：https://github.com/creationix/nvm/bl"}, {"id": "7003145796275142687", "title": "node小工具 ｜ 根据文件列表自动生成路由提升工作效率", "desc": "老话说得好光说不练假把式，要学会学以致用，今天搞了个node小工具方便我们在开发中提升效率 问题 我们来分析一下现在存在的问题（小问题🤔）目前在我们的开发工作中如果新建一个可跳转显示的路由页面一般需要"}, {"id": "6999497362255118366", "title": "让 Node.js 变“懒”的 COW 技术", "desc": "COW 不是奶牛，是 Copy-On-Write 的缩写，这是一种是复制但也不完全是复制的技术。 一般来说复制就是创建出完全相同的两份，两份是独立的： 但是，有的时候复制这件事没多大必要，完全可以复用"}, {"id": "6979989936137043999", "title": "👏  nodejs写bash脚本终极方案！", "desc": "前言 最近在学习bash脚本语法，但是如果对bash语法不是熟手的话，感觉非常容易出错，比如说：显示未定义的变量shell中变量没有定义，仍然是可以使用的，但是它的结果可能不是你所预期的。举个例子： "}, {"id": "6995063516470198279", "title": "学习egg.js，看这一篇就够了！", "desc": "egg 介绍 egg 是什么？ egg 是阿里出品的一款 node.js 后端 web 框架，基于 koa 封装，并做了一些约定。 为什么叫 egg ？ egg 有孕育的含义。"}, {"id": "6844903604688535566", "title": "electron-vue邮件客户端总结", "desc": "electron将chromium和nodejs合并到同一运行时环境中，可以用html、css、javascript来构建跨平台的桌面应用。说白了就是我们写网页的同时还可以调用nodejs的api(如调用fs模块存储数据到电脑)，然后electron帮我们打包成一个跨平台的桌面…"}, {"id": "6844904074479927304", "title": "Node微信公众号开发 自定义回复", "desc": "一直想在日志中多穿插些旅行日志或者日常杂记，但是一来冬天实在没有什么可供娱乐的选项，二来今日随着新型冠状病毒的爆发，娱乐业基本上都进入停滞状态，索性还是老老实实跟家敲代码吧……其实也是所谓的敲代码，佩"}, {"id": "6979197559315103775", "title": "探究下commonJs中require实现原理", "desc": "疑问： 这里提出几个问题，大家可以带着问题来看下面的分析，这样有助于理解： esmodule 以及require有什么不同 exports 和 module.exports有什么区别 commonJs"}, {"id": "6844903603899990024", "title": "PWA · 前后端协作 · Node | JTalk 掘金线下活动第七期", "desc": "余票仅剩 3张，欢迎加入活动群获取更多通知。北京的小伙伴可以关注我们的 JTalk 第八期：前端安全 | 美团点评技术团队专场 掘金线下活动 JTalk 由掘金主办，每期 JTalk 会邀请垂直行业的优秀工程师来分享优秀的实践经验，技巧方法。旨在为开发者提供线下技术交流互动机会…"}, {"id": "6844904045581189128", "title": "自建faas利器之安全运行环境", "desc": "上次谈到了如何搭建自己的faas？，被同行评论有些标题党，这篇文章将接着上文，来介绍一些干货。同时在写这篇文章的时候，核心功能vmbox已经开源，欢迎大家点赞fork。 faas是云厂商提出的一种函数即服务的程序部署模式，以函数为核心，实现以函数粒度的服务伸缩，这项技术非常复杂…"}, {"id": "6844903616612925454", "title": "babel插件开发心得", "desc": "对于前端开发而言，babel肯定是再熟悉不过了，工作中肯定会用到。除了用作转换es6和jsx的工具之外，个人感觉babel基于抽象语法树的插件机制，给我们提供了更多的可能。关于babel相关概念和插件文档，网上是有很多的，讲的挺不错的。详细的解析推荐官方的babel插件手册。在…"}, {"id": "6964582066117672967", "title": "nodejs-express(5个核心问题)", "desc": "express 本节一起来探究node中常用的express核心中的5个问题 1. 调用 express() 到底创建了什么?"}, {"id": "6986770856315715592", "title": "npm超详细入门 源管理 | 常用指令 | 下载 | 淘宝源卸载", "desc": "npm是跟Node.JS一起安装的包管理工具，随着node的发展，现在node已经变成一个很大的生态了，也许很多人都不用node来做东西，但是也会使用到npm。 我闲着没事写一个详细入门吧。从怎么做，"}, {"id": "6901187530184458247", "title": "📃 关于怎么用NodeJs去处理前端的文件数据", "desc": "通过以上操作，就可以把前端上传的文件保存到服务器的指定地方，下面要做的就是把文件的数据处理成统一格式并返回。"}, {"id": "6922860965553766413", "title": "【每日一问】node.js中是如何判断类型的？", "desc": "那么问题来了，应该如何判断这些类型？下面是node中判断上述类型的相关代码（BigInt除外），基本上基于typeof进行判断。说到typeof那就不得不提下面的话题： 因此后面的代码对于typeof null === 'object'这个问题，有所兼容。"}, {"id": "6844903988555415559", "title": "开发一个简单的脚手架工具", "desc": "像我们熟悉的 vue-cli，create-react-app 等脚手架，只需要输入简单的命令 vue init webpack project，即可快速帮我们生成一个初始项目。在实际工作中，我们可以定制一个属于自己的脚手架，来提高自己的工作效率。 减少重复性的工作，不再需要复…"}, {"id": "6844903587416375304", "title": "关于第三方API跨域那些事", "desc": "我们在项目开发中，使用第三方接口难免会遇到一些跨域问题，而跨域这个话题网上已经讨论了无数遍了。常用的有： jsonp cors 服务端反向代理（因为服务端不存在跨域问题） 现在推荐的方式是CORS跨资源共享。在我看来，CORS本质是一种白名单，其关字段为 Access-Co…"}, {"id": "6844903676964765703", "title": "你对CommonJS规范了解多少？", "desc": "因为JavaScript本身并没有模块的概念，不支持封闭的作用域和依赖管理，传统的文件引入方式又会污染变量，甚至文件引入的先后顺序都会影响整个项目的运行。同时也没有一个相对标准的文件引入规范和包管理系统，这个时候CommonJS规范就出现了。 首先要说的就是它的封装功能，模块化…"}, {"id": "6971790209042087966", "title": "10分钟教你免费配置https", "desc": "相信大家对https都不陌生，其实就是在http的基础上套了一个SSL层，更加安全而已。由于node的风靡，前端也需要知道一些服务器端的知识了，今天给大家介绍如何给node应用配置https协议。"}, {"id": "6844903510450896904", "title": "实现一个websocket服务器-理论篇 ", "desc": "本文是Writing WebSocket servers的中文文档，翻译自MDNWriting WebSocket servers。篇幅略长，个人能力有限难免有所错误，抛砖引玉共同进步。 WebSocket 服务器简单来说就是一个遵循特殊协议监听服务器任意端口的tcp应用。搭建…"}, {"id": "6844903507212894216", "title": "使用yarn代替npm", "desc": "看这个之前或者之后，你都应该去yarn的官网看看。 以下命令都可以在yarn cli简介页面找到并且官网写的特别清楚。如果你没时间，那就先了解以下几个命令，但是，一定要去官网看看哦。 基本命令就这几个，有一些npm有缩写，自行查阅。（以下并无卵用，因为准备放弃使用npm） ya…"}, {"id": "6866723213960413197", "title": "图解Node（上）——直击灵魂的十条拷问", "desc": "Node到底是什么？Node的技术架构和工作流程架构分别是什么？V8、libuv分别在Node架构中承担什么角色Node引入模块的步骤是什么？Node中模块有几类？它们的关系是什么？Node的特点有哪"}, {"id": "6844903864882167816", "title": "Node.js 12中新的ECMAScript模块支持（译）", "desc": "Node.js 12（于2019-04-23发布）为ECMAScript模块带来了改进的支持。它实施了去年年底发布的计划的第二阶段。目前，这种支持可以在experimental-modules获得。 继续阅读以了解这种对ECMAScript模块的新支持是如何工作的。 简要说明：…"}, {"id": "6844903888961683463", "title": "Node基础（一）——认识node和简单读写文件", "desc": "Node 是一个针对网络应用开发的平台，是利用 Google 的 JavaScript 运行时引擎 V8（可以解析和执行 JavaScript）打造的一个 JavaScript 在服务端的运行环境。 Node 不是一门语言。Node 是一个构建于 Chrome JavaScri…"}, {"id": "6986909971849953288", "title": "【Node NPM】npm run 的生命线", "desc": "npm run => ./node_module/.bin => window or unix => exec => node module/bin"}, {"id": "6969843023190425636", "title": "🍭 源码分析：EventEmitter", "desc": "PRE 这是我参与更文挑战的第4天，活动详情查看： 更文挑战 本篇属于源码分析专栏 Event Events 是 Node.js 中一个非常重要的 core 模块, 在 node 中有许多重要的 co"}, {"id": "6844903581372383239", "title": "JavaScript中的装饰器--Decorator", "desc": "上面两段是维基百科中对于Decorator装饰器模式的介绍.简单来说.Decorator就是一种动态地往一个类中添加新的行为的设计模式,它可以在类运行时,扩展一个类的功能.并且去修改类本身的属性和方法.使其可以在不同类之间更灵活的共用一些属性和方法.下面就让我们来看下在ES中D…"}, {"id": "6963554360051630117", "title": "前端猛男带你走进nodejs系列（二）", "desc": "一、nodejs 之 timer 模块 timer模块开放了一个全局的API（不需要调用require），用于安排函数在未来某个时间点被调用。nodejs中的定时器函数实现了与web浏览器提供的定时器"}, {"id": "6844904055815274503", "title": "JavaScript原型链与继承|记一次面试经历", "desc": "这篇文章里面记录了我一次面试Node.js后端开发岗位时，二面的面试官问我的关于JavaScript原型链方面的知识，当面手写代码😱。 希望这篇文章能对今年要找web前端后者Node.js后端开发工作的同学有所帮助。 prototype：无论什么时候，只要创建了一个新的函数，…"}, {"id": "6844903603950338062", "title": "node.js 命令行工具(cli)", "desc": "一. 先了解一下package.json 1. 其中scripts字段 指定了运行脚本命令的npm命令行缩写，比如start指定了运行npm run start时，所要执行的命令。 2. bin字段 上面代码指定，vue 命令对应的可执行文件为 bin 子目录下的vue。 3.…"}, {"id": "6844904056184553486", "title": "理解Egg.js中的多进程模型（egg-cluster）", "desc": "我们知道，js是单线程的，意味着一个nodejs进程只能运行在单个cpu上面。nodejs在io处理方面是非常优秀的，但是在密集运算型应用中仍然有不足之处，而解决的办法，就是利用多核cpu的并发优势，将nodejs进程运行在各个cpu上面。而egg为我们提供了egg-clust…"}, {"id": "6895715094257205261", "title": "基于Koa2打造属于自己的MVC框架，仿egg的简易版本", "desc": "Express和Koa作为轻量级的web框架，没有任何约束的框架在一开始的时候会非常的爽快，开发几个demo，手到擒来，但是一旦代码真正上去的时候（而且一定会），你就会发现，大量重复的操作，重复的逻辑。导致项目的复杂度越来越高，代码越来越丑，非常的难以维护。我的quark-h5…"}, {"id": "6844903871211372552", "title": "服务器发布Vue/Nuxt项目指南(多图)", "desc": "很多前端朋友可能不是那么了解服务器配置。今天突然翻到之前写的这篇文章，修改完善了之后分享给大家一些常见的的Web服务器部署项目的方式。 下面讲的每一种服务器深入进去都很复杂，在这篇文章只是讨论一下基本的部署和使用。更高级的知识和用法还需要各位朋友自行去探索和发现， 开始阅读之前…"}, {"id": "6844903618705883149", "title": "聊一聊Vue中的回调函数", "desc": "有句话怎么讲来着，书到用时方恨少。平常我们撸Vue，感觉即使用props封装组件。。也很少自己制作回调这种看起来高大上的东西....... 但是实际开发中封装组件并不是这样的。许多组件需要子父组件进行通信 产品经理有个需求，需要让你做一个优惠券列表。然后需要把优惠券列表封装成组…"}, {"id": "6844903503161196551", "title": "编写自己的Webpack Loader", "desc": "本文将简单介绍webpack loader，以及如何去编写一个loader来满足自身的需求，从而也能提高对webpack的认识与使用，努力进阶为webpack配置工程师。 webpack想必前端圈的人都知道了，大多数人也都或多或少的用过。简单的说就是它能够加载资源文件，并对这些…"}, {"id": "6844903890295455758", "title": "JavaScript深入浅出第4课：V8引擎是如何工作的？", "desc": "最近，JavaScript生态系统又多了2个非常硬核的项目。 大神Fabrice Bellard发布了一个新的JS引擎QuickJS，可以将JavaScript源码转换为C语言代码，然后再使用系统编译器(gcc或者clang)生成可执行文件。 Facebook为React Na…"}, {"id": "6844904006981173256", "title": "Node.js在控制台彩色输出的方法及原理", "desc": "我们都知道，在nodejs环境下使用普通的console.log,console.error,console.info输出都是不会有颜色的，如果你不知道，那你现在知道啦😏。在这种情况下，如果我们需要彩色输出，则通常通过chalk这个node模块来实现， 上面代码执行的结果如下…"}, {"id": "6979457913924517919", "title": "Nodejs插件引入第三方动/静态链接库（Libtorch）的踩坑记录", "desc": "本文记录了自己把第三方动态链接库捣鼓进Nodejs插件中的过程，看上去很简单的东西，其实也没想过会花那么长的时间，期间还遇到过了各种奇奇怪怪的问题，解决这些问题本身也是一个学习的过程。"}, {"id": "6844904142071136269", "title": "Node版本及源管理", "desc": "直接下载 nvm-windows安装包安装即可。 更多 nvm 用法查看文档 nvm 文档。 常规的源切换,只能用npm config去设置局部或者全局的源，步骤和操作上有点繁琐。"}, {"id": "6844904168918876173", "title": "使用Typescript和ES模块发布Node模块", "desc": "TypeScript已经成为一种非常流行的JavaScript语言，这是有原因的。它的类型系统和编译器能够在您的软件运行之前的编译时捕获各种bug，并且附加的代码编辑器功能使它成为一个非常适合开发人员的高效环境。 本文旨在解决所有这些问题，并为你提供一个设置，使你可以放心地编写…"}, {"id": "6844904137662922760", "title": "Node 事件循环机制", "desc": "从官网的介绍中得知，Node 本身依赖于好几个类库构建而成的，底层都是 C/C++ 编写的，用于调用系统层级的 API和处理异步、网络等工作。 由这张整体的架构图可以看到，Node 最重要的是 V8 和 libuv 这两部分，V8 不用说，是解析运行 JavaScript 的引…"}, {"id": "6912252994557837325", "title": "【egg】egg-mysql", "desc": "这个插件既可以访问普通的 MySQL 数据库，也可以访问基于 MySQL 协议的在线数据库服务。 解决办法：win+r打开运行，输入services.msc打开服务，找到安装MySQL时添加的服务名，一般8.0版本的MySQL默认是MySQL80，双击打开，登录选项卡下将选择的…"}, {"id": "6844903805008478215", "title": "Node 调用 dubbo 服务的探索及实践", "desc": "1. 背景介绍 Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。 Provider : 暴露服务的服务提供方。 Consumer : 调用远程服务的服务消费方。 Registry…"}, {"id": "6844903665254432775", "title": "聊聊毕业设计系列 --- 项目介绍", "desc": "好了好了，以上纯属装x，三流的学校三流的毕业设计，看官随意就好。引言中做了毕业设计项目的介绍，实现一个包含图文类、阅读类、影视类、音乐类和电台类五大版块的文艺类阅读系统，取名为Moment。主要运用到的技术栈有： ... 在项目开始之前还很激动乘还是学生的时候在腾讯云上买了云服…"}, {"id": "6973552658430820365", "title": "【译】 Node.js 中的依赖注入", "desc": "引子 在 Dependency Injection 中了解了相关概念，接下来看看在 Node 中如何使用依赖注入。 原文：Dependency Injection in Node.js Origin "}, {"id": "6844903671549919246", "title": "ES6走走看看—由块级作用域引出的一场变革", "desc": "因为有了块级作用域，然后我们才有继续往下聊的可能。 块级声明是用于声明在指定块的作用域之外无法访问的变量。 从块的开始到变量声明这段的区域被称为临时死区，ES6明确规定，如果区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域，只要在声明之前…"}, {"id": "6844903621830639624", "title": "手写一个静态服务器", "desc": "前端开发人员不论是在开发还是测试中都会用到http服务器，方便快捷的使用更加有助于我们编写和调试代码，而http-server则是一个十分好用的包，它几乎不用配置，可以使用任何一个目录生成一个http服务器。 简单说一说http-server的使用。 打开浏览器访问http:/…"}, {"id": "6844903509016444942", "title": "Node with React: Fullstack Web Development 课程手记（二）——Google OAuth", "desc": "OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。常见的采用微信、QQ、微博、Facebook、Google账号登陆网站的过程都是采用了OAuth技术。这一章我们会以使用Google账号登陆第三方网站为例，展示如何…"}, {"id": "6844903599047213069", "title": "Koa2 源码学习(下)", "desc": "这段代码就引出了我们接下来分析的 ==context== 模块，同样利用删减法。 delegate 把 response 和 request 下面的方法和属性都挂载到proto上，然后把它暴露给application，这里的proto就是context。 Delegator 函…"}, {"id": "6844903700444479496", "title": "Node.js 系列 - 模块机制", "desc": "作为还在漫漫前端学习路上的一位自学者。我以学习分享的方式来整理自己对于知识的理解，同时也希望能够给大家作为一份参考。希望能够和大家共同进步，如有任何纰漏的话，希望大家多多指正。感谢万分！ 以编程角度来说, \"模块\" 指的是能够提供一定功能或数据的程序语句集合. 模块具备和外部联…"}, {"id": "6844903636431011848", "title": "理解 Iterator, Generator 和 Async/Await", "desc": "如果你也对Iterator, Generator 和 Async/Await 有一些困惑，那么可以看看这篇文章，理解他们三者分别是什么，有什么区别，以及分别适用什么场景"}, {"id": "6896394960061333518", "title": "Node系列-05-CommonJS规范以及模块系统", "desc": "原⽣模块与⽂件模块的优先级不同，但是都不会优先于从⽂件模块的缓存中加载已经存在的模块。 原⽣模块的优先级仅次于⽂件模块缓存的优先级。 http、fs、path等，原⽣模块。 ./mod或../mod，相对路径的⽂件模块。 /pathtomodule/mod，绝对路径的⽂件模块。…"}, {"id": "6844904128297058318", "title": "从零搭建个人博客网站(二)-全局异常处理", "desc": "已知异常就是程序中能够知道的异常，如：客户端参数传递错误，服务端抛出异常、如客户端无权限访问等等这类，这类错误就是已知异常。 未知异常就是程序中不能预想的错误，最常见的服务器程序抛出状态码 500 的异常。又比如我们单词拼写错误，导致程序无法运行等等，这种就是未知异常。 其实吧…"}, {"id": "6844903814730874894", "title": "如何正确使用Node.js事件", "desc": "事件驱动的编程变得流行之前，在程序内部进行通信的标准方法非常简单：如果一个组件想要向另外一个发送消息，只是显式地调用了那个组件上的方法。但是在 react 中用的却是事件驱动而不是调用。 这种方法能够使组件更加分离。在我们继续写程序时，会识别整个过程中的事件，在正确的时间触发它…"}, {"id": "6922780772969496589", "title": "JS中的'THIS'问题和改变THIS'的方法（call/apply/bind）", "desc": "2.方法执行，看方法前面是否有“点”，有“点”，“点”前面是谁THIS就是谁，没有“点”，THIS是window「严格模式下是undefiend」+ 自执行函数中的THIS一般是window/undefined + 回调函数中的THIS一般是window/undefined「当…"}, {"id": "6908969391648407565", "title": "nodejs  3分钟学会系列教程（2） supervisor  commanjs nodejs模块", "desc": "1、supervisor工具使用npminstall-gsupervisor安装完成后使用supervisorapp.js这个时候进行的更改会自动刷新只需要刷新一下页面就可看到对应的修改2、Comma"}, {"id": "6844903878006161422", "title": "用 nvm 管理 Node.js 版本", "desc": "Lighthouse requires Node 10 LTS (10.13) or later. 但目前大部分项目使用的是node8+的版本，为了避免node升级后带来的未知问题，决定使用nvm对node版本进行管理。 点击Next，跳转到设置 Node.js的Symlink…"}, {"id": "6942318377499115533", "title": "【译】可扩展前端3  —  状态层", "desc": "继 Scalable Frontend 2 — Common Patterns 第三篇，继续翻译记录。 在处理用户界面时，无论我们使用的应用程序的规模有多大，必须要管理显示给用户或由用户更改的状态。来源可能是从 API 获取的列表、从用户的输入获得、来自本地存储的数据等等。不管…"}, {"id": "6844903506441142286", "title": "Node.js 十问", "desc": "简评：作者在一次技术分享中提了 10 个问题，结果在场的很多开发者不能准确的说出答案，看看这 10 个问题你都了解吗？ 调用栈是 V8 的一部分。 调用栈在 V8 中是一个数据结构，用于追踪方法的调用。 每次调用一个函数时，V8 都会在调用栈中引用该函数。并且每次调用其他函数都…"}, {"id": "6844903622602391566", "title": "不要混淆nodejs和浏览器中的event loop", "desc": "距离这篇文章完笔虽然才两个月，但是我已经对各种细节忘记得差不多（不常用的东西马上就忘记了，大脑内存不足会经常自动腾出空间记忆别的事情），各位如果有任何疑问我大概率是回答不上来，非常抱歉。另外我觉得深入折腾这种东西意义其实不是太大，还不如学习一下更加通用价值更加高的知识（例如算法…"}, {"id": "6844903543376183309", "title": "使用Promise解决多层异步调用的简单学习", "desc": "第一次接触到Promise这个东西，是2012年微软发布Windows8操作系统后抱着作死好奇的心态研究用html5写Metro应用的时候。当时配合html5提供的WinJS库里面的异步接口全都是Promise形式，这对那时候刚刚毕业一点javascript基础都没有的我而言简…"}, {"id": "6844903507728793607", "title": "Node.js 发布9.0.0版本，Node.js 8 转为 LTS 状态", "desc": "9.0.0 会增加和测试最新的功能，所以不建议用在生产环境中。"}, {"id": "6844903765879832589", "title": "【译】Understanding NodeJS Event Loop", "desc": "Event Loop是个让人头大的知识点，今天我们先了解下Nodejs中的Event Loop(不要跟浏览器中的Event Loop混淆）。 在这篇文章中，作者将证明Node不完全是单线程的，并向你展示事件循环的一般实现。 快速浏览非阻塞I / O. 当执行此代码时，所有函数调…"}, {"id": "6844903824352624647", "title": "Angular+nodeJS+redis前端自测开发模式", "desc": "为什么要这样搞？这段时间在开发一个较大的项目，后台前期的准备时间会比较长，后期开发很快，而前台的前期开发会比较快，后期开发也需要等比例的时间，在进度上存在不协调的情况，后台的接口格式已经给出，虽然可以"}, {"id": "6844903583159156744", "title": "一步一步实现一个符合PromiseA+规范的Promise库（1）", "desc": "才没有。。 我们都知道。在现在的前端开发中，Promise这个东西基本上所有的开发中都会用到。 那必然有些萌新就会问了，Promise到底是个什么东西呢。 按照规范来说。Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区…"}, {"id": "6977653653771386910", "title": "如何用Node.js和MongoDB进行CRUD", "desc": "Node.js和MongoDB带来了非常快速和灵活的开发体验。只要看看我们如何快速而轻松地用Node在MongoDB中创建、读取、更新和删除一个文档。 软件架构师，InfoWorld | Thinks"}, {"id": "6977530777743392804", "title": "以Koa源码解析为例，分享学习源码的方法技巧", "desc": "最近刚好接触到了egg，以前都是只会用express起个服务，连接数据库做CRUD。没有仔细的学习一下node这门语言主流框架的演变。所以打算好好学习下框架的设计思想......"}, {"id": "6844903673298960398", "title": "Node.js 中流操作实践", "desc": "Stream 是 Node.js 中的基础概念，类似于 EventEmitter，专注于 IO 管道中事件驱动的数据处理方式；类比于数组或者映射，Stream 也是数据的集合，只不过其代表了不一定正在内存中的数据。。Node.js 的 Stream 分为以下类型： Stream…"}, {"id": "6844904098135801863", "title": "基于node实现Vue打包部署脚本", "desc": "在服务器上解压dist压缩包，随后删除压缩包。 这样我们只需要在npm run build完成打包后自动将代码上传到指定服务器，完成自动部署。 当项目较多需要多个部署环境，可以通过定义环境变量决定部署环境。"}, {"id": "6844903967185436685", "title": "前后端开发数据大小限制", "desc": "编程过程中在存储用户数据的时候，会遇到数据存储大小的限制。经常遇到的限制可以分为：用户侧、服务端、数据库三个方面，按照流程可以划分为5个阶段，如图所示。作为开发人员，需要了解这些限制，避免撞墙。 用户通过http请求提交数据，http请求本身是没有数据大小的限制，但是浏览器对U…"}, {"id": "6971038064982360072", "title": "记录一些 Express 笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6913927824244113422", "title": "语义化版本号和package版本号规则", "desc": "先行版本号，当要发行大版本或核心功能时，但不能保证这个版本完全正常，就要先发一个先行版本。常见的先行版本号有： 1. 指定版本号 2. ^版本号 3. ~版本号 4. > &#x3C; = >= &#x3C;= 版本号 5. - 版本号 6. 空格版本号 || 版本号 6. *…"}, {"id": "6844904127026167815", "title": "解决火狐新窗口打开网页被拦截问题", "desc": "阅读更多系列文章请访问我的GitHub 博客，本文示例代码请访问这里。 示例代码的服务端，由Koa实现。 由于谷歌浏览器无此问题，请在**火狐浏览器**中，打开http://localhost:8080/进行测试。 用户点击支付按钮。 前端发起一个 AJAX 请求到服务端。 服…"}, {"id": "6911488842079928327", "title": "在 Node.js 中避免内存泄漏：性能最佳实践", "desc": "内存泄漏是每一位开发者最终都会遇到的问题。它存在于大多数的编程语言里，即使是能够自动管理内存的语言也不例外。内存泄漏会导致一些如应用缓慢、崩溃、高延迟等问题。 在这篇文章中，我们会了解到什么是内存泄漏以及如何在 Node.js 中避免它。虽然这篇文章着重点在 NodeJS，但应…"}, {"id": "6959856122169655309", "title": "eggjs 实现服务端请求教程文档-3", "desc": "该教程适合入门级小伙伴，使用 node eggjs 框架实现服务端开发，以及处理开发过程中遇到的问题。教程中的每个章节会附上 demo(git 分支)，小伙伴可以自行拉取代码查看。"}, {"id": "6844903604965343239", "title": "从零开始搭建一个mock服务", "desc": "本文完。"}, {"id": "6890187302946111495", "title": "node基础", "desc": "一.Node.js模块化开发1.1JavaScript开发弊端JavaScript在使用时存在两大问题，文件依赖和命名冲突。1.2生活中的模块化开发1.3软件中的模块化开发一个功能就是一个模块，多个模"}, {"id": "6876792120322195464", "title": "十七张图玩转Node进程——榨干它", "desc": "一、现状二、解决措施三、child_process模块3.1创建子进程3.2事件3.3常用属性3.4常用方法3.5进程间通信（IPC）3.6保证系统健壮性四、cluster模块4.1优点4.2创建工作"}, {"id": "6844904147314016270", "title": "写了一个轻量级的自动构建部署vscode插件", "desc": "第一次写vscode插件，也是第一次写基于node的项目，期间查了各种各样的文档，加上一个人开发，自己也是简单的测试了一下，可能会有些bug，不过提升工作效率还是可以的。"}, {"id": "6903767394108473352", "title": "Node - fs模块下的文件系统（五）", "desc": "“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine”官网的一句介绍大致是说“Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时”，简单来说就是一个能让…"}, {"id": "6913127775541362702", "title": "package.json 之 Node.js 相关字段", "desc": "这阵子在工作中参与了业务的抽象，计划打造通用组件并发布成 npm 包便于后续项目的共建，自热而然，学习到了一些关于 package.json 之前没有接触到的知识点。 在此，介绍一些在 package.json 中被 Node.js 所使用的字段，以下所使用的 Nodejs 版…"}, {"id": "6975044781101547533", "title": "最大的Node.js CLI应用程序最佳实践列表 ✨", "desc": "关于如何构建成功的、有共鸣的和用户友好的Node.js命令行界面（CLI）应用程序的最佳实践的汇编。 为什么是这个指南？ 一个糟糕的CLI很容易使用户不愿意与它互动。构建成功的CLI需要关注细节和对用"}, {"id": "6844903663345860621", "title": "让我们用Nestjs来重写一个CNode(上)", "desc": "我将使用Nest.js构建一个CNode。 为什么这篇文章？我喜欢NodeJs，虽然我的NodeJs水平一般。但我还是用它来记录一下我学习过程。 最近，我发现了Nest.js框架，它有效地解决了Nodejs项目中的一个难题：体系结构。Nest旨在提供开箱即用的应用程序，可以轻"}, {"id": "6844903604092928014", "title": "详解配置VS Code/Webstorm来调试JavaScript", "desc": "译者按： 本文介绍了使用Node Inspector来调试 JavaScript和TypeScript应用。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 我准备了一个计算斐波拉契序列的例子，放在Github仓库。我建议你将它克隆下来并且跟…"}, {"id": "6914213540572168205", "title": "Node开发实践总结-定时脚本的设计与实现", "desc": "作为Node语言的初学者去实践后端开发时，不仅仅有见猎心喜，也有一些忐忑，好在大家都很open，给予了很多建议和分享，到目前为止，也成功建立了三个基于Node.js + TypeScript + IMServer [^1] 的工程，也是时候将自己最近的学习过程进行总结，下面就以…"}, {"id": "6844903505862328333", "title": "fly.js vs axios", "desc": "这是fly的第二篇文章，主要是将fly和axios进行一个全面的对比。 首先感谢大家支持，在fly的第一篇文章 JS HTTP 请求终极解决方案 - fly.js 发布后，github 首日破百星，如果您是新读者，在您了解了fly之后，如果您喜欢，不用找打赏入口，去github…"}, {"id": "6895888535301062670", "title": "如何在 Express4.x 中愉快地使用 async", "desc": "为了能够更好地处理异步流程，一般开发者会选择 async 语法。在 express 框架中可以直接利用 async 来声明中间件方法，但是对于该中间件的错误，无法通过错误捕获中间件来劫持到。 以上述代码为例，中间件方法并没有通过 async 语法来声明，如果 doSomethi…"}, {"id": "6844904037515558925", "title": "如何搭建自己的faas？", "desc": "最近serverless和faas的文章很多，各大云厂商都在推广，看着人手痒痒，无奈业务开发没有使用云服务，而是使用了内部k8s集群。所以决定自己搭建faas。说来容易，说干就干！ 其实内部早就开始了，一直想写篇文章，无奈业务太忙，总算抽了点时间分享下。 无论是函数还是接口本质…"}, {"id": "6963946886831177735", "title": "《深入浅出NodeJS》——知识点总结", "desc": "近期在复习NodeJS的相关知识，重新看了一遍朴灵大神的《深入浅出Node.js》，再结合网上的一些文章，做了一下NodeJS的笔记，进一步巩固自己的相关知识。 Node简介 单线程 Node保持了J"}, {"id": "6898842685394649102", "title": "消息摘要算法入门教程", "desc": "常用于验证数据的完整性，维护映射关系，也是数字签名的核心算法之一。 运算不可逆：已知运算结果的情况下，无法通过逆运算得到原文。 高度离散性：输入值的细微变化，会导致运算结果差异巨大。 弱碰撞性：不同输入值的散列值极低概率会出现结果相同。 消息摘要算法主要是通过散列函数来生成摘要…"}, {"id": "6844903565429833742", "title": "从一道题浅说 JavaScript 的事件循环", "desc": "从阮老师在其推特上的一道题来说说 JavaScript 的事件循环"}, {"id": "6844903662959984653", "title": "21个Chrome DevTools调试技巧", "desc": "Chrome DevTools真的很强大，甚至可以替代IDE了！"}, {"id": "6844903700494974983", "title": "vue 生命周期梳理", "desc": "在使用vue开发过程中经常会接触到生命周期的问题，但对于每个钩子函数都做了什么，应用场景比较模糊，希望通过这次梳理让自己清楚一些。初次写文章，有不对的地方还望各位多多指正！ 1. vue实例化过程 Vue 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始…"}, {"id": "6844903745088651272", "title": "[译] 用 React 和 Node.js 实现受保护的路由和权限验证", "desc": "上周末我想挖掘一些没有 Redux-Saga 这种花里胡哨的东西的纯粹的 React。 所以我创建了一个小项目，在 Strapi — 一个包括了可扩展的管理后台面板和一些内置功能（授权，上传，权限控制...）的 Node.js 框架的配合下，仅使用 Create React A…"}, {"id": "6874567934719885319", "title": "译|Node开发神器：使用Llama Logs实时可视化Node错误", "desc": "上面的动图显示了Llama Logs的一个例子。它是我创建的一个新工具，让你实时看到你的应用程序的内部运作。它已经准备好了，你可以开始在你的应用程序中免费使用。 下面，我将通过一个示例演示如何使用Llama Logs显示和调试基本Express应用程序中发生的错误。 我将编写一…"}, {"id": "6931278989642170376", "title": "Node+Typescript+Phantom+Redis 实现服务端画卡以及截图功能（上）", "desc": "客户端或者服务端请求画卡接口(接口参数：{ drawData: 画卡数据，weight： 画卡权重，cbApi: 回调接口，userId, taskId})。 解析参数存放到redis中。 判断当前是否有任务在执行；如果没有就创建一个page实例，同时获取redis中数据，进行…"}, {"id": "6989496516297621518", "title": "基于nodejs的mvc架构探索", "desc": "本文记录了一次对nodejs http模块的简单封装，模仿express，希望对有意向自己封装框架的童鞋有所帮助！"}, {"id": "6844904080830103560", "title": "Node Cli 开发快速上手", "desc": "Node.js 用途很广，常用来开发服务、桌面应用等被开发者熟知，Node.js 还有另外一个非常实用的场景 - 命令行应用（后文统称 CLI）。"}, {"id": "6844903585545715719", "title": "2017年前端工作小结，个人踩坑之旅，前端学习者的杂谈", "desc": "写多少项目就得写多少css，我曾一度轻视它，认为实现预期效果便是大胜利，滥用各类选择器，命名杂乱无章，为了解决bug，而写入行内式，然后在工作中顺利的发展成为一名css上的残障人士，偶尔面对曾经写过的css，总是无语凝噎，但这种情况在近期得到了控制。 BEM命名法：在初学前端时…"}, {"id": "6844903734288334861", "title": "如何创建一个可靠稳定的Web服务器", "desc": "本篇文章主要讲述的是如何通过Node创建一个稳定的web服务器，如果你看到这里想起了pm2等工具，那么你可以先抛弃pm2，进来看看，如果有哪些不合适的地方，恳请您指出。 创建一个稳定的web服务器需要解决什么问题。 利用多核CPU资源有多种解决办法。 通过在单机上部署多个Nod…"}, {"id": "6913744847123775502", "title": "Wechaty | NodeJS基于wechaty-puppet-service协议手撸一个企业级微信机器人助手", "desc": "目前所在企业是一家创新型汽车后市场互联网科技有限公司，拓展汽车后市场B2C、B2B和O2O业务。 由于客户维系和供应商咨询等都是基于微信群聊的。每天要在成百上千的群聊中提供服务。需要实时在群内产品报价，车架号识别，图片识别，关键字反馈。数据推送等等功能。这样的需求情况下，人力成…"}, {"id": "6844903774075502600", "title": "强大的 Node.js Web 框架 - Daze.js", "desc": "去年年初对 Node.js 比较感兴趣，也用了很多 Node.js 的框架，但是开发体验不是特别好，我之前也是后端转前端，然后再接触 Node.js ，所以用过挺多的服务端框架，相对js而言，设计一款服务端框架并不容易，本人也不太愿意使用 typescript （为什么不用ja…"}, {"id": "6844903859479904264", "title": "【译】生产环境下的Node.js——开源监控工具", "desc": "想知道我的么？高性能和不间断服务。高性能应用程序需要做好以下三点： 在第1部分，Node.js要监控的关键指标中，我们讨论了您应该监控的关键Node.js指标，以便了解应用程序的运行状况。 我还解释了你应该避免的Node.js中的错误做法，例如阻塞线程和造成内存泄漏，还有一些巧…"}, {"id": "6850418116074143757", "title": "搭建完整的IM（即时通讯）应用（1）", "desc": "移动互联网发展至今，以微信为首的即时通讯服务已经融入了我们生活中的各个角落，在公司的一些业务中也扮演着重要的角色，对于即时通讯我们公司原来是使用的环信的服务，但是有很多定制化的需求无法实现，所以后来决定内部开发一个满足定制化需求的即时通讯微服务。 使用socket.io框架是因…"}, {"id": "6912088372819755016", "title": "基于 node 实现项目下载、自动化路由、项目发布脚手架", "desc": "安装全局安装yarnaddxwl-cli-g/npminstallxwl-cli-g在任意位置都可以使用xw命令局部安装yarnaddxwl-cli-D/-S/npminstallxwl-cli-D/"}, {"id": "6985118199595417631", "title": "Node.js 系列 -- npm 包管理器", "desc": "前言 我们在开发前端项目时通常会使用到别人封装好的代码，比如 demo / 函数 / 组件库 / 框架 / 插件 等，我们通常会选择：npm 方式来安装依赖。那 npm 到底是森么 npm 简介 np"}, {"id": "6844903608127848455", "title": "Node.js EventEmitter解读", "desc": "除了流之外，net.Server，以及process也都是继承自EventEmitter所以可以监听事件。 on监听的事件的名称可以包含特殊字符(比如'$'、'*’、'~'都是可以的)，但是需要注意是大小写敏感的。 当EventEmitter对象发出一个事件的时候，所有与此事件…"}, {"id": "6844903817750806542", "title": "科普文：Node.js Web 服务如何获取用户的真实 IP ？", "desc": "##背景这似乎是一个显而易见的问题。以Node.js来说，每一个TCP连接都有remoteAddress属性，通过它可以直接获取到请求的IP地址。而在HTTP请求中，我们可以通过request.soc"}, {"id": "6844903693016367117", "title": "「译」JavaScript 计时器之旅", "desc": "如果不能，那你可能并不孤独。我已经写 JavaScript 和做编程许多年，曾经为一家浏览器厂商工作超过两年，直到最近，我才真正了解了这些计时器以及如何使用它们。 在这篇文章中，我将高度概述这些定时器工作方式以及使用它们的时机，并且会一起介绍 Lodash 很有用的 debou…"}, {"id": "6921691354628096008", "title": "使用 Node.js 的 Async Hooks 模块追踪异步资源", "desc": "作者简介：五月君，Software Designer，公众号「Nodejs技术栈」作者。 Async Hooks 功能是 Node.js v8.x 版本新增加的一个核心模块，它提供了 API 用来追踪 Node.js 程序中异步资源的声明周期，可在多个异步调用之间共享数据，本文…"}, {"id": "6844903567862530061", "title": "【译】关于 Promise 的 9 个提示", "desc": "正如同事所说的那样，Promise 在工作中表现优异。 这篇文章会给你一些如何改善与 Promise 之间关系的建议。 1. 你可以在 .then 里面 return 一个 Promise 而且，return 的这个 Promise 将在下一个 .then 中自动解析。 2. …"}, {"id": "6965337059842064391", "title": "buffer 深入在深入", "desc": "概念和理解？ Buffer类似js中的数组，但是它的元素是16进制的两位数，即为0到255的数值(8位无符号整形Uint8Array).[FF是最大的16进制两位数，即255]。 我们已经提到，数据流"}, {"id": "6844904078439350280", "title": "在浏览器运行可交互Python代码", "desc": "最近研究了一些在线运行代码应用，感觉颇为有趣，在此稍作总结，并尝试实现一种在浏览器运行可交互Python代码的方案。 相关API使用在文档中均有说明，本文不再赘述。 由于浏览器的限制，上面的这些库会缺少一些功能如文件操作等；此外如input方法，会通过window.prompt…"}, {"id": "6844903901423108104", "title": "使用 Node.js 生成方便传播的图片", "desc": "日常工作中，总会遇到一些需要和一些和“批量生成图片”相关的事情，尤其是在需要做内容传播的场景下：毕竟图片更直观、更有冲击力。 手头有一堆招聘需求，但是平台允许发布的字数有限，没关系，可以使用九宫格图片大法，把内容当长图发出来，但是制作长图还需要考虑排版，纯代码实现太过繁琐。 举…"}, {"id": "6844903588032937998", "title": "node实现基于token的身份验证", "desc": "最近研究了下基于token的身份验证，并将这种机制整合在个人项目中。现在很多网站的认证方式都从传统的seesion+cookie转向token校验。对比传统的校验方式，token确实有更好的扩展性与安全性。 由于HTTP是无状态的，它并不记录用户的身份。用户将账号与密码发送给服…"}, {"id": "6844903590901841934", "title": "Node-Sass安装失败引发的思考", "desc": "通过上述方法的其中一种，就可以解决问题。"}, {"id": "6844903638435889159", "title": "对症下药，快速下载github单个文件夹", "desc": "前几日遇到一个比较麻烦的事情，刚好周末有时间，不知道大家是否和我一样，在github阅读源码的时候，只想看他的src目录，当然在github上面阅读非常的麻烦，各种快捷都用不了，函数跳转，全局搜索….等等。但是。。。 关键来了，很有源码整个项目都非常的大，介于github网速不…"}, {"id": "6953555933733584904", "title": "ubuntu安装YApi教程", "desc": "YApi旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护 API"}, {"id": "6844903983199305736", "title": "Sequelize egg使用分享", "desc": "一、安装Sequelize因为我使用的是SQLServer数据库可以根据实际使用的数据来二、配置1.plugin.js2.default.js三、定义数据表在项目目录/app/model/userSt"}, {"id": "6844903945182117902", "title": "nodejs（一）基础介绍", "desc": "一. nodejs介绍 二. nodejs安装 三. npm命令 **npm -v：**查看npm版本。 **npm init：**初始化后会出现一个package.json配置文件。可以在后面加上-y ，快速跳过问答式界面。 **npm install：**会根据项目中的pa…"}, {"id": "6928955027952238599", "title": "2021 Node.js Stream 漫游指南", "desc": "其中基础概念这部分主要讲解 Node.js Stream 是什么，以及内部的工作原理。并附有动画来演示内部工作流程，可以帮助您更清晰的了解不同的流的工作方式以及差别。 如果对基础概念已经有了一个较为清晰的了解，则可以直接看第二及第三部分，将第一部分作为参考来阅读。 而管道链这一…"}, {"id": "6844903640897945614", "title": "Javascript模块化的演进历程", "desc": "ES2015 在2015年6月正式发布，官方终于引入了对于模块的原生支持，如今 JS 的模块化开发非常的方便、自然，但这个新规范仅仅持续了3年。就在7年前，JS 的模块化还停留在运行时的支持；13年前，通过后端模版定义、注释定义模块依赖。对于经历过的人来说，历史的模块化方式还停…"}, {"id": "6844903612699820039", "title": "我常用的puppeteer爬虫api", "desc": "详细介绍请看gayhub,更新周期大约是一个月，本文是基于 v1.4.0写的，大致api是通用的。 本文总结了Puppeteer爬虫的主要用法。我的目标是，有了这篇文章，日常的一般爬虫使用就不需要去看官方文档了。 cnpm i -S puppeteer 用cnpm安装没有试过报…"}, {"id": "6844903640163942407", "title": "Docker折腾记: (1)构建yapi容器,从构建发布到可用", "desc": "若是一个镜像提供多个服务,维护起来是比较麻烦的. docker build -t yapi:0.0.1 . gyp ERR! stack Error: Can't find Python executable \"python\", you can set the PYTHON e…"}, {"id": "6844903714688335885", "title": "10分钟快速入门rollup.js", "desc": "rollup.js是Javascript的ES模块打包器，我们熟知的Vue、React等诸多知名框架或类库都通过rollup.js进行打包。与Webpack偏向于应用打包的定位不同，rollup.js更专注于Javascript类库打包（虽然rollup.js也可以提供资源打包…"}, {"id": "6986579627829362724", "title": "如何在 Node.js 项目中使用 Babel", "desc": "今天讲解如何在 Node.js 项目中使用 Babel。 前面《手把手教你如何配置Babel的系列》文章中我们讲到，Babel会把新的语言特性降级处理，转换成目标环境支持的语法，并且对目标环境不支持的"}, {"id": "6844903872444497928", "title": "一文搞懂eggjs中上传文件", "desc": "一、基本的配置1、配置上传的路由2、在config/config.default.js中配置上传的基本配置(可以参考官方文档)3、安装几个基本的包二、使用form表单上传1、模板的代码2、在控制器中使"}, {"id": "6844903929843548168", "title": "[译] Node.js 的未来是什么?", "desc": "—— 寻找一份工作并不是一件很容易的事情。 Node JS 在non-blocking I/O 看来变得十分出名并且它通过利用 Javascript 在后端和前端中作为一种公用语言使得它的发展变得十分简便。 服务端： 感谢这一门强大的语言以及主要浏览器的支持和协助，Node.j…"}, {"id": "6844903585508147207", "title": "手把手教你用Hexo搭建个人技术博客", "desc": "其实大四实习那会就有搭建个人技术博客的想法了，然后还是懒，搁置了很久。前阵子在掘金发了几篇之前写过的文章，收获了不少赞和阅读量，有点小小的成就感，所以这点动力驱使自己动手了~有些人会觉得搭建个人博客需要购买域名，需要花钱，其实不是的，Github就可以帮助我们免费生成静态网址，…"}, {"id": "6844903879306379277", "title": "你可能不知道的 npm 实用技巧", "desc": "绝大多数前端和 Node.js 开发者每天的日常工作都离不开 npm，不知道你对 npm 的观感如何？如果你觉得 npm 很棒，那么不妨看下这篇文章，说不定其中有你之前没留意过的小窍门，可以让你 npm 用得更顺手。如果你觉得 npm 很糟糕，那也可以看下这篇文章，也许会发现用…"}, {"id": "6919796601477136398", "title": "nodejs搭建简单易用的本地代理服务器", "desc": "纯前端开发的时候，很多业务场景需要搭建本地服务器，方便页面浏览。 全局安装，serve ./启动，方便好用。 直接启动的话不支持跨域。 一般使用在基于wepack的项目，普通H5搭建需要成本。 支持跨域。 适用于普通页面开发，配置简单，node 命令启动。 支持跨域。 配置接口…"}, {"id": "6844904093459152903", "title": "Node - 异步IO和事件循环", "desc": "查阅资料的时候， 发现很多人都对异步和非阻塞的概念有点混淆， 其实两者是完全不同的， 同步异步指的是行为即两者之间的关系， 而阻塞非阻塞指的是状态即某一方。 如果是同步的话， 那么应该是client发起请求后， 一直等到serve处理请求完成后才返回继续执行后续的逻辑， 这样c…"}, {"id": "6995195589201756191", "title": "快速了解 package.json 文件", "desc": "当我们创建一个 Node 项目时，需要创建一个 package.json 文件，描述这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。 你可以在命令行使用 npm hel"}, {"id": "6844903725354450952", "title": "前端构造桌面级应用（QQ音乐）", "desc": "1. 数据获取部分 2. 3. 项目注意事项 4. 项目优化点 nw.js也是一个使用前端技术（html、css、JavaScript）来构建pc端程序的一个框架。 nodebob是node-webkit的构建工具，可以在Windows环境中自动发布node-webkit应用…"}, {"id": "6997320501580267528", "title": "express——中间件", "desc": "中间件 express的中间件，本质上就是一个function处理函数,express中间件的格式如下: **注意：**中间件函数的形参列表中，必须包含next()参数，而路由处理函数中只包含req和"}, {"id": "6844904082604294151", "title": "30分钟教你优雅的搭建nodejs开发环境及目录设计", "desc": "笔者最近在工作之余,一直在做数据可视化和nodejs方面的研究,虽然之前的web工作中接触过nodejs和可视化相关的内容,但是没有一个系统的总结和回顾,所以为了更深入的研究和复盘我的nodejs和数据可视化之路,笔者将会花两个月的时间,做一个彻底的复盘. 由上图可以看出,no…"}, {"id": "6916406516736065549", "title": "react+koa2+mysql零门槛的全栈体验，附上完整项目分享", "desc": "本文适用于对后端开发领域较为陌生的初级前端开发小伙伴，如果你想一个人搞定一整个项目（服务端接口定义开发+前端页面渲染+数据库搭建+服务器搭建+部署上线），希望这篇文章能给你带来一点点参考价值。 实现简单的登录、表单的增删改查、文件上传等功能。以下是项目地址： 主要基于React…"}, {"id": "6844903713602011144", "title": "浅谈前端错误处理", "desc": "用户反馈打开的页面白屏幕，怎么定位到产生错误的原因呢？日常某次发布怎么确定发布会没有引入bug呢？此时捕获到代码运行的bug并上报是多么的重要。 你会发现上面的例子中的错误不能正常捕获，看来错误捕获并不是这样简单**try...catch**就能搞定,当然你也可以为异步函数包裹…"}, {"id": "7004272015796502536", "title": "node学习 path的基本api 整理", "desc": "1 获取路径中的基础名称 01 返回的就是接收路径当中的最后一部分 02 第二个参数表示扩展名，如果说没有设置则返回完整的文件名称带后缀 03 第二个参数做为后缀时，如果没有在当前路径中被匹配到，那么"}, {"id": "6844903607238656008", "title": "Node.js Buffer解读", "desc": "Buffer作为存在于全局对象上，无需引入模块即可使用，你绝对不可以忽略它。 可以理解Buffer是在内存中开辟的一片区域，用于存放二进制数据。Buffer所开辟的是堆外内存。 怎么理解流呢？流是数据的集合（与数据、字符串类似），但是流的数据不能一次性获取到，数据也不会全部lo…"}, {"id": "6961261006420967431", "title": "用node.js实现接口以及前端接口调用", "desc": "特别想学习同事做的WebSocket的双向通讯,所以自己搭建了一个前后端的项目,基于目前项目组的开发框架 前端用的 vue + anxios 后端用的 egg.js + sequelize 主要是实现"}, {"id": "6844903655989051399", "title": "nodejs实现一个word文档解析器", "desc": "之前项目里遇到一个需求，需要前端上传一个word文档，然后后端提取出该文档的指定位置的内容并保存。这里后端用的是nodejs，开始接到这个需求，发现无从下手，主要是没有处理过word这种类型的文档，怎么解析? Excel倒是有相关的库可以用，而且很简单"}, {"id": "6997049465047613454", "title": "深入浅出Node（一）：初识Node", "desc": "1.Node简介 node特点 首先，Node并不是一门语言，而是一种JavaScript的运行环境，使JavaScript脱离浏览器的局限，在服务端也有一定的影响力。Node构成与Chrome类似，"}, {"id": "6844903700725661709", "title": "HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器", "desc": "由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。 因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，写个PHP做代理 （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。"}, {"id": "6844903653782880263", "title": "如何用node开发自己的cli工具", "desc": "npm init 初始化生成标准的 package.json 文件，包含你的git信息，发布npm能找到你的描述，联系方式，版本号等。 这是一个规范，可执行工具的老家。新建一个tw.js ，因为是打印机风格的，所以瞎起了个名字 取typeWriter首字母 完善一下你各单位的逻…"}, {"id": "6882541950205952013", "title": "搭建一个属于自己的在线 IDE", "desc": "这几个月在公司内做一个跨前端项目之间共享组件/区块的工程，主要思路就是在 Bit 的基础上进行开发。Bit 主要目的是实现不同项目 共享 与 同步 组件/区块，大致思路如下： 在 A 项目中通过执行 Bit 提供的命令行工具将需要共享的组件/区块的源码推送到远端仓库，然后在 B…"}, {"id": "6942016231214055454", "title": "这样入门 js 抽象语法树(AST)，从此我来到了一个新世界", "desc": "在使用 tsc 编译我的代码时，对我目前来说，有三个基本的坑，下面我会对它们进行简单的阐述，在此之前看下即将被编译的目录结构。 解决问题的办法就是使用 copyfiles 命令行工具，它和上面我们介绍的插件一样，都是在 tsc 编译之后，做一些额外操作达到我们想要的目的。 这样…"}, {"id": "7006676479706660878", "title": "i5ting_toc的安装和使用", "desc": "i5ting_toc的安装和使用 5ting_toc是在node环境下的实现工具，用于将markdown文件转换为网页的工具，从而在浏览器中打开 i5ting_toc的安装 使用命令进行全局安装： i"}, {"id": "6844903632488366088", "title": "2018上半年掘金微信群日报优质文章合集：前端篇", "desc": "逐步学习什么是递归？通过使用场景来深入认识递归。 前端性能优化之路——图片篇。 今年的文章量比去年又多了好多，看来大家在掘金越来越活跃啦！可以Mark起来慢慢看～不过呢小饼还是建议大家到微信群里看每日小报，毕竟每天消化一两篇会更加有用，日积月累就会有很大的收益。反而积攒到一起的…"}, {"id": "7001426963223019551", "title": "Mongoose 中的 ObjectIds", "desc": "默认情况下，MongoDB 在 ObjectId 类型的每个文档上创建一个 _id 属性。许多其他数据库默认使用数字 id 属性，但在 MongoDB 和 Mongoose 中，id 默认为对象。 O"}, {"id": "6996834929401151525", "title": "搭建一套支持TS的Node运行环境", "desc": "前几天遇到一个批量处理文件的需求，需要用node来实现，由于第一次接触它，没啥经验，又想写TS，于是就搭建了这么一套环境，期间也踩了挺多坑。 本文就跟大家分享下我的实现过程，欢迎各位感兴趣....."}, {"id": "7001779859730989086", "title": "「学习笔记」child_process", "desc": "child_process child_process 用于创建衍生子进程。Node 和衍生的子进程建立 stdin(标准输入), stdout(标准输出), stderr(标准错误) 管道。chil"}, {"id": "6844903767926636558", "title": "一篇文章构建你的 NodeJS 知识体系", "desc": "最近读《重学前端》，开篇就是让你拥有自己的知识体系图谱，后续学的东西补充到相应的模块，既可以加深对原有知识的理解，又可以强化记忆，很不错的学习方案。 process.nextTick 方法允许你把一个回调放在下一次时间轮询队列的头上，这意味着可以用来延迟执行，结果是比 setT…"}, {"id": "6992553489930928159", "title": "总结常用的异步编程案例", "desc": "前言 对于异步编程，从最初的回调函数Callback再到Promise、generator、async/awaitJavaScript也在慢慢填补这个坑。但异步编程到底可以做什么还是值得探讨的。 这篇"}, {"id": "6993589662904221710", "title": "一键部署静态资源到七牛cdn", "desc": "CDN的全称是Content Delivery Network，即内容分发网络。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。"}, {"id": "7002488089146834975", "title": "Mongoose 唯一索引（unique）", "desc": "unique 选项告诉 Mongoose，对于给定的路径，每个文档必须具有唯一的值。例如，下面是如何告诉 Mongoose 用户的 email 必须是唯一的。 如果您尝试使用相同的 name 创建两个"}, {"id": "7002534474772643848", "title": "node—关于Event Loop的学习笔记", "desc": "一、什么是Event Loop 在此之前我们先了解几个概念： 1、什么是阻塞和非阻塞？ 阻塞和非阻塞是针对于进程在访问数据时，根据IO操作的就绪状态而采取的不同方式，简单来说是一种读取或写入操作函数的"}, {"id": "6992398435055845384", "title": "h5白屏异常监控技术调研", "desc": "当你决定要做一件不太熟悉的事情，你会如何做技术调研？面对老板的需求，你会如何做技术选型？ 思考的童鞋可以进来看看，算是抛砖引玉了。"}, {"id": "6997575452629925924", "title": "「从零开始」前端node够用指北(三)⚡---网络操作", "desc": "本系列带着大家一起从零开始学习NodeJS，感同身受的站在学习者角度分享知识，从基础到实战，如果感兴趣的同学可以点赞收藏留坑。"}, {"id": "7003987553879588895", "title": "NodeJs快速使用（一）、安装以及Http、Url模块使用", "desc": "1、NodeJs安装 可以直接访问NodeJs的网站下载最新的安装包，直接进行安装。 NodeJs中文网站: http://nodejs.cn/ 这边包含了最新版本和稳定版，自行选择安装即可。 安装完"}, {"id": "6844904029219192839", "title": "「万字整理 」这里有一份Node.js入门指南和实践,请注意查收 ❤️", "desc": "JS 是脚本语言,脚本语言都需要一个解析器才能运行。对于写在 HTML 页面里的 JS,浏览器充当了解析器的角色。而对于需要独立运行的 JS,NodeJS 就是一个解析器。 解析器需要运行引擎才能对 JavaScript 进行解析,Node.js 采用了 V8 引擎,Googl…"}, {"id": "6960662893717094431", "title": "nodejs 如何实现控制台打印高亮代码", "desc": "语法高亮的原理是什么？控制台是怎么打印颜色的？如何生成有好的代码格式（ code frame）？ 这 3 个常见问题本文帮你彻底搞通。"}, {"id": "7001034968931532830", "title": "express4版本中的“bodyParser”已被弃用报错解决方案", "desc": "问题描述 使用node中的express框架搭建好后端服务以后，需要接收相应的get、post、put、delete请求等。对于post请求接参数，以前的时候，我们是下载body-parser插件包解"}, {"id": "7002889452112592903", "title": "express中使用node-xlsx插件下载excel表格", "desc": "情况一、读取本地文件并返回前端excel流文件 第一步，肯定是要下载安装这个插件npm i node-xlsx 第二步，在对应代码中引入这个插件const xlsx = require('node-x"}, {"id": "7005444906160390157", "title": "使用Node.js express 开发上传文件/图片api接口", "desc": "今天我们来搞一个Node.js Express的上传文件功能，我使用了busboy这个库。 Busboy是一个基于事件的文件流解析器，不仅限于Express框架使用，其他的任何文件流都能使用。它不存储"}, {"id": "6984701069343326244", "title": "nodejs中使用readline提示输入内容", "desc": "前言 最近进行小版本发包测试时忘记修改版本号了，进而想到在打包前提示输入版本号，然后把版本号打进版本说明内。最终效果为双击bat文件在终端内提示输入版本号，输入完成后保存版本号。"}, {"id": "6844904054032695304", "title": "从 JS 引擎到 JS 运行时（上）", "desc": "V8 和 Node.js 的关系，是许多前端同学们所津津乐道的——浏览器里的语言，又兼容了浏览器外的环境，两份快乐重叠在一起。而这两份快乐，又带来了更多的快乐……但你有没有想过，这两份快乐到底是如何重叠在一起的呢？下面我们将以嵌入式 JS 引擎 QuickJS 为例，介绍一个 …"}, {"id": "6844903661588447240", "title": "浅谈H5音频处理（更多谈谈录音方向的内容）", "desc": "最近需要做一个实时录音然后根据音频流实时反馈出调用静音分析（VAD）以及语音识别(ASR)接口的功能。于是研究起H5有关这方面的支持。 首先需要弄清一点，Web Audio API和H5的<audio>完全不是一个体量级的东西，<audio>可以很方便地让你将音频文件丢进去就自…"}, {"id": "6844903737522126861", "title": "使用Node.js写一个简单的api接口", "desc": "用Node.js实现一个HTTP服务器程序非常简单。我们实现一个最简单的Web程序， 它的作用是创建一个http服务，里面传一个回调函数，函数中包含两个参数分别是（request，response）。 其中request是请求对象，response是响应对象。 我们是想当访问h…"}, {"id": "6844904022646718472", "title": "读 Koa2 源码后的一些思考与实现(面试必备)", "desc": "Nodejs官方api支持的都是callback形式的异步编程模型。问题：callback嵌套问题 koa2 是由 Express原班人马打造的，是现在比较流行的基于Node.js平台的web开发框架，Koa 把 Express 中内置的 router、view 等功能都移除了…"}, {"id": "6844903602528469005", "title": "如何解决WebSocket的兼容性", "desc": "我们知道WebSocket是一种在服务器与客户端双向通讯的技术，使用原生的WebSocket可以最小化 服务器资源的使用并且为两者提供了一种统一的通信方式。随着HTML5的普及，现代浏览器（IE10+）基本上都已经原生支持WebSocket了，下面是支持WebSocket协议的…"}, {"id": "6844903877595119630", "title": "你不能不知道的Koa实现原理", "desc": "什么?这是一篇源码解读文章 ? 那一定很枯燥！不看。 1 . Koa 之 EventEmitter 2 . Koa 之 Http 模块 3 . Koa 之 Use 方法 4 . Koa 之 洋葱模型 5 . Koa 之 Context 对象 6 . Koa 之 源码精读 一 7…"}, {"id": "6844903962525728782", "title": "node.js操作数据库之MongoDB+mongoose篇", "desc": "nodejs官网提供了 macOS 安装包，直接下载安装即可。现在 nodejs 稳定版已经到了 12.11.1 。 MongoDB 是为现代应用程序开发人员和云时代构建的基于文档的通用分布式数据库。 言归正传，由于上述原因，我们不能直接使用 brew install mong…"}, {"id": "6844904194042757127", "title": "Javascript开发人员偏爱Deno而不是Node的5大原因", "desc": "NodeJS的作者Ryan Dahl发布了一个新的运行时，旨在解决Node的许多缺点。你最初的反应可能是“哦，太棒了，另一个Javascript框架？正是我所需要的...”。别担心，我也有同样的反应。在了解了优势之后，我也看到了为什么Deno正是2020年后端Javascrip…"}, {"id": "6890808608503267341", "title": "自己搭个脚手架", "desc": "实际开发中有很多业务功能，文件是固定要建的，比如页面的layout布局，路由权限校验等...... 当前已经把公共部分抽离生成了一个git项目，每次新建项目都需要创建两个远程仓库去拉取模板代码，再推送到origin远程仓库，过程过于繁琐。 基于解放生产力，减少重复工作，提高效率…"}, {"id": "6976155637705080862", "title": "【node实战系列】编写一个重试装饰器", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 bigo前端开始推广bff，hello农场作为首个bff落地项目，历经2个月，完成了从"}, {"id": "6951694067147210766", "title": "每天一个npm包：koa-csrf", "desc": "koa-csrf是一个用于防止csrf攻击的koa中间件。当然关于什么是csrf、以及如何预防这里就不赘述了，有兴趣的可以阅读understanding-csrf。egg处理csrf方案。首先我们看个"}, {"id": "6960830835087900703", "title": "Nodejs连接Mysql", "desc": "这篇文章将使用Nodejs连接Mysql,实现基本的增删改查(CRUD)操作。 主要技术点包括 Koa Koa-router koa-nunjucks-2 mysqljs"}, {"id": "6903350655474204680", "title": "手写koa-static源码，深入理解静态服务器原理", "desc": "本文会接着讲一个常用的中间件----koa-static，这个中间件是用来搭建静态服务器的。 koa-static的代码更通用，更优雅，而且对大文件有更好的支持，下面我们来看看他是怎么做的吧。本文还是采用一贯套路，先看一下他的基本用法，然后从基本用法入手去读源码，并手写一个简化…"}, {"id": "6916045338415464461", "title": "你真的很清楚nodejs里的require吗", "desc": "1.前言在日常的前端/Node开发中，require是最常使用的api之一，了解其背后的逻辑有助于我们日常的开发以及排坑。但在阅读源码的时候，我们往往会觉得枯燥无味，看完了，看起来好像也知道了代码是怎"}, {"id": "6982133816001462285", "title": "pkg打包node应用完全指南", "desc": "node应用部署 node应用部署的常见方式就是把代码放服务器上，然后用命令行执行代码就可以了。比如express框架会自动生成一个www启动文件，部署时执行这段就可以了： 但是这种方式的缺点也很明显"}, {"id": "6978477054366842916", "title": "你应该了解的Node child_process", "desc": "Node child_process spwan exec execFile fork cluster"}, {"id": "6844903937355563022", "title": "[译]理解 Node.js 的中 Worker Threads", "desc": "理解 Node 的底层对于理解 Workers 是很有必要的。 一个进程：process 对象是一个全局变量，可在 Node.js 程序中任意地方访问，并提供当前进程的相关信息。 一个线程：单线程意味着在当前进程中同一时刻只有一个指令在执行。 事件循环：这是 Node.js 中…"}, {"id": "6844903897438371847", "title": "Node.js 中的缓冲区（Buffer）究竟是什么？", "desc": "从前端转入 Node.js 的童鞋对这一部分内容会比较陌生，因为在前端中一些简单的字符串操作已经满足基本的业务需求，有时可能也会觉得 Buffer、Stream 这些会很神秘。回到服务端，如果你不想只做一名普通的 Node.js 开发工程师，你应该深入去学习一下 Buffer …"}, {"id": "6932374305758167054", "title": "NodeJS（Express框架）实现 Token 验证免密登录 (一)", "desc": "基于 JWT 的 Token 验证,KiteBlog 里面使用的就是这种。 jsonwebtoken: 用于生成 Token 。它也有解析 Token 的功能 如果你看了上面 JWT 介绍的文章，就知道 JWT 是由三部分组成的，分别是载荷(Payload)、头部(Header…"}, {"id": "6844903725392216071", "title": "G6的插件系统", "desc": "G6的插件系统做的相当完善, 可惜文档没有具体说到. 这里整理一下g6的插件. 这四种插件都有各自的写法以及api, 但是文档中没有提到, 这里简单介绍一下. 一下都以官方插件为例. 其实到这里我们已经知道了, 只要是在一些内置事件中注册一下自定义事件再引入我们就可以称之为一个…"}, {"id": "6844904070948339725", "title": "node结合cheerio爬虫小案例", "desc": "由于后续会搭建一个 全栈个人网站，目前暂定放一些技术文档 全民K歌资源 B站制作的视频，也打算把博客集成在网站中。所以本篇就来分享一下node爬虫。"}, {"id": "6844903502565638151", "title": "将 Node.js 内置于手机原生应用——以后 Android 和 iOS 可以用 npm 包了？", "desc": "Earlier this year we published a demo app showcasing our port of Node.js with ChakraCore to iOS. In the accompanying blog article, we talke…"}, {"id": "6844903502116814861", "title": "《Node.js设计模式》欢迎来到Node.js平台", "desc": "本系列文章为《Node.js Design Patterns Second Edition》的原文翻译和读书笔记，在GitHub连载更新，同步翻译版链接。 以package的形式尽可能多的复用模块，原则上每个模块的容量尽量小而精。 因此，一个Node.js应用由多个包搭建而成，…"}, {"id": "6844903946096476167", "title": "nodejs（二）代码组织和部署", "desc": "一. 模块路径解析规则 ==注意：==但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身，不建议使用。 **内置模块：**如果传递给require函数的是NodeJS内置模块名称，不做路径解析，…"}, {"id": "6844903672468504589", "title": "泡杯茶，我们坐下聊聊Javascript事件环", "desc": "在计算机内存中存取数据，基本的数据结构分为栈和队列。 栈（Stack）是一种后进先出的数据结构，注意，有时候也管栈叫做“堆栈”，但是“堆”又是另一种复杂的数据结构，它和栈完全是两码事。栈的特点是操作只在一端进行，一般来说，栈的操作只有两种：进栈和出栈。第一个进栈的数据总是最后一…"}, {"id": "6844903586841919496", "title": "一起走进JavaScript内部的世界", "desc": "我们写过很多JavaScript代码，但是却很少了解到其内部到底是如何运行的，来吧，我们一起去看看"}, {"id": "6844903604600438797", "title": "初步了解Express(基于node.js的后端框架)", "desc": "Express：基于node.js的后端框架。介绍 2. npm init 3. npm i express -s 4. hello world 咋看上去跟使用node.js创建一个静态server有点像呢？emm因为express是基于node.js平台。 上面本质上其实就是…"}, {"id": "6844903713920794632", "title": "javascript函数全解", "desc": "本文总结了js中函数相关的大部分用法，对函数用法不是特别清晰的同学可以了解一下。 同其他语言不同的是，js中的函数有2种含义。 虽然普通函数和构造函数，含义有所不同，可是声明方法却完全一样。 函数表达式和普通函数声明的区别在于，普通函数声明会提升，函数表达式不会提升。 这种使用…"}, {"id": "6844903921761124360", "title": "使用puppeteer控制浏览器中视频播放", "desc": "本项目主要功能为在浏览器中自动播放视频，并且实现音量控制，快进快退，全屏控制，播放暂停控制等功能。 如果电脑上存在nodejs的环境，可以直接安装anywhere来访问index.html页面。 进入项目根目录，执行命令：anywhere，然后浏览器会自动打开http://lo…"}, {"id": "6844903730559582215", "title": "做了2个多月的设计和编码，我梳理了Flutter动态化的方案对比及最佳实现", "desc": "在端上为了提升App的灵活性， 快速解决万变的业务需求，开发者们探索了多种解决方案，如PhoneGap ，React Native ,Weex等，但在Flutter生态还没有好的解决方案。未来闲鱼都会基于Flutter 来跨端开发，如果突破发版周期，在不发版的情况下，完成业务需…"}, {"id": "6949918517017706527", "title": "node模块及模块引入实现原理", "desc": "一、es6Module和CommonJS规范1） 静态和动态es6Module是静态模块，可以在编译的时候分析依赖，支持tree-shaking。CommonJS是动态模块，在代码执行的时候才知道依赖"}, {"id": "6869602480494706702", "title": "HTML常考知识点", "desc": "本章先介绍一些HTML最基础的考点，很多大长面试官喜欢由浅入深地考察知识。而对于一些基础问题的回答，很多同学反而因组织不好语言而给面试官留下不好的印象。本章节我们就带大家一一整理和回顾。1.1DOCT"}, {"id": "6844903567262908429", "title": "WYSISYN编辑器 Prosemirror 入门", "desc": "编辑器一向是前端领域的一个难点，一款成熟的编辑器，需要涉及许多方面的东西。 至于为什么要踩这个天坑，是公司想要一个所见即所得的markdown编辑器，不需要markdown源码，要有用markdown语法一样的输入规则，最后还需要输出markdown文档作为存储，在次之上还需要…"}, {"id": "6844903645092282381", "title": "mpvue开发cnode社区问题记录", "desc": "1. vuex 的使用 2. 提示：单个 JS 文件的体积超过了 500KB，则会跳过 ES6 转 ES5 以及代码压缩的处理 9. 改变page 标签的css属性"}, {"id": "6844903582089609229", "title": "Node.js Require源码粗读", "desc": "最近一直在用node.js写一些相关的工具，对于node.js的模块如何去加载，以及所遵循的模块加载规范的具体细节又是如何并不是了解。这篇文件也是看过node.js源码及部分文章总结而来： 在es2015标准以前，js并没有成熟的模块系统的规范。Node.js为了弥补这样一个缺…"}, {"id": "6844903681259733006", "title": "NodeJS  stream 流 原理分析（附源码）", "desc": "在使用 fs 的 createReadStream 创建可读流时，返回了 ReadStream 对象，上面存在着一些事件和方法，其实我们在创建这个可读流的时候创建了某一个类的实例，这个实例可以调用类原型上的方法，我们这里将这个类命名为 ReadStream。 在类原型上的方法内…"}, {"id": "6902394098740101134", "title": "前端数据库 本地离线存储工具 PouchDB 简单入门（以Node.js场景为例）", "desc": "最近在做一个基于 Electron 和 Vue 的桌面应用程序的个人项目，需要在本地存储和展示本地音频文件的索引数据。过程中也是踩坑无数，跟大家分享一下这段经历。 离线存储，实现的方式有很多。最简单的便是我们熟悉的浏览器端离线存储，如 LocalStorage 和 Sessio…"}, {"id": "6903923548675375118", "title": "一种不错的 BFF Microservice GraphQL/REST API 层的开发方式", "desc": "云原生（Cloud Native）Node JS Express Reactive 微服务模板 (REST/GraphQL) 这个项目提供了完整的基于 Node JS / Typescript 的微服务模板，包括生产部署、监控、调试、日志记录、安全、CI/CD 所需的所有功能。…"}, {"id": "6900856531785351176", "title": "Node.js 多版本切换实践", "desc": "废话不多说，切入正题本人使用Cordova创建项目并添加平台时报如下Tips，会一直卡在这里原因是Node.js版本太高，需要降低版本实践方案： 使用Node版本管理工具n切换到低版本查看Node历史"}, {"id": "6919379818437935118", "title": "node导出pdf", "desc": "PhantomJs时一个服务器端的JavaScript API的WebKit，支持各种Web标准：DOM处理，CSS选择器，JSON，Canvas，SVG. 小伙伴可能会遇到导出的pdf无法显示中文，在本地开发很难发现，因为mac、windows开发环境都拥有字体库并支持中文。…"}, {"id": "6907534415937667079", "title": "node 接口开发指南", "desc": "标题关联了 node，主要因为 node 开启一个服务器是很简单，而且语法基本相同没有太多负担，这篇文章主要讲解思路，换算到其它语言也是可以的。 将上面代码复制到文件中，之后借助 node xxx.js 的形式就可以预览到效果了。 上面是借助 node 的 http 原生模块实…"}, {"id": "6844903565069123591", "title": "Webpack 4 不完全迁移指北", "desc": "在 webpack 3 发布 之后， webpack 团队向社区承诺，之后 webpack 主版本的迭代会有一个时间比较长且稳定的开发周期。而在2017年8月份的时候，webpack 团队从 master 分支切出了 next 分支用于 webpack 4 的开发，经历 5 个月"}, {"id": "6916390110808244238", "title": "Next.js + Typerom 实践 - 博客系统(一) 初始化项目", "desc": "最近用Next.js和typeorm完成了前端小白的第一个全栈项目，本文会记录我在做项目的过程中学习到的一些知识点，和遇到的那些奇奇怪怪的BugGithub-献上源码地址博客系统-献上预览地址，喜欢的"}, {"id": "6844904087222222862", "title": "技术开源项目从零到一的心路历程", "desc": "这是一次非常漫长过程，整个项目大约经历了2年的开发与维护，期间重大的重构了十几次架构。 所以我自己创建了这个项目，开始了这次开源项目之旅（受 springboot 与 laravel 的启发）。。。 框架不仅通过容器对模块进行了解耦，还可以利用容器的依赖管理能力，增强扩展的功能…"}, {"id": "6895742522195181582", "title": "一套代码发布多个微信小程序的实践", "desc": "之前接手了公司的一个微信小程序项目，上线了一段时间之后，需要以这个项目为基础再发布多个小程序。这些小程序的内容基本上都是一样的，只不过它们有不同的名称、主题、图标等等；或者，某几个小程序需要加一些定制化页面，功能等。本文主要记录下我从纯手工复制项目进化到使用命令行工具复制项目的…"}, {"id": "6904912763252899853", "title": "使用 Sequelize 更简单地操作数据库 - Node", "desc": "1. Sequelize 简单介绍 Sequelize 是一种 ORM 框架，ORM(Object Relational Mapping)即对象关系映射，它是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使…"}, {"id": "6977016485642403847", "title": "Node系列学习之简单博客前台(三)", "desc": "博客详情页面搭建的差不多了, 联调成功, 没啥大问题了, 使用了dayjs对博客发布时间进行了简单处理,不得不说,真挺好用~"}, {"id": "6844903607389814797", "title": "为 Node.js 应用建立一个更安全的沙箱环境", "desc": "在一些应用中，我们希望给用户提供插入自定义逻辑的能力，比如 Microsoft 的 Office 中的 VBA，比如一些游戏中的 lua 脚本，FireFox 的「油猴脚本」，能够让用户发在可控的范围和权限内发挥想象做一些好玩、有用的事情，扩展了能力，满足用户的个性化需求。 大…"}, {"id": "6844904042490003470", "title": "有趣的Nodejs模块：events", "desc": "Nodejs 使用了一个事件驱动、非阻塞 IO 的模型。events模块是事件驱动的核心模块。很多内置模块都继承了events.EventEmitter。 自己无需手动实现这种设计模式，直接继承EventEmitter即可。代码如下： 根据文档，应该 EventEmitter …"}, {"id": "6844903568424566797", "title": "node中的url常用方法解析", "desc": "如果urlStr不是字符串将会抛出TypeError。 如果auth属性存在但无法编码则抛出URIError。 作用：以一种 Web 浏览器解析超链接的方式把一个目标 URL 解析成相对于一个基础 URL。 虽然URL对象的toString()方法和href属性都可以返回URL…"}, {"id": "6844903666764234765", "title": "用node实现一个简单的聊天室—— 升级版", "desc": "添加用户登录、注册的功能， 添加查询聊天室成员的功能。在本章中， 通过token来进行用户识别， 通过mysql来保存用户信息， 将会用到egg的对应插件。 封装的IO， 很简略了。。 Sequelize -> sequelize 是一个广泛使用的 ORM 框架，它支持 MyS…"}, {"id": "6920508794598490119", "title": "手写一个 cli", "desc": "inquirer 一组常用的交互式命令行用户界面。"}, {"id": "6844903571113459726", "title": "Express源码级实现の路由全解析（上阕）", "desc": "阅读本文前可以先参考一下我之前那篇简单版的express实现的文章。 相较于之前那版，此次我们将实现Express所有核心功能。 在简单版Express实现中我们已经知道，将express引入到项目后会返回一个函数，当这个函数运行后会返回一个app对象。（这个app对象是原生h…"}, {"id": "6844904035808444429", "title": "全栈开发实战：基于Vue+Node.js+Mongoodb开发前后端项目", "desc": "前一段时间领导临时给了一个小需求，要做一个简单的会议报表，要满足会议表格内容的增删改查、文件的上传下载以及用户登录验证，于是趁着划水的时间写了一下，看着网上针对这一块的教程不是很多，所以写下了这篇文章，也算是入门全栈开发的一篇基础文章，大佬勿喷。 项目前端基于Vue，后端基于N…"}, {"id": "6944921928624766990", "title": "node应用热部署方案", "desc": "方案1：逐步重启worker进程具体实现：https://github.com/xuezier/egg-cluster-script问题：无法优雅的解决当前worker进程正在处理的请求，以及一些延时"}, {"id": "6911502868629422087", "title": "注册登录没有那么简单！探索加密解密的世界", "desc": "记得看我的年度打工总结：技术人年度总结|2020，注定不平凡今天的话题很简单也很常见，就是JS领域下的常用加密解密流程。加密我们从用户注册开始。一个新用户在表单下要注册一个新账号，当他在写入用户名时先"}, {"id": "6844903880187183117", "title": "摸鱼神器 Thief-Book", "desc": "Thief-Book 是一款真正的摸鱼神器，可以更加隐秘性大胆的看小说"}, {"id": "6994466313640869919", "title": "随笔：Node的流程控制", "desc": "Node的流程控制 什么是流程控制 串行控制的概念 串行控制应用场景 串行控制的手动实现 并行控制的概念 并行控制应用场景 并行控制的手动实现"}, {"id": "6844903634816204813", "title": "JavaScript 事件循环机制", "desc": "前端开发的童鞋应该都知道，JavaScript 是一门单线程的脚本语言。这就意味着 JavaScript 代码在执行的时候，只有一个主线程来执行所有的任务，同一个时间只能做同一件事情。 这是由其执行的环境是浏览器环境所决定的。试想一下如果 JavaScript 是多线程语言的话…"}, {"id": "6990947835633991688", "title": "Docker For开发：容器化Express应用", "desc": "前言 开发阶段容器化Express应用，运行采用nodemon。整个过程可以总结为以下三点： 使用 Dockerfile 定义应用程序的环境。 使用 docker-compose.yml 定义构成应用"}, {"id": "6844904100811931655", "title": "开发一个关于疫情信息的微信机器人", "desc": "请添加机器人【shayue-bot】，备注【疫情】，通过好友。 回复【疫情】，将自动回复疫情最为严重国家的疫情信息。 回复【意大利】或者其它国家，将自动回复该国家的疫情信息。"}, {"id": "6844903647373950989", "title": "前后台分离之数据模拟", "desc": "在 客户端 模拟数据，也就是在我们的前端项目中，使用js手写或者使用mockjs。使用这种方式的时候，不管怎么分离，代码中都会存在多余的东西，如独立开发时使用模拟数据，而前后台联调时就要注释掉之前的模拟数据，这样来回的切换，开发体验真的是很不爽有没有？ 在 服务器端 模拟数据，…"}, {"id": "6844903655745781773", "title": "用node实现一个简单的聊天室——websocket实践", "desc": "websocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议。大多数 Web 应用程序将通过频繁的异步JavaScript和XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源。而websocket能够很好的解决类似的问题。常用于即时通讯、监控等情…"}, {"id": "6844903664805478408", "title": "一个老同学的故事引发的nodejs 爬虫", "desc": "平静悠闲的日子，依然是钱少事多，此处想象一个表情。忽然有一天，故事就来了，一个做统计的美女老同学说她懒得自己复制粘贴，让我帮她爬虫获取一些文章的内容和制定段落的文字，他们做后续的数据统计和分析，这个忙我当然得帮了，虽然没爬过。。。哈哈，然后下班之后我就花了几个小时用自己比较熟悉…"}, {"id": "6844903560061124615", "title": "一步一步完成一个node-cli", "desc": "node-cli 即用nodejs与shell交互，完成指定工作的工具。他们通常是长这样的： 等等，我们实现的这个工具是为了拉取CavinHuang/webpack-multi-skeleton webpack 多页面骨架用于本地快速构建项目的脚手架工具，设想通过以下命令来实现…"}, {"id": "6945851334172082189", "title": "超详细Node.js入门适合新手（Nvm，进程与线程，模块化，NPM）", "desc": "以前JavaScript的代码都是由==客户端游览器解析==，运行环境是游览器，游览器有安全级别限制。所以没有操作磁盘⽂件IO以及⽹络编程，处理⽹络请求，搭建HTTP服务器等功能操作。有了node.js，JavaScript不仅能完成如上功能，还能跨平台运行，在服务器端运行。j…"}, {"id": "6898951562333257736", "title": "node编写一款适合自己的部署插件", "desc": "插件需实现服务器的增删查就需要对服务器进行存储，故在本地创建data.json进行数据存储。数据格式: 使用commander对指令进行定于，-a为添加操作，-l为列表操作，-rm为删除操作。 fs将通过inquirer获取参数对data.json进行增删查。注：nodejs的…"}, {"id": "6977771173362794503", "title": "Node服务器与AJAX复习第六天", "desc": "这是我参与更文挑战的第25天，活动详情查看：更文挑战 Session Cookie已经可以保持登录状态了，但是不安全。 于是又引入了Session。 Cookie是存储在前端的，而Session是存储"}, {"id": "6844903681255538695", "title": "NodeJS Stream（可读流、可写流） API解读", "desc": "在 NodeJS 中，我们对文件的操作需要依赖核心模块 fs，fs 中有很基本 API 可以帮助我们读写占用内存较小的文件，如果是大文件或内存不确定也可以通过 open、read、write、close 等方法对文件进行操作，但是这样操作文件每一个步骤都要关心，非常繁琐，fs …"}, {"id": "6844904045765722126", "title": "对象关系映射 Sequelize 入门", "desc": "可见在 Node.js 环境中使用 Sequelize 是再自然不过的事了，接下来就通过一些简单的例子来学习一个 Sequelize 的使用。 1. 数据库链接 2. 定义数据模型 3. 创建同步表到数据库 上图中 createAt 和 updateAt 是 Sequlize …"}, {"id": "6899285493608169479", "title": "Node服务器启用Gzip压缩", "desc": "我们看到文本类文件的压缩效果非常显著，但是图片体积没变。看一下文本类的http响应头是有gzip压缩过: 这是因为一般对于图片(png,jpg等)使用gzip的效果不好甚至恰得其反，所以一般都默认对图片不进行gzip压缩。 其他的功能请参考compression的文档。 ngi…"}, {"id": "6844904096646823944", "title": "koa2统一接口返回格式导致接口异常的问题记录", "desc": "。。。 。。。 。。。"}, {"id": "6844903858443911176", "title": "理解 Node.js 的 GC 机制", "desc": "随着 Node 的发展，JavaScript 的应用场景早已不再局限在浏览器中。本文不讨论网页应用、命令行工具等短时间执行，且只影响终端用户的场景。由于运行时间短，随着进程的退出，内存会释放，几乎没有内存管理的必要。但随着 Node 在服务端的广泛应用，JavaScript 的…"}, {"id": "6844903609893650440", "title": "基于vue实现的双向数据绑定", "desc": "vue通过Object.defineProperty()来劫持各个属性的setter，getter；每个数据在修改时，会自动调用setter，在获取它时，会自动调用getter。 关于vue的双向数据绑定，以下链接的这篇博文讲的还不错，以下是思路整理和对他的代码进行的一些注释。…"}, {"id": "6844903606601121800", "title": "Jenkins 构建 Exec timeout!", "desc": "利用 Jenkins 做自动化构建是方便又省时的，只需简单的配置就能够完成前后端项目的部署。 其中的第 2、3 步是比较耗时的。这里主要因为第 3 步的构建时间完全有可能超过 Jenkins 设置的构建时间（120000 ms），导致 Jenkins 构建超时而中断。 每个构建…"}, {"id": "6876988999068549128", "title": "Node学习笔记 - Koa2 简易服务搭建", "desc": "使用Koa2可以快速的搭建一个简单的Node服务器HelloKoa2使用npminit创建package.json安装koa依赖根目录下新建index.js浏览器访问http://localhost:"}, {"id": "6844903698385092622", "title": "用Node写页面爬虫的工具集", "desc": "Puppeteer是一个Node库，它提供了一个高级 API 来通过 DevTools协议控制Chromium或Chrome。简单点说，就是使用Node命令控制一个无需渲染至用户界面的浏览器。 与使用PhantomJS搭配Python进行爬虫抓取类似，其原理也是去完全地模拟一个…"}, {"id": "6844903668379025416", "title": "【Node】简单快捷的图片压缩脚本", "desc": "原文地址：https://github.com/HuJiaoHJ/blog/issues/11在写个人博客时，经常需要使用到图片，为了优化文章的阅读体验，需要对图片进行压缩，现在有很多好用的图片压缩网"}, {"id": "6844903591208026120", "title": "使用 Async / Await 来编写简明的异步代码", "desc": "以前，JavaScript项目会逐渐‘失去控制’，其中主要一个原因就是采用传统的回调函数处理异步任务时，一旦业务逻辑比较复杂，我们就难免书写一些冗长、复杂、嵌套的代码块（回调地狱），这会严重降低代码的可读性与可维护性。现在，JavaScript提供了一种新的语法糖来取代回调函数…"}, {"id": "6844903827703873550", "title": "谨慎使用toLocaleString!!!", "desc": "1. toLocaleString相关背景 2. 坑 本地node.js 11.13输出, 怪不得本地调试是好的.... 3. 具体原因: 国际化支持 虽然和预期2019-4-21 09:13:13有点区别... 还是能说明有效吧- - 4. 小结"}, {"id": "6844903841125646350", "title": "Express教程05：Cookie", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 Cookie存储在浏览器，在浏览器请求服务器时，其中的数据都会被发送到服务端，常用来做用户信息校验等。 但由于Cookie存储在浏览器，容易受到篡改，安全性较差。 使用cookie-parser中间件时，需要先通…"}, {"id": "6844904077474676743", "title": "【小技巧】package.json中homepage属性的作用", "desc": "package.json 其实还有很多属性可以配置的，这里就介绍一个 homepage 属性的作用。 homepage 的作用是设置应用的跟路径，我们的项目打包后是要运行在一个域名之下的，有时候可能是运行在跟域名下，也有可能运行在某个子域名下或或域名的某个目录下，这时候我们就需…"}, {"id": "6844903872104759303", "title": "个人网站构建记录", "desc": "想过要做个人网站，由于感觉过程特别繁琐及技术原因一直拖着，6.18买了个服务器，所以just do it不然有点浪费。 做了个简易版的网站，写这篇文章主要是为了梳理一下自己的思路，主要涉及:mysql，node，axios请求，vue打包文件上传到服务器，nginx，pm2管理…"}, {"id": "6844903716315725832", "title": "# NodeJs 实战——原生 NodeJS\b 轻仿 Express 框架从需求到实现（一）", "desc": "这篇文章是一个系列的文章的第一篇，主要是自己实现一个express的简易版框架，加深对nodejs的理解。 github地址欢迎拍砖。 在浏览器上打开http://localhost:3000，网页将显示 Hello World。 由 Hello World 实例分析，我们可以…"}, {"id": "6844903712310181895", "title": "微信公众号支付开发手记（node）", "desc": "总结一下最近业务开发中对微信公众号支付的开发过程，微信支付的开发前提是已经具备可上线微信公众号开发的基础上进行的，如果你的开发阶段目前停留在起步，建议参考这篇文章开始。 好了，来聊一聊微信支付。不论是今天的分享，还是网上其他的分享，开头总是在吐槽微信的文档。我也不例外，刚开始总…"}, {"id": "6844903638524149768", "title": "Node.js 中的模块机制", "desc": "日常经常使用 node 中的模块，当我们遵循 dry 原则，将一些逻辑独立封装成一个可供复用的模块的时候，有可能往往会忽略 node 模块本身的知识。 我们在开发的时候经常使用了 require 方法, 但是可能会忽略它内部的细节. 到底 require 的时候 node 是怎…"}, {"id": "6844903949586153485", "title": "基于Node.JS脚手架express-generator,生成express项目", "desc": "Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。 Express基于Node.js封装的，快速、开放、极简的 Node.js Web 开发框架。它通过中间件和路由让程序的组织…"}, {"id": "6844903953985961998", "title": "从0搭建脚手架（上）", "desc": "#!/usr/bin/env node，这一行是必须加的，就是让系统动态的去PATH目录中查找node来执行你的脚本文件。"}, {"id": "6914947449530351623", "title": "Node + Express+ Mysql + Jsonwebtoken 实现登陆token检验", "desc": "创建一个空项目，npm init -y 加载 package.json 文件。 然后添加几条数据测试用。"}, {"id": "6844903650456764424", "title": "记表格设计规范整理与页面可视化生成工具开发", "desc": "公司有一个项目在维护，大概有300左右，其中表单与表格的页面占比大概百分之五六十，为了节省开发时间，避免多人协作时，出现多套冗余代码，我们尝试写了一下表单和表格的生成工具，从梳理到规范学习再到总结，收获很多，写一下笔记与大家分享。 1. 表格生成 2. 表格预览 1. 选择生成…"}, {"id": "6844903581393354765", "title": "关于前端模块化 CommonJS、AMD、CMD、ES6中模块加载", "desc": "ES6之前，Javascript并没有模块体系。但是实际开发中，为了更高效的开发，我们需要模块化编程开发，也就产生了几类模块化标准。 其原理是异步加载模块，模块的加载不影响其后面语句的运行。所有以来这个模块的语句都会添加进一个回调函数中，等到模块加载完成，回调函数就会执行。"}, {"id": "6844903502695628814", "title": "浅谈前后端分离与实践（一）", "desc": "一、起源（故事纯属虚构，如有雷同，纯属巧合）传说在很久很久以前，我们有志之士有了个创业的想法，于是乎开始了自己的创业之梦，但是人手不足啊，于是乎所有角色老子一个人全包了：Roles: PM, DBA, RD, FED, Designer, ...Skills: Linux, M…"}, {"id": "6916688901487165454", "title": "child_process让nodejs不再孤单", "desc": "exec 执行命令,它的返回值是一个对象,类似Event类的实例,可以通过on监听exit事件,回调函数中嵌入一个code返回退出码。 执行命令时,child_process会令一个子进程去运行字符串的命令,在window和linux下可以运行和系统有关系的独特的命令,比如ls…"}, {"id": "6949084159801294855", "title": "如何写好eggjs单元测试", "desc": "如何写好eggjs单元测试前言笔者在平时面试前端同学时，经常遇到候选人有nodejs开发经验，但是很少有编写单元测试。希望写下这篇文章，让大家多重视单元测试，交付高质量的代码。为什么要单元测试如测试金"}, {"id": "6857308818092032007", "title": "极简 Node.js 入门系列教程 —— 1.1 Node.js 是什么", "desc": "对应到 Java 我们可以理解 Node.js 是 JDK，装上就能在服务端跑 JavaScript 代码了。"}, {"id": "6844903821492109325", "title": "Sequlize详解（一）", "desc": "众所周知，Node的出现赋予了前端开发人员更大的权利，更强的能力。Sequelize就是这个强大能力中的一部分，它是一个ORM，可以将数据库中的表单数据映射成js对象，让我们可以通过javascript来方便快捷的操作数据库。 想要使用数据库，首先需要连接到这个数据库。 Seq…"}, {"id": "6844903544173101063", "title": "iKcamp｜基于Koa2搭建Node.js实战（含视频）☞ 代码分层", "desc": "在前面几节中，我们已经实现了项目中的几个常见操作：启动服务器、路由中间件、Get 和 Post 形式的请求处理等。现在你已经迈出了走向成功的第一步。 目前，整个示例中所有的代码都写在 app.js 中。然而在业务代码持续增大，场景更加复杂的情况下，这种做法无论是对后期维护还是对…"}, {"id": "6844904090107904007", "title": "让运行在 Docker 中的 Ghost 支持Aliyun OSS", "desc": "最近在优化 Ghost 作为线上使用的内容管理后台，作为线上使用的系统，不同于内部 MIS ，可靠性和应用性能需要有一定保障。 解决性能问题，最简单的方案便是进行水平扩展，而我们知道，如果想要让一个服务做到水平可扩展，除了要将应用运行状态单独持久化外，也必须做到文件储存的持久化…"}, {"id": "6844903717729206280", "title": "Node 框架接入 ELK 实践总结", "desc": "我们都有过上机器查日志的经历，当集群数量增多的时候，这种原始的操作带来的低效率不仅给我们定位现网问题带来极大的挑战，同时，我们也无法对我们服务框架的各项指标进行有效的量化诊断，更无从谈有针对性的优化和改进。这个时候，构建具备信息查找，服务诊断，数据分析等功能的实时日志监控系统尤…"}, {"id": "6971824988932440071", "title": "Node.js 入门系列（七）Express 框架", "desc": "目前比较流行的 Node.js 框架有 Express、Koa 和 Egg.js，无论是哪个 Node.js 框架，都是基于中间件来实现的，而中间件的执行方式就需要依据洋葱模型。"}, {"id": "6981749775787884557", "title": "node实现静态文件缓存", "desc": "缓存 浏览器缓存(Brower Caching)是浏览器对之前请求过的文件进行缓存，以便下一次访问时重复使用，节省带宽，提高访问速度，降低服务器压力 缓存位置分类 memory cache:内存中的缓"}, {"id": "6922837754330480654", "title": "2021年了，该会日志脱敏了吧（Node篇）", "desc": "server.log.2021.01.28.1、server.log.2021.01.28.2、server.log.2021.01.29... 上述的功能对于一般场景来说就已经完全足够了🤪，对于winston的其他功能，这里就不一一叙述了，具体可以到Github上面查看相关…"}, {"id": "6994404947655655431", "title": "手写Express核心原理，再也不怕被问Express原理", "desc": "一、首先安装express 安装express是为了示范。 二、创建example.js文件 如代码所示，执行node example.js就运行起了一个服务器。 如下图所示，现在我们决定创建一个属于"}, {"id": "6844903696254533640", "title": "首页白屏的引发的思考(一)", "desc": "现在的前端框架， React、Vue、Angular 三大巨头已经占据了主导地位，市面上大多数前端应用也都是基于这三个框架或库完成，这三个框架有一个共同的特点，都是 JS 驱动，在 JS 代码解析完成之前，页面不会展示任何内容，也就是所谓的白屏。 用户是极其不喜欢看到白屏的，什…"}, {"id": "6844903775937757192", "title": "真-Node多线程", "desc": "一般人理解 Node 是单线程的，所以 Node 启动后线程数应该为 1，我们做实验看一下。 可以看到 Node 进程占用了 7 个线程。为什么会有 7 个线程呢？ 我们都知道，Node 中最核心的是 v8 引擎，在 Node 启动后，会创建 v8 的实例，这个实例是多线程的。…"}, {"id": "6844903959333748749", "title": "国庆七天乐，Node来敲门", "desc": "一转眼九月又过去了，最近没怎么写博客是因为事情太多了，感觉心一直在路上，从来没有时间停下来栖息。从毕业到现在，刚入职便被大量的业务需求所围绕。看到排期已经排到明年的时候我陷入了沉思，曾幻想着利用工作之余的时间做一些自己喜欢做的事。慢慢的发现弱小的身体根本支撑不住。很早买的《深入…"}, {"id": "6844904146303205384", "title": "这份nodejs实现的定时爬取微博热搜程序，请查收！", "desc": "青春是回不来了，倒是要准备渡过在西安的第三个夏天了。 我发现，自己对 coding 这件事的称呼，从敲代码 改为 写代码 了。 emmm....敲代码，自我感觉，就像是，习惯了用 const 定义常量的我看到别人用 var 定义的常量。 写代码 这三个字，显得更为优雅一些，更像…"}, {"id": "6844903590910263309", "title": "前端必会的抓包工具", "desc": "说到抓包这个问题，很多初级的前端都不太能意识到这个问题，虽然本人也就是个小菜，但是对于抓包工具可以说是熟练掌握了，因为有过太多接口的问题被测试指派了我，那么如果熟练掌握了抓包不仅能快速定位出问题，还能分析网络请求，以及一些前端逻辑的问题导致接口多次触发等现象。 所以一个合格的前…"}, {"id": "6844903781889474567", "title": "Node.js环境性能监控", "desc": "随着Node v11.0 release版本的发布，Node已经走过了很多年。基于Node产生了很多服务端框架，来帮助我们独立于后端进行前端工程的开发和部署。 业务逻辑的迁移，以及各种MV*框架的服务端渲染模型的出现，让基于Node的前端SSR策略更依赖服务器性能。首屏直出性能…"}, {"id": "6992955748141514788", "title": "做一个CLI版的时间管理工具（四）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6844903518390714381", "title": "如果有人问你爬虫抓取技术的门道，请叫他来看这篇文章", "desc": "web是一个开放的平台，这也奠定了web从90年代初诞生直至今日将近30年来蓬勃的发展。然而，正所谓成也萧何败也萧何，开放的特性、搜索引擎以及简单易学的html、css技术使得web成为了互联网领域里最为流行和成熟的信息传播媒介；但如今作为商业化软件，web这个平台上的内容信息…"}, {"id": "6855129008066002958", "title": "从 0 到 1 node 项目管理系统： Gitlab Api", "desc": "DevOps（Development 和 Operations 的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。 它是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作…"}, {"id": "6905937594152910856", "title": "如何删除电脑上的 node_modules", "desc": "作为前端开发人员，我们使用 npm 来管理开发和运行时的依赖关系。当运行 npm 或是 yarn 时会下载百兆字节的 node_modules,当我们做的项目越多，存储的 node_modules 越多，导致电脑开始变得卡顿。 软件包 npkill 列出了系统中的每一个 nod…"}, {"id": "6844903606122971144", "title": "浅入浅出webpack", "desc": "准备了挺久，一直想要好好深入了解一下Webpack，之前一直嫌弃Webpack麻烦，偏向于Parcel这种零配置的模块打包工具一些，但是实际上还是Webpack比较靠谱，并且Webpack功能更加强大。由于上一次学习Webpack的时候并没有了解过Node.js，所以很多时候真…"}, {"id": "6994448912857710606", "title": "做一个CLI版的时间管理工具（八）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6993687628272910372", "title": "如何在 Node.js 中使用 ES6 导入语法", "desc": "Node.js 应用由模块组成，其模块系统采用 CommonJS 规范，它并不是 JavaScript 语言规范的正式组成部分。 在 CommonJS 中，有一个全局性方法 require()，用于加"}, {"id": "6991648492544327693", "title": "Node.js零基础小白入门(二)", "desc": "本文主要写了创建web服务器的基础结构。但请求方式为get和post时服务器是如何获取请求参数的，以及获取动态和静态资源"}, {"id": "6927174002259525645", "title": " 浅谈Nodejs中的流", "desc": "流（Stream）在NodeJs中是个十分基础的概念，很多基础模块都是基于流实现的，扮演着十分重要的角色。流是一个十分难以理解的概念，同时相关的文档又比较缺少，对于NodeJs初学者来说，理解流往往需要花很多时间理解，才能真正掌握这个概念，所幸的是，对于大部分NodeJs使用者…"}, {"id": "6866973719634542606", "title": "深入Node.js的模块加载机制，手写require函数", "desc": "模块是Node.js里面一个很基本也很重要的概念，各种原生类库是通过模块提供的，第三方库也是通过模块进行管理和引用的。本文会从基本的模块原理出发，到最后我们会利用这个原理，自己实现一个简单的模块加载机制，即自己实现一个require。 老规矩，讲原理前我们先来一个简单的例子，从…"}, {"id": "6844903778194292744", "title": "node中的CommonJS", "desc": "CommonJS 是一种使用广泛的JavaScript模块化规范，核心思想是通过require方法来同步地加载依赖的其他模块，通过 module.exports 导出需要暴露的接口。 在CommonJS规范中，存在require()方法，这个方法接受模块标识，以此引入一个模块的…"}, {"id": "6844903589199151118", "title": "断点续传了解一下啊？", "desc": "这样一个简单的服务器端就写好了。 代码非常浅显易懂。 最后我们在同级目录下创建一个con.txt文件。用node执行一下客户端文件，就会实现功能啦。 Etag（Entity Tags）主要为了解决 Last-Modified 无法解决的一些问题。 一些文件也许会周期性的更改，但…"}, {"id": "6919398897743986702", "title": "零宽字符文本水印原理", "desc": "如果要搞清楚这句正则是干什么的，就需要了解到零宽空格了。 我们不难查到，零宽空格会延伸到零宽连字。 具体例子可以看到wiki上的例子。 我们常见的有图片水印，软件水印，视频水印等。那文本上的水印要是什么样子呢？ 文本中间穿插文案，比如这是一段[xxx.com]示例文案，说明这句…"}, {"id": "6844903939293331469", "title": "MVC模式构建NodeJS+Express+Mysql纯后端项目", "desc": "最近在自己撸一个完整项目，突然想用node来写后端的接口。 找了找网上的资料，发现大部分都是ssr，很少有人写类似的文章来说纯node的后端项目目录结构应该如何搭建。 因此尝试在这里采用传统后端的MVC模式，结合自己的项目总结一篇从零搭建的文章，如有不足，还请大佬指教🙏。 关…"}, {"id": "6844903646572838919", "title": "使用继承思想，去开发一款组件（element-ui collapse组件为例子）", "desc": "然后就报错了，呼~ 报错在于，collapse-item组件。 可以看到计算属性isActive通过父级activeNames来定义的，然而现在组件的层级结构是这样。 collapse-item的父级是draggable， 肯定拿不到原本collapse的父级。 通过this.…"}, {"id": "6948597203564756999", "title": "Node的模块儿查找机制", "desc": "在Node中，模块儿可以分为两大类，一类是Node提供的模块成为核心模块；另一类是用户编写的模块，成为文件模块。 核心模块在Node源码编译的过程中，编译进了二进制执行文件中。当Node进程启动时，核心模块儿会直接被加载到内存中，所以核心模块引入时，文件定位和编译执行这两个步骤…"}, {"id": "6844903959249813517", "title": "python 对象池", "desc": "一个奇怪的特性这个学期学校又重新开始了python的学习，我大一的时候就自学过python所以就在自己看书复习快忘光的知识，在看书过程中发现了一个奇怪的特性，在交互式编程框中输入：书中说CPython"}, {"id": "6945380503063281701", "title": "初次实践lerna项目管理工具", "desc": "这是一篇初次实践lerna过程的笔记，记录了实践过程中遇到的坑，以及填坑方法。 要开始lerna的实践，需要先做好准备工作。 2、账号准备：这里直接使用官网账号，需要在npm官网注册账号，还要在github上注册用户并新建git仓库。如果业务需要，也可以自己搭建私库npm和gi…"}, {"id": "6844904094369349639", "title": "浏览器和 node 中的 Event Loop", "desc": "众所周知，JavaScript 这门语言是单线程的。那也就是说，JavaScript 在同一时间只能做一件事，后面的事情必须等前面的事情做完之后才能得到执行。 JavaScript 单线程这件事乍一看好像没毛病，代码本来就是需要按顺序执行的嘛，先来后到，后面的你就先等着。如果是…"}, {"id": "6844903778446131214", "title": "12_Node.js Web 开发_博客网站", "desc": "我是通过《Node.js开发指南》这本书来学习 Node.js Web 开发的，书中使用的 Express 框架是 2.5.8，而我的是 4.14.1，所以遇到了许多问题，在文章中我都有提到并讲解。 《Node.js开发指南》中建立项目的方式是：express -t ejs m…"}, {"id": "6844903725111181319", "title": "koa2 一网打尽（基本使用，洋葱圈，中间件机制和模拟，源码分析(工程，核心模块，特殊处理)，核心点，生态）", "desc": "koa2 从基础使用， 手把手创建一个可运行项目，到基本 api 梳理，洋葱圈模式和一个简易实现模型，再到源码分析，源码分析涵盖： 工程，核心模块，特殊处理【委托，中间件机制，易用性处理，】，异常捕获，中间件交互，核心点，生态等多个方面。 全文较长，有什么意见欢迎提到 issue"}, {"id": "6844903602352308231", "title": "async函数，了解一下", "desc": "ES7提供了async函数，使得异步操作变得更加方便。async函数是什么？一句话，async函数就是Generator函数的语法糖。 写成async函数，就是下面这样。 一比较就会发现，async函数就是将Generator函数的星号（*）替换成async，将yield替换成…"}, {"id": "6844903945278603277", "title": "使用 Daze.js 开发 Node 应用 - 介绍篇", "desc": "更多... 更多 ..."}, {"id": "6844903576855281672", "title": "详解promise", "desc": "JavaScript 和 node 都是单线程非阻塞的运行方式，所以会出现一个异步回调的问题。promise就是为了解决这类问题"}, {"id": "6844903591979778061", "title": "【翻译】ES modules：通过漫画进行深入理解", "desc": "ES modules 给 JavaScript 带来了一个官方的规范的模块化系统。将近花了10年的时间才完成了这个标准化的工作。 我们的等待即将结束。随着 Firefox 60 在今年5月的发布(目前是测试阶段)，所有的主流浏览器都将支持 ES modules，与此同时，Nod…"}, {"id": "6887369215121031182", "title": "Koa2系列第二篇：中间件", "desc": "第一篇介绍了生成器目录设计。 接下来学习Koa2的中间件。 Koa2本身只能算一个极简的HTTP服务器，自身不内置中间件，但是提供中间件内核。中间件是Koa2的核心，因此需要熟练掌握。 你可以把一个HTTP请求理解为水流，而各种各样的中间件类似各种管道，它会对水流进行处理。每个…"}, {"id": "6844903604055179277", "title": "一个基于koa2的微信开发中间件koa-easywechat，开箱即用", "desc": "​ 功能：获取accessToken。因为调用accessToken的接口每天的调用频率是有上限的，不能频繁调用，所以这里实现了accessToken的自管理，开发者不必关心accessToken是否过期，过期之后会自动去微信服务器请求并更新最新的accessToken。 ​ …"}, {"id": "6844903858175492103", "title": "Express教程06：Session（完结）", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 Session存储在服务器，但它并不独立使用，而是与Cookie或配合使用。 也就是说，在Cookie中存储了一个ID，服务端在接收到Cookie时对ID进行校验，只有通过校验才可以进行下一步处理，否则将让用户重…"}, {"id": "6844903817520087047", "title": "Next.js 脚手架进阶 —— Zeit Now部署", "desc": "好久没写文章了，最近也没有学什么，有点荒废。尝试着学习一些新东西，GraphQL、Gatsby、Netlify等（可能对很多人来说不是新东西了）。其中学到Netlify的时候发现，很适合部署静态网站，所以就尝试着部署了一下，发现还真是简单，只需要填写几个命令就可以完成静态站点的…"}, {"id": "6844903583553421320", "title": "浅谈event loop", "desc": "JavaScript的主要用途主要是用户互动，和操作DOM。如果JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时这两个节点会有很大冲突，为了避免这个冲突，所以决定了它只能是单线程，否则会带来很复杂的同步问题。此外HTML5提…"}, {"id": "6844903976278704142", "title": "教你在 Node.js 项目中接入 Sign with Apple 第三方登录", "desc": "在 WWDC19 大会上，苹果公司推出了一项有意思的内容，即 “Sign In with Apple”。这项由苹果提供的认证服务，可以让开发者允许用户使用 Apple Id 来登录他们的应用程序，Sign In with Apple使用OAuth登录授权标准。 本文将介绍使用苹…"}, {"id": "6998371338582769694", "title": "Node.js   require() 查找规则", "desc": "require(X) 1. X 是一个核心模块，比如path/http 2. X 是以./或../ 或 /(根目录)开头的 3. 直接是一个X（没有路径），并且X不是一个核心模块。 在 D:\\百度云盘"}, {"id": "6919664839224721416", "title": "1 分钟上手，在容器中运行 Visual Studio Code", "desc": "这个插件允许我们在容器中运行 Visual Studio Code。 在项目的根目录中，您需要创建一个名为 .devcontainer 的文件夹。我们将在此处存储环境设置。 然后在此文件夹中创建两个文件，devcontainer.json 和一个 Dockerfile。 命名很…"}, {"id": "6844903510954213389", "title": "babel-preset-env升级迁移完全指北", "desc": "在9月份Babel宣布ES2015/ES2016/ES2017等等ES20xx时代的presets通通被废弃，取而代之的是babel-preset-env，并且承诺它将成为“未来不会过时的（future-proof）”解决方案。所以当我们再重新安装这些es20xx包的时候通通会…"}, {"id": "6863021082572488711", "title": "极简 Node.js 入门系列教程 —— 3.2 文件读取", "desc": "> 在 POSIX 每个打开的文件系统都分配了一个称为文件描述符的数字。 文件系统操作使用文件描述符来标识和跟踪每个特定的文件。一旦被分配，则文件描述符可用于从文件读取数据、向文件写入数据、或请求关于文件的信息 position：从文件中开始读取数据的位置；如果 positio…"}, {"id": "6844903984478552078", "title": "NodeJS 支付宝网站支付 Demo 开发", "desc": "验签的作用是在当用于支付成功后，支付宝异步向服务器设置好的回调地址发送 post 请求，用来告知服务器用户的支付信息，而且服务器最终也是依据这个异步通知来处理逻辑业务，而不是靠支付宝的同步跳转，并且当支付宝发送了异步通知请求后，服务端需要做验证检查，这一步是必须的，因为涉及金钱…"}, {"id": "6914220304575234055", "title": "Node.js 使用 pinyin 汉字转拼音", "desc": "使用npm安装pinyin包测试数据，使用pinyin转换为拼音多音字设置转换拼音风格设置提取转换后的拼音扩展：[JS数组扁平化]"}, {"id": "6844903838617436167", "title": "Node.js 宣布一个新的 --experimental-modules【译】", "desc": "在2017年，Node.js 8.9.0发布了对ECMAScript模块的实验性支持。这种ECMAScript模块的支持是需要在后面加上--experimental-modules标识来运行。 现在，主流浏览器都能通过<script type=”module”>标签支持ECMA…"}, {"id": "6913609682976243719", "title": "Koa", "desc": "koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅…"}, {"id": "6844903716236034061", "title": "Web 安全漏洞之 XSS 攻击", "desc": "编者说：作为JS系工程师接触最多的漏洞我想就是 XSS 漏洞了，然鹅并不是所有的同学对其都有一个清晰的认识。今天我们请来了@卢士杰 同学为我们分享他眼中的 XSS 漏洞攻击，希望能帮助到大家。 XSS（Cross-Site Scripting）又称跨站脚本，XSS的重点不在于跨…"}, {"id": "6844903654667845645", "title": "H5 六边形消除游戏开发", "desc": "试玩地址，目前只适配pc端。源码 六边形游戏的鼻祖应该是这个 hex-frvr，原作者开发用的是 pixi 游戏引擎，本着快速开发的理念，本游戏采用 cocos creator，UI 延用 hex-frvr。学习过程中，有借鉴各路实现。此源码仅供学习使用，谢谢。 六边形游戏本质…"}, {"id": "6844903667913457671", "title": "实现前后端分离的心得", "desc": "对目前的web来说，前后端分离已经变得越来越流行了，越来越多的企业/网站都开始往这个方向靠拢。那么，为什么要选择前后端分离呢？前后端分离对实际开发有什么好处呢? 在以前传统的网站开发中，前端一般扮演的只是切图的工作，只是简单地将UI设计师提供的原型图实现成静态的HTML页面，而…"}, {"id": "6844903607439982599", "title": "深入理解webpack如何解析代码路径", "desc": "直接引入模块名，会查找当前文件目录，父级目录直至根目录下的 node_modules(默认) 文件夹，看是否有对应名称的模块。 了解上述的路径形式和最终的解析规则后，根据我的一些标识，大致上也能够看出webpack路径配置的发挥空间了。 接下来将着重对resolve中alias…"}, {"id": "6844903669071085575", "title": "《从零构建前后分离web项目》探究 - 深入聊聊前后分离架构", "desc": "我们随意在 Github 输入前后分离关键字，看下搜索的结果: 1K 的库 11k 的 Issues 足以说明前后分离的趋势，可以想象激烈程度，业界比较有名的讨论：Web 前后端分离的意义大吗？，值得一提的是：前排对于这个问题讨论比较深刻的大部分都是全栈工程师。因为全栈对全局的…"}, {"id": "6844903661223542798", "title": "Node JS Buffer使用理解", "desc": "JavaScript 起初为浏览器而设计，没有读取或操作二进制数据流的机制。Buffer类的引入，则让NodeJS拥有操作文件流或网络二进制流的能力。 Buffer 对象的内存分配不是在V8的堆内存中，而是Node在C++层面进行内存申请，可以理解为在内存中单独开辟了一部分空间…"}, {"id": "6844903715250389006", "title": "Webpack之模块化优化", "desc": "当然，相信了解过前端模块化发展历史的童鞋，都应该听过IIFE、AMD、CommonJS等等，它们都是能够实现模块化的规范，直到ES2015出来后，才正式把模块化纳入其标准中。在谈到今天主题前，我们先简单讲解一下上面几种模块化方式的实现以及区别，对于后面将要讲到的webpack模…"}, {"id": "6928380243015106568", "title": "Node专栏-path（路径）模块", "desc": "path模块提供了一些实用工具，用于处理文件和目录的路径。 path.basename() 方法会返回path的最后一部分，类似于 Unix的 basename命令。 尾部的目录分割符会被忽略。 尽管 Windows 通常以不区分大小写的方式处理文件名（包括文件扩展名），但是此…"}, {"id": "6844903712935116807", "title": "React和Vue中，是如何监听变量变化的", "desc": "把react源码和自己刚刚创建的项目关联起来，之前build源码到build文件夹下面，然后cd到react文件夹下面的build文件夹下。里面有node_modules文件夹，进入此文件夹。发现有react文件夹和react-dom文件夹。分别进入到这两个文件夹。分别运行ya…"}, {"id": "6844903680311984136", "title": "「译」如何使用 NodeJS 构建基于 RPC 的 API 系统", "desc": "API 在它存在的很长时间内都不断地侵蚀着我们的开发工作。无论是构建仅供其他微服务访问的微服务还是构建对外暴露的服务，你都需要开发 API。 目前，大多数 API 都基于 REST 规范，REST 规范通俗易懂，并且建立在 HTTP 协议之上。 但是在很大程度上，REST 可能…"}, {"id": "6911007414527459341", "title": "Node.js基础", "desc": "返回路径中最后一个 . 之后的部分 如果一个路径中并不包含 . 或该路径只包含一个 . 且这个 . 为路径的第一个字符，则此命令返回空字符串 此方法向服务器发送信号，指示所有响应头和主体已发送。该服务器应认为此消息已完成。response.end()必须在每个响应上调用方法，否…"}, {"id": "6977286998126968862", "title": "NodeJs从入门到实战", "desc": "NodeJs从入门到实战 作为一名热爱学习的前端工程师，想要获得更大的成长，除了积累原生JavaScript的相关知识，还是有必要掌握后端开发的，这样是从一个全端开发工程师彻底转变成大前端的一个必经之"}, {"id": "6844904058747093000", "title": "🔥Nodejs实战系列：数据加密与crypto模块", "desc": "nodejs 中的 crypto 模块提供了各种各样加密算法的 API。这篇文章记录了常用加密算法的种类、特点、用途和代码实现。其中涉及算法较多，应用面较广，每类算法都有自己适用的场景。为了使行文流畅，列出了本文记录的几类常用算法： 散列函数（英语：Hash function）…"}, {"id": "6844903698322178061", "title": "Node.js 服务连接 MongoDB 处理最佳实践", "desc": "关于如何处理 node.js 服务连接 MongoDB，我查阅了大量中英文资料，发现并没有太适合我所期望的能力的方案，因此经过一番官方文档的研究，总结了以下的连接 MongoDB 的方法（使用目前 Node.js 平台最常用的 MongoDB ODM mongoose），斗胆称…"}, {"id": "6987263225139626021", "title": "PM2 部署 ecosystem.json 配置", "desc": "一、node项目部署流程 二、配置部署脚本文件 三、配置Nginx的server 四、开启防火墙 打开 sudo vi /etc/iptables.up.rules sudo iptables-res"}, {"id": "6844903545578192904", "title": "Node.js 最佳实践 —— 如何在 2018 年成为更好的 Node.js 开发者", "desc": "在过去两年中，每年写一篇关于来年如何成为更好的 Node.js 开发者的建议已经成了我自己的传统。今年也不例外！🤗 随着 Node.js 8 的发布，async 函数已经普遍可用了。有了 async 函数的存在，你可以替换掉回调，写出读起来和同步代码一样的异步代码。 asyn…"}, {"id": "6889214230198190094", "title": "在 Node.js 中 ”相对可靠” 的高效执行可信三方的代码", "desc": "相对可靠：具备持续稳定运行的能力，特别注意这里 不包括安全 相关的考虑。在本文的最后也会扩展介绍一些与安全相关的东西 等等。 isolate ：顾名思义就是一个独立的世界。一个 isolate 就是一个独立的 V8 实例，其中包括了内存管理、GC 收集器等等。isolate 和…"}, {"id": "6844903837564665869", "title": "如何选择正确的Node-SSR框架：Next, Nuxt, Nest?", "desc": "1、使用Apache Bench测试吞吐量。 这是Next基本HelloWorld程序。每秒能处理550.87个请求。每个请求花费的平均时间为18.153ms 为开发人员提供更少的上下文切换。从Angular代码到Nest的过渡相对容易 缺乏文档。该框架与其他框架有很好的集成，…"}, {"id": "6844903616109641736", "title": "一文看懂npm、yarn、pnpm之间的区别", "desc": "npm是Node.js能够如此成功的主要原因之一。npm团队做了很多的工作，以确保npm保持向后兼容，并在不同的环境中保持一致。 npm使用一个名为package.json的文件，用户可以通过npm install --save命令把项目里所有的依赖项保存在这个文件里。 例如，…"}, {"id": "6844903591510016007", "title": "聊聊V8引擎的垃圾回收", "desc": "我们知道，JavaScript之所以能在浏览器环境和NodeJS环境运行，都是因为有V8引擎在幕后保驾护航。从编译、内存分配、运行以及垃圾回收等整个过程，都离不开它。 希望这篇文章能帮到你，同时本文也会收录到我自己的个人网站。 在C语言和C++语言中，我们如果想要开辟一块堆内存…"}, {"id": "6891471193568706573", "title": "Node.js系列一 - JavaScript运行原理", "desc": "一. JavaScript如何运行 1.1. Atwood定律 Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。 Any application that can be written in JavaScript, will eventu…"}, {"id": "6844903816140177416", "title": "Nodejs Docker 镜像体积优化实践", "desc": "你讨厌部署你的应用程序花费很长时间吗? 对于单个容器来说，超过gb并不是最佳实践。每次部署新版本时都要处理数十亿字节，这对我们来说并不太合适。 本文将通过Nodejs程序展示如何优化Docker镜像的几个简单步骤，使它们更小、更快、更适合生产环境。 docker build -…"}, {"id": "6844903613773381640", "title": "Node.js 服务端图片处理利器——sharp 进阶操作指南", "desc": "sharp 是 Node.js 平台上相当热门的一个图像处理库，其实际上是基于 C 语言编写 的 libvips 库封装而来，因此高性能也成了 sharp 的一大卖点。sharp 可以方便地实现常见的图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加等。当然，网络上相关的文章比…"}, {"id": "6844903715019685901", "title": "你不知道的Node.js性能优化", "desc": "“当我第一次知道要写这篇文章的时候，其实我是拒绝的，因为我觉得，你不能叫我写马上就写，我要有干货才行，写一些老生常谈的然后加上好多特技，那个 Node.js 性能啊好像 Duang~ 的一下就上去了，那读者一定会骂我，Node.js 根本没有这样搞性能优化的，都是假的。”"}, {"id": "6999607396884545550", "title": "node多进程架构原理", "desc": "最近在开发涉及到了node服务端的搭建以及开发遇到了多进程带来的一些问题 原因还是对底层远离不够了解导致的 因此分析了多进程的底层原理以便更好的利用它的优势"}, {"id": "6901482790894698503", "title": "还有王法吗？还有法律吗？安装scss时，竟然需要安装python？", "desc": "序言有些项目使用scss时，需要安装node-sass，但是部分windows电脑上提示需要安装Python，项目会提示解决办法安装windows-build-tools工具注意部分windows安装"}, {"id": "6882702372859183111", "title": "玩转Express（一）实战开发", "desc": "作为前端工程师的我们，经常想打破前端的次元壁（不想只是写页面调接口辣），想去学习一门后端语言，建立起自己的服务，往全栈方向冲冲冲。那么个人觉得，没有比 Node.js 更合适我们的了吧。没有学习新语言的成本，但是后端之路个人感觉不是会写简单的接口就可以了， Node.js 虽然…"}, {"id": "6844904052615036936", "title": "把会话放在Node层 我们这样做的很开心😋", "desc": "每次有新项目启动，你会不会和我一样有这样的忧愁，后端这次用seisson还是token呀？如果是token的话有没有续签的问题呀？又是重复的联调，满脑子的登录、退出，哎 😔... 前端填入项目信息，自动完成了SSO和RBAC的接入。 你发现没有，前后端工作被简化到产品都能自己…"}, {"id": "6844903790185807885", "title": "逐行分析Koa中间件机制", "desc": "自从koa框架发布，已经有很多前端同行们对它的源码进行了解读。在知乎、掘金、Github上，已有不少文章讲了它的ctx等API实现、中间件机制概要、错误处理等细节，但对于中间件机制中的细节做逐行分析的文章还是比较少，本文将采用详细的逐行分析的策略，来讨论Koa中间件机制的细节。…"}, {"id": "6844904068830216206", "title": "简单理解 backpressure（背压）机制", "desc": "乍一看，感觉没啥大毛病，但是如果writable.write()写入数据比较慢，但是可读流又在不断的传输数据，就会造成内存溢出，形成阻塞。 如果可写流，无法正确的处理大量由可读流传输的数据，可读流并不会被销毁，这会导致我们写入的文件被损坏。我们必须添加适当的错误处理程序，在当流…"}, {"id": "6844903503249276936", "title": "高效使用 JavaScript 闭包", "desc": "在 Node.js 中，广泛采用不同形式的闭包来支持 Node 的异步和事件驱动编程模型。通过很好地理解闭包，您可以确保所开发应用程序的功能正确性、稳定性和可伸缩性。"}, {"id": "6844904165328551944", "title": "修改node_modules中依赖库", "desc": "之前项目中引入了一个水印插件，引入之后发现水印图层会撑开页面高度的问题,虽然提了issue，但是真的等不及等到官方更新了，直接down下来改源码走紧急修复上线了。这两天，发现同事也碰到了依赖库问题。所以从目前我或我同事们碰到的几种情况下想要修改依赖库入手，做点解决方案的小结。 …"}, {"id": "6844903612804497421", "title": "从实践中寻找webpack4最优配置", "desc": "笔者最近在准备给fle-cli升级到webpack4版本，觉得有必要将探索过程的经验分享给大家，遂决定写这篇文章。（不知道fle-cli？看这里） webpack本身及社区工具存在或多或少的问题，未经时间沉淀，维护成本高。 然而现在，笔者认为以上这些已经成熟，是时候来一波升级了…"}, {"id": "6844903557393563661", "title": "前端调用 GraphQL API，从未如此方便！", "desc": "GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余。 GraphQL 有针对不同语言的服务端实现，以帮助开发人员搭建 Gr…"}, {"id": "6844903831935909895", "title": "Node.js 如何优雅的封装一个实用函数的 npm 包", "desc": "为什么要封装一个实用函数的npm包?需要注意的事项有哪些单元测试测试框架-Mocha是一个功能丰富的Javascript测试框架，它能运行在Node.js和浏览器中，支持BDD、TDD、QUnit、E"}, {"id": "6844904081140482062", "title": "【译】正确地关闭 Node.js app", "desc": "本文是在阮一峰老师的科技爱好者周刊：第 96 期中介绍的文章。平时都是 Ctrl + C 简单粗暴来解决，因此来看一下正确关闭 Node.js 程序的姿势。 英文水平有限，如有错误之处还请指正。 正确地关闭应用，并防止其处理新的请求是非常重要的。我将以一个服务器应用为例子展开。…"}, {"id": "6936048373208186893", "title": "关于文件上传的那点事", "desc": "大致原理就是将大文件分割成好几个部分(根据固定数量/固定大小方式)，每个切片都有自己的数据和各自的名字，每一部分都发起一次ajax请求,将切片传递到服务器端。服务器端根据文件创建一个文件夹,用来存放大文件的切片，当客户端将全部切片传递到服务器端的时候,再发起一次请求告知服务器端…"}, {"id": "6933108905224437773", "title": "cluster浅入浅出", "desc": "、方法。例如 send 方法和 message 事件，这也解释了 worker 是如何实现 IPC 的，完全是借助了 process 对象 第一种方法（也是除 Windows 外所有平台的默认方法）是循环法，由主进程负责监听端口，接收新连接后再将连接循环分发给工作进程，在分发中…"}, {"id": "6913142525297606669", "title": "WebSocket --- Node.js实现简单聊天室", "desc": "聊天室的原理：客户端A发送消息->服务器接收消息->服务器主动向客户端B发送消息->客户端B接收消息客户端的实现：1.创建WebSocket对象，打开WebSocket2.触发WebSocket对象的"}, {"id": "6844903552641400846", "title": "JavaScript中的JS引擎的执行机制", "desc": "一. JavaScript是单线程的 二. JavaScript为什么需要异步 ? 三. 那么又是如何实现异步的呢 ? 任务队列 :1. 所有同步任务都在主线程上执行, 形成一个执行栈(stack)。2.主线程之外, 还存在一个任务队列Event Loop, 异步任务在even…"}, {"id": "6977640620315639815", "title": "测试驱动开发实践 - Test-Driven Development", "desc": "TDD，也就是测试驱动开发(Test-Driven development)，是一种“测试先行”的程序设计方法论，其基本流程围绕着测试->编码（重构）->测试的循环展开。"}, {"id": "6844903651664723981", "title": "js Event Loop 运行机制", "desc": "Event Loop，事件环，线程进程。这些概念对初识前端的同学来说可能会一头雾水。而且运行js代码的运行环境除了浏览器还有node。因此不同环境处理Event Loop又变得不同，十分容易混淆。如果你有这样的疑问。下文将给你一个清晰的解释。 首先我们简化一下概念，把进程，线程…"}, {"id": "6844903660716032007", "title": "现代 JavaScript 的变量作用域", "desc": "当与其他 JavaScript 开发人员交谈时，令我经常感到惊讶的是，有很多人不知道变量作用域是如何在 JavaScript 里起作用的。这里我们说的作用域指的是代码里变量的可见性；或者换句话说，哪部分代码可以访问和修改变量。我发现大家在代码中经常用 var 声明变量，而并不知…"}, {"id": "6947700062461886477", "title": "在 Node.js 中使用 FormData 传输表单文件", "desc": "最重要的就是 multipart/form-data 这种类型了，因为可以传输文件，之前有写过专门的文章介绍过其底层原理。在 node.js 中我们一般用 form-data 这个包来模拟浏览器中的表单，使用方法如下： 用法很简单，不再赘述，对于文件类型，用 createRea…"}, {"id": "6907530903841423373", "title": "手写node的http-server插件", "desc": "有时候网页地址栏需要用到http协议，这个时候就可以通过http-server这个插件来达到效果。终端工具输入npm i -g http-server就可以全局安装http-server了。 安装之后在需要打开的文件的目录下输入http-server就可以开启http协议啦。 …"}, {"id": "6844903889364336654", "title": "浅析ArrayBuffer、TypedArray和Buffer", "desc": "在node中处理文件时，经常遇到buffer。比如使用fs.readFile()去读文件时，第一个参数的类型是可以是Buffer，那Buffer是什么呢？ 如果你对这三个问题的答案了然于心，那么接下来的文章可以不用看了。如果有疑问的话，可以往下看，说不定就能帮你解决疑问。 首先…"}, {"id": "6844903496341258254", "title": "教程 - 使用 TypeScript 构建 Node.js 应用", "desc": "这篇文章将会告诉您，怎样编译、构建、测试以及调试使用 TypeScript 开发的 Node.js 应用。为此，我准备了一个示例工程， 您稍后可以查看源码。"}, {"id": "6985810429570187301", "title": "阿里云部署运行express", "desc": "一、环境配置 nodejs下载与安装 （1）创建目录 首先进入usr目录创建一个tools文件夹 cd /usr && mkdir tools && cd tools （2）下载nodejs压缩包 使"}, {"id": "6957676506252312583", "title": "Node系列-callback的首个参数为什么是error?", "desc": "原文： https://nodejs.org/en/knowledge/errors/what-are-the-error-conventions/ 对于Node.js来说，异步函数很重要的一个理念就"}, {"id": "6844903606374629389", "title": "基于 HTML5 WebGL 的低碳工业园区监控系统", "desc": "低碳工业园区的建设与推广是我国推进工业低碳转型的重要举措，低碳工业园区能源与碳排放管控平台是低碳工业园区建设的关键环节。如何对园区内的企业的能源量进行采集、计量、碳排放核算，如何对能源消耗和碳排放进行实时动态监测等问题，涉及多个技术领域，专业性强。其数据不仅要求准确，更要求真实…"}, {"id": "6844903769403031565", "title": "nodejs 中的依赖管理", "desc": "在我看来，nodejs 的成功原因除了它采用了前端 js 相同的语法，直接吸引了一大波前端开发者作为初始用户之外，它内置的包管理器 npm 也居功至伟。npm 能够很好的管理 nodejs 项目的依赖，也使得开发者发布自己的包变的异常容易。这样一来，不论你使用别人的包，还是自己…"}, {"id": "7005482672411639816", "title": "前端使用ASE加解密(AES/CBC/NoPadding)", "desc": "前言 最新因需求变动,原有Android系统已经不满足现有的需求,需开发PC端的客户端,对应的数据加解密也不能公用同一个类库(后端服务使用的JAVA),现有架构使用的是nodejs,所以记录以下加解密"}, {"id": "7005154666254172191", "title": "🎉好用的🌹跨平台 nodejs 脚本库，你可以放弃 shell 了😭", "desc": "shelljs 是一个使用 nodejs 实现的跨平台脚本库，实现了大部分类 unix 的 shell 命令，可以快速方便的实现跨平台的脚本操作(微软，说的就是你!!!). 具体就是利用 nodejs"}, {"id": "6997572531817283597", "title": "Node中，如何发布一个专业的命令行工具", "desc": "使用 Node 开发一个命令行工具很有意思，较为其它语言而言也更加简单，今天山月写一篇文章总结一下如何写一个友好且健壮的 cli 工具。 在阅读完本篇文章之后，强烈推荐阅读 Github 上的一篇文章"}, {"id": "6919308174151385096", "title": "「前端工程化」从0-1搭建react，ts脚手架（1.2w字超详细教程）", "desc": "我们在这边文章里面用的是mycli ，但是我并没有上传项目到npm,但是这篇文章的技术是笔者之前的一个脚手架原型，感兴趣的同学本地下载可以体验效果。 一条命令创建项目，安装依赖，编译项目，运行项目。 我们希望用一条命令行,实现项目创建，依赖下载,项目运行，依赖收集等众多流程。如…"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "7005014632175763470", "title": "湖中剑 前端周刊 #7 | 2021-09-06", "desc": "周刊收集包括前端（但不限于前端）的文章、新闻、开源项目、工具等等，每周一更新。 📰 News Electron 14.0.0 发布 Electron 14.0.0 现已发布，此次带来了诸多更新，同时终"}, {"id": "7004278912947585055", "title": "使用 Node.js 获取用户操作系统及其版本号", "desc": "获取操作系统 在 Node.js 中判断操作系统是非常简单的，用 process.platform 即可返回标识操作系统平台的字符串。"}, {"id": "6998738671474049037", "title": "Nodejs Express 中间件三部曲之一：Middleware 中间件的使用和分类", "desc": "中间件的字面意思是放在软件一层和另一层中间的任何东西。Express 中间件(Middleware)是在 Express 服务每个请求的生命周期内执行的函数。"}, {"id": "6863351989016166407", "title": "Node.js入门系列（一）", "desc": "首先要感谢很多私信和评论的小伙伴的信任和鼓励，让我有动力继续写下去。 大前端很大，大到我们常常看不到尽头，零零散散的学习总是让我们无法触类旁通，相互鼓励和\"揭短\"才能让自己变得更强大，所以我在文末为独行的小伙伴准备了前端大家庭，有她，前端进阶不孤独。我们仰慕技术大佬，而他们也曾…"}, {"id": "6957316675918102558", "title": "Node.js 16 发布，V8 升级至 9.0！", "desc": "Node.js 以及 V8 引擎迎来大版本更新，除了性能提升之外，还给我们带来了更多的新特性，另外还有一些废弃的 API。"}, {"id": "6997060777462988837", "title": "从 koa-body 入手分析,搞懂 Node.js 文件上传流程", "desc": "如何在Koa服务中处理接收上传的文件数据？ 为什么配置了multipart就可以在ctx.request.files拿到呢？ koa-body是如何进行处理的呢？"}, {"id": "6960096410305822751", "title": "使用Node开发一个多人对战的射击游戏", "desc": "相信大家都是知道游戏的吧。 这玩意还是很有意思的，无论是超级玛丽，还是魂斗罗，亦或者是王者荣耀以及阴阳师。 当然，这篇文章不涉及到那么牛逼的游戏，这里就简单的做一个小游戏吧。 先给它取个名字，就叫“球"}, {"id": "7002406175933202446", "title": "【node实战系列】rpc与http协议通讯", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 bigo前端开始推广bff，hello农场作为首个bff落地项目，历经2个月，完成了从"}, {"id": "7002033006508507167", "title": "40 行代码实现最小化 Koa 及其洋葱模型核心实现", "desc": "大家好，我是山月。 Koa 的源码通俗易懂，仅仅有四个文件，Koa 的下载量奇高，是最受欢迎的服务端框架之一。Koa 也是我最推荐阅读源码源码的库或框架。 这里山月使用四十行代码实现一个最简化的 Ko"}, {"id": "7001522578472828936", "title": "node中常用第三方工具库介绍", "desc": "node中常用第三方工具库介绍：minimist、chalk、enquirer、execa、fs-extra"}, {"id": "6998119681739456526", "title": "命令行创建模版页面教程", "desc": "在日常的业务开发中，我们经常会在不同的项目中，甚至是相同的项目中开发相似的页面。教程实现通过一行命令帮你在项目中创建特定的页面代码。"}, {"id": "6971404975419162660", "title": "Prisma：适用于Node.js和TypeScript的完整ORM", "desc": "Prisma是Node.js和TypeScript的下一代ORM。经过两年多的开发，我们很高兴分享所有Prisma工具已准备好投入生产！ 对象关系映射的新范例 Prisma是适用于Node.js和Ty"}, {"id": "7001401390983544840", "title": "重学前端 | Node.js怎么选版本？", "desc": "学习使用Node.js的第一步，就是下载安装，但是面对众多版本，应该怎么选，又为什么要这么选你都知道吗？"}, {"id": "6844903908385488903", "title": "深入理解Node.js 中的进程与线程", "desc": "进程与线程是一个程序员的必知概念，面试经常被问及，但是一些文章内容只是讲讲理论知识，可能一些小伙伴并没有真的理解，在实际开发中应用也比较少。本篇文章除了介绍概念，通过Node.js 的角度讲解进程与线程，并且讲解一些在项目中的实战的应用，让你不仅能迎战面试官还可以在实战中完美应…"}, {"id": "6844903582337237006", "title": "2018 年了，你还是只会 npm install 吗？", "desc": "nodejs 社区乃至 Web 前端工程化领域发展到今天，作为 node 自带的包管理工具的 npm 已经成为每个前端开发者必备的工具。但是现实状况是，我们很多人对这个nodejs基础设施的使用和了解还停留在: 会用 npm install 这里（一言不合就删除整个 node_…"}, {"id": "6986485485765918733", "title": "让你 vscode 写代码效率更高的技巧", "desc": "vscode 是我们写代码常用的编辑器，它的功能很多，但其实我们有很多功能都没用到，这篇文章就是想梳理下那些可能你不知道的但是却对效率提高很有帮助的一些技巧。 包括： 一键执行 npm scripts"}, {"id": "7005890056640528421", "title": "一文搞懂 peerDependencies", "desc": "背景 最近在做一个基于 Bulma 的 React 组件库，内部依赖了 React 库。 起初我自然而然的将其作为项目依赖直接添加进来： 开发期间将项目通过 yarn link 的方式 link 到测"}, {"id": "7001346405642027038", "title": "Node + 讯飞语音 定时播放天气预报音频", "desc": "每天早上八点钟，定时播放音频（音频内容为当天天气预报和空气质量），播放完成之后继续等待到明天的八点钟播放。 技术 开始本来是想加个客户端的，但是一想先先直接跑个服务就用的node试试，所"}, {"id": "7003578237595058207", "title": "压榨计算机的性能：浏览器和 Node.js 的异步计算", "desc": "都说 Node.js 可以实现高性能的服务器，那什么是高性能呢？ 所有的软件代码最终都是通过 CPU 来跑的，能不能把 CPU 高效利用起来是区分性能高低的标志，也就是说不能让它空转。 那什么时候会空"}, {"id": "6844903577220349959", "title": "前端面试考点多？看这些文章就够了（2019年6月更新版）", "desc": "金三银四跳槽季，offer快到碗里来，前端面试考点众多，而网上各个知识点的博客文章又太多，看的眼花缭乱……所以便整理了一下常见知识点的精华文章，每个知识点的文章控制在3篇以内，尽量覆盖该知识点的下容易被面试到的所有内容，文章都是之前自己读过的，确定是精华干货。文章会一直更新，也…"}, {"id": "6957601771694850062", "title": "Electron + Puppeteer + Robotjs 实现工作自动化", "desc": "当年在百度搜索团队的时候做的一个小工具，可以把一些日常工作自动化，确实解决了一些问题。正值五一，分享点有趣的东西。希望能给大家一些启发。"}, {"id": "6987589727289344036", "title": "哭了，21k Star 的 Yapi 被黑客入侵了", "desc": "事情是这样的，由于我们项目使用了这个 Yapi 项目，前几天收到了安全组的预警通知，说 Yapi 被爆出了安全漏洞，新注册的用户，可以在你的服务器执行任意代码，删除任意东西，让我紧急修改！！"}, {"id": "6893286451711049742", "title": "小蝌蚪传记：前端菜鸟让接口提速60%的优化技巧", "desc": "天秀老接口存在一个问题，我们每次请求1000条数据，返回的数组中，每一条数据都有上百个字段，其实我们前端只用到其中的10个字段而已。 如何从一百多个字段中，抽取任意n个字段，这就用到graphQL。 里面有两个女神的所有信息，包括女神的名字、手机、微信、身高、学校、备胎集合等信…"}, {"id": "7000361250093793294", "title": "彻底掌握 Node.js 四大流，解决爆缓冲区的“背压”问题", "desc": "把一个东西从 A 搬到 B 该怎么搬呢？ 抬起来，移动到目的地，放下不就行了么。 那如果这个东西有一吨重呢？ 那就一部分一部分的搬。 其实 IO 也就是搬东西，包括网络的 IO、文件的 IO，如果数据"}, {"id": "7001799695647375390", "title": "Mongoose 的 save() 方法", "desc": "Mongoose 的 save() 方法是将文档更改保存到数据库的一种方法。在 Mongoose 中更新文档有几种方法，如：update、updateOne。但 save() 是功能最齐全的方法。除非"}, {"id": "6996118096977068039", "title": "带你入坑Nodejs(四)", "desc": "Express框架 Express 官网 什么是Express Express 是一个保持最小规模的灵活的 Node.js Web 应用程"}, {"id": "6997208508458336292", "title": "带你入坑Nodejs(七)", "desc": "这是我参与8月更文挑战的第13天，活动详情查看:8月更文挑战 不要纳闷怎么讲数据库了，后续会讲到 node 链接数据库操作数据库，所有先讲一下MySQL数据库 MySQL数据库 1.1 什么是数据库 "}, {"id": "7005834488529813511", "title": "QUIC 简介及 NodeJs 简单示例", "desc": "QUIC协议是一个新的通讯协议，基于 UDP 的传输协议并希望最终取代所有基于TCP的HTTP请求。熟悉 UDP 的人都应该清楚为什么要使用 QUIC。UDP 是的特点是不可靠、数据包经常丢失、重新排"}, {"id": "6996829739021238303", "title": "带你入坑Nodejs(六)", "desc": "这是我参与8月更文挑战的第12天，活动详情查看:8月更文挑战 Node中的模块化 什么是模块化 js设计之初只是为了实现表单验证这样的简单功能，没设计模块化方案，所以js天生不支持模块化 不支持模块化"}, {"id": "7002016966189776909", "title": "🛬🛬🛬你的node环境真的装对了吗？", "desc": "作为一个前端，node是我们的必备环境，在安装node的时候，我们姿势真的对了吗？一顿操作直接上官网安装一个node吗？着实不建议直接安装哈，有一个东西叫nvm"}, {"id": "7005421014251208711", "title": "Sentry-CLI 使用文档", "desc": "您可以在 GitHub release 页面上找到 release 列表。 我们提供适用于 Linux、OS X 和 Windows 的可执行文件。 这是一个单独的文件下载，在收到文件后，您可以将其重"}, {"id": "6996461846542843912", "title": "带你入坑Nodejs(五)", "desc": "中间件 什么是中间件express中间件是一个特殊的url地址处理函数 该函数中有三个基本参数， req、res、next。req就是回调函数中的req对象等等"}, {"id": "6914508615969669127", "title": "node_modules 困境", "desc": "该算法即简化了 Dependency hell 的解决方式，也带来了非常多的问题。 其错误原因就在于全局的 types 形成了命名冲突，因此假如版本重复可能会导致全局的类型错误。 一般的解决方式就是自己控制包含哪些加载的 @types/xxx。 node 会对加载的模块进行缓存…"}, {"id": "7004060758854238221", "title": "重量级的数据实时更新方案", "desc": "回顾 轻量级的数据实时更新方案 了解WebSocket 什么是WS 是一种在单个 TCP 连接上进行全双工通信的协议 客户端可以主动向服务端发送消息，服务端也可以主动向客户端推送消息 WS特点 既可以"}, {"id": "7002136059237236766", "title": "Windows安装MongoDB", "desc": "前段时间出了个node够用系列，在分享第五篇之前我们需要安装一个数据库。 对于数据库可以选择`MySQL`和`MongoDB`，这里我们就用`MongoDB`演示..."}, {"id": "6844904036043341838", "title": "Nodejs 开发微信公众号", "desc": "目标交互流程Nodejs使用技巧架构项目方式Koa框架使用ES2015新特性实现功能获取用户地理位置信息jssdk的接入菜单功能文字回复扫二维码、拍照和相册等查询：文字和语音设计技术栈及技术点jssd"}, {"id": "6844903924038631432", "title": "Node.js 研究", "desc": "浏览器中的js，就是ECMAScript语法+Web API。 NodeJs中的js，就是ECMAScript语法+Node API。 上图可以看到，语法都是相同的语法（ECMAScript），只不过所在的环境不同，提供的API不同，能干的事就不一样了。图没有列出所有的API，…"}, {"id": "6844903688188723208", "title": "[译]一篇帮你彻底弄懂NodeJs中的Buffer", "desc": "前言：遇见前端，应该是今年最幸运的事情了。然而，幸运并未就此打住。 现在，我在准备自己的毕设，准备下一个阶段的到来。掘金社区的确是一个让人成长的地方，我也愿意今后有时间继续分享自己的成长经历。这篇文章是昨天看到的，通俗易懂，实在佩服，忍不住翻译过来和大家分享，继续成长 你是不是…"}, {"id": "6844903749735940109", "title": "Glob Patterns匹配模式使用", "desc": "前段时间在用workbox时，在做precache时，匹配模式基于的是Glob Pattern模式，于是就看了下相关文档。 像在shell里面，用*等匹配模式来匹配文件。 Glob基于Javascript实现，使用minimatch库进行匹配。 \"Glob\"是一种模式，类似于在…"}, {"id": "6844903693603569671", "title": "必知必会的Node-CLI开发基础", "desc": "Unix参数风格：前面加-，不过后面跟的是单个字符，例如-abc解析为['a', 'b', 'c']。 GNU参数风格：前面加--，例如npm中的命令，npm --save-dev webpack。 BSD参数风格：前面不加修饰符。 npm中采用Unix参数风格表示简写，这就是…"}, {"id": "6875192087705288718", "title": "借助Node实现博客素材自动上传", "desc": "饱受手动上传的痛苦之后，本搬砖工决定写个小脚本解放双手。脚本依赖腾讯云的静态存储，无论用的是哪种静态储存，本质都是一样的，就是运用的API可能有细微的差别。 这个阶段主要用到fs、path模块，首先通过process.argv获取指令中的参数，从上述代码可以看出这个脚本默认指令…"}, {"id": "6844903600444047368", "title": "回调地狱", "desc": "异步JavaScript或使用回调的JavaScript很难直观地得到正确的结果。很多代码最终看起来像这样： 回调地狱的原因是，当人们试图以一种从上到下的视觉方式执行JavaScript的方式编写JavaScript时。很多人犯这个错误！在C，Ruby或Python等其他语言中…"}, {"id": "6844903621784502280", "title": "axios源码分析——取消请求", "desc": "这就是一个简单的取消请求的例子，那么就从最开始的axios.CancelToken来看，先去axios/lib/axios.js文件中。 source方法很简单，就是返回一个具有token和cancel属性的对象，但是token和cancel都是通过CancelToken这个构…"}, {"id": "6844904179132006408", "title": "Node.js实战—Node.js+MySQL+RESTful", "desc": "最近学习了一下Node.js相关的内容，在这里初步做个小总结，说实话关于本篇博客的相关内容，自己很久之前就已经有过学习，但是你懂的，“好记性不如烂笔筒”，学过的东西不做笔记的话，很容易就会忘记的一干二净，往往的结果就是自己又要重头开始学习，这是一个非常痛苦的过程。没有办法，为了…"}, {"id": "6844903677782654983", "title": "Node中fs模块 API详解", "desc": "在 NodeJS 中，所有与文件操作都是通过 fs 核心模块来实现的，包括文件目录的创建、删除、查询以及文件的读取和写入，在 fs 模块中，所有的方法都分为同步和异步两种实现，具有 sync 后缀的方法为同步方法，不具有 sync 后缀的方法为异步方法，在了解文件操作的方法之前…"}, {"id": "6844904095354978312", "title": "使用nodejs + wecharty打造你的个人微信机器人", "desc": "注： 从2017年6月下旬开始，使用基于web版微信接入方案存在大概率的被限制登陆的可能性。 主要表现为：无法登陆Web 微信，但不影响手机等其他平台。 验证是否被限制登陆： https://wx.qq.com 上扫码查看是否能登陆。 更多内容详见： Can not login…"}, {"id": "6844904038627033095", "title": "[手摸手系列] 使用 docker-compose 构建你的项目", "desc": "距离上一次在掘金写文章，已经过去了半年多了（主要还是自己水平差，不知道写什么好了）。 不过新的一年，总要写点东西总结总结一下。 最近也一直在使用docker。所以就想者分享一下这方面的知识。不知道是不是最佳实践，欢迎各位踩我 1. Docker docker的是什么，在掘金平台…"}, {"id": "6844903599655370759", "title": "Node HTTP/2 Server Push 从了解到放弃", "desc": "前阵子，在Media看到一篇文章《Node.js can HTTP/2 push!》。看到push这个字眼时，我想到的是WebSocket消息推送。难不成HTTP/2还能像WebSocket那样可以服务端主动推送消息？好厉害，我就一下子来了兴趣。 然而阅读完文章之后，发现理想与…"}, {"id": "6844904086169468936", "title": "我与花呗与前端技术", "desc": "掰起手指头一数，这已经是在家办公的第六周了。 回想起我的 2020 年，是在 B 站晚会上，听着五月天的「干杯🍻」开始的——原以为会开个好头呢。 窗外雨声吧嗒，我的心绪也跟着躁动起来，不如就藉此和大家唠唠我与花呗还有团队的前端技术吧，也算个总结感想之类的杂谈。 2019 年年…"}, {"id": "6844903695637839885", "title": "【从前端到全栈】- koa快速入门指南", "desc": "随着技术的不断发展，前端工程师也被赋予了越来越多的职责。不再是从前只需要切个图，加个css样式就能完成任务的切图仔了。接下来这篇文章，完成一个简单的登录注册，能让你快速上手，成为一个‘小全栈工程师’，here we go ！ 推荐一个node的多版本管理工具：nvm。如何安装这…"}, {"id": "6980987068205760542", "title": "CabloyJS 基于 EggJS 实现的模块编译与发布", "desc": "现在，EggJS被许多开发团队所采用。有的团队基于商业知识产权的考量，往往会提一个问题：是否可以把EggJS当中的代码编译打包，然后再把代码丑化？"}, {"id": "6844903814038831118", "title": "Yarn Plug'n'Play可否助你脱离node_modules苦海?", "desc": "使用 Yarn(v1.12+)的 Plug'n'Play 机制来取代 node_modules. 目前这还是一个实验性的特性. 用一个字来形容的话就是'重!'. 一行hello world就需要安装 130MB 以上的依赖模块, 而且文件数是32,313. 相比之下 macOS…"}, {"id": "6844904033342210055", "title": "Nodejs-基础-http", "desc": "先说一下应用场景，目前公司中用node主要是用node来做中间层，当然是大多数公司，因为一般公司项目都已经成型了，加上node人员不好招，所以真完全用来做后台的很少（不过做起来是完全没问题的）。 听着好听，用大白话讲就是给前后端擦屁股的，最早是java的中间件概念，后来后台都不…"}, {"id": "6844903582102192141", "title": "使用node中fs模块创建和删除文件夹", "desc": "首先，我们必须先判断该文件是否为非空文件；如果是空文件就删除，如果不是空，那么先删除子文件，直到父级文件为空，再删父级文件。 深度优先的主要思想就是“不撞南墙不回头”，“一条路走到黑”，如果遇到“墙”或者“无路可走”时再去走下一条路。所以文件的删除顺序就是 上面的函数中大量使用…"}, {"id": "6844903758271365134", "title": "node服务端渲染(完整demo)", "desc": "简介技术点koa搭建服务koa-router创建页面路由nunjucks模板引擎组合htmlwebpack打包多页面node端异步请求服务端日志打印运行npminpmstart一、现代服务端渲染的由来"}, {"id": "6844904082717540365", "title": "Java后端的我也要学Node.js 了", "desc": "从前，我也写过前端，不过那会最多用到HTML5 +jQuery相关技术。也没有准确的时间点来划分，我就忽忽悠悠的专注于Java后端了 教学视频是前辈多年浓缩的精华，有了一些基础概念，我会选择站在巨人的肩膀上整体看一下。日常主要通过【极客时间】和【慕课网】这两个网站搜索视频资料，…"}, {"id": "6844903619582509063", "title": "精读《深入浅出Node.js》", "desc": "从不同的视角介绍了 Node 内在的特点和结构。由首章Node 介绍为索引，涉及Node 的各个方面，主要内容包含模块机制的揭示、异步I/O 实现原理的展现、异步编程的探讨、内存控制的介绍、二进制数据Buffer 的细节、Node 中的网络编程..."}, {"id": "6844903713128218631", "title": "【手把手带你撸一个脚手架】第一步, 创建第一个命令", "desc": "脚手架, 源自于建筑行业, 通俗的讲就是一个项目搭建的工具. 比较熟知的有 vue-cli create-react-app 等等, 这类工具通常以 xxx-cli 命名, 不废话 先甩一个 npm 战绩 小哥哥, 看看这数据, 你到底要还是不要嘛... 创建 bin 目录和 …"}, {"id": "6856995402110435335", "title": "极简 Node.js 入门系列教程 —— 为什么 2020 还要学 Node.js", "desc": "语法层面特性注定会被弥补，不如 top-level await，也就是不用在 async 里面使用 await，Node.js v14 已经支持了，Promise、回调等很大层面上在 Node.js 也不再是问题。至于拓展名 .js 和 index.js 可能影响的只有强迫症 …"}, {"id": "6964772680738275358", "title": "Node.js使用数据库LevelDB：超高性能kv存储引擎", "desc": "LevelDB是Google传奇工程师Jeff Dean和Sanjay Ghemawat开源的一款超高性能Key-Value存储引擎，以其惊人的读性能和更加惊人的写性能在轻量级NoSql数据库中鹤立鸡"}, {"id": "6844904193501691917", "title": "Verdaccio私仓搭建的一些注意点和姿势", "desc": "简单点说,就是npm私有部署仓库,类似npm官方付费的私有仓. 是想把我们公司的npm私有仓从nexus迁移出来. 我们这里采用docker自己部署(用的是v4.6.x),方便后续滚动更新. 外网访问是通过nginx代理,内网集群是通过安全组策略授权. 注意: 非采用官方doc…"}, {"id": "6844903848696348685", "title": "Node.js + ELK 日志规范", "desc": "一般前端开发同学，对日志其实不太敏感，毕竟前端大多数情况下，不太关心日志。即使有，也可能调用一些第三方的统计，比如百度统计或者别的等。在 Node.js(下文中简称node) 推进过程中，也发现我们平常打日志太随意，该打的日志没有打，打的一些关键日志缺少必要上下文信息，导致在线…"}, {"id": "6844904084617560078", "title": "Shopify插件开发入坑体验", "desc": "由于公司的需求开发Shopify的应用插件自己特地记录下。简单的介绍下Shopify,它是由托比亚斯·卢克创办的加拿大电子商务软件开发商，总部位于加拿大首都渥太华，其提供的服务软件Shopify是一个SaaS领域的购物车系统，适合跨境电商建立独立站，用户支付一定费用即可在其上利…"}, {"id": "6895594434843869197", "title": "手写@koa/router源码", "desc": "上一篇文章我们讲了Koa的基本架构，可以看到Koa的基本架构只有中间件内核，并没有其他功能，路由功能也没有。要实现路由功能我们必须引入第三方中间件，本文要讲的路由中间件是@koa/router，这个中间件是挂在Koa官方名下的，他跟另一个中间件koa-router名字很像。其实…"}, {"id": "6960843138164326431", "title": "Nodejs 基础：巧用 string_decoder 将 buffer 转成 string", "desc": "模块简介 string_decoder模块用于将Buffer转成对应的字符串。使用者通过调用stringDecoder.write(buffer)，可以获得buffer对应的字符串。 它的特殊之处在于"}, {"id": "6844904148203372558", "title": "node简单分析基金定投是否靠谱（数据篇）", "desc": "1. 市面常见理财产品对比 2. 前端爬虫 3. 页面分析 4. 数据表建立 5. 数据库的简单封装 6. 工具函数的简单封装 8. 主代码编写 9. 最终结果 下篇文章【node简单分析基金定投是否靠谱（分析篇）】待写..."}, {"id": "6950550036761559077", "title": "node v14源码分析之文件加载", "desc": "1. `执行node发生了什么` 2. `require执行流程` 3. `node如何解决循环依赖`"}, {"id": "6854573220431921160", "title": "当遇到跨域开发时, 我们如何处理好前后端配置和请求库封装(koa/axios版)", "desc": "我们知道很多大型项目都或多或少的采用跨域的模式开发, 以达到服务和资源的解耦和高效利用. 在大前端盛行的今天更为如此, 前端工程师可以通过nodejs或者Nginx轻松搭建起web服务器.这个时候我们只需要请求后端服务器的接口即可实现系统的业务功能开发.这个过程中会涉及到web…"}, {"id": "6870426598605062152", "title": "详解package.json和package-lock.json", "desc": "之前在开发项目的时候首先接触到的就是package.json和package-lock.json，但由于种种原因一直都没有探究下去，留的坑总要埋的，所以这里补一下课。 package.json文件通常位于项目的根目录下，该文件包含了与项目相关的各种数据。该文件通常用于npm识别…"}, {"id": "6972933734177865741", "title": "搭建一个简易的量价选股系统（node做数据抓取）", "desc": "最近迷上股市无法自拔，因为想提高胜率，所以在学习技术分析，一开始是使用通达信软件写写选股公式，后面打算自己弄一个选股系统（事实证明用处不大，哈哈哈）。 大概是这样实现的：首先用node写了个简单的服务"}, {"id": "6844903829696151565", "title": "如何选择正确的Node框架：Express，Koa还是Hapi？", "desc": "在群集中运行您的应用。您可以通过启动进程集群来大大提高Node.js应用程序的性能 对静态资源使用反向代理。它可以处理错误页面，压缩，缓存，提供文件和负载平衡等 最后，express可能是Node.js最流行的框架，还有许多其他流行的框架都是基于Express构建的。 Koa提…"}, {"id": "6951968120617566244", "title": "Node中各种模块简介", "desc": "阅读工具以下内容是基于node15.14.0版本阅读的。另外在github仓库的地址上github后面加上 1s 可以在网页上利用vscode查看源码，支持快捷方式文件跳转，全局搜索等。例：https"}, {"id": "6844904066640773133", "title": "通过 Docker 部署 nodejs -- egg 项目", "desc": "在 egg 项目的 package.json 文件中，在 start 启动项中，--daemon 是后台启动。如果使用 docker 容器，需要去除 --daemon . -t 这个参数很重要，它代表不会进入到容器内部去执行命令，如果去掉它，会在容器内部执行启动 Dockerf…"}, {"id": "6980683023100411935", "title": "Node.js系列九 - http开发web服务器", "desc": "目前有很多开源的Web服务器：Nginx、Apache（静态）、Apache Tomcat（静态、动态）、Node.js 一. Http模板基本使用 1.1. 如何创建服务 1.1.1. Web服务器"}, {"id": "6844903942468403213", "title": "从零实现TypeScript简易版Koa", "desc": "更多精彩文章，欢迎大家Star我们的仓库、关注我们的掘金号，我们每周都会推出几篇高质量的大前端领域相关文章。"}, {"id": "6844903694991900686", "title": "JavaScript 中的参数处理", "desc": "首先我们知道，js 当中是没有函数重载的，在我们处理可变函数的参数的时候，需要使用一些小技巧。 arguments 是存在于函数（箭头函数除外）中的一个内部变量。arguments 包含了传递给函数的参数的信息。可以通过 arguments[0] 访问函数的第一个参数，argu…"}, {"id": "6844903924223180808", "title": "node.js(koa2)+MySQL简易入门", "desc": "具体的安装MySQL省略。。。 mysql模块是node.js操作MySQL的驱动（引擎），可以在node.js环境下对MySQL数据库进行建表，增、删、改、查等操作。 使用createConnection方法,该方法接受一个OBject参数，提供连接数据库的主机，用户名，密码…"}, {"id": "6844904176418308103", "title": "Nodejs 中 ES Modules 入门使用讲解", "desc": "2020-05-26 Nodejs v12.17.0 LTS 版发布，去掉 --experimental-modules 标志。 虽然已在最新的 LTS v12.17.0 中支持，但是目前仍处于 Stability: 1 - Experimental 实验阶段，如果是在生产环境…"}, {"id": "6844903495825358855", "title": "基于 Node、WebSocket 的手机控制电脑实例", "desc": "首先 PC 端先要跟服务器端建立一个连接，连接建立之后，服务器为连接的实例创建一个唯一的 id，并返回到客户端。同时维护一个 Map，以连接 id 为 key 值保存连接实例 为了方便，这里使用了一个专门处理 WebSocket 的 node 模块 ws，前面提到过，WebSo…"}, {"id": "6844903601110777863", "title": "Node.js的Koa实现JWT用户认证", "desc": "以下是基本的代码，实现静态服务器，以及一个当token验证异常时候的处理。 下面我们将在这个基本代码下逐步增加注册、登录、信息的功能。 下面，我们将在注册、登录、信息的注释底下添加实现的代码。 注册、登录接口、其它资源不需要认证，信息接口需要认证。 前端获取到token之后，可…"}, {"id": "6844903614834556936", "title": "基于Node.js的HTTP/2 Server实践", "desc": "虽然HTTP/2目前已经逐渐的在各大网站上开始了使用，但是在目前最新的Node.js上仍然处于实验性API，还没有能有效解决生产环境各种问题的应用示例。因此在应用HTTP/2的道路上我自己也遇到了许多坑，下面介绍了项目的主要架构与开发中遇到的问题及解决方式，也许会对你有一点点启…"}, {"id": "6844903598497726477", "title": "微信JSSDK与NodeJS深度整合", "desc": "对于做H5手机端的同学来说，微信是个必不可少的入口，自然而然我们需要调用微信提供给H5或者说JS的各种接口，我们也要根据微信的要求去做各种签名验证，才能最终到达我们的需求，GITHUB上面也有很多关于这方面的库可以用，但是他们总是或多或少的不能完全满足需求，或者说是又要付出很多…"}, {"id": "6954237294538653732", "title": "从零开发一个脚手架(入门)", "desc": "这个系列文章，设计为3篇文章讲解，从入门、进阶到高级，希望可以帮助大家掌握并且学会一个脚手架开发的整体流程和思想，能在自己的团队中用起来，帮助团队实现一些可以提升开发效率的脚手架工具。"}, {"id": "6926435606922788872", "title": "字节跳动无恒实验室：Nodejs中模板引擎渲染原理与潜在隐患探讨", "desc": "此前，无恒实验室成员在对nodejs原型链污染漏洞进行梳理时，发现原型链污染漏洞可结合模板引擎的渲染达到远程命令执行的效果。为什么原型链污染能结合模板引擎能达到这样的效果？模板引擎究竟是如何工作的？除了原型链污染，还有其他方式也能达到同样的效果吗？带着这样的疑问，无恒实验室成员…"}, {"id": "6850418120117616654", "title": "用nodejs写一个简单的Alfred workflow", "desc": "1. 打开alfred的Preferences,找到WorkFlows,选择列表底部的+号，选择Blank Workflow 2. 填写插件名字，描述，分类及版本信息，作者，网站。图标找个喜欢的拖拽到右侧方框里就行了 3. 空白区域点击右键，选择Inputs => Script…"}, {"id": "6844903653006901256", "title": "mpvue小程序《校友足迹》成长记（一）", "desc": "后端服务拆分了全局配置，router，control和sql相关的配置，由于上线前需要https协议，所以这里加了一个https的配置，上线后会在nginx中进行配置；这里不做过多解释；这里可以看到我使用了pm2，pm2是node进程管理工具，可以利用它来简化很多node应用管…"}, {"id": "6922092040368947207", "title": "Node基础入门（一）", "desc": "Node.js 诞生于2009年，Node.js采用C++语言编写而成，是 一个Javascript的运行环境。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境 ，让JavaScript的运行脱离浏览器端，可以使用JavaScript语言书…"}, {"id": "6844904082168086535", "title": "快速复习：Node.js中的fs模块的使用", "desc": "JavaScript 的是没有操作文件的能力，但是 Node 是可以做到的，Node 提供了操作文件系统模块，是 Node 中使用非常重要和高频的模块，是绝对要掌握的一个模块系统。 fs 模块提供了非常多的接口，这里主要说一下一些常用的接口。 上述命令也可以在当前目录创建多层几…"}, {"id": "6908606681161154567", "title": "CabloyJS v4.0.0支持工作流引擎及更多 🎉", "desc": "PC端与移动端自适应：页面组件只需要开发一次。不是采用media query，也不是采用iframe，而是真正的把手机操控体验带入PC端。只要用一下，就会有一种相逢恨晚的感觉 统计值自动更新与推送架构。比如，我有多少待办一目了然。这是一个通用的架构，可以简便的匹配到任何场景"}, {"id": "6844903549520838669", "title": "微信跳一跳最直观的辅助", "desc": "作为一个前端开发者，微信刚出跳一跳，玩两把后就有了辅助的实现思路，结合Node和Android知识来一波儿。开发这个辅助的时间还算早，后来网上也出现了更牛的辅助（自动识别物体计算距离），实现思路都是差不多，具体可以参见年前29号(微信的6.6.1也是当天更新的) 发的推文htt…"}, {"id": "6844903821672448008", "title": "NodeJS和命令行程序", "desc": "植根于Unix系统环境下的程序，很多都把贯彻Unix系统设计的哲学作为一种追求。Unix系统管道机制的发明者Douglas McIlroy把Unix哲学总结为三点： 专注做一件事，并做到极致。 程序协同工作。 面向通用接口，如文本数据流。 随着Unix/Linux系统在服务器上…"}, {"id": "6844903742140055559", "title": "用 Node.js 3周仿出一个小掘金", "desc": "首先，来看看用 3周 时间做出来的应用都有些什么功能，之后再看看选用的 Node.js 框架，最后看看 Node.js 项目如何部署到服务器。 这个应用的开发我选择的是 Adonisjs 框架，他和 PHP 的 Laravel 有些像，Adonisjs 是在操作系统上运行的 N…"}, {"id": "6919125835442028557", "title": "如何构建一个多人(.io) Web 游戏，第 2 部分", "desc": "探索 .io 游戏背后的后端服务器。 服务器入口(Server Entrypoint)：设置 Express 和 socket.io。 服务端 Game(The Server Game)：管理服务器端游戏状态。 服务端游戏对象(Server Game Objects)：实现玩家…"}, {"id": "6864219414355509256", "title": "前端项目脚手架梳理", "desc": "最近因为公司组织上的变动，将我们负责的系统独立为一个部门，独立进行开发，之前所有的代码库和组件库以及npm私服等等的一套全部都要迁移到新的环境，为的就是独立开来。在此之前初到新环境一直都是在进行业务码农，照着需求无脑照搬，也是这次调整，开发人员变少了，大佬也没有了。突然有一种失…"}, {"id": "6985857675342905375", "title": " egg入门指引，你绝对用得到", "desc": "express，koa作为经典的node技术应用，曾经是node开发的不二之选，但有没有更灵活更可靠的框架作为代替呢？答案就是egg"}, {"id": "6844903954002755592", "title": "nodejs（十一）json-server使用教程", "desc": "一. json-server介绍 二. json-server的使用 三. 支持的方法 当你发送POST，PUT，PATCH 或者 DELETE请求时，变化会自动安全的保存到你的db.json文件中。 你的请求体body应该是封闭对象。比如{\"name\": \"Foobar\"} …"}, {"id": "6844903602054660103", "title": " webpack系列之-原理篇", "desc": "本系列将会从原理、开发、优化、对比四个方面给大家介绍webpack的工作流程。【默认是以webpack v3为例子】 我们可以把webpack看做一个黑盒，只要会用就可以。先来体验一次很简单的webpack打包过程 npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去…"}, {"id": "6844904190129471495", "title": "「预热桶」限流算法详解(附 Node.js 实现)", "desc": "在使用「限流器」的时候，我们需要给设置一个合适的 阈值 ，这个阈值通常是一个系统能够正常工作所能承受的最大 QPS 。当系统的请求量达到阈值时，不同的限流器主要有两种处理方式，一种是对超过阈值的请求直接返回失败，另一种是让超过阈值的请求排队等待。 要控制系统的 QPS 不超过阈…"}, {"id": "6844903619704143886", "title": "ES6与CommonJS中的模块处理", "desc": "ES6和CommonJS都有自己的一套处理模块化代码的措施，即JS文件之间的相互引用。 nodejs默认是不支持ES6的模块处理方案的。 但是在8.5.0之后，ES6代码的文件格式定为mjs后，可使用node --experimental-modules xxx.mjs运行。 …"}, {"id": "6894658363251965965", "title": "webpack, babel, eslint,typescript,koa服务器应用简单入门配置", "desc": "至于其他配置，暂且就默认吧。现在，我们已经能用 tsc 了，算是搭建了一个基础环境。 这一步结束，咱们的项目已经能够跑起来了。 上面的 json 文件内容，主要就是添加了两个预设配置，和两个插件。 运行成功。每次需要编译代码的时候就运行一遍上面的 npx babel xx 就好…"}, {"id": "6844903664239411208", "title": "NODEJS+EXPRESS发送验证码完全实践，排坑之旅！", "desc": "最近在深入学习nodejs+express+mysql的全栈开发，我知道现在mysql、express是老旧的，但是个人感觉还是挺成熟的，而且比较熟悉，先学学看，后面再看看kao、MongoDB，下面就来说说我用nodejs和腾讯云的短信sdk开发的验证码服务，大神嘴下留情啊~…"}, {"id": "6854573220033462285", "title": "记一次简单的Node.js爬取某网站列表中a标签的属性", "desc": "需求：根据关键词搜索爬取某网站的列表跳转的链接及标题并导入excel感觉这次的思路并不是很正确是一种野路子个人理解正常的爬虫是爬取页面的内容而我这次是直接调用接口获取数据拿到数据后整理导入excel感"}, {"id": "6844904021484896270", "title": "2020年Node.js将会有哪些新功能", "desc": "2019 年是 Node.js 诞生的第 10 个年头，npm 上可用的包数量超过了 100 万。 Node.js 本身的下载量也在持续增长，同比增长了 40％。另一个重要的里程碑是 最近 Node.js加入了 OpenJS 基金会，该基金会承诺改善项目的状况和可持续性，并改善…"}, {"id": "6844903859089866760", "title": "超详细的node垃圾回收机制", "desc": "垃圾回收器是一把十足的双刃剑。其好处是可以大幅简化程序的内存管理代码，因为内存管理无需程序员来操作，由此也减少了（但没有根除）长时间运转的程序的内存泄漏。对于某些程序员来说，它甚至能够提升代码的性能。 另一方面，选择垃圾回收器也就意味着程序当中无法完全掌控内存，而这正是移动终端…"}, {"id": "6844903585960951815", "title": "ES6展开运算符（扩展运算符）", "desc": "在ES6中，我们有了一个新的运算符--展开运算符，它可以使我们的代码的数量有一定的减少，有时候甚至有很有用的作用，我们来举几个常用的例子，同时通过例子来了解展开运算符的使用。 总的来说，使多参数的函数调用有了新的方式, 而且避免的作用域的问题。 这里的对象是指类似{a:1}这样…"}, {"id": "6901838829217382407", "title": "Node系列之解决同源策略跨域问题的9种方案(最新最全)", "desc": "跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。 其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。 同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也…"}, {"id": "6844903842568470536", "title": "用Puppeteer爬自己想偷的猫，推翻闰土统治掘金的时代！", "desc": "Puppeteer是 Google Chrome 团队官方的无界面（Headless）Chrome 工具，它是一个 Node 库，提供了一个高级的 API 来控制 DevTools协议上的无头版 Chrome 。也可以配置为使用完整（非无头）的 Chrome。Chrome 素来…"}, {"id": "6844904035997188103", "title": "【重学Node.js 第5篇】部署项目到腾讯云服务器", "desc": "通过前面的讲解，可以完成一个基本的node api服务了，接下尝试把项目部署到刚买的腾讯云上。 购买腾讯云容器，购买后会把账号信息通过腾讯云站内信发给你，里面有公网ip和初始密码，后面ssh登陆会用到。 登陆云linux。本地Mac命令行输入：ssh root@xx.xx.xx…"}, {"id": "6844903571197001742", "title": "nuxtjs+express+vue2+vuex搭建的服务端渲染（SSR）个人网站项目", "desc": "nuxtjs+express+vue2.0+vuex搭建的服务端渲染个人网站项目. nodejs的出现，让前端能做的更多，让js不仅仅只是浏览器端的语言。 这里为什么要说这个呢，有些前端开发者会说node不是做后端的吗？我为什么要学nodejs呢？其实随着前端的发展，尤其是no…"}, {"id": "6892302012294103053", "title": "Node.js系列二 - Node基础知识", "desc": "一. Node执行代码 1.1. JavaScript文件执行 1.2. Node的REPL 二. Node输入输出 2.1. 给node程序传递参数 argv：argument vector的缩写，传入的具体参数。 vector翻译过来是矢量的意思，在程序中表示的是一种数据结…"}, {"id": "6953507752027750431", "title": "tcp如何实现http协议", "desc": "目标： 了解 http 协议的内容 理解node中tcp的基本使用 用net实现一个http协议 启动一个node http服务器； tcp实现http/demo1 通过wireshark 过滤条件 "}, {"id": "6978472077586071559", "title": "child_process.exec接口引起的服务异常排查记录", "desc": "最近在用Beidou同构框架搭建一个SSR同构服务，本地开发时毫无问题，但部署到测试环境和线上环境后，服务会不定期进程会收到exit事件而异常退出。本文记录了排查的过程及一些收获，与大家共勉。"}, {"id": "6844904128951369742", "title": "如何使用 yargs", "desc": "Yargs 是一个很好的命令行程序库，简单地说，它可以让创建一个在控制台中运行的应用程序的过程变得轻而易举。还有什么能让它变得更好呢？它是以海盗为主题的（它的名字叫 YARgs），让它正式成为有史以来最好的工具。 你可能知道其他的 CLI，比如 vue-cli，可以轻松设置一个…"}, {"id": "6950848116228620296", "title": "Node.js性能分析工具", "desc": "ab压测-c 并发数（同时有200个人，在请求我们的服务器）-n 总共执行1000次请求找到服务器瓶颈通过压测的qps可以大概判断性能瓶颈在不在网卡，如果不在网卡，就可能在cpu、内存、硬盘等等top"}, {"id": "6844903564729581575", "title": "掌握Node.js中的Async和Await", "desc": "在本文中，你将学习如何使用Node.js中的async函数(async/await)来简化callback或Promise. 异步语言结构在其他语言中已经存在了，像c#的async/await、Kotlin的coroutines、go的goroutines，随着Node.js …"}, {"id": "6939498282028630046", "title": "搭建一个自动化部署服务", "desc": "监听8003端口，访问'/'根目录时，返回/statichtml/index.html页面。 前端页面最简易的情况只需要一个部署按钮，用于发起部署请求。 可增加一些表单交互，用于拓展部署服务功能，例如分支选择，目标项目连接的后端ip等等。 点击部署按钮，请求当前服务端口的'/r…"}, {"id": "6844903551089508365", "title": "Nuxt.js踩坑分享", "desc": "1. 如何在 head 里面引入js文件? 踩坑成功，下一个坑... 2. 如何使用预处理器 这个问题解决方法非常简单，只需要安装这些依赖就好。 但是解决过程并不是很顺利的，在阅读中文文档时，忽略版本号，按照上面的提示进行操作，发现不能成功，后来各种debug，最后发现了该解决…"}, {"id": "6972154788976787493", "title": "koa2与nodejs实战", "desc": "Nodejs的特点和应用场景 nodejs使用了事件驱动、非阻塞式I/O 模型，轻量又高效。 事件驱动是一种处理数据的方式，这种方式同传统的数据处理方式CRUD （增加、读 取、更新、删除）截然不同。"}, {"id": "6844904168004517901", "title": "前端工程化之用commintlint + husky实现git提交规范化", "desc": "其中type和subject是必需的，其他是可选的，type 用于说明 commit 的类别，也可以自己在配置文件中更改或者扩展。subject是 commit 目的的简短描述，不能超过50个字符，且结尾不加英文句号。 husky能够实现 git hooks ，就是在我们使用 …"}, {"id": "6844903972256350222", "title": "nodejs — path 模块", "desc": "path 模块是 nodejs 中用于处理文件/目录路径的一个内置模块，可以看作是一个工具箱，提供诸多方法供我们使用，当然都是和路径处理有关的。同时在前端开发中 path 模块出现的频率也是比较高的，比如配置 webpack 的时候等。本文是对该模块中一些常用的方法进行介绍，走…"}, {"id": "6844903699244908558", "title": "ES6 系列之异步处理实战", "desc": "异步处理方式的改变。 为了实现这个功能，我们需要用到几个 Nodejs 的 API，所以我们来简单介绍一下。 readdir 方法用于读取目录，返回一个包含文件和目录的数组。 stat 方法的参数是一个文件或目录，它产生一个对象，该对象包含了该文件或目录的具体信息。此外，该对象…"}, {"id": "6844903496748122119", "title": "再见，babel-preset-2015", "desc": "Babel 的官网上在9月宣布 ES2015 / ES2016/ ES2017 等等 ES20xx 时代的 presets 通通被废弃（deprecated），取而代之的是 babel-preset-env，并且承诺它将成为“未来不会过时的（future-proof）”解决方案。"}, {"id": "6844903778181709838", "title": "10_Node js 连接 MySQL 与 MongoDB", "desc": "这里对安装 MySQL 与 MongoDB 等软件工具不做讲解。 接下来就该实现增删改查的功能了。 刷新 Navicat，会看到新添加了一条数据。 刷新 Navicat，会看到 id 为 0 的那条数据被删除了。 刷新 Navicat，会看到 id 为 1 的那条数据被修改了。…"}, {"id": "6915214622601674760", "title": "来，让我们一起来盘盘 Nodejs 环境变量(process.env)", "desc": "它是 Nodejs 应用程序中，process.env 属性，返回包含用户环境的对象，所以它不可以在客户端侧代码中使用，简单得来说就是浏览器上，打包后的静态资源。 懂的同学马上就懂了，不懂的同学你来看：VUE_APP_TITLE，标重点了，VUE_APP。 同样在 React …"}, {"id": "6844903594211147789", "title": "浅谈js的内存与闭包", "desc": "主要结合了内存的概念讲了js的一些的很简单、但是又不小心就犯错的地方。 结论：js执行顺序，先定义，后执行，从上到下，就近原则。闭包可以让外部访问某函数内部变量，而且会导致内存泄漏。 引用类型的值，也就是对象，一个对象是某个引用类型的一个实例，用new操作符创建也可以用字面量的…"}, {"id": "6844904098047737870", "title": "使用node手撕jsonp跨域", "desc": "近日遇到了公司喜好JSONP的后端，联调时候第一次磨磨蹭蹭没有进入成功，遇到报错花了些时间，于是乎自己手写一遍加深理解吧。 实现原理是使用 script link imgsrc数据跨域，约定callback，使用参数传递请求的数据。"}, {"id": "6844903694496956424", "title": "React最佳实践尝试（三）", "desc": "将定义好的interface统一放到typings目录下面。 前端组件写完了之后，别忘了对应的node中的路由和ssr的代码。 最后访问localhost:7999/demo页面就可以查看效果了。 第一个页面构建完毕之后，我们可以在写一个复杂一点的todolist页面来检查一下…"}, {"id": "6844903847161233422", "title": "【Node】搭建一个静态资源服务器", "desc": "Node 的 http 模块提供 HTTP 服务器和客户端接口，通过require('http')使用。 先创建一个简单的 http server。配置参数如下： Node 服务器每次收到 HTTP 请求后都会调用 http.createServer() 这个回调函数，每次收一…"}, {"id": "6971622288961568799", "title": "开发项目脚手架", "desc": "什么是脚手架？ 一般每个公司或者团队的前端项目，都会有固定的项目结构，打包配置方案，代码风格规范等。但是不同项目，项目名称，配置等又有所不同。 脚手架就是可以帮助我们生成特定的项目结构，打包配置方案，"}, {"id": "6844904068838588430", "title": "node 写一个自动监听文件并读写配置的脚本", "desc": "最近因为工作，需要写一个脚本来自动读取文件夹下的某个文件，把其中的内容写到另一个新生成的文件中。因为这种场景还是挺常见的，网络上也搜不到好的(手把手教学的)解决方案，这对于还没学过 node.js 的前端小白来说，很不友好啊～ index.js 中的内容是啥与本文无关，只是做个…"}, {"id": "6971711526570999845", "title": "nestJs学习笔记一", "desc": "1、第一步，通过脚手架安装创建项目 全局安装脚手架：npm i -g @nestjs/cli 创建项目架构：nest new 项目名称 运行项目(热更新)：npm start:dev 2、第二步，创建"}, {"id": "6844903894284238856", "title": "使用 Babel 进行抽象语法树操作", "desc": "Babel是一个Javascript编译器，他能让你现在就开始使用未来版的Javascript。曾经的Javascript由于语言本身的设计缺陷，饱受程序员们的诟病，如今随着ES语言规范的制定与发展，加上Typescript的横空出世，Javascript开始逐年霸占最流行语言…"}, {"id": "6857082008967839751", "title": "node-express的使用", "desc": "Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。 Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能…"}, {"id": "6844904121305153544", "title": "【手把手】带你实现一个静态博客网站框架【pblog】", "desc": "你需要在项目根目录下新建一个pblog.config.js文件，然后使用AMD规范导出一个对象。 so easy，github上随便搜一下markdown关键词，找个星星最多的，看一下文档，然后就可以来模拟了。 就是这头巴哥犬没错了。 以上代码应该是很容易理解的。 这样咱们完成…"}, {"id": "6844903512308973576", "title": "从地狱到天堂，Node 回调向 async/await 转变", "desc": "Node7 通过 --harmony_async_await 参数开始支持 async/await，而 async/await 由于其可以以同步形式的代码书写异步程序，被喻为异步调用的天堂。然而 Node 的回调模式在已经根深蒂固，这个被喻为“回调地狱”的结构形式推动了 Pro…"}, {"id": "6905343037485154311", "title": "EventLoop、Webkit、V8原理分析之基础知识", "desc": "C++_几乎_是C语言的一个超集，它与C语言的基本语法有许多相同之处，例如变量和函数的声明，原生数据类型等等。 | 程序代码区 | 代码段 | 代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行1次（进程）；如果反复，则需要使用跳转指令。如果进行递归，则需要借助栈来实…"}, {"id": "6972549333749071879", "title": "每天一个nodejs模块-child_process", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 前言 在很早之前，我刚接触到shell命令时，曾经思考过，如果一个shell脚本可以让我通过接口来触发的话，是不是就会很大程度的解放我们的无用操作"}, {"id": "6917192648424390669", "title": "Node.js 缓冲区的完整指南", "desc": "二进制流是大量的二进制数据的集合。由于通常情况下二进制流的大小挺大的，因此二进制流一般不会一起运送，而会在运输前切分成小块然后逐一发送。 当数据处理单元暂时不再接收其他数据流时，剩余的数据将会被保留在缓存中，直到数据处理单元准备好接收更多数据为止。 Node.js 服务器一般需…"}, {"id": "6844904194185379854", "title": "nodejs event loop", "desc": "event loop是指由libuv提供的，一种实现非阻塞I/O的机制。具体来讲，因为javascript一门single-threaded编程语言，所以nodejs只能把异步I/O操作的实现（非阻塞I/O的实现结果的就是异步I/O）转交给libuv来做。因为I/O既可能发生在…"}, {"id": "6844903922457378824", "title": "面向前端工程师的Nodejs入门手册(二)", "desc": "继上一篇介绍了基于Nodejs的http服务和文件操作的内容后，本篇内容主要介绍前端工程师在日常工作中较少接触到的TCP相关知识内容，从Nodejs的TCP模块入手，通过实例看看TCP是怎么一回事。 tcp是一种面向连接的、可靠的、基于字节流的传输层通信协议，TCP层是位于IP…"}, {"id": "6905215653289033741", "title": " 探索异步迭代器在 Node.js 中的使用", "desc": "目前在 JavaScript 中还没有被默认设定 [Symbol.asyncIterator] 属性的内建对象，但是在 Node.js 中已有部分核心模块（Stream、Events）和一些第三方 NPM 模块（mongodb）已支持 Symbol.asyncIterator …"}, {"id": "6844903636418428936", "title": "TS+Nodejs+Express构建用于前端调试的WEB服务器", "desc": "本文将简述如何使用vscode [Visual Studio Code]开发工具来搭建一套TypeScript的开发环境，其中我们会使用Express这套灵活的web应用开发框架来提高我们的编码效率，另外我们还会增加nodemon这个程序来自动监控你源代码的改变并自动重新启动服…"}, {"id": "6907065305965527054", "title": "Node dump分析", "desc": "启动程序后，访问URL，可以看到CPU满载了。 通过coredump分析我们可以定位到出问题的js文件和方法——死循环的位置。 本文演示了Node dump分析的过程，重在动手实践，为生产服务排障打下一定的基础，相关原理性知识可以参见官方说明。"}, {"id": "6900863722651451399", "title": "Node - 路由（四）", "desc": "“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine”"}, {"id": "6909018241721434126", "title": "nodejs+express 最简易的连接数据库", "desc": "环境搭建1.首先需要自行安装node环境2.然后全局安装expressnpminstall-gexpress3.创建express项目文件夹express创建项目默认为jade模板引擎，若使用其他引擎"}, {"id": "6844903695012872199", "title": "[React.js]组件卸载如何自动取消异步请求", "desc": "某次路过同事的工位，刚好看到同事在写面试评价，看到里面有一个问题：组件卸载时自动取消异步请求问题，不及格。 然而这个写法并没有真的abort掉fetch请求，只是不去响应fetch成功之后的结果而已，这完全没有达到取消异步请求的目的。 于是我去问了问同事，如何真正abort掉一…"}, {"id": "6844903569242456078", "title": "服务器推送 SSE 了解一下？", "desc": "hello~亲爱的看官老爷们大家好~过完年第一周已经结束，是时候开始制定新的工作计划了。主要负责的项目是数据可视化平台，而使用中如果服务器能有推送能力让页端得到相关通知的话，就能实现很多功能上的优化。鉴于项目中 Node 端已经正式投入使用，前端拥有了自己的服务器，搞事情起来自…"}, {"id": "6844903591505821703", "title": "Node.js进阶：cluster模块深入剖析", "desc": "借助node自带的cluster模块，我们可以较为轻松地对外提供集群服务，提高系统吞吐率。本文对cluster模块进行深入剖析，重点谈探讨多个worker之间如何共享端口，以及master进程如何在多个worker之间进行请求分发。"}, {"id": "6844903656760803341", "title": "开发一个Node命令行小玩具全过程--高颜统计工具", "desc": "命令行工具对于我们来说非常的熟悉，一些命令行的操作也极大的简化了我们的日常工作。本文就基于我写的一个Node命令行代码计数器来进行展开。 相信熟悉linux系统的，对于一些ps,grep,cp,mv…等命令用起来应该爱不释手，这也是我想要开发一个便捷命令行的初衷，其次就是记录一…"}, {"id": "6956793591440244773", "title": "NodeJS中的LRU缓存（CLOCK-2-hand）实现", "desc": "在文章的开始我们需要了解什么是缓存？缓存是预先根据数据列表准备一些重要数据。 没有缓存的话，系统的吞吐量就取决于存储速度最慢的数据，因此保持应用程序高性能的一个重要优化就是缓存。 web应用程序中有两"}, {"id": "6844904071619411981", "title": "这是一个基于 Vue SSR Genesis 框架快速开发的模板例子", "desc": "介绍这是一个基于VueSSRGenesis框架快速开发的模板例子启动关于Genesis这是一个为Followme5.0诞生的VueSSR框架，也许上线后我们会开源，也许日后会🔥呢？项目的目录结构app"}, {"id": "6844903859190497294", "title": "深入解析 Node.js 的 console.log", "desc": "当你开始用 JavaScript 进行开发时，可能学到的第一件事就是如何用 console.log 将内容记录到控制台。如果你去搜索如何调试 JavaScript，会发现数百篇博文和 StackOverflow 文章都会简单的告诉你用 console.log。因为这是一种很常见…"}, {"id": "6844903655347486727", "title": "node工程-如何设计定时任务", "desc": "本地配置的任务，启动非常容易，将实例创建就行。远程配置的任务，为了实现配置与实现类的关联，需要做好如下约定："}, {"id": "6844903568093216782", "title": "关于实现一个Node.js静态服务器你所需要知道的ALL", "desc": "当你输入一个url时，这个url可能对应服务器上的一个资源（文件）也可能对应一个目录。 So服务器会对这个url进行分析，针对不同的情况做不同的事。 如果这个url对应的是一个文件，那么服务器就会返回这个文件。 如果这个url对应的是一个文件夹，那么服务器会返回这个文件夹下包含…"}, {"id": "6890901838158594055", "title": "Node本地起一个服务器", "desc": "这里推荐使用nodemon app.js（自己全局安装）,这样的话，如果项目内文件发生变化，会进行热更，不需要再执行node app.js重启服务。 服务器启动后 ，通过http://localhost:3000/api/goods/home（这里只是用api/goods/ho…"}, {"id": "6844903496165277709", "title": "使用pm2+nginx部署koa2(https)", "desc": "这段时间空余的时候一直在重新写自己的博客，之前是采用的 hexo 生成的博客然后跑在 git page 上的。这次重写是选择的 koa2 这个框架。 今天先来写一下关于 koa2 网站运行部署以及 https 配置。 目前网站的大致结构是： koa2 的应用跑在 1113 端口…"}, {"id": "6916424375734370317", "title": "🍖从一个记事本入门node脚手架开发 ", "desc": "小猪配淇手上纹，我们都是打工人🤣。 使用三大金刚做前端开发的小伙伴想必都使用过各家的脚手架工具吧，不知道有没有手痒痒的想试着写一下的，啦啦啦，反正我看着作者的文章是手痒啦。之前一直想着学习NodeJS脚手架开发，可是每次都被自己的懒癌打败，最近终于有时(hua)间(shui)…"}, {"id": "6863665123278618637", "title": "Graphql + Node 实践（一）：环境搭建", "desc": "1. 搭建 typescript + webpack + nodemon 的运行环境 0. 需求分析 1. 安装依赖 2. 创建文件目录 3. 配置webpack基础配置 1. client 代码打包配置 2. node server配置 3. 测试配置结果 4. 配置node…"}, {"id": "6979631386369982478", "title": "NodeJs 信号", "desc": "。 前言 开始写一些博客主要是在看完代码后再温故总结一遍, 也是为了后面回头也能查阅。本系列会从官网的例子出发, 尽可能以链路追踪的方式记录其中源码核心模块的实现, 本篇例子来源 libuv - si"}, {"id": "6844903573642280974", "title": "node中的缓存机制", "desc": "缓存是node开发中一个很重要的概念，它应用在很多地方，例如：浏览器有缓存、DNS有缓存、包括服务器也有缓存。 客户端访问服务器请求资源，请求成功之后客户端会缓存到本地，缓存到本地之后，如果以后客户端再请求该资源此时不需要请求服务器了，直接访问本地的就可以。 客户端请求数据，现…"}, {"id": "6882184522159849485", "title": "node通过dubbo2.js调用java dubbo服务(rpc)", "desc": "1. dubbo是什么 随着网站规模的增大，系统发展一般会经历单一应用架构、垂直应用架构、分布式服务架构。随着垂直应用越来越多，应用之间的交互不可避免，将核心业务抽取出来作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。在分部署服务架构中如何处理微…"}, {"id": "6844903999032803336", "title": "Redis 实现分布式锁（Node.js）", "desc": "在 course-se 的提交服务中，为了限制同一用户在规定时间（5秒）内，无法进行二次提交，开发人员实现了基于 Redis 的分布式锁。通常，我们称该业务场景为节流（Throttle）。 在阅读此部分代码时，我一开始寻思着完全可以使用一个 Map 维护各个用户及其剩余时间的关…"}, {"id": "6844904127323963399", "title": "如何用 Node.js 实现一个微型 CLI", "desc": "命令行界面（英语：command-line interface，缩写：CLI）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。 首先创建一个接口的实例，用于处理流信息，例：输入、输出、提示字符串、自动补全…"}, {"id": "6844903849447129096", "title": "node.js全栈开发之旅（启航篇），一分钟实现todo list后台", "desc": "做为一名前端开发工程师，时常纠结于是否要学习后端开发，成为一名真正的全栈，后端开发当然首选是node.js，因为不需要重新学习一门新的开发语言，可是node.js好像很难啊，深入浅出node.js这本书成功劝退了许多想学全栈的同学，因为一开始就把后端开发最艰深的一面展示了出来，…"}, {"id": "6844904016313319437", "title": "日问周刊 | 全栈面试汇总 | 第五期", "desc": "我在github上新建了一个仓库日问，每天至少一个问题。有关全栈，graphql，devops，微服务以及软技能，促进职业成长，欢迎交流。以诸葛武侯的诫子书与君共勉第一期第二期第三期第四期本期【Q10"}, {"id": "6982392960985858061", "title": "使用Node.js创建一个密码生成器", "desc": "一、 准备工作 1.1 创建项目 1.2 安装依赖 1.3 创建入口文件index.js 举个🌰：来了解process.argv 终端执行命令 在终端可以看到 执行命令 第三个参数：generate "}, {"id": "6948390000723492877", "title": "nodeJs生成项目文件中用到的本地图片", "desc": "可以发现，终端运行命令后生成了该文件中使用到的所有本地图片的文件。 1. 初始化 如上，我们将在终端运行node copyimg [项目文件名]生成图片文件，并将得到的图片文件保存到电脑桌面的copyimg文件夹里。 2. 获取图片文件的绝对路径 项目中的本地图片一般会以相对路…"}, {"id": "6844903618173370375", "title": "前端娱乐圈大事记", "desc": "前端娱乐圈大事记, 记录前端近年来的新闻。 欢迎提 PR，补充更多新闻 直接在 index.html 里加上新闻就好，相信你能看懂。 因最近发生的 deno issues 事件有感，感慨前端实在是太多大新闻了。 于是在六一，买了个域名，做了这个小玩具调侃一下。 前端正在发展中"}, {"id": "6844903544462524424", "title": "阿里国际UED | 打造高可靠高性能React同构服务端渲染方案", "desc": "随着React的兴起, 结合Node直出的性能优势和React的组件化，React同构已然成为趋势之一。享受技术福利的同时，直面技术挑战，在复杂场景下，挑战10倍以上极致的性能优化。"}, {"id": "6844903692898942990", "title": "全方位理解JavaScript的Event Loop", "desc": "下面我们一个一个的来了解 Event Loop 相关的知识点，最后再一步一步分析出本段代码最后的输出顺序。 进程： 运行的程序就是一个进程，比如你正在运行的浏览器，它会有一个进程。 线程： 程序中独立运行的代码段。一个进程 由单个或多个 线程 组成，线程是负责执行代码的。 单线…"}, {"id": "6844903616159940621", "title": "精读《如何利用 Nodejs 监听文件夹》", "desc": "本期精读的文章是：How to Watch for Files Changes in Node.js，探讨如何监听文件的变化。 如果想使用现成的库，推荐 chokidar 或 node-watch，如果想了解实现原理，请往下阅读。 但你可能会发现这个回调执行有一定延迟，因为 w…"}, {"id": "6844903645620731918", "title": "通过几句node.js为前端初学者写个常用工具", "desc": "具体是什么工具，我语言组织了好久还是觉得不够好，还是以几张图来告诉大家它实现的一个效果以及如何使用它。 补充：因为最近做web app以及微信比较多，es6的很多语法在安卓机上总是报错，一直没时间去看哪些语法是哪些安卓机可以识别的，于是为了安全以及效率起见，就不使用es6相关的…"}, {"id": "6991062364611149855", "title": "Node.js的安装与配置", "desc": "什么是Node.js？ Node.js 官方网站：https://nodejs.org/en/ 一、下载 官方下载地址：https://nodejs.org/zh-cn/download/ 二、安装 "}, {"id": "6870691083186241549", "title": "一个 Node 占用 CPU 过高的问题定位过程", "desc": "有天晚上，负责人跟我说有台机器负载很高，在一众服务器中显得格格不入。 看起来在 20% 左右徘徊，但是这台机器上的业务流量很少，不仅如此，用来给这台机器上业务容灾的 fex00 CPU 负载也不低，13% 左右。 Node 引入过的模块都会进行缓存，而且缓存的是编译和执行之后的…"}, {"id": "6844903718610010125", "title": "基于Electron + nodejs + 小程序 实现弹幕小工具（开篇）", "desc": "很久以前，弹幕还只是出现在视频中，边看视频边吐槽，成为不少人的习惯。 后来，弹幕出现的地方就越来越多了。酒吧、企业年会、行业峰会、校园晚会等等场景，凡是有大屏幕的地方，基本上弹幕都能派上用场。不得不说，在很多场景下，弹幕是一大神器。 为了提高用户的参与度，应该尽量减少用户的使用…"}, {"id": "6844903636766556167", "title": "node ~ zip压缩 && 文件加密", "desc": "blowfish算法是一种对称的加密算法,对称的意思就是加密和解密使用的是同一个密钥。"}, {"id": "6844904197167513614", "title": "Easy-Monitor 3.0 开源 - 基于 Egg 的 Node.js 性能监控解决方案", "desc": "I. 项目简介 ... 今天我们很荣幸能回馈社区，正式开源 Easy-Monitor 3.0 版本，它是一款Node.js 应用性能监控与线上故障定位解决方案。 旨在 Node.js 的开源生态工具链上，做一些能帮助到想使用和正在使用 Node.js 的开发者更好地感知自己的 …"}, {"id": "6890436964454465550", "title": "[译] 用 Typescript + Node 配合 mongDB 写简单接口", "desc": "使用 node 完成一个 todolist app 的 server 端，其中包括基本的 ts 配置方案和完成了 Models 和 Controler 层。 include: 告诉编译器具体需要编译的地址. concurrently 最主要的工作就是帮助我们编译 Typescr…"}, {"id": "6919396936382414861", "title": "Content-Length的计算", "desc": "在写live-dev-server，向html文件中inject代码片段时，设定Content-Length出现了ERR_CONTENT_LENGTH_MISMATCH。 Content-Length实体标头指示发送给接收者的实体主体的大小（以字节为单位）。用十进制标识的8位字…"}, {"id": "6844903721663463438", "title": "Node.js Streams 基础总结", "desc": "前段时间遇到项目上需要请求资源方获取opus编码的音频文件，然后置入ogg容器中传输给前端标准化播放器进行播放的需求。流程模式是，通过服务上建立的socket连接不断接收资源方传送的文件块。而前端请求中层服务是HTTP请求。 一个简单的需求，在Node.js服务中，比较适合处理…"}, {"id": "6893727183722774541", "title": "5.持久化数据存储", "desc": "上面的query查询层层嵌套，不仅操作繁琐，而且存在回调地狱的问题，通过async/await进行代码封装，不仅能够简化操作，而且能够解决回调地狱的问题。"}, {"id": "6844903607414816776", "title": "React16——看看setState过程中fiber干了什么事情", "desc": "下图是一个典型的create-react-app创建的项目，其中Text.js是我新增的子组件，在App.js中引用到。 接着，执行了updater上的enqueueSetState方法，每一个实例都会有一个updater（更新器），updater的作用在下面介绍，在当前App…"}, {"id": "6934854837267857416", "title": "【译】The Clean Architecture", "desc": "基于 NodeJS and Good Practices 想尝试下分层，在做的时候发现另外一个类似的分层，继续翻译记录。 在过去的几年里，我们看到了一系列关于系统架构的想法。其中包括： 尽管这些架构在细节上都有所不同，但它们非常相似。它们都有相同的目的，即关注点分离。它们都通过…"}, {"id": "6844903694618591239", "title": "手把手教你用node撸一个简易的headless爬虫cli工具", "desc": "headless爬虫主要靠它。它可以模拟用户打开网页的过程，但是并没有打开网页。写过自动化测试的同学应该对这个会比较熟悉，因为用它爬虫的过程跟自动化测试的过程几乎是一样的。 基于node的cli命令行工具。利用它，我们可以很方便的写出各种各样的cli命令。 交互式命令行工具。什…"}, {"id": "6844903577920471054", "title": "FEZ前端模块化工程开发框架", "desc": "FEZ 是面向前端模块化工程的开发框架。主要目的是统一前端开发模式和项目开发结构，自动化前端工作流，提高开发效率和开发质量。使用持续集成等软件工程的架构模式，集成众多业界先进的解决方案，让研发人员更专注于业务逻辑的实现。核心包括功能模块化、结构规范化、及开发自动化。 采用响应式…"}, {"id": "6844903649273970702", "title": "让你听见的 HTML5", "desc": "HTML5 多媒体应用现在还没被大部分挖掘出来，像普通的页游只能简简单单的做一些 2D 渲染，主要差距还是在性能上。H5 天生是动态语言，需要经过解析、编译。而且 JS 还是一个弱类型语言，虽然有 JIT 的帮助，但是解析引擎本身就有一个天花板，你无法、或者直接点，不能让 JS…"}, {"id": "6844903881940418574", "title": "基于 Node.js 的轻量级云函数功能实现", "desc": "在万物皆可云的时代，你的应用甚至不需要服务器。云函数功能在各大云服务中均有提供，那么，如何用“无所不能”的 node.js 实现呢？ 云函数是诞生于云服务的一个新名词，顾名思义，云函数就是在云端（即服务端）执行的函数。各个云函数相互独立，简单且目的单一，执行环境相互隔离。使用云…"}, {"id": "6844903792924688397", "title": "在NPM发布自己造的轮子", "desc": "自从Node.js出现，它的好基友npm(node package manager)也是我们日常开发中必不可少的东西。npm让js实现了模块化，使得复用其他人写好的模块（搬砖）变得更加方便，也让我们可以分享一些自己的作品给大家使用（造轮子），今天这里我就给大家分享一个用命令行压…"}, {"id": "6844904048303276039", "title": "《深入浅出Node.js》学习笔记（一）", "desc": "Node诞生于2009年3月。 Node的别名：Nodejs、NodeJS、Node.js。 设计高性能Web服务器的几个要点：事件驱动、非阻塞I/O。 考虑到高性能、符合事件驱动、没有历史包袱这三个主要原因，JavaScript成为了Node的实现语言。 Node可以构建服务…"}, {"id": "6844903589538709518", "title": "实践数据回滚解决方案", "desc": "我在大量Nodejs开发实践中，发现回滚是一个非常严谨的话题，我们应该重视这个回滚话题。我们不能祈祷上天程序不要出错，而忽略掉错误处理方案。 比如，我们在开发一个发布系统的过程中，有一系列的操作，数据库CRUD，FS操作项目文件，同时对gitlab的api进行操作。这个时候我们…"}, {"id": "6844903581930225671", "title": "Javascript中装饰器的实现原理", "desc": "基于Node的web服务器开发中使用decorator对请求进行权限校验和数据格式的处理是一个看起来比较漂亮的写法，这里正好整理一下对javascript中的decorator的理解。 decorator的概念在其他语言中早有存在，在javascript中目前（2017/09/…"}, {"id": "6907489188245946376", "title": "Node - 操作数据库（六）", "desc": "“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine”官网的一句介绍大致是说“Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时”，简单来说就是一个能让…"}, {"id": "6844903944632664078", "title": "node express中使用HTML模板", "desc": "上面实际上是调用了ejs的.renderFile()方法，ejs.__express是该方法在ejs内部的另一个名字。 因为加载的模板引擎后调用的是同一个方法.__express，所以如果使用的是ejs模板，不用配置该项。 如果这里设置为html文件，设置路由指定文件时，只需写…"}, {"id": "6974421639056326669", "title": "Node系列学习之登录实现(二)", "desc": "在之前写的文章 Node系列学习之登录实现(一) 中学习了在Node中解析, 设置Cookie,今天开始学习Node中设置session"}, {"id": "6908999327709200392", "title": "nodejs  3分钟学会系列教程（3）  npm 第三方模块 fs模块", "desc": "1、包1）使用包的方法或者说是思想需要先有第一步需要在npmjs.com找到需要使用的包第二步安装这个包第三步看文档怎么使用这个包2）举个例子如果想使用md5加密模块怎么操作？npminit--yes"}, {"id": "6919027513628819463", "title": "Next.js + Typerom 实践 - 博客系统(三) 操作数据库", "desc": "P.S. 一开始是使用知乎写的，所以打着知乎的水印 Migration 数据迁移，用来对数据库进行写入或回撤。 Entity 实体，用类和对象来操作数据表和数据行。 Connection 连接，与数据库连接，默认最多 10 个。 Manager / repo，两种 API 封装…"}, {"id": "6993336586863640583", "title": "NODEJS 初学 ｜ 8月更文挑战", "desc": "1,NODE.js 概述 1，简介 一个线程大约需要耗费2MB内存， 一个8G的内存服务器最大连接数4000个左右 Java，PHP， ASP.NET为每一个客服端连接创建一个新的线程 Node.js"}, {"id": "6945649916258156580", "title": "【深入Node探究】（1）“Node特点与应用场景” 有四问", "desc": "它自身非常简单，通过通信协议来组织很多Node，非常容易通过扩展来达成构建大型网络应用的目的。每一个Node进程都构成这个网络应用中的一个节点，这是它名字所含意义的真谛。 作为后端JavaScript的运行平台，Node保留了前端浏览器JavaScript中那些熟悉的接口，没有…"}, {"id": "6881909320653471758", "title": "为Node.js加一个DB类", "desc": "作为前端工程师的我们，可能不懂PHP、Java等语言，但也想创建自己的服务，那么Node.js是一个非常好的选择。 而在学习或者使用Node.js的时候，不免会与MySQL等数据库进行连接交互。而笔者在学习Node之前，使用过ThinkPHP5，其中内置的DB类让我半吊子“后端…"}, {"id": "6993328232376467493", "title": "什么是Node.js", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 什么是Node.js 通常被用于一个BFF层 Backend For Frontend 服务于前端的后端，通俗说就是一个为前端业务提供数据的"}, {"id": "6844903552012255245", "title": "探索 JavaScript 中的依赖管理及循环依赖", "desc": "我们通常会把项目中使用的第三方依赖写在 package.json 文件里，然后使用 npm 、cnpm 或者 yarn 这些流行的依赖管理工具来帮我们管理这些依赖。但是它们是如何管理这些依赖的、它们之间有什么区别，如果出现了循环依赖应该怎么解决。 在回答上面几个问题之前，先让我…"}, {"id": "6844903910793019399", "title": "node命令行工具之实现项目工程自动初始化的标准流程", "desc": "可以看出，传统的初始化步骤，花费的时间并不少。而且，人工操作的情况下，总有改漏的情况出现。这个缺点有时很致命。 甚至有马大哈，没有更新项目仓库地址，导致提交代码到旧仓库，这就很尴尬了。。。 命令行工具的角色，是负责将两个信息进行融合，提供一个交互平台给用户。 配置信息的获得，需…"}, {"id": "6844904134462685191", "title": "Nodejs进阶：crypto模块中你需要掌握的安全基础知识", "desc": "互联网时代，网络上的数据量每天都在以惊人的速度增长。同时，各类网络安全问题层出不穷。在信息安全重要性日益凸显的今天，作为一名开发者，需要加强对安全的认识，并通过技术手段增强服务的安全性。 crypto模块是nodejs的核心模块之一，它提供了安全相关的功能，如摘要运算、加密、电…"}, {"id": "6844903870716444686", "title": "sequelize V5 升级记录", "desc": "由于官方提供了 typescript 的支持，不需要在安装 @types/sequelize。 由于使用了 typescript 编译，解决问题。 由于 sequelize 的 type 此时由官方维护，重新定义了 Model 等类型。 虽然目前官方已经支持了对 Model 的…"}, {"id": "6844903950634713095", "title": "NodeJs 与最佳实践（译）", "desc": "软件随时可能更改，而定义代码质量的一个方面就是更改代码的难易程度。但是是什么使它是这样的？ 无论是功能，类还是模块，它们都可以应用于单一职责原则和关注点分离 the single responsibility principle and the separation of co…"}, {"id": "6844904164389027853", "title": "从 Nodejs 如何解决模块循环依赖问题来一点关于模块的发散思考", "desc": "要解决这个问题, 说起来也很简单, 只要把重来一遍变成中断就可以了, Nodejs 称为 unfinished copy, 第二进入 a.js 模块的时候, 从require b.js 的后面继续往下读取, 这样就将环解开又回到了原先串行的解析方式, 代价就是你得知道 requ…"}, {"id": "6844904168289730568", "title": "Pre-commit：如何使用 husky、lint-staged和prettier优化你的项目", "desc": "husky 可以用于实现各种 Git Hook。这里主要用到 pre-commit这个 hook，在执行 commit 之前，运行一些自定义操作 这样，当在终端输入 git commit命令提交代码的时候，Lint 程序便会自动检查本次提交所修改的文件是否符合本项目的代码规范。…"}, {"id": "6844903598497742861", "title": "基于Koa2/React的NodeJS全栈开发框架", "desc": "Github上的脚手架实在太多，可能大多数都是只专注在前端的web开发，例如流行的React生态中的create-react-app和Vue生态中的Vue-cli, 但是可能作为像我一样的全栈开发，一个只关注在前端开发的脚手架满足不了所有的需求，我们可能需要开发更复杂的全栈JS…"}, {"id": "6844903870380900365", "title": "不到50行代码搞懂跨域（CORS）", "desc": "使用 Hapi 框架在实例 CORS 场景下测试首部字段作用。这里不需要你掌握 Hapi 框架的使用，以及任何 Node 知识。 下面我们会对照这 MDN 上 CORS 部分的讲解（下面简称 讲解），使用具体代码来测试首部字段的作用。 主体结构我们按照 Hapi 官网的示例，修…"}, {"id": "6844903727539683335", "title": "V8 中更快的异步函数和 promises", "desc": "一直以来，JavaScript 的异步处理都因其速度不够快而名声在外。 更糟糕的是，调试实时 JavaScript 应用 - 特别是 Node.js 服务器 - 并非易事，特别是在涉及异步编程时。 幸好，这些正在发生改变。 本文探讨了我们如何在 V8（某种程度上也包括其他 Ja…"}, {"id": "6844903609201606669", "title": "Node-Web-Console——基于 Node.js 的网页版 shell", "desc": "Node-Web-Console（以下简称 NWC）是一个基于 Node.js 开发的网页版 shell 应用，其想法来源于实验室 SDN 相关项目的一次组会讨论，需求大致是在网页中嵌入 shell，然后实现从前端页面展示的网络拓扑中直接进入虚拟机节点进行简单的管理。具体实现上…"}, {"id": "6949879294185193502", "title": "一个终端同时运行多条Nodejs命令", "desc": "项目开发中，常遇到需要并行处理多个任务的情况，比如一个命令负责启动本地开发服务器、一个命令负责打包静态资源js、css等，这种需求在Micro frontends里更加明显：同时启动多个单独的微应用。"}, {"id": "6844904070222708744", "title": "Nest.js核心概念浅析", "desc": "在传统Node.js服务端应用中，controller用于处理route对应的客户端请求。每个controller可以拥有多个route，不同的route会执行不同的action（行为）。在Nest中，我们可以使用内置的decorators来对request, response…"}, {"id": "6844903698322161672", "title": "Node.js 11 发布，Node 10正式进入LTS", "desc": "作者｜覃云今天，Node基金会正式发布Node.js11，同时宣布，到10月30日，Node.js10.x将成为LTS（LongTermSupport）版本，也就是长期支持版本。Node官方建议如果你"}, {"id": "6847902217052094478", "title": "webpack+vue+koa开发博客指南", "desc": "此项目步骤很详细，任何人只要按着步骤来百分百能复现。 博客采用前后端分离，前端用vue+ts+stylus开发，基于MVVM模式；后端用koa2+mysql+sequelize ORM开发，基于MVC模式。前后端由webpack进行合体，并且对webpack进行了生产模式、开发…"}, {"id": "6933221201653268488", "title": "自动化部署前端项目到服务器", "desc": "为实现需求中的解耦合理与逻辑清晰/灵活，需要关注整体程序逻辑，这里选择封装相关功能实现，并在主程序中自由调度（可灵活调用、关闭、修改相关功能），并对于当前所执行的功能给与提示，以保证功能实现的完整性和异常提示。 到这里就完成了对程序功能构建的梳理工作，下面进入项目实现。 使用c…"}, {"id": "6977645145315344414", "title": "Node.js+Koa2+MySQL实现小程序接口", "desc": "Node.js+Koa2+MySQL实现小程序接口 文件目录 安装依赖 自动注册路由 全局异常处理 http-exception.js 定义不同异常类型类 exception.js 利用洋葱路由方式进"}, {"id": "6844903956359938061", "title": "源码解读系列之 chokidar", "desc": "许多工具（vs code，webpack，gulp）都带有监控文件变化然后执行自动处理的功能。有时候会想到，这些工具都是如何优雅地实现文件变化的呢？为什么我的开发环境在某些工具的 watch 模式下，cpu 会疯狂飙高，而换一个操作系统却又不会出现这些问题？本着好奇心，借此了解…"}, {"id": "6866414204715597831", "title": "全栈开发必备技能：构建RESTful API的13种最佳实践", "desc": "Facebook、GitHub、Google以及其他许多巨头都需要一种服务和消费数据的方式。在当今的开发环境中，RESTful API仍然是服务和消费数据的最佳选择之一。 但是你是否考虑过学习行业标准？设计RESTful API的最佳实践是什么？从理论上讲，任何人都可以在不到五…"}, {"id": "6844903946444603400", "title": "http-server的安装、前端使用http-server启本地服务", "desc": "http服务器，它足够强大便于生产和使用，用于本地测试和开发。 有时候我们打开一个文档使用file协议打开的时候，不能发送ajax请求，只能使用http协议才能请求资源，具体的区别大家可以去参考[这篇文档] (https://www.cnblogs.com/lishanlei/…"}, {"id": "6971344863648284708", "title": "第一个 NodeJS 程序", "desc": "上一节我们简单介绍了 NodeJS 的特性，今天我们就上手开发，用 NodeJS 写一个「石头、剪刀、布」的小游戏。 游戏过程 这个游戏大家肯定都玩过了，简单描述一下游戏过程： 玩家输入一个手势，如 "}, {"id": "6844903704123211783", "title": "开发者需要了解的nodejs中require的机制", "desc": "可以认为require模块是一个command，module模块是所需模块的organizer。 require模块暴露出一个函数（就像上面看到的那样）。当require()函数传入一个path参数的时候，node会依次执行如下步骤： Resolving : 找到path的绝对…"}, {"id": "6844903607297376263", "title": "深入跨域问题(4) - 利用代理解决跨域", "desc": "在上面的文章中，我们依此了解到，CORS ，JSONP 两种方式实现跨域请求。 这两种方法，都需要 前后端进行配合 才能够正确地处理跨域问题。 今天介绍一种方法，不需要前后端配合，前端可独立完成。 PS: 在浏览器中 POST 方法下 Content-Type 为 applic…"}, {"id": "6991490703205351455", "title": "学习Node.js的一天-内置模块(一)", "desc": "一、同步和异步: fs 模块 内置模块 安装其他模块: npm i 模块 自定义模块: (即编写 js 文件) node 文件名 (.js 可以省略) 1.异步(callback 回调函数)"}, {"id": "6844903928048386062", "title": "初涉全栈：Node+MySQL实现登录的简单功能", "desc": "自动化脚手架工具：vue-cli、webpack-cli和定制化脚手架工具开发。 保持前后端分离的前提下，使用node搭建Web Server简易服务器，用来做页面的服务端渲染和数据接口的合并。 比如使用node做cache缓存。 使用node做小型的商业项目、个人博客的全栈。…"}, {"id": "6844903992711970829", "title": "高阶入门：腾讯构建高性能的 react 同构直出方案", "desc": "在腾讯新闻抢金达人活动 node 同构直出渲染方案的总结文章中我们整体了解了下同构直出渲染方案在我们项目中的使用。正如我在上篇文章结尾所说的： 我们在根据产品的体验效果选择了 react 同构直出渲染方案，必然也要保证当前方案的可用性和可靠性。例如我们的服务能同时支撑多少人访问…"}, {"id": "6844903807520866317", "title": "学点后端知识之 Sequelize 中创建事务和🔐", "desc": "Sequelize 是 Node.js 的一个 ORM 库，通过 Sequelize 我们能用熟悉的 js 链接，操作数据库。工作需要，笔者日常工作除了切图，也开始要写后端代码了。由于缺乏经验，之前开发的功能在并发情况下出现了异常。深入理解之后重新回来梳理问题，并记录学习的笔记…"}, {"id": "6844903615992332295", "title": "全面理解 koa-router", "desc": "koa 框架一直都保持着简洁性, 它只对 node 的 HTTP 模块进行了封装, 而在真正实际使用, 我们还需要更多地像路由这样的模块来构建我们的应用, 而 koa-router 是常用的 koa 的路由库. 这里通过解析 koa-router 的源码来达到深入学习的目的. …"}, {"id": "6844904064329744397", "title": "使用jsencrypt加密和解密进行不对称加密", "desc": "使用jsencrypt实现不对称加密的思路：1.生成一个公钥和私钥：前端生成加密密码要使用公钥，后端解密需要私钥；在node中生成一个公钥和私钥2.后端需要设置一个提供公钥的接口供前端使用：3.前端获"}, {"id": "6925348130078605325", "title": "使用pkg打包你的前端应用为exe可执行文件", "desc": "1. 需求场景 前端的你正在进行一个前端项目，此时产品过来说：客户现在急着想看下现在做的如何，能不能让客户先看下，做了多少看多少。此时的你心里头是一万只xx马在奔腾，由于项目部署、内外网络等各种问题，还不能部署在线上，急中生智的你想到了**pkg**，成功化解了此危机。 2. …"}, {"id": "6844903778013937672", "title": "Node调试指南-内存篇", "desc": "Node.js 发展到今天，已经被越来越广泛地应用到 BFF 前后端分离 、 全栈开发 、 客户端工具 等领域。然而，相对于应用层的蓬勃发展，其 Runtime 对于绝大部分前端出身的开发者来说，处于黑盒的状态，这一点并没有得到很好的改善，从而也阻碍了 Node.js 在业务中…"}, {"id": "6844903733487206413", "title": "【小哥哥, 跨域要不要了解下】CORS 基础篇", "desc": "ie 10 都可以跑, 足以满足现代前端开发者的需求了. 概念性的东西在这儿 MDN 偶尔需要梯子, 自备哈. 我们先创建一个跨域的环境, 代码基于我们 jsonp 时候的示例项目 cross-domain, 首先, 在 fe 和 be 目录下创建 cors 目录. 其次, 分…"}, {"id": "6844903613207150605", "title": "从Chrome源码看WebSocket", "desc": "WebSocket是为了解决双向通信的问题，因为一方面HTTP的设计是单向的，只能是一边发另一边收。而另一方面，HTTP等都是建立在TCP连接之上的，HTTP请求完就会把TCP给关了，而TCP连接本身就是一个长连接吗，只要连接双方不断关闭连接它就会一直连接态，所以有必要再搞一个…"}, {"id": "6844903869781114888", "title": "让NodeJS在你的项目中发光发热", "desc": "近些年来借着NodeJS的春风，前端经历了一波大洗牌式得的发展。使得前端开发在效率，质量上有了质的飞跃。可以说NodeJS已经是前端不可欠缺的技能了。但是是事实上大部分的前端对于本地安装的NodeJS的使用可能仅限于node -v和npm了😂。其实NodeJS作为真正意义上的…"}, {"id": "6958703431749992485", "title": "koa2服务配置SSL", "desc": "一：前言 1：SSL证书 我的域名在腾讯云，每次解析新建一个三级域名(假设是 aaa.jiangw1.com )，都会赠送一年的SSL，申请成功后下载SSL证书，如下： 可以看到准备了各种服务器的文件"}, {"id": "6844903949997195278", "title": "nodejs（八）express使用详解", "desc": "二. express中的静态服务 三. express中获取post请求数据 1. 安装 body-parser 2. 创建server.js 3. 开启服务器，可通过postman访问URL，自行配置body里面的参数信息，以及指定Content-Type 4. 最后点击左下…"}, {"id": "6844903544919687181", "title": "[译] JavaScript 自动化爬虫入门指北（Chrome + Puppeteer + Node JS）：和 Headless Chrome 一起装逼一起飞", "desc": "本文将会教你如何用 JavaScript 自动化 web 爬虫，技术上用到了 Google 团队开发的 Puppeteer。 Puppeteer 运行在 Node 环境，可以用来操作 headless Chrome。何谓 Headless Chrome？通俗来讲就是在不打开 C…"}, {"id": "6844904203106648072", "title": "Node.js 在企业中的应用实践集锦 - 2020 年中汇总", "desc": "在和一些 Nodeer 童鞋的分享交流过程中，也会听到一些声音：“Node.js 在企业中是如何应用的？有哪些大厂在实践？”，于是公众号 “Nodejs技术栈” 自 19 年 8 月开始陆陆续续给大家分享一些 Node.js 在企业中的应用实践，希望给正在学习、使用 Node.…"}, {"id": "6844903672334254094", "title": "网易云音乐接口+vue全家桶开发一款移动端音乐webApp", "desc": "注意如果你希望在 Vue Router 的路由组件中使用上述语法的话，你必须使用 Vue Router 2.4.0+ 版本。 有反馈说项目clone之后运行，会显示不了，因为接口用的我服务器上的地址，node端的是Access-Control-Allow-Origin是请求头里…"}, {"id": "6984309527755620365", "title": "console.log 背后那点事儿", "desc": "上周我在兴致勃勃地调试 HBase 客户端的时候，同事悄咪咪的在我背后说：你这不行，少用 console.log，这个是同步的，最好用 process.stdout.write 这个是异步的"}, {"id": "6991383175452704782", "title": "Node学习-05-MongoDB", "desc": "Node学习-05-MongoDB 安装MongoDB 下载： https://www.mongodb.com/download-center/community 安装可以参考菜鸟，安装完成后配置环境"}, {"id": "6844903857718312967", "title": "git commit 规范校验配置和版本发布配置", "desc": "husky 主用功能是为 git 添加 git 钩子，它允许我们在使用 git 中在一些重要动作发生时触发自定义脚本(npm script), 比如我们可以在 git push 之前执行特定的自定义脚本对代码进行单元测试、又或者在 git commit 之前执行 eslint …"}, {"id": "6844903582676811790", "title": "抽象语法树 Abstract syntax tree", "desc": "我们常用的浏览器就是通过将js代码转化为抽象语法树来进行下一步的分析等其他操作。所以将js转化为抽象语法树更利于程序的分析。 如上图中的变量声明语句，转化为AST之后就是右图的样子。 首先一段代码转化成的抽象语法树是一个对象，该对象会有一个顶级的type属性'Program',…"}, {"id": "6847009772768591885", "title": "《大前端进阶Node.js》系列 内存泄漏（一）", "desc": "小伙：（心里一阵暗喜）官方解释是程序中己动态分配的堆内存由于某种原因程序未释放或无法释放. 但其本质其实就是一个，那就是应当回收的对象没有被回收，变成了常驻在老生代中的对象。 很多人说闭包会造成内存泄漏，其实说法不严谨，应该说是，闭包如果使用不当，容易引发内存泄漏，而不是闭包一…"}, {"id": "6844903655003389959", "title": "[译文] 初学者应该了解的数据结构： Tree", "desc": "Tree 是很多（上层的）数据结构（如 Map、Set 等）的基础。同时，在数据库中快速搜索（元素）也用到了树。HTML 的 DOM 节点也通过树来表示对应的层次结构。以上仅仅是树在实际应用中的一小部分例子。在这篇文章中，我们将探讨不同类型的树，如二叉树、二叉搜索树以及如何实现…"}, {"id": "6844903954002739213", "title": "npm进阶——如何拥有自己的包和流程自动化", "desc": "作为包管理器，npm在前端开发过程中使用频率很高，不过大部分前端可能只使用过npm install等简单的功能。今天这篇文章主要介绍一些进阶的知识点，分为两个部分，第一个部分是从npm包开发者的角度讲解怎么发布和管理自己的包。而第二部分是从使用者的角度，介绍怎么使用npm工具进…"}, {"id": "6983870635458396191", "title": "nodes实现cors", "desc": "跨域 定义： 协议，域名，端口任意一个不同， 都不属于同源，相互之间 的数据请求 称之为跨域请求 同源限制 无法发ajax 请求 无法共享cookie option请求： 浏览器针对非简单请求的跨域 "}, {"id": "6888302980832559112", "title": "TypeScript和Nodemon终极设置！", "desc": "在此github仓库中找到本文的完整源代码。 最后，我们需要一些源代码来工作，所以让我们创建 src/index.ts 文件，其中包含以下TypeScript。 Nodemon的配置方式有很多种，我准备用一个json文件来配置，在我们的项目根目录下添加 nodemon.json…"}, {"id": "6844903565048168455", "title": "Node: Puppeteer + 图像识别 实现百度指数爬虫", "desc": "之前看过一篇脑洞大开的文章，介绍了各个大厂的前端反爬虫技巧，但也正如此文所说，没有100%的反爬虫方法，本文介绍一种简单的方法，来绕过所有这些前端反爬虫手段。 可以发现，百度指数实际上在前端做了一定的反爬虫策略。当鼠标移动到图表上时，会触发两个请求，一个请求返回一段html，一…"}, {"id": "6847902219745001485", "title": "Node.js搭建文件服务器，实现文件上传下载编辑播放的功能", "desc": "上机实验课的时候不想带电脑去机房, 但是在机房又可能需要使用到自己电脑里的文件, 再加上机房电脑没有安装网盘等应用, 每次上机都要下载登录比较麻烦, 所以用Node.js搭建了这个文件服务器。 1. 上传文件： 2. 显示文件： 3. 下载文件 4. 删除文件 5. 身份验证 …"}, {"id": "6975920986403110919", "title": "NodeJs 线程池与i/o", "desc": "。 前言 开始写一些博客主要是在看完代码后再温故总结一遍, 也是为了后面回头也能查阅。本系列会从官网的例子出发, 尽可能以链路追踪的方式记录其中源码核心模块的实现, 本篇例子来源 libuv - fi"}, {"id": "6844903729234182158", "title": "使用 NestJS 开发 Node.js 应用", "desc": "NestJS 最早在 2017.1 月立项，2017.5 发布第一个正式版本，它是一个基于 Express，使用 TypeScript 开发的后端框架。设计之初，主要用来解决开发 Node.js 应用时的架构问题，灵感来源于 Angular。在本文中，我将粗略介绍 NestJS…"}, {"id": "6844903685605031943", "title": "小邵教你玩转nodejs之nodejs概念、事件环机制（1）", "desc": "接下来会写nodejs连载的笔记，本文主要是讲nodejs解决了什么问题有什么优势、进程与线程的概念、同步与异步的概念、阻塞与非阻塞的概念、队列和栈的概念、宏任务和微任务以及非常重要的浏览器的事件环和nodejs的事件环（event loop）。 我们前端和后端交互，主要是请求…"}, {"id": "6844903519749685262", "title": "打造属于自己的cnpm/npm安装，生成自定义项目架构", "desc": "公司内部研发的框架体系一般都会趋向于图形化、可视化，不过大多数都会做到最后一步，那就是模块化的选择了该结构，该样式（皮肤）然后想去一键生成这个项目的时候，啊？没这个功能，实现不了，npm/cnpm的一堆依赖结构不是我想要的！那这篇文章就是来解救你了，让我们来打造属于自己的项目结…"}, {"id": "6844903661395509255", "title": "前端架构之node jwt认证", "desc": "这次使用node express jwt实现一个小小的认证，数据库之类的慢慢在添加上去，先跑通整个流程，基本上是可以使用到项目里面的了。这次就不用gulp编译了，添加了log4.js一个错误日志，还稍微做了一下压测。就不详细展开了，有兴趣的可以下载来看：github地址 大致流…"}, {"id": "6911487429471895560", "title": "我妈都看得懂的 Buffer 基础", "desc": "在 JS 世界里，有一类看上去很高大上实质上很基础的东西：Buffer。今天好好介绍一下这厮。 ... ... ... 它虽然叫做 Array，但本质上和数组并没有什么关系。这玩意是申请了一段内存区域，但是里面放的是啥，我们并不知道，它只是存了一堆字节，也无法直接操作它。如果我…"}, {"id": "6999935969394688014", "title": "node-watch源码解析，学习封装思路", "desc": "node-watch是对上面的fs.watch的封装和增强。它解决了以下问题： 编辑器会生成临时的文件，导致回调函数会被触发两次 在观察单个文件保存时，回调函数只会触发一次 解决Linux和旧版本no"}, {"id": "6998781892849991717", "title": "手把手教你用koa写项目接口", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前一篇我们封装了验证权限工具，发表动态（增删改查） 今天我们做评论和回复评论功能 创建对应的表comment 发表评论 要获取到评论的内容，"}, {"id": "6844903645155164174", "title": "前端水印生成方案(网页水印+图片水印)", "desc": "前段时间做某系统审核后台，出现了审核人员截图把内容外泄露的情况，虽然截图内容不是特别敏感，但是安全问题还是不能忽视。于是便在系统页面上面加上了水印，对于审核人员截图等敏感操作有一定的提示作用。 Canvas兼容性 这里我们用canvas来生成base64图片，通过CanIUse…"}, {"id": "6988712937527443487", "title": " `Node`+`puppteer`实现网络图片爬取", "desc": "Node+puppteer实现网络图片爬取 一、项目搭建 1. 初始化项目 2. 安装依赖 3. 目录结构 二、功能实现 1. 图片DOM元素获取 首先引入所需模块 使用puppteer创建一个..."}, {"id": "6844903684522917902", "title": "深入浅出eslint——关于我学习eslint的心得", "desc": "ESLint属于一种QA工具，是一个ECMAScript/JavaScript语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。 ESLint旨在完全可配置，它的目标是提供一个插件化的javascript代码检测工具。这意味着您可以关闭每个规则，只能使用基…"}, {"id": "6973888151421108254", "title": "Node 系列 - 003 - commander.js", "desc": "commander.js —— 完整的 Node.js 命令行解决方案。本篇文章讲解如何通过 commander.js 溜达 Node.js 命令行。"}, {"id": "6925028503314235399", "title": "BFF与Nestjs实战", "desc": "最近我们后端伙伴开始采用了微服务架构，拆分了很多领域服务，身为大前端的我们肯定也要做出改变，平常一个列表需要一个接口就能拿到数据，但微服务架构下就需要中间有一层专门为前端聚合微服务架构下的n个接口，方便前端调用，于是我们就采用了当下比较流行的BFF方式。 bff和node没有强…"}, {"id": "6994991916077514782", "title": "如何优雅地操作数据库？ORM了解一下", "desc": "什么是ORM 对象关系映射（Object Relational Mapping，简称ORM），是一种程序技术，实现面向对象编程语言中的内存对象与关系型数据库中的业务实体之间的关系映射。这样在我们操作数"}, {"id": "6970340696892899358", "title": "Node.js 入门系列（三）Node 异步", "desc": "关于 Node.js 异步，绕不开两点：非阻塞 I/O 和事件循环。也正是因为这两点，Node.js 才能被称为高性能并运用到线上环境中，那么下面来了解一下 Node.js 的异步机制和使用方式吧！"}, {"id": "6844904056498946055", "title": "前端自动化部署的深度实践", "desc": "年前我也在自动化部署这方面下了点功夫，将自己的学习所得在自动化部署的一小步，前端搬砖的一大步这篇博客中做了分享。感谢两位网友@_shanks和@TomCzHen的意见，让我有了继续优化部署流程的动力。本文主要是在自动化部署流程中，对版本管理和流程合理性等方面做了一些改进，配合规…"}, {"id": "6994608546323103781", "title": "node初步认识", "desc": "简单的说 Node.js 就是运行在服务端的 JavaScript。如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常"}, {"id": "6901665019927527431", "title": "前端项目做大了，试试monorepo", "desc": "第一次接触monorepo是去年年初，说来非常巧合，当时有个活动页的需求，因为webpack配的比较菜，听一哥们说parcel开箱即用写活动页无敌，然后我就去看了。看到parcel用了lerna，这激起了我的好奇，觉得这东西挺玄学，一条命令能帮你安装指定工程下的所有依赖，正好当…"}, {"id": "6844903502242643981", "title": "实践中的前后端分离", "desc": "相信前后端分离这个词，早已流传甚广，大家一些自己的理解，但可能有些人的观点有稍许偏差：我们要搞 SPA，全AJAX，那才是前后端分离了。 我们来聊聊什么是前后端分离。 先来看一张WEB系统前后端架构模型图。 从图中可以清晰的看到，前后端的界限是按照浏览器和服务器的划分。那么我们…"}, {"id": "6996967059636617224", "title": "一篇文章掌握Egg.js的核心用法", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 快速创建一个egg项目 创建一个文件夹并进行自定义命名 进入上述文件夹，并初始化egg 安装依赖 运行项目 Egg的目录结构 1. app"}, {"id": "6994059320543412237", "title": "注释掉 on('data') 请求为什么一直挂着？— 了解 Node.js Stream 的两种模式", "desc": "这是来自「Nodejs技术栈」交流群一位读者朋友提的一个问题，“如果注释掉 req.on('data') 事件监听，end 事件就收不到了，进而永远也不会执行 res.end()，请求会被一直挂着，为"}, {"id": "6979875220530135071", "title": "lerna是怎么执行一条命令的(源码调试与解析)", "desc": "前言 大家好,我是作曲家种太阳 lerna是一个多包管理工具,可以帮助我们多个package统一管理维护,极大提升了开发效率,常用于脚手架开发,组件库开发. babel也是基于lerna开发的. le"}, {"id": "6844904049448321032", "title": "得到 Hybrid 架构的演进之路", "desc": "得到 APP 是一个三年多的产品，最初采用纯 Native 的方式开发，在 18 年初，我们开始了 Hybyid 开发技术方案的探索和实践， 目前得到 APP 共包含了 ReactNative 和 Webview 两套 Hybrid 方案。本文从时间维度上，重点回顾一下 Web…"}, {"id": "6905765245420535822", "title": "Node.js 服务性能翻倍的秘密（一）", "desc": "用过 Node.js 开发过的同学肯定都上手过 koa，因为他简单优雅的写法，再加上丰富的社区生态，而且现存的许多 Node.js 框架都是基于 koa 进行二次封装的。但是说到性能，就不得不提到一个知名框架： fastify ，听名字就知道它的特性就是快，官方给出的Bench…"}, {"id": "6911853807756378125", "title": "如何发布npm包", "desc": "npm install 命令用来安装模块到node_modules目录。 安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。 如果想更新已安装模块，就要用到npm…"}, {"id": "6979140141134643236", "title": "Mac 新版本安装 nvm 之后，出现 nvm command not found 的问题", "desc": "原因 Mac 新版本中终端是 zsh，所以使用 .bash_profile 文件之后，不会生效，需要使用 zsh 的文件才行。 解决 cd ~ touch .zshrc 打开 .zshrc 文件 写入"}, {"id": "6971456438732816414", "title": "Node.js 入门系列（六）网页版石头剪刀布小游戏", "desc": "在前面的系列文章中已经简单的实现了石头剪刀布这个小游戏，现在来把它改造成网页版，可以在这里学会通过解析 url 来获取对应的行为并返回相应的数据。"}, {"id": "6975282946638872584", "title": "Node 系列 - 006 - Puppeteer", "desc": "在前面的 5 篇文章打底下，咱们应该接入点接地气的业务了。本篇开始将接触前端多语言功能。本篇文章我们将讲解如何使用 Puppeteer 控制 Chrome/Chromium，从而达到下载文件的目的。"}, {"id": "6997428803039395854", "title": "Node.js学习实战: 文件系统模块-文件的批量重命名", "desc": "这是我参与8月更文挑战的第16天， 学习贵在坚持, 笔记是灵魂, 温故而知新, 时不时翻一翻, 回顾一下知识点, 加深记忆, 事半功倍! 这里记录一些 学习 Node.js 的文件系统模块"}, {"id": "6977256058725072932", "title": "Docker compose 快速部署 Node 项目", "desc": "文章讲解如何简单快速部署 node API 项目。可作为docker入门学习。 Node 项目基于 express+sequelize 框架"}, {"id": "6844903519649005576", "title": "WebSocket探秘", "desc": "长连接：一个连接上可以连续发送多个数据包，在连接期间，如果没有数据包发送，需要双方发链路检查包。 TCP/IP：TCP/IP属于传输层，主要解决数据在网络中的传输问题，只管传输数据。但是那样对传输的数据没有一个规范的封装、解析等处理，使得传输的数据就很难识别，所以才有了应用层协…"}, {"id": "6844903552402325511", "title": "Event Loop的规范和实现", "desc": "一直以来，我对Event Loop的认知界定都是可知可不知的分级，因此仅仅保留浅显的概念，从未真正学习过，直到看了这篇文章——《这一次，彻底弄懂 JavaScript 执行机制》。该文作者写的非常友好，从最小的例子展开，让我获益匪浅，但最后的示例牵扯出了chrome和Node下…"}, {"id": "6953783749653823502", "title": "Node 16 发布，一大堆新特性来袭！！", "desc": "Node 16 于四月二十日发布，山月在第一时间下载了 Node16 体验了以下新特性。偶数号的版本为 LTS 版本，这将是既 Node14 之后的下一个长期支持版本，Node14 在 2020-10"}, {"id": "6982897060919902239", "title": "Node聊天室和socket.io原理与功能总结", "desc": "目录 原理简述 功能开发 效果体验 原理简述 这次使用了socket.io这个工具包进行通信。 webscoket html5中有websocket的功能，参考这篇文章《html知识总结之WebSoc"}, {"id": "6994086683385790478", "title": "做一个CLI版的时间管理工具（七）", "desc": "做一个CLI版的时间管理工具，利用简单的指令即可完成任务的记录，生成周报日报。为你成为时间管理大师扫清障碍。本系列会持续更新。"}, {"id": "6971082803593084958", "title": "Node.js 入门系列（五）石头剪刀布小游戏", "desc": "初步了解了 Node.js 的模块、异步、HTTP 服务等知识点之后，就来做一个简单的石头剪刀布的小游戏吧！"}, {"id": "6844903893525069838", "title": "网页骨架屏自动生成方案（dps）", "desc": "什么是骨架屏呢？骨架屏(Skeleton Screen)是指在页面数据加载完成前，先给用户展示出页面的大致结构（灰色占位图），在拿到接口数据后渲染出实际页面内容然后替换掉。Skeleton Screen 是近两年开始流行的加载控件，本质上是界面加载过程中的过渡效果。 假如能在加…"}, {"id": "6990980752254959623", "title": "Node.js搭建的server项目部署至云服务器", "desc": "作为一个前端程序员，node.js是必须掌握的，当我们拥有一个自己云服务器时，就可以部署自己的node server服务，开始自己的前后端分离式开发了：）"}, {"id": "6950545906181767205", "title": "AsyncHooks异步生命周期", "desc": "Async Hooks 是 Node8 新出来的特性，提供了一些 API 用于跟踪 NodeJs 中的异步资源的生命周期，属于 NodeJs 内置模块，可以直接引用。这是一个很少使用的模块，为什么会有"}, {"id": "6844903968041091080", "title": "再也不怕面试官问你express和koa的区别了", "desc": "用了那么多年的express.js，终于有时间来深入学习express，然后顺便再和koa2的实现方式对比一下。 老实说，还没看express.js源码之前，一直觉得express.js还是很不错的，无论从api设计，还是使用上都是可以的。但是这次阅读完express代码之后，…"}, {"id": "6997704376777179172", "title": "使用 Node.js 构建 BFF 层（二）", "desc": "介绍了BFF的概念和应用场景，并且做了一个简单的BFFdemo。接下来可以讨论一下如何优化BFF层。上文提到，`RPC`通过传输层协议传输数据，传输层传输的是二进制数据..."}, {"id": "6844904099972907021", "title": "《大前端进阶 Node.js》系列 多进程模型底层实现（字节跳动被问）", "desc": "进程和线程，可以说是老僧长谈的话题了。 只要是从事计算机相关的小伙伴，提起这个大都思如泉涌，多线程～高并发～ 但各种零散的概念和认知或许难以汇成一个成体系的知识结构。我们先来罗列一下这两个概念简洁的官方解释。 进程：处于执行期的代码，正在运行的程序，它不仅包括目标代码，还有数据…"}, {"id": "6999542726089768997", "title": "使用Node.js实现RESTful API（六）：参数校验", "desc": "1、安装express-validator 2、修改src/routes/user.js 3、修改src/controllers/user.js 4、测试 ​ a. 注册接口 b. 修改密码接口"}, {"id": "6844903685164646413", "title": " nodejs+koa2+mongodb 从0到1搭建自己的项目", "desc": "二. 添加路由 这样只需要访问 http://localhost:9000/api, 而我们写接口的时候，这个前缀就可以说是少不的了。 每一次我们修改都要关闭程序，然后再npm start, 这是想起webpack的热更是多么的舒服，想着要用webpack搭建吗，这时候就要用到…"}, {"id": "6934566591133089806", "title": "Node.js 并发能力总结", "desc": "Node.js 有多重并发的能力，包括单线程异步、多线程、多进程等，这些能力可以根据业务进行不同选择，帮助提高代码的运行效率。 本文希望通过读 p-limit、pm2 和 worker_threads 的一些代码，来了解 Node.js 的并发能力。 Node.js 最常用的并…"}, {"id": "6844903568286171144", "title": "《HelloGitHub》第 23 期", "desc": "兴趣是最好的老师，HelloGitHub 就是帮你找到兴趣！希望热爱开源的小伙伴加入到本项目中，让有意思的项目被更多人发现、使用、参与，欢迎留言讨论。"}, {"id": "6844903741175365639", "title": "Node.js爬取科技新闻网站cnBeta（附前端及服务端源码）", "desc": "一直很喜欢看科技新闻，多年来一直混迹于cnBeta，以前西贝的评论区是匿名的，所以评论区非常活跃，各种喷子和段子，不过也确实很欢乐，可以说那是西贝人气最旺的时候。然而自从去年网信办出台了《互联网跟帖评论服务管理规定》，要求只有实名认证的用户，才能进行留言、评论之后，往日的活跃的…"}, {"id": "6943887671836016677", "title": "跟着文档学Node（三）：CommonJS模块", "desc": "在JS大规模发展后，随着JS应用变得越来越复杂，对模块化的需求也变得越来越大。在ES6的模块标准出炉前，社区出现了各种各样的模块规范：AMD、CMD和CommonJS规范。 Node.js采用了其中的CommonJs规范，也使得CommonJS规范称为目前JS社区的主流选择。 …"}, {"id": "6928561311651463181", "title": "前端增长（node）（实践篇）", "desc": "这个问题其实考察的是对于node里，fs，path，process模块的使用。主要就是在读取到md源文件后，利用marked插件对md文件内容进行提取和转换，利用browser-sync插件对md内容进行实时监测，实时更新。核心代码如下："}, {"id": "6844903495921827847", "title": "基于Vue2的数据管理系统-DBM", "desc": "使用DBM在每次导入表格成功后将生成对应表格的查看、编辑（包括添加）和删除三个权限项，在角色管理页面对指定角色授予某项权限，另外还包含十余项系统权限属于不可修改权限，只有最高级别管理员拥有。 进入指定表格后可以对其进行一些自定义的数据筛选、导入、导出等基本操作，采用后台分页与解…"}, {"id": "6925009177824165902", "title": "洋葱模型的核心思想", "desc": "这张图在网上特别流行，基本搜索一下洋葱模型每篇文章都有这张图来做讲解。比较形象的解释了洋葱模型是在处理请求来和响应请求之间的问题。可以类比栈，先进后出。 大家只要讲洋葱模型，就会联想到koa的中间件，很少有人谈及express的洋葱模型和中间件原理。那么我就来反其道而行之，讲讲…"}, {"id": "6979243733426372621", "title": "Node系列学习之日志(一)", "desc": "Node系列学习之日志(一), 今天开始搞接口日志, 主要是学习了Stream,做了几个文件写入写出读取的Demo~"}, {"id": "6880487091449872397", "title": "关于node版本管理工具NVM的使（踩）用（坑）说（记）明（录）", "desc": "下载安装包，链接，官网地址,选择nvm-setup.zip，然后进行安装，默认是C盘，以前我都是手动选择别的盘，当时还要配那些环境变量什么的，算了以前错的就不说了，就说这次的正确安装方式。 手动改下目录名字。 3. 验证是否安装成功，验证之前建议重启电脑 打开命令行,执行nvm…"}, {"id": "6844903817151168519", "title": "Node自动生成markdown目录(萌新版)", "desc": "其实呢，这个应该挺多人想到的吧，嘻嘻，不过作为萌新，还是挺开心能用技术来简化自己的日常操作，之前也尝试过写脚本来实现自动删库然后填充数据，代码逻辑和质量方面也说不上好，如果大佬们觉得过得去的话，希望能得到人生中的第一颗小星星，新人还在练习写作中。"}, {"id": "6844903895882268680", "title": "实战篇 - node.js后台实现压缩文件获取、解析并上传至云平台(附源码)", "desc": "这下就可以拿到想要的zip了吧，然后就可以为所欲为了。"}, {"id": "6844904041567240200", "title": "使用 nodeJs 实现 js/ts 文件翻译功能", "desc": "说明 node 的环境没有搭建。请到官网上下载。 如果终端上出现：v10.16.0 类似这样的版本号，说明你的 node 环境搭建好啦。 我们先读取固定的文件，后面我们会尝试实现翻译上传的文件，有需要的小伙伴可以移步到后面的内容。 首先我们在文件夹下创建一个 replace.j…"}, {"id": "6844903792559783943", "title": "【Node】详解模块的实现过程", "desc": "CommonJS 定义了 module、exports 和 require 模块规范，Node.js 为了实现这个简单的标准，从底层 C/C++ 内建模块到 JavaScript 核心模块，从路径分析、文件定位到编译执行，经历了一系列复杂的过程。简单的了解 Node 模块的原理…"}, {"id": "6844903608505335815", "title": "浅谈Node中module的实现原理", "desc": "曾几何时，Javascript还没那么牛逼，几乎所有人都觉得它是用来做网页特效的脚本而已。彼时仓促创建出来的javascript的自身缺点被各种吐槽。随着web的发展，Javascript如今是媳妇熬成婆，应用越来越广泛。 虽然Javascript自身很努力，但是还是缺乏一项重…"}, {"id": "6844903501730955277", "title": "一个变相的服务端渲染系统", "desc": "前端发展到现在，SPA应该已经被应用的非常广了。可惜的是，我们前进的是快，而人家搜索引擎爬虫跟用户的浏览器设备还跟不上脚步。辛辛苦苦写好的单页应用，结果到了SEO跟浏览器兼容这一步懵逼了。 很多同学肯定都想过服务端渲染的问题。然而一看vue、react关于服务端渲染的文档，可能…"}, {"id": "6844903577110970381", "title": "手写Node静态资源服务器", "desc": "想写静态资源服务器，首先我们需要知道如何创建一个http服务器，它的原理是什么接下来我们对一些核心功能进行讲解深刻理解并实现压缩和解压实现压缩和解压在http中应用压缩和解压下面实现这样一个功能，如图"}, {"id": "6844903509171634183", "title": "细说WebSocket - Node篇", "desc": "在上一篇提高到了 web 通信的各种方式，包括 轮询、长连接 以及各种 HTML5 中提到的手段。本文将详细描述 WebSocket协议 在 web通讯 中的实现。 websocket协议允许不受信用的客户端代码在可控的网络环境中控制远程主机。该协议包含一个握手和一个基本消息分…"}, {"id": "6882003144721727501", "title": "Koa2系列第一篇：详解生成器", "desc": "Koa2提供了一个生成器koa-generator，用于Koa2开发者生成一个项目骨架，方便开发者开箱即用。 bin/www是应用的启动入口。 路由本身也是一种中间件，不过我们由于职责拆分，将其独立到routes目录下。 ctx.render方法不是Koa2自身的，而是koa-…"}, {"id": "6844904202766909453", "title": "# nodejs负载均衡（二）：RPC负载均衡", "desc": "这一篇确实拖的比较久，上节讲了服务负载均衡实现，但是如果需要调用远程服务， 如何保证不是调用不会集中在一台服务上，如何确保远程服务调用的负载均衡？ 这就要实现 Consumer 端调用rpc的负载均衡。所以本文章主要讲解 RPC负载均衡算法实现。 下面介绍几个主要的负载均衡算法…"}, {"id": "6844903717481742343", "title": "Service Worker学习与实践（三）——消息推送", "desc": "在上一篇文章Service Worker学习与实践（二）——PWA简介中，已经讲到PWA的起源，优势与劣势，并通过一个简单的例子说明了如何在桌面端和移动端将一个PWA安装到桌面上，这篇文章，将通过一个例子阐述如何使用Service Worker的消息推送功能，并配合PWA技术，…"}, {"id": "6859912031392825351", "title": "蒲公英 · JELLY技术周刊 Vol.17: 90 行代码实现 React Hooks", "desc": "作为前端开发，与 Chrome 打交道是家常便饭，我们有必要了解 Chrome 调试工具的更新迭代，对日常开发和调试带来哪些帮助和改善。新 Chrome DevTools 集成了 lighthouse，并且在元素审查面板和性能面板都有一定程度的优化，本文还提供了相关特性的视频演…"}, {"id": "6844903555715825672", "title": "2017年，Node.js生态圈正蓬勃发展！以下10点足以说明一切！", "desc": "我们开门见山：2017，是Node.js社区的丰收年。 在2017年，Node.js逐渐走向成熟，并在企业中得到了广泛的认可和应用。同时，node.js自身也添加了许多优秀的新特性，如async/await，以及http2 ……"}, {"id": "6911618103575216142", "title": "nodejs 原生实现跨域及文件上传", "desc": "日常开发，跨域是普遍存在的一个问题。但是绝大多数的程序员在遇到这类问题的时候并不明原理，上来就是百度一下然后完事。 说到跨域，就必须要说说浏览器的同源策略了，浏览器出于安全考虑不允许不符合同源策略规则的行为发生。所谓同源策略即： 三者缺一即非同源。非同源情况下 浏览器主要做了如…"}, {"id": "6844904023087120397", "title": "Node.js：深入浅出 http 与 stream", "desc": "通过本文，你会知道 stream 是什么，以及 strem 在 http 服务中发挥着什么作用。 假设楼上有一桶水，想倒往楼下的水桶。直接往下倒，肯定会洒出来，那么在两个水桶间加一根管子（pipe），就可以让楼上的水，逐渐地流到楼下的水桶内： 其实 stream 不仅可以用来处…"}, {"id": "6844904095250120711", "title": "分享一个可以替代 npm link的工具：Psync", "desc": "因为公司内部的开发，常常需要将很多的业务拆分成不同的包，一个代码仓库中可能放置数十个基础包，这个时候包与包之间相互依赖，就会非常复杂，我期望是修改一个包的代码，另外一个包可以马上得到最新的代码更新，能够马上预览效果，所以才开发了 psync。 有了 Psync，你可以放弃使用 …"}, {"id": "6844903860092272654", "title": "掘金外链即将失效？论如何用脚本一次性下载/替换失效的外链图片", "desc": "大约一个月前，微博的图片外链失效了，以及掘金因为盗链问题也于2019/06/06决定开启防盗链，造成的影响是：个人博客网站的引用了这些图片外链都不能显示。 目前微博和掘金的屏蔽，在CSDN和segmentfault都是可以正常显示的，只影响个人博客。 比如前段时间我的博客:ht…"}, {"id": "6904230004667318285", "title": "理解 NodeJS 的内存管理机制", "desc": "众所周知，Node 是基于 v8 引擎来构建的，所以在 Node 中使用的对象基本都是通过 v8 引擎来统一进行内存分配和管理。然而 v8 引擎 本身对内存的使用限制了大小，在64位系统下只能用 1.4GB 的系统内存。 一方面是因为 v8 引擎最初是为浏览器而设计的。对于页面…"}, {"id": "6844903508315996167", "title": "GraphQL 初探—面向未来 API 及其生态圈", "desc": "什么是 GraphQL ？第一次看到这个名词未免让人联想到数据库查询语言 SQL 。但本质上，这是两个完全不同的东西， GraphQL 在官方文档里的定义如下： 即 GraphQL 既是一个 API 查询语言，也指其服务端实现。但 GraphQL 不只是为了在 API 领域搞个…"}, {"id": "6844903624225587208", "title": "React+GraphQL入门", "desc": "最近刚完成一个新项目，闲着没事，想着学点新东西（做前端的人都懂，技术更新实在太快了，不学容易out）,听说GraphQL现在开始火起来，大有取代传统Restful API的方式的趋势，所以我决定学学。 由于GraphQL只是一套规范，不能直接使用，但社区有了很多编程语言的实现，…"}, {"id": "6844903667552747533", "title": "每天阅读一个 npm 模块（4）- throttle-debounce", "desc": "上一篇文章中介绍的属性描述符的知识太偏于理论，今天阅读的 throttle-debounce 模块会实用许多，在工作常常可以用到。 今天阅读的 npm 模块是 throttle-debounce，它提供了 throttle 和 debounce 两个函数：throttle 的含…"}, {"id": "6963147704075550757", "title": "从源码分析node-gyp指定node库文件下载地址", "desc": "当我们安装node的C/C++原生模块时，涉及到使用node-gyp对C/C++原生模块的编译工作（configure、build）。这个过程，需要nodejs的头文件以及静态库参与（后续称库文件）。"}, {"id": "6844903556487577613", "title": "[翻译] Async/Await 使你的代码更简洁", "desc": "这篇文章翻译自 ASYNC/AWAIT WILL MAKE YOUR CODE SIMPLER,这是一篇写于2017年八月的文章，并由某专栏提名为17年十大必读文章。在掘金上没找到这篇文章的翻译（其实没仔细找），就想试着自己翻译一下。翻译的不好的地方，还望大家指出，针对我水平就…"}, {"id": "6979866458964623390", "title": "VS Code官方插件集与工具", "desc": "如果您也使用VS Code作为CabloyJS项目开发的主编辑器，那么可以参考官方使用的插件集，此外也提供了一些周边工具 插件集"}, {"id": "6965765810354815012", "title": "邂逅CLI开发-woker开发过程", "desc": "邂逅CLI开发-woker开发过程 在前端开发过程中，我们会使用各种各样的脚手架 vue-cli、create-react-app等工具。 这些工具是怎么开发出来的？当我们输入一个命令其内部帮我们处理"}, {"id": "6974422380311478302", "title": "node简单功能搭建", "desc": "迫不得已只能开始学习dart。刚好看到http请求和websocket，没有后端服务，直接卡住。这种情况也不是第一次遇到了，以前就是简单写个能运行的，就过去了，这次下次决心，直接把常用的服务端需要的内"}, {"id": "6946036158509875208", "title": "基于 Node.js 的 ssh2 实现前端项目自动化打包、发布和部署", "desc": "本文主要介绍在 vitepress 项目中使用 Node.js 的 SSH2 实现前端项目自动化打包发布，该方法适用于绝大多数前端项目。 笔者在工作之余使用 vite 和 vitepress 搭建了文档系统，一方面是体验这两个新技术，另一方面是帮助团队内部整理技术文档。在实际推…"}, {"id": "6844903830816030728", "title": "puppeteer填坑指南", "desc": "相信大家在使用puppeteer的时候会遇到各种各样的问题，比如原本在mac上跑的好好的却发现在centos/docker上遭遇各种各样的问题， 这里把我所遇到的坑跟大家说一下。 当你自己安装chromeium的时候，在启动（puppeteer.launch()）的时候需要指定…"}, {"id": "6844904101310889998", "title": "shark-cleaner: 一个Node Cli 实现的垃圾清理工具(深层清理开发垃圾)", "desc": "就是这个恶毒的提示，太让我烦恼了，一开始我用了腾讯的 lemon 清理工具，但是发现他并不能很好地解决我的问题，没有办法完全找出我的缓存文件。由于本人是 256G Mac （穷....），真的，256G 太不够用了（当然不是因为我....的原因），俗话说贫穷限制了我的想象力，但…"}, {"id": "6844903797404205070", "title": "koa-rapid-router超越koa-router性能的100多倍", "desc": "从数据中可以看出，Koa的性能远大于express。当然，它的测试基于简单的单路由测试。不过由此我们可以看到fastify的性能远大于Koa。相信使用过fastify的小伙伴都会对它的性能速度感到惊讶。其实原理很简单，就是请求的URL快速匹配Callback。如何做到，理论上也…"}, {"id": "6844903599722463246", "title": "node爬取网易云歌曲", "desc": "起因：老爸让我下载几千首歌曲给他在车上播放，感觉手动下载，就算批量下载也要时间，索性写个爬虫自动下载吧。。 requestSongList的使用跟上面playList的差不多，因此不再重复。上面代码获取到歌曲列表后，需要下载到本地 到此，爬虫小程序完成。该项目爬取歌单列表-->…"}, {"id": "6844903775598018574", "title": "可爱的puppeteer使用小技巧", "desc": "总结一些使用puppeteer的小技巧。"}, {"id": "6844903573663416334", "title": "Express中间件原理详解", "desc": "Express和Koa是目前最主流的基于node的web开发框架，他们的开发者是同一班人马。貌似现在Koa更加流行，但是仍然有大量的项目在使用Express，所以我想通过这篇文章说说Express中间件的原理。 中间件的本质就是一个函数，在收到请求和返回相应的过程中做一些我们想…"}, {"id": "6986609322142728228", "title": "Nodejs中使用无头浏览器批量下载音频", "desc": "背景 本来我在 A 平台听书，到了后面的章节，便只能去 B 平台。 操作繁琐，体验极差，还不支持缓存，流量超贵的(上个月套餐外流量消费 60 多) 于是乎，我只能把音频手动下载起来，但操作同样繁琐。 "}, {"id": "6844903605783232526", "title": "create-react-app 源码解析之react-scripts", "desc": "上一篇我们已经讲了 create-react-app里面创建package.json安装依赖并且拷贝可运行的demo等步骤。传送门 这一篇我们来讲一下 create-react-app里面的启动服务等部分，就是平时我们安装完依赖之后，启动开发服务:npm start。这一块涉及…"}, {"id": "6993698188620365854", "title": "NODEJS进阶 ｜ 8月更文挑战", "desc": "1，事件循环机制 Node.js 在什么时候会进入事件循环呢？答案是 Node.js 程序由事件循环开始，到事件循 环结束，所有的逻辑都是事件的回调函数，所以 Node.js 始终在事件循环中，程序入"}, {"id": "6844903801481068551", "title": "deno 如何偿还 node.js 的十大技术债", "desc": "“Node现在太难用了！”。Node.js之父 Ryan Dahl 去年初要开发一款 JavaScript 互动式数据分析工具时，忍不住抱怨起自己十年前一手创造的技术。 Ryan Dahl 想要设计出一款类似 IPython 的互动式数据科学分析命令行工具，但改用 JavaSc…"}, {"id": "6844904004007264264", "title": "Node项目部署阿里云", "desc": "1. 背景介绍 工作这么长时间以来，对服务器，域名，ip这些东西只有一些模糊的印象，一直想对其有一个更加深入的了解。刚好这次本地写了一个node项目，就想利用阿里云这个平台将这个项目托管到平台的服务器，最终能在公网ip直接访问这个项目。 3. 流程 下面是主要的流程。 前往阿里…"}, {"id": "6986513831375831054", "title": "node爱好者边边周日源码重读16.5.0", "desc": "node爱好者边边周日源码重读16.5.0 ## 看代码 会调用registerBuiltinModules函数注册C++模块，这个函数会调用一系列registerxxx的函数"}, {"id": "6988131721292021797", "title": "子进程模块 child_process 获取git branch tag 信息", "desc": "child_process child_process 模块提供了衍生子进程的能力，用于在node 环境中执行子进程和其他操作，比如执行.cmd， .bat 和 shell 脚本。 Node.js v"}, {"id": "6937470036822982663", "title": "Node.js 模块化你所需要知道的事", "desc": "我们知道，Node.js是基于CommonJS规范进行模块化管理的，模块化是面对复杂的业务场景不可或缺的工具，或许你经常使用它，但却从没有系统的了解过，所以今天我们来聊一聊Node.js模块化你所需要知道的一些事儿，一探Node.js模块化的面貌。 在Node.js中，内置了两…"}, {"id": "6986952248051892261", "title": "记一次 .\\node_modules\\.bin\\electron-rebuild.cmd  重新编译重新编译问题", "desc": "在Electron中重新编译serialport 报错，几次采坑后，尝试解决： 结果终于好了，感觉莫名其妙"}, {"id": "6844903646623186958", "title": "ES6 系列之 WeakMap", "desc": "我们先从 WeakMap 的特性说起，然后聊聊 WeakMap 的一些应用场景。 1. WeakMap 只接受对象作为键名 2. WeakMap 的键名所引用的对象是弱引用 翻译过来应该是 WeakMaps 保持了对键名所引用的对象的弱引用。 只有当我们手动设置 obj = n…"}, {"id": "6844904178200870920", "title": "NestJS Microservice 的微服务架构初探", "desc": "微服务架构（Microservice Architecture）是一种架构概念，旨在通过将功能分解到各个离散的服务中以实现对解决方案的解耦。 回到微服务的概念中，它不是具体指某一技术，而是关于某种架构风格的集合，因此微服务本身是没有明确定义的，但我们知道它是有不只一个的独立服务…"}, {"id": "6844903613391699981", "title": "nodejs微服务框架解决方案", "desc": "seneca是一个nodejs微服务工具集，它赋予系统易于连续构建和更新的能力。下面会逐一和大家一起了解相关技术入门以及实践。 这里插入一段硬广。小子再进行简单整合之后撸了个vastify框架 ---- 轻量级nodejs微服务框架，有兴趣的同学过目一下，欢迎顺手star一波，…"}, {"id": "6984750160580444197", "title": "koa 原理解析", "desc": "本次的文章是之前 koa 专题的延续，计划书写两篇文章，本篇从零实现一个简单版的 koa 框架，第二篇实现几个中间件"}, {"id": "6844904152561090573", "title": "【踩坑之旅】Node.js 与 fsevents", "desc": "新项目、新换的 Macbook pro，理所当然的安装了最新版本的 Node.js V14.2.0，然后克隆了新项目的代码。 先来看 报错图一 中红框的位置，不难看出 node-gyp 在编译 fsevents 的 node-v83-darwin-64 时报错了。至于为什么报错…"}, {"id": "6886346942637572104", "title": "Redis + NodeJS 实现一个能处理海量数据的异步任务队列系统", "desc": "在最近的业务中，接到了一个需要处理约十万条数据的需求。这些数据都以字符串的形式给到，并且处理它们的步骤是异步且耗时的（平均处理一条数据需要 25s 的时间）。如果以串行的方式实现，其耗时是相当长的： 显然，我们不能简单地把数据一条一条地处理。那么有没有办法能够减少处理的时间呢？…"}, {"id": "6974642305017839629", "title": "如何设计分页接口 —— Eggjs最佳实践系列（三）", "desc": "分页接口是在大型系统中经常出现的接口形式。通过调研，目前主要存在以下三种分页方案：基于偏移、基于游标、基于ID列表。"}, {"id": "6971770846872338439", "title": "浅析 NodeJS 多进程和集群", "desc": "进程 进程是指在系统中正在运行的一个应用程序。 当我们打开活动监视器或者文件资源管理器时，可以看到每一个正在运行的进程： 多进程 复制进程 NodeJS 提供了 child_process 模块，并且"}, {"id": "6844903590033621006", "title": "尾调用和尾递归", "desc": "1. 定义 尾调用是函数式编程中一个很重要的概念，当一个函数执行时的最后一个步骤是返回另一个函数的调用，这就叫做尾调用。 2. 尾调用优化 造成这种结果是因为每个函数在调用另一个函数的时候，并没有 return 该调用，所以JS引擎会认为你还没有执行完，会保留你的调用帧。 ba…"}, {"id": "6909474213879513096", "title": "图解 Node.js 中的「单线程」", "desc": "我们常说， Node.js 是单线程的，这句话对新人有很大的误导作用。首先要明确：Node.js 程序并非「单线程」，证明代码如下： 看到没，一个 Node 程序有 7 个线程。到这里，你可能会很困惑，这究竟是怎么回事？其实正确的说法应该是： 所以说，我们的 Node 程序中包…"}, {"id": "6979099535372976136", "title": "Node.js 学习笔记", "desc": "认识 - 用来做些什么- 安装 - 使用 - 组成-内置 API 模块 （fs 、path 、http ）"}, {"id": "6844904021858189326", "title": "[译] What's New for Node.js in 2020", "desc": "Node.js在2019年走到了第十个年头, npm上面的包数量也超过了一百万. NodeJS自身的下载量也在以每年40%的速度持续增长. 而对于NodeJS最近的另一个里程碑便是它加入了OpenJS基金会, 该基金会旨在提高项目的健康度与可持续性, 同时与JavaScript…"}, {"id": "6922635591821721613", "title": "自己动手写个简单的脚手架工具", "desc": "本文是从我们公司的需求为出发点，编写一个简单的脚手架工具。首先，让我们分析需求：目前公司的项目比较多，分属于不同的客户，每个项目都是独立部署的，但是项目的前端框架基本分为三种：以app为载体的内嵌H5"}, {"id": "6926440096178634760", "title": "node.js实现前后端简单博客", "desc": "后端nginx反向代理上线配置expree重写koa2重写一：前端样式二：数据库简单配置建一个blogs表、users表。id自增长、主键、int，不能为nullcreatetimebigint（20"}, {"id": "6844904149402779661", "title": "NodeJS 中 DNS 查询的坑 & DNS cache 分析", "desc": "近期在做一个 DNS 服务器切换升级的演练中发现，我们在 NodeJS 中使用的 axios 以及默认的 dns.lookup 存在一些问题，会导致切换过程中的响应耗时从 ~80ms 上升至 ~3min，最终 nginx 层出现大量 502。 使用 http 模块发起请求（ax…"}, {"id": "6844904201286320135", "title": "midway + vue-cli  从零构建部署前后端分离框架", "desc": "前端框架和服务端框架搭配的形式多种多样，最近服务端框架在使用 midway.js ,考虑怎么将前端框架和服务端框架融合在一起花了不少心思。midway.js 相关文档较少，但是它基于 egg.js 开发的，egg关于模版渲染的插件很多。我当时想践行一下自己的想法，就尝试了一下。…"}, {"id": "6984792383049170981", "title": "原生node.js实现日志功能", "desc": "node.js实现简单规范日志打印功能。主要调用fs,path,node-datetime来实现。。"}, {"id": "6844903505329651725", "title": "在婚礼上搞点事情如何", "desc": "我的婚礼是在一年前，如今宝宝快要出生啦，和媳妇正在为宝宝取名字发愁，各位大大能否给点意见啊🙏，我姓梅。Ps. 这是个严肃的话题，像没关系、没文化之类的名字憋在肚子里，求你不要说出来。"}, {"id": "6844903831097049096", "title": "commander编写Node命令行工具(cli)", "desc": "当一个Nodejs程序运行时,process对象中有一个叫做argv的属性。命令行程序的第一个重头戏就是解析这个process.argv属性。 看起来process.argv好像是一个数组，其中第一个元素是node的执行路径，第二个元素是当前执行文件的路径，从第三个元素开始，是…"}, {"id": "6844903669553430542", "title": "记一次Vue全页面SSR深坑之旅 - 微弱的内存/CPU泄漏", "desc": "其实你没啥必要解决这个bug，因为国内很多公司每周一个版本，所以压根儿就察觉不到这个bug的存在。 其实你大可不必解决这个bug，因为你写一个定时自动重启脚本，在一个夜深人静的夜晚默默执行重启之。 其实你不用非得解决这个bug，因为百度也开始支持spa系统seo，你还在那里累死…"}, {"id": "6897218955199709191", "title": "入门node/npm的优秀网站", "desc": "npm 是 Node.js 标准的软件包管理器。 在 2017 年 1 月时，npm 仓库中就已有超过 350000 个软件包，这使其成为世界上最大的单一语言代码仓库，并且可以确定几乎有可用于一切的软件包。 它起初是作为下载和管理 Node.js 包依赖的方式，但其现在也已成为…"}, {"id": "6844903777837776903", "title": "Node.js调试指南", "desc": "现今 Node.js 愈发受欢迎，应用场景也越来越多，学会高效调试 Node.js 会让日常开发更高效。下面讲下使用inspector调试nodejs程序 Node6.3+ 的版本提供了两个用于调试的协议：v8 Debugger Protocol 和 v8 Inspector …"}, {"id": "6932683957066530830", "title": "Node.js：RPC通信", "desc": "RPC调用和ajax相同点和ajax不同点寻址/负载均衡TCP通信二进制协议Node.jsBuffer编解码二进制数据包buffer模块介绍Buffer.allocUnsafe:该方法会涉及buffe"}, {"id": "6844903873719566344", "title": "node爬虫入门教程，静态和动态抓取整合，简单易懂", "desc": "本文介绍一个 nodejs 的爬虫项目，受众对象为初学爬虫不久的小伙伴，通过这个项目能对 node 爬虫有一个简单的认识，也能自己动手写一些简单的爬虫。 🐯最终的数据希望能用于 web 开发，因此我在这里启了一个 web 服务，也是基于 koa。koa 是基于 nodejs …"}, {"id": "6955331683499376676", "title": "理解Node中的Buffer与stream | 创作者训练营第二期", "desc": "Node学习中绕不开的两个知识点，Buffer和stream，我的笔记按照形象类比 + 多看代码的形式和大家一起来学习这2个较难理解的抽象概念。"}, {"id": "6844903679762366471", "title": "Node.js模拟发起http请求从异步转同步的5种方法", "desc": "使用Node.js模拟发起http请求很常用的,但是由于Node模块（原生和第三方库）提供里面的方法都是异步，对于很多场景下应用很麻烦，不如同步来的方便。下面总结了几个常见的库API从异步转同步的几种方法。模块有：request, request-promise , reque…"}, {"id": "6844903950253031438", "title": "🐱 Mieo，前端“通用”脚手架养成指南", "desc": "为了让开发者更加便利，初始化项目的 CLI 工具已经成为各个前端框架、或者解决方案的标配。一行命令就可以初始化一个项目，并且还能选择一些配置项来达到自定制的目的，这样的确提高了开发者的效率，提升了使用体验。但是，随着业务中项目的增多，我们会发现这些并不能足够满足需求。 比如，V…"}, {"id": "6844904099813523470", "title": "前端赋能业务 - Node实现自动化部署平台", "desc": "是否有很多人跟我一样有这样的一个烦恼，每天有写不完的需求、改不完的BUG，每天撸着重复、繁琐的业务代码，担心着自己的技术成长。 其实换个角度，我们所学的所有前端技术都是服务于业务的，那我们为什么不想办法使用前端技术为业务做点东西？这样既能解决业务的困扰，也能让自己摆脱每天只能写…"}, {"id": "6940501044447150088", "title": "解决跨域问题的n种办法", "desc": "见到这个报错信息，那么就要恭喜你，遇到了跨域这个磨人的小妖精了。 关于这篇文章的代码，需要的自取。 同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。 所谓\"同源\"指的是“三…"}, {"id": "6961791999703777294", "title": "windows下，node设置NODE_ENV错误的解决方案 ", "desc": "今天在看node文档的时候，看到《Node.js 开发环境与生产环境的区别》一章时，设置NODE_ENV时遇到了一点点坑，在网上搜了一圈也没找到想要的答案，特开此贴给大家避避坑。文档中所示代码如下: "}, {"id": "6844903619645407240", "title": "使用 Node.js 开发简单的脚手架工具", "desc": "像我们熟悉的 vue-cli，react-native-cli 等脚手架，只需要输入简单的命令 vue init webpack project，即可快速帮我们生成一个初始项目。在实际工作中，我们可以定制一个属于自己的脚手架，来提高自己的工作效率。 为什么需要需要脚手架？ 减少…"}, {"id": "6979998802816008223", "title": "前端进阶 - exec/spawn/fork", "desc": "借助exec/spawn/fork，我们可以在node中运行执行控制台命令，也可以实现一些自动交互，从而实现更高的自动化和集成度。"}, {"id": "6844903645960470542", "title": "一起来学习如何用 Node 来制作 CLI", "desc": "提起 CLI，\b不由得会想起 vue-cli 和 angular-cli，它们都是基于 Node 的命令行工具。 假设你现在要建立一个新项目 ，这个项目配置和之前的项目配置是一样的。在你没有 CLI 的时候，你只能通过复制、粘贴来进行。然而，当你有了 CLI，你就可以通过命令来…"}, {"id": "6947855745484324878", "title": "看了就会的 Node.js 三个模块常用 API", "desc": "在日常使用 Node 进行开发的时候，会使用到一些文件系统、路径操作等基础 API，这里整理一下，方便大家理解和直接使用。 这里只介绍最常用的那些，不是所有哈，想要看更全的，直接看官方文档就 OK。 尽量不废话，多上代码。 先介绍 process 模块，它提供了当前 Node …"}, {"id": "6844903811606134792", "title": "Node.js+Express+Mysql 实现增删改查", "desc": "这次选用nodejs+express+mysql 使用http作为客户端，express框架搭建服务端，从而实现数据的增删改查。这篇文章可以算作上篇文章的升级篇，加入了和数据库的交互。 查到的结论是： MySQL8.0版本的加密方式和MySQL5.0的不一样，连接会报错。 通过…"}, {"id": "6844903958012493837", "title": "学习后端鉴权系列: 基于JWT的会话管理", "desc": "上一节讲了基于Cookie+Session的认证方案。 由于基于Session方案的一些缺点,基于token的无状态的会话管理方案诞生了,所谓无状态就是指服务端不再存储信息。 使用postman测试所有接口。 服务端不再需要存储与用户鉴权相关的信息,鉴权信息会被加密到token…"}, {"id": "6844903540788297736", "title": "NodeJs爬虫抓取古代典籍，共计16000个页面心得体会总结，附带对应的React+ Redux 前端 和 Koa2服务端代码", "desc": "之前研究数据，零零散散的写过一些数据抓取的爬虫，不过写的比较随意。有很多地方现在看起来并不是很合理 这段时间比较闲，本来是想给之前的项目做重构的。 后来 利用这个周末，索性重新写了一个项目，就是本项目 guwen-spider。目前这个爬虫还是比较简单的类型的， 直接抓取页面，…"}, {"id": "6982558712175001607", "title": "NPM | Yarn 安装 node-sass 失败", "desc": "node-sass 与 node 版本兼容问题。采用 nvm 管理工具，安装并切换正确的 node 版本"}, {"id": "6844903570974703629", "title": "使用Rollup打包JavaScript", "desc": "String 要写入的文件。也可用于生成 sourcemaps，如果适用 iife – 一个自动执行的功能，适合作为<script>标签。（如果要为应用程序创建一个捆绑包，您可能想要使用它，因为它会使文件大小变小。） 我们用的是 --save-dev 而不是 --save，因为…"}, {"id": "6954091900823404557", "title": "CabloyJS实现了一款基于X6的工作流可视化编辑器", "desc": "CabloyJS 4.8.0采用[X6 图编辑引擎](https://antv-x6.gitee.io)实现了一款`工作流可视化编辑器`，从而可以在系统运行过程中，`随时、动态、可视化`的创建工作流定"}, {"id": "6844903889423040526", "title": "Docker 快速部署一个 Node App", "desc": "然后安装 Docker 的 VSC 插件，安装这个插件仅仅是为了方便操作 Docker。 我们的目的是要在 nginx 的 Container 中对外暴露一个端口，Container 中是我们打包后的 node App，外部可通过这个端口访问我们的服务。 在 Docker im…"}, {"id": "6982577256979791879", "title": "Koa2编写基本后端接口（一）", "desc": "本篇文章主要是Koa2框架的基本介绍、安装和使用，以及 koa-router 路由模块的使用和抽离封装。"}, {"id": "6844903957752463374", "title": "Node.js 中的 require 是如何工作的？", "desc": "作为前端开发者，不可避免每天都要跟 Node.js 打交道。Node 遵循 Commonjs 规范，规范的核心是通过 require 来加载依赖的其他模块。我们已经常习惯于使用社区提供的各种库，但对于模块引用的背后原理知之甚少。这篇文章通过源码阅读，浅析在 commonjs 规…"}, {"id": "6971409178791247902", "title": "每天学习一个nodejs模块-fs", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 文件读写模块fs fs是nodejs中提供的用于读写文件系统的模块，可以用于文件的读写，复制，追加，删除等操作，每个文件api都提供异步和同步两种"}, {"id": "6844903639417356302", "title": "13 个示例快速入门 JS 抽象语法树", "desc": "Javascript 代码的解析（Parse ）步骤分为两个阶段：词法分析（Lexical Analysis）和 语法分析（Syntactic Analysis）。这个步骤接收代码并输出 抽象语法树，亦称 AST。 随着 Babel 的生态越来越完善，我们通常会使用 Babel…"}, {"id": "6844903616080281614", "title": "Babel插件开发入门指南", "desc": "主要包括：Babel如何进行转码、插件编写的入门基础、实例讲解如何编写插件。 阅读本文前，需要读者对Babel插件如何使用、配置有一定了解，可以参考笔者之前的文章。 本文所有例子可以在 笔者的github 找到，欢迎访问笔者博客获取更多相关文章。 首先来了解Babel转码的过程…"}, {"id": "6844903581095575560", "title": "常用的前端设计模式，让你写出更优雅的代码", "desc": "写代码容易，写出优雅的代码难，写易于维护的、容易扩展的、结构清晰的代码应该是每位开发者努力的目标，而学习设计模式，合理的的使用能让我们离这个目标更进一步。最近看了《Javascript 设计模式与开发实践》这本书, 一言以蔽之，真不错的一本书，在这里总结一下书中介绍的主要的在 …"}, {"id": "6976493789905059871", "title": "前端利器 之从零开始手写一个node命令行工具", "desc": "前言 node.js 作为一种服务器语言，其拥有很多底层操作的api，比如文件写入，http服务器等模块。同时其语法和js几乎一直，所以作为前端的我们，可以运用这些东西帮助解决一些开发中的实际问题。 "}, {"id": "6844903577417170957", "title": "JavaScript 运行机制--Event Loop详解", "desc": "JS是一门单线程的语言，异步操作是实际应用中的重要的一部分，关于异步操作参考我的另一篇文章js异步发展历史与Promise原理分析 这里不再赘述。 堆（heap）是指程序运行时申请的动态内存，在JS运行时用来存放对象。 栈（stack）遵循的原则是“先进后出”，JS种的基本数据…"}, {"id": "6976303954325929997", "title": "NodeJs 子进程与ipc", "desc": "前言 开始写一些博客主要是在看完代码后再温故总结一遍, 也是为了后面回头也能查阅。本系列会从官网的例子出发, 尽可能以链路追踪的方式记录其中源码核心模块的实现, 本篇例子来源 libuv - Proc"}, {"id": "6883405172748320775", "title": "Node 使用express-http-proxy 做api网关", "desc": "拷贝代码备忘，filter过滤请求，proxyReqOptDecorator重写请求头，代码如下："}, {"id": "6844904081689952269", "title": "《前端之路》--- 重温 Egg.js", "desc": "M =》 Model（模型） 是处理应用程序数据逻辑的部分，主要是和数据库打交道。 V =》 View（视图） 是作为视图展示使用，如果没有这部分的需求的化， view 这一个层面的内容是可以被省略的。 config.local.js --- 本地开发环境，额外于 默认配置。 …"}, {"id": "6844903946155196430", "title": "教你如何用Node实现API的转发（node中间层）（某音乐）", "desc": "...... Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Express 基于 Node.js 平台，快速、开放、极简的 Web 开发框架。 本文涉及的…"}, {"id": "6990385363189497869", "title": "Node学习-04-Express", "desc": "Node学习-04-Express Express安装 Express基本认知 Hello World 修改完代码之后自动重启-nodemon 安装 使用 静态资源服务 express中使用art-t"}, {"id": "6844904110731296775", "title": "第三期 |《早早聊搞搭建》搞过搭建的我收获了什么？（下篇）", "desc": "上篇大致提及了本篇的主要内容，首先是把自己在搭建系统中见识的秒开、跨端、海量部署的学舌给大家（自己掌握的不牢靠，只能大概阐述），主题内容是自己在参加完大会后反刍对搭建工具的理解。 这是供一个运营人员的快速搭建平台，提及了其他系统没有的功能：灰度，更重要的主题是秒开。 讲师重点介…"}, {"id": "6992835220940521509", "title": "【Node.js】知识梳理：包管理器（npm/yarn）", "desc": "文章介绍了npm和yarn两个js包管理工具。整理了二者常用的命令并作出对比。实际中推荐使用yarn。"}, {"id": "6844903516759130120", "title": "koa 实现 jwt 认证", "desc": "关于 Token 认证机制，这里不做更多解释。不清楚的可以看我的这篇文章：Web开发中常见的认证机制 jsonwebtoken - 用于生成token下发给浏览器，在 koa2 以后的版本不再提供 jsonwebtoken 的方法,所以需要另行安装。 该项目需要你已经装好 mo…"}, {"id": "6940999521241399332", "title": "Node.js 基本架构", "desc": "经过架构分析，对于 Node.js 是基于 V8 的 JavaScript 运行时就不难理解了。"}, {"id": "6996841448754642957", "title": "详细讲解跨域问题相关概念及常见的CORS和JSONP解决方案代码", "desc": "什么是跨域问题 浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域 跨域跨域，见名知意，跨出领域的意思。那什么是领域呢？ 我们知道，无论是前端还是后端代码想要运行，需要"}, {"id": "6892652204780748813", "title": "前端利器puppeteer", "desc": "Puppeteer 是 Chrome 开发团队在 2017 年发布的一个 Node.js 包，同时还有 Headless Chrome。用来模拟 Chrome 浏览器的运行。它提供了高级API来通过 DevTools 协议控制无头 Chrome 或 Chromium ，它也可以…"}, {"id": "6996675932710764558", "title": "讲讲ES6的模块与CommonJS的模块的异同", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 前言 之前2篇文章讲了exports与module.exports的异同和es6的export和export default指令，今天来讲"}, {"id": "6844904014975500301", "title": "Node.js 中的一股清流：理解 Stream（流）的基本概念", "desc": "接触过 Node.js 的开发人员可能知道，流（Stream）这个概念比较难理解，也不太好处理。 这篇文章就来帮你理解流的概念，以及如何使用它。别担心，一定会搞懂的。 流（Stream）是驱动 Node.js 应用的基础概念之一。它是数据处理方法，用于按顺序将输入读写到输出中。…"}, {"id": "6844903696770269191", "title": "JavaScript 模块化解析 ", "desc": "随着 JavasScript 语言逐渐发展，JavaScript 应用从简单的表单验证，到复杂的网站交互，再到服务端，移动端，PC 客户端的语言支持。JavaScript 应用领域变的越来越广泛，工程代码变得越来越庞大，代码的管理变得越来越困难，于是乎 JavaScript 模…"}, {"id": "6844903656811151367", "title": "腾讯 Node.js 非侵入开发框架 Tars.js 2.0 正式发布", "desc": "随着互联网的发展，越来越多的业务不仅仅由单一节点或是单一语言就可承载，而是趋向多语言分布式协同开发，例如接入层由 Node.js 完成，逻辑以及数据层由 C++/GO/Python 实现，并由此组成大型异构系统。 基于 Tars 体系研发出 Tars.js 以便用户在不改变异构…"}, {"id": "6844903826944688136", "title": "基于 GraphQL 实践的一点思考", "desc": "hello~亲爱的观众老爷们大家好~最近一直沉迷于 GraphQL 的应用实践，正好公司黑客马拉松临近，就拉上了两位小伙伴，结合实际的业务场景，把 GraphQL 作为中间层的解决方案提上去~项目完成度还算不错，对 GraphQL 也有了更深入的理解，在此记下整个过程的收获。 …"}, {"id": "6844903686376816647", "title": "小程序即时通讯demo", "desc": "大家可以自行下载，按照提示运行，就能看到效果；现在只是做了要给基本版的，要做复杂功能，可以继续添加。"}, {"id": "6844903641468387342", "title": "NodeJS 的适用场景", "desc": "线程是可以独立运行的最小的 CPU 单位，可以在同一个进程里并发运行，共享该进程下的内存地址空间。 当不同的线程需要占用同一个变量时，根据先到先得的原则，先到的线程在运作时，后来的线程只能在旁边等待，也就是加入到了阻塞排队序列。就造成了线程阻塞。 类似场景：银行柜台办理业务 优…"}, {"id": "6844903602889179144", "title": "vue+koa2即时聊天，实时推送比特币价格，爬取电影网站", "desc": "技术栈vue+vuex+vue-router+socket.io+koa2+mongodb+pm2自动化部署+图灵机器人+[npmscript打包，cdn同步，服务器上传一个命令全搞定]功能清单登陆注"}, {"id": "6844903991000694791", "title": "翻遍互联网都找不到的解决方案,一行代码轻松实现 Gitbook 默认折叠左侧菜单效果", "desc": "可能是网上关于 Gitbook 的教程相对来说有些落后,加上写文章时分享了不少关于 gitbook 系列教程,因此关注我的粉丝好友中有不少是来源于 Gitbook. 但是,当你在浏览器中输入 gitbook 官方文档 时,并找不到想象中的官方文档而是新版官网,不信你自己去搜一下…"}, {"id": "6844904054628302855", "title": "从 JS 引擎到 JS 运行时（下）", "desc": "在上篇文章中，我们已经为 JS 引擎扩展出了个最简单的 Event Loop。但像这样直接基于各操作系统不尽相同的 API 自己实现运行时，无疑是件苦差。有没有什么更好的玩法呢？是时候让 libuv 粉墨登场啦。 我们知道，libuv 是 Node.js 开发过程中衍生的异步 …"}, {"id": "6882368773228068878", "title": "系统性学习Node.js（6）—— 手写文件流", "desc": "流 主要分为 可读流 与 可写流，在 Node 中 stream 模块封装了流的基本操作。我们今天主要介绍的文件流也是继承 stream 模块来实现的。 文件流 针对文件操作而实现的流。当我们操作文件时，由于文件可能特别大，如果一次性操作文件的所有内容，性能跟内存消耗肯定会很高…"}, {"id": "6844903821462732813", "title": "webpack及node.js基础必会--path模块的常见操作", "desc": "在没有相关经验的同学，在学习webpack和使用node时，经常会遇到__dirname path.resolve 等，这时往往会一脸懵逼这些都是什么，干嘛的，为什么这些资料和书都完全不提，难道就我不知道 -。- 其实path模块是很常见很通用的。这里我就简单总结一些在项目中经…"}, {"id": "6844903519670157325", "title": "基于 Node+express 爬虫的数据 API，爬一套自己的api数据(二)", "desc": "服务器启动默认端口为3001 、启动之后就可以开启了接口服务了. 3. 新闻资讯"}, {"id": "6844903615237193742", "title": "Node.js child_process模块解读", "desc": "在介绍child_process模块之前，先来看一个例子。 可以试一下使用上面的代码启动Node.js服务，然后打开两个浏览器选项卡分别访问/compute和/，可以发现node服务接收到/compute请求时会进行大量的数值计算，导致无法响应其他的请求（/）。 在Java语言…"}, {"id": "6938741721308069895", "title": "Node.js 的日志系统指南", "desc": "本文用到的技术栈有 typescript、express、winston 和 morgan. 问题是，很多应用程序没有一个全面的日志系统，甚至更糟，它们到处使用简单的console.log。 在本文中，你将了解如何使用 Winston 和 Morgan 配置日志。 你可以在 G…"}, {"id": "6844903679829475336", "title": "简易表达式解析器编写", "desc": "在做一个Node监控系统的时候要做了一个邮件报警的需求，这时候就需要自定义一套规则来书写触发报警的表达式，本文就介绍一下如何编写一个简易的表达式解析器。 附上界面截图，图中就是一个表达式的例子。 在开始编写之前你需要确定你的表达式需要拥有些什么能力。本文的表达式是判断是否触发报…"}, {"id": "6873368324227629069", "title": "使用Node.js打通支付宝支付(沙箱环境)", "desc": "沙箱环境(Beta)是协助开发者进行接口功能开发及主要功能联调的辅助环境，模拟了开发平台部分产品的主要功能和主要逻辑。可用于再产品上线前了解环境、组合和调试各种接口。 然后点打开，点击生成密钥，即可生成商户应用私钥与商户应用公钥。然后点击复制公钥。 然后就可以得到支付宝公钥了，…"}, {"id": "6878195401988505607", "title": "前端自动化部署简单实践", "desc": "最近交付了一个多端小项目，部署这块动静尽量最小话，没有必要为了它搭建一套 ci pipeline，于是我就走上了自动化部署方案的调研之路，掘金上大多是讲Jenkins + docker，通过调研用纯nodejs得出两套我觉得可行的方案，写下来作为学习记录。 前端无需了解传统CI…"}, {"id": "6994798494259085348", "title": "基于node的文件上传和下载", "desc": "“这是我参与8月更文挑战的第10天，活动详情查看： 8月更文挑战” https://juejin.cn/post/ 6987962113788493831” 前言 未来的日子，愿你把自己调至最佳状态，"}, {"id": "6994836880994877454", "title": "Nvm 安装新的 nodejs 版本", "desc": "在使用 nvm 安装新的 nvm 版本之前，请确定你的操作系统中已经安装了 nvm。 安装的方法，请访页面：Windows 中 Node.js 中 nvm 的安装配置和使用 中的内容。 安装新版本 假"}, {"id": "6844903791611871239", "title": "Nodejs教程16：POST文件上传", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 处理文件上传数据，也是前后端交互中重要的功能，它的处理方式与数据不同。 接下来，通过一个例子查看服务端接收到的文件上传数据。 form的属性enctype=\"multipart/form-data\"代表表单上传的…"}, {"id": "6844903923522732039", "title": "利用dubbo打造真正的nodejs端的微服务体系", "desc": "基于consul的spring生态。nest-cloud就是基于consul来搭建微服务。 阿里巴巴的dubbo与sofa。 基本上国内的Java微服务都是使用以上的生态。而nodejs为了能够与Java微服务互通，目前还没有非常完善的体系，除了nest-cloud的微服务体系…"}, {"id": "6844903839460655118", "title": "用Node.js创建安全的 GraphQL API", "desc": "本文的目标是提供关于如何创建安全的 Node.js GraphQL API 的快速指南。 现在几乎所有的解决方案都使用了某种应用程序编程接口（API）。 即使你只用社交网络（如Facebook或Instagram），仍然会用到使用API​​的前端。 如果你感到好奇，你会发现几乎…"}, {"id": "6934612101436538888", "title": "JSON WEB TOKEN(JWT)", "desc": "JWT是toke的一种形式。主要由header（头部）、payload（载荷）、signature（签名）这三部分字符串组成，这三部分使用\".\"进行连接，完整的一条JWT值为${header}.${payload}.${signature}，例如下面使用\".\"进行连接的字符串：…"}, {"id": "6898252272267083790", "title": "Node.js系列五 - npm你不知道的细节", "desc": "一. 包管理工具 1.1. 认识npm 显然，通过第二种方式我们可以更好的管理自己的工具包，其他人也可以更好的使用我们的工具包。 1.2. 项目配置文件 这个配置文件在Node环境下面（无论是前端还是后端）就是package.json。 我们会发现属性非常的多，我们这里对一些常…"}, {"id": "6943493817165316126", "title": "Koa2 核心源码解析", "desc": "关键词：异步函数、中间件。这是 Koa “优雅”“愉快”“轻量”的核心 通过 new Koa，我们先获得了一个 koa 实例 —— app。那么这个 app 是如何拼装的呢？ 在获得 app 后，我们可以立即 listen，就启动了个什么也不做的 Koa 了。 参数是透传下去的…"}, {"id": "6844903587718365197", "title": "基于Webpack和ES6构建NPM包", "desc": "1. 创建repository并clone到本地 2. 添加.editorconfig 3. 创建目录 4. 创建package.json 5. ESLint 初始化 6. 创建webpack和babel的配置文件 7. 添加npm命令 1. 安装AVA 和 nyc 2. 添加…"}, {"id": "6991482978358525960", "title": "Node实现自动配置路由～", "desc": "直接上干货，因为我也是初学node，哈哈～ 首先创建一个node模块create-Vue-Routers，里边有个bin文件夹和lib文件夹，执行npm init -y 初始化一下 在安装相关包 np"}, {"id": "6844903619280502798", "title": "Node.js 线程你理解的可能是错的", "desc": "答案：线程数不为1，不是因为线程池，而是因为V8。Node.js启动后会创建V8实例，V8实例是多线程的，V8中的线程有： 答案：并不是，线程池中的线程是按需创建的。 线程数才变成了10。之所以为10，是因为线程池中线程的默认值是4。 无论多少次访问都不会创建线程，线程数永远为…"}, {"id": "6844903976278704142", "title": "教你在 Node.js 项目中接入 Sign with Apple 第三方登录", "desc": "在 WWDC19 大会上，苹果公司推出了一项有意思的内容，即 “Sign In with Apple”。这项由苹果提供的认证服务，可以让开发者允许用户使用 Apple Id 来登录他们的应用程序，Sign In with Apple使用OAuth登录授权标准。 本文将介绍使用苹…"}, {"id": "6844904099310206984", "title": "深入分析 portfinder", "desc": "有没有在做公众号开发的时候，本地需要启动80端口，但是你用脚手架端口号最低从1024启动的？如果你也遇到过这个问题。下面这篇文章将带你解决这个问题。 记得在最开始使用vue脚手架的时候，陪位文件都在build文件夹中，我们在做本地开发的时候，有时候启动两个服务的时候就出现：th…"}, {"id": "6887096912701292557", "title": "1024解放双手|技术文档系统生成", "desc": "1. 技术选型，可选方案对比 2. jsdoc快速使用 2. 2 基本使用 这样我们就可以通过 npm run build-doc 来生成文档了。 4. jsdoc，添加vue支持 5. 配置文件说明（跳转门） 6. 注释说明 跳转门 我们知道，JSDOC 的工作原理是通过分析…"}, {"id": "6844904094918934535", "title": "实现全栈收银系统（Node+Vue）（下）", "desc": "基于上一篇中的开发基本上实现了登录注册，通过token拿数据等一些登录涉及到的功能开发，基本上后端的功能已全部完成，可以看下上一篇实现全栈收银系统（Node+Vue）（上）的分享。 此处实现是雷同的，共用同个弹窗组件，其中涉及到父子组件之间的相互传值。 添加的时候，我们通过点击…"}, {"id": "6844903507275808782", "title": "fly.js—Node下增强的API", "desc": "Fly 同时支持浏览器环境和 node 环境，在 node 下，由于没有浏览器沙箱的限制，有访问文件系统的能力，为此fly 针对 node，专门做了功能提升，主要添加了文件下载和上传的便捷方法。 Node adapter 使用了 request 库，向作者致谢。 url 为下载…"}, {"id": "6844903721445359624", "title": "前端也需要了解的数据结构-链表", "desc": "和数组区别，地址离散。它在内存地址中可以离散的分配，由于它是离散的分配，所以他可以省去很多的麻烦，不像数组由于预留空间不足经常需要拷贝，分配新的内存地址 为了让合并操作可以在O(1)完成，除了头指针head外，还需要维护一个尾指针tail。 写一个函数center(list)找…"}, {"id": "6900855322198409223", "title": "Node - 接收get与post参数的方式（三）", "desc": "“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine”官网的一句介绍大致是说“Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时”，简单来说就是一个能让…"}, {"id": "6987281969394483214", "title": "node.js搭建原生服务器以及构建数据接口", "desc": "前端使用node.js搭建server服务器，生成数据接口，包括用户登录，数据的增删改查，从后端理解数据如何被请求。"}, {"id": "6844904030162911240", "title": "Node + NAPI 实现 C++ 扩展 - LRU 淘汰算法", "desc": "前段实践了一下 Node 的 C++ 编写，对于底层的编程实践是每个程序员心中所向往的圣地。由于接触的 Node C++ 的时间比较少，可能还无法完全理解其中的精髓，但是本文只记录自己的一个实践。 先来看看 Node Addons 在整个模块中的所处的位置。 Addons 是用…"}, {"id": "6949868385102463007", "title": "在Node.js中自定义输出实例化对象的信息（类似Python的__repr__实现）", "desc": "Method of Customizing String Representaion of self-defined Class in Node.js Console"}, {"id": "6972363234535800840", "title": "cheerio上手教程", "desc": "cheerio 是为服务器特别定制的，快速、灵活的jQuery核心实现. 来个例子 特性 相似的语法: Cheerio 包括了 jQuery 核心的子集。Cheerio 从jQuery库中去除了所有 "}, {"id": "6863991439395651598", "title": "nodejs --- 融会贯通 （三）", "desc": "项目管理多环境配置JSON配置文件环境变量使用第三方模块管理（nconf）依赖管理dependencies：模块正常运行需要的依赖devDependencies：开发时候需要的依赖optionalDe"}, {"id": "6844903640398823438", "title": "带你一起撸一遍 nodejs 常用核心模块（二）", "desc": "前沿：核心模块二主要是和流相关的部分，当然要想给这一块有清楚的了解，你需要对核心模块（一）中的内容有一些了解。 以上三个方法的弊端：都是将文件整体读出或者写入。 以上就是nodejs的常用核心模块的一部分，因为涉及的内容比较多并没有深入进去，其实每个部分都可以展开里面有很多知识…"}, {"id": "6844903976538734606", "title": "nodejs -- 登录接口之密码错误限制次数(含代码)", "desc": "银行卡也是这种，尝试次数过多，就锁定，说不定还会自动报警。 在表里面添加一个字段，string类型。里面包含两个数据，密码失败尝试日期 和 次数"}, {"id": "6844903533452476429", "title": "原生js系列之无限循环轮播组件", "desc": "在上一篇文章中，我们封装了一个DOM库（qnode），为了让大家直观地感受到其方便友好的自定义工厂模式，于是给大家带来了这篇文章。 没有看过上一篇文章的话，可以在这里找到：原生js系列之DOM工厂模式。 那么这篇文章，我们将基于上述的qnode，从头开始写一个无限循环轮播图的组…"}, {"id": "6844904087721361415", "title": "前端科普系列（2）：Node.js 换个角度看世界", "desc": "本文为系列文章（2），主要介绍 Node.js 的前世今生、核心科技以及背后的故事。 Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js® 是一个基于 Chrome V…"}, {"id": "6844903734057795592", "title": "制作一个Node命令行图像识别工具", "desc": "从 0 开始制作一个 NodeJS 命令行验证码识别工具。实现如下效果。 这样，我们告诉 *nix 系统，JavaScript 文件的解释器应该是 /usr/bin/env node，它查找本地安装的 node。 主要逻辑在 cli.js 和 recognize.js 中。这里…"}, {"id": "6953212763342651405", "title": "Node.js学习日记（四）：CLI和FS API：首个Node工具", "desc": "需求：构建一个命令行文件浏览器，可以在当前目录下查找文件、显示文件和创建文件。 node.js的输入和输出 process对象中包含了三个流对象，分别对应了三个UNIX标准流： stdin、stdou"}, {"id": "6844903895710302221", "title": "常见登录认证 DEMO", "desc": "这种登录方式实际上就是验证用户信息后，将验证 session 存放在 session cookie 内。一旦过期就需要用户重新登录 此种令牌登录方式比较主流，用户输入登录信息，发送给服务器验证，通过后返回 token，token 可以存储在前端任何地方。随后用户请求需要验证的资…"}, {"id": "6959387303181549604", "title": "javascript 基础总结", "desc": "javascript 基础总结 一 目录 每天坚持发表一篇文章 目录 一 目录 二 前言 三 DOM 常用 API 四 null 和 undefined 的区别 五 事件流    5.1 addEve"}, {"id": "6925002329935036424", "title": "Nodejs入门 一", "desc": "4.第三方模块，要先安装，查找顺序 本级目录 -> 上级目录 。。。->到根目录"}, {"id": "6844903648305086478", "title": "使用 Hapi 开发 RESTful APIs ", "desc": "Hapi 是一个 Node.js 的 web 框架，即一个构建应用程序和服务丰富的框架。"}, {"id": "6844903592122384397", "title": "vuepress踩坑记", "desc": "vuepress是尤大大4月12日发布的一个全新的基于vue的静态网站生成器，实际上就是一个vue的spa应用，内置webpack，可以用来写文档。恰好最近需要为一些组件写文档，就动手撸了一波，毕竟刚发布，遇到不少坑，最终还是磕磕碰碰的运行起来了，为了避免大家踩同样的坑，特意将…"}, {"id": "6844903668383236104", "title": "网页模板pug基本语法", "desc": "pug原名jade,因版权问题更名为pug,即哈巴狗。与hexo默认模块ejs一样，pug也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题manupassant也使用了pug。 本文针对Hexo中使用pug的情况为例，说明其基本语法。…"}, {"id": "6844903926874013704", "title": "面向前端工程师的Nodejs入门手册(三)", "desc": "前面两篇从前端入门的视角去学习认识了Nodejs，接下来将真正从实战角度来看看Nodejs能做什么，如何从零到一的去完成你的全栈项目。 在平时，我们所接触到的一个完备的Web系统中，一般都会接触到一个点，那就是缓存。而Nodejs能不能操作缓存系统呢？如何操作的呢？接下来进入新…"}, {"id": "6844903800252137480", "title": "Nodejs教程24：Stream流", "desc": "阅读更多系列文章请访问我的GitHub博客，示例代码请访问这里。 使用fs读取文件，它是一次性将文件的所有内容读取到内存中，再一次性发送到客户端，因此会占用大量内存。 从磁盘读取文件期间，磁盘处于忙碌状态，而网络处于空闲状态。 磁盘读取完成后，开始发送文件时，情况正相反，网络处…"}, {"id": "6844903635466321933", "title": "【译】ES2018 新特性：Promise.prototype.finally()", "desc": "Jordan Harband 提出了 Promise.prototype.finally 这一章节的提案。 finally 的回调总是会被执行。作为比较： then 的回调只有当 promise 为 fulfilled 时才会被执行。 catch 的回调只有当 promise …"}, {"id": "6916013495091740685", "title": "Node.js child_process 模块学习指南", "desc": "在node中，child_process这个模块非常重要。掌握了它，等于在node的世界开启了一扇新的大门。 下面列出来的都是异步创建子进程的方式，每一种方式都有对应的同步版本。 .exec()、.execFile()、.fork()底层都是通过.spawn()实现的。 .ex…"}, {"id": "6844903711756533768", "title": "Nodejs微信公众号开发", "desc": "我们在微信网页开发的时候需要通过后端返回的微信签名数据加以前端的配置才能使用微信提供的分享，图像，音频等api接口。这里我们就用前后端分离的思想，拿分享到朋友圈为例，使用node来完成这一过程 先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。 下面…"}, {"id": "6844903711991398414", "title": "显微镜下的webpack4：灵魂tapable，终于搞懂钩子系列！", "desc": "大家在看webpack源码的时候，有没有感觉像再看天书，似乎没有办法一个文件比如webpack.js从头看到尾。感觉webpack的跳跃性很强，完全不知道程序在运行的时候，发生了什么。完全不清楚这个事件是什么时候发生的，比如loader是什么时候执行的，plugin又是什么时候…"}, {"id": "6844903641900417031", "title": "一款简约实用的“在线接口流程测试工具”", "desc": "postMan 来试一试接口通不通，至于接口之间的上下承接，请求结果是否达到预期，无力 Care。当 Ready 去联调的时候，结合业务逻辑，才发现接口会有各种各样的坑，才让后台匆匆忙忙去修复，让后台白白错过一个并行修复期。 不用担心登录态。即使你的流程很多都需要基于头一个接口…"}, {"id": "6904173064604303373", "title": "posthtml-modules: 编译期模块处理插件", "desc": "posthtml-modules 是为 PostHTML 提供的模块化处理插件。它将特定的标签看作模块导入语句，通过对 HTML 进行解析和编译将模块导入语句所在的部分替换成模块文件中的内容，同时支持向模块传入嵌套内容和数据。能够在编写静态 HTML 时提供类似模板组件的编译期…"}, {"id": "6844903946251681799", "title": "node模块加载机制", "desc": "阶段1. 粗查阶段 阶段2. 精确查找，获取文件绝对路径"}, {"id": "6919402216201650183", "title": "《npm发布ts开发的node js命令行工具》", "desc": "上一篇中我们借助百度翻译接口，用typescript写了一个node js的命令行工具（commander js），实现的效果就是： 在终端输入命令：ts-node-dev src/cli.ts hello 就会输出翻译结果：你好。 现在想把这个翻译工具发布到npm。需要做哪些…"}, {"id": "6844903651169796110", "title": "说一说javascript的异步编程", "desc": "众所周知javascript是单线程的，它的设计之初是为浏览器设计的GUI编程语言，GUI编程的特性之一是保证UI线程一定不能阻塞，否则体验不佳，甚至界面卡死。 所谓的单线程就是一次只能完成一个任务，其任务的调度方式就是排队，这就和火车站洗手间门口的等待一样，前面的那个人没有搞…"}, {"id": "6844903683457548295", "title": "动手制作nodejs命令行工具 iconfont-cli", "desc": "首先我们创建一个新的项目目录mkdir iconfont-cli，并使用npm init进行初始化，一路回车即可。 命令行交互最核心的两大部分: 输入与输出。在准备工作部分，我们已经通过执行iconfont简单命令成功运行脚本并输出log。而通常，我们在执行命令时会传入一些参数…"}, {"id": "6844903863917494280", "title": "【译】A Guide to Node.js Logging", "desc": "当你开始使用 JavaScript 做开发时，你可能学习到的第一件事情就是如何使用 console.log 将内容打印到控制台。如果你搜索如何调试 JavaScript，你会发现数百个博客文章和 StackOverflow 的文章都指向简单的 console.log 。因为这是…"}, {"id": "6844904008826486797", "title": "还没搞懂nodejs的http服务器？看这一篇就够了", "desc": "因为我们知道nodejs启动的服务器依赖于libuv，所以这里我们有必要将libuv如何启动tcp服务器的过程说一下，后面的内容才不会看得糊里糊涂。 那么这么一个过程，nodejs是如何通过v8和js将整个过程实现出来的呢？这也是我们本文想要阐释的重点。 nodejs的魅力在哪…"}, {"id": "6844904082151653389", "title": "5 分钟搭建 Node.js 微服务原型", "desc": "微服务已成为在 Node.js 中构建可扩展且强大的云应用的主流方法。同时也存在一些门槛，其中一些难点需要你在以下方面做出决策： 组织项目结构。 处理微服务之间共享的代码。 将项目容器化。 在本地运行和调试，然后将其部署到云中。 让我们看看它如何帮你创建和部署微服务原型而无需编…"}, {"id": "6844904144239591431", "title": "EggCluster 是如何解决多进程模式下相关问题的", "desc": "Node 官方提供了 cluster 模块来提供多进程的解决方案，以尽可能提升服务器资源使用效率。 为什么先讲通信？启动流程要用嘛。 可以看到，主要的实体包括了 Master、Agent、Worker三个， Master、Agent、Worker，其实三者更多完成的是通信的执行…"}, {"id": "6844903816731557901", "title": "koa+mysql+vue+socket.io全栈开发之web api篇", "desc": "前端则使用的是 vue + vuex。 本篇则讲叙服务端的搭建，之所以使用 koa，而不使用其他封装过的框架，比如 Egg.js， Thinkjs。因为在我看来，koa2 已经够方便，插件也足够多，完全可以根据自己的需求，像搭积木一样构建出最适合业务需求的框架。这样不但摒弃了很…"}, {"id": "6844903665761779726", "title": "nodejs中的子进程，深入解析child_process模块和cluster模块", "desc": "node遵循的是单线程单进程的模式，node的单线程是指js的引擎只有一个实例，且在nodejs的主线程中执行，同时node以事件驱动的方式处理IO等异步操作。node的单线程模式，只维持一个主线程，大大减少了线程间切换的开销。 但是node的单线程使得在主线程不能进行CPU密…"}, {"id": "6844903636913356808", "title": "【多图】记录下使用 koa2 搭建微信中控服务器", "desc": "微信公众号开发的时候，需要先获取 access token，可以这个 token 是有次数限制的，同时这个 token 一次只会有一个有效，也就是如果重新请求，那么上一个获取到的 token 就会失效。 常规情况下这个不是问题，可是当有多个独立服务需要用到微信 API ，这个就…"}, {"id": "6844904056222138381", "title": "node.js 内存泄漏的秘密", "desc": "一直以来，跟踪 Node.js 的内存泄漏是一个反复出现的话题，人们始终希望对其复杂性和原因了解更多。 并非所有的内存泄漏都显而易见。但是，一旦我们确定了其模式，就必须在内存使用率，内存中保存的对象和响应时间之间寻找关联。在检查对象时，应该根据自己所用的框架或技术（例如服务器端…"}, {"id": "6844903695218376718", "title": "server-side-events(SSE)开发指南（Node）", "desc": "SSE是介于websocket、长短轮训之外的一种服务端推送的方式，用数据流的形式发送文本数据，可想象成网络视频的文字版。他的好处有 基于HTTP协议（WebSocket 是一个独立协议），无需对其做额外处理。还能享受HTTP2带来的优势 详细对比，这里我选择尝试将一个原本基于…"}, {"id": "6844904133883854856", "title": "基于headless-chrome的通用服务端渲染方案", "desc": "基于Headless chrome的高性能，通用服务器渲染，可在服务器中渲染任何SPA（浏览器中的渲染数据）以进行SEO或其他优化。 new a ChromeRender then use it to render a web page, a ChromeRender mean…"}, {"id": "6844903585088536589", "title": "Node图像处理——使用Jimp及node-qrcode生成图片上传", "desc": "一次Node基于node-qrcode生成二维码及Jimp合成图片并使用FormData方式上传的总结"}, {"id": "6844903888110223367", "title": "小哥哥, React-SSR 要不要了解下-基础篇", "desc": "咱也不知道这会儿写这个出来算不算过时, 反正就想写写. 至于有没有人看, 看完点不点赞, 点完赞会不会实践. 咱也不敢问呀, 随手写写吧~ 到了 9102 年, 作为前端扛把子的 React 依然炙手可热. 周边的各种生态更是红的发烫. 每天应付完各种业务需求真的想舒舒坦坦躺上…"}, {"id": "6844903613219749901", "title": "记一次偷懒实践", "desc": "其中 module 文件夹下存放各模块抽离的 API，axios.ts 文件创建 axios 的一个实例，并添加一些公共配置（如：baseURL, timeout，拦截器等），index.ts 即是向外暴露各种 API 方法。 我们的目的很简单，读取一个 json 文件，把 j…"}, {"id": "6844903568374235150", "title": "Node之手写静态资源服务器", "desc": "学习服务端知识，入门就是要把文件挂载到服务器上，我们才能去访问相应的文件。本地开发的时候，我们也会经常把文件放在服务器上去访问，以便达到在同一个局域网内，通过同一个服务器地址访问相同的文件，比如我们会用xampp，会用sulime的插件sublime-server等等。本篇文章…"}, {"id": "6918596306902450189", "title": "Node.js 开发入门指南", "desc": "1.简介是一个可以让JavaScript运行在服务器端的平台。它可以让JavaScript脱离浏览器的束缚运行在一般的服务器环境下,它摒弃了传统平台依靠多线程来实现高并发的设计思路，而采用了单线程、异"}, {"id": "6844903712343719950", "title": "用typescript开发koa2的二三事", "desc": "最近在写一个博客的项目，前端用的 vue+typescript+element-ui,后台则选择了 koa2+typescript+mongoDB的组合。写这篇博客的目的也是在写后台的过程遇到一些问题，查了很多资料才解决。于是权当总结，亦是记录，可以给别人做一个完整的参考。 这…"}, {"id": "6844903621092458504", "title": "Node.js项目拆包工程化", "desc": "背景在我们开发的过程中，经常会遇到这样的问题，开发完了一些代码或者一个接口，别的小伙伴过来问你，代码可不可以给他复用，接口可以给他调用。这说明代码的复用和抽象对团队协作是很重要的。举个例子，如下图在这"}, {"id": "6906809624725291016", "title": "二叉树", "desc": "常见的树型结构有：文件夹目录，dom结构，路由的配置... 二叉树是每个结点最多有两个子树的树形结构，每个结点的度最多是2。左边的称为 左子树 , 右边的称为 右子树 , 左子树 , 右子树 是有顺序的。"}, {"id": "6844903600011870216", "title": "新手爬虫，教你爬掘金（二）", "desc": "本文用到的三个工具为cheerio：jQuery语法，帮助你在非浏览器环境下解析网页用的上次没用到，这个肯定用到啦segment一个基于盘古词库的中文分词工具，cnode大神写的，手动@leizong"}, {"id": "6844903886545764360", "title": "Mac 下安装运行Rocket.chat", "desc": "最近花了一周的时间，复习了HTML、CSS、原生JS，并学习了Node.js、CoffeeScript.js、MongoDB，入了下门。 因为准备在Rocket.chat 上做二次开发，所以先下载和安装了Rochet.chat 的环境。由于Rocket.chat在Mac环境下下…"}, {"id": "6844904071480999943", "title": "记一次导出 CSV 产生的研究", "desc": "工作中做一个将数据库数据导出为 CSV 格式的功能，开发环境下一切非常正常，然后满意地上到测试环境进行测试，结果测试同学反馈导出大量数据时 Chrome 直接报错网络错误，我就很纳闷，自己开发的时候也用了大数据量来测试，为什么没有出问题，一句 It works on my co…"}, {"id": "6844904047611215885", "title": "《深入浅出Node.js》学习笔记（八）", "desc": "1. 基础功能 客户端代理(浏览器)会将完整的URL地址解析成报文，将路径和查询部分放在报文第一行。 最常见的根据路径进行业务处理的应用是静态文件服务器，会根据路径去查找磁盘中的文件，然后将其响应给客户端。 还有一种常见的分发场景是根据路径来选择控制器，预设路径为控制器和行为组…"}, {"id": "6869321526982901774", "title": "一遍学会vue+node.js+mongoDB全栈流程(1·新手向使用node连接数据库) ", "desc": "作为一门服务端语言，node.js使用js的语法，但不代表就可以直接上手使用。当我们打开node.js的官方文档，会发现它着重介绍的是node的特性和api 作为一个称职的新手，我猜你会在十分钟之内关闭这个网页。因为学习是一个渐进的过程，我们通过框架从一个简单的demo入手，慢…"}, {"id": "6844904061834100749", "title": "使用Puppeteer爬取微信文章", "desc": "一朋友在群里问有没有什么办法能够一次性把这个链接里的文章保存下来。点开可以看到，其实就是一个文章合集。所以需求就是，把这个文档中的链接里的文章挨个保存下来。保存形式可以有很多种，可以是图片，也可以是网页。这里因为使用puppeteer库的原因，故选择保存格式格式为PDF。 完成…"}, {"id": "6943450456689639438", "title": "Node EventLoop 背后的设计", "desc": "现在有四个线程。就是各分两个，在CUP对于所分配到进行的执行上来看，还是进行Preemptive multitasking，表现为同时开始和结束 Node.js uses a pre-allocated set of threads called the Thread Poll…"}, {"id": "6844903560778350605", "title": "JS中的async/await -- 异步隧道尽头的亮光", "desc": "JS中的异步操作从最初的回调函数演进到Promise，再到Generator，都是逐步的改进，而async函数的出现仿佛看到了异步方案的终点，用同步的方式写异步。 简单解释async函数就是Generator函数的语法糖。"}, {"id": "6844903609281445896", "title": "如何将 Vue 组件转成 React 组件？", "desc": "🛠️ 👉 Try to transform Vue component(jsx syntax) to React component"}, {"id": "6917119720269447176", "title": "nvm切换node版本无效的问题", "desc": "引用博文：https://www.jb51.net/article/127739.htm"}, {"id": "6844903549602168840", "title": "PC端网页使用微信扫码获取用户精确地理位置的一种解决方案", "desc": "移动互联网时代，获取用户地理位置来实现LBS当然不再话下。 在传统的PC浏览器应用领域，想获取用户的位置信息一般采用第三方的IP库，比如：淘宝IP地址库。但这种解决方案的缺陷是显而易见的： 2、不准确。尤其是使用VPN网络的时候，差别几千公里。 现在，我们结合移动互联网，为PC…"}, {"id": "6844903870250876936", "title": "Node.js 究竟是什么？", "desc": "Node.js 是一个 JavaScript 运行时环境。听起来还不错，不过这究竟意味着什么？它又是如何运作的？ Node 运行时环境包含执行 JavaScript 程序所需要的一切。 如果你了解 Java 的话，会发现它们有点像。 JavaScript 原来是只能在浏览器中运…"}, {"id": "6844903551227920398", "title": "一起学nodejs(写一个基于TCP/IP终端聊天系统)", "desc": "源码地址TCP/IP协议回顾TCP面向连接的传输协议有序的可靠的面向字节的流控制拥堵控制适用场景:文件传输HTTPUDP无连接不可靠不保证有序不会重发无流量控制无拥堵控制适用场景:包总量较小的通信视频"}, {"id": "6844903647847907335", "title": "使用Puppeteer轻松爬取网易云音乐、QQ音乐的精品歌单", "desc": "最近在学习Puppeteer进行自动化操作，另一方面为了防止上班时间被打扰，是时候爬点歌单在上班的时候，用来抵抗外界的干扰了。 保证本地安装了 MongoDB 数据库，并能正常连接，具体请自行百度。 由于 Puppeteer 会下载一个 Chrome 浏览器到本地，所以可能较慢…"}, {"id": "6844903688608153607", "title": "Linux下离线部署Node环境和前端服务", "desc": "前端项目开发完成，需要部署在第三方服务器。由于第三方服务器是脱离公网的环境，所有的前端服务和所有的依赖都需要在离线环境中部署。记录下解决方案，希望可以帮助到有类似需求的旁友。会涉及到基础的Linux知识，对Linux不熟悉的童鞋可以先看看资料入门。 把Node环境下载下来作为离…"}, {"id": "6890565992217640974", "title": "NodejsHTTP协议-请求与响应处理 (适合初学者)", "desc": "创建web服务器1HTTP协议的概念超文本传输协议（英文：HyperTextTransferProtocol，缩写：HTTP）规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，"}, {"id": "6844903811677437959", "title": "Forever +nginx部署Node站点", "desc": "最近入手了一款最便宜的腾讯云服务器，主要用来部署自己的个人博客以及学习一些linux知识，从而全方面了解掌握web技术。强烈建议前端人员拥有一个属于自己的服务器。在写此文章之前，我的云服务器已经安装好Mysql以及node, nginx等。下面以部署node网站为例，讲解几个常…"}, {"id": "6903543965597827085", "title": "Node.js & Kubernetes Graceful Shutdown", "desc": "k8s-graceful-shutdown：该库提供了使用 Kubernetes 实现 Graceful Shutdown(优雅退出) Node.js App 的资源。 在 kubernetes 中运行微服务时。我们需要处理 kubernetes 发出的终止信号。这样做的正确方…"}, {"id": "6844903689103261704", "title": "网站重构-后台服务篇", "desc": "在家里码代码，好在目前来看完成度还是达到我的预期的，虽说没有变的多高大上，但是好歹项目比以前工程化了一些，这个重构过程虽然漫长，但是确实还是有着自己的一些体会的。接下来会分三篇文章来介绍重构经历——后台服务篇、Nuxt应用篇和Docker集成篇 总共差不多200个commits…"}, {"id": "6844903891289522184", "title": "为什么重复的GET请求变慢了？", "desc": "最近在研究慢请求监控的问题，写了一个简单的测试代码：在网页端(index.html)通过fetch函数向服务端获取数据，然后打印请求耗时。 在服务端通过setTimeout延时1500ms才返回数据(服务端使用ExpressJS)。 不出所料，span数据都略微大于 1500。…"}, {"id": "6844904072848343054", "title": "记一次 SQL 优化过程，从 7.2s  到 10ms", "desc": "最近在实现一个列表查询的功能时遇到了【性能】问题，由于对后端性能方面没有太深入的了解和实践，所以在发现问题后卡了较长时间，通过查阅文档，借助分析工具，最终找到并解决问题。 这篇文章记录我解决问题的过程和学习到的新知识，如果有理解错误的地方，请帮我指出。 我要实现的功能是提供一个…"}, {"id": "6847902199532830733", "title": "Node常用模块简介", "desc": "（file system）文件系统，该模块提供了用于与文件系统进行交互的API，并且所有的文件操作都具有同步和异步的形式。 该方法第一个参数用于指定文件名；第二个参数指定字符编码，若没有指定则返回原始buffer；callback用户返回读取错误或内容，若正确读取则err值为n…"}, {"id": "6844903513684705294", "title": "《Node.js设计模式》基于ES2015+的回调控制流", "desc": "本系列文章为《Node.js Design Patterns Second Edition》的原文翻译和读书笔记，在GitHub连载更新，同步翻译版链接。 在上一章中，我们学习了如何使用回调处理异步代码，以及如何解决如回调地狱代码等异步问题。回调是JavaScript和Node…"}, {"id": "6908529581905412109", "title": "和你讲一件NodeJS中的Events(事件触发器)", "desc": "在 Node.js 中，Event是非常核心的模块，大部分的核心模块基本上都有用到或者继承了该模块。 Event模块和我们之前在Javascript中学习的EventTarget接口很类似。对于该模块我们能做的不仅仅是简单的使用还可以在该模块的基础上做出扩展，你想想JS中的**…"}, {"id": "6844903555762126856", "title": "你不知道的Event Loop", "desc": "关于Event Loop网上有很多文章都有讲解，包括我自己也有几篇文章有讲述event loop相关内容。之前写了一篇文章总结了Nodejs中event loop的原理，这里的event loop指的是服务端nodejs的event loop。此外，另一篇文章中有讲到前端浏览器…"}, {"id": "6844903511864377351", "title": "TypeScript CheetSheat", "desc": "TypeScript 风靡全球后不懂 TypeScript 的前端绝对不是一个好前端。TypeScript 的设计来源于大多数的静态语言，如果曾经有静态语言的开发经验，TypeScript 一整个下午就能上手。 这里记录一下 TypeScript 常用的一些语法层面的东西，方便"}, {"id": "6959897515650973726", "title": "Node.js中HTTP的小实战", "desc": "工具安装 安装工具 ts-node-dev 这个工具可以用TypeScript开发Node.js程序，且会自动重启，但是不宜在生产环境使用，但非常适合用来学习 curl命令 构建项目 yarn ini"}]