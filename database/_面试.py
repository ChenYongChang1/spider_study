[{"id": "6850418117894471688", "title": "前端——你所要了解的浏览器知识😇", "desc": "1. 强缓存 浏览器直接从本地缓存中获取数据，不与服务器进行交互；它有两种依据：Expires 和 Cache-Control可以用来判断是否命中缓存（可以直接从缓存中读取资源）。 Expires即过期时间，存在于服务端返回的响应头中，即浏览器在这个过期时间之前可以直接从缓存里…"}, {"id": "6951951053214449701", "title": "[ 实现防抖和节流函数 ] | 刷题打卡", "desc": "题目描述手写一个防抖和节流函数思路分析防抖在规定的时间内，当连续触发一个事件时，只执行最后一次可以用定时器setTimeout来确定执行的时机，比如说我们设定时间间隔为100ms，也就是说，在触发该事"}, {"id": "6844903870678695949", "title": "Day2 - 前端高频面试题之基础版", "desc": "深拷贝则是开辟新的栈，不仅将原对象的各个属性逐一复制出去，而且会将属性所包含的对象也依次采用浅拷贝的方式递归复制到新对象中，拷贝了所有层级。 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法…"}, {"id": "6844903651526311949", "title": "JS的Event Loop 和 microTask", "desc": "上面问题的答案，都在文章《Tasks, microtasks, queues and schedules》讲的非常透彻。 建议英文可以的同学直接看这篇文章，就不要看我这个“笔记”了。( 之所以叫笔记，因为大部分内容出自文章，但是又不是按字翻译 ) 问题来了，为什么promise…"}, {"id": "6844903960524881934", "title": "前端面试-实现一个简版koa", "desc": "以上代码存放在仓库，自取。 在koa官网有说明在ctx挂载了一系列request和response的属性别名。 以下代码存放在仓库，自取。 从上面代码打印结果可以看出，next的作用就是做一个占位符。可以看成以下形式 这即是洋葱模型。 koa致力于成为一个更小、更富有表现力、更…"}, {"id": "6974577180743630885", "title": "1.2 简化记忆版 JS-Typeof", "desc": "本文是1.2 JS-Typeof的简化记忆版，为面试问答题的形式。主要介绍了判断数据类型的几种方法。"}, {"id": "6844903967059607565", "title": "动画：用动画技巧记忆常见笔试 JS 类型转换", "desc": "这部分的面试知识点是和前几天发的那篇基础知识点是一起的，小鹿按照分类把它分成两篇进行分享。 暑假去面试，进门先做笔试题，笔试题的基础部分大多都是这样 JS 基础问题，做的时候总是含含糊糊，感觉对也感觉不对。其实回来总接到，还是这些基础点没有掌握牢靠，看了过一段时间就忘，有没有一…"}, {"id": "6844903822347730951", "title": "一个map函数引发的血案", "desc": "本文写作目的在于，对上次面试中未手写出来的map函数做一个收尾工作。其内容以map函数作为线，将其涉及到的众多知识点穿针引线梳理一下，并赋予本人学习及写作时的所感所想。既是所感所想，想必难免存在一些个人拙见，望各位大佬不吝指正，还望轻喷！！！ 大学简单学过C语言后，第一次看到这…"}, {"id": "6844903827326369799", "title": "前端面试之理解原型/构造函数/实例(JavaScript篇)", "desc": "构造函数：用来初始化新创建的对象的函数是构造函数。 每一个构造函数都有一个原型对象即prototype(指针)指向的对象。 而原型对象也有一个属性constructor(构造器)指向构造函数。 通过构造函数的new操作创建的对象是实例对象。可以用一个构造函数，构造多个实例对象。…"}, {"id": "6844904186497204232", "title": "职场中，怎么算把事情做好？", "desc": "这个话题比较大，也算是对自己职场的阶段性总结，准备分几篇来写，在这里分享给大家。 职场中的很多问题没有对与错，不同的公司也有不同的文化导致了不同的行事风格。扛精一律不回。 在职场中，把事情做好永远是最最重要的，这也是取得老板信任的前提。 1. 做正确的事，帮助老板实现他的目标 …"}, {"id": "6844903513193971720", "title": "面试旁听小记", "desc": "最近旁听了两场面试，有一些体会，简单地记录一下。 面试旁听其实是一件挺有趣的事，因为可以站在面试官和面试者之外的角度进行观察，进行自己的分析和判断。 对于像我这样既缺乏面试经验，又缺乏面试官经验的刚毕业没多久的“雏鹰”（哈哈，公司这么叫的）来说，这样面试旁听、观察学习，是一件非…"}, {"id": "6844904096885899271", "title": "2020年大前端面试题库+答案（第3章） javaScript判断对象类型", "desc": "从上面可以看出，typeof 判断对象和数组都返回object,因此它无法区分对象和数组。 因为数组属于Object的一种， 所以[] instanceof object,也是成立的。 instanceof 不能区分基本类型string 和 boolean,除非是字符串对象和布…"}, {"id": "6844904184047730696", "title": "深入浅出javascript （1）—— 变量提升", "desc": "提到前端面试，对于 javascript 语言层面的考察，这几个概念是避不开的：执行上下文，变量提升，闭包，This，作用域，作用域链，原型链，Event Loop等。 与其说面试很机械，倒不如说这就是 javascript 语音最最核心的概念，弄不清楚这些概念，那你一定不是一…"}, {"id": "6917031956358266894", "title": "常见面试题", "desc": "Transform属性应用于元素的2D或3D转换。这个属性允许你将元素旋转，缩放，移动，倾斜等。 不管怎么调border或者margin、padding ，都是盒子的大小，这样写样式的时候比较方便，不用每次都来回删值。所以我在项目中大部分都应用box-sizing:border…"}, {"id": "6844904142410891278", "title": "面试题整理- 手撕代码篇", "desc": "手撕代码篇考察new和闭包(某节)写一个正则匹配字符转成驼峰？(某团)实现:border-bottom-color》borderBottomColor扩展：驼峰转连字符实现一个ajax方法(某站)"}, {"id": "6847902219048763399", "title": "《前端面试总结点线面》之点-CS篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 并发 - 同时进行多…"}, {"id": "6915282565641437198", "title": "【Daily Interview】- 19 全排列", "desc": "对于上面的示例，其实核心思路非常简单暴力：直接写一个三层嵌套的循环去遍历即可。 但实际上，我们并不知道输入的 nums 有多长，也就是说，我们无法确定应该嵌套几个循环来遍历 nums。 那么这个问题就变成了对树的遍历，同时需要注意的是，当进入下一层的时候，要记住上一层的状态，方…"}, {"id": "6844903933295476750", "title": "前端跨域方案", "desc": "因为浏览器的同源策略（同协议，同域名，同端口），类似只能在自己的国家了到处旅行，如果去国外就得需要护照。 就是通过script的自己可以跨域的功能，自己定义一个函数，然后让后端把函数的带着参数的执行返回，再在前端执行。 既然是同源策略，如果两个html的域名一样就可以了，通过d…"}, {"id": "6844903591459848205", "title": "大二新人的一次搜狐前端实习电面", "desc": "暑假想找一份实习，碰巧看到了学长的搜狐内推，就把自己的没有诚意的简历投了过去，过了一个多星期收到了电话面试的邮件(十分怀疑是学长面子比较大)。 Promise 本质是一个状态机。每个 promise 只能是 3 种状态中的一种：pending、fulfilled 或 rejec…"}, {"id": "6846687584463093768", "title": "备战面试手撕代码（一）深浅拷贝", "desc": "JS 中的数据类型分为两种，基本数据类型和引用数据类型，基本数据类型是保存在栈的数据结构中的,是按值访问，所以不存在深浅拷贝问题。 深拷贝就完整复制数据的值（而非引用），目的在于避免拷贝后数据对原数据产生影响。 4. 对象浅拷贝 -assign 5.对象浅拷贝 - ... 1.…"}, {"id": "6969584775354908703", "title": "前端百题斩【013】——用“闭包”问题征服面试官", "desc": "内部函数总是可以访问其外部函数声明的变量，当通过调用一个外部函数返回一个内部函数后，但是内部函数引用外部函数的变量依然保存在内存中，就把这些变量的集合称为闭包。"}, {"id": "6933078446126202893", "title": "计算机网络相关知识点", "desc": "1.在浏览器搜索框输入url，UI线程首先进行URL解析。 如果不是一个URL就交给搜索引擎进行搜索。如果是一个URL，就生成相应的请求信息，UI线程把他交给网络进程。 2.首先是把域名转化成Ip地址。 经典TCP/IP五层结构：应用层 传输层 网络层 链路层 物理层。 OSI…"}, {"id": "6979483518283808782", "title": "字节一面 && 西门子一面 ", "desc": "字节 全程给一个编辑器，写完之后面试官会问思路，难度中规中矩 写一个bachrequest 并发请求，最多同时请求max个，当第一个请求resolve，加入第二个请求，以此类推 思路： 递归 reac"}, {"id": "6984713102264631333", "title": "Ajax 简介、封装、同步异步 & 相关面试题", "desc": "什么是 Ajax ？ Ajax = 异步 JavaScript 和 XML； Ajax 是一种用于创建快速动态网页的技术；"}, {"id": "6908340072446328839", "title": "jsliang 求职系列 - 48 - 面试经验汇总", "desc": "关于面试经验这块，jsliang 的整理和分享内容。 基础⾯试：主要考察对岗位和简历中涉及到基础知识部分的提问，包括⼀部分算法和场景设计的⾯试题，这⼀⾯可能会涉及现场 coding. 项⽬⾯试：主要考察简历中涉及的项⽬，会涉及你项⽬的相关业务知识、扮演⻆⾊、技术取舍、技术攻坚等…"}, {"id": "6950551615942180872", "title": "你真的会使用节流(throttle)和防抖(debounce)吗？", "desc": "背景之前我做了一个关于throttle和debounce这两个函数理解程度的小调查，调查结果令我感到意外：有的人在项目开发中没使用过 throttle 或者 debounce，有的用过 throttl"}, {"id": "6983676704631816205", "title": "听说你最近在准备面试？准备HMR了么～", "desc": "之前面试的时候，很多次面试官都有提到过HMR的原理，正好最近的react项目当中需要调试这一块，就做一个总结。"}, {"id": "6905571326443028494", "title": "jsliang 求职系列 - 41 - 盒子模型", "desc": "CSS 盒子模型分为标准盒子和怪异盒子。 下面我们一一讲解。 #div.style.width：这种方法只有在样式写在行内的时候，才能获取到宽度，并且是带单位的：100px。如果不是行内样式，那么获取到的是空的。 #div.offsetWidth：这种方法看盒子模式，如果是 I…"}, {"id": "6991631708051210271", "title": "前端面试知识点小记 —— day1 (javaScript的执行上下文和执行栈)", "desc": "什么是执行上下文 执行上下文是评估和执行 JavaScript 代码的环境的抽象概念。每当JavaScript代码在运行的时候，它都是在执行上下文中运行。 执行上下文类型 全局执行上下文： 这是默认的"}, {"id": "6844903502951481352", "title": "道阻且长啊TAT(前端面试总结) 附答案 － 上", "desc": "渲染引擎－ 渲染界面:Firefox、Chrome和Safari是基于两种渲染引擎构建的，Firefox使用Geoko——Mozilla自主研发的渲染引擎，Safari和Chrome都使用webkit. ...... 类似百度搜索的提示框，兼容各大浏览器，可用键盘控制. 勉强憋…"}, {"id": "6844904179568230414", "title": "DD每周前端七题详解-第二期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6921496910080114702", "title": "你能手撕10种经典排序算法吗？", "desc": "1. 冒泡排序 比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对…"}, {"id": "6899955431402110984", "title": "jsliang 求职系列 - 27 - TCP", "desc": "用户数据包协议（User Datagram Protocol），简称 UDP，是基于 IP 之上开发能和应用打交道的协议。 UDP 中一个最重要的信息是端口号，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。 通过端口号 UDP 就能把指定的数据包发送给指定的…"}, {"id": "6844904105836544008", "title": "你要的面试题在这呢", "desc": "基础篇的第6题，如何验证数字证书的合法性。 今年，注定不平凡，经历的太多，感触太多。永远记住这句话：努力，并坚持，就会得到你想要的。 1、我们都知道字符串是基本数据类型,基本类型是没有方法的，但为什么字符串还有很多方法？这个例子我用的是字符串的属性，原理都是一样的。 JavaS…"}, {"id": "6985923733907046414", "title": "Vue 前端面试题", "desc": "前言 Vue 作为国内最受欢迎的前端框架，几乎每次面试都会涉及到相关的知识点，这里根据以往面试的记录整理了一下，方便自己查缺补漏。如果文章中有出现错误之处，欢迎斧正，谢谢。。。 1. 说一下 Vue "}, {"id": "6950785975693869069", "title": "我们需要知道的 JS 异步编程", "desc": "思维导图一、定时器1. 设定定时器setTimeout([function], [interval])setInterval([function], [interval])2. 清除定时器如何清除定时"}, {"id": "6933197531606155272", "title": "前端面试官： React我就问这些问题！能不能刷到我就看你的造化了", "desc": "1. React 中 keys 的作用是什么？ Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。 有了key属性后，就可以与组件建立了一种对应关系，react根据key来决定是销毁重新创建组件还是更新组件。 key相同，若组件属性有所变化，则…"}, {"id": "6844903731809501197", "title": "JavaScript骚操作之遍历、枚举与迭代（下篇）", "desc": "JavaScript 遍历、枚举与迭代的骚操作（上篇）总结了一些\b常用对象的遍历方法，大部分情况下是可以满足工作需求的。但下篇介绍的内容，在工作中95%的情况下是用不到的，仅限装逼。俗话说：装得逼多必翻车！若本文有翻车现场，请轻喷。 \u001d上一篇提到，for of循环是依靠对象的迭…"}, {"id": "6844903593837871111", "title": "ES6之---读懂let才能少踩坑", "desc": "在刚接触ES6的时候，我就「以为」我理解了let。然后漫长的自学道路上，let一次又一次的让我认识到了自己的无知。 希望写了这篇文章之后能用我的无知，让在这条道路上的人能少踩些坑。 和很多人一样，在听说了ES6很好用之后，就马不停蹄的去学习这门充满着语法糖的东西。开始抱着emm…"}, {"id": "6844903791188246541", "title": "如何实现一个 LazyMan？", "desc": "网上看到一道 JavaScript 笔试题，感觉还挺有意思的，在此记录一番。 下面是 ES6 的实现方式，如果用 ES5 来写要在维护 this 方面多写一些代码。 吐槽一下，最近想换工作，一直在准备面试，复习的时候感觉前端能考到的知识点真是多啊。"}, {"id": "6948227795059212318", "title": "前端面经 - 看这篇就够了（帮你拿到大厂offer）", "desc": "梳理前端常见面试题及答案，并持续维护，助你拿到大厂offer～ 题目包括css，Javascript中高阶，Vue技术栈，webpack，设计模式，Typescript，Http，Nginx等。"}, {"id": "7005017268492959781", "title": "漫画｜面试焦虑？滚开！", "desc": "现在有很多的文章课程啊什么的，都是在间接制造我们那么一个焦虑，但是一定要对自己有一个清楚的认知，自己有什么不会，有什么会，自己并不是一无是处的。当然，不要过分的抬高自己，也不要过分的贬低自己。 我在面"}, {"id": "6982105528612683812", "title": "今天聊：为什么你跳槽薪资翻不了 3 倍", "desc": "很多时候我们说到谈薪，总是把它狭义的锁定到跟 HR 一对一电话时所讲的沟通技巧和话术，实际上你的薪资可能性，往往在面试定级的时候，就锁定了他的上限了，如果要解锁这个限制，就必须有更强大的工具来玻璃，这"}, {"id": "6844904100035821575", "title": "（建议精读）HTTP灵魂之问，巩固你的 HTTP 知识体系", "desc": "上回就已经承诺过大家，一定会出 HTTP 的系列文章，今天终于整理完成了。作为一个 web 开发，HTTP 几乎是天天要打交道的东西，但我发现大部分人对 HTTP 只是浅尝辄止，对更多的细节及原理就了解不深了，在面试的时候感觉非常吃力。这篇文章就是为了帮助大家树立完整的 HTT…"}, {"id": "6844903928442667015", "title": "面试分享：两年工作经验成功面试阿里P6总结", "desc": "本文主要给大家带来一些我面试的经历和经验，希望对正在求职的同学有所帮助。我先大致说下面试之前的个人情况：2017年7月正式入职海康威视数字技术股份有限公司，使用Vue.js技术栈。 我写的篇幅可能有点长，如果只想看成功的面试请直接从阿里企业智能事业部（一面）开始，大家见谅哈。 …"}, {"id": "6995744994166308895", "title": "复盘最近一个月的中大厂面试经历(附加答案)", "desc": "前言   笔者两年前端经验，前后大概面了一个月，期间面了很多公司，比如有赞、涂鸦智能、滴滴、字节、酷家乐 大搜车、海康威视、税友等等，梳理一下基于我个人面试过程中被问的到的一些问题(包括但不限于)。 "}, {"id": "6987529814324281380", "title": "今天聊：大厂如何用一道编程题考察候选人水平", "desc": "- 面试官和候选人的知识结构可能有差异 => 可能会错过优秀的人 - 遇到「面霸」，频繁面试刷题，但是实际能力一般 => 招到不合适的人 - 要在短短半个小时到一个小时内判断一个人，其实很难"}, {"id": "7002786243826155533", "title": "面试必备vue2和vue3响应式源码，简单实现", "desc": "vue2，defineProperty响应式源码简单实现 ；vue3 ，proxy响应式源码简单实现，以及简单的总结"}, {"id": "7002886646840426527", "title": "收集了一下自己喜欢的前端面试题", "desc": "第一次尝试掘金文章，收集了一点自己喜欢的面试题保存下来。HTML CSS JS VUE （持续更新）"}, {"id": "6967706992106438687", "title": "一个合格的中级前端工程师需要掌握的技能笔记（上）", "desc": "每天学习编程，让你离梦想更新一步，感谢不负每一份热爱编程的程序员，不论知识点多么奇葩，和我一起，让那一颗四处流荡的心定下来，一直走下去，加油"}, {"id": "7001818236446572574", "title": "『面试的底气』—— 设计模式之适配器模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7007340695971168269", "title": "前端实习面试准备--性能优化", "desc": "1. CDN 1.1 CDN的概念 CDN（Content Delivery Network，内容分发网络）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、"}, {"id": "6844904121380667399", "title": "一位前端小姐姐的五万字面试宝典", "desc": "另外小姐姐最近在看机会 base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。 插入排序的改进版。对间隔 gap 为一组的数进行插入排序 1、原型链继承，将父类的实例作为子类的原型，他的特点是实例是子类的实例也是父类的实例，父类新增的原型方法/属性，子类都…"}, {"id": "6844903976693940231", "title": "web前端面试总结(自认为还算全面哈哈哈哈哈！！！！）", "desc": "cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。 而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。 cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。 存储…"}, {"id": "7000669234208440356", "title": "2021前端面试复习", "desc": "HTML5、CSS3 HTML5 HTML5新增特性 语义化标签：header、nav、footer、section... 媒体标签：audio音频、video视频 表单类型属性：email、numb"}, {"id": "6953083839673532453", "title": "996 前端人该如何持续学习", "desc": "周五的时候有个微信好友给我发了个这样的消息，问我 996 的现状下该怎么办？ 我说，具体怎么办得自己摸索，但是持续学习一定是关键词。 那问题来了，996 下，我们该如何持续学习？"}, {"id": "6844904115428917255", "title": "写给女朋友的中级前端面试秘籍（含详细答案，15k级别）", "desc": "能不能讲一讲Flex布局，以及常用的属性？。 WeakMap只能以复杂数据类型作为key，并且key值是弱引用，对于垃圾回收更加友好。 深拷贝：一般需要借助递归实现，如果对象的值还是个对象，要进一步的深入拷贝，完全替换掉每一个复杂类型的引用。 React需要尽可能的保证熟练。因…"}, {"id": "7001502812261580836", "title": "面试官问：我们聊聊原型和继承", "desc": "前言 原型和继承一直是js中非常基础和重要的部分，我们来看看日常开发中经常会用到的原型和继承。前言 原型和继承一直是js中非常基础和重要的部分，我们来看看日常开发中经常会用到的原型和继承。前言 原型和"}, {"id": "6844904084374290446", "title": "「面试题」20+Vue面试题整理", "desc": "本文已收录在Github github.com/Geekhyt，欢迎Star。 从镜片的厚度和黄黑相见的格子衬衫我察觉到，面前坐着的这位面试官应该是来者不善。我像以往一样，准备花3分钟的时间进行自我介绍。在此期间，为了避免尴尬，我盯着面试官的眉毛中间，不过面试官明显对我的经历不…"}, {"id": "7005215017981181960", "title": "从 HTTP 协议求解：为什么我们越来越不需要雪碧图了？", "desc": "由一次前端面试引发的关于「雪碧图」的问题，经过一番分析，结论是：在现代前端工程中，淘汰雪碧图才是最优选择，搞快点！"}, {"id": "6992014889141141517", "title": "JavaScript中的冒泡事件｜8月更文挑战", "desc": "比起好好告别，其实我更擅长逃跑。——夏吉尔硕 # 什么是JS冒泡事件 冒泡事件就是点击子节点，会向上触发父节点，祖先节点的点击事件 即在父div中存放子div的情况下"}, {"id": "6844904193619132423", "title": "DD每周前端七题详解-第四期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6900433558054109198", "title": "jsliang 求职系列 - 28 - WebSocket", "desc": "WebSocket 是 HTML5 新增的一种全双工通信协议，客户端和服务器基于 TCP 握手连接成功后，两者之间就可以建立持久性的连接，实现双向数据传输。 我们知道 HTTP 协议是一种单向的网络协议，在建立连接后，它允许客户端向服务器发送请求资源后，服务器才会返回相应的数据…"}, {"id": "6844903546161201159", "title": "前端面试之js相关问题（一）", "desc": "最近我也是经历过面试别人和去面试的人了，总结几个常被提及的面试问题，做一下解答和备忘。 call, apply, with指的This是谁就是谁。 上面的例子中，baz被bar调用所以指向的指bar. a 运行时所在的对象是 window,所以指向的是window。 函数调用都…"}, {"id": "6844903695935602696", "title": "Vue番外篇 -- vue.nextTick()浅析", "desc": "这时，我们就会用到一个方法是this.$nextTick（相信你也用过）。 nextTick是全局vue的一个函数，在vue系统中，用于处理dom更新的操作。vue里面有一个watcher，用于观察数据的变化，然后更新dom，vue里面并不是每次数据改变都会触发更新dom，而是…"}, {"id": "6992517887176998949", "title": "常见前端面试题", "desc": "一、vue常问面试题 1.说一下你对MVVM的理解 MVVM 是Model-View-ViewModel 的缩写，Model是模型层，View是视图层，ViewModel负责把Model的数据同步到V"}, {"id": "6844903974173147144", "title": "手把手带你简单回答真实前端面试题", "desc": "吹rem的时候可以往自适应方向吹，比如通过rem配合fixable实现了多端设备自适应。 slice不会修改数组，而是返回一个子数组。 for...in 循环只遍历可枚举属性（包括它的原型链上的可枚举属性）。像 Array和Object使用内置构造函数所创建的对象都会继承自Ob…"}, {"id": "6844904030989189134", "title": "webpack 原理分析与性能优化（2w字精华）", "desc": "Entry（入口）：Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。 Module（模块）：在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。 Chunk（代码块）：一个 Chun…"}, {"id": "6844904184135811086", "title": "五月面经", "desc": "上来就是手写代码（数组对象去重，大数相加），共享屏幕给面试官，写完后面试官问有没有更好的实现方法，然后聊了下编程习惯方面的东西，接下来就是提问和回答环节。面试官给人的感觉很nice， 自己不会的问题请教他都会耐心回答，感觉自己太菜了，最后也是一面都没过，伤心呀。 IE6 如何实…"}, {"id": "6900106261267021837", "title": "前端面试卷六", "desc": "Vue的响应式原理中Object.defineProperty有什么缺陷？为什么在Vue3.0采用了Proxy，抛弃了Object.defineProperty？Object.defineProper"}, {"id": "6844903692752142343", "title": "JavaScript 事件循环及异步原理（完全指北）", "desc": "在 Node 中，Node.js 借助 libuv 来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助libuv来实现多线程。 JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这样设计的方案主要源于其语言特性，因为 JavaScr…"}, {"id": "6956022901849980936", "title": "前端面试必刷手写题系列 [2] ", "desc": "核心概念防抖节流 我这篇已经很详细了 我不赘述，想更了解细节请仔细看这篇。 4. 函数防抖 (debounce) 是什么 简单来说就是把多次执行组合成一次执行。 比如我们设置了一个时间间隔 5 秒，当"}, {"id": "6844903583708610568", "title": "自己写的面试题，自己想的答案", "desc": "因为机缘巧合，让当了无数次面试者的我，当上了面试官，也和几个面试者交流过。既然要应对面试者，我就当然要准备面试题了，好让我大概知道面试者是什么水平。这个时候，也该详解下，自己的写的那些题目。因为题目是我自己写的，并不是网上摘的，所以知识点比较基础，也不全面。如果大家对面试题有什…"}, {"id": "6844903511860346894", "title": "秋招面试总结(2017-10-26)", "desc": "感觉秋招也结束了，在美图也一个月了。从拿到美图offer的时候就想说对秋招做个总结，苦于自己太懒了。可能也是因为准备秋招的那段时间对我来说有点煎熬，导致于到目前为止自己还在一个放松的状态，放松的有点过头了，没有集中注意力在技术方面。今天伟程师傅说项目做完要好好总结，才发现自己也…"}, {"id": "6844903565136232462", "title": "前端菜鸟帝都面试记 plus | 掘金技术征文", "desc": "感谢大家喜欢我的第一个文章，在第一篇文章中写了美团，春雨移动，和今日头条的经验。下面写剩余的几家，百度外卖，玩吧，第四范式和老虎证券，你好星球的经历。 在一月大大小小的面试了9家公司，大公司和小公司都有。 C 轮 + 公司： 百度外卖，美团外卖，今日头条商业广告部门。 大数据公…"}, {"id": "6854573212353691662", "title": "疫情期间的面试总结！干货~", "desc": "我好像已经两个月没有更新文章了，因为期间经历了很多面试。和工作地从杭州来了上海，真得已经让我筋疲力尽，才觉得应该总结一下这个期间，毕竟也成长了很多 我觉得很遗憾没有进入到我想要去的大厂，目前就职于腾讯系某公司，也还算不错。我恨呀，恨自己是去年毕业的😩，很多的工作要求是至少18…"}, {"id": "6970341614581448717", "title": "前端必刷手写题系列 [8]", "desc": "这是我参与更文挑战的第 6 天，活动详情查看 更文挑战 16. Array.flat 是什么 关键点有这几个 就是数组拍平 可指定深度 返回一个新数组 这个跟上个去重是类似的工具方法，了解即可。 语法"}, {"id": "6844903955407831054", "title": "前端每日一问,全面提升技术认知<第一周汇总>", "desc": "介绍一下我最近主导的开源项目————前端每日一问，针对前端的领域知识进行针对性的整理，包含HTML5、CSS3基础，JavaScript原理、设计模式、框架原理、工程化原理、浏览器原理以及经典算法进行系统整理，虽然是每日一问，时间碎片化，但内容完整而系统，源于面试，又高于面试。…"}, {"id": "6856579922148884488", "title": "纯CSS实现水平并垂直居中的15种方式", "desc": "利用CSS实现水平并垂直居中是一个非常常见的面试问题，通过这篇文章你可以掌握15种不同的CSS居中方式。"}, {"id": "6844904142742224904", "title": "说一说从 URL 输入到页面呈现到底发生了什么？", "desc": "这是面试过程中一道高频考题。 如果应聘者只回答了上述步骤，很多关键步骤（前端应该了解的知识点）没有提及，很有可能达不到面试官想要的回答效果。 笔者针对一些关键步骤，具体展开说明。让这道题成为我们面试考卷中的加分项。 然后根据 Cache-control 和 Expires 字段…"}, {"id": "6994611164269248520", "title": "前端面试题汇总(一)", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战，大家加油第10天了，努力加油，奥利给！"}, {"id": "6987735878764347405", "title": "大白话阐述什么是BFC（一道可能的面试题）", "desc": "什么是BFC？ 如何触发BFC？ 根元素(<html>) 浮动元素(元素的float不是none) 绝对定位元素(元素的position为absolute或fixed) display为下面几种： o"}, {"id": "6971713620019249188", "title": "判断JavaScript数据类型的四种方法", "desc": "1、对JavaScript数据类型的解析 在 ECMAScript 规范中，共定义了 7 种数据类型，分为 基本类型 和 引用类型 两大类，如下所示： 基本类型也称为简单类型，由于其占据空间固定，是简"}, {"id": "6867359137467432974", "title": "知识总结[网络篇]", "desc": "1. 浏览器输入地址后发生什么 2. 轮询、长轮询、长连接、websocket区别 长轮询：客户端向服务器发送请求，服务器保持连接，当有更新消息立即返回客户端，连接关闭。 长连接：客户端向服务器发送请求，服务器保持连接，当有更新消息立即返回客户端，连接保持。 3. websoc…"}, {"id": "6844903958385786893", "title": "前端面试题 回顾与复习（更新中）", "desc": "事件传播指的是发生事件时传播的过程。一共按顺序分为以下三个阶段。 第三阶段冒泡阶段：从目标节点传导回到windowd对象（从下到上）的过程,在这个阶段对事件做出响应。 简单点：女神有男朋友了，朋友圈晒个图，甜蜜宣言 “老娘成功脱单，希望你们欢喜”。各位潜藏备胎纷纷失恋，只能安慰…"}, {"id": "6844903568768499719", "title": "一年前端面试打怪升级之路（一）", "desc": "2017年本科毕业生，坐标杭州，前端程序媛一枚。 在17年4月以前是个UI软妹子，自我定位想要成为一个交互大神，热衷于研究产品用户体验。 17年3月以UI设计实习生的身份进入现在的公司之后，由于UI发展前景不明，经过一段时间的深思熟虑（一拍脑门）决定转岗前端，自学一段时间后跟经…"}, {"id": "6844904147045580813", "title": "React面试题整理[入门版]", "desc": "多组件使用相同状态。都放到同一个reducer里管理即可。 connect为组件提供数据和变更方法：本质是高阶组件，连接React组件与Redux store，返回一个新的已经与Redux Store连接的组件类，实现多个组件使用相同状态。通过mapStateToProps和m…"}, {"id": "6998903485068476452", "title": "webGL使用指南（6）", "desc": "webGL绘制流程图 获取webGL绘图上下文 初始化着色器 设置点的坐标信息 设置canvas背景色 清空canvas 绘制 着色器语言 着色器分为顶点着色器和片元着色器 顶点着色器：用来绘制顶点特"}, {"id": "6930902854664192014", "title": "【面试秘技】当面试官说等通知，是不是就凉了？", "desc": "大部分情况下，面试结束后，面试官都会跟你说：我们会在1-2个工作日内通知你面试结果。 许多人认为：所谓「等通知」其实是面试官委婉地给你「发拒信」。但是，这不是「等通知」的全部真相。 这篇文章，我就给大家分享一下，为什么HR会说「等通知」和「等通知」时我们可以做些什么。 首先，的…"}, {"id": "6990537893269733390", "title": "前端面试知识点梳理——Vue", "desc": "如何应对面试题 框架使用（基本使用，高级特性，周边插件） 框架原理（基本原理的了解，热门技术的深度，全面性） 框架的实际应用，即设计能力（组件结构，数据结构） Vue基础 Vue使用 基本使用，组件使"}, {"id": "6995705000827551780", "title": "前端面试之React高频面试题集锦(二)", "desc": "在前端面试中,React相关的面试题你都能应答如流吗?本篇将列出常见的十道React面试题, 你不妨来试试?"}, {"id": "6844903632966516749", "title": "2018年6月前端面试经历(中)", "desc": "二分查找法主要是解决「在一堆有序的数中找出指定的数」这类问题，不管这些数是一维数组还是多维数组，只要有序，就可以用二分查找来优化。 深拷贝就是在拷贝数据的时候，将数据的所有引用结构都拷贝一份。简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，…"}, {"id": "6844903605250572302", "title": "一个Promise面试题  ", "desc": "这个题目是之前面试的时候遇到的，当时没答对。虽然这种题目看起来对写代码并没什么实际意义，但说到底还是自己对JS执行机制不够深入了解。 就拿这题目拿出来分享给大家一些解题思路。 对JS执行机制不够了解的建议先看了这篇这一次，彻底弄懂 JavaScript 执行机制 - 掘金，再食…"}, {"id": "6997657409426554894", "title": "vue常用基本指令和修饰符(面试题)", "desc": "vue常用基本指令有哪些 v-if：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。 v-show：根据表达式之真假值，切换元素的 display CSS 属性。 "}, {"id": "6844904196701962254", "title": "进大厂连载 4/15：如何拿下政采云 P6 前端 Offer", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 大家好，很高兴来到早早聊与大家分享我的面试经历。 先做个自我介绍，我花名句号，现任政采云高级前端开发工程师。这是我的个人经历，我16年毕业于山大，毕业后就…"}, {"id": "6844903781704925191", "title": "前端面试查漏补缺--(七) XSS攻击与CSRF攻击", "desc": "本系列最开始是为了自己面试准备的.后来发现整理越来越多,差不多有十二万字符,最后决定还是分享出来给大家. Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻…"}, {"id": "6968815596393725983", "title": "关于async/await、promise和setTimeout的执行顺序", "desc": "前言 之前面试遇到这样一个题目。关于async/await、promise和setTimeout的执行顺序，当时没做对。 后来查了查是非常经典的题目。也给大家解疑答惑一下，说出自己的理解。 题目是看代"}, {"id": "6933481588542062605", "title": "前端面试之JavaScript基础（二）——  this", "desc": "this 在实际的开发中经常出现，但是许多人对于 this 的指向常常无法进行准确的判断，今天就带大家了解下 this 的指向问题。 this 是什么？this 是一种与函数相关的机制，它被自动的定义在函数的作用域中。我们在使用 this 时常常有两大误解： 上述例子中，foo…"}, {"id": "6974636948056965133", "title": "🔥BFC是什么？如何触发？有什么应用场景？", "desc": "BFC是什么 触发条件 一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可： 下列方式会创建块格式化上下文： 根元素() 浮动元素（元素的 float 不是 none） 绝对定位元素（元"}, {"id": "6844904128586448909", "title": "杭州前端面试通关新手入门指南（大佬请绕道） | 掘金技术征文。", "desc": "首先，我简述下自己面试的背景。我是湖北人，年前因为个人原因辞职，后来因为疫情原因被迫在家失业待业2个多月。 3月18号左右，湖北解封后左右来杭州。杭州这边绿码是可以全城通行的。但是我还是在家待了一个星期左右。这一个星期大概投了 20 多家公司，收到了10家左右面试邀请。 网上已…"}, {"id": "6876625311988088840", "title": "【面试准备】CSS篇", "desc": "而设为 border-box 时，属于 IE 盒模型，设置宽度和高度时，包含 content、padding 和 border。 样式系统从关键选择器开始，向左依次查找规则选择器的祖先元素，如果出现未匹配的情况会放弃规则，否则会左移直至匹配完成。因此在写样式时，应尽量选择 ID…"}, {"id": "6844904047258910728", "title": "你真的会将类数组转化为数组吗", "desc": "这在 DOM 中甚为常见，如各种元素检索 API 返回的都是类数组，如 document.getElementsByTagName，document.querySelectorAll 等等。除了 DOM API 中，常见的 function 中的 arguments 也是类数组…"}, {"id": "6844903630038892558", "title": "node基础面试事件环？微任务、宏任务？一篇带你飞", "desc": "我们这里来举个例子，我们node和java相比，在同样的请求下谁更占优一点。看图 当用户请求量增高时，node相对于java有更好的处理并发性能，它可以快速通过主线程绑定事件。java每次都要创建一个线程，虽然java现在有个线程池的概念，可以控制线程的复用和数量。 异步i/o…"}, {"id": "7002854921938665480", "title": "解析v-if和v-show的区别和使用场景", "desc": "官方文档 地址 v-if vs v-show v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。 v-if 也是惰性的：如果在初始渲染时条件为假，"}, {"id": "6987571986826264590", "title": "CSS常见面试题", "desc": "CSS 介绍一下标准的CSS的盒子模型 有两种盒子模型 ie盒子模型和w3c盒子模型 盒模型有包括内容（content） 填充（padding） 边界（margin） 边框（border） 他们两者的"}, {"id": "6964562298853654565", "title": "前端算法面试必刷题系列[54]", "desc": "103. 环形链表II (reverse-linked-list-ii) 标签 链表 中等 题目 leetcode 传送门 这里不贴题了，leetcode打开就行，题目大意： 给定一个链表，返回链表开"}, {"id": "6844903511868571656", "title": "两句话理解js中的this", "desc": "前言: 一直都搞不清javascript中this的指向,你不知道的javascript(上卷)这本书中有3章都是在讲解this,去年第一次看完还是觉得似懂非懂的,一深入的问还是不清楚,现在在看一遍,真心觉得这本书里讲的是真好,想深入了解一下的,这本书是一个不错的选择."}, {"id": "6844903793923096590", "title": "手撕排序算法（JavaScript 实现）", "desc": "俗话说金三银四 金九银十，马上又到了求职跳槽的黄金季。但是今年的这种大环境下，前端岗位的竞争势必比往日更加激烈。 在如今的面试过程中，算法是常常被考察的知识点，而排序作为算法中比较基础的部分，被面试官要求当场手写几种排序算法也不算是过分的要求。 所以最近将十种常见的排序算法整理…"}, {"id": "6844903800919031815", "title": "强行解释一波面试造火箭", "desc": "很多人总是抱怨面试官问一些平时不常用的知识点，比如算法呀，网络(TCP)等等，也就是大家常说的：面试造火箭，工作拧螺丝。 我觉得，事实上，这是一种合理的行为，并不是因为存在即合理，而是本来就应该这样，接下来我以两个方面阐述我的观点。 这里面他对「扎实」的解释我觉得很适合来答这个…"}, {"id": "6914213395026116621", "title": "2021首份字节面经珍藏版 | 前端开发", "desc": "大家好，小编在有了一点前端项目经验后，自我感觉良好，感觉Ctrl + C / Ctrl + V 大法就能打遍天下了，于是，机缘巧合下，冲刺了一把字节的面试。经历过字节笔试的过程后，对前端开发有了新的认识。下面简要谈谈我的感受。 笔者采用的是在线视频面试，直接视频通话在线做题。一…"}, {"id": "6986255501877051422", "title": "面试题-202107", "desc": "是什么 收集 整理一些代码块，面试题，强化理解记忆 题目 验证参数是数字 禁用网页中的右键单击 什么是 AJAX ...."}, {"id": "6844904184941133832", "title": "DD每周前端七题详解-第三期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6844903650389671943", "title": "面试官！让我们聊聊正则", "desc": ". 除了\\n（换行符）以外的任意字符 1.exec该方法主要应用于捕获组而设计，实参是要匹配的字符串。如图所示："}, {"id": "6994337172971061284", "title": "浏览器原理之从用户输入到页面渲染全过程", "desc": "下图是“从输入 URL 到页面展示完整流程示意图”： 从图中可以看出，整个过程需要各个进程之间的配合，所以在开始正式流程之前，我们还是先来快速了解一下浏览器进程、渲染进程和网络进程的主要职责。 浏览器"}, {"id": "6989261131990695967", "title": "前端高频面试题整理（一）", "desc": "1、typeof类型判断 typeof 对于原始类型来说，除了 null 都可以显示正确的类型 2、类型转换 转换为布尔值 转换为数字 转换为字符串 转Boolean 对象转原始类型 如果已经是原始类"}, {"id": "6844904182307094536", "title": "前端面试 - 如何考察候选人的架构能力", "desc": "如果候选人并没有在架构诞生阶段介入, 例如有些候选人是参与了某个重构, 或者在架构发展到 2.0 的时候进入的, 那架构的发展阶段可以就具体的架构演进, 问题提问, 我在上一篇文章中有提到过架构发展过程中持续发生的边界渗出是导致架构最终消亡的主要原因, 因此我们需要考察候选人在…"}, {"id": "6950576284221046821", "title": "前端面试：F12之后的存储器‘F4’", "desc": "1.引言在面试时，关于浏览器的问题有一类是关于本地存储的问题。考察的是前端对浏览器的基础知识储备。2.四大存储F12->Application 后可以看到。(web sql 被废弃了)F1 Cooki"}, {"id": "6894142886456229902", "title": "jsliang 求职系列 - 11 - 手写 new", "desc": "面试官：来手写一个 new。 看到这道题，不要急不要慌，jsliang 逐步深入带你搞一个。 那么，这道题中的 new 做了啥呢？我们深入研究研究。 那么我们开始理解 new 里面的内容，看看怎么手写一个 new。 首先创建一个空对象 tempObj = {}。 接着调用 Fo…"}, {"id": "6844904191794610183", "title": "前端职业规划 - 作为面试官筛选简历的一些技巧", "desc": "明天就去上班了, 在家蹲了 1个月, 真是快长草了, 接下来就不能这么休闲的码字了, 就以此篇来告一段落吧 😀. 学校背景不好的, 再看简历中是否有技术相关的信息, 主要看是对技术研发有热情还是纯粹就是想找工作, 一般会看 GitHub, Blog 等信息, 对于那些临时往 …"}, {"id": "6906732277749792782", "title": "vuex中直接修改state 与 用dispatch／commit来修改state的差异", "desc": "当我们使用vuex进行状态管理的时候，我们总是会看到一句话更改Vuex 的store 中的状态的唯一方法是提交mutation，但是我们不提交mutation就没法修改state的值的了，其实是不对的，我们也可以通过下面的方法进行state值的修改。 并且我们发现直接修改sta…"}, {"id": "6948576107163549732", "title": "前端模拟面试字数过23477万内容｜刷题打卡", "desc": "小达：嗯，好的。 http是超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准，用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。 而对于https，他是以安全为目标的http通道，是http的…"}, {"id": "6968623009129201694", "title": "一个合格的中级前端工程师需要掌握的技能笔记（中）", "desc": "前端团队深入系列-Vue,React,Node,HTTP,JavaScript,HTML,软件项目角色指南,练手项目等。"}, {"id": "7006708150262824991", "title": "浏览器的重排重绘", "desc": "浏览器渲染大致分为四个阶段，其中在解析 HTML 后，会依次进入 Layout 和 Paint 阶段。样式或节点的更改，以及对布局信息的访问等，都有可能导致重排和重绘。而重排和重绘的过程在主线程中进行"}, {"id": "6994274756652433421", "title": "巩固你的网络底层基础，再不怕被问TCP/IP/UDP", "desc": "TCP/UDP 作为传输层的协议，是经常在面试中会被问到的知识点，也是一个软件工程师素养必须具备的基础素养"}, {"id": "6999664382229610510", "title": "2021带答案的最全de面试题", "desc": "这篇文章花了一周，天天凌晨睡，感觉身体被掏空。不过总算写完了vue，其中，我觉得自己的理解比较好的，直接写了。但有些东西，大牛们写的十分透彻，我也没有重复造轮子，而且我理解的没有大牛透彻。所以我在下面"}, {"id": "6857287743966281736", "title": "「查缺补漏」巩固你的HTTP知识体系", "desc": "这次梳理的篇幅主要是涉及网络部分，包括HTTP等，对巩固自己的网络知识体系也是很有帮助的，进一步的对性能优化而言也是帮助很大的。 但更多的是抛砖引玉，希望对你们有所帮助。 超文本传输协议，「HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定…"}, {"id": "7001770596900012045", "title": "热乎的字节跳动面经总结", "desc": "2022届秋招早在7月中下旬已经打响集结号，各路大厂都进行了几轮笔试面试了，已有许多学子已经拿到一些offer。由于现在内卷严重，导致现在秋招越来越早，对于应届生的技术要求也越来越高，知识面也要求广泛"}, {"id": "6991465721565806605", "title": "【爆肝面试系列】CSS 垂直居中的正确打开方式", "desc": "前言之爆锤面试官神器 - 11 种 CSS 垂直居中 其实垂直居中主要分为了两种类型：**居中元素宽高已知** 和 **居中元素宽高未知**，那么我们就结合这两种类型来一一做举例。"}, {"id": "6995531009173225485", "title": "【前端 · 面试 】JavaScript 之你不一定会的基础题（一）", "desc": "面试往往就是博弈的一个过程，但是如果你手中的筹码不够丰厚，那结局大概不会怎么理想。而筹码的增加往往依赖于我们日积月累的输入。"}, {"id": "7002231668886994952", "title": "2年经验社招微信5面面经", "desc": "新鲜的微信面经来啦...................................................."}, {"id": "6844904170538041351", "title": "前22年的Loser，后4年和自己赛跑的人 | 最惨前端面经", "desc": "前东家部门是做旅游的，在这次疫情打击下，基本玩完。 于是我半休半远程三个月后，在4月底领了裁员便当。至今，差不多找了两个月的工作。 本篇不是标准的面经，想从中获取大厂跳槽经验的可以歇一歇。 更多的是想讲一下绝大多数如你如我，学历渣技术差，没大厂经验的前端如何走。 1. Offe…"}, {"id": "6999254525861167134", "title": "『面试的底气』—— 设计模式之装饰者模式（一）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903577220349959", "title": "前端面试考点多？看这些文章就够了（2019年6月更新版）", "desc": "金三银四跳槽季，offer快到碗里来，前端面试考点众多，而网上各个知识点的博客文章又太多，看的眼花缭乱……所以便整理了一下常见知识点的精华文章，每个知识点的文章控制在3篇以内，尽量覆盖该知识点的下容易被面试到的所有内容，文章都是之前自己读过的，确定是精华干货。文章会一直更新，也…"}, {"id": "6844903815053852685", "title": "【面试篇】寒冬求职季之你必须要懂的原生JS(上)", "desc": "互联网寒冬之际，各大公司都缩减了HC，甚至是采取了“裁员”措施，在这样的大环境之下，想要获得一份更好的工作，必然需要付出更多的努力。 一年前，也许你搞清楚闭包，this，原型链，就能获得认可。但是现在，很显然是不行了。本文梳理出了一些面试中有一定难度的高频原生JS问题，部分知识…"}, {"id": "7003731126850158628", "title": "2021年面试复习题（上 - 基础知识篇）", "desc": "2021年面试复习题（上 - 基础知识篇） 主要包括Js、Css、Vue2.x、Vue3.x、Webpack、浏览器、Http等模块"}, {"id": "6951545839307194375", "title": "JS葵花宝典秘籍笔记，为你保驾护航金三银四", "desc": "一面的问题不是很难，但是要得到面试官比较高的评价，还是需要一定的表达能力和对技术比较本质的认识的，如果在回答问题的时候能够做一些适当的扩展，自然会让面试官对你有不一样的评价。"}, {"id": "6999580006049873956", "title": "面试官：写一下防抖和节流叭。", "desc": "又是老生长谈的问题了，接下来我们就看一下具体的例子叭。 防抖 如果一直触发，则不执行。直到达到规定的时间，没有继续点击，就执行。 应用示例 直到300ms内没有点击，数字才加一。 节流 频繁触发，只会"}, {"id": "7000744055713824775", "title": "『面试的底气』—— 设计模式之模板方法模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7000375775517999117", "title": "『面试的底气』—— 设计模式之组合模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6995155827132727310", "title": "【前端 · 面试 】HTTP 总结（十一）——  HTTPS 概述", "desc": "HTTPS 是一种通过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。"}, {"id": "6984986163694010382", "title": "个人收藏面试", "desc": "js的 几种数据类型 cookie、sessionStorage、localstorage区别 封装组件 列如本地存储 二个接口同时请求（可能需要请求一个接口，马上请求接口） vue 首页加载卡顿 路"}, {"id": "6992514886769049631", "title": "webpack面试小结", "desc": "整理的webpack面试题，先整理这些，后续遇到高频题会继续补充，webpack在面试中也是必问选项，还是要多看多学"}, {"id": "6896734695460241421", "title": "前端面试题一：HTML", "desc": "01. src 和 href 的区别 href 是超文本引用，它是指向资源的位置，建立与目标文件的联系；src 目的是把资源下载到页面中；浏览器解析 href 不会阻塞对文档的处理（这就是官方建议使用 link 引入而不是 @ import 的原因），src 会阻塞对文档的处理…"}, {"id": "6922775024935895054", "title": "【每日一题】(20题)面试官问：谈谈JS中的 webSockets 的理解？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 2、创建实例后，会立即尝试连接，与XMLHttpRequest类似，存在一个readyState属性表示当前状态。 1、文章喜欢的…"}, {"id": "6985057719145234446", "title": "Vue2 Mini 源码实现与记录", "desc": "前言 首先，将要记录的项目是旨在实现一个迷你版本的 Vue2 Mini 框架，主要目的是针对于 Vue2 内部的工作原理的梳理和学习，希望能够为有着同样需求 的前端同学们提供小小的帮助。 vue2-m"}, {"id": "6990136923440283656", "title": "前端面试每日 3+1 —— 第835天", "desc": "今天的知识点 (2021.07.29) —— 第835天 (我也要出题) [html] 使用HTML5绘制一个经典“旺仔”的头像 [css] 使用CSS3实现折线图效果 [js] 请分析5 == [["}, {"id": "6994083936372523016", "title": "HTML面试手册", "desc": "HTML面试手册，帮助各位读者，过五关斩六将，斩获大厂Offer！一起学习HTML，一起巩固HTML知识点。"}, {"id": "6920121253219172360", "title": "【文件上传那些事儿】- 04 切片上传和网格进度条", "desc": "在前面的部分，我们已经完成了文件的切片和 hash 的计算，接下来要做的就是把这些切片上传到后端了，这一部分并没有什么难度，按部就班的进行即可。 显然这里最关键的是如何对切片进行包装。 有了这些切片，我们再从前端发送一个 merge 请求，即可在后端完成切片的合并了。 在切片的…"}, {"id": "6999619374998880270", "title": "CSS常见面试知识点", "desc": "面试经常问的一些布局、样式问题等等，比如：常见的垂直居中、两个设置为inline-block的div为什么有间隙、绘制三角形，css 简单动画示例等等"}, {"id": "6943430438287310879", "title": "「面试」- Vue nextTick实现原理", "desc": "熟悉 vue 的前端，想必对 vue 里的 nextTick 也很熟悉了，用的时候就知道他是延迟回调，有时候用起来甚至和setTimeout 看起来是同样的效果。但他和setTimeout到底有什么区别？他是如何实现的？ 本文就nextTick的实现引入，来探讨下js中的异步与…"}, {"id": "6951332891519352863", "title": "前端面试--什么是动态规划？", "desc": "最近做了一些leetcode的动态规划的算法题，本来我一个小小菜鸡是不配来写这个东西的，但是也壮着胆子来写一篇自己对于动态规划的理解和做题的思路，望各路大佬留情"}, {"id": "6944940596133888030", "title": "字节面试官告诉你如何面试研发岗", "desc": "Hello，豆皮范儿同学们，字节跳动春招开始了，大家ready了吗？想想快毕业了是不是很激动，又很不舍，欢迎同学积极投递起来，同时社招和实习生招聘持续进行中，大家可以找我内推。 各位同学大家好，我是字节跳动的一名前端面试官。在我之前的面试过的同学中，经常会遇到因为面试前的准备不…"}, {"id": "6968660007801847845", "title": "前端必刷手写题系列 [5]", "desc": "这是我参与更文挑战的第 1 天，活动详情查看 更文挑战 10. currying (柯里化) 是什么 柯里化 是一种转换，将 f(a,b,c) 转换为可以被以 f(a)(b)(c) 的形式进行调用。J"}, {"id": "6955841774208319519", "title": "(笔记)面试题汇总附加答案(持续更新)", "desc": "JS部分 1. 编写一个方法，该方法接收两个参数，分别为 k 和 一个无序的纯数字数组。该方法在执行后，会返回数组中第 k 大的数字。特别注意，如果数组中，有两位数值一样的数字，同数值数字排名并列。如"}, {"id": "6993919066670891039", "title": "前端面试之vue路由hash与history之间爱恨区别", "desc": "hash模式中带了一个丑丑的#号 history模式中则简介明了不带 vue中默认采取hash模式，区别在于···"}, {"id": "6847902218700455950", "title": "前端面试题集锦——HTML篇", "desc": "近期题主开始准备校招面试啦（感谢内推~~~😝😝😝）。目前总结了各大站点面经出现的比较高频的知识点和一些经典的面试题，汇总在一起，并且分享给大家。这个系列会不断更新，希望能够帮助到大家，也欢迎各位提出宝贵的意见和建议。 1. 你是怎么理解HTML语义化 HTML语义化简单来…"}, {"id": "6942800700074098725", "title": "前端面试题自检 算法 设计模式 操作系统部分", "desc": "限于这是个自查手册，回答不那么太详细，如果某个知识点下面有链接，自己又没有深入了解过的，理应点击链接或自行搜索深入了解。 为某一位找到它后面最小的数，然后交换；从前往后循环。 leetcode 144. 二叉树的前序遍历 leetcode 94. 二叉树的中序遍历 如下图：首先…"}, {"id": "6844904023988895757", "title": "关于 Promise 的 9 个面试题", "desc": "1. 多个 .catch 我们使用构造函数方法创建一个 Promise，并通过 reject 回调立即触发错误。 然后 .catch 工作方式类似于 DOM 的 .addEventListener(event，callback) 或 Event Emitter 的 .on(ev…"}, {"id": "6920919460492607502", "title": "阿里面试官在考察些什么", "desc": "我们团队招聘工作陆陆续续进行了一年，翻简历库看到过很多同事留下的通过或拒绝的理由，我个人也累计面试了几十个候选人。最近听到两个候选人说感觉聊得还不错，但没想到挂了，感觉比较意外，因此想借这篇文章表达下自己的观点，仅代表个人看法哈。 首先介绍一下，阿里面试官很多都有招聘KPI，他…"}, {"id": "6979483518283808782", "title": "字节一面 && 西门子一面 ", "desc": "字节 全程给一个编辑器，写完之后面试官会问思路，难度中规中矩 写一个bachrequest 并发请求，最多同时请求max个，当第一个请求resolve，加入第二个请求，以此类推 思路： 递归 reac"}, {"id": "6844904090762215438", "title": "【面试题解析】从 Vue 源码分析 key 的作用", "desc": "Vue 中 key 很多人都弄不清楚有什么作用，甚至还有些人认为不绑定 key 就会报错。 其实没绑定 key 的话，Vue 还是可以正常运行的，报警告是因为没通过 Eslint 的检查。 接下来将通过源码一步步分析这个 key 的作用。 Virtual DOM 最主要保留了 …"}, {"id": "6917874347906433032", "title": "[算法拆解] 一文说透排序算法的特点（上）", "desc": "详细描述各种排序算法的使用方式，实现方式，特点，复杂度分析。 让你能清晰的了解这些排序的区别与联系、掌握排序思想的精髓。 先说下为什么分上中下3篇，因为一篇的话篇幅太长，人的接受能力、程度还有耐心分成2篇比一篇更容易吸收，而且读下篇的时候能很好的用上篇的一些基础知识来做铺垫，流…"}, {"id": "6844904095107514376", "title": "html面试考点全面总结上篇", "desc": "HTML5的语义化指的是合理使用语义化的标签来创建页面结构，如header,footer,nav，从标签上即可以直观的知道这个标签的作用，而不是滥用div。 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。 dialog：用于表达人与人之间的对话，该元素还包括dt和dd这两个…"}, {"id": "6847902222538244110", "title": "前端备战21秋招之操作系统,线程/进程/死锁", "desc": "非抢占式调度:不允许某进程抢占已经分配出去的处理机。 抢占式调度:允许调度程序根据某种原则，暂停正在执行的进程，将处理*机重新分配给另一进程。 在引入线程的系统中，进程之间可并发，同一进程内的各线程之间也能并发执行。因而系统具有更好的并发性 无论是传统OS，还是引入线程的OS，…"}, {"id": "6844903694475984904", "title": "JS Array.prototype.reduce的一些理解", "desc": "reduce方法接收1个callback的函数作为第一个参数，还有1个可选参数initialValue。 accumulator 累加器累加回调的返回值;它是在最后一次调用回调时返回的累计值。如果提供了initialValue，它的默认值就是initialValue，否则就是数…"}, {"id": "6844903608941543438", "title": "给在校同学的几个建议", "desc": "Vim 被誉为\"编辑器之神\"，这可不是虚的。 在我用了 vim 半年之后，我建议我身边的每一位程序员都去学习 vim 。 因为一旦你学会了 vim 的操作，你就像中了毒一样，你会讨厌鼠标，讨厌在你敲着敲着键盘，突然又要去移动光标，因为把手从键盘移动到鼠标上的时间远远大于手指在键…"}, {"id": "6844903941499535367", "title": "Vue中项目如何优化？", "desc": "如果一个数据放到了 data 中，Vue 会给这个数据添加一个 getter 和 setter 方法，当你获取数据时调用 getter，当你设置数据时调用 setter，所有说性能不高。 其中牵扯到了 数据劫持 操作。 如果用参数作为 key 值得话，需要重新渲染，因为 key…"}, {"id": "6944724441876135950", "title": "前端面试题总结", "desc": "概念：变量或函数的上下文决定了它们可以访问到哪些数据，以及它们的行为。 本人通俗的理解：上下文就是作用域的问题。内部可以使用外部的属性或者方法，但是外部没办法使用内部的属性或者方法 概念：闭包指的是那些使用了另外一个函数作用域内的变量的函数，通常是在嵌套函数中实现的。"}, {"id": "6844904177747886094", "title": "第八期 | 换个角度看面试", "desc": "简历中项目的知识点，自行审视之后对比其他方案。 举例：React 的 diff 算法，先做个标准回答，然后对比其他 diff 场景，不同 diff 算法各有什么优缺点，为什么使用这种算法，除了 React dom 之外，这个算法能不能用到其他地方，横向比较。 抛开裸辞的大佬，面…"}, {"id": "6844903567946416136", "title": "往届生写给19届的春招指南", "desc": "这篇文章将告诉你如何不择手段进入你想去的互联网公司,拿到dream offer. 这篇文章将告诉你如何规范简历,投递简历. 这篇文章将告诉你如何应对面试,百战百胜."}, {"id": "6844903573034123277", "title": "前端开发基础知识整理--CSS篇", "desc": "该篇是整理的一些面试中的CSS题。整理该项目的目的不只是为了面试，也是为了对平时一些零散知识点有一个整理和总结。好记性不如敲键盘，何况记性还不好呢。趁着年后分享面试的人多进行的整理，错误之处还请指正，同时欢迎分享更多优质题目..."}, {"id": "6844903521272201229", "title": "[面试∙网络] TCP/IP（六）：HTTP 与 HTTPS 简介", "desc": "在 OSI 七层模型中，HTTP 协议位于最顶层的应用层中。通过浏览器访问网页就直接使用了 HTTP 协议。使用 HTTP 协议时，客户端首先与服务端的 80 端口建立一个 TCP 连接，然后在这个连接的基础上进行请求和应答，以及数据的交换。 HTTP 有两个常用版本，分别是 …"}, {"id": "6844903939133931528", "title": "前端知识点之JavaScript系列1-20", "desc": "所谓防抖，就是指触发事件后在n秒内函数只能执行一次，如果在n秒内又触发了事件，则会重新计算函数执行时间。 防抖函数分为非立即执行版和立即执行版。 非立即执行：触发事件后函数不会立即执行，而是在n秒后执行，如果在n秒内又触发了事件，则会重新计算函数执行时间。 背景：产生事件时，首…"}, {"id": "6844903991688560648", "title": "日问周刊 | 全栈问题汇总 | 第一期", "desc": "勤学如春起之苗，不见其增，日有所长。 因此我在 github 上新建了一个仓库 日问，每天至少一个问题。有关全栈，graphql，devops，微服务以及软技能，促进职业成长，欢迎交流。 对于选题，我会选择平时业务开发中会遇到的一些问题，技巧或者面试题，不仅仅限于前端，也不仅仅…"}, {"id": "6844903872121536519", "title": "Day3 - 前端高频面试题之基础版", "desc": "在代码块内，使用let和const命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区” 在没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。 co…"}, {"id": "6844904004653154317", "title": "面试之万能答案：事件循环", "desc": "2. 单线程也就意味着所有的任务是要排队的 3. 所以浏览器为异步的任务开启了另外的线程，那个异步任务的线程完成任务后，主线程是怎么知道的呢？(异步叫任务队列) 4. 任务队列又分为 5. 所以js异步的执行机制就是事件循环机制 1：因为事件循环是先执行同步任务，再执行异步任务…"}, {"id": "6921544499005145096", "title": "[核心概念] 一文说透浏览器环境下的JS运行机制", "desc": "这篇文章深刻讲下浏览器环境下js的执行机制。 假设我们打开电脑的两个程序，一个是qq音乐，一个是浏览器，qq音乐播放着音乐，我们上网冲浪。那么这两个应用程序是同时运行的吗? 假设浏览器和qq音乐都是只有一个进程的应用程序，我们打开任务管理器，可以看到两个进程，(qq music…"}, {"id": "6971688623561244709", "title": "二叉树的遍历", "desc": "遍历：将一个集合中的每一个因素进行获取并查看。 传递二叉树要传递根节点。 树形结构有三种遍历方式，分别是前序遍历、中序遍历、后序遍历。"}, {"id": "6906369691019968526", "title": "你不知道的大厂面试题附赠答案😯", "desc": "1. ES6 产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：ID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.sm…"}, {"id": "6844903790085144589", "title": "ES6模块与commonJS模块的差异", "desc": "ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。 其模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口， import命令用于输入其他模块提供的功能。 其实ES6还提供了exp…"}, {"id": "6943477495802888200", "title": "「面试」-路由之hash和history", "desc": "现在的网络应用程序越来越多的使用AJAX异步请求完成页面的无缝刷新，导致浏览器的URL不会发生任何变化而完成了请求，从而破换了用户浏览体验。同时本次浏览的页面内容在用户下次使用URL访问时将无法重新呈现，使用路由可以很好地解决这个问题。 单页面应用利用了JavaScript动态…"}, {"id": "6844904098106441735", "title": "前端面试-蘑菇街一面（凉经）", "desc": "经历头一天的紧张打击，难免还是有点畏首畏，面试约的下午2点，等到1点半的时候面试管终于加了我qq准备视频面。因为头一天的面试，感觉自己对源码方面还掌握的不是很好，所以又着重看了源码，把思路理了一下。 面试管很亲和，相互做了自我介绍后，就开始问了。（感觉心里平静了很多，逃~ 本来…"}, {"id": "6957606330530005028", "title": "计算机网络应用层知识思维导图", "desc": "整理了一下应用层的知识，真的很碎，之后会根据重点再修改。整理了一下应用层的知识，真的很碎，之后会根据重点再修改。"}, {"id": "6951404588108873764", "title": "前端算法面试必刷题系列[39]", "desc": "69. 反转链表 II (reverse-linked-list-ii) 70. 复原 IP 地址 (restore-ip-addresses)"}, {"id": "6844903848889286669", "title": "手写call、apply、bind函数", "desc": "call函数特点：1)可以改变我们当前函数的this指向2）还会让当前函数执行题目自测思路解析fn1.call(fn2,1,2)1）call执行传入fn2,1,2三个参数2）call函数内部conte"}, {"id": "6844903766043394061", "title": "JS每日一题: web安全攻击手段有哪些？以及如何防范", "desc": "20190112问:web安全攻击手段有哪些？以及如何防范常见的有xss,csrf,sql注入xss(crosssitescripting)跨站脚本攻击定义:指攻击者在网页嵌入脚本，用户浏览网页触发恶"}, {"id": "6844903640398823438", "title": "带你一起撸一遍 nodejs 常用核心模块（二）", "desc": "前沿：核心模块二主要是和流相关的部分，当然要想给这一块有清楚的了解，你需要对核心模块（一）中的内容有一些了解。 以上三个方法的弊端：都是将文件整体读出或者写入。 以上就是nodejs的常用核心模块的一部分，因为涉及的内容比较多并没有深入进去，其实每个部分都可以展开里面有很多知识…"}, {"id": "6917916557234405390", "title": "vue杂篇", "desc": "Vue会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。React在应用的状态被改变时，全部子组件都会重新渲染。通过shouldComponentUpdate这个生命周期方法可以进行控制，但Vue将此视为默认的优化 Vue中子组件向父组件传递消息有两种方式：事件和回调函数，…"}, {"id": "6844904096428720136", "title": "怎么写一个通用的节流和防抖函数", "desc": "最近在家里上班有点闲，就刷了些前端面试题，研究一下函数节流和函数防抖。这东西在项目中也常用，但一直是直接从网上copy代码，没深究过，最近就仔细看了下，还是有点收获的，前端面试的时候，常会被问道闭包的知识，节流与防抖就是一个很经典的闭包的应用。 日常开发过程中，我们可能会遇到实…"}, {"id": "6986949037488341005", "title": "面试常考手撕源码题", "desc": "手写防抖节流、EventEmitter(发布订阅模式--简单版)、new 操作符、手写 instanceof"}, {"id": "6850037279788892173", "title": "面试官最喜欢问的Vuex", "desc": "笔者希望本篇博客的阅读者是使用过Vuex的开发者。看该篇博客的目的是学会表达。 这个问题呢，我们不急着解答。先看看 官方文档 怎么讲 文档上声明，Vuex是一种状态管理模式。但是我们直接告诉面试官这是状态管理模式，面试官肯定一脸懵。所以我建议这样回答。 Vuex是一种状态管理模…"}, {"id": "6844903521268187144", "title": "[面试∙网络] TCP/IP（四）：TCP 与 UDP 协议简介", "desc": "从本章开始，我们开始介绍最重要的传输层。传输层位于 OSI 七层模型的第四层（由下往上）。顾名思义，传输层的主要作用是实现应用程序之间的通信。网络层主要是保证不同数据链路下数据的可达性，至于如何传输数据则是由传输层负责。 常见的传输层协议主要有 TCP 协议和 UDP 协议。T…"}, {"id": "6899434359242096648", "title": "转行前端：2020面试——笔试题", "desc": "深圳某公司，规模20人左右，目前还没有前端，笔试题如下。 1、rem和vw布局分别具有什么优缺点？通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到r"}, {"id": "6844903506835406855", "title": "征服 JavaScript 面试：什么是闭包？| Eric Elliott", "desc": "“征服 JavaScript 面试”是我写的一系列文章，来帮助面试者准备他们在面试 JavaScript 中、高级职位中将可能会遇到的一些问题。这些问题我自己在面试中也经常会问。 在我面试时问出的一系列问题里，闭包通常是我问的第一个或最后一个问题。坦白地说，如果你连闭包也弄不明…"}, {"id": "6844903623684702221", "title": "浅解前端必须掌握的算法（一）：冒泡排序", "desc": "虽然前端面试中很少会考到算法类的题目，但是你去大厂面试的时候就知道了，对基本算法的掌握对于从事计算机科学技术的我们来说，还是必不可少的，每天花上 10 分钟，了解一下基本算法概念以及前端的实现方式。 另外，掌握了一些基本的算法实现，对于我们日常开发来说，也是如虎添翼，能让我们的…"}, {"id": "6844904056817729549", "title": "自学前端开发，现在手握大厂offer，我的故事还在继续", "desc": "我是一个非科班出身的程序员，而且是连续跨专业者，用一句话总结就是：16 届本科学完物流，保送研究生转交通，自学前端开发的休学创业者。 17 年休学创业，正式开始学习前端，离开创业公司后，我又回炉深造，期间一直没有放弃前端开发的自主学习，在 19 年秋招（20 年毕业）大战中也收…"}, {"id": "6844903652491018253", "title": "JavaScript核心概念(1):类型转换", "desc": "看到这个是不是有一种想打人的感觉，垃圾 JavaScript，这特么都什么鬼，相信很多人不管是笔试还是面试，都被 JS 的类型转换难道过，相信认真看完我这篇文章，妈妈再也不用担心类型转换的问题了。 字符串转数字：以数字表示的字符串可以直接会转为字符串，如果字符串头尾有空格会忽略…"}, {"id": "6847902219082153991", "title": "《前端面试总结点线面》之点-JavaScript篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 一旦执行栈中所有的同…"}, {"id": "6952524699276410894", "title": "前端算法面试必刷题系列[42]", "desc": "76. 相同的树 (validate-binary-search-tree)77. 对称二叉树 (symmetric-tree)"}, {"id": "6986654071872552996", "title": "随便找的前端面试题及答案", "desc": "Vue篇 1. vue的组件化需要用到哪些技术点？ 组件化常用到组件传值、通信，包括属性Props，饮用refs，子组件children，emit父组件自定义事件，$parent搭桥通信，事件总线Ev"}, {"id": "6844904195670147085", "title": "字节前端岗位面试经历，我从里面得到了什么？", "desc": "对于实习招聘（甚至校招）来说，项目经历可能是获得面试的敲门砖，但是基础绝对是赢得面试的通天索。 (互联网侦察注：校招就是考基础和潜力，基础扎实潜力不错的一般都会收) 即使是实习招聘，白板写代码也很可能逐渐成为主流面试的标配，平时要有意识地锻炼这方面能力，要不然面试时没有IDE真…"}, {"id": "6844903527987281934", "title": "每天一道面试题：你理解的HTML语义化是什么？", "desc": "要讲HTML语义化还要从历史讲起，大家知道前端也是这两年才发展起来的，以前的前端都是写写展示页，所以其实很早以前，是没有专门的前端的，需要写网页了，就让后端看看顺手写了，所以那时候的网页，都是一堆Table 或者 满屏幕的div标签。不要说给别人看自己的HTML结构了，估计自己…"}, {"id": "6847902216049836039", "title": "【面试系列】跨域的几种解决方案", "desc": "为了安全，浏览器规定了同源策略，不允许跨域访问资源。 也就是说如果url a 要访问 url b，那么a和b的协议+域名+端口号三者必须一致，才能访问，否则就需要解决跨域问题。 下面我们详细介绍一下每一种方式的具体实现。 1. jsonp jsonp的核心是动态加载js。这种方…"}, {"id": "6844903917600374792", "title": "【深度总结】数组 reduce 一看一整天（附实现代码）", "desc": "【深度总结】 JS数组 reduce 相关的方法，原理，应用，还有 polyfill 实现的 reduce, 其实你可以直接调到最后一章，了解一下 reduce 的实现即可。 简述：用于迭代累加。 callback: 针对每一项执行的函数。 inititalValue: 可选，…"}, {"id": "6844904086769270797", "title": "这几道JS面试刁钻题，你能答对吗😎", "desc": "直接说答案吧，因为这道题我也不会，会的小伙伴在评论区赐教呀。😝 文章中如有不对的地方，欢迎小伙伴们多多指正。"}, {"id": "6844904152179425294", "title": "😜「计算机网络」你要了解的http状态码", "desc": "HTTP状态码是客户端和服务端必备的知识，在一些公司招聘的面试题中也经常会出现，简单介绍一下HTTP状态码的知识. HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型： | 100 | Continue…"}, {"id": "6942796336102277127", "title": "大web之js高频", "desc": "1. 实现new方法 3. 实现一个call函数 通过传入一个对象（若为基本类型，会被封装函数转化为对象---装箱），将this绑定到该对象。 4. 实现apply方法 5. 实现一个bind函数 6. call、apply和bind的区别和应用 call()和apply()一…"}, {"id": "6844903663752708103", "title": "h5渲染性能一瞥", "desc": "内容来源：2018 年 6 月 30 日，饿了么前端主管向勇在“饿了么技术沙龙・第27弹 【前端专场】”进行《h5渲染性能一瞥》演讲分享。IT 大咖说（微信id：itdakashuo）作为独家视频合作方，经主办方和讲者审阅授权发布。 前端性能按照类型来分主要分为加载性能和渲染性…"}, {"id": "6942784495112159262", "title": "前端算法面试必刷题系列[24]", "desc": "41. 不同路径 (unique-paths) 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。问总共有多少条不同的路径？注意这题是不…"}, {"id": "6844904079190163469", "title": "前端基础之JavaScript篇", "desc": "typeof：得到的值有以下几种类型：undefined、boolean、number、string、object、function、symbol ，对于原始数据类型，要注意typeof null = 'object'。对于引用数据类型的判断，除typeof function的…"}, {"id": "6844904041571418125", "title": "前端基础回顾之手写题", "desc": "本文还是依然针对前端重点基础知识点进行整体回顾系列的一篇，目标是帮助自己理解避免死记硬背。 下面针对new、Object.create、call、apply、new、bind 等基础API，从用法到原理实现过一遍，期望看完之后大家实现时不是死记硬背而是根据理解记忆推导。 在探究…"}, {"id": "6844903989738209294", "title": "作为前端面试官，我会问哪些问题？(基础篇:附答案)", "desc": "基础题 我出的这套基础题，面试(当面答题，想百度是不存在的)好多人，情况都比较差，没有令我满意的，是我出题太难了么? .github-corner:hover .octo-arm{animation:"}, {"id": "6844903521263829006", "title": "[面试∙网络] TCP/IP（二）：IP协议", "desc": "IP协议处于OSI参考模型的第三层——网络层，网络层的主要作用是实现终端节点间的通信。IP协议是网络层的一个重要协议，网络层中还有ARP(获取MAC地址)和ICMP协议(数据发送异常通知) 数据链路层的作用在于实现同一种数据链路下的包传递，而网络层则可以实现跨越不同数据链路的包…"}, {"id": "6844903889305600014", "title": "JS面试：JS-Web-API", "desc": "使用document.cookie = ... 获取和修改即可"}, {"id": "6844903569494130701", "title": "前端开发基础知识整理--web综合篇", "desc": "该篇是web综合部分，主要包含了HTML(HTML5)、http、页面优化等。项目的目的不只是为了面试，也是为了以后对平时一些零散知识点有一个整理和总结。好记性不如敲键盘，何况记性还不好呢。趁着年后分享面试的人多进行的整理，错误之处还请指正，同时欢迎提交优质题目..."}, {"id": "6945449994715430925", "title": "前端算法面试必刷题系列[30]", "desc": "52. 最小覆盖子串 (minimum-window-substring) 给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 \"\" 。 注意：如果 s 中存在这样的子串，我们保证它是唯一…"}, {"id": "6844903773450551303", "title": "前端设计模式（1）--工厂模式", "desc": "... 设计模式有23种，按大类归类的话可以分为三大类：创建型（如：工厂模式、单例模式、原型模式等），结构型模式（如装饰器模式、代理模式等），行为型（如：观察者模式、迭代器模式等）；今天我们讲的是工厂模式，其分为工厂方法模式、抽象工厂模式、简单工厂模式，好的，我们一步一步来分析…"}, {"id": "6844904173746520071", "title": "某csdn面经金五银六助力大厂-🎉🎉🎉", "desc": "求靠谱内推（北京地区）可以留言我 +。="}, {"id": "6971075410616385566", "title": "二维数据结构", "desc": "二维数组 二维数组的本质为数组中的每一个元素都是数组。即var arr = [[],[]];这种形式的就是一个二维数组。"}, {"id": "6854573211570012167", "title": "轻松实现链式调用Then, Catch的简易Promise", "desc": "实现Promise之前并没有系统看过A+规范，特性都是自己在控制台用原生Promise实验的，不对的地方还请指正。 看了几篇面试文，里面实现的Promise功能都不齐全，而且稍显复杂，所幸拜读过晨曦时梦见兮大佬的最简实现Promise, 里面很巧妙的实现了then的链式调用。2…"}, {"id": "6892783570016796679", "title": "🎉🎉一个基于 Vue 3 + Vant 3 的开源商城项目🎉🎉", "desc": "由于正常上班的缘故，所以只能抽出空闲时间来做，适逢几次加班，导致比预估的工时推迟了一些时间，2020 年 11 月 3 日把项目开发的差不多了，之后一直处于自测和修改小问题的阶段。 我发现大家对这个项目的热情也挺高，所以在上周末也把项目部署到线上，让大家帮忙测试了一波。不过时间…"}, {"id": "6993681326851244069", "title": "『面试的底气』—— 设计模式之单例模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844904088337907720", "title": "字节跳动今日头条前端面经（4轮技术面+hr面）", "desc": "算法题：老师分饼干，每个孩子只能得到一块饼干，但每个孩子想要的饼干大小不尽相同。 目标是尽量让更多的孩子满意。 如孩子的要求是 1, 3, 5, 4, 2，饼干是1, 1， 最多能让1个孩子满足。如孩子的要求是 10, 9, 8, 7, 6，饼干是7, 6, 5，最多能 让2个…"}, {"id": "6844903801153945608", "title": "(中篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂", "desc": "大家知道，React 现在已经在前端开发中占据了主导的地位。优异的性能，强大的生态，让其无法阻挡。博主面的 5 家公司，全部是 React 技术栈。据我所知，大厂也大部分以 React 作为主技术栈。React 也成为了面试中并不可少的一环。 面试上篇。🤑 React 也是现…"}, {"id": "6984410165164392478", "title": "🍊Flex布局最佳实践之骰子实战篇（面试高频考点，速来围观呀~）", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 写在前面 一、骰子的布局 骰子的样式 这里给出样式代码： HTML: CSS: 上面代码中，div元素（代表骰子的"}, {"id": "6869628880538468359", "title": "【2020面试真题】这15道面试真题，你能答出几道？", "desc": "含泪忠告：不要在周末没准备的情况下去luo面，不要去luo面，不要去luo面，不要去luo面。一旦被暴击，你的周末和自信心就彻底毁了。 这周双休，手机弹出某聘的消息，想着去看看目前前端的概况，就投了简历，然后就开始愉快的玩手机，没一会儿，电话直接来了，问现在方便吗，想简单聊聊，…"}, {"id": "6844904150161948679", "title": "你累死累活做业务，绩效还不怎么样，我只能帮你到这了……", "desc": "如果你也有这样的感受和困境，我想告诉你，这真的是太正常了，在阿里内部的技术论坛就有多篇关于这个问题的思考，我根据根据自己理解和调研，同时参考了多位不同前端领域专家的总结，整理成这篇文章，希望能对大家有所帮助。 1. 业务前端的困境 业务前端，顾名思义，做业务的前端，直接与业务的…"}, {"id": "7002591353263620127", "title": "聊聊Promise的值穿透和异常穿透。", "desc": "值穿透 值穿透指的是，链式调用的参数不是函数时，会发生值穿透，就传入的非函数值忽略，传入的是之前的函数参数。 传入2或者promise的fulfilled状态都会发生值穿透。 只有传入的是函数才会传递"}, {"id": "6844904121368068103", "title": "教你如何写初/高级前端简历【赠简历导图】", "desc": "完整的导图，这里放不下，老规矩，关注公众号「前端试炼」，回复「简历」获取。 1. 前言 最近是春招季，参与了部门的实习生招聘工作，收到了很多同学的简历。发现有一些同学的简历写得不是很好看。 但是，仔细聊了聊之后发现，这些同学其实技术是很厉害的，只是不知道该如何写在简历上，不知道…"}, {"id": "6859121743869509646", "title": "面试造火箭，看下这些大厂原题", "desc": "面试造火箭，工作拧螺丝，虽然我只想拧螺丝，可是我需要用造火箭的技术去寻找拧螺丝的工作，如何能在面试过程中让自己处于不败的地步呢，刷题是一个比较好的捷径，今天就汇总了一些比较经典的面试题进行了汇总，分享给大家。 在青铜难度，我们把数组里面的每一项依次相加。但是也可以进行一些优化，…"}, {"id": "7003591104566132766", "title": "从一道面试题说起——js中的函数传参问题。", "desc": "先上结论，js函数传参传递的是参数的拷贝，请牢牢记住这句话。接下来我们看具体的例子。 基本数据类型 很好理解，函数传入的是a的拷贝的值，所以a不会变化。 引用数据类型 a发生了变化，看起来传入的是a的"}, {"id": "7001695186409488420", "title": "JavaScript 面试知识点 📝 🎉～（0x21-0x40）", "desc": "TOC JavaScript 面试知识点 📝 🎉～（0x01-0x20） > JavaScript 面试知识点 📝 🎉～（0x21-0x40） JavaScript 面试知识点 📝 🎉～（0x41-0"}, {"id": "6992146726500958239", "title": "【前端 · 面试 】HTTP 总结（三）——  HTTP 请求方法", "desc": "根据 HTTP 标准，HTTP 请求可以使用多种请求方法：GET、POST 、HEAD 、OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。"}, {"id": "6844904113587634184", "title": "为什么 Vue 中不要用 index 作为 key？（diff 算法详解）", "desc": "Vue 中的 key 是用来做什么的？为什么不推荐使用 index 作为 key？常常听说这样的问题，本篇文章带你从原理来一探究竟。 本文的结论对于性能的毁灭是针对列表子元素顺序被改变、或者子元素被删除的特殊情况，提前说明清楚。 那么它的 vnode 也就是虚拟 dom 节点大…"}, {"id": "6994235344195420173", "title": "『面试的底气』—— 设计模式之策略模式(一)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7004004869115740196", "title": "面试官：手撕LRU缓存了解一下", "desc": "面试官：来了，老弟，LRU缓存实现一下? 我：直接LinkedHashMap就好了。 面试官：不要用现有的实现，自己实现一个。 我：..... 面试官：回去等消息吧.... 大家好，我是程序员学长，今"}, {"id": "6954906499353149471", "title": "记录一下3月底到4月的前端开发工程师面经", "desc": "1.https 原理（加密 证书） 客户端使用https的url访问web服务器，要求与服务器建立ssl连接 web服务器收到客户端请求后，会将网站的证书（包含公钥）传送一份给客户端 客户端收到网站证"}, {"id": "6998153008915677198", "title": "『面试的底气』—— 设计模式之职责链模式（一）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903847874265101", "title": "面试官(6): 写过『通用前端组件』吗?", "desc": "设计前端组件是最能考验开发者基本功的测试之一,因为调用Material design、Antd、iView 等现成组件库的 API 每个人都可以做到,但是很多人并不知道很多常用组件的设计原理。 我们在学习设计模式的时候会遇到很多种设计原则,其中一个设计原则就是单一职责原则,在组…"}, {"id": "6995718648207769607", "title": "大厂面试题他来啦，js中this的基本情况分析，拿来吧你~", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战、 大家好，我是圈圈，热爱前端，喜欢分享，很感谢这个活动，我希望我可以坚持，感谢你那么好看，还看了我的文章，欢迎大家评论区交流切磋~ THI"}, {"id": "7002601404208513060", "title": "手写JS防抖函数、节流函数", "desc": "节流和防抖都是用来控制某些函数的调用频率。这是前端面试中比较常见的一个问题，可能会让你现场手写，所以抽空学习一下吧~"}, {"id": "6920044884594425864", "title": "从零撸一个CLI命令行脚手架工具", "desc": "我想大部分同学肯定都是这样回答的：现在社区都有开箱即用的脚手架，像vue-cli、create-react-app这种，我们直接用脚手架来创建项目就可以了啊。 大部分业务场景是相似的，那么对于基础框架结构的诉求（这里包括工具类、接口封装、环境变量配置、eslint 配置、git…"}, {"id": "6961338592471810084", "title": "超简单的vue3.0响应式原理", "desc": "一篇超详细~超简单！！你一看就懂的vue3响应式原理！！！原理没那么难，让我们一起愉快的学习吧~~~"}, {"id": "6990679048741453854", "title": "React源码系列之三：hooks之useState，useReducer", "desc": "前言 本次React源码参考版本为17.0.3。这是React源码系列第二篇，建议初看源码的同学从第一篇开始看起，这样更有连贯性，下面有源码系列链接。"}, {"id": "6844903865553256461", "title": "《前端算法系列》如何让前端代码速度提高60倍", "desc": "今天的问题从排序算法入手，来讲解如何根据业务需求，结合金典的算法，来实现js高性能开发。 老板让小明给公司的20000+条数据排个序，但是由于排序的操作会频繁发生，如果操作执行的时间很慢，则会严重降低用户体验，听到这条噩耗后小明开始了代码。 运行该测试函数后，耗时760ms，小…"}, {"id": "6921999194651623438", "title": "前端常见面试题总结（一）", "desc": "__proto__ 存在于所有的对象上，prototype 存在于所有的函数上，他俩的关系就是：函数的 prototype 是所有使用 new 这个函数构造的实例的 __proto__。函数也是对象，所以函数同时有 __proto__ 和prototype。 作用：将类的方法定…"}, {"id": "6995563171901603853", "title": "js必考面试题", "desc": "1. 变量类型和计算 值类型互相并不影响 深拷贝和浅拷贝的区别 浅拷贝和深拷贝 深拷贝和浅拷贝的区别 如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟"}, {"id": "7001357095811416078", "title": "深入理解var、let、const", "desc": "ES6中新增了块级作用域、let和const 1.let命令 基本用法 ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。（即块级作用域"}, {"id": "6942813303664017444", "title": "React 面试必知必会 Day3", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6896988786547228679", "title": "jsliang 求职系列 - 19 - 垃圾回收", "desc": "原始数据类型是存储在栈空间中的，引用类型的数据是存储在堆空间中的。 不过有些数据被使用之后，可能就不再需要了，我们把这种数据称为垃圾数据。 如果这些垃圾数据一直保存在内存中，那么内存会越用越多。 所以我们需要对这些垃圾数据进行回收，以释放有限的内存空间。 这时候就引入了垃圾回收…"}, {"id": "6977621119956320287", "title": "🔥Rest参数和扩展运算符", "desc": "前言 ES6中的三个点 ... 有两个名字:rest参数和扩展运算符. 当用在函数定义时的形参前面时,称为rest参数,当函数调用时,用于接收不确定的参数. 当与解构赋值组合使用时,称为rest参数,"}, {"id": "6844903588817289224", "title": "前端笔试题面试题记录（下）", "desc": "接上篇前端笔试题面试题记录（上）。趁清明小长假，把上篇剩下的部分也写一下，因为最近比较忙这篇已经拖了很久了。现在刚刚开始银四了，应该还是有些小伙伴在找工作，时间还不算太晚，希望本篇可以帮到这些小伙伴。 在同一个作用域里面：var可以重复声明变量，let不能重复声明同一个变量。 …"}, {"id": "6844904063536988173", "title": "2019年底前端面试及答案-html/css", "desc": "margin、border、padding、content。在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border）元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以…"}, {"id": "6844903971270688781", "title": "字节跳动前端面试必备-LeetCode经典面试算法题", "desc": "2019年马上就要结束了，相信很多童鞋都开始蠢蠢欲动了，寻找新的机会了，但是工作太忙没有时间刷算法题，面试的时候好心虚。这里双手奉上40道LeetCode上经典面试算法题，整理的内容有点长，建议先收藏，慢慢消化，在来年顺利拿到满意的offer。 内容较多，整理不易，希望大家关注…"}, {"id": "6844904149923053575", "title": "「源码级回答」大厂高频Vue面试题（中）", "desc": "本篇是「源码级回答」大厂高频Vue面试题系列的第二篇，本篇也是选择了面试中经常会问到的一些经典面试题，从源码角度去分析。 diff 算法是一种通过同层的树节点进行比较的高效算法，避免了对树进行逐层搜索遍历，所以时间复杂度只有 O(n)。diff 算法的在很多场景下都有应用，例如…"}, {"id": "6844903745961066503", "title": "【进阶4-1期】详细解析赋值、浅拷贝和深拷贝的区别", "desc": "对基本类型进行赋值操作，两个变量互不影响。 对引用类型进行赋址操作，两个变量指向同一个对象，改变变量 a 之后会影响变量 b，哪怕改变的只是对象 a 中的基本类型数据。 通常在开发中并不希望改变变量 a 之后会影响到变量 b，这时就需要用到浅拷贝和深拷贝。 创建一个新对象，这个…"}, {"id": "6906850837557936141", "title": "小结一下年底找工作现状", "desc": "本人前端开发，2年9个月工作经验，技术栈vue全家桶+微信小程序原生开发，会一点thinkphp和nodejs。上家公司因为公司不盈利，老板解散了我们的4人技术小组，12月15日离职，离职前一周开始找"}, {"id": "6965072500111704072", "title": "二本获得阿里实习 offer 经历-宝藏篇（下）", "desc": "二本获得阿里实习 offer 经历，内置笔者 10+ 张思维导图！因字数限制，分为上下两篇，这一篇是下篇，详细记录笔者一年半载真实面试知识点。"}, {"id": "6844903588762763277", "title": "面试小结--前端面试的几个雷点", "desc": "得益于‘金三银四’，在最近一段时间，面试了一些人，但是符合的寥寥无几。对于之前面试的情况，趁着项目开发前，还有一两天的闲余时间，发下牢骚。这些情况，可以说是一些面试雷点，有不建议的学习方式，有不建议的写简历方式，针对这些，下面简单写下，发表自己的个人看法，和大家共勉下。 这个应…"}, {"id": "6970674163266617358", "title": "经典面试题-数组扁平化&展开多级数组", "desc": "针对部分嵌套了多层数组的数据，采用数组扁平化能提升代码的可阅读性，此题也是面试过程中常考的一道代码题。本文与大家分享5种方法解决此问题"}, {"id": "6984925268754317320", "title": "卡牌大师：玩转“洗牌算法”，幸运女神在微笑 (*^_^*)", "desc": "我们看过太多排序算法，殊不知“洗牌”这种乱序算法也是门技术活~本篇透析洗牌算法，从青铜到王者，从愣头青到与神共舞！超神！来劲德瑞。。。"}, {"id": "7004611322222477326", "title": "🔥🔥 styleds-components 的原理你能讲一下吗？", "desc": "随着这些年前端技术的发展，陆陆续续涌现出很多优秀的技术，尤其是在CSS领域有各种不断的尝试，例如：CSS In JS 在这个领域中涌现出许许多多优秀的库， 例如：styled-components，E"}, {"id": "6928677404332425223", "title": "阿里面试官的”说一下从url输入到返回请求的过程“问的难度就是不一样！", "desc": "年前准备换工作，总结了一波面试最频繁的面试问题跟大家交流。此文章是关于浏览器的常见问题，大概面试10家遇到6家提问类似问题（主要是大厂和中厂）。（面试的部分内容已经忘了，为了串联成一个完整的故事，增加可读性，20%的内容为虚构），目前入职滴滴出行成都团队。 你一看这种烂掉牙的问…"}, {"id": "6936913689115099143", "title": "字节跳动最爱考的前端面试题：CSS 基础", "desc": "display 设置了 none 属性会隐藏元素，且其位置也不会被保留下来，所以会触发浏览器渲染引擎的回流和重绘。 不会，因为 BFC 是页面中一个独立的隔离容器，其内部的元素不会与外部的元素相互影响，比如两个 div，上面的 div 设置了 float，那么如果下面的元素不是…"}, {"id": "6979860036210294797", "title": "14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠(第五部分 371-424题)", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 本来今天上午可以更新完成所有面试题，但是上午实在是太忙，一直到现在才有时间，还请大家见谅"}, {"id": "6979152169815523365", "title": "新手入门｜3节小课入门写作，还有千元奖金和最新周边等你来拿！", "desc": "这次，官方手把手教学，3节小课带你掌握最基础的写作技巧，搞懂掘金的文章分发规则！还有千元奖金和最新周边等你来拿！"}, {"id": "6844904019165446158", "title": "面试完50个人后我写下这篇总结", "desc": "2019年的春节来的似乎格外的早，过完年相信很多童鞋都开始蠢蠢欲动了；笔者总结了多篇教程，结合平时自己的面试经历，整理了这份文档，希望帮助大家来突击一下前端知识的盲区。文章很长很长很长。。。。（建议先收藏，技术大佬请Ctrl+F4，面向基础） 整理不易，希望大家关注公众号【前端…"}, {"id": "7005835660208635911", "title": "这道前端面试题你确定会吗", "desc": "最近面试过程中碰到的一个非常有意思的编程题，个人觉得有必要做一个笔记，并分享出来............."}, {"id": "6982877680068739085", "title": "「记录优化」我是如何在项目中实现大文件分片上传，暂停续传的", "desc": "前言 最近我们公司的项目中多了一个需求，因为我们的管理系统需要管理背景音乐的存储，那就肯定涉及到前端的上传音乐功能了，可能是由于我们公司的编辑们所制作的BGM质量比较高，所以每一个BGM文件都会比较大"}, {"id": "6945625394154307592", "title": " 阿里腾讯面试梳理&个人成长经历分享", "desc": "好久没有更新了，最近忙着面试，写毕业设计和论文。 不过不想停下记笔记的习惯，所以偷偷的发面经，然后\"惊艳\"老铁们。 校招面经，面试难度中等，看官老爷们看个热闹就行。 历经一个月战线，投了阿里和腾讯，具体部门这里不展开了，都是核心部门，提供的舞台很大，至于最后选择去哪一家公司，可…"}, {"id": "6895752757534261256", "title": "10 个 GitHub 上超火的前端面试项目，打造自己的加薪宝库！", "desc": "一般人没事的时候刷刷朋友圈、微博、电视剧、知乎，而有些人是没事的时候刷刷 GitHub ，看看最近有哪些流行的项目。 久而久之，这差距就越来越大，因此总会有开源信息的不对称，有哪些优秀的前端开源项目值得学习的也不知道。 初步前端与高级前端之间，最大的差距可能就是信息差造成的。 …"}, {"id": "7002793260636700680", "title": "面试题-渲染一万条数据", "desc": "最近一直听到一道面试题，即：后端返回10000条数据，前端怎么渲染到页面上？ 首先想到的应该是分批处理，比如每次处理10条或者20条，然后处理的逻辑放到setTimeout里面，这样不会阻塞主逻辑和页"}, {"id": "6921890174842454023", "title": "📝 如何写「前端简历」，能敲开字节跳动的大门？", "desc": "本文由字节跳动-基础工程-APM团队合作编写，我们负责开发字节跳动的性能监控平台，还需要很多（10 个以上）优秀的同学来一起共建。 今年我们组打算建立一个字节跳动招聘社群，如果你对加入字节跳动感兴趣的话，我们可以一起进行面试相关的答疑、评估简历、聊聊面试的故事、并且在你准备好的…"}, {"id": "6989031479753834504", "title": "【算法面试】leetcode最常见的150道前端面试题 --- 简单题下（44题）", "desc": "本文题目选自 LeetCode 精选 TOP 面试题，这些题在自己和同事亲身经历中，确实遇到的几率在百分之80%以上（成都和北京的前端岗位）。 上版本部分请参考# 简单题上 二叉树（DFS） 二叉树前"}, {"id": "6844903673009553416", "title": "2018前端面试总结，看完弄懂，工资少说加3K | 掘金技术征文", "desc": "文章涉及的内容可能不全面，但量很多，需要慢慢看。来源于各个地方，我花了很长的时间整理，希望对大家有帮助。但是难免会有打字的错误或理解的错误，希望发现的可以邮箱告诉我236490794@qq.com，我会及时的进行修改，旨在能帮到大家，谢谢。 意义：根据内容的结构化（内容语义化）…"}, {"id": "7002591164968730638", "title": "『面试的底气』—— 设计模式之迭代器模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7005490758920716319", "title": "call apply bind 的差别与使用", "desc": "call apply bind 的差别与使用。 主要讲解 call apply bind 在日常的场景的使用方法"}, {"id": "6982179919597928485", "title": "「百毒不侵(七)」面试官最喜欢问的6种清除浮动和BFC", "desc": "前言 大家好，我是林三心，清除浮动算是面试中CSS问的最多的一题了，当面试官问你请你说说如何清除浮动时，他肯定不是想让你单纯地答出浮动的清除方法，而是想让你顺带答出BFC，就算他不想让你答出，你也要自"}, {"id": "6844904093425598471", "title": "在阿里我是如何当面试官的", "desc": "由于疫情关系，最近在掘金看到很多同学的工作情况内心还是蛮触动的（降薪、变相裁员、辞退等）。可能这并不是当下一个普遍的现象，但仍然使我感受到前端这碗青春饭不好混。于此同时联系我内推的同学很多都处于待业状态，能感受到他们内心的迷茫和焦灼。于是内心一直有声音督促我，赶紧写点面试相关的…"}, {"id": "6999618302418878472", "title": "『面试的底气』—— 设计模式之装饰者模式（二）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903862491414541", "title": "【Step-By-Step】高频面试题深入解析 / 周刊03", "desc": "11. 什么是XSS攻击，XSS攻击可以分为哪几类？我们如何防范XSS攻击？ 1. XSS攻击 XSS(Cross-Site Scripting，跨站脚本攻击)是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 coo…"}, {"id": "6844903949795852295", "title": "聊一聊前端算法面试——动态规划", "desc": "现在竞争越来越激烈，以往前端算法面试只问问排序的日子一去不复返了。现在大厂喜欢问一些进阶性的算法问题，比如今天要聊的面试中经常出现但理解起来有些困难的一种算法思想——「动态规划」。 如下图所示：一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” …"}, {"id": "6955663258359463949", "title": "第 027 期 精选前端核心面试题解答", "desc": "网上的面试题集很多。有些面试题集很零碎，刷完后，也没太大用。有些面试题集数量太大，没有重点，根本刷不完。 本文精选了一些核心的夯实基础的面试题。选面试题时，兼顾了数量和质量。本文具体包含内容 HTML"}, {"id": "6953805402576257031", "title": "二本获得实习阿里 offer 经历-面经篇 | 创作者训练营第二期", "desc": "整理从 3 月初开始投递的职位以及面经。这一篇是纯面经。月亮呀！月亮呀！月亮呀！月亮呀！月亮呀！月亮呀！"}, {"id": "6993745776107061284", "title": "v-if 和 v-for 哪个优先级更高？如果两个同时出现，应该怎么优化得 到更好的性能？", "desc": "看到这道面试题，不知道大有没有给出正确的答案，下面我们来分析一下。 那么我依然建议大家不要仅仅的只是去网上找答案。我们最终目标是自己要从源码中去找到答案，我们要去哪儿找了？ 大家就去这个代码生成的地方"}, {"id": "6892974106908557320", "title": "CSS 文本截断方法总结和原理分析", "desc": "虽然文本截断并不是什么很复杂的东西，但浏览器却没有较完善的原生支持。于是诞生了下面各种妖魔鬼怪的解决方案。每个方案都有各自的优缺点和适用场景，请根据自己的需要选择合适的方案。 white-space: nowrap; white-space 用于指定空白符（white spac…"}, {"id": "6844903583368871943", "title": "React Native面试知识点", "desc": "当调用 setState 时，React会做的第一件事情是将传递给 setState 的对象合并到组件的当前状态。 这将启动一个称为和解（reconciliation）的过程。 和解（reconciliation）的最终目标是以最有效的方式，根据这个新的状态来更新UI。 为此，…"}, {"id": "6969384630646489118", "title": "浏览器输入URL后发生了什么", "desc": "浏览器输入URL后发生什么，在前端的面试中经常会碰到，我想从如下3个方面去分析，缓存+网络+dom解析渲染。"}, {"id": "6844903816672837639", "title": "2019年前端面试题 | CSS篇 （更新于4月15日）", "desc": "虽说刷面试题有走捷径之嫌，但我发现，对于我这样没有工作经历的人来说，其实是拓展自己实战技能和加深知识理解的一个好机会。 分享出来，也希望大家不要背完了事，正经的去细细琢磨各种原由。 本篇是一个题目合集，部分答案我会整理后用自己的话说的尽量简单，部分网络现成的好答案我就直接贴链接…"}, {"id": "6844903873388216327", "title": "【Step-By-Step】高频面试题深入解析 / 周刊05", "desc": "20. 实现 Promise.race 方法 在实现 Promise.race 方法之前，我们首先要知道 Promise.race 的功能和特点，因为在清楚了 Promise.race 功能和特点的情况下，我们才能进一步去写实现。 Promise.race(iterable) …"}, {"id": "6897387574763978759", "title": "jsliang 求职系列 - 20 - 浏览器缓存", "desc": "对于一个数据请求来说：网络请求、后端处理、浏览器响应。 浏览器缓存可以帮助我们优化第一点和第三点的性能。 下面我们一一看看。 Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。 必须是 HTTPS。因为它涉及请求拦截，所以必须使用 HTTPS…"}, {"id": "6905262299557134344", "title": "jsliang 求职系列 - 40 - CSS 移动端", "desc": "关于移动端的一些问题。 em：定义字体大小时以父级的字体大小为基准；定义长度单位时以当前字体大小为基准。 rem：以根元素的字体大小为基准。 %：以父级的宽度为基准。 vw/vh：基于视口的宽度和高度。 使用 rem 单位。可以拷贝淘宝那份代码直接使用，简单来说就是定义 1re…"}, {"id": "6992966856281686047", "title": "前端面试每日 3+1 —— 第842天", "desc": "今天的知识点 (2021.08.05) —— 第842天 (我也要出题) [html] html代码中混合php或者其它后台语言代码，你觉得好维护吗？为什么？ [css] 使用CSS3绘制天狗食月日食"}, {"id": "6844903592344698888", "title": "低门槛彻底理解JavaScript中的深拷贝和浅拷贝", "desc": "按照常规思维，obj1应该和num1一样，不会因为另外一个值的改变而改变，而这里的obj1 却随着obj2的改变而改变了。同样是变量，为什么表现不一样呢？这就要引入JS中基本类型和引用类型的概念了。 打个比方，基本类型和引用类型在赋值上的区别可以按“连锁店”和“单店”来理解：基…"}, {"id": "6844904178112823303", "title": "凉凉 腾讯前端实习 腾讯文档一面", "desc": "今天刚好6月1号就受到社会重锤，生涯一面直接挂www，感觉还是记录一下比较好。本菜鸡是抱着试一试的心态投了一下tx的校招，结果鹅厂真的捞了......（感觉小伙伴可以投一下毕竟我这么菜都被捞了），感觉面试小哥哥也很nice，菜成这样都没喷我0.0听说很喜欢考网络知识和性能优化方…"}, {"id": "6898100089659752461", "title": "jsliang 求职系列 - 22 - 回流和重绘", "desc": "从根节点开始，计算每一个元素的大小、位置，给出每个节点所应该出现的屏幕精确坐标，从而得到基于渲染树的 布局渲染树（Layout of the render tree）。 这个过程面试中非常常见，小伙伴们稍微记一下，后面章节会反复提及。 重绘（repaint）：当元素样式的改变不…"}, {"id": "6999519652170858503", "title": "【手撕前端考试卷】系列 （一）", "desc": "① JavaScript 是如何运行的？解释型语言和编译型语言的差异是什么？ JS代码-> 解析成 AST (先会有词法分析、语法分析) -> 生成字节码（V8）-> 生成机器码（编译器） 很多资料会"}, {"id": "6844904159112593416", "title": "毕业一年妹纸 ~所有面试题目吐血整理！(持续更新)", "desc": "不在使用的对象叫做[无法到达对象]。 从JS对象全局出发，定时扫描内存中对象，凡是可以到达的，保留。无法到达的回收。 constructor方法是类的构造函数的默认方法。通过new生成对象实例时，自动调用该方法。"}, {"id": "6861605642256252936", "title": "🐲【3】Shutdown HTTP系列-Cookie篇", "desc": "之前，有一位大佬和我说过这么一句话：\"网络知识在一定程度上决定了你的上限\"。 这次请给霖呆呆一个机会，跟着我的脚步👣从1开始学习它。另外我整理的HTTP系列基本都会附有一个面试时的浅答与深答的配套答案，浅答是为了让你们更好的记住，深答保证你确实理解了浅答中的知识点。 1. C…"}, {"id": "6844903624418525192", "title": "2018前端面试总结js部分【中】", "desc": "闭包让函数的变量都保存在内存中，内存消耗变大。使用不当会造成内存泄漏。 所以调用add结果都是一样的因此真正到执行代码的时候，也就是第一次调用add(),输出的当然是4,第二次执行add()同样输出4. 于是就这样一直找下去，也就是我们平时所说的原型链的概念。 引用数据类型存储…"}, {"id": "6943188700029255693", "title": "函数式编程是什么？", "desc": "函数式编程（Functional Programming）是一种编程范式（programming paradigm），也就是基于一些原则来编程。面向对象编程（Object Oriented Programming）和过程编程（Procedure Programming）也都是编…"}, {"id": "6922058788157521933", "title": "【每日一题】(19题)面试官问：谈谈JS中的 XMLHttpRequest 对象的理解？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 使用XMLHttpRequest对象要注意一个兼容性问题，XMLHttpRequest对象只支持IE7及以上版本。 可使用onre…"}, {"id": "6844903821781499912", "title": "前端面试必杀技：原型、原型链以及继承（一张图搞定面试）", "desc": "使用[]去操作属性时，[]中传递的是一个字符串。 如果我们对象的属性名过于奇怪，则必须使用[]来操作。 所有函数都有一个特别的属性：prototype显式原型属性（只有函数有prototype，对象是没有的。）； 原型是用于保存对象的共享属性和方法的，原型的属性和方法并不会影响…"}, {"id": "6844903587542368264", "title": "前端面试问题小汇集", "desc": "要有套路。如何引导面试官问你擅长的领域就看自我介绍了。学历专业简述、项目细说、兴趣特长一句带过。 即使没有实际地阅读过源码，也要找别人分享的博客去了解其中的原理。 Vuex 其实是一个针对 Vue 特化的 Flux，主要是为了配合 Vue 本身的响应式机制。当然吸取了一些 Re…"}, {"id": "6925286823170310152", "title": "常见面试题总结（三）", "desc": "动作停止后的时间超过设定的时间时执行一次函数。注意：这里的动作停止表示你停止了触发这个函数，从这个时间点开始计算，当间隔时间等于你设定时间，才会执行里面的回调函数。如果你一直在触发这个函数并且两次触发间隔小于设定时间，则函数一直不会执行。 一定时间内执行的操作只执行一次，也就是…"}, {"id": "6844903633050419207", "title": "Promise详解", "desc": "Promise是我最喜欢的es6语法，也是面试中最容易问到的部分。那么怎么做到在使用中得心应手，在面试中脱颖而出呢？ Promise是一个对象，保存着未来将要结束的事件。她有两个特征，引用阮一峰老师的描述就是： 上面提到Promise和事件的不同，除此之外还有一个重要不同，就是…"}, {"id": "6847902220634046472", "title": "JavaScript中的this指向和易错前端面试题", "desc": "初学者关于this的理解一直很模糊，关于this的面试题更加令人头大。 掌握以下几条分清执行的主体（this）的规律，大多数面试题可迎刃而解。 1. 给元素的某个事件绑定方法，当事件触发方法执行的时候，方法中的this是当前操作的元素（隐式绑定） 2. 方法执行，看方法前面是否…"}, {"id": "6995800552416231431", "title": "面试题日常记录", "desc": "关于前端面试题基础的一些总结希望能够帮上有需要的人，分为了css、html、js三个模块记录，不积跬步无以至千里。"}, {"id": "6889538437783748621", "title": "[核心概念] 一文说透 JS 的作用域（scope）", "desc": "作用域是一套规则，它规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 简单来说，我们在写代码时，就已经把代码分隔成一个个代码块(区域)，在这些代码块中定义许多变量，而作用域就规定哪些代码块能访问哪些变量。 这些变量的访问权限是在你代码写出来就已经确定的了，不能改了，…"}, {"id": "6844904198618759182", "title": "《前端每日一题》之异步（事件循环）", "desc": "小伙计们，我是蛋糕哥...今天是「2020年6月24日」，今天是分享的「第三天」。面试题的解答限时一般是5-10分钟，所以在10分钟之内没弄出来正确答案的小伙就要认真阅读了。一来帮助成长中的小伙伴们成长（大神请忽略），二来算是磨练自己的意志，跟大家一起学习，一起成长...(不要…"}, {"id": "6844903635617316877", "title": "面试高级前端工程师必问之流-stream", "desc": "流（stream）是一种在 Node.js 中处理流式数据的抽象接口。 stream 模块提供了一些基础的 API，用于构建实现了流接口的对象。 Node.js 提供了多种流对象。 例如，发送到 HTTP 服务器的请求和 process.stdout 都是流的实例。 流可以是可…"}, {"id": "6992558225166073869", "title": "2021-8-4 快手面试（一）", "desc": "来自一个菜鸡前端的快手面试经历，尽管问题很简单（毕竟对于我这种菜鸡来说还是很难的），所以想记录一下，顺便分享一下经历"}, {"id": "6844904090393116680", "title": "记最近部分面试记录", "desc": "同层对比如果只是换位置的话， 就会复用。 通过key实现的。 当节点类型相同时候， 会比较属性是否相同。 产生一个属性的补丁包 {type: 'ATTRS', attrs: {class : 'xxx'}} 在组件已经渲染完成中，setState是同步执行的，但是不会立马更新，…"}, {"id": "6844903636082884622", "title": "您需要的前端面试算法(上)", "desc": "阅前说明1、数组遍历2、字符串替换3、链表逆序打印4、重建二叉树5、栈与队列的互相实现6、旋转数组的最小数字7、斐波那契数列8、位运算9、数值的整数次方10、删除链表节点11、调整数组顺序12、链表中"}, {"id": "6844903585814331405", "title": "前端面试题-设计一个弹窗", "desc": "设计一个模态弹窗，讲一下你会怎么设计。 该题目来自某大厂的电话面试。该题目具有开放性，可以考察面试者的项目构思经验与能力，是一个比较不错的题目。 我试着整理一下我的解答，在这里跟大家讨论交流一下。"}, {"id": "6979236643362308104", "title": "十道前端面试题第【01】篇", "desc": "摘要：本篇分享了10道面试题，3个算法题、封装Ajax、封装防抖函数、封装节流函数，数组去重方法、封装深复制方法、Vue生命周期、MVC/MVP/MVVM的对比。 1、封装一个方法，要求把给定的任意的"}, {"id": "6989587400578039839", "title": "2021前端高频题", "desc": "Q1：Vue双向绑定的原理是什么? 知识点：Vue双向绑定的原理是什么? 解答：Vue双向绑定的原理是什么? Q2：input输入框的提交、清空、验证 知识点：Vue-model 知识点：Vue双向绑"}, {"id": "6844904164024123406", "title": "分享下最近面试做的编程题", "desc": "1. 求 dom 树的最大深度 2. 求和函数？ 3. throttle 和 debounce 4. 10进制转2进制 5. 找出页面所有的以s开头的元素，类似<script>、<span> 6. 实现 reduce 7. JSON.stringify 会导致什么问题, 检查循…"}, {"id": "6897838526420844557", "title": "6 题 JavaScript 数组相关编程题", "desc": "这里收集了 6 题在 Github 上看到的 JavaScript 数组相关编程题，其中有几题在大厂面试中遇到了。 题目不多，花几分钟看看就好了，写法也不一定是最好的，大家可以拿这个题目自己写一下。题目列表： 给定一个整数数组，找到从三个整数中产生的最大乘积。 1. 给定一个整…"}, {"id": "6844904127567233038", "title": "务实基础-详细解读HTML&CSS经典面试题", "desc": "平时看别人写的面经，发现 html 和 css 考的不多，但是有一些 html 和 css 知识点经常被问及，堪称为经典面试题都不为过。个人觉得，在准备面试的过程中，如果你时间充足，看比较多的 html 和 css 面试题，这没多大关系，但是假设你时间不充裕，那就得学会适当的取…"}, {"id": "6947136619845517348", "title": "一分钟让你透彻理解EventLoop", "desc": "宏任务(macro)task，可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）。 微任务microtask,可以理解是在当前 task 执行结束后立即执行的任务。也就是说，在当前task任务后，下一个task之前，在渲染之前…"}, {"id": "6850418120780316685", "title": "进大厂连载 12/15：如何拿下钉钉 P7 前端 Offer", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 大家好，我叫假发，来自钉钉前端团队。 先介绍一下花名的由来，看起来可能比较中二，这个名字是我喜欢的一个动漫中的角色。因为 14 年加入阿里的时候，好的花名…"}, {"id": "6976433975950573575", "title": "VUE核心——响应式原理解析", "desc": "Vue 响应式原理，你所需要知道的 首先，各位再熟悉不过的，一定是 Vue 官方提供的这张示意图了 我们以这张图为基础，先帮助大家重新捋一遍响应式的机制。在这个基础上，再去做更进一步的分析。 注意我们"}, {"id": "6844903847463223303", "title": "初级走向中级前端(带答案)", "desc": "是将类 CSS 语言通过 Webpack 编译 转成浏览器可读的真正 CSS。 运行上面代码之后，会发现HTML层都被使用不同的颜色添加了一个高亮的边框。为什么会这样呢？ .forEach 。这是一种简写，完整的写法应该是这样：Array.prototype.forEach.c…"}, {"id": "6939901532619931684", "title": "春招路上的疑惑之你应该避开这些雷", "desc": "金三银四已经到来，各大厂也都开始了招聘抢人。做为长期潜伏在各个内推，求职群中我，偶尔为了可怜的内推金，帮小伙伴们内推一波。遇到有想法的同学，倒是也可以一起聊几句，顺便解决他们的一些小疑惑。 所以，我收集了以下的一些问题。尽量用聊天的方式解答大家的疑惑，更希望可以帮助到大家。 技…"}, {"id": "6926819139478618120", "title": "前端算法面试必刷题系列[1]", "desc": "1. 两数之和 (two-sum) 在给定数组中找到 2 个数之和等于给定值的数字，结果返回 2 个数字在数组中的下标。 返回键对应的值，如果不存在，则返回undefined。 返回一个布尔值，表示Map实例是否包含键对应的值。 设置Map对象中键的值。返回该Map对象。 先建…"}, {"id": "6844903866610221064", "title": "js基本搜索算法实现与170万条数据下的性能测试", "desc": "今天让我们来继续聊一聊js算法，通过接下来的讲解，我们可以了解到搜索算法的基本实现以及各种实现方法的性能，进而发现for循环，forEach，While的性能差异，我们还会了解到如何通过web worker做算法分片，极大的提高算法的性能。 同时我还会简单介绍一下经典的二分算法…"}, {"id": "6844903961812533256", "title": "动画：用动画给面试官解释 TCP 三次握手过程", "desc": "TCP 三次握手过程对于面试是必考的一个，所以不但要掌握 TCP 整个握手的过程，其中有些小细节也更受到面试官的青睐。 对于这部分掌握以及 TCP 的四次挥手，小鹿将会以动画的形式呈现给每个人，这样将复杂的知识简单化，理解起来也容易了很多，尤其对于一个初学者来说。 TCP（Tr…"}, {"id": "6844903645742366727", "title": "前端面试&笔试&错题指南（二）", "desc": "嗯，小白的进击之路，继续来补充了... 1. 数组的神奇变化 数组不是简单数据类型(值类型),会保存在堆中(heap)中，当使用var arr1 = arr2赋值时，只是浅拷贝，拿到了arr2的引用，这样带来的问题就是，修改arr1的时候arr2也会收到影响。 搞清楚以上两点，…"}, {"id": "6844903636787544071", "title": "2018年6月前端面试经历(下)", "desc": "mountComponent 负责管理生命周期中的 getInitialState、componentWillMount、render 和 componentDidMount。 updateComponent 负责管理生命周期中的 componentWillReceivePro…"}, {"id": "6844903929470255111", "title": "聊一聊前端算法面试——链表和数组", "desc": "今天来聊一聊前端面试中非常基础的两种数据结构——「数组」和「链表」。 你可以先思考一下如何回答上边的问题🤔，然后带着答案来阅览接下来的内容。 在聊这个问题之前，先看一下数据从逻辑结构上的分类。主要分为两类：线性表和非线性表。 线性表： 数据连成一条线的结构，今天要聊的链表和数…"}, {"id": "6846687590268010509", "title": "前端备战21秋招之计算机网络，我觉得这一篇应该就够了", "desc": "一不留神，各种秋招提前批都开始了，被迫开始复习了，哎，一言难尽。。。白菜都快gong不到了 起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后便进入 LISTEN 状态，此时开始等待客户端发送数据 服务端收到请求后,通知应用层要释…"}, {"id": "6850037259350376461", "title": "「前端进阶」面试链表不再怕", "desc": "数据结构与算法系列专栏文章如下，还没品尝过的同学请移步。 数组想必大家都很熟悉，几乎我们每天都会操作它。那么我们就来对比数组来学习链表，首先要明确的是，链表和数组的底层存储结构不同，数组要求存储在一块连续的内存中，而链表是通过指针将一组零散的内存块串联起来。可见链表对内存的要求…"}, {"id": "6844904116699807757", "title": "这有一份网络相关的消息，请查收", "desc": "疫情虽然没有结束，不过学习始终是不能停的。这次的内容主要以网络为主，也是依据正常面试中常被问及的话题进行了梳理"}, {"id": "6996257854663426056", "title": "修饰符.sync(面试重点)", "desc": "首先：对比v-model掌握.sync的使用 .sync作用 实现父子组件数据之间的双向绑定，与v-model类似。 类别在于：一个组件上只能有一个v-model，.sync修饰符可以有多个。 原理 "}, {"id": "6858139075807805453", "title": "「每周前端面试题专栏」- 滴水之功，开拓大厂之路（第五周）", "desc": "本周有位群友说我不应该为了面试而背题，我很认同他的说法，这里想表达下我建立这个专栏的初衷吧。 大家也能发现，我这里主要是收集或修改网络上的回答，是因为我真的觉得这些回答很好，这也引出第二点：看看别人是怎么表述这个观点的。 当然，以上只是我个人观点。 值新的一岁之际，希望自己可以…"}, {"id": "6953392185123274788", "title": "从一道面试题开始:浏览器从输入URL到渲染页面的过程", "desc": "简单的流程介绍 浏览器从输入一个url到页面展示。从浏览器的进程讲起，一直到渲染页面的整个过程。渲染进程会在下期再讲。"}, {"id": "6922451520155811847", "title": "前端实习生-字节面试面经一面", "desc": "这次字节的一面还是比较简单的，和一般公司的一面差不太多，基本大家只要多复习复习JS的基础和ES6，其实都差不多能够答出来。接下来记下具体这次的面试和流程，希望能对XDM有所帮助 首先是面试官让你自我介绍，介绍完之后开始问CSS方面的知识，这部分问的少，居中对齐有哪几个方案，po…"}, {"id": "6844904029613457415", "title": "经典大厂前端面试题（含解析）函数篇(二)", "desc": "金三银四就要到了。整理整理面试题。 MDN的定义：函数与对其状态即词法环境的引用共同构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域 在JavaScript，函数在每次创建时生成闭包。waht????（MDN说的...） 根据 JS 的垃圾回收机制…"}, {"id": "6881513523826917390", "title": "【面试篇】2020面试官问ES6你知道怎么回答吗？不知道的话值得一点", "desc": "在面试的时候，ES6几乎已成必问问题，对ES6还摸棱两可的小伙伴们看完这篇文章将不再迷茫，建议收藏。"}, {"id": "6965871302327336967", "title": "前端百题斩【009】——函数执行过程", "desc": "前端百题斩【8】中阐述了JavaScript代码的执行过程，但是并没有具体阐述一个函数的执行过程，对于函数执行过程如下所示：（注意：具体的内容本文将不会展开，只会全面讲述一下）"}, {"id": "6844904117819850765", "title": "【面试题】CSS知识点整理(附答案)", "desc": "1. 伪类和伪元素 css引入伪类和伪元素概念是为了格式化文档树以外的信息。\b伪类和伪元素是用来修饰不在文档树中的部分。 伪类 用于当元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，用户悬停在指定的元素时，我们可以通:hover来描述这个元素…"}, {"id": "6898815786245652493", "title": "jsliang 求职系列 - 24 - 浏览器系列汇总", "desc": "参考文献共 68 篇文章，感谢前辈们的贡献。"}, {"id": "6896251515594342407", "title": "jsliang 求职系列 - 17 - 跨域", "desc": "所谓 源，可以指 URL。 而所谓的同源策略，是指这 3 个（协议、域名、端口）一致的情况下，才属于同源。 首先，跨域只存在于浏览器端，因为我们知道浏览器的形态是很开放的，所以我们需要对它有所限制。 其次，同源策略主要是为了保证用户信息的安全，可分为两种：Ajax 同源策略和 …"}, {"id": "6916818167205625863", "title": "（建议精读）一文夯实你的网络基础", "desc": "关于应用层，最常见的面试莫过于HTTP、DNS两大块。 001. 报文结构 请求行： 方法（具体请查看下方的请求方法） + 路径 + http版本。 状态行： 由http版本、状态码和原因三部分组成。 请求头和响应头、请求内容和响应内容这两个数据对书写形式上都是保持一致的，内容…"}, {"id": "6901438933826502670", "title": "jsliang 求职系列 - 30 - 计算机网络系列汇总", "desc": "jsliang 自己整理，用来复习计算机网络系列的文章和知识点。 本系列整理了 5 篇文章。 本系列有 62 篇参考文献。"}, {"id": "6844903813569052679", "title": "面试官：react和vue有什么区别吗？", "desc": "三大框架之二，大家应该都不会陌生，都有学习过或者开发中使用。 但是他们到底有啥区别呢？这个就是我们这篇文章所需探讨并学习的。 首先说下MVC，大家肯定也知道三大框架中的另外一个（anuglar）。 input标签很好理解，就是MVC中的V（view）视图。 controller…"}, {"id": "6996271724933316622", "title": "我的面试经历从重重打击到收到offer", "desc": "7月底，我离开了郑州，到了我一直想去的城市——上海，满怀信心的去了，但是我发现这个我想象中的有点不一样，郑州一碗热干面也就最多九块，在这里一下子给我干到十六，水都要喝不起了，我就下定决心这月一定要找到"}, {"id": "6906262923048386567", "title": "jsliang 求职系列 - 43 - CSS 系列汇总", "desc": "复习知识点有 3 个部分。 [x] 脱离文档流：脱离文档流的元素，将不再在文档流占据空间，而是漂浮在文档流上方。float: left/right 以及 position: absolute/fixed [x] 标准盒子：标准盒子的 contentWidth 等于设置的 wid…"}, {"id": "6995201974526279694", "title": "为什么要使用Symbol", "desc": "Symbol：保证每一个属性名都是独一无二的，从根本上防止属性名的冲突。 symbol表示独一无二的值，是JavaScript的第七种数据类型。"}, {"id": "6844904085989097480", "title": "2020 校招，我是如何拿到小米、京东、字节大厂前端offer", "desc": "回想起来，当初掉入前端这个坑，是因为参加了大一开设的选修课：《小型网站的建设与维护》。 第一节课，讲课老师新建了一个 txt 文本，写入几行代码，然后修改后缀名为 html，一个网页就被这样被创建了，还可以自定义样式，作为小白的我，第一次感觉代码这么有吸引力，才知道这个叫做 前…"}, {"id": "6994012537230458894", "title": "【经典面试题】用原型链的方式实现一个 JS 继承", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 这是一道非常经典的面试题。最近面试的时候被问到了，因为很久没复习，而且在工作中也很少会实现这种东西，结果支支吾吾了半天没有回答出来，心情非常"}, {"id": "6844904202402005000", "title": "服务器端如何获得客户端 IP 地址", "desc": "如果有 x-forwarded-for 的请求头，则取其中的第一个 IP，否则取建立连接 socket 的 remoteAddr。"}, {"id": "6989817280720797710", "title": "经典面试题之for 循环和闭包", "desc": "前言 最近又温故而知新了一遍JavaScript的闭包，前面几年懵懵懂懂看了很多篇文章，今天再看还是受益匪浅，从而也搞懂了一道经典面试题，这个面试题之前也迟迟不理解，直到今天才豁然开朗。接下来就来逐步"}, {"id": "6844903858645237767", "title": "【Step-By-Step】高频面试题深入解析 / 周刊02", "desc": "6. 节流(throttle)函数的作用是什么？有哪些应用场景，请实现一个节流函数。(2019-05-27) 节流函数的作用是规定一个单位时间，在这个单位时间内最多只能触发一次函数执行，如果这个单位时间内多次触发函数，只能有一次生效。 举例说明：小明的妈妈和小明约定好，如果小明…"}, {"id": "6892937534129569799", "title": "jsliang 求职系列 - 08 - 手写 Promise", "desc": "在计算机行业，盛行着一种朴素还原论的迷思：即认为越接近底层，技术含量越高。 每个程序员都有读懂底层源代码的追求。 这在一定程度上是正确的。 不过，我们也应该看到，一旦底层和表层之间，形成了领域鸿沟。 精通底层，并不能代表在表层的水平。 比如游戏的开发者，不一定是游戏中的佼佼者。…"}, {"id": "6844903624066203661", "title": "鹅厂视频部笔试及面试问题整理", "desc": "最近有小伙伴在群上和后台私信我说想要点面经，今天给大家整理了一下真实面试问题。 至于笔试题，直接在公众号后台回复「腾讯视频笔试题」即可，整理压缩成图片了。 还有想要系统性学习 JavaScript 的童鞋，直接在公众号后台回复「js学习路线」，也整理成图片方便大家保存阅读了。 …"}, {"id": "6963898816558809118", "title": "腾讯一二面——以为挂的过了，以为过的挂了", "desc": "手写算法：有两种上楼梯的方式，一种是一次上一级，一种是一次上二级。如果告诉你一个楼梯共有多少级，请问你有多少种不同的上楼的方式？"}, {"id": "6844904046021574669", "title": "你应该知道的前端面试题（万字总结）", "desc": "自己整理出来的一些前端工程师必备的面试题，面试中出场率很高，相信小伙伴在找工作或者跳槽中能够顺利找到自己想要的工作。 DOCTYPE的作用是告诉浏览器使用哪种版本的HTML规范来渲染文档。当DOCTYPE不存在或者形式不正确时会导致HTML文档以混杂模式解析文档。标准模式以浏览…"}, {"id": "6850037270754361352", "title": "一道腾讯的面试题：如何避免 CDN 为 PC 端缓存移动端页面", "desc": "如果 PC 端和移动端是一套代码则不会出现这个问题。「这个问题出现在 PC 端和移动端是两套代码，却共用一个域名。」 解决方案通常使用 Vary 响应头，来控制 CDN 对不同请求头的缓存。 当然，User-Agent 实在过多，此时缓存失效就会过多。 使用 Vary: Use…"}, {"id": "6997362282984554527", "title": "面试题：如何开发一个进度条组件（暗藏杀机！！！）", "desc": "起因 之前看了一个问题（如何实现一个进度条），也看了其他人的文章，觉得还有很多的坑没有讲到，如果读者根据作者的文章去实现，可能会导致更大的问题。下面就说一下思路，大家看下自己在哪一层！ 第一层 我们最"}, {"id": "6995428262155386887", "title": "js中的回调函数 | 面试必问", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 js中存在一种情景，就是异步操作，假如有事件a，事件b，事件c三个事件，执行顺序必须是a，b，c，那么我们就要在分别写三个函数来执行"}, {"id": "6999461719172972551", "title": "【面试必问】JavaScript的继承方式", "desc": "面向对象语言的三大特征为 继承、封装、多态，如何让 JavaScript 语言实现继承也是面试中的高频面试题。"}, {"id": "6996552759549886494", "title": "前端面试必问——四种布局", "desc": "前言 这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战” 自我总结，仅供参考，求点赞，谢谢！ 面试常问的四种布局：两栏布局、三栏布局、圣杯布局、双飞翼布局。 两栏布局 一侧固定，一侧自适应 "}, {"id": "6995941452006031396", "title": "【复盘plan(五)】你不知道的vue", "desc": "看目录可能你会觉得很熟悉，但其中有没有你不知道的，看下去自然会有答案👇👇👇 本文目前只更新了`生命周期函数`、`组件间的通信`知识，还有更多你不知道的vue知识，欢迎持续关注，一起进步！！！"}, {"id": "6844903734791634952", "title": "前端面试汇总", "desc": "怎么办？好好准备呗。"}, {"id": "6999588657992564749", "title": "前端面试之代码输出结果(一)", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战。 解构赋值 说明 先来说一下Object.create： 也就是说Object.create({ a: 1 })返回一个新对象，带着指定的"}, {"id": "6844903695910436872", "title": "[译] 以面试官的角度来看 React 工作面试", "desc": "我的部分工作职责是执行所谓的“技术面试”，在面试时我会评估申请“React 前端开发”职位的潜在候选人。 如果你曾经用谷歌搜索“React 面试问题”（或任何其他“[技术]面试问题”），你可能已经看过无数“十大 React 面试问题”，这些问题要么已经过时，要么和“state …"}, {"id": "6944678133094154270", "title": "2021春招 阿里淘系、腾讯AlloyTeam文档面经", "desc": "首先作为一个懒人，基本模仿三元大神的面经分享，由于技术水平和经历的不同（豪横），我不敢保证我的面经问题对你有任何的参考性，由于淘系一面二面已经有点久，我也无法保证这部分的完整性（手动狗头）。 从二月初就在脉脉上联系到一位淘系技术部的前辈，开始前期的面试，一直到3月的下旬进行了技…"}, {"id": "6844903693507117063", "title": "JS中的数组过滤，从简单筛选到多条件筛选", "desc": "在上家公司工作的时候，有一个需求是在前端部分完成筛选功能，一次拿到所有数据，然后根据条件筛选。通常情况下筛选是后台给接口，在数据量不大的情况下，也有人可能会遇到前端筛选这样的情况，特别写了这篇文章分享给大家，有问题请指出，互相学习。 一般情况下的单条件筛选，数组的filter方…"}, {"id": "6999463151112552484", "title": "前端面试系列五：浏览器及计算机基础", "desc": "JavaScript 之所以为单线程跟其用途有关，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript"}, {"id": "6844903746984476686", "title": "面试官问：JS的this指向", "desc": "面试官出很多考题，基本都会变着方式来考察this指向，看候选人对JS基础知识是否扎实。 读者可以先拉到底部看总结，再谷歌（或各技术平台）搜索几篇类似文章，看笔者写的文章和别人有什么不同（欢迎在评论区评论不同之处），对比来看，验证与自己现有知识是否有盲点，多看几篇，自然就会完善自…"}, {"id": "6974419506059804685", "title": "「译」React 面试必知必会 Day10", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6844904138208182285", "title": "「源码级回答」大厂高频Vue面试题（上）", "desc": "最近一直在读Vue源码，也写了一系列的源码探秘文章。 但，收到很多朋友的反馈都是：源码晦涩难懂，时常看着看着就不知道我在看什么了，感觉缺乏一点动力，如果你可以出点面试中会问到的源码相关的面试题，通过面试题去看源码，那就很棒棒。 我通过三篇文章整理了大厂面试中会经常问到的一些Vu…"}, {"id": "7002982431523340302", "title": "浅谈前端安全——XSS CSRF", "desc": "XSS 攻击（跨站脚本攻击） 一种代码注入方式，为了与 CSS 区分所以被称为 XSS。早期常见于网络论坛."}, {"id": "6901807555316547597", "title": "jsliang 求职系列 - 31 - Webpack", "desc": "都 2020 了，不会点 Webpack 好像有点说不过去。 但是事实上如果不是分配到【架构组】之类的团体中，感觉接触 Webpack 的概率会少点吧。 Webpack 是一个现代 JavaScript 应用程序的静态模块打包器（module bundler）。 当 Webpa…"}, {"id": "6959539483150663716", "title": "【1.5w字】前端面试必问的浏览器渲染，建议精读收藏", "desc": "常用浏览器内核 IE tridentt内核 Chrome blinkt内核（基于webkit，谷歌与Opera software共同开发） Firefox geckot内核 Safari webkit"}, {"id": "6900698650616266765", "title": "朝花夕拾 - 寒冬记（8月-12月前端的艰苦生存）", "desc": "小伙伴们看到这个标题，可能觉得很新奇，于是就问 jsliang 发生了什么。 jsliang 想了想，还是决定跟小伙伴们吐槽吐槽。 就是前些日子我还是离职中，那是骄阳的 8 月。 忽然岁月给了我两拳，面试官吊打了几轮，我就入职一周多，还到了寒冬的 12 月。 我说岁月你不讲武德…"}, {"id": "6974791788632473607", "title": "React 面试必知必会 Day11", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "6844903854107000839", "title": "中高级前端开发高频面试题", "desc": "代码比较简单，我们只是在setTimeout的方法里面又调用了一次setTimeout，就可以达到间歇调用的目的。 区别在于，setInterval间歇调用，是在前一个方法执行前，就开始计时，比如间歇时间是500ms，那么不管那时候前一个方法是否已经执行完毕，都会把后一个方法放…"}, {"id": "6972751722410147854", "title": "两个部门，六轮面试，终与字节无缘", "desc": "这个面试机会来的挺意外的，先在 Boss 投递的简历，后再牛客网看到了内推人的微信，加了微信问了下进度，挂了，内推人给我打电话根据简历简单询问了一下情况(内推人很谦逊，毕业于一所 211 大学，和我说"}, {"id": "6844903878362660878", "title": "让你瞬间提高工作效率的常用js函数汇总(持续更新)", "desc": "后期会继续总结更多工作中遇到的经典函数，也作为自己在工作中的一点总结。我们当然也可以直接使用lodash或ramda这些比较流行的函数式工具库，在这里仅做学习参考使用。"}, {"id": "7002950745381142558", "title": "前端实习面试准备--JS执行上下文/作用域链/闭包", "desc": "1.作用域 作用域：提前约定好一套存储变量，访问变量的规则 1.1 编译原理 词法分析：将源代码拆成最小的，不可再分的词法单元（token） 语法分析：将token数据根据语法规则转为AST,如果有错"}, {"id": "6995193185534377992", "title": "【复盘plan(三)】Promise问的都在这了🧐", "desc": "本文将成为promise这个大关卡的通关秘籍。目前，只是分享一些关于promise的总结和手写promise。后续将通过更多的面试题来"}, {"id": "7000754813801775111", "title": "JavaScript 数据类型之 Symbol、BigInt", "desc": "在JavaScript中，我们已知有5种基本数据类型：`String`、`Number`、`Boolean`、`Undefined`、`Null`。"}, {"id": "6953430377520168990", "title": "面试准备：以接化发来迎接一套\"五连题\"的偷袭（上篇）", "desc": "1. 引言 很多企业的春招马上结束了，2022届毕业的同学如果想在秋招冲击更好的就业， 简历上写实习经验的话，要抓住这个机会。最近身边同学陆续接到面试，但本人水平有限，很是矛盾。但总是要面对。所以先来"}, {"id": "6970291738652966942", "title": "Cookie、localStorage和sessionStorage的区别？🔥", "desc": "Cookie 介绍 由于 HTTP 是无状态的协议，不能保存每一次请求的状态，所以需要给客户端增加 Cookie 来保存客 户端的状态。 Cookie 的作用主要用于 用户识别 和 状态管理 。（比如"}, {"id": "6988423658683236383", "title": "面试官：请说下CSS选择器优先级", "desc": "什么是CSS选择器优先级？ 通过权重来计算CSS选择器的优先级 1. !important的优先级是最高的。（没有这个属性的话，则按照下面的向量来计算优先级） 2. 权重相同，看谁的定义靠后，越靠后就"}, {"id": "6999274455675437064", "title": "Ttypescript 与 Javascript 的区别", "desc": "TypeScript是ECMAScript 2015的语法超集，是JavaScript的语法糖。而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。"}, {"id": "6844903795277692936", "title": "【面试总结】记一次失败的 bilibili 面试总结(1)", "desc": "前几日去B站面试了一次前端，不算资深B站用户，平常也蛮喜欢在B站观看视频的，能获得这样的面试机会，实在是受宠若惊。但无奈实力有限加上琐事缠身，并没有做好充足的准备，导致面试失败。 这次面试过程我思前想后觉得有必要总结一下，希望自己下次再有这样的机会的时候能够把握的更好。 ps：…"}, {"id": "6913022820691738631", "title": "前端面试指南之JS面试题总结", "desc": "1. JS 有哪些数据类型？ 根据 JavaScript 中的变量类型传递方式，分为基本数据类型和引用数据类型两大类七种。 基本数据类型包括Undefined、Null、Boolean、Number、String、Symbol (ES6新增)六种。 引用数据类型只有Object…"}, {"id": "6904412477547773959", "title": "jsliang 求职系列 - 38 - React 系列总结", "desc": "React 是现如今流行的前端框架，也是很多大厂面试必备。 React 与 Vue 虽有不同，但同样作为一款 MV* 框架，虽然实现可能不一样，但在一些理念上还是有相似的，例如数据驱动、组件化、虚拟 DOM 等。 这些往往要更深入挖掘方可得知自己的结论，任重道远，不停歇。 通过…"}, {"id": "6844904153911689230", "title": "一位前端小姐姐的进阶笔记(一)", "desc": "小姐姐依然在看机会哟。base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。 首先，这三个方法是用来改变 this 指向的，接下来我们看一下它们的异同。 1. apply 调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arg…"}, {"id": "7001847578098663454", "title": "每日一道面试题", "desc": "第一题 解析 首先，我们在全局定义了一个变量length、一个对象obj 和一个函数 fn，length赋值为10. 接下来fn函数，输出this.length.对象 对象obj中，obj.lengt"}, {"id": "6974364635759804424", "title": "🔥什么是XSS攻击？怎么来防范？", "desc": "什么是 XSS 攻击？ XSS 全称是 Cross Site Scripting(即跨站脚本)，为了和 CSS 区分，故叫它XSS。XSS 攻击是指浏览器中执行恶意脚本(无论是跨域还是同域)，从而拿到"}, {"id": "6992419154535907365", "title": "Vue集合面试题（进阶）", "desc": "Vue 1.vue.js的两个核心是什么？ 数据驱动和组件化。 2.vue 的双向绑定的原理是什么？ vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。具体实现过程：我们已经知道实"}, {"id": "6995374862256570375", "title": "前端基础 -- HTTP 状态码", "desc": "HTTP 状态码是我们开发过程中需要掌握的基础知识之一，也是面试时的高频问题，本文将为大家讲解各种 HTTP 状态码的含义。"}, {"id": "6844903967843942413", "title": "“寒冬”三年经验前端面试总结（含头条、百度、饿了么、滴滴等）之CSS篇", "desc": "不论是寒冬还是暖冬，找工作之前都需要做好充足的准备，面试的时候才能做到游刃有余。此文是把我最近找工作准备的以及笔试面试中涉及到的手写题做一个总结。给自己，也给需要的同学。 CSS是前端必须要掌握的技能之一。一般面试也都会从CSS开始。所以CSS问题答的好坏会直接影响你在面试官心…"}, {"id": "6844903796091387917", "title": "【面试总结】记一次失败的 bilibili 面试总结(2)", "desc": "废话不多说，直接上题。 这个数组结构比较深，这应该是整个题目的考点所在。看这个样子应该是需要用递归，不！应该还有更好的方法，🤔那就使用ES 2019 的 Array.prototype.flat 函数吧！然后被面试官一票否决。在涂涂改改和思考的时间中，面试官问了我的思路结束了…"}, {"id": "7000715312156901406", "title": "前端面试每日 3+1 —— 第863天", "desc": "今天的知识点 (2021.08.26) —— 第863天 (我也要出题) [html] html5中的meta标签scheme有什么作用？ [css] 使用css实现一个曲线路径动画 [js] 如何用"}, {"id": "6916785583021490184", "title": "【Daily Interview】- 21 解数独", "desc": "对数独规则不太清楚的读者可以看看这里：数独。 接下来就是细节上的实现：如何判断当前格子是否能填入对应数字。 前二者比较简单，只需固定死 row 和 col 即可，而第三个，我们则需要首先找到当前遍历到的格子属于哪一块九宫格。 可以看到，9 个九宫格将整个 9 x 9 的棋盘分成…"}, {"id": "6844904117249261576", "title": "[ 面试系列 ] - 四：两种盒模型分别说一下", "desc": "要说两种盒模型，那自然要先说一下，什么是 CSS 的盒模型。 事实上，所有HTML元素可以看作盒子。在 CSS 中，box model 这一术语是用来设计和布局时使用。 你以为到这里就完了吗？不不不，接下来才是问题的开始，面试官不会问些不痛不痒的问题，又不能考察水平，又浪费时间…"}, {"id": "6936575075432792094", "title": "手写instanceof、深拷贝、new、apply、bind、softBind、JSON.Stringify", "desc": "为什么需要softBind，让我们一同来看一个例子。 我们可以看到bind之后，无法通过call来再次改变this的指向。我们想要输出c的value，但是却依旧输出的是b的value。为了解决以上问题"}, {"id": "6844904046109687815", "title": "为什么['1', '7', '11'].map(parseInt)的返回值是[1, NaN, 3]？", "desc": "相信很多人会对上面的执行结果感到疑惑，不要着急，相信看完这篇文章后，你会对javascript的运行机制又有更进一步的理解。 上述代码会输出Condition is truthy。 那么对象的值为 false。否则，其值为 true(包括：“false”, \"0\", {} 和 …"}, {"id": "6902323962395656205", "title": "20下半年高频题目之webpack", "desc": "按照之前的专科前端生存之路 中所写的知识点。此篇是我近2个月遇到的webpack的题目。 看其他的人写webpack的面试题写的就差不多是把文档抄了一遍。作为学习资料还行，真正面试中面试官不会问出API如何使用等类似问题。此类问题最没有价值。 在面的这六七家公司中，关于webp…"}, {"id": "6924635303613300749", "title": "【每日一题】(21题)面试官问：谈谈JS中的 this 的绑定？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 当使用new关键字调用函数时，执行[[Construct]]函数，负责创建一个实例，然后执行函数体，将this绑定到实例上；此时n…"}, {"id": "6912069328858775560", "title": "「前端面试」如何用20行代码实现一个Promise？", "desc": "1.执行第一个p.then()方法时，开始创建promise2，同时在promise2中执行的this.successList.push()会把成功回调函数successFn放到promise1的successList中待执行，所以下面console.log(\"成功1\", re…"}, {"id": "6963526566156435469", "title": "原型编程范式与面向对象、真题解析", "desc": "理解原型编程范式 很多小伙伴读到这儿还会有些迷惑：使用 JavaScript 以来，我确实离不开原型，按照上面的说法，也算是一直在应用原型编程范式了。但这个范式用得我一脸懵逼啊 —— 难道我还有除了原"}, {"id": "6904263629529415687", "title": "5道BAT大厂面试题，助你夯实js基础", "desc": "最近看到了一篇大厂面试题集锦，在这里摘出来一些比较有意思的面试题跟大家分享，通过这些试题的分析，加深大家对js的理解，夯实基础知识。 对push的理解，push是根据length来决定从哪里开始插入给定的值。 可以看到因为length为2，所以push是从下标为2的地方开始插入…"}, {"id": "6844903972415750157", "title": "React的6种通信方式(附带例子)", "desc": "模模糊糊又到了一年之春，万物复苏，动物开始**的季节了🤣；一想到那么好的季节，不跳槽还能干嘛？然后本渣就走上了一条不归路。🤐 然后露出了一个邪恶的笑容，接着说了一句。 其实此时... 然后我接过他的某米电脑。 注意⚠️：这种通信记住在顶部引入events模块，无需安装，no…"}, {"id": "6844903811316711437", "title": "面试官：你知道Callback Hell（回调地狱）吗？", "desc": "这个是作者写的面试篇章系列第一章，基本源于作者之前一个月内的面试总结，谢谢观看。 上面的代码，大家都常常看到，包括ajax、各种模块的方法等等，他们都是回调函数。 所以就会写成三四个回调函数嵌套。 代码耦合，一旦修改，原地爆炸。 无法使用try catch，就无法排错，也是原地…"}, {"id": "6844903856443392014", "title": "web安全：什么是 XSS 和 CSRF", "desc": "在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。本文将会简单介绍 XSS 和 CSRF 的攻防问题。 XSS 攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击…"}, {"id": "6933498872056528909", "title": "怎样用markdown写一份漂亮的简历?", "desc": "又到了金三银四，怎样排版自己的简历让面试官眼前一亮呢？效果如下一、首先将你的简历转成markdown格式的推荐快速生成工具：MarkDown简历模板二、打开掘金的markdown在线编辑器将你写好的m"}, {"id": "6844904101885542413", "title": "🔥【面经】前端面试题之HTML篇", "desc": "html浏览器缓存？cache-control？Html离线存储？svg和canvas的区别？src和href的区别？前端有哪三层构成，分别是什么？什么是标签语义？有什么作用？常见的浏览器内核有哪些？"}, {"id": "6860088295905296397", "title": "「浏览器渲染流程」中的 9 个面试点", "desc": "我希望写一篇文章把关于渲染流程的常见面试题串起来，让大家和面试官有的聊。 我们先简单看看浏览器的总体架构。 记得 08 年以前，打开网页的时候一个页面卡死整个浏览器凉凉。 这是因为当时浏览器是单进程架构，一个页面或者插件卡死，整个浏览器都会崩溃，非常影响用户体验。 1个浏览器主…"}, {"id": "6992920090446397476", "title": "前端性能优化之防抖节流对比及应用场景", "desc": "当事件过程不重要的时候，只需要关注最后一步操作改变时，使用防抖，比如地图缩放导致中心点改变、关键词联想、表单校验等。当过程需要在视觉上体现时选择使用节流。"}, {"id": "6881381132886081543", "title": "JavaScript 正则表达式入门指南", "desc": "JavaScript 正则表达式方面的文章只需阅读《JavaScript 正则表达式迷你书》即可。本文大部分内容都是该书的读后整理，因此您可以直接阅读该书。作者之所以打算写此文章主要原因是总结总结让自己在平时开发中可以快速查阅。 正则表达式 ( Regular Expressi…"}, {"id": "6944966016317259783", "title": "计算机网络知识总结（三）", "desc": "本章节主要是对开发面试中经典的面试问题进行总结分析。 TCP面向连接，UDP面向非连接即发送数据前不需要建立连接。 TCP提供可靠的服务，UDP无法保证。 TCP面向字节流，UDP面向报文。 TCP数据传输慢，UDP数据传输快。 TCP传输不限制大小，UDP单次传输报文有限制（…"}, {"id": "6844903935308726280", "title": "一个面试题小总结", "desc": "在群里看到一个据说是阿里校招的面试题的图片，不得不感慨阿里的面试问的内容之广，前端，算法，数据结构，数学知识，网络，服务器等都有包含到。大量的题目都是自己的知识盲区或者答不全，所以花了两个星期对除了后端语言和mySql的题都做了一遍，收获不少，记录于此。 1.字体系列属性：fo…"}, {"id": "6844903701027487757", "title": "『前端干货篇』: 你不知道的Event Loop", "desc": "一星期的满课，身心疲惫(×_×)...周末闲下来，仔细研究了下JS的事件轮询机制，看了看阮一峰大大的相关文章，真的收货挺多。 可能新手会犯错，认为定时器设置0毫秒就等于立即就执行，所以先输出111。但其实内部涉及一个很重要的JS运行机制，也就是我们今天的主角——事件轮询（Eve…"}, {"id": "6968475031382802462", "title": "你不知道的undefined", "desc": "最近一个朋友在找工作，经常在面试中被问到对undefined的理解，虽然回答上来了但是不全面，仔细想想我们自己可能有时候也会忽视这些很基础的细节问题，所以今天对undefined进行一个详细的总结 1"}, {"id": "6917073116984737799", "title": "【Daily Interview】- 22 删除排序数组中的重复项", "desc": "光看题目是非常简单的，但这里有一个限制条件，就是必须在原地修改数组，并且只能使用 O1 的额外空间。 其实前面也遇到过类似的限制，比如环形链表，当时我们的解决方案是快慢指针：事实上，在限制额外空间为 O1 的时候，通常都能使用快慢指针的方式来解决问题，这道题目的目的其实也就是帮…"}, {"id": "6971263132702343175", "title": "前端面试之HTML篇", "desc": "HTML5 有哪些新特性？ 回答： （1）html4规定了三种声明方式，分别是：严格模式、过渡模式和框架集模式；而html5因为不是SGML的子集，只需要<!DOCTYPE>就可以了; （2）语义化更"}, {"id": "6844903590482411533", "title": "前端面经 | 腾讯实习生校招面试心路历程", "desc": "4月5日参加的腾讯的前端实习生的笔试，当时因为其他的事情，导致准备不充分，做得不是很好，所以做完笔试感觉已经凉了。加之后面学院科创室办比赛的事情以及个人评选十佳优秀团员的事情，就忙得已经淡淡忘了这件事了，也就没有去准备面试了。 4月10日，这两天一直在忙着整理十佳团员的资料，写…"}, {"id": "6900565842866487309", "title": "Js 进阶 [this，高阶函数闭包，深拷贝，浅拷贝，原型，原型链，继承，事件循环EventLoop，防抖，节流，柯里化]", "desc": "JavaScript 有全局作用域、函数作用域和块级作用域（ES6新增）。 如果上一层也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就只能说 game over。这种一层一层的关系，就是 作用域链 JavaScript单线程，所有的代码都是自上而下执行。 浏览器执行…"}, {"id": "6847902217190506509", "title": "【面试系列】JS实现继承的几种方式", "desc": "许多面向对象语言都支持两种继承方式：接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。 由于函数没有签名，在ECMAScript中无法实现接口继承，只支持实现继承，而且实现继承主要是依靠原型链来实现的。 原型链的查找规则是：当查找一个对象中的某个属性/方法…"}, {"id": "6914439108555177998", "title": "在互联网小厂做面试官的一些感悟", "desc": "我理解的招聘，不需要像大厂那样面试造火箭，入职拧螺丝。我们就是业务线需要（空缺一个前端开发岗），能独立完成一个项目（当然感觉这也是一句空话）具体我大概梳理了以下几点： 那真正的面试过程，少问一点概念性的问题，因为感觉有标准答案在，展现不了区别，比如说闭包是什么，这种。 更多的换…"}, {"id": "6908914341186109448", "title": "「面试常问」浏览器之事件机制", "desc": "在早期 IE 和 Netscape 团队在开发第四代浏览器的时候，遇到一个问题：当点击一个按钮的时候，是应该先处理父级的事件呢？还是应该先处理按钮的事件呢？IE 和 Netscape 给出了 2 种完全相反的答案，IE 提出事件冒泡的概念，而 Netscape 则支持事件捕获。…"}, {"id": "6844903797320318989", "title": "2019 CVTE 暑期实习前端面试", "desc": "本菜鸟啃了几篇面经以及《前端面试之道》就上场了，勇气是可嘉，但是心里特没底。 上午刚视频面试完，面试官年纪跟我差不多，说着亲切的广普，所以全程比较放松（破罐子破摔），除了想不出答案时那些尴尬的停顿。。。 趁热打铁把记得的面试题写下来，给大家做个参考，顺便自己也总结一下加强复习。…"}, {"id": "6844903893348925447", "title": "JavaScript核心知识(面试题)[#]", "desc": "说明函数提升的优先级比变量提升高，test();不管写在哪里都可以执行。其变形为： 注意：函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。 第一步同上。 第二步，因为var p = test.init();执行test.init返回go函数…"}, {"id": "6980503638401630215", "title": "不常见的面试题", "desc": "瞎总结， 大家请绕道， 最近面试比较郁闷， 就整理一下自己碰到的题，多年老菜鸡一枚，业务写多了，就丢弃了很多理论知识，这是罪，得改"}, {"id": "6844903599609217038", "title": "前端工程师系列，TCP复习及浓缩总结（全干货，支持面试）", "desc": "最近公司项目不多，闲着也来写写文章，复习一下基础知识。 之前也写了好几片文章，苦于自己不太会玩标题党，结构内容也不生动，没什么点击量，希望慢慢总结的写，提高水平，给大家带来好的内容，废话不多说。下面进入正题。 说道TCP/IP、HTTP两个词，我估计各位应该没有人不知道，多多少…"}, {"id": "6844903808632356871", "title": "技术面试中，当面试官「套路」你时，怎么「反套路」回去？", "desc": "无论是快要毕业的学生，还是已经步入职场的达人，求职攻略都是必不可少的东西。以前我们出过怎么回答问题的求职攻略，现在，学学怎么提问吧！"}, {"id": "6844904065323794439", "title": "javascript 原型和继承", "desc": "如题，准备面试一次就看一次，索性自己好好总结一下吧，一劳永逸。 其实我也不知道咋回答这问题，我只知道，面试官问这个后，就表示他要问一堆继承的问题了。下面是引用周老师的一段说辞。 \"面向对象是一种编程思想 与面向过程是对应的 一般的语言都是面向对象的 js本身也是基于面向对象构建…"}, {"id": "6844903971648176142", "title": "日问周刊 | 全栈面试汇总 | 第八期", "desc": "LM-Factor 与它俩有关。 简而言之，一个静态资源没有设置 Cache-Control 时会以这两个响应头来设置强制缓存时间，而非直接进行协商缓存。在涉及到 CDN 时，表现更为明显，体现在更新代码部署后，界面没有更新。"}, {"id": "6941203908391862280", "title": "「面试」从输入URL到页面展示详细", "desc": "涉及网络、操作系统、web等一系列的知识。 用户输入URL，浏览器会根据用户输入的信息判断是搜索内容还是请求的URL。如果是搜索内容，就将搜索内容+默认搜索引擎来合成新的带搜索关键词的URL。如果判断输入内容符合URL规则，地址栏会根据规则，把内容加上协议，合成为完整的URL。…"}, {"id": "6901162140938272781", "title": "前端常见问题：https和http的区别", "desc": "最近看了牛客的好多帖子，发现无论是社招还是校招，几轮技术面试下来都会考这个问题，同时这个问题也可以引申出很多的细小的知识点，下面咱们就好好的聊一聊这个知识点HTTP简介我们先来看万恶的概论定义：好了，"}, {"id": "6844903891247579149", "title": "六月份面试小记", "desc": "六月并不是一个换工作的好时候，部分公司关闭了HC通道，加上三伏天的闷热，以及还是在职。写这篇文章主要是想记录这段时间来的面试经验，如果有类似情况的同学欢迎讨论。 个人背景：base武汉，两年经验，非计算机相关专业，小211，投出简历30-40封，只收到面试邀请5家(惨==)，正…"}, {"id": "6991647504802512904", "title": "js面试题汇总", "desc": "能实现一个new吗 数组扁平化 用过instanceof吗,什么用法,如何手写? 首先要知道是怎么用的？ instanceof运算符用于检测构造函数的prototype属性是否出现在某个实例对象的原型"}, {"id": "6844904181636005901", "title": "字节与腾讯工作环境对比，前端工程师们想好了吗？", "desc": "这篇文章主要是以个人的视角谈下对腾讯和字节跳动两家公司的感受，尽可能中立客观。但由于本人的岗位和经历的关系，部分观点可能有些片面，欢迎一起讨论~ 有封闭式入职培训，我当时是为期两周，学习和玩相结合，可以认识大量刚入职的同事（其中有部分人会成为你日后的人脉）。 导师制，大部分导师…"}, {"id": "6913900545581252615", "title": "2021-web前端面试之旅-03-各个隐藏和显示的区别", "desc": "transition：transition 不支持 display。"}, {"id": "6844903941419827214", "title": "[面试题]关于JavaScript，你了解多少？", "desc": "1.请解释事件委托。 事件委托是将事件监听器添加到父元素，而不是每个子元素单独设置事件监听器。当触发子元素时，事件会冒泡到父元素，监听器就会触发。这种技术的好处是： 2.请简述JavaScript中的this。 JS 中的 this 是一个相对复杂的概念，不是简单几句能解释清楚…"}, {"id": "6844903698427019277", "title": "面试还问redux？那我从头手撸源码吧（中间件）", "desc": "昨天的文章手写了一版redux的核心源码，redux库除了数据的状态管理还有一块重要的内容那就是中间件，今天我还是尝试将此部分源码完成。 而中间件（middleware）就是一个可插拔的机制，如果想要扩展某个功能，比如添加日志，在更新前后打印出state状态，只需要将日志中间件…"}, {"id": "6950669529760399391", "title": "几种继承打包带走 | 刷题打卡", "desc": "面试必问的基础问题，原型链继承、构造函数继承、组合继承、寄生式组合继承、class继承，以上继承方式的原理及代码实现，助你早日弄懂"}, {"id": "6844903648309280776", "title": "Session, LocalStorage ,Cache-Control", "desc": "但是Expires表示的是本地时间，所以如果用户更改本地时间的话，那你设置的缓存很可能就无用了，不靠谱了。"}, {"id": "6855129006972125191", "title": "HTTP，HTTPS，HTTP 1.X, HTTP 2.0傻傻分不清楚？今天她们来了~~", "desc": "区分是否被当成文件的关键是Content-Disposition是否包含filename，因为文件有不同的类型，所以还要使用Content-Type指示文件的类型，如果不知道是什么类型取值可以为application/octet-stream表示该文件是个二进制文件，如果不是文…"}, {"id": "6888905706700079117", "title": "JavaScript单例模式给你分配一个cuteGirl", "desc": "马上就双十一了，我知道好多同志还没有对象，所以今天大瑞通过单例模式来给大家一人分配一个，只准有一个。 好了上面code已经基本实现了只能有一位cuteGirl的需求。 但是大瑞考虑到，有的同志现阶段不仅是单身Dog，还是铲shi官，过节呢，总不能让孩子也单着吧🐶。 天猫双十一…"}, {"id": "6844903825266966536", "title": "关于JS更新input元素的value属性引发的狗血讨论", "desc": "来个面试题：在浏览器中，对于input节点的用户输入，何时触发\"change\"事件呢？在浏览器中，JS更新input的value属性，会触发\"change\"事件吗？如果不会触发，请问为什么？有什么办法"}, {"id": "6844904117941305352", "title": "[ 面试系列 ] - 五：如何垂直居中？", "desc": "这个问题比较直接，并不需要延伸太多，直接从实现的角度回答即可。 以下例举工作中常用到的垂直居中方案。（以个人使用频率为优先级排序） 不得不说，不考虑兼容性的情况下，flex 真的非常好用，有兴趣的同学可以看看向军老师的 呀！被闪电击中了，CSS3 FLEX 弹性盒模型让布局飞起…"}, {"id": "6943502076819275806", "title": "「面试」-函数柯理化", "desc": "函数柯里化（curry）是函数式编程里面的概念。curry的概念很简单：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。 简单点来说就是：每次调用函数时，它只接受一部分参数，并返回一个函数，直到传递所有参数为止。 主要思路是什么呢，要判断当前传入函数的参数个数…"}, {"id": "6914180097205338120", "title": "JS 工程师应该知道的 10 个面试问题", "desc": "大多数公司都会通过技术面试来评估面试者的技能，如果你正准备面试，或许下面的内容会给你一些帮助。 我建议人们根据开发者是否喜欢使用类继承来雇用他们。为什么？因为喜欢类集成的人往往固执而又死脑筋，致死都不会放弃。正如 Bruce Lee 曾经说过： 我是不会雇用这样的人的，当然我建…"}, {"id": "6869584524771065863", "title": "前端面试系列【007】 - 你知道 vue 中 key 的作用和工作作原理吗？说说你对它的理解", "desc": "本文就从作用到原理的角度来回答上面提出的问题。 key 在 vue 中，除了解决 list 渲染过程中一些隐蔽的 bug，提高渲染效率，以及在过渡过程中区分节点以外，最主要的用途还是在 diff 算法中。 而 key 起作用的位置则在 patch() 中。 要回答这个问题，除了…"}, {"id": "6844903811991994375", "title": "关于类数组的一道面试题", "desc": "一组数据，由数组来存，但是如果要对这组数据进行扩展，会影响到数组原型，ArrayLike的出现则提供了一个中间数据桥梁，ArrayLike有数组的特性， 但是对ArrayLike的扩展并不会影响到原生的数组。 没错，ArrayLike就是要干这么碉堡的事情。 push 方法有意…"}, {"id": "6844904199730233352", "title": "this到底是什么?", "desc": "this是JavaScript世界最让人迷惑的关键字之一，如果不明白this的本质，基本上会被一线互联网公司的面试官扣大量的分。上下文问有提到过this是上下文中确定的那么我们来了解下什么是this。 this的指向，是在函数被调用的时候确定的，也就是执行上下文被创建时确定的。…"}, {"id": "6844904114808176647", "title": "浏览器系列 | 人气面试题 : 从输入URL到页面展示发生了什么？", "desc": "最新的 Chrome 浏览器包括:1 个浏览器(Browser)主进程、1 个 GPU 进程、1 个网络(NetWork)进程、多个渲染进程和多个插件进程。 1. 浏览器进程：用户输入 当用户在地址栏中输入一个查询关键字时，地址栏会判断输入的关键字是搜索内容，还是请求的URL。…"}, {"id": "6844903615467880462", "title": "30-seconds-of-interviews", "desc": "30 seconds 系列之面试片段~"}, {"id": "6844903941424021512", "title": "[面试题]关于CSS,你了解多少?", "desc": "浏览器通过优先级规则，判断元素展示哪些样式。优先级通过 4 个维度指标确定，我们假定以a、b、c、d命名，分别代表以下含义： 优先级的结果并非通过以上四个值生成一个得分，而是每个值分开比较。a、b、c、d权重从左到右，依次减小。判断优先级时，从左到右，一一比较，直到比较出最大值…"}, {"id": "6969595198607212552", "title": "链表的逆置", "desc": "链表的逆置 上面是一个链表简单的图，从1依次指到5，那么它的逆置，就是让它从5依次指到1。那么我们如何来解决这个问题呢？ 因为一开始1的next指向2，那么我们先让2的next指向1行不行呢？答案是不"}, {"id": "6907265963016912909", "title": "实现网络请求并发限制的管理类 NetManager(concurrency)，构造函数传入一个number，是并发的限制数，提供 request(url, da", "desc": "代码实现index.html执行结果浏览器中打开index.html"}, {"id": "6847902215533756424", "title": "前端面试题整理-持续更新CSS,JS,React,http等", "desc": "undefined不是保留字，它只是全局对象的一个属性，在低版本 IE 中能被重写。 undefined 在 ES5 中已经是全局对象的一个只读（read-only）属性了，它不能被重写。但是在局部作用域中，还是可以被重写的。 void 0 === undefined，用 vo…"}, {"id": "6846687584341458952", "title": "HTTPS加密流程解析", "desc": "具体来说 , 明文传输的每一个环节，数据都有可能被第三方窃取或者篡改，具体来说，HTTP 数据经过 TCP 层，然后经过WIFI路由器、运营商和目标服务器，这些环节中都可能被中间人拿到数据并进行篡改，也就是我们常说的中间人攻击。 如果有 A、 B 两把密钥，如果用 A 加密过的…"}, {"id": "6844904166356156430", "title": "浏览器同源策略及跨域", "desc": "最初的定义是指，A网页设置的cookie，B网页不能访问，前提是这两个网页必须是”同源“。 cookie是浏览器写入的一小段信息片段，只有同源的网页才能共享。大小限制是4k。 两个页面的一级域名相同，二级域名不同时，可以通过设置相同的 document.domain，就可以共享…"}, {"id": "6898997007928459277", "title": "[核心概念] 一文说透 JS 中的 this 绑定规则", "desc": "上一篇我们介绍了下什么是 this 概念，并简单介绍了如何分析this指向。 this 是 javascript 中的一个关键字，它提供了一种更优雅的方式来 隐式“传递” 一个对象引用，因此可以将 API 设计得更加简洁并且易于复用。 this 是在运行时进行绑定的，并不是在编…"}, {"id": "6844903729821384711", "title": "React源代码解析（3）：组件的生命周期", "desc": "这一章可能比较长，因为这一章我会把生命周期,transaction,setState放到一起说明. 在上一章对于组件的挂载已经做了详细的说明，但是涉及到组件生命周期部分被略过.接下来我将对其深入解析. 组件的挂载涉及到二个比较重要的生命周期方法componentWillMoun…"}, {"id": "6922115499811667981", "title": "变量提升面试题", "desc": "1题2题3题4题5题6题7题"}, {"id": "6972531834064207908", "title": "前端基础面试题5", "desc": "Vue2.0的数据响应是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty () 来劫持各个属性的setter、getter，但是它并不算是实现数据的响应式的完美"}, {"id": "6844904130335473672", "title": "高级进阶之性能优化篇", "desc": "想进大厂通用技巧：vue、react、node、小程序、工程化、性能优化，对于前三者有一个深入掌握即可，要深入的程度是源码级别，后两者要做到跟面试官吹上半小时以上即可。本文是笔者高级进阶系列之性能优化篇，部分内容参考小册前端性能优化原理与实践（强烈推荐），看了本文跟面试官扯皮半…"}, {"id": "6869292644355276807", "title": "谈谈跨域、同源策略、以及常见跨域解决方案", "desc": "什么是跨域？跨域:是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对js实施的安全限制。同源策略同源策略是一个安全策略。所谓的同源，指的是协议，域名、端口号相同。  同源策略:"}, {"id": "6847902219065524237", "title": "《前端面试总结点线面》之点-HTTP篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 若干个请求排队串行化…"}, {"id": "6844904195821142030", "title": "图解-你可能需要知道的DOM", "desc": "在去年我写过一篇关于vue转小程序的原生的webpack-loader的文章，里面主要就是对于vue-template的语法解析。其中我看了mpvue源码，结果是懂非懂。最近在看一个浏览器工作原理的实践课程，其中就有说到dom树是如何构建的，看完后恍然大悟，今天就来掰扯掰扯。 …"}, {"id": "6844903497297559559", "title": "深入贯彻闭包思想，全面理解JS闭包形成过程", "desc": "写这篇文章之前，我对闭包的概念及原理模糊不清，一直以来都是以通俗的外层函数包裹内层....来欺骗自己。并没有说这种说法的对与错，我只是不想拥有从众心理或者也可以说如果我们说出更好更低层的东西，逼格会提升好几个档次。。。 谈起闭包，它可是JavaScript两个核心技术之一(异步…"}, {"id": "6844903929763872782", "title": "面试之道之 Node.js 日志模块 console", "desc": "怎么说呢，console 并不总是同步的，也不总是异步的。同步还是异步取决于链接的是什么流以及操作系统是 Windows 还是 POSIX。 比如下面一段，进程等待 3 秒后输出 你好，Node.js!，接着等待 3 秒后输出 你好，Node.js2!，然后退出。 这里就要牵扯…"}, {"id": "6844904116506853389", "title": "转岗半年初级前端面试经验（持续更新）| 掘金技术征文", "desc": "前言第一场面试1. 自我介绍 （知识点：表达能力）自我介绍算是面试中的必做题了，这点上因为目前面试经历还不多，所以也没有机会问面试官对我的感受。不过还是从各处总结了一些小技巧给大家参考，如果有做面试官"}, {"id": "6844903574556639239", "title": "你不知道的js类型转化和原型链", "desc": "昨天晚上接到了蚂蚁金服的电面。其中有一道题，让我印象深刻，结束之后，我就去查了资料，写了一篇拙劣的文章来总结。 当时模棱两可，我知道他们的顶端都是Object.prototype就直接回答这个选项，因为当时心里想着一切不是皆对象吗，那对象的原型链顶端不就是Object.prot…"}, {"id": "6844904194273443854", "title": "前端基础之代码结果篇", "desc": "01. 作用域与this"}, {"id": "6844903625194471432", "title": "浅解前端必须掌握的算法（三）：直接插入排序", "desc": "虽然前端面试中很少会考到算法类的题目，但是你去大厂面试的时候就知道了，对基本算法的掌握对于从事计算机科学技术的我们来说，还是必不可少的，每天花上 10 分钟，了解一下基本算法概念以及前端的实现方式。 另外，掌握了一些基本的算法实现，对于我们日常开发来说，也是如虎添翼，能让我们的…"}, {"id": "6905994668291391496", "title": "2021届前端秋招经验分享（最终拿下拼多多、美团、京东offer）", "desc": "在我看来，我的秋招战线并不仅仅是从秋招季开始，至少得从2020年2月接触前端开始。2月正值疫情，寒假只是找了个离家近没有任何含金量的运营实习，想找个日常实习来填补自己简历的空白。本想着985的敲门砖能给自己足够的底气面对匮乏的技术水平，才发现，程序员这个行业并不是学历为王的行业…"}, {"id": "6844904090250526734", "title": "用class如何实现继承？不用又如何实现？", "desc": "文章中如有不对的地方，欢迎小伙伴们多多指正。"}, {"id": "6844903998533664782", "title": "前端程序员必备的面试题整理", "desc": "正在持续更新中... ,路过的朋友，可以点个赞，关注一下~~~ Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理，更强大。 若状态一直没有改变，则一直处于等待状态，即当异步程序处理完了之后再改变状态，完成异步任务。 回调函数（node，嵌套…"}, {"id": "6844903696967565319", "title": "面试还问redux？那我从头手撸源码吧（核心代码）", "desc": "最近处在项目的间歇期，没事参加了几场面试发现面试官依然喜欢问redux的一些问题，尤其是问这种开发框架的问题最好的办法就是撤底搞懂其源码，正好利用这两天时间从头过了一遍redux库，还是有些收获的。 手写源码不是目的，主要是为了看看大牛写的代码更能开拓思维，以后和面试官扯淡的时…"}, {"id": "6935745774626013191", "title": "说说事件循环（浏览器和Node）", "desc": "浏览器的每个渲染进程都有一个主线程，并且主进程非常的忙，既要处理DOM，又要计算样式，还要处理布局，还需要处理js任务以及各类输入事件。如何让这些不同类型的任务有条不紊的运行呢？这就需要一个消息队列和事件循环来解决。 但是并不是所有的任务都是在执行之前就统一安排好的，在线程运行…"}, {"id": "6844903813833293838", "title": "面试官：你了解es6的知识吗？", "desc": "大家好哟，有没有吃青团呐？作者是豆沙党。另外作者面试系列的第三篇文章。 这篇比较基础，讨论的是es6的新语法。 其实这里很容易理解，var是可以变量提升的。而let和const是必须声明后才能调用的。 对于let和const来说，这里就是暂缓性死区。 这里的知识点很好记，看如下…"}, {"id": "6844903709051191309", "title": "手写实现js进制转换", "desc": "说到进制转换，不得不首先说下js中的两个内置方法toString 和 parseInt；toString可以把一个数转换为指定进制的数，parseInt是把数按照指定进制解析成十进制的数。 既然要手写，那我们肯定得有思路才能用代码进行实现。为了讲解方便起见，我们用ES6中的 *…"}, {"id": "6844903679879970824", "title": "站在招聘者角度看面试  | 掘金技术征文", "desc": "本文主要介绍我在日常中怎么去招人，面试人，关注点是什么，以及怎么找到合适自己团队的人才。 我目前任职一家大数据小公司，负责前端团队，由于业务的扩展需要很多技术人员，站在一个招聘者的角度去看待面试，希望我的一些工作经验可以帮助到求职的你。 “你为什么选择这个职业？” 这是我面试中…"}, {"id": "6969103360964165662", "title": "深入前端跨域的9种解决方法和原理", "desc": "简介 CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。 因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。 请求 简单请"}, {"id": "6970574774900637703", "title": "JS实现的小功能", "desc": "一、如何实现数组的随机排序？ 利用数组自带的sort方法 随机抽取数组元素到新数组中【Math.floor()：向下取整】 洗牌法：随机交换数组内的元素 二、如何实现JS数组去重？ ES6 Set S"}, {"id": "6844903635034308622", "title": "想要一份senior工作，务必要读 React 源代码吗？", "desc": "这段面试了一些。很多公司都会甩这个问题给你：读过 React 的源代码吗？ 答曰：没读过。瞬间感到自己的自信心掉了一块。网上也不乏各种分析源代码的文章和精读，只是我还是没有那个勇气和兴趣去读如此成熟的一个库的源代码，甚至想读也不知从何读起。 于是跑上 Reddit 发了一贴，想…"}, {"id": "6844903909362778125", "title": "19年上半年前端实习面经", "desc": "坐标杭州，我在上半年陆续找过一些前端实习，记录面经（只记录技术面，不记录HR面）于此，供大家分享，只记得其中一些问题了，见谅。 for...in 更适合遍历对象，for...of 更适合遍历数组。 Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。 这…"}, {"id": "6971407598276837413", "title": "浅拷贝 、深拷贝、对象赋值的区别？", "desc": "什么是浅拷贝？什么是深拷贝？ 这三者的区别如下，不过比较的前提都是针对引用类型 先说一个简单的概念，什么是对象赋值？ 对象赋值 当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而"}, {"id": "6971374111884836871", "title": "计算机安全：XSS 和CSRF 攻击 以及防御方式", "desc": "1. XSS（Cross site Scripting）跨站脚本攻击 1.1 定义： 是一种常见于web应用中的计算机安全漏洞，恶意攻击者往web页面中嵌入恶意的脚本，大部分的 XSS 漏洞都是由于没"}, {"id": "6844903577144541191", "title": "JS进阶(2)：人人都能懂的原型对象", "desc": "凡是搞前端开发的或者玩 JavaScript 的同学都知道，原型对象和原型链是 JavaScript 中最为重要的知识点之一，也是前端面试必问的题目，所以，掌握好原型和原型链势在必行。因此，我会用两篇文章(甚至更多)来分别讲解原型对象以及原型链。 在上一篇文章中，我们详细介绍了…"}, {"id": "6844903679955320845", "title": "小谈工作面试 | 掘金技术征文", "desc": "1.前言2.自己经历的面试实习期也是这个秋天，学校里很多同学有的去培训，有的已经找好工作，我也和同窗的同学去参加各大招聘会，这时候除了电脑方面比较熟，能建建网站，真不知道自己还能做什么；就打算找个网站"}, {"id": "6844903810377187341", "title": "前端面试中常考的源码实现", "desc": "好了，开始手动实现我们的call2。在实现的过程有个关键： apply和call实现类似，只是传入的参数形式是数组形式，而不是逗号分隔的参数序列。 因此，借助es6提供的...运算符，就可以很方便的实现数组和参数序列的转化。 看到测试用例，应该会有人奇怪为什么最后要输出Arra…"}, {"id": "6844904021401010184", "title": "前端面试-跨域的解决方法 / 手写JSONP", "desc": "首先了解跨域的产生前提：浏览器的同源策略。 什么是同源(origin) : 两个页面拥有相同的协议，主机（域名相同，二级域名和主域名也算不同），端口相同，那么认为这两个页面属于同源。 同源策略虽然限制了跨域请求，但其实更细致的说只是限制了跨域的读(read)请求，对于跨域嵌入请…"}, {"id": "6901692290549415949", "title": "前端面试—强缓存、协商缓存", "desc": "1. 什么是浏览器缓存机制？ 2. 浏览器缓存机制用来解决什么样的问题？ ⭐3. 浏览器缓存机制的分类"}, {"id": "6864743228684369927", "title": "二进制究竟有什么用？齐姐带你看看那些好玩儿的「位操作」", "desc": "计算机说到底就是 0 和 1，所有的数在内存中都是以二进制的形式储存的。 而位操作，或者说位运算，就是直接对内存中的二进制位进行操作。 位运算可以说是我们的基本功，今天这篇文章就从以下角度和大家一起玩转位运算。 在实际生产中，二进制是用来优化时间和空间的。 二进制的运算，可能并…"}, {"id": "6844904185717063694", "title": "2020前端春招面经总结！", "desc": "从2020.1就开始渐渐的进行复习，2月末开始面试，到现在五月初旬基本宣告结束。在3月和4月经历了无数次失败，沮丧，意外，期待，崩溃，焦虑。我尽量回忆每一场面试问的问题，希望给后辈们做个参考。 css两列布局，右列定宽，左列自适应。 这一面都是些开放性问题，感觉答得确实也不错，…"}, {"id": "6844903873887338510", "title": "Day4 - 前端高频面试题之浏览器相关", "desc": "服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。 事件流被分为三个阶段(1 ~ 5)捕获过程、(5 ~ 6)目标过程、(6 ~ 10)冒泡过程。 当函数执行结束，局部变量就不需要了，这时候就可以释放他们的内存。 跟踪记录每个值被引用的次数。当声明一个变量并将引用…"}, {"id": "6844904163848011783", "title": "函数防抖与函数节流", "desc": "第一次听到这个东西是毕业后去头条面试的时候，面试说：说一下函数防抖是什么，wdt，啥玩意儿？只能默默的回答：不好意思，这个不是很熟！尴尬ing...... 防抖和节流都是防止函数多次调用，在时间轴上控制函数的执行次数。 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重…"}, {"id": "6847902222504869901", "title": "《前端面试总结点线面》之点-Node篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 堆外内存：由 c++…"}, {"id": "6944994703876030494", "title": "零基础自学前端人的求职路，面经&资源分享", "desc": "从 2016年本科毕业开始，一路跌跌撞撞走了很多弯路，在机缘巧合下，走上了前端开发之路，作为一个非计算机专业且学历一般的人来说，自学编程其实不是件容易的事情，不过庆幸的是自己坚持下来了。 目前工作还算不错，收入在目前所在的城市不算高，不算低，生活也还过得去，继续加油努力，也希望…"}, {"id": "6913944108692307976", "title": "面试整理一(持续更新中...)", "desc": "undefined和null有什么区别？&&运算符能做什么||运算符能做什么 DOM是什么？什么是事件传播?什么是事件冒泡？什么是事件捕获？event.preventDefault()和event.s"}, {"id": "6844903507951091725", "title": "简单易学的js设计模式-模版方法模式", "desc": "本文以真实的使用场景带你学习js的设计模式之模版方法模式。看了本文，不出意外，你应该能在你的项目中使用该设计模式了。"}, {"id": "6921157255182155790", "title": "面向对象练习题（重写hasPubProperty）", "desc": "1、2、forin循环（1）优先遍历数字属性，而且按照从小到大遍历；数字属性遍历完，再去遍历其他的（2）无法遍历Symbol的私有属性（3）遍历所属类原型上自定义的属性和方法「遍历了公有的：内置的是不"}, {"id": "6844903987565559816", "title": "JavaScript之map与parseInt的陷阱", "desc": "注意到这个问题的原因是参考了这个国外某博客JavaScript可选参数危险。首先，我们了解一下map方法的定义 currentValue：callback 数组中正在处理的当前元素。 index可选：callback 数组中正在处理的当前元素的索引。 array可选：map 方…"}, {"id": "6844904093564010510", "title": "一天一题：如何理解 JS 中的this关键字？", "desc": "JS 初学者总是对 this 关键字感到困惑，因为与其他现代编程语言相比，JS 中的这this关键字有点棘手。 “this” 一般是表示当前所在的对象，但是事情并没有像它应该的那样发生。JS中的this关键字由函数的调用者决定，谁调用就this就指向哪个。如果找不到调用者，th…"}, {"id": "6844904020922875918", "title": "JS从入门到放弃__数据结构和变量提升", "desc": "1994年，网景公司（Netscape）发布了Navigator浏览器，这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。网景公司急需一种网页脚本语言，使得浏览器可以与访问者互动。 网景公司做出决策，未来的网页脚本语言…"}, {"id": "6943224497780555783", "title": "要达到什么水平才能找到一份前端实习的工作？", "desc": "1.css,html,js 基本要求要能够了解并且熟练。 2.在完成1后,了解前端自动化, webpack,gulp, 并且能利用webpack,gulp写一套脚手架(不是框架),实现最基本的 es6 -> es5(babel + eslint), css处理器(比如sass)…"}, {"id": "6844903585952563207", "title": "理解Underscore中的flatten函数", "desc": "最近是在所在实习公司的第一个sprint，有个朋友又请假了，所以任务比较重，一直这么久都没怎么更新了，这个周末赖了个床，纠结了一会儿决定还是继续写这个系列，虽然比较乏味，但是学到的东西还是很多的。 之前主要是针对函数处理部分的API做解读，经过那些天的努力，基本已经解读完了，现…"}, {"id": "6921399957765226504", "title": "jQuery源码（数据类型检测的处理）", "desc": "1、第一部分2、检测是否为函数3、检测是否为window4、检测数据类型5、检测是不是数组或者类数组6、检测是否为纯对象7、检测是不是空对象8、检测是否为有效数字注意：isNaN()我们可以进行检测是"}, {"id": "6921015126359277581", "title": "面向对象练习题（原型重构的一些知识）", "desc": "1、题目2、仔细看看图片上的内容3、Object.assign4、题注意上面console.log(f1.constructor);输出的是Object函数，因为重写了Fn的原型，所以找不到const"}, {"id": "7005550662746374151", "title": "面试题：[“0x1“, “0x2“, “0x3“].map(parseInt)类型", "desc": "题目1 结果 解析 因为parseInt可以传递2个参数，然后自动的给它按顺序的传递了item和index的参数。 因此arr就等于：arr = [parseInt(\"0x1\", 0), parseI"}, {"id": "6844903501772898318", "title": "前端面试之webpack篇", "desc": "还是以前一样，有些概念面试可能会考，我都用*标记了出来，两句话就总结清楚其余的地方如果你想了解webpack，就仔细看看，虽然本教程不能让你webpack玩的很6，但是懂操作流程够了。面试你一般问你w"}, {"id": "6946079174847103006", "title": "优秀的简历就该这么写！", "desc": "金三银四已过半，各大公司抢人大战已进入白热化。能否进入一个自己心仪的公司，拿到自己满意的薪资。面试中的能力展现很重要，但是能不能进入面试环节更重要。 目前在前端领域，人才供给呈现出一个底面特别宽的金字塔形状。 开发同学特别多，但是好多公司还是会出现用人荒、招人荒。不得已在当下时…"}, {"id": "6926873405824172046", "title": "非985、211的我是如何进入的腾讯工作的？", "desc": "其实跳槽这个想法在20年7月份的时候就有些冒头了，但一直很踌躇也很不自信，不知道自己的能力是不是能够着大厂。真正的准备工作开始于11月份，我开始了为期两个月的征程。（ps：11月份主要在看书刷题，12月份集中在面试） 看书这件事情一直有穿插在我的工作生活中，平时工作无任务时会看…"}, {"id": "6844903586711732237", "title": "面试中会遇到的正则题", "desc": "1、vars1=\"get-element-by-id\";给定这样一个连字符串，写一个function转换为驼峰命名法形式的字符串getElementById2、判断字符串是否包含数字3、判断电话号码4"}, {"id": "6844903549478895629", "title": "前端面试之js相关问题（二）", "desc": "“一切皆对象！” 大家都对此深信不疑。其实不然，这里面带有很多的语言陷阱，还是不要到处给别人吹嘘一切皆对象为好。 JavaScript 是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的…"}, {"id": "6844903576033034248", "title": "前端面试必考之http状态码有哪些", "desc": "http状态码有哪些，是一个很高频的面试问题。 一般大家都知道404页面不存在，500服务器错误，301重定向，302临时重定向，200ok，401未授权啥的。 如果只是简单的这样答，不足以给面试官留下良好的印象，为了展现自己良好的http知识，你可能还需要知道这些状态码..."}, {"id": "6908888694690676744", "title": "script async 与 defer 有什么区别", "desc": "在正常情况下，即<script>没有任何额外属性标记的情况下，有几点共识JS的脚本分为加载、解析、执行几个步骤，简单对应到图中就是fetch(加载)和execution(解析并执行)JS的脚本加载(f"}, {"id": "6844903557729091591", "title": "转眼人到中年：前端老程序员无法忘怀的一次百度电话面试（二）", "desc": "当一面结束时，一切都显得不那么真实。几分钟前还在着急忙慌地接招，随着电话的挂断，周遭又安静了下来，安静到感觉连脑袋都变得有些迟钝。 这种感觉很熟悉。多年前高考结束的那个夜晚，暴雨，回到家，一个人，对着堆成小山的习题集和试卷，说不出话来。一切都结束了，却没有意料中的狂喜。平静，甚…"}, {"id": "6847902215571505166", "title": "带你轻松搞定“观察者模式“和\"发布订阅模式\"的区别！", "desc": "最近我的小伙伴们在面试中，这两个被问的很频繁，斗胆的跟大家分享一下我的理解。我将采用“官方解释”+“大白话”的方式。 观察者模式：一个对象（观察者）订阅另一个对象（主题），当主题被激活的时候，触发观察者里面的事件。 大白话解释：当去你去医院打吊瓶（某些地方叫打点滴，就是这么严谨…"}, {"id": "6844903697198088199", "title": "常见面试题 - URL 解析", "desc": "先介绍一个偷懒的方式： URLUtils ，可以通过该接口获取 href 、 hostname 、 port 等属性。"}, {"id": "6928281178625540109", "title": "【文件上传那些事儿】- 05 断点续传", "desc": "在前面四章循序渐进的迭代开发中，我们的上传 demo 已经初具规模，实现了简单的拖拽上传，二进制级别的格式验证，能够对大文件进行切片上传，接下来就是对切片上传的进一步优化，实现文件秒传和断点续传功能。 其实这两个功能原理都非常简单，下面将分别介绍具体实现。 前文有提到，我们是通…"}, {"id": "6844903569519296525", "title": "前端小生面试之看不懂的 []+{}", "desc": "???WTF，谁会没事这么写代码，好吧，我错了，大佬别打我。懵逼之后要干嘛？当然是要学习一波，于是我满世界找资料，有好东西当然是要分享一波，好了，接下来我们就一起走进 JavaScript 隐式转换的世界吧。 在 JavaScript 中加法运算规则很简单，它只做数字和字符串的…"}, {"id": "6844904110873919502", "title": "[ 面试系列 ] - 二：meta viewport 是做什么用的，怎么写？", "desc": "上面的文字摘自 w3cschool 中文版中对 meta 标签的描述。通过这句话可以知道，meta 标签主要用于描述页面的一些信息。 其中 content 是对另外两者的描述，类似于 json 中键值对的形式，而 scheme 定义用于翻译 content 属性值的格式。 我们…"}, {"id": "6844903848243363847", "title": "前端面试基础(1年以内需掌握)", "desc": "这是因为编写代码时输入空格、换行都会产生空白符。而浏览器是不会忽略空白符的，并且对于多个连续的空白符自动合并成一个，故产生了所谓的间隙。 (推荐)通过设置父元素的 font-size 为 0 来去掉这个间隙，然后重置子元素的 font-size，让其恢复子元素文字字符。 只要设…"}, {"id": "6844904085271871502", "title": "21届大三面试凉经（阿里字节）", "desc": "css 实现一个长方形，宽度挤满页面，长度是宽度两倍。 。。。其他的忘了"}, {"id": "6970572534496362526", "title": "栈和队列", "desc": "栈 栈结构的特点是先进后出。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。 我们可以把它类比成一个桶，先放进"}, {"id": "6919048040401600526", "title": "【每日一题】面试官问：JS类型判断有哪几种方法？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 如果变量是引用类型，可以使用instanceof判断，检测基本类型时，会返回false。 所有的数据类型都可以使用此方法进行检测，…"}, {"id": "6989131306302963726", "title": "前端面试知识点梳理——JS-Web-API", "desc": "从JS基础知识到JS Web API JS基础知识，规定语法（ECMA 262标准） JS Web API，网页操作的API(W3C标准) 前者是后者的基础，两者结合才能真正实际应用     JS W"}, {"id": "6844903504302047245", "title": "【译】2017 年最受欢迎的 10 个编程挑战网站", "desc": "想快速提升编程技能？那么，这 10 个编程竞技网站会给你带来极大的帮助。当然，或许你也是这上面的常客。^ ^"}, {"id": "6996686168297308197", "title": "webGL使用指南（1）", "desc": "webGL使用指南（1） 认识webGL webGL介绍 WebGL是一种3D绘图标准，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0结合在一起，通过增加OpenGL ES 2"}, {"id": "6924572579386621960", "title": "面试官：BFC是啥 开发中有哪些应用", "desc": "BFC(Block formatting context) 块级格式化上下文,它是一个独立的渲染区域，其中的元素不受外界的影响，同样的里面的元素也不会影响外面。 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 每个盒子（块盒与行盒）的左…"}, {"id": "6844903512971673607", "title": "让我印象深刻的 JavaScript 面试题", "desc": "对于一个web前端来说，面试的时候，难免会遇到javascript的面试题。就我自己而言。有几道面试题，有些是我面试遇到的，有些是在网上看到的，但是都印象深刻。今天就来简单分析一下我遇到的，印象深刻的一些面试题！主要目的希望能让小伙伴学到一些东西，如过以后遇到类似的情况，就记得…"}, {"id": "6844903721235808263", "title": "记一次前端面试的全过程", "desc": "接上一篇面试总结一年半经验，百度、有赞、阿里面试总结，把这段时间的面试总结结束一下吧。 本文主要记录一下当天面试的全过程（可能有遗漏，事隔三四天了，我已经尽量回忆了），答案亦为参考答案，仅供借鉴。 有赞一面结束后过了两天就收到了二面的邀请，我回复面试邀请的短信，说最近可能请假太…"}, {"id": "6995576876445990919", "title": "2021新出炉前端面试题系列一", "desc": "1. 简单请求和复杂请求 axios都是复杂请求，ajax可以是简单请求 2. 事件穿透 解决事件穿透的方案： 1、event.preventDefault()阻止默认行为； 2、使用pointer-"}, {"id": "6998172739379036173", "title": "8月更文挑战 | 前端计算机网络面试题汇总（HTTP与HTTPS）", "desc": "前端计算机网络面试题汇总（HTTP、HTTPS相关），涉及内容：HTTP与HTTPS、HTTP与HTTPS区别、HTTP1.0、1.1、2.0区别、HTTP报文、对称加密、非对称加密、混合加密"}, {"id": "6995569553317036040", "title": "【复盘plan(四)】前端攻城狮和浏览器之间的那些事", "desc": "作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石。在面试中，浏览器相关的知识也是逃不过的必问点。本文内容会涵盖事件机制、跨域问题、浏览器渲染过程、浏览器本地存储"}, {"id": "6844904130884943886", "title": "记一次偶然的头条前端面试", "desc": "编程题：compose实现。 大概记得就这些了。 大厂面试官也不容易，头天面试，第二天在网上就被挂出来了。 指定当前组件的依赖以其版本。如果组件使用者在项目中安装了其他版本的同一依赖，会提示报错。 减少了同一时间内的页面多处内容修改所触发的浏览器reflow和repaint的次…"}, {"id": "6990340266880155655", "title": "位运算的经典应用", "desc": "位运算比较经典的应用，在很多时候能极大的降低时间复杂度，这个题我们就从空间与时间尺度上分析了位运算在某些情况下的优势。比如这道题，面试的时候用HashMap和暴力遍历基本就凉了"}, {"id": "6844903568185491463", "title": "面试分享：2018阿里巴巴前端面试总结(题目+答案)", "desc": "脑子混了记得不多了，记得多少就记录多少吧。。。。"}, {"id": "6844903805536993287", "title": "记录一次蚂蚁金服前端电话面试", "desc": "坐标杭州，18年毕业，算上实习一年半开发经验。是外派的面试，后面两面都是阿里的面试官。 本来是给我发的在线测评，但是那边服务器出现问题，我一直打不开网页，最后只好以电话问答的形式。下面我写的大部分都是测评里的题目，部分是电话里新增的题目。。。 如果存在则进行跳转，break。不…"}, {"id": "6990549142418227237", "title": "2021-前端面试（101道高频基础题）", "desc": "自我整理的一些高频面试基础题，偏初学者、应届生，觉得有用的掘友给个小爱心，谢谢！涉及方面：HTML/CSS/JS/ES6/ES7/浏览器/存储/跨域/性能优化/手写题/场景题/新特性/排序算法...."}, {"id": "6877512572178808845", "title": "一个例子来认识闭包是什么,为什么需要它", "desc": "🌰：某一天，总监通知你，需要在公司页面上显示一个浏览时间，从打开页面的瞬间开始计时，每过一秒钟加一。 这个业务的本质就是实现一个累加器，每过一秒钟自增一次。好的，我们开始依次实现。 首先，最简单的“每隔一秒加一“，我们立刻就能想到设置一个定时器，每隔 1 秒钟调用一次累加器，…"}, {"id": "6903295387302526990", "title": "jsliang 求职系列 - 35 -Webpack 性能优化", "desc": "本文从这 2 个角度出发，收集一些相关优化资料。 resolve.modules 用于配置 Webpack 去哪些目录下寻找第三方模块，默认是 ['node_modules']。 但是，它会先去当前目录的 ./node_modules 查找，没有的话再去 ../node_mod…"}, {"id": "6844904147167215624", "title": "手撕ts面试题——不能不掌握的ts高级特性（三）", "desc": "在上一篇我重点讲述了 ts 的 keyof、in 以及 infer。本期将结合一道笔试题重点讲述 ts 的一些其他内置操作符 。 首先还是先讲述一下ts中的这些高级操作符，如果都已经掌握了，可以直接跳到末尾的手撕笔试题。手撕笔试题 Partial 将属性变为可选属性。举个栗子，…"}, {"id": "6844903621021138957", "title": "JavaScript深拷贝的一些坑", "desc": "可以从中看出，obj中的普通对象和数组都能拷贝，然而date对象成了字符串，函数直接就不见了，正则成了一个空对象。 JavaScript的深拷贝还不止上面所说的这些坑，还存在的问题有如何拷贝原型链上的属性？如何拷贝不可枚举属性? 如何拷贝Error对象等等的坑，在这里就不一一赘…"}, {"id": "6996996702167105550", "title": "读懂babel编译流程，还怕面试官刁难不成", "desc": "Babel 是一个 JavaScript 编译器。（把浏览器不认识的语法，编译成浏览器认识的语法。详细流程见内文.."}, {"id": "6904994458303987720", "title": "前端实习面经", "desc": "不到20分钟的电话面，面完后就被录了，感觉流程不是很正规，所以感觉公司太小了。 关于项目的问题太多了，我本身做的高仿小米商城，就是跟着教程做的，所以深入一点的东西都回答不上来，他问，做项目的过程中有没有遇到什么难点，我说有，项目我用的Vue框架，但子组件更新后，父组件不更新，导…"}, {"id": "6844904197675040775", "title": "进大厂连载 6/15：如何拿下蚂蚁金服 P6 的前端 Offer", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 大家好，我是来自蚂蚁金服花呗 &#x26; 借呗团队的前端工程师，我的花名是井葵。我这次分享的主题是《从 N 次失败中找到进入大厂的一些小招》。 我的个人…"}, {"id": "6959943811342532638", "title": "记录一次一线大厂的面试记录", "desc": "1.算法题：实现一个链接，可以新增节点，删除节点 2.实现一个instanceof方法 3.响应式布局怎么实现 rem布局 flex布局 rem 4.事件循环机制 1.一开始整段脚本作为第一个宏任务执"}, {"id": "6929281260045434894", "title": "常见的web攻击方式及防护方法", "desc": "1. 跨站脚本攻击(XSS) XSS(cross site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶…"}, {"id": "6996244238971174926", "title": "面试题-css篇", "desc": "1. 盒子模型都有什么，解释下box-sizing属性（一定要会，问到好几次） 2. 选择器的权重（必须要会） 3. 清除浮动（适当背一些）   4. 盒子水平垂直居中（适当背一些）   5. Css"}, {"id": "6844904142289256461", "title": "2020 面试题+答案=找工作的你", "desc": "春季永远都是找工作最好的时间，然而今年疫情影响之下，找工作却变成了一个危机，所以建议大家眼下保住工作是最重要的。如果目前您走上了找工作之路，那么这篇纯手工原创面试一定会帮助到您。 面试我们肯定要用简洁凝炼的语言回答面试官，不能再啰哩啰嗦讲一堆，如果您对某个面试题知识点不理解，可…"}, {"id": "6905890031907373064", "title": "jsliang 求职系列 - 42 - CSS 基础", "desc": "CSS 基础有很多内容，需要细细理解，毕竟有时候用得不多，除非你是做移动端或者交互比较多的项目。 不同浏览器对 Web 标准默认值不同，所以更容易出现对浏览器的兼容性问题。 在 CSS 中，如果对于相同元素针对不同条件的定义，适宜将最一般的条件放在最上面，依次向下，保证最下面的…"}, {"id": "6986513470959124487", "title": "前端面试题目—css", "desc": "这是我在掘金写得第一篇文章，整理记录自己最近找工作中，面试官常问得最多的css方面的问题，后续还有其他系列，敬请期待哦。根据面试官的水平以及面试官擅长的技术点的不同，每场面试的侧重点会有很多不同"}, {"id": "6844903793729994766", "title": "2019 面试实战 - 第二回合", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 并不是只有…"}, {"id": "6892555927770103822", "title": "jsliang 求职系列 - 07 - Promise", "desc": "本文原内容为 2.3w 字数，但是因为文章字数限制，所以去除了目录导航功能。 本文会结合 Promise 知识点 + 训练题的形式进行讲解。 如不太了解这些知识点，请先点击前往观看，避免走火入魔。 越接近底层，技术含量越高。 每个程序员都有读懂底层源代码的追求。 这在一定程度上…"}, {"id": "6844903823694102535", "title": "繁花五月，刚出炉的前端面经千万不要错过|掘金技术征文", "desc": "你好呀，我是wangly，一名下班摸鱼的前端老倒霉蛋了。受疫情影响，今年初中级岗位普遍少了好多，此时的我已经抱着手机留下了悲痛的泪水。先来说下我的故事吧。然后在总结下对线复盘。 整体都在追问或者被追问的情况下。面试精心动魄。像极了当年的Ryu被丝血反杀。对线时长2个小时15分钟…"}, {"id": "6976903897637978149", "title": "防抖和节流", "desc": "防抖：当一段时间内连续多次触发某事件时，只执行最后一次。节流：当一段时间内连续多次触发某事件时，每个间隔时间内只能执行一次，过了间隔时间才能执行下一次。"}, {"id": "6874852295348060167", "title": "前端【基础知识】 ③异步（场景题）", "desc": "同步和异步的差别就在于这条流水线上各个流程的执行顺序不同。 同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有等主线程任务执行完毕，\"任务队列\"开始通知主线程…"}, {"id": "7000375892417445901", "title": "成都 -知道创宇 面试总结", "desc": "24号，面试了一家成都-知道创宇，相比上次的面试，这次还是有一些的进步，但遗憾的是未能入围下一轮面试；知耻而后勇，再接再厉，总结总结，迎接下一次的面试！ 自我介绍+项目介绍 面试题 1.介绍弹性布局 "}, {"id": "6859957035321016328", "title": "面筋系列①——滴滴sp一面面试真题", "desc": "最近在看一些面经，去看看别人面试遇到的题目，然后每看一篇面经就整理一次题目及答案。（之后大概率会持续更新） 本文是因为最近投了个滴滴的前端实习岗位，所以在牛客查了查有关滴滴的面经，于是乎看到这个 滴滴sp前端一面 ，整理了一下关于里面题目的答案。当然啦，如果哪里讲得不好的或是讲…"}, {"id": "6968636979630047239", "title": "防抖/节流到底解决什么问题？", "desc": "有这么一句话“一个好的问题，比正确的答案重要”，也许这样能更好的帮助我们改变对原有的一些看法。 防抖/节流到底解决什么问题呢？ 对于用户而言，过程只是获取结果的一个中间产物，比如用户在input 框中"}, {"id": "7000632420714151949", "title": "什么是vue的计算属性？", "desc": "1.什么是计算属性 计算属性的重点突出在属性两个字上(属性是名词)，首先它是个属性，其次这个属性有计算的能力(计算是动词)，这里的计算就是个函数;简单点说，它就是一个能够将计算结果缓存起来的属性(将行"}, {"id": "6998473838061158430", "title": "JavaScript 高频面试题2021", "desc": "JavaScript 高频面试题2021 闭包 原型 原型链 ES6新增 继承 节流 防抖"}, {"id": "6891791033613746189", "title": "jsliang 求职系列 - 05 - this", "desc": "作用域链和 this 是两套不同的系统，它们之间基本没太多联系。 this 是和执行上下文绑定的，也就是说每个执行上下文中都有一个 this。 全局执行上下文中的 this 是指向 Window 的。 记住 this 就是谁调用它就指向谁。 我们在全局对象中调用 foo，实际上…"}, {"id": "6844904163936043022", "title": "腾讯两道手写面试题，进来看一下？", "desc": "近期有一些同学面试腾讯研发部，回来后跟我交流，腾讯面试整体还可以，但是有两道笔试题，当时做得很乱，后来因为这两道笔试题被拒绝了。 那我拿到这两道面试题后，并没有去搜索答案，大致心里有一些思路，做完以后又去参考了一些其它答案，整体都差不多，今天通过博文的形式给大家整理出来。 目前…"}, {"id": "6942082913387151367", "title": "为何面向手写代码常被吐槽，但其仍未动摇？", "desc": "又一年金三银四到来，似乎 “面向手写/机写代码面试” 已经成为一些公司的必备面试之一了，在互联网面试中也占据着重要地位，当被面试手写代码时，刚开始自信心爆棚，有种提笔就来的感觉，上来就是一顿写、一顿画，然后写完又删。。。如果是在白板应该就是反复的涂画了，因为没有经过一些思考，没…"}, {"id": "6844903598812299271", "title": "面试：页面加载海量数据", "desc": "可能在看到这个问题的第一眼，我们可能会想到这样的解决办法：获取 ul 元素，然后新建 li 元素，并设置好 li 的文本内容和监听器绑定，然后在循环里对 ul 进行 append 操作，即可能想到的是以下代码实现。 实践上述代码，我们发现界面体验很不友好，卡顿感严重。出现卡顿感…"}, {"id": "6844904121510854664", "title": "「面试题」那些年与面试官交手过的HTTP问题", "desc": "本文已收录在Github github.com/Geekhyt，感谢Star。 从淡黄的长裙和蓬松的头发我察觉到，面前坐着的这位女面试官属实是有点东西。我的自我介绍也变得声情并茂起来。Skr~~~ 在此期间，小姐姐面无改色的看着我的简历。不过无所谓，这些都不重要。 还是咱们的原…"}, {"id": "6917044041863397383", "title": "前端HTML5面试官和应试者一问一答 | 七日打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 希望可以通过这篇文章，能够给你得到帮助。(感谢一键三连) url类型：专门为输入url地址定义的文本库，在验证输入文本的格式时，如果文本框中的的内容不符合url地址的格式，会提示验证错误。 email类型：专门是…"}, {"id": "6844903999305416712", "title": "下一站，开启新的篇章", "desc": "经过了半年的思考，加上一个触发的契机，终于下定决心准备跳槽了。9月下旬开始准备，国庆回来开始面试，经历了煎熬与等待，终于在10月底，收获了阿里的offer，然后11月初，又拿到了头条的offer，算是在进入寒冬前，为自己做好了保暖工作吧。 我面的不多，先后就面了阿里、猿题库、3…"}, {"id": "6844903861736439822", "title": "前端面试-性能优化篇", "desc": "浏览器一般会限制每个域的并行线程（一般为 6 个，甚至更少），使用不同的域名可以最大化下载线程，但注意保持在 2-4 个域名内，以避免 DNS 查询损耗。 缓存DOM属性和元素、把DOM集合的长度缓存到变量中并在迭代中使用。读变量比读DOM的速度要快很多 可以使用第三方工具。浏…"}, {"id": "6844903938655780878", "title": "从url到页面渲染：我们能做哪些优化", "desc": "在前端面试中，有一道经典的面试题：请描述一下从url输入到页面渲染的过程。这道题很考察候选人的能力和知识深度， 今天我们以这个问题为基础，讲一下在此过程中能做哪些优化。 接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网…"}, {"id": "6844903497075261453", "title": "clear与BFC对浮动的影响", "desc": "本次是一个基础不能再基础的复习贴。旨在了解人人皆知的浮动，以及通过clear与bfc清除浮动的一些规范上的解释。"}, {"id": "6921561195371577357", "title": "面向对象（JS继承）", "desc": "1、js2、后台语言（重载）3、js中的重载（根据传递的参数不同做什么样的事）4、js中继承（原型继承）（1）继承目的（2）定义两个类（3）继承之后（4）画图理解（5）原型继承（6）重写5、call继"}, {"id": "6944319937548648455", "title": "js中基础数组排序方法", "desc": "1. 冒泡排序 2. 插入排序 3. 快速排序 【递归】"}, {"id": "6844903587030515719", "title": "让 BAT Offer 不再难拿", "desc": "最近有幸受老师邀请，总结一篇关于应届生校招求职的文章，我将它分享出来，希望可以帮助到跟我曾经一样找工作迷茫的同学。"}, {"id": "6844903894917595144", "title": "【2】JS 继承机制（一）", "desc": "了解了js继承的设计思想后，我们需要学习原型链上的第一个属性prototype，这个属性是一个指针，指向的是原型对象的内存堆。从阮一峰老师的文章中，我们可以知道prototype是为了解决构造函数的属性和方法不能共享的问题而提出的，下面我们先实现一个简单的继承： 问题又来了，可…"}, {"id": "6920341809553997832", "title": "1、let、const、var、function的区别", "desc": "1、（let和const区别）let声明的是变量const声明的是常量（这种说法是错误的）const声明的变量不能修改此变量的关联指向2、重复声明:相同上下文中，var允许重复声明「只识别一次」；le"}, {"id": "6970206621339222046", "title": "快速排序", "desc": "快速排序是首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它左边，所有比它大的数都放到它右边，然后再按此方法对这两部分数据分别进行快速排序，让整个数据变成有序序列"}, {"id": "6951961967892381703", "title": "【逐点突破系列】前端面试必备——异步（Promise）", "desc": "通过手写符合A+规范的promise，来深入了解Promise，再结合相关面试题，争取做到在面试的时候，如果问Promise,咱们能全方位吊打面试官。下面的每一个写法都对应Promise的一些特性.."}, {"id": "6914179596376080397", "title": "【Daily Interview】- 16 遍历二叉树", "desc": "要解决今天的问题，首先要明白什么是前序遍历，什么是中序遍历，什么又是后序遍历。 前序遍历：根 → 左 → 右。上树遍历结果如下：[1, 2, 4, 5, 3, 6, 7] 中序遍历：左 → 根 → 右。上树遍历结果如下：[4, 2, 5, 1, 3, 6, 7] 后续遍历：左 …"}, {"id": "6871146162070487053", "title": "前端面试系列【013】 - vue 中组件之间通信的方式有哪些？", "desc": "可见，在不使用第三方库的情况下，vue 中共有 8 种方案实现组件间的通信。 下面就分别看看这些方案具体的用法，以及使用场景。 使用场景非常广，几乎所有父组件往自组件传值的场景都能用到。 我们知道，vue 是单项数据流的。也就是说，数据可以直接从父组件到子组件，但却没法直接从子…"}, {"id": "6904455832403083277", "title": "【Daily Interview】 - 01 实现一个简单的仓储系统", "desc": "题目看起来比较模糊，其实核心就是实现 object 的扁平化，这样就能够很好的比较 in 和 out 的数据，从而判断是否爆仓了。 了解过深克隆的读者应该立马就会想到思路：递归。"}, {"id": "6942782554449641480", "title": "JS", "desc": "近日被各种大中小厂问到的，我和其他两个同事的面题汇总，无非就是些基础的题目以及深入追问。小弟不才，贴上问题的同时也加入了自己的口头总结，大神可以忽略或者自行搜索答案。 处理html标记并构造DOM树，没有async或者defer的script会阻塞渲染并停止html的解析，预加…"}, {"id": "6917824493893844999", "title": "【Daily Interview】- 24 三数之和", "desc": "这道题是两数之和的进阶，感兴趣的读者可以先去看一看。 在前面的文章中已经提到过，对于数组问题，通常会使用双指针来解决问题，这里也不例外。 首先题目中要求不能出现重复的三元组，对于这个要求，我们可以借助额外的空间来进行判断，而这里使用方法是：先排序，然后在找答案的过程中跳过重复的…"}, {"id": "6950267819380441095", "title": "前端应届生如何找一份好工作？过来人的建议一定要看", "desc": "前言目录：文章会从这几方面聊聊如何拿到一份好的春/秋招offer，找到一份好工作：什么时候要开始准备找实习和工作？流程是怎么样的？技术面试要准备什么？怎么准备比较高效？怎么面试比较容易通过？分享一下我"}, {"id": "6909375237771493383", "title": "【Daily Interview】- 09 有效括号", "desc": "要解决这个问题，我们可以借助一种数据结构：栈。"}, {"id": "6844903880375943175", "title": "我都知道的CSS", "desc": "我本来想凑齐20个我知道的CSS，看着体面些，后来发现我都知道的CSS是因为我知道的太少了。 盒子实际内容（content）的width/height=我们设置的width/height;盒子总宽度/高度=width/height+padding+border+margin。 …"}, {"id": "6911188397679706126", "title": "【Daily Interview】- 12 反转链表", "desc": "这个问题的思路比较简单直接：我们只需要在遍历链表的途中，将指针反转过来即可，具体示意见下图。 而具体细节我们只需要一个中间变量来保存 next，在反转节点之后，通过 next 往后遍历链表即可。"}, {"id": "6844903508534296590", "title": "前端面试&滴滴实习心得", "desc": "从大二下学期放暑假开始（7.14）到8月初，我一直在寻找一份实习，锻炼一下自己，看看学的怎么样。这期间，我相继面试了小米、途牛、滴滴和百度，都拿了实习offer。其中百度拿了两次实习offer，但由于我自身一些原因，都爽约了。（在这里给百度真诚地道个歉，我非常珍视这两次机会，但…"}, {"id": "6904593734168477710", "title": "[概念细节] 一文说透 JS 中的数据类型", "desc": "数据类型 系列开篇 面试题 js中的基本类型可以列举下吗 基本类型和引用类型区别 强制类型转换的一些手写问题 数据类型判断方法 什么时候自动转换为string类型 Object.is和===的区别 ."}, {"id": "6901981592458444807", "title": "[核心概念] 一文说透前端浏览器缓存", "desc": "使用缓存本质上就是为了节省网络传输资源的一种手段。重用已获取的资源，减少延迟与网络阻塞。 我们先讨论浏览器的缓存机制。有个比较混淆的概念是: 前端数据存储(缓存)方案【关联概念】(Storage、IndexDB、Cookie等)我们分下次讨论。 浏览器对于缓存的处理是根据第一次…"}, {"id": "6844903521268203528", "title": "[面试∙网络] TCP/IP（五）：TCP 协议详解", "desc": "上一节 中讲过，TCP 协议是面向有连接的协议，它具有丢包重发和流量控制的功能，这是它区别于 UDP 协议最大的特点。本文就主要讨论这两个功能。 丢包重发的前提是发送方能够知道接收方是否成功的接收了消息。所以，在 TCP 协议中，接收端会给发送端返回一个通知，也叫作确认应答（A…"}, {"id": "6844904199747010573", "title": "闭包到底是什么?", "desc": "闭包闭包,闭包是JavaScript最强大的特性，没有之一,很多强大JavaScript库比如jQuery、Vue.js都使用了闭包的特性来实现的。闭包几乎是一线互联网企业面试必问的题 「每个人的理解都不一样,我用深和浅来概括一下。」 由于闭包会引用包含它的外层函数作用域里的变…"}, {"id": "6847902218583031822", "title": "JavaScript中let和var区别详解", "desc": "带function的不仅声明，而且还定义了（defined），准确来说就是让变量和某个值进行关联。 1. let和const不存在变量提升机制 2. var允许重复声明，而let不允许重复声明 所谓重复就是：不管之前通过什么方法，只要当前栈内存中存在了这个变量，我们使用let/…"}, {"id": "6981420635645804557", "title": "跨域及其解决方案", "desc": "为什么会有跨域？ 出于安全性考虑，浏览器限制脚本内发起的跨源HTTP请求。例如，XMLHttpRequest和Fetch API遵循同源策略。"}, {"id": "6945342399753240583", "title": "了解防抖和节流", "desc": "我们在前段界面的操作中，有些事件我们是无法控制触发频率的。 如鼠标移动事件onmousemove, 滚动滚动条事件onscroll，窗口大小改变事件onresize，亦或者手抖多次点击了按钮等等；瞬间的操作都会导致这些事件会被高频触发，如果这些事情的回调函数比较负责的话，就会出…"}, {"id": "6844904022999040008", "title": "日问周刊 | 全栈面试汇总 | 第六期", "desc": "我在 github 上新建了一个仓库 日问，每天至少一个问题。有关全栈，graphql，devops，微服务以及软技能，促进职业成长，欢迎交流。"}, {"id": "6981358153736650765", "title": "JS-防抖&节流", "desc": "每日一问：你知道啥是防抖和节流吗？？？ 答：防抖是当持续触发事件时，从最后一次触发时间起延迟delay秒执行，忽略掉之前的触发，若delay时间未到又触发了，则从这次触发重新计时delay秒执行，以此"}, {"id": "6921985542879969294", "title": "模拟实现new操作符", "desc": "JavaScript 提供了Object.create()方法，用来满足这种需求。该方法接受一个对象作为参数，然后以它为原型，返回一个实例对象。该实例完全继承原型对象的属性。 新建一个空的构造函数F，然后让F.prototype属性指向参数对象obj，最后返回一个F的实例，从而…"}, {"id": "6966119071796428831", "title": "【知识梳理】2.JavaScript_5.25", "desc": "JS 数据类型 基本类型（存栈）：Bboolean、Number、String、Undefined、Null、Symbol、BigInt 引用类型（存堆）：Object 类型判断 typeof，用于除"}, {"id": "6946014355158728717", "title": "interview准备4-持续更新中", "desc": "一  HTML页面重绘和重排 1.1  浏览器的运行机制 1，构建DOM树(parse)，渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node(包括js生成的标签)生成内容树（Con"}, {"id": "6844904153764888590", "title": "函数=>构造函数=>对象=>原型与原型链=>类", "desc": "1. 理解特性 一般来说，一个函数是可以通过外部代码调用的一个“子程序”（或在递归的情况下由内部函数调用）。 在 JavaScript中，函数是头等(first-class)对象，因为它们可以像任何其他对象一样具有属性和方法，也可以赋值给变量或作为参数传递给其它函数。(它们与其…"}, {"id": "6844903597386252296", "title": "Modern Javascript Cheatsheet 简体中文版（持续更新中）", "desc": "Modern Javascript Cheatsheet 整理了在当前项目经常需要查阅的Javascript知识，并给出了常见的代码示例。 它在github上有一万多个star。之前的中文翻译还停留在６个月前，没有进行更新。 为此，Breword翻译小组对最新版本的文档进行了翻…"}, {"id": "6913068634944962567", "title": "12月31日面试总结", "desc": "Symbol 生成一个全局唯一的值。"}, {"id": "6844903604004847630", "title": "JS进阶(3)：人人都能懂的继承", "desc": "在上一篇文章中，我们主要介绍了 JavaScript 中原型对象的概念。这篇文章我们来聊一聊 JavaScript 中的继承。 相对于 JavaScript 来说，在其他一些面向对象的编程语言中，继承主要指的是父类和子类的一些关系。而在 JavaScript 中，继承主要是基于…"}, {"id": "6945387567210561549", "title": "2021年面试前端初中级岗位需要注意什么？（面试官角度分享）", "desc": "整体业内范围要注意啥，要视情况而论，说了怕误导大家。 1、千万别太夸张了，记得遇到过好多次了，比如。面试时候说搞过 webkit，结果稍微稳点说是只看过 code，没上手玩过，再稍微问点，就成了只看过相关 blog …… 替换 webkit 为任意框架库，经历这个过程的也很多……"}, {"id": "6844903597000359943", "title": "一名2018年应届生的美团前端校招面试之旅", "desc": "首先介绍一下本文的主角：一名18年应届生，普通二本，学习能力一般，技术能力更是一般，前端小白，但是在努力学习中。 从17年秋招开始我便向美团投了简历，也参加了在线笔试，但是输的很惨淡，笔试没过后，来继续在武汉找了家小公司实习。春招开启之际，我尝试过投了斗鱼（没有获得面试机会），…"}, {"id": "6844903718102499342", "title": " 2018.11.19秋招末第二波前端实习/校招小结", "desc": "一是面试官比较有经验不会生硬的只问知识点，会结合实际聊些技术上或者业务上的东西，一些遇到的坑，很容易产生共鸣，技术比较强你说什么都能hold住并跟你聊，入职后一般也都是他来带你，这种感觉比较轻松活跃也不用准备很多或者刷很多面试题。 第二种面试过程基本上一问一答，面试官会准备好问…"}, {"id": "6844904098882387981", "title": "2020前端面试，你准备好了吗？", "desc": "求职季又到了，最近也面试了不少web开发同学，本文也希望对正在找工作的同学有所帮助吧。第一次在掘金写文章，请大家见谅哈。后面会持续更新，欢迎点赞~~~ 当我们收到一份面试邀请时，我们可以对jd做分析，看看工作的内容和具体的岗位要求，知己知彼百战百胜。在网上找了一份前端岗位的jd…"}, {"id": "6868202753257275406", "title": "ES6 核心知识点", "desc": "let的用法类似于var，但是let只在代码块内有效，所以我们一般在代码块内用let替代var。而用const声明常量。 变量可在声明之前使用。 var 命令经常会发生变量提升现象，按照一般逻辑，变量应该在声明之后使用才对。为了纠正这个现象，ES6 规定 let 和 const…"}, {"id": "6844903608601804814", "title": "JS事件循环，了解一下?", "desc": "在理解事件循环之前，我总会遇到一些奇奇怪怪的问题：比如明明已经调接口拿到了数据，可是跟在调数据之后的操作却没有正常执行；又或者不知道为啥，代码里非得加个setTimeout才能正常跑通；特别是在运用Promise的时候，更是有各种问题百思不得解。遇上问题要解决，更要知道问题产生…"}, {"id": "6979029236812087304", "title": "数据响应式原理", "desc": "let obj = { name: '小铭', age: 20, b:{ index:10, c:{ n:20 } }, ary:[11,22,33,44] } // 获取数组的原型 原型上有数组的基"}, {"id": "6844903629992755213", "title": "浅解前端必须掌握的算法（五）：堆排序（上）", "desc": "虽然前端面试中很少会考到算法类的题目，但是你去比如像腾讯一样的大厂面试的时候就知道了，对基本算法的掌握对于从事计算机科学技术的我们来说，还是必不可少的，每天花上 10 分钟，轻松了解基本算法概念以及前端的实现方式。 另外，掌握了一些基本的算法实现，对于我们日常开发来说，也是如虎…"}, {"id": "6844904128364150797", "title": "[ 面试系列 ] - 八：说一下 CSS 选择器优先级", "desc": "这说的是人话，浅显易懂，想必就不用上翻译咕咕咕了。 事实上，CSS 还有组合器和组合选择器可以帮助我们更好的选择到目标元素，不过这和优先级关系不大，所以就不放在这里提了，有兴趣的同学可以看看工具书。 想必大家都很清楚，最后 div 的颜色会是蓝色，那么为什么会出现这种情况呢？这…"}, {"id": "6844903582408376334", "title": "JavaScript EventEmitter", "desc": "2个多月前把 Github 上的 eventemitter3 和 Node.js 下的事件模块 events 的源码抄了一遍，才终于对 JavaScript 事件有所了解。 上个周末花点时间根据之前看源码的理解自己用 ES6 实现了一个 eventemitter8，然后也发布到…"}, {"id": "6950287576628461599", "title": "前端算法面试必刷题系列[36]", "desc": "63. 每日温度 (daily-temperatures) 64. 柱状图中最大的矩形 (largest-rectangle-in-histogram)"}, {"id": "6942855133432971271", "title": "「Tips」一道关于Promise面试题", "desc": "在微信公众号上看到的。试着解答了一下，并记录一下思路。 题目如下: 实现batcher函数，并且fn只能被调用一次。 这三次batchedFn的执行是在同一个宏任务中，并且题目需要fn只能执行一次，所以我们需要使用一个额外的变量保存三次传入的参数，并且需要将fn的执行延后到本次…"}, {"id": "6969797532687794183", "title": "『前端大白话』之 “flex:1”", "desc": "通俗易懂的大白话。 你懂了吗？懂了。 flex : 1 和 flex : auto 有何区别？"}, {"id": "6855456589282410509", "title": "「译文」你必须掌握的 7 种 JavaScript 错误类型", "desc": "从浏览器控制台到运行Node.js的计算机终端，我们到处都会看到错误。 这篇文章重点介绍了在JS开发过程中可能遇到的 7 种错误类型。 1. RangeError 范围错误 当数字超出允许的值范围时，将抛出此错误；或者JS执行进入死循环。 我们有一个数组，带有两个元素的arr。…"}, {"id": "6847902219740823565", "title": "闭包，this，作用域链，原型链", "desc": "执行环境是Javascript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中 全局执行环境一般是window对象，因此所有全局变量和函数都是作为wind…"}, {"id": "6844904144864542733", "title": "（立下flag）每日10道前端面试题-15 关于【高级技巧】十问", "desc": "1.不能判断变量具体的数据类型比如数组、正则、日期、对象，因为都会返回object,不过可以判断function，如果检测对象是正则表达式的时候,在Safari和Chrome中使用typeof的时候会错误的返回\"function\",其他的浏览器返回的是object. 明明都是n…"}, {"id": "6897844050297094158", "title": "从Vue源码的角度解析面试题[一]", "desc": "经常见到有人问看某某某源码有没有用，从我个人的经历来说（虽然我的经历也不长），我觉得是很有用的，而且非常有用。看一些框架和库的源码可以让我们了解到其中的某些特性是怎么实现的，使我们对这些技术更加熟悉；另一方面，看源码的过程也是个学习的过程，你可以学习整个项目的架构，学习作者的思…"}, {"id": "6845166891187585038", "title": "输入URL页面上会发生什么?", "desc": "scheme 表示协议名，比如http, https, file等等。后面必须和://连在一起。 user:passwd@ 表示登录主机时的用户信息，不过很不安全，不推荐使用，也不常用。 host:port表示主机名和端口。 path表示请求路径，标记资源所在位置。 query…"}, {"id": "6913761224228356110", "title": "[每日一题]面试官问：谈谈你对ES6的proxy的理解？", "desc": "2020.12.23 日刚立的 flag，每日一题，题目类型不限制，可以是：算法题，面试题，阐述题等等。 Proxy，代理，是ES6新增的功能，可以理解为代理器（即由它代理某些操作）。 Proxy 对象用于定义或修改某些操作的自定义行为，可以在外界对目标对象进行访问前，对外界的…"}, {"id": "6844903508706066445", "title": "深入React的生命周期(上)：出生阶段(Mount)", "desc": "本文是对开源图书React In-depth: An exploration of UI development的归纳和增强。同时也融入了自己在开发中的一些心得。 你或许会问，阅读完这篇文章之后，对工作中开发React相关的项目有帮助吗？实话实说帮助不会太大。这篇文章不会教你使…"}, {"id": "6922438753063534599", "title": "[每日一题] 简述浏览器事件循环运行机制", "desc": "我们先看下面一段代码：输出结果为：scriptstart-> async_func1start-> async_func2start-> promise1-> promise1resolve-> as"}, {"id": "6922485414389350407", "title": "闭包作用域练习题", "desc": "1、2、3、我们需要理解映射机制在什么阶段建立（只有在形参赋值阶段建立）4、5、6、7、8、"}, {"id": "6862204745512452104", "title": "WEB前端工程师到底需要掌握一些什么技能、需要到达怎样的程度、才可以去找工作呢？", "desc": "把 html、css、 js 基础学扎实，再掌握vue或react前端框架之一就可以了。 真的是这样吗？技术上看似乎没问题，但是找工作不只要从技术上下手，还要从个人目标和公司的招人标准综合进行考量。那么接下来，我们从这几个方面来分析一下，前端工程师找工作的必要条件。 现在我们的…"}, {"id": "6996186508323782664", "title": "面试官最喜欢问☞Vue、React专题", "desc": "vue React专题贴，每月持续更新面试题动向。适合初次全面复习的同学，查缺补漏，知识面比较全，复习完成后，再按照本人整理的面试高频题配合复习，使得找工作事半功倍，一定要理解，不要死记硬。"}, {"id": "7005828880443375646", "title": "Promise的串行调用", "desc": "作为一个前端渣渣，昨天面试遇到了一个Promise串行执行的一道面试题，当时没有做出来，今天重新思考了一下，做一个小总结。 题目 先看一下题目，题目的大致意思是，给你一段不完整的代码，进行补充 先定义"}, {"id": "6998511428411850760", "title": "『面试的底气』—— 设计模式之职责链模式（二）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6922290178836922381", "title": "2021 千字大厂面经 & 个人成长经验分享", "desc": "本人背景渣渣，较晚入行。在一家公司囫囵了三年，2020 年年末，我离职了，因为深刻意识到自己有多 \"菜\"，想专心花点时间提升自己。经过亿点时间的调整，我重装上阵。由于节前时间有限，只投了几家，当然都是找人内推的。 主要围绕几个点：个人信息、最近的公司职责和涉及的业务、主要技术栈…"}, {"id": "6855129007852093453", "title": "「一劳永逸」送你21道高频JavaScript手写面试题", "desc": "基本上面试的时候，经常会遇到手撕XXX之类的问题，这次准备梳理总结一遍，巩固我们原生JS基础的同时，下次想复习面试手撕题的时候，找起来方便，也节省时间。 梳理的顺序是随机的，不按照难以程度。 「节流throttle」，规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触…"}, {"id": "6946136940164939813", "title": "「2021」高频前端面试题汇总之手写代码篇", "desc": "2021 高频前端面试题汇总之手写代码篇，前端面试题汇总系列文章的手写代码篇，长期更新，欢迎收藏、点赞！"}, {"id": "7005022045037658142", "title": "一文解决前端面试③--计算机网络", "desc": "计算机网络知识是每个程序员的必备基础，任何消息文件的传输都与网络相关，本文介绍了作为一个前端应该掌握的计算机网络基础知识"}, {"id": "6994244850002427934", "title": "【手撕】写给中高级前端的 27 道手写题，希望能乘风破浪", "desc": "手写题一直是我的痛点，既然是痛点，那就要去永攀高峰，虽然我也想在哪跌倒就在哪趴着，但是内卷君告诉我：不！你不能！"}, {"id": "6992581497190350855", "title": "『面试的底气』—— 设计模式之里氏代换原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844904080142237703", "title": "诚意满满的前端面试总结", "desc": "我是 2020 届的应届毕业生，去年 5 月份通过春招内推进入到阿里实习，期间也参加过腾讯、网易等多家公司的招聘并拿到了其中的部分 offer。在找实习期间，我通过掘金收获了很多大佬们的经验分享和知识总结，所以总想着自己也应该回馈一波，下面是我对于前端面试中的一些常见知识点和面…"}, {"id": "6989027459601547294", "title": "「干货」面试官问我如何快速搜索10万个矩形？——我说RBush", "desc": "前言 亲爱的coder们，我又来了，一个喜欢图形的程序员👩‍💻，前几篇文章一直都在教大家怎么画地图、画折线图、画烟花🎆，难道图形就是这样嘛，当然不是，一个很简单的问题， 如果我在canvas中画了10"}, {"id": "6948600448388038670", "title": "javascript高频面试题整理", "desc": "整理常见javascript面试题，进行深入的刨析，并且用通俗易懂的方式表述出来，非常容易理解和记忆。"}, {"id": "6971443652191076366", "title": "假如易立竞问你如何判断 JavaScript 中的数据类型？", "desc": "JavaScript 中检测数据类型的方法有哪些你知道吗？typeof、instanceof、constructor、Object.prototype.toString.call()"}, {"id": "6999452525703364622", "title": "老湿说的万物皆对象，你也信？  | 重学JS", "desc": "浑浑噩噩在前端领域磕磕碰碰了两年多，想看看Vue源码，不知道有没有最近想看源码的猿友，如果JS不够硬，建议跟我一起来**重学JS**，重学完相信再去看源码，会事半功倍。 接下来我们来看看数据、变量、内"}, {"id": "6844904086358212621", "title": "进入大厂的面试经验（P7）", "desc": "今年二月以来，我的面试除了一个用友的，基本其他都被毙了，可以说是非常残酷的。其中有很多自己觉得还面的不错的岗位，比如百度、跟谁学、好未来等公司。说实话，打击比较大。 情况基本上是从三月开始好起来的，这个时间点，可能疫情快过去了，国家也开启了接近40万亿的基础建设计划，在这个时间…"}, {"id": "6864398060702760968", "title": "「查缺补漏」我的2020前端面试秘籍，为你秋招保驾护航", "desc": "开门见山，这篇文章，适合「初级前端」，如果你还在校招的话，或者还在求职的话，可以看看本文，找一找灵感，希望对你们有帮助呀。 先说一下最近个人情况：2020年8月底已经拿到网易有道offer, 这算是我的第一份web前端工作吧，一直以来都是自学前端的，走过很多的弯路，之前的技术栈…"}, {"id": "6844903879973273607", "title": "面试官到底想看什么样的简历？", "desc": "面试一直是程序员跳槽时期非常热门的话题，虽然现在已经过了跳槽的旺季，下一轮跳槽季需要到年底才会出现，但是当跳槽季的时候你再看这篇文章可能已经晚了，过冬的粮食永远不是冬天准备的，而是秋收的时候。 简历是你进入面试的敲门砖，也是留给意向公司的第一印象，所以这个很重要，必须在这上面做…"}, {"id": "6999421873968644127", "title": "「面试题」100+道JS代码实现题", "desc": "前几个星期在找工作，刷了100多道题目，在这里总结一下。希望能帮助到大家，不限于算法题，还有很多代码实现题。"}, {"id": "6844903798696067080", "title": "jsliang 的 2019 面试准备", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章中的一些链接可能失效，而 jsliang 缺乏精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 并不是只…"}, {"id": "7001397295912583198", "title": "一道看似简单的阿里前端算法题", "desc": "题目描述 题目分析 解题思路 第一步：构建哈希表，键为目标元素，值为目标元素出现的次数 第二步：对数组去重 第三步：构建大顶堆 第四步：求第k大的元素和第m大元素 第五步：根据哈希表出现的次数计算并返"}, {"id": "6917773373141417992", "title": "你会动态规划吗？", "desc": "复杂问题分阶段简化成简单问题，就是动态规划的思想。 动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。 动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。动…"}, {"id": "7000214255177826335", "title": "前端面试之代码输出结果(二)", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战。 JS运算符 说明 1<2为ture，在这里会隐式转换为1，1<3为true； 3>2为true，在这里会隐式转换为1，1>1为false"}, {"id": "6970675877709348877", "title": "七分钟教会你手写call、apply和bind", "desc": "前言 温习一下 call、apply、bind的异同 共同点： 功能角度：三者都能改变 this 指向，且第一个传递的参数都是 this 指向的对象。 传参角度：三者都采用的后续传参的形式。 不同点："}, {"id": "6976644294740279310", "title": "🔥什么是重绘和重排？ 如何去避免？", "desc": "前言 我们首先来回顾一下渲染流水线的流程: 回流 首先介绍回流。回流也叫重排。 触发条件 简单来说，就是当我们对 DOM 结构的修改引发 DOM 几何尺寸变化的时候，会发生回流的过程。比如以下情况 一"}, {"id": "6844903630592540686", "title": "你不知道的js中关于this绑定机制的解析[看完还不懂算我输]", "desc": "最近正在看《你不知道的JavaScript》，里面关于this绑定机制的部分讲的特别好，很清晰，这部分对我们js的使用也是相当关键的，并且这也是一个面试的高频考点，所以整理一篇文章分享一下这部分的内容，相信看本文的解析，你一定会有所收获的，如果喜欢的话可以点波赞/关注，支持一下…"}, {"id": "6950930422763094029", "title": "「性能优化」首屏时间指标到底如何采集？", "desc": "一、前言性能优化一方面是我们前端经常讨论的话题，另一方面也是我们面试过程中考察的重点。那么，如何来定义性能指标呢？这篇文章我们主要介绍一下首屏时间如何采集。二、采集方式2.1 手动采集一般是通过埋点的"}, {"id": "6996625922832990221", "title": "死锁是什么？面试中是不是也曾听说", "desc": "死锁是什么，以及在并发程序中如何避免死锁一直是面试官偏爱的一个问题。 本文尽量以最简洁的示例来帮助你快速理解，掌握死锁发生的原由。"}, {"id": "6991848846192017444", "title": "利用正则实现千分位分隔｜ 8月更文挑战", "desc": "前言 在一些涉及到比较大的数字的场景中，比如人数，金额等，我们常常需要对这些数字进行千分位，然后逗号分隔，这样会比较好阅读。 比如 如果是千分位分隔 对比这两种，我们肯定是选择第二种，方便阅读。 实现"}, {"id": "6997199396869783588", "title": "CSS实现三角形", "desc": "这是我参与8月更文挑战的第七天，活动详情查看：8月更文挑战 # 前言 原生CSS实现图标 的好处 项目中图标的引入固然方便，但对于简易的图标可以使用CSS实现，来减轻服务器的压力。 思考的过程"}, {"id": "7005170497667203109", "title": "前端实习面试准备--Redux", "desc": "对 Redux 的理解，主要解决什么问题 React是视图层框架。Redux是一个用来管理数据状态和UI状态的JavaScript应用工具。随着JavaScript单页应用（SPA）开发日趋复杂， J"}, {"id": "6907006465861484558", "title": "jsliang 求职系列 - 45 - 设计模式系列汇总", "desc": "设计模式是一门学问，它里面有 22+ 种类的设计模式。 淡淡忧伤：你尽管学，过几个月忘了回来再看看你还懂不懂。 在开始复习设计模式之前，我们回顾下面向对象。 现实可能不会扎你的心，但是 jsliang 会。 ​面向对象（Object Oriented Programming，简…"}, {"id": "6844904194084700174", "title": "进大厂连载 3/15：如何借助 5 道算法题入职 Leetcode", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 开场先来标题党一下，和 Scott 聊天的时候正好说到我入职的经历，然后就有了这次分享，当时我随口报了一个，刷了 5 道题，不过后来我仔细的数了一下发现是…"}, {"id": "6844904170789535757", "title": "面试系列——面经汇总", "desc": "前言正文一面JS基础for循环和forEach循环，哪种性能会好一些let，const和var的区别【给一道题，分析报出什么错误】JS的基础数据类型有哪些什么是Symbol，它的使用场景是什么数组原型"}, {"id": "6879275451047477262", "title": "18道 React 面试精选题含解答「面试高频」", "desc": "React 前端框架的受欢迎程度丝毫木有减弱的迹象，全国许多城市对开发人员仍供不应求。对于经验不足的开发人员（或那些已经失业了一段时间的开发人员），在面试阶段展示您的知识可能会令人生畏。 在本文中，我们将探讨18道面试必考题，这些问题涵盖了对理解和有效使用 React 技术至关…"}, {"id": "6844903497884762119", "title": "腾讯校招前端三面,虐完继续撸|掘金技术征文", "desc": "上星期，参加了腾讯前端校招三次面试，一次电话，两次现场面试。问到的知识广度很全面，深度让人也有点无奈，大部分很多东西平时确实没有深究，深究可能也只是看看别人的博客，没有自己敲代码来实现，问到就会有些模糊，答得不是很好。特别是第三面，让腾讯大佬问得哑口无言，当时真的是欲哭无泪。休…"}, {"id": "6963647394974007304", "title": "前端百题斩【005】—— js中9种遍历对象的方法", "desc": "对象是在编程中最常见的部分，很多情况下需要遍历该对象上的属性，那么有几种方式可以帮助我们遍历该对象上的属性呢？下面一起来了解九种方法。"}, {"id": "6844903705452478478", "title": "三年前端，面试思考（二）", "desc": "没有想到上一篇 《三年前端，面试思考》 有这么多前端同学看到。 在评论区也有很多鼓励和质疑的声音，而且群里面交流的同学两天就达到了700人。 群里有同学问了很多问题，同时希望我再分享一些面试技巧，在这篇文章中我也一并梳理出来。 p6，p7 是个坎。我理解的 p7-技术专家，在某…"}, {"id": "6924228588510281735", "title": "「面试」前端高频CSS面试题及答案", "desc": "首先出这篇文章，一方面是为了记录巩固我所学的知识，明白面试的高频考点。不过我是不鼓励大家背题的，初衷是希望总结的一些面试题能帮助你查漏补缺，温故知新。这些题并不是全部，如果你还想看得更多，可以访问小狮子前端，目前已经有552道大厂真题了，涵盖各类前端的真题，欢迎加入我们一起来讨…"}, {"id": "6919765441292435470", "title": "前端面试题总结", "desc": "函数形参与实参答案是2，3，2；第一个打印的是arguments的长度，要知道arguments是一个类数组，arguments[2]=3，相当于为arguments添加了一个键值对，键名是2，键值是"}, {"id": "6844903569896767501", "title": "分享收集的一大波前端面试题和答案", "desc": "在github上看到的内容很好很丰富的一篇面试题（附带答案），不知道又没有被分享过，拿来分享一下，觉得不错的可以给个star给作者"}, {"id": "6881790461841768455", "title": "前端【基础知识】 ⑥性能优化、Web安全、Linux常用命令", "desc": "根据慕课网的《快速搞定前端技术一面 匹配大厂面试要求》课程所整理的题目，陆续更新。如果你觉得本文相关知识点你已经掌握，你可以查看我之前的相关文章哦 顾名思义，控制水的流量。控制事件发生的频率，如控制为1秒发生一次，甚至1分钟发生一次。与服务端及网关控制的限流类似 ③拖拽一个元素…"}, {"id": "6844903558085607438", "title": "杭州17届前端期待加入一个更好的团队", "desc": "本来想等过完年回来再换工作的，但是前段时间有猎头在简书私信我，说看我的文章写得还行，问我想不想换工作。 然后我就更新了简历，发过去了，邀请我面试，但是这家公司在北京 /西安，后来就没去，但是故事就此开始了，这反而促使我走上了换工作的道路。 自己从大三暑假实习到现在工作半年多，接…"}, {"id": "6844904007488503821", "title": "23 个 Vue.js 初级面试题", "desc": "1. 为什么Vue被称为“渐进框架”？ 使用渐进式框架的代价很小，从而使现有项目（使用其他技术构建的项目）更容易采用并迁移到新框架。 Vue.js 是一个渐进式框架，因为你可以逐步将其引入现有应用，而不必从头开始重写整个程序。 Vue 的最基本和核心的部分涉及“视图”层，因此可…"}, {"id": "6844903728147857415", "title": "面试官问：能否模拟实现JS的call和apply方法", "desc": "其中模拟bind方法时是使用的call和apply修改this指向。但面试官可能问：能否不用call和apply来实现呢。意思也就是需要模拟实现call和apply的了。 在fun函数运行时指定的this值。需要注意的是，指定的this值并不一定是该函数执行时真正的this值，…"}, {"id": "6996673391130312717", "title": "更新面试题系列二（vue相关）", "desc": "1. 浏览器输入一个网址的解析过程 2、vue中的diff算法 3、vue的虚拟dom 4、vue的响应式原理 5、vue3.0的新特性 6、vue中scoped的实现原理 7、vue的key为什么不"}, {"id": "6844903866211762190", "title": "5分钟谈前端面试", "desc": "鉴于经常性有人私聊问我一些关于前端面试的问题，很多时候我比较忙就没回复，然后事后又忘记回复了。借助这篇文章，我做个总结，大家大概花个5分钟就能整体看完。 可以说这是一块敲门砖，一份漂亮的简历不但可以为了获取一个面试机会，还能增加公司对你的好感。在只能通过你简历去了解你的情况下，…"}, {"id": "6844903746044968974", "title": "腾讯面试篇（三）——终章", "desc": "昨天分享第二篇，发现有很多伙伴在评论区要答案，这里申明一下，笔者只会对部分题目提供答案，有一些开放性问题笔者不会提供答案，避免限制了大家的思维，在这里说一声抱歉。 加入心跳机制，巴拉巴拉。 6.有咩有理解过react内部的diff算法是怎么样的？如果让你来设计你会怎么设计。 。…"}, {"id": "6844904122332741640", "title": "2020年4月大厂腾讯前端面经分享", "desc": "给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数二分查找 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 1. 请写出下面代码输出结果以及原因 2. 请写出下面代码输出结果以及原因 3. 请写出下面代码输出结…"}, {"id": "6950085025593294855", "title": "逻辑推理 - 农夫养牛问题", "desc": "题目：一个农夫，买了一头小牛，这头牛，成长到第四年开始，会每年生一头小牛，所生出来的小牛成长到第四年开始，也会每年生出一头小牛，请问 N 年之后，农夫共有多少头牛？"}, {"id": "6939170194367447053", "title": "全面解析URL请求到页面显示完整过程", "desc": "先进行 URL 解析，看看输入的内容是否符合 URL 规则（解析 URL 提取出协议、域名、端口号，对于一些特殊字符，在传递的时候需要进行编码解码）。 URL 符合规则，浏览器进程会通过进程通信将 URL 请求发送给网络进程，网络进程会依次查找 Memory Cache、Dis…"}, {"id": "6934981934887993351", "title": "前端面试之JavaScript基础（五）——  闭包", "desc": "闭包 是一个在 JavaScript 当中比较生涩的知识，它好像一直被一层迷雾笼罩，让人好像理解了又说不上具体是什么。我查看了许多关于讲解闭包的材料，其中有两种对于闭包的解释我认为比较容易被接受： 当创建它的上下文被销毁后，仍能引用该上下文作用域当中的 自由变量 的 函数 称为…"}, {"id": "6844903683340140557", "title": "那些年你踩过的坑，都在这里了～| 掘金技术征文", "desc": "cookie是网站为了标示用户身份而储存在用户本地终端上的数据（通常经过加密），cookie数据始终在同源的http请求中携带，记会在浏览器和服务器间来回传递。 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。 大小： cookie…"}, {"id": "6844903620190666759", "title": "JS深拷贝总结", "desc": "JS的原生不支持深拷贝，Object.assign和{...obj}都属于浅拷贝，下面我们讲解如何使用JS实现深拷贝。 这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 可以看到，函数、正则、Symbol都没有被正确的…"}, {"id": "6892164887456251918", "title": "jsliang 求职系列 - 06 - Event Loop", "desc": "Event Loop 即事件循环，是指浏览器或 Node 的一种解决 JavaScript 单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。 JavaScript 是一个单线程的语言。 单线程在程序执行时，所走的程序路径按照连续顺序排下来，前面的必须处理好，后面的…"}, {"id": "6992786709805006855", "title": "前端面试 - 手写继承", "desc": "必备知识 Object.create() Object.assign() Function.prototype.call()、Function.prototype.apply()、Function.p"}, {"id": "6966875463759331365", "title": "js面试题", "desc": "题目https://juejin.cn/post/6937892567396646948 面试题 1.随机打乱 2.反转 3.找交集 4.手写JSON.stringfy 5.写一个节流函数 6.三次失"}, {"id": "6901070996732641294", "title": "jsliang 求职系列 - 29 - HTTP/HTTPS", "desc": "HTTP 有时候面试官也会问到，简单的诸如 HTTP 状态码、GET 和 POST 区别。 这里会将 HTTP 相关知识点整理过来。 同时，因为是网上查找的资料，未免会有疏漏、错误，欢迎指正。 又因为 jsliang 比较懒，有些图是从一些优秀的参考文章中复制的，如果侵权，立马…"}, {"id": "6952756778954145805", "title": "二本获得实习阿里 offer 经历-准备篇 | 创作者训练营第二期", "desc": "我的摘要又没了！！月亮！凑字！月亮！凑字！月亮！凑字！月亮！凑字！月亮！凑字！月亮！凑字！月亮！凑字！"}, {"id": "6844903759957458952", "title": "「前端面试题系列1」今日头条 面试题和思路解析", "desc": "最近，有篇名为 《8张图帮你一步步看清 async/await 和 promise 的执行顺序》 的文章引起了我的关注。 作者用一道2017年「今日头条」的前端面试题为引子，分步讲解了最终结果的执行原因。其中涉及到了不少概念，比如异步的执行顺序，宏任务，微任务等等，同时作者限定…"}, {"id": "6869279683230629896", "title": "(超详细）从输入url到页面展示发生了什么？", "desc": "从浏览器输入 URL 到页面渲染的整个过程都是由 浏览器架构中的各个进程之间的配合完成。 渲染进程接受到数据，完成页面渲染。 若为url结构的字符串，浏览器主进程会交给 网络进程 ,开始干活。 网络进程拿到url后，先会进行DNS域名解析得到IP地址。如果请求协议是HTTPS，…"}, {"id": "6985061367896080415", "title": "vue前端面试题分享", "desc": "常问点 1.自己封装一个指定的派发功能，派发指定组件的方法 （如 elementUI 的$dispatch 实现） 实现 $dispatch 方法 实现 $broadcast 2. vue 修饰符 s"}, {"id": "6857856269488193549", "title": "『前端优化』—— Vue项目性能优化", "desc": "本文谨以自己的Vue项目经验来教你怎么在面试中说优化，如果有错误，有不足的，请指教，不吝指教，一起进步，找到更好的工作。如果觉得的本文对您有帮助，点个赞支持一下。 我个人认为性能优化可以从三个方面来进行，一是代码层面的优化，二是项目打包的优化，三是项目部署的优化。 开场白切记要…"}, {"id": "6998576161382989861", "title": "秋招保驾护航——HTML、CSS篇", "desc": "应付常见的HTML、CSS面试题，在后面会不断地总结和更新这一部分的内容，以便更好的取迎接秋招，斩获offer！"}, {"id": "7004714201075679268", "title": "前端实习面试准备--React数据管理", "desc": "React setState 调用的原理 首先调用了setState 入口函数，入口函数在这里就是充当一个分发器的角色，根据入参的不同，将其分发到不同的功能函数中去 enqueueSetState 方"}, {"id": "6996505841708826654", "title": "8月更文挑战 | 前端Javascript面试题汇总（概念篇）", "desc": "最近在准备秋招面试，关注了不少前辈们和大佬们的公众号，也拜读了掘金里许多大佬的前端方面的文章，对我而言十分有用，我在下面把他们汇总下来，让自己能够再深入学习。"}, {"id": "6981008468664647717", "title": "记一次微信面试", "desc": "微信是怎么面试的？大佬是怎么提问的？从面试中的交谈中能学到哪些点能帮助？ 写这篇文章时，我并未被微信录取。不过是一次很有趣的经历，还是写下来分享给大家，感受下真正的大牛级工程师。"}, {"id": "6999992768542015525", "title": "前端必刷手写题系列 [21]", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 30. Promise.race 分析 我们之前提到了一个Promise的 api Promise.all, 现在我们实现下 Promis"}, {"id": "7000374304727089159", "title": "前端必刷手写题系列 [22]", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 32. 并发控制 问题是什么 我们在做复杂网站时，往往需要加载数量众多大小不一的资源 比如一个页面启动时需要加载几十张图（甚至更多），这些"}, {"id": "6979423520799817759", "title": "8道JavaScript试题我只答对了一道，附答案解析", "desc": "前言：最近总结了一些自己做题过程中遇到的易错问题，附带解析，希望对大家有帮助。1.下面哪些执行结果为true() A 'foo' == new function(){ return String('"}, {"id": "6997776554428203022", "title": "【前端--面试】常见面试题（三）—— JavaScript", "desc": "今天继续整理面试题目的考察，在题中加固一些常见的知识点。（今天差点忙到忘记更新，在洗漱完想起来~~）"}, {"id": "6989514804679409700", "title": "前端校招如何进阿里/蚂蚁", "desc": "今年春招，我们团队发出了13个offer，最终入职了9个，可以说收获还是不错的。最近秋招又开启了，我今天来讲一下，阿里校园招聘到底是怎么样的要求，方便同学们提前做准备。"}, {"id": "6907374887866892295", "title": "jsliang 求职系列 - 46 - 简历", "desc": "Hello 小伙伴们大家好，2020.09 我们又见面了。 自从 2019 写了 2019 面试系列 - 简历 后，求职完到现在又到了找工作的时候，特地补充完善了 2020 年的简历文章，欢迎关注 Github 里 jsliang 文档库的求职系列：document-libra…"}, {"id": "6844903555824893965", "title": "从2.4万篇文章中挑出的最棒的 JavaScript 学习指南（2018版）", "desc": "全文包含学习指南、新人上手、Webpack、性能、基础概念、函数式编程、面试、教程案例、Async Await、并发、V8、机器学习、数据可视化、调试、单元测试等章节，非常适合用于对自己 JavaScript 技术栈的比对，用于查漏补缺，适合收藏阅读。有删减。文中如有错误，欢迎…"}, {"id": "7000198231623729166", "title": "秋招保驾护航——vue篇", "desc": "秋招保驾护航系列文章正在持续更新，往期文章如下，需者自取： html、css：秋招保驾护航——HTML、CSS篇 js：秋招保驾护航——js面试篇（上）、秋招保驾护航——js面试篇（下） 浏览器：秋招"}, {"id": "6854573219908321293", "title": "十几道大厂全栈面试题总结", "desc": "防抖，顾名思义，防止抖动，以免把一次事件误认为多次，敲键盘就是一个每天都会接触到的防抖操作。 想要了解一个概念，必先了解概念所应用的场景。在 JS 这个世界中，有哪些防抖的场景呢 节流，顾名思义，控制水的流量。控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。与服务…"}, {"id": "6844903745512275982", "title": "腾讯前端面试篇（二）", "desc": "在腾讯前端面试篇（一）中，我主要讲了笔者面试腾讯一面和二面的经历，文章得到了不错的反响，笔者一激动大晚上把女朋友晾在一边，写下了第二篇，现在耳朵和膝盖都还有点痛。第二篇会讲述笔者面试腾讯的第三面，第四面会在后续的文章更新。大家看我辛苦的份上，关注一下呗！ 1. 从输入URL到页…"}, {"id": "6844903800180834312", "title": "阿里前端社招面试总结", "desc": "继上次宇宙条面试之后，笔者备受打击，决定闭关一段时间好好修炼自己的功力，所以暂时将简历隐藏，然鹅突然收到来自阿里巴巴的面试邀约，怀着忐忑的心里开始了阿里的面试之旅。 被告知简历通过评审之后的三天后收到一个来自上海的电话，我怀着半信半疑的心态接通了电话（害怕是办信用卡的）。对面是…"}, {"id": "7000326833740709902", "title": "前端面试-手写深拷贝", "desc": "普通的map对象在存值的时候，会维护两个数组，一个装`key`，一个装`value`。取值的时候会遍历`keyList`找到索引，然后通过索引在`valueList`中取值。"}, {"id": "6932482325159067656", "title": "手撕前端面试之经典排序算法 (动图+视频)", "desc": "排序算法是面试中的高频考察点，我们需要熟练掌握。本文整理了最经典、最常用的排序算法并且搭配了动图和视频，希望能够帮助你更加轻松的理解它们。 顾名思义，比较类排序是通过元素间的比较进行排序的，非比较类则不涉及元素之间的比较操作。 比较类排序的时间复杂度不能突破 O(nlogn)，…"}, {"id": "6844903969345503240", "title": "前端高级面试题@JS篇", "desc": "js中只有词法作用域，也就是说在定义时而不是执行时确定作用域。例如： v8的垃圾回收策略主要基于分代式垃圾回收机制。将内存分为新生代和老生代，分别采用不同的算法。 Scavenge为新生代采用的算法，是一种采用复制的方式实现的垃圾回收算法。它将内存分为from和to两个空间。每…"}, {"id": "6992849109610659853", "title": "vue面试题", "desc": "1、https://blog.csdn.net/shi_xingwen/article/details/114655369 https://www.520mg.com/a/inter/vuetiku/"}, {"id": "6934611455241256967", "title": "前端面试之JavaScript基础（四）——  词法作用域", "desc": "词法作用域 其实是作用域工作模型的一种，JavaScript 遵循的正是这种工作模型。它是定义在词法阶段的作用域，我们了解编译过程中在词法分析的阶段会形成抽象语法树（AST），在同一时间还会根据相应的分析生成对应的作用域。根据这种工作机制我们不难知道，某个标识符属于哪个作用域、…"}, {"id": "6869192920650645517", "title": "前端之路——三个月长假心得", "desc": "从六月裸辞，到九月才拿到offer，转眼已经过了三个月，在这三个月，第一个月还好，后面在被面试折磨一番之后每天都带者焦虑感在学习，也总算是熬到头了（至少重心从找工作，到做好工作）。现在看来，我可能是同届毕业生里走过最多弯路的前端开发了，在面试中，我遇到过两个很好的面试官，一个是…"}, {"id": "6896081326487633934", "title": "jsliang 求职系列 - 16 - 从输入 URL 到页面呈现", "desc": "如果你还不懂，那么可以来看看。 当然，这是整体过程，实际面试过程中会进一步详细问，后面会逐步完善，让小伙伴们对这个系列的问题不在纠结。 DNS 解析过程就是通过网络查找哪台机器有你需要的资源的过程。 浏览器输入 github.com 并不是真正意义上的去查找这个，而是查找这个域…"}, {"id": "6976526787186524168", "title": "leetcode top100挑战, 每天不鸽一道题之 对称二叉树(12/100)", "desc": "给定一个二叉树，检查它是否是镜像对称的。然后需要判断树顶下的左右节点是否存在， 1. 如果左右节点相等，说明两个节点都不存在，这样也是对称的可以直接返回true，因为子节点也不存在，就一个树顶。"}, {"id": "6919360147555024903", "title": "一道面试题是如何引发深层次的灵魂拷问？", "desc": "Hello，豆皮粉们，你们的小可爱来了，这回约稿又得到来自字节跳动的“songEagle ｜ saucxs” ，《一道面试题是如何引发深层次的灵魂拷问？》文章写的由浅入深，从各个方面剖析一道经典面试题需要全方面考虑，尽可能考察整个研发测涉及到的知识点，文章以点带面，详细叙述，可…"}, {"id": "6844904117068890119", "title": "字节跳动-Data-前端开发实习生面经", "desc": "记字节跳动Data前端开发实习面试。 因为原来的面试官临时开会，等了一会换了一个面试官，好事多磨啊。面试气氛还是很和谐的，每块内容都有涉及，并且会深入一些。大概有JavaScript基础、算法、计算机网络、设计模式。 二面的面试官给人的感觉比较”随意“，感觉整个面试就像是在聊天…"}, {"id": "6844904170655334413", "title": "记5.27第一次面试，附题目和答案", "desc": "前几天终于收到人生第一份面试通知，面试了深圳的一家创业型公司，查了一下这家公司还挺不错的，有很大的发展前景，面试官也很nice，不管面试结果如何，通过这次宝贵的面试机会也给我带来知识上的查漏补缺。 本来打算录下整个面试过程，带上了心爱的AirPods，开启了一波操作，面试完才发…"}, {"id": "6944748350205853727", "title": "前端面试题自检 计网 HTTP 浏览器 渲染 Vue 性能优化", "desc": "限于这是个自查手册，回答不那么太详细，如果某个知识点下面有链接，自己又没有深入了解过的，理应点击链接或自行搜索深入了解。 为应用程序提供网络访问服务及应用层协议存留的地方。例如，HTTP协议提供了 Web 文档的请求和传送，SMTP（邮件传送协议）提供了电子邮件的传送，还有DN…"}, {"id": "6981390279949926414", "title": "6个6面试题", "desc": "6个6 这段代码最后会打印出6个6. i=0： setTimeout(console.log(i),1000)，1s后，打印i。有人说，现在i=0啊，为什么不是打印0？因为现在 console.log"}, {"id": "6953494097399119880", "title": "前端算法面试必刷题系列[45]", "desc": "83. 将有序数组转换为二叉搜索树 (convert-sorted-array-to-binary-search-tree) 84. 有序链表转换二叉搜索树 (convert-sorted-list-"}, {"id": "6991464200430157855", "title": "村庄分水最优分配（上）｜ 8月更文挑战", "desc": "假设要给一个村庄的所有房屋供水，在一间房屋建造水井具有开销，建造房屋之间的管道来输送水也有开销，那么如何才能成本最小得给所有房屋供水呢？"}, {"id": "6996993098735681566", "title": "webpack打包ES6模块的bundle.js源码分析", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 前言 webpack是前端模块化打包工具,我们在使用vue2或者react的官方脚手架生成的项目里面，里面都有webpack的影子。 但是"}, {"id": "6844903972705157128", "title": "面试手写代码总结", "desc": "1.call 2.apply 3.bind 4.instanceOf 5.Objeact.create 6.promise 7.new 8.深拷贝 9.es5继承 10.二分查找 11.快排 12.冒"}, {"id": "6844903814181421063", "title": "【面试总结】记一次失败的 bilibili 面试总结(3)", "desc": "ps：近期工作内容接触 React 可能比较多，Vue 方面可能言辞欠妥，一旦发现，立马纠正。 componentWillUnmount —— 组件即将被销毁，在此处可以清理定时器、取消RxJS的订阅行为等，防止内存溢出。 React V16后，因为引入了 Fiber 机制，之…"}, {"id": "6934499509275721735", "title": "从理解 React 框架开始，开启金三银四面试之旅。", "desc": "朋友们，火热的金三银四来了！是时候跳槽换工作了！涌抱更高的薪水！互联网聚集地已被攻陷，拉勾、Boss、猎聘和58同城同台竞技，能贴的广告已经贴满了。西二旗和望京又热闹起来了！选好了心仪岗位，就要仔细地"}, {"id": "6895676184949227528", "title": "jsliang 求职系列 - 15 - 手写源码系列汇总", "desc": "本系列有 7 篇文章，19 个手写方法，大纲 32 个知识点。 本系列有 46 篇参考文献。"}, {"id": "6992232559857909796", "title": "Mockjs使用指南（3）", "desc": "mock.js是一款模拟数据生成器，它的宗旨是帮助前端工程师甩开后端，咱们自己去创造数据，以后妈妈再也不用担心你追着后端的小伙伴要接口了。"}, {"id": "6932022097686298637", "title": "前端算法面试必刷题系列[14]", "desc": "24. 在排序数组中查找元素的第一个和最后一个位置 (find-first-and-last-position-of-element-in-sorted-array) 给出一个有序数组 nums 和一个数 target，要求在数组中找到第一个和这个元素相等的元素下标，最后一个和…"}, {"id": "6844903581762453512", "title": "2018三月份前端面试总结 | 掘金技术征文", "desc": "第二是寻找合适的职位，让我可以在工作中学习和运用主流的框架。 但是经过某大神的指点后，觉得像我这种大公司切图仔，组件组装人员来说，最好的方式就是不断地通过写代码，夯实自己的基础，再夯实自己的基础，才是我的正确的学习道路吧。如果您也和我一样迷惑，强烈推荐胜洪宇老师的这篇文章，真的…"}, {"id": "7000009964538789896", "title": "『面试的底气』—— 设计模式之命令模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903830979608584", "title": "(下篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂", "desc": "本篇文章会继续沿着前面两篇的脚步，继续梳理前端领域一些比较主流的进阶知识点，力求能让大家在横向层面有个全面的概念。能在面试时有限的时间里，能够快速抓住重点与面试官交流。这些知识点属于加分项，如果能在面试时从容侃侃而谈，想必面试官会记忆深刻，为你折服的~🤤 另外有许多童鞋提到:…"}, {"id": "6999252060822568967", "title": "金9银10就快来了，为你准备了几道面试题", "desc": "前言 第一题：交换两个变量的值 题代码如下： 题解1： 题解2： 题解3： 第二题：函数柯里化 面试者陷入沉思中，“add函数 必须得返回一个函数才行，前期得有变量来储存之前的参数累加和，当该函数接收"}, {"id": "6936843243489329165", "title": "面试复盘（一）：面试官「前阿里大佬」果然厉害", "desc": "又到了金三银四的找工作季啦 ✿✿ヽ(°▽°)ノ✿。我是一个入行一年多的前端菜鸟，去年夏天开始考虑换工作，陆续面试了几家中小公司。面试过程我一般会录音，方便结束后进行复盘。整理了几次面试复盘的笔记，希望对相似情况的小伙伴有所帮助「😝 也是方便自己以后回忆」，愿大家都能找到心仪的…"}, {"id": "6885594081578696718", "title": "【信条】手撕吊打面试官系列面试题", "desc": "1. 用js打印一个乘法表 SPA一词源于拉丁文“Solus Par Agula”（SPA是指利用水资源结合沐浴、按摩、涂抹保养品和香熏来促进新陈代谢，满足人体视觉、味觉、触觉、嗅觉和思考达到一种身心畅快的享受。 国家实行劳动者每日工作时间不超过八小时、平均每周工作时间不超过四…"}, {"id": "6986621723961475103", "title": "还在困惑项目脚手架代码为什么那么写？那这篇webpack5 + react + typescript环境配置代码完全指南送给你", "desc": "前言 本文是对某开源的项目webpack5 + react + typescript项目地址逐行代码做分析，解剖一个成熟的环境所有配置的意义，理清一些常见的问题，比如 文件中的 import 转es5"}, {"id": "6992195110276431885", "title": "『面试的底气』—— 设计模式之最少知识原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6997682438373638157", "title": "面试官最喜欢问☞前端手撕代码", "desc": "本辑主要介绍面试中常见的手写代码题，给出思路并附上代码，以供享用。对于不便于理解的，可以多查看资料加强理解，加深记忆。没有什么代码是敲几遍不会的"}, {"id": "7005791554170257415", "title": "面试官：简单介绍一下BFC", "desc": "什么是BFC? BFC(Block formatting context)，名为块级格式化上下文，它的作用是形成独立的渲染区域，内部元素的渲染不会影响外界 如何触发BFC 形成BFC常见的条件(满足其"}, {"id": "7001695652153393165", "title": "JavaScript 面试知识点 📝 🎉～（0x01 - 0x20）", "desc": "0x01 在 JavaScript 中，有什么创建对象 Object 的方法？ 一般来说，JavaScript 中有以下几种方法创建对象： 1.1 Object 构造器 最简单的创建一个空对象的方式，"}, {"id": "6979244116199047204", "title": "Event Loop ：你知道它们的打印顺序吗？", "desc": "我收集了一些关于 Event Loop 的打印面试题，在浏览器和在不同版本的 Node.js 都打印看了看，结果是有些出乎意料喔"}, {"id": "6953450923439947812", "title": "滴滴网约车一面凉凉记录", "desc": "2年社招前,滴滴网约车部门一面凉经,面试官是个好看的小姐姐,委婉不失尴尬,还是总结出了自己自身的问题"}, {"id": "6992933721703710750", "title": "【前端 · 面试 】HTTP 总结（五）——  GET 和 POST", "desc": "GET 和 POST 方法只是 HTTP 协议为了不同分工而规定的两种请求方式，GET 和 POST 都是 TCP 链接。所以说，它们的本质是相同的。"}, {"id": "6844904079353708557", "title": "面试题：说说事件循环机制(满分答案来了)", "desc": "说async/await执行顺序注意，可以把 chrome 的优化，做法其实是违法了规范的，V8 团队的PR这些自信点说出来，显得你很好学，理解得很详细，很透彻。 把node的事件循环也说一下，重复1、2、3点，node中的第3点要说的是node11前后的事件循环变动点。 Ja…"}, {"id": "6871956933775982606", "title": "前端面试必备技巧", "desc": "今年的金三银四刚好赶上疫情，很多大公司都停止招聘甚至裁员，想跳槽的小伙伴被打的措手不及。 前端问的最多的还是 js基础、计算机网络基础等，建议在此处多下功夫。 而 css 相关的很少问到，最多也就问个三栏布局、两栏布局、水平垂直居中，把前两节看了面试基本没啥问题。 框架 Rea…"}, {"id": "7001661922978299918", "title": "这一次，彻底搞懂useEffect", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 什么是useEffect? 1. useEffect执行时机 当做componentDidMount和componentDidUpdate"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "6996658359810129950", "title": "『面试的底气』—— 设计模式之发布-订阅模式（一）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903743125733390", "title": "腾讯前端面试篇（一）", "desc": "笔者情况： 笔者一共面试了好几轮技术面，最终结果技术面通过。 笔者感言： 可能是鹅厂大佬感觉我的经验不丰富的原因，感觉面试的大部分问题都是以基础为主。个人感觉大厂还是非常重视基础的，特别是对工作经验尚浅或者是校招生而言。所以 以下，笔者会结合面试官问的问题一一道来... 笔者：…"}, {"id": "7005783774847844388", "title": "【青训营】做面试题般回顾前端基础知识", "desc": "专题内容：面试题&基础知识 具体的面试题啥的 我一边整理一边放进来~ 主要适合 学习过前端知识但是感觉好多知识点还是不扎实/感觉开发网页没啥问题 一做面试题就有点懵逼的小伙伴们"}, {"id": "6881121293899399176", "title": "2020 秋招知识点总结 -- (  JS篇 )   🏆 掘金技术征文|双节特别篇", "desc": "因为近期一直在忙着找实习和毕业的事情，没有时间整理出来。希望大家看完能够重温一下基础。 1. var、let 及 const 区别 var 存在提升，可以在声明之前使用 值为 undefined。let、const 不可以是因为会形成暂时性死区 2. 说一下内置类型 3. 实现…"}, {"id": "6997037224722186254", "title": "前端必刷手写题系列 [17]", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 27. Promise.all 问题是什么 我们上一篇提到了一个Promise的 api Promise.all, 现在我们实现它试试 回"}, {"id": "6997428899076374565", "title": "总结css隐藏元素的几种方式", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 前言 我们在写页面的时候，经常需要对元素执行隐藏操作，一般做法是用css的方法去隐藏，下面我把这些方法罗列一下，做一下对比，看完之后可以根"}, {"id": "6999517657191956493", "title": "花式玩转“一加二加三”", "desc": "第一次在这个上面写文章如果有什么写的不好的地方的话希望大家多多包涵，下面您可以领取您的知识了。 add(1)(2)(3) 实现add(1,2)(3) 和add(1)(2,3) 总结"}, {"id": "6972196767622234143", "title": "前端算法必刷题系列[62]", "desc": "这是我参与更文挑战的第 12 天，活动详情查看 更文挑战 118. 字符串相乘 (multiply-strings) 标签 字符串 中等 题目 leetcode 传送门 这里不贴题了，leetcode"}, {"id": "7004057961920200735", "title": "前端实习面试准备--JS异步编程", "desc": "1. 同步和异步 同步：执行某段代码时，在没有得到返回结果之前，其他代码暂时无法执行。也就是说，在此段代码执行完未返回结果之前，会阻塞之后的代码执行 异步：某一代码执行异步过程调用发出后，这段代码不会"}, {"id": "6844903596937461767", "title": "2018头条春招前端实习生面试题目总结", "desc": "解释了一下js的原型链，但感觉表达的不够清楚。发现心里明白是一回事，说明白又是另一回事啊 给一个function A一个function B，A中有属性手写实现B继承A。并做到尽可能优化的继承实现 当时准备写一下寄生组合式的继承方式，不过手写过程中貌似写错不少内容，手写代码能力…"}, {"id": "6913534577684414472", "title": "70 道 Javascript 面试题【译】", "desc": "所谓金三银四，在新的一年到来之际，很快就将迎来跳槽的高峰期。为了在激烈的竞争之中脱颖而出，扎实的基础知识是必不可少的，何不现在就准备起来！ 在理解 undefined 和 null 的差异之前，我们先来看看它们的相似点。 它们都属于 JavaScript 的 7 种基本类型。 …"}, {"id": "6844904036546641934", "title": "[突破前端面试] —— Promise && Async/Await", "desc": "年前年后跳槽季，准备从面试内容入手看看前端相关知识点，旨在探究一个系列知识点，能力范围之内的深入探究一下。重在实践，针对初级前端和准备面试的同学，争取附上实际的代码例子以及相关试题～系列名字就用【秃破前端面试】—— 因为圈内大家共识，技术与发量成正比。😄希望大家早日 秃 破瓶…"}, {"id": "6982867349162426381", "title": "前端面试每日 3+1 —— 第815天", "desc": "今天的知识点 (2021.07.09) —— 第815天 (我也要出题) [html] 使用HTML5制作一个多层的生日蛋糕 [css] 使用css3绘制在道路上行驶的汽车动画特效 [js] 写一个方"}, {"id": "6844903665308794888", "title": "从一道面试题认识函数柯里化", "desc": "最近在整理面试资源的时候，发现一道有意思的题目，所以就记录下来。 首先来分析下这道题，实现一个 multi 函数并依次传入参数执行，得到最终的结果。通过题目很容易得到的结论是，把传入的参数相乘就能够得到需要的结果，也就是 2X3X4 = 24。 那么如何实现 multi 函数去…"}, {"id": "6975160782384267295", "title": "🔥var、let和const到底有哪些区别？", "desc": "前言 let let 关键字用来声明变量，使用 let 声明的变量有几个特点： 不允许重复声明； 块儿级作用域（局部变量）； 不存在变量提升； 不影响作用域链； 示例 不允许重复声明 块儿级作用域（局"}, {"id": "6989555962721861640", "title": "前端面试中常见的问题！", "desc": "1、描述一下JavaScript中的数据类型？（就是基本类型和引用类型，有些面试人员基本类型会叫做值类型） 答：基本类型有String、Number、Boolean、Null、Undefined。剩下"}, {"id": "6844904126438965256", "title": "淘系前端校招负责人直播答疑文字实录", "desc": "3 月 25 日晚，面向 21 届学生，淘系前端团队举办直播活动，由淘系前端技术专家大果带来「淘系前端技术体系揭秘」和「校招问题答疑」，答疑环节更是邀请了淘系前端校招负责人、淘系高级技术专家元彦，直播回答问题，其中干货满满，冴羽辛苦的对答疑部分进行了文字整理，分享给大家，如果要…"}, {"id": "6995098632147959815", "title": "前端面试题之——webpack会问到的点", "desc": "大家好，这是一个小白前端的更文挑战。（写错的各位看官包容） 这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战。"}, {"id": "6989592444229091364", "title": "前端高频面试题整理（二）", "desc": "9、原型继承和 Class 继承 ⾸先先来讲下 class ，其实在 JS 中并不存在类， class 只是语法糖，本质还是函数 组合继承 以上继承的⽅式核⼼是在⼦类的构造函数中通过 Parent.c"}, {"id": "6967552758598041637", "title": "坎坷的换坑之路", "desc": "从疫情开始，公司的业务就出现全面冲击，本人从入职公司到离职，经历了多次的人员优化，万幸都没我的名额，然而每日都在优化的边缘来回试探，最后还是自己提桶，不给老板增加负担了"}, {"id": "6990630706590253070", "title": "面试手写整理。。。。", "desc": "面试手写代码系列 1 compose 题目描述:实现一个 compose 函数 实现代码如下: 2 settimeout 模拟实现 setinterval(带清除定时器的版本) 题目描述:setint"}, {"id": "6844903695365177352", "title": "Vue番外篇 -- vue-router浅析原理", "desc": "这篇文章主要围绕Vue的SPA单页面设计展开。 关于如何展开Vue多页面设计请点击查看。 这里指的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器。 换句话说，vue-router就是WebApp的链接路径管理系统。 vue-router是Vu…"}, {"id": "6844904190129471496", "title": "『面试的经历』—— 四年前端在CSS面试上跪了的后续", "desc": "觉得好的，点个赞，让更多人看到。 根据BFC的渲染规则之一：块级元素垂直方向的距离由margin决定。属于同一个BFC的两个相邻块级元素的margin会发生重叠。 有的小伙伴这么理解成：在同一个BFC容器中会发生重叠，那么只要不在一个BFC容器中就不会发生重叠。 在外面包一个d…"}, {"id": "6993715359480021005", "title": "CSS面试手册", "desc": "CSS面试手册，帮助各位读者，过五关斩六将，斩获大厂Offer！一起学习CSS，一起巩固CSS知识点。"}, {"id": "6993707475308380197", "title": "2021前端高频面试题终结篇（必读）", "desc": "关于程序员求职之后如果顺利的话就应该是面试了，在此也整理一下最近在网上收集的前端面试相关资料，包括预备知识、书籍、面试考点、面经等。前端方面资料其实太多太多，就光从知乎、前端乱炖太多了"}, {"id": "6978410377092530189", "title": "🔥作用域是什么？作用域链又是什么？你怎么理解？", "desc": "作用域 全局作用域 最外层函数和最外层函数外面定义的变量拥有全局作用域 所有未定义直接赋值的变量自动声明为全局作用域 所有window对象的属性拥有全局作用域 全局作用域有很大的弊端，过多的全局作用域"}, {"id": "6844904100945985543", "title": "「前端食堂」想进大厂必须要知道的Web安全问题", "desc": "本文已收录在前端食堂Github github.com/Geekhyt，感谢Star。 从胡子的长度和忧郁的眼神我察觉到，面前坐着的这位面试官应该有点东西，浑身上下流露着打过 CTF 的气场。我像以往一样，准备花3分钟的时间进行自我介绍。在此期间，面试官面无表情但很有耐心的听着…"}, {"id": "6844904129031045128", "title": "十道大厂面试题(含答案)总结", "desc": "又到了跳槽季啦，该刷题走起了。这里总结了一些被问到可能会懵逼的面试真题，有需要的可以看下～ 1. 算术交换 通过算术运算过程中的技巧，可以巧妙地将两个值进行互换。但是，有个缺点就是变量数据溢出。因为JavaScript能存储数字的精度范围是 -2^53 到 2^53。所以，加法…"}, {"id": "6844903672581734413", "title": "9月，水了几个大中厂前端面试的一些总结分享 | 掘金技术征文", "desc": "8月底离职，其实是裸辞，当然大概是在原东家我所在的产品项目组的人集体跑路了，所以我也离开了自己所在一年半的东家，毕竟留下来的都是要填大坑的。于是大概花了两天的时间简单梳理了一下前端知识和回顾了一下，自己做的产品和遇到的一些问题。然后一个星期面试了大概10家企业的样子，每天上午一…"}, {"id": "6977363418273562660", "title": "🔥计算属性computed和侦听属性watch的区别? 应用场景？", "desc": "计算属性computed : 支持缓存，只有依赖数据发生改变，才会重新进行计算 不支持异步，当computed内有异步操作时无效，无法监听数据的变化 computed 属性值会默认走缓存，计算属性是基"}, {"id": "6861967094318284814", "title": "从 4 个面试题了解「浏览器的垃圾回收」", "desc": "生活中你买了一瓶可乐，喝完之后可乐瓶就变成了垃圾，应该被回收处理。 同样地，我们在写 js 代码的时候，会频繁地操作数据。 在一些数据不被需要的时候，它就是垃圾数据，垃圾数据占用的内存就应该被回收。 会先在全局作用域中添加一个dog 属性，并在堆中创建了一个空对象，将该对象的地…"}, {"id": "7000932556711395341", "title": "LeetCode——去除重复字母（借助栈）", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 题目描述 解题思路 第一步: 如果字符出现在栈中则直接跳过 第二步: 如果字符没有出现在栈中,则进行下面的判断 栈中是否有元素. 栈顶元素"}, {"id": "6844903505266737165", "title": "2018web前端面试总结", "desc": "从今年3月份开始面试笔试找实习找校招到现在也半年多了，拿到了不少offer，也有了自己的一点心得体会，这里写出来分享一下，拙见勿喷。 笔试作为招聘的第一个环节，一般考察的都是专业基础知识，这里会着重考察你在学校的计算机相关基础，也就是很多人会发现，我明明考的是前端的卷子为啥前端…"}, {"id": "6844904021296316429", "title": "面试经典：Event Loop", "desc": "孩子没娘，说来话长。 本篇文章从 Event Loop 起因说起，通过探讨 浏览器环境 Event Loop 和 Node.js 环境 Event Loop，从而解惑工作中产生的困扰，扩展你面试知识点。 第三章 Event Loop：解释 Event Loop 产生原因和代码演…"}, {"id": "6898475853581402120", "title": "jsliang 求职系列 - 23 - 性能优化", "desc": "要说起前端性能优化，其实我们可以从 “输入 URL 到页面呈现” 这个知识点着手讲起。 jsliang 在这里将这些知识点一锅炖，看你吃下多少。 然后本地服务器向根服务器、顶级域名服务器、主域名服务器这些的请求就更不用说了，前端没法接触。 所以这个步骤我们忽略先。 这个步骤我们…"}, {"id": "6984980106456334373", "title": "来自初级前端的面试总结", "desc": "引言 因为碰到了不幸的事情。最近在面试。这段时间面试也进入了尾声。将近三周的时间。北京大厂小厂面了个遍。总结了一下面试中除了项目问题以外的比较常用的基础知识点。希望对各位看客有帮助奥~"}, {"id": "6997768361924886536", "title": "数据类型之面试官（0101） |  重学JS", "desc": "前言 在线音乐戳我呀！ 音乐博客源码上线啦！ 最近工作之余想干点什么，不能永远踏步，要向前冲，说点现实的，公司明天不要你，你可以后天就找到下一家，那么底气自然是技术硬。 浑浑噩噩在前端领域磕磕碰碰了两"}, {"id": "6942290767721267237", "title": "面试复盘（三）：好心态好状态", "desc": "加班到凌晨一点半，下午还去面了两家公司，是真的困，面试完全不在状态🤣🤣，要不是有部分题目比较简单，感觉又要心态爆炸了。 本菜经验2年左右，投的多为2-3年经验要求的。 公司：坐标深圳。 面试官：特有礼貌，还先自我介绍了。 面试结果：应该是hr面没过（跳的太频繁了，简历难看�…"}, {"id": "6884042237412376583", "title": "应届前端的逆袭（上）", "desc": "不知不觉毕业一年了，正式工作也满一年了。其实一直想写一篇文章总结一下一年来自己到底成长了多少，但因为各种原因一直拖到现在。今天总算难产出来了 😂 系列其他文章👇👇 2020 年可谓不太平的一年。因为一些众所周知的原因，读研的同学担心毕不了业；工作的同学纠结经济不景气；大三…"}, {"id": "6947947801242238984", "title": "如何找一份好工作？一步一步进入腾讯阿里等大厂", "desc": "这是一个时间表是全文最重要的内容，后面的你可以不记住，但是在校找工作的几个时间节点一定要了解清楚。 以18级学生为例子，其实你在大二的时候就可以去参加日常实习了，这个实习的目的主要是润色奖励和提升技术；在大三的\"金三银四\"的春招季就去找暑期实习，这个实习的主要目的是争取转正，提…"}, {"id": "6900402808453857288", "title": "面试官：JSON.stringify() 实现深拷贝有什么问题", "desc": "Date 日期调用了 toJSON() 将其转换为了 string 字符串（Date.toISOString()），因此会被当做字符串处理。 NaN 和 Infinity 格式的数值及 null 都会被当做 null。 其他类型的对象，包括 Map/Set/WeakMap/We…"}, {"id": "6990555938310586382", "title": "2021-前端面试（24道）手写/场景/排序题", "desc": "手写题 绑定事件？ 通用绑定事件+事件代理 marches: 判断一个DOM元素是不是符合一个CSS选择器 例子: 画一个三角形？ 实现简易的ajax? 实现new操作符？ 实现promise.all"}, {"id": "6911473286627098638", "title": "一篇文章彻底理解Javascript闭包（含闭包高频面试题）", "desc": "闭包简单理解就是内嵌函数，也即在函数中嵌套函数。 由于在JS中，变量的作用域属于函数作用域，在函数执行后作用域就会被清理、内存也随之回收，但是由于闭包是建立在一个函数内部的子函数，由于其可访问上级作用域的原因，即使上级函数执行完，作用域也不会随之销毁，这时的子函数——也就是闭包…"}, {"id": "6975881606825246727", "title": "🔥EventLoop是什么？执行机制是什么？", "desc": "前言 什么是 EventLoop ？ 先看这张图，先不管宏任务，微任务是什么，先看整个流程。 分析： 判断宏任务队列是否为空 不空 --> 执行最早进入队列的任务 --> 执行下一步 空 --> 执行"}, {"id": "6952083081519955998", "title": "面试官对不起！我终于会了Promise...(一面凉经泪目）", "desc": "前言在下前端小白菜也想找到实习来着，于是乎就面了面。先来给所有的问题给大家分享吧。面试题CSS 实现水平垂直居中flex的属性CSS transition的实现效果和有哪些属性CSS 实现沿Y轴旋转3"}, {"id": "6844904079206924295", "title": "年底前端面试-vue总结", "desc": "在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。 …"}, {"id": "6900810456496078855", "title": "在什么情况下 a === a - 1 ？", "desc": "从一道可（变）爱（态）的面试题说起。 上周，我们团队小仙女同学考了我一道面试题，题目是：在什么情况下，a === a - 1。 我也不知道这道题具体来源是谁，但是作为一位沉浸于前端多年的老江湖，这种题目自然是难不倒我的。 第一个答案自然是 Infinity，或者说，扩展一下，应…"}, {"id": "6844904149386002440", "title": "字节前端面试经历", "desc": "2020年不仅是互联网寒冬，也是整个经济的大寒冬，在疫情缓和之后，本人就加入了求职者的大军，期望找一份更好的工作，来维持生活o(╥﹏╥)o。 因为疫情现在都是视频面试，字节用的是牛客网，支持在线视频和同步编码。 自我介绍，是一场面试的核心，面试官很多问题都源自你的自我介绍中。所…"}, {"id": "6844903853788233741", "title": "前端面经分享 | 腾讯", "desc": "笔者原来在北京360企业安全工作，当时因为大学四年的学业是在北京完成的，所以就顺势通过校招在北京工作了。但家里是南方的，对南方的饮食和生活习惯更加喜欢一些，所以对深圳广州的公司特别是腾讯觊觎已久，所以就在今年2月中旬左右开始准备面试，经历了一个多月的面试流程，在3月中旬喜提深圳…"}, {"id": "6973993878034579492", "title": "😁前端需要了解的计算机网络知识， 这一专栏就够了！(图文并茂，点赞收藏哦！)", "desc": "这是我参与更文挑战的第10天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 面试需要我们会什么？"}, {"id": "7005548345171116039", "title": "【面试】ES6语法大赏", "desc": "本篇文章介了ES6的部分新语法，一是为了面试，二来也对新语言特性有个大致的了解，为以后写JavaScript代码提供知识支撑。"}, {"id": "6942640528496263176", "title": "人生需要一点deadline（腾讯笔试心得）", "desc": "2021-03-21，晚上八点到十点，我参加了腾讯的第一轮笔试，方向为前端/UI方向。经过了两个小时的答题，五道题最终我做出来三道题，我对我自己这次笔试的结果是不满意的。在下面我简单讲解一下面试的五道题，自己失利的原因，以及从这次面试中悟出的道理。 想写一篇复盘文章，但是太多了…"}, {"id": "7003552551119372296", "title": "面试收集", "desc": "1、JS的数据类型 JavaScript的数据类型主要分为两类：原始类型，引用数据类型 ct，array，function 两种类型的存储方式： 原始类型：会被保存到栈内存中 引用类型：会被保存到堆内"}, {"id": "6985146482248646670", "title": "🍉学习JS不得不知的原型原型链、闭包和异步!", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 写在前面 一、原型和原型链 谈起原型和原型链我们要清楚一点： JS是一门基于原型继承的语言。 那么，这里就要介绍一"}, {"id": "6933111691215372302", "title": "前端干货预警🚨马上金三银四，精选10道最新面试题带你起飞🛫️", "desc": "指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。糖在不改变其所在位置的语法结构的前提下，实现了运行时的等价。可以简单理解为，加糖后的代码编译后跟加糖前一样,代码更简洁流畅，代…"}, {"id": "6982539214332100639", "title": "JS 原生方法原理探究（八）：如何手写实现 JSON.stringify()？", "desc": "这是 JS 原生方法原理探究系列的第八篇文章。本文会一步一步教你手写实现 `JSON.stringify()` 方法"}, {"id": "6985713356359335967", "title": "资源工具分享（第2期）：160个电子书下载网站", "desc": "👍 👍 👍 更多精彩内容，看【原文链接】 看电子书是很多人的一个爱好，但是有的电子书资源怎么找也找不到，没关系，有了这些资源搜索网站，帮你分分钟搞定！ 排名 网站名称 网址 排名 1 鸠摩搜索 htt"}, {"id": "6994649217817903111", "title": "浏览器页面渲染和相关问题探讨", "desc": "简单说说浏览器的渲染过程 解析HTML，生成 DOM 树。 解析 CSS，生成 CSSOM（CSS 对象模型）。 大概是根据后代选择器之类的"}, {"id": "7000715695314960415", "title": "每日题解——2021-8-26", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 881. 救生艇 第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。 每艘船最多可同时载两人，但条件是这些"}, {"id": "6977155586915827719", "title": "【花果山自习室01】一个帮助我100%拿offer的面试学习法", "desc": "哈喽大家好，我是大圣，今天是花果山自习室第一期录播节目，总有同学咨询我是如何学习的，所以今天聊一个我珍藏的学习方法《面试学习法》 视频版移步 欢迎关注B站，每周三晚上直播【花果山自习室】，一起学习，最"}, {"id": "7001770660456300557", "title": "前端面试算法篇——动态规划（Dynamic Programming）", "desc": "简介 动态规划是大厂面试常考的算法题类型，这类问题类似于数学归纳法，又像求数列的通项公式，即假设[0, n-1]的情况已知，如何去求dp[n]。解决问题的关键自然是找到这个通项公式，也就是状态转移方程"}, {"id": "6844904042066345998", "title": "Webpack 再深入再总结", "desc": "文章内容参考书籍《深入浅出 Webpack》，因为该书籍基于 Webpack 3.4.0 版本，本文的实践基于 Webpack 4.28.2 版本，所以也踩了不少由于模块版本问题出现的坑，已经汇总到第 6 章节 踩坑汇总，大家记得避免踩坑；也印证了那句哲理：纸上得来终觉浅，绝知…"}, {"id": "6844903580860678158", "title": "面试分享：2018阿里巴巴前端面试总结 | 掘金技术征文", "desc": "脑子混了记得不多了，记得多少就记录多少吧。。。。 最开始的思路是用定时器实现，最后没有想的太完整，面试官给出的答案是用requestAnimationFrame。 由于之前没有用过这个 API 所以是现学的。 注：requestAnimFrame 和 定时器一样也头一个类似的清…"}, {"id": "6844904131350495240", "title": "Web开发面试的那些题-CSS篇", "desc": "这一篇关于CSS。 这是一个高频问题，这里给出常见且好记忆的几种方法。 理解单行文字居中的原理，我们首先需要理解line-height，这里要避免一个误区。 这样的话，设置了line-height等于容器height才能使单行文字居中。 See the Pen Sticky p…"}, {"id": "6844903713899970567", "title": "分析 JavaScript 的数据类型与变量", "desc": "这篇文章，来聊聊 JS 中的数据类型与变量。这是学习 JS 时最基础的一类问题，但却很重要。 以上的问题均来自面试。如果你并不清楚，我觉得你有必要接着读下去。 在 JS 中，基本数据类型有 6 种，即数值、字符串、布尔值、null、undefined、Symbol。 对于基本数…"}, {"id": "6844904174740733966", "title": "从输入URL到渲染页面 —— 网络协议", "desc": "数据想在互联网上进行传输，就要符合网际协议（Internet Protocol，简称 IP）标准。互联网上不同的在线设备都有唯一的地址标识，用一个数字来表示。 类比我们平常网购，用我们的收件地址类比设备的唯一标识，我们知道了这个收件地址，就可以往这个地址发送包裹。计算机的地址就…"}, {"id": "6844903978019323911", "title": "简析浏览器缓存及实践", "desc": "浏览器缓存是一个老生常谈的话题，也是现阶段前端面试必问高频问题之一。 这篇文章主要总结下我对缓存的认识，有什么不足之处欢迎指正。 我们一般把浏览器缓存分为强缓存和协商缓存。 强缓存，顾名思义，指的就是每次请求都走或者不走缓存,不和服务端交互。 走或不走缓存主要通过expires…"}, {"id": "6844904024899059719", "title": "Vue相关概念及解释(2)", "desc": ".exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。"}, {"id": "6844903833651396621", "title": "异步编程小结", "desc": "在javascript单线程的世界里，没有异步寸步难行。本章节介绍异步编程的发展，从callback,Events到promise,generator,async/await. 在（javascript）单线程的世界里，如果有多个任务，就必须排队，前面一个完成，再继续后面的任务…"}, {"id": "6844903870628364301", "title": "JavaScript 进阶问题列表", "desc": "1. 输出是什么？ 在函数内部，我们首先通过 var 关键字声明了 name 变量。这意味着变量被提升了（内存空间在创建阶段就被设置好了），直到程序运行到定义变量位置之前默认值都是 undefined。因为当我们打印 name 变量时还没有执行到定义变量的位置，因此变量的值保持…"}, {"id": "6844904161901805582", "title": "来自一位前端妹子的面试题整理（理论基础篇）", "desc": "（该文章包含了html、css、js、浏览器等相关的基础题目，是基础前端每次面试前必须掌握的基础点。ps:所有答案均源于我的个人理解，如有不对欢迎指正与补充～） 答：HTML是超文本标记语言，一种基于web网页设计的语言，而XHTML是基于XML的标记语言。而什么是XML呢？可…"}, {"id": "6936012263803322399", "title": "CSS布局", "desc": "对于第一种，先通过对 header,content,footer 统一设置 width：1000px;或者 max-width：1000px(这两者的区别是当屏幕小于 1000px 时，前者会出现滚动条，后者则不会，显示出实际宽度);然后设置 margin:0 auto 实现居…"}, {"id": "6844903857282088974", "title": "前端面试排雷之唱、跳、rap三步曲（一）唱篇", "desc": "酒香犹怕巷子深，说学逗唱样样学。 投递了简历但是了无音讯。等待你的可能是，hr的一句不合适，您已加入简历库。你那，精心准备的简历，貌似并不能打动HR。别辜负了你的，爆肝熬夜，深思熟虑，字字珠玑。我就来带你排排雷。 请不要用word，请不要给jpg，请转pdf。 请不要用word…"}, {"id": "6922066027018731528", "title": "函数的底层执行机制", "desc": "变量说明：AO(activeobject):活跃的变量对象（函数中的叫AO，全局的叫VO）存储变量的地方1、函数声明定义步骤（1）创建一个函数（堆内存）（函数的作用域在创建的时候就形成了；执行的时候形"}, {"id": "6922056757980168200", "title": "js中的堆栈内存及执行代码的步骤", "desc": "名词解释：（1）执行环境栈：ECStack（为代码执行提供了环境）（2）执行代码过程中为了区分是在哪个环境下执行，会产生执行上下文：（3）VO(G)（variableobject）全局变量对象（4）G"}, {"id": "6922029450192224263", "title": "数据类型", "desc": "1、基本数据类型infinity：2、对象类型「下数所说的应该都是基于构造函数创造出来的实例」3、bigInt：超大数字处理超过最大的安全数字，计算就不准确了调用toString()这样就能转换回原来"}, {"id": "6908618360158683144", "title": "【Daily Interview】- 07 两数之和", "desc": "题目图片1分析对于这个问题，最直接的思路是直接暴力的遍历数组，让两个数相加，如果得到结果，则返回下标，犹豫思路简单直接，所以下面直接给出代码：进阶上面的解法虽然简单直接，但复杂度较高，是 On2，有什"}, {"id": "6921384958582292487", "title": "数据类型检测", "desc": "1、常用的方法2、特殊检测3、详细分析（1）typeof（2）instanceofinstanceof检测原理手动改写Symbol.hasInstance方法缺点：可以被肆意改写原型链不能检测原始值类"}, {"id": "6921312948044595208", "title": "\bTHIS专题汇总", "desc": "JS中THIS的五种情况梳理1、匿名函数里面的this在非严格模式下是window，在严格模式下是undefined2、我们把this存在self里面3、箭头函数里面的this指的是当前上下文中的th"}, {"id": "6907059165886971912", "title": "【Daily Interview】- 06 环形链表", "desc": "首先简单介绍一下链表这个数据结构：所谓链表，就是一连串拥有着指向下一个节点的指针的节点集。 此限制就是不允许使用 cache。 换个思路：我们知道，当再操场上跑圈的时候，如果有快有慢，那么总有那么一刻，跑的快的人会从背后追上跑得慢的人。"}, {"id": "6844903815213219848", "title": "浅析JavaScript的事件循环机制", "desc": "众所周知，JavaScript的一大特点就是单线程，也就是会按顺序执行代码，同一时间只能做一件事。 JavaScript的诞生，一开始是为了解决浏览器用户交互的问题，以及用来操作DOM，基于这个原因，JavaScript被设计成单线程，否则会带来复杂的同步问题。 单线程意味着所…"}, {"id": "6844903625471295502", "title": "ES的那些新特性", "desc": "前段时间换工作，面试了几家公司，有一道题发现基本是必问的，就是说一说平时用到的那些 es6 7 8 9 等的特性。一直没有做总结，现在就整理一下平时自己在工作中用到的比较多的那些新特性。 声明变量新增的两个关键词，与 var 不同的一点在于，在 JS 函数中的 var 声明，其…"}, {"id": "6844904007224262670", "title": "一些常见的前端知识点", "desc": "持续更新中..."}, {"id": "6990596611189506062", "title": "（虚拟列表 + webWorker + indexedDB）处理十万条数据", "desc": "之前是看面试题的时候突然看到前端怎么处理十万条数据，用户的交互是下拉列表的形式展示，觉得有点意思，就自己上手搞一波 面试官的考点 我分析了一波，面试官的考点可能有以下几点： 前端渲染海量 dom"}, {"id": "6844903922453200904", "title": "2019年17道高频React面试题及详解", "desc": "以下面试题来源于github项目前端面试指南,那里有超过200道高频前端面试题及答案,目前拥有1400star. 组件化: 其中以 React 的组件化最为彻底,甚至可以到函数级别的原子组件,高度的组件化可以是我们的工程易于维护、易于组合拓展。 天然分层: JQuery 时代的…"}, {"id": "6987180860852142093", "title": "腾讯面试官：兄弟，你说你会Webpack，那说说他的原理？", "desc": "前言 大家好，我是林三心，标题腾讯面试官：同学，你说你会Webpack，那说说他的原理？，是本菜鸟在面试腾讯时，面试官说的问的原话，一字不差，哈哈。本菜鸟当时肯定是回答不上来，最后也挂了。今天就简单实"}, {"id": "7004257642130472996", "title": "基于JS实现Ajax并发请求的控制", "desc": "最近看到一个面试题，当然了，就是这篇文章的标题,Ajax的并发请求的控制，感觉挺有意思的，在社区看了下，应该是字节的面试题，也挺多大佬对这个进行了总结，都看了下，于是自己也想试着总结下"}, {"id": "6992604888165253156", "title": "面试题：手写ajax", "desc": "👦🏻本次一起重温ajax，以后如果真被面，而且记不太清楚了，就直接翻开此文！重新梳理，一劳永逸✌~~~~"}, {"id": "7007694933112913928", "title": "css面试题（笔记）", "desc": "css面试重点（自己的网络笔记） 1、样式的引入方式有哪几种？ 内部样式：在head里面的style标签中写样式 外部样式 内联样式： 2、W3C标准盒模型包含哪些内容 ​ 4个部分 ​ 内容区 co"}, {"id": "6981243994076348429", "title": "【面试说】怪异的 JavaScript", "desc": "Javascript 之所以有以上怪异表现，主要是初期设计过于匆忙，1995 年仅用用了 10 天来完成的。可能上面的行为我们用得不多，但了解它们对于我们更加深入了解 JavaScript 也是有所帮"}, {"id": "6984228477184507911", "title": "js面试常问问题含详细答案", "desc": "总结一些前端js的知识，将笔记整理跟大家分享，有些知识会经常在前端面试的时候会问到，所以做个记录，希望对大家有所帮"}, {"id": "6987320619394138148", "title": "【算法面试】leetcode最常见的150道前端面试题 --- 简单题上（44题）", "desc": "前言 本文题目选自 LeetCode 精选 TOP 面试题，而这些题在自己和同事亲身经历中，确实遇到的几率在百分之80%以上（成都和北京的前端岗位）。本文挑选其中所有简单题做归类和解法分析。后续更新所"}, {"id": "6952530231206871076", "title": "买了课程我不学，放着发霉也不看，哎~就是玩儿", "desc": "“人人都笑EDG，人人都是EDG”，大家好，我是十三，我是一个“收藏家”，本文来谈一谈“只收藏不看，只买不看”这种行为，并且给出一些自己的建议。"}, {"id": "6986457927011794974", "title": "迟来的年中总结：2021年，我毕业啦！", "desc": "我是谁、2021年中总结、如何学习前端、如何准备前端面试、2021年我毕业啦......迟来的年中总结！"}, {"id": "7000947433588916232", "title": "ES5的继承和ES6的继承有什么区别？让Babel来告诉你", "desc": "如果以前问我ES5的继承和ES6的继承有什么区别，我一定会自信的说没有区别，不过是语法糖而已，充其量也就是写法有区别，但是现在我会假装思考一下，然后说虽然只是语法糖，但也是有点小区别的，那么具体有什么"}, {"id": "6969862183387660324", "title": "「百毒不侵(四)」懂了这十五个Vue冷门知识，再也不怕面试官刁难了", "desc": "前言 现在的前端市场，已经不能跟几年前的比了，几年前前端面试只要懂jq就行，但是现在的前端面试已经发展到源码级别了。。大家都很无奈，但是大家也都改变不了，所以我们既然改变不了它那就得去适应它，提升自己"}, {"id": "6994620925501177863", "title": "js关于变量提升的两道“变态”面试题，你能做对么？", "desc": "这是我参与8月更文挑战的第9天 老版本浏览器没有块级上下文的概念 老版本浏览器中，放在{}【排除:函数、对象】中的function在变量提升阶段 都是声明+定义 新版本浏览器中      1. 如果f"}, {"id": "6844904070889603085", "title": "(建议收藏)TCP协议灵魂之问，巩固你的网路底层基础", "desc": "TCP 作为传输层的协议，是一个软件工程师素养的体现，也是面试中经常被问到的知识点。在此，我将 TCP 核心的一些问题梳理了一下，希望能帮到各位。 001. 能不能说一说 TCP 和 UDP 的区别？ TCP是一个面向连接的、可靠的、基于字节流的传输层协议。 而UDP是一个面向…"}, {"id": "6844903869378461710", "title": "[译] 送你 43 道 JavaScript 面试题", "desc": "这两天的GitHub Trending repositories被一个名叫 javascript-questions的项目霸榜了，项目中记录了一些JavaScript题目。 我大概从头到尾看了一遍，都是一些基础的题目，我大概花了半个小时（有些题很简单，可以一扫而过）把这些题做完…"}, {"id": "6979396224675741733", "title": "14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠(第四部分 301-370题)", "desc": "这是我参与更文挑战的第30天，活动详情查看： 更文挑战 14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠(第四部分 301-370题)"}, {"id": "6944687690398826503", "title": "⚡️一年半经验的前端面经总结⚡️", "desc": "先说好，问题的答案都不是唯一的，大部分只提供题目哈，后面有答案会慢慢补上！当时回答的都不是特别完全。面试过程比较长，从年初开始断断续续面试，没有做太详细的规划，有些答案也不记得当时怎么回答的。 年初面试的公司还是比较多的，美团、头条、阿里、快手、滴滴、Shopee等等以及几个不…"}, {"id": "6951407692011274247", "title": "记一次高级前端开发工程师面经", "desc": "对于3～5年的前端开发来说，不应该仅仅是停留在会用API的层面，至少要关注到你使用的技术的一些原理实现。 这也是大厂考察候选人钻研精神吧，相对来说有一个区分度。个人建议最好精通一个方向。。。。"}, {"id": "6874604408030789640", "title": "Vue 3.0 来了，我们该做些什么？", "desc": "想必 Vue3.0 发布这件事，大家都知道了。 装不知道，我是一只快乐的鸵鸟，我不知道 Vue 更新了，继续摸鱼爽歪歪。 为了下半年的 KPI，冲冲冲！把手头的 Vue 项目进行版本升级和重构。 让我总结的话，就只有两个比较重要的更新（我目前还没有完完整整的体验过新版本，有些地…"}, {"id": "6920467486798249991", "title": "2、Symbol", "desc": "1、Symbol创建的是一个唯一值，两次创建的结果是一定不相同的2、赋值给一个变量之后，作为属性需要使用[]括起来，否则不会生效3、应用：消除魔术字符串4、Symbol算是一个构造函数（因为原型的co"}, {"id": "6917923700998144013", "title": "【文件上传那些事儿】 - 02 二进制级别的格式验证", "desc": "在前面的文章中，我们已经实现了一个基础的文件上传，并在此基础上做了一些简单的优化：拖拽上传和进度条，其中拖拽上传需要注意 drag 相关事件，而进度条可以使用 axios 的 onUploadProgress 来实现。 今天我们将进一步优化这个小小的文件上传 demo，为其增加…"}, {"id": "6869655227281178638", "title": "前端面试系列【009】 - 谈一下你对 vue 设计原则的理解", "desc": "那么我们接下来便可以围绕定义和特点来进行介绍。 就可以进行业务的开发了。 由于 Vue 的核心库只关注视图层，所以不仅易于上手，还便于和第三方库或者既有的项目进行整合。 Vue 也完全能够构建复杂的单页应用。 这就是所谓的渐进式了：仅仅需要核心库便可以开始工作，当需求逐渐复杂，…"}, {"id": "6844903891612647438", "title": "关于二叉树哪些事", "desc": "深度遍历就是根据二叉树的层数一层一层遍历，实现深度遍历的关键是利用队列，当队列当中有元素的时候，取出队列的头部元素，访问这个元素，然后把这个元素的左孩子和右孩子入队列，然后重复这个过程。代码如下： 广度遍历的另外一个考点，就是求二叉树的右视图或者左视图，整体的思路就是遍历每一层…"}, {"id": "6844903602268405773", "title": "面试：对javascript的闭包的理解", "desc": "需要注意的是，函数内部可以直接读取全局变量。 函数外部无法读取到函数内部的局部变量，因为函数在执行完之后，函数内部的环境就被销毁了。 如果函数内部没有使用var，那么实际上就相当于把这个变量声明为全局变量了。 上面的代码中，f2可以访问到f1的局部变量message，那么我们只…"}, {"id": "6908977431307583495", "title": "你有写过自定义指令吗？自定义指令的应用场景有哪些？", "desc": "指令系统是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力 bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置 update：所在组件的 VNode 更新时调用，但…"}, {"id": "6972195125418000392", "title": "根据前序中序，中序后序还原二叉树", "desc": "前面我们了解了二叉树的遍历，在面试中，面试题经常会出“给出前序中序还原二叉树或给出中序后序还原二叉树”的题目。那么如果我们遇到了怎么做呢？"}, {"id": "6913946693117411335", "title": "前端知识点", "desc": "`in`运算符和`Object.hasOwnProperty`方法有什么区别？hasOwnPropert方法hasOwnPropert()方法返回值是一个布尔值，指示对象自身属性中是否具有指定的属性，"}, {"id": "6978837637440208933", "title": "JS的七种数据类型", "desc": "Undefined Null Boolean 不同类型与布尔值之间的转换规则。 Number String Symbol Object 每个 Object 实例都有如下属性和方法。 construct"}, {"id": "6978867201671430152", "title": "你了解 Ajax 么？常用的 Ajax 优化有哪些？", "desc": "AJAX 简介 AJAX 全称 Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。将 AJAX 中处理的一些异步信息或叫“即时”信息，保存在缓"}, {"id": "6854573209552568328", "title": "一些看起来很叼难的前端面试题", "desc": "搜索引擎会屏蔽掉所有baijavascript代码du， 那么ajax载入的内容对于搜索引擎来说zhi也是透明的。建议重要的页面信dao息不要AJAX。用AJAX只是载入一些相关链接或者其他跟正文和关键词关系不是很大的东西。 如果一定要做AJAX的页面，那么至少在title以及…"}, {"id": "6907483103674466317", "title": "HTML5&CSS3重点知识点总结", "desc": "1.如何理解语义化标签的命名有一定直观上的含义，能直接看出可能的作用优点：1. 当页面加载失败时也能过呈现出清晰的结构2. 有利于SEO（让搜索结果排名靠前）优化，有利于被搜索引擎收录3. 在项目的开"}, {"id": "6844904181929607181", "title": "面试题目一（考点：变量，函数提升，this指向，原型，优先级）", "desc": "面试题目一打印结果：进行变量，函数提升变量提升文章参见GO变量提升GOgetName=undefined函数提升，与变量同名，替换掉变量的即GOgetName=undefinedfunctionget"}, {"id": "6844903816249229320", "title": "eventLoop浅论", "desc": "2.先输出setImmediate再输出setTimeout，这种情况的原因是：当我们程序运行的时候我们知道setTimeout的第二个参数代表时间虽然我们写成0但是最小时间并不是0，大约是4。所以当执行到timer阶段的时候setTimeout的执行时间还没到，直接进行到po…"}, {"id": "6844904007043940365", "title": "经典计算机网络面试题，快速收藏！", "desc": "HTTP 和 HTTPS 的主要区别在于 HTTP 协议传递的是明文数据，而 HTTPS 传递的是加密过的数据，也就是说 HTTPS 更具有安全性。也正由 HTTPS 需要保证安全性，所以它的性能要比 HTTP 差一点。 单说安全性肯定是不够的，我打算扩展讲一下 HTTPS 是…"}, {"id": "6844903497087844366", "title": "【英】每位程序员需要知道的技术点合集", "desc": "这份列表包含了每位软件开发人员都需要了解的技术点，涉及算法、数据结构、数字、字符串、职业生涯等等。可以收藏起来，慢慢浏览。"}, {"id": "6922416659349110791", "title": "浏览器的底层渲染机制", "desc": "（2） defer：和link是类似的机制了，不会阻碍GUI渲染，当GUI渲染完，才会把请求回来的JS去渲染... （3）async：请求JS资源是异步的「单独开辟HTTP去请求」，此时GUI继续渲染；但是一但当JS请求回来，会立即暂停GUI的处理，接下来去渲染JS... （6…"}, {"id": "6844903503186362376", "title": "监测数组变动的两种实现", "desc": "我们都知道，vue 的数据监听是通过 Object.defineProperty 实现的，在 getter 中收集依赖，在 setter 中触发变更，当我们通过 this.xx = xyz 的方式对 data 中定义的某个 key 赋值的时候，vue 便能够监测到这个行为，并响…"}, {"id": "6844903628935806984", "title": "浅解前端必须掌握的算法（四）：希尔排序", "desc": "虽然前端面试中很少会考到算法类的题目，但是你去大厂面试的时候就知道了，对基本算法的掌握对于从事计算机科学技术的我们来说，还是必不可少的，每天花上 10 分钟，了解一下基本算法概念以及前端的实现方式。 另外，掌握了一些基本的算法实现，对于我们日常开发来说，也是如虎添翼，能让我们的…"}, {"id": "6978132274818580516", "title": "简单谈谈事件循环（Event Loop）", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 前言 事件循环经常会出现面试官的面试题，因为这个可以考察面试者对执行栈，任务队列，宏任务，微任务等方面的了解程度。我也看了很多文章，但是每次都感"}, {"id": "6844903936189530120", "title": "我在9家大厂的前端校招offer心得", "desc": "我就读于北京理工大学软件工程专业，是一名大四学生，现已入职字节跳动。从大一开始投入以前端为主的全栈开发，独立开发过多个中型和小型项目，是 佬铁|宿舍市集 小程序的社区创始人及独立项目负责人。 在学校里读书的时候，我就是一个闲不住的人。最近因为一个偶然的契机，接触到了校招季，最后…"}, {"id": "6997673511149895711", "title": "http面试之——http3次握手和4次挥手", "desc": "8月更文挑战之面试官常问的关于http建立连接的高频问题： 说一说http建立连接的过程 你刚讲到了3次握手，为什么是3次，2次"}, {"id": "6999277640100249630", "title": "聊一聊一道经典的面试题：a.x=a={n:2}", "desc": "var a = {n:1};a.x = a = {n:2}。这是一道很经典的面试题，有很多人都已经解读过，这里尝试从js语法(理论)和v8字节码(实践)这两个方面来理解，"}, {"id": "6992810710086451207", "title": "程序员优秀之路：一起来看下这 97 位”砖家“能给出啥编程的好建议？（5）", "desc": "happy ending! 整个读下来还是颇有收获滴，快来开启你得优秀之路，看看这 97 位砖家到底能给你什么样的建议~"}, {"id": "6993273796962549797", "title": "关于TCP与UDP你应该知道的", "desc": "OSI 模型，全称为 Open System Interconnection，即开放系统互联模型，这个是由 ISO(International Organization for Standardiza"}, {"id": "6981781580683411463", "title": "几道蛮有意思的前端面试题", "desc": "hello，各位小伙伴们大家好呀，我是白祁，这是我第一次在掘金上发表文章。最近在准备面试，给大家分享一下最近在刷的面试题库中，几道我自认为还蛮有意思的前端面试题。"}, {"id": "6997567108720623629", "title": "Vue面试题", "desc": "5. Vue面试题 1. Vue中更新是异步还是同步的,为什么? 2. Vue中nextTick的原理是什么? 3. Vue中extend的原理是什么? 4. Vue中生命周期的原理是什么? 5. V"}, {"id": "7001851854615379981", "title": "【VUE面试题】生命周期钩子", "desc": "VUE的生命周期？ vue每个组件都是独立的，每个组件都有一个属于它的生命周期，从一个组件创建、数据初始化、挂载、更新、销毁的过程"}, {"id": "6844904009384329229", "title": "[北京海淀] 头条搜索前端团队招聘前端开发工程师，来字节，做你最喜欢的事！", "desc": "大家好，我们是头条搜索前端团队，今日头条、抖音、火山、西瓜、懂车帝等备受欢迎 App 强有力的”幕后支持者“，支持者字节跳动全线产品的搜索功能，从0到1打造一个用户体验更加理想的通用搜索引擎。2019年7月31日，今日头条、抖音母公司字节跳动旗下微信公众号“字节跳动招聘”发布招…"}, {"id": "6902060047388377095", "title": "「中高级前端面试」手写代码合集", "desc": "本合集旨在巩固前端工程师核心基础技能，从各大小厂高频手写题出发，对常见的模拟实现进行总结，坚持学习，会有 彩蛋 呦。 更详尽更 多 的源代码放在 github 项目上，一种题含多种解法，有兴趣的可以下载学习，长期更新和维护。 PS：文章如有误，请不吝指正。 您的 「赞」 是笔者…"}, {"id": "6983580875842093092", "title": "面试官:能不能手写几道链表的基本操作", "desc": "链表 链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的"}, {"id": "6990616281556713485", "title": "webpack相关面试问题", "desc": "1、webpack中的modules是什么？ 2、chunk和bundle分别是什么？有什么区别？ 3、Plugin、Loader分别是什么？ 4、Compiler和Complation是什么？ 5、"}, {"id": "6999651011304357925", "title": "面试必备 JavaScript Promise 专题", "desc": "Promise是抽象异步处理对象以及对其进行各种操作的组件。 其详细内容在接下来我们还会进行介绍，Promise并不是从JavaScript中发祥的概念。"}, {"id": "6844903654177144840", "title": "一点感悟：当走完所有大厂的实习面试后", "desc": "七月虽然不是一个丰收的季节，但却是一个十分酷热的月份。不知有多少小伙伴跟我一样，顶着大太阳奔波在各种面试的征途中。面试是一个漫长的过程。但是也是一个让你快速提升的过程。其中包含了无数的血与泪。去面试前首先我们必须有牢固的基础知识，足够丰富的项目经历(就我而言差不多是三个完整项目…"}, {"id": "6980356012914147365", "title": "面试这么多家面试题总结", "desc": "原型链 闭包 & 闭包有哪些应用 箭头函数和普通函数的区别 flex布局那三个参数的分别是什么? vue的自定义指令怎么使用 vue双向绑定原理 你知道安全问题吗? http2.0协议 强缓存和协商缓"}, {"id": "6844904073737535496", "title": "挑战一轮大厂后的面试总结 (含六个方向) - 浏览器 篇", "desc": "在去年底开始换工作，直到现在算是告了一个段落，断断续续的也面试了不少公司，现在回想起来，那段时间经历了被面试官手撕，被笔试题狂怼，悲伤的时候差点留下没技术的泪水。 这篇文章我打算把我找工作遇到的各种面试题（每次面试完我都会总结）和我自己复习遇到比较有意思的题目，做一份汇总，年后…"}, {"id": "6992430635860099080", "title": "程序员优秀之路：一起来看下这 97 位”砖家“能给出啥编程的好建议？（4）", "desc": "本篇是系列第 4 篇，转换了一下思路，用更强力的总结力度来看看这些编程概念或者建议，这下不会再觉得冗长了吧~~~"}, {"id": "6844904078288355341", "title": "前端面试常见的知识点（四处搜刮）💻", "desc": "1. 模拟new的过程 2. 函数防抖和节流 3. 输入url到展示的过程 4. 函数的柯里化 5. 重绘与回流 1. 重绘 2. 回流 当元素尺寸、结构或者触发某些属性的时候，浏览器会重新渲染页面，这就叫回流。此时，浏览器需要重新计算，重新进行页面布局，所以损耗较大 6. 浏…"}, {"id": "6844903566319026184", "title": "面试的信心来源于过硬的基础", "desc": "在过去的一年很多人不满于公司没有福利、人际关系不好相处、没有发展前途的境遇等等，想着在开年来换一份工作来重新开始自己，那么 你 准备好了吗？ 下面是本人整理的一份面试材料，本想自己用的，但是新年第一天 公司突然给了我个惊喜，涨工资了！！！ 延伸 提问 怎样处理 移动端 1px …"}, {"id": "6992222084382326798", "title": "7月前端高频面试题", "desc": "本集合是高频面试考点，并且优化精简了答案，便于在面试中描述。 HTTP && 浏览器 HTML && CSS JS、TS、ES6 Vue React 构建工具 && 工程化 性能优化 HTTP"}, {"id": "6974343646137024526", "title": "【前端面试】JavaScript手写代码", "desc": "1. 实现一个new操作符 构建了一个全新的对象： var obj = {} new通过构造函数创建出的实例可以访问到构造函数原型链的属性 : obj.propt = fn.Prototype 改变t"}, {"id": "6844904118096494599", "title": "面试必备（前端必须知道的知识点）金三银四助力大厂-🎉🎉🎉", "desc": "求靠谱内推（北京地区）可以留言我 +。="}, {"id": "6943117949930569741", "title": "前端算法面试必刷题系列[25]", "desc": "43. 最小路径和 (minimum-path-sum) 给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。说明：每次只能向下或者向右移动一步。 然后上篇，我们有两个类似题提前看下，这题就太简单了。 dp(i, j) 表示从…"}, {"id": "6981458278278987813", "title": "从URL地址到页面的过程", "desc": "每天做个总结吧，坚持就是胜利！ 2021-07-05: 从URL地址到页面的过程 看这些应该足够了。"}, {"id": "6986877711964717063", "title": "前端面试知识点梳理——CSS", "desc": "- 布局 盒子模型的宽度怎么计算（offsetWidth计算） offsetWidth = (内容宽度+内边距+边框) ，无外边距。 box-sizing：border-box; margin纵向重叠"}, {"id": "6954912572889890853", "title": "前端算法面试必刷题系列[47]", "desc": "89. 二叉树展开为链表 (flatten-binary-tree-to-linked-list) 90. 不同的子序列 (distinct-subsequences)"}, {"id": "6954778029734232101", "title": "笔记：面向对象编程＆原型及原型链", "desc": "面向对象编程 一、什么是面向对象编程 面向对象编程是指一种思想，经常被拿来和面向过程编程比较。 面向过程：分析解决问题需要的步骤，编写对应的函数实现每个步骤，依次调用函数。 面向对象：把构成问题的事物"}, {"id": "6930892202121887758", "title": "[算法拆解] 一文说透排序算法的特点（下）", "desc": "详细描述各种排序算法的使用方式，实现方式，特点，复杂度分析。 让你能清晰的了解这些排序的区别与联系、掌握排序思想的精髓。 先说下为什么分上中下3篇，因为一篇的话篇幅太长，人的接受能力、程度还有耐心分成2篇比一篇更容易吸收，而且读下篇的时候能很好的用上篇的一些基础知识来做铺垫，流…"}, {"id": "6980911552643743775", "title": "算法，从简单刷起~206. 反转链表", "desc": "blueju，算法，从简单刷起~、206、反转链表、流程图、调试代码、尝试、leetcode、递归、迭代"}, {"id": "6931259176614101000", "title": "前端算法面试必刷题系列[13]", "desc": "21. 下一个排列 (next-permutation) 实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。必须原地修改，只允许使用额外常数空间。 简单来说所谓下一个排…"}, {"id": "6992431113838788622", "title": "面试遇到的题目--vue", "desc": "vue也算是一个比较常见的前端框架了，在不少公司中都有进行使用，而且我从接触vue到上手写vue的项目也有两三年的时间了，正好这两天也在面试，就把面试过程中遇到的问题就整理了一下。 面试前呢，我是在开"}, {"id": "6844903850537648141", "title": "【面试】三年渣渣前端面试总结", "desc": "lz最近刚刚找到工作，一直想找一个机会写下自己的面试总结，所以趁着空闲的时间就把在面试过程中遇到的一些问题给梳理出来。对自己的知识进行查漏补缺，也希望可以帮助到正在找工作的你，话不多说，我们直接看面试"}, {"id": "6987605182804819982", "title": "让你把JS中的对象方法一网打尽，快速查漏补缺", "desc": "JS的对象方法不管是在面试，还是在工作中做项目，亦或者是在了解JS或者JS框架的原理中都非常的重要，本文详细总结了JS中的对象方法，让你做到对他们的用法一网打尽。"}, {"id": "6844904199679901709", "title": "速看！大厂均未使用！20年谷歌用的三大网页性能指标，最后一项简直逆天！", "desc": "对于目前项目团队最近正在优化的网站性能，起初我显得很迷茫，如何衡量一个移动端网页是优秀的，能达到200ms内，甚至是1s内可完全加载的速度。或又是依赖于一切TTI、FCP之类经典的指标(TTI.FCP.超链)。 经leader的指点，多在谷歌上看一些最流行的解决方案成为我最近的…"}, {"id": "6907492080176594951", "title": "[译]应该如何准备顶级公司的前端面试（作者：davidshariff）", "desc": "在亚马逊和雅虎任职的这几年，我面试了许许多多前端方面的应聘者。在这篇文章中我想分享一些能够帮助大家更好准备面试的关键点。 事先声明，这篇文章的内容不是在前端面试时你可能会被问到的具体的问题清单，而是面试中会涉及到的知识点的原理的一个概括。 面试并不容易，作为应聘者，你必须在45…"}, {"id": "6907136369752014855", "title": "[算法拆解] 一文说透二叉树的遍历套路", "desc": "给你二叉树的根节点 root ，返回它节点值的 前/中/后 序 遍历。 挂上leetcode链接，可以用来查看更多示例和测试，并最后通过它。 遍历就是可以理解：使每个结点被访问一次且仅被访问一次。而且限制了从左到右的习惯方式。 二叉树的(前/中/后)遍历是指 从根结点出发，按照…"}, {"id": "6844904023288446990", "title": "Vue相关概念及解释(1)", "desc": "Vue相关概念及解释(2)vue生命周期是什么Vue生命周期又分为8个阶段：beforeCreate[创建前]created[创建后]beforeMount[载入前]mounted[载入后]befor"}, {"id": "6972432271806562312", "title": "前端面试之CSS篇", "desc": "请你讲一讲 CSS 的权重和优先级 权重： 　　权重，是一个相对的概念，是针对某一指标而言。某一指标的权重是指该指标在整体评价中的相对重要程度。 　　权重系数，是表示某一指标项在指标项系统中的重要程度"}, {"id": "6913946311595786254", "title": "面试整理", "desc": "undefined和null有什么区别？在理解undefined和null之间的差异之前，我们先来看看它们的相似类。它们属于JavaScript的7种基本类型。它们是属于虚值，可以使用Boolean("}, {"id": "6911627441760894990", "title": "干货：3分钟 get「跨域」问题", "desc": "浏览器有一个安全机制即同源策略，所谓同源就是两个资源具有相同的协议（protocol），主机（host）端口号（port）。浏览器不允许客户端脚本访问非同源的资源，如果客户端发起这样的请求就产生了跨域问题。 前后端数据联调的时候，前端服务在A域名下，而后端API 服务在B域名下…"}, {"id": "6996680664082808846", "title": "说一下地址栏输入 url 后发生了什么 [ 绝了 ]", "desc": "前言 这个问题相信很多童鞋在面试中都遇到过，纵使没有遇到过，起码也看到过，思考过...... 值得深思嘛 ? 值 ! 为什么 ? 笔者曾今就因为这个问题被 吊打 过，事情是这样的，某年某月的某一天 面"}, {"id": "6888472067726508039", "title": "「不进则退」2020 Chocolate 同学秋招前端の大厂面经&心路历程&个人经验分享", "desc": "本人双非本科，目前大四在读，JS，TS，LeetCode，Vue，React，算法爱好者。 座右铭：学如逆水行舟，不进则退！在今年7月份在某电子公司实习过，有过一段前端开发实习经历，8月份正式踏入秋招的征途，投递了许许多多的公司，面试过腾讯、字节、滴滴、美团、快手、网易、阿里等…"}, {"id": "6993719240029110309", "title": "前端常用面试问题的疑难解惑（1）", "desc": "1、说一下http 和https 参考回答： https 的SSL 加密是在传输层实现的。 (1)http 和https 的基本概念 htt"}, {"id": "6999893403395686413", "title": "前端面试手写代码-bind", "desc": "前言 大家一定要摆脱舒适圈，只有用时间才能换来你想要的，还是那句话，光羡慕有什么用，咱们得行动起来。 本文主要讲call,apply,bind的手写，涉及很多基础知识"}, {"id": "6989542675934527496", "title": "被拒 5 次，我如何拿下蚂蚁体验技术部校招实习 Offer", "desc": "每个人的面试经历都不尽相同，或顺利或坎坷。我希望将我这段相对坎坷的经历与大家分享，如果在我过去面试的路上，也曾有过这样的参考，或许可以少走一些弯路。经历虽不能复制，但是我会尝试将其中共通的东西挖掘出来"}, {"id": "7002617944475697189", "title": "前端必刷手写题系列 [24]", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 34. 异步求和 题目 假设有一台本地机器，无法做加减乘除运算，因此无法执行 a + b、a += 1 这样的 js 代码，然后我们提供一"}, {"id": "6994094129357701156", "title": "前端常用面试问题的疑难解惑（2）", "desc": "1、几个很实用的BOM 属性对象方法? 参考回答： 什么是Bom? Bom 是浏览器对象。有哪些常用的Bom 属性呢？ (1)locatio"}, {"id": "6992105360915955748", "title": "程序员优秀之路：一起来看下这 97 位”砖家“能给出啥编程的好建议？（3）", "desc": "本篇是系列第 3 篇，带你认识一些优秀的编程概念！有很多新鲜儿词~认知优秀、逐渐优秀、习惯优秀......"}, {"id": "6844903757977927687", "title": " 【面经】寒冬中的一年半前端跳槽", "desc": "小米的面试官给人的感觉很亲切很真诚，是一个体验很不错的面试。 这个公司是猎头推荐的，一家初创公司，CEO比较强势，也算比较有趣。 这一面是CEO面，主要问了我的职业规划等等问题，在我没有表现出很强的要去该公司的意愿后，直接给我送走了... 这轮面试时从美国打电话过来的，事后才知…"}, {"id": "6940287134154637326", "title": "【金三银四】React 面试常见问题", "desc": "React.createClass 是 React 最传统、兼容性最好的方法。该方法构建一个组件对象, 当组件被调用时，就会创建几个组件实例 ES6 class 方式和 createClass 类似，只是从调用内部方法变成了用类来实现。 无状态组件创建时始终保持一个实例，避免了…"}, {"id": "6985106511932424222", "title": "阿里面试题：实现一个EatMan。我没写出来🤦‍♂️", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2 万元奖池等你挑战」 阿里巴巴面试题：实现一个EatMan"}, {"id": "6989103878436290568", "title": "2021前端高频算法整理", "desc": "2021前端高频算法面试，提升核心竞争力。文章列出的算法大多数为亲身经历，绝非网上随意抄袭，答案也是自己手写。"}, {"id": "6844903816668643341", "title": "2019前端面试题 | JS部分（附带答案）", "desc": "目前在找工作，所以各方收集了一堆面试题。其实刷面试题的过程也能更新自己对知识的认识，所以也提醒自己多看多理解。如果对下面题目有更深理解，会实时更新。遇到新题目，也会不定时更新。希望能帮助到部分朋友～ 1. typeof运算符和instanceof运算符以及isPrototype…"}, {"id": "6844904085183791117", "title": "字节跳动 前端校招  一二三面+hr面", "desc": "tip： 一二三面连着面的，中间有10分钟休息时间，面试官都很和善的，不会给太大的压力，不过字节的每一个问题都会问的很深，很深。。。感觉到了跟大佬的差距O(∩_∩)O😄 能实现一个节流函数吗？ (很快写完了 定时器版) 面试官改进一下要求滚动第一次就触发，于是改成时间戳版。 …"}, {"id": "6989815456416661534", "title": "终极compose函数封装方案！", "desc": "前言 无意中在掘金看到一篇写compose函数的文章《感谢 compose 函数，让我的代码屎山💩逐渐美丽了起来~》，之前这个命题我面试的时候问过很多面试者，还挺有体会的。正好谈一谈 我不会直接问你知"}, {"id": "6907673648216145928", "title": "「一次写过瘾」手写Promise全家桶+Generator+async/await", "desc": "欢迎来前端食堂年终总结的评论区盖楼，听说食堂的小伙伴们都来了。 进入正文。 不过建议看完本文后还是要亲自去读一读，不多 bb，开始展示。 Promise 的三个状态分别是 pending、fulfilled 和 rejected。 pending: 待定，Promise 的初始…"}, {"id": "6844903592164343821", "title": "小哥哥,小姐姐,我有一份tcp、http面试指南你要吗？", "desc": "对，我就是骗你进来的。嘿嘿嘿... 既然来了就看看再走嘛 作为一个学通信出身的前端，说道http、tcp什么的，算是到了我的领域了。（我会告诉你我上课净睡觉了，啥也没学到吗？）这次给大家讲讲http，提高水平、丰富知识。（要不是为了面试，谁会管什么ttp呀，对我是就这么肤浅） …"}, {"id": "6971029774995030029", "title": "call（）、apply（）、bind（）三者的区别和使用？", "desc": "函数的方法 call()、apply()、bind()的区别？ call()、apply()、bind()的意义 改变函数执行时的上下文，也就是改变this指向； 语法： 先举一个简单的例子： - ["}, {"id": "6981742454991454244", "title": "6.29-杭州端点科技-面试题总结", "desc": "前言 6.29 上午面一家深圳健康160，下午考试+面杭州端点+纬创 以下是杭州端点的面试题(面了43分钟, 前面拉胯，后面稍微好点)，及其自我总结： 1. 自我介绍+项目介绍 2. Vue双向数据绑"}, {"id": "6997617674532438046", "title": "面试：js手动实现reduce方法", "desc": "面试官问：你听说过reduce吗？我：那必须听过呀， 面试官：那你用reduce来实现一下数组去重？我内心尼玛万马奔腾~~"}, {"id": "6844903605850341383", "title": "毕业一年左右的前端妹子面经总结", "desc": "先想清楚你辞职想去的下一家的初衷是什么，是加薪资、提升技术 or 换个工作环境。根据你自己的真实情况，投简历的时候针对性地看看公司的招聘要求，先看看符合度是多少，以免遇到要求极度不符合又没有在商量好的前提下去面试了，最后的结果可能就是你还不错，但是不符合我们公司的要求。 准备工…"}, {"id": "7005544087587815461", "title": "前端实习面试准备--React其他", "desc": "React组件命名推荐的方式是哪个？ 通过引用而不是使用来命名组件displayName。 使用displayName命名组件： React推荐的方法： react 最新版本解决了什么问题，增加了哪些"}, {"id": "6987408221669425189", "title": "『前端BUG』—— 本地代理导致会话cookie中的数据丢失", "desc": "在本地用代理请求服务端接口，解决跨域问题后，发生了一件极其诡异的事情，明明登录成功了，但是请求每个接口都返回未登录的报错信息。"}, {"id": "6925599792814882829", "title": "JS手撕，经典面试题", "desc": "首先出这篇文章，一方面是为了记录巩固我所学的知识，明白面试的高频考点。不鼓励大家背题的，初衷是希望总结的一些面试题能帮助你查漏补缺，温故知新。这些题并不是全部，如果你还想看得更多，可以访问GitHub仓库，目前已经有552道大厂真题了，涵盖各类前端的真题，欢迎加入我们一起来讨论…"}, {"id": "6850418121250570248", "title": "2020最新：100道有答案的前端面试题（下）", "desc": "2020最新：100道有答案的前端面试题（上）现在已经 1.3W 阅读量了，我也被众多倔友催更了一周，我快速整理出了下篇。 如果大家喜欢这个系列的内容，欢迎点赞，我会根据大家的反馈，看是否继续进行整理更多有答案的面试真题。 62.Vue父组件可以监听到子组件的生命周期吗？如果能…"}, {"id": "6995364819507347493", "title": "Vue面试题10问", "desc": "1. v-if 和 v-for优先级 2. Vue组件data选项为什么必须是个函数而Vue的根实力则没有此限制 3.你知道key的作用和工作远离吗？说说你 对它的理解"}, {"id": "6994608328672280583", "title": "前端常用面试问题的疑难解惑（3）", "desc": "1、link 标签和import 标签的区别 link 属于html 标签，而@import 是css 提供的 页面被加载时，link 会"}, {"id": "6972841520479076388", "title": "面试题：判断两个时间是否在同一周", "desc": "这个题是在面试的时候遇到的，还遇到了2次，和大家分享一下自己的解题思路，业务上大伙儿也许会碰到类似的问题。"}, {"id": "6978115075672375326", "title": "🔥🔥JS如何实现数组扁平化？不同的方法有什么区别？", "desc": "前言 数组扁平化？ 听起来好像灰常的好大上？真的吗？ 那数组扁平化到底是什么？怎么实现呢？ 数组的扁平化处理，其实就是多维数组转化为一维数组。如下，将上面这个数组转化为下面的数组 那怎么去实现呢？别着"}, {"id": "7000205135884320798", "title": "前端面试系列六：手写程序算法题", "desc": "快来加入我们吧！ \"小和山的菜鸟们\"，为前端开发者提供技术相关资讯以及系列基础文章。为更好的用户体验，请您移至我们官网小和山的菜鸟们 ( https://xhs-rookies.com/ ) 进行学习"}, {"id": "6844903780996104200", "title": "面试前如何准备才能提高成功率（含前端面试押题）", "desc": "又到了一年中的招聘旺季的时候，想必很多人都萌动了跳槽的心，但是肯定很多人会关心当下好不好找工作，怎么样才能找到好的工作这些类似的问题。 想必大家现在经常能看到某某公司又裁员了，会担心是不是找不到工作了。其实总的来说虽然当下的环境确实不怎么好，但是有裁员的公司，也肯定有招人的公司…"}, {"id": "6844903971480403976", "title": "【面试流水账】一年半经验前端年底求职路", "desc": "先简单介绍一下我的基本情况~楼主是澳门某大学2018届软件专业本科，大四上学期通过日常实习入职360企业安全集团的华南基地（Base 珠海，现改名为奇安信集团），18年春招转正担任前端开发工程师，到今年11月份已经有两年左右开发经验。在原单位里以 toB 端页面开发为主，除了日…"}, {"id": "6999900724326842399", "title": "【前端--面试】常见面试题（九）—— Vue", "desc": "最近沉迷于 你是我的荣耀，下载了一年多不玩的游戏，沉迷于于途大神和晶晶女神的绝世容颜里，总是会忘记写文章ε=(´ο｀*)))唉~"}, {"id": "6844903605107965960", "title": "社招中级前端笔试面试题总结", "desc": "考察频率指相关问题的考察频率，并非只是提到的点。 变量声明和函数声明都会提升，但函数会提升到变量前。 具体解释可参考《你不知道的JavaScript（上卷）》 同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。若地址里面的协议、域名和端…"}, {"id": "7001510315514937375", "title": "一文总结http1.0，http1.1，http2，http3，面试强心剂", "desc": "HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上,是一种无状态、无连接的应用层协议，几年后被HTTP1.1代替并广泛使用"}, {"id": "6854573220033953806", "title": "玩转经典十大Top10之手撕实现", "desc": "Promise.all传入一组以promise为实例的数组，all方法会按照传入数组内的顺序依次执行，直到那个耗时最久的resolve返回，才能算做全部成功。中间环节如果有一个出现reject就直接中断掉 考点：很多人都知道new一个实例的时候，对应类会在this上挂很多属性和…"}, {"id": "6958361473953300488", "title": "已阅冴羽大佬文章 | 创作者训练营第二期", "desc": "一些功能点的实现，防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等。欢迎一起阅读冴羽大佬文章~~~"}, {"id": "6997787733796061215", "title": "图解一道经典闭包面试题，剖析闭包面试考什么", "desc": "上次，我们通过这篇文章“JavaScript 的闭包，可以这样理解”，让大家对闭包有了一个不一样的理解。今天我们从一道经典面试题出发，剖析 JavaSctipt 闭包面试考什么。"}, {"id": "6900005459856457735", "title": "【查漏补缺】那些漏掉的基础考点知识", "desc": "本文是对自己的前段时间面试的一篇题目及解答总结。其实本来自己是不太想继续写关于面试题的文章了，因为社区内很多这类的文章，但是如果每个地方翻一下，又不方便自己回顾，所以还是决定写下本文供自己巩固 作用：选中指定元素的指定后代元素。语法：祖先元素 后代元素 {}（空格隔开） 作用：…"}, {"id": "6844903902429577229", "title": "面试官: 你对虚拟DOM原理的理解?", "desc": "Virtual DOM是对DOM的抽象,本质上是JavaScript对象,这个对象就是更加轻量级的对DOM的描述. 首先,我们都知道在前端性能优化的一个秘诀就是尽可能少地操作DOM,不仅仅是DOM相对较慢,更因为频繁变动DOM会造成浏览器的回流或者重回,这些都是性能的杀手,因此…"}, {"id": "6935081201161994248", "title": "前端|每天5道面试题（5）", "desc": "1、解释一下变量提升所有的声明都会提升到作用域的最顶上去。函数声明的优先级高于变量声明的优先级，并且函数声明和函数定义的部分一起被提升。举例说明一下：（1）变量提升因为变量a的声明被提到了作用域顶端。"}, {"id": "6899291168891207688", "title": "最新整理的25道前端面试真题（含答案与解析）", "desc": "Hi~ 好久不见。 上一次整理的100道前端面试题在掘金火了之后，很多小伙伴反馈看答案不方便，其实主要是因为我整理的答案和解析内容非常全面，导致每一道题的篇幅都很长，阅读体验不太好，所以才给大家把答案放到github上。 最近解锁了掘金的新功能——折叠内容，我将在这篇文章中尽可…"}, {"id": "6974209413028511781", "title": "一文详解-es5原型和es6-class", "desc": "跳槽得太少了，没有怎么被面试官虐过，没有深刻体会过 **面试造航母，工作拧螺丝** 的快感。 于是乎，既然用不到，那就不用学，从自我做起，拒绝内卷。理解满分。。。。"}, {"id": "6998849977644482568", "title": "面试官：写一写双向数据绑定叭。", "desc": "老生常谈的双向数据绑定，再Vue2和Vue3中实现原理分别是Object.defineProperty和Proxy。 一个是Object原型上的方法，一个是类Proxy。下面就来看看叭。 Object"}, {"id": "6996175213570293791", "title": "Shopee HTTP面试总结", "desc": "工作无聊；薪资base低；慢慢看下外面的机会，佛系面试，佛系复习。 查阅了资料总结了这些面试题，有不对的地方希望指出学习一波。"}, {"id": "6915362842212302862", "title": "「计算机网络」前端必备知识，看到就是赚到系列（上）", "desc": "3、在传输相同大小的数据时，tcp首部开销20字节；udp首部开销只有8个字节，tcp报头比udp复杂，故实际包含的用户数据较少。tcp无丢包，而udp有丢包，故tcp开销大，udp开销较小； 4、每条tcp连接只能是点到点的；udp支持一对一、一对多、多对一、多对多的交互通信…"}, {"id": "6844903577421365255", "title": "前端笔试题面试题记录（上）", "desc": "过完元宵，就到上海找了波工作，现在已经入职好了，蹭波热点，写一波面试记录，内容包含笔试题和面试题，还有一些没有写进来，准备再开一篇，许久没写了，写的确实有些慢。如果喜欢的话可以点波赞，或者关注一下，希望大家看完本文可以有所收获。 跨域问题是这是浏览器为了安全实施的同源策略导致的…"}, {"id": "6844903553291517959", "title": "16年毕业的前端er在杭州求职ing", "desc": "因为曾经看过一篇文章面试分享：一年经验初探阿里巴巴前端社招所以来杭州也是带有目标的，网易！如果能有幸加入阿里，也是非常荣幸的。所以面试总是懒懒散散的，大概一天也就面试一家。 目前的状态是阿里通过了技术面和交叉面，大概下周一总监面+hr面。网易hr面结束了，在等通知，科大讯飞已经…"}, {"id": "6934189282768715783", "title": "前端大文件上传，断点续传（附源码）", "desc": "无论是面试还是实际工作，我们都会遇到大文件上传的问题。事实上，在我之前的面试中，也被问到上传大文件（Excel）如何处理，当时答的磕磕巴巴，直接导致整个面试以失败结束。 其实说到这里，如果你看懂并且理解了以上的思路，那么你已经学会了大文件上传+断点续传的 80%。下面的具体实现…"}, {"id": "6994255517677813797", "title": "前端面试必会HTTPS实战篇", "desc": "HTTPS算法实战篇 面试造火箭上班拧螺, 大家好我是铁蛋儿,坚持每天进步一点点。 看了很多篇https文章感觉都是在科普原理大多数很详细,但是讲实现的很少,所有就有了这篇文章。"}, {"id": "6989433079760683022", "title": "js烧脑面试题大赏", "desc": "本文精选了20多道具有一定迷惑性的js题，主要考察的是类型判断、作用域、this指向、原型、事件循环等知识点，每道题都配有笔者详细傻瓜式的解析，偏向于初学者，大佬请随意。 第1题 第2题 第3题 第4"}, {"id": "6961675763070271519", "title": "2年前端,如何跟抖音面试官battle", "desc": "该篇文章记录我与抖音面试官在面试间华山论剑,此役奠定了我对向往的公司的看法,也希望能帮到那些其他要面试的人吧"}, {"id": "6965469101636452388", "title": "【建议收藏】缺少 Vue3 和 Spring Boot 的实战项目经验？我这儿有啊！", "desc": "缺少 Vue3 和 Spring Boot 的实战项目经验？缺少学习项目和练手项目？我这儿有啊！ 从 2018年到 2021 年，空闲时间里陆陆续续做了一些开源项目，推荐给大家啊！记得点赞和收藏噢！"}, {"id": "6844903799035789325", "title": "寒冬中的前端社招面试", "desc": "本人17年毕业至今，一年多工作经验，三月中旬加入了找工作的大潮。这里整理了一下最近面试的题目，分享给大家。 那来做道题吧。实现一个函数，可以按顺序获取到一个DOM节点下面所有的文本。 感觉技术栈和这家可能不是很匹配，他们主要做h5和小程序，h5也以vue居多，所以这些问题基本上…"}, {"id": "6928818840281776141", "title": "今天聊：如何拿下淘宝 P6+ 前端 Offer", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加 Scott 微信 codingdreamer 进大会周边技术群，前端页面搭建专场，2021-2-27，线上直播。 Hello！大家好，我是小问。是的，我的花名跟网名非常像，我网名叫小问，而花名也叫晓问，今天我的分享是如何拿…"}, {"id": "6991722178479816735", "title": "程序员优秀之路：一起来看下这 97 位”砖家“能给出啥编程的好建议？（2）", "desc": "本篇是系列第 2 篇，带你认识一些优秀的编程概念！有很多新鲜儿词~认知优秀、逐渐优秀、习惯优秀......"}, {"id": "6880028535101227021", "title": "【面试说】一年半前端 Bigo 一二三 面", "desc": "笔者其实是三月份就面的 Bigo，当时工作经验算一年半多。之所以现在才发，其实是之前虽然总结了，但多半是自己总结归纳复盘用，有点粗糙，现在重新整理，希望对大家有所帮助 引用类型：对象（Object）。其中对象类型包括：数组（Array）、函数（Function）、还有两个特殊的…"}, {"id": "6844904183632494600", "title": "五月前端面试报告 | 上海", "desc": "时至6月，新冠影响渐小。 虽然今年注定是全世界的经济寒冬，但地摊还是要摆的，面试也是也要去的。 先说下本人的情况：坐标上海，三非本科（非双一流非计算机专业），前端老菜鸟，小公司在职，技术栈Vue + ElementUI。本来打算年后跳槽的，被疫情逼到了年中。五一开始做面试准备，…"}, {"id": "6844903688297775112", "title": "如何轻松拿到淘宝前端 offer | 掘金技术征文", "desc": "如果你要面试一些大厂，(这里以个人经历的淘宝面试为例)，准备肯定是需要的，就算是网上的各种技术大神，从繁忙的业务项目中脱离，回答一些具体的技术问题时，在没有准备的情况下，也很难回答的出色，毕竟这不像他们写文章或者回答问题时有充足的查阅、消化和总结的时间。 嗯，回到正题，那么我们…"}, {"id": "6973499606961225741", "title": "做题家：不可不会的“算法设计与分析”！【面试笔试】", "desc": "最近由于要做测评，遂整理算法设计与分析这一块的内容，复习的同时，与大家分享交流~ 喂！算法！逃不掉的！All Right? 分治法 比较典型的有：排序算法（归并排序、快速排序）、傅立叶变换......"}, {"id": "6844903650498707463", "title": "由对象到原型", "desc": "众所周知，在面试中我们经常会被面试官问到js的基本类型是什么，这个问题虽然基础但也正因为如此从而很考验求职者的基础。ok，那如果求职者回答出来了并且不想再考验他基础了，那就可以换一个角度问他，js中最牛掰的类型是什么？没错，答案就是除了基本类型之外的复杂类型 => Obejct…"}, {"id": "6935822915933995022", "title": "CSS居中", "desc": "水平居中的元素设置：绝对定位和margin-left: -width/2，以及left:50%。 前提是父元素position: relative 将块级元素设置为display：inline-block,父级元素设置text-align:center实现水平居中。 绝对定位 …"}, {"id": "6844904113298210824", "title": "计算机网络基础——http&&https", "desc": "在面试中面试官总会问上几道关于网络方面的问题，所以想简单总结一下面试中常问的网络方面问题。主要针对http和https。"}, {"id": "6900569589948612621", "title": "前端跨域你还不懂 [常见解决方案]", "desc": "哈哈哈 ~ 跨域可以说在前端是一个非常常见的问题，遇到的场景也是各式各样，我们今天就来看看跨域到底是个什么玩意儿 . 又如何把这个玩意儿搞明白 。 域: 是指计算机网络中的一种形式， 在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配对该域内资源的访问权限…"}, {"id": "6909742738774687757", "title": "【Daily Interview】- 10 简化路径", "desc": ". .. 上面的代码看着尚不算太丑，是因为总共需要处理的逻辑不多，假如这里我们还需要处理额外的逻辑，比如遇到 ~，认为是 /home/user，那么我们就只能新增额外的条件分支，以至后期代码逐渐变得庞大混乱，难以维护。"}, {"id": "6844903857110122504", "title": "[深入理解ES6]let/const/var", "desc": "<深入理解ES6>一书中,提起 let/const 这也是平常工作用的比较多,最近需要给公司做培训. 重新复习下以往的知识点. 本文首发自 github 个人博客. 来这里讨论 通过下面的例子, 可以复习下, 关键字var声明带来的影响. 由于变量提升的缘故, function…"}, {"id": "6948336308926300168", "title": "工程化进阶之模块编译——优化编译", "desc": "假定现在你已经完成前置的项目初始化构建，包括npm注入，git仓库的指定，以及项目『vue、react』的本地启动和初始化编译，最起码的你完成了这些框架脚手架初始化搭建。 那么现在你的项目中会依赖上很多三方库或者工具，比如Vue、React、jQuery、loadash、ech…"}, {"id": "6844903873962835976", "title": "前端面试排雷之唱、跳、rap三步曲（ 三 ）rap篇", "desc": "😊前面两篇讲述的，简历、面试，那么这一篇将会告诉你，怎么练习。人的记忆都是线性的记忆，对于大部分人来说，笔、背、看，都是绝对正义的方法。 \"局限\"。面试了很多人，发现很多萌新甚至一些3年经验以上的人，都有一个误区，那就是太过局限自己。把自己局限在前端，局限在React、Vue…"}, {"id": "6921939656070135816", "title": "【Daily Interview】- 27 left-pad", "desc": "这个题目很简单，不过在开源社区其实有着相当的知名度，因为一个开发者对 NPM 公司不满，unpublish 了自己的所有模块。其中包括被广泛使用的 left-pad，导致 Babel、ReactNative、Ember 等大量工具构建失败。 不过这段代码遭到了大佬左耳朵耗子的吐…"}, {"id": "6913795552400703502", "title": "【Daily Interview】- 14 相同的树", "desc": "题目图片1分析所谓树，其实是基于链表之上的一种数据结构，通过之前的学习，我们已经清楚了什么是链表，而在此之上，若节点不仅仅有一个 next，而是有多个 next 指向不同的节点，那便形成了树，可见下图"}, {"id": "6844904195556900878", "title": "每天一道题：简简单单快速理解函数节流和函数防抖", "desc": "我们知道玩游戏的时候有个设定叫垂直同步，可以强制要求游戏画面的刷新率限制在 60fps 以内，这样我们的显卡就不会在每次渲染游戏画面的时候，拼劲全力渲染最高帧数。 60fps 既可以满足大家的肉眼游戏需求，还可以让显卡一直稳定工作，不至于一直高强度工作，大大提升了显卡的使用寿命…"}, {"id": "6911606421104623630", "title": "【Daily Interview】- 13 环形链表Ⅱ", "desc": "前面已经做过基础的环形链表了，感兴趣的读者可以去看看这一篇：环形链表。 这里对环形链表不再赘述，接下来分析题目：在判断链表是否是环形之余，还需要找到入口节点。 这里的 3 就是环的入口节点。 明白了这点，那么题目其实已经比较好解了：当我们找到重合的第一个节点的时候，显然就是入口…"}, {"id": "6844904130557771789", "title": "前端还是要了解一下的网络协议相关滴！", "desc": "2.服务端接收到，然后增加一个ACK=1返回给客户端。（返回给客户端的是ACK=1，SYN=1） 4.客户端接收到后发送ACK=1，表示接收到消息。 如果一个连接请求在网络中超时了，在这个时候客户端会重新发送请求，但是最终超时的请求还是会到服务端，服务端接收了两个请求，就会创建…"}, {"id": "6972136255777685517", "title": "前端基础面试题4", "desc": "Vue的双向数据绑定原理是什么？ Vue数据双向绑定是通过数据劫持结合“发布者-订阅者模式”的方式来实现的。"}, {"id": "6844903619045949447", "title": "深入理解javascript系列(二):内存空间", "desc": "因为javascript有GC存在，所以内存空间并不是被我们重视。王立大神说\"理解内存空间，就是成为大牛的开始\"。所以我们很有必要学习和理解内存空间。 函数运行时，会创建一个执行环境，这个执行环境叫做执行上下文（Execution Context）。在执行上下文中，会创建一个叫…"}, {"id": "6844904078145748999", "title": "面试被问尾递归优化知道怎么做吗？", "desc": "递归本质上也是一种函数循环，在函数里对自身的一种调用，在一些常用的数据结构二叉树、图等会用到递归进行遍历、搜索，本节讲的是在普通递归基础之上的尾递归优化。 看完这些概念会很晦涩，还是难以理解，下面让我们通过一个简单的阶乘例子彻底弄清楚它。 下面这个例子中，拿到尾部 factor…"}, {"id": "6844903522106884104", "title": "如何绕过面试题中的小坑", "desc": "如果你能够都答对可以忽略本文的阅读.免得浪费时间 接下来我要带大家分析下为什么是这样的结果 分析之前你需要明白的是 创建应用程序的时候,总免不了要声明变量和函数 解析器（interpreter）是如何以及从哪里找到这些数据（变量，函数）的， 当我们引用一个变量时，在解析器内部又…"}, {"id": "6844904096877510663", "title": "面试专题总结：this指向问题", "desc": "独立函数调用时，this 指向全局对象（window），如果使用严格模式，那么全局对象无法使用默认绑定， this绑定至 undefined。 描述：隐式丢失指的是函数中的 this 丢失绑定对象，即它会应用第 1 条的默认绑定规则，从而将 this 绑定到全局对象或者 und…"}, {"id": "6845166891057545230", "title": "「面试基础小册」数据类型及其延伸", "desc": "「面试基础小册」系列正式开写。主要是对一些基础相关的知识进行归纳整理与拓展。后续还有更多，敬请期待 本文讲述的是 javascript 的类型相关知识，并且对此进行延伸。 一种引用数据类型——Object，里面包含 Function、Array、Date 等。 typeof 能…"}, {"id": "6946144046507589639", "title": "关于闭包的问题", "desc": "当一个函数内部再套用一个函数，便会存在闭包。内部的函数可以访问外部的函数中声明的参数和变量，即使外部函数已经终结。 内存泄露源自于一直被占用的内存无法被浏览器回收，如果被占用的内存又一直在分配资源的话，可能会导致内存空间不足，从而导致内存泄露。 闭包的结果是当前局部的父级函数中…"}, {"id": "6844903618999500808", "title": "10分钟了解JS堆、栈以及事件循环的概念", "desc": "其实一开始对栈、堆的概念特别模糊，只知道好像跟内存有关，又好像事件循环也沾一点边。面试薄荷的时候，面试官正好也问到了这个问题，当时只能大方的承认不会。痛定思痛，回去好好的研究一番。 我们将从JS的内存机制以及事件机制和大量的🌰（例子）来了解栈、堆究竟是个什么玩意。概念比较多，…"}, {"id": "7000934255622635533", "title": "在地址栏里输入一个URL,到这个页面出现，中间会发生什么？", "desc": "HEY，小伙伴们！ 这是一道经典的面试题，我根据自己理解简单讲一下吧！ 当我们在浏览器url中输入我们的域名网址，浏览器会先去查找这个域名是否在缓存中，先去查找的是浏览器缓存，其次是系统缓存，最后是路"}, {"id": "6977625866620633118", "title": "拼多多技术面试算法题", "desc": "面试算法题 一面算法 经常会遇到后端传给我的是一个拍平的树结构，将这样的结构，转为树结构，可以用于类似cascader 例: 实现思路: 先找到根节点 再从根节点递归找其孩子 二面算法 在一个一维坐标"}, {"id": "6968727396539170847", "title": "ES2015+考点集中解析", "desc": "对象与数组的解构 解构是 ES6 提供给我们的一种新的提取数据的模式，这种模式能够帮助我们从对象或数组里有针对性地拿到我们想要的数值。 数组的解构 在解构数组时，我们是以元素的位置为匹配条件来提取我们"}, {"id": "6977389320302755871", "title": "面试题：数组去重的N种方法", "desc": "这是我参与更文挑战的第23天，活动详情查看： 更文挑战 前提 面试官在考察面试者的数组基础的时候，经常会问面试者一道题：数组该如何去重？这道题比较高频，因为它可以考察面试者对数组方法掌握的熟悉程度，以"}, {"id": "6992588230851985445", "title": "002-React-面试题整理", "desc": "一：变量提升 提升是用来描述变量和函数移动到其(全局或函数)作用域顶部的术语。 执行上下文有两个阶段：编译和执行。 编译：此阶段中，JS引擎获取所有函数声明并将其提升到其作用域的顶部，以便我们稍后可以"}, {"id": "6987639576965677086", "title": "前端面试题（持续更新）", "desc": "Vue 组件通信 单页面应用和多页面应用区别 页面渲染 v-if 和v-show 如何从0搭建项目。"}, {"id": "6987621696400261134", "title": "前端面试题目—js", "desc": "这是我在掘金写得第二篇文章，文章中一个问题就是一个知识点，建议大家多看看其他文章，多查阅资料，最好自己总结一下，真正搞懂，这样在面试的时候就不是背出来给面试官听，而是用自己的话说出来。"}, {"id": "6844903630181498887", "title": "鹅厂4面", "desc": "我： 用的koa-router，koa 的中间件 ，运用洋葱路由模型 添加的koa-router。koa-router内部通过判断 url是否匹配，来对相应接口返回相应内容 我： promise 内部包括的代码 保证他能执行 ，， promise()接受一个函数，函数有reso…"}, {"id": "6844904024542543880", "title": "《前端实战总结》之使用纯css实现网站换肤和焦点图切换动画", "desc": "今天我们来继续复盘一些工作中常用的css技巧和知识,以便我们可以更加优雅的用css实现富有动感的网站. 以上几个方案都可以实现一定程度上的换肤效果,但是如果是一些基础性的换肤,比如网站的背景样式,某个按钮的样式,某块内容区域的样式等等这种局部的换肤,我们能不能直接用css来实现…"}, {"id": "6962037968013885448", "title": "改变 this 指向、深入理解 call/apply/bind 的原理", "desc": "前言 在“多数情况下”，this 遵循的指向机制。在另外一些情况下 this 是不遵循这个机制的。改变 this 的指向，我们主要有两条路： 通过改变书写代码的方式做到（比如箭头函数）。 显式地调用一"}, {"id": "6894535259544059917", "title": "jsliang 求职系列 - 12 - 手写防抖和节流", "desc": "防抖：任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。 监听拖拽滚动条，然后频繁向下滚动信息，会变得很慢，很迟钝。 点击提交表单后，用户在结果还没出来的时候重复触发。 简单来说：某件事你并不想它太过频繁触发，那么设置一个定时器，每次进来的时候都清除原本…"}, {"id": "6844903991780835335", "title": "一文搞懂Web中暗藏的密码学", "desc": "相信不少前后端的朋友，在面试时都会被问到类似的问题。 在我对密码学一无所知时，也仅会回答：“MD5加密啊。” 诸不知，密码学在网络七层模型，甚至web开发中的应用比我想象得多得多。 1. 什么是密码学？ 密码学是各种安全应用程序所必需的，现代密码学旨在创建通过应用数学原理和计算…"}, {"id": "6913751880631844872", "title": "面试中的题目记录", "desc": "LM-Factor 与它俩有关。 简而言之，一个静态资源没有设置 Cache-Control 时会以这两个响应头来设置强制缓存时间：(Date - LastModified) * n，而非直接进行协商缓存。在涉及到 CDN 时，表现更为明显，体现在更新代码部署后，界面没有更新。…"}, {"id": "6999504062634819615", "title": "html，css，浏览器，网络等重要知识总结", "desc": "html部分 对HTML语义化的理解 1.用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。 2.适合搜索引擎的爬虫爬取有效信息，有利于SEO。 3.更容易让"}, {"id": "6943788276385857573", "title": "高频面试题 -- Event Loop", "desc": "如果不会的小伙伴可以先往下看，了解js执行机制之后再回来看这道题。 event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。 NodeJS的Event Loop是基于libuv实现的。 | 具体事件| 1…"}, {"id": "6844904089050972167", "title": "想用Vuejs突破20K必备的热门面试题之 二--九", "desc": "Vue组件可能存在多个实例，如果使用对象形式定义data，则会导致它们共用一个data对象，那么状态变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在initData时会将其作为工厂函数返回全新data对象，有效规避多实例之间状态污染问题。而在Vue根实例创建过程中则…"}, {"id": "6964368478182572039", "title": "经典的浏览器安全问题", "desc": "浏览器的安全策略结束。包含了同源策略，xss攻击，csrf以及https的介绍。希望通过这篇文章的讲解，大家对浏览器的安全有个新的认识，面试的时候也可以不慌"}, {"id": "6844903960080285709", "title": "动画：面试官问我 0.1 + 0.2 __ 0.3 ? 为什么？该如何正确回答？", "desc": "第一次去面试，面试官问我0.1 + 0,2 __ 0.3？估计很多人都知道在 JS 中0.1 + 0.2 != 0.3 的，至于大于还是小于还真没弄明白。 像这种变态的问题，在 JS 中存在很多，那小鹿就干脆整理成了一系列，希望对你的 JS 基础进一步加牢，也希望你能在面试中顺…"}, {"id": "6991718021286854663", "title": "04 javascript-闭包面试真题集中解析", "desc": "闭包面试真题集中解析,真题解析拆分讲解。我们作用域的划分，是在书写的过程中，根据你把它写在哪个位置来决定的。像这样划分出来的作用域，遵循的就是词法作用域模型。"}, {"id": "6844903870649335821", "title": "哈罗出行面试", "desc": "1. es6中generator 2. options预请求是什么 (1). get和post皆存在预请求 (2). 什么是预请求 3. https加密流程 4. call,apply传入null,里面的this会是什么? 5. vue的hot-module是怎么实现的? 6.…"}, {"id": "6844903623093125127", "title": "2018前端面试知识整理【上】", "desc": "最近又迎来一年一度的求职高峰，本人也是准备找工作，于是整理了一下面试中可能出现的知识点。欢迎补充，本集内容只包含html和css。js下期分享吧。 声明于html文档中第一行，告知浏览器的解析器用什么文档标准解析这个文档。 link属于xhtml标签，除了加载css外，还能定义…"}, {"id": "6844903508685094926", "title": "前端笔/面试经典百题答疑解惑", "desc": "由于从校招实习到校招提前批，一直在学习前端相关的基础知识并针对具体遇到的细节进行查漏补缺，零零散散发现很多内容值得反复回顾，汇总到这里，供大家参考。欢迎有兴趣的同学一起建设该部分，大致分为以下几个方面： HTML, CSS, JavaScript, Node 和 HTTP。"}, {"id": "6844904081962565645", "title": "万丈高楼平地起，巩固你的基础知识点，js知识点巩固第一步，面试不在难（1）", "desc": "万丈高楼平地起，为了更好的工作我们必须熟记这些知识点。虽然不一定用到，但记还是要记得。这个只是我知识点整理的第一步后面会慢慢更新的，看的好可以点个赞，谢啦! 常用的数据类型判断方法有三种typeof,instanceof,Object.prototype.toString.ca…"}, {"id": "6844903922453348359", "title": "2019年17道高频React面试题及详解", "desc": "以下面试题来源于github项目前端面试指南,那里有超过200道高频前端面试题及答案,目前拥有1400star. 组件化: 其中以 React 的组件化最为彻底,甚至可以到函数级别的原子组件,高度的组件化可以是我们的工程易于维护、易于组合拓展。 天然分层: JQuery 时代的…"}, {"id": "6844903641296404488", "title": "一次前端面试的提问总结", "desc": "记一次比较遥远的面试提问，记得多少写多少，附较详细的解答，欢迎指出错误。 1. 说说CSS中的相对定位与绝对定位： position: relative;为相对定位，根据自身位置来进行定位。 position: absolute;为绝对定位，若父级节点的position属性不为…"}, {"id": "6844903624607268877", "title": "最近实际项目中遇到的技术问题与解决思路", "desc": "距上一篇博客发布已经过去整整2个月。这两个月中发生了一些事情，比如离职，面试，入职等等，感触颇多。其实一次好的面试，即使没有成功入职也会有很多收获。 这次面试面了三家公司，拿了两家公司的offer，但是最让我中意的面试却没拿到offer，原因是下午去面试，精神状况不太好，有点疲…"}, {"id": "6979490986510516238", "title": "走进前端的第一步，还要进一步的学习", "desc": "今天上午接到了人生当中的第一个面试。面试的很欢快，不过由于第一次面试，我非常的紧张，也许是自己才准备了2天面试题，不充分的原因吧。从最初的对答入流，到最后尴尬的收场，重点是知道了自己的不足的地方，相信"}, {"id": "6844903831449370638", "title": "前端面试必杀技：this是个啥？", "desc": "所以，this 就是你 call 一个函数时，传入的 context。 如果你的函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式。 无论函数是在哪个作用域中被调用,只要是独立调用则就会按默认绑定规则被绑定到全局对象或者undefined上。 通过c…"}, {"id": "6979408135261782046", "title": "跨域解决方案", "desc": "什么是跨域 跨域的故事，要从“同源策略”说起了。 这里的源(origin)指的是协议、域名、端口号，同源指的是在url中协议、域名、端口号均相同。那么同源策略是浏览器的一个安全功能，不同源的脚本在没有"}, {"id": "6867792290782380045", "title": "前端面试系列【003】 - 什么是深拷贝，和浅拷贝有什么区别，动手实现一个深拷贝", "desc": "首先，我们知道在 js 中变量分为两种基础类型和引用类型两种。当我们将一个基础类型的变量赋值给另一个变量的时候，会在内存中新开辟一块空间来存放，而我们将引用类型赋值给一个新的变量的时候，实际上只是让这两个变量都指向了同一块内存。 明明修改的是 objA，却影响到了 objB，显…"}, {"id": "6847902216846573582", "title": "前端必知：进程、线程与页面渲染的关系", "desc": "因为打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。 下面我们来逐个分析下这几个进程的功能。 「浏览器进程」。主要负责界面显示、用户交互、子进程管理，同…"}, {"id": "6844903939335421965", "title": "简析vue的双向绑定原理", "desc": "Vue内部通过Object.defineProperty方法属性拦截的方式，把data对象里每个数据的读写转化成getter/setter，当数据变化时通知视图更新。 现在已经可以检测到数据的读和写，然后就需要通知视图的更新了. 这里是典型的发布订阅模式，在这个模式下：数据是发…"}, {"id": "6844904100069539848", "title": "面试：如何实现一个模板引擎？", "desc": "下次遇到，可以看看下面这个轮子 tplv（不用 star，因为这不是重点，重点在最后），应该是一个比较独特的思路（也算抖机灵吧）。 具体使用方式直接看 README 吧,和其他简单的模板引擎，没有什么很大区别。来一个简单的例子： 原理是利用 ES6 string templat…"}, {"id": "6913900062850416654", "title": "2021-web前端面试之旅-02-div水平垂直居中的方法", "desc": "在平时，我们经常会碰到让一个div框针对某个模块上下左右都居中（水平垂直居中），其实针对这种情况，我们有多种方法实现。"}, {"id": "6844903508567654413", "title": "这可能是史上最全的菜鸟前端面试题了", "desc": "记录了很多非常有用的面试题，对于面试非常有帮助"}, {"id": "6854573221337890824", "title": "你以为面试官在问深拷贝的时候，仅仅是在问深拷贝吗？", "desc": "深拷贝可以说是前端面试中非常高频的问题，也是一道基础题。所谓的基础不是说深拷贝本身是一个非常简单、非常基础的问题，而是面试官要通过深拷贝来考察候选人的JavaScript基础，甚至是程序设计能力。 我们知道在 JavaScript 中存在“引用类型“和“值类型“的概念。因为“引…"}, {"id": "6844903759005368327", "title": "跨域资源共享CORS", "desc": "本人是一个应届生，面试的时候经常会被问到跨域的问题，CORS当然也是解决跨域的方法之一了。但是当面试官继续问：“CORS跨域是怎么实现的？为什么会有OPTIONS请求呢？OPTIONS请求有什么用途呢？”可能回答的就不是那么完美。 所以，就总结归纳了以下关于CORS的详细知识。…"}, {"id": "6878272954661077005", "title": "【大厂面试题+详细解析】浏览器事件循环机制&堆栈内存与闭包", "desc": "这道题出现的频率非常高，感觉基本上是面试必问的题。我一共参与了五轮技术面，被问了三次，还不懂的小伙伴，长点心把！ 事件循环机制的总结：当前执行栈执行完毕时，会处理完所有的微任务，再去宏任务队列里取出一个事件执行。同一次事件循环中，微任务永远在宏任务之前执行 由此可见，在node…"}, {"id": "6907037283321397262", "title": "面试题day1 --", "desc": "localstorage 本地存储，不会销毁。 Session storage 会话层存储。浏览器窗口关闭后小时。 cookie 可以存储用户登录信息，可以自己设置过期时间。 ===会判断两边类型是否相等，类型相同按==判断，==会引起隐式转换。 call 和apply传参方式…"}, {"id": "6979492957170696206", "title": "前端面试之console输出顺序问题", "desc": "前言 最近在准备面试题，console的输出顺序之前一直迷迷糊糊。 注：资料都来自网络，自己只是整理一下。 必备知识 JS是单线程的 单线程是 JavaScript 核心特征之一。这意味着，在 JS "}, {"id": "6844903695495217160", "title": "浏览器输入 URL 后发生了什么？", "desc": "这是一道非常经典的题目，相信你被面试或者面试别人有非常大的概率接触过，也可能只是其中某一部分进行提问。这道题涵盖的知识点非常多，考察得比较全面，网上一搜也有成百上千篇文章，不同的人有不同的见解，然而大部分都是千篇一律。如果你没有深入透彻系统性地研究过，光靠死记硬背，面试官稍稍针…"}, {"id": "6844903789728808967", "title": "7 个开放式的 CSS 面试题", "desc": "不管你是面试官还是求职者，里面的思路都能让你获益匪浅。 这个问题可以让面试官了解求职者使用 CSS 的经验。它还可以告诉面试官该人是否将该技能作为业余爱好或在学术或专业环境中学习。 我在高中时就开始用 CSS 了。当时我和一些朋友为我们喜欢的电视节目搭了一个网站。不过这些页面很…"}, {"id": "6844904088522457095", "title": "全网最易懂版：什么是立即执行函数？有什么作用？", "desc": "大多数小伙伴不理解的可能是为什么要把匿名函数用一对括号包起来。 其实，这么做的目的是为了兼容JS的语法。 立即执行函数的作用只有一个，那就是创建独立的作用域。 让外部无法访问作用域内部的变量，从而避免变量污染。 上面的代码之所以输出的结果是1到6，而不是6个6，是因为我们每次都…"}, {"id": "6947934225685282846", "title": "前端算法面试必刷题系列[33]", "desc": "57. 删除有序数组中的重复项 II (remove-duplicates-from-sorted-array-ii) 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修…"}, {"id": "6844904158651219982", "title": "前端基础之vue篇", "desc": "MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成ViewModel。Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视…"}, {"id": "6896357279936413710", "title": "webpack 面试题（实战加原理）", "desc": "==重要的是要记得，在 webpack 配置中定义 loader 时，要定义在 module.rules 中，而不是 rules。== Plugin 插件是对构建过程进行整体处理（执行范围从打包和优化到压缩，一直到重新定义环境中的变量。） Webpack在启动后，从入口点开始，…"}, {"id": "6988007292142616589", "title": "js面试小结", "desc": "js的数据类型 基本数据类型：null undefined Number Boolean String 引用数据类型：object es6新增的数据类型 symbol null是对象吗？为什么"}, {"id": "6930204231706083335", "title": "写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？", "desc": "维持组件的状态，保证组件的复用。因为有 key 唯一标识了组件，不会在每次比较新旧两个节点是否是同一个节点的时候直接判断为同一个节点，而是会继续在接下来的节点中找到 key 相同的节点去比较，能找到相同的 key 的话就复用节点，不能找到的话就增加或者删除节点。"}, {"id": "6923951916749684744", "title": "[每日一题] 简述浏览器缓存机制", "desc": "浏览器的缓存分两种情况：强缓存和协商缓存。强缓存在发送http请求下载资源之前首先检查强缓存。使用的字段在http/1.0和http/1.1中分别是Expires和Cache-Control。Expi"}, {"id": "6845166890579394568", "title": "js 如何全部替代一个子串为另一个子串", "desc": "如果需要全量替换字符串，可以使用String.prototype.replace(re,replacer)，其中正则表达式需要开启globalflag那如题中，是否可以使用正则表达式来替代子串答：不可"}, {"id": "6979073675429412877", "title": "数组去重和排序", "desc": "```js // 基本数组的去重 // 方法1 es6语法 直接使用new Set() 方法 let arr = [11, 33, 11, 22] let list = Array.from(new "}, {"id": "6978503871832260639", "title": "你真的了解 JavaScript 继承么 ", "desc": "你真的了解 JavaScript 继承么 什么是继承 大多数人使用继承不外乎是为了获得这两点好处，代码的抽象和代码的复用。 代码的抽象就不用说了，交通工具和汽车这类的例子数不胜数，在Java语言中，代"}, {"id": "6915423800662163464", "title": "[每日一题]面试官问：JS引擎的执行过程（二）", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 我们把这个分为2篇文章讲。 本篇讲：语法分析和预编译阶段。 下一篇讲：执行阶段。 1、语法分析： 分别对加载完成的代码块进行语法检…"}, {"id": "6978873264009379876", "title": "vue3的proxy与vue2的defineProperty的对比", "desc": "这是我参与更文挑战的第27天，活动详情查看： 更文挑战 前言 vue3已经发布很久了，我们知道vue3在这个版本最大的变化是更改了双向绑定的实现，把defineProperty改成了proxy。那为什"}, {"id": "6844904100367171591", "title": "面试之路（不断更新）", "desc": "最近想换一份工作，在各大招聘网都投了简历。回应的寥寥无几~~~~，说到底就是太菜了。记录一下笔试题还有面试过程中问的问题，分享分享。 bfc(blcok formatting context),块格式化上下文，是页面css视觉渲染的一部分。用于决定块盒子的布局以及浮动相互影响的…"}, {"id": "6919690643136577550", "title": "【文件上传那些事儿】- 03 两种计算 hash 的方式", "desc": "做这一步之前，首先要知道，为什么要计算文件的 hash。 在第一章最基础的文件上传版本中，后端存储文件的方式是使用前端这边传过去的文件名，而我们知道，不同的两个文件，完全可以有相同的文件名，在这样的情况下，无论存储哪一个，都会覆盖掉另一个，而 hash 可以理解为文件的指纹，内…"}, {"id": "6844904086970581000", "title": "做一个能在线编程+视频对话的视频面试应用", "desc": "春招开始了，今年的春招从以前的促膝而坐改为了视频连线。一些招聘平台也已推出“视频面试”功能。其实大部分职位的视频面试，都与视频通话没有太大差别，基于我们的官方教程，很容易实现。 不过工程师如果进行视频面试，还需要经过技术面试。以往也有过一些在线答题的系统，所以我们完全可以将两者…"}, {"id": "6844903802206683149", "title": "金三银四，记录一次前端面试经历", "desc": "那天天气阴沉，下了一点小雨，但这并不能阻止我面试的热情。坐地铁到动物园站下车，走几分钟就到公司了。到了公司人事小姐姐就让你登记下，然后就来个前端，面试开始： 一面前端：你好，先自我介绍下吧。 我：好勒，我叫***，工作1年多，然后balabalaaaa... 我：大概有5种，分…"}, {"id": "6844904181099134984", "title": "字节、腾讯、滴滴前端面试经验分享，裸辞过后，我终于又活过来了！", "desc": "由于紧张怕错过面试，早早的便坐在了电脑桌前。面试官迟到了一会，就给我发起了面试视频邀请，终于开始了。 迎面是一个挺帅气的哥哥，简单的打了一下招呼，就进入了自我介绍的环节。由于自我介绍我已经熟悉过几遍了，自我介绍的效果看起来效果还是不错的。 开始问我项目经历的细节以及自我介绍中的…"}, {"id": "6992614569357082631", "title": "7月份面经总结，持续更新中......", "desc": "7月份面经总结，持续更新中。。。满满的干货，算是对最近面试的大厂做的一些总结吧，自己做个记录，同时分享给大家。共同进步，奥力给~~~"}, {"id": "6969501448916713479", "title": "面红耳赤！Vite竟然使用这种方式来解决模块化打包！", "desc": "随着web页面上的JavaScript程序越来越复杂，浏览器开始原生支持模块功能。浏览器能够最优化加载模块，使它比使用库更有效率：使用库通常需要做额外的客户端处理。"}, {"id": "6992593567709397029", "title": "前端面试基础Javascript 篇", "desc": "前端面试javascript篇，做一个总结，慢慢补充下，1.JS的数据类型 2.作用域 JavaScript 的静态作用域链与“动态”闭包链"}, {"id": "6867510004908457998", "title": "一次前端面试", "desc": "Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。 以秒计时，1秒内对文件的修改，可能不会正确感知。 10- I. 斐波那契数列"}, {"id": "6992545020951658503", "title": "JavaScipt和Vue面试常见题", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 JavaScipt set 去重复 基本用法 [..new Set()] map 键值对. 基本用法 -map.set -map.get -"}, {"id": "6844903633637605383", "title": "「 ThoughtWorks面试 —— 一次愉快的技术交流 | 掘金技术征文」", "desc": "作为一名前端程序猿，ThoughtWorks的面试在一定程度上冲击了我的认知，面试过程中不仅让我了解了自身优势，也对自己不足有了很深的认知，抛开面试结果来说，整个面试过程就是一次愉快的技术交流。 很久以前就对TW有所了解，由于自己的不自信和一些其他原因一直不敢尝试，最近收到了朋…"}, {"id": "6977761186477506573", "title": "简单来聊聊js的垃圾回收机制", "desc": "这是我参与更文挑战的第24天，活动详情查看： 更文挑战 前言 最近看到一个面试题，题目是： 你能介绍一下js的垃圾回收机制吗，以及强引用和弱引用对垃圾回收有何影响？ 之前也看过一个垃圾回收的内容，但是"}, {"id": "6844903865981075470", "title": "css深入研究", "desc": "在介绍完问题学习法之后，进入我们今天的主题，接下来我会介绍css的一些底层的知识和比较诡异的现象，借此来让大家对css有更深入的理解。 我们会发现，当容器宽度设置为0后，由于首选宽度的影响，出现了基于文字空间的形状。 理论上父元素宽度因该是子元素宽度之和，但是却出现了上图的现象…"}, {"id": "6975163255572398110", "title": "如何将一颗不平衡二叉树变成平衡二叉树", "desc": "如何将一颗不平衡二叉树变成平衡二叉树 前面我们了解了平衡二叉树，并且用js代码实现将平衡二叉树的判断，那么我们如何将一颗不平衡二叉树变成平衡二叉树呢？ 我们就要对二叉树进行一种操作-旋转。也就是两个结"}, {"id": "6844903582152523784", "title": "记一次阿里电话面试| 掘金技术征文", "desc": "当天下午看到了招聘需求，就托人进行了内推，下班前收到邮件说会在7个工作日内联系进行面试。没想到在回家路上就接到了阿里面试官的电话，说要进行电话面试。由于当时在外面，不太方便，就告诉面试官10分钟后回到家进行面试，面试官答应了，感谢面试官。 10分钟面试正式开始，其实我已经戴好耳…"}, {"id": "6911126897460002829", "title": "理解异或 Exclusive or", "desc": "常见的逻辑操作：与、或、非大家应该都熟悉，也非常容易理解。在高中数学中也学习过一些布尔代数的知识。在逻辑电路中（位操作）与、或、非同样也非常容易理解。但是逻辑电路中增加了一个非常重要的运算异或（XOR），常见的教科书只是介绍了异或的定义，于是大多数人只记住了异或的运算规则是什么…"}, {"id": "6988701022700961805", "title": "手动实现 JS 操作对象、数组的一些 方法 call、apply、bind、find、map、forEach、filter", "desc": "1、手动实现 call 方法 2、手动实现 apply 方法 3、手动实现 bind 方法 4、手动实现 find 方法 5、手动实现 map 方法 6、手动实现 forEach 方法 7、手动实现 "}, {"id": "6844903589983289358", "title": "简单说一下 [清除 & 闭合] 浮动", "desc": "本文的起因是团队现在处于缺人的阶段，最近开始帮忙进行电话面试的操作。面了不少了，有不少收获，其中最大的还是对自己的警惕作用。虽然是自己在面试别人，但也发现，很多在交流过程中涉及到的内容，自己虽然都知道或者有了解，但是要系统或者清晰的描述出来其实是不容易的，所以开始整理一些看似都…"}, {"id": "6981423539186302983", "title": "2021.6.30 面试刷题day1", "desc": "什么是SEO？ 遵循W3C规范，语义化的HTML代码 a. 非装饰性图片加alt b. 用合适的标签左合适的事情 c. 重要内容不用js输出：爬虫不会执行js获取内容 d. 爬虫不会抓取iframe内"}, {"id": "6873383627800412173", "title": "面试官：你知道垃圾回收吗？", "desc": "首先我们需要了解一下栈内存和堆内存的区别，栈内存一般是由操作系统去自动管理的，而下面我们要讨论的内存管理指的是堆内存，可以被人工管理，比如c/c++，但是人工的风险总是很大的，所以很多语言引入了自动堆内存管理GC机制，比如JVM、JavaScript、C#、Golang、OCa…"}, {"id": "6920619435170463751", "title": "【每日一题】(18题)面试官问：JS中的 Ajax 跨域与扩展Comet？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 昨天的题目号码写错了，在这里做个说明。 通过XMLHttpRequest实现Ajax通讯有一个主要限制，来源于跨域安全策略。默认情…"}, {"id": "6844904134894682125", "title": "这道易错js执行顺序的题，隐藏的点你get到了吗？", "desc": "console输出promise,。then为微任务，挂起，然后执行script end， 这样写，我觉得大多数了解js运行机制的掘金炮友都知道答案，也基本上都能解释出来(这里不着重讲微任务宏任务，详情看掘金其他炮友的文章，都写的很好)。 在这个函数里里我们加上await后,也…"}, {"id": "6844904104813133838", "title": "详谈从输入url到页面显示内容的过程发生了什么", "desc": "2. 强/本地缓存的查找 强缓存是根据返回头中的Expires或者Cache-Control两个字段来控制的，都是表示资源的缓存有效时间。 Expires是 http 1.0 的规范，值是一个GMT 格式的时间点字符串，比如 Expires:Mon,18 Oct 2066 23…"}, {"id": "6959884027234877470", "title": "一文解决前端面试①----HTML与CSS（最详细总结两剑客☝）", "desc": "大家好，我是Kerwin丶R，现在在腾讯实习，一路走来，受到了许许多多人的帮助，也拜读了各方大神的文章，现在把自己的笔记慢慢全部总结整理开源，希望能够帮助到更多的人，能够和您一起进步。"}, {"id": "6864262166606774279", "title": "搞明白原型对象-附面试题", "desc": "当通过new调用函数创建实例后，该实例内部包含一个指针 [[Prototype]] 指向构造函数的原型对象，该属性为内部属性，无法直接访问，但在Firfox、Chrome和Safari中有一个 __proto__ 属性可以访问到构造函数的原型。"}, {"id": "6844903726486913032", "title": "setTimeout&Promise&Async之间的爱恨情仇", "desc": "按照定义：setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。第一种方法在指定毫秒数之后执行，第二种方法没有在指定毫秒数后执行，而是立刻执行。所以我个人将其分成正规军setTimeout和杂牌军setTimeout，方便后面记忆。 对于setTimeout(…"}, {"id": "6844904081748672519", "title": "三次大厂实习面试的相关总结", "desc": "简单起个头，对于应届实习生，还是考基础的多😢。 首先一共参加了三次面试，第一次面试就不知死活的撞上了阿里的ICBU，死的老惨了。剩下两次又是头条的大佬们，说来也不光是我不知死活，目前好像确实只有大厂还在招实习生。 说一个个人情况，从去年5月接触Web，到8月开始专心学习前端，…"}, {"id": "6981729455324528671", "title": "JS-史上最清新的Generator", "desc": "1、什么是Generator函数？ ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。 特点： Gen"}, {"id": "6975819178372661284", "title": "性能优化： 防抖和节流", "desc": "debounce 防抖 debounce(f, ms)装饰器的结果是一个包装器，该包装器将暂停对 f 的调用，直到经过 ms 毫秒的非活动状态（没有函数调用，“冷却期”），然后使用最新的参数调用 f "}, {"id": "6844904122290798606", "title": "金三银四跳槽季，帮你整理了一份初中级前端面试题助力升职加薪 ", "desc": "display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。 visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。 清除浮动的技巧 浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮…"}, {"id": "6957930472483586078", "title": "面试官: 翻译翻译什么 TM 叫 React Diff ", "desc": "回答要有逻辑, 从 react 渲染设计思想, 面临的问题, diff 算法原理, 有哪些问题, 可能解决的办法 角度出发 浏览器性能瓶颈是 DOM, react 是采用虚拟 DOM 思想, 当需要重"}, {"id": "6844904182017687559", "title": "面试官要求我们手动实现 Promise.all", "desc": "最近面试，有两次被问到手动实现 Promise.all，不幸的是我都没把这题做好。因为我没有去准备这个，我不知道手动实现已有的 API 有什么意义。 但是为了防止以后还会遇到此类题，还是记录下吧，同时也是为了给同样遇到该面试题坑的同学一点微不足道的帮助。 其实这道题并没有什么难…"}, {"id": "6867344056142594062", "title": "前端面试系列【001】 - React 高阶组件、Render props 和 hooks 有什么区别，为什么要不断迭代？", "desc": "我们先来看第一个问题，而第一个问题，要讲清楚这三者的区别，那自然要明白三者分别是什么。 高阶组件（HOC）是 React 中用于复用组件逻辑的一种技巧。其本质是： Hooks 是 React 16.8 中新增的特性。它可以让你在不编写 class 的情况下使用 state，li…"}, {"id": "6844903554969239566", "title": "【译】 (a ==1 && a== 2 && a==3) 有可能是 true 吗？", "desc": "在 JavaScript 中， (a ==1 && a== 2 && a==3) 是否有可能为 true ？ 这是一道我被某科技公司问到的面试题。发生在两周之前，我仍然在努力寻找答案。 我知道我们从来不会在日常工作中写出这样的代码，但我对问题的答案仍然十分很好奇。"}, {"id": "6937240864561299492", "title": "前端算法面试必刷题系列[19]", "desc": "33. 最大子序和 (maximum-subarray) 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 而动态规划求出的是最优状态，所以必然也是针对状态的操作，而状态自然可以出现在最优解中，也可以不出现——这便是决策的特…"}, {"id": "6896476345808175111", "title": "js 继承 实现方式", "desc": "子类实例成员之间共享父类的属性，如果该属性是引用数据类型，子类实例成员之间将相互影响。"}, {"id": "6844904015491235847", "title": "《前端实战总结》之使用解释器模式实现获取元素Xpath路径的算法", "desc": "前端领域里基于javascript的设计模式和算法有很多，在很多复杂应用中也扮演着很重要的角色，接下来就介绍一下javascript设计模式中的解释器模式，并用它来实现一个获取元素Xpath路径的算法。 定义听起来可能比较抽象，举个例子比如我们常见的网站多语言，要实现多语言我们…"}, {"id": "6869638376165900295", "title": "前端面试系列【008】 - 谈一谈你对 vue 组件化的理解", "desc": "这个问题命题较大，我们可以从组件化的原理，优点开题，然后落地到 vue 中组件的原理，实现。 作为前端工作人员，想必对于组件一定是不会陌生的，vue 也全是组件化框架，react 也全是组件化框架。 事实上，随着前些年移动互联网的兴起，很多的程序业务逻辑日益复杂，早期简单的架构…"}, {"id": "6922840256001605646", "title": "【每日一题】(38题)谈谈React Hooks 与Vue3.0 Function based API的对比？", "desc": "React Hooks 是 React16.8 引入的新特性，支持在类组件之外使用 state、生命周期等特性。 Vue Function-based API 是 Vue3.0 最重要的 RFC (Requests for Comments)，将 2.x 中与组件逻辑相关的选项…"}, {"id": "6844904147611811853", "title": "[面试题总结]css、网络编程、异步、webpack", "desc": "koa是使用async、await实现的一种洋葱圈模型，通过next把执行权交给下一个中间件，直到最后一个中间件不调用next，控制权沿途返回。next之后的代码可以执行 redux中间件是一系列函数的柯里化，依次传递action，直到redux的原生dispatch。 跨域拦…"}, {"id": "6936412479035703327", "title": "前端知识体系", "desc": "这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为 【CSS 预处理器】 的工具，提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大提高了前端在样式上的开发效率。 CSS 预处理器定义了一种新的语言，其基本思想…"}, {"id": "6844903775648350221", "title": "刷前端面经笔记（九）", "desc": "二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。 如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。 则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。 （3）如果某一步数组为空，则表示找不到目标元素。 这个问题要倒…"}, {"id": "6844903807151767560", "title": "排名前301道ReactJS面试问题与解答", "desc": "试题范围涉及 React.js 核心、React Router、React Redux、React 测试和 React 国际化等。"}, {"id": "6950157500477866021", "title": "用线性代数解前端面试题", "desc": "前几天看到一个面试题，如下图：大概意思就是任意给一个鼠标位置，求鼠标位置是在哪个区域，上三角？下三角？还是正好在分割线上？原文链接解法很简单原文里有介绍： 用x/y和宽/高比较下就能得到结果。原文中也"}, {"id": "6983680133282398215", "title": "面试的笔试题遇见的问题", "desc": "vant-ui的按需导入 首先在babel.config.js文件中配置： 然后在入口文件main.js中按需导入 避免后期按需导入的组件越来越多，导致main.js混乱，我们可以新建一个js文件用来"}, {"id": "6999442700143427614", "title": "闭包之面试大型翻车现场", "desc": "闭包是 JavaScript 中最基本也是最重要的概念之一，很多开发者都对它「了如指掌」。可是闭包又绝对不是一个单一的概念：它涉及作用域、作用域链、执行上下文、内存管理等多重知识点。  不管是新手还是"}, {"id": "7004468507026915365", "title": "【面试题库】模板引擎", "desc": "目录 模板引擎 new Function('参数','函数体'); 动态创建函数体 模板渲染函数 编译过程 一、模板引擎 1) 需求 1.1） {{ }} 表达式 其实就是 将{{ }}中的值根据替换"}, {"id": "6844903797848981512", "title": "写给初级前端的面试经验", "desc": "最近到了金三银四的跳槽季，很多人都会面临跳槽找工作，并且再过几个月又会到毕业季，越来越多的毕业生会面临这个问题。 简历最好在 1-2 页，最好不超过 2 页。简历真的不是字写的多就好，不管是技术还是 hr 都很难一个字一个字看你的简历。所以简历上写的一定是精华，需要写你的优势。…"}, {"id": "6998341202269437960", "title": "小小的一篇面经", "desc": "本文主要是记录一下笔者之前面的一家TOP100的面经。个人感觉难度一般，希望对你有所帮助。。。 开始吧 一面——CSS篇（部分，全部的"}, {"id": "6844904167002079239", "title": "五月中级前端面试报告", "desc": "由于考虑到个人发展原因，从杭州回到了老家陕西，面试了7、8家，2个offer收场。记录一下面试情况。（题目不重要，重点在于如何将眼花缭乱的题目分类到你的知识体系中。 公司情况：初创公司，银行项目，人数20+，需出差。 思考：负责人注重项目，基础知识没问，问题就集中在「项目难点、…"}, {"id": "7002157887527059492", "title": "【前端--面试】常见面试题（十五）—— 简答题", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 null和undefined的区别？ null是一个表示\"无\"的对象，转为数值时为0；undefined是一个表示\"无\"的原始值，转为数值"}, {"id": "6995404801848639501", "title": "面试官最喜欢问☞HTTP及浏览器专题", "desc": "本专题按照HTTP 浏览器 进行整理的前端面试题知识点，适合针对HTTP部分进行全面复习的同学，查缺补漏，知识面比较全，进行复习"}, {"id": "6960274399660343332", "title": "开源囧事4：你们这些卖代码的能不能留自己的QQ号？留我QQ号干嘛？", "desc": "你们留联系方式也可以，但是你留我的联系方式干嘛？这已经是《开源囧事》的第四篇文章了，我真的不希望以后还有更多囧事，真心的。"}, {"id": "6993940120051122189", "title": "『面试的底气』—— 设计模式之JavaScript中的单例模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903569422811150", "title": "记录面试中一些回答不够好的题（Vue 居多） | 掘金技术征文", "desc": "flex 布局 与 grid 布局。 实现 Vue SSR 。 从 SPA 使用最小成本迁移到 SSR 。 根据指定元素，在数组里面找出 ff 数组（ff 数组这个名字是我瞎说的）。比如数组 [2, 3, 6, 7] ，指定元素 7，则 ff 数组是 [2, 2, 3]（2+2…"}, {"id": "6844903839015895047", "title": "前端工程师面试必备（持续更新中）", "desc": "让你的CSS更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。 Sass声明变量必须是『$』开头，后面紧跟变量名和变量值，而且变量名和变量值需要使用冒号：分隔开。 Less 声明变量用『@』开头，其余等同 Sass。 Stylus 中声明变量没有任何限定，结尾的分号…"}, {"id": "6844904132441014279", "title": "阿里巴巴盒马前端上岸总结", "desc": "当时也是没有什么方向，在牛客网上刷题，效果也不是特别好。后来和实验室的一个去了阿里云的学长，做了一次长时间的交流，逐渐摸清了些学习方法。4月份的时候，开始制作自己的个人博客网站，并按照前端的技术栈，结合牛客网上别人的面经，开始系统地梳理知识体系，定时定量地写总结博客。记得把前端…"}, {"id": "6998771859722338340", "title": "『面试的底气』—— 设计模式之职责链模式（三）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903703917363207", "title": "三年前端，面试思考（头条蚂蚁美团offer）", "desc": "985本科，软件工程专业，前端。 工作三年半，第一家创业公司，半年。 第二家前端技术不错的公司，两年半。 第三家，个人创业半年。 可以看出，我是个很喜欢折腾的人，大学期间也做过很多项目，非常愿意参与到产品中去。技术上勉强合格，不过独自负责过很复杂的前端项目，所以一般基础面试题还…"}, {"id": "6844903656865677326", "title": "前端笔试&面试爬坑系列---算法", "desc": "终于来了，算法相关的。 其实个人理解，前端岗位对于算法的要求与其他IT岗位相比，是低得多的。 但是小白我经历了如蚂蚁金服、网易这样的大厂教做人之后，还是觉得，对于一些基本算法、思想的掌握还是必须的。 然后，就把自己遇到的、学到的算法相关的再总结一下，方便自己随时备战面试。 JS…"}, {"id": "7000620443216379940", "title": "阿里蚂蚁集团-前端秋招一面面经", "desc": "阿里蚂蚁集团前端校招一面面经。 主要考察点：项目的具体实现，项目中遇到的难点，框架底层原理的认识。感觉问的比一般面试难，很注重细节和深度"}, {"id": "6992775762491211783", "title": "【算法面试】leetcode最常见的150道前端面试题 --- 中等题2（共80题）", "desc": "兄弟姐妹们，中等题来了，本篇10道，剩下70道，每周更新10道！ 2. 两数相加 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字"}, {"id": "6854899692178948109", "title": "腾讯面试四问，Are you OK?", "desc": "一朋友刚面了腾讯音乐（TME）前端开发岗位（两年经验），本瓜撰文记之。以期同各面试人分享交流~ 注：好的面试流程通常以聊天的方式进行，题目是连续的。此处抽出核心四问，其间附带的小问题一笔带过，不做赘述。 炸看这一题，以为讲的是 html 页面通信。页面通信不太熟了吗，不就 再仔…"}, {"id": "7000792701696229413", "title": "面试官：手写一下new叭。", "desc": "需要注意的点： 1.return一个引用数据类型时，new的新对象是该引用类型对象 2.过程：创建一个空对象，绑定构造函数的原型prototype。再执行构造函数，得到result。 代码 测试 测试"}, {"id": "6979011128974114824", "title": "14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠(第三部分 201-300题)", "desc": "这是我参与更文挑战的第29天，活动详情查看： 更文挑战 14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠(第二部分 201-300题)"}, {"id": "6997063769541230628", "title": "HTTP数据请求的方式:XMLHttpRequest、ajax、fetch与axios", "desc": "知其然知其所以然，关于HTTP数据请求的方式:XMLHttpRequest、ajax、fetch与axios，一文全掌握。"}, {"id": "6985352568838815774", "title": "这一次彻底搞懂JS中的防抖和节流（面试必问）", "desc": "什么是防抖？ 防抖的实现思路 在防抖函数返回的函数的上级作用域设置一个定时器变量t置为null; 通过t来判断是否是第一次执行。 如果不是第一次执行，清空定时器 如果是第一次执行，则通过apply(t"}, {"id": "6991239124329971742", "title": "2021前端面试知识点总结之js篇｜8月更文挑战", "desc": "本文1W+文字叙述前端面试过程中可能会被问到的一些知识点，同时还会涉及到一部分的手写代码题，后续会持续的不断更新完善。欢迎一键三连，欢迎批评指正。"}, {"id": "6917811484898623495", "title": "几个面试常见手写代码", "desc": "call、apply 函数的实现其实都借助了点调用。利用第一个参数做个中转，调用完之后删除。 刚开始接触这俩概念的时候傻傻分不清楚。 浏览器的一些事件，如：resize，scroll，keydown，keyup，keypress，mousemove等。这些事件触发频率太过频繁，…"}, {"id": "6844903909194989575", "title": "大揭秘！“恐怖”的阿里一面，我究竟想问什么", "desc": "其实不得不说，找工作，真的七分实力，三分运气。不同的面试官有不同的看重点，所以千万不要为一次的滑铁卢而丢失信心。 基本面试这是必然的开场，笔者在公司也稍微面试过不少人吧，高峰期基本每晚都要面试一两个，听过了各种各样的开场介绍。这里简单说下笔者作为面试官比较喜欢和不喜欢的介绍吧。…"}, {"id": "6844904183905157127", "title": "面试官：说说你对 options 请求的理解", "desc": "简单来说，就是可以用 options 请求去嗅探某个请求在对应的服务器中都支持哪种请求方法。 其实，这是因为在跨域的情况下，在浏览器发起\"复杂请求\"时主动发起的。跨域共享标准规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求…"}, {"id": "6844903600926228493", "title": "四月前端知识集锦（每月不可错过的文章集锦）", "desc": "PS：星号表示需要翻墙。"}, {"id": "6905635299897032718", "title": "前端面试知识点汇总", "desc": "今天和大家聊聊前端面试的知识点，秋季和春季都属于跳槽季，希望这篇文章可以帮助到你，助你拿到心仪的offer。 通过原型来实现继承时，原型会变成另一个类型的实例，原先的实例属性变成了现在的原型属性，该原型的引用类型属性会被所有的实例共享。(引用类型值被所有实例共享) 方法都在构造…"}, {"id": "6978621084862005285", "title": "面试中的网红虚拟DOM，你知多少呢？深入解读diff算法", "desc": "深入浅出虚拟DOM和diff算法 众所周知，在前端的面试中，面试官非常爱考vdom和diff算法。比如，可能会出现在以下场景🤏 滴滴滴，面试"}, {"id": "6898121476864638989", "title": "106 道面向初中级前端的基础面试题", "desc": "1. 什么是同源策略？ 同源策略可防止 JavaScript 发起跨域请求。源被定义为协议、主机名和端口号的组合。此策略可防止页面上的恶意脚本通过该页面的文档对象模型，访问另一个网页上的敏感数据。 2. 跨域是什么？ 3. JSONP 是什么？ 这是我认为写得比较通俗易懂的一篇…"}, {"id": "6987268877096845320", "title": "项目中实用的前端性能优化", "desc": "一、CDN 1. CDN的概念 CDN（Content Delivery Network，内容分发网络）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片"}, {"id": "6844904176837722120", "title": "2020初级前端面试题-高频考点", "desc": "1. 说一下对HTML语义化的理解?(重点) 语义化就是选择与语义相符合的标签，使代码语义化，这样不仅便于开发者进行阅读，同时也能维护和写出更优雅的代码，还能够让搜索引擎和浏览器等工具更好地解析。 通俗的讲语义化就是让正确的标签做正确的事情，比如段落用p标签，头部用header…"}, {"id": "6985714245107187720", "title": "javascript精进之路手写系列第一弹基础篇（18个）（附详解）", "desc": "一、JavaScript 基础 1. 手写 Object.create 思路：将传入的对象作为原型 2. 手写 instanceof 方法 instanceof 运算符用于判断构造函数的 protot"}, {"id": "6985816725098856479", "title": "进阶知识体系之你不能不知道的CDN", "desc": "与代码交手这些年，你是否光彩依旧，生机盎然                                                                     ？"}, {"id": "6844904113432444942", "title": "为什么说 Vue 的响应式更新精确到组件级别？（原理深度解析）", "desc": "我们都知道 Vue 对于响应式属性的更新，只会精确更新依赖收集的当前组件，而不会递归的去更新子组件，这也是它性能强大的原因之一。 我们在触发 this.msg = 'Hello, Changed~'的时候，会触发组件的更新，视图的重新渲染。 但是 <ChildComponent…"}, {"id": "7004426857508503589", "title": "一文解决前端面试②----JS是灵魂", "desc": "在前端里，JS是灵魂，是一切逻辑的基础，是前端工程师的根本技术，学好JS才能在之后的框架学习和底层学习中不再泛泛而谈，文本详细介绍了JS的部分基础知识。"}, {"id": "6898187200035782670", "title": "我的前端面试心法（已拿字节offer）", "desc": "题主基本情况，南方普通985普通学生，接触前端十个月左右，今年 8 月后开始正式准备秋招。 说起我的秋招，一个词，就是“逆袭”。一开始，华为笔试没过，三七互娱笔试没过被捞起来后一面又挂，信心受挫。中间没有再继续投递，而是沉下心准备，身边同学陆续拿到offer，也挺纠结。在十月底…"}, {"id": "6938816965188435976", "title": "面试复盘（一）：认清现实", "desc": "金三银四，怎么能少了本菜😁😁。正好借此机会好好恶补一下基础，当然，要是能找到一个合适的工作那就更完美啦。接下来会把每天面试的一些题目在掘金复盘，这样能让自己印象更为深刻一些，同时也为正在找工作的小伙伴们，提供一丢丢的帮助。祝大家都能找到money多多的工作💰💰。 本菜经…"}, {"id": "6844903994083508231", "title": "【前方高能】新手到高级前端攻城狮都用的上的前端面试题库，备战明年金三银四", "desc": "现在面试文章已很多，更不觉得新鲜，本文可能有点不同，正因为“多”也就才有了本文的输出。 相信很多前端小伙伴也包括我在内，面试前都要做一些准备，而做做面试题是最平常不过的事儿了，然而每次面试前都要现找面试题，而且答案也不是现成的，其实这样重复的事情在不知不觉中浪费你很多时间。 也…"}, {"id": "6844903566776205319", "title": "面试分享：专科半年经验面试阿里前端P6+总结(附面试真题及答案)", "desc": "年底由于种种原因想换一份工作，但由于太忙，没认真搞简历，也没怎么复习基础，导致很多本来会的都没敢往简历上写。于是写了一个简版的简历挂在Boss直聘上，准备年过完再认真筹备这件事情。 balabala....，好久没面试过，自我介绍居然显得很紧张，说了一些简历上没有的东西，比如之…"}, {"id": "6883748813664698376", "title": "面试之深度与广度，前端几年总结", "desc": "前端整体是一个知识积累过程，我有见过不思进取10年前端还不会vue的，有见过1年前端吊打我等菜鸡等，不是为了面试去准备这个，而是面试当中等这些知识很多都是关键知识点，我们应该去掌握。就这样大家努力学习"}, {"id": "6844904053919465485", "title": "字节跳动一面、二面凉经", "desc": "题忘了，四道算法题120分钟。难度一般。 new Queue().task(1000,()=>console.log(1)).task(2000,()=>console.log(2)).task(3000,()=>console.log(3)).start()实现该函数，sta…"}, {"id": "6986673391029714958", "title": "一文吃透 Js 异步编程", "desc": "callback 异步解决方案（回调函数） Promise 异步解决方案 async await 语法糖 Generator 异步解决方案（遍历对象生成器）"}, {"id": "6844904078271594504", "title": "小菜鸡🐔面试の初体验，自闭路上渐行渐远......🏃‍♂️", "desc": "本人现在大三菜鸡，想在暑期找一份实习锻炼锻炼自己，所以也去投了一下简历试了试面试emmm感觉自己还是太菜了呜呜呜，真的还得加强一下自己才行，特别是算法方面，太吃亏了呜呜呜。大家最近赶快投！！提前批！挂了也不会计入系统！以后再努力努力！！冲鸭！！ 提前总结一下吧，这些面试让我感觉…"}, {"id": "6844904153131515912", "title": "前端进阶高薪必看-正则篇", "desc": "说起正则 大家第一反应肯定是各种表单验证 什么用户名 密码 邮箱... 的确 前端使用正则进行用户输入验证是最常见的场景 但是我相信大多数的前端都忽略了正则这一块的知识点 和我一样 Ctrl+c Ctrl+v 各种正则表达式就到手了 哈哈 直到我看 Vue 源码-模板解析这块正…"}, {"id": "6844903582425186312", "title": "大厂前端面试考什么? | 掘金技术征文", "desc": "最近一个月面试了20来个公司，其中有你们应该都听过的bat，今日头条，京东，网易，大疆，oppo，还有shopee，招商金科，有赞等比较不错的公司，收获了六个offer。最后选择了入职阿里巴巴深圳(感兴趣的朋友可以发送简历到pengfei.huang@alibaba-inc.c…"}, {"id": "6969826286852112415", "title": "🔥「面试题」数组访问、指针与内存寻址原理", "desc": "内存是所有计算设备的基础，同时也是程序存储数据的重要场所，我们每天都要接触，但是内存或者说随机存储（Random Access Memory-RAM）到底是怎么工作的，我们的程序究竟如何使用内存？"}, {"id": "6844903642059767816", "title": "面试图谱：前端基础技术知识讲解", "desc": "金九银十的秋招季近在眼前，想必大家也都心痒难耐，准备挑战更好的工作机会。那么，面试肯定是最大的挑战。 对于面试来说，平时的积累肯定是必须的，但是在面试前的准备也是至关重要的。 在几月前我个人组建了一个小团队，花了将近半年的时间寻找大厂的面试题，筛选出了近百个知识点然后成文，并全…"}, {"id": "6844903904681918471", "title": "学习方法分享：为何一年半就能拿到大厂 offer", "desc": "讲真，的确是运气，才有机会进大厂。也没想到，那篇一年半工作经验试水杭州大厂的面经如此受欢迎。后面也有很多朋友在群里问我，你是如何学习的？ 此篇为xxx 经验进阿里的终结篇，希望从此以后就翻过了，不再提了。不然总有种炫耀的感觉，倍感压力，汗颜汗颜~ 此篇也并非技术软文。大概介绍下…"}, {"id": "6854573222067879943", "title": "前端进阶、面试必会知识", "desc": "技术研发人员被称为“幕后工作者”，工作特点是安静的研发多于交流表达，而面试是一个以表达窥探研发能力的过程，因此，能不能把问题理解透彻、能不能表达清楚、能不能进行举一反三，决定了能不能将能力完美的展现出来，同时也决定了最终的面试结果。本文旨在提升在面对问题时的：分析问题的能力、表…"}, {"id": "6844904064774324238", "title": "年底前端面试-JavaScript总结（超用心）", "desc": "2. JavaScript 中的作用域（scope）是指什么？ 在 JavaScript 中，每个函数都有自己的作用域。作用域基本上是变量以及如何通过名称访问这些变量的规则的集合。只有函数中的代码才能访问函数作用域内的变量。 同一个作用域中的变量名必须是唯一的。一个作用域可以嵌…"}, {"id": "7000783187597066276", "title": "常见面试问题", "desc": "1、垂直水平居中 1、定位方式。 在之前的项目中大多数都是使用这种方式实现垂直水平居中。分为三种方式 （1）有固定宽高 固定偏移位置 top 和 left 50% margin-top 和 margi"}, {"id": "6994673076717748231", "title": "前端经典面试题-从输入URL到渲染页面的过程", "desc": "前言 这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 个人总结，仅供参考，觉得满意，赐个赞！ 抱拳了！ 大致流程，如图所示： 首先，浏览器进程接收到用户输入的URL请求，浏览器进程会将该"}, {"id": "6901104219995635725", "title": "面试官问你<img>是什么元素时你怎么回答", "desc": "强烈推荐在开发中每个图像中都使用 alt 属性。这样即使图像无法显示，用户还是可以看到关于丢失了什么东西的一些信息。而且对于残疾人来说，alt 属性通常是他们了解图像内容的唯一方式 这个问题就要引申出下面部分了，&#x3C;img /> 标签属于替换元素，具有内置的宽高属性，所…"}, {"id": "6989800620437798919", "title": "2021年前端面试知识点大厂必备", "desc": "2021年Web前端面试题目及答案汇总，都说金9银10,现在准备起来后续必定用得到。闲来有空,整理一番,希望对各位有所帮助..."}, {"id": "7001489714750930951", "title": "前端小白不迷路 - 今天来讲下面试高频知识点，事件冒泡，事件捕获以及事件流", "desc": "事件冒泡 //事件冒泡可以将多个事件委托给一个父元素去执行，实现事件委托。 阻止冒泡 事件捕获 事件流，今天搞懂它们"}, {"id": "6994829333424504845", "title": "深入理解 Javascript 执行机制 [ Event Loop 事件循环 ]", "desc": "前言 但凡是做前端的，应该都知道 Javascript 有多么重要，纵观目前的主流技术栈，像什么 Vue, React，Node 都是基于 Javascript 的，那这里必须提到一个点 Javasc"}, {"id": "6844903503807119368", "title": "关于IT培训机构的个人看法", "desc": "缘分与巧合，最近接触比较多的培训机构出来的人，以及看过关于培训机构的文章和问答。虽然没在培训机构上过课，但是接触过很多培训机构出来的人，也看过一些培训机构的课程。关于培训机构，我也有自己的看法。经历了这些，我写了这篇文章，不吹不黑的写下我对培训机构的个人见解。这篇文章可能会有些…"}, {"id": "7002597072427810830", "title": "前端小白不迷路 - 今天来讲下面试高频问点-原型和原型链", "desc": "任何一个对象，都有原型对象，而原型对象本身也是对象，也有自己的原型对象，这样一环扣一环就形成了一个链式结构，我们把这个链式结构称为：原型链。任何对象都有__proto__属性，指向当前的原型对象。"}, {"id": "6952475246007943205", "title": "百度、小红书三面，均遇“赛马”问题", "desc": "一道赛马问题，帮助前端的小伙伴直面金三银四的面试阶段，找到自己心仪的工作，迎娶白富美，走向人生巅峰。"}, {"id": "6866082181455249422", "title": "两年经验字节前端面经(可能是最简单的了)", "desc": "两年之期已到，参见龙王。最近面了下字节，面之前看了好多掘金大佬的优秀文章，面完来反馈一下，虽然我面的内容真的是太简单了，可能是个假的，参考意义不大。 我是18年毕业的，之前在一家出口电商公司。当年刚来的时候就打算两年后出来看看，虽然都说疫情大环境不好，我还是毅然决然的裸辞了。 …"}, {"id": "6937526265201033230", "title": "数组回炉重造+6道前端算法面试高频题解｜刷题打卡", "desc": "在刷题之前让我们先来一起回顾一下 JavaScript 中数组的基础知识。 数组可以根据索引下标随机访问(时间复杂度为 O(1))，这个索引通常来说是数字，用来计算元素之间的存储位置的偏移量。 与其他编程语言不同，JavaScript 中的数组长度可以随时改变，数组中的每个槽位…"}, {"id": "6966406883129163790", "title": "web前端面试之——原型与原型链", "desc": "web前端面试之——原型与原型链 包括对原型与原型链的知识点的理解与记忆，扩展小知识，面试表达方式等内容"}, {"id": "6898851679471566855", "title": "失业两个月拿到offer后，入手MacBook Pro！", "desc": "故事要回到九月份，受到东南亚疫情的影响，所在的业务组被缩减，我被优化了，组内的前端也从去年12份的8个人缩减至2个人。 其中三个人是主动走的（其中两个去了字节跳动，一个去了自如），三个是被优化的（一个过腾讯/字节跳动/虾皮/微众银行，选择待定，一个也拿到了20k+的offer）…"}, {"id": "6847902222634713096", "title": "进大厂连载 9/15：拿下天猫精灵 P7 Offer", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 Hello，大家好，我是寻知。 今天我们来聊聊如何备战大厂面试，一共主要分 4 部分，首先是一个简单的自我介绍，然后是我的面试准备和面试过程以及总结，最后…"}, {"id": "6991006840230248484", "title": "模拟面试（一）", "desc": "准备开一个模拟面试的专栏，就是找网上大厂的面经，然后自己解答作整理，这是第一篇，不过还没完成，现在发出来其实是想变相催更自己。 还有很多没写完，拖了很久...."}, {"id": "6966625151261605918", "title": "前端百题斩【010】——通俗易懂的JavaScript执行上下文", "desc": "JavaScript标准吧一段代码执行所需的所有信息定义为“执行上下文”，其是执行的基础设施。执行上下文包含的内容有很多，下面从类型、包含内容、生命周期、执行过程、结论来进行阐述。"}, {"id": "6844903807286001677", "title": "面试篇 - 京东（商城用户体验设计部 - 前端架构组）", "desc": "很荣幸，之前接到了 京东集团-京东商城-商城用户体验设计部-前端开发部-前端架构组 的面试。 接下来的内容，我会结合问题给出一个正确的答案，其中有一些问题，正好在我之前的专栏当中有涉及到，所以有些问题的回答，我会附上我写的专栏的链接。 希望大家除了在看如何回答面试题的基础上，还…"}, {"id": "6985188556939460638", "title": "你应该掌握的前端性能优化面试点", "desc": "一.浏览器渲染原理 1.浏览器渲染引擎的主要模块以及渲染过程 一个渲染引擎主要包括:HTML解析器，CSS解析器，JS引擎，布局Layout模块，绘图模块等。 HTML解析器：主要用来解析HTML文档"}, {"id": "6844903727548088333", "title": "刷《一年半经验，百度、有赞、阿里面试总结》·手记", "desc": "有给出的或者有些不完善的答案，也尽力给出/完善了（可能有错，大家自行辨别）。有些很困难的题目（例如实现Promise），附带相关链接（懒癌患者福利）。 总的来说，将这些题目分成了“Javascript”、“CSS”、“浏览器/协议”、“算法”和“Web工程化”5个部分进行回答和…"}, {"id": "6844904065353121800", "title": "年底前端面试-es6总结", "desc": "// 控制台报错：Identifier 'a' has already been declared ===> 标识符a已经被声明了。 1、一旦声明必须赋值,不能使用null占位。 7. promise 实现原理? promise的三种状态 (2）一旦状态改变，就不会再变，任何时…"}, {"id": "6854573212362735630", "title": "小姐姐连载 1/10：女生进大厂后如何打怪升级", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 平时有不少萌新前端同学们，来跟我说，“我觉得很迷茫”、“不知道该怎么成长”、“你在做什么呀”……前端早早聊组织的这个关于“职业成长迷茫”的专场真的很棒，国…"}, {"id": "6930403628847104013", "title": "【面试秘技】程序员面试如何提炼项目经验中的亮点？", "desc": "别害怕，因为面试官什么都不知道，面试官是人，不是神，拿到你的简历的时候，是没法核实你的项目细节的。更何况，你做的项目是以月为单位算的，而面试官最多用30分钟来从你的简历上了解你的项目经验。 所以你对项目的熟悉程度要远远超过面试官，所以你一点也不用紧张。如果你的工作经验比面试官还…"}, {"id": "6844903977562161166", "title": "2019初级中级高级web前端面试题超全面细节解析", "desc": "【4】overflow的值不为visible（默认值。内容不会被修剪，会呈现在元素框之外） 1.内部的Box会在垂直方向，一个接一个地放置。 3.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此, 文字环绕效果，设置float 4.BF…"}, {"id": "6995408772201988127", "title": "常见的CSS面试题（二）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战。 H5新特性 新增语义化标签 什么是HTML语义化   根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更"}, {"id": "6991085911307976712", "title": "前端面试题之Vue高频面试题集锦(一)", "desc": "谈谈对Vue中双向绑定的理解？v-show与v-if的共同点？为什么Vue中的v-if和v-for不建议一起用？为什么Vue中的data属性是一个函数而不是一个对象？ 这些问题都在这篇迎刃而解。"}, {"id": "6844903678533451783", "title": "做面试的不倒翁：浅谈 Vue 中 computed 实现原理", "desc": "虽然目前的技术栈已由 Vue 转到了 React，但从之前使用 Vue 开发的多个项目实际经历来看还是非常愉悦的，Vue 文档清晰规范，api 设计简洁高效，对前端开发人员友好，上手快，甚至个人认为在很多场景使用 Vue 比 React 开发效率更高，之前也有断断续续研读过 V…"}, {"id": "6844903590293667847", "title": "面试之JavaScript篇", "desc": "旨在记录面试中遇到的面试题，包含js常见，易错，重要知识点"}, {"id": "6844904071501971469", "title": "挑战一轮大厂后的面试总结 (含六个方向) - nodejs 篇", "desc": "在去年底开始换工作，直到现在算是告了一个段落，断断续续的也面试了不少公司，现在回想起来，那段时间经历了被面试官手撕，被笔试题狂怼，悲伤的时候差点留下没技术的泪水。 这篇文章我打算把我找工作遇到的各种面试题（每次面试完我都会总结）和我自己复习遇到比较有意思的题目，做一份汇总，年后…"}, {"id": "6844903649143947271", "title": "深度解析 Vue 响应式原理", "desc": "无论是对象还是数组，需要实现双向绑定的话最终都会执行这个函数，该函数可以监听到 set 和 get 的事件。 在 Object.defineProperty 中自定义 get 和 set 函数，并在 get 中进行依赖收集，在 set 中派发更新。接下来我们先看如何进行依赖收集…"}, {"id": "6979044567827873828", "title": "原型和原型链", "desc": "```js 定义一个函数 test function test (){ this.age = 10 } prototype 函数的一个属性 我们可以理解为 函数的原型属性 test.prototype"}, {"id": "6978775508011974687", "title": "Vuex 学习笔记", "desc": "通过vuex的一个小demo（todos），分析所需要掌握的知识点； 1、为何使用Vuex 使用Vue开发的过程中，我们经常会遇到一个状态可能会在多个组件之间使用，这样vuex中有一个核心仓库stor"}, {"id": "6987781418671669279", "title": "面试宝典第一期 原生js类", "desc": "1.闭包 首先是为什么有闭包的出现 因为在咱们JavaScript语言中有两种作用域全局作用域和局部作用 域 那么这样就导致了一个问题 函数内部可以读取全局变量 但是函数外部无法读取函数内部的局部变量"}, {"id": "6847902222504706055", "title": "《前端面试总结点线面》之点-性能优化&工程篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 DOMContent…"}, {"id": "6927154812446326797", "title": "前端算法面试必刷题系列[2]", "desc": "4. 整数反转 (Reverse Integer) 给你一个 32 位的有符号整数 x ，返回 x 中每位上的数字反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−2^31, 2^31 − 1] ，就返回 0。 Math.abs(x) 函数返回指定数字 “x“…"}, {"id": "6844904070927384583", "title": "全栈面试汇总周刊 | 第十一期", "desc": "在我的博客 shfshanyue/blog 会对比较难的问题进行讲解。"}, {"id": "6844903815049838606", "title": "面试王者的出装方案推荐——软技能篇（文末含岗位内推）", "desc": "金三银四的求职季已经过半，但求职者的简历依然络绎不绝地涌过来。今年的大形势比较丧，不少大公司需要通过裁员降薪，或着停止招新，来 “过冬”。 所以，哪怕是有招聘需求的岗位，也会相应提高对应聘者的要求。在一些微信群中，也有同学感叹说面试机会变少，工作不好找。 近期面试了很多候选人，…"}, {"id": "6844903599529541645", "title": "面试: 怎么往 Generator 里抛个错？", "desc": "提示: 本文是 github 上《Understanding ECMAScript 6》 的笔记整理，代码示例也来源于此。大家有时间可以直接读这本书。虽是英文，但通俗易懂，非常推荐。 前情: 在上一篇文章 你知道为什么会有 Generator 吗 里，我抛砖引玉，介绍了 gen…"}, {"id": "6978279111894499335", "title": "ubuntu下高效写作", "desc": "在markdown技术文档的写作过程中，不可避免的需要使用图片，下面是使用picgo+阿里云OSS+Flameshot高效使用的最佳实践"}, {"id": "6844903815682998286", "title": "前端面试之JavaScript（一）", "desc": "这三个函数都会改变this的指向，call和apply更适用于在函数运行时改变this；而bind会返回一个新的函数，新函数的this由bind传入的参数决定，所以bind更适用于返回一个新函数，这个函数在将来才会执行，比如DOM添加事件。 在Lambda演算（一套数理逻辑的形…"}, {"id": "6974738458312966175", "title": "网络基础知识整理", "desc": "浏览器中输入 url 后发生了什么，以及由此引申出来的网络问题总结浏览器中输入 url 后发生了什么，以及由此引申出来的网络问题总结浏览器中输入 url 后发生了什么，以及由此引申出来的网络问题总结"}, {"id": "6844903608018812942", "title": "面试常见问题之实现bind函数", "desc": "当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用 new 操作符调用绑定函数时，该参数无效。 arg1, arg2, ... 当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。 1、一个继承自 Foo.prototype 的新对象被创建。 2、…"}, {"id": "6844903569569611783", "title": "一行代码实现一个简单的模板字符串替换", "desc": "通过一个小小的模板字符串的实现，领悟到要把一个功能实现不难，要把做到完美真是难上加难，需要对基础掌握牢固，有一定的沉淀，然后不断地打磨才能比较优雅的实现，通过由一个很小的点往往可以拓展出很多的知识点。"}, {"id": "6844904029382934541", "title": "日问周刊 | 全栈面试汇总 | 第七期", "desc": "我在 github 上新建了一个仓库 日问，每天一道大厂题，敲开大厂之门。有关全栈，devops，微服务以及软技能，促进职业成长，欢迎交流。 LM-Factor 与它俩有关。 简而言之，一个静态资源没有设置 Cache-Control 时会以这两个响应头来设置强制缓存时间，而非…"}, {"id": "6844903940635492360", "title": "JavaScript实现flatten多种方法", "desc": "其实这个题有很多种解法，比如用 Array.prototype.flat,或者自己实现一个 flatten 函数，我们这里主要关注的时 flat 方法的实现。 如果不了解 flat 的函数的话，可以参考mdn Array.prototype.flat()，或者看阮一峰老师的 f…"}, {"id": "6921834073690226701", "title": "手撕 new、call、apply、bind，然后再实现一遍", "desc": "虽然在工作中， call 、 apply 和 、 bind 不算很常用，但是想必大家在面试中还是会经常碰到这类题目的。同时，在阅读一些比较好的开源项目的时候，会发现里面会经常地使用上述 api 去复用原有的方法，达到节约内存和优化代码的效果。接下来，就让我带你简单又详细的手撕(…"}, {"id": "6844903945131786248", "title": "用友 秋招 前端 电话面试", "desc": "据了解，该面试官的部门使用React框架开发，所以问的问题也围绕React展开的比较多，以下是面试官问的问题。 1. 请你说说Vue和React两个框架之间的区别，各自的优缺点 Vue的数据绑定依赖数据劫持Object.defineProperty()中的getter和sett…"}, {"id": "6897785503202934791", "title": "flex布局脑图总结", "desc": "最后还是觉得需要去看阮大神写的，我这个只是学习的时候简单的顺着思路画了一下脑图。"}, {"id": "6844903928308432909", "title": "常见的手写面试题: 方法实现、算法", "desc": "参数: 一个或多个参数；第一个为对象，后面若干为数据。 执行方式: 立刻执行。 实现原理: 在对象上添加一个属性，属性的值为当前对象，这样可以改变当前对象的指向了。 参数: 参数一个或多个参数，第一个为对象，后面为数组的数据。 执行方式: 立刻执行。 实现原理: 在对象上添加一…"}, {"id": "6917544645312380935", "title": "【文件上传那些事儿】- 01 简单的拖拽上传和进度条", "desc": "在日常的开发工作中，文件上传是一个不可避免的需求，通常我们会使用诸如 element、antd 之类组件库自带的上传组件来实现功能。但若止步于此的话，一旦场景开始变得复杂起来，我们很容易就丧失了进一步解决问题的能力。 而本系列文章的主旨就帮助我们理解从最基础的文件上传开始，到拖…"}, {"id": "7005725809822416909", "title": "登录业务几种方式的完整流程", "desc": "本文参与了掘金周边礼物🎁活动哦，在评论区留言就有机会免费得掘金周边礼品，具体规则请看文末，登录功能，几乎是每一个网站或应用都有的功能"}, {"id": "6989020415444123662", "title": "感谢 compose 函数，让我的代码屎山💩逐渐美丽了起来~", "desc": "曾经有一段优美的代码放在我面前，我没有珍惜。直到现在每天面对代码屎山手足无措时，才追悔莫及！尘世间最大的痛苦莫过于此，如果上天给我再来一次的机会，我一定对这段代码说三个字 —— 六，六，六！！！"}, {"id": "6993358764481085453", "title": "(建议收藏)为什么第二次打开页面快？五步吃透前端缓存，让页面飞起", "desc": "如何中使首屏加载更快？怎么让刷新或关闭浏览器之后数据依然不被清空？缓存对于前端来说都是非常重要的领域"}, {"id": "6986436944913924103", "title": "专有钉钉前端面试指南", "desc": "本文主要给大家带来组内一面面试官子弈的面试题，用于给大家进行前端知识扫盲，希望对正在求职的同学以及正在准备秋招的应届生有所帮助。"}, {"id": "6987070062490288165", "title": "手撕钉钉前端考试卷，offer，拿来吧你~", "desc": "前天看到阿里钉钉前端大佬整理了一份169题的前端面试指南，又是一个只给题不给答案的，习惯了😕毕竟别人是面试官，耗时8小时，手撕阿里钉钉团队整理的前端面试指南，非标准答案，且看且珍惜~"}, {"id": "6996815121855021087", "title": "前端面试知识点（二）", "desc": "前言 本文是继前端面试知识点（一）之后的第二篇面试知识点解析。在第一篇面试知识点解析中给出了 174 道面试题中的 19 道面试答案，本文将继续给出部分答案解析。"}, {"id": "7007414850784034829", "title": "【面试】高频面试题", "desc": "目录 函数默认参数与arguments 异步函数按照顺序执行 实现一个react组件，可以通过modal.show()方式调用 数组元素的下标查找与时间复杂度 new WebSocket 发生了什么？"}, {"id": "6984210440276410399", "title": "「自我检验」熬夜总结50个Vue知识点，全都会你就是神！！！", "desc": "前言 大家好，我是林三心，这几天发生了很多事（具体是啥我就不说了），这些事，吓得我把我这些年珍藏的Vue知识点都拿出来整理了一遍，巴不得能多总结出一道是一道，我拿出了我的笔记，并且使劲回忆，终于悟出了"}, {"id": "6999768570570178596", "title": "【建议收藏】25+正则面试题详尽解析，让你轻松通过正则面试，让你少写2000行代码", "desc": "数字千分位分割、手机号3-3-4格式拼接、trim函数实现、HTML转义、获取url query参数...你是不是也经常在面试和工作中遇到呢？让我们一起看看，如何用正则将他们一网打尽吧！！！"}, {"id": "6984571634459869221", "title": "一天面试6家大厂-offer拿来吧你 | 2021 年中总结 ", "desc": "前言 大家好 我是鲨鱼哥~ 说起 2021 的上半年 鲨鱼哥经历的最大的一件事就是离职 没错还是裸辞 每次有朋友问我关于离职的建议的时候 我都拼命劝大家不要裸辞 压力大风险高巴拉巴拉一大堆"}, {"id": "7002151180449103885", "title": "大专生的大厂之路", "desc": "颓废放纵了一段时间终于有勇气来总结这一段经历，下面我将发自肺腑的跟大家分享这段经历！先说结果，结果是没有进入理想的大厂，进了一家算比较满意的中厂。然后我的背景是: base 广州、成人本科、小厂前端渣"}, {"id": "7004785942326149157", "title": "前端经典面经--助你金九银十面试无忧", "desc": "前端万字经典面经附答案--老文新发助你金九银十面试无忧，预祝各位掘友 offer 拿到手软！！！！！"}, {"id": "7002049748295221285", "title": "面试官：三栏布局你会几种？", "desc": "三栏布局的六种实现方法 点滴虽小，重在积累 前端工程师在日常开发的过程中，第一步便是布局了，不论是一个网站，还是一个后台的管理系统，我们大多离不开两栏布局，三栏布局，双飞翼布局，单列布局，一栏布局，等"}, {"id": "7006200103157383175", "title": "面试官让我手写Promise.all", "desc": "原生的Promise.all有什么特点？ 特点1：接收一个可迭代对象 特点2：传入的数据中可以是普通数据，也可以是Promise对象 特点3：可迭代对象的promise是并行执行的 特点4：保持输入数"}, {"id": "6992483283187531789", "title": "你可能不知道的动态组件玩法🍉", "desc": "具体是怎么玩呢？别着急，听我慢慢道来，看完后会感慨Vue组件还能这么玩🐶，还会学会一个Stylelint插件，配有DEMO，以及隐藏在最后的彩蛋。"}, {"id": "7005766163409928200", "title": "30道HTML+CSS面试题（~持续更新中）", "desc": "- 前置面试考点 HTML面试题 如何理解HTML语义化 默认情况下，哪些HTML标签是块级元素、哪些是内联元素？ CSS考察知识点分析： 布局 响应式 定位 CSS3 图文样式 动画 CSS基本面试"}, {"id": "6977919113733603342", "title": "12～18k的前端面试会问个啥？", "desc": "长文警告。实际面试不会问的那么全面的，放心，有小伙伴感兴趣可以投简历哦，在深圳南山区的呢。欢迎欢迎欢迎"}, {"id": "7007390651947941895", "title": "关于js的进制转换，看这一篇就够了。", "desc": "Javascript没有类似于Java、Python那么完善的进制转换api，所能用的仅有两个api。 但用这两个api也足以完成36以内进制的转换了。 Number.prototype.toStri"}, {"id": "6934500357091360781", "title": "字节跳动最爱考的前端面试题：JavaScript 基础", "desc": "最大安全数字：Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1，转换成整数就是 16 位，所以 0.1 === 0.1，是因为通过 toPrecision(16) 去有效位之后，两者是相等的。 在两数相加时，会先转换成二进制，0.1 和…"}, {"id": "7007690805573845028", "title": "秋招保驾护航——操作系统篇", "desc": "秋招保驾护航系列文章正在持续更新，往期文章如下，需者自取： html、css：秋招保驾护航——HTML、CSS篇 js：秋招保驾护航——js面试篇（上）、秋招保驾护航——js面试篇（下） 浏览器：秋招"}, {"id": "6999211249250598926", "title": "【自种树自乘凉】闭包", "desc": "总结一下就是：函数 + 环境（函数内部能访问到的变量），就是一个闭包。闭包常常用来间接访问一个变量，换句话说：隐藏一个变量，只暴露出一个访问器（函数）。"}, {"id": "6999267932341534727", "title": "前端必刷手写题系列 [20]", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 29. class/extends 问题是什么 继承是 OOP (面向对象编程)(Object-oriented programming)"}, {"id": "6844904114506170381", "title": "（详解）从浏览器输入 URL 到页面展示过程发生了什么？", "desc": "对于面试常问的从浏览器输入 URL 到页面展示过程发生了什么？，我想大家都或多或少能说出一二。但是，其实这个问题很有深度，而你是否回答的有深度，在很大程度上会影响到面试官对你的印象。 并且，网上各种资料都是浅尝辄止地讲解这个过程，经常会出现今天看到这个版本，明天看到另一个版本地…"}, {"id": "6844903593976266760", "title": "面试：你知道为什么会有 Generator 吗", "desc": "提示: 本文是 github 上《Understanding ECMAScript 6》 的笔记整理，代码示例也来源于此。大家有时间可以直接读这本书。虽是英文，但通俗易懂，非常推荐。 之前面试时有被问到为什么会有 Generator， 还好没懵逼。想知道的吗，往下翻。 还要判断…"}, {"id": "6931187413356118030", "title": "EventEmitter 的核心功能实现", "desc": "EventEmitter 是频率较高的前端面试题。另外我个人在开发一款 SVG 编辑器，很多模块需要用到观察者模式来实现解耦。但 EventEmitter 是 Nodejs 环境下才能使用的库，所以不能直接用于浏览器环境的开发。所以我考虑自己实现一套逻辑，自己定制的话也容易根据…"}, {"id": "6844903495972159495", "title": "2017前端面试题及答案总结|掘金技术征文", "desc": "\"金三银四，金九银十\"，用来形容求职最好的几个月。但是随着行业的饱和，初中级前端er就业形势不容乐观。 行业状态不可控，我们能做的当然只是让自己变得更加具有竞争力。 今年自己也用了几个月的时间来准备笔记面试，巩固基础知识。特此将自己在这个过程总结的题目分享出来，希望对于求职和准…"}, {"id": "6988005430563700766", "title": "面试：深信服前端实习面经", "desc": "一面 数据类型判断 数组去重 数组中数组和对象去重 es6新特性 let、const 模板字符串 箭头函数 函数参数默认值 Spread / Rest 操作符（...） 二进制和八进制字面量 对象和数"}, {"id": "6876293258168057870", "title": "前端面试自测题【vue、react、css、html、js】", "desc": "1. iframe会阻塞主页面的 Onload 事件； 2. 搜索引擎的检索程序无法解读这种页面，不利于SEO; 3. iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 4. 使用iframe之前需要考虑这两个缺点。如果需要使用ifram…"}, {"id": "6844904185184387079", "title": "图文并茂的前端面试分享（附视频）", "desc": "在技术圈毕竟只有百分之一的人能进入 BAT，百分之九九的小伙伴只能在普通公司做这普通的事情，此文没有 BAT 啥经验，都是基础。帮助小伙伴们快速梳理知识，不会涉及到具体的很细节的知识点，关注面试本身。公司一般会从以下 5 个方面（HTML5+CSS3/JS / 框架 / 项目 …"}, {"id": "6945738115877175304", "title": "每日一篇，面试题 第一篇 \"定时器\"", "desc": "1.前言2.题目3.解析系列文章1.每日一篇，面试题 第一篇 \"定时器\""}, {"id": "6844903850483122184", "title": "4399前端面试总结", "desc": "昨天去面试了4399公司前端岗位，这应该是我第二次面试吧，没有进入二面，有点难受。面试完个人感觉挺良好的，但回去总结发现面试官问的问题我很多都回答错了。。。还是得继续努力，希望能早日拿到心仪的offer。下面总结一下这次面试的题目。 no-cache：不使用本地缓存。需要使用缓…"}, {"id": "6844904182135144455", "title": "迟来的前端面经", "desc": "最近也是在换工作，小公司和大厂（虾皮、腾讯）都有面试。几次面试收获还是比较大的，了解许多自己的短板，当然也拿到了合适的offer。本文主要整理下面试遇到的问题和知识点，希望对准备找工作的掘友有所帮助。 面试的时候，前端基础知识，还是仔细准备，这一块可以问的东西很多，不管哪一面，…"}, {"id": "6900900840786755598", "title": "「前端厚说」CSS头部高频面试题及参考答案", "desc": "过了今年的金三银四 金九银十 ，明年的黄金时机又快要到来，是否已经按捺不住躁动的心。简言之，面试从什么时候开始准备都不算早！这算是笔者正式以前端厚说的角色发稿。先说几点小tip： 我们先看一般的情况下,上下元素都有margin 的情况下，会出现重叠的情况,实际只有 50px，所…"}, {"id": "6930407463124959240", "title": "前端技术考核：你怎么理解 JavaScript 原型、类与面向对象编程 ｜牛气冲天新年征文", "desc": "0. 前言 你好，我是纳撸多。今天我要分享的主题是前端技术考核：JavaScript 原型、类与面向对象编程。在这里祝福大家新年快乐～，牛气冲天！让我们一起精进，成为更好的自己。 如果有人向你请教「原型」这两个字是什么意思，你会怎么解释呢？不同领域的人可能有不同的见解。在文学电…"}, {"id": "6844904138573086728", "title": "四月份前端面试指北", "desc": "由于个人的一些原因最近也参加了几家公司的面试，发现有很多基础性的东西掌握程度还是不够，故此想总结一下最近面试遇到的问题，希望能为在准备面试的的小伙伴尽一些绵薄之力，主要说的是一些我面试当中问到的一些问题，说的不对的地方请小伙伴们即使指正出来，或者有其他的看法也可以一起探讨。 主…"}, {"id": "6897924696373723143", "title": "jsliang 求职系列 - 21 - 浏览器缓存", "desc": "通过从输出 URL 到页面呈现我们可以知道，浏览器如果每次都要请求加载页面，会相当费时间。 而如果我们将某些网页存储到浏览器缓存中，这样当我们打开一个网页的时候，就会去查询浏览器缓存，看是否有请求的文件。 如果有，那就拦截请求，返回缓存文件，并结束请求，而不会去服务器下载。 因…"}, {"id": "6844904178238619662", "title": "第八期 | 多视角谈谈前端面试", "desc": "在谈多视角之前，我们先快速对大厂或者说完整的一场面试流程有个了解。 候选人，我们的主角，即应聘者，下文都称为候选人。 我们先来看看面试官在面试时，想看到候选人哪些能力，再来说说候选人应该做哪些面试准备。 本文还在持续发力，若本文对你有所助益，手留一赞，若有不同看法，评论区我等你…"}, {"id": "6844903809357971463", "title": "除了面试题，你应该知道的面试技巧！", "desc": "春暖花开，又到了程序猿们面试的季节，金三银四面试季，每天都能听到很多身边的小伙伴在讨论面试的内容，也看到许多的面经和面试知识点的整理。 投简历分为两种，内推，其他。为什么会这样区分呢？因为我们投简历之前，是想要知道关于这个职位的更多信息的。 岗位的技术栈，以便于和自己熟悉的技术…"}, {"id": "6894914682147045389", "title": "jsliang 求职系列 - 13 - JSONP", "desc": "基本原理：利用 script 标签的 src 没有跨域限制来完成跨域目的。 前端再 script 标签返回资源的时候就会执行 jsonpCallBack 并通过回调函数的方式拿到数据。 【优点】兼容性好，在一些古老的浏览器中都可以运行。 下面我们通过 3 步骤来了解如何使用 J…"}, {"id": "6844904147590856717", "title": "HTML5、CSS3完全使用手册（万字详解）", "desc": "目前HTML5和CSS3在各大浏览器上的普及率已经比较高，日常开发中也是经常使用，但对于这两者的知识点一直没有做一个比较详细的整理，这里我总结了HTML5和CSS3新增的特性详解和使用问题。 本篇文章预计占用三十分钟阅读，如果你已经熟练于HTML5和CSS3，阅读本文将带你回顾…"}, {"id": "7003337455353118733", "title": "有赞校招笔试+面试（已通过）", "desc": "只记录了印象比较深刻的点。有赞用 react 比较多，面试问框架更倾向于问 react，不过如果你不清楚的话也不会深究"}, {"id": "7004432480082067487", "title": "从源码解读 - Vue常考面试题", "desc": "从源码解读 - Vue常考面试题。* 回答面试题的套路 1､先说这个点的明确定义，或者是特性； 2､再说具体的应用场景； 3､说说自己的看法、观点； 4､可以稍微举一反三，说说同类特性，或者类"}, {"id": "6999419106097102879", "title": "🎁 虚拟列表（等高/非等高）的实现思路 -- 附带源码", "desc": "虚拟列表 俾众周知，DOM数量是影响站点性能的最直接原因之一，如何有效的控制DOM数量，提升页面性能是提高用户粘性，产品转化率的关键手段之一，本篇文章将阐述怎么摧枯拉朽般完成一个虚拟列表的实现 正文 "}, {"id": "6997605316783259685", "title": "前端面试系列三：前端框架", "desc": "前端面试 Virtual DOM 是一种编程概念。在这个概念里， UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步"}, {"id": "6997416261735055374", "title": "『面试的底气』—— 设计模式之发布-订阅模式（三）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7002520994434777119", "title": "cookie和session、localStorage和sessionStorage、IndexedDB、JWT汇总", "desc": "总结了一下身份验证、浏览器缓存相关的知识。cookie和session、localStorage和sessionStorage的知识，以及IndexedDB、JWT。"}, {"id": "6844903625609707534", "title": "面试精选之Promise", "desc": "我们看一些 Promise 的常见面试问法，由浅至深。 3、Promise 解决的痛点还有其他方法可以解决吗？如果有，请列举。 8、能不能手写一个 Promise 的 polyfill。 这些问题，如果你都能 hold 住，那么面试官基本认可你了。带着上面这些问题，我们往下看。…"}, {"id": "6995185869997441038", "title": "『面试的底气』—— 设计模式之代理模式(一)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7002604317144252453", "title": "谈谈JS函数的柯里化", "desc": "柯里化原本是数学中函数的一种形式，后面扩展到计算机科学中，是把接受多个参数的函数转变为接受单一参数的函数，并且会返回一个函数，这些函数的参数接受剩余的参数。"}, {"id": "7002580113770414111", "title": "面试必备之JavaScript性能优化", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 性能优化 性能优化： 性能优化是不可避免的 任何一个提高运行效率，降低运行成本的操作都是性能优化 了解JavaScript语言本身上的优化"}, {"id": "7002992375547052063", "title": "vue的面试总结", "desc": "vue是现在的主流框架，现在好多公司在面试的时候都会问vue，这里我总结了一点，我自己面试的时候的问题，也有好多也忘了"}, {"id": "6998077804201902117", "title": "【前端--面试】常见面试题（四）—— JavaScript", "desc": "做题啦，做题啦~~，每天进步一点，大家在摸鱼的同时可以做几道题目看看自己的基础有没有忘记┗|｀O′|┛ 嗷~~"}, {"id": "6993326716164767752", "title": "『面试的底气』—— 设计模式之接口隔离原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6993113960564129822", "title": "微信小程序面试总结", "desc": "总结一些微信小程序相关的知识，将笔记整理跟大家分享，有些知识会经常在前端面试的时候会问到，所以做个记录，希望对大家有所帮助，如果有什么问题，可以指出，会积极修正。如果大家喜欢，可以点赞"}, {"id": "6993577611951603749", "title": "【自种树自乘凉】前端高频知识点 - 面向面试复习法", "desc": "是时候寄出失传已久的——面向面试复习法！ 目录： > 1. HTML篇 2. CSS篇 3. JS篇 4. DOM篇 5. HTTP篇 6. Vue2篇 7. 安全篇 8. 浏览器兼容篇"}, {"id": "6991817769469607950", "title": "『面试的底气』—— 设计模式之开放封闭原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844904073351675912", "title": "前端面试常考的手写代码不是背出来的！", "desc": "我们在面试的时候，经常会被面试官问到几个手写代码的问题。手写一个数组去重复，手写一个深拷贝，手写一个数组拍平等等。有些小伙伴面试之前准备了，但是在手写的时候还是会忘掉，本文总结了一个如何应对手写代码的大纲，前面是一些基础内容，但是也希望能帮助到你，都会就当复习一遍。 1. 起名…"}, {"id": "6981696220691431431", "title": "读者约稿：两年前端拿下阿字美快滴猿6家offer", "desc": "大家好，我是卡颂。 这天，正躺床上刷LoL视频呢，突然收到消息： 给我骄傲的，当然得晒一晒啦。 结果好多朋友表示：想看面经！ 安排。 和这位优秀的朋友约了稿，感谢他入职字节后还能在百忙之中写下这篇面经"}, {"id": "6844903782229213197", "title": "2019 面试准备 - JS 原型与原型链", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 在本文中，…"}, {"id": "7001009522013634574", "title": "面试官：层叠上下文是什么鸭？", "desc": "其实在页面渲染时，渲染过程划分的细一点，会有一个根据层叠上下文分层渲染的过程。那么什么是层叠上下文呢？ dom元素z轴判断顺序 层叠顺序：同一层叠上下文内：z-index > 0 → z-index:"}, {"id": "6944981104419930143", "title": "常见面试题总结", "desc": "http和https的区别？概念HTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 H"}, {"id": "6844903505400954887", "title": "2018web前端校招面试总结", "desc": "2018web前端校招面试总结"}, {"id": "6914303589330452493", "title": "【每日一题】面试官问：详细说一下JS数据类型", "desc": "hello，大家好，我是「松宝写代码」的作者songEagle，一元复始，万象更新。看到大家已经在写年终总结，我一般每年除夕左右的时候出年终总结，近期会去回顾这一年做了哪些，哪些做的不好，希望大家留言，可以给我提提意见。 2020.12.23 日刚立的 flag，每日一题，题目…"}, {"id": "6844903582177705997", "title": "潜入理解H5&CSS3-面试准备（不断更新中😄···）", "desc": "sticky：粘性定位，先按照relative定位，再按照fixed定位。详见MDN BFC是块级格式化上下文（Block Format Context），我们可以把它看作一个大盒子，一个独立的容器。这个容器就是一个BFC，其内部和外部不会有任何影响，在这个大盒子（BFC）中，…"}, {"id": "6948718631727562788", "title": "一次有质量的面试题", "desc": "事件循环的原因是因为js引擎是单线程执行代码，所以所有执行的代码需要在队列中排队执行 事件循环在整个页面生存期间都会一直检查任务队列中是否有任务需要执行，知道用户关闭页面为止"}, {"id": "6844903667846365191", "title": "金九银十秋招时，掘金邀你来言职", "desc": "离开校园步入职场，面试求职，是每个人都需要迈过的坎。犹记得那些年，改了无数次的简历，满怀期待投出去却又石沉大海的无奈，亦或是，不惧一切满怀信心，顺利拿下offer的畅快。 也许，你面试经验丰富，希望和正在求职路上奋斗的同学分享... 也许，你即将踏出校园，面对秋招求职，希望能得…"}, {"id": "6844903814609240071", "title": "Array.from(arr)与[...arr]到底有什么不同", "desc": "类数组的特点1.有索引2.有长度3.是个对象4.能被迭代(非必须)迭代器(iterator)作用(参考阮一峰老师的ES6)1.为各种数据结构提供一个统一的，简单的访问接口2.使数据结构的成员能按照某种"}, {"id": "6844904120625659918", "title": "[ 面试系列 ] - 六：什么是 BFC？", "desc": "上翻译机：事实上，BFC 的目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素。 ...... 究其原因就是因为元素之间相互的影响，导致了预料之外的情况。 那么结合 BFC 的特性，答案就很明了了：BFC 是为了解决元素之间相互影响的问题的。所以 BFC…"}, {"id": "6965471332116987917", "title": "【温故知新】TypeScript", "desc": "Ts 是什么 TypeScript 是 JavaScript 的一个超集，其静态类型检查可以让开发者在开发阶段就可以发现代码中隐藏的错误，弥补了 JS 的不足。 而且 TypeScript 提供最新的"}, {"id": "6943896377181241352", "title": "第一次字节面试经历", "desc": "面试官一上来问了冒泡排序的时间复杂度,我说了个n方,然后他又具体提了个数字10让我算一下是多少,我口算45,他又问我实际算法是n*(n-1)/2,你为什么说是n方,我说数字特别大的化数据没有影响第二个"}, {"id": "6844903624657600526", "title": "浅解前端必须掌握的算法（二）：简单选择排序", "desc": "虽然前端面试中很少会考到算法类的题目，但是你去大厂面试的时候就知道了，对基本算法的掌握对于从事计算机科学技术的我们来说，还是必不可少的，每天花上 10 分钟，了解一下基本算法概念以及前端的实现方式。 另外，掌握了一些基本的算法实现，对于我们日常开发来说，也是如虎添翼，能让我们的…"}, {"id": "6847902216058372109", "title": "从一脸懵逼到掌握跨域 🍉", "desc": "如果两个页面的协议，端口和域名都相同，那么这两个页面就具有相同的源。 下面的表相对http://www.bb.com 进行同源检测。 这个策略是一个浏览器的安全功能。不同源不能够互相读写对方资源。 为了保护用户的信息安全，隔离潜在的恶意文件。所以有了这个策略。 你想想，如果别人…"}, {"id": "6844903601375035400", "title": "Web前端面试题中的那些套路", "desc": "一个枯燥乏味的概念翻来覆去，只有究其根本，才能万变不离其宗，分享几个Web前端题目。"}, {"id": "6991648471027548191", "title": "面试题目收集", "desc": "一、分析比较opacity:0 visibility:hidden display:none opacity透明度 依然占位置，依然渲染，可以交互，影响性能(排列、渲染) visibility 可见性"}, {"id": "6844904105102540814", "title": "金三银四，最全高级前端面试总结，大厂在跟你招手哟", "desc": "Content边界/内边界: content边界环绕在由该元素的宽和高决定的一个矩形上,这个尺寸通常由该元素渲染后的内容决定,这四个content边界组成的矩形框就是该元素的content box. Padding边界:padding边界环绕在该元素的padding区域的四周,…"}, {"id": "6844903599441444878", "title": "再谈JavaScript作用域——你确定你真的知道？", "desc": "作用域，这个词在编程界经常能听到看到，每一个程序员几乎都有被问到过。在前端圈，面试JavaScript相关知识，这可以算说是一个非常基础的问题了。但早年间我长期陷入了一种“只可意会不可言传”的地步，我不知道是不是有许多小伙伴与我曾经有一样的经历，所以我就抽时间把书本中看到的东西…"}, {"id": "6873482248625225741", "title": "ES6-变量的结构赋值", "desc": "解构：按照一定模式，从数组和对象中提取值，对变量进行赋值。 如果等号的右边不是数组（不可遍历的结构），将会报错。 ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。 数组的元素时按次序排列的，变量的…"}, {"id": "6914556281441386509", "title": "【Daily Interview】- 18 二叉树的最近公共祖先", "desc": "对于这种情况，我们可以看到，p，q 是分别在 root 的左右两棵子树上的，那么这里我们可以通过 left 和 right 来遍历两棵子树：如若没找到 p 或者 q，则舍弃掉这棵子树。这样就可以不断缩小查找的范围，直至最后找到两个节点的最近公共祖先。 这道题相对上面其实更加简单…"}, {"id": "6844903902916116487", "title": "拿起算法的钢笔: 找出两个有序数组的中位数", "desc": "题目：请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。 你可以假设 nums1 和 nums2 不会同时为空。 i 与 j 满足一定的关系 i + j = ( m + n )/2 , 或者 i + j = ( m + n + 1)/2 ,…"}, {"id": "6919003997269393415", "title": "【Daily Interview】- 25 三角形最小路径和", "desc": "看到这个问题的第一反应可能会有以下想法：只要每一步，都加最小值，就能得到最优解。 上述思路即贪心算法的核心思路：局部最优。 此时再用贪心算法的思路得到的解就不再是全局最优解了，这也证明了一点：每一次的局部最优走到最后并不一定是全局最优。 依次类推，可以得到最后的结果是 11。"}, {"id": "7005770014041047076", "title": "前端面试不会直接挂掉的题目--冒泡排序", "desc": "什么是冒泡排序？ 冒泡排序的思想 排序的轮数是数组的长度-1. 每一轮排序都将最大的值放在最末尾。 下一轮排序需要比较的次数都要比上一轮少一次。 实现冒泡排序 时间复杂度和空间复杂度分析 空间复杂度 "}, {"id": "6986645219290644517", "title": "12～18k的前端面试会问个啥？（答案版上）", "desc": "基本功考察 一、关于html html语义化标签的理解seo优化 语义化简单的说就是用正确的含义的标签做正确的事eg：头部：header 导航：nav等，语义化的优点是易于修改和维护，支持无障碍阅读，"}, {"id": "6844903874705227789", "title": "这儿有20道大厂面试题等你查收", "desc": "今年来，各大公司都缩减了HC，甚至是采取了“裁员”措施，在这样的大环境之下，想要获得一份更好的工作，必然需要付出更多的努力。 本文挑选了20道大厂面试题，建议在阅读时，先思考一番，不要直接看解析。尽管，本文所有的答案，都是我在翻阅各种资料，思考并验证之后，才给出的。但因水平有限…"}, {"id": "6941194115392634888", "title": "「2021」高频前端面试题汇总之JavaScript篇（下）", "desc": "2021 高频前端面试题汇总之JavaScript篇，前端面试题汇总系列文章的JavaScript篇，长期更新，欢迎收藏、点赞！"}, {"id": "7005587385752748069", "title": "【面试题库】记录（二）", "desc": "一、com 1 xiang wang 1. Vue响应式原理 Vue官网- 深入响应式原理 1） 检测变化的注意事项 1.1) 对于对象 对于已经创建的实例，Vue 不允许动态添加根级别的响应式 pr"}, {"id": "7004600524813107237", "title": "「每日一题」二分查找", "desc": "1. 题目描述 给定一个n个元素有序的（升序）整型数组nums和一个目标值target ，写一个函数搜索nums中的target，如果目标值存在返回下标，否则返回-1。 示例1： 示例2： 2. 解答"}, {"id": "6981978319143043108", "title": "你不得不知的大厂问题复盘方法论", "desc": "为什么要学习复盘方法论？ 没有复盘方法论的领导简直就是公司的灾难！ 不重视复盘可能导致只分析了表因而没挖掘根因，下次爆发出更严重的问题。四线复盘方法论通过时间线、问题链、责任链、改进线教你如何完美复盘"}, {"id": "6952491054100807694", "title": "前端面试复盘专题（一）：复习大纲及蜕变计划", "desc": "自己几个月前端面试的复盘系列，构建学习计划，梳理自己的知识树，借助别人的经验，能够让自己省去很多踩坑的挫折"}, {"id": "7005120979118620702", "title": "面试准备｜地址栏输入zmheang.cn，敲下回车后发生了什么", "desc": "这真的是一道很经典的面试题，经典到它基本包含了前端的所有知识点。能比较全面的考察应聘者知识的掌握程度，还可以考察面试者的对前端的一个整体思考 用户输入：地址栏会判断输入的关键字是搜索内容还是请求的UR"}, {"id": "6844904097556987917", "title": "阿里前端攻城狮们写了一份前端面试题答案，请查收", "desc": "如果是 HTTP 1.0 版本协议，一般情况下，不支持长连接，因此在每次请求发送完毕之后，TCP 连接即会断开，因此一个 TCP 发送一个 HTTP 请求，但是有一种情况可以将一条 TCP 连接保持在活跃状态，那就是通过 Connection 和 Keep-Alive 首部，在…"}, {"id": "6931994824845295630", "title": "删除项目中无用代码的两种方式（实用）", "desc": "帮帝王蟹 review 代码，发现了他要重构的项目中，存在很多无用的 console.log(xxx) 的代码。 帝王蟹准备全局搜索 console.log ，然后挨个删除，但是代码中实在是太多了。 如果挨个去删，这种感觉就好像：遇见喜欢的人跟好朋友手牵手，心里明明想xx，却迟…"}, {"id": "6974293864345518087", "title": "「Vue源码学习(五)」面试官喜欢问的——Vue常用方法源码解析", "desc": "前言 冲啊，学起来啊！！！欢迎阅读此系列文章： 「Vue源码学习(一)」你不知道的-数据响应式原理 「Vue源码学习(二)」你不知道的-模板编译原理 「Vue源码学习(三)」你不知道的-初次渲染原理 "}, {"id": "6896810576778166280", "title": "上海莉莉丝、米哈游、B站、小红书、得物等互联网公司前端面试总结", "desc": "给大家准备了高清的思维导图和食用更加方便的PDF文档。全部聚合思维导图一张，分类思维导图17张，涉及前端开发的方方面面面，JS基础，工程化，性能优化，安全，框架等。如果您是准备面试，或者享扩展前端知识，建议收藏学习哦。17张思维导图，2021年作为一名前端开发者需要掌握这些，前…"}, {"id": "6939352081446731790", "title": "金③银④ 分享一道曾让我栽在二面的面试题", "desc": "一转眼又到了跳槽季，是时候跟大家分享一波面试题了，通常来说大家在跳槽之前都会刷题，甚至说从不刷题的多年开发经验的大神在面试中可能干不过刷过各种题的面试者，导致了一顿内卷，这也侧面印证了看面试题的重要性。 相信大部分人也和我一样，每次看这种文章的时候，不是看着看着就没耐心往下继续…"}, {"id": "6954905395655606286", "title": "🔥「深入本质」一篇文章彻底理解递归", "desc": "\"递归\"是所有语言都有的一种常用操作，但是你真的用好递归了吗？对递归没有任何疑问了吗？觉得递归总是找不到感觉不知道该怎么写吗？这篇文章正是为此而生的 本文将包含以下内容 什么是递归 如何选择停止条件 "}, {"id": "6844903966526930951", "title": "JavaScript 工具函数大全（新）", "desc": "原本只想筛选下上面的那篇文章，在精简掉了部分多余且无用的工具函数后，感觉不够。于是顺藤摸瓜，找到了原地址： 30 seconds of code 然后将所有代码段都看了遍，筛选了以下一百多段代码片段，并加入了部分自己的理解。 另外，本文工具函数的命名非常值得借鉴。 1. 第一部…"}, {"id": "7006139308780290078", "title": "2021年9月份面试-css 基础", "desc": "最近出去浪了一圈，有一些公司会问到 css 基础知识，如果在这上面挂了，很不值，我总结了一下，后续会继续补充，希望对大家有所帮助。"}, {"id": "6922623997980966926", "title": "前端，社招，面淘宝，指南", "desc": "面试这种东西并不是投个简历，等着被面就好了，是要做很多准备的，这个准备不只是题目和项目上的准备，心理和意识上的准备同样重要。 为了让内容更加丰富，我还参考了内网多篇面试官的思考总结，整理成这篇文章。 用面试官的思考总结也可以让大家知道面试官是怎么考察大家的，从而反向要求自己。 …"}, {"id": "6991268262059343903", "title": "程序员优秀之路：一起来看下这 97 位”砖家“能给出啥编程的好建议？（1）", "desc": "本篇是系列第 1 篇，带你认识一些优秀的编程概念！有很多新鲜儿词~认知优秀、逐渐优秀、习惯优秀......"}, {"id": "6990518974131732488", "title": "坐下来谈谈如何写好一份简历？", "desc": "公司喜欢招聘什么样的员工？好的简历如同烧一道好菜，讲究“色香味”俱全。好的简历应该包含哪些内容？项目经验到底该怎么写？"}, {"id": "6927217000112455687", "title": "『面试的底气』—— 0.1+0.2等于0.3吗｜牛气冲天新年征文", "desc": "去互联网金融或电商行业的公司面试时，一般都会遇到类似“$0.1+0.2$等于$0.3$吗？”这道题，对于非科班出身的前端人是一道送命题，有些知道$0.1+0.2$不等于$0.3$，但是继续深问为什么，就无法很清晰地回答。 本专栏总结一下回答 $0.1+0.2$不等于$0.3$ …"}, {"id": "6995852466751455239", "title": "事关我对于前端面试题的收集--第二弹", "desc": "写在前面: 前段时间是在找工作,一直在寻找些线上面试,电话面试,然后碰到了很多有意思的面试题,有些知道解法,有些还不知道答案,记录一下."}, {"id": "6996266362590986270", "title": "面试题-Vue篇", "desc": "1. Vue的生命周期（必背） 2. Vue的通信方式有几种？隔代组件通信方式用哪种方式解决？（必背） 3. Vue常见指令有哪些？（背一些） 4. V-if和V-show的区别？（必背） 5. 谈谈"}, {"id": "6993248721777475614", "title": "【自种树自乘凉】JS 实现两个大数相加？", "desc": "理论： 当有两个整数 a 和 b ，在通常情况下我们有 “+” 运算符对其进行相加运算： 但是 JS 在存放整数的时候是有一个安全范围的，一旦数字超过这个范围便会损失精度。"}, {"id": "6844903583859621901", "title": "3月前端知识集锦", "desc": "JS相关深入理解javascript原型和闭包EventLoop必知必会（六道题）网络现状：性能提升指南【网络协议】Web协议未来优化指南不要混淆nodejs和浏览器中的eventloopJavaSc"}, {"id": "6844904163831185422", "title": "3年渣渣前端的面试分享", "desc": "首先自爆下背景：2017年本科毕业，毕业3年期间一直稳定在同一家公司，只在18年的时候面过一次拼多多（收了口头offer没接）。所以其实这次出来面试，并没有什么面试经验，整个4月的面试安排也比较乱，后面会谈谈目前总结下来比较合理的面试节奏安排。 4月份之前，已经有一个还比较满意…"}, {"id": "6934880418172977165", "title": "六道经典前端面试题详解", "desc": "盒模型可通过box-sizing进行设置（ box-sizing的默认属性是content-box）。根据计算宽高的区域可分为： 盒模型的组成，由里向外content(内容),padding(内边距),border(边框),margin(外边距)。 因为设置了为border-b…"}, {"id": "6844903788910739463", "title": "2019 面试实战 - 第一回合", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 并不是只有…"}, {"id": "6896637675492065287", "title": " 『面试的底气』—— 实现一个深拷贝", "desc": "深拷贝这个功能在开发中经常使用到，特别在对引用类型的数据进行操作时，一般会先深拷贝一份赋值给一个变量，然后在对其操作，防止影响到其它使用该数据的地方。 如何实现一个深拷贝，在面试中出现频率一直居高不下。因为在实现一个深拷贝过程中，可以看出应聘者很多方面的能力。 本专栏将从青铜到…"}, {"id": "6981792539078557710", "title": "新手入门第二课：2个文章美化的小技巧", "desc": "第二节课主要介绍2个文章美化的小技巧，分别是使用Markdown主题和制作合格的封面图，快来一起来学习吧！"}, {"id": "6981995678327111717", "title": "JS-什么时候用Map？", "desc": "Map是什么？ 在我看来，Map类似一个高配版的Object。 Map: Object: Map的特点？ Map默认情况下不包含任何键，所有键都是开发人员添加进去的。不像Object原型链上有一些默认"}, {"id": "6844903639333470221", "title": "记一次凉凉的小米面试", "desc": "初入北京，人生地不熟的，找工作这种大事就直接到我脑袋上了。有幸小米的hr给我发了面试通知让我去快（bei）乐（shang）的面试。 4:请实现一个两边宽度固定中间自适应的三列布局。 从prototype、隐式的_proto_、constructor再到修改原型链的内容会导致的影…"}, {"id": "6876623829574090760", "title": "2020秋招前端面经知识点汇总(一)", "desc": "好久没有更新帖子了，最近一直在复习准备秋招，最近终于拿到了第一份意向书，终于有时间来整理一下自己最近的复习内容，以下知识点都是楼主在面试中被问到的问题，我做了几大块的分类，各位需要的小伙伴可以收藏一下。因为还在继续面试，所以还会不定时更新，因为掘金这边文章有字数限制，所以这边放…"}, {"id": "6996255477122367501", "title": "面试题-JavaScript篇", "desc": "1. 数组（对象、字符串）的方法（必须背） 2. 数组的去重（适当背几个，会问） 3. Localstorage、session和Cookie的区别？（需要背诵，倒是没问到）   4. 重排和重绘（要"}, {"id": "6844903638440099853", "title": "地表最强面试图谱", "desc": "金九银十的秋招季近在眼前，想必大家也都心痒难耐，准备挑战更好的工作机会。那么，面试肯定是最大的挑战。 对于面试来说，平时的积累肯定是必须的，但是在面试前的准备也是至关重要的。 在几月前我个人组建了一个小团队，花了将近半年的时间寻找大厂的面试题，筛选出了近百个知识点然后成文，并全…"}, {"id": "6844904087243194375", "title": "2019年度最常见的JavaScript面试题和答案", "desc": "2019年度已经过去了，2020年面试高峰期又来了。经过2019年的学习和面试经历，统计了下面一些最常见的面试题。 在 JavaScript 中，两种不同的内置类型间的转换被称为强制转型。强制转型在 JavaScript 中有两种形式：显式和隐式。 在 JavaScript 中…"}, {"id": "6975120676982095886", "title": "React 面试必知必会 Day12", "desc": "大家好，我是洛竹🎋，一只住在杭城的木系前端🧚🏻‍♀️，如果你喜欢我的文章📚，可以通过点赞帮我聚集灵力⭐️。"}, {"id": "7005480708718198798", "title": "前端实习面试准备--React Hooks", "desc": "对 React Hook 的理解，它的实现原理是什么 React-Hooks 是 React 团队在 React 组件开发实践中，逐渐认知到的一个改进点，这背后其实涉及对类组件和函数组件两种组件形式的"}, {"id": "6923891351842979853", "title": "聊聊 JSX 和虚拟 DOM", "desc": "这篇文章我构思了很久，想用比较白话的形式阐述关于 JSX 和 VDOM 的知识点。翻阅了不少相关内容，多数文章都是以源码为基础，讲的内容不能说不好，但是至少我觉得对于刚入门的前端同学，内容篇硬。本篇文章以 React 作为切入点，分析理解 JSX 和虚拟 DOM ，当然 Vue…"}, {"id": "6988446977541275661", "title": "React的diffing算法(面试题)", "desc": "React的diffing算法 经典面试题： react/vue 中的key有什么作用? ( key的内部原理是什么? ) 为什么遍历列表时，key最好不要用index?"}, {"id": "6844903649143947271", "title": "深度解析 Vue 响应式原理", "desc": "无论是对象还是数组，需要实现双向绑定的话最终都会执行这个函数，该函数可以监听到 set 和 get 的事件。 在 Object.defineProperty 中自定义 get 和 set 函数，并在 get 中进行依赖收集，在 set 中派发更新。接下来我们先看如何进行依赖收集…"}, {"id": "6844904143966978056", "title": "面试官：你可以用纯 CSS 判断鼠标进入的方向吗？", "desc": "在之前某一个前端技术群里，有一个群友说他面试的时候遇到了一个问题，就是面试官让他用纯 CSS 来实现一个根据鼠标移动位置觉得物体移动方向的 DEMO。 ~~净会问这种不实用又跟业务没啥关系的问题，气抖冷，中国前端什么时候才能真正的站起来。~~ 谢谢面试官提出的好问题，我会努力实…"}, {"id": "6844904150988226574", "title": "前端进阶高薪必看-Webpack篇", "desc": "webpack 是自动化打包解决方案，也可以理解为是一个模块打包机。它帮助我们分析项目结构，找到 JavaScript 模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript 等），并将其打包为合适的格式以供浏览器使用。 Entry：入口，Webpack…"}, {"id": "6844903812902158343", "title": "头条前端实习岗凉经有感", "desc": "头条面试官真是亲和呀，一上来就跟你嘘寒问暖，瞬间让人心里放松了很多。一开始就是基本情况了解，什么时候开始接触前端的呀？大学都学过什么课程呀？ 最让人诧异的，面试官居然丝毫不想问项目经历相关的问题(暗自庆幸，之前面试的大佬项目也是一带而过)！ 谈谈JS中的类吧。 着重说了传统语言…"}, {"id": "6933454368012238861", "title": "Vue面试题、超级干货、春招必备、带你牛转乾坤（附答案）", "desc": "基础篇那首先谈谈你对Vue的理解吧？❗答案官网介绍：渐进式JavaScript框架、核心库加插件、动态创建用户界面（异步获取后台数据，数据展示在页面）特点：MVVM模式；代码简介体积小，运行效率高，适"}, {"id": "7003329725011591204", "title": "前端实习面试准备--对象创建与继承", "desc": "1.创建对象的方式有哪些 js和一般的面向对象的语言不用，ES6之前没有类的概念，但是可以使用函数来进行模拟，从而产生可复用的对象创建方式 1.1 工厂模式 用函数来封装创建对象的细节，通过调用函数来"}, {"id": "6945026069518876703", "title": "前端实习生面试总结", "desc": "大大小小的公司加起来大概有十面，总结一下常问到的题和准备时用到的资源，就继续滚去学习了JS闭包（必考）一定要深入理解，各种使用到的场景，比如模块化this的指向apply，call，bind箭头函数和"}, {"id": "6844903582672781320", "title": "JavaScript：面试频繁出现的几个易错点", "desc": "这段时间，金三银四，很多人面试，很多人分享面试题。在前段时间，我也临时担任面试官，为了大概了解面试者的水平，我也写了一份题目，面试了几个前端开发者。在这段时间里面，我在学，在写设计模式的一些知识，想不到的设计模式的这些知识，就是面试题里面，频繁让人掉坑的考点。所以，今天就总结一…"}, {"id": "6844903800956780558", "title": "【译】面试 30 秒", "desc": "面试是令人生畏的，它甚至可以让经验丰富的专家在压力之下大脑一片空白。复习和学习哪些在面试中常遇到的问题（从社区中收集了被问到的和他们是如何应对的问题）。通过把实践和现实生活结合起来，你就可以从容的准备面对下一次面试 MIT. Copyright (c) Stefan Feješ."}, {"id": "6850037266614747144", "title": "建议收藏：一篇总结搞定秋招！（持续更新……）", "desc": "最近不少同学开始秋招了，一些大厂带动了提前批的风气，秋招开始出奇的早。 于是我和我的小伙伴们一起为大家整理了一些面试可能涉及到的基础知识点，希望能帮助大家在秋招斩获 offer。「文中可能存在错误的地方，如果存在错误，还请大家及时指出」。 template section na…"}, {"id": "7004781938917507079", "title": "前端实习面试准备--React组件基础", "desc": "React事件机制 JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 document 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统"}, {"id": "6937938677087600647", "title": "前端|每天5道面试题（10）补充面试题", "desc": "第十期了，大部分的高频面试题都收录的差不多了，今天补充几个遗漏的题目，这个系列也该和大家说再见了~~1、重排、重绘重排（Reflow）是什么？定义：DOM中各个元素都有自己的盒子模型，需要浏览器根据样"}, {"id": "6950529336743362596", "title": "前端面试：EventLoop三剑客", "desc": "引言它是前端面试中的常客，用于考察对js程序运行机制的理解，其同时也是理解异步问题的重要基础。相关文章数不胜数。本文仅为一篇学习记录。1.剑客一：程序任务在各种程序语言，任务的含义差别不大。JS是单线"}, {"id": "6844903870712283149", "title": "经常被面试官问道的JavaScript数据类型知识你真的懂吗？", "desc": "之前面试了几个开发者，他们确实做过不少项目，能力也是不错的，但是发现js基础不扎实, 于是决定写一下这篇javascrip数据类型相关的基础文章，其实也不仅仅是因为面试了他们，之前自己在面试的时候，也曾经被虐过，面试官说过的最深刻的一句话我到现在都记得。 作者简介：koala，…"}, {"id": "6844903894305210376", "title": "面试官教你写简历之「实习/应届生简历指南」", "desc": "很多面试开发岗位的实习/应届生一般没有写过简历，也没有项目经历，不知道该怎么下手。在需要用到简历时，可能会从网上直接下个模版，然后填填改改1小时不到就搞定了。每当投出去，就“石沉大海”，没有下文！ 多年来笔者浏览过数不清的实习生简历，我将以面试官的角度来为你讲讲面试官想要的是什…"}, {"id": "6990582060213600264", "title": "前端实习必看！如何用git扒取指定分支代码？😎", "desc": "前言 7月正好是秋招提前批的黄金时间，相信有不少同学已经顺利进入心仪的公司开始了实习之旅，实习的第一天，首要的任务就是熟悉公司的项目，互联网公司一般采用gitlab作为代码托管平台，而我们以往进行代码"}, {"id": "6952682234532855844", "title": "复盘一下，如何让他毕业2年后，收获阿里offer，(总结)未来继续努力", "desc": "1.前言这篇文章，算是我一朋友年后这一个多月以来的面试总结和思考。有的朋友看了标题可能会喷：这不有手就行？我一毕业就进来了。对他而言实属不易，只是想记录总结下，顺便鼓舞下跟他类似的小伙伴。2.教育工作"}, {"id": "6981350198953918477", "title": "你真的了解前端模块化吗？", "desc": "模块化的思想是把逻辑分块、各自封装，相互独立，同时自行决定引入执行那些外部模块以及暴露自身的那些模块。基于此我们可以将前端模块划分为六大类。"}, {"id": "6996921242762608654", "title": "8月更文挑战 | 前端HTML面试题汇总", "desc": "最近整理的2021年秋招常见前端HTML面试题，总结即是一遍认真的复习，为今年秋招做好充足的准备，共勉。"}, {"id": "6844903555879403533", "title": "转眼人到中年：前端老程序员无法忘怀的一次百度电话面试", "desc": "2010年9月22日，中秋，记得那天下着零星的小雨。大部分同学都已回了家，深秋的校园显得格外空旷寂寥。平时车来人往的校道，也只剩三三两两的行人低着头走着。 匆匆忙忙吃完早餐，一个人背着书包来到了教学楼，找了僻静的角落坐下。看看手机，8:45左右，离电话面试还有大概15分钟。心里…"}, {"id": "6844904100459446279", "title": "08.二面 2：如何介绍项目及应对项目细节追问", "desc": "一个标准的面试流程中，肯定会在一面二面中问到你具体做过的项目，然后追问项目的细节。这类问题往往会通过下面形式来提问： 这类跟项目相关的综合性问题，既能体现候选人的技术水平、业务水平和架构能力，也能够辨别候选人是不是真的做过项目，还能够发现候选人的一些软技能。 下面分享下，遇见这…"}, {"id": "6923810305323565069", "title": "前端代码核心实现系列-Promise核心实现", "desc": "该系列的主要目的是帮助很多写代码一知半解的同学，认为自己懂了，当真正遇到深入点的问题的时候，还是要靠搜索来解决问题。这个系列的主要目的就是告别搜索，让自己写出的代码能够做到信心满满。不论问题怎么变化我们都能360度无死角解答。 该系列的计划可以在github/core-rewr…"}, {"id": "6992987851117821988", "title": "记录开户第一篇blog——2021.8.6", "desc": "来自一个blog新人的第一篇前端实习面经--深信服科技前端开发一面，顺便记录了最近生活的经历和感受。欢迎交流！"}, {"id": "6985848155816329246", "title": " HTML回顾总结", "desc": "# HTML知识回顾 由于HTML的知识点相对较少，用一篇文章简单总结一下 ### HTML语义化 按我的理解来说，就是给原来的div起名字，这是HTML5新推出的几种标签。"}, {"id": "6993005907135168526", "title": "js-handbook：[1] 数据类型和变量", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 JavaScript 规定了几种数据类型？ 8 种（7 种原始数据类型 + 1 中引用数据类型） 原始类型值（存储在栈内存中） 描述 nul"}, {"id": "6921220036917608462", "title": "面向对象练习（函数的多种角色）", "desc": "1、在内置类的原原型上扩展方法（1）调用起来方便，可以直接基于实例去调用方法，方法中的this就是实例「也就是我们要操作的值」（2）可以实现链式调用（3）自己扩展的方法最好设置前缀“myXxx”，防止"}, {"id": "6969967494178013191", "title": "冒泡排序和选择排序", "desc": "冒泡排序 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。较大的数慢慢往后排，较小的数慢慢往前排，这个过程就像气泡慢慢浮出水面，所以叫冒泡排序。"}, {"id": "6844903633796988936", "title": "浅解前端必须掌握的算法（五）：堆排序（下）", "desc": "虽然前端面试中很少会考到算法类的题目，但是你去比如像腾讯一样的大厂面试的时候就知道了，对基本算法的掌握对于从事计算机科学技术的我们来说，还是必不可少的，每天花上 10 分钟，轻松了解基本算法概念以及前端的实现方式。 另外，掌握了一些基本的算法实现，对于我们日常开发来说，也是如虎…"}, {"id": "6844904012995624967", "title": "彻底弄懂:0.1+0.2  != 0.3", "desc": "首先我们需要了解一下，计算机存储数字都是以多位二进制的方式进行存储的。而js没有分浮点数和整数，全部统一为number类型，都利用IEEE754标准的64位双精度浮点数存储。 这里看起来可能不太好理解，直接来举个例子吧。 然后这里会涉及到一个二进制的科学计数法。 首先我们来看一…"}, {"id": "6917523592775204871", "title": "【每日一题】面试官问：谈谈你对JS对象的创建和引申", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 与工厂模式相比，可以清晰的知道对象的类型。 构造函数模式，创建对象有一个缺点，那就是每个方法都需要在每个新对象上创建一次。 原型上…"}, {"id": "6897030993832574983", "title": "js 原型 原型链 ", "desc": "解释： 原型是首创的模型，代表同一类型的人物、物件、或观念(维基百科)。那边对应到javascript 中来, 我们可以理解为：原型是对象创建之初的的模型，拥有同一类对象的公有属性和行为(方法)。 在js中每个函数都有一个指向原型的属性——prototype，称为原型对象。原型…"}, {"id": "6908880309748498446", "title": "万字长文总结计算机网络核心知识点（建议收藏）", "desc": "微信搜索公众号路人zhang，回复面试手册，领取本文档PDF版及更多面试资料。 网络协议是计算机在通信过程中要遵循的一些约定好的规则。 易于实现和维护，因为各层之间是独立的，层与层之间不会收到影响。 应用层的任务是通过应用进程之间的交互来完成特定的网络作用，常见的应用层协议有域…"}, {"id": "6844904165974474766", "title": "面试系列——手写代码实现（一）", "desc": "本文是面试系列篇的实现篇。笔者整理了面试过程中可能会遇到的手写实现，以及它的原理。这可以帮助面试者在笔试环节获得良好的加分。"}, {"id": "6951019128664621064", "title": "前端算法面试必刷题系列[38]", "desc": "- 67. 格雷编码 (gray-code) - 68. 解码方法 (partition-list)"}, {"id": "6844903783420395527", "title": "金三银四，如何征服面试官，拿到Offer", "desc": "又到了茶余饭后的时间，想想写点什么，掐指一算，噢呦，快到3月份了，职场的金三银四跳槽季又来了，不同的是今年比往年「冷」一些，形式更加严峻一些，大家多多少少可能都听到或看到一些信息，就是好多公司在优化裁员，代表的就是滴滴、京东这种大型互联网公司，已经官宣了。 即使这种情况下，我相…"}, {"id": "6920617204824145927", "title": "【每日一题】面试官问：JS中如何全面进行客户端检测？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 客户端检测是一种补救措施，也是一种行之有效的开发策略。主要用来规避或者突破不同浏览器之间的差异。 又称特性检测。不是检测浏览器的类…"}, {"id": "6901621538303410190", "title": "面试时我是如何回答“前端性能优化”的", "desc": "1. 使用webpack插件压缩（html、js、css）资源 2. 如何进行资源拆分？ 3. 图片/图标资源的处理 4. 服务端渲染"}, {"id": "6844904176502177800", "title": "前端实习凉凉面 海康威视&酷家乐&京东数科", "desc": "海康威视一面(电话面试6/10)介绍项目技术栈typeof的作用typeofnull数组的方法js基本数据类型Vue中$router和$route的区别BFC的出现情况以及作用v-if、v-show的"}, {"id": "6969591192832966686", "title": "循序渐进的实现一个较为完整的深拷贝", "desc": "循序渐进的实现一个较完整的深拷贝方法实现,包含循环引用，函数，正则，日期，Symbol，拷贝特性一致等边界情况的考虑"}, {"id": "6905649415907475470", "title": "前端开发面试题", "desc": "本文章仅仅用作记录面试过程中被问及却没有回答上来，或者回答的不清晰的面试题。html部分html语义化是什么？为什么要语义化？答案：1.语义化就是根据内容的结构化，选择合适的标签，便于开发者阅读和写出"}, {"id": "7002801582576238628", "title": "2021-09-01 前端每日一题——任务队列、事件循环、宏任务、微任务", "desc": "调用栈（Call Stack）/执行栈（Execution Context Stack）: 后进先出（LIFO），调用栈上存放执行期间所有的执行上下文 调用一个函数，就将函数的上下文压入栈，执行值之后"}, {"id": "6844904115886096392", "title": "请你说说 Vue 中 slot 和 slot-scope 的原理（2.6.11 深度解析）", "desc": "Vue 中的 slot 和 slot-scope 一直是一个进阶的概念，对于我们的日常的组件开发中不常接触，但是却非常强大和灵活。 这使得这种模式的开发体验变的更为统一，本篇文章就基于 2.6.11 的最新代码来解析它的原理。 可以看到，我们只要把一个用来处理请求的异步 pro…"}, {"id": "6902195385037488142", "title": "如何通过面试第一关【简历】", "desc": "最近写了篇面经以及面经的总结，也弄了一个21届春招的企鹅群，期间有不少人问我想参考我简历怎么写的，于是就有了这一篇文章。最开始我也不是很会写简历，也是多亏隔壁班的一位朋友 炽翎 在疫情期间开了一个线上的分享会，所以我才搞懂了一个好的简历要如何去写。 你认识一个人会先如何认识呢？…"}, {"id": "6972027657047244837", "title": "🔥谈一谈TCP和UDP的区别", "desc": "引言 网络协议是每个前端工程师都必须要掌握的知识，TCP/IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP，本文将介绍下这两者以及它们之间的区别。 一、TCP/IP网络模型 计算机与网"}, {"id": "6939850924114313224", "title": "前端候选人、团队负责人、技术面试官、猎头及 HR 的套路", "desc": "讲师 14 年加入奇虎，在 360 搜索小说团队，作为小说搜索频道的前端开发主要负责人；16 年跟随团队出来创业，担任前端 Leader；19 年加入字节跳动，目前在飞书多维表格团队做架构相关工作，负责过飞书 Sheet 表格、Bitable 多维表格重要功能、架构的设计与研发…"}, {"id": "6951391071964233741", "title": "前端面试：黑客的无尽与浏览器的反甲", "desc": "1.引言最近有同学在面试中被问到cookie针对xxs攻击设计了什么，因为'护甲'不厚，然后被'暴击'了。所以本文针对一些浏览器上基本的攻击方式和防御策略总结了一下，可供参考（百度也行）2.无尽之刃（"}, {"id": "6924465507340910605", "title": "【面试秘技】面试最容易被刷的问题：你的缺点是什么？", "desc": "优点还好说，但一说缺点，感觉怎么说都会“落下圈套”。说得轻了让人觉得你不够诚恳，说得重了又让自己的形象大打折扣。 面试的时候本来就紧张，还让你作负面的评价，可真是费了老大劲了。如果先前没有做好准备，分分钟都要卡壳。前面的各个问题都回答得很好，但这一个“无聊”的问题，就可能让你一…"}, {"id": "6844903704139661326", "title": "100*100的 canvas 占多少内存？", "desc": "在 三年前端，面试思考 中提到了一个题目，非常有新意，这里分享一下当时面试的思考过程。 其实真正的答案是多少我并不清楚，面试过程中面试官也不期待一个准确的答案，而是看你的思考过程。 如果了解过 Canvas 且做过滤镜相关的工作，可能调用过 imageData = ctx.ge…"}, {"id": "6930857965104660487", "title": "「webpack 核心特性」工作原理", "desc": "在搬砖过程中，webpack 常见的问题我们都能解决。 但当在实战中遇到很特殊的需求或者社区、webpack issues 中找不到解决方案时，我们就需要自己手写 loader 、手写 plugin 和了解 webpack 的工作原理了。 本文从几个面试管常问的问题，介绍 we…"}, {"id": "6844904052388708366", "title": "2019年,盘点一些我出过的前端面试题以及对求职者的建议", "desc": "笔者虽然曾经也面试过很多求职者,但是对于前端的笔试和面试,我觉得并不能体现一个人的真实能力,所以建议大家多修炼前端真正的技术.对于前端面试题,之前也承诺过读者要出一篇,笔者大致总结一下曾今面试的题目.后续不会再出面试题,而是聚焦于一些真正的,有利于成长性的技术文章和思维方式,来…"}, {"id": "6844903829603876877", "title": "我的2019春招（前端暑期实习）记录", "desc": "今年的春招（暑期实习）批已经过去大半了，相信不少同学已经拿到了心仪的offer了~本来打算暑假有空再写写这段经历，不过今天正好有空就记录一下吧，希望能给正在或者今后要找前端实习、工作的同学一点点启发和建议。（由于我妹子在北京读书，所以实习的话我只想着申请北京的实习机会，这是本文…"}, {"id": "6844903612879994887", "title": "闭包详解一", "desc": "现在去面试前端开发的岗位，如果你对面试官也是个前端，并且不是太水的话，你有很大的概率会被问到JavaScript中的闭包。因为这个闭包这个知识点真的很重要，还非常难掌握。 什么是闭包，你可能会搜出很多答案.... 我最认同的是《你不知道的JavaScript》中的描述，虽然前面…"}, {"id": "6890716797436166152", "title": "jsliang 求职系列 - 02 - 原型与原型链", "desc": "上面是原型链神图，如果你能理解，你基本不用看这篇文章了。 如果不能理解那也没关系，下面 jsliang 跟你慢慢唠叨。 可以看到，对于同一个函数，我们通过 new 生成出来的实例，都会开出新的一块堆区，所以上面代码中 person 1 和 person 2 的吃饭是不同的（返回…"}, {"id": "6844903810586918925", "title": "【前端面试】同学，你会手写代码吗？", "desc": "有多种实现方法，这里选几种简单方法（我看得懂的）实现。 CSS 部分完，总结，Flex 无敌。 简单实现，基本功能都有了。 还有一些稍复杂的可以写，有时间再补。"}, {"id": "6844903892841414669", "title": "「技术面试」问答中有什么十分实用的面试技巧?", "desc": "本文是面试系列的第二篇,第一篇面试官到底想看什么样的简历？. 相关的简历模板可以去公众号『程序员面试官』后台回复『模板』二字领取。 基础面试: 主要考察对岗位和简历中涉及到基础知识部分的提问,包括一部分算法和场景设计的面试题,这一面可能会涉及现场coding. 项目面试: 主要…"}, {"id": "6999277504905084942", "title": "【前端--面试】常见面试题（七）—— 详解JS函数柯里化", "desc": "在计算机科学中，[柯里化]又译为`卡瑞化`或`加里化`，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。这个技术由`克里斯"}, {"id": "6952545529247039524", "title": "从原型链出发，看看 Class 被编译成了什么样子", "desc": "本文从 JavaScript 继承中，最核心的原型链出发，介绍了在 ES5 和 ES6 中一些实现继承的方式，及其背后的原理。"}, {"id": "6844903609021235208", "title": "半年工作经验今日头条和美团面试题面经分享", "desc": "昨天，下着小雨去面试了，特地避开雨天，竟然还是雨天，宝宝不想说话。。。 他说就三个点吗 我又说加各括号或者[]...我就是表示一下下..."}, {"id": "6973627669443248141", "title": "😁前端需要了解的计算机网络知识， 这一专栏就够了！(图文并茂，点赞收藏哦！)", "desc": "这是我参与更文挑战的第9天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 由于面试的时候计算机网络知识不是很扎实，今天开始学习计算机网络"}, {"id": "6982311740335718437", "title": "如何给上级提意见又不伤其面子", "desc": "很多事情并没有完美的解决方案，面对复杂的情景问题一定要通过结构化思维先从多个角度分析问题，通过WBS拆分前提条件讨论，权衡利弊得到某条件下相对较好的解决方案。再合起来形成完整清晰、逻辑严谨的解决方案"}, {"id": "6844903641837649928", "title": "热乎的前端笔试/面试/跳坑笔记（指南)", "desc": "1. display:none与visibility:hidden的区别（2018拼多多前端笔试真题) 答案：在视觉效果上，两者是相同的，但是对于操作dom上是不同的 。 1. 基本问题 答案： 有风险，js的基本数据类型有 String Number Boolean unde…"}, {"id": "6844904121804259335", "title": "阿里前端实习面经", "desc": "先做一下自我介绍吧😄。 在这里分享一下我学习Vue原理的时候曾经实现一个简易的MVVM框架，一步一步去分析还是很快就会理解的。 ES6的异步请求是使用Promise的链式调用来完成,主要解决了回调地狱的问题。 回调地狱指的是回调函数嵌套层级过深，导致代码不好阅读和维护。 在这…"}, {"id": "6987390307436331045", "title": "HTML面试题", "desc": "HTML 与浏览器 Doctype 作用？标准模式与兼容模式各有什么区别? DOCTYPE 是用来声明文档类型和 DTD 规范的。 <!DOCTYPE html>声明位于 HTML 文档中的第一行，不"}, {"id": "6989595008403931143", "title": "刷题小程序【程序猿面试宝典】开发（一）| 项目概述与前期准备", "desc": "为配合公众号【C you again】运营，决定开发刷题小程序【程序猿面试宝典】。方便正在找工作的小伙伴学习查看热门题型。程序猿面试宝典主要实现如下图，其他功能后续更新。第一节项目概述和前期准备"}, {"id": "6941023062833758222", "title": "从一道面试题解读Promise/async/await执行顺序", "desc": "Promise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。 注意：立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。 通…"}, {"id": "6854573218305409038", "title": "有人问：学历不好，技术不行，该怎么换工作？我：...", "desc": "虽然这个问题看起来比较让人无语，但其实鱼头也有过类似情况的时候。估计这种状态并不是只有一两个人才会有，所以也就把这个无语的问题拎出来，谈谈自己的想法了，希望能帮到这位童鞋以及有类似想法的人。 我入行的第一家公司，是一家小公司，前端只有我，整个公司加起来只有十来人的那种。 由于是…"}, {"id": "6844903873983807502", "title": "【JS必知必会】高阶函数详解与实战", "desc": "作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数据库，祝您成为优秀的高级 Node.js 工程师。【程序员成长指北】作者，Github 博客开源项目 https://github.com/koala-codi…"}, {"id": "6902657803556093966", "title": "jsliang 求职系列 - 33 - Webpack - Tree Shaking", "desc": "Tree Shaking 是 Webpack 内置的一个优化，主要功能是移除 JavaScript 上下文中的未引用代码（dead-code）。 因为 JavaScript 大多数文件是要通过网络引用加载的，加载的文件越小，性能越好，所以 Tree Shaking 对于优化 J…"}, {"id": "6844903661030604814", "title": "通过正则高效实现千位符（一行代码你敢信？）", "desc": "将数字转为可读性比较高的具有千位符是笔试/面试经常被问到的，实现方案也有很多种。 一般情况下，按照我们普通的想法，就是将数字转为字符串，然后使用字符串的substr、slice、substring来实现，从右到左，每隔三位插入一个\",\"，eg： 当然还可以数字转为数组，然后循环…"}, {"id": "6844904100593664007", "title": "面试专题总结：手撕代码", "desc": "原型链继承的基本思想：是利用原型让一个引用类型继承另一个引用类型的属性和方法。 其基本思想为:在子类型的构造函数中调用超类型构造函数。 组合继承指的是将原型链和借用构造函数技术组合到一块，从而发挥二者之长的一种继承模式。基本思路：使用原型链实现对原型属性和方法的继承，通过借用构…"}, {"id": "6844903602062884872", "title": "前端学习路线及面试经验", "desc": "本人从大二上学期到现在学习前端已将近有3年时间了，最近利用毕业论文写完的一些空余时间写一下这篇文章，用于分享一些个人的前端学习经验，以及一些面试经验，不一定适合每个人，不喜勿喷，同时欢迎大家提出建议。 总体的来说前端无非就是html、css、js只要把这三样的基础打好，什么都不…"}, {"id": "6930816978101747725", "title": "前端算法面试必刷题系列[12]", "desc": "18. 删除排序数组中的重复项 (remove-duplicates-from-sorted-array) 给定一个有序数组 nums，对数组中的元素进行去重，使得原数组中的每个元素只有一个。最后返回去重以后数组的长度值。 数组完成排序后，我们可以放置两个指针 i 和 j，其中…"}, {"id": "6973190568457273352", "title": "vue路由", "desc": "1.hash模式 vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。 2.history 模式 如果不想"}, {"id": "6973979523809280030", "title": "面试：event Loop和防抖节流", "desc": "vue的computed和watch Promise 对象 防抖和节流 跨域 vue路由 盒模型 HTTP 样式优先级"}, {"id": "6918574404473454606", "title": "【22届】【秋招】前端向复习指北（上）", "desc": "题主是22届的北邮计算机应届生。 春招将至，为了暑期实习能够拿到理想offer，遂早早开始准备并记录下复习提纲给各位小伙伴们分享。如果有知识点整理得不清楚或者出错希望可以再评论区指出讨论哦。"}, {"id": "6844904029420519437", "title": "[秃破前端面试] —— 跨域实践总结", "desc": "年前年后跳槽季，准备从面试内容入手看看前端相关知识点，旨在探究一个系列知识点，能力范围之内的深入探究一下。重在实践，针对初级前端和准备面试的同学，争取附上实际的代码例子以及相关试题～系列名字就用【秃破前端面试】—— 因为圈内大家共识，技术与发量成正比。😄希望大家早日 秃 破瓶…"}, {"id": "6933530632270282760", "title": "🔥 动画：《大前端面试系列》 之原生 JavaScript 精华篇", "desc": "本篇文章于 2020 更新过，由于个人失误错删，幸亏在草稿中找回。《大前端面试系列》已经手写整理成 5W 字电子书，如果喜欢看电子版，可在俺的公众号「小鹿动画学编程」后台回复「前端小册」下载阅读。 JavaScript 的数据类型包括原始类型和引用类型(对象类型)。 栈（Sta…"}, {"id": "6844903971002253320", "title": "面试题：HTML+CSS", "desc": "持续更新中... Flex（Flexible Box）布局 称为 \"弹性布局\"，可以为网页的布局提供最大的灵活性，取代了往常的 浮动（float） 布局，并且任何一个容器都可以设置 Flex 布局。 通常在公共的css样式中定义一个清除浮动的类。 link方式的样式的权重 高于…"}, {"id": "6949481013252718605", "title": "new关键字原理及手写实现 | 刷题打卡", "desc": "高频面试题：new关键字都做了什么？以及手写实现一个new关键字，你都学废了吗？不会还不进来看看吗？"}, {"id": "6970361228547850248", "title": "前端面试题集每日一练Day8", "desc": "问题先导 html5有哪些特性？【html】 <title>和<h1>的区别？<b>和<strong>的区别？<i>和<em>的区别？【html】 <li>元素之间看不见的空白是什么？如何解决？【cs"}, {"id": "6844903826097438733", "title": "金三银四魔都两年半前端面经", "desc": "先介绍下个人基本情况，16届本科非计算机相关专业，毕业转行前端，过年后裸辞休息了半个月，然后到三月份开始全力准备面试，主要是过去做过的项目总结，刷算法题，巩固基础知识之类的。3月末开始面试。因为目前网上面经还是以1~3年居多，我投简历对标的3~5年岗位，考察点确实有些不一样，这…"}, {"id": "6844904199428243470", "title": "自学前端拿到offer的心路历程", "desc": "先交代下博主是在二线城市，所以也面不了什么大厂自然也就没什么大厂面经(就算有我也没有这个实力)，昨天面试了一家中小型的公司，这里就不透露名字了，总共面了两轮总结后写下了这篇文章，我相信也是有很多和我在二线城市的小伙伴需要这些常见的面试题的，我是刚毕业出来实习，所以马上要出去找实…"}, {"id": "6844903828278493197", "title": "2019前端基础面试秘籍", "desc": "左右固定，中间自适应。 防抖(debounce):就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 search搜索联想，用户在不断输入值时，用防抖来节约请求资源。 节流(throttle):就是指连续触发事件但是在 n 秒…"}, {"id": "6922229465468633095", "title": "山月最近的面试总结", "desc": "提供一个较少提过的方法，使用 grid，它是做二维布局的，但是只有一个子元素时，一维布局与二维布局就一样了。结合 justify-content/justify-items 和 align-content/align-items 就有四种方案 使用 flex 布局，左侧 300…"}, {"id": "6844903829671165959", "title": "2019前端面试题--这样准备，拿不到offer算我输！", "desc": "为了吸引大家点进来，起了一个刚（sao）气的标题。其实我觉得我这个文章挺值得看看的，看看又不长肉呀😄。 我是上周开始投简历，一周结束面试，在家等offer啦。坐标杭州，杭州的公司其实投来投去都是那几家，小厂不想去，大厂进不去[抠鼻ing]，加上互联网寒冬，其实找工作确实不好找…"}, {"id": "6937158923996626975", "title": "前端|每天5道面试题（8）", "desc": "美好的周末过完了，每天5道题系列又更新了~1、组件之间的通信（父子组件、兄弟组件、跨级组件）【几乎必问题目】下面我们分别介绍每种通信方式:（1）props/$emit适用父子组件通信父传子props，"}, {"id": "6844904181854109710", "title": "进大厂连载 1/15：失败 4 次成功入职阿里巴巴", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 各位同学，大家好，我是老邬。今天我会以一个候选人的视角，分享阿里巴巴前端面试的经验。 我是 2015 年本科毕业，学校既不是 211 也不是 985，我也…"}, {"id": "7000616048181379080", "title": "useState是怎么回事？", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 为函数组件提供状态 useState的返回值是什么？ useState的细节 接收唯一的参数即状态初始值，初始值可以是任意数据类型。 返回"}, {"id": "6905931622374342670", "title": "从输入URL到浏览器显示页面过程中都发生了什么？", "desc": "浏览器中输入网址。 发送至 DNS 服务器并获得域名对应的 WEB 服务器的 ip 地址。 DNS 解析首先会从你的浏览器的缓存中去寻找是否有这个网址对应的 IP 地址，如果没有就向OS系统的 DNS 缓存中寻找，如果没有就是路由器的 DNS 缓存， 如果没有就是 ISP 的D…"}, {"id": "6989790267243135013", "title": "webpack常见面试问题整理", "desc": "1.webpack是什么？ webpack一个用于现代javascript应用程序的静态模块打包工具 2.webpack的配置有哪些？ 入口（entry）,出口（output）,mode,plugin"}, {"id": "6875705865798844430", "title": "一次有趣的面试经历，当前端面试碰到后端面试官会发生什么？", "desc": "金九银十，又是一年跑路季。先介绍下个人情况，一年半经验，计算机专业的渣渣大专。凭着对前端的热爱，基本每天都会抽点时间来学习，基础还算可以。其实上家公司呆着还是挺舒服的，没有加班，唯一不好就是不偏技术，业务也相对简单。考虑到未来的职业发展，最终还是选择跳出这个舒适圈。 9月中旬离…"}, {"id": "6992181421909491720", "title": "五分钟带你学会--图片懒加载｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 什么是图片懒加载 如何实现图片懒加载？ 方法1：监听scroll事件 通过给图片的src属性名设置为自定义属性data-src使得为滚动到图"}, {"id": "6844903863963631623", "title": "前端性能优化三部曲(加载篇)", "desc": "虽然前端开发作为 GUI 开发的一种,但是存在其特殊性,前端的特殊性就在于“动态”二字，传统 GUI 开发，不管是桌面应用还是移动端应用都是需要预先下载的,只有先下载应用程序才会在本地操作系统运行,而前端不同,它是“动态增量”式的,我们的前端应用往往是实时加载执行的,并不需要预…"}, {"id": "6844904100081958919", "title": "2020两年前端面试20家公司感悟 | 掘金技术征文", "desc": "具体来说就是对于你现在以及未来的考察，根据你对技术的广度与深度的认知以及项目的理解（包含项目开发，多人协作，工作方式等）结合学习规划、稳定性等问题，对你现在以及未来潜力进行评估，判断你是否适合所面试团队并能为团队带来贡献。 这些问题要提前想清楚，不要回答的模棱两可，最后可能把自…"}, {"id": "6844904153437700103", "title": "前端进阶高薪必看-手写源码篇", "desc": "前言此系列作为笔者之前发过的前端高频面试整理的补充会比较偏向中高前端面试问题当然大家都是从新手一路走过来的感兴趣的朋友们都可以看哈初衷我相信不少同学面试的时候最怕的一个环节就是手写代码大家一定听过这句"}, {"id": "6844903634002509832", "title": "面试精选之http缓存", "desc": "前端面试常问第二大问题是http缓存相关内容。说真的，http缓存相关的细节比较多，并且 http 常用协议版本有1.0、1.1，（本文暂不讨论http2.0）。 我们先罗列一下和缓存相关的请求响应头。 今天着重介绍一下浏览器缓存机制，我们知道，浏览器缓存一般都是针对静态资源，…"}, {"id": "6956028222806949901", "title": "【1.9w字】彻底搞懂HTTP知识的面试题，建议精读收藏", "desc": "如何理解 URI？ URI, 全称为(Uniform Resource Identifier), 也就是统一资源标识符，它的作用很简单，就是区分互联网上不同的资源。 但是，它并不是我们常说的网址, 网"}, {"id": "6844903890735857677", "title": "[有赞社招-前端面试经历分享] 电话面+技术面+hr面", "desc": "如果对我技术感兴趣的话，欢迎发来邀请，期待与你共事。 第一次在掘金发文，如果文章格式不规范或者文章中存在造成歧义的地方，先行道歉，请您告知我，配图大多来源于网络，造成侵权的话会立即删除，期待你的修改建议。 有赞的面试流程是内推流程过了后，会有电话面试的人跟你约你方便的时间，约好…"}, {"id": "6844903882204643342", "title": "面试官教你写简历之「中高级开发者简历指南」", "desc": "“为什么简历投出去总是石沉大海，没有回应？！”，无论你技术水平如何，如果你遇到了这类问题，那么这篇文章就是为你准备的。 很多人把简历石沉海底的原因归为技术不行，前公司背景不行，教育经历不行等等，但很少有人会去关注到可能是简历出了问题。当需要用到简历时，多数人可能会从网上直接下个…"}, {"id": "7006591827050496031", "title": "记录笔试中的手撕代码", "desc": "本文纯属个人面试中和面经上碰到感觉有难度的题。 1，对象扁平化 描述：实现一个 flatten 函数，将接受的对象或数组进行扁平化处理，返回处理后的结果。值为 null 或 undefined 的值丢"}, {"id": "6862855292577644552", "title": "「面经」你可能需要的三轮网易面经", "desc": "最近一个星期面了几家公司，最后收获了心仪的网易offer，于是推掉了其他的面试，至于一些其他大厂，并没有投简历，由于种种原因（就是菜），准备目前先踏实的学吧。 希望大家秋招顺利，成为offer收割机。 最有意思的就是网易有道第三轮技术面试，因为这个没有具体的答案，有兴趣的可以看…"}, {"id": "6866920515420815374", "title": "当裸辞遇到了面试难，你需要了解一下这些面试题", "desc": "又要到金九银十的跳槽季了，为了让更多的小伙伴可以在面试的时候取的更好的offer,所以自上月起我每天都会在自己的公众号【前端有的玩】里面推送一到两道面试题，俗称每日一题（每日一坑）。方便找工作的小伙伴每日都会有新的收获。本文就是小编将前期的一些比较经典的每日一题进行了梳理，欢迎…"}, {"id": "6844904165462769678", "title": "深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）", "desc": "resize、scroll 这些事件是何时去派发的。 这些问题并不是刻意想刁难你，如果你不知道这些，那你可能并不能在遇到一个动画需求的时候合理的选择 requestAnimationFrame，你可能在做一些需求的时候想到了 requestIdleCallback，但是你不知道…"}, {"id": "6939707197135781924", "title": "大厂社招前端-走心面试经验分享", "desc": "19年本科毕业科班出身的程序媛，🤪工作大概1.5年，在2021年之际，我想换个地方继续coding了，换工作是自己意料内的事情，也经历了这次复习、找工作的经验，想要分享个人从复习到面试的方法"}, {"id": "7005568391381516324", "title": "面试官：简单说下浏览器渲染页面的过程", "desc": "前言 复习经典面试题 浏览器从获取HTML文件直到浏览器以像素点的方式在屏幕中绘制出页面的内容，这期间所经历的一系列步骤，叫做关键渲染路径(Critial Rendering Path)。 简单说下浏"}, {"id": "6844904095711494151", "title": "预测最近面试会考 Cookie 的 SameSite 属性", "desc": "2 月份发布的 Chrome 80 版本中默认屏蔽了第三方的 Cookie，在灰度期间，就导致了阿里系的很多应用都产生了问题，为此还专门成立了小组，推动各 BU 进行改造，目前阿里系基本已经改造完成。所有的前端团队估计都收到过通知，也着实加深了一把大家对于 Cookie 的理解…"}, {"id": "6947847527253311496", "title": "vue高频面试题整理", "desc": "整理常见Vue面试题，并且从源码的角度理解和说明，用通俗易懂的方式描述清楚问题的本质，其中也包含Vue3。"}, {"id": "6916317088521027598", "title": "字节跳动面试官：请用JS实现Ajax并发请求控制", "desc": "讲真的，最近也很迷茫。关于技术、关于生活吧。也找了很多在大厂的朋友去聊，想需求一些后期发展的思路。这其中也聊到了面试，聊到了招聘中会给面试者出的一些题目。我正好也好久没面试了，就从中选了几道。最近也会陆续出一系列关于一些面试问题的解析。 这道题目我想很多同学应该都或多或少的见过…"}, {"id": "6844904137495150599", "title": "一年半经验前端社招7家大厂&独角兽全过经历  | 掘金技术征文", "desc": "这次近3个星期，面了7家（拼多多、虾皮、作业帮、猿辅导、商汤科技、快手），全都是线上视频面试的，一般是晚上回家面试或者周末。过程还是挺顺利的，全都过了。时间很紧凑，几乎没什么时间准备和复盘，一环接着一环的，所以就全部凑到一起一次性总结了 pdd用的是他们自己家的面试系统，该有的…"}, {"id": "6844904166742048782", "title": "前端知识体系(2)-vue篇", "desc": "MVVM的核心是数据驱动即ViewModel，ViewModel是View和Model的关系映射。MVVM本质就是基于操作数据来操作视图进而操作DOM，借助于MVVM无需直接操作DOM，开发者只需编写ViewModel中有业务，使得View完全实现自动化。 SPA（ singl…"}, {"id": "6844903625769091079", "title": "BAT前端经典面试问题：史上最最最详细的手写Promise教程", "desc": "我们工作中免不了运用promise用来解决异步回调问题。平时用的很多库或者插件都运用了promise 例如axios、fetch等等。但是你知道promise是咋写出来的呢？ 别怕～这里有本promisesA+规范，便宜点10元卖给你了。 首先呢，promise肯定是一个类，我…"}, {"id": "7005757414226001951", "title": "前端面试每日 3+1 —— 第877天", "desc": "今天的知识点 (2021.09.09) —— 第877天 (我也要出题) [html] 使用html5写一个背景粒子特效 [css] CSS允许使用哪些不同的媒介类型？ [js] 写个方法找出数组中位"}, {"id": "6844903993374670855", "title": "Vuex面试题汇总", "desc": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理插件。它采用集中式存储管理应用的所有组件的状态，而更改状态的唯一方法是提交mutation，例this.$store.commit('SET_VIDEO_PAUSE', video_pause，SET_VIDEO_PAU…"}, {"id": "7001303366231916575", "title": "需要掌握的Hooks之useReducer与useContext", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 什么是useReducer? useReducer接受什么? userReducer返回的是什么? 定义的reducer函数接收什么,返回"}, {"id": "6999419506074320909", "title": "🔥 你能讲一下extends和寄生式组合继承原型之间的区别？", "desc": "在面向对象编程中讨论最多的就是继承，大部分的面向对象语言都支持两种继承，一种是接口继承，一种是实现继承。前者只继承方法签名（比如Java中继承接口的抽象类），后者继承实际的方法。在ECMAScript"}, {"id": "6966179727329460232", "title": "「百毒不侵(三)」结合“康熙选秀”，给大家讲讲“虚拟列表”", "desc": "虚拟滚动，就是根据`容器可视区域`的`列表容积数量`，监听用户滑动或滚动事件，动态截取`长列表数据`中的`部分数据`渲染到页面上，动态使用空白站位填充容器`上下滚动区域内容`，模拟实现`原生滚动效果`"}, {"id": "6994686375383531551", "title": "从Babel的角度看ES6与ES5继承的区别", "desc": "对于自定义对象的继承，ES5、ES6都能很好解决，但对于内置对象，ES5不可能完全实现，ES6的extends才是终极解决方案。本文就从babel转译层面来看ES5继承与ES6的区别。"}, {"id": "7001695733334147108", "title": "JavaScript 面试知识点 📝 🎉～（0x61 - 0x80）", "desc": "TOC JavaScript 面试知识点 📝 🎉～（0x01-0x20） JavaScript 面试知识点 📝 🎉～（0x21-0x40） JavaScript 面试知识点 📝 🎉～（0x41-0x6"}, {"id": "6980133448681783332", "title": "es6相关总结", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 Map、Set Map是一组键值对的结构，具有极快的查找速度。 举个例子，假设要根据同学的名字查找对应的成"}, {"id": "6945136994624208927", "title": "腾讯前端面经+鸡汤", "desc": "本文适合阅读人群：毕业1-3年左右想进入大厂工作工作经历不理想项目经历不理想简历不知道怎么写面试屡遭失败感到迷茫逐渐失去信心希望得到鼓励或建议想参考本次前端面试题目如不满足以上情况，说明你大概率不需要"}, {"id": "6844904102053281806", "title": "手写async await的最简实现（20行）", "desc": "如果让你手写async函数的实现，你是不是会觉得很复杂？这篇文章带你用20行搞定它的核心。 经常有人说async函数是generator函数的语法糖，那么到底是怎么样一个糖呢？让我们来一层层的剥开它的糖衣。 这篇文章的目的就是带大家理解清楚async和generator之间到底…"}, {"id": "6844903958591324168", "title": "“寒冬”三年经验前端面试总结（含头条、百度、饿了么、滴滴等）", "desc": "跳槽是每个人的职业生涯中都要经历的过程，不论你是搜索到的这篇文章还是无意中浏览到的这篇文章，希望你没有白白浪费停留在这里的时间，能给你接下来或者以后的笔试面试带来一些帮助。 2019也许是互联网未来10年中最好的一年。WINTER IS COMING。但是如果你不真正的自己去尝…"}, {"id": "6988520726785425445", "title": "双飞翼和圣杯布局", "desc": "双飞翼和圣杯布局属于老生常谈了，最近重新回顾了一下，写下来当作记录供以后参考，同时也是加深自己的理解。如果有不对的地方，希望大家多多指教。 双飞翼布局 .center 放前面是因为要提前渲染这一块儿的"}, {"id": "6943757291409637412", "title": "3月面试实录(未整理完)", "desc": "后面还有很多没有写答案总结,写了答案的，如果答得不好，请多多指教。 1. typeof 2. instanceof 3. Object.prototype.toString.call() 4. constructor constructor是原型prototype的一个属性，当…"}, {"id": "6856419501777846279", "title": "这些手写代码会了吗？少年", "desc": "从略带银丝的头发和干净利落的步伐我察觉到，面前坐着的这个面试官有点深不可测。我像往常一样，准备花 3 分钟的时间给面试官来一套昨天晚上精心准备的自我介绍。我自信且得意的诉说着对过往项目所付出的心血，所做的优化取得了怎样的成果，为公司提高了多少的收入。。。 显然，面试官对我说的数…"}, {"id": "6844904012786073614", "title": "50 个JS 必须懂的面试题为你助力金九银十", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JavaScript 是一种轻量级的解释型编程语言，具有面向对象的特性，允许各位在其他静态HTML页面中构建交互性。 该语言的通用核心已嵌入Netscape，Internet Explorer和其他Web浏览器…"}, {"id": "6992225498214432804", "title": "脱产4个月转行前端面试记录", "desc": "坐标深圳的一枚前端小白，今年3月初开始辞职脱产学前端，7月初面试花了一周半的时间（前期的公司都比较小用来试水的），面了将近10家，拿了几个offer，最后入职了一家中型公司，记录一些面试问题以及经验"}, {"id": "6982186218456891423", "title": "2021 6月份前端面试 | HTML +CSS", "desc": "1.html语义化 意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代"}, {"id": "6844904086823780366", "title": "前端高级进阶：前端部署的发展历程", "desc": "我在 github 上新建了一个仓库 每日一题，每天一道面试题，欢迎交流。 前端一说起刀耕火种，那肯定紧随着前端工程化这一话题。随着 react/vue/angular，es6+，webpack，babel，typescript 以及 node 的发展，前端已经在逐渐替代过去 …"}, {"id": "7002401072966795277", "title": "学会使用useMemo和useCallback对你没坏处", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 什么是useMemo？ useMemo的基本用法 memo方法 memo方法的基本用法 useCallback是什么？ useCallba"}, {"id": "6989626582465789966", "title": "2年前端(外包经历) 6月部分面试记录 （高级、资深岗位）", "desc": "本人一年小公司经历，2年前端大厂外包经历，坐标杭州，记录6月份部分面试记录，还有一部分忘的太多没记录。"}, {"id": "6844903598707441672", "title": "几道高级前端面试题解析", "desc": "因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。 小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 0.1 = 2^-4 * 1.10011(0011)…"}, {"id": "6844904145388830728", "title": "『面试的经历』—— 四年前端在CSS面试上跪了/(ㄒoㄒ)/~~", "desc": "在面试最后，面试官突然问了我最后一个问题。怎么清除浮动。当然我很快给出最常用的方法。 本来我以为，面试官还会问，还有那些方法，我脑中已经构思了好几种方法。没想到，面试官竟然问我，这个方法清除浮动的原理。 原理！当时我就有点懵逼，这个方法很常见，也经常在用，但是就没去理解过其原理…"}, {"id": "6908327746473033741", "title": "「2021」高频前端面试题汇总之计算机网络篇 ", "desc": "2021 高频前端面试题汇总之计算机网络篇，前端面试题汇总系列文章的计算机网络篇，长期更新，欢迎收藏、点赞！"}, {"id": "6962106840389795854", "title": "01 | 能让我想想吗？。。。对不起，我忘记了！", "desc": "前言 最近自己面试和观看同学面试后，感慨万分！其实很多知识点真的看过，但是在面试过程中会突然想不起来，你说可气不可气。这个有个好方法--提词器，有利于我们更好的记忆。下面将介绍面试官深挖的相关内容。"}, {"id": "6844904110395752462", "title": "面试官：看到你简历上写着会Vue?", "desc": "vue是一门渐进式的javascript框架。所谓的渐进式就是：从中心的的视图层渲染开始向外扩散的构建工具层。这过程会经历：视图层渲染->组件机制->路由机制->状态管理->构建工具；五个层级。 特点：易用，灵活，高效，入门门槛低。 前者是将DOM创建和删除后者则是改变disp…"}, {"id": "6908493793213808647", "title": "jsliang 求职系列 - 49 - 2020 求职系列汇总【完结】", "desc": "每个人在一生中总会碰到比较煎熬的日子，如果是前端求职的磕碰，那么希望看完这系列的 49 篇文章对你能有所帮助。 —— jsliang Hello 小伙伴们早上、中午、下午、晚上好，我是 jsliang。 如果你准备明年跳槽，或者已经离职，希望能对面试有充足的准备。 那么 jsl…"}, {"id": "6919285014991470600", "title": "你可以手写Vue2的响应式原理吗？", "desc": "这道题目是面试中相当高频的一道题目了，但凡你简历上有写：“熟练使用Vue并阅读过其部分源码”，那么这道题目十有八九面试官都会去问你。 作为一个前端的MVVM框架，Vue的基本思路和Angular、React并无二致，其核心就在于: 当数据变化时，自动去刷新页面DOM，这使得我们…"}, {"id": "6998353204635238436", "title": "前端面试系列四：网络及存储", "desc": "HTTP 是一种能够获取像 HTML、图片等网络资源的通讯协议。 它是在 web 上进行数据交换的基础，是一种 client-server 协议。 HTTP 在因特网的角色：充当一个信使的角色，干"}, {"id": "7005870208980090911", "title": "最新的前端大厂面经（详解答案）", "desc": "前言 文章转载：乐字节 Hello 大家好 我是鲨鱼哥 还记得辣个一天面了6 家公司最后拒了所有大厂的男人吗 没错正是在下 哈哈 不了解的同学可以看下这篇一天面试 6 家大厂-offer 拿来吧你 介"}, {"id": "6844904052166230030", "title": "【译】面试官：请你实现一个PWA   我：😭", "desc": "渐进式网页应用，后文统一简称PWA，又名Web开发的未来🤣，你不会，我觉得小伙砸你没有未来啊🤡。 为了2020年不要被问了一脸懵，所以我写了这篇文章，废话不多说，接下来我们来看22个在2020到2021年间可能会询问到的PWA面试题，不然我写干嘛🤣。 渐进式网络应用（PW…"}, {"id": "6844903940920885262", "title": "前端面试题汇总", "desc": "PureComponent自带通过props和state的浅对比来实现 shouldComponentUpate()，而Component没有。 可能会因深层的数据不一致而产生错误的否定判断，从而shouldComponentUpdate结果返回false，界面得不到更新。 不…"}, {"id": "6844903702273212423", "title": "26个精选的JavaScript面试问题", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 根据Stack Overflow 2018年年度调查报告，JavaScript已经连续6年保持最常用的编程语言的记录。对于一个全栈工程师，JavaScript可以说是一项必备语言，在面试中总会被…"}, {"id": "6844903703242080263", "title": "ES6的Symbol竟然那么强大，面试中的加分点啊", "desc": "这个东西是可共享，在创建的时候会检查全局是否寻在这个key的symbol.如果存在就直接返回这个symbol,如果不存在就会创建，并且在全局注册。 全局注册表不存在uid3这个共享的symbol.所以取不出对应的key.由此可见，这个是获取对应的key. 这里会报错，根据规范，…"}, {"id": "6844904114879463437", "title": "Vue 的生命周期之间到底做了什么事清？（源码详解，带你从头梳理组件化流程）", "desc": "相信大家对 Vue 有哪些生命周期早就已经烂熟于心，但是对于这些生命周期的前后分别做了哪些事情，可能还有些不熟悉。 本篇文章就从一个完整的流程开始，详细讲解各个生命周期之间发生了什么事情。 注意本文不涉及 keep-alive 的场景和错误处理的场景。 进入了 _init 函数…"}, {"id": "6982756914316705823", "title": "JS 原生方法原理探究（九）如何手写实现浅拷贝和深拷贝？", "desc": "----这是 JS 原生方法原理探究系列的第九篇文章。本文会介绍如何手写实现浅拷贝和深拷贝。----"}, {"id": "6850037276010315783", "title": "内鬼消息：串联高频面试问题，值得一看！", "desc": "开宗明义，本瓜深知汝之痛点：前端面试知识点太杂，卿总为了面试而面试，忘了记，记了又忘，循环往复，为此叫苦不迭。 来，让本瓜带领各位都稍稍回顾一下，自己曾经在学生时代记忆元素周期表的光辉岁月。 咱当初记这前三十位元素，是死记硬背的吗？答案是否定的，机智的我们用到了 串联记忆法 。…"}, {"id": "7001651293999595533", "title": "大厂面试 之事件循环(Event Loop)", "desc": "一些面试题，看起来很简单，其实影藏这你没深入理解的知识点，及其容易弄错，现在收集起来，便于不断深入理解和温习复习 1、数组里面的函数 知识储备： 正题： 2、事件循环 Event Loop 知识储备："}, {"id": "6999468667884797965", "title": "vue面试题", "desc": "keep-alive 组件有什么作用? keep-alive 是 vue 的内置组件，一般情况下，组件进行切换的时候，默认是会进行销毁的，如果我们想在某个组件切换后不进行销毁，而是保存之前的状态，那么"}, {"id": "6844903506004934663", "title": "如何通过饿了么 Node.js 面试", "desc": "教你如何通过饿了么大前端的面试, 职位是 2~3 年经验的 Node.js 服务端程序员"}, {"id": "6856543240527708168", "title": "【必会基础】V8如何执行JavaScript？", "desc": "首先需要明确，我们的代码是不能直接被 CPU 执行的，因为 CPU 只能识别二进制的指令，但是二进制的指令都是类似10111011111100110 这样的，很明显，如果我们去写一个程序，都是直接用二进制，难度可想而知有多大。 就算给你一张二进制指令映射表，告诉你每一串二进制对…"}, {"id": "6844904142788378631", "title": "数组的push、unshift、pop、shift方法实现", "desc": "push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。 从解释中可以看出，push方法只要将要添加的元素依次放到数组的最后即可，不会改变原有数组元素的索引。所以循环参数列表，将新元素依次放到数组的最后即可。 unshift() 方法将一个或多个元素添加到数组…"}, {"id": "6844903942074138637", "title": "聊一聊前端算法面试——递归", "desc": "现在竞争越来越激烈，今天来聊一聊前端面试中出现频率非常高的一种算法思想——「递归」。 如下图所示：一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish…"}, {"id": "6844904144789078030", "title": "一个HTTP请求的曲折经历", "desc": "作为程序员的我们每天都在和网络请求打交道，而前端程序员接触的最多的就是HTTP请求。平时工作中，处理网络请求之类的操作是最多的了。但是一个请求从客户端发出到被服务端处理、再回送响应，再被客户端接收这一个闭环的底层细节可能并没有深究过，本篇文章是我的一篇读书笔记，总结出来恰好涉及…"}, {"id": "6844903625618096141", "title": "JS基础知识（覆盖JS基础面试题）", "desc": "总结一些前端基础的知识，有些知识可能在前端面试的时候会问到，所以做个记录，也有助于其他人查看，如果有什么问题，可以指出，会积极修正。 喜欢的小伙伴点个赞吧，感觉对身边人有帮助的，麻烦动动手指，分享一下。非常感谢各位花时间阅读完，同时很感谢各位的点赞和分享。"}, {"id": "6998813107019579406", "title": "再说面向对象（2）", "desc": "在上一篇文章中我从一个更深的层次介绍了对象（注：建议阅读 再说js中的面向对象（一）），了解了对象属性的属性。那么今天我们开启第二个阶段，面向对象的封装。封装是真正意义上的面向对象"}, {"id": "6844904166469402638", "title": "『面试的经历』—— 面试官是怎么问穿你的假简历", "desc": "首先发几句牢骚，在刚开始带团队的时候，好不容易带会一个小伙伴，结果小伙伴呆了一年就要走了。最初会抱怨同事不够忠诚，现在就很坦然了，所谓忠诚就是背叛的筹码不够。最近感觉筹码够了，也动了跳槽的心思，恰逢公司每年例行的纳新，所以现在就处于一个不断被面试和面试的状态。面试的人多了，有诸…"}, {"id": "6933395670619389959", "title": "前端|每天5道面试题（3）", "desc": "1、JS有几种数据类型,其中基本数据类型有哪些!七种数据类型BooleanNullUndefinedNumberStringSymbol(ECMAScript6新定义)Object(ES6之前)其中5"}, {"id": "6844903826734989325", "title": "“寒冬中”三年前端社招面试经验", "desc": "前言：16 年毕业的渣本程序员，毕业后一直在上海某公司工作，小组氛围以及同事都非常 nice，但是业务线发展不好，年后回来后被砍了，不想内部转岗到其他部门，所以加入了找工作的大潮。这次的找工作经历对我来说很重要，它让我在准备的过程中突然对很多技术问题有所觉悟，想记录一下这次的经…"}, {"id": "6844903929046630413", "title": "七篇前端面试必考知识点，助你一臂之力", "desc": "文章内容较多，建议先 mark 再看哟。 DOCTYPE 是 html5 标准网页声明，且必须声明在HTML文档的第一行。来告知浏览器的解析器用什么文档标准解析这个文档，不同的渲染模式会影响到浏览器对于 CSS 代码甚至 JavaScript 脚本的解析。 defer：scri…"}, {"id": "6844903568772710414", "title": "一年前端面试打怪升级之路（二）", "desc": "最想去的一家公司，参加过他们的技术分享会，技术氛围早有耳闻。不局限于做商业化的项目，而是会投入精力去做优化流程和提高效率的事情，开发开源工具，或者重构老旧项目等等 在我问到部门工作流程，第一位面试官说了一句话：在确定好技术选型后，怎么爽怎么写。 全程历时将近3小时，是学到最多的…"}, {"id": "7000362834609569829", "title": "HTTP面试汇总", "desc": "一、HTTP基础知识 1、HTTP是什么？ 2、HTTP常见的状态码 3、HTTP常见字段有哪些？ 4、HTTP请求方法 二、GET和POST 1、两者的区别 ２、get和post方法都是安全和幂等的"}, {"id": "6918557902395899912", "title": "面试官：说说 js 里面常用的几种继承方式", "desc": "在面向对象编程中，为了能更好的复用以前的开发代码，缩短开发的周期，提高开发的效率，继承是一种很好的方法。它可以让我们使用继承的方式，去使用原有对象的一些方法或者属性。在 JavaScript 这么灵活的语言之中，常见的继承方式有六种，现在我们就来一个一个的过一遍。 原型链是比较…"}, {"id": "6998455411569328164", "title": "面试八股文：DNS 与 TCP", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 一图概览 DNS & hosts DNS，全称：Domain Name System，中文：域名系统 举例说明： 在浏览器输入 baidu."}, {"id": "6857680084677951496", "title": "《大前端进阶 安全》系列 防止GitHub代码泄漏", "desc": "相信每个工程师，都有自己的 GItHub，作为开源平台，它给我们带来了很多的便利，但如果使用不得当，就很容易造成信息泄露。 这时候，有的小伙伴就要说了，不是有安全团队嘛，难道安全侧没有做对应的防护措施嘛？然后现实却并不是这样的。 一般的创业公司，开发的安全意识整体是很薄弱的（但…"}, {"id": "6979944836908449822", "title": "js面试（二）", "desc": "一.函数 1.1 箭头函数 1.箭头函数没有this，他的this由所在上下文中的this指定的； 2.箭头函数没有arguments对象，但是，他可以访问外围函数的 arguments 对象； 3."}, {"id": "6992105431569006629", "title": "面试： 页面渲染的过程", "desc": "页面渲染过程注意事项+css资源+js资源等加载 客户端从服务器获取到需要渲染的页面源代码后开辟一个‘GUI渲染线程’，自上而下解析代码，最后绘制出对应的页面，自上而下渲染解析代码的过程是‘同步’的，"}, {"id": "6844903781704925192", "title": "前端面试查漏补缺--(八) 前端加密", "desc": "本系列最开始是为了自己面试准备的.后来发现整理越来越多,差不多有十二万字符,最后决定还是分享出来给大家. 这是一个绕不开的话题,肯定有很多看法.但我看来:前端加密看起来有意义,但有时候看起来并没有\"意义\". 在 HTTP 协议下，数据是明文传输，传输过程中网络嗅探可直接获取其中…"}, {"id": "6844903818107305998", "title": "面试官：你了解Webpack吗？", "desc": "大家好哟，这是第四篇面试官篇，估计还有个七八十篇面试文章（前端苦命）。 这篇文章介绍了webpack核心概念以及如何使用。 webpack的核心概念只要记住下面四个就够用了（除非大佬是webpack配置工程师）。 比如vue，那就是src，怼到entry参数上，webpack就…"}, {"id": "6996907598502952974", "title": "vue 3.0学习", "desc": "vue3.0出世之后,众人纷纷表示已经学不动了.然而我们还是得抽空学习滴,要不然就真得回家养猪了HHH.本文主要讲述了简单讲述了一些相对2.x的改动,希望能帮到各位同学."}, {"id": "6996869276401401886", "title": "前端面试系列二：HTML / CSS", "desc": "flex 布局有哪些属性？分别代表什么意思 CSS3 相比于 CSS2 多了哪些属性 请说明 Html 布局元素的分类有哪些？描述每种布局元素的应用场景"}, {"id": "6844904194764177416", "title": "前端经典面试题网络篇之TCP三次握手、四次挥手", "desc": "今天来说一说，在面试的时候，面试官经常会问到的TCP三次握手和四次挥手。上一篇给大家简单介绍了计算机网络的五层体系结构，那我们今天就来一起聊一聊传输层TCP协议的三次握手和四次挥手。 TCP协议在传输数据的时候，客户端（Client）跟服务端（Server）会建立连接，然后把需…"}, {"id": "6998445673955721224", "title": "前端面试题汇总(七)", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 继承的实现 通过原型链实现继承 优点：可以访问父类的属性和方法和原型上的属性和方法 缺点：继承如果是引用类型，其中一个子类进行修改，全部都"}, {"id": "6844903875456008199", "title": "深入理解 JavaScript, 从作用域与作用域链开始", "desc": "1. 什么是作用域 作用域是你的代码在运行时,某些特定部分中的变量,函数和对象的可访问性。换句话说，作用域决定了变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。 作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 No…"}, {"id": "6981634826914775053", "title": "三栏布局怎么写？？？", "desc": "去年面试的时候面试官问我的一个关于css的面试题，校招生问到的还是比较多的，现在总结一下，等到你面试的时候惊艳下面试官"}, {"id": "6855892470790782984", "title": "「每周前端面试题专栏」- 滴水之功，开拓大厂之路（第四周）", "desc": "值新的一岁之际，希望自己可以：勤思考，多动手，善总结，能坚持。 建了一个公众号，每周周一 至 周五，每天发布若干道面试题，并奉上个人觉得还行的解答，周六或周天发一遍汇总~。 希望大家有所得，希望自己有所得。 下面是本周的汇总（2020.07.27 - 2020.07.31）。 …"}, {"id": "7002031762113052708", "title": "一道前端流程控制面试题", "desc": "最近在面试时遇到这样一道笔试题，觉得很有意思，拿出来分享一下。 看题目： 刚拿到题目的时候还是比较懵的，无从下手，不过为了offer还是很快的静下心来去分析题目。 所有的调用都是基于 LazyMan "}, {"id": "6935353701515132958", "title": "前端面试之JavaScript基础（六）——  继承", "desc": "继承是面向对象编程当中一个非常重要的概念，在 JavaScript 中我们可以通过原型链来模拟这种特性，今天我们就来认识一下 ES6 之前是如何实现继承这一功能的。 原型链继承：将子类的原型对象改写为父类的实例对象，再通过父类实例对象上的 [[Prototype]] 属性与父类…"}, {"id": "6844904097338884110", "title": "关于Vue的面试资料汇总", "desc": "一、初级篇Vue初级前端工程师面试必备Vue组件开发基础全面详解Vue初级面试题汇总Vue-Router面试题汇总二、中级篇Vue自定义指令基础全面详解Vue中级面试题汇总Vuex面试题汇总三、高级篇"}, {"id": "6844903785567879181", "title": "【西瓜创客】招聘季邀您在这个夏天和非同寻常的人一起做点非同寻常的事~", "desc": "我们是谁：西瓜创客，少儿编程领跑者，红杉经纬新宠，成都小小小独角。（头衔只有龙妈的一半长，sigh ） 还是原来的场景，还是原来的配方~2014 年，西瓜创客还是 EUMLab ，那是个出产乐队，Live Show 和表情包（右一.gif）的地方。来感受下：为了更多人能跟我们一…"}, {"id": "6844904094516150285", "title": "【面试题解析】手动实现Promise", "desc": "前端面试的时候，经常能看到这样一道题，实现一个Promise。 这篇文章将一步步实现 Promise，彻底弄懂 Promise。 平时使用 Promise 我们可以知道 Promise 存在三种状态 Pending、Resolve、Reject，在 new Promise 时需…"}, {"id": "6895179296055558151", "title": "jsliang 求职系列 - 14 - 手写源码大杂烩", "desc": "手写系列的代码，较为重要/内容较多的，都抽取到单独篇章去了，下面看大杂烩，概率会出的手写题目。 面试官：手写一个自定义原生事件。 页面 2 秒后自动触发 myEvent 事件。 触发自定义事件使用 dispatchEvent(myEvent)。 Object.create() …"}, {"id": "6844903822280785928", "title": "「前端面试题系列9」浅拷贝与深拷贝的含义、区别及实现（文末有岗位内推哦~）", "desc": "面试的时候，我经常会问候选人深拷贝与浅拷贝的问题。因为它可以考察一个人的很多方面，比如基本功，逻辑能力，编码能力等等。 另外在实际工作中，也常会遇到它。比如用于页面展示的数据状态，与需要传给后端的数据包中，有部分字段的值不一致的话，就需要在传参时根据接口文档覆写那几个字段的值。…"}, {"id": "6961719419043053575", "title": "JS 内存生命周期", "desc": "JS 内存生命周期 区别在于，一些语言会将这种能力开放 —— 比如 C 语言中的 malloc() 和 free() 方法 ，这些方法的暴露，使得开发者能够切身感受到内存管理这件事情的存在。 而在另一"}, {"id": "6844903613412671496", "title": "详解高级前端面试常问的EventLoop", "desc": "当我们的代码从上到下同步执行时，遇到setTimeout就记时，当时间到时就把此事件放到事件队列中，遇到微任务就把微任务放到微任务空间，代码会继续向下执行,直到同步代码执行完毕。 完毕后，会看看微任务空间中有没有微任务，有就把微任务空间中的微任务全部执行，然后去队列中取我们的事…"}, {"id": "6897414495049072647", "title": "2020前端常见面试题总结", "desc": "MVC: MVC即model-view-controller（模型-视图-控制器）是项目的一种分层架构思想，它把复杂的业务逻辑，抽离为职能单一的小模块，每个模块看似相互独立，其实又各自有相互依赖关系。它的好处是：保证了模块的智能单一性，方便程序的开发、维护、耦合度低。 vue.…"}, {"id": "6844904146693259272", "title": "前端面试你需要知道的事情：简历", "desc": "代码能力差：递归，查找等一些简单的算法写不出，代码不规范。 这和学习方法有关，也可能和我们的经验有关。所以在参加完今年校招之后想通过一系列前端面试的文章来帮助大家找到一份满意的工作，同时找到一些适合自己学习方法。这些文章会包括写简历，面试流程，面试题分析和offer选择等，也会…"}, {"id": "6844903640407375886", "title": "一步步实现VUE-MVVM 系列，储备面试技能", "desc": "回答: mvvm 主要通过 Object 的 defineProperty 属性，重写 data 的 set 和get 函数来实现。 ok，回答得60分，那么你知道具体实现过程么？想想看，就算他没问到而你答了出来是不是更好？前提下，一定要手撸一下简单的mvvm才会对它有印象~ …"}, {"id": "6985823802445791246", "title": "浏览器协议和安全", "desc": "1、http1.1和http2的区别 http1.1： （1）高延迟：会导致队头阻塞 （2）明文传输：不安全 （3）无状态：头部巨大切重复 （4）不支持服务器推送 http2: （1）二进制分帧 （2"}, {"id": "6844903778424995848", "title": "「前端面试题系列6」理解函数的柯里化", "desc": "最近，朋友T 在准备面试，他为一道编程题所困，向我求助。原题如下： 这道题要考察的，就是对函数柯里化的理解。让我们先来解析一下题目的要求： 如果传递两个参数，我们只需将它们相加并返回。 否则，我们假设它是以sum(2)(3)的形式被调用的，所以我们返回一个匿名函数，它将传递给s…"}, {"id": "6844903545716604942", "title": "[转载]技术面试的时候该怎么样介绍自己？", "desc": "“不好意思，稍微打断一下，可以详细介绍一下自己的项目经历么？从入职时间开始，到离职，每一个项目的开始时间，团队人数，你负责的模块。” 不要紧张。 面试就是聊天，没底气的人，才会紧张。 当然对于很多没有工作经验的人来说，硬生生的编造工作经验是一件很吃力的事儿。可是既然选了这条路，…"}, {"id": "6976962366789386270", "title": "HTTP, HTTPS 和WebSocket 的相关介绍", "desc": "你一定听过以下三种协议，但是他们都是什么，各自的发展史，各自的特点是什么呢？今天就来简单的介绍一下，如有错误欢迎指出 HTTP协议 HTTPS 协议 Websocket 协议 1. HTTP 协议 1"}, {"id": "6844904056540921864", "title": "代码抗击病毒之-大厂面试必考题总结", "desc": "防抖函数原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。 深入理解防抖原理之后注意一定要深入理解，因为面试官可能会问你这么写的目的，如果不深入理解原理你可能会被问的哑口无言。 节流函数原理:规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多…"}, {"id": "6962743251665158181", "title": "前端百题斩【003】—— js中的基本类型和引用类型", "desc": "js中基本数据类型包含：Number、String、Boolean、Null、Undefined、Symbol；引用类型包含基本引用类型、包装类型、单体内置对象。"}, {"id": "6844904178330894343", "title": "：“兄弟，你的弹药来了！”🤝🤝🤝 面试总结·网络篇： HTTPS", "desc": "本文总结了我学习 HTTP 第一遍、第二遍的知识点，以自问自答形式作为面试复习脉络，梳理看似“杂乱” 的 HTTP（方便第二遍快速深入）。 如果您阅读本文相对吃力，可以参考我学习的途径进行系统的学习后再阅读本文。 HTTPS 它把 HTTP 下层的传输协议由 TCP/IP 换成…"}, {"id": "6844903684892000264", "title": "新手引导动画的4种实现方式", "desc": "前一阵子忙着找工作,面试过程中,碰到一个感觉比较有意思的问题,尽量多的列举出新手引导动画的实现方式, 昨天稍微总结了一下, 实现了4种.源码在最后,如果想直接看结果的,可以拉到最后去看. 在复制内容下面,加一层半透明的遮罩层. 比较平凡的实现方式,普普通通的,没啥特色. 优点:…"}, {"id": "6968840789304541192", "title": "前端百题斩【012】——js中作用域及作用域链的真面目", "desc": "作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。简言之作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。"}, {"id": "6844903589547098119", "title": "从前端工程师到前端架构师, 我们经历了什么?", "desc": "前端架构师, 听起来就是个很高大上的 Title, 每个初入行的前端工程师在面试时, 被问到你未来的方向是什么? 我们或许都会很顺口的回答, \"嗯, 朝着架构方向走吧...\", 那这个像是顺口溜的答案背后, 从身体到思维, 我们究竟经历了什么样的转变呢? 嗯.., 让我努力回忆…"}, {"id": "7000759457097449508", "title": "「前端刷题」25. Reverse Nodes in k-Group", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 leetcode-cn好像又挂了，用英文吧 题目 Given a linked list, reverse the nodes of a "}, {"id": "6844903775002443784", "title": "刷前端面经笔记（七）", "desc": "优雅降级(graceful degradation)：一开始就构建站点的完整功能，然后针对浏览器测试和修复。 渐进增强(progressive enhancement)：一开始只构建站点的最少特性，然后不断针对各浏览器追加功能。 突破浏览器的并发限制，同一时间针对同一域名下的请…"}, {"id": "6978668922291634206", "title": "TCP 与 UDP", "desc": "TCP-三次握手与四次挥手 三次握手——激动人心的会面 TCP的三次握手和四次挥手，就像小情侣之间从见面到分手的过程一样，很腻歪，但是很有必要。 先说说三次握手。参与三次握手的两个主体分别是客户端和服"}, {"id": "6928740564519436295", "title": "一线大厂前端面试题学习笔记", "desc": "堆栈内存和闭包作用域基本类型直接存，引用类型先开个堆往堆里面存；引用类型都是一个堆，每一个堆都有一个16进制的地址，能给我们直接访问（对象堆里面存储的是键值对，函数堆里面存储的是代码字符串——函数既是"}, {"id": "6893314344751202317", "title": "jsliang 求职系列 - 09 - 手写浅拷贝和深拷贝", "desc": "简单来说，Array、Object 这些复杂数据类型，它们开辟了一块自己的空间来存放数据，它们引用的是对应的地址。 因此，你日常的拷贝数组或者对象，是复制了它们的地址。怎么去操作就涉及到浅拷贝和深拷贝"}, {"id": "6844904121699401742", "title": "前端面试复习：网络篇，30岁的我找工作好难", "desc": "这篇主要写下 网络相关 的知识点。后续还会涉及：数据结构、js、css、Vue 等一些能归纳的知识块，不会面面俱到，起码为后续自己面试有个足够的准备。 每篇内容肯定不够细致，更多扩展的地方可以看如下的“参考文章”。 TCP（Transmission Control Protoc…"}, {"id": "6991630903856496671", "title": "前端Vue经典面试题汇总", "desc": "Vue 1、MVVM模式 基本定义 MVVM是Model-View-ViewModel的缩写,MVVM是一种设计思想,Model 层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；Vi"}, {"id": "6844903582370643976", "title": "如何轻松拿到大厂面试offer | 掘金技术征文", "desc": "朋友推荐去平安子公司一帐通去面试，没有初面，直接进入二面和三面，蛮简单的，过了，但放弃入职。下面谈谈面试题吧。 页面加载完成有两种事件，一是ready，表示文档结构已经加载完成（不包含图片等非文字媒体文件），二是onload，指示页 面包含图片等文件在内的所有元素都加载完成。(…"}, {"id": "6844904072403763207", "title": "记一天两次前端面试的经历（一）", "desc": "Today如果用一个字来形容就是——累，两个字就是很累，三个字真的累... 下午面完试本来觉得今天终于可以放松了，结果到了傍晚又来了一个电话约面试，疲惫的我赶紧推了个时间再约。 本以为会度过一个平静的夜晚，然后突然一个电话又到来，又是一次技术面，而且和下午的是同一个公司的不同部…"}, {"id": "6997936991811665928", "title": "前端面试题汇总(六)", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 watch 和 computed computed：是计算属性，并且computed的值具有缓存，只有他依赖的属性发生变化，下一次获取co"}, {"id": "6844903584891420679", "title": "谈谈 JavaScript 的作用域", "desc": "作用域，是指变量的生命周期（一个变量在哪些范围内保持一定值）。 全局变量，虽然好用，但是是非常可怕的，这是所有程序员公认的事实。 它能够自动执行 (function() { //... })() 里面包裹的内容，能够很好地消除全局变量的影响； 在 ES6 之前，是没有块级作用域…"}, {"id": "6903124232490713102", "title": "jsliang 求职系列 - 34 -Webpack 杂篇", "desc": "因为 Babel 和 Webpack 的 Scope Hoisting 篇幅太小啦，感觉没啥内容，发出来像划水，于是抽取出来了。 当然，文章是没有收益的，纯 share，佛系发文，随缘交友，欢迎来聊天吹水。 jsliang：大概知道将 ES6+ 代码，先通过词法分析和语法分析之…"}, {"id": "6891457912171200525", "title": "jsliang 求职系列 - 04 - JavaScript 变量", "desc": "只要块级作用域内存在 let/const 命令，它所声明的变量就绑定这个区域，不再受外部的影响。 在代码块内，使用 let/const 声明变量之前，该变量都是不可用的，所以叫 “暂时性死区”。 其原因是在同一个 block 中，let 在后面重新定义的，那么就不能在之前引用该…"}, {"id": "6911106984682995726", "title": "ES5&ES6重点知识点总结", "desc": "这是本人从开始学习JS一直到ES6记录的笔记中整理提炼出来的自己觉得比较重要的知识点。 基本数据类型的赋值操作是将栈内存中的数据完整的复制了一份，互相不影响。引用数据类型的赋值操作是将栈内存中的地址赋值，他们指向的是同一块内存空间，相互影响。 进入到代码执行环境以后检测到需要使…"}, {"id": "6844903590339821575", "title": "「面经：面试 ThoughtWorks | 掘金技术征文」", "desc": "我是一名web前端程序员，说真的TW的面试真的很有意思，也很有心意，让我在整个面试过程中不仅仅了解到自己的优势，并且看到了自己的不足之处，先不说面不面得上，面试的过程都是一次很不错的经历。 早在大学里，就对于TW有了解，技术大牛，极客思想，扁平化管理，出国经历。非常的吸引我这样…"}, {"id": "6844903509502984206", "title": "流形：我是如何面试一位前端工程师", "desc": "最近面试不少，发现团队同学面试的问题以纯知识点为主，提问方式很机械。对于现在前端面试总是被人吐槽面试与实际的工作完全不搭边，和面试官面试方式有很大关系。这篇文章主要是记录我是如何面试，以分享给大家作参考。希望对你有用。 很多面试者的简历中一定会写各种『精通』，这是非常有自信的表…"}, {"id": "6847902222081064974", "title": "【面试系列】前端高频手写面试题汇总", "desc": "当持续触发事件时，如果在设定的时间范围内频繁触发某个事件，则每次都会清空之前的计时，重新从0开始计时，直到在设定的时间范围内，没有事件触发，才会执行事件处理函数。以最后一次触发为准。 多次触发，以第一次触发为准，当持续触发事件时，保证在设置的时间范围内只调用一次事件处理函数。 …"}, {"id": "6844903864861196302", "title": "前端面试准备---Vue篇", "desc": "v-show为false时，通过js设置display为none;为true时，设置display:''; 这样为了让js设置的display属性失效。 v-if是通过js手动添加或删除dom元素。 所谓数据双向绑定，就是指视图层和数据层相互影响，比如input框输入数据，存储…"}, {"id": "6844904122731216910", "title": "2020 前端面试问题总结", "desc": "以下是这两年在面试与被面试总结下来的一些常见面试问题。下面的问题应该可以覆盖大部分前端不同等级的职位，后续会继续完善。 该总结分为 CSS、JS、ES5/6、通用经验、程序设计、JS库、前端测试、React、Vue、Webpack、Node 进行总结。文章只列出了问题列表，问题…"}, {"id": "6844903813799919623", "title": "阿里春招前端面试（1）", "desc": "这学期想找一份暑假实习，3.12走内推投了阿里，现在三面已经过去一周多，趁着假期记录一下。 可能是因为投的比较早，才投完简历过了三天电话就来了，约了第二天上午的面试。一面总的来说应该是简历初探+基础。 面试官听声音很年轻，首先让我做个自我介绍，然后根据简历上写的技能，项目以及比…"}, {"id": "6991261981890052126", "title": "2021 年下半年前端面试必备知识", "desc": "1、get 请求传参长度的误区 误区：我们经常说get 请求参数的大小存在限制，而post 请求的参数大小是无限制的。 实际上HTTP 协议从未规定GET/POST 的请求长度限制是多少。对 get "}, {"id": "6850037260381847560", "title": "2020字节跳动我总结了以下扎心❤面试题", "desc": "价值观和软技能。 面试是通过视频远程面试，不得不说疫情影响导致远程面试的确省了很多事，但是视频远远没有面对面更让面试者产生代入感。第一次用视频面试，不太会用导致很紧张，很大一部分原因是自己眼高手低，平时写代码的习惯使用编译器提示，但是没有提示的时候你会发现写不出来了，所以建议大…"}, {"id": "6844904081828347912", "title": "艰难一年经验美团前端面经分享", "desc": "我在 github 上新建了一个仓库 每日一题，每天一道面试题，欢迎交流。 时维七月，炎炎夏日，酷暑当头，而我已经在望京附近饶了半个小时。无论是天气，还是对于迟到以及面试的焦虑，都足以使我满头大汗了。 今天要去赶一个美团的面试，我恰好住在三元桥附近，查了地图离望京不太远，于是我…"}, {"id": "6844903781704941576", "title": "前端面试查漏补缺--(十) 前端鉴权", "desc": "本系列最开始是为了自己面试准备的.后来发现整理越来越多,差不多有十二万字符,最后决定还是分享出来给大家. 这种认证方式是浏览器遵守http协议实现的基本授权方式,HTTP协议进行通信的过程中，HTTP协议定义了基本认证认证允许HTTP服务器对客户端进行用户身份证的方法。 目前基…"}, {"id": "6844904151013392398", "title": "拼多多和酷家乐面试经历总结", "desc": "离职原因看我这篇文章吧：离开蘑菇街后，我最近的一些想法，然后不得不去找工作恰饭呀。 我目前面了五家公司：滴滴、蚂蚁、拼多多、酷家乐、字节跳动，拼多多和酷家乐基本已拿到 offer，蚂蚁二面完了，滴滴和字节即将三面，我先把我已经面过的面经先总结出来，其他的不管过没过，这周内我都会…"}, {"id": "6959804920362958879", "title": "「敲黑板」JS 类型转换及访问拦截", "desc": "前言 面试的时候，你会遇到许多奇奇怪怪的问题。就好像上学的时候，你在数学课本里学习了等边三角形的三个内角都是等于 60 度，你很少能见到卷子里直接问你等边三角形的三个内角是多少度。多数情况下这个知识点"}, {"id": "7000768485718491167", "title": "前端必刷手写题系列 [23]", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 33. 手写简单 Vue2.x 响应式原理 分析 首先响应式原理，请看官方文档，说的也是很清晰了，这个图非常好 基本原理就是: 每个组件实"}, {"id": "7000979623836123166", "title": "前端面试之代码输出结果(四)", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战。 Proxy对数组 说明 JS对象和数组属性 说明 Object.getOwnPropertyNames 可以获取对象的属性和原生内置属性"}, {"id": "6844904100354588679", "title": "高频面试手写代码满分答案！ （2w字）", "desc": "如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。针对引用类型我们需要实现数据的拷贝。 用 ... 实现 通常浅拷贝就能解决大部分问题，但是只解决了第一层的问题，如果接下去的值中还有对象的话，那么我们需要使用深拷贝。 对于 functio…"}, {"id": "6986902403492773925", "title": "ES6面试、复习干货知识点汇总", "desc": "作者：StevenLikeWatermelon  https://juejin.cn/post/6844903734464495623 近期在复习ES6，针对ES6新的知识点，以问答形式整理一个全面知"}, {"id": "6855649603497230350", "title": "互联网寒冬，一年经验字节跳动、虾皮、快手、拼多多前端面试总结", "desc": "年中的时候因个人原因，打算离开腾讯，到外面看看，投了若干简历，最终面试了字节跳动、虾皮、快手、拼多多这4家公司。有的喜有的忧，本文是对本次面试的一个总结。 快手是最早约的面试，在boss直聘上投完大概几天就约了。也是我本次第一家面试的公司。时间某个工作日的晚上8点，那天早早溜回…"}, {"id": "6874710268094611469", "title": "面试遇坎，每日一题我精选了这些题目与答案", "desc": "每日工作之余，我会将自己整理的一些前端面试题笔试题整理成每日一题，然后在公众号中推送给大家，每天仅需几分钟做一道题，经过日积月累，在换工作的时候一定能让你拿到一个比较好的offer。今天这篇文章是我将近期每日一题中比较好的题目及粉丝们分享的一些答案进行的整理，分享给更多的掘友，…"}, {"id": "6844903704663949325", "title": "面试官问：能否模拟实现JS的new操作符", "desc": "用过Vuejs的同学都知道，需要用new操作符来实例化。 那么面试官可能会问是否想过new到底做了什么，怎么模拟实现呢。 从这里例子中，我们可以看出：一个函数用new操作符来调用后，生成了一个全新的对象。而且Student和Object都是函数，只不过Student是我们自定义…"}, {"id": "6999985372440559624", "title": "TypeScript面试题及答案收录[不断更新]", "desc": "本文只是个人对# 钉钉前端面试题 中 TypeScript 模块的面试题，根据网络中的答案进行补充、整理和拓展。"}, {"id": "6844903763568771080", "title": "世界顶级公司的前端面试都问些什么", "desc": "在过去的几年里，我在亚马逊和雅虎面试过许多前端工程师。在这篇文章中，我想分享一些技巧，帮助大家做好准备。 免责声明：本文的目的并不是为你列出在前端面试中可能会被问到的问题，但是可以将其视为知识储备。 面试是一件很难的事情。作为候选人，通常会给你45分钟的时间来让你展示自己的技能…"}, {"id": "6911118171600584718", "title": "通俗易懂的理解函数节流和防抖", "desc": "1. 节流只在开始执行一次，未执行完成过程中触发的忽略，核心在于开关锁🔒。例如：多次点击按钮提交表单，第一次有效2. 防抖只执行最后一个被触发的，清除之前的异步任务，核心在于清零。例如：页面滚动处理事"}, {"id": "6873444336059711495", "title": "一年前端面试分享", "desc": "毕业于广东某双非大学，校招进入奇安信（前360企业安全）工作，刚刚工作满一年（不好找工作，但人在江湖，身不由己）。 leetcode刷题200+，基本能应付面试了。墙裂建议做做算法题，真的很爽，而且很锻炼编码思维。 360企业安全，奇安信,360之间的关系？为什么学前端？平时怎…"}, {"id": "7000238703322857502", "title": "前端面试之代码输出结果(三)", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战。 立即执行函数和作用域 说明 立即执行函数 IIFE,可以模拟块级作用域，即在一个函数表达式内部声明变量，然后立即调用这个函数。这 样位于"}, {"id": "6982533446304448543", "title": "新手入门第三课：2个文章进阶的知识点", "desc": "本节课主要带大家了解文章摘要和专栏的作用。这篇文章是本次活动的最后一课，希望大家有始有终，一起来学习！"}, {"id": "6844903678244028429", "title": "七年切图仔如何面试大厂web前端？（沟通软技能总结） | 掘金技术征文", "desc": "最近面了很多大厂的web前端岗位，都被刷了，在决定入职前，手里拿了几分待遇差不多的offer，后期的面试越来越顺，自己思考和总结了一下，原来面试也有好多技巧和方法可循，希望这些方法可以帮助到为找工作而且苦恼的你，可能每个人的方法不一样，不过至少可以提供一些参考。 先说明一下我的…"}, {"id": "6992370209961017380", "title": "前端面试题之性能优化高频面试题集锦", "desc": "前端性能优化基本上也是面试上必问的题,本篇文章将以性能优化为专题,罗列出面试中频率比较高的几道面试题."}, {"id": "6990646499638001701", "title": "周周特别篇：近期找工作+实习+字节前端提前批面试的心得分享", "desc": "刚结束字节提前批前端一面的我，本着可以咕咕但不能一直咕的想法，结合之前做的笔记和新鲜出炉的面试经验想和大家聊聊看我近期找工作+实习+字节前端提前批面试一面的心得，希望可以帮到和我一样在积极探索自己的你"}, {"id": "6902180301217366030", "title": "jsliang 求职系列 - 32 - Webpack 简单实现", "desc": "Webpack 的本质就是一个模块打包器，工作就是将每个模块打包成相应的 bundle。 如果小伙伴懒得敲，那可以看上面仓库的最终代码。 下面分 3 章尝试这个内容。 也就是说我们执行到 message.js，但是它里面的内容没法运行，因为 import 是 ES6 内容嘛。 …"}, {"id": "6997768769414103048", "title": "前端面试汇总", "desc": "js运行机制 js是单线程运行，同一时间只能做一件事情，这是因为js是浏览器脚本语言，用途是与用户互动进行DOM操作，单线程运行可以避免同时操作同一个DOM的矛盾问题 js的单线程中，将任务分为2种："}, {"id": "6844904089956925454", "title": "挑战一轮大厂后的面试总结 (含六个方向) - 框架(vue)和工程相关", "desc": "在去年底开始换工作，直到现在算是告了一个段落，断断续续的也面试了不少公司，现在回想起来，那段时间经历了被面试官手撕，被笔试题狂怼，悲伤的时候差点留下没技术的泪水。 这篇文章我打算把我找工作遇到的各种面试题（每次面试完我都会总结）和我自己复习遇到比较有意思的题目，做一份汇总，年后…"}, {"id": "6969407602362941453", "title": "LeetCode精选Top面试题之反转链表", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 数据结构中的链表还是很重要的，所以本次学习一下链表，做一下总结，"}, {"id": "6988059203705241636", "title": "前端面试题整理", "desc": "前端高频面试题整，还在整理中.............................................."}, {"id": "6955274909270409223", "title": "【周一】前端日常总结 | 创作者训练营第二期", "desc": "【魔王哪吒精选】希望能够帮助更多的小伙伴。加我😚即可交流问题（不是大佬，互相学习，创造良好的学习环境）。以下哪些你不懂呢？..."}, {"id": "6953527788532039694", "title": "面试准备：以接化发来迎接一套\"五连题\"的偷袭（下篇）", "desc": "1. 引言 万事开头难，简历已投。静待审判。这是面试准备的下篇，上篇主要讲了打鸡血，http,css，感兴趣的同学可以回顾一下。下篇着重于vue技术栈。我主要学习react。也学习过vue3.0,姑且"}, {"id": "6844903585650573326", "title": "不要再去背面试的知识点了", "desc": "前几次的面试，让我对于一个前端工程师需要掌握的知识体系有了一个全新的认识。之前自己在学习方面一直属于野路子，没有一个很规范的学习路径，往往都是想到什么就去学什么。而且基本都是处于会用的那种水平。并没有真正的做到知其然且知其所以然。面试基本都没有通过，我自己也明白了自己在那些方面…"}, {"id": "6844903497255616526", "title": "前端面试问题（持续更新）", "desc": "BFC: 提供一个环境，html元素会在这个环境中按照一定的规则进行布局。 ex: 例如浮动元素会形成bfc,浮动元素内部子元素主要受该浮动元素影响，但是两个浮动元素互相不影响。 这个可以理解为一个独立容器，里边规则不会影响到外边。 这些基本的比如比如哪儿是content大家都…"}, {"id": "6985439083728207885", "title": "vue常见面试题", "desc": "1.vue优点？ 答：轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十kb； 简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习； 双向数据绑定：保留了angular的特点"}, {"id": "6859351705453068295", "title": "跨域（CORS）产生原因分析与解决方案，这一次彻底搞懂它", "desc": "Cross-origin Resource Sharing 中文名称 “跨域资源共享” 简称 “CORS”，它突破了一个请求在浏览器发出只能在同源的情况下向服务器获取数据的限制。 本文会先从一个示例开始，分析是浏览器还是服务器的限制，之后讲解什么时候会产生预检请求，在整个过程中…"}, {"id": "7001012191281283086", "title": "Vue中.sync修饰符的作用", "desc": "在Vue中，子父组件最常用的通信方式就是通过props进行数据传递，props值只能在父组件中更新并传递给子组件，在子组件内部，是不允许改变传递进来的props值，这样做是为了保证数据单向流通。 但有"}, {"id": "6844904161872461831", "title": "「前端进阶」你真的懂递归吗？", "desc": "数据结构与算法系列文章第三弹来袭，如果没有看过前两篇的同学们请移步下面链接。 因为很多算法思想都基于递归，无论是DFS、树的遍历、分治算法、动态规划等都是递归思想的应用。学会了用递归来解决问题的这种思维方式，再去学习其他的算法思想，无疑是事半功倍的。 「无可奈何花落去，似曾相识…"}, {"id": "6850037275758329870", "title": "进大厂连载 11/15：1688 如何考察候选人", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 大家好，我是伐薪。我来阿里巴巴有 6 年多时间了，目前我负责了 1688 的一个子团队。最近这几年我也是一直忙于招聘，虽然招聘不能说多厉害，但是我现在还是…"}, {"id": "7000777360291135518", "title": "不重复的随机数", "desc": "分享题目 不重复的随机数 题目：输入正整数n，返回1-n的n个随机的，且不重复 例如：输入4 返回3 2 4 1 1. 基础版本 2. 数组下标方法 3. 优化后"}, {"id": "6844904019530350606", "title": "面试官：如果 http 响应头中 ETag 值改变了，是否意味着文件内容一定已经更改", "desc": "不一定，由服务器中 ETag 的生成算法决定。详见 #112 当编辑文件却未更改文件内容时，mtime 也会改变，此时 etag 改变，但是文件内容没有更改。 ctime：change time 指文件属性改变的时间戳，属性包括 mtime。而在 windows 上，它表示的是…"}, {"id": "6844903817696247816", "title": "记头条的一次笔试", "desc": "四月初收到了头条的笔试邀请，打开链接后发现跳到了牛客网。面试前心中很是忐忑，毕竟大厂，而自己面试经验又不多。 最后做下来，发现自己确实还有很多不足，尤其是手撸代码这一块。有些 js 方法就是记不住，比如日期获取年，下意识写了 date.getYear()，其实是不对的，应该是 …"}, {"id": "6844903607964270606", "title": "记一次XX前端面试", "desc": "距离自己被外派(俗称外包)出去，已经过了快五个月，工作的话，很闲。人啊，一定保持好的习惯，懒惰是会上瘾，日常摸鱼，怀疑人生，我是谁，我在哪，我要干什么。 中午吃饭的时候，收到了boss直聘的一条消息，XX发来一个信息，是一个前端职位，问我是否感兴趣，讲道理，我还是很诧异的，一是…"}, {"id": "6844904084546273294", "title": "疫情期间的4次远程面试+答案整理", "desc": "最近开始了久违的面试之旅，感觉金三银四感觉还是存在的。于是就想分享一下最近面试到的几家公司给大家，虽然也不是什么一线厂，但是问的问题感觉也有很多共通点，整理整理之后对前端面试也自信了许多。感觉把公司名字直接贴上来有点不是很尊重，就暂时隐去了。视频面试的题我面试完马上进行记录，电…"}, {"id": "6844904080163209223", "title": "你再不知道怎么解决跨域,我就真的生气了", "desc": "给大家讲一个故事吧。 在本渣两年前刚出来实习的时候，有一次去一家公司面试。 我：“跨域是浏览器同源策略造成；协议，域名，端口，三者有一不同就会产出跨域。” 我：“嗯....我只知道它们能解决跨域的问题，但我没有去实现过，具体我不知道。” 以上是本渣当时的一次真实经历，最后我没有…"}, {"id": "6987776819281805342", "title": "秋招保驾护航——js面试篇（上）", "desc": "秋招正在逼近！快点学起来，本文从js的常见面试题出发，结合基本经典的js书籍《JavaScript高级程序设计》、《你不知道的JavaScript》系列以及一些大神的博客进行总结归纳。"}, {"id": "6974379642295681060", "title": "😁前端需要了解的计算机网络知识， 这一专栏就够了！(图文并茂，点赞收藏哦！)", "desc": "这是我参与更文挑战的第11天，活动详情查看： 更文挑战 前言 公众号给npy的前端秘籍 加vx👉16639199716,拉你进群嗷~❤️ 面试需要我们会什么？"}, {"id": "6987940875611586568", "title": "有这套JS面经，还要什么自行车", "desc": "JS面试宝典 先说一句   掘友们好，这里是沉曦！一个前端的小学生。这是小学生沉曦在最近的面试当遇到的JS的面试题和一些准备，    简述浏览器中JS的事件循环机制？ 开发中经常遇到的难题 get和p"}, {"id": "6891097178064814088", "title": "jsliang 求职系列 - 03 - 闭包与柯里化", "desc": "本文讲述闭包及柯里化知识点。 在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量。 当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包…"}, {"id": "6880703639170744327", "title": "2020 秋招知识点总结 -- (  CSS篇 )   🏆 掘金技术征文|双节特别篇", "desc": "因为近期一直在忙着找实习和毕业的事情，没有时间整理出来。希望大家看完能够重温一下基础。 1. 介绍一下标准的CSS的盒子模型 ？ 2. CSS3优先级算法如何计算 ？不同选择器的权重 3. 如何创建块级格式化上下文、BFC有什么用 4. 清除浮动的几种方式 5. 说一下定位 6…"}, {"id": "6844903945828204552", "title": "2019大龄前端如何准备面试？", "desc": "今年毋庸置疑是找工作的寒冬，今年出来找工作的每一个同学 都是值得尊敬的。在寒冬季找工作，虽然略难，但是反过来看也会逼迫我们成为更加优秀的自己。 但是不管是旺季还是寒冬，有一些优秀的同学找工作还是挺顺利的。所以说还是得提高我们自己的硬实力。 今年前端很明显一个变化就是前端面试里除…"}, {"id": "6985047299466461192", "title": "前端面试基础 HTML 篇", "desc": "前端面试基础HTML篇，巩固一下前端的一些基础，互相交流一下，做一个综合的归纳，加深理解，后续会不断的更新"}, {"id": "6981694232088018957", "title": "这天,我被面试官刁难了......", "desc": "这天我被面试官刁难了，面试官针对vue 的底层原理对我进行了灵魂四连击，那么我们准备好之后，一起来轻松面对吧......"}, {"id": "6844903917625557000", "title": "OPPO外包面试完整记录", "desc": "今天是面试的第一天,记录一下.话说投简历投了不少天了,不知道为什么全是外包岗位.我本来开始没有想外包岗的,不过实在没有面试机会,于是就接了一个OPPO的外包岗. 我住在龙华这边,离后海那边非常远.大约八点50出发,到OPPO的时候已经10点半了.办公地点还是很高大上的,具体怎么…"}, {"id": "6844904013222117390", "title": "前端面试-手撕代码篇", "desc": "在前端面试有一个非常重要的环节，也是面试者最担心的一个环节。对“手撕代码”的考察需要面试者平时总结和积累（临时抱佛脚是不好使的），在这里笔者就自己如何攻破“手撕代码”环节总结了一些经验，希望能帮助你挑战高薪，迎娶白富美😄😄😄。 上面代码完全是笔者手敲，难免有错误，还望斧正…"}, {"id": "6962746235740487687", "title": "前端百题斩【004】—— js中的包装对象", "desc": "JS 的数值，布尔，字符串类型的变量，在一定条件下，也可以自动变成对象，这就是原始类型的包装对象。包装对象其实是一种特殊的引用类型，其与引用类型的主要区别在于生命周期。"}, {"id": "6985353728928776199", "title": "2021前端面试", "desc": "174道JavaScript 面试知识点总结（下） Vue中文社区 昨天、文章有许多金典阅读推荐建议点赞加收藏 来源 | https://github.com/CavsZhouyou/ 全篇篇幅较长，"}, {"id": "6904760231457193991", "title": "jsliang 求职系列 - 39 - HTML 系列总结", "desc": "在没有 CSS 的情况下，能够清晰的、有结构地表述这个页面的内容。 所以，构建一个页面结构，需要充分考虑到语义化。 &#x3C;header> 用来表示网页的头部。 头部信息区可以包含 &#x3C;nav> 导航栏等内容信息。 &#x3C;article>：表示一个完整的、自成…"}, {"id": "6999054350681112583", "title": "再说面向对象（3）", "desc": "一文全悉js 数据类型检测方式，typeof、instanceof、constructor 运算符、Object.prototype.toString.call 方法"}, {"id": "6844904198593576974", "title": "DD每周前端七题详解-第五期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6995088154000621581", "title": "这一次，不再为web页面生命周期烦恼", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 什么是Web页面生命周期？ 页面生命周期的主要事件 1. DOMContentLoaded CodeSandBox在线演示 DOMCont"}, {"id": "6988352110207172638", "title": "初学者必须知道的对于面试的技术记汇", "desc": "如何回答的一个技术记汇，或你对xxxx的理解 例如：你说一下对闭包的理解 答：1.xxx是什么 ​ 2.应用场景 ​ 3.优缺点 ​ 4.具体实现 ​ 5.还有没有更好的解决方案！ 一、闭包 闭包是由"}, {"id": "6844904008335753230", "title": "面试重点：webpack", "desc": "持续更新中... webpack是一个模块打包工具，可以使用它管理项目中的模块依赖，并编译输出模块所需的静态文件。它可以很好地管理、打包开发中所用到的HTML,CSS,JavaScript和静态文件（图片，字体）等，让开发更高效。对于不同类型的依赖，webpack有对应的模块加…"}, {"id": "6993718053062049805", "title": "【vue】生命周期详解", "desc": "1.创建vue实例流程 首先做一些初始化的操作，主要是设置一些私有属性到实例中 运行生命周期构子函数beforeCreate 进入注入流程：处理属性，computed，methods，data，pro"}, {"id": "6844903812566614030", "title": "记录近期面试题，面试总结", "desc": "BFC（Block Formatting Context）格式化上下文，是 Web 页面中盒模型布局的 CSS 渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。 内部的 Box 会在垂直方向上一个接一个的放置。 bfc 的区域不会与 float 的元素区域重叠。 bf…"}, {"id": "6844904181627781128", "title": "霖呆呆的中大厂面试记录及2年前端薪资对比(附赠学习方法)", "desc": "呆呆最近挺感慨的，因为从四月中旬开始准备面试，到面各个中小公司，大厂，距离今天已经将近2个月了。期间经历过不少事情，也带来了些许的成长。 那么这篇文章主要是说明一下这段时间自己在面不同规模的公司时的一些感悟，以及这个期间的学习和复习方法。我也会站在一个第三者的角度，将自身的优势…"}, {"id": "6947863151761162276", "title": "看过 100 份前端简历之后，汇总一下常见的问题", "desc": "由于工作原因，近几个月我看过 100+ 前端简历。 我看完了之后会给他们回复自己的评审建议，供他们参考。 一直都是零零散散的一对一回复，也是时候统一汇总一下常见问题。 一方面分享给大家作为参考，毕竟春招正旺。另一方我自己作总结和复盘。 很多简历都是 word 格式，我用邮箱自带…"}, {"id": "6986551174426001416", "title": "6月份历经大厂的笔试题 一（亲身经历总结）。", "desc": "身先士卒，替各位有需要的童鞋们去踩了一遍吭。看看大厂面试题都有哪些隐藏的门道在其中。 认真写文，认真内容，请不要轻易举报一个高质量图的作者。"}, {"id": "6844904094281236487", "title": "「吐血整理」再来一打Webpack面试题", "desc": "本文已收录在Github github.com/Geekhyt，欢迎Star。 从头发的浓密程度和干练的走路姿势我察觉到，面前坐着的这位面试官也是一把好手。我像以往一样，准备花3分钟的时间进行自我介绍。在此期间，我的目光被16寸的MacBook Pro所吸引，这次的自我介绍我做…"}, {"id": "6844903929705136141", "title": "如何写出一个惊艳面试官的深拷贝?", "desc": "最近经常看到很多JavaScript手写代码的文章总结，里面提供了很多JavaScript Api的手写实现。 里面的题目实现大多类似，而且说实话很多代码在我看来是非常简陋的，如果我作为面试官，看到这样的代码，在我心里是不会合格的，本篇文章我拿最简单的深拷贝来讲一讲。 本文由浅…"}, {"id": "7001122210265956383", "title": "『面试的底气』—— 设计模式之享元模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6998133757769318436", "title": "【前端 · 面试 】TCP 总结（一）—— 概述", "desc": "TCP 的全名是 `Transmission Control Protocol`，翻译过来就是 “传输控制协议”，是用来控制传输的。"}, {"id": "7005110255717744647", "title": "前端常见面试题总结（Javascript部分（一））", "desc": "JavaScript 1.介绍一下js的数据类型有哪些，值是如何存储的 javaScript一共有8种数据类型，其中有7种基本数据类型：Undefined、Null、Boolean、Number、St"}, {"id": "7006134523285110791", "title": "JS面试题之创建对象7种方式，原型链，call/apply/bind（一）", "desc": "今天开始，我将不定期的分享一些面试题，答题不是目的，目的帮助我们一起巩固JS的基础知识，让我们平时写代码的时候多一些选择。今天主要是3道题，是JS中比较基础的，也是面试常问的。 今日题目： 在JS里有"}, {"id": "6990533805786431524", "title": "与大厂面试官的高端博弈、顶级拉扯", "desc": "针对前端面试软性问题的套路与反套路 众所周知，程序员情商偏低，而这些软性问题，恰恰都具有一定欺骗性和吹牛皮成分在里边，对于演技不好的直男癌，简直就是天生克星。 其实不用太担心，软性问题往往就那几个，"}, {"id": "7002240375515512862", "title": "『面试的底气』—— 设计模式之桥接模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6995912475799453727", "title": "【前端 · 面试 】JavaScript 之你不一定会的基础题（二）", "desc": "event.target 指向触发事件流程的元素，且不会改变。this 指向的是当前所执行事件的注册元素。"}, {"id": "7002362205396008991", "title": "2021前端面试知识点总结之webpack篇", "desc": "webpack是什么？ 是一个用于现代javaScript应用程序的 静态模块打包工具。 当webpack处理应用程序时，会在内部构建一个依赖图，此依赖图对应影射到项目的每个模块，并声称一个或者多个b"}, {"id": "6994062019754197005", "title": "【前端 · 面试 】HTTP 总结（八）——  HTTP 强缓存", "desc": "强缓存中，当请求再次发出时，浏览器会判断目标资源是否“命中”强缓存，如果命中则直接从缓存中获取资源，不会再与服务端发生通信。"}, {"id": "7005108831143493663", "title": "前端常见面试题总结（HTML&&CSS部分）", "desc": "HTML&CSS 介绍一下你对浏览器内核的理解？ 浏览器最重要或者说核心的部分是“Rendering Engine”，可大概译为“渲染引擎”，不过我们一般习惯将之称为“浏览器内核”。负责对网页语法的解"}, {"id": "6844903809206976520", "title": "「中高级前端面试」JavaScript手写代码无敌秘籍", "desc": "1. 实现一个new操作符 它创建了一个全新的对象。 它会被执行[[Prototype]]（也就是__proto__）链接。 它使this指向新创建的对象。。 通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上。 如果函数没有返回…"}, {"id": "6870737289736093710", "title": "他写出了 Vue，却做不对这十道 Vue 笔试题", "desc": "请原谅我起了这么个浓浓营销号味道的标题。但这可丝毫没有夸大宣传，而是前端娱乐圈今日份的瓜—— 然后他自己也做错了（其中的某两道）。 Vue Core Team 的 @胖茶 40 分，可能说明带他的 mentor 不懂 Vue？不过他第二次做就拿了 90 分……这很赘婿逆袭啊。 …"}, {"id": "6986416221323264030", "title": "「自我检验」输入URL发生了啥？希望你顺便懂这15个知识点", "desc": "前言 大家好，我是林三心，相信大家在面试中被问过很多次“说一说在网址栏输入URL会发生什么？”，相信很多人都能倒背如流地答出所有步骤，但是单单会背可是不行的，其实这个问题包含了很多浏览器与性能优化的知"}, {"id": "6877712145757896717", "title": "前端必备javascript书籍测评【含红宝书和绿皮书】", "desc": "本书由 JavaScript 之父 Brendan Eich 与 ES6 规范首席作者 Allen Wirfs-Brock 联合编写，记录1995~2015共计 20 年的 JavaScript 演化经历。全书不仅讲解了大量语言技术细节层面的演进，更复盘了更高层面上规范制定与标…"}, {"id": "6934911314871451685", "title": "『前端优化』—— Vue中避免滥用this去读取data中数据", "desc": "在Vue中，data选项是个好东西，把数据往里一丢，在一个Vue组件中任何一个地方都可以通过this来读取data中数据。但是要避免滥用this去读取data中数据，至于在哪里要避免滥用，如果滥用会导致什么后果，本专栏将会一一揭晓。 在Vue源码中会把data中数据添加gett…"}, {"id": "7000904640552239112", "title": "前端面试每日 3+1 —— 第864天", "desc": "今天的知识点 (2021.08.27) —— 第864天 (我也要出题) [html] 你有使用过bgsound标签吗？说说它的作用 [css] 你有使用过resize属性吗？它有什么用途？ [js]"}, {"id": "6989932460184174606", "title": "vue相关面试点-2021", "desc": "style-scope作用及实现原理 1.什么是scoped 在Vue文件中的style标签上有一个特殊的属性，scoped。当一个style标签拥有scoped属性时候，它的css样式只能用于当前的"}, {"id": "6844904054301130759", "title": "阿里p6面经", "desc": "基本到这里一面就结束了，emmm，刚挂了电话，正好面试的部门有一个之前从扇贝离职去了的同事，面的还是很巧的同一个部门，大哥就跟我说恭喜一面过了。。哈哈，2面开始就没那么紧张了 设计一个通过拖拽，然后交换位置的组件，给思路就可以。 后面的几个问题不记得了，基本上都是和业务相关的，…"}, {"id": "6844904103617757192", "title": "阿里盒马&数农、腾讯WXG小程序团队 —— 小菜鸡自闭の面经😿（等HRing...）", "desc": "俺现在是一名大三学生，渴望能获得一份大厂的实习机会呜呜呜，所以不自量力的投了一下阿里跟腾讯。阿里是提前批就开始面了的。很多部门都面了一下下，面了啥也忘了哈哈哈哈。也多亏了提前批，让俺知道哪些地方还需要再补补。 阿里这边最终选择了盒马，盒马的面试官都好好，好和蔼，给了好多建议，没…"}, {"id": "6944557890497675278", "title": "三月面试复盘及思考", "desc": "想说说自己为何写这么一篇。笔者学历渣渣，虽然三年经验，不过都是小厂，虽然一心向往，不过此前基本没什么机会，也是赶着正好三年这个节骨眼上，试着去冲下大厂，相信很多小伙伴应该是跟我一样的想法。然后就接到了某大厂面试机会，嗯，最后失败了，不过觉得收获还是挺多的，也算是走出了迈向大厂的…"}, {"id": "6934554480633446414", "title": "前端|每天5道面试题（4）", "desc": "1、为什么JavaScript是单线程JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。JavaScr"}, {"id": "6883259053108264974", "title": "《面试必备算法》系列 滑动窗口入门", "desc": "说实话，第一次写算法的怪怪，有点紧张，毕竟是一个数学怎么也及不了格的小菜。 写之前有在想，怎么把算法写的比较有意思，就像大学高数课，说实话，老师讲的是真心无聊。。 如果不是被所谓的学业规则所限制，真的很难听下去。 设 M(x0,y0,z0) 为平面上的已知点，n=(A,B,C)…"}, {"id": "6992024705947893773", "title": "【自种树自乘凉】这才是真正的函数提升｜8月更文挑战", "desc": "这才是真正的函数提升！可能你知道函数会有函数提升，也可能你知道函数有块级作用域，但这并不表示你知道的一定是正确的，不信的话，请继续看这篇文章。"}, {"id": "7001005259426365470", "title": "菜鸟之Vue前端面试题 - Css", "desc": "CSS (布局，动画，适配) 介绍一下标准的CSS的盒子模型 如何居中div CSS3有哪些新特性？ （1） RGBA和透明度 （2） background-image （3）background-o"}, {"id": "6888226129435197447", "title": "大二逃课总结的1.2w字的计算机网络知识！扫盲！", "desc": "本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的《计算机网络》这本书。 为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。 1. 计算机网络概述 1.1. 基本术语 结点 （node） ：网络中的结点可以是计算机，集线器，…"}, {"id": "6995868536652431368", "title": "面试官最喜欢问☞JS、TS、ES6专题", "desc": "由于之前面试题篇幅有限，特又综合整理了些当下面试中常遇到的知识点，面试题及面经只是起到参考作用，圈定个大致的复习范围，以求得事半功倍。但每个面试官的执业经验，技术栈有所不同因而面试内容也会有所不同，以"}, {"id": "6844904069299961870", "title": "（近3万字，持续更新中）从面试前到终面，全面为您保驾护航", "desc": "在开始面试前，我们首先得了解应聘的岗位的要求，并做针对性的准备。 一份好的简历，给我们的面试加分不少。那怎样写出一份优秀的（至少是好的）简历呢？下面这些文章也许能够帮助到您。不需要每篇都看，参考一两篇即可！ 面试中第一个问题就是让我们自我介绍，准备好这个问题，能让面试官对我们有…"}, {"id": "6999456272697262087", "title": "进阶教程 11. 同源策略/跨域", "desc": "同源策略 ，什么是同源策略？ 同源策略(Same-origin Policy)构成及要求；跨域资源共享，跨域，CORS，JSONP，简单请求"}, {"id": "6844903745562607623", "title": "面试一二三", "desc": "然后我就开始问，js的一些问题了，我没有出什么闭包，原型链啊，作用域之类的问题，我就准备了，两题（不是手写，只考察思路），一个快速排序，一个背包问题（这又是楼主打自己脸了）快速排序还有一个人能大概的说出思路，背包，基本就gg了，然后楼主心想，出的难了，这涉及到，js数据结构与算…"}, {"id": "6971710781398351908", "title": "🔥迅速搞懂Vue路由中hash和history的区别？", "desc": "概念 路由就是SPA（单页应用）的路径管理器，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。传统的页面应用，是用一些超链接来实现页面切换和"}, {"id": "6844903781079973895", "title": "前端面试查漏补缺--(一) 防抖和节流", "desc": "本系列最开始是为了自己面试准备的.后来发现整理越来越多,差不多有十二万字符,最后决定还是分享出来给大家. 相同:在不影响客户体验的前提下,将频繁的回调函数,进行次数缩减.避免大量计算导致的页面卡顿. 不同:防抖是将多次执行变为最后一次执行，节流是将多次执行变为在规定时间内只执行…"}, {"id": "6996127305919627277", "title": "刷完这 20 道链表题，可能还是手撕不了大厂面试", "desc": "前言 某个男人 几乎刷完了力扣所有的链表题，我发现了这些东西。。。,而我作为一个致力称为厨师界最会写算法的前端，总得刷上一部分题，有那么一点发现吧，现在我们就来聊聊，菜鸡如我，发现了什么。"}, {"id": "6903663850051076110", "title": "jsliang 求职系列 - 36 - 前端工程化系列总结", "desc": "本系列参考 79 篇文章，总结出 6 篇文章，感谢小伙伴们的支持。 [x] 原理：将现有的 ES6+ 代码，先通过 词法分析 和 语法分析 之后 解析 为 AST，然后将这份 AST 转换 为我们需要形式的 AST，最后将这个 AST 再转换成 ES5 或者期望格式的内容。 […"}, {"id": "7001815521200963591", "title": "【面试必知】CSS3都有哪些新特性", "desc": "前几天面试被问到一个问题：CSS 3有哪些新特性，我整个人都不好了。心里MMP，嘴上xxx。 事实上，当前主要网站均已支持CSS 3。但还是要知道CSS3有哪些新特性有助于通过面试"}, {"id": "6844904150115827725", "title": "前端进阶高薪必看-HTTPS篇", "desc": "HTTPS 是在 HTTP 的基础上，利用 SSL/TLS 加密数据包。 非对称加密：发送方和接收方使用一对密钥，即公钥和私钥。一般私钥是保密不能被泄露的，公钥可以对外传播。我们可以用公钥加密私钥解密（数据加密） 也可用私钥加密公钥解密（签名--下面会解释） 如果找不到，浏览器…"}, {"id": "6999838407409025037", "title": "（建议收藏） React Hooks 源码解毒", "desc": "干货。旨在进阶的小伙伴更快一步突破。 同时也希望帮助大家面试…… 另外，可爱吧（咦，最近换画风了。。）"}, {"id": "6993096471792844813", "title": "图解算法 | LeetCode第 70 题爬楼梯问题", "desc": "假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？"}, {"id": "6844904122479542285", "title": "Vue3 的响应式和以前有什么区别，Proxy 无敌？", "desc": "大家都知道，Vue2 里的响应式其实有点像是一个半完全体，对于对象上新增的属性无能为力，对于数组则需要拦截它的原型方法来实现响应式。 这种时候，Vue 提供了一个 api：this.$set，来使得新增的属性也拥有响应式的效果。 但是对于很多新手来说，很多时候需要小心翼翼的去判…"}, {"id": "6890075489881948167", "title": "jsliang 2020 求职系列", "desc": "人生，找个工作好好做着，做到离职退休，是个奢侈的想法。 因为，总会有这样那样的问题，让我们在各个厂子间来回奔波。 求职，是每个打工人的痛点，是每个裸辞打工仔的噩梦。 Hello 小伙伴们好，我是 jsliang，一枚喜欢折腾、喜欢学习、乐于和各位小伙伴分享的小前端。jslian…"}, {"id": "7002217627149942798", "title": "读浏览器的工作原理和实践的一些思考", "desc": "这是我参与8月更文挑战的第6天，活动详情查看： 8月更文挑战 思考 浏览器渲染分为多个子任务，每一个子任务都有输入过程，处理过程，输出过程。 第一步dom树的构建 将html 标签构建成dom 树的结"}, {"id": "6844903858804621325", "title": "公司要求会使用框架vue，面试题会被问及哪些？", "desc": "如果你是一个已经在学习前端开发的初学者亦或者是一名在代码界纵横多年的程序员，那你一定知道现在最火的前端框架之一Vue.js。它相比于React与Angular上手更加容易，或许这也是很多初学者选择vue的原因之一。 我们看到很多招聘上都写着掌握vue开发项目，那么面试都会问什么…"}, {"id": "6991657729064452126", "title": "大厂面试中的编程题练习路线图", "desc": "大家好，我是山月，最近我很多公众号粉丝都在准备秋招的面试，前来咨询山月的同学更是络绎不绝。 经常有一个问题是：我如何进行编程题目的练习？山月再次总结一份关于手写代码的练习路线。 以下所有的手写代码都贴"}, {"id": "6990176227118022693", "title": "一位初级进阶中级 JavaScript 工作者的自我修养（二）", "desc": "前言 最近的前端面试已经卷的飞起了，从计算机原理、编译原理、数据结构、算法、设计模式、编程范式到编译工具、格式工具、Git、NPM、单元测试、Nginx、PM2、CI / CD 了解和使用。 这随便挑"}, {"id": "6992532580188815390", "title": "【前端 · 面试 】HTTP 总结（四）——  HTTP 状态码", "desc": "在服务端的响应结果中，信息头会包含一个叫 Status Code 的属性，其值为一个三位数的数字，我们将这个数字称为 HTTP 状态码。"}, {"id": "7002220080335454239", "title": "前端面试知识点汇总", "desc": "前端面试知识点汇总，常见的基础题，以及一些基础的浏览器网络知识。足够应付所有的的前端基础技术面，加油！"}, {"id": "6844904161830502407", "title": "蚂蚁、字节、滴滴面试经历总结", "desc": "最近两篇面试以及离职相关的文章不容错过哦。 今年面试还是比较顺的，面了五家公司(酷家乐、拼多多、字节、滴滴、蚂蚁)，都过了。 在文章里我不仅会列出面试题，还会给到一些答题建议，个人能力有限，也不能保证我回答都正确，如果有错误，希望能纠正我。 浏览器缓存分为强缓存和协商缓存，强缓…"}, {"id": "6905539198107942919", "title": "「2021」高频前端面试题汇总之CSS篇", "desc": "2021 高频前端面试题汇总之CSS篇，前端面试题汇总系列文章的CSS篇，长期更新，欢迎收藏、点赞！"}, {"id": "6981049565709336590", "title": "答对这些vue面试题,我是一个合格的中级前端开发工程师吗？", "desc": "面试题只是药引子,如何通过面试题总结出自己的由点到面的知识库才是最重要的。面试题由简入难，自己查漏补缺，作为面试官"}, {"id": "6988763249982308382", "title": "「面试题」TypeScript", "desc": "前几个星期在面试。typescript面试题总结。包含了50+道各种复杂的类型推导的题目。大家多多支持。"}, {"id": "7005783774847844388", "title": "【青训营】做面试题般回顾前端基础知识", "desc": "专题内容：面试题&基础知识 具体的面试题啥的 我一边整理一边放进来~ 主要适合 学习过前端知识但是感觉好多知识点还是不扎实/感觉开发网页没啥问题 一做面试题就有点懵逼的小伙伴们"}, {"id": "6917816624040902670", "title": "高级知识点（持续更新）", "desc": "Loader本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。因为Webpack只认识JavaScript，所以Loader就成了翻译官，对其他类型的资源进行转译预处理工作。 loader在module.rules中配置：test和use。test可接收一个…"}, {"id": "6997026855350075422", "title": "『面试的底气』—— 设计模式之发布-订阅模式（二）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6997010742553608223", "title": "零代码以“王者荣耀”为例解析设计七原则，助你面试拿“五杀”", "desc": "面试设计原则还在死记硬背？一文助你深入理解设计模式七大原则。 所有举例都是王者荣耀相关内容，为了增加阅读兴趣和方便掌握这个七大原则，我已经用尽毕生所学，进来看看吧~"}, {"id": "7003147050611130398", "title": "前端 每日一道面试题（5）", "desc": "哒哒哒！！！ 小伙伴期待的每日面试题又来了哟~ 阅读下面代码，我们只考虑浏览器环境下的输出结果，写出它们结果打印的先后顺序，并分析出原因，小伙伴们，加油哦 解析: 首先，我们要知道微任务会先于宏任务执"}, {"id": "6844904166591070222", "title": "『1W7字中高级前端面试必知必会』终极版 ", "desc": "如果两个 URL 的 protocol 、 port (如果有指定的话)和 host 都相同的话，则这两个 URL 是同源。 JSONP的原理是：静态资源请求不受同源策略影响。实现如下： CORS：跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让…"}, {"id": "6870006161811996680", "title": "前端面试系列【011】 - 你了解哪些 Vue 性能优化方法", "desc": "这个命题也是非常广，下面就例举一些在日常工作中常用的一些 Vue 代码层面的优化手段。 相信这个操作大家在日常工作中也是经常用到的。 事实上，在日常的开发中，很多组件并不需要每次都初始化，所以，为了优化性能，我们希望能将组件进行持久化，维持它的状态，防止每次都重新初始化。 而 …"}, {"id": "6975508732826353678", "title": "算法，从简单刷起~3. 无重复字符的最长子串", "desc": "算法，从简单刷起~、流程图、调试代码、尝试、leetcode、3、无重复字符的最长子串、双指针、滑动窗口、迭代"}, {"id": "6945874605014220807", "title": "关于初级前端工程师在面试中会遇到的一些面试题（一）", "desc": "1. 父子组件的生命周期加载渲染 要了解父子组件的生命周期加载渲染。首先，我们来谈谈组件的生命周期 在创建VUE实例之后，都会经过一段初始化过程，即数据监听、编译模板、挂载DOM、更新DOM等。 在声明周期中，有一些生命周期钩子的函数，用来在不同的加载阶段添加代码书写。 已完成…"}, {"id": "6899316658377555976", "title": "前端手写题目（熟食）- 面试真题", "desc": "接上一篇文章， 专科前端生存之路 ，最后的面试题的答案。 以下都是近期（10、11月）本人面试真题。整理出来，有多种实现方式，下面只是我的实现方法。可灵活参考。 以上是面试的几个公司的笔试题目，下一篇文章分享各个公司的面试题目。"}, {"id": "6844904056159223822", "title": "前端面试基础知识点总结", "desc": "引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体 推荐使用Object.prototy…"}, {"id": "6844903496756494344", "title": "CSS-position:static/relative/absolute/fixed定位", "desc": "对象遵循标准文档流中，top, right, bottom, left 等属性失效。 relative（相对定位） 对象遵循标准文档流中，依赖top, right, bottom, left 等属性相对于该对象在标准文档流中的位置进行偏移，同时可通过z-index定义层叠关系…"}, {"id": "6844904132482957325", "title": "[ 面试系列 ] - 九：ES6 语法知道哪些，分别怎么用？", "desc": "既然要回答问题，那首先要搞清楚的是，这个问题问的是什么。那么对于标题的这个问题，我们首先需要搞清楚的就是：ES6 是什么？ 目前来说，更流行的是第二种说法，所以也有 ES7、ES8、ES9...等说法。当然，置于为什么 ES2015 标准就是 ES6 的问题，这里就不再继续展开…"}, {"id": "6896243562225401869", "title": "[核心概念] 一文说透重排和重绘（Reflow/ Repaint）", "desc": "首先，Reflow/Layout[重排]和Repaint[重绘]不是一回事。他们是浏览器渲染过程的两个环节。 简单来说你能看到的浏览器上面的画面不可能是一成不变的吧，那还看个啥，那么浏览器画面不停变化其实就在不停重新渲染。(所以这两词都有 're' 前缀，表示重新..) 那么 …"}, {"id": "6945678850579759135", "title": "一位平凡人的春招面经汇总（前端）21届", "desc": "背景：普通本科(二本)，对于学历不是特别好的我，在春招选择了海投简历，大大小小的公司投了大概有100多份了，但是收到面试和笔试的就只有20多家，在boss发消息基本是1/5的回复率，但是我想说的是，被拒了没事，海投就行了，总会有大厂会给机会的。 大二接触前端，大三下开始系统性学…"}, {"id": "6844903589077352462", "title": "\"双非\"应届生校招如何获得大厂青睐?（内附前端大厂面经）|掘金技术征文", "desc": "笔者从17年的2月份开始准备春招，其中遇到不少坑，也意识到自己走过的弯路。故写了这篇文章总结一番，本文适合主动学习的，对自己要学的课程不明确的，对面试有恐惧症的...等将来打算从事技术岗位的同学们。 为什么要准备校招？社招不一样能够进入大公司吗？对于一些不懂校招这个概念的人来说…"}, {"id": "6844903519082774541", "title": "程序员常见面试之 计算机网络 知识点小结", "desc": "悉心整理校正了计算机网络的面试常用知识点，文章图文并茂，通俗易懂，希望对大家有所帮助。 TCP提供面向连接的、可靠的数据流传输，而UDP…"}, {"id": "6844903845559009287", "title": "悲喜交加的前端面试", "desc": "在如此恶劣的这经济大环境下，勇敢的试水还在招聘的公司，将近一个月的时间，四家公司的面试，有喜有悲，让我不得不感叹，大城市的房价真的是太贵了，愿此时此刻在读这篇文章的你能够找的满意的工作。 答：说明白堆栈。 答：递归。 答：不是。多层就不是了。 答：权限控制。 二面主要就是聊了聊…"}, {"id": "6844904087566319630", "title": "前端基础——HTML、浏览器篇", "desc": "1. HTML 标签语义化 2. 跨域 同源： 协议+域名+端口 三者相同。 同源策略是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。 3. cookies & localStorage & sessionStorage&index…"}, {"id": "6971224925910777887", "title": "Ajax原生操作和Node js的操作?", "desc": "AJAX 技术主要依靠 XMLHttpRequest (XHR) DOM 对象。它可以构造 HTTP 请求、发送它们，并获取请求结果 Ajax原生操作的步骤:"}, {"id": "6844903977289678861", "title": "js语言中那些让你抓狂又容易混淆的概念(建议收藏)", "desc": "传参不一样，splice的入参是 start & count。而slice的入参是start & end，但是记住end是开区间 count是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素 call和apply是一对孪生兄弟，而bind是这对兄弟的”经纪人“。c…"}, {"id": "6985386472702476302", "title": "JavaScript基础篇01：数据类型与数据类型判断", "desc": "JS有哪些数据类型？原始值和引用值的区别？各个数据类型有什么注意点？数据类型之间的转换规则是什么？判断数据类型有哪些方式？"}, {"id": "6934998499884793864", "title": "2020小总结", "desc": "shift():从集合中把第一个元素删除，并返回这个元素的值。 pop():从集合中把最后一个元素删除，并返回这个元素的值。 任何一个不满足上述要求的请求，即被认为是复杂请求。一个复杂请求不仅有包含通信内容的请求，同时也包含预请求（preflight request）。 复杂请…"}, {"id": "6952067810356887582", "title": "[实现一个new关键字] | 刷题打卡", "desc": "题目描述实现一个new关键字思路分析new关键字用来创建对象。那么创建对象时都做了些什么创建了一个对象确定this的指向执行构造函数返回这个对象代码实现总结需要理解原型链，这部分太复杂，给出两幅图自行"}, {"id": "6880781683553992712", "title": "「网络协议」对TCP-IP不再迷茫", "desc": "面试时总能经常被问到TCP的三次握手和四次挥手，但是TCP真正是什么却没有深刻的去研究。本章主要是偏向基础，对于深层的知识并没有体现的过多，主要考虑的还是本篇文章主要面向的并不是网络工程师。所以如果对整体的TCP感兴趣可以自行找书籍阅读。 IP是TCP/IP协议中最为核心的协议…"}, {"id": "6975903329603813389", "title": "JS实现树的深度优先搜索和广度优先搜索", "desc": "JS实现树的深度优先搜索和广度优先搜索 前面我们讲了二叉树的搜索，二叉树的搜索可以有很多扩展，可以扩展成树的搜索，图的搜索，图的搜索可以扩展成爬虫的逻辑。今天我们就了解一下树的搜索。 搜索分为两种，一"}, {"id": "6922080402941149198", "title": "闭包机制及浏览器垃圾回收机制", "desc": "1、记住这句话2、练习题3、GC（浏览器垃圾回收机制）（1）引用标记（2）引用计数有一个占用，计为1，当为0的时候，会被清除4、堆内存释放5、栈内存释放6、闭包7、练习题"}, {"id": "6844903921899536392", "title": "什么是 JavaScript 基础", "desc": "作为面试官，我们经常考察候选人的 JavaScript 基础，从而决定是否录用这个人。那么对于一个开发者，哪些东西算JavaScript基础，什么叫做基础好呢？ JS 中数据类型主要分为基本类型和引用类型（也就是对象）。这里重点关注一下对象。 代码中 Persion 就是一个构…"}, {"id": "6951689692131622919", "title": "HTML常用标签", "desc": "什么是HTMLHTML （Hypertext Markup Language）即超文本标记语言。HTML用于网页的制作，被浏览器解释后可以呈现出各式各样的精美页面。常见标签： a、form、input"}, {"id": "6844903876873699335", "title": "InterviewMap —— Javascript （五）", "desc": "不想C语言那样，拥有原始底层的内存操作方法如 malloc free。js使用的是自动垃圾回收机制，也就是说js引擎会自动去判别变量的使用情况来自动回收那些不使用的内存块。 即使是使用高级语言，开发者对内存管理也应该有所了解（至少要有基础的了解）。有时，开发者必须理解自动内存管…"}, {"id": "6910919243102224391", "title": "不一样的函数防抖和节流", "desc": "浏览器的 resize、scroll、keypress、mousemove 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。 。。。。。。 详细：假设我们规定500MS触发多次算是高频，只要我们检…"}, {"id": "6847902224203546632", "title": "【前端字典】 JavaScript 原型链", "desc": "在JavaScript中，构造函数指的是用new关键字调用的函数。 实例化是创建一个变量的过程，而通常我们调用构造函数来实例化就是创建变量的同时并做一些初始化的工作。由构造函数实例化出的变量被称为实例对象。 构造函数的原型是一个对象，要理解构造函数的原型得从它的设计初衷说起，因…"}, {"id": "6928654937693880327", "title": "如何解决移动端 Retina 屏 1px 像素问题？", "desc": "1、伪元素+transformscaleY(.5)2、viewport+rem"}, {"id": "6844903993324339207", "title": "JavaScript 基础知识梳理", "desc": "2. 数据类型 JavaScript 中有\b基本类型和引用类型两类共七种数据类型。 使用var声明变量但未初始化，或初始化其值为undefined。 空对象指针，用于在将来保存对象。这样只要检查变量是否等于null，就知道这个变量内是否已经保存了一个对象的引用。 ECMAScr…"}, {"id": "6881984985805701127", "title": "Day1/100", "desc": "1. 查找数组元素位置 2. 数组求和 3. 移除数组中的元素 题目描述：移除数组arr中的所有值与item相等的元素，不要直接修改数组arr，结果返回新的数组。 4. 添加元素 题目描述：在数组arr的末尾添加元素。不要直接修改数组arr，结果返回新的数组。 题目描述：在数组…"}, {"id": "6917449378458238989", "title": "【Daily Interview】- 23 盛最多水的容器", "desc": "结合这个，我们就可以用双指针的方式来解答本题。"}, {"id": "6906029886977081357", "title": "「复习大纲03」-菜鸡前端知识体系整理", "desc": "updated ，发生在更新后，当前阶段Dom已完成更新。 如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据。也算是子组件向父组件传值的一种。 eventBus 又称为事件总线，在Vue中可以使用它作为沟通的桥梁，就像是所有组件共用相同的事件中心，…"}, {"id": "6844903538330435597", "title": "回归本源：JavaScript 之中的值和引用", "desc": "首先，对于每一个JavaScript开发者来说，值(value)和引用(reference)的定义，一般是从一些bug被引出的，而且在面试中也经常会被问到。这篇文章中也将简单的涵盖这些基本概念。 第一个例子是 false 而第二个例子是 true。你答对了么，我们来看看这是为什…"}, {"id": "6844903869877583885", "title": "前端面试问题整理 第一部分", "desc": "1、static（静态定位）：默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。 2、relative（相对定位）：生成相对定位的元素，通过top,bottom,left,right的设置相对于其正常（…"}, {"id": "6847902215739441160", "title": "浏览器缓存知识点梳理", "desc": "缓存是性能优化中非常重要的一环，浏览器的缓存机制对开发也是非常重要的知识点。接下来以三个部分来把浏览器的缓存机制说清楚： -区别是，强缓存不对发送请求到服务器，但协商缓存会。 当协商缓存也没命中时，服务器就会将资源发送回客户端。 是运行在浏览器背后的独立线程，一般可以用来实现缓…"}, {"id": "6844904181849915400", "title": "web前端面试经验：一个面试官角度的Yahoo面试", "desc": "Nicholas C. Zakas 谈怎样才能成为优秀的前端工程师： 昨天，我负责了Yahoo!公司组织的一次面试活动，感触颇深的是其中的应聘者提问环节。我得说自己对应聘者们提出的大多数问题都相当失望。我希望听到一些对在Yahoo!工作充满激情的问题。在昨天的应聘者中，只有一个…"}, {"id": "6844903587584180231", "title": "浅显易懂之this指向", "desc": "对于前端开发er,往往在学习javascript的时候，会遇到一些疑惑点。这些疑惑点往往集中在以下一些方面。 ... 不要害怕，每个人刚开始接触一样东西的时候，都会遇到一些困惑。 成长的过程，无疑就是发现问题，进而解决问题，最后总结问题。 今天想给大家分享下javascript…"}, {"id": "6919833191142391816", "title": "Vue.js进阶之Vue源码解析（上）", "desc": "阅读Vue源码仅仅只是为了面试吗？我想，大概很多人都会这么觉得吧！但我并不这么想...为什么呢？（ps:后续再慢慢讲述...）当然，当你选择去阅读Vue源码也真的是需要一定的勇气，为什么会这么说？如果自己花了时间但却没有一点收获，心情肯定是失落的。好在功夫不负有心人，这段时间通…"}, {"id": "6943484079694151710", "title": "「面试」-浏览器缓存相关", "desc": "浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图： 浏览器每次发起请求，都…"}, {"id": "6844903946020978701", "title": "关于面试的思考", "desc": "年初公司出现变动，开始隐约感觉气氛不对，尤其是员工陆续离开，而人力完全放任自流的态度不免让人心生疑虑，那时候开始思考我会不会离开。后来一系列的事情让离开的念头逐渐清晰起来，最后变成了坚定的选择。 有了离开的想法后，我当时首先面对的问题不是后面提到的面试准备、规划之类的东西，什么…"}, {"id": "6844903615501451278", "title": "前端笔记 - vue2.x data初始化以及Observer", "desc": "vue的data属性是在实际使用中最常见的了，以及大家老生常谈的双向绑定。本篇文章介绍了data属性的初始化以及双向绑定中model绑定部分。 在我们使用vue的时候data可以有两种方式定义，一种是用函数返回一个对象，另一种是直接定义一个对象。 1、在initData函数中，…"}, {"id": "6847902222509047815", "title": "《前端面试总结点线面》之点-React篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 单一数据源： 整个应…"}, {"id": "6979932640438829093", "title": "专题：浏览器工作原理面试相关", "desc": "1.一次完整的http服务过程 了解即可： 2.浏览器是如何对页面进行渲染的？ 第一步:向web服务器发送请求之后，会返回index.html页面中的源码 第二步：浏览器分配一个主线程，自动‘从上而下"}, {"id": "6885374194071109639", "title": "「面试官问」模拟实现几个数组方法", "desc": "同样是前端面试高频的一个问题，我们就取用到最多的map和forEach方法来实现一下，附带一下reduce，just面试题目分享，木得深度昂。来首最近很喜欢的一首bgm：思念是一种病 这个点就不扯多了，只是最近看到了太多关于这个的讨论，自己其实也有一些想法，标题党从争取浏览希望…"}, {"id": "6998172267939102734", "title": "壹题汇总每日五题 | 2021.8.19 有疑问", "desc": "第 26 题：介绍模块化发展历程 【待了解】 第 27 题：全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？ 【看不懂？】 const和let会生"}, {"id": "6844903602956288007", "title": "37个JavaScript基本面试问题和解答", "desc": "尽管typeof bar ===“object”是检查bar是否是对象的可靠方法，但JavaScript中令人惊讶的问题是null也被认为是一个对象！ 因此，对于大多数开发人员来说，下面的代码会将真实（而不是错误）记录到控制台： 只要知道这一点，就可以通过检查bar是否为空来轻…"}, {"id": "6847009772311429133", "title": "从负一步开始的前端性能优化", "desc": "两年前，我曾经写了一篇关于性能优化的文章, 在里面提出性能优化要先对页面性能进行记录，而且要按照页面访问的整个流程分步骤进行优化。 两年过去了，我又有了一点新的思考，在阿里也学习到了一些新的优化方法，在这里分享给大家。 关于性能优化的时机，其实可以更早，比用户输入url更早，即…"}, {"id": "6900716607685787656", "title": "「前端厚说」HTML头部高频面试题及参考答案", "desc": "web标准是网页制作的标准，它不是一个标准，是一系列标准，大部分的标准由W3C制定，还有一部分标准由ECMA制定。web标准由结构（html,xhtml），表现（css）,行为（js）三个方面构成. 指令也是一个 DOM 节点。它在 DOM 树中位于 之前。我们不会触及那个节点…"}, {"id": "6918691835263221773", "title": "V8垃圾回收 ", "desc": "执行环境会找出那些不再继续使用的变量，然后释放其占用的内存。 此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。 无法处理循环引用的事例。两个对象被创建，并互相引用，形成了一个循环。它们被调用之后会…"}, {"id": "6844904205946208270", "title": "x数之和算法题怎么解", "desc": "不知不觉，近两年大厂将算法作为衡量候选人的重要指标。如果算法不过关，很多大厂会将你拒之门外。如果你想提升自己的基本功或今后准备进入大厂，那么开始觉悟准备好头秃吧 :)，让我们从这篇算法题开始。 刷过Leet-code（力扣）的同学知道，两数之和是开启算法的第一题，比较简单。但遇…"}, {"id": "6847902224358588424", "title": "进大厂连载 10/15：天猫精灵如何面试候选人", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 天猫精灵 IoT 平台的前端及客户端开发。 第一个是 ToC 的工作，关注用户交互技术、用户体验、用户规模；另一个的目标是，把我们积累的技术 ToB 赋能…"}, {"id": "6844903521263812615", "title": "[面试∙网络] TCP/IP（一）：数据链路层", "desc": "这一系列的文章主要是为一般的、非专业开发岗位(如移动端)的工程师准备，一方面可以对网络的基本知识有基本的了解，另一方面不至于面试中被问到相关问题时束手无策。知识以 TCP/IP 协议簇为主，也会有应用层和数据链路层的简单介绍。 文章内容不会很难，也不会过多讨论各种算法，目标是以…"}, {"id": "6844904087272554510", "title": "面试题及日常小结（一）-基础篇", "desc": "撸代码之余，偶尔刷刷面试题，回顾下基础的知识点也是极好的。个人通过看大佬文章，也整理了下基础的面试题，同时也夹杂了一些工作中遇到的小问题和方法。打算写成小系列文章做个记录，给自己和有需要的童鞋做个参考。 本篇是系列的第一篇，主要涉及一些基础知识。 BFC是块级格式化上下文，是一…"}, {"id": "6844903581192028173", "title": "前端面试题总结——综合问题", "desc": "1.页面从输入URL到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好） 2.发送至DNS服务器并获得域名对应的WEB服务器IP地址； 3.与WEB服务器建立TCP连接； 4.服务器的永久重定向响应 5.浏览器跟踪重定向地址 6.服务器处理请求 7.服务器返…"}, {"id": "6914169237388935181", "title": "[每日一题]requestAnimationFrame是需要这样理解的？", "desc": "2020.12.23 日刚立的 flag，每日一题，题目类型不限制，可以是：算法题，面试题，阐述题等等。 在JS中，我们可以使用 setTimeout 和 setIntarval 实现动画，但是 H5 的出现，让我们又多了两种实现动画的方式，分别是 CSS 动画（transit…"}, {"id": "6844903604990509063", "title": "由Object.prototype.toString.call( )引发关于toString( )方法的思考", "desc": "至于为什么要使用该方法确定一个对象是否为数组，只需了解下关于typeof和instanceof的数据类型判断即可。 这里主要想谈一谈关于toString()方法的一些思考。 在ECMAScript中，Object类型的每个实例都有toString()方法，返回对象的字符串表示，…"}, {"id": "6979601349264539655", "title": "【编程题】红灯亮三秒，绿灯一秒 黄灯两秒 交替进行", "desc": "涉及到时间，那应该就需要用到setTimeout方法，我们可以让程序三秒后打印红灯,一秒后打印绿灯,两秒后打印黄灯。 直接执行这三个方法会发现，不是按照3秒后打印出red再过1秒打印出green再过2"}, {"id": "6844903917642334222", "title": "鹅厂初面总结", "desc": "今天总结一下鹅厂初面的经历，是远程视频面，本来最晚面试时间是七点的，但因为我还在实习晚上六点半才下班，面试官帮我延迟到了八点，挺不好意思的。总的来说面试问的问题不难，面试官也挺好的，虽然面试前做好了被虐的准备，但是真正面试的时候，心态没有摆正还是紧张了，回答的不好，秋招首战算是…"}, {"id": "6844903583637323790", "title": "2018三月个人前端社招面试经验总结", "desc": "社招面试相比校招面试，我个人觉得是并不太那么的看重基础知识了(基础知识还是非常重要的)。社招一般没笔试，更多的是聊你之前做过的项目。基本上问问几个问题就知道你是什么水平了。 应聘公司：拉勾网上发来的面试邀请，坐落于上海陆家嘴某金融大夏，环境非常高大上，面试官也还不错。面试的岗位…"}, {"id": "6991073952227393573", "title": "前端经典面试题（H5、js、webapi、js高级）", "desc": "···················H5、js、webapi、js高级(面试题汇总)················"}, {"id": "6973982725493506085", "title": "会话跟踪技术：Cookie 和Session", "desc": "会话跟踪是web程序中常用的技术，用来跟踪用户的整个会话。 常用的会话跟踪技术是Cookie 和Session。 Cookie 通过客户端记录用户信息，Session通过服务端记录用户信息 ! 简单来"}, {"id": "6991126458022232101", "title": "React 相关问题", "desc": "1.请简述 React 16 版本中初始渲染的流程 jsx 转换成 react 元素 babel-react 会将jsx 转换为 React.createElement 函数调用 React.crea"}, {"id": "6991171184662413325", "title": "2021春招各个大厂笔试题（百度，滴滴，携程，友塔游戏等）", "desc": "笔试题目描述忘记了，请见谅，有错误可以指出，有时间改，做个自我介绍吧，17年毕业，毕业于江西师范大学，现就职于某公司的研发中心"}, {"id": "6982390786990014477", "title": "call和apply的那些事", "desc": "js基础apply和call 二者用途都更改 this 的指向。 使用效果完全一样，有和区别呢 自定义实现你学会了吗"}, {"id": "6942796562464505863", "title": "前端面试题自检 JS CSS 部分 ", "desc": "限于这是个自查手册，回答不那么太详细，如果某个知识点下面有链接，自己又没有深入了解过的，理应点击链接或自行搜索深入了解。 各种内置对象类型，除了 Date 原型上实现了 valueOf，返回的是形如：1536416960724 的从 1970 年 1 月 1 日午夜开始计的毫秒…"}, {"id": "6987942524014837796", "title": "前端面试必会计算机网络基础", "desc": "计算机网络 先说一句   掘友们好，这里是沉曦！一个前端的小学生。我们在面试前端时有的时候也会遇到计算机网络的提问，为了不被痛宰可怜的薪水，所以多些准备总是好的    目前存在的两种网络分层模型： O"}, {"id": "6904079136299024398", "title": "「中高级前端面试」手写代码合集(二)", "desc": "本合集旨在巩固前端工程师核心基础技能，从各大小厂高频手写题出发，对常见的模拟实现进行总结。更详尽的源代码放在 github 项目上，长期更新和维护。 PS：文章如有误，请不吝指正。您的 「赞」 是笔者坚持创作的源动力。 比如这样一个场景 👉：随着项目的迭代，接口的结构需要变动…"}, {"id": "6977224663608852488", "title": "你要知道的前端性能优化总结", "desc": "什么是前端性能优化？ 通常来说我们说的前端性能优化是指：从用户开始访问我们的网站到整个页面完整地展现出来的过程中，通过各种优化策略和优化方法，让页面加载的更快，让用户的操作响应更及时，给用户更好的体验"}, {"id": "6844903781079973902", "title": "前端面试查漏补缺--(二) 垃圾回收机制", "desc": "本系列最开始是为了自己面试准备的.后来发现整理越来越多,差不多有十二万字符,最后决定还是分享出来给大家. JavaScript 具有自动垃圾收集机制（GC：GarbageCollecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。开发人员不用再关心内存使用问…"}, {"id": "6970874451567050783", "title": "『前端大白话』之“防抖和节流”", "desc": "面试经常被问到防抖和节流的问题，今天就用大白话和大家聊聊「防抖和节流」到底是个啥。 为啥会出现这么两个概念？"}, {"id": "6844903725442531341", "title": "[译] 在JS中，如何让(a===1 && a===2 && a === 3)(严格相等)的值为true？", "desc": "我们先简单了解\u001c这道JS经典问题, 然后再解决它的扩展问题。 如果你已经了解过这个问题并且知道如何解决这个JS谜题(是的，只是一个谜题，我并不想在生产代码中看到这样的用例) , 那你可以直接跳到下一节，阅读它的扩展问题。关于这个问题在reddit上有相关讨论， 下面是我看到最有…"}, {"id": "6844903592587952135", "title": "深入深入再深入 js 深拷贝对象", "desc": "对象是 JS 中基本类型之一，而且和原型链、数组等知识息息相关。不管是面试中，还是实际开发中我们都会碰见深拷贝对象的问题。 顾名思义，深拷贝就是完完整整的将一个对象从内存中拷贝一份出来。所以无论用什么办法，必然绕不开开辟一块新的内存空间。 1. 迭代递归法 这是最常规的方法，思…"}, {"id": "6899211700319944717", "title": "jsliang 求职系列 - 25 - 计算机网络基础", "desc": "缝缝补补又三年，考啥添加啥，零散的知识点。 现在这块零散的知识点有点少，但是还是写写，后面跨域啥的会用到点。 详细就不说了，这个要拓展起来，篇幅能写成一本书。 大学时候学这个，被教授饶得头大，怕了怕了。 我是一个用户，我访问不了某网站，但是我能访问一个代理服务器。 这个代理服务…"}, {"id": "6985732036975656974", "title": "2021前端社招总结之算法篇", "desc": "首次前端社招经验总结，大概分算法篇、编程篇、前端技术篇三部分。本次是算法篇的内容。对于前端来说，算法在面试中所占比例不是很高，题目难度也不是特别大，大部分属于 leetcode 简单题、中等题难度"}, {"id": "6931746891260657677", "title": "面试之复盘(二)", "desc": "第一类是页面级别的优化;第二类则是代码级别的优化。 动画效果应用到position属性值为absolute或fix的元素上（脱离文档流）。 for-in循环除了遍历数组元素以外,还会遍历自定义属性。 for-of循环不会循环对象的key，只会循环出数组的value，因此for-…"}, {"id": "6963829176214224904", "title": "事件循环专题 —— Event-Loop", "desc": "从一道面试题说起 大家先调动自己现有的知识思考一下：上述代码的输出结果是什么？ 答案是：1、3、6、4、5、2 如果你能够准确给出上面的回答、并且说出你的依据，那么恭喜你——你的事件循环基础很扎实，可"}, {"id": "6844903686779453454", "title": "Vue解析--如何应对面试官提问", "desc": "近期不断面试中，面试官都会提一些关于Vue相关的源码和“全家桶”之类的问题。那么针对这些提问，我们应该如何更好应答呢？在这里我把对Vue的理解整理出来供大家来参考。 Vue是一套构建用户界面的渐进式框架，也是一个非常典型的 MVVM 的程序结构（model-view-viewm…"}, {"id": "6948417504767131656", "title": "简历加分项:初学graphql", "desc": "想必大多数人对传统的数据库查询语句都很熟悉，在条件复杂时，语句非常麻烦; 在前端开发时也会经常要和后端对接数据，有时候后端给你的数据并没有仔细的筛选，冗余的数据大大降低效率。graphql本质上是一种查询语句的设计，可以让你自定查询的模式，帮助你简单地得到精确的数据。掌握gra…"}, {"id": "6899586271346163719", "title": "jsliang 求职系列 - 26 - 网络安全", "desc": "Web 世界是开放的，任何资源都可以接入其中，我们的网站可以加载并执行别人网站的脚本文件、图片、音频、视频等资源，甚至可以下载其他站点的可执行文件。 甚至还可以将这些信息上传至自己的服务器，这样就可以在你不知情的情况下伪造一些转账请求等信息。 所以，在没有安全保障的 Web 世…"}, {"id": "6844904057010651143", "title": "TypeScript 参数简化实战（进阶知识点conditional types，中高级必会）", "desc": "TypeScript中有一项相当重要的进阶特性：conditional types，这个功能出现以后，很多积压已久的TypeScript功能都可以轻而易举的实现了。 没错，它只是节省了几个字符串，但是却是一个非常适合我们深入学习条件类型的实战。 这样的语法就叫做条件类型，A, …"}, {"id": "7001459095622385694", "title": "前端实习面试准备--JS变量和类型", "desc": "js数据类型，原始类型和引用类型及其区别。各数据类型中需要注意的地方，js底层对于数据的存储方式和问题等等。"}, {"id": "7007432971770658829", "title": "前端模块化规范", "desc": "CommonJS[1]: 主要是 Node.js 使用，通过 require 同步加载模块，exports 导出内容。 AMD[2]: 主要是浏览器端使用，通过 define 定义模块和依赖，requ"}, {"id": "6844904103504527374", "title": "写给初中级前端的高级进阶指南", "desc": "我曾经一度很迷茫，在学了 Vue、React 的实战开发和应用以后，好像遇到了一些瓶颈，不知道该怎样继续深入下去。相信这也是很多一两年经验的前端工程师所遇到共同问题，"}, {"id": "7006975685898027016", "title": "JS面试题之箭头函数，高阶函数，柯里化函数，纯函数（三）", "desc": "今天我们主要来看看在JavaScript中的函数，函数在JavaScript中很重要，也有很多种使用方式，今天我们主要来复习复习箭头函数、高阶函数、柯里化函数、纯函数，它们分别是什么？在JS中有什么作"}, {"id": "6940945178899251230", "title": "「2021」高频前端面试题汇总之JavaScript篇（上）", "desc": "2021 高频前端面试题汇总之JavaScript篇，前端面试题汇总系列文章的JavaScript篇，长期更新，欢迎收藏、点赞！"}, {"id": "6947842412102287373", "title": "字节跳动最爱考的 64 道算法题（JS版）", "desc": "现在大厂面试中，算法题几乎为必考项，且近几年频现 LeetCode 真题，此篇为拿到字节、腾讯、京东 Offer 的笔者本人在准备面试过程中亲自刷过以及遇到过高频算法题。文章内容会分模块整理，对于笔者在面试过程中遇到的真题，会给予着重 【🔥】标出。 同时，可以毫不客气的说，如…"}, {"id": "6930897845369356295", "title": "🐮化身面试官出30+Vue面试题，超级干货（附答案）｜牛气冲天新年征文", "desc": "。。。 在你自我介绍的时候呢，我就看看你做过的项目，技术栈什么的。 Vue 借鉴了 angular 的模板和数据绑定技术，又借鉴了 react 的组件化和虚拟 DOM 技术。 特点： MVVM 模式；代码简洁体积小，运行效率高，适合移动PC端开发；本身只关注 UI （和 rea…"}, {"id": "7006501715864191006", "title": "一文解决前端面试④----必备的前端手写", "desc": "在前端的学习中，不仅要学会用，一些基础功能的手写也非常重要，本文详细介绍了前端必备的23个手写，持续更新"}, {"id": "6979155451473002504", "title": "今天聊：为什么大厂卡你的学历", "desc": "所有被大厂因学历拒掉过的童鞋，今天应该都能认知到：学历真的是一块敲门砖，没这块砖，门就是敲不开。但可曾看到哪个一本二本的大学，专门开设一门「前端开发」的专业？"}, {"id": "6983934602196811789", "title": "前端面试必不可少的基础知识，虽然少但是你不能不知道", "desc": "这个是小浪学习前端的时候对于一些面试的基础知识的总结（这里面没涉及框架），不是很全，一方面是和大家一起分享，有错误的地方请大家多多指教我这个新人，另一方面方便自己复习，自己总结做笔记也是加强印象的一种"}, {"id": "6994066112203718686", "title": "(建议精读)输入URL到页面显示的前端体系知识", "desc": "一道不同回答能体现不同薪资水平的题。本文不讲概念，只有干货，内容涉及浏览器原理，操作系统，计算机网络，Web等一系列知识"}, {"id": "6992370132148305927", "title": "vue面试总结", "desc": "总结一些vue相关的知识，将笔记整理跟大家分享，有些知识会经常在前端面试的时候会问到，所以做个记录，希望对大家有所帮助，如果有什么问题，可以指出，会积极修正。 如果大家喜欢，可以点赞"}, {"id": "7000613481816784927", "title": "React 系统复习如何做最高效（8.24直播总结 + 百道高频面试题整理）", "desc": "一 前言 哈喽，大家好，我是 我不是外星人 👽 ，8月24号，我作为分享嘉宾，线上参与了一场 《React 系统复习如何做最高效》 的技术分享，接下来我把直播的内容汇总分享给大家。在分享的过程中，也枚"}, {"id": "6990028188080406558", "title": "Vue3 源码解毒 & PK React17", "desc": "封面妹纸是作品！请不要再！再！再！举报我。咱和辣些低俗的妖艳货不是一个世界的。 另外，难得的感悟和心得文。有需要的可以进来瞅瞅。"}, {"id": "6844903896637259784", "title": "一个合格(优秀)的前端都应该阅读这些文章", "desc": "的确，有些标题党了。起因是微信群里，有哥们问我，你是怎么学习前端的呢？能不能共享一下学习方法。一句话也挺触动我的，我真的不算是什么大佬，对于学习前端知识，我也不能说是掌握了什么捷径。当然，我个人的学习方法这篇文章已经在写了，预计这周末会在我个人公众号发布。而在此之前，我想展(g…"}, {"id": "6964658454543728647", "title": "聊聊前端面试", "desc": "最近 Zoom 国内又开放招聘了，我们组有了前端的 HC，所以我也参加了几场面试。在面试的过程中我也发现了很多问题，因此作为一个 9 年工作经验和 7 年面试经验的老兵，我想分享一些经验给你。"}, {"id": "7001488184433442823", "title": "『面试的底气』—— 设计模式之状态模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7007437921242316831", "title": "BFC 的形成和作用", "desc": "BFC 全称为 block formatting context，中文为“块级格式化上下文”。它是一个只有块级盒子参与的独立块级渲染区域，它规定了内部的块级盒子如何布局，且与区域外部无关。"}, {"id": "6847902225423925255", "title": "2020最新：100道有答案的前端面试题（上）", "desc": "网上的面试题一大堆，鱼龙混杂，一方面多数题目质量不高，另一方面有答案的很少，即使拿到面试题对自己的帮助也不大。 最近我花了一些时间，为大家整理了2020年各一、二线互联网公司的前端面试题，内容包括JavaScript、算法、网络&安全、Vue、React等大量的前端知识点和相关…"}, {"id": "6942988170208215076", "title": "跳槽人速来，面经&资源分享", "desc": "2021最新面试高频问题，本人真实经历。文中还有简历注意事项、必备前端知识点学习资源分享等，各位大哥们，速来观看。"}, {"id": "6844904116552990727", "title": "2万字 | 前端基础拾遗90问", "desc": "大家好，我是练习时长一年半的前端练习生，喜欢唱、跳、rap、敲代码。本文是笔者一年多来对前端基础知识的总结和思考，这些题目对自己是总结，对大家也是一点微薄的资料，希望能给大家带来一些帮助和启发。成文过程中得到了许多大佬的帮助，在此感谢恺哥的小册、神三元同学的前端每日一问以及许多…"}, {"id": "6985465328364945444", "title": "第一篇文章——面试", "desc": "入职不到一年后被离职，三周时间点灯熬油，成功上岸心仪的公司。年轻人请加油！不要抱怨生活的不公，请坚信存在即合理，所有的经历都会在不久的将来发挥作用。"}, {"id": "6987739377271046175", "title": "【面试】字节抖音秋招前端开发", "desc": "自我介绍 线程、进程的区别，JS为什么是单线程的 HTTP与HTTPS的区别，HTTPS解决了哪些安全性问题 算法题：二叉树遍历有哪些方法？写出层序遍历 节流与防抖的区别？写一个节流函数 Vue的数据"}, {"id": "6986120377596379144", "title": "Vue深入学习—mustache模板引擎原理", "desc": "mustache 是 “胡子”的意思，因为它的嵌入标记 {{ }} 旋转过来很像胡子，Vue中的 {{ }} 语法也引用了mustache，这也是我深入学习的目的。"}, {"id": "6992445993081896991", "title": "面试题整理——JavaScript", "desc": "1.闭包 其实就是一个高阶函数，在一个函数中返回一个函数， 直接回答：       1.概念：每当创建一个函数，闭包就会创建出来，它是连接函数内部和外部的桥梁。 闭包可以让我们在函数内部访问函数外部的"}, {"id": "6992387045721292814", "title": "一道面试题带你吃透 Javascript宏任务和微任务执行顺序", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 “async function async1() {console.log(‘async1 start‘)；await async2()；c"}, {"id": "6911216775782727687", "title": "「面试常问」很多人知道 Web Storage，但是你清楚 Cookie 嘛？", "desc": "可以在浏览器的 Application 面板下看到浏览器的本地存储包含了：Cookie、sessionStorage、localStorage 和 IndexedDB。 Cookie 又叫 HTTP Cookie 或者叫浏览器 Cookie。Cookie 的作用是维护服务端和客…"}, {"id": "6844904089369706504", "title": "实现 instanceof 并说明其工作原理", "desc": "instanceof的工作原理就是测试构造函数的prototype 是否出现在被检测对象obj的原型链上。 注意：instanceof 也不是万能的。 在这个例子中，arr 数组相当于 new Array() 出的一个实例，所以 arr.__proto__ === Array.…"}, {"id": "6979241600446627870", "title": "setTimeout 与 requestAnimationFrame 的区别", "desc": "setTimeout 与 requestAnimationFrame 的区别 提到 setTimeout 以及 requestAnimationFrame，大家的第一反应是动画相关的两个 API。 我"}, {"id": "6980981278296260638", "title": "vue.sync 自定义事件修饰符", "desc": "面试中会被问到的sync事件修饰符， 下面是事件修饰符的详解，以及实现过程，如何实现子组件对父组件中值进行修改 `"}, {"id": "6923087637603418126", "title": "async await", "desc": "1、ES7：generator+promise的语法糖async+awaithttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Refere"}, {"id": "6911252064655900680", "title": "[每日一题]面试官问：Async/Await 如何通过同步的方式实现异步？", "desc": "2020.12.23 日刚立的 flag，每日一题，题目类型不限制，可以是：算法题，面试题，阐述题等等。 这个题目本身不是特别难，只能说是作为社招的基础面试题，但是如果想回答好这道题也不是很容易。 一个函数如果加上 async ，那么该函数就会返回一个 Promise。 awa…"}, {"id": "6844903576284692494", "title": "从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！", "desc": "见解有限，如有描述不当之处，请帮忙指出，如有错误，会及时修正。 为什么要梳理这篇文章？ 最近恰好被问到这方面的问题，尝试整理后发现，这道题的覆盖面可以非常广，很适合作为一道承载知识体系的题目。 关于这道题目的吐槽暂且不提（这是一道被提到无数次的题，得到不少人的赞同，也被很多人反…"}, {"id": "6987557381798363150", "title": "总结前端高频面试题", "desc": "兼容问题 2、图片默认有间距 3、使用after伪元素清除法（也称之为万能清楚法） 4、超出显示省略号 5、链接访问过后hover样式就不出现的问题 详细兼容问题请看此链接 https://blog."}, {"id": "6987356628697743391", "title": "前端面试题 查缺补漏ing", "desc": "webpack相关 一、webpack的打包原理 识别入口文件 通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖) webpac"}, {"id": "6943548045422231566", "title": "前端算法面试必刷题系列[26]", "desc": "45. 二进制求和 (add-binary) 给你两个二进制字符串，返回它们的和（用二进制表示）。 输入为 非空 字符串且只包含数字 1 和 0。例如 1. js 中二进制与十进制的相互转换 如果输入的 string以 \"0x\"或 \"0x\"（一个0，后面是小写或大写的X）开头，…"}, {"id": "6880286008835833864", "title": "2020 秋招知识点总结 -- (  Vue篇 )   🏆 掘金技术征文|双节特别篇", "desc": "因为近期一直在忙着找实习和毕业的事情，没有时间整理出来。希望大家看完能够得到一些帮助和回顾 🙏 1. 对于MVVM的理解 Model: 代表数据模型，也可以在Model中定义数据的修改和操作。 View: 用户操作的的界面，当数据发生更新，会通过数据绑定更新到视图层。 Vie…"}, {"id": "6971023988252213256", "title": "web前端面试题型(一)", "desc": "一. js的事件流是什么?都有什么阶段? 1.1 JavaScript 是什么   事件流，说的简单点就是描述页面中接收事件的顺序当我们用户在触发一个标签的事件（例如鼠标点击，鼠标移动）时，浏览器就会"}, {"id": "6973119046615056397", "title": "🔥JS和CSS的加载会堵塞DOM的解析和渲染么？", "desc": "渲染流程图 首先，我们得先知道浏览器渲染的一个过程。如图 可以看出主要是这么几个步骤。 解析HTML，构建DOM树 解析CSS，生成CSS规则树 合并DOM树和CSS规则，生成render树 问题 1"}, {"id": "6844903764306968589", "title": "「前端面试题系列4」this的原理以及用法", "desc": "在前端的面试中，经常会问到有关 this 的指向问题。最近，朋友Z 向我求助说，他一看到 this 的题目就犯难，搞不清楚 this 究竟指向了谁。我为他做了解答，并整理成了这篇文章，希望能帮到有需要的同学。 它的答案是：先输出一个 10，然后输出一个 2。 在我们这道题中，虽…"}, {"id": "6961966860778602526", "title": "DOM 事件机制和事件委托", "desc": "前言 DOM 事件机制, 面试高频, 这里整理一下, 同时深入理解一下DOM 事件机制 从一段代码说起 同时我们爷爷div, 爸爸div, 儿子div 分别添加事件监听fn1, fn2, fn3 提问"}, {"id": "6844904197675221005", "title": "进大厂连载 7/15：蚂蚁金服如何面试候选人", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 大家好！在开始之前，特别感谢一下 Scott 以及前端早早聊提供这样一个话题交流平台，非常新颖且很有创新性。 今天我会分 6 个部分，介绍作为蚂蚁金服的面…"}, {"id": "6844903875388899342", "title": "【面试】前端JavaScript面试技巧", "desc": "声明：慕课网《前端JavaScript面试技巧》的笔记，仅用于查阅复习，不得用于商业用途。 内置函数：Object 、Array 、Boolean 、String ... 内置对象：Math 、JSON ... DOM 本质：浏览器拿到 HTML 代码后，DOM 把 HTML …"}, {"id": "6844904085175418894", "title": "快手 前端校招 一二面", "desc": "tips:面快手的时候没怎么准备，很久远没用过的手写源码有点生疏了，/(ㄒoㄒ)/~~，话不多说，看题一面(视频面1小时)2月21日自我介绍css布局方式，清除浮动的方法，BFC是什么，如何触发cal"}, {"id": "6964193345480425503", "title": "Promise/A+", "desc": "从实践到原理 Promise/A+ 规范，咱们晚点在看 很多人会告诉你，写 Promise 的第一步，就是认真阅读Promise/A+规范（Promise/A+ 规范的原文大家可以点击 https:/"}, {"id": "7004606492674359304", "title": "练习篇 - 关于asycn + await 的两道有趣的题目", "desc": "hello, 大家好，我是前端学长Joshua (公众号) 。 热心于做开源，写文章。目的为帮助在校大学生，刚入职场的小伙伴可以尽快搭建自己的前端学习体系。 如果你有学习上的困惑，欢迎关注我，找我交流"}, {"id": "6844903951100280845", "title": "阿里健康面试总结", "desc": "设计一个扫码登录的流程（前端），包括跟后端是怎样交互的，接口的设计。可以用UML或者其他自己擅长的任意方式描述 不用eval函数对一个四则运算求值。例如：\"2+3*4/6-1\""}, {"id": "6844903839934447629", "title": "用setTimeout和clearTimeout简单实现setInterval与clearInterval", "desc": "这个问题其实是前一段时间舍友的一道面试题。我觉得类似用reduce实现map、用xxx实现yyy的题目其实都挺有意思，考察融会贯通的本领。不过相比之下这道题可能更有实际意义。比如我们经常会用 setTimeout 来实现倒计时。下面来说说我对这个问题的思考。 首先我们先用 se…"}, {"id": "6844903778202845192", "title": "JavaScript知识点整理", "desc": "运行在浏览器的V8引擎中的脚本语言，不要编译就可以由解释器直接运行的，此外变量松散定义，属于弱类型语言。 解析完成后，浏览器引擎会通过DOMTree和CSSRuleTree来构造RenderingTree。 在<script>元素中设置defer属性，相当于告诉浏览器立刻下载，…"}, {"id": "6996867053101514765", "title": "前端面试题之——http1.0,http2.0,https", "desc": "8月更文挑战之面试题常规问题http相关： http1.0,http2.0,https各个版本的特点，以及区别"}, {"id": "6847009773867499534", "title": "DD每周前端七题详解-第七期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6982822613416411144", "title": "前端面试学习(2)", "desc": "Vue双向数据绑定原理 采用“数据劫持”结合发布者-订阅者模式，通过Object.definedProperty()的setter和getter来劫持data的各个属性，当数据变化时，通知订阅者，来触"}, {"id": "6844904031760941069", "title": "前端面试基础网络问题（万字长文）", "desc": "作用：它是与其他计算机进行通信的应用，它是对应应用程序的通信服务的。各种应用软件，包括web应用。 作用：这一层的主要作用是定义数据格式和加密。 作用：控制应用程序的会话能力，它定义了一段会话的开始、控制和结束，包括对多个双向消息的控制和管理，以便在只完成一部分消息时可以通知应…"}, {"id": "6844903784812920839", "title": "7个让你获益匪浅的开放式前端面试题", "desc": "不管你是面试官还是求职者，里面的思路都能让你获益匪浅。 前端开发人员在为最终用户设计体验时需要充分掌控其可用性和可访问性。这个问题让面试官知道求职者对这些标准和最佳实践的了解。 我在各种浏览器和设备上测试我的 Web 应用，检查在所有设备上的体验是否可用。我还使用流行的屏幕阅读…"}, {"id": "6844904148828160014", "title": "前端面试你需要知道的事情：技术面试流程", "desc": "前一篇文章介绍了应该如何写简历：前端面试你需要知道的事情：简历。这主要次介绍一下主流公司的前端技术面试流程。 一般公司技术面试分2-3轮，1面、2面注重基础，3面注重综合能力。一般对于社招来说1面、2面是面试部门的高工，3面是前端负责人或研发负责人。对于校招基本也差不太多，只是…"}, {"id": "6844904196253155341", "title": "【面经】不到一年前端经验，面试官都会问什么", "desc": "像css这一部分，面试必问，但是它的东西很杂很多，我不知道有多少人和我感觉一样：学习前端最难的是css，而不是js。 这一部分是前端工程化的内容，还是有必要会的。浅一点说要会的就是一些基础配置以及优化配置，还有像plugin和loader的区别等，再深一点就是配置的原理、以及如…"}, {"id": "6963087528970682404", "title": "执行上下文与调用栈", "desc": "为什么要有执行上下文 大家平时写项目的时候，肯定是一个文件一个文件去写；具体到每一个文件里，又会细分出不同的方法、模块 —— 我想应该不会有同学会把成千上万行的庞大的代码逻辑塞进一个文件里。当大家这样"}, {"id": "6972566544798711816", "title": "JS实现二叉树的深度优先搜索和广度优先搜索", "desc": "二叉树的搜索可以有很多扩展，可以扩展成树的搜索，图的搜索，图的搜索可以扩展成爬虫的逻辑。今天我们就了解一下最基本的二叉树的搜索。 前面文章我们说了二叉树的几种遍历，那么遍历是为了什么呢？遍历是为了搜索"}, {"id": "6993706768282943501", "title": "手写instanceof的实现", "desc": "instanceof运算符用于检测构造函数的prototype属性是否存在于实例对象的原型链上。 instanceof原理就是一层一层查找__proto__，如果和构造函数的prototype相等则返"}, {"id": "6998531171671867422", "title": "webGL使用指南（5）", "desc": "webGL使用指南（5） 绘制三角形 你可能知道。构成三维模型的基本单位是三角形，不敢三维模型的形状多么复杂，其基本组成部分都是三角形，只不过复杂的模型由更多的三角形构成而已。因此，如何绘制三角形对渲"}, {"id": "6844903781704925198", "title": "前端面试查漏补缺--(九) HTTP与HTTPS", "desc": "本系列最开始是为了自己面试准备的.后来发现整理越来越多,差不多有十二万字符,最后决定还是分享出来给大家. 在讲解HTTP与HTTPS之前,有个知识点必须提前讲解下,那就是TCP/IP协议. 从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活…"}, {"id": "6844903782321487880", "title": "「前端面试题系列7」JavaScript 中的事件机制（从原生到框架）", "desc": "最近，小伙伴L 在温习 《JavaScript高级程序设计》中的 事件 这一章节时，产生了困惑。 在 vue 的文档中，有一个修饰符 native ，把它用 . 的形式 连结在事件之后，就可以监听原生事件了。它的背后有什么原理？ 浏览器中的事件机制，也经常在面试中被提及。所以这…"}, {"id": "6845166891393089549", "title": "如何获取一个进程所占用的内存", "desc": "通过ps可以获知一个进程所占用的内存如果要监控内存，肯定使用对进程万能的命令pidstat（PS:这名字一听就知道是干嘛的）pidstat是属于sysstat下的linux性能工具，但在mac中，如何"}, {"id": "6936449020139143176", "title": "场景题-请求合并 | 刷题打卡", "desc": "题目描述短时间内需要请求多个同类型的资源期望多个请求合并成一个请求发送例如:有一个接口其请求路径为/pathquery有一个id参数支持传一个或者多个id/path?id=1/path?id=1,2,"}, {"id": "6893748375372431368", "title": "[核心概念]  一文说透函数防抖和节流 (debounce/throttle)", "desc": "函数防抖与节流是很相似(但不同)的概念，简单来说就是一个能控制一段时间某个函数的执行次数的方案。用来优化计算机或网络资源。再白话点就是当你的函数高频率执行时能让你的这个方法少执行几次，如果是异步的，少几次网络请求，是不是优化了资源。下面我们分别看下这两个概念。 简单来说就是把多…"}, {"id": "6844904068993777677", "title": "如何实现 lodash.get 函数及使用可选链操作简化取值", "desc": "本篇文章简介 lodash.get 函数的实现以及可替代的可选链操作，源于我自己的仓库 面试每日一题，其中记录了关于前端进阶及工程化的各种问题。心灵鸡汤之所以被抵制就是因为只有鸡汤没有勺子，别人也开始问我的仓库有没有答案了。因此我将写一大堆文章来捎带回答这些问题 ---- 如果…"}, {"id": "6844904178301534215", "title": "面试常挂题：你最大的缺点是什么？", "desc": "这个问题看起来确实不太好回答，好像是在给自己挖坑，说什么都不好。 我追求极致，一定要把工作做好。。 没错，就是这句我们从小学语文就在背诵的子曰，直到三十而立的面试还会被问。 这题考察的就是一个人是否能正确的「反省」自己，知道自己的优势和劣势，并加以改正和提高。 只回答出自己的缺…"}, {"id": "6983656688419078174", "title": "JavaScript 字符串 经典面试算法", "desc": "需掌握的概念 ①回文 ②子串(连续) ③子序列(不连续) ④前缀树(Trie树) ⑤后缀树和后缀数组 ⑥匹配 ⑦字典序 1.互为变形词 给定两个字符串str1和str2,如果str1和str2中出现的"}, {"id": "6998374906131906591", "title": "promise面试题收集1", "desc": "1.第一题 2.第二题 3.第三题 4.第四题 5.第五题 6.第六题 7.第七题 8.第八题 9.第九题 10.第十题"}, {"id": "6844903686313869320", "title": "CSS魔法堂：display:none与visibility:hidden的恩怨情仇", "desc": "我们都清楚当元素设置display:none后，界面上将不会显示该元素，并且该元素不占布局空间，但我们仍然可以通过JavaScript操作该元素。但为什么会这样呢？ 这个涉及到浏览器的渲染原理：浏览器会解析HTML标签生成DOM Tree，解析CSS生成CSSOM，然后将DOM…"}, {"id": "6987390645564506149", "title": "JS面试题", "desc": "JS 变量类型 JS 中有 6 种原始值，分别是： boolean number string undefined symbol null 引用类型： 对象 数组 函数 JS 中使用 typeof 能"}, {"id": "6844903571029245965", "title": "有意思的前端函数面试题", "desc": "1:考引用类型在比较运算符时候隐式转换会调用本类型那个方法toString和valueOf？(去年过年吵的很火国外的题)2:考this指向的理解？(最后一个输出问题是借鉴网易面试题的)3:再来一次th"}, {"id": "6998138546678677517", "title": "前端面试还不懂这些技巧？看完跳槽少说涨50%(上）", "desc": "一、准备技术型简历 简历是你进⼊⾯试的敲⻔砖，也是留给意向公司的第⼀印象，所以这个很重要，必须在这上⾯做⾜了⽂章，⼀份优秀的⾯试简历是整个⾯试成败的重中之重，我们要认真准备简历才能保证简历不被刷掉。 "}, {"id": "6844904110227980302", "title": "如何向面试官介绍你的项目", "desc": "不知道大家面试的时候是怎么介绍自己的项目的？大家可以想一下当时介绍项目的时候是否把要点都说了，是否把面试官最关注的问题回答了？假如你说的都没有问题就问题不大。但是我发现很多小伙伴回答问题的时候都只是一笔带过，如这个是一个xxx项目，我在里面担任了xxx岗位，用了什么技术栈等。其…"}, {"id": "6844904178054070286", "title": "第八期 | 能力模型驱动面试", "desc": "参加完这次直播，自己对前端职业规划有了更深入的认识，引申自己思考，如何培养自己成为卓著的技术人。本篇内容为技术级别的能力模型、考察能力模型的工具、优秀的人才的理解、给面试官的建议； 1. 思考 我大概清楚我要怎么介绍自己，我的诉求是什么，以及我能做什么了。 有丰富的开发经验，熟…"}, {"id": "6942734430800707614", "title": "谈一谈我眼中的宏任务与微任务", "desc": "最近在准备面试，自然也是看了一下浏览器和node.js的宏任务与微任务。我已经把最简单的想通了，我认为这个理解非常容易帮助理解，分享给大家。 我讲解最简单的情况，后面再补充node.js等等的复杂内容。 划重点：宏任务和微任务分别是两个队列，每当一个宏任务执行完成后会将所有微任…"}, {"id": "6844903997870964744", "title": "浏览器缓存机制", "desc": "缓存是浏览器的一种机制，可以把请求过的web资源（html、css、js、图片等）拷贝一份副本存储在浏览器中，并根据请求配置选择是否使用该副本。 本文只介绍浏览器的缓存机制。 可以在 HTTP协议头 和HTML页面的 meta标签 中定义。 上述代码的含义：浏览器当前页面不被缓…"}, {"id": "6993592762700398599", "title": "剑指offer(1)——二维数组中的查找", "desc": "题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数"}, {"id": "6869943642325254158", "title": "解锁this、apply、call、bind新姿势🍊", "desc": "this在JavaScript中一个非常重要的概念，也是特别令人迷惑的。this是什么？首先记住this不是指向自身！this 就是一个指针，总是指向最后调用它的对象，即代表着它的直接调用者。 当一个函数被调用时，应该立马看()左边的部分。 如果代码都那么简单，那么this的指…"}, {"id": "6987017604858806280", "title": "前端必刷手写题系列目录(持续更新)", "desc": "前端必刷手写题系列 [1] Object.keys() Object.values() Object.entries() 前端必刷手写题系列 [2] 函数防抖 (debounce) 函数节流 (thr"}, {"id": "6962033775588933668", "title": "this 基本指向原则解析", "desc": "this 指向谁？ 多数情况下，this 指向调用它所在方法的那个对象。 当调用方法没有明确对象时，this 就指向全局对象。在浏览器中，指向 window；在 Node 中，指向 Global。（严"}, {"id": "6916418084945264647", "title": "【Daily Interview】- 20 N 皇后", "desc": "这道题的原型是大名鼎鼎的八皇后问题，事实上，除了暴力枚举以外，也很难有太好的方法来处理这个问题。而说到暴力枚举，回溯算法可以说是非常优秀的方法，那么这里我们用回溯的角度来思考一下应该如何完成这个问题。 其实仔细观察不难发现，当所有位置都不可下之后，循环会直接结束，回到上一层，即…"}, {"id": "6870652445757243406", "title": "10 张图聊聊线程的生命周期和常用 APIs", "desc": "上一篇文章我们聊了多线程的基础内容，比如为什么要使用多线程，线程和进程之间的不同，以及创建线程的 4 种方式。 今天我们来说一下线程的生命周期和常用 APIs：我们需要非常清楚的知道线程的各种状态，比如排查程序运行慢的原因时，就需要看下是不是哪里被阻塞了；另外它也是面试时非常喜…"}, {"id": "6844904135364444167", "title": "（立下flag）每日10道前端面试题-12 关于BOM十问", "desc": "window：BOM的核心对象是window对象，它表示浏览器的一个实例。 avigator：navigator 对象包含有关访问者浏览器的信息。 window.screen 对象包含有关用户屏幕的信息。 location： 对象用于获得当前页面的地址 (URL)，并把浏览器重…"}, {"id": "6922428382491705352", "title": "闭包作用域练习题（关于形参赋值默认的练习题）", "desc": "1、2、ES6新规则：规则：（1）、函数执行会产生一个私有的执行上下文「作用域链->this->arguments->形参赋值」（2）、它会把函数体中的代码，单独作为一个私有的“块级”上下文，并且其上"}, {"id": "6844904003558440974", "title": "浏览器渲染过程学习笔记", "desc": "关于浏览器的渲染过程，网上的文章很多，比较出名的是《Life Of A Pixel》这个视频讲解，这里记录下我学习极客时间《浏览器工作原理》专栏中关于这块的笔记。 上面的示意图给出基本的输入和输出解释，输入是HTML、CSS、JavaScript，输出是web页面，中间的ren…"}, {"id": "6921247067591409677", "title": "面向对象练习题(基于ES6创造类的语法)", "desc": "1、class的基本语法（创建私有的属性）2、设置原型上面的方法3、设置静态的私有的属性和方法4、Fn.prototype.z=300;//公有的属性只能外侧单独加5、class创建的类只能通过new"}, {"id": "6920504888321376264", "title": "4、面向对象基础知识（new函数的处理过程）", "desc": "1、JS内置类小提示：我们可以根据__proto__后面的值来判断这个实例的构造函数是谁2、自己创造类lettotal=Fn(10,20);//执行过程如下：lettotal=newFn(10,20)"}, {"id": "6904554812277260295", "title": "【Daily Interview】- 02 求二维数组的全排列组合结果", "desc": "先来看看题目吧：分析上面这道题，我们可以将问题拆解，依次将临近的两个数组进行组合，然后向后遍历组合，大致如图所示：而能实现上述效果的，第一时间应该能够想到 Array.reduce：最终效果如下：感兴"}, {"id": "6928657966078017550", "title": "CSS（每日一题）（20200213）", "desc": "39、介绍下BFC及其应用https://juejin.cn/post/692649734435556558152、怎么让一个div水平垂直居中57、分析比较opacity:0、visibility:"}, {"id": "6844904147716669454", "title": "[面试题]js、简单算法 - (极简版)", "desc": "混合词法作用域(var self = this)和this不是一个好的方式，应该使用bind配合this，或者完全使用词法作用域。"}, {"id": "6844903941956714510", "title": "前端学习笔记（十三）", "desc": "select字段将value 作为prop并将change 作为事件。 不能。需要nextTick。Vue异步执行DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。…"}, {"id": "6844904029529571336", "title": "浏览器缓存机制", "desc": "Expires是指过期时间，它存在服务器的响应头中，用来告诉浏览器在这个过期时间之前是不需要请求的，可以直接使用缓存内容，此时返回304状态码，如果超过过期时间则需要发送请求服务器响应。在这个实现机制中存在一个坑点就是服务器的时间和浏览器的时间可能不一致，这样就会导致过期时间不…"}, {"id": "6935818272239517709", "title": "CSS知识总结", "desc": "CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：内容(content)、填充(padding)、边界(margin)、 边框(border)。 使用box-sizing来控制盒子模型的解析模式，默认content-box(标准盒模式),border-box(IE盒…"}, {"id": "6844904104775385096", "title": "工程师的招聘与面试", "desc": "除招聘广告外，主动寻找，认识新的小伙伴也是我招聘的常规手段，期间也面试了不过朋友，我认为招聘是一件很高成本的事情，无论是在物色人才还是在筛选人才上。 新冠疫情让节后的招聘和面试增加了不少难度，我想可以借此机会以一个*“招聘方”*的角度，谈谈自己对工程师招聘的理解。 大平台对技术…"}, {"id": "6844904099213737997", "title": "06.一面 5：浏览器相关知识点与高频考题解析", "desc": "Web 前端工程师写的页面要跑在浏览器里面，所以面试中也会出现很多跟浏览器相关的面试题目。 本小节会从浏览器的加载过程开始讲解，然后介绍如何进行性能优化，最后介绍下 Web 开发中常见的安全问题和预防。 可将加载过程和渲染过程分开说。回答问题的时候，关键要抓住核心的要点，把要点…"}, {"id": "6914494324407271437", "title": "【Daily Interview】- 17 二叉树的最大深度", "desc": "边界条件非常简单，当节点为空的时候，返回 0 即可。 不使用递归，显然这里只能使用迭代。"}, {"id": "6844903858892701704", "title": "前端面试排雷之唱、跳、rap三步曲（ 二 ）跳篇", "desc": "在上一篇，中主要讲的是，如何吸引面试官看你的简历，并且邀约你来面试。这一篇将讲述，面试过程中的一些注意点，主要是结合本人在面试人或者是被面试的场景中，所遇到的问题和情况。好吧，让我娓娓道来。 请写正楷体，你写的潦草歪七扭八的，是个人就看着头痛好吧。建议最好带上一只自己习惯的笔。…"}, {"id": "6922473967223570446", "title": "promise深入理解", "desc": "1、自己的分析：首先输出promise1然后执行异步微任务1，输出then11然后输出promise2微任务4需要代码自上而下执行完才能知道（因为万一then的最后最后也是有其他的代码怎么办）是不是能"}, {"id": "6922455308010782734", "title": "Promise基础知识", "desc": "注意：带[[]]的是浏览器的内置的属性，不给我们玩3、4、说明是同步的（状态是同步）5、异步then6、promise里面的异步：首先then执行是异步的微任务；然后是resolve和reject；其"}, {"id": "6922436938331455502", "title": "JS中的同步异步编程机制（Event Queue 和Event Loop）", "desc": "1、JS是单线程的：大部分代码都是同步的，但是也有少部分代码是异步编程的2、EventQueue和EventLoop3、练习题注意：4、3不会输出，因为主线程一直被占用着"}, {"id": "6944617577440575502", "title": "「面试」- 二分查找算法", "desc": "在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。"}, {"id": "6844903971723689991", "title": "常见的面试题‘输入URL并回车后发生了什么’，你可能答漏了", "desc": "大部分人在回答这个问题时会从 DNS 解析开始说起，这样回答的确没有问题，因为实际存在很多特殊情况，不可能回答的面面俱到。但实际上 W3C 已经将浏览器的导航过程写进了规范，如果我们能按照 W3C 规范回答这个问题，说不定能在面试中脱颖而出。 让我们来看看 Navigation…"}, {"id": "6949897105074814983", "title": "实战技巧之Monorepo", "desc": "起因源于一次面试：我让面试者展开讲了一下她的项目经历（一个内部使用的组件库）。多个包的维护方式让她在开发过程中浪费了大量的时间。Monorepo 和 Multirepo 是两种不同的源码管理理念。"}, {"id": "6904832086184558599", "title": "            javaScript面试复习", "desc": "一、==和===的区别是什么二、判断变量类型三、闭包四、原型和原型链五、深拷贝和浅拷贝六、js的基本数据类型七、谈谈对this对象的理解八、javascript如何实现继承？"}, {"id": "6844903713337769992", "title": "JavaScript的值传递和引用传递", "desc": "原文: Explaining Value vs. Reference in Javascript 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 JavaScript有5种基本的数据类型，分别是：布尔、null、undefined、Strin…"}, {"id": "6944299652657184782", "title": "this指向初探，实现new bind apply call", "desc": "this指向分为默认绑定，隐式绑定，显式绑定，new操作，箭头函数这几类，经常使用的改变this指向的方法就是call，apply， bind，这些我们经常用到的方法你是否对其实现方式好奇呢？其实搞懂这些并不难，我认为首先必须知道函数内部做了什么事情，他解决的是什么问题，然后我…"}, {"id": "6844903941424037896", "title": "[面试题]关于HTML，你了解多少？", "desc": "DOCTYPE是“document type”的缩写。它是 HTML 中用来区分标准模式和怪异模式的声明，用来告知浏览器使用标准模式渲染页面。 从中获得的启发：在页面开始处添加即可。 这个问题有点问得含糊其辞，我认为这是在询问最常见的情况：如何提供包含多种语言内容的页面，并保证…"}, {"id": "6869943681957232654", "title": "前端面试系列【010】 - 谈一谈你对 MVC、MVP 和 MVVM 的理解", "desc": "对于这个问题，我想大部分“新生代”的前端程序员很难有切身的体会。毕竟这是一个比较漫长的历史演变问题，很多人一开始从事前端开发的时候，就已经是 vue, react, angular 的时代了。 这里大致介绍一下前端工程从无到有，从有到优的变迁过程吧！相信看完这个演变过程之后，对…"}, {"id": "6844903667968000007", "title": "架构思维实现promise，大爷，来瞅瞅", "desc": "先看看我们常见的回调模式。doOne()说：“你要这么做的话，就把doTwo()交给我，我在结束后帮你调用。”所以会是： Promise模式又是如何呢？你对doOne()说：“不行，控制权要在我这里。你应该改变一下，你先返回一个特别的东西给我，然后我来用这个东西安排下一件事。”…"}, {"id": "6942704185058000910", "title": "「面试」-浅克隆、深克隆", "desc": "浅克隆就是将栈内存中的引用复制一份，赋给一个新的变量，本质上两个指向堆内存中的同一地址，内容引入相同，其中一个变化，另一个也变化。 深克隆就是创建一个新的空对象，开辟一块内存，然后将原对象中的数据全部复制过去，完全切断两个对象间的联系。 浅克隆和深克隆最大的区别就是对引用值的处…"}, {"id": "6947949407564201997", "title": "前端面试题之BFC", "desc": "。。。 归根到底是元素之间的互相影响，导致了预期之外的情况的发生。这里就涉及到了BFC的概念 BFC（Block formatting context）直译为“块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与，它规定了内部的Block-leve…"}, {"id": "6844903981567705102", "title": "最近你丧吗?来点jwt？还是Promise？", "desc": "项目告一段落，整个人就像蔫了一样。很累。上个星期面试，个人来说表现的还是比较好的，但是工作岗位的待遇不是很好。三次的面试，没有找到一家让我满意的工作。 第三家的面试流程是这样的，先笔试，第一题是一个脑经急转弯，62-63=1，除此之外是一些比较基础的笔试题，不是很难。 一面是很…"}, {"id": "6844903816920301576", "title": "寒冬里的温暖", "desc": "14年毕业就一直在一家公司待到现在，从一个切图仔，到前端组长，再到前端主管。将近5年后，想换个环境，想看看外面的世界。就这样，在这个寒冬开始了面试。 整理了一些面试中被问到的问题，希望能在做技术的路上一直继续。 依稀记得当初嫂子带我入门，希望我做个终身程序员。回归纯写代码的状态…"}, {"id": "6981755786191962126", "title": "[吊打面试官] 手写篇：call、apply、bind", "desc": "实现call()方法 call都做了哪些操作？ 将函数设为对象的属性； 指定this到函数，并传入给定参数执行函数； 执行之后删除这个函数； 如果不传入参数，默认指向window； 实现apply()"}, {"id": "6844903858255167501", "title": "你必须知道的路由原理", "desc": "但是我们想要的效果应该是点击路由切换按钮的时候也进行视图的切换，文章前的你肯定跟我有一样的想法——绑定window.onpushstate事件，但是很遗憾，浏览器并没有给我们提供这个事件。"}, {"id": "6844903576133861390", "title": "手把手教你如何实现继承", "desc": "本文将从最简单的例子开始，从零讲解在 JavaScript 中如何实现继承。 在实现这个需求之前，我们先谈谈继承的意义。继承本质上为了提高代码的复用性。 下面的内容将围绕这两个要点展开。 复用父构造函数中的代码，我们可以考虑调用父构造函数并将 this 绑定到子构造函数。 复用…"}, {"id": "6844904115240173576", "title": "高级进阶之Webpack篇", "desc": "Webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 Webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 …"}, {"id": "6844903945513467912", "title": "前端面试必须懂之Js操作符", "desc": "js在进行这几种运算时，会将参与运算的双方都转化为Number类型，然后进行运算，不同类型的值转换为Number类型的结果如何呢？ 我们往下看。 如果Number函数的参数为对象类型，valueOf和toString两个方法转换的规则为：首先调用对象valueOf方法，若该方法…"}, {"id": "6937300505039699998", "title": "前端深度思考（一）——原型和原型链", "desc": "prototype每一个js对象(null除外)在创建的时候就会与之关联另一个对象【Prototype】，这个对象就是我们所说的原型。每个对象都会从原型“继承”属性。举个例子上述例子中，newObj对"}, {"id": "6844904190716674056", "title": "25 岁，毕业写前端的这三年", "desc": "时间回到 2016 年，彼时 996 还不算福报，比特币单价也还远远不到 1000 美元。那时的我怀着对大厂的敬畏和对前途的迷茫，拿着一纸毕业证告别了校园。这第一份名为 Web 前端开发的工作，代码写着写着就到了今天。 一晃三年过去了，从纯粹的赶需求到造轮子、做分享和带团队，许…"}, {"id": "6980334197453881358", "title": "js面试四之前后端通信", "desc": "第一部分：前后端交互与HTTP 1.前后端通信--前端主动联系后端 前后端通信是指浏览器和服务器之间数据交互(请求-响应)的过程：前端向后端发送请求数据，后端接收到前端的请求之后，响应数据请求 2.前"}, {"id": "6844903588313956360", "title": "前端面试（个人收藏总结）javascript篇（一）", "desc": "双等会自动强制转换，有风险。 jQuery源码中推荐使用三等，我个人也是这么写的。双等可用于判断布尔值 作用域链：一个自由变量一直往上寻找（定义时的）父级作用域内的变量的过程。 单线程：JS引擎、事件触发器、定时触发器都是单线程的。 任务队列：JS分为同步任务和异步任务，一旦执…"}, {"id": "6844904066770796558", "title": "「面试心理学」面试前的思考", "desc": "面试是一直火热并广受大家关注的话题，社区内不断输出着丰富的面试题以及各大厂面经，以题目为主，经验为辅。但其实在整个面试环节中重要的不仅仅是面试题。而且，面试题具有时效性。 拿前端举例，2020年的今天，如果还有人问你如何解决某些IE浏览器兼容性问题，那我劝你要慎重考虑加入这家公…"}, {"id": "6844903973065850888", "title": "nodejs入门全攻略，面试题整理解析", "desc": "模块化的文件，具有模块作用域，外部访问不到内部变量，内部也访问不到外部变量，默认都是封闭的。每个文件的命名空间都是独立且封闭的，不同模块之间不会互相影响，不会有污染情况 每次导出接口成员的时候都通过 module.exports.xxx = xxx 的方式很麻烦，Node 为了…"}, {"id": "6844903597268811783", "title": "面试中必备的网络相关知识", "desc": "废话不说，直接上干货。 为了能让计算机之间能够通信，计算机需要定义通信规则，这些规则就是协议。规则有多种，协议也有多种。协议就是数据封装格式+传输。 应用层：提供网络服务和最终用户软件之间的接口服务。 表示层：数据的表示、安全、压缩。 会话层：建立、管理、中止会话。 传输层：定…"}, {"id": "6959729561697255454", "title": "前端面试常备02：TCP&UDP基础", "desc": "协议特性概览 协议 连接性 双工性 可靠性 有序性 有界性 拥塞控制 传输速度 量级 头部大小 UDP 无连接(Connection less) n:m 不可靠(丢包后数据丢失) 无序 有消息边界, "}, {"id": "6844904113428234247", "title": "面试官可能会问：Cookie为什么会越来越大？", "desc": "Cookie的常用场景，好无疑问，就是做登陆状态的维护的。也就是我们在前端的cookie中，写入了服务端的session，然后通过sesstion来和服务端的接口保持会话状态。 我们会想到，一个小网站而已，怎么可能导致http的请求变慢？也就一个sesstion而已，可能这个s…"}, {"id": "6984052268584665101", "title": "整理一些前端必须了解的网络知识(一)——缓存", "desc": "浏览器缓存机制的关键：浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识。并且在每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中。 那么缓存具体如何存储和使用？ 缓存位置"}, {"id": "6844903842430074893", "title": "React生命周期", "desc": "用途：在没有这个生命周期函数之前，我们使用的数据来源可能是属性对象，也可能是状态对象，在我们的上文中的放码过来阶段就有所体现，我们可以通过这个生命周期函数将属性对象派生到状态对象上，使我们在代码中只通过this.state.XXX来绑定我们的数据。示例如下 举例：在我们的日常开…"}, {"id": "6844904112140599309", "title": "[ 面试系列 ] - 三：H5 是什么？", "desc": "我想可能很多同学都和曾经的我一样，认为 H5 是 HTML5 的简写，所谓 H5 开发，就是遵循 HTML5 标准的前端开发而已。但事实并非如此，尽管 H5 这个词最早的由来可能的确与 HTML5 有关，然而——当绝大部分人都认为错误是正确的时候，那它就是正确的。 知道了什么是…"}, {"id": "6878181859616882696", "title": "前端3年之啥都不会的渣渣面经(持续更新", "desc": "emmmm 终于决定要开始写掘金了~ 哈哈哈 不知道坚持多久 先写写看~ 希望给正在找工作和将要找工作的小伙伴一些启发~ 直接切入正题把 ❤ 9.22~9.23 react antd组件表单包一层怎么"}, {"id": "6963852835356147725", "title": "异步小专题", "desc": "前言 JS 异步解决方案，始终是面试中的热点与重点。 不少同学对异步知识存在一些认知误区，甚至压根没有意识到这个知识体系的存在。一些本身技术水平不错的同学，在面试前做了大量的 Promise、asyn"}, {"id": "6844904196706140167", "title": "进大厂连载 5/15：如何考察候选人的能力与潜力", "desc": "前端早早聊大会，前端成长的新起点，与掘金联合举办。 加微信 codingdreamer 进大会专属内推群，赢在新的起跑线。 本文根据 2020.05.31 日， “前端早早聊” 大会的面试专场分享内容整理而来。本文的标题是《面试官角度看招聘》，从面试官角度为未来的应聘者提供一个…"}, {"id": "6942490269485170718", "title": "工作后再来看浏览器输入URL后发生了什么？", "desc": "DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。 ​ 当局部DN…"}, {"id": "6942440964799594509", "title": "「面试」-VUE", "desc": "vue是易用、灵活且高效的渐进式JavaScript框架。它的主要特点是MVVM模式。代码简介体积小，运行效率高，适合移动PC端开发。本身只关注UI，可以轻松引入VUE插件或其他的第三方库进行开发。 MVVM全称为Model-View-ViewModel，Model表示数据模型…"}, {"id": "6844903848813789198", "title": "Javascript 面试中经常被问到的三个问题！", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 本文不是讨论最新的 JavaScript 库、常见的开发实践或任何新的 ES6 函数。相反，在讨论 JavaScript 时，面试中通常会提到三件事。我自己也被问到这些问题，我的朋友们告诉我他们也被问到这些问题…"}, {"id": "6844903905642414093", "title": "记一次失败的 bilibili 面试总结_缓存问题", "desc": "贴链接的行为如果涉及侵权请指出. 1. 从储存位置看缓存 Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。 PWA和实现也和这个有关哦. Memory Cache 与 Disk…"}, {"id": "6979616606502682637", "title": "总结一下几种垂直居中的方式", "desc": "这是我参与更文挑战的第29天，活动详情查看： 更文挑战 前言 在面试中如果面试官需要考察css，可能会提问： 你能讲讲垂直居中有哪几种实现方式？ 水平居中我们是知道的，如果盒子要在大盒子里面居中，使用"}, {"id": "6844903824356802567", "title": "面试官：你使用webpack时手写过loader，分离过模块吗？", "desc": "大家好，之前出了一篇面试篇webpack入门，这篇文章继续介绍接下来更深入东西。 讲道理大家都是直接import一个loader或者使用webpack内置的loader的。 其实和正常载入loader一样，只是这里指向的是本地文件的路径。 当使用多个loader的时候，从传入l…"}, {"id": "6844903938508980238", "title": "校招来了，你的前端简历准备好了吗？", "desc": "简历经常是给面试官的第一印象，但很多还没踏出校门的同学们不知道怎么写好简历，我时常有拿着一份简历不知道该怎么面试他的情况。而在秋招这种大规模招聘的季节，面试官刷简历时如果一份简历没法在很短的时间内吸引到注意力，那很容易就被漏过了，因为这样被淘汰岂不可惜。 大公司经常有技术评审的…"}, {"id": "6844903564775522312", "title": "[英] 前端面试题目大全", "desc": "Unlike typical software engineer job interviews, front-end job interviews have less emphasis on algorithms and have more questions on intri…"}, {"id": "6844904187273150478", "title": "1年前端er 面试小记", "desc": "因为一些不可言说的原因，自 3 月份开始，身边有不少同事陆续跳槽且跳槽后的公司待遇还不错。个人思考良久，也终于开始准备离开，原计划是准备这两个时间段离开，一个是 3-4月份，另一个 9-10 月份。在 3 月份时候，感觉自己准备不充分，于是工作之余，开始对自己进行技术补强，准备…"}, {"id": "6931267203325132808", "title": "2021出走计划", "desc": "2021年是我工作的第6年，也是做前端的第6年了，有的人在一两年时间就变成了大佬，而我现在还是一个普通的小前端。 2020年、独立负责大屏展示+会议系统等。。。 双休 （可能很难，先这样想着。。。） 目前公司工作8个月的时间，主要完成的项目是大屏拓扑，会议管理系统，图表相关的无…"}, {"id": "6975534277450530853", "title": "234树的由来及其红黑树", "desc": "234树的由来及其红黑树 前面我们了解了如何将一颗不平衡二叉树变成平衡二叉树，那么平衡二叉树的性能还能再优化吗，答案是可以的。首先前面我们讲了了要优化二次搜索树就是要将它的层级变少，它的层级越少，那么"}, {"id": "6844903952689922061", "title": "节流防抖及其应用(搜索框和连续滚动优化)", "desc": "本文配有完整的 demo 演示，可前往逐一测试，使用 netlify 部署，访问速度可能稍慢。 节流防抖是一种防止函数频繁无序执行的设计思想，它的核心目的是让无序变为有序，让函数执行更符合预期目的。 防抖的原理是，只要在倒计时的范围内，新触发防抖函数就会导致计时器重置，要重新等…"}, {"id": "6924293122054864910", "title": "【22届】【秋招】前端向复习指北（下）", "desc": "帮助你备战秋招。 本篇为JavaScript篇。主要内容包含：理论、运行机制、ES6部分、编程题目等等。"}, {"id": "6844903927360520206", "title": "45道面试题综合整理", "desc": "个人收录，你不知道的，总会在这里找到答案，自己的强大才是真的强大，希望我写的也可以帮到你。 主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。 cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）…"}, {"id": "6844903928623038478", "title": "面试分享：1 年经验初探前端社招", "desc": "年中决定离开当前所在的公司，想受一受外面社会的毒打。也面了 2 家还不错的公司（字节跳动 和 拼多多），在此记录分享一下。 字节跳动的技术面试都是以视频面试的形式进行的。 主要考察 js 中的基本类型、typeof 和 instanceof 等。 常规的类型比较题，比较基础。 …"}, {"id": "6916147797075066893", "title": "[每日一题]面试官问：['1', '2', '3'].map(parseInt)输出，原因，以及延伸？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 比较多：map方法，parseInt方法，有一定的教育意义。 其实主要是讲JavaScript的映射和解析。 string 要被解…"}, {"id": "6991074623206981646", "title": "Ajax、Es6面试题", "desc": "Ajax 1、Ajax的原理是什么 实现原理: 其核心是 XMLHttpRequest对象 IE浏览器使用ActiveXObject 常用属性: onreadystatechange属性 存有服务器响"}, {"id": "6955652672888242190", "title": "前端算法面试必刷题系列[49]", "desc": "93. 完全二叉树的节点个数 (count-complete-tree-nodes) 94. 二叉树的最近公共祖先 (lowest-common-ancestor-of-a-binary-tree)"}, {"id": "6983837680761045000", "title": "HTML__CSS 高频面试题", "desc": "1、你是怎么理解HTML语义化 使用语义化标签的意义： 可访问性：帮助辅助技术更好的阅读和转译你的网页，利于无障碍阅读； 可检索性：有了良好的结构和语义，可以提高搜索引擎的有效爬取，提高网站流量 国际"}, {"id": "6914530607787671560", "title": "一道面试题：从输入URL到页面加载完成的过程", "desc": "TCP和UDP的区别：TCP协议提供可靠的数据流运输服务；UDP协议提供不可靠的数据服务，DNS解析向本地配置首选DNS服务器发起域名解析请求是通过UDP协议向DNS的53端口发起请求的。 DNS（Domain Name System）是“域名系统”的缩写，是一种组织成域层次结…"}, {"id": "6977018518415867941", "title": "如何手写实现apply,call,bind", "desc": "这是我参与更文挑战的第22天，活动详情查看： 更文挑战 前言 我们面试的如果遇到需要手写代码，防抖节流是比较高频的一个（链接点击可以点这里，之前实现过），手写实现apply,call,bind也是问的"}, {"id": "6844904176007249928", "title": "第八期 | 前端如何搞面试", "desc": "大家好，我是冬沐，很高兴的是 2020.5.31 号的这场前端早早聊大会让我获益良多。接下来，我将结合个人的视角将本期大会中收获的一些东西以文字的形式进行总结，希望能与大家分享与探讨。 我觉得在面试之前我们需要认清自己的身份，是以学生的身份去面试，还是以一个社会人的身份去面试，…"}, {"id": "6920618448200400909", "title": "【每日一题】(17题)面试官问：JS中事件流，事件处理程序，事件对象的理解？", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 昨天的题目号码写错了，在这里做个说明。 事件流描述的是从页面中接收事件的顺序。 IE的事件流叫做事件冒泡(event bubbli…"}, {"id": "6983657585207410701", "title": "JavaScript 位运算 | 布隆过滤器 | 交换两个变量值 经典面试算法", "desc": "面试题目 1.如何交换两个变量的值？ 方法1：我们平时都用的，整个中间变量： 方法2：借助位运算，不需要任何辅助空间 但是这个有缺陷！！只能转换Number类型哦 方法3：不需要任何辅助空间强烈推荐！"}, {"id": "6844904061339172877", "title": "鼠标事件实现拖拽", "desc": "当前的互联网用户早已习惯了拖拽，习惯了拖拽带来的便利。任何一个前端项目都有加入拖拽这个功能的可能性。 这两种实现方案各自有自己的场景。鼠标实现的好处在于有更好的兼容性，坏处就是更多的代码。 dragApi 实现的好处在于更少的代码，坏处就是更差的兼容性。 需要利用mousedo…"}, {"id": "6844903501651247118", "title": "注意点——setTimeout、setInterval使用", "desc": "第二段代码就不一样了，setInterval是当run()跑了不到10s，那么就是10s走一回，如果setInterval大于10s，我们后面详解。"}, {"id": "6844903941340135431", "title": "我的前端秋招之旅", "desc": "从八月份开始准备至今，笔者本次秋招之旅也差不多该准备结束了。拿到了心仪的offer，也真正经历了一次作为一个面试者的全过程，期间可能一直没时间来整理一篇完备的文章，忙着项目，抽空复习知识点感觉整天都会有种疲惫感，这种感觉一直持续了很久，目前也算要尘埃落定，笔者这篇博文权当记录一…"}, {"id": "6974013718447423502", "title": "【JavaScript】数组扁平化的六种方式", "desc": "什么是数组扁平化？ 其实就是把多维数组转化成一维数组(降维) [1,2,[3,4,5,[6,7,8]]] => [1,2,3,4,5,6,7,8] 数组扁平化的几种方式 ES6中的flat方法 (推荐"}, {"id": "6934879060602388516", "title": "预热面试季-webpack进阶篇(打包原理、手写loader、plugin)", "desc": "上面已经创建好了要打包的文件，并且都互相导出、引入。接下来创建lib文件夹，用来存放自己实现的bundler.js相关文件，用来实现打包功能。 bundler.js会导出一个bundler类。 并且会接收webpack配置传进来的options参数。 最后执行run()函数执行…"}, {"id": "6907858822589579277", "title": "jsliang 求职系列 - 47 - 2020 面试题汇总", "desc": "2020 面试其实不止 2 家，但是一是我偷懒，二是我觉得如果小伙伴将 2020 求职系列认认真真看过了，一面题都不是问题，问题是二面问项目的。 所以希望小伙伴们看完这篇文章后，能审视下自己的项目经验，能不能做更好的提升。 360 是搭高铁过去现场面的，顺带看看内推我的大佬。 …"}, {"id": "6938385018267893767", "title": "🌲树+8道前端算法面试高频题解｜刷题打卡", "desc": "A 是 根节点。C、D、F、G 是 叶子节点。A 是 B 和 E 的 父节点。B 和 E 是 A 的 子节点。B、E 之间是 兄弟节点。 高度、深度、层 如上图所示。 为了方便理解记忆，高度就是抬头看，深度就是低头看。 与 高度、深度 不同，层 类比盗梦空间里的楼，楼都是从 1…"}, {"id": "6998345579428331551", "title": "【前端--面试】常见面试题（五）—— JavaScript", "desc": "今天看到有个同学说自己笔试做错题，想到我面试时候，笔试也做的很一般，特别是手写代码，今天就整理一些手写代码的问题，看看写的怎么样~"}, {"id": "6985711368510930980", "title": "资源汇总：160个电子书下载网站", "desc": "看电子书是很多人的一个爱好，但是有的电子书资源怎么找也找不到，没关系，有了这些资源搜索网站，帮你分分钟搞定！"}, {"id": "6893642486556655630", "title": "jsliang 求职系列 - 10 - 手写 call/apply/bind", "desc": "面试官：手写一个 call/apply/bind。 call：可以改变函数指向，第一个参数是要改变指向的对象，之后的参数形式是 arg1, arg2... 的形式 arguments 是一个对应于传递给函数的参数的类数组对象。 arguments 对象不是一个 Array 。 …"}, {"id": "6993598346866720805", "title": "如何在5分钟内和面试官说清楚“事件循环”？", "desc": "这是我参与 8 月更文挑战的第 1 天，活动详情查看：8 月更文挑战。开门见山的说：大家在前端面试过程中肯定都被会被问到事件循环 ，事件循环我们都懂，但是这一个抽象的概念，总觉得自己说不好"}, {"id": "7000932323290005511", "title": "数据类型概述（面试题）", "desc": "简介 JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。） 数值（number）："}, {"id": "6986810957037060103", "title": "前端常见的面试题整理（一）", "desc": "学习的过程中看到的一些面试题，随笔进行的整理，有不正确的地方敬请指正，后期如果有时间将持续更新中~~~"}, {"id": "6844903585885470734", "title": "前端进阶系列-目录", "desc": "之前我分享了文章《大厂前端面试考什么》,你们一定很想看答案吧？说实话，答案我是有，在准备面试的时候会时不时翻看，但内容比较多，比较凌乱，也不能指望我在一篇文章中写完。 我打算写一系列文章来进行解答面试中碰到的问题。目前只有目录，赶时间的同学可以根据关键词自行搜索资料"}, {"id": "6960904228227252238", "title": "一道笔试题引发的思考", "desc": "前言 之前我们组来了一个工作5年的小伙伴来面试，因为组长临时有事情，就由我去负责面试者的笔试，笔试题里有这么一道题:实现一个add函数，让add(2)(2)(3)返回7，我看了下这个面试者的答案是这么"}, {"id": "7000699670167027742", "title": "web 如何优化首屏加载时间", "desc": "这两天面试 一直被问到这个问题 就总结一下 1 优化资源加载速度 2 减小资源体积 3 优化dom渲染时间"}, {"id": "6985064793249939493", "title": "这一次彻底搞懂React中的setState在更新状态是同步还是异步的？", "desc": "问题引入 使用setState的两种形式 函数形式的setState 对象形式的setState 使用过setState之后能否立即获取到状态更新后的值 如何立即获取到状态更新后的值 setState"}, {"id": "6883049550538522638", "title": "高频JS手撕面试题(尊享版)", "desc": "最近看了这篇文章, 然后觉得，是不是得来一个自己的。 参考文献的代码组织分布不同的js版本，需要来回的切换思路。另外删除了一些重复的章节。 面试真的需要一个比较标准，和易于记忆的答案。排版顺序按照函数名顺序排列 1. 原生Ajax请求 2. Apply 3. Call 4. C…"}, {"id": "6996160679795228680", "title": "LeetCode——替换后的最长重复字符（滑动窗口）", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 题目描述 解题思路 构造一个数组，该数组拥有26个元素，下标代表的是大写字母A-Z。 定义滑动窗口的左右边界和滑动窗口中出现次数最多的字母"}, {"id": "6844903561889841166", "title": "前端菜鸟帝都面试记 | 掘金技术征文", "desc": "在一月大大小小的面试了9家公司，大公司和小公司都有。 C 轮 + 公司： 百度外卖，美团外卖，今日头条商业广告部门。 那天（1.17 上午）望京的风特别大，好久没有 面试了，准备了大概一周的时间收到了第一份面试邀请，居然是美团的还是挺惊喜的。 2.1：border-box 的属…"}, {"id": "6854573213838655502", "title": "把大厂都面试一遍后，我总结了13条面试经验", "desc": "近期大大小小面了十几家公司，花了一点时间整理了14条面试经验，希望能帮助到你。 你会的和面试中你能讲清楚完全是两码事。不是为了背知识点出去吹牛逼，而是要把自己会的梳理好思路，组织好语言。哪怕几个月前才做过的项目，如果没有做项目复盘，突然让你讲，恐怕未必所有细节都能记得清楚。 …"}, {"id": "6844904102544031757", "title": "面试：彻底理解Cookie以及Cookie安全", "desc": "Cookie是服务端发送到用户浏览器并且保存到本地的一小块数据，它会在浏览器下次向同一服务器发起请求时，被携带到服务器上。 经常用来做一些用户会话状态管理、个性化设置等等。 前端可以通过document.cookie来访问cookie。 cookie是跨域的，也就是在不同的域名…"}, {"id": "6844903702533423118", "title": "支援一波 《面试数十人有感》", "desc": "无意间看到原博主的这篇文章，强调基础和原理，略有同感。 嗯哼 ~ 首先， 我们的社会， 是一个竞争的社会，如果你想要更好的工作，更高的薪资，那么你就一定会参与到某种竞争当中，嗯，残酷的竞争。但是很明显，很多人并没有意识到这一点，因为毕竟再怎么坑也多多少少能够收到一些团队的off…"}, {"id": "6988893644556075045", "title": "最近刷题的合集（附解法）", "desc": "最近空闲的时候就在lettcode刷题，下面把自己刷的题以及自己的解法总结一下。 最长回文子串 leetcode地址 描述：给你一个字符串 s，找到 s 中最长的回文子串。 （回文子串就是正着读"}, {"id": "6996944060552314888", "title": "【前端--面试】常见面试题（一）—— JavaScript", "desc": "不知不觉已经八月中旬了，2021年好像转瞬即逝，再不久，就迎来了金九银十了，不知道准备跳槽的同学们有没有准备好面试呢？"}, {"id": "6844904102179110926", "title": "面试专题总结：Vue 知识总结", "desc": "snabbdom ：一个 vdom 实现库。 h（'<标签名>'，{ ... 属性 ... }，[... 子元素 ...]） h（'<标签名>'，{ ... 属性 ... }，[ ‘....’]） 使用 diff 算法来比较旧 VNode 及新的 VNode 之间的差异然后执行…"}, {"id": "6972520825308053512", "title": "🔥说一说浏览器缓存，有哪些？有什么区别？", "desc": "前言 缓存是性能优化中非常重要的一环，浏览器的缓存机制对开发也是非常重要的知识点。 主要讲解以下三个部分：强缓存 协商缓存 缓存位置 知识回顾 流程：浏览器中的缓存主要分为强缓存和协商缓存。 浏览器在"}, {"id": "6979229223630143496", "title": "VUE面试题总结", "desc": "由于网上有的答案我个人觉得不太完善，所以自己总结下面试题 1. 为什么data是个函数？ 组件中的 data 写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的 data，类"}, {"id": "6844903815913668621", "title": "前端面试题:你知道websocket吗?", "desc": "上面的程序会每隔10秒向服务器请求一次数据，并在数据到达后存储。这个实现方法通常可以满足简单的需求，然而同时也存在着很大的缺陷：在网络情况不稳定的情况下，服务器从接收请求、发送请求到客户端接收请求的总时间有可能超过10秒，而请求是以10秒间隔发送的，这样会导致接收的数据到达先后…"}, {"id": "6898879848882962440", "title": "专科前端生存之路&面试题总结", "desc": "在网络上白嫖了这么多年技术，现在也想输出一点自己粗陋的见解，希望可以帮助到你，砥砺前行。 四年多的时间，我从抓耳挠腮的菜鸟到可以独当一面高T，薪资涨幅超过1000%，10倍不止。这一切都要感谢公司提供的平台、自己付出的努力、同事伸出的援手。。 程序员中的底层卑微人士的我，于16…"}, {"id": "6915325198132740104", "title": "VS code 学习利器——前端每日一题", "desc": "其实这个插件的第一版，我已经写了很久。当时正值国庆，也没啥事，不如就来补一下已经荒废了很久的 vscode 插件（很久之前开发了坤坤打篮球）可惜开发一时爽，维护火葬场。维护题库太麻烦了，实在佩服那些坚持更新的大佬 😂。幸亏年前珠峰培训的张老师说他弄了个 VS code 插件训…"}, {"id": "6921530159099510791", "title": "你可以手写Vue3的响应式原理吗？", "desc": "在上一篇哔哩哔哩面试官：你可以手写 Vue2 的响应式原理吗？中，我们已经了解了Vue2中的响应式原理并且动手实现了其核心逻辑。但是Vue2的响应式原理是存在一些缺点的： 而Vue3使用ES6的Proxy特性来解决上面这些问题，本篇文章我将带大家深入了解Vue3的响应式原理并在…"}, {"id": "6844903677837180941", "title": "弹弹弹，弹走鱼尾纹的弹出菜单（vue）", "desc": "上一篇面试的总结，大家看的还行，因为量很大，错误在所难免，希望大家发现错误了可以告诉我一声，我的邮箱是236490794@qq.com，一个小前端的希望。 这里我将这个控件几个属性独立出来，方便下次开发，其中包含，menu的背景，整个控件在屏幕的哪个角落，menu的宽高，ite…"}, {"id": "6844903697265197069", "title": "程序员谈薪指北", "desc": "大家都知道，程序员这个群体，特别容易出现同工不同酬的现象。很多时候，我们通过了公司的层层筛选，然后和hr要了满意的工资，兴高采烈地去入职后，突然有一天通过小道消息得知，某个同事级别和你一样，但是工资比你多了几千，估计你立马开心不起来了。 其实这是正常现象，这也是为什么几乎所有公…"}, {"id": "6844903639882924040", "title": "致莫名其妙被关注的面试之补充篇", "desc": "第一次发面试经历莫名其妙有了很多人看，记一次凉凉的小米面试内心还是十分的激（peng）动（zhang），不行不行，做技术的还是不能膨胀的。非常感谢给我举例JSON进行深拷贝有部分缺陷的同道中人，还有大佬给我指明了一条刚毕业该如何前端学习的道路，对所有在帖子中一块讨论技术的人表示…"}, {"id": "6844903588955684872", "title": "腾讯校招前端开发笔试初试总结| 掘金技术征文", "desc": "今天来总结下9月5号做的前端笔试题和9月16号的腾讯初试，这段时间真的没怎么准备面试和笔试，可想而知，腾讯的面试肯定是挂了。 首先是9月5号的腾讯校招笔试题，在做笔试之前，我都没怎么去刷题，做的时候，完全是凭借自己的记忆来做的，总的来说，做的不是很好。在做的过程中，截图了一些比…"}, {"id": "6844904089210322952", "title": "Interview: 2020春季中高级前端面试记 | 渐进增强题目甄选(上篇)-react&http基础", "desc": "作为一个练习时长3 年左右的前端练习生，在这个阳春三月开始了漫漫的面试之路，这里分享一下自己的面试经验和遇到的觉得比较一些值得深入讨论和出现 频率极高 的题目，其中有笔误或者不当的地方欢迎朋友指出。 自己的技术栈是：react（16.8+ hooks） + mbox + typ…"}, {"id": "6971339157704540174", "title": "🔥HTTP和HTTPS的区别？HTTPS怎么加密的？", "desc": "前言 基本概念 HTTP 互联网上应用最为广泛的一种网络协议，超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据, 是一个客户端和服务器端请求和应答的标准（T"}, {"id": "6844903796506624014", "title": "23行代码实现一个带并发数限制的fetch请求函数", "desc": "2019-03-14晚补充：吃了晚饭看到大佬 @serialcoder 的回复，直接石化了，又仔细读了一遍题目，发现确实审错题目了，太大意了😢我之前的实现是多个请求同时进行，但不是并发，而是多个同时进行的串行。于是乎我开始了又一顿乱敲，差不多半小时搞定。这会应该没错了，而且只…"}, {"id": "6844903719792803847", "title": "一道面试题引起的思考", "desc": "今天在认真干（划）活（水）的时候，看到群里有人发了一道头条的面试题，就顺便看了一下，发现挺有意思的，就决定分享给大家，并且给出我的解决方案和思考过程。 乍眼一看，这不就是实现一个lodash.get方法吗？看上去好像很简单。所以我就开始写了第一个版本。思想其实很简单，遍历传进来…"}, {"id": "6937960800422199332", "title": "链表+6道前端算法面试高频题解｜刷题打卡", "desc": "数组在上一篇的专栏数组回炉重造+6道前端算法面试高频题解｜刷题打卡中我们进行了回顾和刷题。 趁热打铁，我们来对比数组来学习链表。 首先要明确的是，链表和数组的底层存储结构不同，数组要求存储在一块连续的内存中，而链表是通过指针将一组零散的内存块串联起来。 可见链表对内存的要求降低…"}, {"id": "6864113282354479111", "title": "前端面试总结2020年8月16家公司(附真实面试题)2", "desc": "建议没有提前准备，不然你一下说不上来的。还好我年初的时候有做过清晰的规划，算是必问题了。 肯定会追问，有自我驱动力体现在哪里，可以说下班后自学node,ui-app，数据库等等。 焦虑体现在行业内很多人掌握的知识点深刻且广泛，并且有自己的一套学习方法（「比如掘金里面这么多大佬，…"}, {"id": "6987271315916881927", "title": "一路面北", "desc": "因为一些原因我在这个炎炎夏日开始了找工作的旅程，本文旨在记录这一路的求职之旅，一路上发生的事情以及遇到的面试题等等，记录下来一方面是为了不时之需，另一方面就是为了给大家分享一下，希望我踩过的坑大家就不"}, {"id": "6900570829248004104", "title": "前端性能优化概念系列", "desc": "还有 x x x ... ... 通过上边的一个简单场景，可以想到，在前端中，性能优化，体验优化是多么重要的一件事儿，大家在日常使用各大产品中一定也有遇到体验效果不佳的杯具吧。好，接下来让我们从以下几点来分析一下。 在浏览器输入 URL 首先会对 URL 地址进行域名解析，然后…"}, {"id": "6844904116213252109", "title": "HTML/CSS面试题别看简单，就问你能答对几道【带答案】", "desc": "alt属性是为了给那些不能看到你文档中图像的浏览者提供文字说明的。且长度必须少于100个英文字符或者用户必须保证替换文字尽可能的短。 这包括那些使用本来就不支持图像显示或者图像显示被关闭的浏览器的用户，视觉障碍的用户和使用屏幕阅读器的用户等。 title属性为设置该属性的元素提…"}, {"id": "6847902219056988168", "title": "《前端面试总结点线面》之点-浏览器篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 负责浏览器界面显示，…"}, {"id": "6844903871853101064", "title": "当面试官问你了不了解defineProperty的时候。。。", "desc": "这个api的话，说你写过这个就够了。 这是一个非常简单的贪吃蛇的小游戏（请忽略里面非常多的细节bug。。。），这个小游戏就是通过defineProperty这个api实现的。这个api的一些属性就不多介绍了，相信大家都知道。 首先，先要分析一下这个游戏，主体的组成成分就是三个类…"}, {"id": "6922650152507277325", "title": "css interview", "desc": "而设为 border-box 时，属于 IE 盒模型，设置宽度和高度时，包含 content、padding 和 border。 样式系统从关键选择器开始，向左依次查找规则选择器的祖先元素，如果出现未匹配的情况会放弃规则，否则会左移直至匹配完成。因此在写样式时，应尽量选择 ID…"}, {"id": "6922106909554114573", "title": "变量提升变态面试题", "desc": "遇到块级作用域：老版本浏览器下：新版本浏览器1题2题同上分析3题分析：略4题"}, {"id": "6940254583897718821", "title": "掌握这些技巧，你也能成为前端offer收割机（我在3家大厂的前端校招offer心得）", "desc": "我就读于某普通一本工程专业，是一名大四学生，现已拿到节跳动offer。从大一开始投入以前端为主的全栈开发，独立开发过多个中型和小型项目。 在学校里读书的时候，我就是一个闲不住的人。最近因为一个偶然的契机，接触到了校招季，最后定下了本科毕业就工作的规划目标。 于是我在一个月的时间…"}, {"id": "6844903520559169544", "title": "由一道JS异步面试题，思考对异步问题的处理（1，暂时不用promise）", "desc": "按钮A按了之后，ajax请求的数据显示在input type=text框里，B按钮也是。 这只是针对跟我一样中级水平或偏下的人普及一下JS异步的运行原理。之后，我们来看一个异步引发的问题代码 这样就解决了点A只显示A的数据，点B只显示B的数据的问题。 好了，下面我要写一篇用pr…"}, {"id": "6897815695413739533", "title": "git与npm相关的一些问题（持续更新）", "desc": "秋招后的一些记录，看了很多东西想写下来，希望自己可以随时的查看，也希望有错误的地方大神可以指正。 其实感觉git很简单，看文档全部理解透彻点，这里主要是记录一下被问到过的问题，其实我一般在开发中真的可能比较依赖idea的那种图形化的处理方式，主要是比较清晰与准确吧。 ​ 步骤：…"}, {"id": "6844904098848833550", "title": "前端基础整理 | 网络相关（一）", "desc": "在 IP 协议在通信过程中，使用到的协议族的统称。 分层后的好处：如果互联网只由一个协议统筹，某个地方需要改变设计时，就需要把所有的部分整体替换掉。分层之后，只需要把变动的层替换掉即可。把各层之间的接口设计后后，各层内部就能自由改动了。 应用层决定了向用户提供应用服务时通信的活…"}, {"id": "6844904002195308557", "title": "Promise如何实现？", "desc": "从状态图变化可以看出，promise的executor函数只会调用resolve或reject，promise的最后状态一定变化，而且只有返回结果或返回错误一种可能。 示例代码中所有的promise.then都会返回相同的结果，实践中虽然很少这么使用，但也是个我之前不知道的点。…"}, {"id": "6906789937165795342", "title": "【Daily Interview】- 05 单词搜索", "desc": "从题目可知，这是类似于一个走迷宫的问题，我们可以套用回溯算法的公式。 显然，我们的小球能够往上下左右四个方向进行查找，而边界则是最外面的栅格。 上面两种情况说明触边，直接返回 false 即可。"}, {"id": "6951960616688943135", "title": "为了圆大厂梦，一年半前端人的求职路", "desc": "2018.9开始实习，2019.7毕业于某二本。老东家前端团队100人左右，社招基本不算实习经验，算是一年半经验出去战斗。"}, {"id": "6944980108478251016", "title": "面试小总结", "desc": "函数声明提升：函数的声明在执行前会被提升到该作用域顶部，所以可以把函数声明放在调用它的语句后面。 将变量声明提升，只会提升变量，⽽不会提升变量所拥有的值。 将函数声明提升，会把函数声明连同函数内的内容⼀块提升。 事件代理（Event Delegation），又称之为事件委托。是…"}, {"id": "6844904142415069197", "title": "面试题整理- 浏览器篇", "desc": "localStorage：除非被手动清除，否则将会永久保存。 sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。 localStorage 和 sessionStorage：可以保存 5MB 的信息。 从安全性来说，因为每次 http 请求都…"}, {"id": "6913807994262126599", "title": "【Daily Interview】- 15 翻转二叉树", "desc": "前面的文章里已经简单介绍了树和二叉树的基本概念，这里就不再赘述，我们直接来分析一下题意：根据示例，我们可以知道，所谓翻转二叉树，就是让二叉树的每个节点左右节点进行交换。 实际上，节点翻转之后，它们指向各自子节点的指针是不变的，所以才能完成上面的操作。 关于本题，其实还有一个故事…"}, {"id": "6844903647675940871", "title": "简单的Web应用，从数据的获取到页面的展示", "desc": "大神请绕道，如有说的不对的地方望指正。 应届毕业生在求职中，很多都是因为经验不足而不被录用（很牛的程序猿另说），在面试的时候不仅要对专业的技能熟悉掌握，最好是有自己的一些小作品小项目等等，才能博取面试官的青睐，于是很多毕业生开始自己的面试项目制作，记得回看刚出来求职的面试项目，…"}, {"id": "6844903831151575053", "title": "React之虚拟DOM到真实DOM经历了什么", "desc": "注：children这个值是一个字符串或者是一个数组。如果执行React.createElement的时候传入的参数大于3，那么children的值就是一个数组，其值为除前两个之外的所有属性 本文中的仅仅在表面层说明原理。并未深度剖析，如何错误还望指教。谢谢！"}, {"id": "6909002934038560775", "title": "【Daily Interview】- 08 斐波那契数", "desc": "对于大名鼎鼎的斐波那契数列，相信大家并不陌生，简单来说，就是斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。 事实上，虽然这个思路简单直接，但其算法复杂度是非常高的，即便题目限制了 n 的范围，计算的时候，依然等了好一会儿才算到结果（递归深度与 n…"}, {"id": "6974421285581357064", "title": "二叉搜索树", "desc": "二叉搜索树（BST）又称二叉查找树或二叉排序树，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势，所以应用十分广泛。首先一棵二叉搜索树是以二叉树来组织的。其次有排序的效果，任意结点的左子树"}, {"id": "6996811608756322334", "title": "从【if...else...】到【责任链】再到【composeAOP】，顺带把【传参】解决了~", "desc": "本篇是又一次强有力的函数式编程之代码优化实践好文，老掘友看了直呼：针不戳！新掘友看了，赶快按下了收藏键！还有灵魂画手配图，顶啊！"}, {"id": "6992767550543265829", "title": "前端万字面经——基础篇", "desc": "此文为前端 基础篇 后续会出 进阶篇 这些要都会保证你找工作不发愁，文章很长忍耐一下。建议点赞收藏万一找不到了哈哈。"}, {"id": "6956728664562073630", "title": "我离职了", "desc": "大家看到这篇文章的时候，我已经从老东家离职了，从有离职想法到找到新工作，期间经历了很多事情，也成长了许多。 本文就跟大家分享下我的这段经历，欢迎各位感兴趣的开发者阅读本文。"}, {"id": "6996841019094335519", "title": "金九银十，你准备好面试了吗? (附30w字前端面试题总结)", "desc": "“这是我参与8月更文挑战的第8天，活动详情查看： 8月更文挑战” 30W字前端面试题总结，值得收藏！"}, {"id": "6955129410705948702", "title": "Vue3发布半年我不学，摸鱼爽歪歪，哎~就是玩儿", "desc": "是从 Vue 2 开始学基础还是直接学 Vue 3 ？尤雨溪给出的答案是：“直接学 Vue 3 就行了，基础概念是一模一样的。“尤雨溪喊你学Vue3了！"}, {"id": "6993141036600000548", "title": "前端万字面经——进阶篇", "desc": "此文写到了前端面试中问到你开发中遇到的一些问题解决方法，还有Vue,React,Angular等一下常见的面试问题。"}, {"id": "7007691797421883406", "title": "HTML面试题收集", "desc": "ReadOnly和Disabled有何区别 相同点:都是使用户不能更改作用域中的内容 不同点: ReadOnly只对input(text/password),textarea有作用。Disabled对"}, {"id": "7005001846964092936", "title": "面试官：画一个边框宽度为0.5px的正方形叭。", "desc": "我们知道在写移动端页面时，有个经典的1px问题。该问题的原因是：在pc端的设计稿拿到移动端会产生视觉上的放大，解决该问题的方案就是将1px缩小为0.5px。 解决方法 1.直接写0.5px，不兼容。 "}, {"id": "7002574977354432549", "title": "政采云 2022 届校园招聘正式启动，欢迎你的加入！", "desc": "你离梦想的距离仅此一步，这一步请把你的简历砸向我吧！政采云有限公司有限公司致力于为政府采购打造一个适应”互联网+”新业态的云服务生态圈，为中国再造一个万亿级”政府淘宝“"}, {"id": "7004624740677582878", "title": "简答Vue相关的高频问题", "desc": "v-for/v-if优先级 项目中一般有两种场景： 前置条件成立才去循环渲染列表数据，从而渲染出每个数据对应的「节点」 循环渲染列表数据，根据某个数据的条件判断要不要渲染对应的「节点」 第一种场景 上"}, {"id": "6991724298197008421", "title": "2021.7  货拉拉、虾皮、有赞。。。高级前端岗面试整理", "desc": "最近朋友内推面试了几家公司（货拉拉、虾皮、有赞、乐信、Qtrade苹果树、富途、涂鸦、OPPO、微保、微众、元戎启行），也收获了满意的offer。整理了下面试遇到的问题，作为记录。 JS相关 JS原型"}, {"id": "7007598825699278885", "title": "LeetCode——长度最小的子数组（滑动窗口）", "desc": "题目描述 解题思路 1：初始化滑动窗口 2：核心循环体 3：判断返回 完整代码 题目反思 题目让我们求的是大于等于target的长度最小的子数组，而不是等于。"}, {"id": "7004129254069764133", "title": "漫画｜面试风暴", "desc": "面试是一件非常美妙的事情，也许会让你学到不少、也许会让你感叹万千、也许会让你焦急难安。可能会感到世界的参差、或是受到不公的评价、亦或者是看到大千世界。正好前两天开始了久违的求职，在求职的过程中，总会有"}, {"id": "6992006476558499853", "title": "React 中 setState 是一个宏任务还是微任务？", "desc": "最近有个朋友面试，面试官问了个奇葩的问题，也就是我写在标题上的这个问题。 能问出这个问题，面试官应该对 React 不是很了解，也是可能是看到面试者简历里面有写过自己熟悉 React，面试官想通过这个"}, {"id": "6997968693414084644", "title": "「硬核JS」图解Promise迷惑行为｜运行机制补充", "desc": "如果你对Promise+Eventloop相关执行顺序相关的题目感到无语以及不解，那可能需要看看此文，彻底Get Promise的执行顺序！"}, {"id": "7004707362263007245", "title": "面试字节时被吊打的基本数据类型", "desc": "基本数据类型 1、undefined和xx is not defined undefined表示变量定义后没被赋值或者函数没有定义返回值 xx is not defined 表示xx没有被定义 2、坑"}, {"id": "6844903885488783374", "title": "【1 月最新】前端 100 问：能搞懂 80% 的请把简历给我", "desc": "半年时间，几千人参与，精选大厂前端面试高频 100 题，这就是「壹题」。 在 2019 年 1 月 21 日这天，「壹题」项目正式开始，在这之后每个工作日都会出一道高频面试题，主要涵盖阿里、腾讯、头条、百度、网易等大公司和常见题型。得益于大家热情参与，现在每道题都有很多答案，提…"}, {"id": "6844903918753808398", "title": "30 道 Vue 面试题，内含详细讲解（涵盖入门到精通，自测 Vue 掌握程度）", "desc": "本文以前端面试官的角度出发，对 Vue 框架中一些重要的特性、框架的原理以问题的形式进行整理汇总，意在帮助作者及读者自测下 Vue 掌握的程度。本文章节结构以从易到难进行组织，建议读者按章节顺序进行阅读，当然大佬级别的请随意。希望读者读完本文，有一定的启发思考，也能对自己的 V…"}, {"id": "6981628129089421326", "title": "「百毒不侵」面试官最喜欢问的13种Vue修饰符", "desc": "前言 大家好，我是林三心，众所周知，修饰符也是Vue的重要组成成分之一，利用好修饰符可以大大地提高开发的效率，接下来给大家介绍一下面试官最喜欢问的13种Vue修饰符 1.lazy lazy修饰符作用是"}, {"id": "6844903776512393224", "title": "中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)", "desc": "当下，正面临着近几年来的最严重的互联网寒冬，听得最多的一句话便是：相见于江湖~🤣。缩减HC、裁员不绝于耳，大家都是人心惶惶，年前如此，年后想必肯定又是一场更为惨烈的江湖厮杀。但博主始终相信，寒冬之中，人才更是尤为珍贵。只要有过硬的操作和装备，在逆风局下，同样也能来一波收割翻盘…"}, {"id": "6862150415199240205", "title": "2020大厂web前端面试常见问题总结", "desc": "本篇收录了一些面试中经常会遇到的经典面试题以及自己面试过程中遇到的一些问题。通过对本篇知识的整理以及经验的总结，希望能帮到更多的前端面试者。1.web前端项目的结构是怎样的？文件有哪些命名规范？项目结"}, {"id": "6844903497800908807", "title": "前端面试之ES6篇（高产似母猪）", "desc": "这也是前端面试经常询问的问题，经常问你es6出现了哪些新的特性，平时又使用过那些。在编写此教程的时候，第一句话往往就是面试常常问到的地方，然后后面就是他的详细解释，面试要求的内容我会用*标记出来。写技术文档是真的累啊，虽然是看别人的文档，但是你得看很多，而且还得自己总结啊。所以…"}, {"id": "6988389914257653790", "title": "一些CSS知识点总结", "desc": "总结了一些面试常考的以及我个人常混淆的CSS知识点。不是完整的知识体系梳理，只是个人认为的高频知识点总结。"}, {"id": "6922266111715049486", "title": "【面试秘技】程序员跳槽获得超高涨薪幅度的谈薪秘技", "desc": "有个朋友今年跳槽失败，倒不是没面试上，而是已经面试上了好几个，但是薪资都不太满意，这不又找我吐槽来了么。今天我就偷偷分享一个超级秘籍，让你在谈薪的时候尽可能拉升工资涨幅。其实这个话题不好聊，主要是这个度非常难以掌握，一不小心过火了，这个Offer就泡汤了。很多朋友不敢要高薪水，…"}, {"id": "6995819662558625799", "title": "面试官常问的HTTP缓存到底是什么？", "desc": "面试官常问的HTTP缓存到底是什么？ 当我们第一次进入一个网页后再次刷新时，速度会比首次加载快很多，很多人知道这是浏览器缓存，但却说不出来具体一二，而这恰恰就是面试官非常爱问的问题.... HTTP缓"}, {"id": "6994033899324047373", "title": "TCP面试考点记录", "desc": "前端同学TCP面试考点记录，总结了TCP连接的实现以及数据传输和控制方式，也参考提炼了他人的TCP相关内容。"}, {"id": "6904040831800311821", "title": "jsliang 求职系列 - 37 - React - 虚拟 DOM", "desc": "jsliang 思路：通过 3 个要点讲解虚拟 DOM。 创建 DOM 树。用 HTML 解析器分析 HTML 元素，创建一棵 DOM 树。 创建 CSS 规则树（CSS rule tree）。用 CSS 解析器解析 CSS 文件和 inline 样式，生成页面的样式表。 创建…"}, {"id": "6998696535265378311", "title": "手写Object.assign()", "desc": "浅拷贝Object.assign() 作用：主要是将所有可枚举属性的值从一个或多个源对象复制到目标对象，同时返回目标对象。 语法： 其中target是目标对象，sources是源对象，可以有多个，返回"}, {"id": "6964391050337058847", "title": "前端百题斩【006】——js中三类字符串转数字的方式", "desc": "js中字符串转数字主要有三种方式：利用转换函数、强制类型转换、利用js变量弱类型转换。每天进步一点点，大公司将不再远。"}, {"id": "6932370160787390477", "title": "前端面试基础的一些整理（持续更新中。。。）", "desc": "1.url 体现区别，get请求能在URL上体现，post不可以。 2.长度限制，get请求有长度限制，但并非HTTP协议的限制，是浏览器和web服务器的限制，因此不同浏览器和web服务器限制成都不一样。 3.缓存区别, get请求一般用于查询，可以不用每次都与数据库交互，利用…"}, {"id": "6844903878261997581", "title": "【Step-By-Step】高频面试题深入解析 / 周刊06", "desc": "本周是继承专题，在开始之前，需要先了解构造函数、原型和原型链的相关知识。 构造函数和普通函数的区别仅在于调用它们的方式不同，任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数；任何函数，如果不通过 new 操作符来调用，那么它就是一个普通函数。 实例拥有 cons…"}, {"id": "6844904023116644360", "title": "经典大厂前端面试题（含解析）基础篇(一)", "desc": "基本类型转换时，首先会调用 valueOf，然后调用 toString。(这两个方法可以被重写) 遵循IEEE 754 双精度版本（64位）标准的语言都有的问题。计算机无法识别十进制，JS会将十进制转换为对应的二进制（二进制即：0 和 1）。 这样看似没问题啊。为什么会有BUG…"}, {"id": "6972395146599989279", "title": "前后端分离常用的认证方式（ Session 、JWT）", "desc": "HTTP 是无状态的，所以无法分辨是谁发起的请求。前后端分离中前后端的交互是通过 API 进行的，那么其中的认证是少不了的。前后端分离中常用的认证方式有下面几种： Session-Cookie 验证 "}, {"id": "6844904135452524552", "title": "万万没想到，你是个套路满满的parseUrl", "desc": "当你看到parseUrl的时候，首先映入眼帘的应该是曾几何时在面试的时候，或多或少都有被提及到的问题我们不用太关心面试方面的东西，放轻松，不要带着心理压力，即使它是套路满满，我们也依然能轻松搞定par"}, {"id": "6968399560162951204", "title": "变量提升与暂时性死区", "desc": "从变量提升说起 在 ES2015 之前，JS 引擎用 “var” 这个关键字声明所有的变量。 在 “var” 时代，有一个特别的现象：**不管我们的变量声明是写在程序的哪个角落，最后都会被提到作用域的"}, {"id": "6898116187306229774", "title": "『面试的底气』—— 手写call、apply、bind", "desc": "在初级前端面试中，只会问 call、apply、bind 的概念和用法。在中高级前端的面试中，不会问这么低级的问题，一般会叫你手写 call、apply、bind ，这样即考察了你对 call、apply、bind 的概念和用法的掌握程度，也考察了你对 Javascript 的…"}, {"id": "6844903794333974535", "title": "来聊一道前端面试题吧", "desc": "金三银四，技术论坛上诸如：阿里、头条、腾讯….面经层出不穷，朋友圈很多小伙伴都在找工作也遇到了各种各样的麻烦。本文希望那些在准备面试的过程中蕉绿的童鞋别僵化了自己的思维，以自己曾经遇见到一道面试题为引，用自己对待问题的想法行文，天马行空，从僵硬的知识点中跳脱出来一起思考，内容简…"}, {"id": "6844904046260666381", "title": "React-Redux 100行代码简易版探究原理。", "desc": "各位使用 react 技术栈的小伙伴都不可避免的接触过redux + react-redux的这套组合，众所周知 redux 是一个非常精简的库，它和 react 是没有做任何结合的，甚至可以在 vue 项目中使用。 它就是利用闭包管理了 state 等变量，然后在 dispa…"}, {"id": "6996569310558683173", "title": "常见前端面试题 - LRU", "desc": "前端LRU算法的简单实现。LRU是一种常见的 `缓存淘汰算法`，其基本思想是，如果数据最近被访问过，那么将来被访问的几率也比较高。"}, {"id": "6844904008335753224", "title": "面试问题：接招人事(非技术性问题)", "desc": "持续更新中... 回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、性格中最积极的部分、做过的最成功的事，主要的成就等，这些回答关于学习或者生活都可以，但要…"}, {"id": "7007991848308310024", "title": "阿里社招两年前端面经", "desc": "反正我认真复习认真总结，认真对待每一场面试，把每一场面试都当成一次学习的机会，你要换个思路不要把面试当成一场非赢即输的考试，而是把它当成一次学习交流的机会，面试终究是双向选择的，不成功即成仁。"}, {"id": "7007965963819679751", "title": "24个 JavaScript 循环遍历方法，你都知道吗？", "desc": "今天我们来看点基础知识，看看JavaScript中的那些循环遍历方法： 一、数组遍历方法 1. forEach() forEach 方法用于调用数组的每个元素，并将元素传递给回调函数。数组中的每个值都"}, {"id": "7007031572238958629", "title": "7张图，20分钟就能搞定的async/await原理！为什么要拖那么久？", "desc": "前言 大家好，我是林三心，以最通俗的话，讲最难的知识点是我写文章的宗旨 之前我发过一篇手写Promise原理，最通俗易懂的版本！！！，带大家基本了解了Promise内部的实现原理，而提到Promise"}, {"id": "7004638318843412493", "title": "最新的前端大厂面经（详解答案）", "desc": "Hello 大家好 我是鲨鱼哥 最新的大厂前端面试题出炉啦 助力大家金九银十拿到好offer 大家冲起来～～"}, {"id": "7007243669921071117", "title": "我为什么喜欢手抄代码？", "desc": "前言 我之前写过很多个人经历，都在说到我自己手抄了很多代码，知识点到A4纸上，大家说这种方法非常硬核，现在多同学给我起了外号，励志哥，努力哥，因为我的公号名字就叫前端要努力 今天就和大家好好聊一聊，我"}, {"id": "7007416743215759373", "title": "这可能是掘金讲「原型链」，讲的最好最通俗易懂的了，附练习题！", "desc": "前言 大家好，我是林三心，相信大家都听过前端的三座大山：闭包，原型链，作用域，这三个其实都只是算基础。而我一直觉得基础是进阶的前提，所以不能因为是基础就忽视他们。今天我就以我的方式讲讲原型链吧，希望大"}, {"id": "7007827603302121486", "title": "【高频面试题】Promise系列（all与allSettled）", "desc": "目录 Promise.all的使用 Promise.allSettled的使用 一、Promise.all的使用 1） 有一个reject时 2） 全部resolve时 二、Promise.allSe"}, {"id": "7005402640746020877", "title": "面试贼坑的十道js面试题（我只会最后一题）", "desc": "前言 现在前端面试经常遇到奇葩的题，有的听都没听过，何谈能答对，这些是小伙伴们投稿的题，大家来看看，出这些题的人，都优秀到不行啊，想要拿到满意的offer，不得不卷啊，头疼一批 typeof null"}, {"id": "7000659708948250660", "title": "我为什么坚持6点起床", "desc": "因为穷 前言 我组织的六点起床俱乐部已经有近两千人，因为不是强制早起打卡，每天坚持打卡的人加起来大概20%左右，这些坚持早起的同学落到他们自己身上就是100% 没有强制打卡因为我觉得打卡不是目的，目的"}, {"id": "6989422484722286600", "title": "2021年我的前端面试准备", "desc": "本文1.6W字面试准备包含思路以及基础面试题整理，较适用于初、中级前端，另外文末整理了思维导图，可以更加直观的找到你的知识盲区，希望能给你带去些许帮助，助力你找到心仪的好工作。"}, {"id": "6986237263164211207", "title": "后端一次给你10万条数据,如何优雅展示，面试官到底考察我什么?", "desc": "背景 面试题:后台传给前端十万条数据,你作为前端如何渲染到页面上? 回答者A：我有句话不知当讲不当讲,这什么鬼需求。"}, {"id": "7005751368937897991", "title": "关于Vue代码可读性的几点建议 | 评论有奖", "desc": "本文已参加评论抽周边礼物活动，掘金徽章*2，评论相关内容即可参与抽奖 [查看详情](https://juejin.cn/post/7000643252957216782 \"https://juejin"}, {"id": "7001998089938534437", "title": "我是如何用这3个小工具，助力小姐姐提升100%开发效率的", "desc": "前言 简单的知识点搭配合适的业务场景，往往能起到意想不到的效果。这篇文章会用三个最基础人人都知道的前端知识来说明如何助力运营小姐姐、公司48+前端开发同学的日常工作，让他们的工作效率得到极大地提升。 "}, {"id": "7002839760792190989", "title": "webpack 十连问你能接住几题", "desc": "前言 面试题只是一个引子，快速刷题就是背（面试官问你，但是他不一定很深入），想深入理解还是得花大量精力； webpack 的构建流程是什么 初始化参数：解析webpack配置参数，合并shell传入和"}, {"id": "6987549240436195364", "title": "前端面试知识点（一）", "desc": "这要是都会，薪资估计在 70W上 左右、面试，拿来吧、子奕，文章好长，要忍一忍、告辞、巨型八股文、求答案！！！！一个都不会，我屌不屌、好家伙，题目的答案都能出几本书了、离谱！"}, {"id": "7007688645779914760", "title": "【高频面试题】大厂你来挑（一）", "desc": "目录 如何实现sleep的效果（es5或者es6） 箭头函数中this指向举例 一、如何实现sleep的效果（es5或者es6） (1)while循环的方式 执行sleep(1000)之后，休眠了10"}, {"id": "7007296290941861925", "title": "没项目经验，搞定这7个前端项目让你脱颖而出", "desc": "很多面临毕业的学生想入行前端，但苦于缺少项目经验，不知道做个什么项目能够达到公司的用人要求。也有很多前端的初学者，不知道做什么项目能找到工作。还有就是刚刚工作几年的前端工程师，可能在公司做的东西每天就"}, {"id": "7007219507055984648", "title": "详解面试中常常被问的浏览器输入URL到页面展示，总有你不知道的", "desc": "这个问题在面试中，基本属于必问的了，鉴于在面试中的时间局限，所涉及到的知识点可能大家也就一笔带过，本文将详细解释每一个步骤，总有你不知道的"}, {"id": "7007224479218663455", "title": "浅谈 JavaScript 变量提升", "desc": "在 ECMAScript6 中，新增了 let 和 const 关键字用来声明变量。在前端面试中也常被问到 let、const和 var 的区别，这就涉及到了变量提升、暂时性死区等知识点。"}, {"id": "7006700954716209183", "title": "整理vue面试题", "desc": "本期面试题干货，记得来看哦，整理挺费时间的，希望对你有用，题目大概如此，思路还是靠自己去摸索，答案仅供参考……"}, {"id": "6989147095735369765", "title": "【1】「2021」前端总结CSS之Flex篇（二）", "desc": "1、Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 Flex六个属性 2、flex-direction属性 3、flex-wrap属性 4、flex"}, {"id": "6991860244347355173", "title": "原型&原型链 | 8月更文挑战", "desc": "本文是找了一些资料(文章)看了后做的总结，有些地方可能理解的不是很深刻，有错误一定要帮我指出来，非常感谢[抱拳]"}, {"id": "6844903618911404045", "title": "注意！是TCP不是HTTP的3次握手与4次挥手（#...#）", "desc": "在开发中,时不时会听到关于HTTP的三次握手和四次挥手，在面试中也会被问道HTTP的三次握手和四次挥手，很多开发者可能都会有这这种误解，认为三次握手和四次挥手都是HTTP协议的，实际上，这是错误的。正确的来说，三次挥手与四次握手是在TCP中进行的。 首先Client端发送连接请…"}, {"id": "6844904202594942990", "title": "从一脸懵逼到掌握闭包 🍉", "desc": "假设上面三行代码在一个立即执行函数中。 三行代码中，有一个局部变量local,有一个函数foo，foo里面可以访问到local变量。那么这就是一个闭包。 函数 和 函数内部能访问到的变量 （也叫环境） 的总和，就是一个闭包。 大部分的闭包都是以函数套函数的形式来进行展示的。 l…"}, {"id": "6920488455403208711", "title": "void 和 undefined", "desc": "解释这题之前，先来介绍下怎么想到它的。 这一切起源于，void 0。 如果我们观察ts、bable的转换结果或者一些js库，我们会发现在需要使用undefined的部分大都使用了void 0。 直到昨天，我才去了解了下void 0是个啥，然后发现真有意思。 首先，void 0结…"}, {"id": "6844903582311907341", "title": "前端菜鸟帝都面试记 super | 掘金技术征文", "desc": "在前面几篇文章中谈了美团、春雨医生、今日头条、第四范式、玩吧，我觉得很有收获的几家公司，现在把其他几家不错的公司面试经历分享给大佬们。 在狗年附近大大小小的面试了10多家公司，大公司和小公司都有。 D 轮 + 公司： 百度外卖，美团外卖，今日头条商业广告部门。 看中前端基础的，…"}, {"id": "6913802429263773710", "title": "javasrcipt中apply，call与bind的区别？手写一个call，apply，bind？", "desc": "如上代码可知：call和apply接收的第一个参数都是一个作用域，在作用域里面num都被赋了不一样的值，所以最后this.num输出不一样的值。 apply接收的参数是一个数组，这个数组的全部会按照顺序传递给执行的函数。 所以apply的第二个参数只能是数组或者argument…"}, {"id": "6870809105095720973", "title": "CSS响应式布局", "desc": "设置meta标签中name=\"viewport\"设置视图标签(viewport)来告诉浏览器，使用设备的宽度作为视图宽度并禁止初始的缩放。MediaQueries媒体查询媒体查询可以针对不同的媒体类型"}, {"id": "6936091276123045924", "title": "前端面试之JavaScript基础（七）——  Event Loop", "desc": "事件循环（Event Loop）机制是异步编程的关键知识点，理解该机制有利于我们更好的理解和书写异步代码。我们都知道 JavaScript 是基于 单线程 设计的，当我们的代码都是同步执行时就会很容易产生 阻塞。此时，为了避免阻塞的发生就诞生了 异步编程 ，为了支撑异步编程代码…"}, {"id": "6844904035074441229", "title": "查漏补缺面试题系列一（文章有点长）", "desc": "面试官：请实现三栏布局，尽可能多的方式。 JavaScript 是 ECMAScript 规范的一种实现，作为一个前端er，JavaScript基础知识是必备的技能。在面试中基础知识一定会被面试。 本着经验发现，小厂只问项目（他需要你入职既能上手干活）；中厂先问基础（不是很深）…"}, {"id": "6909492639842697229", "title": "[每日一题]ES6中为什么要使用Symbol？", "desc": "2020.12.23日刚立的flag，每日一题，题目类型不限制。 但是在ES6种新加入一种新的数据类型Symbol。 Symbol表示独一无二的值。 需要说明一下：这里的字符'saucxs'是该Symbol的一个描述，但是并非两个参数都是'saucxs'。 特性2：Symbol…"}, {"id": "6900565081147637767", "title": "Js 基础  [ 数据类型，常用数组方法，常用对象方法，事件模型，事件对象，冒泡，事件委托/代理 ]", "desc": "前言 尽管各种层出不穷的框架替代了Js的各种操作，归根结底，它还是用Js来实现的 , 一个扎实的基础可以为以后进阶起到良好的作用 目录 Javascript 数据类型 Javascript 常用数组操"}, {"id": "6847902222513242126", "title": "《前端面试总结点线面》之点-Vue篇", "desc": "本文不成文，谨慎阅读。 《前端面试总结点线面》系列是为了收拢杂而乱的前端领域知识，由点及线，再涉及面，目的是为帮助广大前端同学复习巩固或查漏补缺或增删改查，为了更好的建立前端领域知识体系，为了更好的为前端面试做好准备，从而做一个合格、进步的前端开发工程师。 a). 编译模版的静…"}, {"id": "6981822625186054174", "title": "web前端高级JavaScript - 两道变态到吐血的关于变量提升的大厂面试题", "desc": "之所以说是两道“变态”的面试题，因为这两类JavaScript代码在运行时不按常理出牌，究其根本原因就是：在运行的过程中，会多出一个私有的块级上下文，从而导致运行结果与常规不同。下面我们就来具体分析一"}, {"id": "6844904051113459720", "title": "这一次， 我们好好的聊一聊网络", "desc": "要实现应用程序之间的交互。 我们需要一个能够在浏览器和web服务器之间传递请求和响应的机制。 由于请求和响应都是由0和1组成的数字信息， 所以， 我们需要的是一种能够将数字信息搬运到指定目的地的机制。 它的基本思路是将数字信息分割成一个一个的小块， 然后装入一些被称为包的容器中…"}, {"id": "6844903984877010958", "title": "记一次微信前端面试", "desc": "1. 手写 add(a, b)函数 2. 对上面的函数，你会写怎样的测试用例呢？ 3. 数组和链表的区别，有何使用场景的不同？ 4. 请求报文有哪些组成，请求参数置于请求报文何处？ 5. 缓存策略，如何询问服务器该资源是否过期？ 6. 进程的线程的区别？单线程和多线程的优缺点？…"}, {"id": "6844904196936843272", "title": "五分钟搞懂 Session、Cookie和Token", "desc": "众所周知，「HTTP 是一种无状态协议」，即每次客户端发送请求时，对于服务端来说接收到的都是一个全新的请求，因此服务器并不知道客户端的历史请求记录。 简单的，用户登陆一个购物商城，往自己购物车中加入了商品，那么就面临一个问题，要区分都有哪些人登陆过商城，哪些人往自己的购物车中放…"}, {"id": "6844903825090805774", "title": "前端实习面试的一些建议", "desc": "简历制作是很重要的一个环节，一份好的简历会给面试官留下很不错的印象，也有助于你顺利通过简历筛选环节。 简历制作过程中重点要突出你在校园内参加过的项目和竞赛以及获得的成就，这是简历筛选中最看重的。学历的高低并不是最重要的，只要你有着不错的项目经历，都是有机会参加面试的。在我们实习…"}, {"id": "6988764262780895239", "title": "JavaScript深入之作用域和作用域链与闭包", "desc": "一、作用域 任何程序设计语言都有都有作用域的概念，简单的说，作用域就是变量和函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域分为全局作用域和局部作用"}, {"id": "6991483934714363918", "title": "前端常见的笔试题", "desc": "数组去除重复元素 将数组扁平化且去除重复的元素，最后升序输出 深拷贝 输入一个字符串，分割该字符串的每个字符然后重新排列，输出可能排列的所有方式，如：输入 'ab',输出 'ab' 'ba' 实现冒泡"}, {"id": "6980327494196936735", "title": "js面试三之ES6", "desc": "一、变量相关（let、var、const、function） let、const 与 var 的区别（五个）: 二.模板字符串 模板字符串用反引号表示，可以在里面直接使用字符串，还可以使用变量、表达式"}, {"id": "6955653137608736782", "title": "前端面试必刷手写题系列 [1]", "desc": "1. Object.keys() 是什么 MDN传送门 直接看例子吧 如果你想获取一个对象的所有属性,，甚至包括不可枚举的，请查看 Object.getOwnPropertyNames。 简单手写实现"}, {"id": "6940774044694216712", "title": "「高频面试题」浏览器从输入url到页面展示中间发生了什么", "desc": "“在浏览器中，从输入URL到页面展示，中间发生了什么？”这是一道经典的高频面试题，其中涉及了网络、操作系统、web等一系列的知识。接下来我们一起来看看要怎么回答这道题。 用户输入URL，浏览器会根据用户输入的信息判断是搜索内容还是请求的URL。如果是搜索内容，就将搜索内容+默认…"}, {"id": "6979950625840693279", "title": "css面试", "desc": "选择器优先级 选择器分为可以分为： 1.四大选择器：id选择器、类选择器、标签选择器、通配符选择器。 2.关系选择器：后代选择器（div p）、子代选择器（div>p）、兄都选择器[div+p,div"}, {"id": "6926872402307579911", "title": "轻松教你使用纯css实现H5-Doorin编辑器中的水波动画", "desc": "css3给我们前端开发带来了很便利, 我们可以使用css3 的新特性实现各种形状和动效, 接下来笔者就来带大家介绍如何用css3实现 H5-Dooring编辑器 中的水波动画. 由于生成gif的工具比较弱(在线求好用的mac版gif录频生成工具...), 我不得不上传个原图, …"}, {"id": "6979393124351082527", "title": "2021前端面试（2）", "desc": "1. js 中整数的安全范围是多少 安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，能够被“安全”呈现的最大整数是 2"}, {"id": "6929421612655738894", "title": "翻译系列之你能回答7个闭包的面试题么？", "desc": "作为js开发，必须知道闭包是什么。在前端面试中，很可能会被问到闭包的概念。 我整理了7个有趣且比较有难度的问题。 准备好一只笔和一张纸，尽量不看答案或者敲代码运行。我估算你大概需要30分钟。 这stack运行看起来正常的，但有一个小小的问题，items属性被暴露了，所以任何人能…"}, {"id": "6991819508482572302", "title": "算法的复杂度估算", "desc": "在所有的算法面试中，有一个问题几乎是逃不掉的 — 你的算法时间复杂度是多少？在一般的企业面试中，算法复杂度分析是我们绕不过去的坎儿。"}, {"id": "6854573222395019272", "title": "2020前端面经 | 迪卡侬", "desc": "入职迪卡侬IT部门，坐标上海总部 。经历了3个多月，终于拿到了迪卡侬的offer，紧张程度堪比高考。 先说下我的情况，前端工程师，工作五年，喜欢各类运动，尤其是骑车。喜欢英语，每天坚持学英语（偶尔偷懒O(∩_∩)O），喜欢写博客做技术分享。 其实2019年我就在一次公开招聘会上…"}, {"id": "6844903997564796936", "title": "Vue面试经常会被问到的面试题", "desc": "看看面试题，只是为了查漏补缺，看看自己那些方面还不懂。切记不要以为背了面试题，就万事大吉了，最好是理解背后的原理，这样面试的时候才能侃侃而谈。不然，稍微有水平的面试官一看就能看出，是否有真才实学还是刚好背中了这道面试题。 MVVM 是 Model-View-ViewModel …"}, {"id": "6844903768060854286", "title": "如何招一个靠谱的前端", "desc": "刚看了下面试记录，有 99 场了。前两天在内网分享了一点面试经验，索性也发到掘金，勉强维持下活跃度这样子……面试官可以参考下面试思路，当然所有开发同学都可以看看，或许会对如何自我提升产生些新的思考。 我一直觉得面试就像相亲，除了考察面试者的硬性能力是否过硬，也得看缘分。缘分这一…"}, {"id": "6844904142243102728", "title": "腾讯大厂面试题", "desc": "腾讯一面：css垂直水平居中响应式布局移动端适配pc、h5一套代码合两套代码的优劣浏览器兼容写法js跨域[]==0计算机网络浏览器缓存原理（200和304）xsscsrf防攻击的解决方案Vuevue-"}, {"id": "6878455733131116551", "title": "前端【基础知识】 ⑤Http、Ajax、跨域（看图轻松掌握HTTP面试相关知识）", "desc": "根据慕课网的《快速搞定前端技术一面 匹配大厂面试要求》课程所整理的题目，陆续更新。如果你觉得本文相关知识点你已经掌握，你可以查看我之前的相关文章哦 ⑧Eatg 是一个可以与Web资源关联的记号（ETag没改变，则返回状态304然后不返回，这也和Last-Modified一样。测…"}, {"id": "6844903790651375623", "title": "2019 面试准备 - 图片", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 在我们日常…"}, {"id": "6973072516763877384", "title": "浏览器原理-浏览器缓存和本地存储篇", "desc": "思维导图 浏览器的缓存 浏览器的缓存分为两种 强缓存 和 协商缓存。 浏览器缓存资源的位置放置四个地方 Service Worker, Memory Cache, Disk Cache, Push C"}, {"id": "6896604375645585421", "title": "jsliang 求职系列 - 18 - 本地存储", "desc": "浏览器存储是面试中较为基础的知识点，面试中提问频率中等偏下，往往 5/6 家会有 1 家出一道缓存题。 浏览器的本地存储主要分为 Cookie、Web Storage 和 IndexedDB。 而 Web Storage 分为 Local Storage 和 Session S…"}, {"id": "6970569912180244516", "title": "面试官：如何正确的判断Javascript中的数据类型？", "desc": "面试官：如何正确的判断Javascript中的数据类型？如何判断对象类型和原始类型？如何实现instanceof？"}, {"id": "6919424158396841998", "title": "JavaScript复习大纲（个人总结）", "desc": "内置类型 js内置类型有哪些？ js中有七种内置类型，而七种内置类型又分为两大类型：基本类型和对象。 基本类型中包括：null,undefined ,string,int,boolean,symbol"}, {"id": "6982105469531717669", "title": "JS-Array常用方法总结", "desc": "创建数组 不要用 new Array()创建 , 直接用字面量创建： 索引 索引访问数组 找出某个元素在数组中的索引 array.indexOf(2)// 1 基础增删数组 末尾添加：array.pu"}, {"id": "6989513100856672293", "title": "前端面试知识点梳理——js基础面试题", "desc": "var 和 let const的区别 var是ES5语法，let、const是ES6语法；var有变量提升 var和let是变量，可修改；const是常亮，不可修改 let const有块级作用域，v"}, {"id": "6995494424411111437", "title": "一道让我睡不着的Promise面试题", "desc": "先把题目贴出来 公总号：手摸手前端进阶 看完这道题，你的答案是什么呢？ 好啦～，我直接贴出正确答案： 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 so，你做对了么？  是不是跟我一"}, {"id": "6844904000815366157", "title": "HTTP 之 options预请求", "desc": "options：与head类似，是客户端用于查看服务器的性能 。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限 预请求就是复杂请求（可能对服务器数据产生副作用的HTTP请…"}, {"id": "6922801981815783432", "title": "常见面试题总结（二）", "desc": "个人理解：react15之前，存储虚拟dom的结构是类似数组的树形数据，采用深度优先的先序遍历算法进行diff对比，这就使得一旦开始遍历便无法中断，否则树形结构难以找到上次中断的索引，如果dom树结构庞大，则diff算法消耗时间过长（超过16.66ms）就会造成卡顿。所以为了解…"}, {"id": "6844904161985708046", "title": "面试中如何实现一个高质量的JSONP", "desc": "最近面试中问到候选人 JSONP ，发现大多数候选人 JSONP 原理都可以回答正确，但是如果让写代码实现一个 JSONP 函数，有很多人都写不出来，或者是考虑不全面，写出来的代码没法使用。 接下来我们一起来看，如何实现一个高质量的 JSONP 。 全称 JSON with P…"}, {"id": "6936963383208083492", "title": "谈谈我对面试的理解", "desc": "大家好，今天想给大家分享一下面试相关的知识和问题;最近忙着招聘社招和校招实习生,也有很多朋友咨询我说应该怎么准备面试,发现很多同学在面试的时候或多或少会存在一点问题，导致可能自己本身能力挺好但是最后却没有拿到理想的 offer。今天我简单介绍一下部分面试官面试的兴路历程吧。本文…"}, {"id": "6903528775015727112", "title": "一次面试的复盘", "desc": "这是一场线下面试，所以是面对面交流的，全程都是口述，没写代码（前一天被五道手写（真手写）算法题给虐的不要不要的），面试官好像是个工作了五年的🐧高级前端，不过人看着还是很友善滴。 这里我跟面试官巴拉巴拉了一些，然后说到我平时喜欢看各种程序员网站，比如说掘金，CSDN，牛客网。。…"}, {"id": "6965129613006045192", "title": "【前端面试--JS】=> 谈谈json与jsonp的区别?", "desc": "面试官：说说 json和jsonp的区别吧 公司：腾讯 什么是JSON 　　前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。 "}, {"id": "6973965991201996814", "title": "DOM 事件体系", "desc": "DOM 事件流 前置知识 在理解事件流之前，大家首先要对以下三个名词有确切的认知 事件流：它描述的是事件在页面中传播的顺序。 事件：它描述的是发生在浏览器里的动作。 这个动作可以是用户触发的，也可以是"}, {"id": "6844904021237448718", "title": "JS面试考题记录", "desc": "箭头函数的this指向在定义的时候继承自外层第一个普通函数的this。 箭头函数本身的this指向不能改变，但可以修改它要继承的对象this。 箭头函数的this指向全局，使用aguments会报未生命的错误。 箭头函数相对于普通函数语法更简洁优雅。 如果_bind 返回的函数…"}, {"id": "6844903504872488968", "title": "面试分享：一年经验初探阿里巴巴前端社招", "desc": "一般阿里社招都是招3-5年的P6+高级工程师，当初自己一年经验也没有想过有这个面试机会。 虽然没想着换工作，但是经常关注一些招聘网站的信息，某一天，在某boss上有个人找我，叫我发一下简历，我一看是阿里的某技术专家，虽然之前也有阿里的在某boss上给我要简历，但是我深知自己经验…"}, {"id": "6844904194801926157", "title": "从输入URL到渲染全过程", "desc": "努力不一定会成功，不努力就一定不会成功。Hello 大家好！我是奔跑的pig！ 下面我将“从输入URL到渲染的全过程”大概的描述出来，再对其过程加以解释，了解过程中可以做哪些优化。文章内容有点长，需要有足够的耐心看完哟！！下面我要开始啦！ 注意：输入网址之后，会查找内存缓存，没…"}, {"id": "6971624574085496862", "title": "最全的 Vue 面试题+详解答案", "desc": "最全的 Vue 面试题+详解答案 前言 本文整理了高频出现的 Vue 相关面试题并且附带详解答案 难度分为简单 中等 困难 三种类型 大家可以先不看答案自测一下自己的 Vue 水平哈 如果对原理感兴趣"}, {"id": "6844903949456113672", "title": "2019-大龄前端如何准备面试之手写题", "desc": "今年和以往一个区别就是有一些大厂增加了手写前端逻辑 或者 收集算法这个环节。前端的一些语言特性，异步控制相对好准备，大多都是Promise的使用外加递归。算法就相对来说难准备一些。需要一个长时间的积累。本文分几类来举例。抛转引玉。 这部分主要考察对于js语言本身的理解，如thi…"}, {"id": "6844903752131067917", "title": "一道有意思的面试算法题", "desc": "新年第一篇文章，先祝大家新年快乐！！那么接下来进入正文。 前阵子突发奇想，突然开始刷leetcode。其中刷到了一道有意思的题目，发现这道题是当时秋招的时候，腾讯面试官曾经问过我的题目。于是分享给大家看下。 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两…"}, {"id": "6914823114299817997", "title": "[每日一题]面试官问：JS引擎的执行过程（一）", "desc": "2020.12.23 立的 flag，每日一题，题目类型不限制，涉及到JavaScript，Node，Vue，React，浏览器，http等领域。 我们把这个分为2篇文章讲。 本篇讲：语法分析和预编译阶段。 下一篇讲：执行阶段。 js是一种非常灵活的语言，理解js引擎的执行过程…"}, {"id": "6844903760582410254", "title": "「前端面试题系列2」如何实现一个圣杯布局？", "desc": "最近，有个朋友向我诉苦说，面试的时候突然被问到了如何实现布局和原理，有点懵。之前JavaScript的部分回答得挺好的，偏偏在这里翻船了，完全没有思路，后面的面试状态一落千丈。结局也如他所料，没有被录取。 我给这个朋友做了解答之后，回家整理出此文。希望其他小伙伴面试中，再被问及…"}, {"id": "6995179944754020359", "title": "一起来学习js的闭包", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 什么是闭包 《JavaScript高级程序设计》对闭包的解释，闭包是指有权访问另一个函数作用域中的变量的函数。 这概念可能不是很好理解，我"}, {"id": "6933858483905396749", "title": "前端面试之JavaScript基础（三）——  作用域", "desc": "先上干货，作用域是一套管理和查找标识符（变量）的规则。现在看来作用域的概念还有些抽象，不过没关系，接下来我会带大家更深入的理解作用域。 JavaScript 虽然被归类为 解释执行 语言，但是在实际的运行过程中仍然具有 编译 这个步骤。只是相对于传统的编译语言来说，它没有大量的…"}, {"id": "6845166890659086344", "title": "32道面试题详解，看看有你想要的吗？", "desc": "1. undefined 和 null 有什么区别？ 2. &&(逻辑与) ||(逻辑或)运算符能做什么？ 3. 使用 + 或一元加运算符是将字符串转换为数字的最快方法吗？ 根据MDN 文档，+(一元正号)是将字符串转换为数字的最快方法，因为如果值已经是数字，它不会执行任何多余…"}, {"id": "6844903501248593934", "title": "阿里实习转正1个月了，记录下从实习到校招的面试历程|掘金技术征文", "desc": "lz 本科，前端开发技术渣。一字一字码出来的实习和校招经历，希望大家都能拿到自己心仪的offer ~ ~ 战线从寒假2月就开始了，一直持续到4月中。寒假期间2月底拿到美团实习散招offer，3月去北京美团实习，实习期间陆续拿到 网易游戏、腾讯音乐、支付宝 的暑假实习offer，…"}, {"id": "6844904120202051598", "title": "2020年年初前端面试题", "desc": "跳槽是早就计划好的，虽然因为疫情的原因耽搁了一个月，但实在是不想就这么混吃等死了，最终还是选择离职。前两周基本都是在试水的态度参加面试的，所以面得都不怎么样。在此，我必须真诚的给各位一个忠告，千万不要有这种心理，因为我的这种心理导致前期错过了一些还不错的公司T_T。 我面试的是…"}, {"id": "6844904132071915527", "title": "「一道面试题」输入URL到渲染全面梳理上-网络通信篇", "desc": "先来简单介绍下域名结构，有些前端同学可能不太了解，域名是在 Internet 上用于解决IP地址的一种方法，一个完整的域名由2个或2个以上的部分组成，各部分之间用英文的句号 . 来分隔 拿 www.qq.com. 来说，等等，是不是多打了一个点，当然不是多打，这个最后的 . 代…"}, {"id": "6886000134732627981", "title": "朝花夕拾 - 2020 1024", "desc": "2020 的 1024 程序员节快到了，从 2018 年写下第一篇文章， 至今已有 2 年多，还记得 2018 的 1024 写了篇 1024，快速打造你的文档库/静态博客。 应届生的我入职一家电信外包小公司，开始了前端工程师之旅。 至于其中曲折，因为太久了我就不哆嗦了，磨啊磨…"}, {"id": "6844903624947007496", "title": "前端工程师面试题(性能优化)", "desc": "前端面试中经常问的性能优化相关的问题"}, {"id": "6844903587919691784", "title": "想偷懒的话，toLocaleString 了解一下？", "desc": "hello~亲爱的看官老爷们大家好~最近沉迷于学习其他语言，有一段时间没写文章了。时间一晃就到了4月，再不写就怕彻底懒下去了。这次给大家分享 toLocaleString 的一点技巧，如果需要初始化数字或日期时，不妨考虑一下，会有偷懒奇效哦！ 注意！一般而言，数字与日期的显示是…"}, {"id": "6924918404444848136", "title": "彻底玩转图片懒加载及底层实现原理", "desc": "图片懒加载其实已经是一个近乎“烂大街”的词语了，在大大小小的面试中也会被频繁的问到，我在之前的面试中也被问到了图片懒加载的原因、实现方式及底层原理，但由于自己平时很少做“图片”相关的处理，对于“懒加载”也是知之甚少，所以在面试中问答的也不是很好。 今天，我将首先从浏览器底层渲染…"}, {"id": "6844903605414133773", "title": "看完这篇关于MVVM的文章，面试通过率提升了80%", "desc": "vue的特点不必多说(简单易用)。修改数据方便不需要记忆api方法,这都归功于Object.defineProperty,它可以在数据的设置和获取时增加我们自己的功能！(像墙一样) 如何将视图和数据关联起来呢?就是将每个数据和对应的watcher关联起来。当数据变化时让对应的w…"}, {"id": "6844903927276650509", "title": "新鲜出炉的2020年阿里前端校招笔试10道选择题", "desc": "听说昨天有个学弟参加了2020年阿里的前端校招笔试，做为一个前端怎么能错过这种机会，今天赶紧让他把题目发过来研究一下，这里贴出选择题供大家共同学习，因为没拿到标准答案，题目是我自己做的不保证都对，欢迎大家指正探讨，有标准答案了也会更新。 1. 以下关于Javascript执行引…"}, {"id": "6844903876856905741", "title": "关于这些天杭州各厂面试汇总（从JavaScript各种原理到框架源码）", "desc": "令人头疼的是并没拿到自己想要的 offer，理想的公司大多连面试机会都不给... 伤脑筋...明天还有两家电话面试，过了大半个月，还是打算继续面下去... **车：一下午全部面完，环境一般，每轮面试都等了很长时间，两轮技术面后又和HR聊了一个多小时技术问题，表示很无奈，从此对大…"}, {"id": "6844904034411741191", "title": "十几道含答案的大厂面试题总结", "desc": "年底了，又到了跳槽季啦，该刷题走起了。这里总结了一些被问到可能会懵逼的面试真题，有需要的可以看下～ 1. 说说JavaScript中有哪些异步编程方式? 1. 回调函数 回调函数是异步编程的基本方法。其优点是易编写、易理解和易部署；缺点是不利于代码的阅读和维护，各个部分之间高度…"}, {"id": "6970614431617122311", "title": "前端百题斩【014】——js中的这些“this”指向都值得了解", "desc": "this是javascript中的一个关键字，其使用方法类似于一个变量，是执行上下文中一个重要组成部分。其作用是可以在函数体内部获取当前的运行环境。"}, {"id": "6844903655041138702", "title": "前端面试&笔试&错题指南(三）", "desc": "Q1. 下面程序的输出结果是？ 分析下在method(fn,1)执行时，经历了什么： 首先两个参数fn和1会被放入arguments中，在arguments中第一个参数就是我们传入的函数；接下来fn执行，此时this没有绑定因此指向window，输出10。 然而到了argume…"}, {"id": "6906635440690823175", "title": "jsliang 求职系列 - 44 - 算法系列汇总", "desc": "前端，入门难；前端，要搞好很难。 现在面试我也是随缘刷题了，虽然在动态规划、贪心算法上有一些缺陷，不过对于字符串、数组、栈、队列、链表、树、深度优先搜索、广度优先搜索、回溯、滑动窗口、双指针等题目来说，我还是可以应付的。 按照每天刷一道题，一道题 15min~2h 来说，一瞬间…"}, {"id": "6844903850478927886", "title": "我们不背诵 API，只实现 API", "desc": "我认为，对于反复使用的方法，所有人都要做到“机械记忆”，能够反手写出。一些貌似永远记不清的 API 只是因为用得不够多而已。 在做面试官时，我从来不强求开发者准确无误地“背诵” API。相反，我喜欢从另外一个角度来考察面试者：“既然记不清使用方法，那么我告诉你它的使用方法，你来…"}, {"id": "6995829425560354853", "title": "必须搞懂的跨域解决方案", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 跨域是什么？ 跨域请求有没有发送到服务器端？ 同源策略限制哪些，不限制哪些？ 限制以下内容： Ajax请求。 Cookie、LoaclSt"}, {"id": "6844903940786487309", "title": "手写题:9道字符串类高频面试题", "desc": "点击关注本公众号获取文档最新更新,并可以领取配套于本指南的 《前端面试手册》 以及最标准的简历模板. 请使用最基本的遍历来实现判断字符串 a 是否被包含在字符串 b 中，并返回第一次出现的位置（找不到返回 -1）。 想要实时关注笔者最新的文章和最新的文档更新请关注公众号程序员面…"}, {"id": "6844904119338008590", "title": "美团点评 - 到店事业群 前端面经（3轮技术面+hr面）", "desc": "实现组件一个react组件A,传入src='hello world'和target = 'world'让target高亮显示。 结构体转换,数组结构转换成树形结构。时间复杂度是多少？hashmap的实现知道不？ 动画实现，css实现，js实现。如果阻塞了，卡了怎么办？ 关于算法…"}, {"id": "6989162108034220062", "title": "二叉树相关 - js描述", "desc": "起因 二叉树几乎是面试过程中必问的知识点，大多数描述过程都是通过C、C++、JAVA、python等语言实现，这里用js语言实现下一下类似的功能，前端、nodejs方向和全栈方向的同学可以作为参考。 "}, {"id": "6917059190548594696", "title": "聊一聊，面试为什么大厂钟爱问源码，真的是（问）造火箭=>（做）拧螺丝？如何读源码？", "desc": "最近身边不少玩的不错的同事跳槽，闲聊时候总会提到面试过程，提到最多的就是面试官问源码。网上很多人都认为，大厂面试的造火箭大炮，进去干拧螺丝的活，我相信很多小伙伴也有这个疑问。那为什么大厂依旧钟爱问源码？ 普遍现状：目前很多4-5年经验的做的还是自己第一第二年的事，明明前两年就掌…"}, {"id": "6974948716771803144", "title": "某在线教育面试官：Vuex怎么实现懒加载？", "desc": "需要知道的知识点 import方法 $store.registerModule方法 这里简单的介绍一下这两个方法👇 import方法，不是我们经常写的es6import,而是webpack为我们提供的"}, {"id": "6844903806132568072", "title": "让虚拟DOM和DOM-diff不再成为你的绊脚石", "desc": "createElement方法也是vue和react用来创建虚拟DOM的方法，我们也叫这个名字，方便记忆。接收三个参数，分别是type，props和children 到目前为止，已经轻而易举的实现了创建虚拟DOM。那么，接下来进行下一步，将其渲染为真实的DOM，别犹豫，继续回到…"}, {"id": "6997649707384176647", "title": "前端面试总结-CSS", "desc": "CSS也是面试中高频问题的出处，其中布局（垂直居中）特别重要，其次就是inline元素和block元素的区别，以及一些常用的效果css实现"}, {"id": "6844903917101432839", "title": "20W字囊括上百个前端面试题的项目开源了", "desc": "本项目主体内容已经完成,目前超过20W字,面试题估计在200个左右. 本项目一开始并没有要做一个仅仅面向面试的项目,而是希望借助面试的形式进一步巩固、完善自身的知识，同时为初学者提供一个参考路径。 对于前端新人: 本项目的面试题都是相对高频的题目,且有一定的难度,非常适合作为学…"}, {"id": "6844904120290131982", "title": "Vue 的计算属性真的会缓存吗？（保姆级教学，原理深入揭秘）", "desc": "很多人提起 Vue 中的 computed，第一反应就是计算属性会缓存，那么它到底是怎么缓存的呢？缓存的到底是什么，什么时候缓存会失效，相信还是有很多人对此很模糊。 本文以 Vue 2.6.11 版本为基础，就深入原理，带你来看看所谓的缓存到底是什么样的。 本文假定你对 Vue…"}, {"id": "6960109273644793886", "title": "跳槽人速来，记录一下大厂的前端面经", "desc": "一开始整段脚本作为第一个宏任务执行 - 2.执行过程中同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列 - 3.当前宏任务执行完出队，检查微任务队列，如果有则依次执行，直到微任务队列为空"}, {"id": "6996505288715010061", "title": "2021年-七月-上海-前端-面试总结", "desc": "如果你还没有什么跳槽经验，对背调和薪资流水啥的不清楚，那我想这篇文章应该可以帮到你。这是一篇关于小白第一次跳槽时应该注意的事情。"}, {"id": "6991633147100151815", "title": "HTML面试总结｜ 8月更文挑战", "desc": "HTML5 有哪些新特性？ HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。 拖拽释放(Drag and drop) API 语义化更好的内容标签（head"}, {"id": "7000792427732828191", "title": "面试官：写一个instanceof叭", "desc": "需要注意的点，不推荐使用__proto__获取隐式原型，使用getPrototypeOf()更好。 代码 测试 记录记录！"}, {"id": "6957918287644590117", "title": "社招一年半前端面试记录及思考（阿里、腾讯、百度 offer） ", "desc": "在过去的一个月里，自己面试了多家公司的前端岗位，很幸运的是拿到几个不错的 offer，所以想通过这篇文章做个记录与总结，希望给打算求职的你一些参考。"}, {"id": "6844903795420299278", "title": "2019 面试准备 - JS 防抖与节流", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 在本文中，…"}, {"id": "6992525007716876325", "title": "100道 JavaScript 面试题，助你查漏补缺", "desc": "最近在整理 JavaScript 的时候发现遇到了很多面试中常见的面试题，本部分主要是作者在 Github 等各大论坛收录的 JavaScript 相关知识和一些相关面试题时所做的笔记，分享这份总结给"}, {"id": "7000738614501982221", "title": "面试官：BFC怎么触发，有什么作用？", "desc": "BFC即是块级格式化上下文的缩写，旨在创建一个独立的布局环境，其中的元素布局不受外界影响。 触发BFC的常见属性 overflow:hidden； display为inline-block、flex、"}, {"id": "6844903584023183368", "title": "面试官:请你实现一个深克隆", "desc": "实现一个深克隆是面试中常见的问题的,可是绝大多数面试者的答案都是不完整的,甚至是错误的,这个时候面试官会不断追问,看看你到底理解不理解深克隆的原理,很多情况下一些一知半解的面试者就原形毕漏了. 我们就来看一下如何实现一个深克隆,当然面试中没有让你完整实现的时候,但是你一定要搞清…"}, {"id": "7002150458189938718", "title": "秋招保驾护航——计算机网络", "desc": "秋招保驾护航系列文章正在持续更新，往期文章如下，需者自取： html、css：秋招保驾护航——HTML、CSS篇 js：秋招保驾护航——js面试篇（上）、秋招保驾护航——js面试篇（下） 浏览器：秋招"}, {"id": "6844903692756336653", "title": "深拷贝的终极探索（90%的人都不知道）", "desc": "划重点，这是一道面试必考题，我就问过很多面试者这个问题，✧(≖◡≖✿)嘿嘿首先这是一道非常棒的面试题，可以考察面试者的很多方面，比如基本功，代码能力，逻辑能力，而且进可攻，退可守，针对不同级别的人可以"}, {"id": "6844903718249299981", "title": "2019年前端面试都聊啥？一起来看看", "desc": "JavaScript ES2015 规范出现后，一切都大变样啦。 该规范很大——随着对modules（模块）原生支持以及不断发展的函数式编程，新的 JavaScript 语言重焕新生。并且每年持续推出 ES2016，ES2017 ... 然而在面试或招聘前端开发时，期望、现实和…"}, {"id": "6970867290480853006", "title": "百度前端面试题分享，带答案", "desc": "这是我参与更文挑战的第7天，活动详情查看：更文挑战 在这次找工作的过程中，百度整体的流程还是比较规范的，虽然因为第一次去百度大厦的时候被HR告知一面面试官因为会议原因要临时取消面试，改约其他时间。但是"}, {"id": "6955321016121819167", "title": "「百毒不侵(二)」戏说 “浏览器渲染”", "desc": "主角介绍（模块介绍） 康熙（浏览器） 说起咱们的康熙大帝啊，那可就牛逼了，擒鳌拜，平三番，远征葛尔丹。但是也不耽误他风流啊。“九子夺嫡”，说白了就是九个臭小子互相干架争自己老子的皇位，那也怪不得这些臭"}, {"id": "6844904152850497544", "title": "前端面试必备技巧（二）重难点梳理", "desc": "针对面试中出镜率比较高的重难点知识梳理。 相比于第一篇 前端面试必备技巧，本篇文章更贴合今年的面试实际。第一篇比较全面，也比较基础，建议先看一遍上一篇再看本篇会更容易理解。 const 一经声明不能改变。注意保证的是它指向的内存地址不能改变，如果是对象或者数组里面的属性或元素可…"}, {"id": "6844904048768843790", "title": "看完这几道 JavaScript 面试题，让你与考官对答如流（下）", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 51. 什么是 async/await 及其如何工作？ 52. 展开运算符和Rest运算符有什么区别？ 53. 什么是默认参数？ 54. 什么是包装对象（wrapper object）？ 55. 隐式和显式转换…"}, {"id": "7002189665046364168", "title": "iOS面试题知识点总结（下）", "desc": "桥接模式和适配器模式的优缺点 桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。 适配器"}, {"id": "6963950629240733727", "title": "前端原型链污染漏洞竟可以拿下服务器shell？", "desc": "作为前端开发者，某天偶然遇到了原型链污染漏洞，原本以为没有什么影响，好奇心驱使下，抽丝剥茧，发现原型链污染漏洞竟然也可以拿下服务器的shell管理权限，不可不留意！"}, {"id": "6998065046295314446", "title": "一文搞定闭包（附带高频面试题）", "desc": "1.变量作用域 全局变量和局部变量 特殊：函数内部可以直接读取全局变量，函数外部自然无法读取函数内的局部变量 注意：是var ，let const 声明的变量 外部才无法读取，不然就算是全局变量 1."}, {"id": "6991339338487300104", "title": "『面试的底气』—— 设计模式之单一职责原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6994806285187153956", "title": "『面试的底气』—— 设计模式之策略模式(二)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6899273470623318023", "title": "『面试的底气』—— 实现一个Promise", "desc": "异步行为是 JavaScript 的基础，但以前的实现不理想。在早期的 JavaScript 中，只支持定义回调函数来表明异步操作完成。串联多个异步操作是一个常见的问题，通常需要深度嵌套的回调函数（俗称 “地狱回调” ）来解决。 为了解决地狱回调这个问题，ES6 根据 Prom…"}, {"id": "7002027101620535310", "title": "大厂面试必须掌握的六种继承方式，你会吗？", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 1：原型链继承 原理 实现代码 优缺点 优点：实例可以继承的属性包括：实例的构造函数的属性，父类构造函数的属性，父类原型对象上的属性。 缺"}, {"id": "7001696210889211940", "title": "JavaScript 面试知识点 📝 🎉～（0x41-0x60）", "desc": "TOC JavaScript 面试知识点 📝 🎉～（0x01-0x20） JavaScript 面试知识点 📝 🎉～（0x21-0x40） > JavaScript 面试知识点 📝 🎉～（0x41-0"}, {"id": "7000756069244862477", "title": "快速搞定JS中的深浅拷贝", "desc": "深浅拷贝是编程中非常重要的知识，在`JS`中，分为基本数据类型和引用数据类型，引用数据类型在进行赋值操作时传递的是指针的值，这就使得赋值后的变量只是原来变量的别名。"}, {"id": "6992948723273695239", "title": "『面试的底气』—— 设计模式之依赖倒置原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844904191379374087", "title": "前端电商 sku 的全排列算法很难吗？学会这个套路，彻底掌握排列组合。", "desc": "前段时间在掘金看到一个热帖 今天又懒得加班了，能写出这两个算法吗？带你去电商公司写商品中心，里面提到了一个比较有意思故事，大意就是一个看似比较简单的电商 sku 的全排列组合算法，但是却有好多人没能顺利写出来。有一个毕业生小伙子在面试的时候给出了思路，但是进去以后还是没写出来，…"}, {"id": "6844903869382656008", "title": "2019 面试系列 - 简历", "desc": "在我们的求职生涯中，第一步需要拿下的，无非是简历的投递，毕竟再牛 B 的大佬，也要简历到 HR 手中，才能发光发热。 简历的编写。不求 HR 小姐姐看了眼球一亮，但求看了能约你过来试试。 简历的投递。在智联、拉勾、Boss 直聘这些 App 上，我们如何鉴别一家公司，如何进行海…"}, {"id": "7003891785554493454", "title": "二刷--二叉树的最近公共祖先", "desc": "题目描述 解题思路 首先判断当前节点是null还是p还是q。 null：直接返回null p：直接返回p q：直接返回q 递归遍历左右子树并接受返回值 如果左右子树返回的值都不为空，则说明当前的父节点"}, {"id": "6844904094079926286", "title": "最简实现Promise，支持异步链式调用（20行）", "desc": "在面试的时候，经常会有面试官让你实现一个 Promise，如果参照 A+规范来实现的话，可能面到天黑都结束不了。 说到 Promise，我们首先想到的最核心的功能就是异步链式调用，本篇文章就带你用 20 行代码实现一个可以异步链式调用的 Promise。 这个 Promise …"}, {"id": "6844903842593636360", "title": "25 岁，毕业写前端的这三年", "desc": "时间回到 2016 年，彼时 996 还不算福报，比特币单价也还远远不到 1000 美元。那时的我怀着对大厂的敬畏和对前途的迷茫，拿着一纸毕业证告别了校园。这第一份名为 Web 前端开发的工作，代码写着写着就到了今天。 一晃三年过去了，从纯粹的赶需求到造轮子、做分享和带团队，许…"}, {"id": "7000965564692693029", "title": "发布者订阅者模式，看这一篇就够辣！", "desc": "发布者订阅者模式相比于观察者模式多了一层事件调度中心。主要有发布事件，触发事件，删除事件等功能。 ES5原型写法 测试 记录记录！"}, {"id": "6995559820669648909", "title": "『面试的底气』—— 设计模式之代理模式(二)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7004831045136678926", "title": "前端面试题（一）2021-9-1", "desc": "1、画一条0.5px的直线，请用CSS样式实现 2、根据以下CSS属性判断div宽度为_100___px？ 3、根据以下代码判断两个div上下之间的距离为_ 30___px？（填写数字） 4、body"}, {"id": "6844903991550181390", "title": "通过 20 个棘手的ES6面试问题来提高咱们的 JS 技能", "desc": "ECMAScript 6（以下简称ES6）是 JS 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JS 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。接下来咱们来看看 20 道棘手的面试题，通过做题，顺带提升一下咱们的 JS 的技能。 ECMAS…"}, {"id": "7002033455068348430", "title": "【前端--面试】常见面试题（十四）—— 简答题", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 常用那几种浏览器测试？有哪些内核(Layout Engine)? 浏览器：IE，Chrome，FireFox，Safari，Opera。 "}]