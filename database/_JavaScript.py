[{"id": "6844904100144889864", "title": "都2020年了，你还不会JavaScript 装饰器？", "desc": "1. 前言 装饰器是最新的 ECMA 中的一个提案，是一种与类（class）相关的语法，用来注释或修改类和类方法。装饰器在 Python 和 Java 等语言中也被大量使用。装饰器是实现 AOP（面向切面）编程的一种重要方式。 下面是一个使用装饰器的简单例子，这个 @reado…"}, {"id": "6985348097064828942", "title": "深入浅出 RxJS 核心原理（源码实现）", "desc": "基础概念 js事件库，通过observable进行异步事件管理 基于观察者模式的响应式编程，生产者主动推送多个数据给订阅的消费者处理 使用纯函数保证应用状态的隔离，保证数据纯净性 通过observab"}, {"id": "6844903891083984910", "title": "想学Node.js，stream先有必要搞清楚", "desc": "流的英文stream，流（Stream）是一个抽象的数据接口，Node.js中很多对象都实现了流，流是EventEmitter对象的一个实例，总之它是会冒数据（以 Buffer 为单位），或者能够吸收数据的东西，它的本质就是让数据流动起来。 注意：stream不是node.js…"}, {"id": "6996288900117299207", "title": "Android Studio 运行 React Native 开发手机App 起步和踩坑", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 个人环境踩坑 JDK安装 （java环境配置） 1、64位的，就下载JDK x64， 32位的就下载x86的 2、可以安装在别的盘，不需要"}, {"id": "7002584686232862734", "title": "Vue中的data是什么", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：              8月更文挑战 序言 相信每一个有使用过 Vue 的朋友都对其中的 data 很熟悉，必然使用的，但是一直以来我都有一些疑惑，"}, {"id": "6994728394378182669", "title": "前端必备知识点--封装request请求", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 背景 本文所说的request请求即前端请求后端数据所用到的request请求，前后端的交互由来已久，什么jsonp了，ajax了，方式有"}, {"id": "6997039886817558541", "title": "分享 6 个实用的 Vue 技巧", "desc": "Vue 已经成为很多公司前端项目的首选框架，而要成为一个会用 Vue 的开发者并不需要花太多时间和精力去学习大的概念，但作为成为一个更高级的开发者就需要去深入框架和基础知识的学习。"}, {"id": "6996312402056708109", "title": "最全的JavaScript语句总结", "desc": "JavaScript 遵循了一般编程语言的“语句 - 表达式”结构，在 JavaScript 标准中，把语句分成了两种：声明和语句。下面就一起来看看JavaScript的语句家族吧。"}, {"id": "6941722147400187941", "title": "春招面试复盘，重拾this~ 【JS Plan】", "desc": "如何更好的理解this，我想需要先了解this解决了什么问题。在写文章的过程中也看了一些其他人写的文章和博客，其中大都是将this是什么，this的使用场景，this的指向。当然这些是需要掌握的一些this知识点。但在开篇之前想先提个问题？ 看到这个问题，我在心里想的就是，th…"}, {"id": "6981710347140857870", "title": "Chrome Tools花式玩法（二）", "desc": "这期主要是两位嘉宾”，分别是Source组合以及Network兄弟，一起来看看他们分别能够给我们带来哪些花式表演。"}, {"id": "6844904178725158926", "title": "你不知道的 Blob", "desc": "Blob（Binary Large Object）表示二进制类型的大对象。在数据库管理系统中，将二进制数据存储为一个单一个体的集合。Blob 通常是影像、声音或多媒体文件。在 JavaScript 中 Blob 类型的对象表示不可变的类似文件对象的原始数据。 为了更直观的感受 …"}, {"id": "7005590479249080333", "title": "addEventListener", "desc": "忧心忡忡，漫无目的 直译：添加事件监听 addEventListener语法链接 上边的例子就展现了一个很简单的事件监听"}, {"id": "6916288620542296077", "title": "【七日打卡】重构几次代码后，我总结了一些前端代码优化实践", "desc": "得益于React的帮助，在近半年也是恶补了一些原生JavaScript的一些知识点，学习的同时也慢慢的思考当前项目中的一些合理性，复盘后总结了一些项目上必须优化的一个点，希望和大家进行共勉，也是本次在面基时和@苏yun小姐姐探讨后的一篇收获文，如果对大家有帮助，不妨点个赞支持一…"}, {"id": "6962176226077179940", "title": "js简洁代码编写与技巧指北", "desc": "javascript开发中常用到的编码技巧，设计模式，设计原则的实践，包含基础if条件判断，对象策略模式使用等"}, {"id": "7002273216500596766", "title": "手写代码-Javascript篇", "desc": "本文介绍一些日常前端面试可能相关的手写题目。主要从Javascript基础，数据转换，场景问题的例子进行讲解。"}, {"id": "6954659817126363150", "title": "JS中的闭包", "desc": "1.什么是闭包？ 2.闭包的作用是什么？「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包"}, {"id": "6844903789078675469", "title": "【前端词典】进阶必备的网络基础（上）", "desc": "在不那么遥远的一些年以前，一个在江湖中行走的前端，只需要了解“前端三剑客”就足以找到一份工作。很多前端只限于 CSS，HTML、JS，网络基础，数据结构之类的都不甚了解。不过这个时期的前端也是最受鄙视的时期，这个时期前端的大量工作依赖于后端，且不需要动画效果和交互效果。 现如今…"}, {"id": "6857135010882387981", "title": "Airbnb JavaScript 风格指南--翻译版", "desc": "Symbols 不能被正确的polyfill。 所以在不能原生支持symbol类型的环境[浏览器]中，不应该使用 symbol 类型。 1.2 复杂类型: 复杂类型赋值是获取到他的引用的值。 相当于传引用 2.1 所有的赋值都用const，避免使用var. eslint: pr…"}, {"id": "7005771119328231431", "title": "JS文件流或文件路径的上传及下载处理方式", "desc": "JS文件流或文件路径的上传及下载处理方式 ## 一. 下载文件 ### 数据来源：文件路径、二进制流文件数据 ## 二. 上传文件：包括但不限于图片、文档、表格"}, {"id": "6994267044434673700", "title": "面试官很忙系列：Promise 的 done、finally 那些事", "desc": "done 方法实现原理是什么？你能自己实现一个吗？ finally 方法运行机制，手写一个看看？done、finally 方法到底谁最后执行？"}, {"id": "6874482078184898568", "title": "用大白话轻松搞定正则(上)", "desc": "大部分人都觉得这块比较杂乱（我也是这样觉得的 (✿◡‿◡)）。毕竟元字符太多了，看起来没有系统性，不好记 。 所以本文就不说那么多的 官方的话，咱就用大白话聊聊来正则，为了加强大家的记忆，在文中做了三次的小结，用来加深大家的记忆。本文是属于js正则文章中的一篇非常基础的文章，后…"}, {"id": "6844903727728427022", "title": "chrome devtools使用详解——Performance", "desc": "当页面卡顿、慢时可以使用Performance来分析问题原因所在。 截图：默认勾选，每一帧都会截图。关闭后区域二下面部分会去除（下图红框标记那里） 1 . FPS 绿色越高越好，出现红色则表示FPS低（这就是你为啥觉得页面卡顿了），你可以在区域三Frames中看到具体的FPS值…"}, {"id": "6844903589488525319", "title": "Web 端 实现 app “输入验证码 ”的效果", "desc": "前两天跟一个哥们唠嗑，讨论怎么实现uber, 滴滴的验证码输入的效果。 有打算一个input然后两条线段之间用白背景的线段遮住实现，用letter-spacing控制字间距。 但是控制数字间距吃力点，效果不佳便放弃。 这样就实现了 点击label触发 input焦点，调用键盘。…"}, {"id": "6844903496274198542", "title": "这可能是目前最方便的网站中英文切换（理论支持所有语言）", "desc": "优点：只须调用接口，即可轻松完成整站翻译，翻译准确度还行。 缺点：需要梯子。 优点：一对一翻译，所以准确度最高。 缺点：需要编写大量中英文对照表，只适合于少量的固定翻译。 由于公司的要求是把整站进行翻译，且官网中存在新闻，即存在大量不可预料的数据，同时考虑到富文本数据不好翻译。…"}, {"id": "6917132157395664909", "title": "《看完就懂系列》Ajax是不是凭一己之力造就了整个前端的生态圈？", "desc": "前几天，有小伙伴面试的时候被面试官问：谈谈Ajax的原理~ 他说回答得不太好。我想，Ajax有什么原理？不就是发请求拿数据渲染页面吗？抱着怀疑即是寻求真理的想法，我重新梳理了一遍Ajax的发展过程。发现Ajax简直是凭一己之力造就了整个前端生态圈啊，如果没有Ajax技术，今天的…"}, {"id": "6995810277753094175", "title": "面试官：ES6中的新特性有哪些？", "desc": "let关键字 作用和Var一样 let声明变量的特性 变量不可以重复声明 ，为了防止变量名污染 块级作用域，只在代码块中有效，如果出了代码块中无效 不存在变量提升 不影响作用域链 const 常量 特"}, {"id": "6993603425497776164", "title": "JavaScript工具函数汇总| 8月更文挑战", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 转义html标签 HTML标签转义 为元素添加on方法 为元素添加trigger方法 跨浏览器绑定事件 加入收藏夹 提取页面代码中所有网址 "}, {"id": "6876380180319830024", "title": "OAuth2.0与前端无感知token刷新实现", "desc": "OAuth是一个关于授权(authorization)的开放网络标准，在全世界得到广泛的应用。Facebook、Twitter和Google等各种在线服务都提供了基于OAuth规范的认证机制。 OAuth一般用于面向第三方大范围公开的API中的认证工作。换言之，假设带有用户注册…"}, {"id": "6844904193988247565", "title": "从零搭建一个qiankun微前端demo", "desc": "了解微前端的起因是因为我公司的大多数页面都是手机h5，分散且基本毫无关联，每次新页面都开一个二级域名，很难管理，所以研究了微前端，虽然很久以前就听过，拖延让我直到有需要才去自己学习本文初探qianku"}, {"id": "6939160922170605604", "title": "【深入理解】柯里化&手写 Lodash 中 curry 函数｜ 技术点评", "desc": "学习函数柯里化之前，先复习一下中学数学中的高斯消元法：设函数 f(x,y) = x + y，在 y = 1 的时候，函数可以修改为 f(x) = x + 1 。基本思路就是把二元变成一元，同理我们可以把三元函数降元为二元，甚至把多元函数降元为一元函数。 数学中的高斯消元法和函数…"}, {"id": "6905619006238621703", "title": "写一个为await自动加上catch的loader逐渐了解AST以及babel", "desc": "我们在日常开发中经常用到async await去请求接口，解决异步。可async await语法的缺点就是若await后的Promise抛出错误不能捕获，整段代码区就会卡住。从而使下面的逻辑不能顺利执行。也许会有人说，卡住就是为了不进行后续的代码，以免造成更大的错误，可大多数情…"}, {"id": "6997977384972451877", "title": "6 - 作用域和闭包", "desc": "题目 this的不同应用场景，如何取值？ 作为普通函数 使用call apply bind 作为对象方法被调用 在class方法中调用 箭头函数 （this取什么值，是在函数执行的时候确认的，不是在函"}, {"id": "6844903501953237006", "title": "浏览器渲染过程与性能优化", "desc": "大家都知道万维网的应用层使用了HTTP协议，并且用浏览器作为入口访问网络上的资源。用户在使用浏览器访问一个网站时需要先通过HTTP协议向服务器发送请求，之后服务器返回HTML文件与响应信息。这时，浏览器会根据HTML文件来进行解析与渲染（该阶段还包括向服务器请求非内联的CSS文…"}, {"id": "6844903588200726535", "title": "JavaScript 装饰器极速指南", "desc": "Decorators 是ES7中添加的JavaScript新特性。熟悉Typescript的同学应该更早的接触到这个特性，TypeScript\b早些时候已经支持Decorators的使用，而且提供了ES5的支持。\b\b本文\b会对Decorators做详细的讲解，相信你会体验到它给…"}, {"id": "6938305591609655309", "title": "JavaScript三种方法搞定数据类型检测", "desc": "1. 通过typeof检测 2. 通过instanceof检测 想必 instanceof 的方法你也听说过，我们 new 一个对象，那么这个新对象就是它原型链继承上面的对象了，通过 instanceof 我们能判断这个对象是否是之前那个构造函数生成的对象，这样就基本可以判断出…"}, {"id": "6844903991780835335", "title": "一文搞懂Web中暗藏的密码学", "desc": "相信不少前后端的朋友，在面试时都会被问到类似的问题。 在我对密码学一无所知时，也仅会回答：“MD5加密啊。” 诸不知，密码学在网络七层模型，甚至web开发中的应用比我想象得多得多。 1. 什么是密码学？ 密码学是各种安全应用程序所必需的，现代密码学旨在创建通过应用数学原理和计算…"}, {"id": "6996270069227454472", "title": "前端处理跨域的方案", "desc": "1.JSONP 在HTML标签里，一些标签比如script、img这样的获取资源的标签是没有跨域限制的，利用这一点，我们可以这样干： 后端写个小接口 前端代码 前端代码简单封装 2.空iframe加f"}, {"id": "7000973859755130887", "title": "html2canvas图片生成file格式传送到后台服务器", "desc": "1.首先将html保存为base64图片 html2canvas百度一下代码很多，这里废话不多说，直接上代码 因为是将html里部分保存为图片，所以以下代码实现的是全屏画布上展示需要的部分 2.将获取"}, {"id": "6844903694870265870", "title": "React 中同构（SSR）原理脉络梳理", "desc": "随着越来越多新型前端框架的推出，SSR 这个概念在前端开发领域的流行度越来越高，也有越来越多的项目采用这种技术方案进行了实现。SSR 产生的背景是什么？适用的场景是什么？实现的原理又是什么？希望大家在这篇文章中能够找到你想要的答案。 服务器端渲染：用户请求服务器，服务器上直接生…"}, {"id": "6984302939095449608", "title": "深入理解 JavaScript 的 V8 引擎(1)", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 V8 引擎有由 Google 开源高性能 Javascript 和 WebAssembly 引擎。"}, {"id": "6944974651252539406", "title": "js检测浏览器及系统信息【附送彩蛋~】", "desc": "最近我们需要一个工具，可以检测客户在使用我们产品的时候的系统及浏览器环境。以便出现问题我们准确的进行复现调试。 下面我们开始逐一分享。 诶呀我真的是个幼稚鬼... 最近比较忙，心也比较累(主要是心累),但是大家都是如此，也没啥可抱怨的。"}, {"id": "6898491349335703560", "title": "vivo商城前端架构升级—多端统一探索、实践与展望篇", "desc": "一、引言本文将会从整体上介绍vivo商城在前端维度的多端统一探索和实践。从多端价值、为什么要做多端统一、如何满足多端业务需求、实践与创新，简洁直白的阐述我们在多端统一上所做的一切。二、多端探索为viv"}, {"id": "6844904097108197383", "title": "【笔试题👋】分享一道有意思的arguments笔试题", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 这篇文章很短...但绝对不是一篇水文... 主要是在评论区看到了，觉得是我们平常会忽略的一个小知识点而且笔试也有可能碰到，所以单独作为一篇文章来写，还请花个2分钟来看看吧，万一真给碰上了呢 😁。 之前我们一直只在意…"}, {"id": "6844904153035046920", "title": "如何写出优雅的 JS 代码，变量和函数的正确写法", "desc": "在开发中，变量名，函数名一般要做到清晰明了，尽量做到看名字就能让人知道你的意图，所以变量和函数命名是挺重要，今天来看看如果较优雅的方式给变量和函数命名。 我们读的会比我们写的多得多，所以如果命名太过随意不仅会给后续的维护带来困难，也会伤害了读我们代码的开发者。让你的变量名可被读…"}, {"id": "6844903974177341447", "title": "ES6常用但被忽略的方法（第七弹async）", "desc": "ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "6844903652331618312", "title": "javascript 垃圾回收机制", "desc": "随着前端业务需求的不断增多，相比以前，我们会占用更多的内存。但是内存并不是无限的，而对于那些我们不再需要的变量、对象该怎么处理呢？难道一个一个去手动释放么？其实并不需要，Javascript 具有自动垃圾回收机制，会定期对那些我们不再使用的变量、对象所占用的内存进行释放 Jav…"}, {"id": "6972453100112216078", "title": "jsonp原理解析", "desc": "这是我参与更文挑战的第3天，活动详情查看：更文挑战 1，什么是跨域？ 跨域跨域，笼统来说就是一个域名区请求另外一个域名的数据，但实际上，不同端口、不同域名、不同协议上请求数据都会出现跨域问题。浏览器出"}, {"id": "6844903800289886222", "title": "【前端词典】实现 Canvas 下雪背景引发的性能思考", "desc": "去年圣诞节产品提了一个活动需求，其中有一个下雪的背景动画。在做这个动画的过程中加深了对 canvas 动画的一些了解，在这里我仅是抛砖引玉的分享一下，欢迎各位大佬批评。 代码已上传至 github ，感兴趣的可以 clone 代码到本地运行。望给个 star 支持一下。 UI …"}, {"id": "6941786077237624840", "title": "一百多行代码，实现react拖拽hooks", "desc": "源码总共也就一百多行，看完这个大致可以理解一些成熟的react拖拽库的实现思路，比如react-dnd，然后你上手这些库的时候就非常快了。 我们的目标是实现一个useDrag和useDrop的hooks，类似以下用法就可以轻松让元素可以拖拽，并且在拖拽的各个生命周期，如下，可以…"}, {"id": "6844903630152302599", "title": "lazy-mock ，一个生成后端模拟数据的懒人工具", "desc": "lazy-mock 是基于koa2构建的，使用lowdb持久化数据到JSON文件。只需要简单的配置就可以实现和json-server差不多的功能，但是比json-server更加灵活，后期可配置性更强，完全可以模拟真实后端业务逻辑。 lazy-mock默认包含了jwt实现的登录…"}, {"id": "6979106544000434190", "title": "var、let、const的区别", "desc": "面试官最想要的答案 面试时，经常会被问到var、let、const的区别，大可直接这样回答，百分百满分： 答：首先说一下var和let的区别，第一个区别是作用域不同，var是函数级作用域，let是块级"}, {"id": "6844903862491414541", "title": "【Step-By-Step】高频面试题深入解析 / 周刊03", "desc": "11. 什么是XSS攻击，XSS攻击可以分为哪几类？我们如何防范XSS攻击？ 1. XSS攻击 XSS(Cross-Site Scripting，跨站脚本攻击)是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 coo…"}, {"id": "6844903689442820110", "title": "webpack loader和plugin编写", "desc": "首先我们先回顾一下webpack常见配置，因为后面会用到，所以简单介绍一下。 这里面我们重点关注 module和plugins属性，因为今天的重点是编写loader和plugin，需要配置这两个属性。 通过逐层识别模块依赖。（Commonjs、amd或者es6的import，w…"}, {"id": "6844903902484103182", "title": "JavaScript 数据结构与算法之美 - 十大经典排序算法", "desc": "1. 前言 笔者写的 JavaScript 数据结构与算法之美 系列用的语言是 JavaScript ，旨在入门数据结构与算法和方便以后复习。 文中包含了 十大经典排序算法 的思想、代码实现、一些例子、复杂度分析、动画、还有算法可视化工具。 这应该是目前最全的 JavaScri…"}, {"id": "6844904198656491534", "title": "蒲公英 · JELLY技术周刊 Vol.12 尤雨溪新作 Vite, 你会支持么？", "desc": "登高远眺前端框架Vue3CompositionAPI提案Vue3其中一个重量级的特性就是CompositionAPI，它能帮助我们更好地组织代码。本网页是CompositionAPI的草案，详细介绍了"}, {"id": "6918925846954803214", "title": "React Hooks + TypeScript 最佳实践", "desc": "本文根据日常开发实践，参考优秀文章、文档，来说说 TypeScript 是如何较优雅的融入 React 项目的。 温馨提示：日常开发中已全面拥抱函数式组件和 React Hooks，class 类组件的写法这里不提及。 以前有 JSX 语法，必须引入 React。React 1…"}, {"id": "6844903871433687048", "title": "一文彻底理解JavaScript的深拷贝与浅拷贝", "desc": "1. 认识深拷贝和浅拷贝 按引用传递的是引用类型（Object,Array,Function），一般存放与内存中的堆区，存取速度慢，存放量大，其引用指针存于栈区，并指向引用本身。 深拷贝： 指复制后的新对象重新指向一个新的内存地址，两个对象改变互不影响。 2. 浅拷贝 Obje…"}, {"id": "6844903813619384327", "title": "方老湿写不来的系列一：JavaScript核心加密", "desc": "Web的开放与便捷带来了极高速的发展，但同时也带来了相当多的隐患，特别是针对于核心代码保护上，自作者从事Web前端相关开发的相关工作以来，并未听闻到太多相关于此的方案，『前端代码无秘密』这句话好似一个业界共识一般在前端领域传播。但在日常的开发过程中，我们又会涉及以及需要相当强度…"}, {"id": "6844903713669120008", "title": "详解原型链中的prototype和 __proto__", "desc": "本文主要是彻底讲明白prototype和__proto__ 是干嘛的，相信很多同学也跟我一样，傻傻的分不清楚两者应该如何使用？、在原型链中到底起到什么作用？、 在继承中起到什么作用？、javascript为什么会设计出这两个属性？等一系列问题，网上查遍许多资料，看的也是云里雾里…"}, {"id": "6844903617044938759", "title": "由一个bug找到JS挖矿代码", "desc": "由于工作需要，需要前端画流程图，找到一个开源的框架gooFlow（下图就是这个开源框架），它可以编辑流程图，提供节点和线以及一些辅助功能。仔细看一下这是一个国人写框架，文档也是中文，用起来也很顺手。 但是使用这个框架的时候发现一个很奇怪的bug，描述起来就是：我在父页面的a标签…"}, {"id": "6960105959486128141", "title": "JavaScript 系列二：数据类型", "desc": "前言 在开始学习之前，我们想要告诉您的是，本文章是对JavaScript语言知识中 \"数据类型\" 部分的总结，如果您已掌握下面知识事项，则可跳过此环节直接进入题目练习。"}, {"id": "6984215082532093965", "title": "VUE3（十七）使用reactive ref 替代VUEX状态管理", "desc": "之前在使用VUE2的时候有用到VUEX状态管理系统。 我用的比较多的地方是子父组件传值，或者爷孙组件传值。就是共享状态。 VUEX在我这里的作用主要还是为了简化组件中的代码的复杂度。所用的值使用VUE"}, {"id": "6980931175481081887", "title": "浅谈前端 | JavaScript之BOM & DOM操作", "desc": "前言 到目前位置，已经学习了JavaScript的简单语法，但是这些语法并没有和浏览器做任何交互，就是目前所学的语法无法控制网页的行为，如果想要控制网页的行为需要继续学习BOM和DOM，补充一句标签一"}, {"id": "6992625563848409119", "title": "【重学JS】坚持学习JavaScript的第五天-函数(重点)", "desc": "【可作为JS学习路线】用自己的理解, 全面概括 JS 基础知识点, 大部分内容为白话文内容, 基础中的基础 方便加深理解! 巩固学习 JavaScript 基础知识"}, {"id": "6844903585826897933", "title": "【译】React的8种条件渲染方法", "desc": "本文是译者第一次做完整的全篇翻译，主要目的是学习一下这类文章的写作风格，所以挑了一篇相对入门、由浅入深的文章，全篇采用直译，即使有时候觉得作者挺啰嗦的，也依然翻译了原文内容。 相较于Javascript，JSX是一个很好的扩展，它允许我们定义UI组件。但是，它不提供条件、循环表…"}, {"id": "6997695157290156062", "title": "new、apply、call、bind方法学习", "desc": "这是我参与8月更文挑战的第10天，活动详情查看： 8月更文挑战”https://juejin.cn/post/6987962113788493831"}, {"id": "6844903942850084878", "title": "如何优雅的使用javascript递归画一棵结构树", "desc": "简单的说，递归就是函数自己调用自己，它做为一种算法在程序设计语言中广泛应用。其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。 但…"}, {"id": "6844903685789597703", "title": "[译]JavaScript ES6  让我们写得少，做得多", "desc": "JavaScript ES6 带来了新的语法和新的强大功能，使您的代码更现代，更易读。它允许您编写更少的代码并执行更多操作。 ES6 向我们介绍了许多强大的功能，如箭头函数，模板字符串，对象结构，模块等，让我们来看看。 const 是 ES6 中用于声明变量的新关键字。 con…"}, {"id": "6844903986487623687", "title": "精读《React Conf 2019 - Day1》", "desc": "React Conf 2019 在今年 10 月份举办，内容质量还是一如既往的高，如果想进一步学习前端或者 React，这个大会一定不能错过。 希望前端精读成为你学习成长路上的布道者，所以本期精读就介绍 React Conf 2019 - Day1 的相关内容。 总的来看，Re…"}, {"id": "6973548322829107214", "title": "js 数组 find,some,filter,reduce区别", "desc": "区分清楚Array中filter、find、some、reduce这几个方法的区别，根据它们的使用场景更好的应用在日常编码中."}, {"id": "6976960320141000734", "title": "值得收藏的15个JavaScript语句", "desc": "JavaScript 可以处理很多事情，从复杂的框架到API的处理，需要学习的东西太多了。今天来分享 15 个简单且可能常用到函数语句。"}, {"id": "6981739846461030408", "title": "React 知识体系之生命周期及使用场景", "desc": "生命周期（Life Cycle）的概念应用很广泛，特别是在经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”（Cradle-to-Grave）的整个过程 React整"}, {"id": "6854573215613009934", "title": "时间久了,可别忘记这些DOM操作常用API", "desc": "这里主要将DOM操作分为了增删改查四部分.当然了,划分的可能不是那么准确.文末第二个链接里面的老哥对于类型的划分还是挺不错的,有兴趣的可以点进去看看. 该方法返回一个匹配特定id(区分大小写)的元素,而又因为一个id一般在一个页面中是唯一的.因此这是一个高效查找特定元素的方法.…"}, {"id": "6991322029005733918", "title": "函数式编程", "desc": "前言 函数式编程近几年炒的火热，其实函数式编程其实很早就有了，支持该范式的语言有大名鼎鼎的C、JavaScript、PHP等，那为什么又进行了一波高潮呢，我们来探究一下。"}, {"id": "7003256921096470558", "title": "JS -- 变量提升、词法解析、重复声明", "desc": "> 当浏览器开辟出供代码执行的栈内存后，代码并没有自上而下立即执行，而是继续做了一些事情： > > **1、把当前作用域中所有带 `var/function`关键字的进行提前的声明和定义 => 变量提"}, {"id": "6844904009543712781", "title": "Lottie，让动画简单点~", "desc": "前言分享一个动画插件-Lottie-web，airbnb/Lottie系列的一个web分支，当然支持多端，有兴趣的可以看下其他家族成员；Lottie家族成员关于GIF，在实际开发中，有些复杂的动画技术"}, {"id": "6961072146302894093", "title": "js---值类型和引用类型!小伙伴们，耐心看哦!", "desc": "首先我们来了解一下js中的数据类型(废话很多！但应该解释的挺清楚吧！) js八种数据类型：Number String Boolean undefined null Object Bigint Symb"}, {"id": "6987023309091110919", "title": "js显示格式化代码并高亮（vue中实现代码高亮）", "desc": "使用 Highlight.js 和 js-beautify.js 实现代码格式化高亮显示。并且封装为vue指令使用"}, {"id": "6844903561495576590", "title": "送给产品经理的一段代码 (!(~+[]) + {})[--[~+\"\"][+[]] * [~+[]] + ~~!+[]] + ({} + [])[[~!+[]] ", "desc": "送给产品经理一段代码让他放到console去(!(~+[])+{})[--[~+\"\"][+[]]*[~+[]]+~~!+[]]+({}+[])[[~!+[]]*~+[]]其实这段代码是我的同事发给我的"}, {"id": "6926073166066352135", "title": "用ES6写出优雅的代码", "desc": "var 命令会发生“变量提升”现象，既变量可以在声明之前使用，值为undefined。个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用const，代码的可读性也会增强很多。 const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内…"}, {"id": "6988695171361669128", "title": "LeetCode刷题，移除无效的括号（1249）", "desc": "思路：我们只需要判断括号中出现的数量差值是否为0。如果左括号-右括号数量为0，那么代表能匹配所有括号，如果不能就删除括号即可"}, {"id": "6854573219316236301", "title": "写一个自己的vue-cli脚手架", "desc": "通过vue-cli我们可以快速的，无配置的创建我们的项目，vue-cli为我们写好了webpack配置，在创建项目时又可以根据命令行交互集成vue-router,post-css,less或者sass,babel,eslint等等，还有非常友好的图形化界面帮助我们完成自己的项目…"}, {"id": "6971354398601510948", "title": "聊聊闭包-你不知道的那些事", "desc": "JavaScript的闭包是个很奇特的存在，这在我们平常学的其它语言中是不曾见过的；当然，也不用太神话它，觉得这是个什么牛逼的存在；不管遇到什么，只要在心中默念“这不过如此”，接下来就好学了....."}, {"id": "6844903569968070669", "title": "理解Underscore中的去抖函数", "desc": "何为去抖函数？在学习Underscore去抖函数之前我们需要先弄明白这个概念。很多人都会把去抖跟节流两个概念弄混，但是这两个概念其实是很好理解的。 去抖函数（Debounce Function），是一个可以限制指定函数触发频率的函数。我们可以理解为连续调用同一个函数多次，只得到…"}, {"id": "6938633715337658382", "title": "技术周报 · 2021-03-12", "desc": "欢迎关注「字节前端ByteFE」简历投递联系邮箱「tech@bytedance.com」"}, {"id": "6844903683541434381", "title": "手把手带你用85行代码实现一个React.js（详细讲解）", "desc": "啥也不说，先来看看用我们85行的React.js直接替换别人写好的扫雷项目中的React.js，看看效果怎么样？哈哈，是不是正常运行了。 Attention：一定不要被下面辣么多的代码吓到，因为下面辣么多的代码只是每次在上一个commit的基础上添加几行而已，大部分都是重复，只…"}, {"id": "6844903582492426254", "title": "webpack4新特性介绍", "desc": "当下最流行的模块打包器 webpack 于2018年2月25日正式发布v4.0.0版本，代号legato。从官方的 发布日志 来看, 本次大版本更新带来了很多新特性更新和改善，这将会让webpack的配置更加简单。本文，笔者将会全面介绍webpack4的新特性及实践。 在发布日…"}, {"id": "6844904041059729415", "title": "【JS】去NM的视频广告", "desc": "“ 作者：清一色天空 链接：https://juejin.im/post/6844904041059729415 来源：掘金 著作权归作者所有。” 不是点回来才生效，而是注入后，点该页面中任何一个视频都已经生效了，为什么当前还在播广告？因为它在注入之前就已经在播了..…"}, {"id": "6976251256063033380", "title": "js - call apply bind", "desc": "在外面传入的 thisArg 值会修改并成为 this 值。thisArg 是 undefined 或 null 时它会被替换成全局对象，所有其他值会被应用 ToObject 并将结果作为 this"}, {"id": "6981762147869016078", "title": "AST in CSS", "desc": "Hello，祝各位小伙伴们七月快乐噻！ 我是来自推啊前端团队的D同学。 今天要跟大家分享一个AST及PostCss的相关知识。"}, {"id": "6844904168075821069", "title": "【bug】前端上传图片被旋转", "desc": "用户需要上传图片，然后前端将这张图片绘制到canvas画布上，然后生成base64展示给用户，这里需要其他操作，所以需要使用canvas，而不是直接用fileReader。 在电脑上，我们进行代码编写的时候，在chrome上进行调试的时候没有问题，但是一旦在手机上测试就发现图片…"}, {"id": "6924474288225566727", "title": "探索JavaScript对象构造函数都有哪些模式", "desc": "为什么要出模式这概念，每个模式的出现都是解决一种问题，当然每个模式都是有利有弊的。 模式它能干什么，它能帮助我们代码简洁，且更容易维护，代码不冗余。 工厂模式在软件工程领域是一种广为人知的设计模式，这种模式抽象了创建对象的具体过程。 该模式防止一个接口创建出很多对象，从而产生大…"}, {"id": "6850418116900438023", "title": "京喜前端自动化测试之路(小程序篇)", "desc": "如果你已经阅读过 《京喜前端自动化测试之路（一）》，可跳过前言部分阅读。 京喜（原京东拼购）项目，作为京东战略级业务，拥有千万级别的流量入口。为了保障线上业务的稳定运行，每月例行开展前端容灾演习，主要包含小程序及 H5 版本，要求各页面各模块在异常情况下进行适当的降级处理，不能…"}, {"id": "6844904190280466440", "title": "事件捕获、事件冒泡以及事件代理", "desc": "上图是W3C标准的DOM事件流模型图，从图中可以看出，元素事件响应在DOM树中是从顶层的Window开始“流向”目标元素（），然后又从目标元素“流向”顶层的Window。 通常，我们将这种事件流向分为三个阶段：捕获阶段，目标阶段，冒泡阶段。 捕获阶段是指事件响应从最外层的Win…"}, {"id": "6844903933362569224", "title": "React学习(7)-React中的事件处理", "desc": "也就是web浏览器通知应用程序发生了什么事情,例如:鼠标点击,移动,键盘按下等页面发生相应的反馈,它是用户与文档或者浏览器窗口中发生的一些特定的交互瞬间. 这个时候就需要用事件实现了"}, {"id": "6844903953381982222", "title": "前端webrtc基础 —— 录音篇", "desc": "声音：这里的声音是指通过麦克风会产生一连串的电压变化，可以得到许多[-1,1]之间的数字。如果想要播放，需转换成pcm格式 链接完成后，createScriptProcessor的onaudioprocess方法可以持续不断的返回采样数据，这些数据范围在[-1,1]之间，类型是…"}, {"id": "6844904200199995406", "title": "V8引擎详解（八）——消息队列", "desc": "本文是V8引擎详解系列的第八篇，重点内容是关于V8引擎的消息队列，会通过单线程的特点入手来学习，逐步其消息队列的运行机制。 文末会有已经完成的系列文章的链接，本系列文章还在不断更新欢迎持续关注。 由于javascript最初作为浏览器脚本语言，主要用来与用户互动、操作dom等，…"}, {"id": "6844903631045525518", "title": "Vue SPA项目优化小记", "desc": "之前做了一个React项目和Vue的项目，在做完后不加任何优化的情况下，这2个项目的首屏加载平均时间居然达到了20+s，好一点能进10s，差一点快30s，完全不能忍，优化势在必行，本文章记录下Vue项目的优化过程，React项目的优化后续补上。 上图是Vue项目的首页，整个项目…"}, {"id": "6925619440843227143", "title": "面试题：说说你对Symbol的理解", "desc": "迭代属性的时候，某些情况不能得到该symbol属性，如for...in、for...of...."}, {"id": "7004400599198334984", "title": "JavaScript基本语法", "desc": "1，语句 JavaScript程序的执行单位为行（line）,也就是一行一行的执行。一般情况下，每一行就是一个语句。 语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句"}, {"id": "7007756837520932894", "title": "前端实习问题记录【持续更新中。。。】😉", "desc": "前言 笔者正处于大三升大四的暑假期间，目前在唯一杭州某医疗类公司进行前端方向的实习，在实习之前，我的学习模式主要是看书看视频做小项目，然后向厉害的大佬请教和交流，目前在实习阶段，同样遇到了非常多的问题"}, {"id": "7007206194276204575", "title": "「 30天整理 ｜2W字长篇」用一篇文章明确前端学习路线并构筑知识体系🌿", "desc": "本文花费30天，和多位前端同学探讨，用2W字带大家梳理前端知识体系，形成了本文结束的庞大的前端知识图谱。在此与寒草一起建立起前端知识体系吧。"}, {"id": "7007459379725205534", "title": "React 全局状态管理的 3 种底层机制", "desc": "现代前端框架都是基于组件的方式来开发页面。按照逻辑关系把页面划分为不同的组件，分别开发不同的组件，然后把它们一层层组装起来，把根组件传入 ReactDOM.render 或者 vue 的 $mount"}, {"id": "7007790317504053285", "title": "柯里化是什么？JavaScript 中如何实现add(1)(2)(3)(...)", "desc": "柯里化的英文叫currying，没错，他也是以一个人名来命名的，这位老爷子叫Haskell Brooks Curry，但是猛地一看，有三个语言也是以他的名字命名的，分别就是Haskell、Brooks"}, {"id": "7007827603302121486", "title": "【高频面试题】Promise系列（all与allSettled）", "desc": "目录 Promise.all的使用 Promise.allSettled的使用 一、Promise.all的使用 1） 有一个reject时 2） 全部resolve时 二、Promise.allSe"}, {"id": "7004454008634998821", "title": "太震撼了！我把七大JS排序算法做成了可视化！！！太好玩了！", "desc": "前言 大家好，我是林三心。写这篇文章是有原因的，偶然我看到了一个Java的50种排序算法的可视化的视频，但是此视频却没给出具体的实现教程，于是我心里就想着，我可以用JavaScript + canva"}, {"id": "7007958014653104158", "title": "「每日一题」寻找峰值", "desc": "1. 题目描述 峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。 你可以假设nums["}, {"id": "7004625492955365389", "title": "22.7K Star 的手绘风格白板库，有哪些值得我们学习的技术？", "desc": "本文阿宝哥分析了 Excalidraw 这款在线绘图工具，所提供的一些不错功能背后使用的技术。了解并掌握了这些相关技术之后，在今后的工作中也许就会有用武之地。"}, {"id": "7007779074948988935", "title": "react总结随笔(一)", "desc": "学习react这么久，笔者一直用小本本记录着学习过程，不知不觉都快2万字了。 `` 没想到叭，笔者直接就用vscode写的。🤦‍ 准备将这些文字逐步记录到掘金上，也便于以后回顾。😄 react hoo"}, {"id": "7005347768491311134", "title": "HTTP 传输大文件有哪些方案？", "desc": "在日常工作中，你可能会遇到大文件传输的场景。本文将介绍 HTTP 传输大文件的几种方案，希望了解完这些知识后，对大家能有些帮助。"}, {"id": "7005956935937687583", "title": "（建议收藏）第一人称视角带你走进 Vue 源码世界", "desc": "前言 本文会以第一人称视角带大家读源码。简单易懂，大佬小白都能看明白。并收获益处。欢迎 react 用户来怼！"}, {"id": "7007968848930422821", "title": "CommonJS和ES6 Module分别如何处理循环依赖的问题？", "desc": "前言：一般来说工程中应该尽量避免循环依赖的产生，因为从软件设计的角度来说，单向的依赖关系更加清晰，而循环依赖则会带来一定的复杂度。 - 但工程的复杂度上升到足够规模时，就容易出现隐藏的循环依赖关系。简"}, {"id": "7007016089037045773", "title": "5分钟学会3d月球环绕动画，学不会来捶我哦", "desc": "前言 大家好，又到了周末了，又到了Fly写文章的时候了， 过几天不是中秋节了，想着之前写过一篇从0- 1 实现3D地球的，反响效果特别好， 这次趁着🎑节给大家写了一个月球绕地球的运转的动画。本篇文章还"}, {"id": "7007964606073143326", "title": "前端面试内卷风暴🌪 | 实现一个深克隆", "desc": "深克隆作为前端面试炙手可热的面试题，难倒了不是英雄好汉。这是一道很好的，可以让面试官看出面试者对JavaScript基础的掌握程度的题。 在这内卷盛行的行业，你知道如何写出让面试官眼前一亮的深克隆代码"}, {"id": "7007943382051848199", "title": "实现图片懒加载", "desc": "简单介绍： 首先将页面上的图片的 src 属性设为空字符串，而图片的真实路径则设置在data-src属性中， 判断我们的懒加载的图片是否进入可视区域,如果图片在可视区内将图片的 src 属性设置为da"}, {"id": "7006077858338570270", "title": "for 循环不是目的，map 映射更有意义！【FP探究】", "desc": "for 循环基础、健壮，有更多操作空间；map 简洁、易读，有更直接的映射关系~所以，左👈还是右👉，选哪个？"}, {"id": "7007791264921993253", "title": "vue中使用a标签下载静态资源文件（比如excel、pdf等）后端不参与", "desc": "问题描述 平常我们在项目中需要做下载文件的功能，比如下载excel表格、比如下载pdf文件、比如下载word文档，这样的功能，一般是后端做，即：后端返回一个流文件、或者返回一个url地址。 但是，实际"}, {"id": "6999804617320038408", "title": "Promise 被玩出 48 种“花样”，深度解析10个常用模块", "desc": "全职开源大牛开发的48个 Promise 相关的模块，让你轻松应对Promise 相关的各种异步问题，比如实现并发控制、异步任务处理等，特别是处理多种控制流，比如 series、waterfall 等"}, {"id": "7002012595200720927", "title": "跨浏览器窗口通讯 ，7种方式，你还知道几种呢？", "desc": "人与人要沟通，页面与页面之前也要沟通。页面间的7种基础交流方面，满足你的各种需求？ 您还有哪些高级的交流方式呢？"}, {"id": "7005744715144364046", "title": "2021年VS Code主题推荐", "desc": "一个好的工作环境，离不开一个好的生产力工具（高配电脑）、一个高分辨率显示器（27 寸 4 K）、一个人体工学椅和一套优良的键鼠。 当然说完了硬件，我们的软件也要用的舒服。 这篇文章给大伙推荐一波我最喜"}, {"id": "6844904160916144135", "title": "JavaScript中的同步与异步", "desc": "如果仅仅停留在文字上的理解,个人觉得有口无心,每当屡屡面试时,这都是一个常问的话题,牵扯到的是事件的执行顺序,任务队列,在js当中对于异步处理任务,是一个非常重要知识. 区别:进程和线程的主要差别在于,它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保…"}, {"id": "6844904081073373191", "title": "JS中的数据类型object基础", "desc": "一、定义1、用键值对（key:value俗称属性名和属性值）来描述一个对象的特征（每一个对象都是综合体，存在零到多组键值对）；2、{key:value,...}每组键值对是key:value的格式，多"}, {"id": "6972427536806608927", "title": "事关我对于JavaScript高级的一些理解", "desc": "写在前面:这一篇是我总结的关于JavaScript高级的一些知识,包括但不限于ES6范围内,而且也基本都是面试用得上的知识"}, {"id": "6871454580161380365", "title": "当我们new一个构造函数时，发生了什么？", "desc": "我们经常说new一个对象，说明通过new，我们可以创建出一个对象。那么除此之外，还发生了什么呢？ 上面代码中，我设置一个构造函数Fun，然后设置Fun的原型对象，最后让new出一个实例对象a。 4、实例对象a可以调用构造函数原型中的方法。 要了解上面内容，我们首先需要明白原型，…"}, {"id": "6903484050095210509", "title": "[译]JavaScript 的面向切面编程", "desc": "我知道，它听起来像是《魔法战队》中某一集出现的东西。然而，AOP 是实际存在的。此外，虽然我们现在没有使用它，但它却可以被应用于我们日常会见到的一些用例中。 它最大的优势在于，你可以毫不费力的将 AOP 与 FP 或 OOP 结合使用，就像 JavaScript 中的 OOP …"}, {"id": "6911963632641245191", "title": "彻底弄懂JavaScript 面向对象编程", "desc": "面向对象是一种编程思想，经常被拿来和面向过程比较。 后依次调用函数。而向对象关注的重点是主谓，是把构成问题的事物拆解为各个对象，而拆解出对象的目的也 是为了实现某个步骤， 而是为了描述这个事物在当前问题中的各种行为。 1、封装 让使用对象的人不考虑内部实现，只考虑功能使用把内部…"}, {"id": "6981365112275894308", "title": "H5端，如何去兼容所有浏览器的退出返回事件", "desc": "h5端在返回关闭浏览器时做有效操作，首先记录一下这个问题的发生场景，因为我司是在做直播功能类型相关项目，在开发H5的过程中，有一个需求是，在页面退出的时候(发送一个异步请求)，对页面进行一些操作。"}, {"id": "6953050713224118302", "title": "第 021 期 前端异常的处理方法汇总", "desc": "捕获并处理异常，能避免出现页面白屏的情况。那怎么捕获异常呢? 主动捕获运行时异常 用 try-catch 能捕获同步代码的运行时错误。如果是异步代码，需要转化成 await 的写法。"}, {"id": "6844903682727772173", "title": "vue 巧用过渡效果", "desc": "vue提供的了transition组件来实现组件的过渡和路由的过渡，合理使用这个组建可以让我们的页面更加的灵活，提高用户体验。 看起来还是有有点乱，先来捋一下。 enter 定义开始的状态， active定义过程， enter定义结束， 但是在实际进行的时候是有交叉的。 这里要…"}, {"id": "6844903565543079943", "title": "前端MVC、MVVM的简单实现", "desc": "MVC是一种设计模式，它将应用划分为3个部分：数据(模型)、展示层(视图)和用户交互层。结合一下下图，更能理解三者之间的关系。 模型：用来存放应用的所有数据对象。模型不必知晓视图和控制器的细节，模型只需包含数据及直接和这些数据相关的逻辑。任何事件处理代码、视图模版，以及那些和模…"}, {"id": "6844903656773386254", "title": "漫谈前端性能 突破 React 应用瓶颈", "desc": "性能一直以来是前端开发中非常重要的话题。随着前端能做的事情越来越多，浏览器能力被无限放大和利用：从 web 游戏到复杂单页面应用，从 NodeJS 服务到 web VR/AR、数据可视化，前端工程师总是在突破极限。随之而来的性能问题有的被迎刃而解，有的成为难以逾越的盾墙。 这篇…"}, {"id": "6944959527515062309", "title": "【译】通过漫画深入了解ES Modules", "desc": "ES modules 为JavaScript带来了官方的、标准化的模块系统。这估计需将近10年的标准化工作来实现。 但好消息是，等待马上就要结束了，随着FireFox 60版本的发布，所有的主流浏览器都将支持ES modules，并且Node的模块工作组也正在努力为node添加…"}, {"id": "6844903710661804046", "title": "一个vue前端的VSCODE插件分享（2018）", "desc": "VSCODE的插件系列丰富的插件让vscode更加好用顺便推荐图床（图床地址）美化插件background给编辑器窗口加个背景！唯一的缺点是vscode会\b显示已损坏，当然啦，并不影响使用可以参考以下"}, {"id": "6933506107549679624", "title": "八个写JavaScript代码的小技巧！", "desc": "1. 生成指定区间内的数字 有时候需要创建在某个数字范围内的数组。比如在选择生日时。以下是最简单的实现方法。 2. 把值数组中的值作为函数的参数 有时候我们需要先把值放到数组中，然后再作为函数的参数进行传递。使用 ES6 语法可以只凭借扩展运算符（...）就可以把值从数组中提取…"}, {"id": "6989155311865036837", "title": "JavaScript中的对象复制", "desc": "所有的面向对象的语言中，都存在着对象引用、复制等等问题，对于初学者来说可能难以理解。今天我来总结一下JavaScript中对象复制。"}, {"id": "6855129006006599693", "title": "蒲公英 · JELLY技术周刊 Vol.16 谷歌首个线上 Web 开发者大会", "desc": "蒲公英·JELLY技术周刊Vol.16登高远眺基础技术谷歌发布首个线上Web开发者大会谷歌在本月初完成首次线上Web开发者大会(web.dev/live)，以线上视频的形式，分享关于优化核心Web指标"}, {"id": "6970685952012320804", "title": "重学JS | 聊聊闭包的优缺点，以及应用场景", "desc": "重学JavaScript系列文章连载中...从执行上下文聊到闭包，理解闭包的优点和缺点，以及应用场景。"}, {"id": "6949005060705779720", "title": "typeof、instanceof、Object.prototype.toString", "desc": "简述typeof、instanceof、Object。prototype.toString之间的用法、区别，以及原理。"}, {"id": "6968631667518865444", "title": "easyEcharts3.0手机端uniapp版本雷达图，折线，柱状图，饼图，仪表盘，水球等等", "desc": "pc端实例：http://jstopo.top 网站本人微信号：jays611 easyEcharts又称简易echarts（本人针对uniapp 的canvas纯JS源码绘制， 如出现bug可以及时"}, {"id": "6968616695929765895", "title": "JavaScript 中 call()、apply()、bind() 的用法", "desc": "比较一下这两者 this 的差别，第一个打印里面的 this 指向 obj，第二个全局声明的 shows() 函数 this 是"}, {"id": "6844903678797676552", "title": "30个极大提高开发效率的Visual Studio Code插件", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 我们的 VSC(VSCode)将会像一个长了五只可以发射激光的独角兽一样！接下来会介绍我每天使用的非常有用的插件。 如果你还是一个 VSC 的新手，那么点击左侧最下方的按钮来安装插件。 自动去查…"}, {"id": "7000750996573913125", "title": "夯实基础篇----js中使用var、let、const定义变量的区别", "desc": "日常开发中我们定义变量一般都会使用`var`、`let`、`const`，但是使用起来还是有些区别的，今天我们来一起学一下。"}, {"id": "6992004591587950629", "title": "JavaScript 系列之原型（一）", "desc": "[JavaScript 系列之原型｜ 8月更文挑战 ]连更数天带你学会 JavaScript 基础。"}, {"id": "6953480256539869198", "title": "记一次Axios二次封装的总结", "desc": "前言 前端开发中，如果页面需要与后台接口交互，并且无刷新页面，那么需要借助一下Ajax的http库来完成与后台数据接口的对接工作。本文将结合我们团队使用的一个http库Axios和我们团队开发工程的一"}, {"id": "6844903951993667592", "title": "怎样让后台小哥哥快速对接你的前端页面", "desc": "首先需要澄清一下，该篇文章并非标题党。这里介绍需要实现的效果是让后台工作人员不需要前端改动网络请求基础地址的前提下，使用前端代码便于本地调试。 不好意思这里说的可能有点绕了，待我给你简单的说明一下你就明白了。 后台和前端一起开发某个需求，前端童鞋比较勤(huo)劳(shao)已…"}, {"id": "6986902902652534814", "title": "JS的for in", "desc": "之所以会探索for-in到底是怎么工作的，是因为我在使用for-in时遇到了如下问题： 以上代码的输出结果是 \"name\"，但我以前学的是for-in会遍历本对象以及原型链上所有对象的属性名"}, {"id": "6998057947070726158", "title": "Next.js同构应用如何处理store问题（MobX）", "desc": "使用Nextjs开发应用已经不是什么新鲜事了，最近项目也是决定用它来改版我们的网站，目的是SEO优化，经过一两周的学习与思考，对Nextjs里store的管理有了新的领悟，在此记录一下。"}, {"id": "6844903651262070791", "title": "狙杀页面卡顿 —— Performance 指北", "desc": "今天介绍下 Chrome dev tools 家族的一个小兄弟，它在 Chrome 57 之前叫作「Timeline」，而现在换了个更长的马甲 —— 「Performance」，毕竟名字要「长～～～～～～～～～」更能吸引注意。 也许你曾不经意启动过这个工具，看见里面五颜六色的图…"}, {"id": "6997011857697406983", "title": "如何处理文件？你需要掌握的File 和 FileReader！", "desc": "什么是File 文件（File）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。 通常情况"}, {"id": "6844903572979597319", "title": "JS中浮点数精度问题", "desc": "最近在做项目的时候，涉及到商品价格的计算，经常会出现计算出现精度问题。刚开始草草了事，直接用toFixed就解决了问题，并没有好好的思考一下这个问题。后来慢慢的，问题越来越多，连toFixed也出现了（允悲），后来经过搜索网上的各种博客和论坛，整理总结了一下。 在遇到浮点数运算…"}, {"id": "6993182096478978055", "title": "JavaScript 标准内置对象 之 RegExp 之 RegExp.prototype.exec()", "desc": "JavaScript 的 RegExp.prototype.exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。 在设置了 global 或 sticky 标志位的情况"}, {"id": "6844903740923723784", "title": "JavaScript骚操作之操作符", "desc": "look，当hasMoney为true的时候，嗨翻天，为false的时候的睡一天。这种操作符在我们的根据简单的判断条件赋值的时候非常有用 如此，我们的代码就不会充斥着大量的if判断条件句，还能略显骚气。但是，别骚过度了 上面的例子有点为了装逼而装逼的感觉，在代码可读性方面有点糟…"}, {"id": "6966156683571626021", "title": "js 实现Ctrl + V粘贴图片", "desc": "js 实现Ctrl + V粘贴图片 背景 前两天做了个功能，大概需求就是截图粘贴到浏览器，然后调用后台图片识别接口，提取图片中的文字，整体流程如下图所示： 思路 简单说一下思路： 监听浏览器paste"}, {"id": "6844903725249609741", "title": "如何判断元素是否进入可视区域viewport？", "desc": "个性签名: 生如夏花，逝如冬雪；人生如此，何悔何怨。 工欲善其事，必先利其器。在判断元素是否在可视区域实现简单的原生懒加载前，我们先简单回顾下以下几个关键的概念。 ps： 如果你对这些概念已经比较熟悉了，可以直接跳到第五点查看关键代码示例。 1. 偏移量 偏移量(offset …"}, {"id": "6997393050288783373", "title": "JavaScript数据类型 - Boolean类型和Null类型", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 Boolean类型  Boolean类型是JavaScript中使用的最多的一种类型，该类型只有两个字面值：true和false。这两个值"}, {"id": "6844904200644591623", "title": "javascript进阶必备的二叉树知识", "desc": "每当放完小长假，我都会习惯性的反思和复盘一下自己的技术，尤其是端午节。为什么我会写二叉树的文章呢？其实这涉及到程序员的一个成长性的问题。对于0-3年的前端程序员来说，可能很少有机会涉及到数据结构和算法的工作中，除非去大厂或者做架构相关的工作。但是很多工作2-3年的前端工程师，业…"}, {"id": "6947694608247685127", "title": "面试题之Jsonp的理解及手写代码", "desc": "在前端面试过程中经常会被问到关于跨域的问题，跨域的解决方案。本篇文章就带大家从基础开始先理解，再到手写解决方案的代码，防止一看就会，一写就废。 Jsonp(JSON with Padding) 是json的一种‘使用模式’，可以跨域的获取到数据。 了解同源机制；协议、域名、端口…"}, {"id": "6994453856063062053", "title": "JavaScript深拷贝和浅拷贝看这篇就够了", "desc": "在使用JavaScript编码时，经常会遇到需要复制对象或者数组的情况，但是有的时候它并不像我们预期的那样工作，下面就一起来看看吧！"}, {"id": "6990595401657090085", "title": "经典又常用的JS代码片段", "desc": "本文旨在打造一份满足日常开发的原生js代码片段库，js代码片段使用 `ES6` 编写，已尽量精简和考虑兼容问题。开箱即用，节省额外搜索时间，提高开发效率。"}, {"id": "6844904008360919053", "title": "原生开发、H5开发和混合开发的区别", "desc": "1. 原生开发 比较快捷地使用设备端提供的接口，处理速度上有优势。 必须等下载完毕用户才可以打开，获得新版本时需重新下载应用更新。 新需求迭代，上线慢。 2. web APP (h5开发) HTML5应用开发，是利用Web技术进行的App开发，可以在手机端浏览器里面打开的网站就…"}, {"id": "6844903623688716302", "title": "JS忍者秘籍中的定时器机制详解", "desc": "前段时间刚看完《JS忍者秘籍》，虽说是15年出版的，有些东西是过时了，但像对原型链、闭包、正则、定时器之类的机制却是不会过时的，里面很多东西都讲的很细，还是值得一读的，本文将对这本书中对定时器机制的部分进行详细的解析，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以…"}, {"id": "6986993632398016526", "title": "前端常用数据结构与算法整理--链表", "desc": "概念: 由多个元素组成的列表。 元素存储不连续，用next指针将其连在一起。 JavaScript中没有链表这个数据结构，但可以用object去模拟 数组与链表比较： 数组在修改非头尾元素时会移动其中"}, {"id": "6844903917986267143", "title": "彻底掌握js内存泄漏以及如何避免", "desc": "前言：内存泄漏写任何语言都必须得注意的问题，我司技术老大日常吐槽:以前做游戏的改内存泄漏的bug，现在写前端还是这些问题。 内存泄漏可以定义为程序不再使用或不需要的一块内存，但是由于某种原因没有被释放仍然被不必要的占有。在代码中创建对象和变量会占用内存，但是javaScript…"}, {"id": "6991726236070314021", "title": "基础教程 2. 数据类型深入 |8月更文挑战", "desc": "普通对象 js中的普通对象：无序的键值对集合； 对象的操作：键值对的增删改查； 数组对象及数组操作； 基本数据类型和引用数据类型的区别；"}, {"id": "6991717517571915807", "title": "string 转 number 八种方法｜ 8月更文挑战", "desc": "1.Number基本包装类型 Number() **示例: 下面我们使用Number()方法对不同的值进行转换： ** **结果： ** 1.对与null和 空字符串（\"\"),Number会转成数字0"}, {"id": "6976531465064415246", "title": "js内功修炼-数组篇", "desc": "本文主要针对数组的构造器、 数组的常用方法、 数组遍历方法、数组扁平化方法、数组去重方法进行了详细总结"}, {"id": "6844903882208837640", "title": "深入浅出Vue响应式原理（完整版）", "desc": "Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。这使得状态管理非常简单直接，不过理解其工作原理同样重要，这样你可以避开一些常见的问题。----官方文档 本文将针对响应式原理做一个详细介绍，并…"}, {"id": "6844903682669019144", "title": "求职季，前端面试送给你|掘金技术征文", "desc": "最近好多小伙伴都跳槽去找工作，我只能在心里默默的支持他们能找到一份好的工作，这份前端面试大全送给我的小伙伴们，主要说的是前端一些常用的一些知识，说的不对的地方请小伙伴们即使指正出来，自己同时也回顾下这些知识。主要分以下几个方边来说： 1.Doctype作用？标准模式和兼容模式区…"}, {"id": "6844904205279297550", "title": "ES11来了，还学得动吗？", "desc": "同属于export ... from ...形式的聚合导出，作用上类似于： 16. Modules"}, {"id": "6993324113158733854", "title": "前端小白不迷路-搞懂JavaScript中访问原型对象的两种方式的不同", "desc": "1  实例对象.proto： 2   构造函数.prototype , 既然这两种方式都可以访问到原型对象，那么它们有什么不同呢？"}, {"id": "6844903608555667469", "title": "论如何实现一个完美的Select组件", "desc": "下拉列表组件Select可以是前端使用频率最高的UI组件之一。正因此，原生HTML也存在这一标签。但由于对UI的较高追求及统一规范，我们往往不会去使用即不好看又不统一的原生Select标签，而是自己实现。能够写出一个“多数场景下能用”的Select组件，并没有什么难度。直到遇到…"}, {"id": "6989156873366667294", "title": "JavaScript判断各种资源是否加载完成的方法汇总，资源预加载问题", "desc": "将网站放在服务器后，因为服务器带宽问题，才发现很多资源比如图片、音频在网站打开后1分钟还没有加载，导致无法播放。"}, {"id": "7000702221255966750", "title": "来跟我手写一遍Promise", "desc": "Promise实现以同步的方式书写异步代码，解决了回调地狱的问题。本质上，Promise是观察者模式的一种实现，通过任务注册和状态监听优化了原来的编程模式，增加了代码的可读性和维护性。"}, {"id": "6998129223101579300", "title": "ECMAScript JavaScript精英课堂 渡一教育 姬成", "desc": "ECMAScript 一、js浏览器历史 1.web发展史 Mosaic，是互联网历史上第一个获普遍使用和能够显示图片的网页浏览器。于1993年问世 1994年4月，马克.安德森和Silicon Gr"}, {"id": "6844903566855897096", "title": "撸js基础之异步", "desc": "前端这两年的新技术铺天盖地，各种框架、工具层出不穷眼花缭乱。最近打算好好复习下 js 基础，夯实的基础才是学习新技术的基石。本文作为读书笔记简单的总结下 js 异步的基础知识。 回调是编写和处理 JavaScript 程序异步逻辑的最常用方式，无论是 setTimeout 还是…"}, {"id": "6976546385101324325", "title": "JavaScript继承之老王的焦虑", "desc": "话说有个人叫老王 有一天他想生个儿子，可是老王他自己也生不出来，于是他跪了七天七夜求上天怜悯，玉皇大帝于心不忍便赐给他一台儿子制造机 玉皇大帝说，只要把这台机器注入你的血统，制造出来的就是你的儿子，老"}, {"id": "6844903683826810887", "title": "Javascript 模块化管理的来世今生", "desc": "直接回想起来的就是 cmd amd commonJS 这三大模块管理的印象。但是大家清楚 cmd amd commonJS 为什么会出现么？接下来，我们就一起来瞅瞅这具体是啥情况。 通过立即执行函数，让外部根本没有时间从外部去修改内部的属性，从而达到一定的防御作用。 以上就是我…"}, {"id": "6844903713866252296", "title": "ES6 系列之我们来聊聊装饰器", "desc": "我们可以在 Babel 官网的 Try it out，查看 Babel 编译后的代码。 我们可以看到 Babel 构建了一个 _applyDecoratedDescriptor 函数，用于给方法装饰。 顺便注意这是一个 ES5 的方法。 此时传入 _applyDecorated…"}, {"id": "7002598603290083365", "title": "第6周第2节4-8 编程练习--获取二维数组中所有的元素，并拼接 ", "desc": "获取二维数组中所有的元素，并拼接 题目要求 思路分析 代码实现 控制台输出............."}, {"id": "6942255668107673608", "title": "精读《设计模式 - Template Method 模版模式》", "desc": "Template Method（模版模式）属于行为型模式。 意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用…"}, {"id": "6972047995541913613", "title": "《javascript高级程序设计》学习笔记 | 9.1.代理基础", "desc": "代理基础 ES6 为的代理和反射为开发者提供拦截并向基本操作嵌入额外行为的能力 代理是目标对象的抽象，其可以用作目标对象的替身，但完全独立于目标对象 目标对象既可直接被操作，也可通过代理来操作，直接操"}, {"id": "6844903920934846477", "title": "前端战五渣学JavaScript——函数柯里化", "desc": "我自认为大家是在了解闭包的情况下阅读这篇博客的。 柯里化的函数可以延迟接收参数，就是比如我一个函数需要接收的参数是两个，我执行的时候必须接收两个参数，否则我没法执行啊，是不是，就容易出问题。但是柯里化后的函数，可以先接收一个函数，然后再接收一个函数，这么说太生硬了，那我们就来看…"}, {"id": "6844903522475999239", "title": "前端代码异常监控实战", "desc": "之前在对公司的前端代码脚本错误进行排查，试图降低 JS Error 的错误量，结合自己之前的经验对这方面内容进行了实践并总结，下面就此谈谈我对前端代码异常监控的一些见解。"}, {"id": "6907489791831605255", "title": "JavaScript 装饰器原理", "desc": "装饰器是一个以@开头的描述性词语。英语的decorator动词是decorate，装饰的意思。其中词根dek(dec发音)原始印欧语系中意思是“接受”。即，原来的某个事物接受一些新东西（而变得更好）。从另外一个角度描述，装饰器主要是在被装饰对象的外部起作用，而非入侵其内部发生什…"}, {"id": "6995902509944406047", "title": "H5C3JS案例1：拖动的模态框", "desc": "点击弹出层， 会弹出模态框， 并且显示灰色半透明的遮挡层。 点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。 鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在移动，松开鼠标即停止"}, {"id": "6941235575181541389", "title": "Svelte 是如何用 RollUp 构建应用的？—— Svelte 模板解读", "desc": "对 Svelte 框架有所耳闻的朋友可能都听说过：和 React 或 Vue 不同， Svelte 并不采用 Virtual DOM，而是在部署前将代码编译为原生的 DOM 操作和 vanilla js，从而在运行 Web 应用的时候不需要依赖框架本身的运行时，也不需要做 di…"}, {"id": "6861507513980829709", "title": "😀一个原生js弹幕库，基于 CSS3 Animation", "desc": "BulletJs项目地址演示图采用rollup打包并发布到npm，rollup打包教程去除靠IntersectionObserver来对弹道进行调度，采用新的弹道选择算法，增加防重叠检测支持同速/不同"}, {"id": "6844903558991577096", "title": "AMA：我是小问，你有什么问题要问我吗？", "desc": "Hi，大家好，我是小问。来自广东佛山，今年 21 岁的数学系理科生，FPS 游戏伪高端玩家，健身爱好者，摄影师。 我目前在七牛云大数据团队负责大数据产品的策划和架构、算法研发，做过一些数据相关的开源项目（https://github.com/iwillwen/mindb），也独…"}, {"id": "6991812614292520997", "title": "怎么用js让video标签全屏啊？| 8月更文挑战", "desc": "「我就一个手机上的video标签，能不能做啊？」 「webkitEnterFullScreen了解一下？」"}, {"id": "6844903518101323784", "title": "掌握JS中this指向只需记忆5大原则", "desc": "完全掌握this在JavaScript中的指向，吹散笼罩在this周围的重重迷雾，理解谁决定了this的指向，看完本篇你能在代码运行之前就可以判断出this的指向。 我们都曾以不同的方式在函数中看见过this，但仍然不能准确的指出this在JavaScript中指向谁，本篇将让…"}, {"id": "6893841214186094606", "title": "如何创建与框架无关的JavaScript插件", "desc": "JavaScript中的插件使我们能够扩展语言，以实现所需的某些强大（或不够强大）的功能。插件/库本质上是打包的代码，可以使我们免于一遍又一遍地编写相同的东西（功能）。 在JavaScript生态系统中，有数百个框架，这些框架中的每一个都为我们提供了一个创建插件的系统，以便为框…"}, {"id": "6985804472924504100", "title": "JS 实现栈结构", "desc": "栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表，是一种先进后出（FILO）的数据结构，限定只能在一端进行插入和删除操作，允许操作的一端称为栈顶..."}, {"id": "6844904015747104775", "title": "深度挖掘Concent的effect，全面提升useEffect的开发体验", "desc": "在hook还没有诞生时，我们通常都会在class内置的生命周期函数componentDidMount、componentDidUpdate、componentWillUnmount书写副作用逻辑。 这样的类似代码是你100%一定曾经写过的，表达的含义也很简单，组件初次挂载完毕时…"}, {"id": "6967178698831167495", "title": "DOM 事件流、事件委托", "desc": "定义 DOM (文档对象模型)结构是一个树型结构，当一个 HTML 元素产生一个事件时，该事件会在元素节点与根结点之间的路径传播，路径所经过的结点都会收到该事件，这个传播过程可称为 DOM 事件流。 "}, {"id": "6844903858028675079", "title": "判断浏览器是否支持 webp 的几种解决方法", "desc": "如果画布的高度或宽度是0，那么会返回字符串“data:,”。 如果传入的类型非“image/png”，但是返回的值以“data:image/png”开头，那么该传入的类型是不支持的。 Chrome支持“image/webp”类型。 toDataURL方法将图片转化为包含data…"}, {"id": "6932282101429436423", "title": "JS提升篇：var、let 和const的区别", "desc": "虽然在面试资料里，这个知识点多次出现，但是每次看了之后，没过多久就又会忘记了，归根结底还是自己理解得不到位。所以将这部分知识点在这里做个总结，帮助自己理解和记忆。 块作用域由 { } 包括，let和const具有块级作用域，var不存在块级作用域。 var存在变量提升，let和…"}, {"id": "6974567194382303240", "title": "通过Vue3探索响应式数据原理(Proxy与Reflect)", "desc": "在obj的age属性变化时，变量age如果也随之变化，通常就需要定义一个函数赋予改变逻辑，在每次变化时手动执行一下函数。"}, {"id": "6990136923440283656", "title": "前端面试每日 3+1 —— 第835天", "desc": "今天的知识点 (2021.07.29) —— 第835天 (我也要出题) [html] 使用HTML5绘制一个经典“旺仔”的头像 [css] 使用CSS3实现折线图效果 [js] 请分析5 == [["}, {"id": "6977420173393264647", "title": "深入浅出Event Loop", "desc": "深入浅出Event Loop 前言 在前端工作了也有三年了，一直没写过对于JavaScript的文章，对于JavaScript的一些底层原理也一直不是很明白，Event Loop虽然也大概地了解..."}, {"id": "6977403723676909599", "title": "设计模式|JavaScript实现单例模式(下篇)", "desc": "保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就是单例模式，也是单例模式的定义。 单例模式的用途非常广，像实现全局模态框，像在Redux和Vuex中的Store实现。"}, {"id": "6861553339994374157", "title": "前端跨域解决方案归纳整理", "desc": "前端跨域的各种文章其实已经很多了，但大部分还是不太符合我胃口的介绍跨域。看来看去，如果要让自己理解印象深刻，果然还是得自己敲一敲，并总结归纳整理一篇博客出来，以此记录。 跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。 C…"}, {"id": "6992449912042422303", "title": "栈和队列算法题（基于JavaScript数组）", "desc": "栈和队列 基于数组 优先级队列 即由插入元素的优先级来决定它的位置，而不是按照元素进出的顺序排列的。 2道算法题。"}, {"id": "6893809205183479822", "title": "实现一个简易的模块打包器", "desc": "在日常的开发过程中，我们越来越多地使用webpack这种构建工具，但是对于它的使用，我们更多的是停留在去进行一些简单的配置，比如loader,plugin的配置。我们很少从零开始使用webpack去搭建一个项目(更多地是使用cli)，更加很少地去理解它内部的打包原理。为什么它能…"}, {"id": "6844903655045333000", "title": "移动端适配知识你到底知多少", "desc": "CSS像素：web编程用到的，我们在JS和CSS中使用的10px就是CSS像素，是可变的。CSS像素受屏幕缩放和设备像素比（dpr）的影响。如我们网页的中的字体在网页放大之后会变大，还有在移动端看起来会比PC端小一些 ...... Retina屏幕即视网膜屏幕，是苹果发布iph…"}, {"id": "7001139020939919374", "title": "JavaScript-天天聊对象-日期时间处理库 & Date对象", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前文我们学习 JavaScript 中的 String 字符串对象` 今天来学习 Ja日期处理库 & Date对象"}, {"id": "6987225164224135205", "title": "js经典设计模式--发布订阅模式", "desc": "发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。举个例子，售楼处卖房，那么售楼处要发布房型信息，那么它是发布者，中介关注房型，所以中介是订阅者，当售楼处发布消息之后或者房型信息更新之后，中介就会收到消息..."}, {"id": "7002520103824654344", "title": "bootstrap将表单获取到的值传往后端", "desc": "这是我参与 8 月更文挑战的第 28 天，活动详情查看： 8月更文挑战 （1）将普通文本框中的值传递给后端 前端html中代码如下： 给文本框内容设置了唯一的id值，这样后端只需要通过这个id值获得表"}, {"id": "6844903949309313037", "title": "如何不花钱让html5播放rtsp视频流（第二弹）", "desc": "书接上文，上期教程我们实现了利用FFmpeg将rtsp转码为rtmp，nginx分发，在页面上播放视频。但是rtmp也有还是具有缺陷的，比方说： rtmp视频流播放还是具有2-3秒的延迟实现，这对实时告警系统还是不太理想。 那么这期教程就搭建一个完整的视频系统，顺便优化一下这两…"}, {"id": "6950083400489238564", "title": "精读《高性能表格》", "desc": "每个前端都想做一个完美的表格，业界也在持续探索不同的思路，比如钉钉表格、语雀表格。笔者所在数据中台团队也对表格有着极高的要求，尤其是自助分析表格，需要兼顾性能与交互功能，本文便是记录自助分析表格高性能"}, {"id": "6970701799967850526", "title": "数组遍历方式大汇总 | JavaScript篇", "desc": "这是我参与更文挑战的第 6 天，活动详情查看： 更文挑战 前言 数组是开发中最经常使用的数据结构之一，里头提供了大量的属性和方法方便我们进行操作。本文将梳理JS数组身上的所有遍历方式，如文中有误或有遗"}, {"id": "6844903632203153415", "title": "promise经典面试题", "desc": "上期讲了promise基本概念和用法，今天结合上期的内容，讲解几道经典的相关面试题。 1. 首先Promise构造函数会立即执行，而Promise.then()内部的代码在当次事件循环的结尾立即执行(微任务)。 2. promise的状态一旦由等待pending变为成功fulf…"}, {"id": "7002239772123119624", "title": "Object作为函数和对象对应的方法及属性集合", "desc": "Object作为函数和对象，有不同的方法和属性，很容易搞混，这次做个总结，先总结一下作为函数时的方法和属性，再总结作为对象时（自身的和原型上的）属性。"}, {"id": "6996291744644612132", "title": "js基础重读红宝书(二)", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 \\ BOM EACMScript是JavaScript的核心，但如果在web中使用JavaScript，那么bom才是真正的核心。BOM提"}, {"id": "6992953759357730830", "title": "web前端高级JavaScript - JavaScript中的迭代器Iterator和生成器Generator", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 迭代器Iterator 可以用for of遍历 生成器Generator 以上便是JavaScript中的迭代器和生成器。"}, {"id": "6884920571386134535", "title": "优雅实现防抖与节流函数", "desc": "..."}, {"id": "6844903998986649608", "title": "应战Vue3 setup，Concent携手React出招了！", "desc": "正文开始之前，先预览一个生产环境的setup 示例，以示这是一个生产环境可用的标准特性。 在Function-based API文章里说得很清楚了，setup API 受 React Hooks 的启发，提供了一个全新的逻辑复用方案，能够更好的组织逻辑，更好的在多个组件之间抽取…"}, {"id": "6997308592235741221", "title": "分享十个 JavaScript 实用函数", "desc": "这里分享十个有过对自己日常工作帮助实用函数，如果有误的地方感谢大家帮忙指出~ 这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战"}, {"id": "6910038190829076488", "title": "使用JS实现图文混发", "desc": "在我的开源项目中，很早之前实现了图文混输的功能，但是在解析消息时，解析到图片需要将其上传至服务器拿到图片地址进行特殊拼接，上传图片是异步，解析图片是同步，这就造成了文字消息已经发出去了，图片才开始上传，导致图片拼接失败。 本文就跟大家分享下我解决这个问题的实现思路以及过程，欢迎…"}, {"id": "6921515173614354445", "title": "「算法与数据结构」JavaScript中的链表", "desc": "我们思考下，既然是来模拟一个链表类，那么就应该把它所有可能会用到的特性都塞进这个类里，就比如数组有 push/splice/indexOf/... 等等这些好用的方法我们链表必须也得有啊，我们先仔细构思下要给链表添加哪些实用的特性或者说方法，先搭一个基础骨架，这里我列出了很多，…"}, {"id": "6964398933229436935", "title": "[JS]代理对象Proxy", "desc": "Proxy就是拦截层，你给出被拦截的对象，外界访问这个对象必须先通过拦截层，即访问Proxy的实例对象。通过Proxy为外界访问进行过滤和改写，如赋值时需满足某些条件。"}, {"id": "6844903775623184398", "title": "用mobx构建大型项目的最佳实践", "desc": "mobx是一款基于观察者模式的响应式数据管理框架，相对于redux来说是后起之秀。 有一种观点认为mobx不适合构建大型项目，这源于mobx过于灵活的特点。灵活即意味着随意，这在开发日益复杂的大型项目是致命的弱点。redux则不然，它的唯一数据源、reducer纯函数、只能通过…"}, {"id": "6844903573663416334", "title": "Express中间件原理详解", "desc": "Express和Koa是目前最主流的基于node的web开发框架，他们的开发者是同一班人马。貌似现在Koa更加流行，但是仍然有大量的项目在使用Express，所以我想通过这篇文章说说Express中间件的原理。 中间件的本质就是一个函数，在收到请求和返回相应的过程中做一些我们想…"}, {"id": "6844903519342821390", "title": "看完离编写高性能的JavaScript又近了一步", "desc": "JavaScript对未声明变量的处理方式：在全局对象上创建该变量的引用(即全局对象上的属性，不是变量，因为它能通过delete删除)。如果在浏览器中，全局对象就是window对象。 如果未声明的变量缓存大量的数据，会导致这些数据只有在窗口关闭或重新刷新页面时才能被释放。这样会…"}, {"id": "6844903605783232526", "title": "create-react-app 源码解析之react-scripts", "desc": "上一篇我们已经讲了 create-react-app里面创建package.json安装依赖并且拷贝可运行的demo等步骤。传送门 这一篇我们来讲一下 create-react-app里面的启动服务等部分，就是平时我们安装完依赖之后，启动开发服务:npm start。这一块涉及…"}, {"id": "6996460369426268196", "title": "CommonJS与ES6模块的区别", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 CommonJS模块输出的是一个值的浅拷贝 CommonJs模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化不会影响到这个值"}, {"id": "6844904030972411912", "title": "[译] Jest 入门教程：使用 Jest 运行 JS 单元测试", "desc": "用行话说，测试表示检查我们的代码是否满足一些期望。例如，一个名为 transformer 的函数在接收一个输入（input）后，返回一个预期输出（expected output）。 本文介绍的 Jest 教程覆盖的是单元测试，但在文末，也给到很多其他类型测试的资源，方便大家学习…"}, {"id": "6844903581540155405", "title": "掘金同款 console", "desc": "水一篇看完大概只需要一分钟经常不小心在掘金打开开发者工具，映入眼帘的就是掘金的招聘广告了哟，这里还有个箭头，点一下可以，看起来非常有意思这个console怎么写的还真的不知道，不过没关系，扒他源码！主"}, {"id": "6844903507565215752", "title": "js数组的常见操作（ push、pop、unshift、shift、splice、concat、 join）的用法", "desc": "语法: arr.splice(起点,长度) 【如 arr.splice(0,2) 会删除数组中的前两项。】 例2：数组添加 splice() --可以向指定位置插入任意数量的项，只需要提供3个参数：插入起始位置、0（要删除的项数）和要插入的项。 如果要插入多个项，可以再传入第四…"}, {"id": "6969911915048861703", "title": "Javascript 对象的循环遍历", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战### 一、对象的遍历方法 1. `for ... in` 2. `Object.keys(), Object.values(), Object."}, {"id": "6901089743665102855", "title": "原生JS+Canvas实现五子棋游戏", "desc": "根据相应的权重，计算出计算机应该落子的位置。 要提的是，这里暂时只能悔一步棋。悔棋功能主要关键点是：1、销毁刚刚下的棋子；2、将之前不可能赢的状态还原；看下具体的代码： minusStep()为销毁棋子的方法，我们看下是怎么销毁的。 首先通过clearRect()擦掉该圆，然后…"}, {"id": "6994720195986063367", "title": "JavaScript之迭代器", "desc": "JavaScript迭代器 JavaScript中很多内置类型都实现了Iterable接口：字符串、数组、映射、集合、arguments"}, {"id": "6844903986516983822", "title": "重构：代码命名之逆袭女神", "desc": "李狗蛋为了和自己心仪的女神在一起，使上了浑身解数，让我们看看他是如何逆袭的。 采用机翻往往会出现同名非同义的情况，需要对基础组件置顶一个自己的规范，设想一下，如果多人维护统一套代码，每个人风格不统一又没有注释，很容易出现神秘变量。 表格的查询条件有很多，然而上面这一块并不全是学…"}, {"id": "6993236753003839501", "title": "JavaScrpit 基础系列之异常（七）", "desc": "当执行 JavaScript 代码时，会发生各种错误。 错误可能是程序员的编码错误，由错误输入引起的错误，或者由于其他不可预见的问题。 try 和 catch try 能够检测代码中的错误。 catc"}, {"id": "6863648166806290445", "title": "少侠留步! 你可能一直都误解了map，filter和reduce.", "desc": "这个问题不难，有的少侠可能会使用for循环来过滤出偶数，某些少侠可能会使用while循环，又或是使用数组自带的filter方法。 相信大部分少侠都能很轻松完成。 在filter函数内部，我们使用 num % 2 !== 0 来判断 是否是一个奇数，如果是一个奇数，就过滤出来。 …"}, {"id": "7000386773935194119", "title": "浅谈DOM事件流", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 ! Dom事件、事件流相关知识的复习与整理"}, {"id": "6972455760890429448", "title": "js数组对象深拷贝", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 背景 踩过的坑如下： formData本来是父组件传过来的，但是我不想直接用，于是我直接赋值给一个"}, {"id": "6844903758934048781", "title": "前端性能优化总结", "desc": "性能优化需要从哪几个方面入手？我们要先了解浏览器打开网页的过程。 下面我们分别对这几个阶段进行优化。 DNS全称Domain Name System。它是互联网的“通讯录”，它记录域名与实际ip地址的关系，域名是为了方面人类记忆。每次我们方位一个网站，都要通过各级的DNS服务器…"}, {"id": "6955458450096652325", "title": "让我们使用JavaScript制作一个可以正常工作的Guitar", "desc": "让我们使用JavaScript💻🤘制作一个可以正常工作的Guitar🎸 锻造仪器 将吉他弦夹在适当的位置 启动放大器！ EDIT:抓住选择！"}, {"id": "6875331180191973383", "title": "React Hooks的丑陋一面", "desc": "在这篇文章中，我将分享我对React Hooks的观点，正如这篇文章的标题所暗示的那样，我不是一个忠实的粉丝。 让我们来分析一下React官方的文档中描述的放弃类而使用钩子的动机。 好吧，我可以同意 this 在你刚开始使用Javascript的时候可能会有点混乱，但是箭头函数…"}, {"id": "6937470036822982663", "title": "Node.js 模块化你所需要知道的事", "desc": "我们知道，Node.js是基于CommonJS规范进行模块化管理的，模块化是面对复杂的业务场景不可或缺的工具，或许你经常使用它，但却从没有系统的了解过，所以今天我们来聊一聊Node.js模块化你所需要知道的一些事儿，一探Node.js模块化的面貌。 在Node.js中，内置了两…"}, {"id": "7004342473744973855", "title": "javaScript常用知识点", "desc": "1. this指向问题 this指向的对象称为函数的上下文对象context； this的指向取决于函数被调用方式 this的指向不是函数声明是绑定的，而是在函数运行过程中动态绑定的。 2. 说说你对"}, {"id": "6844903789611188231", "title": "【译】ES10功能完全指南", "desc": "ES10仍然只是一个草案。但是除了Object.fromEntries大多数功能已经在Chrome中实现，所以你为什么不尽早开始探索它呢？当所有浏览器开始支持它时，你已经获得了领先优势，这只是时间问题。对于有兴趣探索ES10的人来说，这是一份非外星人指南。 BigInt是第7种…"}, {"id": "6991677634451079204", "title": "js事件委托(事件代理)", "desc": "起因： 1、这是前端面试的经典题型，要去找工作的小伙伴看看还是有帮助的； 2、其实我一直都没弄明白，写这个一是为了备忘，二是给其他的知其然不知其所以然的小伙伴们以参考； 概述： 那什么叫事件委托呢？它"}, {"id": "6994619427287203854", "title": "浅谈Javascript设计模式之结构型模式", "desc": "前言 今天我们主要来聊聊设计模式中的结构型模式。 适配器模式（Adapter Pattern） 适配器模式可用来在现有接口和不兼"}, {"id": "6991848846192017444", "title": "利用正则实现千分位分隔｜ 8月更文挑战", "desc": "前言 在一些涉及到比较大的数字的场景中，比如人数，金额等，我们常常需要对这些数字进行千分位，然后逗号分隔，这样会比较好阅读。 比如 如果是千分位分隔 对比这两种，我们肯定是选择第二种，方便阅读。 实现"}, {"id": "6969807318061957128", "title": "做一个照片墙——可拖动平移和以任意点为中心缩放的DIV组件", "desc": "最近在做一个照片墙网页，展示自己画的明日方舟的像素画，希望这个网页可以用鼠标拖动平移同时可以以鼠标当前位置为中心滚动滚轮缩放。"}, {"id": "6854573211586150413", "title": "前端科普系列（4）：Babel —— 把 ES6 送上天的通天塔", "desc": "在上一节 《CommonJS：不是前端却革命了前端》中，我们聊到了 ES6 Module，它是 ES6 中对模块的规范，ES6 是 ECMAScript 6.0 的简称，泛指 JavaScript 语言的下一代标准，它的第一个版本 ES2015 已经在 2015 年 6 月正式…"}, {"id": "6844904013096288269", "title": "这样回答继承，面试官可能更满意", "desc": "一个类获取另一个或者多个类的属性或者方法。继承可以使得子类具有父类的各种方法和属性。以免重复输出很多代码。 复制父类的方法和属性来重写子类的原型对象。 1、简单易操作。 1、父类使用this声明的属性被所有实例共享。 原因是实例化是父类一次性赋值到子类实例的原型上，它会将父类通…"}, {"id": "6895255781642338312", "title": "聊聊javascript语言的设计思想", "desc": "作为前端工程师的你，相信对于javascript的掌握是必不可少的技能，那么你知道多少种设计模式呢？你有了解哪些设计模式呢。首先我们需要知道设计模式不是javascript独有模式、在众多语言中、都存在设计模式、所以、设计模式是一种编程思想、设计模式Design pattern…"}, {"id": "6995498187419025416", "title": "深拷贝与浅拷贝的实际应用", "desc": "今天在做一个可操作性的表格功能时遇见一个问题，该表格的数据源来自三种表单，我用dialog弹出层，嵌套动态组件实现的这个功能"}, {"id": "6996577396258242596", "title": "排序算法——希尔、快速排序", "desc": "希尔排序 希尔排序是插入排序的一种高效的改进版，而且效率也比插入排序更高；在大多数情况下，快速排序是最快的；快速排序可以在一次循环中(其实是递归调用)，找出某个元素的正确位置"}, {"id": "6951323361146306597", "title": "图片懒加载", "desc": "前言图片的懒加载一直都是大厂热门的考题，可为什么他能成为大厂们纷纷趋之若鹜的香馍馍呢，这就要提到它的好处了——性能优化，对就是性能优化，要知道，所有的产品最终是要服务于客户的，而谁能使客户的体验感更好"}, {"id": "6844903943538114573", "title": "vue / react的UI库都在用的几个DOM API🚀", "desc": "虽然vue/react帮我们实现了操作数据映射到dom操作, 但是还是有很多不得不用DOM API的场景, 下面我就给大家列出一些UI库中经常出现的DOM API(写业务代码也可事半功倍). 注: 本文是系列文章会持续更新, 大家可收藏保持关注. 也可关注我github上的笔记…"}, {"id": "6952707547249770532", "title": "当你站在面试官的角度二（flex布局）", "desc": "本文章的一些问题都是我在复习知识点的时候自己站在面试官的角度思考或是在网上查找所得。正所谓人最大的敌人就是自己，所以站在面试官的角度打败自己，也许你就吧，正在奋斗的我们。"}, {"id": "6959094874264043533", "title": "手写防抖函数&节流函数", "desc": "防抖 每次事件触发后总是等待一段时间执行，如果在等待时间内事件再次触发，则重新计算等待时间（停止触发的时候只会执行一次,"}, {"id": "6844903817272623117", "title": "前端工程师必备：前端的模块化", "desc": "避免命名冲突：JavaScript本身是没有命名空间，经常会有命名冲突，模块化就能使模块内的任何形式的命名都不会再和其他模块有冲突。 更好的依赖处理：使用模块化，只需要在模块内部申明好依赖的就行，增加删除都直接修改模块即可，在调用的时候也不用管该模块依赖了哪些其他模块。 模块成…"}, {"id": "6991495725800488990", "title": "【重学JS】每天巩固基础-打好地基筑高楼-day1(二) ", "desc": "巩固学习 JavaScript基础知识, 加深理解记忆, 打牢地基才能盖高楼! 加油 运算符和表达式 （重点） 运算符 ： 操作运算的符号 表达式 ： 一个常量、一个变量、一个式子 都称为表达式"}, {"id": "6844904067961978894", "title": "你的掘金文章本可以这么炫（博客美化工具一波带走）", "desc": "你盼世界， 我盼望你无bug。Hello 大家好！我是霖呆呆！ 这篇文章不是一篇技术文，主要是提供给大家一些美化掘金文章的方法。 也许我们还可以用一些别的方式来让我们的文章更具有个性化, 试想一下，在你辛辛苦苦精心尽力的写完了一篇文章之后，再花上一小点时间来美化你的文章样式。 …"}, {"id": "6992230899001589768", "title": "通过“图片预加载”讲一讲代理设计模式", "desc": "代理模式是为一个对象提供一个代用品或占位符，以便控制对该对象的访问。 当我们需要获取某个对象的方法或属性的时候，由于权限等限制无法获取，然后通过一个有权限的代理对象转发我们的获取请求，代理对象可对请求"}, {"id": "6906125459352715272", "title": "复盘node项目中遇到的13+常见问题和解决方案", "desc": "笔者之前陆陆续续接手过几个nodejs项目, 也参与过几个有点意思的nodejs开源项目, 最近把其中遇到的一些问题和解决方案做一个梳理, 避免大家继续踩坑. 话不多说我们开始吧~ 1. window和mac下设置NODE_ENV变量的问题 从start指令中我们可以发现我们用…"}, {"id": "7007700408973918245", "title": "javascript基础代码集锦（一）", "desc": "1、复制文本内容到剪切板 使用方式 原理： 创建一个textare元素并调用select()方法选中 document.execCommand('copy')方法，拷贝当前选中内容到剪贴板。 2、生成"}, {"id": "7007710727725121566", "title": "【建议收藏】101张脑图，从零开始学完Vue3（包括Vue3.2最新语法）", "desc": "🚀最近为了夯实Vue，花了74天，把Vue3完完整整地过了一遍，受益匪浅！📚我将所有笔记整理成此文，共101张脑图，包括了Vue3.2最新的语法，欢迎阅读~"}, {"id": "7007605226114908190", "title": "midwayjs+puppeteer部署实战", "desc": "考虑基于puppeteer的node应用很吃资源，服务压力上升后需要手动扩容后续运维成本高，因此想利用serverless自动扩容特性来降低服务的后续运维成本，midway.js+puppeteer"}, {"id": "7004638318843412493", "title": "最新的前端大厂面经（详解答案）", "desc": "Hello 大家好 我是鲨鱼哥 最新的大厂前端面试题出炉啦 助力大家金九银十拿到好offer 大家冲起来～～"}, {"id": "7007950531024912420", "title": "[译] Intersection Observer 实现动态 header", "desc": "前言 你是否有过这样的一个 UI 需求：页面上的某些组件需要根据它们所在视口滚动到某个阈值，或者从所处视口进入或移出？在JavaScript中，可以通过监听滚动条事件进而在回调函数中来处理，但这会影响"}, {"id": "7007306391836688415", "title": "浅谈前端的状态管理", "desc": "前言 提到状态管理大家可能马上就想到：Vuex、Redux、Flux、Mobx等等方案。其实不然，不论哪种方案只要内容一多起来似乎都是令人头疼的问题，也许你有适合自己的解决方案又或者简单的注释和区分模"}, {"id": "7007718158236647437", "title": "变量提升", "desc": "JavaScript 代码执行过程中，JavaScript 引擎把变量的声明部分和函数的声明部分提升到代码开头的行为"}, {"id": "7007098437673943076", "title": "你知道Github中国区谁最有影响力吗？用github actions每天自动爬数据给你看 ！", "desc": "策划 最近和我们组几位老师茶余饭后都在讨论这个github的中国区的关注者数量排名，第一名尤雨溪：7.4w关注者，第二名阮一峰：6.7w关注者，第三名廖雪峰：3.4w关注者。 市面上虽然已经有不少做这"}, {"id": "7007975053485113381", "title": "【译】Symbol：JavaScript 中最容易被误解的特性？", "desc": "Symbol 是 JavaScript 中的奇怪特性之一，因为很少有人真正理解它，也不去使用它。但是 Symbol 的存在是有原因的，你不觉得吗？就像 with 一样有它存在的价值，无论你是否喜欢。"}, {"id": "7007214462813863950", "title": "「React 进阶」 学好这些 React 设计模式，能让你的 React 项目飞起来🛫️", "desc": "一 前言 今天我们来悉数一下 React 中一些不错的设计模式，这些设计模式能够解决一些功能复杂，逻辑复用 的问题，还能锻炼开发者的设计和编程能力，以为多年开发经验来看，学好这些设计模式，那就是一个字"}, {"id": "7007341127900626957", "title": "【算法】如果玉兔遇到莱昂纳多 · 斐波那契，那明年中秋嫦娥在月亮上会拥有几只玉兔？", "desc": "马上中秋节就要到了，也不知道我家嫦娥在月亮上过的怎么样，玉兔还陪在她身边吗？ 今天我们来探讨一个有趣的问题，如果玉兔遇到莱昂纳多·斐波那契，那明年中秋嫦娥在月亮上会拥有几只玉兔？"}, {"id": "7008006345177694245", "title": "吃透JavaScript核心——函数、作用域、预解析", "desc": "函数 什么是函数 函数的使用 函数的使用分为：声明函数，调用函数 注：函数不调用，自己不执行 函数的封装： 把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。 函数的参数 形参和"}, {"id": "7007449778615222303", "title": "JavaScript事件循环机制EventLoop", "desc": "前言 今天与同事切磋高级开发技能，同事问到了事件循环机制Event Loop。一时没有回答上来，回家后整理了一下。以此谨记。 概念 Event Loop即事件循环，是指浏览器或Node的一种解决jav"}, {"id": "7007416743215759373", "title": "这可能是掘金讲「原型链」，讲的最好最通俗易懂的了，附练习题！", "desc": "前言 大家好，我是林三心，相信大家都听过前端的三座大山：闭包，原型链，作用域，这三个其实都只是算基础。而我一直觉得基础是进阶的前提，所以不能因为是基础就忽视他们。今天我就以我的方式讲讲原型链吧，希望大"}, {"id": "7007965862636290085", "title": "\bsourceMap的原理", "desc": "什么是sourceMap？ sourceMap的配置项 配置项其实只是五个关键字eval、source-map、cheap、module和inline 关键字 含义 source-map 产生.map"}, {"id": "7007689733325193223", "title": "我建造一条楼梯通往月球，我有多少种方式能追到嫦娥姐姐呢？", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 我昨晚冥思苦想啊，想想如何才能出一篇跟中秋有关的文章呢？但是我的眼里只有嫦娥，所以我想到了嫦娥奔月，话说嫦娥奔月那是有多长的路径啊？如果我"}, {"id": "7007306019307175966", "title": "JavaScript中的这些骚操作，你都知道吗？", "desc": "数组去重 正常我们实现数组去重大多都是通过双层遍历或者indexOf的方式。 双层for循环去重 利用indexOf去重 但其实有一种更简单的方式：利用Array.from与set去重 这种代码的实现"}, {"id": "7007450902990684191", "title": "js实现空间复杂度为O(1)的快排", "desc": "看了各种快排实现，想寻找一种空间复杂度为O(1)的实现，无奈没有找到合适的。 因此想自己动手试试，半个小时过去没有半点进展。 想起曾经收藏过一个算法可视化网站Data Structure Visual"}, {"id": "7007857473700757517", "title": "揭秘JavaScript元编程能力", "desc": "前言 js中一直以来都有元编程的概念，比如ES5中强大的Object.definedProperty,ES6中Proxy + Reflect更是将这一能力发扬光大。 首先我们首先需要了解什么是元编程？"}, {"id": "7004661323124441102", "title": "从零到一实现企业级微前端框架，保姆级教学", "desc": "微前端是目前比较热门的一种技术架构，挺多读者私底下问我其中的原理。为了讲清楚原理，我会带着大家从零开始实现一个微前端框架！"}, {"id": "6906106922605543432", "title": "「星辰大海」你可能需要知道的 promise 知识的总结（内附思维导图）", "desc": "最近又重新整理一下 Promise 相关知识，一方面和上一期文章有个接应，另一方面，方便自己日后复盘回顾。 如下代码，对于数组、字符串、对象等我们可以按照如下方式进行遍历。 上述都是可以通过 for..of 来迭代出来。可能此时你会有疑问了，对象不可以么？（那我们不妨来试试） …"}, {"id": "6844903955231686670", "title": "20多个小事例带你重温 ES10 新特性", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 ES10 虽然没有像 ES6 那么多新特性，但 ES10 仍然有一些有用的特性。文本通过简单示例来介绍了 ES10 新出来的特性。通过这种方式，咱们就可以快速理解，而不需要看太多的官方解释。 1. Array.…"}, {"id": "6999213959475626021", "title": "JavaScript 中定义函数的方法", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 通常，函数是一系列指令或“子程序”，可由该函数外部（或内部）的代码调用。本质上，函数“封装”了一个特定的任务。 函数是 JavaScrip"}, {"id": "6998773340479422478", "title": "学习笔记: 深拷贝与浅拷贝", "desc": "面试总是遇到这个问题,那不如自己总结加深一下印象 1.如何区分深拷贝与浅拷贝 2.基本数据类型与引用数据类型3.深拷贝的方法"}, {"id": "7000363550858280974", "title": "JS垃圾回收机制", "desc": "Javascript 具有自动垃圾回收机制，会定期对那些我们不再使用的变量、对象所占用的内存进行释放。"}, {"id": "6844903897618710535", "title": "JS 新语法「可选链」「双问号」已进入 Stage 3", "desc": "你希望如果 response 或者 response.settings 或者 response.settings.n 不存在（值为 null 或者 undefined）时，result 保底值为 100。 但是上面代码在 n 为 0 的时候，也会让 result 变成 100，…"}, {"id": "6844904127948914701", "title": "你也许不知道的javascript高级函数", "desc": "高阶函数是对其他函数进行操作的函数，可以将它们作为参数或通过返回它们。简单来说，高阶函数是一个函数，它接收函数作为参数或将函数作为输出返回。 例如Array.prototype.map，Array.prototype.filter，Array.prototype.reduce …"}, {"id": "6983443137041530887", "title": "[译] 使用 Husky 和 Hooks 保证 JavaScript 代码质量", "desc": "对于一个可维护和可扩展的应用程序来讲，保证代码质量无疑至关重要。但我们如何在项目中执行与质量相关的标准呢？ 在 JavaScript 中，你可以使用 ESLint 来定义编码规范，同时可以使用 Pre"}, {"id": "6998820610843344903", "title": "理解web文件操作的全过程(Blob, File, ArrayBuffer)", "desc": "web应用提供能力去访问文件，与之对应的也提供了一组API去访问文件数据.，我试图从宏观到微端的角度探寻文件系统所经历的历程。"}, {"id": "7001802991745368077", "title": " Js回顾（五）关于js中的零散知识的整理", "desc": "Js回顾（五） 关于js中的零散知识的整理 变量提升 我们知道，let和var的区别之一，就是变量提升。 var会将变量提升到全局的开始，如果在var之前调用var声明的变量，会出现undefined"}, {"id": "7002900089010143268", "title": "JS实用篇复习笔记（9）", "desc": "1、说说 Methods of primitives 基本类型 1、首先基本类型 有哪些 ？ （经典 面试问题） number, string,boolean, bigint, symbol, nul"}, {"id": "6994829333424504845", "title": "深入理解 Javascript 执行机制 [ Event Loop 事件循环 ]", "desc": "前言 但凡是做前端的，应该都知道 Javascript 有多么重要，纵观目前的主流技术栈，像什么 Vue, React，Node 都是基于 Javascript 的，那这里必须提到一个点 Javasc"}, {"id": "6989114175553273869", "title": "从事件循环到异步机制", "desc": "概述 我曾多次去了解事件循环，想看清楚它的全貌，但直至如今我掌握的只是其中的一点皮毛。写这篇文章主要是再次学习与记录它。 文章主要介绍部分面试题、事件循环概述、primise中异步机制asap"}, {"id": "6844903696258564110", "title": "JavaScript多线程编程", "desc": "浏览器端JavaScript是以单线程的方式执行的，也就是说JavaScript和UI渲染占用同一个主线程，那就意味着，如果JavaScript进行高负载的数据处理，UI渲染就很有可能被阻断，浏览器就会出现卡顿，降低了用户体验。 为此，JavaScript提供了异步操作，比如定…"}, {"id": "6844903934474059790", "title": "微信公众号爆出前端安全漏洞", "desc": "如果视频又打不开了，可以去我公众号的文章里看。 现在我们来分析下这个漏洞的产生过程。 首先标题中存在 HTML <input onfocus=\"alert('1')\">，在网页中如果不对这部分文本做转义的话，就会正常渲染为 HTML。 在文章详情中其实我们并没有发现这个问题，也…"}, {"id": "6996147944533524488", "title": "JavaScript数据类型 -  Object类型", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 创建对象一 ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行new操作符后跟要创建的对象类型的名称来创建。而创建"}, {"id": "6987951913622831141", "title": "记录一个TS中的小坑", "desc": "在渲染列表的时候，很多场景中都需要key这个属性，这个属性一般是后端给的，但是上次我发现后端给的数据出现了问题，于是就打算自己加一个key……"}, {"id": "7003358871238475813", "title": "《JavaScript高级程序设计（第3版）》读书笔记2", "desc": "第3章 基本概念 一、语法 标识符：变量、函数、属性的名字，或者函数的参数。 规则： 第一个字符必须是一个字母、下划线（_）或一个美元符号（$） 其他字符可以是字母、下划线、美元符号或数字 不能把关键"}, {"id": "6984676646410420231", "title": "哄女朋友利器 —— 赶紧对她说我爱你，程序猿的专属浪漫（附源码）", "desc": "1. 文字表白 + 雪花动态效果2. canvas 绘制爱心3. 文字蒙版（比较简单）4. 文字渐显5.1. 1.1.<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.****年**月**日，是我..."}, {"id": "6997330575602221092", "title": "JS 系列之 BFC", "desc": "大家好，我是戴锐宁，第一次编写前端相关的技术文章，写的不好大佬们可以给点建议，`BFC` 算是在面试中比较常见的话题了，但很多人还是没有搞清楚 `BFC` 是什么？以及如何创建 `BFC`？等系列问题"}, {"id": "6850037261485113358", "title": "面试！你真的准备好了吗？｜手写API系列梳理", "desc": "标题党，它又、又、又来了......"}, {"id": "6965684757921431583", "title": "手把手教你写一个脚手架（二）", "desc": "模仿 vue cli 造的 mini cli 轮子系列文章第二篇。主要讲述了造轮子过程中的一些要点和坑点。"}, {"id": "7005938189495959559", "title": "JavaScript基础篇04：函数的this和闭包", "desc": "1. this的指向规则 箭头函数 箭头函数的this指向的是声明函数时的上下文 默认规则 普通函数的this指向把函数当成方法来调用的执行上下文。 但是要注意， this是函数的内部对象，"}, {"id": "7005939517681041416", "title": "JavaScript基础篇06：事件和JS执行机制", "desc": "事件 什么是宏任务和微任务？ 宏任务是由宿主发起的任务，包括：script（外层同步代码）、window.setTimeout()、window.setInternal()、window.reques"}, {"id": "6844903748351819790", "title": "五星推荐的系列文章清单", "desc": "按课程小节整理了 Dan Abramov 两套课程的代码，已上传 github。Building React Applications with Idiomatic Redux 课程中，有部分老旧的代码，在 router v4 下不能正常运行，在这份练习代码中，支持了 v4。 …"}, {"id": "6844903782719946765", "title": "「从源码中学习」Vue源码中的JS骚操作", "desc": "1. 当前环境的一系列判断 2. user Agent常量的一系列操作 3. 字符串操作 解析： 获得该字符串第一个字符的unicode，然后与 0x24 和 0x5F 作比较。 若作为一个想进阶中高级的前端，charCodeAt方法的各种妙用还是需要知道的（面试算法题各种考）…"}, {"id": "6844903952157245447", "title": "一张刮刮卡竟包含这么多前端知识点", "desc": "刮刮卡是大家非常熟悉的一种网页交互元素了。实现刮涂层的效果，需要借助canvas来实现，想必每个前端工程师都清楚。实现刮刮卡并不难，但其中却涉及很多知识点，掌握这些知识点，有助于我们更深刻理解原理，对于提升举一反三的能力很有帮助。本期以实现刮刮卡为例，分享下如何科学合理地封装函…"}, {"id": "6996948207389376542", "title": "小游戏《你画我猜》是怎么”调教“的", "desc": "用h5实现一个《你画我猜》小游戏。优化了画笔锯齿毛边、分段传输、防止画笔丢失、画笔流畅性等问题，附赠游戏逻辑梳理图。"}, {"id": "6998380004610441252", "title": "变量提升（块级上下文）", "desc": "通过一道题，去理解知识点，然后活学活用，去题目中更好的巩固知识点，我们一起加油，把基础知识掌握牢固，奥利给"}, {"id": "6844903842585247751", "title": "【周刊-3】三年大厂面试官-十道前端面试题（欢迎挑战）", "desc": "在两家大厂工作了6年，当了3年的前端面试官，把一些较难的面试题与答案汇总在我的Github中。希望对大家有所帮助，助力大家进入自己理想的企业。 希望大家不要看到题目就直接看答案，还是希望先自己进行思考，在思考的过程中，会有意想不到的收获。 我把下面每道题的难度高低，和对标的职级…"}, {"id": "6844904191240962061", "title": "[初探] proxy 的优势与使用场景", "desc": "随着 vue3.x 的消息越来越多，proxy 的讨论也越来越多。相对于 Object.defineProperty ，proxy 有什么区别，有什么优势，以及可以应用在什么地方。该文章就简单的介绍下 讲 proxy 之前，先回顾下 Object.defineProperty …"}, {"id": "6844903789070123021", "title": "重学 JS 系列：聊聊 new 操作符", "desc": "虽然上述例子中的构造函数中返回了 1，但是这个返回值并没有任何的用处，得到的结果还是和之前的例子完全一样。 通过这个例子我们可以发现，虽然构造函数内部的 this 还是依旧正常工作的，但是当返回值为对象时，这个返回值就会被正常的返回出去。 通过以上几个例子，相信大家也大致了解了…"}, {"id": "6844904154792476685", "title": "Vue仿蘑菇街商城项目（vue+koa+mongodb）", "desc": "大家好，我是六六。学习了很长时间，为此想做一个项目来锻炼一下自己，于是便看上了蘑菇街（有很多漂亮的衣服和美女哈哈哈）。所以打算从零仿照蘑菇街官网来做一个项目，现在项目终于上线了。对于项目有任何问题或者建议都可以评论，我欢迎大家来提意见。 完成用户登录，用户注册，注册信息保存于数…"}, {"id": "6882551009219575815", "title": "嗯，手搓一个TinyPng压缩图片的WebpackPlugin也SoEasy啦", "desc": "曾经发表过一篇性能优化的文章《前端性能优化指南》，笔者总结了一些在项目开发过程中使用过的性能优化经验。说句真话，性能优化可能在面试过程中会有用，实际在项目开发过程中可能没几个同学会注意这些性能优化的细节。 若经常关注性能优化的话题，可能会发现无论怎样对代码做最好的优化也不及对一…"}, {"id": "6895518401196720136", "title": "ES2020 系列：可选链 \"?.\" 为啥出现，我们能用它来干啥？", "desc": "可选链 ?. 是一种访问嵌套对象属性的安全的方式。即使中间的属性不存在，也不会出现错误。 如果你才刚开始读此教程并学习 JavaScript，那可能还没接触到这个问题，但它却相当常见。 举个例子，假设我们有很多个 user 对象，其中存储了我们的用户数据。 我们大多数用户的地址…"}, {"id": "6992374008029118478", "title": "JavaScript 系列之原型（二）", "desc": "[JavaScript 系列之原型｜ 8月更文挑战 ]连更数天带你学会 JavaScript 基础。"}, {"id": "6994060677316870152", "title": "vue3在项目中的逻辑抽离和字段显示", "desc": "“这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战” 逻辑分层 将各个区域业务分开 这样做的优势 这样的场景应该如何处理 优化 reactive 不一定非要写在setup函数中 如何在页面上"}, {"id": "6980232639009521677", "title": "技术周报 · 2021-07-02", "desc": "小编推荐 抽象泄漏 程序员的酒后真言 New Features in ECMAScript 2021 CSS & 动画 CSS 里的整洁架构 Web 动画原则及技巧浅析 JavaScript 前端页面"}, {"id": "7000936088969674783", "title": "掘金可视化智能抽奖升级版", "desc": "前端时间看到大佬云的世界出了一个掘金抽奖可视化插件（本人使用的油猴），觉得很有意思，copy一下代码，接入进来，使用了几天，感觉非常棒，研究了一下，改了点样式，增加了一些功能"}, {"id": "6993946538368204837", "title": "今天来聊聊JavaScript的垃圾回收机制", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 垃圾回收 　　JavaScript是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。在C和C++等语言中，跟踪内存使用对开发者"}, {"id": "6914161872795090958", "title": "React入门指南", "desc": "React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了 React 是一个用于构建用户界面的 JAV…"}, {"id": "6844903805063004167", "title": "从setTimeout理解JS运行机制", "desc": "setTimeout()函数：用来指定某个函数或某段代码在多少毫秒之后执行。它返回一个整数，表示定时器timer的编号，可以用来取消该定时器。 解析：无论setTimeout的执行时间是0还是1000，结果都是先输出3后输出2，这就是面试官常常考查的js运行机制的问题，接下来我…"}, {"id": "6905366638263173133", "title": "Virtual DOM", "desc": "因为DOM树🌲是一个树形的结构，所以使用JavaScript对象就可以表示出树的结果。HTML和虚拟DOM有点类似于XML和JSON，使用不同的形式来表示相同的数据。 需要注意的是虚拟DOM不一定比真实的DOM操作快，JavaScript引擎和DOM引擎使用的是同一个主线程，…"}, {"id": "6844903633021075469", "title": "移动端网页性能优化自查表", "desc": "我是一个莫得感情的代码搬运工，每周会更新1至2篇前端相关的文章，有兴趣的老铁可以扫描下面的二维码关注或者直接微信搜索前端补习班关注。"}, {"id": "6915017221001445384", "title": "lint 代码检查", "desc": "我们知道，当下采用工具去完成项目代码的校验工作是更加高效和合理的，在这里我们使用的就是ESLint。 他是目前最为主流的javascrit lint工具，专门用于监测javascript代码的质量。通过ESLint就可以很容易的去统一不同开发者的编码风格。例如缩进，换行，分号以…"}, {"id": "6844903828916011022", "title": "深入了解canvas在移动端绘制模糊的问题", "desc": "由于一些移动端的兼容性原因，我们某个项目需要前端将pdf转换成在移动端页面可直接观看的界面。为了方便解决，我们采用了pdf.js这个插件，该插件可以将pdf转换成canvas绘制在页面上。不过，在测试过程中却发现，在移动端的浏览器上，绘制的内容展示十分模糊（如下图），经过分析之…"}, {"id": "6844904056457003015", "title": "HTML Standard系列：Event loop、requestIdleCallback 和 requestAnimationFrame", "desc": "在浏览器的实现上，诸如渲染任务、JavaScript 脚本执行、User Interaction、网络处理都跑在同一个线程上，当执行其中一个类型的任务的时候意味着其他任务的阻塞，为了有序的对各个任务按照优先级进行执行浏览器实现了我们称为 Event Loop 调度流程。 这种设…"}, {"id": "6984563558012944415", "title": "查找字符串中出现次数最多的字符", "desc": "四种方法实现查找字符串中出现次数最多的字符。方法一：先将字符串排序，再使用正则的match方法分组，最后筛选出最长的。"}, {"id": "6877353084519972878", "title": "一文搞懂JS系列（三）之垃圾回收机制，内存泄漏，闭包", "desc": "了解 Javascript 中的垃圾回收机制，通过垃圾回收机制的所谓bug，也就是多余内存没有得到释放，了解到内存泄漏的概念，最终，学习闭包。"}, {"id": "6960815323146616846", "title": "原型链基础及多种使用方式", "desc": "原型链继承以及继承的多种使用方式，例如：借用构造函数，组合继承，原型继承，寄生式继承，还有寄生组合式继承等，也包含了需要注意的事项。"}, {"id": "6854573218125234190", "title": "ES2020 系列：新增基本数据类型 BigInt", "desc": "BigInt 是一种特殊的数字类型，它提供了对任意长度整数的支持。 创建 bigint 的方式有两种：在一个整数字面量后面加 n 或者调用 BigInt 函数，该函数从字符串、数字等中生成 bigint。 请注意：除法 5/2 的结果向零进行舍入，舍入后得到的结果没有了小数部分…"}, {"id": "6869752029742137352", "title": "jExcel 创建基于 Web 的电子表格应用", "desc": "jExcel 是一个轻量级的vanilla javascript插件，用于创建与Excel或任何其他电子表格软件兼容的基于Web的交互式表格和电子表格，可以创建可以交互的表格，兼容Excel，可以从 Js Array、JSON、CSV、XSLX文件创建表格。可以从Excel中直…"}, {"id": "6844903906166718471", "title": "JavaScript 中的二叉树以及二叉搜索树的实现及应用", "desc": "接下来让我们一起来探讨js数据结构中的树。这里的树类比现实生活中的树，有树干，树枝，在程序中树是一种数据结构，对于存储需要快速查找的数据非有用，它是一种分层数据的抽象模型。一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点以及零个或多个子节点。如下所以为一个树结构：…"}, {"id": "6844904068809572365", "title": "127个常用的JS代码片段，每段代码花30秒就能看懂（二）", "desc": "大家好，首先感谢大家对上一篇文章 127个常用的JS代码片段，每段代码花30秒就能看懂（一）的关注，在上篇文章里分享了前21段代码，今天继续分享21段代码，希望对你的日常工作有所帮助。 通过递归的形式，将多维数组展平成一维数组。 去重对象的属性，如果对象中含有重复的属性，以前面…"}, {"id": "6979579851963367437", "title": "js中的六种继承方式", "desc": "想要实现继承,就必须有一个父类,为了方便演示,本文将使用的父类统一定义 原型链继承 特点: 只能继承父级原型上的属性和方法 所有子类的实例都会共享到父级原型上的属性和方法 构造函数继承 特点: 只继承"}, {"id": "6844903937242300430", "title": "手写算法并记住它：归并排序", "desc": "本系列文章就尝试解决这个问题。 研读那些排序算法，细品它们的名字，其实都很贴切。 比如归并排序，“归并”二字就是“递归”加“合并”。它是典型的分而治之算法。 上图中，先把数组一分为二，然后递归地排序好每部分，最后合并。 解决办法很容易想到，两权相较取其轻。 如上图所示，每次比较…"}, {"id": "6898188817145200648", "title": "「JavaScript」彻底搞懂JS原型链与继承，并没有那么难！", "desc": "构造函数，就是提供一个生成对象的模板，主要用来初始化对象，即为对象成员变量赋初始值。 使用构造函数初始化对象的时候，需要使用到 new 关键字。new在执行的时候分为以下几步： 返回这个新对象。 且 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。 J…"}, {"id": "6844903604453654536", "title": "[译]揭秘 React 服务端渲染 ", "desc": "让我们来近距离接触一个能够让你使用 React 构建 universal 应用的特性——React 服务端渲染( Server-Side Rendering )。 服务端渲染（以下简称 SSR ）是一个将通过前端框架构建的网站通过后端渲染模板的形式呈现的过程。 能够在服务端和客…"}, {"id": "6844903558169493511", "title": "我未曾见过的 JS 特性", "desc": "有一天我正在阅读 MDN 文档，发现了一些我之前压根没有意识到在 JS 中存在的特性和 API。这里我罗列了一些，不管它们是否有用，JS 的学习永无止境。 有多少人知道在 JS 里你可以给 for 循环和语句块命名？反正我不知道…… 命名完新名称之后你可以在 for 循环中的 …"}, {"id": "6844904013754793991", "title": "JavaScript 函数的特性与原型链讲解", "desc": "这次给大家带来一个关于 JavaScript 函数与原型链之间的关系的分享，将会从函数开始讲起，一直讲到整个原型链是什么样子的，希望能给大家带来帮助。 姊妹篇：《JavaScript 的 typeof 原理小记》 ，如果看完本篇文章还有疑惑，那么可以继续阅读这个姊妹篇。 当一个…"}, {"id": "6988511003797356551", "title": "JS内存回收机制——GC", "desc": "GC是一种机制，垃圾回收器完成具体的工作，而工作内容就是查找垃圾释放空间，回收空间。GC中的算法就是工作时查找和回收所遵循的规则"}, {"id": "6844903748418928654", "title": "谈谈JS中的函数劫持", "desc": "说到劫持，第一反应可能是什么不好的东西。函数劫持并不邪恶，关键是看使用的人。虽然这个概念在前端领域使用较少，但是在安全领域、自定义业务等场景下还是有一定的使用价值的。所以，这一篇文章将会和大家一起去了解一下JS中的函数劫持是什么，有什么用。 函数劫持，顾名思义，即在一个函数运行…"}, {"id": "6992395244243255304", "title": "常用的字符串方法", "desc": "这篇文章主要讲了JS中一些常用的字符串方法，结合我之前自己学习的笔记给大家整理出来了，如有错误或不足，请私信我，"}, {"id": "6952724281620955167", "title": "【变量、作用域与内存】- 红宝书（四） | 创作者训练营第二期", "desc": "历经两个多月断断续续地读完了红宝书，详细地读完一遍后发觉整本书知识点全而泛，乍一想每一章的细节，还是略显模糊。于是督促自己计划编写每一章的着重点再次加深印象和理解。"}, {"id": "6845166890717806605", "title": "JavaScript ES6代理的实际用例", "desc": "元编程是一种强大的技术，使你能够编写可以创建其他程序的程序。ES6借助代理和许多类似功能，使在JavaScript中利用元编程变得更加容易。ES6 Proxy（代理） 有助于重新定义对象的基本操作，从而为各种可能性打开了大门。 本教程主要针对有JavaScript经验的开发人员…"}, {"id": "6844904179572408327", "title": "JS避坑-如何优雅地遍历对象", "desc": "我们都知道for...in会遍历原型链上的属性，所以一般会结合hasOwnProperty来判断属性是否在对象自身上，而不是在原型链上。 于是我动起了小心思，使用字面量创建的对象或者数组，不是类的实例，原型链上干干净净的，那遍历的时候也没必要判断了吧。于是就在遍历字面量对象时放…"}, {"id": "6877109386641162248", "title": "月底冲业绩，分享一波代理和反射！", "desc": "反射和代理是ECMAScript 6新增的语言特性，代理（Proxy）可以为开发者提供可拦截并且向基本操作嵌入额外的行为能力。 简单的说，在对一个代理对象访问属性、删除属性、添加属性等操作时进行拦截，并且加上自定义操作行为。反射（Reflect）是一个内置对象， 是给底层操作提…"}, {"id": "6992221929302130702", "title": "JavaScript 将两个升序数组合并为一个升序数组（经典面试题）", "desc": "本文讲解一道经典的面试题 ----“使用最简单的方式将给定的两个升序数组合并为一个升序数组“。通过文字加代码的方式，详细梳理了这道题目的解答思路。"}, {"id": "6990390606010777631", "title": "利用reduce方法将字符串“点”链接 转 JSON对象 \"a.b.c.d\"  => {a:{b:{c:d:{}}}} - 戴向天", "desc": "利用reduce方法将字符串“点”链接 转 JSON对象 \"a.b.c.d\" => {a:{b:{c:d:{}}}} - 戴向天"}, {"id": "6844903910423920653", "title": "【实践思考】自己开发一个掘金黑名单功能插件", "desc": "前几天掘金那篇什么挑战前端的文章很火，但是几十的赞几百的评论，说明这篇文章不是火在质量而是火在争议。客观的来讲里面那道题还是不错的，能帮助我们理解js的一些机制。作者评论里面多次提到前端版块文章质量的问题，我想说的是不止前端版块其他版块也一样，任何社区的都不可能保证所有的文章都…"}, {"id": "6844903520936656909", "title": "带你开发一个日历控件", "desc": "因为大多数日历控件都是用于选择日期的，有种需求是要在日历上展示各种各样的内容，这样的日历控件较少，而且试用下来并不满意。 因此就再造一个轮子，现在带你一起基于使用之前完成的组件机制来开发一个日历控件。 首先我们拿系统中自带的日历观察一下，看看日历的特征到底是怎么样的。 一个月中…"}, {"id": "6844903645742366727", "title": "前端面试&笔试&错题指南（二）", "desc": "嗯，小白的进击之路，继续来补充了... 1. 数组的神奇变化 数组不是简单数据类型(值类型),会保存在堆中(heap)中，当使用var arr1 = arr2赋值时，只是浅拷贝，拿到了arr2的引用，这样带来的问题就是，修改arr1的时候arr2也会收到影响。 搞清楚以上两点，…"}, {"id": "6973223049554296845", "title": "使用iframe调起scheme与app通信引发的内存泄漏", "desc": "回收插入DOM結構中iframe的正确姿势 错误姿势 运行在app中的h5使用scheme和app通信，h5通过新建一个iframe，在iframe中发起一个scheme，由app捕获并响应。 原因 "}, {"id": "6844903601626677261", "title": "我在日本最大的房地产信息网站做重构", "desc": "去日本之前就对日本互联网产业的各种奇葩现状有所耳闻，自己过来之后更是亲身经历了很多。总的说来有以下几个方面： 日本计算机理论研究其实做的非常不错，但是工业运用方面却做的一般，有点儿不思进取的感觉。不思进取到什么程度呢？比如说日本最大的门户网站Yahoo Japan，搜索引擎竟然…"}, {"id": "6969781777019699230", "title": "前端上传图片2", "desc": "前端实现上传图片，提交后端后转圈请求等待后端返回数据效果，前端压缩图片，后端接收后PHP上传图片到服务器。"}, {"id": "6844903905961181191", "title": "Babel 内部机制研究", "desc": "Babel 是一个 JavaScript 编译器。 Babel通过转换，让我们写新版本的语法，转换到低版本，这样就可以在只支持低版本语法的浏览器里运行了。 Babel真厉害，它居然‘认识’代码、更改代码。那Babel就是操作代码的代码，酷。 学习Babel对我们能力的提升有很大…"}, {"id": "6844904132143218696", "title": "精读《React Error Boundaries》", "desc": "Error Boundaries 是 React16 提出来用来捕获渲染时错误的概念，今天我们一起读一读 A Simple Guide to Error Boundaries in React 这篇文章，了解一下这个重要机制。 static getDerivedStateFro…"}, {"id": "6992160468974452772", "title": "Promise详解", "desc": "Promise基础概念 promise 的出现是为了解决异步编程带来的到回调地狱（嵌套的倒金字塔形）问题。 Promise构造函数 executor是一个双参函数，参数为resolve函数和rejec"}, {"id": "6993478505421864968", "title": "ES6 Class 之读写属性", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 1. ES5 中读写属性 ES5 中通过“this.属性”的方式读写一个属性。 2. ES6 中读写属性 ES6 中可以轻松地实现对属性的读"}, {"id": "6844903518319411207", "title": "[译] JavaScript 如何工作的: 事件循环和异步编程的崛起 + 5 个关于如何使用 async/await 编写更好的技巧", "desc": "欢迎来到旨在探索 JavaScript 以及它的核心元素的系列文章的第四篇。在认识、描述这些核心元素的过程中，我们也会分享一些当我们构建 SessionStack 的时候遵守的一些经验规则，一个 JavaScript 应用应该保持健壮和高性能来维持竞争力。 这次我们将展开第一篇…"}, {"id": "6987561008541728804", "title": "cornerstoneTool.js使用记录三", "desc": "Annotation 这是用来绘制一些辅助工具、测试、备注等。cornerstoneTools.addTool第二个参数是可有可无的，要配置初始化个性时可使用。"}, {"id": "6844903697743347719", "title": "让react用起来更得心应手——（react-router原理简析）", "desc": "前台路由:页面的显示由前台js控制，在url的路径中输入哈希值是不会往后台发送请求的，所以前台可以通过将哈希和页面进行映射从而控制渲染显示哪个页面。 但是这种方法有一个问题，如果再按一次回车键，它是会向后台发送请求的，如果后台路由没有相应的匹配，那么会报404的错误，一般需要后…"}, {"id": "6844903684850057230", "title": "[译]JavaScript响应式的最佳解释", "desc": "许多前端JavaScript框架（例如Angular，React和Vue）都有自己的Reactivity引擎。通过了解响应式及其工作原理，您可以提高开发技能并更有效地使用JavaScript框架。在视频和下面的文章中，我们构建了您在Vue源代码中看到的相同类型的Reactivi…"}, {"id": "6989995223988305934", "title": "IntersectionObserver接口详解", "desc": "1 概念 MDN 讲白了，就是观察一个元素是否在视窗(指定根元素)内可见 2 相关API 构造函数 以上代码会返回一个IntersectionObserver实例，callback是当元素的可见性变化"}, {"id": "6921540558036926471", "title": "js题目小测，你能得几分？", "desc": "2. 将数组中指定索引处的值替换为经函数变换的值 我的思路是：先写一个判断两个元素是否是异或词，是的话，push结果。"}, {"id": "6844903620014505998", "title": "RN与原生交互（一）——基本页面跳转", "desc": "React Native(以下简称RN)开发app过程中大部分都可以在JS端完成，但是也有一些功能是需要原生端来完成的。这时RN与原生端就不可避免的需要进行交互，比如页面跳转和数据传递。本篇文章主要以RN——原生、原生——RN——原生为例来讲解如何进行基本的页面跳转操作。 关于…"}, {"id": "6987538719465013284", "title": "JavaScript RegExp 对象 正则表达式", "desc": "@[toc] 正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，也可以将一个字符串中符合规则的内容提取出来。 创建正则表达式： 语法 匹配模式： 设置匹配模式时，可以都不"}, {"id": "6844903865913966600", "title": "React Hook 实践小结", "desc": "hello~亲爱的观众老爷们大家好~最近负责重构某个内部系统，既然是内部系统，那当然可以尽情搞事情，分析需求后决定采用 React 最新版本进行重构。既然是最新的版本，那当然是使用 Hooks 进行开发了。开发的过程并非一帆风顺，但也算是踩过不少坑也重新爬出来了，小结后有了这篇…"}, {"id": "6844903779679076360", "title": "九种排序算法的 JavaScript 实现", "desc": "一、代码汇总(一)bylaifeipengon2019.02.201、冒泡排序2、改进版冒泡排序3、选择排序4、直接插入排序5、二分插入排序2、代码汇总(二)bylaifeipengon2019.02"}, {"id": "6844903908339351560", "title": "如何实现一个颜色选择器", "desc": "在开发公司UI组件库的过程中，颜色组件ColorPicker由于时间关系没有去深入研究，看着花花绿绿的色谱图，以为实现起来会很复杂，就直接将一个开源的颜色选择器封装了一下。这大概是半年以前的事了，这篇文章也在我的博客中以草稿形式（只有标题没有内容，当时是做了一个记录，想着后来有…"}, {"id": "6918927493046992910", "title": "JavaScript This （ Context ） 之 完全拿下", "desc": "这是一个兜底的存在，在普通情况下this就是全局，浏览器里就是window；在use strict的情况下就是undefined。 如果用到this的那个函数是属于某个 context object 的，那么这个 context object 绑定到this。比如下面的例子： …"}, {"id": "6856968460254068749", "title": "js基础深入浅出之：栈和执行上下文", "desc": "程序运行的时候，需要内存空间存放数据。一般来说,系统会划分出两种不同的内存空间：一种叫做stack(栈)，另一种叫做heap(堆) heap是没有结构的，数据可以任意存放。因此，stack的寻址速度要快于heap 上面的 案例 a、b是放在stack， object对象c则存放…"}, {"id": "6844903809857093639", "title": "每日 30 秒 ⏱  优雅三连击", "desc": "昨天一个同学在 URL 大爆炸 问了我一个问题：这是什么写法 (data[key] = value, data)。平时在写文章的时候会把这些技巧稍微提示一下，认为大家都知道这些技巧，引起了小二的自我反省。 可能很多人都了解这些方法了,如果懂的同学就温故知新，不懂的同学咱们迎头追…"}, {"id": "6907051492989992968", "title": "弄懂 JavaScript闭包", "desc": "要理解闭包，首先要理解JavaScript函数的执行环境和变量的作用域。 执行环境(Execution Context，也称为\"执行上下文\")是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其它数据，决定了各自的行为。当JavaScript代码执行…"}, {"id": "6931271734494494734", "title": "H5懒加载和多媒体自动播放踩坑", "desc": "目前有一个新的 IntersectionObserver API，可以自动\"观察\"元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做\"交叉观察器\"。 初次接到一个需求：打开某个页面的时候，让一个…"}, {"id": "6844903781839142926", "title": "JavaScript 正则入门到掌握", "desc": "最近学习了 AST 抽象语法树，在代码解析的过程中广泛使用了正则表达式，由此认识到自己在正则基础方面的薄弱，虽然清楚每个符号所表示的含义，但是当一大串正则符号出现在自己面前时，还是会懵逼一会,无法融汇贯通的掌握正则。 下面是自己整理的正则基础知识和收集到的一些实战训练。希望通过…"}, {"id": "6844904094281236493", "title": "原型，继承——原生的原型", "desc": "\"prototype\" 属性在 JavaScript 自身的核心部分中被广泛地应用。所有的内置构造函数都用到了它。 首先，我们将看看原生原型的详细信息，然后学习如何使用它为内建对象添加新功能。 ……然而简短的表达式 obj = {} 和 obj = new Object() 是…"}, {"id": "6844904000790200333", "title": "抖音特效在 Web 端的实现", "desc": "当下最火的短视频应用莫过于抖音了，凭借着丰富的视频特效，抖音吸引了很多年轻用户的青睐，今天我们来看一下，抖音特效如何在 Web 端实现。 1、使用预渲染 canvas 绘制 video 的每一帧画面。 2、将预渲染 canvas 作为纹理传到显存中。 3、着色器程序对纹理进行后…"}, {"id": "6844903762918637576", "title": "从前端角度理解缓存", "desc": "缓存的概念分很多种，本次讨论的主要就是前端缓存中的Http缓存。 前端发送请求主要经历以下三个过程，请求->处理->响应。 如果有多次请求就需要重复执行这个过程。 从以上的流程图可以看书，如果用户重复请求同一资源的话，会对服务器资源造成浪费，服务器重复读取资源，发送给浏览器后浏…"}, {"id": "6970661466978385934", "title": "js模块化", "desc": "什么是模块？将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起；块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。"}, {"id": "6971411461767692325", "title": "给自己的异步任务加一个超时功能", "desc": "这几天我在开发一个混合开发的项目时，需要和原生进行通信。当我为了更好的使用方法，高高兴兴的将方法封装成Promise对象时，却出现了一个意想不到的问题。如何给自己的异步任务加一个超时功能？"}, {"id": "6844903519649005576", "title": "WebSocket探秘", "desc": "长连接：一个连接上可以连续发送多个数据包，在连接期间，如果没有数据包发送，需要双方发链路检查包。 TCP/IP：TCP/IP属于传输层，主要解决数据在网络中的传输问题，只管传输数据。但是那样对传输的数据没有一个规范的封装、解析等处理，使得传输的数据就很难识别，所以才有了应用层协…"}, {"id": "6918604733099802638", "title": "JavaScript/TypeScript 实现并发请求控制", "desc": "想一下，按最大并发数拆分 Promise 数组，如果有 Promise 被 fulfilled 的时候，就移除掉，然后把 pending 状态的 Promise ，加进来。Promise.race 可以帮我们满足这个需求"}, {"id": "6844903955252805645", "title": "5分钟带你领略：写一个二分查找为什么让面试者挂的这么惨？", "desc": "二分查找可以说是所有算法中最基础、最容易理解的算法之一了，但事实上也是挂科率最高的考题之一，在各个大厂的应届生面试中，这样的评价屡见不鲜: 谈项目的时候来聊的好好的，叫他写个二分搜索却写不出来。对此我不做评论，就二分查找而言，我觉得它并没有大家想象那样容易，用“思路很简单，细节…"}, {"id": "6983538042527023140", "title": "看完此篇对 event loop(事件循环)不再由困惑", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」大家都知道 javascript 是单线程，非阻塞的语言。单线程、非阻塞、异步这些都是 javascript 的标签"}, {"id": "6846687604042104845", "title": "「 Map最佳实践」什么时候适合使用 Map 而不是 Object", "desc": "这里可以明显看出其实其定义行为是十分相似的，想必看到这里大家还没看出来「Map」到底在何时使用才是最佳实践，别急接着来。 「Object」不同于「Map」，它不仅仅是表面所看到的。「Map」只包含你所定义的键值对，但是「Object」对象具有其原型中的一些内置属性 在上文提及的…"}, {"id": "7001539759109570567", "title": "Math的最常用的十一种使用方法", "desc": "Math Math对象: 是js内置的一个操作数据的对象，就是做数学运算的一个对象；每一种方法语法需注意的点在下方。"}, {"id": "6974592888420171790", "title": "Cesium | Primitive图元介绍及与Entity对比", "desc": "在之前的文章中，我们大部分使用的添加实体的方式都是entity添加，而在性能优化中我们提到了primitive添加的方式，entity在本文就不多做介绍了，本文主要介绍一下primitive相关知识。"}, {"id": "6921593483757092878", "title": "快速掌握JavaScript字符串方法", "desc": "js字符串常用方法也是面试中经常遇到到问题。 indexOf该方法是字符串里最常用的,一般使用在判断情况下。 查找字符串首次出现的位置,如果找到返回该字符串的下标值,下标从0开始查找,找不到返回-1。 lastIndexOf跟indexOf方法一样,只不过它查找字符串最后出现的…"}, {"id": "6844903968292749319", "title": "面试一定会问到的-js事件循环", "desc": "最近在看js事件循环，事件循环是js运行的核心，js 是单线程的， js 的异步事件就是依赖于事件循环机制，网上找了些资料，发现腾讯云这篇 js事件循环 写的很详细，下文基于这一篇文章，外加上自己的一些总结。 主线程：也就是 js 引擎执行的线程，这个线程只有一个，页面渲染、函…"}, {"id": "6999439949321732110", "title": "一文学会如何用js制作一个弹幕效果", "desc": "直接上干货，弹幕实现的原理是什么呢，我们前端怎么用我们web技术去实现呢？ 我们先新建一个html文件： 大家跟我一样用中文命名。中文命名是不合规范的，行走江湖，大佬们看见你的中文命名会笑话你的。 上"}, {"id": "6844903552402325511", "title": "Event Loop的规范和实现", "desc": "一直以来，我对Event Loop的认知界定都是可知可不知的分级，因此仅仅保留浅显的概念，从未真正学习过，直到看了这篇文章——《这一次，彻底弄懂 JavaScript 执行机制》。该文作者写的非常友好，从最小的例子展开，让我获益匪浅，但最后的示例牵扯出了chrome和Node下…"}, {"id": "6974947434778591262", "title": "从零开发一个前端脚手架", "desc": "本文将会从零出发，实现一个可以帮我们创建 vue 和 react 项目的简单脚手架，介绍脚手架开发的过程。"}, {"id": "6991828366466744350", "title": "还在为js计算精度缺失迷茫？简单粗暴教你一招！ ｜ 8月更文挑战", "desc": "大多数语言在处理浮点数的时候都会遇到精度问题，但是在JS里似乎特别严重，比如： **console.log(1.1-0.5);** **结果居然是0.6000000000000001**，加减乘除之类"}, {"id": "6997955173452611620", "title": "前端刷题路-Day85：打家劫舍 II（题号213）", "desc": "你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有..."}, {"id": "6844903621021138957", "title": "JavaScript深拷贝的一些坑", "desc": "可以从中看出，obj中的普通对象和数组都能拷贝，然而date对象成了字符串，函数直接就不见了，正则成了一个空对象。 JavaScript的深拷贝还不止上面所说的这些坑，还存在的问题有如何拷贝原型链上的属性？如何拷贝不可枚举属性? 如何拷贝Error对象等等的坑，在这里就不一一赘…"}, {"id": "6969544652055642126", "title": "【译】ES Modules 深度学习", "desc": "ES 模块将正式的标准化模块系统引入 JavaScript。但是，花了近10年的标准化工作时间才能到达这里。但是等待几乎结束了。随着 Firefox 60 的发布，所有主流浏览器都将支持 ES 模块，"}, {"id": "6993871660117917710", "title": "前端刷题路-Day74：颜色分类（题号75）", "desc": "给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列..."}, {"id": "6982759183179317279", "title": "快来和小姐姐一起复习js - 跨域", "desc": "浏览器作为请求方与被请求方的域名、协议、端口三者中有一个不同即被称作跨域。此文章为【js基础】系列文章之一，关注小姐姐，一起学一学！"}, {"id": "6844903623583891469", "title": "再谈 load 与 DOMContentLoaded", "desc": "window 的 onload 事件对于前端童鞋来说肯定是熟的不能再熟了，相信大家在刚入门时，见的最多的可能就是 load 事件了。load 事件接触多了，大家就会接触到它的闺蜜 DOMContentLoaded 事件，网上有很多介绍这两个事件的文章，对它们的解释无外乎以下两种…"}, {"id": "6844903510929063943", "title": "JS中图片压缩的一般方法", "desc": "其中，file参数传入一个File（Blob）类型文件；quality参数传入一个0-1的number类型，表示图片压缩质量；fn为回调方法，包含一个Blob类型文件的参数。 这样的话，图片压缩上传就能轻松地搞定了，以上的8个方法我已经封装好放到github上了，喜欢的话可以使…"}, {"id": "6992380641132150814", "title": "JavaScript学习（九） —— 函数式编程", "desc": "一、纯函数 要弄清楚函数式编程的具体实现和实际使用方法，需要先弄清楚纯函数的概念。我们一直说的函数式编程中的函数指的是数学中的函数，类似我们高中学过的关于自变量x的函数f(x)、g(x)还有复合函数f"}, {"id": "6927461444581588999", "title": "潮流前端周刊（第22期）- 冬天三亚", "desc": "封面图摄于冬天的三亚，很期待图中这样太阳光的冬天。 随着这些年微服务的流行，API 网关已经成为微服务架构中不可或缺的一环。一方面它承担着服务对外的唯一门户，一方面它提取了许多应用的共性功能。 系统地介绍了百分点科技媒体数据中台建设方法论及实践成果，可借此了解媒体行业是怎么互联…"}, {"id": "6991463231868895263", "title": "认识一下函数柯里化｜ 8月更文挑战", "desc": "什么是函数柯里化 函数柯里化，是把函数的多个参数拆分，变成接收小于原来参数个数（一般是一个）的函数。然后该函数返回还是函数，可以继续接受参数，直到没有参数传入或者传入的参数和定义的参数已经相等了，才执"}, {"id": "6971054744093605896", "title": "LeetCode3. 无重复字符的最长子串", "desc": "LeetCode3. 无重复字符的最长子串 题目描述 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。"}, {"id": "6961222811184529445", "title": "JavaScript void 运算符", "desc": "目录 void 是什么？ void 的作用 a. JavaScript URIs b. 立即调用的函数表达式 c. 在箭头函数中避免泄漏 3. void 优先级 4. void 的执行 5. 为什么要"}, {"id": "6981746376392572941", "title": "简单聊聊js 里的 this <this的指向>", "desc": "简单讨论在非严格模式下 js中的this指向问题，分别为 1.默认绑定规则； 2. 隐式绑定规则；3显示绑定规则；4new 绑定规则，箭头函数的this。"}, {"id": "6971335011106553870", "title": "js继承之组合继承", "desc": "这是我参与更文挑战的第8天，活动详情查看：更文挑战 构造函数继承 我们在上一篇原型链继承的文章中了解到了原型链继承的优缺点，那既然知道了优点我们就要发扬光大，缺点就要弥补，而要解决这个缺点就用到了我们"}, {"id": "6877701687880974349", "title": "比较JavaScript中的数据结构（数组与对象）", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 在编程中，如果你想继续深入，数据结构是我们必须要懂的一块， 学习/理解数据结构的动机可能会有所不同，一方面可能是为了面试，一方面可能单单是为了提高自己的技能或者是项目需要。无论动机是什么，如果不知道什么是数组结…"}, {"id": "6908650404800626701", "title": "震惊，难道只有我是这么管理api的？", "desc": "看了些管理api的文章，和自己大有不同，抛砖引玉，望各位口下留德，切勿不识好歹。（狗头） 本文代码顺序从调用开始，层层向里展示。 其实 1/2可以统一，但是由于项目不是纯ts的，就懒得重构了。文章后面的注释.d.ts文件就不再截图了 为了方便，数据校验异常时，抛出异常，axio…"}, {"id": "6844903939754737678", "title": "前端中的接口聚合", "desc": "一个支持参数合并的接口，在组件化或其他场景下调用了不同参数的相同的接口，这时把这些调用合并成一个或多个接口再请求。 避免发起相同的请求,某些情况下发起了相同的请求，经收集处理后，实际只发起一个请求。但是不同的发起端的callback 都能得到处理。 要知道接口的基本信息,包括但…"}, {"id": "6989102034397954062", "title": "「脚手架cli」技术揭秘", "desc": "我将之前搭建的一个掘金：vue3+ts企业级开发环境写成了一个脚手架，设想用这个脚手架快速搭建公司各个项目的开发环境，正在一点点集成。先来看下效果....."}, {"id": "6844903577643646990", "title": "精读《Immer.js》源码", "desc": "本周精读的仓库是 immer。 Immer 是最近火起来的一个项目，由 Mobx 作者 Mweststrate 研发。 了解 mobx 的同学可能会发现，Immer 就是更底层的 Mobx，它将 Mobx 特性发扬光大，得以结合到任何数据流框架，使用起来非常优雅。 Immer …"}, {"id": "6844903826894389261", "title": "一个人就需要对象之js中八种创建对象方式", "desc": "前言：说，点进来是不是喜欢我的笑容！！！大家好，我叫C乐，（恩，很直不gay）一名退役的大学生，喜欢摩旅。从上课的一次css接触后，便喜欢上了前端，以下是我的一些学习笔记，站在前辈们的肩膀上，分享一些我的理解，不足之处还请大家多多指教。性别男(哈哈哈哈哈哈，打不到我吧） js高…"}, {"id": "6844903657083797512", "title": "改造vue-cli，让它更好用", "desc": "vue-cli是一个整合了webpack+vue的脚手架，通过这个脚手架，我们可以很方便地创建一个vue项目，甚至引入了vuex和vue-router。webpack的配置对用户来说是透明，用户无需关注webpack的详细配置，从而提高开发效率。 那么vue-cli真的很好用吗…"}, {"id": "6916229848126111751", "title": "一文学废排序", "desc": "网易云音乐的歌单排序功能十分鸡肋，只能按照歌曲名、歌手名、专辑名排序。别说处理一些复杂的规则了，他连从 Z-A 这种简单的倒序逻辑都搞不定。这对像我这种红星单动不动就几千首曲子或是喜欢给曲子分类、制作歌单的朋友来说简直就是灾难。 于是，我写了一个专门用来给歌单中的歌曲排序的爬虫…"}, {"id": "6958038160362176525", "title": "Lodash 源码解读（二）", "desc": "近期比较提升一下自己的代码功底，想到自己的项目里用到 Lodash 的地方比较多，于是决定阅读一下 Lodash 的源码，看一看这种大型的开源工具函数库有哪些细节值得学习。"}, {"id": "6844903796582121485", "title": "如何理解并应用贝塞尔曲线", "desc": "贝塞尔曲线又叫贝兹曲线，在大学高数中一度让我非常头疼。前阵子练手写动画的时候，发现贝塞尔曲线可以应用于轨迹的绘制以及定义动画曲线。 本文就来探究一下，贝塞尔曲线到底是个什么样的存在。 其中n就代表了贝塞尔曲线是几阶曲线，该公式描述了曲线运动的路径。 以下我们来讨论一下，贝塞尔公…"}, {"id": "6985335377590485028", "title": "从零开始学习3D可视化之3D界面", "desc": "生活中我们经常会说到3D，比如3D游戏、3D电影等等。3D指三维，三个维度、三个坐标，即长、宽、高。换句话说，就是立体的，3D的空间的概念是由X、Y、Z三个轴组成的空间，是相对于只有长和宽的平面（2D"}, {"id": "6844903801145524231", "title": "如何写好前端业务代码？", "desc": "如何写出可维护和可读性高的代码，这一直是一个困扰很多人的问题。关于变量如何起名、如何优化if else之类的小技巧，这里就不做介绍了，推荐去看《代码大全2》，千书万书，都不如一本《代码大全2》。 工作以来，我一直在写一些重复且交互复杂的页面，也没有整理过自己的思路，这篇文章是我…"}, {"id": "6844903924541947912", "title": "你知道JS全局变量是如何工作的吗？", "desc": "在这篇博文中，我们将研究 JavaScript 的全局变量是如何工作的。如：scripts的范围，所谓的全局对象等等。 变量的词法作用域（简称：作用域）是可以访问它的程序的区域。JavaScript 的作用域是静态的（它们在运行时不会改变）并且它们可以嵌套 - 例如： if 语…"}, {"id": "6995782357185740814", "title": "\"this指向\"拓展", "desc": "昨天的时候想到，this可能指向一个构造函数内部作用域内，但是今天回顾了一下构造函数本体，构造函数本质也还是一个函数对象，所以根据this的特性，我认为this本质是构造函数内的一个内置变量，只不过没"}, {"id": "6932096531063537671", "title": "常用的前端 JavaScript 方法封装（上）", "desc": "1、输入一个值，返回其数据类型2、数组去重3、字符串去重4、深拷贝浅拷贝5、reverse底层原理和扩展6、圣杯模式的继承7、找出字符串中第一次只出现一次的字母8、找元素的第n级父元素9、返回元素的第"}, {"id": "6978744466387501092", "title": "深入认识CommonJs", "desc": "本文简单介绍了CommonJs在前端中的地位以及为什么跟浏览器之间的关系。在node环境中是如何实现这一规范的。他的原理是什么？"}, {"id": "6996185394828017701", "title": "Vue组件通信 eventBus", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 一、创建创建XMLHTTPRequest对象 二、连接和发送 open(method,url,async)：规定请求类型（POST或GET"}, {"id": "6996926386405376037", "title": "【从头学前端】14-详解JavaScript中的日期与时间（Date对象方法详解）", "desc": "本篇文章我们将来学习JavaScript中的Date对象 JavaScript中的Date对象主要用于处理时间，每一个Date实例表示某个时间段。JavaScript的Date对象使用UTC"}, {"id": "6844903704269684743", "title": "Next.js 踩坑入门系列（七） —— 其他相关知识", "desc": "获取数据，依然是Next与普通的React SPA应用不同的地方，React应用基本都有自己的路由组件（当然大部分是react-router），我们可以通过路由组件为我们提供的方法，比如react-router的onEnter()方法或者universal-router的bef…"}, {"id": "6844904178158927879", "title": "你不知道的JS系列——你所忽略的细节", "desc": "如果你看完觉得没用，欢迎打死兔兔。 1. parseInt() 、toString() 的可选参数 2. 1.toString() 报错，为何不输出 \"1\" ? 原因：当点跟在一个数字后面就意"}, {"id": "6857934319886893064", "title": "超详细的 Promise 理解与实现", "desc": "你微微地笑着，不同我说什么话。而我觉得，为了这个，我已等待得很久了 在混合阅读完 《你不知道的JavaScript》（中卷）第二部分前三章+阮一峰老师的《ECMAScript 6 入门》第16节Promise 对象后，对Promise的理解提升了一个层次。 在偶然间刷到 要就来…"}, {"id": "6955834424021745671", "title": "js和nodejs事件循环", "desc": "前言： 前端开发离不开JavaScript，Javascript是一种web前端语言，主要用于web开发中，由浏览器解析执行。而js的作用不仅仅局限于前端领域的开发，它同样可以用于服务端开发——nod"}, {"id": "6978504411022622751", "title": "手写ES6中的map", "desc": "手写能加深对map的理解，有时候懂了却不一定写得出，希望大家多多动手，没事别打那么多嘴炮！要做行动的巨人！ map可以传进一个回调函数，返回一个值。map运用 手写"}, {"id": "6995907816838037517", "title": "JavaScript 内置对象 Math 的常用方法", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 JavaScript 内置对象 Math 的常用方法 abs(x) 用途：求绝对值。 语法：Math.abs(x) 注意：Math.abs"}, {"id": "6844903602062884872", "title": "前端学习路线及面试经验", "desc": "本人从大二上学期到现在学习前端已将近有3年时间了，最近利用毕业论文写完的一些空余时间写一下这篇文章，用于分享一些个人的前端学习经验，以及一些面试经验，不一定适合每个人，不喜勿喷，同时欢迎大家提出建议。 总体的来说前端无非就是html、css、js只要把这三样的基础打好，什么都不…"}, {"id": "6974516819532972040", "title": "new()和create()的原理，区别和实现", "desc": "原型，构造函数 ，和实例的关系 开始探究new()和create()前 先整理下 原型，构造函数 ，和实例的关系 实例=new 构造函数() 实例.prototype 指向原型 构造函数的.proto"}, {"id": "6993635314933694495", "title": "【JS从入门到精通】14-DOM", "desc": "[TOC] DOM 1、DOM简介 DOM，全称Document Object Model 文档对象模型。 JS中通过DOM来对HTML文档进行操作。只要理解了DOM就可以随心所欲的操作WEB页面。 "}, {"id": "6844904071028228103", "title": "JS的防抖、节流函数", "desc": "防抖、节流函数一般应用在一些高频触发的方法，例如搜索框联想输入的input事件、onmousemove事件、click事件等等；实际上业务不需要多次触发，那么就需要用到防抖或者节流来处理啦。"}, {"id": "6854573216086949901", "title": "项目实战之本地存储篇~一文搞定前端本地存储", "desc": "在前端项目开发中，前端的本地存储是必不可少的，今天小编就前端的本地存储在项目中的使用详细的介绍一下。前端本地存储主要有： 接下来就这几种前端常用的存储方式进行介绍。 cookie就是存储在客户端的一小段文本，大小不能超过4kb，在请求接口的时候，cookie会被请求携带着，进而…"}, {"id": "6844904014358773773", "title": "[ES6 系列] 你真的了解ES6吗(一)", "desc": "ES6 将会是专栏接下来的一个系列，从最基础的概念或者有趣的问题开始逐渐深入，探究 ES6 常用的特性以及实际开发中遇到的问题。有些问题可能会比较奇葩，工作中根本不会写出这样的代码，但正是这些问题可以看出你的了解程度 在 ES6 的执行环境会报错.这是因为在 ES6 环境中，i…"}, {"id": "6981284977476370440", "title": "12 JS-Web-API-Ajax", "desc": "## ajax 的核心API - XMLHttpRequest - 手写一个简易的ajax - 跨域常用的实现方式 ## 什么是浏览器的同源策略"}, {"id": "6950980456548401182", "title": "HTTP 面试题", "desc": "> 先看以下常考面试题：http 常见的状态码有哪些？http 常见的header 有哪些？什么是Restful API ？描述以下 http 的缓存机制（重要）！题1：http 常见的状态码有哪些？"}, {"id": "6844903877561565198", "title": "JS引擎:它们是如何工作的?从调用堆栈到Promise，需要知道的所有内容", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 有没有想过浏览器如何读取和运行JS代码？ 这看起来很神奇，我们可以通过浏览器提供的控制台来了解背后的一些原理。 在Chrome中打开浏览器控制台，然后查看Sources这栏，在右侧可以到一个 Call Stac…"}, {"id": "6844903555334160398", "title": "vue.js无缝滚动", "desc": "See the GitHub 历史版本. 如果你想要js无缝滚动(无依赖)你可以切换到这里seamscroll。 vue-simple-spinner is open source and released under the MIT License. vue-seamless…"}, {"id": "6844904137293824013", "title": "前端 那些冷门的 API", "desc": "说是冷门，无非于我们而言，在实际项目中登场的机会少，或许有些api压根没听说过，本篇介绍几个 api 算是冷门中的那几烁极光，在我们穷尽一切办法时，它或许带来那丝曙光。 add ： 添加指定的类值。如果这些类已经存在于元素的属性中，那么它们将被忽略。 remove ： 删除指定…"}, {"id": "6969834442445553695", "title": "谈谈你对 JavaScript 作用域链的理解？", "desc": "JavaScript 在执⾏过程中会创建一个个的可执⾏上下⽂。 (每个函数执行都会创建这么一个可执行上下文) 每个可执⾏上下⽂的词法环境中包含了对外部词法环境的引⽤，可通过该引⽤来获取外部词法环境中的"}, {"id": "6972816744893120520", "title": "解决js使用offsetTop滚动到指定元素位置会有误差的问题.md", "desc": "/ offsetTop // 元素距离最近开启定位父元素顶部的距离，如无开启则是距离根元素（body）的顶部的距离 // offsetParent // 1）当某个页面元素及"}, {"id": "6996609885479632903", "title": "边学边译JS机制---31.跨浏览器测试", "desc": "即使在不同的浏览器上，也应该要让我们的应用按预期执行。这需要使用跨浏览器测试才行。 跨浏览器测试会让我们在不同的浏览器组合和不同的设备上检查应用是否按预期执行。 有时候，我们使用最新的技术构建应用，就"}, {"id": "6844903834246971400", "title": "【译】JavaScript中的Callbacks", "desc": "你是否遇到过\"callbacks\"一词，但是不知道这意味着什么？别着急。你不是一个人。许多JavaScript的新手发现回调也很难理解。 尽管callbacks可能令人疑惑，但是你仍然需要彻底了解它们，因为它们是JavaScript中的一个重要的概念。如果你不知道callbac…"}, {"id": "6856953029229281287", "title": "了解JS压缩图片，这一篇就够了", "desc": "公司的移动端业务需要在用户上传图片是由前端压缩图片大小，再上传到服务器，这样可以减少移动端上行流量，减少用户上传等待时长，优化用户体验。 插播一下，本文案例已整理成插件，已上传 npm ，可通过 npm install js-image-compressor -D 安装使用，可…"}, {"id": "6973109322339336200", "title": "数据结构之链表(一)", "desc": "这是我参与更文挑战的第13天，活动详情查看：更文挑战 什么是链表 链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用"}, {"id": "6949518756141875231", "title": "JS - 纯函数", "desc": "定义简单来说，一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用，我们就把这个函数叫做纯函数。这么说肯定比较抽象，我们把它掰开来看：函数的返回结果只依赖于它的参数。函数执行过程里面没有副"}, {"id": "6844903693142212621", "title": "websocket-heartbeat-js心跳检测库正式发布", "desc": "两年前写了一篇websocket心跳的博客——初探和实现websocket心跳重连。 阅读量一直比较大，加上最近考虑写一个自己的npm包，因此就完成了一个websocket心跳的检测库。在这里先感谢几个提供帮助的大佬朋友们，小弟受益匪浅。 websocket-heartbeat…"}, {"id": "6844903686649413645", "title": "【webpack进阶】可视化展示webpack内部插件与钩子关系📈", "desc": "webpack的成功之处，不仅在于强大的打包构建能力，也在于它灵活的插件机制。 也许你了解过webpack的插件与钩子机制；但你或许不知道，webpack内部拥有超过180个钩子，这些钩子与模块（内置插件）之间的「创建」「注册」「调用」关系非常复杂。因此，掌握webpack内部…"}, {"id": "6844903752332214280", "title": "玩转 JavaScript 之数据类型", "desc": "众所周知，JavaScript 是一门弱类型语言，不对变量进行类型强制，变量可以随时持有任何类型的值，所以在 JavaScript 中，类型对于我们开发人员来说可以理解为值的内部特征，类型定义了值的行为，以使其能够区别于其他值。 JavaScript 中共有七种内置数据类型，包…"}, {"id": "6919782682708836365", "title": "词法作用域之欺骗词法", "desc": "作用域共有两种主要的工作模型。 动态作用域，仍有一些编程语言在使用（比如Bash脚本、Perl中的一些模式等）。 词法作用域，是最为普遍的，被大多数编程语言所采用的词法作用域。词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决…"}, {"id": "6844903668320321544", "title": "JavaScript设计模式之面向对象编程", "desc": "简单来说，面向对象编程就是将你的需求抽象成一个对象，然后对这个对象进行分析，为其添加对应的特征（属性）与行为（方法），我们将这个对象称之为 类。 这样我们就将所需要属性和方法都封装在 Person 类里面了，当我们要用的时候，首先得需要使用 new 关键字来实例化（创建）新的对…"}, {"id": "6844903603497336845", "title": "收藏好这篇，别再只说“数据劫持”了", "desc": "要解答问题，首先要理解问题： 数据双向绑定 是一种模式，web语境下一般指数据从dom到JS对象之间的自动同步。DOM 与 JS 被隔离在两个不同的运行时上，互相之间需要通过命令式的 DOM接口 沟通：DOM 需要正确触发事件，将信息传输给JS程序；而JS也需要在状态变更后，有…"}, {"id": "6925224933026955277", "title": "一次发布 vscode 插件经历", "desc": "纳尼，这波很受伤，有没有🤕，于是我就冒出个想法，我想写本书，抱歉，走错片场了😝，其实到了这里，想必大家也已经猜到了，我想写一个类似于这种 json 格式化的网站，但是写网站要服务器，对于没有赚到第一桶金的前端er来说，不太现实，于是我就萌生了写个 vscode 插件的想法，…"}, {"id": "6969800612519084063", "title": "几分钟了解js的模块化、IIFE。", "desc": "几分钟了解模块化： 1. CommonJS 2. AMD 3. CMD 4. ES6 Modules、IIFE（立即执行函数）的几种写法。"}, {"id": "6987778754139389965", "title": "JavaScript中的闭包-终结篇", "desc": "闭包，一个似曾相识的家伙，总是在面试中被问到。今天，就让我们来好好的总结一下闭包吧。 一、什么是闭包 在JavaScript中，根据词法作用域的规则，内部函数总是可以访问其外部函数声明的变量，当通过调"}, {"id": "7001496955159314469", "title": "工作中出现的问题总结（css，js，vue）", "desc": "这是自己平时在项目中总结的问题及对应的解决思路，涉及到css,js,vue,希望自己持续更新，加油坚持！"}, {"id": "6844904013150814215", "title": "前端API层架构，也许你做得还不够", "desc": "上午好，今天为大家分享下个人对于前端API层架构的一点经验和看法。架构设计是一条永远走不完的路，没有最好，只有更好。这个道理适用于软件设计的各个场景，前端API层的设计也不例外，如果您觉得在调用接口时还存在诸多槽点，那就说明您的接口层架构还待优化。今天我以vue + axios…"}, {"id": "6998888561663541255", "title": "拆解实现 Promise 及其周边 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 Promise的出现使我们可以优雅地处理异步操作，脱离回调地狱的痛苦。 有一利必有一弊，它成为了面试必考问题之一 ，转化为另一种痛苦生活在我"}, {"id": "6844903704450039815", "title": "年终回顾，为你汇总一份「前端技术清单」", "desc": "记得年初的时候我给自己制定了一个学习计划，现在回顾来看完成度还不错。但仍有些遗憾，一些技术点没有时间去好好学习。 在学习中我发现，像文章这样的知识往往是碎片化的，而前端涉及到的面很多，如果不将这些知识有效梳理，则无法形成体系、相互串联。最后有一种东懂一块，西了解一点的感觉。因此…"}, {"id": "6932762257675780103", "title": "前端开发的你应该知道的浏览器知识", "desc": "我们开发经常会用到浏览器，但是浏览器的一些机制我们还不是很了解，代码如何在浏览器中运行？如何渲染布局？事件触发时浏览器在做什么？很多我们了解的浏览器知识可能不够完善，我们来深入的探讨一下。1.浏览器输"}, {"id": "6997639938158100516", "title": "9张图，10分钟，带你0基础入门JavaScript | 浏览器中的JavaScript", "desc": "编程本质上就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。计算机程序就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算"}, {"id": "6960868793140641799", "title": "【ES6系列】 90% 的前端都会使用 ES6 来简化代码，你都用过吗？", "desc": "最初 `JavaScript` 语言有 2 份标准：`ECMA-262`：主标准，由 ECMA 国际组织（`Ecma International`）负责管理；`ISO/IEC 16262`：第二标准，"}, {"id": "6906308099167289358", "title": "一个小小前端的 2020 年流水账", "desc": "2020 年对于个人而言是特殊的一年，经历了很多事，生活和工作都开始了新的旅程。 别问... 问就是没完成 😶 虽然这个 TODOList 没完成，但还是有很多有意义的事情值得流水账记录一下。 今年工作上最大的变化就是离开上一家公司，来到阿里。工作上也开始独立负责一些非常有挑…"}, {"id": "6844904166591070222", "title": "『1W7字中高级前端面试必知必会』终极版 ", "desc": "如果两个 URL 的 protocol 、 port (如果有指定的话)和 host 都相同的话，则这两个 URL 是同源。 JSONP的原理是：静态资源请求不受同源策略影响。实现如下： CORS：跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让…"}, {"id": "7003533113968033800", "title": "JS中的事件轮询", "desc": "let's think JS中的事件循环 一 是什么 JavaScript 在设计之初就是单线程的,程序运行时,只有一个线程存在,同一时间只能做一件事情. why? 为什么要这么设计"}, {"id": "6993980017227563021", "title": "微信 JS API 支付的实现", "desc": "本期带来 微信 JS API 支付 (即微信浏览器内支付或微信公众号支付) 的前端开发解析，从开通微信支付权限到涉及到的开发工作都在本篇文章中。"}, {"id": "6844904182835757064", "title": "2020年这些🍔\"正则\"应该被收藏(更新, 64条)", "desc": "如果你是不用vscode也没关系, 访问下方网址即可. 感谢大家的阅读, 欢迎入群交流学习."}, {"id": "6854573211422572557", "title": "让Vue项目更丝滑的几个小技巧", "desc": "在开发Vue的过程中，我们经常会遇到一些这样那样的问题，然后要卡好半天，等问题解决了才发现原来一些细节知识点还是没有掌握好。今天小编就整理了几个在项目中会用到的一些实战技巧点，希望可以帮助到正在努力赚钱的你。江湖规矩，先赞后看，艳遇不断。 前几天有朋友给我发了一段代码，然后说V…"}, {"id": "6992435294385471495", "title": "埋点？数据统计？关闭浏览器前发送请求？看完这一篇搞定", "desc": "故事是这样发生的，由于公司业务发展需要，产品需要对不同人访问做一个访问记录及访问时长，这个访问时长就很难了，从开始到结束"}, {"id": "6978689182809997320", "title": "异步编程的终极解决方案 async/await：用同步的方式去写异步代码", "desc": "本文介绍了异步编程的发展过程，通过详细解析 Generator 生成器和协程来帮助理解 async/await 内部的实现原理，希望能对你有所帮助。"}, {"id": "6992360799951912968", "title": "VUE3 教程：理工直男都是如何一步一步带妹构建插件？", "desc": "插件是为Vue应用添加可重用功能的好方法。有了大量用于组件、路由等的现有插件，Vue的生态系统为许多常见的用例提供了解决方案。"}, {"id": "6992376256163479559", "title": "“四说闭包” 惊艳面试官｜8月更文挑战", "desc": "从理论、底层的运行机制、实践等角度来回答闭包，不仅能看出你基础能力的深度，也能看出你基础能力的广度。"}, {"id": "6940442613312913415", "title": "前端搞工程化：揭秘自动化部署系统（一）", "desc": "发 npm 包对于稍微大点的厂来说都是个频繁需求，因此本地执行计算版本命令以及 npm publish 都是不大可行的，大都会有一个单独的部署系统去自动帮助我们完成这个事情。 今天就来聊聊这个部署系统中核心的计算版本以及发布的逻辑以及流程。 聊部署系统之前，我们先得来聊聊语义化…"}, {"id": "6974744482751184926", "title": "前端 JavaScript 之『防抖』的简单代码实现", "desc": "可以看到，在加入防抖代码之后，input 事件并不会每次输入都会输出在多行文本，而是会在用户停止输入 delay 时间之后触发输出，频率确实低了很多。"}, {"id": "6999783608852414472", "title": "按钮提交动画", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 背景 按钮 是我们 编程 中使用频率最多的几个 交互元素 之一，点击它会产生其描述的动作。"}, {"id": "6844903886898069511", "title": "嘿，不要给 async 函数写那么多 try/catch 了", "desc": "另外可以发现并不是一个 token 对应一个 Node，等号左右必须都有值才能组成一个声明语句，否则会作出警告，这就是 eslint 的基本原理。最后所有的 Node 组合在一起就形成了 AST 语法树 通过 @babel/traverse 我们能够轻松的找到 await 表达…"}, {"id": "6844903564813271054", "title": "一次记住js的6个正则方法", "desc": "我时常感到困惑，为什么有些知识我总是觉得模糊，其实就是想的少，总结的少，大多数人也如此，有疑惑不清楚就找出来，想明白或者想不明白都记录下来自己的收获，比扭头忘记还是要好很多吧。。好我觉得js中的正则我不是很清楚，那么来看一下吧。 首先6这个具象的数字可以帮助我们整体记忆了，66…"}, {"id": "6893778951350452232", "title": "jquery工具方法整理", "desc": "jquery工具方法总结安装详细请参考:npm学习npmyarn官网yarn安装完成后文件夹如下:（1）检测类型方法具体如下：2.判断是否是函数3.判断是否是window4.判断是否是纯粹的对象5.判"}, {"id": "6844903682354446344", "title": "用 React 开发小程序的探索之路 （演讲内容整理）| 掘金开发者大会", "desc": "大家好，我叫李伟涛，来自凹凸实验室。今天跟大家分享的主题是用 React 开发小程序的探索之路 。 在目前市面上已经有非常多的小程序开发框架，其中的佼佼者如 wepy 以及 mpvue ，他们都是非常优秀的小程序开发框架。但是它们都有一个共同的特点，都是通过类 vue 语法的小…"}, {"id": "6844904098672672782", "title": "如何优雅地取消 JavaScript 异步任务？", "desc": "在程序中处理异步任务通常比较麻烦，尤其是那些不支持取消异步任务的编程语言。所幸的是，JavaScript 提供了一种非常方便的机制来取消异步任务。 自从 ES2015 引入了 Promise ，开发者有了取消异步任务的需求，随后推出的一些 Web API 也开始支持异步方案，比…"}, {"id": "6916306332702392334", "title": "内容创作者不要再复制粘贴啦，一劳永逸自建个文章多发平台吧！", "desc": "大家好！这里是 HelloGitHub 推出的《讲解开源项目》系列，今天给大家带来的一款基于 Node.js 实现的一文多发平台开源项目——ArtiPub（文章发布者）。 众所周知文章每发到一个平台，就能增加一丝让更多人看到的机会。所以内容创作者们不仅需要编写高质量的文章，还要…"}, {"id": "6844904118373318664", "title": "物联网宠儿mqtt.js那些事儿", "desc": "mqtt.js是MQTT在nodejs端的实现。 通过npm package.json包管理，现代vue技术栈下的前端也可用，比如用vue-cli，create-react-app等等构建的项目。 mqtt.js官方为微信小程序和支付宝小程序也做了支持。微信小程序的MQTT协议…"}, {"id": "6844903698146181134", "title": "Google JavaScript 代码风格指南", "desc": "Google 和 Airbnb 是目前最流行的 JavaScript 代码风格，如果你长期使用 JavaScript 来写代码的话，建议对比看看。 这份指南规定用2个空格（而不是4个）来表示缩进。 尽管我无法理解为什么有人会反对加分号，就像“tab 和 空格”争论一样。无论怎么…"}, {"id": "6964286307694542861", "title": "原型和原型链、作用域和闭包、异步、this", "desc": "在面试的过程中，我发现我自己Javascript的基础知识掌握的还是比较薄弱的，所以在网上搜索了js较重要的几个方面：原型和原型链、闭包、异步、this"}, {"id": "6956590000838279205", "title": "五分钟——快速了解JS代码执行前的“预编译阶段”", "desc": "故作为解释型语言的JavaScript是不具有\"预编译\"阶段的，窃以为称之为\"预处理\"更加合适。但它究竟叫什么并不重要，重要的是为什么很多同学都认为JS存在\"预编译\"阶段，到底是JS的哪种行为导致不少"}, {"id": "6993191845543018533", "title": "【8.6】Set 和 Array 对比和适用场景", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 我们写 js 代码，在使用 Set 和 Array 时，可能一开始会分不清他们的使用场景，这篇文章是 Set 和 Array 从一些方面的对"}, {"id": "6844903600045424654", "title": "你真的了解回调？", "desc": "如果您想了解如何使用node，这是了解最重要的主题。几乎node中的所有内容都使用回调函数。它们不是由node发明的，它们只是JavaScript语言的一部分 回调函数是异步执行或稍后执行的函数。程序不是从顶部到底部读取代码，而是异步程序可以根据先前的功能（如http请求或文件…"}, {"id": "6844903621507678216", "title": "在你身边你左右 --函数式编程别烦恼", "desc": "曾经的你是不是总在工作和学习过程中听到函数式编程（FP）。但学到函子的时候总是一头雾水。本文是我在函数式编程学习过程中，总结的笔记，也分享给想学函数式编程的同学。 现在就让我们带着问题去学习吧。文章的最后，我们再次总结这些问题的答案。 面对对象（OOP）可以理解为是对数据的抽象…"}, {"id": "6994479085829226526", "title": "JS个人学习(6)——原型与原型链", "desc": "构造函数创建对象 在学习原型前，首先要知道什么是构造函数，什么是实例。 如下代码所示： Foo是一个构造函数（构造函数一般首字母大写，除了这个其他跟普通函数没什么区别），child1和child2就是"}, {"id": "6844903876433281037", "title": "现在，先忘了 \"函数防抖\" 和 \"函数节流\" 吧", "desc": "一开始接触这两个概念的时候，并不是十分明白这两个单词的语义，也不清楚到底这是干什么用的。相信很多人也跟我一样，如果没有的话，那就尴尬了。 暂时忘掉函数防抖。 这时候，就需要选择一个时机去调用接口而不是每次都调用，这个时机可以选择在用户停止输入的时候。 如果N秒内输入框的内容没有…"}, {"id": "6932310945088290830", "title": "这一次，彻底掌握JavaScript的深浅拷贝", "desc": "关于拷贝这个问题，也是前端面试中的一道经典面试题，我们在日常开发中也常碰到需要用到深拷贝或浅拷贝的场景。接下来我们通过这篇文章，彻底掌握JavaScript的深浅拷贝。 Object是引用类型，其他7种为基础类型。 引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这…"}, {"id": "7000667038712594462", "title": "js之事件绑定", "desc": "绑定事件的两种方式/DOM事件的级别 我们在之前的一篇文章《04-JavaScript/22-DOM简介和DOM操作》中已经讲过事件的概念。这里讲一下绑定（注册）事件的两种方式，我们以onclick事"}, {"id": "7000672337544609805", "title": "Js笔记(一)  变量 作用域及内存", "desc": "JavaScript变量、作用域与内存 1.原始值与引用值 ECMAScript变量可以包含两种不同类型的数据：原始值和引用值 原始值(primitive value):就是最简单的数据，即包括js中"}, {"id": "6958435514479443998", "title": "JS：JavaScript 知识小结", "desc": "三个重要知识 JS公式 对象.__proto__ === 其构造函数.prototype 根公理 Object.prototype是所有对象的（直接或间接）原型 函数公理 所有函数都是由Functio"}, {"id": "6854573211317698568", "title": "移动端300ms延迟以及点击穿透", "desc": "300ms 延迟的由来,是当初07年初苹果发布首款iPhone之前,苹果工程师提出的一个为了优化交互体验的操作.因为当时的网站基本都是为PC等大屏幕设备而写的,而现在需要用小屏幕浏览桌面端网站.当用户用手指把页面放大以后,就有了一个双击缩放(double tap to zoom…"}, {"id": "6973115684435787789", "title": "【前端开发技巧】Javascript对一维数组进行分组和函数封装", "desc": "前言：今天遇到一个需求，就是对某个标签数组进行分组，这是个常规需求，对于老司机来说，这不是基操吗？ 来个数组吧！ 起名字太难了。。 分个组吧！ 对于常规的分组需求，我们都能在数组对象中找到规律，这个应"}, {"id": "6844903779146416142", "title": "JavaScript ES2019 中的 8 个新特性", "desc": "JavaScript 不断改进和添加更多功能。TC39 已经完成并批准了 ES2019 的这 8 个功能，它有 4 个阶段，这些阶段是： 此提议的动机是 JSON 字符串可以包含未转义的 U + 2028 LINE SEPARATOR 和 U + 2029 PARAGRAPH …"}, {"id": "6875832414258757640", "title": "关于 JavaScript 中 null 的一切", "desc": "对象是一个复杂的数据结构。最简单的 JavaScript 对象是普通对象 —— 键和相关值的集合 但是很多情况下不能创建一个对象。在这种情况下，JavaScript 提供了一个特殊的值 null —— 表示缺少对象 但是，函数中不传任何参数时，该函数返回 null。返回 nul…"}, {"id": "6844903633000087560", "title": "编写一个简单的JavaScript模板引擎", "desc": "若需要用于商业用途，请经本人同意。 尊重每一位认真写文章的前端大佬，文末给出了本人思路的参考文章。 能够访问到这篇文章的同学，初衷是想知道如何编写JavaScript的模板引擎。为了照顾一些没有使用过模板引擎的同学，先来稍微介绍一下什么叫模板引擎。 上面代码中，我使用了ES6的…"}, {"id": "6844903793864212494", "title": "div+contenteditable 实现富文本发布框的小结", "desc": "“你想做的一定有人做了，你一定不是第一个遇到这个问题的人”——这句话对80%（二八分布）的人是有效的，我也从中获益不少。 在Chrome中使用button标签来高亮被@的用户，在Firefox中使用img标签来高亮被@的用户（绝妙）这里不同标签的使用很讲究，考虑了浏览器兼容性。…"}, {"id": "6961784683319263263", "title": "JS 翻译｜深入 JavaScript 数组的演变和性能", "desc": "前言 此文翻译自 Diving deep into JavaScript array - evolution & performance 名词解释 定型数组：ArrayBuff 参照 《JavaScr"}, {"id": "6844903586871115789", "title": "前端防止用户重复提交-js", "desc": "前端在向后端进行数据提交的时候，通常会需要在第一次提交返回前，阻止用户在快速点击发送二次请求，即防止重复提交，最简单的方法是使用标志参数或者 class 元素控制，但缺点是，每个控制重复提交的地方都需要加上这个逻辑，重复性太强，且控制逻辑不统一。 当表单初次提交时，通过 jQu…"}, {"id": "6844904139051237390", "title": "异步解决方案看他就够了（promise、async）（1.1万字）", "desc": "刚接触js的时候，对于es6的promise、async、await简直怕的要死，甚至有段时间非常害怕promise这个词，随着后面慢慢的接触，觉得这个东西并非那么难理解，主要还是需要弄懂js的一些基础知识。那么接下来，跟上我的思路，一起彻底弄懂promise、async、aw…"}, {"id": "6973847012706156574", "title": "构建 Typescript 知识体系(十一)-理解命名空间及声明合并", "desc": "这是我参与更文挑战的第十七天，活动详情查看:更文挑战 在 JavaScript 中，命名空间能够有效地避免全局污染，只不过在 ES6 引入了模块系统后，命名空间就很少被提及了。但 TS 同样实现了此特"}, {"id": "6999989041164713997", "title": "客户端转前端之JS入门 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天 对象 在JavaScript中，一切皆是对象，所有数据都可以存储在对象里。不管声明的是什么数据类型，都拥有属性和方法。 创建对象 创建对象有2种方法。 使用new Ob"}, {"id": "6994095787806294046", "title": "v8执行js代码的过程", "desc": "一、编译型语言和解释型语言 编译型语言的编译过程： 对于代码进行词法分析、语法分析，生成AST树，然后进行代码优化，再生成处理器能处理的机器码。如果编译成功，则生成一个二进制文件，否则报错。 解释型语"}, {"id": "6995096421577949197", "title": "前端模块化理解", "desc": "前端模块化 模块化的开发方式可以提高代码复用率，方便进行代码的管理。通常一个文件就是一个模块，有自己的作用域，只向外暴露特定的变量和函数。目前流行的js模块化规范有CommonJS,AMD,CMD,E"}, {"id": "6844904136001994766", "title": "案例｜原生手写一个轮播图——渐隐渐显版", "desc": "今天我们自己手写一个渐隐渐显版的轮播图，先上效果图👇由于文件太大，只能压缩成这样给大家看了😓既然不能传大文件，那大家就委屈一下先听听小芝麻描述一下具体的需求吧😄一、需求就如上面效果图一样；如图：此时小"}, {"id": "6844903566553923591", "title": "React Router 使用总结", "desc": "使用 React 开发单网页应用时，React Router 必不可少。刚开始接触 React Router 时，跟着文档一步步做，虽然有些概念不太理解，但最终还算是完成了项目。后来阅读了 你不知道的 React Router 4 这篇文章，意识到先前在项目中的某些用法中的用法…"}, {"id": "6844904038245367821", "title": "Object.prototype.hasOwnProperty的性能问题", "desc": "今天下午在阅读Vue3，Component相关源码时，发现了这么一段注释。（源码地址：packages/runtime-core/src/componentProxy.ts） 在渲染期间，对渲染上下文进行访问时，hasOwn()操作很昂贵。而在普通对象上进行属性访问的操作，速度…"}, {"id": "6844903576100143117", "title": "从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！", "desc": "最近恰好被问到这方面的问题，尝试整理后发现，这道题的覆盖面可以非常广，很适合作为一道承载知识体系的题目。关于这道题目的吐槽暂且不提（这是一道被提到无数次的题，得到不少人的赞同，也被很多人反感），本文的目的是如何借助这道题梳理自己的前端知识体系！"}, {"id": "6844904126011146254", "title": "🍃【何不三连】JS面向对象最后一弹-多态篇(羽化升仙)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 首先抱歉让大家久等了，大家一直期待的\"多态\"篇到现在才来 😊，其实我最近挺忙的，给张手机截图让大家感受一下。 算了，说了你们也不信。 因为平常开发中感觉多态听到的不多，所以就会让我们产生一个误解：多态并不重要。但其…"}, {"id": "6987774200794578952", "title": "说说JavaScript的原型和继承", "desc": "在ES6后，JavaScript已经可以通过class、extends等语法糖实现面向对象的写法，但是以前的原型对象也是必须得了解的，看文章的话记不清楚，自己总结一下。"}, {"id": "6844903635747340296", "title": "彻彻底底教会你使用Redux-saga(包含样例代码)", "desc": "最近将项目中redux的中间件，从redux-thunk替换成了redux-saga，做个笔记总结一下redux-saga的使用心得，阅读本文需要了解什么是redux，redux中间件的用处是什么？如果弄懂上述两个概念，就可以继续阅读本文。 redux是遵循函数式编程的规则，上…"}, {"id": "6912273825099399181", "title": "由浅及深实现虚拟DOM和DOM-Diff", "desc": "随着前端框架比如Vue和React的不断发展，虚拟DOM和DOM-Diff也随着这些框架被越来越多的人重视。在学习和面试的过程中，越来越成为我们无法回避的知识点。面试时经常会被问到：了解虚拟DOM吗？知道Vue和React的虚拟DOM是什么样的吗？知道他们的DOM-Diff是如…"}, {"id": "6844903728374546445", "title": "webpack4之splitchunksPlugin拆拆拆--项目实践", "desc": "其他的非公共代码。 all: 不管文件是动态还是非动态载入，统一将文件分离。当页面首次载入会引入所有的包 async： 将异步加载的文件分离，首次一般不引入，到需要异步引入的组件才会引入。 initial：将异步和非异步的文件分离，如果一个文件被异步引入也被非异步引入，那它会被…"}, {"id": "6850037275632336909", "title": "15个简单的JS编码标准让你的代码更整洁", "desc": "下面的编码标准是我对上述几点有帮助的看法。 1. 比较时使用 === 代替 == 这很重要，因为JavaScript是一种动态语言，因此使用==可能会给您带来意想不到的结果，因为它允许类型不同。 2. 永远不要使用 var，使用 let 来代替 使用 let 将有助于避免 Ja…"}, {"id": "6919994771503054862", "title": "18个编写 JavaScript 好习惯！", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 在我多年的编程生涯中，我会优先考虑编写代码的方式，不仅是为了让代码更简洁，还因为它有助于提高编码效率，使编写代码的速度更快。 写1000行代码和写300行代码是不…"}, {"id": "6992420066340028453", "title": "🚀详解JavaScript系列之数组(四)", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 子集拼接与拆分 concat() 简介：连接两个或多个数组，返回结果为新的数组。不会改变原数组。 concat()方法的作用是数组合并"}, {"id": "6991039931787247629", "title": "被遗忘的 JavaScript 关键字 “with”", "desc": "在本文中，我会介绍 “with”关键字。它是 JavaScript 语言中的一个阴暗的角落，即便是那些资深开发者很少能注意到。"}, {"id": "6844903728818946062", "title": "打造属于你自己的instagram! 全栈项目(react + egg.js)", "desc": "注：此项目纯属个人瞎搞，与instagram无任何关系。 因前后端不同端口原因，为解决跨域。前端\b工程启动了devServer，需先启动后端工程"}, {"id": "6844903636749778958", "title": "你真的理解setState吗？", "desc": "这两天自己简单的看了下 setState 的部分实现代码，在这边给到大家一个自己个人的见解，可能文字或图片较多，没耐心的同学可以直接跳过看总结(源码版本是16.4.1)。 、performWorkOnRoot、performSyncWork、performAsyncWork这四…"}, {"id": "6902201958489292813", "title": "适合 JS 新手学习的开源项目——在 GitHub 学编程", "desc": "Java 篇中老荀说到当今互联网份额最大的编程语言是 Java，作为后辈我对此话是没有异议的。但，要说到国内互联网最火、最热闹的编程语言是什么？应该没人对 JavaScript 当选有异议吧。相对 C++、Java 这些老前辈，JS 可谓门槛之低，连 Python 都自叹不如。…"}, {"id": "6952665769209495566", "title": "【工程化】深入浅出 CSS Modules", "desc": "CSS Modules 是什么？官方文档的介绍如下：所有的类名和动画名称默认都有各自的作用域的 CSS 文件。CSS Modules 并不是 CSS 官方的标准，也不是浏览器的特性，而是使用一些构建工"}, {"id": "6844903567480848391", "title": "JavaScript复制内容到剪贴板", "desc": "最近一个活动页面中有一个小需求，用户点击或者长按就可以复制内容到剪贴板，记录一下实现过程和遇到的坑。 分别来看看这两种方法是如何使用的。 这是clipboard的官网：https://clipboardjs.com/，看起来就是这么的简单。 注意到，在 <button> 标签中…"}, {"id": "6998446118199623710", "title": "海绵宝宝邀您品鉴-JS设计模式(结构型)", "desc": "Structural Design Patterns 结构型设计模式 关于结构型设计模式 结构型设计模式主要关注的是 对象组合，也就是实例之"}, {"id": "6998078801062150158", "title": "[JS]07.变量提升处理机制", "desc": "1. 变量提升概念 在当前上下文中（全局/私有/块级），JS代码自上而下执行之前，浏览器会提前处理一些事情（可以理解为词法解析的一个环节，词法解析一定发生在代码执行之前） 2. 词法解析： 词法解析会"}, {"id": "6940574353926914084", "title": "性能优化 让你的页面更丝滑", "desc": "url从输入到页面的渲染中间的技术细节，这篇我们总结下，常用的性能优化操作。构建阶段的性能优化可以参考这篇webpack包教不包会（二）性能优化最佳实践。 合并css和js文件，合并文件大小之后，大文件gizp之后不能超过33kb（不是一股脑的打包成一个），文件数量要适量。 是…"}, {"id": "6998849977644482568", "title": "面试官：写一写双向数据绑定叭。", "desc": "老生常谈的双向数据绑定，再Vue2和Vue3中实现原理分别是Object.defineProperty和Proxy。 一个是Object原型上的方法，一个是类Proxy。下面就来看看叭。 Object"}, {"id": "7000925144545755166", "title": "webpack掠影-3", "desc": "前面我们已经讨论过如何让 webpack 处理 CSS，并提取出文件，以及图片的处理。接着我们讨论一下在 webpack 中配置 babel、压缩js/css 文件"}, {"id": "6844904015549988878", "title": "项目常用JS方法封装(一) [ 大杂烩 ]", "desc": "持续更新中...封装方法传送门：项目常用JS方法封装(二) [ 时间处理 ]项目常用JS方法封装(三) [ 字符串相关处理 ]项目常用JS方法封装(四) [ 数组相关处理 ]使用方法非常简单，只需放到"}, {"id": "6994056530744049678", "title": "H5嵌套到小程序、APP，还能埋点统计？看完这篇便知晓", "desc": "正常浏览器监听埋点，统计我们都解决了；现在解决的是嵌套H5在一个宿主环境中不销毁，如何才能监听，如何才能实现我想要的业务逻辑？看完这篇便知晓"}, {"id": "6945991002851115021", "title": "「前端进阶」JavaScript手写方法/使用技巧自查", "desc": "本篇文章会不定时更新一些技巧和方法，并同步到 GitHub 仓库。Promise、发布订阅、local封装、柯里化、数组降维、深拷贝..."}, {"id": "7001674345424633870", "title": "【技术学习】SVG-边学边做", "desc": "日常开发趋于稳定，为了避免出现安逸心理，以及对突破的追求，我开始自己寻找一些技术挑战。于是，对SVG的学习提上了日程。"}, {"id": "6844904180298039309", "title": "一个神秘URL酿大祸，差点让我背锅！", "desc": "我叫小风，是Windows帝国一个普通的上班族。上一回说到因为一个跨域请求，我差点丢了饭碗，好在有惊无险，我的职场历险记还在继续。 “叮叮叮叮~~~~”，闹钟又把我给吵醒了，我一看时间竟然已经这么晚了。 我赶紧起身，准备要去上班，好不容易在那家浏览器公司谋了个差事，可不敢迟到。…"}, {"id": "7005036770236579870", "title": "输入检查组件", "desc": "输入内容实时检查是我们开发中常见的需求。 基于element ui Input组件来实现输入内容实时检查功能。"}, {"id": "7003161998087176200", "title": "用JS简单实现Vue的双向绑定", "desc": "Vue实现数据双向绑定原理： 采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的setter，getter，在数据变动时发布消"}, {"id": "7001122210265956383", "title": "『面试的底气』—— 设计模式之享元模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903986479251464", "title": "(建议精读)原生JS灵魂之问(中)，检验自己是否真的熟悉JavaScript？", "desc": "笔者最近在对原生JS的知识做系统梳理，因为我觉得JS作为前端工程师的根本技术，学再多遍都不为过。打算来做一个系列，一共分三次发，以一系列的问题为驱动，当然也会有追问和扩展，内容系统且完整，对初中级选手会有很好的提升，高级选手也会得到复习和巩固。这是本系列的第二篇。 扫了一眼目录…"}, {"id": "6844903976081555470", "title": "JS 原生面经从初级到高级【近1.5W字】", "desc": "调整文章格式 调整文章格式 调整文章格式 调整文章格式 调整文章格式 调整文章格式 调整文章格式 调整文章格式"}, {"id": "6998532082179768357", "title": "缓存函数的简单使用", "desc": "缓存是一种重要的程序优化手段，一般采用以空间换时间的措施来提高程序性能，缓存函数也是其中的一种………"}, {"id": "6999607454468145189", "title": "潮流前端周刊（第45期）- 耶稣爱你", "desc": "封面图拍为周天去了一趟余杭凤凰山公园，山下有一个教堂门口的一块「耶稣爱你」的石头，虽然我不信教，不过挺好看，山上超级适合开着小电驴兜风。 前端技术 如何用研发效能搞垮一个团队 https://www."}, {"id": "7002231749094670373", "title": "vscode 的 markdown 预览是怎么实现的", "desc": "vscode 的 markdown 预览是我们整天都在用的功能，有没有想过它是怎么实现的。或许有一天你会接到个定制 markdown 预览的需求，应该怎么做呢？ 有什么思路么？思考五秒钟。 5 4 3"}, {"id": "7006160153657475108", "title": "LeetCode第20天🐱‍🏍", "desc": "1894. 找到需要补充粉笔的学生编号 42. 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。"}, {"id": "6991844682066034718", "title": "理解JS的内存与变量存储", "desc": "在前端领域，因为大部分在跟UI打交道，内存管理是最容易被忽略的部分。但如果不懂内存，就看不清很多问题的本质，也难以写出更合格的代码，本次带大家走进内存的世界。"}, {"id": "6958990366888607757", "title": "CSS新特性contain，控制页面的重绘与重排", "desc": "在介绍新的 CSS 属性 contain 之前，读者首先需要了解什么是页面的重绘与重排。 之前已经描述过很多次了，还不太了解的可以先看看这个提高 CSS 动画性能的正确姿势。 OK，下面进入本文正题，"}, {"id": "7005881196001361927", "title": "使用IntersectionObserver实现元素观察", "desc": "背景 写这一篇文章的目的主要也是自己学习记录，以前对这个api还是比较陌生的，最近项目上做性能优化的时候，考虑到了这个监听api，参考各种资料文章，写了这一篇文章，希望对自己或者对大家参考有所帮助。 "}, {"id": "6956046759428636708", "title": "17K star 仓库，关于网络相关的前端面试题 90% 都有答案", "desc": "今天的文章从输入 URL 开始，和大家聊聊这其中前端工程师**需要掌握的网络相关的内容**，希望大家能有所收获。"}, {"id": "7003644271785934885", "title": "日常笔记-几个 JavaScript 单行代码技巧", "desc": "1、获取字符串中的字符数 获取字符数是一个有用的实用程序，在许多情况下都很有用。你可以使用它来获取空格数和随后的单词数，或者这可用于获取字符串中某个分隔符的计数。 这个想法非常简单。我们使用传递的参数"}, {"id": "6994464022628139045", "title": "盘点前端开发中最常见的几种设计模式", "desc": "设计模式介绍 设计模式是开发的过程中，遇到一些问题时的解决方案，这些方案是通过大量试验与踩坑总结出来的最佳实践，主要指的是一些代码思想与方法论。本文主要总结前端开发中时常遇到的一些设计模式。"}, {"id": "7005110255717744647", "title": "前端常见面试题总结（Javascript部分（一））", "desc": "JavaScript 1.介绍一下js的数据类型有哪些，值是如何存储的 javaScript一共有8种数据类型，其中有7种基本数据类型：Undefined、Null、Boolean、Number、St"}, {"id": "6892003555818143752", "title": "手把手带你入门前端工程化——超详细教程", "desc": "部分小节提供了非常详细的实战教程，让大家动手实践。 另外我还写了一个前端工程化 demo 放在 github 上。这个 demo 包含了 js、css、git 验证，其中 js、css 验证需要安装 VSCode，具体教程在下文中会有提及。 对于前端来说，技术选型挺简单的。就是…"}, {"id": "6992458377238413320", "title": "【SSD系列】都说柯里化，反柯里化 , 不会不知道吧", "desc": "柯里化和偏函数都是函数式编程里面重要的概念，我们今天来来点不一样的 反柯里化。多一种思路，就多一种手段。"}, {"id": "7001454317450297380", "title": "从浅拷贝与深拷贝发现 JSON.stringify 的 “魅力”  | 8月更文挑战", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 基本类型 基本数据类型有7种：Number、String、Boolean、Null、Undefined、Symbol（ES6）、BigIn"}, {"id": "6844904077537574919", "title": "【建议星星】要就来45道Promise面试题一次爽到底(1.1w字用心整理)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 时隔一周不见，霖呆呆我终于更新文章了，小声嘀咕说想我了... 呸... 咳咳，其实我一直在隐忍准备来一发大的好不。 这不，这一章节就是整理了45道Promise的笔试题让大家爽一爽 😁。 另外查了很多关于Promi…"}, {"id": "7006134523285110791", "title": "JS面试题之创建对象7种方式，原型链，call/apply/bind（一）", "desc": "今天开始，我将不定期的分享一些面试题，答题不是目的，目的帮助我们一起巩固JS的基础知识，让我们平时写代码的时候多一些选择。今天主要是3道题，是JS中比较基础的，也是面试常问的。 今日题目： 在JS里有"}, {"id": "6997218406176915470", "title": "深入理解Typescript系列-装饰器", "desc": "这是我参与 8 月更文挑战的第 17 天，活动详情查看： 8月更文挑战 前言 本章内容我们主要来聊聊TS中的装饰器，装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装"}, {"id": "6985352568838815774", "title": "这一次彻底搞懂JS中的防抖和节流（面试必问）", "desc": "什么是防抖？ 防抖的实现思路 在防抖函数返回的函数的上级作用域设置一个定时器变量t置为null; 通过t来判断是否是第一次执行。 如果不是第一次执行，清空定时器 如果是第一次执行，则通过apply(t"}, {"id": "7005117682542444581", "title": "JS｜变量提升到块级作用域", "desc": "变量提升是ES6之前的缺陷，为了修复这个问题在ES6中加入了块级作用域以及let、const关键字 那么首先为什么会产生变量提升这个缺陷呢，是因为在ES6之前，JS的作用域只有全局作用域和函数作用域："}, {"id": "6991827408152330253", "title": "ES6 reduce 减少你的面条式代码【初中级前端必会】｜ 8月更文挑战", "desc": "最近和同事 A 聊天聊到`es6`一些基础知识，在问到`reduce`时，同事给我的回答是：‘不就是用来求和的吗’ ？？？ ‘你确定 ？？？’"}, {"id": "7002467031924604941", "title": "富文本编辑器前端相关知识", "desc": "“这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战” 富文本知识记录 富文本 contenteditable=\"true\" document.execCommand 既然我们可以对上面的 "}, {"id": "6917811484898623495", "title": "几个面试常见手写代码", "desc": "call、apply 函数的实现其实都借助了点调用。利用第一个参数做个中转，调用完之后删除。 刚开始接触这俩概念的时候傻傻分不清楚。 浏览器的一些事件，如：resize，scroll，keydown，keyup，keypress，mousemove等。这些事件触发频率太过频繁，…"}, {"id": "6957475955858210823", "title": "Sentry原理--收集错误、上报", "desc": "我们平常收集错误，大部分人、公司都采用的Sentry来收集，当然也有好多公司也有自研的前端监控。趁着最近我们组刚好要接入Sentry，并且要根据自己的调研来做一次分享。所以就总结出了下面的内容。"}, {"id": "7004808476471853064", "title": "《JavaScript高级程序设计（第3版）》读书笔记3", "desc": "第四章 变量、作用域和内存问题 一、基本类型和引用类型的值 基本类型：按值访问，可以操作保存在变量中的实际的值,在内存中占据固定大小的空间，因此被保存在栈内存中。（Undefined、Null、Boo"}, {"id": "7000756662613049380", "title": "LeetCode第5天🐱‍🏍", "desc": "881. 救生艇 题目限制每条船只能载两个人，所以可以贪心。对people进行排序，将最瘦的和最胖的组合，与limit进行比较"}, {"id": "6964169397095104519", "title": "徒手撸一个资源加载器", "desc": "最近学习H5游戏编程，Phaser里面的资源加载非常的简单。于是想到自己徒手撸一个资源加载器。可缓存，带版本，够轻量级。"}, {"id": "7000746375096827912", "title": "谈谈JavaScript中的数组", "desc": "大家好哇，今天我们来谈谈JavaScript中的数组，大神请绕道，因为本文基本摘自我刚入行时的笔记哦~"}, {"id": "6989541212105981966", "title": "完成人生的第一次代码贡献 - 新手村任务", "desc": "- 如何给开源团队提贡献 - 如何使用TDD进行测试 - 如何成为合格的代码贡献者 - 什么是测试驱动开发"}, {"id": "6983847493985370142", "title": "用 JavaScript 刷 LeetCode 的正确姿势【进阶】", "desc": "最近总结了些数据结构和算法，希望能对各为 JSer 刷题提供帮助。 此篇文章主要想给大家一些开箱即用的 JavaScipt 版本的代码模板。"}, {"id": "6961664628526940174", "title": "当面试官问自定义Hook的时候他想知道什么", "desc": "前言 在听到这么一个问题的时候，首先脑海中总体思路是这样子的： 认识自定义Hook的基本概念 能够使用自定义Hook进行复用逻辑的封装 了解自定义Hook的最佳实践与工作原理 进一步深入Hook底层原"}, {"id": "6994241626696581127", "title": "ECharts动态获取后台传过来的json数据进行多个折线图的显示js", "desc": "ECharts动态获取后台传过来的json数据进行多个折线图的显示，折线的数据由后台传过来 ECharts 多个折线图动态获取json数据，文章原生js处理方式"}, {"id": "6995406354965856293", "title": "快乐模拟掘金抽奖项目", "desc": "这是我参与8月更文挑战的第5天，活动详情查看： 8月更文挑战 前言 日常看看掘金首页的热门文章，今日份文章很多，还是被它吸引。 云的世界：# 掘金的抽奖 在线抽奖预览地址 原因很简单，自从掘金上线签到"}, {"id": "6845166890516480013", "title": "CSS Viewport 单位，很多人还不知道使用它来快速布局！", "desc": "**CSS Viewport units(视口单位)**在过去几年已经出现了，随着时间的推移，越来越多的开发人员开始使用它们。它们的好处在于为我们提供了一种不需要使用J avaScript 就能以动态的方式调整大小的方法。而且，如果它失效，也有很多备用方案。 在本文中，我们将学…"}, {"id": "6992464844075057188", "title": "第三届「缤纷·前端技术沙龙」来了", "desc": "第三届「缤纷·前端技术沙龙」，如约而至。 本次沙龙由滨江前端联盟发起、网易主办、严选前端团队主导、滨江前端联盟成员协办。"}, {"id": "6997679275113447461", "title": "一步让你区分理解call,apply,bind", "desc": "作用： call,apply,bind 都是改变this指向的 语法： 1.call： 1.1 call第一个参数，就是要变成的this的对象 1.2严格模式，非严格模式下的this指向 在非严格模式"}, {"id": "6994281912877449223", "title": "JavaScrip入门指南之“ES6箭头函数、面向对象、模块”（笔记八）", "desc": "一、箭头函数 ES6 允许使用 “箭头”（=>）简化函数的定义。 例子： 注意：如果return的是单一个对象，则需要加上大括号和return，例如： 二、箭头函数中的this 箭头函数没有自己的作用"}, {"id": "7001718927755575333", "title": "浏览器工作原理 - 从url到页面展示浏览器都做了哪些不为人知的事(内附流程图)", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 浏览器 相信做web开发的对浏览器并不陌生。简单来说浏览器就是一个由地址栏、菜单栏、选项卡、页面窗口、和状态栏组成的应用程序，但这仅仅是我"}, {"id": "6999551776697368584", "title": "前端刷题路-Day89：找到所有数组中消失的数字（题号448） ", "desc": "给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的..."}, {"id": "6996804771222913055", "title": "前端：vue3+ts，后端：koa2+jwt，实现登陆功能（后端部分上篇）", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 前置，搭建项目并集成log4j实现日志系统 详细的介绍了koa2的环境搭建以及log4j的日志系统 # koa2搭配log4js实现日志监"}, {"id": "6994230685686824991", "title": "js实现图片拖拽，定点缩放，旋转 （二）", "desc": "这篇我们继续来完成图片的定点缩放功能，同样兼容性目前只考虑谷歌，其他类型和版本的自行拓展 1、定点缩放 html部分 css部分 js部分 好了这样一个简单的图片定点缩放的功能就实现了 2、旋转..."}, {"id": "7000954291385008159", "title": "手撕祖传原型链图（下）", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 前文讲了四个理解原型链图重要的概念，也是理解我今天手撕原型链图的理论基石，如果读者还不了解，欢迎点击链接原型链四个重要概念回顾 为了方便读"}, {"id": "6989434198868099103", "title": "Android / iOS Webview 容器下 JSBridge SDK 原理浅析 —— 前端视角", "desc": "前言 在 Hybrid 开发的过程中，由于前端和客户端同学存在认知差异，导致在解决一些 bridge 问题时存在一定的沟通成本和信息不对称。本文从前端视角切入，讲述 bridge 方法如何和客户端进行"}, {"id": "6927460378519535629", "title": "即将回家过年，一个“批量下载”需求，差点翻了车!｜牛气冲天新年征文", "desc": "需求是这样的：点击一个下载按钮，批量下载多份zip资料，举个🌰，点击按钮，后端返回一个下载地址 Url 的数组，然后，需要前端一次性触发下载。 因为下载地址和当前系统不是同域！！这是浏览器的安全机制。 而且这个下载，页面还有抖动，这方案算是废了。 然后我就想到了iframe,…"}, {"id": "7001807066645938206", "title": "【前端知识体系】从输入URL到页面加载的过程？｜8月更文挑战", "desc": "目录 梳理主干流程 从浏览器接收url到开启网络请求线程 【多进程的浏览器与单线程的JS引擎】 开启网络线程到发出一个完整的http请求 【在一个进程中开多个线程】 后台的处理 后台和前台的http交"}, {"id": "6982791786984898568", "title": "技术周报 · 2021-07-09", "desc": "小编推荐 字节跳动的现代 Web 开发实践 字节跳动基于 Serverless 的前端研发模式升级 基于 WebAssembly 的 AIoT 应用框架实践 JavaScript & CSS 手把手教"}, {"id": "6981831831112908831", "title": "一名中/高级前端工程师的自检清单-React 篇", "desc": "你真的了解 React 吗？我们在面试中往往涉及 React 时，第一个问题就是“解释 React 是什么”。解释一种技术是什么，在面试中也是非常常见的引起 话题的题目。本篇文章我就带你掌握这一类概念"}, {"id": "7001303297298530334", "title": "JavaScript底层实现数组的一些方法", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战” 数组方法有 push、pop、slice、map 和 reduce push的实现 从上面的代码可以看出，关键点就在于给数组本身循环添加"}, {"id": "7002408739005267976", "title": "leetcode题解-20分钟学会二分查找", "desc": "今天介绍下二分查找这个算法套路，学会此招，你的内力会精进三分，与路边程序员能立马拉开差距！来看看吧。"}, {"id": "6998171985129766926", "title": "和朋友们聊聊JS的闭包以及V8对闭包的优化", "desc": "JS中的闭包 在聊JS中的闭包之前，需要先和朋友们铺垫几个概念， 1.执行上下文 2.执行上下文堆栈 3.词法环境 （这里我们默认大家都已经熟悉了这三个基础知识点，但是后续也会补充一些要点，确保不熟悉"}, {"id": "7000955157546532894", "title": "JS ｜ 神奇的parsetInt( 🤔, 🤨 )", "desc": "故事的开始从一个色盘的HSV进制转换开始 当我在控制台输入 👇👇👇👇👇👇 麻了 我麻了 parseInt 以下为 W3C 上的定义 parseInt() 函数可解析一个字符串，并返回一个整数。 当参数"}, {"id": "6854818576470933512", "title": "Webpack 原理浅析", "desc": "Webpack 迭代到4.x版本后，其源码已经十分庞大，对各种开发场景进行了高度抽象，阅读成本也愈发昂贵。但是为了了解其内部的工作原理，让我们尝试从一个最简单的 webpack 配置入手，从工具设计者的角度开发一款低配版的 Webpack。 假设某一天，我们接到了需求，需要开发…"}, {"id": "6993594386059624484", "title": "深入了解WeakMap", "desc": "WeakMap是ES6引入的一个新的数据结构，和Map一样，它也是用来存储键值的映射。 利用WeakMap的键是弱引用和不可枚举的特性，我们能更好地优化程序的内存使用，以及实现一些hack功能."}, {"id": "7002590321720688654", "title": "Vue-nextTick原理解析", "desc": "Vue的官方文档中这么说的：“在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。”，为什么会出现这么一个API？主要原因是因为Vue在更新DOM采用"}, {"id": "7005818890009706509", "title": "Array数组遍历小结", "desc": "Array数组遍历 Array.prototype.map()(IE9+) map() 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。 当你不打算使用返回的新数组却使用"}, {"id": "6844904018834096142", "title": "盘点ES7、ES8、ES9、ES10新特性", "desc": "从 ECMAScript 2016（ES7）开始，版本发布变得更加频繁，每年发布一个新版本，好在每次版本的更新内容并不多，本文会细说这些新特性，尽可能和旧知识相关联，帮你迅速上手这些特性。想阅读更多优质文章请猛戳GitHub博客 在 ES6 中我们有 String.protot…"}, {"id": "6964219091187957774", "title": "🔥「深入本质」彻底理解深度克隆问题", "desc": "欢迎大家来到\"深入本质\"系列，Blue在这个系列中将带领大家一起挖掘代码背后的本质，一窥潜藏在代码背后作者的思想与意图，体会本质之下的精巧构思与设计之美 深克隆（deep clone）或叫深拷贝（de"}, {"id": "6984571634459869221", "title": "一天面试6家大厂-offer拿来吧你 | 2021 年中总结 ", "desc": "前言 大家好 我是鲨鱼哥~ 说起 2021 的上半年 鲨鱼哥经历的最大的一件事就是离职 没错还是裸辞 每次有朋友问我关于离职的建议的时候 我都拼命劝大家不要裸辞 压力大风险高巴拉巴拉一大堆"}, {"id": "7001529656188862494", "title": "Console 3000字完整指南，让你不只会用console.log !", "desc": "为啥会突然想起写一篇关于console的文章？笔者接触JS也不少时间了，其实大部分时间都在使用console.log()方法来输出一些或者调试程序，但是log的能力是有限的，并不能满足所有的场景。"}, {"id": "7007340600118738958", "title": "《JavaScript高级程序设计（第3版）》读书笔记5", "desc": "第5 章 引用类型（接上篇） 一、Date 1、创建 new 操作符和 Date 构造函数 2、方法 Date.parse()：接收一个表示日期的字符串参数，返回相应日期的毫秒数； Date.UTC("}, {"id": "7007242224773644319", "title": "JavaScript ES(6-11)全版本语法 (六)：Class", "desc": "上一篇编写的是ES6中的Object，链接：https://juejin.cn/post/7004645715519488008 ，这次写的是ES6中Class的基本语法和继承。"}, {"id": "6997186627781001229", "title": "Vue第二波ref语法提案来袭 这次会进入到标准吗？", "desc": "前言 其实之前Vue3做过好多次语法糖的提案，最经典的莫过于<script setup>提案。但一开始这个提案夹杂着ref语法糖，所以很多批评的声音接踵而来：什么Vue又开始创造新概念啦、不忠于Jav"}, {"id": "7007320758313549837", "title": "H5小程序关于IphoneX系列样式适配问题", "desc": "最近在开发H5小程序业务，在进行样式设计阶段时突然发现了一个问题， 先复原场景： 正常的页面布局是这样的，当我写完之后我也觉得没有问题，然后我突然想到切机型看一下页面其他布局是否存在问题，然后就发现了"}, {"id": "6994224541312483336", "title": "「万字进阶」深入浅出 Commonjs 和 Es Module", "desc": "一 前言 今天我们来深度分析一下 Commonjs 和 Es Module，希望通过本文的学习，能够让大家彻底明白 Commonjs 和 Es Module 原理，能够一次性搞定面试中遇到的大部分有关"}, {"id": "7005735167335596063", "title": "雅虎35条军规，你知道几条？", "desc": "在工作中，前端的性能优化是非常重要的，那我们该从何入手？可以遵循雅虎前端优化35条军规，虽然这些“军规”中一些的原则有些过时，但是仍然能为我们的前端优化指明方向。"}, {"id": "6989413354628448264", "title": "文件下载，搞懂这9种场景就够了", "desc": "本文阿宝哥详细介绍了文件下载的 9 种场景，希望阅读完本文后，你对 9 种场景背后使用的技术有一定的了解。"}, {"id": "7000525748578549774", "title": "贝塞尔曲线在前端，走近她，然后爱上她", "desc": "前端贝塞尔曲线在前端的应用可不少，svg，canvas/webgl，css3动画，animation Web API等等，来，一起走近她，然后爱上她。"}, {"id": "7007393969994891301", "title": "ES7 到 ES12 常用新语法", "desc": "众所周知，ECMAScript 的迭代是很快的，想必作为前端开发人员对近几年 ES6 的新语法已经十分熟悉了，但是 ES7 到 ES12 中一些新增的 ECMAScript 提案，可能还是没有广泛地被"}, {"id": "6992754161221632030", "title": "多图详解，一次性搞懂Webpack Loader", "desc": "本文通过精美的图文，深入分析 Webpack Loader 的运行机制，带你吃透 Webpack loader 的 11 个核心问题。"}, {"id": "6997784981816737800", "title": "有同学问我：Fetch 和 Ajax 有什么区别？", "desc": "就我个人而言，倒是蛮期待 Fetch 能够取代传统 Ajax，技术的发展需要不断注入活力才行，我还能再干几十年，可不希望前端技术裹足不前，那样该多无聊 ！"}, {"id": "7007588265423273991", "title": "「每日一题」通过删除字母匹配到字典里最长单词", "desc": "1. 题目描述 给你一个字符串 s 和一个字符串数组 dictionary 作为字典，找出并返回字典中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。 如果答案不止一个，返回长度最长且字典序"}, {"id": "7007041300654456846", "title": "潮流前端周刊（第47期）- 彩云", "desc": "封面图摄于上周晚上出去吃饭，天空彩色云彩挺漂亮。 前端技术 关于鉴权，看懂这篇就够了 https://mp.weixin.qq.com/s/-Yf6a58H7WDB1luOORhDJw 将登录的一些事"}, {"id": "6994594642280857630", "title": "看了就会，手写Promise原理，最通俗易懂的版本！！！", "desc": "前言 大家好，我是林三心，相信大家在日常开发中都用过Promise，我一直有个梦想，就是以最通俗的话，讲最复杂的知识，所以我把通俗易懂放在了首位，今天就带大家手写实现以下Promise吧，相信大家一看"}, {"id": "7007390651947941895", "title": "关于js的进制转换，看这一篇就够了。", "desc": "Javascript没有类似于Java、Python那么完善的进制转换api，所能用的仅有两个api。 但用这两个api也足以完成36以内进制的转换了。 Number.prototype.toStri"}, {"id": "7007616994878947364", "title": "湖中剑 前端周刊 #8 | 2021-09-13", "desc": "周刊收集包括前端（但不限于前端）的文章、新闻、开源项目、工具等等，每周一更新。 📰 News Firefox 92 for developers 开发者需要注意的Firefox 92版本升级事项，Fi"}, {"id": "7003522601523871775", "title": "尤大大说我的代码全部不加分号 | 重学JS", "desc": "尤大大说：我的Vue代码全部不带分号，其实加不加分号也只是编码风格问题，不必引起一场口水战。 [音乐博客源码]上线啦"}, {"id": "6984908770149138446", "title": "【收藏就会】浏览器WebStorage缓存使用指南", "desc": "较为全面的WebStorage使用方法指南，封装工具类的同时也手把手带你入门本地存储技术的使用方法，同时对开发中可能碰到的问题也做了一个梳理。"}, {"id": "7002565964189401095", "title": "JavaScript 中的一些核心特性", "desc": "掘力计划｜创作者训练营第三期正在进行, 「写」出个人影响力. 1. JavaScript 的核心特性 简介"}, {"id": "7004408579063021598", "title": "JavaScript中的原型与继承", "desc": "继承是面向对象中讨论最多的话题。JavaScript中，因为函数没有签名，无法实现接口继承，因而实现继承就成了ECMAScript中唯一支持的实现方式，而这主要是通过原型链实现的。"}, {"id": "6991430748506947591", "title": "React 基础 - JSX ｜ 8月更文挑战", "desc": "jsx是什么以及如何理解jsx？ jsx转js对象的babel转换器 官方： jsx是JavaScrip 的一种扩展语法。我们推荐在 React 中使用这种语法来描述 UI 信息。JSX 可能会让你想"}, {"id": "6992395901620879368", "title": "打造组件库之table组件", "desc": "组件需求 传一个columns配置文件，即可生成对应的table 传一个data即可渲染对应的数据 可通过插槽的方式对数据进行二次处理 组件prop设计 参数 类型 是否必须 示例 columns A"}, {"id": "6917143120048029704", "title": "前端的你真的了解请求方式和数据格式吗", "desc": "我在公司请求方式一般都用的get和post，数据格式对应的application/x-www-form-urlencoded和application/json，等一下，我说的这两种数据格式你不会不知道"}, {"id": "6844903520596918280", "title": "编写自己的代码库（javascript常用实例的实现与封装）", "desc": "大家在开发的时候应该知道，有很多常见的实例操作。比如数组去重，关键词高亮，打乱数组等。这些操作，代码一般不会很多，实现的逻辑也不会很难，下面的代码，我解释就不解释太多了，打上注释，相信大家就会懂了。但是，用的地方会比较，如果项目有哪个地方需要用，如果重复写的话，就是代码沉余，开…"}, {"id": "6989148728649072653", "title": "【js基础知识03】老生常谈的JavaScript闭包", "desc": "也许你并不知道闭包是什么，但是你的代码中到处都有闭包的影子！也许你觉得闭包平时用不到，但是每次面试你都得去准备这个方面内容！也许你不觉得这个功能有什么用，但是很多框架的功能都是基于闭包去实现的！"}, {"id": "7004809444915675144", "title": "用javascript画一个Atom官网的SVG图标", "desc": "纯javascript实现 Atom官网SVG版图标，支持高度自定义样式。还缺loading动画吗？来来来，福音。"}, {"id": "6964573125358911525", "title": "【译】Josh 大神亲自带你一起感受前端音乐的魅力", "desc": "我相信音效可以强调用户的行为，增强给用户的反馈、给枯燥的用户行为增添一些快乐。当声音被高雅地使用后，产品会更加地真实、更加地栩栩如生..."}, {"id": "6930386249605709832", "title": "JavaScript 的 7 种设计模式｜牛气冲天新年征文", "desc": "当启动一个新的项目时候，我们不应该马上开始编程。而是首先应该定义项目的目的和范围，然后列出其功能或规格。如果你已经开始编程或者正在从事一个复杂的项目，则应该选择一个最适合你项目的设计模式。 在软件工程中，设计模式是针对软件设计中常见问题的可重用解决方案。设计模式也是经验丰富的开…"}, {"id": "7005182012310945805", "title": "JS性能优化", "desc": "JS性能优化 ​ 任何可以提高运行效率降低运行运行开销的行为（网络、数据传输方式、框架） 垃圾回收机制"}, {"id": "6999643071566577678", "title": "从V8源码角度来手撕JS数组方法底层实现（一）：Push", "desc": "数组可以说是我们写JS的老朋友了，也是所有编程语言中最最最基本的数据结构，JS中常用的数组方法有push、pop、slice、map 和 reduce，今天我们就根据ECMA标准来手撕Push实现。"}, {"id": "6991653255847772167", "title": "手写实现typeof和instanceof，并了解原理", "desc": "手写实现typeof和instanceof，并了解原理 最近在和实习生讲这两的原理，并让他们手写实现，他们中间遇到了些困难，此处顺便整理一下 目录： 手写实现typeof typeof原理解析 Obj"}, {"id": "6985713569992015885", "title": "LeetCode刷题，最近请求次数（933）", "desc": "返回最近请求时间在3000毫秒以内的次数。思路：直接使用队列，每次新请求入队，对比队列头请求时间如果超过3000，则队列头出队，依次判断，最后返回队列长度即可。"}, {"id": "7003256005077254174", "title": "JavaScript 模块化的发展，你究竟懂多少？", "desc": "模块化对于现在的开发人员来说并不陌生，可以说是相当熟悉了。但是如果问 JavaScript 中的模块发展过程，相信有挺多人都是不太了解的。接下来我们就来回顾一下 JavaScript 的发展历程。 1"}, {"id": "6996296323817275422", "title": "🔥关于对象的遍历，你掌握了多少？不同场景用什么方法？", "desc": "前言 对象的遍历 （1）for…in（推荐） for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。 （2）Object.keys/values(obj)（推荐） Object"}, {"id": "6995152148518404110", "title": "ES-Module快速入门", "desc": "ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。"}, {"id": "6969953586940182565", "title": "每年半小时学习 ES 新特性", "desc": "ECMAScript 是语言规范，JavaScript 是该规范的一种实现。我们通常认为 JavaScript 等价于 ECMAScript，但完整的 JavaScript 实现实际包含了三部分..."}, {"id": "6992104922426654727", "title": "记一次PC页面录屏+转码+导出MP4", "desc": "使用recordRTC和ffmpeg.asm对页面指定元素进行录屏，并转为通用MP4格式，最后导出视频"}, {"id": "6844903601010114567", "title": "如何在疲劳的JS世界中持续学习", "desc": "本文翻译自《Stay updated in JS fatigue universe》，并对内容有所补充和修改。 我的许多同事都想知道我是如何设法保持最新的状态，并且仍能完成我的日常工作。在这篇文章中，我将分享我的日常生活，并告诉你如何找到有用的信息。 我的许多资源来自twitt…"}, {"id": "6977696567885037605", "title": "Vue源码学习 | 从源码中学习Javascript技巧", "desc": "阅读代码是提高编码水平的好方法，优秀的源代码就像一部文学巨作，开拓思维，提供启示。最近在阅读vue2的源代码，学到了很多JS的编码技巧，后续陆续分享出来供参考，顺便总结一下代码阅读成果。"}, {"id": "6844904069958467592", "title": "前端下载文件的5种方法的对比(附加获取文件名", "desc": "在前端站点上下载文件，这是一个极其普遍的需求，很早前就已经有各种解决方法了，为什么还写这么老的文章，只是最近在带一个新人，他似乎很多都一知半解，也遇到了我们必经问题之“不能下载txt、png等文件”的典型问题，我就给他总结下下载的几个方式。顺便分享出来，也许，真有人需要。 这是…"}, {"id": "6970706892632883213", "title": "【手写简易浏览器】html parser 篇", "desc": "这是我参与更文挑战的第6天，活动详情查看： 更文挑战。 上篇文章介绍了整体的思路，这篇开始写 html parser。 思路分析 实现 html parser 主要分为词法分析和语法分析两步。 词法分"}, {"id": "7000792427732828191", "title": "面试官：写一个instanceof叭", "desc": "需要注意的点，不推荐使用__proto__获取隐式原型，使用getPrototypeOf()更好。 代码 测试 记录记录！"}, {"id": "6948820078561329182", "title": "深入理解JS执行机制", "desc": "JavaScript是一门单线程的非阻塞脚本语言，同一时刻只允许一个代码段执行。在单线程的机制下，执行异步任务时，在等待结果返回的这个时间段，后面的代码就无法执行了。 本篇文章将详细讲解上述问题，欢迎各位感兴趣的开发者阅读本文。 讲事件循环之前，我们先来理解下为什么JS不设计成…"}, {"id": "7005000863089426468", "title": "实现react库的核心API", "desc": "我们用react来编写组件的时候，都是以jsx的形式写编写视图层，除此之外，还可以通过createElement这个方法来编写组件，createElement是react库核心的API之一。 crea"}, {"id": "7003015719923220488", "title": "前端小废物系列（0）——用 Screeps 来学习 JS", "desc": "什么是 Screeps，我自己还没玩明白，边玩边翻译边总结。我本职不是前端，对 JS 也不熟，正好边玩边学。这个主题算是一个长期计划，这第一篇也留出一部分当日后的目录。"}, {"id": "6844903795420299278", "title": "2019 面试准备 - JS 防抖与节流", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 在本文中，…"}, {"id": "6921532337029283854", "title": "在vue用throttle居然这么黑盒？", "desc": "首先我们都知道，throttle(节流) 和 debounce(防抖) 是性能优化的利器。 本文会简单介绍一下这两个的概念，但是并不会对这两个函数再进行老生常谈地说原理了，而是会说它和 vue 之间的爱恨情仇~，但是在步入正题以前，我们得先知道它的一些简介。 函数节流(thro…"}, {"id": "6986841640476344328", "title": "javascript精进之路手写系列第三弹我写不出来篇（15个）（附详解）", "desc": "1. 循环打印红黄绿 下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？ 三个亮灯函数： 这道题"}, {"id": "6844904205367377933", "title": "jQuery 写小程序？Taro 3 正式版发布：开放式跨端跨框架解决方案", "desc": "从 Taro 第一个版本发布到现在，Taro 已经接受了来自于开源社区两年多的考验。今天我们很高兴地在党的生日发布 Taro 3（Taro Next）正式版，希望 Taro 未来的更多两年能像一名共产主义战士一样经受住更多的考验。以下是 Taro 3 的一些新增特性： 在旧版本…"}, {"id": "7005188009465380901", "title": "【babylonjs】babylonjs实践（十一）--画线", "desc": "背景 工作太忙，影响学习了。 接着开始学习babylon，前面绘制基本元素以及基本的相机等知识。 API CreateLines 说说CreateLines的配置项 option value defa"}, {"id": "7007327313742266399", "title": "create-react-app eject之后 修改antd主题样式", "desc": "项目架构 create-react-app + antd 修改antd主题样式 方式一 在没有npm run eject暴露webpack的配置的情况下,我们可以通过官方文档上的在 create-re"}, {"id": "6857037330113363982", "title": "1.1w字 ｜ 初中级前端 JavaScript 自测清单 - 2", "desc": "本系列文章是我在我们团队内部的“现代 JavaScript 突击队”，第一期学习内容为《现代 JavaScript 教程》系列的第二部分输出内容，希望这份自测清单，能够帮助大家巩固知识，温故知新。 JavaScript 有八种数据额类型，有七种原始类型，它们值只包含一种类型（字…"}, {"id": "6844904198639714311", "title": "你不知道的 Web Workers （上）[7.8K 字 | 多图预警]", "desc": "Web Workers API：Worker 构造函数及如何观察 Dedicated Worker 等。 下面我们开始步入正题，为了让大家能够更好地理解和掌握 Web Workers，在正式介绍 Web Workers 之前，我们先来介绍一些与 Web Workers 相关的基…"}, {"id": "6989861117187063822", "title": "防抖和节流知多少", "desc": "防抖 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新再等n秒在执行回调。 例子 看一下运行结果： 可以看到，我们只要按下键盘，就会触发这次ajax请求。不仅从资源上来说是很浪费的行为，而"}, {"id": "6844904098941108232", "title": "💦【何不三连】做完这48道题彻底弄懂JS继承(1.7w字含辛整理-返璞归真)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 怎么样？小伙伴们，上一章《封装篇(牛刀小试)》里的十几道题是不是做着不过瘾啊。 可以，小伙子(姑娘)，很膨胀，我喜欢。哈哈哈哈。 这篇文章的继承题可是有点东西的啊，基本覆盖了所有主流的继承情况，而且都比较细节，如果你…"}, {"id": "6992453687012491300", "title": "前端JS导出excel表格", "desc": "前端导出excel 之前写过一个js导出excel的代码，一直用着好好的，最近突然报错了，研究了半天发现在表格列数超过26列的时候就会出现这个问题，也是就excel的列是A-Z，然后跟着是AA,AB,"}, {"id": "7005891000195350558", "title": "强缓存、协商缓存及相关头部信息", "desc": "常见Head头，强缓存与协商缓存的原理、机制，与强缓存、协商缓存相关的头信息，刷新对强缓存、协商缓存的影响"}, {"id": "6844903926823649293", "title": "Array.from() 五个超好用的用途", "desc": "因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 任何一种编程语言都具有超出基本用法的功能，它得益于成功的设计和试图去解决广泛问题。 JavaScript 中有一个这样的函数: Array.from：允许在 JavaScript 集合(如: 数组、类…"}, {"id": "6844904192549584910", "title": "你不知道的前端异常处理（万字长文，建议收藏）", "desc": "除了调试，处理异常或许是程序员编程时间占比最高的了。我们天天和各种异常打交道，就好像我们天天和 Bug 打交道一样。因此正确认识异常，并作出合适的异常处理就显得很重要了。 我们先尝试抛开前端这个限定条件，来看下更广泛意义上程序的报错以及异常处理。不管是什么语言，都会有异常的发生…"}, {"id": "6844904133577670664", "title": "从Generator入手读懂co模块源码", "desc": "本文主要会讲Generator的运用和实现原理，然后我们会去读一下co模块的源码，最后还会提一下async/await。 异步编程一直是JS的核心之一，业界也是一直在探索不同的解决方法，从“回调地狱”到发布订阅模式，再到Promise，都是在优化异步编程。尽管Promise已经…"}, {"id": "6844903715137126407", "title": "在工作中如何优化前端代码？", "desc": "此为知乎问答，我把我的答案稍作整理放到这里来了。 首先说一个最重要的优化原则：代码优化是每天都要进行的，而不是一两个月做一次大优化，那时做就已经晚了。另外由于优化是每天做的，所以你不需要一次的就过度优化，保持小步快跑即可。 这个原则为什么重要？因为很多程序员会在写代码的时候说「…"}, {"id": "6987621696400261134", "title": "前端面试题目—js", "desc": "这是我在掘金写得第二篇文章，文章中一个问题就是一个知识点，建议大家多看看其他文章，多查阅资料，最好自己总结一下，真正搞懂，这样在面试的时候就不是背出来给面试官听，而是用自己的话说出来。"}, {"id": "6990631570390384647", "title": "JavaScript 代码的运行过程", "desc": "JavaScript 代码的运行过程​ JavaScript 代码的运行过程，实质上分为两个阶段—— 编译阶段、执行阶段。​ 词法分析（https://esprima.org/demo/parse.h"}, {"id": "6981998267412250660", "title": "Canvas实现滤镜效果", "desc": "图片滤镜 滤镜，主要是用来实现图像的各种特殊效果。 用过photoshop或者美颜相机，我们都知道滤镜可以帮助我们把图片修缮的更加完美。 那么，作为前端开发人员，如何实现一套滤镜效果呢？一起来了解下吧"}, {"id": "6978470210088992805", "title": "聊聊JavaScript的原型", "desc": "这是我参与更文挑战的第27天，活动详情查看： 更文挑战 零、了解下原型链 首先看下上图，对于没接触过的小伙伴来说有点难以理解，那就只看图中蓝色的线，这条线即为原型链的本质： 通过构造函数创建实例， 实"}, {"id": "6997310851975741476", "title": " 《你所不知道的JavaScript》读书笔记（一）：作用域和闭包（下） ", "desc": "这篇文章我们接着前面《你所不知道的JavaScript》读书笔记（一）：作用域和闭包（上）来继续聊作用域和闭包的话题。"}, {"id": "6999140254032592933", "title": "JS实用篇复习笔记（3）", "desc": "1、运算 1、数学运算是安全的 我们可以做任何事情：除以零，将非数字字符串视为数字等。 脚本永远不会因致命错误而停止。在最坏的情况下，我们会得到NaN结果"}, {"id": "6921501326799011853", "title": "带你入门前端工程（一）：技术选型", "desc": "技术选型应该对很多程序员都不陌生了，无论是大到技术框架、编程语言，还是小到工具库的选择，都属于技术选型的范围。个人认为技术选型应该按照以下四个指标进行选择： 由于没有统一的叫法，所以以上四个指标的名称是我自己定的。下面就让我们一起来深入了解一下如何进行技术选型吧。 可控性是技术…"}, {"id": "6995900997126062117", "title": "JavaScript数据类型 - Array类型", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战  创建数组一 在JavaScript中，Array类型也是相当常用的一种类型。而且JavaScript中的数组与其他语言中的数组有着很大的"}, {"id": "6992374682200735781", "title": "前端刷题路-Day70：减小和重新排列数组后的最大元素（题号1846）", "desc": "给你一个正整数数组 arr 。请你对 arr 执行一些操作（也可以不进行任何操作），使得数组满足以下条件..."}, {"id": "6986907462884392974", "title": "JS数组知识点整理（涉及ES6+新增，持续更新）", "desc": "构造函数 Array是 JavaScript 的原生对象，同时也是一个构造函数，可以用它生成新的数组 创建数组，直接使用数组字面量是更好的做法。 静态方法 Array.isArray() 返回一个布尔"}, {"id": "6966423577168248869", "title": "js中compositionstart和compositionend事件", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 需求 最近有个需求，根据input输入的文字进行列表过滤。这是个很常见的需求。于是大致的代码如下："}, {"id": "6887702436304125960", "title": "快使用Scriptable自己开发一个iPhone小组件吧", "desc": "最近苹果的 iOS 系统升级到了 iOS 14，这次的更新我比较关注的就是升级的小组件功能，这次更新我们可以将小组件放置在主屏幕中的任何位置，可以让我们更加便捷的查看一些信息，从而省去了还需要打开APP去查看消息的步骤，感觉很方便。 看到这里一些同学可能会说，功能是挺不错的，如…"}, {"id": "6998338771372474381", "title": "再说面向对象（1）", "desc": "面向对象的概念 相信大家在学习js的初期都听说过一句话：js中万物皆对象，今天再次回想面向对象，回顾你的coding心路"}, {"id": "6987268949687664677", "title": "前端基础-错误监控", "desc": "前端错误分类 1：即时运行错误：代码错误 2：资源加载错误 错误捕捉方式 1：即时运行错误：代码错误 1-1：try..catch 1-2:window.onerror 2：资源加载错误 2-1:ob"}, {"id": "6991661727318294558", "title": "JavaScript parseInt()，parseFloat（）函数", "desc": "parseInt方法接收两个参数:parseInt(string，radix?)； parseFloat方法接收一个参数:parseFloat(string);"}, {"id": "6957317022992564231", "title": "对 js 数组常用函数的手动实现", "desc": "在JavaScript的数组类型上有各种各样的方便快捷的操作方法，如果对各个方法能够灵活的应用，对于开发来说，将能很大的提升工作效率。"}, {"id": "6984818045470375944", "title": "var、let、const 之间的区别和联系", "desc": "let、const都是ES6中新增加的特性，都表示块级作用域，即它们只在最近的代码块中生效； let: let 声明一个局部变量 不存在变量提升，即使用的时候必须先声明 同一个代码块中不能重复声明 c"}, {"id": "6844904000735690766", "title": "彻底抛弃 jQuery ，不然还留着过年？", "desc": "我以前很喜欢 jQuery，而且说实话，我是先学jQuery，再学 JavaScript 的。所以我写这篇文章有点像是在背叛 jQuery。 我知道，关于为什么不应该用 jQuery 的文章已经汗牛充栋，但我只是想说下自己的亲身体验。 随着 web 的发展，新技术长江后浪推前浪…"}, {"id": "7000677664369410084", "title": "Javascript 设计模式小结", "desc": "什么是设计模式？ 一个模式就是一个可重用的方案，可应用于在软件设计中的常见问题。另一种解释就是一个我们如何解决问题的模板 - 那些可以在许多不同的情况里使用的模板。 设计模式分类 1. 创建型模式 单"}, {"id": "6844903668722974728", "title": "移动端弹窗输入密码的那些事", "desc": "该从何说起呢？我先理一理，东西有点多，怕把大家带沟里。那现在开门见山，先说一下是什么事吧。如题所说，其实就是在移动端浏览器的新股认购页面里面让用户输入交易密码。 不就是输入交易密码，心想看着很简单，做着也简单。 很happy，果然和心里想的一样。新股认购上线没啥问题。视觉稿的输…"}, {"id": "6844903911694794766", "title": "JS 中 this 在各个场景下的指向", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 1. this 的奥秘 很多时候, JS 中的 this 对于咱们的初学者很容易产生困惑不解。 this 的功能很强大，但需要一定付出才能慢慢理解它。 对Java、PHP或其他标准语言来看，this 表示类方法…"}, {"id": "6844903873371471885", "title": "小蝌蚪传记：端口转发", "desc": "。。。 她：一共20块。 由于电脑不在身边，小蝌蚪直接进了间网吧，这个bug的问题出在公司内网数据库中，只要调整数据数据就能解。 通过隧道技术，在内网打穿了一个洞，击穿了内网。以便不时之需。 假设，小蝌蚪个人服务器叫server1，公司的对外网站服务器叫server2，公司内网…"}, {"id": "6844903497687646222", "title": "移动 Web 开发问题和优化小结", "desc": "到目前为止，互联网行业里，手机越来越智能化，移动端占有的比例越来越高，尤其实在电商，新闻，广告，游戏领域。用户要求越来越高，网站功能越来越好，效果越来越炫酷，这就要求我们产品质量越来越高，web前端开发而言是一个挑战，是一个难题，也是一个机遇。如何让我们所开发的手机页面能有更好…"}, {"id": "6844903847098318861", "title": "9012 年了，Array 数组的方法赶紧用起来！", "desc": "摘要： 用原生的方法多好啊。 写久了业务代码的我，已经要被社会抛弃了。今天回过头去巩固基础知识，发现有很多自己业务中不经常用，或者说是不知道那个方法，导致自己重写一个方法去实现。关于 Array 对象的方法你是否只用concat、join、pop、push、shift、unsh…"}, {"id": "6844904068888920071", "title": "【JavaScript】（附面试题）深入理解作用域、作用域链和闭包", "desc": "在JavaScript中有作用域、作用域链和闭包。我们最开始可能觉得知道这些的定义就算懂了（刚入门时的我也是这样），但是当深入了解的时候，发现自己知道的只是皮毛。所以，这篇文章将详细讲解作用域、作用域链和闭包。 当创建一个函数时，会创建一个堆，同时初始化当前函数作用域，作用域(…"}, {"id": "7005833858822193183", "title": "JS -- Function.prototype上的几个重要方法", "desc": "每一个函数（普通函数、构造函数、内置类）都是FUnction这个内置类的实例，所以：函数.__proto__ === FUnction.prototype.所有函数都可以直接调取FUnction原型上"}, {"id": "7000667608953389093", "title": "js--Bom的使用", "desc": "BOM的介绍 JavaScript的组成 JavaScript基础分为三个部分： ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。 DOM"}, {"id": "7005818780261548069", "title": "JavaScript-一文搞清楚函数执行环境及作用域链", "desc": "执行环境及作用域链是JavaScript中一个很重要的概念。本文志在整理清楚执行环境具体是什么，以及函数执行时的作用域链是如何创建的。"}, {"id": "6844903718106693646", "title": "Egg.js 基本使用", "desc": "负责腾讯云DNSPod产品的系统研发工作，完成系统前端功能及后端逻辑代码实现，保障产品质量及研发进度。 我们在上一篇文章Egg.js 源码分析-项目启动, 已经简单的分析了Eggjs 的启动机制, 以及其相应的实现原理，Eggjs 就是针对一系列的约定俗成的规则，在项目启动时，…"}, {"id": "6956250627777232909", "title": "JavaScript数组的reduce()的定义和用法", "desc": "JavaScript数组的reduce()的定义和用法 Array.prototype.reduce()"}, {"id": "6844903618882043917", "title": "重构 - 用各种方式优化自己的函数库", "desc": "最近有几天时间空闲，也是在学怎么写更有可读性的代码，更简单，方便的API。简单来说就是重构方面的内容。今天简单分享下，对以前一个小项目（ecDo，欢迎大家star）的API重构方式，下面的的代码如无说明，都是选取自我的项目中这个文件：ec-do-3.0.0-beta.1.js …"}, {"id": "6990246919561805861", "title": "通过创建GeoLine给地图添加烟花图效果", "desc": "ThingJS除了提供多种类型的模型外，还预置了多种粒子效果，包括：水、火、烟、雨、雪等，每种粒子效果按照不同的使用场景又有多种表现形式，可以满足在不同的天气条件下数字孪生可视化场景中的情况。那能不能"}, {"id": "6989960349545922590", "title": "DOM 那些属性", "desc": "最近在做一个可以编辑的 div，用到了很多 DOM 的操作，发现自己对 DOM 了解太薄弱了。决定把这一块梳理一下，见下图： 总结一下： Node 类型是我们操作 DOM 元素的父类。 根据 node"}, {"id": "7003989684632174605", "title": "Hash与History的区别", "desc": "hash模式 hash就是指url尾巴后的#号以及后面的字符，由于hash值的变化不会导致浏览器向服务器发出请求，而且hash改变会触发onhashchange事件。 hash的特点： hash虽然出"}, {"id": "6844903773588963342", "title": "通过讲故事搞定前端网络知识", "desc": "本文约6000余字，阅读需要10分钟左右。 有人说，前端工程师的网络基础很弱，说很多都是非计算机的，门槛低，其实不能一概而论。但是既然人家吐槽了，那我们就提高自己呗。 前端工程师对这句话应该有比较深刻的感受吧，这也可能是前端变化真的太 TM 的快了。但变化的这么快，总是要沉淀下…"}, {"id": "6844903958863937550", "title": "超详细https握手与数字签名讲解", "desc": "之前看过很多https相关内容，感觉都是有个大概印象。趁着刚阅读《http权威指南》后，发表一下自己的理解。如果我有讲的不对的地方，麻烦大家帮我指点出来，阿里嘎多～ 其实我也不知道从哪里开始讲起，咱走一步算一步吧哈哈哈哈哈哈。 大部分困难的编码及解码工作都是在 SSL 库中完成…"}, {"id": "7005771280582443039", "title": "JavaScript几个很重要却容易忘记的运算符", "desc": "可选链【?.】 允许读取对象深层次的属性的值。 空值合并运算符【??】 当左侧操作数为null或者undefined时，返回右侧操作数，否则返回左侧操作数。 逻辑空赋值【??=】 左侧操作符为null"}, {"id": "6993904899939368990", "title": "“闭包和高阶函数“，拿来吧你", "desc": "1.闭包 闭包的形成与变量的作用域以及变量的生存周期密切相关 1.1变量的作用域 指变量的有效范围。常见的是在函数中声明的变量作用域。 当在函数中声明一个变量的时候，如果该变量前面没有加关键字var,"}, {"id": "6996265725371367454", "title": "Web Compoent 系列(2)—自己动手实现一个 Web Component", "desc": "聊一聊什么是 web component 以及 web component 有什么优势，以及如何整合现有 web 技术来实现一个 web component。"}, {"id": "6844903598707441672", "title": "几道高级前端面试题解析", "desc": "因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。 小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 0.1 = 2^-4 * 1.10011(0011)…"}, {"id": "6995139995405123598", "title": "JavaScrip模块模式", "desc": "模块模式是在单例对象基础上加以扩展，使其通过作用域链来关联私有变量和特权方法。 单例是通过字面量来创建的。单例对象就是只有一个实例对象。"}, {"id": "6844904022210527240", "title": "11道JS选择题，听说第一题就难倒80%的人", "desc": "坊间传闻，现在的前端面试者的简历都写精通JS，那就拿这些题考考，若不能全答对，就不要说精通了，这只是中高级前端的基础题而已。（注：文末附参考答案）"}, {"id": "7000714655945457694", "title": "【青训营】- 如何写好的JS代码（学习笔记）", "desc": "这是我参与8月更文挑战的第一天，活动详情查看：8月更文挑战 写好JS的原则 各司其职 组件封装 过程抽象 各司其职 前端行走江湖有三大法宝：html、css、js。我们要让其发挥好自个的作用，html"}, {"id": "6991344529999659045", "title": "入门百度地图 JavaScript API | 8月更文挑战", "desc": "注册 先申请百度账号，创建地图应用生成 AK。百度地图平台 注意 应用类型选择浏览器端。 白名单输入*号，所有地址都可以访问。 载入地图 在页面使用script标签引入 v : 地图api版本。 ty"}, {"id": "6844903591417757710", "title": "实战笔记：Jenkins打造强大的前端自动化工作流", "desc": "公司的前端构建及部署工作都是人工去做，随着业务扩大，项目迭代速度变快，人员增多，各种问题都暴露出来，本文是对前端自动化工作流进行探索后的一篇经验分享，将通过一个简单案例分享一下基于Jenkins的前端自动化工作流搭建的过程，搭建完这套工作流，我们只需要在本地发起一个git提交，…"}, {"id": "6999097641170632711", "title": "如何使用debugger拦住Ta人查看你的接口及怎样破解debugger拦截？", "desc": "现在前后的分离，很容易暴露我们请求什么接口，接口有什么内容，很容易导致我们信息泄露，无法得到安全保护，于是我写了这篇文章。"}, {"id": "6844904131035922446", "title": "跟着\"呆妹\"来学webpack(基础篇)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 先简单说一下标题的前因后果，避免吃瓜群众不明白何为\"呆妹\"。 设计师，配几个狗头的表情包。 好嘞。 所以这波安排一下\"呆妹\"吧，谁叫我是一个信守承诺的博主呢。 （希望大家不要像此博主一样为了人气不择手段败坏掘金的风气…"}, {"id": "6844904158957404167", "title": "面试官：说说执行上下文吧", "desc": "当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 \"执行上下文(execution context 简称 EC)\" 或者也可以叫做执行环境。 全局执行上下文——这是默认或者说是最基础的执行上下文，一个程序中…"}, {"id": "6846687599281569800", "title": "code-review之前端代码规范", "desc": "所谓无规矩不成方圆，前端时间在团队 code-review 中发现，不同时期不同开发人员写的代码可谓五花八门。因此我们提出了一些相关代码方面的规范，希望日后能形成团队的编码规范。 HTML 属性应该按照特定的顺序出现以保证易读性。 保持简单，不要使用嵌套过多过于复杂的选择器。 …"}, {"id": "6995324561696751630", "title": "🔥JavaScript作用域和变量提升，你真的会了么？（下）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 全局作用域 直接编写在script标签中的JS代码，都在全局作用域。 全局作用域在页面打开时创建，在页面关闭时销毁。 在全局作用域中有一个"}, {"id": "6991261103141421092", "title": "你是如何设计一个可扩展、通用的、健壮性组件", "desc": "前言 组件是页面不可或缺的部分，而设计组件就成为了前端同学每日工作。这篇文章将会以本人所认知的角度去对组件的封装设计展开思考。如果你对我的观点，方式，又或者你有更好的方式，更优的设计模式，不妨在评论区"}, {"id": "6993694640612474917", "title": "微信内嵌H5页面授权和分享", "desc": "Long Long Ago 用到了微信授权获取用户信息和分享，掉坑无数次，遂作此篇。文章从微信授权获得的信息到如何进行微信授权以及微信分享讲解。"}, {"id": "6844903886004682765", "title": "常用JS正则大全(2019年11月12日更新)", "desc": "根据微信支付文档, 修改卡号长度为10到30位."}, {"id": "7006216065604648973", "title": "Js去除字符串空格", "desc": "使用js去除字符串内所带有空格，有以下三种方法 （1）replace正侧匹配方法 去除字符串内所有的空格：str=str.replace(/\\s*/g,\"\"); 去除字符串内两头的空格：str=str"}, {"id": "6986550922843258893", "title": "手摸手教你在前端开发中使用设计模式", "desc": "前言 提到设计模式可能大家会感觉有点高大上的感觉，其实这个东西的概念很抽象，但是在实际开发中还是有很多地方可以使用设计模式的思想，对我们的代码进行一次优化。本文旨在介绍一些开发中常用的设计模式"}, {"id": "6974554346562256926", "title": "深入点了解JSON.stringify使用", "desc": "这是我参与更文挑战的第6天 1.经典用法 2.复杂数据的提取 比如说，我们的数据非常复杂，还有类似头像，昵称，个人签名之类的信息。可是我保存在本地，只需要用户名和性别,如果操作呢？我"}, {"id": "6999076144280535053", "title": "深入理解Weex之原理篇", "desc": "这是我参与 8 月更文挑战的第 22 天，活动详情查看： 8月更文挑战 前言 前端工程师们一直在探索编写一套代码，可以运行在H5、安卓、IOS平台。 在早期，采用Hybrid进行H5混合开发，这种模式"}, {"id": "6844903869995024397", "title": "说说 JavaScript 中函数的防抖 (Debounce) 与节流 (Throttle)", "desc": "有时候会在项目开发中频繁地触发一些事件,如 resize、 scroll、 keyup、 keydown等，或者诸如输入框的实时搜索功能，我们知道如果事件处理函数无限制调用，会大大加重浏览器的工作量，有可能导致页面卡顿影响体验；后台接口的频繁调用，不仅会影响客户端体验，还会大大…"}, {"id": "6972350848634454030", "title": "数据结构之栈", "desc": "这是我参与更文挑战的第11天，活动详情查看：更文挑战 什么是栈 栈是一种遵从后进先出（LIFO）原则的有序集合。先添加的或者待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。"}, {"id": "6844903828756627463", "title": "Web调试技术详解", "desc": "对于每位开发者而言，bug已经是不能再寻常的东西，debug也是家常便饭的事情。然而寻根溯源起来，还得从上个世纪五十年代讲起。 1947年9月9日，哈佛大学在测试马克II型艾肯中继器计算机的时候，一只飞蛾粘在一个继电器上，导致计算机无法正常工作，操作员把飞蛾移除之后，计算机又恢…"}, {"id": "6978788680467120136", "title": "Cookie、sessionStorage、localStorage的区别", "desc": "cookie 数据始终在同源的http请求中携带，即 cookie 在浏览器和服务器间来回传递。WebStorage 不会自动把数据发给服务器，仅在本地保存"}, {"id": "6918926609848205325", "title": "天眼探针基于rrweb实现前端异常视频录制与回放功能", "desc": "日常开发过程中,面对线上问题,常见的两个痛点,一个是用户操作在自己的机器上,开发者无法还原用户触发异常的场景,另一个,由于混淆和压缩代码,导致线上报错在控制台打印的堆栈信息,无法将异常定位到代码源码.这次我们来讨论下异常视频回放的解决方案. 下面我要介绍的就是今天的主角rrwe…"}, {"id": "6997412966219907086", "title": "【CSS】常用的一些CSS选择器", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 CSS选择器，本篇文章主要介绍CSS中的一些选择器"}, {"id": "6844903600032858125", "title": "Vue项目全局配置微信分享实践", "desc": "这个项目为移动端项目，主要用于接入公众号服务。项目采用两种登录方式，微信授权登录以及账号密码登录。对于移动端项目而言，为了便于项目扩展以及提供开发热更新速度，项目分为不同的模块，每个模块是一个单页面应用。页面分为两种，一种是需要用户登录之后才能浏览，另一种是用户无需登录即可浏览…"}, {"id": "6844904020172079112", "title": "0.57 * 100 === 56.99999999999999 之谜", "desc": "在最近业务开发中, 作者偶遇到了一个与 JavaScript 浮点数相关的 Bug。 这里就简单描述下背景: 在提现相关业务时, 会将展示给用户以元为单位的数值转化为以分为单位的数值。 例如, 0.57元 转化为 57 分。 这段看似没有问题的代码, 提交给后台时, 接口却返回…"}, {"id": "6844903646623186958", "title": "ES6 系列之 WeakMap", "desc": "我们先从 WeakMap 的特性说起，然后聊聊 WeakMap 的一些应用场景。 1. WeakMap 只接受对象作为键名 2. WeakMap 的键名所引用的对象是弱引用 翻译过来应该是 WeakMaps 保持了对键名所引用的对象的弱引用。 只有当我们手动设置 obj = n…"}, {"id": "6961302995715768334", "title": "BFC模型笔记", "desc": "BFC概念 在解释什么是BFC之前，我们需要先知道Box、Formatting Context的概念。 Box：css布局的基本单位 Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页"}, {"id": "6984295729992826888", "title": "new Date()兼容性比较", "desc": "在使用element ui 的时间选择器 date-picker 的default-value(选择器打开时默认显示的时间) 文档说 default-value 可被new Date()解析"}, {"id": "6844903584891420679", "title": "谈谈 JavaScript 的作用域", "desc": "作用域，是指变量的生命周期（一个变量在哪些范围内保持一定值）。 全局变量，虽然好用，但是是非常可怕的，这是所有程序员公认的事实。 它能够自动执行 (function() { //... })() 里面包裹的内容，能够很好地消除全局变量的影响； 在 ES6 之前，是没有块级作用域…"}, {"id": "6844904127344934926", "title": "一文读懂JS中类、原型和继承", "desc": "很多前端小伙伴，包括我自己在开始学习JS时对__proto__和ptototype这两个概念时都是一脸懵逼，面试时遇到原型链的问题总是瑟瑟发抖；不过真正的勇士敢于直面难题，经过对原型链不断的探索，本文对JS中类和原型的概念进行了深入的讲解，同时从原型方面来了解JS中继承是什么。…"}, {"id": "6995923016643248165", "title": "一文了解Promise使用与实现", "desc": "Promise 作为一个前端必备技能 ， 不管是从项目应用还是面试 ，都应该对其有所了解与使用 。"}, {"id": "6844903502586593288", "title": "webpack 应用编译优化之路", "desc": "目前大家使用最多也是最广泛的应用打包工具就是 webpack 了，除去 webpack 本身已经提供的优化能力（例如，Tree Shaking、Code Splitting 等）之外，我们还能做哪些事情呢，本篇主要就为大家介绍下滴滴 WebApp 团队在这条路上的一些探索。 现…"}, {"id": "6927585452253790216", "title": "2021 年 JavaScript 测试框架回顾", "desc": "本文已获得原作者转载、修改的许可测试环节是软件工程中的重要组成部分。如果你不熟悉测试，那你可能会提出和别人一样的问题——如果我的软件的所有功能都在正常运作，我为什么还要进行测试呢？我们进行测试的目的是"}, {"id": "6968225000742453262", "title": "JavaScript 异步编程指南 — Promise 前世 Deferred", "desc": "Promise 是现代 JavaScript 比较重要的一个核心概念，也许你之前没听过，其实我们现在的 Promise 就是由 Deferred 逐步演变而来形成了如今的一套规范 PromiseA+。"}, {"id": "6844903582697783310", "title": "Mpvue 小程序转 Web 实践总结", "desc": "Mpvue 是一个使用 Vue.js 开发小程序的前端框架。框架基于 Vue.js 核心，修改了 Vue.js 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 Vue.js 开发体验，同样也使得一套代码同时复用在小程序和 …"}, {"id": "6945001935221211143", "title": "前端JS高频面试题---2.单例模式", "desc": "单例模式是设计模式中相对较为容易理解、容易上手的一种模式，同时因为其具有广泛的应用场景，也是面试题里的常客。 一般情况下，当我们创建了一个类（本质是构造函数）后，可以通过new关键字调用构造函数进而生成任意多的实例对象。像这样： 我们先 new 了一个 s1，又 new 了一个…"}, {"id": "6844903566545518606", "title": "Javascript设计模式之发布-订阅模式", "desc": "发布-订阅模式又叫做观察者模式，他定义了一种一对多的依赖关系，即当一个对象的状态发生改变的时候，所有依赖他的对象都会得到通知。 作为一名前端开发人员，给DOM节点绑定事件可是再频繁不过的事情。比如如下代码 这里我们订阅了document.body的click事件，当body被点…"}, {"id": "7002920013782843428", "title": "老生常谈：Promise对象（2）链式调用", "desc": "引言 上一篇文章结束用ES6语法实现promise基本功能 then链式调用 效果 先看下效果 改造第一步 根据上面的功能来改造then方法，返回一个新的promise实例(promise2) 返回一"}, {"id": "6844903953734336525", "title": "微前端入门", "desc": "最近打算改进一下现有网站的架构，微前端这个词多次进入了我的视野。 但是网上关于微前端文章总是说得似是而非，于是我找到这篇文章进行翻译。并大概理解微前端的理念。目前还没有确定是否使用微前端架构，因为看起来业界对最佳实践并没有达成一致。 译文开始，有删节。 把前端做好很难，让多个团…"}, {"id": "6844903767926636558", "title": "一篇文章构建你的 NodeJS 知识体系", "desc": "最近读《重学前端》，开篇就是让你拥有自己的知识体系图谱，后续学的东西补充到相应的模块，既可以加深对原有知识的理解，又可以强化记忆，很不错的学习方案。 process.nextTick 方法允许你把一个回调放在下一次时间轮询队列的头上，这意味着可以用来延迟执行，结果是比 setT…"}, {"id": "6844904083707396109", "title": "【建议👍】再来40道this面试题酸爽继续(1.2w字用手整理)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 😂😂😂 你们一定觉得我是在吹牛...哼...我这是不愿意截屏发出来(否则我还不露馅了)。 哈哈 😄，收... 其实不管你是花了20分钟，30分钟，亦或者是两个小时来阅读它，你愿意把这部分时间完完全全的交给我，…"}, {"id": "6986825925237145631", "title": "CSS 世界中的方位与顺序", "desc": "在 CSS 中，我们经常会与各种方向方位打交道。 譬如 margin、padding，它们就会有 margin-left、margin-right 或者是 padding-left、padding-r"}, {"id": "6995084069486723080", "title": "时间杀死的烂俗人（程序媛）", "desc": "图均为彩铅画，作者亲手画的。这下看还有啥理由举报我……（碎碎念） 本文技术点：JS 数组多个方法（map、reduce、push、pop）的底层实现。"}, {"id": "6985456953661063204", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（三）", "desc": "感激相遇 你好 我是阿ken 打开浏览器的开发者工具，找到Sources面板，在里面的网页源代码中可设置断点(单击某一行行号即可添加断点，再次单击即可取消) 在添加断点后，刷新网页，程序就会在断点的位"}, {"id": "6987674192166518821", "title": "两天时间，实现自己的 Promise", "desc": "为了更好的理解和实践 promise，我尝试自己写一个实现 promise 所有功能的类，并基于此去做一些扩展，达到可以在生产环境使用的程度；并且为了便于维护和理解，代码全部使用 typescript"}, {"id": "7000913184102023175", "title": "JavaScript 系列之异步编程（二）", "desc": "[JavaScript 系列之异步编程｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6992553489930928159", "title": "总结常用的异步编程案例", "desc": "前言 对于异步编程，从最初的回调函数Callback再到Promise、generator、async/awaitJavaScript也在慢慢填补这个坑。但异步编程到底可以做什么还是值得探讨的。 这篇"}, {"id": "6991817769469607950", "title": "『面试的底气』—— 设计模式之开放封闭原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844903679976275976", "title": "ES6、ES7、ES8特性一锅炖(ES6、ES7、ES8学习指南)", "desc": "ES全称ECMAScript，ECMAScript是ECMA制定的标准化脚本语言。目前JavaScript使用的ECMAScript版本为ECMAScript-262。 ECMAScript 标准建立在一些原有的技术上，最为著名的是 JavaScript (网景) 和 JScr…"}, {"id": "6887751398499287054", "title": "前端项目自动化部署——超详细教程（Jenkins、Github Actions）", "desc": "本教程主要讲解了怎么使用 Jenkins 和 Github Actions 部署前端项目。 第一部分是使用 Gitea 配置局域网 git 服务器，再使用 Jenkins 将 Gitea 下的项目部署到局域网服务器。 第二部分是使用 Github Actions 将 Githu…"}, {"id": "7004322483520143390", "title": "web前端等比缩放图片方法", "desc": "最近在开发H5时又再次遇到了需要对图片等比缩放的需求。想着这也是自己以前刚开始工作时遇到困难之一，因此就记录了一下。希望能对有需要的小伙伴有所帮助吧。"}, {"id": "7000675094972334110", "title": "【日拱一卒】JavaScript手写apply、call、bind", "desc": "这是我参与8月更文挑战的第26天，活动详情查看： 8月更文挑战” 前言 这几天刷题目看文章的时候，发现手写apply、call、bind代码，我能看懂了。而且觉得缺少些有趣的细节。所以有了这篇文章，一"}, {"id": "6844904073351675912", "title": "前端面试常考的手写代码不是背出来的！", "desc": "我们在面试的时候，经常会被面试官问到几个手写代码的问题。手写一个数组去重复，手写一个深拷贝，手写一个数组拍平等等。有些小伙伴面试之前准备了，但是在手写的时候还是会忘掉，本文总结了一个如何应对手写代码的大纲，前面是一些基础内容，但是也希望能帮助到你，都会就当复习一遍。 1. 起名…"}, {"id": "7005114649091768350", "title": "作用域和闭包", "desc": "JavaScript 词法作用域和动态作用域 作用域是指程序源代码中定义变量的区域。 作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 采用的是词法作用域，也就是静态作用域。 静态作"}, {"id": "7005586591343181854", "title": "【babylonjs】babylonjs实践（十二）--画车道线", "desc": "背景 前面一节就讲了独立的画线。这一章节结合有一个例子我们来画一个。 例子：画车道线 需求拆解 我们拿到道路数据，本质上就是一条条的线段，直接绘制出来就行。 但是要区分不能的线条类型。。 正文 单实线"}, {"id": "6958998979023470628", "title": "文字烟花特效，用JS代码示爱！程序员小姐姐用这个代码挽回了爱情~", "desc": "前言 之前我出了一个如何在网页里使用原生JS开发放烟花效果的教程。 竟然有一个前端小阿姨问我，如果想要烟花放出来是文字的话怎么实现，她要给男朋友做一个。 好家伙，这狗粮洒一地呀 那狗粮不能我一个人吃，"}, {"id": "6844903540851212295", "title": "个人分享--web前端学习资源分享", "desc": "时间过得真快，转眼间现在是2017年最后一个星期，而今天也是圣诞节，过几天也是元旦了。每到年底，大家都习惯总结和分享，我也不例外。但是经历，我之前已经发过了，那么我今天就分享吧！把我接触的一些资源分享给大家，算是送给大家的双旦礼物吧！希望大家能够从中获取自己所需的资源。从我接触…"}, {"id": "6991466122423992333", "title": "JS运行原理｜8月更文挑战", "desc": "JavaScript是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。今天，我们就一起来学习一下JavaScript的运行原理。"}, {"id": "6899344555653464077", "title": "前端黑科技汇总（不定时更新）", "desc": "正文试试给div加上contentEditable=true如何获取当前页面的滚动位置？如何平滑滚动到页面顶部如何检查指定的元素在视口中是否可见？如何确定设备是移动设备还是台式机/笔记本电脑？如何创建"}, {"id": "6844904061636968462", "title": "从选择上传文件缩略图预览到提交上传全流程总结方案", "desc": "上传图片生成缩略图，这个需求很常见，网络上的文章也很多。但是大多数都是直接丢一堆代码出来，也不多解释，不说下注意点，不说明优缺点等，也缺乏场景的延伸。 我这里所写的，不仅是生成缩略图这个需求，还把验证上传文件、删除已选文件、提交上传文件的一个完整的实际流程来展开此文章。 因为网…"}, {"id": "6844903583884771342", "title": "在小程序、mpvue中使用flyio发起网络请求", "desc": "随着 Weex 、mpvue 的发布，他们都是支持Vue.js语法。目前vue已经你能够运行在浏览器、小程序和Native了。尽管各个平台仍有差异，但已经基本能实现 Write Once Run Everywhere 。这使得我们可以在多个端上实现尽可能大限度在代码复用。但是无…"}, {"id": "6844903550552637448", "title": "前端数据监控到底在监控什么？", "desc": "前端数据监控一般分为性能数据监控和线上异常监控。本文对这两块数据的监控原理和方法进行整理说明。 将监控代码注入到页面中，手动计算时间差或者使用浏览器API进行数据统计。 不将统计代码注入到页面中，一般借助虚拟机对页面进行性能数据分析。 在进行性能数据监控之前，先要明确页面从用户…"}, {"id": "6975535063136108580", "title": "基础小咸菜，JS/TS类", "desc": "这是我参与更文挑战的第 19 天，活动详情查看： 更文挑战 基础小咸菜，JS/TS类 1 类在JS中的表现(ES6) 先上代码： 1.1 在es6类中的构造函数 constructor会告诉解释器在使"}, {"id": "6995365979442118693", "title": "JS对象的增删改查、遍历以及解构赋值...", "desc": "1.对象的增删改查 2.对象的遍历 1.在JavaScript中对象和数组一样是可以遍历的 2.什么是对象的遍历? 3.如何遍历一个对象? 以下代码的含义: 将指定对象中所有的属性和方法的名称取出来了"}, {"id": "6977761131678924836", "title": "Vue-SSR 客服端激活失败（Vue hydration fails）", "desc": "前一阵遇到了一个Bug..... 整整排查了2个多小时，如果要追究其根本原因，找到了这篇文章，解释完美。 原文地址：Vue激活失败（h"}, {"id": "6844904090187595790", "title": "JavaScript中各种源码实现（前端面试笔试必备）", "desc": "能够手撕各种JavaScript原生函数，可以说是进大厂必备！同时对JavaScript源码的学习和实现也能帮助我们快速扎实地提升自己的前端编程能力。 最近很多人和我一样在积极地准备前端面试笔试，所以就整理了一些前端面试笔试中非常容易被问到的原生函数实现和各种前端原理实现，其中…"}, {"id": "6977752428993052686", "title": "JavaScript 中的 setTimeout 和 setInterval 方法", "desc": "有时您不希望函数立即运行。您希望它重新执行，甚至在特定时间间隔后重复运行。JavaScript 为我们提供了两种实现方法： setTimeout 和 setInterval。下面，我们将来理解这两个方"}, {"id": "6908345588505706504", "title": "Tiny-Swiper —— 超轻量、基于插件、按需引入的强大轮播库", "desc": "距离 1.0 稳定版发布到现在快一年啦. 在波折的 2020 年里我彻底重构了 Tiny-Swiper 的核心模块，现在它完美地支持 loop/freeMode 配置项，同时提供更加丰富的 API 和插件，这使得我们可以实现其他复杂炫酷的效果。 目前发布的版本为 2.0.0-a…"}, {"id": "6844903674116833288", "title": "JS的节流、函数防抖 原理及使用场景", "desc": "可以看到，我们只要按下键盘，就会触发这次ajax请求。不仅从资源上来说是很浪费的行为，而且实际应用中，用户也是输出完整的字符后，才会请求。下面我们优化一下： 可以看到，我们加入了防抖以后，当你在频繁的输入时，并不会发送请求，只有当你在指定间隔内没有输入时，才会执行函数。如果停止…"}, {"id": "6980586307470753805", "title": "被写烂系列——实现EventEmitter", "desc": "前言 EventEmitter，广泛的应用于javascript语言中，浏览器事件（如鼠标单击click，键盘事件keyDown）都是该模式的例子。我们在编写代码时也经常用它来解耦，比如：组件间我们不"}, {"id": "6950464567847682056", "title": "useRef详细总结", "desc": "useRef与createRef的区别 useRef与全局变量的区别 useRef与state的区别 useImperativeHandle与forwardRef配合使用"}, {"id": "6954264389201428510", "title": "执行动态函数的小技巧", "desc": "一、前言 最近研究了一些低代码开发平台，发现里面都有代码编辑的能力。所以就有一个疑问，这些代码在应用预览时/上线后是怎么执行的？"}, {"id": "6964348070515441694", "title": "记录reduce的实际开发应用", "desc": "参考: reduce 1.数据分类 2求和 比较重要的一点就是,如果没有设置初始值,第一个previousValue是11,如果设置了就是8"}, {"id": "6844903716030513165", "title": "「译」理解JavaScript的柯里化", "desc": "许多计算机语言都采用了这种编程风格。在这些语言中，JavaScript、Haskell、Clojure、Erlang 和 Scala 是最流行的几种。 我们接下来要谈到的概念就是这其中的柯里化。 在这篇文章📄中，我们会看到柯里化如何工作以及它是如何被软件开发者运用到实践中的。…"}, {"id": "6973581757853466631", "title": "源码系列—koa-convert", "desc": "介绍 koa-convart 是用于兼容 koa1 与 koa2 的一个工具库。koa 0.x 以及 1.x 版本的中间件是 generator 函数形式，而 koa 2.x 的中间件是 promis"}, {"id": "6844903619066593287", "title": "618快要来临--家具大战一战即发", "desc": "今年是小程序很火的一年，所以最近在自学微信小程序，所以打算自己撸一个小程序出来，由于自己才刚刚自学不久。就做了一个相对简单的家具小程序。当然在这其中也遇到了一些问题和bug,在这就和大家分享一下，这样才能帮助更多的朋友。如有不足之处，希望大家提出宝贵的建议哈。这样才能一起成长，…"}, {"id": "7000335650025111559", "title": "实现一个bind方法是一件非常复杂的事情", "desc": "实现一个bind方法其实要比想象中的难，因为一个完整的bind方法不仅仅是修改了目标对象的this指向，还需要完善返回值作为一个函数的其余特性"}, {"id": "6844903688029339655", "title": "实现前端弹簧动效", "desc": "它有一个弹闪的过程，一大一小交替缩放就像一个弹簧在弹动一样，而不是以往那种简单的线性变大。 如果使用CSS的animation-timing-function只是改变运动的速度，不能改变运动的方向。 是没有这种弹性动感的。 因为要实现一个弹簧振动效果，需要有两个参数，一个是阻尼…"}, {"id": "6890088967031980040", "title": "ES6是真的“省”！空间&时间！", "desc": "函数继承使用ES6语法编写比ES5要减少约75%左右的代码，当然如果将继承方法抽象出来复用，整体代码量在绝对值上ES5比ES6也会多几十行，实际编程中，这块会交给框架或者Babel来处理，但是我们需要了解。 在JS中，this绑定的明确是一件不太容易的事情，我们经历闭包时代，b…"}, {"id": "6844903702721986568", "title": "JSBridge实战", "desc": "H5 VS Native 一直是前端技术界争执不下的话题。react、vue等技术栈引领着纯H5开发，rn、week则倡导原生体验。但在项目实战中，经常会选择一个中立的方案：混合开发。大众称呼：Hybrid。 本人目前从事新闻类产品研发，对于大家来讲，就是熟知的如今日头条、百度…"}, {"id": "6844903667884097543", "title": "Vue.js的computed和watch是如何工作的？", "desc": "Vue的组件对象支持计算属性computed和侦听属性watch两个选项，但这两个属性用法有什么异同以及它们底层实现的原理是什么？本文将用例子结合源码来进行总结。 1.computed是计算属性，类似于过滤器,对绑定到视图的数据进行处理,并监听变化进而执行对应的方法，对这部分不…"}, {"id": "6982922246054494222", "title": "我终于了解了函数柯里化", "desc": "什么是函数柯里化？柯里化的作用是什么？如何应对柯里化的面试题？这篇文章记录了我如何解决上面的这些问题的过程！"}, {"id": "6989541781302378532", "title": "npm file方式引入公共包遇到的几个坑", "desc": "背景 在《前端多个vue项目公共组件的三种方法（推荐npm file引入）》这一篇里讲了npm通过file方式引入公共包的方法，但在实际运用中，会遇到不少坑，这里就讲述笔者遇到的2个问题并给出解决方案"}, {"id": "6844903561910812685", "title": "babel之配置文件.babelrc入门详解", "desc": "官方解释,是下一代JavaScript 语法的编译器。 既然是下一代Javascript的标准，浏览器因版本的不同对此会有兼容性问题，JavaScript的新的方法都不能使用，但是目前我们在项目开发一直提倡使用最新的语法糖编写，不但能减少代码量，而且async,await等新特…"}, {"id": "6844904190431461383", "title": "细聊Concent & Recoil , 探索react数据流的新开发模式", "desc": "之前发表了一篇文章 redux、mobx、concent特性大比拼, 看后生如何对局前辈，吸引了不少感兴趣的小伙伴入群开始了解和使用 concent，并获得了很多正向的反馈，实实在在的帮助他们提高了开发体验，群里人数虽然还很少，但大家热情高涨，技术讨论氛围浓厚，对很多新鲜技术都…"}, {"id": "6844903624531935246", "title": "一个Vue页面的内存泄露分析", "desc": "什么是内存泄露？内存泄露是指new了一块内存，但无法被释放或者被垃圾回收。new了一个对象之后，它申请占用了一块堆内存，当把这个对象指针置为null时或者离开作用域导致被销毁，那么这块内存没有人引用它了在JS里面就会被自动垃圾回收。但是如果这个对象指针没有被置为null，且代码…"}, {"id": "6995078480903798821", "title": "uniapp使用腾讯地图进行地址搜索、定位附近门店等", "desc": "本人所在的公司最近在做共享电动车的项目，打开该应用看到的就是一副地图，可以获取附近共享电动车的地址、状态等信息，开发这个应用程序还需要在地图上规划路线、动态显示轨迹、轨迹回放等功能。"}, {"id": "6844904113986076686", "title": "js精准查询与模糊查询,总有一种适合你的需求", "desc": "随着vue、react在实际开发中应运越来越广泛，前端们处理数据的需求越来越多。这篇文章就讨论一下轻量级列表的搜索功能。当服务器的同事将所有数据返回到前端时，前端来做按条件查询，可以减少向服务器发送请求的次数，从而大大的提高性能。本文涉及多种方式的查询。下面先看代码，在说知识点…"}, {"id": "6844903606122971144", "title": "浅入浅出webpack", "desc": "准备了挺久，一直想要好好深入了解一下Webpack，之前一直嫌弃Webpack麻烦，偏向于Parcel这种零配置的模块打包工具一些，但是实际上还是Webpack比较靠谱，并且Webpack功能更加强大。由于上一次学习Webpack的时候并没有了解过Node.js，所以很多时候真…"}, {"id": "6993388347041251364", "title": "【重学JS】坚持学习,巩固基础-对象&数组及其方法", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 ☆☆☆ 今天的内容比较重要, 也是工作中用的最多的内容!! ☆☆☆ 持续更新, 可作为初学者的学习路线, 参考, 学习进度也不是特别赶"}, {"id": "6968995838076911623", "title": "JavaScript 异步编程史", "desc": "前言 早期的 Web 应用中，与后台进行交互时，需要进行 form 表单的提交，然后在页面刷新后给用户反馈结果。在页面刷新过程中，后台会重新返回一段 HTML 代码，这段 HTML 中的大部分内容与之"}, {"id": "6995923550951440414", "title": "js基础重读红宝书(一)", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 1. 了解javascript JavaScript是一门松散的面向对象语言 现在意义上JavaScript由三个ECMAScript(核"}, {"id": "6882545923528851469", "title": "js数组splice删除某个元素爬坑", "desc": "本次就拿删除举例，本身我们想删除数组中的某个指定元素，我们需要知道它所在数组中的下标，我们可以用 数组.indexOf获取它所在的下标，然后拿splice删除这个元素。 但是。。。。。问题就来了。 如果放到for循环中，比如循环数组，当某个条件成立的时候，我们需要删除某个指定的…"}, {"id": "7004738498414510094", "title": "js string方法", "desc": "charAt charCodeAt concat endsWith String.formCharCode includes indexOf lastIndexOf 用于操作正则的字符串方法 共有4个"}, {"id": "6844903666944573447", "title": "Vue.js从Virtual DOM映射到真实DOM的过程", "desc": "Virtual DOM的概念相信大家都不会陌生，Vritual DOM是相对与DOM(文档对象模型)来说的，MDN上关于DOM的定义：“DOM模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM的方法(met…"}, {"id": "6994322828719816740", "title": "深入理解闭包二(进阶必备知识)", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 在这个例子里，name变量出现在赋值操作的左侧，它就属于LHS。LHS意味着变量赋值或写入内存，它强调的是一个写入的动作，所以LHS查询查的"}, {"id": "6993208929014513700", "title": "四个数学公式做一个丝滑到不行的大转盘 - 更新了canvas代码", "desc": "游戏世界里面充斥着大量的数学与物理知识，四个数学公式做一个丝滑到不行的大转盘，允许后台不确定时间返回，无缝衔接，准确停下"}, {"id": "6992732996323246087", "title": "《JavaScript高级程序设计（第四版）》精读（五）第5章 ", "desc": "第五章：基本引用类型，这一章的API超级多，很有必要好好记记，这也是第二次整理这些API，有很多奇奇怪怪的API"}, {"id": "7006237590365929508", "title": "了解数据类型的检测的检测机制", "desc": "数据类型检测的方法 typeOf instanceOf constructor Object.Prototype.toString.call([value]) typeOf typeOf(value)"}, {"id": "6844903958545170446", "title": "TypeScript安利指南", "desc": "据了解，目前有相当一部分同学不想去学习ts，毕竟没(xue)时(bu)间(dong)。很不幸两个月前我也是其中的一员。在看到尤大大都用ts写vue3了，蠢蠢欲动的我小心翼翼的踏入了这个深坑。在经历了长达一天的摸爬滚打之后，领悟到了真谛 经过了一段时间的理解之后，写了这篇文章，旨…"}, {"id": "7001421619025428493", "title": "关于前端中常用的js设计模式", "desc": "策略模式 定义 : 要实现某一个功能，有多种方案可以选择。我们定义策略，把它们一个个封装起来，并且使它们可以相互转换。 我们已经写完了策略，接下来要做的就是验证了~ 此时，某同学需要进行权限验证的条件"}, {"id": "7005970915741679647", "title": "手写实现 reduce 方法", "desc": "要求： 1. 需要放到原型上 Array.prototype.MyReduce() 2. 调用形式 arr.reduce(callback[accumulator, currentValue, cur"}, {"id": "7005554200289493029", "title": "LeetCode第18天🐱‍🏍", "desc": "5. 最长回文子串 给你一个字符串 s，找到 s 中最长的回文子串。 1 <= s.length <= 1000 s 仅由数字和英文字母（大写和/或小写）组成"}, {"id": "6844903986210816013", "title": "记一次大厂的面试过程", "desc": "2019年6月中旬，实在厌倦了之前平平淡淡的工作和毫不起眼的薪资，不顾亲人的反对，毅然决然地决定只身前往沿海城市，想着找到一份更加具有挑战性的工作，来彻彻底底地重新打磨自己，同时去追求更好的薪资待遇。当然在此之前，自己每天下班后都会利用业余时间抓紧复习巩固刷题等等，大概从3月份…"}, {"id": "6973860302018805797", "title": "就这几个小操作，我把项目性能优化了几十倍！", "desc": "其实性能优化还存在很多可以玩的地方，今天笔者就来聊一些大家不常关注的地方，从开发到 CI 的构建阶段以及最后部署上线这几个链路。"}, {"id": "6994632915648774152", "title": "彻底搞懂JS原型、原型链和继承", "desc": "这是我参与 8 月更文挑战的第 1 天，活动详情查看： 8月更文挑战 在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对象，这"}, {"id": "7000610442695426079", "title": "深入理解 Node.js  Buffer 的 encoding", "desc": "计算机最小的单位是一个位，也就是 0 和 1，在硬件上通过高低电平来对应。但是只有一位表示的信息太少了，所以又规定了 8 个位为一个字节，之后数字、字符串等各种信息都是基于字节来存储的。 字符怎么存储"}, {"id": "6993479920705880095", "title": "【神来之笔】原生 JavaScript 手写数组 API", "desc": "本文将会先了解数组 API 的用法再模拟实现这些 API ，如果各位大佬觉得有什么不对的地方麻烦指点以下！ 1. forEach 方法 这个"}, {"id": "6844904185838698503", "title": "让人眼前一亮的 10 大 TS 项目", "desc": "TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECM…"}, {"id": "6998293153824391182", "title": "🌈【深扒】深入理解 JavaScript 中的异步编程", "desc": "引言 我们先引出一个非常常见的场景：对服务器端返回的数据进行操作 与服务器端交互的过程是一个异步操作 如果按照正常的代码编写的话，你可能会"}, {"id": "6929302655118344200", "title": "可视化拖拽组件库一些技术要点原理分析（三）", "desc": "虽然我这个可视化拖拽组件库只是一个 DEMO，但对比了一下市面上的一些现成产品（例如 processon、墨刀），就基础功能来说，我这个 DEMO 实现了绝大部分的功能。 如果你对于低代码平台有兴趣，但又不了解的话。强烈建议将我的三篇文章结合项目源码一起阅读，相信对你的收获绝对…"}, {"id": "6918902650964557838", "title": "这些 JS 中强大的操作符，总有几个你没听说过", "desc": "JS 里的操作符大家每天都在使用，还有一些 ES2020、ES2021 新加的实用操作符，这些共同构成了 JS 灵活的语法生态。本文除介绍常用的操作符之外，还会介绍 JS 里一些不常用但是很强大的操作符，下面我们一起来看看吧～ 1. 数值分割符 _ ES2021 引入了数值分割…"}, {"id": "7006484266406117407", "title": "JavaScript中的继承方式", "desc": "对象是一组属性的无序集合，继承可以让对象的产生有迹可循，有类可分。（原型链、盗用构造函数、组合继承、原型式继承、寄生式继承和寄生式组合继承）"}, {"id": "7004758247831928839", "title": "🚁一起来封装脚手架吧！[第5天：NPM包的发布]", "desc": "👽 概论 脚手架开发完成之后，当然得发布到NPM上啊（不要问我为什么）。今天我们就来着重讲讲如何发布包至NPM（在这块之前会为脚手架增加两个小功能：远程仓库创建 + 依赖下载，不感兴趣的可以直接跳到发"}, {"id": "6844904084927938567", "title": "带你深度解锁Webpack系列(进阶篇)", "desc": "三篇长文，带你解锁 Webpack ，希望读完这三篇文章，你能够对 webpack 的各项配置有一个更为清晰的认识。 本文是第二篇，如果你还没有阅读《带你深度解锁Webpack系列(基础篇)》，建议阅读之后，再继续阅读本文。 本文会引入更多的 webpack 配置，如果文中有任…"}, {"id": "6844904178544820237", "title": "这个前端竟然用动态规划写瀑布流布局？给我打死他！", "desc": "瀑布流布局是前端领域中一个很常见的需求，由于图片的高度是不一致的，所以在多列布局中默认布局下很难获得满意的排列。 我们的需求是，图片高度不规律的情况下，在两列布局中，让左右两侧的图片总高度尽可能的接近，这样的布局会非常的美观。 注意，本文的目的仅仅是讨论算法在前端中能如何运用，…"}, {"id": "6999858955987992606", "title": "谈谈JavaScript中函数的作用域和预解析", "desc": "大家好哇，今天我们来谈谈JavaScript中函数的作用域的概念，对于非科班出身的小伙伴而言，这其中的概念还是很容易被搞混的，所以今天我们就来好好谈一下这个问题。"}, {"id": "6994016585375547429", "title": "js类型转换", "desc": "这是我参与8月更文挑战的第二天，活动详情查看：8月更文挑战 前言 如果对js的类型做简化，可以分为两种类型，分别是引用类型和值类型，Object和Function是引用类型，其他是值类型。 正文 从值"}, {"id": "6998804921298452511", "title": "【Promise】入门-同步回调-异步回调-JS中的异常error处理-Promis的理解和使用-基本使用-链式调用-七个关键问题", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 今天学习Promise，是之前看B站视频的一个笔记加拓展，末尾有链接"}, {"id": "6992830682124779533", "title": "一文搞懂JS系列（十）之彻底搞懂this指向", "desc": "通过JS数据存储方式，来了解this指向的设计初衷，了解判断this指向的方法，通过六道真题，彻底搞懂this指向，以后看到this，再也不怕啦！"}, {"id": "6844904085603221518", "title": "滚动导航+吸顶合并方案（含sticky详解）", "desc": "这是一个老套的需求，jq时代就很流行的交互需求。网络上也有不少资料，我这里写这篇文章的目的更主要是针对这些资料的不足，解决一些问题： 吸顶和滚动导航的资料都是独立的，二者作为独立功能独立分析。我这里要把吸顶功能作为滚动导航的一个功能之一，作为一整套方案来分析。 吸顶和滚动导航的…"}, {"id": "6844903687819640845", "title": "8102年如何写一个现代的JavaScript库", "desc": "理想很丰满，现实很。。。，如何才能够让开发者和使用者都能够开心呢，jslib-base通过babel+rollup提供了解决方案"}, {"id": "7001264304771039246", "title": "js实现全屏", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 前言 全屏API可以控制浏览器的全屏显示，让一个Element节点（以及子节点）占满用户的整个屏幕。目前各大浏览器的最新版本都支持这个AP"}, {"id": "7000768322476179486", "title": "基于对象编程的JavaScript-字符串对象", "desc": "这是我参与 8 月更文挑战的第 25 天，活动详情查看：8 月更文挑战 前文我们学习了关于 JavaScript 中的 布尔(boolean)类型` 今天来学习 JavaScript 中的 字符串对象"}, {"id": "6844904121162579982", "title": "全网最详bpmn.js教材-Color篇", "desc": "bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成. 因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找…"}, {"id": "6844903863049256974", "title": "JavaScript 的简洁之道", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 如果你关注代码本身和代码的编写方式，而不是只关心它是否能工作，那么你写代码是有一定的水准。专业开发人员将为未来的自己和“其他人”编写代码，而不仅仅只编写当前能工作就行的代码。 在此基础上，简洁代码可以定义为自解…"}, {"id": "6844903604009041928", "title": "你真的完全掌握了promise么？", "desc": "最近在整理js中异步编程方法时，回顾了一下promise，又发现了一些遗漏的重要知识点，比如promise.resolve()传递不同参数的含义？比如当一个promise依赖另一个promise时事件执行顺序？比如当catch捕获到了错误后，会不会继续执行后面的then方法？下…"}, {"id": "6844903970469576718", "title": "前端组件/库打包利器rollup使用与配置实战", "desc": "目前主流的前端框架vue和react都采用rollup来打包，为了探索rollup的奥妙，接下来就让我们一步步来探索，并基于rollup搭建一个库打包脚手架，来发布自己的库和组件。 写rollup的文章是因为笔者最近要规范前端开发的业务流程和架构，并提供内部公有组件库和工具库供…"}, {"id": "6987316014761377799", "title": "一文吃透 JavaScript 中 Object 和 Map 的区别", "desc": "在 JavaScript 中，Object 和 Map 都是键值对的动态集合。虽然两者的定义差不多，但区别也不少。快跟我一起来看看吧～"}, {"id": "6858276396968951822", "title": "受控和非受控组件真的那么难理解吗？(React实际案例详解)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆。 最近都没怎么输出了😂，不是停更通知就是\"软文\"，还是有点不好意思的。问题不大，我道(皮)谦(厚)咯😄。 所以今天咱再来聊点技术相关的东西吧，也就是本篇的标题——受控和非受控组件。 写这篇文章的原因是呆呆在写HOC…"}, {"id": "6844904049855168526", "title": "【canvas】动画原理の万有引力定律", "desc": "中心红色球是太阳，水蓝色小球是地球。可以看出地球的运行轨道是椭圆，验证了开普勒三定律的第一条。在近日点运行速度比较快，远日点比较慢，符合常识。 不到半个小时吧，其实掌握原理后实现起来还是比较快的。 原理相对来说还是简单的，前提是要使用向量工具。 1. 用向量来思考问题 本系列的…"}, {"id": "6991646908460564516", "title": "送给正在找工作的你，RegExp 不完全指北｜8月更文挑战", "desc": "RegExp不论是前端还是后端的开发同学都是会使用到。一个好的RegExp能帮你在日常的开发中，提升开发效率。在某些厂的面试中，可能也会遇到关于RegExp的相关问题。"}, {"id": "6993524642459680798", "title": "console也能玩出新花样，效果nice！！", "desc": "快来给你的控制台上色吧，本文主要介绍console实用的小技巧，再也不要从始至终的console.log()了，快来体验吧"}, {"id": "6993936498374475806", "title": "TypeScript的变量声明", "desc": "let和const是JavaScript里相对较新的变量声明方式 。 像我们之前提到过的, let在很多方面与var是相似的，但......"}, {"id": "6844904183661854727", "title": "《你不知道的 Blob》番外篇", "desc": "Blob（Binary Large Object）表示二进制类型的大对象，通常是影像、声音或多媒体文件。MySql/Oracle数据库中，就有一种Blob类型，专门存放二进制数据。在 JavaScript 中 Blob 对象表示一个不可变、原始数据的类文件对象，它不一定非得是大…"}, {"id": "6917483898582597639", "title": "基于 Vue 3.x 的 Form render", "desc": "我们在写一些常规后台页面的时候，避免不了是需要经常和表单打交道。所以可以想偷懒的小伙伴可能会考虑有没有办法不去做表单工程师?用代码解决重复的人肉工作，没错，我们可以通过 JSON Schema 来描述我们的表单信息，这比重复的写表单控件可方便多了。 但是 JSON Schema…"}, {"id": "7003221166475182094", "title": "回流 重绘", "desc": "先谈两点 回流必将引起重绘，重绘不一定会引起回回流; 回流的代价要远大于重绘； 回流 会导致回流的操作： 页面首次渲染。 浏览器窗口大小发生改变。 元素尺寸或者位置发生改变。 元素内容变化(文字数量或"}, {"id": "6992194951492665374", "title": "Vue 3 基础", "desc": "这是我在学习 Vue 3 时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "6844904155316748301", "title": "让小球做圆周运动，你有几种办法？", "desc": "最近在阅读外国技术文章中无意中发现了一个神奇的CSS属性motion-path，它可以让Dom元素可以按照自定义的路径移动。 又想起了很久之前参加校招面试的时候，面试官问了我一个问题“能不能不借助库实现小球在浏览器中做圆周运动？”，于是就整理了一下让小球圆周运动的方法（纯属无聊…"}, {"id": "6996860046135001096", "title": "个人常用JS方法总结", "desc": "在项目开发过程中，经常涉及对字符串或者数组的操作。本文对项目中经常用的js方法做下总结，方便再次遇到时能够快速查阅。"}, {"id": "6900850431535087630", "title": "柯里化在异步编程的应用", "desc": "js 中函数作为一等公民,函数执行中既可以作为函数的参数也可以作为函数的返回值,而这类执行函数叫做高阶函数,利用高阶函数的特性很容易就可以实现柯里化(柯里化(Currying)是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返…"}, {"id": "6844903863074422792", "title": "彻底弄懂文件和二进制数据的操作", "desc": "Blob Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。 要从其他非blob对象和数据构造一个Blob，请使用 Blob()…"}, {"id": "6997574684191490084", "title": "继承与原型链", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 1. 原型对象链 这就是原型继承链：对象继承其原型对象，而原型对象继承它的原型对象，以此类推。 2. 对象继承 我们可以用这个方法来实现对象"}, {"id": "6907508050392219662", "title": "GSAP3 初体验", "desc": "GSAP 全称为 GreenSock Animation Platform，是 GreenSock 提供的一个制作动画的成熟的JavaScript库。 TweenLite：是 GSAP 的主体核心。 TweenMax：是 GSAP 集合包，包含其他的三个模块。 Timeline…"}, {"id": "6965769620116471816", "title": "闭包从混乱到清晰学习小结", "desc": "最近学习了 You-Dont-Know-JS 的文档，对一直在学习但从未理解、学会的闭包有了恍然大悟式的理解，下面是整理的学习小结。 相关概念：作用域、词法作用域、函数作用域、作用域链 闭包与this"}, {"id": "6969748155604828174", "title": "js原型与原型链了解一下", "desc": "最近这一两年一直沉浸于使用框架，各种轮子来开发项目。小到时间类型转化，大到界面UI，富文本组件等都能找到符合需求，容易上手的轮子来实现。使用现成的轮子可以极大的提高开发的效率，同时也可以减少bug的出"}, {"id": "6844903703921557518", "title": "使用HTML5 IndexDB存储图像和文件", "desc": "有一天，我们写了关于如何在localStorage中保存图像和文件的文章，它是关于我们今天可用的实用主义。 然而，localStorage有一些性能影响 - 我们将在稍后的博客中讨论这个问题 - 并且未来期望的方法是使用IndexedDB。 在这里，我将向您介绍如何在Index…"}, {"id": "6961183406868660261", "title": "[重读JS红宝书]三、原始值、引用值与深浅拷贝", "desc": "重读JavaScript高级程序设计，反向碾压面试官？第四章内容讲的是变量和作用域，既是做业务时踩过的坑，又是面试时被问到过的关键，还是得详读一遍！"}, {"id": "6955395562061430791", "title": "JavaScripts基础（7）数组去重", "desc": "数组去重 方法一 依次拿出数组中的每一项（排除最后一项：最后一项后面没有需要比较的内容） 和当前拿出项后面的每一项依次比较 如果发现有重复的，我们把找到的这个重复项在原数组中删除掉（splice） i"}, {"id": "6844903721491496968", "title": "五分钟学会一个高难度算法：希尔排序", "desc": "由于LeetCode上的算法题很多涉及到一些基础的数据结构，为了更好的理解后续更新的一些复杂题目的动画，推出一个新系列 -----《图解数据结构》，主要使用动画来描述常见的数据结构和算法。本系列包括十大排序、堆、队列、树、并查集、图等等大概几十篇。 希尔排序，也称递减增量排序算…"}, {"id": "6991491844521918471", "title": "javascript版数据结构之队列（附：leetCode 933）", "desc": "1、概念   队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，"}, {"id": "6844904175453618190", "title": "面试系列——JavaScript基础篇", "desc": "作用域链：JavaScript引擎在寻找一个变量名的时候，会在当前作用域进行查找，如果没有，就会继续往外层作用域进行查找，直到全局作用域为止，这就形成了一个作用域链。 this的指向，是在执行上下文被创建的时候，被确定的。 Promise：是一个类，通过new来进行声明。 它采…"}, {"id": "6857704159383617543", "title": "快来和fetch玩耍吧", "desc": "fetch 是一种使用 promise 为构建块的现代异步网络请求方法.是当今进行异步网络请求的新标准.除了IE之外,在各大浏览器中的兼容性都还可以,在caniuse上查询fetch的浏览器兼容性,不支持的浏览器可以使用 fetch polyfill.其本质是一种标准,该标准定…"}, {"id": "6968281320229175333", "title": "最全 ECMAScript 攻略之 ES2016-ES7", "desc": "Array.prototype.includes 背景原因: 以前只能通过indexOf 来判断，比如 这样的方式存在以下问题 当我们想要知道数组中是否存在某个指定元素，indexOf无法准确表达我们"}, {"id": "6949945288479997966", "title": "手写js-实现快速排序(sort)", "desc": "前言：快速排序是一种很高效的排序方法，在很多大厂面试题中都是“熟人”，它其中用了一种高效的方法-----分治法。"}, {"id": "6844903557859115021", "title": "Vue中render函数的使用", "desc": "vue通过 template 来创建你的 HTML。但是，在特殊情况下，这种写死的模式无法满足需求，必须需要js的编程能力。此时，需要用render来创建HTML。 在一次封装一套通用按钮组件的工作中，按钮有四个样式(default success error )。首先，你可能…"}, {"id": "6844903518000644109", "title": "浅谈 Fetch", "desc": "这样子使用XHR进行异步访问、读取资源显得很繁琐，相对比Fetch()允许你创建类似XHR的network访问，但是使用更简单而且干净的API，不需要多次回调并且记住XHR复杂的API。Fetch API底层是通过Promises实现。 Fetch的语法更加语义化、比较好理解。…"}, {"id": "6844903981957791757", "title": "手把手带你实现一个最精简的响应式系统来学习Vue的data、computed、watch源码", "desc": "记得初学Vue源码的时候，在defineReactive、Observer、Dep、Watcher等等内部设计源码之间跳来跳去，发现再也绕不出来了。Vue发展了很久，很多fix和feature的增加让内部源码越来越庞大，太多的边界情况和优化设计掩盖了原本精简的代码设计，让新手阅…"}, {"id": "6998447641549864967", "title": "RESTful原则", "desc": "RESTful 六大原则 1. C-S 架构 数据的存储在Server端，Client端只需使用就行。两端彻底分离的好处使client端代码的可移植性变强，Server端的拓展性变强。两端单独开发，互"}, {"id": "6993154876708487204", "title": "JavaScript温故而知新 - ==和===的区别", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 等于操作符 等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 true 遵循以下规则： 如果任一操作数是布尔值，则将其转换为"}, {"id": "6986570748387131428", "title": "来看看 新出的前端之《进阶不完全指南》专栏是干嘛的", "desc": "背景 本篇收录于《进阶不完全指南》专栏 按照以往的系列文章的惯例, 第一篇一般是一个背景介绍和大纲提炼。本系列照旧(写作能力在这 没办法。) 首先 表达下我的写作目的: 分享给我的组员和朋友,把答应人"}, {"id": "6997445260632653861", "title": "一个最简单的扁平数组与树形结构相互转换的算法", "desc": "数组与结构 扁平数组 树形结构 转换算法 「扁平数组」转「树形结构」 「树形结构」转「扁平数组」~~~"}, {"id": "6844903955286196237", "title": "【THE LAST TIME】彻底吃透 JavaScript 执行机制", "desc": "【THE LAST TIME】一直是我想写的一个系列，旨在厚积薄发，重温前端。 也是给自己的查缺补漏和技术分享。 欢迎大家多多评论指点吐槽。 首先我们需要声明下，JavaScript 的执行和运行是两个不同概念的，执行，一般依赖于环境，比如 node、浏览器、Ringo 等， …"}, {"id": "7001882311167836191", "title": "异步 JavaScript 之 async...await", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 前文我们学习了关于 JavaScript 中的 基于对象编程的JavaScript 函数-递归` 今天来学习 异步函数 关键字 async"}, {"id": "6854573210038435847", "title": "NodeJS+3D酷炫动画玩转纯手工打造个人博客，不用博客框架", "desc": "写博客，可以将你学的七零八碎的知识点整合到一起，形成完整的个人笔记。这份笔记，记录了你囫囵吞枣的内容，也记录了你从理论到实践的历程。如果有一天，你想回顾这些知识点，对照着曾经记录的笔记，会起到事半功倍的效果。 你还要把笔记分享出来，因为有人监督与无人监督的效果大相径庭。如果是自…"}, {"id": "6947894860284166151", "title": "眼里要有光！分享一些我收藏夹里的链接", "desc": "收到了大家的催更，深表歉意。最近工作十分忙碌，连午睡时间也牺牲给了来面试的同学，放假休息了两天给身体充满了电。 这就来给大家分享一些最近的感悟，虽然没时间更新原创，不过利用上下班的路上看完了一本书。 每周最低阅读 3 小时的习惯从去年就开始了，把这些独处的碎片化时间利用起来，收…"}, {"id": "6971059784763637767", "title": "gatsby入门指南", "desc": "gatsby是一个基于React的静态站点生成器，允许通过React开发应用，当应用开发完成后他会将react应用转换成静态的html应用。 官网: https://www.gatsbyjs.org/"}, {"id": "7004645715519488008", "title": "JavaScript ES(6-11)全版本语法 (五)：Object", "desc": "上一篇编写的是ES6中的Function，链接：https://juejin.cn/post/7002056706873688078 ，这次写的是ES6中Object的一些API和部分应用场景。"}, {"id": "7000692870499794958", "title": "HTML的拖拽事件", "desc": "写这一片文章的主要目的是因为项目最近做可视化的过程中，使用了拖拽操作，根据自己使用及查看资料学习写了这篇文章，希望对大家学习或者复习有所帮助。 可拖拽属性draggable 在一个网页中， 存在集中特"}, {"id": "6844903921412997127", "title": "前端代码规范 — JavaScript 风格指南", "desc": "本文基于 github 项目 airbnb/javascript 翻译，也加入了一些个人理解。规范有利于我们更好的提高代码可读性，避免一些不必要的 bug。但是，并没有统一的标准和硬性要求，这里只是给大家提供一些参考，适合团队和自己的才是最好的。 2.1 所有的赋值都用cons…"}, {"id": "6986543907689463822", "title": "如何搭建一个简易的 Web Terminal（一）", "desc": "本篇文章取名如何搭建一个简易的 Web Terminal，主要还是会围绕这个主题，结合哆啦 A 梦去进行述说，逐步衍生出涉及到的点，笔者思考的一些点。"}, {"id": "6844903938290876430", "title": "手写算法并记住它：快速排序（5行代码简单版）", "desc": "本系列文章就尝试解决这个问题。 研读那些排序算法，细品它们的名字，其实都很贴切。 比如快速排序，一个快字就能体现出其价值，因而它是用得最多的。 因为它相对难一些，本系列将分两篇文章讲解它。 本篇是一种简单实现版本，与归并排序做对比，摸清快排的总体思路。下一篇才是常见于各教程中的…"}, {"id": "7006846273198227487", "title": "原生JS的懒加载实现", "desc": "在一个网站含有大量的图片，我们在进入一个页面的时候如果一下子全部加载完毕，就会造成很大的资源浪费，而懒加载就是用户浏览到哪里，就加载哪里的图片，这样就可以减少资源的浪费了。 1.懒加载的实现原理 一个"}, {"id": "7001180614049136670", "title": "娱乐-JS怎么算0.1+0.2？", "desc": "打开控制台输入 `0.1 + 0.2` 得到 `0.30000000000000004` 为什么会这样，问题很大！"}, {"id": "6996657454394114062", "title": "JavaScript 系列之继承（三）", "desc": "[JavaScript 系列之继承｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "7003229551987785736", "title": "两道简单的算法题：算出两个集合的补集和计算出⼀个数组内的所有波峰和波⾕", "desc": "算出两个集合的补集 说明：补集：如果 b 是 a 的⼦集，返回存在于 a 不存在于 b 的元素集合，反之返回空集合 思路 因为数组只包含字符串和数字，所以不用考虑对象、数组的情况。分别求相对于另一个数"}, {"id": "7000938627798663175", "title": "知其然，知其所以然，前端系列之javascript(一)", "desc": "整理这份js知识体系的起因是受神三元灵魂之问系列的启发 虽然每天都在写代码，自己写的到底是什么，很多概念听着好像很熟悉，但是又说不出所以然来。为了弄清楚这些困惑在自己心中的问题，所以开始了这份知识体系"}, {"id": "6895192200179777543", "title": "重绘 和 回流， 以及如何优化", "desc": "重绘和回流是老生常谈的问题了，也是面试中经常能被问到的一个问题，小到页面中某一个dom元素样式发生改变，到输入url到浏览器中页面的展现，都离不开它们，今天也就聊一聊它们，顺带巩固一下自己的知识。 当浏览器进程把请求到的响应体数据交给渲染进程，通过解析HTML生成DOM树，解析…"}, {"id": "6883309788906651655", "title": "FontCut-Chrome 字体裁剪插件", "desc": "本文介绍了前端使用字体的一些问题，并介绍了一个基于opentype.js实现的Chrome字体裁剪插件，能够实时预览字体，裁剪并导出otf和woff格式的字体子集。为什么要截取字体？相对于英文字体，中"}, {"id": "6992879110229852191", "title": "数据类型判断方法", "desc": "数据类型应该是最基础的问题了，想了解详细的知识可以去补一补数据结构，不过，在面试中往往被一笔带过简单提几句，每个问题多思考发现需要补充的知识还有很多"}, {"id": "6922615053120339982", "title": "基于Topology构建报表看板和列表查询界面", "desc": "在前面几篇文章中, 我们已经完成了组件的绘制以及事件的交互, 那么本篇文章就带着大家使用这个工具构建一个报表看板界面和一个表格查询界面。 从我们的组件库中拖取两个标签、两个输入框、一个按钮、一个图表控件, 并且按照合适的位置摆放好。 我们这里使用外部公开的API, 进行配置。 …"}, {"id": "6956376456364556325", "title": "10 分钟掌握浏览器运行 JS 的顺序", "desc": "前言 不知道你有没有遇到过类似这样的问题，某些代码乱序执行或样式的更改后不生效？你是不是曾经把代码包在 setTimeout 里面来解决类似的问题？是不是这种方式不太可靠？然后你就不断调试…"}, {"id": "6865490815846875150", "title": "rc-redux-model 让你使用redux更简单", "desc": "相信大家都了解 redux，并且也认同这种数据流的方式（毕竟不认同，你也不会用嘛~），然，世间万物，皆有利弊。 本身我使用 redux 并不会有什么所谓的“痛点”，因为 redux 默认只支持同步操作，让使用者自行选择处理异步，对于异步请求 redux 是无能为力的。可以这么说…"}, {"id": "6844903512090886157", "title": "Vue响应式----数据响应式原理", "desc": "Vue的数据响应主要是依赖了Object.defineProperty()，那么整个过程是怎么样的呢？以我们自己的想法来走Vue的道路，其实也就是以Vue的原理为终点，我们来逆推一下实现过程。 例如const obj = {},然后再调用defineReactive(obj,'…"}, {"id": "6844903615212027917", "title": "babel-runtime使用与性能优化", "desc": "本文主要内容包括：什么是babel-runtime、如何使用、使用场景与限制、如何结合babel-polyfill进行性能优化。 本文所有例子可以在 笔者的github 找到。"}, {"id": "6972745647057272839", "title": "JS 对象浅拷贝与深拷贝", "desc": "文章整理自我的个人博客文章：每日 Web 前端面试题（2021.05） 浅拷贝 浅拷贝后的对象的属性如果是引用类型，它仍旧指向源对象的同名属性。修改浅拷贝对象的引用类型下的属性，源对象也会被修改。实现"}, {"id": "6867784542338416648", "title": "「javaScript 」从地基开始打造一座万丈高楼", "desc": "其实上面是我最开始设定的目标, 只不过写到后来发现要写太多了， 同样也发现自己要学的也太多了。算了下自己从踏入前端到现在将近一年半的时间了，这一路上可以说是勤勤恳恳。还记得当时没出来工作的时候我在前端群里问了句，毕业生刚出来能拿到10k的薪资嘛(那时候刚入门前端受各大机构招生老…"}, {"id": "6999272641802698782", "title": "异步解决方案async await", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 ! 浅谈async await异步解决方案"}, {"id": "6844903640444960781", "title": "优雅配置vue项目，webpack 4.x + Vue模仿vue-cli配置 (一)", "desc": "url-loader对未设置或者小于limit设置的图片进行转换，以base64的格式被img的src所使用；而对于大于limit byte的图片用file-loader进行解析。 minify 使用minify会对生成的html文件进行压缩。默认是false cache 默认…"}, {"id": "6989991599631499294", "title": "我发现了vue的一个bug", "desc": "事情得从同事的一行代码说起，如果严格按官方文档为准，我觉得写错了，因为参数不对，但是这种错误写法没有报错，而且执行似乎成功了。于是，我开始了一系列的溯源分析，最后终于找到终极奥义。整个过程收获良多！"}, {"id": "6844903551332777992", "title": "让繁琐的 if else 逼格高一点点", "desc": "当前浏览器不支持播放音乐或语音，请在微信或其他浏览器中播放暧昧王菲 - Di-Dar在提升自己技术水平每个人可能有不同的方式看别人好的代码和自己多写代码是一个比较好的选择。作为一个技术类的公众号接下来"}, {"id": "6844903861925199886", "title": "前端进阶之setTimeout 倒计时为什么会出现误差？", "desc": "讲到线程，那么肯定也得说一下进程。其实在本质上，两个名词都是 CPU 工作时间片的一个描述。 进程(process) 指的是CPU 在 运行指令及加载和保存上下文所需的时间，放在应用上是指计算机中已运行的程序。 线程(thread) 是操作系统能够进行运算的最小单位。它被包含在…"}, {"id": "6986819015461044260", "title": "Javascript原型，原型链，继承", "desc": "Javascript原型，原型链，继承 原型和原型链是JavaScript中非常重要的知识点，理解原型首先要从JavaScript的对象入手，本文将逐步深入的讲解原型和原型链。 创建对象 工厂模式 工"}, {"id": "6982064954266353694", "title": "简单四步学会在数字孪生可视化场景中创建小地图！", "desc": "众所周知，小地图在游戏中是至关重要的，小地图用于显示周围环境信息。在数字孪生可视化场景中小地图也是经常应用于场景中的，用来显示地图或者当前场景的视角。首先，小地图是以主角为中心的。其次，小地图上应该用"}, {"id": "6938699886875377671", "title": "2021 我的前端王者之路的计划", "desc": "看node文档或者github 搜索node基本模块的介绍的文章， 不要往下学express koa egg mysql mongodb 等，除非你有足够的精力和时间，可以让你了解一门语言前后端都做的感觉。 为什么用这个技术而不用那个技术，优缺点，正所谓知己知彼才可以更好的做技…"}, {"id": "6949018514308988958", "title": "啊4000字！面试理不透的原型知识汇总？还有拓展！", "desc": "一谈JS，离不开的就是对原型和原型链知识的理解了，当我粗略看了一遍《javascript高级程序设计》后，我想我也大概是理解了吧，然后看了许多网上相关文章，WTF？？？好像懂了又好像没懂，这说并不是各位大佬的文章写的不好，而是知识只有用自己的语言，自己的思想进行总结才更有利于接…"}, {"id": "6844904180918779918", "title": "Web安全之CSRF实例解析", "desc": "之前写过一篇 web安全之XSS实例解析，是通过举的几个简单例子讲解的，同样通过简单得例子来理解和学习CSRF，有小伙伴问实际开发中有没有遇到过XSS和CSRF，答案是有遇到过，不过被测试同学发现了，还有安全扫描发现了可能的问题，这两篇文章就是简化了一下当时实际遇到的问题。 跨…"}, {"id": "6844903635072057357", "title": "webpack心得总结", "desc": "我对学习webpack的起因很简单，因为它够潮，而我恰恰喜欢潮的东西。我之前也了解过webpack，但是仅仅是局限于他的使用方法，能够看懂他的配置文件。而我这次对他的用处有了更深的了解。 首先从es6说起吧，浏览器对es6的支持度并不高。仅仅实现了其中的一部分而已，但是es6的…"}, {"id": "6993298900559855630", "title": "JavaScript知识点回顾（六）——操作符（一）", "desc": "操作符包括数学操作符（加减乘除）、位操作符、关系操作符等等。操作符可以用于各种数据类型，如字符串、数值、布尔值等，也可以用于对象。"}, {"id": "6968328546062172173", "title": "js是如何实现异步编程的？", "desc": "callback + promise + async/await + 用法 + 用法区别 + 性能区别"}, {"id": "6844904025511444493", "title": "JSBridge原理浅析与实践", "desc": "在字节跳动实习了一段时间，JSBridge使用的比较频繁，之前只是看了些简单的JSBridge概念，一直没有时间去了解从客户端到JavaScript的一个通信原理（JSBridge）。最近花了点时间学习了从Android端到JavaScript的通信-JSBridge（主要…"}, {"id": "6908910891173953550", "title": "教你js生成二维码-QrCodeJS", "desc": "二维码又称QR Code，是一个近几年来移动设备上很流行的一种编码方式它比传统的一维码（条形码）能存更多的信息，也能表示更多的数据类型。按照一定规律排列组成的几何图形构成，它巧妙地利用构成计算机内部逻辑基础的“0”、“1”比特流的概念 人们的生活方方面面都离不开二维码，而且她也…"}, {"id": "6844904071090929672", "title": "从源码看Babel是如何编译Async和Generator函数的", "desc": "我：。。。（怎么不按套路出牌？）"}, {"id": "6993577177870499847", "title": "学习classList写的小Demo", "desc": "Element.classList 是一个只读属性，返回一个 DOMTokenList，其中包含元素所有现有的 class 属性。 使用 classList 要比 element.className "}, {"id": "6979599192691834888", "title": "前端跨域请求方案整理", "desc": "跨域请求，是前端开发比较常见的问题。通常为了提高的开发效率，项目开发过程中进行前后端分离，各自独立部署，就可能会出现前后端域名不一致，在通讯过程中就会出现跨域的问题"}, {"id": "6921872970574987272", "title": "0 == \"\\n\" 为 true ? JS 等于判断中的那些坑", "desc": "但这不够准确，== 和 === 都会检查操作数的类型。区别在于操作数类型不同时它们的处理方式不同。 如果非要对 == 两边的值进行对比，以下两个原则可以有效地避免出错。 如果两边的值中有 true 或者 false，千万不要使用 ==。 如果两边的值中有 []、\"\" 或者 0，…"}, {"id": "6899326495819300877", "title": "值得收藏的前端开发必备工具类函数", "desc": "乘着空闲，整理一些平常项目开发中经常用到的工具类函数。每个都是亲测有效的，开箱即用。"}, {"id": "6996263903097421854", "title": "ES6 对象的拷贝", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 JavaScript 中，怎么拷贝对象呢？ES5 中的做法是把对象遍历一下，把数据逐项拷贝到目标对象中去；ES6 则提供了一个新的 API"}, {"id": "6965826710923116574", "title": "【js常见效果系列】纯原生html+css+js实现简单的图片放大镜功能", "desc": "在淘宝、京东的产品主图中随处可见鼠标移入到图片上去时显示放大的图片，采用了原生的html+css+ js实现了简单的图片放大。"}, {"id": "6844903541400698887", "title": "vue-cli解析", "desc": "这篇文章的主题是vue-cli的理解。或许，很多人在开发vue的时候，我们会发现一个问题——只会去用，而不明白它的里面的东西。现在的框架可以说是足够的优秀，让开发者不用为搭建开发环境而烦恼。但是有时候，我们还是得回到原始生活体验一下，才能够让自己更上层楼，希望大家共勉。如果你喜…"}, {"id": "6844903600720707591", "title": "vue项目可以从哪些方面进行优化", "desc": "js文件一般是同步加载的，放在页面内会阻塞主要js文件加载。 使用场景：有的项目必须引入jquery等文件时，在组件内部引入这些文件一定程度会阻塞页面渲染，因而通过特定事件（点击或者弹窗）动态加载jquery等JS文件，可以使主页面快速显示出来。 当页面展示的版块是固定的时候且…"}, {"id": "6924512805135581197", "title": "如何让 JavaScript 中的循环慢下来", "desc": "For 循环在 JavaScript 中是必不可少的。使用 For 循环，我们可以写出与列表有关的程序。但是这里存在一个问题 —— For 循环是尽可能快地执行。当然如果我们只是用它来遍历数组那绝对是没有问题的。 但是如果我们在循环中执行请求，那就可能会出现一些问题（例如过高的…"}, {"id": "6844903654357467144", "title": "堆栈的应用——用JavaScript描述数据结构", "desc": "基于堆栈的特性，可以用数组做线性表进行存储。 接下来，就是在原型上，对入栈、出栈、清空栈、读取栈顶、读取整个栈数据这几个接口的实现。 Stack类默认以数组头部做栈底，尾部做栈顶。 入栈可以利用js数组的push方法，在数组尾部压入数据。 出栈同样是利用js数组的pop方法，在…"}, {"id": "6987023815117111310", "title": "原型链的冷知识，看一遍就会了~", "desc": "当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的__proto__隐式原型上查找，即它的构造函数的prototype，如果还没有找到就会再在构造函数的prototyp"}, {"id": "6987022323593248775", "title": "Observable与Promise的对比", "desc": "Observable 是 Rxjs 库里异步编程核心的一部分，而目前在ES6及之后主要使用的则是基于Promise流的异步事件，相比于 Rxjs 又有那些区别呢"}, {"id": "6881474582633512967", "title": "手写bind和原生bind对比", "desc": "经常会看到网上各种手写bind的教程，推荐看一篇就够了 冴羽大佬——手写bind以及bind的Polyfill——MDN。下面是我在自己实现手写bind的过程中遇到的问题与思考。如果对于如何实现一个手写bind还有疑惑的话，那么可以先看看上面两篇文章。 我们可以看到相比原生bi…"}, {"id": "6844903622010994695", "title": "前端性能优化：细说JavaScript的加载与执行", "desc": "本文主要是从性能优化的角度来探讨JavaScript在加载与执行过程中的优化思路与实践方法，既是细说，文中在涉及原理性的地方，不免会多说几句，还望各位读者保持耐心，仔细理解，请相信，您的耐心付出一定会让您得到与之匹配的回报。 随着用户体验的日益重视，前端性能对用户体验的影响备受…"}, {"id": "6844904021451505677", "title": "JavaScript 引擎 V8 执行流程概述", "desc": "本文主要讲解的是V8的技术，是V8的入门篇，主要目的是了解V8的内部机制，希望对前端，快应用，浏览器，以及nodejs同学有些帮助。这里不涉及到如何编写优秀的前端，只是对JS内部引擎技术的讲解。 V8的名字来源于汽车的“V型8缸发动机”（V8发动机）。V8发动机主要是美国发展起…"}, {"id": "6954660728259215391", "title": "【Magic JavaScript】数据类型，你真的掌握了吗？", "desc": "【Magic JavaScript】数据类型是JavaScript中最基础的知识，我们来一起回顾一下数据类型的相关知识。"}, {"id": "6844903717414633486", "title": "彻底弄懂JS原型与继承", "desc": "本文由浅到深，循序渐进的将原型与继承的抽象概念形象化，且每个知识点都搭配相应的例子，尽可能的将其通俗化，而且本文最大的优点就是：长（为了更详细嘛）。 首先，我们先说说原型，但说到原型就得从函数说起，因为原型对象就是指函数所拥有的prototype属性(所以下文有时说原型，有时说…"}, {"id": "6844903685483397128", "title": "[译]JavaScript async / await：好处、坑和正确用法", "desc": "ES7通过介绍async/await使得JavaScript的异步编程实现了重大改进。它提供了一种使用同步代码样式异步访问resoruces的方式，而且不会阻塞主线程。然而，使用它有点棘手。在本文中，我们将从不同的角度探讨async/await，并将展示如何正确有效地使用它们。…"}, {"id": "6930169203869614094", "title": "前端学习-ES6新特性", "desc": "let可以通过新的关键字let定义块内部的变量let定义的变量在块级作用域内部能够被访问块级作用域作用域-某个成员能够起作用的范围全局作用域函数作用域块级作用域块，就是{}包裹起来的一个范围const"}, {"id": "6994416934431244295", "title": "javaScript中的防抖", "desc": "本文讲解一下js中防抖思想，有实现防抖的基本代码，可以复制到自己的编辑器看效果哦。也有实际的应用场景，会HTML、CSS、JQuery以及使用jQuery发送Ajax请求即可。"}, {"id": "6987963923236388900", "title": "图解JavaScript中的各种宽高和位置", "desc": "--- theme: github 图解JavaScript中的各种宽高和位置 offset系列 offsetHeight 和 offsetWidth 返回该元素的像素高度/宽度（整数），包含该元素的"}, {"id": "6844904000228163597", "title": "【进阶】前端幸福感是怎样炼成的（下）", "desc": "大家在工作中肯定会经常遇到重复的、或者功能类似的业务，一般的操作估计就是一顿cv，疯狂复制粘贴，完事。但是这种就是单纯的体力活，久而久之，就会觉得枯燥乏味，没新鲜感、成就感，慢慢就会对工作失去热情。 这种情况，简而言之，在多处地方出现的代码，能被copy来使用的，就要想一下是否…"}, {"id": "6844903773043687437", "title": "JS手写状态管理的实现", "desc": "当前的项目多数以组件化开发,状态管理库使得组件间状态管理变得非常方便。 1. 订阅发布模块 这个模块实际上是观察者模式,是一种一对多的依赖关系,当对象的某种状态发生改变,所有依赖它的对象都将得到通知,触发已经注册的事件. 2. 核心LibStore类 核心LibStore类需要…"}, {"id": "6979244918103343111", "title": "解读 rollup Plugin （二）--你最不想看的各种钩子函数", "desc": "rollup plugin 的实现 接上一篇解读 rollup Plugin （一） 当然，也不可能就这么简单啦~毕竟还要考虑实际复杂应用场"}, {"id": "6991433191202488357", "title": "js如何获取url参数值 ｜ 8月更文挑战", "desc": "JS如何获取页面跳转过程中的URL参数呢？本文主要介绍2种方法、避免重复造轮子、把时间花在更有价值的开发上。"}, {"id": "6966795162680819719", "title": "原型与原型链", "desc": "一直搞不懂真的头大 一.先去看下什么是构造函数 constructor是原型prototype的一个属性，当函数被定义时候，js引擎会为函数添加原型prototype，并且这个prototype中co"}, {"id": "6844903828492386317", "title": "三种方式实现平滑滚动页面到顶部的功能", "desc": "最近开发公司的公众号H5，做了一个点击icon滚动到顶部的功能。实现功能比较简单，直接调用window.scrollTo(0, 0)，一行代码完成。但是作为一个攻城狮，怎么可能对自己要求这么低，所以我给自己加了个需求，实现平滑滚动页面到顶部的功能。经过调研和查看文档，有了以下三…"}, {"id": "6844904041823240205", "title": "当你使用vue-cli时， 你有没有想过什么？一起来实现一个精简版吧", "desc": "最近在研究前端工程化的一些东西， 那就得有自己的一套脚手架， 于是瞄上了vue-cli， 也看了下create-react-app， 感觉vue-cli更符合我的预期， 于是撸了遍源码， 写了个小demo脚手架。 我们先了解下如何使用vue-cli， 再详细讲解每一步的实现。 …"}, {"id": "6918217514916937736", "title": "Javascript的深浅拷贝原来是这样的 | 七日打卡", "desc": "Javascript（下面简称JS）世界里将数据类型分为了两种：原始数据类型与引用数据类型。 现共有八种数据类型：String、Number、Boolean、Null、Undefined、Object、Symbol(ES6)、Bigint(ES10)。 原始数据类型：Strin…"}, {"id": "6844904205962969101", "title": "【经验】移动端滚动穿透", "desc": "当我们给中间的框加了一个固定的高度，但是中间内容超过了框的高度。我们试图滚动中间内容的时候就会出现以下的情况: 这样就能避免产生滚动穿透，但是这种方案存在一个问题，就是当页面超过一屏幕的时候并且页面已经滚动了一部分距离，这时候当我们打开弹窗的时候，页面就滚动到了顶部，关闭弹窗的…"}, {"id": "6844903507573784589", "title": "深入探讨前端组件化开发", "desc": " "}, {"id": "6901856557634420749", "title": "来一份this相关知识点详细总结！", "desc": "this在JavaScript中是非常重要的概念，因为我们用到它的频率非常之高，在享受到它的便利性的同时，与之对应的是它的绑定规则比较难理解。今天我们就来好好总结一下this的相关知识点，这样在使用它的过程中就能更有自信和把握啦！ 我们定义了一个函数foo并执行，在函数体中我们…"}, {"id": "6844903745558429710", "title": "JS 总结之 class", "desc": "class 是 ES6 的新特性，可以用来定义一个类，实际上，class 只是一种语法糖，它是构造函数的另一种写法。（什么是语法糖？是一种为避免编码出错和提高效率编码而生的语法层面的优雅解决方案，简单说就是，一种便携写法。） 定义于 constructor 内的属性和方法，即定…"}, {"id": "6844903721797681165", "title": "精读《使用 CSS 属性选择器》", "desc": "虽然现在 Css Module 与 Css-in-js 更流行，但使用它们会导致过分依赖 滥用 class 做唯一定位，违背了 Css 选择器的初衷。 本期精读的文章是：attribute-selectors-splicing-html-dna-css，带你重新理解强大的 Cs…"}, {"id": "6973103203466346533", "title": "密码显示与隐藏效果 html+css+js", "desc": "这是我参与更文挑战的第12天 先看效果： 前言： 一般在我们要输入密码的时候都可以让自己输入的密码显示或者隐藏，所以我做了一个简约的密码框~ 实现： 定义html的输入框的标签，kuang为底层盒子，"}, {"id": "6844903664239247367", "title": "深入理解JSCore", "desc": "动态化作为移动客户端技术的一个重要分支，一直是业界积极探索的方向。目前业界流行的动态化方案，如Facebook的React Native，阿里巴巴的Weex都采用了前端系的DSL方案，而它们在iOS系统上能够顺利的运行，都离不开一个背后的功臣：JavaScriptCore（以下…"}, {"id": "6983201078707748877", "title": "Javascript 类型解读", "desc": "大多数开发者认为，像JavaScript这样的动态语言是没有类型的 实则ECMAScript 类型细分为语言类型 和 规范类型 ECMAScript 语言中所有的值都有一个对应的语言类型 Undefi"}, {"id": "6844904163508224007", "title": "一个学习 Koa 源码的例子", "desc": "Koa 中间键机制：Koa 中间件机制就是函数组合的概念，将一组需要顺序执行的函数复合为一个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是 Koa 源码中的精髓和难点。 到此，我们简版的 Koa 就已经完成实现了。让我们庆祝一下先！！！ Koa …"}, {"id": "6997392773875793933", "title": "创建base公共组件", "desc": "# 公共模块 ![1](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a70f5637ae9541358f80ec04224ef4e3~tpl"}, {"id": "6991742050047639583", "title": "前端踩坑指南：慎重使用ES6三数互换语法糖", "desc": "起因 今天在写非递归快速排序的时候，有一个地方需要使用三数互换，于是用了ES6数组解构的方式进行互换，代码如下： 输出结果为： 将三数互换语句换"}, {"id": "6844903705809010696", "title": "URL中的#", "desc": "1. 包含#的url是什么？ 包含#符号的url就是一个 Fragment URL。#指定了网页中的一个位置。 浏览器就会查询网页中name属性值匹配print的<a>标签。即：<a name=\"print\"></a> ， 或者是 id 属性匹配 print 的 <a> 标签。…"}, {"id": "6992021794651635720", "title": "JS 语法性能调优实战｜8月更文挑战", "desc": "为什么我们如此关注性能 javascript 作为一门解释性语言，性能优化是 JS 工程师避不开的一个重要话题。为什么 我们如此关注 JS 性能问题呢？"}, {"id": "6844904114183208968", "title": "干货:import和require如何在项目中混用", "desc": "自从js出了es6之后，小伙伴们都在项目中愉快的用起了import,export default,但是，当我们用import方式引入npm第三方模块的时候，却会发现，npm包导出的方式大多是采用了commonjs规范的require,module.exports。这中间babe…"}, {"id": "6844903928413306887", "title": "发布订阅模式", "desc": "前言：之前对发布-订阅模式没有理解透，感觉跟观察者模式非常像，又看到有些文章说观察者模式就是发布-订阅模式，搞的有点头大。这篇文章以个人的理解对发布-订阅模式进行一次梳理，如果有错误或者不足的地方，希望大家不吝指出，共同进步！！！ 为了更方便对布订阅模式的理解，本人又写了一篇由…"}, {"id": "6989625706632183822", "title": "JavaScript常用的API——数组、字符串等", "desc": "JavaScript常用的API a. Array 1. new Set() 数组去重 【...】的作用：遍历当前使用的对象能够访问到的时所用属性，并将该属性放入当前对象中，在开发中常用这种方式。"}, {"id": "6991469522351816741", "title": "JavaScript 之函数式编程", "desc": "函数式编程 FP (Functional Programming) 是一种编程范式。从宏观角度来看，它将事物之间的联系抽象成函数，这里的函数是指数学意义上的函数，代表的是一种关系。"}, {"id": "6844903745004765191", "title": "Promise 源码分析", "desc": "从index.js当中知道，它是先引出了./core.js，随后各自执行了其他文件的代码，通过requeire的方法。 我们接着看doResolve这个方法。 doResolve最关键的是执行了tryCallTwo方法，这个方法的第二，第三个参数都是回调，当执行回调后，done…"}, {"id": "6844903607238656008", "title": "Node.js Buffer解读", "desc": "Buffer作为存在于全局对象上，无需引入模块即可使用，你绝对不可以忽略它。 可以理解Buffer是在内存中开辟的一片区域，用于存放二进制数据。Buffer所开辟的是堆外内存。 怎么理解流呢？流是数据的集合（与数据、字符串类似），但是流的数据不能一次性获取到，数据也不会全部lo…"}, {"id": "6916882882191917070", "title": "[开源推荐]：一个轻量的React懒加载组件，冰冰用了都说6~", "desc": "现如今前端React生态圈已有不少优秀的懒加载组件，比如react-lazy-load、react-lazy-mount等，但是它们并没有实现一个组件完全的懒加载，当DOM没有出现在视口中时，它们会先渲染出一部分，等到出现在视口中才会渲染要懒加载的目标，大多数基本都是图片懒加载…"}, {"id": "6934657845094776845", "title": "前端弹性动画与 framer-motion 动画库初探", "desc": "前端动画的开发一直是我所热衷探索与研究的内容，本文将描述什么是拟真的动画效果，目前所流行的 React 动画库，以及一些基于 framer-motion 动画库的 demos。 说到拟真的的动画体验，本质是动画中的过渡动画带来的体感。通常情况开发一个前端动画，会使用 CSS t…"}, {"id": "6997238240558202917", "title": "lerna 包管理流程", "desc": "1、lerna + npm link 软链的使用流程： 0、先将lerna 项目进行打包：执行项目全局的npm run build(会自动将每个包build)，因为最终被引用的是lib（或其他编译打包"}, {"id": "6965364393999597581", "title": "七.JavaScript多种继承方式", "desc": "继承的目的：让子类的实例同时也具备父类中的私有属性和公共方法 子类的实例能够用子类私有的和原型上共有的 父类的实例能够用父类私有的和原型上共有的 方法一：原型继承 将子类的原型对象指向父类的实例，通过"}, {"id": "6854573220180606983", "title": "JavaScript中的reduce()的5个用例", "desc": "reduce()方法对数组中的每一个元素执行一个reducer函数(由你提供)，从而得到一个单一的输出值。 reduce() 方法将一个数组中的所有元素还原成一个单一的输出值，输出值可以是数字、对象或字符串。 reduce() 方法有两个参数，第一个是回调函数，第二个是初始值。…"}, {"id": "6987570598704578568", "title": "如何动态地给对象添加某个属性", "desc": "很多时候，我们会面临比较特殊的一些情况， 需要我们根据变量值是否为null或者undefined来对对象进行属性的增加，如果值是undefined或null，就不添加这个属性。 如果像这样，直接赋值，"}, {"id": "6909784318856396808", "title": "腾讯位置服务开发应用  | 创作者训练营", "desc": "作为一名在职岗位为【前端开发工程师】的程序员，我开发的应用程序经常需要获取用户位置信息，需要再某些场合下使用展示地图以及地图商的某些地点，需要获取行政区划列表（省市区）以及地址详情信息，需要在地图上规划一条（动态）路线，轨迹回放，小车移动，需要创建信息窗口，用于地点的摘要性信息…"}, {"id": "6844903740781101070", "title": "年轻时，我不写单元测试", "desc": "其实之前就已经简单的了解过了单元测试，但当时对于单元测试我是持有一种很否定的态度的，因为他太过于鸡肋，都是测试一些很基础的功能，但是当笔者被这次重构折磨之后，有重新思考了下如何能够保证代码的健壮性，抱着这个态度，笔者又去调研了下单元测试到底能够做什么。 按照我们的理想情况，如果…"}, {"id": "6980148533592588324", "title": "聊聊Node的内存管理", "desc": "应用程序在运行时需要占用系统的存储空间来实现加载代码运行、存储运行时数据等功能。理解内存空间的管理策略能让我们更好的理解代码在系统中运行的机制。本文从代码运行时存储开始逐步介绍V8的垃圾回收机制。"}, {"id": "6988048672395100173", "title": "JavaScript 设计编程最佳实践", "desc": "代码中变量和函数的适当命名对于可读性和可维护性至关重要，更能体现开发者的专业素养！好的编程习惯从这里开始"}, {"id": "6844903822599389192", "title": "前端性能优化总结", "desc": "WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。无损webp相比png减少26%大小。 从4…"}, {"id": "6924097555131596808", "title": "精读《设计模式 - Mediator 中介者模式》", "desc": "Mediator（中介者模式）属于行为型模式。 意图：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。 前端开发中，最常用的 “数据驱动” 其实就最好的诠释了中介者模式。 按钮点击后，表单提交。按钮需…"}, {"id": "6844904047934373896", "title": "学透JavaScript：你真的懂 Array 吗？", "desc": "科普 JavaScript，揭开 JavaScript 神秘面纱，直击 JavaScript 灵魂。此系列文章适合任何人阅读。 标准化数组。 数组与数组容器。 ECMAScript 规范中 Array API 讲解。 如果你想用 Array，而又不想学 API 的办法。 标准规…"}, {"id": "6952876433689542670", "title": "【知识梳理】JS 数组 API 小记", "desc": "1. 起因 数组 Array 的 api 是个老生常谈的话题了，本篇小记中也是社区已有的知识了，只是对自己学习、了解到的知识进行阶段性梳理，攻克一下薄弱环节。 在没有梳理前，我对 slice 和 sp"}, {"id": "6993516548312793101", "title": "ES6 Symbol 类型", "desc": "本文介绍 ES6 中新增的原始数据类型 Symbol，Symbol.for 的使用和 Symbol 的使用场景，以及内置的一些系统 Symbol"}, {"id": "6844904006154715143", "title": "一个多层 if / else 嵌套的代码重构案例(JavaScript)", "desc": "日常开发经常会遇到复杂的条件判断, 一般做法就是用if/else, 或者优雅一点用switch来实现多个条件的判断. 如果条件越来越多, 会导致代码越来越臃肿, 如何使用更优雅的方式来实现呢? 通过以上代码, 可以看出该函数的作用是: 根据status状态的不同, 发送日志和跳…"}, {"id": "6987813562802503716", "title": "JS 对象基本用法", "desc": "声明对象的两种语法 对象的定义 无序的数据集合 键值对的集合 写法 1.常用的简便写法 let obj = {'name': 'frank', 'age':18} 2.正规的写法：let 对象名=ne"}, {"id": "6844903498350329870", "title": "原生JS实现最简单的图片懒加载", "desc": "试一下自己撸一个图片懒加载... 懒加载其实就是延迟加载，是一种对网页性能优化的方式，比如当访问一个页面的时候，优先显示可视区域的图片而不一次性加载所有图片，当需要显示的时候再发送图片请求，避免打开网页时加载过多资源。 当页面中需要一次性载入很多图片的时候，往往都是需要用懒加载…"}, {"id": "6958093582544666661", "title": "JS篇： 闭包", "desc": "闭包 2021/5/3 一. 什么是闭包？ 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。 "}, {"id": "6844903588364288014", "title": "web 调起 App？ 光知道 scheme 可不够！", "desc": "用户和流量的量级决定了一款互联网产品的优秀度。对一款优雅的互联网产品而言，app端和web端是必不可少的，我们借助它们形成闭环，保证用户体验和活跃度。除了端的覆盖，我们还要做到端到端的交互，由此我们提出了产品的需求： wap页唤起app，如果用户没装app则跳转到下载页(引导页…"}, {"id": "6993589009209360392", "title": "window.open 不同源页面通信 传递数据", "desc": "步骤: 父页面打开子页面 子页面发送消息给父页面通知页面加载完成 父页面收到子页面加载完成后发送数据给子页面 代码示例: 父页面 子页面"}, {"id": "6844903597591773198", "title": "如何监听数组变化?", "desc": "起源：在 Vue 的数据绑定中会对一个对象属性的变化进行监听，并且通过依赖收集做出相应的视图更新等等。 之前用 Object.defineProperty通过对象的 getter/setter简单的实现了对象属性变化的监听，并且去通过依赖关系去做相应的依赖处理。 但是，这是存在…"}, {"id": "6993613178861010974", "title": "原型/原型链学习笔记", "desc": "学习之前先回顾一下对象的特点 对象 原型对象 什么是原型对象 在JavaScript中，对象由构造函数来新建，每个构造函数内部都有一个prototype 属性，这个属性指向一个对象，包含了由该构造函数"}, {"id": "6863269040300032008", "title": "JS引擎（一）：JS中的JIT与基本执行逻辑", "desc": "一般来说，每个浏览器、运行时都可能实现自己的JIT编译器，但通常其理论是一样的，遵循相同的结构。 由于JS是解释型语言，JS引擎需要将代码逐行翻译为可执行的代码，可执行的代码有多种形式，其中较常见的有基于AST直接执行及ByteCode的执行方式。 在解释器执行代码时，监视器会…"}, {"id": "6987953602434351117", "title": "js数组常用方法整理（包含ES6新增语法）", "desc": "1. push，pop，unshift，shift（添加删除） array.push(item) 将元素添加到数组最后 返回新数组长度。 array.unshift(item) 将元素添加到数组最前面"}, {"id": "6901231253102526477", "title": "vue组件中节流函数的失效和解决", "desc": "今天使用节流函数的时候遇见了一个问题，搞了半天才找到原因，所以在这里做个总结。 浏览器的一些事件，如：resize，scroll，mousemove等。这些事件触发频率太过频繁，绑定在这些事件上的回调函数会不停的被调用，加重浏览器的负担，导致用户体验非常糟糕。所以先贤们发明了节…"}, {"id": "7007615666609979400", "title": "从零开发一款轻量级滑动验证码插件", "desc": "今天继续和大家分享一款非常有趣且实用的前端实战项目——从零基于 react + canvas 实现一个滑动验证码"}, {"id": "7007965963819679751", "title": "24个 JavaScript 循环遍历方法，你都知道吗？", "desc": "今天我们来看点基础知识，看看JavaScript中的那些循环遍历方法： 一、数组遍历方法 1. forEach() forEach 方法用于调用数组的每个元素，并将元素传递给回调函数。数组中的每个值都"}, {"id": "7008006326857138184", "title": "一篇文章带你了解Node.js的性能指标", "desc": "通过V8 GC和CPU Profile日志，分析Node.js进程内存和CPU使用，让你整体了解Node.js的性能指标，列举现有性能分析平台工具的能力，注服务器性能，让你的应用稳定性更强"}, {"id": "7008039811030188039", "title": "WebGL模板测试中的“视觉欺骗”", "desc": "我们在工作中或多或少都会接触到三维可视化的相关内容，神秘而酷炫它可以更直观地描述物质和更清晰地传递讯息，给产品带来更高的可玩性及更多创造力。"}, {"id": "7007606687745966093", "title": "来玩TS吗，机都给你开好了", "desc": "实现 Pick 实现 TS 内置的 Pick<T, K>，但不可以使用它。 从类型 T 中选择出属性 K，构造成一个新的类型。 例如： 答案： 实现 Readonly 不要使用内置的Readonly，"}, {"id": "7007048306438176799", "title": "谈谈我这些年对前端框架的理解", "desc": "最早的时候页面是服务端渲染的，也就是 PHP、JSP 那些技术，服务端通过模版引擎填充数据，返回生成的 html，交给浏览器渲染。那时候表单会同步提交，服务端返回结果页面的 html。 后来浏览器有了"}, {"id": "7007946894605287432", "title": "「前端工程四部曲」模块化的前世今生（上）", "desc": "在日益复杂和多元的Web业务背景下，前端工程化这个概念经常被提及。“说说你对Web工程化的理解？” 相信很多初学者在面试时会经常遇到，我们每个人都可以或多或少说出几句，但你真的了解吗？"}, {"id": "7007676450509684772", "title": "面试官让你手写深拷贝函数的背后是想考察什么知识点", "desc": "深拷贝的面试题网上随便一搜，都一大堆，相信每个前端同学都看过，但还是有很多面试官喜欢让人手写实现深拷贝函数，这到底是为什么呢，背后面试到底想考察你什么知识点呢 首先每个面试前的同学估计都会刷一波高频面"}, {"id": "7007719697948868638", "title": "面向对象编程", "desc": "项目经理分下来一个验证表单功能的任务，内容不多，仅需要验证用户名、邮箱、密码等。 这种面向过程的实现方式，然而在这种方式中，你会发现无端地在页面中添加了很多全局变量，而且不利于别人重复使用。一旦别人使"}, {"id": "7007607369962094599", "title": "Sentry Web 前端监控 - 官方最佳实践教程", "desc": "创建一个 Sentry 项目 Step 1: 创建项目 Step 2: 创建警报规则 将 Sentry SDK 引入您的前端代码 前置条件 Step 1: 获取代码 Step 2: 安装 SDK St"}, {"id": "7008060258186690590", "title": "theejs打造3d月饼生成器", "desc": "用three.js造个3d月饼生成器,可以自定义形状和任意数量边框，在这中秋佳节的时刻，给自己一份不一样的月饼礼盒，打造个性化月饼礼盒。 我正在参加中秋创意投稿大赛，详情请看：[中秋创意投稿大赛]"}, {"id": "7007694393373114398", "title": "js基础篇-对象的理解与分析", "desc": "对象(包括数组)的复制，浅复制，深复制，es5: forEach、some、every，es6: map、filterfor ··· in和for ··· of"}, {"id": "7008046729329115143", "title": "【前端搞地图】如何设计一张更真实的 3D 地图", "desc": "🌏`【前端搞地图】`系列`第三弹`来啦，今天给大家带来的是`如何实现更真实的 3D 地图`。在前两篇文章中我们大致讲解了`Mapbox`的`基础使用`以及`如何去设计一张高度可自定义的地图`...."}, {"id": "7008049050196901925", "title": "数组性能问题分析总结", "desc": "数组的操作避免出现O(n^2)的复杂度 数组用来搜索元素的方法时间复杂度为O(n)。运行时间的增长速度与数据大小的增长速度相同，常用的如下"}, {"id": "7007695066131070989", "title": "class的基本语法", "desc": "es6 class的基本语法js语言中，生成实例对象的传统方法就是通过构造函数： Es6 通过class （类）这个盖面，作为对象的模板，通过class，可以定义类。 新的class写法是一个语法糖"}, {"id": "7007670747346763806", "title": "当请求遇到diskCache", "desc": "当甲方愤怒地询问你为什么我的数据没有刷新，你是否一脸疑惑？或许你想了解一下disk cache。本文会探讨这个问题为什么会出现，以及出现导致了什么问题，并给出了几种禁止disk cache的方案。"}, {"id": "7007838325193048095", "title": "隐写术并不是黑客特工的专属 - 我用前端实现的隐写,非常有意思 ❗", "desc": "这次之所以会出一期这个内容,是因为前段时间有群友说他的文章被盗了,于是冲着对版权保护方法的好奇,就有了这篇文章 ~"}, {"id": "7007623509174124580", "title": "Generator，async/await究竟是什么？(一.Generator)", "desc": "async/await前至知识 generator，对generator理解，generator语法，API，构造函数。"}, {"id": "7007031572238958629", "title": "7张图，20分钟就能搞定的async/await原理！为什么要拖那么久？", "desc": "前言 大家好，我是林三心，以最通俗的话，讲最难的知识点是我写文章的宗旨 之前我发过一篇手写Promise原理，最通俗易懂的版本！！！，带大家基本了解了Promise内部的实现原理，而提到Promise"}, {"id": "7008051403172085797", "title": "Object的assign和create静态方法，你真的懂嘛？", "desc": "我们知道，assign()和create()都可以用来实现浅拷贝，create()还可以用来实现继承。 但是，这两个方法还有很多细小的坑，就让我们看看叭。 Object.assgin() 若传参只有一"}, {"id": "6945996368880091173", "title": "还在傻傻分不清ES5、Es6数组方法？各大姿势来袭", "desc": "初衷： 在面试中，面试官经常问到说一下Es5和Es6的数组方法有哪些，有很多同学老是分不清楚，今天笔者就来分享一下。 用途： map是一个数组函数方法，接收三个参数，value，index，self，返回值是处理完的结果。 用途： 用于截取数组值，接收两个参数，第一个参数是要获…"}, {"id": "6844903845617729549", "title": "关于移动端适配，你必须要知道的", "desc": "... 上面这些问题可能我们在开发中已经知道如何解决，但是问题产生的原理，以及解决方案的原理可能会模糊不清。在解决这些问题的过程中，我们往往会遇到非常多的概念：像素、分辨率、PPI、DPI、DP、DIP、DPR、视口等等，你真的能分清这些概念的意义吗？ 本文将从移动端适配的基础…"}, {"id": "7005952780334530574", "title": "【算法】深拷贝 - 递归爆栈 | 循环引用", "desc": "目录 为什么要深拷贝 深拷贝 VS 浅拷贝 最简单的深拷贝 一行代码的深拷贝 递归爆栈 循环引用 性能对比 参考 总结 一、为什么要深拷贝 为了不影响原始数据 ... 二、浅拷贝和深拷贝的区别 1. "}, {"id": "6996819069504585736", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（五）", "desc": "感激相遇 你好 我是阿ken 函数表达式与函数声明的定义方式几乎相同，不同的是函数表达式的定义必须在调用前，而函数声明的方式则不限制声明与调用的顺序。由于 sum 是一个变量名，给这个变量赋值的函数没"}, {"id": "6986967746453962782", "title": "能用CSS实现的就不用麻烦JavaScript — Part2", "desc": "上一篇文章 “能用CSS实现的就不用麻烦JavaScript” 提到好几种常用场景，这次笔者再分享多几个用CSS代替JavaScript的场景。希望大家能在日常开发中使用到。"}, {"id": "6997220640759496734", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（六）", "desc": "感激相遇 你好 我是阿ken 函数表达式与函数声明的定义方式几乎相同，不同的是函数表达式的定义必须在调用前，而函数声明的方式则不限制声明与调用的顺序。由于 sum 是一个变量名，给这个变量赋值的函数没"}, {"id": "7004724576194150430", "title": "JavaScript 的基本类型有哪些？引用类型有哪些？null，undefined 的区别", "desc": "数据类型 基本数据类型：number、string、boolean、null、undefined 引用数据类型：function、object、Array 区别 null 表示一个对象被定义了，值为“"}, {"id": "7005485207860019237", "title": "什么是Supabase", "desc": "Supabase是什么 BaaS（Backend as a Service，后端即服务）是指我们不再编写或管理所有服务端组件，可以使用领域通用的远程组件（而不是进程内的库）来提供服务。理解BaaS，需"}, {"id": "6844903809206976520", "title": "「中高级前端面试」JavaScript手写代码无敌秘籍", "desc": "1. 实现一个new操作符 它创建了一个全新的对象。 它会被执行[[Prototype]]（也就是__proto__）链接。 它使this指向新创建的对象。。 通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上。 如果函数没有返回…"}, {"id": "6844904200598454286", "title": "前方高能，这是最新的一波Vue实战技巧，不用则已，一用惊人", "desc": "最近一直在开发后台管理系统，日复一日的重复着表单表格表格表单，标准的CV仔，感觉好无聊，如何能在这种无聊的开发过程中去提升自己，小编今天又整理了一波新的Vue实战技巧，这些技巧，不用则已，一用惊人。同时你也可以点击下面的链接阅读近期小编的文章。 插槽，相信每一位Vue都有使用过…"}, {"id": "7003674327241457672", "title": "上京东，开学就得买买买（看小白如何仿写京东小程序）", "desc": "最近学了一段时间微信小程序，也是和小伙伴们尝试做了京东小程序，着重于实现一些商业逻辑和网上购物的基础功能。本着学习和分享的初心，我会在文章中分享开发中遇到的小坑，希望能给我一样的小白带来点帮助。"}, {"id": "6844904079219490830", "title": "带你深度解锁Webpack系列(基础篇)", "desc": "三篇长文带你解锁 Webpack ，希望读完这三篇文章，你能够对 webpack 的各项配置有一个更为清晰的认识。 webpack 是一个现代 JavaScript 应用程序的静态模块打包器，当 webpack 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每…"}, {"id": "6877712145757896717", "title": "前端必备javascript书籍测评【含红宝书和绿皮书】", "desc": "本书由 JavaScript 之父 Brendan Eich 与 ES6 规范首席作者 Allen Wirfs-Brock 联合编写，记录1995~2015共计 20 年的 JavaScript 演化经历。全书不仅讲解了大量语言技术细节层面的演进，更复盘了更高层面上规范制定与标…"}, {"id": "7000339820786483207", "title": "JavaScript事件流", "desc": "事件流就是页面接收事件的顺序，一般有俩种事件流：事件冒泡和事件捕获，其实它就是发生事件的各种顺序，理解这个之后可以更好的运用事件。"}, {"id": "6850037262441250829", "title": "我在项目中是这样配置Vue的", "desc": "在前面的文章中，小编为大家带来了许多Vue 实战技巧，也得到了大家的许多好评。其实在前面那些技巧之外，我们还可以做的更多，让我们的开发流程更流畅，开发体验更好，项目性能更上一层楼，怎么做呢，我们一起来看看。 在我们开发的时候，为了方便调试，我们需要使用源码进行调试，但在生产环境…"}, {"id": "7002501517722796046", "title": "简单总结一下 ES6 以后的一些小知识", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 Promise 一共有3种状态，pending（进行中）、fulfilled（已成功）和rejected（已失败） 特点：只有异步操作可以"}, {"id": "6965828568144150536", "title": "给我一个 babel，还你一条完整前端工具链", "desc": "基于 babel 打造完整工具链，彻底通关 babel！或许你都没想过 babel 原来这么的强大。"}, {"id": "7005080740408885255", "title": "数组29个方法", "desc": "一、数组转字符串方法 1、toSting 2.join str.split() 二、堆栈方法： push() 数组后增加一位 返回值 => 增加数组的长度 pop() 数组后删除一位 返回值=> 被删"}, {"id": "7001442728391376933", "title": "一杯茶的时间🍵，搞定JavaScript提升", "desc": "我们都知道在JavaScript中同一个作用域内的变量都属于这个区域，在别的作用域是获取不到这个变量的。 但是在同一个作用域内..."}, {"id": "6951568091893465102", "title": "Vue 源码解读（4）—— 异步更新", "desc": "详细讲解了 Vue 异步更新的实现原理 以及从源码层次来回答一些和异步更新相关的面试题，比如 nextTick 的实现原理"}, {"id": "6994703628242010143", "title": "V8是如何执行JavaScript代码的？", "desc": "V8是如何执行JavaScript代码的？使用V8引擎的原因，编程语言是如何运行的，V8执行Js代码的整体流程。"}, {"id": "6844903885551697934", "title": "【Step-By-Step】高频面试题深入解析 / 周刊07", "desc": "1. 实现一个 JSON.stringify JSON.stringify([, replacer [, space]) 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串。此处模拟实现，不考虑可选的第二个参数 replacer 和第三个参数 spac…"}, {"id": "6844904079840247816", "title": "前端读取Blob内容", "desc": "前端由于安全方面的因素，不能直接对文件进行写操作。但是在实际的业务需求中，难免会遇到各种各样文件的下载、预览。 如果服务端下载文件是以流的形式传递到前端，前端通常是将流转换为objectURL,借用a标签的download属性，进行文件下载。但是有时候会遇到下载文件处理失败的场…"}, {"id": "6970707451079507999", "title": "如何快速给已有的代码加注释", "desc": "“公司规范组要求给代码加注释，而且要求注释行数达到代码行数的三分之一。求一个自动加注释的方案，先把这个事情搞过去”。就这样，回归悠闲生活的计划开始了……"}, {"id": "6997371600391634981", "title": "写一个获取元素 xpath 的 chrome 插件", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 需求来源 上次开每周例会的时候，大家一起嗨皮的聊天，聊到了测试是怎么做测试的。 然后测试就给我们演示了一下，每次编写测试用例，都要通过 c"}, {"id": "6844903950584381448", "title": "【React系列】从零开始实现Redux", "desc": "本篇文章会从零开始编写 Redux，如果你对 Redux 的使用和源码已经非常熟悉，那么你只需要粗略浏览即可，如果你还不太清楚，那么跟着本篇文章一起来实现你的 Redux 吧。知其然，知其所以然。 本篇文章对应的代码在: https://github.com/YvetteLau…"}, {"id": "6844903942501957640", "title": "精读《前端与 BI》", "desc": "商业智能（Business Intelligence）简称 BI，即通过数据挖掘与分析找到商业洞察，助力商业成功。 一个完整的 BI 链路包含数据采集、数据清洗、数据挖掘、数据展现，其本质是对数据进行多维分析。前端的主要工作在数据展现环节，由于展示方式繁多、分析模型复杂且数据量…"}, {"id": "6869340244954513421", "title": "如何避免useContext重渲染", "desc": "父组件中使用createContext创建的Context.Provider。这个组件允许消费组件订阅Context的变化。当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染 在上面代码中child就能够消费在parent中定义的值。 但是上面…"}, {"id": "6844903701790851080", "title": "小程序tabbar这套方案全搞定！", "desc": "自定义字体图标组件以及tabbar组件，在tabbar中引用自定义字体图标组件。 一个自定义组件由 json wxml wxss js 4个文件组成。 然后再页面上添加组件的标签即可。 先定义字体图标组件，在阿里图标库里面挑选好你所需要的字体选择下载代码。 3. 将该目录下in…"}, {"id": "6984325725360750599", "title": "PayPal支付总结", "desc": "paypal支付功能 整个流程在前端完成 paypal支付功能 整个流程在前端完成paypal支付功能 整个流程在前端完成paypal支付功能 整个流程在前端完成"}, {"id": "6970842484133855240", "title": "JS中this的应用场景，再了解下apply、call和bind！", "desc": "this的应用场景，再了解下apply、call和bind 在写程序时，我们都知道this很好用，但是却很容易导致乱用。就像我刚开始学习箭头函数时，"}, {"id": "7000209314069610510", "title": "力扣每日一题 - 获取生成数组中的最大值", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 8.23 - 1646. 获取生成数组中的最大值 题意 示例1： 示例2： 示例3： 分析 本题给出两种方案解决 先循环生成nums数组，"}, {"id": "6913832533008318471", "title": "Photo Sphere Viewer全景图插件开箱", "desc": "最新小编在了解全景图相关的知识。小编想通过该篇文章带大家一起开箱PhotoSphereViewer框架。 PhotoSphereViewer框架是基于Three.js二次封装的一个显示Photo Sphere全景照片的JavaScript库。从目前小编的学习情况来看，小编觉得这…"}, {"id": "6999465478846431263", "title": "JS对象基本用法", "desc": "声明对象的两种语法 object定义 无序的数据集合 键值对的集合 语法 console.log({'name': 'tarro', 'age': 18}) 细节: 键名是字符串，不是标识符，可以包含"}, {"id": "6844903990904225805", "title": "「前端料包」可能是最透彻的JavaScript数据类型详解", "desc": "接触写博客有一段时间了，都是边学边学着写，但总感觉写的凌乱，想起啥写啥。这几天在刷红宝书，收获还是蛮多的，决定结合自己的学习，写一个系列，我叫它「前端料包」，旨在巩固前端基础，努力提升自己，同时也乐于做一个分享者。这个系列包括但不限于下面脑图中的内容，目录和发文顺序暂且如下： …"}, {"id": "6844903856556474381", "title": "JS如何取得URL里的参数？", "desc": "要只是获取一些常规字符串到没什么难的，关键还有些乱七八糟的需求，什么同一个参数名传递了多次啊，传数组啊。搞来搞去就写了一大堆 先用JS拿到URL，如果函数传参了URL，那就用参数。如果没传参，就使用当前页面的URL 我们可以通过遍历数组arr，将它拆分成键值对。把这个字符串做成…"}, {"id": "6844903607075078158", "title": "vue-quasar-admin  一个包含通用权限控制的后台管理系统", "desc": "Quasar-Framework 是一款基于vue.js开发的开源的前端框架, 它能帮助web开发者快速创建以下网站：响应式网站，渐进式应用，手机应用(通过Cordova)，跨平台应用(通过Electron)。 Quasar允许开发者在只写一次代码的情况下发布到多个平台 web…"}, {"id": "6931244306896420872", "title": "axios 撤销请求", "desc": "使用场景tab切换时刷新列表数据，如果使用的是同一个dom展示数据，当请求有延时，可能会导致两个tab数据错乱导出文件或下载文件时，想中断导出或下载注意事项前端主动撤销请求依旧会触发服务端逻辑，会占用"}, {"id": "6943043923028181029", "title": "JS 原型链、继承知识点", "desc": "1 是赋值，A、B 共用一个原型对象，操作其中一个会影响另一个。但用 instanceof 判断： prototype.constructor 原本是 JS 设计的遗留产物，直到 ES6 时才正式定义和使用。为保持良好的习惯，应该尽量让原型的 constructor 指向其构造…"}, {"id": "6844903539605504008", "title": "ES6 Promise 和 Async/await的使用", "desc": "你可能知道，Javascript语言的执行环境是\"单线程\"（single thread）。 所谓\"单线程\"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。 这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有…"}, {"id": "6856912385652424718", "title": "一个有意思的方案：不借助后台和 JS ，只用 CSS 让一个列表编号倒序，你会怎么做？", "desc": "我正在做一个项目，其中有一个倒序的列表。列表创建时间降序排序的，这里我想在语义和视觉上都能体现出来(让列表显示对应的编号，编号越大表示是最新的)。网上做了一些研究，找到了一些有趣的解决办法，有些很好，有些就不那么好了。 接着，我们来看看有哪些实现的方式。 简单，最直接的解决方案…"}, {"id": "6955681436565241893", "title": "前端图片加载优化的各种技巧", "desc": "目前的前端图片加载优化技术有很多，像懒加载/预加载，img上的srcset属性以及picture标签，新的图片编码格式以及Client Hints等。"}, {"id": "6844903615652610055", "title": "深入框架本源系列 —— Virtual Dom", "desc": "众所周知，操作 DOM 是很耗费性能的一件事情，既然如此，我们可以考虑通过 JS 对象来模拟 DOM 对象，毕竟操作 JS 对象比操作 DOM 省时的多。 从上述例子中，我们一眼就可以看出先前的 ul 中的第三个 li 被移除了，四五替换了位置。 当然在实际操作中，我们还需要给…"}, {"id": "6844903702289973256", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi", "desc": "最近尝试了vue+ts的组合个人感觉vue对于ts并没有特别的像angular2这样的友好，但是对于ts和js之间个人还是选择ts的。语法糖来说es6简直舒爽，下面我详细介绍下怎么使用ts+vue。ts+vue的插件会少上很多，但是肯定会随着vue对ts的支持插件也会越来越多当…"}, {"id": "6992498429658136584", "title": "重学es6 - 第三部分 | 8月更文挑战", "desc": "函数是javascript的一等公民,类似react和vue3框架,都往偏函数式编程方向去发展. 函数式编程在前端还是有很多好处的. 除去它自己的优点, 让代码高内聚,低耦合,语义清晰."}, {"id": "6844903958054436878", "title": "实践！实现纯前端下的音频剪辑处理", "desc": "最近在做一个项目，需要对webRTC录制的音频进行处理，包括音频的裁剪、多音频合并，甚至要将某个音频的某一部分替换成另一个音频。 于是在笔者的半摸索半实践下，产生出了这篇文章。废话少说，先上仓库地址，这是一个开箱即用的前端音频剪辑sdk（点进去了不如就star一下吧） ffmp…"}, {"id": "6844903586070020103", "title": "（干货）记前端工程师面试题，一起带大家理一理", "desc": "一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成，下图给出了请求报文的一般格式。 请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。例如，GET /index.html HTTP/1…"}, {"id": "6914433219613949966", "title": "try..catch 不能捕获的错误有哪些？注意事项又有哪些？", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 今天的内容中，我们来学习一下使用try、catch、finally和throw进行错误处理。我们还会讲一下 JS 中内置的错误对象(Error, SyntaxEr…"}, {"id": "6986809953365262373", "title": "给新手前端整理的ES6+🚀必会语法(视频📺)", "desc": "下面都是开发🔥必用的语法. let 定义变量, 区别于\"var\", 他所声明的变量只在\"let\"所在的代码块内有效, 总之一句话: \"var\"就不要用了, 都替换成\"let\". const 定义常量,"}, {"id": "7002893004549652488", "title": " js语法基础-语句", "desc": "1 for-in for-in语句是一种严格的迭代语句，用于枚举对象中的非符号键属性 输出：指数出了name和age两个属性，没有输出符号属性 如果for-in循环要迭代的变量是null或undefi"}, {"id": "6844903607175741453", "title": "微信小程序运行流程看这篇就够了", "desc": "1. 运行环境差异 微信小程序运行在三端：iOS、Android 和 用于调试的开发者工具。 微信小程序的框架包含两部分View视图层(可能存在多个)、App Service逻辑层(一个)，View层用来渲染页面结构，AppService层用来逻辑处理、数据请求、接口调用，它们…"}, {"id": "6844903924265123853", "title": "使用预渲染提升SPA应用体验", "desc": "在目前的前端领域，单页web应用（SPA）已经有了比较高的占有率，比较主流的web框架React、Angular、Vue几乎已经统治了前端市场。 单页应用确实带来了更好的前后端分离，以及用户体验好、快，内容的改变不需要重新加载整个页面等等的优点，喜忧参半，SPA应用首屏加载慢、…"}, {"id": "6844903999192350728", "title": "JS数组Reduce方法详解", "desc": "一直以来都在函数式编程的大门之外徘徊，要入门的话首先得熟悉各种高阶函数，数组的reduce方法就是其中之一。 reduce方法将会对数组元素从左到右依次执行reducer函数，然后返回一个累计的值。举个形象的例子：你要组装一台电脑，买了主板、CPU、显卡、内存、硬盘、电源...…"}, {"id": "6966041490988466212", "title": "JavaScript系列 -- ES6、ES7、ES8 新特性", "desc": "原文地址：ES6、ES7、ES8特性一锅炖(ES6、ES7、ES8学习指南) 这里作学习笔记 ES6 新特性 let 与 const 箭头函数 类 模块化 模板字符串 解构赋值 延展操作符 Promi"}, {"id": "6997768361924886536", "title": "数据类型之面试官（0101） |  重学JS", "desc": "前言 在线音乐戳我呀！ 音乐博客源码上线啦！ 最近工作之余想干点什么，不能永远踏步，要向前冲，说点现实的，公司明天不要你，你可以后天就找到下一家，那么底气自然是技术硬。 浑浑噩噩在前端领域磕磕碰碰了两"}, {"id": "6844903694891220999", "title": "深度介绍：💾 你听说过原生 HTML 组件吗？", "desc": "在说原生 HTML 组件之前，要先简单介绍一下四大 Web 组件标准，四大 Web 组件标准分别为：HTML Template、Shadow DOM、Custom Elements 和 HTML Imports。实际上其中一个已经被废弃了，所以变成“三大”了。 HTML Tem…"}, {"id": "6947874934702112804", "title": "0.1 + 0.2为什么不等于0.3？", "desc": "这是一个面试中大概率会被问到的问题，经过网上查阅各种资料、文章等，都有对这个问题的描述。但是其中的细节和一些关键点还需要自己细品和琢磨才能明白。在弄清楚这个问题的过程中经历了不少的思想斗争，因此还是有必要把自己的感悟记录并分享出来。 首先，要明确程序中的所有计算，转到计算机底层…"}, {"id": "6992881491336249375", "title": "JavaScript 设计模式之迭代器模式", "desc": "迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。可以支持自定义~"}, {"id": "6993502549818998797", "title": "前端刷题路-Day73：最小路径和（题号64）", "desc": "给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小..."}, {"id": "6948957217819197448", "title": "手把手编写一个VUE简易SVG动画组件", "desc": "前面介绍了动画的基本使用，这期结合VUE来实现一个简易的SVG路径动画组件。效果大致如下，在FlySvg组件中引入path,自动实现path的绘制动画效果。组件只支持一个path，多个path还是手动写js控制好一些。 svg在做动画中还是挺常见的，相对于canvas而言，sv…"}, {"id": "6887428533988589575", "title": "分享十五条 JavaScript 开发技巧", "desc": "大多数编程语言都足够开放，以允许程序员以多种方式得到类似的结果。JavaScript 也是如此，使用 JavaScript，我们通常可以通过多种方法来达到相似的结果，虽然有时会造成混淆。 其中一些用法比其他方法要好，而这些就是我要分享的。我将在本文中一一列举，我敢肯定，您在阅读…"}, {"id": "6844903906292695053", "title": "【译】Proxy及其优势", "desc": "通常，当谈到JavaScript语言时，我们讨论的是ES6标准提供的新特性，本文也不例外。 我们将讨论JavaScript代理以及它们的作用，但在我们深入研究之前，我们先来看一下Proxy的定义是什么。 MDN上的定义是：代理对象是用于定义基本操作的自定义行为（例如，属性查找，…"}, {"id": "7001769945713344525", "title": "this指向判断", "desc": "本文介绍了this的五种指向判断：函数直接调用，函数被别人调用，new⼀个实例时，apply、call、bind时、箭头函数中的this。并介绍了setTimeou中的this指向及如何改变。"}, {"id": "6986605831470972958", "title": "初始JS基础", "desc": "JS基础中的基础：浏览器分类，开发者工具，web页面的三个组成部分，JS组成的三个部分，JS中的变量variable创建方式及命名规范，JS中常用的数据类型"}, {"id": "6971232418585903141", "title": "155个JavaScript基础问题（76-85）", "desc": "这是我参与更文挑战的第6天，活动详情查看：更文挑战 76. 输出是什么？ 77. 下面的函数是纯函数吗？ 78. 输出是什么？ 79. 输出什么？ 80. 输出是什么? 81. 输出什么？ 82. 输"}, {"id": "6880419772127772679", "title": "【前端进阶】深入浅出浏览器事件循环【内附练习题】", "desc": "JavaScript 是单线程的，单线程是指 JavaScript 引擎中解析和执行 JavaScript 代码的线程只有一个（主线程），每次只能做一件事情。单线程存在是必然的，在浏览器中， 如果 javascript 是多线程的，那么当两个线程同时对 dom 进行一项操作，例…"}, {"id": "6863266417194565645", "title": "重学前端-ES6+新特性总结", "desc": "前言最近开始重学前端，学习过程中将笔记跟大家分享，希望对大家有所帮助，共同成长，文章中有不对的地方请大家指正。本文简单列举了ES6+中的一些新特性，部分知识点涉及面过大，本文将一带而过，后面将会另起一"}, {"id": "6901937641517350919", "title": "开源推荐|使用GPU.js改善JavaScript性能（译）", "desc": "有很多方法可以解决这个问题，例如使用web worker或后台线程。GPU减轻了CPU的处理负荷，给了CPU更多的空间来处理其他进程。同时，web worker仍然运行在CPU上，但是运行在不同的线程上。 在该初学者指南中，我们将演示如何使用GPU.js执行复杂的数学计算并提高…"}, {"id": "6844904041336537102", "title": "用 Web 实现一个简易的音频编辑器", "desc": "市面上，音频编辑软件非常多，比如 cubase、sonar 等等。虽然它们功能强大，但是在 Web 上的应用却显得心有余而力不足。因为 Web 应用的大多数资源都是存放在网络服务器中的，用 cubase 这些软件，首先要把音频文件下载下来，修改完之后再上传到服务器，最后还要作更…"}, {"id": "6844903847060570126", "title": "精读《为什么专家不再关心技术细节》", "desc": "1. 引言 本周的精读是有感而发。 也就是专家们变得越来越不关心技术细节。需要说明是的，这里说的专家不再关心细节，不代表成为专家后学不会细节，也不代表专家不了解细节。 早期挺难理解这种转变的，笔者在学校里的知名度来自于前端做得精深，一根筋钻研技术的人眼里是容不下沙子的，所以当初…"}, {"id": "6844904080955932680", "title": "CommonJS 和 ES6 Module 究竟有什么区别？", "desc": "带着这些疑问和好奇，希望阅读这篇文章能解答你的疑惑。 在 ES6 之前，ECMAScript 并没有提供代码组织的方式，那时候通常是基于 IIFE 来实现“模块化”，随着 JavaScript 在前端大规模的应用，以及服务端 Javascript 的推动，原先浏览器端的模块规范…"}, {"id": "6844903837623386126", "title": "用自己的方式（图）理解constructor、prototype、__proto__和原型链", "desc": "JS内函数即对象。 Function对象和Object对象这两个内置对象的特殊性。 很多讲解图的指向一眼下去花里胡哨，看着都头疼[手动狗头]。 很多前辈在讲解相关知识点的时候都是从__proto__开始讲起，但在我看来，__proto__与prototype关系之密切是无法单独…"}, {"id": "6862289382096207880", "title": "一文带你掌握JS高阶编程技巧！猛！", "desc": "本文旨在帮助大家掌握JavaScript中的几大重要高阶编程技巧，如：高阶函数、高级单例模式、惰性函数思想、柯理化函数思想、compose扁平化函数思想。 用单独的实例来管理当前事物的相关特征，泛指属性和方法，类似于实现分组的特点，把一个实例的所有特征描述绑定在一个分组里。 这…"}, {"id": "6988010416689381383", "title": "前端架构之Nginx （五）", "desc": "1、负载均衡的由来 早期的系统架构，基本上都是如下形式的： 客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。 　　这种架构模式对于早期"}, {"id": "6999913232747986980", "title": "JS基础类型隐式转换，显示转换", "desc": "一般非基础类型进行转换时会先调用 valueOf，如果 valueOf 无法返回基本类型值，就会调用 toString 1. 字符串和数字 \"+\"操作符，如果有一个为字符串，那么都转化到字符串然后执行"}, {"id": "6844903569896767501", "title": "分享收集的一大波前端面试题和答案", "desc": "在github上看到的内容很好很丰富的一篇面试题（附带答案），不知道又没有被分享过，拿来分享一下，觉得不错的可以给个star给作者"}, {"id": "6960839301059837982", "title": "用 JavaScript 实现手势库 — 支持多键触发【前端组件化】", "desc": "上一期《实现手势库 — 手势逻辑》我们完成了手势库的所有手势逻辑，这一期我们继续来完善我们的手势库。"}, {"id": "6844903880707293198", "title": "如何用不到200行代码写一款属于自己的js类库", "desc": "JavaScript 的核心是支持面向对象的，同时它也提供了强大灵活的 OOP 语言能力。本文将使用面向对象的方式，来教大家用原生js写出一个类似jQuery这样的类库。我们将会学到如下知识点： 接下来我会对类库的核心api进行讲解和展示，文章最后后附带类库的完整源码，在我之前…"}, {"id": "6956224653526302733", "title": "从几种清除浮动的方法聊到BFC", "desc": "【前言】 浮动的核心就是破坏了文档流，使用它的目的是为了能实现文字能够环绕图片的排版功能，以达到自己想要的布局效果。"}, {"id": "6990604925675765774", "title": "JavaScript：作用域链与闭包", "desc": "解释了全局作用域与局部作用域的原理，以及块级作用域的创建； 解析了作用域链与闭包的关系，以及闭包的原理；"}, {"id": "6844903496676802568", "title": "鸟瞰前端 , 再论性能优化", "desc": "1.0时代没什么说的，html、css打天下的时代，那个时候你会用js开发个计算器就牛逼到不行。2.0时代是最好的时代，新技术、新思想蓬勃发展，堪称前端的工业革命，前端人员的地位得到了充分认可，门槛也有一定的提升。前端性能优化的涉及点从服务器到协议再到宿主环境本身都要有比较深刻…"}, {"id": "6976047016606433293", "title": " 你需要知道的 JS 继承和模拟实现 new", "desc": "继承 继承的目的：让子类的实例也同样具备父类的属性和公共方法。 思考1：实例 c1 具备哪些属性和方法 最简单的原型继承 缺陷：原型继承是把父类的私有属性和共有属性都定义成了子类原型上的共有属性，如果"}, {"id": "6928376791388291080", "title": "浏览器存储方式学习  cookie, session, localstorage, indexedDB", "desc": "cookie： cookie相当于客户端和服务器之间进行信息交互的一个标识，每次客户端访问服务器的时候都会携带上cookie，这样服务器就可以知道是谁来访问了。 事务 数据记录的读写和删改都要通过事务完成。事务对象提供error,about和complete三个事件，用来监听操…"}, {"id": "6966784537904807967", "title": "如何实现页脚置底？？？", "desc": "将 .content 的 margin-bottom 设为负数 将 .footer 的 margin-top 设为负数 使用 calc() 设置 .content 的高度 使用 Flexbox 弹性布"}, {"id": "6974655702572908557", "title": "前端反调试初探", "desc": "这是我参与更文挑战的第14天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 任何网页开发者出于对自己网页的保护，都不想"}, {"id": "6844904005496209422", "title": "函数声明和函数表达式有什么区别与联系，应该怎样选择和使用？", "desc": "在 JavaScript 中，函数不是“神奇的语言结构”，而是一种特殊的值。 另一种创建函数的语法称为 函数表达式。 在这里，函数被创建并像其他赋值一样，被明确地分配给了一个变量。不管函数是被怎样定义的，都只是一个存储在变量 sayHi 中的值。 上面这两段示例代码的意思是一样…"}, {"id": "6844903545448169479", "title": "基于vue-ssr服务端渲染入门详解", "desc": "服务端渲染实现原理机制：在服务端拿数据进行解析渲染，直接生成html片段返回给前端。然后前端可以通过解析后端返回的html片段到前端页面，大致有以下两种形式： 1、服务器通过模版引擎直接渲染整个页面，例如java后端的vm模版引擎，php后端的smarty模版引擎。 2、服务渲…"}, {"id": "6844903688188723208", "title": "[译]一篇帮你彻底弄懂NodeJs中的Buffer", "desc": "前言：遇见前端，应该是今年最幸运的事情了。然而，幸运并未就此打住。 现在，我在准备自己的毕设，准备下一个阶段的到来。掘金社区的确是一个让人成长的地方，我也愿意今后有时间继续分享自己的成长经历。这篇文章是昨天看到的，通俗易懂，实在佩服，忍不住翻译过来和大家分享，继续成长 你是不是…"}, {"id": "6844904126996807688", "title": "你知道什么是call、apply、bind？", "desc": "call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。 bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。 这三个解释来自M…"}, {"id": "6996537073142349861", "title": "js中常见的几种排序算法", "desc": "总结几种排序算法。算法在任何一门编程语言都可以实现，算法重点是思想，而不是语言，我们这里使用js进行演示。 当然js内部也提供了Array.prototype.sort方法进行排序我们不做具体介绍，详"}, {"id": "6992404775119634469", "title": "JavaScript数据类型", "desc": "数据类型 基本数据类型 Number,String,Boolean,Undefined,Null,Symbol 引用数据类型 Array,Function,Object 数据类型判断 typeOf：主"}, {"id": "6984590496098156575", "title": "[JS]【二】[2]-- 基本数据转换", "desc": "javascript是弱类型语言 JavaScript 是弱类型语言，弱类型语言的数据类型可以被忽略的语言 声明变量的时候并没有预先确定的类型，变量的类型就是其值的类型，也就是说跟随值的变化类型也在变"}, {"id": "6847902224421486605", "title": "JavaScript全屏实现", "desc": "今天在做PC端项目时遇见一个全屏需求，以往没有接触过，便查找资料学习了一下。 所有的浏览器都实现了这些API。然而一些带有前缀的实现在拼写上略微有些差别"}, {"id": "6919858584348000263", "title": "JS基础篇--var、let、const ", "desc": "ECMAScript有三个关键字可以声明变量：var、const和let。其中，var在ECMAScript的所有版本都可以使用，而const和let只能在ECMAScript6及更晚的版本使用。 这行代码定义了一个名为message的变量，可以用它保存任何类型的值。（不初始化…"}, {"id": "6854573219970547720", "title": "精读《函数缓存》", "desc": "函数缓存是重要概念，本质上就是用空间（缓存存储）换时间（跳过计算过程）。 很显然这样太浪费计算资源了，当已经计算过一次天气后，就没有必要再算一次了，我们期望的是后续调用可以直接拿上一次结果的缓存，这样可以节省大量计算。因此我们可以做一个 memoizedGetChanceOfR…"}, {"id": "6955653299777306638", "title": "JavaScripts基础（10）DOM操作、DOM节点操作", "desc": "DOM树(dom tree)：DOM结构 DOM树描述了标签和标签之间的关系（节点间的关系） JS中获取DOM元素的方法 document.getElementById('id值') document"}, {"id": "6996512280401707038", "title": "掌握JavaScript继承实现方案", "desc": "很多面向对象语言都支持两种继承：接口继承和实现继承。前者只继承方法签名，后者继承实际的方法。因为JavaScript函数没有签名，所以实现继承时JavaScript唯一支持的继承方式，而这主要是通过原"}, {"id": "6844904067509010439", "title": "《模块化系列》snowpack，提高10倍打包速度", "desc": "前几天听一个朋友说到 snowpack, 便去去看了下这个包是干什么的，看了下官网，发现这个东西还是蛮有意思的。号称 无需打包工具（Webpack，Parcel）便能将代码结果实时展现在浏览器中。可以先看以下的图，是不是很诱人？ snowpack 以 ES Modules 为主…"}, {"id": "6953824821029371934", "title": "数组去重N种方式", "desc": "数组去重不管是面试还是平常业务都会经常遇到，一般同学见状都会嘴角微微上扬，反手就是一个嵌套循环，嘿嘿~深藏功与名.... 还有没有其它去重方式呢？今天来总结一下有哪些花里胡哨的去重方法！！！ 1、Se"}, {"id": "6844904064417792007", "title": "编写高质量箭头函数的5个最佳做法", "desc": "箭头功能值得流行。 它的语法简洁明了，使用词法绑定绑定 this，它非常适合作为回调。在本文中，通过了解决学习5个最佳实践，以便我们可以从中学习更多箭头函数的知识，并从它身上获得更多的好处。 1. 箭头函数名推断 JS 中的箭头函数是匿名(anonymous)的:函数的name…"}, {"id": "6844903619645407240", "title": "使用 Node.js 开发简单的脚手架工具", "desc": "像我们熟悉的 vue-cli，react-native-cli 等脚手架，只需要输入简单的命令 vue init webpack project，即可快速帮我们生成一个初始项目。在实际工作中，我们可以定制一个属于自己的脚手架，来提高自己的工作效率。 为什么需要需要脚手架？ 减少…"}, {"id": "6844903842597830669", "title": "精读《Monorepo 的优势》", "desc": "1. 引言 本周精读的文章是 The many Benefits of Using a Monorepo。 现在介绍 Monorepo 的文章很多，可以分为如下几类：直接介绍 Lerna API 的；介绍如何从独立仓库迁移到 Lerna 的；通过举例子说明 Monorepo 重…"}, {"id": "6990952531761299487", "title": "发布订阅模式vs观察者模式", "desc": "观察者模式和发布订阅模式在实际项目中非常常见，很多优秀的第三方库也是借鉴了这两种设计模式的思想 —— 比如 Vue，Vue Event，React Event，RxJS，Redux等。"}, {"id": "6844903765049344008", "title": "又双叒叕是一个 canvas 动画", "desc": "这个动画效果是在网易云音乐 app 上看到的，抱着复习 canvas 的心态来实现。 效果参照已实现的上方链接。 1. 参数设置 2. 编写构造函数 我们知道，动画的原理，就是趁脑子不注意反应不过来的时候偷偷换上一副差不多的画面，这样一步一步的替换，就形成了动画，而这一步一步就…"}, {"id": "6938581666742927390", "title": "面试必备知识点之深浅拷贝", "desc": "在javascript中除了几大基本类型以外其他的都为引用类型。 基本类型值在内存中占据固定大小，保存在栈内存中。 引用类型的值是对象，保存在堆内存中，而栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。 以上述对象为例浅拷贝基本只能拷贝一层对象，对于对于复杂嵌套场景…"}, {"id": "6844903839733121038", "title": "「读懂源码系列3」lodash 是如何实现深拷贝的（上）", "desc": "上一篇文章 「前端面试题系列9」浅拷贝与深拷贝的含义、区别及实现 中提到了深拷贝的实现方法，从递归调用，到 JSON，再到终极方案 cloneForce。 不经让我想到，lodash 中的 _.cloneDeep 方法。它是如何实现深拷贝的呢？今天，就让我们来具体地解读一下 _…"}, {"id": "6844904067211198472", "title": "package.json从入门到跑路", "desc": "前端在入门的时候，第一个了解的东西，就是package.json文件，这个文件伴随着所有的前端开发，生生不息。 1. 字段详解 定义: name在一个非分发(上传至npm库)项目中，仅仅作为项目名称使用。而如果作为一个模块、插件、类库分发的项目，name不仅是一个项目名称，还定…"}, {"id": "6882325209576112141", "title": "浏览器缓存机制", "desc": "如果面试一个要求一定的工作经验的前端岗位的话，前端缓存是一个绕不过去的面试题。然而大部分前端在工作中接触较少或者没有去专门学习过，可能就导致回答不上问题或者都是在面试之前临时抱佛脚，面试完成后大脑又如白纸。 工作这么多年，虽然也常常遇到此类问题，但大多时候都是临时查找相关文章学…"}, {"id": "6844903624414330893", "title": "Vue自定义组件事件传递：EventBus部分", "desc": "我会通过两种不同的交互方式，它们对于父子组件间数据交互和兄弟组件间数据交互。 由于篇幅关系，本文主要介绍EventBus进行数据消息传递；关于运用Vuex框架进行状态管理在下一篇文章中介绍。 本章节会有大量的代码示例，为了让读者阅读轻松，做如下目录和组件介绍。本章节主要运用了两…"}, {"id": "6844903645960470542", "title": "一起来学习如何用 Node 来制作 CLI", "desc": "提起 CLI，\b不由得会想起 vue-cli 和 angular-cli，它们都是基于 Node 的命令行工具。 假设你现在要建立一个新项目 ，这个项目配置和之前的项目配置是一样的。在你没有 CLI 的时候，你只能通过复制、粘贴来进行。然而，当你有了 CLI，你就可以通过命令来…"}, {"id": "6989224083737182222", "title": "web前端—前端三剑客之JS-ES6(12)：Module模块", "desc": "菜鸟教程：https://www.runoob.com/w3cnote/es6-module.html\\ 导出文件需要使用export或者export default命令 导入文件需要使用import"}, {"id": "6844903558865911816", "title": "网页图片加载优化方案", "desc": "饿了么 App 中新零售项目主要是以图片展示为主，引导用户点击轮播广告栏或者店铺列表进入指定的商品页面，因此页面中包含了大量图片，如搜索框下面的轮播广告栏、中部的促销栏以及底部的店铺列表，这些区域中都有大量的展示图片。因此图片的加载速率直接影响页面的加载速度。下面将从图片加载存…"}, {"id": "6844903729414537224", "title": "JavaScript黑客是这样窃取比特币的，Vue开发者不用担心！", "desc": "如果你是JavaScript或者区块链开发者，如果你有关注区块链以及比特币，那么你应该听说了比特币钱包Copay被黑客攻击的事情。但是，你知道这是怎么回事吗？ 有人说什么Vue可能遭受攻击，其实没有这回事，因为黑客代码只会在copay项目中正确执行。只有copay项目的pack…"}, {"id": "6967692700875243550", "title": "全网最详gg-editor教材-右键菜单", "desc": "​ 与 g6-editor 相比的话，在 ContextMenu 也同样少了许多功能，需要自己做更多在在不同选中状态下的差异显示隐藏控制。 如果业务需要的右键菜单功能比较复杂的话，可能需要像 Deta"}, {"id": "6944903762204950541", "title": "前端JS高频面试题---1.发布-订阅模式", "desc": "发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到状态改变的通知。 订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（…"}, {"id": "6997954524388261918", "title": "JavaScript日常开发中常用的Object操作方法", "desc": "本文内容： 介绍对象的两种类型 创建对象并添加属性 访问对象属性 删除对象属性 作为函数参数 枚举对象的属性 数据类型检测 Object常用的API 一、JavaScript对象有两种类型 二、创建对"}, {"id": "6844904049645453325", "title": "[译]5 个奇怪的只会在 JS 里才发生的趣事", "desc": "JavaScript 是一门棘手的语言，就其代码的解析和运行方式，容易让人感觉困惑。这是一门面向对象的语言，但很多年来语言标准里没有类。它最初是为浏览器创造的，但现在也可以在服务器上运行，还可以操作文件系统。 多年以来，我碰到了一些特殊且有趣的代码。下面展示的这些例子仅适用于 …"}, {"id": "6997804921814777864", "title": "【重温JS】JavaScript 巩固基础day19-运动函数封装", "desc": "☆☆☆ 今天学习的内容: 开始学习**( 运动 函数封装 )** !重要! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! day19"}, {"id": "6986655794951520292", "title": "web前端高级JavaScript - 数组和对象的浅克隆与深克隆", "desc": "浅克隆 实现浅克隆的几种方案 对象的浅克隆方案一：基于循环实现 对象的浅克隆方案二： 展开运算符 对象的浅克隆方案三：基于Object.assign()函数 数组浅克隆方案一：基于forEach或ma"}, {"id": "6844904004518936590", "title": "Quill 自定义富文本功能", "desc": "富文本是给输入的内容增加样式，Quill 提供 api 的方式去判断修改 DOM ，而不像很多其他的编辑器通过遍历 DOM 树的方式来做到这点。并且 Quill 支持定制化功能，接下来来了解下如何使用 Quill 及它的相关源码。 参数一：可以是dom，可以选择器(自动去转换成…"}, {"id": "6844903533393772557", "title": "[译] 如何取消你的 Promise？", "desc": "在 JavaScript 语言的国际标准 ECMAScript 的 ES6 版本中，引入了新的异步原生对象 Promise。这是一个非常强大的概念，它使我们可以避免臭名昭著的 回调陷阱。例如，几个异步操作很容易写成下面这样的代码： 正如你所看到的，我们嵌套了几个回调函数，如果想…"}, {"id": "6991999353665634311", "title": "Lerna 基本概念", "desc": "引子 最近工作上要接触相关的东西，开始熟悉文档，进行相关翻译记录，方便以后查阅。 基于 Lerna 版本 : v3.22.1 。 Lerna 是一个管理有多个包的 JavaScript 项目的工具。 "}, {"id": "6994246865487298591", "title": "JS事件 （事件流，事件监听，事件委托）", "desc": "事件概念 ：用户或浏览器自身执行的某种动作。 事件按照事件流（从页面中接收事件的顺序）可以分为IE团队提出的事件冒泡，Natescape团队提出的事件捕获，和把它们综合起来的DOM2级事件。"}, {"id": "6967145574244024357", "title": "JS中的节流与防抖函数", "desc": "例子 input触发键盘输入事件，将输入内容发送到后台： 可以看到，我们每次按下键盘输入的时候，都会去请求，这样很浪费资源，一般应用中都是等待用户输入完整的字符，再去请求后台，所以我们用防抖函数来优化"}, {"id": "6954676012768575525", "title": "前端工程师进阶要点三——代码的封装性、可读性和正确性｜小册免费学", "desc": "函数的封装性是指把函数相关的数据和行为结合在一起，对调用者隐藏内部处理过程。 函数的封装性常常被忽略，并且很容易被破坏。"}, {"id": "6844904119342202888", "title": "深入的理解数组和对象的解构赋值。", "desc": "es6提供了一个非常好的特性，即变量的解构赋值。从而我们可以方便的从数组和对象中提取数据并将它们赋值给变量。这是非常必要的。先来看在这个新特性发布之前我们是如何从数组中提取数据的。如下： 为了从 nums 数组中提取到数据，我们多次重复着相同的代码。es6的解构赋值将会让这个操…"}, {"id": "6844903937405878280", "title": "如何手写一个JS中的New方法", "desc": "我们先写一段很简单的代码，定义一个Person类, 使用new来创建一个Person的实例. 查看一个控制台中tb实例的. 两个属性, firtName和lastName, 并均以赋值. 原型上有一个getFullName方法和一个构造器. 分析完实例后, 我们就很容易知道, …"}, {"id": "6975694337698955295", "title": "01.原型(prototype)和原型链(prototype chain)", "desc": "[toc] 一.原型 1. 函数的prototype属性(图) ** 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)* ** 原型对象中有一个属性co"}, {"id": "6984623823928688654", "title": "前端路由", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 路由的概念 其实早先年没有前端路由的概念，只是随着前端的发展，才有了前端路由。"}, {"id": "6844903507225477127", "title": "vscode 前端插件推荐", "desc": "推荐一波常用的 vscode 前端插件，让你的写代码的效率提高"}, {"id": "6886263418907688974", "title": "JavaScript 颜色处理库 Chroma.js 应用", "desc": "许多开发人员用 CSS 设计颜色代码和比例，从一些在线调色板中选择颜色。然而，它并不是每个人都喜欢的工具。好消息是我们有 Chroma.js，这是一个很小的库，对于在 JavaScript 代码中生成色阶有很大帮助。这意味着您可以直接将其插入到 JavaScript 代码框架中…"}, {"id": "6994362222692548621", "title": "javaScript中的this及改变指向", "desc": "普通函数的this指向调用者 this，其实就是调用对象是谁，英文高大上 构造函数 箭头函数 箭头函数没有this 或者说箭头函数的this指向外层函数的this，并且箭头函数的this不可改变，可以"}, {"id": "6897792633898221575", "title": "犀牛书作者：最该忘记的 JavaScript 特性", "desc": "JavaScript 这门语言的第一个演示版差不多就在 25 年前诞生。 1995 年秋天，这门语言在 Netscape Navigator 的一个测试版中发布，当时叫 LiveScript。那一年的年底，又被改名为 JavaScript。也是在那一年，David Flanag…"}, {"id": "6984983846009716772", "title": "var、let、const、解构、展开、new、this、class、函数", "desc": "#引言 JS系列暂定 27 篇，从基础，到原型，到异步，到设计模式，到架构模式等，此为第一篇：是对 var、let、const、解构、展开、函数 的总结。 let在很多方面与 var 是相似的，但是 "}, {"id": "6987354015767986213", "title": "腾讯地图输入提示", "desc": "当用户在地图的搜索框输入地点的关键词时，此时搜索框下拉列表将会有相关词供用户选择，即根据输入文本片段即显示相关的匹配信息，节省了用户的输入成本。"}, {"id": "6988022306173878308", "title": "LeetCode刷题，棒球比赛（682）", "desc": "棒球比赛 比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作， 思路：使用栈的方式来进行数据的获取和计算。"}, {"id": "6844903906309308423", "title": "【第三期】本周我们 37 人学了什么", "desc": "程序员这行如果想一直做下去，那么持续学习是必不可少的。 大家找工作通常会喜欢技术氛围好点的团队，因为这样能够帮助自己更好的成长，但是并不是每个团队都拥有这样的氛围。于是萌发一个念头，想建立一个地方，让一些人能在这块地方记录自己学习到的内容。这些内容通常会是一个小点，可能并不足以…"}, {"id": "6844903983526445064", "title": "手绘风格的 JS 图表库：Chart.xkcd", "desc": "图表库千万个今天 HelloGitHub 给大家推荐个很有“特色”的图表库：一个手绘风格的 JS 图表库 —— Chart.xkcd，快收起你紧绷、严肃的面容让我们一起看看用手绘风格展示数据的效果。 Chart.xkcd 是一个图表库，可绘制“非精细”、“卡通”或“手绘”样式的…"}, {"id": "6984587794131714079", "title": "JS模块化规范", "desc": "本文主要是介绍了关于JS中的模块化规范包括（CommonJS,AMD,CMD,Babel-ES6)。"}, {"id": "6984584945377214477", "title": "手写Promise-知其然知其所以然", "desc": "首先，我们知道，Promise是率先由commonJs提出来的一种异步解决方案，后来在ES6中正式引入,成为我们处理异步的强有力的工具。 我们通过自己手动的方式进行梳理一遍Promise是实现的过程，"}, {"id": "6954536631718117384", "title": "这可能是你看过的最细的有关块级作用域的文章——用debug向你展示块级作用域", "desc": "前言 如果要深入学习JS，作用域是必须了解掌握的一个知识点。何为作用域，这里不做过多叙述。根据MDN简单的定义：当前的执行上下文(如果不了解什么是执行上下文，可以看看我写的另外一篇文章——从执行上下文"}, {"id": "6873424205791100942", "title": "一次搞懂-JS事件循环之宏任务和微任务", "desc": "众所周知，JS 是一门单线程语言，可是浏览器又能很好的处理异步请求，那么到底是为什么呢？ JS 的执行环境一般是浏览器和 Node.js，两者稍有不同，这里只讨论浏览器环境下的情况。 JS 执行过程中"}, {"id": "6910500073314975758", "title": "按照 Promise/A+ 手写Promise，通过promises-aplus-tests的全部872个测试用例", "desc": "本文主要讲述如何根据 Promises/A+ 规范，一步步手写一个 Promise 的 polyfill，代码中会配上对应的规范解释。 1. 定义需要的常量和工具方法 2. Promsie 构造函数 Promise 的决议逻辑是 Promise 的一大重点，也是一大难点，把这个…"}, {"id": "6940573046067593252", "title": "浅谈深浅拷贝｜手摸手带你入坑", "desc": "先通过 JSON.stringify 将对象转为字符串再重新序列化为对象。 如有错误，望各位不吝赐教。"}, {"id": "6857703952814145550", "title": "一次性精通javascript原型/继承/构造函数/类的原理（下）", "desc": "上篇我们讲解了构造函数和原型等前端概念的原理，知道了实例之间如何通过构造函数的prototype来共享方法，下篇我们主要看下用es6的class怎么来实现，以及class的继承等。同上篇一样，重点在于背后的原理，只有懂得了为什么要这么设计，我们才能真正的说【精通】。 假如下篇你…"}, {"id": "6973632970783457317", "title": "高性能 JavaScriptの六 -- 老生常谈 Ajax", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 Ajax Ajax全称： Asynchronous Javascript And XML （异步 JavaScript 和 XML） 有关Ajax"}, {"id": "6986089319614119973", "title": "javascript proxy : clear explaination and pratical examples ", "desc": "what is proxy and how to use it .........................."}, {"id": "6971334769913102344", "title": "JavaScript - 面向对象编程总结", "desc": "面向对象编程介绍 面向过程编程： 朝着步骤实现 向对象编程 OOP：以对象功能来划分问题，而不是步骤 特点：封装性，继承性，多态性 ES6中的类和对象 思维特点： 取对象共用的属性和行为组织（封装）成"}, {"id": "6994072734871322632", "title": "【日拱一卒】JavaScript异步编程 一", "desc": "这是我参与8月更文挑战的第8天，活动详情查看： 8月更文挑战”  前言 Async JavaScript，聊聊JS异步编程。这本书也很薄，以一些例子为主。但随手翻了翻，大部分内容都属于不知所云。就大概"}, {"id": "6966013658727972895", "title": "Promise.prototype.finally 的作用，如何自己实现 Promise.prototype.finally", "desc": "## `Promise.prototype.finally()` 的作用 `Promise.prototype.finally()` 是 ES2018 新增的特性，它回一个 `Promise` "}, {"id": "6996080279211212807", "title": "面向对象-构造函数使用", "desc": "上一篇我们基本认识到了什么是面向对象（传送门），今天来看看面向对象的三大特性,构造函数使用的一些注意事项。以及对构造函数进行一些优化"}, {"id": "6844904040912912397", "title": "js中进行数字,超大金额(千位符)格式化处理", "desc": "方法三:把数字通过toString，转换成字符串后，打散为数组，再从末尾开始，逐个把数组中的元素插入到新数组（result）的开头，每插入一个元素，counter就计一次数（加1），当counter为3的倍数时,利用取余的方式,就插入一个逗号，但是要注意开头（i为0时）不需要逗…"}, {"id": "6994819831463673886", "title": "聊聊js的作用域", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 前言 在上一篇文章中，我们刚好讲了const和let命令，里面简单说了点作用域的内容。那么就书接上回，再来讲讲js的作用域。 在es6之前"}, {"id": "6988022074845429791", "title": "JSZip库文件压缩与解压", "desc": "# JSZip库 文件压缩 、文件解压缩并展示内容 jszip 是一个集成zip文件创建、读取和编辑功能的JavaScript库"}, {"id": "6995714954061938724", "title": "前端常用的函数封装js篇（四）", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 图片转base64 因为网页中使用base64格式的图片时，不用再请求服务器调用图片资源，减少了服务器访问次数，所以我们有时候会将图片转成"}, {"id": "6987782802767314958", "title": "skulpt开发指南（一）快速上手", "desc": "skulpt除了基本的python运行之外还可以开发第三方模块，用javascript编写模块功能，实现python语法的调用，比如你可以用js的echarts来实现pyecharts，然后就可以在线"}, {"id": "6911327118483947528", "title": "前端UI组件库搭建和设计", "desc": "我们在开始开发一个组件之前，应该要对这个组件做一个解构，了解这个组件中需要有哪些零件，以及这些零件之间的层级结构和关联关系。以确保我们可以通过api实现他们之前的逻辑关系，将所有零件拼装成一个完整的组件。我们可以通过组件图的方式来展示这些结构和关系，这样我们再下手时，有依据可以…"}, {"id": "6971370499150446600", "title": "input[type='file'] 连续上传同一个文件不触发 onChange 事件 或 Upload 组件只调用了一次 onChange 函数", "desc": "input[type='file'] 连续上传同一个文件不触发 onChange 事件 或 Upload 组件只调用了一次 onChange 函数 原因为 onChange 的触发条件是 value的"}, {"id": "6999227087223521294", "title": "数组扁平化的实现", "desc": "数组的扁平化 1. 什么是数组扁平化 所谓数组的扁平化, 就是指将一个有着多层嵌套数组转换成一个没有嵌套的数组. 例如: 将 [1, [2, 3], [4, [5, [6]]]] 转换成为 [1, 2"}, {"id": "6844903558832193550", "title": "使用Vue的nextTick引发的执行顺序之争", "desc": "在Vue中有一个nextTick方法，偶然一天，我发现不管代码的顺序如何，nextTick总是要比setTimeout先要执行。同样是排队，凭什么你nextTick就要比我快？ 开局一道题，内容全靠编。（在node下运行，答案在文末给出。） 这道题想必大家都见得很多了，答案脱口…"}, {"id": "6992777421225197605", "title": "深入理解闭包", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 闭包 闭包是我们函数的一种高级使用方式 在聊闭包之前我们要先回顾一下 函数 函数的两个阶段 我们一直说函数有两个阶段 定义阶段 调用阶段 函"}, {"id": "6992764476009218084", "title": "常用的数组方法", "desc": "这篇文章主要总结了JS中数组的常用方法，结合之前的学习的笔记整理的，如有不对，请各位大佬多多指教！！！"}, {"id": "6844903507548438542", "title": "用wxDraw.js制作酷炫的小程序canvas动画『wxDraw 小程序界的zrender』", "desc": "canvas 是HTML5的一个重要元素，它能够高效的绘制图形，但是过于底层，且粗糙的Api，导致开发者很难使用它来做较为复杂的图形， 而且它的即时绘制无记忆特性，使得它内部的图形并不支持动画更不支持一切交互事件。 这样的问题出现在所有支持canvas的客户端上同样出现在 微信…"}, {"id": "6844903793180557326", "title": "知多一点有限状态自动机", "desc": "hello~亲爱的观众老爷们大家好~最近 LeetCode 上的算法已经刷得差不多了（剩下都是 hard，不看答案是不会做了），是时候小结一下在刷题过程中，学到的一些有意思的知识点。相信大家对 React 都有一点了解，可能也看过类似的说法：“React 把组件看成是一个状态机…"}, {"id": "6844903567325659144", "title": "万物皆空之 JavaScript 原型", "desc": "ES6 的第一个版本发布于 15 年 6 月，而本文最早创作于 16 年，那也是笔者从事前端的早期。在那个时候，ES6 的众多特性仍处于 stage 阶段，也远没有现在这么普及，为了更轻松地写JavaScript，笔者曾花费了整整一天，仔细理解了一下原型——这个对于一个成熟的J…"}, {"id": "6994245950742986789", "title": "使用docx 生成模板", "desc": "首先使用的是docx 官网 https://github.com/dolanmiu/docx api https://docx.js.org/#/ 基本的文本 图片 table 都可以实现以及页眉页脚"}, {"id": "6960858517335080973", "title": "JavaScripts高阶（9）前端必须了解的函数的三种角色", "desc": "1、普通函数 堆栈内存 作用域链 2、类（构造函数） prototype 原型 __proto__ 原型链 实例 3、普通对象 和普通的obj没啥区别，就是对键值对的增删改查 三种角色没有必然关系 1"}, {"id": "6998681016395595812", "title": "基于el-calendar二次开发的若干问题", "desc": "需求背景 指定某一月完整日历，可通过上下月按钮翻月； 日历项非本月不可点击，自定义日历项渲染内容； 翻月时应判断目标月份在不在指定时间段范围，在则请求数据，不在则给taost提示； 日历项包含inpu"}, {"id": "6844903618294841357", "title": "浅谈混合应用的演进", "desc": "开篇想以这样的方式开头，从 APP 开始火到现在，前端同学就一直想要写 APP，各方技术也是为了让前端同学写上 APP 操碎了心。 为什么要前端同学来写 APP，站在整个技术链上来看，都是在做页面呈现，页面交互，对于技术而言只是将产品在不同的端上进行呈现，所以很早之前就有提倡说…"}, {"id": "6957855724059754533", "title": "使用装饰器模式强大你的 fetch", "desc": "1. fetch() 很好，但你可能希望更好 fetch() API允许你在web应用程序中执行网络请求。 fetch()的用法非常简单:调用fetch ('/movies.json')来启动请求。当"}, {"id": "6854573208331354126", "title": "froala + vue + plupload替换自带上传功能", "desc": "最近由于产品的要求，替换掉老系统的vue ueditor富文本编辑器，换成froala。 接着去入口文件 main.js引入依赖。 上面这些是基本配置，但是我不建议大家用insertImage这个自带的图片上传功能，所以在上面的 toolbarButtons: [ 'align…"}, {"id": "6844903670849470472", "title": "5分钟即可掌握的前端高效利器：JavaScript 策略模式", "desc": "我们在写代码的时候，一定也遇到过许多类似的场景。随着经验的增加，我们对于这些常见场景的处理越来越得心应手，甚至总结出了针对性的“套路”，下次遇到此类问题直接运用“套路”解决，省心又省力。这些在软件开发过程中逐渐积累下来的“套路”就是设计模式。 设计模式的目标之一就是提高代码的可…"}, {"id": "6844904166528139277", "title": "script 标签的加载机制 | 前端查漏补缺", "desc": "我们平时“搬砖”只关注业务代码，页面脚本现在都由 webpack 帮我们自动组装，可能会忽略页面 script 的一些细节。 不太明白没有关系，必须承认我做了那么多年也对这块朦朦胧胧（没有具体实践过），下面会从简单的 demo 帮大家捋清这些概念。 利用 koa 起一个简单的 …"}, {"id": "6933615540455866375", "title": "ES6指北【3】——5000字长文带你彻底搞懂ES6模块", "desc": "玩过FPS游戏的朋友应该知道，一把装配完整的M4步枪，一般是枪身+消音器+倍镜+握把+枪托。 OK，你刚才做了一件事情，就是把m4步枪拆成了五个部分，你拆分的每一个部分就是一个模块【module】，你拆分的这个过程就是模块化【modularization】。 帮助我们迅速定位问…"}, {"id": "6990627379848675358", "title": "利用Docxtemplater对word模板进行数据渲染导出", "desc": "参考地址：https://docxtemplater.readthedocs.io/en/latest/generate.html#browser"}, {"id": "6844903983480340493", "title": "【JS 口袋书】第 10 章：使用异步 JavaScript", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 如果你问我，我会说 JS 挺强大的。作为一种在浏览器中运行的脚本语言，它可以做所有类似的事情： 等等。在第 8 章中，咱们从数组开始构建了一个 HTML 表格。 硬编码数组是一个同步数据源，也就是说，可以直接在…"}, {"id": "6994089148793487390", "title": "聊聊js的this指向", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 前言 昨天刚好讲了箭头函数（文章在这里），里面有稍微讲了箭头函数的this指向，今天恰好把其它情况的this指向一起合并来讲讲。 this指"}, {"id": "6994083501091848200", "title": "JS知识体系", "desc": "Script元素 属性 async：立即下载、立即执行、不阻塞页面加载，只能用于外部脚本，异步脚本不可修改DOM defer：立即下载、页面加载完成执行，全部在DOMContentLoaded之前执行"}, {"id": "6994079876529520676", "title": "DOM事件机制", "desc": "1.W3C标准 2002年，W3C发布标准《DOM Level 2 Events Specification》。 它规定浏览器应该同时支持两种调用顺序。 首先按照爷爷=>爸爸=>儿子的顺序看有没有函数"}, {"id": "6994073742938734628", "title": "JS从执行上下文了解this", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 为什么要有this? 先看一段代码 按照常理来说，大多数语言在执行bar.printName()的时候会输出bar对象中的myName而不是"}, {"id": "7004821779206111269", "title": "数组元素去重方法总结", "desc": "有很多情况我们需要将服务端返回的数据，进行去重，那么都有哪些方法可以实现呢？本文列举了六种解决方案，一起来看看都有哪些吧~"}, {"id": "6996627657253191694", "title": "潮流前端周刊（第43期）- 好吃的螺蛳粉", "desc": "周末出去逛了逛，在武林「西环肥仔」吃了个杭州第一的螺蛳粉。 前端技术 Flutter 仿自如 App 裸眼 3D 效果 https://juejin.cn/post/69914090837651292"}, {"id": "7002197849794412557", "title": "RBAC权限设计-后台管理-页面级别权限应用 - 使用动态添加路由addRoutes方法会出现的 Bug 及解决方案", "desc": "RBAC权限设计-后台管理-页面级别权限应用 - 使用动态添加路由addRoutes方法会出现的 Bug 及解决方案 为了达成不同的帐号登陆系统后能看到不同的页面，能执行不同的功能的目标..."}, {"id": "6968632189894262791", "title": "手把手带你10分钟手撸一个简易的Markdown编辑器", "desc": "最近我在项目中需要实现一个 markdown编辑器 的需求，\b并且是以React框架为开发基础的，类似掘金这样的： 我的第一想法肯定是能用优秀的开源就一定用开源的，毕竟不能老是重复造轮子。于是我"}, {"id": "7001687988778303518", "title": "漫谈RxJS之实战篇", "desc": "上篇文章我们谈到了一些基础概念，本篇文章我们结合实际案例来继续探索RxJS。 带来了什么新问题？ 不得不说，Reactive Extensions（Rx）是一种非常棒的编码模式，不过我们得结合实际的业"}, {"id": "6844904079974465544", "title": "💗前端需要了解的计算机网络知识， 这一篇就够了！(图文并茂，万字长文，点赞收藏哦！)", "desc": "上一篇讲了非科班前端需要掌握的、基本的计算机组成原理。 这篇开撸计算机网络。 这些内容其实比较枯燥，但我采取图文并茂的形式，并且对于不重要的知识会标注，尽量减少阅读的枯燥感。啥也不说了，喝口水，开撸！ 计算机网络：是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接…"}, {"id": "7005779972086300709", "title": "【算法】（冒泡 | 快速 | 归并 ） 排序", "desc": "目录 排序分类 交换排序 - 冒泡排序 交换排序 - 快速排序 归并排序 快排和归并区别 十大基本排序 零、排序分类 一、 交换排序 - 冒泡排序 1.1） 冒泡排序优化 **改进冒泡排序： **设置"}, {"id": "7007088364797034510", "title": "通过lodash的cloneDeep学习深拷贝", "desc": "lodash 版本 5.0 。 主要分析如何深克隆，区分对象，递归遍历，解决循环引用，获取对象属性，克隆函数。"}, {"id": "6996840989381885988", "title": "潮流前端周刊（第44期）- 下腰女孩", "desc": "周六拍于城西银泰下腰女孩，胖嘟嘟还挺可爱。 前端技术 从前端视角看浏览器隐身模式下你是如何被追踪的 https://segmentfault.com/a/1190000040475726 从科普和技术"}, {"id": "6998316553817047077", "title": "JavaScript 的核心特性--内置对象介绍(Math/Date/ 数组/字符串)", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 JavaScript 内置对象介绍 MDN介绍 MDN链接 Math对象 静态成"}, {"id": "6993840419041706014", "title": "浅谈前端路由原理hash和history", "desc": "🎹序言 众所周知， hash 和 history 在前端面试中是很常考的一道题目。在学习本文内容之前，周一对 hash 和 history 的认知可能就在 hash 的 url 里面多了个 # ，而"}, {"id": "7005784826385022983", "title": "Sentry Web 性能监控 - Web Vitals", "desc": "Web Vitals 是谷歌定义的一组度量指标，用于度量渲染时间(render time)、响应时间(response time)和布局偏移(layout shift)。每个数据点都提供了关于应用程序"}, {"id": "7001077372149563405", "title": "JavaScript事件对象", "desc": "事件对象其实就是event对象，在我们操作DOM发生事件时，所有的相关信息都会被集中存储在这个event对象中，这个对象中包含了被发生事件的元素，发生事件的类型以及可能与特点事件相关的其他数据。"}, {"id": "6959019076983209992", "title": "Vue 源码解读（8）—— 编译器 之 解析（上）", "desc": "深入理解 Vue 编译器的解析过程，理解如何将类 html 模版字符串转换成 AST 对象 ...."}, {"id": "6998464365380927502", "title": "快算算给你女朋友买礼物要花多少钱 🐱‍🏍! (仿得物微信小程序购物功能🤷‍♀️)", "desc": "前言 七夕刚刚过去，想必各位为了心爱的那个ta💕在得物上花了不少钱吧。正好最近暑假正在学习微信小程序开发，与两个志同道合的小伙伴共同开发了一个仿得物APP微信小程序。这篇文章就给大家主要分享一些JS"}, {"id": "6939698263524605965", "title": "只用 Markdown 就写出好看的简历，在线简历应用闪亮登场！", "desc": "大家都知道金三银四是招聘的季节，各大互联网公司都开始了春招。最近有很多人来找我帮忙看简历，简历的模板可谓参差不齐，有过分炫酷，还有一些朋友直接把 word 丢了过来，排版就显得比较乱。 一番调研后，大家还是大多数使用简历最常用的方式还是 word、其次是 Markdown。 作…"}, {"id": "7003206663813496846", "title": "聊聊事件循环机制", "desc": "同步和异步 我们都知道代码是一行一行执行的，但是有时候如果前面的代码执需要花更长的时间，所以，我们可以让后面的代码先执行，而不会让页面加载的很慢，然后JavaScript是单线程语言，但是他有同步和异"}, {"id": "6859125809655840776", "title": "编写高质量可维护的代码：优化逻辑判断", "desc": "if else、switch case 是日常开发中最常见的条件判断语句，这种看似简单的语句，当遇到复杂的业务场景时，如果处理不善，就会出现大量的逻辑嵌套，可读性差并且难以扩展。 下面我们会分别从 JavaScript 语法和 React JSX 语法两个方面来分享一些优化的技…"}, {"id": "7002421854535155742", "title": "深入理解包装类及其所以常用方法和属性", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 前言 你是否想了解什么是包装类？ 或者想了解包装类的原型上定义了哪些方法和属性？ "}, {"id": "7004019825924112391", "title": "继承方式有哪些，优缺点都在这了", "desc": "继承？何为继承？ 通俗易懂的理解： 你爸爸名下的财产以后都是你的。也就是说子类可以拥有父类的所有东西。并且子类可以在自己身上扩展方法。 那么？继承都有哪些呢？ 1.原型链继承 2.经典继承（构造函数的"}, {"id": "6844903592349040654", "title": "关于Cookie、session和Web Storage", "desc": "一边学习前端，一边通过博客的形式自己总结一些东西，当然也希望帮助一些和我一样开始学前端的小伙伴。 cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。用户验证这种场合一般会用 session 1、 由于HTTP协…"}, {"id": "6844903683310747656", "title": "[译文]优雅的现代JavaScript设计模式: 冰冻工厂", "desc": "从上个世纪九十末开始,我就开始断断续续的从事JavaScript的开发工作.初始,我并不喜欢它.但是自从了解了ES2015(也叫ES6),我开始认为JavaScript是一个强大而且杰出的动态编程语言. 随着时间流逝,我掌握了几种能够代码更加简洁,可测试以及更加有表达力的编码模…"}, {"id": "6887021259482365960", "title": "JS垃圾回收机制", "desc": "简称GC，它会周期性运行以释放那些不需要的内存，否则，JavaScript的解释器将会耗尽全部系统内存而导致系统崩溃。 具体到浏览器中的实现，通常有两个策略：标记清除和引用计数。 引用计数法是最初"}, {"id": "6844904072462467080", "title": "Vue源码中9个可借鉴的基础方法", "desc": "1、基础判断2、检查是否是原始值3、快速对象检查4、获取值的原始类型字符串5、严格的对象类型检查6、严格的正则类型检查7、检查是够是有效的数组下标8、值转换为实际的字符串9、值转换为数字以进行持久化"}, {"id": "6844903635474710541", "title": "[翻译]阮一峰webpack教程（Demo集合）", "desc": "Webpack用于构建Javascript模块脚本来给浏览器使用的前端工具。 Webpack允许多个入口文件存在，在多页面的app中很有用，每个页面有不同的入口文件。 加载器(Loaders)是一些预处理器，用于在Webpack的构建过程前，将你app里的一些资源文件进行转换。…"}, {"id": "6844904058466074637", "title": "异步网络请求xhr、ajax、fetch与axios对比", "desc": "1. XMLHttpRequest对象 现代浏览器，最开始与服务器交换数据，都是通过XMLHttpRequest对象。它可以使用JSON、XML、HTML和text文本等格式发送和接收数据。 在后台向服务器发送数据。 使用起来也比较繁琐，需要设置很多值。 早期的IE浏览器有自己…"}, {"id": "6979092347439022111", "title": "1.8 JS-秒懂上下文、作用域、作用域链、变量提升", "desc": "秒懂上下文、作用域、作用域链、变量提升。不同作用域变量的有效期、如何运用作用域链的知识进行性能优化、JS 变量的三阶段、let、const、var、function变量提升的区别"}, {"id": "6844903698179555341", "title": "前端与人工智能", "desc": "好吧，我承认这个标题有点太大了，其实我更想要说的是“在人工智能时代、在人工智能公司、在人工智能部门，我们前端er的角色到底是怎样的”。 众(ge)所(ren)周(yi)知(yin)，现在或者说未来的的前端发展有这么几个方向，前端+Node.js、前端+各种端(包括IOT)、前端…"}, {"id": "6844903573134770189", "title": "vue 服务端渲染折腾记录", "desc": "为了解决 vue 项目的 seo 问题，最近研究了下服务端渲染，所以就有了本文的记录。 项目的主要目录结构如上所示，其中 package.json 请查看项目。关于为什么要使用状态管理库 Vuex，官网有明确的解释。后文有例子帮助进一步理解。 接下来我们暂时不管服务端渲染的事情…"}, {"id": "6912331982701592590", "title": "Bpmn-js自定义文件说明", "desc": "在使用 bpmn-js 绘制流程图时，可能会存在需要开发者自己定义属性或者元素的情况，为了保证符合官方定义，对官方文档进行了汉化说明。以下说明基于个人理解，可能与真实作用有出入，希望大家指出不正确或者意义不明的地方，我好加以改正，谢谢！ 由于工作需要（其实不是很需要），在公司项…"}, {"id": "6844903631808888839", "title": "window.open 被浏览器拦截解决方案", "desc": "当浏览器检测到非用户操作产生的新弹出窗口，则会对其进行阻止。因为浏览器认为这可能是一个广告，不是一个用户希望看到的页面。 1. 打开新窗口的代码绑定到click的事件回调中，就可以避免大部分浏览器对窗口弹出的拦截： 2. 通过form表单提交实现(亲测, 会被拦截) 3. 先弹…"}, {"id": "6844904087507435534", "title": "JavaScript实现图片合成下载", "desc": "最近项目一个功能需求，需实现将两张图片合成后下载的一个功能。分析完功能需求后，决定直接使用前端技术来实现。为提高效率，使用插件(html2canvas)配合编写此功能。有关插件(html2canvas)的介绍，这里不多说明，大家可自行网上查阅。以下直接附上效果演示图以及完整代码…"}, {"id": "6991085692902178846", "title": "Vue版拖动验证", "desc": "1. 基础演示 定义一个滑轨: <div id=\"slideway\"></div> 给滑轨上色: 模拟拖动过程 动画演示 2. 增加滑块 定义一个滑块: <div id=\"handler\"></div"}, {"id": "6943846445275578404", "title": "简单实现 Vite 热更新", "desc": "热更新（hmr）全称 Hot Module Reload，常常在构建工具里面出现。 在我们开发时候修改代码后页面会立即自动更新。这是怎么做到了的呢？ 现在我们通过一行一行代码来，构建一个最简单的热更新。 1. 监听文件变动 2. 读取文件内容 3. 通知浏览器更新页面 接下来选…"}, {"id": "6989589092262477831", "title": "浅析JavaScript异步编程", "desc": "JavaScript异步编程 1.同步模式 分析： 2.异步模式 在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，\"异步模式\"甚至是唯一的模式，因"}, {"id": "6903177112191467534", "title": "JavaScript 中 Eval 函数的前世今生，执行代码字符串", "desc": "内建函数 eval 函数允许执行一个代码字符串。 代码字符串可能会比较长，包含换行符、函数声明和变量等。 eval 的结果是最后一条语句的结果。 严格模式下，eval 有属于自己的词法环境。因此我们不能从外部访问在 eval 中声明的函数和变量： 如果不启用严格模式，eval …"}, {"id": "6844903927104667662", "title": "可能是最详细的UMD模块入门指南", "desc": "这个仓库记录了一些关于javascript UMD模块规范的demo，对我学习UMD规范有了很大帮助，希望也能帮助到你。 这篇博客主要说下自己关于UMD的一点认知和思考，从实现一个简单的UMD模块，再到实现一个有依赖关系的UMD模块，整个过程加深了我对UMD模块的理解。 所谓U…"}, {"id": "6972451908476895245", "title": "简单理解遍历器Iterator", "desc": "JS 中表示“集合”的数据结构有：Array、Object、Map、Set等。 需求：需要统一的接口机制，遍历不同表示“集合”的数据结构。"}, {"id": "6997058999405248549", "title": "深入理解URL", "desc": "url就是因特资源网的标准化名称。URL指向一条电子信息片段，告诉你它们位于何处，以及如何与之进行交互。"}, {"id": "6844903512393039879", "title": "为什么(2.55).toFixed(1)等于2.5？", "desc": "这个需要我们在源码里面找答案。 数字在V8里面的存储有两种类型，一种是小整数用Smi，另一种是除了小整数外的所有数，用HeapNumber，Smi是直接放在栈上的，而HeapNumber是需要new申请内存的，放在堆里面。我们可以简单地画一下堆和栈在内存的位置： 这里定义了一个…"}, {"id": "6844903919789801486", "title": "「前端进阶」从多线程到Event Loop全面梳理", "desc": "几乎在每一本JS相关的书籍中，都会说JS是单线程的，JS是通过事件队列(Event Loop)的方式来实现异步回调的。 对很多初学JS的人来说，根本搞不清楚单线程的JS为什么拥有异步的能力，所以，我试图从进程、线程的角度来解释这个问题。 计算机的核心是CPU，它承担了所有的计算…"}, {"id": "7002154753387921439", "title": "关于this的指向问题总结", "desc": "关于this的知识点： 1.this 的指向，是在执行上下文的创建过程中，被确定的。（，只有在函数调用时，this 的指向才会被确定。） 2.在一个函数的执行上下文中，this 由该函数的调用者「ca"}, {"id": "6998136664082087967", "title": "变量提升", "desc": "一起来学习我们容易会忽略的简单问题吧，一起把基础掌握扎实，地基稳，才能慢慢变得强大起来，一起加油学习吧"}, {"id": "7000181373738680328", "title": "【面试必问】防抖和节流", "desc": "防抖与节流函数是一种最常用的 高频触发 优化方式，能对性能有较大的帮助。两种优化方式有很多实现方法，本篇只介绍几种实现思路。"}, {"id": "6844904126476730375", "title": "H5 直播的疯狂点赞动画是如何实现的？(附完整源码)", "desc": "直播有一个很重要的互动：点赞。 点赞动画图片都是先放大再匀速运动。 快到顶部的时候，是渐渐消失。 收到大量的点赞请求的时候，点赞动画不扎堆，井然有序持续出现。 用 CSS3 实现动画，显然，我们想到的是用 animation 。 首先看下 animation 合并写法，具体含义…"}, {"id": "6998311214753251359", "title": "同步异步，宏任务微任务，事件循环机制，带你一文全部弄清楚！", "desc": "这是我参与 8 月更文挑战的第 11 天，活动详情查看： 8月更文挑战 单线程和异步 js是单线程语言，只能同时做一件事 浏览器合nodejs已支持js 启动进程，如web worker js和DOM"}, {"id": "7005836240570286094", "title": "判断和转换JS中的数据类型", "desc": "如何判断JS中的数据类型 1. typeof typeof是一个操作符，其右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示，可以判断出来null类型之"}, {"id": "6844903509331181575", "title": "Vue 2.x脱坑记 - 查漏补缺(汇总下群里高频询问的xxx及给出不靠谱的解决方案)", "desc": "一般入门级的无需太早考虑这方面的，只要专心学好Vue的使用姿势便可。 这种情况一般报错信息可以看到是哪个包抛出的信息，一般卸载这个模块,安装重新安装下即可。 官方解释如下: data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。 Vue 在2.2的时候…"}, {"id": "7005762441925623815", "title": "JS中的数据类型", "desc": "JS中的数据类型 数据类型 基础数据类型：number，string，boolean，null，undefind 引用数据类型：function，Object，Arrary null和undefind"}, {"id": "6844903744518389768", "title": "前端模块化详解(完整版)", "desc": "在JavaScript发展初期就是为了实现简单的页面交互逻辑，寥寥数语即可；如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着web2.0时代的到来，Ajax技术得到广泛应用，jQuery等前端库层出不穷，前端代码日益膨胀，此时在JS方面就会…"}, {"id": "6844903922922962958", "title": "这些Web API真的有用吗? 别问，问就是有用🈶", "desc": "本文列举了一些列比较不常见的Web API，内容较多，所以有关兼容性的内容在本文不会出现，大家可以自己去查阅。 以下案例能配动图的我尽量去配了，以免内容枯草乏味，但是如果内容有误，也请大家亲喷或者纠正👌 1. querySelector 2. querySelectorAll…"}, {"id": "6993267956943683598", "title": "8月更文挑战 | JS中八种继承方案你知道几种？", "desc": "查漏补缺js中八种继承方案，依次介绍现有的几种继承方案并且会进行代码实操以及继承的优劣对比，敬请观看"}, {"id": "6998266541464633374", "title": "React的跨域问题处理", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 适合于react17+的版本 第一步：在package.json里面加proxy 这个proxy必须要是String类型，并且是本地需要跨"}, {"id": "6998137845361672199", "title": "uniapp学习笔记", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 小程序 自定义编译可以自定义编译页面和一些参数 uniapp 1. uniapp规范 页面文件遵循vue单文件组件（SFC）规范 组件标签"}, {"id": "7000356456339865630", "title": "深入探究原型和原型链", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 前言 原型是js中特别重要的一个概念，今天我们来聊聊深入了解原型和原型链 原型 概念 怎么理解这句话呢？ 理解 我们知道构造函数是为了生产"}, {"id": "6998025182623465509", "title": "Web端实现RTC视频特效的解决方案", "desc": "Web 是否真的无法享受到原生那样高效丰富的视频处理？是否有我们未知的黑科技能提升 Web 的 RTC 使用体验？我们决定针对 Windows 的浏览器来展开一番探究。"}, {"id": "6844903506017517582", "title": "JavaScript专题系列20篇正式完结！", "desc": "JavaScript 专题系列是我写的第二个系列，第一个系列是 JavaScript 深入系列。 JavaScript 专题系列共计 20 篇，主要研究日常开发中一些功能点的实现，比如防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等，特点是研(chao)究…"}, {"id": "6993263395021520933", "title": "JavaScrip入门指南之“原型对象”（笔记二）", "desc": "一、原型对象 1.1-自定义构造函数存在的问题 问题：P对象和P2对象的say方法是同一个内存地址吗？ 上面创建的p对象的内存结构图： p2对象的内存结构图： 结论：从内存资源分配考虑，无需为每个对象"}, {"id": "7000609846114385956", "title": "解决浏览器跨域的N种手段", "desc": "这是我参与 8 月更文挑战的第 26 天，活动详情查看： 8月更文挑战 前言 相信大家都见过这个报错，没错，就这是跨域了。跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器"}, {"id": "6973155726302642206", "title": "手写系列-这一次，彻底搞懂 Promise", "desc": "本文实现了一个符合Promises/A+ 规范的 Promise，我们可以继续自己动手，参考 ES6 的 Promise 方法对 MyPromise 进行拓展练习。"}, {"id": "6931631220841250823", "title": "🐮写给零基础的前端算法入门指南，acmer带女友刷80+【双指针与字符串篇】", "desc": "原本打算通过一篇文章介绍一下，推荐一下自己的刷题方式和刷题路线，得到一些伙伴的反馈：最好还是更加详细，面向零基础，小白这些，还有github访问速度也是一方面问题，可能图片都加载不出来。 因此，我打算分模块出几期文章，这样你只用通过首发在掘金的文章即可了解 Chocolate …"}, {"id": "6844903925666037773", "title": "【手把手】15分钟搭一个企业级脚手架", "desc": "笔者在开发 cli 的过程中，调研流行的 cli 并形成最佳实践，本文旨在用最短的篇幅实现主要功能，揭露核心原理，同时提供 demo 仓库与大家学习探讨。 一个命令，就可以把我预设的完整的工程目录创建好，特别方便效率。 上面雏形脚手架可以很好的服务于个人需求，但是毕竟过于干瘪和…"}, {"id": "6965430806588325919", "title": "在浏览器中本地运行Node.js", "desc": "几年前，`StackBlitz`意识到网络正朝着关键的拐点发展。WebAssembly和新功能API的出现使编写基于WebAssembly的操作系统似乎变得可能，该操作系统功能强大到可以完全在浏览器中"}, {"id": "6980540020205551646", "title": "用一种有趣的方式谈谈 JavaScript 的发展历史 ⌛", "desc": "现在 JavaScript 无处不在🌍 你好👋，互联网上优秀的程序员😃。在本文中，我将与您快速而全面地概述世界上最流行和最广泛使用的编程语言如何演变成今天的样子。"}, {"id": "6844904001063010311", "title": "JS操作小技巧，工作简单了", "desc": "使用&&将返回第一个条件为假的值。如果每个操作数的计算值都为true，则返回最后一个计算过的表达式。 使用||将返回第一个条件为真的值。如果每个操作数的计算结果都为false，则返回最后一个计算过的表达式。 来源: 沉末_评论。 来源: 飞蛾扑火评论。 来源: 快乐的仲子评论。…"}, {"id": "7001104587692179470", "title": "重学前端 | 手动实现一个前端JS动画库", "desc": "js动画函数封装 函数选型 JavaScript动画应该通过requestAnimationFrame 因为该内置方法允许设置回调函数以在浏览器准备重绘时运行。通常这很快，但确切的时间取决于浏览器。当"}, {"id": "7001812752733831176", "title": "【JS引擎】解析过程 ｜8月更文挑战", "desc": "目录 JS是解释型语言 引擎对JS的处理词法分析 -> 得到token -> 语法分析 -> 得到AST -> 翻译器 -> 字节码（bytecode） -> 字节码解释器 -> 机器码 JS的预处理"}, {"id": "7004749542490898439", "title": "debounce 中遇到的小问题：<", "desc": "为什么在防抖中加入return function() btn.addEventListener element.addEventListener(event, function, useCapture"}, {"id": "6992004139521671181", "title": "ES7 给我们带来了什么?简单聊一聊 ES7 的新特性｜8月更文挑战", "desc": "JavaScript并不是一种静态语言。是呀 JavaScript 的确不是一门静态语言，语法更新比较频繁吧，ES7 给我们带来了什么?简单聊一聊 ES7 的新特性。"}, {"id": "6986078453917302815", "title": "重构神器 jscodeshift", "desc": "jscodeshift 是一个强大的重构工具，当你面对枯燥但是又耗费人力的工作时，请第一时间想起我。"}, {"id": "6884019851942166536", "title": "ES2020 系列：空值合并运算符 '??'", "desc": "在本文中，我们将值既不是 null 也不是 undefined 的表达式称为“已定义的（defined）”。 空值合并运算符（nullish coalescing operator）的写法为两个问号 ??。 如果 a 不是已定义的，则结果为 b。 换句话说，如果第一个参数不是 …"}, {"id": "6844903511835017230", "title": "[译] 2017 年比较 Angular、React、Vue 三剑客 ", "desc": "为 web 应用选择 JavaScript 开发框架是一件很费脑筋的事。现如今 Angular 和 React 非常流行，并且最近出现的新贵 VueJS 同样博得了很多人的关注。更重要的是，这只是一些新起之秀。 那么我们如何选择使用哪个框架呢？列出他们的优劣是极好的。我们将按照…"}, {"id": "7000724804491804708", "title": "js 循环", "desc": "这是我参与8月更文挑战的第26天，活动详情查看:8月更文挑战 1. for循环最常用 2. forEach() 2.1 三个参数 function(currentValue,index,arr) cu"}, {"id": "7001767658265772039", "title": "解决setTimeout/setInterval倒计时时间偏差问题", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战，解决办法一：以后端返回服务器时间为准，通过定时向服务器发送请求，获...；解决办法二：用递归的方法执行倒计时，在每次递归调用回调的时候，计算"}, {"id": "6844904150631710727", "title": "京喜前端自动化测试之路", "desc": "京喜（原京东拼购）项目，作为京东战略级业务，拥有千万级别的流量入口。为了保障线上业务的稳定运行，每月例行开展前端容灾演习，主要包含小程序及 H5 版本，要求各页面各模块在异常情况下进行适当的降级处理，不能出现空窗、样式错乱、不合理的错误提示等体验问题。 原来的容灾演习过程：小程…"}, {"id": "6979778096882778120", "title": "JS数组reduce()方法", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 1、语法 参数含义： 2、实例解析 initialValue 参数 先看第一个例子： 这里可以看出，上面的例子in"}, {"id": "7004425452160827423", "title": "Js与安卓webview 交互通信", "desc": "一，认识混合app （Hybrid App） Hybrid APP指的是半原生半Web的混合类App。需要下载安装，看上去类似Native App，但只有很少的UI Web View，访问的内容是 W"}, {"id": "6844904045258211342", "title": "从基础到进阶（一），0～100道JavaScript题目，测试你有多了解 JavaScript，刷新你的知识！🚀", "desc": "我在我的 Instagram 上每天都会发布 JavaScript 的多选问题，并且同时也会在这个仓库中发布。 :muscle: :rocket: 我每周都会在这个仓库下更新新的问题。 答案在问题下方的折叠部分，点击即可展开问题。祝你好运 ❤️ 1. 输出是什么？ 在函数内部，…"}, {"id": "6996097250476720158", "title": "深入理解Typescript系列-类", "desc": "这是我参与 8 月更文挑战的第 14 天，活动详情查看： 8月更文挑战 前言 当大家看到typescript（ts） 中的类（class）时候，可能好多人都会想起面向对象，对的，面向对象是许多后台的一"}, {"id": "7001776945448878116", "title": "关于前端正则的一些复习 | 8月更文挑战", "desc": "正则 RegExp | 8月更文挑战 前言 难得到了周末,终于可以有时间再写一下文章了. 今天的话,我们就复习一下正则表达式吧, 正则表达式在我们日常的工作中可以说是用到的非常多了."}, {"id": "6992775762491211783", "title": "【算法面试】leetcode最常见的150道前端面试题 --- 中等题2（共80题）", "desc": "兄弟姐妹们，中等题来了，本篇10道，剩下70道，每周更新10道！ 2. 两数相加 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字"}, {"id": "7002230757838209032", "title": "这些特性可真是js中的卧龙凤雏", "desc": "由于 JavaScript 的诞生背景，它有了许多奇奇怪怪的特性。这在前端开发中早已屡见不鲜。为了写出更高质量的程序，人们不断探索，终于拨开乌云见天日......"}, {"id": "7000792701696229413", "title": "面试官：手写一下new叭。", "desc": "需要注意的点： 1.return一个引用数据类型时，new的新对象是该引用类型对象 2.过程：创建一个空对象，绑定构造函数的原型prototype。再执行构造函数，得到result。 代码 测试 测试"}, {"id": "6963056815420473357", "title": "微医前端带你从头建立构建体系【开篇】", "desc": "此文作为构建专栏的目录。 介绍了我司以及写这个专栏的初心和内容形式。 作为开篇还介绍了截止到现在构建工具的历史演进过程。"}, {"id": "6844903877859360776", "title": "抛弃 JS，使用 TypeScript", "desc": "最近几个月我已经全面抛弃 JavaScript，完全使用 TypeScript 进行前端开发（只在上课的时候用到 JS）。 bug 显著减少，之前会遇到的 xxx 为空的问题几乎不会出现了，类型相关 bug 直线减少。 应用更可控，当你需要约束某些代码的时候，用类型就能很简单地…"}, {"id": "6978419919582920740", "title": "异步编程 Promise：从使用到手写实现（4200字长文）", "desc": "本文介绍了 Promise 如何解决回调地狱的问题，然后一步一步的解构手写实现了一个简单的 Promise，最后简单介绍并手写实现了一些 Promise 的 API。"}, {"id": "7002148624033382413", "title": "如何使用fetch()", "desc": "fetch()是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求 本文介绍一下它的用法"}, {"id": "7005168628647591950", "title": "【译】在 JavaScript 中使用正则表达式的隐患", "desc": "正则表达式（RegEx）被广泛地运用于 Web 开发中，用作模式匹配及验证等用途。然而，在实际使用中它们会带来一些安全和性能上的风险，并向攻击者敞开大门。因此，在这篇文章中，我将讨论使用正则表达式前所"}, {"id": "6991399576154406948", "title": "TS系列篇｜从JS的起源到浏览器大战｜8月更文挑战 ", "desc": "好久不见，芝麻同学回来了😄 芝麻同学自从来到现在的公司后，就一直在使用TypeScript了，刚开始从JS转换为TS的时候，很不适应，常常自我质疑：“这也没错啊，咋就飘红了呢”，就这样一边质疑一边学习"}, {"id": "6961759251203096583", "title": "想当年，我手持栈、堆两个原理，从 简单赋值 杀到 闭包 ", "desc": "本文是编者学习栈、堆的内存原理后对 闭包 等实际应用的深刻理解。希望能对各位有所帮助！ 哈哈哈哈，标题心血来潮想玩个梗，各位一笑而过便是。"}, {"id": "7000541393659641893", "title": "【JS】你不知道的JavaScript笔记（二）- this - 四种绑定规则 - 绑定优先级 - 绑定例外 - 箭头函数", "desc": "今天继续总结《你不知道的JavaScript》，来探索探索JavaScript中的`this`关键字"}, {"id": "6930428551091109896", "title": "你真的了解ES6中的函数特性么？", "desc": "hello大家好，又见面了。 假期转瞬即逝，年后开工的第一天，早上是真的不想起床吖，为了不迟到闭着眼睛就穿衣服。 函数是所有编程语言中重要的组成部分，在Es6出现之前 JavaScript的函数语法一直没有太大的变化，从而遗留了很多问题和隐晦的做法，导致实现一些功能需要编写很多…"}, {"id": "6950075140906418213", "title": "从零搭建一款PC页面编辑器PC-Dooring", "desc": "之前一直忙着调研lowcode平台和开发以下两个项目:H5编辑器H5-Dooring ,可视化大屏编辑器V6.Dooring没有太多时间做PC端搭建化项目, 好在搭建平台很多原理都是通用的, 所以早在"}, {"id": "6859545317378490376", "title": "可能这些是你想要的H5键盘兼容方案", "desc": "最近一段时间在做 H5 聊天项目，踩过其中一大坑：输入框获取焦点，软键盘弹起，要求输入框吸附（或顶）在输入法框上。需求很明确，看似很简单，其实不然。从实验过一些机型上看，发现主要存在以下问题： 在 Android 和 IOS 上，获知软键盘弹起和收起状态存在差异，且页面 web…"}, {"id": "6844903936483131405", "title": "京东 PC 首页 2019 改版前端总结", "desc": "在性能几近无懈可击的情况下，我们决定从稳定性入手，为项目引入强类型校验，弥补 JavaScript 这种弱类型语言在不可预测性上的缺陷。 强类型语言 TypeScript 已发布6年有余，国内应用的开发者也在慢慢增长。一般来说，业务开发周期短，迭代频繁，TypeScript 的…"}, {"id": "6850037262445445134", "title": "在前端如何玩转 Word 文档", "desc": "在日常工作中，大部分人都会使用 Microsoft Office Word、WPS 或 macOS Pages 等文字处理程序进行 Word 文档处理。除了使用上述的文字处理程序之外，对于 Word 文档来说，还有其他的处理方式么？答案是有的。 如何在前端动态生成 Word 文…"}, {"id": "6999155538231558180", "title": "JavaScript 系列之数组（四）", "desc": "[JavaScript 系列之数组｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "7002022733387137061", "title": "JavaScript 系列之异步编程（五）", "desc": "[JavaScript 系列之异步编程｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6996849418624303135", "title": "Three.js拨云见雾(3)——使用材质", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 一个材质结合THREE.Geometry对象，可以构成THREE.Mesh对象。材质就像物体的皮肤，决定了几何体的外表。"}, {"id": "6971070129345921032", "title": "前端领域的转译打包工具链（下）：工程化闭环", "desc": "这是前端领域的转译打包工具链的第二篇文章，上篇文章讲了前端领域的各种转译器，包括 babel、tsc、terser、eslint、postcss、posthtml、swc 等，介绍了他们各自的用途和通"}, {"id": "6991496588401049631", "title": "前端知识链条中少不了的一环--Ajax｜ 8月更文挑战", "desc": "什么是Ajax？ Ajax的核心是JavaScript对象XmlHttpRequest，XmlHttp使我们可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。"}, {"id": "7004615759846440990", "title": "【译】Learn D3 入门文档：Shapes", "desc": "引子 继 Learn D3: Scales 第五篇，只是英文翻译，可修改代码的部分用静态图片替代了，想要实时交互请阅读原文。 原文：Learn D3: Shapes 版本：Published Mar "}, {"id": "7005363953886822431", "title": "前后端数据交互(四)——fetch 请求详解", "desc": "fetch 是 XMLHttpRequest 的升级版，使用js脚本发出网络请求，但是与 XMLHttpRequest 不同的是，fetch 方式使用 Promise，相比 XMLHttpReques"}, {"id": "6844904033631600648", "title": "假如你的同事写了这样的代码：a && d || b && c && !d || (!a || !b) && c", "desc": "当然，这段代码是我参考一个掘金沸点（@隔壁村的李二狗）伪造的，但愿你和你的同事都别这么写。 能写出这种与或非，如果不是逻辑不清，那么估计只有一种可能，需求变更很多次，多人修改后的结果。。 这种问题的探究来自于一门数学：布尔代数或逻辑代数。 说到布尔，我们开发者对此太熟悉了。不就…"}, {"id": "6987305803073978404", "title": "📝 wangEditor 新版本(WIP...) 功能和体验介绍", "desc": "wangEditor 新版本功能目前已经开发完，但尚未发布，代码还没有开源。待内部测试完成，即发布体验版、代码开源。 本文主要介绍一下新版本的功能升级、体验升级，以及我的一些思考总结。"}, {"id": "6844904036936712200", "title": "webpack 最佳配置指北", "desc": "对于入门选手来讲，webpack 配置项很多很重，如何快速配置一个可用于线上环境的 webpack 就是一件值得思考的事情。其实熟悉 webpack 之后会发现很简单，基础的配置可以分为以下几个方面： entry 、 output 、 mode 、 resolve 、 modu…"}, {"id": "6889327058158092302", "title": "这一次彻底掌握深拷贝", "desc": "在日常开发过程中，我们经常会涉及到数据的拷贝。使用时经常会困惑，到底是不是需要深拷贝，如果是深拷贝使用第三方库还是使用自己写的方法。如果使用第三方库比如lodash还好，基本上不会出错。但是如果使用的是自己写的方法，那么很容易出错，明明有些时候能够拷贝成功，为什么有些时候又不能…"}, {"id": "6921223155621036039", "title": "一套标准的前端代码工作流", "desc": "工欲善其事，必先利其器。对于写代码而言，也是需要有一套完善的工作流（工具和流程）。 但是我现在几乎不再使用它，取而代之的是 VSCode，一款微软开源的代码编辑器，它自带 git ， eslint 等工具，让我们编码更加的有质量，有效率。 接下来是代码规范方面，刚写代码的前几年…"}, {"id": "7004369963335024648", "title": "js 计算时间差", "desc": "js 时间差 new Date() 格林威治 ,计算时间差除了最基本的硬算 , 还可以使用new Date()来从另一个角度计算"}, {"id": "6844903806090608647", "title": "精读《useEffect 完全指南》", "desc": "1. 引言 工具型文章要跳读，而文学经典就要反复研读。如果说 React 0.14 版本带来的各种生命周期可以类比到工具型文章，那么 16.7 带来的 Hooks 就要像文学经典一样反复研读。 Hooks API 无论从简洁程度，还是使用深度角度来看，都大大优于之前生命周期的 …"}, {"id": "6999236593579982885", "title": "自己实现一个JSON.Stringify 方法", "desc": "这次我们来手动实现下stringify这个方法，通过实现的过程，我们能够站在全局考察自己对 JS各种数据类型理解的深度，对各种极端的边界情况处理能力，以及编码能力。"}, {"id": "6977786126215954439", "title": "如何令a == 1 && a == 2 && a == 3 返回true", "desc": "这是我参与更文挑战的第26天，活动详情查看： 更文挑战 问题描述 在 JavaScript 中， (a == 1 && a == 2 && a == 3) 是否有可能为 true ？ 参考实现 参考解"}, {"id": "6979569133637599262", "title": "我们常说的算法时间复杂度和空间复杂度到底是什么？", "desc": "针对某一类问题的解决，我们可能需要借助算法来实现，实现的手段也可能是各式各样的。虽然最终都解决了问题，但是各个解决手段，也就是算法还是存在优劣之分的。"}, {"id": "6994688268847546375", "title": "JS内存管理机制(进阶必备知识)", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 JS内存生命周期和大多数程序语言一样，分为三个阶段 分配内存 内存的读与写 内存的释放 JS数据类型 基本类型：Sting、Number、B"}, {"id": "6844903725249593351", "title": "全方位彻底读懂<你不知道的JavaScript(上)>--一篇六万多字的读书笔记", "desc": "答:我想这是大部分人看到这个标题都会问的问题.因为作为一个男人,我喜欢长一点,也不喜欢分割成几个部分.一家人就要在一起,整整齐齐.好吧,正经点,其实整篇前言可以说都是在回答这个问题.你可以选择先看完前言,再决定要不要和书本搭配起来阅读. 这里先简单捋一下:1,内容多:首先这篇读…"}, {"id": "6985138410201546782", "title": "if语句太多？试试规则引擎！", "desc": "前言 写这篇文章的时候，我还在做一个叫规则编辑器的组件，当时要用到规则引擎，并且制定一个协议，于是寻找一些业内的方案发现了json-logic，鉴于此次的调研我发现了一个平常写代码的优化点。 什么是规"}, {"id": "6996163717180162061", "title": "JavaScript 系列之继承（二）", "desc": "[JavaScript 系列之继承｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6998721592993792036", "title": "深入理解Weex之基础篇", "desc": "这是我参与 8 月更文挑战的第 21 天，活动详情查看： 8月更文挑战 前言 今天我们来聊聊Weex。起源于阿里，后交给了Apache，由Apache打理维护，今年进行了退休投票，最后又交环给了阿里维"}, {"id": "7004326169252200456", "title": "【轻聊前端】JavaScript世界的一等公民——函数", "desc": "聊完了数据类型、数据存储，当然该聊“封装”了，不知小伙伴们猜到没有呢？ 为什么说“封装”，而不是“数据封装”，因为我们封装的更多是行为。 老规矩，从头讲起，逐层深入。"}, {"id": "6997776362090004493", "title": "细说JS继承的发展过程", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 看了一些关于js继承的文章，好多都是一上来就是怎么实现继承，而从来不说什么是继承，我们还是先来聊聊什么是继承？ 有强迫症的我翻了一下字典："}, {"id": "6857135010882387981", "title": "Airbnb JavaScript 风格指南--翻译版", "desc": "Symbols 不能被正确的polyfill。 所以在不能原生支持symbol类型的环境[浏览器]中，不应该使用 symbol 类型。 1.2 复杂类型: 复杂类型赋值是获取到他的引用的值。 相当于传引用 2.1 所有的赋值都用const，避免使用var. eslint: pr…"}, {"id": "6997947290728005662", "title": "Promise 对象方法(2)", "desc": "Promise.resolve() Promise.resolve(value) 方法返回一个以给定值解析后的Promise 对象。如果这"}, {"id": "6993999219866484750", "title": "ES6+新增常用内容总结（二）", "desc": "本文主要是在日常开发中一些比较常用的ES6+新增的特性， 如有错误,欢迎指出,将在第一时间修改,欢迎提出修改意见和建议"}, {"id": "6950543696567730206", "title": "【前端性能测试】不服？那就跑个分！！！", "desc": "本文主要是结合Google的开源项目Lighthouse 和 gulp脚本编写了一个前端性能跑分工具。主要用来帮助前端开发工程师能够更加全面的了解自己的网站/项目，快速找出优缺点，以及可以改善的方向。"}, {"id": "6986875247811100680", "title": "一篇 Generator 详解", "desc": "gernerator作为es6的新特性，在后来被更方便好用的async await代替，但是generator独特的特性可以让我们在函数执行的过程中传递参数获取结果，使得函数调用变得更加灵活。"}, {"id": "6909214856273100813", "title": "你必须理解的 JavaScript 知识 —— 基础", "desc": "JavaScript 在诞生之初只是为了解决表单验证的问题。当时，用户们都在使用 28.8 bit/s 的调制解调器上网，随着网页变得越来越大、越来越复杂。这时用户提交一个表单就需要与服务器进行大量的数据交换，在当时那么慢的网络情况下，等了 30s 之后弹出一条消息，告诉你字段…"}, {"id": "7002253599661096991", "title": "1 分钟快速使用 Docker 上手最新版 Sentry-CLI - 创建一个版本", "desc": "我们可以使用官方 sentry-cli 工具操作 Sentry API，从而来为你的项目管理一些数据。它主要用于管理 iOS、Android 的调试信息文件，以及其他平台的版本(release)和源代"}, {"id": "6998914559352242184", "title": "谈谈JavaScript中字符串对象常用方法", "desc": "众所周知，JavaScript中字符串对象几乎是到处都是，因此字符串对象的常用方法也是需要我们不断地进行回顾和记忆的，毕竟温故而知新嘛。所以今天我们就来谈一谈JavaScript中字符串对象的常用方法"}, {"id": "7000383332148068389", "title": "谈谈JavaScript中函数的基础知识", "desc": "大家好哇，今天我们来谈谈JavaScript中函数的基础知识，例如作用域与局部变量，匿名函数，自执行函数，arguments的使用等。 大神请绕道，因为本文基本摘自我刚入行时的笔记哦~"}, {"id": "6844903569087266823", "title": "浏览器的回流与重绘 (Reflow & Repaint)", "desc": "浏览器使用流式布局模型 (Flow Based Layout)。 浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了Render Tree。 有了RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点…"}, {"id": "6955664583621099534", "title": "Objects in v8", "desc": "当要深入了解 v8 内部的内存管理细节时，首先需要了解对象在 v8 中的处理方式，本文将结合源码对 v8 中的对象处理进行简单介绍"}, {"id": "6844904180943945742", "title": "html篇--这可能是目前较为全面的html面试知识点了吧", "desc": "也不知道有没有跟小编有同感的童鞋，随着技术的逐(ri)渐(yi)提(tui)升(bu)，对于一些底层的概念性的知识点却有些遗忘。有时候知道是这么个意思，但是表述出来的时候也没能完整的说到点子上。出现此现象的时候，小编觉得是时候该做点什么了（嗯！）。 以下是小编就这HTML常见的…"}, {"id": "6993999863159455752", "title": "设计模式之发布订阅与观察者", "desc": "1、发布订阅模式 发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。 订阅者（Subscriber）把自己想订阅的事件注册（Subs"}, {"id": "6991422054482313252", "title": "让 AI 在浏览器端打游戏(1)｜8月更文挑战", "desc": "让 AI 在浏览器端打游戏，其中 AI 打游戏，分解一下就是 AI 和游戏，所以分享主要两个比较完整部分组成game和神经网络，先从游戏写起。"}, {"id": "6907210240773586951", "title": "仿抖音视频全屏播放&滑动切换", "desc": "随着移动技术的快速迭代，数据流量费用的快速下降，视频、直播正成为全民的媒体盛宴，我司必然也不会缺席此次盛宴，这里讲述的是通过h5实现仿抖音视频全屏播放&#x26;滑动切换的效果,供我司直播鉴定回放视频使用。 此属性用于定义视频是否预加载。属性有三个可选择的值：none、meta…"}, {"id": "6844903593556836359", "title": "vue多页面开发和打包的正确姿势", "desc": "两套源码的话，后台可能开两个端口，然后需要用nginx反向代理可能比较麻烦，而且前端开发也比较麻烦麻烦，毕竟需要维护两个git仓库，两套git上线流程，可能会损耗很多时间。 对自己的技术(盲目)自信,也想尝尝鲜，分析出需求也不算很复杂。选了第一种方案，就是多个单页面应用在一套源…"}, {"id": "6989060867983671327", "title": "一篇文章说清楚低代码form表单平台 -- form内核原理", "desc": "前言 我们的目标是将schema => form表单，schema就是一个json对象，我们看看阿里的form-render库（一个低代码react的form表单库）的schema长什么样子： 虽然官"}, {"id": "6987408221669425189", "title": "『前端BUG』—— 本地代理导致会话cookie中的数据丢失", "desc": "在本地用代理请求服务端接口，解决跨域问题后，发生了一件极其诡异的事情，明明登录成功了，但是请求每个接口都返回未登录的报错信息。"}, {"id": "6844903944297136135", "title": "90行代码，15个元素实现无限滚动", "desc": "IntersectionObserver API 的用法，以及如何兼容。 如何在React Hook中实现无限滚动。 如何正确渲染多达10000个元素的列表。 无限下拉加载技术使用户在大量成块的内容面前一直滚动查看。这种方法是在你向下滚动的时候不断加载新内容。 当你使用滚动作为…"}, {"id": "7004384172496125965", "title": "前端分享--JS运行机制（Event Loop）", "desc": "为什么JS是单线程？ JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。 JavaScript的单线程"}, {"id": "6987659818450288648", "title": "一个厨师的角度来谈JS的运行机制", "desc": "面试过程中，一直要面对同步任务、异步任务、宏任务和微任务。往往都是一知半解。换一种方式考察就不知道程序的运行方式了。这篇从厨师做菜的例子来了解同步任务、异步任务、宏任务、微任务之间的关系以及他们的运行"}, {"id": "6985035674806124552", "title": "LeetCode刷题，设计循环双端队列（641）", "desc": "设计一个循环双端队列，可以从头尾插入并删除。 解题思路：设置头尾指针，进行位置获取，添加和删除元素，设置一个记录队列元素大小的值。用于判满判空"}, {"id": "6999277640100249630", "title": "聊一聊一道经典的面试题：a.x=a={n:2}", "desc": "var a = {n:1};a.x = a = {n:2}。这是一道很经典的面试题，有很多人都已经解读过，这里尝试从js语法(理论)和v8字节码(实践)这两个方面来理解，"}, {"id": "6970289345911586853", "title": "富文本编辑器框架 - slate.js", "desc": "Slate 简介 Slate 是一个使用 TypeScript 开发的富文本编辑器开发框架，诞生于 2016 年，作者是 Ian Storm Taylor。Slate 是一个完全可定制的富文本编辑器框"}, {"id": "6861376131615227912", "title": "「算法与数据结构」DFS和BFS算法之美", "desc": "最近面网易某部门的时候，其中一道算法题考点就是DFS，深度优先遍历，所以这次准备梳理一遍，练练手，下次再找的话，也比较方便。 一定要会多种解法，面试的时候，我就是写了递归，面试小哥哥问我能不能用迭代去完成，所以多种解法都要会。 简单的说，BFS是从根节点开始，沿着树的宽度遍历树…"}, {"id": "6926362650943668232", "title": "跨年都在更新的 vite 到底有多香?", "desc": "首先，我们所使用的 ES Modules 模块系统本身就存在环境兼容问题。尽管现如今主流浏览器的最新版本都支持这一特性，但是目前还无法保证用户的浏览器使用情况。所以我们还需要解决兼容问题。 其次，模块化的方式划分出来的模块文件过多，而前端应用又运行在浏览器中，每一个文件都需要单…"}, {"id": "6989066814332354567", "title": "规则引擎", "desc": "概念 规则引擎其实不是新兴起的东西了，这个概念的提出其实可以追溯到上世纪，规则引擎起源于基于规则的专家系统，专家系统这东西属于人工智能的范畴了。"}, {"id": "6992114557070082056", "title": "一步一步手动实现虚拟 DOM 和 diff 算法(上)｜8月更文挑战", "desc": "Virtual dom, 也就是虚拟 DOM 节点。通过 JS 的普通 Object 对象模拟 DOM 中的节点，然后再通过特定的 render 方法将其渲染成真实的 DOM 节点。"}, {"id": "7005809933228720158", "title": "移动端h5网页调用支付宝支付接口", "desc": "领导第一次让我做h5支付宝支付的时候，去了支付宝开放平台，一顿上上下下左左右右，看完了长呼一口气。这个支付好像没我啥事儿啊！小伙伴儿们自行查看：https://opendocs.alipay.com/"}, {"id": "6977648212131725320", "title": "10个Javascript基础面试问题", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 1.什么是Javascript？ Javascript是一种用于Web开发的编程语言。JavaScript在网络的客户端上运行。 根据MDN，J"}, {"id": "7002501974142746660", "title": "浏览器中的JavaScript执行机制", "desc": "前言 本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 JavaScript在浏览器中负责执行代码的线程只有一个,我们把线程比作人"}, {"id": "6964580071986167822", "title": "手撸JS合集——防抖节流", "desc": "今天我们的话题是前端中的防抖和节流，这个话题已经是一个经典的问题了，基本面试中都会遇见，也有很多文章来写这个话题，那么今天我们也一起来盘点一下这个面试必撸题吧～"}, {"id": "6998337108591312932", "title": "JS ｜ 重读 ES6 📝 笔记", "desc": "let const 补充了JavaScript没有块级作用域的空白 暂时性死区 变量必须先声明 才能使用 globalThis 顶级对象 浏览器里面，顶层对象是 window，但 Node 和 Web"}, {"id": "6998447579214135304", "title": "JavaScript中的类class", "desc": "1. ES5中的近类结构 ES5中创建类的方法： 新建一个构造函数，定义一个方法并且赋值给构造函数的原型。 2. ES6中的class 与ES5中使用构造函数不同的是，私有属性是实例中的属性，不会出现"}, {"id": "6995777334951280653", "title": "JavaScript 中的继承", "desc": "JavaScript 中的继承，希望这篇文章可以给正在学习JavaScript的同学带来不一样的认知"}, {"id": "6844903728944775181", "title": "【复习资料】ES6/ES7/ES8/ES9资料整理(个人整理)", "desc": "现在的网络上已经有各样关于 ECMAScript 规范介绍和分析的文章，而我自己重新学习一遍这些规范，整理出这么一份笔记，比较精简，主要内容涵盖ES6、ES7、ES8、ES9，后续会增加面试题，框架入门等笔记，欢迎吐槽交流。 这份资料的ES6部分将会参考阮一峰老师的 ECMAS…"}, {"id": "6996644324570054664", "title": "使用isInputPending()来改进JavaScript调度效率", "desc": "isInputPending第一个将中断这个操作系统概念用于网页开发的API，开发者可以使用它来平衡JS执行、页面渲染及用户输入之间的优先级，就像系统使用中断调度CPU处理I/O输入 一样。"}, {"id": "6998831933736108039", "title": "细谈 JS 对象遍历的顺序问题", "desc": "可能有些同学听过在 JavaScript 中遍历对象顺序不固定的这一说法。事实上，这个说法不是特别准确。 对待遍历顺序，对象有一套自己既定的规则，在此规则下呢，对象的遍历顺序会受插入元素顺序的影响，但"}, {"id": "6844903981827751943", "title": "13 个 JS 数组精简技巧，一起来看看", "desc": "数组是 JS 最常见的一种数据结构，咱们在开发中也经常用到,在这篇文章中,提供一些小技巧,帮助咱们提高开发效率。 1. 删除数组的重复项 2. 替换数组中的特定值 有时在创建代码时需要替换数组中的特定值，有一种很好的简短方法可以做到这一点，咱们可以使用.splice(start…"}, {"id": "6955706047881281550", "title": "一个重要的CSS考点---三列布局", "desc": "总是在一些学长面试贴的CSS考点里看到三列布局，觉得这个东西应该蛮重要，刚好老师最近讲到这，就写一篇随堂贴记录一下，加深印象。同时也做分享，希望能与大家互相探讨。"}, {"id": "6895930107139981325", "title": "javascript的基础清单", "desc": "基本数据类型是按值访问的，因为可以直接操作保存在变量中的实际值。示例： javascript的引用数据类型是保存在堆内存中的对象。实例: bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规…"}, {"id": "6844904047476998152", "title": "染陌的 2019 年度总结——我在阿里云做前端", "desc": "今年一直犹犹豫豫到现在还没写年度总结，往年的总结往往是把各种社区的经历放一起就可以把整篇年度总结堆积得满满当当的。但是今年笔者仔细想了好久也没想到特别多的经历。今年社区混得更少了，没有那么多在社区的产出。往年我会有很多在社区的足迹，譬如说参加各种技术大会比如 SeeConf、D…"}, {"id": "6975866094259027999", "title": "（鸡汤文）这一次我终于搞懂了 JavaScript 定时器的 this 指向！", "desc": "忽然有一种感觉，每次学习一个知识点就像是谈一场恋爱：从初次邂逅，到彼此了解，一切都那么的符合恋爱的过程！"}, {"id": "6844903832418254856", "title": "JS无形装逼，最为致命", "desc": "单行简洁的代码很难维护（有时甚至难以理解），但这并不能阻止广大攻城狮们脑洞，在编写简洁的代码后获得一定的满足感。 以下我最近的一些收藏javascript精简代码集合。它们都可以在你的开发控制台中运行，你可以从控制台中查看运行结果。同时，我希望你能在评论中分享一些自己的藏品！ …"}, {"id": "6903083072661487624", "title": "手撸一个在线css三角形生成器", "desc": "为了提高 前端开发 效率, 笔者先后写了上百个前端工具, 有些是给公司内部使用的, 有些单纯是因为自己太“懒”, 不想写代码, 所以才“被迫”做的. 接下来介绍的一款工具——css三角形生成器也是因为之前想要解放设计师的生产力, 自己又懒得切图或者写css代码, 所以想来想去还…"}, {"id": "6997582705869209630", "title": "JavaScript 系列之类（三）", "desc": "[JavaScript 系列之类｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6987673995541741575", "title": "实现axios限制请求队列", "desc": "在实际开发中，可能会遇到网络问题或者查询量比较大的情况，上一个请求还没有完成，用户就发起了下一个请求。 但是同一个请求多次发送到服务器，无疑是对服务器的一种压力，所以需要在已经优化服务器过查询速度后，"}, {"id": "7001806012139175950", "title": "13个JavaScript 一行程序，让你看起来像个专家", "desc": "13个JavaScript 一行程序，让你看起来像个专家 JavaScript 可以做很多好玩的事。"}, {"id": "6999517647121416206", "title": "从原理出发理解instanceof", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 有了typeof为什么还需要instanceof? instanceof的实现原理 Object.prototype.__proto__ "}, {"id": "6981625867021582349", "title": "js原型，原型链知多少", "desc": "原型，原型链，构造函数创建对象，原型定义，实例对象，实例对象与原型，js原型，js原型链，原型图解，原型链图解。"}, {"id": "6963167124881670152", "title": "一文帮你搞定90%的JS手写题", "desc": "还在害怕手写题吗，本文可以帮你扩展并巩固自己的JS基础，顺便搞定90%的手写题。在工作中还可以对常用的需求进行手写实现，比如深拷贝、防抖节流等可以直接用于往后的项目中，提高项目开发效率。不说废话了，下"}, {"id": "6844904003151593479", "title": "消息队列助你成为高薪的 Node.js 工程师", "desc": "后端开发者应该都知道消息队列，但是一些前端开发者可能知道的并不多，但是你们可能好奇抢票,商品秒杀等功能是如何实现的，其实没有多么高大上，看了消息队列就知道了。 作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数…"}, {"id": "6997205142550347813", "title": "JavaScript 系列之类（二）", "desc": "[JavaScript 系列之类｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6897083645782130696", "title": "前端如何实现一键截图功能?", "desc": "网页截图功能目前也是非常常见的需求, 尤其是在在线教育领域. 我们朋友圈的微信海报, 活动海报等, 一般都是运营/市场人员通过设计工具设计而成, 但是如何更好的映射到自己的服务体系里面, 比如H5页面中, 植入更多信息收集, 交互能力. 这一块的应用探索, 页面截图是一个非常好…"}, {"id": "6975760523849629727", "title": "你该知道的JavaScript小技巧——ES6语法篇", "desc": "【这是我参与更文挑战的第 18 天，活动详情查看： 更文挑战”】 废话不多说 我们直接开始。 1. 扩展运算符{ ...} 首当其冲的当然是我们的...——扩展运算符（展开运算符）他不仅可以对数组进行"}, {"id": "6942640606732615694", "title": "JS日期、年月日、时分秒的无敌秘籍、文艺之行", "desc": "JS中的日期时间应用场景是非常广阔的，比如说：评论提交、文章发布、内容编辑、页面监控、节日活动等等，有生命的地方就存在时间。 我们在数据库存储时间字段的时候，一般都会以时间戳的标准来存储。 再添加一个时间戳的参数，只需把时间戳传进日期对象即可。 很久以前如果我们不曾相遇，如果没…"}, {"id": "6844903586103558158", "title": "不好意思！耽误你的十分钟，让MVVM原理还给你", "desc": "众所周知当下是MVVM盛行的时代，从早期的Angular到现在的React和Vue，再从最初的三分天下到现在的两虎相争。 无疑不给我们的开发带来了一种前所未有的新体验，告别了操作DOM的思维，换上了数据驱动页面的思想，果然时代的进步，改变了我们许多许多。 啰嗦话多了起来，这样不…"}, {"id": "6998449985708621831", "title": "JavaScript之继承理解", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战” 继承概念的探究 说到继承的概念，首先要说一个经典的例子。 先定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量"}, {"id": "6992492817968791565", "title": "现阶段web与外围硬件交互的接口概述", "desc": "随着互联网的发展，网页被赋予更多更强的与物理世界交互的能力，本篇文章将概述大部分相关接口，当你需要时以便查阅。"}, {"id": "6997785196300877861", "title": "如何系统化地搭建一个功能完备的前端应用脚手架", "desc": "1. 先实现一个雏形 2. 重新规划流程 3. 从插件开始 4. 定义一个插件 5. 用插件配置生成文件内容 6. 将文件结构写入目标路径"}, {"id": "6998879961935249422", "title": "JS实现数组扁平化的 6 种方式", "desc": "数组扁平化是面试中的常考点，不仅考验面试者熟练使用各类方法的能力，还考验其灵活编程的能力。下面让我们来看下实现数组扁平化的六种方式。"}, {"id": "6950584088462163982", "title": "让我告诉你一些强无敌的 NPM 软件包", "desc": "面对繁忙的日程安排与紧迫的工期限制，选择能够切实提升生产率的工具无疑至关重要。在这里，我整理出一份个人最喜欢的 NPM 软件包清单。为了便于浏览，我还对它们进行了分类，希望呈现出更加清晰的结构。当然，"}, {"id": "6997379312403873829", "title": "使用filter和some方法写一个商品查询案例", "desc": "最近在学习JavaScript es6中的一些方法，这些方法用起来非常方便，自己看教学视频的时候跟着做了一个商品查询案例，希望这个案例可以帮到一些跟我一样的初学者"}, {"id": "6989117057774125087", "title": "原生Js 经典横版2D超级玛丽 ", "desc": "https://github.com/mia1232/ClassicSuperMario 超级玛丽一直是我们童年的回忆之一，那经典的背景音乐，熟悉的游戏画面和丰富的可玩性使其成为90年代最流行的游戏之"}, {"id": "6844903896163303438", "title": "【中高级前端必备】手摸手教你撸一个脚手架", "desc": "vue-cli, create-react-app、react-native-cli 等都是非常优秀的脚手架，通过脚手架，我们可以快速初始化一个项目，无需自己从零开始一步步配置，有效提升开发体验。尽管这些脚手架非常优秀，但是未必是符合我们的实际应用的，我们可以定制一个属于自己的…"}, {"id": "6898093501376905230", "title": "「 giao-js 」用js写一个js解释器", "desc": "这是分析和理解句子的第一阶段。 词法分析是由词法分析器完成的,词法分析器会扫描(scanning)代码,提取词法单元。 词法分析器将代码分解成 Token 后,会将 Token 传递给解析器进行解析,我们来看下解析阶段是如何工作的。 Javascript 在语法中是一个主语名词…"}, {"id": "6997595726188380168", "title": "小蝌蚪传记：js、css、html压缩与混淆汇总", "desc": "背景 前段时间针对某件大事件，我们用之前的一个老原生html项目，涂涂改改快速做了一个h5，由于时间紧迫直接上线了 结果没想到。。。。第二天就被某大公司抄袭了。。。调了点颜色、改了些文案就直接抄袭并上"}, {"id": "6844903657264136200", "title": "微任务、宏任务与Event-Loop", "desc": "首先，JavaScript是一个单线程的脚本语言。 所以就是说在一行代码执行的过程中，必然不会存在同时执行的另一行代码，就像使用alert()以后进行疯狂console.log，如果没有关闭弹框，控制台是不会显示出一条log信息的。 亦或者有些代码执行了大量计算，比方说在前端暴…"}, {"id": "7005524582845284365", "title": "vue项目包含文件上传的表单提交解决方案", "desc": "在我们通常开发的web前端项目中，常会遇到表单提交的需求，一般情况下，我们会在一个接口中提交所有的表单，但是如果遇到有文件上传的情况，比如最常见的图片上传，这时候，我们有两种提交表单的方法：一是将图片"}, {"id": "6998771859722338340", "title": "『面试的底气』—— 设计模式之职责链模式（三）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7002608904375025671", "title": "数据结构复习-二叉树", "desc": "最近面试被数据结构卡住了，几次面试都栽在了数据结构上，无论是前端还是后端，数据结构都是一个企业筛选人才的方式，学好数据结构确实对于进一步发展有着很强的促进作用，所以开始恶补数据结构"}, {"id": "7002774990982479909", "title": "云谦：再看 Babel", "desc": "1、说到 Babel 我会想到的一些关键词，语言特性、tc39、补丁、扩展和生态、慢，你会想到啥？ 2、Babel 的出发点是让开发者提前用上 ECMAScript 提案里的特性，除此之外，我们还用他"}, {"id": "6844903656865677326", "title": "前端笔试&面试爬坑系列---算法", "desc": "终于来了，算法相关的。 其实个人理解，前端岗位对于算法的要求与其他IT岗位相比，是低得多的。 但是小白我经历了如蚂蚁金服、网易这样的大厂教做人之后，还是觉得，对于一些基本算法、思想的掌握还是必须的。 然后，就把自己遇到的、学到的算法相关的再总结一下，方便自己随时备战面试。 JS…"}, {"id": "7004688034062925837", "title": "深入理解Object.defineProperty()，搞懂它的“属性描述符”", "desc": "Object.defineProperty()这个函数很有意思，为了充分理解这个函数，特总结如下。欢迎批评指正。 其中引用了MDN，但做出了详细的解读。"}, {"id": "6844903810289123342", "title": "五年面试，三年模拟", "desc": "通过改变html元素的字体大小，就可以设置子元素的实际大小。 采用了 absolute，导致父元素脱离了文档流，那所有的子元素也需要脱离文档流。如果页面复杂，那开发的难度可想而知 其实也就是 BFC 的渲染规则（能说出以下四点就够了）。包括： BFC 内部的子元素，在垂直方向，…"}, {"id": "6868530321776705544", "title": "你还在为项目里的重复请求发愁吗?", "desc": "最近发现项目里面会出现一些重复的请求，在某些页面中，相同参数相同地址的请求会在1s之内连续发送多次。为了解决这个问题，最终做出了两个工具（repeat-request-minder和repeat-request-minder-webpack-plugin）来辅助我们避免重复的请…"}, {"id": "6996604767464062984", "title": "React Hooks 性能优化，带你玩转 Hooks", "desc": "要想解决性能问题，关键在于组件重复渲染的处理。在使用 `React Hooks` 后，很多人会抱怨渲染次数变多，比如我们会把不同的数据分成多个 `state` 变量，每个值的变化都会触发一次渲染。"}, {"id": "7002440303806742564", "title": "一个前端必备的JS代码规范", "desc": "1. 变量 2. 变量3. 函数 4. 对象和数据结构5. 类6. 测试7. 并发8. 错误处理 9. 格式化"}, {"id": "6994976511480561695", "title": "JavaScript 系列之 this（一）", "desc": "[JavaScript 系列之 this｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6931901091445473293", "title": "实现Web端自定义截屏(JS版)", "desc": "前几天我发布了一个web端自定义截图的插件，在使用过程中有开发者反馈这个插件无法在vue2项目中使用，于是，我就开始找问题，发现我的插件是基于Vue3的开发的，由于Vue3的插件和Vue2的插件完全不兼容，因此插件也就只能在Vue3项目中使用。 经过一番考虑后，我决定用原生js…"}, {"id": "6844904110408335368", "title": "骚年，请不要手敲 template 了", "desc": "天天搬砖，也早已变成了cv工程师。频繁的复制粘贴，复制完成后再删除，枯燥且无聊。项目中我们通常在编辑器中配置快捷键生成代码片段。好像这些也满足不了cv的欲望。在项目中配置业务相关的一些模板文件，然后动态生成文件，显得尤为重要。不受编辑器的限制，更好的自定义配置，显得更为强大。 …"}, {"id": "6992022261825798151", "title": "🚀详解JavaScript系列之数组(三)｜ 8月更文挑战", "desc": "前言 push() push()：向数组的最后面插入一个或多个元素，返回结果为新数组的长度。会改变原数组，因为原数组变成了新数组。 语法：新数组的长度 = 数组.push(元素); 示例： pop()"}, {"id": "6979770466022096926", "title": "关注破百纪念：各位小伙伴，掘金的LOGO，请你们与我一起合个影吧～", "desc": "半年了，关注终于破百（诶呀，破百高兴成这样真没出息），用半年来关注我的各位小伙伴的昵称采用词云图的形式拼出掘金的LOGO作为纪念，下半年开始了，继续努力加油，在这里结识更多的伙伴～"}, {"id": "6998039421522018318", "title": "一起锤闭包", "desc": "一、概述 闭包，日常开发中看起来很少使用，但实际我们又经常在日常开发里无形使用，而且面试也经常被提及，很多同学开发好几年可能对闭包的理解就是只能说出个大概概念，今天咱们就来捶捶闭包。 二、浏览器的垃圾"}, {"id": "6982021066084319262", "title": "vue3+three 开发3D汽车展示", "desc": "在掘金看到一篇three.js开发汽车展示厅的教程，就动手用vue3实现一个，模型上sketchFab上找的特斯拉模型,ui操作用vue 实现，three的基本概念在掘金也很多，就不多说了。废话少说 "}, {"id": "7002113826141241358", "title": "javascript实现继承", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战” JavaScript 在编程语言界是个异类，它和其他编程语言很不一样，JavaScript 可以在运行的时候动态地改变某个变量的类型。 "}, {"id": "6865101730166767623", "title": "用「增量」思想提升代码检查和打包构建的效率", "desc": "在这里「增量」这个概念的对立面是「全量」。在 Linux 系统中当需要备份数据或者跨服务器同步文件时，会用到一个叫 rsync 的工具，它的速度会比 scp/cp 命令更快，因为它会先判断已经存在的数据和新数据的差异，只传输不同的部分，即「增量」同步。 在前端开发工程化领域，本…"}, {"id": "6844903869525262349", "title": "「前端进阶」JS中的内存管理", "desc": "像C语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()用于分配内存和释放内存。 而对于JavaScript来说，会在创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放内存，这个自动释放内存的过程称为垃圾回收。 因为自动垃圾回收…"}, {"id": "6844903805587619854", "title": "嗨，你真的懂this吗？", "desc": "this关键字是JavaScript中最复杂的机制之一，是一个特别的关键字，被自动定义在所有函数的作用域中，但是相信很多JvaScript开发者并不是非常清楚它究竟指向的是什么。听说你很懂this,是真的吗？ 如果你思考出来的结果，与在浏览中执行结果相同，并且每一步的依据都非常…"}, {"id": "6992364056250171422", "title": "万字总结webpack实战案例配置", "desc": "🛴序言 在前面的两篇文章中，我们讲解了 webpack 的入门知识。但是呢，入门知识了解了之后，总得应用到具体的案例当中来。 因此，在下面的"}, {"id": "7001018421743878174", "title": "javascript扁平化的实现", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战” 数组的扁平化其实就是将一个嵌套多层的数组 array（嵌套可以是任何层数）转换为只有一层的数组。举个简单的例子，假设有个名为 flatt"}, {"id": "6987219589612601357", "title": "基础篇 - 从构建层面看 import 和 require 的区别", "desc": "前言 一切的一切，都是因为群里的一个问题 虽然说最近在做 webpack 相关的事情，但是也没有对着干问题做过相关的研究，网上很多文章包括 vue 都介绍了建议使用 import ，但是没有说为什么要"}, {"id": "6987894771008143397", "title": "JavaScript for-in和for-of的区别总结", "desc": "for-in for...in语句以任意顺序遍历一个对象的除Symbol以外的可枚举属性。 variable：在每次迭代时，variable会被赋值为不同的key，即属性名。 object：非Symb"}, {"id": "6978001532717367304", "title": "关于一道经典Promise面试题的思考", "desc": "无意间刷到一个关于Promise的题, 经过深入分析之后重新认识到Promise内部原理~~~~~~"}, {"id": "6844903906279964686", "title": "js基础-面试官想知道你有多理解call,apply,bind？[不看后悔系列]", "desc": "非严格模式下：thisArg指定为null，undefined，fun中的this指向window对象. param1,param2(可选): 传给fun的参数。 如果param不传或为 null/undefined，则表示不需要传入任何参数. apply第二个参数为数组，数组…"}, {"id": "6884958910311055374", "title": "5G前端时代会迎来什么改变？", "desc": "苹果往往能引领手机界的潮流,无论外观还是功能等. 今年前端的几个实践爆发点：例如低代码平台,前端Serverless化,以及webIDE等。 \"前端\"或许会更轻,前端未来可能只会专注交互实现，其余都在云端完成，但是前端可以去做更多的事，通过Serverless模式屏蔽运维部署层…"}, {"id": "6997121009102880776", "title": "实战：使用腾讯云快速搭建并部署 Serverless 应用", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 很多开发者一定多少听过 Serverless Framework。既用更少的服务架构，甚至是无服务器，去实现整个工程的开发。开发者不需要关"}, {"id": "6990235766169436196", "title": "【译】现代 JavaScript 框架存在的根本性原因", "desc": "我见过很多人盲目地使用 React、Angular 或 Vue.js 等现代框架。这些框架提供了许多有趣的东西，但人们通常忽略了它们存在的最深层原因，这不是: 他们是基于组件的; 他们有一个强大的社区"}, {"id": "6937939181356187662", "title": "基于饿了么骨架屏方案，使用Chrome扩展程序自动生成网页骨架屏", "desc": "前言但是page-skeleton-webpack-plugin需要puppeteer这个依赖，这玩意会导致整个项目在开发阶段很笨重,而且不是所有的页面都要用到骨架屏，后面找了套方案，决定使用谷歌插件"}, {"id": "6996662560443334686", "title": "ES6新增的symbol", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 ES6 引入了一种新的原始数据类型symbol，表示独一无二的值。可以通过typeof检测出来。 所以现在通过typeof能检测出7种数据"}, {"id": "6992874755070099492", "title": "Map和Object性能测试", "desc": "最近看到一道力扣题时发现频繁操作键值对时使用Map比Object性能更优，于是简单测试了一下两者的区别。"}, {"id": "6999653723496513572", "title": "函数的优点、预解析、作用域", "desc": "函数的优点 封装 （把函数保存起来） 2.复用 3.延迟执行 ； 函数的预解析 变量提升 函数提升 函数的作用域 全局作用域和局部作业域"}, {"id": "6844903569984864270", "title": "浅谈Debounce 与 Throttle", "desc": "debounce 与 throttle 是开发中常用的高阶函数，作用都是为了防止函数被高频调用，换句话说就是，用来控制某个函数在一定时间内执行多少次。 使用场景： 比如绑定响应鼠标移动、窗口大小调整、滚屏等事件时，绑定的函数触发的频率会很频繁。若稍处理函数微复杂，需要较多的运算…"}, {"id": "6844903928539119629", "title": "《React打造精美WebApp》(试读)", "desc": "1、后端接口和文档完整，大家都知道开发一个产品绝不仅仅是前端一个人的活，需要花大量的时间和后端沟通，商讨数据接口的形式，最终做成文档并以此为依据开发。而现在github已经有非常成熟的抓取网易云音乐服务端的接口，不仅在与时俱进地不断更新接口，而且文档写的也非常完善，用这样的真实…"}, {"id": "6844903573705195528", "title": "从一道Promise执行顺序的题目看Promise实现", "desc": "这道题的输出是123，为什么不是132呢？因为我一直理解Promise是没有异步功能，它只是帮忙解决异步回调的问题，实质上是和回调是一样的，所以如果按照这个想法，resolve之后应该会立刻then。但实际上并不是。难道用了setTimeout？ Promise的实现有很多库，…"}, {"id": "7001676177110728717", "title": "JS面向对象 继承的几种方式", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 这篇文章主要介绍了JS实现面向对象继承的5种方式,结合实例形式分析了JavaScript面向对象继承功能的5种常见实现方法原理与操作技巧,"}, {"id": "6844903612867411982", "title": "使用next.js完成从开发到部署", "desc": "next.js 是一个非常棒的轻量级的react同构框架，使用它可以快速的开发出基于服务端渲染的react应用。在next.js 官网推荐的是使用now来部署应用，但是对于国内用户或者说是有特殊需求的用户来说，部署到自定义服务器也许是大多数人希望的。借着近期公司官网改版，顺便分…"}, {"id": "6999583696894296100", "title": "浏览器多页面间的通信", "desc": "一、同源页面间的跨页面通信 1. BroadCast Channel BroadCast Channel 可以帮我们创建一个用于广播的通信频道。当所有页面都监听同一频道的消息时，其中某一个页面通过它发"}, {"id": "6844904185117278215", "title": "函数防抖和节流", "desc": "在任务频繁触发的情况下,一个事件在被触发的一段时间后再执行回调,假如在这段时间内又被触发了,则重新开始计时. 防抖在我们的日常生活中,也是随处可见.就比如我们平时坐电梯的时候,总是要等到没有人进来了再一小会儿的工夫,电梯门才会关上.而在项目中,防抖的应用场景也是挺多的.当我们在…"}, {"id": "6844903582672650253", "title": "谈谈前端异常捕获与上报", "desc": "Hello，大家好，又与大家见面了，这次给大家分享下前端异常监控中需要了解的异常捕获与上报机制的一些要点，同时包含了实战性质的参考代码和流程。 正所谓百密一疏，一个经过了大量测试及联调的项目在有些时候还是会有十分隐蔽的bug存在，这种复杂而又不可预见性的问题唯有通过完善的监控机…"}, {"id": "6989957740852428813", "title": "总结一下JS中的继承", "desc": "正好在复习的过程中复习有关js的继承方面的知识，写下博客来总结下。js继承方式有多种，虽说有简单的方法，但是还是需要知道底层是怎么实现的。"}, {"id": "6939878637827014664", "title": "啊哈，我也实现了大文件的断点续传", "desc": "之前看到了几位大佬写的前端大文件上传的文章，感觉这个功能还挺有意思的，我也试了试，在大佬的代码上加了一些自己的想法。这篇文章算是一个自己的总结，也希望能给想做这个功能的同学一些帮助。 如果将每个分片设为1M，那么一个200M的文件就会有200个分片，也就是会有200个请求。这2…"}, {"id": "6981975671706746916", "title": "VUE3（十三）main.ts中全局引入axios", "desc": "VUE2中可以将我们需要的插件挂载到VUE的主链上（配置成全局属性），然后通过this调用，但是在VUE3的ts中使用这样的配置方法的话是没法通过编译的，这个时候我们就需要拓展属性。 vue3.x+t"}, {"id": "6984954524314107917", "title": "TypeScript类与继承和修饰符就是这样简单", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 1.我理解的类 2.类的基本使用 ![SFUU~J3D8M51E_F}38K3.png 3.实例化类的注意点 4.类与"}, {"id": "6844903926999826446", "title": "120行代码实现一个交互完整的拖拽上传组件", "desc": "useState、useEffect、useRef是如何替代原生命周期和Ref的。 如何使用React Hooks编写自己的UI组件库。 文章讲了React拖拽上传的精简实现，但直接翻译照搬显然不是我的风格。 于是我又用React Hooks 重写了一版，除CSS的代码总数 1…"}, {"id": "6995411965585653790", "title": "手动实现Promise.all", "desc": "Promise.all功能分析： 方法接受一个数组（可以不是数组，但须具有Iterator接口）作为参数； 方法返回一个新的Promise实例； 数组成员中不是Promise实例的会转成Promise"}, {"id": "6982854613590343694", "title": "JavaScript 对象 (Object)", "desc": "对象(Object) 样例代码： 完整代码： 效果截图： 对象的创建 使用 {} 创建 样例代码： 效果截图： 使用 Object 创建 样例代码： 效果截图： 使用 Function 创建 样例代码"}, {"id": "6889815642099335181", "title": "【React Hooks系列】之useMemo", "desc": "由于React的函数式组件使用起来方便（对比class组件），我将重点使用函数组件来运行开发。在这系列博客中，我将分享我所学到Hook系列API的知识。 在class的时代，我们一般是通过pureComponent来对数据进行一次浅比较，引入Hook特性后，我们可以使用Memo…"}, {"id": "6929115841103396877", "title": "从输入url那一刻起", "desc": "首先浏览器解析输入的域名,先查找本地硬盘的host文件,看有没有和这个域名对应的ip,如果有,就直接使用这个ip。 如果没有,浏览器会发出一个DNS请求到本地DNS(域名分布系统)服务器.本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。 请求到达DNS…"}, {"id": "6996459824363864072", "title": "javascript数组的一些方法", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战” 数组交集 数组并集 数组差集 数组去重 4.去重　　　　 数组去重其他方法 方法一 方法二 利用ES6中的 Set 方法去重 二、使用双"}, {"id": "6844903576477630471", "title": "19 个 JavaScript 有用的简写技术", "desc": "当想写if...else语句时，使用三元操作符来代替。 当给一个变量分配另一个值时，想确定源始值不是null，undefined或空值。可以写撰写一个多重条件的if语句。 传统函数编写方法很容易让人理解和编写，但是当嵌套在另一个函数中，则这些优势就荡然无存。 为返回多行语句（例…"}, {"id": "6997289461671755812", "title": "进阶教程 9. DOM 事件", "desc": "DOM事件，常见的事件，事件对象，事件流，事件委托，window.onload 和DOMContentLoaded...."}, {"id": "6983105166845149221", "title": "创建并使用 WebAssembly 模块", "desc": "WebAssembly 模块定义了暴露给 JavaScript 调用的 函数。因此，就像现在你可以从 npm 拉取 lodash，然后通过 API 调用这个库的函数一样，在将来你也能拉取 WebAss"}, {"id": "6957983885464436772", "title": "js - 深浅拷贝", "desc": "现象 js真浅拷贝指的是对引用数据类型而言。 基本类型：Number，String，Boolean，Null，Undefined ，Symbol引用类型：Object，Array，Date，RegEx"}, {"id": "6972109475356344327", "title": "前端性能分析 \" Performance API \"  ", "desc": "定义 Performance 接口可以获取到当前页面中与性能相关的信息。它是 High Resolution Time API 的一部分，同时也融合了 Performance Timeline API"}, {"id": "6844903984289808391", "title": "「干货」用 Vue + Echarts 打造你的专属可视化界面（下）", "desc": "接上一篇文章 《「干货」用 Vue + Echarts 打造你的专属可视化界面（上）》，今天着重介绍 标记 的用法，来实现下图中的效果。 所用的 Echarts 的版本号为： v4.3。v-charts 的版本号为：v1.19.0。 标记的用法有很多，今天要介绍的场景有：折线图…"}, {"id": "6996955197905993764", "title": "jQuery库-事件", "desc": "这是我参与8月更文挑战的第14天，活动详情查看： 8月更文挑战 ​ 事件处理 事件绑定 eventName(function(){})：绑定对应事件名的监听 on(eventName,function"}, {"id": "6998554244508811300", "title": "【重温JS】JavaScript 巩固基础day21-梳理学习", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 ☆☆☆ 今天学习的内容: ( 对前面的学习进行一次简单系统的总结 ) >查缺补漏< ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! "}, {"id": "6992759604362870815", "title": "拆解QQ音乐播放器【封装进度条功能篇】", "desc": "我的自卑溢出来变成了安静与温柔。——夏吉尔硕 # 前言 先把其中的进度条功能模块，拆分出来进行封装和梳理。"}, {"id": "6844903619595075592", "title": "闭包实际场景应用", "desc": "闭包概念大家已经耳熟能详了可是如果在面试中被问到闭包应用经常会陷入小尴尬下面介绍下本人总结的实际应用场景 具体场景1.函数防抖 比如要缩放窗口触发onresize事件需要在这时候做一件事情,但是我们希"}, {"id": "6975722233343934471", "title": "Sticky 魔法", "desc": "众所周知，css 有一个样式叫做 sticky 是一个能够将元素紧贴在浏览器窗口顶部的样式，但是在其兼容性目前并不是很理想，所以我们有时候需要自己手动去实现 sticky 的效果，当然已经存在了很多相"}, {"id": "6983722761046720542", "title": "如何给a赋值，使a == 1 && a == 2 && a == 3返回true?", "desc": "如何使a == 1 && a == 2 && a == 3返回true? 要使这个式子返回true，那么首先要a == 1，a == 2， a == 3都是true，我的第一反应是，在JS里面，相等操"}, {"id": "6844904166683328525", "title": "前端如何快速处理数据成想要的样子（数组篇）", "desc": "我们写业务逻辑的时候，常常需要处理大量的数据，这种处理，不仅仅是拿到接口返回数据进行渲染，有些时候，返回的数据“残缺”的，是不能直接拿来用的，因此，我们需要处理加工返回新的数据，成为自己想要的样子，本篇主要针对常见的json数组展开，为什么是json数组呢，主要我想的是,比如商…"}, {"id": "6998802200931762189", "title": "import()函数和import语句", "desc": "前因 最近看了公司一位大佬的代码，突然对import()产生了疑问，并翻阅了一些资料进行查询，希望对同样有疑问的同学有一些帮助，也希望路过的大佬多多指教。接下来进入笔记分享~。 import函数 im"}, {"id": "6844903717574017031", "title": "浅聊HTTP缓存 (HTTP Cache)", "desc": "HTTP缓存一直是一个老生常谈的问题，前端在日常发布、部署工作中，常常要面对。 项目会在静态资源（如:css,js）使用chunkHash来处理，因此能保证修改后与旧代码文件名字不会重复。以避免无法更新改动。 在该项目中部署后，进行代码进行一次location.reload，改…"}, {"id": "6844904067186032654", "title": "如何使用Mac安装vscode以及配置git简要教程", "desc": "最近，由于疫情需要在家办公，就新入手了一台Macbook pro，第一次使用Mac，宛若发现新大陆。 Mac跟windows还是有些区别的，无论是从快捷键还是使用使用模式上。小编我拿到上手的时候也是一脸懵逼。 当然，小编我是辣么的聪明（不要捻的一笑嘿嘿嘿），一晚上就差不多摸熟了…"}, {"id": "6963917176029839374", "title": "高性能JavaScriptの笔记（一）", "desc": "学习来源 《高性能JavaScript-中文版》（仅供学习使用） 提高日常代码优化性能的能力，直接看雅虎军规35条也不错"}, {"id": "6993237182555095048", "title": "websocket + stomp+ sockJs实现消息分部门推送", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 背景介绍 websocket： 很多网站为了实现推送技术，所用的技术都是轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HT"}, {"id": "6844903697705598983", "title": "Electron 截图踩坑和优化集合", "desc": "上一篇文章《从零开始用 electron 手撸一个截屏工具》发布之后发现阅读的朋友还不少，不过工具真正使用的时候就发现了问题，所以为了让我们的截图工具更好用，就又做了很多优化，当然了也遇到了很多坑。 1. 截图一瞬间卡顿问题 desktopCapturer.getSources…"}, {"id": "6983321432373592100", "title": "Flow：Facebook 的 JavaScript 静态类型检查器", "desc": "优化又臭又长维护噩梦的JavaScript老项目 Flow：Facebook 的 JavaScript 静态类型检查器"}, {"id": "6952674863664332831", "title": "跨域（非同源策略请求）常见的实现方式", "desc": "跨域（非同源策略请求）常见的实现方式什么是跨域首先 在了解跨域，需要先知道什么是同源策略跨域是如何产生的呢？例如：一个域的页面去请求另一个域的资源（A 域的页面去请求 B 域的资源）"}, {"id": "6960834846268588046", "title": "JavaScript 模块化", "desc": "JS 模块化 1、模块化发展历程 IIFE 自执行函数 AMD 使用 requireJS 来编写模块化（依赖必须提前声明好。） CMD 使用 seaJS 来编写模块化（支持动态引入依赖文件。） Com"}, {"id": "7000773522783993869", "title": "1-1 新的声明方式", "desc": "1,不属于顶层对象window 2，不允许重复声明 3，不存在变量提升 4，暂时性死区 5，块级作用域 6，小案例 循环输出0-4 使用原来的var声明 使用闭包解决 使用let解决 \\"}, {"id": "6844903673043091469", "title": "iview在ie9及以上的兼容问题解决方案", "desc": "可是ie不是你不想兼容就不兼容啊。说多了都是泪。 使用iview已经有一年多的时间。总的来说，iview还是给我的工作带来了很大的方便。 主要的吐槽点就是文档写的不够清楚。 比如组件的按需引入，寥寥数语，看完按照文档引入了，结果控制台一直报错。 然后到隔壁element一看，原…"}, {"id": "6844903767867916301", "title": "JavaScript 判断 iPhone X Series 机型", "desc": "iPhone X 底部是需要预留 34px 的安全距离，需要在代码中进行兼容。 这在之前是没问题的，新的 iPhone X Series 设备发布之后，这个就会兼容就有问题。 width === 375 && height === 812 只能识别出 iPhone X 和 iP…"}, {"id": "6975844102508118053", "title": "词法作用域与执行上下文", "desc": "JavaScript 这门语言使用的是词法作用域，即静态作用域，。这意味着函数执行时使用的是定义函数时的变量作用域，而不是调用函数时的变量作用域。与之相对的是动态作用域，即函数的作用域是在函数调用的时"}, {"id": "6998085834649927688", "title": "JS对象的getter、setter属性", "desc": "JavaScript 支持访问器属性，这些属性没有一个值，而是有一个或两个访问器方法：getter 和/或setter。"}, {"id": "6931906660680400909", "title": "精读《设计模式 - Memoto 备忘录模式》", "desc": "Memento（备忘录模式）属于行为型模式，是针对如何捕获与恢复对象内部状态的设计模式。 意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。 其实备忘录模式思想非常简单，其核心是定义了一个 Memoto（…"}, {"id": "6875878086102286343", "title": "Ohbug 前端监控系统开源第二弹", "desc": "这里是 Ohbug 开源计划第二弹。第一弹的 Ohbug SDK 我们已经可以收集到数据，这一弹聊一聊数据的处理。 为了方便存储，Transfer 需要对不确定数据类型的字段预处理为字符串，这里转化 detail actions metaData 三个字段。 具体转化的细节可见…"}, {"id": "6964715685238800420", "title": "js中DOM 节点的一些操作方法", "desc": "js中DOM 节点的一些操作方法 DOM 什么是DOM DOM：文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规"}, {"id": "6984314261354856455", "title": "Webpack 原理解析及实现", "desc": "Webpack 原理解析及实现 这是Webpack官网的第一句介绍，可以看到几个关键字：静态模块打包工具、依赖图、映射。这也是这类工具的核心功能：将文件映射为依赖图打包。 首先探讨一下这个构建流程。读"}, {"id": "6844903582370643976", "title": "如何轻松拿到大厂面试offer | 掘金技术征文", "desc": "朋友推荐去平安子公司一帐通去面试，没有初面，直接进入二面和三面，蛮简单的，过了，但放弃入职。下面谈谈面试题吧。 页面加载完成有两种事件，一是ready，表示文档结构已经加载完成（不包含图片等非文字媒体文件），二是onload，指示页 面包含图片等文件在内的所有元素都加载完成。(…"}, {"id": "6950503497477390367", "title": "JavaScript【继承】", "desc": "看过一遍《红宝书》，只不过仅对很多概念熟悉并不算是掌握。这一阵子的面试 JS 基础中都会问到继承，大概都讲个一知半解。所以打算一字一行再学习一遍。"}, {"id": "6921991985997807623", "title": "如何准确判断一个对象的类型？", "desc": "作为前端的同学，我们应该都知道可以使用 typeof 和 instanceof 在运行时判断JavaScript对象的类型。 对于原始类型（primitive type）的数据，大部分可使用 typeof。在 JavaScript 中，primitive 类型包括 Null、U…"}, {"id": "6989522184783790094", "title": "JS数据类型判断的几种方法", "desc": "JS数据类型判断 JavaScript 中常见数据类型有Number、String、Boolean、Object、Array、Json、Function、Date、RegExp、Error、undef"}, {"id": "6844903975481769997", "title": "前端基础知识(温故而知新)", "desc": "技术栈：JavaScript、AJAX（跨域技巧）、jQuery... 技术栈：H5、CSS3、响应式布局开发、Zepto、Hybrid（混合APP开发）、微信小程序... 技术栈：NODE(基于JS编程语言开发服务器端程序)、Express/Koa... 为了迎合日益发展的前…"}, {"id": "6991475477550628901", "title": "let,const复习", "desc": "重新复习ES6语法知识，**参照的是阮一峰老师的 ESCMAScript6入门 ， 会加上一些自己的理解。不足之后，还请多多指导！"}, {"id": "6875495659701534734", "title": "还没查阅过 ECMAScript 规范？那就让我们一起来开始吧！", "desc": "作为前端搬砖中精通 Copy &#x26; Paste 的一员，如果你还没有查阅过 ECMA262 的规范文档，那么建议后续遇到有些问题的时候，可以试着往这方面靠，如果刚好可以查阅一下，那么往往能受益匪浅。 ECMAScript 是规范，JavaScript 是规范的实现。当我…"}, {"id": "6983590609931993095", "title": "js手写系列（1）|  Vue3.x响应式原理", "desc": "秉着搞懂原理才能更好高效开发的信念，写下了这篇Vue3.x响应式实现，简单易懂，咱一步一步的来，将不懂就问、不会就学进行到底"}, {"id": "6844903991793451016", "title": "如何优雅处理JavaScript异步错误？", "desc": "1. try/catch try/catch基本上是大家最常和async/await一起使用的，基本上我们会用它去包围大部分的异步方法。await关键字后面的promise一旦reject了，就会抛出一个异常错误。 好像我们只要无脑把逻辑都放到try/catch里面就万事大吉了…"}, {"id": "6867437579805917191", "title": "vue项目实现文字转换成语音播放功能", "desc": "一、WebSpeechAPIWebSpeechAPI使您能够将语音数据合并到Web应用程序中。WebSpeechAPI有两个部分：SpeechSynthesis语音合成（文本到语音TTS）和Speec"}, {"id": "6954250225410113544", "title": "《javascript高级程序设计》学习笔记 | 8.1.理解对象", "desc": "理解对象 ECMAScript 定义对象：无序属性的集合（一组没有特定顺序的值），其属性可以包含基本值、对象、函数，整个对象可以想象成一个散列表 相关代码 → 创建自定义对象的 2 种方法：Objec"}, {"id": "6998715034746486815", "title": "@alitajs/dform 移动端表单库 3.0 强势来袭", "desc": "为了解决从事移动端 h5 开发的小伙伴被长表单支配的恐惧，我们在 `2020` 年年初推出了 `dform` 的第一个版本。经过一年多的时间的沉淀，在公司内部数十个项目中得到锤炼，不断的完善优化。"}, {"id": "6990007879680032782", "title": "记一次npm install 遇到的问题", "desc": "npm install 大部分依赖都安装好了，最后报错：Error: Can't find Python executable \"python\", you can set the PYTHON env"}, {"id": "6895967637580070925", "title": "不妨巩固一下这13个手写代码(面试高频)", "desc": "手写一些面试高频的代码，随手练习。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。"}, {"id": "6944243108410458149", "title": "一次Javascript的计算浮点数精度问题记录", "desc": "在最近的项目中，会设计到金额单位的变化，比如分和元之间的互相转换。 但是偶然中在计算4.35 * 100时，返回的结果并不是预期的435，而是434.99999999999994。意识到，可能遇见JavaScript中的经典问--0.1 + 0.2是否等于0.3了。 我们知道在…"}, {"id": "6914513439922601997", "title": "🤞数组去重", "desc": "new Set() Set 结构不会添加重复的值。 扩展运算符... 转成数组 new Set() Set 结构不会添加重复的值。 new Set() Set 结构不会添加重复的值。"}, {"id": "6941208199148077086", "title": "一文吃透js执行机制🔥", "desc": "所以本来快轮到你来办理业务，会因为老大爷临时添加的“理财业务”而往后推。 无论是什么需求，只要是柜员能够帮她办理的，都会在处理你的业务之前来做这些事情，这些都可以认为是微任务。 在当前的微任务没有执行完成时，是不会执行下一个宏任务的。"}, {"id": "6918364209512185870", "title": "七日打卡-js读取解析JSON类型数据", "desc": "JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式，同时，JSON是 JavaScript 原生格式。非常适合于服务器与JavaScript 的交互。 他们都是这样说的：尽管有许多宣传…"}, {"id": "6901598928483909640", "title": "JavaScript中实用的8个代码片段", "desc": "1. 反转字符串 使用扩展符号...将字符串解析成数组。 2. 数阶乘 计算数据的阶乘，使用箭头函数和三元运算符。 3. 整数转数组 使用扩展符号...，并结合map方法。 4. 检查是否为2的幂数 这个很简单明了，巧妙运用了与(&#x26;)运算符。 5. 创建一级对象的键值…"}, {"id": "6911235412145111054", "title": "phaser3入门教程-从零开始开发一个打砖块游戏", "desc": "Phaser是一个HTML5游戏框架。它使用了许多HTML5 API，例如Canvas，WebGL，Audio，Gamepad等，并添加了一些有用的逻辑，例如管理游戏循环并为我们提供了物理引擎。 使用Phaser，我们可以只用HTML，CSS和JavaScript来构建2D游戏…"}, {"id": "6991835288725110815", "title": "《JS原理、方法与实践》- canvas作图（四）- 插入文本和图片｜ 8月更文挑战", "desc": "插入文本 在绘图的过程中经常需要插入一些文本内容，在CanvasRenderingContext2D中可以使用下面的方法来插入： fillText(text,x,y[,maxWidth]):实心文本 "}, {"id": "6844904182915268622", "title": "造轮子 | 如何开发一个请假时长计算器？", "desc": "github，笔芯。 自从做了小程序外勤打卡需求后，紧接着继续做请假审批流程的开发，在处理请假表单的时候，有个请假时长的展示。当用户选择了请假的开始时间和结束时间后，可以自动推算出请假时长，听上去，需求很常规。但是，哈哈哈，产品要求所有请假都按照半天请，比如说： 请假的开始时间…"}, {"id": "6844903613412671496", "title": "详解高级前端面试常问的EventLoop", "desc": "当我们的代码从上到下同步执行时，遇到setTimeout就记时，当时间到时就把此事件放到事件队列中，遇到微任务就把微任务放到微任务空间，代码会继续向下执行,直到同步代码执行完毕。 完毕后，会看看微任务空间中有没有微任务，有就把微任务空间中的微任务全部执行，然后去队列中取我们的事…"}, {"id": "6906057192975040525", "title": "使用Prism高亮显示代码", "desc": "使用CDN链接引入必备的文件,一个css，一个js文件。如下： (注意个别站点的cdn链接国内有时候无法访问,用之前可以先在浏览器测试一下) 如果是直接高亮显示代码，写在 &#x3C;pre>&#x3C;code> ... &#x3C;/code>&#x3C;/pre> 中，设…"}, {"id": "6939430294068035591", "title": "拖拽可缩放div---组件学习分享", "desc": "可以发现，如此罗列出来后，通过代码实现就变的容易了，这次需求的主要实现，依靠的就是鼠标事件，所以必须要理解鼠标事件的属性，接下来在代码中，我会将这些属性及事件进行使用并解释。 上面的代码，我做了很多的注释，阅读下来发现，只要理解了属性所代表的含义，利用其作用，很容易就可以实现想…"}, {"id": "6844903620702371848", "title": "使用apidoc文档神器，快速生成api文档", "desc": "写完api接口，就需要编写api文档了，如果一个个手写的话就很麻烦，就得使用apidoc只需要通过写注释，就可以快速生成文档了。 第一步先安装全局模块apidoc。 设置文档块的版本。 定义方法文档块的名称。名称将用于生成的输出中的子导航。 定义方法文档块属于哪个组。组将用于生…"}, {"id": "6844903680320208903", "title": "在React中使用百度地图api的一系列demo", "desc": "因为之前工作的关系，会频繁的使用各种地图，例如百度地图，高德地图，谷歌地图等。所以想整理一下，写一个在react中根据不同的需求使用地图api的各种demo集合，所以先以百度地图为例。 本文将根据官网显示的demo列表，一个一个实现在react中的使用方法。文章内容较长，将会持…"}, {"id": "6844903609943998477", "title": "从lodash源码学习节流与防抖", "desc": "之前遇到过一个场景，页面上有几个d3.js绘制的图形。如果调整浏览器可视区大小，会引发图形重绘。当图中的节点比较多的时候，页面会显得异常卡顿。为了限制类似于这种短时间内高频率触发的情况，我们可以使用防抖函数。 大致捋一遍代码结构。为了方便阅读，我们先把源码中的Function注…"}, {"id": "6844903652285480968", "title": "使用webpack4搭建一个基于Vue的组件库", "desc": "组内负责的几个项目都有一些一样的公共组件，所以就着手搭建了个公共组件开发脚手架，第一次开发 library，所以是参考着 iview 的配置来搭建的。记录如何使用webpack4搭建一个library的脚手架 然后就是书写配置文件。 我写的 library 的目录结构如下，仅供…"}, {"id": "6992373968388751396", "title": "ES6 版本与 Babel", "desc": "本文介绍 ECMAScript6，版本历史、Babel 安装配置、在浏览器中使用 Babel，以及使用 babel-plyfill 支持 ES6 新增 API"}, {"id": "6952434099613237285", "title": "javascript——数组篇", "desc": "1、什么是数组？数组的标准定义为：一个存储元素的线性集合（collection），元素可以通过索引来任意存取，索引通常为数字，用来计算元素存储位置的偏移量。 如果你有了解过其他语言，就会知道所有编程语"}, {"id": "6992231633373888543", "title": "浅谈 Chrome 中的多进程架构", "desc": "这是我参与8月更文挑战的第2天，活动详情查看： 8月更文挑战 序言 近期参加了掘金的八月更文挑战，于是决定来一个月不停歇的学习并且日更的挑战。最后选择了浏览器的工作原理这个方向进行学习，今天是这个内容"}, {"id": "6992214051254173710", "title": "js 中的闭包", "desc": "在js中，闭包是一个很重要又相当不容易完全理解的要点,在这里以MDN里闭包为基础。用拆分的方式，谈谈个人对闭包的理解."}, {"id": "6844903936512491528", "title": "CORS 为什么要区分『简单请求』和『预检请求』？", "desc": "CORS（cross-origin resource sharing），跨源资源共享（一般俗称『跨域请求』），想必大家都已经有基本的了解。如果你还不了解的话，可以阅读 MDN 上的介绍，这里就不赘述了。 看上去很是复杂。 其实，简单请求就是普通 HTML Form 在不依赖脚本…"}, {"id": "6876959325034643469", "title": "[译]不要再犯这五个 Javascript 错误啦", "desc": "下文将列出五个让你的代码更加可读和易于维护小窍门。 在编辑旧项目的时候，有没有遇到过那种一加新逻辑就“粉碎”的迷惑代码？我们当然都遇到过。 为了让世界上不可读的 Javascript 代码更少，我得给你们看看以下的五个例子 -- 我的耻辱柱。 如果我们有一个返回多个值的函数,可…"}, {"id": "6991434588006383653", "title": "【查缺补漏】：JS模块化｜ 8月更文挑战", "desc": "模块化概述 很长一段时间，JavaScript存在模块化思想，比如早期流行的命名空间的开发思想，但是JavaScript一直没有 模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用"}, {"id": "6847902222009925640", "title": "从V8引擎来看JS中这个\"假数组\"", "desc": "在讲连续内存前，先来了解下什么是内存，知道的本节直接绕过。 通俗理解，在计算机中，CPU用于数据的运算，而数据来源于硬盘，但考虑到CPU直接从硬盘读写数据效率低，所以内存在其中扮演了“搬运工”的角色。 DRAM由于结构简单，可以做到面积很小，存储容量很大。用芯片短暂存储数据，读…"}, {"id": "6890710212803002376", "title": "🎉👨‍👩‍👧‍👧图解Javascript原型", "desc": "在创建这个函数的时候，会根据特定规则为该函数创建一个prototype属性（指针）指向函数的原型对象。 该实例的内部将包含一个指针（内部属性），ECMA-262 第 5 版中管这个指针叫[[Prototype]]。虽然在脚本中没有标准的方式访问[[Prototype]]，但 F…"}, {"id": "6844904035032498189", "title": "【动画演示】：事件循环 形象深动(JavaScript)", "desc": "JS 是单线程的:一次只能运行一个任务。通常这没什么大不了的，但现在想象一下我们正在运行一个需要30秒的任务。在这个任务中，我们要等待30秒，然后才能执行接下来要做的事情(JS 默认运行在浏览器的主线程上，所以整个UI都卡住了)。 幸运的是，浏览器提供了 JS 引擎本身没有提供…"}, {"id": "6992523347892371486", "title": "【前端--JavaScript】知识点（三）——关于this你不知道的事 （二）", "desc": "上一篇了解了this一些常见的误区，明白了每个函数的this是在调用时候被绑定的，完全取决于函数的调用位置。今天来研究一下this的绑定规则——"}, {"id": "6844903895756439560", "title": "lodash 是如何做类型检测的", "desc": "JS 的基本数据类型有 Number，String，Boolean，Symbol，Null，Undefined，六种数据类型。一种引用类型 object。 数值，根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 6…"}, {"id": "6844903956259274766", "title": "前端渣渣对requestAPI的不断重构之路", "desc": "我还是自我介绍一下吧，本人 19届毕业生，在大二的时候自学前端，没有系统的学习，也没人带，从菜鸟教程那里去学 html 、css 、js 等，然后中间去写过一点 php，也是 CURD 的工作。 自学路上太艰难，因为不仅仅会遇到一些除了前端的问题，还会遇到许多其他没涉及到的问题…"}, {"id": "6992210649442942984", "title": "《JS原理、方法与实践》- canvas作图（七）- 缩放", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 方法： scale(x, y) 坐标系除了可以移动和旋转外还可以进行缩放，缩放使用的是scale方法，它有两个参数，分别标识横轴和纵轴缩放的"}, {"id": "6844903521830043656", "title": "移动端如何强制页面横屏", "desc": "本文讲解了横屏显示，不能竖屏的游戏类页面的解决方案：写一个横屏的div，然后设置rotate正（负）90度，把他旋转过来；而且如果用户切到横屏时，需要把rotate复原，要求也能正常展现。"}, {"id": "6961398206575935501", "title": "深入理解JS中的内存机制，浅析深浅拷贝", "desc": "前言 讲个小故事吧：我在上学时，班上每个人都有自己的课桌（全班统一大小），课桌里空间有限，一般只能放一个书包就放不下了，班上公共区也有一个大一些的老师储物柜，每个老师都有一把钥匙打开，学生不能去动老师"}, {"id": "6844903582748114951", "title": "10行代码实现页面无限滚动", "desc": "由于网页的执行都是单线程的，在JS执行的过程中，页面会呈现阻塞状态。因此，如果JS处理的数据量过大，过程复杂，可能会造成页面的卡顿。传统的数据展现都以分页的形式，但是分页的效果并不好，需要用户手动点击下一页，才能看到更多的内容。有很多网站使用无限分页的模式，即网页视窗到达内容底…"}, {"id": "6847009771170562062", "title": "为什么有了 XMLHttpRequest，还要设计一套 fetch API?", "desc": "在阅读本文之前，需要大家先忘掉类似于 $.ajax() 和 axios 这类的库方法或库，回归到最原始的 XMLHttpRequest，然后再去思考新设计的 fetch API。因此阅读本文之前，你需要一些简单的前置知识：XMLHttpRequest(后面以 XHR 简称) 和…"}, {"id": "6844903540482293768", "title": "JavaScript 优雅的实现方式包含你可能不知道的知识点", "desc": "有些东西很好用，但是你未必知道；有些东西你可能用过，但是你未必知道原理。 实现一个目的有多种途径，俗话说，条条大路通罗马。很多内容来自平时的一些收集以及过往博客文章底下的精彩评论，收集整理拓展一波，发散一下大家的思维以及拓展一下知识面。"}, {"id": "6921638355214008334", "title": "从浏览器原理谈EventLoop与微任务宏任务", "desc": "这里以程序员都爱用的Chrome为例，Chrome采用多进程架构，由多个进程组成，进程下包含多个线程。 Chrome中主要有四个主要进程。 1. 浏览器进程（Browser Process） 2. 渲染器进程（Renderer Process） Main: 构建dom树 -> …"}, {"id": "6844903647340396558", "title": "前端算法之弹幕设计", "desc": "大家都说前端写页面较多，几乎用不到算法。本文愿从弹幕设计这个场景来描述算法在前端中的应用，我们先来看下实现效果： 开场之前我们先来描述弹幕开发的难度，再集中精力描述算法设计的思路。 如果弹幕采用相同的字号，碰撞的问题处理起来比较简单，只要考虑相邻弹幕的播放速度和偏移的位置就可以…"}, {"id": "6844903967613255693", "title": "前端动画之FLIP技术", "desc": "在创建UI时，添加合理的UI过渡动效，避免跳转和瞬间移动。如果将生活中的一些自然运动用到UI动效中来，将会给你的用户带来眼前一亮的感觉。毕竟，所有与你互动的东西都源自于生活中自然的运动。 接下来，我们将一起探讨你可能熟悉的某一类有意义的增强用户体验的UI动效。这种技术有一个专业…"}, {"id": "6844903679246467086", "title": "How React Works （一）首次渲染", "desc": "本文将会通过一个简单的例子，结合React源码（v 16.4.2）来说明 React 是如何工作的，并且帮助读者理解 ReactElement、Fiber 之间的关系，以及 Fiber 在各个流程的作用。看完这篇文章有助于帮助你更加容易地读懂 React 源码。初期计划有以下几…"}, {"id": "6844903587563175950", "title": "前端错误监控与收集探究", "desc": "写代码难免会碰到错误。因此，在项目上线后，我们还需要主动对项目的错误进行收集，不能等用户发现错误，再联系我们，我们再去处理。 本文章为前端进阶系列的一部分，更多内容可查看 https://github.com/hpoenixf/hpoenixf.github.io"}, {"id": "6844903925800255502", "title": "cron 表达式 & crontab 定时任务", "desc": "首先在了解 cron 表达式之前，先谈谈 crontab 定时任务；日常在开发或运维中，经常遇到一些周期性执行的任务或需求，比如说，每个一段时间执行一个脚本，每周一执行一个命令或操作。而 linux 已经给我们提供了一个便捷的方式-- crontab 定时任务；crontab …"}, {"id": "6999686897995874312", "title": "JavaScript 数组进行拼接的函数", "desc": "有时候，我们希望在 JavaScript 中将 2 个已经存在的数组串拼接成 1 个数组。 简单来说就是将数组进行合并。 这个时候，我们可以使用 JavaScript 的 concat 函数。 考察下"}, {"id": "6919496798415355918", "title": "加入wangEditor，我收获了什么？", "desc": "写在前面快到年尾了，相信小伙伴们都在心里问自己：2020都快要过完了，今年给自己定的目标好多没完成啊。记得年初的时候给自己定的目标是：2020年了，至少nodeapi得稍微会用一下把？如果没有脚手架，"}, {"id": "6982483284013875208", "title": "实现在图片上画很多个可拖拽的div（二） 完", "desc": "主要讲述了编写在图中多个可拖拽可收缩的框框的过程，主要介绍了实现这一个过程所需要的知识储备以及思考实践过程，这是第二部分，第一部分在我的第一篇文章中。。"}, {"id": "6998327882409836574", "title": "hoc实现表单组件的设计思路", "desc": "前言 通过模仿 rc-form 的实现思路，可以学习一下 hoc 的使用场景。 暴露 createForm() 函数 通过 createForm 函数，返回一个组件。该组件拓展了我们的一些方法。 实现"}, {"id": "6999802671821488159", "title": "JavaScript代码片段", "desc": "1.获取图书馆名称 2.获取文件后缀名 3. 复制内容到剪贴板 4. 数组去重 5. 保留小数点以后几位，默认2位 6. 对象转化为formdata 7. 简单的深拷贝 8. 生成随机字符串 原文地址"}, {"id": "6999595457047429157", "title": "字符串当作数组能用来干嘛？ 通过onclick事件调用函数的简易方式来咯", "desc": "第一件：字符串当作数组来使用有哪些注意事项？ 注意1：字符串不能像数组一样被设置或修改 注意2：字符串可以任意拼接（重新排序）成一个新的字符串。 第二件：通过事件调用函数的常用方式是？"}, {"id": "6916302029291782157", "title": "人人都能看懂的数据结构 | 二叉树", "desc": "一棵标准的二叉树就长上图那样。 二叉查找树是一颗比较特殊的二叉树，树左侧的节点必须必右侧节点小。 不清楚手机是否能看清，图片的文字，这里还是把里面的文字帖了一下。 2.1:首页，应该从根节点开始对比，现在根节点是11，而要插入的节点是7,7比11小，那么7就应该在父节点的左边，…"}, {"id": "6963970021764792356", "title": "var、let、const 的本质区别是什么", "desc": "### 引言 本文主要介绍 `var` 、 `let` 、 `const` 关键字的含义，并从 - 作用域规则 - 重复声明/重复赋值 - 变量提升（hoisted） - 暂时死区（TDZ） "}, {"id": "6854573210638221320", "title": "你这磨人的小妖精——选中文本并标注的实现过程", "desc": "执行getSelection()后，会得到一个selection对象，其中有一个getRangeAt方法可以获取range对象。range对象有几个属性： 基于这一套，服务端只需要存储的信息是：光标起点位置、光标终点位置、所选文字，前端这边完全可以实现所有的需求。下面开始从0到…"}, {"id": "6844903586950807560", "title": "入门babel--实现一个es6的class转换器", "desc": "babel是一个转码器，目前开发react、vue项目都要使用到它。它可以把es6+的语法转换为es5，也可以转换JSX等语法等，实际上他能通过自定义插件的方式完成任意转换。 我们在项目中都是通过配置插件和预设(多个插件的集合)来转换特定代码，例如env、stage-0等。那么…"}, {"id": "6844903838286102536", "title": "JS 中关于 base64 的一些事", "desc": "base64其实是一种编码转换方式, 将ASCII字符转换成普通文本, 是网络上最常见的用于传输8Bit字节代码的编码方式之一。 base64由字母a-z、A-Z、0-9以及+和/, 再加上作为垫字的=, 一共65字符组成一个基本字符集, 其他所有字符都可以根据一定规则, 转换…"}, {"id": "6863289198704033800", "title": "js延迟加载的六种方式", "desc": "JS延迟加载：也就是等页面加载完成之后再加载JavaScript文件。js的延迟加载有助与提高页面的加载速度。一般有以下几种方式：defer属性async属性动态创建DOM方式使用jquery的get"}, {"id": "6979506177251999780", "title": "vue+elementui后台管理系统的任务状态不会实时更新，需要用户手动刷新才能实现", "desc": "一些新建任务从创建到完成需要一个时间段，任务详情页和列表页就会任务状态不会实时更新，需要用户手动刷新才能实现。 针对这个问题，我考虑通过轮询来实现。"}, {"id": "6876645554416271368", "title": "js--精准判断上传文件类型", "desc": "一般来说，对于上传的文件，都要做类型过滤，指定哪些类型能上传，哪些不能上传。 最容易想到的，也是相对常用的，是直接使用文件的拓展名。 将上传文件转为二进制形式后，再获取其前四位头文件的十六进制编码，根据这个就可以精准判定上传文件类型。对于不符合上传格式要求的，直接在客户端做处理…"}, {"id": "6844904094398677000", "title": "纯前端JS实现图片合并与下载", "desc": "对于很多的营销活动，需要提供给用户一张可下载二维码，但是二维码要组合一些特定的业务信息，然后便于用户分享、传播，达到营销效果。这一类的图片下载有一个特点，二维码里蕴含了用户信息，所以是每个人的二维码是不一样的，而业务背景图都是一样的，而且用户下载的最终图片样式是可以确定的，这时…"}, {"id": "6844903780148838414", "title": "前端开发者应该明白的浏览器工作原理", "desc": "作为前端开发，我们平常跟浏览器打交道的时间也是最多的。在前端面试中，一个较为经典的问题：在浏览器地址中输入url地址，敲回车，发生了什么？浏览器究竟做了什么？相信很多人脑海里都会出现个大概的轮廓，可是一到细化具体的过程就答不上来。那么，作为前端开发者，应该从哪些方面延伸来回答这…"}, {"id": "6926373093380194318", "title": "Mac上本地编译Chrome浏览器踩坑笔记（2021.02最新）", "desc": "整个过程中99%以上的报错，根本原因都是这个。 deptool是下载和编译chromium项目的工具套件，编译v8等其他google的开源项目也同样适用。 Google的C++项目大多使用ninja这样一个跨平台的编译工具，在mac端ninja底层会调用苹果公司的clang编译…"}, {"id": "6844903548963012616", "title": "你不知道的前端算法之文字避让", "desc": "inMap 是一款基于 canvas 的大数据可视化库，专注于大数据方向点线面的可视化效果展示。目前支持散点、围栏、热力、网格、聚合等方式；致力于让大数据可视化变得简单易用。 要显示的文字空间不够时，就会造成文字重叠显示混乱，用户体验很不友好。 怎么解决这个问题呢？我们采用文字…"}, {"id": "6844903583280791560", "title": "ES6 的几个小技巧", "desc": "EcmaScript 2015 (即 ES6) 已经发布两年多了，它的很多新功能都可以被技巧性的使用。这篇文章把一些小技巧列出来，希望能对你有用。 1. 强制参数 ES6 提供了默认参数的概念，当函数的参数未传入或者传入值为 undefined 时，会应用参数的默认值。 2. …"}, {"id": "6986943122332712973", "title": "Promise.all和Promise.race的使用及利用Promise实现compose函数", "desc": "Promise.all的使用 方法接收的参数为promise的iterable类型并且返回一个promise 输入的所有promise的resolve回调的结果是一个数组 所有输入的promise"}, {"id": "6987578139056537637", "title": "防抖和截流", "desc": "函数防抖与节流是很相似的概念，但它们的应用场景不太一样。 防抖和节流都是为了解决短时间内大量触发某函数而导致的性能问题，比如触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。 二者"}, {"id": "6986668718247903269", "title": "upload组件自定义customRequest方法3.x.x版本踩坑记录", "desc": "为什么阅读upload组件的源码呢？有办法么？业务需要自定义，那为什么做这个分享呢？江流儿这几天一直收集相关的资料，发现关于自定义上传的资料，能让我看懂的实在是少的可怜，有办法嘛？"}, {"id": "6844903651819913230", "title": "通过示例来学习ES2016, 2017, 2018的新特性", "desc": "译者按： 本文系统地总结了所有的新特性，并用浅显的例子解释。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 一直保持对JavaScript新特性的关注是一件很难的事情，特别是还找不到几个有用的例子去理解它。 本文会辅以有用的例子来讲述TC3…"}, {"id": "6844903866073350151", "title": "[译] TypeScript 3.0: unknown 类型", "desc": "TypeScript 3.0 引入了新的unknown 类型，它是 any 类型对应的安全类型。 unknown 和 any 的主要区别是 unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。而在对 any 类型的值执行…"}, {"id": "6844904056180211725", "title": "H5定位终极解决方案", "desc": "到新公司的第二个项目，就是和小伙伴们一起做一个H5的商城，主要在微信内，但也要考虑到其他浏览器。其中，首页需要根据当前用户的经纬度找到距离最近的门店并展示。前端需要做的工作就是获取用户的经纬度然后查询后台接口并渲染页面。 我们的目标是经过封装之后，只需要调用一个方法就可以拿到返…"}, {"id": "6864114862159724558", "title": "图形学——平面中图形碰撞检测梳理", "desc": "以前做过两年多的canvas图形方向的程序员，但是已经很久没有使用过相关的知识忘记了不少，趁我还有印象特此做一下记录。 如果你有兴趣做个独立开发者，开发一些小游戏，只学习一些api和框架是没用的，图形类知识才是核心，未来我会不定期更新相关图形类内容。 在游戏领域中，我们经常会遇…"}, {"id": "7001004885965537288", "title": "js中树形结构数据的深度遍历和广度遍历", "desc": "深度优先遍历（Depth-First-Search）广度优先遍历（Breadth-First-Search）"}, {"id": "6844903665422041095", "title": "微信小程序实现商城案例（赋源码)", "desc": "1、如果对你有帮助别忘了给作者 star、fork、打赏 三连。"}, {"id": "6999089491478577188", "title": "ES2021 更新的内容！", "desc": "2021 年 6 月 22 日，发布了 ES2021 标准 。标准在每年的 6 月份正式发布一次，作为当年的正式版本。 任何人都可以向标准委员会提案。"}, {"id": "6844903933500981255", "title": "手写算法并记住它：冒泡排序", "desc": "本系列文章就尝试解决这个问题。 研读那些排序算法，细品它们的名字，其实都很贴切。 比如冒泡排序就很形象，遍历n次，每次循环相邻元素两两比较，把其中大的元素往后放。例如： 上图演示了冒泡过程的第一次循环。其中，最大的元素5就像气泡一样逐步上升到最后一位。 第一次遍历会把最大的元素…"}, {"id": "6854573210373980173", "title": "从一次故障聊聊前端 UI 自动化测试", "desc": "事件的起因在于老板最近的两次“故障”，一次去年的，一次最近。共同原因都是脚手架在发布平台发布打包时出错，导致线上应用白屏不可用。 最神奇的是，事后多次 Code Review，结果还是没有发现任何能够导致该问题的 bug，最后推测有可能是服务器在发布打包的时候出了问题。 当老板…"}, {"id": "6999079827567280158", "title": " js数组笔记", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 js数组笔记 1.js遍历数组，并向每一个对象元素添加新属性 2.js删除数组中某一项 splice() 3.js 随机生成四位验证码（包括"}, {"id": "6844904052396933134", "title": "CSS 和 JS 阻塞二三事", "desc": "上面的过程是由 GUI 渲染线程完成的。 浏览器内有多个进程，其中渲染进程被称为浏览器内核，负责页面渲染和执行 JS 脚本等。渲染进程负责浏览器的解析和渲染，内部有 JS 引擎线程、 GUI 渲染线程、事件循环管理线程、定时器线程、HTTP 线程。 JS 引擎线程负责执行 JS…"}, {"id": "6844903511868571656", "title": "两句话理解js中的this", "desc": "前言: 一直都搞不清javascript中this的指向,你不知道的javascript(上卷)这本书中有3章都是在讲解this,去年第一次看完还是觉得似懂非懂的,一深入的问还是不清楚,现在在看一遍,真心觉得这本书里讲的是真好,想深入了解一下的,这本书是一个不错的选择."}, {"id": "6963567075214884895", "title": "写React/Vue项目时，为什么要在列表组件写key", "desc": "通过分析diff算法、就地复用的vue源代码，探讨为什么在写vue项目时，需要在列表组件中写key。"}, {"id": "6990353081036701703", "title": "跨域及解决方案", "desc": "前言 在前后端交互中，经常会碰到请求跨域，那什么是跨域呢，以及如何解决跨域，本文将进行探讨分享。 什么是跨域 因为浏览器的同源策略，非同源的情况下即会产生跨域现象。会导致跨域的场景有 当 URL 的协"}, {"id": "6844904193619132423", "title": "DD每周前端七题详解-第四期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6844904100996333581", "title": "vue 中4个级别的作用域", "desc": "除了 JS 已有的功能外，Vue还具有自己独特的作用域级别。作用域控制可以使用哪些变量以及在何处使用。它控制它们对应用程序的不同部分的“可见性”。 了解 Vue 提供的作用域级别之间的差异会帮助我们编写更清晰的代码。 来看看这些作用域分别是什么。 Vue 应用程序中的全局作用域…"}, {"id": "6844903880174600205", "title": "ES6 Class中实现私有属性的几种方法", "desc": "子类不能继承父类的私有属性。 时间回到四年前，2015年6月，ES6发布成为标准，为了纪念这个历史性时刻，这个标准又被称为ES2015，至此，JavaScript中的class从备胎中转正。在这之前，class一直作为JS的关键字，雪藏不见天日。 class被认为是JS的一种语…"}, {"id": "6844903847513554952", "title": "解密 JavaScript 执行上下文", "desc": "首先我们先了解一下什么是执行上下文栈（Execution context stack）。 上面这张图来自于mdn，分别展示了栈、堆和队列，其中栈就是我们所说的执行上下文栈；堆是用于存储对象这种复杂类型，我们复制对象的地址引用就是这个堆内存的地址；队列就是异步队列，用于event…"}, {"id": "6844903993232080910", "title": "【Canvas真好玩】从黑客帝国开始", "desc": "笔者之前有一段时间一直在学习Canvas相关的技术知识点，通过参考网上的一些资料文章，学着利用简单的数学和物理知识点实现了一些比较有趣的动画效果，最近刚好翻看到以前的代码，所以这次将这些代码实践重新梳理一遍后整理成文，自己巩固复习的同时，可以和大家一起交流学习。作为【Canva…"}, {"id": "6926278818265038862", "title": "WeakMap and WeakSet （弱映射和弱集合）", "desc": "我们知道，JavaScript 垃圾回收机制中，JavaScript 引擎在值可访问时将其存储在内存中。但是当引用消失时，该值就会被回收。 但是如果把一个对象放进数组中，那么只要数组在，对象就存在，即使没有对该对象的引用。 如果我们使用对象作为常规 Map 的键，那么当 Map…"}, {"id": "7000918497425358861", "title": "ES6深度解析-Classes", "desc": "web前端JavaScript 存在的问题 假设我们想要创建最典型的面向对象设计的示例:Circle类。假设我们正在为一个简单的Canvas库编写一个Circle。除此之外，我们可能想知道如何做到以下"}, {"id": "6844903728764452878", "title": "骚年，Koa和Webpack了解一下？", "desc": "有必要声明下，很多人在没看完这篇文章之后，就评论一些和文章主题不相符的内容。 这篇文章主要讲述的是如何在本地开发环境下通过启动node服务器之后，无缝启动webpack，从而达到前后端配置一体化。 适合做node全栈项目、node中间层，配合前端项目、等等。 实现继承,采用的是…"}, {"id": "6844903687538606093", "title": "Next.js 踩坑入门系列（五）— 引入状态管理 redux", "desc": "上一讲有关路由的坑还是没填明白，原本params路由自认为已经没问题了，不过最近在测试的时候，发现进入系统的时候是没问题的，但是如果在params路由页面进行刷新，会404页面。所以，继续fix～ 写过react SPA的大家应该基本都用过redux，按照官方教程一顿复制粘贴基…"}, {"id": "7000764673024851976", "title": "【TypeScript】类", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 TypeScript——类 （1）概念 类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法 （2）"}, {"id": "6971776363162238984", "title": "JavaScript 简史", "desc": "为了面试中侃侃而谈、工作中挥“码”自如，了解 JavaScript 的本质、历史及局限性是非常有必要的。"}, {"id": "6844903694614396941", "title": "如何优雅地改善程序中for循环", "desc": "有点编程基础的童鞋，都可以很快想到上面的编写方法。那不知道大家是否会跟我一样对于写for循环时，功能是没毛病，但编写起来总会觉得很不优雅，例如还要定义对应的i变量（拿上述举例）以及还要自主控制i变量的变化，这样无疑会变得繁琐起来，也会让我们编写代码效率有所下降 到这里，ForE…"}, {"id": "6965893933792493604", "title": "【知识梳理】从Cookie的domain属性发现的", "desc": "前言   刚刚入职新公司，我阅读着团队维护的前端开发手册。在看到 Cookie 使用规范这一节时，其中谈到的 Domain 及使用场景让我产生了好奇。因为之前使用 cookie 基本上都是通过 js-"}, {"id": "6900135543242883086", "title": "理解节流 & 防抖", "desc": "节流 （throttle）与 防抖 （debounce）都是为了降低调用频率的一种方式。 节流是在不断的触发过程中，每隔100ms就执行一次。 在高频触发回调函数时，节流操作使回调函数在每隔一段时间定期执行一次，时间间隔内再触发，不会重新执行。 核心在于让一个函数不要执行的太频…"}, {"id": "6844903904719667208", "title": "【实践思考】动态切换项目资源的公共路径", "desc": "今年开始厚着脸皮写一些技术文章，大概平均两周能写出一篇。产量不高，一是因为平时上班还是挺忙的，二是不想为了写而写，如果自己都不觉得有意思的东西，是很难写下去的。 俗话说的好评论装逼末尾要加后缀，文章牛逼标题要加前缀，所以一直也想写个什么系列，可以给文章标题加个前缀。但是像什么闭…"}, {"id": "6995177218083127310", "title": "React基础知识(一)", "desc": "React：用于动态构建用户界面的 JavaScript 库(只关注于视图) 是一个将数据渲染为HTML视图的开源JavaScript库。"}, {"id": "6844903954845810702", "title": "递归优化：尾调用和Memoization", "desc": "在树的前序，中序，后序遍历算法中，递归的实现明显要比循环简单得多。 性能：如以上例子所示：假设传入的参数值特别大，那么这个调用栈将会非常之大，最终可能超出调用栈的缓存大小而崩溃导致程序执行失败。每一次函数调用会在内存栈中分配空间，而每个进程的栈的容量是有限的，当调用的层次太多时…"}, {"id": "6844903546161201159", "title": "前端面试之js相关问题（一）", "desc": "最近我也是经历过面试别人和去面试的人了，总结几个常被提及的面试问题，做一下解答和备忘。 call, apply, with指的This是谁就是谁。 上面的例子中，baz被bar调用所以指向的指bar. a 运行时所在的对象是 window,所以指向的是window。 函数调用都…"}, {"id": "6987229782874259493", "title": "前端基础-通讯", "desc": "1：什么是同源策略及限制 1-1：什么是同源？ 如果两个URL的协议、域名和端口号都相同，我们就称这两个URL同源。 1-2：什么是同源策略 浏览器默认两个相同的源之间是可以相互访问资源和操作DOM的"}, {"id": "7002123000216567844", "title": "聊聊CommonJS与ES6 Module的那些事", "desc": "随着前端工程越来越复杂，项目越来越大，现代前端开发时时刻刻都在和各种各样的模块打交道，在程序设计之初，便会根据功能不同将代码拆分成不同的片段，每一片段实现自己特定的使命，最后通过接口将分散的片段组合在"}, {"id": "7000168729673908255", "title": "只需六步，带你实现Promise原理", "desc": "秋招来临，笔者也开始复盘起知识点，而Promise的使用以及原理在面试中经常被问到，笔者复习完这部分知识后，仍觉得不够通透，故写出这篇文章来加深理解，也希望对读者有些许帮助。"}, {"id": "6990155513333809182", "title": "七月的盛夏🥤,  一同赴好文之约｜可视化分析掘金最精彩的作品✨", "desc": "掘金七月举办了好文征集令活动，在这段时间诞生了许多精彩绝伦的优秀文章，让我们用数据说话，可视化分析那些诞生于七月的精彩作品吧～"}, {"id": "6844903955441401870", "title": "🚆新手前端不要慌! 给你✊10根救命稻草🍃", "desc": "😃 感谢大家阅读, 最后推下自己的小工具, 作为工作了8,9年的老菜鸟插件用多了自己也造了几个小工具, 大家看看有没有需要的. 🔥 支持vscode版本, 查正则再也不用\"百度\"了. 😃 vscode中搜索\"any-rule\"进行安装. 👋一个手势库, 支持tap(点击…"}, {"id": "7004721440536821768", "title": "关于javascript中的类和实例 （说人话的解释通俗易懂）", "desc": "我们在上学读书的时候，大家都是一味的按照传统的教学方式学习，老师像在喂鸭子一样填鸭式教学，鸭子确实肥了，但是这样的鸭子却极为不健康。 中国的课本一个很大的问题就是，课本中的概念生硬晦涩难懂，说的都不是"}, {"id": "6913691919386312712", "title": "10个很棒的 JavaScript 字符串技巧", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 我们称一个字符序列为字符串。这几乎是所有编程语言中都有的基本类型之一。这里跟大家展示关于 JS 字符串的10个很棒的技巧，你可能还不知道哦？ JS 字符串允许简单…"}, {"id": "6999975946249830413", "title": "每天学习10个实用Javascript代码片段（五）", "desc": "每天学习10个实用Javascript代码片段，加深对 Javascript 语法的理解，积累代码优化经验，第五天终于来了"}, {"id": "6918920458465181710", "title": "带你看看JS的新趋势：「State of JS 2020」中文解读", "desc": "一些新兴的 JavaScript 库在开发者间有很高的满意度，但使用率偏低——这可能会让开发者难以选择合适的技术。下面这些数据可以帮我们选择合适的技术。 第一张图代表着这些库随时间变化的趋势。它有四个象限，纵向由下至上代表着使用率由低到高；横向由左至右代表着使用体验由坏到好。也…"}, {"id": "6844903496253177863", "title": "this、apply、call、bind", "desc": "这又是一个面试经典问题~/(ㄒoㄒ)/~~也是 ES5中众多坑中的一个，在 ES6 中可能会极大避免 this 产生的错误，但是为了一些老代码的维护，最好还是了解一下 this 的指向和 call、apply、bind 三者的区别。 在 ES5 中，其实 this 的指向，始终…"}, {"id": "6869573288478113799", "title": "Promise 你真的用明白了么？", "desc": "文章首发自笔者的 Github。 Promise 关于 API 这块大家应该都能熟练使用，但是和微任务相关的你可能还存在知识盲区。 在开始正文前，我们先把本文涉及到的一些内容提前定个基调。 Promise 中只有涉及到状态变更后才需要被执行的回调才算是微任务，比如说 then、…"}, {"id": "6975467069135552520", "title": "setTimeout(〒︿〒) 请原谅我一直以来对你的忽视", "desc": "纸上得来终觉浅，绝知此事要躬行。哪怕是平时一个不起眼的小知识，我们也需要以认真的态度去学习，否则，说不定什么时候就会踩到坑，伤害到彼此！"}, {"id": "6844903625769091079", "title": "BAT前端经典面试问题：史上最最最详细的手写Promise教程", "desc": "我们工作中免不了运用promise用来解决异步回调问题。平时用的很多库或者插件都运用了promise 例如axios、fetch等等。但是你知道promise是咋写出来的呢？ 别怕～这里有本promisesA+规范，便宜点10元卖给你了。 首先呢，promise肯定是一个类，我…"}, {"id": "7001075778637004813", "title": "老生常谈：Promise对象（1）", "desc": "Promise是啥玩意 Promise 是异步编程的一种解决方案，他的出现主要是解决异步事件回调地狱的问题。 何谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件，也就是一个异步操"}, {"id": "7001778406228492318", "title": "JSBridge通信原理简介", "desc": "背景 一直在做Hybrid App（混合模式移动应用）,就是传统意义上的App 内嵌H5开发, 目前已经开发一年多了, 突然有一天想着, 业务开发中总是调用客户端的能力, 比如说在App里面打开一个w"}, {"id": "6987647296905641992", "title": "💥💥 当面试官问你JavaScript中var let const 中的区别，你应该这样回答", "desc": "自从ES6的出现之后，在JavaScrip中定义变量的方法也新增了let 和 const 这两个重要的关键字，那么通过这两种关键字声明的变量有什么新特性呢？什么时候使用它们更合适呢？让我们来看看！"}, {"id": "6844904116603486221", "title": "Vue 进阶必学之高阶组件 HOC", "desc": "高阶组件这个概念在 React 中一度非常流行，但是在 Vue 的社区里讨论的不多，本篇文章就真正的带你来玩一个进阶的骚操作。 先和大家说好，本篇文章的核心是学会这样的思想，也就是 智能组件 和 木偶组件 的解耦合，没听过这个概念没关系，下面会详细说明。 这可以有很多方式，比如…"}, {"id": "7002096471419928613", "title": "JavaScript 函数柯里化", "desc": "🎯总结：利用闭包的特性，将参数分批次、一一对应的传入原函数中去，并在收集完所有参数后执行最终函数得到结果。"}, {"id": "7005757414226001951", "title": "前端面试每日 3+1 —— 第877天", "desc": "今天的知识点 (2021.09.09) —— 第877天 (我也要出题) [html] 使用html5写一个背景粒子特效 [css] CSS允许使用哪些不同的媒介类型？ [js] 写个方法找出数组中位"}, {"id": "6992140052776108069", "title": "🍉Promise常见问题总结(进阶必会)", "desc": "Promise常见问题总结 1、简单介绍一下Promise。 Promise是一种异步编程的解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。"}, {"id": "6939766434159394830", "title": "我打破了 React Hook 必须按顺序、不能在条件语句中调用的枷锁", "desc": "这个限制在开发中也确实会时常影响到我们的开发体验，比如函数组件中出现 if 语句提前 return 了，后面又出现 Hook 调用的话，React 官方推的 eslint 规则也会给出警告。 其实是个挺常见的用法，很多时候满足某个条件了我们就不希望组件继续渲染下去。但由于这个限…"}, {"id": "6991125705455042573", "title": "性能监控指标｜ 8月更文挑战", "desc": "性能是前端领域始终绕不开的话题，因为性能影响用户的使用体感如何、留存率等多个方面，是衡量一个产品的重要指标之一，重要性无需赘言，那么我们该如何量化衡量性能的好坏呢？ 衡量一个产品的性能有非常多的工具和"}, {"id": "6844903555879403533", "title": "转眼人到中年：前端老程序员无法忘怀的一次百度电话面试", "desc": "2010年9月22日，中秋，记得那天下着零星的小雨。大部分同学都已回了家，深秋的校园显得格外空旷寂寥。平时车来人往的校道，也只剩三三两两的行人低着头走着。 匆匆忙忙吃完早餐，一个人背着书包来到了教学楼，找了僻静的角落坐下。看看手机，8:45左右，离电话面试还有大概15分钟。心里…"}, {"id": "6844903558085607438", "title": "杭州17届前端期待加入一个更好的团队", "desc": "本来想等过完年回来再换工作的，但是前段时间有猎头在简书私信我，说看我的文章写得还行，问我想不想换工作。 然后我就更新了简历，发过去了，邀请我面试，但是这家公司在北京 /西安，后来就没去，但是故事就此开始了，这反而促使我走上了换工作的道路。 自己从大三暑假实习到现在工作半年多，接…"}, {"id": "6844904111737929741", "title": "[译] JSON.stringify() 的 5 个秘密特性", "desc": "作为一名 JavaScript 开发人员，JSON.stringify() 是用于调试的最常见函数。但是它的作用是什么呢，难道我们不能使用 console.log() 来做同样的事情吗？让我们试一试。 哦！console.log() 没有帮助我们打印出期望的结果。它输出 **[…"}, {"id": "6844904066418491406", "title": "分享一些前端常用功能集合", "desc": "我在做一些`H5`单页（活动页）的时候，像我这种最求极致加载速度，且不喜欢用第三方库的人，所以决定自己动手做一些`无依赖`、`精简高效`的东西，然后按需应用在实际项目中，同时为了比百度上搜到更好用的代"}, {"id": "6994393099023679519", "title": "前端开发范式 - 模块化开发", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 模块化开发 模块化开发是当下最重要的前端开发范式 模块化的演变过程 Stage1 -文件划分的方式 缺点：污染全局作用域、命名冲突关系、无法"}, {"id": "6990384549129617444", "title": "浅析JS(2): 深拷贝的实现", "desc": "如果在面试中让你实现一个深拷贝, 你能处理到何种程度? 各种数据类型的处理, 循环引用以及递归爆栈等问题能否解决?"}, {"id": "6844903624099758094", "title": "vue中前进刷新、后退缓存用户浏览数据和浏览位置的实践", "desc": "2.搜索结果页面==>点击进入详情页==>从详情页返回列表页时，要保存上次已经加载的数据和自动还原上次的浏览位置。 最近在项目中遇到这个问题，思考了几套方案，总是不太完善。百度搜到的方案也基本都只能满足一些很简单的需求。对于复杂一些的情况，还是有些不完善的地方。以下是个人对于这…"}, {"id": "6979150800488661000", "title": "js数组的reduce方法", "desc": "js数组的reduce方法 arr表示将要的原数组（你要操作的原数组）; prev表示上一次调用回调时的返回值，或者初始值init; cur表示当前正在处理的数组元素; index表示当前正在处理的数"}, {"id": "6990241492946124813", "title": "js实现Luhn算法（模10算法、校验银行卡）", "desc": "Luhn算法 Luhn算法（Luhn algorithm），也称为“模10”（Mod 10）算法，是一种简单的校验和算法，一般用于验证身份识别码，例如发卡行识别码、国际移动设备辨识码（IMEI），美国"}, {"id": "6844903516826255373", "title": "cookie、localStorage和sessionStorage 三者之间的区别以及存储、获取、删除等使用方式", "desc": "前端开发的时候，在网页刷新的时候，所有数据都会被清空，这时候就要用到本地存储的技术，前端本地存储的方式有三种，分别是cookie，localstorage和sessionStorage ，这是大家都知道的。本文的主要内容就是针对这三者的存放、获取，区别、应用场景。有需要的朋友可…"}, {"id": "6844903981311852557", "title": "数组去重12种方案（经典面试必问）", "desc": "- includes：方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。 方法十二：类似于方法一的set，用了剩余运算符..."}, {"id": "6998500793389154312", "title": "node学习篇之package.json文件介绍", "desc": "Node.js 是一个开源与跨平台的javaScript运行时环境。 Node.js 在浏览器外运行 V8 JavaScript 引擎。"}, {"id": "6844903618810757128", "title": "ES6中常用的10个新特性讲解", "desc": "如果const的是一个对象，对象所包含的值是可以被修改的。抽象一点儿说，就是对象所指向的地址没有变就行： 基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定； 箭头函数最直观的三个特点。 4. 函数的参数默认值 ES6 中支持 class 语法，不过，ES6的cl…"}, {"id": "6985053046720102436", "title": "🍉 11665字 | JavaScript基础大复习", "desc": "变量在内存中如何存储 / JavaScript 规定了几种数据类型 / 原始类型喝引用类型有什么区别 / 堆内存和栈内存的区别 / 对象的底层数据结构"}, {"id": "6844904199063339015", "title": "JavaScript执行上下文-执行栈", "desc": "突然觉得对于一名JavaScript开发者而言，需要知道JavaScript程序内部是如何运行的,那么对于此章节执行上下文和执行栈的理解很重要,对理解其他JavaScript概念(变量声明提示,作用域和闭包)都有帮助。 看了很多相关文章，写得很好，总结了ES3以及ES6对于执行…"}, {"id": "6844903728147857415", "title": "面试官问：能否模拟实现JS的call和apply方法", "desc": "其中模拟bind方法时是使用的call和apply修改this指向。但面试官可能问：能否不用call和apply来实现呢。意思也就是需要模拟实现call和apply的了。 在fun函数运行时指定的this值。需要注意的是，指定的this值并不一定是该函数执行时真正的this值，…"}, {"id": "6981339374373994526", "title": "函数防抖、函数节流的区别及其应用场景", "desc": "防抖: 一个频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效. 节流: 一个频繁触发的函数，在规定时间内，函数执行一次后，只有大于设定的执行周期后才会执行第二次。"}, {"id": "6975810285244284965", "title": "这是一段很有意思的代码", "desc": "当你看到这段代码时，你的心情是怎样的呢！ 这是几个同学给我的答复，嗯，就很好 作为菜鸟的我，在面试的时候..."}, {"id": "6950176539984003085", "title": "一波带走！从认识到手写call、bind、apply！", "desc": "前言this关键字想想就让人头痛，各种场合下它的指向不尽相同，而在js中，call、bind、apply这些函数原型方法又和this指向有密切关系。好吧，人已经麻了。不过这些js基础知识还是很重要的，"}, {"id": "6968269593206849572", "title": "最全 ECMAScript 攻略", "desc": "很多人都在说，「嘿！这是最新的 ES6 语法」,「那又是 es7 的新特性」。那 ES 到底是什么呢？ ES6/ES7/ES8/ES9 都有些什么东西呢?跟 Javascript 又有什么关系呢? 如"}, {"id": "6994784902277234718", "title": "从 async 和 await 函数返回值说原理", "desc": "昨天在文章《JavaScript中的 async 和 await》中简单的介绍了其使用方法。那么 async 和 await 如何工作，如何正确的使用 async 和 await 。"}, {"id": "6997008458646028318", "title": "力扣刷题👊【290. 单词规律】", "desc": "这是我参与8月更文挑战的第 16 天，活动详情查看：8月更文挑战 题目链接 290. 单词规律 题目描述 给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。 这里"}, {"id": "7000015340122046501", "title": "你真的知道『Promise的存在意义吗』？", "desc": "我们应该踏踏实实地把 Promise 是什么，它存在的意义是什么，它为什么这样设计。今天我们就来聊聊 Promise 的存在意义。搞明白之后，我们再去更深入的学习。"}, {"id": "6844904047699296263", "title": "编写一个axios这样的库", "desc": "这时候，直接终端里运行webpack-dev-server的话其实他会自动去找全局的模块，这样不好，所以。。。你懂的 这时候咱们就可以接着写数据请求了。。。。。吗？ 然后呢。。。还没忘，咱们还需要处理直接apply的情况，也就是直接Axios()这么调用的时候"}, {"id": "6844903854140735496", "title": "📝你本可以少写些 if-else", "desc": "我不喜欢业务代码中航天飞机式if/else语句, 它复杂而臃肿, 至少从美感而言, switch就比if/else优雅很多. 如果跨语言比较的话, 私以为ReasonML的模式匹配比起寻常的switch语句又要强上太多. JS中对复杂判断的不同写法, 带来的感觉是很不同的, 这…"}, {"id": "6993535970242986020", "title": "JS中闭包作用域和垃圾回收处理~", "desc": "这是我参与8月更文挑战的第5天 堆内存释放问题：如果当前的堆被占用了【地址被引用，则不能释放，如果不被引用，浏览器会在空闲的时候释放它】 GC：浏览器的垃圾【内存】回收机制     引用计数【被占用一"}, {"id": "6989861929598582821", "title": "【复盘plan(一)】我不管，我复盘的，大厂秋招必问！！！", "desc": "知识点复盘系列文章第一篇。我不管，我复盘的，我秋招必问！！！ 希望对你们也有帮助~~ 面试题：介绍下Set、Map、WeakSet、WeakMap的区别？"}, {"id": "7001852130403467294", "title": "你对Fetch了解多少？", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：             8月更文挑战 序言 很长一段时间， JavaScript 的网络请求，有一个总称术语 “AJAX”（Asynchronous "}, {"id": "6997340340675936270", "title": "JavaScript 中的作用域、预解析以及变量提升", "desc": "JavaScript 中的作用域、预解析以及变量提升 作用域：变量的作用范围 局部作用域：函数内部 1）函数在执行的时候会在内存中开辟新空间 2）当执行完毕函数之后，会关闭作用域空间(变量被销毁)"}, {"id": "6844904012790120462", "title": "Proxy 的巧用", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 使用Proxy，你可以将一只猫伪装成一只老虎。下面大约有6个例子，我希望它们能让你相信，Proxy 提供了强大的 Javascript 元编程。 尽管它不像其他ES6功能用的普遍，但Proxy有许多用途，包括运…"}, {"id": "6947878373091704846", "title": "【技术胖】Vue3.x从零开始学-第二季 组件篇", "desc": "在学习这个视频之前，你需要先学习《Vue3.x从零开始学-第一集-基础语法篇》。第二季（本教程）主要讲解Vue3中组件的一些知识，包括什么是全局组件、局部组件、组件如何复用、组件间的传值，单项数据流、Non-Props属性、父子组件的 通信、组件双向绑定、组件中使用插槽、还包括…"}, {"id": "6997981330868797471", "title": "JS基础篇：13、一文搞懂原型、原型链(搞不懂算我输)", "desc": "引言 初识原型 显式原型和隐式原型 prototype可称为显式原型： 划重点：prototype是Function独有的属性 注意是独有！！！ __proto__可称为隐式原型： 划重点：__pro"}, {"id": "6991828558096105485", "title": "嵌入的iframe又不能访问了？还有这些你不知道的事", "desc": "客户又反馈内嵌的第三方页面又不能正常访问啦！ 快来跟小姐姐一起学一学iframe相关的知识，一次搞定iframe吧。"}, {"id": "6969008816075735054", "title": "Python PK JS 原生实现一些功能", "desc": "近来，项目上，遇见了用Python编写的发布脚本，瞬间就被她迷人的眼神和身段迷上了。近来几天一直追随她，越发的喜爱。喜爱之余，拿她与我的前任对比对比。"}, {"id": "6844903613584654344", "title": "浅谈 instanceof 和 typeof 的实现原理", "desc": "typeof 一般被用于判断一个变量的类型，我们可以利用 typeof 来判断number, string, object, boolean, function, undefined, symbol 这七种类型，这种判断能帮助我们搞定一些问题，比如在判断不是 object 类型…"}, {"id": "7002064163610574862", "title": "前端刷题路-Day96：Z 字形变换（题号6）", "desc": "将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。 比如输入字符串为 \"PAYPALISHIRING\" 行数为 3 时，排列..."}, {"id": "6993837545461121038", "title": "前端代码经常见到的 Provider 是什么", "desc": "不知道你有没有在某处见过 xxProvider，Provider 并不是 23 种经典设计模式之一，但是却应用特别多，可以算是一种比较新的模式。 Angular2 中提供了创建对象的时候基于 Prov"}, {"id": "7005605655163699230", "title": "关于JavaScript模块", "desc": "1. 前沿 以前一直在 nodejs 中使用 require , 现在所有前端都需要使用模块，正好在学习 webpack 中看到了这一块,所以顺便学习一下 commonjs amdjs 2. comm"}, {"id": "6844903634002509832", "title": "面试精选之http缓存", "desc": "前端面试常问第二大问题是http缓存相关内容。说真的，http缓存相关的细节比较多，并且 http 常用协议版本有1.0、1.1，（本文暂不讨论http2.0）。 我们先罗列一下和缓存相关的请求响应头。 今天着重介绍一下浏览器缓存机制，我们知道，浏览器缓存一般都是针对静态资源，…"}, {"id": "7005054347268587550", "title": "🔥🔥🔥给npy的Redux秘籍", "desc": "前言 大家好我是给npy的前端秘籍，给大家宣布一件事情，以后小弟就要以尹框花名混迹前端江湖了，最近业务需求太多，没时间写文。还请见谅。"}, {"id": "7004824045128515591", "title": "”小却用“的优化——标签中的预请求", "desc": "合理的使用这些优化，可以让页面请求大大加快哦！ dns-prefetch 格式：< link rel = 'dns-prefetch' href = '//example.com'> 作用：使浏览器主"}, {"id": "6990533805786431524", "title": "与大厂面试官的高端博弈、顶级拉扯", "desc": "针对前端面试软性问题的套路与反套路 众所周知，程序员情商偏低，而这些软性问题，恰恰都具有一定欺骗性和吹牛皮成分在里边，对于演技不好的直男癌，简直就是天生克星。 其实不用太担心，软性问题往往就那几个，"}, {"id": "7002240375515512862", "title": "『面试的底气』—— 设计模式之桥接模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6995912475799453727", "title": "【前端 · 面试 】JavaScript 之你不一定会的基础题（二）", "desc": "event.target 指向触发事件流程的元素，且不会改变。this 指向的是当前所执行事件的注册元素。"}, {"id": "6982742095375597575", "title": "这16种原生函数和属性的区别，你真的知道吗？ 精心收集，高级前端必备知识，快快打包带走", "desc": "原生内置了很多API, 作用类似，却也有差千差万别，了解其区别，掌握基础，是修炼上层，成为前端高级工程师的必备知识，让我们一起来分类归纳，一起成长吧。"}, {"id": "7004694135781195789", "title": "javascript函数式编程基础", "desc": "一、引言 函数式编程的历史已经很悠久了，但是最近几年却频繁的出现在大众的视野，很多不支持函数式编程的语言也在积极加入闭包，匿名函数等非常典型的函数式编程特性。大量的前端框架也标榜自己使用了函数式编程的"}, {"id": "6994676180058128420", "title": "使用javascript写shell脚本(四) 打包部署脚本", "desc": "“这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战” 本文主要讲通过执行脚本，本地项目打包并部署到服务器的过程。 之前的文章： javascript写shell脚本一 基础操作 javas"}, {"id": "6996829718007775246", "title": "我的掘金前端周刊 第八周 8月9日-8月15日", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。欢迎关我的掘金前端周刊专栏"}, {"id": "6999497362255118366", "title": "让 Node.js 变“懒”的 COW 技术", "desc": "COW 不是奶牛，是 Copy-On-Write 的缩写，这是一种是复制但也不完全是复制的技术。 一般来说复制就是创建出完全相同的两份，两份是独立的： 但是，有的时候复制这件事没多大必要，完全可以复用"}, {"id": "6984939784133148685", "title": "手写 Vue2 系列 之 异步更新队列", "desc": "实现 Vue 的异步更新队列，让你彻底理解 Vue 的异步更新过程都发生了什么..........."}, {"id": "6983832852118896671", "title": "掘金的镇站之宝们：掘金八大分类百强文章可视化分析", "desc": "最近拉取了我掘金关注者信息制作了一个词云图纪念，后来突发奇想我可以用这些数据去做更多事情，比如分析一下：哪些标签以及分类更活跃，哪些文章更热门等等。当然也作为我的vue3实践～"}, {"id": "7003602798445068318", "title": "类从ES5到ES6发生了什么", "desc": "背景 我们都知道，在 es6 以前，我们定义类是依靠一种约定来进行——将函数名的首字母大写；而在 es6 中，则采用了与其他静态语言类似的关键字 class 来定义一个类，那么这个转变的背后隐藏着什么"}, {"id": "6844903682455109640", "title": "2万5千字大厂面经 | 掘金技术征文", "desc": "简历不是一份记流水账的东西，而是让用人方了解你的亮点的。 平时有在做一些修改简历的收费服务，也算看过蛮多简历了。很多简历都有如下特征 以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。除非你呆过大厂或者教育背景不错或者技术栈符合人家要求了，否则基本就是看运气约面试了。 …"}, {"id": "6995717142318415880", "title": "【玩转掘金】掘金签约作者，战力参数分析，数据篇", "desc": "掘金签约作者，我们一起来从 三个维度 总值维度 均值维度 Top单篇维度 来分析分析战力巅峰，各项战斗参数，以便大家更了解掘金签约者，以及大家知道自己与其的差距。"}, {"id": "7001179115214618654", "title": "为什么 NanoID 正在取代 UUID？", "desc": "UUID 是软件开发中最常用的通用标识符之一。然而，在过去的几年里，其他的竞品挑战了它的存在。 其中，NanoID 是 UUID 的主要竞争对手之一。 因此，在本文中，我们将展开讨论 NanoID 的"}, {"id": "6991657194282450951", "title": "【Web动画】科技感十足的暗黑字符雨动画", "desc": "本文将使用纯 CSS，带大家一步一步实现一个这样的科幻字符跳动背景动画。类似于这样的字符雨动画： 或者是类似于这样的： 运用在一些类似科技主题的背景之上，非常的添彩。 文字的竖排 首先第一步，就是需要"}, {"id": "6979989936137043999", "title": "👏  nodejs写bash脚本终极方案！", "desc": "前言 最近在学习bash脚本语法，但是如果对bash语法不是熟手的话，感觉非常容易出错，比如说：显示未定义的变量shell中变量没有定义，仍然是可以使用的，但是它的结果可能不是你所预期的。举个例子： "}, {"id": "7007328320425558024", "title": "create-react-app eject之后 修改antd主题样式", "desc": "当我们通过npm run eject暴露webpack的配置之后,config-overrides.js这个文件的自定义配置就已经失效了,这个时候,只能通过修改/config/webpack.conf"}, {"id": "6971743815434993671", "title": "Webpack5.0学习总结-基础篇", "desc": "前言 Vue项目开发一直使用的脚手架，对Webpack这个黑匣子知之甚少，碰到问题总是一头雾水，所以趁着Webpack5.0发布不久，较完整地学习了一遍。本篇文章总结一下学习成果。整体大纲如下： 认识"}, {"id": "6994069943763337223", "title": "js数组的详细使用总结 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 数组对象的作用 使用单独的变量名来存储一系列的值。数组是一种特殊的对象 数组的创建方式 1.字面量 var arr = [1,2,3,4];"}, {"id": "7000360098807676958", "title": "Vue响应式原理", "desc": "下面是从视频课程中学习的总结：https://www.bilibili.com/video/BV1Zy4y1K7SH?from=search&seid=5695969818903004717 一、Vu"}, {"id": "6995559493358583839", "title": "关于javascript冷门知识点的总结1", "desc": "typeof typeof对于定义了的变量但值为undefined的变量会输出undefined，而未定义的变量和定义后不赋值的变量都会输出。"}, {"id": "6844903539349651463", "title": "读懂源码：一步一步实现一个 Vue", "desc": "源码阅读：究竟怎样才算是读懂了？ 市面上有很多源码分析的文章，就我看到的而言，基本的套路就是梳理流程，讲一讲每个模块的功能，整篇文章有一大半都是直接挂源码。我不禁怀疑，作者真的看懂了吗？为什么我看完后还是什么都不懂呢？ 事实上一个经过无数次版本迭代的框架源码并不适合初学者直接阅…"}, {"id": "6964616735152406536", "title": "每日源码阅读 —— Lodash(slice.js)", "desc": "通过阅读源码回答为什么既有原生 slice 了，lodash 还要再实现一遍，lodash 是怎么保证 slice 函数输入不同类型的值都能不报错并且正确返回数组等问题。"}, {"id": "6844903669851242510", "title": "《从零构建前后分离的web项目》准备 - 前端了解过关了吗？ ", "desc": "有了这样的问题我们可以带着问题去重点选型一些这写问题技术方案比较成熟的技术栈。 当时之所以没有选择 backbone ，主要是因为没有成熟的中文文档，考虑到团队的流动性和上手性暂时没做考虑，最终选择了 司徒正美的 avalon 当时来说还是比较前卫的，也有一些以去哪网为首的大公…"}, {"id": "6998724891918729246", "title": "JavaScript中 this 指向问题", "desc": "本文整理了js的this的五种绑定规则以及常见js指向问题，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出"}, {"id": "6988708396866207758", "title": "LeetCode刷题，二叉树的后序遍历（145）", "desc": "思路：递归的本质就是使用栈来进行计算，所以我们手动创建一个栈，一直找到最底层的树节点，按照左右根的顺序进行入栈即可。"}, {"id": "6844904045845577742", "title": "一步一步手写一个自己前端脚手架cli工具", "desc": "1）#!/usr/bin/env node -> 我要用系统中的这个目录/user/bin/env的node环境来执行此文件，且需要注意必须放在文件开头。 1）package.json中bin：内部命令对应的可执行文件的路径。很多包都有一个或多个可执行的文件希望被放到PATH中…"}, {"id": "6992435256527683591", "title": "JS中超出安全整数范围精度丢失的问题｜8月更文挑战", "desc": "问题说明 今天测试妹子跑过来很得意的对我说，我发现了一个你的bug。 bug?，开玩笑，我写的代码怎么可能有bug，这是是绝对不可能的，就算有bug我也会偷偷的修改掉然后更新，在我这儿是不存在bug的"}, {"id": "6963142558604066829", "title": "什么是低代码", "desc": "前言 在日常的开发过程中，绝大多数的编程都是手写全部的代码，也就是大家常说的“纯代码”（Pro Code），要实现某一个功能，需要写全部的代码。有没有一种方法可以避免如 程序员门槛高、文档链路长、研发"}, {"id": "6844903617510506504", "title": "WWDC 中提到的浏览器 Fingerprinting 有多可怕？", "desc": "苹果在 WWDC 2018 发布 macOS Mojave 的时候，介绍了 Safari 现在具备了防御 fingerprinting 技术的能力。这个技术和指纹有什么关系，是用来做什么的，又有多值得普通用户担心呢？让我们从它的来龙去脉说起吧 :-) Fingerprintin…"}, {"id": "6998092459037163527", "title": "JavaScript链表刷题（二）", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 之前写了JavaScript链表刷题，有兴趣的童鞋可以冲，接下来继续刷两道链表题~~ 一、快乐树 202. 快乐数 编写一个算法来判断一个"}, {"id": "6844903877595119630", "title": "你不能不知道的Koa实现原理", "desc": "什么?这是一篇源码解读文章 ? 那一定很枯燥！不看。 1 . Koa 之 EventEmitter 2 . Koa 之 Http 模块 3 . Koa 之 Use 方法 4 . Koa 之 洋葱模型 5 . Koa 之 Context 对象 6 . Koa 之 源码精读 一 7…"}, {"id": "6874864387661692942", "title": "一文搞懂JS系列（一）之编译原理，作用域，作用域链，变量提升，暂时性死区", "desc": "这个阶段的主角就是所谓的编译器，这个编译器会找遍当前作用域，看看是不是已经存在一个叫 name 的变量。如果已经存在，那么就什么都不做，直接忽略 var name 这个声明，继续编译下去；如果没有，则在当前作用域里新增一个叫 name 的变量。然后，编译器会为引擎生成运行时所需…"}, {"id": "6987179505274060836", "title": "Object.is()比较两个值是否相等", "desc": "方法说明 Object.is() 方法用来判断两个值是否相等，它接收两个参数，分别是需要比较的两个值。 返回一个 Boolean 值标示这两个值是否相等。 我们在开发中，基本上都是使用 == 与 =="}, {"id": "6844903998986665998", "title": "实现一个无埋点sdk", "desc": "无埋点实际是全埋点，只要嵌入sdk，就可以自动收集数据。由于不再需要额外的埋点代码，所以也可以称为无埋点。 父页面(埋点管理页面)嵌入了一个iframe，指向了一个子页面(嵌入sdk的埋点页面)，sdk可以自动计算点击元素的唯一标识(XPath),以及元素大小、位置等相关信息，…"}, {"id": "6985458382643658759", "title": "js异步处理方案，以及promise的运作流程解析", "desc": "异步的概念 Javascript语言的执行环境是\"单线程\"，所谓\"单线程\"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。"}, {"id": "6965691756453036039", "title": "重学JavaScript基础知识，看着一篇就够了。持续更新中...", "desc": "超全js基础知识，查漏补全。记录工作遇到的实际问题。重学JavaScript基础知识，看着一篇就够了。持续更新中..."}, {"id": "6961350111431491620", "title": "原来这才是闭包", "desc": "闭包的用处还是很多的，俺就是在学习 React 的时候了解到 hook也用到了 JavaScript 的闭包机制，所以前来总结学习。"}, {"id": "6999789620233764894", "title": "生成器/执行器/async/await", "desc": "generator 带 * 的function可以中断函数执行 function* genDemo() { console.log(\" 开始执行第一段 \") yield 'generator 2' c"}, {"id": "6994060280766398477", "title": "keep-alive 中使用 show-overflow-tooltip 切换路由 tooltip 不消失的解决办法", "desc": "在 vue 中使用 keep-alive 的时候，和 elementui 的 show-overflow-tooltip 发生了冲突，如何在缓存页面手动关闭 tooltip 提示呢？"}, {"id": "6844903587055665159", "title": "程序员如何祝自己生日快乐", "desc": "本文教你如何用代码表达对自己的生日快乐之祝福或者对女孩的爱慕之情，具体如何应用大家可以发散思维，例如情人节给暗恋的女孩发一个 JS 文件过去表白，或者是清明节的时候用代码烧个香，祭奠死去的爱情之类的。 直接看效果吧。 要自己压缩出这样的代码其实很简单，使用 js2image 这…"}, {"id": "6995449053840408607", "title": "js事件循环机制event-loop", "desc": "事件循环机制由三部分组成：函数调用栈、微任务队列、消息队列 js：单线程，解释性语言 event-loop是js的执行机制 任务：同步任务：当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面"}, {"id": "6996572199930822693", "title": "【JS从入门到精通】19-JSON", "desc": "[TOC] JSON JS 中的对象只有 JS 自己认识，其他的语言都不认识 JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别，并且可以转换为任意语言中的对象，JSON在开发中主要用"}, {"id": "6844904110999732232", "title": "Javascript中的预编译", "desc": "预编译分为全局预编译和函数预编译：全局预编译发生在页面加载完成时执行，而函数预编译发生在函数执行的前一刻。 执行代码。 创建AO对象，执行期上下文（后面更新关于执行期上下文详解）。 寻找函数的形参和变量声明，将变量和形参名作为AO对象的属性名，值设定为undefined. 将形…"}, {"id": "6900547128821710855", "title": "潮流前端周刊（第12期）- 大理稻田", "desc": "美团对于处理移动端多业务场景下的 UI 不一致现象的解决方案，可结合之前周刊推荐两篇文章一起来阅读。 深度好文，介绍作者公司当前的无线前端架构设计及其演进之路，从当前前端方案、现状挑战、方案设计和选择这几部分来阐述。 与其说用 js 去写一个 js 解释器，哈哈不如说我们一起来…"}, {"id": "6991756796872392740", "title": "8月更文挑战 ｜ M1 安装react-native环境问题", "desc": "M1 安装Homebrew 问题： 由于苹果的安全机制，不允许直接进行脚本安装homnebrew,导致遇到端口443报错。 解决办法：直接浏览器打开，另存道本地，执行命令 即可解决。 如果遇到brew"}, {"id": "6844903640616943623", "title": "Google V8 引擎工作原理（翻译）", "desc": "Google V8 引擎是如何工作的？这是一个非常好的问题，这里有少许流出的官方文档来讲解，到底 V8 内部都做了什么。我会把我知道的东西分享给你(你需要自己猜，哪部分我给拿掉了)，还有很多有用的地址去帮助你明白这些内容。 一个非常简单并且非常快的编译器用于将 js 编译成简单…"}, {"id": "6944506173882105863", "title": "探寻public class fields", "desc": "相信很多同学在刚刚开始编写React的代码的时候, 都会在构造器中使用 bind 方法去绑定函数。可能刚刚开始大多人会以为这是在React中特有的操作, 其实不然, 这其实是跟JS函数的执行原理有关。随着时间的推移, 我们以前的写法已经不需要手动把函数去 bind this了,…"}, {"id": "6844903725543194631", "title": "f5到底刷新了点什么，你知道吗", "desc": "前面翻到了http缓存相关内容，关于强制缓存和协商缓存，他们之间的差别可能大家比较清楚。 相关文章多且全，这里不再赘述。 本文就会去探究下不同行为下的浏览器缓存表现。也就是f5到底刷新了哪些内容 Cache-Control、Expires、ETag、If-Match、If-No…"}, {"id": "6963142029693943838", "title": "JavaScript 中的构造函数", "desc": "前言 面向对象设计的编程语言都会有三个基本特征：封装^1、继承[^2]和多态[^3]，有了这三种特征的配合，才能将面向对象思想的优势尽可能的展现出来。 JavaScript 虽然是 OOP（Objec"}, {"id": "6869203659272486926", "title": "首屏加载慢优化(性能优化)", "desc": "阿里矢量图标库。它只是往 HTML 里插入字符和 CSS 样式而已，和图片请求比起来资源占用完全不在一个数量级，如果你的项目里有小图标，就是用矢量图吧。 背景：项目开发完成后，用webpack打包，编译后，app.js过大，导致页面初始化加载慢。 思路：引入elementUI框…"}, {"id": "6850037272964759566", "title": "数组多维转一维度（扁平化）的6种方法", "desc": "MDN释义：flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。 reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。 concat() 方法用于合并两个…"}, {"id": "6844903664709173261", "title": "Element源码分析系列7-Select(下拉选择框)", "desc": "可见最外层的<el-select>有一个v-model，这个是组件的v-model用法，具体参考官网，value初始为空，当选择了下拉菜单的某一项后，value变成那一项的值。<el-select>标签内是用v-for循环出所有的options,<el-option>也是Ele…"}, {"id": "6935679549300867102", "title": "Web 帧动画解决方案 - WebGL实现透明视频动画", "desc": "作为前端同学，或多或少都会接到动画需求。目前动画效果越来越酷炫，动画的绘制难度也逐渐增大。在上述两篇文章中都各自讲述了 APNG、Lottie 的原理、优缺点等，今天要讲的主题是 Video 实现动画"}, {"id": "6854573219966517262", "title": "项目实战之接口处理篇~一文搞定接口请求", "desc": "在项目开发中，接口请求是必不可少的，为了方便使用和维护，大家都会将接口请求的方法二次封装。下面小编将我项目中接口封装使用的方法分享给大家，希望可以帮到大家。喜欢的给个三连击再走哟。 目前前端常用的请求方式主要有两种：axios、Fetch。下面小编就这两种给大家详细的介绍介绍。…"}, {"id": "6950785975693869069", "title": "我们需要知道的 JS 异步编程", "desc": "思维导图一、定时器1. 设定定时器setTimeout([function], [interval])setInterval([function], [interval])2. 清除定时器如何清除定时"}, {"id": "6844903892883341320", "title": "移动端拉起手机数字键盘，只允许用户输入数字和小数点？", "desc": "大家在做移动端开发的时候，想必一定会遇到拉起系统自带的键盘吧。最近接到需求， 想要拉起数字的键盘，只允许用户输入数字和小数点，而且在用户失去焦点的同时，将输入框的内容进行千分位，聚焦的时候还可以删除。 看似几个需求，但还真不好整。针对此需求，笔者考虑了三种方案，建议选择第二种（…"}, {"id": "6844903731809501197", "title": "JavaScript骚操作之遍历、枚举与迭代（下篇）", "desc": "JavaScript 遍历、枚举与迭代的骚操作（上篇）总结了一些\b常用对象的遍历方法，大部分情况下是可以满足工作需求的。但下篇介绍的内容，在工作中95%的情况下是用不到的，仅限装逼。俗话说：装得逼多必翻车！若本文有翻车现场，请轻喷。 \u001d上一篇提到，for of循环是依靠对象的迭…"}, {"id": "6844903570043568142", "title": "html2image原理简述", "desc": "使用svg的一个特性，允许在<foreignobject>标签中包含任意的html内容。（主要是 XMLSerializer | MDN这个api将dom转为svg）"}, {"id": "6844903929671598087", "title": "新手学习 react 迷惑的点(一)", "desc": "网上各种言论说 React 上手比 Vue 难，可能难就难不能深刻理解 JSX，或者对 ES6 的一些特性理解得不够深刻，导致觉得有些点难以理解，然后说 React 比较难上手，还反人类啥的，所以我打算写两篇文章来讲新手学习 React 的时候容易迷惑的点写出来，如果你还以其他…"}, {"id": "6911964673331953671", "title": "前端从后端下载或导出文件的方法", "desc": "很多时候，前端存在需要从后端下载文件的情况，典型的就是导出excel表格。 1，请求接口之后，后端返回文件路径，前端直接下载。 2，请求接口之后，后端以文件流的形式返回给前端，前端再下载到本地。 responseURL这个地址其实和接口地址是一样，直接打开它，就能默认下载到本地…"}, {"id": "6979831276022792206", "title": "浅谈ES6的Proxy", "desc": "创建一个简单的Proxy 这个实例将\"proxy\"赋值给proxy.name属性时会在目标上创建name,代理只是简单的将操作转发给目标，他不会储存这个属性。相当于proxy.name和target."}, {"id": "6905752764391882765", "title": "潮流前端周刊（第14期）-  2020跨年", "desc": "封面图摄于 2020 年杭州 0 点跨年现场结束时的人山人海，打车 2 小时，当时想在家看 B 站跨年不香吗？不过现在回想却又是另外一番滋味。 原文标题叫做“How to Make Your Code Reviewer Fall in Love with You”，文章翻译可见…"}, {"id": "6844903507619741703", "title": "傻傻分不清的__proto__与prototype", "desc": "从__proto__和prototype这两个比较难分辨的属性入手理解继承和原型链。"}, {"id": "6999504011472666638", "title": "数据代理方法", "desc": "这是我参与8月更文挑战的第12天，活动详情查看： 8月更文挑战”https://juejin.cn/post/6987962113788493831 五种基于不同方式的get和set方法"}, {"id": "6994238892241059853", "title": "JS垃圾回收机制解析", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 在《Javascript高级程序设计》中有关于 JS垃圾回收机制的描述，整理之后输出如下内容： Javascript 具有自动垃圾收集机制，"}, {"id": "6844903714361180173", "title": "JavaScript之深拷贝和浅拷贝", "desc": "当真正对其操作时发现备份的也发生改变，此时你一脸懵逼，到时是为啥，不是已经备份了么，怎么备份的数组、对象也会发生变化。 如果你对拷贝原理理解的不透彻，此文或许能提供一点帮助。 在栈内存中变量保存的是一个指针，指向对应在堆内存中的地址。 此时数组a[0]值变成0，b数组依然保持不…"}, {"id": "6900375136025706509", "title": "JS全解（五）JS 函数的执行时机🦁", "desc": "JS函数在执行的时候，函数所处的位置不同，执行的结果就会各不相同。 下面我们通过几个例子来看一下，函数的执行时机对结果会产生怎样的影响。 悟空：不知道，因为你压根没有调用函数fn。 八戒：很显然，是1。 沙僧：因为fn在a=2后执行，故打印出2。 白龙马：对比一下例3我们可以知…"}, {"id": "7004381256464990244", "title": "动态规划算法", "desc": "动态规划 青蛙跳台阶问题： f(0)=1 , f(1)=1 , f(2)=2 ； 斐波那契数列问题： f(0)=0 , f(1)=1 , f(2)=1 。 打家劫舍问题 最大子序和 零钱兑换 三角形中"}, {"id": "6939339211300405261", "title": "潮流前端周刊（第24期）- 小酒吧听歌", "desc": "飞猪旅鹤老师关于飞猪 Flutter 的体系化建设的一个文字分享版本。 通过 Flutter 2，您可以使用相同的代码库为五种操作系统构建原生应用: iOS、Android、Windows、macOS 和 Linux；以及为 Chrome、Firefox、Safari 和 Ed…"}, {"id": "6844903591455490061", "title": "图片上传，预览以及图片删除", "desc": "现在就单独写一篇博客来记录下实现的整个过程，以及在做的过程中遇到的一些坑。"}, {"id": "6882549580559777800", "title": "js中合并多个对象的方法", "desc": "1.利用assign合并多个对象，第一个参数为目标对象，后面可以有多个源对象。 首先我们需要知道的是assign实行的是浅拷贝，也就是说如果源对象的某个属性值是对象，那么assign拷贝的是它的引用。 assign是将源对象的可枚举属性复制到目标对象，如果属性名相同后面的属性会…"}, {"id": "6844904069748752392", "title": "理解Javascript的异步", "desc": "总括: 本文梳理了异步代码和同步代码执行的区别，Javascript的事件循环，任务队列微任务队列等概念。 未曾失败的人恐怕也未曾成功过。 Javascript是单线程的编程语言，单线程就是说同一时间只能干一件事。放到编程语言上来说，就是说Javascript引擎(执行Java…"}, {"id": "6977748912719773732", "title": "JavaScript 节点关系", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 前言 在实际业务开发中，很多场景下，我们需要通过节点之间的关系进行DOM操作，尽管有时候我们使用的是被封装好的库，但是针对不同场景下的DOM操作"}, {"id": "6962906298262224903", "title": "智能优化技术：使用React进行懒加载（lazy loading）", "desc": "如果您曾经使用过中型到大型Web应用程序，那么您很有可能会注意到捆绑包的大小（发送到浏览器的JavaScript代码的数量）是一个不断增长的怪兽。使用所有添加的库或仅管理员功能，对于普通用户来说，您的"}, {"id": "6921663089507041293", "title": "H5支付踩坑记", "desc": "二、支付宝h5支付（支付宝h5支付有两种方式：1. 纯h5页面支付；2.h5调起支付宝app支付），以下为h5调起支付宝app支付的流程"}, {"id": "6844903777816821774", "title": "9102年如何写一个自己的markdown在线编辑器", "desc": "先贴出编辑器地址，涵盖了大多数markdown语法的快捷操作，实时编译实时预览，支持直接导出md 格式文件，支持微博图床。纯前端实现，不必担心数据被后台存储。未做移动端适配，建议pc食用。 欢迎各位有写作需求的大佬试用，提出宝贵意见。 市面上一些md编辑器 有的有实时预览，比如…"}, {"id": "6844904084592394253", "title": "前端必学必会-多媒体-本地存储-浏览器与服务器的交互-通信功能", "desc": "大家好呀~ 我是想出去玩的哪吒。 最近关于疫情的好消息越来越多，生活开始回归正轨，大家也逐步进入工作状态了。话不多说，进行学习了。 下面我们就来看一看，邀请掘友们的点赞留言。 多媒体，你想到了什么？我想到了video元素和audio元素。 学习元素的知识点，涉及属性，方法，事件…"}, {"id": "6987329197773422628", "title": "ES6新增语法(六)——Generator函数详解", "desc": "上篇文章《ES6新增语法(五)——Promise详解》我们介绍Promise，Promise一旦执行就无法暂停和取消，所以ES6引入了Generator函数，可以通过yield关键字，把函数的执行流程"}, {"id": "6844904061980901389", "title": "精读《精通 console.log》", "desc": "console 的功能主要在于控制台打印，它可以打印任何字符、对象、甚至 DOM 元素和系统信息，下面一一介绍。 log() 与 info() 都对应 info，warn() 对应 warnings，error() 对应 errors，而 debug() 对应 verbose，…"}, {"id": "6953836870388154381", "title": "浅谈 Virtual DOM", "desc": "前言 “Virtual Dom 的优势是什么？” 这是一个常见的面试问题，但是答案真的仅仅是简单粗暴的一句“直接操作dom和频繁操作dom的性能很差”就完事了吗？"}, {"id": "6844904084915355662", "title": "精读《如何做好 CodeReview》", "desc": "任何软件都是协同开发的，所以 CodeReview 非常重要，它可以帮助你减少代码质量问题，提高开发效率，提升稳定性，同时还能保证软件架构的稳定性，防止代码结构被恶意破坏导致难以维护。 所以 CodeReview 机制是否健全是一个工程团队能否长期健康发展的决定因素之一，这次我…"}, {"id": "6904468647037632520", "title": "iframe 跨域传递 cookie", "desc": "最近在处理 iframe 跨域通讯（也就是PostMessage的应用，有兴趣可以看一下我的文章），发现了个比较头疼的问题：在 iframe 环境中，无法跨域读取内嵌网页的 cookie ，得到的结果都是空值。 如果不解决，前面的努力就等于全白搭了。 于是乎我便开始了各种查文档…"}, {"id": "6844904050903744519", "title": "JS基础总结（1）——数据类型", "desc": "农历2019即将过去，趁着年前几天上班事情少，整理了一下javascript的基础知识，在此给大家做下分享，喜欢的大佬们可以给个小赞。本文在github也做了收录。 JavaScript 是弱类型语言，而且 JavaScript 声明变量的时候并没有预先确定的类型，变量的类型就…"}, {"id": "6844903682505441288", "title": "初识react(五) 数据流终极解决方案 dva(零配置)", "desc": "基于 redux、redux-saga 和 react-router 的轻量级前端框架。 当此类行为会改变数据的时候可以通过 dispatch 发起一个 action，如果是同步行为会直接通过 Reducers 改变 State ，如果是异步行为（副作用）会先触发 Effect…"}, {"id": "6844904041923739661", "title": "阅读《深入理解ES6》书籍，笔记整理（下）", "desc": "由于全部笔记有接近4W的字数，因此分开为上、下两部分，第二部分内容计划于明后两天更新。 通过以上一个在ES5中近似类的结构的特性，许多JavaScript类库都基于这个模式进行开发，而且ES6中的类也借鉴了类似的方法。 要声明一个类，需要使用class关键来声明，注意：类声明仅…"}, {"id": "6971316160952270862", "title": "从零开始学习3D可视化之坐标系", "desc": "1、 世界坐标系 2、 父物体坐标系 3、自身坐标系 要想控制一个3D可视化对象的空间位置，首先需要理解空间坐标系。在 ThingJS 开发平台中，使用右手坐标系，横轴为 X 轴和 Z 轴，竖轴为 Y"}, {"id": "6982821815764647943", "title": "Leetcode刷题： 回文数", "desc": "本篇主要讲述我刷的一道题： 回文数。内容有回文数的简介，我的解题思路以及我的答案，最后还有我的小总结。"}, {"id": "6981067302221381640", "title": "勇敢猿猿，不怕困难-----手写Promise（上）", "desc": "前言 Promis方面的知识点一直都是前端面试的重点和难点，手写Promise更是对前端工程师的一大挑战。今天来写并讲一下一个通俗易懂的版本。话不多说，勇敢猿猿，不怕困难！！！！ 先来点简单的 先写一"}, {"id": "6926444817950572552", "title": "【深入理解】前端内存管理", "desc": "js 使用垃圾回收机制自动管理内存，这种方式的利弊都很明显。 主要是IE8 以下的浏览器使用，现代浏览器都弃用了这种方式，这里只做简单介绍。 基本原理就是，记录跟踪每个值被引用的次数，被引用一次被引用次数就加一，被释放就减一，为零时，就释放改值所占内存。 主流浏览器使用垃圾回收…"}, {"id": "6844903588334927879", "title": "react-router了解一下", "desc": "react-router是做SPA(不是你想的SPA)时，控制不同的url渲染不同的组件的js库。用react-router可以方便开发，不需要手动维护url和组件的对应关系。开发时用react-router-dom，react-router-dom里面的组件是对react-r…"}, {"id": "6844903586019672071", "title": "node+koa2+mysql搭建博客后台", "desc": "本文将详细讲解使用node+koa2+mysql搭建博客后台的全过程。 创建项目文件夹server,进入文件夹后初始化项目npm init。 框架公用方法，包括参数校验、登录态校验等。config/index.js 以上配置完成后，便可以开始写设计路由了。 blog表 -> b…"}, {"id": "6964363972783030309", "title": "ES6 拾遗系列 一 ", "desc": "let 和 const 问什么要引入 let 和 const ？ 解决 var 声明变量带来的问题。 在 ES6 之前，声明变量只能通过 var ，使用var声明变量存在以下问题： 允许重复的变量声明"}, {"id": "6979000021232386084", "title": "原生js 之 (BOM操作)", "desc": "BOM(浏览器对象模型) Window对象对应着浏览器窗口本身，它的属性和方法通常被统称为BOM (浏览器对象模型) BOM 提供了独立于内容而与浏览器窗口进行交互的对象。 BOM主要用于管理窗口与窗"}, {"id": "6977273038811168798", "title": "非常好玩的掘金登录动画", "desc": "前言 准备 网页素材 检查网页可以发现，登录页上面的小人是SVG的图片，一共三张。我们需要把它下载下来。 再准备个背景图片 开整 第一步编辑样式 基础代码 三层样式 x 关闭窗口的鼠标事件 css j"}, {"id": "6987728255730057229", "title": "JavaScript深入之继承的多种方式和优缺点", "desc": "1. 原型链继承 问题： 引用类型的属性被所有实例共享，举个例子： 在创建Child实例时，不能向Parent传参 重点：让新实例的原型等于父类的实例。 2. 构造函数继承（经典继承） 优点： 避免了"}, {"id": "6966883776324452360", "title": "JS理论要点", "desc": "JS事件循环机制 js面向对象的理解 对象：万物皆对象 类：对对象的细分 实例：类中具体的事物 js为什么是单线程,而不是多线程 进程：是cpu分配资源的最小单位；（是能拥有资源和独立运行的最小单位）"}, {"id": "6905707252963868679", "title": "【前端工程化基础 - Babel 篇】如何用 Babel 为代码自动引入依赖", "desc": "2020年5月写的一篇文章，还没在掘金发过。 最近在尝试玩一玩已经被大家玩腻的 Babel，今天给大家分享如何用 Babel 为代码自动引入依赖，通过一个简单的例子入门 Babel 插件开发。 我们得首先通过 import axuebin from 'axuebin' 引入 a…"}, {"id": "6995428262155386887", "title": "js中的回调函数 | 面试必问", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 js中存在一种情景，就是异步操作，假如有事件a，事件b，事件c三个事件，执行顺序必须是a，b，c，那么我们就要在分别写三个函数来执行"}, {"id": "6982509039204712479", "title": "不用递归生成无限层级的树", "desc": "不用递归生成无限层级的树 偶然间，在技术群里聊到生成无限层级树的老话题，故此记录下，n年前一次生成无限层级树的解决方案"}, {"id": "7002432727332962341", "title": "理解 Javascript 中的函数式编程——完整指南「译文」", "desc": "最近在看函数式编程，发现这篇文章不错，非常接地气~ 就边看边翻译了~ 希望能给大家带来些许便利~~~"}, {"id": "6844904120499830792", "title": "2020年的12个Vue.js开发技巧和窍门", "desc": "我真的很喜欢使用Vue.js，每次使用框架时，我都会喜欢深入研究其功能和特性。通过这篇文章，我向你介绍了十个很酷的提示和技巧，你可能尚未意识到这些技巧和窍门，以帮助你成为更好的Vue开发人员。 随着Vue 2.6的推出，已经引入了插槽的简写方式，可用于事件（例如，@click …"}, {"id": "6930122959693152264", "title": "如何上手学习 Alpine.js", "desc": "Alpine.js 是由开发者 Caleb Porzio 开发的一款响应式前端框架。和过去人们所熟悉的 Vue.js、React、Angular 不同的是，Alpine.js 不需要你对于现有的应用进行高成本的改造，也没有 VDom 的概念，直接可以在现有的系统中加入并使用。 …"}, {"id": "6888676709105664013", "title": "如何实现后台管理系统的权限路由和权限菜单", "desc": "本文是继 前端如何一键生成多维度数据可视化分析报表 实战的最后一篇文章, 主要介绍如何实现后台管理系统的权限路由和权限菜单. 希望通过这3篇文章的复盘和实战, 可以让大家开发企业应用的时候更加游刃有余. 所以我们首要解决的问题就是面对未知层级菜单时的前端解决方案. 其次就是面对…"}, {"id": "6997403596400656421", "title": "JS ｜ 一起来康康 this 吧 🧐", "desc": "this 的五种绑定方式 默认绑定(非严格模式下指向全局对象, 严格模式下 this 会绑定到 undefined) 隐式绑定(当函数引用有上下文对象时, 如 obj.foo()的调用方式, foo "}, {"id": "7001510970375798791", "title": "你需要知道的JavaScript中的函数之-递归", "desc": "第27天，活动详情查看：8月更文挑战 前文我们学习了关于 JavaScript 中的 日期时间处理库 & Date 对象` 今天来学习 基于对象编程的JavaScript 函数 - 递归函数"}, {"id": "7004786916792991758", "title": "JS数据类型", "desc": "JS内置类型 JavaScript 的数据类型有下图所示 JavaScript一共有8种数据类型，其中有7种基本数据类型：Undefined、Null、Boolean、Number、String、Sy"}, {"id": "6844903906238021639", "title": "小蝌蚪系列：三年大厂面试官——二面题（偏难）", "desc": "在大厂工作了6年，当了3年的前端面试官，把大厂常问的面试题与答案汇总在我的Github中。希望对大家有所帮助。 大厂的一面面试题，大家基本上都能在google上刷到，见过就会，没见过就死。通过刷题，基本上能做出来85%以上。 但是到了二面，你会发现难度徒然上升，一道题内，涉及到…"}, {"id": "6999461719172972551", "title": "【面试必问】JavaScript的继承方式", "desc": "面向对象语言的三大特征为 继承、封装、多态，如何让 JavaScript 语言实现继承也是面试中的高频面试题。"}, {"id": "6991624345495797797", "title": "vue实现多接口轮询，并把json打包成json文件且压缩为zip包｜8月更文挑战", "desc": "实际需求 产品小哥哥需要把一堆json文件根据对应的API文件名打包成对应的名称的json包，然后装在一起并压缩成zip格式的压缩包，下载下来 先分解需求 先根据多个json文件的api，获取到对应的"}, {"id": "7002757942902521887", "title": "二分查找总结", "desc": "二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是要求线性表必须有序。 一、 查找过程 如果目标值等于中间元素，则找到目标值。 如果目标值较小，继续在左侧搜索。 如果"}, {"id": "6896713964848152589", "title": "移动端适配问题终极探讨(上)", "desc": "既然1个css像素代表两个物理像素，设备又不认0.5px的写法，那就画1px，然后再想尽各种办法将线宽减少一半。基于这种思考,我们有以下解决方案"}, {"id": "6981242757750718500", "title": "js数组sort()方法", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 定义与用法： sort() 方法用于对数组的元素进行排序，并返回数组。默认排序顺序是根据字符串UniCode码。 "}, {"id": "6981756262304186405", "title": "微前端qiankun沙箱源码解读", "desc": "接下来我们通过源 码详细分析下qiankun沙箱实现。 主要有`snapshotSandbox`快照沙箱，`legacySandbox`单实例代理沙箱，`proxySandbox`多实例代理沙箱"}, {"id": "6844903630714519559", "title": "两天撸一个天气应用微信小程序", "desc": "II、d0e51c8 版本之后为小程序云开发版本，若未开通云开发功能，为不影响小程序正常运行，可以将版本号回退到 git reset d0e51c8 --hard，或，将云开发相关代码注释掉。具体可查看这里。 这是一个完整的已经线上运行的天气应用小程序，点击可查看源码，可随意 …"}, {"id": "6955821415421444103", "title": "提高 DevTools 控制台调试的 12 种方法(译)", "desc": "还有一高级的用法还有很多人不知道，所以并未得到充分利用，更快，更容易和更有用的高级的用法，这些高级的用法可用于客户端脚本。"}, {"id": "6999976288177881124", "title": "【babylonjs】babylonjs实践（八）--造一个npc小车", "desc": "背景 前面讲了灯光、物体、材质，基本元素都讲了，这一节就当作业一样，打算是造一个立方体，涂上材质，让它动起来，作为我们无人车地图中的npc小车。 步骤 创建立方体 创建一个立方体，表示车。 这样子就只"}, {"id": "6844903583419203592", "title": "不可思议的纯CSS导航栏下划线跟随效果", "desc": "在继续阅读下文之前，你可以先缓一缓。尝试思考一下上面的效果或者动手尝试一下，不借助 JS ，能否巧妙的实现上述效果。 OK，继续。这个效果是我在业务开发的过程中遇到的一个类似的小问题。其实即便让我借助 Javascript ，我的第一反应也是，感觉很麻烦啊。所以我一直在想，有没…"}, {"id": "6993969817279528974", "title": "ES6新特性class类", "desc": "Es6新增的类其实就是基于原型机制的语法糖，类的语法可以让开发者更好的定义向后兼容的类，不仅可以继承内置类型，还可以继承自定义类型。"}, {"id": "7002160792346820622", "title": "你不知道的属性描述符", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：             8月更文挑战 序言 我们知道，对象可以存储属性。但是大多数时候，属性对我们来说只是一个简单的“键值”对。但对象属性实际上是更灵"}, {"id": "7003229967915941924", "title": "js实现倒计时效果", "desc": "最终要实现的效果是这样跳动的倒计时：最终要实现的效果是这样跳动的倒计时：最终要实现的效果是这样跳动的倒计时："}, {"id": "6999419506074320909", "title": "🔥 你能讲一下extends和寄生式组合继承原型之间的区别？", "desc": "在面向对象编程中讨论最多的就是继承，大部分的面向对象语言都支持两种继承，一种是接口继承，一种是实现继承。前者只继承方法签名（比如Java中继承接口的抽象类），后者继承实际的方法。在ECMAScript"}, {"id": "7004472324976017439", "title": "动态修改webpack中的publicPath", "desc": "需求背景 最近接到一个需求，比如项目本来的访问地址是 https://juejin.cn/pro/index.html, 现在要针对某个商户配置的访问地址是https://juejin.cn/pro/"}, {"id": "6968259661304692750", "title": "XDM，JS如何函数式编程？看这就够了！（一）", "desc": "盲猜一个：如果你有看过 《medium 五万赞好文-《我永远不懂 JS 闭包》》 《“类”设计模式和“原型”设计模式——“复制”和“委托”的差异》 这两篇文章，你一定会对 JS 的【函数】有更多兴趣！"}, {"id": "7002749861749588005", "title": "为了让初学者有项目可入门，我整理了这23个开源项目……", "desc": "很多初学者会时不时问我，经常看视频或书之类的教程，但久了没用就很容易的忘记，这个要怎么解？这个真是不好解，因为我也经常这样的，我大都建议多做项目来巩固记忆，但初学者对于比较复杂的项目很不好上手，所以今"}, {"id": "6904093200785342477", "title": "for循环还能这么写！", "desc": "最近在阅读《JavaScript设计模式与开发实践》收获颇多☺，其中有一个让我很感兴趣的写法来分享一下。 大多数是不是都会这么写。 看完了这几个语句的作用就可以明白为什么上面的循环可以正常操作了吧，val = arr[i++]是一个判断条件语句（同时起到了赋值和i++的作用），…"}, {"id": "7001438920966275103", "title": "js 什么是分时函数、惰性加载函数？带你一块了解下", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 前几天看到一本书叫做《javascript设计模式与开发实践》，翻了几篇发现写的非常不错，个人觉得挺对我的胃口。然后当我推荐给身边朋"}, {"id": "6844903632488366088", "title": "2018上半年掘金微信群日报优质文章合集：前端篇", "desc": "逐步学习什么是递归？通过使用场景来深入认识递归。 前端性能优化之路——图片篇。 今年的文章量比去年又多了好多，看来大家在掘金越来越活跃啦！可以Mark起来慢慢看～不过呢小饼还是建议大家到微信群里看每日小报，毕竟每天消化一两篇会更加有用，日积月累就会有很大的收益。反而积攒到一起的…"}, {"id": "6987565731881680903", "title": " 写了这么多年 CSS，initial 和 inherit 以及 unset 和 revert 还傻傻分不清楚？", "desc": "经常会碰到，问一个 CSS 属性，例如 position 有多少取值。 通常的回答是 static、relative、absolute 和 fixed 。当然，还有一个稍微生僻的 sticky 。其实"}, {"id": "6907269018588020743", "title": "实现前端开发几个常用技巧", "desc": "定时器轮询监听readyState的状态，如果是 complete 或者 interactive 说明文件加载完成。 移动设备相对来说页面较小，很多时候显示的一些信息都需要省略部分。最常见的是单行标题溢出省略，多行详情介绍溢出省略。现在都用框架开发了，这种建议需求建议形成一个基…"}, {"id": "6844903938894872589", "title": "「前端进阶」高性能渲染十万条数据(时间分片)", "desc": "在实际工作中，我们很少会遇到一次性需要向页面中插入大量数据的情况，但是为了丰富我们的知识体系，我们有必要了解并清楚当遇到大量数据时，如何才能在不卡主页面的情况下渲染数据，以及其中背后的原理。 我们对十万条记录进行循环操作，JS的运行时间为187ms，还是蛮快的，但是最终渲染完成…"}, {"id": "7005767184760700935", "title": "JSON.stringify 模拟实现", "desc": "JSON.stringify是我们开发过程中最常用的API之一，了解它的内部实现可以让我们更好的使用它。"}, {"id": "6972702293636415519", "title": "Why系列：如无必要, don't 使用delete", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 此文最初版本我发布在博客园 Why系列：谨慎使用delete, 经过整理和加工，再发布到掘金。"}, {"id": "7005869760013402142", "title": "图片滤镜", "desc": "需要通过三个控件控制展示的图片的样式，分别是间距、模糊度、底色。 在此基础上加上了用filter实现的其他效果和上传图片功能。"}, {"id": "6997237723534737422", "title": "TypeScript-函数详解", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6986890347313889293", "title": "Typescript 在实际开发的应用", "desc": "随着前端技术的发展，老的技术已经不能给大家带来满满的装b感了。 那么前端技术发展，其潮流就是开始拥抱TS。那么我们如何灵活在在项目中使用ts呢，本文就从实用角度来给大家说明一下，项目中该如何使用ts."}, {"id": "6988693462618996749", "title": "JS 解决超出精度数字问题", "desc": "一、js 最大安全数字是 Math.pow(2,53) - 1，超出这个数字相加会出现精度丢失问题，可通过将数字转换为字符串操作的思路处理，如下： 二、当涉及到带有小数部分相加时，对上面方法进行一次封"}, {"id": "6994686375383531551", "title": "从Babel的角度看ES6与ES5继承的区别", "desc": "对于自定义对象的继承，ES5、ES6都能很好解决，但对于内置对象，ES5不可能完全实现，ES6的extends才是终极解决方案。本文就从babel转译层面来看ES5继承与ES6的区别。"}, {"id": "6890555818505797640", "title": "H5 页面列表缓存方案 CacheHoc", "desc": "这个问题很简单，当然是页面即将销毁的时候存，也就是 componentWillUnmount 生命周期内进行存操作。 如果是数据持久化可存到 url 或 localStorage 中，其中 url 可以先 pass 掉，因为在复杂列表的情况下，需要存的数据比较多，全部放到 ur…"}, {"id": "6844904005785616397", "title": "深入js基础：从内存机制、解析机制到执行机制（长文预警）", "desc": "最近有些懒, 加上公司项目较多, 没有来得及更。这次选题比较纠结, 本来想继续围绕webpack, 但无奈在私下和一些同学聊天时, 无意中发现大部分同学对Js运行机制和内存机制并不是很了解。在做了一些分享后, 于是决心梳理下Js的底层基础和原理， 所以有了这篇文章, 主要面向初…"}, {"id": "6844903669389852685", "title": "微信小程序架构原理", "desc": "从开发者工具挖掘微信小程序的架构，小程序为什么这么快？小程序是否采用了 React Native 和 Weex 这样的技术，小程序的架构有什么样的优缺点？"}, {"id": "6850418111363940365", "title": "JavaScript 混淆与逆向必读之 AST 节点类型名词基础", "desc": "我在《Python3 反爬虫原理与绕过实战》一书中给出了“爬虫与反爬虫都是综合技术的应用”、“技术在对抗中进步”这样的观点。随着时间的推移、技术的普及和进步，Web 应用方给爬虫增加了越来越多的限制，其中效果最显著的就是代码混淆。 单纯的加密算法或者自定义的字符处理函数已经无法…"}, {"id": "6844903873983807502", "title": "【JS必知必会】高阶函数详解与实战", "desc": "作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数据库，祝您成为优秀的高级 Node.js 工程师。【程序员成长指北】作者，Github 博客开源项目 https://github.com/koala-codi…"}, {"id": "6966766628780376072", "title": "阶段三 Web APIs -day 1", "desc": "1. DOM 简介 1.1 什么是 DOM 文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML 或者XML）的标准编程接口。 "}, {"id": "6974269853100310536", "title": "网页性能优化", "desc": "重新渲染，就需要重新生成布局和重新绘制。前者叫做重排（reflow），后者叫做重绘（repaint）。重绘不一定需要重排，比如改变某个元素的颜色，就只会触发重绘， 因为布局没有变化"}, {"id": "6963093191515963406", "title": "umi+qiankun+gitsubmodel 完成项目微前端重构", "desc": "记录一次微前端开发移动端项目的过程。从零到一，怎么管理公共资源，怎么传递数据，包括最后上线的nginx配置都有。主应用，子应用全都是用umi全家桶"}, {"id": "6992017888638926885", "title": "JavaScript中 var、let、const 特性及区别详解｜8月更文挑战", "desc": "1. ES5 中 var 声明变量的弊端 ES5 中其实给我们提供了两种声明变量的方法：var 命令和 function 命令。 使用 function 命令声明函数这里不参与讨论，我们主要对比 va"}, {"id": "6913447567896346632", "title": "封装一个uploader组件（纯Javascript版本）", "desc": "后端使用 node.js 完成上传接口。 VSCode 中使用 live-server 插件，live-server是可以运行前端静态文件的一个服务器。可以实时更新我们修改的 html 文件。 使用 Promise 对 xhr 请求进行了封装：在 onload 事件中对返回码不…"}, {"id": "6844903651035578376", "title": "实现基于React的全局提示组件Toast", "desc": "Toast 不需要同页面一起被渲染，而是根据需要被随时调用。 Toast 是一个轻量级的提示组件，它的提示不会打断用户操作，并且会在提示的一段时间后自动关闭。 Toast 需要提供几种不同的消息类型以适应不同的使用场景。 Toast 的方法必须足够简洁，以避免不必要的代码冗余。…"}, {"id": "6962887737422643237", "title": "[十减四景病] 六个我用来装逼的 JavaScript 奇技淫巧", "desc": "为什么要看？ 整天写着一样的东西咱也不爽啊……整天见到旁边一群人写着一样的东西咱也不鹤立鸡群啊……所以，我们得整点活，跟你的同事同学们装个逼。"}, {"id": "6975810371554656287", "title": "JavaScript一文搞懂解构赋值", "desc": "这是我参与更文挑战的第6天，活动详情查看更文挑战 如果你是一名前端程序员那么对ES6肯定是非常熟悉的啦,在工作中我们常常会使用到ES6的解构赋值的语法,给我们的编码带来带来了极大的方便,那么对于还不清"}, {"id": "6987704637486792717", "title": "javaScript中的this指向", "desc": "this是JavaScript语言的一个关键字 它是函数运行时，在函数体内部自动生成的一个对象，只能在函数体内部使用。 根据函数的不同使用场合，this有不同的值 总的来说，this就是函数运行时存在"}, {"id": "6844903912663678990", "title": "可靠React组件设计的7个准则之纯组件", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我对文章进行了分割，本篇文章重点阐述 纯组件和几乎纯组件 。因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 在…"}, {"id": "6844903575500521480", "title": "mpvue中配置vuex并持久化到本地Storage", "desc": "# 配置vuex和在vue中相同，只是mpvue有一个坑，就是不能直接在new Vue的时候传入store。 2. 在main.js中引入你的store, 并绑定到Vue构造函数的原型上，这样在每个.vue的组件都可以通过this.$store访问store对象。 3. ok，…"}, {"id": "6844903649970241549", "title": "今天的考核题目: 你知道React和Vue的区别吗? skr，skr", "desc": "博主面了几家公司，看简历上写着使用Vue.js框架，就会问，你能说一说 vue 和 react的区别吗 ？react 听过，没用过，所以就只能尴尬的说不怎么了解react。这不，最近刚学了react (不断爬坑中)，同时看了些博客文章，当一回搬运工，如有错误，请指出 ～ Rea…"}, {"id": "6844903792744497160", "title": "为什么说ES6的class是语法糖?", "desc": "0. 前言 1. 基于Prototype的OOP 这是我们使用原型的一个很简单的例子，Person具有名字和性别，Man是一个性别为男的Person，Jy是一个Man。我们先记住这一个例子，下面将使用class重写这个例子。 2. ES6 Class的OOP 我们通过重写这个例…"}, {"id": "6865137028938825742", "title": "vue使用腾讯地图选点组件问题总结", "desc": "在 vue 中使用的是原来的哈希路由模式。即路径上会带上 #。这时候回调地址就不能识别了，就需要用到 escape 做了 url 处理，发现就可以跳转过去了。那第一步就成功了。解决了第一个问题：选择地址的回调路径不兼容哈希路由 问题 2. 需要省市区的名称 这是在地图上随便定的…"}, {"id": "6844903854660665358", "title": "[译] 从原型图到成品：步步深入 CSS 布局", "desc": "对很多人来说，创建布局是前端开发领域中最难啃的骨头之一。 你肯定经历过耗费数个小时，换着花样地尝试所有可能起作用的 CSS 属性、一遍遍地从 Stack Overflow 上复制粘贴代码，寄希望于误打误撞地赌中那个能实现预期效果的魔幻组合。 如果你的惯用策略就是按部就班地组合布…"}, {"id": "6993205669092556808", "title": "使用Page Visibility API来提高页面性能和用户体验", "desc": "Page Visibility API，不管移动端还是桌面，所有情况下，都能监听到页面的可见性发生变化。使用它可以增强用户体验，当用户不在当前页面时，可以停止音视频播放，网络请求，动画加载等，节约资源"}, {"id": "6844903648309297166", "title": "可能是最好的正则表达式的教程笔记了吧...", "desc": "笔记是由油管的@The Coding Train老师发布系列教程。 因为正则我自己看了很多次，但是很快又忘记。所以为了彻底搞懂，一边学习一边记笔记，以给别人讲课的方式记笔记，我自己的印象会更深，所以就有了以下内容。 1.1. 基本语法 1.1.1. single char 注意…"}, {"id": "6996779500260294669", "title": "一文梳理JavaScript中常见的七大继承方案", "desc": "📖序言 在前端的面试中，继承是一道很常考的题目，面试官总会变着法来问你。比如说，你知道哪几种继承方式？这几种继承方式有什么区别？这几种继承方式的优缺点是啥？又各有什么特点呢？"}, {"id": "6872398266642726926", "title": "项目实战-埋点系统初探", "desc": "前端开发攻城狮开开心心的 coding，非常自豪的进行了业务、UI 分离开发，各种设计模式、算法优化轮番上阵，代码写的 Perfect（劳资代码天下第一），没有 BUG，程序完美，兼容性 No.1，代码能打能抗质量高。下班轻松打卡，回家看娃。 实际上，开发环境与生产环境并不能等…"}, {"id": "6844903860327186445", "title": "前端大文件上传", "desc": "最近遇见一个需要上传百兆大文件的需求，调研了七牛和腾讯云的切片分段上传功能，因此在此整理前端大文件上传相关功能的实现。 在某些业务中，大文件上传是一个比较重要的交互场景，如上传入库比较大的Excel表格数据、上传影音文件等。如果文件体积比较大，或者网络条件不好时，上传的时间会比…"}, {"id": "6995185869997441038", "title": "『面试的底气』—— 设计模式之代理模式(一)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6904287239078215693", "title": "前端上手M1芯片Mac测评（基础篇）", "desc": "反应灵敏，键盘舒适。相对于老款的13寸蝴蝶键盘提升很大，同事摸了下键盘就下单了。（它的是蝴蝶键盘，但是我的不是） 日常使用、开发软件基本兼容，除了极个别的使用起来不如x86的体验好（例如easyconnect，就时好时不好的）. 如果你的Mac还能用，不是特别差的，不建议你更换…"}, {"id": "6913003799141416973", "title": "2020年国内前端团队都做了些什么?", "desc": "2020年是国内互联网公司发展最迅速的时代, 前有技术公司华为独立开发了操作系统和国内芯片产业, 后有疫情时代兴起的在线教育和直播产业, 无疑对前端团队带来了巨大的挑战和机遇. 笔者将结合一线互联网公司实际做的事情来对2020年技术做一次梳理, 希望对大家有所帮助. 1. 跨平…"}, {"id": "7002604317144252453", "title": "谈谈JS函数的柯里化", "desc": "柯里化原本是数学中函数的一种形式，后面扩展到计算机科学中，是把接受多个参数的函数转变为接受单一参数的函数，并且会返回一个函数，这些函数的参数接受剩余的参数。"}, {"id": "6984658863735701517", "title": "js 和 css 的阻塞问题分析", "desc": "现代浏览器为了更好的用户体验，渲染引擎将尝试尽快在屏幕上显示的内容。它不会等到所有DOM解析完成后才布局渲染树。而是当js阻塞发生时，会将已经构建好的DOM元素渲染到屏幕上，减少白屏的时间。"}, {"id": "6844903684967825421", "title": "Nginx与前端开发", "desc": "作为前端开发，即使没用过Nginx，但一定听说过上面这句话。这句经典的话，基本构成了所有人对Nginx的第一印象。 Nginx发布于2004年，经过初期几年的沉淀之后，迅速蹿升为“网红”，成为了当年互联网技术圈最火的词汇和技术。然而经过多年的发展，到现在，当年的网红早已“过气”…"}, {"id": "6983868984009424910", "title": "尤大亲自评测 Vue3 和 Svelte(19个组件后Vue更好!)", "desc": "近日尤大亲自创建了一个仓库用来对 Svelte 和 Vue3 组件进行了评测。这其实对我来说非常的感兴趣，因为我最近在业务项目中采用了 Svelte 进行了开发。"}, {"id": "6996981385214820382", "title": "BOM核心——window对象之Golbal", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 Global作用域 window被赋予了Es的Global对象，所以通过var声明的所有的全局变量都会变成window对象的方法和属性。 "}, {"id": "6997348549750964232", "title": "DOM核心——Document类型", "desc": "DOM全称是(Document Obejct Model),它是文档对象模型，DOM表示由多层节点构成的文档，通过它开发者可以添加，删除和修改页面。DOM是一种跨平台，语言无关的表示和操作网页方式。"}, {"id": "7002808879142666276", "title": "文本自适应容器改变字体大小", "desc": "对于单行文本，想要自适应容器改变字体大小比较简单，通过容器width和文本字数即可计算出字体大小，本文主要讲述多行文本自适应容器的方法（同样适用于单行的情况），多了一个维度，会稍微复杂一点"}, {"id": "7005078103567368199", "title": "Javascript执行(一)", "desc": "Promise Promise 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用"}, {"id": "6995549070039187493", "title": "自适应图片预加载介绍", "desc": "自适应图片的预加载为我们提供了新的性能优化思路，它是自适应图片和资源预加载的一个补充，可以使得图片资源在适应不同设备的同时，更快地被显示。"}, {"id": "6988853407960268807", "title": "潮流前端周刊（第36期）- 蜜桃的薄饼", "desc": "封面图周末在蜜桃吃的帕玛火腿披萨薄底，超级超级好吃，这个西餐厅环境也很不错，，性价比高，推荐去试试。 前端技术 Notion 编辑器原理分析 https://juejin.cn/post/697578"}, {"id": "6993326716164767752", "title": "『面试的底气』—— 设计模式之接口隔离原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6844904110337032200", "title": "为什么说for...of是JS中的一颗宝石", "desc": "是什么使得一个编程语言的新特性很棒？那就是当这个特性可以结合多个其它特性的时候。 ES2015 版本中引入的 for...of 语句就是这种情况。 for...of 可以迭代数组、类数组以及任何可以迭代的对象(maps、sets、DOM集合)，并且，for...of 的语句还很…"}, {"id": "6844903701379809294", "title": "H5拍照上传填坑汇总", "desc": "最近工作一直在使用vue+vux做移动端项目，有一个拍照上传照片的需求，发现vux里并没有实现，调研过非官方的vux-uploader后，感觉还不是很理想。 其实网上已经可以找到很多已经实现的成熟方案，但是在调研这个需求的时候，我发现在各种实现方案中也有一些puzzle的知识点…"}, {"id": "6999118646140370957", "title": "从underscore库中学习debounce", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 上文防抖简介中简单介绍了一下防抖的使用场景以及一个简单点实现的例子, 支持一般的需求，它存在一些使用方面的限制，譬如 执行函数的this "}, {"id": "6983226345471868959", "title": "JavaScript 常见排序算法总结", "desc": "说实话，我在一年前学得还不错。因为那会非全考研，考得就是数据结构与算法，很多经典数据结构与算法都娴熟于心。"}, {"id": "6844903668651819016", "title": "JavaScript中高阶函数的魅力", "desc": "AOP(面向切面编程)的主要作用就是把一些和核心业务逻辑模块无关的功能抽取出来，然后再通过“动态织入”的方式掺到业务模块种。这些功能一般包括日志统计,安全控制,异常处理等。AOP是Java Spring架构的核心。下面我们就来探索一下再Javascript种如何实现AOP 在J…"}, {"id": "7000271624800829453", "title": "canvas与屏幕坐标的互相转换", "desc": "ctx.getTransform()可以获取当前canvas上下文的被应用的转换矩阵，返回DOMMatrix对象。 DOMMatrix.invertSelf()可以获取当前矩阵逆转后的结果"}, {"id": "6999535241471721485", "title": "JavaScript 系列 -- 事件流模型及阻止事件冒泡", "desc": "原文地址： JS事件流模型 事件冒泡及阻止 JS事件流模型 事件捕获 是一种从外到内的传播方式，以click事件为例，其会从最外层根节向内传播到达点击的节点，为从最外层节点逐渐向内传播直到目标节点的方"}, {"id": "6992020836634853412", "title": "This指向｜ 8月更文挑战", "desc": "在JS的世界中，this指向无论工作中还是面试过程中都是一道非常重要的问题，this因其灵活的指向和复杂的使用场景变得千变万化，那么今天我们就来一起看看this this指向谁 初学this的时候，为"}, {"id": "6998542696331608077", "title": "JavaScript知识点回顾（二十一）——this（六）", "desc": "这是我参与8月更文挑战的第二十一天，活动详情查看：8月更文挑战 间接引用 另一个需要注意的是，在编码过程中很有可能传呼机一个函数的“间接引用”，在这种情况下，调用这个函数会应用默认绑定规则。"}, {"id": "6990215416903647263", "title": "HTML中 js刷新页面的几种方法", "desc": "HTML中 js刷新页面的几种方法 reload()、replace()、通过js代码自动刷新等、、"}, {"id": "7001439721557606431", "title": "XMLHttpRequest 如何发送 JSON/FormData/URLSearchParams 参数", "desc": "XMLHttpRequest 如何发送 JSON/FormData/URLSearchParams 参数"}, {"id": "6844903870712283149", "title": "经常被面试官问道的JavaScript数据类型知识你真的懂吗？", "desc": "之前面试了几个开发者，他们确实做过不少项目，能力也是不错的，但是发现js基础不扎实, 于是决定写一下这篇javascrip数据类型相关的基础文章，其实也不仅仅是因为面试了他们，之前自己在面试的时候，也曾经被虐过，面试官说过的最深刻的一句话我到现在都记得。 作者简介：koala，…"}, {"id": "7004758425661866020", "title": "javaScript之防抖与节流", "desc": "防抖与节流，在前端开发中会遇到一些频繁的事件触发，例如input，keyup，keydown，scroll，resize，mousemove等，这非常影响性能，所以我们需要控制它们触发频率"}, {"id": "6844904083204079630", "title": "setTimeout和requestAnimationFrame", "desc": "答案：输出 2 , 1。 JavaScript语言的一大特点就是单线程，也就是说，同一时间只能做一件事，前面的任务没做完，后面的任务只能等着。 这主要与JavaScript用途有关。它的主要用途是与用户互动，以及操作DOM。如果JavaScript是多线程的，会带来很多复杂的问…"}, {"id": "7000241665969487885", "title": "手写实现jsonStringify", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战” 代码逻辑实现 我们先利用 typeof 把基础数据类型和引用数据类型分开，分开之后再根据不同情况来分别处理不同的情况，按照这个逻辑代码实"}, {"id": "6914415391619940360", "title": "你必须理解的 JavaScript 知识 —— 引用类型", "desc": "引用值（对象）是某个特定引用类型的实例。新对象通过 new 操作符后跟一个构造函数来创建。构造函数就是用来创建新对象的函数，比如： 这行代码创建了引用类型 Date 的实例 date，Date 就是构造函数。ECMAScript 提供了很多像 Date 这样的原生引用类型。 D…"}, {"id": "6989249468398829582", "title": "基于四叉树2D碰撞检测以及D3简单分析", "desc": "前言 《数据结构-使用JS实现四叉树》 上文中简单介绍了四叉树的一些实现和应用场景 本篇文章应评论区各位小伙伴的留言 基于四叉树实现一下2D的碰撞检测,以及对于D3部分简单分析。"}, {"id": "7002031102390976525", "title": "JS模块化浅谈【CommonJS、AMD、CMD、UMD、ESM】", "desc": "模块化伴随着前端的发展，从无到有，从“伪”到“真”，再到后来的有成熟体系和规范并且适用于浏览器环境下的模块化。让我们来看看模块化到底经历了什么。 什么是模块化？为什么需要模块化？ 在最初的前端，js "}, {"id": "7004752427798757390", "title": "JavaScript数组排序", "desc": "JavaScript数组排序,前端数组排序，对象排序，顺序排序，降序排序，随机排序，比值函数，查找最值，反转数组"}, {"id": "7004827504896638990", "title": "Javascript基础之 数据类型（number，string）", "desc": "javascript基础 数据类型（一） 原始类型的方法 数字类型的常用方法 字符串的常用方法"}, {"id": "6997768361924886536", "title": "数据类型之面试官（0101） |  重学JS", "desc": "前言 在线音乐戳我呀！ 音乐博客源码上线啦！ 最近工作之余想干点什么，不能永远踏步，要向前冲，说点现实的，公司明天不要你，你可以后天就找到下一家，那么底气自然是技术硬。 浑浑噩噩在前端领域磕磕碰碰了两"}, {"id": "6844903864559206414", "title": "详解Vue计算属性和侦听属性", "desc": "一些初学者可能对计算属性和侦听属性的使用场景感到困惑不解，本文主要介绍两者的用法、使用场景及其两者的区别。 计算属性是自动监听依赖值的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。它有以下几个特点： 数据可以进行逻辑处理，减少模板中计…"}, {"id": "6930877602840182791", "title": "手写一个webpack，看看AST怎么用｜牛气冲天新年征文", "desc": "本文开始我会围绕webpack和babel写一系列的工程化文章，这两个工具我虽然天天用，但是对他们的原理理解的其实不是很深入，写这些文章的过程其实也是我深入学习的过程。由于webpack和babel的体系太大，知识点众多，不可能一篇文章囊括所有知识点，目前我的计划是从简单入手，…"}, {"id": "6844904099624779790", "title": "如何实现一个React水印组件", "desc": "前阵子通过 前端水印生成方案(网页水印+图片水印) 这篇文章学习了一下水印的生成方案，对其中使用 Canvas 实现网页水印的方案十分感兴趣，于是对相关代码加以修改，实现了一个 React 水印组件并发布到 👉 npm。 该组件是通过 Canvas 生成水印，并使用 Muta…"}, {"id": "6844903671969349645", "title": "用微前端的方式搭建类单页应用", "desc": "微前端由ThoughtWorks 2016年提出，将后端微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。 美团已经是一家拥有几万人规模的大型互联网公司，提升整体效率至关重要，这需要很多内部和外部的管理系统来支撑。由于这些系统之…"}, {"id": "6844903758401372174", "title": "其实我们可以少写点if else和switch", "desc": "作为搬砖在第一线的底层工人，业务场景从来是没有做不到只有想不到的复杂。 不过他强任他强，if-else全搞定，搬就完了。但是随着业务迭代或者项目交接，自己在看自己或者别人的if代码的时候，心情就不再表述了，各自深有体会。所以我们一起看看if还能怎么写 假设有这么个场景,不同情况…"}, {"id": "6950892426424746021", "title": "我国首个 JS 语言提案在 ECMA 进入 Stage 3", "desc": "ECMA/T39 是什么？ECMA 是一个负责信息技术和通信系统的国际标准组织，全称欧洲标准化信息和通信系统协会。其中 ECMA/TC39 是技术委员会第 39 号技术委员会，主要负责 JavaScr"}, {"id": "6990184607853314084", "title": "HTML、CSS和JavaScript，是如何变成页面的？", "desc": "HTML、CSS和JavaScript，是如何变成页面的？ 通常，我们编写好 HTML、CSS、JavaScript 等文件，经过浏览器就会显示出漂亮的页面（如下图所示），但是你知道它们是如何转化成页"}, {"id": "6844903616231260174", "title": "ES6 系列之箭头函数", "desc": "我们先来回顾下箭头函数的基本语法。 本篇我们重点比较一下箭头函数与普通函数。 箭头函数没有 this，所以需要通过查找作用域链来确定 this 的值。 这就意味着如果箭头函数被非箭头函数包含，this 绑定的就是最近一层非箭头函数的 this。 我们的需求是点击一个按钮，改变该…"}, {"id": "6844904198060900359", "title": "向强大的SVG迈进", "desc": "SVG 的应用十分广泛，得益于 SVG 强大的各种特性。 利用 URL.createObjectURL(svg) 取出 URL。 由于微信编辑器不允许嵌入 <style><script><a> 标签，利用SVG SMIL 可进行微信公众号极具创意的图文排版设计，包括动画与交互。…"}, {"id": "6986262022866337800", "title": "JS中数组去重的几种方式", "desc": "1、利用 ES6 新特性，Set结构去重，返回的是 Set 结构类型数据，再利用【扩展运算符】或者【Array.from()】方法转换为真正的数组结构 2、利用数组的 indexOf() 方法，检索元"}, {"id": "6988145965379600398", "title": "数据结构-使用JS实现四叉树", "desc": "四叉树 概述 特点 可分解成为各自的区块 。 每个区块都有节点容量。当节点达到最大容量时，节点分裂。 树状数据结构依靠造四元树法加以区分。 四叉树复杂度 时间复杂度 Access Search Ins"}, {"id": "6997957378909929503", "title": "ES6 总结（02）：解构", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 一、数组的解构 1. 完全解构 以前为变量赋值，只能直接指定 ES6 以后可以这样写,从数组中提取值，按照对应位置，对变量赋值 这种属于“模"}, {"id": "6989537410363162655", "title": "js拖拽div放置目标元素，弹出弹窗(兼容移动端)", "desc": "js拖拽div放置目标元素，弹出弹窗(兼容移动端) 本文章写的是vue项目使用js原生方法实现拖拽，若使用html5新特性draggable无法兼容移动端。"}, {"id": "7000588386918465549", "title": "js 字符串 String", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 字符串 String 对象描述 字符串是 JavaScript 的一种基本的数据类型。 String 对象的 length 属性声明了该字"}, {"id": "6965332723296632845", "title": "JavaScript——浅谈“this”", "desc": "this指向谁？真传一句话，假传万卷书。谁用它，他就指谁！this已经是我们的老生常谈了，也是大家在初学阶段的一个拦路虎，下面我们来聊一聊this吧"}, {"id": "6844904046717829133", "title": "前端面试基础篇，凛冬将至！道友快来一起闭关修炼！", "desc": "1. JavaScript有⼏种类型的值 引⽤数据类型存储在堆( heap )中的对象,占据空间⼤、⼤⼩不固定,如果存储在栈中，将会 影响程序运⾏的性能；引⽤数据类型在栈中存储了指针，该指针指向堆中该实体的起始地 址。当解释器寻找引⽤值时，会⾸先检索其 在栈中的地址，取得地址后…"}, {"id": "6983538042527023140", "title": "看完此篇对 event loop(事件循环)不再由困惑", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」大家都知道 javascript 是单线程，非阻塞的语言。单线程、非阻塞、异步这些都是 javascript 的标签"}, {"id": "6844904024295079943", "title": "Promise的秘密（Promise原理解析以及实现）", "desc": "本篇文章将会带大家从分解promise入手，一步步实现一个promise。但阅读之前需要比较熟练地了解了解用法，结合用法看文章可能更容易理解。 先看一下简单的用法。 负责改变promise实例的状态和它的值，then函数中的回调在状态改变后执行。 注意：不是then函数在状态改…"}, {"id": "6844903680387317768", "title": "干货分享：vue2.0做移动端开发用到的相关插件和经验总结(2)", "desc": "最近一直在做移动端微信公众号项目的开发，也是我首次用vue来开发移动端项目，前期积累的移动端开发经验较少。经过这个项目的锻炼，加深了对vue相关知识点的理解和运用，同时，在项目中所涉及到的微信api(微信分享，微信支付)，百度地图api(如何实例化地图，给地图添加自定义覆盖物，…"}, {"id": "6966045473899544607", "title": "重学 ES6 之 Class 基础", "desc": "传统方法是通过构造函数，生成实例对象。 ES6 的 Class 只是一个语法糖，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法。 用法跟构造函数的用法完全一致。"}, {"id": "6975769086500274213", "title": "聊聊防抖吧", "desc": "好不好奇，为什么只有防抖？好基友节流为什么不写？是我不会吗？ NoNoNo，当然不是，肯定是因为我想水字，啊不是，是写的比较细，所以分开来慢慢写"}, {"id": "6870754457379373069", "title": "优选    |    疯狂拉扯  javascript  中的原型链", "desc": "哈喽，大家好！我是前端Up主。一个有代码洁癖的前端攻城狮( 哈哈，生活很邋遢(*￣︶￣) ) 可以看出Object原本就是一个函数，通过new Object()之后实例化后，创建对象。 理清楚了这几个概念，有助于理解我们下面要讲述的原型和原型链。 用function声明的都是函…"}, {"id": "6997231376458055693", "title": "ES6中的async+await(通俗易懂版）", "desc": "“这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战” 1:async如何使用和它的背后原理？ ** **"}, {"id": "6995887171768958989", "title": "重温ES6系列之“函数的扩展-函数参数的默认值、与解构赋值默认值结合使用”", "desc": "1. 函数参数的默认值 在ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y"}, {"id": "6884821462189146119", "title": "antd popover定位不准闪跳解决+自己实现popover库", "desc": "我在写H5-dooring时，发现我们用的popover会发生闪跳，而且第一次闪跳就算了，每次还会有另一个方向的闪跳。 于是我大概百度了下，基本都说需要给固定宽高即可，让后试了下发现没用，就算触发组件和弹窗元素都给了宽高，也一样闪跳。由于antd的popover底层的实现是套其…"}, {"id": "6844903569330716685", "title": "写了个移动端可滑动（惯性滑动&回弹）Vue导航栏组件 ly-tab", "desc": "前段时间写了一个移动端的自适应滑动Vue导航栏组件，觉得有一定实用性，大家可能会用得到（当然有些大佬自己写得更好的话就没必要啦），于是前两天整理了一下，目前已经发布到npm和GitHub上了，点我到npm，点我到GitHub项目，有需要的同学可以在项目中npm install …"}, {"id": "6997040481867661343", "title": "详细理解深浅拷贝存在的意义！！！", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 theme: channing-cyan 一、天降异象 说到深浅拷贝前，先来看两个现象，关于基本类型和引用类型的=号运算，看看有什么奇怪的"}, {"id": "6972456359044317192", "title": "ES6之let和var的区别", "desc": "JS变量提升Hoisting ES6(ES2105)新增了两个重要的关键字：let和const。 let声明的变量只在let命令所在的代码块内有效。 const声明一个只读的常量，一旦声明，常量的值就"}, {"id": "6844903808405880845", "title": "DIY一个前端监控平台（上）", "desc": "你只有竭尽全力之后，才有资格说运气不好。 我认为，流量分析平台 + 日志采集平台 + 异常信息采集 + ajax信息采集 + 性能指标 = 监控平台。 之前我写过两篇文章《前端性能优化交流》与《前端代码质量优化交流》。也可以看得出来，我是对比项目开发的流程来编写文章的。监控平台…"}, {"id": "7000938609436000269", "title": "知其然，知其所以然，前端系列之javascript(二)", "desc": "整理这份js知识体系的起因是受神三元灵魂之问系列的启发 虽然每天都在写代码，自己写的到底是什么，很多概念听着好像很熟悉，但是又说不上来。为了弄清楚这些困惑在自己心中的问题，所以开始了这份知识体系的建设"}, {"id": "6844904050912133133", "title": "带你彻底搞懂Vue3的Proxy响应式原理！基于函数劫持实现Map和Set的响应式", "desc": "带你彻底搞懂Vue3的响应式原理！TypeScript从零实现基于Proxy的响应式库。中 我们详细的讲解了普通对象和数组实现响应式的原理，但是Proxy可以做的远不止于此，对于es6中新增的Map、Set、WeakMap、WeakSet也一样可以实现响应式的支持。 但是对于这…"}, {"id": "6951694270151524359", "title": "「JavaScript进阶」一文吃透内存机制", "desc": "内存管理的不好，会导致程序卡顿等性能体验问题。本文从内存的数据结构、内存空间管理、内存回收算法、内存泄露场景对内存机制进行一个全方面的介绍。"}, {"id": "6966045012463353863", "title": "《javascript高级程序设计》学习笔记 | 8.3.继承", "desc": "继承 面向对象语言支持 2 种继承方式：接口继承和实现继承 JS 函数没有签名（不必提前声明变量的类型），只支持实现继承，依靠原型链 相关代码 → 原型链 子类型构造函数的原型，被重写为超类型构造函数"}, {"id": "6844903921413013518", "title": "JS 在获取当前月的最后一天遇到的坑", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 为了更好的讲这节的内容，提示一个 JS 处理日期的小技巧，想获取上个月最后一天，只需要设置SetDate参数为0即可。 咱们可以看到，我们把 1月31号往后拨一个月在往前减一天，理应得到的是 1月31号，实际得…"}, {"id": "6939061526154182686", "title": "[译]ECMAScript 2021: 最终功能集确定｜技术点评", "desc": "更新于 2021-03-09: 今天，ES2021 候选提案 发布了其最终功能集的版本。如果它能够在今年 6 月的 ECMA 大会上通过，就会成为官方的标准。本文描述了有哪些新的内容。 注意，自从 TC39 进程制定以来，ECMAScript 版本的重要性就降低了很多。现在真正…"}, {"id": "6886992599006380045", "title": "浏览器与Node环境下的Event Loop", "desc": "当时的我是一脸懵逼的，因为从来都没有听过这个专业名词。不过面试官还是很友好的，他说没关系，那你来做一道题，看看下面这段代码的执行结果是什么？ 先给出一个知识点，在JS中有些代码是异步执行的，所谓异步，就是不会阻塞代码的运行，而会另外开启一个空间去执行这段异步代码，其余同步的代码…"}, {"id": "6991768446849515556", "title": "JavaScript 基础（三）", "desc": "​JavaScript 基础（三）-函数 函数就是功能，封装一些语句放在函数内部，函数就具有了某一特定的功能 函数基础 1. 函数的声明和调用 函数声明：定义函数"}, {"id": "6960934784512032798", "title": "我终于搞懂了Javascript事件循环机制😀", "desc": "一天 我在敲着代码 突然经理说加个需求让UI和后端给我扔了原型图和接口 等我码完了去看原型图 这时候又加了需求又有原型图和接口 我以上的执行顺序应该是怎么样的呢..."}, {"id": "6910962438376521742", "title": "大前端备战2021年，使用vite构建React !", "desc": "Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用,支持热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打包"}, {"id": "6908948190834196494", "title": "比较两个数组的差异？我是这么写的", "desc": "为什么这里选择用数组来作为返回值呢，其实想象一下就能明白，上面我们要求要用表格的形式展现出来，用数组可以方便渲染数据，同时数组的每一项都是一组变更，数组的长度就是变更的组数，这个我们后面会慢慢体现。 为什么要这么写呢，len这个变量存储的是变更了多少组数据,同时拿loopArr…"}, {"id": "6844903940731977735", "title": "浏览器的一些“滚动”行为鉴赏", "desc": "1. scrollingElement 2. 滚动到底部 3. 判断浏览器已滚动到底部"}, {"id": "6981086026055811079", "title": "新手入门第一课：3招搞定文章", "desc": "第一节课会带大家掌握标题的正确写法，学习markdown基本语法，并且选对文章分类和标签，快和我一起来学习吧"}, {"id": "6986863342568620040", "title": "参考 Codepen，我做了一个基于 iframe 的代码预览系统", "desc": "一直觉得 Codepen 的在线代码预览系统很神奇，能够所见即所得地实时展示代码的运行效果。参考 Codepen 并经过一番调研之后，我开发了一个具有基本的在线运行代码能力的 demo 出来。"}, {"id": "6997958480241885191", "title": "浅谈React Native之实战篇", "desc": "这是我参与 8 月更文挑战的第 19 天，活动详情查看： 8月更文挑战 前言 我们都知道，通过React Native可以实现编写一套代码，直接多端运行。本篇文章将以实战为主，内容主要包括基础应用、实"}, {"id": "6975155829469249549", "title": "前端 JavaScript 之『节流』的简单代码实现", "desc": "以固定的低频率执行代码逻辑，具体到我们上面的额需求来说，只要打开页面，不管你有没有输入，都会每隔几秒就执行一次保存数据的逻辑。"}, {"id": "6844903638389915661", "title": "Vue源码阅读前必须知道javascript的基础内容", "desc": "vue目前是前端使用频率较高的一套前端mvvm框架之一，提供了数据的响应式、watch、computed等极为方便的功能及api，那么，vue到底是如何实现这些功能的呢？在探究vue源码之前，必须了解以下几点javascript的基本内容，通过了解这些内容，你可以更加轻松的阅读…"}, {"id": "6989815456416661534", "title": "终极compose函数封装方案！", "desc": "前言 无意中在掘金看到一篇写compose函数的文章《感谢 compose 函数，让我的代码屎山💩逐渐美丽了起来~》，之前这个命题我面试的时候问过很多面试者，还挺有体会的。正好谈一谈 我不会直接问你知"}, {"id": "6844904106042064910", "title": "艰难用echarts模拟甘特图😭，直到我发现了dhtmlxGantt🤩", "desc": "结果均是以失败告终（不符合业务需求，改造难度大）。 调整一下心情，重新踏上甘特图组件调研之路 🤕，终于，被我发现了 Top 5 : Best free jQuery and JavaScript Dynamic Gantt Charts for web application…"}, {"id": "6844904024790007815", "title": "吃透移动端 H5 与 Hybrid｜实践踩坑12种问题汇总", "desc": "作为一个开发了多个 H5 项目的前端工程师，在开发过程中难免会遇到一些兼容性等爬过坑的问题。现在我将这些问题一一汇总一下，并在后面给出坑产生的原理，和现阶段常规的填坑方案。由此来做一个阶段性的总结。 之前两篇文章已经详细的论述了1px 问题与 响应式布局问题，并给出了原理和解决…"}, {"id": "6844904129576321038", "title": "2020年了，还不会内网穿透吗？", "desc": "包括但不限于以上场景。 冲可以在外网演示内网web站这点来说，就值得我们大多数开发者为之嘿嘿嘿。 基于ngrok的国内收费内网穿透工具，免费版本：提供http,https,tcp全隧道穿透，随机域名/TCP端口，不定时强制更换域名/端口，自定义本地端口，临时用一下可以。链接直达…"}, {"id": "7001810353394810887", "title": "详解 JS 函数的 call、apply 及 bind 方法", "desc": "都能够改变目标函数执行时内部 this 的指向；方法的第一个参数用于指定函数执行时内部的 this 值；支持向目标函数传递任意个参数..."}, {"id": "6941232930945499173", "title": "JS 项目中究竟应该使用 Object 还是 Map？| 项目复盘", "desc": "在日常的 JavaScript 项目中，我们最常用到的数据结构就是各种形式的键值对格式了（key-value pair）。在 JavaScript 中，除了最基础的 Object 是该格式外，ES6 新增的 Map 也同样是键值对格式。它们的用法在很多时候都十分接近。不知道有没…"}, {"id": "6844904074433789959", "title": "10分钟教你手写8个常用的自定义hooks", "desc": "Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。本文是一篇以实战为主的文章，主要讲解实际项目中如何使用hooks以及一些最佳实践，不会一步步再介绍一遍react hooks的由来和基本使用，…"}, {"id": "7001124028031172621", "title": "JavaScript 中  Math.random()  生成随机数据", "desc": "Math.random() 将生成一个介于0（包括）和 1（不包括）之间的伪随机浮点数（带有小数的数），随机数并不意味着总是得到一个唯一的数字，它会在一段时间后产生相同的数字。"}, {"id": "6991233820410249252", "title": "vue3+vite+ts项目中使用svg图标｜8月更文挑战", "desc": "项目结构 1. 首先引入svg插件 2. 创建文件 在@/src里面创建icons文件夹，里面创建index.vue(svgicon的模板文件), index.ts(svgicon的js逻辑), sv"}, {"id": "7000301795234807816", "title": "JS中的THIS指向的5种情况", "desc": "JS中的THIS指向的5种情况,this指向应该讨论的是，指向的是内存中的哪块地址,浅谈了5种情况，并分类指出。"}, {"id": "7001802155615059982", "title": "JavaScript事件队列的宏任务与微任务", "desc": "事件队列与事件循环   我们都直到JavaScript是一门单线程非阻塞的脚本语言，这意味着JavaScript在执行期间都是只有一个主线程来处理所有任务的。而非阻塞是指当代码有异步任务是，主线程会挂"}, {"id": "6977251081935912973", "title": "前端摸鱼仔在线算卦，用Javascript实现掐指一算！", "desc": "使用Javascript实现占卜方法——小六壬，在线算卦。算姻缘算事业算健康咯！十元一位！进来算一卦吧！"}, {"id": "6992579252428210183", "title": "前端实现一键复制粘贴", "desc": "如何通过原生或第三方的方式实现前端一键复制粘贴，以及如何像掘金一样，在复制的信息中自动增加原作者信息。"}, {"id": "6975523281134682120", "title": "一篇带你快速入门TS", "desc": "前段时间学习TS，一直没时间总结，今天乘着有时间，我将我在学习过程中的一些核心知识整理成文，本文较短，阅读本文，你将可以快速上手JS，了解TS的核心基础知识~"}, {"id": "6844903600926228493", "title": "四月前端知识集锦（每月不可错过的文章集锦）", "desc": "PS：星号表示需要翻墙。"}, {"id": "6994902542509408270", "title": "vue3+ts项目搭建和封装（下篇）", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 # vue3+ts项目搭建和封装（上篇） 配置request.ts 封装storage.ts 配置config.ts 配置api封装 配置"}, {"id": "6998111080199389221", "title": "海绵宝宝邀您品鉴-JS设计模式(创建型)", "desc": "Creational Design Patterns 创建型设计模式 开始总结设计模式的自省（5W1H） why：让代码更具健壮性、可维护性"}, {"id": "6998387182532558879", "title": "JS基础：15、数组常用方法总结", "desc": "引言 1、前增 unshift() 改变原数组 2、后增 push() 改变原数组 3、后删 pop() 改变原数组 4、前删 shift() 改变原数组 5、改 splice(i, n, t) 改变"}, {"id": "6844903767062609928", "title": "【译】用 JavaScript 和 Emoji 做地址栏动画", "desc": "不管什么原因，维恩图中的合理性观点“没人这么做，但这是可能的”是让我兴奋的点。所以我决定花费一些时间研究在地址栏中图形字符的可能性，特别是通过 JavaScript 给这些字符加上动画。 首先，确保你页面的 JavaScript 代码是 UTF-8 编码，否则无法在你的代码中显…"}, {"id": "6999533690904657950", "title": "一文彻底弄懂深拷贝", "desc": "这是我参与 8 月更文挑战的第 23 天，活动详情查看： 8月更文挑战 前言 这是一道非常经典的面试题，而且似乎每个前端都能答出点什么，比如我们可以这么问： 请问了解过浅拷贝和深拷贝吗？ 能大概说一下"}, {"id": "6844903616101220365", "title": "你或许不知道Vue的这些小技巧", "desc": "用Vue开发一个网页并不难，但是也经常会遇到一些问题，其实大部分的问题都在文档中有所提及，再不然我们通过谷歌也能成功搜索到问题的答案，为了帮助小伙伴们提前踩坑，在遇到问题的时候，心里大概有个谱知道该如何去解决问题。这篇文章是将自己知道的一些小技巧，结合查阅资料整理成的一篇文章，…"}, {"id": "6921870655184961543", "title": "带你入门前端工程（三）：前端组件化", "desc": "在了解模块化、组件化之前，最好先了解一下什么是高内聚，低耦合。它能更好的帮助你理解模块化、组件化。 高内聚，低耦合是软件工程中的概念，它是判断代码好坏的一个重要指标。高内聚，就是指一个函数尽量只做一件事。低耦合，就是两个模块之间的关联程度低。 仅看文字可能不太好理解，下面来看一…"}, {"id": "6974703256744722463", "title": "优雅编程 | 7 个你应该掌握的 JavaScript 编码技巧", "desc": "JavaScript 是一个灵活性很强的语言，有很多和其他语言不一样的特性，本文分享7 个日常开发中可以用到的 JavaScript 编码技巧，享受其优雅编程的快感。"}, {"id": "6874741328148692999", "title": "h5页面在浏览器上好好的，到手机上熄火了又看不到报错信息怎么办？", "desc": "最近小编接了一个新需求，用h5开发页面，通过webview嵌入原生APP中，自己在浏览器上开发爽歪歪，什么信息都能看到，可是一嵌入原生app中，瞬间就熄火了，啥也看不到了，不知道为什么..."}, {"id": "7003333715648741383", "title": "JavaScript数组API大全", "desc": "建一个数组: ES6 Array.of() 返回由所有参数值组成的数组 目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。 ES6 Arrary.fro"}, {"id": "6856546833025237006", "title": "「算法与数据结构」梳理6大排序算法", "desc": "这次梳理了一遍6种排序算法，从掌握思想到实现它，还是画了不少时间，又通过笔记梳理一遍，正好整理出来，对大家起一个抛砖引玉的效果吧。 6中常见的排序算法有GIF动图，更加容易帮助你理解其中的排序思想。 这个名字的由来是向泡泡一样浮起来，脑补一下，就是每次比较相邻的两个元素大小，然…"}, {"id": "6906142651121139719", "title": "回到页面指定位置的三种方式", "desc": "以前大部分时间都是在做b端相关的项目，在实现此类需求时，通常都是直接借助a标签搞定，现在做c端了，对交互性的要求一下就提升了，此时a标签就远远不能满足要求了，需要借助js来实现此类需求，特此记录。 ~~效果很明显，在事件触发之后，页面立马跑到的顶部，在交互性没啥要求的时候，这种…"}, {"id": "6963263757510246413", "title": "这些经典的前端基础算法题, 你会做几道?", "desc": "之前因为工作原因接触了很多有意思的算法知识,为了巩固大家的算法基础和编程能力,笔者总结了8道算法题, 供大家学习参考. 接下来我们来看看题目."}, {"id": "6997786920189165604", "title": "js对象再复习", "desc": "语法 对象可以通过两种形式定义： 对象字面量 对象的构造形式 类型 对象是 JavaScript 的基础。在 JavaScript 中一共有六种主要类型（术语是“语言类型”）： string 内容 对"}, {"id": "6979139685436588068", "title": "XDM，JS如何函数式编程？看这就够了！（七）", "desc": "我不需要再为各位开发者想出更多崇高的理由来激励大家前行。感谢大家一起参与学习 JavaScript 中的函数式编程。期望你我充满希望！—— cognitect-lab"}, {"id": "7004784113706090526", "title": "vue+vite多页应用配置及页面路径更改", "desc": "最近一个项目是用vue+vite进行开发的多页应用,此次主要和大家分享一下vite配置，导出目录，目录优化，和一些其他的注意点"}, {"id": "6938201650012094495", "title": "写给前端的手动内存管理基础入门（一）返璞归真：从引用类型到裸指针", "desc": "作为一名经常需要在团队中搞跨界合作的前端开发者，我发现许多往往被人们敬而远之的「底层」技能其实并不必学到精通才能应用。只要能以问题导向按需学习，就足以有效地完成工作，取得成果了。像 C、C++ 和 Rust 中的手动内存管理，就是这样的例子。我们完全可以绕开语言的黑魔法，只学习…"}, {"id": "6844904197595332622", "title": "浅拷贝与深拷贝", "desc": "浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。 深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新…"}, {"id": "7006184636422307876", "title": "滚动加载 hooks", "desc": "场景：触底加载下一页 代码思路： 触底的时候，page增加，监听page变化，触发请求，在page变化的时候把loading设置为 true，请求拿到数据之后loading设置为false 代码实现"}, {"id": "6844904004720263176", "title": "「中高级前端」干货！深度解析瀑布流布局", "desc": "2019年终岁尾，最近对布局相关的内容比较有兴趣，在此整理一下和瀑布流相关的使用场景以及多种实现方案。 瀑布流又称瀑布流式布局，是一种比较流行的页面布局方式，专业的英文名称为[Masonry Layouts]。与传统的分页显示不同，视觉表现为参差不齐的多栏布局，最早是由Pint…"}, {"id": "7000718463647875086", "title": "this绑定(call,apply,bind)", "desc": "this很重要，不注意它的话一不小心就会绑定到其他地方去了，嘿嘿嘿(●ˇ∀ˇ●)，所以这篇文章就总结了this的绑定与call，apply，bind实现，搞清楚它绑定到谁身上"}, {"id": "6988029460859584519", "title": "昨天聊：基于 SPA 架构的 GraphQL 怎么玩", "desc": "- 第一阶段前端异步去请求数据接口，然后刷新局部的 UI； - 第二阶段前端接管 view 层，这个时候基于 spa 框架开始涌现，并且一直流行到今天； - 第三和第四阶段随着 nodejs 技术的兴"}, {"id": "6984625612937773070", "title": "JS对象数组去重的三种方法", "desc": "一.去重前后数据对比 二.使用方法 使用filter和Map 🌟🌟🌟🌟🌟 使用reduce 🌟🌟🌟🌟 for循环 🌟🌟🌟 结论：filter和Reduce时间上差别不是太大，filter稍微更快一些，"}, {"id": "7001684824217878542", "title": "【算法】浅析JavaScript中快速幂操作的使用", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战，今天学习学习快速幂的思想，可以提高我们算法的效率，日常刷题也会用到~"}, {"id": "6844903945173729288", "title": "通过实现25个数组方法来理解及高效使用数组方法(长文,建议收藏)", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 要在给定数组上使用方法，只需要通过[].方法名即可，这些方法都定义在 Array.prototype 对象上。在这里，咱们先不使用这些相，反，咱们将从简单的方法开始定义自己的版本，并在这些版本的基础上进行构建。…"}, {"id": "6996806947521429535", "title": "js  超详细 保证你看懂学会的发布、订阅者模式", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 发布订阅模式就是 监听on 派发emit该函数的回调 使用过vueBus 的就了解 on绑定 和使用 emit触发该vueBus; 大致代码"}, {"id": "6992613428980351006", "title": "简单介绍一下闭包及它的一些应用场景", "desc": "我是在大一下，一个学姐面试的时候，第一次听闻闭包这个名词。当时听了一些学长的解释（虽然没怎么听懂），但是觉得，似乎很高级的样子。 如今时隔一年，跟闭包也打了不少交道，终于也能谈一谈自己对于闭包的理解了"}, {"id": "6991311584727416845", "title": "ES6集合引用类型Map与WeakMap ｜8月更文挑战", "desc": "在ES6之前，在JavaScript中实现‘键’=>‘值’，也就是我们常说的键值对，是用Object来完成的。但这种实现方式在特殊场景下的有问题的，ES6又出了一个为Map的新集合类型"}, {"id": "7000572692201996296", "title": "Promise全攻略（一.Promise的出现为了解决什么问题）", "desc": "1 Promise的出现为了解决什么问题。2 Promise内部对任务的处理 Promise的标准规范 Promise的方。3 Promise的标准规范。4. Promise的方法使用 等"}, {"id": "6983690972307652621", "title": "每天学习10个实用Javascript代码片段（四）", "desc": "每天学习10个实用Javascript代码片段，加深对 Javascript 语法的理解，积累代码优化经验，第四天继续，如果觉得内容能够带来点帮助，可以查看专栏《碎片时间学习Javascript代码》"}, {"id": "6995455533062815780", "title": "如何实现一款支持浏览器和 Node.js 的通用 SDK", "desc": "本文主要记录实现一款通用 SDK 时遇到的问题，以及解决方案，如果你需要快速创建一个 SDK，那么你可以复制该项目建立你自己的 SDK，并在遇到问题的时候再回头阅读本文。"}, {"id": "6992923942956564493", "title": "浅谈JavaScript原型和原型链", "desc": "我们可以简单理解原型链，用大白话说就是你有驾照想开车但是没有车，正好你爸爸有一辆车，你可以开着你爸的车。如果你有车的话直接就开了，也不用去开你爸爸的车。"}, {"id": "7000706517305393160", "title": "【JS基础回顾】之 Event Loop ｜8月更文挑战", "desc": "一 js为何是单线程 与 异步任务出现的原因 JS是一个单线程的脚本语言。 二 宏任务、微任务 一个宏任务执行结束后会查看微任务队列是否为空而去决定执行微任务还是执行下一个宏任务。 三 代码 1）de"}, {"id": "6893004236594872334", "title": "一个实用的Chrome小工具：xTrace", "desc": "上图示例我想许多同学经常遇到，这在阅读体验上是非常糟糕的，中断我们日常工作的进程，打断我们开发思路，浪费我们的时间，这是不能接受的，鉴于此，我开发一个chrome插件——xTrace来屏蔽他们，其基本原理是利用这些博文本身需要做SEO，页面基本上是SSR渲染的，而遮蔽部分内容的…"}, {"id": "6844904009594044423", "title": "前端常用的 59 个工具类【持续更新】", "desc": "如果实在难以忍受,可以采用方法 2,导入本地对项目进行更改."}, {"id": "6998491215263973389", "title": "探讨ES6新增的变量声明方式", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 前言 首先我们来谈谈关于JS中的变量声明方式 在ES5中，变量声明只有var 和function以及隐式声明三种，而ES6中新增了let、"}, {"id": "6877179322759643150", "title": "一篇搞定前端高频手撕算法题（36道）", "desc": "一、冒泡排序二、选择排序三、插入排序四、归并排序五、快速排序六、堆排序七、桶排序八、new九、instanceof十、Object.create()十一、Objectassign()十二、map十三、"}, {"id": "7000927812819353607", "title": "如何优雅的给图片添加水印", "desc": "我之前写过一篇文章记录了一次上传图片的优化史，计一次vant组件图片上传优化史 还是上次的项目，现在有了一个新需求，就是要给上传的图片添加水印，水印的内容是图片的时间+上传人+系统Logo+系统名称 "}, {"id": "7002164741443420174", "title": "Js位运算符", "desc": "位运算在数字底层（表示数字的32个数位）进行运算的。因为是运算的低级运算操作，所以运算速度往往也是最快的。"}, {"id": "6994960288101433351", "title": "VueUse中的这5个函数，也太好用了吧", "desc": "VueUse 是 Anthony Fu 大佬的一个开源项目，它为Vue的开发者提供了大量用于 Vue2 和Vue3 的基本 Composition API 实用工具函数。"}, {"id": "6987711560521089061", "title": "Web思维导图实现的技术点分析（附完整源码）", "desc": "思维导图是一种常见的表达发散性思维的有效工具，本文会完整的介绍如何从头实现一个简易的思维导图，最终成果预览：https://wanglin2.github.io/mind-map/"}, {"id": "6998505807989964836", "title": "重学前端 | 跟着月影学JavaScript之过程抽象+", "desc": "依然是继续如何写好JS话题，本文主要是说说【过程抽象】【高阶函数】和【编程方式】。 前言 『前期回顾』 重学前端 | 跟着月影学JavaS"}, {"id": "6985714245107187720", "title": "javascript精进之路手写系列第一弹基础篇（18个）（附详解）", "desc": "一、JavaScript 基础 1. 手写 Object.create 思路：将传入的对象作为原型 2. 手写 instanceof 方法 instanceof 运算符用于判断构造函数的 protot"}, {"id": "6993307008413728798", "title": "前端监控系统之错误监控", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 JavaScirpt的常见错误类型 SyntaxError：语法错误 Uncaught ReferenceError(引用错误) Ra"}, {"id": "7004019568423206942", "title": "【JS】变量提升相关题目", "desc": "本文所用到的执行环境版本信息： Chrome浏览器：5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) C"}, {"id": "6924834203129348109", "title": "Redux的设计模式", "desc": "React官方网站是这样形容React的，A JavaScript library for building user interfaces。React实际上是一个编写页面的UI框架，或者说他只是一个UI的library，一个库而已。 虽然React只是一个UI的library…"}, {"id": "7002261147697037325", "title": "JavaScript 之迭代器与生成器", "desc": "因为前一篇文章在写 《React 学习之常用 Redux Middleware》，写到 redux-saga 中间件时，发现需要迭代器与生成器的知识点，索性就来复习一下咯～"}, {"id": "6961926111907282951", "title": "JavaScript 中如何判断对象是否为空", "desc": "在自己的日常开发中，一般使用Object.keys()来判断对象是否为空： 而在一篇文章中却是如此判断： 为什么还要额外判断对象的constructor呢？即构造函数呢？ Object.keys() "}, {"id": "6993874058513219598", "title": "JavaScrip入门指南之“私有成员和特权方法、arguments、ES6的类class使用”（笔记五）", "desc": "一、私有成员和特权方法 成员：对象的属性和方法 实例成员：实例对象的属性和方法 name\\age | showName\\showClass 静态成员：构造函数自己的属性和方法 info 原型成员：构造"}, {"id": "6844903912923725838", "title": "一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比", "desc": "JavaScript 的类型分为两种：原始数据类型和对象类型。 本节主要介绍前五种原始数据类型在 TypeScript 中的应用。"}, {"id": "7000945257093267487", "title": "使用canvas对video视频某一刻截图", "desc": "本次使用的是canvas.drawImage()实现截图功能,包含元素获取、像素清晰度、canvas画布大小以及截图转换格式"}, {"id": "7004730477454049288", "title": "《你所不知道的JavaScript》读书笔记（三）：对象和类（上）", "desc": "这篇文章是《你所不知道的JavaScript》读书笔记系列的第四篇文章。在这篇文章中，我们来聊一聊JavaScript中的类和对象。可能文章内容较多，会分成上下两篇来写。"}, {"id": "7002624000270532622", "title": "浏览器中的 JavaScript - 存储方案知多少?", "desc": "掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 本文学习 浏览器中的 JavaScript 之存储方案 web 应用使用浏览器 在本地客户端存储数据"}, {"id": "6988484297485189127", "title": "前端不懂进程通信？看完这篇就懂了", "desc": "为什么前端要了解进程通信： 前端领域已经不是单纯写在浏览器里跑的页面就可以了，还要会 electron、nodejs 等，而这俩技术都需要掌握进程通信。 nodejs 是 js 的一个运行时，和浏览器"}, {"id": "6844903665686282253", "title": "Promise实现原理（附源码）", "desc": "1. Promise 基本结构 2. Promise 状态和值 这样就实现了 Promise 状态和值的改变。下面说一说 Promise 的核心: then 方法 3. Promise 的 then 方法 onFulfilled 和 onRejected 都是可选参数。 若 x…"}, {"id": "7005907856788570125", "title": "一文搞定浅拷贝和深拷贝", "desc": "JS 的数据类型主要分为两类：基础数据类型和引用数据类型。 基础类型的数据直接存放在栈内存中；引用类型的数据存放堆内存中，栈内存中存放该数据的内存地址（指针"}, {"id": "6969954510593032222", "title": "如何用状态机简化代码中复杂的 if else 逻辑", "desc": "不知道你有没有遇到代码逻辑特别复杂的情况，需要很多的 if else 来判断，每种情况有自己的逻辑。这样的 if else 特别多以后，阅读代码和继续迭代都变得很困难。如果你遇到这种代码，会怎么优化呢"}, {"id": "7004408688148480030", "title": "CKEditor系列（三）粘贴操作是怎么完成的", "desc": "CKEditor编辑器自带clipboard插件来处理粘贴时间，还支持pasteTools插件来处理粘贴。"}, {"id": "6844903624632434702", "title": "Webpack 4 配置最佳实践", "desc": "Webpack 4 发布已经有一段时间了。Webpack 的版本号已经来到了 4.12.x。但因为 Webpack 官方还没有完成迁移指南，在文档层面上还有所欠缺，大部分人对升级 Webpack 还是一头雾水。 不过 Webpack 的开发团队已经写了一些零散的文章，官网上也有…"}, {"id": "7005477911880794120", "title": "内部原理", "desc": "javascript 拥有一套设计良好的规则来存储变量，并且之后可以方便地找到这些变量，这套规则被称为作用域。作用域貌似简单，实则复杂，由于作用域与 this 机制非常容易混淆，使得理解作用域的原理更"}, {"id": "6960465810682806308", "title": "Vue 源码解读（9）—— 编译器 之 优化", "desc": "详细讲解了 Vue 编译器的优化工作 —— 静态标记 ......................."}, {"id": "6991421600780271623", "title": "向页面注入js实现为图片和文字元素添加透明蒙层｜ 8月更文挑战", "desc": "通过简单的JS代码（DOM API）实现为图片与文字元素添加蒙层，为开发操作DOM相关工具打下基础。"}, {"id": "6844903751837286408", "title": "JavaScript 代码简洁之道", "desc": "测试代码质量的唯一方式：别人看你代码时说 f * k 的次数。 代码质量与其整洁度成正比。干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。 本文并不是代码风格指南，而是关于代码的可读性、复用性、扩展性探讨。 可能同一个项目对于获取用户信息，会有三个不一样的命名…"}, {"id": "6977661262729576484", "title": "js不常见的运算符 与 操作符", "desc": "1. 空值合并运算符: ?? 2. 逻辑空赋值: ??= 3. 逻辑或: || 4. 逻辑或赋值: ||= 5. 逻辑与: && 6. 逻辑与赋值: &&="}, {"id": "6844904017340923917", "title": "Vue3.0 新特性全面探索 - 基于 Composition Api 快速构建实战项目", "desc": "建议配合 Visual Studio Code 和 Vue 3 Snippets 代码插件食用Ψ(￣∀￣)Ψ。 以下是项目运用到的依赖，@vue/composition-api 配合 vue 模块让我们 Vue2.0 版本可以抢先体验 Vue3.0 的新特性，axios 是辅助…"}, {"id": "6844903833546702856", "title": "我是如何将业务代码写优雅的", "desc": "我是一名来自蚂蚁金服-保险事业群的前端工程师，在一线大厂的业务部门写代码，非常辛苦但也非常充实。业务代码不同于框架代码、个人项目或者开源项目，它的特点在于逻辑复杂、前后依赖多、可复用性差、迭代周期短，今天辛辛苦苦写的代码，上线运行一周可能就下线了。能熟练书写框架代码、构建底层基…"}, {"id": "6991827408152330253", "title": "ES6 reduce 减少你的面条式代码【初中级前端必会】｜ 8月更文挑战", "desc": "最近和同事 A 聊天聊到`es6`一些基础知识，在问到`reduce`时，同事给我的回答是：‘不就是用来求和的吗’ ？？？ ‘你确定 ？？？’"}, {"id": "6996287916272009223", "title": "js中原型以及原型链", "desc": "js中原型以及原型链 每个函数身上都有一个原型，我们称之为 原型对象 函数的 prototype 属性指向原型对象，原型对象上的 constructor 指回构造函数"}, {"id": "7002240927871795213", "title": "说说前端的模块化机制", "desc": "前言 什么是模块化？ 根据功能或业务将一个大程序拆分成互相依赖的小文件,再用简单的方式拼装起来； 为什么要模块化？ 如果没有模块化，则所有"}, {"id": "6844904082818203655", "title": "二月前端实战面试", "desc": "4. vue文件中为什么需要一个根元素1 然后年后痛定思痛，认真的刷了网上的面试题，发现这些面试题你背住了，小公司基本都没啥问题。 BAT都挂了，我投了阿里，但是阿里根本不搭理我(今天你对我爱答不理，明天我要你高攀不起)。 然后其他基本的都过了。还是水平太菜了，新的一年也是要好…"}, {"id": "6968269630699733023", "title": "精读《低代码逻辑编排》", "desc": "更进一步的逻辑编排是前后端逻辑混排，一般出现在一站式 paas 平台，今天就介绍一个全面实现了逻辑编排的 paas 工具 node-red"}, {"id": "6993217748784381988", "title": "JavaScrip入门指南之“面向对象”（笔记一）", "desc": "一、什么是对象 对象：花括号包裹的一组键值对。 生活中的每一个具体的事物都成为对象。 window对象，document对象…… JavaScript——\"万物皆对象\"语言。 二、面向过程和面向对象编"}, {"id": "6844904016292347918", "title": "这几个库让你交互动效满满，告别'静态'时代", "desc": "Three这个流行的库目前突破了56K Star，是创建一个易于使用，轻量级，3D库默认的WebGL渲染器。在示例中，该库还提供了画布2D、SVG和CSS3D渲染器。threejs可以将它理解成three + js，three表示3D的意思，js表示javascript的意思。…"}, {"id": "6844904003889790983", "title": "干货满满!如何优雅简洁地实现时钟翻牌器(支持JS/Vue/React)", "desc": "数字增长等。相信很多人都已经自己独立实现过了，我也在网上看了一些demo，发现HTML结构大多比较复杂，用了4个并列的标签来放置前后两个“牌”。本文就来讲解下，如何进一步精简HTML，让结构简单，让JS方法封装得易使用。先来看看最终效果： down：表示向下翻牌动效，还有对于的…"}, {"id": "7004784113706090526", "title": "vue+vite多页应用配置及页面路径更改", "desc": "最近一个项目是用vue+vite进行开发的多页应用,此次主要和大家分享一下vite配置，导出目录，目录优化，和一些其他的注意点"}, {"id": "6844903918330347533", "title": "深入 JavaScript 设计模式，从此有了优化代码的理论依据", "desc": "我想很多和我一样的朋友小时候都看过《天龙八部》，里面的女主角王语嫣是个武学博才，但自己却毫无实战。比如段誉和慕容复交手时，她连连口述指导：\"段郎，二龙爪手，抢珠三式，当心你的腰肋，注意你的气户穴。潘月偷心，扶手相望......\"，虽然看着感觉都是一些最基本的拳脚功夫，但有解说在…"}, {"id": "6996828979306954783", "title": "JavaScript 系列之类（一）", "desc": "[JavaScript 系列之类｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6995890088387313672", "title": "重温ES6系列之“函数的扩展-rest参数、扩展运算符”", "desc": "1.rest参数 ES6引入rest参数（形式为“...变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组，该变量将 多余的参数放入数组中。"}, {"id": "7001092270833270798", "title": "promise", "desc": "ES2015正式发布（也就是ES6），Promise被列为正式规范。作为ES6中最重要的特性之一，我们有必要掌握并理解透彻。本文将由浅到深去学习"}, {"id": "7007808455666827272", "title": "剖析 JavaScript source-map", "desc": "简介 随着JavaScript脚本越发复杂，大部分代码都需要经过转换才能投入生产。而转换后的代码位置、变量名都已改变，如果定位转换后的代码，这就是source-map要解决的问题。"}, {"id": "7005355551928352776", "title": "[Vue DevUI]Vue3组件库移动端预览实现原理 | 本文参与掘金周边礼物🎁活动 评论即可抽奖🏆", "desc": "如何实现Vue3组件库移动端预览功能，并通过AST方式自动生成移动端预览的Demo。本文参与掘金周边礼物活动，欢迎大家对本文和DevUI组件库进行评论，评论即可参与抽奖！"}, {"id": "7006136807263830029", "title": "精益求精！记一次业务代码的优化探索", "desc": "本篇从业务场景出发，介绍了面对一个复杂需求，拆解重难点、编码实现需求、优化代码、思考个人成长的过程。 会介绍一个运用策略模式的实战和技术新人的打怪升级成长路径。"}, {"id": "7000894041210503205", "title": "中高级前端？ 这些一元运算符，你真的搞清楚了吗", "desc": "一元运算符，顾名思义，只需要一个操作数的运算符。 delete, void, typeof ,+, -, ~, !你真的了解么，我看未必，一起来再次走近她。"}, {"id": "7004762932034666509", "title": "不可思议el-tree与el-table两个组合肝完这个奇葩需求，被自己的能力吓坏了", "desc": "大家好，我是虚竹，前段时间忙着寻找大哥三弟，很少有技术文章输出，趁中途栖息时间赶紧补上一篇水文。今天给各位看官讲一讲我的刨坑之旅，因为最近开发了一个项目业务上遇到一个感觉有点啪啪的复杂需求"}, {"id": "7006105214008868877", "title": "满月中秋，流星夜空，要不要来许愿呢？", "desc": "大家好，我是追梦玩家。中秋即将到来，提前祝大家中秋快乐啊！！这次，我们又使用 canvas 来实现满月、星星、流星，带着你看满月中秋，流星夜空。"}, {"id": "6997016317635084319", "title": "你知道关闭页面时怎么向后台发送消息吗？", "desc": "navigator.sendBeacon()方法主要用于满足统计和诊断代码的需要，这些代码通常尝试在卸载（unload）文档之前向web服务器发送数据。"}, {"id": "6997930259953745950", "title": "13个JavaScript 一行程序，让你看起来像个专家", "desc": "JavaScript 可以做很多好玩的事， 从复杂的框架到处理API，有太多的东西需要学习。但是，它也能让我们只用一行就能做一些了不起的事情。 1. 获得一个随机的布尔值（true/false） 该函"}, {"id": "7007233910681632781", "title": "浅析 Node 的模块系统", "desc": "模块化的背景 早期 JavaScript 是为了实现简单的页面交互逻辑, 但随着时代发展, 浏览器不单单仅只能呈现简单交互, 各种各样的网站开始大放光彩。随着网站开始变得复杂化，前端代码日渐增多，相对"}, {"id": "7006878952736161829", "title": "一文彻底搞懂js中的位置计算", "desc": "关于JS中的各种位置计算你都分清楚了吗？遇到位置相关API又搞混了吗？看这一篇文章就够用了！文章中会介绍各种位置相关API用法以及涵盖真实业务使用场景。"}, {"id": "7004721390767046686", "title": "项目常用：axios拦截器之重复请求取消", "desc": "引言 取消请求的方法 官网示例1：用CancelToken.source工厂方法创建 cancel token，像这样 官网示例2：通过传递一个 executor 函数到 CancelToken 的构"}, {"id": "6963476650356916254", "title": "产品经理：你能不能用div给我画条龙？", "desc": "事情是这样的，前天上午产品经理说想要做一个心愿墙，问我能不能行 我心想，这太容易了，但为了多摸一天鱼，我说还是有点挑战的 结果下午，产品经理和设计师就给我发来了设计参考 他们说，心愿墙的设计大致是这样"}, {"id": "6980142557066067982", "title": "文件上传，搞懂这8种场景就够了", "desc": "本文阿宝哥将介绍工作中遇到过的八种文件上传的场景，并介绍每种场景背后所使用到的技术，从而让大家能更好地理解成熟上传组件所提供的功能。"}, {"id": "7004639198061789191", "title": "给她一个有爱的Github主页", "desc": "需要在github创建一个跟你github账号名称一致的仓库，并且创建一个README.md。就可以开始你的自定义github 主页了。SHOW TIME!"}, {"id": "7004983755706204197", "title": "不会photoshop? 也能用canvas把头像设计成彩虹色🌈", "desc": "我是寒草，最近很烦恼，别人烦恼于事多钱少，而我却烦恼于头像少，想要更加新颖并有我特色的头像，可是我不会ps，那我就要放弃了么？当然不！canvas给我打开了一扇新的窗户～"}, {"id": "7005375860509245471", "title": "50行代码串行Promise，koa洋葱模型原来是这么实现？", "desc": "阅读本文，你将学到： 1. 熟悉 koa-compose 中间件源码、可以应对面试官相关问题 2. 学会使用测试用例调试源码 3. 学会 jest 部分用法"}, {"id": "7003173903103164447", "title": "mdebug 基于React开发的web调试工具", "desc": "mdebug是腾讯新闻TNTWEB团队推出的基于React开发的web调试工具, 沉淀自腾讯新闻微信手q双插件多年的移动web开发实践中。"}, {"id": "6997603970642345992", "title": "文件直传 OSS 实践（三）：Angular 篇", "desc": "本文讲解在使用 Angular 框架的 Web 页面中将文件直传 OSS 的整体流程。相对于在小程序中使用已经由官方封装好的上传方法，在 Angular 中使用上传功能会稍微复杂一些。"}, {"id": "7006634698822680613", "title": "vuex利用第三方包实现数据持久化", "desc": "让在vuex中管理的状态数据同时存储在本地。可免去自己存储的环节。 在开发的过程中，像用户信息（名字，头像，token）需要vuex中存储且需要本地存储。"}, {"id": "6981249521258856456", "title": "2天赚了4个W，手把手教你用Threejs搭建一个Web3D汽车展厅！", "desc": "事情是这样的，前段时间`外包工头`老杨又来找我了，说某汽车大品牌要开发一个网页展厅，希望可以在网页里360度展示它家新款汽车的3d模型，还要可以让用户DIY汽车部件的颜色。"}, {"id": "6984710104155160590", "title": "你真的了解async...await吗？进来看看这道题", "desc": "偶然间看到下面这道题，是考察async...await机制的，我觉得还挺有意思的。你可以试试不借助控制台自己在心里推算一下运行结果。"}, {"id": "7002859790414774286", "title": "深入理解数据双向绑定方法 Object.defineProperty()", "desc": "Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象，Vue 的底层中很多地方用到了这个方法，比如数据代理、计算属性等等..."}, {"id": "6844903695788802062", "title": "JavaScript 开发者应懂的 33 个概念", "desc": "本篇文章是参照 @leonardomso 创立。 由于原版资源都要翻墙，所以本人创立一个中文版，附上关于这些概念在国内的一些文章和视频。 若有觉得更好的文章或者视频，可以贡献出来，觉得有误的，请联系我删除。"}, {"id": "6844904002392424456", "title": "【前端vue进阶实战】：从零打造一个流程图、拓扑图项目【Nuxt.js + Element + Vuex】 （一）", "desc": "本系列教程是用Vue.js + Nuxt.js + Element + Vuex + 开源js绘图库，打造一个属于自己的在线绘图软件，最终效果：http://topology.le5le.com 。如果你觉得好，欢迎给文章和开源库点赞，让我们更有动力去做好！ 1. 使用Nuxt…"}, {"id": "6986459354044039204", "title": "javascript精进之路手写系列第二弹实际应用篇（18个）（附详解）", "desc": "1. 实现日期格式化函数 输入： 2. 交换a,b的值，不能用临时变量 巧妙的利用两个数的和、差： 3. 实现数组的乱序输出 主要的实现思路就是： 取出数组的第一个元素，随机产生一个索引值，将该第一个"}, {"id": "6987318107274641438", "title": "今天聊：如何设计实现 H5 营销页面搭建系统 - 码良", "desc": "码良是一个高扩展的网页搭建平台，它面向运营，同时也面向研发。码良可以在上面去做移动端的页面，也可以去做 PC 大屏的页面，整个码良平台会通过基础的组件、脚本、动画、模板这些模块，去把整个功能区做一些"}, {"id": "6994630488509906951", "title": "函数式编程", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 函数式编程在如今前端领域越来越火，无论是React16、Vue3都在大量拥抱函数式编程，掌握函数式编程的理念和写法是前端必不可少的知识 优"}, {"id": "6844904106243391495", "title": "【思维导图】前端开发-巩固你的JavaScript知识体系", "desc": "var 声明一个变量，可赋一个初始值。 let 声明一个块作用域的局部变量，可赋一个初始值。 const 声明一个块作用域的只读命名的常量。 变量的名字又叫做“标识符”，必须以字母、下划线（_）或者美元符号（$）开头，并且区分大小写。 一个完整的javascript实现由3个部…"}, {"id": "7003230772358283301", "title": "学习笔记：JavaScript的闭包", "desc": "了解闭包的前提，需要先知道JavaScript的变量作用域 全局变量 局部变量 此外ES6的const和let本身就有块级作用域的概念。 有时候，我们就需要得到函数内的局部变量，那怎么办？闭包的出现，"}, {"id": "6846687590783909902", "title": "[1.3万字] 玩转前端二进制", "desc": "本文阿宝哥将按照以下的流程来介绍前端如何进行图片处理，然后穿插介绍二进制、Blob、Blob URL、Base64、Data URL、ArrayBuffer、TypedArray、DataView 和图片压缩相关的知识点。 还在犹豫什么？跟上阿宝哥的脚步，让我们一起来玩转前端二…"}, {"id": "6856419501777846279", "title": "这些手写代码会了吗？少年", "desc": "从略带银丝的头发和干净利落的步伐我察觉到，面前坐着的这个面试官有点深不可测。我像往常一样，准备花 3 分钟的时间给面试官来一套昨天晚上精心准备的自我介绍。我自信且得意的诉说着对过往项目所付出的心血，所做的优化取得了怎样的成果，为公司提高了多少的收入。。。 显然，面试官对我说的数…"}, {"id": "6993512407129653279", "title": "JavaScrip入门指南之“原型链与继承、基本包装类型的使用”（笔记四）", "desc": "一、继承Ⅱ 混入式继承 原型式继承 原型链继承 借用构造函数继承 组合继承 1.1-原型链继承的实现 实现原理：将子类的原型对象指向父类的实例对象。 实现方法：子类.prototype = new 父"}, {"id": "6927828841645735949", "title": "时代变了，现在居然可以这样写 CSS 了｜牛气冲天新年征文", "desc": "以上代码就是举个例子，大部分情况应该都是写一个类，然后整一堆样式进去。 取名困难，节点结构一多，取名真的是个难事。当然了，我们可以用一些规范或者选择器的方式去规避一些取名问题。 需要用 JS 控制样式的时候又得多写一个类，尤其交互多的场景。 组件复用大家都懂，但是样式复用少之又…"}, {"id": "6895011670301605896", "title": "精选高频 VS Code插件，让你多陪陪npy！", "desc": "高亮显示你的 TODO、FIXME，支持自定义关键字和外观，可以起到良好的提示作用。 解决冲突后配合使用完美格式化代码，能交给机器做的一定要学会偷懒。 实时高亮匹配标签，不用在 HTML 中眼花缭乱的找标签了。 快速生成 console.log() ，调试利器，妈妈再也不用担心…"}, {"id": "6994609420495765540", "title": "🔥 Leader让我给同事讲讲事件循环！！", "desc": "俗话说，知己知彼，百战不殆。我们想要想掌握事件循环，就得先知道事件循环位于什么地方，只有先知道了事件循环它所处的位置，它的功能，它作用，这样理解起来就会特别容易。 事件循环在哪里？ 我们先来看看事件循"}, {"id": "7005096127213240356", "title": " 数组元素去重方法总结", "desc": "1. Set set方法的成员必须是唯一的，正好可以满足我们的需求。 代码如下（示例）： 2. reduce()方法 使用JS内置对象Array提供的reduce方法 reduce方法使用详解可以看我"}, {"id": "6844904012786073614", "title": "50 个JS 必须懂的面试题为你助力金九银十", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JavaScript 是一种轻量级的解释型编程语言，具有面向对象的特性，允许各位在其他静态HTML页面中构建交互性。 该语言的通用核心已嵌入Netscape，Internet Explorer和其他Web浏览器…"}, {"id": "6844904154020708359", "title": "我在阿里是怎么工作的——写在阿里入职一周年", "desc": "1. 优先做重要不紧急的事情 我们都知道四象限分析法，就是按照紧急/重要将事情划分到四个象限中去（如下图）。 而这样的顺序会导致一个问题，就是每天都在赤橙黄，赤橙黄中反复，重要不紧急的事情一直排不上期，最后也变成重要且紧急的事项，然后再慌慌张张的处理。但是，重要不紧急的事情往往…"}, {"id": "6993316464266575879", "title": "JavaScript原型链继承与盗用构造函数继承", "desc": "原型链的搜索机制就是在读取实例上的属性时，首先在自身的实例上进行搜索，如果没找到，就会通过继承的方式继续搜索，搜索是向上的。对于属性和方法一直会持续到原型链末端"}, {"id": "6994295598958510111", "title": "快速写一个让自己及面试官满意的原型链", "desc": "原型的五条原则 所有引用类型（函数、对象、数组），都存在对象特性，即可以自由拓展属性。 （除了null意外） 所有的引用类型"}, {"id": "6844904179572424711", "title": "前端动画必知必会：React 和 Vue 都在用的 FLIP 思想实现小姐姐流畅移动。", "desc": "乍一看，让我们手写出这个逻辑应该是非常复杂的，先看看本文最后要实现的效果吧，和这个案例是非常类似的。 图片素材依然引用自知乎问题《有个漂亮女朋友是种怎样的体验？》，侵删。 拿到了这个需求，第一直觉是怎么做？假设第一行第一个图片移动到了第二行第三列，是不是要计算出第一行的高度，再…"}, {"id": "6844903877574295560", "title": "精读《Vue3.0 Function API》", "desc": "1. 引言 不，100% 兼容 Vue 2.0，且暂未打算废弃任何 API（未来也不）。之前有草案试图这么做，但由于用户反馈太猛，被撤回了。 没有呀，这次精读的稿子就是 RFC（Request For Comments），翻译成中文就是 “意见征求稿”，还在征求大家意见中哦。 …"}, {"id": "6996945105273765924", "title": "0.1+0.2!=0.3？揭秘其中的奥妙。", "desc": "从 二进制、IEEE754浮点数、计算机存储和计算浮点数的原理来深度解释0.1+0.2!=0.3的现象。浮点数运算原理？拿来吧你。"}, {"id": "6844903779645538318", "title": "如何编写高质量的函数 -- 敲山震虎篇", "desc": "一千个读者，有一千个哈姆雷特。 我将会从函数的执行机制、鲁棒性、函数式编程、设计模式等方面，全面阐述如何编写高质量的函数。 如何编写高质量的函数，这是一个很难回答的问题，不同人心中对高质量有自己的看法，这里我将全面的阐述我个人对如何编写高质量函数的一些看法。看法可能不够全面，也…"}, {"id": "6974534341950963749", "title": "整合文章至专栏", "desc": "Hello，大家好久不见，抽空将自己发的文章整合到专栏里了，希望能帮到大家，欢迎各位开发者关注自己感兴趣的专栏。"}, {"id": "6844903761949753352", "title": "浏览器与Node的事件循环(Event Loop)有何区别?", "desc": "本文我们将会介绍 JS 实现异步的原理，并且了解了在浏览器和 Node 中 Event Loop 其实是不相同的。 官方的说法是：进程是 CPU资源分配的最小单位；线程是 CPU调度的最小单位。这两句话并不好理解，我们先来看张图： 进程好比图中的工厂，有单独的专属自己的工厂资源…"}, {"id": "6998641962584637454", "title": "写给新手的 JSON 语法基础知识点", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 如果要在互联网上传输数据，那么可用的数据格式有很多，那么定义一种通用的标准用于数据传输，就尤为重要。 在 JSON 之前，XML 曾经是这"}, {"id": "6997009256629157925", "title": "Set和Map数据结构的基本使用", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 ES6中新增了Set、WeakSet、Map、WeakMap数据结构，今天一起来看看 一、Set Set是类似数组的数据结构，和数组最大的"}, {"id": "6994603618800238629", "title": "JavaScript 系列之闭包（三）", "desc": "[JavaScript 系列之闭包｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6844903890278694919", "title": "「前端进阶」彻底弄懂前端路由", "desc": "现代前端项目多为单页Web应用(SPA)，在单页Web应用中路由是其中的重要环节。 每个现代前端框架都有与之对应的路由实现，例如 vue-router、react-router 等。 本文并不涉及 vue-router、react-router 的实现方式，而是介绍前端路由的基…"}, {"id": "7002575199560269837", "title": "仿一个苹果手机计算器", "desc": "除了日常的画画页面、写写业务代码之外，难道程序员就不能有点乐趣了嘛？我刷着手机瞟见了计算器：苹果手机的计算器果然漂亮，简约大气上档次，何不做一个？于是有了这篇文章。"}, {"id": "6996273485936869406", "title": "关于ES6的模块化", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 我们知道很多语言都有属于自己的模块化规则，可以按照特定的规则来定义和使用引用模块。但是在ES6之前，js是不支持模块化的。那怎么办？其实前"}, {"id": "7002622071985405966", "title": "调用栈：为什么JavaScript代码会出现栈溢出", "desc": "当一段代码被执行时，JavaScript引擎先会对其进行编译，并创建执行上下文。但是并没有明确说明到底什么样的代码才算符合规范."}, {"id": "6905708824703795214", "title": "【前端工程化基础 - Babel 篇】简单实现 babel-plugin-import 插件", "desc": "前几个月写的一篇文章，还没在掘金发过。 平时在使用 antd、element 等组件库的时候，都会使用到一个 Babel 插件：babel-plugin-import，这篇文章通过例子和分析源码简单说一下这个插件做了一些什么事情，并且实现一个最小可用版本。 antd 和 ele…"}, {"id": "6950081305560219679", "title": "【面试技巧】老生常谈之 n 种使用 CSS 实现三角形的技巧 ", "desc": "只会使用 border 绘制三角形吗？那你就 out 了，赶紧进来学习学习其它 N 种纯 CSS 绘制三角形的技巧吧！"}, {"id": "6991603333660147726", "title": "Vue后台系统中如何优雅的书写状态标签", "desc": "一个开发小技巧，告别标签里频繁的 v-if，通过数据抽离和二次封装来减少重复代码，让代码维护更加轻松。"}, {"id": "6962472321948844040", "title": "迄今为止最好的Webview远程调试神器：devtools-pro", "desc": "🎉 Features 基于 Chrome DevTools 基于 WebSocket 远程调试 可扩展，支持自定义插件 📦 Installation 命令行配置项 配置文件devtools.confi"}, {"id": "6999440903144210445", "title": "JavaScript 系列之字符串（一）", "desc": "[JavaScript 系列之字符串｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "7003967612820406285", "title": "每周分享第（143）期", "desc": "新闻、观点、有趣 2021 Web Worker 现状 在这篇文章，我将概述为什么我认为多线程在 Web 领域很重要，然后介绍作为开发者的我们能够使用的多线程原语。除此之外，我还会谈论一些有关架构的话"}, {"id": "6996947014101499935", "title": "JavaScript 中 prototype 原型继承", "desc": "原型继承 说到原型继承，那就是要从原型入手，就让我们来简单回顾一下什么是原型吧 函数的 prototype 属性指向原型对象，原型对象上的 constructor 指回构造函数"}, {"id": "6990526490911703048", "title": "JavaScript学习（三） —— 变量对象、活动对象", "desc": "创建阶段： ① 生成变量对象（Variable Object）： ② 建立作用域链（Scope chain） ③ 确定函数中 this 的指向 执行阶段： ① 变量赋值 ② 函数引用 ③ 执行其他代码"}, {"id": "6844904166347767822", "title": "js异步处理的三种方式", "desc": "很容易可以看出，上述代码会依次输出1，2。因为代码是从上到下，依次执行，执行完f1()，才会执行f2()。但是如果f1()中的代码执行的是读取文件或者ajax操作呢，文件的读取都需要一定时间，难道我们需要完全等到文件完全读完再进行写操作么？为了解决这个问题，接下来我们来探究一下…"}, {"id": "6844903876781408263", "title": "伴随 P5.js 入坑创意编程", "desc": "上一篇文章：填坑！完结娱乐圈明星关系图谱 发布后，古柳印象里过往留下的坑貌似只剩下 图像检索（一）：因缘际会与前瞻 的后续实践代码（原文里给了参考代码链接）和在豆瓣Top250电影海报上的尝试效果了。 一想到所有坑都被填了（如果还有啥是我不记得的，请千万不要提醒我），就觉得真是…"}, {"id": "6844903606311714824", "title": "深入理解闭包之前置知识→作用域与词法作用域", "desc": "这两天刚好和朋友讨论到闭包，这个JavaScript中的“神兽”，很多同学会觉得闭包这玩意太闹心了，怎么着都理解不了...其实刚接触JavaScript的时候我也是这样的。 但是呢，闭包却非常重要！非常重要！非常重要！ 在《你不知道的JavaScript》中甚至这样写道“对于那…"}, {"id": "6970850932930117662", "title": "ES6 ---- 模块", "desc": "这是我参与更文挑战的第7天，活动详情查看： 更文挑战 前言 在此之前我们已经介绍过Class类以及利用Class类继承做了一个小demo，今天我们再来看看ES6中模块的概念，上两篇的链接如下： ES6"}, {"id": "6844903678327914504", "title": "从观察者模式到手写EventEmitter源码", "desc": "观察者模式（observer）广泛的应用于javascript语言中，浏览器事件（如鼠标单击click，键盘事件keyDown）都是该模式的例子。设计这种模式背后的主要原因是促进形成低耦合，在这种模式中不是简单的对象调用对象，而是一个对象“订阅”另一个对象的某个活动，当对象的活…"}, {"id": "6969730897020977188", "title": "JavaScript内存泄露", "desc": "JavaScript内存泄露 一、什么是内存泄露 所谓内存泄漏，就是用完的内存没有在生命周期的释放期释放，就会导致内存泄露。当内存泄漏严重的时候，会"}, {"id": "6844903711106400264", "title": "JavaScript 异步与事件循环", "desc": "然后，这又牵扯到了事件循环、消息队列，还有微任务、宏任务这些。 作为一个初学者，对这些了解甚少。 这几天翻阅了不少资料，似乎了解到了一二，是时候总结一下了，它们困扰了我好一段时间，就像学高数那会儿自己去理解一个概念一样。 单线程语言：JavaScript 的设计就是为了处理浏览…"}, {"id": "6844903833764642830", "title": "从源码剖析useState的执行过程", "desc": "代码非常简单，点击button使count+3，count的值会显示在屏幕上。 一. 前置知识 1. 函数组件和类组件 我们来看一个简单的Greeting组件，它支持定义成类和函数两种性质。在使用它时，不用关心他是如何定义的。 如果 Greeting 是一个函数，React 需…"}, {"id": "6990252075149951006", "title": "LeetCode刷题，表现良好的最长时间段（1124）", "desc": "将原问题转换，假如是大于 8 的，变为 + 1，小于的变为 -1，再转换为前缀和，然后求解当前位置的数字找到前一个比它小的数字位置，当前区间就是一段大于等于0的区间，最长区间只需要依次遍历找到最大值"}, {"id": "6992751771428847646", "title": "ES6 块级作用域", "desc": "本文介绍 ES6 中 let、const 的使用、变量提升、暂行性死区、块级作用域，以及函数声明在不同 ES5 和 ES6 下的表现差异"}, {"id": "6844903936353107982", "title": "useEffect Hook 是如何工作的", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 想象一下:你有一个非常好用的函数组件，然后有一天，咱们需要向它添加一个生命周期方法。 呃... 刚开始咱们可能会想怎么能解决这个问题，然后最后变成，通常的做法是将它转换成一个类。但有时候咱们就是要用函数方式，怎…"}, {"id": "6987628399606890503", "title": "从零开始学习3D可视化之数据对接（2）", "desc": "在日常使用的互联网产品中，很多都是前后端数据的交互来完成的，说到数据交互就不得不提Ajax和WebSocket，它们可是数据交互的利器，那么它们分别是什么？Ajax上篇文章已经讲过了，那WebSock"}, {"id": "6964749085794369566", "title": "[JS]解构赋值", "desc": "数组的解构赋值 ES6允许按照一定模式从数组或对象中提取值，然后对变量进行赋值，称为解构。只要等号两边的模式相同，左边的变量就会被赋予对应的值，这种写法属于“模式匹配”。统称起来就叫做“解构赋值”。 "}, {"id": "6976237670292783141", "title": "数据结构之散列表", "desc": "HashTable类也叫HashMap类，是Dictionary类的一种散列表实现方式。散列表：顾名思义也就是离散的或者零散，即不连贯的列表，也可以类比于离散数组。"}, {"id": "6844903810767421447", "title": "重学 JS 系列：聊聊继承", "desc": "继承得靠原型来实现，当然原型不是这篇文章的重点，我们来复习一下即可。 对象之间通过 __proto__ 连接起来，这样称之为原型链。当前对象上不存在的属性可以通过原型链一层层往上查找，直到顶层 Object 对象 其实原型中最重要的内容就是这些了，完全没有必要去看那些长篇大论什…"}, {"id": "6993961201872928782", "title": "流程控制--链式调用+promise", "desc": "搜索优化 我们在进行搜索或则表单验证的时候，用户进行多次输入， 我们一般采用最后一刻输入完成的或者最后请求的响应数据。 这里有两种做法。 1、防抖 不管事件触发频率多高，一定在事件触发n秒后才执行，如"}, {"id": "6989875316076314637", "title": "重学JS基础-预编译", "desc": "预编译 1.JS代码的执行步骤 语法分析: 主要扫描代码有没有语法上的错误（比如少些括号，写了中文符号） 2) 预编译: 进行变量的声明提升，函数整体提升，函数执行前一刻的准备工作。 3) 解释执行:"}, {"id": "6844903780329357320", "title": "JavaScript函数式编程，真香之组合函数(二)", "desc": "组合是一种为软件的行为，进行清晰建模的一种简单、优雅而富于表现力的方式。通过组合小的、确定性的函数，来创建更大的软件组件和功能的过程，会生成更容易组织、理解、调试、扩展、测试和维护的软件。 对于组合，我觉得是函数式编程里面最精髓的地方之一，所以我迫不及待的把这个概念拿出来先介绍…"}, {"id": "6844904122466959367", "title": "适合前端开发 和UI 设计的20多个最佳 ICON 库", "desc": "在应用界面中图标的存在，会给用户一个良好第一印象，这个挺重要的。但是从零开始开发图标需要大量的时间和金钱。在你的网站上使用图标可以让你有效地与你的访问者交流:它们增加了可读性，突出了重要的内容，加强了功能或特性，增强了设计。因此，使用现成图标是很好的一个选择。 这里阿里的ico…"}, {"id": "6844904018817335310", "title": "图片该如何优化来提高网站的性能，这里提供几种方法", "desc": "个人专栏 ES6 深入浅出已上线，深入ES6 ，通过案例学习掌握 ES6 中新特性一些使用技巧及原理，持续更新中，←点击可订阅。 为了保证的可读性，本文采用意译而非直译。 图像是web上提供的最基本的内容类型之一。他们说一张图片胜过千言万语。但是如果你不小心的话，图片大小有时高…"}, {"id": "6895602099350945806", "title": "带你一文读懂ES6的Symbol", "desc": "Symbol这个特性对于很多同学来说，可能是在学习ES6特性的过程中，感到比较困惑的一个特性点。在大部分开发场景中，你可能根本用不到这个特性，但理解Symbol各个属性和方法的作用和意义还是非常有必要的，在一些特定的场景中，你会发现它不可或缺。Symbol内含的方法和属性非常多…"}, {"id": "6888458037359542279", "title": "小程序-实现小程序与小程序之间的跳转", "desc": "从 2020 年 4 月 24 日起，使用跳转其他小程序功能将无需在全局配置中声明跳转名单，调用此接口时将不再校验所跳转的 AppID 是否在 navigateToMiniProgramAppIdList 中。 从 2020 年 4 月 24 日起，跳转其他小程序将不再受数量限…"}, {"id": "6844904158269538317", "title": "Redux系列之分析中间件原理（附经验分享）", "desc": "整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。 唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。 为了描述 action 如何改变 st…"}, {"id": "6844904136064925704", "title": "彻底弄懂节流和防抖", "desc": "这两个东西，你肯定听过，就是两种优化浏览器性能的手段。相关文章你肯定也看过，如果还是不太清楚，没关系，看完这篇短文，相信你能轻松理解其中差别。 虽然是个笑话，却很好地说明了防抖的定义：给一个固定时间，如果你开始触发动作，并且在这个固定时间内不再有任何动作，我就执行一次，否则我每…"}, {"id": "6987656127198527518", "title": "JS -- 获取倒计时相差值的几种方式", "desc": "方式1 推荐的方式 这种，根据一种相差值动态去推算其他 返回根据天为最高单位的结果 OR 方式2 也有这种 根据一种相差值，反复推算其他值，然后直接格式一定的时间格式 这种和第一种差不多，不过代码要长"}, {"id": "6844903823681519623", "title": "简单介绍的执行上下文和执行栈", "desc": "执行上下文是评估和执行 JavaScript 代码的环境的抽象概念。Javascript 代码都是在执行上下文中运行。 JavaScript 的可执行代码(executable code)的类型只有三种，全局代码、函数代码、eval代码。 对应着，JavaScript 中有三种…"}, {"id": "6996635516129001503", "title": "边学边译JS工作机制--33.提升性能的8个建议", "desc": "总览 JS是一个很流行的语言，在客户端，服务端，手机和桌面应用上都有使用。因此，构建高性能的JS应用是很必要的。 这一章，我们会讨论一些引起性能下降的常见问题，以及优化性能的一些建议---它们可能帮助"}, {"id": "6982501456817422350", "title": "JavaScript 日期与计时器", "desc": "本文介绍 JavaScript 中日期类构造函数 Date 的使用和时间戳的概念，以及设置计时器和清除计时器的方法"}, {"id": "6844904054032695304", "title": "从 JS 引擎到 JS 运行时（上）", "desc": "V8 和 Node.js 的关系，是许多前端同学们所津津乐道的——浏览器里的语言，又兼容了浏览器外的环境，两份快乐重叠在一起。而这两份快乐，又带来了更多的快乐……但你有没有想过，这两份快乐到底是如何重叠在一起的呢？下面我们将以嵌入式 JS 引擎 QuickJS 为例，介绍一个 …"}, {"id": "6989179910325534728", "title": "var let 与const的区别", "desc": "1.var带来的烦恼 1.了解JavaScript中的作用域（es6前） 1.全局作用域 变量name被绑定到windows对象上了 2.函数作用域 在这里函数内定义的变量name,在执行打印语句时进"}, {"id": "6948658040404967437", "title": "大多数人没用过的 WeakMap / WeakSet 有啥用", "desc": "在聊 WeakSet 之前，我们还是先温习一下 Set 这个相对简单的数据结构。 首先，WeakSet 里面的引用是弱引用。对于这点，mdn 内也有详尽的描述。 也正由于不可枚举，所以在 Set 中涉及到遍历的方法在 WeakSet 均不存在。于是， WeakSet 的接口也就…"}, {"id": "6945602382805860366", "title": "如何实现一个 Esbuild 插件？从入门到上手", "desc": "随着 Vite 2.0 的发布，其底层的设计也不断地被大家所认知。其中，大家十分津津乐道的就是采用 ESBuild 来做 Dev 环境下的代码转换（快到飞起 😲）。 与此同时，这也给 ESBuild 带来了很多曝光。并且，esbuild 生态也陆续出现了一些插件（Plugin…"}, {"id": "6992381259217371144", "title": "JavaScript 防抖（debounce）、节流（throttle）", "desc": "防抖（debounce） 实际场景经常出现在输入框输入文字时触发的回调函数，以此为例： 输入文字时，输入框内的字符每改变一次就实时调用change方法，如果用户连续快速输入，会多次调用目标函数。这种体"}, {"id": "6877135406278803464", "title": "「译」ES 特性展望：ECMAScript 2021", "desc": "本篇文章跟踪了「ES2021」实际和潜在的「特性」。我将会一直实时地更新它。 值得注意的是，自从「TC39」进程被建立起，「ECMAScript versions」的重要性被降低了很多。现在，最关注的是被提出的「特性」处于哪个阶段。一旦，它到了第 4 阶段（stage 4），它…"}, {"id": "6991630709467119647", "title": "JavaScript DOM 鼠标拖拽", "desc": "本文介绍 JavaScript DOM 事件中获取鼠标位置的各种属性及其兼容性、拖拽功能的实现以及拖拽函数的封装"}, {"id": "6844904112027353096", "title": "Dom Diff初探", "desc": "大家应该都知道操作Dom代价是昂贵的，因为操作Dom其本质是两个线程（JS引擎和GUI渲染引擎）间发送指令（通信）的过程，并且浏览器在创建初始化一个元素时，会为其创建很多属性，因此，在大量操作Dom的场景下，通过一些计算来尽可能少地操作Dom，保证了性能的下限。当然Dom Di…"}, {"id": "6844903661588447240", "title": "浅谈H5音频处理（更多谈谈录音方向的内容）", "desc": "最近需要做一个实时录音然后根据音频流实时反馈出调用静音分析（VAD）以及语音识别(ASR)接口的功能。于是研究起H5有关这方面的支持。 首先需要弄清一点，Web Audio API和H5的<audio>完全不是一个体量级的东西，<audio>可以很方便地让你将音频文件丢进去就自…"}, {"id": "6968299251038158855", "title": "js检测自定义协议是否存在", "desc": "使用自定义协议可以使浏览器调起客户端本地程序，详情请点击大佬写的文章：通用URL协议实现在浏览器中打开本机任意程序。 那么在实际应用中，如何检测自定义的协议是否存在呢？ie下可以"}, {"id": "6844903728663756813", "title": "理解DOM到底是什么", "desc": "文档对象模型或者说我们熟悉的“DOM”，web网页的一个界面。它本质上是允许程序读取和操作页面的内容，结构和样式的页面API。 接下来一一分解。 浏览器如何从源HTML文档转到在视口中显示样式化和交互式页面称为“关键渲染路径”。 这些步骤大致可分为两个阶段。第一阶段涉及浏览器解…"}, {"id": "6982584468452147231", "title": "深入数组之梳理数组api", "desc": "本文章将带你深入了解，梳理这些眼花缭乱的数组api.让你整体上有个清晰的认识。从而加深对数组的印象...让数组成为你的工作利器！"}, {"id": "6844903885472022535", "title": "​搞不懂JS中赋值·浅拷贝·深拷贝的请看这里", "desc": "为什么写拷贝这篇文章？同事有一天提到了拷贝，他说赋值就是一种浅拷贝方式，另一个同事说赋值和浅拷贝并不相同。 我也有些疑惑，于是我去MDN搜一下拷贝相关内容，发现并没有关于拷贝的实质概念，没有办法只能通过实践了，同时去看一些前辈们的文章总结了这篇关于拷贝的内容,本文也属于公众号【…"}, {"id": "6979792569865617421", "title": "Promise全面总结", "desc": "Prmoise诞生的原因 Promise诞生以前，在处理一个异步请求时，我们通常是在回调函数中做处理，例如处理一个Ajax请求的代码如下所示。 假如在一个行为中，需要执行多个异步请求，每一个请求又需要"}, {"id": "6844903872545161224", "title": "容易混淆-论query和params的使用区别", "desc": "前言路由传参的时候，有俩兄弟，一个叫query，一个叫parmas你说他们俩长得也不像吧，可这用法实在是太类似了下面就让我们分别从vue路由和Node接收两个角度讲他们的区别vue路由中的传参假设我们"}, {"id": "6881423470400389134", "title": "JavaScript 对象 — 重学 JavaScript", "desc": "这里我们继续学习两个比较重要的类型，就是 Object 和 Symbol。我们主要讲的是 Object，相对 Object 来说 Symbol 只是一个配角。 关于对象这个概念大家非常早就会接触到了，其实人大概在 5 岁的时候就会产生对象的抽象。很多时候我们看起来好像对象是我们…"}, {"id": "6988721264160407560", "title": "LeetCode第513题 ：找树左下角的值", "desc": "题干 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 示例 1: 提示: 二叉树的节点个数的范围是 [1,104] -231 <= No"}, {"id": "6910905376888061965", "title": "「查漏补缺」对比class与旧构造函数的区别", "desc": "JavaScript是没有类这个概念的，区别于其他传统的强类型语言，例如Java，JS的类（构造函数）在设计根本上就有本质的不同，Java的类是代码的拷贝，而JS则用了原型链继承而已，所谓的构造函数只不过就是个普通函数，（只是大家习惯在使用时大写，这事也就成了规范）。 由于私有…"}, {"id": "6924234619621474318", "title": "JS 的函数作用域和块作用域", "desc": "首先我们要了解 JS 的词法作用域。 词法作用域: 简单的说就是定义在词法阶段的作用域。换句话说是由你在写代码时将变量和块作用域写在哪决定的（有一些欺骗词法作用域的方法不在此处介绍）。我们可以将作用域看成一个气泡，示例如下 究竟是什么生成了新的气泡？ 只有函数会生成新的气泡吗？…"}, {"id": "6844903502435581965", "title": "JavaScript 闭包", "desc": "关于 JavaScript 闭包的东西已经被写烂了，但是这一篇写得简单且不「掉书袋」。"}, {"id": "6844903637622194189", "title": "跨域就这么点事儿", "desc": "说跨域之前先说说同源策略，同源策略是一种约定，几乎所有现代浏览器都遵循了这种约定，它也是一种安全策略，确保非同源的请求无法随意请求，从而保证了网站的安全。同源需要保证协议，域名，端口都相同，只要有一个不同，那么他们就不是同源的。虽然同源策略保证了安全性，但有时候我们确实需要非同…"}, {"id": "6844903804937191438", "title": "摩拜前端周刊第1期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜CSS选择符的使用地址：https://mp.weixin.qq.com/"}, {"id": "6999830155602444319", "title": "「双指针」leetcode 88.合并两个有序数组（简单）", "desc": "一、了解题目 附上原题链接：88. 合并两个有序数组 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目"}, {"id": "6844903685475008526", "title": "未来的组件化标准 —— 浅尝Web Components ", "desc": "Web Components涉及到的内容还是很多的，每一块都有很多东西可以讲，国外的好多大佬已经产出了好多优秀的文章。 本文照常只是简单了解大致内容而不进入深究，了解且会用即可，浅尝辄止。 Web Components本身不是一个规范，而是由W3C提出的另外4个规范的合集。这四…"}, {"id": "6844903592550383624", "title": "VuePress手把手一小時快速踩坑", "desc": "快速部署生成靜態網站，便於書寫blog或記錄文件，這個需求始終沒有減少過。因此github上也有許多配套方案，便於建立這類型的靜態網站，例如hexo或Gatsby。透過這個靜態網站排名可以一窺當前stars排名靠前的各種方案。 上週Vue的作者尤大大，提出了一個新的解決方案Vu…"}, {"id": "6844903560358920200", "title": "微信公众号支付实现详解（前端）", "desc": "完成微信h5支付的你，继续公众号的支付也许更简单哦。 微信浏览器中的应用支付必须依赖于公众号支付，下面就公众号支付中的一些技术点进行详细的解析。 与微信h5基本相同，唯一不同的是这次微信返回的需要唤起微信sdk支付的参数列表。 网站应用微信登录是基于OAuth2.0协议标准构建…"}, {"id": "6975371942396166152", "title": "JavaScript |关于函数的基础知识 ", "desc": "目标 能够说出为什么需要函数（让大量代码重复使用） 能够根据语法书写函数 能够根据需求封装函数 能够说出形参和实参的传递过程 能够使用函数的返回值 能够使用arguments获取函数的参数 目录 函数"}, {"id": "6992383091687817246", "title": "JavaScript 实现 FIFO 缓存", "desc": "现在如果要用 JavaScript 实现一个 FIFO 缓存方法，有下面几点要注意： 队列要有上限limit，即队列的最大容量，它判断超出容量后让最早进入的元素移出队列。 它有一个新增元素的方法set"}, {"id": "6876603124220592135", "title": "协同编辑场景的基础分析及方案设计", "desc": "最近笔者在做一款具有协同编辑功能的思维导图时。在实现协同编辑的过程中对这一场景中笔者有了一些自己的理解，于是便在这里抛砖引玉。 协同编辑，即多个操作端同时对一个对象进行操作。在协同编辑的过程中，有俩个首要的性能指标，一致性与实时性。二者相互制约，不同的场景有不同方案。 协同编辑…"}, {"id": "6972525270242689037", "title": "几行代码实现instanceof", "desc": "判断某个实例是否属于某个类型或者属于它的父类、祖先类... Child通过原型链继承的方式继承了Parent，所以ming不仅属于Child类型也属于Parent类型。知道了instance"}, {"id": "6844904200099332110", "title": "【JavaScript】从入门到深入了解AJAX", "desc": "get请求相对于post来说，不安全，get请求传参是基于URL问号传参，会被别人基于URL劫持的方式把信息获取到有一句话说得好：“互联网面前人人都在裸奔”，所以没有绝对的安全，我们需要更多的去处理安全性。 get请求容易产生缓存，原因还是因为get是基于问号传参传递信息的。浏…"}, {"id": "6970866355977486349", "title": "前端批量获取文件并打包压缩解决方案", "desc": "前端文件下载我相信很多小伙伴并不陌生，下载文件的形式也有很多.。单个件下载的解决方法有很多，但是当我们需要批量下载文件的时候，我们该怎么去做呢？"}, {"id": "7002490552818073637", "title": "Promise.any() 原理解析及使用指南", "desc": "Promise.any(promises) 是 ES2021 新增的特性，它能够并行运行 promise，并解析为 promises 列表中第一个成功解析的 promise 的值。"}, {"id": "7001784887808098317", "title": "Axios源码学习记录", "desc": "概述 我们引入的 axios 实际上是Axios的原型方法 request （函数对象）,该函数的执行上下文是 Axios 的一个实例对象。 该实例扩展了 Axios 构造函数原型上的方法，以及公有属"}, {"id": "6998122659204562958", "title": "浅谈DOM中的类型", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 Node类型 node类型是DOMLevel 1中定义的，除了ie浏览器所有的浏览器都可以访问这个类型，在js中，所有的节点类型都继承no"}, {"id": "6844904029231775758", "title": "分享这半年的 Electron 应用开发和优化经验", "desc": "2019 年最后一发，谈谈这半年 Electron 应用开发和优化心得。干货也挺多，希望能给你带来一点启发。 下半年可以拿出来说一说的项目，估计就是我们用 Electron 重构了一个桌面端应用。这个应用类似于钉钉或者企业微信，主要功能有即时通信、语音/视频、会议，基本功能和交…"}, {"id": "6999806288632741901", "title": "js实现模糊查询", "desc": "对于模糊查询，一般都是传关键字给后端，由后端来做。但是有时候一些轻量级的列表前端来做可以减少ajax请求，在一定程度上提高用户体验。也能节省不少时间 1. indexof 方法 2. split 方法"}, {"id": "6939698220645744648", "title": "🔥「实例」ES2021来了，Blue带你看看有哪些值得了解的", "desc": "ES12总览ES2021（简称ES12）会在2021年中发布，那么，有什么值得期待的新特性，Blue带你了解一下字符串的replaceAll方法数字分隔符逻辑赋值运算符Promise.anyWeakR"}, {"id": "6938583040469762055", "title": "小技巧！CSS 整块文本溢出省略特性探究", "desc": "今天的文章很有意思，讲一讲整块文本溢出省略打点的一些有意思的细节。 我们都知道，到今天（2020/03/06），CSS 提供了两种方式便于我们进行文本超长的打点省略。 基于上述的超长打点省略方案之下，会有一些变化的需求。譬如，我们有如下结构： 对于上述超出的情况，我们希望对于超…"}, {"id": "6997779063574102047", "title": "『面试的底气』—— 设计模式之中介者模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7003123145649422349", "title": "你不得不知道的-函数防抖(Debounce)和节流(Throttle)", "desc": "为什么要防抖节流 连续调用多少时间间隔合适 Debounce函数防抖： 原理 当调用动作过N毫秒后，才会执行该动作示意图： 若在这N毫秒内又调用此动作则将重新计算执行时间示意图： 实现 非立即执行版 "}, {"id": "6876977166051966984", "title": "作为前端，我对业务的一点理解", "desc": "一直都是写关于技术的一些东西，从来没想过我会写一篇与技术没什么关系的文章，因为在之前的我看来，这种文章完全就是假大空技术至上？三年前我毕业进入第一家公司，个人很水的技术能力让我经常在实际的开发工作中捉"}, {"id": "7000272713604399135", "title": "js 算法 - 选择排序", "desc": "选择排序和插入排序有一点相似，它也分为有序区间和无序区间，它的核心操作是每次都从无序区间找到区间内的最小值，然后将最小值插入到有序区间的末尾，以此达到有序。"}, {"id": "7003516624963797029", "title": "数组常用方法整理", "desc": "@TOC join() join，就是把数组转换成字符串，然后给他规定个连接字符，默认的是逗号( ，) 书写格式：join(\" \")，括号里面写字符串 (“要加引号”) 示例： push()和pop("}, {"id": "6998511428411850760", "title": "『面试的底气』—— 设计模式之职责链模式（二）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6998511058843336711", "title": "DOM编程", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 DOM编程 一切能够通过html操作的，也能够用js来实现，这个就是jsDOM编程的魅力。DOM操作其实很直观，我们直接看代码。 dom操"}, {"id": "7003976268865617927", "title": "Vue 源码 new Vue会发生什么？", "desc": "介绍   vue.js(简称Vue) 是一个用于创建用户界面的渐进式开源的JavaScript框架， 也是一个创建单页面应用的web应用框架, 通过组件化的形式可以创建页面，单个组件的结构层次非常清晰"}, {"id": "6992628864098762759", "title": "V8引擎的JavaScript内存机制", "desc": "对于前端攻城师来说，JS的内存机制不容忽视。如果想成为行业专家，或者打造高性能前端应用，那就必须要弄清楚JavaScript的内存机制了"}, {"id": "7002523015791509512", "title": "浅拷贝与深拷贝", "desc": "这篇文章讲解了浅拷贝和深拷贝是什么，不然我改了这个对象，等会要疑惑为什么这个对象被跟着更改了，哈哈哈。"}, {"id": "6855129007852093453", "title": "「一劳永逸」送你21道高频JavaScript手写面试题", "desc": "基本上面试的时候，经常会遇到手撕XXX之类的问题，这次准备梳理总结一遍，巩固我们原生JS基础的同时，下次想复习面试手撕题的时候，找起来方便，也节省时间。 梳理的顺序是随机的，不按照难以程度。 「节流throttle」，规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触…"}, {"id": "6981440373163819016", "title": "30道 js面试题助我冲刺“20k”，飒飒飒", "desc": "前言 我只想面个CV工程师，可是面试官偏偏让我挑战造火箭工程师，但再难苟且的生活还要继续，饭碗还是要继续找的。"}, {"id": "6934597434962247687", "title": "JavaScript高级程序设计（第四版）阅读笔记_第六章（持续更新...)", "desc": "到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAScript中常用的类型之一。虽然 Object 的实例没有多少功能，但很适合存储和在应用程序间交换数据。 显式地创建 Object 的实例有两种方式。第一种是使用 new 操作符和 Obje…"}, {"id": "6993099044788633608", "title": "了解JS中的包装对象 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 包装对象 有人说，JavaScript语言“一切皆是对象”，数组和函数本质上都是对象，就连三个原始类型的值（数值、字符串、布尔值），在一定条"}, {"id": "6977648266695409672", "title": "如何简单理解闭包（Closure）", "desc": "之前一直对闭包这个概念模模糊糊的，网上也是长篇大论，现在通过自己了解和学习，总结了一下一些闭包知识点，写得不对的地方可以指出，大家互相学习."}, {"id": "6973837402716504078", "title": "构建 Typescript 知识体系(十)-高级类型之条件类型", "desc": "这是我参与更文挑战的第十六天，活动详情查看:更文挑战 条件类型是什么 一种由条件表达式所决定的类型， 表现形式为 T extends U ? X : Y , 即如果类型 T 可以被赋值给类型 U，那么"}, {"id": "6844904062681350157", "title": "你不知道的 useRef", "desc": "首先, 我们要实现一个需求 -- 点击 button 的时候 input 设置焦点. 同样的, 我们可以使用 useRef 来实现完全相同的结果. 事实上, 只要你认真读一下官方文档, 就会发现, 它们两个确实不一样. 换句人话说 , useRef 在 react hook 中…"}, {"id": "6949129928507916325", "title": "Promise基础到手写(使用+构造)", "desc": "Promise简介Promise 最早出现是为了解决编程中的异步行为导致的回调地狱。在没有 Promise 之前，对于函数的异步行为，一般采用回调函数的方式，在一个函数调用结束触发回调函数，这样会导致"}, {"id": "6973934123576459278", "title": "原生JS实现表单验证", "desc": "这是系列文章《原生 JS 实现前端常见功能》的第一篇，通过一个小demo讲述如何通过原生 JS 实现表单验证的功能。"}, {"id": "6844903725354450952", "title": "前端构造桌面级应用（QQ音乐）", "desc": "1. 数据获取部分 2. 3. 项目注意事项 4. 项目优化点 nw.js也是一个使用前端技术（html、css、JavaScript）来构建pc端程序的一个框架。 nodebob是node-webkit的构建工具，可以在Windows环境中自动发布node-webkit应用…"}, {"id": "6949065269918564360", "title": "继承的那些事", "desc": "前言最近在学习继承的一些东西，写这篇文章也是为了让自己的学习更加贯彻一下吧！学习过程是通过 死磕36JS手写题这篇文章来学习的，所以有些代码可能应用了上面的，感兴趣的可以去看一下那篇文章！原型链继承先"}, {"id": "6972988019519275015", "title": "万物皆可Promise", "desc": "在2016年初识JS的时候就接触过Promise，那时候连异步和回调的概念还很模糊，但看到then这个词的时候我已经大概猜到了它的用处，可见Promise的设计非常好地顺应了我们的直觉，它的存在让JS"}, {"id": "6995168017818583071", "title": "JavaScript 基础（六）", "desc": "本文主要介绍了arhuments，以及在js中模拟后端的函数重载；IIFE的书写方式；使用IIFE解决比比闭包中的变量问题等"}, {"id": "6995142976787726344", "title": "javscript基础学习之history对象", "desc": "你可能经常在用BOM history对象,但是你对它真的了解吗? 本篇文章将问你详解history."}, {"id": "6999283169425883167", "title": "聊聊函数声明在块级作用域的表现形式", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 前言 先抛出两个问题： 你觉得会打印什么？ 公布答案，第一个打印123, 第二个打印函数a。 在块级作用域里函数声明 我们首先要知道，在非"}, {"id": "6844904192025329671", "title": "《你不知道的 WeakMap》番外篇", "desc": "原文主要复习了“JavaScript垃圾回收机制”，“Map/WeakMap区别”和“WeakMap 属性和方法”。这很好弥补被我忽视的知识点。 另外，我们可以通过原文，以相同方式再去学 Set/WeakSet，效果会更好，本文后面也会介绍到。 在开始介绍 WeakMap 之前…"}, {"id": "6844903681121484807", "title": "小程序 webview 应用实践（演讲内容整理）丨掘金开发者大会", "desc": "大家好，我是转转开放业务部前端负责人张所勇，今天主要来跟大家分享小程序 webview 方面的问题，但我并不会讲小程序的 webview 原理，而我主要想讲的是小程序内如何嵌入 H5。 那么好多同学会想了，不就是用 web-view 组件就可以嵌入了吗，是的，如果咱们的小程序和…"}, {"id": "6844903698909364238", "title": "分享一个高性能灵活的多页面Vue脚手架", "desc": "性能高，灵活。 效果就是 html 文件部署在自己服务器上，第三方资源就加载第三方的，其他的从七牛或阿里cdn上加载，充分的利用了浏览器缓存。下一次再创建项目的时候在 project 下创建个文件夹，马上就可以用。 遂推荐一波，希望能帮助到有需要的小伙伴。 可以创建多个单独项目…"}, {"id": "6991726665063890981", "title": "百度地图JavaScript API踩坑记录", "desc": "最近因为公司的WEB项目上需要使用到百度地图，花了几天时间熟悉API。在实现的过程中遇到了一些问题，官方文档和百度搜索未能解决。后面自己摸索出了解决方法（不是最佳的解决方案，仅供参考）。"}, {"id": "6844904017244454926", "title": "前端面试必会 | 一文读懂 JavaScript 中的闭包", "desc": "闭包是每个 JavaScript 程序员都应该知道并且掌握的基础概念。然而，这个概念使很多 JavaScript 新手感到困惑。 对闭包有适当的了解将有助于您编写更好，更有效和干净的代码。反过来，它将帮助您成为更好的 JavaScript 开发人员。 因此，在本文中，我将尝试解…"}, {"id": "6844903870116675597", "title": "POST 请求的三种常见数据提交格式", "desc": "本文所讲的 POST 请求是 HTTP/1.1 协议中规定的众多 HTTP 请求方法的其中最常用的一个。一般使用 POST 请求方法向服务器发送数据（主要是一些创建更新操作），本文讨论的是 POST 请求方法常用的四种数据提交格式。 由于 HTTP/1.1 协议中并没有对请求使…"}, {"id": "6844904082604294151", "title": "30分钟教你优雅的搭建nodejs开发环境及目录设计", "desc": "笔者最近在工作之余,一直在做数据可视化和nodejs方面的研究,虽然之前的web工作中接触过nodejs和可视化相关的内容,但是没有一个系统的总结和回顾,所以为了更深入的研究和复盘我的nodejs和数据可视化之路,笔者将会花两个月的时间,做一个彻底的复盘. 由上图可以看出,no…"}, {"id": "7002111539733872648", "title": "ESModule 系列 (一):  渐进式 Unbundled 开发工具探索之路", "desc": "得益于现代浏览器内置了模块处理系统(ESM), 业界新兴开发工具 Snowpack、WMR、Vite 等直接将模块解析加载过程直接交给浏览器， Dev Server 能够秒级启动。"}, {"id": "6893286451711049742", "title": "小蝌蚪传记：前端菜鸟让接口提速60%的优化技巧", "desc": "天秀老接口存在一个问题，我们每次请求1000条数据，返回的数组中，每一条数据都有上百个字段，其实我们前端只用到其中的10个字段而已。 如何从一百多个字段中，抽取任意n个字段，这就用到graphQL。 里面有两个女神的所有信息，包括女神的名字、手机、微信、身高、学校、备胎集合等信…"}, {"id": "6867715946941775885", "title": "落魄前端，整理给自己的前端知识体系复习大纲（上篇）", "desc": "转眼间9月的到来，十分感慨这时光的飞逝。9月对程序员有着十分重要的意义，想在这个优胜劣汰的代码世界活下去，金3银4，金9银10，都属于选择的机会。 在这优势略汰且经济回陇的状态下，笔者身处央企如今也开始考虑自己工作的问题，我们可以选择的只能是，逐步的打好自己的基础，才能在不安稳…"}, {"id": "6962949488646291486", "title": "听说前端面试手写”节流防抖“你不会？用动画带你秒懂！", "desc": "好久没出新文章了，听说大家爱看动画，那就来整一夜 节流和防抖 这是前端面试中比较常见的一个问题，可能会让你现场手写。节流和防抖都是用来控制某些函数的调用频率。举个例子，在窗口resize的时候，由于可"}, {"id": "6844904185847087111", "title": "css篇--100道近两万字帮你巩固css知识点", "desc": "继上一篇html篇之后，看到小伙伴留言说期待后面整理的CSS和JS篇，工具人小编整理出了本篇有关CSS部分的知识点。本篇文章作为对CSS知识点的统筹，囊括了目前大部分在面试当中常见的内容，包括一些易踩雷的知识点。文章篇幅较长，建议收藏慢慢细品。 文中篇概念性的内容也蛮多，小编一…"}, {"id": "7000512881527635998", "title": "requestAnimationFrame 到底解决的是什么问题?", "desc": "上次我们讲解了 setTimeout 和 setInterval，对其有了一些理解，requestAnimationFrame 又是什么？为什么会有 requestAnimationFrame 呢？"}, {"id": "6998902404242472968", "title": "几种常用设计模式的简单示例", "desc": "学习设计模式，不仅可以使我们用好这些成功的设计模式，更重要的是可以使我们深入理解面向对象的设计思想。"}, {"id": "6961790494514872333", "title": "JavaScript Debugger 原理揭秘", "desc": "debugger 的实现原理。ide 和 chrome devtools 如何实现调试功能的。本文带你深入探索 debugger 的原理。"}, {"id": "7002396627751141384", "title": "JavaScript 系列之函数和方法", "desc": "[JavaScript 系列之函数和方法｜ 8月更文挑战 ]连更 16 天，学会 JavaScript 基础。"}, {"id": "7000361250093793294", "title": "彻底掌握 Node.js 四大流，解决爆缓冲区的“背压”问题", "desc": "把一个东西从 A 搬到 B 该怎么搬呢？ 抬起来，移动到目的地，放下不就行了么。 那如果这个东西有一吨重呢？ 那就一部分一部分的搬。 其实 IO 也就是搬东西，包括网络的 IO、文件的 IO，如果数据"}, {"id": "6963637310382407694", "title": "推荐 12 个提升程序员软技能与效率的必备工具，爱了爱了 👍", "desc": "这一期的内容有点不一般哦，先来几个在线绘图类的工具吧。推荐 12 个提升程序员软技能与效率的必备工具。"}, {"id": "6991481858605678600", "title": "ZooTeam 前端周刊｜第 145 期", "desc": "这三年沉淀的前端错误监控系统，一篇文章讲透给你 使用Babel转换JavasCript代码 - 知乎 概述 · 语雀 今天聊：大厂如何用一道编程题考察候选人水平 逻辑编排在前端可视化搭建中的实践 狼叔"}, {"id": "7003690325457928199", "title": "时间戳格式化为正常时间 (年-月-日 时:分:秒)", "desc": "做项目的时候往往后台返回的时间数据不是我们想要的形式 如 (年-月-日 时:分:秒) 那要自己写代码来转换格式 下面代码可以快速格式化时间，建议收藏"}, {"id": "6987554310842220575", "title": "抖音超火的罗盘时钟效果", "desc": "实现效果 实现思路 将数字摆成圆环 获取当前时间，让圆环旋转一定的角度，转到水平位置 将当前时间变亮 实现过程 解析几个重要部分 搭建HTML框架 因为数字的量太大，采用js动态生成数字 js生成数字"}, {"id": "6844903968338870285", "title": "写给新手前端的各种文件上传攻略，从小图片到大文件断点续传", "desc": "今年国庆假期终于可以憋在家里了不用出门了，不用出去看后脑了，真的是一种享受。这么好的光阴怎么浪费，睡觉、吃饭、打豆豆这怎么可能（耍多了也烦），完全不符合我们程序员的作风，赶紧起来把文章写完。 这篇文章比较基础，在国庆期间的业余时间写的，这几天又完善了下，力求把更多的前端所涉及到…"}, {"id": "6990111360830930980", "title": "今天聊：如何使用 Electron 构建跨平台的桌面应用", "desc": "随着 HTML5 标准的制定，以及移动端设备技术的发展，前端工程师也可以更多的拥抱面向移动端场景的开发。也出现了像今天上午两位讲师所讲到的移动端领域 React Native 这样的跨平台技术方案。"}, {"id": "6844903670589423623", "title": "近两万字小程序攻略发布了", "desc": "OpenId 是一个用户对于一个小程序／公众号的标识，开发者可以通过这个标识识别出用户。 UnionId 是一个用户对于同主体微信小程序／公众号／APP的标识，开发者需要在微信开放平台下绑定相同账号的主体。开发者可通过UnionId，实现多个小程序、公众号、甚至APP 之间的数…"}, {"id": "6844903683411410951", "title": "前端常用插件、工具类库汇总，不要重复造轮子啦！！！", "desc": "在开发中，我们经常会将一些常用的代码块、功能块进行封装，为的是更好的复用。那么，被抽离出来独立完成功能，通过API或配置项和其他部分交互，便形成了插件。 下面这些是我在工作中积累的一些常用的前端开源插件，这里只是罗列出来，详细的用法各个插件官网或者Gayhub都有介绍。注意：往…"}, {"id": "6996434668908183566", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（四）", "desc": "感激相遇 你好 我是阿ken function 是声明函数的关键字，必须全部使用小写字母。当函数声明后，里面的代码不会执行，只有调用函数的时候才会执行。调用函数的语法为“函数名( )”函数的参数分为形"}, {"id": "6976431352912543758", "title": "如何让老项目的打包构建时间减少70%？", "desc": "Hello，大家好，我是小羽同学，一个平凡而又不甘于平凡的前端开发工程师。 今天的话，主要是想和大家聊聊小羽是怎么把一个react老项目的构建时间减少70%+的。"}, {"id": "6844903650007973901", "title": "js在微信、微博、QQ、Safari唤起App的解决方案", "desc": "最近在做微信、QQ、微博中使用js唤起App，之前也做过类似的功能，不过比较粗糙，考虑的情况不太全，而且那已经是很久之前的事情了，很多技术都已过时，现在有体验更好，功能更加完善的唤起技术，之前的很多的方案，到了现在都已是不太必要了，现在通过这篇文章分享给大家一个全面的、最新的唤…"}, {"id": "6844903934746689543", "title": "精读《前端深水区》", "desc": "其实关于前端深水区的讨论，已经有了很多，也有了很多相关的文章。我也想借这篇关于深水区的讨论文章，讲一下自己对于深水区的理解。 本期精读，@camsong、@arcthur、@ascoders 都有贡献观点。 原文对于深水区的想法，讲的很清楚，还是建议读者去读一下原文。 对比 2…"}, {"id": "6982382121692168223", "title": "js的防抖与节流", "desc": "前端业务与面试中经常遇到的节流与防抖问题的原理阶级以及实现方案，并通过demo演示防抖与节流的作用。"}, {"id": "6896714960257155080", "title": "javaScript 闭包", "desc": "闭包(Closure) 是JavaScript中的一个重要概念。它被广泛讨论，但仍然是一个混淆的概念。让我们来理解闭包是什么。 闭包意味着内部函数始终可以访问外部函数的变量和参数，即使外部函数已经返回。 我们可以在 JavaScript 中创建嵌套函数。内部函数可以访问外部函数…"}, {"id": "6844903686771048455", "title": "WebGL之3D地球", "desc": "看了饿了么小小倩老师的canvas作品，心血来潮，学着做了个3D地球，也算是入坑WebGL了吧。之前有用过原生的canvas画2D的图形，这次则是用了Three.js和stats.js的3D框架，边学边练手，效果还算比较满意...毕竟第一次接触WebGL 代码还有很多不足，求大…"}, {"id": "6923195463172620296", "title": "为什么需要在 JavaScript 中使用顶层 await？", "desc": "作为一门非常灵活和强大的语言，JavaScript 对现代 web 产生了深远的影响。它之所以能够在 web 开发中占据主导地位，其中一个主要原因就是频繁更新所带来的持续改进。 顶层 await（top-level await）是近年来提案中涉及的新特性。该特性可以让 ES 模…"}, {"id": "6844903934356635655", "title": "JS中，如何提高展开运算符的性能", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 本文主要讲解怎么提高展开运算的性能，在此之前先简单说说展开运算在数组中的工作原理。 展开运算符或三个点，接受一个数组数组或通常是可迭代的[... arrayOrIterable]并将数组元素分解，并使用这些分解…"}, {"id": "6844903824692346893", "title": "浏览器事件系统", "desc": "JavaScript与HTML之间的交互是通过事件实现的。事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。浏览器的事件系统相对比较复杂。尽管所有的主要浏览器已经实现了“DOM2级事件”，但这个规范本身并没有涵盖所有事件类型，随着DOM3级的出现，DOM事件API变得更加丰…"}, {"id": "6844903609675546631", "title": "拿Proxy可以做哪些有意思的事儿", "desc": "首先，我们要清楚，Proxy是什么意思，这个单词翻译过来，就是 代理。 可以理解为，有一个很火的明星，开通了一个微博账号，这个账号非常活跃，回复粉丝、到处点赞之类的，但可能并不是真的由本人在维护的。 而是在背后有一个其他人 or 团队来运营，我们就可以称他们为代理人，因为他们发…"}, {"id": "6966070431769952264", "title": "从 React 源码谈 v8 引擎对数组的内部处理", "desc": "前段时间在看 Lane(以前叫做 expirationTime) 相关的代码时, 被 v8 引擎的这个注释给吸引到了. 打开研究了一番, 发现创建数组的形式不同, v8 内部的处理也不同."}, {"id": "6972856304146579469", "title": "BOM", "desc": "1. BOM 概述 1.1. 什么是BOM BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。 BOM 由"}, {"id": "6844903842048376840", "title": "What's New in JavaScript", "desc": "前几天 Google IO 上 V8 团队为我们分享了《What's New in JavaScript》主题，分享的语速很慢推荐大家可以都去听听就当锻炼下听力了。看完之后我整理了一个文字版帮助大家快速了解分享内容，嘉宾主要是分享了以下几点： 开场就用 11x faster 数…"}, {"id": "6966122288777281544", "title": "ES6(10)Promise(异步编程的一种解决方案)", "desc": "特点 1、对象的状态不受外界影响。 有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败） 2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。 状态改变"}, {"id": "6844903680777388039", "title": "如何快速解决繁杂的国际化替换", "desc": "最近参与公司两个国外项目，项目需要对中文替换为葡语和英语，项目重要、时间紧张，正常开发完后需要对中文词条替换成一个方法。 但是查找和修改其中的错误也是一个极其痛苦的过程，人总是不满足于现在，希望可以更好。 同事用的方法是读取文件中的内容，然后根据正则匹配到中文片段，然后进行替换…"}, {"id": "6901099172410163207", "title": "编写可维护的JavaScript—重读红宝书系列", "desc": "随着Web开发的迅速发展，Web开发领域的最新技术和开发工具已经令人目不暇接。其中，JavaScript尤其成为了研究和关注的焦点。今天的应用程序的规模及复杂度变得日渐复杂。这些变化要求开发者把可维护能力放到重要位置上。正如更传统意义上的软件工程师一样，JavaScript开发…"}, {"id": "6844903929763856397", "title": "JS 继承的 六 种实现方式", "desc": "本篇是 JS系列中第 3 篇，文章主讲 JS 继承，包括原型链继承、构造函数继承、组合继承、寄生组合继承、原型式继承、 ES6 继承，以及 多继承与 new 。 可以在子类构造函数中，为子类实例增加实例属性。如果要新增原型属性和方法，则必须放在 SubType.prototyp…"}, {"id": "6992104817627922445", "title": "前后端通信方式的演变 ｜8月更文挑战", "desc": "一，依赖安装 安装 Axios 二，创建request.js 创建axios实例 拦截器处理 三，Axios 请求封装 四， 直接使用 axios 进行通信 两种调用方式： async/await 方"}, {"id": "6844903651488563213", "title": "[译] JavaScript中的“this”是什么？", "desc": "如果你曾使用JavaScript库做过开发，那么你可能已经注意到一个名为 this的特定关键字。虽然 this在JavaScript中非常常见，但是完全理解this关键字的原理以及在代码中如何使用对相当一部分的开发者来说着实不易。在这篇文章中，我将帮你深入理解 this及其工作…"}, {"id": "6844904021266808846", "title": "前端和前端联调的各种姿势，了解一下", "desc": "这个是比较传统的方法了。注意的是，addEventListener接收消息的时候，必须首先使用事件对象的origin和source属性来校验消息的发送者的身份，如果这里有差错，可能会导致跨站点脚本攻击。而且需要iframe的onload触发后才能使用postmessage 子页…"}, {"id": "6957940016785915918", "title": "工厂模式，构造器模式和原型模式", "desc": "工厂模式，构造函数模式（寄生构造函数模式，稳妥构造函数模式，作用域安全的构造函数模式），原型模式（动态原型模式）"}, {"id": "7000550364915171335", "title": "前端刷题路-Day92：和为K的子数组（题号560）", "desc": "给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。 示例1： 说明： 数组的长度为 [1, 20,000]。 数组中元素的范围..."}, {"id": "7005358208881524749", "title": "JavaScript原型的那些事", "desc": "终于搞懂Javascript原型，[[Prototyoe]]、__proto__、prototype它们之间的区别与联系。"}, {"id": "7000745383252983839", "title": "JS算法（二叉树的镜像、对称的二叉树、顺时针打印矩阵、包含min函数的栈）", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 二叉树的镜像 请完成一个函数，输入一个二叉树，该函数输出它的镜像。"}, {"id": "6844904169967452174", "title": "通俗易懂的Vue异步更新策略及 nextTick 原理", "desc": "最近在学习一些底层方面的知识。所以想做个系列尝试去聊聊这些比较复杂又很重要的知识点。学习就好比是座大山，只有自己去登山，才能看到不一样的风景，体会更加深刻。今天我们就来聊聊Vue中比较重要的异步更新策略及 nextTick 原理。 这段代码很简单，相信很多人都会说yes。当然也…"}, {"id": "6902942813097459720", "title": "「高频面试题」女友：消息队列 和 事件循环系统终于弄明白了！（内附思维导图）", "desc": "接上一期「数组方法」写给女友的一系列 JS 数组操作（建议收藏 | 内附思维导图） 文章发出去之后，有些小伙伴还真发给自己女友了，不知道“感动”了没有哈（手动滑稽）。 那么，这次女友直接说明白了，那么我就从“头”开始讲讲事件循环系统，通过一篇文章搞定这一块知识点。 关于消息队列…"}, {"id": "6998902500061347871", "title": "同源策略以及跨域、预检请求", "desc": "同源策略 ajax同源策略: 不同源页面不能获取cookie； 不同源页面不能发起Ajax请求 dom同源策略： 它限制了不同源页面不能获取DOM 解决方案 预检请求 在简单请求必须满足两个条件： 使"}, {"id": "6978251713039826958", "title": "今天学：Koa 起服务搬砖语雀 API，偷懒建博客", "desc": "不想自己搭建数据库和后台编辑管理功能，如果把[语雀]当做是一个云数据库呢，有没有偷巧的办法？我们今天试着利用语雀 API 开放平台的能力，把我们在语雀上写的文章，拉到我们的本地存起来"}, {"id": "7002257714394955783", "title": "防抖和节流的区别和用法", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：“8月更文挑战“ 一.区别 防抖 防抖的主要作用时为了防止在少量时间内，每一次相同的行为都执行事情，即防止无意的抖动行为，其主要的特点是在一个相同连续的行"}, {"id": "6932718420488093709", "title": "vscode插件实战—好用的项目命令辅助工具来了", "desc": "为什么会开发这个插件呢？原因是: 在项目组中，每个人对于启动命令、打包命令等各有各自的“规范”，到底叫 npm run dev 还是叫 npm run start 才是合理？在跨项目之间切换，常常要去阅读 README.md 文档，甚至于无文档的情况下，需要去查看 packag…"}, {"id": "6844904191425511432", "title": "为了性能选择for循环遍历？", "desc": "我是遍历界最早出现的一方诸侯，在座的各位需称我一声爷爷。我能满足开发人员的绝大多数的需求。 我是ES5版本发布的。按升序为数组中含有效值的每一项执行一次 callback 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。我是 for 循环的加强版。 我也是ES5版…"}, {"id": "6844903630592540686", "title": "你不知道的js中关于this绑定机制的解析[看完还不懂算我输]", "desc": "最近正在看《你不知道的JavaScript》，里面关于this绑定机制的部分讲的特别好，很清晰，这部分对我们js的使用也是相当关键的，并且这也是一个面试的高频考点，所以整理一篇文章分享一下这部分的内容，相信看本文的解析，你一定会有所收获的，如果喜欢的话可以点波赞/关注，支持一下…"}, {"id": "6955872267951669255", "title": "【知识梳理】JS 数组 API 再记", "desc": "1. 起因 上篇文章提到，由于业务上使用频率的原因，导致自己对数组的某些 api 不甚了解，在我搞清楚了 slice 、splice、reduce 后，信心满满，自以为已经数组大成了，当时的聊天记录足"}, {"id": "6982356317318938631", "title": "TypeScript 进阶指南详解", "desc": "1.类型守卫 类型守卫的作用在于触发类型缩小。实际上，它还可以用来区分类型集合中的不同成员。 如何区分联合类型 常用的类型守卫包括switch、字面量恒等、typeof、instanceof、in 和"}, {"id": "6992390946381905934", "title": "如何端好自己的铁饭碗之系列一", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 网上常说程序员是吃青春饭的，996 007 层出不穷，越来越内卷了，长江后浪推前浪，越来越多的人加入到了互联网大军。那么怎样才能避免内卷呢？"}, {"id": "6844903925741682696", "title": "JS中实现页面跳转和刷新方法总结", "desc": "如果用window.location.replace(\"http://www.baidu.com\") 实现跳转页面, 它和上面方法的区别在于它跳转后不会保存跳出页面的信息. 它的效果类似于在网页上点击右键, 在新窗口打开或新标签页打开. 而 window.location.hr…"}, {"id": "6854573212136079373", "title": "ES11来了，不进来看看嘛", "desc": "ES2020 （ES11）是 ECMAScript 对应 2020 年的版本。这个版本不像 ES6 (ES2015)那样包含大量新特性。但也添加了许多有趣且有用的特性。本文以简单的代码示例来介绍 ES2020新特性。这样，你可以很快理解这些新功能，而不需要多么复杂的解释，好了，…"}, {"id": "6991866878310219790", "title": "JavaScript之面向对象的理解 | 8月更文挑战", "desc": "对象到底是什么，我们可以从两次层次来理解。 (1) 对象是单个事物的抽象。 一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实 物被抽象成对象，实物之"}, {"id": "6844904004946771982", "title": "隐藏实力的 JSON.stringify，原来还可以这么用！", "desc": "JavaScript 有许多各司其职的函数。我们每天都在用，但不知道他们的额外功能。直到有一天看了文档之后才发现，它们原来有许多超出我们想象的功能。JSON.stringify 就是其中一个。今天我们就来聊聊这个隐藏实力的选手。 JSON.stringify 方法接受一个参数并…"}, {"id": "6987305781834022949", "title": "Webpack 热更新原理", "desc": "用过 webpack 的同学应该都知道，有一个特别好用的『热更新』，在不刷新页面的情况下，就能将代码推到浏览器。 今天的文章将会探寻一下 webpack 热更新的秘密。"}, {"id": "6996496135309230116", "title": "前端刷题路-Day81：单词拆分（题号139）", "desc": "给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词..."}, {"id": "6844903639417356302", "title": "13 个示例快速入门 JS 抽象语法树", "desc": "Javascript 代码的解析（Parse ）步骤分为两个阶段：词法分析（Lexical Analysis）和 语法分析（Syntactic Analysis）。这个步骤接收代码并输出 抽象语法树，亦称 AST。 随着 Babel 的生态越来越完善，我们通常会使用 Babel…"}, {"id": "6995858022966755341", "title": "JS中的Date类", "desc": "Date类是JavaScript处理日期和时间的API。使用Date()构造函数创建一个Date对象。"}, {"id": "6844903721080471560", "title": "前端猎奇系列之探索Python来反补JavaScript——上篇", "desc": "人生苦短，我用 JavaScript。 然鹅，其他圈子里还流行这样一句话：人生苦短，我用 Python。 当然还有什么完美秀发编程，这就不提了。当你在前端学到一定地步的时候，你会有种想出去看一看的冲动，翻过这座山，去山的外面，看看外面的风景。虽然外面的风景也就那样，但是还是忍不…"}, {"id": "6942280756353826823", "title": "JavaScript设计模式之行为型模式（下）", "desc": "解决：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。 方式：使用面向对象技术，将这种依赖关系弱化。 场景：拍卖，拍卖师观…"}, {"id": "6844903648162496526", "title": "最近很火爆的透明广告在pc上的实现，解读你没用过的透明度。", "desc": "前言：不知道前段时间很火爆的背景透明广告你是否注意过，当时我第一次发现时就感到很新颖，理所当然广告效果很不错，不过当时是在手机上无聊刷新闻看见的，目前在pc上我还没有见过，或许有，或许没有，但我觉得我有必要将它分享出来。 怎么样，觉得效果还不错的继续往下看。 那么，我们怎么做这…"}, {"id": "6844904122387283981", "title": "Concent 2.4发布, 最小粒度观察与渲染组件单元", "desc": "在阅读mobx文档时，为了适配最新的函数组件，除了暴露一个api名为useObserver，还发现暴露了另外一个比较有意思的组件Observer，支持更精细的控制渲染单元，大概用起来的姿势是这样的。 如果我们需要进一步切割渲染范围，改变了哪个属性的值就仅渲染与这个属性相关的视图…"}, {"id": "6992009221261197320", "title": "JavaScript的instanceof理解", "desc": "​  JavaScript中变量的类型判断常常使用typeof运算符，但使用typeof时存在一个缺陷，就是判断引用类型存储值时，无论引用的是什么类型的对象，它都返回“object”。"}, {"id": "6844903905101348871", "title": "【蜕变】搭建史上真正没有注水的VueUI库Nature-UI，包含18个复杂组件", "desc": "如果你写过一个UI库(当然我指的不是只有只有一个button组件的库,之前看很多文章,标题是搭建了vueUi库,进去后发现只有一个button, my god!!!),这意味着你对,computed,watch,prop,slot,@slots,$scopedSlots,mix…"}, {"id": "6844904008604188680", "title": "一起console.log()引发的血案", "desc": "看上述结果：如果直接打印timing对象，可以拿到domContentLoadedEventStart的值，而经过JSON.stringify或者打印的是timing.domContentLoadedEventStart，值都不对。 难道是在这个三个console.log()执…"}, {"id": "6844903602276827144", "title": "如何理解虚拟DOM?", "desc": "本文会在教你怎么用 300~400 行代码实现一个基本的 Virtual DOM 算法，并且尝试尽量把 Virtual DOM 的算法思路阐述清楚。希望在阅读本文后，能让你深入理解 Virtual DOM 算法，给你现有前端的编程提供一些新的思考。"}, {"id": "6969774745977880583", "title": "再读《编写可维护的JavaScript》", "desc": "最近闲来无事，翻了翻放在书架上吃灰的书籍，有些书之前已经看了几遍，但仍然具有再次阅读的价值，而这两天重新阅读了一番《编写可维护的JavaScript》，这本书的核心内容是从前端工程师的角度出发展示的最"}, {"id": "6844903701685993485", "title": "ES5和ES6及继承机制", "desc": "这几天在学习react的时候学习到ES6的 class extends 继承方式，就复习一下ES5的继承机制，并整理下来。 也就是说A.prototype是A的原型对象，A是构造函数，B是A的实例，原型对象（A.prototype）是 构造函数（A）的一个实例。而此时this指…"}, {"id": "6978307821502726157", "title": "JavaScript-防抖、节流", "desc": "1 防抖 1.1 定义 1.2 使用场景 防抖前：触发onmousemove事件 防抖后：触发onmousemove事件 1.3 代码实现 2 节流 1.1 定义 1.2 使用场景 节流： 1.3 代"}, {"id": "6988489193215229982", "title": "vue3 diff  中的 【最长递增子系列】", "desc": "vue3 diff 最长递增子系列，vue3 diff 主要使用最长递增子系列来优化节点的移动 最长递增子系列（求长度）"}, {"id": "6844903568823042055", "title": "JavaScript中的图片处理与合成(一)", "desc": "图片处理现在已经成为了我们生活中的刚需，想必大家也经常有这方面的需求。实际前端业务中，也经常会有很多的项目需要用到图片加工和处理。由于过去一段时间公司的业务需求，让我在这方面积累了一些干货，趁着年后这段时间总结成一系列文章与大家分享，希望能对各位努力中的前端童鞋带来启发和帮助~…"}, {"id": "6844903998097457165", "title": "【前端新手也能做大项目】：跟我一起，从零打造一个属于自己的在线Visio项目实战【ReactJS + UmiJS + DvaJS】（二）", "desc": "本系列教程是教大家如何根据开源js绘图库，打造一个属于自己的在线绘图软件。当然，也可以看着是这个绘图库的开发教程。如果你觉得好，欢迎点个赞，让我们更有动力去做好！ 本系列教程重点介绍如何开发自己的绘图软件，因此，react基础和框架不在此介绍。可以推荐react官网学习，或《R…"}, {"id": "6844903895089545230", "title": "那些你不经意间使用的设计模式(一) - 创建型模式", "desc": "在很长的一段时间里，我只能记住某几种设计模式，并没有很好的应用。 索性我们就以该图为大纲，讲讲那些我们不经意间使用的设计模式 --- 创建型。 1. 三种工厂模式：Factory Pattern 简单工厂模式，用来创建某一种产品对象的实例，用来创建单一对象。 工厂方法模式，将创…"}, {"id": "6844903582668423175", "title": "[译] 关于 CSS 变量，你需要了解的一切", "desc": "本文是我新写的电子书的第一章（电子书目前已支持 pdf 和 mobi 格式下载）。 大多数编程语言都支持变量。然而遗憾的是，CSS 从一开始就缺乏对原生变量的支持。 你写 CSS 吗？如果写的话你就知道是没法使用变量的。当然了，除非你使用像 Sass 这样的预处理器。 像 Sa…"}, {"id": "6893456594042880008", "title": "mvvm数据响应实现", "desc": "当前vue、react等框架流行。无论是vue、还是react框架大家最初的设计思路都是类似的。都是以数据驱动视图，数据优先。希望能够通过框架减少开发人员直接操作节点，让开发人员能够把更多的精力放在业务上而不是过多的放在操作节点上。另一方面，框架会通过虚拟dom及diff算法提…"}, {"id": "6844904082683985934", "title": "for of 的原理解析", "desc": "for...of 是ES6引入用来遍历所有数据结构的统一方法。 这里的所有数据结构只指具有iterator接口的数据。一个数据只要部署了 Symbol.iterator，就具有了 iterator接口，就可以使用 for...of 循环遍历它的成员。也就是说，for...of循…"}, {"id": "6844903982675001351", "title": "[技术翻译]9个可以让你在2020年成为前端专家的项目", "desc": "无论您是编程新手还是经验丰富的开发人员。在互联网这个行业中，必须不断学习新的概念和语言/框架以跟上快速变化的步伐。以React为例 - 4年前由Facebook开源，它现在已经成为全球JavaScript开发人员的首选。Vue和Angular当然也有其相应的追捧者。然后是Sve…"}, {"id": "6844904006460899335", "title": "5行代码带你实现一个js的打字效果", "desc": "有次看电影🎬， 看到屏幕上一个个的文字蹦出来， 感觉像是有人在打字一样， 觉得挺有意思， 于是这里也用js实现了一个。 通过setTimeout设置一个时间的间隔， 每隔一定时间向dom中插入对应的数据， 并将index加1， 然后重新调用这个写函数。 通过css3的anim…"}, {"id": "6844903538175262734", "title": "JavaScript 数组遍历方法的对比", "desc": "这是标准for循环的写法也是最传统的语句，字符串也支持，定义一个变量i作为索引，以跟踪访问的位置，len是数组的长度，条件就是i不能超过len。 forEach 方法对数组的每个元素执行一次提供的CALLBACK函数,forEach是一个数组方法，可以用来把一个函数套用在一个数…"}, {"id": "7004671830527049765", "title": "红宝书笔记——JavaScript DOM", "desc": "Node类型 1.nodeType属性：为了确保跨浏览器兼容，最好要将这个属性与数字值进行比较： 2.nodeName和nodeValue属性： 最好先判断是不是一个元素，再来取得并保存nodeNam"}, {"id": "6998345682679513124", "title": "清楚了，为什么 null 和 undefined 的区别以及如何使用他们", "desc": "虽然 undefined 和 null 看似相同，其实还是有着很大区别，今天我们深入探究他们差异性。以及如何在实际中使用 undefined 和 null"}, {"id": "6844904185121488910", "title": "前端也要懂物理 —— 惯性滚动篇", "desc": "我们在平时编程开发时，除了需要关注技术实现、算法、代码效率等因素之外，更要把所学到的学科知识（如物理学、理论数学等等）灵活应用，毕竟理论和实践相辅相成、密不可分，这无论是对于我们的方案选型、还是技术实践理解都有非常大的帮助。今天就让我们一起来回顾中学物理知识，并灵活运用到惯性滚…"}, {"id": "6994318311974502436", "title": "手把手教你用TypeScript封装window.localstorage", "desc": "手把手教你使用 TypeScript 来对原生的window.localstorage 进一步的封装，新增多种api接口，并打包部署到npm。"}, {"id": "7005521578796515341", "title": "ES6语法知识", "desc": "声明（let和const） let 声明的就是变量，变量一旦初始化之后，还可以重新赋值 const声明的就是常量，常量一旦初始化，就不能重新赋值了，否则就会报错 注意事项 使用 const 声明常量，"}, {"id": "6844903988945485837", "title": "JavaScript 中的位运算和权限设计", "desc": "1. 内容概要 2. JavaScript 位运算 2.1. Number 在讲位运算之前，首先简单看下 JavaScript 中的 Number，下文需要用到。 也就是说一个数字的范围只能在 -(2^53 -1) 至 2^53 -1 之间。 好了，Number 就说这么多，接…"}, {"id": "7001084200803631112", "title": "聊聊JSON与XML的各自优缺点", "desc": "JSON已成web数据传输的首要选择，今天就来谈谈XML与JSON，包括两者的相同点与共同点，以及优缺点。"}, {"id": "6993644668755902471", "title": "JavaScript 开发人员应该理解的 this", "desc": "当然 this 不止于此，在函数内部的引用可以绑定到不同的对象，这得取决于函数是从哪里被调用。this 问题和变量函数提升是前端面试常见的问题"}, {"id": "6972819525179801608", "title": "Set与Map，它们你都了解吗？", "desc": "这是我参与更文挑战的第12天，活动详情查看： 更文挑战 ! 👽 概论 提起JS中的数据类型，相信大家很容易就能联想到Number、String、Boolean、Object等等；没错，以上都属于JS中"}, {"id": "6950307682737717261", "title": "手写JS！各种姿势解数组去重和数组扁平化", "desc": "前言在JS的手写面试题中，关于数组的有很多，下面就来各种姿势解数组去重和扁平化吧。数组去重数组去重在面试中是一道基础题，但仍然可以在其中挖掘许多js知识。ES6 最常用Set 去重双重for循环外层循"}, {"id": "7006841646738309127", "title": "JS数组中的常用方法", "desc": "1.reduce （1）reduce的使用方法：reduce(func,first) func是一个函数，会传入四个参数，function(prev,cur,index,arr) prev是上一次迭代"}, {"id": "6989522649432981535", "title": "长列表优化之 --「虚拟滚动」", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 前言 对于前端页面来说，用户体验永远是排在第一位的，只有用户体验提升了，别人才会愿意去使用、去推荐你的产品。而 长"}, {"id": "7006841478261506061", "title": "JS判断一个字符串中是否包含另一个字符串的方法", "desc": "1.String对象的方法 indexOf()方法 传入一个字符串，匹配不上返回-1，匹配上了返回字串首次出现的位置. search()方法 search() 方法用于检索字符串中指定的子字符串，或检"}, {"id": "7006855939575775239", "title": "JavaScript常见的内存泄漏", "desc": "一.什么是内存泄漏 当应用程序不再需要的内存，由于某种原因未返回给操作系统或者空闲内存，这将会导致程序变慢、卡顿、高延迟 二.内存泄漏的主要原因 JavaScript内存泄漏的主要原因在于一些不再需要"}, {"id": "6979926105608175652", "title": "Vue3 + Vite2 项目实战复盘总结", "desc": "内容概要 背景 vue3 项目开发 get 到的知识 让我惊讶的 vite 项目中遇到的困难 总结 项目技术栈 资料推荐 背景 有一个新项目启动，移动端项目兼容安卓 6+，没有历史包袱，技术选型可以自"}, {"id": "6844903989088092174", "title": "轻松理解JS 原型原型链", "desc": "理解js中原型、原型链这个概念，绝对是帮助我们更深入学习js的必要一步，比如，如果js开发者想理解js继承，new关键字原理，甚至封装组件、优化代码，弄明白js中原型、原型链更是前提条件。本篇文章，用最简洁的文字，清楚明白讲解原型链相等关系和原型、原型链存在的意义，看完这篇文章…"}, {"id": "7005111376218128397", "title": "黑马程序员JavaScript核心教程，前端基础教程，JS必会的DOM BOM操作", "desc": "1.Web APIs简历导读 目标 能够说出 Web APIs 阶段与JavaScript 语法阶段的关联性 能够说出什么是API 能够说出什么是Web API Web APIs 和 JS 基础关联性"}, {"id": "6844903840811057160", "title": "美少女秃头思考：react服务端渲染", "desc": "富婆来报道，今天想问题想不出来，随手抓了一下头发，没想到啊没想到，我那浓（mei）密(sheng)茂(ji)盛(gen)的秀发又少了好几根，一定要改掉这个想不出来问题就揪头发的坏习惯。你们遇到问题想不出来都会有啥奇特的习惯呢？ 想象一下妙龄美少女长发飘飘变成三毛的形象（科普：女…"}, {"id": "6883719958337945607", "title": "同页面 Storage 变化监听", "desc": "最近做业务的时候遇到一个需求，页面分为多个步骤，每个步骤展示的内容都不相同。 其实拿到这种需求，适用主流的 react / vue 框架来做都是非常容易且不回遇到任何坑的。 但是由于团队技术选择、项目搭建平台、功能复用等方面的原因，并不能简单的通过框架来实现。 我首先想到的是通…"}, {"id": "6979808426951966756", "title": "javascript面向对象（一）", "desc": "对象 2.类：把功能相似的代码归为一个类，当需要使用该功能时，通过类来生成相应的功能对象 工厂模式 new运算符 原型、原型链 原型与原型链图片： ==原型：== ==原型链== 本文为博主原创文章，"}, {"id": "6971822364329771021", "title": "react-draggable 是怎样实现拖拽功能的", "desc": "react-draggable 是一个自由度非常高的 React 拖拽组件，这篇文章将重点介绍源码中拖拽功能的实现。"}, {"id": "6844903887812444173", "title": "[译] 微前端：未来前端开发的新趋势 — 第三部分", "desc": "做好前端开发不是件容易的事情，而比这更难的是扩展前端开发规模以便于多个团队可以同时开发一个大型且复杂的产品。本系列文章将描述一种趋势，可以将大型的前端项目分解成许多个小而易于管理的部分，也将讨论这种体系结构如何提高前端代码团队工作的有效性和效率。除了讨论各种好处和代价之外，我们…"}, {"id": "6844903718148636686", "title": "10分钟快速进阶rollup.js", "desc": "上一篇教程中，为大家介绍了rollup.js的入门技巧，没有读过的小伙伴可以点击这里，本次我们将继续对rollup.js的进阶技巧进行探讨，想直接看结论的小伙伴可以直接看最后一章。 rollup.js的插件采用可拔插设计，它帮助我们增强了rollup.js的基础功能，下面我将重…"}, {"id": "6927101658094649357", "title": "手把手教你在局域网内部署前端vue+后端php的网站服务", "desc": "在开发阶段，用的是VScode编辑器。 在创建了vue-cli脚手架后，开始开工。 测通接口后，当给后端传参，后端没收到参数。 作者采用的是这种方式，让后端改。 不填请求IP，就写相对路径，如下图。"}, {"id": "6903441738547855374", "title": "async/await一些不知道的事情", "desc": "async顾名思义，就是将一个普通函数声明为异步函数，此函数不管有没有返回值，总会返回一个promise对象，所以你可以像普通函数一样去调用await顾名思义就是等待，具体等待什么，就是等待右侧执行的"}, {"id": "6955461121234960421", "title": "使用 Next.js 创建 React 同构应用", "desc": "使用场景 必须使用打包程序（例如 webpack）打包代码，并使用 Babel 等编译器进行代码转换。 你需要针对生产环境进行优化，例如代码拆分。 你可能需要对一些页面进行预先渲染以提高页面性能和 S"}, {"id": "6844903872998162446", "title": "Web Worker 使用场景", "desc": "我们都知道js是单线程模型。也就是说一次只能处理一件事情，前面的事情没有完毕，后面的事情要等待前面的事情处理完毕后才能执行。随着多核CPU的出现，我们可以最大限度的利用cpu多核，来提高js的性能。 Worker接口可以创建后台任务。即可以给js运行新增线程。用于处理一些耗时、…"}, {"id": "7000661843194839070", "title": "js之定时器使用", "desc": "定时器的常见方法 setInterval()：循环调用。将一段代码，每隔一段时间执行一次。（循环执行） setTimeout()：延时调用。将一段代码，等待一段时间之后再执行。（只执行一次） 备注：在"}, {"id": "6844903941021384711", "title": "图解javascript的this指向", "desc": "本文永久有效链接: https://github.com/AttemptWeb...... 开局两张图，以后再也不用担心this的指向问题😂😂。以下就只有两张图，请放心食用！！"}, {"id": "6844903907584376839", "title": "17道题彻底理解 JavaScript 中的类型转换", "desc": "类型转换是将值从一种类型转换为另一种类型的过程（比如字符串转数字，对象转布尔值等）。任何类型不论是原始类型还是对象类型都可以进行类型转换，JavaScript 的原始类型有：number, string, boolean, null, undefined, Symbol。 本文…"}, {"id": "6980357552039002148", "title": "小白学习节流和防抖", "desc": "前言 在前端开发中，常常会遇到事件频繁调用的情况，这样会浪费性能资源。比如，在进行input框输入时，监听输入会导致监听事件地频繁调用，其实我们只需要最后一次的输入结果。又或者页面滚动事件的监听，当滚"}, {"id": "6958700362660315149", "title": "前端监控之接口统计", "desc": "一、意义：   接口的成功率直接影响用户的转化率，像用户注册、支付、提交信息等接口如果异常的话，后果是很严重的。线上会因为各种情况，是在开发和测试阶段是不能解决的，所以监控线上接口状态是很必要的。 二"}, {"id": "6844903925775237127", "title": "JS数组方法总结", "desc": "因为自己有时会忘记某个JS数组操作的方法，因此就对其进行总结，可以时常回顾。 拓展运算符..."}, {"id": "6996636611966418957", "title": "【JavaScript】15. 浅析Ajax", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 关于Ajax，本篇文章主要介绍JavaScript中的Ajax的相关概念"}, {"id": "6944927122540462088", "title": "null 与 undefined 区别", "desc": "大多是计算机语言只有个表示‘无’的值，但是js 有两个 null 和 undefined, 两种数据类型很像，而且相等运算符上两者相等，所以感觉两种数据类型都是一个东西么，那么到底有什么区别呢1.nu"}, {"id": "6844903648510607373", "title": "Hybrid App技术解析 -- 实战篇", "desc": "上一篇原理篇，我们已经详细地阐述了 Hybrid App 的基础原理，了解了 Native端 和 H5端 是如何通信的，还有 bridge 的设计和接入。而本篇文章将开始把这些原因进一步实践，用代码真正地去实现一套完整且稳定的 Hybrid 方案。如果对原理还有疑问的小伙伴，请…"}, {"id": "6998935340564086815", "title": "JavaScript语言基础（八）期约[ES6新增]与异步函数 ", "desc": "ES6新增Promise（期约）引用类型，支持优雅地定义和组织异步逻辑。async和await关键字定义异步函数的机制。异步函数可以暂停执行，而不阻塞主线程。"}, {"id": "7004756737941045278", "title": "开发中遇到的小毛病(1)", "desc": "使用正则发现的一个小问题 先上代码 以上代码为一段简单正则验证，验证目标字符串是否包含abc，那为什么连续两次相同的验证却得到不一样的结果呢 导致此问题的重点在于lastIndex属性"}, {"id": "6844904170764369934", "title": "因为一个跨域请求，我差点丢了饭碗", "desc": "我叫小风，是Windows帝国一个普通的上班族。 今天，我入职了一家浏览器公司，公司的主营业务是为人类提供Internet上网服务，我的岗位是负责执行JavaScript代码。 上午的晨会上，认识了负责网络连接的老白，所有网络请求都得找他帮忙，还有负责存储管理的小黑，什么Coo…"}, {"id": "7004341416583266311", "title": "Javascript异步编程的方法", "desc": "你可能知道，Javascript语言的执行环境是\"单线程\"（single thread）。 所谓\"单线程\"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务"}, {"id": "7000323252086128677", "title": "vue3新特性代码详解 上篇", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 模块化开发 第一部分 鼠标追踪器 vue3 这种实现方式的优点 第一：它可以清楚的知道 xy 这两个值的来源，这两个参数是干什么的，他们来"}, {"id": "6994218985097003015", "title": "🚀详解JavaScript系列之数组(九)", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前言 map()方法 作用：对数组中的每一项进行加工。返回一个加工后的新数组。对数组中每一项运行回调函数，返回该函数的结果，组成的新数组（返"}, {"id": "6995366083305685022", "title": "vue动态路由实现", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 通常我们在vue项目中都是前端配置好路由的，但在一些项目中我们可能会遇到权限控制，这样我们就涉及到动态路由的设置了。 动态路由设置一般有两"}, {"id": "6997699490064891912", "title": "浅谈 Typescript（三）：两个空间的交流", "desc": "上一篇我们了解了 TS 在「类型声明空间」的行为，那「类型声明空间」的产物是如何约束「变量声明空间」的，「变量声明空间」又能为「类型声明空间」提供哪些信息呢？这就是本篇要讨论的——两个空间的交流。"}, {"id": "6960566171351384072", "title": "浅谈前端程序员的学习", "desc": "在前端行业已经呆了快6年了，中间也摸鱼了几年，呆在舒适区浪费了大把的光阴。毕竟也不短时间了，根据个人感受与经历，在这里总结下前端程序员对于技术一个大体的学习方向。 一点愚见，如有不对，欢迎指出！"}, {"id": "7003507230481842213", "title": "「每日一题」最小K个数", "desc": "1. 题目描述 设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。 示例： 2. 解答 1. 排序 2. 堆排序 😄最近新创建了个开源仓库，总结LeetCode的每日一题，目前已有C+"}, {"id": "6993463641454411789", "title": "ECMAScript 的原始值包装类型——Boolean讲解", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 ECMAScript 提供了 3 中特殊的引用类型：Boolean、Number和String，方便操作原始值。我们先来看一个例子： 这里创"}, {"id": "6996963038276354085", "title": "JS ｜ 节流防抖", "desc": "函数防抖：一个频繁触发的函数，在规定时间内，只让函数最后一次触发 例如： - 用户输入搜索框 避免每次敲击键盘都发送请求 - 登录、发短信等按钮避免用户点击太"}, {"id": "6997216237595934728", "title": "你应该自己实现一个 watch 看不懂找我", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 vue watch 是一个非常值得借鉴的一个功能点，在你写插件或者写小demo的时候用上就非常漂亮了， 能提升你的编码速度 watch 咱们"}, {"id": "7002129153298268167", "title": "深度剖析Javascript的柯里化机制", "desc": "这是我参与 8 月更文挑战的第 30 天，活动详情查看： 8月更文挑战 前言 从一道面试题说起 我们来看下这道面试题： 要求该函数的返回结果为5，简单，我们来实现下代码： 完美实现，这时候，题目需要加"}, {"id": "6974301728426426399", "title": "XDM，JS如何函数式编程？看这就够了！（四）", "desc": "不知不觉，我们已经来到了《JS如何函数式编程》系列的【第四篇】。本篇会将这个蓝图再具象一下，谈谈函数编程中一个很重要的细节 —— “副作用”！"}, {"id": "6988854915216965645", "title": "潮流前端周刊（第39期）- 红色标语", "desc": "封面图摄于乌鲁木齐红山公园，那天阳光很大，红字超级清晰，对于开发工程师而言，你的初心是啥？ 前端技术 高频Linux命令大总结，可以记住 https://segmentfault.com/a/1190"}, {"id": "6844904137495150599", "title": "一年半经验前端社招7家大厂&独角兽全过经历  | 掘金技术征文", "desc": "这次近3个星期，面了7家（拼多多、虾皮、作业帮、猿辅导、商汤科技、快手），全都是线上视频面试的，一般是晚上回家面试或者周末。过程还是挺顺利的，全都过了。时间很紧凑，几乎没什么时间准备和复盘，一环接着一环的，所以就全部凑到一起一次性总结了 pdd用的是他们自己家的面试系统，该有的…"}, {"id": "6995517280461258783", "title": "理解异步", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 什么是同步 我们都要知道JavaScript是单线程时间循环模型，同步就相当于一条流水线，比如加工产品，我们得先采购原材料，再运输到加工厂"}, {"id": "6934155066198720519", "title": "越来越火的网络请求Fetch和Axios到底有什么区别", "desc": "在这几天由于编写脚本等一系列原因，不知怎么的突然发现现在很多主流的网站已经大量开始使用Fetch进行网络请求，感觉再不学习Fetch就要Out了，所以我花了一些时间专门去研究了一下关于Fetch的相关知识，发现Fetch被讨论的并不多，很多都是一年前甚至两年前的文章，大多数文章…"}, {"id": "6844903715669999629", "title": "一年半经验，百度、有赞、阿里前端面试总结", "desc": "人家都说，前端需要每年定期出来面面试，衡量一下自己当前的技术水平以及价值，本人17年7月份，毕业到现在都没出来试过，也没很想换工作，就出来试试，看看自己水平咋样。 以下为我现场面试时候的一些回答，部分因人而异的问题我就不回答了，回答的都为参考答案，也有部分错误的地方或者不好的地…"}, {"id": "6979159332961124366", "title": "年少还是不要遇见太惊艳的人了，误终生。", "desc": "故事更新了更新了！这次内容依然是技术文，小说对话式内容依然有趣。让你更深刻的了解天猫精选首页的滚屏效果的实现原理。"}, {"id": "6998443382783606815", "title": "var、let、const 的区别｜ 8月更文挑战", "desc": "“这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战” 变量的命名有多种方式，今天我们就来聊一聊在 JavaScript 中的 六种 命名方式。 var 我想，陪伴着我们最常时间的，应该就是使"}, {"id": "6844903879943913485", "title": "13 个 npm 快速开发技巧", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 每天，数以百万计的开发人员使用 npm 或 yarn 来构建项目。运行npm init或npx create- response -app等命令几乎构建JS项目的首选方式，无论是为客户端或服务器端，还是桌面应用…"}, {"id": "6910015962058063885", "title": "5分钟带你搞懂 Javascript 中的this（包含apply、call、bind）", "desc": "当一个函数被调用时，会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。this 就是记录(上下文)的其中一个属性，会在函数执行的过程中用到。 this 总是指向执行时的当前对象。 JavaScript 的 …"}, {"id": "6993116285286481957", "title": "JavaScript 系列之作用域（二）", "desc": "[JavaScript 系列之作用域｜ 8月更文挑战 ]连更数天带你学会 JavaScript 基础。"}, {"id": "6844904153106350088", "title": "精读《Deno 1.0 你需要了解的》", "desc": "Deno 将于 2020-05-13 发布 1.0，如果你还有上面的疑惑，可以和我一起通过 Deno 1.0: What you need to know 这篇文章一起了解 Deno 基础知识。 希望你带着疑问思考，未来 10 年看今天，会不会出现 Deno 官方生态壮大，完全…"}, {"id": "6986906412609699877", "title": "ES6新增语法(五)——Promise详解", "desc": "promise是一个对象，从它可以获取异步操作的消息。有all、race、reject、resolve这几个方法，原型上有then、catch等方法。"}, {"id": "6844903699496566792", "title": "纯JS生成并下载各种文本文件或图片", "desc": "具体介绍可参考我之前的文章：“了解HTML/HTML5中的download属性”。 但显然，如果纯粹利用HTML属性来实现文件的下载（而不是浏览器打开或浏览），对于动态内容，就无能为力。 例如，我们对页面进行分享的时候，希望分享图片是页面内容的实时截图，此时，这个图片就是动态的…"}, {"id": "6844903601953849352", "title": "Vue源码简析(版本vue-2.4.4)", "desc": "1. 先进入 initMixin(Vue),在prototype上挂载 2. 进入 stateMixin(Vue),在prototype上挂载 3. 进入eventsMixin(Vue),在prototype上挂载 5. 最后进入renderMixin(Vue),在protot…"}, {"id": "7005361790477418533", "title": "js 图的遍历", "desc": "广度优先搜索 力扣题目 简书关于搜索的讲解 以上内容就不做说明了，大神写的非常的清楚明了了。一下是用js实现的搜索 知识点 用一个viseted保存访问过的节点，用一个队列保存需要遍历查找的节点（坐标"}, {"id": "6986208458240426020", "title": "前端基础6/3-DOM事件", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 DOM事件类 1：基本概念：DOM事件的级别 2：DOM事件模型 3：DOM事件流 4：描述DOM事件捕获的具体流"}, {"id": "6844903623999094791", "title": "淘宝、网易移动端 px 转换 rem 原理，Vue-cli 实现 px 转换 rem", "desc": "在过去的一段时间里面一直在使用Vue配合 lib-flexible和px2rem-loader配合做移动端的网页适配。秉着求知的思想，今天决定对他的原理进行分析。目前网上比较主流使用的就是淘宝方案和网易的解决方案，所以今天我就从这两方面入手深度了解这两个方案。本着互联网分享的精…"}, {"id": "6998505129922494478", "title": "web前端高级webpack - webpack常用知识汇总及手写loader和plugin", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 webpack常用的loader和plugins Loader Plugin Loader和Plugin的区别？ Webpack的构建流程"}, {"id": "6992473626259750919", "title": "【日拱一卒】聊聊JavaScript中的this", "desc": "这是我参与8月更文挑战的第4天，活动详情查看： 8月更文挑战” 前言 聊聊执行上下文中的this JavaScript的执行上下文中，有： 变量环境(保存当前执行上下文中var声明的变量)， 词法环境"}, {"id": "6899698476846678024", "title": "原生JS之苦", "desc": "本文是我一年前写的老文章，这次重新发布是因为回头看发现之前文章有好多错误或者理解不清的地方。时隔一年，以前很多不理解的地方突然清晰了很多，可能这就是在实践中的成长吧。 string类型即字符串，除了单引号双引号，es6 中引入了新的反引号 ` ` 来包含字符串。反引号的扩展功能…"}, {"id": "6998739716132569119", "title": "web前端高级webpack - 初识webpack 的安装运行及核心概念", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 初识webpack webpack作为前端构建构建的用途 webpack及webpack-cli安装 webpack 运行 webpack"}, {"id": "6950059795659358221", "title": "纯函数是什么？怎么合理运用纯函数？", "desc": "纯函数这个这个词我相信小伙伴们多多少少都听说过，它是函数式编程的基础。本文主要是对纯函数进行探讨，包括基本概念，优点，运用的经典案例以及我们日常该如何去合理的使用等等。"}, {"id": "6844903802189905934", "title": "从零开始配置webpack(基于webpack 4 和 babel 7版本)", "desc": "webpack启动后会从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有Module.每找到一个Module,就会根据配置的Loader去找出对应的转换规则，对Module进行转换后，再解析出当前的Module依赖的Module.这些模块会以Entry…"}, {"id": "6911883414110994439", "title": "傲慢才是阻碍技术提升的最大障碍", "desc": "这是刘慈欣老师在小说《三体》中对于地球人面对三体的狂妄态度的评价。 在 29 这一天文章一直前端板块首页的前五位置，到晚上基本锁定了第一的位置。 我并没有想到这篇文章能够这么火，虽然文章确实干货满满，并且非常客观有理有据地进行分析，但毕竟是推荐性质的，并不应该能够这么热。 这在…"}, {"id": "6982385494076162055", "title": "this指向知多少", "desc": "前言 工作一年来，感觉对this的指向问题的理解一直比较模糊，今天打算解开它神秘的面纱，一探究竟。 口诀 this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，请牢"}, {"id": "6969476205338886157", "title": "js input千分符分隔金额", "desc": "背景 前段时间在项目中遇到一个需求，就是对输入的金额用千分符分隔。我当时感觉这个功能挺应该简单的，然而……在开发的过程中还是遇到了一些问题。 初版代码 遇到的问题 正常输入没有问题，光标一直在末尾显示"}, {"id": "6983978244596826142", "title": "有趣的JS存储", "desc": "前前言 大家好我是推啊前端团队的展程同学。 今天给大家分享一下关于JS存储的问题。 建议阅读时间：5-10分钟。 序章 首先看一道经典的关于JS存储的题目，来一场紧张又刺激的脑内吃鸡大战吧： 问输出？"}, {"id": "7005113182247190541", "title": "HTML5使用MediaRecorder录制视频", "desc": "HTML5使用MediaRecorder录制视频, MediaRecorder 是浏览器提供的一个强大且简单的 API。专门用于音频和视频的录制。"}, {"id": "7003591104566132766", "title": "从一道面试题说起——js中的函数传参问题。", "desc": "先上结论，js函数传参传递的是参数的拷贝，请牢牢记住这句话。接下来我们看具体的例子。 基本数据类型 很好理解，函数传入的是a的拷贝的值，所以a不会变化。 引用数据类型 a发生了变化，看起来传入的是a的"}, {"id": "7002100025971081230", "title": "🚁一起来封装脚手架吧！[第4天：看完必会的脚手架开发！]", "desc": "👽 概论 前边和大家讲了很多的脚手架构思、设计上的知识，今天正式进入代码开发阶段。如果你对理论文字不感兴趣，那么从这一篇开始跟进也可以完成属于自己的脚手架！ 👽 项目初始化 创建好项目文件夹之后，在其"}, {"id": "6994990484980498462", "title": "借用 Vue 的思想封装一个 Storage", "desc": "通过 Proxy 来代理对 localStorage、sessionStorage 的操作，封装一个 简单 storage API。"}, {"id": "7001695186409488420", "title": "JavaScript 面试知识点 📝 🎉～（0x21-0x40）", "desc": "TOC JavaScript 面试知识点 📝 🎉～（0x01-0x20） > JavaScript 面试知识点 📝 🎉～（0x21-0x40） JavaScript 面试知识点 📝 🎉～（0x41-0"}, {"id": "7001025169003118622", "title": "理解回调函数与 Promise 原理", "desc": "1. 前言 在现代化的前端开发中，前后端分离已经成为主流。后端提供restful 接口，前端通过 ajax 请求拿到接口的数据，这样使得双方职责明确，减少了各自的负担。 这中间就少不了异步网络请求。我"}, {"id": "7001375131113095181", "title": "解决实践MySQL过程遇到的几个问题", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 解决mysql下载过慢的问题 下载 进入官网https://www.mysql.com/ 点击DOWNLOADS 点击Learn More"}, {"id": "6844904143757246471", "title": "你可能还不知的 7 个 CSS 好用的属性", "desc": "学习CSS是构建好看网页的一种方式。 但是，在学习过程中，我们倾向于（大部分时间）限制自己，一遍又一遍地使用相同的属性。 毕竟，我们是一种习惯性的动物，我们会使用自己习惯且熟悉的东西。 因此，在这篇文章中，向你介绍7个 比较少见且好用的 CSS 属性，希望对你有所帮助。 1. …"}, {"id": "6984547134062198791", "title": "最熟悉的陌生人rc-form", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ rc-form 是谁? 我们也许会经常使用例如 Ant Design、Element UI、Vant 等第三方组件库来"}, {"id": "6999441997236797470", "title": "精读《Typescript infer 关键字》", "desc": "Infer 关键字用于条件中的类型推导。 Typescript 官网也拿 ReturnType 这一经典例子说明它的作用： 理解为：如果 T 继承了 extends (...args: any[]) "}, {"id": "6968647527239254029", "title": "百度：如何从流程上设计可持续维护的组件", "desc": "每一个产品会去持续的发生一些需求迭代，但是人员跟项目的匹配关系需要考虑当时的资源情况，所以变动也比较大。另外，团队有一定的历史包袱。我们同样希望组件库能够跨越时间，纵向地去支持一个产品不同版本的研发"}, {"id": "6904805497845579783", "title": "如何用js给老婆每天发情话", "desc": "最近家里添了小孩，在家带娃陪产了一些天,深刻体会到老婆带孩子的辛苦。 工作的时候不能在家陪她，就想着写个程序，每天固定在固定时间给她发一些情话，好让她在带娃的时候也能感受到老公的爱心，帮她缓解一下带娃的烦躁心情。 Stack Overflow 联合创始人杰夫·阿特伍德曾经说过，…"}, {"id": "6994964546909634573", "title": "什么是 JavaScript 严格模式，一次性给你讲清楚（一）", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 除了使用一些第三方插件之外，还有什么办法可以提前发现一些比较直观的错误？ 答案就是使用 JavaScript 的严格模式。 什么是严格模式"}, {"id": "6910857740327845901", "title": "冬天到了，给你的网站下个雪吧", "desc": "女朋友常逛的设计网站这两天页面上多了下雪的效果，于是问我我的网站能下雪吗，作为一个程序员我一般会说实现不了，但是作为男朋友，不能说不行。 当然，最好的方式是用canvas来画。 因为tan(θ)=sy/sx，θ=Math.atan(sy / sx)，因为雨的线段默认是从上到下垂…"}, {"id": "7003253952590381064", "title": "数据结构-链表-相关题目", "desc": "你变成我，走过我走过的路。 我变成你，走过你走过的路。 然后我们便相遇了 程序员也有浪漫的时候，这句话竟能成为解题的思路"}, {"id": "6932295360274677773", "title": "学会 Proxy 就可以为所欲为吗？一段巧妙代码的简单解读", "desc": "Proxy 也就是代理。学习过计算机网络的朋友对这个词肯定不陌生。在计算机网络中，代理是指客户端不直接连接服务器，而是通过一些中间的机器进行请求的传递，从而达到提高访问速度，提升安全性之类的需求。 javascript 中的 Proxy 也是类似的功能，只不过阻隔的不再是服务器…"}, {"id": "6995659125510111262", "title": "什么是 JavaScript 严格模式，一次性给你讲清楚（三）", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 除了使用一些第三方插件之外，还有什么办法可以提前发现一些比较直观的错误？ 答案就是使用 JavaScript 的严格模式。 什么是严格模式"}, {"id": "6999887121775345701", "title": "一篇文章了解Object 常用APi", "desc": "1.Object.entries(） Object.entries:遍历对象，把属性，值组成数组，再返回一个新的二维数组 2.Object.fromEntries(） Object.fromEntri"}, {"id": "6997940807567147044", "title": "JavaScript 系列之数组（一）", "desc": "[JavaScript 系列之数组｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6898341568944701447", "title": "Fetch还是Axios——哪个更适合HTTP请求？", "desc": "前端开发最重要的部分之一是通过发出HTTP请求与后端进行通信，我们有几种方法可以异步地在Javascript中进行API调用。 几年前，大多数应用程序都使用Ajax发送HTTP请求，Ajax代表异步Javascript和XML。但是现在，开发人员通常会决定在fetch() AP…"}, {"id": "6909079689525100552", "title": "Electron升级构建适配M1芯片Mac指南", "desc": "构建，一直报错。反正各种奇奇怪怪的错误，后面我发现是我配置有点问题，最终在这里找到了 如果觉得写得不错，那么点个在看/赞，点个关注 【前端巅峰】吧。"}, {"id": "6844903973674041351", "title": "JavaScript vs Dart  两者之间的比较", "desc": "JavaScript通常被称为浏览器脚本语言，但它也已扩展到许多服务器端和移动应用程序开发环境。JS已经存在了将近20年，可以肯定地说它确实是一种成熟且稳定的编程语言。在Facebook发布React和React Native框架之后，JS变得越来越流行。 JavaScript…"}, {"id": "6934216470968664077", "title": "设备(物理)像素vs逻辑像素（css虚拟像素）与dpr与rem", "desc": "css是一个不确定的物理像素，它是根据它所在的机型设备而决定的。 设备独立像素也叫做逻辑像素，与css像素一样是一种虚拟的像素，它是操作系统定义的一种像素单位，应用程序将设备独立设备告诉操作系统，操作系统再将独立设备像素转为设备像素。 显示屏是由无数个物理像素点组成的，通过控制…"}, {"id": "6983868344222875656", "title": "计组考试引发 JavaScript 编译的思考", "desc": "前些天，正值期末考试阶段，对于大学生的考试，dddd。但是，在“复习”计算机组成原理的时候，看到了这样一句话"}, {"id": "6985009610109222919", "title": "JS基础系列之赋值及深拷贝、浅拷贝", "desc": "JS基础系列之赋值及深拷贝、浅拷贝，重拾JavaScript基础，为后续的开发工作打基础。......"}, {"id": "6993984373699641381", "title": " js中的this机制", "desc": "这周来学习this，this虐我千百遍，我待this如初恋，每次一看this就会，就是指向它的调用者嘛，一做题就废，这次挖挖根，彻底了解一下this的机制 由来 为什么要用this 不使用this，需"}, {"id": "6941294469912199205", "title": "技术周刊 · 2021-03-19", "desc": "欢迎关注「 字节前端 ByteFE 」简历投递联系邮箱「 tech@bytedance.com 」"}, {"id": "6941597799121158157", "title": "ES6 对象解构的用法与用途", "desc": "对象解构是 ECMAScript6 新推出的特性，有了它可以实现很多我们平时需要比较多操作，或者封装才能做到的东西，所以这篇文章，咱们来详细了解一下 ES6 对象解构的用法与用途。 本篇文章所示代码皆可在兼容ES6的环境，比如chrome浏览器或是高版本node中供大家自行测试…"}, {"id": "6844903715342647310", "title": "「译」更快的 async 函数和 promises", "desc": "JavaScript 的异步过程一直被认为是不够快的，更糟糕的是，在 NodeJS 等实时性要求高的场景下调试堪比噩梦。不过，这一切正在改变，这篇文章会详细解释我们是如何优化 V8 引擎（也会涉及一些其它引擎）里的 async 函数和 promises 的，以及伴随着的开发体验…"}, {"id": "6844903876802379789", "title": "你不能错过的XSS指引", "desc": "的三大原则，我也简要的问了一下候选人前端安全方面的问题，其中就有涉及到 XSS 攻击相关的知识。以下就是我们的面试过程。 问到这里候选人就开始支支吾吾了。各位读者，也默默地问一下自己，使用了 react 难道就真的不会发生 XSS 攻击了吗？ 笔者为了让大家更好地掌握 XSS …"}, {"id": "6844903973434966030", "title": "网页截图的两种实现方案：html2canvas & puppeteer", "desc": "上礼拜做了一个需求：将网页上的内容按顺序保存为图片，并上传至OSS返回URL给后端生成PPT。这里主要分享如何将网页的上的内容保存为图片。至于保存为图片之后的事，比如直接保存为本地，或者上传至服务器等，这里就不探索了。 html2canvas是一个实现网页截图的库，允许你直接在…"}, {"id": "6996121880256053262", "title": "七夕节见男神，爱TA就送：JS版冒泡排序动画！", "desc": "女神们，迎接七夕节最好的方式，难道还有比送给你程序员男神的礼物是一个会动的算法更加惊喜吗？不会吧！所以..."}, {"id": "6965786039185047559", "title": "JavaScript执行机制一", "desc": "JavaScript 的执行顺序 对于人的直观感受而言，一串 JavaScript 的代码执行逻辑应该是一行一行的执行的，那么 JavaScript 的执行是否是一行一行的执行的呢？先看一个例子： 两"}, {"id": "6995942844250718245", "title": "JavaScript 媒体查询", "desc": "首先在 CSS3 中引入的媒体查询构成了响应式 Web 设计的核心组件。应用程序应根据每种类型设备（如手机、平板电脑、笔记本电脑、台式计算机）的限制进行定制，媒体查询提供了一种根据正在查看应用程序的设"}, {"id": "6948071172172939272", "title": "JS手写代码之数据类型判断 typeof", "desc": "前言：对数据类型进行判断是我们在日常敲代码的过程中时常会遇到的，而JS中的数据类型判断方法共有四种，分别是typeof、toString、constructor和instanceof，而我今天要介绍的"}, {"id": "7000938390371696671", "title": "第 33 题：如何去掉一组整型数组重复的值？", "desc": "利用 ES6 新增的数据结构 Set 实现 ``` let arr = [20, 28, 28, 30, 28, 50, 40]; let res = [...new Set(arr)]; co"}, {"id": "6844904096864927758", "title": "Vue实现一个Markdown编辑器(附项目源码)", "desc": "如图，这就是编辑器的全貌，分为编辑区域与预览区域，其中预览区域可以通过菜单中的按钮实现隐藏或展示，方便不同的编辑需求。 完成一个编辑器，听起来就十分困难呀，一开始笔者也是一脸懵逼，下面给大家说一下笔者的编辑器是如何一步步走上正轨的，开发这个编辑器大概经历了两个阶段，第一个阶段是…"}, {"id": "6844903848008482824", "title": "如何在 ES5 环境下实现一个const ？", "desc": "刚刚看了掘金上一篇文章《作为技术面试官，为什么把你pass了》，里面第一题就是用es5实现const，据作者反馈 这一题所有的面试者都没有回答出来，感觉挺可惜的，其实这是一道比较简单的题目，但是由于涉及到了一些Object对象属性描述符的知识，这些描述符往往用到的场景不多，所以…"}, {"id": "6844903625127362567", "title": "vue使用中的内存泄漏", "desc": "今天看到一篇关于js使用中内存泄露的文章，以及chrom浏览器查看内存泄漏的方法，决定留着。 什么是内存泄露？内存泄露是指new了一块内存，但无法被释放或者被垃圾回收。new了一个对象之后，它申请占用了一块堆内存，当把这个对象指针置为null时或者离开作用域导致被销毁，那么这块…"}, {"id": "6844903807663472653", "title": "实现高度“听话”的多行文本输入框", "desc": "通过创建 textarea 标签，并且指定其 rows 和 cols 属性，就可以创建一个多行文本输入框。 但是当输入的内容超过指定的 rows 之后，就会出现滚动条，如果用户想要查看全部内容，那就必须来回的拖动滚动条。而且这个滚动条只有在用户滚动的时候才会出现，在一些情况下，…"}, {"id": "6947153216240877604", "title": "1小时解决在浏览器中所有与excel相关的需求（内含exceljs实战）", "desc": "浏览器逐渐发展起来，慢慢变成更多的文件格式都在直接在浏览器中预览编辑。假如我们接到了一个需要在前端处理excel表格，我们该怎么办？（内含exceljs实战）"}, {"id": "6844903698506711053", "title": "函数式的 setState 是 React 的未来", "desc": "更新：我在React Rally上就此主题进行了后续讨论。虽然这篇文章更多的是关于“函数式的 setState”模式，但更多的是关于深入理解setState。 React在JavaScript中推广了函数式编程，这导致了大量的框架采用了React使用的基于组件的UI模式。如今，…"}, {"id": "6844903718651953159", "title": "前端杂谈: DOM event 原理", "desc": "DOM 事件是前端开发者习以为常的东西. 事件的监听和触发使用起来都非常方便, 但是他们的原理是什么呢? 浏览器是怎样处理 event绑定和触发的呢? 让我们通过实现一个简单的event 处理函数, 来详细了解一下. 当我们点击上面这段 html 代码中的 a 标签时. 浏览器…"}, {"id": "6844903857483431944", "title": "前端战五渣：”啊！贾克斯？武器大师？Ajax！XMLHttpRequest“", "desc": "Ajax横空出世，打破了前后端交互的时候需要重新加载页面，就是整页刷新，我们可以通过Ajax技术直接在页面不刷新的情况下，发出请求，获取返回数据，然后通过js操作Dom更改页面内容。 也是Ajax出现了以后，才促成了往后的前后端分离，不再是前端只负责切图，只是给后端同学提供模板…"}, {"id": "6984781427997048846", "title": "【JS】你不知道的JavaScript 笔记（一）—— 作用域与闭包 - 编译原理 - LHS - RHS - 循环与闭包 - 模块 - 词法作用域 - 动态作", "desc": "之前看了一遍《你不知道的JavaScript（上卷）》之后感觉醍醐灌顶，过了几个月又感觉都快忘了，今天准备边二刷，边做个笔记，把书中的一些重点思想记录整理下来，方便以后复习。"}, {"id": "6914189061385093128", "title": "从一个bug开始，3分种搞清楚npm run发生了什么", "desc": "最近遇到个问题，当你jenkins服务器上运维因为各种原因不愿意装nvm或者n等版本控制升级node而系统默认版本一直是超低版本的node。想指定node运行版本怎么办呢？ 这是怎么回事呢，为什么我指定了npm版本，node却是系统的v8.x呢？但事实就是这样，小编也感到非常惊…"}, {"id": "6896463076682366990", "title": "重学ES6 | reduce ", "desc": "该参数是可选可不选的，但是填与不填的区别很大,如果它提供了初始值,则作为callback函数的第一个参数（accumulator）的值，如果没有初始值，则使用数组的第一个元素作为callback的初始值。 注意：如果提供了initialValue则索引值从0开始,否则从1开始。"}, {"id": "6959741284890181669", "title": "【JS深入】对象，原型与继承", "desc": "1. 对象 1.1 对象概述 JS 中的对象有两种形式: 字面量形式与构造形式. 注意:对象的键名只能是字符串和 Symbol 类型 对象是Javascript中的主要类型之一, 简单基本类型不是ob"}, {"id": "6954919023205154824", "title": "使用 AbortController 取消 Fetch 请求和事件监听", "desc": "AbortController 是一个控制器对象，你可以通过 new 构造函数的形式返回一个 AbortSignal 对象。"}, {"id": "6857455079130464263", "title": "【再来亿遍 温故知新】—— 关于 JS 原型你必须要知道的二三", "desc": "本瓜一向认为：学习不是一蹴而就的事情。一定是要求学习者对知识点进行反复咀嚼拿捏、不断打破重塑，长此以往，才以期达到融会贯通、为我所用的程度。所谓：温故知新，不亦乐乎？ 对于 JS 技能拥有者这来说，原型这个概念一定是值得刻在心里去反复玩味的。此篇且暂让本瓜带你再看 JS 原型二…"}, {"id": "6916757476071178253", "title": "JavaScript中的作用域  | 七日打卡", "desc": "定义: 在所有函数之外的变量,函数内部可以直接读取全局变量。 1. 不用var定义出来的是全局变量 函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！ 2. 变量提升 3. 块语句不会创建一个新的作用域 用var在局部范围内定义出来的是局部…"}, {"id": "6844904002535030792", "title": "前端也要懂的IOC", "desc": "我们看上面的代码发现A被B和C依赖，这种依赖关系随这着应用的增大，越来越复杂，耦合度也越来越高。所以有人提出了IOC理念，解决对象间的解耦。 但是业界实现的方式主要是通过装饰器 decorator 和 reflect-metadata来实现的，接下来就聊聊这两者是如何配合实现依…"}, {"id": "6844903560828682248", "title": "webpack 4.0.0-beta.0 新特性介绍", "desc": "近年来前端技术如雨后春笋般蓬勃发展，我们也在这个潮流下不断地学习、成长。前端技术的不断发展，给我们提供了许多的便利。例如：JSX的出现为我们提供了一个清晰、直观的方式来描述组件树，LESS/SASS的出现提高了我们书写css的能力，AMD/CommonJS/ES6 的出现为我们…"}, {"id": "6966794966165094414", "title": "CSS、JS中检测系统主题动态设置样式", "desc": "Javascript获取系统主题，通过监听实时获取主题，进而动态设置主题样式 Css根据媒体查询（preferred-color-scheme）设置主题样式"}, {"id": "6998049042294898696", "title": "三分钟掌握redux的compose方法", "desc": "把复杂的多函数嵌套调用，组合成纯粹的函数调用，实现 fn1(fn2(fn3(fn3(...args))))-->compose(fn1,fn2,fn3,fn4)(...args)这样单纯可读的函数调用"}, {"id": "6972103160257052680", "title": "构建 Typescript 知识体系(二)-TS 接口浅析", "desc": "接口:用来约束 对象，函数，类的结构和类型。是一种代码协作的契约 例子 1:假设从后端获取数据，然后渲染到界面上 场景一:后端有时候返回多余的字段 后端有时候返回多余的字段，但是 TS 中并不会报错，"}, {"id": "6932718585173753869", "title": "JS算法 | 堆排序", "desc": "此文衍生自《【JS算法】排序算法》，针对选择排序的稳定性进行补充讲解。排序算法的稳定性在《【JS算法】排序算法》已经进行讲解，此处不再重复。文中用 JavaScript 实现算法，详细解释堆排序 js 中堆的创建与维护，以及堆排序算法的实现堆创建 堆，是具有下列性质的完全二叉树…"}, {"id": "6960494605288603656", "title": "读 2020 年 Javascript 趋势报告展望 ES2020", "desc": "2020 年是一个不平凡的一年，但已经过去了，总结过去，展望未来！ Javascript 在过去一年里整体上在设法向前发展。得益于像可选链（Optional Chaining）和空值合并运算符"}, {"id": "6844903699249102861", "title": "[译]javascript中的依赖注入", "desc": "在上文介绍过控制反转之后，本来打算写篇文章介绍下控制反转的常见模式-依赖注入。在翻看资料的时候，发现了一篇好文Dependency injection in JavaScript，就不自己折腾了，结合自己理解翻译一下，好文共赏。 我喜欢引用这样一句话‘编程是对复杂性的管理’。可…"}, {"id": "6995191453831921677", "title": "JavaScript干净编码的最佳实践", "desc": "编写干净的代码是每个开发人员都需要做的事情，本篇文章我们将介绍命名、使用变量和函数等的干净编码原则，以及一些特定于JavaScript 的"}, {"id": "6986186780567404557", "title": "WebStorm-2021.2抢先版带来了什么便利", "desc": "WebStorm一直是我最喜欢的前端开发编辑器，它集成了目前前端开发中几乎所有需要使用到的功能，在之前我也出过好几篇相关的文章，而2021.2抢先版则带来了更多好用的功能。"}, {"id": "6844903614138286094", "title": "懒加载和预加载", "desc": "懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式。用户滚动到它们之前，可视区域外的图像不会加载。这与图像预加载相反，在长网页上使用延迟加载将使网页加载更快。在某些情况下，它还可以帮助减少服务器负载。常适用图片很多，页面很长的电商网站场景中。 能提升…"}, {"id": "6930170631031881741", "title": "如何使用nodejs自动发送邮件?", "desc": "之前用Nodejs做了很多服务端模块, 最近抽空复盘一下, 接下来笔者将介绍如何使用Nodejs来自动向用户发送邮件. 笔者将详细介绍自动发送邮箱的实现方案, 以及通过一个实际的案例来带大家掌握使用nodejs自动发送邮件, 最后会介绍一些实际的应用场景, 来加深对该方案的理解…"}, {"id": "6995786330533806117", "title": "typescript在实际项目中的运用", "desc": "最近在公司技术群里发现一个 typescript体操题库，之前虽然也用 ts但只是当成一个纯粹的类型注释来用，也听说过 ts的类型可编程性，但一直不解其意，直到我看到这个库后大感震撼"}, {"id": "7001536119594549262", "title": "《少废话，直接看东西》之「函数式编程范式」", "desc": "编辑摘要：本文是《少说废话，直接看东西》专栏的第一部分，主要介绍函数式编程范式，带你快速入门函数式编程的使用。"}, {"id": "6987682149574901768", "title": "新一代自动化测试工具 ——  playwright ", "desc": "一、playwright 的概述 playwright 是由微软公司 2020 年初发布的新一代自动化测试工具，playwright 基于 jest 的 e2e 测试框架，其在 jest 的基础上集成"}, {"id": "6886418644381728776", "title": "前端实现一个小说分页的功能", "desc": "因为没有什么思路，那就只能在前辈的项目中寻找思路了。 好了，然后在找一本有缘书，跟我一同前往那神秘的未知世界。 就决定是你了，开始免费试读。 然后我们就可以发现起点是如何实现这个功能的了，原来是使用columns这个属性来让文章自动分页的昂。 我们现在就去搜索一下columns…"}, {"id": "7002227333776015367", "title": "页面滚动到指定位置的方法", "desc": "通常一个完整的页面可包含多屏内容，因此我们常需要通过滚动页面来阅读网页上的内容。页面上有一些可点击的链接或按钮，点击后调转到页面指定的位置，今天介绍几种实现方式。"}, {"id": "6996544684319309831", "title": "【前端笔记】谈谈javascript中的数组、字符串和值的引用", "desc": "大家好哇，今天来记录一下javascript的数组、字符串和值的引用。提前说明哦，这是一篇前端笔记类的文章，属于个人记录。各位高人请绕道勿喷，谢谢~"}, {"id": "6994614088248606750", "title": "Vue3编写一个可以用js调用的组件", "desc": "项目开发中基本都会用到组件库，但是设计稿样式和功能不一定和组件库相同，尤其像是消息提示弹窗、确认弹窗，各个项目各个设计师都有自己的一套风格。我们可以实现一个通过js函数调用的自定义组件"}, {"id": "7000582990925398023", "title": "这一次 彻底搞定 JavaScript 异步编程", "desc": "JavaScript 的异步编程发展经过了四个阶段： 1. 回调函数、发布订阅 2. Promise 3. co 自执行的 Generator 函数 4. async / await"}, {"id": "6999651011304357925", "title": "面试必备 JavaScript Promise 专题", "desc": "Promise是抽象异步处理对象以及对其进行各种操作的组件。 其详细内容在接下来我们还会进行介绍，Promise并不是从JavaScript中发祥的概念。"}, {"id": "6999578474746740750", "title": "《JavaScript 高级程序设计》 阅读笔记", "desc": "第1章 什么是JavaScript 背景介绍 ECMAScript: JavaScript实现了ECMAScript,ECMAScript描述语言的语法、类型等 DOM(文本对象模型)：DOM将整个页"}, {"id": "6954381705700442120", "title": "【v8引擎】描述一下 V8 执行一段JS代码的过程？（预编译篇）", "desc": "我将带领大家用简单好理解的、具体的步骤去推敲和理解JS代码的运行顺序、每个阶段都干了什么？真正地打开JS世界的大门！"}, {"id": "6901621560444977160", "title": "「数组方法」写给女友的一系列 JS 数组操作（建议收藏 | 内附思维导图）", "desc": "最近和女友，咳咳...（说出来可能会被打s）学习JS数组方法，用几个字形容的话就是听说过，实际使用、遇到的时候就分不清具体方法会得到怎样的结果。 今天我将通过这篇文章好好整理一下关于JS数组的方法，让大家通过这一篇文章 掌握 数组一系列操作，同时，在面试或者工作的时候也能写出简…"}, {"id": "7006956450475933727", "title": "JavaScript——变量、作用域", "desc": "一、基本类型和引用类型 JavaScript 变量可以用来保存两种类型的值：基本类型值和引用类型值。基本类型的值源自以下 5种基本数据类型：Undefined、Null、Boolean、Number "}, {"id": "6844903654177144840", "title": "一点感悟：当走完所有大厂的实习面试后", "desc": "七月虽然不是一个丰收的季节，但却是一个十分酷热的月份。不知有多少小伙伴跟我一样，顶着大太阳奔波在各种面试的征途中。面试是一个漫长的过程。但是也是一个让你快速提升的过程。其中包含了无数的血与泪。去面试前首先我们必须有牢固的基础知识，足够丰富的项目经历(就我而言差不多是三个完整项目…"}, {"id": "6992926385341890590", "title": "2021 GMTC北京站 - 大前端工程提效分享与总结", "desc": "前言 2021GMTC一共分为16个专场演讲，几乎涵盖了目前大前端所有领域，感谢公司和秋实提供的机会，在7月4日有幸参加了大前端工程提效专项的分享，本次专场分为以下四个议题： MBC 业务标准化容器在"}, {"id": "6844903498266443789", "title": "如何管理好10万行代码的前端单页面应用", "desc": "蚂蚁金服数据平台前端团队主要负责多个数据相关的PC Web单页面应用程序，业务复杂度类比Excel等桌面应用，业务前端代码量在几万行～几十万行，随着产品不断完善，破百万指日可待。管理好10万行级甚至百万行级代码的前端应用，是我们团队的核心挑战之一。 团队的架构方案是多个产品经历…"}, {"id": "6976246792694431758", "title": "Promise 概述", "desc": "ECMAscript 6 原生提供了 Promise 对象，在一定程度上解决了以往“回调地狱”的问题。 Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。"}, {"id": "7000676601973178404", "title": "javascript内存泄漏与优化", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战” 内存泄漏与优化 平常用 JavaScript 开发代码，内存的泄漏和优化是应该经常留意的。内存泄漏是指 JavaScript 中，已经分"}, {"id": "6844903918409875469", "title": "一步步带你实现web全景看房——three.js", "desc": "1. 基本概念 在THREEjs中，渲染一个3d世界的必要因素是场景（scene）、相机（camera）、渲染器（renderer）。渲染出一个3d世界后，可以往里面增加各种各样的物体、光源等，形成一个3d世界： 正交摄像机是一个矩形可视区域，物体只有在这个区域内才是可见的物体…"}, {"id": "6873215243804213262", "title": "全面分析toString与valueOf，并随手解决掉几道大厂必备面试题", "desc": "让人恐惧的夏天也许就过去了，没人知道你在这个夏天、这个今年发生什么，但是我知道。 知道你是努力的，也有可能是缓慢的。不过面对秋天，面对即将到来的国庆小假期，还请继续努力吧，川流不息的不止生命，还有时间，加油~~ 基本上，所有JS数据类型都拥有这两个方法，null除外。它们俩是位…"}, {"id": "6886081203004833800", "title": "学习node前你就该跟人家拉开差距【node专栏01】", "desc": "这种情况下，其实对于很多人为什么学习node都不知道，node能解决什么问题可能都不知道。 我是这样去学习node，首先我要知道node能解决什么问题？它在什么场景下更加适合. 比如node配套的数据库大多都只有 mongodb mysql而他们都属于轻量级的数据库，而且mon…"}, {"id": "6844904048768843790", "title": "看完这几道 JavaScript 面试题，让你与考官对答如流（下）", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 51. 什么是 async/await 及其如何工作？ 52. 展开运算符和Rest运算符有什么区别？ 53. 什么是默认参数？ 54. 什么是包装对象（wrapper object）？ 55. 隐式和显式转换…"}, {"id": "6844904102053281806", "title": "手写async await的最简实现（20行）", "desc": "如果让你手写async函数的实现，你是不是会觉得很复杂？这篇文章带你用20行搞定它的核心。 经常有人说async函数是generator函数的语法糖，那么到底是怎么样一个糖呢？让我们来一层层的剥开它的糖衣。 这篇文章的目的就是带大家理解清楚async和generator之间到底…"}, {"id": "7002795498646175752", "title": "LeetCode第11天🐱‍🏍", "desc": "165. 比较版本号 切割版本号进行比较 优化空间复杂度 给你两个版本号 version1 和 version2 ，请你比较它们。"}, {"id": "7007333564458991652", "title": "javaScript的历史", "desc": "史前时代 万维网的概念与基础技术，是1989-1991年间由CERN(欧洲核子研究组织)的Tim Berner-Lee创造的。Web技术在高能物理圈内流通了几年，但并未在物理社区外引起强烈反响。它真正"}, {"id": "6998074747615445000", "title": "继承 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 想必，点进来的都是随时可以继承家产，上班只是为了享受生活，随时能回去躺平的大佬。好，收回正题，毕竟还要靠代码维持生计。 继承是面向对象"}, {"id": "6844903918577664007", "title": "2019年了，整理了N个实用案例帮你快速迁移到React Hooks", "desc": "在React Conf 2018宣布React Hooks后，我第一时间开始尝试使用React Hooks，现在新项目基本不写Class组件了。对我来说，它确实让我的开发效率提高了很多，改变了已有的组件开发思维和模式. 我在React组件设计实践总结04 - 组件的思维中已经总…"}, {"id": "6880994683867103240", "title": "Javascript高级程序设计第四版详细测评| 🏆 掘金技术征文-双节特别篇", "desc": "视频版地址简介哈喽大家好，我是大圣，上次做了一个js的书籍测评，评价还不错，在做css和node之前，再做几本书的详细推荐吧,国庆今天又在家好好读了几本具有代表性的javascript高级程序设计【红"}, {"id": "6846687584710557710", "title": "1.2w字 ｜ 初中级前端 JavaScript 自测清单 - 1", "desc": "最近与部门老大一起面试了许多前端求职者，其中想换个学习氛围较好的人占多数，但良好的学习氛围也是需要一点点营造出来的🌺。 为此我们组建了我们团队内部的“现代 JavaScript 突击队”，第一期学习内容为《现代 JavaScript 教程》系列，帮助小组成员系统地进行学习巩固…"}, {"id": "7004035604358889485", "title": "JS递归理解案例", "desc": "先看一个小例子 再来实现一个小demo，利用递归函数求1～n的阶乘 123*4 …n 再来一个小demo，利用递归筛选遍历数据"}, {"id": "6998128022238789646", "title": "JS原型继承", "desc": "序言 很多新学JS的小伙伴，原型都是绕不过的重要知识点，但是相信很多人和我当时初学时有一样的疑惑，这个东西有什么特殊的意义吗，我"}, {"id": "6919478002925453320", "title": "TypeScript 中提升幸福感的 10 个高级技巧", "desc": "用了一年时间的 TypeScript 了，项目中用到的技术是 Vue + TypeScript 的，深感中大型项目中 TypeScript 的必要性，特别是生命周期比较长的大型项目中更应该使用 TypeScript。 以下是我在工作中总结到的经常会用到的 TypeScript …"}, {"id": "6844904007102627847", "title": "推荐几个不错的console调试技巧", "desc": "你可以完全使用console.warn来代替console.log方法，但前提是该条打印信息是属于警告级别而不是普通信息级别，因此浏览器遇到一条警告级别的信息会区别对待，最明显的是它的左侧会有一个警告图标，并且背景色和文字颜色也会不一样。 相比于普通信息，警告信息会出现在上图左…"}, {"id": "6948635226453049374", "title": "0成本上手AST，用GoGoCode解决Vue2迁移Vue3难题", "desc": "总之。。。 这不是我的错！ 首先先要写个案例，找到一个可执行方案。 唯一的方案是基于AST（抽象语法树）解构代码，根据Vue官网给出升级文档的修改建议，批量修改输出文件的方案。 只是。。。AST操作有点复杂。 一. 利用 jscodeshift 操作 AST去掉console.…"}, {"id": "6999615590688260110", "title": "Next.js与React服务端渲染", "desc": "React服务端渲染 Next.js不了解一下？ 最近在一个资讯类的项目中用了Next.js服务端渲染，体验了一把服务端渲染的速度，首屏直出，渲染速度666。"}, {"id": "7002265701574508575", "title": "【重温JS】前端自动化-静态模块打包工具-webpack", "desc": "☆☆☆ 今天来学习实练-使用前端自动化工具: ( webpack ) ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! 加油! 认真对待"}, {"id": "7002164741443420174", "title": "Js位运算符", "desc": "位运算在数字底层（表示数字的32个数位）进行运算的。因为是运算的低级运算操作，所以运算速度往往也是最快的。"}, {"id": "6994605743076802574", "title": "重温ES6系列之“数组的扩展-Array.from()”", "desc": "Array.from() 一、Array.from方法的用途： 用于将两类对象转为真正的数组。 类似数组的对象（array-like object） 可遍历（iterable）的对象（包括ES6新增的"}, {"id": "7002171652993712165", "title": "js学习总结-适合小白 ", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 js的位置不同可能导致不同的后果。 前言 今天整理了一下之前学习js的笔记，在这里分享个大家。 window.onload=functio"}, {"id": "6980320082698174478", "title": "原生JavaScript三种方法实现懒加载lazyLoad", "desc": "前两种方法会导致浏览器不断的触发事件,所以我们采用了一种观察法来优化对浏览器的性能........."}, {"id": "6984594496142966814", "title": "尤雨溪的5KB petite-vue源码解析", "desc": "近期尤雨溪发布了5kb的petite-vue,好奇的我,clone了他的源码，给大家解析一波。 最近由于工作事情多，所以放缓了原创的脚步！大家谅解 想看我往期手写源码+各种源码解析的可以关注"}, {"id": "6981242936365154318", "title": "精读《算法 - 二叉树》", "desc": "二叉树是一种数据结构，并且拥有种类复杂的分支，本文作为入门篇，只介绍一些基本二叉树的题型，像二叉搜索树等等不在此篇介绍。 二叉树其实是链表的升级版，即链表同时拥有两个 Next 指针，就变成了二叉树。"}, {"id": "7005765927870562340", "title": "面试复习计划JavaScript篇二", "desc": "面试复习计划JavaScript篇一 引言 该篇包含以下知识点：this，call和apply，以及bind"}, {"id": "6991649555280314399", "title": "详解JavaScript系列之数组(二)｜ 8月更文挑战", "desc": "前言 isArray()：判断是否为数组 以前，我们会通过 A instanceof B来判断 A 是否属于 B 类型。但是instanceof是基于原型链查找来判断的，而Array也是Object的"}, {"id": "7003227296941211684", "title": "JS中的那些位运算", "desc": "什么是位运算？ 位运算是在数字底层（即表示数字的 32 个数位）进行运算的。由于位运算是低级的运算操作，所以速度往往也是最快的（相对其它运算如加减乘除来说），并且借助位运算有时我们还能实现更简单的程序"}, {"id": "7005095347928170533", "title": "对象方法（Object.create）中添加不可枚举属性，在node环境和浏览器环境中展示不同", "desc": "在浏览器环境执行上述代码，能看到打印的对象有两个属性：a和c。但是c属性看起来像是隐藏属性，颜色较暗 在node环境下运行，只能看到一个a属性"}, {"id": "6950878916135354398", "title": "medium 五万赞好文-《我永远不懂 JS 闭包》", "desc": "本篇借助 medium 上的五万赞好文 I never understood JavaScript closures 带你一次吃透“闭包”！（吃不透找我，找耶稣也没用，我说的）"}, {"id": "6993924213094662174", "title": "React Hook 最佳实践", "desc": "React Hook 自己在使用过程中遇到的一些问题，和类组件的异同，解决问题的思路和方法，还有最佳实践的总结，希望可以帮助大家更加深入了解 React Hook"}, {"id": "7003229659676540965", "title": "JS函数的执行时机", "desc": "JS函数在不同的时候运行，会有不同的运行结果  同步任务： 上一件事情没有完成，继续处理上一件事情，只有上一件事情完成了，才会做下一件事情 JS中大部分都是同步编程 案例一 这里不会打印任何东西，因为"}, {"id": "6999858229396111390", "title": "超简洁版手写代码 这次一定记得住（一）", "desc": "面试的时候常常会要求我们手写代码，理解这些手写代码的实现也有利于增加我们的技术沉淀，今天我们就来一起看看这些常见的手写代码实现吧"}, {"id": "6985739198267392031", "title": "追求“纯”的纯函数 | 函数式编程", "desc": "纯函数的概念 在程序设计中,如果一个函数符合以下条件,则被称之为纯函数: 相同的输入，产生相同的输出 无可观察的副..."}, {"id": "6993178105443516446", "title": "记一次 websocket 实战，“我没有拿到回执呀”", "desc": "我跟后端说“没有拿到回执”，他说他也没拿到。。。然后又去找了另一个后端。。。另外一个后端的回执由嵌到我这边的 iframe 里的另一个前端页面进行输入。。。绕不绕？但，这就是实战！"}, {"id": "6997603763464699934", "title": "这些JS基础知识点你真的懂了么？", "desc": "这是我参与 8 月更文挑战的第 9 天，活动详情查看： 8月更文挑战 变量类型和计算 typeof能判断哪些类型 识别所有值类型 识别函数 判断是否是引用类型（不可再细分） 何时使用===，何时使用="}, {"id": "6984531216233922567", "title": "request 已废弃 - 推荐一个超快的 Node.js HTTP Client undici", "desc": "推荐一个新的 Node.js HTTP Client undici，比内置的 HTTP 模块还要快～"}, {"id": "7002251023079178253", "title": "Async、defer以及普通加载script区别详解", "desc": "本文详解了前端加载script 标签的三种方式（普通、async、defer）的特点，并辅以Demo项目进行论证。"}, {"id": "6989132702775525407", "title": "⚡qiankun微前端中的应用通信-不受框架限制的响应式数据管理", "desc": "一个qiankun微前端的应用通信模块，以redux为核心，采用发布-订阅模式进行封装，实现应用间通信数据上的响应式，并在代码结构上实现模块化，api方面仿照vuex，降低上手难度, 并可适用多框架。"}, {"id": "6844903693507117063", "title": "JS中的数组过滤，从简单筛选到多条件筛选", "desc": "在上家公司工作的时候，有一个需求是在前端部分完成筛选功能，一次拿到所有数据，然后根据条件筛选。通常情况下筛选是后台给接口，在数据量不大的情况下，也有人可能会遇到前端筛选这样的情况，特别写了这篇文章分享给大家，有问题请指出，互相学习。 一般情况下的单条件筛选，数组的filter方…"}, {"id": "6995735125979824141", "title": "高阶函数-柯里化", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 第一次接触柯里化函数的概念是在多年前一次面试过程中，当时并不知道柯里化的概念，暴力使用闭包将题目解答😄，暴力解题之后总觉得解决方案不妥，随"}, {"id": "7004996552812920862", "title": "js滑动窗口的应用", "desc": "滑动窗口主要用来解决寻找满足一定条件的连续区间的性质-如长度问题。由于区间连续，因此当区间变化时，可以利用旧有的计算结果进行剪枝，从而减少计算量。例如“满足xx的最x的子数组”问题就可以用滑动窗口解决"}, {"id": "6984983458544091172", "title": "react+ts+webpack搭建electron项目", "desc": "一份基础模板，用来创建react+ts+webpack+electron的项目，可以扩展，根据习惯来更多的自定义配置"}, {"id": "6844904137432252424", "title": "我是如何从零基础到淘系前端offer - 阶段性总结", "desc": "如果我的经历和你有相似，同时也帮助到你，那真是太好了。 我本科的专业是能源与动力工程，研究生专业是农业与生物工程，现在马上要结束研究生的第三个学期。本科跟着老师参加过我们专业的相关的竞赛，也做过科研，是用 Matlab 做模拟，如果算上本科学的 C 语言，那么他们俩是我本科唯二…"}, {"id": "6844903918816903182", "title": "爬虫，其实本就是这么简单", "desc": "时至今日，大前端思想已经深入人心，很多知识都要涉及到。所以对于现在的前端儿来说也是来着不拒的，练就吸星大法的时候，尽量多的吸收知识，最后达到物尽其用的效果 尽管这些数据一时半会确实不会有太大的变化，不过总觉得还是有些low的。于是学习了关于爬虫的知识后，打算和大家一起探讨交流一…"}, {"id": "6998336644512219149", "title": "JS基础：14、深拷贝、浅拷贝", "desc": "引言 浅拷贝 深拷贝 对象深拷贝方法 1、JSON方法 缺点是：属性undefined无法复制，属性function无法复制 2、递归 同样适用于数组深拷贝 3、Object.assign(targe"}, {"id": "6952724539423850526", "title": "new， call，apply，bind 原理剖析及手写实现", "desc": "new， call，apply，bind的手写实现, 从底层原理剖析，让你从根本上明白并轻松地实现！"}, {"id": "6844903746984476686", "title": "面试官问：JS的this指向", "desc": "面试官出很多考题，基本都会变着方式来考察this指向，看候选人对JS基础知识是否扎实。 读者可以先拉到底部看总结，再谷歌（或各技术平台）搜索几篇类似文章，看笔者写的文章和别人有什么不同（欢迎在评论区评论不同之处），对比来看，验证与自己现有知识是否有盲点，多看几篇，自然就会完善自…"}, {"id": "6909479346646286343", "title": "如何开发一款H5小程序直播", "desc": "大前端这几年算是一个热词，对于前段来说如果不是大前端，技术相对来说就已经算是落后了。如果还停留在对ES6，Vue这些基本技能的学习只能说处于一个及格线。 如果想做的卓越必须必备另一些大前端技能，比如说NodeJS，express.js, koaJs服务类，或者three.js这…"}, {"id": "6994458677721694215", "title": "史上最全 JS 数组常用方法详解总结.", "desc": "我们在日常开发中，与接口打交道最多了，前端通过访问后端接口，然后将接口数据二次处理渲染到页面当中。 二次处理的过程是 考验 Coder 对 Array 是否熟练 以及 在 何种 场景下使用哪种方法处理"}, {"id": "6844903592822833160", "title": "高阶函数，你怎么那么漂亮呢！", "desc": "亲们，函数作为返回值输出的应用场景那就太多了，这也体现了函数式编程的思想。其实从闭包的例子中我们就已经看到了关于高阶函数的相关内容了，哈哈 还记得在我们去判断数据类型的时候，我们都是通过Object.prototype.toString来计算的。每个数据类型之间只是'[obje…"}, {"id": "6921524974687617037", "title": "带你入门前端工程（二）：统一规范", "desc": "代码规范是指程序员在编码时要遵守的规则，规范的目的就是为了让程序员编写易于阅读、可维护的代码。 试想一下，一个几十万行代码的项目，存在几种不同的代码规范，阅读起来是什么感受？连代码缩进使用空格还是 Tab 都能引发不少程序员的争论，可以说统一代码规范是非常重要的事情。 当团队的…"}, {"id": "6844903684015407118", "title": "[前端开发]--分享个人习惯的命名方式", "desc": "如果说计算机科学只存在两个难题：缓存失效和命名。那么我就觉得命名的难点只有两个：词汇量和坚持贯彻执行制定的规范。 最近在知乎上看到这个：作为程序员，有没有让你感到既无语又崩溃的程序命名？。顿时感慨万千，因为命名对于程序员来说是就是一个难题，有时候因为命名，可能会引起别人的误导，…"}, {"id": "6963860501545615390", "title": "潮流前端周刊（第30期）- 不天黑的乌鲁木齐", "desc": "潮流周刊居然 30 期了，人很多时候容易高估短期的影响，却缺低估长期的力量，写周刊一样，投资也一样；同时也祝关注潮流周刊的同学继续保持潮流的工作方式，并幸福的敲代码~"}, {"id": "6844903833387155464", "title": "JavaScript中的垃圾回收和内存泄漏", "desc": "程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存。所谓的内存泄漏简单来说是不再用到的内存，没有及时释放。为了更好避免内存泄漏，我们先介绍Javascript垃圾回收机制。 在C与C++等语言中，开发人员可以直接控制内存的申请和回收。但是在Java、C#、J…"}, {"id": "7001140002285420575", "title": "【最简系列】手写一个vue的响应式原理 | 不贴源码，只求易懂", "desc": "从Vue面世以来，其`响应式`的特点就被人津津乐道，相应的`源码解析文章`层出不穷，但还是有些童鞋读过这些文章后依然困惑不已，究其原因大多是因为文章中`倾向于整段/完整的复制源码`，虽然这样可以将vu"}, {"id": "6844903727552266254", "title": "2018 前端开发分享", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 查阅网上诸…"}, {"id": "6844903608467587085", "title": "解锁多种JavaScript数组去重姿势", "desc": "JavaScript数组去重，一个老生常谈的问题了，但这次是解锁多种JavaScript数组去重姿势。 双重循环去重实现比较容易。 基本思路：如果索引不是第一个索引，说明是重复值。 基本思路：先对原数组进行排序，然后再进行元素比较。 基本思路：利用了对象的key不可以重复的特性…"}, {"id": "6996973343280431118", "title": "记一次markdown-it插件学习", "desc": "markdown是一种常用的文档编辑语法，markdown语法解析即markdown-it也是程序员必备的文档开发利器。"}, {"id": "6954896971370856485", "title": "富文本编辑器 L1 能力调研记录", "desc": "所谓 L1 能力，即弃用浏览器自带的 execCommand ，自己来实现富文本样式操作。 我从 4.3 开始陆续业余时间调研，目前已有 2-3 周，分享一些调研记录。"}, {"id": "6844903617971879949", "title": "手把手教你撸一个简易的 webpack", "desc": "随着前端复杂度的不断提升，诞生出很多打包工具，比如最先的grunt，gulp。到后来的webpack和Parcel。但是目前很多脚手架工具，比如vue-cli已经帮我们集成了一些构建工具的使用。有的时候我们可能并不知道其内部的实现原理。其实了解这些工具的工作方式可以帮助我们更好…"}, {"id": "7002623104115539982", "title": "JavaScript 回顾（八）", "desc": "这是我参与更文挑战的第31天，活动详情查看: 更文挑战 1, DOM 查询 (1) 获取body标签 (2) 根据元素的class属性值查询一组元素节点对象 注意：兼容性最好的就是： querySel"}, {"id": "6844904050014552072", "title": "带你彻底搞懂Vue3的Proxy响应式原理！TypeScript从零实现基于Proxy的响应式库。", "desc": "hodux,react-easy-state，内部有一个基于proxy实现响应式的基础仓库observer-util，它的代码实现和Vue3中的响应式原理非常相似，这篇文章就从这个仓库入手，一步一步带你剖析响应式的实现。 本文的代码是我参考observer-util用ts的重写…"}, {"id": "7000660007146487821", "title": "js核心笔记第四天", "desc": "数组 1，数组API 排序 末尾添加 末尾删除 开头添加 开头删除 以上的API均是改变的原数组 2，栈和队列 栈 first in last out(先进后出) -- 可以想象成一个很宅的车头那一头"}, {"id": "6844904077889912839", "title": "手把手教你开发一个 chrome 扩展程序", "desc": "chrome 扩展程序是 HTML\\JS\\CSS\\images 和其他可以在 web 页面中使用的资源的压缩包，可以增强 chrome 浏览器功能或定制浏览体验。 chrome 扩展程序本质上是网页，可以使用浏览器为网页提供的所有 API 。 清单文件必须要命名为 manife…"}, {"id": "7000548034954133512", "title": "理解+总结常用的事件 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前言 js事件是为了实现用户交互，比如当用户鼠标点击或者键盘输入时，浏览器会监听截获并且通知js做出反馈执行相应的函数，实现交互 js的事"}, {"id": "6956481519221211143", "title": "模拟实现Promise，探究Promise原理", "desc": "前言 在最早之前写node的时候，异步都是采用回调，虽然尽可能避免，但是功能复杂的时候，回调地狱还是不免出现。 幸好后来有promise了。最近得空，研究了一下promise的实现。"}, {"id": "7001140171643027493", "title": "JavaScript知识点回顾（二十八）——混入（三）", "desc": "这是我参与8月更文挑战的第二十八天，活动详情查看：8月更文挑战 显式混入 由于JavaScript不会自动实现复制行为，所以我们需要手动实现复制功能。"}, {"id": "6993082933833629703", "title": "Redux 核心源码", "desc": "前言 Redux 是 JS 应用的状态容器，提供可预测的状态管理。可以让你开发出行为稳定可预测的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。 基础示例 Redux 工作流程 几个"}, {"id": "6844903864743755789", "title": "给项目加一个骨架屏吧", "desc": "骨架屏可以理解为是当数据还未加载进来前，页面的一个空白版本，一个简单的关键渲染路径。用户会看到一个样式简单，描绘了当前页面的大致框架的骨架屏页面，然后骨架屏中各个占位部分被实际资源完全替换，这个过程中用户会觉得内容正在逐渐加载即将呈现，降低了用户的焦躁情绪，使得加载过程主观上变…"}, {"id": "6992514683286585352", "title": "【javaScript】 3分钟弄懂变量提升", "desc": "变量提升是什么 变量提升时js里一个很特殊的概念，这和js代码的编译和执行，所用域息息相关。 写js的时候，你有没有发现，变量声明就算是写"}, {"id": "6954595557876695076", "title": "技术周刊：Node.js 16发布；中国首个 JavaScript 语言提案在 ECMA 进入 Stage 3", "desc": "前端快爆 Firefox 88 正式发布，主要包含以下特性： 正式禁用 FTP 协议，计划在 Firefox 90 版本中完全删除 FTP 支持。此前，Safari 14、Chrome 87 已禁用 "}, {"id": "6995186438446792734", "title": "JavaScript 中的变量，在内存中的具体存储形式，你知道吗？", "desc": "内存空间又被分为两种：栈内存与堆内存。下面我们就 JavaScript 的内存空间，开启我们的探索之旅。通过对内存空间的学习，以此为基础，一步一步的理解 JavaScript 的重要概念。"}, {"id": "6846687603484262414", "title": "一看就会的JS封装篇 💐", "desc": "把客观事物封装成抽象的类，隐藏属性和方法，仅对外公开接口。 封装，就是把一个零零散散的东西做成一个组件。 打个很简单的比方，有的人用电脑不需要机箱，主板内存条显卡电源都裸露在外面，他觉得这样挺好，可以散热。但是大部分人还是会用机箱把所有的硬件都包装起来。优点嘛，第一便于到处使用…"}, {"id": "6844903878253608974", "title": "作为一个前端工程师也要掌握的几种文件路径知识", "desc": "之前在做webpack配置时候多次用到路径相关内容，最近在写项目的时候，有一个文件需要上传到阿里云oss的功能，同时本地服务器也需要保留一个文件备份。多次用到了文件路径相关内容以及Node核心API的path模块，所以系统的学习了一下，整理了这篇文章。 作者简介：koala，专…"}, {"id": "6844903905394950158", "title": "一步一步搭建前端监控系统：如何记录用户行为？", "desc": "摘要： 通过记录用户行为，快速复现BUG场景。 **背景：**市面上的监控系统有很多，大多收费，对于小型前端项目来说，必然是痛点。另一点主要原因是，功能虽然通用，却未必能够满足我们自己的需求, 所以我们自给自足也许是个不错的办法。 这是搭建前端监控系统的第二章，主要是介绍如何统…"}, {"id": "6995885514607837221", "title": "重温ES6系列之“数组实例的entries()，keys()、values()、includes()”", "desc": "entries()，keys()和values() ES6提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章"}, {"id": "6985033972531068942", "title": "js Map对象的用法", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 一、Map对象方法 Map： Map是一组键值对的结构，具有极快的查找速度。 举个例子，假设要根据同学的名字查找对"}, {"id": "6979778428505423886", "title": "前端面试高频出现的八个基础JS概念", "desc": "面试常考题， Javascript 世界里将数据类型分为了两种：原始数据类型 与 引用数据类型，共有八种数据类型。"}, {"id": "6982097736564752392", "title": "Hybrid开发-JSBridge原理", "desc": "Hybrid混合开发相对于单一的客户端开发有着开发周期短，迭代快的优势，JSBridge作为桥梁能赋予Hybird客户端能力。本文详细介绍JSBridge的实现原理。"}, {"id": "6844903629187448845", "title": "Promise之你看得懂的Promise", "desc": "终于，我们的盖世英雄出现了，他身披金甲圣衣、驾着七彩祥云。好吧打岔儿了，没错他就是我们的Promise，那让我们来看看用了Promise之后，上面的代码会变成什么样吧 真的是很方便，有木有？意中人可以说是Swag到变形了。那么言归正传，我们怎么才能自己写一个这么Swag的解决异…"}, {"id": "6985156076123619342", "title": "轻松搞定 webpack loader （基础>>>深入）", "desc": "我们根据三个问题深入学习 loader 。 什么是 loader ，它能干什么? 为什么需要 loader ? 如何使用 loader ，有哪些要掌握的核心?"}, {"id": "6988298837160886303", "title": "antd pro layout 如何通过 menuRender 控制菜单的显示隐藏（非原理）", "desc": "最近在写基于 umi、qiankun 的微前端后台管理平台，因为是基于实现真实需求做的，因此有要实现这么一个功能。​ 登录进入后，不展示菜单 进入子应用后，方才显示子应用菜单 ​ 那就需要切换菜单的显"}, {"id": "6844903582622285831", "title": "React Fiber", "desc": "react在进行组件渲染时，从setState开始到渲染完成整个过程是同步的（“一气呵成”）。如果需要渲染的组件比较庞大，js执行会占据主线程时间较长，会导致页面响应度变差，使得react在动画、手势等应用中效果比较差。 为了解决这个问题，react团队经过两年的工作，重写了r…"}, {"id": "6995090876011659301", "title": "JavaScript引用类型之Array", "desc": "JSON是前后端交换文本信息的语法，应用广泛。基于这种语法的特点，后端接口返回得前端渲染的数据不是数组形式的就是对象形式的，所以熟练使用数组和对象的操作方法很重要。 一、不改变原数组的方法 （一）检测"}, {"id": "7001112404339720223", "title": "JavaScript进阶（六）继承", "desc": "对于使用过基于类的语言 (如 Java 或 C++) 的开发者们来说，JavaScript 是比较费解的 —— JavaScript 是动态的，本身不提供一个 `class` 的实现。即便是在 ES"}, {"id": "6854573212894920712", "title": "解读 Chrome 84 新特性", "desc": "在4月，Chrome 暂时推迟了 SameSite Cookie 属性的推行，以确保在 COVID-19 响应的关键初始阶段提供基本服务的网站的稳定性。 这几个月，Chrome 一直在关注这些网站的准备情况，Chrome 84 会同时恢复对 SameSite cookie 的强…"}, {"id": "6992793432460623879", "title": "前端必备数据结构——链表", "desc": "链表的优势 链表相对于数组的优点在于： 内存空间不是必须连续的，可以充分利用计算机的内存，实现灵活的内存动态管理。"}, {"id": "6865860467307315207", "title": "你不知道的 TypeScript 高级类型", "desc": "对于有 JavaScript 基础的同学来说，入门 TypeScript 其实很容易，只需要简单掌握其基础的类型系统就可以逐步将 JS 应用过渡到 TS 应用。 然而，当应用越来越复杂，我们很容易把一些变量设置为 any 类型，TypeScript 写着写着也就成了 AnySc…"}, {"id": "6844903957706309646", "title": "Vue 3 原理剖析：数据响应系统", "desc": "这是我的剖析 Vue 3 原理的第一篇文章。这篇将会带着大家学习数据响应相关的内容，并且尽可能的脱离源码来了解原理，降低大家的学习难度。 Vue 3 目前的状态其实很适合阅读，因为代码量不多，并且核心功能是不会有什么大的变动的。 因此笔者 fork 了目前的源码，并且加以注释。…"}, {"id": "6844904128393510919", "title": "7个很棒的JavaScript产品步骤引导库，不信你用不上", "desc": "1. Intro.js Intro.js 由于其用户友好的解决方案而被广泛使用，并拥有1.9万个GitHub star。其最重要的功能是： 体积小，速度快：体积较小，因此引导过程顺畅而直观。JavaScript文件的总大小为10KB, CSS为2.5KB。 用户友好：导航是用户…"}, {"id": "6994066571211571214", "title": "JavaScript 系列之闭包（一）", "desc": "[JavaScript 系列之闭包｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6999456272697262087", "title": "进阶教程 11. 同源策略/跨域", "desc": "同源策略 ，什么是同源策略？ 同源策略(Same-origin Policy)构成及要求；跨域资源共享，跨域，CORS，JSONP，简单请求"}, {"id": "6939721137181949966", "title": "使用JavaScript开发一个Photoshop插件", "desc": "作为前端开发者，我们可以利用Web技术在非常多的环境下开发应用，为相关的用户提供服务。其中，以Photoshop为首的Adobe系列工具是我们时长要去面对的一个平台级应用。Photoshop在图像处理上有着很强大的功能，用户量也非常可观，而且其功能在前端开发的一些情况下也用得到…"}, {"id": "6967637975844782088", "title": "【编程导航】国外大神总结的实用代码，30 秒学会！", "desc": "这是我参与更文挑战的第N天，活动详情查看： 更文挑战 大家好，我是鱼二。我发现很多朋友学编程时都存在这样一个问题，虽然看视频教程或者书籍能看懂，但是离开了教程，自己却写不出来代码，更别提写出优质的代码"}, {"id": "6989856354479374372", "title": "每天一题，forEach", "desc": "今天要实现的是forEach函数，既可以遍历数组，也可以遍历对象，还有一个\"小众\"功能，改变函数内this的指向。 问题 具体实现 实现思路 参数： obj（Array | Object）：需要遍历的"}, {"id": "6844904205472415751", "title": "[查缺补漏]续上一期JS输出题酸爽继续（内容共1.8W字+）", "desc": "下面是我收集一些有趣的，易错的JS代码题，对JS基础知识点的考察都有所涉及，内容可能不全面，希望对大家有所帮助。 41. 「下面代码的输出是什么?」 null 是 falsy。 !null 的值是 true。 !true 的值是 false。 \"\" 是 falsy。 !\"\" 的…"}, {"id": "6844903663035482125", "title": "急速JavaScript全栈教程", "desc": "自从一年前发布了Vuejs小书的电子书，也有些日子没有碰过它们了，现在因为项目的缘故，需要使用JavaScript全栈开发。所以，我得把这个全栈环境搭建起来。 整个系列，是会采用我的一贯风格，就是不疾不徐，娓娓道来，学习完毕，你可以掌握我提到的全系列的知识，并且得到一个可以直接…"}, {"id": "6907146147065856013", "title": "面试遇到的6道面试题", "desc": "今天被抓差给候选者进行初面。在这里记录一下面试中涉及的几个知识点。 每次面试我都会递给候选者一瓶水，这样可以让候选者没那么紧张，有更好的状态进行面试，毕竟面试是双向选择，公司也需要尽快找到合适的人，没那么多网上说的心理战。 这里我还想吐槽一下面试造火箭工作拧螺丝，尤其是开发行业…"}, {"id": "6999574021213782047", "title": "海绵宝宝邀您品鉴-JS设计模式(行为型)", "desc": "Behavioral Design Patterns 行为型设计模式 关于行为型设计模式 它涉及对象之间的职责分配。 它与结构型设计模式不同"}, {"id": "6954911721324707877", "title": "精读《React Server Component》", "desc": "截止目前，React Server Component 还在开发与研究中，因此不适合投入生产环境使用。但其概念非常有趣，值得技术人学习。 目前除了国内各种博客、知乎解读外，最一手的学习资料有下面两处："}, {"id": "6969556282671890463", "title": "当聊到前端性能优化时，我们会关注什么？", "desc": "关于这期分享内容 性能优化一直是前端领域老生常谈的问题，系统的性能以及稳定性很大程度上决定着产品的用户体验以及产品所能达到的高度。而tob和toc系统又有着不同的业务场景，性能优化也有着不用的着力点。"}, {"id": "6894629999215640583", "title": "图解 script 标签中的 async 和 defer 属性", "desc": "浏览器在解析 HTML 的时候，如果遇到一个没有任何属性的 script 标签，就会暂停解析，先发送网络请求获取该 JS 脚本的代码内容，然后让 JS 引擎执行该代码，当代码执行完毕后恢复解析。整个过程如下图所示： 可以看到，script 阻塞了浏览器对 HTML 的解析，如果…"}, {"id": "6844903682018902029", "title": "JavaScript 数据类型检测终极解决方案", "desc": "JavaScript 的数据类型检测是我们平时开发中经常会遇到的场景，小到基本数据类型大至各种引用数据类型的检测，都是我们需要掌握的知识点。本章会详细讲解 JavaScript 中各种不同数据类型的检测方法以及最后会实现一个数据类型检测的终极方法。 红宝石书告诉我们，JavaS…"}, {"id": "6895339464013381640", "title": "练手小demo——搜索页面", "desc": "我们在使用某度搜索引擎的时候，其页面的垃圾信息一直困扰着我们。 通过这篇博客我们可以自己写一个某度的搜索界面，而且可以按这种方式将 某歌 某应都集成在一个界面中，方便我们使用。 这里使用的并不是原生的 JavaScript ，这里引入了一个第三方库—— jQuery。 人家 百…"}, {"id": "6982754652441821214", "title": "判断浏览器页面关闭还是刷新", "desc": "1，登录态本地信息判断/是否登录 登录后会将用户名存储在localstorage当中如果没储存就说明没有登录2，监听关闭前的事件 3，监听方法离开当前页面时执行函数和载入文档时执行函数"}, {"id": "6982438787167027237", "title": "纯JS 实现列表轻点删除、长按拖拽及错位排序动画", "desc": "这里简单说下实现轻点、长按列表实现错位排序动画实现思路，这里只用到了JQ，没有使用其他的库。胸有成竹、不屑一顾的大神请直接跳到最后点个赞也好，非常感谢。 用户手势交互可以直接使用mouse事件处理（移"}, {"id": "6988740933885886472", "title": "手写Promise.all()", "desc": "前言 面试官问：你了解Promise吗？用的多吗? 如果你说了解，用的多，面试官基本上不会叫你手写Promise/A+规范,因为面试一般在1小时左右，手写Promise/A+会花费很长的时间；所以可能"}, {"id": "6995760114091163661", "title": "JavaScript中的相等运算符\"==\"，你真的搞懂了么？", "desc": "通过本文，帮助读者快速了解Javascript相等操作符\"==\"中存在的隐式转换规则以及数据类型相关的知识。"}, {"id": "6991673128682274829", "title": "【前端--JavaScript】知识点（一）——先有鸡（赋值）还是先有蛋（声明）|  8月更文挑战", "desc": "在一个阳光明媚的早晨，Y同学拿着手里的早餐——鸡蛋不禁想起一个问题，先有鸡还是先有蛋呢？于是和C同学讨论起来这个问题，双方各执一词。"}, {"id": "6981361874780569637", "title": "站在‘上帝 ’角度，透视v8 执行 js 的过程", "desc": "站在‘上帝’角度，透视v8 执行 js 的过程 ​ 大部分同学知道JavaScript 是如何工作的，但是不太清楚 JavaScript 的底层工作机制，很多时候，只有了解了底层原理，才能帮助你更好地"}, {"id": "6844903864966217742", "title": "为什么 ['1', '7', '11'].map(parseInt) 返回 [1, NaN, 3]", "desc": "Javascript很奇怪。不相信我？尝试使用map和parseInt将字符串数组转换为整数。启动控制台（Chrome上的F12），粘贴以下内容，然后按Enter 我们最终得到的不是一个[1, 7, 11] 这样的整数数组,而是这样的长这样的 [1, NaN, 3] 一个数组。…"}, {"id": "7002604047362588680", "title": "JavaScript的函数提升和变量提升", "desc": "在JavaScript中会存在一些这样的现象：一个变量在声明之前就可以访问而没有抛出异常，一个函数在声明之前就调用了，也没有抛出异常。 这就涉及到变量或者函数提升！ 作用域 全局作用域、函数作用域和块"}, {"id": "6997233921276510221", "title": "前端刷题路-Day83：相交链表（题号160）", "desc": "给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。 图示两个链表在节点 c1 开始相交..."}, {"id": "6844903842056765454", "title": "[译] Javascript 中 Array.push 要比 Array.concat 快 945 倍！🤯🤔", "desc": "如果要合并拥有上千个元素的数组，使用 arr1.push(...arr2) 可比 arr1 = arr1.concat(arr2) 节省时间。如果你想要再快一点，你甚至可以编写自己的函数来实现合并数组的功能。 最近，我们有一个用户抱怨他在使用 UI-licious 对他们的 U…"}, {"id": "7000550364915171335", "title": "前端刷题路-Day92：和为K的子数组（题号560）", "desc": "给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。 示例1： 说明： 数组的长度为 [1, 20,000]。 数组中元素的范围..."}, {"id": "7004617849306087454", "title": "3.作用域、作用域提升、执行上下文", "desc": "JavaScript在V8引擎中执行过程 非函数执行过程 代码进行解析，V8引擎内部在解析成AST语法树之前会帮助我们创建一个GlobalObject(GO)对象，内容如下： 编译阶段所有变量都会进入"}, {"id": "7004617646368882696", "title": "1.浏览器工作原理和V8引擎", "desc": "Any application that can be written in JavaScript, will eventually be written in JavaScript. —Jeff"}, {"id": "7005358208881524749", "title": "JavaScript原型的那些事", "desc": "终于搞懂Javascript原型，[[Prototyoe]]、__proto__、prototype它们之间的区别与联系。"}, {"id": "6844904136014561294", "title": "论如何优雅的写出不会挨揍的代码", "desc": "No code is the best way to write secure and reliable applications. Write nothing; deploy nowhere. Start by not writing any code. This is ju…"}, {"id": "6844904047258910728", "title": "你真的会将类数组转化为数组吗", "desc": "这在 DOM 中甚为常见，如各种元素检索 API 返回的都是类数组，如 document.getElementsByTagName，document.querySelectorAll 等等。除了 DOM API 中，常见的 function 中的 arguments 也是类数组…"}, {"id": "6926684736442073102", "title": "面试官：谈谈你对原型和原型链的理解", "desc": "一个看似最最最基础的面试题，但是这送分题，回答的不好可能就变成了送命题。接下来就让我们一起来探讨探讨~ JavaScript 常被描述为一种基于原型的语言 (prototype-based language)——每个实例对象（ object ）都有一个私有属性（称之为 prot…"}, {"id": "6964579731387711501", "title": "Javascript闭包的几种写法及用途", "desc": "1、什么是闭包 闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。 闭包的特点： 作为一个函数变量的一个引用，当函数返回时，"}, {"id": "6844903678952865800", "title": "Taro下利用Decorator快速实现小程序分享", "desc": "关于微信分享逻辑微信小程序下开发转发有两个途径在Page的onLoad里面定义wx.showShareMenu()显示当前页面的转发按钮使用button的open-type=share让用户点击按钮触"}, {"id": "6881241853258104839", "title": "「查漏补缺」深度剖析JavaScript ES5/AMD/CMD/COMMONJS/ES6模块化（加薪必备）| 掘金技术征文-双节特别篇", "desc": "CommonJS 出现就是解决原本 js 文件引入出现的不足点，即 模块依赖 和 全局污染 问题。它并不是一个 JS语言啥的，而是对于模块化的一个规范。 做法是通过 require 引入模块，通过 module.exports 导出，并且文件加载是同步完成的。 对服务端比较友好…"}, {"id": "6844903783869349902", "title": "TypeScript 简明教程：认识 TypeScript", "desc": "作为一名 JavaScript 开发者，如果你总在担心代码上线后会不会冷不丁报个 undefined，如果你写代码时总需要在文件间来回跳转查阅接口，如果你正准备接手一个大型 JS 项目，那么，该是时候考虑使用 TypeScript 了。 根据 TS 官网 的介绍：TypeScr…"}, {"id": "6844903571654180878", "title": "【D3.js 入门系列一】从零开始绘制一个柱形图", "desc": "D3 的全称是（Data-Driven Documents），顾名思义可以知道是一个被数据驱动的文档。听名字有点抽象，说简单一点，其实就是一个 JavaScript 的函数库，使用它主要是用来做数据可视化的。 D3 提供了各种简单易用的函数，大大简化了 JavaScript 操…"}, {"id": "6975583941801541646", "title": "关于Javascript原型与继承的思考", "desc": "从一个对象开始，探索继承的实现，讨论基于原型的继承跟基于原型的继承的区别，再研究Javascript函数与对象的本质。"}, {"id": "6956547503668133895", "title": "JavaScripts高阶（7）原型（prototype）和原型链（__proto__）", "desc": "JS中的对象和函数汇总 对象数据类型的值 函数数据类型值 原型prototype(对象数据类型) 1、所有的函数(类)都`天生自带一个属性：prototype（原型） 2、prototype是个对象数"}, {"id": "6844903687190478855", "title": "揭密 Vue 的双向绑定", "desc": "Vue 中需要输入什么内容的时候，自然会想到使用 <input v-model=\"xxx\" /> 的方式来实现双向绑定。下面是一个最简单的示例 在这个示例的输入框中输入的内容，会随后呈现出来。这是 Vue 原生对 <input> 的良好支持，也是一个父组件和子组件之间进行双向数…"}, {"id": "6844903831415816205", "title": "前端图片裁剪实战", "desc": "在当下的的前端项目中，图片功能可以说是非常常见的，图片的展示、图片的裁剪编辑、图片的上传等，那么我们的项目便来了个需求。 当下我们项目中需要一个可自由编辑图片的功能，当图片可能出现需要频繁编辑，同时能满足发现裁剪不满意想要微调的时候，会发现如果我们处理图片按照平常的习惯，如裁剪…"}, {"id": "6844903864852807688", "title": "开发中常用的 25 个JavaScript 单行代码", "desc": "下面为大家介绍我在开发中常用的30个JavaScript单行代码，没有特别的顺序。 如果myProperty结果为false，则 && 失败并且不设置新属性; 否则，如果不为空，&& 将设置新属性并覆盖原来的值。 支持无限制合并，但如果对象之间存在相同属性，则后面属性会覆盖前面…"}, {"id": "6844903630038892558", "title": "node基础面试事件环？微任务、宏任务？一篇带你飞", "desc": "我们这里来举个例子，我们node和java相比，在同样的请求下谁更占优一点。看图 当用户请求量增高时，node相对于java有更好的处理并发性能，它可以快速通过主线程绑定事件。java每次都要创建一个线程，虽然java现在有个线程池的概念，可以控制线程的复用和数量。 异步i/o…"}, {"id": "6844904115097567239", "title": "JS中数据类型检测四种方式的优缺点", "desc": "对于数据类型检测笔者之前写过一篇typeof的JS中数据类型检测方法——typeof，今天就整理下JS中数据类型检测的四种方式的区别：tyepof[value]：检测数据类型的运算符[example]"}, {"id": "6997389219295395870", "title": "JS-reduce用法", "desc": "参考简书的这篇文章：https://www.jianshu.com/p/e375ba1cfc47 1、语法 ** reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元"}, {"id": "7002532439641817096", "title": "你不知道的javascript摘要", "desc": "数据类型 number： 类型转换规则： undefined ---> NaN null--->0 Boolean：非空的字符串总是 true '0' ---> true, 0---> false n"}, {"id": "6997399600189407240", "title": "解构赋值（代码简洁之道）", "desc": "序言 一说到解构赋值，第一想到肯定是对象了，但是JS中最常用的数据结构除了Object对象，还有Array数组。解构赋值 是ES6"}, {"id": "7002762546440568845", "title": "下面代码中 a 在什么情况下会打印 1?(考察隐式转换)", "desc": "题目如下 解法 1.利用toString 2.利用valueOf 3.数组 4.ES6的symbol"}, {"id": "6855129007055175694", "title": "15个简单实用的JavaScript技巧让你的代码更优雅🍊", "desc": "给定一个对象数组，如果要获取属性的值而不要重复，则可以执行以下操作。 如果要对数组进行一些修改，然后过滤新数组，则可以尝试这样的操作。请记住，原本的myArray保持不变。 这里提供的功能是将number数组中的两个元素与sort方法进行比较。此功能可帮助我们接收正确的输出。 …"}, {"id": "6921638355214008334", "title": "从浏览器原理谈EventLoop与微任务宏任务", "desc": "这里以程序员都爱用的Chrome为例，Chrome采用多进程架构，由多个进程组成，进程下包含多个线程。 Chrome中主要有四个主要进程。 1. 浏览器进程（Browser Process） 2. 渲染器进程（Renderer Process） Main: 构建dom树 -> …"}, {"id": "6844903798779936782", "title": "精读《Function VS Class 组件》", "desc": "1. 引言 为什么要了解 Function 写法的组件呢？因为它正在变得越来越重要。 how-are-function-components-different-from-classes 这篇文章带来了一个独特的视角。 2. 概述 原文事先申明：并没有对 Function 与 …"}, {"id": "6918380169661153293", "title": "忘掉了没关系！再来一遍JavaScript原型链", "desc": "先提出一个问题：将函数定义在全局作用域，会污染全局作用域的命名空间（接下来起了个同名函数就会覆盖），而且非常不安全（别人一起写时，也可能会写一样名字的函数）。 ——将这些函数放到原型对象中去。那么什么是原型对象? 我们所建立的每一个函数，解析器都会向函数中添加一个属性proto…"}, {"id": "6844903698045370376", "title": "Base64原理", "desc": "一. Base64编码由来 为什么会有Base64编码呢？因为有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，像ASCII码的控制字符就不能通过邮件传送。这样用途就受到了很大的限制，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。最好的方…"}, {"id": "6844904009606791175", "title": "虚拟DOM的优劣如何", "desc": "所谓DOM渲染，即浏览器将HTML字符串转换成网页视图并渲染视图的过程。 首先，浏览器的HTML解析器，会对HTML字符串进行解析，并将它转换成DOM树，同时，CSS解析器也会解析HTML使用到的CSS样式，生成一系列CSS规则。 然后浏览器的渲染引擎将DOM树和CSS规则进行…"}, {"id": "6844903773828022279", "title": "Next.js踩坑记录", "desc": "几乎一整年没咋写文章，主要是懒，加上工作也挺忙。但是想趁着年底发一篇，希望明年更勤奋一点。其实不是没东西写，就是想深入一个东西还是很困难的，要查各种资料，最终还是懒就是了。 next.js是react的同构库，很多文章里把他当作一个脚手架，也不是不行，但是个人认为next.js…"}, {"id": "6844903716777099278", "title": "Egg.js 源码分析-项目启动", "desc": "负责腾讯云DNSPod产品的系统研发工作，完成系统前端功能及后端逻辑代码实现，保障产品质量及研发进度。 前端时间抽出时间针对Koa2源码进行了简单的学习，koa 源码是一个很简单的库， 针对分析过程， 想手把手的实现一个类型koa 的框架，其代码, 根据一步步的完善实现一个简单…"}, {"id": "6872156077203718151", "title": "精读《BI 搭建 - 筛选条件》", "desc": "筛选条件是 BI 搭建的核心概念，我们大部分所说的探索式分析、图表联动也都属于筛选条件的范畴，其本质就是一个组件对另一个组件的数据查询起到筛选作用。 若干 “具有输出能力” 的组件作为筛选组件，点击查询按钮时触发其作用组件重新取数。 一个表格的表头点击也可以触发筛选行为，或者柱…"}, {"id": "6962187601583276063", "title": "一.深入探讨JS数据类型", "desc": "本文详细介绍了JavaScript八种数据类型，并对基本数据类型和引用数据类型作了比较，以及js中比较令人头疼的数据类型转换"}, {"id": "6957676979747487780", "title": " 【Magic JavaScript】原型编程，你真的理解了吗？", "desc": "原型是JavaScript中非常核心的知识点，可以说JavaScript是一门面向原型编程的语言，我们一起来复习一下原型编程的相关知识。"}, {"id": "6946433097323954183", "title": "技术周报 · 2021-04-02", "desc": "小编推荐CSS 实现优惠券的技巧我经常和面试者聊的一个题目跨平台 Web Canvas 渲染引擎架构的设计与思考JavaScript正则表达式引发的血案如何实现高性能的在线 PDF 预览AST 分析原"}, {"id": "6896267157580021774", "title": "【循序渐进】搞懂防抖和节流", "desc": "防抖和节流大家应该都不陌生，作为性能优化（可以是前端页面的响应性能方面，也可以是降低服务器压力方面）的必要技巧，我们说什么都要好好讲一讲，另外也本着一天一个小目标，循序渐进吃透一个知识点的劲头，今天，我们就来细聊下防抖和节流的神奇魔法。 本文将会从基础版本的防抖和节流开始，并逐…"}, {"id": "6988854308515086372", "title": "一维数组和二维数组的相互转换", "desc": "使用场景：接口返回一个数组，展示时每行固定显示n个，则可将返回的数组转成二维数组[[...n], [...n]...]的形式循环展示 1. 一维数组转二维数组 输出： 将其封装为如下： 结果如下图 2"}, {"id": "6982864767778029576", "title": "promise （Es6）", "desc": "1.什么是Promise？ promise是一个对象，可以获取异步操作的消息 Promise对象是一个构造函数，用来生成Promise实例 2.作用 解决异步请求请求问题 1.传统方式解决异步，用回调"}, {"id": "6844903939163308046", "title": "闭包及闭包的应用", "desc": "abstract: Welcome to my blog, enter password to read. message: Welcome to my blog, enter password to read. 前端开发人员对闭包这个知识点，一定都不陌生，我们都知道闭包的概念…"}, {"id": "6992201842201952269", "title": "深入理解红宝书(3)", "desc": "本章讲了js的一些基础知识,包括语法规范和v保留字,关键字,由于篇幅太长,第三章的知识会做一些分割..."}, {"id": "6956477990549553166", "title": "面试复习：事件循环（event loop）", "desc": "一、单线程与多线程 单线程语言：JavaScript的设计就是为了处理浏览器网页的交互，决定了它是一门单线程语言。 JavaScript是单线程的，那么处理任务就是一件接着一件处理，从上往下顺序执行。"}, {"id": "6925802153860661256", "title": "浅析jQuery", "desc": "本文主要用来理解jQuery的闭包和链式操作核心思想，以及一些函数的实现。要知道是怎么来的。--资料来源于饥人谷 阮一峰jQuery设计思想。本文源代码 你只管去写代码，把你的代码尽量写好，不断重写。 main.js里意思是api就是this。那可以直接ruturn this。…"}, {"id": "6844903817612361735", "title": "「前端那些事儿」⑤ 定位性能指标FMP", "desc": "可能大家对「白屏时间」这个名词并不陌生，他是「刀耕火种」年代，我们收集的页面性能指标之一，随着前端工程的复杂化，白屏时间已经没有什么实质性的意义了，取而代之的就是 FMP。 先来介绍几个与之相关的名词。 FMP（First Meaning Paint）：首次有效绘制，标记主角元…"}, {"id": "6975480683548377119", "title": "数据结构之集合", "desc": "这是我参与更文挑战的第19天，活动详情查看：更文挑战 什么是集合 集合是由一组无序且唯一（即不能重复）的项组成的。我们使用对象来实现集合，利用了对象的键的唯一性"}, {"id": "7000016179620216846", "title": "常见的排序算法", "desc": "纪录下常见的几种排序 冒泡排序 原理： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 针对"}, {"id": "6908883342034632712", "title": "vivo 商城架构升级-SSR 实战篇", "desc": "一、前言在前面几篇文章中，相信大家对vivo官网商城的前端架构演变有了一定的了解，从稳步推进前后端分离到小程序多端探索实践，团队不断创新尝试。在本文中，我们来分享一下vivo官网商城在Node服务端渲"}, {"id": "6964682425699926030", "title": "用 JavaScript 实现手势库 — 事件派发与 Flick 事件【前端组件化】", "desc": "我们上一期已经实现了所有的 gesture（手势），接下来我们需要实现的就是事件派发的功能。在 DOM 里面事件的派发是使用 new Event ， 然后在上面加一些属性，最后把这个事件给派发出去的。"}, {"id": "6977388124376662046", "title": "不能不知的JS问号的妙用！", "desc": "这是我参与更文挑战的第16天，活动详情查看 更文挑战 为了能有更多摸鱼的时间，准备写一个js技巧系列，主要就是总结一些可以提高开发速度和效率的js小窍门。"}, {"id": "7002555030964273188", "title": "JS实用篇复习笔记（8）", "desc": "1、垃圾收集算法 4、举几个例子 1、单个对象 2、对象copy 3、互相引用 这是个典型的相互引用案例，你可在 控制台查看 如果想去除一个的引用 使用 delete 删除 所有输入即可"}, {"id": "6917237531662794766", "title": "在业务中做出的Worker实践[堪称勇士] - 七日打卡", "desc": "大家看到标题勇士二字不知是否有所疑惑。我这里不做太多解释，只说一句：因为这个是之前的老项目（大家懂吗old very old），那真的可以说是牵一发而动全身啊 但是呢，很快啊，我啪的一下就决定了，直接就选中一个文件CTRL+A，然后Delete了啊，这波操作可以说是意气风发，无…"}, {"id": "6844903850160160782", "title": "2019 再聊移动端 300ms 延迟及 fastClick 原理解析", "desc": "最近公司新开了一条业务线，有幸和大佬们一起从头开始构建一套适合新业务的框架。俗话说得好呀，适合自己的才是最好的 😎。在新项目的 CodeReview 的时候，被大哥提到有没有添加 fastClick 解决移动端 300ms 延迟的问题。以下就带你追溯移动端延迟的 前世 今生。…"}, {"id": "7002554904518590501", "title": "JS实用篇复习笔记（7）", "desc": "1、对象起步 1、创建方法 2、基本使用 将一些属性放入{...}“键：值”对中： 3、添加和删除 属性 添加一个布尔值： 要删除属性，使用delete运算符"}, {"id": "6997571137399947300", "title": "面向对象-原型链继承（上）", "desc": "上篇我们讲了原型对象的使用(传送门)，今天继续下一个知识点，也就是构造函数的三大特点之一：继承。 是什么？有什么用？"}, {"id": "6987283167757467661", "title": "晓前端周刊 第80期 前端周刊：分享一次谷歌开发工程师帮我改bug的经历;", "desc": "业界动态 TypeScript 4.4 首个 Beta 版本发布 ​ 跨平台桌面应用开发工具 Electron 13.1.5 发布 ​ 好文推荐 如何实现前端白屏监控？ ​ 迈入现代 Web 开发（G"}, {"id": "6980169329555800078", "title": "js数据类型知多少", "desc": "js，数据类型，数据类型转换，基本数据类型，引用数据类型，强制类型转换，隐式类型转换，隐式类型转换规则。"}, {"id": "6844903694039777288", "title": "从一道面试题说起—js隐式转换踩坑合集", "desc": "提到js的隐式转换，很多人第一反应都是：坑。 的确，对于不熟悉的人来说，js隐式转换存在着很多的让人无法预测的地方，相信很多人都深受其害，所以，大家在开发过程中，可能会使用===来尽量避免隐式转换。但是，为了更加深入的理解javascript，本着对知识渴望的精神，我们来通过大…"}, {"id": "7006514513109319717", "title": "JavaScript中的闭包", "desc": "在讲闭包之前，需要先了解scope(作用域)和lexical scope(词法作用域)，具体可查看Scope、Lexical Scope、Scope Chain、Lexical Environment"}, {"id": "6951223024053911560", "title": "初学JavaScript，浅谈对变量提升的理解", "desc": "初学JavaScript，浅谈对变量提升的理解前提众所周知啊，变量提升和函数提升基本上是面试必问，是基础中的基础。那么变量提升到底是个啥呢？"}, {"id": "6981750773642166302", "title": "灵活运用JS开发技巧", "desc": "灵活运用JS开发技巧 原文链接：Joway Young 目录 String Skill：字符串技巧 Number Skill：数值技巧 Boolean Skill：布尔技巧 Array Skill：数"}, {"id": "6995444589448396813", "title": "深入理解Typescript系列-类型系统", "desc": "这是我参与 8 月更文挑战的第 12 天，活动详情查看： 8月更文挑战 前言 TypeScript是什么？按官方的解释是：JavaScript的超集，可以编译为纯JavaScript。我们都知道Jav"}, {"id": "6844903702273212423", "title": "26个精选的JavaScript面试问题", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 根据Stack Overflow 2018年年度调查报告，JavaScript已经连续6年保持最常用的编程语言的记录。对于一个全栈工程师，JavaScript可以说是一项必备语言，在面试中总会被…"}, {"id": "6844904000131694605", "title": "【扒一扒】这一次，彻底理解 ES6 Iterator", "desc": "本文主要来说下ES6的Iterator，目的在于理解它的概念、作用、以及现有的应用，最后学以致用。 Iterator可以说是ES6内相当重大的一个特性，也是很多其他特性运行的基石。 这个还不简单，直接来个 for循环，如果你觉得循环 low，那就来个 forEach 呗。 ok…"}, {"id": "6987958137743474725", "title": "小程序如何实现自定义tabBar", "desc": "背景 由于微信默认的tabbar是官方组件，有最高的优先级，因此我们自己组件的遮罩层无法覆盖他们。为了解决这个问题，我们可以使用微信提供的自定义tabBar功能。 ​ 官方文档：https://dev"}, {"id": "6844903566381940744", "title": "聊一聊我对 React Context 的理解以及应用", "desc": "Context被翻译为上下文，在编程领域，这是一个经常会接触到的概念，React中也有。 在React的官方文档中，Context被归类为高级部分(Advanced)，属于React的高级API，但官方并不建议在稳定版的App中使用Context。 不过，这并非意味着我们不需要…"}, {"id": "6996583771952644110", "title": "JS中构造函数与普通函数的区别", "desc": "一、两者区别在于： 1、调用方式不一样 普通函数调用方式：直接调用person(); 构造函数调用方式：需要使用new关键字来调用 new person(); 2、作用也不一样（构造函数用来新建实例对"}, {"id": "6985835063476748295", "title": "在Vue中使用Antv G6", "desc": "笔者最近在做一些可视化方面的任务，具体的需求就是要在页面上绘制出树状的关系图。在参考并且对比了社区的主流方案后，最后选择了Antv G6。在使用的过程也遇到了一些问题，就想写篇博客记录一下"}, {"id": "6983347092169162760", "title": "聊聊前端领域那些“门面”", "desc": "门面模式（Facade）是 23 种经典设计模式之一，也叫外观模式，是通过在客户端和子系统之间引入一个中间层，将内部复杂度隐藏，暴露出一个简单易用的接口。 引入门面模式之后，对客户端来说，使用起来会简"}, {"id": "6844903839322079240", "title": "前端战五渣学JavaScript——防抖、节流和rAF", "desc": "防抖和节流是两个相似的技术，都是为了减少一个函数无用的触发次数，以便提高性能或者说避免资源浪费。我们都知道js在操作DOM的时候，代价非常昂贵，相对于非DOM操作需要更多的内存和和CPU时间，假如我们一个函数是在滚动滚动条或者更改更改窗口大小的时候频繁触发，还是会出现页面卡顿，…"}, {"id": "6995066291308462117", "title": "JS执行上下文与调用栈(进阶必备知识)", "desc": "根据我们的配置找到其中的一个作为入口，一般是js文件，顺着入口文件当中的代码，根据代码中出现的import或者require之类的语句，解析推断出来其所依赖的资源模块，分别解析每个资源模块对应的依赖，形成一个依赖树，有了这个关系依赖树，webpack会遍历更准确的说法叫递归，递…"}, {"id": "6844903846779551751", "title": "前端面试之手写代码", "desc": "（一维)数组去重最原始的方法就是使用双层循环，分别循环原始数组和新建数组；或者我们可以使用indexOf来简化内层的循环；或者可以将原始数组排序完再来去重，这样会减少一个循环，只需要比较前后两个数即可；当然我们可以使用ES5,ES6的方法来简化去重的写法，比如我们可以使用fil…"}, {"id": "6844903517103063053", "title": "第一本 PWA 中文书", "desc": "此书献给广大 PWA 爱好者 带你领略 PWA 的强大与优雅 仅供大家学习使用 请勿用于任何商业用途 全书一共12章 目前已经翻译了前6章 持续更新中 希望大家多多关注"}, {"id": "6998161336534302750", "title": "你在实际开发中，对闭包有哪些应用？", "desc": "“你在实际开发中，对闭包有哪些应用？”，面试官抛出这个问题的目的，主要是考察你编码的熟练度和知识的广度。今天就带大家了解下，闭包有哪些应用，开始吧。"}, {"id": "6854573210801995789", "title": "搞懂JS 对象、原型、继承  🦒🐘🐅", "desc": "对象是一种数据类型，js中的数据类型分为 原始类型 和 引用类型，原始类型也叫基本类型或值类型。 上面提到了 Undefined、Null 这两种数据类型，他俩是比较奇葩的只有一个唯一值的数据类型值分别是 undefined、null，从逻辑角度来看 null 值表示一个空对象…"}, {"id": "6991660980560199687", "title": "精读《默认、命名导出的区别》", "desc": "从代码可维护性角度出发，命名导出比默认导出更好，因为它减少了因引用产生重命名情况的发生。 但命名导出与默认导出的区别不止如此，在逻辑上也有很大差异，为了减少开发时在这方面栽跟头，有必要提前了解它们的区"}, {"id": "6844904137390292999", "title": "基于react搭建一个通用的表单管理配置平台（vue同）", "desc": "熟悉我的朋友可能会知道，我一向是不写热点的。为什么不写呢？是因为我不关注热点吗？其实也不是。有些事件我还是很关注的，也确实有不少想法和观点。 但我一直奉行一个原则，就是：要做有生命力的内容。 这篇文章是一篇应用性极强的文章，我们通过一个实际的应用场景，去解决某一类的问题，提供一…"}, {"id": "6844903925053652999", "title": "前端工程师如何持续保持热情（一）", "desc": "想用一下最新技术，然而项目历史原因又望洋兴叹...... 如果一直以同样的姿态做一样的事情，就很容易觉得无聊，没有成就感。所以需要提升效率做同样的事情，后面越来越快完成，每天都看见自己的进步，自然就有了热情 后来发现，vue可以v-for，react可以map，原生可以循环插入…"}, {"id": "6844903976937209863", "title": " 现代浏览器观察者 Observer API  指南", "desc": "前段时间在研究前端异常监控/埋点平台的实现。 在思考方案时，想到了浏览器自带的观察者以及页面生命周期API 。 Intersection Observer，交叉观察者。 Mutation Observer，变动观察者。 Resize Observer，视图观察者。 | 用途 |…"}, {"id": "6844904175910780941", "title": "原生JS封装拖动验证滑块你会吗？", "desc": "就想着写写原生js玩玩，在网上看了几个效果后决定做这个效果，并且使用了prototype和eventEmitter封装成了库。 其次要支持用户传入放置这个组件的dom元素和完成的回调事"}, {"id": "6844903860079738887", "title": "如何在 JS 循环中正确使用 async 与 await ", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 在本文中，分享一些在如果循环中使用await值得注意的问题。 对于这篇文章，假设你想从水果篮中获取水果的数量。 你想从fruitBasket获得每个水果的数量。 要获取水果的数量，可以使用getNumFruit…"}, {"id": "6973669261956874270", "title": "重新了解JS引擎", "desc": "前段时间在看小黄书，里头讲了JS的编译原理，并提到了JS引擎，出于好奇，我想去了解相关方面的知识。一是看看常见的JS引擎有哪些；二是看看耳熟的V8引擎，是如何运行JS代码的！"}, {"id": "6995883364246880293", "title": "JavaScrip入门指南之“模拟DOM结构、节点层级”（笔记十一）", "desc": "模拟DOM结构 文档:document 元素:页面中所有的标签,元素---element, 标签----元素---对象 节点:页面中所有的内容(标签,属性,文本(文字,换行,空格,回车)),Node "}, {"id": "6844904202917904391", "title": "来，跟我一起 ，自研多端错误监控平台（完整版）", "desc": "我今天分享的主题是“如何实现一套多端错误监控平台”。先来做一个简单的自我介绍，我是来自贝贝-大前端架构组的 Allan ，目前致利于集团错误监控系统维护以及工程标准化等基建工作。同时，我也是《React+Redux前端开发实战》的作者。 废话不多说，今天我将与大家分享一下贝贝的…"}, {"id": "6985455854187184159", "title": "【axios】不可不知的axios无感刷新token", "desc": "背景 最近项目用户登录页面处于安全考虑，登录之后的access_token并非永久有效而是有实效性了，因此 需要在用户登录之后token失效的情况下进行access_token的无感知刷新，也既是需要"}, {"id": "6844903863812620296", "title": "「前端进阶」数组乱序", "desc": "数组乱序指的是：将数组元素的排列顺序随机打乱。 将一个数组进行乱序处理，是一个非常简单但是非常常用的需求。 比如，“猜你喜欢”、“点击换一批”、“中奖方案”等等，都可能应用到这样的处理。 微软曾在browserchoice.eu上做过一个关于不同浏览器使用情况的调查，微软会在页…"}, {"id": "6995911536376021005", "title": "浅谈Javascript中的继承", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 继承 继承是OO语言中非常重要的一个概念。由于Javascript的函数没有函数签名的概念，所以Javascript中的继承都是实现继承，主"}, {"id": "6988049425465606180", "title": "理解并实现 Promise", "desc": "Promise 的基本原理 Promise 是一个类，在执行这个类的时候会传入一个函数，这个函数会立即执行 Promise 有三种状态 Pending 等待 Fulfilled 成功 Rejected"}, {"id": "6844903773219848206", "title": "前端路由跳转基本原理", "desc": "目前前端三杰 Angular、React、Vue 都推介单页面应用 SPA 开发模式，在路由切换时替换 DOM Tree 中最小修改的部分 DOM，来减少原先因为多页应用的页面跳转带来的巨量性能损耗。它们都有自己的典型路由解决方案，@angular/router、react-r…"}, {"id": "6844904146798116871", "title": "V8引擎详解（二）——AST", "desc": "V8引擎详解（一）——概述。 看过我上一篇文章的同学应该了解到V8引擎会先将javascript代码转换成AST（抽象语法树），而事实上无论使用什么编程语言（无论是解释形语言还是编译形语言）都会将源代码解析成 抽象语法树（abstract syntax tree, AST），A…"}, {"id": "6987251210038296583", "title": "前端-体验js的ast树", "desc": "前端-体验js的ast树 是什么？ 源代码的 抽象语法结构的树状 表示 体验网站：https://esprima.org/demo/parse.html# 比如 var a = 1 的 ast树(其中"}, {"id": "6988867723686232072", "title": "手写Promise核心代码", "desc": "前言： ECMAScript6新增的引用类型 Promise，可以通过 new 操作符来实例化。具体使用方法想必大家早已烂熟于心，这里就不做过多介绍了，下面我们自己来实现一个 Promise。"}, {"id": "6987194245383716895", "title": "Echarts标识出曲线中坐标重合的点（找出json中重复的值）", "desc": "Echar单独标出每个图中坐标重合的点，便于H5端查看， 解决思路：将多个数组合并到同一数组中，遍历出JSON数组对象中x与y完全相等的坐标点，添加到数组中，最后将所有坐标点一同添加到series中"}, {"id": "6844903843281502222", "title": "马蹄疾 | 详解 JavaScript 异步机制及发展历程(万字长文)", "desc": "本文从Event Loop、Promise、Generator、async await入手，系统的回顾 JavaScript 的异步机制及发展历程。 需要提醒的是，文本没有讨论 nodejs 的异步机制。 也许我们都听说过JavaScript是事件驱动的这种说法。各种异步任务通…"}, {"id": "6987609789018669086", "title": "浅析JS(1): 数据类型以及拷贝", "desc": "最近在面试中发现很多人都不了解JS的基本数据类型有哪些, 以及基本数据类型和引用数据类型的区别, 很少有人给出一个完整的回答, 在这边整理了一下JS数据类型以及拷贝的知识."}, {"id": "6961297384491974686", "title": "Apache ECharts 5.1 发布，新增支持地理坐标系和地图系列的 SVG 底图", "desc": "在最近发布的 Apache ECharts 5.1 版本中，新增支持了地理坐标系和地图系列的 SVG 底图，可以用来灵活地创造出非常酷的可视化作品。"}, {"id": "6909078721383104519", "title": "前端自动化构建", "desc": "Promise同样也是ECMAScript2015当中提供的一个内置对象，那他提供了一种全新的异步编程解决方案，通过链式调用的方式解决了我们在传统异步编程过程中回调函数嵌套过深的问题。 不过关于Promise的细节有很多内容，所以说我们这里先不做详细介绍在JavaScript异…"}, {"id": "6844903651366928391", "title": "如何正确的在项目中接入微信JS-SDK", "desc": "如果你点进来，那么我相信你应该知道微信的JS-SDK可以用来做什么了。微信的官方文档描述如下。 通过使用微信的JS-SDK，你可以让你网页在微信内调用拍照、语音、支付、位置、扫一扫这些只能在微信内使用的功能。进过下面的步骤，一步一步的配置，就可以让你正确的在项目中引入微信的JS…"}, {"id": "6844903698007588871", "title": "1024，快速打造你的文档库/静态博客", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 本文教你如…"}, {"id": "6994362734783496228", "title": "【前端--JavaScript】知识点（六）—— 项目中的内存泄漏（二）", "desc": "上一篇中说到，不经意的内存泄露会导致程序变卡，甚至会出现页面崩溃，下面通过例子来从浏览器的角度排查是否存在内存泄露，怎么定位内存泄露"}, {"id": "6985827735209771045", "title": "antd pro v5 当道，我该如何创建 v4 项目？", "desc": "某天我在创建 ant design pro 项目，创建后发现 ant design pro 是 v5 了，可是我暂时还没有使用 v5 的打算呀，那可怎么办？"}, {"id": "6978033638533234719", "title": "import导入JSON", "desc": "新的导入断言功能允许模块导入语句在模块说明符旁边包含附加信息。 该功能的最初用途是使 JSON 文档能够作为JSON 模块导入： 背景：JSON模块和MIME类型 一个自然要问的问题是为什么"}, {"id": "6873694006736322573", "title": "告别硬编码，让你的前端表格自动计算", "desc": "于是我调研了税务其他模块的功能，发现税务系统大量使用表格控件，而其中或多或少都会涉及到计算问题。而处理计算的方法，都是采用硬编码。 计算，这个习以为常的编码动作，其实很容易让人联想到Excel中的公式，更何况需求文档本身就是以Excel的形式提供的。当我们在使用Excel的时候…"}, {"id": "6881502098639945742", "title": "如何在高德地图上叠加3D建筑图层", "desc": "团队的项目有部分需求涉及到在城市规划和建设中数据的可视化展示，将设备、数据、城市区域等元素通过GIS形式的融合，呈现出较为吸引眼球的效果。 最近因项目需要，期望在地图上面叠加一层3D建筑模型。现有的团队技术框架是使用高德地图的GIS服务，因此需要在高德地图的基础上做文章，经过一…"}, {"id": "6972459871807471652", "title": "你真的很懂·操作符???", "desc": "前言 关键词： 可选链操作符 , 空值合并操作符, ES2020 可选链操作符 可选链操作符( ?. )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 操作符的功能类"}, {"id": "6981250381892288548", "title": "一文玩转 mini-signals 发布-订阅模式库", "desc": "mini-signals 是一款轻量、快速的发布-订阅模式库，其使用方式和内部实现有别于常见的发布-订阅模式库。"}, {"id": "6844903711437750280", "title": "实现一个可无限折叠的table", "desc": "1. 明确需求 在代码里很东西其实都是伪装出来的，例如我们要实现的这个可无限折叠的table。但在用户操作的时候看来就是那么回事咯 ~ ~ 2. 树形结构数据准备 这里已经准备好了树形结构的数据，存放于data.js的文件中，节点通过Children连接。如标题所说，可无限折叠…"}, {"id": "6847009773116882957", "title": "很多人不知道可以使用这种 key 的方式来对 Vue 组件时行重新渲染！", "desc": "在某些情况下，我们必须强制Vue重新渲染组件，如果没有，那可能，你做的业务还不够负责，反正我是经常需要重新渲染组件，哈哈。 虽然Vue不会自动更新这种情况是相对比较少，但是知道如何在出现这个问题时修复它还是很有用的。 在大多数情况下，此问题根源还是我们对 Vue 的响应式理解还…"}, {"id": "6874769395957760008", "title": "「深入浅出」前端开发中常用的几种跨域解决方案", "desc": "如果你还是对跨域概念或单单配置还是很模糊的话，或者面试中经常被问到，但是回答的不全面的话，可能这篇文章适合你。 公众号👉 前端时光屋，查看更多更质量文章。 如果两个URL的协议protocol、主机名host和端口号port都相同的话，则这两个URL是同源。 同源策略是一个重…"}, {"id": "6973284204943507492", "title": "高性能 JavaScriptの五 -- 快响应用户界面", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 快速响应的用户界面 你愿意体验一个交互流畅的网页，还是愿意体验一个点击后卡一会儿才响应的页面（如在学校抢课时网页）？ 好的JavaScript编写"}, {"id": "6844904086572105735", "title": "127个常用的JS代码片段，每段代码花30秒就能看懂（四）", "desc": "大家好，今天我继续给大家分享本系列文章的第四部分，希望对你的日常工作有所帮助。 用于判断程序运行环境是否在浏览器，这有助于避免在node环境运行前端模块时出错。 用于判断当前页面是否处于活动状态（显示状态）。 用于判断当前字符串是否都为小写。 用于判断当前变量的值是否为 nul…"}, {"id": "6844903731918553102", "title": "手刃前端监控系统", "desc": "我们为什么要做前端系统呢，可以明显地从下表看出来，前端的性能对于产品的价值提升还是蛮有帮助的，但是这些信息如果我们能实时的采集到，并且实施以监控和报警，让整个产品在产品线上一直保持高效的运作，这是我们的目标，做前端监控只是为了达到这个目标的手段。 其次，前端监控能让我们即使发现…"}, {"id": "6991667197189816333", "title": "用JavaScript模拟事件循环", "desc": "对于很多概念性的原理，可能三两句话就能概括，但必然损失了很多细节。而实际的代码呢，无法忽略细节，最多是简化一些。那么就让我们一起来用伪代码来模拟事件循环机制吧。"}, {"id": "6850037266082070535", "title": "使用reveal.js制作精美的网页版PPT", "desc": "最近在做季度总结和技术分享,所以需要做个PPT, 来回顾这半年来的技术贡献. 但苦于mac上运行PPT那感人的流畅度, 成功的激起了笔者的强迫症, 所以索性想办法通过技术的手段来做个网页版PPT, 这个时候笔者发现了reveal.js: 一个使用 HTML 语言制作演示文稿的 …"}, {"id": "6985800727159373855", "title": "使用vue3+vite+ts+element-plus制作的TodoList示例", "desc": "初始化项目 创建 选择框架：vue, 选择变种：vue-ts 进行项目目录，安装依赖 启动 出现如下，运行成功 浏览器访问 http://localhost:3000/ 安装element-plus "}, {"id": "6979786933446639623", "title": "es6扩展运算符三个点（...）", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 对象的扩展运算符 对象中的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中 如果用户自定"}, {"id": "6844903694509539342", "title": "Web 动效四大才子简述", "desc": "我们一个一个简单了解下。 CSS3 动画的 animation-timing-function 属性值除了支持 cubic-bezier() 功能符，还支持 steps() 功能符，可以实现很多小而美的逐帧动画效果。例如 twitter 的 Like 的效果： 把所有序列帧图片…"}, {"id": "6996650556072656903", "title": "js变量存储位置", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 在js引擎中对变量的存储主要有两种位置，堆内存和栈内存，这两位分工合作，分别保管JS中的两种数据类型：基本数据类型和复杂数据类型 一、数据"}, {"id": "6978774911825231902", "title": "一文解释什么是API 和 Web APIS", "desc": "目标 能够说出Web APls阶段与JavaScript语法阶段的关联性 能够说出什么是API 能够说出什么是Web API 目录 Web APls和JS基础关联性 API和Web API 1. We"}, {"id": "6903421467002667022", "title": "手撕JS源码(new,curry,Promise,双向绑定)", "desc": "1.手撕new通过这段代码我们可以看得出来，当我们new一个对象的时候，系统都做了些什么事情。我们可以测试一下，因为new是关键字，我们先改个函数名。2.手撕函数柯里化3.手撕Promise面试的时候"}, {"id": "6844903668660043783", "title": "漂亮的实力派  Ant Design Pro 2.0 正式发布", "desc": "1.0 发布之后，Ant Design Pro 受到了业界广泛关注和使用，GitHub 上 star 数一路增长到 11,686 个，在蚂蚁金服内部也落地数百个中后台应用。 在这 8 个月内，2.0 研发计划也在持续进行中，在给 V2 版本发起过 PR 的 38 位贡献者帮助下…"}, {"id": "6844903891948027911", "title": "Javascript 变量生命周期", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 提升是将变量或函数定义移动到作用域头部的过程，通常是 var 声明的变量和函数声明function fun() {...}。 当 ES6 引入let(以及与let类似声明的const和class)声明时，许多开…"}, {"id": "6993203891449888782", "title": "前端刷题路-Day72：搜索插入位置（题号35）", "desc": "给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置..."}, {"id": "6907037305052069895", "title": "一个不安分的箭头引发的思考（JS动画实现方式对比）", "desc": "产品组的小仙女为了表示数据的流向提出向做一个动态的箭头，但是她没有想好要怎么做。于是，我给了她2套效果。啦啦啦啦~ 普通箭头我们通过一个正方形的div，显示 div 的上边框和右边框，同时旋转 45 度就可以实现一个直角的箭头。 而我们的产品想要的是钝角（大于90度）的多个箭头…"}, {"id": "6944334294970007565", "title": "从Codewars刷题中总结js 常用方法", "desc": "最近迎来了春招的热潮，相信很多同学都在准备着春招叭，我也在积极的准备着，想把JS基础再巩固一遍，把js方法总结一下。但是靠死记硬背是不可取的，要学会具体使用，在刷题的场景中记住某个JS方法的调用。这篇文章就是把在刷题中遇到的常见JS方法总结出来。 在刚开始学习JavaScrip…"}, {"id": "6844903935853985799", "title": "听说你还不懂React Hook？", "desc": "从官网的这句话中，我们可以明确的知道，Hook增加了函数式组件中state的使用，在之前函数式组件是无法拥有自己的状态，只能通过props以及context来渲染自己的UI，而在业务逻辑中，有些场景必须要使用到state，那么我们就只能将函数式组件定义为class组件。而现在通…"}, {"id": "6901887182375092231", "title": "JS十大取整方法", "desc": "1. parseInt() 2. Number.toFixed(0) 3. Math.ceil() 4. Math.floor() 5. Math.round() 6. Math.trunc() 7. 双按位非取整 8. 按位运或取整 9. 按位异或取整 10. 左移0位取整 …"}, {"id": "6844903683197501447", "title": "一步一步带你封装基于react的modal组件", "desc": "接下来将一步步带领大家实现一个基本的modal弹窗组件，封装一个简单的动画组件，其中涉及到的一些知识点也会在代码中予以注释讲解。 一. modal组件的实现； 1. 环境搭建 2. modal样式完善 3. modal功能开发 3.1. 添加visible字段控制显隐 3.2.…"}, {"id": "6990258130831540260", "title": "在报错里学习js", "desc": "JavaScript是世界上最好的语言。JavaScript是世界上最好的语言。JavaScript是世界上最好的语言。"}, {"id": "6987951063236083748", "title": "前端代码review检查清单", "desc": "1. 代码规范 使用 eslint 工具对 JS代码进行检查 无任何lint警告和错误。 无 console.log() 2. 常规检查 2.1. 代码风格 无写死数据(hardcoded)，使用常量"}, {"id": "6994016221796499470", "title": "关于js中异步函数平行调用的小问题(async/await)", "desc": "关于js中异步函数平行调用的小问题 最近在学习async和await关键字的时候遇到了一个小小的不容易理解的地方 直接看代码 当我这样去调用的时候，是串行调用 但当我想要平行调用时 这样竟然也需要4s"}, {"id": "6990182675940605983", "title": "this的改变者(call apply bind)", "desc": "this的改变者(call apply bind)的区别 new 关键字的作用理解及实现过程"}, {"id": "6844904191228411911", "title": "学习 redux 源码整体架构，深入理解 redux 及其中间件原理", "desc": "1. 前言 感兴趣的读者可以点击阅读。 其他源码计划中的有：express、vue-rotuer、react-redux 等源码，不知何时能写完（哭泣），欢迎持续关注我（若川）。 源码类文章，一般阅读量不高。已经有能力看懂的，自己就看了。不想看，不敢看的就不会去看源码。 所以我…"}, {"id": "6995733095559200804", "title": "js 如何和终端进行简单的交互", "desc": "这篇主要是讲JS这部分的安卓 iOS 就不用看了！！ 1、用来判断是安卓设备还是 iOS 设备 2、js 调用安卓和 iOS 方式 调用安卓的方法 调用IOS的方法 3、安卓和IOS调用js方法 不管"}, {"id": "6844904173859766286", "title": "2020 年最新前端学习路线图汇总，学习前端不在迷茫！", "desc": "我们有一个 slogan ——— 前端时空技术社群：前端网红集结号，传递一线全栈技术，带你穿越前端时空。 2020 年 3 月 12 日，与滴滴跨端开发框架 —— Chameleon 开源团队达成合作。 目前合作的有淘系前端技术、腾讯 Serverless 等技术媒体。 目前我…"}, {"id": "6844904069820055560", "title": "🔥JavaScript 自定义事件如此简单！", "desc": "在前端开发世界中，JavaScript 和 HTML 之间往往通过 事件 来实现交互。其中多数为内置事件，本文主要介绍 JS自定义事件概念和实现方式，并结合案例详细分析自定义事件的原理、功能、应用及注意事项。 在日常开发中，我们习惯监听页面许多事件，诸如：点击事件（ click…"}, {"id": "6844903583138185229", "title": "腾讯一面（2019前端实习岗）| 掘金技术征文", "desc": "之前投递了腾讯的实习生前端岗，一直没有电话，查了下状态说不合适，以为凉凉了，今天却收到了电话，出乎意料... 然后就开始了一面，一开始面试官说时间不会太久，大概30分钟吧，结果整个过程也就持续了30分钟吧。 简单介绍了自己所在的学校和专业，以及学习的过程。 ...... ...…"}, {"id": "6844904168520433678", "title": "『前端技巧』—— 导出功能的实现", "desc": "这种导出，我最喜欢了，后端比较有良心，前端很省事。当然在这种场景下，还分两种情况。 域名是请求后端的域名，不是前端页面的域名。项目一般是给多个客户使用，故后端的域名一般都交给运维来配置。项目中这么实现。 在静态资源public文件夹中建立config.js文件和config.j…"}, {"id": "6844903728265297934", "title": "前端数据操作总结", "desc": "第一个参数：视图对应的底层ArrayBuffer对象，该参数是必需的。 第二个参数：视图开始的字节序号，默认从0开始。 第三个参数：视图包含的数据个数，默认直到本段内存区域结束。"}, {"id": "6918386569946759175", "title": "《前端工具系列》最好用的git可视化工具——SourceTree", "desc": "今天来聊聊git可视化工具SourceTree的使用，主要是因为git操作是我们在项目中频繁用到了，频繁用到就注定会遇到各种棘手小问题，比如代码的合并，冲突，版本回退等。敲命令时无论老手新手都小心翼翼，稍有不慎就会出错，在大型项目里如果代码版本控制出错的话，代价是很大的，可能这…"}, {"id": "7005518778427506702", "title": "正则表达式实例方法与属性", "desc": "正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等 1.正则表达"}, {"id": "6844903700704526343", "title": "前端文件下载通识篇", "desc": "前端如何实现下载文件呢?随着前端技术的发展，越来越多的前端需求中会出现下载文件这样的需求。 看着掘金很多人在近期不断的分享有关的文章，我总结了下自己的经验，根据不同情况，总结了一篇算是前端文件下载的通识篇，如果你对这方面完全不懂或者没有任何方案，那么本文会给你一个很不错的启示。…"}, {"id": "6996651783858683917", "title": "JavaScript知识点回顾（十五）——变量、作用域与内存（三）", "desc": "这是我参与8月更文挑战的第十五天，活动详情查看：8月更文挑战 变量声明 ES6之前，var都是声明变量的唯一关键字。ES6增加了let和const两个关键字。"}, {"id": "6954014892634406925", "title": "熬夜准备的一个React项目升级Vite的指南", "desc": "熬夜准备了一个升级Vite指南，希望大家能踊跃尝试新技术，对于构建工具来说，它的理念超越之前的几种，而且底层使用的esbuild,会更快."}, {"id": "6882138062927691783", "title": "[ 干货篇 · 第三期 ] 一个拖拽卡顿问题引发出对setTimeOut的探索", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 就在国庆前，同事写了一个拖拽左边菜单栏改变菜单栏宽度从而得到更好的交互体验效果。But ！ 美中不足的是拖拽的时候如果手速过快，会导致卡顿效果，看起来十分难受。经过不断调试，最终是使用了setTimeout解决了该问题。那…"}, {"id": "6964639513888948255", "title": "利用puppeteer做一次海报分享需求", "desc": "你是否还因为前端插件生成图片模糊被ui怼？ 你是否还因为无法和ui小姐姐套近乎感到伤心？ 你又是否因为无法帮助行政小姐姐的忙感到懊恼？ 快来看看基于node的这款截图插件吧"}, {"id": "6934308324896669709", "title": "潮流前端周刊（第23期）- 小炒黄牛肉", "desc": "持久存储的磁盘在今天已经不是稀缺的资源了，但是 CPU 和内存仍然是相对比较昂贵的资源，作者在 调度系统设计精要 中曾经介绍操作系统和编程语言对 CPU 资源的调度策略和原理，本文将会介绍计算机中常见的另一个稀缺资源 — 内存，是如何管理的。 TC39 1 月会议在 1 月 2…"}, {"id": "6844903635638304781", "title": "vue中如何实现pdf文件预览？", "desc": "今天产品提出一个优化的需求，就是之前我们做的图片展示就是一个img标签搞定，由于我们做的是海外后台管理系统，那边的人上传的文件时pdf格式，vue本事是不支持这种格式文件展示的，于是就google搜索，发现有iframe、embed、vueshowpdf(测试了不咋好用)、pd…"}, {"id": "6844903999574016013", "title": "微前端(singleSpa + React )试玩", "desc": "我们团队正在做一个XX系统，技术栈是React，目前该系统日渐庞大，开发及维护成本加大，且每次必须把整个项目一起打包，费时费力。经考虑后决定将其拆分成多个项目，由它们组合成一个完整系统，微前端架构是非常好的选择。 对我们来说最大的好处是单项目维护。 注意看地址栏变化，其中包含 …"}, {"id": "7005480926641651719", "title": "javascript实践教程-04-常量", "desc": "本篇讲解了常量和变量的区别，讲解了常量的声明和使用，常量的命名规则，并列举了相关例子。 阅读时间5~10分钟。"}, {"id": "6993672950742253604", "title": "js防抖和节流", "desc": "前端开发中在处理 scroll resize input mousemove 等事件时,通常并不希望事件处理函数持续触发,防抖和节流能更好的解决这一问题. 为了便于演示持续触发事件的现象 效果如下: "}, {"id": "6968746365128032264", "title": "ES6- reduce 编程挑战", "desc": "reduce 是 ES6 提供的数组 API，能够非常高效、优雅的解决一些常见问题；适合应用在连续、累加计算的场景。"}, {"id": "7005476317575512077", "title": "js object方法", "desc": "Object.assign() Object.create() Object.defineProperty() Object.definePropertys Object.entries() Obje"}, {"id": "6844903709466427406", "title": "今日头条面试题与解析", "desc": "简要：添加Expires头能有效的利用浏览器的缓存能力来改善页面的性能，能在后续的页面中有效避免很多不必要的Http请求，WEB服务器使用Expires头来告诉Web客户端它可以使用一个组件的当前副本，直到指定的时间为止。 例如：Expires：Thu，15 Apr 2010 …"}, {"id": "6984382822249152542", "title": "qiankun 入门（react和vue）", "desc": "一、umi使用qiankun 插件 使用方式 一、主站 1.安装插件 2.配置qiankun开启 2.1注册子应用 a. 插件构建时配置子应用 b. 运行时动态配置 2.2 装载子应用 a. 使用路由"}, {"id": "6998166839234658335", "title": "JavaScript进阶", "desc": "写在前面，兜兜转转，来来回回，从开始学习JS到现在已经工作这些来年，我和JS每天的生活可以用如胶似漆来形容。但自认为对他认识的还不够深刻。故从头再来，从基础开始。Go！！！"}, {"id": "6947982719821283342", "title": "前端面试之异步任务顺序化（async/await）", "desc": "前端面试关于异步实现的问题有很多，中心相近，侧重不一，难度参差。细节颇多。其中一类为它的顺序化，例：考题场景为：在常用的循环中用实现await可能产生的问题，如何选择循环，理由是 1.错误答案forEach()。使用它并不能使输出按照数组元素顺序输出，数字的顺序依据Promis…"}, {"id": "6844904081052401677", "title": "🔥Vue\"非常规\"技巧, 🤖99%的人是第一次看", "desc": "一句话理解\"Event\": 类似vue中$emit, 使用new Event可以创建浏览器的原生事件,通过使用addEventListener监听事件. 要实现上例就需要用到自定义事件(Event). 可以看到组件破坏了dom结构, 使用时可能会直接影响样式, 所以很多vue插…"}, {"id": "6991413031351615519", "title": "Fetch API 教程（打造属于自己的axios）", "desc": "Fetch是什么？ fetch是一个JavaScript接口，XMLHttpRequest的一个理想的代替方案，用于跨网络异步获取资源（HTTP 请求）。 一个基本的 fetch 请求设置起来很简单。"}, {"id": "6998107588877352990", "title": "DOM", "desc": "获取DOM中标签元素的方法 1.通过id获取 语法： 2.通过class类名获取 语法: 返回对应的所有class 值相同的标签 (注意这是一个伪数组，即可以用for循环遍历和简单的索引取出其中的值，"}, {"id": "6844903788998836231", "title": "手把手教你实现一个canvas智绘画板", "desc": "注：下面实现项目效果主要是关于JavaScript方面的，下面仅仅是提供实现思路的代码，并非全部代码。 css代码可以根据个人习惯进行美化界面，所以这里就不写css的代码了，大家可以直接看项目代码或者从开发者工具中审查元素观看。如果有问题可以私聊我，我觉得问题不大。 首先，准备…"}, {"id": "6844903666135072781", "title": "从FormData到图片上传", "desc": "之前一直用jquery的form插件自带的方法ajaxSubmit提交表单。 这种方法太依赖库，在移动端会产生多大的资源消耗，于是还是用FormData提交比较合适。FormData也是H5新增 二、通过Html Form元素创建FormData对象，用ajax提交。"}, {"id": "7003337565268885512", "title": "获取元素", "desc": "一、获取input框里的元素 二、DOM元素获取 DOM 操作 ： 一、增：文档新增 二、删 三、改：1.修改样式 2.属性修改 四、查 ：获取元素 五、绑定事件 1、dom 的获取 2、简单的dom"}, {"id": "6882093667486531598", "title": "LayUI填坑：下拉框回显数据", "desc": "这里就说坑不坑吧？通过代码分析我们也知道为什么无法回显数据了吧？此处select可供选择的元素是通过jquery从后台数据获得的，需要根据动态结果决定选择哪一个。分析一下渲染结果的结构，得到dom树如下： 发现在layui-input-inline之下除了select之外又多了…"}, {"id": "6844903876345200647", "title": "《Web动画周报》第一期：好戏开场", "desc": "周报将 Web 动画大致分为三类：CSS 动画、SVG 动画 和 WebGL/Canvas 动画。所有的动画将按类别展示，方便读者有针对性的学习。 1. 《给个好评嘛》作者：Mert Cukuren 这是一个纯 css 实现的动画， <label> 的背景图片是星星，通过检查 …"}, {"id": "6925605904561750030", "title": "快速上手油猴插件开发（实战篇）", "desc": "有精力的话可以继续学习wokoo脚手架的搭建。 当测试的同学发现问题时，需要截图，打开测试平台，填写具体的问题，提交测试报告。如果能有插件在当前页面中弹出要填写的测试表单，是不是就减少了测试同学的工作流程？ 学会了浏览器插件开发后，可以做一些工作场景相关的插件，来帮助自己以及同…"}, {"id": "7002950672484139015", "title": "你还在一行行手写组件/API代码？", "desc": "前言 近些年来lowcode、nocode是一个非常火热的话题，各大厂各团队也都开发了很多类似的产品。从可视化搭建到可视化逻辑编排再到前端智能化，这些对前端的研发效率带来了革命性的提升。"}, {"id": "6989751020255445005", "title": "百万PV商城实践系列 - 前端图片资源优化实战", "desc": "本文主要以商城实例做为切入点，对项目中经常出现的图片资源列举了对应场景下的解决方案，如果项目中碰到非常多的图片资源，那么可以尝试下文中的一些优化方案。"}, {"id": "7004781396141015076", "title": "Day1：Github项目每日优选之Dinero.js", "desc": "Github是个巨大的仓库。很多小而美的项目完全可以去关注及时fork。站在前人肩膀上造轮子这样才能不怕🙅🏻‍♀️被卷。我们每天争取用最短小的文章，最短的时间，给你带来最大的收益。"}, {"id": "7006944184967888909", "title": "【设计模式】订阅发布模式 VS 观察者模式", "desc": "目录 订阅发布模式是什么 图解发布订阅模式 Vue中的应用 - 子组件向父组件传值 手写一个简易 EventBus 总结 一 订阅发布模式是什么 意思就是发布者和订阅者不知道对方的存在。需要一个第三方"}, {"id": "6981983593350463519", "title": "学会这些鲜有人知的coding技巧，从此早早下班liao-JavaScript实战技巧篇", "desc": "if(obj==1&&obj==2){console.log(obj)}一个对象居然可以等于两个值？通过此次`Coding小技巧`学习,可以让你的代码质量更上一层楼，coding速度直逼火箭！！！"}, {"id": "6999077663587434533", "title": "浏览器Location 对象，URL 对象，URLSearchParams 对象简析", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 Location 对象，URL 对象，URLSearchParams 对象 URL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管"}, {"id": "7007244634686652429", "title": "「JS笔记」DOM复习v02 ", "desc": "DOM编程 获取元素，也叫标签 现在常用querySelector querySelectorAll getElement(s)Byxxx 需要兼容 ie 才用 获取特定元素 节点的增删改查 增 创建"}, {"id": "6997938084918591496", "title": "零基础学习javascript正则，从入门到精通", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 正则的扩展 RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正"}, {"id": "7001671927836180487", "title": "ES6的模块加载，你们真的完全懂了吗？", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 Module 的语法 概述 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简"}, {"id": "7006219902528782367", "title": "js基础篇-this指向全面解析", "desc": "this指向全面解析 隐式绑定 显示绑定 new绑定 箭头函数this指向。calll、apply、bind，一旦硬绑定之后，this的指向就无法再发生改变"}, {"id": "7006261280663306247", "title": "es6模块打包之rollup", "desc": "Rollup 是一个 JavaScript 模块打包器，一种更简单、更轻量的打包方式，对于开发js库，是一种不错的选择。"}, {"id": "6968713283884974088", "title": "最全的手写JS面试题", "desc": "这是我参与更文挑战的第 1 天，活动详情查看：更文挑战 前言 本文整理了前端面试高频出现的手写源码相关的题目 其中有小编面试亲自遇到的也有其他同学帮忙补充的"}, {"id": "7007404959004098590", "title": "《你所不知道的JavaScript》读书笔记（三）：类和对象（下）", "desc": "在这篇文章中，我们接着上一篇文章的内容来聊一聊JS对象的原型链和行为委托机制是如何模拟类这种设计模式的，以及类设计模式和基于对象的设计方法有何异同。"}, {"id": "6981588276356317214", "title": "「硬核JS」你真的了解垃圾回收机制吗", "desc": "JavaScript 是门魅力无限的语言，关于它的 GC（垃圾回收）方面，你了解多少呢？想来大部分人是因为面试才去看一些面试题从而了解的GC，当然，我们可不仅仅是为了面试，目的是一次性彻底搞懂GC！"}, {"id": "7004993966613463054", "title": "工作中必须知道的JavaScript内存泄漏", "desc": "一、概述 内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存 并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之"}, {"id": "7002414029176061983", "title": "❤️基于HTML、CSS 和 Three.js 的喷火龙小游戏❤️", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 ❤️基于HTML、CSS 和 JS的喷火龙小游戏❤️ 早些时候我制作了更多类型的HTML小程序。如果你愿意，你可以看看这些设计。 使用 H"}, {"id": "6970841540776329224", "title": "总结TypeScript在项目开发中的应用实践体会", "desc": "在日常工作中对TypeScript的一些开发实践总结，对比较常用的API和新特性进行了归类，同时在实践中是如何一步步将dva拥有主动类型约束，以及服务端数据类型是如何进行多人协同开发进行工作。"}, {"id": "7005338615672733727", "title": "中秋节，我要和“对象“坐在屋顶上赏月，读诗", "desc": "马上就是中秋节啦，你们有什么安排吗? 说到中秋节，当然是和喜欢的人一起赏月祭月放孔明灯啦。 说到月亮，那我们能不能用css画个月亮，孔明灯呢，立马行动。"}, {"id": "6999086546766790670", "title": "11款超5000星 后台管理模板, 总有一款适合你！", "desc": "前言 无论是我们个人独立开发项目，还是在公司团队开发项目，如何选用一款合适的模板，对于开发者的体验，开发的效率，公司的效益来说，是极为重要的，现在社会就是一个快餐社会，你比别人慢，你就会被别人干掉！"}, {"id": "6992985462163898382", "title": "看完还不懂JavaScript执行机制(EventLoop)，你来捶我", "desc": "本文保证你能彻底弄懂JavaScript执行机制，让你不管是面试还是开发，都游刃有余，哪怕你是新手也一样"}, {"id": "6844903832762187783", "title": "浅谈Event Loop", "desc": "上一篇中@TDGarden说：又到了春暖花开、万物复苏的季节，大家都忙着谈恋爱，没时间写博客了。 说这个位置适合我。 于是我就懂了。我该写博客了。毕竟我们前端现在只有我有时间写博客。 好了，不瞎扯了，我们进入正题，来聊聊Event Loop。本文算是对这几天来学习Event L…"}, {"id": "6985333346532327460", "title": "《javascript高级程序设计》学习笔记 | 10.1-10.8.函数基础", "desc": "函数是对象，每个函数都是 Function 类型的实例，都与其他引用类型一样具有属性和方法 函数名是指向函数对象的指针，不会与某个函数绑定（一个函数可能会有多个名字） 相关代码 → 4 种定义方式 1"}, {"id": "6844903940014735367", "title": "9分钟，搞明白闭包", "desc": "闭包——JS三座大山之一，对很多前端开发者来说是个非常头疼的知识点。本文将花费大约9分钟时间，用4组非常简单的例子来对比理解闭包，也许会改变大家之前对闭包的理解。 在案例对比之前，先给大家一个观点：闭包只是一种现象。在此，我们不要试图用官方的定义，以扣字眼的方式去理解闭包的含义…"}, {"id": "6844903604575272974", "title": "用小猪佩奇说明Javascript的原型和原型链", "desc": "没错，我就是标题党！你已经成功被我骗进来了。来都来了，那就聊聊再走呗！接下来就听我一本正经地跟你说道说道。 Javascript的原型是这门语言的一个重点和难点。看过很多大佬写的解释Javascript原型的文章，但是很多对于初学者其实不是很友好，看完之后还是云里雾里。我虽然不…"}, {"id": "6844903730349883406", "title": "如何解决0.1 +0.2===0.30000000000000004类问题", "desc": "math.js是JavaScript和Node.js的一个广泛的数学库。支持数字，大数，复数，分数，单位和矩阵等数据类型的运算。 为 JavaScript 提供十进制类型的任意精度数值。 用于任意精度算术的JavaScript库。 用于任意精度十进制算术的小型快速JavaScr…"}, {"id": "6989209067533107237", "title": "web前端高级JavaScript - 对象的深合并与浅合并", "desc": "数据类型检测方法封装 通用数据类型检测toType 检测是否是纯对象isPlainObject 对象的浅合并 对象浅合并代码实现： 对象的深合并 对象深合并代码实现："}, {"id": "6997243383123197960", "title": "一文搞透 JavaScript 正则表达式", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 一, 什么是正则表达式？ 正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE） 使用单个"}, {"id": "6995064038098993188", "title": "工作中应该如何使用单例模式", "desc": "单例模式，很常用也非常重要，将单例模式应用于程序开发设计，可减少重复代码，提升程序效率，同时单例的唯一性也使得数据流更加清晰，便于维护管理。"}, {"id": "6844903519904874504", "title": "JavaScript 中的对象拷贝", "desc": "对象是 JavaScript 的基本块。对象是属性的集合，属性是键值对。JavaScript 中的几乎所有对象都是位于原型链顶部 Object 的实例。 如你所知，赋值运算符不会创建一个对象的副本，它只分配一个引用，我们来看下面的代码： —> Edit on JS Bin ob…"}, {"id": "6844903687706378247", "title": "从零开始用 electron 手撸一个截屏工具", "desc": "最近在尝试利用 electron 将一个 web 版的聊天工具包装成一个桌面 APP。作为一个聊天工具，截屏可以说是一个必备功能了。不过遗憾的是没有找到很成熟的库来用，也可能是打开方式不对，总之呢没看到现成的，于是就想从头撸一个简单的截图工具。下面就进入正题吧！ electro…"}, {"id": "6918126001557864456", "title": "JavaScript数据处理（数组篇一）", "desc": "在日常开发中，肯定是避免不了许多繁杂的数据处理的，对于数据处理JS提供了许多的方法，为了更好的提高我们的工作效率我们就来把这些方法一一总结一下吧，本文将结合使用场景给出相对应的解决方法。方法列举场景一"}, {"id": "6978051270623887397", "title": "《JavaScript 高级程序设计》 第十九章 表单脚本 学习记录", "desc": "1、表单基础 <form>标签，HTMLFormELement的属性和方法 acceptCharset 服务器科技手段字符集（accept-charset） action 请求的URL element"}, {"id": "6844903668492435470", "title": "AST抽象语法树——最基础的javascript重点知识，99%的人根本不了解", "desc": "抽象语法树（AST），是一个非常基础而重要的知识点，但国内的文档却几乎一片空白。 本文将带大家从底层了解AST,并且通过发布一个小型前端工具，来带大家了解AST的强大功能 Javascript就像一台精妙运作的机器，我们可以用它来完成一切天马行空的构思。 我们对javascri…"}, {"id": "6984984068924375076", "title": "关于Node.js版本管理工具，这一篇即学即用~", "desc": "Node.js 是什么？ 为什么需要版本管理工具？ 版本管理工具有哪些？ nvm n nodenv ...等等等等，本文暂时只详细介绍 nvm，其他的后续补充。 nvm 的安装与使用 一、nvm-wi"}, {"id": "6844903878261997581", "title": "【Step-By-Step】高频面试题深入解析 / 周刊06", "desc": "本周是继承专题，在开始之前，需要先了解构造函数、原型和原型链的相关知识。 构造函数和普通函数的区别仅在于调用它们的方式不同，任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数；任何函数，如果不通过 new 操作符来调用，那么它就是一个普通函数。 实例拥有 cons…"}, {"id": "6844904170026172424", "title": "DD每周前端七题详解-第一期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 从这周起呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDa…"}, {"id": "6844903599764406286", "title": "vuex 源码：深入 vuex 之辅助函数 mapState", "desc": "当一个组件要获取多个 state 的时候，声明计算属性就会变得重复和冗余了。我们可以使用到辅助函数 mapState 来更快更简洁地生成计算属性。 所以我们得清楚，mapState 的作用就是帮我们把一个对象或数组里的值转化成计算属性的写法。同理，其它的辅助函数也是大同小异，只…"}, {"id": "6994256237256802340", "title": "从 Event Loop 看 JS 的运行机制", "desc": "先理解一些概念： JS 分为同步任务和异步任务 同步任务都在JS引擎线程上执行，形成一个 执行栈 事件触发线程管理一个 任务队列，异步任务触发条件达成，将回调事件放到 任务队列中 执行栈中所有同步任务"}, {"id": "6994240159747637261", "title": "JavaScript极易出错的操作符运算 ", "desc": "算术运算符非正常情况1: 有特殊值字面量参与的运算 NaN参与的运算：得到的结果都是NaN Infinity参与"}, {"id": "6844903671461838862", "title": "Vue与React比较", "desc": "提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。 1. 运行时性能比较 React 和 Vue 都是非常快的，所以速度并不是在它们之中做选择的决定性因素。对于具体的数据…"}, {"id": "6844903577761103880", "title": "面向Vue新人：使用Vue写一个图片轮播组件", "desc": "在制作这个组件之前，笔者google了不少关于轮播的文章，发现实现一个轮播的思路虽然各有不同，但是大的逻辑其实差不多，本文主要依据慕课网上焦点轮播图特效这节课，不过慕课网主要用原生JS写，而笔者则用Vue进行了重构，并且进行了一点修改。完成后的组件效果图如下： 1. 要写一个什…"}, {"id": "7000400178213552141", "title": "js核心笔记第三天", "desc": "1，循环 1，for循环 当知道执行次数的时候一般用for 2，while循环 当条件循环时一般用while,,就是那种不确定循环的次数，当达到某一个条件的时候就终止循环 3，switch循环 对于有"}, {"id": "6844903687391821832", "title": "Array.prototype.reduce 实用指南", "desc": "hello~亲爱的看官老爷们大家好~最近因为工（lan）作（ai）繁（fa）忙（zuo），出产的文章多以译文为主，之前翻译了《如何在 JavaScript 中更好地使用数组》一文，发现不少同学对 Array.prototype.reduce 不太熟悉，而我正好在这方面有一点积累…"}, {"id": "6997306713011388453", "title": "HTML转PDF", "desc": "近期有个需求：需要把一个数据分析页面导出为PDF文件，经过一番调研，借鉴的前端的方案是：html2canvas （使用JavaScript屏幕截图） + jspdf （用JavaScript生成PDF"}, {"id": "6993245154018590757", "title": "高质感的网页模糊加载特效｜8月更文挑战", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 模糊加载动画：指随着加载的进度增加，页面模糊度也随之减少的动画效果，这种动画一般用于 首次进入网站、博客首页、个人页 等场景。在一些高"}, {"id": "6954667175097401380", "title": "前端工程师进阶要点四——过程抽象｜小册免费学", "desc": "高阶函数的特点是输入是函数，返回还是函数。输入的函数是实际的要执行的操作或要完成的功能的函数，但是该函数是作为过程被保留出来的，把原有的完整的处理代码中的共性的部分剥离出来"}, {"id": "6921985318698614792", "title": "📖如何实现防止重复的网络请求", "desc": "执行http函数的时候能获取到请求所有配置 config ，返回promise对象。 到这里已经实现了防止重复的网络请求，但还有一个问题，响应请求发生异常了要清除请求队列中当前url地址。不清理，下一次发送请求直接被取消掉 （这里我就随便写了一个方法，把请求队列全部清空，大家可…"}, {"id": "6998196659813351437", "title": "浅谈：JavaScript 变量预声明和作用域提升", "desc": "变量声明 在 JavaScript 中创建变量通常称为\"声明\"变量，声明一个变量有三种方式，包括 var、let 以及会被大家忽略的直接赋值方式。"}, {"id": "6998045503434965000", "title": "深浅克隆（拷贝）", "desc": "前言 js基础类型 基本类型：Number、Boolean、String、null、undefined、symbol（ES6 新增的），BigInt（ES2020） 引用类型：Object，对象子类型"}, {"id": "6920865278288986125", "title": "JavaScript之深入理解this", "desc": "this是函数运行时自动生成的内部对象，即调用函数的那个对象。（不一定很准确的定义，但还算通俗易懂） 在大多数情况下，this的值由函数调用方式决定，它不能在执行期间赋值来设置，它在每次执行下可能都有不同的值。 在全局执行环境中，this一直指向全局对象（global obje…"}, {"id": "6960231022168539143", "title": "手撕Promise", "desc": "手写一个符合Promise/A+规范的Promise Promise/A+规范 参考文献这个博主真的写的特别好 首先我们应该知道的事情： 在Promise中： 首先我们在调用Promise的时候会返回"}, {"id": "6844903818136649735", "title": "防抖(Debounce) & 节流(Throttle)", "desc": "浏览器中某些计算和处理非常昂贵。比如当鼠标响应resize, touchmove,scroll等操作时，绑定的函数触发的频率会很高，如果该函数稍微复杂一些，响应速度会远远跟不上触发频率，便会出现卡顿，延迟，假死等现象。 如上图所见，在输入时会不断的发送请求，非常浪费资源。为优化…"}, {"id": "7005857268805664781", "title": "JS -- 取出数组中的最大值和最小值", "desc": "先用array的sort方法进行升序或者降序排序，然后取出第一项或者最后一项 用 Math.min 和 Math.max (注意传参不是一个数组，需要一个一个传) 假设法, 假设第一个值为最大值，将它"}, {"id": "6998005855358550052", "title": "JavaScript垃圾回收机制与内存泄漏", "desc": "下文只是学习过程中参考书籍和博客总结的一些笔记和个人理解。 一、垃圾回收机制 1、JavaScript有全局执行环境和函数执行环境，函数执行时函数执行环境入栈，执行完毕出栈销毁。全局执行环境在关闭"}, {"id": "6993904263172718605", "title": "Js事件循环eventLoop", "desc": "事件循环三大模块： 主线程 宏队列：setInterval、setTimeout、I/O、UI rendering 微队列：promise.then 执行顺序 先执行主线程  遇到宏任务，添加到宏队列"}, {"id": "6844903506621497358", "title": "Vue2 原理浅谈", "desc": "本文重点讲述Vue2渲染的整体流程，包括数据响应的实现（双向绑定）、模板编译、virtual dom原理等，希望读者看完有所收获。 前者固然直接，但是当应用变得复杂则代码将难以维护，而后者框架帮我们实现了一系列的操作，无需管理过程，优势显然可见。 为了实现这一点，就是实现如何输…"}, {"id": "7003289614177796110", "title": "非数值的情况下使用'>''<''>=''<='", "desc": "非数值的情况下使用'>''<''>=''<=' 对于非数值进行比较时，会先将其转换为数值，然后再进行比较。 如果符号两侧都是字符串，不会将其转换为数值进行比较，而会分别比较字符串中字符的Unicode"}, {"id": "6861586972696444942", "title": "前端路由模式详解（hash和history）", "desc": "前端路由有两种模式：hash 模式和 history 模式，接下来分析这两种模式的实现方式和优缺点。 hash 模式是一种把前端路由的路径用井号 # 拼接在真实 URL 后面的模式。当井号 # 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 hashchange 事…"}, {"id": "6972414035820019726", "title": "模拟实现：循序渐进的实现较为完整的async/await", "desc": "async/await大家在平时工作中用得非常的多，大部分同志也知道是Generator的语法糖。本文和大家一起学习一下具体的实现细节"}, {"id": "6844903888978444296", "title": "性能优化之防抖和节流", "desc": "节流是持续触发的时候，每隔n秒执行一次函数比如人的眨眼睛，就是一定时间内眨一次。这是函数节流最形象的解释"}, {"id": "6844903545276203022", "title": "GraphQL 搭配 Koa 最佳入门实践", "desc": "GraphQL一种用为你 API 而生的查询语言，2018已经到来，PWA还没有大量投入生产应用之中就已经火起来了，GraphQL的应用或许也不会太远了。前端的发展的最大一个特点就是变化快，有时候应对各种需求场景的变化，不得不去对接口开发很多版本或者修改。各种业务依赖强大的基础…"}, {"id": "6844903520450134024", "title": "JS时间处理插件MomentJS", "desc": "笔者在做项目的时候，需要对日期和时间进行一些处理和操作，但是每次都用JS自带的Date对象很不方便，还要写一堆繁琐的代码，后续维护起来也很痛苦。在网上找了一下JS处理日期和时间的插件，发现了MomentJS很好用，学习了一下它的语法，发现十分的简洁易懂，而且可扩展性很强，调用方…"}, {"id": "6844904162522562574", "title": "[⏰5分钟学会,或者1秒CV代码] d3.js 组合 vue, 新手也实现 🌿 拓扑(svg 版)", "desc": "如果急用, 可先cv走代码修改, 哪里没明白再回来看哪里. d3 是一个大而全的图形库, 集成了svg 元素操作和常见图表(图形)的数据结构. 本文基于v5 版本的 d3 编写, d3 的功能都是拆分成独立包的, 我们这里只需要引入d3-hierarch和d3-shape生成拓…"}, {"id": "6991837100924469255", "title": "扎实基础篇-----reduce进阶（下）｜ 8月更文挑战", "desc": "前言 上篇文章主要介绍了reduce的基本语法和经典入门例子，熟悉了之后，这篇文章主要是和小伙伴分享一下reduce在我们实际开发中有哪些妙用？ 正文 执行为什么输出的是 NaN 一起来回顾上一节留下"}, {"id": "6844903507863027720", "title": "带你理解 JS 容易出错的坑和细节", "desc": "当执行 JS 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境。 想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理…"}, {"id": "6972156271289991199", "title": "如何用一行代码执行二叉树节点累加", "desc": "这是我参与更文挑战的第10天，活动详情查看： 更文挑战 如何想起来这个问题的，主要是在给成员讲解数组reduce方法的时候想到的，想举个例子说明这个函数的特殊性。"}, {"id": "6999054350681112583", "title": "再说面向对象（3）", "desc": "一文全悉js 数据类型检测方式，typeof、instanceof、constructor 运算符、Object.prototype.toString.call 方法"}, {"id": "6844903652381949965", "title": "JavaScript数组的十八般武艺", "desc": "JavaScript数组的索引是基于零的32位数值，第一个元素索引为0，数组最大能容纳4294967295（即2^32-1）个元素。 JavaScript数组是动态的，根据需要它们会增长或缩减，并且在创建数组时无需声明一个固定的大小或者在数组大小变化时无需重新分配空间。 Jav…"}, {"id": "6844904198593576974", "title": "DD每周前端七题详解-第五期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6988798135866753031", "title": "你还记得这些DOM操作么？", "desc": "由于Vue和React这些技术栈的崛起和完善，很多时候前端已经不在编写纯原生js和大量的DOM操作，那些原滋原味的DOM操作也淡入我们的视野之中"}, {"id": "6968686272877428744", "title": "深浅拷贝方法总结、练习", "desc": "深拷贝与浅拷贝简介： 浅拷贝常见方法： 数组的slice()、concat()、Array.from()、Object.assign()、...(拓展运算符)、递归方式实现"}, {"id": "6998346673994858527", "title": "浏览器缓存机制", "desc": "缓存机制 1.浏览器发送请求前，根据请求头的expirse 和 cache-control判断是否命中强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，则进入下一步。 2.没有命"}, {"id": "6989483587804332040", "title": "driver.js 源码增加跳过事件回调 （vue新手引导", "desc": "给新手引导插件——driver.js，增加跳过按钮的事件回调，区分完成与跳过的事件回调，方便在vue中使用。"}, {"id": "6976600915398623262", "title": "数据结构之散列表（二）", "desc": "我们在上一篇散列表中简单的实现了散列函数和散列表。仔细想来，我们简单实现的散列函数会存在问题，就是可能会产生一些重复的hash值出来，这时候就会造成冲突，俗称散列表的冲突。"}, {"id": "6884472519055654925", "title": "前端高度还原设计稿（字体篇）", "desc": "前言：以前前端都是拿到psd设计图，需要自己用ps切图，需要自己在psd上面一个个去量设计的大小和间距，而现在一般都是要求设计师把设计稿直接上传到蓝湖上面，通过蓝湖的标注来写出前端代码！下面我就前端如"}, {"id": "6844904086949593101", "title": "面试官问：Node 与底层之间如何执行异步 I/O 调用", "desc": "核心模块(native模块)：包含在 Node.js 源码中，被编译进 Node.js 可执行二进制文件 JavaScript 模块，其实也就是lib和deps目录下的js文件，比如常用的http,fs等等。 内建模块(built-in模块)：一般我们不直接调用，而是在 nat…"}, {"id": "6993917761445429255", "title": "一文搞懂 this指向", "desc": "this关键字是JS中非常重要的一部分，也是JS编程基础中的基础。很多人去学习它的时候，往往会独立的去探寻this到底指向什么？但我认为这样的理解是孤立和断层的，我们不会是因为用this而用this。"}, {"id": "6844903850105634824", "title": "JavaScript 发布-订阅模式", "desc": "发布-订阅模式，看似陌生，其实不然。工作中经常会用到，例如 Node.js EventEmitter 中的 on 和 emit 方法；Vue 中的 $on 和 $emit 方法。他们都使用了发布-订阅模式，让开发变得更加高效方便。 1. 定义 发布-订阅模式其实是一种对象间一对…"}, {"id": "6844903841293418503", "title": "使用 Node.js 写一个代码生成器", "desc": "第一次接触代码生成器用的是动软代码生成器，数据库设计好之后，一键生成后端 curd代码。之后也用过 CodeSmith , T4。目前市面上也有很多优秀的代码生成器，而且大部分都提供可视化界面操作。 自己写一个的原因是因为要集成到自己写的一个小工具中，而且使用 Node.js …"}, {"id": "6844904073615900679", "title": "【前端】H5人脸实时识别自动截取人脸照片", "desc": "这要是放在App上做，其实不算什么难点。关键在于他喵的是网页！！！ 这样当你点击input的时候，会唤醒手机自带的相机，进行拍摄或者拍照。 难点1 自定义一个这样的遮罩在相机里，完全是异想天开。 难点2 实时进行人脸识别，因为唤醒相机进行录像完全是在录像，你不能操作视频流。 难…"}, {"id": "7004991347606339591", "title": "JavaScript任务执行笔记", "desc": "浏览器中的 JavaScript 的执行流程和 Node.js 中的执行流程都是基于 事件循环 的 事件循环 事件循环 的概念非常简单，事件就是一个动作，界面点击会触发一个动作，生成点击事件，get "}, {"id": "6991059483594063879", "title": "边学边译JS工作机制---15.类，继承，Babel和TS的转换", "desc": "这一章讨论实现JS类和继承的各种姿势。我们将先看看原型的工作机制，分析一些流行库模拟基于类的继承的方式。 然后，我们看看如何转换，增加一些原生不支持的特性，以及如何使用Babel和TS支持 ES201"}, {"id": "6844903639207657480", "title": "vue-cli中的webpack4一步到位填坑记", "desc": "Webpack也在不断的优化迭代；截至目前，已经更新至 v4.16.0；在Webpack4这个版本，它在原有基础上，做了很多优化，也引入了颇多的新特性。在新的版本中，将获得更多模块类型及对.mjs的支持，更好的默认值、更为简洁的模式设置、更加智能的来分割Chunk，还新增的sp…"}, {"id": "6844903729980768269", "title": "[译]我们为什么要写 super(props)?", "desc": "我听说 Hooks 最近很火。讽刺的是，我想以一些关于 class 组件的有趣故事来开始这个博客。怎样！（皮一下很开心） 这些小坑并不会影响你高效的使用 React，但如果你愿意深入了解下背后的工作原理，你会发现它们非常有意思。 这是第一个。 当然，class fields p…"}, {"id": "6844903666420318216", "title": "Vue.js异步更新及nextTick", "desc": "前段时间在写项目时对nextTick的使用有一些疑惑。在查阅各种资料之后，在这里总结一下Vue.js异步更新的策略以及nextTick的用途和原理。如有总结错误的地方，欢迎指出！ 在点击click事件之后，number会被遍历增加10000次。在Vue.js响应式系统中，可以看…"}, {"id": "6938744685565640718", "title": "逻辑可视化，人人能编程？", "desc": "页面可视化搭建系统从16年开始如雨后春笋般涌现而出，从活动页搭建到中后台搭建，有开源有仅公司内部使用的，都致力于将前端从繁复的体力劳动中解脱出来，提高页面生产效率。优酷内部也有一套营销活动搭建系统，每年生产2K+活动页；能够满足这么多页面的需求，除了沉淀了大量可复用的组件外，围…"}, {"id": "6981384936284651556", "title": "js 时间戳转换 格林威治时间转换", "desc": "背景 Moment.js很重(源码为4600行左右)，所以有很多替代方案的，如：Dayjs、miment等，所以可以根据浏览器的兼容情况自行写个轻量级的库。 1、 简单通过时间对象转换需要的时间格式。"}, {"id": "6996912691952500767", "title": "可视化场景内任意绘制线段并测量距离", "desc": "在数字孪生可视化场景中，可能会遇到这个问题，即需要测量数字孪生可视化场景中的不同目标之间的距离。通过这个测量，可以明确的知道可视化场景中各个目标的位置以及各个目标之间的距离，便于做出合理的规划。这个需"}, {"id": "6844903508798357511", "title": "React源码解析(二):组件的类型与生命周期", "desc": "在上一篇文章《React源码解析(一):组件的实现与挂载》中，我们阐述了React组件的实现和挂载。现在我们来一起探究组件的生命周期。 我们已经知道，只有在挂载流程开始后，才会触发组件的生命周期，生成ReactElement类型的js对象，通过解析组件对象内部所携带的信息，获得…"}, {"id": "6844903696833183758", "title": "来，用心感受自己的第一个npm包", "desc": "进入到 npm 文件夹，初始化项目。然后会让你填一些项目相关的信息，跟着提示填就是了。没啥说的。注意name不要和现有的其他npm包重名了，不然一会儿发Npm包的时候会失败，可以先去npmjs.com搜一下有没有重名的。 dist代表发布时的目录，src是开发目录。dist里面…"}, {"id": "6980347608724144142", "title": "JS唬住面试官拿高薪 一 基础篇", "desc": "第一章: JS数据类型之问——概念章 JS原始数据类型有哪些？引用数据类型有哪些？ 基本类型(值类型 原始值)，在JS中存在着 7 种，分别是： null undefined number strin"}, {"id": "7001464711334068254", "title": "浅谈Promise和其API", "desc": "1.Promise是什么 在PromiseA+规范中，Promise具备着三种状态pending,fulfilled和rejected,状态的变化过程只能有两种，一是从pending到fulfille"}, {"id": "6914802732889014279", "title": "手撸Promise心路历程", "desc": "如何创建一个Promise对象呢？ 我们需要通过new 关键字创建。很简单吧，所以我们知道Promise是一个类 这个函数为Promise的执行器，创建这个类的时候执行器会”立即“执行。 这样我们应该给Promise类在构造器里面传递一个执行器，并立即执行。 刚刚我们实现的简单…"}, {"id": "6963442027644059662", "title": "一次搞懂-JavaScript模块化详解", "desc": "模块化的意义 将代码拆分成独立的块，然后再把这些块使用模块模式连接起来实现不同的功能。 就像小时候玩的拼图一样，不同的拼图组合在一起就可以拼成任意的形状。 这种模式的背后思想也很简单：把逻辑分块、各自"}, {"id": "6957485263077507102", "title": "ES6-Promise进阶篇", "desc": "基础篇主要是介绍了Promise的基本使用方法和特点，进阶篇讲讲Promise的复杂使用方式等。 Promise连锁和Promise合成 Promise连锁 由于每个Promise实例都会返回一个新的"}, {"id": "6844903542067560461", "title": "响应式编程，是明智的选择", "desc": "相信你们在学习响应式编程这个新技术的时候都会充满了好奇，特别是它的一些变体，例如：Rx系列、Bacon.js、RAC等等…… 在缺乏优秀资料的前提下，响应式编程的学习过程将满是荆棘。起初，我试图寻找一些教程，却只找到少量的实践指南，而且它们讲的都非常浅显，从来没人接受围绕响应式…"}, {"id": "6980210660382605348", "title": "JavaScript浅析 -- 运算符和优先级", "desc": "js的运算符包括算术运算符、比较运算符、布尔运算符、位运算符、赋值运算符和其他运算符，你是否都了解了呢？运算符的优先级是怎样的？"}, {"id": "6990288694653485092", "title": "配合element-ui，el-form校验经纬度", "desc": "1.1 校验经度 1.2 校验纬度 2. 书写位置 vue项目中的data下面，return{}的上方。如图： 3. 配合element-ui中的form表单rules验证一起使用 ps：需要设置的r"}, {"id": "6991491905461125150", "title": "数组的扁平化处理|八月更文挑战", "desc": "1.递归实现 循环递归的方式，一项一项的去遍历，如果每一项还是一个数组就将进入递归递归。我们递归的子问题就是每层返回一个数组。 如果我们判断当前是一个数组，那么递归返回的也一定是一个数组，我们只需要将"}, {"id": "6993209107406684190", "title": "js的Object常用方法总结 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 1、Object.keys方法 Object.keys方法是JavaScript中用于遍历对象属性的一个方法 。它传入的参数是一个对象，返回"}, {"id": "6844903592344698888", "title": "低门槛彻底理解JavaScript中的深拷贝和浅拷贝", "desc": "按照常规思维，obj1应该和num1一样，不会因为另外一个值的改变而改变，而这里的obj1 却随着obj2的改变而改变了。同样是变量，为什么表现不一样呢？这就要引入JS中基本类型和引用类型的概念了。 打个比方，基本类型和引用类型在赋值上的区别可以按“连锁店”和“单店”来理解：基…"}, {"id": "6864168067182968839", "title": "还在问什么是JavaScript构造函数、实例、原型对象以及原型链？看完这篇你就懂", "desc": "ES6， 全称 ECMAScript 6.0 ，2015.06 发版。在ES6之前，对象不是基于类创建的，而是用一种称为构造函数的特殊函数来定义对象和它们的特征。 构造函数是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 一起使用。我们可以把对象中…"}, {"id": "6919100976691413000", "title": "潮流前端周刊（第19期）- 落日西湖", "desc": "封面图摄于日落时分的西湖边上，挑一个天气好的日子去走走还不错。 一起来看看现在 JS 在世界上发展怎么样了。 写习惯了 Sass / Less，突然去写原子类的样式开始可能会很不习惯，但是到了用到很熟练时候，你会觉得真香，还可以减少大量无用样式体积。 可能不少人不太了解 Jav…"}, {"id": "6999567361216872478", "title": "学完了防抖，不顺便学学节流吗？", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 节流的应用场景：当重复调用函数的时候，至少每隔 wait毫秒调用一次该函数。对于想控制一些触发频率较高的事件有帮助。 节流常见应用场景代表"}, {"id": "6999551898709655582", "title": "JavaScript复习（一）｜ 8月更文挑战", "desc": "“这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战” js的数据类型 在 js 中数据类型分为：原始数据类型和引用数据类型。 原始数据类型： 值的本身无法被改变，我们也叫它们为 原始值。"}, {"id": "6844903693373046792", "title": "基于vue-cli3 SSR 程序实现热更新功能", "desc": "通过上一篇文章 通过vue-cli3构建一个SSR应用程序 我们知道了什么是SSR，以及如何通过vue-cli3构建一个SSR应用程序。但是最后遗留了一些问题没有处理，就是没有添加开发时的热更新功能，难道要每次更新代码都要重新编译打包吗？显然不是很合理。那接下来我们将为该SSR…"}, {"id": "6844904054188048398", "title": "JS 简单实现UTF-8编码,Base64编码", "desc": "文章用JS简单的实现UTF-8编码和Base64编码，阅读本文可以了解Unicode 与 UTF-8 之间的转换，了解Base64编码为什么会使数据量变长。 Unicode，ASCII，GB2312编码集合等，类似于字典。字符的编码，类似于字典中的字在哪一页哪一行。当不同系统用…"}, {"id": "6999544594392154143", "title": "JS 应用篇(四)：防抖&节流函数", "desc": "为了优化体验，需要对srcoll、mousemove这类事件进行调用次数的限制，对此我们就可以采用debounce（防抖）和throttle（节流）的方式来减少调用频率。"}, {"id": "6868591130720600078", "title": "Vite: 如何实现热更新", "desc": "之前的一篇文章说了 Vite: 如何不使用 webpack 开发应用，按照约定，接下来要说一下热更新的问题，Vite自己通过WebSocket实现了浏览器与服务器之间的通信，从而达成热更新的目的。 执行 dev:reload 之后，会启动一个服务器然后在代码变更的时候会自动刷新…"}, {"id": "6976645348211032101", "title": "手动实现一个bind()", "desc": "这是我参与更文挑战的第22天，活动详情查看： 更文挑战 什么是bind() bind这个单词的意思，直译过来是绑定、捆绑的意思，而这个含义也是在js这个方法的核心思想。 无论的方法名的直译、还是对方法"}, {"id": "6993649546857300005", "title": "JS中的Promise", "desc": "如果我们正在定义一个异步API，但希望使其基于Promise，请忽略回调参数，而是返回Promise对象。然后调用者可以在这个Promise对象上注册一个或多个回调，当异步计算完成时将调用它们。"}, {"id": "6976887915624267783", "title": "JavaScript|对象（重点）", "desc": "目标 能够说出为什么需要对象 能够使用字面量创建对象 能够使用构造函数创建对象 能够说出new的执行过程 能够遍历对象 目录 对象 创建对象的三种方式 new关键字 遍历对象属性 1. 对象 1.1 "}, {"id": "6994601522168332325", "title": "理解javascript中Generator生成器函数", "desc": "1. 定义生成器函数： 在关键字function后面加上一个星号（*）创建一个生成器函数。在生成器函数内使用yield生成独立的值。 2. 调用生成器函数 调用生成器函数并不会执行生成器函数，而是创建"}, {"id": "6865557155102064648", "title": "【译】Node 模块之战：为什么 CommonJS 和 ES Module 不能共存", "desc": "在 Node 14 的项目里，我们依然能看到混杂着 CommonJS（CJS） 和 ES Modules（ESM） 风格的代码。CJS 使用的是 require() 和 module.exports；ESM 用的是是 import 和 exports。 首先 ESM 和 CJS…"}, {"id": "6961559041457946632", "title": "讲下 V8 sort 的大概思路，并手写一个 sort 的实现", "desc": "![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b963ec0ce39460d802a7860a64bab29~tplv-k3u1fbp"}, {"id": "6995447352651677704", "title": "for of 与 for in 的区别", "desc": "for in for in 可以获取到对象的属性名但是获取不到属性值，遍历数组时得到的是下标。 for in 可以得到对象的原型上的属性名，通过hasOwnProperty来进行过滤 for of f"}, {"id": "6844903607507107853", "title": "纯正后端的vue轮子笔记", "desc": "1. 路由加载 2. 404路由 3. 路由拦截 4. 动态路由 5. 路由加载时动画 1. 小知识 2. 多模块 3. 辅助函数 4. 数据持久化插件 5. 日志插件 1. 需要实现的功能 2. 路由设计 3. 页面级的权限控制 4. 元素级的权限控制 1. 如何封装一个支持…"}, {"id": "6981073936670801933", "title": "Javascript中必须熟记的常用数组和字符串方法", "desc": "本文整理了JS中常用的数组和字符串方法不管是面试，还是工作中，数组和字符串的常用方法都是必须掌握并且熟记的。"}, {"id": "6999256929273348132", "title": "理解js中的闭包｜8月更文挑战", "desc": "“这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战” 引子 很多初学者都会觉得闭包的概念很麻烦复杂，甚至还有人说闭包会引起内存泄露，让人对闭包即好奇又畏惧，其实闭包一点都不神秘也不难，甚至可"}, {"id": "6982074094623653924", "title": "对Javascript中作用域和闭包的理解", "desc": "对作用域和闭包的理解，以及通过代码来更深入的说明这两个概念，也算是对自己学习的一个总结和记录。 学习知识不应该还停留在知道和理解，而应该是反馈和应用。"}, {"id": "6919805736734162952", "title": "面试题：四种判断数据类型的方法", "desc": "JavaScript 是一种弱类型或者说动态类型，这就意味着你不需要提前声明变量的类型，在程序运行的过程中，类型会被自动确定。这就意味着你可以使用同一个变量保存不同类型的数据： 相信不管是在学习还是平常写业务的过程中，或多或少的都会碰到类似于--- 如何判断数据类型 的这种问题…"}, {"id": "6959420029850877982", "title": "原生js中的三座大山（上）-this", "desc": "前言： 想要学好前端，基本功必须得要扎实，原型和原型链、闭包、this,那这三座大山就一定要跨过去，今天先说this,话不多说，go~ this： 在开发时，我们要搞清楚this的指向，是至关重要的~"}, {"id": "6844903952174022670", "title": "和微信公众号编辑器战斗的日子", "desc": "公元 2019 年，微信公众号排版能力孱弱，始终为运营者所诟病，秀米、135 编辑器等工具割据一方。 但无论是微信原生工具，还是其他编辑器，都让创作者不得不将有限的创作经历分散到排版设计上。 Markdown 解决排版的灵丹妙药，应运而生。 Markdown 是一种排版语法，拥…"}, {"id": "6947858245356617764", "title": "【No Problem】如何解决 Mac 左右滚动误触返回事件？", "desc": "这很容易造成“误触”的情况，比如一个编辑表单（宽度很大，可以左右滚动），我填写了很多的内容，在一个表格中左右滚动的时候，返回了前一个页面，我在页面中填了很多的东西就会不见...这会很让我奔溃。 其实触发返回事件是有一个边界的，这一点我也是自己实践得出来的结论。这个边界触发就是滚…"}, {"id": "6844904159989202957", "title": "用英雄联盟的方式讲解JavaScript设计模式（一）！", "desc": "在JavaScript里，构造函数通常是认为用来实现实例的特殊的构造函数。通过new关键字来调用定义的构造函数，你可以告诉JavaScript你要创建一个新对象并且新对象的成员声明都是构造函数里定义的。在构造函数内部，this关键字引用的是新创建的对象。 作为一个老联盟fans…"}, {"id": "6844903657842933774", "title": "15 个有趣的 JS 和 CSS 库", "desc": "时光如白驹过隙， Tutorialzine 为我们带来了 2017 年 4 月份一些精心挑选的优秀 Web 开发资源。前端开发者们，让我们一起先睹为快吧！ Core UI 是一个基于 Bootstrap 4 的管理模板，它提供了创建控制面板的高度自定义解决方案。同时，为了让你快…"}, {"id": "6844903805851697159", "title": "一个Vue引发的性能问题", "desc": "这个会不会是因为html嵌套太深导致Layout等计算复杂，所以CPU上升了呢，笔者尝试把DOM结构简单化，以及加上contain: strict等Layout隔离的方法，也是没有效果。所以只能是JS执行问题了，通过Chrome devtools的Performance可以研究…"}, {"id": "6982490269467803685", "title": "浅谈js this 及apply、call、bind", "desc": "相信小伙伴们对JavaScript中的this不陌生了，本篇文章通过两个面试题写下自己了解的this，以及apply，call，bind"}, {"id": "6937534801540808735", "title": "WebGL坐标系基础（二）", "desc": "在上一篇文章：《WebGL 坐标系基础（一）》中，我们介绍了WebGL 中常见的几种坐标系以及他们之间的关系。本期将更加“硬核”一些，从数学的角度，推导上期讲到的各个变换矩阵。 在下面的推导中，我们统一使用列向量来表示一个坐标，所谓列向量就是一个N*1 矩阵。例如坐标(x, y…"}, {"id": "6883793762045296648", "title": "用大白话轻松搞定正则(下）", "desc": "选择匹配 次序是从左到右，直到发现了匹配项，就忽略右边的匹配项(即使它产生了更好的匹配)。 上面的匹配即便ab更合适但还是只会匹配a。 再上个🌰，我们想使用选择匹配来匹配一段字符，只能是ab 或者 cd。上代码: 上面的输出的结果是不是很意外，我们想要的结果就是 ab 或者 …"}, {"id": "6992774936255266852", "title": "html2canva插件踩坑", "desc": "下载对比图的功能里，由于需要快速迭代，项目中使用了html2canvas这个插件，出现了元素文字位置不统一、图片错位、图片加载不出来的问题。通过查阅canvas绘制的策略：使用同源策略模式。 1、图片"}, {"id": "6987658708016693278", "title": "进阶算法之“搜索与排序”", "desc": "### 排序算法 - 冒泡排序 - 选择排序 - 插入排序 - 归并排序 - 快速排序 ### 搜索算法 - 顺序搜索 - 二分搜索"}, {"id": "6844903587458334733", "title": "Immutable.js了解一下？", "desc": "本篇只是对Immutable.js的简单介绍，后续会继续分享其具体实践应用。 Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。Immutable 实现的原理是 Pe…"}, {"id": "6989852413779771429", "title": "JS 之export、export default和module.exports ", "desc": "export和export default是ES6中导出模块中变量的语法 exports和module.exports是Nodejs中导出模块中变量的语法（基于CommonJs语法规范） 【expor"}, {"id": "6913708304682369038", "title": "凹凸技术揭秘 · Deco 智能代码 · 开启产研效率革命", "desc": "近几年中台的兴起，团队围绕业务中台化这个场景，将我们已有的诸多能力进行解构、重组、积木化，希望能将拆解后的积木进行体系化地串联，从而达到降本增效的目的。 对于电商平台来说，每年都需要面临大量的大促活动页面需求，对于如何提高页面产出效率，大家都不约而同采用「页面可视化搭建」解决方…"}, {"id": "6994016625653448717", "title": "手写call , bind,apply 函数", "desc": "call、apply、bind 这“三兄弟”是Function原型上的三个改变调用函数作用域/上下文的函数，具体如何使用可以直接查看MDN，今天只研究如何实现这三个的实现"}, {"id": "6904508893897064456", "title": "图片懒加载竟如此简单", "desc": "这两天在看JavaScript的API时发现了这样一个东西IntersectionObserver(准确说它是浏览器原生提供的一个异步API)，它能够对一个元素进行监听，判断该元素是否在当前窗口中。 不用管它，简单点说，IntersectionObserver就是观察一个元素是…"}, {"id": "6999818074048167949", "title": "JS 实现原生AJAX", "desc": "原生JS，实现类似JQuery 中的ajax( )，写代码之前首先需要知道 AJAX 的运行原理以及其中的一些 API，这里就推荐菜鸟或者w3c 的教程"}, {"id": "6989481096790409253", "title": "边学边译JS工作机制--10. 使用MutationObserver 跟踪 DOM 变化", "desc": "客户端的Web应用已经越来越重了，这是由于人民群众日益增长的审美需求导致的。客户端需要提供更丰富的交互，实时计算等等。 复杂性的增长，让我们准确的知道运行期间任意时刻UI的状态、 当你构建一个框架或者"}, {"id": "6844903950538260494", "title": "JS基础-完美掌握继承知识点", "desc": "上篇文章详细解析了原型、原型链的相关知识点，这篇文章讲的是和原型链有密切关联的继承，它是前端基础中很重要的一个知识点，它对于代码复用来说非常有用，本篇将详细解析JS中的各种继承方式和优缺点进行，希望看完本篇文章能够对继承以及相关概念理解的更为透彻。 继承是一个类从另一个类获取方…"}, {"id": "7006725084077359112", "title": "【设计模式】- 观察者模式", "desc": "目录 观察者模式 观察者模式-脑图分析 参考 总结 后续的 举例子：如下：Aclass为目标对象，Bclass为观察者 一、观察者模式 观察者需Observer要实现update方法，供目标对象调用。"}, {"id": "7004713567324733448", "title": "基于Echarts+百度地图+Three.js的数据可视化系统", "desc": "上周重构项目数据统计部分写了几篇echarts相关的文章，重构的后台前端框架改用Vue，关于Vue中引用Echarts及可能遇到的问题的文章如下所示： VUE中使用Echarts图表 VUE父组件异步"}, {"id": "6997575695404793893", "title": "ajax原始请求，面试必备", "desc": "XMLHttpRequest 对象 简介 浏览器与服务器之间，采用 HTTP 协议通信。用户在浏览器地址栏键入一个网址，或者通过网页表单向服务器提交内容，这时浏览器就会向服务器发出 HTTP 请求。 "}, {"id": "6988949401842483230", "title": "产品经理：你能不能在网页里实现裸眼3D", "desc": "最近`产品经理`在掘金社区的出镜率很高，看来大家都很喜闻乐见工程师与产品经理的相爱相杀。这次他让我调研一下在网页里实现裸眼3D......"}, {"id": "6921886428158754829", "title": "中高级前端必须注意的40条移动端H5坑位指南 | 网易三年实践", "desc": "不知不觉在网易已有三年半，占了一半时间都在与移动端打交道，整个阶段都是遇坑填坑的学习过程。移动端开发在前端里像神一样地存在，不是说它多难而是说它坑位实在太多了，怎样填都填不完。Android和iOS各显神通，Android的系统版本和屏幕分辨率多得难以一招兼容，iOS的顽固标准…"}, {"id": "7007306583231168526", "title": "解析网络图片并上传的完整步骤", "desc": "项目中经常要用到解析网络图片在上传的功能，顾名思义，先解析再上传。 1、把图片链接转为base64格式，然后再把base64格式的转为File类型。 2、上传File文件"}, {"id": "6997968693414084644", "title": "「硬核JS」图解Promise迷惑行为｜运行机制补充", "desc": "如果你对Promise+Eventloop相关执行顺序相关的题目感到无语以及不解，那可能需要看看此文，彻底Get Promise的执行顺序！"}, {"id": "6995371411019710500", "title": "如何在大型代码仓库中删掉 6w 行废弃的文件和 exports？", "desc": "很多项目历史悠久，其中很多文件或是 export 出去的变量已经不再使用，非常影响维护迭代。 举个例子来说，后端问你：“某某接口统计一下某接口是否还有使用？”你在项目里一搜，好家伙，还有好"}, {"id": "6950063294270930980", "title": "「React进阶」 React全部api解读+基础实践大全(夯实基础2万字总结)", "desc": "很多同学用react开发的时候，真正用到的React的api少之又少，基本停留在Component,React.memo等层面,实际react源码中，暴露出来的方法并不少，只是我们平时很少用。但是Re"}, {"id": "6946022649768181774", "title": "死磕 36 个 JS 手写题（搞懂后，提升真的大）", "desc": "作为一个程序员，代码能力毋庸置疑是非常非常重要的，就像现在为什么大厂面试基本都问什么 API 怎么实现可见其重要性。我想说的是居然手写这么重要，那我们就必须掌握它，所以文章标题用了死磕，一点也不过分，也希望不被认为是标题党。 作为一个普通前端，我是真的写不出 Promise A…"}, {"id": "7003985519252078605", "title": "一篇文章轻松搞定Node核心知识体系📚", "desc": "前言 这是一篇Node核心知识体系的讲解，涉及到模块化，异步I/O，异步编程解决方案，内存控制，网络编程，进程这六个方面，如果对你有帮助的话点个👍和收藏吧❤️"}, {"id": "6998402962066243621", "title": "ArrayBuffer对象和Blob对象入门介绍", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 ArrayBuffer 对象，Blob 对象 ArrayBuffer 对象 ArrayBuffer 对象表示一段二进制数据，用来模拟内存里面"}, {"id": "7005732003983130637", "title": "简单代码实现一个，1w+人看到的中秋祝福", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 中秋将至，HR小姐姐说要在我们开发的公众号上的小牛人平台上弄个中秋动画，给厂里面1w+员工一点点中秋的氛围惊喜。 头脑风暴一圈后，决定弄个一家图"}, {"id": "7002032291471949838", "title": "前端黑科技代码（如果有新收藏就更新）", "desc": "这里给大家看一下我自己收藏的一些黑科技代码，都是我平常工(mo)作(yu)中看到或者用到的(一般用不到)"}, {"id": "7006155877325471751", "title": "【题库】- 补短板系列（一）", "desc": "目录 babel 原理 原型链判断 一、babel 原理 Babel 的三个主要处理步骤分别是： 解析（parse），转换（transform），生成（generate）。 解析 将代码解析成抽象语法"}, {"id": "6991640600533532679", "title": "跟着来，你也可以手写VueRouter", "desc": "本文介绍了路由的一些常识，并手写了一个精简版VueRouter，和绝大多数手写文章不同的是，这里代码是完全以源码为标准实现的，彻底搞懂核心源码之外，后面看真正的源码可以毫不夸张的说：纵享丝滑！"}, {"id": "6998672428020793358", "title": "h5原生draggable拖拽事件详解", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 拖拉事件 拖拉事件的种类 拖拉（drag）指的是，用户在某个对象上按下鼠标键不放，拖动它到另一个位置，然后释放鼠标键，将该对象放在那里。 拖"}, {"id": "6984188410659340324", "title": "「硬核JS」你的程序中可能存在内存泄漏", "desc": "你了解内存泄漏吗？此文我们会介绍内存泄漏的相关概念和引起内存泄漏的一些问题，还会着重给大家介绍内存泄漏的排查、定位及修复方法，最后还简单扩展了下前端内存三大件的其他两件内存膨胀和频繁GC的概念"}, {"id": "6978685539985653767", "title": "Coding Writing 好文召集令｜后端、大前端双赛道投稿，2万元奖池等你挑战！", "desc": "hi，掘友们～ 掘金好文召集令夏日来袭，2万元奖池等你投稿！ 经过6月的30天更文挑战，相信很多掘友已经形成了持续沉淀复盘、坚持创作的好习惯，而即将在7月1日正式启动的「coding writing "}, {"id": "7005348792157339684", "title": "手把手带你玩转有趣的粒子特效", "desc": "之前在练习写粒子特效的时候发现有些特效的实现跟物理知识有很大的关系，后来又碰巧发现了一本神书，它教你如何运用物理数学知识来模拟实现一些自然界的特效，本文将带你从零开始实现一个由物理驱动的粒子特效。"}, {"id": "6961222829979697165", "title": "最全的 Vue 面试题+详解答案", "desc": "前言 本文整理了高频出现的 Vue 相关面试题并且附带详解答案 难度分为简单 中等 困难 三种类型 大家可以先不看答案自测一下自己的 Vue 水平哈"}, {"id": "6986785259966857247", "title": "为了让她10分钟入门canvas，我熬夜写了3个小项目和这篇文章", "desc": "前言 大家好，我是林三心，回想起我当年校招的时候啊，多次被面试官问到canvas，但是我却不会，后来一直想找个机会学一下canvas，但是一直没时间。canvas在前端的地位是越来越重要了，为此，我特"}, {"id": "7005497140390821895", "title": "【评论有奖】初识 JavaScript 闭包", "desc": "闭包（closure）是 JavaScript 的难点，也是它的特色。是号称 JS`面试三座大山（原型与原型链，作用域及闭包，异步和单线程）其中的一座山。"}, {"id": "7004704724049985549", "title": "老板：你给我来个蜻蜓点水的特效", "desc": "前言 最近，老板找到我说想搞点花哨的特效，于是乎，列举了各大让人抓狂的特效。 之后在我的深入评估（摸鱼）中，选取了一个稍微简单的特效，所谓蜻蜓点水实际就是波纹特效。 寻找思路 定好特效后，老板拿了张效"}, {"id": "7005334860529156109", "title": "如何从 0 到 1 搭建代码全局检索系统", "desc": "背景 此前，前端团队的项目有几百个左右，想要查找某个接口 API 或者某个 NPM 包以及一些关键词在哪些项目中使用到，需要每个开发同学在自己维护的项目里全局搜索一遍或者写个脚本跑一遍，然后统计上去，"}, {"id": "7007246725601558541", "title": "文字水印 vue", "desc": "设计思路： 排除 不需要水印的url 设置水印属性 循环行列 使用 createDocumentFragment （文档片段）实现，不会引起页面回流， 性能 更好 模板 // 样子跟这个 差不多 但是"}, {"id": "6999781802923524132", "title": "call, call.call, call.call.call, 你也许还不懂这疯狂的call", "desc": "你说你懂call, 我说你不懂，你可知a.call.call(b,'b')， 一起探究这疯狂的call。"}, {"id": "6992749075326042126", "title": "这些操作删除console.log代码，你都知道吗", "desc": "说起console.log调试，不用多说，那是非常的好用，开发中帮助我们解决了不少Bug。我们经常能在开发环境中看见这一坨一坨的console调试。但是生产环境是绝不对不允许出现console信"}, {"id": "6987166546502090788", "title": "【干货】私藏的这些高级工具函数，你拥有几个?", "desc": "用极其精简的代码，编写的高级工具函数，覆盖localStorage已使用空间，桌面通知，视频截图，base64编码和解码，UUID生成，序列生成器等等，总有一个留的住你。"}, {"id": "7007432019802079246", "title": "移动WEB开发会用到的 5 个API", "desc": "作为开发人员，经常使用 Web API 来轻松实现复杂的功能，或者创建它们来抽象复杂性。Web API 允许服务之间进行对话，分享信息到朋友圈或显示地图等操作。 可以将用于构建客户端 Web 应用程序"}, {"id": "7007341038058602533", "title": "前端常用插件、工具类库汇总", "desc": "前言 在开发中，我们经常会将一些常用的代码块、功能块进行封装，为的是更好的复用。那么，被抽离出来独立完成功能，通过API或配置项和其他部分交互，便形成了插件。 下面这些是我在工作中积累的一些常用的前端"}, {"id": "7007805054153392142", "title": "防抖和节流的意义是什么？？ta们干了些什么？？", "desc": "酌酒轻轻、感受生活 通俗的讲： 门前大桥下游过一群鸭，快来数一数（开始）数鸭子我们是认真的，走起数起来。"}, {"id": "6984587700951056414", "title": "拖拽竟然还能这样玩！", "desc": "原来拖拽 API 除了可以用来上传文件、页面布局或列表项排序之外，还可以跨越浏览器的边界，实现数据共享。"}, {"id": "7000192770753167396", "title": "vue3.2新增的defineCustomElement底层原理", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 Web Components Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且"}, {"id": "7000330596043997198", "title": "当有人说你页面有性能问题，该怎么办", "desc": "背景 产品：你看看这页面加载的如此之慢，怎么会有用户用呢？（并甩给了我一个录屏） 我: （抛出前端应对之策）前端需要加载vue，js，html，css这些都需要时间呀，是不是，别说还需要接口请求，数据"}, {"id": "7007063743209144327", "title": "ZooTeam 前端周刊｜第 150 期", "desc": "All in one：项目级 monorepo 策略最佳实践 - SegmentFault 思否 Nest.js 实践总结 Lighthouse 测试内幕 - 知乎 React技术揭秘 TypeScr"}, {"id": "6996289669851774984", "title": "基础很好？22个高频JavaScript手写代码了解一下", "desc": "昨晚上写到凌晨3点多，今天早上起来又继续上班，下班又继续写，555555，七夕就这么过去了，实在没办法，不想写水文"}, {"id": "6999768570570178596", "title": "【建议收藏】25+正则面试题详尽解析，让你轻松通过正则面试，让你少写2000行代码", "desc": "数字千分位分割、手机号3-3-4格式拼接、trim函数实现、HTML转义、获取url query参数...你是不是也经常在面试和工作中遇到呢？让我们一起看看，如何用正则将他们一网打尽吧！！！"}, {"id": "7007351453299769357", "title": "DOM交叉观察 API Intersection Observer", "desc": "Intersection Observer API 提供了一种异步检测目标元素与祖先元素或 viewport 相交情况变化的方法"}, {"id": "7001284277291712526", "title": "一万字ES6的class类，再学不懂，请把我锤死（继承篇）", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 Class 的基本语法 Class 的继承 简介 Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承"}, {"id": "6966183867413692452", "title": "JavaScript设计模式——策略模式", "desc": "在说策略模式之前，我们先简述一下两个基本概念： 环境类（Context）：负责接收用户请求，并派发给策略算法执行 策略类（Strategy）：策略算法具体实现，接收环境类派发的计算请求，并返回计算结果"}, {"id": "6969749811276808228", "title": "js事件冒泡详解", "desc": "什么是冒泡？ DOM事件流（event flow ）存在三个阶段：事件捕获阶段、 处于目标阶段、 事件冒泡阶段。 事件捕获（event capturing）：通俗的理解就是，当鼠标点击或者触发dom事"}, {"id": "6985034878945361951", "title": "表单FormData的使用", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 一、创建一个formData对象实例的方式 1、创建一个空对象 2、使用已有表单来初始化对象 方法示例 二、 操作"}, {"id": "6844904190787993607", "title": "TypeScript实现Map与HashMap", "desc": "字典(Map)与散列表(HashMap)是一种采用[键(key)，值(value)]对的形式来存储数据的数据结构。 本文将详细讲解字典与散列表的实现思路并使用TypeScript将其实现，欢迎各位感兴趣的前端开发者阅读本文。 字典与散列表存储数据的方式是键值对的形式来存储，因此…"}, {"id": "6898110007863148552", "title": "深入理解箭头函数，学习其非常特殊且有用的特性", "desc": "让我们深入研究一下箭头函数。 箭头函数不仅仅是编写简洁代码的“捷径”。它还具有非常特殊且有用的特性。 JavaScript 充满了我们需要编写在其他地方执行的小函数的情况。 arr.forEach(func) —— forEach 对每个数组元素都执行 func。 setTim…"}, {"id": "7000700561750229000", "title": "js基本知识复习（1）", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 基础复习，重学JavaScript，一起来巩固知识吧！"}, {"id": "6991454721156317198", "title": "【重学JS】每天巩固基础-打好地基筑高楼-day1(一)", "desc": "巩固学习 JavaScript基础, 加深理解记忆, 打牢地基才能盖高楼 也可以作为入门JavaScript的跟读学习"}, {"id": "6844903585575108615", "title": "H5手机端开发问题汇总及解决方案", "desc": "少侠，请留步，相见必是缘分，赠与你一部《踏坑秘籍》 ios竖屏拍照上传，图片被旋转问题 解决方案 ios：DOM元素固定一边，另一边滚动，滚动很卡的问题 部分手机第三方输入法会将页面网上挤的问题 iPhoneX适配 某些机型不支持video标签的poster属性，特别是安卓 C…"}, {"id": "6994670117694996487", "title": "Javascript 的执行环境(execution context)和作用域(scope)及垃圾回收", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 本文讲述Javascript 的执行环境(execution context)和作用域(scope)及垃圾回收"}, {"id": "6977626168161746958", "title": "阿里面试：你说一下函数防抖和节流……", "desc": "今天听同事分享最近写的代码模块，提到了一个名词，函数节流 这个词真是熟悉而又陌生的词，上一次看到还是在网上各种流行的前端面试宝典中. 当时我看到这个就像看到蒙娜丽莎的微笑一样神秘而难以琢磨……"}, {"id": "6844903965943922695", "title": "漫漫人生路，走走又停停", "desc": "转眼之间，已经过去了一个多月了，自从上次到达济南之后，又继续走了很多个城市。目的地是杭州，但是到达之后并没有太多的激动心情 漫漫人生路，一段接一段。走下去，停下来，做自己想做的事实属不易。愉快悲伤，在身边转又转，一路辛徒都有所得。 南京1912的风格有点民国时期的感觉。而且据说…"}, {"id": "6976082478352039943", "title": "Cesium是如何实现多线程的", "desc": "这是我参与更文挑战的第9天，活动详情查看： 更文挑战。 Web Worker 背景 众所周知，JavaScript是单线程模型，所有的任务只能在同一条线程上进行完成，前边的任务未完成则后续任务只能等待"}, {"id": "6844903604067794958", "title": "Webpack4+ 多入口程序构建", "desc": "其实，说实话这篇文章的由来也是有很多的原因在里面的。在这之前，我也做过不少的项目。有新的项目，也有旧的项目。通过对旧项目的不断研究，改进。再结合自己的理解，将新的构建应用到新的项目中。经过时间的积累，慢慢的就有了一套感觉上还比较适合的webpack前端构建规范。 那这里来说说，…"}, {"id": "6987583322239008776", "title": "LeetCode刷题，面试题 03.04. 化栈为队", "desc": "化栈为队，使用两个栈(s1,s2)进行模拟队列，入队时使用s2保存，出队时把s2栈，进行依次出栈。 出栈的元素依次进行入栈到s1，然后s1出栈就是正确的队列模式下应该出队的元素首位"}, {"id": "6979117584079650853", "title": "1.8简化记忆版 JS-秒懂上下文、作用域、作用域链、变量提升", "desc": "什么是作用域？ MDN上说，作用域就是当前值和表达式在其中 \"可见\" 或可被访问到的上下文。 都有哪几种作用域？ 变量有三种作用域类型：全局作用域、局部作用域、es6块级作用域。 在函数外面定义的变量"}, {"id": "6963070226682347534", "title": "【学习笔记】JS 的 {} + {} 与 {} + [] 的结果是什么？", "desc": "前言 在 JS 中，+ 符号是很常见的一种，它有以下的使用情况 数字的加法运算，二元运算 字符串的连接运算，二元运算，优先级最高 正号，一元运算，可延伸为强制转换其他类型的运算元为数字类型 另一个常见"}, {"id": "6844903783621722126", "title": "如何编写高质量的函数 -- 命名/注释/鲁棒篇", "desc": "此篇我将会从函数的命名、注释和鲁棒性方面，阐述如何编写高质量的函数。 写第二篇之前，先说个事情。针对前面我写的 如何编写高质量的函数 -- 敲山震虎篇 文章的评论区，小伙伴提出的一些问题，我也全部都看了，特此写了答疑篇。 对我的回答有什么疑问的话，可以 issues 讨论，这篇…"}, {"id": "6997270535063207972", "title": "原型和原型链", "desc": "原型 prototype： 每个函数都有一个 prototype 属性，指向了一个对象，这个对象正是调用该构造函数而创建的 实例 的原型 每一个JavaScript对象(null除外)在创建的时候就会"}, {"id": "6907169522130616328", "title": "前端工程化之项目脚手架", "desc": "在建筑领域，脚手架是为了保证各施工过程顺利进行而搭设的工作平台。在软件开发领域，如果把搭建项目想象成建造大型建筑的话，脚手架就是为了方便大家快速进入业务逻辑的开发，一个好的脚手架能显著提升工程效率，例如三大前端框架都提供了自己的脚手架工具： 上述工具虽好，但相信很多公司为了满足…"}, {"id": "6891600576790937607", "title": "我现在写jquery，你们会不会打我？？", "desc": "时光荏苒，岁月如梭，转眼多年过去。前端天下已各分东西，回眸看看来时的路，你我可曾记得当年的大哥 jquery。回想那个纯真的年代，jquery一统天下，前端的世界如此纯洁无瑕。 此时此刻又让我想起了当年的游戏时光，早期游戏只能玩类似《传奇》《魔力宝贝》这么些。大家没得选所有人都…"}, {"id": "7003149676899729439", "title": "jQuery使用整理", "desc": "jQuery是目前前端最长寿的库，2006年发布的，也是世界上使用最广泛的库 jQuery的设计模式 不用new的构造函数，这个模式没有专门的名字 $(支持多种参数)，这个模式叫做重载（一个函数支持多"}, {"id": "6989410679287627789", "title": "由JS在对象数组循环过程中修改对象属性所导致的问题谈到对象的浅拷贝和深拷贝", "desc": "最近在工作中用React.js写前端，接触了很多JS的东东，在做数组嵌套循环的时候发现一个问题： 我的需求是想把arr1和arr2添加到resultArr 中，并且给arr2分别添加index属性为a"}, {"id": "6982869790650007566", "title": "【日志分析】MySQL日志分析", "desc": "常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。 0x01 Mysql日志分析 general query log"}, {"id": "6983265736865087502", "title": "javascript 基础- 获取屏幕高度", "desc": "在日常开发中，我们会写 回到顶部、滚动条加载数据 等常用功能，这时候，我们不得不提到用 js 获取页面高度的问题...."}, {"id": "6992011725025329183", "title": "Js闭包｜ 8月更文挑战", "desc": "本文正在参加「8月更文挑战」，详情查看 活动链接 前言 我记得红宝书中的第一章有句话：JavaScript是一种专为于网页交互而设计的脚本语言。Js在前端的地位不言而喻，而掌握Js的基础更是重中之重。"}, {"id": "6844904042393518093", "title": "横向对比Element-tree、ztree、ivew-tree性能对比分析与源码修改自定义组件", "desc": "公司的中后台系统用的是Element-UI框架，自然树组件也就是用的el-tree。 说实话，el-tree已经很不错了，提供丰富的回调事件，属性，方法，在轻量数据渲染上可以说是不二之选。 但是奈何半年多的项目实践，越发觉得el-tree卡顿了起来，数据越来越多，功能越来越复杂…"}, {"id": "6844903600636821518", "title": "前端将数据转化为弹幕效果的实现方式", "desc": "这个需求如题，大体上是将文章的评论数据，在文章的首图上面以弹幕的形式出现。当时在做这个需求的时候，花了挺多精力的，踩了很多坑，现将弹幕的实现思路写出来，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。 实现弹幕的原理，并不算太复杂，耗费一些时间，怼一怼应该…"}, {"id": "6979229230777237512", "title": "JS字符串属性和方法集锦", "desc": "JavaScript字符串属性方法 方法1.length 例： 方法2.slice 这个例子裁剪字符串中位置 5 到位置 14 的片段： 方法3."}, {"id": "6924495415316316167", "title": "Cypress首屏加载时间测试", "desc": "Cypress是常见的UI测试框架之一，UI测试的场景不做赘述，本文旨在探索Cypress检测页面首屏加载时间的最佳实践，目的是为了检测页面首屏加载的性能。文章主要包含实现逻辑、数据保存和报告生成三部分。 没有描述页面完成加载的标志，代码层面表现为cy.visit()没有给出断…"}, {"id": "6992855086330298405", "title": "AJAX 工作原理", "desc": "1.什么是 AJAX? AJAX 全称为“Asynchronous JavaScript and XML”(异步 JavaScript 和 XML)，是一种创建交互式网页应用的网页开发技术。它使用： "}, {"id": "6994082346274127885", "title": "JS校验统一社会信用代码的真实性", "desc": "统一代码由十八位的阿拉伯数字或大写英文字母(不使用I、O、Z、S、V)组成,包括第1位登记管理部门代码、第2位机构类别代码、第3位~第8位登记管理机关行政区划码、第9位~第17位主体标识码(组织。。。"}, {"id": "6999079023250767880", "title": "前车之鉴，闭包怎么深度理解 ？", "desc": "闭包：私有状态，可和函数联系起来，形成黑盒调用 **最重要的部分**：JavaScript 中的每个函数都维护对其外部词法环境的引用。此引用用于配置调用函数时创建的执行上下文"}, {"id": "6844903822817673229", "title": "值得期待的 JavaScript 新特性", "desc": "一个ECMAScript标准的制作过程，包含了Stage 0到Stage 4 五个阶段，每个阶段提交至下一阶段都需要TC39审批通过。本文介绍这些新特性处于Stage 3 或者Stage 4 阶段，这意味着应该很快在浏览器和其他引擎中支持这些特性。更多优质文章请猛戳GitHub…"}, {"id": "6844903681029046280", "title": "【译】你可能不需要Moment.js", "desc": "Moment.js是一个很棒的时间和日期库，具有许多牛X的方法，平时npm install了之后就是干，但是如果您的Web应用程序对性能上有很高的要求，可能会由于其复杂的API和大小会导致巨大的性能上的比不要的开销。 如果您没有使用时区，而只使用了moment.js中的一些简单…"}, {"id": "6982734823115161608", "title": "Echarts 入门", "desc": "NPM 安装 ECharts 引入 ECharts 按需引入 ECharts 图表和组件 option里的设置 深色背景和浅色标签"}, {"id": "6994726390050324487", "title": "使用百度地图绘制点、线、面 | Javascript", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 本章主要介绍与实现内容： 在地图上绘制出想要的点，包括自定义的点的自定义图标 在地图上绘制出折线 在地图上绘制出面（圆、多边形、矩形） 使"}, {"id": "6991833383991148558", "title": "web前端高级实战 - 实现京东淘宝商品详细放大镜效果 | 8月更文挑战", "desc": "web前端高级实战：实现商品详细放大镜效果 思路分析 源码展示 在我们访问淘宝天猫或京东等购物网站时，点击某个商品进入详情页面会看到一个商品的缩略图，当鼠标浮到缩略图上时，在右侧就会出现一个大图并且可"}, {"id": "6994700373487271967", "title": "一文读懂前端模块化(CommonJS、AMD、CMD、UMD、ES6)", "desc": "JS中的模块规范（CommonJS，AMD，CMD）以及ES6新增的import/export，理解他们之间的关系和使用方式，提高代码的复用率和可读性，争取做一名合格的前端工程师，为后续精进打好基础。"}, {"id": "6844903773135962120", "title": "一步步实现网页图片的手势拖拽与缩放", "desc": "可以点击查看 在线演示，以及 完整代码。 首先，需要了解 CSS3 的 transform ，用 transform 进行元素的变换，这是实现的关键。 实际上，上面的写法可以算作 CSS 提供的语法糖。了解计算机图形学的同学可能知道，计算机完成图像变换实际上使用的实现是矩阵。 …"}, {"id": "6960560045515866119", "title": "代码重构", "desc": "代码重构原则：1 易读性优先 2 如果代码没有造成性能瓶颈，那么就不要为了性能而修改代码 3 复杂性守恒原则"}, {"id": "6844903750323142670", "title": "你说你学不动啦，看 Redux 作者怎么说？", "desc": "编者按：今天这篇文章是 React 团队成员、Redux 作者 Dan Abramov 新编写的一篇文章，这篇文章非常不错。在 2019 到来之际，谨以此文祝大家元旦快乐！ 大家总以为我懂得许多东西，而实际情况并不是这样的。我不是在抱怨什么，这也不是什么坏事。 （尽管少数派有来…"}, {"id": "6844903574778937358", "title": "邮箱/邮件地址的正则表达式及分析(JavaScript，email，regex)", "desc": "在做用户注册时，常会用到邮箱/邮件地址的正则表达式。本文列举了几种方案，大家可以根据自己的项目情况，选择最适合的方案。 以大写字母[A-Z]、小写字母[a-z]、数字[0-9]、下滑线[_]、减号[-]及点号[.]开头，并需要重复一次至多次[+]。 中间必须包括@符号。 @之后…"}, {"id": "7000939704552161317", "title": "js引擎的执行过程---预编译", "desc": "本文整理了前端面试高频出现的让你说（猜）打印输出类问题，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6844903699458818062", "title": "如何在前端中使用protobuf（vue篇）", "desc": "由于目前公司采用了ProtoBuf做前后端数据交互，进公司以来一直用的是公司大神写好的基础库，完全不了解底层是如何解析的，一旦报错只能求人，作为一只还算有钻研精神的猿，应该去了解一下底层的实现，在这里记录一下学习过程。 个人感受： 前后端数据传输用json还是protobuf其…"}, {"id": "7002929023055577119", "title": "函数定义、分类无参无返回值", "desc": "1：函数定义封装到一起的具有特定功能的代码段称为函数 2：函数的分类： 1）从定义角度来分：内置函数。用户自定义函数 2）从参数角度分：有参函数、无参函数 3）从返回值角度分：有返回值、无返回值 3无"}, {"id": "6844904095858294798", "title": "面试高频JS考查点手写实现", "desc": "原文链接考查thiscall、applybindnew链式调用考查原型链instanceof组合寄生继承Object.create纯对象redux版判断类型jQuery3.4.1版考查闭包柯里化考查性"}, {"id": "6992585994667032589", "title": "扎实基础篇-----js中的隐式类型转换", "desc": "JS隐式类型转换还是有很多坑的，上面这几个情况，相信你一定不陌生，你所维护的项(lao)目(dai)中(ma)相信见到过这些身影，下面请跟随我一起来完成这几道题目吧。"}, {"id": "7000280687253127199", "title": "JavaScript 面向对象编程", "desc": "JavaScript不区分类和实例的概念，而是通过原型prototype来实现面向对象编程。JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例。"}, {"id": "6943393421130203149", "title": "从表情包来学JS动画", "desc": "前两期介绍了，从表情包来学canvas、从英雄联盟来学pixi.js, 从canvas入门到canvas绘图库的使用。今天来补充一下之前没说到的动画部分,这次用一个手绘风的表情包来讲解一下JS的动画实现，如果对手写canvas表情包感兴趣的可以之前写的从表情包来学canvas。…"}, {"id": "6966970905629032456", "title": "js - 通过几个例子了解闭包", "desc": "必包在于返回的函数拥有自己独立可访问的外部作用域。 作用域 & 执行上下文 js - 作用域链 js - 执行上下文 简单例子入门 这里fuc的作用域形成了一个简单的必包环境。 这里最大的特点是当前f"}, {"id": "6998537902468628510", "title": "【重温JS】JavaScript 巩固基础day20-各种运动函数梳理", "desc": "☆☆☆ 今天学习的内容: 开始学习**( 各种运动 函数梳理 )** !重要! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼 day20"}, {"id": "6968376444359540743", "title": "js实现自动锁屏功能", "desc": "1.使用场景 有这么一个需求，开发了一套系统，当用户离开桌面或者一段时间不操作的话，需要把该系统所有打开页面锁定起来，就跟桌面锁屏一样，只能输入密码验证成功后，或者重新登录，才可以继续操作页面，如果刷"}, {"id": "6844903641594216455", "title": "node-\"fs-extra\"模块代替fs使用", "desc": "fs-extra是fs的一个扩展，提供了非常多的便利API，并且继承了fs所有方法和为fs方法添加了promise的支持。 它应该是 fs 的替代品。 我厌倦了包括mkdirp，rimraf以及ncp在我的大部分项目中。 使用前，必须了解第三方库给现有库解决了哪些问题，不要为了…"}, {"id": "6994743120957014029", "title": "【自种树自乘凉】0.1 + 0.2 == 0.3 ？", "desc": "答案是： 0.1 + 0.2 不等于 0.3！通过浏览器控制台可看到结果是令人奇怪的 0.30000000000000004"}, {"id": "6844903943244365838", "title": "走进安卓的重灾区——video(微信X5浏览器)", "desc": "html5的video已经出来很久了。在ios上使用基本上没什么毛病，但是安卓下就是一个重灾区了，各种体验差。这几天搞了安卓的兼容，简直是要吐血。所以特意总结了一些强势的坑点。 在ios上会自动全屏播放，需要在video标签上设置一个属性 webkit-playsinline，…"}, {"id": "6844903543405543431", "title": "未来的前端工程师", "desc": "前端工程师首先是个程序员，其次也是个软件工程师，他们工作在离用户最近的地方，负责人机交互和用户体验，虽然叫“前端”，但其实他们的工作边界其实已经很宽了。展望未来，我想前端的工作会继续分化，也会继续融合，分工是工业革命以来社会高效协作的主要推动力，以后很长一段时间应该也会维持这种…"}, {"id": "6990512775906721799", "title": "VUE3（三十）自定义抽屉组件Drawer", "desc": "我这里计划做一个即时聊天的小功能，计划是在一个抽屉组件中实现这个功能。 但是最后能不能成功我也不知道，毕竟我没做过，但是抽屉组件可以提前做一个嘛，这个不是很难。 代码： Drawer.vue： Dra"}, {"id": "6844904036068507655", "title": "【canvas】箭头跟随鼠标移动的动画原理", "desc": "这个动画看起来有点难，但其实要比想象中的简单。 它只是平移和旋转的简单合成，下面大体分析一下。 1. 鼠标位置 要跟随鼠标移动，首先就要获取鼠标的位置。 可以给画布绑定mousemove事件，这样拿到鼠标相对于页面的绝对位置（pageX，pageY），再减去画布自身的偏移量，就…"}, {"id": "6844903955915341831", "title": "1小时搞定cropper.js制作头像/图片上传、裁剪、并发送至后端", "desc": "先给大家看一下最终效果。 将裁剪后的数据保存为blob发送至后端。 一开始制作这个需求思路有两个，使用canvas原生或者寻找现成的库，对比了一番觉得canvas实现时间耗费较长，且秉承着不重复造轮子的原则（其实是菜），决定使用Cropper.js。官方封装了很多参数、方法、事…"}, {"id": "6976906292434583582", "title": "js 事件，事件流和事件委托", "desc": "事件 JavaScript与HTML之间的交互是通过事件实现的。什么是事件？事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用侦听器或处理程序来预定事件，以便事件发生时执行相应的代码。这种在"}, {"id": "6844903903830474766", "title": "处理 JS 中 undefined 的 7 个技巧", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 大约8年前，当原作者开始学习JS时，遇到了一个奇怪的情况，既存在undefined 的值，也存在表示空值的null。它们之间的明显区别是什么?它们似乎都定义了空值，而且，比较null == undefined的…"}, {"id": "6844903603266650125", "title": "大佬，JavaScript 柯里化，了解一下？", "desc": "柯里化, 即 Currying 的音译。 Currying 是编译原理层面实现多参函数的一个技术。 在说JavaScript 中的柯里化前，可以聊一下原始的 Currying 是什么，又从何而来。 在编码过程中，身为码农的我们本质上所进行的工作就是——将复杂问题分解为多个可编程…"}, {"id": "6844903616143179784", "title": "Deno 并不是下一代 Node.js", "desc": "这几天前端圈最火的事件莫过于 ry(Ryan Dahl) 的新项目 deno 了，很多 IT 新闻和媒体都用了标题：“下一代 Node.js”。这周末读了一遍 deno 的源码，特意写了这篇文章。长文预警（5000字，11图）。 0. 为什么开发 Deno？ 这是我上周做的一张…"}, {"id": "6970229804599607303", "title": "一文带你彻底搞懂Java和JavaScript的区别与相似之处", "desc": "随着时间的推移，软件编程世界发展迅速，并提供了许多编程语言。您可能听说过 Java 和 JavaScript 的编程语言，名称听起来相似，并且可能对它们是同一种语言的不同名称还是不同感到困惑。在这个保"}, {"id": "6977560604571598861", "title": "技术期刊 · 天生江水向东流 | 深入 React 18 工作组;Google 出品的 CSS 课程;轻量级 Postman 工具;十分钟弄懂用户画像", "desc": "蒲公英 · JELLY技术期刊 Vol.41 观海志 Google 出品的 CSS 课程 梗概：本课程将系统地介绍 CSS 基础，适用于初学者和高阶开发人员，通过学习课程的各个模块，您将会了解 CSS"}, {"id": "7000378803780337694", "title": "JavaScript 垃圾回收-2", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 昨天讲了JavaScript 的两种标记策略，标记清理和引用计数；今天继续讲相关的性能和内存管理。 性能 我"}, {"id": "6875899284961787911", "title": "JavaScript两个快速调试的技巧", "desc": "在控制台上展示数组或对象，使用console.table比console.log更加直观明了。 是默认有的。 如果你使用谷歌浏览器并需要复制控制台输出的数据。你可以使用copy()命令行，而不是手动高亮选择对应代码进行复制。 执行上面的代码，会将data数据值复制到你的粘贴板上…"}, {"id": "6887184781008715789", "title": "谁不想写出干净的代码？7 个技巧，让你的同事爱上你的代码", "desc": "期望：\"是我！\" 你会自豪地回答，因为该代码像公主一样美丽。 现实：\"不，不是我！\" 你说谎是因为该代码像野兽一样丑陋。 现在，如果你想让期望成为现实，请继续阅读。 使用有意义的名称，这会让你一眼就知道是什么意思。 将集合类型命名为复数是有意义的。因此，不要忘记 s： 描述函数…"}, {"id": "7001862070803103758", "title": "【日拱一卒】JavaScript函数式编程指南 ", "desc": "这是我参与8月更文挑战的第29天，活动详情查看： 8月更文挑战” 前言 提速提速，阅读技术书籍，扩充自己的思路。不要过度沉迷细节。 第一章 函数式编程介绍 面向对象编程通过封装变化使得代码更易理解，函"}, {"id": "6844903653686378504", "title": "一篇文章搞定 javascript 正则表达式", "desc": "正则表达式在平时工作中非常常见，但是它的神奇对于很多程序员可能一直像魔法一样的存在，工作中用到的大部分正则都是去网上搜索得来的，再复杂一点看着文档费时费力的拼凑一下。是不是深有感触了？一次在网上看到有关正则的视频，让我收货颇多，当时认真记录了笔记和自己的感悟，也希望给更多需要的…"}, {"id": "6930549887402672135", "title": "jsconfig.json 中文文档", "desc": "目录中存在jsconfig.json文件时，表明该目录是 JavaScript 项目的根目录。jsconfig.json文件指定了根文件以及 JavaScript 语言服务 提供的功能选项 文件范围 - 没有 jsconfig.json：在此模式下，在 Visual Studi…"}, {"id": "6950227735830593566", "title": "从HTML规范来理解浏览器中的 EventLoop", "desc": "前言网上很多文章都在讨论事件循环 (Event Loop)，但是看了很多文章之后还是不知道 Event Loop 到底是什么，解决的问题是什么，规范中是怎么定义的，实际应用中具体的执行过程等等。本文就"}, {"id": "6950913297948508173", "title": "2021 年值得关注的 8 个 Node.js 项目", "desc": "值得关注的一些 Node.js 项目，无论是用于自己的应用，还是找开源项目贡献代码，这些都是非常不错的选择"}, {"id": "6844903772930441230", "title": "常见六大Web安全攻防解析", "desc": "在互联网时代，数据安全与个人隐私受到了前所未有的挑战，各种新奇的攻击技术层出不穷。如何才能更好地保护我们的数据？本文主要侧重于分析几种常见的攻击的类型以及防御的方法。 XSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和 CSS重叠，所以只能叫 XSS…"}, {"id": "6993072435792723976", "title": "前端必备数据结构——双向链表", "desc": "双向链表 之前学了单向链表，但是单向链表有一个致命的缺点：无法返回到前一个结点。接下来就来学学可以返回到前一个结点的双向链表吧~"}, {"id": "6995884541499949092", "title": "Hbuiler打包APP后的热更新", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 我在开发自己的手机端个人项目时，想拥有一个手机APP来显示自己的网站，可以在没有网络的情况下去使用。 随后便是在百度中寻找如何将H5"}, {"id": "6844903910650413070", "title": "逐行解析Axios源码", "desc": "本文主要关注axios中主流程的源码，对于一些工具函数的实现会略过。还请见谅。如果文章中有错误的地方，还请及时指出。 我在看axios源码之前，甚至并不知道axios可以发出的请求，所以我们先来了解下如何在axios取消一个请求。下面是一个例子🌰 🤔 看到这里，我们还是无法…"}, {"id": "6969766608457695263", "title": "React Hooks 踩坑之-- Capture Value 特性", "desc": "Capture Value 是 React Hooks 中很重要的细节点，本篇文章将从一个实际需求的例子出发，对 Capture Value 进行介绍。"}, {"id": "6998139347438567460", "title": "JavaScript DOM事件流事件捕获事件冒泡", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 事件 在讲事件流之前，我们先来了解一下事件。 JavaScript与HTML之间的交互是通过事件来实现的。事件：就是文档或浏览器窗口中发生"}, {"id": "7002532431974629390", "title": "剑指 Offer(23) ——包含min函数的栈", "desc": "“这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战” 题目 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复"}, {"id": "6997761461002960933", "title": "不要再把script标签的`async`和`defer`的属性作用弄反了！！！", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 不要再把script标签的`async`和`defer`的属性作用弄反了，其中在前面的一个脚本我加了defer属性 两个文件的内容如下所示"}, {"id": "6844903825304731656", "title": "给localStorage加上过期时间", "desc": "在掘金潜水的时间长达一年之后，我终于鼓起勇气开始写我的第一篇文章了。前端小菜，只是想记录一下自己的想法，望各位看到这文的大佬轻喷。 在现在前后端分离的开发模式下，存储信息一般都不在使用以往使用的cookie了，就拿笔主我之前做过的项目来说。我们都是登录成功了之后后端会返回给我一…"}, {"id": "6998326263173611557", "title": "前端刷题路-Day86：除自身以外数组的乘积（题号238）", "desc": "给你一个长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外..."}, {"id": "7000333665129480199", "title": "JavaScript复习（三）｜ 8月更文挑战", "desc": "“这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战” 今天就只更新一题吧，这活动举行的我头脑发懵😭，虽然每天都在水文 往期的复习资料： 【1】JavaScript复习（一） 【2】# Jav"}, {"id": "6969220161261797413", "title": "js复制内容到剪切板踩到的坑", "desc": "js复制内容如何兼容ios和安卓，通过参考clipboard.js内部的方法，优化自己实现的复制函数，方便后续调用；"}, {"id": "7006188643895214088", "title": "vue源码中this.data,this.props的解读", "desc": "vue源码src\\core\\instance\\state.js有对状态的初始化。 即在beforeCreate钩子函数执行后会初始化$data,$props,$mounted,$watch,$comp"}, {"id": "6844903812092674061", "title": "深入了解浏览器存储--从cookie到WebStorage、IndexedDB", "desc": "随着移动网络的发展与演化，我们手机上现在除了有原生 App，还能跑“WebApp”——它即开即用，用完即走。一个优秀的 WebApp 甚至可以拥有和原生 App 媲美的功能和体验。WebApp 优异的性能表现，有一部分原因要归功于浏览器存储技术的提升。cookie存储数据的功能…"}, {"id": "6995187050160848909", "title": "记录一次对React项目优化", "desc": "公司项目是React项目,到我手上时需要进行一些优化,下面是只针对代码的优化,其实代码层面的优化还是比较方便的,网上文章比较多"}, {"id": "6998492447634374693", "title": "可选链的应用", "desc": "​序言 相信很多朋友都吃过这种bug，因为没有考虑到后端返回不符合规格的数据时，或者数据丢失的情况，导致页面报错，直接挂了，今天"}, {"id": "6977724246302654494", "title": "你可能不知道的 JavaScript 与二进制原理", "desc": "前言 在实际开发的过程中，二进制离我们越来越远，需要直接处理二进制的场景很少。最近恰好在研究 WebSocket 协议，里面涉及到很多二进制相关的操作，所以趁机把忘掉的东西再捡回来一些。话不多说，直接"}, {"id": "6844904200971747335", "title": "ES6常用但被忽略的方法（第四弹Proxy和Reflect）", "desc": "端午已过，继续更新。 ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "6997401682615205919", "title": "通过Plop自动生成vue页面", "desc": "通过自定义模板生成文件 前言 在编写常规的后台管理系统时，通常发现多数页面都具有相似结构，基本上由头部查询框，中间分页查询的表格以及弹出框用于新增或者编辑."}, {"id": "6992021172230012942", "title": "浅谈JavaScript的事件循环机制（Event Loop）- Node.js篇｜8月更文挑战", "desc": "上篇文章我们聊了事件循环机制在浏览器中的表现，本篇我们来聊聊宿主环境换成为Node.js时，会有什么变化。 初探 我们先以宏观视角看下在Node.js中Event Loop长什么样"}, {"id": "6857725993633710087", "title": "如何使JavaScript休眠或等待，模拟 sleep 函数", "desc": "JavaScript不具有 sleep() 函数，该函数会导致代码在恢复执行之前等待指定的时间段。如果需要JavaScript等待，该怎么做呢？ 假设您想将三则消息记录到Javascript控制台，每条消息之间要延迟一秒钟。JavaScript中没有 sleep() 方法，所以…"}, {"id": "6844903669100445710", "title": "体积减少80%！释放webpack tree-shaking的真正潜力", "desc": "在上周末广州举办的feday中，webpack的核心开发者Sean在介绍webpack插件系统原理时，隆重介绍了一个中国学生于Google夏令营，在导师Tobias带领下写的一个webpack插件，webpack-deep-scope-analysis-plugin，这个插件能…"}, {"id": "6969872002786000910", "title": "天气热了，她想看雪怎么办？", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 前言 南方的夏季，真的好热。如果你的她无理取闹，想看雪怎么办？ em...我们得满足她，我们可以试着给她的下一场雪 思路 为了方便阅读，我将文章简"}, {"id": "7002601167716876301", "title": "javascript如何实现memoization?", "desc": "背景 memoization 有些文章翻译为记忆术，可能这也是react的优点之一，不止给你提供框架，还提供给你学习性能优化的方案。 本文主要是介绍下如何实现memoization. 实现 遇到这种有"}, {"id": "6982743470368620575", "title": "移动端下拉框点击失效问题解决记录", "desc": "移动端点击下拉框没有下拉效果，下拉选项无法选中。Bootstrap-Select，Chosen，Select 2。"}, {"id": "6844904068117168142", "title": "前端 DSL 实践指南（上）—— 内部 DSL", "desc": "React、Vue、Angular 等现代框架的表现层设计往往和 DSL 有较强的关联，透过这些优秀作品我们可以得到一些实践指引。 前端相关语言的转编译工具链趋于成熟，如 babel，postcss 等工具可以帮助开发者以扩展插件的方式低成本地参与到语言构建流程中。 社区的解析…"}, {"id": "6922269833237102606", "title": "手写一个深拷贝？", "desc": "在工作中我们经常会用到深拷贝与浅拷贝，但是你有没有去分析什么场景下使用它，为什么需要使用呢，深浅拷贝有何异同呢，什么是深拷贝呢，如何实现呢，你会有这些问题吗，今天就为大家总结一下吧。 在了解这个问题之前需要先了解下栈内存与堆内存的概念，这里可以看看我的上一篇文章堆与栈的概念。了…"}, {"id": "6844903512393039879", "title": "为什么(2.55).toFixed(1)等于2.5？", "desc": "这个需要我们在源码里面找答案。 数字在V8里面的存储有两种类型，一种是小整数用Smi，另一种是除了小整数外的所有数，用HeapNumber，Smi是直接放在栈上的，而HeapNumber是需要new申请内存的，放在堆里面。我们可以简单地画一下堆和栈在内存的位置： 这里定义了一个…"}, {"id": "6930848128744554503", "title": "js异步编程，详解Promise、Generator、async、await（含手动实现promise）", "desc": "1. 同步 你开心的拿着钱走了。 下一个同事来了，会计开始计算，老板给钱；就这么一个一个地发。 这就是典型的 同步，排在后面的同事必须等前一个同事领完钱才能领到钱。 带来的问题就是等所有员工的年终奖都发完，天都黑了，太耗时；如果碰上一个“难缠”的，嫌钱少，跟老板理论上了，那排在…"}, {"id": "7001464507893547044", "title": "【JavaScript】16.文档对象模型", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 文档对象模型DOM 01.基本概念 （1）DOM概述 DOM：Document Object Model，文档对象模型 是W3C组织定义的"}, {"id": "6844903719008469006", "title": "「伪全栈」Vue2.5+Node.js搭建一个多页面商城应用", "desc": "远程库中已将前端代码打包放入 public 文件夹，因此运行后端项目即可预览完整效果。 浏览器打开 http://localhost:8000/home.html 预览。 前端项目需要后台数据支持，因此本地运行前端项目需要同时运行服务端项目，并且还需要做一些额外配置工作。 浏览…"}, {"id": "7001477005057196063", "title": "js核心笔记第八天", "desc": "Object 1，开发方式 面向过程 就是面向一个过程编程，在做一件事之前，我们已经想好了应该是个什么样的过程，然后一步一步的去实现他，先做什么，后做什么，一直到结束这件事情 面向对象 将一个项目或者"}, {"id": "6844904184706236430", "title": "高德地图的使用 vue-amap+vue", "desc": "基本配置1：在vue项目中下载vue-amapnpminstallvue-amap--save文档连接https://elemefe.github.io/vue-amap/#/zh-cn/introd"}, {"id": "6932738532096245768", "title": "JavaScript深入之 this和apply、call、bind", "desc": "之前我们说过this是在运行时进行绑定的，并不是在编写时绑定。JavaScript的this总指向一个对象，具体指向哪一个对象是在运行时基于函数的执行环境动态绑定的，而非函数被声明时的环境。 关于箭头函数this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因…"}, {"id": "6907151611764834318", "title": "用 Range 实现 CSSOM 精准操作", "desc": "同学们好，我是三钻。 这一部分的编程练习，我们来使用 Range 和 CSSOM 做一个综合练习。 这里我们一起来尝试实现一个简单的拖拽功能。我们一般的拖拽就是把一个在浏览器上的盒子捡起来，然后用鼠标可以拖动这个盒子到任意的位置。 那么我们今天要做的拖拽跟这个稍微有一点不一样。…"}, {"id": "6844903601395990541", "title": "好用的npm包：debug", "desc": "npm是JavaScript的包管理系统，提供通用的模块给其他开发者及工程内使用，类似于Java语言 的 maven库，设计师使用的素材库。 好用的npm包系列致力于挖掘一些好玩实用的npm包，聊些使用场景和实现思路。如果说程序员喜欢用自己的方式去实现别人已实现的东西，叫做重复…"}, {"id": "6992215114573152264", "title": "js异步执行的各种方式 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 首先，大家都知道js是单线程的，那我们很多方法执行的时候不需要同步，而需要异步，该怎么执行呢？但是单线程基于异步的时候又会怎么样执行呢？浏览"}, {"id": "6984606465126301710", "title": "javascript 系列- 数组问题汇总", "desc": "是什么 开发中处理数组对象，会遇到一些问题。 以下做个笔记 问题一：数组去重复 问题二：数组对象去重复 问题三：数组替换值 问题四：数组合并 问题五：数组删除虚值。。。"}, {"id": "6844903773882548231", "title": "前端图片压缩及上传", "desc": "图片的上传一般情况下不需要上传大体积的图片，因为如果是用户头像或者是一些要求清晰度不是太高的场景上传大体积图片会很消耗资源，一个是上传耗时比较长，同时也增加了存储的开销，当展示的时候也会消耗下载的带宽，影响加载效率。要求用户上传的图片之前压缩图片很影响用户体验，所以就增加了在前…"}, {"id": "6984328440186929160", "title": "从零开始学习3D可视化之摄像机自由飞行", "desc": "我学习数字孪生可视化有一小段时间了，第一个制作目标就是在数字孪生可视化场景中实现一个自由飞行的摄像机。使用WSAD键控制摄像机的前后左右移动，使用QE控制摄像机的升降。 这个功能比较简单，代码也一目了"}, {"id": "6844903660804112391", "title": "[译] 使用原生 JavaScript 构建状态管理系统", "desc": "状态管理在软件方面并不新鲜，但在 JavaScript 构建的应用中仍然相对较新。习惯上，我们会直接将状态保持在 DOM 上，甚至将其分配给 window 中的全局对象。但是现在，我们已经有了许多选择，这些库和框架可以帮助我们管理状态。像 Redux，MobX 和 Vuex 这…"}, {"id": "6975623896917606413", "title": "JS训练营(一) | 异步编程", "desc": "面对大厂，熟练掌握JS和深厚的算法基础是必备的，而网络、浏览器相关的知识点也是重点考察的范围，今天开始逐一分析JS基础、V8引擎、Webkit、JSCore等等知识点并深入各个细节"}, {"id": "6844903721789292551", "title": "浅谈 Easy-mock 最好的备胎没有之一", "desc": "​ 今天我们来聊聊Mock，随着互联网发展，这两年前后端分离的开发模式兴起，Mock也从以住的幕后走上了台面，让更多的人而得知，以前传统的开发方式Mock大多局限在后端人员接触较多一些。 Mock已经是老生常谈了，网上一搜索就很多，各位前辈们都讲的很到位，但今天我只讲它——ea…"}, {"id": "6844903606466904078", "title": "浏览器事件循环机制（event loop）", "desc": "JS是单线程的，或者说只有一个主线程，也就是它一次只能执行一段代码。JS中其实是没有线程概念的，所谓的单线程也只是相对于多线程而言。JS的设计初衷就没有考虑这些，针对JS这种不具备并行任务处理的特性，我们称之为“单线程”。 虽然JS运行在浏览器中是单线程的，但是浏览器是事件驱动…"}, {"id": "6960976107445321736", "title": "JavaScripts高阶（10）call、apply、bind（都是用来改变某一个函数中this指向的）", "desc": "call:fn.call(arg1, arg2, ...); fn.call()：把通过原型链找到的call方法执行，当call方法执行的时候，内部处理了一些事情 首先把要操作函数中的this变为ca"}, {"id": "6844903667326271496", "title": "页面渲染：性能分析", "desc": "Chrome DevTools的performance面板可以记录和分析页面在运行时的所有活动。 配合无痕模式，可以避免chrome插件的影响。 1. 录制查看 下面部分是网页快照，浏览器按照一定时间间隔截取。 2. 实时查看 Paint Flashing 高亮显示网页中需要被…"}, {"id": "6957182428850946078", "title": "JavaScript 事件机制", "desc": "事件机制 点击、滚动、触摸、拖拽……这些用户与 web 页面交互的手段都可以称之为「事件」，了解 JavaScript的事件机制，无论是对优化一些用户交互亦或是处理线上 BUG 都会有很大的帮助。 言"}, {"id": "6844904154213662727", "title": "ES2020，你需要知道的一切内容！", "desc": "并非是Google，或者是其他权力巅峰的人。JavaScript规范由称为TC39的委员会进行管理和迭代。TC39由各种开发人员，学术界人士和平台爱好者组成。 TC39每年约召开6次会议，大部分在美国，但在欧洲也举行。他们与社区合作，接受有关JavaScript新功能的建议，并…"}, {"id": "6844903939691773960", "title": "重学 this 关键字(进阶必备知识）", "desc": "总有一些面试官喜欢问你一段不可能这么写的代码。 我在读 Events 的 lib/events 源码的时候发现多次用到call关键字，看来有必要搞懂 this 与 call 相关的所有内容。 箭头函数使用不当报错，在封装 Node.js 的一个 ORM 映射框架 Sequeli…"}, {"id": "6844903661743636494", "title": "两周撸一个掘金微信小程序", "desc": "这并不是掘金官方小程序（貌似没有搜到掘金 APP 对应的官方小程序），完全为第三方开发者开发，仅用于学习交流，禁止用于其他用途。若要使用官方正版，可访问掘金 官方网站，或下载掘金官方 APP，或访问掘金官方其他途径。 该小程序所有 API 均来自掘金官方 web 网站和官方 A…"}, {"id": "6995574651678097444", "title": "从原理层面谈谈微前端的实现", "desc": "让我们揭开微前端神秘的面纱，通过手动实现微前端的集成流程了解其原理，以后不管我们使用哪种微前端框架都能游刃有余~"}, {"id": "7000662173491920926", "title": "ES6中新增的常用数组方法", "desc": "ES6中新增了一些数组的方法，有些方法弥补了ES5中的一些不足，这次就先浅谈一下ES6中新增的一些常用的数组方法，并给出了一些例子，通过比较来记忆。"}, {"id": "6985748641365360648", "title": "浅谈 JavaScript_callback() 回调函数", "desc": "在MDN的文档中，对callback()的定义为： 被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数。"}, {"id": "6968843434006315016", "title": "重学Promise，基于A+规范实现它", "desc": "Promise解决了什么问题？如何实现一个Promise？如果实现ES6-Promise的那些方法？这里都有"}, {"id": "6908564567774003213", "title": "3D版本来了—— 论如何把轮播图玩出花er来~", "desc": "事情得从前两天我的另一篇文章说起，话说当时我... 算了闲话不多扯 不过还是有识货的小伙伴嘛，其实说实在的，写一篇文章如果能帮助到一个人，我觉得就很满足。 虽然我顶着开课吧的Title，但是在掘金这个自由的平台，我的言论只代表我自己。我在团队里只是水平最菜的那一位，所以写点文章…"}, {"id": "6997775788191776776", "title": "函数处理机制", "desc": "我们经常用函数，但是我对函数处理机制刚开始不是很明白，学习之后，感觉自己对函数的理解加深了，让我们一起探索吧"}, {"id": "6969837174158000141", "title": "谈谈你对原型链的理解？", "desc": "要讲清楚这个问题，主要着重这几个方面： 什么是原型对象 构造函数, 原型对象, 实例的三角关系图 原型链如何形成 原型对象 在 JavaScript 中，除去一部分内建函数，绝大多数的函数都会包含有一"}, {"id": "6910473905723408391", "title": "你应该知道的前端安全性", "desc": "本文不是一个大而全的课程，只是我们日常中常见的问题，因为网络安全是一个很大的话题，我们这里只介绍前端工程师应知应会的东西。大概包括 XSS, CSRF, 点击劫持，SQL注入，OS注入，请求劫持，DDOS，以及简单的防范策略。 XSS的英文是Cross Site Scripti…"}, {"id": "6844903999083118606", "title": "简单易懂的 React useState() Hook 指南（长文建议收藏）", "desc": "状态是隐藏在组件中的信息，组件可以在父组件不知道的情况下修改其状态。我更偏爱函数组件，因为它们足够简单，要使函数组件具有状态管理，可以useState() Hook。 本文会逐步讲解如何使用useState() Hook。此外，还会介绍一些常见useState() 坑。 可以找…"}, {"id": "6844903986420514823", "title": "React Concurrent 模式抢先预览下篇: useTransition 的平行世界", "desc": "上篇文章介绍了 Suspense, 那么这篇文章就讲讲它的好搭档 useTransition。如果你是 React 的粉丝，这两篇文章一定不能错过。 我们知道 React 内部做了翻天覆地的优化，外部也提供了一些紧凑的新 API，这些 API 主要用来优化用户体验。React …"}, {"id": "6844904055148380173", "title": "一文弄懂 CORS 跨域(前端+后端代码实例讲解)", "desc": "但是我们又经常会遇到前后端分离，不在同一个域名下，需要 ajax 请求数据的情况。那我们就要规避这种限制。 可以在网上搜到很多解决跨域的方法，有些方法比较古老了，现在项目中用的比较多的是 jsonp 和 CORS（跨域资源共享），这篇主要讲 CORS 的原理和具体实践。 COR…"}, {"id": "6982533446304448543", "title": "新手入门第三课：2个文章进阶的知识点", "desc": "本节课主要带大家了解文章摘要和专栏的作用。这篇文章是本次活动的最后一课，希望大家有始有终，一起来学习！"}, {"id": "7000044601415303204", "title": "【重温JS】巩固基础之-ajax-post/同源策略/跨域/Promise", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 ☆☆☆ 今天学习的内容: ( 前后端通信-ajax-post / 同源策略 / Promise ) !查缺补漏! ☆☆☆ 开始今天的学习吧"}, {"id": "6854573211451932685", "title": "最全JavaScript基础总结~建议收藏", "desc": "Javascript是一门面向对象的，跨平台的脚本语言。 在声明变量或常量之前使用它, 会引发ReferenceError. 这就是暂存性死区。 在if语句中使用了let声明了foo, 因此在(foo+55)中引用的是if块级作用域中的foo, 而不是test函数中的foo; …"}, {"id": "6844903589047959560", "title": "学会了ES6，就不会写出那样的代码", "desc": "const和let的唯一区别就是，const不可以被更改，所以当声明变量的时候，尤其是在声明容易被更改的全局变量的时候，尽量使用const。 更好的代码语义化，一眼看到就是常量。 另一个原因是因为JavaScript 编译器对const的优化要比let好，多使用const，有利…"}, {"id": "6844904194097299463", "title": "「思维导图学前端 」6k字一文搞懂Javascript对象，原型，继承", "desc": "去年开始我给自己画了一张知识体系的思维导图，用于规划自己的学习范围和方向。但是我犯了一个大错，我的思维导图只是一个全局的蓝图，而在学习某个知识点的时候没有系统化，知识太过于零散，另一方面也很容易遗忘，回头复习时没有一个提纲，整体的学习效率不高。意识到这一点，我最近开始用思维导图…"}, {"id": "6844903590729875463", "title": "腾讯一面总结-web前端-2018.4.11", "desc": "面完给我的总体感觉，要求你掌握的不仅有广度，更重要的是深度。我准备的烂大街的面试题没怎么问，可能自己欠缺的东西还比较多，不断学习，不断进步，再奶自己一口，fighting!!! 框架用过哪些，感觉他们不只需要熟练运用，更看重理解的深度，比如要懂源码，react中diff算法的思…"}, {"id": "6964911188849197092", "title": "手撸JS题目合集——new的实现", "desc": "今天我们来看看另外一个面试高频手写题：new，我们同样先来搞清楚new关键字的原理，然后我们来自己手撸一个简单版本，保证一看就懂哦！"}, {"id": "6844904101961007117", "title": "ES5和ES6函数你不知道的区别【面试篇】", "desc": "另外深圳前端求坑，有坑的大佬麻烦内推一下。 1. PolyFill 4.Hooks避免了类所需的大量开销，例如在构造器中创建类实例和绑定事件处理程序的开销。 2.使用Hooks的不需要在使用高阶组件，渲染道具和上下文的代码库中普遍存在的深层组件树嵌套。使用较小的组件树，Reac…"}, {"id": "7000931207215054884", "title": "js类型判断和空判断方法整理", "desc": "项目开发过程中，对于数据类型的判断和是否为空的判断非常常见。下面介绍几种方法。关于数据类型的判断方法，关于是否为空的判断方法"}, {"id": "6959736971593777189", "title": "函数表达式 与 函数声明 别搞混了", "desc": "在JavaScript中，function关键字做一个简单的工作:创建一个函数。但是，使用关键字定义函数的方式可以创建具有不同属性的函数。 在这篇文章中，你将了解如何使用function关键字来编写函"}, {"id": "6844904183234052109", "title": "使用ant design开发完整的后台系统", "desc": "这里要说的是ant design的vue版和react版本的使用。这里不考虑到两种框架vue和react的底层。 这是一个测试平台的项目。 因为使用的是整套的框架，那么我们按照vue ant design流程走一波。 使用axios操作接口。我们可以根据实际情况进行处理： 上面…"}, {"id": "6975791334124847117", "title": "JavaScript | 作用域和预解析", "desc": "目标 能够说出JavaScript的两种作用域 能够区分全局变量和局部变量 能够说出如何在作用域链中查找变量的值 目录 作用域 变量的作用域 作用域链 1. 作用域 1.1 作用域概述 通常来说，一段"}, {"id": "6981986550657581070", "title": "一行代码快速更新对象部分字段数据", "desc": "前言 在自己写代码的时候, 总是喜欢考虑怎么写更优雅/ 简洁, 从而导致拖延开发进度. 但从中也收获了很多. 开发小程序用户登录功能时, 需要考虑很多逻辑. 但只要把流程捋一遍,实现起来也不难, 其中"}, {"id": "6975880204447121422", "title": "超详细的JavaScript深拷贝实现", "desc": "针对 JSON.stringify() 缺陷，一点一点实现一个较为完整的深拷贝方法，可处理函数、循环引用、包装对象、Date 对象等等..."}, {"id": "6856595606677716999", "title": "浅谈SSL协议的握手过程", "desc": "在日常生活中我们经常会看见HTTP，但是随着HTTP的大量使用也带来了很多安全隐患。于是HTTPS应运而生，我们又开始看到SSL/TLS，这部分前端同学们一般比较少会去了解，趁最近在折腾这方面来给大家一起分享和科普一下吧！ HTTPS 相对于 HTTP 性能上差点，因为多了 S…"}, {"id": "6995934940760113166", "title": "【从头学前端】11-JavaScript中的对象", "desc": "本篇文章我们将来学习JavaScript中的作用域。通过本篇文章的学习可以掌握什么知识呢？如下图： 对象即Object，是JavaScript中的一个复杂数据类型，简单的说，一个对象就是一系列属性或方"}, {"id": "6844903537625808904", "title": "Vue自定义指令", "desc": "Vue.js是一套构建用户界面的渐进式框架（官方说明）。通俗点来说，Vue.js是一个轻量级的，易上手易使用的，便捷，灵活性强的前端MVVM框架。简洁的API，良好健全的中文文档，使开发者能够较容易的上手Vue框架。 本系列文章将结合个人在使用Vue中的一些经(cai)验(ke…"}, {"id": "6981320873730899975", "title": "实现在图片上画很多个可拖拽的div（一）", "desc": "主要讲述了编写在图中多个可拖拽可收缩的框框的过程，主要介绍了实现这一个过程所需要的知识储备以及思考实践过程，这是第一部分，第二部分在我的第二篇文章中。。"}, {"id": "6844903800851922958", "title": "玩了一个人脸识别登录", "desc": "这篇文章就没有目录了，直接从头正序开始即可。 因为突然接到了一个需求，一个xx局，内部使用的移动端项目（是我们开发的），需要添加一个人脸识别登录的需求。 内部员工使用的识别登录，只需也只能做平面的图像识别。所以，针对内部使用的一些权限没那么高的平台。这么开发个人脸识别，客户需增…"}, {"id": "7000342026512252959", "title": "js重难点精讲（ES二）｜8月更文挑战", "desc": "ES6对于对象的扩展 属性简写 可以直接在对象中写入变量 key相当于变量名，value相当于变量值，可以省略value，只通过key表示对象的完整属性 属性遍历 for...in 包含可枚举的自身属"}, {"id": "6844904036601167879", "title": "llhttp是如何使Node.js性能翻倍的？", "desc": "如果你关注 Node.js 社区，那么你一定记得 Node.js v12 一个非常重磅的功能就是，内核的 HTTP Parser 默认使用 llhttp，取代了老旧的 http-parser，性能提升了 156%。 但知其然也要知其所以然，llhttp 是如何做到这一点的呢？"}, {"id": "6844903558853181447", "title": "6个经典的JavaScript报错分析", "desc": "代码报错是经常发生的一件事，我们要确定是什么原因造成的，以及如何避免错误。 1. Uncaught TypeError: Cannot read property 该错误说明没有某个属性，一般是该属性前面的值是undefined或者是null的情况会出现。 2. TypeErr…"}, {"id": "6844903824050618381", "title": "前端面试官：请使用二分法搜索旋转数组", "desc": "上面说过，二分法的特性之一是，存在明显单调性。这样的话，我们的二分法模板才有用武之地，可是事实上总会存在特殊的情况。 发现了没有，在以黑色虚线为分界点的左右两侧，都是分别升序的，而黑色虚线所在的那个分界点，也就是红色箭头指向的那个 Point，我们可以理解它为 分界点，用来分界…"}, {"id": "6930595674371457037", "title": "Nice！JavaScript基础语法知识都在这儿了", "desc": "之前我们在写网页的时候，用的是HTML+CSS，这样的网页被称作静态网页，它只是用来展示内容而已，不具备交互的功能，如果想要点击某个元素的时候执行特定的事件，就要使用到JavaScript，有了JavaScript之后，网页就可以实现更加复杂的效果，比如和服务器的交互等，这样的…"}, {"id": "6965138864155394078", "title": "六.JavaScript第二座大山:面向对象(OOP)", "desc": "一.对象类型数据结构的基本结构和操作 对象是一组属性的无序集合，任何一个对象都是由0到多组键值对(属性名:属性值)组成的，并且属性名不能重复。如下： 1.1对象字面量创建对象 1.2 构造函数创建对象"}, {"id": "6987199523030466568", "title": "浅析promise与async/await", "desc": "一、promise 1、概念： 2、作用 3、方法 promise是一个构造函数，方法有then、catch、all、reject、resolve； then和catch方法 then有两个参数，re"}, {"id": "6981593502110973966", "title": "一个老生常谈的问题，什么是面向对象？", "desc": "一万个人心中有一万个哈姆雷特，一万个开发者心中便有一万种对面向对象思想的理解。这里我只粗浅的阐述一下我对面向对象思想的理解。"}, {"id": "7000347070628364324", "title": "【es6】系列（一）之  class ｜8月更文挑战", "desc": "一 定义 二 使用 构造函数 就是 通过new 关键字来调用的函数，其本质就是函数 实例是一个对象。因为实例是构造函数new 调用后的返回值。构造函数返回的永远都是对象。你想修改为其他非对象的返回值 "}, {"id": "6844903827611598862", "title": "最后一次搞懂 Event Loop", "desc": "我们都知道 JavaScript 是一门 单线程 语言，也就是说同一时间只能做一件事。这是因为 JavaScript 生来作为浏览器脚本语言，主要用来处理与用户的交互、网络以及操作 DOM。这就决定了它只能是单线程的，否则会带来很复杂的同步问题。 既然 Javascript 是…"}, {"id": "6991644129297973285", "title": "浅谈JavaScript的事件循环机制（Event Loop）- 浏览器篇｜8月更文挑战", "desc": "我们先来看个实际中的场景： 对于这个需求，我们第一个反应的代码是这样的： 看着好像没问题，当然这里有的同学会说，你这里操作了100万次dom，性能损耗很严重。"}, {"id": "7000206806156836901", "title": "jol-player，从需求到开源发布，一款轻量级，功能强大的react播放器", "desc": "使用 TypeScript 开发，提供完整的类型定义文件，主题，组件，定制能力，强大的 API 和回调函数， 体积小，80kb"}, {"id": "6844903608379506701", "title": "ESLint里的规则教会我，无规矩 不编程", "desc": "编程风格这个东西，说实在的对于刚加入团队的新成员来说还是很难让人完全适应的。因为每人的编程风格都不同，完全是各有千秋的既视感啊 放眼望去，在前端，但凡有个项目，无论大小，都会看到它的身影。并非为了提高比格，让别人暗赞专业，而是它确确实实帮我们检测出不易察觉的错误，避免N多个线上…"}, {"id": "6854573212970270728", "title": "12 个提高JavaScript编码效率的 NPM 技巧", "desc": "NPM，Node Package Manager，是 JavaScript 编程语言的软件包管理器。 任何使用 Javascript 的开发人员都使用过这个出色的 CLI 工具来为他们的项目安装依赖项。 在这篇文章中，我将分享 NPM 的技巧和诀窍，它们可以提高你的工作效率，让…"}, {"id": "7001071834678427662", "title": "海绵宝宝邀请您一起来学习JS中的this", "desc": "JavaScript 内存中的数据结构 JavaScript 中之所以有 this 的设计，跟内存中的数据结构有密切的关系 上面将一个对象赋"}, {"id": "6995739304647458852", "title": "前端基础深入学习之—— AO、GO、作用域链（含大量实战练习）", "desc": "为什么要深入学习JavaScript基础？ 个人心得： 源码阅读与学习受阻（更深入了解框架的运作方式，后期学习与使用框架会有事半功倍的效果，学习写代码设计思想思维方式，学习新的框架更容易触类旁通） 个"}, {"id": "6999469729471545375", "title": "JS基础：16、Ajax原理及优缺点", "desc": "ajax简介 工作原理 XmlHttpRequest对象 XmlHttpRequest对象兼容性 所有现代的浏览器都支持 XMLHttpRequest 对象。xmlhttp=new XMLHttpRe"}, {"id": "6995375788908363783", "title": "修饰符.sync & v-model指令", "desc": "修饰符.sync & v-model指令 修饰符.sync v-model 具体代码如下： app父组件，里面包括两个子组件 Left 和 Right Left 子组件 Right 子组件"}, {"id": "6996945118339006471", "title": " ES6 JavaScript Array 属性", "desc": "前言 没有前言，直接开始，哈哈哈哈哈哈.... 遍历数组方法 forEach() forEach() 方法按照升序为数组中每一项执行一次给定的函数。 语法 currentValue : 数组当前项值 "}, {"id": "6995891942424838181", "title": "重温ES6系列之“扩展运算符的应用”", "desc": "1.合并数组 扩展运算符提供了数组合并的新写法。 （ 2.与解构赋值的结合 扩展运算符可以与解构赋值结合起来，用于生成数组。 如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。 3.函"}, {"id": "6844903873992196110", "title": "「前端进阶」JS中的栈内存堆内存", "desc": "JS的内存空间分为栈(stack)、堆(heap)、池(一般也会归类为栈中)。 其中栈存放变量，堆存放复杂对象，池存放常量，所以也叫常量池。 栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。 栈被称为是一种后入先出（LIFO，last-in-first-o…"}, {"id": "6990895466527326215", "title": "数组中常用的方法", "desc": "数组中常用的方法 数组中常用的API（Application Programming Interface 应用程序接口) 凡是能被外界调用，实现某个功能的都是API 数组可以调取的各种方法. 方法的作"}, {"id": "7000265828834738190", "title": "sdk封装--webpack+typescript+react", "desc": "前端搭建sdk模板，技术栈选择：webpack+react+typescript，最终发布至npm。"}, {"id": "6993950742084059167", "title": "就用500字，带你彻底理解闭包 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 前言 特点 闭包是一个函数。 在外部函数上下文销毁的情况下，仍能访问外部函数作用域中的自由变量。 例子 由案例可知，当let func = "}, {"id": "6971688892894281764", "title": "【设计模式】学习JS设计模式?先掌握面向对象!", "desc": "一个模式就是一个可重用的方案，可应用于在软件设计中的常见问题，另一种解释就是一个我们如何解决问题的模板 - 那些可以在许多不同的情况里使用的模板。--w3cschool"}, {"id": "6937818396859826207", "title": "使用React Hooks 时要避免的5个错误！", "desc": "很有可能你已经读过很多关于如何使用React Hook 的文章。但有时候，知道何时不使用与知道如何使用同样重要。 在这篇文章中，主要介绍一下 React hooks 错误使用方式，以及如何解决它们。 组件FetchGame 接收 id（即要获取的游戏的ID）。 useEffec…"}, {"id": "6991744492046909454", "title": "手把手一起学一次前端Debug", "desc": "故事的开始 在一个阳光明媚的早晨，我吃完早餐准时来上班，听着吴亦凡的freestyle，觉得今天应该是一个无风无浪的日子 可是，事情的发展总是会出乎我们的意料"}, {"id": "6844904037574246408", "title": "关于git你日常工作中会用到的一些东西", "desc": "当我们从github远程服务器pull和push代码时， 如何验证提交和拉取的代码是谁？ 为了避免每次输入用户名， 密码的麻烦， 我们可以通过配置ssh来解决。 在右上角头像下拉settings -> SSH and GPG Keys中点击 New SSH Key进行添加。 通…"}, {"id": "6844903621872582669", "title": "Js 的事件循环(Event Loop)机制以及实例讲解", "desc": "大家都知道js是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop方案应运而生... js作为主要运行在浏览器的脚本语言，js主要用途之一是操作DOM。 为了避免这种问题，js必须是一门单线…"}, {"id": "6951361448308113415", "title": "wangEditor - 富文本编辑器Level-1的探索（一）", "desc": "L1即Level 1，简单来说就是不完全依靠浏览器的API来完成富文本编辑器的工作，而完全依赖浏览器能力的阶段叫做Level 0。区别就在于完全和不完全之间"}, {"id": "6998742965149499399", "title": "web前端高级webpack - webpack的手动配置及多入口多出口打包", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 webpack配置 入口（entry）及出口（output）配置 html-webpack-plugin插件 - 自动引入打包文件 cle"}, {"id": "6944699103569772552", "title": "初识javascript闭包世界", "desc": "1. 使用return 返回函数 2. 函数作为参数 4. 定时器setTimeout（回调函数都是闭包）"}, {"id": "6997597344346669092", "title": "进阶教程 10. DOM 事件扩展-拖拽", "desc": "原生的 JavaScript 实现拖拽，对比实现拖拽和HTML5内建的拖拽方案，原生拖拽事件和 dataTransfer 对象"}, {"id": "6844903678533451783", "title": "做面试的不倒翁：浅谈 Vue 中 computed 实现原理", "desc": "虽然目前的技术栈已由 Vue 转到了 React，但从之前使用 Vue 开发的多个项目实际经历来看还是非常愉悦的，Vue 文档清晰规范，api 设计简洁高效，对前端开发人员友好，上手快，甚至个人认为在很多场景使用 Vue 比 React 开发效率更高，之前也有断断续续研读过 V…"}, {"id": "6951673649376002062", "title": "技术周报 · 2021-04-16", "desc": "小编推荐把重构后的代码稳定搞上线在商业项目中如何选择框架和库软件幻灭（译）性能优化React Native Bundle 分析与优化React Native 启动速度优化：JS 篇持续学习使用 nav"}, {"id": "6964360888430264351", "title": "前端工程化篇---- monorepo、lerna", "desc": "1. monorepo、lerna是什么？ Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。 "}, {"id": "6993705213882269709", "title": "javascript数组常用方法小结 | 实际开发后复盘", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 定义一个数组（采用字面量的方式定义，规范写法，方便后面维护与阅读代码） 给数组赋值 测量数组的长度 数组遍历的几种方法 删除数组元素 好啦~"}, {"id": "6844903890622611470", "title": "【前端进阶之路】没有入门设计模式？那看这篇就够了！", "desc": "并不会列举所有的设计模式，比如java里的建造者模式，我自己没有实际场景用过，所以体会不深，我们就略过。 单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 但实际写代码的过程中，创建对象的复杂度比上面的代码高很多。接下来介绍一种常见的创建…"}, {"id": "6854573217986805768", "title": "快速搭建Vue3 + TypeScript项目", "desc": "Vue3 已经发布beta版本了，笔者在新项目中尝试体验了下Vue3 + TypeScript全家桶，通过本文记录下项目搭建的过程。 笔者已经安装了最新版本的Vue Cli，如果你的机器上尚未安装最新版本的Vue Cli，可以先去官网安装一下。 这里需要使用 Vue 官方提供的…"}, {"id": "6955079668852768775", "title": "canvas,简单的消消乐。", "desc": "消消乐（求大佬帮改改JS） 初始图片 点击第四行第一列绿色圆圈 css代码如下 html代码如下 js代码 用一个数组存储颜色，最后一个颜色是白色和背景色一样，所以会产生消失的感觉 创建三个二维数组存"}, {"id": "6844903640990220301", "title": "优雅的类写法", "desc": "虽然现在已经是ES6的时代，但是，还是有必要了解下ES5是怎么写一个类的。 本文详述JavaScript面向对象编程中的类写法，并分步骤讲述如何写出优雅的类。 例子为一个轻提示组件Toast。 JavaScript的类，是用函数对象来实现。 其中的重点，就是Function的编…"}, {"id": "6984378114897870861", "title": "浅谈 Typescript（一）：什么是Typescript？", "desc": "Typescript 为 JS 带来了类型能力，如今已被越来越多的大型前端项目选用。Typescript 的出现大大改善了开发体验，增强了代码的可维护性和稳定性。"}, {"id": "6997693770040885278", "title": "前端基础三之JavaScript基础", "desc": "身为一个合格的后端开发人员 前端的基础知识也是需要了解的 JavaScript是一门网络脚本语言，他非常流行，"}, {"id": "6951373058544730125", "title": "【重构】把重构后的代码稳定搞上线", "desc": "重构代码对很多人来说，绝对是一件脏活、累活。没有可以大幅度提效的方法，难以沉淀有效的体系化的可复用的技术抓手，对业务来说没有明显的增量，精力和时间消耗巨大，没有测试用例，也不一定能得到测试的支持，自测"}, {"id": "6844903590293667847", "title": "面试之JavaScript篇", "desc": "旨在记录面试中遇到的面试题，包含js常见，易错，重要知识点"}, {"id": "6981272992923795486", "title": "js深拷贝和浅拷贝知多少", "desc": "浅拷贝，深拷贝，浅拷贝原理，深拷贝原理，浅拷贝实现，深拷贝实现，手动实现深拷贝基础版，改进版。浅拷贝和深拷贝的应用"}, {"id": "6844903895748050958", "title": "如何优雅地处理 Async / Await 的异常？", "desc": "async/await 中的异常处理很让人混乱。尽管有很多种方式来应对async 函数的异常，但是连经验丰富的开发者有时候也会搞错。 假设你有一个叫做run()的异步函数。在本文中，我会描述 3 种方式来处理run()的异常情形： try/catch, Go 语言风格, 函数调…"}, {"id": "6997210801270423583", "title": "前端安全中关于验证码的防护详解", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 截止到今天咸鱼以及写了很多期关于 Js 逆向的文章了，不过这么多的文章都有一个共通点，都是关于加密参数或者密码加密的解析，很多读者在后台私"}, {"id": "6970624351183831048", "title": "reduce方法详解", "desc": "前言 很多前端开发中都知道数组的reduce方法可以用来给数组求和，但是你问到里面的具体参数代表的时候什么，很多人却不知道。所以在工作中也是很少人会用到这个方法。现在我就通过这篇文章给大家详细讲解一下"}, {"id": "6999203714212823047", "title": "Node.js 异步 api 的本质和 libuv", "desc": "Node.js 是一个 Javascript 的运行时，提供了系统能力的 api，主要是文件、网络相关的 IO api，而 IO api 的实现是在 libuv，提供了同步异步两种形式的 api。 本"}, {"id": "6870371090653741064", "title": "面试官再问call、apply、bind。来来来、我给你手写一个！", "desc": "哈喽，大家好！我是前端Up主。一个有代码洁癖的前端攻城狮( 哈哈，生活很邋遢(*￣︶￣) ) 相信不少小伙伴在面试中，都会被问到怎么改变this的指向呢，然后你说：call、apply、bind。没错！然后他开始让你介绍一下这三者的区别 概念：执行上下文，this一般存在于函数…"}, {"id": "6930506113553006599", "title": "低代码可视化编辑平台", "desc": "1. 背景 公司最近在做能力库，为公司的未来业务赋能，恰好需要一款低代码可视化拖拽平台。所以... 本篇文章将介绍平台的主要功能实现思路，详情请移步gitee，平台在线访问地址：Vue3-Visual-Editor，代码地址：gitee。 2. 长啥样，有啥功能 3. 设计理念…"}, {"id": "6987130437285969957", "title": "太平洋大西洋水流问题如何解决？一文了解图在前端中的应用", "desc": "🎧序言 在我们的日常生活中，图无处不在。小到一张小小地图，大到我们我们乘坐的航班，每一个都跟图有着紧密的联系。 而对于前端来说，图的应用也是相对比较广泛的。图常用于克隆图、太平洋大西洋水流问题、有效数"}, {"id": "6844903593275817998", "title": "彻底理解浏览器的缓存机制", "desc": "浏览器的缓存机制也就是我们说的HTTP缓存机制，其机制是根据HTTP报文的缓存标识进行的，所以在分析浏览器缓存机制之前，我们先使用图文简单介绍一下HTTP报文，HTTP报文分为两种："}, {"id": "6998512879397765127", "title": "变量提升得从执行上下文栈说起", "desc": "众所周知啊，变量提升和函数提升基本上是面试必问，是基础中的基础。那么变量提升归根结底到底是如何引起的呢？让我们来看看吧"}, {"id": "6844904161268482062", "title": "javascript 近乎神话般的概念：闭包", "desc": "对于JavaScript有使用经验但却从未真正理解闭包概念的人来说，理解闭包可以说是某种意义上的重生。闭包并不是需要学习新的语法才能使用的工具。闭包的产生是基于词法作用域写代码时自然产生的结果。换句话说，你不需要要为了闭包而写闭包，闭包在我们写的代码中随处可见。 首先foo1(…"}, {"id": "6955036353931247629", "title": "H5实现自定义身份证拍照", "desc": "由于h5通过 <input type=\"file /> 方式吊起拍照的为系统相机，给用户的体验并不是很好，没有裁切框，也无法在系统相机上附加 tips 蒙层进行扩展，比如在蒙层上告知用户拍照的注"}, {"id": "7002423342363836453", "title": "前端新人的实习心得(3)", "desc": "今天是实习的第113天了，截至目前已累计提交了8000行代码，参与了6个需求的开发，下面简单分享一下最近接触到的知识点..."}, {"id": "6987257436822306830", "title": "用这个vscode插件，分分钟搞定整个项目的代码替换", "desc": "前言 自 gogocode 工具开源以来，就听到了社区小伙伴对 vscode 插件的呼吁，于是我们复用了 playground 的能力，与本地文件及目录结构结合，开发了 vscode 插件！ 用起来的"}, {"id": "6996284040185643039", "title": "数据结构之图的深度优先搜索", "desc": "深度优先搜索 深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径直到这条路径的最后一个顶点被访问了，接着按照原路回退并探索下一条路径。 也就是说，它是先深度后广度地访问顶点。"}, {"id": "6985057610391093261", "title": "手写bind/call/apply/new/防抖/节流", "desc": "手写bind 第一个参数接收 this 对象 返回函数，根据使用方式 直接调用 改变 this 指向 拼接参数 调用函数 构造函数 不改变 this 指向，忽略第一参数 拼接参数 new 函数 手写c"}, {"id": "7002600064283901960", "title": "JS算法之数组中出现次数超过一半的数字及最小的k个数", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 数组中出现次数超过一半的数字 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。"}, {"id": "7002544952655740958", "title": "V8垃圾回收的工作机制", "desc": "前言 本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 V8引擎是一款主流的JavaScript执行引擎，目前Chrome浏览器和"}, {"id": "6997223800408539144", "title": "湖中剑 前端周刊 #4 | 2021-08-16", "desc": "周刊收集包括前端（但不限于前端）的文章、新闻、开源项目、工具等等，每周一更新。 📰 News V8 引擎发布 v9.3 更快的编译速度 Object.hasOwn 作为 Object.prototyp"}, {"id": "6844903913691283463", "title": "夯实JS主要知识点", "desc": "string类型即字符串，除了单引号双引号，es6 中引入了新的反引号 ` ` 来包含字符串。反引号的扩展功能是可以用${…}将变量和表达式嵌入到字符串中。使用如下： number类型值包括整数、浮点数、NaN、Infinity等。其中NaN类型是js中唯一不等于自身的类型，当…"}, {"id": "6996848613066276895", "title": "深入理解Typescript系列-高级类型", "desc": "这是我参与 8 月更文挑战的第 16 天，活动详情查看： 8月更文挑战 前言 在之前的文章中，我们讲述了TS的基础类型，TS除了JS中提供的数据类型外，还额外补充了如enum、never、void等类"}, {"id": "6979212078624014343", "title": "我做了一个制作代码演示动画的工具，答应我以后别再熬夜做动画了", "desc": "代码演示动画的表达效果超乎想象，一图胜千言，一画胜万语，制作工具可以高效的节省制作时间，发挥更多的创意。"}, {"id": "7002475280577085477", "title": "🔥JavaScript垃圾回收的工作机制，我也想让你学会！！！", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 知识线 什么是内存泄漏？=> 是什么导致的内存泄漏？=> 怎么解决内存泄漏？=>"}, {"id": "6937469222251560990", "title": "JS 闭包经典使用场景和含闭包必刷题 ", "desc": "堆内存：存储引用类型值，对象类型就是键值对，函数就是代码字符串。 栈内存：提供代码执行的环境和存储基本类型值。 栈内存释放：一般当函数执行完后函数的私有作用域就会被释放掉。 保护函数的私有变量不受外部的干扰。形成不销毁的栈内存。 保存，把一些函数内的值保存下来。闭包可以实现方法…"}, {"id": "6931886945282818062", "title": "开工大吉，给各位大佬分享20款超级好用的chrome拓展插件", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 各位小伙伴，大家好。每逢佳节胖三斤，三斤之后又三斤。我是长胖了的秦爱德，在这里祝各位开工大吉，牛气冲天！🐮🐮🐮 在新手到老手的进阶中，有一环特别重要的就是要学会利用各种工具来提升工作效率或幸福指数。作为一个已经工作了…"}, {"id": "6904473733067440142", "title": "JSON5 解决了 JSON 的两大痛点", "desc": "JSON 格式可以说是目前最流行的数据传输格式了，被广泛应用于前后端通信，尤其是在 SPA 应用中，JSON 数据通过 HTTP 协议进行传输，具有体积小、易序列化、可读性好等优点。（当然，这些优点是相对的，例如体积小是相对于 XML 而言的，如果跟 protobuf 比，那体…"}, {"id": "6994235344195420173", "title": "『面试的底气』—— 设计模式之策略模式(一)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6997198017438679047", "title": "前端：vue3+ts，后端：koa2+jwt，实现登陆功能（后端部分下篇）", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 # 前端：vue3+ts，后端：koa2+jwt，实现登陆功能（后端部分上篇） 1. 在routes里面，创建一个user.js文件，用作"}, {"id": "7001297858469036039", "title": "漫谈RxJS之基础概念篇", "desc": "这是我参与 8 月更文挑战的第 28 天，活动详情查看： 8月更文挑战 前言 我们要谈及RxJS，不得不先说下Reactive Extensions（Rx），这是一种编程模式，他的目标是对异步的集合进"}, {"id": "7002764927157043236", "title": "「每日一题」比较版本号", "desc": "1. 题目描述 给你两个版本号 version1 和 version2 ，请你比较它们。 版本号由一个或多个修订号组成，各修订号由一个 '.' 连接。每个修订号由 多位数字 组成，可能包含 前导零 。"}, {"id": "6996964762902855687", "title": "实现一个具有拖拽功能的跑马灯", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 需求分析： 需要提供一个组件，可以根据子元素的宽度，自动决定是否进行滚动(跑马灯功能) 滚动"}, {"id": "7003533740341362719", "title": "ES6新增引用类型：Map、WeakMap、Set、WeakSet", "desc": "前言 Map、WeakMap、Set、WeakSet作为es6新增的引用数据类型，自己平常用的最多的无非使用Set去重，但对于Map、WeakMap、WeakSet的用法、区别和应用场景都很模糊。"}, {"id": "6964169557569175565", "title": "520， 学废 new 对象的过程", "desc": "前言 众所周知，把大象放进冰箱里需要三步，打开冰箱，放进大象，关上冰箱。那你知道 new 一个对象需要几步？这时候可能就有大聪明小哥哥会说了：“我有五姑娘了，还要啥对象？”咳咳咳...，此对象非彼对象"}, {"id": "7006104417082540063", "title": "Javascript的Event Loop事件循环", "desc": "Event Loop 基本概念 Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。JavaScript语言就采用这种机制，来解决单线程运行带来的一些问题。"}, {"id": "6996037536288079880", "title": "【码住七夕】我用 140 行代码，带你看一场流星雨⭐", "desc": "【码住七夕】我用 140 行代码，带你看一场流星雨⭐ 在一个夜深人静的晚上，程序员小丞坐在屋顶上，看着屏幕上满屏的 error ，心里拔凉拔凉的，泪水润湿了脸庞，无数个自己提桶跑路的身影"}, {"id": "7002425151014830088", "title": "前端面试官：“你说说作用域”", "desc": "JavaScript作用域深度分析总结: 为什么需要闭包? 闭包如何工作? JS引擎如何同时支持块级作用域和var变量提升?"}, {"id": "7001312313953222670", "title": "前端动画lottie-web", "desc": "lottie是一个跨平台的动画库，通过AE（After Effects）制作动画，再通过AE插件Bodymovin导出Json文件，最终各个终端解析这个Json文件，还原动画。本文中我只介绍前端用到的"}, {"id": "7005873917646602271", "title": "js 提升开发效率的运算符汇总", "desc": "前言 Javascript（ECMAScript） 自 ES6 之后在每年的 6月都会新增一些实验性的语法、运算符等，迄今为止已经增加了不少新成员，本文就介绍一些开发中能简化代码提升开发效率的运算符！"}, {"id": "7004786857389064205", "title": "Promise.race() 原理解析及使用指南", "desc": "Promise.race(promises) ，顾名思义就是赛跑的意思，Promise.race([p1, p2, p3]) 里面 promise 数组那个执行完成得快就获取那个的结果"}, {"id": "7002100025971081230", "title": "🚁一起来封装脚手架吧！[第4天：看完必会的脚手架开发！]", "desc": "👽 概论 前边和大家讲了很多的脚手架构思、设计上的知识，今天正式进入代码开发阶段。如果你对理论文字不感兴趣，那么从这一篇开始跟进也可以完成属于自己的脚手架！ 👽 项目初始化 创建好项目文件夹之后，在其"}, {"id": "7000995991927144479", "title": "使用 Face-api.js 在 Web 上进行人脸检测", "desc": "Web 浏览器日益强大，网站和 Web 应用程序的复杂性也在增加。几十年前需要超级计算机的操作现在可以在智能手机上运行，其中之一就是人脸检测。 检测和分析人脸的能力非常有用，因为它能让我们添加聪明的特"}, {"id": "6998153008915677198", "title": "『面试的底气』—— 设计模式之职责链模式（一）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6946127475244007431", "title": "Javascript 高效开发工具函数", "desc": "将数组（array）拆分成多个子数组，并将这些子数组组成一个新数组。 array要检索的数组。 n=要提取的元素n个数。 array要检索的数组。 n=要提取的元素n个数。 创建一个新数组，包含原数组中所有的非假值元素。例如false, null,0, \"\", undefine…"}, {"id": "7001278074926923784", "title": "JavaScript 系列之异步编程（三）", "desc": "[JavaScript 系列之异步编程｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "7000242102827221029", "title": "js 堆和栈的个人理解， 以及实现几种深拷贝（有问题及时指出啊）", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 前言 其实我对这个东西（堆/栈）也挺模糊，翻阅了好多文章，想着总结一篇，如果理解有误请指出 栈 比如：数值(Number)、字符串(Str"}, {"id": "6920070789614501896", "title": "Vue3 的学习教程汇总、源码解释项目、支持的 UI 组件库、优质实战项目", "desc": "已经推荐了 面试项目、CSS 奇技淫巧项目、代码规范项目、数据结构与算法项目、JavaScript 奇技淫巧项目、前端必备在线工具 等专题的近 100 个优秀项目了。 以下为【前端GitHub】的第 16 期精华内容。 1. Vue3 中文文档 先给大家提供 3 个 Vue3 …"}, {"id": "7003713678419705870", "title": "Promise.all() 原理解析及使用指南", "desc": "Promise.all(promises) ，能够一次并行处理多个 promise，并且只返回一个 promise 实例， 那个输入的所有 promise 的 resolve 回调的结果是一个数组。"}, {"id": "7003993931327209479", "title": "Vue3.0 常用响应式API的使用和原理分析(一)", "desc": "前面关于响应式的两篇文章，分别介绍了响应式实现原理和计算属性，本篇文章我们来看看其他响应式API的使用和实现原理。 reactive 使用方式 实现原理 请参阅本系列的Vue3.0 响应式实现原理分析"}, {"id": "7005727320086429727", "title": "js的if包含函数代码", "desc": "今天我们来深究一下这道题！！！看了这个题目？？？这不是很简单？？？if里面不就是输出2吗？外面的不就是输出0吗？如果真那么简单。就不会拿出来说了，首先我们要用变量提升来（编译阶段）说说(没有给类型的变"}, {"id": "7003132922219724814", "title": "「每日一题」链表中倒数第k个节点", "desc": "1. 题目描述 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。 例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2"}, {"id": "7007662627224551454", "title": "数组的操作方法", "desc": "1. push() 接收参数逐个添加到数组末尾 控制台输出结果: 2. unshift() 接收参数逐个添加到数组开头 控制台输出结果: 3. splice() splice()可以向数组指定位置添加"}, {"id": "6844904150161948679", "title": "你累死累活做业务，绩效还不怎么样，我只能帮你到这了……", "desc": "如果你也有这样的感受和困境，我想告诉你，这真的是太正常了，在阿里内部的技术论坛就有多篇关于这个问题的思考，我根据根据自己理解和调研，同时参考了多位不同前端领域专家的总结，整理成这篇文章，希望能对大家有所帮助。 1. 业务前端的困境 业务前端，顾名思义，做业务的前端，直接与业务的…"}, {"id": "7005208331753111582", "title": "【算法】 时间复杂度，空间复杂度", "desc": "一、时间复杂度 1） 常数阶O(1) 2) 线性阶O(n) 3) 对数阶O(logN) 也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(logn) 4) 线性对"}, {"id": "6989148164347396103", "title": "面试官：你解决过哪些难题-预渲染/SSR/SPA/离线包/Snapshot", "desc": "整体的一个方案的设计，我们会有一个类似 Orange 这样一个动态下发的平台，去配置一些我们想要预渲染的一个URL，它就会动态下发到一个用户的 APP 上，APP 获取到这些配置之后，就会在后台这边去"}, {"id": "7002591353263620127", "title": "聊聊Promise的值穿透和异常穿透。", "desc": "值穿透 值穿透指的是，链式调用的参数不是函数时，会发生值穿透，就传入的非函数值忽略，传入的是之前的函数参数。 传入2或者promise的fulfilled状态都会发生值穿透。 只有传入的是函数才会传递"}, {"id": "6998051468733497358", "title": "三张图轻松KO⚡ JS 原型和原型链", "desc": "引言 原型和原型链据说是面试常考的东西，对于初学者来说有一定的难度，但是其实它也非常的简单，几个概念理解好了就没什么问题了，我们先从一个例子出发，然后再引出相关的知识点，下面我们"}, {"id": "6854573219119104014", "title": "封装 axios 拦截器实现用户无感刷新 access_token", "desc": "最近做项目的时候，涉及到一个单点登录，即是项目的登录页面，用的是公司共用的一个登录页面，在该页面统一处理逻辑。最终实现用户只需登录一次，就可以以登录状态访问公司旗下的所有网站。 其中本文讲的是在登录后如何管理access_token和refresh_token，主要就是封装 a…"}, {"id": "6993296099331014669", "title": "Promise技术点-面试实战版", "desc": "本文旨在使用一个易于理解、易于记忆的方式去吃透promise相关应用侧的技术点，从而应用于简历和面试中。比起其他大佬的文章，本文更注重于实战性，同时也会尽可能的去提高代码规范和质量。"}, {"id": "7005523234347024414", "title": "中秋佳节，嫦娥望月", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 大家好，我是cv竹叶，中秋佳节即将到来，在此祝屏幕前的你，中秋快乐！！！ 竟然大家都来了，就一起和嫦娥看月亮吧！"}, {"id": "6990162313256894471", "title": "各流派 React 状态管理对比和原理实现", "desc": "1. 前言 在 React 诞生之初，Facebook 宣传这是一个用于前端开发的界面库。在大型应用中，如何处理好 React 组件通信和状态管理就显得非常重要。 为了解决这一问题，Facebook "}, {"id": "6993278063190474788", "title": "技术周报 · 2021-08-06", "desc": "小编推荐 企业 Node.js 基础建设与框架设计讨论集合 探索类型友好的 Node.js Web 框架 复杂系统架构设计应对之道 技术方案 跨平台解决方案的技术分析 大前端工程提效分享与总结 如何实"}, {"id": "6983841126272729124", "title": "我的掘金前端周刊 第三周 7月5日-7月11日", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。 如有遗漏，敬请谅。"}, {"id": "6844904064614924302", "title": "「硬核JS」深入了解异步解决方案", "desc": "异步模式则完全不同，每一个任务有一个或多个回调函数(callback)，前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的，在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去…"}, {"id": "6995371488803029006", "title": "JavaScript 之事件循环(Event Loop)", "desc": "事件循环是 JavaScript这门语言中非常重要且基础的概念，你了解多少？充电时间到！快来学习吧！"}, {"id": "6993344830218698782", "title": "如何在 JS 中做一个不写分号党", "desc": "卸载某乎已经很久了，之前，在那上面看到的文章要么就是抖机灵的，要么就是卖课的，还有就是对一些编程癖好的争论，记得最深刻的一个争论是 vim 好还是 emacs 好。 可能是因为我所处的圈子太 low "}, {"id": "7001895661041893413", "title": "嘿，确定不来学一下代理模式么？", "desc": "代理模式 是为一个对象提供一个代用品或者占位符，以便控制对它的访问。代理模式 的关键在于当需求方不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，需求方实际上访"}, {"id": "6844903782959022093", "title": "你知道前端对图片的处理方式吗？", "desc": "作为前端工程师 de 我们，日常少不了会跟图片打交道。在各大电商平台工作的前端工程师们，感受可能会更加的明显。 以下是我之前跟图片打交道踩到的坑，跟大家分享一下经验。 很明显，数据的类型已经被改动了。思考原因，唯一有可能改变数据类型的地方是在 axios 。 因此，乱码出现的原…"}, {"id": "6844903984222699527", "title": "《前端实战总结》如何在不刷新页面的情况下改变URL", "desc": "由于公司最近有个需求是想让我们的get请求的参数都直接显示在浏览器url上，这样我们就可以直接通过复制url来显示对应的界面数据了。 由于我们常用的http请求一般是基于XHR对象的实现或者fetch实现，这种请求操作并不会触发浏览器url的变化，这样虽然也能正常请求数据并渲染…"}, {"id": "6981701128232796191", "title": "前端js实现本地模糊搜索", "desc": "这是我参与新手入门的第1篇文章。js实现本地模糊查询。主要涉及filter()、indexof()等方法。"}, {"id": "6844904070751191047", "title": "【非科班前端】注意了！ 计算机组成原理知识已送到你嘴边!", "desc": "前端开发人员中，有相当大比例的同学不是科班出来的，所以对于基本的科班必修课，例如：计算机组成原理、操作系统、计算机网络、数据结构和算法等知识接触不多。 当你越深入学习，越会发现这些知识的重要性。 比如大家都知道js里面0.1 + 0.2 是不等于0.3的，为什么呢？这就牵扯到计…"}, {"id": "6959034969297518622", "title": "JavaScript数组详解-全网最全", "desc": "定义数组的方式 定义数组的方式有多种，分别如下 let array=[] （字面量） let array=new Array() let array=new Array([length]) lengt"}, {"id": "6844903677262577677", "title": "干货分享：vue2.0做移动端开发用到的相关插件和经验总结(更新)", "desc": "最近在用vue2.0做微信公众号相关的前端开发，经过这次开发实践，现将项目中用到的相关比较实用的插件及遇到的相关问题进行整理，希望和大家共同交流...... 介绍：一个CSS值转REM的VSCode插件。我们在做移动端开发时，为了网页适配，一般会将像素单位px转换为rem.在用…"}, {"id": "6981099040968556581", "title": "聊聊TypeScript类型声明那些最佳实践", "desc": "![头图](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdb0fe9bc5e4469482e43d8cbe36946a~tplv-k3u1f"}, {"id": "6971617881792937998", "title": "小白必看的，JS 中循环语句大集合", "desc": "摘要：JavaScript中，一共给开发者提供了一下几种循环语句，分别是while循环，do…while循环，for循环，for Each，for…in循环和for…of循环。"}, {"id": "6985518117350801439", "title": "Vue学习系列之一、响应式", "desc": "前言 这是一个Vue源码学习系列。打算开个手写Vue的坑，希望能在写代码的同时能把其中的细节讲清楚，最终目的是实现一个简版的vue。不知道自己能写到哪一步，总之尽力而为。"}, {"id": "6999101080176951333", "title": "20个Clean Code 最佳实践，完善你的React 项目！", "desc": "一些可遵循的最佳实践，以改善您的 React 应用程序健康状况。 这些规则被广泛接受。 因此，掌握这些知识是很有必要的。"}, {"id": "6961227192378327070", "title": "[译]如何区分浅拷贝和深拷贝并实现深拷贝？", "desc": "这篇文章将向你讲述如何在 JavaScript 中区分不同的拷贝并安全地拷贝一个值避免引发意外的错误。"}, {"id": "6995335027911295006", "title": "【你的性格主导色】揭秘", "desc": "《你的性格主导色》是今年网易云音乐前端团队开发的一款测试用户主导色的 H5 应用，上线后反响很好，刷爆了微博和朋友圈。 项目的主要开发者 imyzf 发表了一篇文章《官方揭秘！你的颜色是这样算出"}, {"id": "6906319813342150663", "title": "H5必知必会之快速搭建开发环境", "desc": "今天我们这一篇的主题就是 “快速搭建开发环境”。快速，有多快？答案：取决于你的网速。因为我们真的有这么一个脚手架：qvk。 qvk 是一个集成现代前端工程化最佳实践的通用 Web 开发环境，可用于开发传统 C/S 架构的 Web 应用、SPA（单页应用）、H5（App 内嵌页）…"}, {"id": "6844903825472651272", "title": "今天，小程序正式支持 SVG", "desc": "SVG 是可缩放矢量图形(Scalable Vector Graphics)，基于可扩展标记语言，用于描述二维矢量图形的一种图形格式。它由万维网联盟制定，是一个开放标准。SVG 的优势有很多: 而支持上面这些优秀特性的前提是 - 需要支持 SVG 标签。比如在小程序中直接写： …"}, {"id": "6993517381033132039", "title": "深8️⃣Js从这里开始吧！**函数式编程**", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 函数式编程（Function Programming，FP），FP是编程范式之一，我们常听的编程范式还有面向对象过程编程、面向对象编程。 面"}, {"id": "6844903625618096141", "title": "JS基础知识（覆盖JS基础面试题）", "desc": "总结一些前端基础的知识，有些知识可能在前端面试的时候会问到，所以做个记录，也有助于其他人查看，如果有什么问题，可以指出，会积极修正。 喜欢的小伙伴点个赞吧，感觉对身边人有帮助的，麻烦动动手指，分享一下。非常感谢各位花时间阅读完，同时很感谢各位的点赞和分享。"}, {"id": "6871424158052384782", "title": "在线IDE开发入门之从零实现一个在线代码编辑器", "desc": "3年前在AWS re:Invent 大会上AWS 宣布推出 Cloud9, 用于在云端编写、运行和调试代码，它可以直接运行在浏览器中，也就是传说中的 Web IDE。3年后的今天随着国内云计算的发展, 各大云计算服务厂商都在部署自己的WEB IDE, 而且已经有非常成熟的落地方…"}, {"id": "6972895719896121380", "title": "原型和它的原型链", "desc": "函数的显式原型指向的都是默认的Object空对象（原型内部只有constructor和__proto__）。函数的原型对象都是Object实例。但是Object的原型对象为null... ..."}, {"id": "6844903924609056776", "title": "技术胖的React Hooks免费视频教程（11集） 2小时轻松搞定新特性", "desc": "2019年React Hooks是React生态圈里边最火的新特性了。它改变了原始的React类的开发方式，改用了函数形式;它改变了复杂的状态操作形式，让程序员用起来更轻松;它改变了一个状态组件的复用性，让组件的复用性大大增加。如果你是React的粉丝者或者正在使用React开…"}, {"id": "6893435960705417224", "title": "前端搞算法再也不难，如何套路解题：滑动窗口类", "desc": "这不是一个给一道题目然后告诉你题解的系列，而是对于一系列题目进行分类，找出他们解题规律并得出大致框架代码的文章。吃透解一系列题目的规律比会解单个题目有用的多，毕竟你总会遇到没刷过的题。 大家对于滑动窗口应该不陌生，在 TCP 协议中就有这个概念的出现，用于控制网络流量，避免拥塞…"}, {"id": "6982027547722645535", "title": "jQuery 都过时了，那我还学它干嘛？", "desc": "jQuery 教你如何设计 API 上文说到我一个不会 JS 的人居然能看懂 jQuery 的书，其实这不是因为我厉害，而是因为 jQuery 的 API 设计得太人性化了！ 举几个例子给大家看看： "}, {"id": "7003727277015957541", "title": "vue中data为什么是一个函数，而不是对象", "desc": "以上的回答也是我经常用的；直到前两天我去面试的时候：面试官说，你说的太片面了；这时候我才想到去研究一哈；一下就是我的理解；大家可以相互学习一下 其实这本身来说不是一个vue问题；而是一个js问题；可以"}, {"id": "6844904134332645389", "title": "如何在5天内学会Vue？聊聊我的学习方法！", "desc": "先说下为什么用学习Vue这个例子来谈我的学习方法？其实关注我的朋友很多都是从我的Github上面来的，大多数都是Java后端开发者，Vue作为一种前端技术，掌握的人并不多。所以使用Vue从零开始的学习过程为例子，对于大家学习新技术有很好的借鉴价值，接下来我们来聊聊我的学习方法吧…"}, {"id": "6999915453199941646", "title": "原来写一个脚手架如此简单", "desc": "学会构建一个脚手架也是构建工程化、体系化的一步。本文可以快速学习如何构建一个脚手架，撸一个属于自己的脚手架，让别人羡慕去吧。"}, {"id": "6995252528556277796", "title": "JS的状态管理库——redux", "desc": "redux 之前在学习react的时候，兄弟组件之间传状态都是要通过父组件来进行传递。redux可以解决这个问题，它可以让某个组件的状态跟其他组件进行共享"}, {"id": "6844903984222699534", "title": "通过 41 个 问答方式快速了解学习 Git", "desc": "为了保证的可读性，本文采用意译而非直译。 1. 你最喜欢的 Git 命令是什么 个人比较喜欢 git add -p. 这增加了“补丁模式”的变化，这是一个内置的命令行程序。它遍历了每个更改，并要求确认是否要执行它们。 这个命令迫使咱们放慢速度并检查更改文件。作为开发人员，咱们有…"}, {"id": "6844904106658643982", "title": "一文了解文件上传全过程（1.8w字深度解析，进阶必备）", "desc": "平常在写业务的时候常常会用的到的是 GET, POST请求去请求接口，GET 相关的接口会比较容易基本不会出错，而对于 POST中常用的 表单提交，JSON提交也比较容易，但是对于文件上传呢？大家可能对这个步骤会比较害怕，因为可能大家对它并不是怎么熟悉，而浏览器Network对…"}, {"id": "6929701436276097032", "title": "这是我的第一次JavaScript初级技巧｜牛气冲天新年征文", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 不要害怕做梦，但是呢，也不要光做梦，要做一个实干家，而不是空谈家，求真力行。 声明变量时，总是以关键字var打头。 任何情况下，都应该这样做，尽管省略关键字var，JavaScript也不会报错。 创建变量时，可…"}, {"id": "6908698827033837575", "title": "工作中常用到的前端小知识", "desc": "一个简单的原因就是，js在设计之初只是进行一些简单的表单校验，这完全不需要多线程，单线程完全可以胜任这项工作。即便后来前端发展迅速，承载的能力越来越多，也没有发展到非多线程不可的程度。 而且还有一个主要的原因，设想一下，如果js是多线程的，在运行时多个线程同时对DOM元素进行操…"}, {"id": "6992136147367362596", "title": "那些熟悉又陌生的CSS属性  ", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 css3 -webkit-font-smoothing 属性 对字体进行抗锯齿渲染可以使字体看起来会更清晰舒服。在图标字体成为一种趋势的今天"}, {"id": "7000668770704293918", "title": "这些原生的样式操作方式，你，知道多少？", "desc": "在 web 程序中，经常需要动态的控制 css 样式来丰富我们的页面。在如今这个框架横行的年代，这些原生的样式操作方式，你知道多少？"}, {"id": "6994983996434169892", "title": "重温ES6系列之“数组的扩展-数组实例的find()、findIndex()、fill()、includes()”", "desc": "1、find() 数组实例的find方法，用于找出第一个符合条件的数组成员。 它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值 为true的成员，然后返回该成员。如果没有符"}, {"id": "6844903715262955533", "title": "前端黑科技：美团网页首帧优化实践", "desc": "自JavaScript诞生以来，前端技术发展非常迅速。移动端白屏优化是前端界面体验的一个重要优化方向，Web 前端诞生了 SSR 、CSR、预渲染等技术。在美团支付的前端技术体系里，通过预渲染提升网页首帧优化，从而优化了白屏问题，提升用户体验，并形成了最佳实践。 通过对比，同构…"}, {"id": "7001524959436603399", "title": "【重温JS】巩固基础 - 设计模式: 代码设计经验的总结", "desc": "☆☆☆ 今天来具体学习一下设计模式: ( 单例模式 工厂模式 观察者模式 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! 加油! 认真对待"}, {"id": "7002418185907470373", "title": "前端刷题路-Day97：两个数组的交集（题号349）", "desc": "给定两个数组，编写一个函数来计算它们的交集。说明： 输出结果中的每个元素一定是唯一的。 我们可以不考虑输出结果的顺序..."}, {"id": "6888710939206483982", "title": "在vue中使用百度地图添加自定义覆盖物（水波纹）", "desc": "一如既往，我来给大家分享一个项目中遇到的比较有意思的需求并介绍一下相应的实现过程。 具体的应用场景简而言之就是需要我们在地图上添加如图中所示的自定义覆盖物。实现的过程作者分为以下两点给大家介绍介绍。 这个需求的实现肯定是离不开我们自己写自定义覆盖物的，那么首先我们来讨论一下水波…"}, {"id": "6924104879216689159", "title": "『前端安全』—— 友情链接捅你一刀没商量", "desc": "友情链接一般用a链接来实现，放置在门户网站的最下方。 window.opener是什么呢？用一个例子来介绍。 比如在A页面中通过a链接打开B页面，在B页面中可以window.opener访问到A页面的window对象。 等等可以通过window对象进行的恶意操作。 rel=no…"}, {"id": "7001294842756087845", "title": "前端刷题路-Day94：字母大小写全排列（题号784）", "desc": "给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。 示例： 提示： S 的长度不超过12。 S 仅..."}, {"id": "6844903535125987335", "title": "轻松理解JS函数节流和函数防抖", "desc": "概念： 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。 生活中的实例： 如果有人进电梯（触发事件），那电梯将在10秒钟后出发（执行事件监听器），这时如果又有人进电梯了（在10秒内再次触发该事件），我们又得等10秒再出发（重新计时）。 概念： 规定一个单位时间…"}, {"id": "6844903615920898056", "title": "CSS动画：animation、transition、transform、translate傻傻分不清", "desc": "在平时开发过程中，由于都是自己捣鼓玩的项目，并没有UI设计给我的设计图，更没有什么特效要求，导致对css动画一直都不是很熟悉，但是作为即将进入实习单位的萌新程序员，要时刻准备着设计师要求的各种动画，于是有了这一篇文章。 什么叫过渡？字面意思上来讲，就是元素从这个属性(color…"}, {"id": "7000984321452408863", "title": "原始值与引用值(一)", "desc": "ECMAScript变量可以包含两种不同类型的数据：原始值和引用值。原始值就是最简单的数据(基本数据类型等)，引用值则是由"}, {"id": "6989804142428422180", "title": "技术期刊 · 天光台高未百尺 | Uber 工程师的 JS 算法课;大数据时代的个人隐私;设计师的 Github;告别 PPT 工程师;从零开始实现的像素画", "desc": "这是一个最好的时代，多样化的平台给了所有人成长发展的机会，各种需求和解决需求的人让人大开眼界；但这也并不是完美的时代，“前端还需要懂什么算法？”、”中国人不需要隐私！！“、”写个 PPT 还需要耗……"}, {"id": "6844904147993657358", "title": "[译] 2020 十大 JavaScript 图像处理库", "desc": "用 JavaScript 处理图像可能非常困难且繁琐。幸运的是，有许多库可以使这事变得非常简单。以下是我最喜欢的不同类别的库。 如果你发现有用的东西，尝试将其封装成所选框架的组件。通过这种方式，你将拥有一个具备声明式 API 的可复用组件，并随时可用。 1. Pica 此插件可…"}, {"id": "6854573222067879943", "title": "前端进阶、面试必会知识", "desc": "技术研发人员被称为“幕后工作者”，工作特点是安静的研发多于交流表达，而面试是一个以表达窥探研发能力的过程，因此，能不能把问题理解透彻、能不能表达清楚、能不能进行举一反三，决定了能不能将能力完美的展现出来，同时也决定了最终的面试结果。本文旨在提升在面对问题时的：分析问题的能力、表…"}, {"id": "6998859606994731022", "title": "JS延迟加载的方式？", "desc": "1.defer属性 HTML 4.01 为 <script>标签定义了 defer属性。 用途：表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕之后再执行。"}, {"id": "6844903801799835655", "title": "详解箭头函数和普通函数的区别以及箭头函数的注意事项、不适用场景", "desc": "箭头函数是ES6的API，相信很多人都知道，因为其语法上相对于普通函数更简洁，深受大家的喜爱。就是这种我们日常开发中一直在使用的API，大部分同学却对它的了解程度还是不够深... 1. 箭头函数没有prototype(原型)，所以箭头函数本身没有this 2. 箭头函数的thi…"}, {"id": "6994398881182138376", "title": "JavaScript 系列之闭包（二）", "desc": "[JavaScript 系列之闭包｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6844903984335945736", "title": "【THE LAST TIME】一文吃透所有JS原型相关知识点", "desc": "【THE LAST TIME】一直是我想写的一个系列，旨在厚积薄发，重温前端。 也是给自己的查缺补漏和技术分享。 欢迎大家多多评论指点吐槽。 首先我想说，【THE LAST TIME】系列的的内容，向来都是包括但不限于标题的范围。 再回来说原型，老生常谈的问题了。但是着实 现在…"}, {"id": "6971356176441147399", "title": "初步了解浏览器中的事件循环机制（event loop）", "desc": "在我们讲解事件循环机制之前，我们先来了解了解JavaScript这门语言。 众所周知，JavaScript是一门单线程的语言，什么是单线程？可以简单理解为只能一件事一件事的干，只有一个执行流。"}, {"id": "6990222132244545566", "title": "用 Vite 加速你的生产力", "desc": "目前组里的业务组件库因为一些历史背景原因，源码和展示站点分为两个独立的项目工程维护，而市面上对于组件、组件库、工具库的源码和站点在一个仓库维护或者采用 MonoRepo 的方式开发和维护，因此在不改变"}, {"id": "6983978937684590599", "title": "JavaScript原生事件：全屏、拖拽、可变大小容器知多少？", "desc": "JavaScript 的原生事件了解多少呢？播放视频的全屏/退出全屏、文件的拖拽上传、可调整宽度高度的容器、调整左右容器宽度等功能是怎么实现的呢？"}, {"id": "6844903647852101639", "title": "再见JQuery，我的老朋友", "desc": "2018年7月25日，Mislav Marohnić发了一条推文，宣布GitHub.com前端已经彻底删除了jQuery（下图）。而且，还自问自答地解释（低调炫耀），删除jQuery之后也没用其他框架，而是全部依赖原生API。 很多人不知道，我和jQuery颇有渊源。大概11年…"}, {"id": "6994640378850705445", "title": "前端构建这十年", "desc": "前端模块化/构建工具发展历程，webpack/parcel/vite 的构建流程及原理分析，模块化规范"}, {"id": "6990284910086848548", "title": "嵌套数组对象结构的深度复制踩坑", "desc": "嵌套数组对象结构的深度复制问题，本来只是写一个简陋临时用一下的小破静态网页，结果因为知识点不扎实搞出了问题。。。"}, {"id": "6991018402437398541", "title": "let，var，const的区别", "desc": "var 在ES5中，顶层对象的属性和全局变量是等价的，用var声明的变量既是全局变量，也是顶层变量 注意：顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象 var声明"}, {"id": "6906106922605543432", "title": "「星辰大海」你可能需要知道的 promise 知识的总结（内附思维导图）", "desc": "最近又重新整理一下 Promise 相关知识，一方面和上一期文章有个接应，另一方面，方便自己日后复盘回顾。 如下代码，对于数组、字符串、对象等我们可以按照如下方式进行遍历。 上述都是可以通过 for..of 来迭代出来。可能此时你会有疑问了，对象不可以么？（那我们不妨来试试） …"}, {"id": "6986426226248253476", "title": "手写 git hooks 脚本（pre-commit、commit-msg）", "desc": "简介 Git 能在特定的重要动作发生时触发自定义脚本，其中比较常用的有：pre-commit、commit-msg、pre-push 等钩子（hooks）。我们可以在 pre-commit 触发时进行"}, {"id": "6844904184689475592", "title": "当后端一次性丢给你10万条数据, 作为前端工程师的你,要怎么处理?", "desc": "前段时间有朋友问我一个他们公司遇到的问题, 说是后端由于某种原因没有实现分页功能, 所以一次性返回了2万条数据,让前端用select组件展示到用户界面里. 我听完之后立马明白了他的困惑, 如果通过硬编码的方式去直接渲染这两万条数据到select中,肯定会卡死. 后面他还说需要支…"}, {"id": "6963445854589960206", "title": "一种巧妙的使用 CSS 制作波浪效果的思路", "desc": "本文将会再介绍另外一种使用 CSS 实现的波浪效果，思路非常的巧妙！实现动画的整个过程，动画负延迟时间的运用，都是有一些参考学习意义的。"}, {"id": "7006304050190909447", "title": "React中state 的三个注意事项", "desc": "React 官方文档给的三点描述： 不要直接修改stat。state的更新可能是异步的。state的更新会被合并"}, {"id": "6992388719894331422", "title": "Chrome DevTools 调试指南", "desc": "1. Chrome DevTools功能简介 Chrome DevTools由以下九部分组成： Element元素面板：检查和调整页面，调式DOM，调试CSS Network网络面板：调试请求，了解页"}, {"id": "6901466406823575560", "title": "🎉我点了页面上的元素，VSCode 乖乖打开了对应的组件？原理揭秘。", "desc": "在大型项目开发中，经常会遇到这样一个场景，QA 丢给你一个出问题的链接，但是你完全不知道这个页面 &#x26; 组件对应的文件位置。 react-dev-inspector 就是应此需求而生。 可以在 预览网站 体验一下。 需要加一个 webpack loader 去遍历编译前…"}, {"id": "7000897971545964558", "title": "7分钟用事例带你掌握工作常用的 git 命令", "desc": "从本质上讲，Git可以记录文本的变化，但其定义是一个版本控制系统。你有可能已经以这种或那种方式使用了git：由于它的分布式性质，它是代码版本控制的事实标准，与集中式的Apache Subversion"}, {"id": "7004381843998900238", "title": "如何写成Strview.js之源码剖析", "desc": "前言 前段时间我自己开发了一款Strview.js，它是一个可以将字符串转换为视图的JS库。什么意思呢？就像下面这段代码： 显示如下页面： 你会看到页面上显示了一个Hello World字样，而我们看"}, {"id": "7000313556944044062", "title": "8月更文挑战 | 前端路由模式分析---实现vue-router", "desc": "介绍 单页面应用和多页面应用 单页面 无刷新更新页面提升用户体验 seo优化较差，因为seo可以识别html中的内容，不能识别js中的内容"}, {"id": "7005459840852033549", "title": "模拟时钟", "desc": "模拟一个表盘时钟，打开默认是本地时间。通过控制css的transform属性实现的。本文从布局和功能两个角度阐述如何实现。"}, {"id": "6844904080868016142", "title": "记好这 24 个 ES6 方法，用来解决实际开发的 JS 问题", "desc": "本文主要介绍 24 中 es6 方法，这些方法都挺实用的，本本请记好，时不时翻出来看看。 页面DOM里的每个节点上都有一个classList对象，程序员可以使用里面的方法新增、删除、修改节点上的CSS类。使用classList，程序员还可以用它来判断某个节点是否被赋予了某个CS…"}, {"id": "6953127598457094174", "title": "当面试官问Promise的时候他想知道什么", "desc": "前言 Promise 是一种异步编程的解决方案，可以认为它是一个容器，里面保存着未来发生的事件结果。 它有三种状态：pending（进行中）、fulfilled（已成功）和rejected"}, {"id": "6998483082621747214", "title": "原子化 JSS 方案 broken-css", "desc": "技术背景 对于现代 UI 框架来说，选择使用 JSS 逐渐让人可以接受，而不再被视为“大逆不道”之举。 然而， JSS 作为管理样式的前沿解决方案，有些 JSS 方案可以说被称为前沿的前沿。如： li"}, {"id": "7005576878190755847", "title": "【前端工程化】之模板工具plop初体验", "desc": "前端工程化之plop初体验：从概述、起步、初体验、进阶、总结等方面分享笔者代码及感受，记录一次在公司的技术分享。"}, {"id": "6975054664358166558", "title": "手把手教宝用 Tiny.js 写一个小游戏", "desc": "宝，下雨了。什么雨？红包雨呀，笨！本期带大家了解一款轻量级且接口友好的 HTML5 2D 互动引擎 Tiny.js。"}, {"id": "6995758112779010084", "title": "【今天你更博学了么】一个神奇的交叉观察 API Intersection Observer", "desc": "6000字只为讲明白一个API，前端开发肯定离不开判断一个元素是否能被用户看见，然后再基于此进行一些交互··· ···"}, {"id": "7005548716593512461", "title": "谁还不想自己做一张刮刮乐呢 原生 JS 实现刮刮乐", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 上文说自己也写一段代码试试，突然想试着实现一个刮刮乐，正巧碰到活动了，想着中秋节店家抽奖也一定用得上，那就顺便参加活动，一起做出来 成品展"}, {"id": "7000369432992153608", "title": "从V8源码角度来手撕JS数组方法底层实现（三）：filter", "desc": "依据ECMA规范，filter方法被设计成一个通用的方法，而不仅仅适用于数组，因此对于类数组，或者具备数组相关特性的对象，都能复用这个函数。"}, {"id": "6986639654724304927", "title": "带你“深入”防抖", "desc": "抖是什么？它啊，就像大炮，投一个炸弹，装一个炸弹。那个函数啊，触发一次就执行一次。 那么，防抖又是什么？就像机关枪，突突突，不管打多少次，打完子弹仓里都要重新装子弹。"}, {"id": "7006242417212915726", "title": "取出树结构中所有name的值（递归）", "desc": "// 需求：递归获取数据中的所有name // 需求：递归获取数据中的所有name // 需求：递归获取数据中的所有name // 需求：递归获取数据中的所有name"}, {"id": "6985137166468775950", "title": "三个ES2020新特性记录", "desc": "es6新的特性，逻辑 OR 赋值 (||=)，可选链操作符(?.)Optional chaining，空值合并运算符??"}, {"id": "6981278606169210916", "title": "一个动画演示代码的工具，答应我以后别再讲不清代码的逻辑了", "desc": "我之前因然叔文章中的动画影响，心血来潮写了一个小工具，可以通过编程的方式快速的设计整个动画，这次我想试试用这个工具还原一下“大帅老猿”的动画"}, {"id": "6844903695327445005", "title": "渔人和Rxjs的故事,这次一定教会你前端必会的Rxjs", "desc": "这篇文章可在我的 github 中查看，如果你觉得写的还可以，Please送上你宝贵的star. 写在最前面：你一定要坚持看完这个故事，看完你一定会懂Rxjs.千万不要觉得故事情节没有《盗墓笔记》好看而放弃。因为臣妾实在是只能把枯燥的程序写成这个很（挺）有（简）趣（陋）的故事了…"}, {"id": "6968658870202089479", "title": "React Fiber中的调度思想", "desc": "关于时间片分片逻辑，或许我们大概都有所了解过，在React Fiber中，使用RequestIdelCallback（rIC）用来进行操作优化和时间分片。那么是否了解过具体是如何进行进行调度的?"}, {"id": "6844903745835237389", "title": "又双叒叕是一个动态简历", "desc": "首先，因为动画是多段完成的，所以我们通过参数 content 传入的是一个二维数组，其中每个 item 存放着我们想要加载的内容和对应要求，如何让动画一段一段的完成呢？很自然的能想到 Promise 方法，通过 Promise.then() 来实现。 所以我们可以将这个需求抽象…"}, {"id": "6943113626756579365", "title": "js如何快速创建长度为n且值都为1的数组?", "desc": "最近公司找我这个菜鸟烧烤哥出春招题，第一次出题内心激动又紧张，生怕出的题别人答不上来。 抽取关键词：快速、长度为n值为1。 下面我们先看一下各种各样的备选答案。 这个答案谁都懂，for循环创建数组。 ...扩展运算符对数组来说可用于将数组转变成逗号分隔的参数序列，对于对象来说就…"}, {"id": "6939859047042514975", "title": "终于懂了原型链！", "desc": "本着包教包会，不会再看几遍就会，忘了再再看几遍也能想来的原则，将 JS 原型部分涉及概念一次说清楚。后续关于 ES6 Class 的语法糖也将基于本篇文章继续更新！ JavaScript 常被描述为一种基于原型的语言。每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法…"}, {"id": "6844903961091112968", "title": "为什么单页面的seo不友好？如何解决这一问题？", "desc": "在搜索引擎网站的后台会有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址是被称之为“搜索引擎蜘蛛”或“网络爬虫”程序从茫茫的互联网上一点一点下载收集而来的。随着各种各样网站的出现，这些勤劳的“蜘蛛”每天在互联网上爬行，从一个链接到另一个链接，…"}, {"id": "6844903885505576968", "title": "时区与JS中的Date对象", "desc": "1884年在华盛顿召开的一次国际经度会议（又称国际子午线会议）上，规定将全球划分为24个时区（东、西各12个时区）。规定英国（格林尼治天文台旧址）为中时区（零时区）、东1-12区，西1-12区。每个时区横跨经度15度，时间正好是1小时。 上述时区定义其实是理论时区。理论时区的时…"}, {"id": "6987688570592952350", "title": "JavaScript 基础系列之介绍 （一）", "desc": "简介 JavaScript 解释型或即时编译型的编程语言。是属于 HTML 和 Web 的编程语言。 JavaScript 是 web 开发者必学的三种语言之一： HTML 网页的内容 CSS 网页的"}, {"id": "6846687596555272200", "title": "项目经历准备篇——如何准备阿里巴巴P6/P7前端面试", "desc": "1. 功夫在日常 从上图可以看出，面试准备其实可以分为两个部分：第一个部分是日常工作中对自己负责项目的抽象、提效、数据化表达；不断反思如何用技术的手段提升业务价值，就是我们日常常说的技术为业务赋能；第二个部分才是决定面试后，开始的基础技术的准备/简历的准备等。 我们在日常的工作…"}, {"id": "6982803237216714788", "title": "不可不知的知识---js中常用的数组遍历", "desc": "日常工作和学习必须掌握的Array相关方法，本文列举了日常经常用到的方法，助你在工作和学习中所向披靡"}, {"id": "6997329572265984037", "title": "Slatejs富文本框架学习", "desc": "Slatejs富文本框架学习 CYEditor Demo slatejs介绍 核心概念 editor.children slatejs展示的内容结构，是一棵树，根节点就是editor.children"}, {"id": "6933383637500952590", "title": "Css in Js", "desc": "各种技术只负责自己的领域，不要混合在一起，形成耦合。对于网页开发来说，主要是三种技术分离。 并且大家会说，尽量不要写\"行内样式\"（inline style）和\"行内脚本\"（inline script）。 React 是组件结构，强制要求把 HTML、CSS、JavaScript…"}, {"id": "6901352015222276104", "title": "如何在JavaScript中获取屏幕，窗口和网页大小", "desc": "浏览器的各种尺寸是javaScript中比较容易混淆的概念，下面我会在本文中解释这些概念并且通过具体示例告诉大家如何访问它们。各位客官看好叻🍵 screen.width：屏幕的宽。 screen.height：屏幕的高。 screen.availWidth：可利用的宽，等于屏…"}, {"id": "6998896717634469902", "title": "JavaScript笔记 | 浅析call、apply、bind", "desc": "基本介绍 call、apply、bind是Function上的三个方法，他们都是在给定的作用域中调用函数。先来看一下他们的基本语法。如下"}, {"id": "6993309167926640647", "title": "学习canvas之入门一个贪吃蛇", "desc": "随着H5的到来，很多新特性都让人眼前一新。其中，canvas就是一个非常有用的特性，基于canvas我们可以完成图表、游戏等工具的实现。"}, {"id": "6995786434766438407", "title": "通俗易懂 JavaScript 代码优化实践", "desc": "在这篇短文中，将会介绍一些在开发过程中一些简单实用的方法来改进你的代码，减少冗余代码，降低代码的复杂度。"}, {"id": "6967357289971843109", "title": "在JavaScript中使用对象来优化if/else和switch", "desc": "用JavaScript编写复杂的条件总是有可能创建一些相当混乱的代码，很长列表的if/else语句或switch会使代码变得臃肿。那么如何去优化很多if/else或者switch的代码呢？同时需要避免"}, {"id": "6999548207466283016", "title": "如果你还没实现过Promise", "desc": "文章一步步实现写一个符合Promise A+的Promise，虽然老生常谈的话题，但还是要时常回顾。如果你还没有手写过 Promise，或者你想温习下 Promise 的实现，获取你可以看看这边文章。"}, {"id": "6994785566793400350", "title": "获取GET和POST数据以及读取响应请求文件", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 用户发送数据请求的时候，常见的方式是GET和POST请求，无论是发送GET还是POST，其数据都在请求内容对象request中 获取GET数"}, {"id": "6950265675159978021", "title": "浏览器储存（cookie、localStorage、sessionStorage和IndexDB）", "desc": "前言正片开始前端的储存方式存储类：缓存类：cookie的一些小秘密Cookie 的构成：Cookie 的限制性：Cookie 的优缺点：cookie是如何产生的：创建cookie读取cookie删除c"}, {"id": "7002921261814939661", "title": "【译】5 个 JavaScript 的字符操作库", "desc": "处理字符串可能是一项繁琐的任务，因为我们需要考虑许多不同的用例。举例来说，像将字符串转为驼峰格式这样简单的任务就需要好几行代码来实现。上方的代码片段是在 Stack Overflow 中最受好评的答案"}, {"id": "6844903966522736648", "title": "5 个 JS 不良编码习惯，你占几个呢", "desc": "这些都是不良编码习惯的征兆。 在这篇文章中，我描述了JavaScript中常见的5种不良编码习惯。重要的是，本文会给出一些可行的建议，如何的摆脱摆脱这些习惯。 JavaScript是一种松散类型的语言。 如果使用得当，这是一个好处，因为它给你带来了灵活性。 大多数运算符+ - …"}, {"id": "6903325147420164104", "title": "我的代码简洁之道", "desc": "1.通过条件判断给变量赋值布尔值的正确姿势2.在if中判断数组长度不为零的正确姿势3.同理，在if中判断数组长度为零的正确姿势4.简单的if判断使用三元表达式5.使用includes简化if判断巧用数"}, {"id": "6994600790954688520", "title": "大话原型链", "desc": "提起它就头痛，永远在似懂非懂间徘徊，这就是笔者对原型链的感受；而突然有一天你无意间发觉它是 “怎么来的” 的时候，你会发现，呦，原型链不过如此。"}, {"id": "6844904186354597895", "title": "如何让你的JavaScript代码更优雅", "desc": "写了好多年的JavaScript代码，你的代码是不是可以更加优雅？下面整理了一些优化代码的建议，大家可以酌情做一下参考，希望能给到大家一些帮助。 回 false，因为它们是不同类型的值。 由于相等和不相等操作符存在类型转换问题，而为了保持代码中数据类型的完整性，推荐使用全等和不…"}, {"id": "6918720683807604744", "title": "【七日打卡】 Vue项目架构团队自动化资产生成的管理思考", "desc": "在之前总结我对Vue项目团队开发的一些基本配置封装分享文章中，我们已经对大部分的常见封装都做出了处理，从API约定式到Model数据层，这类行为都赋予了项目更加自动化的处理方式，使团队前端工程师不需要关注生成，而只需要注意代码结果和代码质量，从而得到更多实践上得意义。 同时，对…"}, {"id": "7002594855436156936", "title": "浅析JS线程与浏览器事件循环机制", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 什么是 JS 线程 要了解什么是 JS 线程，首先我们应该大概了解一下进程与线程的概念。 对于浏览器，根据官方针对浏览器的介绍，有这么一句描"}, {"id": "7005479077985550373", "title": "《JavaScript 设计模式与开发实战》—— 发布订阅模式", "desc": "发布订阅模式 发布——订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都将得到通知。 现实中得发布订阅 中秋节快到了，前端超市的月饼被各个前端大"}, {"id": "6979372959550930951", "title": "ES6 class", "desc": "ES6 class 类（class）是ECMAScript 中新的基础性语法糖结构,但实际上它背后使用的仍然是原型和构造函数的概念。"}, {"id": "7003675821340622885", "title": "Ajax和HTTP状态码", "desc": "Ajax技术是前端中不可或缺的技术，通过Ajax与服务器取得连接，可以得到服务器返回的数据。如何判断服务器返回状态成功与否?就需要前端小伙伴儿了解Ajax以及http状态码的知识。一起来看看吧~"}, {"id": "6844903553765474311", "title": "2017 年崛起的 JS 项目", "desc": "和 2016年 一样，又到了我们回顾 2017年 Javascript 领域发展与变化的时候。 通过对比各项目过去 12 个月在 GitHub 上新增 star 数量，来评估其在 2017 年度的受关注程度，进而选出 2017 年度 JavaScript 领域崛起的明星项目。 …"}, {"id": "6985146482248646670", "title": "🍉学习JS不得不知的原型原型链、闭包和异步!", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 写在前面 一、原型和原型链 谈起原型和原型链我们要清楚一点： JS是一门基于原型继承的语言。 那么，这里就要介绍一"}, {"id": "6844903616172539917", "title": "发布订阅模式，在工作中它的能量超乎你的想象", "desc": "再到现在的vue中，emit和on方法。他们都似乎不约而同的自带了发布订阅属性一般，让开发变得更加高效好用起来 就这两点吗？没错，点不在多，够用就行。我们都知道有一句很著名的谚语，罗马不是一天建成的 当然，胖子也不是一天吃成的。所以我们要想实现一个自己的发布订阅模式，以后在工作…"}, {"id": "7004740931593191461", "title": "JavaScript：数据类型", "desc": "数据类型 JavaScript 数据类型有 7 种。 6 种简单类型：Undefined、Null、Boolean、Number、String、Symbol 1 种复杂类型：Object BigInt"}, {"id": "6997980011118460942", "title": "每天一题，mixin", "desc": "题目 实现mixin函数，该方法类似于Object.assign，递归合并其他来源对象自身和继承的可枚举属性到 target 目标对象。"}, {"id": "6982539214332100639", "title": "JS 原生方法原理探究（八）：如何手写实现 JSON.stringify()？", "desc": "这是 JS 原生方法原理探究系列的第八篇文章。本文会一步一步教你手写实现 `JSON.stringify()` 方法"}, {"id": "6993992079525298190", "title": "每天一题，includes", "desc": "实现includes函数，判断当前数组是否包含传入的值。 具体实现 实现思路 参数： array（Array）：被查询的数组； value（*）： 需要查找的值； fromIndex （Numb"}, {"id": "6998892770387558414", "title": "this指向问题", "desc": "this指向的方式 改变this指向 1.使用bind 2.let self = this 3.立即执行函数(function(j) {})(i) bind、apply、call 在说区别之前还是先总"}, {"id": "6868138778306412552", "title": "【ES6基础知识】promise和await/async", "desc": "我觉得这2篇文章知识点有点重复，因为边总结边思考肯定有交集，所以我觉得文章质量：没有最好，只有更好。 有新的知识点后面继续补上，也欢迎指正。 1. 基本用法 p1是一个 Promise，3 秒之后变为rejected。p2的状态在 1 秒之后改变，resolve方法返回的是p1…"}, {"id": "6995887556692967432", "title": "重温ES6系列之“函数的扩展-函数参数默认值的位置、函数的length属性”", "desc": "1. 函数参数默认值的位置 通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上 这个参数是没法省略的。 上面代码中，有默"}, {"id": "6940531182706622500", "title": "面试官: 来, 手写一个promise", "desc": "但是JavaScript绝非我们传统的编程中的多线程开发, 可以同时做多件事情, 因为是单线程处理, 所以实际上, 如果JavaScript引擎正在处理任务, 那其他事情他还是处理不了的. ... ..."}, {"id": "7004748084374831117", "title": "你需要知道jsconfig.json 都在这里啦", "desc": "无意见发现一个没有用到ts的vue项目出现了一些有关ts的类型检查的问题，思来想去也没发现是哪里配置的问题，偶然发现与其他项目不同的是多了一个jsconfig.json的文件，在留底之后果断给删除了，"}, {"id": "6970970366374215693", "title": "forEach、map和for循环", "desc": "forEach 没有返回值 改变数组情况 下面来看几个例子： 这里原数组并没有发生改变。 这里修改item的值，依然没有修改原数组。 当修改数组中对象的某个属性时，发现属性改变了。其他值依旧没有改变。"}, {"id": "7000737588952694791", "title": "JS内存泄露", "desc": "内存泄漏就是由于疏忽或错误造成程序未能释放那些不再使用的内存，照成内存的浪费。不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。"}, {"id": "7005109474121744391", "title": "哪些常用的数组和对象的方法", "desc": "javascript 中常用的数组与对象方法，文章将持续更新。喜欢的朋友请给我点个赞谢谢谢谢谢谢谢谢谢谢谢谢大家"}, {"id": "6845166891061739528", "title": "手撕 Promise", "desc": "理解一个东西最好的办法之一就是动手自己写，So，他（Promise）来了。废话不多说，来看如何实现。 接下来，我们要一一撕下他的伪装，揭开他的真面目。 Ok，fine，接下来，我们来实现她的三种状态。 那么Promise应该是初始状态。我们将上面代码执行测试一下，得到结果如下：…"}, {"id": "6991273870661517342", "title": "JavaScript里的with语句你知道吗？｜8月更文挑战", "desc": "最近看别人的代码的时候，发现用到了with语句，感觉实在陌生，查了一下文档，结果在文档上看到的第一句就是【不建议使用with语句，因为它可能是混淆错误和兼容性问题的根源】。虽然不建议使用，但感觉至少还"}, {"id": "6995343051925225479", "title": "JavaScript 系列之 this（二）", "desc": "[JavaScript 系列之 this｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6961402149511102501", "title": "JavaScript 高阶函数", "desc": "甚么是高阶函数？ 甚么是函数柯里化？ 甚么又是compose函数？ --------本文为你一一解答"}, {"id": "6867335238905921543", "title": "如何设计一个JavaScript插件系统，编程思维比死磕API更重要", "desc": "WordPress有插件、 jQuery有插件、Gatsby、Eleventy和Vue也是如此。 插件是库和框架的常见功能，并且有一个很好的理由：它们允许开发人员以安全，可扩展的方式添加功能。这使核心项目更具价值，并建立了一个社区——所有这些都不会增加额外的维护负担。太好了！ …"}, {"id": "6993095232350847013", "title": "JavaScript的内存和内存管理", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 内存管理 V8 内存限制 64 位为 1.4GB，32 位为 0.7GB V8 之所以限制了内存的大小，表面上的原因是 V8 最初是作为浏览"}, {"id": "6844904142087913486", "title": "【JavaScript】必须要会的手写Promise", "desc": "可以看到，状态已经改变了，里面的值也是成功的结果和失败的原因。then方法有两个参数，第一个参数是成功时执行的，第二个参数为失败后执行的，then的链式调用和数组等是一样的，每次执行后会返回一个Promise实例。如果成功后，第一个then中成功的函数为null，它会继续向下查…"}, {"id": "6994219025999872008", "title": "【重学JS】坚持学习,巩固基础-day9-封装函数", "desc": "☆☆☆ 今天的内容(封装函数 实现具体功能) 重要!! 也是最最基本能力要求! ☆☆☆ 可作为初学者的学习路线, 可参考一下, 学习进度也不是特别赶! 持续更新"}, {"id": "6931749943359062023", "title": "思想篇 - 通过 hooks 的出现，反思组件化开发存在的问题", "desc": "前言声明：此文不包含和hooks相关的所有的内容因为在react项目当中使用了hooks，vue2.x项目当中没有hooks，在现有的开发模式当中我们运用最多的还是组件化开发模式，但是在日渐复杂的业务"}, {"id": "6992107694572175390", "title": "js 冷门知识 - null 和 undefined 为何要兼得", "desc": "前言 本系列将分多篇文章介绍 js 相关的“冷门知识”，这里的“冷门知识”是指大部分开发者都不曾留意过的知识点，亦或者是意料不到的知识点。这些知识点对现实中的面试、开发也许没有很大的帮助，甚至压根没任"}, {"id": "6961758227876970504", "title": "在Javascript应用程序中执行语音识别", "desc": "语音识别是计算机科学和计算语言学的一个跨学科子领域。它可以识别口语并将其翻译成文本，它也被称为自动语音识别（ASR），计算机语音识别或语音转文本（STT）。 机器学习（ML）是人工智能（AI）的一种应"}, {"id": "6949814782862032909", "title": "JavaScript之走近原型链", "desc": "解析原型链原型链是JavaScript这门语言设计的十分有意思的地方之一。掌握原型链是学好JavaScript的关键之一。"}, {"id": "7002609960701919240", "title": "Chrome插件实现鼠标点击烟花特效", "desc": "Chrome浏览器插件实现页面鼠标点击烟花效果 写在前面 效果如上图，鼠标点击之后页面会从底部发射一道烟花，在鼠标点击处绽放开来。 准备工作 1.了解浏览器插件制作方法 chrome扩展：manife"}, {"id": "6850037265541005325", "title": "精读《Typescript 4》", "desc": "随着 Typescript 4 Beta 的发布，又带来了许多新功能，其中 Variadic Tuple Types 解决了大量重载模版代码的顽疾，使得这次更新非常有意义。 上面例子中，Arr 类型告诉 TS T 与 U 是数组类型，再通过 [...T, ...U] 按照逻辑顺…"}, {"id": "6991701322638721032", "title": "Rule - 快速处理表单数据｜ 8月更文挑战", "desc": "这个轮子主要的目的就是脱离复杂冗余的表单验证，拥抱新世界，咳咳。 主要的写法是参考了laravel的validator类。 采用了3个类来分别处理不同的内容，比如Rule类，Field类，以及Validator类。 其中Rule是入口，Field是保存字段数据，Validato…"}, {"id": "6887538204266725384", "title": "你必须要知道的前端状态管理器", "desc": "随着React和Vue等异步框架的广泛运用，前端状态管理器逐渐成为前端开发比不可少话题。形如React有倍受欢迎的Redux，再如Vue标配的状态管理器Vuex，都是业内相对成熟的状态管理器，那么我们接下来就用原生javascript来实现一个状态管理器。 主要包含两个方面：第…"}, {"id": "6981422139580612645", "title": "日常开发vue指令的使用 ", "desc": "什么vue指令 除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要"}, {"id": "7000889807719104549", "title": "JavaScript知识点回顾（二十七）——混入（二）", "desc": "这是我参与8月更文挑战的第二十七天，活动详情查看：8月更文挑战 显式混入 由于JavaScript不会自动实现复制行为，所以我们需要手动实现复制功能。"}, {"id": "6998404634683375653", "title": "JavaScript必备基础-预编译与立即执行函数", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 预编译 简单理解记忆 函数声明整体提升 系统会把函数提升到逻辑的最前面 变量 声明提升 这两句话不能解决的问题 未经声明的变量归windo"}, {"id": "6999293969381195812", "title": "JS Map与WeakMap对象的介绍与实践", "desc": "Map对象以插入的先后顺序，存储键值对（key-value）形式的数据，任意数据类型都可以作为key或者value。"}, {"id": "6844903874659090445", "title": "需要知道的JS的日期的知识，都在这了", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS中的 Date 很奇怪。当我们需要处理日期和时间的时候比较麻烦，经常借助像date-fns和 Moment 这样的库。 但是我们并不总是需要使用库。如果知道要注意一些总是，日期实际上可以非常简单。接下介绍有…"}, {"id": "6993887179646697503", "title": "JavaScript 无法获取响应 header 的 Content-Disposition 字段", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 问题： 发送协议请求一个文件流，需要在回包里拿到响应头里的 Content-Disposition 字段的值，从中分离出文件名。 但是通过查"}, {"id": "6920456879973859342", "title": "《带你入门前端工程》开源了", "desc": "这是一本关于前端工程化的小书（4W 字左右 ）。项目地址： 前端工程化，其实是软件工程在前端方面的应用。什么是软件工程？来看一下百度百科的定义： 换句话说，工程化的目的就是为了提升团队的开发效率。例如大家所熟悉的构建打包、性能优化、自动化部署等知识，都属于工程化的内容。 我写这…"}, {"id": "6844904105937207304", "title": "【图文详解】200行JS代码，带你实现代码编译器（人人都能学会）", "desc": "对于前端同学来说，编译器可能适合神奇的魔盒🎁，表面普通，但常常给我们惊喜。 编译器，顾名思义，用来编译，编译什么呢？当然是编译代码咯🌹。 将 TypeScript 转换为 JavaScript 代码。 and so on... 使用场景非常之多，我的双手都数不过来了。😄 …"}, {"id": "6942880039897825294", "title": "深入理解js数据类型与堆栈内存", "desc": "在JavaScript中，它的内存分为三种类型：代码空间、栈空间、堆空间，其中代码空间用于存放可执行代码。 本文带大家来深入理解下栈空间与堆空间（堆内存与栈内存），欢迎各位感兴趣的开发者阅读本文。 object：typeof instance === \"object\"，任何构造…"}, {"id": "6844903597264601102", "title": "移动端适配问题解决方案", "desc": "随着时间的发展，现在基本上人手一部手机的低头族。做为前端开发的程序猿，在开发移动端web应用的时候，对面一堆各色尺寸不一样的屏幕，就有点淡淡的忧伤。 很明显我们所要实现的就是在上述如此之多的屏幕,都能实现UI大大出的视觉图上的效果。而要实现这样的效果主要有两个难点 各屏幕的适配…"}, {"id": "6995184504281399309", "title": "void 0 有什么意义？undefined竟然是可变的？", "desc": "哈喽，大家晚上好哇！今天我们来谈一下JavaScript中一个很有意思的现象，void 0 有什么意义？undefined竟然是可变的？"}, {"id": "6913344728515739661", "title": "聊一聊这个总下载量3603w的xss库，是如何工作的？", "desc": "上篇文章这一次，彻底理解XSS攻击讲解了XSS攻击的类型和预防方式，本篇文章我们来看这个3603w的XSS-NPM库（你没有看错就是3603W次， 36039K次，36,039,651次，数据来自https://npm-stat.com）,相信挺多小伙伴在项目中，也用到了这个库…"}, {"id": "6844903889553063949", "title": "前端必知必会ES5、ES6的7种继承", "desc": "众所周知，在ES6之前，前端是不存在类的语法糖，所以不能像其他语言一样用extends关键字就搞定继承关系，需要一些额外的方法来实现继承。下面就介绍一些常用的方法，红宝书已经概括的十分全面了，所以本文基本就是对红宝书继承篇章的笔记和梳理。 在创建Child实例的时候，无法向Pa…"}, {"id": "6844903671445061640", "title": "webpack4 多页面，多环境配置", "desc": "项目需求制作为新的app的分享页，故需要制作多页面应用，那既然app是新的，这边我们也要更新上，经过多方考察（度娘）下，综合了一些他人的优点并结合项目实况产生了此文。 本文省去了部分初级操作。 一. webpack.base.conf.js 基本上就是一些变量的引用，简单解释一…"}, {"id": "6994016585375547429", "title": "js类型转换", "desc": "这是我参与8月更文挑战的第二天，活动详情查看：8月更文挑战 前言 如果对js的类型做简化，可以分为两种类型，分别是引用类型和值类型，Object和Function是引用类型，其他是值类型。 正文 从值"}, {"id": "6998804921298452511", "title": "【Promise】入门-同步回调-异步回调-JS中的异常error处理-Promis的理解和使用-基本使用-链式调用-七个关键问题", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 今天学习Promise，是之前看B站视频的一个笔记加拓展，末尾有链接"}, {"id": "6844904151332159501", "title": "面试官：说说原型链和继承吧", "desc": "JavaScript 中没有类的概念的，主要通过原型链来实现继承。通常情况下，继承意味着复制操作，然而 JavaScript 只是在两个对象之间创建一个关联（原型对象指针），这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。 在控制…"}, {"id": "6844904182860742670", "title": "小蝌蚪日记：通过console.log高仿FBI Warning", "desc": "。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。"}, {"id": "6920239138893627406", "title": "这次,十分钟把宏任务和微任务讲清楚", "desc": "每个层级的宏任务,都对应了他们的微任务队列,微任务队列遵循先进先出的原则,当全局同步代码执行完毕后,就开始执行第一层的任务。同层级的微任务永远先于宏任务执行,并且会在当前层级宏任务结束前全部执行完毕"}, {"id": "6999881312878198797", "title": "集合引用类型之Array方法(一)", "desc": "创建数组【from】 数组空位【, undefined】 数组索引【length属性】 检测数组【instanceof和Array.isArray方法】 迭代器方法【fill和copyWithin】"}, {"id": "6969985606709428232", "title": "js - 了解一下this", "desc": "this 提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将API设计得更加简洁并且易于复用。随着使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱，使用 this 则不会这样 ​"}, {"id": "6844903983052488717", "title": "渲染树的形成原理你真的很懂吗?", "desc": "原因一：该文章系列不管你是前端开发者，还是后端开发者在面试中经常会被问到一个问题 “从浏览器输入url到页面显示经历了哪些？” 一个非常常见的问题，看了该系列绝对能惊到面试官，可能就因为这一道面试题就收了你呢！嘿嘿。 原因二：自己主要是后端方向，该系列文章也是为了学习记录，方便…"}, {"id": "7000754813801775111", "title": "JavaScript 数据类型之 Symbol、BigInt", "desc": "在JavaScript中，我们已知有5种基本数据类型：`String`、`Number`、`Boolean`、`Undefined`、`Null`。"}, {"id": "6844903943147880455", "title": "5分钟带你领略:某跳动公司面试出镜率最高的算法之一——虚拟十叉树建模问题", "desc": "首先，这个确实不是标题党，接下来我保证讲的都是硬干货。也许有人会觉得非常偏非常难非常怪，但是我要说的是，对于技术社区来讲，系统知识理论的学习自有去处，我觉得社区里面应该注入一些新的血液，分享一些有信息量的内容，而不是将明明已经整理得非常好的知识点翻来覆去地“炒现饭”并以此来占据…"}, {"id": "6902339728977166344", "title": "我把世界上第一个 JS 引擎编译回了 JS", "desc": "1995 年，在我刚满周岁的时候，大洋彼岸有个叫 Brendan Eich 的人在十天内创造了一门今天我正以它谋生的编程语言，这就是 JavaScript。 这个快速创造 JavaScript 的故事在程序员群体中广为流传。但对于今天的人们来说，或许已经没有多少人记得（甚至体验…"}, {"id": "6959816493689372709", "title": "深入浅出正则表达式", "desc": "如果你需要处理复杂的字符串相关的功能，可以考虑使用正则表达式。 正则有两种作用，一种是查找字符，另外一种是替换字符 在学习正式的概念之前，我们通过一系列的案例来快速了解正则，然后再深入讲解一些正则的概"}, {"id": "6951242993978310687", "title": "手写JS之深浅拷贝🧐", "desc": "前言作为前端开发人员，当我们在进行项目开发统筹的过程中，对于从后端传输过来的JavaScript数据，我们经常会对此进行对象拷贝，数组拷贝等数据操作，因为这有助于之后的数据对比及恢复数据。像这样类似于"}, {"id": "6844903624552759304", "title": "[杂谈]了解一些额外知识，让前端开发锦上添花", "desc": "在前端学习里面，很多人都是注重学习代码（html，css，js）。或者是一些框架，库（jquery，vue，react）,或者是各种工具（webpack，gulp）。在以往的文章里面，或者自己和别人交谈，都有建议过别人多练，不要闷头就写代码，多深入了解当中的原理，学习其中的思想…"}, {"id": "6999274455675437064", "title": "Ttypescript 与 Javascript 的区别", "desc": "TypeScript是ECMAScript 2015的语法超集，是JavaScript的语法糖。而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。"}, {"id": "7000759669371174925", "title": "url的操作之pushState、replaceState和popstate", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 上一节我们说地址栏跳转的时候，谈到了浏览器会缓存用户访问url序列，我们可以通过浏览器的前进后退按钮或者通过js提供的方法，访问这个序列里的"}, {"id": "6986900328843051022", "title": "移动端横竖屏视口检测", "desc": "1、不同视口的获取方法 2、JavaScript检测横竖屏 3、CSS检测横竖屏 4、meta标签属性设置 5、meta标签属性设置设置刘海屏&底部小黑条 设置安全区域与边界的距离 注：constan"}, {"id": "6961285125548015646", "title": "浅谈JavaScript中的堆栈和闭包", "desc": "JavaScript中的栈只会存放一些原始类型的小数据，例如 Undefined、Null、Boolean、Number 和 String、Symbol等，而在JavaScript中的堆中存放引用类型"}, {"id": "6844904167404748814", "title": "带你了解路由的底层原理，用原生js手写一个路由", "desc": "目前，前端的主流Vue、React、Angular这些，他们都提供了有关路由的插件，一般来说，这些路由插件总是提供两种不同方式的路由方式： Hash 和 History。具体内容将会在下文中提到，下面就让我们围绕这两种方式来简单手写一个路由： 这样，hash模式的路由就基本实现…"}, {"id": "6998734091671568391", "title": "node学习之前置知识点", "desc": "package-lock.json文件 lock 顾名思义就是用来锁定依赖包版本的。 package-lock.json 文件会 固化 当前安装的每个软件包的版本"}, {"id": "7000673460045250567", "title": "js核心笔记第五天", "desc": "正则 1，正则表达式的基本使用 正则表达时通长使用在 切割，替换，验证 等等 最简单的正则表达式：关键字原文 'no' --> /no/ig i：忽略大小写 g：全部 备选字符集：/[备选字符集]/ "}, {"id": "6999832904096448526", "title": "一道统计题到reduce方法的学习", "desc": "Array.prototype.reduce() 该方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"}, {"id": "6994223107842146334", "title": " 进阶教程 1. 闭包、this、和面向对象", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 1： 闭包 闭包定义； 2. 面向对象解释及创建对象的方式； 3. this 关键字详解；"}, {"id": "6969838280251146271", "title": "图片加载失败,重试三次, 若失败则使用占位图片", "desc": "需求描述: 解决思路 基本实现 1. 监听图片的error事件 2. 开启一个定时器,假设规定时间内执行一次,即重试 3. 得有一个计数器, 来判断重试的次数 4. 当重试次数大于我们设定的值,关闭定"}, {"id": "6994783654467600420", "title": "关于JS数组的奇巧淫技", "desc": "我在这里总结下数组的常用方法和奇巧淫技（奇巧淫技主要是reduce~）。 数组操作首先要注意方法，后说使用误区。"}, {"id": "6995566705841799181", "title": "JavaScript 中的函数和变量提升", "desc": "在 JavaScript 中有多种定义函数的方法。我们将看看以下三种方法： 函数声明 函数表达式 箭头函数 乍一看，上述定义函数的方式看起来是一样的。然而，两者之间存在着微妙的差异。 本文将着重关注函"}, {"id": "6968652392972140575", "title": "JS 原生方法原理探究（一）：深入解析如何实现 call、apply 和 bind", "desc": "这是 JS 原生方法原理探究系列的第一篇文章。本文会介绍如何实现 call、apply 和 bind 方法。关于这几个方法的具体用法，MDN 或者站内的文章已经描述得很清楚，这里不再赘述。"}, {"id": "6972515237987614751", "title": "跨域以及解决方案", "desc": "1.如何区分是同源还是跨域？ 俩个地址对于，如果：协议、域名、端口号三者有一个不一致，都是跨域请求 跨域错误： 2.跨域在项目中的场景和意义？ 1）开发的时候是跨域的，但是项目部署上线后是同源的[现在"}, {"id": "6844903593825452039", "title": "注释那些事儿 - 前端代码质量系列文章（一）", "desc": "好的注释可以提高代码的可读性和可维护性，从而提高代码质量。 那么什么是好的注释？如何写出好的注释？本文将从注释的目的和原则出发对 JS 注释进行探讨。 我们写注释，是为了给代码的读者（包括我们自己，也可能包括机器，如 jsdoc）看，帮助读者阅读理解代码并进行维护。 「如无必要…"}, {"id": "6844903864571789326", "title": "再谈table组件：固定表头和表列", "desc": "书承上文，在前文【Vue进阶】青铜选手，如何自研一套UI库中介绍了Vue组件库的开发细节，举例实现了button、table等组件的开发。在Ange这个UI库中，我实现了一个内容高可定制的表格组件：可固定表头和表列，内容则自行定义。 从作用对象来看，这些需求又可归为影响布局（E…"}, {"id": "6875267044678303757", "title": "构建前端代码预提交检查(Husky、Lint-staged)", "desc": "大家是否有过类似的经历，接手多人开发的项目，因为每个人的代码风格不一致，使得变得难以阅读，比如分号、混合单引号和双引号的字符串声明，或者糟糕的缩进? 或者一些问题导致项目运行出错。 所以代码一致性非常重要，无论是在开发阶段还是在维护阶段，我们都知道eslint能很好保证代码风格…"}, {"id": "6844904104997699592", "title": "HTML5 地理定位+地图 API：计算用户到商家的距离", "desc": "背景最近在做一个类似支付宝口碑商家的功能模块，其中有个功能就是计算出用户与商家的距离，如下图：支付宝口碑商家页面截图思路分析1、商家选取店铺地址，将坐标经纬度存入数据库；2、移动端定位当前用户坐标经纬"}, {"id": "6924153977881755655", "title": "JavaScript数据结构 - 栈", "desc": "大家好，我是前端图图。今天就来聊聊栈的数据结构，因为最近在学数据结构和算法，我也把写文章当作一次复盘。下面废话不多说，开始吧！ 栈是一种后进先出原则的有序集合（就是后面进去的先出来的意思）。添加或待删除的元素都保存在栈的同一端，叫作栈顶（栈的末尾），另一端叫作栈底。在栈里面，新…"}, {"id": "6924595215546187790", "title": "喜大普奔，微信终于支持外网打开小程序啦！", "desc": "千呼万唤始出来，微信小程序终于支持以URL Scheme的形式从外部唤起了。 long long ago~ 我们只能在微信内的网页中使用微信开发标签-小程序跳转按钮 &#x3C;wx-open-launch-weapp>打开小程序，只有这样一种单一的场景。 而在实际的业务中，我…"}, {"id": "7000363007763021831", "title": "【TypeScript】类型拓展", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 TS类型拓展 （1）联合类型 联合类型表示取值可以为多种类型中的一种 使用|来分隔多种类型 适用于不确定具体是什么类型，但能确定是哪几种类"}, {"id": "6933870965285715982", "title": "数组扁平化的几种实现方案", "desc": "数组扁平化在开发中经常遇到，有时需要对嵌套多层对feed进行平铺等就会用到。本文总结了数组扁平化常见的几种方案。 比较下来，flat方法比较简洁，是官方标准未来的趋势。如果考虑到兼容性可以使用toString或者数组some + [].concat(...arr)的方法，这两个…"}, {"id": "6859194104946016269", "title": "2019年的6个JavaScript用户认证库", "desc": "“两周内给我建一个用户认证系统”是现在研发团队中常见的一句话。由于种种原因，这个任务一直是留给团队中的一个开发人员去解决的。 一方面，你确实不想浪费很多时间。另一方面，你担心这种信息可能最好由自己内部编写的服务来处理，以便以后更好的扩展。 随着网络上出现新的教程（是一个很好的开…"}, {"id": "6967727936216498190", "title": "三种类型检查方法：typeof、instanceof 和 Object.prototype.toString", "desc": "typeof 运算符 typeof 运算符返回参数的类型。当我们想要分别处理不同类型值的时候，或者想快速进行数据类型检验时，非常有用。"}, {"id": "6844903785651781646", "title": "Vmo前端数据模型设计", "desc": "Vmo 是一个用于前端的数据模型。解决前端接口访问混乱，服务端数据请求方式不统一，数据返回结果不一致的微型框架。 Vmo 主要用于处理数据请求，数据模型管理。可配合当前主流前端框架进行数据模型管理 Vue,React,Angular。 接口请求混乱，axios.get...随处…"}, {"id": "6844903812734550024", "title": "跨域多方位解决方案", "desc": "跨域问题来源于浏览器同源策略的限制问题导致的。 正是因为浏览器要出于安全考虑。如果缺少了同源策略，浏览器很容易受到XSS和CSRF等攻击。(XSS与CSRF可以单独成为一个额外的知识点) 此时会导致一个域名下网页的操作就可以直接拿到另一个非同域名下网页的任何信息,或者一个网页可…"}, {"id": "6956838682930364447", "title": "你必须知道的4种JavaScript数组方法", "desc": "Array.prototype.map() Array.prototype.filter() Array.prototype.find() Array.prototype.reduce()"}, {"id": "6994367415085858829", "title": "Node 使用 达梦数据库", "desc": "Node.js 连接 达梦数据库 Demo。dmdb 1.0.5537。 Node.js 连接 达梦数据库 Demo。dmdb 1.0.5537。"}, {"id": "6994230399958253575", "title": "js实现图片拖拽，定点缩放，旋转 （一）", "desc": "js实现图片拖拽，定点缩放，旋转（一）之-----拖拽篇，主要是基于offseLeft/offsetTop,clientX/clientY,onmousedown/onmousemove......"}, {"id": "6995208538943389732", "title": "边学边译JS工作机制--29.设计模式简介以及最佳实践", "desc": "总览 设计模式已经成了标准方案，来解决一些开发中的通用问题。我认为这些设计模式已经成为行业标准了 学习设计模式不仅会让你成为一个更牛掰的开发者，同时也会让你更好的理解一些框架是如何创建的。大多数的框架"}, {"id": "6889068972542459917", "title": "🐲【4】Shutdown HTTP系列-HTTPS篇", "desc": "之前，有一位大佬和我说过这么一句话：\"网络知识在一定程度上决定了你的上限\"。 这次请给霖呆呆一个机会，跟着我的脚步👣从1开始学习它。另外我整理的HTTP系列基本都会附有一个面试时的浅答与深答的配套答案，浅答是为了让你们更好的记住，深答保证你确实理解了浅答中的知识点。 1. H…"}, {"id": "6844903619913842696", "title": "React中型项目的优化实践", "desc": "整个项目大概有60+个页面，用到的组件大概150+，package里面的依赖大概有70+个，应该勉强算得上是一个中型的React的项目了。 打包时间约150s，打包完之后的资源gzip之后约1.2m，尽管之前分离了一些公用依赖，但是index包的体积达到了600+还是令人难以接…"}, {"id": "6844903727699247118", "title": "写一个菜鸟裹裹小程序吧", "desc": "新手写小程序并不简单，这是我的第一次尝试学习到了很多。最近双十一过后，每天不是拿快递就是去拿快递的路上，翻开手机应用里的菜鸟裹裹查看快递是很方便的，当我在微信端搜索菜鸟裹裹小程序时，却没有发现，于是便想自己动手仿app版写一个菜鸟裹裹的小程序，对其中的快递查询物流跟踪很有兴趣。…"}, {"id": "6961721568128925727", "title": "vue 项目中如何监听 localStorage的变化", "desc": "来源 问题的来源是看到掘金某位大佬发的一个链接，具体链接地址便携小空调 在页面中有一个独立遥控器的功能，在另外一个窗口修改了温度和模式后，当前页面会实时的更新，抱着好奇的态度研究了一下子，发现是通过本"}, {"id": "6986838213713199141", "title": "基础教程—— 1. JS 数据类型和变量", "desc": "javascript基础教程：js 数据数据类型、变量、类型转换、类型检测、typeof 运算符及其局限性；"}, {"id": "6844903875632168968", "title": "3分钟教你用原生js实现具有进度监听的文件上传预览组件", "desc": "本文主要介绍如何使用原生js，通过面向对象的方式实现一个文件上传预览的组件，该组件利用FileReader来实现文件在前端的解析，预览，读取进度等功能，并对外暴露相应api来实现用户自定义的需求，比如文件上传，进度监听，自定义样式，读取成功回调等。 该组件仍有需要完善的地方，在…"}, {"id": "6871889981116252173", "title": "「开源项目」8款最受欢迎的地图API和javascript库", "desc": "在创建您的第一个地图应用程序之前，先来了解一下主流的地图API和JavaScript库。 我们今天使用的大多数应用程序都将在地图上显示实时位置和数据。例如在线商品到我们使用地图的外卖递送应用程序。地图被广泛用于表示数据，我们总是希望能有更多的交互性。有许多不同的库和插件可供地图…"}, {"id": "6864916875390910472", "title": "【译】自己实现 document.execCommand 富文本编辑器核心 API", "desc": "我是 wangEditor 的作者，目前正和开发团队做 V4.0 的重构。V4.0 发布之前的代码在 we-next ，发布之后可访问官网 。 了解富文本编辑器的同学都知道，document.execCommand 是实现网页富文本的核心 API 。但遗憾的是 document…"}, {"id": "6994722847822184462", "title": "给类的每个实例分配唯一id", "desc": "学习vue源码的过程中，发现尤大经常给类的实例加上了唯一的id，后期判断或者添加的时候非常便捷，我觉得是个很好的技巧，本文就说下这个小技巧。 怎么分配id 其实分配id，操作起来很简单，如下所示就搞定"}, {"id": "6997564864952533029", "title": "ES6之class类", "desc": "“这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战” 本文通过构造函数方法 与 class 进行对比来讲解，这样会更好理解点 1，定义 class 的本质是 function，它可以看作一"}, {"id": "6844903680076939272", "title": "实战项目之自动简历", "desc": "一个可以自动播放书写过程简历，主要运用原生JS和CSS3的知识点。 既要开始，也要结束。想办法取消闹钟 运行一下。黑人问号脸——我的换行没啦？？？ 但是在CSS中这样的语法是不允许的。 我们需要让代码默认是平平无奇的样子，然后再增加高亮效果。这样活增加视觉的观赏性。 我们需要在…"}, {"id": "6999892389380767775", "title": "[JS]11.闭包应用（单例模式）", "desc": "1. 基于闭包实现早期的模块化思想 单例设计模式（模块化概念） AMD => require.js CMD => sea.js CommonJS => Node本身就是基于这种规范实现 ES6 Mod"}, {"id": "6972882923468881950", "title": "一文带你搞懂前端必备数据结构 -- 链表", "desc": "嘟嘟嘟~~发车啦，快来和博主一起飙车啦！😊文末附上力扣相关题目。关于链表的全部讲解，图文解析超级详细！"}, {"id": "6844903807600558094", "title": "11 个最好的 JavaScript 动态效果库", "desc": "当我想要在网上找一个简洁的 Javascript 动效库时，总是发现很多“推荐”的库都是缺乏持续维护的。 经过一番研究，我收集了 11 个最好的库，你可以用在自己的项目中。另外我还添加了一些有用但是缺少持续维护的库。 提示：可以用 Bit 来共享你的组件，用它们构建多个项目并与…"}, {"id": "6997389291928174599", "title": "【从头学前端】15-可能有你不知道的RegExp对象的用法", "desc": "本篇文章介绍了JavaScript中的RegExp对象的用法，包括了创建RegExp对象，RegExp对象的属性和方法。"}, {"id": "6844903594181787656", "title": "用CSS Houdini画一片星空", "desc": "要问2018最让人兴奋的CSS技术是什么，CSS Houdini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome 65才正式支持。 这3个例子都是用了Houdini里面的CSS Paint API。 第1个例子如果使用传…"}, {"id": "6844903684531322888", "title": "调试第一步：让强大的console家族助你一臂之力", "desc": "console相比大家一定不陌生，平时项目中用的最多的就是console.log()方法吧。但是console相关的方法有很多，涉及的调试面板的相关内容比较广泛，彻底弄清楚它们并在项目中合理使用，有助于我们更好的开发和调试。 如果没了解过console的，似不似惊呆了，cons…"}, {"id": "6996266494006919205", "title": "LeetCode有效的括号 | 算法练习系列", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 作为一个开发人员，我们日常开发的过程中应该都用过格式校验工具，比如我就是用的ESLint,它可以帮我们校验书写的格式是不是正确，比如"}, {"id": "6977661347945267214", "title": "每天 10 分钟，学习 JavaScript —— （二十）对象创建模式", "desc": "方式一：Object构造函数模式 创建步骤 先创建空Object对象，再动态添加属性/方法 适用场景 起始时不确定对象内部数据 缺陷 语句过多 方式二：对象字面量模式 创建步骤 使用{}创建对象，同时"}, {"id": "6996296120393531422", "title": "JavaScript 常用数据类型及使用方式 -2", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 昨天我们把基本数据类型 String Number Boolean Null Undefined 的定义以及"}, {"id": "6995573217880457246", "title": "js实现在可编辑的div中粘贴图片", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 在富文本编辑器中粘贴图片是很正常的操作，之前我也实现过简易版的富文本编辑器，今天借着这个机会，重拾旧日知识，手动实现在可编辑的div"}, {"id": "6995101528717525023", "title": "【js小技巧】utils集合", "desc": "背景 utils的一些函数，可以直接复制使用，简单方便，没必要每次自己写后者网上搜。 parseTime 从url上获取参数 getQueryObject 222 333 deepClone uuid"}, {"id": "6989399265730625566", "title": "JavaScript高级程序设计【面向对象-创建对象】", "desc": "工厂模式抽象了创建具体对象的过程，用函数来封装以特定接口创建对象的细节。但是没有解决对象识别问题。 var person1=new Person(\"name\",32); var person2=new"}, {"id": "6921538717878321165", "title": "一个侧边栏导航组件实现思路", "desc": "在这篇文章中，我想和大家分享我是如何为 web 原型化一个 Sidenav 组件的，这个组件是响应式的，有状态的，支持键盘导航，可以使用和不使用 Javascript，并且可以跨浏览器工作。 构建一个响应式导航系统是很困难的。有些用户使用键盘，有些用户使用强大的台式机，还有一些…"}, {"id": "6996916305995497480", "title": "05 javascript-闭包应用-柯里化", "desc": "闭包应用系列 “你在实际开发中，对闭包有哪些应用？”—— 紧随闭包基础题、编码题之后的，往往就是这样一个看似可以自由发挥，实则并不好得分的问题。面试官抛出这个问题的目的，主要是考察你编码的熟练度和知识"}, {"id": "6890206996008534030", "title": "来一起玩老虎机吗？", "desc": "老虎机的整体外观样式还是比较好写的，对老虎机的外观布局如果有兴趣的话可以直接参考代码，小编就不一一介绍了。文章主要介绍的是老虎机中间三个小格子和机身动画的一些实现要点。（读者想实操的话也可以自己找一张背景图当作老虎机的背景，这里小编只是自己好奇而已所以就用各种基础布局和样式实现…"}, {"id": "6993689669728731150", "title": "前端小白不迷路-今天谈下promise.all()方法", "desc": "一进页面会同时发多个请求数据的接口，想要实现在接口还没请求回来之前页面显示loading状态，数据请求回来后，loading隐藏的效果，因为接口都是异步请求，没有先后之分，这样的话如何实现呢？"}, {"id": "6963493064740454414", "title": "理解 JavaScript 中的原型与原型链", "desc": "大多数编程语言是基于类的语言，而 JS 是一种基于原型继承的语言。 1、为什么会有原型和原型链？ 首先，先来看一下为什么会有原型和原型链，原型和原型链能带来什么好处。"}, {"id": "6844903664327344135", "title": "我写了一个面向源码阅读者的 UI 框架（基于 Vue）", "desc": "轱辘 UI 是一个不太一样的 UI 框架。 本 UI 框架是一个「面向源码阅读者」的框架。如果对你有帮助，请不要吝惜你的 star。 也就是说，我制作这个框架的目的就是让前端新人学习轮子的制作思路。所有代码都追求可读性。 （抱歉，由于制作非常耗时，所以视频是收费的。不过项目搭建…"}, {"id": "6844903953528782861", "title": "给自己搭个脚手架", "desc": "想做个测试或者某个东西的demo，需要新建一个项目。如果从 0 开始，要配置一大堆东西，耗时长；如果直接用现在流行的一些脚手架，如vue-cli等，黑箱操作，你需要阅读文档，也很难全局看清里面到底有哪些内容... 在某个项目里，新建一个组件，其实有些固定的文件都要建，如xxx.…"}, {"id": "6922782392390746125", "title": "Token一般存放在哪里？", "desc": "Token 其实就是访问资源对凭证。 一般是用户通过用户名和密码登录成功之后，服务器将登录凭证做数字签名，加密之后得到的字符串作为token。 Token 其实就是访问资源对凭证。 一般是用户通过用户名和密码登录成功之后，服务器将登录凭证做数字签名，加密之后得到的字符串作为to…"}, {"id": "6895793195624431630", "title": "有点意思的gif动图生成平台开发实战(二)", "desc": "笔者之前利于业余时间开发了一个gif动图生成平台, 具体开发背景我也在上一篇文章手把手教你撸一个能生成抖音风格动图的gif制作平台中介绍过了, 我们今天继续来实现该平台, gif动图平台的实现方式比较将完全用前端的手段来实现, 所以大家在接下来的内容中会发现很多有意思的前端插件…"}, {"id": "6989223265805795335", "title": "call,apply,bind,new方法的实现原理", "desc": "1.call方法的使用原理 1.function.call(obj, arg1, arg2, ...)这个函数调用的时候this的指向改变了(this绑定为传入的第一个参数) 2.从call函数传入的"}, {"id": "6886602875225833480", "title": "一文搞懂JS系列（六）之微任务与宏任务，Event Loop", "desc": "了解JS为什么是单线程，搞懂为什么会有同步异步的任务划分，搞懂微任务与宏任务都有哪些，Event Loop中微任务和宏任务哪一个先执行，以及最后小试牛刀，文末一题"}, {"id": "6999223636187938853", "title": "JavaScript中ActiveXObject操作本地文件夹", "desc": "这是我参与8月更文挑战的第16天 在Windows平台上, js可以调用很多Windows提供的ActivexObject,本文就使用js来实现文档处理, 和使用js编写ActiveX做一个简单介绍."}, {"id": "6996173600885571591", "title": "过什么七夕，来看闭包小萝莉🤪", "desc": "这是我参与 8 月更文挑战的第 2 天，活动详情查看： 8月更文挑战 emmm，今天七夕，像这种重大的节日，作为一名专注于单身工作研究的单身狗，怎可能会在今天出去逛gai看大街上看那些恩爱的男女给老夫"}, {"id": "6844903713195163655", "title": "用Vue开发仿旅游站webapp项目总结 （上）", "desc": "此文章，仅是做完项目后的个人觉得可以总结下来的操作/思路，接触vue不久的朋友应该会有收获。此项目也才是萌新做的第二个Vue项目，使用了脚手架工具（ vue-cli 2.x 非 3 ），前辈老手们有时间看的话，有写得不好的地方还请多多指导！~ 仅实现项目首页、项目详情页、城市列…"}, {"id": "6844903655473152008", "title": "浅析setTimeout与Promise", "desc": "关于JavaScript异步编程，前文解析过了JavaScript并发模型，该并发模型基于事件循环。正巧又在Stackoverflow上回答了一个关于setTimeout与Promise执行顺序相关的问题，于是总结这一知识点，与更多读者分享，同时完善JavaScript异步编程…"}, {"id": "6844903599034630151", "title": "MongoDB的基本用法", "desc": "MongoDB是一个基于分布式文件存储的开源数据库系统。 MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。 如果出现waiting for connectio…"}, {"id": "7006657602188754980", "title": "Sentry Web 性能监控 - Metrics", "desc": "Apdex 是一种行业标准指标，用于根据您的应用程序响应时间(response time)跟踪和衡量用户满意度(satisfaction)。Apdex 分数提供特定 transaction 或端点中满"}, {"id": "7007313553774362654", "title": "智慧物流可视化，能否解决购物节后的爆仓危机？", "desc": "99大促已经升级为继618年终大促、双十一之后的第三大购物节，号称为“99划算节”，你都买了啥？每次大促，物流信息迟迟不更新、商品运送慢已经成为经常被买家吐槽的话题。 物流爆仓产生的原因是什么？爆仓意"}, {"id": "6930419481835470861", "title": "2021前端学习路径书单—自我成长之路", "desc": "正式学习前端大概 3 年多了，接触前端大概 4 年了，很早就想整理这个书单了，因为常常会有朋友问，前端该如何学习，学习前端该看哪些书，我就讲讲我学习的道路中看的一些书，虽然整理的书不多，但是每一本都是那种看一本就秒不绝口的感觉。 以下大部分是我看过的，或者说身边的人推荐的书籍，…"}, {"id": "7001428883782238244", "title": "node - 定时调度 （上篇）", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 node.js中的定时器是一种会在一段时间后调用给定的函数的内部构造。何时调用定时器函数取决于用来创建定时器的方法，以及node.js时间"}, {"id": "7004991104894402573", "title": "「每日一题」分割平衡字符串", "desc": "1. 题目描述 在一个 平衡字符串 中，'L'和'R'字符的数量是相同的。 给你一个平衡字符串s，请你将它分割成尽可能多的平衡字符串。 注意：分割得到的每个字符串都必须是平衡字符串。 返回可以通过分割"}, {"id": "7007036046407892999", "title": "JavaScript运行机制：Event Loop", "desc": "JavaScript运行机制：Event Loop 概述 在刚开始学习JavaScript时，我经常会产生两个问题： JavaScript是一门单线程语言，那如何实现异步任务？ 同步任务和异步任务的执"}, {"id": "6999797569056423967", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（九）", "desc": "感激相遇 你好 我是阿ken JavaScript 中的日期对象需要使用 new Date() 实例化对象才能使用，Date() 是日期对象的构造函数。在创建日期对象时，可以为 Date() 构造函数"}, {"id": "6882576431503638536", "title": "1分钟将vscode撸成小霸王", "desc": "开始会先介绍该插件的安装使用方式，然后简单介绍下主要的开发步骤。 安装和其他的vscode插件一样，直接在插件市场搜索 ‘小霸王’ 点击安装即可。 remote部分是远程资源，右键想要玩的游戏然后点击download下载，下载完毕后会到local列表，点击即可运行。 local…"}, {"id": "6977214179149086751", "title": "一个月面试大厂，中厂，小厂的总结｜2021 年中总结", "desc": "2021 晒出年中总结，面试都能抢答的总结，努力称为某业务上专家，某技术上的专家，每天6点一起学习，加入我的学习吧！"}, {"id": "6942492146725290020", "title": "推荐 7 个 Vue2、Vue3 源码解密分析的重磅开源项目 👍", "desc": "1. 为什么要学习源码 ? 阅读优秀的代码的目的是让我们能够写出优秀的代码。 不给自己设限，不要让你周围人的技术上限成为你的上限。 其实就跟我们写作文一样，你看的高分作文越多，写出高分作文的概率就越大。 基于现在的程序员工作模式(模块化开发，只需要拿到需求做自己的部分)，别说看…"}, {"id": "7004720068999266312", "title": "利用nrm管理并快速切换npm源registry，快到碗里来~", "desc": "什么是nrm nrm 是一个 npm 源管理器，允许你快速地在 npm 源间切换。 官网介绍 https://www.npmjs.com/package/nrm 之前博客教大家怎么配置太极内网的npm"}, {"id": "6999497067550736391", "title": "我的掘金前端周刊  8月16日-8月22日", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。欢迎关我的掘金前端周刊专栏"}, {"id": "6916930617166807054", "title": "快过年了，用JS让你的网页放🎆烟花吧", "desc": "马上就要过春节了，大城市里依然是不准燃放烟花这种空气污染的东西的，想念小时候在自家院子里放花的快乐时光，大城市里的小朋友们是体会不到这种快乐了。但作为前端工程师，这难不倒我们，下面就教大家如何用JS在网页里放烟花。 在 codepen 里搜索 “fireworks” 可以搜到各…"}, {"id": "6996828267068014600", "title": "哪是大神？只是用他人七夕约会时间，整理「JS避免内存泄漏」罢了", "desc": "前言 大家七夕节过得快乐吗？快乐就好，你么快乐就是我快乐。呜呜呜 哪有什么天才？他只是把别人七夕约会的时间，用在写文章上 ——陆逊 （是的，江东陆逊） 大家好，我是林三心，上一篇我给大家讲了赠你13张"}, {"id": "7003285499628486670", "title": "JavaScript 模块化方案 详细综述", "desc": "JavaScript 模块化对前端工程化来说是一个很重要问题，CommonJS、AMD、UMD，这些你都知道吗？ 还有 ES6从语言层面实现的模块化解决方案，你熟悉它们吗？"}, {"id": "6994220333985185828", "title": "我的掘金前端周刊 第七周 8月2日-8月8日", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。欢迎关我的掘金前端周刊专栏"}, {"id": "6935232082482298911", "title": "从输入URL开始建立前端知识体系", "desc": "浏览器主进程：只有一个，主要控制页面的创建、销毁、网络资源管理、下载等。 第三方插件进程：每一种类型的插件对应一个进程，仅当使用该插件时才创建。 GPU进程：最多一个，用于3D绘制等。 浏览器渲染进程(浏览器内核)：每个Tab页对应一个进程，互不影响。 这里我们只考虑输入的是一…"}, {"id": "6994169182216519710", "title": "「干货」一份小白前端可视化学习指南——附思维导图", "desc": "前言 因为群里粉丝一直要求我写一篇可视化入门指南，今天他来了。其实说起前端可视化，大家所能想到的就是各种图表，大屏。这种看着贼炫酷，而笔者呢工作也一直从事3D前端开发工作，慢慢对图形产生了兴趣。但是呢"}, {"id": "7003585746065948703", "title": "项目常用：axios封装", "desc": "什么是axios？ 特性 从浏览器中创建 XMLHttpRequests 从 node.js 创建 http 请求 支持 Promise API 拦截请求和响应 转换请求数据和响应数据 取消请求 自动"}, {"id": "6994634734634696734", "title": "es6解构赋值 [a,b] = [b,a]的几个问题", "desc": "相比于传统方法需要一个额外变量来进行值交换，使用解构进行值交换十分方便。但是我想到几个问题： 1、解构赋值有没有节省空间呢？ 首先思考如下操作： 可以分析出解构赋值的过程应当为 以从左到右的顺序计算右"}, {"id": "7002106372200333319", "title": "「Nodejs万字进阶」一文吃透异步I/O和事件循环", "desc": "一 前言 本文讲详细讲解 nodejs 中两个比较难以理解的部分异步I/O和事件循环，对 nodejs 核心知识点，做梳理和补充。 送人玫瑰，手有余香，希望阅读后感觉不错的同学，可以给点个赞，鼓励我继"}, {"id": "7000779250785583141", "title": "学透CSS-还在用JS计数吗？来试试纯CSS计数器！！！", "desc": "文章目录会在标题前面加上数字编号的，大部分的实现方案是什么呢？我一开始是在遍历的时候加上数字编号的，不过这样的JS代码很多。需要判断层级数很麻烦。直到我发现纯css的counter属性！"}, {"id": "7000613481816784927", "title": "React 系统复习如何做最高效（8.24直播总结 + 百道高频面试题整理）", "desc": "一 前言 哈喽，大家好，我是 我不是外星人 👽 ，8月24号，我作为分享嘉宾，线上参与了一场 《React 系统复习如何做最高效》 的技术分享，接下来我把直播的内容汇总分享给大家。在分享的过程中，也枚"}, {"id": "6990028188080406558", "title": "Vue3 源码解毒 & PK React17", "desc": "封面妹纸是作品！请不要再！再！再！举报我。咱和辣些低俗的妖艳货不是一个世界的。 另外，难得的感悟和心得文。有需要的可以进来瞅瞅。"}, {"id": "6996825009280778253", "title": "教女朋友学前端之深入理解JS引擎", "desc": "宏观视角看 V8、V8 架构演进史、V8 的工作机制以及 V8 核心模块。虽然 CPU 的指令集是有限的，但我们软件工程师编写的程序不是固定的，正是这些程序最终被 CPU 执行，才有了改变世界的可能。"}, {"id": "7003232769182547998", "title": "跨域，不可不知的基础概念", "desc": "跨域这两个字在前端开发者身上都会碰到的，无论你在工作上或者面试中无可避免会遇到这个问题。尤其是最初搭建项目的时候。但单纯只是为了面试背几个方案，也无足轻重，重要是理解透彻，懂得跨域的前因后果"}, {"id": "7006993763721543716", "title": "LeetCode第22天🐱‍🏍", "desc": "678. 有效的括号字符串 贪心 设置minCount和maxCount两个计数器 遍历字符串s，维护maxCount的值，当maxCount<0时，即当前位置之前的')'数量大于'('与'*'的数量"}, {"id": "6999276491276025893", "title": "判断是否为数组的 JavaScript 方法总结", "desc": "我们在日常开发中，常常有判断某值类型的需求，今天我们总结一下常见的几种用来判断是否为数组的 JavaScript 方法。"}, {"id": "7003270737502928903", "title": "一文搞懂jsBridge的运行机制", "desc": "jsBridge就是js和原生通信的桥梁，本文不讲概念性的东西，而是通过分析`jsBridge`源码，来从前端角度大概了解一下它是怎么实现的。"}, {"id": "7007057047707451428", "title": "【事件循环】彻底理解Event Loop", "desc": "目录 JS异步是怎么实现的 GUI线程 JS引擎线程 定时器线程 事件触发线程 异步HTTP请求线程 一、JS异步是怎么实现的 二、 GUI线程 三、JS引擎线程 这个线程就是负责执行JS的主线程，前"}, {"id": "7005497283399647268", "title": " Day3：Github项目每日优选之react-use", "desc": "React hooks我相信很多同学已经门清了，这个库实现了基本上我们常见的所有自定义Hooks,需要哪个直接查看源代码复制到你的项目中，二次在改一改，你的同事夸你666呢😁"}, {"id": "6996810586914816014", "title": "「教你用十分钟开发一款提升工作体验的vscode插件🌿 」console, debugger一键删除｜自定义代码模板", "desc": "vscode作为我们最常用的ide之一，我们每天和它打交道的时间肯定不少，因为vscode-extension扩展能力强大，于是我们可以通过开发简易的插件对我们的ide进行增强，用以提高我们工作体验～"}, {"id": "7003689525507538958", "title": "如何使用 ES6 新增 Symbols 代替 null", "desc": "我特别喜欢用变量名和 `symbol` 标签，我可以传达缺失值的领域含义。在我的项目库中，它代表着 `promise` 没有被解决。"}, {"id": "7001488184433442823", "title": "『面试的底气』—— 设计模式之状态模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7001303652673519624", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十三）", "desc": "感激相遇 你好 我是阿ken getElementById() 方法是由 document 对象提供的用于查找元素的方法。该方法返回的是拥有指定 id 的元素，如果没有找到指定 id 的元素则返回 n"}, {"id": "7007053787290402830", "title": "前端闲聊系列（1）：打包器的开发环境和library打包", "desc": "现在开启一个新的系列，主要是对前端常见的知识点从较高层次谈一下理解，不会过多深究细节。 概览 根据打包使用场景的区分，环境可以分为开发环境和生产环境，在各个环境的我们想达到的目的不一样，因此要做的事也"}, {"id": "7001658214127239205", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十四）", "desc": "感激相遇 你好 我是阿ken innerHTML 在使用时会保持编写的格式以及标签样式；而 innerTest 则是去掉所有格式以及标签的纯文本内容；textContent 属性在去掉标签后会保留文本"}, {"id": "6944863057000529933", "title": "「react进阶」一文吃透react-hooks原理", "desc": "之前的两篇文章，分别介绍了react-hooks如何使用，以及自定义hooks设计模式及其实战，本篇文章主要从react-hooks起源，原理，源码角度，开始剖析react-hooks运行机制和内部原理，相信这篇文章过后，对于面试的时候那些hooks问题，也就迎刃而解了。实际r…"}, {"id": "7007292929190428702", "title": "LeetCode第23天🐱‍🏍", "desc": "447. 回旋镖的数量 n个距离点m相等的点，可得到n*(n-1)个回旋镖.用哈希图存储key距离和value出现次数. 70. 爬楼梯"}, {"id": "7007225629259071519", "title": "「每日一题」回旋镖的数量", "desc": "1. 题目描述 给定平面上n对互不相同的点points，其中points[i] = [xi, yi]。回旋镖是由点(i, j, k)表示的元组 ，其中i和j之间的距离和i和k之间的距离相等（需要考虑元"}, {"id": "6984061616530653197", "title": "ES6知识学习系列（一）", "desc": "es6新增知识点的简单学习与记录，通过学习。了解到自己对于知识学习的不足之处，后期定会自我反思，加强知识点 的精细化程度。"}, {"id": "6844904040455733262", "title": "Vue with TypeScript", "desc": "最近重新看了下这个文章，发现这个文章没有标明 ts 预发预发高亮，于是把预发高亮加了上去，还有就是编写本文的环境是 Vue 2.5.*，可能对于现在的环境有些不太合适，里面有些插件或者一些实现方式，可能有些改变，或者 Vue 官方已经有不同的实现方式，所以本文章还是当做参考，毕…"}, {"id": "6844903502485929992", "title": "localStorage 还能这么用", "desc": "只知道用 localStorage 存储键值对，那你就 out 了"}, {"id": "6844903733252341773", "title": "如何用 es6+ 写出优雅的 js 代码", "desc": "兼容 IE ？不存在的好吗。 其实使用新语法配合 babel 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。 下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。 var 命令会发生”变量提升“现象，即变量可以在声明之前使…"}, {"id": "6961709667038789669", "title": "你真的了解预编译吗？", "desc": "JS运行代码通常分为三步 1.语法分析 2.预编译 3.解释执行 那么什么叫做预编译呢？ 即代码被执行前需要做的准备就称为执行上下文或者预编译 我们先来看一段代码 试问这段代码的五个console.l"}, {"id": "6844904009065578510", "title": "Code Review主要Review什么?", "desc": "Code Review, 意即代码审查,是指一种有意识和系统的召集其他程序员来检查彼此的代码是否有错误的地方. 提高代码质量和可维护性, 可读性等. 查漏补缺, 发现一些潜在的问题点等. 最佳实践, 能够更好更快的完成任务的方法. 知识分享, Review他人代码时, 其实也是…"}, {"id": "6844903981848756231", "title": "精读《Nuxtjs》", "desc": "Nuxt 是基于 Vue 的前端开发框架，这次我们通过 Introduction toNuxtJS 视频了解框架特色以及前端开发框架的基本要素。 视频介绍了 NuxtJs 的安装、目录结构、页面路由、导航模版、asyncData、meta、vueX。 这是一个入门级视频，所以上…"}, {"id": "6885505824316194823", "title": "我们是如何搭建互动应用", "desc": "本文从前端的角度出发，简单地介绍了搭建互动应用的一种思路，提供了在线互动、中途加入两个场景的一种解决思路，最后简单介绍了互动应用在实践中的优化方向。通过阅读你可以了解到： 互动，即互相作用，互相交流。互动应用提供了一种用户互相交流的方式，互联网用户可通过打开应用同一页面，通过操…"}, {"id": "6963816595722338317", "title": "ES6(7)Set 和 Map 数据结构", "desc": "总结 1、Map和Set中对象的引用都是强类型化的，并不会允许垃圾回收。 2、Map和Set 的遍历顺序就是插入顺序 3、WeakMap和WeakSet都是弱引用，即垃圾回收机制不考虑 WeakSet"}, {"id": "6844903588762763277", "title": "面试小结--前端面试的几个雷点", "desc": "得益于‘金三银四’，在最近一段时间，面试了一些人，但是符合的寥寥无几。对于之前面试的情况，趁着项目开发前，还有一两天的闲余时间，发下牢骚。这些情况，可以说是一些面试雷点，有不建议的学习方式，有不建议的写简历方式，针对这些，下面简单写下，发表自己的个人看法，和大家共勉下。 这个应…"}, {"id": "6992392392527740941", "title": "《javascript高级程序设计》学习笔记 | 10.9-10.11.函数内部", "desc": "相关代码 → 10.9 函数内部 ES5 中函数内部有 2 个特殊对象 arguments 和 this，1 个内部属性 caller ES6 新增new.target属性 10.9.1 argume"}, {"id": "6867319399947681806", "title": "神秘的JS字符串隐写术", "desc": "字符串隐写术可以通过不可见的Unicode简单实现，对可见字符串进行不可见的加密拼接，对应的还有通过秘钥进行加密，通常在浏览器端，秘钥很容易被找到，而隐写术即使找到了，不知道原理也不容易破解。 此时有一个问题，因为类似1_1.json这种文件名很容易被人抓取到所有配置，因为完全…"}, {"id": "6994328546244034590", "title": "js运算符(逻辑位,移位)", "desc": "逻辑位运算符 逻辑位运算符：位与（&）、位或（|）、位异或（^）、非位（~） 在位运算中，数值 1 表示 true，0 表示 false，反之亦然 位与(&) 如果两个位都是1，结果为1，否则结果0 "}, {"id": "6844904081559912462", "title": "忍法，scroll 翻滚之术！", "desc": "在日常的开发中，我们对 scroll 这个单词肯定不陌生。 例如因为看不惯浏览器默认样式而用 JS 一顿猛如虎操作的 自定义滚动条 。 或者是嗖~一下就到顶的 回到顶部 。 又或者是想去哪点哪的 标题导航 。 但是在过去的开发中，要实现这些功能并不是那么轻松的一件事情。 例如我…"}, {"id": "6920508421200904200", "title": "这难道不是你期待的ES2021新特性吗？", "desc": "ES2020发布还没多久，但是更多的功能点已经安排上了，等待发布。TC39工作组负责处理这些新的功能点到新的ECMAScript标准版本。本篇文章将介绍已经在TC39 Stage4的功能点。TC39提案有以下4个阶段： 由TC39成员提议任何想法、修改、以前没有被提议的（或以前…"}, {"id": "6844903604038402056", "title": "LeetCode 算法题刷题心得（JavaScript）", "desc": "花了十几天，把《算法》看了一遍。然后重新 AC 了一遍 LeetCode 的题并记录下心得。"}, {"id": "6973498008360976398", "title": "JavaScript中的高阶函数", "desc": "这是我参与更文挑战的第三天，活动详情查看： 更文挑战 高阶函数 JavaScript 高阶函数是指以函数作为参数的函数，并且可以将函数作为结果返回的函数。 1. 高阶函数 接受一个或多个函数作为输入 "}, {"id": "6844903774390059016", "title": "前端学习算法1 ：老虎和羊，吃不吃问题（动态规划入门）", "desc": "走到最后一个台阶的前一个情况，只能有两种吧，就是从第11台阶走一步上来，或者从10台阶走两步上来，那么不管有多少走法走到了11阶假设是X种走法吧，假设是Y种走法走到了10阶，那么，走到12阶的走法一定是X+Y，这个是成立的吧。这就是最优子结构 那什么是边界呢？本例子中，走到第一…"}, {"id": "6994230406132269070", "title": "前端刷题路-Day75：子集（题号78）", "desc": "给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集..."}, {"id": "6844904031274565645", "title": "只用这 6 个字符，就可以写出任意 JavaScript 代码！", "desc": "你猜运行结果是什么？你可以自己去控制台试一下。 很多人都知道这个技巧，但是没有多少开发人员知道它到底是如何工作的。今天，我们就来看看它背后的执行原理。我们的目标是用这几个字符来写出字符串“self”。姑且用这个字符串向 Self 语言致敬，JavaScript 的灵感来源之一就…"}, {"id": "6917073600474415117", "title": "Facebook 重构：抛弃 Sass / Less ，迎接原子化 CSS 时代", "desc": "随着 Facebook 和 Twitter 最近的产品部署，我认为一个新的趋势正在缓慢增长:Atomic CSS-in-JS。 在这篇文章中，我们将看到什么是Atomic CSS（原子 CSS），它如何与 Tailwind CSS 这种实用工具优先的样式库联系起来，目前很多大公…"}, {"id": "6939691851746279437", "title": "字节跳动最爱考的前端面试题：计算机网络基础", "desc": "而 302 表示临时重定向，这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问，一般是访问某个网站的资源需要权限时，会需要用户去登录，跳转到登录页面之后登录之后，还可以继续访问。 301 类似，都会跳转到一个新的网站，但是 301 代表访问的地址的资源被永久移除了…"}, {"id": "7002832459133878309", "title": "Node.js 的 api 设计的源头：POSIX", "desc": "如果你用过 Node.js 的 api，会不会觉得奇怪，为什么 api 的名字是这样的： 比如创建目录： 创建进程： mkdir、fork、exec、spawn 等，这些名字是怎么起的？ 如果你用过 "}, {"id": "6994604265700327460", "title": "CSS 即将支持嵌套，SASS/LESS 等预处理器已无用武之地？", "desc": "最近，有一则非常振奋人心的消息，CSS 即将原生支持嵌套 -- Agenda+ to publish FPWD of Nesting，表示 CSS 嵌套规范即将进入规范的 FWPD 阶段。 目前对应的"}, {"id": "7007214672055107620", "title": "【译】Learn D3 入门文档：Animation", "desc": "引子 继 Learn D3: Shapes 第六篇，只是英文翻译，可修改代码的部分用静态图片替代了，想要实时交互请阅读原文。 原文：Learn D3: Animation 版本：Published M"}, {"id": "7005051519565299749", "title": "Eslint 的 fix 功能是怎么实现的", "desc": "我们知道 eslint 支持 fix，当添加了 --fix 参数部分 rule 可以自动修复问题。 有没有想过，这种功能是怎么实现的？ babel 也能转换代码，它和 eslint 生成代码的原理一样"}, {"id": "6950684708443258894", "title": "前端都是手写ECharts ?", "desc": "一、自定义的必要性     绘制的底层是强大的,我们所用的各端语言只是在现代UI追求的步伐中和用户喜好的交互中求同存异，抽取封装出自成个性风格的UI控件,当然面对万亿级别的客户各个平台的UI库出也不可"}, {"id": "6994707174819627039", "title": "获取文件blob流地址实现下载功能", "desc": "应用场景 该功能主要是通过读取文件流，处理blob流为浏览器识别地址并返回回调处理方法,来处理一些通用的post下载功能或者获取blob流地址进行其他操作的功能。例如：pdf预览"}, {"id": "7006161378121613343", "title": "JavaScript 中的树数据结构", "desc": ""}, {"id": "7004095065471582245", "title": "我们能用Puppteer做些什么", "desc": "背景 故事回顾 当有人说你页面有性能问题，该怎么办 上次产品嫌弃我页面加载太慢，我优化了一波，但是在优化中也遇到了不少糟心事 测试: 你怎么天天在测试环境瞎搞，你看看页面好几次都报错加载不出来，你能不"}, {"id": "7003524905245343774", "title": "JavaScript 中的复制粘贴操作", "desc": "在日常业务开发，比如复制后增加版权信息，点击复制，等场景中需要进行复制粘贴的操作，以下是几种实现方案。 Clipboard API Clipboard API 提供了响应剪贴板命令（剪切、复制和粘贴）"}, {"id": "6928677404332425223", "title": "阿里面试官的”说一下从url输入到返回请求的过程“问的难度就是不一样！", "desc": "年前准备换工作，总结了一波面试最频繁的面试问题跟大家交流。此文章是关于浏览器的常见问题，大概面试10家遇到6家提问类似问题（主要是大厂和中厂）。（面试的部分内容已经忘了，为了串联成一个完整的故事，增加可读性，20%的内容为虚构），目前入职滴滴出行成都团队。 你一看这种烂掉牙的问…"}, {"id": "6986613468975595556", "title": "前端是不是又要回去操作真实dom年代？", "desc": "写在开头 近期我有写两篇文章，一篇是:petite-vue源码解析和掘金编辑器的源码解析，发现里面用到了Svelte这个框架 加上最近React17，vite大家也在逐步的用在生产环境中"}, {"id": "7007352393645965320", "title": "JS 基础-对象", "desc": "对象 “普通对象（plain object）”，或者就叫对象。 字面量 文本和属性 一个对象属性由键值 可以通过delete 删除属性 方括号 访问属性 点符号 计算属性 //属性是不是固定，而是随机"}, {"id": "6997435434666033189", "title": "函数的底层运行机制", "desc": "平时在做项目的时候，除了完成业务逻辑代码的编写，我们也需要清楚的了解这一段js代码，在计算机底层是如何存储并执行的，不了解js的解释执行始末，真正遇到问题的时候，也只能一脸懵而已~"}, {"id": "7001400713385345038", "title": "浏览器中的JavaScript执行机制", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道前言 想要了解 JavaScript 的执行机制，我们可以从编译过程和内存管理来入手。"}, {"id": "6993898620063842341", "title": "使用javascript写shell脚本(三) 发起网络请求", "desc": "“这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战” 这是javascript写shell脚本的第三篇文章，之前文章的链接如下： javascript写shell脚本一 基础操作 javas"}, {"id": "6996595779037036580", "title": "前端模块化规范详细总结", "desc": "本文将目前前端主流模块化做了详细总结和用法介绍，助你了解不同的规范之间的区别，以及是如何帮助我们更加容易的开发和维护代码的"}, {"id": "7006111307296423973", "title": "数组常考方法（forEach,map,reduce,filter）", "desc": "数组的方法经常被面试官考到。为了避免答案七零八落，总结了常考数组常考的forEach,map,reduce,filter"}, {"id": "6965761736083243044", "title": "前端性能优化——图片篇", "desc": "在类电商类项目，往往存在大量的图片，如 banner 广告图，菜单导航图，美团等商家列表头图等。图片众多以及图片体积过大往往会影响页面加载速度，造成不良的用户体验，所以对图片进行优化势在必行。"}, {"id": "6882887469495402509", "title": "JavaScript 中 10 个需要掌握基础的问题", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JavaScript 是一种客户端编程语言。 全球超过90％的网站都在使用它，它是世界上最常用的编程语言之一。 因此，今天我们业讨论 10 个有关 JavaScript 的常见问题。 思路：首先，使用index…"}, {"id": "7001532985036144671", "title": "js项目中简单实现双向数据绑定", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 前言 双向数据绑定 指的是当对象的属性发生变化时能够同时改变对应的UI，反之亦然。换句话说，如果我们有一个user对象，这个对象有一个na"}, {"id": "6963855043174858759", "title": "实现一个简易的 npm install", "desc": "不同环境是怎么处理第三方包的，包下载工具（npm install 等）是怎么下载第三方包的，版本冲突、循环依赖问题怎么解决，这篇文章帮你梳理清楚思路。"}, {"id": "7000669310838390792", "title": "for -in和for of（详细）", "desc": "for-in 和 for-of 的用法和区别 通常我们遍历数组和对象时，都会选择for-in或者for-of去遍历，那么for-in和for-of的区别在哪呢？ 我们先来看看for-in: 我们遍历的"}, {"id": "6844904083405586446", "title": "（值得收藏）JavaScript工具函数大全", "desc": "为元素添加on方法为元素添加trigger方法转义html标签HTML标签转义跨浏览器绑定事件加入收藏夹提取页面代码中所有网址动态加载脚本文件返回顶部的通用方法实现base64解码确认是否是键盘有效输"}, {"id": "6990889410778628126", "title": "vue中  methods  watch和computed的区别", "desc": "首先，先说一下这几个不同在哪里，那当然是长得不一样啦~~~， 哈哈哈哈哈不开玩笑了，截下来进入正题。 介绍 methods : 挂载在对象上的函数，通常是 Vue 示例本身 或 Vue 组件 comp"}, {"id": "7001393749095874568", "title": "【babylonjs】babylonjs实践（十）--模型导入", "desc": "【babylonjs】babylonjs实践（十）--模型导入，模型相关，模型导入和使用，以及相关API，以及模型纹理的bug"}, {"id": "6994580698958921735", "title": "vue3+ts项目搭建和封装（上篇）", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 1. 首先，要确保自己的node版本 >= 12.0.0, 在命令行执行node-v就可以查看node版本 如果node版本低于12的话，"}, {"id": "6844903613790175240", "title": "网站性能优化实战——从12.67s到1.06s的故事", "desc": "作为互联网项目，最重要的便是用户体验。在举国“互联网+”的热潮中，用户至上也已经被大多数企业所接收，特别是在如今移动端快速发展的时代，我们的网页不仅只是呈现在用户的PC浏览器里，更多的时候，用户是通过移动产品浏览我们的网页。加之有越来越多的开发者投入到Web APP和Hybri…"}, {"id": "6844904084936327182", "title": "妙用CSS变量，让你的CSS变得更心动", "desc": "CSS变量又叫CSS自定义属性，为什么会突然提起这个很少人用到的东西呢？因为最近在重构个人官网，不知道为什么突然喜欢用上CSS变量，可能其自身隐藏的魅力，让笔者对它刮目相看。 谈到为什么会在CSS中使用变量，下面举个栗子，估计大家一看就会明白。 看完可能会觉得使用CSS变量的代…"}, {"id": "6924213159561691149", "title": "分享工作中常用的8款工具(工作效率嗷嗷提升)", "desc": "作为一名开发者那就没有不知道Github的，因为它是一个巨大的开源宝库，以及程序员和编程爱好者的聚集地，是每个程序员都会用到的必备工具。不过他的访问速度真的是太垃圾了，无论是页面加载速度还是clone速度。 GitHub加速插件是一款谷歌浏览器插件，安装起来非常简单。谷歌浏览器…"}, {"id": "6912307309574094855", "title": "时代变了，来看看你用的那些前端技术已经过时了", "desc": "首先技术过时是看你当前业务的场景的。比如说有些东西是需要用在 IE6 上的，那对于大部分人开发者来说它就是一个过时的技术，但是如果你的业务还需要服务到 IE6 的用户，那么这个技术对你就还是存在价值的。 今天我们聊得过时技术只针对于大部分人，先来聊聊性能优化中已经过时的东西。 …"}, {"id": "6998061573524684831", "title": "setup vs 5 react hooks,助你避开\"沟\"中陷阱", "desc": "序言 本文主题围绕setup来展开，既然提到了setup就离不开composition api这个关键词，准确的说setup是由composition api带出来的概览."}, {"id": "7002147865548029960", "title": "node项目开发(-)", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 NodeJS 项目 0. 初始化 1.1 创建项目 新建 api_server "}, {"id": "6993266347060756517", "title": "JavaScrip入门指南之“原型、原型链”（笔记三）", "desc": "六、原型相关属性学习 6.1-in关键字 定义：用来检查对象中是否存在某个指定的属性(不区分实例属性和原型属性)， 语法：\"属性名\" in 实例对象 用法：无论判断的成员是属于当前实例对象还是属于其原"}, {"id": "6844903584023183368", "title": "面试官:请你实现一个深克隆", "desc": "实现一个深克隆是面试中常见的问题的,可是绝大多数面试者的答案都是不完整的,甚至是错误的,这个时候面试官会不断追问,看看你到底理解不理解深克隆的原理,很多情况下一些一知半解的面试者就原形毕漏了. 我们就来看一下如何实现一个深克隆,当然面试中没有让你完整实现的时候,但是你一定要搞清…"}, {"id": "6926696239224324103", "title": "完全理解并实现Promise其实可以让你进步很多 （记录手写Promise过程）", "desc": "这是一个Promise最简单的用法，代码创建了一个Promise对象，传入一个executor执行函数，在某个时刻它会按顺序执行它的参数reslove和reject，然后resolve和reject的参数会作为Promise对象then的参数。了解了这些我们可以总结一下： 总的…"}, {"id": "6979876135182008357", "title": "手摸手带你彻底掌握，任务队列、事件循环、宏任务、微任务", "desc": "调用栈 Call Stack 正式阐述任务队列与事件循环，大概了解一下JavaScript是如何运行的： 在JavaScript运行的时候，主线程会形成一个栈，这个栈主要是解释器用来最终函数执行流的一"}, {"id": "6985825629950181390", "title": "50 天学习 50 个项目 - HTML/CSS and JavaScript", "desc": "👍 👍 👍 项目源代码，点击【Github 原文链接】 所有项目如下所示： # 项目 在线演示 01 Expanding Cards Live Demo 02 Progress Steps Live "}, {"id": "6993874628561092621", "title": "JavaScrip入门指南之“闭包、设计模式、常见的数据处理方式”（笔记六）", "desc": "一、闭包 1.1-函数外部如何访问局部变量 JS中每个函数都有自己的作用域，在当前函数中定义的变量，只能在该函数或该函数的嵌套函数中访问。如： 在开发中，如果需要在当前函数作用域外访问函数的局部变量能"}, {"id": "6996241669888671758", "title": "PC 端网页特效相关知识点总结", "desc": "1. 元素偏移量 offset 系列 2. 元素可视区client系列3.元素滚动scroll系列4. 动画函数封装以及节流阀概念"}, {"id": "7000386035070795806", "title": "JS算法之合并两个排序的链表及树的子结构", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 合并两个排序的链表 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。"}, {"id": "6955639559799439396", "title": "JavaScript数组reduce()函数的5个运用场景分享", "desc": "作为前端人，我们常常以数组的形式获取某种数据列表，并且需要将其转换为其他形式。在JavaScript中内置在所有数组中有一种非常强大的方法是使用reduce函数。最早提出是在ECMAScript 5."}, {"id": "6844904055232266253", "title": "用一道题目来验证你的JS功底,真香～", "desc": "当然了，只是我的解题方案，大家有什么更好的方案也希望可以在评论区不吝赐教，也可以扫码添加文末二维码在微信群进行交流。准备好了吗？Baby～"}, {"id": "7002236464515776549", "title": "URL 和 URLSearchParams", "desc": "以前我们要对地址栏中的URL地址进行分析处理，需要自己进行字符串分析。实际上，现在，浏览器已经有了内置的API接口可以对URL进行处理，这些API就是URLSearchParams()以及URL()。"}, {"id": "6994744877087096839", "title": "用正则实现将字符串“test1=12-3!test2=45.6”转为object，支持特殊字符", "desc": "背景 开发中比较常见的一个工具就是将字符串‘test1=123&test2=456’转为{test1: '123', test2: '456'},实现方法很多（字符串截取str.split('...'"}, {"id": "6995004685866254344", "title": "进阶教程 2. 变量提升", "desc": "一、变量提升（预解释）定义 在js代码执行之前，对所有声明的变量 进行提前带var和带function变量进行提前声明和定义（赋值）； 对于带var的进行提前声明，不赋值（变量声明时不赋值，变量的默认"}, {"id": "6967917603474014239", "title": "手动实现一个call", "desc": "手动实现一个call call JS中，有一些很神奇的存在，比如我们今天要讲到的call，它可以改变this指向，而且用法简单，预支类似的还有bind、apply，三者的区别在于，bind的返回值是一"}, {"id": "6949767145953689631", "title": "快速了解 JavaScript ES2019 的五个新增特性", "desc": "ES2019 规范是对 JavaScript 的一个较小的补充，但它仍然带来了一些有用的功能。本文将向你展示五个 ES2019 新增的特性，这些特性或许可以让你的编程轻松一点。"}, {"id": "6992268900368908301", "title": "简洁的步骤条设计｜8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 步骤条是一种常见的导航形式，在网页流程设计中随处可见步骤条的影子。"}, {"id": "6991282440073396238", "title": "ES2021新特性解读｜ 8月更文挑战", "desc": "一文带你快速了解Ecmascript2021最新特性～ 一个新特性从提出到最终纳入标准，需要经历5个步骤。截止目前，2021年已有5个新特性到了stage4：......"}, {"id": "6949350562278146078", "title": "JS - 判断对象是否为空对象的几种方法", "desc": "1.将json对象转化为json字符串，再判断该字符串是否为\"{}\"2.for in 循环判断3.jquery的isEmptyObject方法此方法是jquery将2方法(for in)进行封装，使用"}, {"id": "6929741893823643656", "title": "React中使用immer的实践探索｜牛气冲天新年征文", "desc": "对于MOBX，可能并不会陌生。而immer.js也是该开源项目作者的一大力作，用于immutable管理的实践。而今天，会对其做一个简单的小分享。 谈谈为什么会选择immer.js来作为immutable的解决方案，以及一些项目上的小实践。 在这里总结一些优缺点，其实对比是相当…"}, {"id": "6844903557812977672", "title": "Vue系列之computed使用详解(附demo,不定期更新)", "desc": "定义：当其依赖的属性的值发生变化的时，计算属性会重新计算。反之则使用缓存中的属性值。 当其依赖的属性的值发生变化的时，这个计算属性的值也会自动更新。多用于\"data，computed\"的属性。 当赋值给计算属性的时候，将调用setter函数。多用于在模板组件中需要修改计算属性自…"}, {"id": "6844904104402092039", "title": "JavaScript深入之头疼的类型转换(上)", "desc": "在 JavaScript 中，有一部分内容，情况复杂，容易出错，饱受争议但又应用广泛，这便是类型转换。 将值从一种类型转换为另一种类型通常称为类型转换。 ES6 前，JavaScript 共有六种数据类型：Undefined、Null、Boolean、Number、String…"}, {"id": "6844903892652687374", "title": "三刷红宝书之 JavaScript 基本概念", "desc": "顺序为 1 -> 2 -> 4 -> 3 -> 4 -> 3 -> 4 -> ... -> 退出"}, {"id": "6966046395728035854", "title": "前端刷题路-Day34：接雨水（题号42）", "desc": "现给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。"}, {"id": "6844904159938887687", "title": "为什么普通 for 循环的性能远远高于 forEach 的性能？", "desc": "通过下标，对循环中的代码反复执行，功能强大，可以通过index取得元素。在处理比较复杂的处理的时候较为方便 forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。foreach有的也叫增强for循环，foreach其实是for循环的一个特殊简化版。注意，for…"}, {"id": "6844903575974313992", "title": "深度解析原型中的各个难点", "desc": "本文不会过多介绍基础知识，而是把重点放在原型的各个难点上。 首先来介绍下 prototype 属性。这是一个显式原型属性，只有函数才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外 如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。…"}, {"id": "6992567389603053575", "title": "JavaScript中new一个对象到底是怎么new的？", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 先通过一个例子看一下js中怎么通过new一个构造函数创建一个新的对象： 在这个例子中，函数Person就是一个构造函数，然后我们通过new"}, {"id": "6870058781527506952", "title": "「划线高亮」和「插入笔记」—— 不止是前端知识点", "desc": "如今前端领域：serverless，low code，全栈化等概念遍布漫天。开发者们热衷于讨论「如何把前端格局做大」，「如何将高高在上的概念落地」。此时，你有没有感受到「还不知道发展方向到底是什么，就已经被未来抛弃了」。 我想，与其去琢磨「serverless 到底是什么，跟前…"}, {"id": "6844904071569080333", "title": "2020年，必须拥有自己的博客网站(中)", "desc": "在上篇教程 2020年，必须拥有自己的博客网站(上)中，我们使用Hexo开发了一套博客，并成功使用travis-ci将其自动化部署到github-pages，预览地址。 本篇教程作为这个系列的第二篇，主要讲解怎么使用Hexo进行创作以及主题的配置。 官方有个主题集合的页面htt…"}, {"id": "6844903650939109384", "title": "Webpack 4 和单页应用入门", "desc": "可以说是我目前看到最详细的 webpack 4 入门文章。 基本看完这个，基本也算一个合格的初级webpack配置工程师了。"}, {"id": "6844903583259820046", "title": "完成一个城市选择组件（阿里前端题目,内附知识点、思路）", "desc": "借用了两个久经考验的轮子：fastClick和better-scroll，介意可以就此打住。本文绝对原创，手打，思路清晰，知识不难，不适合大佬观看，谢谢。 首先说一下，我不是阿里的人，也没去阿里面试过，这是某微信群里的一个小伙伴给的，我现在的能力达不到阿里的要求。不过人没梦想还…"}, {"id": "6984740489257811998", "title": "ES6 箭头函数你正确使用了吗", "desc": "ES6 箭头函数你正确使用了吗 博客说明 说明 在ES6中允许使用“箭头”（=>）定义函数，所以在我们后续写代码的过程中出现的很多的箭头函数，因为真香！但是也带来的一些问题，灵魂拷问，你真的了解箭头函"}, {"id": "6844904135603519495", "title": "前端面试手写题有备无患（片尾附内推）", "desc": "手写其实在前端的面试过程中必不可少，因为手写是考验你了解某一原理的最可观的体现。下面我汇总了一些，我在面试复习过程中遇到的手写题。我将实现思路写出来与大家共享，而实现只是一个参考，有兴趣的可以点击参考答案，有问题请指正。 new操作符返回的是一个对象。 1、参数不能取第一个，因…"}, {"id": "6991334267930443790", "title": "CKEditor系列（一）CKEditor4项目怎么跑起来的", "desc": "通过`CKEDITOR.loader.load( 'ckeditor' )`来加载ckeditor（当然，根据上面的代码可以看出，`core/ckeditor`也有依赖，依赖加载完了才能真的轮到它）"}, {"id": "6844903537613389837", "title": "JavaScript 打怪升级 —— 把业务逻辑当练习题做", "desc": "开发项目和出没社区有一段时间了，会遇上一些比较有印象业务需求。这些业务需求，可能是自己开发项目遇上的，可能是在社区看到的业务需求，或者其他情况接触到的需求，但是这些业务需求的实现逻辑都值得一写。因为这些业务逻辑可以当做练习题一样，可以给大家练手。也希望大家从这些需求实现的逻辑里…"}, {"id": "6844903622354927624", "title": "真·数字滚动特效", "desc": "number-flip: Change number with flipping animation."}, {"id": "6844903638674980872", "title": "理解 es6 class 中 constructor 方法 和 super 的作用", "desc": "首先，ES6 的 class 属于一种“语法糖”，所以只是写法更加优雅，更加像面对对象的编程，其思想和 ES5 是一致的。 其中 constructor 方法是类的构造函数，是一个默认方法，通过 new 命令创建对象实例时，自动调用该方法。一个类必须有 constructor …"}, {"id": "6844903502116814855", "title": "js之字典学习和使用", "desc": "字典 是一种以键-值对形式存储数据的数据结构，比如：名字-电话号码，通过名字就能找到对应的电话号码，名字就是键(key),电话号就是值(value)。"}, {"id": "6844904167782219783", "title": "你可能不知道的5个setTimeout冷知识", "desc": "作为一名合格的程序员，想必大家对 setTimeout 并不陌生。它就是一个定时器，可以指定一个函数在多少毫秒后执行；它会返回一个定时器的编号，可以通过 clearTimeout 手动清除这个定时器。 在这里我不会重复介绍 setTimeout 是一个宏任务，是 JavaScr…"}, {"id": "6994066678732554271", "title": "数组常用的方法", "desc": "这里给各位小伙伴列举了一些学习JavaScript时会经常用到的数组方法，正在学习JavaScript基础的小伙伴儿记得收藏哟~"}, {"id": "6844904039679787016", "title": "解读element-ui中table组件部分源码与需求分析", "desc": "如果说Vue、React、Angular是前端三剑客，那么element-ui可以说在中后台领域占据半壁江山，github star数 43k之多。至今，它拥有了84个组件（Version 2.13.0）。 需求：因公司业务需要，经常有页面中的表格需要多选（勾选），然后把勾选到…"}, {"id": "6883282239182864397", "title": "宏任务和微任务的一个小事", "desc": "本文根据JavaScript规范入手，阐述了JS执行过程在考虑时效性和效率权衡中的演变，并通过从JS代码运行的基础机制事件队列入手，分析了JS不同任务类型（宏任务、微任务）的差别，通过这些差别给出了详"}, {"id": "6951640533269741575", "title": "从执行上下文到变量提升——JS学习记录", "desc": "什么是执行上下文？ 执行上下文的定义 ECMA-262标准 An execution context is a specification device that is used to track t"}, {"id": "6844904153823592461", "title": "懒人整理的js函数式编程讲解", "desc": "是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。 函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。 根据学术上函数的定义，函数即是一种描述集合和集…"}, {"id": "6844904009308831751", "title": "「前端料包」一文彻底搞懂JavaScript中的this、call、apply和bind", "desc": "关于JavaScript中this又是一个老生常谈的话题，也是面试绕不开的经典考题。「前端料包」 系列第三篇就聊聊关于this的话题。写的很小白，如有不对，欢迎各路大佬指正~ 在讲this之前，先得说说环境 这个概念。一门语言在运行的时候，需要一个环境，叫做宿主环境。对于Jav…"}, {"id": "6994048814118076446", "title": "ES6的一些知识点", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 1.ES6 🔥 1.1 let ES6中新增的用于声明变量的关键字 let声明的变量只在所处于的块级有效 可以防止循环变量变成全局变量 不存"}, {"id": "6994034020418125837", "title": "数据结构《学习笔记》——二叉树", "desc": "这篇是树的学习笔记，总体思路还是很清晰的，介绍了一些二叉搜索树的一些基本操作，以及如何用代码去实现。"}, {"id": "6850037267365855239", "title": "「思维导图学前端 」初中级前端值得收藏的正则表达式知识点扫盲", "desc": "本文是思维导图学前端系列第二篇，主题是正则表达式。首先还是想说下我的出发点，之所以自己画一遍思维导图，是因为我整理的思维导图里加入了自己的理解，更容易记忆。之前也看过很多别人整理的思维导图，虽然有点拨之用，但是要想吸收个二三分营养却也是很难。所以，建议本系列的读者在阅读文章之后…"}, {"id": "6986556721820876813", "title": "图片 src 为二进制的处理", "desc": "引子 请求一张图片，返回的数据类型是二进制，要将图片显示出来。 Origin My GitHub 图片 src 为二进制的处理 这种场景下，首先想到图片的 src 为 base64 的情况，了解 Ba"}, {"id": "6844904167668973576", "title": "使用Intersection Observer API实现视频队列自动播放", "desc": "笔者利用空余时间研究了一下javascript的Intersection Observer API，发现其有很大的应用场景，比如图片或者内容的懒加载，视差动画等。笔者也在之前的文章中详细介绍了3种Observer（观察者）的用法，包括位置监听，dom变化监听以及窗口变化监听，它…"}, {"id": "6994808540166635557", "title": "前端Leetcode系列｜20. 有效的括号", "desc": "这是力扣系列第3篇，今天来和小伙伴们一起打卡力扣第20题：有效的括号。 一、题目描述 给定一个只包括 (，)，{，}，[，] 的字符串"}, {"id": "6854573215440699399", "title": "【KT】查缺补漏React状态管理探索", "desc": "在 react 中，有 props 和 state，当我们想从父组件给子组件传递数据的时候，可通过 props 进行数据传递，如果我们想在组件内部自行管理状态，那可以选择使用 state。但是呢，我们忽略了 react 的自身感受～ react 它是单向数据流的形式，它不存在数…"}, {"id": "6844904146269634567", "title": "apply、call、bind的区别与精简实现", "desc": "apply() 方法接收一个指定的this值和一个包含多个参数的数组来调用一个函数。 call() 方法接收一个指定的 this 值和一个参数列表来调用一个函数。 使用 call 和 apply 函数的时候要注意，如果传递给 this 的值不是一个对象，JavaScript 会…"}, {"id": "6844904088304353293", "title": "全面分析总结JS内存模型", "desc": "最近在整体复习一遍现代前端必备的核心知识点，将会整理成一个前端分析总结文章系列。这篇是其中的第二篇，主要是总结下JS底层的内存模型。（另外，此系列文章也可以在语雀专栏——硬核前端系列查看）。 主要分为两大类：基本数据类型、复杂数据类型，详细分类如下。 对于不同的数据类型有不同的…"}, {"id": "6989439079133741086", "title": "什么是变量提升？什么是函数提升？", "desc": "在js中只有两种作用域，全局作用域和函数作用域，在ES6之前，js是没有块级作用域。 JavaScript 代码的执行分为两个阶段。第一个阶段在当前词法环境中注册所有的变量和函数声明，简单说就是，解析"}, {"id": "6998059538855231524", "title": "JavaScript事件模型", "desc": "一、事件流 事件流：从页面中接收事件的顺序。 事件冒泡：由微软公司提出，由最具体的元素接收事件，然后逐级向上传播到较为不具体的节点（document对象）。以上代码事件流向：div->body->ht"}, {"id": "6973308613511249956", "title": "实现一个简单的“返回顶部”按钮", "desc": "返回页面顶部的按钮允许用户快速返回页面顶部。本文从头开始介绍如何实现一个简单的返回顶部按钮，并逐步添加动画效果"}, {"id": "6971193920067731464", "title": "js伪数组转数组原理", "desc": "我们在前端开发过程中，经常会有这中情况，将一个伪数组转成数组 一般都会用这样的方式： 就得到了真正的数组，但是却没能明白为什么这样写。 要知道其中的原理，我们就必须要知道slice 的实现原理，下面我"}, {"id": "6844904113172398093", "title": "OpenLayers入门（一）", "desc": "OpenLayers（https://openlayers.org/）是一个用来帮助开发Web地图应用的高性能的、功能丰富的JavaScript类库，可以满足几乎所有的地图开发需求。 和另一个流行的地图库leaflet不同，openLayers完全是用面向对象的方式开发的，且几…"}, {"id": "6999519652170858503", "title": "【手撕前端考试卷】系列 （一）", "desc": "① JavaScript 是如何运行的？解释型语言和编译型语言的差异是什么？ JS代码-> 解析成 AST (先会有词法分析、语法分析) -> 生成字节码（V8）-> 生成机器码（编译器） 很多资料会"}, {"id": "6994825550174879758", "title": "【从头学前端】08-JavaScript中的数组的基础知识，可能有你不知道的", "desc": "本篇文章将来学习JavaScript中的数组。通过本篇文章的学习可以掌握什么知识呢？如下图所示： JavaScript中的数组（Array） 是一个有序是数据集合，可以通过数组索引（index）访问数"}, {"id": "6999271274723672072", "title": "技术篇 - 普通函数 和 箭头函数之间的区别", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 hello, 大家好，我是前端学长Joshua (公众号) 。 热心于做开源，写文章。目的为帮助在校大学生，刚入职场的小伙伴可以尽快搭建自己"}, {"id": "6844903634954633224", "title": "前端路由实现原理（history）", "desc": "状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。 标题（title）：Fi…"}, {"id": "6997791002140835847", "title": "边学边译JS机制--38.js 中的decorator", "desc": "Introduction 装饰器（Decorators）是用一个装饰器函数，把另一块代码（比如类或者函数）包起来一个东西。它的目的就是扩展被包含的代码，而不用去修改它。 正JAVA,C#,python"}, {"id": "6974349059431596040", "title": "js手机号和名字脱敏", "desc": "手机号脱敏处理：180****3976 姓名脱敏处理，规则：3个字以内脱敏第一个字，4—6个字脱敏前两个字，大于6个字脱敏第3—6个字，示例：张三（*三）、张三水（*三水）、长孙无忌（**无忌）、罗斯"}, {"id": "6997308533465153573", "title": "element ui   使用 switch 和  分页时，切换状态后，回不到第一页", "desc": "页面功能大概是这样的，默认是全部，可以切换到我的，然后展示对应的表格数据，表格十之八九就会有 分页器了，当我切换不同状态，表格的数据的切换，当然分页器的展示，也很重要，切换时肯定要展示第一页。 代码就"}, {"id": "6844903625781673998", "title": "JavaScript 文件对象详解", "desc": "在浏览器中操作文件，多数情况下用到的是 File 对象，从 <input type='file' /> 元素获取，进而继续操作(例如将选择的图片展示在页面上，用ajax将文件上传至服务器等)。这里介绍在浏览器中操作文件的相关API. File 对象继承自 Blob 对象，先看看…"}, {"id": "6844903573612937223", "title": "Vue 仿QQ左滑删除组件", "desc": "js代码就这么一些，每个函数都有注释说明， 相信都能看得懂， 就不多解释了。如有更好的方式，欢迎及时交流~"}, {"id": "6844903585948368903", "title": "Webpack4 那点儿东西", "desc": "近几年，构建对于前端开发来说是一个很重要的名词，它给前端开发注入了很大的活力，解放了很多生产力。而webpack在前端项目中起了不可小觑的作用，它可以将我们所用的各种浏览器不认识的代码比如es6，es7,sass,less等转换为浏览器认识的语言，可以对文件进行压缩合并，代码进…"}, {"id": "7000026573067780126", "title": "今天来聊聊JavaScript的异常(报错)处理 try-catch", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 前文学习了关于 JavaScript 中的 迷之神奇的 'bug': 今天来学习 程序中的异常情况可嵌套的 try-catch"}, {"id": "7002556294578044965", "title": "模拟数据Mock.js实用指南", "desc": "在前后端分离的开发模式下，前端程序员和后端程序员之间往往事先商量好接口格式，然后各自同步进行开发。一般来说，前端开发的进度要快于后端，在后端接口还没有完成的情况下，前端就需要自己先模拟数据进行页面调试"}, {"id": "6962052275787431966", "title": "JavaScript 中 web worker 如何使用？又有哪些限制？", "desc": "Web Worker 1、什么是 web worker？有哪些好处？有哪些问题？ Web Worker 就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配"}, {"id": "6844903542872866824", "title": "一个数字键盘引发的血案——移动端H5输入框、光标、数字键盘全假套件实现", "desc": "进入某页面自动弹出带小数点的数字键盘，并且自带输入验证，比如金额——只能输入数字和小数点，并且只能输入一位小数点、小数位不超过2位，且输入前验证不合法就不让输入、(UE特加功能——定制光标颜色>.<简直是反人类的需求)。细分如下： 1. 基于input + 手机自带键盘实现方案…"}, {"id": "7000014883534143495", "title": "JavaScript进阶（三）模块化", "desc": "写在前面，兜兜转转，来来回回，从开始学习JS到现在已经工作这些来年，我和JS每天的生活可以用如胶似漆来形容。但自认为对他认识的还不够深刻。故从头再来，从基础开始。Go！！！"}, {"id": "6977044404787904548", "title": "设计模式|JavaScript实现单例模式(上篇)", "desc": "保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就是单例模式，也是单例模式的定义。 单例模式的用途非常广，像实现全局模态框，像在Redux和Vuex中的Store实现。"}, {"id": "6844903604445249543", "title": "JavaScript操作DOM常用的API", "desc": "文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。 文档对象模型 (DOM) 是对HTML文件的另一种展示，通俗地说，一个HTML 文件，我们可以用编辑器以代…"}, {"id": "6844903758942453768", "title": "正则的与或非", "desc": "正则是用来匹配字符的，它一个重要用途就是搜索。 说到搜索，很容易就想到搜索引擎，比如 Google。 Google 本身有一些简单搜索技巧甚是有用。 比如，实现集合运算功能：与、或、非。 本文尝试用正则来模拟一下。 1. 关键字 包含hello这个单词所有网页会被搜索出来。 上…"}, {"id": "6895005349992988686", "title": "手把手教你撸一个能生成抖音风格动图的gif制作平台", "desc": "又到了一周一次的周总结, 笔者基于之前的开源项目 blink , 开发了一款能在线配置故障艺术, 并一键生成gif动图的平台, 这里暂时取名为QT. 接下来笔者将复盘一下该可视化平台的实现步骤以及功能点, 让大家都能做自己的Gif动图生成平台. 我们大致理清了我们需要实现的功能…"}, {"id": "6994738564567138317", "title": "关于JS的事件循环——Event Loop", "desc": "关于JS的事件循环——Event Loop 前言 众所周知，JavaScript是一门单线程的语言，虽然HTML5提出了Web Worker标准，允许JavaScript创建多个线程，但是它的子线程却"}, {"id": "6844903664209887246", "title": "[完结篇] - 理解异步之美 --- promise与async await （三）", "desc": "**这个系列到这里应该就是最后一节了，**前两章着重讲了promise，为什么着重讲promise呢？因为在用法上promise要比async await难一些，而且promise本身又不是一个语法糖。没有掌握的时候用起来就会有很多顾虑，async await却没有这种顾虑，用…"}, {"id": "6844903909148852237", "title": "可靠React组件设计的7个准则之封装", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我对文章进行了分割，本篇文章重点阐述 封装。因本人水平有限，文中部分翻译可能不够准确，如果您有更好的想法，欢迎在评论区指出。 耦合是决定组件…"}, {"id": "6999964623378055204", "title": "进阶教程 12. Promise 用法详解", "desc": "Promise 是什么？ Promise: 是浏览器新增的内置类，用来管理异步；Promise本身是同步的，是用来管理异步的..."}, {"id": "6992978598441254925", "title": "  JavaScript 事件模型", "desc": "通过本文可学习，EventTarget 接口、DOM 的事件操作（监听和触发）及 事件模型。浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件"}, {"id": "6993877141196636173", "title": "ES6特性解析", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 详谈一些ES6中常用而又核心的特性，比如let、const、symbol、class和解构。"}, {"id": "7002764656989175821", "title": "javaScript 性能优化", "desc": "as### 概要 内存管理 垃圾回收与常见的GC算法 V8引擎的垃圾回收 performance 工具 代码优化实例 javaScript 内存管理（memory management） 内存管理介绍"}, {"id": "6950499213675495460", "title": "走近JavaScript继承的世界", "desc": "带你一起走入JavaScript的继承世界，领略JavaScript继承之美，也是学好JavaScript关键之一。"}, {"id": "6991749405686628365", "title": "如果面试官让你讲讲发布订阅设计模式？", "desc": "这一次手把手实现一个发布订阅模式的事件系统，学习下EventEmitter3是如何实现性能的极致优化！"}, {"id": "6844903613458825224", "title": "五月前端知识集锦（每月不可错过的文章集锦）", "desc": "PS：星号表示需要翻墙。"}, {"id": "6889203973312643086", "title": "用 JavaScript 实现一个 TicTacToe 游戏 —— 编程训练", "desc": "同学们好，我是来自 《技术银河》的 💎 三钻 。 这里我们给大家讲讲一个好玩的编程练习，很多同学想到编程练习就会觉得与算法有关。但是往往在编程的过程中，我们要实现某种逻辑或者是功能的时候，确实是需要用到算法。但是我觉得 Winter 老师说的也挺对的。 TicTacToe 是…"}, {"id": "6844903641921355789", "title": "格式校验利器：JSON Schema 简介", "desc": "JSON，全称 JavaScript Object Notation. 是 JS 的数据结构的子集。相信大家对 JSON 也非常熟悉了。JSON 一共只有六种数据结构，这里列举他们在 JS 和 Python 中的叫法以及在 JSON 中的例子： 由于 JSON 是 JS 语法的…"}, {"id": "6844904072353431565", "title": "127个常用的JS代码片段，每段代码花30秒就能看懂（三）", "desc": "大家好，在前两篇文章里 127个常用的JS代码片段，每段代码花30秒就能看懂（一）和 127个常用的JS代码片段，每段代码花30秒就能看懂（二），我分享了前42段代码，今天我继续分享第三部分，希望对你的日常工作有所帮助。 此段代码从Date对象里获取当前时间。 此代码返回DOM…"}, {"id": "6844903639782260749", "title": "从零开始搭建React应用（二）——React应用架构", "desc": "上一篇文章——从零开始搭建 React 应用（一）——基础搭建讲述了如何使用 webpack 搭建一个非常基础的 react 开发环境。本文将详细讲述搭建一个 React 应用的架构。 在我们开发过程中，很多时候，我们需要让组件共享某些数据，虽然可以通过组件传递数据实现数据共享…"}, {"id": "6966207882631053348", "title": "十.浏览器对象模型BOM", "desc": "一.window对象 window 是客户端浏览器对象模型的基类，window 对象是客户端 JavaScript 的全局对象。一个 window 对象实际上就是一个独立的窗口，对于框架页面来说，浏览"}, {"id": "6844903876206805005", "title": "用JavaScript刷LeetCode的正确姿势", "desc": "虽然很多人都觉得前端算法弱，但其实 JavaScript 也可以刷题啊！最近两个月断断续续刷完了 leetcode 前 200 的 middle + hard ，总结了一些刷题常用的模板代码。走过路过发现 bug 请指出，拯救一个辣鸡（但很帅）的少年就靠您啦！ 包括打印函数和一…"}, {"id": "6844904030221631495", "title": "在JavaScript中实现链式调用", "desc": "链式调用在JavaScript语言界很常见，如jQuery、Promise等，都是使用的链式调用。链式调用可以让我们在进行连续操作时，写出更简洁的代码。 链式调用通常的实现方式，就是在函数调用结果返回模块本身。那么math模块的代码大致应该是这样子的： 上述代码实现了链式调用，…"}, {"id": "6844903710074601479", "title": "教你如何用node.js开发微信公众号（一）", "desc": "本文章简单介绍了如何用node.js开发微信公众号。主要内容包括微信公众平台的配置，signature的验证，以及用node.js去处理用户主动发起的行为。 开发前需要安装好node.js,因为我是基于express框架开发的，所以装了express(框架按自己的需求选择),需…"}, {"id": "6850037282691678221", "title": "【笔记】遇见Blob🙈🙈🙈", "desc": "Blob（Binary Large Object）表示二进制类型的大对象。在数据库管理系统中，将二进制数据存储为一个单一个体的集合。 Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承…"}, {"id": "6984356349094133767", "title": "Puppeteer初探", "desc": "Overview Puppeteer 单词的意思为：傀儡师、木偶人、操纵木偶的人。听起来是那么的awesome！！ 根据文档中的说明，可以理解为Puppeteer是一个node库，这个库提供了很多操作"}, {"id": "6981276926014914573", "title": "基于华为云自定义模板的图片操作演示（框选、拖拽）", "desc": "华为云自定义模板识别是服务于AI领域的流程控制系统，我们一起了解下其中一个模块的界面化操作实例。如下图，针对图片的高精度识别，我们需要处理图片的样式以便获得更好的模型训练数据和高精度识别结果。"}, {"id": "6901493600098779150", "title": "节流和防抖", "desc": "为了解决频繁操作造成的频繁事件触发 相当于进行一个优化，当输入完成的时候再触发事件回调，而不是只要数据变化就一直触发事件回调。 原理：单位时间内连续触发，但是只会执行一次，比如事件在300秒内不断触发点击事件，那么只会执行一次，到下一个300s开始计时的时候，就会在下一个300…"}, {"id": "6844904182512615432", "title": "V8引擎详解（七）——垃圾回收机制", "desc": "本文是V8引擎详解系列的第七篇，重点内容是关于V8的垃圾回收机制，以及V8对垃圾回收的优化策略，本文首先需要对内存结构有一个初步了解，不了解的可以先看一下V8引擎详解（六）——内存结构。 文末会有已经完成的系列文章的链接，本系列文章还在不断更新欢迎持续关注。 我们先简单了解一下…"}, {"id": "6844903520005521415", "title": "vue项目中对axios的二次封装", "desc": "可能你会问，这里的axios返回的就是promise对象，为什么还要再次对get,post封装一次promise.因为我这边的话，在开发中使用async await会出现数据请求失败的情况，报的错就是返回的不是promise对象。(ps：可async await返回的就是pro…"}, {"id": "6844903583368871943", "title": "React Native面试知识点", "desc": "当调用 setState 时，React会做的第一件事情是将传递给 setState 的对象合并到组件的当前状态。 这将启动一个称为和解（reconciliation）的过程。 和解（reconciliation）的最终目标是以最有效的方式，根据这个新的状态来更新UI。 为此，…"}, {"id": "6963431753910321189", "title": "scrollIntoView() 让元素进入可视区域", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 介绍 DOM元素的 scrollIntoView()方法是一个IE6浏览器也支持的原生JS API"}, {"id": "6844903608639553543", "title": "前端要以正确的姿势学习编译原理（上篇）", "desc": "前端要以正确的姿势学习编译原理（上篇）"}, {"id": "6844903927817699335", "title": "('b'+'a'+ + 'a'+'a').toLowerCase() === 'banana'？", "desc": "其实这是一道基础题目，考察点是类型转换以及操作符优先级。 首先这道题目中的加号并不全是用于加法的，++'a' 中的第二个加号其实是一元操作符。 那么接下来我们来学习一下一元加号操作符的作用。其实在 JS 中总共有九种一元操作符，分别为： 当然本文主题不是介绍所有一元操作符作用的…"}, {"id": "6969588834749120526", "title": "Class的继承", "desc": "这是我参与更文挑战的第3天，活动详情查看：更文挑战 extends关键字实现继承 Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。 上述代码"}, {"id": "6844903761102536718", "title": "你知道的requestAnimationFrame", "desc": "随着技术与设备的发展，用户的终端对动画的表现能力越来越强，更多的场景开始大量使用动画。在 Web 应用中，实现动画效果的方法比较多，JavaScript 中可以通过定时器 setTimeout 来实现，css3 可以使用 transition 和animation 来实现，ht…"}, {"id": "6856985470581080072", "title": "JavaScript中的缓存API", "desc": "了解如何使用JavaScript中的Cache API缓存资源。 Cache API允许服务工作者对要缓存的资源（HTML页面、CSS、JavaScript文件、图片、JSON等）进行控制。通过Cache API，服务工作者可以缓存资源以供脱机使用，并在以后检索它们。 检查 c…"}, {"id": "6981694973263478821", "title": "手把手教你实现聚光灯效果", "desc": "聚光灯是一种特殊的点光源，它能够朝着一个方向投射光线。聚光灯投射出的是类似圆锥形的光线，这与我们现实中看到的聚光灯是一致的。其灯光从一点发出，沿着某一个方向照射出一个锥形光照范围。聚光灯近似于一个有夹"}, {"id": "6844903719792803847", "title": "一道面试题引起的思考", "desc": "今天在认真干（划）活（水）的时候，看到群里有人发了一道头条的面试题，就顺便看了一下，发现挺有意思的，就决定分享给大家，并且给出我的解决方案和思考过程。 乍眼一看，这不就是实现一个lodash.get方法吗？看上去好像很简单。所以我就开始写了第一个版本。思想其实很简单，遍历传进来…"}, {"id": "6995173453359743013", "title": "【从头学前端】09-JavaScript中的函数（全是基础，看看你都会吗）", "desc": "本篇文章我们将来学习JavaScript中的函数。通过本篇文章的学习可以掌握什么知识呢？如下图： 函数是一段具有特定功能且可以重复执行的代码。简单的说，函数只需要定义一次，就可以进行多次的使用。"}, {"id": "6844904198648119304", "title": "构建基于 iOS 模拟器的前端调试方案", "desc": "我们在开发 iOS App 内的前端页面时，有一个很大的痛点，页面无法使用 Safari Inspector 等工具调试。遇到了问题，我们只能想办法加 vConsole，或者注入 Weinre，或者盲改，实在不行就找客户端同学手动打包调试，总之排查问题的路途非常艰难。 在参考了…"}, {"id": "7001879173794889735", "title": "JavaScript数据结构-栈和队列｜8月更文挑战", "desc": "1. 栈简介 栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，这一端称为栈顶。 而且它是一种先进后出的存储方式，也就是说最后添加的项最先被移出；它是一种运算受限的线性表，只能在表头/栈顶进行插入"}, {"id": "6977609099500322824", "title": "JS对象属性总结", "desc": "我们知道JS对象的属性分类很多，有些是构造函数自有的，有些是原型链的，有些是可枚举的，有些又是不可改变的等等，ES6又加了一个Symbol"}, {"id": "6995099596678496270", "title": "React扩展", "desc": "React扩展的一些扩展知识点 setState、lazyLoad、Context、组件优化、PureComponent、错误边界的使用"}, {"id": "6844903864999772174", "title": "原生JS上传图片(FormData,可预览,一次多图)", "desc": "适合人群:刚起步的前端新人。（前后端未分离的项目）全栈后端老大哥的前端需求(点名批评下jsp)。 别慌。因为对象的特殊，file对象是不会被开发人员所直接捕获(可见)的。但确实存在。 这个对象有一个files属性，返回的就是FileList对象。FileList对象看起来和数组…"}, {"id": "6999537788567683079", "title": "学习笔记: 继承与原型链", "desc": "面试必问原型链!,网上各种各样的解释都有,还是自己总结一下,印象更深!首先说说含义,这里引用MDN上的解释 基于原型链的继承"}, {"id": "7005399626740137991", "title": "js array方法", "desc": "concat() [纯函数] copyWithin() [纯函数] entries() every() fill() filter() [纯函数] find() [纯函数] findIndex() ["}, {"id": "7000326306395062309", "title": "js基础笔记第四天", "desc": "1、DHTML Dynamic：动态的HTML，并不是新的语言也不是新的技术，只是将现有技术整合的一个统称，让网页在离线状态也能保存动态效果 DHTML = HTML + CSS + JS(dom) "}, {"id": "6895599073676492807", "title": "10个有用的HTML文件上传技巧", "desc": "上传文件的能力是许多Web和移动应用的关键需求，从将照片上传到社交媒体上到将简历发布到工作门户网站上，文件上传无处不在。 作为一名Web开发人员，我们一定知道HTML提供了原生文件上传的支持，并借助于JavaScript的一点帮助。在HTML5中，File API被添加到DOM…"}, {"id": "6844903612720775181", "title": "gojs 流程图框架-基础绘图(一)", "desc": "gojs 是一款非常优秀的流程图绘制 js 框架, 该框架没有中文版 api, 并且网上可查阅的资料非常少, 本文旨在带领读者了解整个框架结构, 以及基本的绘制方法. 本文对技术细节不作过多描述, 并会附上 api 地址以供参考."}, {"id": "6986263413353611295", "title": "【轻聊前端】高级数据结构的基石—数组", "desc": "上一篇我们聊了对象，对象是属性和方法的集合体，代表包含某些信息或能力的个体。 这篇我们来聊另外一种集合体——数组，它代表一系列的同类数据。"}, {"id": "6844903870468997133", "title": "不再写 break 和 continue 了", "desc": "个人平时喜欢用 forEach 来代替 for 循环。但有时发现实现过程中，需要使用 break。这时，一般又得切换回 for 循环。譬如遇见如下的逻辑： 一般情况下，我们用 some 都是要用它返回结果的。而这种没有拿其返回值做文章的做法，算是代码阅读的一个信号：原来只是简简…"}, {"id": "6844903736268029965", "title": "JS HTTP 请求库哪家强？Axios，Request，Superagent，Fetch 还是 Supertest", "desc": "Web 开发中客户端与服务器间的交互非常重要，它有利于客户端应用高度动态化。用户通过单击按钮的交互方式向服务器发送请求，服务器检索数据并返回，页面无需重新加载，直接使用返回的数据重新渲染其部分/整体内容，或者对数据进行操作。 这其中的技术原理是 AJAX，通过 XMLHttpR…"}, {"id": "6993313923411755016", "title": "js中的深拷贝与浅拷贝", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 深拷贝与浅拷贝 浅拷贝： 下面就是一个浅拷贝的方法： 深拷贝： 深拷贝的方法 1.JSON.parse(JSON.stringify());"}, {"id": "6992012650204889102", "title": "ECMAScript 2020(ES11)特性简介 | 八月更文挑战", "desc": "简介 ES2020 是ECMA协会在2020年6月发行的一个版本，因为是ECMAScript的第十一个版本，所以也称为ES11. 今天我们讲解一下ES11的新特性。 ES11引入了9个新特性，我们接下"}, {"id": "6990560208372105247", "title": "3D地图与3D柱状图联合使用", "desc": "给3D地图添加3D柱状图使用的功能原理是在地图上加上圆柱对象，可以用颜色和高度分别代表分类和值大小，根据需要将柱状图放置到指定位置即可。3D地图与3D柱状图联合使用，效果大概是这样： 注：根据你项目需"}, {"id": "6993982666601152549", "title": "学习canvas之实现简单绘制", "desc": "学习canvas断断续续已经有个小几天了，除了看下API，也不知道该怎么去学习。所以，又开始试图去模拟一些小工具，当然功能方面是能简单就简单，毕竟还在初学阶段，太复杂做不出来。"}, {"id": "6844903824235167751", "title": "前端「N皇后」递归回溯经典问题图解", "desc": "在我的上一篇文章《前端电商 sku 的全排列算法很难吗？学会这个套路，彻底掌握排列组合。》中详细的讲解了排列组合的递归回溯解法，相信看过的小伙伴们对这个套路已经有了一定程度的掌握（没看过的同学快回头学习~）。 这是一道 LeetCode 上难度为 hard 的题目，听起来很吓人…"}, {"id": "6912112597596635150", "title": "说一说如何解决async await处理异常问题", "desc": "晚上睡不着，决心还是起来把今天白天工作期间反问一个小伙伴的async&#x26;await问题。实际上这个问题之前我就一直想写点什么，只是奈何懒的很，一直没有行动。今天还是忍不住想要吐糟一下，如果有什么说得不对的，欢迎批评指证！ 在复杂的业务中，这种充斥很多的try catch…"}, {"id": "6844903551009816589", "title": "JavaScript 运行原理解析", "desc": "说到JavaScript的运行原理，自然绕不开JS引擎，运行上下文，单线程，事件循环，事件驱动，回调函数等概念。本文主要参考文章[1,2]。 为了更好的理解JavaScript如何工作的，首先要理解以下几个概念。 简单来说，JS引擎主要是对JS代码进行词法、语法等分析，通过编译…"}, {"id": "6993453600596820004", "title": "基础教程 7. Date 类型、定时器、数组去重", "desc": "1. Javascript 处理时间日期的类型——Date; 2. Javascript 中的两种定时器的设置和清除； 3. 若干数组去重算法"}, {"id": "6844903613320396808", "title": "愈发熟练的 CSS 技巧", "desc": "rem+simple-flexible适配方案简单解析rem相对于根元素<html>的font-size的大小来计算坐作为一个单位；simple-flexible是根据手淘团队lib-flexible"}, {"id": "6991370248616640526", "title": "JavaScript 系列之类型（一）", "desc": "[JavaScript 系列之类型｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6844903780278861831", "title": "H5 notification浏览器桌面通知", "desc": "Notification是HTML5新增的API，用于向用户配置和显示桌面通知。上次在别的网站上看到别人的通知弹窗，好奇之余也想知道如何实现的。实际去查一下发现并不复杂，且可以说比较简单，故写篇博客分享给大家,希望能帮你们了解这个API。 该通知是脱离浏览器的，即使用户没有停留…"}, {"id": "7002080862846058510", "title": "JavaScript里类型的强制转换和隐式转换", "desc": "一、隐式转换 答案： B. 当传入 NaN 或能被转换成 NaN 的值，isNaN 返回 true，\"100\"会被先转成 Number–>100，不为 NaN，因此返回 false C. parseI"}, {"id": "6854573216518635527", "title": "一文看懂：小程序分享到朋友圈[建议收藏]", "desc": "近日小程序支持分享到朋友圈的消息可以说是小程序开发圈的一个重磅炸弹，转转小程序团队也在收到微信邀请后第一时间进行了调研，并对转转小程序迅速进行了能力支持，本文将全面解读微信此项能力。 要求微信版本7.0.16及以上，基础库2.11.13及以上，笔者在测试中发现，此项能力也跟机型…"}, {"id": "7003903383757127717", "title": "Promise的简单实现和常用方法", "desc": "1.Promise的含义 Promise是解决异步操作的一种方法，相较于传统的回调方式。可以解决回调地狱的问题。代码更好理解。功能也更加强大。最早由社区提出。ES6进行了标准化，并提供Promise对"}, {"id": "6844903582672781320", "title": "JavaScript：面试频繁出现的几个易错点", "desc": "这段时间，金三银四，很多人面试，很多人分享面试题。在前段时间，我也临时担任面试官，为了大概了解面试者的水平，我也写了一份题目，面试了几个前端开发者。在这段时间里面，我在学，在写设计模式的一些知识，想不到的设计模式的这些知识，就是面试题里面，频繁让人掉坑的考点。所以，今天就总结一…"}, {"id": "7002056706873688078", "title": "JavaScript ES(6-11)全版本语法 (四)：Function", "desc": "上一篇编写的是ES6中的Array，链接：https://juejin.cn/post/6999621789055713316 ，这次写的是ES6中Function的一些API和部分应用场景。"}, {"id": "6995559918447099918", "title": "小白的正则攻略第一期 | 基本概念", "desc": "正则表达式的使用非常广泛，尤其是表单校验的时候经常需要用到。很多时候我们虽然用到了正则，但其实并不会写也看不懂，本系列主要总结正则表达式的基本概念及用法，目标是不求会写但求看懂。 前言 正则表达式是匹"}, {"id": "6987997506768470052", "title": "事件冒泡，事件捕获，事件代理知多少", "desc": "事件冒泡 微软提出的事件流叫事件冒泡，也就是说事件的传播为：从事件开始的具体元素，一级级往上传播到较为不具体的节点。案例如下： 当我们点击P元素时，事件是这样传播的： p div body html "}, {"id": "6970875511220207629", "title": "JavaScript 知识体系之数组基础", "desc": "这是我参与更文挑战的第四天，活动详情查看:更文挑战 数组是 JavaScript 工作中最常用的数据类型之一，今天总结下各种场景下的数组方法,话不多说。show you the code JavaSc"}, {"id": "6936500545993572365", "title": "从零开发一款自动提取网页html并一键转换为md文件的工具(vue源码版)", "desc": "我们都知道程序员最爱的写博客的“语言”就是makedown, 并且目前大部分的技术社区都支持makedown语法, 所以说只要有makedown, 我们就能快速的同步到不同的技术平台. 也许有人会说, 我们写博客直接用makedown语法写不就好了? 的确这样做可以满足需求, …"}, {"id": "7004076924129509412", "title": "JS Advance --- 高阶函数 和 闭包", "desc": "闭包是在支持函数为第一公民的编程语言中，实现词法绑定的一种技术。闭包跟函数最大的区别在于，当捕捉闭包的时候，它的自由变量也会在捕捉时被确定，这样即使脱离了捕捉时的执行上下文，它也能照常运行。"}, {"id": "6880802339835133966", "title": "基于业务场景下的图片/文件上传方案总结", "desc": "图片/文件上传组是企业项目开发中必不可少的环节之一, 但凡涉及到用户模块的都会有图片/文件上传需求, 在很多第三方组件库(ant desigin, element ui)中它也是基础组件之一. 接下来笔者就来带大家从零实现一款图片/文件上传组件以及扩展出更强大的上传组件. 作为…"}, {"id": "7001728162140782629", "title": "layui表格自定义筛选条件 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 实现如图表格可以自定义筛选条件，并且可以选择大于小于多少数字，然后下面表格数据自动展示条件内的数据，不用掉接口，前端自己实现的功能，也可以"}, {"id": "6844903671646715911", "title": "[译文] 如何在 JavaScript 中更好地使用数组", "desc": "本文短小精悍，我保证。在过去的数个月里，我注意到在我审阅的 pull request 中有四个（关于数组使用的）错误经常出现。同时，我自己也会犯这些错误，因此有了这篇文章。让我们一起学习，以确保以后能正确地使用数组方法！ 我记得在我学习 JavaScript 的课程中有类似的这…"}, {"id": "6999307317292302366", "title": "Fintech FE Weekly issues 1", "desc": "关于本刊 此周刊主要包含国内、国外每周的前端精选文章和业界趣闻，以及我们前端团队调研、学习的资料分享，每周一更新，权当作者每周的阅读笔记吧~"}, {"id": "6954583720913272863", "title": "从变量提升理解预编译，就是这么简单，就是玩！！", "desc": "变量提升 作用域 预编译 在了解JavaScript的预编译之前，让我们先来了解了解跟预编译相辅相成的两个小玩意！！（变量提升和作用域），变量提升又和作用域有着密切的联系，对变量提升和"}, {"id": "6844903497599549453", "title": "原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的", "desc": "hello~各位亲爱的看官老爷们大家好。估计大家都听过，尽量将CSS放头部，JS放底部，这样可以提高页面的性能。然而，为什么呢？大家有考虑过么？很长一段时间，我都是知其然而不知其所以然，强行背下来应付考核当然可以，但实际应用中必然一塌糊涂。因此洗（wang）心（yang）革（b…"}, {"id": "6955373675637899301", "title": "学习抽象语法树 AST", "desc": "前言 作为一个前端切图仔，工作中少不了用上 Babel，ESLint，Prettier 这些工具，但是这些工具背后的工作原理却不求甚解😅 ，最近才尝试去了解一番，没想到发现一个全新的世界，那就是 AS"}, {"id": "6983962414924431374", "title": "VUE3（十六）封装axios", "desc": "一：axios 基础 从浏览器中创建XMLHttpRequest 从node.js发出http请求 支持Promise API 拦截请求和响应 转换请求和响应数据 取消请求 自动转换JSON数据 客户"}, {"id": "6994039163334967310", "title": "javascript 的七种继承方式（一）原型链", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战  原型链的概念 ECMAScript中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用"}, {"id": "6999837347206397988", "title": "学习Vue源码前需要了解的defineProperty和Proxy", "desc": "前言 大家有使用Vue开发想必对响应式都有了解，知道Vue2是用Object.defineProperty实现数据劫持，进而实现的双向绑定。在已经发布快一年的Vue3中，数据响应式的实现由Object"}, {"id": "6982756914316705823", "title": "JS 原生方法原理探究（九）如何手写实现浅拷贝和深拷贝？", "desc": "----这是 JS 原生方法原理探究系列的第九篇文章。本文会介绍如何手写实现浅拷贝和深拷贝。----"}, {"id": "6995092720322609188", "title": "类数组有没有forEach方法?", "desc": "获取dom节点返回的结果对象都没有map/filter等方法，但是返回的类型为NodeList时有forEach方法。因此类数组有没有forEach方法还是得看返回的具体对象类型。类数组不是一个类型，"}, {"id": "6995383604855439390", "title": "力扣刷题👊【160. 相交链表】", "desc": "这是我参与8月更文挑战的第 12 天，活动详情查看：8月更文挑战 题目链接 160. 相交链表 题目描述 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。"}, {"id": "6844903618395504648", "title": "JS高级之面试必须知道的几个点", "desc": "2.使用Function构造函数定义函数的方式是一个函数表达式,这种方式会导致解析两次代码，影响性能。第一次解析常规的JavaScript代码，第二次解析传入构造函数的字符串 https://www.cnblogs.com/tugen... https://www.cnblog…"}, {"id": "6844903589920374792", "title": "ES6的Set和Map数据结构，由你制造", "desc": "每当去学习ES6的时候，我都会不由自主的打开阮一峰老师的《ES6入门》去学习和查找用法，相信大多数同学也都和我一样看过阮老师写的文章。 当然大家也都知道ES6里常用的API就那么些，不多不少，用在项目中也是刚刚好。 ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是…"}, {"id": "6844904080960126989", "title": "总结vue知识体系之实用技巧", "desc": "vue 作为目前前端三大框架之一，对于前端开发者可以说是必备技能。那么怎么系统地学习和掌握 vue 呢？为此，我做了简单的知识体系体系总结，不足之处请各位大佬多多包涵和指正，如果喜欢的可以点个小赞！本文主要讲述一些vue开发中的实用技巧。 当然这里不仅仅是可以监听 mounte…"}, {"id": "6984974711159521294", "title": "js 对象基础知识", "desc": "对象 概念 什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。 大括号就定义了一个对象，它被赋值给变量obj，所以变量obj就指向一个对象。该对象内部包"}, {"id": "6967233795623747614", "title": "js中位运算的应用", "desc": "记一笔位运算的应用，位运算在我们正常开发中实际用的可能并不是很多，但是掌握这一部分知识总没坏处，说不定以后就用上了"}, {"id": "6976978652210659365", "title": " 《百道JS小知识点》系列（2）快速学习⛹🏻‍♂️", "desc": "古今中外有学问的人，有成绩的人，总是十分留意积累的。知识就是积累起来的，经验也是积累起来的。我们对什么事情都不应当像过眼云烟。《百道JS知识点》"}, {"id": "7001138780128149535", "title": "今天来学习下js的键盘事件", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 介绍 js的键盘事件有3种，它们是keydown事件,keypress事件,keyup事件。今天来学习下它们，看看它们之间有何区别。 键盘"}, {"id": "6979209127788544014", "title": "JavaScript中的Set数据操作：交集、差集、交集、对称差集", "desc": "Set对象就像一个数组，但是仅包含唯一项。Set对象是值的集合，可以按照插入的顺序迭代它的元素。 Set中的元素只会出现一次，即 Set 中的元素是唯一的。"}, {"id": "6994104494065713160", "title": "急速递增的数字动画｜8月更文挑战", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战很多认为 数字递增或递减动画 在没有学习的必要，因为在生活中不常出现。但如果我们真的留心观察过我们生活中使用过的 软件、看过的 网站"}, {"id": "6844903960910757902", "title": "理解async/await", "desc": "js有很多异步处理的解决方案，而async/await就是其中的一种，最近有在学习和运用koa，在服务端中，很少用到promise，而是选择了更加优雅的async/await。当然，一种新方案的出现，我们不光需要学会怎么写，也要学会他的原理。 async/await从字面意思上…"}, {"id": "6967016183690166280", "title": "十一.一篇文章搞定ES6", "desc": "一.let 和 const 命令 let、const 与 var 的区别: 小题：点击哪个按钮就显示当前索引 方案一：行不通 方案二：可行(立即执行) 方案三：可行(let) 二.模板字符串 1.模板"}, {"id": "6994429551791046693", "title": "JavaScript中为什么“null==0“为false??  “null＞=0“为true???", "desc": "今天来谈一个在javaScript中很有意思的现象，就是`JavaScript中为什么\"null==0\"为false而\"null>=0\"为true的现象`。众所周知，在JavaScript中，`==`"}, {"id": "7000754602018603039", "title": "轻松搞定策略模式！", "desc": "定义 策略模式 是一种常见且有效的设计模式。它指的是定义一系列的算法，把它们一个个封装起来，并且使他们能够相互替换。策略模式 的本质在于将 算法的使用和算法的实现分离开来。"}, {"id": "7002501356598591495", "title": "理解透toString与valueOf", "desc": "1、两个方法存在的意义 基本上，所有JS数据类型都拥有这两个方法，null除外。它们俩是位于原型链上的方法，也是为了解决javascript值运算与显示的问题"}, {"id": "6991658093213925389", "title": "再学js事件冒泡与事件捕获及事件委托 |8月更文挑战", "desc": "1.事件冒泡 事件冒泡:结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。 关于事件的捕获与事件的冒泡过程图: 两者的顺序是先捕获后冒泡 事件冒泡就是在点击父盒"}, {"id": "6844903512971673607", "title": "让我印象深刻的 JavaScript 面试题", "desc": "对于一个web前端来说，面试的时候，难免会遇到javascript的面试题。就我自己而言。有几道面试题，有些是我面试遇到的，有些是在网上看到的，但是都印象深刻。今天就来简单分析一下我遇到的，印象深刻的一些面试题！主要目的希望能让小伙伴学到一些东西，如过以后遇到类似的情况，就记得…"}, {"id": "6991648492544327693", "title": "Node.js零基础小白入门(二)", "desc": "本文主要写了创建web服务器的基础结构。但请求方式为get和post时服务器是如何获取请求参数的，以及获取动态和静态资源"}, {"id": "6991857797306515470", "title": "JS算法之最长不含重复字符的子字符串｜ 8月更文挑战", "desc": "最长不含重复字符的子字符串。请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。"}, {"id": "6844904067446079496", "title": "2020年，你必须知道的JS数组技巧", "desc": "在Javascript中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名Javascript工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！ 这也是一道常见的面试题，怎么对JS的数组去重。在ES…"}, {"id": "7000767824574545933", "title": "JavaScript 回顾（三）", "desc": "这是我参与更文挑战的第26天，活动详情查看: 更文挑战 1, this 解析器在调用函数每次都会向函数内部传递一个隐含的参数， 这个隐含的参数就是this this指向的是一个对象，这个对象我们称为函"}, {"id": "6844903557968166926", "title": "你所忽略的js隐式转换", "desc": "你有没有在面试中遇到特别奇葩的js隐形转换的面试题，第一反应是怎么会是这样呢？难以自信，js到底是怎么去计算得到结果，你是否有深入去了解其原理呢？下面将深入讲解其实现原理。 其实这篇文章初稿三个月前就写好了，在我读一些源码库时，遇到了这些基础知识，想归档整理下，就有了这篇文章。…"}, {"id": "6858052418862235656", "title": "解读闭包，这次从ECMAScript词法环境，执行上下文说起", "desc": "对于x年经验的前端仔来说，项目也做了好些个了，各个场景也接触过一些。但是假设真的要跟面试官敞开来撕原理，还是有点慌的。看到很多大神都在手撕各种框架原理还是有点羡慕他们的技术实力，羡慕不如行动，先踏踏实实啃基础。嗯...今天来聊聊闭包！ 讲闭包的文章可能大家都看了几十篇了吧，而且…"}, {"id": "6980312074702307336", "title": "4个 JavaScript 字符串操作技巧", "desc": "字符串是编程世界最基本最重要的数据类型之一，JavaScript 也不例外。JavaScript 字符串是不可变的，对于存储可以由字符、数字和 Unicode 组成的文本很便捷。"}, {"id": "6997248539239645191", "title": "【babylonjs】babylonjs实践（二）--相机", "desc": "理论 camera UniversalCamera 这里介绍的Babylon.js中的通用相机，可以通过使用键盘、鼠标、触摸板、游戏手柄输入控制。它延伸和替代了仍然可以使用的自由相机（Free Cam"}, {"id": "6982455687364214820", "title": "bpmn.js 使用常见问题（不定时持续更新）", "desc": "根据以前的使用经验以及群友的部分问题进行的汇总，目前只保留了部分比较常见或者不容易查到的问题。但是由于暂时工作不再涉及流程引擎，后续会根据群友的问题进行不定时持续更新"}, {"id": "6844903721235808263", "title": "记一次前端面试的全过程", "desc": "接上一篇面试总结一年半经验，百度、有赞、阿里面试总结，把这段时间的面试总结结束一下吧。 本文主要记录一下当天面试的全过程（可能有遗漏，事隔三四天了，我已经尽量回忆了），答案亦为参考答案，仅供借鉴。 有赞一面结束后过了两天就收到了二面的邀请，我回复面试邀请的短信，说最近可能请假太…"}, {"id": "6887927229901520904", "title": "最简单的proxy讲解，一遍就懂", "desc": "使用代理的「目的」 ：是可以定义「捕获器」（trap），捕获器就是可以直接或间接在代理对象上调用，每次在代理对象上调用这些基本操作时， 代理可以在这些操作传播到目标对象之前先调用捕获器函数，从而拦 截并修改相应的行为。 「handler」 ：代理的处理对象,例子1中是一个空对象…"}, {"id": "6982524029341007879", "title": "六万字 JavaScript 面试&学习小宝典", "desc": "一、什么是编译型语言？什么是解释型语言？JS 是什么类型的语言？ 1、编译型语言 1. 解释 程序在执行之前需要一个专门的编译过程，把程序编译成 为机器语言的文件，运行时不需要重新翻译，直接使用编译的"}, {"id": "6973477494007529502", "title": "🔥7分钟教会你手写防抖和节流。", "desc": "前言 防抖 (debounce) 防抖，顾名思义，防止抖动，以免把一次事件误认为多次，敲键盘就是一个每天都会接触到的防抖操作。 想要了解一个概念，必先了解概念所应用的场景。在 JS 这个世界中，有哪些"}, {"id": "6959804920362958879", "title": "「敲黑板」JS 类型转换及访问拦截", "desc": "前言 面试的时候，你会遇到许多奇奇怪怪的问题。就好像上学的时候，你在数学课本里学习了等边三角形的三个内角都是等于 60 度，你很少能见到卷子里直接问你等边三角形的三个内角是多少度。多数情况下这个知识点"}, {"id": "7001499034430996488", "title": "`ArrayBuffer`对象到底是什么 简单读懂", "desc": "`ArrayBuffer`对象是 JavaScript 操作二进制数据的一个接口，代表储存二进制数据的一段内存，它不能直接读写，只能通过视图来读写"}, {"id": "6996185029470584869", "title": "[前端]javascript你不一定知道的进阶(干货)实用技巧.", "desc": "首先说明一下：我这里不举最基础的例子，各位大佬已经讲烂了,我只讲述最实用最常用的例子,你拷贝完,就能用的例子"}, {"id": "6947200436101185566", "title": "GitHook 工具 —— husky（格式化代码）", "desc": "代码风格：为什么要统一代码格式风格？ 团队开发，每个人编辑器不同，编码方式不同，导致代码格式不同，代码难看，难以维护。 保持代码可读性，团队成员之间的代码更加易读。"}, {"id": "7000979623836123166", "title": "前端面试之代码输出结果(四)", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战。 Proxy对数组 说明 JS对象和数组属性 说明 Object.getOwnPropertyNames 可以获取对象的属性和原生内置属性"}, {"id": "6936630572936593422", "title": "JS中的EventLoop、宏任务、微任务", "desc": "JS 单线程的特点就是同一时刻只能执行一个任务。 这是由一些与用户的互动以及操作 DOM 等相关的操作决定了 JS 要使用单线程，否则使用多线程会带来复杂的同步问题。如果是多线程，一个线程正在修改 DOM，另一个线程正在删除 DOM，那么以哪一个为准呢？ 如果执行同步问题的话，…"}, {"id": "6955349260627869704", "title": "2021前端面试题", "desc": "浏览器 cookie、localStorage、sessionStorage的区别？ cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sess"}, {"id": "6983525059243556871", "title": "「Alpine.js」petite-vue 前瞻版本 - 现代网页技术中的 jQuery", "desc": "简单 轻量 如地狱一般强大 Alpine 是一个坚固的、小型的工具，用于在标记中直接组合行为。可以把它想象成现代网络中的 jQuery。输入一个脚本标签，然后开始。"}, {"id": "7002076068580425759", "title": "vue3 release 源码解读", "desc": "vue3 release 源码解读，对于vue3发布流程release.js的学习和记录解读。。。。"}, {"id": "6986902403492773925", "title": "ES6面试、复习干货知识点汇总", "desc": "作者：StevenLikeWatermelon  https://juejin.cn/post/6844903734464495623 近期在复习ES6，针对ES6新的知识点，以问答形式整理一个全面知"}, {"id": "6997672120285134861", "title": "JavaScript中的实例属性、静态属性与原型属性，实例方法、静态方法与原型方法", "desc": "实例属性，静态属性与原型属性 实例属性定义在实例上，可以在构造函数的内部的this上进行定义，也可以在构造函数实例化以后的实例上进行定义。 静态属性，定义在构造函数之上的属性。可通过构造函数直接访问。"}, {"id": "7000391288763711495", "title": "保姆级别Cli4创建Vue3项目 #11#vue3前端青铜到黄金王者", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 前篇写了很多vue的内容，都说单个页面的。 这篇我们建立一个vue3项目。 其实可以修改的我们再看看。 v cli是什么？ vue cli"}, {"id": "6999422256929570847", "title": "谈谈JavaScript中对象属性及堆栈的的概念", "desc": "大家好哇，今天我们来谈谈JavaScript中对象属性及堆栈的的概念，对于非科班出身的小伙伴而言，这其中的概念还是很容易被搞混的，所以今天我们就来好好谈一下这个问题。"}, {"id": "6999210572604506125", "title": "如何选择setTimeout和setInterval", "desc": "序言 相信很多人都有用过setTimeout 和setInterval但是他们之间的差异和细节你真的知道吗，JS是如何进行"}, {"id": "7002788477280960520", "title": "红宝书笔记——JavaScript Function类型", "desc": "作为值的函数：不仅可以像传递参数一样传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。 sort()方法用到这种从一个函数返回另一个函数的方法。 函数内部属性：arguments 和 th"}, {"id": "6940442700889980965", "title": "浅析JavaScript函数式编程", "desc": "随着React的流行，函数式编程在前端领域备受关注。尤其近几年，越来越多的类库偏向于函数式开发：lodash/fp，Rx.js、Redux的纯函数，React16.8推出的hooks，Vue3.0的composition Api...同时在ES5/ES6标准中也有体现，例如：箭…"}, {"id": "6975693930096492580", "title": "什么！？a == 'juejin' && a == 666 && a == 888 为true？", "desc": "看到这个标题，很多人可能会感觉很新奇， a == 'juejin' && a == 666 && a == 888 为 true，这怎么可能呢？javascript 有时就是这么的神奇，上面表达式的实"}, {"id": "7002931518997790733", "title": "改变this的指向", "desc": "改变this的指向 根据MDN整理，传送门：call、apply、bind call和apply的区别 共同点 不同点 call apply bind"}, {"id": "7002427779991994376", "title": "3分钟学会防抖和截流及使用场景、代码段", "desc": "前言 首先明白一点，防抖和截流都是用于 高频 的 异步 触发场景，目的都是为了让事件只触发一次。例如按钮不停的提交表单（异步操作），滚动条的上拉加载数据（异步操作），输入框的搜索联想（异步操作）等。"}, {"id": "6970884378759004174", "title": "Cesium的Property机制究竟有多香", "desc": "这两天在研究Cesium中如何实现沿线飞行或漫游功能，上网查资料发现有好多博主的解决办法都包含了什么什么Property……勾起了我强烈的好奇心，遂写本文介绍Property及其使用。"}, {"id": "6986279129184698399", "title": "常用的JS技巧", "desc": "1、求和，最小值合最大值 利用 reduce 方法快速找到基本的运算。 求和 最大值 最小值 2、排序字符串，数字或对象等数组 我们有内置的方法 sort() 和 reverse() 来排序字符串，但"}, {"id": "6992106018192752671", "title": "浏览器的工作原理(进阶必备知识)  ｜ 8月更文挑战", "desc": "简介 网络浏览器是使用特别广的软件，目前使用的主流浏览器有五个：Internet Explorer、Firefox、Safari、Chrome 浏览器和 Opera。我们就从Chrome浏览器来讲解浏"}, {"id": "6999655268225138724", "title": "关于 JavaScript 那些迷之神奇的 \"bug\"?", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 前文学习了基本的 数据结构: 对象和数组 今天来学习 JavaScript 之 那些迷之神奇的 \"bug\". eg: [] == ![]"}, {"id": "6917123466307698696", "title": "【长文】Web 富文本编辑器框架 slate.js - 从基本使用到核心概念", "desc": "slate.js 提供了 Web 富文本编辑器的底层能力，并不是开箱即用的，需要自己二次开发许多内容。 也正是这个特点，使得它的扩展性特别好，许多想要定制开发编辑器的，都会选择基于 slate.js 进行二次开发。 slate.js 能满足全世界用户进行定制开发、扩展功能，说明…"}, {"id": "7004838235386069000", "title": "JS基础 之 迭代器和生成器", "desc": "一文理清迭代器和生成器的关系。并手动实现一个迭代器和生成器，实现不可迭代对象参与for..of迭代遍历。"}, {"id": "6844903696254533640", "title": "首页白屏的引发的思考(一)", "desc": "现在的前端框架， React、Vue、Angular 三大巨头已经占据了主导地位，市面上大多数前端应用也都是基于这三个框架或库完成，这三个框架有一个共同的特点，都是 JS 驱动，在 JS 代码解析完成之前，页面不会展示任何内容，也就是所谓的白屏。 用户是极其不喜欢看到白屏的，什…"}, {"id": "6844904066724675592", "title": "从JavaScript中看设计模式(总结)", "desc": "任何事情都有套路，设计模式就是写代码中常见的套路，有些写法我们日常都在使用，下面我们来介绍一下。 特定活动并在状态改变后获得通知，订阅者因此也成为观察者，而被观察的对象成为发布者或主题。当发生了一个重要事件的时候发布者会通知（调用）所有订阅者并且可能经常以事件对象的形式传递消息…"}, {"id": "6982867198024892424", "title": "qiankun微服务使用intro.js总结", "desc": "在qiankun微服务中使用intro.js制作引导，主框架为vue+ts,对比dirver.js。如何在微服务中进行主模块和子模块的完美引导，样式修改，以及踩的一些坑。"}, {"id": "6990725554852855839", "title": "前端复习------js篇", "desc": "javascript学习总结。学习于github, 掘金，思否等大佬的总结。为以后面试，工作为铺垫..."}, {"id": "6844904048961781774", "title": "js 内存泄漏场景、如何监控以及分析", "desc": "1. 意外的全局变量 2. 遗忘的定时器 3. 使用不当的闭包 4. 遗漏的 DOM 元素 5. 网络回调 可以抓取两份快照，两份快照中间进行内存泄漏操作，最后再比对两份快照的区别，查看增加的对象是什么，回收的对象又是哪些，如上图。"}, {"id": "6844903582790057997", "title": "直播原理与web直播实战", "desc": "直播在互联网中已经成为一个必不可少的东西，话说各大直播平台 bilibili，虎牙，斗鱼都准备上市了。 富途证券作为了一家互联证券公司直播当然也少不了的。目前直播在富途牛牛软件（以下简称：牛牛）中主要功能是教育跟宣传作用。 视频直播可以分为采集，前处理，编码，传输，解码，渲染 …"}, {"id": "6994340340459110431", "title": "js栈和堆的区别", "desc": "在JS引擎中对变量的储存主要有两种位置，堆内存和栈内存。Javascript中的变量分为基本类型和引用类型。 一、基本类型和引用类型。 栈内存主要用于存储各种基本类型的变量，包括Boolean、Num"}, {"id": "6992484375858249764", "title": "构造函数和原型", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 1.构造函数和原型 1.1概述 在ES6之前，对象不是基于类创建的，而是用一种称为构建函数的特殊函数来定义对象和他们的特征 创建对象可以通过"}, {"id": "6844903620190666759", "title": "JS深拷贝总结", "desc": "JS的原生不支持深拷贝，Object.assign和{...obj}都属于浅拷贝，下面我们讲解如何使用JS实现深拷贝。 这是JS实现深拷贝最简单的方法了，原理就是先将对象转换为字符串，再通过JSON.parse重新建立一个对象。 可以看到，函数、正则、Symbol都没有被正确的…"}, {"id": "6844903685990924296", "title": "H5 和小程序拍照图片旋转、压缩和上传", "desc": "最近接到一个“发表评论”的需求：用户输入评论并且可以拍照或从相册选择图片上传，即支持图文评论。需要同时在 H5 和小程序两端实现，该需求处理图片的地方较多，本文对 H5 端的图片处理实践做一个小结。项目代码基于 Vue 框架，为了避免受框架影响，我将代码全部改为原生 API 的…"}, {"id": "6872185695838928909", "title": "转转Hybrid体系建设", "desc": "目前转转 App 是一个典型的 Hybrid App，采用的是业内主流的做法： 客户端内有大量业务页面使用 WebView 加载 H5 页面承载。 可以将各个业务线的开发工作分摊到各个业务的前端团队上，使得个业务线可以并行开发。 其存在的问题也是很明显的，比如加载性能问题，白屏…"}, {"id": "7002627032244813854", "title": "JS 对象基本用法", "desc": "声明对象 let obj = { 'name': 'frank', 'age': 18 } let obj = new Object({'name': 'frank'}) console.log({ "}, {"id": "6844903590910263309", "title": "前端必会的抓包工具", "desc": "说到抓包这个问题，很多初级的前端都不太能意识到这个问题，虽然本人也就是个小菜，但是对于抓包工具可以说是熟练掌握了，因为有过太多接口的问题被测试指派了我，那么如果熟练掌握了抓包不仅能快速定位出问题，还能分析网络请求，以及一些前端逻辑的问题导致接口多次触发等现象。 所以一个合格的前…"}, {"id": "6844903501034684430", "title": "《JavaScript 正则表达式迷你书》问世了！", "desc": "之前在本站发表了一篇文章，《JS正则表达式完整教程（略长）》，正如你所看到的那样确实很长，也获得了近1000人的喜欢。但文章太长，想必有很多同学看不下去，大都只是收藏罢了。因此我整理成一本pdf。既然只是收藏，那么收藏文章就不如收藏书来的好。其实，整理成pdf的灵感也来自本站读…"}, {"id": "6844903926815277069", "title": "利用\"交叉观察者\"这个小宝贝儿，轻松实现懒加载、吸顶、触底 ❗", "desc": "直接进入正题，IntersectionObserver 翻译为 \"交叉观察者\"，它的任务就是监听目标元素跟指定父元素（用户可指定，默认为viewport）是否在发生交叉行为，简单理解就是监听目标元素是否进入或者离开了指定父元素的内部（理解这句就行了，管他交不交叉呢），我好像在开…"}, {"id": "6844903667733118983", "title": "css加载会造成阻塞吗？", "desc": "之前面试今日头条的时候，今日头条面试官问我，js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？所以，接下来我就来对css加载对DOM树的解析和渲染做一个测试。 假设结果: 在bootstrap.css还没加载完之前，下面的内容不会被解析渲染，那么我…"}, {"id": "6844904151231496200", "title": "基于 qiankun 的微前端最佳实践（图文并茂） - 应用间通信篇", "desc": "本系列其他文章计划一到两个月内完成，点个 关注 不迷路。 本文是基于 qiankun 的微前端最佳实践系列文章之 应用间通信篇，本文将分享在 qiankun 中如何进行应用间通信。 在开始介绍 qiankun 的应用通信之前，我们需要先了解微前端架构如何划分子应用。 在微前端架…"}, {"id": "6996275940938481678", "title": "学习笔记—JavaScript异步编程", "desc": "前言 正文 一、同步和异步 同步 在学习异步之前我们先来看一下同步，比如在调用函数取得返回值的时候，能够直接得到预期结果（得到了预期的返回值），是按照你的代码顺序执行的，是连续的，那么就说这个函数是同"}, {"id": "6998362720739442719", "title": "js实现单向链表，双向链表。", "desc": "基础的数据结构可不要不会哦。 单向链表 双向链表 记录记录！javascript数据结构中的链表构造。"}, {"id": "6844904068435935240", "title": "2020 年你应该知道的 React 库", "desc": "React 已经诞生很久了，自从它诞生开始，围绕组件驱动形成了一个非常全面的生态，但是来自其他编程语言或者框架的开发人员很难找到要构建一个 React 系统的所有组件。如果你是来自于像 Angular 这样的框架的开发者，你可能已经习惯了框架包含了所需要的所有功能， 然而对于 …"}, {"id": "6844903873048477709", "title": "JS方法速查", "desc": "致谢：A、让你一眼就看到我。| 大湿胸。| Adaer | 你的宇哥哥 | jNane | Felix_俊锴 13. 轮询等待函数"}, {"id": "6844904200241938439", "title": "【KT】构建自己的前端知识体系", "desc": "beforeDestory 钩子函数在实例销毁之前调用。"}, {"id": "6977662328506417182", "title": "模拟实现数组新增的东西", "desc": "ES6新增了很多属性、方法以及某些特性，本文通过模拟实现的方式，深入了解数组身上新增的东西，一起来看看吧~~"}, {"id": "6976550771122765837", "title": "XDM，JS如何函数式编程？看这就够了！（六）", "desc": "开篇，我们再温故一遍那句经典：“如果要整体了解一个人的核心 JavaScript 技能，我最感兴趣的是他们会如何使用闭包以及如何充分利用异步。”"}, {"id": "7002251330727182344", "title": "聊聊js的拖拽事件", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 前言 昨天学习了js的剪切板事件，今天来学习js的拖拽事件。 介绍 js的拖拽事件主要有dragstart，drag，dragend，dr"}, {"id": "6991644129297973285", "title": "浅谈JavaScript的事件循环机制（Event Loop）- 浏览器篇｜8月更文挑战", "desc": "我们先来看个实际中的场景： 对于这个需求，我们第一个反应的代码是这样的： 看着好像没问题，当然这里有的同学会说，你这里操作了100万次dom，性能损耗很严重。"}, {"id": "6844904165672484871", "title": "面试官：说说作用域和闭包吧", "desc": "虽然 javascript 被认为是一门解释型语言/动态语言，但是它其实是一种编译型的语言。一般来说，需要运行一段 javascript 代码，有两个必不可少的东西：JS 引擎 和 编译器。前者类似于总管的角色，负责整个程序运行时所需的各种资源的调度；后者只是前者的一部分，负责…"}, {"id": "6986576802823012366", "title": "浏览器缓存机制", "desc": "1.1 前言 缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。 对于一个数据请求来说"}, {"id": "6999839831379410952", "title": "从underscore库中学习throttle 节流", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 前言 前文讲到两种实现版本的节流，这里的高配版本主要将把这两种版本进行优势互补，合并成一个节流函数，通过传参控制具体是要第一时间执行、或者"}, {"id": "6844903555837493256", "title": "深入理解vue中的slot与slot-scope", "desc": "vue中关于插槽的文档说明很短，语言又写的很凝练，再加上其和methods，data，computed等常用选项在使用频率、使用先后上的差别，这就有可能造成初次接触插槽的开发者容易产生“算了吧，回头再学，反正已经可以写基础组件了”的想法，于是就关闭了vue的说明文档。 实际上，…"}, {"id": "6909638377247604750", "title": "12个 Javascript 小技巧帮你提升代码质量", "desc": "本文会不断更新，不足之处欢迎评论区补充。 1. 提炼函数 避免出现超大函数。 独立出来的函数有助于代码复用。 独立出来的函数更容易被覆写。 独立出来的函数如果拥有一个良好的命名，它本身就起到了注释的作用。 语义化将多段分离的逻辑放在不同的函数中实现，可以使代码逻辑清晰，清楚的看…"}, {"id": "7003011501371949086", "title": "JS Advance --- 浏览器解析过程 和 预解析", "desc": "JS是一门高级的编程语言，这就意味着我们在使用JS的时候，需要一个工具将JS转换为CPU可以直接识别的机器语言，这个工具就是JS引擎。而在parse过程中，js在解析变量和函数的时候，会产生预解析过程"}, {"id": "6995461202004426788", "title": "clip-path属性的探秘之旅🧐", "desc": "你听过clip-path吗？没听过？那就正好了，快来瞅瞅这篇文章，保你一看就懂，一学就会，终生不忘！"}, {"id": "6922025191967031310", "title": "看了10款文档编辑器之后, 我决定...", "desc": "作为一名技术工作者, 我们经常会遇到编写技术文档, 技术分享等需求, 网上也有很多现成的文档管理工具, 出于好奇心, 我拉着朋友一起实现了一个, 用来自给自足. 接下来就来介绍一下轻量级且灵活方便的文档编辑工具—— powerNice. powerNice 提供两种方式来编写文…"}, {"id": "6964928128397344775", "title": "妈妈技术周刊：Canvas 之春", "desc": "妈妈技术周刊 2021-5-21 Google Docs 在接下来的几个月中 将从 HTML 迁移至基于 Canvas 的渲染，以便提升性能和渲染一致性。这可能会影响某些 Chrome 扩展程序"}, {"id": "6997237828920803342", "title": "【前端--面试】常见面试题（二）—— JavaScript", "desc": "今天整理面试题的时候，想起来面试时候开始都会做面试题，大部分的题都是实战，不是单纯的背背定义，今天就来看一些题目回顾一下相关的知识点。"}, {"id": "6844903636808499214", "title": "手把手教你封装 Vue 组件，并使用 npm 发布", "desc": "本文主要记录一下如何基于 Vue 开发组件，并在 npm 上发布。废话不多说，进入正题 好了，到这里准备工作做好了，我们可以开始开发组件了，接着上面的例子，下面开始开发一个 switch 组件。 \b写的比较简单，主要还是提供思路。用习惯了开源的组件自己总得了解一下嘛，有的时候在…"}, {"id": "6965644352022380552", "title": "使用promise处理多个重复的请求", "desc": "处理重复请求的文章想必大家也看过了很多，大多数都是分为在response返回之前发现重复请求就return掉的和使用节流/防抖来间接规避用户频繁操作两种版本的，但是这两个都存在局限性"}, {"id": "6956800708389634079", "title": "前端 - 自动化极验解锁 -  puppeteer篇", "desc": "某天, 公司一个测试找到我说: '大佬, 极验那东西你这能配置吗?'; 我: '?'; 我一个前端, 你竟然问我配置过极验没有?! 我: '没有, 没配过, 咋了';"}, {"id": "6844903950609547272", "title": "很好用的 UI 调试技巧", "desc": "在业务开发过程中，想必大家经常会需要查看一个元素的位置及大小并修改它的 CSS，因此就会频繁使用到 DevTools 中的选择元素功能。 其实我们可以使用一个 CSS 技巧给所有元素加上 outline，这样就能迅速了解自己所需的元素位置信息，无须再选择元素查看了。 需要注意的…"}, {"id": "6994814324548091940", "title": "细说JS模块化规范（CommonJS、AMD、CMD、UMD、ES6 Module）", "desc": "模块化就是将系统分离成独立功能的模块，这样我们需要什么功能，就加载什么功能。 模块化的优点及CommonJS、AMD、CMD、ES6 Module几种模块化规范详解。"}, {"id": "6877844081217634312", "title": "js如何在数组中查找某个元素", "desc": "有时候我们想以某种条件来查找一个数组中是否有满足改条件的元素，然后返回该元素，或者该元素的索引值。Javascript 给我们提供了多种方法，主要分为按值查找和某种条件查找，下面开始介绍这些方法📄。 1. Array.prototype.includes() includes…"}, {"id": "6844903700905852936", "title": "socket.io让每个人都可以开发属于自己的即时通讯", "desc": "其实这个过程从用户的角度来说，其实无非就是连接上了，发送消息呗。"}, {"id": "6844903497205448711", "title": "TypeScript体系调研报告", "desc": "TypeScript = Type + Script（标准JS）。我们从TS的官方网站上就能看到定义：TypeScript is a typed superset of JavaScript that compiles to plain JavaScript。TypeScrip…"}, {"id": "6933377315573497864", "title": "彻底解决 JS 变量提升| 一题一图，超详细包教包会😉", "desc": "二. 带 var 和不带 var 的区别 全局作用域中不带var声明变量虽然也可以但是建议带上 var声明变量，不带 var 的相当于给window对象设置一个属性罢了。 私有作用域(函数作用域)，带 var 的是私有变量。不带 var 的是会向上级作用域查找，如果上级作用域也…"}, {"id": "6972554067281182734", "title": "这一次请彻底理解闭包", "desc": "4本权威书籍给你介绍闭包是什么鬼，看完还不懂~来来来来来来来来来来来来来来来来来来来来来来来来来打我！"}, {"id": "6844904152640782343", "title": "曾经我以为我很懂箭头函数", "desc": "曾经我觉得我自己已经很了解箭头函数了，不可能再被坑了。可是前几天我遇到了一个很奇怪的问题，在苦恼了很久后，发现就是箭头函数带来的坑。因此，就有了这一篇文章~ 比如我有一个基类 Animal，它有一个基础方法 sayName。之后每一个继承于它的子类，都需要自己实现这个 sayN…"}, {"id": "6991678497777254413", "title": "JavaScript循环看这篇就够了【建议收藏】｜8月更文挑战", "desc": "当重复同样的任务时，它会变得麻烦和难以维护。这个时候我们就需要用到循环，以下将从【基本用法】、【注意事项】、【优化方案】等全方面来总结JavaScript的循环。 数组循环 普通for循环 关键词 常"}, {"id": "6844903841951924232", "title": "TypeScript - 一种思维方式", "desc": "摘要： 学会TS思考方式。 电影《降临》中有一个观点，语言会影响人的思维方式，对于前端工程师来说，使用 typescript 开发无疑就是在尝试换一种思维方式做事情。 其实直到最近，我才开始系统的学习 typescript ，前后大概花了一个月左右的时间。在这之前，我也在一些项…"}, {"id": "6996956498718883848", "title": "数组方法的总结和运用", "desc": "一些对数组的处理方式呢，小伙伴们可能记忆不是很深刻了。总结一下，帮助小伙伴们温故知新 1：数组反序&排序&乱序的方法 js 基础——sort方法： arrayObject.sort(sortby); "}, {"id": "6987345706583834637", "title": "数据可视化之D3JS 不完全使用指南 ", "desc": "背景 本篇收录于《数据可视化和图形学》专栏 上文介绍了纹理相关的内容,并使用WebGL进行了3d的实现,emm..... 本篇文章呢算是一个新方向,也算探索写作的一个思路。(群内小伙伴的需求来讲讲D3"}, {"id": "6844904155270610958", "title": "结合实际场景聊聊大部分前端都不会使用的数据结构Map", "desc": "大家好呀，我是wangly，一名前端菜猫子。 最近项目中很多地方都用到了Map来做数据结构。所以总结一篇文章来复习自己。顺便给各位看官总结下这个ES6新的数据结构。它不像Object一样在开发中大量的被用到。但在某些特定的场景下使用它简直就是神来一笔。所以今天就给各位唠嗑下Ma…"}, {"id": "6988338086602080264", "title": "回味那些年我们一起用过的JQuery", "desc": "回味那些年我们一起用过的JQuery 经历过许多项目，直到今天笔者仍使用jQuery。这个库出现在2006年，比React、Vue甚至Angular早了许多年。 jQuery 曾经是 JavaScri"}, {"id": "6956112742805667848", "title": "console.log的输出真的可信吗", "desc": "有许多坑可能真的需要自己去踩一踩😂，不得不说Javascript真的是一门神奇的语言～～；一些看起来习以为常的调用，往往得不到自己想要的结果，只能通过不断踩坑或者别人踩的坑积累经验值，来再次踩坑～～ "}, {"id": "6844903622329761799", "title": "一套比较完整的前端技术选型，需要规整哪些东西，你知道不？", "desc": "1. 背景及现状 随着前端开发复杂度的日益增加，各种优秀的组件框架也遍地开花。同时，我们面临业务规模的快速发展和工程师团队的不断扩张，如何解决资源整合、模块开发、项目部署、性能优化等问题势在必行。 2. 目标 根据背景和现状的分析，我们现制订一个规范化的前端工作流，很好地规范统…"}, {"id": "6950093219153575972", "title": "从 ECMA 规范掌握 Promise 涉及的微任务", "desc": "为什么「JS 中 Promise 的微任务顺序」和手写 Promise A+ 版本不一致？本文从 ECMA 规范的角度，理清楚规范对 JS 中 Promise 的定义，并将原理和结论阐述清楚。"}, {"id": "6994439053202423838", "title": "javascript 的七种继承方式之借用构造函数继承组合继承", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 借用构造函数继承 调用构造函数 在上一篇中我们提到，原型继承中由于原型属性和方法都是共享的，所以对于引用类型的属性就会存在一些问题。为了解决"}, {"id": "6986673391029714958", "title": "一文吃透 Js 异步编程", "desc": "callback 异步解决方案（回调函数） Promise 异步解决方案 async await 语法糖 Generator 异步解决方案（遍历对象生成器）"}, {"id": "6934485088054804488", "title": "精读《设计模式 - Observer 观察者模式》", "desc": "Observer（观察者模式）属于行为型模式。 意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 拿项目的 npm 依赖举例子：npm 包与项目是一对多的关系（一个 npm 包被多个项目使用），当 npm 包发布新版…"}, {"id": "6986518402630172708", "title": "web worker实际使用", "desc": "web worker实际使用 web worker的好处 相信大家都比较熟悉，比如： 为js创造多线程环境，一些 计算量大的 耗时的 任务，可以用web worker单独开线程去跑，不会影响到主线程的"}, {"id": "6974919530346709000", "title": "20个 Javascript 技巧，提高我们的摸鱼时间！", "desc": "使用方便有用的方法，以减少代码行数，提高我们的工作效率，增加我们的摸鱼时间。这里分享一下我工作多年珍藏的几个常用技巧和方法，以让大家增加摸鱼的时间。"}, {"id": "6989264617478307854", "title": "JSON 序列化和反序列化", "desc": "JSON 序列化和反序列化 最近做一个配置化的项目，那么就涉及到很多表单以及表单数据的传递，传递的数据包含各种类型，当然主要还是以string，boolean，number，object（含 arra"}, {"id": "6994736901810815007", "title": "说说前端切片上传的实现原理", "desc": "前端上传大文件时，由于持续时间较长，容易受网络影响从而导致最终上传失败，因此将大文件切成一个个的小块并行上传会显著提升上传的成功率。"}, {"id": "6885546581438201869", "title": "坚持造轮子第三天 - 数据响应式", "desc": "一天造一个轮子，干就完了。 首先我们说说什么是响应式。数据模型发生变化可以发出相应(比如： 调用一个函数)就叫响应式。 具体到我们MVVM中 ViewModel的需要就是数据变了需要视图作出响应。 假定我们需要的是数据data变化时可以触发fn函数也就是作出相应，当然相应一般是…"}, {"id": "6976624204821037087", "title": "六个排序比较", "desc": "不基于比较的排序，对样本数据有严格要求，不易改写；基于比较的排序只要规定好两个样本怎么比较大小就直接可以复用；基于比较排序的时间复杂度极限是O(nlogn)。。。"}, {"id": "6844904109846298637", "title": "如何处理浏览器的断网情况？", "desc": "好的断网处理会让人很舒适：lol的断线重连，王者荣耀的断线重连，可以确保游戏的继续进行。坏的断网处理甚至不处理会出bug。"}, {"id": "6844903582425186312", "title": "大厂前端面试考什么? | 掘金技术征文", "desc": "最近一个月面试了20来个公司，其中有你们应该都听过的bat，今日头条，京东，网易，大疆，oppo，还有shopee，招商金科，有赞等比较不错的公司，收获了六个offer。最后选择了入职阿里巴巴深圳(感兴趣的朋友可以发送简历到pengfei.huang@alibaba-inc.c…"}, {"id": "6992455656011743268", "title": "JavaScript垃圾回收和内存管理", "desc": "前言 各位小伙伴八月快乐哈。 我是来自推啊前端团队的D同学。 今天跟大家简要分享一下JavaScript的垃圾回收机制和内存管理策略。"}, {"id": "6999630370496839710", "title": "客户端存储技术——sessionStorage和localStorage", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 Web Storage 一、认识Web Storage Web Storage的目的是解决通过客户端存储不需要频繁发送回服务器的数据时使用"}, {"id": "6846687590867795981", "title": "[浅析] 特定场景下代替优化 if-else 的方案 (二)", "desc": "很久之前，发了一篇文章:[浅析]特定场景下取代if-else和switch的方案，但是关于使用 if-else 的场景可不会仅仅是上面文章那么少，还有很多的场景，今天再次写下在开发上有哪些可以代替或者优化 if-else 的场景。 这样写貌似没什么问题，如果以后需求变了，中奖的…"}, {"id": "6844903715283927054", "title": "2018年前端面试总结", "desc": "再有两个月，2018就快过完了，因而有必要在年末对2018年的前端学习做一个总结，本文主要从前端面试中的一些基础知识来对前端进行相关的总结。本文根据网络面试题进行总结。 根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的…"}, {"id": "6844903560212135949", "title": "[译]非常有用的 48 个 JavaScript 代码片段，值得收藏！", "desc": "该项目来自于 Github 用户 Chalarangelo，目前已在 Github 上获得了 5000 多Star，精心收集了多达 48 个有用的 JavaScript 代码片段，该用户的代码可以让程序员在 30 秒甚至更少的时间内理解这些经常用到的基础算法，来看看这些 Jav…"}, {"id": "6986163536233758734", "title": "axios源码解读（上）", "desc": "通过源码的学习提升自己的编码能力和理解源码里面的设计模式，最终通过自己的理解，然后模仿做一个简易功能版本的轮子出来。希望通过这个源码系列来监督自己学习源码。 1. axios仓库地址及版本 这一次分析"}, {"id": "6993155269794463775", "title": "前端加载性能自查手册", "desc": "前言 当我们的前端工程日益庞大、业务日益复杂下，前端优化显得尤为重要。 浏览器输入url到页面的展现，具体发生了些什么，前端能做哪"}, {"id": "6844903671457677325", "title": "如何保障前端项目的代码质量", "desc": "对于中大型前端项目，项目规范与代码质量尤为重要。当功能需求变更或需要重构时，随心所欲的(糟糕的)代码可能带来比重新开发还麻烦的问题。 这个问题不用作过多阐述，想必接手过他人代码的同学，多少都有些体会。简单来说，太过随意的代码会让强迫症患者难以容忍，难以阅读理解的代码有时甚至不如…"}, {"id": "6844903661722664967", "title": "前端程序员必须掌握之三角函数在前端动画中的应用", "desc": "我是个很懒的人，开发过程中经常有意无意地刻意避开数学相关的知识，你也知道解数学题非常枯燥无趣。平时写动画也尽量使用 css3 来实现，timer-function 随意选用，最多也就调一下 cubic-bezier，找到看着舒服的就行。但是怎样让动画更顺滑，写出更贴近自然的动画…"}, {"id": "6844904093429792782", "title": "12 种使用 Vue 的最佳做法", "desc": "随着 VueJS 的使用越来越广泛，出现了几种最佳实践并逐渐成为标准。在本文中，主要分享在平时开发中一些有用资源和技巧，废话少说，我们开始吧。 在需要操纵数据时，将key属性与v-for指令一起使用可以让程序保持恒定且可预测。 这是很有必要的，这样Vue就可以跟踪组件状态，并对…"}, {"id": "6844903882162700301", "title": "如何使用 Set 来提高代码的性能", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 我确信有很多开发人员坚持使用基本的全局对象：数字，字符串，对象，数组和布尔值。对于许多用例，这些都是需要的。 但是如果想让你的代码尽可能快速和可扩展，那么这些基本类型并不总是足够好。 在本文中，我们将讨论JS …"}, {"id": "6844904038580879374", "title": "你可能从未使用过的11+个JavaScript特性", "desc": "这篇文章中描述的大多数功能已被暂停使用（甚至不推荐使用）。 它们仍然在许多图书中很常见，因此值得学习。 , 是用于分隔表达式并返回链中最后一个表达式的运算符。 这里有三个主要表达式 1 、 2 和 3。所有这些表达式均被求值，最后一个赋给 oo。 这里有两个语句，第一个将乘法结…"}, {"id": "6979463779293593630", "title": "使用javascript实现一个链表结构", "desc": "单向链表 链表包含一些基础功能，在此只会简单的实现几个功能点。 创建链表节点 链表包含一个数据域和指针域 生成一条单向链表 创建一个操作单向链表的类 创建类 接收一个链表 查找链表节点 遍历链表，如果"}, {"id": "6989907294435688478", "title": "前端实现文件下载的几种方法", "desc": "以下是工作中前端常见的文件下载的几种方法。欢迎大家补充指正。 一、location.href 对于一些浏览器无法识别的文件格式，可以直接再浏览器地址栏输入url即可触发浏览器的下载功能。对于单文件下载"}, {"id": "6963069843864027144", "title": "精读《新一代前端构建工具对比》", "desc": "前端工程领域近期出了不少新工具，这些新工具都运用了一些新技术或者跨领域技术，实现了一些突破，因此有必要了解一下这些工具都有什么特性，以及是否可以投入生产环境。"}, {"id": "6844904022676078606", "title": "将前端技术栈移植到掌上游戏机", "desc": "作为前端工程师，我们编写的代码只能活在浏览器、小程序或者 Node 进程里，这似乎已经成为了一种常识。但这就是我们的能力边界了吗？本文将带你为一台内存仅 32M，分辨率仅 320x240 的掌上游戏机适配前端工具链，见证 Web 技术栈的全新可能性。 本次我们的目标，是只配备了…"}, {"id": "7002117742190919694", "title": "前端必知：前端模块化 | 8月更文挑战", "desc": "JS模块化 模块化的理解 什么是模块? 将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起 块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信 "}, {"id": "6997410542356807710", "title": "理解js中的作用域", "desc": "程序中的一段源代码在执行之前会经历三个步骤 分词/词法分析 解析/语法分析 代码生成 词法分析 这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（t"}, {"id": "6844903589278646285", "title": "面试题：你能写一个Vue的双向数据绑定吗？", "desc": "Vue的双向数据绑定的原理相信大家也都十分了解了，主要是通过Object对象的defineProperty属性，重写data的set和get函数来实现的,这里对原理不做过多描述，主要还是来实现一个实例。为了使代码更加的清晰，这里只会实现最基本的内容，主要实现v-model，v-…"}, {"id": "6854573211955560455", "title": "【适合收藏】为了多点时间陪女朋友，我向BAT大佬跪求了这15条JS技巧", "desc": "为了减少加班，从而挤出更多的时间来陪女朋友，我就厚着脸皮向一些BAT大佬求来了这15条JS技巧，现在分享给大家，千万别错过。 以上15个JS技巧是鱼头辛苦从几位大厂大佬里跪求出来的，希望各位可以好好运用在业务中，减少加班次数。 如果你喜欢探讨技术，或者对本文有任何的意见或建议，…"}, {"id": "6966503648339689508", "title": "JS中的节流与防抖函数", "desc": "导读 节流函数和防抖函数在日常的开发中还是有很多地方用到，两个函数的目的都是为了控制函数被调用的频率，今天我们就来说一说着两个函数。"}, {"id": "7006192086395387941", "title": "学习ES6对象的解构赋值(上)", "desc": "阮一峰老师的文章这样写道: 那什么是模式呢? 简单理解为,以一个对象的模式.本文来源:https://es6.ruanyifeng.com/#docs/destructuring"}, {"id": "6991981947354349582", "title": "JavaScript构造函数与原型链解析｜8月更文挑战", "desc": "1. 对象的三种创建方式 （1）字面量方式 （2）new 关键字 （3）构造函数方式 new 的过程 新生成了一个对象 链接到原型 绑定this 返回新对象 在调用 new 的过程中会发生以上四件事情"}, {"id": "6985453567549112351", "title": "技术周报 · 2021-07-16", "desc": "小编推荐 面向未来与浏览器规范的前端 DDD 架构设计 Web3D 实践秘籍 阅读理解 Slate 架构分析与总结 小程序性能极致优化 多媒体前端技术入门指南 拓展阅读 W3C 发布 ARIA in "}, {"id": "6998354448808411150", "title": "LeetCode49-字母异位词分组 | 算法练习系列", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 前言 今天的算法练习题是字母异位词分组，什么是异位词呢？异位词就是两个单词不同，但组成的单词的字母是完全相同的，就比如aet，eat，ta"}, {"id": "6844903680362151950", "title": "0.1 + 0.2不等于0.3？为什么JavaScript有这种“骚”操作？", "desc": "随着消费观念的改变，线上消费已经成为大众生活中不可或缺的一部分。在保证消费安全和用户隐私的同时，精准度也是必不可少的一环。试想一下，用户在一款产品上消费，结算金额出错，用户会怎么想？（数体教 or WTF？)，妥妥的差评了吧。 这样不要说用户粘性了，留存都是问题。当Boss得知…"}, {"id": "6979784665548718093", "title": "浅谈 ECMAScript 新特性", "desc": "列举了工作中常用或个人觉得比较好用的ECMAScript新特性，已经部分特性在使用中可能遇到的小问题、特殊场景，仅供参考。"}, {"id": "6992024607385452581", "title": "前端团队开发代码规范（js+vue）", "desc": "总结开发过程中常用的js写法规范，设计模式的使用和vue2中开发约定的写法了建议，方便团队小伙伴一致性的开发协作"}, {"id": "6994041463705174024", "title": "javascript中数组的API方法", "desc": "javascript中数组的API方法 数组.concat()：合并数组 数组.indexOf()：查找数组中的元素找到返回索引值，找不到返回 -1 数组.join()：拼接数组 数组.sort()："}, {"id": "6965402766726397966", "title": "潮流前端周刊（第31期）- mamala 西餐", "desc": "封面图摄于 mamala 家的牛排，挺不错的一家西餐厅，窗外风景极其不错，适合在有仪式感的日子去吃一次~"}, {"id": "6999588657992564749", "title": "前端面试之代码输出结果(一)", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战。 解构赋值 说明 先来说一下Object.create： 也就是说Object.create({ a: 1 })返回一个新对象，带着指定的"}, {"id": "7002096621701824542", "title": "JavaScript对象转基本类型", "desc": "以下哪些代码执行后i的值为10： 解析： A.数字1和一个对象相加，会触发“对象转基本类型”机制。 由于是加法运算，且该对象重写了valueOf方法，那么在对这个对象进行valueOf操作时，就转变成"}, {"id": "6993904505280544775", "title": "js中变量提升处理机制和匿名函数具名化,今天又是博学的一天，安排~", "desc": "这是我参与8月更文挑战的第7天 变量提升[预解析]  在“当前上下文”代码自上而下执行“之前”，浏览器会把所有待“var/function”关键字得进行提前得声明或者定义   带var的知识提前声明 "}, {"id": "6918892282192068622", "title": "【面试说】聊聊JavaScript中的数据类型", "desc": "前端面试中，估计大家都被这么问过。 答：Javascript 中的数据类型包括原始类型和引用类型。其中原始类型包括 null、undefined、boolean、string、symbol、bigInt、number。引用类型指的是 Object。 ... 因为 JavaScr…"}, {"id": "6999065068839108645", "title": "前端刷题路-Day88：寻找重复数（题号287）", "desc": "给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。 假设 nums 只有 一个重复的整数..."}, {"id": "7002611258012729357", "title": "JavaScript日历制作并实现拖动选择日期", "desc": "效果展示 代码 html css JavaScript ………… Gitee地址：https://gitee.com/zheng_yongtao/html-css-js-Achieve-cool-re"}, {"id": "6996652716067913758", "title": "深入了解 Web Components", "desc": "Web Components方便我们直接通过原生功能做到组件化，比vue等框架更快，更好用。所以深入一些分析这个功能，方便大家灵活使用。"}, {"id": "6844904034302705671", "title": "Typescript 最佳实践", "desc": "一年前刚接触 typescript 的时候, 觉得它加大了代码工作量. 写一大堆东西.为了找某个类型东奔西跑, 引入第三库还经常报错. 然而现在的我想说: 真香. 我们经常吐槽别人代码可维护性特别低, 总是希望别人能够主动的写注释, 可是写注释却没有任何方式可以进行约束. 这下…"}, {"id": "6973838889806987295", "title": "精读《算法 - 滑动窗口》", "desc": "滑动窗口算法是较为入门题目的算法，一般是一些有规律数组问题的最优解，也就是说，如果一个数组问题可以用动态规划解，但又可以使用滑动窗口解决，那么往往滑动窗口的效率更高。"}, {"id": "6844904032146817038", "title": "JavaScript 那些写出来会被同事揍的骚操作", "desc": "曾经，我接手了一份大佬的代码，里面充满了各种“骚操作”，还不加注释那种，短短几行的函数花了很久才弄懂。 这世上，“只有魔法才能对抗魔法”，于是后来，翻阅各种“黑魔法”的秘籍，总结了一些比较实用的“骚操作”，让我们装X的同时，提升代码运行的效率（请配合健身房一起使用）。 Java…"}, {"id": "6854573220356423694", "title": "源码篇（四）：手写jQuery版mini源码分析jQuery的优势。附送简版jQuery源码", "desc": "本文适合0.5~3年的前端开发人员，以及想了解jQuery是什么的小伙伴们。 谈谈个人对jQuery的看法，无兴趣可直接看源码分析。 如果你是一个五年以上的开发人员，相信你一定认识了解jQuery。这好比你十年前就已经有手机，那你肯定认识了解诺基亚。 当今的jQuery的确是没…"}, {"id": "6844903678646681607", "title": "通过vue-cli3构建一个SSR应用程序", "desc": "Vue.js构建的应用程序，默认情况下是有一个html模板页，然后通过webpack打包生成一堆js、css等等资源文件。然后塞到index.html中 更有好的SEO。由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。 Client Bundle，给浏览器用。和纯Vue前端…"}, {"id": "7001667337359196168", "title": "前端刷题路-Day95：有序数组中的单一元素（题号 540）", "desc": "给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。 示例..."}, {"id": "7000559456622739487", "title": "浅谈JS中的发布订阅模式", "desc": "发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。"}, {"id": "6979093024320159758", "title": "我是如何看Vue源码的", "desc": "目前关于vue响应式的文章已经挺多了，不过大多都在浅尝辄止，本文除了介绍响应式原理，覆盖setter做个小demo外，更多的重心将放在setter引发render的机制与流程上。"}, {"id": "6844903605502214157", "title": "移动端常见bug汇总001", "desc": "本文是摘录整理了移动端常见的一些bug以及解决方案，第一篇，后面还会有持续的文章更新整理。 Q: 当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。 A:根本原因是-webkit-tap-highlight-color，这个属性…"}, {"id": "6990615443312476174", "title": "【译】一个超级小的编译器", "desc": "今天我们一起动手写一个编译器，但不是我们平常所说的编译器，而是一个超级超级小的编译器，小到如果你把本文件的所有注释都删了，真正的代码也就200多行。 我们将把lisp风格的函数调用编译成C风格的函数调"}, {"id": "6844904039776256008", "title": "【THE LAST TIME】深入浅出 JavaScript 模块化", "desc": "【THE LAST TIME】一直是我想写的一个系列，旨在厚积薄发，重温前端。 也是对自己的查缺补漏和技术分享。 欢迎大家多多评论指点吐槽。 随着互联网的发展，前端开发也变的越来越复杂，从一开始的表单验证到现在动不动上千上万行代码的项目开发，团队协作就是我们不可避免的工作方式，…"}, {"id": "6881929095446265863", "title": "全网reduce实例最全！", "desc": "reduce()方法接收一个函数作为累加器,reduce为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（上一次回调的返回值），当前元素值，当前索引，原"}, {"id": "6904932682653040653", "title": "小程序中手机号识别", "desc": "最近做的一个流程页面里面有相关的手机号信息，点击可以拨打电话，本想着让后端把各个字段查出来就行了，结果接口方面给直接拼好了。 这让我们绑定打电话的事件就不那么方便了，问题聚焦到解析字符串，找出手机号。 split大法，通过split得到包含手机号的数组，然后遍历这个数组，给手机…"}, {"id": "6844903593997238285", "title": " Vue SPA项目 + Sentry 实现前端错误监控", "desc": "前端监控是相对于后端监控而言的，以往的后端监控只能记录接口被请求之后所发生的错误，但是现在随着用户复杂度不断提高，很多错误是在后端接口被请求以前就发生的JS错误。对于这种错误，传统的后端错误监控是无能为力的，因此前端监控应运而生。 最近想在公司的项目上部署前端监控，以主动捕捉用…"}, {"id": "6844904121565184013", "title": "第四期 | 前端成长规划", "desc": "前几个星期在掘金社区上无意中看到《前端早早聊第四期》的广告，点击进去看了一下，觉得蛮适合自己目前的状况的，所以就报名参加了。为此今天花了下午的时间专门听大佬们讲前端规划，虽然整体的时间比较长，带着耳机耳朵都有点疼了，但可以为自己增长见识，为职业进行规划，再辛苦也是值得的，接下来…"}, {"id": "6995763964126691341", "title": "React的插件库——redux", "desc": "react-redux是react的一个插件库，能让我们在react中更好的使用redux；其中UI组件中不含任何的store的东西，只是用于展示页面，所有和store联系起来"}, {"id": "6844903556747640839", "title": "Stripe开发使用指南--国际支付（含支付宝）", "desc": "前段时间，因为Jason让我帮忙把Stripe支付集成到他个人网站上去，让我有机会接触到支付系统开发，同时也因为苦于没有找到太多中文方面相关文档介绍，所以做个总结，也方便以后有需要的同学。 第一次听说Stripe还是在几个月前的一个新闻上了解到，大致说的是美国总统都在使用它，极…"}, {"id": "6901845776880795662", "title": "理清思路，前端技术调研到底应该怎么做？", "desc": "由于某次需求的需要，我进行了一次技术调研，内容是调研前端将pdf文件转为图片的解决方案，我接到这个需求的第一时间，立马打开搜索引擎，翻看了十分钟后，很快啊得出了一个口头结论但这肯定是不行的，十分钟就能"}, {"id": "6844904019505184776", "title": "掌握了AST，再也不怕被问babel，vue编译，Prettier等原理", "desc": "AST的具体应用，通过解读babel原理、vue模板编译过程，Prettier实现原理，来分析AST在开发中的具体使用。 AST（抽象语法树）在开发过程中扮演一个非常重要的角色，但是我们却很少去直接接触它。 无论是代码编译（babel），打包（webpack），代码压缩，css…"}, {"id": "6914561107872972813", "title": "《看完就懂系列》15个方法教你玩转字符串", "desc": "1. 字符串去除首尾空格 —— trim() 说明： 去除字符串两边的空白。 需求场景： 用户搜索前去除输入的首尾空格。 2. 字符串替换指定字符（串）—— replace() 3. 字符串合并 —— concat() 说明： 连接两个或更多字符串，并返回新的字符串。（悄悄告诉…"}, {"id": "6986343902961729550", "title": "JavaScript  对象的基本用法", "desc": "JS 中的数据类型共有七种：number、string、bool、symbol、undefined、null、object。 其中，对象 object 是唯一的复杂类型，而其他六种类型都是简单类型。 "}, {"id": "6937163703859019790", "title": "聊一聊Javascript的装饰器", "desc": "突然想到装饰器， 也是因为公司的项目BFF层这边使用的nestjs， nestjs中使用了大量的装饰器。 这样的写法简洁明了， 强约定性也便于后期的维护。 装饰器目前可以理解为对类class的一种修饰和修改。装饰器本身是一个函数，可以放在类，类方法，类方法的参数定义前面。 这里…"}, {"id": "6995738992830316552", "title": "JavaScript 易出现的错误总结", "desc": "JavaScript 中，常见的错误类型： SyntaxError 语法错误； TypeError 类型错误； RangeError 范围错误； ReferenceError 引用错误； 常见错误： "}, {"id": "6949080259438313509", "title": "前端数据字典的最优方案探索", "desc": "怎么样在前端合理使用异步数据字典。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。"}, {"id": "6844904000542736398", "title": "Vue.nextTick，了解一下？", "desc": "微任务总是在宏任务执行前执行。所以，微任务更适合nextTick的场景。把nextTick回调中的脚本放到一个promise.then()中，就能保证是DOM更新后执行。 首先来了解一下JS的运行机制。 JS执行是单线程的，它是基于事件循环的。 所有同步任务都在主线程上执行，形…"}, {"id": "6949547569693327391", "title": "深浅拷贝", "desc": "前言为什么会出现深浅拷贝呢？之所以会出现深浅拷贝的问题，实质上是由于JS对基本类型和引用类型的处理不同。基本类型指的是简单的数据段，而引用类型指的是一个对象，而JS不允许我们直接操作内存中的地址，也就"}, {"id": "6844903838185439246", "title": "透过 Keep-Alive 实现防抖 & 节流组件", "desc": "在前一篇文章揭秘了keep-alive的实现原理：彻底揭秘keep-alive原理，本文将模拟keep-alive原理实现Vue的防抖和节流组件。 防抖/节流组件代码实现。 网上有很多关于防抖与节流定义、应用及实现的介绍，但同时也有很多不同的解释版本，特别在概念的定义理解上，就…"}, {"id": "6995588611307470885", "title": "【重温JS】巩固基础-day13-事件对象(二)", "desc": "day13☆☆☆ 今天的内容(event 事件对象(二)) 重要!! 可以对应用中的一些操作进行优化--☆☆☆ 用自己的理解, 简单又全面概括基础知识点.jy"}, {"id": "6975760398658207757", "title": "JS异步编程(5)-async/await", "desc": "这是我参与更文挑战的第5天，活动详情查看：更文挑战 async/await 是什么 了解和使用 async 之前，需要提前了解以下部分： Event loop Promise Generator as"}, {"id": "6844903801472679949", "title": "你可能不知道的 Object.defineProperty()", "desc": "用于在一个对象上定义新的属性或修改现有属性, 并返回该对象. ECMAScript 中有两种属性: 数据属性 和 访问器属性. 一定不能有 get 或 set, 反之亦然, 否则报错. 将不能删除此属性, 即 delete obj.xxx 无效, 在严格模式下直接报错. 无论如…"}, {"id": "6999616442144391204", "title": "正则表达式 - 正则表达式总结整理（作用、元字符、修饰符）", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 正则表达式regular expression：RegExp 编写正则表达式 创建正则的两种方式 正则表达式的两个组成部分 元字符及其含义"}, {"id": "6987729672943599629", "title": "JS事件循环机制（Eventloop）与其微任务宏任务", "desc": "一、首先上代码 首先，看到这段代码，你们知道它的打印顺序是什么吗？而其为什么又会是这样的一个打印顺序呢，在捋清它的打印顺序之前，我们先来了解一些相关知识点。 二.什么是线程和进程 进程：描述了cpu在"}, {"id": "6844904118453010445", "title": "读《三元-JS灵魂之问》总结,给自己的一份原生JS补给(上)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 几个月前看过一遍三元大佬的《(建议收藏)原生JS灵魂之问, 请问你能接得住几个？》系列，当时是利用上下班公交的时间刷的。说下那时的感受吧，有些知识点还真不知道，就感觉好牛批，确实有一种被灵魂拷问的感觉。最最可怕的是那…"}, {"id": "6992015590282493966", "title": "搜索框隐藏动画的实现｜8月更文挑战", "desc": "搜索框动画是一个现在非常流行的动画，它可以节约非常多的展示空间，在有限的空间里展示了尽量多的东西，所以备受很多企业的青睐"}, {"id": "6844903861434449933", "title": "从Preact中了解React组件和hooks基本原理", "desc": "React 的代码库现在已经比较庞大了，加上 v16 的 Fiber 重构，初学者很容易陷入细节的汪洋大海，搞懂了会让人觉得自己很牛逼，搞不懂很容易让人失去信心, 怀疑自己是否应该继续搞前端。那么尝试在本文这里找回一点自信吧(高手绕路). Preact 是 React 的缩略版…"}, {"id": "6989249684116078605", "title": "关于对JavaScript变量提升的理解", "desc": "js变量提升 JavaScript是单线程语言，所以执行肯定是按顺序执行。但是并不是逐行的分析和执行，而是一段一段地分析执行，会先进行编译阶段然后才是执行阶段。在编译阶段阶段，代码真正执行前的几毫秒，"}, {"id": "6987286840227135501", "title": "拼夕夕拼的是什么?", "desc": "开始 事情是这样的，女朋友最近迷上了拼多多砍价，总是让我帮他砍一刀，大到手机平板平衡车，小到口红香水和大鹅（押X2）还要我邀请其他人帮忙一起砍价，我内心是极不情愿的，但是怎么给她解释这事儿不靠谱呢？为"}, {"id": "6993925768958967815", "title": "如何获取dom元素的位置、尺寸？client、scroll、offset？一文搞懂！！", "desc": "本文推荐结合代码实例阅读：代码仓库直通车 为了方便理解我按照顺序，从大到小获取，依次是：屏幕尺寸、窗口尺寸、文档区尺寸、dom位置。 获取屏....."}, {"id": "6984702376812740644", "title": "一次搞懂JavaScript类型隐式转换：[] == ![]", "desc": "总是被问到一些给出运算结果的冷知识？别再踩到那些面试官给你埋得的坑！一次搞懂JavaScript隐式转换"}, {"id": "6844903510538993671", "title": "[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述", "desc": "PS: 好久没写东西了，最近一直在准备写一个自己的博客，最后一些技术方向已经敲定了，又可以开心的学习了，node系列后续再开始。 随着JavaScript越来越流行，越来越多的团队广泛的把JavaScript应用到前端、后台、hybrid 应用、嵌入式等等领域。 这篇文章旨在深…"}, {"id": "6988376666674298887", "title": "让你把JS中的字符串方法一网打尽，快速查漏补缺", "desc": "JS字符串和数字的方法不管是在面试，还是在工作中，亦或者是在做算法都是非常重要的，也许一个API就能让你少写很多逻辑。 本文详细总结了字符串和数字的方法，让你做到对他们的用法一网打尽。"}, {"id": "6844903913930358792", "title": "公司新来的女实习生问我什么是闭包？", "desc": "撩妹守则第一条，女孩子都喜欢童话故事。 这个故事来自于stackoverflow的一则回答，看不懂没关系，等阅读完本文后，回头再来看这个故事，你会发现你已经完全了解了我的魅力，咳咳@¥%#…………JavaScript中闭包的魅力。 当函数可以记住并访问所在的词法作用域时，就产生…"}, {"id": "6971747560784560165", "title": "数组的 sort() 方法详解", "desc": "用归用，照葫芦画瓢不难，大家日常也是这么写的，没毛病！但是如果对一个方法不进行深入研究，那么就很容易踩坑，并且常常会填不了坑！"}, {"id": "6999248116276789256", "title": "前端学习笔记--ES6类", "desc": "基本上，ES6 的 class 可以看作只是一个`语法糖`，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已"}, {"id": "7002216726834184205", "title": "[前端]给登录逻辑加个hook", "desc": "今天是8月30号，这篇文章是7月1号写的 一转眼两个月过去了，7月1号写的文章，写完扔草稿箱了，想着再润色一下，写点注释再发出来。但是后面一直没时间，今天打开掘金一看，都躺草稿箱俩月了。"}, {"id": "7001018952402862093", "title": "【前端 | 实践】进度条自增实现loading过渡页", "desc": "在展示包含实际内容的页面之前，使用原生progress标签配合javaScript实现进度条非匀速递增的效果..."}, {"id": "6996421115732033549", "title": "简单的tree shaking", "desc": "什么是tree shaking tree shaking顾名思义，是摇动一棵树，使树上的枯叶落下。在程序中，其作用就是移除程序中未使用的代码。 举例： tree shaking的作用就是在打包时删除掉"}, {"id": "6844903646535106568", "title": "手把手教你用原生JavaScript造轮子（一）——分页器（文章内容已过期，可不看）", "desc": "日常工作中经常会发现有大量业务逻辑是重复的，而用别人的插件也不能完美解决一些定制化的需求，所以我决定把一些常用的组件抽离、封装出来，形成一套自己的插件库。同时，我将用这个教程系列记录下每一个插件的开发过程，手把手教你如何一步一步去造出一套实用性、可复用性高的轮子。 要开发一个J…"}, {"id": "6992768998534283271", "title": "如何做一个在线转码小说的爬虫网站", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 作为一个有6年书龄的程序员，不搞一波爬虫来看小说真是对不起自己。 所以，我就又开始了愉快的搞事情之旅。 不过接下来我要做的是在线转码，"}, {"id": "6997031130331349028", "title": "探索词法作用域和动态作用域模型", "desc": "作用域是个语言无关的概念，你要接触过Lisp或者Scheme等语言，应该对这个概念会非常熟悉。本文将带着大家了解词法作用域和动态作用域是什么，讨论下 JavaScript 的词法作用域，那么现在开始吧"}, {"id": "7004259853698859021", "title": "how JavaScript works01：随便翻翻", "desc": "how JavaScript works自己的阅读记录，第一章包含前言，说明了文章的主题，内容有运行时构成，访问栈等"}, {"id": "6844904016325902344", "title": "一文搞懂V8引擎的垃圾回收", "desc": "作为目前最流行的JavaScript引擎，V8引擎从出现的那一刻起便广泛受到人们的关注，我们知道，JavaScript可以高效地运行在浏览器和Nodejs这两大宿主环境中，也是因为背后有强大的V8引擎在为其保驾护航，甚至成就了Chrome在浏览器中的霸主地位。不得不说，V8引擎…"}, {"id": "6993720790046736420", "title": "使用rollup.js封装各项目共用的工具包 gdpg-utils，并发布到npm私库", "desc": "Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码。Rollup是基于ES6 的打包方案，而不是以前的特殊解决方案，如 CommonJS 和 AMD。与Webp"}, {"id": "6953481912157470727", "title": "通过开超市的方法浅谈JS的面向对象", "desc": "【前言】 在Java中，我们通常用关键字class来定义一个类，但JavaScript在ES6之前并没有class关键字，它不通过class来定义一个类，而是用函数代替。"}, {"id": "6906316759465197581", "title": "「JS刷题之路-栈」和我一起系统的刷题吧（内附思维导图）", "desc": "给定一个只包括'('，')'，'{'，'}'，'['，']'的字符串，判断字符串是否有效。 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 二、946. 验证栈序列 [ ] 题目链接：946. 验证栈序列 给定 pushed…"}, {"id": "7000032048337387527", "title": "Node.js 开发必备基础知识", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。文件读写、网络请求、回调函数，这三点是使用Node.js进行开发的三项核心知识。"}, {"id": "7000271129969426446", "title": "LeetCode11-盛最多水的容器 | 算法练习系列", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前言 今天来一道有意思的算法题--盛最多水的容器，看到这个题目我就想到了以前看到过的短板效应也叫做木桶原理，这个原理就是你盛水的最大量不取"}, {"id": "6998885683016237086", "title": "【前端--面试】常见面试题（六）—— JavaScript", "desc": "不得不感叹，双休是真好，周末能睡懒觉可太幸福了，每天都跟自己说，一定要坚持下去，不知道今天有人会看题吗~~"}, {"id": "6844903716001169416", "title": "正则表达式详解及实战", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 正则表达式…"}, {"id": "6844903615300108302", "title": "JavaScript 内存机制（前端同学进阶必备）", "desc": "每种编程语言都有它的内存管理机制，比如简单的C有低级的内存管理基元，像malloc(),free()。同样我们在学习JavaScript的时候，很有必要了解JavaScript的内存管理机制。 JavaScript的内存管理机制是:内存基元在变量（对象，字符串等等）创建时分配，…"}, {"id": "6993126357941092365", "title": "React必知必会(三)-React Hooks优劣代码鉴赏", "desc": "但单就观察我们公司几个团队中的代码，发现用法千奇百怪，有不少错用、滥用的情况，理解的不是很透彻。我整理了一些供大家鉴赏，避免踩坑；"}, {"id": "6995942854325436424", "title": "exports与module.exports的异同", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 Node的模块加载是采用的CommonJS规范，区别于AMD的异步加载，CommonJS是同步加载，因为Node代码一般是部署在服务"}, {"id": "6992231715297034247", "title": "设置表格列宽 —— 在富文本编辑器中的实现", "desc": "wangEditor 富文本编辑器的表格（table）功能并不能满足需求，列的宽度的自适应的效果非常不美观。于是决定修改源码，对表格功能做了加强，使其支持调整列宽。"}, {"id": "7005736005114282020", "title": "可迭代对象与类数组", "desc": "可迭代对象和类数组的简单介绍，它们的简单介绍，包括基本含义、遍历方法、与数组之间的转化方法······"}, {"id": "6965687467747835940", "title": "使用 CSS prefers-* 规范，提升网站的可访问性与健壮性", "desc": "文本将介绍 CSS 媒体查询中新增的几个特性功能，该规范提出了一系列有益的属性，用于适配用户的一些个性化配置，提升页面的可访问性及健壮性。"}, {"id": "6999920491041390622", "title": "前端刷题路-Day90：回文子串（题号647）", "desc": "给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。 具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串..."}, {"id": "6913476532333707271", "title": "大前端进击之路(二)|JavaScript异步编程", "desc": "为了回答这个问题我们首先需要知道JS的执行环境是单线程的，是因为JS语言最早是运行在浏览器端的语言，目的是为了实现页面上的动态交互。实现动态交互的核心就是DOM操作，因此决定了JS必须是单线程模式工作。我们来假设一下如果JS是多线程一起工作的，其中一个线程修改了一个DOM元素，…"}, {"id": "6981651859173802021", "title": "面试官：谈谈createElement与createDocumentFragment的区别？", "desc": "createDocumentFragment是 DOM 节点。 它们不是主 DOM 树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到DOM树。"}, {"id": "6972908865415282724", "title": "提升代码格调——JavaScript 数组的 reduce() 方法入门", "desc": "reduce() 方法为数组中的每一个元素依次执行回调函数（不包括数组中被删除或从未被赋值的元素），返回一个具体的结果。"}, {"id": "6977000981691105317", "title": "JavaScript数组方法看这一篇就够了", "desc": "这是我参与更文挑战的第15天，活动详情查看 更文挑战 汇总了JavaScript数组常用的一些方法，并且按照增、删、该等用途进行了分类，涵盖了日常开发的大部分场景。"}, {"id": "6992502752014237727", "title": "JavaScript之内存管理", "desc": "JavaScript 通过自动内存管理实现内存分配和闲置资源回收 周期性：每隔一段时间，垃圾回收程序就会自动运行"}, {"id": "6844903864458543111", "title": "前端鉴权（Cookie/Session、Token和OAuth）", "desc": "前后端未分离以前，页面都是通过后台来渲染的，能不能访问到页面直接由后台逻辑判断。前后端分离以后，页面的元素由页面本身来控制，所以页面间的路由是由前端来控制了。当然，仅有前端做权限控制是远远不够的，后台还需要对每个接口做验证。 为什么前端做权限控制是不够的呢？因为前端的路由控制仅…"}, {"id": "6921617824460832782", "title": "JavaScript 原型、原型链、继承之随记随查至通透", "desc": "在 JavaScript 中每个对象（除 null 外）创建的时候，就会关联另一个对象，这个关联对象就是原型对象，与大多数资料一致，后续简称原型(本质也是对象)，每一个对象都会从原型中继承属性。 从这里可以看到，每个函数都有一个prototype属性，这个属性指向的是函数的原型…"}, {"id": "6844903712285016071", "title": "浅析 React Fiber", "desc": "在 react 进入大家视野之初，Virtual DOM（VDOM）的概念让人眼前一亮，在操作真正的 DOM 之前，先通过 VDOM 前后对比得出需要更新的部分，再去操作真实的 DOM，减少了浏览器多次操作 DOM 的成本。这一过程，官方起名 reconciliation，可翻…"}, {"id": "6917440746303946765", "title": "js中延迟加载和预加载 | 七日打卡", "desc": "原理： 当在真正需要数据的时候，才真正执行数据加载操作。 1. 让 js 最后加载 2. defer 属性 使用方法： 为 &#x3C;script>标签定义了 defer属性。 用途: 让脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕之后再执行 虽…"}, {"id": "6994439397978406920", "title": "来了解下es6新增的const和let命令", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前言 我们都知道，在es6之前，我们声明变量都是使用var命令。 es6新增了声明变量的2种命令，const和let, 今天来讲讲它们，还有"}, {"id": "6986768833381941279", "title": "JavaScript 详细图解原型", "desc": "@[toc] 显式原型 隐式原型 每个函数都有一个prototype属性 如果你自己写一个函数， 那么它默认指向一个Object空对象(即原型对象)，你可能说这不是里边有constructor和__p"}, {"id": "6982036240027615246", "title": "爱上Array.prototype.reduce", "desc": "reduce的简述 reduce() 方法接受一个数组作为输入值并返回一个值，这点比起其他方法来说非常的有趣。reduce 接受一个回调函数，回调函数参数包括一个累计器【accumulator】（"}, {"id": "6961683962204782629", "title": "ES6(1) let、const", "desc": "var 和let的区别 块级作用域比较: 闭包写法比较： 循环加异步问题： 常量(const)：值是不可变的 常量引用对象的属性可以更改 不能重复声明 支持块级作用域"}, {"id": "6995162584726896677", "title": "JavaScript 内置对象 Array 的常用方法", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 pop() 用途：删除并返回数组最后一个元素。 语法：arr.pop() 当数组为空的时候，返回 undefined 参考：Array.p"}, {"id": "6977525903429959716", "title": "原生js  之  (DOM操作）", "desc": "Web API Web API是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM) JavaScipt由三部分构成 ECMAScript、DOM和BOM。 BOM浏览器对象模型，提供了"}, {"id": "6844904113675698183", "title": "该不该扼杀过多的if-else", "desc": "抛开其他因素，如果if-else过多，可读性也许会好也可能会降低，可维护性也是或高或低；如果if-else少，代码高度抽象，可读性会低或者不变，可维护性可能会高也可能会低。这里大概可能会有几种情况 这种情况，if精简不精简，可读性是不会变的，但是精简程度和可维护性是正相关的。至…"}, {"id": "6993680870867632159", "title": "【日拱一卒】JavaScript面向对象精要 一", "desc": "这是我参与8月更文挑战的第7天，活动详情查看： 8月更文挑战”  前言 《JavaScript面向对象精要》梳理 JavaScript类型 JavaScript类型有两种，分别是原始类型和引用类型。 "}, {"id": "6844903923229130766", "title": "面试官： 你为什么这么强，什么都敢盘（reduce）", "desc": "1. 用reduce实现数组一些api 2. 不是数组怎么reduce 上面的测试也用了reduce，是对一个对象reduce。只要是遍历某个数据结构，产生一个结果，那么都可以使用reduce解决： 3. compose思想 这样子，对每一个元素filter一下，遍历一次。对每…"}, {"id": "6844903916870565895", "title": "原生JS实现移动端在线签协议", "desc": "下面就来记录下历程。 如上图，需要做的就是做下面就来记录下历程。 如上图，需要做的就是做一个签字板可以在一个签字板可以在"}, {"id": "6844903585164034055", "title": "前端入行的这三年 | 掘金技术征文", "desc": "本文将分享我的个人工作经历，介绍自己选择前端行业的考虑以及近四年的职业发展和技术规划。在自己专业不佳的情况下，自己获得了自己比较满意的一个现状。 我毕业的大学不是985、211，就普通的一本，专业是信息管理与系统系下电子商务专业，，于2014年毕业，毕业后在一家创业公司一直从事…"}, {"id": "6995159353632227336", "title": "【日拱一卒】JavaScript类与继承", "desc": "这是我参与8月更文挑战的第11天，活动详情查看： 8月更文挑战”  前言 由浅入深，深入浅出。梳理一下JavaScript类与继承。 什么是原型 在不同的编程语言中，设计者也利用各种不同的语言特性来抽"}, {"id": "6844904119828742152", "title": "30分钟开发一款抓取网站图片资源的浏览器插件", "desc": "由于业务需求, 笔者要为公司开发几款实用的浏览器插件,所以大致花了一天的时间,看完了谷歌浏览器插件开发文档,在这里特地总结一下经验, 并通过一个实际案例来复盘插件开发的流程和注意事项. 如果对浏览器插件开发比较熟悉的朋友可以直接看最后一节插件开发实战。 下面我们来具体讲解一下浏…"}, {"id": "6934546244727980046", "title": "Remax 使用及实现原理", "desc": "个人理解:react-reconciler充当了一个调节器，在react-core执行各种虚拟dom操作过程中提供hooks和已处理完成的vNode，给渲染器使用。 remax实现原理采用了react-reconciler，react-reconciler是react和rend…"}, {"id": "6888911624871084046", "title": "JavaScript的offset、client、scroll家族属性", "desc": "​ 偏移量(offset dimension)是javascript中的一个重要的概念。涉及到偏移量的主要是offsetLeft、offsetTop、offsetHeight、offsetWidth这四个属性。当然，还有一个偏移参照——定位父级offsetParent。本文将详…"}, {"id": "6938417460743766024", "title": "cropperjs实践及中文文档（自译）", "desc": "如图，可以对指定的图片进行裁剪，可以自己选择裁剪的交互方式，如大小、纵横比等 还可以预览裁剪区域，确认裁剪后可以生成一个包含裁剪图的canvas对象，借助canvas的toDataURL方法可以生成一张Base64格式的图片。还有另外一种不使用canvas的方式，利用该工具丰富…"}, {"id": "6844903982574338061", "title": "前端图片上传那些事儿", "desc": "本文讲的图片上传，主要是针对上传头像的。大家都知道，上传头像一般都会分成以下 4 个步骤： 接下来，就详细的介绍每个步骤具体实现。 选择图片有什么好讲的呢？不就一个 input[type=file] ，然后点击就可以了吗？确实是这样的，但是，我们想要做得更加的友好一些，比如需要…"}, {"id": "6981309845378973727", "title": "js 判断当前页面处于什么设备终端和浏览器环境", "desc": "背景 很多H5的项目，需要判断宿主环境的处于什么设备终端和浏览器环境， 比如微信微博钉钉的分享. 需要通过js就可以判断当前页面是在什么浏览器打开的。"}, {"id": "6844904101893898247", "title": "这5个 console.log() 技巧帮你提高工作效率", "desc": "我们知道 console.log(message)用法很简单，表示将参数message 打印到控制台上。 本文主要介绍5个有用的技巧，可帮助你在使用console.log()时提高工作效率。 1. 打印全名变量 如果在控制台打印多个变量，是数量比较多的情况下，我们很难区别哪个变…"}, {"id": "6983690566475186212", "title": "Vue3.0 项目实战中踩坑总结", "desc": "Vue3.0 项目实战中踩坑总结 生命周期钩子 setup reactive、ref与toRefs reactive 在 reactive 使用基本类型参数"}, {"id": "6986899497012428837", "title": "关于this指向的极简解析，搞懂80%以上的指向问题", "desc": "用通俗易懂的方式来理解 this。通过 call 调用形势入手，介绍 5 种情况下 this 的指向，结合面试题解析来巩固知识。"}, {"id": "6844903553136328718", "title": "JavaScript:(a==1 && a==2 && a==3)能输出true么？", "desc": "有人会说，这个问题好奇葩，放在别的语言里，这要是能输出true，估计是见鬼了，但是你别说，放在js中好真有可能。最近在一个人的推特上提了一个问题： 注意：这题里面我们用的是==而不是===，在js中==代表的是等于而不是全等，那么就存在变量的隐式转化问题。这就意味着结果会比我们…"}, {"id": "6908874159019786253", "title": "可视化正则表达式教程", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 在NLP中，根据模式检查文本或从文本中提取与特定模式匹配的内容是常见的任务。正则表达式是实现这一点的强大帮手。 尽管功能强大，但是正则表达式经常令人生畏，因为它有…"}, {"id": "6844903709529358350", "title": "loading动画的性能优化-摒弃Canvas，拥抱CSS3-实现点击特效", "desc": "可以看到这个函数js计算非常少，只有在创建和删除做了一些循环。而且用了createDocumentFragment尽可能的减少了dom操作，对性能提升也有很大帮助"}, {"id": "6844903581762453512", "title": "2018三月份前端面试总结 | 掘金技术征文", "desc": "第二是寻找合适的职位，让我可以在工作中学习和运用主流的框架。 但是经过某大神的指点后，觉得像我这种大公司切图仔，组件组装人员来说，最好的方式就是不断地通过写代码，夯实自己的基础，再夯实自己的基础，才是我的正确的学习道路吧。如果您也和我一样迷惑，强烈推荐胜洪宇老师的这篇文章，真的…"}, {"id": "6868280215672455176", "title": "懒加载图片以获取最佳性能的最佳方案", "desc": "图片懒加载是一个很受欢迎的优化站点的方法，因为它很容易实现，并且能明显提升性能。使用惰性加载，我们可以异步加载图片，这意味着可以只加载浏览器视口内的图片。 大约一年前，图像和iframe的原生惰性加载特性已发布，但是仅针对谷歌和其他主流浏览器。该功能的重点是使浏览器可以控制何时…"}, {"id": "6992152925715841032", "title": "【重学JS】每天坚持,巩固学习,打好基础-day2", "desc": "跟着节奏, 每天学习一点点! 巩固学习 JavaScript基础知识, 加深理解记忆, 打牢地基才能筑高楼! 加油 大部分内容为白话文内容, 将基础知识用自己的理解, 简单又全面概括基础知识点"}, {"id": "6995405952681771022", "title": "JavaScript基础-DOM", "desc": "这是我参与8月更文挑战的第10天，活动详情查看： 8月更文挑战 ​  什么是DOM？ DOM，全称为Document Object Model（文档对象模型）。 在JS中通过DOM来对HTML文档进行"}, {"id": "6971366203084242975", "title": "vue+element el-upload上传的二次封装", "desc": "不得不说，vue+elemenUI开发后台管理系统，就像西红柿配鸡蛋一样，真的超搭哒~~（不是说vue搭其他UI库就有缺陷，但从业务出发来说无疑是快和强的。"}, {"id": "6982753951510691854", "title": "JavaScript的轮播图", "desc": "轮播图：在一个模块或者说窗口，通过电脑上鼠标点击、手机上手指滑动后，可以看到多张图片。这些图片就都是轮播图，这个模块就叫做轮播模块。 如何才能在js里面做成一个轮播图呢，比如下面这种的，可以自动生成图"}, {"id": "6844903497356279821", "title": "前端 101：给不了解前端的同学讲前端", "desc": "大家好，今天的分享主要分为以下三个部分。 由于目前计算机专业还没有为 Web 前端技术设立专门的课程，每位同学对前端的了解程度也不一样，今天的讲座会以最浅显的方式来为大家介绍 “前端”，帮助大家建立一个基本的概念。 我们来简单地看一看 “网页展现” 的整个过程。 比如这里有一个…"}, {"id": "6978408420802035749", "title": "防抖节流函数", "desc": "1：作用 解决了疯狂点击导致页面一直加载的问题，和后台疯狂接到请求的问题 杜绝前端页面由于连续加载产生抖动，和后台连续不断请求浪费流量的问题 2：原理 在加载时候，只要再次触发，就会自动延时执行事件函"}, {"id": "6987744271084290055", "title": "JS中的数据类型", "desc": "number/string/boolean/bigint/symbol/object/function"}, {"id": "6844903568772710414", "title": "一年前端面试打怪升级之路（二）", "desc": "最想去的一家公司，参加过他们的技术分享会，技术氛围早有耳闻。不局限于做商业化的项目，而是会投入精力去做优化流程和提高效率的事情，开发开源工具，或者重构老旧项目等等 在我问到部门工作流程，第一位面试官说了一句话：在确定好技术选型后，怎么爽怎么写。 全程历时将近3小时，是学到最多的…"}, {"id": "6994069943763337223", "title": "js数组的详细使用总结 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 数组对象的作用 使用单独的变量名来存储一系列的值。数组是一种特殊的对象 数组的创建方式 1.字面量 var arr = [1,2,3,4];"}, {"id": "6935212632173445151", "title": "力扣 (LeetCode)-合并两个有序链表,删除排序数组中的重复项,JavaScript笔记｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 21. 合并两个有序链表 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 使用递归来解，将两个链表头部较小的一个与剩下的元素合并，并返回排好序的链表头，当两条链表…"}, {"id": "6988352110207172638", "title": "初学者必须知道的对于面试的技术记汇", "desc": "如何回答的一个技术记汇，或你对xxxx的理解 例如：你说一下对闭包的理解 答：1.xxx是什么 ​ 2.应用场景 ​ 3.优缺点 ​ 4.具体实现 ​ 5.还有没有更好的解决方案！ 一、闭包 闭包是由"}, {"id": "7000657280425263111", "title": "JS的异常处理机制", "desc": "在 JavaScript 中，每当发生运行时错误以及程序使用 throw 语句显式抛出异常时，都会抛出异常。用 try/catch/finally 语句捕捉异常。"}, {"id": "6976553406890508295", "title": "前端离线缓存之 “ Service Worker ” ", "desc": "Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用采取来适当的动作、更"}, {"id": "6993711769281626119", "title": "【从头学前端】05-详解JavaScript中的35种运算符", "desc": "JavaScript中的35种运算符的使用方法 本篇文章我们来学习JavaScript中的运算符，通过学习本篇本章我们可以掌握如下内容"}, {"id": "6844904127462391821", "title": "Taro Next H5 跨框架组件库实践", "desc": "Taro 是一款多端开发框架。开发者只需编写一份代码，即可生成各小程序端、H5 以及 React Native 的应用。 过去的 Taro 1 与 Taro 2 只能使用 React 语法进行开发，但下一代的 Taro 框架对整体架构进行了升级，支持使用 React、Vue、N…"}, {"id": "6844903572950220807", "title": "从零开始搭建一个vue项目", "desc": "具体怎么安装nodejs和vue-cli的部分就不再具体说明了，查看官方文档按步骤执行即可（安装nodejs会默认安装npm（包管理工具），vue-cli依赖npm来安装，注意这个先后关系）。 关于什么是模块化？推荐阅读这两篇文章 JavaScript 模块化入门Ⅰ：理解模块 …"}, {"id": "6886089003481694215", "title": "前端如何一键生成多维度数据可视化分析报表", "desc": "本文是基于上一篇文章介绍H5编辑器 后台管理系统实战的第二篇文章, 也是比较重要的一篇文章, 主要介绍后台系统中如何基于已有数据表格自动生成多维度可视化报表. 笔者之所以会花3篇文章去介绍这一块的内容, 是因为目前B端产品很多都有类似的需求, 比如导入导出excel, 在线编辑…"}, {"id": "6967293500572303367", "title": "JavaScript Array、Object、数组、对象等数据转换及处理总结（二）", "desc": "数组对象去重 数组对象去重，在从读取数据的时候，由于用户不断地新增数据，会导致依据 pageNo 获取回来的数据不准确出现重复，这时候就要用到数据对象去重，个人觉得最常用最好用的肯定是对象变量去重法 "}, {"id": "6916386899678461960", "title": "《看完就懂系列》天哪！搞懂节流与防抖竟简单如斯~", "desc": "今天来谈一谈节流与防抖，这是一个老生常谈的概念，实际应用也特别多，面试中经常会问到。可还是有很多初学者不明白，搞不懂两者之间的区别，或者两者的概念与实际应用中的差别（比如我刚接触的时候就是搞不明白这两个绕来绕去的概念）。其实明白之后就豁然开朗，觉得很简单了。所以今天我们来谈一下…"}, {"id": "6854573211552579592", "title": "精读《对低代码搭建的理解》", "desc": "在说低代码搭建之前，首先要理解什么是搭建（本文搭建指通过 Web 交互搭建一个自定义的新页面）。 对研发人员的提效：相对于 Pro Code 模式，搭建的抽象程度更高，通过牺牲部分定制性换来更高效的开发方式。 对客户的提效：如果用户有任何搭建 Web 应用的诉求，本质上从阿里云…"}, {"id": "6954173835956453406", "title": "JavaScript中，关于作用域的理解", "desc": "前言 在javascript中，有着一种被称为作用域（scope）的特性。它也是理解闭包的前置知识，本文着重于理解作用域，以便在下一篇文章中，学习并理解闭包。 作用域(Scope) 作用域是什么？ 作"}, {"id": "6844904073829810190", "title": "女友都懂系列之防抖与节流分析", "desc": "在日常开发或者面试中，防抖与节流应该都是属于高频出现的点。这篇文章主要是基于冴羽（后续用他代称）大神的两篇文章 防抖 与 节流来写的。因为自己在看他文章的时候也对其中的代码产生了一些困惑，有一些卡住的地方，所以想把自己遇到的问题都抛出来，一步步的去理解。 文中具体的场景demo…"}, {"id": "6989409760990724103", "title": "VUE3（二十七）自定义upload上传组件（显示上传进度）", "desc": "项目中需要使用到文件上传。我这里自己定义了一个上传文件的组件 支持显示上传进度显示（我这里显示的是真实的上传进度，当然，这个可以根据你自己的需求修改）。 支持多文件上传。 最终效果如下： 代码： Up"}, {"id": "6918893948412887053", "title": "现代 Web 富文本编辑器 Quill.js - 从基本使用到核心概念", "desc": "Quill 是一款非常优秀的 Web 富文本编辑器，近半年 npm 周下载量一直在 40w+ ，用户量很大。 Quill 的官网 我有时候打不开，有时候打开很慢。于是，找到一篇中文翻译的文档和当前 npm 版本很接近。 从底层实现上，Quill 也和 slate.js 一样，是…"}, {"id": "6977367686179356680", "title": "JavaScript：孔乙己的类型判断", "desc": "这是我参与更文挑战的第24天，活动详情查看： 更文挑战 什么是孔乙己？ 最经典的孔乙己当然是出自鲁迅先生的小说《孔乙己》了，而最令人记忆犹新的片段大概就是孔乙己抓着小孩子考校他们“回”字有几种写法的这"}, {"id": "6844904016363667469", "title": "手摸手教你写个ESLint 插件以及了解ESLint的运行原理", "desc": "这篇文章目的是介绍如何创建一个ESLint插件和创建一个ESLint rule，用以帮助我们更深入的理解ESLint的运行原理，并且在有必要时可以根据需求创建出一个完美满足自己需求的Lint规则。 禁止项目中setTimeout的第二个参数是数字。 PS： 如果是数字的话，很容…"}, {"id": "6844903633557913608", "title": "Taro 技术揭秘：taro-cli", "desc": "Taro 是由凹凸实验室打造的一套遵循 React 语法规范的多端统一开发框架。 使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信小程序、H5、App 端等）运行的代码。实现 一次编写，多端运行。 关于 Taro 的更多…"}, {"id": "6844904042322198541", "title": "前端必看的js对象深拷贝方法", "desc": "首先js的数据值按照类型主要分为两大类，基本数据类型和引用数据类型。基本数据类型包括Undefined、Null、Number、String、Boolean、Symbol；引用数据类型则为Object,那些Array、Set、Map数据也属于Object。 从上述代码和图可以看…"}, {"id": "6999808941236420616", "title": "手写call、apply、bind方法", "desc": "Function.prototype.call() 方法介绍 语法Function.prototype.apply() Function.prototype.bind()"}, {"id": "7001842718477385735", "title": "【JavaScript】17.文档对象模型补充", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 文档对象模型补充 01.操作元素 （1）获取元素的另一种方法 利用节点层级关系获取元素 基本属性： nodeType、nodeName、n"}, {"id": "6844903934411145223", "title": "新手学习 react 迷惑的点(二)", "desc": "第一篇反响也还不错，很多新手都觉得很有帮助，解答了他们很久以来的疑惑，其实第一篇里面的还算基础的，主要是 ES6 语法和 JSX 没有深刻理解。 这第二篇稍微要难一点，有的需要了解 React 的原理才能搞明白的，不过你放心，我都用了最简单最简单的语言，即使你是个新手，如果产生…"}, {"id": "6944991350613868575", "title": "关于JavaScript中的排序问题", "desc": "本篇文章将总结常用的几种排序算法，并对其进行详细分析理解，以解决问题为驱动，分析其的各个应用场景，为之后排序类算法刷题打下基础，达到能根据各排序算法的特性，结合题目场景能迅速选择相应排序方法的效果。着重强调——最后的的归并排序和快速排序非常重要。 1. 先出一道排序题 题目：l…"}, {"id": "6963922973237444621", "title": "Koa+MySql搭建博客后台记录（一）", "desc": "基础环境搭建 第一步，服务器环境搭建 1. 安装nginx 服务器安装好系统后，我选择先安装nginx 参考文章： Linux安装Nginx详细教程 按照教程很快就能安装成功，我并没选择Nginx，而"}, {"id": "6999260151047782436", "title": "JS 匿名函数、()=>({})的用法含义", "desc": "一、{} 包围对象object；包围代码块code block （如方法体，或普通代码块等） 二、() 包围参数列表；作为自调用表达式，包围一些需要通过运算得出结果的代码(其中包围的代码会执行一次)。"}, {"id": "6985115382193324069", "title": "stopPropagation, preventDefault 和 return false 的区别", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我(全网同名)，解锁前端成长新姿势。 以下正文： stopPropagation 阻止事件的冒泡和捕获。 因为事件可以在各层级的节点中传"}, {"id": "6931177992689451022", "title": "门神——转转FE代码校验系统", "desc": "每逢新春佳节，家家户户都会按照习俗，在门上贴上凶神恶煞的门神，希望能驱邪避灾，保护家人平安。 而转转FE团队，也在农历新年前，正式上线了门神系统——一个在 编译 &#x26; 部署 环节可以通过静态扫描，发现并拦截含有不安全代码的项目上线的系统，保护线上项目稳定运行。 我们先从…"}, {"id": "6844904093601759239", "title": "JavaScript 深入之浮点数精度", "desc": "0.1 + 0.2 是否等于 0.3 作为一道经典的面试题，已经广外熟知，说起原因，大家能回答出这是浮点数精度问题导致，也能辩证的看待这并非是 ECMAScript 这门语言的问题，今天就是具体看一下背后的原因。 ECMAScript 中的 Number 类型使用 IEEE75…"}, {"id": "6844903940031545357", "title": "逐步优雅的表单验证", "desc": "最近被 Jasmine 产品大大的需求耽搁了挺长时间，许久没落笔，心里有点惶恐，所以特此沉淀以缓解焦虑😂。今天主要分享的是关于表单验证的一些知识，大家应该都晓得，就是验证用户名、邮箱、手机号啥的，虽然食之无味，但弃之可惜😬。 通常来说表单验证可以分为两种：即时验证（本地校验…"}, {"id": "7004733913209765901", "title": "JS -- this相关的练习题", "desc": "判断this 给元素的某个事件绑定方法，当事件触发方法执行的时候，方法中的this是当前操作的元素。 方法执行，看方法前面是否有点，有点，点前面是谁，this就是谁，没有点this就是window（在"}, {"id": "6907456394052501511", "title": "程序员写给女朋友的8款效果", "desc": "马上就到圣诞节了，这里准备了8款表白特效分享给大家，毕竟程序员有个女朋友不容易。 程序员找女朋友其实很简单。 代码都是网上搜索然后经过本人修改整理的，没什么技术含量，提给共需要的老铁，已上传至github，文章末尾提供下载地址，需要者自取。话不多说，上图。 不给小姐姐拒绝的机会…"}, {"id": "6979763242134405128", "title": "Clipboard API：全新的异步复制、粘贴API", "desc": "Clipboard API 提供（如果用户授予权限）对系统剪贴板内容的读取和写入访问权限。 Clipboard API 可用于在 Web 应用程序中实现剪切、复制和粘贴功能。"}, {"id": "6844903556722475021", "title": "【译】如何在5分钟内让HTTPS在您的本地开发环境中工作", "desc": "今天，几乎所有你访问的网站都是受HTTPS保护的。如果你还没有这样做，是时候这样做了。使用HTTPS保护您的服务器也就意味着您无法从非HTTPS的服务器发送请求到此服务器。这对使用本地开发环境的开发人员来说是一个问题，因为这些本地开发环境都是运行在http://localhos…"}, {"id": "6844904085083127821", "title": "面试官: 聊一聊 HOC、Render props、Hooks", "desc": "在以前我们可能会看到很多文章在分析 HOC 和 render props, 但是在 2020 年 ,我们有了新欢 “hook” . 本篇文章会分析 hook , render props 和 HOC 三种模式的优缺点. 让你彻底理解这三种模式. 并且, 告诉你为何应该尽可能使用…"}, {"id": "6962859676224454663", "title": "前端进阶：正则表达式", "desc": "还在为面试题写不出正则而烦恼吗？还在为开发中写不出对应的校验而苦苦百度吗？还在为看不懂正则改不动而苦苦求人吗？不如进来看看，正则速成练习！"}, {"id": "6909346562942435341", "title": "nodejs搭建本地服务器来访问本地文件", "desc": "有时候会有这么一个需求，本地写了一个demo需要同局域网的同事看一下，或者写了一个移动端的demo需要手机上进行调试，或者demo里要使用es6的语法，网页打开HTML文件就无法实现，需要在本地起一个"}, {"id": "6844904149516189710", "title": "【译】CSS 中你需要知道 auto 的一切！", "desc": "在CSS中，我们有auto值，它可以用于像margin，position，height，width等属性。在本文中，会先解释auto的工作方式以及如何最大程度地利用auto的技术细节,当然，会配合一些用例和示例。 auto关键字的使用因属性而异。 对于本文，我将在每个属性的上下…"}, {"id": "6908034872464375815", "title": "js中的深度/广度优先遍历", "desc": "深度遍历(DFS)和广度遍历(BFS)是数据结构遍历的两种常用方式，广泛运用在处理树形结构的数据类型，例如：处理目录、数据结构树形化、diff算法等等。DFS的处理逻辑如下（左）BFS如下（右）。 本文抛砖引玉的介绍了两种常见的遍历模式，在选择上如果是case1这种结构重组，建…"}, {"id": "6913742008955699214", "title": "canvas实现简单签名功能", "desc": "业务员做申请提交时要签名。。。"}, {"id": "6844903571083755533", "title": "2017 前端技术发展回顾", "desc": "HTML 5.2 发布。 毫无疑问，这是 Vue.js 在流行中飞速发展的一年。 前端 HTML & CSS 开发者和前端应用程序开发者之间的巨大区别终于被认知，并重新定义。 作为使用 web 技术构建应用程序的前端 JavaScript 开发者变得越来越好，也越来越糟。 今年…"}, {"id": "6977774991798435854", "title": "设计模式|JavaScript实现策略模式", "desc": "策略模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。"}, {"id": "6977564010036068360", "title": "五个问题之JS", "desc": "问题1：浏览器控制台上会打印什么？ 问题2:如果我们使用 let 或 const 代替 var，输出是否相同？ 问题3：“newArray”中有哪"}, {"id": "6999222144869597214", "title": "【重温JS】JavaScript 巩固基础day22-服务器端和客户端", "desc": "☆☆☆ 今天学习的内容: ( 服务器端和客户端相关 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! 加油! 认真对待 day22"}, {"id": "6844903998261035021", "title": "《前端实战总结》之使用pace.js为你的网站添加加载进度条", "desc": "最近做网站体验优化的时候突然发现一个好东西，pace.js(加载进度条插件)，gzip之后只有几kb， 简单好用，特地分享出来，也作为自己的一个学习总结。 pace.js是一个自动加载页面进度栏的小插件,它可以自动监视您的Ajax请求，事件循环滞后，文档就绪状态以及页面上的元素…"}, {"id": "7004081972201029669", "title": "异步与Promise", "desc": "什么是异步？什么是同步？什么是回调？ 异步 如果能直接拿到结果那就是同步 比如在医院挂号，你拿到号才会离开 同步任务可能消耗10毫秒，也可能需要3秒 总之拿不到结果不会离开 如果不能直接拿到结果那就是"}, {"id": "6844903713060945934", "title": "理解 JavaScript 中的高阶函数", "desc": "本文将让大家了解什么是高阶函数以及如何在 JavaScript 中使用它们。 如果你正在学习 JavaScript，那么你应该见过高阶函数这个术语。 它虽然听起来很复杂，但其实并不难。 使 JavaScript 适合函数式编程的原因是它接受高阶函数。 高阶函数在 JavaScr…"}, {"id": "6993235054000341023", "title": "【重学JS】坚持学习,巩固基础-作用域&事件", "desc": "持续更新, 可作为初学者的学习路线, 可参考以下, 学习进度也不是特别赶! 用自己的理解, 简单又全面概括基础知识点, 大部分内容为大白话"}, {"id": "6988900434547048485", "title": "原生JS SDK开发浅见", "desc": "在开发JS SDK时，『原生 or 框架』不同人不同场景都有不同的选择。本文源于实际项目场景，阐述一些在原生环境下『不顺手』问题的处理。"}, {"id": "6998331284393033735", "title": "理解JavaScript函数reduce", "desc": "reduce函数基本用法 语法： 作用： 接收一个函数作为累加器,为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（上一次回调的返回值），当前元素值，当"}, {"id": "6993147861508554759", "title": "一个小需求带你了解防抖和节流", "desc": "一个小需求带你了解防抖和节流，最近遇到这样一个需求场景：需要做一个底部的button，在页面滚动的时候底部按钮向下收起，停止滚动的时候向上弹出，收起和弹出添加动画效果"}, {"id": "6952097906174197790", "title": "浅谈JavaScript中的作用域", "desc": "作用域决定了变量的生命周期（与函数、块级作用域相关） 任何变量都有生存周期，通俗的理解作用域就是函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。"}, {"id": "6844903598422228999", "title": "如何定义一个高逼格的原生JS插件", "desc": "作为一个前端er，如果不会写一个小插件，都不好意思说自己是混前端界的。写还不能依赖jquery之类的工具库，否则装得不够高端。那么，如何才能装起来让自己看起来逼格更高呢？当然是利用js纯原生的写法啦。以前一直说，掌握了js原生，就基本上可以解决前端的所有脚本交互工作了，这话大体…"}, {"id": "6997413650239602719", "title": "JS算法之重建二叉树及用两个栈实现队列", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 重建二叉树 输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。"}, {"id": "6895904078488928264", "title": "【你不知道的JavaScript】搞懂了再手写", "desc": "和其他“圈子”里的同学们不一样，前端圈子里的同学们都很热衷于“手写xxx方法”，基本上每天在掘金里都可以看到类似的文章。但是，很多文章（不代表全部，无意冒犯）大都是囫囵吞枣、依葫芦画瓢，经不起推敲和考究，很容易误导那些对JavaScript刚入门的新同学。 鉴于此，本文将基于《…"}, {"id": "6844904095690522632", "title": "高效的编码：我的VS Code设置", "desc": "代码编辑器很多，有些是免费的，有些是付费的。其中最喜欢的代码编辑器是 Visual Studio Code。它是免费的，并具有强大的功能，我陆续抛弃了 Atom、Sublime Text 以及也很强大的 WebStorm。 今天，我将分享我最喜欢的代码编辑器设置，用于我的 We…"}, {"id": "6844903635537625095", "title": "创建前端数据模型，vue开发必备", "desc": "其实，这个库，我们已经用了2年了。 我们将前端所有使用的业务数据模型都定义出来了。 减少了无数的冗余代码，避免了非常多容易产生的bug。 也没有出现过什么因为数据缺失，导致页面报错的问题，比如一些：{{user.org.title}}这种展示。 同时，这里用到的日期格式工具是m…"}, {"id": "6844904162405138445", "title": "霖呆呆的六个自定义Webpack插件详解-自定义plugin篇(3)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 有很多小伙伴在打算学写一个webpack插件的时候，就被官网上那一长条一长条的API给吓到了，亦或者翻阅了几篇文章之后但还是不知道从何下手。 而呆呆认为，当你了解了整个插件的创建方式以及执行机制之后，那些个长条的AP…"}, {"id": "6844904081803182087", "title": "typeof和instanceof原理", "desc": "这里的类型指的是值，变量是没有类型的，变量可以随时持有任何类型的值。JavaScript中\b变量是“弱类型”的，\b一个变量可以现在被赋值为 字符串类型，\b随后又被\b\b赋值为数字类型。 typeof是一个操作符而不是函数，用来检测给定变量的数据类型。 typeof null 为什…"}, {"id": "6965432333038321701", "title": "手写Promise，完美实现Promise/A+规范", "desc": "什么是Promise Promise； Promise的出现解决了什么问题； 实现Promise； 测试是否符合Promise/A+规范； 如何实现 async 和 await；"}, {"id": "6965294779484045326", "title": "Node.js断点续传", "desc": "前言 平常业务需求：上传图片、Excel等，毕竟几M的大小可以很快就上传到服务器。 针对于上传视频等大文件几百M或者几G的大小，就需要等待比较长的时间。 这就产生了对应的解决方法，对于大文件上传时的暂"}, {"id": "6995153804698058759", "title": "边学边译JS工作机制---28. Deno 一瞥", "desc": "总览 Deno是一个JS和TS的安全运行时。这一章简单介绍一下Deno，跟Node的区别，解析一些机制比如模块，包，异步，TS，安全和工具。 Deno起源 Ryan Dahl’s在2018年的JSCo"}, {"id": "6992840741554749476", "title": "DOM基础操作和事件流(进阶必备知识) ", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 在框架、工具琳琅满目的今天，很多同学可能会对 DOM 不屑一顾，但是如果你的目标是中型、大型公司的优质团队，或者是技术意识稍微强一些的小团队"}, {"id": "6844903977612640264", "title": "九层之台，起于累土：码良组件开发", "desc": "本文为“码良系统的使用及设计实现”系列文章的第三篇。 上篇文章给出了大量码良编辑器的使用实例，相信读者对于码良编辑器已经有了直观的认识。 可以看到，整个编辑器的核心是组件，其他配置或功能都是服务于组件的。 在码良系统中，组件是构成页面的基础元素，每个组件各自承担着特异的功能，比…"}, {"id": "6994230399958253575", "title": "js实现图片拖拽，定点缩放，旋转 （一）", "desc": "js实现图片拖拽，定点缩放，旋转（一）之-----拖拽篇，主要是基于offseLeft/offsetTop,clientX/clientY,onmousedown/onmousemove......"}, {"id": "6958460865905590285", "title": "事件循环学习笔记", "desc": "事件循环 浏览器的事件循环 事件循环的作用 众所周知，JavaScript 的执行是单线程的，在单线程运行的情况下如果我们不采取任何措施，那么我们的浏览器就很容易卡顿，比如获取远程数据，I/O 操作等"}, {"id": "6887478219662950414", "title": "[译]只使用 CSS 进行用户追踪", "desc": "在浏览器里进行用户追踪会引发关于隐私和数据保护一次又一次的讨论。类似 Google 分析之类的工具几乎可以抓到所有需要的内容，包括来源，语言，设备，停留时间等等。 但是，想获取一些感兴趣的信息，你可能不需要任何外部追踪器，甚至不需要 JavaScript。本文将向你展示，即便用…"}, {"id": "6844903950546632717", "title": "[源码解读]一文彻底搞懂Events模块", "desc": "清楚的记得刚找node工作和面试官聊到了事件循环，然后面试官问事件是如何产生的？什么情况下产生事件。。。 之前封装了一个 RxJava 的开源网络请求框架，也是基于发布-订阅模式，语言都是相通的，挺有趣。表情符号 作者简介：koala，专注完整的 Node.js 技术栈分享，从…"}, {"id": "6963848617249472525", "title": "javascript继承篇", "desc": "继承的7种方式 原型链继承 构造函数继承 组合继承 原型式继承 寄生式继承 寄生组合式继承 Es6 class extends 继承 原型链继承: 将父亲的实例作为孩子的原型. 优点: 父亲的方法可以"}, {"id": "6844904066389131272", "title": "程序员的“北漂”，我希望还能坚持下去", "desc": "极其劝告大家，能不异地恋就一定不要异地恋，当你喜欢的那个人需要人而你不能在身边的那种感受，你绝对想象不到，也绝对不高高估一个女生的承受能力。在一起的甜言蜜语时刻，一起想象的以后美好生活，都会在这一时刻崩溃。 当然我不是在埋怨对方，请你一定要知道，恋爱时的双方付出和努力，请不要因…"}, {"id": "6844903567782854664", "title": "【全是干货】谈谈如何学习一项新技能，没有理论，全是实战", "desc": "评论区有几位同学问我如何学习，今天就单独开篇文章来谈谈吧，欢迎各位大佬在评论区贴上自己的学习方法。 大致看一下官方文档，不要一个一个的仔细研究，太费时间也记不住（别担心，后面有方式帮你记牢），英语不好的（我的英语比较渣）推荐直接使用Chrome+谷歌翻译插件通篇翻译，读懂大概意…"}, {"id": "6992824713902817293", "title": "基础教程 5. arguments、递归和函数表达式", "desc": "1. 函数的实参集合-arguments； 2. ES6 不定参数； 3. arguments 应用之任意数求和； 4. 函数表达式； 5. 函数递归； 6.常用数组方法；"}, {"id": "6989887897012797454", "title": "JavaScript 阻塞方式实现异步任务队列", "desc": "问题 有个需求，需要实现一个异步任务队列，并依次处理队列中的所有任务，具体如下： 随机时间增加异步任务到队列中 队列中的任务按照先进先出的规则依次执行 任务为异步请求，等一个执行完了再执行下一个 这个"}, {"id": "6989029684939849741", "title": "VUE3（二十六）基于wangeditor自定义富文本插件", "desc": "项目中需要使用到wangeditor，这里封装一个自定义组件，便于后期使用。 首先，官方文档： https://www.wangeditor.com/ 1：安装 2：组件代码 Wangeditor.v"}, {"id": "6948810001783717918", "title": "手写JS-字符串模板", "desc": "前言：ES6（ES2015）为 JavaScript 引入了许多新特性，其中与字符串处理相关的一个新特性——模板字面量，提供了多行字符串、字符串模板的功能，相信很多人已经在使用了。字符串模板的基本使用"}, {"id": "6962363304912093191", "title": "cookies、sessionStorage和localStorage解释及区别", "desc": "sessionStorage 和 localStorage是HTML5中新增的两种本地存储机制，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了"}, {"id": "6858061122428862477", "title": "单点登录 SSO", "desc": "但随着企业的发展，用到的系统随之增多，用户在操作不同的系统时，需要多次登录，而且每个系统的账号都不一样，这对于用户来说，很不方便。于是，就想到是不是可以在一个系统登录，其他系统就不用登录了呢？这就是单点登录要解决的问题。比如 淘宝，支付宝，天猫商城等都使用单点登录，同一个账号可…"}, {"id": "6936891172547723301", "title": "JavaScript数据结构-队列", "desc": "大家好，我是前端图图，已经有段时间没有写文章了😅。回家过年之后就没有什么心思了，只想多陪陪家人。导致假期回来才慢慢找回感觉😅。好啦！下面废话不多说，就来聊聊数据结构队列。 队列和栈相似，但是使用和栈不同的原则。双端队列是队列和栈的原则混合在一起的数据结构。 队列是遵循先进先…"}, {"id": "6987970568775532558", "title": "使用babel对js代码进行tree-shaking", "desc": "实际的开发过程中，出于各种原因，经常会有些变量在声明后，并不会被真正使用，形成一些既不影响运行、也不容易被发现的坏代码。 同时，一般意义上的tree-shaking都是基于依赖分析；在编译过程中，一些"}, {"id": "6844903507405848589", "title": "打造丝般顺滑的 H5 翻页库", "desc": "打造丝般顺滑的 H5 翻页库"}, {"id": "6895894647424417806", "title": "在 JavaScript 中，我们能为原始类型添加一个属性或方法吗？", "desc": "JavaScript 允许我们像使用对象一样使用原始类型（字符串，数字等）。JavaScript 还提供了这样的调用方法。我们很快就会学习它们，但是首先我们将了解它的工作原理，毕竟原始类型不是对象（在这里我们会分析地更加清楚）。 我们来看看原始类型和对象之间的关键区别。 是原始…"}, {"id": "6844903591946223629", "title": "微信小游戏开发总结", "desc": "小游戏是小程序的一个类目，小游戏是微信开放给小程序的更多的能力，让小程序开发者有了开发游戏的能力。小游戏没有WXSS、WXML、多页面等内容，但加了一些渲染、文件系统以及后台多线程的功能。 小游戏的运行环境是小程序环境的扩展，基本思路也是封装必要的 WEB 接口提供给用户，尽可…"}, {"id": "6997061392561864741", "title": "边学边译JS工作机制--36. 浏览器可视化的历史", "desc": "概览 make our way to the vast graphics offerings of modern browsers. 这一章我们会回顾一下浏览器中的图形学历史。我们会看到一些老朋友，比"}, {"id": "7000711447592304653", "title": "两个性能优化函数：限流与防抖", "desc": "限流函数和防抖函数是为了应对“事件处理的速度跟不上事件触发的速度”这样的场景而产生的优化函数，使用这两个函数可以有效提升代码执行性能。"}, {"id": "6936559478909665316", "title": "[译]重新审视 undefined 和 null｜技术点评", "desc": "很多的编程语言都有一种表示空值的类型，叫做 null。它指示了一个变量当前并没有指向任何对象 —— 例如，某个变量还没有初始化的时候。 作为不同，JavaScript 则拥有两种表示空值的类型，一种是 undefined，另一种则是 null。在这篇文章中，我们将测试它们的区别…"}, {"id": "6972358080415662094", "title": "vscode 简单插件玩一下（一）", "desc": "前言 这几年前端开发，一直采用 vscode 来编写代码，用了很多的插件，但是这些插件是怎么开发的，脑瓜子还是嗡嗡的，所以趁着现在还感兴趣，就来玩一下。不要求开发一个多复杂，能简单了解下其中的原理就行"}, {"id": "6961715380893319198", "title": "ES | JS 常用方法整理", "desc": "JS 函数大杂烩 由于开发过这种,对与js的很多函数都不太属性.在面对百度开发的过程中.调试 + 搜索占用了过多的时间 .因此在这里对常用的一些函数进行汇整理. 方便下次开发直接取用 .该文字会再后期"}, {"id": "6911242598266978311", "title": "JS ｜ 防盗链 🤨", "desc": "先说说防盗链的原理，http 协议中，如果从一个网页跳到另一个网页，http 头字段里面会带个 Referer。 这里的Referer是由于历史原因导致了拼写错误 后来也就一直沿用。 图片服务器通过检测 Referer 是否来自规定域名，来进行防盗链。 则从 https 向 h…"}, {"id": "6993693898665099277", "title": "JS的方法参数传递（按值传递）", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 一句话总结 JS的方法参数是按值传递的。"}, {"id": "6952659317015183397", "title": "前端刷题路-Day21｜刷题打卡", "desc": "爬楼梯（题号70） 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？"}, {"id": "7002207866882883598", "title": "call、apply和bind小结", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 前言 未来的日子，愿你把自己调至最佳状态，缓缓努力，慢慢变好 Y(^o^)Y"}, {"id": "6915200398512881672", "title": "Node.js 中如何收集和解析命令行参数", "desc": "在开发 CLI（Command Line Interface）工具的业务场景下，离不开命令行参数的收集和解析。 接下来，本文介绍如何收集和解析命令行参数。 由上述示例可以发现，Node.js 在处理命令行参数时，只是简单地通过空格来分割字符串。 对于这样的参数数组，无法很方便地…"}, {"id": "6913126971274854413", "title": "绘制 DOM 到 Canvas", "desc": "Canvas API 提供了一个通过 JavaScript 和 HTML 的 canvas 元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。 除了以上的内容，还可以直接绘制 DOM。 知道了原理，下面就来逐步实现这个功能。 至于为什么…"}, {"id": "6941732312400805902", "title": "自己做个 Material Ripple 效果的按钮｜项目复盘", "desc": "我第一次发现 Material Design 是几年前玩 Android（当时还不会开发 Android 应用程序）时候看到的些贴文。那时候我就超级喜欢它的按钮组件。它有着波纹效果，以简单，优雅的方式为用户提供反馈，Q 弹爆汁儿～ 我打算用 JavaScript 监听点击事件，…"}, {"id": "6998062259981254692", "title": "粗略看看JS函数", "desc": "JS函数 1.函数的定义 ​ 函数时JS里面比较有趣的一部分，因为函数实际上是对象。每个函数都是Function类型的实例，而Function也有属性和方法。因为函数是对象，所以函数名是指向函数对象的"}, {"id": "6974183607762059271", "title": "你了解过JSON.parse吗？", "desc": "这是我参与更文挑战的第5天 JavaScript的JSON字符串转换为JS对象的方式我们常常用的有三种: 将字符串转换为Java对象的方式 var json = JSON.parse(str);"}, {"id": "6844903550938529800", "title": "别找了，这就是你想要的年会抽奖开源项目", "desc": "项目是在2016年年底给公司做的年会抽奖项目，自豪的采用jquery和原生js开发，利用非工作时间于一个月左右独立开发而成，想当年，那时我还没在项目中使用MVVM框架开发，而是稳妥的采用了我的jQuery老朋友，最后在公司年会上因为我们技术部抽的奖比较多而被群众纷纷质疑(虽然项…"}, {"id": "6844903873992376334", "title": "【译】async/await 应知应会", "desc": "async/await 是在 ES7 版本中引入的，它对于 JavaScript 中的异步编程而言是一个巨大的提升。它可以让我们以同步的方式处理异步的流程，同时不会阻塞主线程。但是，想要用好这一特性，可能需要动点脑筋。本文中，我们将从不同的角度探讨 async/await，同时…"}, {"id": "6995730180107534349", "title": "前端刷题路-Day79：只出现一次的数字（题号136）", "desc": "给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外..."}, {"id": "6844903776613040135", "title": "Facebook 对前端工程师的要求是啥？一起来看看", "desc": "近日，Redux 作者 Dan Abramov(@dan_abramov)发 Twitter 表示: 我们更新了发给前端工程师候选人的措辞，以更好地反映该角色在 Facebook 的面试过程。希望能帮助大家准备面试！ 👀我们一起来看看具体的内容叭。 我们将尽量保持实用性，并关…"}, {"id": "6844903651824123912", "title": "前端也要会的数据结构 （不定期更新篇）", "desc": "一说到前端大家脑子里只有，布局、展示数据、修改样式等等。可是数据是哪里来的呢？后端给的后端给的。数据的结构呢？后端给啥用啥。 这就是前端的一个软肋。我们的业务让我们并不需要过深入的了解数据结构，数据结构和算法是一个程序员的基础。无论是前端开发还是后端开发、还是AI机器学习大数据…"}, {"id": "6904527168060325901", "title": "addEventListener实现原理", "desc": "1.创建一个listeners对象，对象上的每个属性代表一种监听类型。 2.listeners对象的type属性是一个数组，用来存放监听事件。 3.一二两步已经把监听事件绑定好了，现在就差触发。写一个触发函数，传入事件类型，查找监听的事件并执行。 以上代码虽然看起来多了复杂了，…"}, {"id": "6844903736238669837", "title": "JavaScript 性能利器 —— Web Worker", "desc": "Web Worker (工作线程) 是 HTML5 中提出的概念，分为两种类型，专用线程（Dedicated Web Worker） 和共享线程（Shared Web Worker）。专用线程仅能被创建它的脚本所使用（一个专用线程对应一个主线程），而共享线程能够在不同的脚本中使…"}, {"id": "6971974298965655588", "title": "深入浅出JavaScript函数式编程", "desc": "函数式编程是一种强调以函数使用为主的开发风格。这里的函数是数学上函数也就是变量的映射，一个函数的值仅决定于函数的参数值，不依赖其他状态。"}, {"id": "6996175420181708814", "title": "JavaScript的排序算法实现", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 说起排序,绝对是每个计算机相关专业的数据结构课本里必须出现的词"}, {"id": "6983698832655646728", "title": "JS数组中的find、filter、forEach、map", "desc": "一、find find（）方法返回数组中符合条件的第一个元素，没有的话，返回undefined 二、filter filter( )方法返回一个新数组，用来筛选数组中符合条件的所有元素，如果没有找到符"}, {"id": "6897911576053940231", "title": "探索 React 合成事件", "desc": "React 目的在于解决：构建随着时间数据不断变化的大规模应用程序。 合成事件 4 个常见问题。 React 合成事件（SyntheticEvent）是 React 模拟原生 DOM 事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器。它根据 W3C 规范 来定义合成…"}, {"id": "6985191302245646343", "title": "《红宝书》第8章——继承", "desc": "《红宝书》继承———原型、构造函数、实例对象。 这是红宝书P238-250的内容，今天复习了一下并结合我所理解的把一些比较重要的例子挑出来整理成这篇笔记。"}, {"id": "6998482692987682847", "title": "自己封装一个分页居中的函数", "desc": "当一个项目中有许多数据需要展示的时候，众所周知一个页面是没有办法放下所有数据的，所以会出现分页的需求。那么分页又会产生什么新的需求呢？如果你也有这样的疑问，那就看看本文内容哦~"}, {"id": "6954647746636677133", "title": "ES6少许知识点｜小册免费学", "desc": "掘金小册《前端面试之道》，第三章：ES6 知识点及常考面试题，涉及到的知识点在我们日常的开发中经常可以看到，并且很多容易出现的坑 也出自于这些知识点"}, {"id": "6909081655202283533", "title": "ES近5年发布的常用特性整理", "desc": "首先就是数组的include方法，这个方法帮我们检查数组中是否存在某个元素。在这之前如果我们需要检查数组中是否包含某个元素我们都是使用indexOf方法。 但是indexOf不能查询到数组中的NaN，现在有了includes方法之后我们就直接可以判断数组当中是否存在某个指定的元…"}, {"id": "6985134579778584590", "title": "jsBridge跨平台统一解决方案，业务与技术分离，提升开发效率", "desc": "@zebing/js-bridge 插件目前已经在android，ios以及windows qt开发的应用中使用，效果显著。极大的解决了各平台之间的差异，以及本地开发原生接口不可调试的问题。"}, {"id": "6982398834416549896", "title": "前端面试之event loop", "desc": "最近跟不少小伙伴讨论到event loop；索性就来写一下event loop吧。js是单线程运行的，所以我们通过回调来实现异步操作；而event loop就是异步回调的实现原理"}, {"id": "6844903747957719053", "title": "闭包装逼失败(闭包使用)", "desc": "原文永久链接： https://github.com/AttemptWeb/Record... 尴尬了，遇到了一个闭包的问题，然后我说错了答案，装逼失败了，之前我以为自己完全理解了闭包，现在发现其实并没有,赶紧翻书找答案-ing。 发现打印的都是3，原因是匿名函数中的i共享了同…"}, {"id": "6989127717723570189", "title": "带你死磕面向对象，不懂那就再看一遍(或许你没有对象，但看完你可以自信的new一个)", "desc": "函数体内部使用了this关键字，代表了所要生成的对象实例。 生成对象的时候，必须使用new命令。 原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在所有实例对象上 读取对象的某"}, {"id": "6949540539456815140", "title": "手写JS-图片懒加载", "desc": "前言在学习图片懒加载之前，我们先看看什么是懒加载。1.什么是懒加载？懒加载突出一个“懒”字，懒就是拖延迟的意思，所以“懒加载”说白了就是延迟加载，比如我们加载一个页面，这个页面很长很长，长到我们的浏览"}, {"id": "6968012628589281287", "title": "155个JavaScript基础问题（21-25）", "desc": "21. 输出是什么？ 22. cool_secret能够访问多长时间？ 23. 输出是什么？ 24. 输出是什么？ 25. 输出是什么？ 题目来源 https://github.com/lydiaha"}, {"id": "6986540530695929887", "title": "JS实现动态文字，三级联动，时间倒计时效果", "desc": "直接上干货: 动态文字 三级联动 时间倒计时 直接上干货: 动态文字 三级联动 时间倒计时 直接上干货: 动态文字 三级联动 时间倒计时 重要的事情说三遍!!!!"}, {"id": "6909702892597641229", "title": "浏览器事件循环EventLoop解析", "desc": "想要了解事件循环，我们首先要说明白JavaScript的同步模式和异步模式。 众所周知，目前主流的javaScript环境，都是以单线程的模式去执行的javaScript代码，那javaScript采用单线程工作的原因与他最早的设计初衷有关。 最早javaScript这门语言就…"}, {"id": "6994251656833531917", "title": "事件循环 Event Loop", "desc": "主线程执行完后，先到任务队列的微任务中查找是否有任务，如果有就执行里面全部的微任务，如果微任务又有宏任务和微任务，就再把其中的微任务执行完毕，把其中的宏任务放到宏任务队列中。"}, {"id": "6968258826285875208", "title": "手把手教你利用js给图片打马赛克", "desc": "效果演示 Canvas简介 HTML5 标签用于绘制图像（通过脚本，通常是 JavaScript） 不过， 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务 get"}, {"id": "7001492500900741134", "title": "事件绑定", "desc": "事件绑定分为 DOM0级事件绑定，DOM2级事件绑定，前端操作离不开事件绑定，让我们一起看看其中的知识吧"}, {"id": "6844903814638600205", "title": "【周刊-1】三年大厂面试官-面试题精选及答案", "desc": "在阿里和腾讯工作了6年，当了3年的前端面试官，把期间我和我的同事常问的面试题和答案汇总在我 Github 的 Weekly-FE-Interview 中。希望对大家有所帮助。 如果你在bat面试的时候遇到了什么不懂的问题，欢迎给我提issue，我会把题目汇总并将面试要点和答案写…"}, {"id": "6844903651291447309", "title": "三十分钟掌握Webpack性能优化", "desc": "Webpack是现在主流的功能强大的模块化打包工具，在使用Webpack时，如果不注意性能优化，有非常大的可能会产生性能问题，性能问题主要分为开发时打包构建速度慢、开发调试时的重复性工作、以及输出文件质量不高等，因此性能优化也主要从这些方面来分析。本文主要是根据自己的理解对《深…"}, {"id": "6844904069887164423", "title": "轻松理解JS中的面向对象，顺便搞懂prototype和__proto__", "desc": "这篇文章主要讲一下JS中面向对象以及 __proto__，ptototype和constructor，这几个概念都是相关的，所以一起讲了。 在讲这个之前我们先来说说类，了解面向对象的朋友应该都知道，如果我要定义一个通用的类型我可以使用类(class)。比如在java中我们可以这…"}, {"id": "6882936217609732110", "title": "聊一聊如何搭建高性能网站", "desc": "在开发中经常会遇到网站的性能瓶颈，打开慢的情况。我们平常开发中怎么一步一步排查这些问题并 解决问题呢 javascript执行慢。 接口响应慢。 资源加载慢。 浏览器渲染慢。 。。。 我们只能要求自己，所以用户手机网速慢是不存在的～。 我们将从几个方面着手讲一下排查问题的手段。…"}, {"id": "6847902225872879630", "title": "[诚意满满✍]带你填一些JS容易出错的坑", "desc": "JavaScript默认使用字典序(alphanumeric)来排序。因此结果是[1,10,2,5] 期望输出的是0,1,2,实际上却不会。原因就是涉及「作用域」，怎么解决呢？ [x] 使用bind函数。 解法还有其他的，比如使用IIFE，形成私有作用域等等做法。 问你这个题目…"}, {"id": "6844904031425413128", "title": "如何答一道惊艳面试官的数组去重问题？ ", "desc": "数组去重应该是面试必考问题之一。 虽然它是一道并不复杂的问题，但是也能看出面试者的广度和深度，还有考虑问题的全面性。 实际开发中我们应该选择哪种方式数组去重，本文告诉你。 你以为的不一定你以为，面试官不只是让你去重一个数组，他想知道的有点多，包括你的思想。 思想: 双重 for…"}, {"id": "6845166891376312333", "title": "周末学会了 10个超级实用 Javascript 技巧!", "desc": "众所周知，JavaScript 一直在快速变化。在新的 ES2020 中，有很多很棒的特性，我们大都已经迫不及待尝试了。老实说，有时我们可以用不同角度来编写代码，同样也能达到相同的效果，而且有的还会更简短，更清晰。 下面是列出一些 JavaScript 有用的技巧，相信总有一天…"}, {"id": "7002126210905931789", "title": "JS定时器遇浏览器调度踩坑日记", "desc": "设置JavaScript定时器在浏览器置后台，以及最小化的时候遇到的调度问题，导致定时器任务未能执行。"}, {"id": "6995933490898272287", "title": "你真的掌握 JavaScript 中的数据类型检测了吗？", "desc": "JavaScript 中的数据类型，是学习 JavaScript 的基础，前面几篇都是围绕着数据类型，进行了解和学习，今天我们以掌握 JavaScript 中的数据类型检测为目标，开启我们的探索之旅。"}, {"id": "6844903605107965960", "title": "社招中级前端笔试面试题总结", "desc": "考察频率指相关问题的考察频率，并非只是提到的点。 变量声明和函数声明都会提升，但函数会提升到变量前。 具体解释可参考《你不知道的JavaScript（上卷）》 同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。若地址里面的协议、域名和端…"}, {"id": "6942435294549377054", "title": "面试题数组去重引出的多元宇宙😏", "desc": "我看了很多面试相关的问题，发现数组去重出现过几次，这里就对数组去重问题进行一个总结。并且进行扩展。请一定要看到第二章！ 问题描述：数组去重，顾名思义就是，把数组里的重复数值去除，使其多个相同的数值变为一个，最后使数组里不含有重复数值。 举个例子：有个数组：[1,2,3,4,4,…"}, {"id": "6858118314422599694", "title": "JavaScript中的map()和forEach()有什么区别？", "desc": "JavaScript中一些最受欢迎的功能可能是map和forEach。从ECMAScript 5（简称es5）开始，它们就开始存在了。 在本文中，我将讨论它们之间的主要区别，并向你展示其用法的一些示例。 基本上，在JavaScript中遍历对象取决于对象是否可迭代。默认情况下，…"}, {"id": "7000657775139225631", "title": "JS奇怪的函数作用域", "desc": "in操作符，ES6块级作用域，函数声明提升，window全局对象，严格模式下的块级作用域中函数表现。。"}, {"id": "6844903512107663368", "title": "前端：你要懂的单页面应用和多页面应用", "desc": "单页面应用（SinglePageWebApplication，SPA）只有一张Web页面的应用，是一种从Web服务器加载的富客户端，单页面跳转仅刷新局部资源，公共资源(js、css等)仅需加载一次，常"}, {"id": "6844903815758479374", "title": "你不知道的浏览器页面渲染机制", "desc": "浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。渲染引擎在不同的浏览器中也不是都相同的。目前市面上常见的浏览器内核可以分为这四种：Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Sa…"}, {"id": "6999045188647813127", "title": "前端路由(进阶必备知识)", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 早些时候，当时前后端还是不分离的，路由都由服务端控制。 客⼾端 -> http 请求 -> 服务端 -> 根据 url 路径的不同，返回不"}, {"id": "6900461766514802702", "title": "熬夜7天，我总结了JavaScript与ES的25个知识点", "desc": "前言说起JavaScript，大家都知道是一门脚本语言。那么ES是什么鬼呢？ES全称ECMAScript，是JavaScript语言的国际标准。最近，我总结了25条JavaScript的基础特性相关的"}, {"id": "6844903894301016078", "title": "实战篇 - 如何实现和淘宝移动端一样的模块化加载 （task-silce）", "desc": "很明显，我们的对于用户的响应速度和界面渲染速度，提升了 50% 左右。 该工具已经在 npm 发了包，也在 git 提交了项目，有兴趣的可以去看看，顺便点个 star ，谢谢了。 已经有 n 久没有写过文章了，由于最近工作比较忙，而且项目当中对于前端性能还有架构方面的挑战性还是…"}, {"id": "6844903665388486664", "title": "可能比文档还详细--VueRouter完全指北", "desc": "特点:本文主要是参考了官方文档.除了不常用的过渡动效和数据获取,都进行了分析说明.说明:每一节都在文档的基础上进行了更通俗的解释;例子:每一节都添加了单独的例子进行详细的说明,官方没有或复杂或略过的都有详细的说明.总结:每一节都会有tips注意点,实际开发的经验和总结. 如果是…"}, {"id": "6844903638532358151", "title": "浅说 XSS 和 CSRF", "desc": "在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。本文将会简单介绍 XSS 和 CSRF 的攻防问题。"}, {"id": "6984691372573851655", "title": "ES6新增语法(一)——let、const、var的区别", "desc": "ES6简介 ES6是ECMAScript 6.0的简称，是javascript语言的下一代标准，已经在2015年6月正式发布上线。目的就是为了统一javascript的语法标准，可以用来开发大型应用程"}, {"id": "6968464743766065183", "title": "ES6之模拟实现一个Set类", "desc": "在日常开发中，set 和map 数据结构是用的最多的， 但是都是JS 帮我搞定的，拒绝做api工程师， 接下来就开撸。 ES6 提供了新的数据结构 Set。 它类似于数组，但是成员的值都是唯一的，没有"}, {"id": "6881231745073561614", "title": "我对JS延迟异步脚本的思考", "desc": "最近几个月，我一直在研究一些技术，例如linux,操作系统,算法等,预计要持续学习到今年年底。红宝书第四版出来后，我也是花了很多时间去看。对于延迟脚本，自己也是做了一个实验，写下了这篇总结 再次刷新,发现async执行时机和顺序不确定，但是能确定defer肯定在async之后执…"}, {"id": "6844903825225023502", "title": "前端面试题：这是我理解的MVVM，请注意查收", "desc": "现在流行的前端框架也就是vue、react、angular了，在投递简历时，我们都可以看到任职要求会有最少熟悉这些框架中的一种，掌握这些框架就好像时多了一个轮子或者说是多了一个车，框架可以然我们快速的使用、复用处理一些问题。当然面试中不仅会问到这些只是的掌握情况，也会问些你的框…"}, {"id": "6844903943093354503", "title": "息息相关的 JS 同步，异步和事件轮询 ", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS 是一门单线程的编程语言，这就意味着一个时间里只能处理一件事，也就是说JS引擎一次只能在一个线程里处理一条语句。 虽然单线程简化了编程代码，因为这样咱们不必太担心并发引出的问题，这也意味着在阻塞主线程的情况…"}, {"id": "6990705263619604511", "title": "从 Prompt 来看微前端路由劫持原理", "desc": "问题 前两天，业务方给我抛来一段代码，略去繁杂的逻辑，简化后的代码如下： 在结合微前端框架 icestark 使用时，跳转到同一微应用的其他路由，会产生异常的效果：Prompt 弹窗了两次。 ​ 面对"}, {"id": "6844903617728610311", "title": "vue实践中的常见知识漏洞001", "desc": "本文主要总结了vue实际开发项目当中应该如何解决一些实际的开发问题，可能你认为很简单，但短时间内也许你并没解决思路的。 这种书数据的要求比较高，且要求你能够找到比较好的对应关系，需要针对class进行特征性的组件渲染。当你需要改变时改变数据即可重新渲染达到改变样式的目的。 特点…"}, {"id": "6844903608501141512", "title": "React + Koa 实现服务端渲染(SSR)", "desc": "⚛️React是目前前端社区最流行的UI库之一，它的基于组件化的开发方式极大地提升了前端开发体验，React通过拆分一个大的应用至一个个小的组件，来使得我们的代码更加的可被重用，以及获得更好的可维护性，等等还有其他很多的优点... 通过React, 我们通常会开发一个单页应用（…"}, {"id": "6990651660410290189", "title": "async/await = Promise + Generator：ES6异步的三重境界", "desc": "前言 异步是JavaScript中的重要内容，异步的主要作用是把耗时间的代码“放一边”，让其不阻塞同步代码，等到异步代码出结果了，再通过回调函数来处理其结果。"}, {"id": "6970893008778559495", "title": "了解学习 Proxy 的好朋友 - Reflect，为什么需要 Reflect", "desc": "上文《一个Javascript 代理 Proxy 的成长之旅》，我们简单认识了一下 Proxy 的使用方法，本文我们学习一下 Proxy 的好朋友"}, {"id": "6844904161658535943", "title": "我帮你们问了问字节跳动的面试官", "desc": "IFST：。。。 梨花酱：。。。多说点 IFST：。。。不可以，不过现在社区中已经存在很多专门针对字节跳动的面试文章和面试题了，大家可以去看一看，当然了，到时候我会不会问你看过的那些就看缘分了"}, {"id": "6844903613819518990", "title": "前端性能优化--从 10 多秒到 1.05 秒 ", "desc": "关于 性能优化 是个大的面，这篇文章主要涉及到 前端 的几个点，如 前端性能优化 的流程、常见技术手段、工具等。 首先，我们先来看看 👀 雅虎军规 的 35 条。 如对 雅虎军规 的具体细则内容不是很了解，可自行去各搜索 🔍 引擎 ，搜索 雅虎军规 了解详情。 以上是 li…"}, {"id": "6844903833248907278", "title": "《三分钟阅读》7个有用的JavaScript技巧", "desc": "可以看到通过{}创建的对象，很容易就被修改了，而通过Object.create(null)这种方式创建的对象就很纯粹，没有任何属性和对象，非常干净。 然而，我们也可以直接赋值一个函数，如果没有传参，我们就直接抛出错误提醒，如果一个组件里面有很多方法，我们就可以直接复用，而不用每…"}, {"id": "6844903695365177352", "title": "Vue番外篇 -- vue-router浅析原理", "desc": "这篇文章主要围绕Vue的SPA单页面设计展开。 关于如何展开Vue多页面设计请点击查看。 这里指的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理器。 换句话说，vue-router就是WebApp的链接路径管理系统。 vue-router是Vu…"}, {"id": "6844903945383444494", "title": "说说 Node 和 ES6 模块化那些不为人知的事儿", "desc": "文章主要就node的commonjs规范和es6规范进行了浅层次的研究，探索node和es6模块化一些不为人知的小秘密。 node模块化遵循的是commonjs规范，CommonJs定义的模块分为: 模块标识(module)、模块导出(exports) 、模块引用(requir…"}, {"id": "6968848594459688967", "title": "ES6—let与const，块级作用域是如何实现的", "desc": "ES6—let与const，块级作用域是如何实现的，本文会介绍let和const基本用法和基本特性以及块级作用域原理。"}, {"id": "6972793542095667213", "title": "发布订阅的实现", "desc": "前言 之前有写过 发布订阅和观察者模式的区别 ，但实现过程很草率，今天 比较详细的写一个发布订阅的实现。因为，发布订阅这哥们儿存在感太强 。哪哪都有他，node里很多都继承了内置的发布订阅模块实现的，"}, {"id": "6998062462792630279", "title": "JavaScript - 构造函数, 原型对象, 实例对象, 静态对象", "desc": "构造函数 使用构造函数的实例: 在构造函数中, 不需要使用 new 新建对象, 也不需要返回创建的对象. 在生成对象时, 需要使用 new"}, {"id": "6844903949233848328", "title": "浏览器跨域 Access-Control-Allow-Headers 问题", "desc": "当浏览器发送接口请求出现跨域问题时，目前的做法通常会在接口服务器增加如下配置。 但是有时也会出现 Access-Control-Allow-Headers 的错误问题。 下面我们就来分析一下原因和解决办法。 浏览器在发送跨域请求并且包含自定义 header 字段时，浏览器会先向…"}, {"id": "6995851218543181854", "title": "JavaScript文件里添加JSDoc注解", "desc": "支持的JSDoc 下面的列表列出了当前所支持的JSDoc注解，你可以用它们在JavaScript文件里添加类型信息。 注意，没有在下面列出的标记（例如@async）都是还不支持的。 @type @pa"}, {"id": "6978638929960370207", "title": "「微信小程序」生成水印原理与插件编写", "desc": "一 前言 今天分享一个小程序生成水印的小技巧——canvas绘制背景图，接下来我会详细介绍绘制的细节。希望开发过微信小程序的同学可以把文章收藏起来，这样如果以后遇到类似的需求，可以翻出来作为参考。 本"}, {"id": "6945640942976122910", "title": "前端进阶之必会的JavaScript技巧总结", "desc": "函数柯里化的是一个为多参函数实现递归降解的方式。其实现的核心是: 👆这个问题，有必要去🤔一下。其实利用函数柯里化这种思想，我们可以更好的实现函数的封装。 就比如有监听某一事件那么就会有移除该事件的操作，那么就可以利用柯里化的思想去封装代码了。 或者说一个输入A有唯一并且对应…"}, {"id": "6844904136161361933", "title": "JS 万字总结  重量级干货！！！", "desc": "表达式进一步转换成0==0，结果为true。 虽然过程复杂，记住判断的思路即可，非对象之间，先类型转换再比大小，对象比较则调用获取原始值方法再进一步比较。 接下来是判断2种特殊类型Set和Map，由于这2种类型的拷贝方式不同，进一步通过if分支对其判断，遍历里边所存放的值，Se…"}, {"id": "6984971905069482021", "title": "前端网页字体优化指南", "desc": "日常开发网页经常会使用一些特殊字体，本文主要从字体格式、按需提取、统一渲染三个方面来谈谈优化字体的常用技巧"}, {"id": "7004820668646703141", "title": "前端常用js用法", "desc": "类型转换 快速转 Number 快速转 Boolean 在js中，!取反操作可将变量转换成boolean类型，null、undefined和空字符串取反都为true，其余都为false。而!! 常用的"}, {"id": "6989031479753834504", "title": "【算法面试】leetcode最常见的150道前端面试题 --- 简单题下（44题）", "desc": "本文题目选自 LeetCode 精选 TOP 面试题，这些题在自己和同事亲身经历中，确实遇到的几率在百分之80%以上（成都和北京的前端岗位）。 上版本部分请参考# 简单题上 二叉树（DFS） 二叉树前"}, {"id": "6971972782292729886", "title": "面试官问我JS中forEach能不能跳出循环", "desc": "当年懵懂无知的我被问到这个问题时，脑袋一片空白，因为我一度认为forEach只是为了方便书写所创造出来的语法糖，在业务代码中也经常使用，但没有思考过它存在的问题，本文旨在记录自己的心路历程，抛砖引玉。"}, {"id": "6844903673009553416", "title": "2018前端面试总结，看完弄懂，工资少说加3K | 掘金技术征文", "desc": "文章涉及的内容可能不全面，但量很多，需要慢慢看。来源于各个地方，我花了很长的时间整理，希望对大家有帮助。但是难免会有打字的错误或理解的错误，希望发现的可以邮箱告诉我236490794@qq.com，我会及时的进行修改，旨在能帮到大家，谢谢。 意义：根据内容的结构化（内容语义化）…"}, {"id": "7003204313292128264", "title": "深入对比 eslint 插件 和 babel 插件的异同点", "desc": "babel 和 eslint 都是基于 AST 的，一个是做代码的转换，一个是做错误检查和修复。babel 插件和 eslint 插件都能够分析和转换代码，那这俩到底有啥不同呢？ 本文我们来探究下 b"}, {"id": "7002591164968730638", "title": "『面试的底气』—— 设计模式之迭代器模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6950084496515399717", "title": "Vue 源码解读（2）—— Vue 初始化过程", "desc": "详细讲解了 Vue 的初始化过程都做了哪些事 ..........................."}, {"id": "7004991624094679076", "title": "八个实例讲解如何更好的 Javascript 调试源码技巧！", "desc": "大家好，我是山月 使用 Javascript 写代码，如论是在 Node 后端环境还是前端单页应用，调试是资深程序员的进身之阶！ 程序员的水平提示之路只有一条，那就是乐此不疲地调试代码。某非著名非大师"}, {"id": "7005490758920716319", "title": "call apply bind 的差别与使用", "desc": "call apply bind 的差别与使用。 主要讲解 call apply bind 在日常的场景的使用方法"}, {"id": "7005399626744332295", "title": "Lerna学习与理解", "desc": "适用范围 不会用到的情况 业务项目（xxx系统之类的）：很少用到lerna，平时开发都是一个git仓库下只有一个项目，根目录下只有一个package.json，安装一个打包工具如webpack，打包发"}, {"id": "6983625803271503886", "title": "一篇文章消化 ES7、ES8、ES9 主要新特性", "desc": "这里收集了某段时间前准备面试用的材料，方便更好的理解， 并整理出了一些 ES7至ES9 的常用新特性，在这做下分享，巩固记忆。"}, {"id": "6844903974378668039", "title": "(建议收藏)原生JS灵魂之问, 请问你能接得住几个？(上)", "desc": "笔者最近在对原生JS的知识做系统梳理，因为我觉得JS作为前端工程师的根本技术，学再多遍都不为过。打算来做一个系列，一共分三次发，以一系列的问题为驱动，当然也会有追问和扩展，内容系统且完整，对初中级选手会有很好的提升，高级选手也会得到复习和巩固。敬请大家关注！ 2.说出下面运行的…"}, {"id": "6976388859361755167", "title": "阿里巴巴：服务化管理 7000+ 个项目组件资产", "desc": "每个业务用的骨架是一样，但是用的皮肤包是不同的，通过皮肤包 + 骨架组件的组合，用户就能得到一个适合当前 BU 的一套组件体系"}, {"id": "6981224810386833422", "title": "手写 Vue2 系列 之 初始渲染", "desc": "实现 Vue.js 的初始渲染过程，涉及内容包括： render helper、VNode、patch 初始渲染、指令、实例化子组件、插槽的处理"}, {"id": "6971197120250396680", "title": "JavaScript 如何在线解压 ZIP 文件？", "desc": "本文介绍了在线解压 ZIP 文件的两种方案，在实际项目中，建议使用服务器解压的方案。这样不仅可以解决浏览器的兼容性问题，而且也可以解决大文件在线解压的问题，同时也方便后期扩展支持其它的压缩格式。"}, {"id": "6844903773622501383", "title": "深度解密setTimeout和setInterval——为setInterval正名！", "desc": "重复定时器，JS有一个方法叫做setInterval专门为此而生，但是大家diss他的理由很多，比如跳帧，比如容易内存泄漏，是个没人爱的孩子。而且setTimeout完全可以通过自身迭代实现重复定时的效果，因此setIntervval更加无人问津，而且对他退避三舍，感觉用set…"}, {"id": "6995336968071004173", "title": "JavaScript知识点回顾（十二）——变量、作用域与内存（一）", "desc": "这是我参与8月更文挑战的第十二天，活动详情查看：8月更文挑战 原始值与引用值 ECMAScript变量可以包含两张不同类型的数据：原始值和引用值。原始值就是最简单的数据，引用值则是由多个值构成的对象。"}, {"id": "7004438563265708039", "title": "javascript实践教程-02-入门使用", "desc": "本篇介绍了如何在网页上编写js代码，如何引入外部js代码文件，js的3个弹框、注释语法，还有浏览器调试工具的控制台使用。"}, {"id": "7004436802442362894", "title": "javascript实践教程-01-javascript介绍", "desc": "本篇介绍了javascript是什么，为什么要用javascript，ECMAScript标准是什么等。"}, {"id": "6844903929839353869", "title": "如何优雅判断属性值为空", "desc": "这是因为我们尝试从 undefined 或者 null 中取出数据。 解决办法肯定是有的啦，就是使用新语法可选链。 不过这个语法当下还没有正式发布，但是我们可以通过安装 Babel 插件去使用它。 安装完毕后修改下 Babel 配置文件即可。 虽然编译后的代码看着有点啰嗦，但是…"}, {"id": "6967243012199940110", "title": "超详细本地搭建 docker + jenkins 自动部署项目", "desc": "多图,超详细本地搭建 docker + jenkins 部署系统: github-webhook + docker + jenkins"}, {"id": "6844903545641271310", "title": "记一次封装Axios的经历", "desc": "前端开发中，如果页面需要与后台接口交互，并且无刷新页面，那么需要借助一下Ajax的http库来完成与后台数据接口的对接工作。在jQuery很盛行的时候，我们会使用$.ajax()，现在，可选择的就更多，例如：SuperAgent、Axios、Fetch…等等。有了这些http库…"}, {"id": "6844903502586576904", "title": "BetterScroll：可能是目前最好用的移动端滚动插件", "desc": "BetterScroll 是一款重点解决移动端各种滚动场景需求的开源插件（GitHub地址），适用于滚动列表、选择器、轮播图、索引列表、开屏引导等应用场景。 为了满足这些场景，它不仅支持惯性滚动、边界回弹、滚动条淡入淡出等效果的灵活配置，让滚动更加流畅，同时还提供了很多 API…"}, {"id": "6844903933631004679", "title": "JS截取视频第一帧", "desc": "当视频能够预览并上传后，非要来一张视频第一帧的截图贴上，第一帧是黑的怎么办，下一帧。 在video标签上添加preload属性. 以上两种方式都可以成功截取到第一帧（截图方式方法不变），自动播放是否准确待验证，预加载属性已验证成功。 关于截取或者处理图片/视频/富文本编辑器，c…"}, {"id": "7005907442177425416", "title": "javascript实践教程-05-数据类型", "desc": "本篇介绍了js中的7种数据类型，其中5种基本数据类型：number、string、boolean、null、undefined，2种引用类型：array和object。 阅读时间30~40分钟。"}, {"id": "6844904012777537544", "title": "【TS 演化史 -- 破晓】一步一个脚印带你入门 TS", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 官方网站的定义是:TypeScript 是 JS 类型的超集。它假设咱们知道什么是超集，什么是类型化。为了简单起见，你可以将 TypeScript 看作是 JavaScript 之上的一个外壳。 TypeScr…"}, {"id": "6844903557934628872", "title": "使用vue构建一个自动建站项目", "desc": "不过基本能满足公司的需求了，能编辑的都可以编辑，组件的background(包括背景图片) color border box-shadow margin padding width height 对齐方式(字体和组件内部元素) border-radius font(font-s…"}, {"id": "6969835249920376846", "title": "谈谈你对闭包的理解？", "desc": "这个问题想考察的主要有两个方面： 对闭包的基本概念的理解 对闭包的作用的了解 什么是闭包？ MDN的官方解释： 更通俗一点的解释是： 需求: 定义一个计数器方法, 每次执行一次函数, 就调用一次进行计"}, {"id": "6844903506676023310", "title": "Vue + TypeScript 新项目起手式", "desc": "TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。 TypeSc…"}, {"id": "6844903619905634311", "title": "聊天系统很复杂？前端工程师也能完成！", "desc": "使用流行的 web 应用技术栈 —— 比如PHP —— 来编写聊天应用通常是很困难的。它包含了轮询服务器以检测变化，还要追踪时间戳，并且这种实现是比较慢的。 大多数实时聊天系统通常基于 WebSocket 来构建,具体来说就是socket.io。 WebSocket 为客户端和…"}, {"id": "6969812967516962852", "title": "记在实战项目中对于请求模块的无敌封装", "desc": "记在实战项目中对于请求模块的无敌封装。这是一个项目中真实的案例，自从我封装完后，大家似乎都逐渐改成了上述的方法来请求接口获取数据。对于程序方面的热情就是来源于这些优化后的反馈哈哈。"}, {"id": "6992195059789611045", "title": "$.ajax,axios,fetch三种ajax请求的区别、手写axios", "desc": "Ajax技术的总结和原理解析，目前发送Ajax请求的主要有4种方式： 原生XHR jquery中的$.ajax() axios fetch。"}, {"id": "6993151406932754440", "title": "Vue项目打包后如何修改请求路径 ?", "desc": "大家在平时的开发中，遇到甲方要求让他们自己去手动配置请求路径；但是Vue项目打包以后，就无法更改里面的请求地址了； 下面教大家一个小技巧，可以在Vue项目打包后，也可以随意的修改请求地址啦！"}, {"id": "6947916386572173325", "title": "【前端见外】我解决了一个看似非常愚蠢的JS问题！", "desc": "故事要从 Tomasz Lakomy 发的一条推特讲起，他问了一个问题。假如你在面试时，面试官问了你这样一道问题，你该怎么办。 关于在面试中如何应对这个问题，我觉得要看这个问题的关注点是什么。如果问题的关注点是tree变量的最终值是什么的话，那么可以直接让面试官滚蛋，或者我可能…"}, {"id": "6984307005968089125", "title": "🤳带你在线探秘,解开\"专有扩展\"的神秘面纱!", "desc": "1. 选择符API 在操控节点或元素时我们要先选取我们要操作的节点,这里就需要用到选取工具----选择符API Selectors API Level 1的核心是两个方法：querySelector("}, {"id": "7001360374880534558", "title": "🚁一起来封装脚手架吧！[第3天：脚手架开发的前置知识]", "desc": "👽 概论 之前和大家分享的内容，总的来说就是在阐明脚手架中的模板具体应该包含哪些内容、哪些功能。这部分单独拎出来看其实与脚手架关系不大，但又是脚手架开发中不可或缺的一个环节。 今天我们来聊一聊和脚手架"}, {"id": "6844903607968481287", "title": "Promise不会？？看这里！！！史上最通俗易懂的Promise！！！", "desc": "一般来说我们会碰到的回调嵌套都不会很多，一般就一到两级，但是某些情况下，回调嵌套很多时，代码就会非常繁琐，会给我们的编程带来很多的麻烦，这种情况俗称——回调地狱。 Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、c…"}, {"id": "6950545990525026335", "title": "掘金这一周你值得关注的文章（4.6~4.12）", "desc": "前言掘友们，大家好！小编精选了上周值得关注的文章，这些文章里有不少干货哦，快来和小编一起阅读学习吧！后端精选文章精选文章 1 -别再纠结线程池大小/线程数量了，没有固定公式的引言： 作者通过小测试验证"}, {"id": "6872521948015329293", "title": "16期-熬夜7天，我总结了JavaScript与ES的25个重要知识点！", "desc": "说起JavaScript，大家都知道是一门脚本语言。那么ES是什么鬼呢？ES全称ECMAScript ，是JavaScript语言的国际标准。 操作对象情况下：a，只读属性赋值会抛出TypeError；b，对不可配置的属性使用delete操作符会抛出TypeError；c，为不…"}, {"id": "7000247667192233991", "title": "JavaScript 系列之字符串（三）", "desc": "[JavaScript 系列之字符串｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "7002446425036423205", "title": "javascript深拷贝和浅拷贝", "desc": "同事分享的javascript深拷贝和浅拷贝，转发过来了~~~ 这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战” 1.深拷贝和浅拷贝概念 浅拷贝：浅拷贝指的就是循环遍历对象一遍，将该对象上"}, {"id": "6998891297389936671", "title": "前端算法知识脉络(进阶必备知识)", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 所谓“算法”，指的是解题方案的准确而完整的描述。算法的范畴是比较广泛的，它并不仅仅局限与 LeetCode 上面的一问一答。就前端而言，算"}, {"id": "6940430496128040967", "title": "前端图片最优化压缩方案", "desc": "前端最优化压缩图片上传方案！！！再次优化升级！14M压缩后仅剩130KB。 图片上传是前端中常见的的业务场景。无论是前台还是后台，适当的对图片进行压缩处理， 可以显著的提升用户体验。"}, {"id": "6844903821420789767", "title": "【半月刊 4】前端高频面试题及答案汇总", "desc": "半月刊第四期来啦，这段时间 Daily-Interview-Question 新增了 14 道高频面试题，今天就把最近半月汇总的面试题和部分答案发给大家，帮助大家查漏补缺，欢迎 加群 互相学习。 更多更全的面试题和答案汇总在下面的项目中，点击查看。 如果修改了，Vue 是如何监…"}, {"id": "6993331267689250853", "title": "JavaScript代码片段学设计模式", "desc": "通过代码片段来学习编码思路对于开发者来说是比较容易理解的，本文继续通过代码片段简单展示常见的设计模式，但不深入设计模式本身，在此推荐一本书《JavaScript设计模式》，通俗易懂"}, {"id": "6844904097372438542", "title": "20k的前端是这样写事件委托的🐹", "desc": "要理解DOM相关事件，我们先要理解“事件流”这个概念，事件流描述的是从页面中接收事件的顺序。 事件冒泡：事件开始由最具体的元素接收，然后逐级向上传播到较为不具体的节点或文档。 事件捕获：事件开始由不太具体的节点接收，然后逐级向下传播到最具体的节点。它与事件冒泡是个相反的过程。 …"}, {"id": "7000951508686602247", "title": "浅谈在angular中微信调用JS-SDK活体刷脸遇到的坑", "desc": "配置: 前端: ng11 + ng-zorro + material + ionic 后端： JAVA + py 先说下背景： 目前的活体检测可以大致分为三个类型： 静默活体 前端传一张或多张照片给后"}, {"id": "6998000575203770376", "title": "十分钟上手 xlsx，4 种方法实现 Excel 导入导出", "desc": "前言 如果你和我一样经常和管理页面打交道，那么 Excel导入数据 和 数据导出Excel 这两个需求一定是逃不掉的。 相信大多数人也知道 xlsx 这个 npm 库，但是文档内容实在是太多，太冗余了"}, {"id": "7003615601906155556", "title": "前端中 call,apply,bind 函数是干什么的，又是怎么实现的", "desc": "call,apply,bind方法的作用，有什么不同点，如何自己实现call,apply,bind方法"}, {"id": "6987217883017412615", "title": "前端实现高效的海报系统", "desc": "海报作为一种最为常见的招贴形式，被广泛应用于广告宣传等场景。本文主要介绍了海报系统的业务背景、技术方案和系统实现等内容。"}, {"id": "6997200854730145805", "title": "快速上手包管理工具 | npm篇", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 npm全称叫Node包管理工具(Node Package Manager) 使用npm有两大好处 统一的下载入口 自动下载依赖 一、npm"}, {"id": "6844904066636742664", "title": "127个常用的JS代码片段，每段代码花30秒就能看懂（一）", "desc": "JavaScript 是目前最流行的编程语言之一，正如大多数人所说：“如果你想学一门编程语言，请学JavaScript。” FreeCodeCamp的创始人 Quincy Larson 在最近的一次采访中被问到哪种语言开发人员应该首先学习。他回答：“ JavaScript。”：…"}, {"id": "6844904004154064910", "title": "我为什么建议前端将Python 作为第二语言？", "desc": "这不是一篇制造焦虑的文章，而是充满真诚建议的Python推广文。 当谈论到编程入门语言时，大多数都会推荐Python和JavaScript。 实际上，两种语言在方方面面都非常强大。 而如今我们熟知的ES6语言，很多语法都是借鉴Python的。 有一种说法是 “能用js实现的，最…"}, {"id": "6844904100144889864", "title": "都2020年了，你还不会JavaScript 装饰器？", "desc": "1. 前言 装饰器是最新的 ECMA 中的一个提案，是一种与类（class）相关的语法，用来注释或修改类和类方法。装饰器在 Python 和 Java 等语言中也被大量使用。装饰器是实现 AOP（面向切面）编程的一种重要方式。 下面是一个使用装饰器的简单例子，这个 @reado…"}, {"id": "6966208872654569479", "title": "React源码解析-TinyReact分析", "desc": "基于TinyReact, 分析React主要原理，React框架由于兼容过多业务，代码量庞大读起来比较吃力。本文选取TinyReact其中包含了React框架的主要实现思想。"}, {"id": "6844904100052615181", "title": "精读《Webpack5 新特性 - 模块联邦》", "desc": "我们知道 Webpack 可以通过 DLL 或者 Externals 做代码共享时 Common Chunk，但不同应用和项目间这个任务就变得困难了，我们几乎无法在项目之间做到按需热插拔。 模块联邦是 Webpack5 新内置的一个重要功能，可以让跨应用间真正做到模块共享，所以…"}, {"id": "6844904016338485262", "title": "JavaScript 代码风格指南，你在使用哪种代码风格？", "desc": "我们的代码必须尽可能的清晰和易读。 这实际是一种编程艺术 —— 以一种正确并且人们易读的方式编码来完成一个复杂的任务。一个良好的代码风格大大有助于实现这一点。 现在，让我们详细讨论一下这些规则和它们的原因吧。 在大多数的 JavaScript 项目中，花括号以 \"Egyptia…"}, {"id": "7001010325193506853", "title": "深入浅出讲解 JS 的微任务与宏任务 | 8月更文挑战", "desc": "最开始接触到 js 的微任务与宏任务是在一次面试中，完全懵逼，下面抛出面试题，大家先睹为快： 为了搞清楚这个到底是怎么回事，找了好久都没有找到心仪的答案，现在把我查询的结果整理如下，下面我们从根本上依"}, {"id": "6983291509747482660", "title": "[译]奇怪的JavaScript", "desc": "JavaScript是一种很棒的变成语言，但是但由于它的初始版本是在 1995 年仅用十天时间构建的，再加上 JS 向后兼容的原因，就导致有很多地球人无法理解的语法😒。它并不总是会你想象的那样执行。"}, {"id": "6995873439458263048", "title": "深入浅出JS原型&原型链", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 xdm,最近无聊在看vue的源码解析，发现在vue的实例对象vm与vue组件的实例对象vueComponent这部分的实现就是用了原型与原型"}, {"id": "6946008017632493575", "title": "javascript学习之map,filter,foreach的区别和用法", "desc": "| currentValue | 必须。当前元素的值 | | index | 可选。当前元素的索引值 | | arr |可选。当前元素属于的数组对象 | map 方法会给原数组中的每个元素都按顺序调用一次 callback 函数。callback 每次执行后的返回值（包括 un…"}, {"id": "6992201388658786318", "title": "web前端高级JavaScript - 彻底掌握基于HTTP网络层的“前端性能优化”", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 彻底掌握基于HTTP网络层的 “前端性能优化” 产品性能优化方案 从输入URL地址到看到页面，中间都经历了啥 第一步：URL解析 第二步：缓"}, {"id": "6982592675148988452", "title": "ES6到ES10— Promise的基本使用和手动封装", "desc": "前言 该章为个人ES6Promise知识点笔记，主要记录Promise的基本api和注意点，最后附上利用Class封装的简单Promise 内容 1. Promise基本介绍 什么是Promise？ "}, {"id": "6967704305713283080", "title": "javascript 求数组的最大值和最小值 (6种方法)", "desc": "javascript 求数组的最大值和最小值 给定一个数组[1,8,5,4,3,9,2],编写一个算法，得到数组的最大值 9，和最小值 1。本文统计6种算法"}, {"id": "6967715614773215239", "title": "node 中的this 是什么？", "desc": "和浏览器里面不同的地方： 创建 main.js 通过上面的代码分析得出几个结论： 函数里面的this指向的是全局的 global。 整个运行文件里面的 this是指向 module.exports的。"}, {"id": "6999130266161659934", "title": "闭包理解讨论", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 闭包是什么，闭包怎么用？看了很多相关文章虽然看懂了其中的逻辑，但是在日常开发中还是没理解什么场景下改使用闭包。 mdn实用介绍 siz"}, {"id": "6844903918804172814", "title": "为什么说在 JS 中要避免使用 delete", "desc": "在 JavaScript 中 delete 操作符用于删除对象的某个属性。例如 与最直观的语义不同，使用 delete 操作符并不会直接释放内存，而是说它会使得 V8（Javascript）引擎中的 hidden class 失效，将该 object 变为一个通用的 slow …"}, {"id": "6859567567145533454", "title": "在Vue中使用播放直播流 vue-video-player  rtmp方式", "desc": "折腾了小两天犯了很多不改犯得错误，所以写一篇文章记录下，另外感谢 vue-video-playe的作者，为我们提供了这么便利的代码。 注意：这个方式引入了swf文件，解决了因网络问题加载不到swf无法播放的问题。 代码可能和文章不太一样，我抽时口写的可运行版本全部代码，基于vu…"}, {"id": "6844903604394917896", "title": "走在JS上的全栈之路(一)", "desc": "首先声明下写这篇文章的初衷，自己也还是在全栈之路探索的学徒而已。写系列文章其一是记录下自己在搭建整站中的一些心得体会(传说有一种武功是学了就会忘记的，那就是写代码。。。)，其二是希望与各位读者交流下其中遇到的坑和设计思路，怀着向即将出现的留言区学习的心态来此~~ 同构应用本身的…"}, {"id": "6966631751951056903", "title": "简述 TC39 提案的实现和交付流程", "desc": "简述 TC39 提案的实现和交付 除了规范文本和一致性测试之外，还需要实现新的 JavaScript 特性，也就是 JS 引擎、转码器、工具、polyfills 等的代码，让开发者可以使用这些功能。"}, {"id": "6932097670592856077", "title": "什么是防抖和节流？有哪些实现方式？", "desc": "平时我们买手机或者相机，都具有防抖功能，相机的防抖和这里防抖逻辑上是一样的。当我们拿起相机记录视频的时候，我们的手会不停的抖动，但是拍出的视频抖的却不是很厉害，原因就是相机把n毫秒之内的抖动给忽略掉，使相机的镜头始终保持在n毫秒之前的状态。 物体的移动在空间和时间上是连续的，但…"}, {"id": "6844904029294706695", "title": "精读《我在阿里数据中台大前端》", "desc": "而阿里经济体中的 ABC，其中的 BIG DATA，即是我们 DT https://dt.alibaba.com/ ，我们用大数据赋能商业，创造价值。 而我们说数据中台，其实阿里提出的中台只有两个：业务中台与数据中台。业务中台的目的是让业务能够快速落地，数据中台的目的是完成数据…"}, {"id": "6987704172116181029", "title": "初识webpack", "desc": "前端发展史 早期阶段 早期前端只负责写静态页面，纯粹的展示功能，js也就是简单的做一些表单的验证，特效渲染等 现阶段的Web 前端可以管理数据以及和用户互动。由于用户交互、数据交互的需求增多，也就出现"}, {"id": "6967233725864083487", "title": "JavaScript 复杂判断的更优雅写法", "desc": "JavaScript 复杂判断的更优雅写法 前提 我们编写js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，"}, {"id": "6976581380700373022", "title": "JavaScript 数组操作必须熟练运用的10个方法", "desc": "JavaScript 提供了大量不同的处理数组的方法，这里花几分钟时间介绍 10 个项目中可以用到的数组方法。"}, {"id": "6844903998969872392", "title": "如何在使用async & await 时优雅的处理异常", "desc": "在ES7的中，我们可以使用async & await进行编写异步函数，使用这种写法我们的异步函数看起来就跟同步代码一样。 在之前的版本(ES6)，可以使用Promise写法，来简化我们异步编程的流程，同时也避免了回调地狱。 上例代码中, 不断的回调，使得代码维护和管理控制流程变…"}, {"id": "6844904106499260430", "title": "浏览器缓存库设计总结（localStorage/indexedDB）", "desc": "浏览器缓存设计一直是web性能优化中非常重要的一个环节,也是SPA应用盛行的今天不得不考虑的问题.作为一名优秀的前端工程师,为了让我们的应用更流畅,用户体验更好,我们有必要做好浏览器缓存策略. 本文会介绍一些笔者曾经做过的Web性能优化方案以及浏览器缓存的基本流程,并会着重介绍…"}, {"id": "6989536154819231774", "title": "js 冷门知识 - 标签", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 前言 本系列将分多篇文章介绍 js 相关的“冷门知识”，这里的“冷门知识”是指大部分开发者都不曾留意过的知识点，亦或者"}, {"id": "6915261479784546318", "title": "玩转js正则表达式", "desc": "1. 正则常见语法 量词表示匹配多少个目标对象，精确匹配长度使用{}。 在js中，正则表达式是用RegExp对象表示，其有两种写法：一是字面量写法，二是构造函数写法。 用来找出字符串中某个字符串首次出现的位置，返回找到首个字符的位置，不存在则返回-1。该方法不执行全局匹配。它将…"}, {"id": "6949175769587269669", "title": "JavaScript之模拟new运算符的实现", "desc": "一起走进JavaSctipt世界，来探究如何模拟实现new运算符的操作，相信你看完本文之后会有所收获！"}, {"id": "6844903788872990733", "title": "【前端发动机】JavaScript 原型和原型链及 canvas 验证码实践", "desc": "最近在复习 JavaScript 基础，因为工作以后基本上没用过，天天都是拿起框架加油干，确实大部分都忘了。到了原型和原型链这一部分，觉得自己理解的比较模糊。又翻阅了《你不知道的 JavaScript》、阮一峰老师的JavaScript继承机制的设计思想还有网络上的各种文章，收…"}, {"id": "6844903904480591880", "title": "为什么我只用===而不用==呢？", "desc": "在没接触eslint之前，我的代码格式可谓是随着心情走的，爱怎么写就怎么写。自从三年前，做一个Vue项目引入了eslint后，我的代码就变得规范多了，以至于现在还产生了强迫症。eslint里面有很多代码规范的标准。一般情况下，React项目代码遵循airbnb规范，Vue项目代…"}, {"id": "6844903880413675527", "title": "纯前端用XLSX库导出excel，可含多个sheet", "desc": "实现的demo如果有更多需要参考xlsx库的github，部分参考大神的研究导出excel的逻辑：excel整个表格专业名词是workbook，里面每张表格是sheet页面引入xlsx的库，https"}, {"id": "6988345060228071438", "title": "对js闭包、作用域、原型的理解", "desc": "1）闭包 理解闭包首先要理解，js垃圾回收机制，也就是当一个函数被执行完后，其作用域会被收回，如果形成了闭包，执行完后其作用域就不会被收回。    闭包就是能够读取其他函数内部变量的函数    定义在"}, {"id": "6985433095117733902", "title": "正则表达式优化 - 捕获组和非捕获组", "desc": "前言 最近看到项目中，有些正则表达式中包含了一些没啥用的捕获组， 所以就想研究一下当其他条件相同时，使用捕获组和非捕获组在程序执行时有什么样的差距。"}, {"id": "6844903874701033480", "title": "聊聊前端项目构建的现状与想法", "desc": "经过近几年的沉淀，前端届的变革在现阶段总算是进入了一个平稳期。回顾一下前人走过的路，主要是在解决以下问题： 这些解决方法成为了我们开发中不可或缺的功能，于是我们需要一个工具把这些联立起来，于是前后出现像grunt、gulp、fis、webpack等前端工程化构建工具。经过一段时…"}, {"id": "6989488248402182181", "title": "懒加载的原理和实现", "desc": "1.懒加载概念 对于页面有很多静态资源的情况下（比如网商购物页面），为了节省用户流量和提高页面性能，可以在用户浏览到当前资源（当前窗口（可视区域）的大小）的时候，再对资源进行请求和加载。 懒加载实现原"}, {"id": "6976051697491804167", "title": "关于 JavaScript 的分号", "desc": "JavaScript 的分号究竟有什么隐藏规则要点，这一阵子在阅读和学习《Effective JavaScript》，这一篇阅读的是「第 6 条：了解分号插入的局限」。"}, {"id": "6990523790904164359", "title": "理解闭包和作用域", "desc": "词法作用域 作用域是一套根据标识符名称查找变量的规则。javascript采用词法作用域的语言。词法作用域是指变量和函数声明的作用域是由书写代码时的位置决定的。 变量作用域 变量分为全局变量和局部变量"}, {"id": "6982849154254897182", "title": "js玩转超酷时钟", "desc": "此篇文章主要介绍的是js获取当前时间并处理时间格式的方法，看完后相信你也能收获满满，在工作中得心应手的使用,无论什么格式的时间形式你都能处理好了。"}, {"id": "6923175311949758477", "title": "【前端工程化基础 - 脚手架篇】现代 CLI 和 GUI 方案概述", "desc": "关注公众号玩相机的程序员，第一时间阅读最新文章。 0. 写在前面 脚手架这个名词来源于建筑工程领域，百度百科对其的解释是“脚手架是为了保证各施工过程顺利进行而搭设的工作平台”，也就是说脚手架为工人提供了施工的基础功能。将其引申到软件工程领域，又是什么含义呢？ 广义上讲，脚手架是…"}, {"id": "6995155624929525774", "title": "js中in关键字的使用 对象是否是数组/对象的元素/属性", "desc": "js中in关键字的使用 1.判断对象是否是数组/对象的元素/属性 for...in循环 in在单独使用时 in操作符会在通过对象能够访问给定属性时返回true"}, {"id": "6975449419550294046", "title": "js 防抖——教你对象好好聊天法宝", "desc": "emmm...,在文章开始前，我想问大家一个问题，就是 当你对象在和你发消息时，把一句完整的话，拆分成一个字一个字发给你时，你当时的感受会是什么样的呢？ 我们来模拟一下憨憨的对象发送信息时的场景： 效"}, {"id": "6844903696443129869", "title": "H5实现移动端图片预览：手势缩放， 手势拖动，双击放大...", "desc": "自定义手势事件, （双指缩放，滑动，双击。。。） 图片预览即点击图片在页面中插入一个黑色全屏背景框并将图片居中显示。封装时，为了只对指定图片添加功能，可通过监听指定类名或添加某种属性的img标签监听；另外需在对背景框绑定点击事件，退出预览模式。一下是一个简单示例代码："}, {"id": "7000735186992234504", "title": "聊聊js里面的this是代表什么？", "desc": "聊聊js里面的this是代表什么？ 定义：js是系统里预定义的一个变量，是个关键字。 一、全局this 指向了window（了解） 二、关注函数里的this ：三、对象里的this注意几个非常关键点"}, {"id": "6882349487285616654", "title": "8个JavaScript库可更好地处理本地存储", "desc": "我为当前项目测试了一些本地存储库。想知道他们有什么很棒的功能吗？继续阅读。 如果你必须在同一个浏览器中从一个标签页发送消息到另一个标签页，你不必用艰难的方式。Local storage bridge在这里让任务变得更简单。 Basil.js统一了session、localSto…"}, {"id": "6933388108318638094", "title": "🤔 移动端 JS 引擎哪家强？美国硅谷找......", "desc": "在一般的移动端开发场景中，每次更新应用功能都是通过 Native 语言开发并通过应用市场版本分发来实现的。但是市场瞬息万变，Native 语言在开发效率上存在一定不足，并且从 APP 版本更新 到 应用市场审核发布 再到 用户下载更新，总会存在一定的时间差，这样就导致新的功能无…"}, {"id": "6844903972742889480", "title": "3000字说说跨域！面试官听完之后露出了满意的笑容😎", "desc": "在说跨域之前，首先需要了解的一个概念就是”同源策略“。 源=协议+域名+端口号。 如果两个url的协议、域名、端口号完全一致，那么这两个url就是同源的。 我们可以通过window.origin或location.origin得到当前源。 同源策略即：不同源之间的页面，不准互相…"}, {"id": "6844903802198294542", "title": "9102了，你还不会移动端真机调试？", "desc": "很多时候，我们在进行移动端开发时，都是先在PC端使用手机模拟器进行调试，没有问题后，我们才会在手机端的浏览器进行测试，这个时候，如果没有出现问题，皆大欢喜。但是一旦出现问题，我们就很难解决，因为缺乏可视化的界面。不似在PC端，我们能直观的去改变样式，或者是进行断点调试。有时，在…"}, {"id": "7000936119059628045", "title": "前端刷题路-Day93：钥匙和房间（题号841）", "desc": "有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。 在形式上，对于每个房间 i..."}, {"id": "6844904018263670798", "title": "关于import和require的一点理解", "desc": "require用于读取并执行js文件， 并返回该模块的exports对象， 若无指定模块， 会报错。 Node使用CommonJS模块规范， CommonJS规范加载模块是同步的， 只有加载完成， 才能执行后续操作。 import用于引入外部模块， 其他脚本等的函数， 对象或者…"}, {"id": "6967233884731736078", "title": "技术周报 · 2021-05-28", "desc": "小编推荐 字节跳动是这样应用 Flutter 的 把 Vue SFC 编译到 X Sparkplug: A non-optimizing JavaScript compiler 技术实践 React "}, {"id": "6999897855695683614", "title": "什么是JAMStack前端架构", "desc": "node.js的出现，让JS全栈开发的越来越被公司所接受。目前，最火的大前端概念当属——JAMStack"}, {"id": "6997960291849879582", "title": "前端基础四之JavaScriptDOM与事件", "desc": "身为一个合格的后端开发人员 前端的基础知识也是需要了解的 DOM是文档对象模型，时间就是，单击，双击，鼠标悬停，等"}, {"id": "6844903727027978253", "title": "【译】JavaScript 完整手册", "desc": "JavaScript 是世界上最流行的编程语言之一，现在也广泛用于浏览器之外的场景中。近几年，Node.js 的崛起解锁了长期以来被 Java, Ruby, Python, PHP 等传统服务端语言统治的后端开发领域。 这本 JavaScript 完整手册遵循二八定律（the …"}, {"id": "6994790608061759524", "title": "javascript 的七种继承方式之原型式继承和寄生式继承", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 原型式继承 前言 .前面我们已经介绍了JavaScript的三种继承方式：原型链，借用构造函数已经二者的组合继承。其中第三种组合继承最为常"}, {"id": "6844903506004934663", "title": "如何通过饿了么 Node.js 面试", "desc": "教你如何通过饿了么大前端的面试, 职位是 2~3 年经验的 Node.js 服务端程序员"}, {"id": "6844903537873272846", "title": "JS维护nginx反向代理，妈妈再也不用担心我跨域了！", "desc": "“问你自己啊，我们后台不配合解决的。” ...... ...... 1. 什么是正向/反向代理 2. 什么是跨域 我要拿C的数据，但请求不到C（例如谷歌），不过我知道B是能请求到C的，于是我去告诉B，B帮我拿回了C的数据，有点翻墙的意思。敲黑板，划重点（C只知道B是他的小伙伴，…"}, {"id": "7001413306715996174", "title": "Vue起步", "desc": "该文章是Vue起手式，写了如何创建Vue项目以及注意事项，还有如何创建Vue项目相关的内容。请各位看官指正"}, {"id": "6997647538094342152", "title": "JS利用map进行整合双数组的新奇小方法", "desc": "前言 最近因公司业务需求编写ECharts图表展示相关公司阶段型业务相关数据变化，需要服务端进行数据查询返回给前端进行数据展示。但是由于反回的数据不便于前端 ECharts展示所以需要进行数据整合"}, {"id": "6943205424023732237", "title": "关于图片性能优化，你必须知道的", "desc": "通过一些平常可能关注不多的点，进行一堆试探，最后回到我们非常耳熟的优化方式中。 1. 图片相关概念 🌰：对于页面进行缩放，我们并没有改变页面内元素的宽高px情况，但是缩放之后页面元素会放大，这是通过是什么实现的。 像素：它是图像显示的基本单元，既不是一个确定的物理量，也不是一…"}, {"id": "6997295726552170503", "title": "Next.js 配置接口跨域代理转发", "desc": "在开发Next.js 项目中，是少不了与服务器交互的，因此跨域的情况也是在所难免，但配置也并没有想象中的那么难。来跟着我做，让开发闭环。"}, {"id": "7000385241659473933", "title": "深入理解 JavaScript 原型", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 JavaScript的原型可谓是这门编程语言的核心，本文将逐步揭开它的面纱。"}, {"id": "6844903871995707405", "title": "Web 仿 App 动画竟然引出了“性能杀手”", "desc": "在我参与开发的对话小说项目过程中，我们发现创意类的活动对拉升转化数据很有帮助。经过调研，这款对话式小说产品的用户群体大多数都是比较年轻的 90-95 后，所以最后结论是希望以目前业界年轻化 APP 流行的交互形式 —— 《滑卡片》对推书活动做一次改版，也同时希望这个页面能和产品…"}, {"id": "6866970001409064967", "title": "Web开发应该知道的数据结构", "desc": "数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成 。 每一种数据结构都有着独特的数据存储方式，不同种类的数据结构适合不同种类的应用，部分数据结构甚至是为了解决特定问题而设计出来的。正确的数据结构选择可以提高算法的效率。 下面为大家介绍它们…"}, {"id": "6844904096541966344", "title": "5分钟教你使用console.log发布公司的招聘信息", "desc": "通过这种方式来帮助公司做招聘，是不是很有创意呢？一方面可以体现出这些公司对人才的渴望，另一方面也可以让开发者们直接接触招聘信息，更加高效的找到对公司感兴趣的求职者。 接下来就让来看看这些是如何实现的吧。 1. 基本的文字编排信息输出 我们可以利用这些方式实现更加有创意的控制台信…"}, {"id": "6981995678327111717", "title": "JS-什么时候用Map？", "desc": "Map是什么？ 在我看来，Map类似一个高配版的Object。 Map: Object: Map的特点？ Map默认情况下不包含任何键，所有键都是开发人员添加进去的。不像Object原型链上有一些默认"}, {"id": "6984797039141847076", "title": "手写JS打印（导出pdf）插件", "desc": "网上搜寻了几个打印插件，要么太重不够轻量级，要么功能不够完善，最终没有一款插件符合要求。 经过搜寻插件和资料的过程，发现打印原理并不难，于是尝试自己写一个插件，效果非常棒，而且非常轻量级。"}, {"id": "7002887836424929310", "title": "理解JavaScript中各种二进制对象关系", "desc": "JavaScript中怎么有这么多处理二进制的对象？TypedArray、DataView、Blob、FileReader等对象之间的关系是什么？带着问题查询了资料，试着梳理其中的关系。"}, {"id": "6844903639333470221", "title": "记一次凉凉的小米面试", "desc": "初入北京，人生地不熟的，找工作这种大事就直接到我脑袋上了。有幸小米的hr给我发了面试通知让我去快（bei）乐（shang）的面试。 4:请实现一个两边宽度固定中间自适应的三列布局。 从prototype、隐式的_proto_、constructor再到修改原型链的内容会导致的影…"}, {"id": "6977011698620334094", "title": "模拟实现对象的新增方法", "desc": "ES6新增了很多属性、方法以及某些特性，本系列主要通过模拟实现的方式来重学ES6,以便帮助自己更深入的的理解那些新增的东西。本文目标：模拟实现对象的新增方法~"}, {"id": "6984281998592311310", "title": "js Event Loop(事件循环)知多少", "desc": "前言 本文的目的就是想彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。 不论你是javascript新手还是老鸟，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们"}, {"id": "6963781192428552205", "title": "前端实现人工智能回复的功能", "desc": "前言 说到人工智障，相信大家应该都记得之前的那个仅有几个replace的智能回复吧。 嗯，非常的智能。 我们都知道中文博大精深，一句话可以有非常多种的解释。 举个例子： 是吧，所以如果我们要实现一个非"}, {"id": "6983975113792159774", "title": "有趣的JS存储问", "desc": "序章 首先看一道经典的关于JS存储的题目，来一场紧张又刺激的脑内吃鸡大战吧： 问输出？ 想必大家心中都有答案了 ... 结果很显然是有趣的， 到这里有部分现场观众朋友就问了，这特喵咋undefined"}, {"id": "6995321720580259871", "title": "JavaScrip入门指南之“Promise”（笔记九）", "desc": "一、Promise 的基本使用 1.1、Promise 简介 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了"}, {"id": "7001813540944216100", "title": "对象属性查找过程中的产物-隐藏类", "desc": "在初始化对象的时候，V8引擎会指向一个隐藏类，随后在程序运行过程中每次增减属性，就会创建一个新的隐藏类或者查找之前已经创建好的隐藏类。"}, {"id": "6844903504528556040", "title": "React源码解析(一):组件的实现与挂载", "desc": "当我们能够熟练运用React进行前端开发时，不免会对React内部机制产生浓厚的兴趣。组件是什么？是真的DOM吗？生命周期函数的执行依据又是什么呢？ 本篇，我们先来研究React组件的实现与挂载。 上述代码写完后，我们就得到了<A />这个组件，那么我们接下来先弄清楚<A />…"}, {"id": "7002427483186266126", "title": "扫码签名", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 最近有一个需求：用手机扫描PC端的二维码进行手写签名。 虽然我没做类似的需求，但是当时第一反应是需要用到canvas，这我不会啊，怎么搞，然"}, {"id": "6968626897156603918", "title": "Turf.js—让你在浏览器上实现地理分析", "desc": "我们在地图相关系统中必不可少的就是空间分析操作相关需求，例如缓冲区、计算等高线等。凭借简单的js我们无法将点线面进行结合分析，而Turf.js则可帮助我们实现这些“无理”的需求"}, {"id": "6992920027867381767", "title": "真正的键值存储机制-Map", "desc": "`Map` 是 `ES6` 新增的一种新的集合类型，它是一种真正的键/`值存储机制。Map` 的大多数特性都可以通过 `Object` 类型实现，但二者之间还是存在一些细微的差异。"}, {"id": "7005939540246396964", "title": "JavaScript基础篇05：深浅拷贝", "desc": "深浅拷贝 什么是深拷贝和浅拷贝？浅拷贝和赋值有什么区别？ 浅拷贝：创建一个新对象，其拷贝了原对象的第一层引用。即当原对象的属性值是基本数据类型时，直接拷贝其值；当原对象的属性值是对象时，将拷贝指向该对"}, {"id": "6991612977103241247", "title": "Vue3 开发一个基础的的 tabs 组件 - 体验 JSX 的灵活性", "desc": "近几天有位小伙伴问到我，他在用 vue3 实现 tabs 组件时遇到一些困惑，让我帮忙看看。 他的实现方式是：想在 tabs 组件中，直接去修改 tab-panel 的 show/hide"}, {"id": "6844903513882001422", "title": "前端本地文件操作与上传", "desc": "第一种是最常用的手段，通常还会自定义一个按钮，然后盖在它上面，因为type=\"file\"的input不好改变样式。如下代码写一个选择控件，并放在form里面： 可以看到文件的路径是一个假的路径，也就是说在浏览器无法获取到文件的真实存放位置。同时FormData打印出来是一个空的…"}, {"id": "6933798952558919694", "title": "跌妈不认？一口气团灭6道股票算法打打气", "desc": "2021 年的基金市场开年至今，暴涨又暴跌。刚迎完财神，期待牛气冲天的年轻人们，刚刚入场就狠狠的吃了资本市场的一记重锤。 各种“人类迷惑行为大赏”轮番上演，让本就魔幻的世界变得更加魔幻。如果你最近也跌了，请点个赞，让我们互相抱团取暖。 与现实略有不同，题目中添加了一些限制条件，…"}, {"id": "7000398520888868872", "title": "【重温JS】巩固基础-面向对象/面向过程/类和对象", "desc": "☆☆☆ 今天学习的内容: ( 面向对象 | 面向过程 | 类和对象 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! --day26--"}, {"id": "6844903683113631757", "title": "初识three.js，搭建three.js+vue.js项目", "desc": "简介：WebGL（全写Web Graphics Library）是一种3D绘图协议，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0（OpenGL for Embedded Systems，OpenGL嵌入式版本，针对手机、游戏机等设备相对较轻量级的版本）…"}, {"id": "7004483434886201374", "title": "this 指向小细节 ：）", "desc": "this 四大绑定原则 默认绑定 声明在全局作用域中的变量（比如 var a = 2）就是全局对 象的一个同名属性。它们本质上就是同一个东西，并不是通过复制得到的，就像一个硬币 的两面一样。 接下来我"}, {"id": "6997330743458267149", "title": "海绵宝宝邀请大家一起研究 ES6 的语法糖 class", "desc": "类的出现 由于前面花费了不少时间向大家介绍如何使用ES5的特性来模拟类似于类的行为，而实现继承的代码如此的冗长和混乱导致 ES6 新引入的 class 关键字具有正式定义类的能力。虽然表面看起来支持正"}, {"id": "6997954675701973000", "title": "结合真题理解原型与面向对象(进阶必备知识)", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 原型侧知识偶见单独命题，但更多的是和其它 JS 核心知识结合起来命题。这样做，可以从整体上拔高题目的区分度、同时实现对候选人基本功的全面考"}, {"id": "6915811952853778439", "title": "JavaScript是历史的选择", "desc": "一开始的浏览器可以支持很多东西，如Java、Flash、VBScript。但最后只有JavaScrip🐕到了最后。我就来记录下它的坎坷经历吧，泪目。 1. JavaScript的生父和它的诞生 说起JavaScript(简称JS)，就不得不提到它的设计者也就是生父：布兰登·艾…"}, {"id": "6855129007785328653", "title": "初学者应该看的 Webpack 完整指南（2020）", "desc": "如今，CLI工具（如create-react-app或Vue -cli）已经为我们抽象了大部分配置，并提供了合理的默认设置。 即使那样，了解幕后工作原理还是有好处的，因为我们迟早需要对默认值进行一些调整。 在本文中中，我们会知道 webpack可以做什么，以及如何配置它以满足我…"}, {"id": "6993956573152280613", "title": "前端工程化", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前端工程化 工程化解决的主要问题是什么？ 技术是为了解决问题而存在的 想要使用es+新特性，提高编码效率， 但是兼容有问题 想要使用less"}, {"id": "6988873633619771406", "title": "eventloop(事件循环）", "desc": "进程 和 线程 进程 描述了cpu在运行指令及加载和保存上下文所需要的时间 线程 进程中更小的单位，描述的是执行一段指令所需要的时间 JS是一门单线程语言，JS是单线程带来什么好处 js引擎在js运行"}, {"id": "6844903638238756878", "title": "JS事件循环机制（event loop）之宏任务/微任务", "desc": "js是单线程，就像学生排队上厕所，学生需要排队一个一个上厕所，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务…"}, {"id": "6992744725082177566", "title": "JavaScript 系列之作用域（一）", "desc": "[JavaScript 系列之作用域｜ 8月更文挑战 ]连更数天带你学会 JavaScript 基础。"}, {"id": "6988387082536222734", "title": "从 ECMA 规范彻底理解 JavaScript 类型转换 ", "desc": "前言 JavaScript 中的类型转换一直都是让前端开发者最头疼的问题。前阵子，推特上有个人专门发了一张图说 JavaScript 让人不可思议。 除了这个，还有很多经典的、让 JavaScript"}, {"id": "6937307681476591623", "title": "对低代码平台的一些看法｜技术点评", "desc": "由于本人水平有限，文中所表达的观点不一定准确甚至有错误。如果您有不同的意见，欢迎在评论区留言。 nocode 无代码：不需要写代码就能做出一个应用。 lowcode 低代码：仅需写少量代码就可以做出一个应用。 procode 专业代码：应用所有的代码都需要开发人员编写。 由于 …"}, {"id": "6844903734464495623", "title": "ES6面试、复习干货知识点汇总（全）", "desc": "近期在复习ES6，针对ES6新的知识点，以问答形式整理一个全面知识和问题汇总。 答： ES6是新一代的JS语言标准，对分JS语言核心内容做了升级优化，规范了JS使用标准，新增了JS原生方法，使得JS使用更加规范，更加优雅，更适合大型应用的开发。学习ES6是成为专业前端正规军的必…"}, {"id": "6985031392883441672", "title": "[收藏系列] 无聊de时光拿来把常见的数组方法重写一遍，它不香吗？", "desc": "push/pop/unshift/shift/reverse/splice/join/concat/indexOf/reduce/forEach/map/filter/some/every/find/"}, {"id": "6963275731606437902", "title": "狠狠滴深拷贝", "desc": "前言 对象的深浅拷贝，一直是老生常谈的话题，平台上的文章数量可谓是汗牛充栋，要从这块素材里找突破几乎是不可能。索性我就写一篇文章，积累一下自己的学习心得，以便后续复习的时候，能有一个比较清晰的思路。 "}, {"id": "6844904017273815048", "title": "SVG 入门指南(看完,对SVG结构不在陌生)", "desc": "SVG，即可缩放矢量图形(Scalable Vector Graphics)，是一种 XML 应用，可以以一种简洁、可移植的形式表示图形信息。目前，人们对 SVG 越来越感兴趣。大多数现代浏览器都能显示 SVG 图形，并且大多数矢量绘图软件都能导出 SVG 图形。SVG 主要可…"}, {"id": "6844903509934997511", "title": "Promise 必知必会（十道题）", "desc": "Promise 想必大家都十分熟悉，想想就那么几个 api，可是你真的了解 Promise 吗？本文根据 Promise 的一些知识点总结了十道题，看看你能做对几道。 以下 promise 均指代 Promise 实例，环境是 Node.js。 解释：Promise 构造函数是…"}, {"id": "6922621062987382791", "title": "带你入门前端工程（十一）：微前端", "desc": "换句话说，就是将一个大型、复杂的应用分解成几个服务，每个服务就像是一个组件，组合起来一起构建成整个应用。 牵一发而动全身，仅仅修改一处代码，就需要重新部署整个应用。经常有“修改一分钟，编译半小时”的情况发生。 代码模块错综复杂，互相依赖。更改一处地方的代码，往往会影响到应用的其…"}, {"id": "6920492226594373639", "title": "JavaScript sleep睡眠函数", "desc": "JavaScript是单线程运行的，没有内置的sleep函数，现在模拟实现sleep延迟执行的效果。 使用睡眠函数实现红绿灯代码，红灯2秒，黄灯1秒，绿灯3秒，循环改变颜色。 2. setTimeout 直接使用setTimeout实现sleep()的方法，兼容性最好，但是使用…"}, {"id": "6997946968500600845", "title": "面向对象-原型链继承（中）", "desc": "上期我们大概讲了一些基本的东西，比如什么是继承，原型链的检索规则，以及对继承举了2个例子啊 面向对象-继承（上） 今天我们继续举例，"}, {"id": "6844903704466833421", "title": "【译】理解 Javascript 执行上下文和执行栈", "desc": "如果你是一名 JavaScript 开发者，或者想要成为一名 JavaScript 开发者，那么你必须知道 JavaScript 程序内部的执行机制。理解执行上下文和执行栈同样有助于理解其他的 JavaScript 概念如提升机制、作用域和闭包等。 正确理解执行上下文和执行栈的…"}, {"id": "6913411859559219213", "title": "ES6 系列之 Proxy", "desc": "前几天模拟实现了 MobX 的两个函数 —— 手写实现 MobX 的 observable 和 autorun 方法，其中用到了 Proxy，所以打算再对 Proxy 深入了解一下，做个笔记。 包括以前的ES6系列文，加上这篇应该差不多了一个系列完结了。 Proxy 对象用于创…"}, {"id": "6991132084127399967", "title": "JavaScript的数组类型方法 | 8月更文挑战", "desc": "1.concat，创建一个新数组，将array与任何数组 或 值连接在一起。 2.pop，删除数组的最后一个元素，返回值为最后一个元素 3.shift，删除数组的第一个元素，返回值为第一个元素 4.s"}, {"id": "6844904105874472974", "title": "【精】从206个console.log()完全弄懂数据类型转换的前世今生(上)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 这一期给大家带来的是一篇关于JS数据类型转换的文章，起因主要是前几天在刷类型转换的题时突然感觉自己对它们理解的还不够深刻啊，对于什么[] == ![]、!{} == []这类题总是一知半解，记了忘忘了记。 这让我很苦…"}, {"id": "6999843615396593677", "title": "学习记录之算法篇——二叉树", "desc": "1. 二叉树的前序遍历 描述 给你二叉树的根节点 root ，返回它节点值的 前序 遍历。 示例： 递归解法 解题思路： 递归解法很容易理解，根据前序遍历的顺序：根 -> 左 -> 右；可以将二叉树的"}, {"id": "6844904182441312263", "title": "以游戏玩家的视角开启设计模式", "desc": "最近学习设计模式和TypeScript，发现网上的资料略显硬核，不太容易理解记忆，经常看完就忘。作为一名游戏玩家，发现游戏中的很多场景都能和相应的设计模式相关联，不仅便于理解，更利于合理地运用设计模式。由于个人水平有限，只整理个人觉得比较有趣的设计模式，每个模式采用哲学三问进行…"}, {"id": "6844903902295359502", "title": "JS最新基本数据类型：BigInt", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 BigInt数据类型的目的是比Number数据类型支持的范围更大的整数值。在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用BigInt，整数溢出将不再是问题。 此外，可以安全地使用更加准确时间戳…"}, {"id": "7001731617710407688", "title": "JavaScript | P09-JS数组", "desc": "1. 数组简介 JS对象包括 内建对象,宿主对象,自定义对象。数组也是一个对象,只不过不是普通的对象。 1、概念 数: 一系列数 组: 组合起来 数组其实是数据结构的概念,数组用于数组的储存和索引。 "}, {"id": "6844904190636982280", "title": "两行 Javascript 代码生成 UUID", "desc": "发现一个简单的方法，可以在不依赖第三方库的情况下，在 Javascript 应用程序中生成 UUID。 在 Javascript 中可以用的 URL.createObjectURL 方法创建一个惟一的 URL，以表示传递给它的对象。为了让这个 URL 是唯一的， URL.cre…"}, {"id": "6869397549342523405", "title": "Dooring可视化之从零实现动态表单设计器", "desc": "之前笔者有写过一篇如何设计动态表单配置平台的文章，但是由于笔者电脑问题代码丢失，所以后期重新实现了一套表单设计器，并优化了之前的设计方式，特地做一下总结和复盘。 上图中我们将表单设计器集成到了H5-Dooring中，使其可以实现拖拽生成表单。 其次我们可以根据右边的配置项，动态…"}, {"id": "6999887097175736357", "title": "DOM 简介及相关API", "desc": "一、什么是 DOM 文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。 W3C 已经定义了一系列的"}, {"id": "6916849124650254350", "title": "再见：我爱掘金 中的 蝌蚪机器人 ", "desc": "最近非常火的我爱掘金插件非常火，作者为 大帅_全能老猿 ，短短十几天已经超过3500个安装量，足见火爆程度。实属摸鱼必备神器，每天上班第一件事先把蝌蚪挂上再去上班。 最先测试的是调整蝌蚪大小，大帅限制的4-8，我直接给篡改发出的请求包为20，蝌蚪效果如下。 这样还可以突破颜色值…"}, {"id": "6998467421853974535", "title": "一个小前端写的事件总结", "desc": "将会详细介绍事件、事件流、事件对象、事件处理程序、以及兼容 IE 浏览器等内容，包括如何写 JavaScript 事件委托。"}, {"id": "6844904167752859661", "title": "ES2020 已定稿！赶紧上手实践一下吧（真实场景例子）", "desc": "近年来，JavaScript 的发展非常迅速。 尤其是在2015 年 ES6 发布之后，情况变得更好。 现在 许多新的特性被提议包括在 ES2020版本中。好消息是这些已经已经敲定。 现在，我们获得了最终定稿的功能清单，它们将在被批准发布之后出现在备受期待的 ES2020 中。…"}, {"id": "6998439130371719205", "title": "解决Javascript 数字精度丢失的问题", "desc": "一、场景复现 一个经典的面试题 为什么是false呢? 先看下面这个比喻 比如一个数 1÷3=0.33333333...... 3会一直无限循环，数学可以表示，但是计算机要存储，方便下次取出来再使用，"}, {"id": "6961036619163893773", "title": "沙箱是什么，怎样做一个js沙箱?", "desc": "什么是沙箱 沙箱，即sandbox，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创建类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。"}, {"id": "6844904190578278414", "title": "「算法思想」分治、动态规划、回溯、贪心一锅炖", "desc": "初学者一听到算法思想，就会觉得它们高深莫测，只能望而却步。 但如果你看过《事实》这本书，你就不会被大脑中的惯性思维所影响。 只要我们理解算法思想的关键点，多做题练习并加深理解记忆。其实算法思想就像切菜一样简单。 上一篇算法系列专栏中我们搞明白了递归。其实递归这种编程技巧是很多算…"}, {"id": "6990619538257608740", "title": "跨域--通过代码一步一步了解其本质[1]", "desc": "跨域无论日常工作还是面试都会遇到。网上充斥着各种资料，但大多数资料都是重理论，没有实际的代码的支持，这篇文章从代码出发，轻理论重实践的讲解跨域。"}, {"id": "6909074645593374733", "title": "Node 工具开发", "desc": "ECMAScript他也是一门脚本语言，一般缩写为ES，通常我们会把他看作为JavaScript的标准规范。 但实际上JavaScript是ECMAScript的扩展语言，因为ECMAScript只是提供了最基本的语法，通俗点来说只是约定了代码的如何编写，例如我们该怎么样定义变…"}, {"id": "6844903672581734413", "title": "9月，水了几个大中厂前端面试的一些总结分享 | 掘金技术征文", "desc": "8月底离职，其实是裸辞，当然大概是在原东家我所在的产品项目组的人集体跑路了，所以我也离开了自己所在一年半的东家，毕竟留下来的都是要填大坑的。于是大概花了两天的时间简单梳理了一下前端知识和回顾了一下，自己做的产品和遇到的一些问题。然后一个星期面试了大概10家企业的样子，每天上午一…"}, {"id": "6997434722221572132", "title": "JS Set与WeakSet对象的介绍与实践", "desc": "Set对象可以存储任意类型的数据，且只能有唯一值。 WeakSet对象只可以存储对象数据，且只能有唯一值。"}, {"id": "6935260102148489223", "title": "React服务端渲染实践|手动实现", "desc": "关于服务端渲染也就是我们说的SSR大多数人都听过这个概念，很多同学或许在公司中已经做过服务端渲染的项目了，主流的单页面应用比如说Vue或者React开发的项目采用的一般都是客户端渲染的模式也就是我们说的CSR。 但是这种模式会带来明显的两个问题，第一个就是TTFP时间比较长，T…"}, {"id": "6992390618433454110", "title": "你了解ES6 reduce,快使用起来 减少你的面条式代码吧!", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 介绍 reduce()方法可以搞定的东西，for 循环，或者 forEach 方法有时候也可以搞定，那为啥要用 reduce()"}, {"id": "6911176399025864712", "title": "可视化搭建平台的地图组件和日历组件方案选型", "desc": "可视化搭建平台除了需要为用户提供简单便捷的操作方式之外, 还需要提供丰富的组件支持和组件扩展, 这样才能满足更多用户的业务需求. 在 H5-dooring 创建的初期主要考虑的方向是用户使用的便捷性, 即最大程度的降低用户操作成本, 所以采用了智能布局, 也就是react-gr…"}, {"id": "6844903555673882632", "title": "手把手教你撸一个 Webpack Loader", "desc": "经常逛 webpack 官网的同学应该会很眼熟上面的图。正如它宣传的一样，webpack 能把左侧各种类型的文件（webpack 把它们叫作「模块」）统一打包为右边被通用浏览器支持的文件。webpack 就像是魔术师的帽子，放进去一条丝巾，变出来一只白鸽。那这个「魔术」的过程是…"}, {"id": "6998147007877480455", "title": "总结js中字符串截取的几种方法", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 截取字符串是我们在工作中十分常见的需求，像我这种记性差的，就总记不住那几个词，每次用到都得去百度，然后每次百度到的内容还都不一样，然后就百度"}, {"id": "6989913476168679455", "title": "边学边译JS工作机制--12. 网络层内部，以及性能，安全性的优化", "desc": "A little bit of history 50多年前，ARPA网络被创建了。它是一个早期的数据包交换网络而且是第一个实现了TCP/IP的网络。这个网络是连接到加州大学和斯坦福大学的。20年之后，"}, {"id": "6995882999921246239", "title": "JavaScrip入门指南之“事件”（笔记十二）", "desc": "事件详解 注册事件的三种方式 当一个按钮要被多个用户使用时，多个用户可能会对一个按钮进行事件注册，此时每个用户都的代码都写在了 js 文件中，当引入多个js文件时，后面引入的js会覆盖掉前面引入的js"}, {"id": "6844903689124053005", "title": "让 Chrome 崩溃的一行 CSS 代码", "desc": "一般的 CSS 代码只会出现 UI 版式或者兼容性方面的小问题。但这里我们要分享一行有趣的 CSS，它可以直接让你的 Chrome 页面挂掉 :) 其实这台机器只有 8GB 内存，不过这不重要了。和让 JS 崩溃的红线容量 4GB 比起来，果然还是 CSS 更强大呢 :) 这行…"}, {"id": "6974605300594638885", "title": "JSBridge原理解析——以WebviewJavascriptBridge实现方式为例", "desc": "什么是 JSBridge？ JSBridge 是一种 webview 侧和 native 侧进行通信的手段"}, {"id": "6986864496476160013", "title": "JS中常用的输出方式", "desc": "JS中常用的三大类输出方式 ： console 控制在浏览器控制台输出的， window弹出提示框， 向页面指定容器中插入内容。"}, {"id": "6953631734621536287", "title": "JavaScript 闭包浅析", "desc": "有关闭包，谁能看得懂：一个函数和对其周围状态的引用捆绑在一起，这样的组合就是闭包？🤣 Don't panic!由我慢慢道来……"}, {"id": "6914846392808636429", "title": "Web 帧动画解决方案 - APNG原理与实现", "desc": "作为前端同学，或多或少都会接到动画需求。如果是有规律性的动画还是相对容易实现的，但如果是比较复杂的帧动画，我们用 CSS 实现的话，就非常容易造成如下情况，设计师是卖家秀，我们开发的是买家秀。 或许你会想到用 GIF 实现，但是 GIF 经常会有杂边，无法满足设计师对精致度的要…"}, {"id": "6844903709806182413", "title": "WebAssembly完全入门——了解wasm的前世今身", "desc": "接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比较模糊和笼统。感觉看了之后收获没有达到预期，要么是文章中的例子自己去实操不能成功，要么就是不知所云、一脸蒙蔽。本着业务催生技术的态度，这边文章就诞生了。前部分主要…"}, {"id": "6997008076545114125", "title": "浅析 Promise、Async/Await", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 Promise 基本用法 Promise 的简单封装与使用 Ma Mi 任务模型 Ma 指 MacroTask(宏任务)，Mi 指 Micr"}, {"id": "6844903575877861390", "title": "身份证号码的正则表达式及验证详解(JavaScript，Regex)", "desc": "在做用户实名验证时，常会用到身份证号码的正则表达式及校验方案。本文列举了两种验证方案，大家可以根据自己的项目实际情况，选择适合的方案。 居民身份证号码，正确、正式的称谓应该是“公民身份号码”。根据【中华人民共和国国家标准 GB 11643-1999】中有关公民身份号码的规定，公…"}, {"id": "6964649946238681125", "title": "“类”设计模式和“原型”设计模式——“复制”和“委托”的差异", "desc": "JavaScript 不是纯粹的面向对象语言？？？看完本篇，你就会明白这种“混沌”是什么、来自何处，以及去往何方！！"}, {"id": "6997017412902076453", "title": "前端面试中最全高频JavaScript手写题", "desc": "本文整理了前端面试高频出现的手写js相关的题目，这些题做之前，想想这些方法是用来干什么，需要传什么参数，返回的什么，另外还需要注意一些边界条件，这对js基础有很大考验，基础不好的，一定要好好补补js"}, {"id": "6992880862106746916", "title": "一文搞懂JS系列（十一）之this的三种特殊指向", "desc": "了解 this 指向在立即执行函数，以及 setInterval 和 setTimeout 中的特殊指向问题，轻松搞懂 this指向。"}, {"id": "6844904032587382797", "title": "窥探原理：手写一个 JavaScript 打包器", "desc": "所有的内容之后会陆续放出，如果你有任何想要了解的内容或者有任何疑问，关注公众号【前端瓶子君】回复【123】添加好友，我会解答你的疑问。 作为一个前端开发人员，我们花费大量的时间去处理 webpack、gulp 等打包工具，将高级 JavaScript 项目打包成更复杂、更难以解…"}, {"id": "6968856664560648199", "title": "JS 的 new 做了哪些事情呢？", "desc": "我们在日常的开发中经常会用到 new 操作符，来看看它到底做了什么事情；了解完它的原理之后接着来自己实现一下 new 的功能吧。"}, {"id": "6997645500337881124", "title": "前端面试总结-Javascript", "desc": "结合牛客以及自己最近面试的问题总结了一下Javascript的问题（ES5），这部分讲的ES5的内容，ES6的在接下来讲"}, {"id": "6844903512225087496", "title": "优雅的使用 element-ui 中的 table 组件", "desc": "又重复写模版了... table 作为数据展示组件，在日常开发中经常被用到，通过这篇文章，可以看到结合 vue 的 slot/component 特性，做一层封装，可以大大简化 table 的使用，大部分时候只需写一个配置属性就可以了。"}, {"id": "6844903569552834568", "title": "TypeScript 实践", "desc": "TypeScript 是有类型定义的 JS 的超集，包括 ES5、ES5+ 和其他一些诸如泛型、类型定义、命名空间等特征的集合，为了大规模 JS 应用而生。对于 TypeScript 本身，更多信息请参考《TypeScript 体系调研报告》。本文只记录 TypeScript …"}, {"id": "6995549919784206349", "title": "javascript 的七种继承方式（七）类的继承", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战  前言 类 constructor方法 类的继承 子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为"}, {"id": "6993701321031303181", "title": "浅显的谈谈关于this的指向问题", "desc": "提前说明哦，这是一篇很基础类的文章，只适合小小白阅读，因为文章内容来源于我刚入行时的笔记。各位高人请绕道，谢谢~关于this的指向有很多的文章博客说明，但在我看来，这个问题并非是看几篇文章就能搞懂的"}, {"id": "6844903555824893965", "title": "从2.4万篇文章中挑出的最棒的 JavaScript 学习指南（2018版）", "desc": "全文包含学习指南、新人上手、Webpack、性能、基础概念、函数式编程、面试、教程案例、Async Await、并发、V8、机器学习、数据可视化、调试、单元测试等章节，非常适合用于对自己 JavaScript 技术栈的比对，用于查漏补缺，适合收藏阅读。有删减。文中如有错误，欢迎…"}, {"id": "6844904169757753358", "title": "时间切片的实现和调度（原创2.6万字）", "desc": "本人系一个惯用Vue的菜鸡，恰巧周末和大佬扯蛋，峰回路转谈到了fiber，被大佬疯狂鄙视... 于是本菜开始了 React Fiber 相关的读源码过程。为什么看 Fiber？因为 Vue 没有，Vue3 也没有，但是却被吹的很神奇。 旧版本React同步更新：当React决定…"}, {"id": "6940056609250869278", "title": "深入理解原型链与继承", "desc": "本文就带大家来深入理解下JavaScript中的原型，欢迎各位感兴趣的开发者阅读本文。 接下来我们来逐步分析下原型与对象之间的关系。 原型对象里包含constructor与__proto__属性。 上个章节我们捋清了构造函数与原型对象的关系，接下我们来看下函数实例与原型对象之间…"}, {"id": "7002436890372603912", "title": "ECMAScript模块的动态导入", "desc": "ECMAScript模块(简称ES模块)是一种JavaScript代码重用的机制 ES 模块系统有 2 个部分： 导入-import ..."}, {"id": "6998074399349800974", "title": "JavaScript 进阶技能，中高级前端必备|8月更文挑战", "desc": "创建对象的三种方式 对象字面量 系统构造函数，工厂模式 自定义构造函数 原理同工厂模式，方法名首字母大写。自定义构造函数自动做了四件事： a: 在内存中创建新的对象 b: this 指向这个对象 c:"}, {"id": "6965494591311233031", "title": "canvas文字粒子效果  3点饮茶，7点放工，美滋滋~", "desc": "先言：  今天3点多在饮茶的时候，发现有好几天没水文章了，但是太难的玩意又不会啊，咋办，突然想起电脑里还有存着一个文字粒子特效，好家伙，这不就来了，先看效果如下： 因为gif图最大5m，但是这东西演示"}, {"id": "7000016803338387469", "title": "使用setTimeout模拟setInterval", "desc": "在项目开发中经常会用到计时器，比如抽奖活动的倒计时，或者轮循去请求接口等，通常我们都是用 setInterval 这个方法去实现计时，但是这样有一个缺点，虽然能设置隔一段时间后不断执行，但是实际上只是"}, {"id": "6999454647651926052", "title": "改变this指向的方法", "desc": "-使用ES6的箭头函数 -在函数内部将this赋值 -使用apply、call、bind方法 -new 实例化一个对象"}, {"id": "6844903495959576583", "title": "webpack：从入门到真实项目配置", "desc": "自从出现模块化以后，大家可以将原本一坨代码分离到个个模块中，但是由此引发了一个问题。每个 JS 文件都需要从服务器去拿，由此会导致加载速度变慢。Webpack 最主要的目的就是为了解决这个问题，将所有小文件打包成一个或多个大文件，官网的图片很好的诠释了这个事情，除此之外，Web…"}, {"id": "7001111608903204901", "title": "canvas不使用arc函数，也可以画圆形的办法", "desc": "canvas不使用arc函数，也可以画圆形的办法......................................."}, {"id": "6881078539756503047", "title": "Vite 原理分析", "desc": "Vite(读音类似于[weɪt]，法语，快的意思) 是一个由原生 ES Module 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发，在生产环境下基于 Rollup 打包。 为了实现上述特点，Vite 要求项目完全由 ES Module 模…"}, {"id": "6844903702726180871", "title": "彻底搞懂小程序登录流程-附小程序和服务端代码", "desc": "点开代码一看, 大部分代码都在处理 userInfo.... 但这样的模板并不科学, 这样仅仅是考虑了首页需要用户信息的情况, 如果扫码进入的页面也需要用户信息呢? 还有直接进入跳转的未支付页活动页等... 《奇舞周刊》是360公司专业前端团队「奇舞团」运营的前端技术社区。关注…"}, {"id": "6965660033728135176", "title": "【源码】Vue-i18n你知道国际化是怎么实现的么？", "desc": "Vue I18n 是 Vue.js 的国际化插件，它可以轻松地将一些本地化功能集成到你的 Vue.js 应用程序中"}, {"id": "6844903882208837645", "title": "「前端进阶」彻底弄懂函数柯里化", "desc": "函数柯里化在许多应用程序中已经变得很普遍。 了解它们是什么，它们如何工作以及如何充分利用它们非常重要。 在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。 该函数返回一个接收第三个参数的函数。 将之前接收到的三个参数应用于原普通函数…"}, {"id": "7000930607958065182", "title": "react源码解析之Component和PureComponent", "desc": "在react v16.8.0版本之前，我们总是习惯大多数的使用 React.Component 来创建一个组件，那么 React.Component 是怎么来的呢？"}, {"id": "6954966248233009182", "title": "理解 JavaScript 的执行上下文这篇就够了！", "desc": "别小看了 JavaScript！它用起来简单，却 暗藏诸多复杂费解的概念，而执行上下 文便是其之一。当理解了执行上下文后你会对 JavaScript 诸如作用域、闭包的概念豁然开朗。"}, {"id": "6984241484648661029", "title": "原声js模拟直播弹幕滚动", "desc": "原声js模拟直播弹幕滚动动画。首先将直播区域分成十份（我个人自己为了便于计算分成十份），将输入的内容随机放到分成的十份区域中，插入到十份区域右边的视图之外，然后调用动画，按照随机的速度从右向左移动"}, {"id": "6844903921442422791", "title": "面试官问: 如何理解Virtual DOM？", "desc": "vdom是虚拟DOM(Virtual DOM)的简称，指的是用JS模拟的DOM结构，将DOM变化的对比放在JS层来做。换而言之，vdom就是JS对象。 将该数据展示成一个表格，并且随便修改一个信息，表格也跟着修改。 这样点击按钮，会有相应的视图变化，但是你审查以下元素，每次改动…"}, {"id": "6993890029953122312", "title": "Javascript的异常及错误捕获", "desc": "对于前端而言，不管是开发还是生产阶段，异常的捕获和定位都是至关重要的。 开发阶段，通过详细的报错信息，我们可以快速定位并解决问"}, {"id": "6984330796068765710", "title": "抽象语法树－AST初探", "desc": "AST，即抽象语法树，是对源代码语法结构的一种树状抽象表示，每个节点对应源代码中的一段代码语句，是一种平台无关的数据描述。"}, {"id": "6994339262258741285", "title": "强制缓存与协商缓存", "desc": "为什么要采用缓存 在任何⼀个前端项⽬中，访问服务器获取数据都是很常⻅的事情，但是如果相同的数据被重复请求了不⽌ ⼀次，那么多余的请求次数必然会浪费⽹络带宽，以及延迟浏览器渲染所要处理的内容，从⽽影响⽤"}, {"id": "6987687828658323464", "title": "APP内嵌H5跟随系统切换主题方案", "desc": "案例场景： 近日我司app需要实现跟随系统切换主题方案，需要排期(jiaban)实现 实现分析： 1、css变量 var实现主题切换 2、和app交互获取当前主题 按照规矩先：举栗子 使用时： 方法的"}, {"id": "6996958146270855199", "title": "new 关键字", "desc": "new new 做了什么 创建了一个全新的对象 实例与构造函数通过原型链链接了起来 将空对象作为构造函数的this上下文，执行构造函数 返回新对象 实现一个new 对比下看 一模一样有木有 但是要注意"}, {"id": "6994669820209790984", "title": "模块化开发：CommonJs、AMD、ESM来啦！", "desc": "模块化演变过程 stage1.文件划分方式 缺点 没有私有的独立空间，在模块外部可以被随意的访问和修改，污染全局作用域 模块多了之后会产"}, {"id": "6989521308165881870", "title": "从零开始学习3D可视化之项目部署", "desc": "项目部署，也就是将完成的数字孪生可视化项目发布，在互联网上可以访问到。作为一个合格的程序猿，仅仅会打代码还是远远不够的，项目的部署也是必须要会的操作，也就是所谓的上线，将我们本地开发好的数字孪生可视化"}, {"id": "6997228976447946782", "title": "js 的 Array", "desc": "数组是我们经常使用的数据类型。相信经常使用的 push() 和 索引取值感觉再熟悉不过了，但是可能会对 flat() 之类的比较陌生"}, {"id": "7000167997398581255", "title": "JavaScript知识点回顾（二十五）——对象的不变性", "desc": "这是我参与8月更文挑战的第二十五天，活动详情查看：8月更文挑战 不变性 有时候我们会希望属性或者对象是不可改变的。"}, {"id": "6981296205607206926", "title": "TypeScript 入门指南详解", "desc": "1.好用吗？ 本质 是一个添加了类型注释的JavaScript 不会破坏JavaScript原有的知识体系 更加可靠 TypeScript的静态类型检测， 能在开发阶段发现一些低级错误并解决 面向接口"}, {"id": "6981319569432379428", "title": "如何解决 var 在 for 循环中的问题", "desc": "for (var i = 1; i <= 5; i++) { setTimeout(function timer() { console.log(i) }, 本文提供了三种解决方案。"}, {"id": "6973541673196322847", "title": "原生JS实现触摸滑动监听事件", "desc": "今天写一个小Demo，有个地方涉及到了左滑右滑的逻辑，本来想着用插件来着，但是想到自己好久没用原生JS写滑动的监听了，所以试着用原生JS来实现了一下，毕竟温故而知新嘛......"}, {"id": "6909289889955577863", "title": "Smart UI ：创造大于1的辅助系数", "desc": "疫情的缘故，一整年都没去过电影院，在家用投影仪看的片子也屈指可数；不过有一部，足足看了两遍——《超体》。这是个14年的科幻动作片，女主误入黑帮交易，被迫在腹中缝入了高浓度提纯的CPH4（孕妇产生的微量元素可以帮助胎儿形成骨骼）走私毒品，运输过程中因为被打，药品破了渗透到了她的血…"}, {"id": "6844904186572701710", "title": "19个前端开发人员的救生工具", "desc": "在本文中，我为前端Web开发人员汇总了30种顶级工具，从代码编辑器和代码游乐场到CSS生成器，JS库等等。 你是否曾经尝试记住如何声明渐变，文本阴影，Flexbox或Grid的CSS属性，仅举几例？不容易。除非你一再使用某些CSS功能及其属性，否则很难记住所有这些功能。但是，即…"}, {"id": "6981742595802136583", "title": " 🍟React 知识体系之 JSX", "desc": "在日常的 React 开发工作中，我们已经习惯了使用 JSX 来描述 React 的组件内容。关于 JSX 语法本身，相信每位 React 开发者都不陌生 JSX 到底是什么 JSX 到底是什么，我们"}, {"id": "6972863906394374175", "title": "高性能 JavaScriptの笔记（四）-- 时代变了", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 字符串连接会导致令人惊讶的性能问题 字符串拼接方法 方法 示例 说明 The + operator str = \"a\" + \"b\" + \""}, {"id": "6998113939384958989", "title": "🍉JavaScript数据结构之数组及栈", "desc": "最近在看JavaScript数据结构与算法一书，这里就带大家复习一下数组和栈的数据结构吧~ 一、数组 几乎所有的编程语言都原生支持数"}, {"id": "6933009968710811661", "title": "一键格式化代码带来的快感 | 你还在为每个项目配置Stylelint和Eslint吗", "desc": "大部分前端项目都配置Stylelint、Eslint、Tslint和Prettier四大前端代码校验工具。代码校验工具以下简称Lint，为了解决代码不严谨，通过预设规则校验代码，检测其是否存在错误/漏洞，并对错误/漏洞提示修复方案并尽可能依据修复方案格式化出正确代码。该功能称为…"}, {"id": "7005767721480617992", "title": "tree-shaking 资料收集学习", "desc": "tree-shaking 资料 你的Tree-Shaking并没什么卵用 Tree-Shaking性能优化实践 - 原理篇 rollup 在线repl 什么是tree-sahking 移除JS上下文中"}, {"id": "6981820158046109703", "title": "让你 nodejs 水平暴增的 debugger 技巧", "desc": "学习 nodejs 最重要的是什么？可能每个人都有自己的答案。 我觉得学习 nodejs 除了要掌握基础的 api、常用的一些包外，最重要的能力是学会使用 debugger。因为当流程复杂的时候，断点"}, {"id": "7002538987956994079", "title": "纯css代码实现连线效果", "desc": "近期遇到一个需求：给树形结构的筛选器增加连线样式，美化的同时增加可读性，如下图 方案与实现 看到连线这种功能，当时首先想到的思路就是通过canvas去画，但是想了下我们业务的代码早就完成了，使用"}, {"id": "7001062828446580744", "title": "8月更文挑战 | JS中的this详解", "desc": "前言 介绍this 默认绑定 隐式绑定 显示绑定 new绑定 开始 注意：本次都是在浏览器的环境下 默认绑定 1.我们举个🌰来讲，看起来其"}, {"id": "6965646653076439048", "title": "Vue3最啰嗦的Reactivity数据响应式原理解析", "desc": "Vue3如火如荼，与其干等，不如花一个下午茶的时间来看下最新的响应式数据是如何实现的吧。在\b本文中，会写到vue3的依赖收集和proxy数据代理，以及副作用(effect)是如何进行工作的。"}, {"id": "6986280730007437319", "title": "[7.21更新]掘金最优秀的447篇宝石💎文章大汇总（按文章类型分类）", "desc": "周末统计了下掘金前端热门榜里前1w的文章，将点赞数超过1000的文章，一共447篇，每天学习5篇，3个月就能学完，相信学完一定能成为大牛🐮，大家一起共勉吧！"}, {"id": "6948235657978314783", "title": "掌握设计原则，你就是光（25个问题，你会几个）", "desc": "看完这些问题，是不是激动的一笔，激动了，说明你又要进步成长了。 先哈两句，活跃一下气氛。然后通过提出问题，回答问题，然后结合生活例子和代码，来全方位阐述设计原则知识。 哈哈哈哈，那我只能说，你是光，你是电，你是唯一的神话。 大家有没有这种感觉，没有没关系，我举几个例子，大家就明…"}, {"id": "6942272335764258853", "title": "掘金这一年半值得你关注的文章", "desc": "2019年中的时候做了一个爬虫以及页面，定时爬取掘金首页的文章进行过滤而筛选出更值得关注的文章，避免一直刷掘金去寻找，节约浏览时间。而且这个小站现在依旧工作着 👉 掘金热门 这两天之前买的阿里服务器到期了，续费价格遥不可及，所以打算把服务迁移到新的服务器。考虑到之前的数据没有…"}, {"id": "6844904066301050893", "title": "总结移动端H5开发常用技巧（干货满满哦！）", "desc": "年后第一天到公司上班，整理一些在移动端H5开发常见的问题给大家做下分享，这里很多是自己在开发过程中遇到的大坑或者遭到过吐糟的问题，希望能给大家带来或多或少的帮助，喜欢的大佬们可以给个小赞，如果有问题也可以一起讨论下。 下面是最近一个月整理的JS基础总结，可供大家温故而知新。 移…"}, {"id": "6993676334635417614", "title": "深究一下let、const到底有没有提升？", "desc": "var、let、const是JavaScript声明变量的三种方式，都知道let和const是不存在变量提升的，但深究一下，还是能发现这个说法其实并不是很准确"}, {"id": "7003905672668512264", "title": "「每日一题」斐波那契数列", "desc": "1. 题目描述 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下： 斐波那契数列由0和1开始，之后的斐波那契数就是由之前的两数相加而得出"}, {"id": "7005822155686412319", "title": "防抖节流以及你可能不知道的eventLoop", "desc": "防抖和节流 防抖 防抖函数原理：在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。 注意了：如果n秒内又被触发，则重新计时。 也就是说，他是通过“ 清空setTimeout并重新计算 "}, {"id": "7005371002808959007", "title": "「每日一题」IPO", "desc": "1. 题目描述 假设 力扣（LeetCode）即将开始 IPO 。为了以更高的价格将股票卖给风险投资公司，力扣 希望在 IPO 之前开展一些项目以增加其资本。 由于资源有限，它只能在 IPO 之前完成"}, {"id": "6943055278212382750", "title": "🔥「深入本质」你真的理解undefined和null吗", "desc": "undefined和null在js中非常常见，而且两者都代表\"空\"的含义，但又有细微的差异，这俩每天都能见到的东西，你真的了解它们吗？来和Blue一起，重新认识undefined和null吧本文将包含"}, {"id": "6916424686926888968", "title": "一个防止你多次调用接口的小轮子", "desc": "之前听了同事的一个分享会，一个场景是父模块需要一个接口的数据，子模块也是需要这个接口的数据，如果子父模块都调这个接口的话，就浪费性能。当然也可以使用vuex，props这种传参。使用vuex的话就太笨重了，复用到别的项目麻烦就会出现，眼下props是最佳，不过有时候因为其他一些…"}, {"id": "7002114350844477454", "title": "为什么 XMLHTTPRequest 不能跨域？", "desc": "跨域问题，大家在工作中肯定遇到过，也有对应的解决跨域的方案，但是今天我们并不是讲跨域的解决方案，而是围绕“为什么 XMLHTTPRequest 不能跨域？” 这个问题，进行思考和实践。下面就开始吧。"}, {"id": "6999177453134577678", "title": "盘点React 代码优化的 N 种方法", "desc": "本文盘点了几个在 React 优化方面的地方：使用 React 本身提供的优化方法；React 里几种会影响性能的用法；关于不可变数据等。"}, {"id": "6977274738091491359", "title": "这个vue3的应用框架你学习了吗？", "desc": "前言：前段时间开始落地基于vue3开发的应用，于是在社区留意vue3周边的一些开源项目。无意间看到微众银行`WeBankFinTech`团队开源的` Fes.js`解决方案。快速上手、简单易用、拓展性"}, {"id": "6844903982867939342", "title": "umi-request 网络请求之路", "desc": "请求库各式各样，没有统一。 每次新起应用都需要重复实现一套请求层逻辑，切换应用时需要重新学习请求库 API。 各应用接口设计不一致、混乱。 前后端同学每次需重新设计接口格式，前端同学在切换应用时需重新了解接口格式才能做业务开发。 接口文档维护各式各样。 有的在语雀（云端知识库）…"}, {"id": "6844903778479505416", "title": "一道被前端忽略的基础题，不信看你会几题", "desc": "早上上班前，一如既往的翻看一下前端公众号，看下各位大佬的文章。翻 了十来分钟，咦，，一个题目还是比较经典的，为啥之前没见过。一看是2016年的文章，那是我还没入门呢..... 认真看了起来，，嗯嗯，，，这题目可以，比较考察综合能力，记录一下。 此题涉及的知识点众多，包括变量定义…"}, {"id": "6901454172411920392", "title": "极大提高国人开发效率超实用的 VS Code 插件", "desc": "相信好多英语不好的同学在打代码的时候，经常会遇到不懂的单词，也相信好多时候同学写项目时候忘记框架的接口，需要网上翻阅文档，线上提问求助，参考其他项目的示例，那么如果你都过遇到这类问题，那么相信这款 VS Code 插件能极大的帮助到你，它能让您在代码中进行线上/线下搜索，或者翻…"}, {"id": "6844903912592375821", "title": "Promise 中的三兄弟 .all(), .race(), .allSettled()", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 从ES6 开始，我们大都使用的是 Promise.all()和Promise.race()，Promise.allSettled() 提案已经到第4阶段，因此将会成为ECMAScript 2020的一部分。 P…"}, {"id": "6901220585469116423", "title": "如何快速将你的应用封装成js-sdk?", "desc": "本文将介绍前端如何封装一款 js-sdk 以及如何快速将你的应用变成 js-sdk , 我们将总结一些封装 js-sdk 的原则和案例, 来帮大家更快的上手 sdk 开发. 其中笔者还会以H5-Dooring 为例子, 介绍如何将 H5 页面编辑器封装成一个 js-sdk 供他…"}, {"id": "6844904039683981319", "title": "JS模拟数组操作（新增、删除、插入、排序、反转）", "desc": "由于 js 没有 C 语言的指针，所以我们这里模拟数组只是模拟数组操作的思路。 先创建一个ArrayList类。 从平时的使用中我们可知，数组的push方法是向数组最后一位添加元素，数组长度会变为this.length + 1,数组最后一位的数组下标为 this.length。…"}, {"id": "6946054106066714632", "title": "前端妹子应该掌握的 javascript 基础", "desc": "这段时间复习了 js 的基础，梳理了一下自己的整个知识掌握情况。 实现并非最优解，欢迎姐妹们讨论和指正，大家一起进步呀。 基本类型存于栈内存，引用类型存于堆内存，从存取频率上可理解。 typeof 方法可以判断基本类型和函数；instanceof 方法可以判断引用类型；Obje…"}, {"id": "6911214978859008008", "title": "基于JavaScript实现的前端格斗小游戏", "desc": "拖延症晚期的我原本计划趁着周末写个年终总结，但是一直没有什么思路，想来想去也没想到要写啥就胡乱写了这么一个小东西。 一直比较痴迷游戏行业，可能我不太适合做前端，应该去学C++.... 首先当然是选择一张背景图，作为整个场景中的地图，而且要大要高清。布局到页面中。 然后通过可视区…"}, {"id": "6974585898763550727", "title": "骚气的JavaScript单行代码", "desc": "这是我参与更文挑战的第17天，活动详情查看： 更文挑战 什么是单行代码？ 单行代码是一种代码实践，其中我们仅用一行代码执行某些功能。 三元运算符 大写字符串 短路评估速记（很常用） 在将变量值分配给另"}, {"id": "6844904153911689230", "title": "一位前端小姐姐的进阶笔记(一)", "desc": "小姐姐依然在看机会哟。base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。 首先，这三个方法是用来改变 this 指向的，接下来我们看一下它们的异同。 1. apply 调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arg…"}, {"id": "6862602227383533575", "title": "Howler.js Web音频播放终极解决方案", "desc": "相信有很多人在写移动端音频播放的时候都踩过不少坑，特别是复杂音频项目在兼容多种设备的时候更是让你抓狂，比如ios端不能一开始就播放音频，必须要用户进行了操作。。。。 Howler.js默认使用Web Audio，但在IE上可以自动转为HTML 5 Audio。这点很是贴心。 移…"}, {"id": "6999922082289025032", "title": "前端的内存处理", "desc": "了解js中的内存管理吗? 什么情况会导致内存泄露？ 1. 内存的生命周期 内存分配：当我们申明变量、函数、对象的时候，系统会自动为他们分配内存 内存使用：即读写内存，也就是使用变量、函数等 内存回收："}, {"id": "6985349103681011725", "title": "包装对象 Boolean，Number，String", "desc": "包装对象 所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。 上面代码中，基于原始类"}, {"id": "6998529245018324999", "title": "使用gridsome开发静态网站", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 Gridsome 官方地址： https://gridsome.org/docs/ 什么是静态网站生成器 静态网站生成器是使用一系列配置、"}, {"id": "6897911460656070669", "title": "天天造轮子第八天 - Promise  - 网友来稿", "desc": "应该是一个漂亮的程序媛小姐姐。 大家👏👏👏👏👏👏👏 的消息；从本意上讲，它是承诺，承诺它过一段时间会你一个结果。promise有三种状态:pending (等待态)，fulfilled(成功态), rejected(失败态)；状态一旦改变，就一会再变。创建prom…"}, {"id": "6991834017825832974", "title": "可以编辑的 DIV", "desc": "背景介绍 模拟实现 Textarea 的功能，当用户输入 @ 的时候弹出选择框选择人员，同时，将 @人员 变成蓝色插入到编辑框中。这样的需求想到的解决方案就是利用 DIV 的 contentedita"}, {"id": "7005774433533034503", "title": "JavaScript系列 - 原型链", "desc": "本文主要讲述了 JavaScript 原型链的相关知识。通过图文的形式，看懂类、构造函数和示例对象的关系。还介绍了原型链的查找、如何获取和设置一个属性等等细节。最后，展示了通过原型链实现的继承方式。 "}, {"id": "6844903873988001800", "title": "ES10 目前可以使用的5个新特性", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 ECMAScript 2015，也称为ES6，是一个花了6年时间完成的主要版本。从那时起，负责ECMAScript标准开发的技术委员会39 (TC39)每年都会发布该标准的新版本。这个年度发布周期简化了这个过程…"}, {"id": "6945437876737802277", "title": "JavaScript ES2021 最值得期待的 5 个新特性解析", "desc": "在写本文时，本文提到的新的 JavaScript 提案功能已进入第 4 阶段，并且几乎肯定会包含在 ES2021 中。你已经可以开始在 最新版本的浏览器，Node.js 和 Babel 中使用。 注意：ECMAScript 是 JavaScript 所基于的标准，由 TC39 …"}, {"id": "6961224390268682276", "title": "你知道这样的mock吗", "desc": "Mockjs mock数据用过的人一定不陌生，他的好处也是层出不穷，比如下面就是一段对mockjs很好的描述： 前后端分离 不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据。 数据类"}, {"id": "6927217000112455687", "title": "『面试的底气』—— 0.1+0.2等于0.3吗｜牛气冲天新年征文", "desc": "去互联网金融或电商行业的公司面试时，一般都会遇到类似“$0.1+0.2$等于$0.3$吗？”这道题，对于非科班出身的前端人是一道送命题，有些知道$0.1+0.2$不等于$0.3$，但是继续深问为什么，就无法很清晰地回答。 本专栏总结一下回答 $0.1+0.2$不等于$0.3$ …"}, {"id": "6897100630494543886", "title": "6个规则去净化你的代码", "desc": "为一个事件命名是很困难的。虽然困难但是非常有必要。 想象以下，将两个数组合并成一个数组，并生成一个唯一值的数组。那么你会怎么命名它呢？我们也许会这样命名？ 上面的命名并不糟糕，但是还不是很友好。你可以将一个功能函数拆分为两个功能函数，这样命名更友好和函数复用性更好。 将乱七八糟…"}, {"id": "6997981330868797471", "title": "JS基础篇：13、一文搞懂原型、原型链(搞不懂算我输)", "desc": "引言 初识原型 显式原型和隐式原型 prototype可称为显式原型： 划重点：prototype是Function独有的属性 注意是独有！！！ __proto__可称为隐式原型： 划重点：__pro"}, {"id": "7002591155082756109", "title": "js对象高级和线程机制（四）", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 对象的创建模式 Object构造函数模式 套路: 先创建空Object对象, 再动态添加属性/方法 适用场景: 起始时不确定对象内部数据 问"}, {"id": "7001502995284410398", "title": "学习CO原理", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 CO是什么 可能很多小伙伴都还不知道co是什么。 co是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 G"}, {"id": "6989432210918998023", "title": "获取元素宽高和位置的方法", "desc": "HTMLElement 1. clientHeight / clientWidth 1.只读属性 2.对于没有定义 CSS 或者内联布局盒子的元素为 0 3.否则，它是元素内部的高度(单位像素)，包含"}, {"id": "6930503156598226951", "title": "AJAX、Axios和Fetch的那些恩怨情仇", "desc": "前端这几年的高速发展，让人大叫真的学不动了。前后端交互方式也大大的升级了，现在经常用的三种交互方式，ajax、axios 和 fetch，他们之间的不同也常常是面试的重点，接下来我们就聊聊他们。 Ajax 即“Asynchronous Javascript And XML”（异…"}, {"id": "6998333160735899655", "title": "一行命令把任意网站变成桌面软件", "desc": "一行命令把任意网站变成桌面软件 以前，开发一个桌面软件要花费大量的人力和时间。现在随着Electron的出现，大大简化了开发门槛。今天，给大家介绍一个工具，让你5分钟之内就把一个网站变成一个可安装的桌"}, {"id": "6998897064444690439", "title": "块级上下文与变量提升的碰撞", "desc": "通过题目然后理解知识，掌握知识，学会知识，印象更加深刻，一起打好基础知识，扎实基础，我们一起加油奥～"}, {"id": "6844903687006257159", "title": "百度阿里网易大疆等大小厂前端校招面筋 | 掘金技术征文", "desc": "自我介绍下：某985硕士，程序媛，接触前端一年时间。从八月份开始校招面试笔试，前前后后大厂小厂也都面了挺多，不过大厂基本都被我挂完了，哭晕我，还是太菜啊。面过的公司：ThoughtWorks，大疆，阿里，网易，百度，电信it研发中心，深信服，华为，小米，搜狗，腾讯。拿了offe…"}, {"id": "6844904116183891982", "title": "【适合收藏】让你减少加班的15条高效JS技巧！", "desc": "鱼头辛苦总结的15条非常高效的JS技巧，掌握这15个JS技巧，让你减少加班次数，多抽出点时间来陪女（男）朋友。 如果你喜欢探讨技术，或者对本文有任何的意见或建议，非常欢迎加鱼头微信好友一起探讨，当然，鱼头也非常希望能跟你一起聊生活，聊爱好，谈天说地。"}, {"id": "6976828400572842014", "title": "JavaScript 沙盒模式", "desc": "微前端已经成为前端领域比较火爆的话题，在技术方面，微前端有一个始终绕不过去的话题就是前端沙箱 ## 什么是沙箱 > Sandboxie(又叫沙箱、沙盘)即是一个虚拟系统程序，允许你在沙盘环境"}, {"id": "6986452564778680350", "title": "深入剖析 JavaScript 的深浅拷贝", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 前言 放之四海皆准的方法是不存在的，不同的深浅拷贝实现方法和实现粒度有各自的优劣以及各自适合"}, {"id": "6995171115358257166", "title": "javascript 的七种继承方式（六）寄生组合式继承", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 组合继承回顾 前面的文章已经提到过，组合继承是JavaScript中最常用的继承模式。但是他也有自己的不足。组合继承最大的问题就是不管在什"}, {"id": "6844904196060233736", "title": "JSON.stringify()还能这么玩", "desc": "在JavaScript中,JSON对象包含两个方法,parse()和stringify(),前者用于反序列化,后者用于序列化.所谓的序列化,通俗的理解就是将一个对象变成字符串,而反序列化就是相对应相反的过程. 今天我们主要来讲讲其中的stringify()方法.虽然我们平时也都…"}, {"id": "6999652116251803679", "title": "聊一聊前端格式化数据的一些心得", "desc": "最近一直弄后台管理系统，因为大都是一些表格项，所以经常会用到一些格式化formatter，这里聊一聊自己封装并且经常使用的一些格式化函数。包含一些自己的解决方案，例如千分化、精度缺失，以及对于函数式编"}, {"id": "6956027274919411726", "title": "npm 命令行工具开发指南", "desc": "我们在前端开发中会经常用到命令行工具，比如@babel/cli、vue-cli、create-react-app 等等。那么如何创建一个npm 命令行工具呢？其实很简单的，仅需要几步即可。 创建 1 "}, {"id": "7001443746172649508", "title": "【重温JS】巩固基础 - 继承的几种方式 & 闭包 & 单例模式", "desc": "☆☆☆ 今天学习的内容: ( 继承的几种方式 & 闭包 & 单例模式 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'd28"}, {"id": "6993248721777475614", "title": "【自种树自乘凉】JS 实现两个大数相加？", "desc": "理论： 当有两个整数 a 和 b ，在通常情况下我们有 “+” 运算符对其进行相加运算： 但是 JS 在存放整数的时候是有一个安全范围的，一旦数字超过这个范围便会损失精度。"}, {"id": "6994169170996756487", "title": "ECMAScript变量 - 原始值和引用值", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 原始值和引用值 在把一个值赋给变量时，JavaScript引擎必须确定这个值是原始值还是引用值。 原始值 Undefined，Null，Bo"}, {"id": "6997410599390937119", "title": "实现深浅拷贝的几种方式", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 四、实现深浅拷贝 前文已经介绍过实现深浅拷贝的各一个方式Object.assign({}, c)、JSON.parse(JSON.stri"}, {"id": "6998406144498597918", "title": "优雅的使用 async与 await 处理 promise 的 reject", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 异步 由于 javaScript 是单线程的，所以在程序中会有很多异步操作，比如我们在使用ajax获取数据的时候，比如回调函数。 假如现在"}, {"id": "6924568666608992264", "title": "「面试官」聊一聊执行上下文", "desc": "本博客需要感谢@冴羽,从他的博客github中收获甚多，以下是我的知识整理。谈一谈到底什么是执行上下文。 全部打印foo2了，原因在于第一个代码示例中，是变量提升，也就是foo提升了。而第二个代码示例属于函数提升，也就是第二个函数foo覆盖了第一个foo。这个题目也许很多面试题…"}, {"id": "6982774121172041736", "title": "FreeCodeCamp Javascript基础算法总结", "desc": "算法是描述如何处理某个问题的一系列步骤。 要写一个有效的算法，你需要先将一个特定的问题分解为小的部分，并仔细思考如何用代码解决每个部分。 在这个课程中，你将通过编写算法来实现诸如转换温度、处理复杂"}, {"id": "6844903613270065159", "title": "精读《用160行js代码实现一个React》", "desc": "现在网上有很多react原理解析这样的文章，但是往往这样的文章我看完过后却没有什么收获，因为行文思路太快，大部分就是写了几句话简单介绍下这段代码是用来干嘛的，然后就贴上源码让你自己看，有可能作者本人是真的看懂了，但是对于大部分阅读这篇文章的人来说，确是云里雾里。 讲解一个框架的…"}, {"id": "6979982868164395038", "title": "TS", "desc": "一：认识ts 为什么要学习ts TypeScript 是由微软开发的 2.一款开源的编程语言。 TypeScript 是Javascript的超级，遵循最新的ES6、 Es5规范。 TypeScrip"}, {"id": "6882301277032677384", "title": "「Node.js系列」深入浅出讲解V8引擎如何执行JavaScript代码", "desc": "本文将为大家介绍，V8引擎如何执行JavaScript代码。 题目中说到的V8引擎，大家自然会联想到Node.js。 我们先来吧这些概念搞清楚，再去看Node到底是什么？为什么大前端需要它。 任何可以使用JavaScript来实现的引用最终都会使用JavaScript实现。 在…"}, {"id": "6997348549746753567", "title": "基本类型和引用类型数据更新差异性的本质", "desc": "对于将一个变量赋值给另一个变量的情形，都是将一个变量的内容，拷贝一份赋值另一个变量，关注点在于：变量的内容是实际的数据，还是实际数据的地址。"}, {"id": "6991467672365957128", "title": "玩转AST", "desc": "为什么需要学习AST相关的知识呢？因为AST实在是太重要了，你可能对它不了解，但是它无处不在。更具体一点： 浏览器js引擎拿到js的第一件事就是解析js生成AST，随后才是解释执行，编译优化执行。"}, {"id": "6959518468802609159", "title": "清晰易懂！讲解JS赋值、浅拷贝和深拷贝", "desc": "清晰易懂！现在就来搞清楚JS赋值、浅拷贝和深拷贝的使用方式。 知识点包含：赋值、浅拷贝、深拷贝的区别；三者的使用场景；浅拷贝和深拷贝的实现。"}, {"id": "6987625484758548488", "title": "数据结构-使用JS实现链表-单链表", "desc": "链表 链表特点 用一组任意的内存空间去存储数据元素（这里的内存空间可以是连续的，也可以是不连续的） 每个节点(node)都由数据本身和一个指向后续节点的指针组成 整个链表的存取必须从头指针开始，头指针"}, {"id": "6844904152745639949", "title": "V8引擎详解（三）——从字节码看V8的演变", "desc": "本文是V8引擎详解系列的第三篇，重点内容是关于了解字节码的概念，以及字节码在V8引擎演变过程中的重要影响，同时帮您梳理v8引擎的架构帮助您更好的了解V8引擎架构，文末会有已经完成的系列文章的链接，本系列文章还在不断更新欢迎持续关注。 计算机只能识别二进制代码，而二进制代码（指令…"}, {"id": "6844903946121641991", "title": "记一次老项目中的跨页面通信问题和前端实现文件下载功能", "desc": "由于笔者之前维护了几个比较老的项目是用jquery全家桶开发的，其中有些需求是需要跨页面交互和父子页面通信，故借此总结一下。另一块是前端实现文件下载功能，虽然方法很多，为了不用重复造轮子，在此还是总结一波，毕竟多页面下的应用场景还是很多的。 由于本文介绍的主要还是基于javas…"}, {"id": "6844904118331392007", "title": "JS中的正则表达式&&全面梳理｜内附思维导图", "desc": "正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE） [] 中的：量词元字符 | . 不再具有特殊含义了； ......"}, {"id": "6979948714425090056", "title": "记一次异步加载的实现-发布订阅模式的实际运用", "desc": "1、问题起因 由于团队使用的Ajax请求库是自己在HTML5提供的fetch API的一层封装（后文简称sdk），其中包裹了许多业务参数，直接调用这个sdk可以省时省力避免因其他因素而产生不确定的bu"}, {"id": "6992162443715674120", "title": "javascript版数据结构之集合与字典（附：leetCode 1）", "desc": "1、集合   一种无序且唯一的数据结构 实际上, 我们可以把集合想象成一个既没有重复元素，也没有顺序概念的数组 js中可以用ES6的Set语法,来表示集合. 集合常用的操作: 去重、求交集、判断某元素"}, {"id": "6844904048701751303", "title": "JavaScript的强语言之路—另类的JSON序列化与反序列化", "desc": "JSON（JavaScript Object Notation）是一种轻量级，完全独立于语言的数据交换格式。目前被广泛应用在前后端的数据交互中。在JavaScript中的应用随处可见，灵活性、扩展性、可读性也是最强的！对应的JSON.parse与JSON.stringify就可…"}, {"id": "6904876615835385864", "title": "uniapp开发项目总结", "desc": " 公司项目一直使用vue开发，最近公司项目需要改用uniapp就行开发，而uni-app使用的是vue的语法，不是小程序自定义的语法。并且uni-app能实现了一套代码，同时运行到多个平台，通过vue"}, {"id": "6992737182725177357", "title": "js数据类型解惑", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 赋值 基本类型变量赋值 引用类型变量赋值 前言 在es6出现以前，js有六大数据类型，由五大基本类型+一个引用类型所组成。"}, {"id": "6908591962958348296", "title": "Plop 微型脚手架工具", "desc": "从广义上来讲，前端工程化其实就是遵循一定的标准和规范，通过工具去提高生产效率，降低开发成本的一种方式。 工程化在近些年被广泛的关注和探讨，其主要原因主要是因为现代化前端应用功能要求在不断提高，业务逻辑变得日益复杂。 前端技术作为当下互联网时代唯一不可或缺的技术，前端可以说是占据…"}, {"id": "6909074645593374733", "title": "Node 工具开发", "desc": "ECMAScript他也是一门脚本语言，一般缩写为ES，通常我们会把他看作为JavaScript的标准规范。 但实际上JavaScript是ECMAScript的扩展语言，因为ECMAScript只是提供了最基本的语法，通俗点来说只是约定了代码的如何编写，例如我们该怎么样定义变…"}, {"id": "6844903672581734413", "title": "9月，水了几个大中厂前端面试的一些总结分享 | 掘金技术征文", "desc": "8月底离职，其实是裸辞，当然大概是在原东家我所在的产品项目组的人集体跑路了，所以我也离开了自己所在一年半的东家，毕竟留下来的都是要填大坑的。于是大概花了两天的时间简单梳理了一下前端知识和回顾了一下，自己做的产品和遇到的一些问题。然后一个星期面试了大概10家企业的样子，每天上午一…"}, {"id": "6844903633109139464", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （上）", "desc": "不得不承认 Vue 的css解决方式非常自然简洁，相比之下 css 一直是 React 的痛。 从旧宠 css modules 到 JSS 的各种衍生，到新宠 styled-components。几十种的解决方式，上百篇的教程和比较，已经说明了一切。大家一直在寻找最好的最适合自…"}, {"id": "6974404535452172302", "title": "原生JS实现跳转或刷新页面时，浏览器提示当前页面未保存", "desc": "今天是我坚持日更的第十六天，在这十六天里，也许写的博客比较简单基础，但是每一篇文章都是当天一字一句敲出来的，题材也是当天想的，没有存稿，也没有文思泉涌，更多的是逼着自己做这件事情罢了......"}, {"id": "6999935969394688014", "title": "node-watch源码解析，学习封装思路", "desc": "node-watch是对上面的fs.watch的封装和增强。它解决了以下问题： 编辑器会生成临时的文件，导致回调函数会被触发两次 在观察单个文件保存时，回调函数只会触发一次 解决Linux和旧版本no"}, {"id": "6998890823815430151", "title": "学习笔记之复盘——“封装和继承”", "desc": "一、封装 将客观的事物封装成抽象的嘞，隐藏属性和方法实现的细节，仅对外公开接口，这就是封装 es5 中没有class的概念，但是我们可能通过很多方法实现 class 的功能 1. class 功能实现"}, {"id": "6844903865926549511", "title": "浅谈React性能优化的方向", "desc": "本文来源于公司内部的一次闪电分享，稍作润色分享出来。主要讨论 React 性能优化的主要方向和一些小技巧。如果你觉得可以，请多点赞，鼓励我写出更精彩的文章🙏。 减少计算的量。 -> 对应到 React 中就是减少渲染的节点 或者 降低组件渲染的复杂度 利用缓存。-> 对应到 …"}, {"id": "6969572790127034375", "title": "网页随处点击出现小火花简约特效 html+css+js", "desc": "这是我参与更文挑战的第3天 先看效果，效果是比较简约的： 原理： 效果就是在网页的任何地方鼠标点击后都出现一个小火花~原理并不复杂，就是鼠标点击后生成一个盒子，盒子里放字体图标或文字，然后操控它们的属"}, {"id": "7001825709966819365", "title": "Js回顾（七）js原生的DOM，BOM操作总结", "desc": "Js回顾（七） js原生的DOM，BOM操作总结 DOM 获取 getElementById（） getElementsByTagName（） getElementsByClassName（） que"}, {"id": "6994747051154079781", "title": "湖中剑 前端周刊 #3 | 2021-08-09", "desc": "周刊收集包括前端（但不限于前端）的文章、新闻、开源项目、工具等等，每周一更新。 📰 News Deno 内部代码将停用 TypeScript，并公布五项具体理由 https://www.infoq.c"}, {"id": "6844903907601154056", "title": "七夕了，用代码给心爱的人写一首曲子吧", "desc": "1. AudioContext如何发出声音 2. 简谱怎么来 现在我们知道怎么发出声音了，接下来是如何发出想要的声音，即是如何知道哆来咪发唆这些音所对应的频率是多少。 我们要做的就是把oscillator.frequency.value = 400;这里的数字改成频率即可发出对…"}, {"id": "6995379596040339492", "title": "进阶教程 3. JS 的堆栈内存管理/let&const", "desc": "一、javascript中的堆栈内存及释放 1. js中的堆内存的创建和释放; 2. js 栈内存的创建、释放以及不释放； 3. let、const 及 暂时性死区；"}, {"id": "6995103148725501965", "title": "ES6+新增常用内容总结（五）", "desc": "本文主要是在日常开发中一些比较常用的ES6+新增的特性， 如有错误,欢迎指出,将在第一时间修改,欢迎提出修改意见和建议"}, {"id": "6997430580396687373", "title": "【重温JS】JavaScript 巩固基础day18-ES6", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 ☆☆☆ 今天的内容: 开始学习**( ES6 )** !! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! 加油! 认真对待!!"}, {"id": "6844903887686598663", "title": "最新：Lodash 严重安全漏洞背后你不得不知道的 JavaScript 知识", "desc": "可能有信息敏感的同学已经了解到：Lodash 库爆出严重安全漏洞，波及 400万+ 项目。这个漏洞使得 lodash “连夜”发版以解决潜在问题，并强烈建议开发者升级版本。 这篇短文将从原理层面分析这一事件，相信“小白”读者会有所收获。 如此一来，就触发了原型污染。原型污染是指…"}, {"id": "6933929244066054157", "title": "可视化搭建平台的参考网格线设计", "desc": "最近一工作一直很忙, H5-Dooring也在持续更新迭代中, 接下来笔者将带大家介绍一下H5-Dooring的新功能, 并介绍网格参考线的实现方案, 内容很短, 实现方案也很简单, 欢迎大家提出更好的方案和实现思路. 之所以设计网格参考线, 是为了让H5制作者更精准的控制组件…"}, {"id": "7001815618903244830", "title": " Js回顾（六）关于js里对象，数组等类型等的常用方法整理", "desc": "Js回顾（六） 关于js里对象，数组等类型等的常用方法整理 对象Object 对象在javascript可以说占了半壁江山，有种说法叫：“一切皆对象”，虽然不准确，但是也明确的表达了对象在Js中的重要"}, {"id": "6918911964009725959", "title": "用 xterm.js 实现一个简易的 web-terminal ！", "desc": "知道需要做 web-terminal ，第一件事先网上调研一下具体需要的技术，最后发现 xterm.js 为大多数 web-terminal 的解决方案，大名鼎鼎的 vscode 也在用，看来可靠性还是有所保证的。 因为我们项目的基于 React 的，所以我准备用 create…"}, {"id": "6844903826747555847", "title": "「真香警告」重学 TCP/IP 协议 与三次握手", "desc": "最近刚看完电影「无敌破坏王2:大闹互联网」，觉得里面有些动画蛮有意思的，于是想起前不久看的《图解HTTP》和TCP/IP相关的文章。嗯，是时候展示真正的技术了。 如果你还对各类协议归属、作用也都傻傻分不清，那么你有必要详尽了解下TCP/IP。 1. TCP/IP协议族 TCP/…"}, {"id": "6885988193402159118", "title": "H5如何与原生App(ios,安卓,RN)通信？", "desc": "UIWebView是一个可加载网页的对象，它有浏览记录功能，且对加载的网页内容是可编程的。说白了UIWebView有类似浏览器的功能，我们使用可以它来打开页面，并做一些定制化的功能，如可以让js调某个方法可以取到手机的GPS信息。 但需要注意的是，Safari浏览器使用的浏览器…"}, {"id": "6983610183779876901", "title": "javascript数组常用方法总结", "desc": "数据常用方法总结 forEach遍历数组 filter过滤数组 map迭代原数组 join数组单元素拼接成字符串 concat 合并两个数组 生成一个新数组 sort 数组排序 splice 删除或替"}, {"id": "6844904101218631694", "title": "用 ES6 Proxy 能做哪些有意思的事情？", "desc": "在武侠小说中，经常看到这样的桥段。某位武林人士前来拜访德高望重的帮派掌门，往往需要经过手下弟子的通报。如果掌门外出或者不想见来人，就会让弟子婉拒。 今天要讲的 Proxy 和这个有异曲同工之妙。顾名思义，Proxy 的意思是代理，作用是为其他对象提供一种代理以控制对这个对象的访…"}, {"id": "6971439997622681636", "title": "【typescript 类型检查原理】类型守卫是如何实现的（上）", "desc": "这是【类型检查的实现原理】系列文章的第三篇，前两篇分别讲了基础类型、泛型、高级类型还有 override 的实现原理： 基于 babel 手写 ts type checker 【typescript "}, {"id": "6991806638248165407", "title": "使用antd pro和 umi3 实现全栈中后台管理系统｜ 8月更文挑战", "desc": "使用umi3和antd pro5从零实现全栈中后台管理系统。如果你需要支持 IE 8 或更低版本的浏览器，请不要选择umi开发"}, {"id": "6844903988714799112", "title": "五分钟带你领略: 腾讯半年来出现最频繁的算法之一——字符串解码", "desc": "大家好，我是神三元。今天给大家分享一道有意思的算法题，在leetcode平台上截图如下: 近半年来广受各大公司的青睐，出现非常频繁，在腾讯仅仅半年就出现了17次，如果说给满分给5颗星的话，那么这一题算得上实打实的五星题。 刚开始拿到这道题，看到括号匹配问题，直觉上就想到了利用栈…"}, {"id": "6993992513329561636", "title": "JavaScript数组API汇总", "desc": "数组中的API（方法） 在学习JavaScript的道路上，数组是一个非常重要的部分，数组中的API很多，也容易混淆，每次对数组操作的时候都要去查文档，学习的路上也不能一直前进，有时候要停下来做一下总"}, {"id": "6844903624699543559", "title": "没朋友(mpvue)，点个外卖，一个人也要好好吃饭", "desc": "每次写文章时，总会感慨万千。面对成功，我们总是抱以较高的期望，总想急不可耐就能得到胜利的果实。可每一次成功不可能轻而易举的就来到我们的面前。几乎每一次都需要我们付出极大的耐心和勤奋，甚至于近乎偏执狂般的傻傻坚持。自打小程序推出以来，我便开始转入这个市场。并不是因为他的热度而是一…"}, {"id": "6844904202490085390", "title": "只说干的不讲湿的——校招季我为什么能进阿里", "desc": "1. 为什么要写这篇文章 又是一年秋招季～笔者曾校招面试入职腾讯，现任阿里前端技术专家，参与了CBU前端近两年的校招一面面试工作。 在整个校招面试中，我发现很多有潜力的同学其实并不了解校招的一些窍门，进而导致努力的方向有所偏差。而论坛/github上的文章，基础知识的总结是一抓…"}, {"id": "6969460124427485215", "title": "155个JavaScript基础问题（31-40）", "desc": "31. 当点击按钮时,event.target是什么？ 32. 单击该段落时，输出是什么？ 33. 输出是什么？ 34. 输出是什么？ 35. 下面哪些值是假值? 36. 输出是什么？ 37. 输出是"}, {"id": "6844903797039300615", "title": "🍭 图解原型和原型链", "desc": "原型指的就是一个对象，实例“继承”那个对象的属性。在原型上定义的属性，通过“继承”，实例也拥有了这个属性。“继承”这个行为是在 new 操作符内部实现的。 实例与原型则是通过上文中提到的 __proto__ 去访问到。 当访问 p 中的一个非自有属性的时候，就会通过 __pro…"}, {"id": "6993604088734679076", "title": "EcmaScript知识点总结", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 EcmaScript es是javascript的标准化规范 es只提供了最基本的语法 只停留在语言层面，不能直接用来实现业务中的功能开发 "}, {"id": "6844904159469109255", "title": "面试官在“逗”你系列：数组去重你会几种呀？", "desc": "数组去重是一个老生常谈的话题，也是前端童鞋在面试时的一道高频题。本文将深入的探索数组去重的原理及实现，为各位小伙伴提供多种可以反手“调戏”面试官的解决方案。 若tmp中不存在该元素，则放入；否则跳过不处理。 带着面试官的疑问，我们来看另外一种经典去重方式。 然而，什么都做不了，…"}, {"id": "6994010112222298120", "title": "异步编程到底是啥？从栈、堆、事件循环.....开始", "desc": "- 同步模式和异步模式的差异 - 事件循环与消息队列 - 异步编程的几种方式 - Promise异步方案、宏任务/微任务队列 - Generator异步方案、Async/Await语法糖"}, {"id": "6844904023519150094", "title": "前端-基础知识体系（初级-上）", "desc": "常常有人问我，如何成为一名初、中、高级前端。并且发现我身边的大多数人知识面并不是很成体系，总会有各种知识漏洞。如果你还不清楚如何才算初级工程师，自己的知识体系有没有漏洞，可以参考这篇我整理的知识点及相应教程。 如果你的知识体系存在漏洞，那么所学的知识就很难融会贯通。初中高级是有…"}, {"id": "6844903773979033614", "title": "手写call、apply、bind实现及详解", "desc": "call 接收多个参数，第一个为函数上下文也就是this，后边参数为函数本身的参数。 apply接收两个参数，第一个参数为函数上下文this，第二个参数为函数参数只不过是通过一个数组的形式传入的。 bind 接收多个参数，第一个是bind返回值返回值是一个函数上下文的this，…"}, {"id": "6956834149160189965", "title": "三分钟了解—let声明不会变量提升与暂时性死区的原因", "desc": "这篇文章大概会用三分钟的时间向同学们阐述let声明不会进行变量提升与其具有暂时性死区的原因(将通过词法环境对象来讲述，这一点上篇文章有提到过) Q:是什么导致了\"let\"不能与它的兄弟\"var\"一样，"}, {"id": "6965511850679074830", "title": "手写日历组件", "desc": "效果预览 各种各样的产品层出不穷，公司层面严抓产品风格，寻求在设计上脱颖而出，这就加大了对前端的开发难度，定制化的场景越来越多通用型的组件库已经不能够满足我们的需求了，摸鱼的时候立马对这方面的能力进行"}, {"id": "6963969900742180901", "title": "节流和防抖概念以及应用", "desc": "防抖节流的相同与不同 防抖 定义： 触发事件后，函数在n秒内只执行一次，如果事件再次触发,则会重新计算函数执行时间 实际应用： (1) input输入框频繁输入，进行模糊查找。在最后一次键盘抬起后的一"}, {"id": "6896628196167385096", "title": "提升开发效率之VScode使用技巧", "desc": "一些敬仰以及技巧总结，希望能帮到还不知道的你。 这篇主要讲解如何使用搜索，如何写自己的代码片段以及emmet语法的使用。 在VSCode里一共有两个搜索，一个是在某个具体的文件下局部搜索，另外一个是整个文件夹下的全局搜索。并且这两个搜索默认是不区分大小写的。 解释一下上面七个i…"}, {"id": "6861553339994374157", "title": "前端跨域解决方案归纳整理", "desc": "前端跨域的各种文章其实已经很多了，但大部分还是不太符合我胃口的介绍跨域。看来看去，如果要让自己理解印象深刻，果然还是得自己敲一敲，并总结归纳整理一篇博客出来，以此记录。 跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。 C…"}, {"id": "7007260822736994340", "title": "Typescript工程化", "desc": "Typescript工程化，学习总结：模块系统、tsc编译、babel编译、webpack工程、tsconfig配置项。"}, {"id": "7006592666846625823", "title": "马上中秋啦！把鼠标指针变为小玉兔", "desc": "马上中秋节啦，做一个鼠标指针样式变更的小demo（换成一只小白兔）和大家分享一下，顺便提前祝大家🎑中秋节快乐。"}, {"id": "6995334008603148295", "title": "百万PV商城实践系列 - 前端长列表渲染优化实战", "desc": "在项目中，我们或多或少都会经历一些长列表渲染的难题，本篇文章就为大家详细的解析这类场景的解决方案。内容相对易上手，并不涉及复杂的逻辑，效果立竿见影。还等什么呢，\b快来看看吧。"}, {"id": "7007302041257115679", "title": "漫谈浏览器渲染", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 多进程/多线程模型 主要进程类型 浏览器进程：浏览器主进程，仅有一个，用于进程、资源调度和控"}, {"id": "6998300409173377032", "title": "【利器篇】35+精选chrome插件，含15+前端插件，总有一款值得你停留", "desc": "Chrome作为前端开发的重要工具，其插件能大幅提升战斗力，精心收集35+插件，含15+前端插件，大幅提高战斗力。"}, {"id": "7006130840266604574", "title": "15个值得收藏的JavaScript函数", "desc": "本文将给大家带来15个常用的工具函数，你可以使用它们以更加优雅的方式解决问题，并节省大量的开发时间。"}, {"id": "7007224479218663455", "title": "浅谈 JavaScript 变量提升", "desc": "在 ECMAScript6 中，新增了 let 和 const 关键字用来声明变量。在前端面试中也常被问到 let、const和 var 的区别，这就涉及到了变量提升、暂时性死区等知识点。"}, {"id": "7007219984145317902", "title": "精读《class static block》", "desc": "class-static-block 提案于 2021.9.1 进入 stage4，是一个基于 Class 增强的提案。 本周我们结合 ES2022 feature: class static ini"}, {"id": "7007432493569671182", "title": "前端瓦片地图加载之塞尔达传说旷野之息", "desc": "背景：本文内容主要介绍通过使用瓦片地图加载原理，实现 `塞尔达旷野之息` 地图加载并添加交互锚点。使用瓦片地图，可以做到地图的整体和局部都能高清展示，并且能够做到按需加载，需要注意的是，分层较多的地图"}, {"id": "7007244969886875656", "title": "成为大牛的阶梯——JS设计模式", "desc": "普通coder 写代码目的就是能跑功能能实现就行，而 大牛coder 写的代码会考虑性能、扩展、维护、兼容，设计模式，设计模式则是普通coder成为大牛coder的阶梯。"}, {"id": "7006509674715447309", "title": "❤️如何使用HTML、CSS 创建完全响应式的中秋礼品卡❤️", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 大家好，今天我们将看到如何只使用 HTML 和 CSS 制作完全响应式的中秋礼品卡页面。 要查看演示或你想要编码教程。你可以观看下面的教程。"}, {"id": "6971225536882278413", "title": "Vue源码学习 | 4个实用的Javascript技巧", "desc": "学习一门语言的一种非常有效的方法就是阅读该编程语言开发的优秀开源项目的源代码。 Vuejs是最好的Javascript开源项目之一。"}, {"id": "7007800114848890917", "title": "【JavaScript算法刷题：最大子序列和】力扣53题", "desc": "本文主要解析力扣第53题的解法，本体较为基础，但思路很巧妙。 重点语句解析： addRes = Math.max(nums[i]+addRes,nums[i]) 这段代码主要是采用了如下的思路： 假设"}, {"id": "6989020415444123662", "title": "感谢 compose 函数，让我的代码屎山💩逐渐美丽了起来~", "desc": "曾经有一段优美的代码放在我面前，我没有珍惜。直到现在每天面对代码屎山手足无措时，才追悔莫及！尘世间最大的痛苦莫过于此，如果上天给我再来一次的机会，我一定对这段代码说三个字 —— 六，六，六！！！"}, {"id": "7005221466014744612", "title": "中秋！还记得西游记里的嫦娥吗？我用10000张图片拼成了儿时女神！", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 大家好，我是林三心，中秋即将来临，预祝大家中秋快乐！！！我在想，关于中秋，我能写点什么分享给大家呢？这一天，我在看《西游记》，突然想到了我"}, {"id": "6981673766178783262", "title": "写给中高级前端关于性能优化的9大策略和6大指标 | 网易四年实践", "desc": "所有的性能优化都围绕着两大层面两小层面实现，核心层面是网络层面和渲染层面，辅助层面是时间层面和体积层面，而辅助层面则充满在核心层面里，笔者通过本文整理出关于前端性能优化的九大策略和六大指标"}, {"id": "7006637218458501157", "title": "从 babel preset 和 eslint config 看配置的继承和重写", "desc": "继承和重写是面向对象编程语言中的概念，是指一个类扩展自父类，并且重新实现了其中一些属性、方法。这种思想不只是在编程语言中会用到，在配置文件中也有广泛的应用。 本文我们分别从 babel 和 eslin"}, {"id": "7007294002424709156", "title": "《Ohbug 前端周刊》 第 16 期 - NPM 即将被 Node.js 官方抛弃", "desc": "Corepack 会成为 Node.js 官方的内置 CLI，用来管理『包管理工具（npm、yarn、pnpm、cnpm）』，用户无需手动安装，即『包管理器的管理器』。"}, {"id": "7000154907156152327", "title": "前端9种图片格式基础知识, 你应该知道的", "desc": "GIF，JPG/JPEG，JPEG 2000，ICO，PNG，Animated PNG，webP，SVG，base64基础知识，一起来了解吧。"}, {"id": "6973865268426571784", "title": "三种前端实现VR全景看房的方案！说不定哪天就用得上！", "desc": "前言 事情是这样的，前几天我接到一个外包工头的新需求，某品牌要搭建一个在线VR展厅，用户可以在手机上通过陀螺仪或者拖动来360度全景参观展厅，这个VR展厅里会有一些信息点，点击之后可以呈现更多信息（视"}, {"id": "6995382439283523615", "title": "JavaScript的类型系统是一坨屎吗？", "desc": "原回答来自某乎，非转载。 我觉得更贴切的说是水，Brendan Eich这种级别的人难道不知道什么是强类型吗，不至于。只是为了更加灵活，从而释放程序猿的野性。就像李小龙当年的经典说辞： （一个好的武术"}, {"id": "6980575024788799525", "title": "彻底搞清楚什么是原型链", "desc": "对象 要弄清楚原型链，首先要弄清楚对象 普通对象 最普通的对象： 有__proto__属性(指向其原型链)，没有prototype属性。 原型对象(Person.prototype原型对象还有cons"}, {"id": "6844903778504671246", "title": "es6、7、8、9新语法新特性-总结", "desc": "let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。 const声明一个只读的常量。一旦声明，常量的值就不能改变。 ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 本质上…"}, {"id": "6844904146835865607", "title": "让人恍然大悟的词法作用域及作用域链讲解", "desc": "当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。 前面已经讲解了this，今天来讲讲作用域及作用域链。 作用域是指程序源代码中定义变量的区域。 作用域规定了如何查找变量，也就是确定当…"}, {"id": "6923068543978340360", "title": "js 分享倒计时计算方法", "desc": "项目中需要做一个倒计时的功能，可以根据选择的日期，算出距离今天的时间差。倒计时有多种模板，大致分为年月日、年月日时分秒以及单独的日。一开始也是在网上大致找了几种方法，但要么和项目要求不匹配，要么计算结果不准确，就自己写一个吧，本文记录分享一下。 年和月的差值计算是比较日期。举个…"}, {"id": "6877133657228869639", "title": "深挖前端 JavaScript 知识点 —— 史上最全面、最详细的 Cookie 总结", "desc": "1. Cookie 产生的背景 我们都知道，HTTP 协议是无状态的，服务器无法知道两个请求是否来自同一个浏览器，也不知道用户上一次做了什么，每次请求都是完全相互独立，这严重阻碍了交互式 Web 应用程序的实现。例子： 购物车：在典型的网上购物场景中，用户浏览了几个页面，买了一…"}, {"id": "6968967150421671973", "title": "详解链表在前端的应用，顺便再弄懂原型和原型链！", "desc": "链表在前端中的应用 链表 在前端中的应用常用于原型和原型链当中。在接下来的这篇文章中，将讲解关于 链表 在前端中的应用。 一、链表VS数组 数组：增删非首尾元素时往往需要移动元素； 链表：增删非首尾元"}, {"id": "6900750516817494023", "title": "易忽略的滚动加载或下拉刷新时导致的数据问题", "desc": "一个非常非常常见的需求，实现在移动端中的一个列表，实现滚动到底部加载更多，其中列表的每一项有删除操作。 是的，就是这么一个常见的问题，有什么好说的？一般场景下，特别是对数据要求不高的情况，其实确实没啥好说的，假设你对列表的数据展示要求十分高，准确性要高，特别是涉及财务相关的单据…"}, {"id": "7000017024659226660", "title": "JS模板字符串", "desc": "模板文本可以包含任意JavaScript表达式。通过计算任何包含的表达式，将这些表达式的值转换为字符串，并将这些计算的字符串与反撇号中的文本字符组合，计算出反撇号中字符串文本的最终值"}, {"id": "6844903683566600206", "title": "精读《12 个评估 JS 库你需要关心的事》", "desc": "特性。 稳定性。 性能。 包生态。 社区。 学习曲线。 文档。 工具。 发展历史。 团队。 兼容性。 趋势。 下面总结一下作者的观点。 当你调研一个 JS 库，功能当然是最重要的，就好比 React 的用于开发 UI 界面非常方便，这是流行起来的一部分因素。 但同时 React…"}, {"id": "6858551640220729351", "title": "经典面试题！从输入URL到页面展示你还不赶紧学起来？", "desc": "“在浏览器里，从输入 URL 到页面展示，这中间发生了什么？ ”这是一道经典的面试题，尤其小编之前在一次面试的时候就碰到了，当时面试官让小编尽可能多说些，小编一下蒙了，心想“这可咋讲不就是按个回车键然后请求数据渲染页面吗，有啥可讲的呀”,差点没闹出笑话，仔细思考这个问题，发现确…"}, {"id": "6995082439253032996", "title": "JavaScript之生成器Generator", "desc": "Generator 函数是 ECMAScript 6 新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力。"}, {"id": "6956749950965252110", "title": "位运算", "desc": "给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 位运算有什么奇技淫巧"}, {"id": "6979244918656991239", "title": "设计模式|JavaScript实现代理模式(下篇)", "desc": "代理模式是一种结构化设计模式，代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用，这就是代理模式的定义。"}, {"id": "6985880810234576904", "title": "一文带你详解js的类型转化", "desc": "本文分析了js类型的分类，对js类型的转化的多种场景进行了详细剖析，讲解了ToNumber、ToString、ToBoolean、ToPrimitive的机制和调用规律；分析了常见的隐式类型转化原理。"}, {"id": "6986163515698446366", "title": "【前后分离】 跨域", "desc": "完整代码请查看GitHub项目kuayu-1 同源策略--禁止跨域 源 一个url的源 = 协议+域名+端口号 在开发者工具、控制台里使用window.origin或location.origin可查"}, {"id": "6847009773867499534", "title": "DD每周前端七题详解-第七期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6844903686661996552", "title": "原生JS实现抛物线动画以及动态模糊效果", "desc": "某一天我收到了产品发来的微信消息。小X，我们的业务现在需要一个类似加入购物车的掉落动画，经过组织的慎重考虑，这个需求就交给你了。于是便有了这篇文章。本文并没有描述多少高深的技术，更多的是一些笔者在做动画时对动画原理的思考以及如何优化动画的一些思路。实现效果如下： 前端实现动画的…"}, {"id": "6844904131845423112", "title": "前端性能优化-缓存(部分)", "desc": "面试中我们经常会遇到 前端性能如何优化缓存方面的知识,对于我们而言,我们常常是束手无策。 下面来详细介绍缓存及如何利用这方面的知识. 看到一个形象的比喻，来比喻CDN。 10年前，还没有火车票代售点一说，12306.cn更是无从说起。那时候火车票还只能在火车站的售票大厅购买，而…"}, {"id": "6999090269031235598", "title": "JS实用篇复习笔记（2）", "desc": "1、推荐的编译器 Atom（跨平台，免费）。 Visual Studio Code（跨平台，免费）（常用）。 Sublime Text（跨平台，共享软件）（常用）。 webstorm(常用) Note"}, {"id": "6938439210453958692", "title": "原生JS图片拖动、缩放、边界等问题总结", "desc": "看见电商的查看商品图片细节的功能，想着自己能不能写出来，随后一发不可收拾~成功打发了一晚上的时间。咳咳言归正传，功能在脑子里转了一下感觉很简单，无非就是图片拖动、图片缩放，但其实写的过程中还是有很多坑的，下面来一一细说： 1. 图片拖动 首先，很简单的结构，唯一需要注意的是im…"}, {"id": "6995391355534966792", "title": "前端切图仔，常用的21个字符串方法（下）｜8月更文挑战 ", "desc": "这是我参与8月更文挑战的第10天，活动详情查看： 8月更文挑战 字符串方法 更多方法实例可以参见：JavaScript String 对象。 方法 描述 charAt() 返回指定索引位置的字符 ch"}, {"id": "6992879717418762247", "title": "事关我对于JS高级的更多理解", "desc": "写在前面: 这其实就相当于是之前那篇JavaScript高级的补充(修改)(增加),也有一些是前段时间面试碰到的面试题目,记录下来."}, {"id": "6992872453512888327", "title": "JavaScript——微任务&宏任务", "desc": "前言 最近在复习fetch的时候偶然遇见一道面试题，紧接着由这道题引出了一道关于微任务和宏任务执行顺序的面试题 分别执行这两段代码，看看有什么差别，为什么会有这样的差别？（第一段浏览器会“卡住”，第二"}, {"id": "6877648097367818248", "title": "完全 Serverless！—— 文档型动态站点强行变身超薄 SPA ！", "desc": "抱歉，用 Serverless 做这个标题主要是借势炒作。本文内容跟 Serverless 其实没半毛钱关系。 众所周知，Serverless 的概念并不像字面意义上那样的 “无服务”，而是将中心化的服务端应用打散成为一个个函数式的服务，节约了前端编码到产品上线中间服务部署的操…"}, {"id": "6871938617808257038", "title": "JavaScript中Object.freeze()与const之间的区别", "desc": "自发布以来，ES6为JavaScript带来了一些新功能和方法。这些功能可以更好地改善我们作为JavaScript开发人员的工作流程和生产力。这些新功能包括 Object.freeze() 方法和 const。 在少数开发者尤其是新手中，有人认为这两个功能的工作原理是一样的，但…"}, {"id": "6844904065319731208", "title": "ESLint+Prettier代码规范实践", "desc": "代码规范校验使用 ESLint，但是一开始 ESLint 只有检测告诉你哪里有问题，常常出现的情况就是一堆 warning，改起来很痛苦。后来 ESLint 提供了 $ ESLint filename --fix 的命令可以自动帮你修复一些不符合规范的代码。 Prettier …"}, {"id": "6933404665077825549", "title": "技术周报 · 2021-02-25", "desc": "欢迎关注「字节前端ByteFE」简历投递联系邮箱「tech@bytedance.com」"}, {"id": "6954281377080541221", "title": "JS中的二进制数据处理", "desc": "前言   在现有的计算机中，二进制常常以字节数组的形式存在于程序当中。例如在C#里面，就用byte[]，标准C里面没有byte类型，但可以通过typedef把byte定义为unsigned char的"}, {"id": "6844904086089760775", "title": "详解ES6中的class", "desc": "class是一个语法糖，其底层还是通过 构造函数 去创建的。所以它的绝大部分功能，ES5 都可以做到。新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。 constructor方法，这就是构造方法，this关键字代表实例对象。 类的数据类型就是函数，类…"}, {"id": "6983878999701192711", "title": "babel大揭秘", "desc": "js 转译器 es6 to es5 es7 to es5 简称 es typescript 代码转换 除了这些 我们还可以做一些 静态分析 eslint等"}, {"id": "6881945458471550983", "title": "前端接入单点登录（sso）开发流程大礼包，内含vue、react、hash&history两种路由模式、微前端等处理方式", "desc": "sso提供的token过期时间为24小时，ticket的失效时间是5分钟，都不是永久有效的。 如图可以看到，在登陆成功后的跳转中，参数是含有ticket的，举例中的one.heiwangbatiancaishaonian.com是history模式的，而在hash模式下url会…"}, {"id": "6988861870450933767", "title": "个人JS插件库重构开发记录", "desc": "Howdyjs是笔者开源的一个JS插件工具库，旧版封装了一些Vue的指令与常用组件。现在将部分Vue指令抽离出来使用原生JS实现，而Vue组件则使用Vue3重构。"}, {"id": "6844903545720815624", "title": "TypeScript VS JavaScript 深度对比", "desc": "TypeScript 和 JavaScript 是目前项目开发中较为流行的两种脚本语言，我们已经熟知 TypeScript 是 JavaScript 的一个超集，但是 TypeScript 与 JavaScript 之间又有什么样的区别呢？在选择开发语言时，又该如何抉择呢？"}, {"id": "6999175164034777102", "title": "Promise的链式调用、异常穿透、中断promise链", "desc": "关于Promise链式调用的一些注意点 1. promise.then()的参数 2. 链式调用 3. 异常穿透 4. 中断promise链"}, {"id": "6974274929668259871", "title": "4 个你从未听说过的强大 JavaScript 运算符", "desc": "你有没有花一个下午阅读Mozilla 文档？如果您有的话，您就会知道网上有很多关于 JavaScript 的信息。这使得很容易忽略更不寻常的 JavaScript 运算符。"}, {"id": "6844903991730503687", "title": "精读《Hooks 取数 - swr 源码》", "desc": "fetch 的兼容性已经足够好，足以替换包括 $.post 在内的各种取数封装。 原生用得久了，发现拓展性更好、支持 ssr 的同构取数方案也挺好，比如 isomorphic-fetch、axios。 对于数据驱动场景还是不够，数据流逐渐将取数封装起来，同时针对数据驱动状态变化…"}, {"id": "6844903636888207373", "title": "5分钟学会Vue动画效果", "desc": "v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。 v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函…"}, {"id": "6930512178689048583", "title": "three.js 实现炫光路径粒子动画效果｜牛气冲天新年征文", "desc": "大家好，这里是 CSS 魔法使——alphardex。 粒子动画，指的是许多微粒在某个空间内做出有序或无序的运动，并且颜色大小也能按照一定规律进行改变的动画。而本文要实现的，正是一种粒子按着路径发光移动的效果 答案是：对于每根线，遍历它们所有要动的点，增加它们的下标即可。（注意…"}, {"id": "6893501668147593223", "title": "关于js的四种类型检测方法及根据jquery写的工具方法", "desc": "1 . 基本内容 2 . 缺陷与不足 1 . typeof检测基本类型基本完美，但是引用类型可以说原地爆炸,例如 数组对象 ，正则对象 ，new出来的数字对象...... 全部返回的是 字符串形式的Object 2 . 如 3 . 1 . 基本内容 2 . 缺陷与不足 1 . …"}, {"id": "7007718009565347877", "title": "JS｜this", "desc": "追本溯源：this 首先看mdn中的解释：在绝大多数情况下，函数的调用方式决定了this的值，this不能在执行期间被赋值，并且在每次函数被调用时this的值也可能会不同。 重点：函数的调用方式决定了"}, {"id": "7007414820752326686", "title": "吃透JavaScript核心——流程控制", "desc": "流程控制 流程控制有三种结构： 顺序结构 分支结构 循环结构 顺序流程控制 分支流程控制if语句 if语句 单分支语句 双分支语句 多分支语句 三元表达式 分支流程控制switch语句 case后的v"}, {"id": "7005861849451364388", "title": "【评论-抽奖】Electron 拓展屏的初步设计和实现", "desc": "这次的活动是作者可以获得两枚掘金徽章，在评论区通过抽奖的方式将这两枚徽章送给积极参与互动的朋友，这也算是借花献佛了 (￣▽￣)~*。"}, {"id": "7006249855777505288", "title": "jQuery 源码分析 扩展插件", "desc": "简介   我们都知道jQuery的原型上有很多的方法, 那我们想给原型上继续添加方法的时候该怎么处理能，于是jQuery就额外提供了一个方法叫做extend方法来让大家公用，上节给大家讲了使用jQue"}, {"id": "7001459088781475847", "title": "工具库用久了，你还会原生操作 Cookie 吗？", "desc": "用得好了，工具库和框架确实是一大助力，但就怕我们会因此习惯了走捷径，而忘了自己的根本依靠是什么…………"}, {"id": "7007820079320530951", "title": "HTML+CSS+JS考试复习题（二）", "desc": "1.如何实现一个对象的深拷贝？ 2.用递归的方法实现1到100求和 3.什么是闭包？如何解决闭包打来的内存泄露问题？ 4.简述http协议的报文格式 5.列举最少5个animation的子属性，并说明"}, {"id": "6997381550912307214", "title": "还在死磕 Ajax？那可就 out 了！", "desc": "古语云“人无百日好，花无百日红”，又云“江山代有人才出，各领风骚数百年”，对于 AJAX，当然也不例外。"}, {"id": "6982755396976902158", "title": "我终于把你送进了大厂", "desc": "在线养女儿了，论如何把一个小小白培养到大厂高级前端水平。哈哈，还是老实交待。 这是一部前端小小白成长过程的心路历程。有技术干活，有故事情节。（长文，建议收藏后得空细品）"}, {"id": "6979391400844460068", "title": "CSS 奇思妙想 | 全兼容的毛玻璃效果", "desc": "通过本文，你能了解到 最基本的使用 CSS backdrop-filter 实现磨砂玻璃(毛玻璃)的效果 在至今不兼容 backdrop-filter 的 firefox 浏览器，如何利用一些技巧性的"}, {"id": "7005019405834780702", "title": "高级前端工程师如何避免写出屎一样的代码（一）？", "desc": "用ES新特性来优化你的javaScript代码 更优雅地使用console 💩 👍 使用对象解构 使用css样式 使用表格展示 显示代码执行耗时 显示调用的日志 解构 💩 👍 将参数解构 模板字符串 "}, {"id": "7007714885232492574", "title": "JavaScript复习速记-1", "desc": "原型链 每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型\"继承\"属性。 可以使用Object.getPrototype"}, {"id": "7006119499216715783", "title": "解决ios15系统的手机使用html2canvas截图页面空白崩溃", "desc": "最近ios15系统马上要推出了，公司的app开始测试ios15的兼容，然后就出现了有截图的页面卡顿白屏的问题。 业务场景是这样，我们的每个页面都会有多个截图，截图使用的方式是html2canvas这个"}, {"id": "7005429358953234462", "title": "【评论参与抽奖】树状数据怎样扁平化处理？", "desc": "本文参与了掘金周边礼物🎁活动，只要在评论区留下你的想法和你的思路,时间截止到12日中午12点 在本文评论区点赞数最高的两名用户可以获得掘金的新版徽章 如果本文评论综合热度在活动Top 1-5 将获得 "}, {"id": "6994587482851541005", "title": "【SSD系列】没了jquery, vue, react，你还会DOM节点的增删改查吗？", "desc": "什么是空白节点 ? querySelectorAll 有哪些坑? 怎么查询伪元素，四种删除节点方式你知道几种？我们一起了解DOM的增删改查。"}, {"id": "6968344281786351629", "title": "官方揭秘！你的颜色是这样算出来的……", "desc": "想知道刷屏朋友圈的颜色测试 H5 是如何开发出来的吗？想知道测试结果又是如何计算的吗？本次活动的核心开发人员将为大家揭秘颜色测试活动的技术细节。"}, {"id": "7005357172863270919", "title": "【评论有奖】你想知道的小程序底层知识，你确定不想了解下？", "desc": "四年小程序开发经验，带你进一步了解小程序奥秘，从小程序底层开始讲起，慢慢到小程序跑起来，主要是理论内容为主，代码层面比较少，希望这篇文章能带给您不一样的了解"}, {"id": "7005364146292129800", "title": "不必硬背，彻底理解JavaScript中的this指向！", "desc": "在执行上下文中，包含了变量环境、词法环境、外部环境、this： 实际上，this 是和执行上下文绑定的，也就是说每个执行上下文都有一个this"}, {"id": "7007369960859107341", "title": "菜鸟前端今日份leetCode算法学习QAQ", "desc": "18届某渣本软件工程专业毕业。稀里糊涂考土木研究生，稀里糊涂复试被踹。20年疫情家里蹲了大半年，经过大学室友引路自学小半年前端21年3月深圳入职工作经验从0到现在的5个月零26天，打算22年年后跳大槽"}, {"id": "7006178537119940644", "title": "用konvaJS实现进度看板", "desc": "用konvaJS实现进度看板 熟悉konvaJs的基本api使用方法 实践小实例，期待更多动画有关的api使用"}, {"id": "7003621809828397064", "title": "技术周报 · 2021-09-03", "desc": "小编推荐 一个 Web 开发者的自白 当设计模式遇上 Hooks 研发效能度量引发的血案 工具&框架 学习 Webpack5 之路（优化篇） 深入对比 eslint 插件和 babel 插件 拓展阅读"}, {"id": "6844904100304257031", "title": "编写可复用的组件，我们可以收获很多", "desc": "轮播图组件想必是使用最多的组件之一了，尤其是每个首页当中必定会出现它的身影。 很多轮播图效果都是自带自动播放的，所以我们当前也不会置之不理。我们通过给Swiper组件传递autoplay的prop来进行设置 默认自动播放的时候，图片都是向左移动到-100%的位置。如果考虑到用户…"}, {"id": "6844903734321872910", "title": "8张图让你一步步看清 async/await 和 promise 的执行顺序", "desc": "说实话，关于js的异步执行顺序，宏任务、微任务这些，或者async/await这些慨念已经有非常多的文章写了。 但是怎么说呢，简单来说，业务中很少用async，不太懂async呢。 研究了一天，感觉懂了，所手痒想写一篇 ，哈哈。 那么还是先通过一道题自我检测一下，是否有必要继续…"}, {"id": "6844903682933260295", "title": "十五分钟--分页逻辑--包学包会", "desc": "所以这个分页组件一共是由 2 + 2 + 2 + 1 + 2 * 2 = 11 个 元素构成。记住这个数，给这个变量起名字叫baseCount，待会要着重用它。分析到这逻辑实际已经完成74%了，是不是惊呆了？但是不要着急，我们继续分析一下分页组件需要哪些参数： 参数我已经标注好…"}, {"id": "7001506673755947016", "title": "JavaScript 回顾（五）", "desc": "这是我参与更文挑战的第28天，活动详情查看: 更文挑战 1, 数组遍历 一般我们都是使用for循环去遍历数组， JS中还为我们提供了forEach, 支持IE8以上的浏览器。 forEach()需要一"}, {"id": "6959754651214282783", "title": "前端数字格式化指南", "desc": "数字格式化操作在前端领域是十分常见的需求。但是浏览器和原生JS并没有提供太多可用的API来让我们进行操作。 因此，我们大多数时候都诉诸于自己造轮子。 下面介绍在平常工作中，针对数字进行格式化的几个方法"}, {"id": "6844904031396036622", "title": "用60行代码实现一个高性能的圣诞抽抽乐H5小游戏(含源码)", "desc": "今天圣诞节,先预祝大家节日快乐.既然是圣诞节,那我们就来学点有意思的,用几十行代码来实现一个高性能的抽奖小游戏.也基于此,来巩固我们的javascript基础,以及前端一些基本算法的应用. 由于目前已有很多方案可以实现九宫格抽奖动画,比如使用动态active实现边框动画,用随机…"}, {"id": "6844903760280420366", "title": "JS 异步编程六种方案", "desc": "我们知道Javascript语言的执行环境是\"单线程\"。也就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务。 这种模式虽然实现起来比较简单，执行环境相对单纯，但是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。…"}, {"id": "6991644794409713701", "title": "一起来了解下try...catch...finally吧｜8月更文挑战", "desc": "工欲善其事，必先利其器 先来了解下throw throw 语句用来抛出一个用户自定义的异常。 throw之后的语句将不会被执行。 并且控制将被传递到调用栈中的第一个catch块。 如果调用者函数中没有"}, {"id": "6844903933320790024", "title": "JS 如何创建、读取和删除cookie", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 Cookie 为 Web 应用程序保存用户相关信息提供了一种有用的方法。例如，当用户访问咱们的站点时，可以利用 Cookie 保存用户首选项或其他信息，这样，当用户下次再访问咱们的站点时，应用程序就可以检索以前…"}, {"id": "6844904133271486478", "title": "程序员必备的几种常见排序算法和搜索算法总结", "desc": "我想对于每个前端工程师来说, 最头疼的就是算法问题, 但是算法往往也是衡量一个人编程能力的一个很重要的指标.目前很多主流框架和库都应用了大量的算法和设计模式,为了让自己的段位更高,我们只能不断的\"打怪\"(也就是刷算法)升级,才能成为\"最强王者\". 有详细介绍. 接下来就让我们来…"}, {"id": "6844903645222273037", "title": "柯里化与反柯里化", "desc": "由于是延迟计算结果，所以要对参数进行记忆。 这里的实现方式是采用闭包。 当执行var add = currying(...)时，add变量已经指向了next方法。此时，allArgs在next方法内部有引用到，所以不能被GC回收。也就是说，allArgs在该赋值语句执行后，一直…"}, {"id": "6988768990403248141", "title": "深入理解事件循环", "desc": "JS 引擎并不提供事件循环。在谈事件循环的时候，经常会说请说一说JS的事件循环机制。这常常会让人产生一种误解，事件循环好像是JS语言的特性。"}, {"id": "6844903740995010568", "title": "前端接受后端文件流并下载的几种方法", "desc": "项目中经常会遇到需要导出列表内容，或者下载文件之类的需求。结合各种情况，我总结了前端最常用的三种方法来接受后端传过来的文件流并下载，针对不同的情况可以使用不同的方法。 如果后端提供的下载接口是get类型，可以直接使用方法一，简单又便捷；当然如果想使用方法二、三也是可以的，不过感…"}, {"id": "6860247341912457224", "title": "8 种用于前端性能分析工具", "desc": "我们可以编写一些漂亮，且吸引人的网站，但如果该网站无法快速加载到浏览器中，人们往往会跳过它。 尽管有许多性能规则，但归根结底，这全都取决于加载时间。 一秒钟大概是用户思路不被打断的极限。用户会感觉到延迟，但还可以接受 10秒左右是用户注意力的极限。 大多数用户会在10秒后离开你…"}, {"id": "6844903650586787848", "title": "常用JS方法整理", "desc": "主要整理日常工作中常用的一些通用Js代码，以方便能够记录与使用。"}, {"id": "6844903671906435080", "title": "snabbdom 源码阅读分析", "desc": "随着 React Vue 等框架的流行，Virtual DOM 也越来越火，snabbdom 是其中一种实现，而且 Vue 2.x 版本的 Virtual DOM 部分也是基于 snabbdom 进行修改的。snabbdom 这个库核心代码只有 200 多行，非常适合想要深入了…"}, {"id": "6988156161425932296", "title": "VUE3.X为何弃用Object.defineProperty?", "desc": "前面一篇文章写了关于VUE2.0中实现数据双向绑定的核心知识点--Object.defineProperty,今天继续探讨下VUE2.X为何弃用Object.defineProperty。"}, {"id": "6999839345196662815", "title": "javascript 验证“三门问题”", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 啥是三门问题 三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论。最初来源于漂亮国的一个游戏类的"}, {"id": "6844903683734372360", "title": "【开源】Westore 1.0 正式发布 - 世界上最小却强大的小程序框架", "desc": "众所周知，小程序通过页面或组件各自的 setData 再加上各种父子、祖孙、姐弟、嫂子与堂兄等等组件间的通讯会把程序搞成一团浆糊，如果再加上跨页面之间的组件通讯，会让程序非常难维护和调试。虽然市面上出现了许多技术栈编译转小程序的技术，但是我觉没有戳中小程序的痛点。小程序不管从组…"}, {"id": "6985935187737575437", "title": "JavaScript 数据类型", "desc": "引言 问题一. 数据为什么需要类型？ 问题二. 都是一，问什么要分 1 和 '1' ？ 以数字和字符串为例来比较一下，他们的区别是： 1. 功能不同 数字是数字，字符串是字符串，要严谨 数字能加减乘除"}, {"id": "7006140253299965960", "title": "前端中的事件循环eventloop机制", "desc": "在不运行的情况可以先猜测下最终的输出，然后展开我们要说的内容。 1. 宏任务与微任务 依据我们多年编写 ajax 的经验：js 应该是按照语句先后顺序执行，在出现异步时，则发起异步请求后，接着往下执行"}, {"id": "7007077350894469151", "title": "[你不知道的JavaScript（上）] this和原型对象读书笔记", "desc": "this提供了一种更加优雅的方式“隐式”的传递一个对象，因此API的设计会更加简洁，如果显式传递上下文，随着项目越来越复杂会变得越来越混乱。"}, {"id": "7005527799628824612", "title": "DongXH丶🐒 🐒的的中秋献礼🥮，【css星空实现，中秋诗】", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 中秋节献礼🎑 说起中秋诗词，大家耳熟能详莫过于苏轼《水调歌头·明月几时有》，以及王建的《十五夜望月》，但其实在这两首之外，还有很多优秀的中秋诗词"}, {"id": "6994268917904441352", "title": "万字长文，重学JavaScript数组类型", "desc": "一、数组基础 1. 数组概述 数组是我们最常用的数据类型之一，ECMAScript数组跟其他语言的数组一样，都是一组有序的数据，但跟其他语言不同的是，数组中每个槽位可以存储任意类型的数据。除此之外，E"}, {"id": "6997558431481593893", "title": "【玩转掘金】 我的赞，我的💗，都给了谁，有你吗？", "desc": "进入个人主页一看，自己已经给别人点赞过千了，我滴个神。我的这些💗，都给了谁呢，追寻真像，自己动手实现一个吧。"}, {"id": "6954868879034155022", "title": "JavaScript 中如何实现大文件并行下载？", "desc": "本文介绍了在 JavaScript 中如何利用 async-pool 这个库提供的 asyncPool 函数，来实现大文件的并行下载。"}, {"id": "6999886459343732772", "title": "【万字实战长文】手把手教你赋予Vuex 4.x 更好的 TypeScript体验", "desc": "更好地在 Vue 3.x 中结合类型系统使用 Vuex 4.0，贴合实际工作场景，讲解细致，有完整示例代码可拿来主义"}, {"id": "6997224854554411045", "title": "CSS 奇思妙想 | 使用 resize 实现强大的图片拖拽切换预览功能", "desc": "本文将介绍一个非常有意思的功能，使用纯 CSS 利用 resize 实现强大的图片切换预览功能。类似于这样： 思路 首先，要实现这样一个效果如果不要求可以拖拽，其实有非常多的办法。 将两张图片叠加在一"}, {"id": "7005483671293542430", "title": "一文带你轻松上手 React Hooks", "desc": "一文带你了解 React Hooks 的由来，轻松掌握其基本用法的同时，丰富一些常用小技巧....."}, {"id": "7005351791671902244", "title": "从0到1实现一个预览 vue 文件 CLI 工具", "desc": "背景 最近想做个类似 vue-cli 中 vue serve 的功能，能够直接指定一个入口文件进行快速预览开发的需求。 简单来说，就是在命令行输入 vue serve MyComponent.vue "}, {"id": "6976028030770610213", "title": "JavaScript 中如何实现并发控制？", "desc": "本文介绍了在 JavaScript 中，如何基于 ES7 或 ES6 实现并发控制的两种不同方案，同时介绍了如何手写简易版的 Promise.all 和 Promise.race 函数。"}, {"id": "7000555502988394533", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十一）", "desc": "感激相遇 你好 我是阿ken 当 obj1 和 obj2 两个变量指向了同一个对象后，如果给其中一个变量( 如 obj1 ) 重新赋值为其他对象，或者重新赋值为其他值，则 obj1 将不再引用原来的对"}, {"id": "7007429270012182535", "title": "ES6解构赋值解析", "desc": "引言 MDN对解构赋值的定义：解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。 在项目开发过程中我们会频繁使用object和Arra"}, {"id": "6973812686584807432", "title": "Axios 如何实现请求重试？", "desc": "Axios 是一个很优秀的开源项目，里面有很多值得我们学习与借鉴的地方。本文将介绍在 Axios 中如何通过拦截器或适配器来实现请求重试的功能。"}, {"id": "6986378966726606885", "title": "每个前端都可以成为站长，零成本搭建一个壁纸下载站！", "desc": "关于云开发，网上相关的文章和教程已经很多了，这里我就不再赘述。本文主要带着大家来看看，在云开发时代，建站的成本有多低，效率有多高。"}, {"id": "7002374866997346317", "title": "每个人必须知道的js常见错误", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 错误处理机制 Error 实例对象 JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生"}, {"id": "6957913856488243237", "title": "JavaScript 的静态作用域链与“动态”闭包链", "desc": "闭包是什么时候创建的，打包什么内容，存储在哪，和作用域链是啥关系，eval为什么性能不好。本文带你彻底理解闭包的本质。"}, {"id": "7000361235992576030", "title": "正经人一辈子都用不到的 JavaScript 方法总结 (二)", "desc": "密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。"}, {"id": "6997926968024891422", "title": "【玩转掘金】掘金可视化智能抽奖，支持暂停和继续,  插件版", "desc": "抽奖=接口+动效，我们要的是结果，因为抽奖也累！掘金可视化智能抽奖，支持暂停和继续, 插件版，欢迎你来拿！"}, {"id": "7001718105336447007", "title": "前端小白进阶工程师必备文章汇总☀️", "desc": "前言 汇总了最近一年阅读的优质文章，按照阅读必要性和阅读难度进行了打分（1-5分），每篇文章推荐下有阅读意见作为参考。希望能帮你从小白迈向工程师之路带来一点启发，如果对你有帮助的话点个👍和收藏吧❤️ "}, {"id": "6949093745606262791", "title": "数组的扁平化和去重", "desc": "前言数组的扁平化和去重是面试里面出现频率比较高的两个，所以我们需要重视起来。本文章是基于死磕36个手写题 写出来的，感兴趣的可以去看一下呀！数组去重前端的更新是很快的，所以每一个问题都是有很多的解法，"}, {"id": "6844903637450227726", "title": "基于后编译的国际化解决方案", "desc": "在之前做一些前端国际化的项目的时候，因为业务不是很复杂，相关的需求一般都停留在文案的翻译上，即国际化多语言，基本上使用相关的 I18n 插件即可满足开发的需求。但是随着业务的迭代和需求复杂度的增加，这些 I18n 插件不一定能满足相关的需求开发，接下来就和大家具体聊下在做国际化…"}, {"id": "6844903553031634952", "title": "图解搞懂JavaScript引擎Event Loop", "desc": "webapi是浏览器自己实现的功能，这里专门维护事件。"}, {"id": "6844903873388216327", "title": "【Step-By-Step】高频面试题深入解析 / 周刊05", "desc": "20. 实现 Promise.race 方法 在实现 Promise.race 方法之前，我们首先要知道 Promise.race 的功能和特点，因为在清楚了 Promise.race 功能和特点的情况下，我们才能进一步去写实现。 Promise.race(iterable) …"}, {"id": "6987299729084252173", "title": "JS，详解为什么（a==1 && a==2 && a==3）为ture能成立？", "desc": "本文深度剖析了为什么（a==1 && a==2 && a==3）这个表达式返回true成立，以及原理。"}, {"id": "6844903704261312520", "title": "动画浅析React事件系统和源码", "desc": "本文通过对React事件系统和源码进行浅析，回答“为什么React需要自己实现一套事件系统？”和“React的事件系统是怎么运作起来的？”两个问题。React为了性能和复用，采用了事件代理，池，批量更新，跨浏览器和跨平台兼容等思想，将事件监听挂载在document上，构造合成事…"}, {"id": "6844903920586719239", "title": "「手摸手设计模式系列」  策略模式与动态表单验证", "desc": "策略模式 （Strategy Pattern）又称政策模式，其定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。封装的策略算法一般是独立的，策略模式根据输入来调整采用哪个算法。关键是策略的实现和使用分离。 1. 你曾见过的策略模式 现在电子产品种类繁多，尺寸多种多…"}, {"id": "6844904138334011406", "title": "深入前端错误/异常", "desc": "我一直秉持这样的观点：从某种角度来看，人类一直生存在一个充满错误的世界里面。错误的环境污染，错误的城市设计（地下排污系统，道路设计），错误的功利社会，错误的攀比之风，错误的意识，错误的态度，错误的行动......总之，是人就会犯错，这个世界错误无处不在。这是一个基本事实。 把上…"}, {"id": "6850418118854967304", "title": "前端工程师自检清单及答案整理", "desc": "根据大神们整理的前端自检清单，自己整理一下答案，也方便自己学习。 JavaScript基本类型数据都是直接按值存储在栈中的(Undefined、Null、不是new出来的布尔、数字和字符串)，每种类型的数据占用的内存空间的大小是确定的，并由系统自动分配和自动释放。这样带来的好处…"}, {"id": "6955682149429493773", "title": "JavaScript系列 -- 原型、原型链、new、构造函数、继承", "desc": "前言 从这张图我们可以看出：Array、Object、Map、Set等等这些本质上是一个构造函数，其原型prototype（本质上其实是一个对象，详见下方）有很多的属性/方法，这些属性/方法都是我们平"}, {"id": "6996568799419842596", "title": "JSBridge原理与实现", "desc": "JSBridge主要是给 JavaScript 提供调用 Native 功能的接口，让混合开发中的前端部分可以方便地使用 Native 的功能"}, {"id": "6844903796754104334", "title": "从面试题看 JS 事件循环与 macro micro 任务队列", "desc": "一天惬意的下午。朋友给我分享了一道头条面试题,如下: 这个题目主要是考察对同步任务、异步任务：setTimeout、promise、async/await的执行顺序的理解程度。(建议大家也自己先做一下o) 当时由于我对async、await了解的不是很清楚，答案错的千奇百怪 :…"}, {"id": "6979153199324200991", "title": "cookieStore：操作cookie的原生API", "desc": "cookieStore：操作cookie的原生API。Cookie Store API它为开发者提供了document.cookie的异步替代方案。"}, {"id": "6992460438902423589", "title": "JS的基本数据类型和引用数据类型", "desc": "1、基本数据类型和引用数据类型 ECMASciprt包括两个不同类型的值：基本数据类型和引用数据类型。 基本数据类型指的是简单的数据段，引用数据类型指的是有多个值构成的对象。 当我们把变量赋值给一个变"}, {"id": "6844903713035780110", "title": "小程序类似抖音视频整屏切换", "desc": "现在已经更新了github地址和效果gif，可在文章最后查看。如果我的代码对你有用，请帮我随手star一下。 最近在项目中需要加一个功能，在小程序中将已有的短视频功能，按照抖音的方式来浏览，整屏，可上下滑动切换视频，并添加上滑下滑的动画。 1.在video标签上添加时间监听。 …"}, {"id": "6844904086840705031", "title": "装饰器(Decorator)", "desc": "JavaScript装饰器(Decorator)的语法现在处于 Stage 2 阶段，具体的可以查看 proposal-decorators。 文章下面的内容是根据以前的提案同时参考了一些文章，已经有点过时了。 最近会好好看一下官方的一些规范，对内容做出修改。感谢 @justj…"}, {"id": "6844903551886426119", "title": "ES5的filter方法，你真的会用吗？", "desc": "filter 为数组中的每个元素调用一次 callback 函数，并利用所有使得\" callback 返回 true 或 等价于 true 的值 的元素\"创建一个新数组。 大家讨论对于数组去重讨论还是蛮激烈的。因此，18岁的我，建了一个供大家交流的群，对于代码的实现逻辑的优化，…"}, {"id": "6916680558747582478", "title": "用高阶函数\b\b做抽象", "desc": "本文想通过一个例子来说明高阶函数如何能帮助我们建立更高层次的抽象。 函数是一种抽象方式，描述了一系列操作的集合，它提供了一种直接在抽象的层次上工作的能力。举个例子：求特定数值的立方，函数实现可以是： 这里函数描述了求立方这一个概念,而不依赖某一个具体的数。于是，函数cube能很…"}, {"id": "6844903648107954190", "title": "wasm + ffmpeg实现前端截取视频帧功能", "desc": "有没有那么一种可能，在前端页面处理音视频？例如用户选择一个视频，然后支持他设置视频的任意一帧作为封面，就不用把整一个视频上传到后端处理了。经过笔者的一番摸索，基本实现了这个功能，一个完整的demo：ffmpeg wasm截取视频帧功能： 支持mp4/mov/mkv/avi等文件…"}, {"id": "6844903943638794248", "title": "探究JS V8引擎下的“数组”底层实现", "desc": "使用 JS 的数组时，发现 JS 的数组可以存放不同类型的元素、并且数组长度是可变的。what？？这跟我之前接触的数组不一样啊。数据结构中定义的数组是定长的、数据类型一致的存储结构。 JS 中的数组竟然如此特殊，这也是为什么标题中数组二字加上了“”的原因。带着一脸的懵逼，打开搜…"}, {"id": "6949929918138417165", "title": "事件总线（发布订阅模式）", "desc": "前言事件总线这个概念对你来说可能很陌生，但提到观察者（发布-订阅）模式，你也许就很熟悉。事件总线是对发布-订阅模式的一种实现。它是一种集中式事件处理机制，允许不同的组件之间进行彼此通信而又不需要相互依"}, {"id": "6978651370882596877", "title": "ES6 Proxy", "desc": "ES6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。具体地说，可以给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。在对目标对象"}, {"id": "6996646976322273317", "title": "webrtc在视频通话过程中如何实时录制通话视频?", "desc": "有视频通话必然有视频录制,那么webrtc在是如何在视频通话过程中实时录制视频?并如何下载到录制结束后的视频的呢?"}, {"id": "6844903645624926215", "title": "基于vue.js实现树形表格的封装", "desc": "首先这里的子组件tree-item没有在页面上有引入，但是也可以正常使用。这里就是关健点，因为这个子组件是需要递归实现，所以，需要动态注册到当前组件中。代码如下（由于代码太多，先贴图说明吧，点击这里可以看源码）： 这里子组件看起来是不是挺奇怪的，但是为了递归他本身，暂时也只想到…"}, {"id": "6993645886676926501", "title": "写个深拷贝（包括方法的拷贝）", "desc": "深拷贝，无非就是区分数据类型，然后复杂数据进行递归，确保每个层级的数据都能拷贝到，唯一需要注意的就是方法的拷贝。"}, {"id": "6844903993420840967", "title": "V8 引擎垃圾内存回收原理解析", "desc": "JS 语言不像 C/C++, 让程序员自己去开辟或者释放内存，而是类似Java，采用自己的一套垃圾回收算法进行自动的内存管理。 这其中的机制，也对我们深入理解JS的闭包特性、以及对内存的高效使用，都有很大的帮助。 V8最多只能分配1.4G, 在 32 位系统中，最多只能分配0.…"}, {"id": "6972815088172564488", "title": "【轻聊前端】有“对象”之后", "desc": "上一篇我们讲如何创建对象，但不是有了对象就万事大吉，对象无处不在，要懂得如何使用它~ 对象本身无须创建，JavaScript就有对象，它们是面向对象编程的基石。 重点是有了对象之后，能做什么。"}, {"id": "6995575809909997604", "title": "继承方法顶级总结", "desc": "es5 的继承 1.原型链继承 　 重点：让新实例的原型等于父类的实例 实例可继承的属性：实例的构造函数的属性，父类构造函数属性，父类原型的属性/方法。（新实例不会继承父类实例的属性）（乍一看好像挺完"}, {"id": "6844903605816786958", "title": "前端人工智能？TensorFlow.js 学会游戏通关", "desc": "T-Rex Runner 是隐藏在 Chrome 中的彩蛋游戏，最近我用刚推出的 TensorFlow.js 开发了一个完全独立运行于浏览器环境下的 AI 程序，如下图所示 AI 可以轻松控制暴龙（T-Rex）避开障碍物。 作为 Chrome 浏览器死忠，你或许早已发现隐藏在 …"}, {"id": "7002397909962457096", "title": "egg.js 简单认识", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 为什么选择egg 对于一个初学node的前端来说。我跟倾向于一个成熟而规范的东西。然后理解它。 egg.js 是什么 Egg.js 为企业"}, {"id": "6844904183863181320", "title": "JavaScript的奇技淫巧", "desc": "在 JavaScript 中 数组（Array）随处可见，使用ECMAScript 6 中的新特性 扩展运算符 我们可以做很多很棒事情。 1. 迭代一个空数组 JavaScript 中直接创建的数组是松散的，以至于会有很多坑。试着用数组的构造方法创建一个数组，你就会瞬间明白了。…"}, {"id": "6979250114112159751", "title": "今天，学会这10个JS代码段就够了！", "desc": "用 apply 将数组各项添加到另一个数组 函数只执行一次 防抖 递归数组降为一维 数组降维(二维降一维) 使用可选链进行函数调用 检测数组对象中是否有空值 计算数组中每个元素出现的次数 按属性对ob"}, {"id": "6844903822624555016", "title": "使用 JS 来动态操作 css ，你知道几种方法？", "desc": "JavaScript 可以说是交互之王，它作为脚本语言加上许多 Web Api 进一步扩展了它的特性集，更加丰富界面交互的可操作性。这类 API 的例子包括WebGL API、Canvas API、DOM API，还有一组不太为人所知的 CSS API。 由于JSX和无数JS框…"}, {"id": "6998889806268727332", "title": "JS中的Symbol类型", "desc": "ES6中引入了Symbol作为非字符串属性名。要理解Symbol，需要知道JavaScript的基本对象类型是一个无序的属性集合，其中每个属性都有一个名称和一个值。属性名通常是字符串（在ES6之前）。"}, {"id": "6985411946040426503", "title": "原生JS实现一个音乐播放器", "desc": "准备工作： VScode 编辑器 设计稿 （无图不页面） 设计稿分析： 从图上首先我们可以分析出来一整个页面从上至下可以划分为 6 个区域 最中间的主页面我们可以考虑用两个圆环的 svg 图去撑起来，"}, {"id": "6844903840534233095", "title": "12个提高 JavaScript 技能的概念！", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JavaScript 是一种复杂的语言。如果是你是高级或者初级 JavaScript 开发人员，了解它的基本概念非常重要。本文介绍 JavaScript 至关重要的12个概念，但绝对不是说 JavaScript…"}, {"id": "6844903767473651720", "title": "虚拟DOM和Diff算法 - 入门级", "desc": "我们知道我们平时的页面都是有很多Dom组成，那虚拟Dom(virtual dom)到底是什么，简单来讲，就是将真实的dom节点用JavaScript来模拟出来，而Dom变化的对比，放到 Js 层来做。 下面是一个传统的dom节点，大家肯定都不陌生。 很简单，大家都能看懂，tag…"}, {"id": "6994971880662761502", "title": "svg画个环形图【另附项目案例发布到npm上的实践】", "desc": "最近的H5项目中需要用到进度环形图的展示，对比了业界主流的UI库后，发现不是特别符合我的需求，最后决定用canvas或svg自己实现一波! 附上UI设计图 Canvas实现 Svg实现 -Github"}, {"id": "6994826589997383694", "title": "JS 错误捕获机制", "desc": "Javascript引擎是单线程的，因此一旦遇到异常，Javascript 引擎通常会停止执行，阻塞后续代码并抛出一个异常信息，因此对于可预见的异常，我们应该捕捉并正确展示给用户或开发者。"}, {"id": "6993553018876755998", "title": "边学边译JS工作机制22--CRFS攻击以及7种防范策略", "desc": "概述 跨站请求伪造（CSRF），也被称为one-click attack 或者 session riding。也是一种web网站或应用的恶意攻击。这种攻击方式，是指攻击者替代受害者执行恶意请求。恶意应"}, {"id": "6916460251336146958", "title": "看完，你会发现，原型、原型链原来如此简单！ | 七日打卡", "desc": "在Javascript(下面简称JS)的世界里，有这么一句话，一切皆为对象。 答案：当然，不是。 准确来讲应该是对于 “引用类型” 而言，Javascript把数据类型分为原始数据类型和引用数据类型。 本文所讲的原型对象和原型链也只是针对对象才有的，JS以原型链的形式，保证对象…"}, {"id": "6844903689094692871", "title": "可能是最全面最易懂的解析前端浮动的文章", "desc": "瞬间浮想联翩，一个女神，轻轻地漂浮在水中。开心的拍打着水花，哇靠。。。 我觉得很多人连float是啥意识都不知道，要知道很多特性的原理是和其命名的单词或者字母有密切关联的，不是随便命名的。从名字中可以看到一些当初设计的初衷。 其实我个人理解，浮动造成的最核心的问题就是破坏了文档…"}, {"id": "6844904094772002823", "title": "前端路由和react-router实现原理详解", "desc": "在单页面应用如日中天发展的过程中，备受关注的少了前端路由。 而且还经常会被xxx面试官问到，什么是前端路由，它的原理的是什么，它是怎么实现，跳转不刷新页面的... 一大堆为什么，问你头都大，此时，我就要拿出我珍藏的图片了，各位观众，五个烟。🤣 四种路由的实现原理。 只可以在h…"}, {"id": "6972913930226106399", "title": "JS/node获取本机ip的方法", "desc": "Q Q 群 : 一起学前端 Javascript/node如何获取本机IP [TOC] 为什么要获取本机IP 以前做的一个Electron的客户端启动Server需要把本机IP显示出来 一个基于RK3"}, {"id": "6844903726168145933", "title": "细解JavaScript ES7 ES8 ES9 新特性", "desc": "导言：ECMAScript的演化不会停止，但是我们完全没必要害怕。除了ES6这个史无前例的版本带来了海量的信息和知识点以外，之后每年一发的版本都仅仅带有少量的增量更新，一年更新的东西花半个小时就能搞懂了，完全没必要畏惧。本文将带您花大约一个小时左右的时间，迅速过一遍ES7,ES…"}, {"id": "6867184627393265677", "title": "XSS攻防实战（附JS源码）", "desc": "之前写过两篇文章分别介绍了 Cookie 和 JSON Web Token，很多网站会在用户登录完毕设置 Cookie 值或者返回一个 Token，这就相当于令牌，只要拿着这张令牌就等同于证明了你是某个用户。如果防御不到位，Cookie 和 Token 很容易被 XSS 攻击窃…"}, {"id": "6987961069083820063", "title": "初学者必须知道的JavaScript认识(二)", "desc": "一、JavaScript数据类型 基本数据类型 引用数据类型（复杂数据类型） 二、数组：Array 数组方法 栈方法： push()：尾部添加 pop：尾部删除 unshift：头部添加 shift："}, {"id": "6844904159045500936", "title": "浅析JS堆、栈、执行栈和EventLoop", "desc": "现在前端面试，大多都会问到关于事件循环、执行栈等问题，本文通过案列、图片等形式给大家讲解这些概念，如果认真看完，我相信90%的同学可以彻底理解。 JavaScript具有自动垃圾回收机制，周期性会检查没有使用的变量，进行回收释放。所以在闭包中，如果引用了外部的变量，则无法进行释…"}, {"id": "6952846852366696456", "title": "谈谈你对原型链的理解？", "desc": "前言 过了一遍原型链坚持有收获有产出 谈谈你对原型链的理解？面试中如果是前端主管面试90%会问到这个.“橘生淮南则为橘,橘生淮北则为枳”可能在工作中用不到这些但是面试问到了支支吾吾半天崩不出一个字那么"}, {"id": "6937091297303855134", "title": "精读《设计模式 - State 状态模式》", "desc": "State（状态模式）属于行为型模式。 意图：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。 简单来说，就是将 “一个大 class + 一堆 if else” 替换为 “一堆小 class”。一堆小 class 就是一堆状态，用一堆状态代替 if e…"}, {"id": "6906398702269628424", "title": "混子前端24个解决工作问题的ES6代码片段", "desc": "1、如何隐藏所有指定元素？2、如何确认元素是否具有指定的类？3、如何切换元素的类？4、如何获取当前页面的滚动位置？5、如何评价滚动到页面顶部？6、如何确认父元素是否包含子元素？7、如何确认指定元素是否"}, {"id": "6919360618298343437", "title": "JS基础  彻底搞清楚this到底怎么指", "desc": "通过这两个例子你懂上下文对象调用的this了吗。"}, {"id": "6844904120680185869", "title": "iframe跨域通信(postMessage)", "desc": "transfer：可选参数，高级用法，这里不作讨论，是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。"}, {"id": "6844903856392896519", "title": "详解vue组件三大核心概念", "desc": "本文主要介绍属性、事件和插槽这三个vue基础概念、使用方法及其容易被忽略的一些重要细节。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。 prop 定义了这个组件有哪些可配置的属性，组件的核心功能也都是它来确定的。写通用组件时，prop…"}, {"id": "7000021659625193479", "title": "JavaScrpit 概念快速概览", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 该文章是Javascript概念速览。"}, {"id": "6845166891670093838", "title": "写不好就带你去爬山？业务领域驱动代码工程", "desc": "注意这不是大笑表情包，DDD（domain-driven design-领域驱动设计）,大部分前端接到需求的时候都在思考这个原型我要怎么实现某块功能细节（用哪个UI库、该怎么写），即使不了解业务也一样可以开发，通常也能完成工作，这种情况称为 ——「面向功能编程(没有思考的前端资…"}, {"id": "6986816696740741127", "title": "深入理解JS闭包（请多多点赞收藏）", "desc": "前言 JS闭包，对于每一个前端而言都是一个绕不开的概念。本人学习之初，因为闭包这个概念而花费了大量的时间以及精力去理解这个概念。所以在这里，我打算写一篇文章来分享一下本人的学习心得以及我眼中的闭包。 "}, {"id": "6953272550449217543", "title": "进入jser的世界---理解JS中的面向对象", "desc": "这篇文章意在分享对JS中面向对象的理解，其中对原型对象prototype 和 构造函数constructor 都会有所涉及。"}, {"id": "6844903830555983879", "title": "一百行js代码实现一个校验工具", "desc": "做过校验需求的小伙伴们都知道，校验其实是个麻烦事。 规则多，需要校验的字段多，都给我们前端带来巨大的工作量。 一个不小心，代码里就出现了不少if else等不可维护的代码。 因此，我觉得一个团队或者是一个项目，需要一个校验工具，简化我们的工作。 首先，参考一下 Joi。只看这一…"}, {"id": "6844903796397588487", "title": "[译] 如何在 JavaScript 中使用 apply(💅)，call(📞)，bind(➰)", "desc": "在本文中，我们将讨论函数原型链中的 apply，call 和 bind 方法，它们是 JavaScript 中最重要且经常使用的概念，且与 this 关键字密切相关。 因此，想要掌握本文所述内容，您必须熟悉 this 关键字的概念和用法。可以参考这篇文章。 要了解 apply|…"}, {"id": "6844903925057847309", "title": "Node.js 十大常见的开发者错误", "desc": "自 Node.js 面世以来，它获得了大量的赞美和批判。这种争论会一直持续，短时间内都不会结束。而在这些争论中，我们常常会忽略掉所有语言和平台都是基于一些核心问题来批判的，就是我们怎么去使用这些平台。无论使用 Node.js 编写可靠的代码有多难，而编写高并发代码又是多么的简单…"}, {"id": "6956144372710637605", "title": "那些看起来很简单但实际上却很容易出错的问题：请阐述sessionStorage、localStorage和cookie的区别？", "desc": "前言 我目前四年开发经验，目前正在准备考虑换一个工作环境，因此最近经历的面试比较多，大厂（滴滴，美团，平安，招行等）小厂都有，最好的结果是滴滴，目前已收到offer。本文从这期间遇到的一个简单的问题“"}, {"id": "6907818167687446541", "title": "如何将 github pages 迁移到 vercel 上托管", "desc": "今天说一下这个vercel,Vercel 可以部署任何前端应用程序的最佳场所。号称以零配置部署到我们的全球边缘网络,动态扩展到数百万个页面而不会费力 一键导入(支持 github,gitlab,BitBucket),自己的存储库，然后推送。vercel 内置的CI / CD系统…"}, {"id": "6997039022405222407", "title": "你不知道的JavaScript字符", "desc": "JavaScript字符 1. length; 2. charAt(); 3. charCodeAt(); 4. fromCharCode()和codePointAt()"}, {"id": "6980327494196936735", "title": "js面试三之ES6", "desc": "一、变量相关（let、var、const、function） let、const 与 var 的区别（五个）: 二.模板字符串 模板字符串用反引号表示，可以在里面直接使用字符串，还可以使用变量、表达式"}, {"id": "6991025700077568030", "title": "实现 JavaScript 沙箱的几种方式", "desc": "在开发过程中，曾了解到这么一个需求，\"用户希望可以自己写 js 代码运行\"，于是便有了如下的技术方案探索。"}, {"id": "6844904126099226631", "title": "【你应该了解的】抽象语法树AST", "desc": "作为前端程序员，webpack，rollup，babel，eslint这些是不是经常用到？他们是打包工具，代码编译工具，语法检查工具。他们是如何实现的呢？本文介绍的抽象语法树，就是他们用到的技术，是不是应该了解一下呢？ 本文没有晦涩难懂的理论，也没有大段大段的代码，完全从零开始…"}, {"id": "6854573215549751310", "title": "从JS中的内存管理说起 —— JS中的弱引用", "desc": "在所有的编程语言中，我们声明一个变量时，需要系统为我们分配一块内存。当我们不再需要这个变量时，需要将内存进行回收（这个过程称之为垃圾回收）。在C语言中，有malloc和free来协助我们进行内存管理。在JS中，开发者不需要手动进行内存管理，JS引擎会为我们自动做这些事情。但是，…"}, {"id": "6844903668488093704", "title": "Vue项目预渲染机制引入实践", "desc": "周末想顺便把已经做好静态页面的webApp项目做一下SEO优化，由于不想写蹩脚的SSR代码，所以准备采用预渲染，本来想着网上有这么多预渲染的文章，随便找个来跟着做不就完了嘛，结果年轻的我付出了整个周末..... 这篇文章就记录一下最后是怎么配置的 T.T 1. 简介与使用场景 …"}, {"id": "6995173390663286797", "title": "JavaScript的常用知识点 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 一、原型链 原型链涉及原型对象和原型链是如何产生的 1、原型对象 大部分的函数都有一个prototype属性，这个属性就算原型对象用来创建"}, {"id": "6844903590503383054", "title": "怎么在 ES6+Webpack 下使用 Web Worker", "desc": "大家都知道 HTML 5 新增了很多 API，其中就包括 Web Worker，在普通的 js 文件上使用 ES5 编写相关代码应该是完全没有问题了，只需要在支持 H5 的浏览器上就能跑起来。 那如果我们需要在 ES6+Webpack 的组合环境下使用 Web Worker呢？…"}, {"id": "6932288843018141709", "title": "技术写作技巧分享：我是如何从写作小白成长为多平台优秀作者的？", "desc": "本文想对这个历程做一个回顾，并分享一下我总结的写作技巧以及推广策略。 在写作之前想清楚为什么写作非常重要！因为你最初的想法会决定你往哪个方向去写，写出的内容的质量怎么样。 我写作的原因很简单，就是我前端做了几年了，大部分时间都在写业务代码，技术上一直没有太大的突破，最多也就是换…"}, {"id": "6944898818164916237", "title": "Bilibili网站首图动态Banner开发实现", "desc": "通过F12对Banner的观察,图片是由多张PNG图片相互叠加而成，监听鼠标移动实现图片的偏移，而飘落的花瓣则是使用canvas实现。下面就让我们来尝试一下。 这部分代码比较简单就不多赘述。 1. /css/index.css 2. /index.html 1. 具体实现思路 …"}, {"id": "6844904093656301576", "title": "揭秘 vivo 如何打造千万级 DAU 活动中台 - 启航篇", "desc": "随着 vivo 互联网用户量级不断增加，应用商店、官网商城、 游戏中心和浏览器等 vivo 官方产品相继进入存量用户运营时代。在这种大背景下，营销活动日益增多，传统活动开发模式已经不能满足井喷式且多样化的需求，项目开发和产品运营过程中遇到种种困难： 各 BU 业务不同，活动后台…"}, {"id": "6844903496018345991", "title": "web前端--10个妨碍进步的学习方式", "desc": "从事web前端的人很多，每个人的学习方式，学习习惯基本不会一模一样！关于web前端（或者直接互联网），大家都知道，是做到老，学到老的一个行业。之前写文章的时候，我说过很多学习的方式和建议。今天换一下，说一下我个人不建议的学习方式，或者我个人觉得是妨碍进步的学习方式，希望大家引以…"}, {"id": "6941009454376681479", "title": "探索 Snabbdom 模块系统原理", "desc": "近几年随着 React、Vue 等前端框架不断兴起，Virtual DOM 概念也越来越火，被用到越来越多的框架、库中。Virtual DOM 是基于真实 DOM 的一层抽象，用简单的 JS 对象描述真实 DOM。本文要介绍的 Snabbdom 就是 Virtual DOM 的…"}, {"id": "6991758026268999694", "title": "重学es6 - 第一部分 | 8月更文挑战", "desc": "已经8月份了,马上就是金九银十的日子了,平时我们在公司里边做项目的时候,可能很多语法都不太会用上,久而久之就会忘记了. 趁着掘金8月的活动, 正好整理复习一下这些基础知识"}, {"id": "6963051560020475912", "title": "ES2020(ES11)带来的新特性", "desc": "ECMAScript语言规范的第11个版本发布(ES2020)。来看看怎么使用它们。#matchAll #BigInt"}, {"id": "6844903663492661262", "title": "一些 JavaScript 中的代码小技巧", "desc": "聊一聊在 EcmaScript 5/6+ 中的一些代码小技巧"}, {"id": "6997058004243709983", "title": "最，最，最初级的Jsbridge原理理解", "desc": "本文是我自己对Jsbridge原理的简单理解。对于理解主要native的细节实现可能有错误之处，欢迎大家指正。"}, {"id": "6846687589592743943", "title": "如何搭建前端异常监控系统", "desc": "是指用户在使用应用时，无法得到预期的结果。不同的异常带来的后果程度不同，轻则引起用户使用不悦，重则导致产品无法使用，从而使用户丧失对产品的认可。 try-catch 只能捕获同步运行错误，对语法和异步错误却捕获不到。 编译器能够阻止运行语法错误。 当 JavaScript 运行…"}, {"id": "6968046237543038983", "title": "我相信这是你需要知道的JS运行机制和JS引擎(V8)内部", "desc": "今天来到了大家日常接触最多的模块 JS引擎相关的内容；本篇文章的内容包含： 1. JavaScript运行机制 2. 简单了解一下引擎内部"}, {"id": "7002381476276731911", "title": "js语法基础-数据类型", "desc": "ECMAScript有6种简单数据类型（也称为原始类型）： Undefined Null Boolean Number String Symbol。Symbol（符号）是ECMAScript 6新增的"}, {"id": "6977606168336138248", "title": "结合巨人的思想，总结自己javaScript原型|原型链|继承 过目不忘", "desc": "1.先了解它的历史和由来： Javascript继承机制的设计思想 感谢@阮一峰老师，借阮总文章一用 如下： 我一直很难理解Javascript语言的继承机制。 它没有\"子类\"和\"父类\"的概念，也没有"}, {"id": "6844904047263088653", "title": "小蝌蚪传记：nodejs线上模块热部署原理与实现", "desc": "。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 。。。 大佬：你。。。你是谁 。。。 大家都知道，nodejs启的后端服务，如果有代码变动，要重启进程，代码才能生效。 近段时间在做云编译相关需求的时候，就出…"}, {"id": "7002764640472006686", "title": "第 36 题：什么是原型、原型链、继承？", "desc": "## 什么是原型？ 每个函数都有 prototype（原型）属性，这个属性是一个指针，指向一个对象，这个对象的用途是包含特定类型的所有实例共享的属性和方法，这个对象（原型对象）是用来给实例共享属性"}, {"id": "6968704939551899679", "title": "js变量提升与函数提升的过程详解", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 先来看两个栗子🌰，下面的两段代码分别输出什么"}, {"id": "6844904137990078471", "title": "掘金的动态头像，你安排上了吗？", "desc": "于是，我报着414的态度，在浏览器中按住Ctrl + T怼了一个新页面，地址栏输入https://iiter.cn，敲了下回车。 第二排的第二条，从进来的第一眼就注意到它了。 当我再次轻点鼠标，执行完一个click事件的时候。网页已经从掘友导航站切入到掘金PC端首页了，整个过程…"}, {"id": "6844903896825987085", "title": "canvas+js从0开始撸一个俄罗斯方块", "desc": "游戏虽小，功能还挺复杂，需要的就是思维和耐心。下面直接进入正题。 俄罗斯方块想必大家都玩过，大体玩法简单说一下，在一个格子地图上随机下落不同形状的方块，通过←→方向键去控制方块的移动，以及↑键改变方块的形状，↓键加速其下落，当方块落下后满一行时消除该行。 我们可以把俄罗斯方块一…"}, {"id": "6967300677009833997", "title": "【得物技术】2021 了，能不能实现一个浏览器版的文件管理器？", "desc": "首先思考一下如下需求： 能不能在浏览器上开发一个文本编辑器，编辑本地文本文件？ 一个 Web IDE ，能不能直接打开硬盘上的某一项目目录进行开发，而非编辑云端文件呢？"}, {"id": "6996277567254691877", "title": "KoaJs原理学习", "desc": "～～文章首发于我的个人技术博客 上一篇文章 ExpressJs中间件原理学习 学习了Node.js Web 应用程序框架ExpressJs，这篇文章会学习Node.js 的另一个web框架- Koa。"}, {"id": "6983699431396737032", "title": "Set和Map数据结构", "desc": "一、Set 1、概述： ES6提供新的数据结构Set，类似于数组，但是成员的值是唯一的，没有重复值。也就是说Set是不重复的值的集合 没有键名，只有键值，或说键名和键值是同一个值，两个值永远是相等的 "}, {"id": "6846687601609408520", "title": "Vue.js轮播库热门精选", "desc": "要创建一个轮播图，我们必须动态地创建显示图片，并添加导航按钮来在它们之间导航，我们可能还需要自动播放功能。 这些都需要时间来构建，而且极有可能我们可以更好地利用这些时间做其他事情。在这篇文章中，我们将看看Vue.js的一些轮播图库，让我们的生活变得更轻松，并让我们拿回一些宝贵的…"}, {"id": "6844904045841219591", "title": "全网最详bpmn.js教材-properties篇", "desc": "bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成. 因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找…"}, {"id": "6896312536409489421", "title": "【推荐收藏】初学者可以玩转的 50 个 JavaScript 函数", "desc": "前段时间，看到一个很不错的 GitHub 仓库 30-seconds-of-code，该仓库的核心理念是：“你只要花 30 秒，就可以掌握开发中需要的函数”。其中，30 秒意味着每个函数的实现会出乎你意料的精简，这个过程不可避免地会涉及一些 JavaScript 的小技巧（奇淫…"}, {"id": "6844903541463580686", "title": "很全很全的前端本地存储讲解", "desc": "网络早期最大的问题之一是如何管理状态。简而言之，服务器无法知道两个请求是否来自同一个浏览器。当时最简单的方法是在请求时，在页面中插入一些参数，并在下一个请求中传回参数。这需要使用包含参数的隐藏的表单，或者作为URL参数的一部分传递。这两个解决方案都手动操作，容易出错。cookie"}, {"id": "6873697088652181518", "title": "你的Web系统真的安全吗？", "desc": "千里之堤，溃于蚁穴。 在Web系统中，一个小小的漏洞，往往能引发极其严重的后果。因此，Web安全是每个系统在设计、开发、运维时必须要重点考虑的问题。 等等。这些基础的防御措施是必须要做的，且实施的成本不高，但它们只是系统安全防御中的基础部分。很多开发人员在意识中认为做好这些就足…"}, {"id": "6977641237687828494", "title": "原生 JavaScript  手写数组 API", "desc": "本文将手写数组的常用方法 在我们常用到的forEach，map，filter，some，every，reduce....，你会发现,这些方法基本都是传入一个函数，然后对数据加工，处理，返回我们想要的结"}, {"id": "6844904176359587854", "title": "安排函数防抖与节流", "desc": "最近看到各种面经，防抖节流好像从来没有缺席过。虽然在项目中也使用过，但我对它俩的一直是 字面意思是防止抖动。在程序中就是为了防止在一定时间内重复执行一段代码(函数)。 在函数被触发n秒后再执行，如果在n秒内又有函数执行，则重新计算。 有一个输入框，用户输入用户名，然后向后端请求…"}, {"id": "6991102649982681095", "title": "前端接口mock自动化工具以及思考", "desc": "像single-spa这类微前端框架估计大家耳熟能详，本质来说，是为了提效，这个小工具，也是想提效，不过方向不同，就类似这个小工具概念的方向，有没有其他能够提高效率，较少重复工作的方案呢？"}, {"id": "6844903991583703047", "title": "建议速读 | ES6 特性快速扫盲", "desc": "ES6，也称 ECMAScript2015，对目前来说，它并不是 JavaScript 最新的标准，但是它已经广泛用于编程实践中。如果你还没用过 ES6，现在还不算太晚，跟我一起扫一遍吧。 1. let/const 2. 模板字符串 模板字符串使用反引号 ` (Tab 键上方的…"}, {"id": "6999832320114950180", "title": "js多种数组去重方法", "desc": "1.将数组的每一个元素依次与其他元素做比较，发现重复元素，删除 2.借助indexOf()方法判断此元素在该数组中首次出现的位置下标与循环的下标是否相等 3.利用数组中的filter方法 4.借助新数"}, {"id": "6994760510063247397", "title": "JS的多线程能力，WebWorker", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 关于JS的各个Webworker全部说的话，其实内容挺多的，按红宝书说的，能出一本书，为此，这里约定，本文的Worker均指专有Worker"}, {"id": "6844904154029096974", "title": "async/await来龙去脉（片尾附内推）", "desc": "在面试的时候，async/await是很能看出应试者知识面的一个点。当然自己也没想好从什么角度去阐释这个知识点。当面试管问的时候，你可以答自执行的generator的语法糖。但是自己有些过实现么，或者是看过他的实现。 注：对于generator不了解的，可以先去看一下gener…"}, {"id": "6914232598218670087", "title": "答应我，搞懂call、apply好嘛", "desc": "总结一句话：改变函数内部的 this 指向，并执行函数。 call、apply 是 Function 构造函数原型对象上的方法，所有的函数（包括call）都可以调用 call 和 apply。 解释一下eval问题，之所以这样写，是因为之前还没有结构啊，Array.from类数…"}, {"id": "6844903568768499719", "title": "一年前端面试打怪升级之路（一）", "desc": "2017年本科毕业生，坐标杭州，前端程序媛一枚。 在17年4月以前是个UI软妹子，自我定位想要成为一个交互大神，热衷于研究产品用户体验。 17年3月以UI设计实习生的身份进入现在的公司之后，由于UI发展前景不明，经过一段时间的深思熟虑（一拍脑门）决定转岗前端，自学一段时间后跟经…"}, {"id": "6999622180824678413", "title": "Javascript 浅谈观察者模式和发布-订阅模式", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 一、简介 观察者模式 观察者模式有两个角色： 目标对象 观察者 观察者模式的简单流程： 将观察者注册到目标对象的观察者列表中 目标对象进行 "}, {"id": "6908978600276393991", "title": "写C端，如何优雅的处理多个弹框的显示？(附带源码)", "desc": "前言由于项目一开始没有做好规划或者说一开始就不是你维护的，导致首页的弹窗组件可能放了十多个甚至更多，不仅是首页有，首页内又引入了十多个个子组件，这些子组件内也有弹框，另外子组件的子组件也可能存在弹框，"}, {"id": "6844904142700281870", "title": "5个很棒的 React.js 库，值得你亲手试试！", "desc": "React在过去几年变得越来越受欢迎。随之而来的是越来越多的库的发布，给我们带来了新的可能性，但最重要的是让开发这工作变得越来越简单。 在本文中，介绍 5 个 React 库，希望能给你带来一些帮助。 1. react-portal 我认为React中的 Portals(传送门…"}, {"id": "6907106049686241288", "title": "攻克前端开发的难点，码农不惧！！", "desc": "你要问前端开发难不难，我就得说计算机领域里常说的一句话，这句话就是『难的不会，会的不难』，对于不熟悉某领域技术的人来说，因为不了解所以产生神秘感，神秘感就会让人感觉很难，也就是『难的不会』；当学会这项技术之后，知道什么什么技术能做到什么做不到，只是做起来花多少时间的问题而已，没…"}, {"id": "6995801948582576141", "title": "ES6中Promise对象详解 | 面试必考知识点", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 promise对象是es6中新增的，用来解决回调地狱的问题，可以实现把异步的操作用同步的形式实现，这样做更符合人们看代码的习惯，而不"}, {"id": "6844903623273480200", "title": "ES6模块化之export和import的用法", "desc": "就是每一个需要导出的数据类型都要有一个name，统一引入一定要带有{}，即便只有一个需要导出的数据类型。这种写法清爽直观，是推荐的写法。 无论怎样导出，引入的时候都需要{}。 默认导出就不需要name了，但是一个js文件中只能有一个export default。 其实这种导出方…"}, {"id": "6994755920538370056", "title": "JavaScript温故而知新 - 类型转换机制", "desc": "JS中有六种简单数据类型：undefined、null、boolean、string、number、symbol，以及引用类型：obj"}, {"id": "7002977915004518414", "title": "JavaScript的深浅拷贝", "desc": "把一个对象序列化成JSON字符串，再通过JSON.parse()方法将字符串生成一个新的对象，实现深拷贝。 但是，JSON.stringify()方法会出现几种情况： 1、拷贝的对象的值有函数、und"}, {"id": "7000731163778088968", "title": "js的debounce防抖原理", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 是什么？ 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。 防抖是优化高频"}, {"id": "6999131260257828894", "title": "JS中的this详解", "desc": "this是JS中的一个关键字，表示当前函数的执行环境。为了能够在函数体内获得当前运行环境，就定了一个this关键字"}, {"id": "6899796711401586695", "title": "当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？", "desc": "这是我最近开发碰到的一个问题，本文是我测试出来的实践结果，供大家参考。 关于js定时器，setInterval和setTimeout，作为我们日常开发经常使用到的方法，大家一定非常熟悉。比如下面一个例子： 作为刚学前端没多久的新人也能知道，这段代码就是每过500ms打印一次1（…"}, {"id": "6992605438512463880", "title": "说一下js的继承方式", "desc": "借用构造函数继承 优点： 引用类型的属性不会全局污染，每份实例独享 可以向父类中传参 缺点： 方法在构造函数中定义，每次新建实例都会调用一次改变this指向的方法 原型链继承 问题： 新建child实"}, {"id": "6981682593259323423", "title": "学习手写call，apply", "desc": "这是我参与新手入门的第1篇文章。这篇文章是对于学习手写call和apply的总结。以及一些遇到的问题的解决..."}, {"id": "6963589759310495774", "title": "JavaScript 类型化数组", "desc": "在 JavaScript 这门语言中，我们所有人都必须对数组足够熟悉，知晓数组本质上是动态的，并且可以容纳任何 JavaScript 对象。不过，如果你曾经使用过类似于 C 语言这样的其他语言，你应该"}, {"id": "6844904086307864590", "title": "60行代码，造一个动画库轮子（超详细）", "desc": "window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行"}, {"id": "6987550149375590414", "title": "页面可见性事件visibilitychange监听", "desc": "这是一个页面可见性API，浏览器标签页被隐藏或显示的时候会触发 visibilitychange事件。这是 HTML5`新提供的一个 api ，作用是记录当前标签页在浏览器中的激活状态"}, {"id": "6937443215599468558", "title": "JavaScript数据结构之链表 | 技术点评", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 链表存储有序的元素集合，但链表中的元素在内存中并不是连续放置的，每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针或链接）组成。 链表：生活中的寻宝游戏例子。 需要把node.next的值指向cur…"}, {"id": "6844903840047710221", "title": "记 · 滚动条滚动到指定位置(锚点)的不同实现方式", "desc": "最近项目中遇到传统的锚点问题。那什么是锚点问题呢？ 锚点 是网页制作中超级链接的一种，又叫命名锚记。命名锚记像一个迅速定位器一样是一种页面内的超级链接，运用相当普遍。并且可以对网站内容通过菜单进行快速定位。 上图所示为锚点示意图，那这种需求我们怎么实现呢？下面我就来提供一些在不…"}, {"id": "6993203394378743815", "title": "搞懂JavaScript中this指向的问题", "desc": "前言 概念 无论在哪里调用函数，函数当中this的指向于调用他的对象 在JavaScript语言当中一切皆为对象，运行环境也是对象（web应用是window对象），所以函数都是在某个对象下运行的，而这"}, {"id": "6844903790282276877", "title": "揭秘JavaScript中“神秘”的this关键字", "desc": "当我开始学习JavaScript时，花了一些时间来理解JavaScript中的this关键字并且能够快速识别this关键字所指向的对象。我发现理解this关键字最困难的事情是，您通常会忘记在您已阅读或观看过一些JavaScript课程或资源中解释的不同案例情况。在ES6中引入箭…"}, {"id": "6983708886800793637", "title": "JS基础之手写Promise", "desc": "1.1. “promise” 是一个带有符合此行为规范 then 方法的对象（object）或函数（function）。 1.2. “thenable” 是定义 then 方法的一个对象（object）或函数（function）。 1.3. “value” 可以是任何合法的 J…"}, {"id": "6978664839610630181", "title": "解读js函数防抖与函数节流", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 前言 防抖（Debounce）和节流（throttle）都是用来控制某个函数在一定时间内执行多少次的技巧，两者相似而又不同。 应用场景 防抖场景"}, {"id": "6844903906393194504", "title": "切图仔最后的倔强：包教不包会设计模式 - 结构型", "desc": "1. 什么是结构型模式 2. 外观模式: Facade Pattern 对接口二次封装隐藏其复杂性，并简化其使用。 当我们将系统分成多个子系统时，我们会降低代码复杂性。编程时的最佳实践是最小化子系统之间的通信和依赖关系。实现这一目标的一个好方法是引入一个facade对象，为子系…"}, {"id": "6844904132201938957", "title": "别低估自己，但，这道题，真的有点难", "desc": "今天一个朋友转给我一道题，让我帮忙解释解释。 这道题目，题简单的不能再简单了，就是对象，函数，变量，但是问的很深，没有扎实的知识，很难确切的回答上这些问题。 要回答这些问题，关键还是要深入了解 this 和 逗号表达式。 首先我们简单回顾下这两个非常重要的知识。最后再看看文末的…"}, {"id": "6982387923266043941", "title": "js PointerEvent指针事件简单介绍", "desc": "指针事件 早期的浏览器，只存在鼠标事件（MouseEvent）。后来，以智能手机和平板电脑为首的触屏设备开始普及，交互方式发生了改变。但为了使现有功能不受影响，在很多情况下，触摸事件和鼠标事件会相继触"}, {"id": "6844903924015120397", "title": "ES6 与 ES5 继承的区别", "desc": "1. ES5 继承 代码中，构造函数 B 继承构造函数 A，首先让构造函数 B 的 prototype 对象中的 __proto__ 属性指向构造函数 A 的 prototype 对象，并且将构造函数 B 的 prototype 对象的 constructor 属性赋值为构造函…"}, {"id": "6978721383983530015", "title": "textarea内容自动撑开高度，实现高度自适应", "desc": "这是我参与更文挑战的第20天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我(全网同名)，解锁前端成长新姿势。 以下正文：   textarea使我们常用"}, {"id": "6844903653396971533", "title": "麻烦把JS的事件环给我安排一下！！！", "desc": "上次大家跟我吃饱喝足又撸了一遍PromiseA+，想必大家肯定满脑子想的都是西瓜可乐...... 呃，清醒一下，今天大家搬个小板凳，听我说说JS中比较有意思的事件环，在了解事件环之前呢，我们先来了解几个基本概念。 感觉说起来并不是很好理解，我们举个例子，比如有一个乒乓球盒，我们…"}, {"id": "6951302170461339662", "title": "手写JS-实现new关键字", "desc": "前言和其他高级语言一样javascript中也有new关键字，我们以前认知的new是用来创建一个类的实例对象，但在js中万物皆是对象，为何还要new关键字呢，其实js中new 运算符用来创建一个用户定"}, {"id": "6979407874367684621", "title": "React大数据量展示Table优化（虚拟列表）", "desc": "虚拟列表只对可视区域数据进行渲染，对非可视区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。"}, {"id": "6844904005286494215", "title": "从零开始构建一个webpack项目", "desc": "新建一个空文件夹，用于创建项目，使用 npm init 命令创建一个 package.json 文件。 输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，也可以使用 npm init -y 这个命令来一次生成 package.json 文件，这样终端不会询问你…"}, {"id": "6957961040961208350", "title": "一篇并不长的文章直接让你明白Event loop运行机制是什么", "desc": "单线程的JavaScript 众所周知，我们的JavaScript是一种单线程语言，之所以是单线程，是由它的工作目的及用途来决定的：作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及"}, {"id": "6844903607574200334", "title": "前端工程师必知之Promise的实现", "desc": "在Javascript的世界中，代码都是单线程执行的。这就导致我们的代码里会有嵌套回调函数，一旦嵌套过多，导致代码不容易理解和维护。 为了降低异步编程的复杂性，开发人员一直在寻找各种解决方案，Promise只是用来处理异步操作的其中一个方案。 下面我就结合着Promise的使用…"}, {"id": "6844903887166504968", "title": "基于 localStorage 实现一个具有过期时间的 DAO 库", "desc": "本文主要解决原生localStorage无法设置过期时间的问题，并通过封装，来实现一个操作便捷，功能强大的localStorage库，关于库封装的一些基本思路和模式，我将采用之前写的如何用不到200行代码写一款属于自己的js类库中类似的方法，感兴趣的朋友可以学习，交流。 我们将…"}, {"id": "6999458704219193352", "title": "高阶函数理解", "desc": "高级函数概念理解 一个函数的参数为函数 一个函数返回值为函数 由此衍生一个问题，日常开发中如何对一个函数方法进行拓展？ 此时我们就可以采用高阶函数去实现 举个栗子 首先我们定义一个函数方法 我想在此函"}, {"id": "6844903520378814471", "title": "简单易懂的 webpack 打包后 JS 的运行过程", "desc": "hello~亲爱的看官老爷们大家好~ 最近一直在学习 webpack 的相关知识，当清晰地领悟到 webpack 就是不同 loader 和 plugin 组合起来打包之后，只作为工具使用而言，算是入门了。当然，在过程中碰到数之不尽的坑，也产生了想要深入一点了解 webpack…"}, {"id": "6844903760217505805", "title": "细说 async/await 相较于 Promise 的优势", "desc": "上一篇文章 「前端面试题系列1」今日头条 面试题和思路解析 中提到了 async/await。它是在 ES8 中正式提出的，但是我发现，身边的朋友用到 async/await 的并不多。那么今天，我们就具体地聊聊什么是 async 函数，与 Promise 相比较，有哪些写法与…"}, {"id": "6976112419860906020", "title": "用 JavaScript 实现手势库 — 封装手势库【前端组件化】", "desc": "经历了多次的迭代，我们的手势库功能都已经实现了。但是到了这里我们的代码确实需要重新整理和封装了。如果同学们还记得的，我们之间一开始获取的元素 `element` 是写死的。"}, {"id": "6998310279008223262", "title": "JavaScript知识点回顾（二十）——this（五）", "desc": "这是我参与8月更文挑战的第二十天，活动详情查看：8月更文挑战 优先级 之前已经介绍了函数调用中this绑定的四条规则，我们需要做的就是找到函数的调用位置并判断应该应用哪条规则。"}, {"id": "6973972309170192414", "title": "js中的传值和传址", "desc": "基本数据类型是传值，存放在栈中 引用数据类型（数组，对象和函数）是传址，值存放在堆中，栈中存放的是地址 先讲讲赋值的操作： a先是被赋值为1，接着把a的值赋给b, 这时会进行值的拷贝,因此b=1；然后"}, {"id": "6844903651362734094", "title": "web移动端布局的那些事儿", "desc": "为了保证在低版本的机型也能正常显示页面，可以引入 viewport-units-polyfill 来处理 vw 的兼容问题。 viewport-units-polyfill 其实是 viewport-units-buggyfill 的简化版。 简单介绍下 viewport-un…"}, {"id": "6844903724897271816", "title": "JavaScript骚操作之遍历、枚举与迭代（上篇）", "desc": "这是一段标准的for循环代码，通过变量i去追踪数组arr的索引，达到访问数组中每一位元素的目的。 需要花费精力去处理越界问题，一些编译型语言在遇到数组索引越界时会报错，而JavaScript引擎将不会告诉你任何错误信息，错误定位成本会比较高。 一切看起来都是那样的完美，即不需要…"}, {"id": "6992222767412150286", "title": "原型和原型链", "desc": "什么是原型 每一个引用对象都有一个隐式原型__proto__，这个属性是一个对象。隐式原型的__proto__指向他的构造函数prototype显式原型。当你试图得到对象的某个属性，如果本身没有这个属"}, {"id": "6844903727548088333", "title": "刷《一年半经验，百度、有赞、阿里面试总结》·手记", "desc": "有给出的或者有些不完善的答案，也尽力给出/完善了（可能有错，大家自行辨别）。有些很困难的题目（例如实现Promise），附带相关链接（懒癌患者福利）。 总的来说，将这些题目分成了“Javascript”、“CSS”、“浏览器/协议”、“算法”和“Web工程化”5个部分进行回答和…"}, {"id": "6936328738476916749", "title": "【死磕JS】闭包到底是个什么鬼？｜技术点评", "desc": "闭包有多重要？如果你是初入前端的朋友，我可以肯定得告诉你，前端面试，必问闭包！面试官们常常用对闭包的了解程度来判定面试者的基础水平，保守估计，10个前端面试者，至少5个都死在闭包上。 2、逐行去解读代码。 当解析器解读函数调用时，会将整个函数执行一个入栈操作，并为函数创建一个新…"}, {"id": "6996586819659759630", "title": "JavaScript数据类型 - String类型", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战  String类型 String类型用于表示由0或多个16位Unicode字符组成的 字符序列，即字符串。字符串可以由双引号\"或单引号'表"}, {"id": "6994042094264254477", "title": "【重学JS】坚持学习,巩固基础-day8-字符串&排序", "desc": "☆☆☆ 今天的内容(排序 & 字符串方法)也比较重要, 也是工作中常用的知识点! ☆☆☆ 持续更新, 可作为初学者的学习路线, 可参考一下,学习进度也不是特别赶!"}, {"id": "7000003965882466311", "title": "JavaScript复习（二）｜ 8月更文挑战", "desc": "“这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 往期的复习资料： 【1】JavaScript复习（一） 浅克隆和深克隆 浅克隆： 浅克隆后，虽然 obj === cloneObj; /"}, {"id": "6844904196689362958", "title": "有趣的Canvas，你值得拥有！", "desc": "Canvas 是 HTML5 提供的一个用于展示绘图效果的标签. Canvas 原意为画布, 在 HTML 页面中用于展示绘图效果. 最早 Canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现。 canvas 本身不能绘图. 是使用 JavaScript 来完成绘…"}, {"id": "6996313710067187720", "title": "es6的export和export default指令", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 上一篇文章说了CommonJS规范的exports与module.exports的异同， 今天来讲讲es6新增的export和exp"}, {"id": "6844903630554808334", "title": "不聊webpack配置，来说说它的原理", "desc": "最近在前端论坛闲逛，看到了一些讲parcel、webpack的文章，就突然很好奇，每天都在用的打包工具，他们打包的原理究竟是什么。只有知道了这一点，才可以在众多的打包工具里，找到最适合的那个它。在了解打包原理之前，先花一些篇章说明了一下为什么要使用打包工具。 前端产品的交付是基…"}, {"id": "6844903750323142670", "title": "你说你学不动啦，看 Redux 作者怎么说？", "desc": "编者按：今天这篇文章是 React 团队成员、Redux 作者 Dan Abramov 新编写的一篇文章，这篇文章非常不错。在 2019 到来之际，谨以此文祝大家元旦快乐！ 大家总以为我懂得许多东西，而实际情况并不是这样的。我不是在抱怨什么，这也不是什么坏事。 （尽管少数派有来…"}, {"id": "6844903574778937358", "title": "邮箱/邮件地址的正则表达式及分析(JavaScript，email，regex)", "desc": "在做用户注册时，常会用到邮箱/邮件地址的正则表达式。本文列举了几种方案，大家可以根据自己的项目情况，选择最适合的方案。 以大写字母[A-Z]、小写字母[a-z]、数字[0-9]、下滑线[_]、减号[-]及点号[.]开头，并需要重复一次至多次[+]。 中间必须包括@符号。 @之后…"}, {"id": "7000939704552161317", "title": "js引擎的执行过程---预编译", "desc": "本文整理了前端面试高频出现的让你说（猜）打印输出类问题，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6981093143928111135", "title": "获取url参数  向url字符串追加参数", "desc": "背景 很多时候，我们需要获取另外一个页面url传过来的参数。 可以手动传入url 或者使用默认的location.href（search）; 由于uri很多时候特殊字符会有歧义，一般的url 需要经过"}, {"id": "6933835301697617927", "title": "ES6 Set 和Map,WeakSet和WeakMap据结构的介绍", "desc": "近期有被问到对 ES6 Set 和Map,WeakSet和WeakMao数据结构的区别,有点懵,忘记了???看来知识需要常常复习才行,所以有这篇文章, PS : set 和map 个人觉得是前端比较总要的两种数据结构,还是都要了解其使用方法的。 本文章主要参考 ES6入门文档,…"}, {"id": "6994070396454731783", "title": "前端之数据结构（七）堆", "desc": "今天这一章就来介绍一下堆这种数据结构。 堆 堆是一种特殊的完全二叉树。 所有的节点都大于等于（最大堆）或小于等于（最小堆）它的子节点。 J"}, {"id": "6994069448957116424", "title": "前端Leetcode系列｜13. 罗马数字转整数", "desc": "今天来和小伙伴们一起打卡力扣第13题：罗马数字转整数。 一、题目描述 罗马数字包含以下七种字符: I， V， X， L例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为"}, {"id": "6987676293642862599", "title": "【javaScript】原生js通过CORS与JSONP实现跨域请求", "desc": "由于浏览器同源策略的限制，非同源下的请求，都会产生跨域问题，通过JSONP与CORS来实现跨域请求。"}, {"id": "6844903700872298510", "title": "精读《用 Reduce 实现 Promise 串行执行》", "desc": "本周精读的文章是 why-using-reduce-to-sequentially-resolve-promises-works，讲了如何利用 reduce 实现 Promise 串行执行。 在 async/await 以前 Promise 串行执行还是比较麻烦的，希望根据这篇…"}, {"id": "6998319409185947684", "title": "js的事件委托", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战  一道前端面试题开始：现有一个包含三个li的无序列表ul，点击每一个li时alert里边的内容，如何实现？ 首先想到的是： 那么如果li的"}, {"id": "6904507267576987655", "title": "在限定并发数下用 Promise 并发完成请求", "desc": "--- # 主题列表：juejin, github, smartblue, cyanosis, channing-cyan, fancy, hydrogen, condensed-night-purp"}, {"id": "6994056062043160590", "title": "JavaScript ES(6-11)全版本语法 (一)：新的声明方式", "desc": "前提概要 由于自身掌握基础知识不是很牢固，因此梳理一些ES的语法，便于自己学习。同时，也和大家一起分享，如有不对的或者不准确的地方，欢迎大家提出😄，我也积极修改。第一次正式发文章，如有不好的地方，还望"}, {"id": "6994042906688356389", "title": "数组构造器及数组类型判断 | 8月更文挑战", "desc": "数组是JavaScript中至关重要的角色，可以说，不深入了解数组，就不足以写好JavaScript。"}, {"id": "6936732802540896264", "title": "【轻聊前端】为什么说一切皆对象？", "desc": "前端er们经常看到这么一句话：“JavaScript的一切皆为对象”。 也有说“JavaScript是一门面向对象”的编程语言，还有说“不对，JavaScript不具备正统面向对象的特征，应该说是基于对象。” 称为基本类型，它们有自己的类型，不可再分。它们是对象吗？ 由此看，基…"}, {"id": "6998454371612622862", "title": "JavaScript 作用域链", "desc": "个人笔记 - 仅供参考 1. 作用域链的作用是保证执行环境里有权访问的变量和函数是有序的。 2. 作用域链的变量只能向上访问，变量访问到`window`对象即被终止。"}, {"id": "6975792266069852174", "title": "掘友教我写代码（一）", "desc": "天天潜水看掘友文章，确实学习到很多东西。想着能不能把平常工作中遇到自己觉得不满意或者觉得可以优化但是没有太多思路的代码拿出来和掘友一起交流（空手套代码）"}, {"id": "6971059520327909383", "title": "js继承之原型链继承", "desc": "这是我参与更文挑战的第7天，活动详情查看：更文挑战 原型链的继承在前端面试中几乎不可避免，必问。就让我们一起来看看吧"}, {"id": "6844903609524551688", "title": "JS 底蕴之 变量、作用域和垃圾回收", "desc": "而引用类型就是传说中的 Object 了。 其中基本类型是按值传递，而引用类型的值是按引用访问的，所以在操作对象时，实际上是在操作对象的引用而不是实际的对象 ( ps：在为对象添加属性时，操作的是实际的对象 )。 1、引用类型是动态的属性，而基本类型不是。 2、复制的方式不同。…"}, {"id": "6998451251021086751", "title": "【JavaWeb基础 · JavaScript--DOM元素对象的属性】", "desc": "“这是我参与8月更文挑战的第20天，活动详情查看： 8月更文挑战” 元素对象属性 value属性 通过元素对象.value获取元素对象的value值； 通过元素对象.value = 设置的value值"}, {"id": "6931282480129540110", "title": "nestjs入门记之「实现CRUD」", "desc": "nestjs作为一个类似java spring的框架，将ioc 容器、AOP编程贯彻到了极致。那么如何用nestjs实现一套增删查改呢？本文将为大家一一讲解。 数据库连上后，由于在开发模式下开启了数据库表结构同步。因此，实体创建好之后，在nest服务启动时就会执行sql，创建好…"}, {"id": "6924957800741208072", "title": "「JavaScript深入」理解闭包", "desc": "答案是6个6。 这道题粗略的解释是i属于全局作用域，在异步定时器里，也引用的是相同作用域中的i，当定时器启动时，i已经变成了6，所以打印出来的结果并不是我们预期的0、1、2、3、4、5。 那么有没有更加专业（zhuangbility）一点的说法呢？有的，我们可以从执行上下文和闭…"}, {"id": "6981817473444249631", "title": "Promise A+解析 实现一款完整的Promise", "desc": "1.术语 1.promise是一个有then方法的对象或者函数 2.thenable是一个有then方法的对象或者函数 3.value是promise成功态的值，值的类型是任何符合JS规范的类型 4."}, {"id": "6904547166405001230", "title": "umi中dva的使用理解", "desc": "umi 中使用 dva 则可以直接下载插件进行配置即可。我等菜狗福音。 1. global dva 的 global 模型,包含 dispatch 触发函数,当前路由的一些属性等，我们把这个看作是一个全局对象(root)。 2. model dva 拆解的一个局部状态操作模型。…"}, {"id": "6844904103512932359", "title": "从event loop出发讨论Promise、setTimeout的执行顺序", "desc": "Event Loop 这个概念相信大家或多或少都了解过,所谓温故而知新，so，今天，我们就从event loop出发，看看在事件的执行过程中，他都经历了些什么。 ​ 如果当前没有任何消息queue.waitForMessage 会等待同步消息到达,当完成当前任务后，继续去查看有…"}, {"id": "6881939302666895367", "title": "前端工程化", "desc": "模块化是一种主流的组织方式，它通过把我们的复杂代码按照功能的不同划分为不同的模块，单独的维护这种方式，提高我们的开发效率，降低维护成本。 模块化只是思想，不包含具体的实现。 自动采用严格模式，忽略use strict。 导出的成员并不是一个字面量对象，语法和字面量对象很像。导入…"}, {"id": "6933167091172245518", "title": "拒绝死记硬背！理解resolvePromise，三步实现符规范的Promise。", "desc": "考虑以下三种场景，一般我们不会直接resolve，而是在Promise的构造函数执行异步任务，在异步任务回调时再执行resolve或者reject。又或者，在构造构造函数中通过throw抛出了异常。 上面三个Promise的状态分别从Pending转移到Fulfilled、Re…"}, {"id": "6993700082818220069", "title": "JavaScript之函数防抖、节流", "desc": "无论在实际应用场景、亦或是面试，都会经常遇得到函数防抖、函数节流。当你了解原理后，实现就很简单了..."}, {"id": "6844903554218459144", "title": "domtoimage -- html转化为图片", "desc": "这段时间的工作中，一直在做canvas类的H5，开发的过程中很关键的一部分是将dom节点转化为图片。起初是用html2canvas来做的，做完之后感觉图片清晰度的效果不是很好，然后就再GitHub上找到 domtoimage这个js插件换了之前html2canvas。更换后不仅…"}, {"id": "6844903713128218631", "title": "【手把手带你撸一个脚手架】第一步, 创建第一个命令", "desc": "脚手架, 源自于建筑行业, 通俗的讲就是一个项目搭建的工具. 比较熟知的有 vue-cli create-react-app 等等, 这类工具通常以 xxx-cli 命名, 不废话 先甩一个 npm 战绩 小哥哥, 看看这数据, 你到底要还是不要嘛... 创建 bin 目录和 …"}, {"id": "6994574923771412516", "title": "【日拱一卒】JavaScript面向对象精要 二 函数", "desc": "这是我参与8月更文挑战的第10天，活动详情查看： 8月更文挑战”  前言 在JavaScript中，函数本质是一个对象。函数不同于其他对象的地方是函数存在一个被称为[[Call]]的内部属性。内部属性"}, {"id": "6856541382832717837", "title": "前端工程师的 LeetCode 之旅 -- 周赛 200", "desc": "给你一个整数数组 arr ，以及 a、b 、c 三个整数。请你统计其中好三元组的数量。 如果三元组 (arr[i], arr[j], arr[k]) 满足下列全部条件，则认为它是一个 好三元组 。 其中 |x| 表示 x 的绝对值。 解释：一共有 4 个好三元组：[(3,0,1…"}, {"id": "6844903938915827725", "title": "手写算法并记住它：快速排序（最易理解版）", "desc": "本系列文章就尝试解决这个问题。 研读那些排序算法，细品它们的名字，其实都很贴切。 比如快速排序，一个快字就能体现出其价值，因而它是用得最多的。 因为它相对难一些，本系列将分两篇文章讲解它。 上一篇是5行代码实现版本。而本篇是原地排序算法。 快速排序这个名字是针对其性能来起的，但…"}, {"id": "6844903933626810382", "title": "js图片 视频预览    URL createObjectURL()", "desc": "简单的理解一下就是将一个file或Blob类型的对象转为UTF-16的字符串，并保存在当前操作的document下。 细说起来就是另一个故事了，不要在意细节。 当然是本篇主题的预览功能了。 等等。预览用FileReader.readAsDataURL(file)转base64搞…"}, {"id": "6919826321828741128", "title": "我想让页面与 iframe 进行双向通信", "desc": "实际工作中可能很难遇到，但一旦遇到了，我们要能够立即想到怎样去实现。 在 iframe 页面，使用 window.parent 调用 postMessage 方法，即可发送消息给父级页面。 message 只能是 String 类型，所以如果想发送多条数据，可以使用 JSON …"}, {"id": "6844903958301900807", "title": "javascript 中 AOP 那些事", "desc": "最近在忙着阅读 megalo 的代码 (未来会出一个系列专门讲 megalo 的源码，还是挺有意思的，大家可以期待一下)。感觉 megalo 、 mpvue 等小程序的跨端框架也好， weex 跨平台框架也好，本质都差不多，都是 fork 了一份 vue 过来改了改，借助了 v…"}, {"id": "6972408721259364365", "title": "前端内存泄漏", "desc": "现象 内存占用率高，导致页面卡死，点击无反应。 系统进程不再用到的内存，没有及时释放，就叫做内存泄漏。 引起内存泄漏的原因 全局变量 浏览器中，全局对象就是window对象，变量在窗口关闭或重新刷新页"}, {"id": "6999815635614040071", "title": "HTML中的JavaScript", "desc": "1 <script>元素 1.1 <script>元素介绍和属性 将JavaScript插入HTML的主要方法是使用<script>元素。这个元素是由网景公司创造出来，并最早在Netscape Nav"}, {"id": "6918912732536242190", "title": "HTML5 drag 和drop？ 来看这个详解吧！！", "desc": "拖拽（Drag/Drop）是一个很普遍、很常用的操作，即抓取一个对象后，放到想要放的地方。 但是！！ 想要实现拖拽，需要添加 拖拽属性。 注意：链接和图片默认是可拖动的，则不需要 draggable 属性。 dragstart 事件： 在进行拖放操作时，通过dataTransf…"}, {"id": "6870141103958589454", "title": "学习ES模块、CommonJS、AMD、UMD、SystemJS", "desc": "ES模块。ES模块是ECMAScript2015（ES6）语言规范中的一部分。在模块出现之前，引入多个JavaScript文件，JavaScript文件中定义的顶层的变量都是全局的，开发人员必须使用IIFE（Immediately Invoked Function Expres…"}, {"id": "6844904032050348045", "title": "基于vue的海量数据tree组件(20w+)", "desc": "elementUI 里的 tree 组件在数据量为 1k+ 的的时候卡顿。 没有找到基于 vue 的海量(20w+) tree 插件。 1. 为啥卡顿。 elementUI 递归实现 tree，dom 量大。 海量的 data 会被依赖收集，内存开销大，会卡顿，甚至提示内存不足…"}, {"id": "6982792650537566244", "title": "new操作符原理", "desc": "在 javaScript创建对象的方法-构造函数模式 中创建了构造函数Person。 并提到，要创建一个构造函数的实例需要使用 new 操作符，这种方式调用构造函数其实经历了如下几个步骤： 创建一个新"}, {"id": "6844903890077351943", "title": "组件库之按需加载", "desc": "目前按需加载有两种方式实现。 babel-plugin-import是ant-design团队出的一个babel插件，主要用于模块的按需加载。其原理就是将直接引入的方式通过babel转化成按需引入的方式。如果css也需要按需加载，也会注入css引用代码。 babel-plugi…"}, {"id": "6844904117723201544", "title": "JavaScript深入之头疼的类型转换(下)", "desc": "这其实是因为 JavaScript 自动的将数据类型进行了转换，我们通常称为隐式类型转换。但是我们都知道，+运算符既可以用于数字加法，也能用于字符串拼接，那在这个例子中，是将数字 1 转成字符串 '1'，进行拼接运算？还是将字符串 '1' 转成数字 1，进行加法运算呢？ 先卖个…"}, {"id": "7000768343678418974", "title": "记录一次开发中按钮切换的竞态问题", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前言 今天遇到一个问题，我的项目的场景是，页面上有按钮，按钮可以切换，切换后底下的内容会切换，但是这个内容是请求后台，后台返回的数据。 如"}, {"id": "6844903621360943118", "title": "一次性让你懂async/await，解决回调地狱", "desc": "async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。相较于 Generator，async 函数的改进在于下面四点： 内置执行器。Generator 函数的执行必须依靠执行器，而 async 函数自带执…"}, {"id": "6999486994774491172", "title": "yapi 自动生成api代码", "desc": "yapi-generate 生成的示例是我们自己公司基于axios二开开发框架，使用时候需要自定义一下 目标 让前端开发更加的关心UI与交互 api为生成前端api的目录，vue文件夹是生成的vue代"}, {"id": "6844903961820921869", "title": "深入浅出 Babel 下篇：既生 Plugin 何生 Macros", "desc": "这篇文章干货不少于上篇文章，这篇我们深入讨论一下宏这个玩意 —— 我想我们对宏并不陌生，因为很多程序员第一门语言就是 C/C++; 一些 Lisp 方言也支持宏(如 Clojure、Scheme), 听说它们的宏写起来很优雅；一些现代的编程语言对宏也有一定的支持，如 Rust、…"}, {"id": "6994232323247964196", "title": "力扣刷题👊【462. 最少移动次数使数组元素相等 II】", "desc": "题目描述：给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。"}, {"id": "6844903687362445326", "title": "微信小程序 bug 集中营", "desc": "2019-08-16 13:41:40 由于这篇文章可能比较久远，文章进行了微调，一些 bug 可能修复，或者其中一些链接坏了，请小伙伴们前往 GitHub 获取最新文章。 总结1: 在页面制作商，需要 3 周工作日（工作 15 天）搞定，前后端对接口另计。实际上，12 个工作…"}, {"id": "6844903879017021454", "title": "【进阶 7-4 期】深入篇 | 阿里 P6 必会 Lodash 防抖节流函数实现原理", "desc": "前面几节我们学习了节流函数 throttle，防抖函数 debounce，以及各自如何在 React 项目中进行应用，今天这篇文章主要聊聊 Lodash 中防抖和节流函数是如何实现的，并对源码浅析一二。下篇文章会举几个小例子为切入点，换种方式继续解读源码，敬请期待。 有什么想法…"}, {"id": "6965486801574166559", "title": "vue2和vue3 核心 diff 算法区别", "desc": "vue2 核心 diff 算法 采用的是双端比较算法 vue3 核心 diff 算法采用的是去头尾的最长递增子序列算法 本文主要分析下vue3的 核心 diff 算法 最长递增子序列 这是一道经典的算"}, {"id": "6971032101554487310", "title": "JavaScript 代码逻辑判断的优化", "desc": "千里之行始于足下，编写高可维护性和高质量的代码，我们就需要从细节处入手，我们今天主要讨论 JavaScript 中如何优化逻辑判断代码。"}, {"id": "6973500209024204837", "title": "装饰器模式", "desc": "装饰器模式是一种可以为函数或类增添特性的代码实现方式。 可以在不修改原有对象的基础上，为其增添新的属性和方法。 网上有一个很好的例子解释为什么需要装饰器模式。假设有一个自行车商行，它要求店内的自行车根"}, {"id": "6844903918183383053", "title": "掘金排行前5000大佬 | 掘金文章排行 看这里", "desc": "文章教你如何做掘金站内数据抓取，数据解析，最后形成排序后的排名。 项目起因是我突然想看看掘金站内有哪些优质作者，为了不错过每一个大佬，我选择直接抓取站内所有的文章信息找到作者并进行排名。各位关注 + 文章阅读 一条龙走起！ 构建小顶堆，不断往堆中添加数据，比堆顶小的直接抛弃，比…"}, {"id": "7000644722159157284", "title": "《你所不知道的JavaScript》读书笔记（二）：this指向问题", "desc": "这篇文章是《你所不知道的JavaScript》读书笔记系列文章的第三篇文章。在这篇文章中，我们来聊一聊JavaScript中一个比较坑的问题：this的指向问题。"}, {"id": "6995839084862111752", "title": "我是如何把用JS实现的数据结构上传至npm并使用的", "desc": "npm给我们的日常开发带来了很大的便利，了解npm发布流程对于一个前端来说还是非常有必要的，希望这篇文章能给不了解npm发布流程的小伙伴一些帮助。"}, {"id": "6986850826903879687", "title": "图解 JavaScript 数组方法", "desc": "JavaScript 数组方法，经常用到的大概 10 个左右，在文章《JavaScript 数组操作必须熟练运用的10个方法》中用文字和代码介绍了各个方法的使用，本文就不做太多的介绍，本文将通过图解析"}, {"id": "6916316666208976904", "title": "JS Bridge 通信原理与实践", "desc": "上一篇介绍了移动端开发的相关技术，这一篇主要是从 Hybrid 开发的 JS Bridge 通信讲起。 顾名思义，JS Bridge 的意思就是桥，这是一个连接 JS 和 Native 的桥接，也是 Hybrid App 里面的核心。一般分为 JS 调用 Native 和 Na…"}, {"id": "7004110797982924807", "title": "this的指向问题一篇搞定，执行上下文，作用域", "desc": "this指向五种类型（对象，全局对象，实例对象,动态指向（call,apply），无对象）；执行上下文；作用域，"}, {"id": "6955081218723414029", "title": "5个 Chrome 调试混合应用的技巧", "desc": "对前端开发人员来说，Chrome 真是一个必备的开发工具，大到页面展示，小到 BUG 调试/HTTP 抓包等，本文我将和大家分享自己做混合应用开发过程中经常用到的几个调试技巧。"}, {"id": "6844903597092651015", "title": "重构 - 改善代码的各方面问题", "desc": "做前端开发有一段时间了，在这段时间里面，对于自己的要求，不仅仅是项目能完成，功能正常使用这一层面上。还尽力的研究怎么写出优雅的代码，性能更好，维护性更强的代码，通俗一点就是重构。这篇文章算是我一个小记录，在此分享一下。该文章主要针对介绍，例子也简单，深入复杂的例子等以后有适合的…"}, {"id": "7004732297471754253", "title": "JavaScript 性能优化", "desc": "1、JavaScript 性能优化 概述 随着软件开发行业不断的发展，性能优化是不可能避免的，什么的内容可以看到是性能优化？解释：本质上来说，任何一种可以提高运行效率的，降低运行的开销的的行为； 在软"}, {"id": "6997980474530676772", "title": "if条件语句块内，请慎用关键字声明函数（剖析if语句的函数声明问题）", "desc": "几个月前在学习群里看到一个伙伴的提问，但是由于其他大佬讨论别的问题，导致没有人回答他，所以我选择自己研究，查阅资料，然后给他解答，同时写下了这篇文章放在自己的博客上。今天一个朋友又向我问出同样的问题。"}, {"id": "6844904004007231496", "title": "精读《unstated 与 unstated-next 源码》", "desc": "unstated 是基于 Class Component 的数据流管理库，unstated-next 是针对 Function Component 的升级版，且特别优化了对 Hooks 的支持。 与类 redux 库相比，这个库设计的别出心裁，而且这两个库源码行数都特别少，与 …"}, {"id": "6844903971295854600", "title": "通过定时器、时间分片、Web Worker优化长任务", "desc": "js 是单线程语言，它的作用主要用于操作DOM。 js执行也非常简单（从上往下执行），但 js 里也有异步方法，比如 xhr 、 setTimeout 等等。 setTimeout 的作用是：将当前任务推入任务队列，当主线程同步的代码执行完成后判断 setTimeout 设置的…"}, {"id": "6965482913857028127", "title": "ES6模块化import export的用法", "desc": "export default/export/import, 模块化语法竟然还有这种用法?奇怪的知识又增加了"}, {"id": "6844904050408816653", "title": "swiper.js简单快速实现轮播滑动（兼容PC端、移动端）", "desc": "1.首先需要在head头部加载插件，需要用到的文件有swiper.css和swiper.js文件。可下载swiper文件或使用CDN远程加载 在实际的web开发中，总是需要兼容PC跟移动端，如果使用原生js自己写的话，不仅耗时，可能兼容性、稳定性也不好，特别是移动端的touch…"}, {"id": "6961981517090258951", "title": "js遍历数组篇（二）-遍历数组的各种方法", "desc": "forEach for-in/for-of reduce map filter every some"}, {"id": "6844904032507559944", "title": "这道JS笔试题你做对了吗？", "desc": "面试官：请实现三栏布局，尽可能多的方式。 昨天在看一道笔试题的时候本以为很简单，但是结果不是我想象的那样，直接上笔试题。 我第一个想到的是new Array(5)生成的数组是[undefined, undefined, undefined, undefined, undefin…"}, {"id": "7001838103845404680", "title": "BOM和DOM元素", "desc": "浏览器的相关操作 获取浏览器相关的一些信息：navigator 所有操作地址栏相关的信息 都是在 bom的 location里 操作地址栏的相关信息"}, {"id": "6971567246174846989", "title": "提升对前端的认知，不得不了解Web API的DOM和BOM", "desc": "了解Web API的DOM和BOM 在现代的开发中，vue和react都是很流行的开发框架，框架虽好用，但是框架的原理还是基于 DOM 操作去实现。"}, {"id": "7001856785027956750", "title": "JS实现归并排序和快速排序", "desc": "归并排序（稳定算法） 思路 先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起。 复杂度 时间 O(nlogn) 空间 O(n) 实现 快速排序（非稳定算法） 思路 "}, {"id": "6844904200900460558", "title": "拒绝水货 | 除了解决边距重叠，BFC还可以这么用", "desc": "划重点： 本文所有示例均为手打html示例，可以直接选中示例在控制台调试，方便验证各种想法。手敲不易，如果你觉得示例调试方便，那我在此求个赞～ 外边距重叠就是 margin-collapse。相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。 …"}, {"id": "6844903853528186888", "title": "老铁，听说TypeScript很牛逼？", "desc": "TypeScript是啥，有人说TypeScript = Type + Script，实际我觉得更准确的应该是TS = Java(JS)或者 TS = C#(JS)，使用Java/C#的语法写JS，并且为了能让JSer能更容易接受，它的语法又不能直接把Java/C#的那套搬过来…"}, {"id": "6907817041458593805", "title": "如何将代码部署到腾讯云网站静态托管", "desc": "当您使用 vue.history 模式时，需要在静态网站-设置栏中配置错误页面为 App 依赖的页面。 Windows 系统中 localPath 为本地路径形式，是系统可以识别的路径，通常使用 \\ 分隔符。cloudPath 是云端文件路径，均需要使用 /分隔符 ⒊ 静态网站…"}, {"id": "6844903517426024461", "title": "vue插件开发练习--实用弹窗", "desc": "上回说了组件（vue组件开发练习--焦点图切换）的一个练习项目，这次换下口味，说下vue的插件练手的项目。相对于现在之前的焦点图切换的组件，这个可能就更简单了，基本就是熟悉下插件开发的步骤就可以了！这个项目，我更建议大家动手练习了，这个弹窗比之前的焦点图更加的实用性，也更常用。…"}, {"id": "6998013792281952293", "title": "Electron+Vue实现连接本地mysql(思路-简单实现)", "desc": "实现原理： electron基于原生node可以与本地的数据库相连接 electron通过ipc通信机制，可以让主进程与渲染进程进行通信 通过通信机制进行数据传递在页面控制台打印"}, {"id": "6970469489938792455", "title": "剖析作用域和闭包，浅析函数柯里化", "desc": "js基础知识中的作用域和闭包 作用域和闭包是前端再基础不过的知识了！我们平常所写程序中很多都不一定是平铺的，有很多复杂的逻辑和函数以及模块之间的联系"}, {"id": "6970356106417668133", "title": "前端学习笔记-正则表达式", "desc": "相关符号的含义 图片总结 正则表达式的组成 其中pattern(模式)是正则表达式的主体。flags(标记)，用于控制正则表达式的行为。flags的取值有以下几种 g：全局模式，表示查找字符串的全部内"}, {"id": "6914186870687694855", "title": "防抖与节流", "desc": "在JavaScript中，函数的防抖和节流不是什么新鲜话题，与之对应的文章也数不胜数，但是看再多都不如自己亲自做一遍，写一遍来的通透一些。本人在这之前对防抖和节流一直处于一个比较朦胧的印象，正好这次用到了，写下此文予以记录两者区别。 1秒内。只要有新的触发产生：从0开始计时。 …"}, {"id": "6987677725699866660", "title": "javascript实现链表", "desc": "javascript本身是没有内置链表的，但是我们在理解了链表的思路后，可以封装一个可实现俩表操作的插件，这样可以帮助我们更好的理解javascript。"}, {"id": "6994301742225555493", "title": "Vue中下载文件", "desc": "VUE 一个按钮下载一个或多个文件 下载一个文件 下载一个文件时，用a标签点击即可实现 下载多个文件 下载多个文件时，需要将要下载的链接放到一个数组内"}, {"id": "6996539672776163336", "title": "SASS使用指南（三）", "desc": "混合器传参 我们既然说了，混合器就像一个 “函数” 一样，那么就一定可以像 “函数” 一样传递参数 和 “函数” 的使用方式一样，在定时的"}, {"id": "6992004591587950629", "title": "JavaScript 系列之原型（一）", "desc": "[JavaScript 系列之原型｜ 8月更文挑战 ]连更数天带你学会 JavaScript 基础。"}, {"id": "6844903671742857229", "title": "前端跨域方法论", "desc": "本着学习和总结的态度写的技术输出，文中有任何错误和问题，请大家指出。更多的技术输出可以查看我的 github博客。 整理了一些前端的学习资源，希望能够帮助到有需要的人，地址： 学习资源汇总。 跨域指的是协议（protocol ），域名（host），端口号（post）都不相同的资…"}, {"id": "6995931562021748744", "title": "JavaScript 类型转换", "desc": "在 JavaScript 中有 6 种不同的数据类型： string number boolean object function"}, {"id": "6844904003113844749", "title": "快速上手网易云音乐可视化", "desc": "下面，我将分析一个来自云音乐技术团队的音频可视化开发案例，快速帮助小白，制作自己喜欢的炫酷的音频可视化界面。 canvas是HTML5中用于图形绘制的容器元素，它通常通过JavaScript脚本来完成图形绘制。要完成我们下面的音频可视化开发，我们可以借组结构canvas的几个方…"}, {"id": "6844903538011684877", "title": "去哪儿 Api 自动化测试实践", "desc": "越来越多的应用基于前后端分离构建，后端提供数据接口，前端调用接口返回 json 数据渲染到 UI，这个时候保证后端接口数据正确性变的愈来愈重要，接口测试就是来解决这个问题。很多团队，接口测试就是手动运行接口，肉眼比对接口返回的数据，这样的操作流程效率低下，容易出错。去哪儿移动架…"}, {"id": "6844903998873403406", "title": "【全栈修炼】CORS和CSRF修炼宝典", "desc": "CORS 和 CSRF 太容易混淆了，看完本文，你就清楚了。 1. 概念 核心知识： CORS是一个W3C标准，它允许浏览器向跨源服务器，发出XMLHttpRequest 请求，从而克服 AJAX 只能同源使用的限制。 因此，实现 CORS 通信的关键是服务器。只要服务器实现了…"}, {"id": "6929740282322026509", "title": "「长文警告⚠️」从 url 输入页面到页面展示到底发生了什么?（多方参考篇）", "desc": "最近掘金首页,有一篇文章阿里面试官的”说一下从url输入到返回请求的过程“问的难度就是不一样！刷屏了。 我内心 OS：现在面试都这么深了吗?非常恐慌,因为确实是我的短板。 但又能怎么办呢？知道不足就弥补呀。于是我马上开动,花了很长时间才写下这篇文章。 你可以看到,我在下方的参考…"}, {"id": "6993696888654397453", "title": "变量提升与暂时性死区(进阶必备知识)", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 let  和 const  相关的考题，若要就  let  和 const   关键字特性本身提问，确实很难考察出候选人的水平。但是，它们背"}, {"id": "6994438430407016462", "title": "浅析 JavaScript 数据类型——基本数据类型", "desc": "数据值是一门编程语言进行生成的材料，JavaScript 也不例外。JS 中的数据类型，是学习 JavaScript 的基础，主要分成两类：基本数据类型和引用数据类型。今天我们主要先了解下基本数据类型"}, {"id": "6844903934356619271", "title": "你真的知道0.1+0.2为何不等于0.3吗？", "desc": "还记得上面说的，1-24表示整数位，剩余的表示小数位吗？这种存储方式就叫定点数，1-24位每4位表示一个0~9的数字的话，可以有6位表示整数部分，剩余2位表示小数部分，这样我们可以用32位表示从0到999999.99这样1亿个实数，这种用2进制来表示10进制的方式，叫做BCD编…"}, {"id": "6980911368094515236", "title": "手把手实现一个HTML模板引擎", "desc": "想必前端的同学肯定接触过 HTML 模板语法，大多数可能都是以 {{ 的形式（Mustache 风格）去表示的，比如 Vue 的模板语法： 除了上面这种类型，还要一个叫做 ERB-style 的"}, {"id": "6995458204700246030", "title": "【可视化】echarts折线图缩放和平移", "desc": "背景 场景是一个任务的完整执行后需要展示速度和时间曲线，当时间宽度很长时，数据点其实是很多的。这个时候就需要缩放了。 我一开始以为echarts不能做，后来一看还是有api的。很方便。 代码实现 先上"}, {"id": "6991666136991891486", "title": "如何写一个优秀的组件", "desc": "我之前用angularjs，当时的angular 1的版本，数据双向绑定成为一个亮点，也是人们诟病至今的一个问题。直到我遇到了react，非常欣赏react组件化编程的思路。可以使得复杂的大型应用碎片"}, {"id": "6844903549290151949", "title": "你的Tree-Shaking并没什么卵用", "desc": "Tree-Shaking这个名词，很多前端coder已经耳熟能详了，它代表的大意就是删除没用到的代码。这样的功能对于构建大型应用时是非常好的，因为日常开发经常需要引用各种库。但大多时候仅仅使用了这些库的某些部分，并非需要全部，此时Tree-Shaking如果能帮助我们删除掉没有…"}, {"id": "6983488526184939528", "title": "es6中 对象新增的方法", "desc": "对象中一些常用的方法，Object.assign方法用于对象的合并， Object.is(value1, value2);判断两个值是否相等"}, {"id": "6972008560070754318", "title": "JavaScript正则表达式", "desc": "正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法..."}, {"id": "6990980559111471117", "title": "用JavaScript截取浏览器屏幕成pdf文档", "desc": "一、先上效果用的是 html2canvas这个官方插件 上代码 主页代码 综上就是把浏览器当前页面转换成 pdf格式，如有不懂留言为您解答 最后附上html2canvas官网地址： http://ht"}, {"id": "6972051526416072717", "title": "JavaScript异步发展历史", "desc": "作者将以实际样例阐述异步发展历史，介绍每种实现方式的优势与不足，以期帮助读者熟悉历史进程并把握异步发展的脉络。"}, {"id": "6991780011246092296", "title": "Webpack配置-其他资源加载以及处理（图片、字体、文件等）", "desc": "在 webpack5之前加载资源文件一般会是用 file-loader、url-loader、raw-loader等，但是在webpack5之后可以直接使用资源模块类型（asset module ty"}, {"id": "6844904183582162957", "title": "新手也能看懂的虚拟滚动实现方法", "desc": "本篇文章致力于小白也能懂的虚拟滚动实现原理，一步一步深入比较以及优化实现方案，内容浅显易懂，但篇幅可能较长。 如果你只想了解实现思路，那么可以直接看图或者跳到文章最后。 话不多说，直接开始好吧。 想像一下，当你有10万数据需要展示的时候，咋办呢？我们来试一下将它全部加载出来。 …"}, {"id": "6994357583632924680", "title": "iframe子与父js通信方式", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 在写微前端时 登陆页是iframe来写的 登陆 这就需要iframe通信。"}, {"id": "6989171435675582494", "title": "TypeScript使用详解", "desc": "typescript安装，运行环境的搭建，以及各种类型使用方式，泛型、枚举、联合类型等等，还有模块的使用方式。"}, {"id": "6942037239064952869", "title": "解秘 Node.js 单线程实现高并发请求原理，以及串联同步执行并发请求的方案", "desc": "最近在做一个支持多进程请求的 Node 服务，要支持多并发请求，而且请求要按先后顺序串联同步执行返回结果。 对，这需求就是这么奇琶，业务场景也是那么奇琶。 需求是完成了，为了对 Node.js 高并发请求原理有更深一些的理解，特意写一篇文章来巩固一下相关的知识点。 Node.j…"}, {"id": "6930876951439605767", "title": "React组件库完整搭建流程（持续更新）", "desc": "在此之前我们需要在package.json文件里面添加一个发布的白名单，当然你也可以使用npmignore配置文件，这种事黑名单的方式，不太建议，容易遗漏。 git add . git commit git push 一条龙"}, {"id": "6850037282419392526", "title": "code-review之前端代码优化", "desc": "所谓无规矩不成方圆，前端时间在团队 code-review 中发现，不同时期不同开发人员写的代码可谓五花八门。因此我们提出了一些相关代码方面的规范，希望日后能形成团队的编码规范。 本文主要针对一些 JavaScript 进行优化，使之更加健壮，可读性更强，更以维护。 JavaS…"}, {"id": "6844903862306865165", "title": "我还没搞懂 JS 中 this 指向及继承，直到有人向我这样解释它", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 我们会发现 obj已经有几个属性（方法）了。那么问题来了：valueOf/toString/constructor 是怎么来？我们并没有给 obj.valueOf 赋值呀。 答案： 这跟 __proto__有关…"}, {"id": "6993235837580214308", "title": "ES6中的解构赋值", "desc": "ES6中的“解构赋值” 主要针对对象和数组,左侧定义和右侧值类似的结构,这样声明几个变量,快速获取到每一部分的信息. 数组解构赋值 结果为: 结果为： 结果为： 结果为： 需求:变量交换值，a和b交换"}, {"id": "6995926592887193631", "title": "利用 Gitlab CI/CD + Jenkins 实现自动构建，自动部署", "desc": "本来只是想用curl去模拟触发部署静态资源的请求的。后来想到如果把这个操作交给gitlab操作岂不是更方便？ 所以这几天折腾了一下gitlab的CI/CD,读了一些gitlab的官方文档，完善..."}, {"id": "7005779192478433294", "title": "JS 解决移动端浏览器(Safari、Alook...)无法禁止缩放问题", "desc": "移动端 web 缩放有两种：双击缩放、双指手势缩放。 在 iOS 10 之前，iOS 和 Android 都可以通过一行 meta 标签来禁止页面缩放： 但 iOS 10 开始，meta 设置在 Sa"}, {"id": "6844903598258651144", "title": "【大型干货】手拉手带你过一遍vue部分源码", "desc": "学会看package.json文件，就像你在使用MVVM去关注它的render一样。 既然$ npm run dev命令可以重新编译出vue.js文件，那么我们就从scripts中的dev开始看吧。 注意上面指令中的两个关键词scripts/config.js和web-full…"}, {"id": "6994420985021595662", "title": "new关键字到底做了什么", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 我们知道new可以产生对象，它是怎么做到的？ 今天就来看看new关键字到底做了什么，然后手动封装其功能 首先，我们应该知道new的基本作用是"}, {"id": "6992754058297622542", "title": "Javascript 的数据类型详解", "desc": "JS 数据类型是前端基本知识之一，也是面试过程中最常见的面试题目之一，当被问到相关的题目时，你是否只是笼统地介绍一遍各种类型呢，本篇文章带大家来详解 JS 的数据类型"}, {"id": "6992510837403418654", "title": "JavaScript 设计模式之代理模式", "desc": "代理模式是为一个对象提供 一个代用品或占位符，以便控制对它的访问。代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要时，提供一个替身对象来控制这个对象的访问，客户实际上访问的是替身对象。"}, {"id": "6979229986389491726", "title": "让你的JavaScript函数更加优雅", "desc": "这是我参与更文挑战的第19天，活动详情查看 更文挑战 准备写一个js技巧系列，主要就是总结js各种实用的小窍门、小妙招。本文主要是研究如何让我们的函数更清晰明了。"}, {"id": "6844903981999718407", "title": "React Concurrent 模式抢先预览上篇: Suspense the world", "desc": "2019.10.24, 在 React Conf 2019 首日， React 官方正式发布了关于 Concurrent 模式的第一个早期社区预览文档, 正式和 React 的大众开发者见面, 令人兴奋。 跟去年的 React Hooks 一样, 尽管 Concurrent 还…"}, {"id": "6844903954074058760", "title": "说说JS中的沙箱", "desc": "| 导语 其实在前端编码中，或多或少都会接触到沙箱，可能天真善良的你没有留意到，又可能，你还并不知道它的真正用途，学会使用沙箱，可以避免潜在的代码注入以及未知的安全问题。 沙箱，即sandbox，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创…"}, {"id": "6844904088119853063", "title": "简单通俗的理解Vue3.0中的Proxy", "desc": "什么是代理呢，可以理解为在对象之前设置一个“拦截”，当该对象被访问的时候，都必须经过这层拦截。意味着你可以在这层拦截中进行各种操作。比如你可以在这层拦截中对原对象进行处理，返回你想返回的数据结构。 ES6 原生提供 Proxy 构造函数，MDN上的解释为：Proxy 对象用于定…"}, {"id": "6844904131702833159", "title": "前端 Promise 常见的应用场景", "desc": "本篇将结合自身使用 ES6 Promise的情况，总结下Promise在我们项目开发中的常见的应用场景，当然，Promise 也许不是唯一选项，但是我们作为一个合格的前端开发人员，我们有必要了解它。 参数：一个可迭代对象，如Array。 如果传递的iterable为空，则是已经…"}, {"id": "6844903906217197581", "title": "什么时候不使用箭头函数", "desc": "为了保证的可读性，本文采用意译而非直译。 这些年来，ES6 将 JS 的可用性提升到一个新的水平时: 箭头函数、类等等,这些都很棒。 箭头函数是最有价值的新功能之一，有很多好文章描述了它的上下文透明性和简短的语法。 但每个事务都有两面。通常，新特性会带来一些混乱，其中之一就是箭…"}, {"id": "6996893383310442504", "title": "2021 Web Worker 需要了解的现状", "desc": "Web是单线程的,这让编写流畅又灵敏的应用程序变得越来越困难.Web Worker 的名声很臭，但对 Web 开发者来说,它是解决流畅度问题的 一个非常重要的工具。让我们来了解一下Web Worker"}, {"id": "6844903556839899144", "title": "JavaScript八张思维导图", "desc": "不知不觉做前端已经五年多了，无论是从最初的jQuery还是现在火热的Angular，Vue，React等前端框架，甚至是nodejs等服务端的兴起，归根到底，我始终觉着一切的核心还是JavaScript。于是最近就有了一个想法，想要梳理一下这些年学习以及使用JS的心得。 本系列…"}, {"id": "6844903764499906568", "title": "【进阶4-3期】面试题之如何实现一个深拷贝", "desc": "上篇文章详细介绍了浅拷贝 Object.assign，并对其进行了模拟实现，在实现的过程中，介绍了很多基础知识。今天这篇文章我们来看看一道必会面试题，即如何实现一个深拷贝。本文会详细介绍对象、数组、循环引用、引用丢失、Symbol 和递归爆栈等情况下的深拷贝实践，欢迎阅读。 其…"}, {"id": "6974171023025389576", "title": "Node 系列 - 004 - Inquirer.js", "desc": "经过 TypeScript 环境的搭建和 commander.js 的配合，我们现在可以通过 npm run xxx 来运行项目了，但是当命令太多了会记不住，所以就有了 Inquirer.js"}, {"id": "6900710763657166855", "title": "「硬核JS」令你迷惑的位运算", "desc": "位运算是大神专属？大多数人认为在写程序的过程中使用过多花里胡哨的位操作符对阅读体验是极其不好的，其实，假如大家都懂得位运算，那么这些骚操作就变成了常规操作，赶快来GET吧！"}, {"id": "6996255477122367501", "title": "面试题-JavaScript篇", "desc": "1. 数组（对象、字符串）的方法（必须背） 2. 数组的去重（适当背几个，会问） 3. Localstorage、session和Cookie的区别？（需要背诵，倒是没问到）   4. 重排和重绘（要"}, {"id": "6844903638440099853", "title": "地表最强面试图谱", "desc": "金九银十的秋招季近在眼前，想必大家也都心痒难耐，准备挑战更好的工作机会。那么，面试肯定是最大的挑战。 对于面试来说，平时的积累肯定是必须的，但是在面试前的准备也是至关重要的。 在几月前我个人组建了一个小团队，花了将近半年的时间寻找大厂的面试题，筛选出了近百个知识点然后成文，并全…"}, {"id": "7003639102251728903", "title": "再谈javaScript的事件循环模型", "desc": "# 并发模型与事件循环 JavaScript有一个基于**事件循环**的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。这个模型与其它语言中的模型截然不同，比如 C 和 Java"}, {"id": "6844904079320154126", "title": "Webpack优化总会让你不得不爱", "desc": "优化，就是加以改变或选择使优良，在工作当中是让提升效率的好办法。 1. 去除无用的样式 配置完毕了，上面包含了一些基本的配置。大家可以把重点放在注释为去除无用的样式代码部分即可了 2. 动态添加CDN 3. Tree-shaking 可想而知，副作用出现了，去dist目录下再看…"}, {"id": "6844904180428046343", "title": "小伙伴遇到这个问题说不想干前端了——一次Chrome翻译造成的玄学bug", "desc": "前排提示，现在掘金发文的时候有违禁词会发不出去。所以花了半小时发文章，反复使用二分法排除定位违禁词语，能发出去说明前面内容没问题，然后再加一点内容继续试。我还在发文章的时候，就看见200浏览了，给200个小伙伴道歉，那时候还在试敏感词中，文章内容不完整，现在已经好了，可以回头看…"}, {"id": "6998154127763046437", "title": "深入解析 EventLoop 和浏览器渲染、帧动画、空闲回调的关系[转载]", "desc": "前言 关于 Event Loop 的文章很多，但是有很多只是在讲「宏任务」、「微任务」，我先提出几个问题： 每一轮 Event Loop 都会伴随着渲染吗？ requestAnimationFrame"}, {"id": "6987641473470562334", "title": "可能不是史上最全但肯定能学会的 Ajax 教程", "desc": "Ajax 是 Web 开发中极其重要的概念，它的诞生推进 Web 世界进入到 2.0 时代。这篇文章从新手视角详细介绍了 Ajax 的发展历程和与之相关的各项技术。非常适合老手温故和新手知新。"}, {"id": "6981249055070355492", "title": "这些node开源工具你值得拥有(下)", "desc": "通过阅读 awesome-nodejs 库的收录，我抽取其中一些应用场景比较多的分类，通过分类涉及的应用场景跟大家分享工具 1.图形处理 🖼️ 1.1 应用场景1: 如何实现给图片做裁剪、格式转换、旋"}, {"id": "6976923843323494431", "title": "ES6 迭代器简述", "desc": "迭代器是一个统一的接口，它的作用是使各种数据结构可被便捷地访问，它是通过一个键为Symbol.iterator 的方法来实现。 -迭代器是用于遍历数据结构元素的指针（如数据库中的游标）。"}, {"id": "7000303653940641828", "title": "如何基于 Node.js 开发一个完整的项目", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 本文我们将围绕Node.js为核心，开发一个具有前端页面和后端存储的完整应用。"}, {"id": "6844903711660048398", "title": "弹幕，是怎样练成的？", "desc": "项目整体已经给出，那么我们就撸起袖子加油干吧。 上面我们提到了canvas的事情，所以呢，这就是制作弹幕的杀手锏了。我们利用canvas绘图来实现弹幕的功能 创建实例很简单，没有对象，只需要new一个就有了，哈哈。接下来，说回正事，我们赶紧完成上面代码中todo的部分，来完善C…"}, {"id": "6931590285101121543", "title": "在 2021 年你需要掌握的 7 种关于 JavaScript 的数组方法", "desc": "JavaScript 为我们提供了许多处理数组的不同方法。我们将在几分钟内为您介绍 7 个基本且常用的数据方法，以提高您的 JS 开发技能。 1. Array.map() 当你在数组上使用 map() 方法的时候，它将在原始的数组创建一个新的数组。 这个 map() 方法接受一…"}, {"id": "6844903633708908557", "title": "如何机智地回答浏览器兼容性问题", "desc": "有过面试经验的同学应该都被问过浏览器兼容性的问题，对于面试官的问题，常常猝不及防，因为通常他们都是这么问的。\"来谈谈浏览器兼容的问题吧\"，\"你对浏览器的兼容性有了解过吗\"，那么如何才是我们正确回答这个问题的姿势呢。 在CSS3还没有成为真正的标准时，浏览器厂商就开始支持这些属性…"}, {"id": "7000771627663228942", "title": "【重温JS】巩固基础-构造函数 & 原型和原型链", "desc": "☆☆☆ 今天学习的内容: ( 原型和原型链 | 工厂模式 | 构造函数 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼! day27"}, {"id": "6844903809215365134", "title": "春招季如何横扫 Javascript 面试核心考点(基础版)？", "desc": "Javascript是前端面试的重点，本文重点梳理下 Javascript 中的常考知识点，然后就一些容易出现的题目进行解析。限于文章的篇幅，无法将知识点讲解的面面俱到，本文只罗列了一些重难点，如果想要了解更多内容欢迎点击我的博客。 根据 JavaScript 中的变量类型传递…"}, {"id": "6991752974896726052", "title": "手风琴式折叠卡片展示效果｜8月更文挑战", "desc": "背景 手风琴式折叠卡片展示效果，一般用于 展示图片、照片、文字 等等。其 主要特点 是：当我们点击任意一张照片时，那张照片像手风琴一样缓缓展开，其他照片像手风琴一样缓缓折叠起来"}, {"id": "6999513278229512200", "title": "🌈 JS 继承的7种方法，你学会了吗？", "desc": "💌 前言 在上一篇文章中我们讲解了原型链的机制以及原型相关的一些属性，而与原型链息息相关的就是继承了，为什么这么说呢？ 在《JavaScr"}, {"id": "6844903857135304718", "title": "你要的 React 面试知识点，都在这了", "desc": "摘要： 问题很详细，插图很好看。 React是流行的javascript框架之一，在2019年及以后将会更加流行。React于2013年首次发布，多年来广受欢迎。它是一个声明性的、基于组件的、用于构建用户界面的高效javascript库。 以下是面试前必须了解的话题。 声明式编…"}, {"id": "6994278510189625351", "title": "前端的小技巧与黑科技（干货）", "desc": "面试官：你在xx项目中有哪些亮点或是贡献亦或是小技巧？ 我：阿巴阿巴 卡！停一下，你是不是也有相同或者类似的经历？"}, {"id": "6844903874705227789", "title": "这儿有20道大厂面试题等你查收", "desc": "今年来，各大公司都缩减了HC，甚至是采取了“裁员”措施，在这样的大环境之下，想要获得一份更好的工作，必然需要付出更多的努力。 本文挑选了20道大厂面试题，建议在阅读时，先思考一番，不要直接看解析。尽管，本文所有的答案，都是我在翻阅各种资料，思考并验证之后，才给出的。但因水平有限…"}, {"id": "6992313934912946206", "title": "vue实现滑块拖拽校验", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 定义骨架，写html和css html部分 实现滑动拖拽校验 1. 在mounted里面，根据滑块宽度计算可拖动最大宽度以及监听手指的触摸和"}, {"id": "7003165795849076743", "title": "HTML <audio>  安卓手机 默认浏览器获取时长为 0", "desc": "音频标签 安卓获取时长为0的情况 公司在发行音频相关的NFT业务，在实体机测试阶段发现音频是 播放正常 的，但是音频的总时长是获取不正常的，总是为0:00??? 安卓中无效代码 苹果有效，安卓总是为0"}, {"id": "6981743275082252295", "title": "依赖反转 + 迭代器思想，实现setTimeout面向next编程", "desc": "setTimeout, requestAnimationFrame是我们常用的定时器，我们一起基于依赖反转，使用迭代器模式，让他们到幕后去唱征服。"}, {"id": "6844903951486156813", "title": "前端开发中79条不可忽视的知识点汇总", "desc": "过往一些不足的地方，通过博客，好好总结一下。 一些通用的js库或者是css样式库，如jQuery，在网络中的使用是非常普遍的。当一个用户在浏览你的某一个网页的时候，很有可能他已经通过你网站使用的CDN访问过了其他的某一个网站，恰巧这个网站同样也使用了jQuery，那么此时用户浏…"}, {"id": "7003251866171604999", "title": "这一次，彻底搞懂闭包", "desc": "什么是闭包？ 为什么需要闭包？ 闭包的应用场景 场景一：立即执行函数 场景二：模拟块级作用域 场景三：封装私有变量 闭包解决了什么问题？（闭包的作用） 闭包可以缓存上级作用域，使得函数外部打破了函数作"}, {"id": "6989044564262649864", "title": "我的掘金前端周刊 第五周 7月19日-7月25日", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。欢迎关我的掘金前端周刊专栏。"}, {"id": "6844904126246027278", "title": "10种跨域解决方案（附终极大招）", "desc": "嗯。又来了，又说到跨域了，这是一个老生常谈的话题，以前我觉得这种基础文章没有什么好写的，会想着你去了解底层啊，不是很简单吗。但是最近在开发一个 「vscode 插件」 发现，当你刚入门一样东西的时候，你不会想这么多，因为你对他不熟悉，当你遇到不会的东西，你就是想先找到解决方案，…"}, {"id": "7002465230353596452", "title": "让你眼前一亮的10大前端资源周刊", "desc": "推荐收藏的业界10大高质量前端资源周刊涵盖前端各个方面包括nodejs, react, flutter,deno, react native等.强烈建议收藏"}, {"id": "6910943445569765384", "title": "RxJS——给你如丝一般顺滑的编程体验（篇幅较长，建议收藏）", "desc": "怀着对于RxJS这项技术的好奇，笔者花了数天时间研究了这项技术，并肝了一包枸杞才完成这篇文章的撰写，属实不易。不过也正是通过这段时间的学习，我发现这项技术在一定程度上可以解决我在日常业务中遇到的一些痛点，以及有种想马上应用到自己的新项目中的欲望，的确这种以数据流的理念来管控大型…"}, {"id": "6844904194919366669", "title": "JS数组奇巧淫技", "desc": "前段时间接手一个项目，逻辑晦涩难懂，代码庞大冗余，上手极其困难。很大的原因就是数组方法使用不熟练，导致写出了很多垃圾代码，其实很多地方稍加改动就可以变得简单高效又优雅。因此我在这里总结下数组的常用方法和奇巧淫技（奇巧淫技主要是reduce~）。 数组操作首先要注意且牢记spli…"}, {"id": "7004648219913224200", "title": "图解算法js篇|数组排序1-冒泡排序", "desc": "冒泡排序（Bubble Sort） 冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行"}, {"id": "6996876666383368205", "title": "老生常谈之深浅拷贝", "desc": "前言 在聊深浅拷贝之前，先复习一下JS中的数据类型：基本类型和引用类型。 基本类型： undefined null Boolean String Number Symbol .... 引用类型： Ob"}, {"id": "7005587385752748069", "title": "【面试题库】记录（二）", "desc": "一、com 1 xiang wang 1. Vue响应式原理 Vue官网- 深入响应式原理 1） 检测变化的注意事项 1.1) 对于对象 对于已经创建的实例，Vue 不允许动态添加根级别的响应式 pr"}, {"id": "7007320257140359199", "title": "第七章 数组（上）", "desc": "前言 凡此皆编以号，其怪兽为零。 ---X星统制官，《哥斯拉之怪兽大战争》 JavaScript的数组几乎就是对象，它们仅有四处不同。"}, {"id": "7002107561801416740", "title": " 什么是webSocket？怎么使用webSocket中的第三方socket.io包", "desc": "http 协议 http中文意思: 超文本传输协议, 定义服务器和客户端的传送格式,由于 http 是一次请求对应一次响应，无法达到即时通信的效果，所以在后面的 html5 中提出了一个新的协议..."}, {"id": "6963048982079602696", "title": "Vue 源码解读（11）—— render helper", "desc": "在 Vue 编译器的基础上，进一步深入理解一个组件是如何通过这些运行时的工具方法（render helper）生成 VNode 的"}, {"id": "6844903625618096141", "title": "JS基础知识（覆盖JS基础面试题）", "desc": "总结一些前端基础的知识，有些知识可能在前端面试的时候会问到，所以做个记录，也有助于其他人查看，如果有什么问题，可以指出，会积极修正。 喜欢的小伙伴点个赞吧，感觉对身边人有帮助的，麻烦动动手指，分享一下。非常感谢各位花时间阅读完，同时很感谢各位的点赞和分享。"}, {"id": "6921593620680802311", "title": " 我终于弄懂了Promise", "desc": "对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、resolved（已成功）和rejected（已失败） 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为res…"}, {"id": "6998813107019579406", "title": "再说面向对象（2）", "desc": "在上一篇文章中我从一个更深的层次介绍了对象（注：建议阅读 再说js中的面向对象（一）），了解了对象属性的属性。那么今天我们开启第二个阶段，面向对象的封装。封装是真正意义上的面向对象"}, {"id": "7002185048241733646", "title": "JS 模块化专题 [ 7K字总结 ! ]", "desc": "JS 模块化，CommonJS，AMD，ES Module，循环依赖，动态加载，Webpack，模块化开发，Javascript Module，Node.js Module，模块化规范，模块化开发"}, {"id": "6992040111646965768", "title": "js文件读取FileReader | 8月更文挑战", "desc": "FileReader FileReader类型实现的是一种异步文件获取机制。 FileReader有一下几种方法 FileReader.abort() 中止读取操作。在返回时，readyState属性"}, {"id": "6934860872704032781", "title": "理解数据结构之Set，只要5分钟！", "desc": "初衷： 最近在读《深入理解Es6》这本书，之前没好好全面学过Es6语法，也是趁着不忙的阶段重新好好研究一下整理一下笔记分享给大家，不喜勿喷。 适合人群：前端初级开发，大佬绕道。 在Es6之前，数组一直是JavaScript中唯一的集合类型，不过有一些开发者们认为非数组对象的也是…"}, {"id": "6844903653795446792", "title": "前端er怎样操作剪切复制以及禁止复制+破解等", "desc": "有时候我们经常会碰到这些场景：玩掘金、知乎的时候复制一段文字，总是会在内容后面加上一些版权信息，以及像小说网站等都有禁止选中，禁止复制这种功能，还有点击自动复制账号的功能。 我也经常遇到这些场景，有时候会去想这后面到底是怎么做，周末趁着有空去研究了一下，然后发现这些都跟操作剪贴…"}, {"id": "6998946159259549727", "title": "客户端存储技术——Cookie", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 客户端存储技术——Cookie HTTP是无状态的，即它不会记住用户的操作，这会让我们在记住用户状态（如登录信息、个人偏好等）等场景被限制"}, {"id": "6999441916379004936", "title": "webpack造轮子开篇：轮子架构", "desc": "通过再造一个简易的webpack轮子，能够更清晰的跟随webpack作者们的思路，对自己的功力有很大的提升，同时也能够更辩证的看待任何一个框架。"}, {"id": "6987328855878926366", "title": "浅谈图的层次布局", "desc": "简介 图是一种常见的数据结构和表示形式，可视化场景也经常会用到图来展现有关联关系的数据。进行图的可视化时，往往需要将其自动布局，而针对不同的问题和场景，需要不同的布局方法。"}, {"id": "6998785780353237000", "title": "小白也能看得懂的JS基础之var  let  const的使用", "desc": "小白也能看得懂的JS基础之var let const的使用 let 声明的变量会形成暂时性死区，在这个块作用域内用 let 声明的变量，都不可以再重复声明，也不能在声明之前使用。"}, {"id": "6844903619758669831", "title": "44 道 JavaScript 难题（JavaScript Puzzlers!）", "desc": "这是一套很经典的JavaScript题了，做之前一些题我也觉得稀奇古怪，但一道一道做，记下错题，去查解释，做完感觉真的很值得，有点像回到高中时候，就想到了沙耶加。如果在学习路上疲惫了，安利你们《垫底辣妹》 。 1. [\"1\", \"2\", \"3\"].map(parseInt) 2…"}, {"id": "7000950011756281892", "title": "前端面试js高频手写大全", "desc": "在前端面试中，手撕代码显然是不可避免的，占很大的一部分比重。本文涵盖了前端面试常见的各种手写题目，大部分都是自己找实习、秋招时遇到的。"}, {"id": "6914415245360365582", "title": "你必须理解的 JavaScript 知识 —— 变量、作用域、内存", "desc": "相比于其它语言，JavaScript 的变量是松散类型的，变量的值和数据类型在脚本生命周期内可以任意被改变。这很强大，但也会带来不少问题。 ECMAScript 包含两种类型的数据：原始值和引用值。原始值就是最简单的数据，引用值则是有多个值构成的对象。 原始值包括 Undefi…"}, {"id": "6891543579907325965", "title": "使用纯JS还原小时候游戏厅里的水果机", "desc": "在线试玩开发准备pixi.min.jssound.jstweenlite.js界面搭建绘制方形转盘界面按钮界面定义按钮顺序绘制按钮音效算法随机一个结果转动起来控制概率绝对不让你赢的方法只让你赢最小的奖"}, {"id": "6986958846082154504", "title": "【原理分析】Mock.js：我是如何“科学造假”的", "desc": "Mock.js 主要做了两件事：生成随机数据，拦截 Ajax 请求。本文将从这两个方面，深入源码，逐步分析 Mock.js 的工作原理。"}, {"id": "6984615237819318279", "title": "微信小程序获取某个元素的高度宽度", "desc": "获取小程序的元素高度和宽度，得在js页面使用this下的height: rect.width + 'px' 看下代码js页面 //创建节点选择器 var query = wx.createSe"}, {"id": "6994075291190558751", "title": "Canvas 动画之边界与摩擦力", "desc": "我们在先前的文章中介绍了大量的基础知识，已经学会了如何使用 canvas 绘图 API 绘制图形，并使其在各种里的作用下运动。然而真实世界存在着边界，本篇文章将围绕以下两个方面来进行学习和讲解。"}, {"id": "6987675868361392136", "title": "用 async/await 实现异步编程(上)", "desc": "在 ECMAScript 2017 中， JavaScript 语言中新增了 async 函数和 await关键字，其本质是 promise 的语法糖，使异步代码更容易实现，同时也提升代码可阅性。"}, {"id": "6844904030221631501", "title": "TS in JS 实践指北", "desc": "不知道有多少 TS 爱好者哀叹过这个问题：虽然我很想用 TS，奈何老大只让用 JS。今天我，告诉你，在 JavaScript 中也可以很流畅的使用 TypeScript ，而且你的老大不会找你的麻烦。 很多同学在看了《ts安利指南》后，评论说道：\"TS 虽然香，奈何我们老大没兴…"}, {"id": "6844904062920425485", "title": "JavaScript优雅写法及骚操作", "desc": "1. 生成随机ID 2. 每秒更新当前时间 3. 生成随机 16 进制 颜色 码 如 # ffffff 4. 返回键盘 5. 优雅的取整 7. 五种方法实现值交换 8. 实现深拷贝 9. 去掉小数部分 10. 递归求阶乘 11. 打印试试 12. console美化"}, {"id": "6844903870154588168", "title": "生动形象解释forEach、filter、map、some、every、find、findIndex、reduce间的区别", "desc": "从最开始学的for循环遍历方法，到后来层出不穷的各种遍历方法，其实最大的区别就是应用场景的不同。 我们最需要记住的就是，什么情况下用哪一种方法比较合适。"}, {"id": "6844904018129453070", "title": "单元测试从零开始，包含 Vue 及 React 项目中该如何单测", "desc": "有兴趣的可以了解一下，目前还在写作中。 单元测试是用来测试程序中一小块功能的，比如说一个函数、一个类。它能很显著地提高项目的代码质量，降低出现 Bug 的频率，并且也利于维护代码。 但是实际情况是绝大部分开发者是不愿意做这件事情的。因为平时开发都忙不过来，哪还有时间去做这些事情…"}, {"id": "6979943014856671245", "title": "纯JS实现翻页动画效果", "desc": "大家好，我是隐冬，今天用原生js给大家写一个翻页的效果。 首先完成页面的静态布局。 html里面很简单，只有一个ul标签和一个button按钮。ul中的li是通过js动态生成的。 js先获取页面中的u"}, {"id": "6953256240969760781", "title": "深入理解立即执行函数", "desc": "立即执行函数常用于第三方库，它可以用来隔离变量作用域，很多第三方库都会存在大量的变量和函数，在ES5环境下为了避免变量污染，开发者想到的解决办法就是使用立即执行函数。 本文就跟大家分享下立即执行函数"}, {"id": "6994084446022402056", "title": "手动封装字符串新增方法", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 在ES6之前，字符串拼接工作都是直接使用\"+\"进行拼接的，当数据复杂或者要拼接的东西很多时，都会觉得比较麻烦。ES6出来后，使用``字符串模"}, {"id": "6948752328715403300", "title": "浅探 Web Worker 与 JavaScript 沙箱", "desc": "自从 2014 年 HTML5 正式推荐标准发布以来，HTML5 增加了越来越多强大的特性和功能，而在这其中，工作线程（Web Worker）概念的推出让人眼前一亮，但未曾随之激起多大的浪花，并被在其随后工程侧的 Angular、Vue、React 等框架的「革命」浪潮所淹没。…"}, {"id": "6997967642787053604", "title": "web技术分享| 实现WebRTC多个对等连接", "desc": "流程简介 通过MediaDevices.getUserMedia()获取音频和视频轨道。 通过createOffer()启动与远程对等方的新 WebRTC 连接。 用信令通信上传错误并控制启动或关闭会"}, {"id": "6998853527191683108", "title": "JavaScript 中循环之间的差异", "desc": "在 JavaScript 中使用循环时，需要正确定义两个关键内容：可枚举属性（enumerable properties）和可迭代对象（iterable objects）。 可枚举的属性 可枚举对象的"}, {"id": "7002533439572295694", "title": "原型和原型链", "desc": "`__proto__`和`constructor`属性是**对象**所独有的</br> >`prototype`属性是**函数**所独有的"}, {"id": "6992403612366290980", "title": "模块化考古｜8月更文挑战", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 前言 前端模块化的概念在技术论坛是个老生常谈的话题。什么CommonJS、AMD、CMD、UMD、ES6模块化等都能扯一点，但大多囫囵吞枣。"}, {"id": "6844904000043614222", "title": "如何对 React 函数式组件进行优化", "desc": "本文只介绍函数式组件特有的性能优化方式，类组件和函数式组件都有的不介绍，比如 key 的使用。另外本文不详细的介绍 API 的使用，后面也许会写，其实想用好 hooks 还是蛮难的。 有过 React 函数式组件的实践，并且对 hooks 有过实践，对 useState、use…"}, {"id": "6844903798658318343", "title": "PNG图片压缩原理解析", "desc": "今天凌晨一点，突然有个人加我的qq，一看竟然是十年前被我删掉的初恋。。。。 因为之前在qq空间有太多的互动，所以qq推荐好友里面经常推荐我俩互相认识。。。。谜之尴尬 同意好友申请以后，仔细看了她这十年间所有的qq动态和照片。 她变美了，会打扮了，以前瘦瘦的身材配上现在的装扮和妆…"}, {"id": "7002886312441643039", "title": "学习javascript中的运算符", "desc": "学习javascript中的运算符 运算符 运算符通常用于算数表达式，逻辑表达式，赋值表达式，比较表达式，属性访问等等表达式运算。 运算符是有计算优先级的，先计算优先级高的。 下表从高到低列出了几乎所"}, {"id": "6844903710410162183", "title": "ES6 系列之 defineProperty 与 proxy", "desc": "ES5 提供了 Object.defineProperty 方法，该方法可以在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。 虽然我们可以直接添加属性和值，但是使用这种方式，我们能进行更多的配置。 函数的第三个参数 descriptor 所表示的属性描述…"}, {"id": "6844903504276881422", "title": "无头浏览器 Puppeteer 初探", "desc": "我们日常使用浏览器的步骤为：启动浏览器、打开一个网页、进行交互。而无头浏览器指的是我们使用脚本来执行以上过程的浏览器，能模拟真实的浏览器使用场景。 本文主要介绍 Google 提供的无头浏览器(headless Chrome), 他基于 Chrome DevTools prot…"}, {"id": "6994732120174247943", "title": "cookie、localStorage 和 sessionStorage 的使用以及区别", "desc": "有关数据的储存方式，这里就cookie、localStorage 和 sessionStorage的使用以及异同做简单理解"}, {"id": "6991469463564451870", "title": "前端技术总结｜ 8月更文挑战", "desc": "前端技术总结 原始类型 6种，分别为: boolean null undefined number string symbol 值得注意的点 其一、 原始类型是没有函数可以调用的 其二、 “1”为st"}, {"id": "7002784221810933797", "title": "for循环中关于var和let的区别", "desc": "for 循环中的 let 声明 在 let 出现之前， for 循环定义的迭代变量会渗透到循环体外 部： 改成使用 let 之后，这个问题就消失了，因为迭代变量的作用 域仅限于 for 循环块内部： "}, {"id": "6844903982867939342", "title": "umi-request 网络请求之路", "desc": "请求库各式各样，没有统一。 每次新起应用都需要重复实现一套请求层逻辑，切换应用时需要重新学习请求库 API。 各应用接口设计不一致、混乱。 前后端同学每次需重新设计接口格式，前端同学在切换应用时需重新了解接口格式才能做业务开发。 接口文档维护各式各样。 有的在语雀（云端知识库）…"}, {"id": "6994393639770128397", "title": "前端分享--ES6之类与继承（详解）", "desc": "类的声明与实例化 类的声明一般有两种方式 如何实现继承 实现继承的方式主要有两种： 先看个了例子  输出结果 可以看到，生成Child1里面有了父级的属性name，实现了继承。为什么就实现继承了呢？ "}, {"id": "6877363975592345607", "title": "proxy监测属性变化", "desc": "监测属性变化的有 defineProperty 和 proxy。 但两者使用和局限并不一样。 proxy可以监测对象或数组，增删改查属性，但兼容性不好。 用法也不一样：proxy里操作的是对象。defineProperty操作的是一个变量值。这点特别注意。 之前写过define…"}, {"id": "6844903917524877325", "title": "代码提交git时自动格式化并通过ESlint检测", "desc": "在同一个项目中，一般都是几个人合作开发，每个人的代码风格不同，因此提交到git之前，需要统一下格式，因此才有了这篇文章，分享一下自己的配置过程。希望每个小伙伴都能规范自己的代码，如果你认为对你有帮助或者有小伙伴有更好的方法欢迎积极留言！"}, {"id": "6994380718000799751", "title": "JavaScript控制页面滚动位置", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 生产实际中产长有这样的设计：点击某横向栏的某个标签或链接，页面滚动到指定版块位置。如下图所示，为京东首页的一个设计，右侧栏列出的页面版块，随"}, {"id": "6844904126233444366", "title": "不用中间变量交换两个数，各种骚操作，一次玩个够", "desc": "近来看见一些群里面多次出现讨论不用中间变量交换两个数怎么做。虽然这是很古老的问题，大家懂的也懂。但实际上，方法会有很多种，我们一起来看看 如果是不用中间变量，那就是无var temp来辅助这个过程。刷算法题的时候，我们通常会看见一些题目有\"不借助额外空间\"的要求，实际上，不用中…"}, {"id": "6997312649977413640", "title": "html关联js缓存版本解决方案", "desc": "日常使用hml都知道，浏览器加载完页面后，页面不做任何缓存机制的处理话，会将静态数据缓存，下次打开速度就快很多，但平时涉及页面关联的js服务升级后，有可能关联的内容还是旧版本的，这个时候需要手动清除缓"}, {"id": "6844903744627277831", "title": "换个角度看 JavaScript 中的 (this) => { 整理 (JavaScript 深入之从 ECMAScript 规范解读 this ) }", "desc": "文中的 ES5 规范是参考 颜海镜大大 的译本，也在这里表示感谢。 那为什么还有这篇文章呢？因为很多的同学在冴羽大大的博客下评论没有看懂，我也是其中的一员，于是我决定要弄明白为什么，现在也把我的一些整理分享出来，希望对大家也有帮助。 再啰嗦一句，对于知道了各种情况下 this …"}, {"id": "6960119598024753165", "title": "关于JavaScript的继承", "desc": "ES6 class 继承 1. 类式继承 2. 构造函数继承 3. 组合继承 4. 原型式继承 5. 寄生继承 6. 寄生组合继承"}, {"id": "6900753697702313991", "title": "Rome：Facebook 最新 JS 工具上手 ", "desc": "北京时间 2020 年 2 月 27 日，Facebook 宣布其实验性 JavaScript 工具链 Rome 开源。Rome 是 Babel 和 Yarn 作者、React Native 团队成员 Sebastian McKenzie 的新作品。开源之前，Rome 基本上 …"}, {"id": "6930648689832624142", "title": "深入理解JavaScript垃圾回收", "desc": "如果大家有兴趣可以读原文，我在这里用我的话描述一下并增加一些扩展内容。 如有错误，感谢指正。🌟🌟 首先我们需要先知道什么是垃圾。 现在以及未来都不再被需要的物体就是垃圾。程序里也是一样的道理。 文章说了一个名词，叫做可达性。 也就是说你不再能够访问到它的数据，就是不可达的。…"}, {"id": "6844903859513458701", "title": "重学前端（8）封装ajax,http,跨域问题", "desc": "POST请求需要指定content-type属性。 同步: 指的就是事情要一件一件做。等做完前一件才能做后一件任务 异步: 不受当前任务的影响，两件事情同时进行，做一件事情时，不影响另一件事情的进行。 编程中：异步程序代码执行时不会阻塞其它程序代码执行,从而提升整体执行效率。 …"}, {"id": "6984390082975399950", "title": "再谈BOM和DOM(1):BOM与DOM概述", "desc": "DOM是为了操作文档出现的接口，浏览器向我们提供了当前网页的地图或者说模型，而我们可以通过js去读取这张地图对html元素进行查找及修改,BOM主要是处理浏览器窗口和框架，比如操作浏览器历史记录，获取"}, {"id": "6844904153265733640", "title": "这篇手写async函数及过程分析", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 其实本文怎么说呢，算不上是呆呆的纯原创吧，因为呆呆也是参考晨曦老哥的手写async await的最简实现（20行）来写的，包括案例啥的也是一样，哈哈不过大家请放心我也是经过原作者授权的，而且参考的这篇文章，对手写as…"}, {"id": "6917810024253227021", "title": "一文搞懂JS模块、模块格式、模块加载器和模块打包器", "desc": "目前现代化的JS开发方式大行其道。撸代码时，你可能也会不理解为啥要使用这些繁复的现代化工具。 接下来我们就来一起学习下js模块、模块化解决方案、模块加载器和模块打包器的区别。 本文的主要意图是帮大家快速理解现代前端JS开发的概念，并不会深入去探讨每种工具和模式。 模块是一块可复…"}, {"id": "6989112363412619272", "title": "一文读懂迭代器和生成器", "desc": "导读 读完本篇文章，你可以学到：迭代器和生成器的概念、作用和基本使用方法。 迭代器 迭代 迭代就是反复执行某一个步骤。 循环是迭代的基础，它可以指定迭代的次数，以及每次迭代要执行的操作。 每次循环都会"}, {"id": "6976457076688027684", "title": "从零开始学习3D可视化之拾取", "desc": "1、 通过属性和接口获取鼠标拾取（Pick）的物体 2、 通过事件获取鼠标拾取的物体 3、 区域 Pick 物体 4、 pickedResultFunc设置拾取对象回调函数 在开发数字孪生可视化场景应"}, {"id": "6844904103609368589", "title": "Javascript深层数组及对象扁平化", "desc": "有时候后台返回前端的数据结构嵌套层数过深，访问里面的属性的时候过于复杂，于是乎就有了深层数组及对象的扁平化方式。"}, {"id": "6862508677182685191", "title": "蒲公英 · JELLY技术周刊 Vol.18 关于 React 那些设计", "desc": "自从 iOS13 自带支持深色模式（dark mode）以来，就一直为大家所关注，仿佛支持深色模式已经成为现代移动应用和网站的一个潮流，这不得不证明 iOS 的影响力之强大。本文就 Web、APP、Flutter 如何来实现深色模式适配，进行了深入地剖析。其中 Web 适配最终…"}, {"id": "6850037273296109581", "title": "20个无库无框架的小型web项目(中文版)", "desc": "前一阵子看到了大火的github项目vanillawebprojects，对其中的实现有些好奇，于是研究了写法，但是对英文有些不太熟悉的我，无法忍受这样的纯英文项目，于是花了二周时间，潜心研究了项目的实现思路，然后自己实现了这20个web项目的中文版。虽然思路来源于原项目，但是…"}, {"id": "6844903541513912327", "title": "摧枯拉朽，说说ES6的三把火", "desc": "JavaScript 如今可谓是屌丝逆袭高富帅的代名词哈，从当初闹着玩似的诞生到现在 Github 上力压群雄的人气王，JS 搭着互联网的顺风车一路高歌，本身也从一个爷爷不疼奶奶不爱的杀马特小脚本蜕变为一门高大上的主流编程语言。运气固然重要，ES6 也让大家看到了这门语言自身的…"}, {"id": "6844904040472510471", "title": "Map 与对象之间的相互转换", "desc": "传入的数组参数，是由一个个键值对（[key, value]）组成的。这种创建方式，比使用 map.set 更加简洁和方便。 上面的一个个 [key, value] 又称为 entry。我们能行 entries 得到 map，那么也能从 map 得到 entries。需要使用 M…"}, {"id": "6844903496764915719", "title": "【 js 基础 】 setTimeout(fn, 0) 的作用", "desc": "1、浏览器的内核是多线程的，它们在内核控制下相互配合以保持同步，一个浏览器通常由以下常驻线程组成：GUI 渲染线程，javascript 引擎线程，浏览器事件触发线程，定时触发器线程，异步 http 请求线程。 GUI 渲染线程：负责渲染浏览器界面 HTML 元素,当界面需要重…"}, {"id": "6980347608724144142", "title": "JS唬住面试官拿高薪 一 基础篇", "desc": "第一章: JS数据类型之问——概念章 JS原始数据类型有哪些？引用数据类型有哪些？ 基本类型(值类型 原始值)，在JS中存在着 7 种，分别是： null undefined number strin"}, {"id": "6919854727471562765", "title": "浅谈javaScript的运行机制", "desc": "事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。 第一轮：主线程开始执行，先执行 console.log(),输出enent-loop。 遇到setT…"}, {"id": "6844903838336417805", "title": "记住这两点，彻底终结原型链吧", "desc": "2. 既是函数也是对象"}, {"id": "6987661731858219016", "title": "[js基础02]从作用域到变量提升", "desc": "从词法作用域的角度探究一下变量提升。通过多个例子分析变量提升的规则。探究函数提升规则，了解let、const与变量提升"}, {"id": "6992206281641721887", "title": "ES6 Array 之遍历数组的方法", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 ES6 Array 之遍历数组的方法：方法 简洁程度 对 break/continue 的支持 备注"}, {"id": "6995545696749223972", "title": "JavaScript的常用判断 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 一、如何判断是否是数组 1、使用ES6的新语法isArray 2、使用兼容的语法toString 二、null和undefined区别 1"}, {"id": "6987772068028743694", "title": "以简单话语总结call()、apply()、bind()", "desc": "总结了call()、apply()、bind()这三个函数的区别。这三个函数挺重要的，尽量以简单话语来写这篇总结。"}, {"id": "6992114997358755853", "title": "重学es6 - 第二部分 | 8月更文挑战", "desc": "这次我们讲一下数组以及对象的解构赋值,为什么需要模板字符串,带标签的模板字符串的使用场景,以及如何自己实现一个简易的模板字符串等内容, 大家可以一起进来复习一下~"}, {"id": "6844903591149322248", "title": "你真的了解JS数组的那些方法吗？", "desc": "数组的创建有三种方式：构造函数方式、字面量方式、ES6新增的Array.of()方法创建。 方法的作用是将一组值（即传进来的参数）转换为数组。 这个方法弥补了构造函数创建数组的不足。可以实现创建只有一个number类型元素的数组。 （一）. 原型上的方法 参数的类型可以是任意类…"}, {"id": "6975498235347468295", "title": "几种JS里常见的继承（原型链继承、构造函数继承和组合继承）", "desc": "JS里的继承有很多种， 此篇文章只举了三种普通常见的继承类型，希望能为读者日常的学习提供一定的帮助。"}, {"id": "6844904197612109838", "title": "递归的理解与实现", "desc": "我们在写业务代码的时候，或多或少都会遇到需要使用递归的场景，比如在遍历树形结构时。 本文将通过递归的经典案例：求斐波那契数来讲解递归，通过画递归树的方式来讲解其时间复杂度和空间复杂度以及递归的执行顺序，欢迎各位感兴趣的开发者阅读本文。 接下来我们通过一个实例来讲解递归的应用。 …"}, {"id": "6969576264151597070", "title": "Es6之模拟bind 和 new 的原理实现", "desc": "new 在js中我们都是通过， new 一个构造函数，获得实例的。然后这个实例就可以调用原型链上的方法。 new的实现其实很简单，简单的来说就做了4件事 创建一个新对象 将新对象的__proto__ "}, {"id": "6969563921480941582", "title": "JavaScript 高阶函数", "desc": "JavaScript 原生高阶函数 map/reduce/filter，高阶函数就是一个将函数作为参数或者返回值的函数"}, {"id": "6844904040367652878", "title": "你知道 JavaScript Symbol 类型是什么，怎么用吗？", "desc": "根据规范，对象的属性键只能是字符串类型或者 Symbol 类型。不是 Number，也不是 Boolean，只有字符串或 Symbol 这两种类型。 到目前为止，我们只见过字符串。现在我们来看看 Symbol 能给我们带来什么好处。 \"Symbol\" 值表示唯一的标识符。 Sy…"}, {"id": "6991833909298200613", "title": "web前端高级JavaScript - 事件和事件绑定的基础知识梳理 | 8月更文挑战", "desc": "事件 什么是事件 浏览器赋予元素的事件行为 事件绑定 什么是事件绑定 事件对象 什么是事件对象 阻止事件的默认行为 事件的传播 事件委托 mouseover与mouseenter的区别"}, {"id": "6955274909270409223", "title": "【周一】前端日常总结 | 创作者训练营第二期", "desc": "【魔王哪吒精选】希望能够帮助更多的小伙伴。加我😚即可交流问题（不是大佬，互相学习，创造良好的学习环境）。以下哪些你不懂呢？..."}, {"id": "6953826402688827423", "title": "走笔字节，面后便是海阔天空", "desc": "前言 好的，初生牛犊不怕虎，前端小白面字节。你问我咋这么自信的，哈哈哈一切都是内推的机缘巧合。20下午体验了字节实习生一面，总体感受是面试官人超好，不会的题目还会尽心引导，然后的都在尽量挖掘我的闪光点"}, {"id": "6982736730633797639", "title": "外观数列解题思路", "desc": "外观数列是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。 外观数列前5项枚举如上，下面的文字比较清晰的解释了什么是外观数列。这同时也是leetcode的第38题。题目要求给定一个正"}, {"id": "6999090269031235598", "title": "JS实用篇复习笔记（2）", "desc": "1、推荐的编译器 Atom（跨平台，免费）。 Visual Studio Code（跨平台，免费）（常用）。 Sublime Text（跨平台，共享软件）（常用）。 webstorm(常用) Note"}, {"id": "6955082511646982175", "title": "你知道什么是词法作用域以及如何“欺骗”它吗？", "desc": "今天我给大家介绍一个在这门语言中比较重要一个概念：什么是词法作用域及何为欺骗词法作用域？，文章是参考《你不知道的JavaScript（上卷）》做的一些学习笔记，发表一些个人的理解与大家进行分享交流，存"}, {"id": "6993257017053806623", "title": "给 axios 添加 jsonp 请求", "desc": "同源策略是什么？jsonp又是什么？axios 跨域怎么办？如何给axios添加jsonp请求呢？怎么封装一个基础的jsonp请求？jsonp为什么能跨域请求数据呢？"}, {"id": "6891142327503749127", "title": "译|Web上的分享（Share）API", "desc": "我认为Web Share API非常酷，简而言之，它会利用您所使用的平台上的原生共享功能（如果该平台支持的话）。 Web Share API只是几行代码。简单！没有图像，没有重量级的JavaScript或iframe。 用户看到的UI是针对其平台定制的，甚至可能是由他们定制的，…"}, {"id": "6844903687010123790", "title": "探寻 JavaScript 精度问题以及解决方案", "desc": "阅读完本文可以了解到 0.1 + 0.2 为什么等于 0.30000000000000004 以及 JavaScript 中最大安全数是如何来的。 拿 173.8125 举例如何将之转化为二进制小数。 ①. 针对整数部分 173，采取除 2 取余，逆序排列; 得整数部分的二进制…"}, {"id": "6926831181681917959", "title": "【JS】详解ES6执行时词法环境/作用域/执行上下文/执行栈和闭包｜牛气冲天新年征文", "desc": "这篇文章我们想探讨一下，当JS代码执行过程中涉及到的内容。厘清各个概念名词的含义。 本文是在阅读ECMA文档以及站在各个大神们所写文章的肩膀上，结合自己理解的基础上完成的，不准确之处，大家指正。 在编程语言当中，代码里面的变量都有其生效的范围，这个范围叫做作用域。 作用域是指程…"}, {"id": "6983660858530332679", "title": "delete操作符总结", "desc": "本文参考自MDN官方网站 几天前我看了一篇关于Delete的文章，里面提到了delete操作与map的delete操作的关系与区别，这大大勾起了我对于delete这个在js来说常见的不能再常见的操作符"}, {"id": "6969021840761192456", "title": "...args剩余参数和 arguments对象的区别", "desc": "...args剩余参数（展开运算符） 允许一个表达式在某处展开。展开运算法 在 多个参数（函数调用）、多个元素（用于数组和字面量）和多个变量（用于解构赋值） 地方使用。剩余参数语法允许我们将一个不定数"}, {"id": "6984618105469141023", "title": "可能不是史上最全但很实用的BOM API详解-1", "desc": "新手向，非常简单但是很全面的 BOM API 教程！详细讲述了 BOM 中的 Navigator、Screen 和 Location 三个接口对象。"}, {"id": "6989800439248060452", "title": "作用域及作用域链", "desc": "作用域及作用域链 全局作用域和函数作用域 块级作用域 什么是自由变量 什么是作用域链 关于自由变量的取值 作用域与执行上下文 练习题："}, {"id": "6992381689213222926", "title": "dom元素高度和宽度", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 javascript中获取dom元素高度和宽度的方法如下： JQuery获取屏幕高度: 综上所述，JS获取dom元素高度和宽度的方法如下： "}, {"id": "6916876446766104589", "title": "（{}+10）vs  {}+10 究竟是谁不讲武德？ - 七日打卡", "desc": "+运算符是有一个隐式转换的规则的，转换规则很复杂，针对我们这道题只需要知道，+运算符遇到一个对象和数字相加时会首先将对象调用toString方法进行转换，然后将数字转换成字符串，最后将两个字符串进行拼接。 其次就是为什么第二个只是少了个圆括号，就会造成这样的差异呢？这应该是我们…"}, {"id": "6844903587391225863", "title": "合格前端系列第十一弹-初探 Nuxt.js 秘密花园", "desc": "笔者最近业余时间想着学点新东西，于是开始接触服务器端渲染（SSR），花了一周的时间学习和实战，然后在周末高仿掘金撸了一个 SSR 的 Demo 项目。 技术栈选的是平滑开箱的 Nuxt，整个项目整合了 vue + nuxt + axios + vuex + vue-router…"}, {"id": "6987977047159095310", "title": "从零开始学习3D可视化之数据对接（3）", "desc": "MQTT是ThingJS平台支持的四种数据对接方式之一，MQTT又称Message Queuing Telemetry Transport，消息队列遥测传输，是 ISO 标准（ISO/IEC PRF "}, {"id": "6950575894075277342", "title": "JavaScrip继承方案", "desc": "JavaScrip继承方案1、原型链继承 2、借用构造函数 3、组合继承 4、寄生继承 5、es6的语法糖class"}, {"id": "6947249325994934302", "title": "「JavaScript进阶」一文吃透深浅拷贝", "desc": "要理解深浅拷贝，先要熟悉变量存储类型，分为基本数据类型（值类型）和引用数据类型（复杂数据类型）。基本数据类型的值是直接存在栈内存的，而引用数据类型的栈内存保存的是内存地址，值保存在堆内存中。 1、使用typeof()判断null，打印的是object，但是 null 是基本数据…"}, {"id": "6844904132076109838", "title": "【译】这三个精巧且很棒 JS 库，值得你亲手试试", "desc": "在本文中，介绍3个鲜为人知，但功能非常强大且体积很小的 JavaScript 库，这些可以帮助提高开发效率，减轻开发难度，让你加班少少的，请收纳。 Basket.js是一个极小的 JS 库，压缩后的大小仅为0.7 kB。 Basket.js不仅用于加载外部 JavaScript…"}, {"id": "6844903811341877256", "title": "如何检查一个对象是否为空", "desc": "使用 Object 的 getOwnPropertyNames 方法，获取所有属性名，这样就算是不可枚举属性依然能够获取到，算是比较 ok 的方法。"}, {"id": "6844903762931236878", "title": "[前端漫谈_1] 从 for of 聊到 Generator", "desc": "说起 for of 相信每个写过 JavaScript 的人都用过 for of ，平时我们用它做什么呢？大多数情况应该就是遍历数组了，当然，更多时候，我们也会用 map() 或者 filer() 来遍历一个数组。 但是就像我们标题里面说的，它跟 Generator 能扯上什么…"}, {"id": "6844903646472175629", "title": "这样你都不懂Promise,算我输！", "desc": "Promise 是异步编程的一种解决方案，比我们传统的回调函数、事件更加合理，最早由社区提出并实现，ES6觉得很ok，就写进了语言标准中，统一了语法，并且提供了原生的Promise对象。 所谓的Promise，其实就是一个容器，里面保存着未来才会结束的事件（通常是一个异步操作）…"}, {"id": "6844904046776549389", "title": "前端使用docker+jenkins实现自动打包部署", "desc": "继上一篇文章， 实现一个cli项目脚手架， 完成项目初始化。 这篇文章主要讲讲，开发完成后的持续集成CI/CD。 主要实现功能： 当向github仓库push代码后， 实现自动打包， 并部署到对应服务器上。 其实使用jenkins就可以实现了。 为什么加一个docker？ 为了…"}, {"id": "6973836796052373517", "title": "【译】JavaScript 代码整洁之道-概述篇", "desc": "这篇文章是这一系列文章中的第一篇，它将对 \"如何编写 JavaScript 整洁代码\" 这个经常被提及的话题进行深入的探讨。 在本系列中，我们将介绍和讨论书写整洁代码的技巧，每个程序员都应该了解并掌握"}, {"id": "6931216155637972999", "title": "数组去重的几种实现方案", "desc": "数组去重是业务开发中可能经常遇到的场景，本文总结了数据去重的几种实现思路。 本文总结了借助Set、常规操作、借助对象、排序并借助正则能力、filter等几种途径来实现数组去重。"}, {"id": "6850037282319204360", "title": "面试官真的会问：new的实现以及无new实例化", "desc": "面试官很忙，但我不单纯是蹭热点，今天聊的主题绝对是面试中命中率很高的知识点。我在复习javascript函数这块知识时，注意到一个有意思的点，就是构造函数显式return，并由此引发了一波头脑风暴...... 我们知道，如果不做特殊处理，new构造函数时会发生下面这几步。 执行…"}, {"id": "6844903557326454791", "title": "从0.1+0.2=0.30000000000000004再看JS中的Number类型", "desc": "今天在看《JavaScript高级程序设计》的时候，注意到书中特意提到了0.1+0.2=0.30000000000000004这样一个浮点数计算错误的问题，觉得很有意思。平时在工作中对于浮点数了解地并不多，正好最近小组同学也遇到了这个问题，准备来总结下这个看似简单的Number…"}, {"id": "6928744499867435015", "title": "聊聊js中的数组|牛气冲天新年征文", "desc": "Hello，大家好，我是Symbol卢，由于年前公司的业务比较紧，也有一段时间没有更新文章了(有几篇文章还没结搞)，于是就是在大年初一和初二这两天写了这篇关于js数组的水文。由于内容比较多，打算分成两期进行分享(此文为第一期)，如果文章中有不恰当的地方，也欢迎各位大佬（前辈）多…"}, {"id": "6972516768954892319", "title": "Promise基础知识以及语法分析", "desc": "Promise:承诺者模式；ES6新增的内置类,基于Promise可以有效管理“异步编程”,避免回调地狱 ajax\"串行\"：上一个请求成功，才可以发送下一个请求 ajax\"并行\"：多个请求可以同时"}, {"id": "6899593590108848142", "title": "你说我不讲武德，我说你不够了解我！浏览器如何解析html，css，js", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 众所周知，浏览器可谓是目前使用率最高的软件之一。从 1992年 世界上第一个图形网页浏览器（ Erwise ）的诞生发展到现在，市面上主流的浏览器有 IE、Firefox、Safari、Chrome及Opera。万恶的ie…"}, {"id": "6844903968586334221", "title": "浅拷贝和深拷贝（较为完整的探索）", "desc": "本文将用递归学习的方式探索关于《浅拷贝和深拷贝》中涉及的知识点，希望小伙伴们在脑海中深拷贝这些知识点，在面试或者工作中能够灵活使用。 后端小伙伴需要我将 接口返回的源数据 和 页面修改后新数据 各发一份给它。 现在，我们开始揭晓上面答案。 在这之前，先看看 基本数据类型和引用数…"}, {"id": "6844903603107266567", "title": "观察者模式与发布订阅模式的异同", "desc": "观察者模式与发布/订阅模式大概就跟番茄与圣女果的关系一样，剪不断理还乱。也许，我们也听过两种模式之间的一些区别，但我相信，大部分的人对其中差异的感知还是很弱的。"}, {"id": "6986945226191405086", "title": "原生Javascript如何实现继承以及其优缺点", "desc": "####最近在复习javascript的一些基础知识，为开启新的征程做准备。所以开始记录一些自己学习的内容。 ####那今天的主题是 js的原生继承方式。 ###废话少说，上代码！ 然后我们在它的原型"}, {"id": "6844903650402238477", "title": "神奇的选择器 :focus-within", "desc": "CSS 的伪类选择器和伪元素选择器，让 CSS 有了更为强大的功能。 有个错误有必要每次讲到伪类都提一下，有时你会发现伪类元素使用了两个冒号 (::) 而不是一个冒号 (:)，这是 CSS3 规范中的一部分要求，目的是为了区分伪类和伪元素，大多数浏览器都支持下面这两种表示方式。…"}, {"id": "7004366179737272333", "title": "深入理解SourceMap原理及应用", "desc": "1. 什么是SourceMap 通常来说，现在我们使用Vue,React等 开发前端应用，都需要通过webpack来对文件进行编译和处理，如果发布到线上的话，还需要对编译之后的代码进行混淆，压缩等处理"}, {"id": "6844903681658191879", "title": "iOS 12 JS数组Bug，可能带来互联网风波，附解决方案", "desc": "喜气洋洋，被安利使用iOS12，红红火火，更新最新版本。 网络上已经有人遇到 iOS 数组相关的一个Bug，似乎会酿成整个互联网风波。 点击网页上方的 Click Refresh，可以看到，网页刷新后，原网页中，数组的顺序在第二次访问网页的时候，变成了倒序，即便是关闭网页重新进…"}, {"id": "6998773964528943117", "title": "JavaScript中到底什么是异步", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 实例 在这里问大家一个问题，这个函数的执行顺序是什么样的？按照常理来说，延迟0秒执行，不就是不延迟吗，所以应该是： 0 1吧； 但实际是："}, {"id": "6974073600428998692", "title": "JavaScript面向对象编程详解", "desc": "面向对象编程 ES5中的面向对象 面向对象编程(OOP)具有灵活、代码可复用、高度模块化等特点。 对象是单个实物的抽象 对象是一个容器，封装了对应的属性和方法，属性是对象的状态，方法是对象的行为"}, {"id": "6844903507149979655", "title": "JavaScript 开发人员需要知道的简写技巧", "desc": "本文来源于多年的 JavaScript 编码技术经验，适合所有正在使用 JavaScript 编程的开发人员阅读。 本文的目的在于帮助大家更加熟练的运用 JavaScript 语言来进行开发工作。 文章将分成初级篇和高级篇两部分，分别进行介绍。 1. 三目运算符 下面是一个很好…"}, {"id": "6997993374342971422", "title": "磨刀霍霍向猪羊 - 剑（js）来！", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 8.19 - 345. 反转字符串中的元音字母 题意 分析 复杂度分析 时间复杂度：O（n），n 是 s 的长度，虽然遍历两次，但是加起来"}, {"id": "6864860217646809096", "title": "leafletjs可视化地理位置(更新地图同步)", "desc": "anopen-sourceJavaScriptlibraryformobile-friendlyinteractivemaps零·实践前的自述实践简述使用leafletjs在高德的地图上构建图层，包括"}, {"id": "6903675051380637709", "title": "18 个 JavaScript 入门技巧！", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 1. 转字符串 2. 转数字 null是一个值，而undefined不是一个值。null就像一个空盒子，而undefined没有盒子。 如果传递null，则不采用…"}, {"id": "6844903685458231303", "title": "JavaScript 前端倒计时纠偏实现", "desc": "前端网页倒计时是非常常见的应用，我们在各大购物网站的秒杀活动中总是能见到它的身影。但是在实际情况中，我们常常会发现当网页不刷新、让倒计时程序持续运行时，显示时间相比实际时间会越来越慢，相信大家也有在秒杀时间即将到来时不停刷新页面的经历。原因自然也不难理解：倒计时通常使用定时器（…"}, {"id": "6966860151311564836", "title": "JavaScript中Class的this指向", "desc": "前言 JavaScript中的this指向问题本来是一个入门必会的问题，但是对于class中this的指向问题，发现不少人还有困惑。希望这篇文章能给大家讲清楚。 this的绑定优先级 关于this有不"}, {"id": "6844903553736114189", "title": "Weex + Ui - Weex Conf 2018", "desc": "本文是2018年 Weex Conf 中议题《Weex + Ui》的内容文档整理，主要给大家介绍飞猪 Weex 技术体系从无到有的过程，包括 Weex Ui 组件库的开发和发展，重点分享在 Weex Ui 层建设的一些经验。 文章较长，首先放上 Weex Ui 的开源地址，欢迎…"}, {"id": "6844903701082013710", "title": "关于 ES6 中 Promise 的面试题", "desc": "最近在复习 Promise 的知识，所以就做了一些题，这里挑出几道题，大家一起看看吧。 首先 Promise 新建后立即执行，所以会先输出 1，2，而 Promise.then() 内部的代码在 当次 事件循环的 结尾 立刻执行 ，所以会继续输出4，最后输出3。 reject …"}, {"id": "6844903769365299208", "title": "原生 js 实现一个前端路由 router", "desc": "1. 滑动效果： https://biaochenxuying.github.io/route/index.html 2. 淡入淡出效果： https://biaochenxuying.github.io/route/index2.html 1. 需求 因为我司的 H 5 的项…"}, {"id": "6998338487216766983", "title": "我是这么理解闭包的", "desc": "开始 话不多说直接上代码 这是经典的闭包，一个函数返回另一个函数，返回的函数中使用了上级(非全局)的变量，通过 Chrome Devtools 能看到 Closure，就说明有闭包 将上面的代码改造一"}, {"id": "6844903543678189576", "title": "《Node.js设计模式》使用流进行编码", "desc": "本系列文章为《Node.js Design Patterns Second Edition》的原文翻译和读书笔记，在GitHub连载更新，同步翻译版链接。 Streams是Node.js最重要的组件和模式之一。 社区中有一句格言“Stream all the things（St…"}, {"id": "6982105469531717669", "title": "JS-Array常用方法总结", "desc": "创建数组 不要用 new Array()创建 , 直接用字面量创建： 索引 索引访问数组 找出某个元素在数组中的索引 array.indexOf(2)// 1 基础增删数组 末尾添加：array.pu"}, {"id": "6844903704919801869", "title": "如何给localStorage设置一个过期时间？", "desc": "​ 这个话题其实在上次分享&#x3C;小程序填坑记里讲过了>已经讲过（大佬可绕过哦～），但后来群里/评论都有些同学，提到了一些疑问，问能否单独整理一篇更为详细的分享，讲解一下细节和完善提到的不足，如是有了下文👇。 以上就是今天为大家总结的分享，您GET到了吗？小程序、sess…"}, {"id": "6999875292948856839", "title": "[JS]10.闭包应用（循环处理）", "desc": "基于闭包的机制完成 函数执行形成私有上下文，执行完成后，当前上下文有东西被当前上下文以外的东西占用，不能被释放，就是闭包 闭包的特点 闭包的保护机制：保护当前上下文的变量独立，不受外接干扰 闭包的保存"}, {"id": "6999871916450250766", "title": "Event Loop", "desc": "个人笔记-仅供参考 Event Loop 进程线程 Event Loop 是一个程序结构，用于等待和发送消息和事件。"}, {"id": "6844904114099322893", "title": "【精】从206个console.log()完全弄懂数据类型转换的前世今生(下)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 那年我十八岁，单纯，善良，懵懂，青涩，阳光，可爱... 现在的我...在面对JS类型转换的时候，依旧是... 我以为了解了toString()和valueOf()之后，我就是那个最懂你的男人... 直到我在你的心里看…"}, {"id": "6844904112857825293", "title": "js基础之new关键字知多少", "desc": "前段时间我一个朋友面试，被面试官问了一个问题：写一个js方法实现一个 new 运算符。我朋友内心深处当时就有一万头草泥马奔腾而过......。new 都用过，用来创建实例对象，可new 操作背后都做了些什么，我们确很少关注。 以上是 MDN 的原文，通过上面描述，我们能比较清晰…"}, {"id": "6989513100856672293", "title": "前端面试知识点梳理——js基础面试题", "desc": "var 和 let const的区别 var是ES5语法，let、const是ES6语法；var有变量提升 var和let是变量，可修改；const是常亮，不可修改 let const有块级作用域，v"}, {"id": "6872132988780412935", "title": "微前端从入门到熟悉 | 🏆 技术专题第四期", "desc": "微前端是最近一个很火的话题，前端就跟谈恋爱一样，真的是“合久必分，分久必合”。微前端不是炫技，而是一个解决方案。 举个例子，公司内部有很多的系统，比如说人力系统、财务系统、工时管理、项目管理、论坛等等，当公司有新人入职时，短时间内他要记住全部的地址比较难。 如果地址不太多，存浏…"}, {"id": "6844904000467255303", "title": "如何监听 DOM 变化", "desc": "在MVVM框架中，一是监听数据变化，数据驱动。 我们都知道通过Object.defineProperties(),来监听数据的变化，或者使用，代理和反射。 其实在MVVM中，也有操作DOM的场景。那么，我们是通过哪些API来监听DOM的变化的呢？ 以上三种都不是很好的方法。那么…"}, {"id": "6844903996788834318", "title": "90行代码构建属于你的React", "desc": "本文中的实现借助了 snabbdom ，因此如果你的关注点是虚拟DOM的实现或是将虚拟DOM渲染到浏览器的底层实现，本篇文章中并不会涉及到。有些人可能对此感动失望，但是，一口吃不成一个胖子，我们需要一步一步来。 当我学习 React 的时候，我觉得它所做的一切都是魔术，然后我就…"}, {"id": "6997741962170384414", "title": "vue项目中Element组件库的一些bug问题", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 1.Element Popconfirm气泡确认框 事件无法实现问题 1.官方网站的用例： 2.用例效果： 3.用到这个确定窗，就一定需要去"}, {"id": "6844904127466569736", "title": "🐲【1】ShutdownHTTP系列-基础篇", "desc": "之前，有位大佬和我说过这么一句话：\"网络知识在一定程度上决定了你的上限\"。 这次请给霖呆呆一个机会，跟着我的脚步👣从1开始学习它。另外我整理的HTTP系列基本都会附有一个面试时的浅答与深答的的配套答案，浅答是为了让你们更好的记住，深答保证你确实理解了浅答中的知识点。 1. H…"}, {"id": "6934965361531944990", "title": "别再用self=this、that=this了，代码太难读懂！", "desc": "1. 前言 JavaScript中的this可能是当年设计的时候存在着设计缺陷，在ES6中能使用()=>这个高端的箭头函数就尽量使用箭头函数，箭头函数在其他语言中还有个高大上的名字Lambda表达式。 2. this指向 对于this的指向，我的理解就是记住一句话，如果没有使用…"}, {"id": "7005942454893412389", "title": "前端持续集成方案", "desc": "如何保证编码风格统一， 保护主分支代码，增强代码质量？ 使用Merge Request人工code review加上自动化脚本，可避免许多低级问题。"}, {"id": "6999987859297976334", "title": "正经人一辈子都用不到的 JavaScript 方法总结 (一)", "desc": "使用 String.raw 可以原汁原味的输出期望结果，再也不会因为转义字符的原因导致各种预期之外的结果。"}, {"id": "6844903959283367950", "title": "1.5万字概括ES6全部特性(已更新ES2020)", "desc": "第三次阅读阮一峰老师的《ES6标准入门》了，以前阅读时不细心，很多地方都是一目十行。最近这次阅读都是逐个逐个字来读，发现很多以前都没有注意到的知识点，为了方便记忆和预览全部ES6特性，所以写下本文。 本文的知识点完全是参考或摘录《ES6》里的语句，有部分语句为了方便理解和记忆，…"}, {"id": "6998414628380229662", "title": "还在用原型函数编程吗，快来试试ES6-Class类吧！真香", "desc": "哈喽， 今天给大家讲解一下类Class。在ES5中是原型函数，到了ES6中出现了\"类\"的概念。等同于是ES5的语法糖，这种写法更简洁清晰且维护"}, {"id": "7002785754078265357", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十七）", "desc": "感激相遇 你好 我是阿ken 一般的自定义属性可以通过 getAttribute (‘属性’) 方法来获取，但是有些自定义属性很容引起歧义，不容易判断是元素的自带属性还是自定义属性。因此，HTML5新"}, {"id": "6989436364693454855", "title": "一位初级进阶中级 JavaScript 工作者的自我修养（一）", "desc": "前言 最近的前端面试已经卷的飞起了，从计算机原理、编译原理、数据结构、算法、设计模式、编程范式到编译工具、格式工具、Git、NPM、单元测试、Nginx、PM2、CI / CD 了解和使用。 这随便挑"}, {"id": "6949370458793836580", "title": "Vue 源码解读（1）—— 前言", "desc": "深入研究 Vue 技术栈的源码原理，从框架源码解读到手写框架 ..................."}, {"id": "7005953677202554888", "title": "async中的循环问题", "desc": "在async中使用循环时，可能会出现意想不到的情况，接下来我们就来看看。 使用for循环 非常好，每隔一秒打印一次，是我们想要的效果。 forEach 我们发现next被先打印了，而后也没有每隔一秒打"}, {"id": "7006240367662071844", "title": "HTML+CSS+JS团队人物图片蜂巢布局", "desc": "​ 效果演示： 博主首页免费获取    ​ ​ css样式： html : js文件在上面截图可以看到 需要引进来。 ​"}, {"id": "7004304466849562654", "title": "你的数组缺爱吗？请容我帮你找回", "desc": "为什么只有正向查找的 find、findIndex,而没有反向查找的lastFind、lastFindIndex 为什么没有查询满足条件的所有索引方法 findIndexs 为什么我想删除数组里某些索"}, {"id": "7003631384191303716", "title": "ZooTeam 前端周刊｜第 149 期", "desc": "async/await 优雅的错误处理方法 【第2374期】API 的一码多端方案 —— Uni API 前端9种图片格式基础知识, 你应该知道的 React合成事件和DOM原生事件混用须知 浅聊We"}, {"id": "7005500716278087693", "title": "clean-state:  一个轻巧又灵活的React状态管理器", "desc": "一、前言 React从设计之初到最新的v17版本，已经经历了近百次迭代。围绕着单向数据流的设计哲学出现了以Flux思想为主的Redux状态管理和以响应式监听为主的Mobx，一个强调理念上的统一而另一个"}, {"id": "7000175914680057870", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十）", "desc": "感激相遇 你好 我是阿ken push() 和 unshift() 方法可以为指定数组在末尾或开头添加一个或多个元素，而 pop() 和 shift() 方法则只能移出并返回指定数组在未尾或开头的一个"}, {"id": "6991774994552324133", "title": "学习 Webpack5 之路（实践篇）", "desc": "本篇将从实践出发，在第一章节《基础配置》中使用 webpack 搭建一个基础的支持模块化开发的项目，在第二章节《进阶配置》中使用 webpack 搭建一个 SASS + TS + React 的项目。"}, {"id": "7007293933784940580", "title": "探索 Javascript 里的 Promise", "desc": "介绍 在计算机科学中，future、promise、delay和deferred是指用于在某些并发编程语言中同步程序执行的构造。由于某些计算（或者网络请求）尚未结束，我们需要一个对象来代理这个未知的结"}, {"id": "6844903830887366670", "title": "一名【合格】前端工程师的自检清单", "desc": "前端开发是一个非常特殊的行业，它的历史实际上不是很长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。 这样是一个非常真实的现状，实际上很多前端开发者都是自学甚至转行过来的，前端入门简单，学习了几个API以后上手做项目也很简单，但是这往往成为了限制自身发展的瓶颈。 只是…"}, {"id": "6844903959266590728", "title": "Vue 开发必须知道的 36 个技巧【近1W字】", "desc": "Vue 3.x 的Pre-Alpha 版本。后面应该还会有 Alpha、Beta 等版本,预计至少要等到 2020 年第一季度才有可能发布 3.0 正式版; 后续 Vue 3.x 出来后持续更新. 3. 14种组件通讯 provide 和 inject 主要为高阶插件/组件库提…"}, {"id": "6844904021308735502", "title": "(1.6w字)浏览器灵魂之问，请问你能接得住几个？", "desc": "作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，我之前也强调过知识体系的重要性，这部分原理性的内容就是知识体系中的重要部分，必须牢牢掌握才能面对瞬息万变的实际场景，针对性地给出实际方案，而不是背诵各种开发军规和性能优化的条例，这样很难发现真正的问题所在,…"}, {"id": "6999591443299827743", "title": "来看看宏任务、微任务、Event Loop！", "desc": "众所周知啊，JS是一个单线程的脚本语言。那么为什么JS一定要是一个单线程的呢？如果像多线程那样效率是不是会有很大提升呢？ 答案当然是否定的，JS为浏览器而生，用户必然要和浏览器存在很多的交互，会在"}, {"id": "7006697022455545893", "title": "如何 PWA 构建现代离线应用程序", "desc": "渐进式 Web 应用程序 (PWA) 可能是现代移动应用程序开发的主流技术之一。这个技术工具结合了本地应用程序和web应用程序的功能。使用现代api来提供可靠性和可安装性，同时使用单一代码库访问任何人"}, {"id": "6890652568507121677", "title": "JavaScript ES12新特性抢先体验", "desc": "看到replaceAll这个词，相比很容易联想到replace。在JavaScript中，replace方法只能是替换字符串中匹配到的第一个实例字符，而不能进行全局多项匹配替换，唯一的办法是通过正则表达式进行相关规则匹配替换 而replaceAll则是返回一个全新的字符串，所有…"}, {"id": "6974211415619928100", "title": "javascript常用算法-快速排序（宝，我输液了，输的想你的夜）", "desc": "这是我参与更文挑战的第16天，活动详情查看： 更文挑战 javascript常用算法-快速排序 快排像二分法一样都基于“分治”的算法思想，通过对数据进行分类处理，不断降低数量级，实现O(logN)（对"}, {"id": "6980153124874879006", "title": "为什么Object中的元素会自动排序", "desc": "为什么Object中的元素会自动排序，而不是按照我们输入顺序呢？ 对象的顺序是否是可预测的呢，底层到底是怎样的规则呢"}, {"id": "6986973247199772680", "title": "浅谈 javascript 函数式编程", "desc": "OOP(面向对象)和 FP(函数式)之间竞争就从来没有停止过，大家都在伯仲之间，其实没有优劣之分，只有适不适合。"}, {"id": "6854573212484042765", "title": "Js+Video，分片上传、断点续传", "desc": "前言项目开发中，涉及文件上传的问题，针对于性能以及技术实现上，高频出现的一个名词---分片，以及根据实际项目需求可能还会涉及到断点续传的操作；今天咱们就来聊一下，分片以及断点续传的那些事~方案分析背景"}, {"id": "6988147091457441806", "title": "JavaScript 数据结构--数组", "desc": "数组是计算机编程世界里最常见的数据结构。任何一种编程语言都包含数组。它是编程语言中的内建模型，通常效率很高，可以满足不同需求的数据存储。"}, {"id": "6844903838575493127", "title": "【JS迷你书】类型转换之拆箱操作", "desc": "众所周知，JS 中共有 7 种数据类型：Undefined、Null、Boolean、Number、String、Symbol 和 Object。前 6 者是基本类型，Object 是引用类型。 《类型转换之装箱操作》一文中说，因为 JS 是弱类型语言，我们可以像对待引用类型一…"}, {"id": "6916295399326105613", "title": "设计模式大冒险第五关：状态模式，if/else的“终结者”", "desc": "这一篇文章是关于设计模式大冒险系列的第五篇文章，这一系列的每一篇文章我都希望能够通过通俗易懂的语言描述或者日常生活中的小例子来帮助大家理解好每一种设计模式。 今天这篇文章来跟大家一起学习一下状态模式。相信读完这篇文章之后，你会收获很多。在以后的开发中，如果遇到了类似的情况就知道…"}, {"id": "6972458553663553573", "title": "原生js实现瀑布流效果", "desc": "效果 dom结构 可以根据自己的需要增加dom元素 JavaScript部分 window.onload 官方解释是： 方法用于在网页加载完毕后立刻执行的操作，即当 HTML 文档加载完毕后，立刻执行"}, {"id": "6968274790175997966", "title": "最全 ECMAScript 攻略之 ES2020-ES12", "desc": "2021 提案为 ECMAScript 新增了下表中所描述的特性 String.protype.replaceAll 在 ES2021 之前，要替换掉一个字符串中的所有指定字符，我们可以这么做： 现在"}, {"id": "6844904040959049742", "title": "阅读《深入理解ES6》书籍，笔记整理（上）", "desc": "由于全部笔记有接近4W的字数，因此分开为上、下两部分，第二部分内容计划于明后两天更新。 在ECMAScript6标准定稿之前，已经开始出现了一些实验性的转译器(Transpiler)，例如谷歌的Traceur，可以将代码从ECMAScript6转换成ECMAScript5。但它…"}, {"id": "6844903623944568839", "title": "webpack4.x 入门一篇足矣", "desc": "webpack4出了以后，一些插件变化很大，和之前的版本使用方式不一样，新手入坑，本篇将介绍如何从一开始配置webpack4的开发版本，对css，js进行编译打包合并生成md5，CSS中的图片处理，js自动注入html页，删除指定文件，提取公共文件，热更新等等。 执行webpa…"}, {"id": "6844903696854155277", "title": "浏览器原生支持平滑滚动", "desc": "浏览器从去年年底开始，已经开始支持浏览器的原生平滑滚动定位，CSS scroll-behavior属性和JS scrollIntoView()方法都可以。 scroll-behavior:smooth写在滚动容器元素上，可以让容器（非鼠标手势触发）的滚动变得平滑。 我们先看一个…"}, {"id": "6979776213447344141", "title": "浅谈前端 | JavaScript流程控制", "desc": "前言 JavaScript作为编程语言也有分支结构和循环结构来控制代码的执行流程。 分支结构 python的分支结构是使用if分支结构，在JavaScript中有两种分支结构，分别是if和switch"}, {"id": "6999644921149784077", "title": "JavaScript 中漂亮的 JSON.stringify() 输出", "desc": "JSON.stringify() 是将 JavaScript 对象转换为 JSON 的规范方法。有许多 JavaScript 框架在内部都使用了JSON.stringify()，比如 Express "}, {"id": "6844903518055186445", "title": "再也不学AJAX了！（二）使用AJAX", "desc": "在上一篇文章中我们知道，AJAX是一系列技术的统称。在本篇中我们将更进一步，详细解释如何使用Ajax技术在项目中获取数据。而为了解释清楚，我们首先要搞清楚我们是从哪里获取数据的，其次我们关注的才是获取数据的具体方式。 我们知道AJAX用来在项目中以阻止页面刷新的方式获取数据，那…"}, {"id": "6970497876430438436", "title": "155个JavaScript基础问题（56-65）", "desc": "这是我参与更文挑战的第4天，活动详情查看：更文挑战 56. 输出是什么？ 57. 输出是什么？ 58. 输出是什么？ 59. 输出是什么？ 60. 输出是什么？ 61. 输出是什么？ 62. 输出是什"}, {"id": "6844903495812775949", "title": "丁香园开源接口管理系统 - API Mocker", "desc": "随着web发展，前后端分离的演进，网页的交互变的越来越复杂。在项目开发过程中，前后端并行开发时，在涉及到接口的部分，总是遇到各类问题。诸如接口假数据、接口参数的约定、代理调试等等，极大的影响了开发效率。 API Mocker致力于解决前后端开发协作过程中出现的各类问题，提高开发…"}, {"id": "6844903827745832967", "title": "✨如何用JS实现“划词高亮”的在线笔记功能？✨🖍️", "desc": "1. 什么是“划词高亮”？ 上图的示例网站可以点击这里访问。用户选择一段文本（即划词），即会自动将这段选取的文本添加高亮背景，用户可以很方便地为网页添加在线笔记。 笔者前段时间为线上业务实现了一个与内容结构非耦合的文本高亮在线笔记功能。非耦合是指不需要为高亮功能建立特殊的页面 …"}, {"id": "6970607440974856205", "title": "事件循环(event loop)原理", "desc": "--- theme: condensed-night-purple --- ### 小试牛刀 ``` ``` ##### 打印顺序是 2 1 4 3 ##### 问：为什么打印顺序不是 1 2 3 4"}, {"id": "6844903584933347335", "title": "webpack4.0打包优化策略(一)", "desc": "happypack提供的loader，是对文件实际匹配的处理loader。这里happypack提供的loader与plugin的衔接匹配，则是通过id=happypack来完成。\b\b 资料:happypack原理解析-淘宝前端\b 将web应用依赖的基础模块抽离出来，打包\b到单…"}, {"id": "6844903639882924040", "title": "致莫名其妙被关注的面试之补充篇", "desc": "第一次发面试经历莫名其妙有了很多人看，记一次凉凉的小米面试内心还是十分的激（peng）动（zhang），不行不行，做技术的还是不能膨胀的。非常感谢给我举例JSON进行深拷贝有部分缺陷的同道中人，还有大佬给我指明了一条刚毕业该如何前端学习的道路，对所有在帖子中一块讨论技术的人表示…"}, {"id": "6964251189676359687", "title": "仅需几行代码轻松实现第一人称行走", "desc": "1、第一人称行走 2、实现 3、操作步骤 4、结语 在数字孪生可视化领域利用 WebGL来创建三维场景已经越来越普遍，各种开发框架也应运而生。今天我们就通过ThingJS来完成第一人称视角的场景巡视功"}, {"id": "6986153029959417886", "title": "读javaScript高级程序设计第四版笔记", "desc": "let 和var区别 let声明的范围是块作用域，var声明范围是函数作用域； let也不允许同一个块作用域中出现冗余声明； 对声明冗余报错不会因混用let和var而受影响，这两个关键字声明的并不是不"}, {"id": "6995904796637003812", "title": "开发脚手架及封装自动化构建工作流", "desc": "前端工程化是指遵循一定标准和规范，通过工具去提高效率、降低成本的一种手段。工程化是一种概念上的思想，而非单单一门或特定技术。"}, {"id": "6844903582639063047", "title": "webpack4之基础篇", "desc": "1. 什么是webpack WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。 2. webpack核心概念 En…"}, {"id": "6977154041813925896", "title": "JavaScript冷知识2", "desc": "前言 书接上文，这几天对一些比较冷门的知识点又做了一些总结，在这里写下来，避免遗忘。 1.对象防篡改 2.判断对象是否可扩展 3. NaN的类型是数字 4.数组快速拉平 5.Json.Stringif"}, {"id": "6922107259929657357", "title": "深入了解浅拷贝与深拷贝", "desc": "相信点进来的同学多少对浅拷贝与深拷贝有一定的了解，这里就不再多赘述，看完这篇文章，希望可以加深你对深拷贝的理解。 说起拷贝，就不得不提起 js 的数据类型了，因为深拷贝和浅拷贝的核心就在于不同的数据类型在内存中存储的地方不同。 最新的 ECMAScript 标准定义了 8 种数…"}, {"id": "6844903910541361165", "title": "三刷红宝书之 JavaScript 的引用类型", "desc": "dotAll (ES9) : 是否设置了 s （并非 d ）标志，即使用 . 可以匹配任何单个字符，可以理解为 [\\s\\S]（默认 . 不会匹配换行符，回车符，分隔符等） 事实上数字 1.335 在语言底层并不是真的以 1.335 来存储的，通过 toFixed 方法返回小数点…"}, {"id": "6844904177697554439", "title": "函数柯里化（面试题）包懂，不懂我改。", "desc": "(柯里化函数是高阶函数的一种特殊应用。对的，在我看来：要明白函数柯里化，前置知识点只有“高阶函数”。高级函数对于咱们每个前端程序员来说，经常用，不难。只不过我们（基础不牢的初级程序员）对于高级函数的定义不是十分明确。所以本片文章分为两个部分：1、高级函数。2、“特殊应用”高级函…"}, {"id": "6918899179192320007", "title": "让人爱不释手的 JS 扩展操作符 13 用", "desc": "而实际上，它也就是这么用的，但是如果事情有这么简单，就不用我在这里写了。扩展操作符给我最大的印象就是，这玩意还挺方便的，然而最近写代码的时候经常性的遇到需要使用扩展操作符的场景，所以我干脆在网上找了些资料，把平时常见的应用场景给罗列了下，发现这个操作符是真的强大，有多强大？来看…"}, {"id": "6844904039059030029", "title": "手摸手。完成一个H5 抽奖功能", "desc": "动画的速度是变化的，使用 requestAnimationFrame 和 setInterval 有点不妥，所以：可以使用 setTimeout + speed 参数 来控制动画的速度。 收到结束运行的通知时，需要先做减速动画，然后再停止在对应的 num，然后调用回调函数，所以…"}, {"id": "6844904097829617678", "title": "从零开始写一个采集图片的chrome插件", "desc": "浏览器插件，是基于浏览器的原有功能，另外增加新功能的工具。它不是独立的软件，需要依附于相应的浏览器才能发挥作用。目前主流的浏览器都允许使用插件，以增强浏览器的功能，让你的浏览器的功能更加多样化。 开发浏览器插件，其实就是类似于开发一个web应用，都是由HTML+JS+CSS构成…"}, {"id": "6911852155607449608", "title": "gulp 打包工具", "desc": "小型的脚手架工具，是一款主要用于去创建项目中特定类型文件的小工具，类似于Yeoman中的sub generator, 不过它一般不会独立去使用，一般我们会把Plop集成到项目当中。 接下来我们来通过两个案例的对比，去体会一下Plop的真正作用及他的优势。 日常开发中经常会遇到这…"}, {"id": "6844903607918149646", "title": "[译] JavaScript 是如何工作的：Web 推送通知的机制", "desc": "这是专门研究 JavaScript 及其构建组件系列文章的第 9 章。在识别和描述核心元素的过程中，我们还分享了我们在构建一个轻量级 JavaScript 应用程序 SessionStack 时使用的一些经验规则，该应用程序需要健壮、高性能，可以帮助用户实时查看和重现它们的 W…"}, {"id": "7005464795021312014", "title": "JavaScript系列 - 继承", "desc": "本文整理了常见的继承方式，共有 6 种： 原型链继承、经典继承 / 借用构造函数、组合继承、原型继承、寄生继承、寄生组合继承。"}, {"id": "6964494813584424974", "title": "Promise.allSettled 的作用，如何自己实现 Promise.allSettled", "desc": "## 引言 本文从四个方面循序渐进介绍 `Promise.allSettled` ： - `Promise.all()` 的缺陷 - 引入 `Promise.allSettled()` - `"}, {"id": "6994996784770580516", "title": "超全总结前端常用的本地存储", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 背景 cookie localStorage sessionStorage cookie和webStorage对比 数据上的生命周期的不同"}, {"id": "6844904018964119566", "title": "从一道面试题简单谈谈发布订阅和观察者模式", "desc": "今天的话题是javascript中常被提及的「发布订阅模式和观察者模式」，提到这，我不由得想起了一次面试。记得在去年的一次求职面试过程中，面试官问我，“你在项目中是怎么处理非父子组件之间的通信的？”。我答道，“有用到vuex，有的场景也会用EventEmitter2”。面试官继…"}, {"id": "6902225969604460558", "title": "Vite 原理分析 ", "desc": "Vite(读音类似于[weɪt]，法语，快的意思) 是一个由原生 ES Module 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES module 开发，在生产环境下基于 Rollup 打包。 为了实现上述特点，Vite 要求项目完全由 ES Module 模块…"}, {"id": "6971704506060898312", "title": "浅拷贝与深拷贝的区别", "desc": "一、理解深拷贝与浅拷贝 浅拷贝与深拷贝 1、数据类型 数据分为基本数据类型(String, Number, Boolean, Null, Undefined，Symbol)和对象数据类型。 基本数据类"}, {"id": "6996617040081453064", "title": "手写一次防抖与节流，就懂了", "desc": "概念 1. 防抖（Debounce） 函数防抖，就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会重新计算函数延执行时间。 使用场景：浏览器页面onresiz"}, {"id": "6984186731348099086", "title": "【源码】optimal-select——如何获取到 HTML 元素指纹（CSS Selector）", "desc": "前言 最近在做一个项目，要求获取到一个 HTML 元素指纹。本文就 optimal-select 讲一下是如何实现的？"}, {"id": "6992026290421235742", "title": "js重难点精讲一（ES6一）| 8月更文挑战", "desc": "js重难点精讲一（ES6一）： let和const 解构赋值 扩展运算符 rest运算符 模板字符串 箭头函数"}, {"id": "6992509145748340772", "title": "javascript之参数按值传递", "desc": "javaScript之参数按值传递 js中基础数据类型在栈中存储： js中引用型数据类型，变量名和地址存放在栈，变量值存放在堆内存： 下面来看函数中的参数传值： 按值传递 改变前： 栈内存 堆内存 v"}, {"id": "6844904159280365576", "title": "如何在阿里做一个靠谱的前端 PM", "desc": "...... • 技术：提供技术方案,解决产品可用性、易用性问题，同时确保技术上的健壮性和系统性，对用户体验和有效的实施过程负责。 为了防止自己后续再陷入这些问题，根据我以往做前端PM的经验和教训，基于现有阿里业务项目总结出一份《前端PM手册》，如果你是其他业务线的小伙伴，可将…"}, {"id": "6995727446653796383", "title": "数据结构之图的广度优先搜索（寻找最短路径）", "desc": "附相关文章的地址： 数据结构之图简介 数据结构之图的创建 数据结构之图的遍历 数据结构之图的广度优先搜索 上一篇文章中，我们实现了基本的广度优先搜索，也就是BFS的工作原理。而广度优先搜索可以做很多事"}, {"id": "6844903911095025678", "title": "基于 Lerna 管理 packages 的 Monorepo 项目最佳实践", "desc": "最近在工作中接触到一个项目，这个项目是维护一套 CLI，发到 npm 上供开发者使用。先看一张图： 项目仓库中的根目录上就三个子模块的文件夹，分别对应三个 package，在熟悉了构建和发布流程后，有点傻了。工作流程如图中所示： 最后使用拷贝文件的方式，把pkg-main、pk…"}, {"id": "7002031175405404173", "title": "JS中的curry化（柯里化）", "desc": "什么是 curry 化 curry 化也是一个常见的概念，维基百科对其解释为： 再简洁一些就是：柯里化是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数的技"}, {"id": "6857065289532735502", "title": "将Base64转为File类型文件", "desc": "base64是一种用64个可打印字符编码任意二进制的方法。所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号\"+\"、\"/\"（再加上作为垫字的\"=\"，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中…"}, {"id": "6844904149813837838", "title": "JS做类型检测到底有几种方法？看完本文就知道了！", "desc": "JS有很多数据类型，对于不同数据类型的识别和相互转换也是面试中的一个常考点，本文主要讲的就是类型转换和类型检测。 JS中的数据类型主要分为两大类：原始类型(值类型)和引用类型。常见的数据类型如下图所示： 原始数据类型存在栈中，引用类型在栈中存的是一个引用地址，这个地址指向的是堆…"}, {"id": "6997570006531702820", "title": "JavaScript知识点回顾（十八）——this（三）", "desc": "这是我参与8月更文挑战的第十八天，活动详情查看：8月更文挑战 绑定规则 我们来看看在函数的执行过程中调用位置如何决定this的绑定对象。"}, {"id": "6885143852798181389", "title": "聊聊 JavaScript 的并发、异步和事件循环", "desc": "JavaScript 作为天生的单线程语言，社区经常聊 JavaScript 就聊异步、聊 Event Loop，看起来它们好像难舍难分，实际上可能只有五毛钱的关系。本文把这些串起来讲讲，希望能给读者带来一些收获，如果能消除一些误解那就最好了。 这篇文章并不是为了解决上面的题，…"}, {"id": "6870043180444680200", "title": "「面试必会」手写35道JS面试高频题(二)", "desc": "在面试中，常常会问到一些“手写XXX”的面试题，如果我们只是停留在熟练使用这些 API，问到这种问题想必总是束手无策的。其实想要手写 API 的实现也并不难，更多的是需要我们训练自己通过使用方式来推倒实现的能力，千万不要死记硬背。最近我也在强化自己手写 API 的能力，并汇总了…"}, {"id": "6844903937330380814", "title": "5分钟教你用nodeJS手写一个mock数据服务器", "desc": "对于前端开发者而言，javascript正扮演着越来越重要的地位，它不仅能为浏览器端赋能，在web服务器方面也有很大的价值（我们可以用nodeJS来写服务端代码，启动web服务器），因此本文所要描述的，便是javascript在服务端的应用。我将介绍如何使用nodeJS来搭建一…"}, {"id": "6844904046147403789", "title": "小程序、H5登录授权、分享、支付流程", "desc": "微信登录、分享、支付流程[TOC]前言对于前端来说，微信的支付、分享、登录是一定要掌握的，今天这篇文章，主要对这三方面的流程进行详细的介绍。主要内容如下：域名相关知识介绍业务域名：在微信浏览器中点击文"}, {"id": "6964684957184688141", "title": "ES6(8)Proxy（拦截器、代理器）", "desc": "概述:改变默认行为，对外界的访问进行过滤和改写 上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。对设置了拦截行为的对象obj，去读写它的属性，就会得到下面的结果。"}, {"id": "6986887512048271391", "title": "从零开始学习3D可视化之数据对接（1）", "desc": "基于数字孪生可视化场景，使用在线开发或离线开发SDK进行数字孪生可视化场景开发完毕后，在所开发的数字孪生可视化可视化应用中，对接物联网或业务数据，实时驱动数字孪生可视化场景动态变化或图表数据更新。Th"}, {"id": "6993826603281170446", "title": "基础教程 8. JS DOM 操作和属性操作", "desc": "一、DOM元素获取： 1.1 document.getElementById() 1.2. context.getElementsByTagName() ..... 二、DOM 节点及节点间关系描述"}, {"id": "6844903605250572302", "title": "一个Promise面试题  ", "desc": "这个题目是之前面试的时候遇到的，当时没答对。虽然这种题目看起来对写代码并没什么实际意义，但说到底还是自己对JS执行机制不够深入了解。 就拿这题目拿出来分享给大家一些解题思路。 对JS执行机制不够了解的建议先看了这篇这一次，彻底弄懂 JavaScript 执行机制 - 掘金，再食…"}, {"id": "6844903919726886920", "title": "require时，exports和module.exports的区别你真的懂吗？", "desc": "作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数据库，祝您成为优秀的高级 Node.js 工程师。【程序员成长指北】作者，Github 博客开源项目 https://github.com/koala-codi…"}, {"id": "6844903794967314445", "title": "让你的网页更丝滑（一）", "desc": "前段时间，我将精力专注在Web性能领域；在这个领域下有个重要的课题是如何让网页更丝滑（流畅）。 想让网页变得丝滑，首先，我们需要一个标准来判断什么样的网页是丝滑的；其次，我们要准确的测量出网页的性能数据；最后，使用有效的方法让网页变得丝滑。 本篇文章将针对这三个方面进行详细的介…"}, {"id": "6989867901054353438", "title": "DocumentFragment文档碎片", "desc": "定义 用法 使用场景 Nod API中使用 在 Web 组件（Web components）中使用 属性 ParentNode.children 只读 ParentNode.firstElementC"}, {"id": "6991739084641304583", "title": "this指向解析(进阶必备知识)  | 八月更文挑战", "desc": "多数情况下，this指向调用它所在方法的那个对象。说的通俗一点就是谁调用的函数，就指向谁。当调用方法没有明确对象时，this就指向全局对象，浏览器中指向window，在node中指向Global。（严"}, {"id": "7004477430207348749", "title": "js第四周总结", "desc": "本周学习了很多重要的知识，例如6个新的数组API，怎样去保护对象的成员，ES6的部分知识点，dom操作，以及bom操作等等。 保护对象的成员 我们如何保护一个对象的成员不被删除或者修改等等操作呢？ 根"}, {"id": "6989027349765292040", "title": "手写 Redis，Storage 临时缓存不是事儿！", "desc": "在起服务 `node server.js` 时，服务本身是运行在内存中的，那我们可以写一个自己进行管理自己的对象。当然弊端也很明显..."}, {"id": "6993230890855825438", "title": "一次搞懂bind、apply和call", "desc": "apply、call和bind都能改变对象执行上下文。apply接收参数为数组或类数组，call 接收的是参数列表，bind接收的是函数..."}, {"id": "6844903604902428679", "title": "从零开始徒手撸一个vue的toast弹窗组件", "desc": "0. 轻量 --一个组件小于 1Kib (实际打包完不到0.8k) 今天,我们就抱着上面2个需求点,来实现一个基于vue的toast弹窗组件,下图是最终完成的效果图. 一. 先写一个普通的vue组件 二. 在我们需要使用的页面引入组件,方便看效果和错误 三. 实现动态加载组件 …"}, {"id": "6970621780591378445", "title": "五分钟理解：JS原型对象与原型链", "desc": "JavaScript 常被描述为一种基于原型的语言 (prototype-based language)—每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。"}, {"id": "6998651530354098190", "title": "JS算法之剪绳子及二进制中1的个数", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 剪绳子 II 给你一根长度为n的绳子。"}, {"id": "6971338414704558093", "title": "JS基础系列 之 你眼里的闭包", "desc": "闭包是指有权访问另外⼀个函数作⽤域中的变量的函数。看似简单的单一概念，其实它还涉及到执行上下文 、作用域、作用链、内存管理的等其他知识点。再我们看 闭包 前，先了解一下其他与之相关的知识点。走起..."}, {"id": "6844903698154389517", "title": "JavaScript设计模式之观察者模式", "desc": "通常又被称为 发布-订阅者模式 或 消息机制，它定义了对象间的一种一对多的依赖关系，只要当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，解决了主体对象与观察者之间功能的耦合，即一个对象状态改变给其他对象通知的问题。 这样是不是清晰了很多~诸如此类的案例还有…"}, {"id": "6922974648607244296", "title": "JS中，如何检查对象是否为数组？", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 JS 中的非原始数据类型都是对象（函数具有自己的类型，但它们也是对象）。 因此，仅使用typeof运算符来判断是不够的： 在本文中，我们来研究如何在 JS 中检查…"}, {"id": "6844903901292920846", "title": "深入理解 ESlint", "desc": "小沈是一个刚刚开始工作的前端实习生，第一次进行团队开发，难免有些紧张。在导师的安排下，拿到了项目的 git 权限，开始进行 clone。 小沈开始细细品味着同事们的代码，终于在他的不懈努力下，发现了老王 2 年前写的一个 bug，跟导师报备之后，小沈开始着手修改。年轻人嘛，容易…"}, {"id": "6844903680446038023", "title": "[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind", "desc": "JavaScript 中最容易被误解的一点就是 this 关键字。在这篇文章中，你将会了解四种规则，弄清楚 this 关键字指的是什么。隐式绑定、显式绑定、new 绑定和 window 绑定。在介绍这些技术时，你还将学习一些 JavaScript 其他令人困惑的部分，例如 .c…"}, {"id": "6935568341322956830", "title": "力扣 (LeetCode)-最大子序和,JavaScript数据结构与算法（数组）｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 使用splice方法，通过指定位置或索引，就可以删除相应位置和数量的元素。 forEach，对数组中的每一项运行给定函数。这个方法没有返回值 reduce方法接收一个函数作为参数，这个函数有四个参数：previo…"}, {"id": "6983285060694704141", "title": "JavaScript 中 new 操作符的原理", "desc": "🎯总结：创建一个空对象；空对象的内部属性 __proto__ 赋值为构造函数的 prototype 属性；将构造函数的 this 指向空对象；执行构造函数内部代码；返回该新对象。"}, {"id": "6982840486289473550", "title": "ES6: 扩展运算符", "desc": "ES6中，新增了扩展运算法，它实际上是一个语法糖，支持数组和对象，使用扩展运算符，可以简化代码，提高工作效率。"}, {"id": "6844903654244220936", "title": "真▪一行代码完成从前端代码build到部署线上", "desc": "在经历了6,7个项目同时开工，频繁发布测试 ，不得不学会一点偷懒的小技巧来提高效率了，所以这篇文章要讲的就是如何更加优化发布流程。 工作以来，经历了build后，然后用FileZilla上传服务器完成部署。再到前端打包后 ，在build仓库执行git push,后端在自动部署。…"}, {"id": "6998732773730615327", "title": "防抖 just so so", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 防抖 这个概念通常与节流被一起讨论，因为他们的作用很相似，存在细微差别，共同之处都是用于解决函数（事件）被频繁调用的问题，需要减少函数（事"}, {"id": "7003604608320798734", "title": "(开源)给图片编辑器添加了【框选节点】功能", "desc": "一款开源图片编辑器，采用React + Typescript + knova 框架开发.支持完备的功能"}, {"id": "7003667297986412581", "title": "HTML+CSS+JS 实现 全屏图片手风琴效果", "desc": "​ css样式： html : 大家可以点赞、收藏、关注、评论我啦 、需要完整文件随时联系我或交流哟~！ ​"}, {"id": "6995744994166308895", "title": "复盘最近一个月的中大厂面试经历(附加答案)", "desc": "前言   笔者两年前端经验，前后大概面了一个月，期间面了很多公司，比如有赞、涂鸦智能、滴滴、字节、酷家乐 大搜车、海康威视、税友等等，梳理一下基于我个人面试过程中被问的到的一些问题(包括但不限于)。 "}, {"id": "6875152247714480136", "title": "32个手写JS，巩固你的JS基础（面试高频）", "desc": "作为前端开发，JS是重中之重，最近结束了面试的高峰期，基本上offer也定下来了就等开奖，趁着这个时间总结下32个手写JS问题，这些都是高频面试题，希望对你能有所帮助。 当然也可以用include、filter，思路大同小异。 类数组是具有length属性，但不具有数组原型上的…"}, {"id": "6947841638118998029", "title": "一文带你了解如何排查内存泄漏导致的页面卡顿现象", "desc": "那什么是内存泄漏呢？借助别的大佬给出的定义，内存泄漏就是指由于疏忽或者程序的某些错误造成未能释放已经不再使用的内存的情况。简单来讲就是\b假设某个变量占用100M的内存，而你又用不到这个变量，但是这个变量没有被手动的回收或自动回收，即仍然占用100M的内存空间，这就是一种内存的浪…"}, {"id": "7002119038646091790", "title": "🏆使用 HTML、CSS 和 JavaScript 的酷黑主题模拟时钟", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 🏆使用 HTML、CSS 和 JavaScript 的简单模拟时钟 正如你在上图中所看到的，这里我借助 HTML、CSS 和 JavaSc"}, {"id": "7007006681703907358", "title": "实现一个简易版的Promise", "desc": "promise实现： 首先创建一个 MyPromise 类 ​ 以上代码，姑且实现最简单的 resolve 和reject，但是在Promise中，如果有语法错误，是会被捕获，然后触发reject的，"}, {"id": "6978348663286267912", "title": "14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠(第一部分 1-100题)", "desc": "这是我参与更文挑战的第27天，活动详情查看： 更文挑战 14万字 | 400 多道 JavaScript 面试题 🎓 有答案 🌠 为了方便手机阅览，我在必要位置都放了回顶部或者回对应问题的链接 编号 "}, {"id": "6967706992106438687", "title": "一个合格的中级前端工程师需要掌握的技能笔记（上）", "desc": "每天学习编程，让你离梦想更新一步，感谢不负每一份热爱编程的程序员，不论知识点多么奇葩，和我一起，让那一颗四处流荡的心定下来，一直走下去，加油"}, {"id": "6971935704938971173", "title": "JavaScript 如何检测文件的类型？", "desc": "对于文件上传的场景，出于安全考虑，建议小伙伴们在开发过程中，都限制一下文件上传的类型。对于更严格的场景来说，就可以考虑使用本文介绍的方法来做文件类型的校验。"}, {"id": "7005878164517814280", "title": "如何把 vscode snippets 用在项目中提高开发效率", "desc": "code snippets 是代码片段的意思，是 vscode 提供的根据某字符串快速补全一段代码的功能，可以提高写代码的效率。 vscode 的 snippets 是可以随项目共享的，多人开发一个项"}, {"id": "6993885230461370398", "title": "【SSD系列】图片作为背景的闪白问题，6种基础方案， 不会不知道吧", "desc": "前端使用图片作为背景，需要远程加载，会有一个闪白的效果，针对这个问题，本来进行了多种方案的探索，一起来了解吧。"}, {"id": "7001818236446572574", "title": "『面试的底气』—— 设计模式之适配器模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6992395176413478943", "title": "如何解决前端多语言选型和实现难题？", "desc": "多语言(i18n)支持 是企业项目走向国际化的必经之路，也是前端工程师最佳实践的内容之一。不过，多语言框架众多，会带来一系列选型问题，相信大家在平时对项目进行多语言支持时，也往往会遇到如下几个问题： "}, {"id": "7004714392226889764", "title": "像专业人士一样掌握 JS console.log", "desc": "在浏览器控制台中打印消息肯定会拯救所有开发人员。 console.log() 消息就像在调试代码中的一些有线问题时治疗大多数疾病的药物。 多数开发人员都喜欢 -让我们在浏览器中打印消息以了解有关此问题"}, {"id": "6966626823912308772", "title": "写给前端的跨平台方案、跨端引擎的本质", "desc": "近些年来，前端领域的跨端技术越来越多了：react native、weex、flutter、electron、kraken 等等。 那么多跨端方案，他们有没有通用的思路？我们能不能从这么多方案中找出本"}, {"id": "6994289281141309476", "title": "尤雨溪开发的 vue-devtools 如何安装，为何打开文件的功能鲜有人知？", "desc": "1. 前言 第一周读的是：据说 99% 的人不知道 vue-devtools 还能直接打开对应组件文件？本文原理揭秘。虽然我写过文章，但我还是相信有部分小伙伴还是不知道这个功能。 文中项目用的是vue"}, {"id": "7007238223265021959", "title": "Sentry Web 性能监控 - Trends", "desc": "在 Performance 主页上，您可以通过切换 Performance 主页右上角的选项卡来找到 Trends View。此页面显示随着时间的推移其性能发生重大变化的 transaction。"}, {"id": "7005830819851796487", "title": "0.1+0.2为什么不等于0.3，以及怎么等于0.3", "desc": "在开发过程中遇到类似这样的问题： 这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：   toFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的"}, {"id": "7003532158086168583", "title": "JavaScript 断点调试技巧", "desc": "这篇文章将介绍如何使用断点来进行 JavaScript 调试。但是我们为什么要使用断点来进行调试呢？难道 console.log 不能满足需求吗？"}, {"id": "6971319852954812424", "title": "前端自动化测试", "desc": "前端测试，更快的发现bug，让绝大多数bug在开发阶段发现，提高产品质量，有利于代码重构，可以让开发人员深入思考业务流程，让代码写的更加完善和规范。"}, {"id": "6990287456100679693", "title": "JavaScript 基础系列之数组（四）", "desc": "数组介绍 数组是一个特殊的变量，可以存放一个或一个以上的值。 创建数组 使用数组文本 使用new 关键词创建 访问数组元素 通过下标访问 改变数组元素 length 属性 遍历数组元素 for循环 f"}, {"id": "6921592119614570504", "title": "原型？原型链？", "desc": "看到一张关系图感觉解释得更加清晰。 额外，原型中的 constructor 属性, 指向构造函数。 由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。 子类的__proto__属性，表示构造函数的继承，总是指向父类。 子类prototype属性的__proto__属…"}, {"id": "6844903693108641806", "title": "小哥哥～手把手教你如何绘制一辆会跑车", "desc": "灵感来源于前些天捡到钱了，就想着是时候给自己买辆车了，工作这么多年了应该对自己好一点，在网上搜索了一下看到这个车型。其实几年前是买过一辆的，但是不到一个月就被人偷了，伤心了好久。这次一定锁好，上三把锁保证小偷再也偷不走了，于是我拿着钱去买了些益力多，跟同事分享了，心情还是比较愉…"}, {"id": "6993140860065939493", "title": "js的leetcode之路1-\"两数之和\"与\"斐波拉契数列\"", "desc": "这是我参与8月更文挑战的第6天，js的leetcode之路1-\"两数之和\"与\"斐波拉契数列\"活动详情查看：8月更文挑战 题目1 给定一个整数数组 nums 和一个目标值 target"}, {"id": "6844903544575754254", "title": "2018 年最值得关注的 JavaScript 趋势", "desc": "2018JavaScript的趋势预测，作为前端开发者，知道总比不知道的好。这篇文章的干货也不少喔！"}, {"id": "6995824534821552159", "title": "关于作用域与作用域链", "desc": "作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。"}, {"id": "6992474087519944717", "title": "JavaScript 基础（四）", "desc": "数组是JavaScript中很重要的一种引用数据类型用来表示一系列有序数据的集合，我们需要了解各种操作方法来操作数组，才会在工作中使用数组时得心应手"}, {"id": "6995820680830779429", "title": "JavaScript 正则表达式的 5 个方法", "desc": "现在 JavaScript 非常强大，可以用它做很多事情，移动应用程序、网站、网络应用程序、游戏，甚至可以包括人工智能。在本文中，将介绍一些 JavaScript 中的编写正则表达式的常见用法。"}, {"id": "6844904001532755976", "title": "重构：烧脑判断大扫除", "desc": "给各位大佬泡上一杯82年的卡布奇诺，细细品味。 优点： if else 最为常见，是所有程序员最熟悉判断语句，可以包含复杂条件。 缺点： 逻辑过多就会变得非常冗长难以理解。 优点： 多种平行条件下更加简洁直观，可跳出，性能更优。 缺点： 同条件的逻辑过多就会变得像裹脚布，嵌套以…"}, {"id": "6969486853204344863", "title": "金额格式化", "desc": "背景 在用 echarts 显示柱状图的时候，希望在柱状图的外面显示数据。通过设置 label 为 true，是显示了，但因为 echarts 内部做了处理，纵坐标和鼠标滑上去显示的都是千分位逗号隔开"}, {"id": "6994612829437296647", "title": "彻底弄懂base64的编码与解码原理", "desc": "背景 base64的编码原理网上讲解较多，但解码原理讲解较少，想要彻底了解base64的编码与解码原理，请耐心看完此文，你一定会有所收获。 编码原理 Base64编码将字符串以每3个8字节子序列拆分成"}, {"id": "6844903693020758029", "title": "rem, vw, 还是...? 各凭本事的移动端适配方案", "desc": "2018年最后的法定假期都已经结束了，我相信大部分正在进行或曾经进行过移动端页面开发的同学都或多或少的了解过使用rem进行移动端页面适配的方案以及使用vw的方案，(没了解过的同学可以参见大漠老师的这两篇文章 使用Flexible实现手淘H5页面的终端适配和再聊移动端页面的适配)…"}, {"id": "6999511304553627678", "title": "【知识点】曾经忽略的arguments", "desc": "众所周知，前端知识体系繁杂，需要掌握的内容瀚如星海，然后星河璀璨，学习和实践的过程很有趣，但是我自身体会，不知道为何有些知识点比较容易被忽略。"}, {"id": "6991673796625186829", "title": "JavaScript 异步编程", "desc": "内容概述 众所周知目前主流javascript环境都是以单线程的模式去执行的javascript代码。 采用单线程模式工作的原因 采用单线程工作的原因与它最早的涉及初衷有关，最早的javascript"}, {"id": "6844904082714984461", "title": "什么是时间分片（Time Slicing）？", "desc": "根据W3C性能小组的介绍，超过50ms的任务就是长任务。 根据上图我们可以知道，当延迟超过100ms，用户就会察觉到轻微的延迟。 所以为了避免这种情况，我们可以使用两种方案，一种是Web Worker，另一种是时间切片（Time Slicing）。 我们都知道，JS是单线程，所…"}, {"id": "6844903972898095118", "title": "前端性能优化实践 之 百度App个人主页优化", "desc": "性能是每个前端工程师都应该关注的话题，通用的优化手段已有许多文章和实践，就不再赘述，本篇以百度App个人主页为例，聊聊针对业务特点进行的一些性能优化实践。 适用于：传统意义的优化手段能用的都用了：打包拆包，缩减体积和 HTTP 请求数、CDN和按需加载等，但性能方面仍不太理想。…"}, {"id": "6844903519636422664", "title": "禁止蒙层底部页面跟随滚动", "desc": "弹窗是一种常见的交互方式，而蒙层是弹窗必不可少的元素，用于隔断页面与弹窗区块，暂时阻断页面的交互。但是，在蒙层元素中滑动的时候，滑到内容的尽头时，再继续滑动，蒙层底部的页面会开始滚动，显然这不是我们想要的效果，因此需要阻止这种行为。 关闭蒙层时，移除以上样式。 简单方便，只需添…"}, {"id": "6844903652960763911", "title": "hey，你的Event Loop", "desc": "我们都知道JavaScript是单线程的，也就是说同一时间只能干一件事。这是因为JavaScript主要是用来操作DOM的，如果变成多线程，浏览器就懵逼了，不知道该听谁的了。但是虽然js是单线程，但是完全可以模拟多线程，靠的就是Event Loop。 我们都知道js中的代码分 …"}, {"id": "6844904100052615181", "title": "精读《Webpack5 新特性 - 模块联邦》", "desc": "我们知道 Webpack 可以通过 DLL 或者 Externals 做代码共享时 Common Chunk，但不同应用和项目间这个任务就变得困难了，我们几乎无法在项目之间做到按需热插拔。 模块联邦是 Webpack5 新内置的一个重要功能，可以让跨应用间真正做到模块共享，所以…"}, {"id": "6978685539985653767", "title": "Coding Writing 好文召集令｜后端、大前端双赛道投稿，2万元奖池等你挑战！", "desc": "hi，掘友们～ 掘金好文召集令夏日来袭，2万元奖池等你投稿！ 经过6月的30天更文挑战，相信很多掘友已经形成了持续沉淀复盘、坚持创作的好习惯，而即将在7月1日正式启动的「coding writing "}, {"id": "7005348792157339684", "title": "手把手带你玩转有趣的粒子特效", "desc": "之前在练习写粒子特效的时候发现有些特效的实现跟物理知识有很大的关系，后来又碰巧发现了一本神书，它教你如何运用物理数学知识来模拟实现一些自然界的特效，本文将带你从零开始实现一个由物理驱动的粒子特效。"}, {"id": "7007683714654142472", "title": "原生js实现MVVM核心框架", "desc": "MVC是一种框架模式，也是在学习前端时最先接触的框架模式，而MVP与MVVM都是在MVC的基础之上演化而来，三者各有优劣，本文主要按照下面思维导图进行介绍。"}, {"id": "6999789682766659615", "title": "「在性能优化中妙用Promise」寒草🌿 教你对接口请求进行合并", "desc": "本文是妙用 Promise 实现 Deferred，并以此为基础实现合并接口请求，提高service层接口的性能与可用性。是一次有趣的Promise性能调优实践～"}, {"id": "7005047744737837093", "title": "人生重开模拟器--自动重开模拟器", "desc": "最近痴迷人生重开模拟器，玩儿了很久也没开出像样的人生，所以灵光一现决定做个自动人生重开，看看，即使重开了，我们的人生大概会过的怎么样。 不废话直接上教程！ Life Restart (syaro.io"}, {"id": "7006919355686453279", "title": "浅谈前端AST的概念与实际应用", "desc": "抽象语法树（Abstract Syntax Tree）简称AST，顾名思义，它是一棵树，用分支和节点的组合来描述代码结构。他可以让计算机理解我们写的代码。"}, {"id": "6994950484343652360", "title": "使用javascript写shell脚本(四) 掘金自动签到脚本以及发送邮件", "desc": "“这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战” 本文主要讲解一个掘金自动签到的脚本如何写。 之前的文章： javascript写shell脚本一 基础操作 javascript写sh"}, {"id": "6991297852462858277", "title": "【今天你更博学了么】一个神奇的前端动画 API requestAnimationFrame ｜8月更文挑战", "desc": "做前端少不了跟动画打交道，那么实现一个动画有哪些方式呢？本文主要学习 requestAnimationFrame API， 顾名思义，请求动画帧，也称帧循环。"}, {"id": "6844904200917221389", "title": "由浅入深，66条JavaScript面试知识点", "desc": "我只想面个CV工程师，面试官偏偏让我挑战造火箭工程师，加上今年这个情况更是前后两男，但再难苟且的生活还要继续，饭碗还是要继续找的。在最近的面试中我一直在总结，每次面试回来也都会复盘，下面是我这几天遇到的面试知识点。但今天主题是标题所写的66条JavaScript知识点，由浅入深…"}, {"id": "7006512922511802375", "title": "设计模式之--迭代器模式", "desc": "1.定义 迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部结构，也"}, {"id": "6991992950876028959", "title": "【SSD系列】傻傻的，3行代码一个订阅发布中心，不会不知道吧 ｜8月更文挑战", "desc": "订阅发布模式前端无处不在，浏览器本身自带了，很多情况下，你根本就不需要手写或者引用第三方库，我们一起来傻傻的乐呵乐呵的用最少的代码来实现吧。"}, {"id": "7006115835118878750", "title": "if/else和switch的替代方法", "desc": "在JavaScript中复杂的条件判断经常会导致代码变得混乱，一长串的if/else或者switch会使代码块变得臃肿。我们可以有更便捷的方式来处理这种条件判断。"}, {"id": "7006184750184562701", "title": "vue项目中加入cnzz站长统计", "desc": "中午领导发来一段代码，让加在前几天上线的一个项目中，代码如下： 我刚拿到代码也是一脸懵逼，仔细一看，这他喵的不就是一个script标签嘛，好办，直接加在html代码中，因为是vue项目，只有一个htm"}, {"id": "6999126516852490253", "title": "chrome地址栏命令和快捷键，强大到天际，你知道多少!", "desc": "chrome地址和快捷键记得好，根本没菜单什么事！ chrome地址和快捷键记得好，根本没菜单什么事！"}, {"id": "6939774328858738696", "title": "金三银四的前端社招面经", "desc": "目前工作快四年，年后投了一波简历，这里整理了一下新鲜出炉的前端面经，需要的可以自取。 面试挺累人的，每天下班后赶回家面试，有时候干脆找个会议室偷偷摸摸面试。面了将近一个月，目前还没挂过，但由于各种因素，又都拒了。。。现在又要开始新一轮的面试了，祝自己好运吧。 看到评论区里面不少…"}, {"id": "7003551138100281352", "title": "即将到来的ECMAScript 2022标准", "desc": "前言 ES2021 或 ES12 在今年夏天早些时候发布(具体的ES2021新特性，可以查看这里)，现在我们来看看ES2022 会带来什么有意思的新特性。 在本文中中将介绍并解释在规范的最新草案中已被"}, {"id": "6995333362479185928", "title": "【SSD】掘金的抽奖，“拆穿她“，然后实现一个，顺便封装一个库", "desc": "掘金抽奖，不中大奖，自己复原UI, 中大奖，顺便封装一个库，不问格子数，自定义起始位置，支持多个格子同一礼物，一起来学习吧。"}, {"id": "7006914907178287111", "title": "JavaScript防抖与节流", "desc": "为什么要有防抖与节流 如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕，此时我们可以采用 debounce（防抖）和 throttle（节流）"}, {"id": "7004606483870515213", "title": "精读《捕获所有异步 error》", "desc": "假设代码逻辑没有错误，那么剩下的就是异常错误了。 由于任何服务、代码都可能存在外部调用，只要外部调用存在不确定性，代码就可能出现异常，所以捕获异常是一个非常重要的基本功。"}, {"id": "6993898348168085534", "title": "聊聊让人头疼的正则表达式", "desc": "遇到正则头疼的童靴可以看过来，或者是想学习正则的童靴们，也欢迎各位正则大佬进来提意见，各位童靴可以在下方留下你开发中使用到的正则。"}, {"id": "6978675140359880712", "title": "今天聊：如何深度探索图可视化与分析能力", "desc": "图可视化从字面意思来看，可能会认为中文的图会代表图像、图画，但是事实上我们在这个领域来看，它不是指这样的一种图像或图画，也不是指我们视觉上所看到的这种节点和边的这种表达形式。"}, {"id": "6990335973821251621", "title": "ES6中的生成器函数是什么？", "desc": "生成器函数可以在中间暂停一次或多次，之后可以重新恢复。当标准函数被调用时，控制将由被调用函数控制，直到它返回为止，但是生成器函数允许调用函数控制被调用函数的执行。"}, {"id": "6844904082147115022", "title": "如何写出优雅健壮的代码？", "desc": "一直以来，关于“代码规范”的话题都备受关注，业界甚至有很多流传甚广的段子不断调侃之。既然代码规范能引起这么大的共鸣，那么今天我们谈谈一个程序员的自我修养——如何写出优雅的代码？ a(‘#a’, ‘red’)是个好函数，帮助我们简单实用地改变某个元素，但问题来了，如果第一次使用改…"}, {"id": "6844903656404303879", "title": "axios二次封装学习", "desc": "设置一个cancelFlag作为标志符，默认为true，在请求拦截器时，判断如果cancelFlag为true，就可以发送请求，且将cancelFlag设为false。当cancelFlag为false,就取消请求。在响应拦截器中再将cancelFlag设为true。说明只用当…"}, {"id": "6943908939822006308", "title": "我的前端请求我做主", "desc": "上述例子在开发中经常遇到，解决倒是很简单，但如何保证页面的完整性是一个问题。 我们需要请求三个接口，分别是接口a、接口b和接口c。请求过程中由于服务不稳定导致a成功了但b和c失败了。这种情况我们要么直接报错误信息，有点不友好；要么只使用a返回的数据，一般这种情况前端都会有默认值…"}, {"id": "6987400859877376008", "title": "Day.js实战", "desc": "实际需求 最近在做项目时，需要定制一个如下图的时间范围选择组件，提供一些快捷选择项，我们来看看用day.js如何搞定它。 基本使用 先创造一个dayjs对象 valueOf方法：获取时间戳 forma"}, {"id": "6844903600913645582", "title": "你需要知道的单页面路由实现原理", "desc": "最近开发的埋点项目，需要记录用户行为轨迹即用户页面访问顺序。需要在页面跳转的时候，记录用户访问的信息（比如 url ，请求头部等），非单页面应用可以给 window 对象加上一个 beforeunload 事件，在页面离开时触发采集开关，但是现在很多业务是单页面应用，用户切换地…"}, {"id": "6844903737056559117", "title": "quicklink 为你的页面实现秒开", "desc": "可以在空闲时间预获取页面可视区域（以下简称视区）内的链接，加快后续加载速度。 预获取视区内的 URL（使用<link rel=prefetch>或 XHR）。 可根据请求优先级进行控制（若支持 fetch() 可进行切换）。 该项目旨在为网站提供一套解决方案，预获取处于用户视区…"}, {"id": "6844903609885261832", "title": "六种排序算法的JavaScript实现以及总结", "desc": "最近几天在系统的复习排序算法，之前都没有系统性的学习过，也没有留下过什么笔记，所以很快就忘了，这次好好地学习一下。 首先说明为了减少限制，以下代码通通运行于Node V8引擎而非浏览器，源码在我的GitHub，感兴趣的话可以下载来然后运行试试。 只需要输入数组长度，即可生成一个…"}, {"id": "6874730791134642184", "title": "前端如何优雅处理类数组对象？", "desc": "Leo 部门最近来了位前端实习生 Robin，作为师傅，Leo 认真的为 Robin 介绍了公司业务、部门工作等情况，还有前端的新人学习地图。 Robin 满脸期待望着师傅，对类数组对象更加充满期待。 所谓 类数组对象，即格式与数组结构类似，拥有 length 属性，可以通过索…"}, {"id": "6993604038721830948", "title": "二次封装一个请求工具类", "desc": "二次封装一个请求工具类 契机 在项目开发过程中，除了原生 fetch API，我一直使用两个request 框架：axios 和 阿里的useRequest。 由于项目大多为后台管理系统，自然免不了大"}, {"id": "6844904148631027726", "title": "简明扼要聊聊 Vue3.0 的 Composition API 是啥东东！", "desc": "下面我们就一起来简明扼要聊聊，用人人都听得懂的话来阐述 Vue3.0 Composition API。 API：应用程序接口（Application Programming Interface），指一些预先定义的函数，用来系统之间、组件之间、函数之间交互的一种约定。 可以理解它…"}, {"id": "6844903607985258510", "title": "记一次vue+element+echarts项目的优化（如何轻松将项目性能提升70%）", "desc": "最近在做一个项目，技术栈为vue全家桶 + element-ui + echarts，打包后发现有1.44M，首屏体验很差。这能忍？果断开始优化。下面说说我是如何将一个打包后1.44MB的项目变成打包后只有0.42MB，性能提升70% 的。 vue-cli提供了一个很方便的查看…"}, {"id": "7004434952825602084", "title": "JS进阶一些小技巧", "desc": "JS进阶一些小技巧：针对数据操作，针对对象操作，数据类型转换，hacker 方法，常用基础操作。项目使用更方便。"}, {"id": "6844903993412583431", "title": "大厂面试必考知识点：Promise 注册微任务和执行过程", "desc": "Promise 大伙太熟悉了，简单的你都会，但是“刁钻”的大厂面试官可能会问的不那么一样，比如抛出几道题，让你来看看 Promise 的执行过程。 那么我们就来一起来深入剖析 Promise 的注册微任务和执行的完整过程。能正确的使用 Promise 且能做到知其然知其所以然~…"}, {"id": "6995429777754570782", "title": "项目中的代码优化总结", "desc": "记住，您编写的每一行代码都会有相应的阅读成本。看这代码的人可能是团队的成员，甚至是你未来的自己。本篇是对工作中代码优化的一些总结"}, {"id": "6909278155744215053", "title": "关于“云编辑器”的一个想法", "desc": "“云编辑器”这个叫法是我自创的，国内国外我都没仔细调研过。如果恰巧碰到做这个业务的朋友，欢迎给我评论留言。 当然，最初想法是我提出来的，但后面经过讨论，又进一步完善，才达到了本文的内容。是整个 wangEditor 团队的讨论结果。 最初的想法，大约在 2020 年春，开始组建…"}, {"id": "6963071339108237319", "title": "图片瀑布流，就是如此简单（so easy）", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 什么是图片瀑布流 用一张花瓣网页的图片布局可以很清楚看出图片瀑布流的样子： 简单来说，就是有很多图"}, {"id": "7001486045619585031", "title": "夯实基础篇----js中的Date对象", "desc": "日常开发中，日期时间也是我们经常会使用到的，js也给我们提供了一个获取日期时间和操作日期时间的方法`Date对象`，下面我们一起来学习一下吧~"}, {"id": "6984364119134568462", "title": "Http缓存机制整理", "desc": "HTTP缓存：用于临时存储（缓存）Web文档（如HTML页面、js及图像），以减少服务器延迟的一种信息技术。"}, {"id": "6844903773979017223", "title": "半小时撸一个抽奖程序", "desc": "需求总是很紧急，昨天正在开会收到人力需求，有时间做个抽奖吗?（now 下午四点12，年会五点开始。）还没能等我拒绝，人事又补了一句做不出来我们就不抽奖了，我擦瞬间感觉要是搞不出来会被兄弟们捅死的节奏，默默的删除了没时间做的消息，重新写了四个字名单给我。 还好去年前年都是我搞得很…"}, {"id": "6844903798851239950", "title": "为何你始终理解不了JavaScript作用域链？", "desc": "掘金上关于作用域和作用域链的讨论非常多，但少有人来讲清楚JS中相关的机制，这里我就捡一些大佬们看剩的知识，来讲讲理解作用域之前的准备。 想直接看解析的请跳到：2. JavaScript是如何执行的? 1. 理解前的普及：编译原理 把词法单元流数组转换成一个由元素逐级嵌套所组成的…"}, {"id": "6844903581582098446", "title": "从babel讲到AST", "desc": "babel的过程：解析——转换——生成。 比如我们在读一句话的时候，我们也会做分词操作，比如：“今天天气真好”，我们会把他切割成“今天”，“天气”，“真好”。 那换成js的解析器呢,我们看一下下面一个语句console.log(1);,js会看成console,.,log,(,…"}, {"id": "6844903679607177229", "title": "webpack4打包vue前端多页面项目", "desc": "之前一直用的脚手架，这次自己搭建webpack前端项目，花费了不少心思，于是做个总结。 public文件夹存放一些静态文件，src文件夹存放源码。每个页面通过一个入口文件（page1.js，page2.js,..）生成vue实例，挂载到插件生成的html文件的#app元素上。 …"}, {"id": "6844903854039891981", "title": "探索el-table列宽自适应内容的实现", "desc": "最近项目上线之后，产品对首页的列表提出了列宽自适应内容的需求，即列的宽度由当前列中内容最宽的一个单元格决定（单元格内容不换行）。项目中的表格使用的是element-ui的table组件，非常强大，满足了各种各样的需求，例如固定列，固定表头，展开行等等。但是面对这样的需求，貌似并…"}, {"id": "6844904004011425805", "title": "如何设计一个 WebGL 基础库", "desc": "要想使用 WebGL 直通 GPU 的渲染能力，很多同学的第一反应就是使用现成的开源项目，如著名的 Three.js 等。但是，直接套用它们就是唯一的选择了吗？如果想深入 WebGL 基础甚至自己造轮子，又该从何下手呢？本文希望以笔者自己的实践经验为例，科普一些图形基础库设计层…"}, {"id": "6844903925628436488", "title": "axios设置content-type", "desc": "用axios总觉得莫名的这个那个出错，就简单的总结了下。 cdn的地址https://unpkg.com/axios@0.19.0/dist/axios.min.js，版本号可以更换，没有版本号就是最新发布的。 不过，当前这年头，很多时候npm i axios即可。 get请求…"}, {"id": "6874029878950248455", "title": "从今天起构建你的JavaScript世界", "desc": "。。。 这些问题是交流群中同学们的提问，相信或多或少的同学们都经历过这个阶段。想要解决这些问题，我决定先从一本书说起。 一位名叫斯科特·杨的精神小伙儿因快速学习而成名，他将自己的学习方法全部总结到了这本书里。 当然，除了掌握方法以外，还要做到时间管理上的极度自律，这里还是要向罗…"}, {"id": "6844903616772309006", "title": "移动端常见bug汇总002", "desc": "上一篇之后我从各个小伙伴那里收集到了第二波移动端常见的bug以及其解决方案，部分解决方案可能不准确或者存在问题，希望有正确解决方案的给与评论。 备注：文中的bug收集于网络，解决方案可能并不准确，欢迎大家提供更加完整的方案。 Q: 移动端使用fastclick之后，在ios环境…"}, {"id": "6997606522037469192", "title": "LeetCode两两交换链表中的节点 | 算法练习系列", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 前言 今天依旧是LeetCode上边的一道链表题目，两两交换链表中的节点，链表这东西真的上头，做着还挺有意思，做链表提我们一定要明确谁的n"}, {"id": "6996680993398587400", "title": "剑指 Offer第61题-扑克牌中的顺子", "desc": "这是我参与8月更文挑战的第14天，活动详情查看： 8月更文挑战 题干 从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大"}, {"id": "6886265504378388487", "title": "前端科普系列（5）：ESLint - 守住优雅的护城河", "desc": "【前端科普系列】帮助阅读者了解web前端，主要覆盖web前端的基础知识，但不深入讲解，定位为大而全并非细而精，适合非前端开发的同学对前端有一个系统的认识，能更好的与前端开发协作。尽可能的写成科普类文章"}, {"id": "6994770636677578759", "title": "JS如何获取CSS属性", "desc": "如何用JS去获取CSS属性，通过介绍style，getComputedStyle，getPropertyValue等来获取css属性值。"}, {"id": "6844903508446019597", "title": "利用 javascript 实现富文本编辑器", "desc": "不打算考虑兼容性，所以没有必要采用UEditor这么重的插件。为此决定自研一个富文本编辑器。本文，主要介绍如何实现富文本编辑器，和解决一些不同浏览器和设备之间的bug。"}, {"id": "6844903613001629703", "title": "快来围观一下JavaScript的Proxy", "desc": "当用到address信息时，再通过person拼接。 第一个方法的主要弊端是污染了原有的对象，而第二种方法就很不灵活。现在我们可以通过Proxy实现比较好的效果: 所以在拦截方法注意点很多，不然很容易出现问题。 喜欢本文的小伙伴们,欢迎关注我的订阅号超爱敲代码,查看更多内容."}, {"id": "6844903718677118990", "title": "[译] 你不知道的 console 命令", "desc": "相比使用 console.log 去输出值，我们有更多的方式去调试 JavaScript。你以为我要聊调试器么？不不不你想错了。 告诉写 JavaScript 的人应该使用浏览器的调试器去调试代码，这看来很不错，并且肯定有其适用的时间和场合。但是大多数时候你仅仅只想查看一段特定…"}, {"id": "6974212122624393246", "title": "3分钟实现霓虹灯绘画板效果 html+css+js", "desc": "这是我参与更文挑战的第15天 效果： 实现： 1. 定义标签，.main是底层盒子，.txt是文字，.dot是图中的小圆圈，用js动态大量添加。 style=\"- -color: red;\" 这个是v"}, {"id": "6932029493666119687", "title": "commander.js 原理解析", "desc": "commander.js 7.0.0版本的核心代码就一个文件index.js，2200多行代码，代码的注释比较丰富，代码可读性也是不错的，感兴趣的同学可以通读一下。 命令行实例执行program.option(\"-c, --cheese\", \"add cheese\")，会创建一…"}, {"id": "6984425742423556109", "title": "JavaScript 基础（一）", "desc": "合抱之木,生于毫末;九层之台,起于累土。作为一个前端，不管技术更新多快，JavaScript基础知识永远是最重要的知识。本文从简介、书写、常量、变量、数据类型章节介绍了一些基础知识"}, {"id": "6844903571322847245", "title": "如何学习一门编程语言或框架", "desc": "年关刚过，相信已经有不少同学看着肚腩，习惯性地开始制定新年的运动计划了。在这种时候如果你还看到了这篇文章，说明你是热爱学习（工作不饱和）的。大鱼大肉，满腹油腻之时看干货并不合时宜，所以本次就翻译一篇指导大家怎么学习编程语言或框架的软文，来作为开启大家新年学习之门的润滑剂吧。 由…"}, {"id": "6992384984430411807", "title": "在浏览器和 Node.js 中更精确地测量执行时间", "desc": "测量应用程序中的某个片段需要多长时间是很重要的。 在前端中，我们有 Navigation TimingAPI，Resource Timing API 以及 User Timing API 收集精确的指"}, {"id": "6844903847941390349", "title": "前端必备自定义滚动库——iScroll", "desc": "很多场景，如果使用body的滚动会很不方便，这时候，就会使用某个元素的局部滚动，恶心的事情就会发生了。 pc端web，windows系统的浏览器会出现丑陋的滚动条。(其实也有最新的css样式可以解决，兼容性欠佳) 手机移动端，ios浏览器无法惯性和弹性滑动（默认使用浏览器滚动，…"}, {"id": "6996681998429323301", "title": "当想要实现图片懒加载时，你会想起IntersectionObserver么？", "desc": "图片懒加载，即当图片进入显示器“视口”时，再来加载相应的图片。我们今天想要介绍IntersectionObserver这个浏览器API来实现图片懒加载的功能。"}, {"id": "6844903566826536968", "title": "怎样给文件命名才能显得更加专业", "desc": "写这篇博客的动机很简单，就是我周末闲的无聊，爬了github上star数前1000的js项目的所有文件的名称，看看大佬们都喜欢给文件和目录取什么名字，我跟着学两招也好显得我比较专业。 注意是js项目啊，你要是搞java的搞PHP的，也跟着学搞不好会被拿去祭天。 排除掉了.bab…"}, {"id": "6844903635223068680", "title": "【译】5分钟学习 JS 一些小技巧", "desc": "一些日常开发技巧，意译了。 就这些，希望上面这些优雅的技巧可能帮助你编写更漂亮的JavaScript。"}, {"id": "6993540772456857613", "title": "终于知道哈希表是什么了！", "desc": "几乎所有的编程语言都有直接或间接地应用哈希表这种数据结构。哈希表通常是基于数组实现的，它神奇的地方在于对下标值的一种变换，这种变换称为哈希函数"}, {"id": "6926516835177365511", "title": "使用 Google TWA 把 Web 移形换影成原生 App(一)", "desc": "作者：ICBU王浩宇背景对于alibaba.com来讲，随着ICBU全球买，全球卖战略的迅速发展，弱网弱地区的用户日益增多，其中印度地区用户已经超过美国地区用户成为网站最大的用户来源。但这部分用户的网"}, {"id": "6972036399503507487", "title": "ES6尾调用优化", "desc": "ES6中函数比较有趣的变化有尾调用系统的引擎优化。尾调用是指函数作为另一个函数的最后一条语句被调用。"}, {"id": "6844904052812169229", "title": "关于Vue和React的一些对比及个人思考（中）", "desc": "Vue和React都是目前最流行、生态最好的前端框架之一。框架本身没有优劣之分，只有适用之别，选择符合自身业务场景、团队基础的技术才是我们最主要的目的。 博主1年前用的是Vue框架，近半年转技术栈到React框架，对于Vue和React都有一些基本的了解。接下来博主将与大家通过…"}, {"id": "6928043092142456839", "title": "Vite 会成为2021年最受欢迎的前端工具吗？ ", "desc": "说在前面 测试不同的前端构建工具一直以来是笔者的一个奇怪的嗜好，因为说实话,webpack 真的太难用了。上手成本高、插件鱼龙混杂、最难受的就是启动dev太慢，这些都是它的缺点。直到vite出现，笔者"}, {"id": "7001724209999118366", "title": "js基础知识", "desc": "数组塌陷 在循环的时候改变了原本数组的长度 就是把 i-- 深拷贝 JSON.stringify() : 把对象转换成json字符串 JSON.parse(): 把json字符串转成对象 JSON.p"}, {"id": "6994426190979301412", "title": "如何在用户停止输入 JavaScript 后执行函数", "desc": "我们开发中可能经常会遇到这样的问题，我们想要制作一个输入一个关键字，实时显示需要搜索的内容，但这会使你在每次触发事件时，都会执行你想要执行的筛选函数。但我们只想在用户停止在文本框中键入文本后在执行搜索"}, {"id": "6963977794715926536", "title": "浅谈前端异常监控平台实现方案", "desc": "异常捕获是改善软件质量的跟踪手段之一，常见的方式是记录日志，从日志分析异常问题进而跟进。对于前端项目来说，异常可能是后端接口数据导致，可能是前端本身业务逻辑问题导致"}, {"id": "6982867349162426381", "title": "前端面试每日 3+1 —— 第815天", "desc": "今天的知识点 (2021.07.09) —— 第815天 (我也要出题) [html] 使用HTML5制作一个多层的生日蛋糕 [css] 使用css3绘制在道路上行驶的汽车动画特效 [js] 写一个方"}, {"id": "6946032418520301605", "title": "Vue3 源码中的位运算，又一个面试考点", "desc": "在vue3的源码中，实现了一个ShapeFlags（对元素进行标记判断是普通元素、函数组件、​插槽、 keep alive 组件等等）这里不展开讲。 上面的代码都是vue3源码中的片段，其中有&#x3C;&#x3C;,&#x26;,|=这几个平时基本上不会用到运算法，本文就总结…"}, {"id": "7001709425371119630", "title": "在电脑上弹钢琴是什么体验？", "desc": "学钢琴？用电脑就够了，实现网页版钢琴88音弹奏 一、起因 其实自己想学钢琴很久了，一直没有机会，偶然看到了网上有人做了网页版的钢琴，我试玩了一下，发现大多只有10多个音，这是完全无法满足我的，对此有了"}, {"id": "6844903844573347854", "title": "玩转Chrome DevTools，前端调试的秘诀", "desc": "Chrome DevTools作为一名前端开发工程师的赖以生存的工具，日 常的断点调试，抓包http数据都只是基本操作。那么，你还知道他的一些高级用法吗？开发人员不可避免的需要维护别人写的代码，当你面对几十万行代码的大项目的时候，码海啊，茫茫啊，随波逐流，崩崩溃溃，怎么快速查找…"}, {"id": "6844903907651485704", "title": "深入理解全能的 Reducer", "desc": "这两段代码在功能上是等价的，都是数组中所有数字的总和，但是它们之间有一些理念差异。让我们先研究一下 reducer，因为它们功能强大，而且在编程中很重要。有成百上千篇关于 reducer 的文章，最后我会链接我喜欢的文章。 要理解 reducer 的第一点也是最重要的一点是它永…"}, {"id": "6994973943689904165", "title": "深入JS 之 面试官经常问的 THIS  闭包  let\\const\\var  你会了吗？", "desc": "8. 关于this指向的题目分析 9. 关于闭包的分析 10.关于let、const、var的区别"}, {"id": "6844903665308794888", "title": "从一道面试题认识函数柯里化", "desc": "最近在整理面试资源的时候，发现一道有意思的题目，所以就记录下来。 首先来分析下这道题，实现一个 multi 函数并依次传入参数执行，得到最终的结果。通过题目很容易得到的结论是，把传入的参数相乘就能够得到需要的结果，也就是 2X3X4 = 24。 那么如何实现 multi 函数去…"}, {"id": "6854573211498053639", "title": "计算机网络知识大汇总(建议精读)🍊", "desc": "http0.9只是一个简单的协议，只有一个GET方法，没有首部，目标用来获取HTML。 HTTP1.0协议大量内容：首部，响应码，重定向，错误，条件请求，内容编码等。 因为不足缺陷，就有了http1.1。 http1.1中浏览器再也不用为每个请求重新发起TCP连接了，增加内容有…"}, {"id": "6997003339422531614", "title": "call、apply、bind 区别与实现", "desc": "其实call、apply、bind大家都用过，这三个方法都可以改变函数整体内部的this指向，下面就简单说下这三个方法的使用以及不同点。 call call 是属于所有Function的方法，类似于 "}, {"id": "7002192637625106468", "title": "JS 函数的执行时机", "desc": "解释函数的执行时机 问：为什么会打印出6个6？ 首先我们看一下setTimeout()的几个小知识 setTimeout最快执行时间是4毫秒。 使用setTimeout的函数会比当前队列的函数慢执行，"}, {"id": "6844903661982728200", "title": "20分钟上手 webAssembly", "desc": "Web应用的蓬勃发展，使得JavaScript、Web前端，乃至整个互联网都发生了深刻的变化。前端开始承担起了更多的职责，于是对于执行效率的诉求也就更为急迫。除了在语言本身的进化，Web从业者以及各大浏览器厂商，也在不停地进行探索。2012年Mozillia的工程师提出了Asm…"}, {"id": "6844903875456008199", "title": "深入理解 JavaScript, 从作用域与作用域链开始", "desc": "1. 什么是作用域 作用域是你的代码在运行时,某些特定部分中的变量,函数和对象的可访问性。换句话说，作用域决定了变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。 作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 No…"}, {"id": "6844903576658001933", "title": "H5 分层屏幕适配", "desc": "屏幕适配应当指内容 适配区 和 屏幕区 间的适配关系。 单屏适配有 contain、cover 或 fill，多屏常见是 依宽 。 contain 和 cover 还需要 定位 来处理留白和超出的内容。 而同一个 H5 里不同内容往往用不同适配方式，即 分层。 对于屏幕适配这类…"}, {"id": "6844904128666320909", "title": "Boa: 在 Node.js 中使用 Python", "desc": "Hello，大家好，有一段时间不见了。 这次主要给大家带来一个好东西，它的主要用途就是能让大家在 Node.js 中使用 Python 的接口和函数。可能你看到这里会好奇，会疑惑，会不解，我 Node.js 大法那么好，干嘛要用 Python 呢？如果你之前尝试了解过一些机器学…"}, {"id": "6844904132189519885", "title": "最全面，最有良心的Proxy入门总结", "desc": "proxy是ES6,新增的一个“拦截器”，也可以理解成是ES6，新增的一种元变编程功能。 proxy用于修改某些操作的默认行为，等同于在语言层面作出修改。 Proxy构造函数接受两个参数，第一个参数是所要代理的目标对象；第二个参数是一个配置对象，对于每一个被代理的操作，需要提供…"}, {"id": "6903776531986776077", "title": "ES2020新特性你了解吗？", "desc": "1.变量私有化我们定义类，是为了更好的抽象和复用，但类中有一些变量我们不希望外界可以直接修改或使用，我们更希望他是私有化的，那么可以在这些变量前添加“#”来达到私有化的目的。示例：2.Promise."}, {"id": "6993120470170075143", "title": "iOS端解码base64加密数据 时失败(含解决办法)", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 之前遇到个问题，是 IOS 用户base64解码失败。 问题描述： 用户淘宝授权，淘宝给的授权信息经后端 base64 加密之后拼在url中"}, {"id": "6844904096403554318", "title": "揭密浏览器指纹：原来我们一直被互联网巨头监视，隐私在网上裸奔、无处可藏", "desc": "今天讲⼀些让您按捺不住和欲求不满的反浏览器追踪技术，揭开你是如果被互联网巨头监控的。 场景一：在⽹站上浏览了某个商品，了解了相关的商品信息，但并没有下单购买，甚⾄没有进⾏登录操作，过两天⽤同台电脑访问其他⽹站的时候却发现很多同类商品的⼴告。 场景二：在某博客中你有多个小号（水军…"}, {"id": "6844903621444763662", "title": "剖析nodejs的事件循环", "desc": "nodejs是单线程执行的，同时它又是基于事件驱动的非阻塞IO编程模型。这就使得我们不用等待异步操作结果返回，就可以继续往下执行代码。当异步事件触发之后，就会通知主线程，主线程执行相应事件的回调。 以上是众所周知的内容。今天我们从源码入手，分析一下nodejs的事件循环机制。 …"}, {"id": "6844904201953214478", "title": "Number - 十进制和二进制互相转换", "desc": "因为这两个问题在 JavaScript 中都提供了工具，所以直接对需要转换的数套用这两个即可。 很好，看到这里我们可以清晰清楚，Number.prototype.toString() 对于负数是无能为力的。 同时，在 LeetCode 题目【1018-可被5整除的二进制前缀】中…"}, {"id": "6987614572521717767", "title": "节流和防抖", "desc": "防抖和节流属于性能优化，在进行窗口的resize、滚动条scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。 此时我们可以采用deboun"}, {"id": "6844903839628263432", "title": "JS 下载/导出 csv、excel、txt 、img等文件的方法总结", "desc": "1. 调用后端接口导出文件 会打开一个新窗口，开始下载后会自动关闭新窗口。Safair 下载后没有关闭新窗口。 在HTML中，iframe 的属性用src，但在JS中，只有部份浏览器支持修改src(读是没问题)，真正通用的是要修改对应框架的href值。 HTML5中给a标签增加…"}, {"id": "6844904139026104327", "title": "💖CSS + JS 送学妹满屏幕小爱心", "desc": "午饭时间，暗恋已久的学妹拉着我的衣袖：“学长学长，你能不能让这些爱心变成五颜六色的吗~”。 诶呀，口水流出来了。 2.Element.animate() 方法。 1. 画个小爱心 2. 画一大堆爱心 3. 打造魔法棒 接下来我们要打造一把魔法棒，能让我们这些小爱心变成各种各样的…"}, {"id": "6844903593212903431", "title": "[译] 深入浅出 SVG", "desc": "SVG 是优秀且令人难以置信的强大图像格式。本教程通过简单地解释所有需要了解的知识，为您提供 SVG 的概述。 尽管在 21 世纪初被标准化了，SVG（Scalable Vector Graphics 的缩写）是近年来的一个热门话题。 SVG 已经被糟糕的浏览器支持（尤其是 I…"}, {"id": "6844904002535030798", "title": "重学JavaScript之window对象", "desc": "ECMAScript是JavaScript的核心，但如果要在web中使用JavaScript，那么BOM则是真正的核心，BOM提供了很多对象，用于访问浏览器的功能，这些功能与任何网页内容无关。 1. window对象 敲重点：window Mobile 平台的 IE浏览器不允许…"}, {"id": "6938924519793000456", "title": "力扣 (LeetCode)-104. 二叉树的最大深度，图｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 图是网络结构的抽象模型。 每个节点都和一个整数相关联，该整数将作为数组的索引。 广度优先搜索算法和深度优先搜索算法，只有一点不同，那就是待访问顶点列表的数据结构。 题：给定一个图G和源顶点v，找出对每个顶点u，u…"}, {"id": "6925719941962268680", "title": "图片压缩Canvas", "desc": "这里看到压缩效果已经由原来的8.5Mb到了1.6Mb左右,这里有个问题Mac上面的压缩效果没Win好(尴尬了)。 首先需要的是利用这个API来读取文件，实例化之后采用 readAsDataURL 的方式来读取图片的资源路径,这里的兼容性不错，囊阔了几乎所有浏览器版本和平台。"}, {"id": "6844904041495953421", "title": "5个提升你JS编码水平的实例", "desc": "虽然 2020 的今天，各种前端框架、工具林立，而这些框架跟工具也帮我们提前解决了不少麻烦的问题，但是工具始终是工具，扎实的基本功才是最核心的，现在一起来通过几个实际的代码片段来提高我们原生 JS 的编码水平。 答案是：不可以，因为由于历史原因，在判断原始类型时，typeof …"}, {"id": "7002244064166969351", "title": "记最近接触到比较陌生的数组或对象方法", "desc": "Array Array.flat() flat()  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。 语法 参数 depth 可选 指定要提取嵌套数"}, {"id": "6844904045769916423", "title": "从优化到面试装逼指南——网络系列", "desc": "这里有很多方案，例如我们常说的webpack利用splitchunks进行拆包配合一些加载方式，使原本特别大的appjs分成若干个细小的包，webpack优化将会在下一期的专题里讲到。 webp，是一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式，无损压缩后的WebP…"}, {"id": "6970247869722787871", "title": "作用域的延伸", "desc": "从变量、函数的声明提升开始，到作用域、作用域链的重新理解。带你重新回顾作用域引发的一系列问题探讨，再一次巩固js作用域基础。"}, {"id": "6994955819238293534", "title": "学习canvas之实现喵咪跳蛋糕", "desc": "这几天学习canvas看了很多基础API，也用了不少，这里再做一个总结练习，做一个稍微有趣的：喵咪跳蛋糕小游戏，以便来再巩固总结canvas的学习，并且这个游戏也是我十分喜爱的。"}, {"id": "6844903906946842632", "title": "JS中轻松遍历对象属性的几种方式", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致 。如果对象的键-值都不可枚举，那么将返回由键组…"}, {"id": "6844903808200343559", "title": "Eventloop不可怕，可怕的是遇上Promise", "desc": "有关Eventloop+Promise的面试题大约分以下几个版本——得心应手版、游刃有余版、炉火纯青版、登峰造极版和究极变态版。假设小伙伴们战到最后一题，以后遇到此类问题，都是所向披靡。当然如果面试官们还能想出更变态的版本，算我输。 这个版本的面试官们就特别友善，仅仅考你一个概…"}, {"id": "6992174583222632461", "title": "JavaScript生成器 ", "desc": "生成器是ES6新出的一种特殊的函数，调用之后会返回一个生成器对象，它实现了Iterable接口，因此可以用在任何可迭代对象身上"}, {"id": "7006140608783843365", "title": "2021-09-10 异步函数async/await的基本使用", "desc": "async函数是什么 一句话，async函数是generator函数的语法糖；是generator加了内置执行器的结果，返回一个 Promise对象，可以用then来获取结果，进行下一步的操作 基本用"}, {"id": "6872501583607758855", "title": "HOC真的就那么高级吗？你可知道还能这么玩", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆。 在接下来日子，我们每周都会为大家输出好玩、有趣、符合前端发展的技术型文章，这个过程我们一起学习进步💪。如果觉得某位小哥哥/小姐姐写的不错的话，还请不要吝啬你的赞👍哦，每个赞和评论都是对我们最好的支持😊，感谢。 …"}, {"id": "6986797841666703397", "title": "10个自己遵循的 JavaScript 技巧和实践，赶紧收藏吧!", "desc": "废话不多说，直接安排上。 1.使用数字分隔符 当我需要处理大的数字时，这是最常用的运算符之一。当在数字中使用分隔符（只有一个_）时，它看起来比没有分隔的数字要好。"}, {"id": "6922711838924734477", "title": "论前端技术和前端工程之辩", "desc": "在面试的时候, 我们经常会谈论到面试需要考察一个人的技术深度和广度, 但实际操作中, 经常会遇到情况是, 面试造火箭, 进来拧螺丝. 我曾看到知乎中一些做算法的同行曾经讨论过, 关于算法和算法工程之前的区别, 对于算法研究并不是算法工程师的工作, 对于算法工程师而言, 更多的是…"}, {"id": "6993157358868250661", "title": "🚀详解JavaScript系列之数组(六)", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 indexOf/lastIndexOf 区别： indexOf() 是从前向后查找元素的位置。同理，lastIndexOf()是从后向"}, {"id": "7002598223365816327", "title": "js中常用的字符串方法总结", "desc": "之前总结了数组常用的一些方法，今天给大家总结一下常用的操作字符串的方法~快来一起来看看都有哪些吧......"}, {"id": "7006211882923065357", "title": "4.函数执行作用链、闭包、this", "desc": "JavaScript中的函数是一等公民 在JavaScript中，函数是非常重要的，并且是一等功民 可以作为参数传递 也可以作为返回值被返回 自己编写高阶函数(接收函数为参数或者返回另外一个函数) 使"}, {"id": "6992141108755038238", "title": "JavaScript 设计模式之策略模式", "desc": "策略模式指定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。只要业务规则指向的目标一致，并且可以被替换使用，我们就可以使用策略模式来封装。"}, {"id": "6983908579904323598", "title": "Monorepo 进化论 - monorepo 内 Node 部署", "desc": "Node.js 项目部署与纯 Web 项目的不同 在 monorepo 中，纯 web 项目的产物输出无疑是简单的。Webpack 将所有的资源很好的打包/分割/分类并输出至 dist/output "}, {"id": "6968659890512363528", "title": "JS 的原型和原型链", "desc": "JS 的原型和原型链，对于很多初学者来说是个难啃的骨头，因为它涉及到的专业名词也是挺多的，那么这篇文章从解析原型和原型链所涉及的专业名词开始，带你一步一步去理解原型和原型链。它其实并没有那么难。"}, {"id": "6999852851438551071", "title": "【babylonjs】babylonjs实践（七）--材质的纹理", "desc": "【babylonjs】babylonjs实践（七）--材质的纹理【babylonjs】babylonjs实践（七）--材质的纹理"}, {"id": "6989444593448124429", "title": "javascript 函数式编程(1)—柯里化(currying)", "desc": "之前的分享有许多函数编程中的知识点还有没有涉及到，还有就是学习函数式编程是一种思想，我们不是模仿或者生搬硬套，而需要我们通过学习和思考将这个思想或者说方法论融入我们的code 中，成为有助于解决问题"}, {"id": "7001501554901516295", "title": "循环回调函数的基本用法  非常重要", "desc": "一、回调函数 1.回调函数(callback)： 如果把函数当成实参传入到另一个函数里执行，那么这个函数就被称为回调函数。 二、实现一个myForEach方法达到内置forEach效果 三、 怎么循环"}, {"id": "7001499788290031652", "title": "事件监听", "desc": "浏览器的事件模型 所谓的浏览器事件模型就是指： 通过监听函数对事件作出反应，事件发生后，浏览器监听到了这个事件的发生，就会执行对应的监听函数 1. 监听函数的设置 设置监听函数有三种方法： HTML "}, {"id": "6987553223389216805", "title": "this指向，call，apply，bind的区别", "desc": "this指向： ①普通函数调用时，this指向window; ②构造函数调用时，this指向实例对象 ③对象方法调用时，this指向该方法所属的对象; ④通过事件绑定的方法，此时this指向的是绑定事"}, {"id": "6997034926084358158", "title": "JavaScript笔记 | 如何高效操作DOM", "desc": "在了解如何操作DOM之前，我们先来了解下DOM的概念。DOM(Document Object Modal，文档对象模型)，是是JavaScript操作HTML的接口。"}, {"id": "6844903779402252302", "title": "原来JavaScript是这样运行的", "desc": "大家都知道JavaScript是单线程的，单线程就意味着同一时间只能做一件事，那么有同学会问，为什么JavaScript的作者不把它设计成多线程的呢，那样性能不是更好。为了回答这个问题，我们得从JavaScript的用途上来解释了，由于JavaScript是一门脚本语言，被用于…"}, {"id": "6844903847580663816", "title": "Babel 在提升前端效率的实践", "desc": "我们目前采用的是antd + react(umi)的框架做业务开发。在业务开发过程中会有较多频繁出现并且相似度很高的场景，比如基于一个table的基础的增删改查，这个相信大家都非常熟悉。在接到一个新的业务需求的时候，相信有不少人会选择copy一份功能类似的代码然后基于这份代码去…"}, {"id": "6986896618180050975", "title": "js---读取本土.txt文件", "desc": "js读取本地文件 需求： 在本地静态环境下，实现js读取同目录下txt，相当于小白在txt配置一些内容，将配置应用到网页上，大家一般会想到ajax加载，我第一时间想的也是，于是在网上搜罗了几个可行的方"}, {"id": "6985826982797770788", "title": "JS实现队列结构", "desc": "队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，是一种先进先出（FIFO）的数据结构，和栈一样，队列是一种操作受限制的线性表.."}, {"id": "6972349601516879909", "title": "155个JavaScript基础问题（106-115）", "desc": "这是我参与更文挑战的第9天，活动详情查看：更文挑战 106. 输出什么？ 107. 输出什么？ 108. 那些方法修改了原数组？ 109. 输出什么？ 110. 下面的函数干了什么？ 111. 输出什"}, {"id": "6868964474360070152", "title": "Egg.js 试水 - 天气预报", "desc": "Egg.js是一个基于Koa开发的Node.js框架。为企业级框架和应用而生。 官网介绍，Egg奉行『约定优于配置』，按照一套统一的约定进行应用开发，团队内部采用这种方式可以减少开发人员的学习成本。 当然，推荐使用yarn进行包管理。 此时，在http://localhost:…"}, {"id": "6996624834583068702", "title": "JavaScript 的作用域和作用域链，原来就是这么一回事", "desc": "作用域的概念，对于许多新手开发者来说，不是很容易理解，但这个概念也是跟闭包这个老生常谈的知识点有联系。本文将用最简单，最容易理解的方式，来解释作用域和作用域链，希望对大家有所帮助。"}, {"id": "6925325240398512141", "title": "前端H5实现分享截图", "desc": "框架我使用的是react。绘画分享采用原生canvas、js实现。所以不用担心vue、小程序、原生H5也是能够适应。 下面展示一些 内联代码片。 ②分享图加载速度：小程序二维码太阳码，背景图等页面加载阶段可以先请求，点击分享按钮可以直接绘画，减少请求时间长导致生成绘画慢问题，同…"}, {"id": "6844903599609233422", "title": "一个前端菜鸟的成长历程", "desc": "从实习算起，到现在工作了也有一年半的时间了，在这期间，深深感受到了前端领域的飞速发展，在这里记录一下自己的成长历程，算是对知识的一个梳理，也希望帮助到刚入行的同学们。说来惭愧，大学里并没有涉及前端的知识，当时对自己的定位很迷茫，不知道毕业之后何去何从。所以盲目的报了很多学习班，…"}, {"id": "7001470710413525029", "title": "适配器模式（js简单实现）", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 是什么？ 在设计模式中，适配器模式属于结构型模式，是作为两个不兼容的接口之间的桥梁，是属于亡羊补牢的一种模式，让就数据能适应新的环境，不是"}, {"id": "6988038855823736868", "title": "【ES6系列】块级作用域绑定", "desc": "ES6系列，专门介绍ES6的一些变化。林林总总在网上也看了不少介绍ES6的帖子，最近有时间决定以《深入理解ES6》为基础，整理一下相关知识点"}, {"id": "6993540456747368485", "title": "深入JavaScript之理解作用域链和闭包", "desc": "学习作用域链和闭包之前，回顾一下什么是作用域？ 作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。"}, {"id": "6844903831264837645", "title": "【收藏】常用JavaScript正则表达式汇编与示例 ", "desc": "目前收集整理了21个常用的javaScript正则表达式，其中包括用户名、密码强度、整数、数字、电子邮件地址（Email）、手机号码、身份证号、URL地址、 IP地址、 十六进制颜色、 日期、 微信号、车牌号、中文正则等。表单验证处理必备，赶紧收藏吧！ 在做用户注册时，都会用到…"}, {"id": "6893137995650564104", "title": "你真的不懂“函数防抖”怎么用！", "desc": "函数防抖(debounce): 事件在触发后的 t 时刻执行，如果在这个时间间隔 t 内，又一次触发事件，则重新计算时间。 函数节流(throttle): 在时间间隔 t 内，无论触发多少次事件，最终只执行一次。 通过能直接运行的代码一步步深入了解什么是 函数防抖 。 错误答案…"}, {"id": "6948337220356931620", "title": "前端团队开发思考", "desc": "1. 目录结构划分 2. 开发规范统一 保证JS代码一致性并避免低级错误。 保证JS代码在不同编辑器或IDE下的格式一致性。 以上代码的作用即在所有文件类型中，保证编码方式、缩进格式等风格的一致性。 3. 代码风格统一 统一JS、JSX代码风格。 统一CSS代码风格。 4. 项…"}, {"id": "6844903565429833742", "title": "从一道题浅说 JavaScript 的事件循环", "desc": "从阮老师在其推特上的一道题来说说 JavaScript 的事件循环"}, {"id": "6963845078250946567", "title": "520，用技术送她一个小惊喜", "desc": "520,该给她准备点啥惊喜呢？我们程序员有技术优势，可以利用自己的技术整点浪漫的小礼物～给她一个小惊喜"}, {"id": "6994246522271432741", "title": "解读let&const&var的区别 绝对没你想得简单~安排", "desc": "这是我参与8月更文挑战的第8天 var VS let  let不存在变量提升  let 不允许重复声明(在当前上下文中，不论基于什么方式声明了这个变量，再次基于let/const声明都会报重复声明) "}, {"id": "6980887310980087815", "title": "Lerna 入门级教程", "desc": "Lerna 教程 一、什么是 lerna? 多包管理工具，方便我们在一个项目中管理多个 npm 包，能够在发包时统一每个包的版本号。 优雅的解决大型多包项目中每发一次包都要手动修改各个包的版本号并单独"}, {"id": "6874710268094611469", "title": "面试遇坎，每日一题我精选了这些题目与答案", "desc": "每日工作之余，我会将自己整理的一些前端面试题笔试题整理成每日一题，然后在公众号中推送给大家，每天仅需几分钟做一道题，经过日积月累，在换工作的时候一定能让你拿到一个比较好的offer。今天这篇文章是我将近期每日一题中比较好的题目及粉丝们分享的一些答案进行的整理，分享给更多的掘友，…"}, {"id": "6873163847721713677", "title": "落魄前端，整理给自己的前端知识体系复习大纲（下篇）", "desc": "首先，感谢一些同行们对上篇的肯定。 其次，文章标题为\"大纲\"，只是笔者，整理给自己的一个复习大纲。 也许内容并不深入，因为文章的标题与定义就是大纲，并没指望一篇文章，可以教会提到的对应的知识点。无论哪个知识点，一个原型链最基础的东西，都可进行深挖，大神都可以扯上几万字，也未必能…"}, {"id": "6894220757938012167", "title": "教你让b站视频的弹幕发出语音！", "desc": "前言又是欢天喜地的编程up整活儿时间！这次给大家带来的是《有声弹幕》！源码在最底下，用电脑复制后，粘贴到视频页面的控制台并回车就可以体验功能。那么，先介绍实现过程：需要准备的只有个条件：让浏览器侦察视"}, {"id": "6961415313711693837", "title": "一道美团的promise面试题，引发的思考", "desc": "题目 原题已不记得，根据记忆复原如下： 以下是笔者自己的思考： 首先res的值肯定是[1,2,3]三个值的平方1,4,9。因为知道await会把后面的同步代码包装在一个Promise.then()里异"}, {"id": "6950554221242499103", "title": "解析 URL 参数为对象和字符串模板", "desc": "前言本文章是基于 死磕36个手写题写出来的，感兴趣的可以去看一下呀！生命不息，代码不止！让我们开始呗解析 URL 参数为对象普通解法正则解法我有话说是不是看了正则解法有点蒙，没事我也蒙，所以我就良心的"}, {"id": "6995825765807816712", "title": "js 数据结构 - 队列（上篇）", "desc": "队列是一种线性表结构，队列的基本操作只有两个：入队和出队。入队是指：在队尾加入成员，出队是指：在队头去除成员。本篇文章将介绍顺序队列、链式队列、循环队列、双端队列，除双端队列外，均进行使用 js 实现"}, {"id": "6996226209063370766", "title": "一起来学Javascript 设计模式 之 观察者/发布订阅者模式", "desc": "观察者/发布订阅者模式 这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战” 什么叫观察者模式？官方定义的是： 定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象"}, {"id": "6844903704663949325", "title": "面试官问：能否模拟实现JS的new操作符", "desc": "用过Vuejs的同学都知道，需要用new操作符来实例化。 那么面试官可能会问是否想过new到底做了什么，怎么模拟实现呢。 从这里例子中，我们可以看出：一个函数用new操作符来调用后，生成了一个全新的对象。而且Student和Object都是函数，只不过Student是我们自定义…"}, {"id": "6844903609667158030", "title": "解密Vue SSR", "desc": "最近笔者和小伙伴在研究Vue SSR，但是市面上充斥了太多的从0到1的文章，对大家理解这其中的原理帮助并不是很大，因此，本文将从Vue SSR的构建流程、运行流程、SSR的特点和利弊这几方面对Vue SSR有一个较为详细的介绍。最后还将附上一个笔者实现的去除Vue全家桶的Dem…"}, {"id": "6844903968380813325", "title": "解密HTTP/2与HTTP/3 的新特性", "desc": "HTTP/2 相比于 HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。 虽然 HTTP/2 提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3 就…"}, {"id": "6990122025838706724", "title": "【原生组件】一文带你入门 Web Components", "desc": "本文将介绍一些 Web Components 的相关知识，最后通过一个组件封装的案例讲解带你入门 Web Components。"}, {"id": "7002914053169348615", "title": "React学习心得", "desc": "React是流行的javascript框架之一，在2019年及以后将会更加流行。React于2013年首次发布，多年来广受欢迎。它是一个声明性的、基于组件的、用于构建用户界面的高效javascript"}, {"id": "6986444704338411527", "title": "JS中的JSON.Stringify 方法详解", "desc": "在大厂的前端面试过程中，JSON.Stringify常常被问到，那么能够熟练的运用，掌握就必不可少。 那么，到底什么是 JSON.stringify 方法？ 方法基本介绍 JSON.stringify"}, {"id": "6960190316427100167", "title": "前端工程化篇", "desc": "1.模块化机制 1.什么是模块? 将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起 块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信 2.模"}, {"id": "6844903597709197319", "title": "⏰Day.js 2kB超轻量时间库 和Moment.js一样的API", "desc": "Moment.js 是一个大而全的 JS 时间库，很大地方便了我们处理日期和时间。但是 Moment.js太重了(200k+ with locals)，可能一般项目也只使用到了她几个常用的API。虽然社区也有几个轻量的时间库，要想迁移过去又会增加新的学习和迁移成本。 Day.j…"}, {"id": "6944923447285776398", "title": "从面试题中理解prototype和__proto__", "desc": "结合new操作符来理解，我认为构造函数其实是工具，而原型不准确的来说是类，构造函数只是实例对象与原型联通在一起的桥梁。"}, {"id": "7003178615407902727", "title": "2、类型判断", "desc": "4种类型判断 基本数据类型：Boolean、Number、String、Undefined、Null、Symbol、Bigint 引用数据类型 ：Object、Function 1、typeof 基本"}, {"id": "6992172458748936222", "title": " 面向未来的前端开发模式 - 写于2021年", "desc": "未来一切可以用javascript来实现的，最终都将用javascript来实现 - 不知名文学家鲁迅"}, {"id": "6997215028306771981", "title": "【知识梳理】基本类型的自动装箱？", "desc": "通过劫持 new String，和 javascript.info 与 StackOverflow 上的资料，对基本类型自动装箱的解释有不同的看法。"}, {"id": "6844903764319535117", "title": "[译] 2019 前端性能优化年度总结 — 第一部分", "desc": "让 2019 来得更迅速吧~你正在阅读的是 2019 年前端性能优化年度总结，始于 2016。 早些时候，性能都是所谓的“后顾之忧”。直到项目快结束的时候，它会被归结为代码压缩（minification）、拼接（concatenation）、静态资源优化（asset optim…"}, {"id": "6987990276564320269", "title": "用Serverless写一个视频下载器", "desc": "今天看到一个开源库，用`Node.js`下载Youtube 视频，我眼前一亮，马上打开页面，看了一下介绍，好家伙，这么容易使用，那以后**打工人**上下班看离线视频那不是方便多了。"}, {"id": "6844904090116292616", "title": "Proxy 和 Reflect", "desc": "一个 Proxy 对象包装另一个对象并拦截诸如读取/写入属性和其他操作，可以选择自行处理它们，或者透明地允许该对象处理它们。 Proxy 用于许多库和某些浏览器框架。在本章中，我们将看到许多实际应用。 target —— 是要包装的对象，可以是任何东西，包括函数。 handle…"}, {"id": "7000578988280119333", "title": "LeetCode16-最接近的三数之和 | 算法练习系列", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前言 今天来一道简单的算法题（虽然LeetCode中说它是中等的题目），最接近的三数之和，这道题题目很简单，但想要做到最优也需要一些思考，"}, {"id": "7001118935533748261", "title": "JavaScript 迭代器", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 今天学习一下JavaScript的迭代器相关知识。 理解迭代 首先先来理解一下迭代，在JavaScript中"}, {"id": "6971330156879151111", "title": "【解决方案】ElementUI图片上传前如何对尺寸进行验证并且上传到新浪SCS?", "desc": "elementUI官方给出了对图片类型以及大小的验证,那么怎么对图片的尺寸,也就是宽高进行验证呢?如何利用Express把图片上传到服务器,或者免费的新浪云SCS呢?"}, {"id": "6996673947051753485", "title": "让人头疼的隐式转换？必然也有迹可循。", "desc": "JavaScript 中的类型转换情况复杂，容易出错，饱受争议但又应用广泛 请欣赏下面的图片 上图是否让你觉得心旷神怡？反正我是没有。 下面我们来看看 JavaScript 为什么会出现这些情况？他们"}, {"id": "6844903824583294984", "title": "Axios 源码解析", "desc": "Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。 这样是不是就一目了然。fn2 函数没有拿自己对象内的 age = 20 而是被指定到了 thisArg 中的 age 总结：createInstance 函数返回了一个函数 ins…"}, {"id": "6948615008318128142", "title": "与张鑫旭大神聊前端职业发展", "desc": "上个月参加了掘金运营的活动，包括刷题打卡，项目复盘，和沸点活动，历时将近一个月。其中我写的项目复盘的文章「造轮子」开发油猴插件脚手架Wokoo | 项目复盘 获得优秀项目复盘文章奖，赢得掘金周边大礼包。并且因为这篇文章我也幸运的被张鑫旭大神选中，有了一次和大佬面对面的机会。 因…"}, {"id": "7002849460602535966", "title": "Javascript类型", "desc": "类型 Undefined； Null； Boolean； String； Number； Symbol； Object。 Undefined、Null 我们的第一个问题，为什么有的编程规范要求用 vo"}, {"id": "6995376107948081189", "title": "客户端存储方案", "desc": "本文主要讲述了cookie 在客户端的使用方式，以及localStorage及sessionStorage的使用，了解各种本地存储的异同"}, {"id": "6844903713929166855", "title": "图片纯前端JS压缩的实现", "desc": "以上就是图片前端压缩并上传demo的完整演示。 要想使用JS实现图片的压缩效果，原理其实很简单，核心API就是使用canvas的drawImage()方法。 各参数具体含义可以参见“Canvas API中文文档-drawImage”，这里不展开。 把大图片画在一张小画布上，压缩…"}, {"id": "6964662714371145735", "title": "技术周报 · 2021-05-21", "desc": "小编推荐 The new responsive: Web design in a component-driven world CSS 实现多行文本“展开收起” 聊聊前端面试 News Parcel "}, {"id": "6844904176187605000", "title": "Vue 3教程（适用于Vue 2用户）", "desc": "Vue 3尚未正式发布，但是维护者已经发布了Beta版本，供我们的参与者尝试并提供反馈。 如果你想知道Vue 3的主要功能和主要变化是什么，那么我将在这篇文章中重点介绍一下，告诉你使用Vue 3 beta 9创建一个简单的应用程序。 我将介绍尽可能多的新内容，包括fragmen…"}, {"id": "6844904110303477773", "title": "这 10 个技巧让你成为一个更好的 Vue 开发者", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 我比较喜欢使用 Vue 来开发，所以有时会深入研究其功能和特性。 通过这篇文章，向你们介绍十个很酷的窍门和技巧，以帮助大家成为更好的 Vue 开发者。 随着Vue 2.6的推出，已经引入了插槽的简写方式，之前简…"}, {"id": "6959133388099813389", "title": "javaScript 数组方法 find 和 some", "desc": "工作中接到了一个优化代码的工作： warning Expected to return a value in arrow function array-callback-r"}, {"id": "7001861083631894542", "title": "Web Components", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战” Web Components Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）"}, {"id": "7002950745381142558", "title": "前端实习面试准备--JS执行上下文/作用域链/闭包", "desc": "1.作用域 作用域：提前约定好一套存储变量，访问变量的规则 1.1 编译原理 词法分析：将源代码拆成最小的，不可再分的词法单元（token） 语法分析：将token数据根据语法规则转为AST,如果有错"}, {"id": "7002399156333445134", "title": "threeJs基础 | 8月更文挑战", "desc": "threeJs 简介：threeJs是WebGl的JavaScript 3D库，对webGl的接口进行了非常好的封装 官方文档：https://threejs.org/ 中文文档：https://te"}, {"id": "6958416579130294303", "title": "js - Promise用法", "desc": "Promise [all, race, allSettled, any] 比较 Promise 定义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它"}, {"id": "6971333479128629285", "title": "实现一个炫酷的时间轮盘 | 原生篇", "desc": "看见美好的事物，还是会很喜欢！今天在设置手机壁纸时，看见有个炫酷的时间轮盘，觉得挺好看的。于是想自己来实现一下"}, {"id": "6997048316756230181", "title": "JS个人学习(7)——apply、call、bind的原理与实现", "desc": "apply、call、bind的作用与区别 apply、call、bind都是用来改变函数指向的方法，区别在于： apply、call调用后会立即执行，而bind不会立即执行，而是会返回一个函数 ap"}, {"id": "6930504953106530312", "title": "入门 Serverless——简介与实践", "desc": "Serverless，即无服务架构。是指由第三方云计算供应商以服务的方式为开发者提供所需功能，例如数据库、消息，以及身份验证等。它的核心思想是让开发者专注构建和运行应用，而无需管理服务器。 Serverless 技术的应用一般有两种：Faas(Function as a Ser…"}, {"id": "7000397429145075725", "title": "JavaScript中的布尔类型 Boolean", "desc": "这是我参与 8 月更文挑战的第 24 天，活动详情查看：8 月更文挑战 前文我们学习了关于 JavaScript 中异常(报错)处理 try-catch 今天来学习 JavaScript 中的布尔类型"}, {"id": "6844903645155164174", "title": "前端水印生成方案(网页水印+图片水印)", "desc": "前段时间做某系统审核后台，出现了审核人员截图把内容外泄露的情况，虽然截图内容不是特别敏感，但是安全问题还是不能忽视。于是便在系统页面上面加上了水印，对于审核人员截图等敏感操作有一定的提示作用。 Canvas兼容性 这里我们用canvas来生成base64图片，通过CanIUse…"}, {"id": "6844904202385227789", "title": "很多人不知道 v-for 可以这样解构！", "desc": "最近发现我们可以使用v-for进行解构。 然后，Vue 在内部使用此函数来渲染列表。 你可以在这里为非作歹，只是不要太疯狂😉。 大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 Vue 确实支持对 Map 和Set对象进行迭代，但是由于它们在 Vue 2.x…"}, {"id": "6988712937527443487", "title": " `Node`+`puppteer`实现网络图片爬取", "desc": "Node+puppteer实现网络图片爬取 一、项目搭建 1. 初始化项目 2. 安装依赖 3. 目录结构 二、功能实现 1. 图片DOM元素获取 首先引入所需模块 使用puppteer创建一个..."}, {"id": "6844904186069401607", "title": "13期前端冲刺必备指南-this/call/apply/bind（万字长文）", "desc": "大家好啊，我是吒儿👦，每天努力一点点💪，就能升职加薪💰当上总经理出任CEO迎娶白富美走上人生巅峰🗻，想想还有点小激动呢😎。 display属性，它是css中最重要的用于控制布局的属性，每个元素都有一个默认的display值，这与元素的类型有关，大多数元素的默认值一般是…"}, {"id": "6844903505832968199", "title": "在vue项目中 如何定义全局变量 全局函数", "desc": "如题，在项目中，经常有些函数和变量是需要复用，比如说网站服务器地址，从后台拿到的：用户的登录token,用户的地址信息等，这时候就需要设置一波全局变量和全局函数，这两个设置不太难，而且有一些共通之处，可能有一些朋友对此不太了解，所以随便写出来分享一波。有需要的朋友可以做一下参考…"}, {"id": "6844904077818609678", "title": "this到底指向啥？看完这篇就知道了！", "desc": "JS中的this是一个老生常谈的问题了，因为它并不是一个确定的值，在不同情况下有不同的指向，所以也经常使人困惑。本篇文章会谈谈我自己对this的理解。 其实this就是一个指针，它指示的就是当前的一个执行环境，可以用来对当前执行环境进行一些操作。因为它指示的是执行环境，所以在定…"}, {"id": "6844904021296316429", "title": "面试经典：Event Loop", "desc": "孩子没娘，说来话长。 本篇文章从 Event Loop 起因说起，通过探讨 浏览器环境 Event Loop 和 Node.js 环境 Event Loop，从而解惑工作中产生的困扰，扩展你面试知识点。 第三章 Event Loop：解释 Event Loop 产生原因和代码演…"}, {"id": "6994835448031871007", "title": "【重学JS】巩固基础-day11-DOM文档对象模型", "desc": "day11☆☆☆ 温故而知新! 今天学习巩固的内容(DOM-文档对象模型) 重要!! ☆☆☆ 可作为初学者的学习路线, 今天依然要加油哟!!"}, {"id": "6985156199192723487", "title": "手写一个基于发布订阅模式的js事件处理中心(EventEmitter)", "desc": "定义 发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。 订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）"}, {"id": "6844903684522917902", "title": "深入浅出eslint——关于我学习eslint的心得", "desc": "ESLint属于一种QA工具，是一个ECMAScript/JavaScript语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。 ESLint旨在完全可配置，它的目标是提供一个插件化的javascript代码检测工具。这意味着您可以关闭每个规则，只能使用基…"}, {"id": "6999997847831576590", "title": "从λ演算到函数式编程聊闭包(2)：彻底理解JavaScript闭包规则", "desc": "闭包 是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量，闭包的缺点就是常驻内存，会增大内存使用量"}, {"id": "6999997277716611085", "title": "从λ演算到函数式编程聊闭包(1)：闭包概念在Java/PHP/JS中形式", "desc": "代数中，闭包满足集合在某个运算或某些运算的搜集下是封闭的。计算机科学中，闭包是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了它的创建环境。函数式编程语言的基础是lamb"}, {"id": "6976419561067249672", "title": "刨析 JS 中的forEach、for in、for of三类循环原理和性能", "desc": "性能比较 for 循环和 while 循环的性能对比 使用 let 声明下的循环，由于 for 中块级作用域的影响，内存得到释放，运行的运行的速度会更快一些。 使用 var 声明时因为for whil"}, {"id": "6844903545016156174", "title": "浏览器页面资源加载过程与优化", "desc": "当浏览器截获到一个页面请求后，将会按照顺序做如下图所示的4件事。 首先会将所有需要加载的资源进行分类。 然后根据浏览器相关的安全策略，来决定资源的加载权限。 接着对各个资源的加载优先级进行计算和排序。 最后一步，根据加载优先级顺序来加载资源。 chrome浏览器会将资源分为14…"}, {"id": "6981852435165904933", "title": "每天学习10个实用Javascript代码片段（二）", "desc": "每天学习10个实用Javascript代码片段，加深对 Javascript 语法的理解，积累代码优化经验，今天是第二部分，这些使用代码大部分为纯函数。"}, {"id": "6844904116687208462", "title": "精读《React Hooks 数据流》", "desc": "React Hooks 渐渐被国内前端团队所接受，但基于 Hooks 的数据流方案却还未固定，我们有 “100 种” 类似的选择，却各有利弊，让人难以取舍。 本周笔者就深入谈一谈对 Hooks 数据流的理解，相信读完文章后，可以从百花齐放的 Hooks 数据流方案中看到本质。 …"}, {"id": "6844904041818882055", "title": "\"可插拔式\"组件设计，领略组件开发的奥秘", "desc": "从一个 Confirm 组件开始，一步步写一个可插拔式的组件。 大约6个弹窗... Confirm 通过 v-model=\"isShow\" 切换展示，通过 @onConfirm 和 onCancel 接收点击事件。 那么用它来完成上面的需求吧。 代码改起来会是一个灾难，因为就算…"}, {"id": "6844904063176278024", "title": "一个简单的例子提高你的算法能力", "desc": "你不需要成为一个数学天才才能成为一个优秀的程序员，但是有一些技巧你可以添加到你的问题解决包中，以提高你的算法的性能，并在技术面试中给人留下深刻的印象。 在本教程中，您将学习如何用一个简单且容易记住的等式来求和一系列从 1 到 n 的连续整数。这个等式对于将一个函数从 O(n)重…"}, {"id": "6981441470590894110", "title": "高阶函数(Higher-order function)和闭包(Closure) | 函数式编程", "desc": "什么是高阶函数？ 高阶函数可以对其他函数进行操作： 作为其它函数的参数 作为其它函数的返回结果 作为其它函数"}, {"id": "6844903633578885128", "title": "在 Vue 中使用 TypeScript 的一些思考（实践）", "desc": "Vue.extend()：使用基础 Vue 构造器，创建一个“子类”。此种写法与 Vue 单文件组件标准形式最为接近，唯一不同仅是组件选项需要被包裹在 Vue.extend() 中。 vue-class-component：通常与 vue-property-decorator …"}, {"id": "6962563491580346376", "title": "从Exifjs的原理入手，搞定js二进制数据的操作", "desc": "本文通过对exifjs库的分析和学习，了解exif相关标准。通过根据exif标准实现信息的获取方式，学习js中关于二进制的操作方法。"}, {"id": "6979746339114450981", "title": "宝，如何动态导入ECMAScript模块？", "desc": "ECMAScript(又名ES2015或ES)模块是在JavaScript中组织内聚代码块的一种方法。"}, {"id": "6844903598812299271", "title": "面试：页面加载海量数据", "desc": "可能在看到这个问题的第一眼，我们可能会想到这样的解决办法：获取 ul 元素，然后新建 li 元素，并设置好 li 的文本内容和监听器绑定，然后在循环里对 ul 进行 append 操作，即可能想到的是以下代码实现。 实践上述代码，我们发现界面体验很不友好，卡顿感严重。出现卡顿感…"}, {"id": "7002251732939964447", "title": "浏览器中的JavaScript执行机制", "desc": "这是我参与 8 月更文挑战的第 13 天，活动详情查看： 8月更文挑战 一个变量包含创建、初始化、赋值三个阶段 function的创建、初始化和赋值均会被提升。 var的创建和初始化被提升，赋值不会被"}, {"id": "6963618598350913566", "title": "如何在 Node.js 中流式处理大 JSON 文件", "desc": "本文介绍一个概念 SAX 的设计模式，这个概念虽然不是来源于 Node.js，但它解决问题的一些思想当我们在使用 Node.js 或一些其它的编程语言中遇到类似问题时也会受到一些启发..."}, {"id": "6999566632532213773", "title": "js-函数", "desc": "一、函数的介绍 js函数语法 ：function 函数名(){} 1、function 是预定义 函数名是自定义的 ，函数名的定义规则符合 变量的定义规则 2、数字（在后面） 字母 下划线 $ 符号 "}, {"id": "6844904005458460680", "title": "JavaScript 中， 5 种增加代码可读性的最佳实践", "desc": "为了保证的可读性，本文采用意译而非直译。 如果咱们关注代码本身结构及可读笥，而不是只关心它是否能工作，那么咱们写代码是有一定的水准。专业开发人员将为未来的自己和“其他人”编写代码，而不仅仅只编写能应付当前工作的代码。 在此基础上，可读性高的代码可以定义为自解释的、易于人理解的、…"}, {"id": "6888655752085372941", "title": "前端实现一个颜色选择器的功能", "desc": "虽然我们有现成的HTML控件，但是有两点可以让我们放弃它。 老规矩，没思路找项目，这次我找到的项目叫做Iconfont。 然后再找一个有缘图标。 咳，不要在意图标本身，我们可以发现这里有一个颜色选择器，我们来点开它来看一看。 先来颜色选择区是如何实现的，毕竟这是颜色选择器的核心…"}, {"id": "6881454730145611790", "title": "原生JavaScript实现弹幕组件", "desc": "如今几乎所有的视频网站都有弹幕功能，那么今天我们就自己用原生 JavaScript 封装一个弹幕类。这个类希望有如下属性和实例方法： 引入JavaScript文件之后，我们希望如下使用，先采取默认配置。 通过getComputedStyleapi计算出盒子的宽高，这里用来计算容…"}, {"id": "6970655400211251213", "title": "浅谈JavaScript代码压缩", "desc": "前几天在写一个小工具的时候，需要用到代码压缩工具`uglify-js`，突然就在想：这种代码压缩工具是怎么样去实现的呢？于是去了解了一下它的原理~"}, {"id": "6995896493202735141", "title": "如何做好大文件下载", "desc": "序言 在我们工作中，经常会遇见大文件下载的场景，例如向服务端请求视屏，音频，或者一些压缩包，如果只是简单的下载，那么会花"}, {"id": "6996495304530853918", "title": "JavaScript  中如何比较变量的相等", "desc": "在程序开发过程中，比较两个变量是否相等是很常见的需求，在 JavaScript 中两种变量类型的比较是有所不同的，本文就一起来回顾一下在 JavaScript 如何比较两个变量是否相等。"}, {"id": "6885538562180120583", "title": "【思维导图】前端开发JavaScript-巩固你的JavaScript知识体系", "desc": "var 声明一个变量，可赋一个初始值。 let 声明一个块作用域的局部变量，可赋一个初始值。 const 声明一个块作用域的只读命名的常量。 变量的名字又叫做“标识符”，必须以字母、下划线（_）或者美元符号（$）开头，并且区分大小写。 一个完整的javascript实现由3个部…"}, {"id": "6844903684204314638", "title": "一道面试题引发的“血案”", "desc": "js异步的存在是因为，js是单线程的，如果一些任务需要处理时间比较耗时，那么下面的任务就会一直等这个任务执行完成才能继续，比如一些IO任务，这样就会导致执行效率低效，所以js的设计者意识到了这点，设计了异步执行任务，主线程不必等待异步任务完成才执行下去，这样我们就可以把一些耗时…"}, {"id": "7005252629169176607", "title": "ES6系列--1.块级作用域的绑定", "desc": "1.Var声明以及变量提升(Hosting)机制 在函数作用域或者全局作用域中通过关键字var声明的变量，无论在哪声明的，都会被当成在当前作用域顶部声明的变量，这就是我们常说的变量提升机制(Hosti"}, {"id": "6844903568256794631", "title": "2018美团前端面试题，两年经验，你能答对几道？", "desc": "注意：部分答案为自己整理，正确性未知。代码运行结果部分亲手运行，没问题。 实现 vue 中的 on,emit,off,once，手写代码。 vue 的双向绑定机制？详细介绍。"}, {"id": "7002621128006959140", "title": " JS数字之旅——Number（下）", "desc": "在上一篇文章 JS数字之旅——Number（上） 中，提到的最大/最小正数、最大安全整数、浮点数运算精度问题，将会在这里的深入探讨过程中得到解答。"}, {"id": "6956859693205553183", "title": "技术周刊 · 2021-04-30", "desc": "> 假期愉快~~~~~~~~ 小编推荐 如何打造流程可扩展、高生产力的前端研发平台 ES 拾遗之赋值操作与原型链查找 Chrome 90 将默认使用 HTTPS React 精读《React Serv"}, {"id": "6952404632610013215", "title": "聊聊用JS实现网页瀑布流布局", "desc": "前言：瀑布流 又称瀑布流式布局，是比较流行的一种网站页面布局方式。即多行等宽元素排列，后面的元素依次添加到其后，等宽不等高，根据图片原比例缩放直至宽度达到我们的要求，依次按照规则放入指定位置。什么是瀑"}, {"id": "7000331820420038686", "title": "深入理解 setTimeout 与 setInterval", "desc": "setTimeout 和 setInterval，相信大家都是经常用，或多或少都会用一些，但是可能会有很多同学，并不是特别地了解相关的比较深入的东西，仅仅停留在使用层面而已。今天我们就来深入了解 se"}, {"id": "6954976038900203534", "title": "如何用JavaScript实现一个简单的小游戏FlyBird", "desc": "【前言】 作为一个前端初学者，秉承着不想当老师的学生不是好学生的思想。利用空余时间将FlyBird这个曾经让人想砸手机的小游戏梳理了一下，整理成了一个小教程让大家来指点指点。"}, {"id": "6844903725228621832", "title": "平庸前端码农之蜕变 — AST", "desc": "首先，先说明下该文章是译文，原文出自《AST for JavaScript developers》。很少花时间特地翻译一篇文章，咬文嚼字是件很累的事情，实在是这篇写的太棒了，所以忍不住想和大家一起分享。 该译文出自我的博客：github.com/CodeLittlePrince…"}, {"id": "6994262235153432590", "title": "用熟悉 javascript 代替 C++ 来写解析器(1)", "desc": "准备写一个 javascript 的解析器，将 javascript 解析成为一个抽象语法树(AST)，准备着手写这个多半是出自兴趣，要写代码首先就需要选择一个语言去实现，就用 js 解析 js。"}, {"id": "7006919849477832735", "title": "JavaScript 二进制笔记", "desc": "位运算 JavaScript 中的位运算是将操作数视为 32 位元的二进制串，返回标准的 JavaScript 数值。 JavaScript 中数值都由 64 位浮点数存储，但在两个整数进行位运算时，"}, {"id": "6916829760169607176", "title": "2020 前端技术发展回顾", "desc": "2020终究是一个不平凡的一年，我们经历了太多坎坷与磨炼。甚至受COVID-19疫情的影响，Chrome浏览器罕见的断更了，Chrome82就此缺席。但Web生态依旧保持了欣欣向荣的活力，一大批新特性"}, {"id": "7002240384097058846", "title": "【重温JS】巩固基础-前端自动化工具-gulp", "desc": "d30☆☆☆ 今天来学习前端自动化工具: ( gulp ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! 加油! 认真对待"}, {"id": "6969467348184989727", "title": "如何设计开发一个 Web 插件系统？", "desc": "借助插件，开发者可以很方便地解决自己的问题或者扩展特定场景功能。系统用户可以使用到更多功能特性。系统拥有者可以构建一个产品生态，并减少维护成本。显然这个一个三赢的方案。 真的需要插件吗？ 然而，让系统"}, {"id": "6844903569154375693", "title": "当面试官问你如何进行性能优化时，你该这么回答", "desc": "在开发好页面后，如何让页面更快更好的运行，是区分一个程序猿技术水平和视野的一个重要指标。所以面试时，面试官总会问你一个问题，如何进行性能优化呢？ 如果你这时是头脑一片空白，或是像之前的我一样，靠死记硬背或是之前的经历，答一下压缩代码，打包代码，雪碧图，cdn，事件代理，这说明你…"}, {"id": "6984600006334349342", "title": "MJML邮件模版实战", "desc": "MJML是一种标记语言，旨在减少编写响应电子邮件的痛苦。它的语义语法使它简单明了，它丰富的标准组件库加快了您的开发时间，并减轻了您的电子邮件代码库。MJML的开源引擎生成符合最佳实践的高质量响应HTM"}, {"id": "6979497731857317895", "title": "一款几年前的轮播图|满满的兼容性味道", "desc": "最近整理电脑偶然发现自己几年前的学习笔记，那时我才是刚入前端不久，每当看到新奇的js效果都忍不住惊叹，记得当时写过很多的练习作品，现在大多尘封在我的D盘，和岛国爱情片共享天伦之乐。 这是一个当年很流行"}, {"id": "6993686386389827592", "title": "JavaScript高级 - 纯js实现文件上传大文件切片上传断点续传（客户端）", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 一、环境准备及依赖库 axios v0.21.1： 用于调用服务端接口发送服务端请求 spark-md5 v3.0.1： 用于根据文件"}, {"id": "6844903621805473800", "title": "使用ESLint+Prettier来统一前端代码风格", "desc": "想起自己刚入行的时候，从svn上把代码checkout下来，看到同事写的代码，大括号居然换行了。心中暗骂，这个人是不是个**，大括号为什么要换行？年轻气盛的我，居然满腔怒火，将空行一一删掉。 但是关于代码风格，我们很难区分谁对谁错，不同的人有不同偏好，唯有强制要求才能规避争论。…"}, {"id": "6992393571026337828", "title": "【自种树自乘凉】ES6 新特征总结", "desc": "要知道，做前端开发，ES6 是必学的。这篇文章适合初步入门和复习，结合阮一峰老师的《ES6标准入门》能够更深入的学习 ES6。"}, {"id": "6994636656401711117", "title": "力扣刷题👊【605. 种花问题】", "desc": "假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。"}, {"id": "6844904138044604429", "title": "你不知道的 Hooks 和 JS 函数——过时的变量", "desc": "也或者我们会写更多的纯函数让我们的逻辑能够得到更抽象地复用，我们会搬出很多可能四五年前我们就在研究的各种骚操作来赋予今天我们所写的逻辑一些新的变幻。但这些我们曾熟悉的，在我们习惯了面向对象后，如今却又感到些许陌生了。当然，今天我们的主题自然不是函数式编程。 搬了这么多年的前端砖…"}, {"id": "6924181583373500430", "title": "Vue常用API、高级API笔记", "desc": "功能： 添加在下次Dom更新循环结束之后的延迟回调，修改数据之后，可以获取更新后的Dom。 ps：2.1.0 起新增：如果没有提供回调且在支持 Promise 的环境中，则返回一个 Promise。请注意 Vue 不自带 Promise 的 polyfill，所以如果你的目标浏…"}, {"id": "6881766021972262920", "title": "js日志输出还是只会console.log么，那你就out了", "desc": "几乎所有的javascript开发者最常使用的日志打印调试api都是console.log(),其实还有很多的选项供我们选择，笔者下面就为大家一一介绍. console.table()是我非常建议大家去使用的方法，它可以接受JSON或数组并以表格格式打印，在对json对象和数组…"}, {"id": "6945986980861706271", "title": "面试必问！一文带你走进异步编程", "desc": "JavaScript 是单线程语言，浏览器只分配了一个主线程执行任务，意味着如果有多个任务，则必须按照顺序执行，前一个任务执行完成之后才能继续下一个任务。 这个模式比较清晰，但是当任务耗时较长的时候，比如网络请求，定时器和事件监听等，这个时候后续任务继续等待，效率比较低。我们常…"}, {"id": "6993165856834322440", "title": "可视化 JavaScript 引擎", "desc": "关于JavaScript 引擎的基础知识，了解它是如何处理我们各自不同的 JS 代码并将其转化为机器能理解的东西"}, {"id": "6844903908372905998", "title": "可靠React组件设计的7个准则之SRP", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我不得不进行了分割，本篇文章重点阐述 SRP，即单一职责原则。 我喜欢React组件式开发方式。你可以将复杂的用户界面分割为一个个组件，利用…"}, {"id": "6844903506562777101", "title": " JS 装饰器（Decorator）场景实战", "desc": "本文不会大篇幅介绍装饰器（Decorator）的概念和基础用法，核心介绍我们团队如何将装饰器应用于实际开发，和一些高级用法的实现。 Decorator 是 ES7 的一个新语法，正如其“装饰器”的叫法所表达的，他可以对一些对象进行装饰包装然后返回一个被包装过的对象，可以装饰的对…"}, {"id": "6975723239158841357", "title": "我们一起写个Web贪吃蛇小游戏吧（三） | 新手向 ⛵", "desc": "这是我参与更文挑战的第20天，活动详情查看： 更文挑战 这只是大学生博主记录完成Web大作业的全过程。欢迎各位指点，谢谢! 昨日成果 今日任务 今天开始写吃苹果：把游戏初步完成。 放置苹果 很简单的思"}, {"id": "6992032253438066725", "title": "Promise学习笔记 | 8月更文挑战", "desc": "Promise是ES6的新语法，本文整理了Promise的详细使用方法，手写Promise的地址：https://github.com/FZZZ1996/Promise-fzzz"}, {"id": "6844904167618641927", "title": "打开控制台也删不掉的元素，前端都吓尿了", "desc": "运行完我的代码了，又切回element板块，想删掉它(谁叫你那么大坨的，被我盯上了)。点一下选中这个div，然后按一下删除 \"啪！\"，应该是我没按下。再“啪！”，啊？div闪了一下？“啪！”，我靠，删不掉！？ 那好，我改style。display: none， 安排! 怎么我一…"}, {"id": "6844903993915736078", "title": "【前端新手也能做大项目】：跟我一起，从零打造一个属于自己的在线Visio项目实战【ReactJS + UmiJS + DvaJS】 （一）", "desc": "本系列教程是教大家如何根据开源js绘图库，打造一个属于自己的在线绘图软件。当然，也可以看着是这个绘图库的开发教程。如果你觉得好，欢迎点个赞，让我们更有动力去做好！ 本系列教程重点介绍如何开发自己的绘图软件，因此，react基础和框架不在此介绍。可以推荐react官网学习，或《R…"}, {"id": "7003154816532742175", "title": "通过隐藏iframe实现文件下载的js方法介绍", "desc": "通过隐藏iframe实现文件下载的js方法介绍：通过隐藏iframe，当点击事件触发的时候，动态设置src就能实现文件下载功能。"}, {"id": "6844903927754784781", "title": "JS 前20个常用字符串方法及使用方式", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 1. charAt(x) charAt(x)返回字符串中x位置的字符，下标从 0 开始。 charCodeAt(x)返回字符串中x位置处字符的unicode值。 concat() 方法用于连接两个或多个字符串，…"}, {"id": "6844903687253393416", "title": "JS数组方法总览及遍历方法耗时统计", "desc": "国庆7天假，6天加班，苦涩😂。 因为对数组的处理方法有些还是有点模糊，因此这里整理汇总一下，方便日后自己查阅。😜"}, {"id": "6996857302598811684", "title": "前端刷题路-Day82：最小栈（题号155）", "desc": "设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) —— 将元素 x 推入栈中。 pop() —— 删除栈顶的元素..."}, {"id": "6952482530234728478", "title": "每日一题：Leetcode ：26题   删除有序数组中的重复项", "desc": "删除有序数组中的重复项给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O"}, {"id": "6844903976312242183", "title": "自定义H5 video 播放器", "desc": "工作中用到video标签做视频播放器，一开始用 video.js 插件代替，如果只用这个插件进行简单的播放视频，是不是有点浪费，而且这个插件用 webpack 打包后 vendor.js 会很大，所以本文实现一个基于HTML5标签video的自定义视频播放器。其中实现了播放暂停…"}, {"id": "6969432195350036494", "title": "pixi.js实现水波纹效果", "desc": "创建场景 PIXI.JS是个超快的2D渲染引擎，你可以用JavaScript或者其他HTML5技术来显示媒体，创建动画或管理交互式图像，从而制作一个游戏或应用。"}, {"id": "6987681894079037448", "title": "JS模块化方案详解(CommonJS、AMD、CMD、ESModule)", "desc": "模块化的演变过程 文件划分 最初的文件划分方式比较粗糙，年纪小的开发同学可能没有感受过。请看下面的小例子。 index.html module-a.js module-b.js 做法就是将每个功能及其"}, {"id": "6844903792270393358", "title": "[译] 避免那些可恶的 \"cannot read property of undefined\" 错误", "desc": "Uncaught TypeError: Cannot read property 'foo' of undefined. 是一个我们在 JavaScript 开发中都遇到过的可怕错误。或许是某个 API 返回了意料外的空值，又或许是其它什么原因，这个错误是如此的普遍而广泛以至于…"}, {"id": "6983255705138495518", "title": "前端必须掌握的JavaScript基础知识", "desc": "本文主要总结前端JavaScript基础知识，从0到1,打牢基础知识，祝大家能在开发的道路越走越远。"}, {"id": "6924854598268108807", "title": "All in one：项目级 monorepo 策略最佳实践", "desc": "0. 🧉 前言 在最近的项目开发中，出现了一个令我困扰的状况。我正在开发的项目 A，依赖了已经线上发布的项目 B，但是随着项目 A 的不断开发，又需要不时修改项目 B 的代码（这些修改暂时不必发布线上），如何能够在修改项目 B 代码后及时将改动后在项目 A 中同步？ 在项目 …"}, {"id": "6959789039566192654", "title": "canvas 300行代码实现一个贪吃蛇", "desc": "突然心血来潮，花了一个小时写了个贪吃蛇 ^_^ ! 规则 整图为一个 64 * 40 大小的矩形 随机在空白坐标点生成食物 蛇不能撞墙和吃自己 每吃一个食物身体长一格 初始速度为 150ms 移动一次"}, {"id": "6992428387960619044", "title": "椭圆动态分区以及扇形渐变处理", "desc": "椭圆动态分区以及扇形渐变处理 一个可视化的关系网络，可以理解为中心是当前用户，周边根据权重分布与自己联系紧密的各个角色的人员。每个人的角色数量都不一样，沟通人数也不尽相同。"}, {"id": "6983573067188404260", "title": "Vite源码解析——Vite如何创建项目", "desc": "前言 随着 Vite2 的发布并日趋稳定，现在越来越多的项目开始尝试使用它。我们使用 Vite 是一般会用下面这些命令去创建一个项目： 运行这些命令后就会生成一个项目文件夹，对于大多数人可能觉得只要能"}, {"id": "6966247833317949471", "title": "你的手写 new 实现足够严谨吗？", "desc": "在开始阅读这篇文章之前，不妨先对比下面这两段代码的输出结果是否一致（假设 myNew 是你自己实现的 new 操作）： 如果不一样，那么你的 myNew 方法和标准的 new 操作之间可能存在着些许出"}, {"id": "6988458924630835231", "title": "JS引擎工作原理详解", "desc": "作为前端开发了解javascript引擎的原理和工作流程是很有必要的。 Javascript引擎的工作原理 Javascript引擎的工作原理基本都大同小异，整体流程上分为以下步骤： 将Javascr"}, {"id": "7001510603315478541", "title": "总结下js的鼠标事件", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 前言 上一篇我介绍了js的键盘事件，今天咱们来学习js的鼠标事件，以及他们各自的区别。 介绍 js的鼠标事件比键盘事件（keydown，k"}, {"id": "6844903974374473736", "title": "7 个沙雕又带有陷阱的 JS 面试题", "desc": "为了保证的可读性，本文采用意译而非直译。 在 JS 面试中，经常会看到一些简单而又沙雕的题目，这些题目包含一些陷阱，但这些在我们规范的编码下或者业务中基本不会出现。 有些面试官就是这样，不专注于制定代码的标准和规范上，却用不规范的代码去检验别人是否细心。 这魔幻的世界就是一个攀…"}, {"id": "7002022488871813128", "title": "JavaScript知识点回顾（三十）——属性设置与屏蔽", "desc": "这是我参与8月更文挑战的第三十天，活动详情查看：8月更文挑战 属性设置与屏蔽 在JavaScript中，给一个对象设置属性不仅仅是添加一个新属性或者修改已有的属性值。"}, {"id": "6995407416552587295", "title": "如何使用 Yarn Workspaces 配置一个 Monorepo JS/TS 项目", "desc": "使用 Yarn Workspaces 配置一个 JavaScript & TypeScript 的 Monorepo 项目。"}, {"id": "6886596453112741902", "title": "JavaScript 中如何判断变量是否为数字", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JavaScript 是一种动态类型语言，这意味着解释器在运行时确定变量的类型。实际上，这也允许我们在相同的代码中使用相同的变量来存储不同类型的数据。如果没有文档和一致性，我们在使用代码时并不总是知道变量的类型…"}, {"id": "6844903938093744135", "title": "精读《React Hooks 最佳实践》", "desc": "React 16.8 于 2019.2 正式发布，这是一个能提升代码质量和开发效率的特性，笔者就抛砖引玉先列出一些实践点，希望得到大家进一步讨论。 然而需要理解的是，没有一个完美的最佳实践规范，对一个高效团队来说，稳定的规范比合理的规范更重要，因此这套方案只是最佳实践之一。 拥…"}, {"id": "6844903991487234056", "title": "前端SKU算法的实现", "desc": "本文将提供一种前端SKU算法的实现思路，这可能并不是最佳的实现方式，但可以为没有思路的小伙伴提供一种解决方案。 对于SPU与SKU概念还不了解的小伙伴，请先移步认识SKU与SPU了解一下大致概念，本文便不再详述。 对于前端来说，如果没真的做过SKU，可能并不会了解到它的复杂之处…"}, {"id": "6991483397495324703", "title": "面试官：说说new操作符具体干了什么？", "desc": "new是什么？ new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。 new通过Person创建出来的实例可以访问到构造函数中的属性 new通过Person创建出来的实例可以"}, {"id": "6844904048768843784", "title": "pm2 实践指南", "desc": "pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务，所以特地对 pm2 进行一次比较全面的学习+实践…"}, {"id": "6990973048954290189", "title": "一道面试题告诉了我函数在块级作用域中的提升并没有那么简单", "desc": "之前遇到一个面试题，以一个错误的角度解决了，后续有遇到类似的题，发现之前的套路走不通了，所以去研究了一下，并整理了一篇博客，话不多说，进来看题（有详细讲解哦）"}, {"id": "6940054536115617829", "title": "从 QuickJS 到 Dart VM：稿定跨端渲染工程的运行时演化", "desc": "在稿定科技，我们使用 QuickJS 与 Skia 搭建并落地了自研的 App 端编辑器渲染能力。去年北京的 QCon+ 上，笔者为此做了「基于 QuickJS + Skia 的 GUI 框架」分享。下面是一些基于该能力渲染的实际应用截图： 但在短短几个月后，我们就再次升级了这…"}, {"id": "6844904023808540680", "title": "关于React Hooks和Immutable性能优化的实践，我写了一本掘金小册", "desc": "最近，我的第一本小册《React Hooks 与 Immutable 数据流实战》在掘金成功上线。各位期待的粉丝朋友久等了，两个月之前的计划一直拖到了现在，也经常在 GitHub 的 issue 区也能感受到大家焦急的心情，实在非常抱歉，不过万幸的是，它终于成功地问世了。 上线…"}, {"id": "6844903682799042568", "title": "node进阶——之事无巨细手写koa源码", "desc": "koa是一个基于nodejs的web开发框架，特点是小而精，对比大而全的express，两者虽然由同一团队开发，但各有其更适合的应用场景：express适合开发较大的企业级应用，而koa致力于成为web开发中的基石，例如egg.js就是基于koa开发的。 关于两个框架的区别和联…"}, {"id": "6844903501034684430", "title": "《JavaScript 正则表达式迷你书》问世了！", "desc": "之前在本站发表了一篇文章，《JS正则表达式完整教程（略长）》，正如你所看到的那样确实很长，也获得了近1000人的喜欢。但文章太长，想必有很多同学看不下去，大都只是收藏罢了。因此我整理成一本pdf。既然只是收藏，那么收藏文章就不如收藏书来的好。其实，整理成pdf的灵感也来自本站读…"}, {"id": "6844903780035592205", "title": "面试官问：JS的继承", "desc": "用过React的读者知道，经常用extends继承React.Component。 面试官可以顺着这个问JS继承的相关问题，比如：ES6的class继承用ES5如何实现。据说很多人答得不好。 要弄懂extends继承之前，先来复习一下构造函数、原型对象和实例之间的关系。 其中这…"}, {"id": "6844903673403801607", "title": "前端性能优化—js代码打包", "desc": "现在的 web 应用，内容一般都很丰富，站点需要加载的资源也特别多，尤其要加载很多 js 文件。js 文件从服务端获取，体积大小决定了传输的快慢；浏览器端拿到 js 文件之后，还需要经过解压缩、解析、编译、执行操作，所以，控制 js 代码的体积以及按需加载对前端性能以及用户体验…"}, {"id": "6999249127154384910", "title": "前端学习笔记--ES6生成器", "desc": "`Generator` 函数是 ES6 提供的一种`异步编程`解决方案，语法行为与传统函数完全不同."}, {"id": "6880805477886902286", "title": "让Vue3 Composition API 存在于你 Vue 以外的项目中", "desc": "作为新特性 Composition API ，在 Vue3 正式发布之前一段时间就发布过了。 距文档介绍， Composition API 是一组低侵入式的、函数式的 API，使得我们能够更灵活地「组合」组件的逻辑。 不仅在 Vue 中，在其他的框架或原生 JS 也可以很好地被…"}, {"id": "6847902224903831560", "title": "前端国际化：自动管理工具", "desc": "总的来说就是，只要工具引入后，后期维护成本只有一个，只用考虑翻译资源文件。 配置 webpack, 打开 myapp/config/webpackDevServer.config.js，由于 loader是自下而上执行的，所有我们要把我们的loader配置到最上面，这个很重要。…"}, {"id": "6844903987049660424", "title": "一道网红面试题（腾讯、百度面试中都出现过）", "desc": "parseInt('1', 0)：radix的值为0，判断字符串发现介于1~9，用10进制转换，结果为1. parseInt('2', 1)：radix的值为1，如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。 parseInt('3', 2): …"}, {"id": "6844904048533979149", "title": "keep-alive实现原理", "desc": "例如在coma和comb都有一个input都有对应的value，如果我们不用keep-alive，当更改visible的时候，这两个组件都会重新渲染，先前输入的内容就会丢失，会执行一遍完整的生命周期流程:beforeCreate => created...。 但是如果我们用了k…"}, {"id": "6844903516822044680", "title": " Vue.js 升级踩坑小记", "desc": "本文并不是什么高深的技术文章，只是记录我最近遇到一个因为 Vue 升级导致我的一个项目踩坑以及我解决问题的过程。文章虽长但不水，写下来的目的是想和大家分享一下我遇到问题时候一个思考的方法和态度。 先看现象：同学们写的代码在 iOS 微信浏览器下不能播放，PC 是可以的；我线上的…"}, {"id": "6982437570328133645", "title": "ECMAScript中的操作符", "desc": "在面试中有时会被问到这些操作符中，隐性的一数据类型转换。对操作符的执行规则了解不是很透。此篇就是一个笔记，以便随时可以查询、巩固。"}, {"id": "6844904053651030030", "title": "讲清楚 JavaScript 原型", "desc": "记得以前知乎上看到过一个问题：面试一个 5 年的前端，却连原型链也搞不清楚，满口都是 Vue，React 之类的实现，这样的人该用吗？ 。写文章的时候又回去看了下这个问题，300 多个回答，有很多大佬都回答了这个问题，说明这个问题还是挺受关注的。最近几年，随着 ES6 ，Typ…"}, {"id": "6995555715309895716", "title": "疫情防控下的防抖和节流", "desc": "每天焦虑着疫情赶紧过去，然后可以早点出去浪，所以每日都在关注最新进展，然后突然发现，生活处处是题目啊，这防抖和节流不就来了吗？ 这一次再记不得，就过分了吧。"}, {"id": "6844904083397033998", "title": "详解canvas实现图片的拖拽、旋转、缩放(更新在Vue中使用的版本)", "desc": "这些功能是用在前几天写的一个小程序上的，所以本文是以小程序为主要框架讲解。但其实你不懂小程序也没关系，懂js就可以啦，重点讲如何用canvas实现这些功能，学会活学活用运算canvas的坐标才是关键。😄 在拖拽组件内通过小程序的apiwx.createCanvasContex…"}, {"id": "6844903518390714381", "title": "如果有人问你爬虫抓取技术的门道，请叫他来看这篇文章", "desc": "web是一个开放的平台，这也奠定了web从90年代初诞生直至今日将近30年来蓬勃的发展。然而，正所谓成也萧何败也萧何，开放的特性、搜索引擎以及简单易学的html、css技术使得web成为了互联网领域里最为流行和成熟的信息传播媒介；但如今作为商业化软件，web这个平台上的内容信息…"}, {"id": "6844903809118896135", "title": "前端面试总结之：js跨域问题", "desc": "金三银四，这会到了招聘的高峰期，最近很多朋友都向我发来了面试题，特此来自我留下笔记和分享，希望对大家有帮助，有所提升。 我们经常会看到上边类似的报错，Access-Cotrol-Allow-Origin 这是典型的跨域报错。其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制…"}, {"id": "6844903553069219853", "title": "我知道的跨域与安全", "desc": "1. ✕ 动态请求就会有跨域的问题 2. ✕ 跨域就是请求发不出去了 之所以会跨域，是因为受到了同源策略的限制，同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 这三个源分别由于域名、协议和端口号不一致，导致会受到同源策略的限制。 1. 不能向工作在不同源的…"}, {"id": "6989489625240715272", "title": "数据结构-双向链表", "desc": "上文中简单介绍了数据结构-使用JS实现链表-单链表;本篇作为一个续集出现.通过实现双向链表进一步加深对于链表的一些概念与实现。"}, {"id": "6994083249509122055", "title": "结合moment时间插件自己封装一个获取【上周、上月、上季度、上年】时间段函数", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 在日常开发中，获取时间的需求是必不可少的，可以说是经常出现，这不，近段时间接触了几个项目里面就有好几处出现了时间获取的需求。下面本文将以re"}, {"id": "6994757371817885727", "title": "Webpack配置-模块化原理", "desc": "准备工作 两个文件，分别使用 CommonJS和ES Module导出方法如下图： 初识mode 应为说到模块化原理需要用到 mode属性所以这里简单认识一下 mode 三者之间的区别： 默认情况下是"}, {"id": "6844903924307230727", "title": "JS基础-函数、对象和原型、原型链的关系", "desc": "JS通过new来生成对象，但是仅靠构造函数，每次生成的对象都不一样。 当创建一个函数时，JS会自动为函数添加prototype属性，值是一个有constructor的对象。 原因是：People1和People2的原型是People.prototype，答案在下方的：构造函数是…"}, {"id": "6987187405409222692", "title": "解密微前端：浅谈微前端生态", "desc": "这篇文章算是我对在阿里做微前端的一个总结吧，没有写的事无巨细，更像是一个对自己的备忘录，很多地方因为做的比较久了记忆也比较模糊了我也会慢慢补充。 我对微前端的理解 当我们在谈论微前端的时候，往往提到的"}, {"id": "7005113163548983304", "title": "实现redux核心API", "desc": "学习过react的同学都知道redux这个状态管理库，或许同学们都对这个库的API用得溜得起飞，我刚开始学习的时候总觉得redux太难了，相对于vue的vuex来说，redux的学习成本相对较高，vu"}, {"id": "6986771109177720840", "title": "一文了解树🌳在前端中的应用，掌握数据结构中树的生命线", "desc": "🏕️序言 在我们的日常生活中，无时无刻都会看到树。比如，在街上行走时，就有着一排排的树。那么，树在前端中，都有哪些"}, {"id": "6976151481023987742", "title": "js的线程机制", "desc": "我们在大学的时候，操作系统中就已经非常熟悉了，我们可以做个简单的回顾。并展开对js的理解。js是单线程的吗？怎么证明它是单线程呢？它为什么是单线程，不是多线程呢？它可以是多线程的吗？"}, {"id": "6990246992899211301", "title": "动手写一个 javascript 代码解析器(1)", "desc": "想尝试去写一个 javascript 的解析器和解释器，javascript 是自己的第一门语言，如果不把 html 看成语言的话，也是我们进入到编程行业的敲门砖。"}, {"id": "7003356777710354445", "title": "JavaScript this 关键字总结", "desc": "this表示对当前对象的一个引用，不是固定不变的，会随着执行环境上下文改变而改变。 先记住以下this的总结，这是重点！！ 在方法中（该方法不是由箭头函数定义的），this表示该方法所属的对象； 如何"}, {"id": "6982032399580266510", "title": "前端重试策略 - 指数退避算法", "desc": "网络请求异常的场景避免不了重试策略，而重试策略的关键之处就在于如何设置重试等待时间，本文介绍的指数退避算法就是用来解决这样的问题。"}, {"id": "6844904054498263053", "title": "15分钟带你了解前端工程师必知的javascript设计模式(附详细思维导图和源码)", "desc": "设计模式是一个程序员进阶高级的必备技巧,也是评判一个工程师工作经验和能力的试金石.设计模式是程序员多年工作经验的凝练和总结,能更大限度的优化代码以及对已有代码的合理重构.作为一名合格的前端工程师,学习设计模式是对自己工作经验的另一种方式的总结和反思,也是开发高质量,高可维护性,…"}, {"id": "6844904133409914894", "title": "对阮一峰《ES6 入门》中箭头函数 this 描述的探究", "desc": "在部分群里引起了一些讨论，其中有一点是关于箭头函数的 this 指针的问题。使用了阮一峰《ES6 入门》文章的内容来反驳。 起初，群里一个朋友抛出了这个疑问，为啥这两个输出有差异。 那么我们首先就来分析一下到底是什么原因。 这里创建了一个 person 实例 pp。然后执行 p…"}, {"id": "7001396397207453710", "title": "React源码解析之 API简介", "desc": "ReactV17.0.2版本抛出的所有的最新的API，也就是说在项目书写中上述所有的API都可以使用 React.API名称的形式调用 。"}, {"id": "6971807820966527007", "title": "细读闭包", "desc": "对于闭包，可以说是老生常谈的话题，但是真正理解闭包的，又有哪些核心点呢？可以从静态作用域入手，到闭包定义、常见闭包、闭包的作用等。带你层层深入闭包！"}, {"id": "7006697281466400781", "title": "JavaScript-数据类型", "desc": "一、检测数据类型——typeof操作符 undefined—— 值未定义； boolean   —— 值是布尔值； string    —— 值是字符串； number    —— 值是数值； obj"}, {"id": "6993238862805860366", "title": "Web Compoent 系列—shadow DOM(1)", "desc": "Shadow DOM 是三种 Web compoent 标准之一。HTML Templates、Shadow DOM 和 Custom Elements。"}, {"id": "6992627835995160612", "title": "惊艳的无限循环加载动画｜8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "6920428989181870094", "title": "2021年前端工程师书单推荐", "desc": "之前有读者私信我想要一份前端工程师的成长路线，答应他后面会出一个系列专题。最近加班有点狠，属于自己的时间太少了，而且路线涵盖的内容大而全，这里推荐一个程序员成长路线的 GitHub 仓库，总结的很全面了，大家可以先自行观看。 既然承诺了就要做到，索性从书单先开始推荐吧，下面的书…"}, {"id": "6999927921758437384", "title": "一篇搞定如何使用JavaScript  操作 DOM 元素", "desc": "JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。 一、改变元素内容 1、从起始位置到终止位置的内容, 但它去除 htm"}, {"id": "6981792539078557710", "title": "新手入门第二课：2个文章美化的小技巧", "desc": "第二节课主要介绍2个文章美化的小技巧，分别是使用Markdown主题和制作合格的封面图，快来一起来学习吧！"}, {"id": "7002830790782369805", "title": "增强原生小程序开发，构建 tailwind + postcss + scss 最小化工具链", "desc": "增强原生小程序开发，构建 tailwind + postcss + scss 最小化工具链 前言 书接上回 tailwindcss 小程序定制化之旅 我们知道 uni-app 和 tarojs 在最终"}, {"id": "6844903618827517965", "title": "JS的防抖与节流", "desc": "在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（"}, {"id": "7002928646478364708", "title": "for循环与setTimeout定时问题", "desc": "循环定时解决方法： let解决（块作用域）、 利用setTimeout的第三个参数、利用IIFE解决"}, {"id": "6885494787630170120", "title": "【官方】1024圆桌活动：JavaScript 的过去、现在和未来", "desc": "1995年，Brendan Eich 只用 10 天就写出了 JavaScript 的第一版，如今JavaScript 25 岁了，25 年的反复锻造与打磨，成就了 JavaScript 在今天的应用程序开发中毋庸置疑的统治地位。这25年间，很多人认识前端、走近前端，并因此改变…"}, {"id": "6937572714563518478", "title": "如何禁止开发者操作网页上的DOM对象？", "desc": "通常情况下，在一个HTML页面上，我们总能够通过DOM API访问想要访问的HTML元素，进行操作。 如果我们用Object.getOwnPropertyDescriptor查看，会发现window.document实际上是一个getter，而且它的configurable是f…"}, {"id": "6991276558895808542", "title": "TS系列(一)  ts是个啥 | 8月更文挑战", "desc": "在前端项目越来越大的今天,我们急需一种方式能够在开发阶段发现潜在问题,而不是在运行阶段排查错误。为了解决此类问题，微软带着`TypeScript`来了。"}, {"id": "7001395893417017358", "title": "面试复习计划JavaScript篇一", "desc": "面试复习计划JavaScript篇一 引言 面试去啊兄弟，面试，赶紧复习，不多说，复习！！！！ 此系列将会针对面试中可能会遇到的知识点进行整理和复习，该篇包含以下知识点：执行上下文，作用域链，闭包。 "}, {"id": "6998452866369191972", "title": "[源码-react02] 手写hook调度-useState实现", "desc": "(一) 前置知识 (1) 一些单词 (2) fetch 和 XMLHttpRequest fetch 和 XMLHttpRequest设置cors跨域 - 要携带cookie ajax => xhr."}, {"id": "6844903753380806669", "title": "【前端词典】滚动穿透问题的解决方案", "desc": "随着移动端市场的份额越大，需求就越多样化。我们今天讨论的是移动端的滚动穿透问题。上面这段调侃的话可以看出需求中弹窗浮层还是挺常见的，那这个和滚动穿透有什么联系呢？ 接下就说下我对滚动穿透问题解决方案探索的过程，希望对大家有点启发。 接到这个需求觉得没有难度，很快就提测了，然后就…"}, {"id": "6981288614248316936", "title": "当富文本遇上Markdown - Milkdown简介", "desc": "作为程序员，平时总少不了和markdown打交道，知识管理，项目文档，静态博客...然而繁琐的输入和一定的学习门槛劝退了不少非程序员，那么当Markdown遇到富文本，会擦出怎样的火花？"}, {"id": "6982859960736563236", "title": "纯Javascript实现平滑曲线生成", "desc": "平滑曲线生成是一个很实用的技术 很多时候，我们都需要通过绘制一些折线，然后让计算机平滑的连接起来， 先来看下最终效果(红色为我们输入的直线，蓝色为拟合过后的曲线) 首尾可以特殊处理让图形看起来更好：）"}, {"id": "6844903797135769614", "title": "深入理解JavaScript作用域和作用域链", "desc": "JavaScript中有一个被称为作用域(Scope)的特性。虽然对于许多新手开发者来说，作用域的概念并不是很容易理解，本文我会尽我所能用最简单的方式来解释作用域和作用域链，希望大家有所收获！ 作用域是在运行时代码中的某些特定部分中变量，函数和对象的可访问性。换句话说，作用域决…"}, {"id": "6985360199204749342", "title": "前端文件下载常用方法及原理解析", "desc": "文件下载是前端开发中一个常见的功能，目前主流的下载实现主要有两种：静态文件直接下载和文件流下载。本文主要解决日常业务中的下载问题"}, {"id": "6983590011241234469", "title": "读axios的源码，我学到了这些", "desc": "1、前言 一个好的程序员一般都具备一个良好的习惯，如果觉得这个东西好吃，就一定会想办法去拆解它，从而具备自行生产的能力。往往在这个过程中，会见识到很多新奇的东西，然后再不禁感慨道：“wocao，还可以"}, {"id": "6939652223794151461", "title": "JS代码Level提升N倍的忍者秘籍(实用)", "desc": "本文章共2377字，预计阅读时间5-10分钟。 没有前言。 原理：因为浮点数是不支持位运算的，所以会先把1.1转成整数1再进行位运算，就好像是对浮点数向下求整。 注意：以下取整方法适用于32位有符号整数（有符号整数使用 31 位表示整数的数值，用第 32 位表示整数的符号，0 …"}, {"id": "6913788953971654663", "title": "使用mono-repo实现跨项目组件共享", "desc": "本文会分享一个我在实际工作中遇到的案例，从最开始的需求分析到项目搭建，以及最后落地的架构的整个过程。最终实现的效果是使用mono-repo实现了跨项目的组件共享。在本文中你可以看到： 从接到需求到深入分析并构建架构的整个思考过程。 mono-repo的简单介绍。 mono-re…"}, {"id": "6994602781776543752", "title": "前端刷题路-Day76：柱状图中最大的矩形（题号84）", "desc": "给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面积。"}, {"id": "6972186222219231246", "title": "重学call、apply、bind到手动封装", "desc": "这是我参与更文挑战的第10天，活动详情查看： 更文挑战 这次直接单刀直入，切入正题！ call、apply、bind作用 简单来说，call、apply、bind的作用是改变函数运行时的this指向。"}, {"id": "6844904003868819463", "title": "中高级前端面试秘籍，助你直通大厂(一)", "desc": "又是一年寒冬季，只身前往沿海工作，也是我第一次感受到沿海城市冬天的寒冷。刚过完金九银十，经过一场惨烈的江湖厮杀后，相信有很多小伙伴儿已经找到了自己心仪的工作，也有的正在找工作的途中。考虑到年后必定又是一场不可避免的厮杀，这里提前记录一下自己平时遇到和总结的一些知识点，自己巩固复…"}, {"id": "6850037262110392327", "title": "作为前端，我是如何在Leetcode 算法比赛中进入前100的？", "desc": "最近看到晨曦在掘金的那篇爆文，脑海中也突然有了想写一篇关于 LeetCode 相关的文章。 我是从 2019 年 10 月开始固定刷题的，目前已经完成 464/1715 题目了，大部分题目的所有可能解法都一一仔细研究了下，所以你看我的提交量达到了 1285/1871。首先，99…"}, {"id": "6981711232470515725", "title": "两种 JavaScript 时间分片技术", "desc": "React Fiber 的出现，在前端社群普及了时间分片的计算优化技术。我曾试着去学习 Fiber 的源码实现，然而最终得到的结论是这个技术只有在面试的时候应付面试官刁难有用，其对于日常开发，甚至是熟"}, {"id": "6974401514232086558", "title": "JS的一些坑", "desc": "最近看了一些前端的资料，也动手写了一些代码，记录并总结一下在实践的过程中遇到的一些比较诡异的JS的一些用法，希望可以帮助到大家，也提升自己。"}, {"id": "6982485346474803207", "title": "一张图搞定JS原型&原型链", "desc": "JavaScript原型&原型链 原型链图 图中Parent是构造函数，p1是通过Parent实例化出来的一个对象。 如果你看到这张图一脸懵，不要怕，往下看，下面会一步一步教你认识原型&原型链 前置知"}, {"id": "6844903566381940744", "title": "聊一聊我对 React Context 的理解以及应用", "desc": "Context被翻译为上下文，在编程领域，这是一个经常会接触到的概念，React中也有。 在React的官方文档中，Context被归类为高级部分(Advanced)，属于React的高级API，但官方并不建议在稳定版的App中使用Context。 不过，这并非意味着我们不需要…"}, {"id": "7004417593998049317", "title": "浏览器缓存，通俗易懂", "desc": "浏览器缓存 分为强缓存和协商缓存，分别通过哪些头部字段控制呢？Cache-Control？ETag/If-None-Match和Last-Modified/If-Modified-Since有何不同？"}, {"id": "6970443662681440292", "title": "利用ES6的class类继承实现绚丽小球效果", "desc": "这是我参与更文挑战的第6天，活动详情查看： 更文挑战 介绍 本效果采用Canvas画布绘制，再利用class类继承实现，实现的效果鼠标在指定Canvas位置移动，会在当前鼠标的位置产生随机颜色的小球，"}, {"id": "6954744259253633032", "title": "一个有意思的JS小知识点-欺骗词法", "desc": "最近学习了一个有意思的JS小知识点-欺骗词法。通过写文章来记录一下自己的学习经历。并且通过欺骗词法也复习了作用域的相关知识。"}, {"id": "6844903877569937415", "title": "【前端词典】4 个实用有趣的 JS 特性", "desc": "最近在学习的过程中发现了我之前未曾了解过的一些特性，发现有些很有趣并且在处理一些问题的时候可以给我一个新的思路。 这里我将这些特性介绍给大家。 有的时候我们需要从一个 URL 中提取域名，查询关键字，变量参数值等，一般我们会自己去解析 URL 来获取这些内容。可是你或许不知道还…"}, {"id": "6925039057370251271", "title": "一个前端会经常遇到的问题", "desc": "那么对于一个已经使用过很多次的项目，我需要监听这个fetch请求。应该怎么办呢？很简单，我们“重写”fetch 简单的几行代码，就实现了监听所有的fetch请求。而且不会对原有的功能有入侵，不过问题来了 这样做，其实相当于去修改原型链上的方法,导致纯净的原有方法被污染。真正操作…"}, {"id": "6926349278340186119", "title": "Gulp还能这么玩？你知道吗", "desc": "哈喽大家好，我依旧是那个可爱的蛙人。 我在北京某个角落和某人苦苦逼逼在写码，你在那里过得好的嘛，某人会给你加需求嘛。 话不多说，直接楼代码。 我写这个例子呢，就是我在写vue项目中，每次创建一个文件还得手动敲&#x3C;template> &#x3C;script> &#x3C…"}, {"id": "6982157120594509837", "title": "剖析 Webpack SplitChunksPlugin 源码: 学完你也能写一个", "desc": "上个月团队很多人都在反馈有个项目打包速度越来越慢，打包发布一次至少要半个小时，这个速度不仅我们接受不了，测试那边也多次反馈发布进度卡在前端，因此对该项目进行了打包优化."}, {"id": "6983962947441655815", "title": "js继承知多少", "desc": "继承概念 js实现继承的方式 原型链继承 原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数"}, {"id": "6951192202018029605", "title": "Promise从手写到扩展 | Promise/Generator/async | [Promise系列二]", "desc": "经过前文对Promise的手写，我们其实已经对Promise有了比较深入的了解。那么本文我们继续探讨Promise/Generator/async这些技术，建议比较完整的异步相关知识体系"}, {"id": "6844903982725349390", "title": "你想知道的关于 Refs 的知识都在这了", "desc": "Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。 管理焦点，文本选择或媒体播放。 触发强制动画。 集成第三方 DOM 库。 1. createRef createRef 是 React16.3 版本中引入的。 使用 Rea…"}, {"id": "6926683487030214664", "title": "你会喜欢的新数组方法:array.at(index)", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 除了普通对象之外，数组是 JavaScript 中广泛使用的数据结构，而数组中常用操作是按索引访问元素。在本文中，我们介绍新的数组方法array.at(index…"}, {"id": "6844904122408239117", "title": "别高估自己，这道题，有点难！", "desc": "这个玄妙之处确实就在这个块级作用域 if 里面。 假如我们去掉 if 看题。 这道题估计没人好意思去问了，毫无疑问，输出的 a 都是 21 啊。 主要分为变量提升和函数提升。 变量的提升是以变量作用域来决定的，即全局作用域中声明的变量会提升至全局最顶层，函数内声明的变量只会提升…"}, {"id": "6999683909449416741", "title": "使用 better-queue 管理复杂的任务", "desc": "队列，在数据结构中是一种线性表，其特性为必须从一端插入，然后从另一端删除数据。但笔者今天重点不是如何实现该数据结构，我们可以看一看如何借助队列管理复杂的任务。 队列在实际开发中应用的场景非常广泛。因为"}, {"id": "6972105032078458917", "title": "构建 Typescript 知识体系(三)-TS class 浅析", "desc": "这是我参与更文挑战的第九天，活动详情查看:更文挑战 无论 ES 还是 TS 中， 类成员都是实例属性，类成员方法都是实例方法 一. TS 中 class 的特点 1.1 成员属性只在实例上， 而不在原"}, {"id": "6876751431374929934", "title": "如何实现H5可视化编辑器的实时预览和真机扫码预览功能", "desc": "所见即所得的设计理念在WEB IDE领域里一直是备受瞩目的功能亮点, 也能极大的提高 web coder的编程体验和编程效率. 笔者接下来就将对H5可视化编辑器的实时预览和真机扫码预览功能做一次方案剖析, 为大家在设计类似产品的时候提供一些思路. 我们还是基于笔者开发的 H5-…"}, {"id": "6967706993565892639", "title": "用dumi发布一个用于处理枚举值的npm包", "desc": "背景 前端开发的时候总是会用到枚举值，对于枚举值我们的应用场景如下： 页面下拉框的枚举类型以及枚举类型对应的数字量 后台返回数字量，前端需要显示对应的文本描述 以前我们的做法是分开放在不同的地方的，其"}, {"id": "6954378208351354893", "title": "从LHS和RHS查询的角度看待JavaScript中的预编译", "desc": "【前言】先让我们来分析一下编译过程，我们的编译器拿到这段程序时，会先将其分解为词法单元，然后将词法单元解析成一个树结构，也就是抽象语法树，简称为AST。接下来就是将AST转换为机器指令。"}, {"id": "6844903647390744589", "title": "Git如何回滚一次错误的合并", "desc": "今天不说前端，来聊聊git吧。 发现现在的小孩，玩框架一套一套的，等到玩点实质的工程化的东西就不行了。 很多人对Git究竟是一个怎样的系统，还是一知半解。 在这里强烈建议大家先理解git的核心思想和工作原理，有过subversion或者perforce使用经验的人更是需要摒弃之…"}, {"id": "6844904119853924365", "title": "26 个 CSS 面试的高频考点助力金三银四", "desc": "CSS是**层叠样式表（ Cascading Style Sheets ）**的缩写，是一种样式表语言，用于描述以 HTML 之类的标记语言编写的文档的布局。 它是用于设计Web页面的三剑客之一，另外两位浩客是HTML和Javascript。 CSS 的设计目的是使样式和内容分…"}, {"id": "6999308545359347743", "title": "Fintech FE Weekly issues 2", "desc": "Ten Years of Bootstrap Bootstrap 10年了，曾经的 jQuery 时代 UI 库的佼佼者，当时我们用的飞起，祝福一下吧~😭"}, {"id": "6844904136291401736", "title": "web 图像技术：前端引入图片的各种方式及其优缺点", "desc": "前端开发人员在构建网站时需要做的一个决定是引入图片的方式。它可以是<img>标签，或者是通过CSS background 属性，还可以使用 SVG <image>。选择正确的方式是很重要的，它对性能和可访问性有很大的影响。 在本文中，我们会学习引入图像的各种方式，以及每种方式的…"}, {"id": "6844903642059767816", "title": "面试图谱：前端基础技术知识讲解", "desc": "金九银十的秋招季近在眼前，想必大家也都心痒难耐，准备挑战更好的工作机会。那么，面试肯定是最大的挑战。 对于面试来说，平时的积累肯定是必须的，但是在面试前的准备也是至关重要的。 在几月前我个人组建了一个小团队，花了将近半年的时间寻找大厂的面试题，筛选出了近百个知识点然后成文，并全…"}, {"id": "6999989814804086791", "title": "React Hooks初探（一）", "desc": "hooks引入react里已经很长时间了，在项目中一直使用，文档也没仔细阅读，今天打算再重新看看文档，领略一下当初学习的感受。"}, {"id": "6993580950894411806", "title": "JavaScript 系列之作用域（三）", "desc": "[JavaScript 系列之作用域｜ 8月更文挑战 ]连更数天带你学会 JavaScript 基础。"}, {"id": "6997297454253408269", "title": "【Javascript进阶】深拷贝与浅拷贝原理分析及实现", "desc": "背景 最近开发的小程序项目中，要使用深拷贝，但是不想用Lodash库（太大，小程序受不了）。所以打算自己写，结果没写出来，于是网上找了现成的先应付着。 项目上线后，觉得是时候做个基础知识的回顾了。这是"}, {"id": "6918726428532375566", "title": "如何使用CSS和JS创建“前后”图像比较效果", "desc": "使用html range input创建前后图像比较效果的分步教程。使用CSS和JavaScript，JS部分代码非常少，主要是HTML、CSS，和实现思路。 如果你有两张图像进行比较，则“前后”图像滑块是一个有效而又简单的UI元素。 该“slider”元素使你的用户可以控制两…"}, {"id": "6945219696429891597", "title": "深入了解 call, apply, bind 和模拟实现", "desc": "一、call 格式 [function].call([this], [param]...)，一句话概括：call() 将函数的 this 指定到 call() 的第一个参数值和剩余参数指定的情况下调用某个函数或方法。 1. 热身题1 2. 热身题 2 1. 模拟实现内置的 ca…"}, {"id": "6987785019813003272", "title": "JS 基础--手写专栏", "desc": "本文记录一些 js 一些基础手写题 手写 call 手写 bind 手写 New 手写 instanceof 手写 Promise/A+规范 最后 个人感觉类似手写的问题很容易忘记，需要注意要理解原理"}, {"id": "6980857098989109256", "title": "[项目篇]vue3+ts vue3新特性代码详解2- 第八天", "desc": "模块化结合typescript - 泛型改造 使用 defineComponent 包裹组件 defineComponent 文档地址 Teleport - 瞬间移动 第一部分 vue3 新添加了一个"}, {"id": "6995888681827434533", "title": "重温ES6系列之“函数的扩展-函数的作用域”", "desc": "函数的作用域 函数一个需要注意的地方是，如果参数默认值是一个变量，则该变量所处的作用域，与其他变量的作用域规则是一样的，即先是当前函数的作用域，然后才是全局作用域。 上面代码中，参数y的默认值等于x。"}, {"id": "7000377075160842247", "title": "JavaScript进阶（四）防抖", "desc": "在我们日常开发中，尤其在一些需要和用户实现大量且频繁的交互的时候，肯定会遇到用户频繁点击，导致接口报错，这个时候我们就需要对其做一些优化了，通常这种情况都是通过防抖来实现的。"}, {"id": "6999824739015327775", "title": "noVNC 连 openstack", "desc": "添加 NoVNC 和 websokify 库 要添加 noVNC 库，请在命令行中执行以下命令： 然后转到websockify-js github 页面并将库下载为 zip 文件。"}, {"id": "6993988946237620255", "title": "JS 中有用的“冷知识”", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战” JS 中的内置数据类型 内置数据类型在标准中写作 built-in types 其中包含了 7 种基本类型和 1 种引用类型，7种基本类型"}, {"id": "6998155859129794573", "title": "a==1 && a==2 && a==3结果是什么？能返回true吗？", "desc": "这么无理取闹的问题，`a == 1 && a == 2 && a == 3`我直接就是控制台粘贴，嗯，符合预期，不然我该思考我对js的理解是不是有什么问题了"}, {"id": "6862577796279959566", "title": "[译]18个有用的JavaScript片段", "desc": "原文作者：Amy J. Andrews 如果有人问我，作为一个初学者应该学习什么编程语言，我会推荐 JavaScript，这种强大的语言几乎涉及到编程各个方面 - 前端、后端、web应用程序、桌面应用程序、移动应用程序等等。 这篇文章我将展示18个常用的JavaScript片段…"}, {"id": "6844904021300346887", "title": "TypeScript高级用法详解", "desc": "作为一门强大的静态类型检查工具，如今在许多中大型应用程序以及流行的JS库中均能看到TypeScript的身影。JS作为一门弱类型语言，在我们写代码的过程中稍不留神便会修改掉变量的类型，从而导致一些出乎意料的运行时错误。然而TypeScript在编译过程中便能帮我们解决这个难题，…"}, {"id": "6999798204388622366", "title": "JavaScript知识点回顾（二十四）——复制对象", "desc": "这是我参与8月更文挑战的第二十四天，活动详情查看：8月更文挑战 复制对象 JavaScript初学者最常见的一个问题就是如何复制一个对象。"}, {"id": "6897117313989984264", "title": "写 JS 逻辑判断，不要只知道用 if-else 和 switch", "desc": "我们在编写 JS 代码时，经常会遇到逻辑判断复杂的情况。一般情况下，可以用 if/else 或 switch 来实现多个条件判断，但会出现一个问题：随着逻辑复杂度的增加，代码中的 if/else 和 switch 会越来越臃肿。本文将带你尝试写出更优雅的判断逻辑。 你可以在代码…"}, {"id": "6996329769713270797", "title": "JavaScript 基础学习-拖拽实现 & 正则", "desc": "☆☆☆ 今天的内容( 拖拽的实现 和 正则相关) 重点!! day15☆☆☆ 结合自己的理解, 用白话文简单又全面概括 JavaScript 学习中的基础"}, {"id": "6882551661169115150", "title": "国产之光，完全自主开源的在线电子表格，类似 Google Sheet 和 Excel", "desc": "现在web技术蓬勃发展，办公应用特别是excel都搬到了线上，比较流行的有腾讯文档，金山文档，石墨文档，Google Doc，属于企业服务。但是小型企业或者团队，如果想自己搭建一套在线表格系统呢？有没有开源的方案？ 经笔者调查，一些表格具有相对简单的功能，只能显示数据和过滤器功…"}, {"id": "6899687401875210254", "title": "Question丨async/await 一定要加 try/catch 吗？", "desc": "浏览器的报错，我们是肯定要处理的，因为这可能会影响到程序的正常运行。 我们可以通俗的理解，await xxx() 底下的代码块都是 Promise 返回的 resolve，如果 Promise 返回的是 reject，那么代码块将不会被执行。 虽然不影响程序的运行，但是程序依然…"}, {"id": "6954248023522148389", "title": "全网最全 ECMAScript 攻略 | 创作者训练营第二期", "desc": "作为前端开发工程师，ES6 这个词想必不陌生， ECMAScript 你也应该有所了解，你是否好奇过 ECMA 世界的神秘数字代号， ECMA262 是什么，TC39 是什么，Stage4又是什么？"}, {"id": "6992485323464933407", "title": "为什么TypeScript比JavaScript有优势？TypeScript和JavaScript区别在哪？", "desc": "TypeScript和JavaScript是目前项目开发中比较流行的两种脚本语言，但JavaScript能否创建大型复杂的web应用，这恐怕没那么容易 于是我们选中另外一个解决方案——TypeScri"}, {"id": "6844903767129718791", "title": "async/await 优雅的错误处理方法", "desc": "这样写代码里充斥着 try/catch，有代码洁癖的你能忍受的了吗？这时可能会想到只用一个 try/catch。 在上面写法中，如果 fetchData 返回 resolve 正确结果时，data 是我们要的结果，如果是 reject 了，发生错误了，那么 data 是错误结果…"}, {"id": "6979946268072247333", "title": "初识函数式编程 | 函数式编程", "desc": "函数式编程有哪些好处,常见的编程范式,函数式编程的定义,函数式编程和面向对象编程的不同,函数式编程的五大特点"}, {"id": "7000168161370701837", "title": "commonJS和ES6模块化的区别", "desc": "一、简述区别 在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简"}, {"id": "6996505841708826654", "title": "8月更文挑战 | 前端Javascript面试题汇总（概念篇）", "desc": "最近在准备秋招面试，关注了不少前辈们和大佬们的公众号，也拜读了掘金里许多大佬的前端方面的文章，对我而言十分有用，我在下面把他们汇总下来，让自己能够再深入学习。"}, {"id": "6989876818908020743", "title": " vue3.0使用ant-design-vue进行按需加载原来这么简单", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 下载 ui库 按需加载 在项目的根目录下创建 babel.config.js 在项目跟目录下创建vue.config."}, {"id": "7001872097337311246", "title": "setTimeOut/setInterval出现时间偏差问题原因及解决方案【每日一问20210829】", "desc": "每日一问系列，关于定时器问题笔记，涉及到JavaScript的事件循环，及setTimeOut/setInterval出现时间偏差问题原因及解决方案。"}, {"id": "6982472629814820872", "title": "简述Vue和React开发体验的异同（状态层）", "desc": "接上篇文章，本文我们来聊聊对于状态这块，Vue和React有何异同。 先说关键词命名，在Vue中，通过声明data来定义内部变量，data翻译为中文是数据的意思，这也"}, {"id": "6971018380581011464", "title": "用console画条龙?", "desc": "相识 console一定是各位前端er最熟悉的小伙伴了，无论是console控制台，还是console对象，做前端做久了，打开一个网页总是莫名自然的顺手打开控制台，有些调皮的网站还会故意在控制台输出一"}, {"id": "7000755315654426660", "title": "表单属性和方法", "desc": "序言 我们经常有用到表单，但是对表单的一些细节处理并不清楚，我们今天来学习一些相关的内容，处理表单会变得更加方便。"}, {"id": "6997335989425274911", "title": "ES6的symbol数据类型", "desc": "symbol数据类型 js语言中，ES6前有6种数据类型。 ES6新提出symbol数据类型，所以symbol是js的第七种数据类型，表示独一无二的值。是一种类似于字符串的数据类型。 symbol出现"}, {"id": "6983924209403559950", "title": "一个人的前后端分离全过程 小程序+Nodejs(Koa)+mongodb+Vue", "desc": "前言 掘金潜藏良久，游历各种技术文章，悄悄点赞都藏，偶尔逛逛沸点，留言互动。心中一直拥想自己写点什么的想法，但是写点什么呢？？？这是一个值得思考的问题，想了几年了也没想出来，尤其是看过别人的文章之后，"}, {"id": "6968657124210114574", "title": "JavaScript 系列八: 同步与异步", "desc": "前言 在开始学习之前，我们想要告诉您的是，本文章是对本文章是对JavaScript语言知识中异步操作部分的总结。"}, {"id": "6955445902693629959", "title": "影响了一代代前端人的 20 个里程碑式的顶级开源项目！2021 成为里程碑的项目又是哪个呢？", "desc": "本文介绍 2006 年至 2020 年的 20 个重要的顶级前端项目，每一个都是里程碑式的影响了一代代前端人的开源项目。"}, {"id": "6969450241997144095", "title": "【js进阶】三分钟搞懂 JavaScript 中的 this 指向问题", "desc": "前言 本文采用总分总的方式叙事: 总结 如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象 由 new 调用"}, {"id": "7000664532712423437", "title": "JavaScript 实现队列、栈、链表", "desc": "前端必须要掌握常见的数据结构：队列、栈、单向链表；了解这些，让你对开发中的数据结构更加清晰，这也是程序员需要具备的。"}, {"id": "6990551363692265503", "title": "知乎问题：如何看待 TC39 的提案 Module Fragments？", "desc": "​闲逛知乎的时候看到了这个问题，下面只有 2 个回答。贺师俊大佬竟然也关注了这个问题，于是...... 没人邀请，我来勇敢回答一把子这个问题。"}, {"id": "6972463039752699912", "title": "Javascript 的未来离不开元编程(1)", "desc": "其实 Meta 愿意是 post 意思，其实本意有点高级和二次元的意思。但西方哲学界在几千年中渐渐赋予该词缀一种全新的意义，关于某事自身的某事。"}, {"id": "6984927357102456869", "title": "绕过微信限制，自动跳转APP下载", "desc": "众所周知，微信内打开H5链接是不支持直接下载APK的，而是会让先下载应用宝，然后打开应用宝，在应用宝中进行下载apk。对于APP分享链接来说，我下载一个应用，你还让我先下载另一个我不需要的应用，很可能"}, {"id": "6844903955554648078", "title": "[译] axios 是如何封装 HTTP 请求的", "desc": "前端开发中，经常会遇到发送异步请求的场景。一个功能齐全的 HTTP 请求库可以大大降低我们的开发成本，提高开发效率。 axios 就是这样一个 HTTP 请求库，近年来非常热门。目前，它在 GitHub 上拥有超过 40,000 的 Star，许多权威人士都推荐使用它。 因此，…"}, {"id": "6992212035840770084", "title": "什么是this？", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 什么是this？ 通常this的指向分为很多种情况，下面我们一一 来介绍： 1. 默认情况（默认绑定） 默认的this 在默认情况下，thi"}, {"id": "7002612085091729445", "title": "JS数据类型（7种）", "desc": "JavaScript 中共有七种内置数据类型，包括基本类型和对象类型。基本类型 string（字符串） boolean（布尔值） number（数字） symbol、null、 undefined"}, {"id": "6982738620171943949", "title": "常用的前端JavaScript方法封装", "desc": "常用的前端JavaScript方法封装 1、输入一个值，返回其数据类型** 2、数组去重 3、字符串去重 //去除连续的字符"}, {"id": "6928922445311115278", "title": "“动态换肤” 踩坑记录｜牛气冲天新年征文", "desc": "随着业务的发展，客户的需求也会变得更加多样化，产品后期就需要有自定义界面的能力，于是出现了“动态换肤”的需求。 但是切换主题的方式，经验证并不能很完美的适用于我们微前端项目。 我在接到需求后，经过和公司架构师及其他同事的探讨后，渐渐产出了以下几种方案，一步步踩坑过来。 两种模式…"}, {"id": "6844904016103604238", "title": "web开发2020年趋势分析（概转）", "desc": "2019-12-10 无服务器架构新增描述“云函数”及对应英文。 以下为原文。 首先声明，本篇文章属于外网内容概括和转摘，加上部分个人理解，如有侵权行为请联系我，将适当予以调整。 为什么要有这篇文章（视频），是为了给广大前端未入门或刚入门者有一个宏观的了解，前端开发可以做什么，…"}, {"id": "6993528402636439560", "title": "重学es6 - 第五部分 | 8月更文挑战", "desc": "es6后引入了类的概念. 写法和java这种面向对象的很相似. 让前端可以更好的写面向对象的代码. 之前我们写的话, 需要用原型链的形式去写, 其实没有类这种形式直观易懂."}, {"id": "6915190212016472077", "title": "JavaScript面向对象&继承", "desc": "一. 原型链 原理： 使用父类的示例重写子类的原型。 在创建子类的实例时，不能向父类的构造函数中传递参数。 二. 借用构造函数 原理： 在子类构造函数的内部调用父类的构造函数，将子类的执行环境 this 用 call 方法传到父类的构造函数中，使父类中的属性和方法被重写到子类上…"}, {"id": "7003158942436032519", "title": "commonJs规范", "desc": "exports 当一个模块被其他模块引用 会执行这个模块 并默认导出是一个空对象 exports指定模块的输出 (导出的是个对象 默认是{}) 可以在exports对象上,指定属性 exports.k"}, {"id": "7001862070803103758", "title": "【日拱一卒】JavaScript函数式编程指南 ", "desc": "这是我参与8月更文挑战的第29天，活动详情查看： 8月更文挑战” 前言 提速提速，阅读技术书籍，扩充自己的思路。不要过度沉迷细节。 第一章 函数式编程介绍 面向对象编程通过封装变化使得代码更易理解，函"}, {"id": "6999638353964433439", "title": "JSON的应用", "desc": "序言 我们经常会在项目中把一些数据转换为JSON，例如存储的时候，以便对象和函数正常保存，这种操作也叫作序列化，或JSO"}, {"id": "6890325820200943629", "title": "分享九个 JavaScript 图片懒加载库", "desc": "在 web 应用程序中性能至关重要。你可以拥有世界上最漂亮、最吸引人的网站，但如果它不能在浏览器上快速加载，人们会倾向于略过它。要想使你的网站表现得非常好，可能相当棘手。这是因为 web 开发中存在许多瓶颈，例如耗费性能的 JavaScript、解析缓慢的 web 字体显示、 …"}, {"id": "7000241285239930916", "title": "JavaScript解析JSON数据", "desc": "1. json字符串转化为json对象 可以通过JavaScript的eval()函数来进行解析，代码如下： 或者通过JSON.parse（）方法来解析，代码如下： 我们再看一下JSON.parse("}, {"id": "6964661155692281863", "title": "如何看待 Web 开发构建工具 Vite？", "desc": "vite 启动链路 命令解析 这部分代码在 src/node/cli.ts 里,借助 cac 用于构建命令行 cli 的 script 脚本, vite 主要构建了四条 script 的命令 dev、"}, {"id": "6981387391097372702", "title": "「面经」JavaScript 懒加载解析 & 手写题", "desc": "这是我参与新手入门的第 1 篇文章：图片懒加载 => 前置知识 & 数据类型判断 & 数组去重 & 字符串反转"}, {"id": "6844903655770963976", "title": "前端工程不了解？带你踩坑加爬坑。", "desc": "由于webpack在4.0后，新增mode配置项，它为我们默认设置了production。但是该警告并没有影响build的结果暂且忽略。 可以看到dist目录已经生成了名为my-first-webpack.bundle.js文件。 OK，最基本的配置已经完成，接下来引入Reac…"}, {"id": "6844903509641429006", "title": "滴滴 Web 移动端组件库 cube-ui 开源", "desc": "滴滴 WebApp 团队在去年底用 Vue.js 2.0 对业务进行重构，并开发了一套移动端组件库 cube-ui 支撑业务的开发。经过了一年多的业务考验，cube-ui 也日趋成熟，而且我们相信除了在滴滴内部，cube-ui 也一定也有它的用武之地。好的东西必须要和大家分享，…"}, {"id": "6907109642917117965", "title": "超级详细的 js数组方法详解", "desc": "ES6 为数组新增创建方法的目的之一，是帮助开发者在使用 Array 构造器时避开 js 语言的一个怪异点。 Array.of()方法总会创建一个包含所有传入参数的数组，而不管参数的数量与类型。 在 js 中将非数组对象转换为真正的数组是非常麻烦的。在 ES6 中，将可迭代对象…"}, {"id": "6844903623680327694", "title": "是时候好好安利下 LuLu UI 框架了！", "desc": "你好，LuLu！ LuLu UI是一个基于jQuery，针对PC网站，兼容IE8+或IE7+的前端UI框架，包含20+静态或动态UI组件。"}, {"id": "6997370891281645599", "title": "结合弹框拖拽功能感受pointer-events的“穿透”", "desc": "需求：实现弹框可拖拽移动，内嵌的聊天对话框为iframe。 问题 遇到的问题：由于内嵌的是iframe,当鼠标按下快速移动时（鼠标脱离"}, {"id": "6844904153651773448", "title": "进来看看ES6 Promise最全手写实现", "desc": "本文适合一些了解并使用过Promise的人，如果你没有了解或使用过Promise，建议先看一下 阮一峰 ECMAScript6 入门 之Promise。 对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功…"}, {"id": "6860117440727744525", "title": "前端基础必备：带你了解JavaScript中的Event Loop", "desc": "同步与异步问题应该是每一个前端工程师在实际开发中都会遇到的，除了会用，还要知道其原理才能在解决一些比较坑的地方（相信实际开发中应该不少😄）能够游刃有余。 进程与线程的概念。 线程（thread）是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资…"}, {"id": "6844903608689885197", "title": "ES6核心特性", "desc": "这部分着重介绍：babel 编译ES6语法，如何用webpack实现模块化。 ES6 提供了许多新特性，但并不是所有的浏览器都能够完美支持。下图是各个浏览器对ES6兼容性一览表(以export为例) 由上图可知，有些浏览器对于ES6并不是很友好，针对 ES6 的兼容性问题，很多…"}, {"id": "6844904148022870023", "title": "面试题：nginx有配置过吗?反向代理知道吗?", "desc": "举个正向代理的例子，我(客户端)没有绿码出不了门，但是朋友(代理)有，我(客户端)让朋友(代理)去超市买瓶水，而对于超市(服务器)来讲，他们感知不到我(客户端)的存在，这就是正向代理。 举个反向代理例子，我(客户端)让朋友(代理)去给我买瓶水，并没有说去哪里买，反正朋友(代理)…"}, {"id": "7002439283554385950", "title": "结合机考题for和forEach在使用return上的差别", "desc": "在做一道逻辑题时，在forEach中使用return不能跳出整个循环，只能跳出当前循环，使用break则会报错。 但是在for循环中"}, {"id": "6844904109795983374", "title": "Vue实现的聊天系统", "desc": "好友之间聊天，支持问题、图片、表情、音视频通话以及白板（适用WebRTC实现）。 对好友支持备注、分组功能，分组可以添加、修改、删除。 好友之间的消息支持已读状态提醒，可以即时的知道对方是否已读消息。 在线好友统计，在每个分组中可以查看当前在线好友的数量，并对在线好友的头像做高…"}, {"id": "6844903984457580551", "title": "学习 sentry 源码整体架构，打造属于自己的前端异常监控SDK", "desc": "感兴趣的读者可以点击阅读。 本文通过梳理前端错误监控知识、介绍sentry错误监控原理、sentry初始化、Ajax上报、window.onerror、window.onunhandledrejection几个方面来学习sentry的源码。 开发微信小程序，想着搭建小程序错误监…"}, {"id": "7000634511550185485", "title": "Javascript中的DOM 节点操作", "desc": "JavaScript中获取元素通常使用两种方式： 节点概述 网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。 HTML DOM 树中的所有节点均可通过 "}, {"id": "6884384986061864967", "title": "如何在Javascript中使用Object.freeze()", "desc": "Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。fre…"}, {"id": "6847902217261809671", "title": "useCallback/useMemo 的使用误区", "desc": "在编写 React Hook 代码时，useCallback和useMemo时常令人感到困惑。尽管我们知道他们的功能都是做缓存并优化性能，但是又会担心因为使用方法不正确导致负优化。本文将阐述useCallback和useMemo在开发中常见的使用方式和误区，并结合源码剖析原因，…"}, {"id": "7001810791020101639", "title": " 执行上下文与作用域", "desc": "变量提升与函数提升 变量声明提升：通过var定义（声明）的变量，在定义语句之前就可以访问到，值为undefined； 函数声明提升：通过function声明的函数，在之前就可以直接调用 注意：必须是f"}, {"id": "6969758380835471373", "title": "js解无重复字符的最长子串", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 我们不妨以示例一中的字符串 abcabcbb\\texttt{abcabcbb}abcabcbb 为例，找出从每一个字符开始的，不包含重复字符的最"}, {"id": "6943763969576271879", "title": "qiankun 微前端实践及常见问题", "desc": "其实我个人更喜欢叫成 前端微服务架构， 感觉逼格更高点... 当然你的子应用全是同一个框架那上面的话当我没说。。。 npm指向本地file地址：npm install file:../common。直接在根目录新建一个common目录，然后npm直接依赖文件路径。 npm指向私…"}, {"id": "7002960141691650078", "title": "每天一个npm包 之 i", "desc": "hello, 大家好，我是前端学长Joshua (公众号) 。 热心于做开源，写文章。目的为帮助在校大学生，刚入职场的小伙伴可以尽快搭建自己的前端学习体系。 如果你有学习上的困惑，欢迎关注我，找我交流"}, {"id": "6844903607309959175", "title": "优化页面的打开速度，要不要了解一下~", "desc": "对于一个网站来说打开速度是一个很重要的指标，只是大部分时间内我们的精力可能都用来对付需求了，特别是当我们做的是一些内部的项目时，我们常常的会忽略了这一方面的优化。其实要对一个页面的打开速度做出一些比较常见的优化并没有想象中的困难，本文将带你做一些既不费力也不费时间的优化操作，这…"}, {"id": "6986522170688012302", "title": "规避容器组件发送重复请求", "desc": "问题 最近在做前端优化时，发现很多容器组件对同一个接口发起了重复调用。这是可优化的，使得在极短时间内发起的重复请求控制只请求一次，然后将结果resolve给所有的请求即可。实现原理也很简单就是将同一个"}, {"id": "6992395294545543205", "title": "基础教程 4. JS 的函数", "desc": "1.1 理解函数意义； 1.2 函数语法； 1.3 函数的参数机制； 1.4 函数的返回值机制； 2.1一个选项卡的例子；"}, {"id": "6977612691968000014", "title": "技术周报 · 2021-06-25", "desc": "小编推荐 业务中的前端组件化体系 如何建设一个开源图形引擎的文档网站 异常 SourceMap 与前端异常监控 前端白屏监控 JavaScript & Node.js 从 0 到 1 实现浏览器端沙盒"}, {"id": "6964639513888948255", "title": "利用puppeteer做一次海报分享需求", "desc": "你是否还因为前端插件生成图片模糊被ui怼？ 你是否还因为无法和ui小姐姐套近乎感到伤心？ 你又是否因为无法帮助行政小姐姐的忙感到懊恼？ 快来看看基于node的这款截图插件吧"}, {"id": "6964566922037985316", "title": "前端如何上传文件", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 前端无法直接操作本地文件，所以需要用户触发。常见的有三种触发方式： 通过<input type=\""}, {"id": "6844903989834678279", "title": "React 中获取数据的 3 种方法：哪种最好？", "desc": "为了保证的可读性，本文采用意译而非直译。 在执行 I/O 操作（例如数据提取）时，要先发送网络请求，然后等待响应，接着将响应数据保存到组件的状态，最后进行渲染。 在 React 中生命周期方法、Hooks和 Suspense是获取数据的方法。接下用事例演示一下如何使用它们并说明…"}, {"id": "6844903669922529287", "title": "VueSSR高阶指南", "desc": "我们都知道，对于node来说，前端vue代码的迭代节奏是很快的，可能一周要迭代几次，但是node的迭代却没那么平凡，可能一周更新一次甚至更久，那么为了node服务的稳定，减少node服务的发布次数，是非常有用的。 为了前后端分离，我们在前端和api层中间，架构了一层node层，…"}, {"id": "6882138062927691783", "title": "[ 干货篇 · 第三期 ] 一个拖拽卡顿问题引发出对setTimeOut的探索", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 就在国庆前，同事写了一个拖拽左边菜单栏改变菜单栏宽度从而得到更好的交互体验效果。But ！ 美中不足的是拖拽的时候如果手速过快，会导致卡顿效果，看起来十分难受。经过不断调试，最终是使用了setTimeout解决了该问题。那…"}, {"id": "6844903573784887309", "title": "前端算法收集库", "desc": "1. 前言 这是一个常见的js算法面试题收集库，包含测试，欢迎star，如果库中没有的算法，欢迎提issue或者PR，补全。 提到算法，这里就要说下时间复杂度。 时间复杂度：算法的时间复杂度是一个函数，描述了算法的运行时间。时间复杂度越低，效率越高。 2. 关于代码规范 3. …"}, {"id": "6862591794312560647", "title": "JavaScript总结在项目中使用到的工具函数", "desc": ">作者：蘇小小 >更新时间：2020年8月19日截取URL路径中指定参数值```js GetQueryString(name) { var reg = new RegExp(\"(^|&)\" + nam"}, {"id": "6996654309715197988", "title": "JavaScript 常用数据类型及使用方式 -3", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 昨天我们介绍了 JavaScript 对象的相关知识点，今天来学一学 函数相关部分。 一.JavaScrip"}, {"id": "6844903792555589639", "title": "从一个数组中找出 N 个数，其和为 M 的所有可能--最 nice 的解法", "desc": "这是一个呆萌炫酷吊炸天的前端算法题，曾经乃至现在也是叱咤风云在各个面试场景中。 可以这样说，有 90% 以上的前端工程师不会做这个题目。 这道题涉及的知识点很多，虽然网上也有相关的解答文章，但是在算法小分队的讨论和分析中，一致认为网上的文章太旧了，而且最多就是贴贴代码，写写注释…"}, {"id": "6957961450912481310", "title": "参考await-to-js写了一个 await的错误处理", "desc": "前言 无意间看到了一个await错误处理的第三方npm包await-to-js 然后看了源码 也不难 就自己写了一个对应的js,并用在当前公司的项目的上一个迭代里,拖到今天来做一个分享 为什么需要做a"}, {"id": "6844903640520474637", "title": "Hybrid App技术解析 -- 原理篇", "desc": "随着 Web 技术和移动设备的快速发展，Hybrid 技术已经成为一种最主流最常见的方案。一套好的 Hybrid架构方案 能让 App 既能拥有极致的体验和性能，同时也能拥有 Web技术 灵活的开发模式、跨平台能力以及热更新机制，想想是不是都鸡冻不已。。😄。本系列文章是公司在…"}, {"id": "6844903790370357262", "title": "帧动画的多种实现方式与性能对比", "desc": "以上各种动画形式都可以制作出一种类型的动画，那就是帧动画，也叫序列帧动画，定格动画，逐帧动画等，这里我们统一用帧动画来表述。 帧动画一般用来实现稍微复杂一点的动画效果，同时希望动画更细腻，设计师更自由的发挥。他可以定义到每一个时间刻度上的展现内容，我们一般用帧动画来做页面的Lo…"}, {"id": "6991772113761730574", "title": "Webpack配置-常用loader", "desc": "Webpack核心概念 Entry（入口): 入口文件配置。指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和"}, {"id": "6844904001650032653", "title": "搞懂并学会运用 Vue 中的无状态组件", "desc": "状态管理通常在较小的项目并不需要，但是当涉及到更大的范围时，如企业级的应用大部分需要它了。简单的说，状态是一个包含应用程序使用的最新值的对象。但是，如果咱们从结构的、更抽象的角度来看待它，就会清楚地看到，状态是复杂应该中重要一块，它使能够构建干净的体系结构，并将关注点强有力地分…"}, {"id": "6945963711580340232", "title": "从梦幻西游学会广度优先搜索和A*算法", "desc": "这次主要是通过梦幻西游的案例来学习A* 算法以及巩固pixi,没学过pixi的可以看一下从英雄联盟来学pixi.js, 加上这篇的话，有2篇写了游戏了，其实我并不是做游戏的，也一点都不专业，大多数时候是在写大屏项目，只是觉得通过这样的案例学起来更有动力，程序员这个行业内卷真的挺…"}, {"id": "6844903790739456013", "title": "JS 中的 Reflect 和 Proxy", "desc": "Proxy和Reflect是 ES6 新增 API。 Reflect是一个内置的对象，它提供拦截 JavaScript 操作的方法。Reflect不是一个函数对象，因此它是不可构造的。Reflect的所有的方法都是静态的就和Math一样，目前它还没有静态属性。 Reflect对…"}, {"id": "6867374201796460552", "title": "六脉神剑之核心脉——JS核心知识梳理", "desc": "一. JS运行 比如使用了ES6语法，用到了let,const，就要转换成var。 3. 执行上下文 4. 作用域链 5. 静态作用域和动态作用域 1. 闭包作用 二. JS设计 1. 原型 函数对象原型（Function.prototype） 是负责造构造函数的机器，包含Ob…"}, {"id": "6963629702934167565", "title": "不会忘记的 JSONP (手写面试题)", "desc": "序言 我们今天学习的重点是 JSONP 的实现原理，JSONP( Json with padding ) , 是解决跨域问题的一种方法，所以这篇文章会简单的介绍一下跨域相关的问题，然后重点理解一下 J"}, {"id": "6974938023607664677", "title": "JS，聊聊深浅拷贝", "desc": "深拷贝与浅拷贝在前端项目开发过程中，使用频率、实用性都很高的一个小工具函数了。 针对不同的业务场景，可以选择的写法也有不少。今天就写写他"}, {"id": "6966421204345290759", "title": "闭包其实也不难理解", "desc": "在刚开始学习javascript的时候，要说哪些地方哪些概念不太好理解，那我觉得闭包算一个，但是我们日常开发中一定都用到了闭包，那到底怎么来更好的理解闭包呢？"}, {"id": "7005558885947965454", "title": "简述 JavaScript 的事件捕获和事件冒泡", "desc": "JavaScript 事件捕获和冒泡可以用来有效地处理 Web 应用程序中的事件。了解事件流以及捕获和冒泡是如何工作的，将有助于你通过正确的事件处理来优化你的应用程序。"}, {"id": "7002485725295804430", "title": "前端需要懂的 SPA 与 MPA", "desc": "SPA 和 MPA，这两个技术名词，前端应该都要进行了解，到底是什么意思，涉及到什么原理知识，下面我们就来简单聊聊吧。"}, {"id": "7006638344327151623", "title": "??、??= in JavaScript", "desc": "前言 今天偶然看到一段 JavaScript 代码中使用了 ?? 运算符，当时就有点纳闷了：JavaScript 中还有这玩意？ 还记得在学习 Dart 语法时也有 ?? 逻辑运算符，没管那么多，直接"}, {"id": "6844904182843965453", "title": "1.2W字 | 了不起的 TypeScript 入门教程", "desc": "TypeScript 已经入门了，但觉得 TypeScript 泛型有点难，想系统学习 TypeScript 泛型相关知识的小伙伴们看过来一文读懂 TypeScript 泛型及应用（ 7.8K字）（掘金）。 TypeScript 是一种由微软开发的自由和开源的编程语言。它是 J…"}, {"id": "7007083238648709151", "title": "JavaScript 中的继承", "desc": "本文中只讲了两种继承，一种是原型式的继承，另外一种是ES6的Class继承，javascript的继承，用”委托“来形容更贴切。"}, {"id": "7005838707651526663", "title": "CSS+JS实现土味中秋特效", "desc": "我正在参加中秋创意投稿大赛，详情请看：[中秋创意投稿大赛] 今天我们来实现一个元素颜色变换的动效.像这种颜色随机变换的动效可以设计的非常炫酷;你们也可以自由发挥试一下哦!希望大家多多支持哦!"}, {"id": "7000654161297539079", "title": "基于js管理大文件上传以及断点续传", "desc": "前端小伙伴们平常在开发过程中文件上传是经常遇到的一个问题，也许你能够实现相关的功能，但是做完后回想代码实现上是不是有点\"力不从心\"呢？你真的了解文件上传吗？如何做到大文件上传以及断电续传呢，前后端通讯"}, {"id": "6963076475020902436", "title": "绝了，没想到一个 source map 居然涉及到那么多知识盲区", "desc": "Source map 想必大家都不陌生。线上的代码多是压缩后的，如果线上有报错却只能调试那个代码多半是个噩梦。因此我们需要有一个桥梁帮助我们搭建起源代码及压缩后代码的联系。"}, {"id": "6844904166192578567", "title": "想自学JS吗？想提升JS底层原理吗？76张脑图带你彻底搞懂原生JS", "desc": "别走，别走，别走啊😭....."}, {"id": "6944632786724585502", "title": "猛增 110K Star！年增长数最多的 10 大顶级前端学习资源项目！", "desc": "1. javascript-algorithms 该仓库包含了多种基于 JavaScript 的算法与数据结构。 每种算法和数据结构都有自己的 README，包含相关说明和链接，以便进一步阅读 (还有 YouTube 视频) 。 算法包含了 算法主题 和 算法范式。 其中算法主…"}, {"id": "7002866939026472974", "title": "你可能不知道微信小程序客服消息还能这么用~", "desc": "前言 最近都在使用uni-app+uniCloud来完成一些个人原创技术内容的基础建设，比如完成了一个名为大帅老猿的小程序。未来还将利用这个小程序来和读者们互动，以及承载一些产品的创意玩法。 目前的版"}, {"id": "6990146025100935205", "title": "一个月，从LV2到LV4，这个毕业刚一年的菜鸟经历了啥？", "desc": "前言 大家好，我是林三心，我是一名毕业刚好一年的前端工程师，就在昨天，我的掘金级数来到了LV4，而在一个月前，我还是一个LV2的小笨蛋，每天就看看文章，写写Vue源码文章(有兴趣的兄弟可以看看我的Vu"}, {"id": "7007355980698632200", "title": "JavaScript知识点总结", "desc": "执行上下文 变量/函数提升 作用域/链 this指向 构造函数 原型/链 数据类型(stack、heap) 作用域和作用域链"}, {"id": "7005110828593020965", "title": "前端内存泄漏处理", "desc": "内存泄漏 关于Javascript内存的定义可以参考Javascript内存管理 什么是内存泄漏？ 内存泄漏是大型系统中比较容易出现的问题，原因如下： 代码本身没有做好处理 相关依赖库没有做好处理 浏"}, {"id": "6997951674660683806", "title": "学透CSS-5种暂停动画的方式，你都会？", "desc": "老板掏出了刀，我赶紧掏出了MDN，嘿，您猜怎么着，还真让我找到了， `animation-play-state`,这属性那叫一个管用哦。"}, {"id": "7007263629812695053", "title": "吃透JavaScript核心——运算符", "desc": "运算符 算术运算符 概述 算数运算符有：+ - * / % 浮点数精度问题 浮点数的最高精度为17位小数，但在进行算数计算时其精度远远不如整数。 浮点数算数运算里会有问题 表达式和返回值 递增和递减运"}, {"id": "6989389890014150692", "title": "25个 Vue 技巧，开发了5年了，有些竟然还是第一次见！", "desc": "学习成为一个更好的Vue开发者并不总是关于那些需要花时间和精力才能掌握的大概念。掌握一些技巧和窍门，可以让我们的编程生活变得更容易--没有大量重复的工作。"}, {"id": "6996079136796049444", "title": "【SSD系列】DOM0, DOM1, DOM2, DOM3, DOM4，知多少", "desc": "我们经常操作DOM，其又分DOM0, DOM1, DOM2, DOM3, DOM4，请问君知多少，不要愁，一起来学习吧。"}, {"id": "6984925268754317320", "title": "卡牌大师：玩转“洗牌算法”，幸运女神在微笑 (*^_^*)", "desc": "我们看过太多排序算法，殊不知“洗牌”这种乱序算法也是门技术活~本篇透析洗牌算法，从青铜到王者，从愣头青到与神共舞！超神！来劲德瑞。。。"}, {"id": "6844904029340827656", "title": "看完跳槽少说涨 5 K，前端面试从准备到谈薪完全指南（近万字精华）", "desc": "文章首发自我的 Github，欢迎关注。 面试题只能应对 1 - 2 面，刷题固然重要，但是对于项目相关的准备也是必须的。一般来说目前面试题能准备的范围如下： 以上是大致范围，大家可以照着把题目归类，当然除了这些还会有些别的，比如说设计模式等等的问题。另外会刷面试题只是一部分，…"}, {"id": "6965026256286908429", "title": "前端进阶-模块化你真的了解吗", "desc": "本篇模块化将从以下几点进行说明 为什么需要模块 CommonJs模块化的特点与实现 CommonJs的弊端 不太重要的AMD以及CMD ES6模块化 为什么需要模块化 在笔者看来，需要模块化的几个重要"}, {"id": "6995182324623245320", "title": "JS算法之队列的最大值", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 队列的最大值 请定义一个队列并实现函数max_value得到队列里的最大值。"}, {"id": "6992061844932263949", "title": "Promise对象认知｜8月更文挑战", "desc": "Promise的含义 Promise是异步编程的一种解决方案，主要解决了传统回调函数的回调地狱问题。 es6 将Promise写进了语言标准，统一了用法，原生提供了 Promise 对象。"}, {"id": "6844904067215392776", "title": "一个前端工作经历（前端面试指导）-🎉🎉🎉", "desc": "由于从事微信从商失败（总结原因：个人不适合这样的方式），开始到北京。从小性格腼腆，不喜欢和外人打交道。刚开始只是想来北京来旅游，然后就住在青年旅舍。 2个月的休闲时光，感觉还是很愉快的。去后海逛逛，去玩过卡丁车，和旅社内的一些新认识的小伙伴（各行各业）聊天呀，扯淡呀。然后开始思…"}, {"id": "6994273924322164766", "title": "LeetCode刷题，二叉树的前序遍历（144）", "desc": "二叉树的前序遍历 给你二叉树的根节点root，返回节点值的前序遍历 解题代码 思路：递归，直接依次遍历左右子树，传入节点值即可。"}, {"id": "6844903536728211469", "title": "ajax跨域，这应该是最全的解决方案了", "desc": "从刚接触前端开发起，跨域这个词就一直以很高的频率在身边重复出现，一直到现在，已经调试过N个跨域相关的问题了，16年时也整理过一篇相关文章，但是感觉还是差了点什么，于是现在重新梳理了一下。 个人见识有限，如有差错，请多多见谅，欢迎提出issue，另外看到这个标题，请勿喷~ 关于跨…"}, {"id": "6959762865100161055", "title": "js中this的总结", "desc": "前言： js中this问题是学习前端基础的重要部分，如果想要扎实自己的基础，这块硬骨头就必须啃掉~在js实际开发过程中我们一定要搞清楚this的指向以及更改this的指向，高效的完成开发任务。 thi"}, {"id": "6844903702462119950", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi+二期项目结构文件搭建+以及路由的使用", "desc": "前言昨天写了vue+ts+vuecli3.0第一场主要是一个vuecli搭建的内容，今天讲一下vue项目结构搭建+以及路由的使用，看了一个小伙伴$refs报错问题有大佬可以回复我一波困扰已久，伸手党本"}, {"id": "7001356132073603102", "title": "js核心笔记第七天(上)", "desc": "Error错误对象 1，浏览器自带的有四种错误对象 语法错误：SyntaxError -- 一般是某个地方的符号写错了 引用错误：ReferenceError -- 没有创建就用了 类型错误：Type"}, {"id": "6992971664677928974", "title": "对比ajax/axios/fetch", "desc": "1、ajax 原生ajax创建 2、axios axios本质上也是对原生xhr的封装，只不过是promise的版本，符合最新的ES规范，从其官网上可以看到以下几条特性： 从node.js创建http"}, {"id": "6844904007027146766", "title": "通过运行机制看this绑定  、作用域、作用域链和闭包", "desc": "了解JavaScript引擎。 通过运行机制看作用域和作用域链。 通过运行机制理解this的绑定和优先级。 通过运行机制理解闭包。 了解运行机制之前，我们先来搞清楚几个基本概念。 渲染是根据描述或者定义构建一个数据模型，生成图形的过程。渲染引擎将页面资源（html、css、ja…"}, {"id": "6888160552095318024", "title": "ES6中的Javascript解构", "desc": "ES6中的解构特性能让我们从对象（Object）或者是数组（Array）中取值的时候更方便，同时写出来的代码在可读性方面也更强。之前接触过python语言的小伙伴应该对这个不会陌生，这个特性早已在python中实现了。在python中，我们可以通过下面的代码来取值 在这种方式中…"}, {"id": "6968278671194849317", "title": "最全 ECMAScript 攻略之 ES2018-ES9", "desc": "Promise.prototype.finally. 许多promise第三方库都有一个finally方法，用于在promise结束(不管成功还是失败)时的回调。 常见的场景是 关闭数据请求时的lao"}, {"id": "6994741636509106190", "title": "JavaScript 标准内置对象——Symbol", "desc": "前言 每个从Symbol()返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。"}, {"id": "6844903599428878344", "title": "小程序之图片懒加载[完美方案，你不来看看？]", "desc": "既然来了，把妹子都给你。 懒加载，前端人都知道的一种性能优化方式，简单的来说，只有当图片出现在浏览器的可视区域内时，才设置图片正真的路径，让图片显示出来。这就是图片懒加载。 我们知道小程序页面的脚本逻辑是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本…"}, {"id": "6965596525388890142", "title": "Promise.any 的作用，如何自己实现一个 Promise.any", "desc": "## 引言 本文从五个方面介绍 `Promise.any` ： - `Promise.any` 的作用 - `Promise.any` 应用场景 - `Promise.any` vs `Prom"}, {"id": "6885353022449254407", "title": "摸鱼时，发现的一些有意思的代码", "desc": "background 与其全写版本。 border 与其全写版本。 font 与其全写版本。 outline 与其全写版本。"}, {"id": "6844903502062288909", "title": "ES6常用知识点概述", "desc": "ES6，并不是一个新鲜的东西，ES7、ES8已经赶脚了。但是，东西不在于新，而在于总结。每个学前端的人，身边也必定有本阮老师的《ES6标准入门》或者翻译的《深入理解ECMAScript6》。本篇主要是对ES6的一些常用知识点进行一个总结。如果你喜欢我的文章，欢迎评论，欢迎Sta…"}, {"id": "7001497791637749773", "title": "深入理解红宝书（28）", "desc": "第五章、基本引用类型 这是我参与8月更文挑战的第28天，活动详情查看： 8月更文挑 5.3.3 String 12. localeCompare()方法 最后一个方法是 localeCompare()"}, {"id": "6988522308591681543", "title": "js相关面试点-2021", "desc": "1：js运行机制 js离不开用户的操作， js原理运行机制：单线程---->同一时间做同一件事 2：arguments的对象是什么 在JavaScript中，arguments属于当前对象的一个内置属"}, {"id": "7000691617082540068", "title": "js核心笔记第六天", "desc": "Math对象 不需要创建，直接使用就行 API 取整：3种 上取整：不管超过多少，只要超过一点点，就去取一个整数 下取整：不管超过多少，哪怕超过的再多，都会省略小数部分 四舍五入取整： 上面的三种方法"}, {"id": "6993252081322688548", "title": "js验证身份证号的真实性", "desc": "公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。 注：一代身份证（15位）已经不能使用，需要换领二代身份证（18位）。"}, {"id": "6844903831495507975", "title": "WebGL 手撸3d贺卡+小草飘动滤镜", "desc": "这两天接到一个项目，是有关全屏视频的，整个项目中分到我这儿最主要的部分就是结束页要求3d贺卡展示，正巧和前几天NingBo童鞋分享的一样，干脆点儿，这次搞个webGL版的。哈哈~ 20190426-现在阶段就是只做了个基础版，曲线动画啥的都是小事儿。 20190427-现在加上…"}, {"id": "6862882556145041416", "title": "JavaScript学习笔记（二十七）-- ajax及ajax封装", "desc": "AJAXajax全名asyncjavascriptandXML是前后台交互的能力也就是我们客户端给服务端发送消息的工具，以及接受响应的工具是一个默认异步执行机制的功能AJAX的优势1、不需要插件的支持"}, {"id": "6844903582538399752", "title": " Event Loop、计时器、nextTick", "desc": "JavaScript 是单线程的，有了 event loop 的加持，Node.js 才可以非阻塞地执行 I/O 操作，把这些操作尽量转移给操作系统来执行。 我们知道大部分现代操作系统都是多线程的，这些操作系统可以在后台执行多个操作。当某个操作结束了，操作系统就会通知 Node…"}, {"id": "6844903765472968718", "title": "[译] 优秀 JavaScript 开发人员应掌握的 9 个技巧", "desc": "过去的一年， JavaScript 在持续变化着，其使用范围也越来越广。接下来，我将针对 JavaScript 的使用，列出 9 条 建议，以帮助你写出更加整洁高效的代码，成为更好的开发者。 1. async/await JavaScript 极速发展的今天，回调地狱所产生的问…"}, {"id": "6844903941507907598", "title": "JavaScript入门指南(学习笔记) 两万余字的基础总结", "desc": "JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言。 jQuery和JavaScript有什么关系？jQuery是由JS编写的一个js库。 代码要缩进，缩进要对齐。 很多时候，当我们重复使用某个元素或者某个数据时，内容可能太长或者数据要进行改变，这时…"}, {"id": "6844904071707508749", "title": "何时使用 Map 来代替普通的 JS 对象", "desc": "JS 普通对象 {key: 'value'} 用于存放结构化数据。但有一件事我觉得很烦:对象键必须是字符串(或很少使用的 symbol)。 JS 会隐式地将对象的键转换为字符串，这种默认行为丢失了类型的一致性，要解决也挺棘手的。但 ES6 中的Map 对象可以帮我们解决这类的问…"}, {"id": "6950786264941461541", "title": "关于 JS 事件循环 event loop ", "desc": "思维导图一、JS异步编程基本概念进程和线程 Tip二、event loop宏任务和微任务1. 宏任务(macro task)2. 微任务(micro task)思考：为什么要引入微任务，只有宏任务可以"}, {"id": "6857313590337077255", "title": "前端模块化—CommonJS、CMD、AMD、UMD和ESM", "desc": "在NodeJS之前，由于没有过于复杂的开发场景，前端是不存在模块化的，后端才有模块化。NodeJS诞生之后，它使用CommonJS的模块化规范。从此，js模块化开始快速发展。 模块化的开发方式可以提供代码复用率，方便进行代码的管理。通常来说，一个文件就是一个模块，有自己的作用域…"}, {"id": "6985454992324821000", "title": "JS中Event Loop", "desc": "Event Loop JS中任务分为同步任务和异步任务 同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务 异步任务：不进入主线程、而进入\"任务队列\"（task queue"}, {"id": "6903330914550415373", "title": "使用 MonoRepo 管理前端项目", "desc": "在工作中，我们可能会遇到一些项目管理方面的问题。在单个项目管理的时候，大家都知道该怎么管理。一旦涉及到多个项目管理，很多人就不一定能够管理好了。 这篇文章主要讲解一下 monorepo 在我们团队的应用。 在通常情况下，我们新开一个项目会先在 Github 上面创建一个新仓库，…"}, {"id": "6844903781369380872", "title": "高频网红面试题['1','2','3'].map(parseInt) 原理解析", "desc": "callback 数组中正在处理的当前元素。 callback 数组中正在处理的当前元素的索引。 callback map 方法被调用的数组。 执行 callback 函数时使用的this 值。 第二次，调用第二个index参数是1,也是说1作为数值的基础。规范里说的很清楚了，…"}, {"id": "6961228237380796429", "title": "XSS 攻击和 CSRF 攻击各自的原理是什么？两者又有什么区别？以及如何防范？", "desc": "XSS 攻击和 CSRF 攻击 1、XSS 攻击 1. 概念 XSS（Cross Site Scripting）：跨域脚本攻击。 2. 原理 不需要你做任何的登录认证，它会通过合法的操作（比如在 ur"}, {"id": "6963994127037890573", "title": "抖音小空调特效 html+css+js", "desc": "先看效果（源码在最后）： 视频效果如下，有音效 B站： [video(video-7IjPSaaV-1620747650354)(type-bilibili)(url-https://player.b"}, {"id": "6844903745273217038", "title": "慎用try catch", "desc": "周末终于有时间更新下blog了，首先非常感谢\"justjavac\"针对我的文章专门写了篇驳《慎用 try catch》，让我学到了很多知识（如Chrome的Pause on exceptions功能），也让我意识到了有些知识点讲的的确不够深入，没有足够的引经据点，但是\"just…"}, {"id": "7000345594078167047", "title": "深入理解红宝书(25)", "desc": "第五章、基本引用类型 这是我参与8月更文挑战的第25天，活动详情查看： 8月更文挑战 5.3.3 String 2. normalize()方法 某些 Unicode 字符可以有多种编码方式。有的字符"}, {"id": "6854573213159653384", "title": "ES2020 系列：空值合并运算符 '??'", "desc": "空值合并运算符 ?? 提供了一种简短的语法，用来获取列表中第一个“已定义”的变量（译注：即值不是 null 或 undefined 的变量）。 b，其他情况。 下面是一个更长一点的例子。 假设，我们有一个用户，变量 firstName、lastName 和 nickName 分…"}, {"id": "6844903807176933384", "title": "JavaScript 中 forEach、map、filter 详细", "desc": "1、forEach 方法按升序为数组中含有效值的每一项执行一次 callback 函数，那些已删除（使用 delete 方法等情况）或者未初始化的项将被跳过（但不包括那些值为 undefined 的项）（例如在稀疏数组上）。 2、如果给 forEach 传递了 thisArg …"}, {"id": "6997317166299267109", "title": "你不知道的javascript(第一章）", "desc": "​JavaScript引擎进行的编译的步骤和传统的编译语言非常相似，比起那些只有三个步骤得编译器，JavaScript引擎要复杂得多。例如在语法分析和代码生成阶段有特定的步骤进行性能优化"}, {"id": "7003642574405648420", "title": "日常笔记-几个有用的 JS 技巧", "desc": "1. 使用数字分隔符 这是处理大数字时最常用的运算符之一。当在数字中使用分隔符（即_）时，看上去比未分隔的数字更美观。 使用前： 使用后： 并且这技巧也适用于其他进制的数值： 注意事项： 不能用在首位"}, {"id": "6993539242139844622", "title": "【SSD系列】网页内容生成图片，这18般武艺你会几种呢？ ", "desc": "网页截图，windows内置了快捷命令和软件，chrome开发者工具也能一键截图，html2canvas和无头浏览器都可以实现，您需要哪一种呢？"}, {"id": "7005380114074566663", "title": "从\"npm init\"开始，实现一套完整的前端工程架构方案", "desc": "随着web应用复杂度的增加，组件化，工程化，自动化成了前端发展的趋势。每个前端团队都在打造自己的前端开发体系，这通常是一个东拼西凑，逐渐磨合的过程，那究竟一套完整的前端工程化方案是怎样实现，笔者"}, {"id": "6844904031240863758", "title": "2020年了,再不会webpack敲得代码就不香了(近万字实战)", "desc": "2020年即将到来,在众多前端的招聘要求里,webpack、工程化这些字眼频率越来越高。日常开发者中，我们常常在用诸如vue-cli、create-react-app的脚手架来构建我们的项目。但是如果你想在团队脱颖而出(鹤立鸡群)、拿到更好的offer(还房贷)，那么你必须去深…"}, {"id": "6992735843517464612", "title": "【SSD系列】视频自定义字幕，中英文，彩色的，你也可以，不会不知道吧", "desc": "花个5分钟，给你的视频加点字幕吧，中文的，英文的，彩色的，都可以。抓住时间，位置，样式三要素，一切都变得简单起来。"}, {"id": "6978856784752541710", "title": "2K Star！超过 50 个专题、450 个好项目，大半年来推荐过的重磅项目合集 👍", "desc": "这大半年来，猫哥已经推荐过超过 50个专题， 450 个超级好的开源项目了，今天把往期推荐过的文章与项目做个合集吧，方便大家能快速得查阅到想要的项目。"}, {"id": "7006193203493732365", "title": "😆一些工具函数-tools", "desc": "整理一些工具函数~~💞 将array-like Object转换为real array 检查对象是否包含指定的属性 移除数组中某一项 利用闭包做一个缓存函数 空间换时间 camelCase字符转换为H"}, {"id": "6955610207036801031", "title": "Axios 如何取消重复请求？", "desc": "在 Web 项目开发过程中，我们经常会遇到重复请求的场景，如果系统不对重复的请求进行处理，则可能会导致系统出现各种问题。"}, {"id": "6996466257125965861", "title": "【SSD系列】雪花飘，购物抛物线，进度条等四个案列，带入走进 CSS transition", "desc": "我们从内置贝塞尔运动，雪花飘，购物抛物线，进度条四个案例，一起先看看其效果，然后再了解transition属性和事件，最后你的想法有多好，其作用就有多大。"}, {"id": "7006174737135058958", "title": "关于Promise的错误捕获，看这一篇就够辣。", "desc": "在日常开发中，Promise我们经常会使用。但是有关Promise的异常捕获，你有没有注意到呢。 楔子 上述这段代码的执行结果明显是报错，我们看看在浏览器和node中不同的报错信息。 异常将会视为‘U"}, {"id": "7005351570548211749", "title": "12种 console 相关的方法，帮你快速提高调试效率！（建议收藏）", "desc": "我现在在调试代码的时候基本用的都是console.log() 调试法，虽然低级，但好用呀。当然，遇到复杂点的就会借助其它工具，但日常开发中 console.log() 基本够用了。 前缀铺垫的差不多了"}, {"id": "7002053263902277668", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十五）", "desc": "感激相遇 你好 我是阿ken 排他思想，简单理解就是排除掉其他的(包括自己)，然后再给自己设置想要实现的效果。总而言之，排他思想的实现步骤就是所有元素全部清除与设置当前元素。在开发中，如果有同一组元素"}, {"id": "7004989401239388168", "title": "vue3剖析之简版实现", "desc": "hello 大家好，🙎🏻‍♀️🙋🏻‍♀️🙆🏻‍♀️ 我是一个热爱知识传递，正在学习写作的作者，ClyingDeng 凳凳！ 听你们老说vue3、vue3的，我就想着去看看vue3到底有啥？"}, {"id": "7003142725058969636", "title": "TS进阶篇 | 详解 TypeScript 高级类型（上）", "desc": "TypeScript中除了基本类型之外，还定义了很多高级类型，高级类型包括字面量类型、联合类型、交叉类型、索引类型、映射类型、条件类型、this类型等。"}, {"id": "6844904115428917255", "title": "写给女朋友的中级前端面试秘籍（含详细答案，15k级别）", "desc": "能不能讲一讲Flex布局，以及常用的属性？。 WeakMap只能以复杂数据类型作为key，并且key值是弱引用，对于垃圾回收更加友好。 深拷贝：一般需要借助递归实现，如果对象的值还是个对象，要进一步的深入拷贝，完全替换掉每一个复杂类型的引用。 React需要尽可能的保证熟练。因…"}, {"id": "7005008455631110151", "title": "大白话解释：什么是依赖注入？", "desc": "几乎每一个大型的应用程序都是组件聚合的结果，随着应用的增长，连接组件的方法也逐渐成为了决定性因素之一。这不仅涉及可扩展性问题，应用的复杂性也随之增加。"}, {"id": "6844903856489365518", "title": "一个合格的中级前端工程师需要掌握的 28 个 JavaScript 技巧", "desc": "2. 循环实现数组 map 方法 3. 使用 reduce 实现数组 map 方法 4. 循环实现数组 filter 方法 5. 使用 reduce 实现数组 filter 方法 6. 循环实现数组的"}, {"id": "7004452519782907917", "title": "写一个 eslint 插件：vue template 中 class 顺序的检查和自动修复", "desc": "有小伙伴问我如何修复 vue template 中的 class 名的顺序、属性名顺序，还有 options 中的属性顺序的问题，用 eslint 可以做到么。 答案是能，但是需要写 eslint 插"}, {"id": "7004038556750446623", "title": "深入V8 - js数组的内存是如何分配的", "desc": "不重要的话写在前面 昨天没事研究了一下数组，在另一篇文章 《图解数据结构js篇-数组结构》 我花了两天时间看了近20篇有关V8数组实现的文章和写了不少于50个案例近百张内存快照来学习 V8 中数组的内"}, {"id": "6982341667483303950", "title": "手写 Vue2 系列 之 patch —— diff", "desc": "手写 Vue2 系列 之 patch —— diff。实现 DOM diff，完成响应式数据的更新。"}, {"id": "6998727574364880933", "title": "最轻量级前端模板Micro-Templating， 源码解析", "desc": "前端模板，react, vuejs都有其影子，今天一起来逐行分析jQuery创始人John Resig的最轻量级前端模板Micro-Templating。"}, {"id": "6983827167079563295", "title": "手写 Vue2 系列 之 computed", "desc": "手写 Vue2 系列 之 computed，实现 computed 计算属性，完成模版中计算属性的展示"}, {"id": "7004031888134242340", "title": "从开发者到技术管理，视角有哪些变化", "desc": "做技术一般有两种发展路线，一种是纯技术，一种是管理。这两种路线有什么不同呢？ 本文来尝试从不同的视角来解读下日常的工作，分能力、意愿、分工、协作、梯队、文化六个维度来看。 开发者视角 我们都是从开发者"}, {"id": "6989022564043456543", "title": "「React进阶」只用两个自定义 Hooks 就能替代 React-Redux ?", "desc": "前言 之前有朋友问我，React Hooks 能否解决 React 项目状态管理的问题。这个问题让我思索了很久，最后得出的结论是：能，不过需要两个自定义 hooks 去实现。那么具体如何实现的呢？ 那"}, {"id": "7005784574835818533", "title": "基于vue2封装一个公共的 Tree 组件，实现流畅全选超大数据", "desc": "基于vue2封装一个公共的 Tree 组件，实现流畅全选超大数据，可以承载几万条数据量，完全不会卡顿"}, {"id": "7006623053421477895", "title": "JS｜执行上下文（Execution Content）", "desc": "先把单独的概念拆出来理解 在放到整体中去理解 执行上下文(Execution Content):是JavaCsript代码执行环境的抽象概念 负责管理执行上下文的是JavaScript引擎，JS引擎做"}, {"id": "6988901231674523661", "title": "1w条数据，平铺数组转树形结构", "desc": "千算万算，还是没有逃过，后台真的就上万条数据一次丢给前端了。这列探索了通过递归和非递归两种实现方式进行平铺数组转树形结构的实现，体验了算法对编程的重要性！"}, {"id": "6979152169815523365", "title": "新手入门｜3节小课入门写作，还有千元奖金和最新周边等你来拿！", "desc": "这次，官方手把手教学，3节小课带你掌握最基础的写作技巧，搞懂掘金的文章分发规则！还有千元奖金和最新周边等你来拿！"}, {"id": "6986084648778465288", "title": "能用CSS实现的就不用麻烦JavaScript", "desc": "前言 凡是可以用 JavaScript 来写的应用，最终都会用 JavaScript 来写。——Atwood定律 虽然万物都可以是JavaScript，但某种程度css的运行效率会比JavaScrip"}, {"id": "6921509748785283086", "title": "这些一行 JS 实现功能的代码，让你看起来像一个前端专家", "desc": "从复杂的框架到处理 API，有太多的东西需要学习。 但是，它也能让你只用一行代码就能做一些了不起的事情。 1. 获取一个随机布尔值 (true/false) 这个函数使用 Math.random() 方法返回一个布尔值（true 或 false）。Math.random 将在 …"}, {"id": "7002845173562638366", "title": "vue-axios-vuex-全家桶", "desc": "vue-axios-vuex-全家桶[vue-axios-vuex-全家桶] ❤️关注+点赞+收藏+评论+转发❤️"}, {"id": "7002035805057187854", "title": "精读《Typescript 4.4》", "desc": "Typescript 4.4 正式发布了！距离 Typescript 4.5 发布还有三个月的时间，抓紧上车学习吧！ 本周精读的文章：announcing-typescript-4-4 概述 更智能的"}, {"id": "7000707003060322341", "title": "关于开发视图", "desc": "开发视图关注程序包，不仅包括要编写的源程序，还包括可以直接使用的第三方SDK和现成框架、类库，以及开发的系统将运行于其上的系统软件或中间件。"}, {"id": "7004778999226302477", "title": "如何判断 JavaScript 的数据类型？", "desc": "JavaScript 数据类型一共有 7 种： undefined、Null、Boolean、String、Symbol、Number、Object 除了 Object 之外的 6 种属于原始数据类型"}, {"id": "6847009772500156429", "title": "写给前端的算法进阶指南，我是如何两个月零基础刷200题", "desc": "最近国内大厂面试中，出现 LeetCode 真题考察的频率越来越高了。我也观察到有越来越多的前端同学开始关注算法这个话题。 但是算法是一个门槛很高的东西，在一个算法新手的眼里，它的智商门槛要求很高。事实上是这个样子的吗？如果你怀疑自己的智商不够去学习算法，那么你一定要先看完这篇…"}, {"id": "6961101653709684772", "title": "推荐 9 个 Node.js 学习、进阶、debugging 分析、实战 的重磅开源项目 👍", "desc": "今天给大家带来的是 Node.js 学习的最佳开源项目！Node.js 最佳的学习资源。相信你会找到学习 Node.js 的兴趣！"}, {"id": "7005835660208635911", "title": "这道前端面试题你确定会吗", "desc": "最近面试过程中碰到的一个非常有意思的编程题，个人觉得有必要做一个笔记，并分享出来............."}, {"id": "6930088165738823693", "title": "巨大提升！更快的 async 函数和 promises", "desc": "JavaScript 的异步过程一直被认为是不够快的，更糟糕的是，在 NodeJS 等实时性要求高的场景下调试堪比噩梦。不过，这一切正在改变，这篇文章会详细解释我们是如何优化 V8 引擎（也会涉及一些其它引擎）里的 async 函数和 promises 的，以及伴随着的开发体验…"}, {"id": "6940976355097985032", "title": "二维码扫码登录是什么原理", "desc": "在日常生活中，二维码出现在很多场景，比如超市支付、系统登录、应用下载等等。了解二维码的原理，可以为技术人员在技术选型时提供新的思路。对于非技术人员呢，除了解惑，还可以引导他更好地辨别生活中遇到的各种二维码，防止上当受骗。 二维码最常用的场景之一就是通过手机端应用扫描PC或者WE…"}, {"id": "6995591618371780622", "title": "JavaScript进阶知识点", "desc": "本文内容主要是面试复习准备、查漏补缺、深入某知识点的引子、了解相关面试题及底下涉及到的知识点，都是一些面试题底下的常用知识点，而不是甩一大堆面试题给各位，结果成了 换个题形就不会的那种"}, {"id": "6978036537040568334", "title": "JavaScript 事件传播机制", "desc": "JavaScript 采用异步事件驱动编程模型，与 HTML 的交互是通过事件实现的。 当我们执行了特定的事件时，如在一个按钮上监听了 click 点击事件，当你按下按钮时，它将触发你给定的事件句柄（"}, {"id": "6844904084571439118", "title": "学以致用：手把手教你撸一个工具库并打包发布，顺便解决JS小数计算不准问题", "desc": "本文讲解的是怎么实现一个工具库并打包发布到npm给大家使用。本文实现的工具是一个分数计算器，大家考虑如下情况： 上面计算的输出是：0.(197530864)。其中()里面的是循环的数字，也就是说原来的小数是0.197530864197530864197530864...。本工具…"}, {"id": "6991623452264251428", "title": "JavaScript 系列之类型（二）", "desc": "[JavaScript 系列之类型｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6992164611134849037", "title": "字符串解析成可执行 JSON 串", "desc": "一、作用： 字符串解析成可执行变量，监听数据的变化方便快捷。类别 Vue 中 watch 一个字符串。 处理接口数据的容错率，链选报错的一种解决方案。 快捷设置数据对象。 二、代码 三、使用示例 获取"}, {"id": "6921969582731165704", "title": "带你入门前端工程（四）：测试", "desc": "也可以这样理解：测试的作用是为了提高代码质量和可维护性。 提高代码质量：测试就是找 BUG，找出 BUG，然后解决它。BUG 少了，代码质量自然就高了。 可维护性：对现有代码进行修改、新增功能从而造成的成本越低，可维护性就越高。 如果你的程序非常简单，可以不用写测试。例如下面的…"}, {"id": "6935706527810453517", "title": "js数据类型的检测", "desc": "作为 JavaScript 的入门级知识点，JS 数据类型在整个 JavaScript 的学习过程中其实尤为重要。因为在 JavaScript 编程中，我们经常会遇到边界数据类型条件判断问题，很多代码只有在某种特定的数据类型下，才能可靠地执行 数据类型包含undefined，n…"}, {"id": "6844904162585477134", "title": "“浅尝”JavaScript设计模式", "desc": "设计模式：根据不同场景创建不同类型的对象的套路被称为设计模式。 ①可维护性：设计模式有助于降低模块间的耦合程度，这使对代码进行重构和换用不同的模块变得更容易，也使得程序员在大型团队中的工作以及与其他程序员的合作变得更容易。 实现设计模式比较容，懂得应该在什么时候使用什么模式比较…"}, {"id": "6916766793008840712", "title": "《看完就懂系列》项目中的权限管理复杂吗？", "desc": "当然不是，用户并不直接对应权限，用户对应的其实是角色 。 也就是说：用户对应角色，角色对应权限。如果我们有一百个用户，但是他们等级不同，老板有全部的权限，经理有80%权限，组长有50%权限，职员有20%权限。 那么其实我们只需要4个角色：老板角色 有全部的权限，经理角色 有80…"}, {"id": "6919744443188772872", "title": "js对象的key到底加不加引号？", "desc": "前两天看到一个同事的代码，他写对象的时候会把key值都会加上\"\"，于是我又重新复习了一下关于对象中的key值加不加\"\"的知识点。 所以这里要分符合标识符情况和不符合标识符情况来说一下。 key加不加\"\"，都一样，读取key对应的value有两种方式：obj[\"key\"]和obj…"}, {"id": "6844904071124500488", "title": "[译] 在 async/await 中更好的处理错误", "desc": "本篇文章介绍在使用 async/await 语法时，一种更好的处理错误的方式。在此之前，大家也需要先了解下 Promise 的工作原理。 由于回调函数的嵌套，回调地狱 会使你的代码向右排布而不是垂直向下排版。 为了更直观的反映回调函数，这里举了一个例子。 Promise 是 E…"}, {"id": "7005129146938425381", "title": "45道Promise题整理总结", "desc": "Event Loop 执行顺序 一开始整个脚本作为一个宏任务执行 执行过程中同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列 当前宏任务执行完出队，检查微任务列表，有则依次执行，直到全部执"}, {"id": "6988455381634646052", "title": "this到底指向谁？", "desc": "`this`是指向调用函数的对象指针。看似简单的定义但却由于执行上下文、作用域链、闭包等复杂的机制，导致`this`的指向问题变得异常复杂。本文聚焦函数执行时确定this的本质，讨论this指向问题。"}, {"id": "6986283004616736799", "title": "一个支持手机端和PC端的 Picker", "desc": "在做项目的时候，发现现有移动端组件 Picker，在 PC 端使用的时候，用户会反馈说不能满足鼠标的滚轮事件，用起来有些许的不方便。毕竟有的时候移动端 H5 页面也会被使用 PC 的浏览器打开。所以决"}, {"id": "6973637298755731463", "title": "async/await原理剖析", "desc": "前言 网上讲述async/await类似的文章贼多，我相信大家也看过很多的文章，那我还写类似的文章干啥子咧？因为...正是类似的文章看多了说不定你学会了呐（不要脸！）。好啦，我们言归正传，我们在日常开"}, {"id": "6844903790257111054", "title": "数组去重的六种方法", "desc": "数组去重在面试和工作中都是比较容易见到的问题，这几天在复习基础知识的时候，也顺便总结了一下常见的方法，和大家一起分享。如果大家还有其他什么方法还请评论大家一起讨论。如果有什么没有表达正确的地方还请大家斧正。 要比较数组中的每一个值我们都可以用双重for循环来解决，比如冒泡排序。…"}, {"id": "6987272624858464293", "title": "事件处理的多种绑定方式", "desc": "在 Web 中, 事件在浏览器窗口中被触发并且通常被绑定到窗口内部的特定部分 — 可能是一个元素、一系列元素、被加载到这个窗口的 HTML 代码或者是整个浏览器窗口"}, {"id": "6968283710261035038", "title": "最全 ECMAScript 攻略之 ES2015-ES6", "desc": "推荐阮一峰大佬的ES 入门教程,中文文档没有比他更详细的了 像是解構賦值、箭頭函數、class 語法等等都是在 ES6 版本當中規範。因為 ES6 在 2015 年發布所以又叫做 ES2015，目前看"}, {"id": "7002612028766421022", "title": "深入理解红宝书 ( 31 )", "desc": "第 6 章 集合引用类型 这是我参与8月更文挑战的第31天，活动详情查看： 8月更文挑战 6.1 Object 到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAS"}, {"id": "6844903630156333069", "title": "[译文] 初学者应该了解的数据结构：Array、HashMap 与 List", "desc": "当开发程序时，我们（通常）需要在内存中存储数据。根据操作数据方式的不同，可能会选择不同的数据结构。有很多常用的数据结构，如：Array、Map、Set、List、Tree、Graph 等等。（然而）为程序选取合适的数据结构可能并不容易。因此，希望这篇文章能帮助你了解（不同数据结…"}, {"id": "6970724598073524238", "title": "JS实现一个简易图片验证码", "desc": "JS可以利用Canvas元素设计一些漂亮的图形，本文在不借助框架下通过Canvas实现一个简易的图片验证码。"}, {"id": "6844904032218120200", "title": "【你应该了解的】详尽&全面的前端部署（从零起步，前端上线不用愁）", "desc": "遇到前端部署问题怎么办？nginx、端口、https域名怎么配置，跨域问题咋整，react/vue项目怎么部署，什么是反向代理，请您耐心往下看。本文通俗易懂，可操作，旨在抛砖引玉。要是帮到了您，还请顺便点个赞。 当你兴致勃勃买了台服务器，然后规划着美好的未来，规划搭建平台。问题…"}, {"id": "6867299629436764167", "title": "22+ 高频实用的 JavaScript 片段 （2020年）", "desc": "废话不多话，在本文中，列出了一些比较常用或者实用的的 JavaScript 代码片段，希望对你们有所帮助。 3. 条件成立 4. for 循环 5. 值到对象的映射 6. Object.entries() 7. Object.values() 8. 模板字面量 9. 解构赋值 …"}, {"id": "7004627767870357541", "title": "js new操作符", "desc": "参考MDN实现js New关键字 其实new操作符实现还是很简单的，因为Mdn上总共也就是4句话来描述它的作用"}, {"id": "6923803717808422925", "title": "从0开始实现一个合成大西瓜", "desc": "最近微博上曝出了很多瓜，\"合成大西瓜\"这个游戏也很火热，玩了一阵还挺有意思的。研究了一下原理，发现目前流传的版本都是魔改编译后的版本，代码经过压缩不具备可读性，因此决定自己照着实现一个。 本项目主要用作cocos creator练手使用，所有美术素材和音频材料均来源于 http…"}, {"id": "6974542964764704782", "title": "Node 系列 - 005 - colors.js", "desc": "接入 Inquirer.js 之后，本应该直接接上 colors.js，毕竟我们需要把控制台搞得飘飘亮亮（花里胡哨的）。但是上篇太给力了，上了 1.7w 字，所以相对而言，这篇就简短点呗。"}, {"id": "6844903614918459406", "title": "【干货】js 数组详细操作方法及解析合集", "desc": "在开发中，数组的使用场景非常多，平日中也涉及到很多数组的api/相关操作，一直也没有对这块内容进行一块整理总结，很多时候就算用过几次这个api，在开发中也很容易忘记，还是要谷歌一下。所以就希望对这块内容有一个比较系统性的总结，在这背景下，就有了本篇文章，如果喜欢的话可以点波赞/…"}, {"id": "7003770182233653285", "title": "想了解一下Javascript鸭子类型的实现与应用嘛?", "desc": "鸭子类型（duck typing）在程序设计中是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由\"当前方法和属性的集合\"决定。这个概念的名字来源于由詹"}, {"id": "7006539298702884894", "title": "JS Advance --- arguments", "desc": "arguments 是一个对应于传递给函数的参数的类数组对象。arguments对象是所有（非箭头）函数中都可用的局部变量。你可以使用arguments对象在函数中引用函数的参数。"}, {"id": "6991601359640330247", "title": "可视化太酷辽！梳理几大常见的搜索和排序算法", "desc": "⏳序言 前面的文章中讲解了各种数据结构，那么今天，顺着数据结构与算法这个话题，我们来谈谈算法。算法一般分为两种，一种是排序算法，另一种是搜索算法。 在今天的文章中，将概括排序和搜索在 js 中的应用，"}, {"id": "6993144559890858015", "title": "奥运小程序，从0到0.1", "desc": "都20201年了你不会还没有开发上架过小程序吧？不会吧？不会吧？ 小程序、快应用等等现在已成为很多公司尝试新业务或引流的首选方式， 了解与学习它，依然成为一个必要。废话少说先上： 名称 内容 源码 h"}, {"id": "7002037475874963493", "title": "一看就懂的事件循环机制(event loop)", "desc": "事件循环是单线程的JavaScript在处理异步事件时进行的一种循环过程，对于异步事件它会先加入到事件队列中挂起，等主线程空闲时会去执行事件队列中的事件。"}, {"id": "6846687601806557192", "title": "「数组方法」从详细操作js数组到浅析v8中array.js", "desc": "两者区别：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（**注意：**这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）。 Array.isArray() 用于确定传递的值是否是一个 …"}, {"id": "6998401854245699615", "title": "HTTP和HTTPS是什么 二者区别是什么", "desc": "HTTP简介 HTTP（超文本传输协议）是网络上最为广泛的传输协议，被用于在web浏览器和网站服务器之间的传输协议。HTTP是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给"}, {"id": "7003556020018479135", "title": "红宝书笔记——JavaScript BOM", "desc": "window对象 在全局作用域中声明的变量、函数都会变成window对象的属性和方法。全局变量不能通过delete操作符删除，而直接在window对象上的定义的属性可以。 在全局作用域中定义了age变"}, {"id": "6992093050398834695", "title": "理想环境下浏览器丝滑地加载10w条数据", "desc": "本来是看到这篇文章后端一次给你10万条数据,如何优雅展示。文章中指出，主要的考查点是setTimeOut的使用,在评论区，各个老哥涌跃的发表了自己的意见，其中，一个老哥的代码很好"}, {"id": "7002119630416248839", "title": "函数合成（compose）的多种实现方法", "desc": "// 责任链模型（一个接一个执行） // 正常组合 // redux 中间件组合方式 // 洋葱圈模型（一半一半执行）"}, {"id": "6968246300122808334", "title": "js实现按键精灵——尝试前端实现自动化测试（一）", "desc": "尝试用js实现按键精灵的基础功能，用于前端简易的自动化测试。最终期望：录制用户操作，可对用户操作进行自动化重现，同时进行接口测试~"}, {"id": "6990134042234454047", "title": "5年前，学习 null 和 undefined ，现在有了新的认知，看看这位人才怎么说？", "desc": "许多编程语言都有一个称为null的非值。它指示一个变量当前不指向一个对象，例如，当它还没有初始化的时候。 相比之下，JavaScript有两个这样的非值：undefined和null。"}, {"id": "7005166216000045087", "title": "三种方法解决约瑟夫环问题（JavaScript）", "desc": "约瑟夫环问题又称约瑟夫杀人问题或丢手绢问题，是一道经典的算法问题。问题描述也有很多变式，但大体的解题思路是相同的。本篇将以循环链表、有序数组、数学递归三种方式来解决约瑟夫环问题。"}, {"id": "7004610175277482021", "title": "MutationObserver API", "desc": "1、概述 MutationObserver接口提供了监视对DOM树所做更改的能力。它被设计为旧的Mutation Events功能的替代品，该功能是DOM3 Events规范的一部分。 但是，它与Mu"}, {"id": "6997577792854425614", "title": "【日拱一卒】JavaScript浏览器事件循环机制", "desc": "这是我参与8月更文挑战的第18天，活动详情查看： 8月更文挑战” 前言 浏览器环境下的事件循环机制，nodejs也有一个事件循环机制。参考了许多资料，觉得这里把这两个事件循环机制放在一起，除了增加理解"}, {"id": "6844904061930586125", "title": "如何在 Vue 中使用 JSX 以及使用它的原因", "desc": "Vue.js 具有简单的 API 和几个选项，可用于在我们的组件中定义HTML模板。 我们可以使用<template>标签选项，在根组件实例上定义template属性，或者使用单文件组件。 上面的选项很棒并且可以完美地工作，但是，在您的应用程序的生命周期中，有时会感到笨拙，设计…"}, {"id": "6844903939154903048", "title": "使用Web Worker优化代码", "desc": "前段时间有个需求，需要前端导出excel。一般来说，对于导出大量数据的功能，最好还是交给后端来做，然而后端老哥并不想做(撕逼失败)，只能自力更生。 前端导出excel本身已经有很成熟的库了，比如js-xlsx, js-export-excel，所以实现起来并不难。但是，当导出的…"}, {"id": "7000715347103842312", "title": "深入理解红宝书(26)", "desc": "第五章、基本引用类型 这是我参与8月更文挑战的第26天，活动详情查看： 8月更文挑战 5.3.3 String 4. 字符串位置方法 有两个方法用于在字符串中定位子字符串：indexOf()和 las"}, {"id": "6985349434817118245", "title": "JS数组知识的相关整理（一）", "desc": "最近在学高级JS,整理一些里面比较常用的知识点，如果只是通过看的，没过几天里面的内容就被忘得一干二净，所以通过这种总结里面一些常用的知识点来加深自己的印象，也方便自己以后查询，本次是数组的一些相关知识"}, {"id": "6892657858388131853", "title": "JavaScript常见的内存泄漏", "desc": "内存泄露（Memory Leaks）：是指应用程序已经不再需要的内存，由于某种原因未返回给操作系统或者空闲内存池（Pool of Free Memory）。 内存泄露可能带来的问题：变慢、卡顿、高延迟。 JavaScript内存泄漏的主要原因在于一些不再需要的引用（Unwant…"}, {"id": "6844903608375328781", "title": "用JS搞了一个自动翻译，从此不再头疼看英文书了", "desc": "小记：作为一个有追求的码农，“懒”，不一定是一个贬义词。有时候“懒”，才是进步的动力！ 经常遇到这样的情况，发现一本眼馋的技术书📚，却发现只有英文版。慢慢啃吗？真的很痛苦。于是灵光一闪，我需要这样一个小工具，点击运行可以批量的完成翻译任务。于是，去吧皮卡丘！ 用某歌翻译的AP…"}, {"id": "6844903670652338183", "title": "Vuejs 配合 mint-ui 开发移动端web", "desc": "这是一个比较着急的事情（两天时间，写一个带视频播放、图片浏览、图文混排列表、上拉刷新、滚动刷新等等的单页），一开始同事使用传统H5+JS+CSS的方式，我担心进度，就硬着头皮上vuejs，为什么说硬着头皮上，原因是这是第二次在项目中使用vuejs，第一次使用的经历并不太好，主要…"}, {"id": "6844903570488164366", "title": "微信小程序开发神器-Grace", "desc": "示例工程在源码 “quickstart-grace-demo”目录下, 用微信小程序开发工具打开即可。 创建页面时用grace.page 替换 Page 即可。 注意：Grace 注入到实例中的所有方法和属性命名都以“$”开始。 这很明显是受了React的影响，好的不学🤦‍，…"}, {"id": "7001847672155930632", "title": "JQuery基本语法和常用API指南", "desc": "之前一直没有学过JQuery，因为在Vue、React等框架下我们不会直接操作DOM，但如果我们需要直接和DOM打交道，JQuery就是一把不错的瑞士军刀。"}, {"id": "7005167783243677732", "title": "javascript实践教程-03-变量", "desc": "本篇讲解了变量声明的两种方式var和let，并对比var和let声明变量的差别，最后对变量名名称规则进行了总结。"}, {"id": "6844903592831238157", "title": "你应该知道的requestIdleCallback", "desc": "我们都知道React 16实现了新的调度策略(Fiber), 新的调度策略提到的异步、可中断，其实就是基于浏览器的 requestIdleCallback和requestAnimationFrame两个API。虽然React是自己实现了一套类似的requestIdleCallb…"}, {"id": "6923026786825699341", "title": "ES2021 带来的新特性", "desc": "ES2021（ES12）将会带来 5 个新特性，本文将对这些新特性做一些简单的介绍。 在 String.prototype.replace() 方法中，当第一个参数是字符串类型时，只替换第一个匹配的字符串，相关细节可以参阅 MDN 文档。因此，在上面的代码中，只有第一个 o 被…"}, {"id": "6844903497800908807", "title": "前端面试之ES6篇（高产似母猪）", "desc": "这也是前端面试经常询问的问题，经常问你es6出现了哪些新的特性，平时又使用过那些。在编写此教程的时候，第一句话往往就是面试常常问到的地方，然后后面就是他的详细解释，面试要求的内容我会用*标记出来。写技术文档是真的累啊，虽然是看别人的文档，但是你得看很多，而且还得自己总结啊。所以…"}, {"id": "6917516151698407431", "title": "《看完就懂系列》谈谈数据埋点的原理与实现", "desc": "之前公司接了个做广告的业务，甲方财大气粗，沟通也特别顺利。刚开始的时候，大家都摩拳擦掌兴致满满，觉得这个项目奖金一定会翻一番。于是第一版赶得很急，上线之后，点击率与转化率却一直不温不火。眼瞅着到嘴的项目奖金要飞走，leader说如果运维的小伙伴能根据具体原因快速定位，还怕点击率…"}, {"id": "6914946160037724174", "title": "Vue3中v-model的使用", "desc": "使用Vue的开发人员肯定对Vue2中的v-model非常熟悉，大家平常写起来也非常顺手，但是v-model在vue3中发生了较大的变化。这里简单阐述一下Vue3中v-model新语法的使用以及为什么有新的语法。 我们首先看一下vue2.x中v-model的使用。 也就是说，它实…"}, {"id": "6991679918522236935", "title": "错误信息收集方式｜ 8月更文挑战", "desc": "稳定性是衡量一个项目的重要指标之一，若是一个项目的代码没有做到良好的错误收集和处理，一方面会导致极差的用户体验，另一方面也不利于项目的稳定运行 错误和异常的收集，也是前端领域一需要重点掌握的，接下来就"}, {"id": "6982769937932615710", "title": "Chrome是如何渲染出一个页面的？", "desc": "相信各位前端同学，都碰到过这样一个面试题：浏览器自输入url开始，到页面展示的过程中，究竟发生了什么？ 这个问题在掘金上已经有不少作者，发布了很完整的解答了。从解析 URL 、解析 DNS ，再到浏览"}, {"id": "6844904008130232328", "title": "微医的前端体验优化之路", "desc": "狗蛋看了我的文章并重构了手上的项目，然而前端的重构带来的表现只停留在代码层面，上级也感受不到重构前后带来的差异。 回归到3年前，狗蛋刚踏入前端大门，他也只是个懵懂的切图仔，然而随着node和各种终端的兴起，前端在各个领域也都有了一席之地。 每个人都在想着做自动化，工程化，微服务…"}, {"id": "6844903692726976519", "title": "多页应用 Webpack4 配置优化与踩坑记录", "desc": "最近新起了一个多页项目，之前都未使用 webpack4，于是准备上手实践一下。这篇文章主要就是一些配置介绍，对于正准备使用 webpack4 的同学，可以做一些参考。 webpack4 相比之前的 2 与 3，改变很大。最主要的一点是很多配置已经内置，使得 webpack 能“…"}, {"id": "6996851475083165709", "title": "[js基础04]javascript令人头痛的this绑定 ｜8月更文挑战", "desc": "js中作用域是词法作用域，可以说其是静态的，在代码调用前确定。我们在分析作用域链，变量属于哪个作用域的时候就十分的明确。 而对于this绑定，其实动态的，令人头痛"}, {"id": "6982727094937583647", "title": "详细讲解vue中祖孙组件间的通信之使用$attrs和$listeners的方式", "desc": "问题描述 vuex 关于vuex，笔者之前写过一篇文章。链接附上：https://juejin.cn/post/6965504417764376612 vue实例bus事件 vue实例bus其实不仅仅"}, {"id": "6953116014678638629", "title": "[建议收藏] 初中级前端应该掌握的基础知识", "desc": "本文结合我所在团队的实际情况，总结新手、初级、中级前端工程师需要掌握的基础能力项 check list，​主要围绕 html、js、css、vue、http 展开"}, {"id": "6844903635072057358", "title": "webpack编译速度提升之DllPlugin", "desc": "DllPlugin结合DllRefrencePlugin插件的运用，对将要产出的bundle文件进行拆解打包，可以很彻底地加快webpack的打包速度，从而在开发过程中极大地缩减构建时间。 结论先行：使用DllPlugin和DllRefrencePlugin进行构建，可以缩减5…"}, {"id": "6844903906221228039", "title": "解析篇 - Task-slice实现淘宝移动端方式加载", "desc": "前言继上一篇文章发布之后，由于大家的支持，被顶上了掘金热搜榜第一，这里先感谢大家对我的支持当然，也有一些大佬，发现了其中的一些问题，在git里面也给我提了相应的issues，感谢你们，大家针对的疑问比"}, {"id": "6844903682434138119", "title": "一个极简版本的 VUE SSR demo", "desc": "我本人在刚开始看 VUE SSR 官方文档的时候遇到很多问题，它一开始是建立在你有一个可运行的构建环境的，所以它直接讲代码的实现，但是对于刚接触的开发者来说并没有一个运行环境，所以所有的代码片段都无法运行。那为什么作者不先讲构建，再讲程序实现呢？我觉得可能是因为构建、运行又重度…"}, {"id": "6913835186933366798", "title": "一文搞懂js运行机制，宏任务微任务event loop", "desc": "首先要确定 js是单线程语言，js在设计之初用作用户互动，以及操作DOM。这决定了它只能是单线程（例如多线程操作同一dom，一个删除一个修改，这样会产生冲突）。 但倘若只有同步模式，遇到耗时操作，页面便会阻塞，就像接口请求不到数据，或者图片未加载完成，页面就卡住一直等待。这样显…"}, {"id": "6844903879599996942", "title": "理解Canvas Context 的save() 和 restore()", "desc": "之前写过一个基于canvas实现的共享写作画板应用，当时在写这个应用的有画板绘制的“前进”和“后退”功能，当时查了MDN上的Canvas文档，看到了有save()和restore()两个方法。文档上是这样解释的使用 save() 方法保存默认的状态，使用 restore()进行…"}, {"id": "6979397281036369927", "title": "浅谈前端 | JavaScript对象和运算符", "desc": "这是我参与更文挑战的第30天，活动详情查看： 更文挑战 前言 js中难道没有像Python中的列表一样的数据类型吗？也没有字典吗？答案当然是有滴，请看小庄慢慢道来。 对象 JavaScript是一门面"}, {"id": "6908652759029907470", "title": "Vue3 最 Low 版实现", "desc": "我在上篇文章 聊一聊 Vue3 中响应式原理 对Vue3 响应式的实现原理做了介绍，想必大家对 Vue3 中的如何利用 Proxy 实现数据代理，以及如何实现数据的响应式有了一定的了解，今天我们再次进阶，就看看它是如何与 view 视图层联系起来的，实现一个Low版的 Vue3…"}, {"id": "6844903512581603335", "title": "CSS3热身实战--过渡与动画（实现炫酷下拉，手风琴，无缝滚动）", "desc": "在自己的专栏上写了十几篇文章了，都是与js有关的。暂时还没有写过关于css3的文章。css3，给我的感觉就是，不难，但是很难玩转自如。今天，就用css3来实现三个特效，希望这三个特殊能让大家受到启发，利用css3做出更好，更炫的动画效果，并且对比这三个特效和JS特效的对比，希望…"}, {"id": "6979066719872483335", "title": "1.7 JS-this 史上最简单的this", "desc": "this 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。本文总结了六个规则，和10道经典面试题。只要背完六个规则，做完10道题，所有的this问题就都解决了。"}, {"id": "6884111226209599502", "title": "📝记录：近期面试JS的提问", "desc": "1、求y和z的值是多少？答案：为undefined原因：因为没有返回值。2、//声明一个函数表达式答案：53、javascript是面向对象的，怎么体现javascript的继承关系？参考答案：1.原"}, {"id": "6844903541853650951", "title": "前端模块化，AMD与CMD的区别", "desc": "最近在研究cmd和amd，在网上看到一篇不错的文章，整理下看看。 遗憾的是JavaScript在设计时定位原因，没有提供类似的功能，开发者需要模拟出类似的功能，来隔离、组织复杂的JavaScript代码，我们称为模块化。 一个模块就是实现特定功能的文件，有了模块，我们就可以更方…"}, {"id": "6844904104171405319", "title": "Vue中 props 这些知识点，可以在来复习一下！", "desc": "如果你一直在阅读有关\"props\"内容，你会发现我们可能也一直在使用它们（即使没有意识到），但也许你并不完全确定它们是什么。或者如何正确使用它们，并充分利用它们。 当你读完这篇指南时，你就会知道成为一名高效的Vue开发者所需要知道的关于props的一切。 props 是我们在不…"}, {"id": "6867773840768909326", "title": "聊聊前端监控——错误监控篇", "desc": "每当有人问起：你们的公司的这款应用用户体验怎么样呀？访问量怎么样？此时，你该怎么回答呢？你会回答：UV、PV 巴拉巴拉，秒开率、FP、TTI 巴拉巴拉。 那么，这些数据是哪里来的呢？显而易见，这些数据都来自前端监控系统。 当今时代，是一个快节奏的时代，应用的性能极大影响着用户的…"}, {"id": "6844904048773201927", "title": "都2020了，还不懂js运算符优先级？", "desc": "1. r等于什么 A. {a: 2} B. {a: 1, f: ƒ} C. {a: 3} 2. str等于什么 A. \"World\" B. \"Hello World\" C. \"Hello JS\" +的优先级高于 ...?...:... 3. a等于什么 A. (0,1) B. …"}, {"id": "6977247869988241444", "title": "js的 ?? 和 ?. 运算符", "desc": "空值合并操作符（ ?? ） 空值合并操作符（ ?? ）是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。 空值合并操作符（ ?? ）与逻"}, {"id": "6973830614755573796", "title": "155个JavaScript基础问题（146-155）", "desc": "这是我参与更文挑战的第13天，活动详情查看：更文挑战 146. 输出是什么？ 147. 输出什么？ 148. 输出什么？ 149. 输出什么？ 150. 输出什么？ 151. 输出什么？ 152. 输"}, {"id": "6969838280251146271", "title": "图片加载失败,重试三次, 若失败则使用占位图片", "desc": "需求描述: 解决思路 基本实现 1. 监听图片的error事件 2. 开启一个定时器,假设规定时间内执行一次,即重试 3. 得有一个计数器, 来判断重试的次数 4. 当重试次数大于我们设定的值,关闭定"}, {"id": "6989108331675648030", "title": "LeetCode刷题，验证二叉树的前序序列化（331）", "desc": "验证二叉树的前序序列化 序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #"}, {"id": "6921911176133771278", "title": "深入理解JavaScript对象", "desc": "上面的例子创建了一个person对象实例，并为它添加了属性及方法,在早期js开发人员经常使用这种方式，但是现在对象字面量成了首先方式，看一下字面量定义对象。 可以看到上面这种使用字面量的方式定义对象更加简洁明了,字面量的方式跟第一种定义方式是一样的。 特征, 定义这些特性是为了…"}, {"id": "6970596703518851080", "title": "JavaScript中不得不学的类型转换(下)", "desc": "上篇文章主要介绍了一下各种数据类型转换成Boolean,Number,String的规则。刻意没有去谈到有关于与运算符相关类型转换。这篇就重点讲一下这方面的知识。 上图 一元运算符 + 一元运算符遵从"}, {"id": "6844904205346406414", "title": "DD每周前端七题详解-第六期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6993960187350646815", "title": "学 JS 的基本要求", "desc": "分为两大要求 软要求 逻辑能力 质疑自己能力 我在写代码的时候，从来不相信自己会写对，质疑自己是否是自己写错了 抽象思维： 好处：实际写代码就是在解决一个一个问题，如果有抽象思维，使你的代码能解决更多"}, {"id": "6844903585453441032", "title": "抱歉，学会 Proxy 真的可以为所欲为", "desc": "Proxy 是 JavaScript 2015 的一个新特性，下面让我们看看他实现哪些有趣的东西。 在 JavaScript 里，我们通常用一个对象来表示枚举值。 但这往往是不安全，我们希望枚举值： 如果不存在的话，报错。 不允许动态设置，否则报错。 不允许删除，否则报错。 我…"}, {"id": "6928366792364523533", "title": "请说说ES6 module和CommonJS的区别", "desc": "在CommonJS中，一个文件就是一个模块，模块中的变量，函数，类都是私有的外部不可以访问，并规定module代表当前模块，exports是对外的接口。 要回答这个问题我们要从CommonJS内部执行代码的原理说起。 在CommonJS规范中代码在运行时会被包裹在一个立即执行函…"}, {"id": "6844903908553261063", "title": "一文带你了解什么是JavaScript 函数式编程？", "desc": "函数式编程在前端已经成为了一个非常热门的话题。在最近几年里，我们看到非常多的应用程序代码库里大量使用着函数式编程思想。 函数式编程是一种编程范式，主要是利用函数把运算过程封装起来，通过组合各种函数来计算结果。函数式编程意味着你可以在更短的时间内编写具有更少错误的代码。举个简单的…"}, {"id": "6970688540929687559", "title": "async && await原理", "desc": "1.是一种编写异步代码的新方法。之前异步代码的方案是callback和promise。与promise一样也是非阻塞的。 2让异步代码看起来、表现起来更像同步代码。"}, {"id": "6882568846843052040", "title": "异型屏兼容框架", "desc": "背景现在的手机制造者在体积不变的情况下，尽量让屏幕变大，确实在屏幕设计上煞费了苦心，为了增大液晶屏的占比，「异形」出现了！水滴屏、刘海屏等各种「异型屏」的独特界面设计替代了原本规规矩矩的布局，用户开心"}, {"id": "6994652660326514719", "title": "封装可同时验证多个规则的表单验证类", "desc": "项目中需要用到表单验证，根据需求封装了一个表单验证类 需求： 可自定义验证规则 可自定义验证的正则表达式 可同时验证多个规则或正则表达式 可复用 根据以上"}, {"id": "6989979846021480461", "title": "函数式编程与Js异步编程、手写Promise（03）", "desc": "文章说明：本专栏内容为本人参加【拉钩大前端高新训练营】的学习笔记以及思考总结，学徒之心，仅为分享。如若有误，请在评论区支出，如果您觉得专栏内容还不错，请点赞、关注、评论。上一篇中提到了【纯函数】、【柯里化】、【函数组合】，点击上方链接可查看。Part1 · JavaScript【..."}, {"id": "6963091166745067528", "title": "MDH 前端周刊第 2 期：babel、deno、0kb JavaScript", "desc": "MDH 前端周刊第 2 期：babel、deno、0kb JavaScript 这是 「MDH：前端周刊」 第 0002 期，发表于：2021/05/17。本期刊开源（GitHub: sorrycc/"}, {"id": "6975731109187289096", "title": "初识JavaScript", "desc": "本文针对前端的初学者，入门者。我入门的时间比较晚，现在用vue比较多，对于原生也就没有过多的重视。公司里一个干了八年前端的前辈提醒了我，js非常重要，要我好好学，我才萌生了要写这类文章的想法。"}, {"id": "7000738449913298981", "title": "严格模式", "desc": "严格模式：js的一种开发模式 ，语法会比正常的语法更加严谨； 怎么开启严格模式呢？通过一个字符串 叫\"use strict\"可以开启严格模式 1.this指向问题 2.变量的赋值3.参数问题"}, {"id": "6844903862122332168", "title": "初识cocos creator，做一款H5小游戏", "desc": "小游戏体验。 cocos creator 前世今生。 基本开发环境的了解。 小游戏场景制作相关知识。 基础语法讲析。 sunlands-cow demo的讲解。 构建，发布。（h5, 微信小游戏） cocos creator是一套完整的游戏开发解决方案，包括了 cocos2d-…"}, {"id": "6844903586791424008", "title": "一次搞定闭包和this", "desc": "闭包和this，是两个相当高频的考点，然而你有没有想过，实际上他们两个都跟同一个知识点相关？ 有请我们的这篇文章的主角，执行上下文。"}, {"id": "6983346254843478046", "title": "JS个人学习(2)——操作符相关", "desc": "针对操作符在涉及到隐式类型转换时候的总结，希望能够更好地记住js在发生类型转换时的顺序（仅用于个人理解学习总结记录）"}, {"id": "6844903705414729736", "title": "vue地图可视化（3） ArcGIS篇", "desc": "如图所示：可视化界面采用三层三文治结构，从server（后台，非online server）读取数据，vueJS负责数据驱动，ArcGIS与echarts负责数据的图形化。同时引入浏览器的web sql db本地数据库进行海量数据缓存。 ArcGIS API for Javas…"}, {"id": "6956239388950954021", "title": "作用域和作用域链（不理解的评论）", "desc": "作用域 在调用栈中创建出了执行上下文，我们称这个上下文为作用域（函数会给自己创建作用域） 当函数执行时会创建一个成为执行期上下文的内部对象，一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对"}, {"id": "6911851488616644615", "title": "grunt 打包工具", "desc": "脚手架可以简单的理解为自动为我们创建项目基础文件的工具，看似很普通的一个需求背后却包含一定的道理，因为除了创建文件更重要的是提供给开发者一些约定和规范。 通常我们在去开发相同类型的项目时，都会有一些相同的约定，其中会有相同的文件组织结构，相同的代码开发范式，相同的模块依赖，设置…"}, {"id": "6844904163160096782", "title": "viewport和1px | 工具人: 这是1px，设计师： 不，这不是", "desc": "目前多端运行的项目越来越多，设计师对于UI的要求也越来越高。 请原谅工具人吧。 在高清屏下，很多设计稿上的参数就不能像web一样直接拿来用了，不管是H5页面还是RN应用，都需要进行下适配。例如，同样是1px，移动端的1px 就会显得很粗。 那么为什么会产生这个问题呢？主要是跟一…"}, {"id": "6844903752139276301", "title": "var和let/const的区别", "desc": "let和const是 ES6 新增的命令，用于声明变量，这两个命令跟 ES5 的var有许多不同，并且let和const也有一些细微的不同，在认真阅读了阮一峰老师的文档后，发现还是有一些不知道的细节,重新整理了一下，分享给各位. const 简单类型一旦声明就不能再更改，\b复杂…"}, {"id": "6977133649921572878", "title": "弗申：跨端框架的标准化研发模式", "desc": "前端发展到现在，工程架构日趋复杂，业务需要投放到的容器也不尽相同，那么大家在不同的业务领域可能会有自己不同的业务诉求，在大背景下怎么去打造一个标准化的研发模式，以及一个同基础通用的跨端研发框架，这件事"}, {"id": "6979359271901200398", "title": "🍉一文讲明白Symbol数据类型", "desc": "一文讲明白Symbol数据类型 一、Syboml数据类型的作用是什么？ 我们学过JavaScript都知道在JavaScript中基本数据类型有6种：Number,String,Boolean,Nul"}, {"id": "6844904152871469070", "title": "秒懂js的垃圾回收", "desc": "js具有自动垃圾回收机制，换句话说，执行环境会管理代码执行过程中使用的内存。 执行环境会找出那些不再继续使用的变量，然后释放其占用的内存。 当变量进入环境时，就将这个变量标记为“进入环境”，而当变量离开环境时，则将其标记为“离开环境”。 标记变量方式看具体的实现，比如可以使用一…"}, {"id": "6971237930803134471", "title": "在线文档技术揭秘开篇 - 富文本编辑器", "desc": "本文旨在向大家介绍在线文档的核心模块富文本编辑器技术，并介绍业内主流商业文档产品如何进行富文本编辑器技术选型。"}, {"id": "6954306568414298142", "title": "技术周报 · 2021-04-23", "desc": "小编推荐 和工业聚一起聊聊技术与写作 Node.js 16.0.0 正式发布 WeGame 暗色模式实践总结 深入学习 通过源码分析 nodejs 原理 Web 前端 WebRTC 攻略(三) 传输协"}, {"id": "6999169728187121695", "title": "JS实用篇复习笔记（5）", "desc": "1、函数 Function 函数 声明 1、局部变量 2、外部变量 函数也可以访问外部变量 外部变量仅在没有本地变量时才使用 先查找内部变量 然后查找外部变量 并且 可以修改 外部变量"}, {"id": "6844903680123076615", "title": "[译文]如何避开 async/await 地狱", "desc": "async/await把我们从回调地狱中解放了出来,但是,人们也对其颇有微词.因为随之而来导致了async/await地狱的诞生. 在这篇文章,我会试图解释什么是async/await地狱,另外我也会分享一些避开它们的方法. 当我们在编写JavaScript异步代码的时候,人们…"}, {"id": "6844903619158867982", "title": "Webpack打包优化", "desc": "前端的打包工具从之前的browserify、grunt、gulp到现如今的rollup、webpack，涌现出了很多优秀的打包工具，而目前最火的无疑是webpack，无论是当前热门的框架还是工具库很多都选择了它作为打包工具，因此在开发中webpack作为打包工具是一个很好的选择…"}, {"id": "6927652720706846728", "title": "使用 JSDoc 给 js 项目添加类型注释", "desc": "公司有些早期的js项目仍然需要维护，于是使用JSDoc给代码加上了类型注释，结合vscode的代码提示，给维护效率带来了一定提高，将一些用法心得记录如下类型定义使用类型前需要先定义类型，以下以定义对象"}, {"id": "6914943429944279054", "title": "从一个优质开源项目来看前端架构", "desc": "系统架构师是一个最终确认和评估系统需求，给出开发规范，搭建系统实现的核心构架，并澄清技术细节、扫清主要难点的技术人员。主要着眼于系统的“技术实现”。因此他/她应该是特定的开发平台、语言、工具的大师，对常见应用场景能给出最恰当的解决方案，同时要对所属的开发团队有足够的了解，能够评…"}, {"id": "6984608041307996191", "title": "理解js执行过程以及作用域相关的概念", "desc": "Js执行过程： 一段js代码执行之前需要被js引擎编译，编译之后才会进入执行阶段。 js代码经过编译之后会生成两部分，执行上下文和可执行代码。 执行上下文：js执行一段代码的一个运行环境。比如调用一个"}, {"id": "6844903778471280653", "title": "聊聊前端国际化文案该如何处理", "desc": "最近接到一个海外项目业务需求，项目最终会被来自不同国家的客户所使用，期望能让客户有一个良好的用户体验，因此前端需要适配国际化。 乍一听，这个海外项目需求并没有什么特别的地方，似乎就多了一个国际化适配。但细细一想，事情可没这么简单，前端开发面临了很多新的问题。下面梳理一下国际化开…"}, {"id": "6978671322947649544", "title": "精读《算法 - 回溯》", "desc": "如何尝试走迷宫呢？遇到障碍物就从头 “回溯” 继续探索，这就是回溯算法的形象解释。 更抽象的，可以将回溯算法理解为深度遍历一颗树，每个叶子结点都是一种方案的终态，而对某条路线的判断可能在访问到叶子结点"}, {"id": "6876417619117899789", "title": "如何运用js操作符【新语法】优化代码？", "desc": "昨天在我们的技术群里讨论的时候，有个小伙伴，发出了一个关于可选链语法的提问,今天就来聊聊几个js骚操作(我认为是代码优化技巧)在很多场景下，使用可选链语法来编码，是非常有优势的，尤其是数据层级较深，或"}, {"id": "6972336780414550029", "title": "由 SPA 和 MPA 引发关于页面刷新的思考", "desc": "前两天突然的钻了牛角尖，MPA 中能不能使用前端路由呢？在群里问了起来，顺带也梳理了路由的相关知识。"}, {"id": "6999444668089892901", "title": "干货 | RAF替代setTimeout_setInterval", "desc": "RAF替代setTimeout_setInterval 前言 为什么用 requestAnimationFrame代替 setInterval 和 setTimeout？那得先了解微任务、宏任务与Ev"}, {"id": "6938252479679168542", "title": "低代码开发中的一种开发方式探索 | 技术点评", "desc": "因为对低代码开发比较感兴趣，最近也一直在看低代码这方面的内容。目前低代码开发，主要是通过一份 JSON Schema 数据来描述业务逻辑，生成这份 JSON 数据的方式一种是通过可视化编辑器拖拽生成（比如 iceluna、云凤蝶），另一种是手写 JSON 数据（比如 amis）…"}, {"id": "6995511070844518414", "title": "JavaScript 中null，undefined 的区别?什么情况下会返回 undefined 值？", "desc": "一、null，undefined 的区别？ null: 表示一个对象被定义了，值为“空值”； undefined 表示不存在这个值 undefined: :是一个表示\"无\"的原始值或者说表示\"缺少值\""}, {"id": "6969473212740534286", "title": "试试前些天尤老师提起的VitePress | 尝鲜记", "desc": "前几天在杭州举办了第四届Vue.js开发者大会。会议中由vue的作者尤雨溪老师介绍了Vue 3 生态的现状。 其中讲到VitePress，今天来尝尝鲜..."}, {"id": "7003309674053238820", "title": "javascript设计模式之实战案例", "desc": "PubSub ——“发布/订阅”模式 Vue中provide和inject 作用：用于父组件向子孙组件传递数据 原理：向上找寻 何时使用 provide是非响应的，那么就决定它注定不能用于组件通信，和"}, {"id": "6844904130352250887", "title": "几个非常有意思的javascript知识点总结", "desc": "1. Observer API Observer是浏览器自带的观察者,它主要提供了Intersection, Mutation, Resize, Performance这四类观察者, 这里笔者重点介绍Intersection Observer. 说简单点就是该api可以异步监听…"}, {"id": "7001881781125251086", "title": "宏任务和微任务", "desc": "随着浏览器的应用领域越来越广泛，消息队列中这种粗时间颗粒度的任务已经不能胜任部分领域的需求，所以又出现了一种新的技术——微任务。微任务可以在实时性和效率之间做一个有效的权衡。"}, {"id": "6844903521163182088", "title": "正确面对跨域，别慌", "desc": "跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。 所谓的同源是指，域名、协议、端口均为相同。 jsonp跨域其实也是JavaScript设计模式中的一种代理模式。在html页面中通过相应的标签从不同域名下加载静…"}, {"id": "6844904035271573511", "title": "手把手带你入门 AST 抽象语法树", "desc": "抽象语法树 (Abstract Syntax Tree)，简称 AST，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。 并且如果你想了解 js 编译执行的原理，那么你就得了解 AST。 js 执行的第一步是读取 …"}, {"id": "7000526479654125599", "title": "JavaScript知识点回顾（二十六）——混入（一）", "desc": "这是我参与8月更文挑战的第二十六天，活动详情查看：8月更文挑战 混入 在继承或者实例化的时候，JavaScript的对象机制并不会自动执行复制的行为。"}, {"id": "6985400393354182693", "title": "js 函数", "desc": "函数的声明 function 命令 上面的代码命名了一个print函数，以后使用print()这种形式，就可以调用相应的代码。这叫做函数的声明（Function Declaration）。 函数表达式"}, {"id": "7005756560823549966", "title": "使用ES6优化代码", "desc": "参考阮一峰大神的ECMAScript 6 入门，省略各章节的概念介绍，使用ES6新语法优化代码，寻找最佳实现。"}, {"id": "6983956545499299847", "title": "新旧微前端架构比较", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 前言 本文是我终于把你送进了大厂的另一个版本，准确的说是女生视角下的故事。本文感情线和技术线会更加细腻，请细细体会。 "}, {"id": "7000729820136996895", "title": "call,apply,bind", "desc": "可以基于call/bind/apply 等方式，强制手动改变函数中的this,我们可以更加多方式了解this"}, {"id": "6887844088335302670", "title": "坚持造轮子第五天 - 时间旅行", "desc": "一天造一个轮子，干就完了。 时间旅行就是让程序可以在自己历史状态里面任意穿梭，想想Office和PS软件中的Undo和Redo就知道。再想想王者荣耀的录像功能。 时间旅行实际上就是设计模式中的备忘录模式。这个到我们可以练习设计模式的时候再升华，先不在这里强行渡劫。 首先Redu…"}, {"id": "6997285904884858917", "title": "JS基础篇：7、var、let、const", "desc": "变量声明的方法 ES5 只有两种声明变量的方法：var和function ES6 新增了常用的let、const 以及 import、class 什么是变量提升？ JavaScript 中，函数及变量"}, {"id": "7003631656686845965", "title": "模块化开发：CommonJS & ES Module", "desc": "学习模块化开发的过程中，相信大家对 CommonJS、ES Module 都不陌生，在模块化开发出现之前，大部分人开发都还是把所有代码写在几个js文件中，导致我们的代码十分臃肿不易维护..."}, {"id": "6872867757407338509", "title": "关于 JavaScript 错误处理的最完整指南", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 我们的开发过程中并不总是一帆风顺。特别是在某些情况下，我们可能希望停止程序或在发生不良情况时通知用户。 在类似这些情况下，我们可以自己写个自定义的错误来管理，或者直接让引擎为我们去定义这些错误。有了错误定义后，…"}, {"id": "6993614323176177695", "title": "深入了解 JavaScript 内存泄露", "desc": "这篇文章是针对浏览器的 JavaScript 脚本，Node.js 大同小异，这里不涉及到 Node.js 的场景。"}, {"id": "7005379912471314462", "title": "JavaScript小技巧 ", "desc": "今天，我将跟大家分享11个在日常教程中不常被提及的JavaScript小技巧，他们往往在我们的日常工作中经常出现，但是又很容易被忽略。 1、过滤唯一值 Set类型是在ES6中新增的，它类似于数组，但是"}, {"id": "6992380856903925790", "title": "JavaScript之原型（2） | 8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 原型 内容引导： 使用 prototype 原型对象解决构造函数的问题 分析 构造函数、prototype 原型对象、实例对象 三者之间的关"}, {"id": "6844903575559077895", "title": "几道JS代码手写题以及一些代码实现", "desc": "2. 将两个有序数组合并为一个排好序的大数组 不用循环，创建一个长度为 100 的数组，并且每个元素的值等于它的下标。"}, {"id": "7001846070749691940", "title": "关于javascript正则表达式中的贪婪匹配和惰性匹配的实际应用", "desc": "首先：js中的正则表达式引擎，默认是贪婪模式 简单说：此处先匹配到一个\"，然后.+会一直匹配到str结尾处，然后再回溯去匹配\"，所以最终匹配不符合预期 第二：我们要开启惰性匹配 第三：不开启惰性匹配，"}, {"id": "6844903567375990791", "title": "三分钟看完JavaScript原型与原型链", "desc": "写的比较短了，三分钟看完应该是没问题（嗯。。）。 当然最好再花半小时思考理解一下。 与大部分面向对象语言不同，JavaScript中并没有引入类（class）的概念，但JavaScript仍然大量地使用了对象，为了保证对象之间的联系，JavaScript引入了原型与原型链的概念…"}, {"id": "6958277142262054942", "title": "重抓JS基础知识（码字ing）", "desc": "初步了解JaveSctript Web标准的构成 标题 内容 说明 结构 HTML 网页元素的结构和内容 表现 CSS 网页元素的外观和位置，包括版式和颜色、大小 行为 js 网页模型的定义和交互 J"}, {"id": "6844904161855684616", "title": "JS作用域和变量提升看这一篇就够了", "desc": "作用域是JS中一个很基础但是很重要的概念，面试中也经常出现，本文会详细深入的讲解这个概念及其他相关的概念，包括声明提升，块级作用域，作用域链及作用域链延长等问题。 第一个问题就是我们要弄清楚什么是作用域，这不是JS独有的概念，而是编程领域中通用的一个概念。我们以下面这个语句为例…"}, {"id": "6994366052570234888", "title": "JS原型特性(prototype特性)", "desc": "原型特性是在创建对象时设置的。用对象字面量创建的对象使用Object.prototype作为他们的原型。使用new创建的对象使用其构造函数的prototype属性的值作为其原型。"}, {"id": "6844904152951177224", "title": "javascript正则深入以及10个非常有意思的正则实战", "desc": "熟悉我的朋友可能会知道，我一向是不写热点的。为什么不写呢？是因为我不关注热点吗？其实也不是。有些事件我还是很关注的，也确实有不少想法和观点。 但我一直奉行一个原则，就是：要做有生命力的内容。 对于正则的基本用法笔者这里就不总结了,这里重点介绍一些比较有用且难懂的知识点.在最后笔…"}, {"id": "6976802035391791141", "title": "数据结构之散列表（三）", "desc": "这是我参与更文挑战的第23天，活动详情查看：更文挑战 冲突解决 1. 书写更好的散列函数 既然我们知道了冲突是由于在创建之初由于散列函数给出了相同的hash导致的，那么根源的上的解决办法就是重写一个更"}, {"id": "6844904119157669902", "title": "浅谈浏览器渲染、回流和重绘", "desc": "一个普通的网页，浏览器在渲染前需要先构建 DOM（document object model） 和 CSSOM (css object model） 树。 转换：浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码将它们转换成各个字符。 令牌化： 浏览器将字符串转…"}, {"id": "6987595646203068429", "title": "移动端在线预览PDF插件，PDFJS API", "desc": "移动端在线预览PDF插件，PDFJS的使用方法以及api说明。| 属性 | 说明 | 类型 | 默认值 |"}, {"id": "6844903869558816781", "title": "VuePress + Travis CI + Github Pages 全自动上线文档", "desc": "1.Github 创建项目，本地创建切换到 docs 分支，通过 VuePress 构建文档项目（写一些文档），上传至 Github。 2.Travis CI 自动 clone 后安装依赖、编译、上传至 Github master 分支。 3.通过 GitHub Pages 功…"}, {"id": "6942645048945147911", "title": "前端刷题路-Day2", "desc": "罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。…"}, {"id": "6971311132564979720", "title": "用IndexedDB持久化你的前端数据", "desc": "前端数据的存储方式有多种，IndexedDB最为强大但却比较少被使用，这篇文章主要说说它的特点和用法。"}, {"id": "7002610363904557087", "title": "【JavaScript】19.浏览器对象模型补充", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 浏览器对象模型补充 01.元素偏移量 ——offset （1）概述 offset：偏移量，可以得到元素的位置（偏移）、大小 获取元素相对于"}, {"id": "6945083519412469797", "title": "一次H5跨Webview通讯实战——WebviewBus的由来", "desc": "上次发表过《使用 window.postMessage 进行跨域实现数据交互的一次实战》之后，发现阅读量惨淡，或许大家对跨域数据交互的兴趣程度不高，又或许是我写的文章比较差。虽然文笔比较差，但还是会继续写的。 这次的需求遇到的不是跨域通讯了，而是同域下的跨Webview通讯。之…"}, {"id": "6982821567839338533", "title": "VUE3（十五）关于cookie使用的几个函数", "desc": "下边是我简单封装的几个cookie方法。 Utils.ts 调用： 有好的建议，请在下方输入你的评论。 欢迎访问个人博客 https://guanchao.site 欢迎访问小程序："}, {"id": "6977750720799834126", "title": "搭建JavaScript学习实验环境", "desc": "JavaScript 实验环境搭建，自动加载JavaScript代码，避免手动刷新；为快速学习更多的JavaScript语言特性做准备"}, {"id": "6997394628429217828", "title": "关于日期时间的常用方法 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 一、获取当前时间 这个比较简单，就是通过Data对象获取年份、月份和天数，小于10的需要判断前面是否要加'0' 二、比较两个时间大小 1、"}, {"id": "6869689622676471816", "title": "为什么你老是讲不清楚js的继承模式", "desc": "一、前言相信很多人在遇到面试中都遇到过被问到过JavaScript继承模式的问题，都能手写出几种继承模式的代码例子，但为什么面试官却对你的回答不是很满意或者压根就没听懂，个人觉得应该是缺少自己的一个答"}, {"id": "6999131958756245518", "title": "javascript中箭头函数this指向问题及案例", "desc": "本文主要讲述在ES6背景下，箭头函数的this指向问题 箭头函数作用域内是没有this指针的，如果在箭头函数里面使用this，则该this继续指向该箭头函数外部执行上下文的this。"}, {"id": "6995882044869836831", "title": "前端开发之mock.js使用——前后端分离，生成随机数据", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 本篇目标在于先简单了解mock.js，然后可以简单使用，运行出第一个Mock.js的“HelloWorld”。 一、Mock.js是"}, {"id": "6999413377692860430", "title": "「用前端重返童年🥤」为黑神话悟空定制红白机版游戏开始动画", "desc": "随着黑神话悟空第二弹预告的到来，我的心激动不已，所以用canvas和原生html编码一个红白机版游戏开始动画，寒草🌿 用前端技术重返童年，以此作品献给游戏科学的创作者们～"}, {"id": "7006220584640069645", "title": "前端复盘之JS事件", "desc": "最近在进行一些面试的准备，刚好把有关前端JS事件的一些我个人认为会被面试官拿出来提问的知识点整理一遍。"}, {"id": "7007219863621992455", "title": "设计模式之--发布-订阅模式", "desc": "1.定义 发布-订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所以依赖于它的对象都将得到通知。在JavaScript开发中，一般用事件模型来代替传统的发布-订"}, {"id": "7005025972273561637", "title": "你需要知道的前端模块化", "desc": "前言 很久之前，js只是负责比较简单的交互，代码量很少，所以所有功能代码都混在一起，但是随着前端技术的发展，js能做的事情也越来越多，像node已经是跑在服务器上的js了。如果js不能模块化，所有的代"}, {"id": "7007621258086973447", "title": "吃透JavaScript核心——流程控制之循环结构", "desc": "循环 JS中有for\\while\\do while循环。 三个循环很多情况下可以互相代替使用。 for普遍用于计数。 while\\do while可以做更复杂的判断，比for灵活。 while\\do "}, {"id": "6987910809657540644", "title": "我与前端有场约会🌟 ｜ 工作一周年经验总结", "desc": "大家好，我是寒草，一个正式工作一周年的北漂前端工程师，在这里和大家分享我的心路历程，和一年以来的经验之谈，希望对大家有帮助。本文既是分享，也是纪念，\b字字肺腑，献给风华正茂的我们。"}, {"id": "7004662774638837768", "title": "当后端给我返回了302状态码", "desc": "前言 前段时间接手了一个项目，在代码中看到了这样的一段代码： 主要的作用就是当后端响应的内容是html的时候，跳转到登录页面。这种方案让我感觉有点别扭，于是具体了解了这段代码出现的原因。 功能的核心在"}, {"id": "6973922659125952548", "title": "一次千万级流量的 618 电商 H5 活动页干货分享 ", "desc": "前言 文章较长，建议收藏～ 笔者个人实话实说，是第一次做活动页相关的前端开发工作，所以也算是初体验之后的总结： 第一：活动类经历会短期内提升一个业务前端的技术水平 如果你从来没写过活动类型的需求，第一"}, {"id": "7001662835692404773", "title": "30 second of code 15个有意思的代码段", "desc": "前言 30-seconds 是一个学习系列，基本都是通过简短的代码实现某些功能， 包含 30-seconds-of-code 满足所有开发需求的简短JavaScript代码片段。"}, {"id": "6981728323051192357", "title": "一篇够用的TypeScript总结", "desc": "越来越多的项目都在支持TypeScript，逐渐成为前端必备能力之一。特性虽然很多，但是正常业务开发用到的并不多，够用就行。这里以自己的理解了下总结常用的ts特性。有理解错误的，欢迎大哥指正👏🏻"}, {"id": "7006501715864191006", "title": "一文解决前端面试④----必备的前端手写", "desc": "在前端的学习中，不仅要学会用，一些基础功能的手写也非常重要，本文详细介绍了前端必备的23个手写，持续更新"}, {"id": "7005161443746119687", "title": "Day2：Github项目每日优选之Smartcrop.js", "desc": "Day2：Github项目每日优选之Smartcrop.js 各位宝友大家好，今天给大家带来了 smartcrop.js ，我用我拙劣的东北英语大概翻译下， 它实现了一种算法实现更好的图像裁剪。"}, {"id": "7007074665789128740", "title": "【温故而知新】数组 | 对象 遍历", "desc": "目录 循环的基础语法 数组遍历 对象遍历 一、循环的基础语法： 总共分为 3 种for、 while、 do-while，（其他的基于for实现的forEach,map, 与for...in, for"}, {"id": "7007074604850085919", "title": "【JS】工作中的高频代码for循环，你真的了解吗？", "desc": "在日常开发过程中，高频使用的语句如果for循环说自己是第二，则没人敢称第一。这篇文章我们来详细看下for循环在各个场景中的使用。r"}, {"id": "7004616375591239711", "title": "用 JavaScript 做数独", "desc": "最近看到老婆天天在手机上玩数独，突然想起 N 年前刷 LeetCode 的时候，有个类似的算法题（37.解数独），是不是可以把这个算法进行可视化。 说干就干，经过一个小时的实践，最终效果如下： 怎么解"}, {"id": "6989391487200919566", "title": "前端Base64编码知识，一文打尽，探索起源，追求真相。", "desc": "Base64在前端应用其实很广泛，截图，jwt，头像剪裁，混淆加密，soureMap等等，探求起源，理解原理以及相关的编码知识。"}, {"id": "6966390357005172773", "title": "JS常用的循环遍历你会几种", "desc": "前言 数组和对象作为一个最基础数据结构，在各种编程语言中都充当着至关重要的角色，你很难想象没有数组和对象的编程语言会是什么模样，特别是 JS ，弱类型语言，非常灵活。本文带你了解常用数组遍历、对象遍历"}, {"id": "7007663369364701220", "title": "JS常用判断object是否为空的方法", "desc": "1.Object.keys 2.prototype 3.for...in 和 hasOwnProperty 4.lodash"}, {"id": "7001876718893924366", "title": "你知道 JavaScript 中的 Arguments 对象都有哪些用途吗？", "desc": "在实际开发中，Arguments 对象非常有用。灵活使用 Arguments 对象，可以提升使用函数的灵活性，增强函数在抽象编程中的适应能力和纠错能力。"}, {"id": "7007292929190428702", "title": "LeetCode第23天🐱‍🏍", "desc": "447. 回旋镖的数量 n个距离点m相等的点，可得到n*(n-1)个回旋镖.用哈希图存储key距离和value出现次数. 70. 爬楼梯"}, {"id": "7005771280582443039", "title": "JavaScript几个很重要却容易忘记的运算符", "desc": "可选链【?.】 允许读取对象深层次的属性的值。 空值合并运算符【??】 当左侧操作数为null或者undefined时，返回右侧操作数，否则返回左侧操作数。 逻辑空赋值【??=】 左侧操作符为null"}, {"id": "6968809997811597349", "title": "Promise知多少", "desc": "这是我参与更文挑战的第1天，活动详情查看：更文挑战 什么是Promise Promise是一个对象，代表了一个异步操作的最终结果，成功或失败。有三种状态：pedding(进行中)，fulfilled（"}, {"id": "6844903599764406280", "title": "Vue二次封装axios为插件使用", "desc": "封装回调有点多，在使用的时候也需要加上 then()\b \b来处理结果，\basync & await 了解一下哟，好东西当然要藏起来，我才不会分享出来呢..."}, {"id": "7005745035698241550", "title": "JS -- 函数的三种角色", "desc": "普通函数 形参、实参、arguments、return、箭头函数 私有作用域（栈内存、执行上下文） 形参赋值 & 变量提升 作用域链 栈内存的释放和不释放（闭包） ... 构造函数（类） 类和实例 p"}, {"id": "6969483237156454430", "title": "数字转中文大写", "desc": "用JavaScript 实现数字转中文大写字符串，数字不大于一亿，小数点保留两位。写发票，写收据转换文字。"}, {"id": "6993545900308037640", "title": "骚语法实现 promise 缓存实战", "desc": "前言 ES6极大的提高了我们的编程体验，除了简单的 await 等待调用链路的结果，善用某些技能还能提高编程体验"}, {"id": "6844903848453079054", "title": "聊聊我的第一篇10万+，同时反驳某些评论", "desc": "元旦的时候，我立了一个Flag，今年要写一篇10万+，现在目标算是完成一半了。 知乎后台显示我的回答《如何衡量一个人的 JavaScript 水平？》的阅读量已经超过了10万，具体截止2019年5月20号是115172。 阅读量已经超过10万了，为什么只是完成了一半呢？因为这篇…"}, {"id": "6908941215236898829", "title": "推荐一些奇奇怪怪的好东西", "desc": "在这个打死不做兼容的前端时代，我们开发者会用谷歌浏览器，但是有些用户没有安装 Chrome 浏览器，或者是装了其他各式各样的杂牌浏览器内核可能是用的 Chrome 但是有些渲染机制却千姿百态，比如 Edge 360 等等浏览器都是，所以单单使用判断内核是没用的，所以我们需要判断…"}, {"id": "6897233283923312648", "title": "产品：我想要一个这样的日期时间选择界面！！！", "desc": "界面上没有年份？这里做一个伏笔，后面再看。 下面我们一步步来实现这个需求，我使用的是 Vue + Vant，Vant官网。 首先我们需要查看相应的 UI 组件库找到可以基本满足需要的组件，我主要找了两个组件一个是 DatetimePicker 时间选择，另一个是Picker 选…"}, {"id": "6844903684871192589", "title": "笔试题——JavaScript事件循环机制（event loop、macrotask、microtask）", "desc": "JavaScript 都知道它是一门单线程的语言，这也就意味着 JS 无法进行多线程编程，但是 JS 当中却有着无处不在的异步概念 。要完全理解异步，就需要了解 JS 的运行核心——事件循环（event loop）。 js执行之后，程序输出 'start' 和 'end'，在大…"}, {"id": "6997306713011388453", "title": "HTML转PDF", "desc": "近期有个需求：需要把一个数据分析页面导出为PDF文件，经过一番调研，借鉴的前端的方案是：html2canvas （使用JavaScript屏幕截图） + jspdf （用JavaScript生成PDF"}, {"id": "6898620971729911821", "title": "搞懂变量提升、this、作用域链、闭包以及(GO,VO,AO)原理", "desc": "作用域是指程序源代码中定义变量的区域，作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限，JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。 因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定…"}, {"id": "6966426382734163982", "title": "js基础之继承", "desc": "前言 实现方式 原型链 每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地"}, {"id": "6844903861958737927", "title": "JavaScript混淆安全加固", "desc": "在安全攻防战场中，前端代码都是公开的，那么对前端进行加密有意义吗？可能大部分人的回答是，毫无意义，不要自创加密算法，直接用HTTPS吧。但事实上，即使不了解密码学，也应知道是有意义的，因为加密前和解密后的环节，是不受保护的。HTTPS只能保护传输层，此外别无用处。 本文主要列举…"}, {"id": "6844904006863552526", "title": "你不知道的前端组件库", "desc": "关于组件库设计的文章一搜能出来一大把，但大多数都是从UI角度或者视觉规范层面来讲的，但随着前端技术的发展和迭代，前端这个岗位早已不是过去定义的实现样式那么简单了，这篇文章会站在一个技术同学的角度来聊一下组件库的设计除了样式还有哪些可以关注的。 组件的本质其实在于代码的复用和抽象…"}, {"id": "6844903925062057992", "title": "ES新提案：双问号操作符", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 双问号 ?? 的操作符跟 || 类似，如果给定变量值为 null 或者 undefined，刚使用双问号后的默认值，否则使用该变量值。 如果 a 是 truthy 值，则返回 a, 否则返回 b。 除了 und…"}, {"id": "6999156083138756639", "title": "JS实用篇复习笔记（4）", "desc": "1、比较大小 1、比较返回值为 布尔值 可将比较结果赋值 2、字符串比较 字符串是一个字母一个字母的比较 3、不同类型值比较 比较不同类型的值时，JavaScript 会将值转换为数字"}, {"id": "7005774000957685791", "title": "js作用域和作用域链", "desc": "作用域 ES6 之前 JavaScript 没有块级作用域，只有全局作用域和函数作用域 作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行 块语句（大括号｛｝中间的语句） 如 if 和 s"}, {"id": "6844903856376119304", "title": "[前端漫谈_6] 从原型聊到原型继承，深入理解 JavaScript 面向对象精髓", "desc": "“The etymology of foo is obscure. Its use in connection with bar is generally traced to the World War II military slang FUBAR, later bowdle…"}, {"id": "6995449206085255175", "title": "深拷贝之MessageChannel", "desc": "我们先来了解下MessageChannel 定义 属性 MessageChannel.port1 返回channel的port1 MessageChannel.port2 返回channel的port"}, {"id": "6993553018876755998", "title": "边学边译JS工作机制22--CRFS攻击以及7种防范策略", "desc": "概述 跨站请求伪造（CSRF），也被称为one-click attack 或者 session riding。也是一种web网站或应用的恶意攻击。这种攻击方式，是指攻击者替代受害者执行恶意请求。恶意应"}, {"id": "6963101823704481805", "title": "实现call、apply和bind", "desc": "call、apply、bind有一个共同作用，绑定函数的this，对于this的绑定，小黄书（《你不知道的JavaScript》）介绍了4种绑定方式。 默认绑定 隐式绑定 显示绑定 new绑定 这3个"}, {"id": "6982440762818428936", "title": "JavaScript基础-Array", "desc": "每天一题算法，生活都充实了！正当我开心的沉醉在算法中，突然发现`JavaScript`不支持真正的多维数组，只能使用数组的数组来模拟。让我感受到自己才疏学浅，于是乎，开始重温`Array`吧。"}, {"id": "6998857710527741983", "title": "call、apply、bind这次真的可以学懂了", "desc": "highlight: a11y-dark 看过很多手写call、apply的文章总能让我从入门到放弃。 直到遇到冴羽大佬的系列文章，反复看了好多遍，真上头，感觉自己又行了。本文是对[冴羽]大佬这一篇文"}, {"id": "6911569229258948615", "title": "常见文字效果实现", "desc": "本人前端小白一枚，最近在做文本的艺术字效果，里面用到了很多css的属性来实现的文字效果，期间也遇到一些坑，借此机会做一次总结，希望对大家有所帮助。 以上填充效果可以通过 background-clip: text来实现，使用这个属性的意思是：以区块内的文字作为裁剪区域向外裁剪，…"}, {"id": "6844904070956711943", "title": "2020年你不能不知道的webpack基本配置", "desc": "需要引入十几个css和js文件，而且因为他们彼此间有着依赖关系，所以引入的顺序还不能乱。 传统的html+css+js开发方式不能不能很好地运用less/scss等css预处理器以及ES6+的高级语法。 代码复用性差，可维护性差。 此时就需要一个处理这些问题的工具，webpac…"}, {"id": "6960134118382239774", "title": "前端性能优化篇", "desc": "1. 重排优化 减少重排范围 尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，class就不要加在div上，通过父元素去影响子元素不好。 不要使用 table "}, {"id": "7002620701958111269", "title": "强制类型转换", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 前言 未来的日子，愿你把自己调至最佳状态，缓缓努力，慢慢变好 Y(^o^)Y"}, {"id": "6844903895664164872", "title": "程序员养生指南", "desc": "干了两年钱没赚多少，职业病倒是攒了一堆。 谁要是说程序员不是个体力活，我肯定和他急。可是没办法，每次说要一小时起来活动一下，看着代码一看就是一下午一晚上，根本想不起来锻炼这一茬……既然没法避免，那么我们就努力来改善一下吧。 事先声明：这篇文章不存在打广告，我也不会发链接，自行百…"}, {"id": "6988813411614195719", "title": "canvas动画之速度与加速度", "desc": "本文将开始讲述动画编程的部分，会从基本的运动属性开始：速度、向量和加速度 速度 加速度 速度向量 速度向量指某个方向上的速度。这里包含速度的值和方向（既有大小，又有方向）。"}, {"id": "6939870142746755080", "title": "关于 JavaScript Object.keys() 排序问题的探索", "desc": "近期维护辅导 App 内嵌 WebView 页面调 native 拍照上传的业务时，遇到一个诡异的兼容 Bug：iOS 端新提交的图片偶现顺序不一致的问题，但 Android 端一切正常。 对于在本次 WebView 会话之前已提交过的图片，则通过 sha256 取已有的图片 …"}, {"id": "6931250132861648910", "title": "奇怪的知识——位掩码", "desc": "在春节假期无聊刷手机的时候，偶然间看到了一篇关于“位掩码”的文章，本身就是奇怪知识的它可以用来解决一些奇怪的问题，实在是非常有趣。 在了解“位掩码”之前，首先要学会位运算符。 我们知道，在计算机中数据其实都是以二进制的形式所储存的，而位运算符则可以对二进制数据进行操作。举个简单…"}, {"id": "6844903650020556814", "title": "2018年值得关注的10大JavaScript动画库", "desc": "在这一年里，许多动画库有可能完善得更好，为创建动画提供更好的解决方案。 让我们来看看2018年值得关注的十大JavaScript动画库"}, {"id": "6995393540645715976", "title": "从0到1，理解异步编程方案Promise(1)", "desc": "本篇要聚焦怎么手写Promise了，如果没有读过从0到1，理解异步编程方案Promise(0)这篇文章的同学，请先看这篇文章，因为接下来手写`Promise将要运用到那些知识。"}, {"id": "6975802459205664805", "title": "小助手 娜美", "desc": "基于 wechaty 开发，人人都能拥有的微信机器人。 简单快速拥有自己的微信机器人。 功能： 自动回复，关键字回复，加入群聊自动欢迎，定时任务"}, {"id": "6996652262202294285", "title": "【前端--JavaScript】知识点（十二）—— 常用的JavaScript方法", "desc": "hello呀，大家好，不知道大家七夕过得怎么样，今天有没有起来学习呢~~ 今天一不小心睡到了十点，开始了不知道写什么的一天，就把我小本本上总结的一些小的知识点梳理一下。"}, {"id": "6844904002715385864", "title": "【前端vue进阶实战】：从零打造一个流程图、拓扑图项目【Nuxt.js + Element + Vuex】 （二）", "desc": "接前面一，下面我们利用vuex实现顶部导航栏事件和右上角状态栏。 本系列教程是用Vue.js + Nuxt.js + Element + Vuex + 开源js绘图库，打造一个属于自己的在线绘图软件，最终效果：http://topology.le5le.com 。如果你觉得好，…"}, {"id": "7000280693662023717", "title": "Vue 学习笔记（一）--vue-cli", "desc": "项目接下来可能需要 vue 的技术栈。所以先学一学 Vue 玩玩。 学习资料自然是详细的 官方文档 了。 前言 有了 React 的经验，我直接使用 vue-cli 来安装。 vue-cli 也有相对"}, {"id": "6974972162637578254", "title": "JavaScript 判断优雅写法", "desc": "不同的情况我们可以选择不同的判断语句去写对应的逻辑，但是怎么选择使用哪一个判断语句或其他写法，可以使代码的更优雅或更具有可读性呢？"}, {"id": "6997440521710862366", "title": "js的手写继承，起底这些名字的含义？", "desc": "寄生组合式继承 原型式继承 寄生式继承... 为啥要这样叫？Object.create(obj) 这就是原型式继承！因为obj被设置到了__ptoto__笨蛋属性上"}, {"id": "6991433381363843102", "title": "ECMAScript 2020(ES11)新特性简介｜ 8月更文挑战", "desc": "简介 ES11是ECMA协会在2020年6月发行的一个版本，因为是ECMAScript的第十一个版本，所以也称为ES11. 今天我们讲解一下ES11的新特性。 ES11引入了9个新特性，我们接下来一一"}, {"id": "6979037045440151583", "title": "三天三夜，整理了30张高清思维导图 | 带你重温ES6（下）", "desc": "最近重新学习ES6，我将核心知识汇总整理成脑图~~建议收藏，说不定某天要看一眼！！~~~~~~~~~"}, {"id": "6999618302418878472", "title": "『面试的底气』—— 设计模式之装饰者模式（二）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7002007274877091870", "title": "ES6模块加载实现，以及异步加载", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 Module 的加载实现 上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的"}, {"id": "7002011181221167118", "title": "详解 Cookie 新增的 SameParty 属性", "desc": "各大主流浏览器正在逐步禁用 三方Cookie，如何在禁用三方 Cookie 后还能实现不同域名 Cookie 共享？"}, {"id": "6844904181627781128", "title": "霖呆呆的中大厂面试记录及2年前端薪资对比(附赠学习方法)", "desc": "呆呆最近挺感慨的，因为从四月中旬开始准备面试，到面各个中小公司，大厂，距离今天已经将近2个月了。期间经历过不少事情，也带来了些许的成长。 那么这篇文章主要是说明一下这段时间自己在面不同规模的公司时的一些感悟，以及这个期间的学习和复习方法。我也会站在一个第三者的角度，将自身的优势…"}, {"id": "7002906716039823367", "title": "有道词典Flutter架构与应用", "desc": "长期来看，用 Flutter 来替代 Native，实现双端代码统一，节约人力开发，会是我们持续探索的方向。"}, {"id": "7001382793225699359", "title": "写写，我知道的那几种设计模式", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 前言 设计模式，英文Design Pattern 简单来说，就是前人在解决问题的时"}, {"id": "7004081972196671524", "title": "Vue从入门到精通", "desc": "第一部分 Vue知识框架 0.邂逅Vue Vue读音类似于view Vue的渐进式 Vue特点 1.如何安装 方式一 直接CDN引入 方式二 下载和引入 NPM 安装 2.HelloWorld 编程范"}, {"id": "6991255284849049607", "title": "【SSD系列】傻傻的，连JavaScript，ECMAScript和ECMA-262都分不清楚 ｜ 8月更文挑战", "desc": "什么是JavaScript？什么是ECMAScript？什么是ECMA-262？SSD系列，带你了解一些有意思的前端知识。"}, {"id": "7005526646664986631", "title": "使用Sequelize操作MySQL(一)", "desc": "在node开发中，通常使用ORM框架来简化直接操作数据库，Sequelize是当前很流行的ORM框架，本系列文章就来记录一下：笔者在学习和使用Sequelize的平坦又坎坷的历程 Sequelize增"}, {"id": "6993445070611415070", "title": "JavaScript寄生式组合继承", "desc": "组合继承也被称为伪经典继承，它的基本思想是使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例属性，这样的好处就是可以把方法定义在原型上复用，每个实例又有自己的属性。"}, {"id": "6999431171121610788", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（八）", "desc": "感激相遇 你好 我是阿ken 为了方便程序开发，JavaScript 提供了很多常用的内置对象， 包括数学对象Math、日期对象Date、数组对象Array以及字符串对象String等。掌握常用内置对"}, {"id": "6963053793613185031", "title": "「React进阶」探案揭秘六种React‘灵异’现象", "desc": "前言 今天我们来一期不同寻常的React进阶文章，本文我们通过一些不同寻常的现象，以探案的流程分析原因，找到结果，从而认识React，走进React的世界，揭开React的面纱，我深信，更深的理解，方"}, {"id": "6992724436608614414", "title": "element 穿梭框性能优化", "desc": "穿梭框处理大数据量时,由于渲染的 DOM 节点过多，造成页面卡顿的问题。在尽量不改变组件原有逻辑的前提下，进行优化。"}, {"id": "6974902702400602148", "title": "Axios 如何缓存请求数据？", "desc": "本文是 Axios 四部曲的最后一篇文章，这篇文章将介绍在 Axios 中如何通过增强默认适配器来缓存请求数据。"}, {"id": "6999617823249006606", "title": "获取 NodeJS 程序退出码", "desc": "那么对于一些意外退出的 NodeJS 程序，如何来获取 exitCode ？每一个退出码又代表什么？今天我们就来学习一下。"}, {"id": "6969028296893792286", "title": "做一些动图，学习一下EventLoop", "desc": "最近在学习Vue源码，刚好学到虚拟DOM的异步更新，这里就涉及到JavaScript中的事件循环Event Loop。之前对这个概念还是比较模糊，大概知道是什么，但一直没有深入学习。刚好借此机会，回过"}, {"id": "6944877410827370504", "title": "现代前端工程为什么越来越离不开 Monorepo?", "desc": "随着前端工程日益复杂，某些业务或者工具库通常涉及到很多个仓库，那么时间一长，多个仓库开发弊端日益显露，由此出现了一种新的项目管理方式——Monorepo。本文主要以 Monorepo 的概念、MultiRepo的弊端、Monorepo 的收益以及Monorepo 的落地这几个角…"}, {"id": "7005113621415985183", "title": "自定义播放器 与 Node.js 和 HTML5 视频流传输", "desc": "自定义播放器 与 Node.js 和 HTML5 视频流传输， 通常，我们在页面上进行播放的视频是通过`video`标签"}, {"id": "6844903869399433224", "title": "【Step-By-Step】高频面试题深入解析 / 周刊04", "desc": "15. 什么是闭包？闭包的作用是什么？ 闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包最常用的方式就是在一个函数内部创建另一个函数。 闭包使得函数可以继续访问定义时的词法作用域。拜 fn 所赐，在 foo() 执行后，foo 内部作用域不会被销毁。 无论通过何种手段将…"}, {"id": "6844903652574887943", "title": "你真的懂模块化吗？教你CommonJS实现", "desc": "早期的 JavaScript 往往作为嵌入到 HTML 页面中的用于控制动画与简单的用户交互的脚本语言，我们习惯这样写。 所有的嵌入到网页内的 JavaScript 对象都会使用全局的 window 对象来存放未使用 var 定义的变量。这就会导致一个问题，那就是，最后调用的函…"}, {"id": "6844903586107916301", "title": "2018 CSS 大会多图见闻录", "desc": "CSS 之于前端有些像厦门之于 IT 界：耳熟能详却又略显小众。那么在厦门召开的第四届 CSS 大会是否能结合碰撞出新的火花呢？跟随着本兼职摄影师来看看吧~ 周六上午的巨幕影厅里，本届 CSS 大会正式拉开帷幕。在现在的前端圈技能树越点越多的大潮下，单单会写代码的前端或许已经不…"}, {"id": "6988793409083277342", "title": "边学边译JS工作机制--7.WebWorker和5个使用场景", "desc": "这次来看看WebWorker:我们会总览一下不同种类的worker，它们是如何搭配的，以及在不同的场景下表现出来的优缺点。最后，提供5个挑选合适woker的场景。 我们知道，虽然JS是单线程的，但是其"}, {"id": "6901094156932743176", "title": "AntV/G2Plot v2.0 技术架构思考", "desc": "首先自我介绍一下，我是蚂蚁大数据部门的前端，主要负责 DeepInsight 这个 BI 产品的数据分析能力，同时会做 AntV 统计图表 G2，G2Plot 的开发和迭代。 从 BI 的角度出发，我们可以理解一下这一张图。 数据可视化对于我们 BI 产品来说，非常重要，并且随…"}, {"id": "7000388284736077855", "title": "JS类型显示转换", "desc": "尽管JavaScript会自动执行许多类型转换，但有时可能需要执行显式转换。执行显式类型转换的最简单方法是使用Boolean()、Number()和String()函数"}, {"id": "6844903725442531341", "title": "[译] 在JS中，如何让(a===1 && a===2 && a === 3)(严格相等)的值为true？", "desc": "我们先简单了解\u001c这道JS经典问题, 然后再解决它的扩展问题。 如果你已经了解过这个问题并且知道如何解决这个JS谜题(是的，只是一个谜题，我并不想在生产代码中看到这样的用例) , 那你可以直接跳到下一节，阅读它的扩展问题。关于这个问题在reddit上有相关讨论， 下面是我看到最有…"}, {"id": "6980997547498471455", "title": "js代码整理(1)", "desc": "js代码整理 call apply bind new 模拟实现 防抖节流 promise curry compose pipe partial 发布订阅 EventEmitter & 观察者模式 Ob"}, {"id": "6997034215762214948", "title": "手动下载 puppeteer 所对应的 Chrome", "desc": "首先我们先创建一个文件夹，这里命名为：puppeteer-demo，进入文件夹内初始化项目，并安装 puppeteer-core，而不是 puppeteer 这个包。"}, {"id": "6844903592587952135", "title": "深入深入再深入 js 深拷贝对象", "desc": "对象是 JS 中基本类型之一，而且和原型链、数组等知识息息相关。不管是面试中，还是实际开发中我们都会碰见深拷贝对象的问题。 顾名思义，深拷贝就是完完整整的将一个对象从内存中拷贝一份出来。所以无论用什么办法，必然绕不开开辟一块新的内存空间。 1. 迭代递归法 这是最常规的方法，思…"}, {"id": "6994447285719564301", "title": "vue自定义指令", "desc": "自定义指令 有些情况下，你可能需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。也就是说，自定义指令是操作底层DOM元素的。"}, {"id": "6947490356728430605", "title": "JavaScript 怎样清空一个数组", "desc": "提到 JS 的数组，我们很快就会想到数组的各种 API，有用作插入删除的 push/pop/shift ，有用作高阶变换的 map/reduce/filter ，还有其他诸如 sort, concat, slice, indexOf 等等这些方法。但是数组却没有 clear 方…"}, {"id": "6844903920515416077", "title": "4 个 useState Hook 示例", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 到 React 16.8 目前为止，如果编写函数组件，然后遇到需要添加状态的情况，咱们就必须将组件转换为类组件。 编写 class Thing extends React.Component，将函数体复制到re…"}, {"id": "6913493585363599373", "title": "实现一个异步并发调度器", "desc": "笔者字节一面的时候遇到了下面这个面试题：当时由于紧张和经验不够，一下子卡壳了，没能及时做出来（痛哭）回来后好好想了一下，有了以下的思路：首先用一个maxCount记录允许并发的数量，用一个tasks数"}, {"id": "6987307832538300424", "title": "JavaScript 中 的 Event Loop「译文」", "desc": "在本文中，我们将深入探讨 javascript 的工作原理，它如何执行我们的异步 javascript 代码，`Promise` 与 `setTimeout` 的执行顺序，它如何生成堆栈跟踪等等。"}, {"id": "6956087336090206222", "title": "JavaScript 究竟是“这”还是“这”（详解 this ）？？？ ", "desc": "如果你有其他语言的开发经验并未对JavaScript 进行深入了解，也许会认为两者中的 this 相差无几…… 好吧！不管你是不是，文章已写，求你看还不行 🤣？"}, {"id": "6984215082532093965", "title": "VUE3（十七）使用reactive ref 替代VUEX状态管理", "desc": "之前在使用VUE2的时候有用到VUEX状态管理系统。 我用的比较多的地方是子父组件传值，或者爷孙组件传值。就是共享状态。 VUEX在我这里的作用主要还是为了简化组件中的代码的复杂度。所用的值使用VUE"}, {"id": "6991010698197205005", "title": "|、&、^、~位运算神算法", "desc": "二进制 整数转二进制 关于十进制整数转二进制，其实很简单，记住一个秘诀，就可以了 就是用 2 整除十进制数，得到商和余数，再用 2 整除商，得到新的商和余数，一直重复直至商等于 0，将先得到的余数作为"}, {"id": "6844903567808004103", "title": "与Promise血脉相连的async/await", "desc": "在我们处理异步的时候，比起回调函数，Promise的then方法会显得较为简洁和清晰，但是在处理多个彼此之间相互依赖的请求的时候，就会显的有些累赘。这时候，用async和await更加优雅，后面会详情说明。 async/await使用规则三：await后面需要跟Promise对…"}, {"id": "6844903849858170888", "title": "代码注释的艺术，再也不怕被说代码可读性差啦！", "desc": "可能现在不管大家去面试还是在公司上班都会涉及到代码可读性，或者是代码规范。优秀的代码注释可以提高代码可读性，当然优秀的命名规范也可以啦。我们这里就讨论一下代码注释。代码注释可能就相当于产品使用说明书，当别人看到你的代码的时候，知道你的代码是干嘛的，是怎么使用的。我们所熟悉的可能…"}, {"id": "6850418108193390599", "title": "我不知道还可以用 JS 做的 6 件事", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS 是一种灵活的语言，这种特性让我们经常觉得它是一门最简单的语言，也是最难掌握的语言。 我使用 JavaScript 已有很多年了，但我仍然偶然发现一些我不知道的隐藏语法或技巧。 我们来一直看看，我发现了哪些…"}, {"id": "6844903858645237767", "title": "【Step-By-Step】高频面试题深入解析 / 周刊02", "desc": "6. 节流(throttle)函数的作用是什么？有哪些应用场景，请实现一个节流函数。(2019-05-27) 节流函数的作用是规定一个单位时间，在这个单位时间内最多只能触发一次函数执行，如果这个单位时间内多次触发函数，只能有一次生效。 举例说明：小明的妈妈和小明约定好，如果小明…"}, {"id": "6984678359275929637", "title": "一文搞懂JS原型与原型链（超详细，建议收藏）", "desc": "前言 作为一个前端开发工程师，熟练掌握JS这门语言是必须要的。无论是日常的工作中，亦或者是出去面试找工作，JS掌握的多深多好，很大程度上决定了你能走的多远。今天本人就来介绍一下JS的原型以及原型链，基"}, {"id": "6850037281110589454", "title": "export导出的是变量！！！是变量！！！", "desc": "首先，建议仔细看看es6 入门的 module 语法。 使用 export default 时，对应的 import 语句不需要使用大括号。 使用 export 时，对应的 import 语句需要使用大括号。 项目里请求的接口很多，放在一个文件里太长，也难以维护，一般会以功能模…"}, {"id": "6844903556265279502", "title": " 简单了解JavaScript垃圾回收机制", "desc": "先科普一下：内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。 抱歉，我理解能力有限，不明白“离开标记”是什么，“然后去掉”是什么时候去掉的，具体怎么触发的还是自动运行…"}, {"id": "6967171082058989599", "title": "JavaScript——原型和原型链", "desc": "JS 中的面向对象，围绕原型和原型链知识展开。而在面试中，也会时常问到关于原型和原型链的问题，本文会让你了解原型、原型链以及教你遇到此类题时如何思考，相信今天这一篇文章能让你在面对这一类问题的时候"}, {"id": "6844904030636867597", "title": "一个前端写的接口mock平台", "desc": "现在很多公司都讲求前后端分离开发。 这可能会存在一个问题， 后端接口还没写好， 咱们🐂🐂的前端同学已经把前端写完了， 急等接口调试。为了解决这个问题， 写了个前端接口mock的平台， 项目开发时间不长，思路也不尽清晰，大佬轻喷。 一个接口请求包含了请求行， 请求头， 请求内…"}, {"id": "6996240950850748424", "title": "排序算法——冒泡、选择、插入排序", "desc": "排序算法——简单排序 一、 冒泡排序 冒泡排序的实现 二、选择排序，选择排序改进了冒泡排序，三、插入排序 插入排序是简单排序中效率最高的，"}, {"id": "6844903686729285646", "title": "js骚操作骂人不带脏", "desc": "很多小伙伴们觉得javaScript很简单,下面的这行 javaScript代码可能会让你怀疑人生。 小伙伴们学会了，以后遇到一些讲不通道理,让你不开森的人就把这段代码发给他。 运算符用红色标出，有一点可能大家会意识不到，其实中括号[]也是一个运算符，用来通过索引访问数组项，另…"}, {"id": "6973865450648109069", "title": "Javascript客户端存储技术你知道多少？", "desc": "这是我参与更文挑战的第四天，活动详情查看： 更文挑战 客户端存储技术 为了提升用户的体验感，直接在客户端存储用户信息的需求也随之增加。无论是实现自动登录，个人偏好，换肤功能等，都能使用客户端存储来实现"}, {"id": "6844903569095655437", "title": "2018春节后前端面试小记", "desc": "唉，我还是前端小渣渣一个。 是一家云服务产品公司，面试流程也比较简单，前端负责人拿了一块白板和记号笔，心想一会要手写代码了。。。。 不过这种面试方式还是不错的。 去之前以为自己准备的差不多，其实准备的远远不够充足啊。 一开始一般会让你进行一个简单的自我介绍，我就主要说了一下上家…"}, {"id": "6999632018812174344", "title": "JavaScript 深拷贝浅拷贝", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 1. 数据类型  数据分为基本的数据类型(String, Number, boolean, Null, Undefined)和引用数据类型"}, {"id": "6992417388545179656", "title": "HTML、CSS、JavaScript 总结", "desc": "1、开发技巧2、常见问题2.1、分割线标签、文字居中、背景图片充满全图2.2、HTML如何引入外部JS文件2.3、HTML中 块级元素 如何转为 行内元素??2.4、怎么在字的中间加一条横线表示这些字被划掉了，用css。2.5、用a标签在当前网页跳转和打开新页面再跳转2.6、锚点..."}, {"id": "6985352993793114120", "title": "js 数组", "desc": "定义 任何类型的数据，都可以放入数组。如果数组的元素还是数组，就形成了多维数组。 数组的本质 本质上，数组属于一种特殊的对象。typeof运算符会返回数组的类型是object。 数组的特殊性体现在，它"}, {"id": "6974577634210480165", "title": "数据结构之双向链表（一）", "desc": "这是我参与更文挑战的第17天，活动详情查看：更文挑战 什么是双向链表 双向链表和普通链表的区别在于，在链表中， 一个节点只有链向下一个节点的链接；而在双向链表中，链接是双向的。"}, {"id": "6948717243861729294", "title": "面试题 | js中的‘&&’、‘||’、‘!!’、‘==‘’和‘===‘’运算符", "desc": "进行布尔值的且和或的运算。当运算到某一个变量就得出最终结果之后，就返回哪个变量。&#x26;&#x26;运算符优先级大于||。 &#x26;&#x26;可以叫逻辑与，在其操作数中找到第一个虚值表达式并返回它，如果没有找到任何虚值表达式，则返回最后一个真值表达式。它采用短路来防止…"}, {"id": "6844903917835436045", "title": "Object.create()、new Object()和{}的区别", "desc": "平时代码中必定会使用对象，通常是用最直接的字面量方法创建var obj = {}，最近在整理JS继承方式时遇到Object.create()也可以创建对象，另外，也可以用new Object()关键字创建。 这样一比较，其实字面量创建和new关键字创建并没有区别，创建的新对象的…"}, {"id": "6894506478644756487", "title": "高仿一个echarts饼图", "desc": "饼图，很常见的一种图表，使用任何一个图表库都能轻松的渲染出来，但是，我司的交互想法千奇百怪，布局捉摸不透，本身饼图是没啥可变的，但是配套的图例千变万化，翻遍ECharts配置文档都还原不出来，那么有两条路可以选，一是跟交互说实现不了，说服交互按图表库的布局来，但是一般交互可能会…"}, {"id": "6844904192247595022", "title": "聊聊NPM镜像那些险象环生的坑", "desc": "由于国内网络环境的原因，在执行npm i安装项目依赖过程中，肯定会遇上安装过慢或安装失败的情况。有经验的同学通常会在安装完Node时顺便把NPM镜像设置成国内的淘宝镜像。 这样就能爽歪歪应付大部分npm i的安装情况了。当然，这只是解决了大部分的安装过慢或安装失败的情况，随着项…"}, {"id": "6970299484349661197", "title": "Web History Api 记录", "desc": "一、 常用方法 1.1 history.back() 在 history 中向后跳转，和点击浏览器回退按钮的效果相同。 1.2 history.forward() 在 history 中向前跳转，和点"}, {"id": "6844903545599164423", "title": "ES6中的代理模式-----Proxy", "desc": "简单来说:Proxy对象就是可以让你去对JavaScript中的一切合法对象的基本操作进行自定义.然后用你自定义的操作去覆盖其对象的基本操作.也就是当一个对象去执行一个基本操作时,其执行的过程和结果是你自定义的,而不是对象的. 😓好吧,用文字表达可能太复杂了.我们还是直接上代…"}, {"id": "6844903801590120462", "title": "图片懒加载的前世今生", "desc": "通常情况下，HTML 中的图片资源会自上而下依次加载，而部分图片只有在用户向下滚动页面的场景下才能被看见，否则这部分图片的流量就白白浪费了。 所以，对于那些含有大量图片资源的网站，会采用“按需加载”的方式，也就是当图片资源出现在视口区域内，才会被加载，这样可能会影响一丢丢用户体…"}, {"id": "6844903568906911752", "title": "位运算符在JS中的妙用", "desc": "1. 按位与(AND) & &以特定的方式组合操作二进制数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。 2. 按位或(OR) | | 运算符跟 & 的区别在于如果对应的位中任一个操作数为1 那么结果就是1。 3. 按位异或(XOR) ^ …"}, {"id": "6854573217349107725", "title": "【笔记】可食用的react hook防抖及节流 | 拿走不谢🙈🙈🙈", "desc": "防抖（debounce）和节流（throttle）是前端经常用到的工具函数。 在进行窗口的resize、scroll，输入框内容校验等操作时，如果事件处理函数调用的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（…"}, {"id": "6999796318298177549", "title": "第6周第1节2-12判断自然数的奇偶性", "desc": "2-12 判断自然数是奇数还是偶数 题目要求 代码实现 题目难点 判断整数的几种方法总结 1. 使用模运算 2. 使用Math方法：round，floor，ceil 3. 使用Number方法"}, {"id": "6999798599945027592", "title": "前端基础知识库-事件循环", "desc": "前言 众所周知JavaScript是个单线程的语言，但是为了能更快更好的处理程序，JavaScript有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。这个模型"}, {"id": "6844903640344297485", "title": "小程序开发技巧总结", "desc": "最近公司要开发一款电商小程序，匆忙看了一遍文档就开始干活了。整体开发体验个人感觉不太好，特别是如果之前习惯了Vue开发，突然去开发小程序，感觉很鸡肋。以下是我在开发中遇到的一些问题以及解决方法的总结，仅供参考 小程序中的按钮功能强大，很多功能必须要用按钮，比如弹出用户授权，调用…"}, {"id": "6844903814374359053", "title": "滑动穿透(锁body)终极探索", "desc": "当页面出现浮层的时候，滑动浮层的内容，正常情况下预期应该是浮层下边的内容不会滚动；然而事实并非如此。 如图所示，浮层下边的内容并没有如想象中不受影响。 查源码发现该包在iOS端使用禁止touchmove的方式单独处理，但是在其他端只是给body加overflow: hidden…"}, {"id": "6844903624066203661", "title": "鹅厂视频部笔试及面试问题整理", "desc": "最近有小伙伴在群上和后台私信我说想要点面经，今天给大家整理了一下真实面试问题。 至于笔试题，直接在公众号后台回复「腾讯视频笔试题」即可，整理压缩成图片了。 还有想要系统性学习 JavaScript 的童鞋，直接在公众号后台回复「js学习路线」，也整理成图片方便大家保存阅读了。 …"}, {"id": "6997361645181730852", "title": "JavaScript导入csv", "desc": "第三方库 可以使用第三方插件库sheetjs,具体实现如下： 先使用FileReader对象的readAsText方法读取csv文件，再为text文件添加\\ufeff前缀（UTF-8 BOM标识）,使"}, {"id": "6975117746883264519", "title": "数据结构之双向链表（二）", "desc": "这是我参与更文挑战的第18天，活动详情查看：更文挑战 从任意位置移除元素 接下来，我们来实现removeAt方法 上述代码中： 我们首先判断了边界值，如果越界直接返回null，表示没有移除任何元素。 "}, {"id": "6953774253389021191", "title": "从页面 A 打开一个新页面 B，B 页面关闭（包括意外崩溃），如何通知 A 页面？", "desc": "本题是 html 页面通信题，可以拆分成： - A 页面打开 B 页面，A、B 页面通信方式？ - B 页面正常关闭，如何通知 A 页面？ - B 页面意外崩溃，又该如何通知 A 页面？ ###"}, {"id": "6952026101648457759", "title": "手写Promise，通过Promise/A+的872个测试", "desc": "Promise的声明当我们使用Promise的时候，通常都是new Promise((resolve, reject) => {})。因此我们可以看出：Promise是一个类；Promise类的构造函"}, {"id": "6844903604906639373", "title": "网上看到的“12个非常有用的JavaScript技巧”", "desc": "记录一下，自己以后可能用的到。 网上看到的。 有时，我们需要检查一些变量是否存在，或者它是否具有有效值，从而将它们的值视为true。对于做这样的检查，你可以使用!!（双重否定运算符），它能自动将任何类型的数据转换为布尔值，只有这些变量才会返回false：0，null，\"\"，un…"}, {"id": "6919444777247178765", "title": "我写了个能一键下载掘金、CSDN、开源中国、博客园文章的浏览器插件", "desc": "之前写了一篇文章我写了个能一键下载掘金文章的浏览器插件，后来我又将目光转向了CSDN，由于历史原因，我早期一些文章是在CSDN写的，虽然以前的文章更不咋滴，但毕竟都是我自己写的，也算是一个印记，所以也"}, {"id": "6951445114422034440", "title": "浅谈 JS 里 一句代码是怎么运行的及其编译原理", "desc": "浅谈 JS 里 一句代码是怎么运行的及其编译原理用第一性原理来推导出来前言可能有很多小伙伴在JS代码运行中只知道一些基本的，像代码是逐行运行的、分为编译阶段和执行阶段。当问到代码是怎么运行的 和 JS"}, {"id": "6871478190037336078", "title": "Egg.js试水 - 文章增删改查【前后端分离】", "desc": "上一篇文章讲的是后端渲染的项目 - Egg.js 试水 - 天气预报。但是没有引入数据库。这次的试水项目是文章的增删改查，将数据库引进，并且实现前后端分离。 项目的github地址是egg-demo/article-project。 因为是前后端分离的项目，那么我们就以文件夹c…"}, {"id": "6983656694391930910", "title": "JavaScript变量声明及数据类型", "desc": "俗话说好记性不如烂烂笔头，之前也阅读了大量的文章，不过终是记不住，借此机会按照自己的习惯整理一下。一方面是梳理知识，另一方面也是记录一下碰到的坑。 如果这片文章对你有帮助，请点个👍哦，也欢迎多多交流"}, {"id": "6844903681096155143", "title": "Vue+Koa+Mongodb 小练习", "desc": "前段时间用vue+koa+mongodb搭建了一个个人博客，因为是第一次写前后交互，发现有很多地方不是特别的完善，同时代码对于新学者来说可读性也不是很大。所以这个小练习，从一个简单的方面入手，希望能给踩过同样多坑的同路人一点启发。 在我今年年初在学习vue以及koa的时候，网上…"}, {"id": "6996185736500215839", "title": "记一次树（tree）数据结构处理，项目遇到的问题", "desc": "需求1 左边的Tree树形控件与右边的Breadcrumb面包屑相结合(antd) 数据结构 解题思路 每次点击tree可得到具体的key，如：0-0-0-0 1、遍历树结构，存在children则递"}, {"id": "7001134059262836743", "title": "JavaScript 中的单例模式防止用户重复点击导致存储空间的资源浪费", "desc": "1.在日常的开发场景中，我们经常会使用开发用户点击触发元素的出现。 稍微用代码举个例子如下： 如果每次点击都这样显示元素的化，用户点击了n次,就相当于在用户本地浏览器产生了n个，不仅对用户的空间资源造"}, {"id": "6844903692987023373", "title": "基于 Webpack4 搭建 Vue 开发环境", "desc": "自从工作之后，就已经很久没有写过博客了。时间被分割得比较碎，积累了一段时间的学习成果，才写下了这篇博客。 之前有写过 Webpack4 的文章，但是都比较偏入门，唯一的一篇实战篇 —— 基于Webpack搭建React开发环境，也是比较简单的，没有涉及到 CSS 抽取，第三方库…"}, {"id": "6995135834584252452", "title": "JavaScript知识点回顾（十一）——this（一）", "desc": "这是我参与8月更文挑战的第十一天，活动详情查看：8月更文挑战 关于this this关键字是JavaScript中最复杂的机制之一。它是一个很特别的关键字，被自动的定义在所有的函数作用域之中。相信很多"}, {"id": "6858033898023682056", "title": "要深入 JavaScript，你需要掌握这 36 个概念", "desc": "你可能会经常听到一些人在抱怨 JS 很奇怪，有时甚至是一文不值。 之所以有这种想法，是因为他们不太了解 JS 背后的运作方式。 我也觉得 JS 在某些情况处理方式与其它语言不太一样，但这并不能怪它，它也只是以自己的方式展现给大家而已。 如果，你热爱一门编程语言，那么应该就会想深…"}, {"id": "6995456513225523208", "title": "es6基础笔记: this指向", "desc": "class中的this指向：\"this指向该方法运行时所在的环境\"，执行的该方法已经被挂载在新的实例对象上了，这时候执行的不再是原对象中方法，而是新的实例对象上的同名方法了"}, {"id": "6844903872155090952", "title": "【译】10 种 JavaScript 最常见的错误 ", "desc": "看了数千个项目后，发现了 10 个最常见的 JavaScript 错误。我们会告诉你什么原因导致了这些错误，以及如何防止这些错误发生。如果你能够避免落入这些 “陷阱”，你将会成为一个更好的开发者。 为了便于阅读，我们将每个错误描述都缩短了。接下来，让我们深入到每一个错误，来确定…"}, {"id": "6844903590968950797", "title": "轻松掌握移动端web开发【尺寸适配】常用解决方案", "desc": "本文主要针对初学移动端web开发的读者，笔者也是初学者，文中有众多用词不当之处望读者指正。 从开始做web app开发到现在，一直对移动端的尺寸适配有一种模糊的概念。能说得上来‘媒体查询’，‘栅格化布局’，‘流式布局’等若干技术名词和实现方式，但是每次自己做web app开发的…"}, {"id": "6961711638978232356", "title": "js - 作用域链", "desc": "作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。 当前代码运行的环境，可访问的变量以及作用域链上的变量环境对象。 "}, {"id": "6885945427011567630", "title": "原型与原型链这么看好像也不难", "desc": "1. 为什么 javaScript 设计为基于原型的模式 在以往的学习过程中，我们曾通过学习面向对象语言 java 了解到其有三大特性：封装、继承、多态。关于继承，java 与 javascript 其实两者并不完全一样。 那么 javascript 到底是如何设计出来的呢？早…"}, {"id": "7001662785025212446", "title": "JavaScript的装箱📦拆箱", "desc": "思考下面一个问题： 为什么num.attr赋值时，没有报错？为什么后面打印num.attr值为undefined？"}, {"id": "6844903614377361422", "title": "学习笔记——正则匹配校验方法", "desc": "1. 创建正则表达式（以下有两种方式来参考）： 这两种方式都可以来创建一个正则表达式，但是相对来说第二种方式更加常用一些。 m 多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开…"}, {"id": "6953221133646692360", "title": "震惊！小前端竟发现了 iOS 非 14.5 版本能遍历出不可枚举属性的 BUG", "desc": "结论 FYI： 以下说的 api-monitor 是一个库，引入这个库，可自动上报服务端接口的耗时、接口错误信息、错误码、HTTP 状态码等信息，用于监控接口质量。 在开始前，先看一段代码，问能不能进"}, {"id": "6866931666061885453", "title": "使用这种技巧，可以大大地提高前端布局效率", "desc": "在布局中，对于每块功能的 DOM 结构，我们一般使用一个带有 wrapper 类元素把它包裹起来，让代码或者网页内容更易于阅读。为此，我们一般使用wrapper 或者 container。在CSS 中使用wrapper可能有多种方式，这些方式中，有些会带来一些问题。 在本文中，…"}, {"id": "6999425585474699277", "title": "JavaScript知识点回顾（二十三）——LHS引用和RHS引用", "desc": "这是我参与8月更文挑战的第二十三天，活动详情查看：8月更文挑战 编译原理 JavaScript通常被归类为“动态”或“解释执行”语言，但事实上它是一门编译语言。"}, {"id": "6844903655041138702", "title": "前端面试&笔试&错题指南(三）", "desc": "Q1. 下面程序的输出结果是？ 分析下在method(fn,1)执行时，经历了什么： 首先两个参数fn和1会被放入arguments中，在arguments中第一个参数就是我们传入的函数；接下来fn执行，此时this没有绑定因此指向window，输出10。 然而到了argume…"}, {"id": "6844903560358920199", "title": "Vue封装Swiper实现图片轮播", "desc": "在实现封装之前，先介绍一下Swiper。 Swiper是纯Javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。 Swiper能实现触屏焦点图、触屏Tab切换、触屏多图切换等常用效果。 Swiper开源、免费、稳定、使用简单、功能强大，是架构移动终端网站的重要选…"}, {"id": "6925570260833665038", "title": "JS 中使用扩展运算符的10种方法，好家伙，点个赞呗！", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 我们可以使用展开操作符复制数组，不过要注意的是这是一个浅拷贝。 这样我们就可以复制一个基本的数组，注意，它不适用于多级数组或带有日期或函数的数组。 我们还可以通过…"}, {"id": "7004443051472977956", "title": "JavaScript-基本数据类型为什么可以调用方法？", "desc": "本文内容主要摘抄自JavaScript红宝书，在此copy过来作为自己的学习笔记，希望也可以帮助到大家。 一、基本包装类型 为了便于操作基本类型值，ECMAScript 还提供了 3 个特殊的引用类型"}, {"id": "6998315121944592397", "title": "【babylonjs】babylonjs实践（三）--灯光", "desc": "光源 4种Babylon.js中的光源（灯光）： 点光源（BABYLON.PointLight） 方向光（BABYLON.DirectionalLight） 聚光灯（BABYLON.SpotLight"}, {"id": "6844903687509245959", "title": "[译] 五个小技巧让你写出更好的 JavaScript 条件语句", "desc": "在使用 JavaScript 时，我们常常要写不少的条件语句。这里有五个小技巧，可以让你写出更干净、漂亮的条件语句。 1. 使用 Array.includes 来处理多重条件 乍一看，这么写似乎没什么大问题。然而，如果我们想要匹配更多的红色水果呢，比方说『樱桃』和『蔓越莓』？我…"}, {"id": "6844903511478697998", "title": "React源码解析(三):详解事务与更新队列", "desc": "在前两篇文章中，我们分析了React组件的实现，挂载以及生命周期的流程。在阅读源码的过程中，我们经常会看到诸如transaction和UpdateQueue这样的代码，这涉及到React中的两个概念：事务和更新队列。因为之前的文章对于这些我们一笔带过，所以本篇我们基于大家都再熟…"}, {"id": "6844903508773175310", "title": "10 个独特的 CSS 背景视觉效果", "desc": "10 个独特的 CSS 背景视觉效果"}, {"id": "6926695569247191054", "title": "ES2020新增的实用语法/API", "desc": "空值合并操作符（??）:是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。详细 ?. 可选链操作符( ?. ):允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。详细 globalThis…"}, {"id": "6844903693070909447", "title": "【webpack进阶】你真的掌握了loader么？- loader十问", "desc": "1. loader 十问 在我学习webpack loader的过程中，也阅读了网上很多相关文章，收获不少。但是大多都只介绍了loader的配置方式或者loader的编写方式，对其中参数、api及其他细节的介绍并不清晰。 也许你也会有类似的疑问。下面我会结合loader相关的部…"}, {"id": "6997780320137412644", "title": "扎实基础篇-----js如何实现一个new", "desc": "关于new的实现，在面试的时候经常会碰到，尤其是手写题会让你手动实现一个new，今天我们一起来聊一聊new是如何实现的呢？ new"}, {"id": "6844904193208287245", "title": "JavaScript中的Object.is()与\"===\"运算符总结", "desc": "主要问题是：什么时候使用 Object.is() 代替严格的相等性检查？让我们找出答案。 首先，让我们快速回顾一下严格的相等运算符是如何工作的。 当两个值的类型相同且持有相同的值时，严格相等检查运算符的计算结果为 true。 以上比较方案在 Object.is(valueA,v…"}, {"id": "6844904047279865869", "title": "全网最详bpmn.js教材-properties-panel篇(上)", "desc": "bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成. 因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找…"}, {"id": "6961014665329508382", "title": "async、await 实现原理", "desc": "由于 JavaScript 是单线程执行模型，因此必须支持异步编程才能提高运行效率。异步编程的语法目标是让异步过程写起来像同步过程。"}, {"id": "6876638765025067015", "title": "深入理解Chrome V8垃圾回收机制", "desc": "最近，项目进入维护期，基本没有什么需求，比较闲，这让我莫名的有了危机感，每天像是在混日子，感觉这像是在温水煮青蛙，已经毕业3年了，很怕自己到了5年经验的时候，能力却和3年经验的时候一样，没什么长进。于是开始整理自己的技术点，刚好查漏补缺，在收藏夹在翻出了一篇文章一名【合格】前端…"}, {"id": "6844903647151652871", "title": "Vue.js是如何做到数据响应的？", "desc": "许多前端JavaScript框架（例如Angular，React和Vue）都有自己的数据相应引擎。通过了解相应性及其工作原理，您可以提高开发技能并更有效地使用JavaScript框架。在视频和下面的文章中，我们构建了您在Vue源代码中看到的相同类型的Reactivity。 如果…"}, {"id": "6844904005764644878", "title": "1分钟快速排查内存泄漏", "desc": "内存泄漏的原因是指程序中己动态分配的堆内存由于某种原因未释放或无法释放,那么为什么没有释放呢(1.根据JS的垃圾回收机制，当内存中引用的次数为0的时候内存才会被回收,2.从根部出发触及到的对象被标记为"}, {"id": "6844903586623651854", "title": "2018 前端性能检查表", "desc": "众所周知，性能十分重要。然而，我们真的知道性能瓶颈具体在哪儿吗？是执行复杂的 JavaScript，下载缓慢的 Web 字体，巨大的图片，还是卡顿的渲染？研究摇树（Tree Shaking），作用域提升（Scope Hoisting），或是各种各样的与 Intersection…"}, {"id": "6909078234961281032", "title": "模块化历史演进", "desc": "ECMAScript2015当中为函数的形参列表扩展了一些非常有用的新语法，我们这里分别来看一下。 首先是参数的默认值，以前我们想要为函数中的参数去定义默认值我们需要在函数体中通过逻辑代码来实现，例如下面的foo函数有一个enable参数。如果我们需要他的默认值是true，这里…"}, {"id": "6907428111332147208", "title": "2020年我们可以在Node中使用ES Modules了吗", "desc": "不同时期的的 JS 发展，诞生了不同的模块化机制；近些年，随着前端模块化的标准落地，不同端的 JS 对此也都做了各自的实现。今天我们就来聊聊这个话题。 Node verison 13.2.0 起开始正式支持 ES Modules 特性。 根据 ESM 规范，使用 import …"}, {"id": "6844903697261002765", "title": "html2canvas-实现页面截图", "desc": "将DOM改写为canvas，然后利用canvas的toDataURL方法实现将DOM输出为包含图片展示的data url。 使用HtmlCanvas2实现。 使用rasterizeHTML.js实现。 (1)、利用DOM改写为canvas的方式：相当于完全重写了整个页面的布局样…"}, {"id": "6997974278389891086", "title": "JS的防抖和节流", "desc": "防抖（JS的事件多次触发，只执行最后一次） 节流（控制高频事件执行次数） input输入信息进行搜索，如果每敲一个字符就请求后台接口，给后台的压力太大了，所以做好防抖，即让程序只执行最后一次的事件"}, {"id": "6844904132210655245", "title": "你真的懂Promise吗", "desc": "在异步编程中，Promise 扮演了举足轻重的角色，比传统的解决方案（回调函数和事件）更合理和更强大。可能有些小伙伴会有这样的疑问：2020年了，怎么还在谈论Promise？事实上，有些朋友对于这个几乎每天都在打交道的“老朋友”，貌似全懂,但稍加深入就可能疑问百出，本文带大家深…"}, {"id": "6844903510685777933", "title": "实例感受-es6的常用语法和优越性", "desc": "前几天，用es6的语法重写了我的一个代码库，说是重写，其实改动的并不多，工作量不大。在重写完了的时候，就个人总结了一下es6常用的一些常用的语法和比es5优越的方面。下面提到的语法可能也就是es6新特性的10%-20%，但是开发上占了80%左右的。下面的文章，按照es6常用新特…"}, {"id": "6954380745871720462", "title": "欺骗词法 eval 和 with", "desc": "欺骗词法 eval() 如果说词法作用域完全由写代码期间函数所声明的位置来定义，怎样才能在运行时来修改（也可以说欺骗）词法作用域呢？ 词法作用域 什么叫做词法作用域？ 在编写代码时，将变量和作用域写在"}, {"id": "6985808225044004894", "title": "TypeScript 实战指南详解", "desc": "1.tsconfig.json 配置 相关配置选项 compilerOptions 编译选项是 TypeScript 配置的核心部分， 根据功能可以分为 6 个部分 项目选项 用于配置项目的运行时期望"}, {"id": "6844903646556078093", "title": "Vue-cli原理分析", "desc": "在平时工作中会有遇到许多以相同模板定制的小程序，因此想自己建立一个生成模板的脚手架工具，以模板为基础构建对应的小程序，而平时的小程序都是用mpvue框架来写的，因此首先先参考一下Vue-cli的原理。知道原理之后，再定制自己的模板脚手架肯定是事半功倍的。 在说代码之前我们首先回…"}, {"id": "7001769549456474148", "title": "JavaScript的琐事", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 用来获取一个元素的样式的，和 elemet.style 获取样式不同，element.style 只能获取到内联样式，而这个方法可以获取到"}, {"id": "6979812535557963784", "title": "JavaScript实现封装、继承、多态", "desc": "JavaScript实现封装、继承、多态 前景提要： 因为疫情原因，提前出来找工作实习，到今天差不多一年（Vue7个月、React三个多月），终于由前端实习生转变到一名前端工程师啦！！！哈哈哈 为了奖"}, {"id": "6844903779037347848", "title": "js 真的是一步一步手写promise", "desc": "前端异步一直是老生常谈，promise更是绕不过去的话题，那么除了会使用promise之外，能否尝试自己封装一个promise呢？网上关于这个的封装实现有很多，不过还是想一步一步的封装一下，就好比是玩游戏升级，直接给我一个满级号，不如自己升级乐趣大。 Promise是构造函数，…"}, {"id": "6950130551122559006", "title": "echarts 画动态水球", "desc": "前言在对一些需要存放液体的工厂进行开发基于物联网传感器的监控平台时，经常需要监控该蓄水池当前所处的容量占比为多少。以达到随时调整其蓄水量的目的。接下来我们看一下一些常见的水球项目。有这样的：这样的：甚"}, {"id": "6982522519232364557", "title": "你真的了解前端内存管理吗？—— 前端垃圾回收机制", "desc": "往往我们意识里觉得内存管理是后端的事情，单并非如此，前端也需要关注内存使用情况。前端关注内存，对于掌控前端性能有着很重要的作用。"}, {"id": "6960514069065531405", "title": "infernoJS源码分析：diff算法的优化", "desc": "本文主要通过阅读inferno的核心源码，了解其关于通过最长上升子序列优化diff DOM性能的原理。"}, {"id": "6924843625222258696", "title": "凹凸技术揭秘 · 技术精进与业务发展两不误", "desc": "回望凹凸实验室五年发展历程，从早期的纯业务支撑，再到工程化实践、开源探索，如今已在行业多个热门领域全面开花。我们打造了一系列有影响力的技术产品，构建了大规模的设计中台，在外部看来似乎有点不务正业，但实际上这些项目持续在公司内部为大量核心业务进行深度赋能，有力的支撑了业务的快速发…"}, {"id": "6920248887798136840", "title": "2020年，我第一次很正式地写年终总结", "desc": "好像我一直没有写年终总结的习惯，之前也一直都是看别人写年终总结。有时看别人的年终总结，会感叹别人这一年过的好充实。看了很多书，去了很多地方；或者结识了很多新的朋友，能力得到了很多的提高等等吧。也常常会感觉自己这一年好像没干什么事情，会有那么一点沮丧。 当我写这篇文章的时候，我突…"}, {"id": "7003134171337981983", "title": "js快速排序算法与应用", "desc": "```js function MySort( arr ) { // 交换函数 const swap = (x, y) => { let temp = arr[x]; arr[x] = arr[y]; "}, {"id": "7001488065180991495", "title": "【日拱一卒】JavaScript面向对象精要 六", "desc": "这是我参与8月更文挑战的第28天，活动详情查看： 8月更文挑战” 第六章 对象模式 私有成员和特权成员 对象属性不希望被外部篡改 模块模式（对象的私有属性） 模块模式：创建拥有私有数据的单件对象 实现"}, {"id": "6980540041068019720", "title": "cornerstone.js使用记录（二）", "desc": "利用cornerstone.js API做一些简单操作。凑字数，凑字数，凑字数，凑字数，凑字数，凑字数。"}, {"id": "6919275852173672456", "title": "一道“作用域”题引发的思考", "desc": "相信很多人都已经看过《你不知道的JavaScript》上卷这本书。我是在大三时看的这本书，这本书对我有思维上的冲击，第一次深入JavaScript语言内部。也由于当时我学JS不久，对书里很多知识都理解不透彻，比如下面这个在闭包章节中出现的例子: 书上的解释大概是这样的：每次迭代…"}, {"id": "6844903517652516871", "title": "一起炫起来 -- 3D粒子动画篇", "desc": "实现主要是基于threejs做的，接下来我会分别讲解各部分的实现，不过不会介绍基础。基础内容可以去官网找到~ scene的background可以接收Color、Texture或CubeTexture。在本示例中，我们使用Texture就可以达到渐变效果。Texture可以接收…"}, {"id": "6992205283741138975", "title": "如何在React项目中使用AntDesign？", "desc": "我们在后台管理系统React项目开发中会有Table表格、Form表单、List列表、Button按钮等组件，这个时候我们可以使用AntDesign来解决"}, {"id": "6844903736196726798", "title": "浅解强缓存和协商缓存", "desc": "Web 缓存是可以自动保存常见文档副本的 HTTP 设备。当 Web 请求抵达缓存时， 如果本地有“已缓存的”副本，就可以从本地存储设备而不是原始服务器中提取这 个文档。（此结论来自http权威指南） 缓存减少了冗余的数据传输，节省了你的网络费用。 缓存缓解了网络瓶颈的问题。不…"}, {"id": "6985415687355236382", "title": "重学JS之Generator函数", "desc": "一、概念 Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。 上面代码就是一个 Generator 函数。它不同于普通函数，是可以暂停执行的，所以函数名"}, {"id": "6997573688233033741", "title": "JavaScript基础（七）", "desc": "DOM 1. DOM 概述 我们在前面的文章中学习了 JavaScrip 语言的核心部分，也就是 ECMAScript，一般都是在控制条、输出语句或者 node 环境中运行。接下来我们开始学习 DOM"}, {"id": "6969110323005489182", "title": "除了疫情，广州最近还老下雨！给网页也来一场雨的洗礼吧", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 前言 最近广州疫情爆发，而且还老是下雨！ 但让人感动的是，很多很多人，不分昼夜，冒着大雨奔赴一线，风雨无阻的守护我们！ 想自己动手给网页来场雨的洗"}, {"id": "6982770579208142855", "title": "箭头函数心得", "desc": "箭头函数 箭头函数是匿名函数，语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造"}, {"id": "6953824821029371934", "title": "数组去重N种方式", "desc": "数组去重不管是面试还是平常业务都会经常遇到，一般同学见状都会嘴角微微上扬，反手就是一个嵌套循环，嘿嘿~深藏功与名.... 还有没有其它去重方式呢？今天来总结一下有哪些花里胡哨的去重方法！！！ 1、Se"}, {"id": "6844904064417792007", "title": "编写高质量箭头函数的5个最佳做法", "desc": "箭头功能值得流行。 它的语法简洁明了，使用词法绑定绑定 this，它非常适合作为回调。在本文中，通过了解决学习5个最佳实践，以便我们可以从中学习更多箭头函数的知识，并从它身上获得更多的好处。 1. 箭头函数名推断 JS 中的箭头函数是匿名(anonymous)的:函数的name…"}, {"id": "6998141293306052616", "title": "react的input防抖遇到的问题", "desc": "在react项目中使用的是antd的Input，要实现一个防抖的功能，但是遇到报错SyntheticEvent...，e.target为null。 事情的起因 最开始的时候被antd的Form组件文档"}, {"id": "6844904024441880589", "title": "前端 JavaScript 错误分析实践", "desc": "在平日的工作中前端 badjs 是一个比较常见的问题， badjs 除了我们自身业务 js 脚本里比较明显的报错外还有依赖其他资源的一些报错，对于自身业务 js 里出现的错误很容易进行定位并修复，但对于依赖资源的错误即常见的 script error （外部 js、接口错误）定…"}, {"id": "6976245672970289188", "title": "async/await的那些事", "desc": "这是我参与更文挑战的第21天，活动详情查看: 更文挑战 异步编程的最高境界，就是根本不用关心它是不是异步。 1， async async 使用在函数前面，把函数变成一个异步函数，返回promise对象"}, {"id": "6953541300268302372", "title": "浅拷贝和深拷贝浅析", "desc": "对于基本数据类型的数据，深拷贝和浅拷贝的结果一样，拷贝后的数据与原始数据没有关系。深拷贝与浅拷贝只针对于引用数据类型。"}, {"id": "6844904168046624781", "title": "关于reduce，我想说...", "desc": "reduce，这个高级函数，大家最开始应该是用于求和。我也是，仅仅在求和中遇到它。后来数组越来越复杂，想查找简单解决办法的时候发现了这个大杀器的更多使用。现在，它成为了我最爱的高阶函数，没有之一。reduce参数说明我就不多介绍了，下面主要是一些实战小技巧。 reduce替代 …"}, {"id": "6844903600444047368", "title": "回调地狱", "desc": "异步JavaScript或使用回调的JavaScript很难直观地得到正确的结果。很多代码最终看起来像这样： 回调地狱的原因是，当人们试图以一种从上到下的视觉方式执行JavaScript的方式编写JavaScript时。很多人犯这个错误！在C，Ruby或Python等其他语言中…"}, {"id": "6844903652482613262", "title": "js 面向对象总结", "desc": "1. 工厂模式：用函数来封装，以特定接口创建对象的细节 2. 构造函数模式： 3. 原型模式 可以给原生引用类型（Object、Array、String。。。）添加修改方法 4. 组合使用构造函数模式和原型模式：（定义引用类型的一种默认模式） 5. 动态原型模式： 6. 寄生构…"}, {"id": "6844904148597489678", "title": "如何防止自己的页面被别人利用iframe盗用(该页面本身需要被自己页面iframe嵌套)", "desc": "本来使用iframe嵌套在自己网页里的几个小图表（以下称“被套页”），被不良商家窃走，套在了他们的网页中。 由于被套页并没有做反盗用措施，且页面里的数据很重要，所以需要尝试一下反盗用。 目前上能查到的防止盗用的方法，很多的适应场景为页面本身不用于嵌套而做的，对于上述问题不太适用…"}, {"id": "6998795778378432548", "title": "vue3整体流程梳理(初次挂载)", "desc": "前言 vue3发布至今将近一年时间，一直没有使用的机会，公司使用的技术栈是vue2,因此做一下记录，希望能对大家有帮助，有不对的地方请指正，共同进步。 示例代码 createApp baseCreat"}, {"id": "6998796710646382628", "title": "【青训营】——《现代JavaScript教程》笔记", "desc": "为什么推荐使用外部引入 JavaScript 代码的方式？ 一般来说，只有最简单的脚本才嵌入到 HTML 中。更复杂的脚本存放在单独的文件中。使用独立文件的好处是浏览器会下载它，然后将它保存到浏览器的"}, {"id": "6844903877263753223", "title": "vue-router 源代码全流程分析「长文」", "desc": "以下内容均是依托 vue-router 2.0.0 版本展开分析。 此篇文章，是自己对 vue-router 实现分析的记录性文章，如有任何错误，欢迎指正，相互交流。 将 $router 和 $route 注入所有启用路由的子组件。 安装 <router-view> 和 <ro…"}, {"id": "6844903594232119310", "title": "这可能是你学习ES7遗漏的知识点", "desc": "小云终于得到了自己预期的结果，而且还发现了底数的前面不能紧跟一元运算符，即使是+也不行。 哇！终于可以摆脱那个令人讨厌的!== -1了。 难道这两个方法仅仅是在返回值上有区别吗？小云这次决定不再瞎折腾，直接移步ES7文档。 数个小时之后，小云要开始他的表演了。 以至于遇到上述情…"}, {"id": "6995514972897804302", "title": "JavaScript 内置对象 String 的常用方法", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 JavaScript 内置对象 String 的常用方法 创建字符串 var str = \"hello world\"; 获取字符串长度 s"}, {"id": "6844904191048024072", "title": "对 JavaScript 开发者非常有用的 10 个技巧", "desc": "你可能错过这些非常有用的技巧。 我们知道，JavaScript 这门语言正在高速发展中。伴随着 ES2020，又有很多很棒的功能加入。老实说，您可以通过许多不同的方式编写代码。实现同样一个功能，有的代码很长而有的却很短。你可以通过一些小技巧来让你的代码更干净清晰。下面这些小技巧…"}, {"id": "6847902223310487566", "title": "ES6常用但被忽略的方法（第十一弹Decorator）", "desc": "ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "6859182302979686414", "title": "模板引擎实现原理（Vue篇）", "desc": "这里面有 {{ message }}、v-if、v-on:click、v-for 等特殊的语法，Vue 需要把这些内容提取出来，转换成响应式的函数或者对应的 DOM 事件。 ... qname 是合法的 XML 标签，它的组成规则是 &#x3C;前缀:标签名称>，例如：&#x3…"}, {"id": "6844904020402765838", "title": "项目常用JS方法封装(二) [ 时间相关处理 ]", "desc": "持续更新中... 封装方法传送门： 项目常用JS方法封装(一) [ 大杂烩 ] 项目常用JS方法封装(三) [ 字符串相关处理 ] 项目常用JS方法封装(四) [ 数组相关处理 ] 使用方法非常简单，"}, {"id": "6992436326347997220", "title": "边学边译JS工作机制---19.自定义元素机制", "desc": "概览 之前我们讨论过web 组件这个大蓝图中的一部分，比如影子DOM。web组件标准的全部目标，是通过创建颗粒化，模块化和可复用的元素来扩展 HTML 内置功能。它虽然是W3C的新标准，但是主流的浏览"}, {"id": "7001489816311300104", "title": "js用递归实现数组转树状结构", "desc": "工作中前后端都需要将一个扁平的数组转换为嵌套的树状结构的数组，今天一起来看一看前端如何使用递归的方式实现吧~"}, {"id": "6989503779380920357", "title": "js 实现全局消息提示", "desc": "前言 之前项目中有使用Ant Design组件库进行开发，觉得message全局提示的功能挺有意思的，就花了点时研究了一下。支持五种提示，分别是success，error，info，warning，l"}, {"id": "6989167132248375326", "title": "JS处理并行请求的四种方式", "desc": "需求 两个异步请求同时发出，两个请求都返回时再做处理 实现 这里的方法仅提供思路，只做请求成功处理 方法一 使用Promise.all 方法二 自定义状态，在回调中判断返回状态，待2个请求都有返回值时"}, {"id": "6966029119918178335", "title": "剖析断言库 should.js 实现原理", "desc": "断言库是单元测试中必不可少的一环，本文带你剖析 BDD 风格断言库 should.js 的实现原理。"}, {"id": "6934242496365264903", "title": "【死磕JS】var、let、const 该怎么选？ ", "desc": "众所周知，在 Javascript 中就有 3 个关键字可以声明变量，分别是 var，let，const. var 在 ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript6 及更晚的版本中使用。 var 声明的变量，在函数作用…"}, {"id": "6844904197318508551", "title": "推荐11款开发中超实用的工具", "desc": "今天给大家推荐开发中几款常用的小工具，非常实用，大家请看完，总有一款是你喜欢的！。"}, {"id": "6998312188054077477", "title": "面向对象-原型链继承（下）", "desc": "昨天我们主要把继承的知识先告了一段落，今天我们主要搞搞练习，直接开搞。 面向对象-继承（上） 面向对象-继承（中） 一、原型链继承-"}, {"id": "7000068938658742308", "title": "集合引用类型之Array方法(二)", "desc": "常用的数组方法——转换方法【join】、操作方法【slice、splice】、排序方法【sort】、搜索和位置方法【indexOf、find】、迭代方法【map、filter】、归并方法等"}, {"id": "6984674137830588446", "title": "JavaScript保姆级教程 ——— 重难点详细解析（万字长文，建议收藏）", "desc": "1. JS函数2. JS事件3. JavaScript 对象4. JavaScript prototype（原型对象）5. call和apply及bind三者的区别（面试重点）6. Javascript的事件流模型（面试重点）7. 防抖与节流（面试精选）8. JS中的虚拟DOM是..."}, {"id": "6966850371037691911", "title": "ThingJS粒子特效一键实现雨雪效果", "desc": "1、粒子效果 2、加载场景 3、不同粒子效果实现 在做3D项目时，我们经常需要模拟下雨，下雪的天气，有时也会模拟喷泉、着火等效果。这些效果需要使用名为粒子系统(particle)的技术来实现。使用Th"}, {"id": "6986812032297205767", "title": "VUE3（二十二）vue-router 开启路由懒加载", "desc": "一、为什么要使用路由懒加载 为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题。 二、定义 懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载。 三、使用 常用的懒加载方式"}, {"id": "6844903651656499214", "title": "培训机构让Github的含金量降低了？", "desc": "这篇文章完全是有感而发，看了掘金的沸点了，又看到了知乎的一篇文章，就打算写下，说下自己的个人看法。 Github ，在程序员这个行业， 即使自己不活跃，都会有听说过的一个开源社区。近年来，越来越多的人拥抱开源，使得 Github 又火了一把。也有很多人把自己的得意之作放到上面去…"}, {"id": "6844903798347939853", "title": "高级前端基础-JavaScript抽象语法树AST", "desc": "Babel为当前最流行的代码JavaScript编译器了，其使用的JavaScript解析器为babel-parser，最初是从Acorn 项目fork出来的。Acorn 非常快，易于使用，并且针对非标准特性(以及那些未来的标准特性) 设计了一个基于插件的架构。本文主要介绍es…"}, {"id": "6997968835319955493", "title": " 进阶教程 10. 本地存储、http协议基础", "desc": "本地存储的定义、使用以及使用场景；HTTP协议、前后端交互模型、三次握手、四次挥手、HTTP协议报文、请求报文、响应报文..."}, {"id": "6844903901892706318", "title": "提升开发幸福感的10条JS技巧", "desc": "鱼头总结一些能够提高开发效率的JS技巧，这些技巧很实用，觉得挺好，想推荐给大家，所以有了这篇文章。 以上十个技巧都是我在日常开发中经常用到的一些代码片段，善用这些技巧，可以大大减少我们的开发时间。如果此时正在看文章的你也有类似的技巧心得，不妨在下方留言来分享给大家。 如果你喜欢…"}, {"id": "6992156674542796814", "title": "跨域的问题终于能解决了", "desc": "当前页面中的某个接口请求的地址和当前页面的地址如果协议、域名、端口其中有一项不同，就说该接口跨域了 同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个"}, {"id": "6844903663832399879", "title": "精读《高效 javascript》", "desc": "本期我来给大家推荐的书是《高性能JavaScript》,在这本书中我们能够了解 javascript 开发过程中的性能瓶颈,如何提升各方面的性能，包括代码的加载、运行、DOM交互、页面生存周期等。同样我们今天还是用思维导图的方式来精读一遍。（思维导图图片可能有点小，记得点开看，…"}, {"id": "6844903516775907341", "title": "vue快速入门的三个小实例", "desc": "用vue做项目也有一段时间了。但是关于vue入门基础的文章，我还没有写过，那么今天就写vue入门的三个小实例，这三个小实例是我刚接触vue的时候的练手作品，难度从很简单到简单，都是入门级的。希望能帮到大家更好的学习和了解vue，也是让自己能够复习一下vue。如果发现文章写得有什…"}, {"id": "6998902048531939341", "title": "javaScript上下文", "desc": "执行上下文有且只有三类，全局执行上下文，函数上下文，与eval上下文；由于eval一般不会使用 上下文的方式 全局执行上下文（只有一个，由浏览器创建，能够使用this访问它） 我们通过var创建的全局"}, {"id": "6978676862402691102", "title": "使用原生JS，实现鼠标点击爱心效果 ！！", "desc": "在很多时候我们都需要实现鼠标点击出现图案或者文字这样的效果，对于用户而言，这样的体验是很极致的。其实实现起来也很简单，下面一起来学习一下"}, {"id": "6974206338985361439", "title": "数据结构之链表（四）", "desc": "这是我参与更文挑战的第16天，活动详情查看：更文挑战 实现链表的其他方法 在之前的三节中我们已经了解到什么是链表，并且实现了链表的append方法，removeAt方法和insert方法"}, {"id": "6844903604738867214", "title": "微信小程序“反编译”实战（二）：源码还原", "desc": "在上一篇文章《微信小程序“反编译”实战（一）：解包》中，我们详细介绍了如何获取某一个小程序的 .wxapkg 包，以及分析了 .wxapkg 包的结构，最后通过脚本解压获取包中的文件：小程序“编译”后的代码文件和资源文件，但是由于这些文件大部分被混淆了，可读性很差，所以本文将进…"}, {"id": "6985142019605659656", "title": "通过js实现Vue2.0中数据的双向绑定 ", "desc": "该博客是暑期实训临时内容，使用原生js实现数据的双向绑定，实现Vue中v-model的功能，如果有问题，请评论提醒我，引入的部分会在结尾注明"}, {"id": "6891428422795395079", "title": "[核心概念] 一文说透 JS 中的闭包（closure）", "desc": "最好先了解 作用域【关联概念(强)】的概念。 其实说清楚它的定义，基本上就是这篇文章的核心了，定义可能需要根据整个文章去体会。 环境记录：一个存储所有局部变量作为其属性（包括一些其他信息，例如this的值）的对象。 对外部词法环境的引用，与外部代码相关联。 简单来说就是我在写代…"}, {"id": "6971062635013865486", "title": "Vue双向绑定中的发布-订阅模式究竟是什么", "desc": "发布订阅模式不管是在程序还是现实生活中都非常地常见，例如，过年或者节假日火车票买不到票时，购票软件会有一个候补下单的功能，用户可以向购票软件后台发出一个订阅请求..."}, {"id": "6844903701434335246", "title": "webpack4、Koa配置Vue服务器端渲染(SSR)", "desc": "从这段代码我们应该可以明白vue-server-renderer的作用是拿到vue实例并渲染成html结构，但它不仅仅只做着一件事，后面会介绍其他配置参数和配合webpack进行构建。 拿到html结构渲染到页面上是我们接下来要做的事情，这里官方事例用的是express搭建服务…"}, {"id": "6844903665203953672", "title": "深入理解 TypeScript", "desc": "正如你所见，TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以及可维护性；同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。 TypeScript Deep Dive 是一本很好的开源书，从基…"}, {"id": "6844903648804208654", "title": "你真的了解前端路由吗？", "desc": "hash：可能是大多数人了解的模式，主要是基于锚点的原理实现。简单易用 browser：即使用html5标准中的history api通过监听popstate事件来对dom进行操作。每次路由变化都会引起重定向 memory：这种实现是在内存中维护一个堆栈用于管理访问历史的方式，…"}, {"id": "6985451134035394574", "title": "javascript对象遍历的几种方式对比", "desc": "1 Object.keys(), Object.values(), Object.entries()系列 可遍历对象自身可枚举属性(不含以Symbol类型为key的属性，以下简称symbol属性)"}, {"id": "6844903812763746317", "title": "总结下 JavaScript 中的一些小技巧", "desc": "这篇文章主要记录一下平时自己实践得到的, 博客中学习的以及在一些项目源码中看到的 javascript 技巧。有些东西可以说是奇淫技巧，有些可能是 ES6+ 中一些比较具有实用性的新语法。 有时候我们需要在某个函数或变量为 true 时执行另外一个函数。例如: 本质上还是利用了…"}, {"id": "6925796809684025357", "title": "前端工程师必须知道的用javaScript刷新当前页面的3种方法", "desc": "效果图目录方法1：reload()方法方法2：replace()方法方法3：页面自动刷新方法1：reload()方法reload()方法用于刷新当前文档。类似于你浏览器上的刷新页面按钮。方法2：rep"}, {"id": "6846687598249771022", "title": "理解 Es6 中的 Symbol 类型", "desc": "在 Es6 中引入了一个新的基础数据类型:Symbol,对于其他基本数据类型(数字number,布尔boolean,null,undefined,字符串string)想必都比较熟悉,但是这个Symbol平时用得很少,甚至在实际开发中觉得没有什么卵用,能够涉及到的应用场景屈指可数…"}, {"id": "6844904083506069512", "title": "学习Javascript之节流和防抖", "desc": "总括: 本文通过实例介绍了什么是节流函数，什么是防抖函数。 社会犹如一条船，每个人都要有掌舵的准备。 节流函数和防抖函数相信很多人都在日常业务开发中使用过，其实不管是节流函数还是防抖函数都是一种简单的高阶函数，他们都是通过将一个关键的外部变量保存在外层作用域，通过对这个变量的判…"}, {"id": "6976253392708436004", "title": "聊聊JavaScript节流吧", "desc": "这是我参与更文挑战的第21天，活动详情查看： 更文挑战 什么是节流？ 想必大家对一个成员是不陌生的：开源节流，那么节流函数为什么叫节流呢？ 因为流量太大了，所以控制一下，隔一段时间放一些，隔一段时间放"}, {"id": "6844903668425162766", "title": "「译」一起探讨 JavaScript 的对象", "desc": "对象是多个属性的动态集合，它有一个链接着原型的隐藏属性（注：__proto__）。 一个属性拥有一个 key 和一个 value 。 属性的 key 是一个唯一的字符串。 访问属性有两种方式：点表示法和括号表示法。当使用点表示法，属性的 key 必须是有效的标识符。 访问一个不…"}, {"id": "6992884008203845668", "title": "js的undefined和null的区别（一）", "desc": "undefined来自哪里？ 什么情况下会得到undefined？ 以下情况： 声明了一个变量，但未对其初始化时，这个变量的值就是undefined； 对未定义的变量执行typeof操作符也会返回un"}, {"id": "6844903593011576845", "title": "原生JS 操作 DOM", "desc": "前端开发始终绕不过的就是操作DOM，在以前，我们使用Jquery，zepto等库来操作DOM，之后在vue，Angular，React等框架出现后，我们通过操作数据来控制DOM（绝大多数时候），越来越少的去直接操作DOM，更不用说用原生的JS来操作DOM了。 但是并不是所有时候…"}, {"id": "6844903602587172872", "title": "重构 - 设计API的扩展机制", "desc": "上篇文章，主要介绍了重构的一些概念和一些简单的实例。这一次，详细的说下项目中的一个重构场景--给API设计扩展机制。目的就是为了方便以后能灵活应对需求的改变。当然了，是否需要设计扩展性这个要看API的需求。如果大家有什么建议，欢迎评论留言。 这个可以说是JS里面最原的一个扩展。…"}, {"id": "6844903839544377357", "title": "前端模拟用户的复制操作", "desc": "用户在浏览网页的过程中，执行复制操作的场景是非常多的，例如：复制链接地址、复制分享文案等等。 而前端通过模拟用户的复制操作，可以减少操作的步骤，进而优化用户体验。 选中文本：对应用户通过鼠标或者触屏选中文本的操作。 操作系统剪贴板：对应用户按下 Ctrl（command） + …"}, {"id": "6994018065054695460", "title": "【JS从入门到精通】15-事件对象", "desc": "[TOC] 事件对象 1、事件对象 <前情提要> 事件对象 当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数 在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标、键"}, {"id": "7004699485406232590", "title": "总结ES6 扩展运算符...", "desc": "扩展运算符，即...运算符是es6新增的一个语法，其主要作用是将数组或对象进行展开(这种说法也许不太准确)，希望通过下面的总结能让你明白其使用方法。 个人的理解和总结使用场景如下： 1、替代apply"}, {"id": "6996572169383706661", "title": "你不知道的storage", "desc": "Storage 接口 概述 Storage 接口用于脚本在浏览器保存数据。两个对象部署了这个接口：window.sessionStorage和window.localStorage。 sessionS"}, {"id": "7006193726661853197", "title": "JavaScript系列 - 执行上下文", "desc": "本文讲述了 JavaScript 的执行上下文相关知识，主要有：执行上下文的创建过程、执行上下文参与的调用栈、执行上下文内部的变量环境和词法环境，以及他们是如何运作和相互配合的。"}, {"id": "7003223509312733192", "title": "基于Vue + fabric.js的图片标注组件搭建", "desc": "`fabric`是基于canvas进行的api封装，可以实现绘制矩形、圆、椭圆、文本等一些基础图形，同时支持画笔自定义图形，`fabric`的优点在于它对生成的canvas画布进行了良好的封装"}, {"id": "6997181976738267150", "title": "看了就会，保姆级带你一步步实现Promise的核心功能", "desc": "📚序言 众所周知， promise 是前端面试中雷打不动的面试题了，面试官都很爱考。周一之前也是知识比较浮于表面，在一些面经上看到了 promise 的实现方式，就只停留在那个层面上。但实际上我"}, {"id": "6873513007037546510", "title": "前端面试常见的手写功能", "desc": "1. 防抖 2. 节流 3. new 4. bind 5. call 6. apply 7. deepCopy 8. 事件总线 | 发布订阅模式 9. 柯里化：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数 10. es5 实现继承 11. instanceo…"}, {"id": "7006500106522329101", "title": "企业级单点登录如何实现？", "desc": "企业里也许会拥有多个一级域名，为了让用户使用体验更好，无需在每个站点都登录一遍，故产生了单点登录的需求。一个站点登录，其他站点同步登录状态，站点间跳转更加流畅。"}, {"id": "7007691485160144904", "title": "对beginPath()了解不深，导致在canvas中绘制图形时样式覆盖", "desc": "在绘制图形时，后面设置的图形样式（颜色、线宽等）覆盖了前面绘制图形的样式。通过研究，发现是对 canvas 绘制路径时的相关方法beginPath()了解不深导致的"}, {"id": "6999229094839713822", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（七）", "desc": "感激相遇 你好 我是阿ken 实际上，“new Object()”就是一种使用构造函数创建对象的方式，Object 就是构造函数的名称，但这种方式创建出来的是一个空对象。构造函数中的 this 表示新"}, {"id": "6992081986835726373", "title": "JS 的 Date API 到底是个什么阴间东西", "desc": "`Date` API 大家肯定都有用过，虽然更多时候关于日期的处理都交给了 dayjs 或者 moment。 但我们肯定免不了去直接使用原生 API，这时候你可能会免不了爆一句粗口「什么阴间玩意？」"}, {"id": "6932046455733485575", "title": "关于现代包管理器的深度思考——为什么现在我更推荐 pnpm 而不是 npm/yarn?", "desc": "这篇文章给大家分享一个业内一款出色的包管理器——pnpm。目前 GitHub 已经有 star 9.8k，现在已经相对成熟且稳定了。它由 npm/yarn 衍生而来，但却解决了 npm/yarn 内部潜在的 bug，并且极大了地优化了性能，扩展了使用场景。下面是本文的思维导图:…"}, {"id": "7006566424525144094", "title": "JS -- 正则表达式（RegExp）", "desc": "用来处理字符串的规则 只能处理字符串 它是一个规则：可以验证字符串是否符合某个规则（test），也可以把字符串中符合规则的内容捕获到（exec/match...） 编写正则表达式 创建方式有两种 正则"}, {"id": "6951558024540454925", "title": "VueConf 2021 抢先看，Evan You 和你聊聊 Vue 的未来", "desc": "Vue 目前有 158 万的周活跃用户（通过 devtools 插件来统计），940 万的月下载量。 今年会有什么大动作呢？尤雨溪带你了解一下！"}, {"id": "7000550959503917070", "title": "技术期刊 · 五等分の花嫁 | Vue 3.2 正式发布！;大型项目管理策略;开源社区运营就像种菜;阮一峰的 fetch 教程;Webpack5 学习的平凡之路", "desc": "提起「五等分の花嫁」大家伙儿会想起什么？我先来，三玖天下第一！！作为一部两年前的党争番，直至今日依然有很高的人气，这可能也是为什么尤大将它定为 Vue 3.2 版本的代号吧，没错 Vue 在这个月又…"}, {"id": "6908497610311467021", "title": "给在座各位“打工人”分享33款提高工作效率的vscode“实用插件”", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 在之前的给在座各位“老划水员”分享10款提高幸福指数的vscode“摸鱼神器”这篇文章发布之后，也收获了很多小伙伴的点赞，咱们也不能一天天光摸鱼，还是得干点正事。特此，我整理了一些好用的vscode插件，如果觉得不错，欢迎…"}, {"id": "7000734699735760927", "title": "前端干货 | 总结日常开发中常用的数组API", "desc": "本文总结了本人在日常项目开发过程中，涉及比较多的一些数组方法，将这些方法进行了总结。希望本文对你以后日常开发有更好的帮助！"}, {"id": "7005481006497005576", "title": "尝试运用window.print()实现打印功能", "desc": "尝试运用window.print()方法，实现在一页A4纸上打印完一个包含表格（带边框）的页面功能。"}, {"id": "6844903902299553806", "title": "前端进阶必备，github 优质资源整理分享！", "desc": "前端技术日新月异，随着 大前端 的趋势，想要成为一名合格的前端工程师，需要学习掌握的东西更是宽泛。所以我们在寻求进阶的过程中，既要不断夯实前端基础，也要快速响应技术的更新迭代。闲话少说，这次给大家整理分享一些前端进阶的优质学习资源，希望对大家有所帮助！ 0. 年度报告 1. 基…"}, {"id": "6995000516941971487", "title": "PPT居然可以用JS写！", "desc": "用 powerpoint 或者 keynote 写演示文稿，对于代码、数学公式等的支持一直是个痛点。而且对于前端同学来说，一身的 css 功力用不上也是个痛点。"}, {"id": "6966789229909114911", "title": "新时代创意布局不完全指南", "desc": "运用现有的 CSS 技术，我们是否可以大胆的跳出常规思维，不再局限于矩形框框一块一块，试着更加艺术一些？"}, {"id": "6844904201382789133", "title": "聊一聊闭包", "desc": "一开始学闭包的时候，囫囵吞枣😔,希望这次可以静下来好好琢磨琢磨,对闭包有更深的理解。 👆上面定义大概就是:闭包是指那些能够访问自由变量的函数。其中自由变量，指在函数中使用的，但既不是函数参数arguments也不是函数的局部变量的变量，其实就是另外一个函数作用域中的变量。 …"}, {"id": "7006217461934587940", "title": "基于jsPDF将DOM生成pdf文件", "desc": "使用jspdf将页面中的指定DOM内容绘制成PDF文件。并通过文件的方式传给后端开发。期间文件不落地。"}, {"id": "6994049916418916365", "title": "Proxy（新一代的属性代理）", "desc": "Proxy 简介 Proxy 翻译过来叫做代理，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函"}, {"id": "6989117264758833188", "title": "从零开始学习3D可视化之演示项目", "desc": "数字孪生可视化项目开发过程中的每个环节都很重要，都必须认真对待。数字孪生可视化场景开发完成后，进行分享或者演示已完成的项目是必不可少的。ThingJS提供三种方式供项目演示和分享已完成的项目：电脑分享"}, {"id": "6924910922460823560", "title": "从0到1: 实现一个虚拟 DOM（上）", "desc": "本文分上下两篇，实现一个基础版本的虚拟 DOM。 上篇首先介绍什么是虚拟 DOM、为什么要使用虚拟 DOM，其次完成项目创建、实现 h 函数、render 函数以及 mount 函数，完成创建虚拟 D"}, {"id": "6844904046650736653", "title": "【canvas】动画原理の胡克定律", "desc": "不知道你看到后有没有觉得很复杂，为了完成它，我大约用了一个小时左右。 本文会详细介绍一下实现的具体原理，研究明白后，动画的运动学基础应该也算是过关了吧。 1. 运动学一般原理 首先从运动动画的基本原理说起。 我们知道，根据 requestAnimationFrame 实时更新小…"}, {"id": "6997028948580237348", "title": "Nextjs学习笔记（二）", "desc": "这是Nextjs笔记的第三天，今天花时间研究了Nextjs里的API路由和链接组件，废话不多说，开撸。"}, {"id": "6969743910381813797", "title": "什么是继承？为何那么多种？一步步来！", "desc": "继承是 JavaScript 的重要概念。尽管 ES6 提供了的 class 关键字来快速定义类并轻松实现类的继承。但了解继承的不同实现方式及分析原因是深入了解 JavaScript 的很好方式"}, {"id": "6997248539239645191", "title": "【babylonjs】babylonjs实践（二）--相机", "desc": "理论 camera UniversalCamera 这里介绍的Babylon.js中的通用相机，可以通过使用键盘、鼠标、触摸板、游戏手柄输入控制。它延伸和替代了仍然可以使用的自由相机（Free Cam"}, {"id": "6998043302218088462", "title": "JavaScript必备基础-作用域作用域链详解", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 作用域作用域链 [[scopel]: 作用域链: 运行期上下文:AO 查找变量:从作用域链的顶端依次向下查找。 我们来举例讨论一下吧 在a"}, {"id": "6992553038531706888", "title": "来来来，学了不吃亏，async await 了解一哈，撒", "desc": "话不多说，直接开干。。。 什么是 async 函数 很简单，像下面👇这样，普通函数前面加个 async 关键字，就是 async函数了。 怎么样，看到这是不是已经准备默默的开始鄙视😒了，就这。。。 看"}, {"id": "6854573211397390350", "title": "前端知识体系(4)-js手写函数篇", "desc": "当需要创建多个对象的时候，如果循环会「重复创建」很多变量，占用内存。 如果用new生成，那么里面重复的属性是在「原型」上，就不用占用内存。 节省代码，属于语法糖，可以拥有使用构造函数里面的所有「属性和方法」，并且还可以「拓展」。 判断构造函数的返回值，如果是对象，直接返回这个值…"}, {"id": "6973302910172004366", "title": "有趣的JavaScript：隐式类型转换规则整理", "desc": "系统性的总结概括介绍JavaScript中的隐式类型转换规则，包含比较运算符，四则运算，引用类型向值类型转换等内容"}, {"id": "6844903556802150413", "title": "记Chrome的性能分析工具实践", "desc": "事情的起因是我们WMS系统内有一个批量打印的功能，今天仓库反应第一次打印的速度大概是2s，但是之后每次都越来越慢，到后面页面基本就直接卡死了。 从这个表现来看，这个问题基本可以定位成性能问题，而不是可以被try...catch到的异常。 一行行review这部分相关的代码，co…"}, {"id": "6865870226534514695", "title": "【译】6种方式秀出你的代码", "desc": "作为开发人员，我们总有时候需要分享一些代码片段。例如：在掘金上发文，发个人博客等。（原文为发Twitter） codeimg.io内置一堆社交媒体模板，不需要考虑尺寸问题，相比carbon.now.sh，codeimg.io有更多的配置。 如果你喜欢极简主义，只是想把代码作为一…"}, {"id": "6844903848394375182", "title": "细说JS异步发展历程", "desc": "所谓同步，就是在发出一个\"调用\"时，在没有得到结果之前，该“调用”就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由“调用者”主动等待这个“调用”的结果。此调用执行完之前，阻塞之后的代码执行。 \"调用\"在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一…"}, {"id": "6844903630894546951", "title": "2018年6月前端面试经历(上)", "desc": "坐标：杭州 。自己从事前端工作差不多2年，本人不是科班出身，算是一个小菜鸡到现在刚入门吧。2年前去面试，因为技术菜，其实公司并没有怎么去了解我的技术，主要还是看个人的态度和学习能力，所以很感谢前面的俩个老东家，把我这个小菜鸡带入门了。今年，在上一个东家做的项目差不多也成型了，发…"}, {"id": "6907479093101461512", "title": "如何利用Qrcode制作一个二维码生成器?", "desc": "玲琅满目的二维码在我们的都市和朋友圈中随处可见, 很多平台都提供了定制二维码的服务, 那么作为一名程序员, 我们如何自己实现一个简单的二维码生成器呢? 接下来笔者就来带大家一起利用Qrcode实现一个二维码生成器. 笔者不会介绍二维码的详细实现原理, 因为相关文章很多, 我们从…"}, {"id": "6844903703099490317", "title": "一个前端工程师看完《代码大全》后的二三总结", "desc": "题记： 书中自有黄金屋，书中自有颜如玉。 就好像 one piece ，等待着我们去发现，找到。不是所有的地方都有 one piece (书的每一章每一页)，也许在某处，有一段耐人寻味的话，等待着我们去发现。一些人可能错过了，一些人可能找到了，这也许就是读书的魅力吧\b。 读了很…"}, {"id": "6844904150728343566", "title": "vscode-yapi-接口文档高效工具", "desc": "之前 vscode-yapi 插件发布的时候，显得有些仓促，文档也都没有，给使用者造成了一些困惑，现在把文档补上了，按我之前的意愿实现了大部分功能，今天正好重新分享一下。 首先在这里非常感谢yapi团队对openapi的支持，才有了今天vscode-yapi的出现。其实我刚开始…"}, {"id": "7004827504896638990", "title": "Javascript基础之 数据类型（number，string）", "desc": "javascript基础 数据类型（一） 原始类型的方法 数字类型的常用方法 字符串的常用方法"}, {"id": "6844903612758360072", "title": "【面试】社招中级前端笔试面试题总结-答案及拓展", "desc": "这道题的答案是：2、4、1、1、2、3、3。 cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下 sessionStorage和localSto…"}, {"id": "7004737067863244830", "title": "JavaScript 数组方法", "desc": "JavaScript 数组方法,增加，删除，替换，合并，连接。 js数组方法合集，前端数组操作，方法。"}, {"id": "6844903863183491086", "title": "前端实现axios以表单方式上传文件，优化上传速度", "desc": "最近在开发过程中，遇到的需要是需要上传高清图片，必须原图上传。由于在移动端应用，上传网络问题有很大的坑。当初的方案是直接采用将文件转化为base64，再进行上传，由于文件转化为base64后，文件大小会增加30%。又导致上传压力，影响用户体验。最终采取了以formData形式进…"}, {"id": "6955001424908386334", "title": "武功秘籍之动态规划——leetcode 常用刷题方法之一💪", "desc": "前言： leetcode刷题是实力的一种表现。作为刚刷十几题的小白来讲，是真的刷不动。每刷一题，就得花一两个小时（毕竟真的没有天赋），所以掌握刷题技巧是很有必要的。我最近从我同学那得到一武林绝学———"}, {"id": "6991297904338010120", "title": "浅谈JavaScript中的作用域｜8月更文挑战", "desc": "在我们实际编写代码的过程中，总有需要一个独立环境运行代码的需求，我们并不想当前的代码影响了其他的变量，也不想当前的环境内对外部变量依赖过多，导致迁移不方便。为了解决这个问题，作用域诞生了"}, {"id": "6844903785731457032", "title": "Web聊天工具的富文本输入框", "desc": "最近折腾 Websocket，打算开发一个聊天室应用练练手。在应用开发的过程中发现可以插入 emoji ，粘贴图片的富文本输入框其实蕴含着许多有趣的知识，于是便打算记录下来和大家分享。 是不是觉得很神奇？接下来我会一步步讲解这里面的功能都是如何实现的。 传统的输入框都是使用 <…"}, {"id": "6942697803709677582", "title": "你不得不懂的 JS this 指向", "desc": "执行函数前有 '.' 点操作符的话，函数体中的 this 就指向前面的对象，没有就指向 window，严格模式下指向 undefined。这句话特别的重要，请记住 函数没有直接调用者 this 指向全局对象(浏览器中是window，node中是 global)。如匿名函数等 构…"}, {"id": "6998530841387204645", "title": "扎实基础篇-----js中数组扁平化", "desc": "数组扁平化的含义，就是将一个多维数组转化为一个一维数组。emm，解释有点苍白，看一个例子🌰 ```js const arr = [1, [2, 3], 4]; const flatArr = [1,"}, {"id": "6844903573428371464", "title": "JS中的箭头函数与this", "desc": "在ES6语法之前，JS中的函数由function关键字、params参数和被花括号包裹的函数体组成。为了与后面说到的箭头函数相区别，我们先把这样的函数叫做常规函数，常规函数既可以用声明式写法也可以用赋值式写法。例子： 2. 箭头函数的写法 ES6箭头函数的引入，使函数的写法变的…"}, {"id": "6844903972008886279", "title": "Promise 链式调用顺序引发的思考", "desc": "同上，取出这个额外的任务并执行，此时紫框的 promise 才算被 resolve。一旦紫框的 promise 被 resolve，之前注册的红框 promise 的回调就会被推入微任务队列"}, {"id": "6984310455892181006", "title": "动画中的三角学", "desc": "本文将讲述一些 canvas 动画绘图中三角学的应用，其中包括： 三角函数 旋转 波形 圆与椭圆 勾股定理 两点间距离 角 弧度与角度。这些是开始 canvas 绘图的基础。"}, {"id": "7001123385090506766", "title": "为什么字符串'abc'可以调用length属性？", "desc": "为什么字符串'abc'可以调用length属性？字符串`'abc'`本身不是一个对象，为什么可以用点`.`运算符来调用`length`?"}, {"id": "7001712043736711199", "title": "谈谈 JS 模块系统的实现", "desc": "前言 推荐先看看前面两篇文章 关于模块化，你是否还有很多问号❓❓❓ JS模块化规范之 CommonJS & AMD & ES6 本篇将讲讲 JS 模块系统的实现，内容包括 Node.js、Webpac"}, {"id": "6991783572801585182", "title": "聊聊 ES6 解构 | 8月更文挑战", "desc": "👋大家好，我是Chuck。一个不那么正经但热爱前端的孩儿。 这篇文章经鉴定，初中高级前端甚至包括刚入门的同学都可放心食用🥳。 解构 进入正题，为什么要聊聊解构呢？它作为ES6的一个新特性，虽然出来好久"}, {"id": "6844903562070196237", "title": "用 preload 预加载页面资源", "desc": "本文主要介绍preload的使用，以及与prefetch的区别。然后会聊聊浏览器的加载优先级。 preload 提供了一种声明式的命令，让浏览器提前加载指定资源(加载后并不执行)，在需要执行的时候再执行。提供的好处主要是 目前我们支持的浏览器主要为高版本 Chrome，所以可放…"}, {"id": "6999653999649488926", "title": "FormData对象的介绍与使用方法", "desc": "一. FormData对象介绍 FormData对象其实是在XMLHttpRequest 2级定义的，定义它的目的就是为序列化表单以及创建与表单格式相同的数据（当然是用于XHR传输）提供便利。 二. "}, {"id": "6973321414786940941", "title": "手把手教你实现一个图像处理小工具", "desc": "这一篇来介绍一个比较“硬核\"的知识，数字图像处理--卷积矩阵。并手把手教你撸一个数字图像处理的小工具。 卷积矩阵（Convolution Matrix） 是一个偏数学领域的概念，大多数滤"}, {"id": "6844904069488705550", "title": "基于nodejs线上代码热部署原理与实现", "desc": "大家都知道，nodejs启的后端服务，如果有代码变动，要重启进程，代码才能生效。 近段时间在做线上服务编译相关需求的时候，就出现了短时间内线上服务代码高频变动，代码功能模块高频更新，在不能重启服务的情况下，让更新的代码生效的场景。 这就涉及到一个热部署的概念，在不重启服务的情况…"}, {"id": "6844903513491767303", "title": "HTML5原生拖拽/拖放 Drag & Drop 详解", "desc": "拖放（drap && drop）在我们平时的工作中，经常遇到。它表示：抓取对象以后拖放到另一个位置。目前，它是HTML5标准的一部分。我从几个方面学习并实践这个功能。 然后，我们一步步看下这个过程中，会发生的事情。 在HTML5标准中，为了使元素可拖动，把draggable属性…"}, {"id": "6990265152423591949", "title": "使用下一代高性能图像技术", "desc": "还记得以前当切图仔年代，Photoshop想高保真输出的图像也是比较大。不得不把切好的图再批量上传到TinyPNG压缩，压缩后都是无损或者说看不出有损的图像。大大提升网站访问速度，再到前端工"}, {"id": "6844903609981763592", "title": "JavaScript 算法与数据结构", "desc": "这个仓库包含了多种基于 JavaScript 的算法与数据结构，每种算法和数据结构都有自己的 README 并提供相关说明以及进一步阅读和 YouTube 视频。供参考与学习。（分享自：GitHub）"}, {"id": "7002243137338867726", "title": "js函数高级（三）", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 执行上下文与执行上下文栈 变量提升与函数提升 变量提升: 在变量定义语句之前, 就可以访问到这个变量(undefined) 函数提升: 在函"}, {"id": "6978121634326511647", "title": "JavaScript函数式编程入门", "desc": "前言 在日常开发中，我们会经常跟函数打交道，比如要写一段复杂逻辑的代码时，我们通常会把它封装成一个函数去处理，可是这就是函数式编程吗？当你发现给函数进行单元测试时纠结半天，有没有想过如何改善呢？当你发"}, {"id": "6978115010052489246", "title": "JavaScript 实现：输出斐波那契数列", "desc": "想要保持自己的技术活力，最有效的手段就是通过不断地输入来提供足够的养分。我们也不必刻意追求高深的或者新鲜的知识点，通过对一个基础问题的全方位多维度解析，同样也会收获不小。"}, {"id": "7006903836409331749", "title": "ES2020和ES2021新特征学习", "desc": "Ecma International Ecma International 是一家国际性会员制度的信息和电信标准组织，它是和企业密切相连的组织，所以Ecma国际制定的规范标准都是由各类企业来做主"}, {"id": "6844903580860678158", "title": "面试分享：2018阿里巴巴前端面试总结 | 掘金技术征文", "desc": "脑子混了记得不多了，记得多少就记录多少吧。。。。 最开始的思路是用定时器实现，最后没有想的太完整，面试官给出的答案是用requestAnimationFrame。 由于之前没有用过这个 API 所以是现学的。 注：requestAnimFrame 和 定时器一样也头一个类似的清…"}, {"id": "7002623915486871588", "title": "总结下js的DOM事件流", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 前言 在学了几天js的DOM事件后，咱们来学习下js的DOM事件流。 DOM事件流 我们给一个目标元素绑定点击事件，然后我们点击了这个元素"}, {"id": "6982120553247146021", "title": "js+video标签实现一个自定义播放器", "desc": "js+video标签实现一个自定义播放器，主要学习的是原生js的写法与video标签的属性，希望能帮助一些初学者。"}, {"id": "6943035836691087397", "title": "JS 经典面试题初篇(this, 闭包, 原型...)含答案 ", "desc": "1. 问下面输出结果 2. 问下面输出结果 3. 下面输出结果 4. 求下面输出结果 1. 求下面输出结果 2. 某腾的面试题，以下的代码要实现5个 input 按钮循环绑定 click 点击事件，绑定完成后点击1、2、3、4、5五个按钮分别输出0、1、2、3、4五个字符 1.…"}, {"id": "6998103047540850701", "title": "记一次群里的变量提升问题——非严格模式函数声明没有块级作用域", "desc": "先看两种情况的代码以及输出结果。 第一种 第二种 两种情况的区别在于函数声明和赋值语句的先后。这段代码还需要区分严格还是非严格模式，不然结果也不一样。 先说非严格模式，也就是上面两种情况。我直接摘取重"}, {"id": "6844903654458146823", "title": "滚动视差？CSS 不在话下", "desc": "视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。 作为网页设计的热点趋势，越来越多的网站应用了这项技术。 通常而言，滚动视差在前端需要辅助 Javascript 才能实现。当然，其实 CSS 在实现滚动…"}, {"id": "6995564442230472740", "title": "一篇总结箭头函数的语法规则", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 今天我们来聊聊箭头函数 为了更方便的书写和使用函数，ES6最重要点的是引入了箭头函数， 允许使用=>来定义函数，箭头函数是一种简写的函数表"}, {"id": "6958038917039783966", "title": "VS code插件分享之 --- Run Code", "desc": "前言 写一个测试代码的时候 要想实时在控制台看到结果 又不想每次去浏览器查看结果的时候使用 过程 全局安装 ts-node -g npm install ts-node -g vs code 查找插件"}, {"id": "7001736932481433608", "title": "（译）看得见的 JavaScript：事件循环（event loop）", "desc": "（译）看得见的 JavaScript：事件循环（event loop） 事件循环！这是每一个JS开发者都会遇到的东西，但一开始理解起来会很复杂。 首先，什么是事件循环，为什么你应该关注它？ JS 是单"}, {"id": "6914216540468576263", "title": "JS继承 原型链继承、构造函数继承、组合继承、原型继承、寄生式继承、寄生组合继承", "desc": "​ 通过使用call()或apply()方法，Parent构造函数在为Child的实例创建的新对象的上下文执行了，就相当于新的Child实例对象上运行了Parent()函数中的所有初始化代码，结果就是每个实例都有自己的info属性。 ​ 相比于原型链继承，盗用构造函数的一个优点…"}, {"id": "6844903510761275400", "title": "打造自己的JavaScript武器库", "desc": "作为战斗在业务一线的前端，要想少加班，就要想办法提高工作效率。这里提一个小点，我们在业务开发过程中，经常会重复用到日期格式化、url参数转对象、浏览器类型判断、节流函数等一类函数，这些工具类函数，基本上在每个项目都会用到，为避免不同项目多次复制粘贴的麻烦，我们可以统一封装，发布…"}, {"id": "7006127303449116679", "title": "原型链Object.defineProperty与obj.prototype的区别", "desc": "原型链Object.defineProperty与obj.prototype的区别， vue源码解读"}, {"id": "6953879426849308709", "title": "var、let、const被你忽略的区别", "desc": "1. var 会污染全局对象（易被忽略） var在全局声明的变量存在于VO(g)全局变量对象中，并且也会复制一份到GO中，let和const不会。注意这个仅限于在全局申请的变量。var声明的变量会污染"}, {"id": "6844903769776324615", "title": "🎉喜大普奔，ES2019登场", "desc": "就在刚4个小时前，TC39将以下特性加入到了 ES2019 中。让我们来看看这些新的特性给我们带来了什么样的改变。 行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配。 以前，这些符号在字符串文字中被视为行终止符，因此使用它们会…"}, {"id": "6993346890217717790", "title": "最近遇到的倒计时的坑", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 现象 最近在开发一个活动，里面有涉及到倒计时，主要逻辑是 一进入页面就获取活动的信息，在活动信息里有活动的开始时间，如果活动开始时间还没到，"}, {"id": "6993318543315959816", "title": "JavaScript高级 - nodejs+koa2实现文件上传大文件切片上传断点续传（服务器端）", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 一、环境准备及第三方库 我们将采用nodejs+koa2来实现文件上传的服务端部分 nodejs版本：v12.16.1 koa版本：v"}, {"id": "7002038767280193572", "title": "JS算法之序列化二叉树及字符串的排列", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 序列化二叉树 请实现两个函数，分别用来序列化和反序列化二叉树。 你需要设计一个算法来实现二叉树的序列化与反序列化。"}, {"id": "6994974698622681119", "title": "前端常用的函数封装js篇（二）", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 深拷贝 在JS中，数据类型分为基本数据类型和引用数据类型两种，对于基本数据类型来说，它的值直接存储在栈内存中，而对于引用类型来说，它在栈内"}, {"id": "6950084849180868622", "title": "中小型前端团队代码规范工程化最佳实践 - ESLint", "desc": "为了解决这类静态代码问题，每个团队都需要一个统一的 JavaScript 代码规范，团队成员都遵守这份代码规范来编写代码。当然，靠人来保障代码规范是不可靠的，需要有对应的工具来保障，ESLint 就是"}, {"id": "6957345972016185358", "title": "input框中防抖的4种应用场景", "desc": "节流/防抖的文章想必大家也看过了很多，大多数都是分为`立即执行`和`非立即执行`两种版本的。这里列举了更多的场景"}, {"id": "6986142256923148324", "title": "JS - 这些跨域方法，你都知道吗？", "desc": "跨域 协议、域名、端口不同，需要跨域 跨域解决方案 jsonp：JSON with Padding <script> 标签没有同域限制 服务端返回页面上 callback 包裹的 json 数据 兼容"}, {"id": "6921351655359250440", "title": "多行溢出省略号显示及点击展开（css/js）实现！", "desc": "关于多行溢出显示省略号的问题，如果是根据字符的长度个数限制 超过部分替换为省略号，这种还是很好处理的，关键是根据行数，在未知情况下你不知道需要多少内容，去填满一个元素，做起来还是比较麻烦的，网上很多种乱七八糟的方案，拿过来又不能直接用，，我就结合网上的思路重新整理修改一波可以直…"}, {"id": "6994301628278898724", "title": "打造公司内部开箱即用的web脚手架 gdpg-cli", "desc": "前言 脚手架工具 vue 有 vue-cli，react 有 create-react-app，根据选择项来生成新项目模板。但往往这些不够定制化，生成项目之后还需要添加很多配置，离生成即用还有一定的差"}, {"id": "6980213703757021192", "title": "JS手写一款简单轮播海报", "desc": "今天用原生js给大家写一个无限轮播的效果。 首先还是完成页面的静态布局。 然后是页面的css样式, 这里用了不推荐的*重置margin和padding，别说效率低好用就完了。 li要"}, {"id": "6875955097864994823", "title": "前端错误监控方案 sentry", "desc": "作为程序员，每次开发完自测充分的时候，但还是会有线上异常情况。如何快速发现 或者提前监控到这些异常的出现呢，是不是需要一个错误监控系统？ fundebug、sentry、bat的... 有免费版的付费版，免费版。付费版和免费版其实差不多,免费够我们用了，付费的就是他啥都帮你弄好…"}, {"id": "6994722481395204103", "title": "ES6+新增常用内容总结（四）", "desc": "本文主要是在日常开发中一些比较常用的ES6+新增的特性， 如有错误,欢迎指出,将在第一时间修改,欢迎提出修改意见和建议"}, {"id": "7000182433807237151", "title": "前端刷题路-Day91：每日温度（题号739）", "desc": "请根据每日 气温 列表 temperatures，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 0 来代替..."}, {"id": "6917160609863860231", "title": "让你的 JS 代码变得更加优雅且可维护", "desc": "鱼头在开发的过程中，总结了一些优化开发的编码经验，当然这些经验都是前人总结出来的，这次就特别拿出来跟大家一起分享，当然这些经验不一定是最佳实践，各位读者有兴趣或者有不同意见的可以跟鱼头一起探讨一下。 哦，不是。。 在编程的世界里也有魔法，一般称其为：魔法数字，魔法变量，魔法字符…"}, {"id": "6844903521284784142", "title": "解读Promise内部实现原理", "desc": "早前有针对 Promise 的语法写过博文，不过仅限入门级别，浅尝辄止食而无味。后面一直想写 Promise 实现，碍于理解程度有限，多次下笔未能满意。一拖再拖，时至今日。 随着 Promise/A+规范、ECMAscript规范 对 Promise API 制定执行落地，Ja…"}, {"id": "7001881419639160846", "title": "今天来学习下剪贴板事件", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 前言 昨天学习了鼠标事件，今天来看看剪切板事件。 介绍 剪切板事件有三个事件， 复制事件（copy）, 剪切事件（cut）, 粘贴事件（p"}, {"id": "6844903712616349703", "title": "写给前端开发者不一样的VSCode配置(JS/React)", "desc": "相信越来越多的前端开发者已经迁移到VSCode阵营了，这里不对各大编辑器作比较。因为我怕杠不过各位。^_^ ··· VSCode快速，稳定而且能完美支持TS。 我对开箱即用的编辑器一直存在着好感，但是他们都或多或少的缺少点什么，但是广大的同胞打造的扩展(extensions)完…"}, {"id": "7005469099249631240", "title": "变量声明", "desc": "1 使用var的函数作用域声明 在使用var声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在with语句中，最接近的上下文也是函数上下文。如果变量未经声明"}, {"id": "6996156430185136158", "title": "vscode使用指南", "desc": "1.vscode介绍 2. vscode快捷键 3.1 mac使用code .命令打开VSCode 需要安装code：打开vscode –> command+shift+p –> 输入shell co"}, {"id": "6844904145443356680", "title": "一篇不是标题党的CommonJS和ES6模块规范讲解", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆。 没错，看着这篇文章的标题你可能就不想看了，CommonJS和ES6 Modules规范这都是啥时候的知识点了，你还在这写呢... 哭😢... 因为呆呆之前对这些规范还真的就只是看一些教材，没有去实践，然后今日实践起…"}, {"id": "6984747915939938340", "title": "手撕代码之 Array.isArray()", "desc": "【手撕代码之模拟实现 Array.isArray()】Array.isArray() 用于确定传递的值是否是一个数组。"}, {"id": "6844903700943601671", "title": "webpack4.x最详细入门讲解", "desc": "本文主要从webpack4.x入手，会对平时常用的Webpack配置一一讲解，各个功能点都有对应的详细例子，所以本文也比较长，但如果你能动手跟着本文中的例子完整写一次，相信你会觉得Webpack也不过如此。 简单来说，它其实就是一个模块打包器。 如果像以前开发时一个html文件…"}, {"id": "6965382280839692302", "title": "写好一个函数的建议", "desc": "前言 在 JS 中，除了变量，用的最多的应该就是函数了，函数是 Javascript 的第一公民。 要写好一个函数，个人认为可以从以下几点来编写: 命名准确 函数注释 函数参数 函数的返回 本文对以上"}, {"id": "6996275983904931854", "title": "JavaScript之组合函数", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 1.什么是组合函数 我们可以理解为，将两个或者两个以上的函数，组合在一块，嵌套函数展开平铺，上一个函数的结果作为下一个函数的参数值。组合函"}, {"id": "6970697195913756685", "title": "Proxy 对象简介 | 周末学习", "desc": "关于Vue3 中的数据响应式功能，我们大家应该都知道，它是通过 ES6的代理模式——Proxy 对象实现的，今天我们来简单认识下何为 Proxy 对象。"}, {"id": "6864485337771573261", "title": "js异步编程，eventLoop、消息队列都是做什么的？ 什么是宏任务，什么是微任务", "desc": "JavaScript是一门单线程语言，起因是设计之初js只用来操作dom，对表单进行简单的校验。在这种执行环境简单的情况下，自然就选择了单线程来处理程序。但是单线程如果遇到执行时间较长的程序片段，会拖延甚至阻塞程序的执行，对于用户来说，页面呈现\"卡死状态\"，这是最糟糕的体验。 …"}, {"id": "6973994799875489800", "title": "JS去重的方法", "desc": "1. 利用双重for循环去重 2.利用includes去重 3.利用数组的filter方法去重 4.利用ES6中的 Set 方法去重（最常用）"}, {"id": "6844903894984687630", "title": "JS 中有趣的事实", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 使用 JS 有很多有趣的地方。尽管工程师们每天都在与之打交道，但仍有一些语言没有被开发出来。本广将介绍一些你可能想不到的JS特性。 NaN是一个 number 类型。 而且，NaN 不等于它自己。 实际上NaN…"}, {"id": "6844903554205876231", "title": "可视化拖拽 UI 布局之拖拽篇", "desc": "当时开发参考过的小部分网站，其它参考过的大量网站由于电脑硬盘出现故障丢失了无法恢复。 以上网站这些不是很重要，真正重要有用的网站链接我已经帮你筛选整理出来了，并贴在下面的文章里面(分为演示与教程两类)，点击相关链接即可进入相关开发学习。 贴上面网站的原因是我想告诉大家，插件选型…"}, {"id": "7002081071525265444", "title": "1-3 数组的各种遍历方式", "desc": "ES5中遍历的方法 for循环 forEach -- 如果做操作是直接修原数组 forEach 的代码块中不能使用 break、continue，它会抛出异常。 和for循环的区别 不支持braek "}, {"id": "6844903987771097102", "title": "深入理解 JavaScript 回调函数", "desc": "JavaScript回调函数是成为一名成功的 JavaScript 开发人员必须要了解的一个重要概念。但是我相信，在阅读本文之后，你将能够克服以前使用回调方法遇到的所有障碍。 在开始之前，首先要确保我们对函数的理解是扎实的。 函数是在其中有一组代码的逻辑构件，用来执行特定任务。…"}, {"id": "6931994384892166151", "title": "用canvas编辑你的图片", "desc": "大家好，我是 canvas ，我能让大家通过 canvas 标签，用JavaScript来绘制图形。除此之外，动画，游戏图形，数据可视化，照片处理和实时视频处理都难不倒我噢~ 目前需求已顺利上线，质检师的使用反馈很不错。 希望通过本文给大家带来一种前端处理图片的思路，有兴趣的同…"}, {"id": "7000664126905122830", "title": "import 和require区别、module.exports与exports的使用、export default与export的使用", "desc": "本文对这js几个模块依赖引入api做一个解读，各种方式的使用方法、优缺点分析以及注意事项，仅供参考..."}, {"id": "6844904129400143880", "title": "前端下载文件与读取文件内容（多种类型的文件）", "desc": "在实际开发过程中经常会碰到用户要下载或者导出一个文件的需求。传统的做法是在后端存储或者即时生成一个文件来提供下载功能，这样的优势是可以做权限控制、方便数据二次处理，但缺点是需要额外发起请求、增大服务端压力、下载速度慢。但随着HTML5的标准发布，我大前端已经完全可以独立实现文件…"}, {"id": "6992459363491250184", "title": "前端跨域请求的处理", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战(https://juejin.cn/post/6987962113788493831 \"https://juejin.cn/post/698"}, {"id": "6998070688862961677", "title": "js的继承", "desc": "js继承的6种方式 1.原型链继承 2.借用构造函数继承 3.组合继承 4.原型式继承 5.寄生式继承 6.寄生组合式继承"}, {"id": "6844904161532706823", "title": "11期前端冲刺必备指南-执行上下文/作用域链/闭包/一等公民", "desc": "大家好，我是吒儿👦，每天努力一点点💪，就能升职加薪💰当上总经理出任CEO迎娶白富美走上人生巅峰🗻，想想还有点小激动呢😎。 这是我的第11期文章内容✍，我并不希望把👉这篇文章内容成为笔记去记，或者说是总结一些要点。而是希望通过这篇文章真正地去理解，掌握，一行一行的解析…"}, {"id": "6844903650427404302", "title": "Vuex持久化插件-解决刷新数据消失的问题", "desc": "在mutations,定义的方法里对vuex的状态操作的同时对存储也做对应的操作。 最直观的就是，手动写比较麻烦。"}, {"id": "6844903497419194382", "title": "[译] React、Jest、Flow 和 Immutable.js 将使用 MIT 许可证", "desc": "下周，我们将根据 MIT 许可证重新授权我们的开源项目 React，Jest，Flow 和 Immutable.js。我们正在重新评估这些项目，因为 React 是 Web 生态上开源软件的基础，我们不希望以非技术原因阻碍进步。 这个决定是经过几周的失望和我们社区的犹疑而产生的…"}, {"id": "6844903613907599374", "title": "精读《你不知道的 javascript（上卷）》", "desc": "《你不知道的 javascript》是一个前端学习必读的系列，让不求甚解的JavaScript开发者迎难而上，深入语言内部，弄清楚JavaScript每一个零部件的用途。本书介绍了该系列的两个主题：“作用域和闭包”以及“this和对象原型”。这两块也是值得我们反复去学习琢磨的两…"}, {"id": "6844904008360919053", "title": "原生开发、H5开发和混合开发的区别", "desc": "1. 原生开发 比较快捷地使用设备端提供的接口，处理速度上有优势。 必须等下载完毕用户才可以打开，获得新版本时需重新下载应用更新。 新需求迭代，上线慢。 2. web APP (h5开发) HTML5应用开发，是利用Web技术进行的App开发，可以在手机端浏览器里面打开的网站就…"}, {"id": "6844903556084924423", "title": "JavaScript异步机制详解", "desc": "如果在函数返回的时候，调用者就能够得到预期结果(即拿到了预期的返回值或者看到了预期的效果)，那么这个函数就是同步的。 上面两个函数就是同步的。 如果函数是同步的，即使调用函数执行的任务比较耗时，也会一直等待直到得到预期结果。 如果在函数返回的时候，调用者还不能够得到预期结果，而…"}, {"id": "6942800700061515812", "title": "春招面试复盘，理清原型、原型链~ 【JS Plan】", "desc": "从一道滴滴面试题开始说起，是很基础的有关原型，原型链问题，但是也是需要清楚的知道原型和原型链之间的关系，才能更好的回答，毕竟可能你清楚的思路也很重要哦。废话不多说，先来看题目吧： 我想原型基础比较好的你，应该已经可以说出答案来啦，请在脑海里留下你的答案。不过也不要因为太基础就不…"}, {"id": "6995150375577714695", "title": "数据结构之图的遍历", "desc": "上篇文章中，我们简单的实现了图的创建，那么创建好之后呢，接下来我们一起来看看图的遍历。 图的遍历 图的遍历可以干哪些事情"}, {"id": "6983244567269081119", "title": "前端开发必备的JavaScript库", "desc": "前端开发必备的JavaScript库 js常用工具类 lodash， 一个一致性、模块化、高性能的JavaScript实用工具库 ramda, 一个很重要的库，提供了许多有用的方法，每个JavaScr"}, {"id": "6963619263558991908", "title": "【1.1w字】你快速了解浏览器的http缓存机制", "desc": "什么是浏览器缓存 简单来说，浏览器缓存就是把一个已经请求过的Web资源（如html页面，图片，js，数据等）拷贝一份副本储存在浏览器中。缓存会根据进来的请求保存输出内容的副本。当下一个请求来到的时候，"}, {"id": "6993533243597258759", "title": "common.js AMD CMD规范", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战” 1、AMD: Require.js，一个强大的工具包，它能够自动的把混乱的前端脚本加载的规整而有序，Require.js主要用于客户端的模"}, {"id": "6844904161578844174", "title": "JavaScript数组中一些实用的方法(forEach,map,filter,find)", "desc": "代码是写给人看的,顺便在机器上运行。从这一角度上讲,个人支持多用Es5,Es6的迭代器方法,有时候在一些面试当中,会问你这其中的一些性能比较的"}, {"id": "6844903610019512328", "title": "浅谈 2018 移动端跨平台开发方案", "desc": "“一次编写，到处运行”，这是 SUN 公司用来展示 Java 语言跨平台特性的 slogan，它意味着 Java 可以在任何平台上进行开发，编译后就可以在任何安装有 Java 虚拟机（JVM）的设备上运行。 最近这两年，在移动端各种跨平台的开发方案如雨后春笋般涌现，一方面是因为…"}, {"id": "6844904018037211149", "title": "如何真正写好代码注释 — 现代 JavaScript 教程", "desc": "正如我们在 代码结构 一文所了解到的那样，注释可以是以 // 开始的单行注释，也可以是 /* ... */ 结构的多行注释。 我们通常通过注释来描述代码怎样工作和为什么这样工作。 乍一看，写注释可能很简单，但初学者在编程的时候，经常错误地使用注释。 新手倾向于使用注释来解释“代…"}, {"id": "6990329776862920734", "title": "两种方式实现css取消页面鼠标双击选中文字或单击拖动选中文字的效果", "desc": "问题描述 我们知道浏览器页面上的文字正常情况下我们是可以双击选中、或者单击鼠标横向拖动也能选中的，选中以后可以右击出现面板然后去复制什么的。但是有的时候，这种效果我们并不想要的，比如用户点快了的时候，"}, {"id": "6982772316274950180", "title": "《Effective JS》的 68 条准则「十八至二十九条」", "desc": "阅读学习《Effective JavaScript》，以自身阅读和理解，着重记录内容精华部分以及对内容进行排版，便于日后自身回顾学习以及大家交流学习。"}, {"id": "6999262868860305422", "title": "数据结构-对象和数组(二)-数组", "desc": "前文我们学习了 Node.js 实战: 文件系统模块 结合 HTTP 模块- 搭建一个简单本地文件服务器, 通过读取本地的 .json 文件,返回数据模拟接口 本文来学习数据结构之数组, 及其常用方法"}, {"id": "6993336118934503438", "title": "JS算法之数组中数字出现的次数", "desc": "数组中数字出现的次数系列题型，一个整型数组nums里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。"}, {"id": "6993513675059363871", "title": "JavaScript知识点回顾（七）——操作符（二）", "desc": "操作符包括数学操作符（加减乘除）、位操作符、关系操作符等等。操作符可以用于各种数据类型，如字符串、数值、布尔值等，也可以用于对象."}, {"id": "6944210469565497357", "title": "【前端见外】20个JavaScript简写小技巧，助你高效敲代码", "desc": "The shorthand techniques of any programming language help you to write more clean and optimized code and lets you achieve your goal with le…"}, {"id": "6937811746245574670", "title": "JavaScript的数据结构-集合 ｜技术点评", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 表示A-B,x元素存在于A中，且x不存在于B中。"}, {"id": "6922025817606193160", "title": "前端生成PDF文件实现方案", "desc": "1. pdf内容截断问题 （待解决） 2. PDF导出文件分辨率问题（已解决）"}, {"id": "6844904012790104078", "title": "5个 JS 解构有趣的用途", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 1. 交换变量 temp是一个临时变量，它先保存a的值。然后把b的值赋值给a，接着将temp值赋给 b。 如果使用解构的方式会更简单，不需要什么鬼的 temp 变量。 [a，b] = [b，a]是解构赋值，右边…"}, {"id": "6901179615188877325", "title": "前端监控平台系列：服务端功能设计与实现", "desc": "用数据库来存储，建一张包含时间、员工id，每次有人签到就直接在对应表中insert，缺点：如果人数很多并且同时签到，会造成数据库连接池爆炸，不能实时更新。优点：存有明细数据，可以查询某一天的某个时刻签到的 用每天的日期当做bitmap的key，value是userId，一个us…"}, {"id": "6844904142658338830", "title": "深度优先搜索的理解与简单实现", "desc": "深度优先搜索作为广度优先搜索的好基友，同样也是对图进行搜索的一种算法。善用这两种算法，可以解决我们业务中遇到的「树形结构遍历搜索」问题。 本文将以图文的形式，详细讲解深度优先搜索，将其与广度优先搜索进行对比，分析两种算法的差异，并用JavaScript将其实现，欢迎各位感兴趣的…"}, {"id": "6844904176229548039", "title": "链表与变相链表的实现", "desc": "链表作为一种数据结构，它存放着有序元素的集合。元素与元素之间通过指针连接，因此在链表中添加或删除元素只需要修改指针的指向即可，执行速度相比数组有得到显著的提升。 现实生活中也有许多使用到链表的例子，例如兔子舞，每个人勾肩搭背组合而成，其中人相当于链表中的元素，勾肩搭背的手相当于…"}, {"id": "6844903535885172743", "title": "vue 项目如何引入微信sdk，使用微信分享接口", "desc": "做微信的网页基本上都要接入微信的sdk，我在做的时候，也颇费了一番功夫，然后就想记录一下，供自己日后翻阅，以及让有需要的朋友可以做一下参考，如果喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 开始之前大家可以先读一读微信公众号的 接入文档，vue是单页面项目，比如你想要接入…"}, {"id": "6844903710724718606", "title": "3. react-router-dom源码揭秘 - BrowserRouter", "desc": "今天开始，我们开始揭开react-router-dom神秘的头盖骨，哦不，面纱。 在此之前，我们需要了解一些预备知识：React的context和react-router-dom的基本使用。需要复习的同学请移步： 下面是我跟小S同学一起阅读源码的过程。 大家可以参照这个思路，进…"}, {"id": "6863760642092826637", "title": "通俗易懂的redux原理", "desc": "众所周知，Redux最早运用于React框架中，是一个全局状态管理器。Redux解决了在开发过程中数据无限层层传递而引发的一系列问题，因此我们有必要来了解一下Redux到底是如何实现的？ Redux主要分为几个部分：dispatch、reducer、state。 接下来我们来探…"}, {"id": "6931897679479832583", "title": "【JavaScript高级】原型与原型链", "desc": "原型与原型链一直是JavaScript的重难点，掌握这部分内容将会使我们的工作更加的高效，而且这也是面试官必问的内容。 首先，我们要明确的是，在 ES6 之前，我们创建一个实例并不是通过类（class），而是直接使用构造函数来实现的。 通过 new 函数名 来实例化对象的函数叫…"}, {"id": "6918014088967061511", "title": "《看完就懂系列》答应我，看完就开始用Symbol好吗？", "desc": "每到周五公司就格外的忙，测试忙着提bug，产品忙着改需求，UI忙着发挥她的像素眼，尤其是下班前的一阵子，大家彷佛充满了干劲，颇有种再干他五百年的气势。就像一天的活都堆到傍晚，一周的活也都堆到周五，一言不合就加班。更惨的是加班回家还要哄女朋友睡觉，大冰块日更的大业差点被毁于一旦。…"}, {"id": "6881583856470736910", "title": "async&await", "desc": "联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致；那么下一个关键点就在于await关键字了 await只…"}, {"id": "6844903672665604104", "title": "DvaJS的学习之路2 - umi@2 + dva，完成用户管理的 CURD 应用", "desc": "最近一个月来使用 dva 对公司存量项目进行重构，比较少时间写文章了。随着9月开学季节的到来，最近在使用的几个开源项目都迎来了重大更新。首先就是 umi 终于迎来了 2.0 版本，具体介绍可以查看 发布 umi 2.0，可插拔的企业级 react 应用框架。随之而来的是使用 u…"}, {"id": "6844903773836410888", "title": " 前端与编译原理——用 JS 写一个 JS 解释器", "desc": "说起编译原理，印象往往只停留在本科时那些枯燥的课程和晦涩的概念。作为前端开发者，编译原理似乎离我们很远，对它的理解很可能仅仅局限于“抽象语法树（AST）”。但这仅仅是个开头而已。编译原理的使用，甚至能让我们利用JS直接写一个能运行JS代码的解释器。 接触过小程序开发的同学应该知…"}, {"id": "6890460488254095367", "title": "看不懂闭包的，来看这个，必懂（配有视频讲解）", "desc": "动动你的小手，欢迎大家的关注-点赞-收藏。下一篇更新JavaScript的this指向 ​ 闭包已经成为近乎神话的概念，它非常重要又难以掌握，而且还难以定义。它是javascript语言的一个难点，也是它的特色，很多高级应用都是依靠闭包实现。 理解闭包，首先必须理解变量作用域。…"}, {"id": "6844903609251921934", "title": "超简单的前端跨域、前后端分离解决方案", "desc": "LiveNode是一个基于Node.js轻巧的web服务，帮助前端开发者解决本地跨域，代码刷新，以及SPA(单页应用)前后端服务分离，并且可以用于生产环境项目部署。 src 目录为项目容器目录，html、css、js等代码放入该目录即可。(注意!不可修改src目录名称) 当sp…"}, {"id": "6992506375792246792", "title": "JS中检测数据的四种方式。", "desc": "JS中检测数据的方式一共有四种，分别是typeof、instanceof、constructor、Object.prototype.toString.call。"}, {"id": "6844904032121815054", "title": "【你应该了解的】前端通用国际化解决方案", "desc": "前端技术日新月异，技术栈繁多。以前端框架来说有React, Vue, Angular等等，再配以webpack, gulp等等构建工具去满足日常的开发工作。同时在日常的工作当中，不同的项目使用的技术栈也会不一样。当需要对部分项目进行国际化改造时，由于技术栈的差异，这时你需要去寻…"}, {"id": "6882530286706360328", "title": "一文搞懂JS系列（四）之闭包应用-柯里化，偏函数", "desc": "了解通过闭包的概念实现的柯里化，偏函数的实现方式，以及在实际应用中，它的使用环境，能让你写出更加优雅的代码。"}, {"id": "6854573210794065934", "title": "下载文件并使用JavaScript将其压缩在浏览器中", "desc": "我最近从事一个副项目，该项目可根据用户的请求生成报告。对于每个请求，我们的后端将生成一个报告，将其上传到Amazon S3存储，然后将其URL返回给客户端。由于生成报告需要一些时间，因此将存储输出文件，并且服务器将通过请求参数来缓存其URL。如果用户订购相同的商品，则后端将返回…"}, {"id": "6844903872243171336", "title": "我是这样搞懂一个神奇的BUG", "desc": "409 ？Conflict ？ 平时很少遇到这样的错误，貌似很严重的样子，吓得我赶紧查看到底发生了什么。 仔细查看错误详情发现是因为使用同一个邮箱账号多次注册导致后面的请求数据库直接报错。 但是，不应该啊！我们是事先有做检查的。如果该邮箱已经被注册，会提醒并且不让注册的。难道对…"}, {"id": "6844903792085827592", "title": "记一次Promise在api接口合并中的实践", "desc": "本篇水文发出来之后，有朋友反馈文笔太差，的确是作者的锅，码字水平目前就这么高，只能委屈大家看这篇辣眼睛的文字了，文笔只能慢慢改善。 还有朋友反馈看懵的，仔细想想也是作者的锅，没有表达清楚，修改重发。 澄清一下本文和Promise.all没有半毛钱关系，如果让大家误会，见谅。 有…"}, {"id": "6844903976836530189", "title": "React 初学者需要知道的一些知识", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 可以给每个方法加上.bind(this)来解决 this 指向的问题，因为大多数教程都告诉你这样做。如果你有几个受控组件，那么constructor(){}中就会有一大堆代码。 ES6 的箭头函数使用词法作用域…"}, {"id": "6844903846347538439", "title": "【译】Javascript 面试的完美指南(开发者视角)", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 十有八九的会给出false， 其实运行结果是true，原因请看 这里。 函数是 JavaScript 的精华，是 JS 一等公民。JS 函数不仅仅是一个普通的函数，与其他语言不同，JS 函数可以赋值给变量，作为…"}, {"id": "6844903874688450568", "title": "揭秘 Vue 中的 Virtual Dom", "desc": "Vue.js 2.0引入Virtual DOM,比Vue.js 1.0的初始渲染速度提升了2-4倍，并大大降低了内存消耗。那么，什么是Virtual DOM？为什么需要Virtual DOM？它是通过什么方式去提升页面渲染效率的呢？这是本文所要探讨的问题。 在对 Model 进…"}, {"id": "6844903886260535304", "title": "Array.slice 8 种不同用法", "desc": "为了保证的可读性，本文采用意译而非直译。 JS数组slice方法是JS语言中最强大、最常用的内建函数之一。 JavaScript 数组slice方法符合这两个标准。 slice方法可以在不修改原始列表的情况下创建列表子集的浅拷贝。因此，它为编写函数式 JS 提供了一个关键的构建…"}, {"id": "6844903958423535623", "title": "想给头像加国旗?何须@微信官方,@我就可以啦", "desc": "前几天大家都在朋友圈@微信官方，求赐一面国旗，没有得到微信官方的小盆友们，有没有很失落呀~心血来潮的我，决定用js来写一个给头像加国旗的功能，然后我就送了自己一面国旗，事实证明，想要的东西还是只能靠自己的双手去创造。哈哈哈，这鸡汤洒的触不及防~，回归正题，下面就一起来看看我是怎…"}, {"id": "6906366633741287437", "title": "分析团队中的六则糟糕代码", "desc": "该同学定义了一个变量叫 cg，不符合变量名可描述的规则，除了本人之外团队其他成员看不懂其含义。goToPage 和 goPage 容易混淆，语义也不明确。 上面的注释既不规范，也是多余的，当起了一个好的名字之后，代码就已经非常明确了。 上面每个判断都要执行一次，完全没有必要，这…"}, {"id": "6937835082535141389", "title": "JS执行过程详解，从编译到垃圾回收", "desc": "栈的特点是\"LIFO，即后进先出（Last in, first out）\"。数据存储时只能从顶部逐个存入，取出时也需从顶部逐个取出。 堆的特点是\"无序\"的key-value\"键值对\"存储方式。堆的存取方式跟顺序没有关系，不局限出入口。 队列的特点是是\"FIFO，即先进先出（Fi…"}, {"id": "6996834787637854245", "title": "DOM事件总结", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 知识点主要包括以下几个方面： 基本概念：DOM事件的级别 DOM事件模型、DOM事件流 DOM事件流，指的是事件传递的三个阶段。 描述DOM"}, {"id": "6844903774989844488", "title": "【前端词典】继承（二） - 回的八种写法", "desc": "上一篇我讲了下继承的基础知识-原型和原型链。看到有人读完我的技术分享后而有所得，我很开心；看到有人提意见我也虚心接受。 《孔乙己》一文中我印象最深的是孔己乙的一个动作和一句对白一个提问。 孔乙己这种深受科举教育毒害的读书人，常会注意一些没有用的字，而且把这看成学问和本领。会‘回…"}, {"id": "6844903825585897485", "title": "「简明性能优化」双端开启Gzip指南", "desc": "1. 开启gzip压缩的好处 可以减小文件体积，传输速度更快。gzip是节省带宽和加快站点速度的有效方法。 客户端接受到数据后去检查对应字段的信息，就可以根据相应的格式去解码。 客户端请求时，可以用 Accept-Encoding:gzip，用户说明接受哪些压缩方法。 客户端在…"}, {"id": "6844904178234458120", "title": "掌握 tsconfig.json", "desc": "在 TypeScript 开发中，tsconfig.json 是个不可或缺的配置文件，它是我们在 TS 项目中最常见的配置文件，那么你真的了解这个文件吗？它里面都有哪些优秀配置？如何配置一个合理的 tsconfig.json 文件？本文将全面带大家一起详细了解 tsconfig…"}, {"id": "6994011908563009567", "title": "【从头学前端】06-这次我学会了JavaScript中的条件语句", "desc": "这篇文章我们将来学习JavaScript中的条件语句，通过本篇文章你将会掌握如下内容： 所谓的条件语句 ，就是通过指定的表达式的运行结果来判断当前是执行还是跳过某些指定的语句块。"}, {"id": "6844903749660442638", "title": "AST in JS", "desc": "Babel,Webpack，vue-cli和esLint等很多的工具和库的核心都是通过Abstract Syntax Tree抽象语法树这个概念来实现对代码的检查、分析等操作的。在前端当中AST的使用场景非常广,比如在vue.js当中，我们在代码中编写的template转化成r…"}, {"id": "6844904129794424839", "title": "挑战全网最幽默的Vuex系列教程：第一讲 Vuex到底是什么鬼", "desc": "官方已经有教程了，为什么还要写这个教程呢？说实话，还真不是我闲着蛋疼，官方的教程真的是太官方了，对于刚入门 Vuex 的童鞋来说，想必看官方的教程，很多地方就如同看圣经一样，比如「欧玛尼玛尼牙」，所有的字都认识，就是不知道说些什么玩意，不信，你可以戳进去看看。 当然，对于大神级…"}, {"id": "6844903816060469262", "title": "彻底理解浏览器的跨域", "desc": "1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。 最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页“同源”。所谓“同源”指的是“三个相同”： 同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取…"}, {"id": "6995455303814905893", "title": "js获取最近一周一个月三个月时间", "desc": "javascript获取最近一周时间范围 获取最近一个月的时间范围 获取最近三个月的时间范围"}, {"id": "6844903903071322119", "title": "解决JS浮点数运算结果不精确的Bug", "desc": "最近在做项目的时候，涉及到产品价格的计算，经常会出现JS浮点数精度问题，这个问题，对于财务管理系统的开发者来说，是个非常严重的问题（涉及到钱相关的问题都是严重的问题），这里把相关的原因和问题的解决方案整理一下，也希望给各位提供一些参考。 一. 常见例子 二. 导致原因 三. I…"}, {"id": "6996634563732570119", "title": "Js中this指向和改变this指向", "desc": "通过代码演示让你快速搞懂JavaScript中各种情况下this的指向问题，以及怎么改变this的指向。"}, {"id": "6844903569984864270", "title": "浅谈Debounce 与 Throttle", "desc": "debounce 与 throttle 是开发中常用的高阶函数，作用都是为了防止函数被高频调用，换句话说就是，用来控制某个函数在一定时间内执行多少次。 使用场景： 比如绑定响应鼠标移动、窗口大小调整、滚屏等事件时，绑定的函数触发的频率会很频繁。若稍处理函数微复杂，需要较多的运算…"}, {"id": "6927105525276475399", "title": "鼠年的最后一天，盘点下表格组件在2020年的更新记录", "desc": "虽然在github上一直不温不火，但该有的迭代却一直在持续。 在2020/1/12下午7:19:10，发布了2020年的第一个版本2.10.5。该版本中新增了当前页打印功能，并修复和优化了部分逻辑。 在2020/12/9上午9:07:17，发布了2020年的最后一个版本2.14…"}, {"id": "6844903682828402701", "title": "SPA路由机制详解（看不懂不要钱~~）", "desc": "总所周知，随着前端应用的业务功能起来越复杂，用户对于使用体验的要求越来越高，单面（SPA）成为前端应用的主流形式。而大型单页应用最显著特点之一就是采用的前端路由跳转子页面系统，通过改变页面的URL，在不重新请求页面的情况下，更新页面视图。 在 H5 还没有流行开来时，一般 SP…"}, {"id": "6844903976521973767", "title": "webpack多页面内存溢出&单页面编译慢", "desc": "在进行多页面开发的时候，项目刚开始阶段，页面较少，编译速度还能忍受，但是一旦页面增加，多次热更新就造成了内存溢出。 可以看到的是webpack把所有的页面都进行了编译，总体积已经达到了18M，耗时超过1分钟，在热更新的时候这个体积会变得更大，从而占据node的运行内存，导致内存…"}, {"id": "6993896891406630942", "title": "手写 call apply bind", "desc": "call > 调用方法：fnA.call(obj, arg1, arg2...)，作用：修改函数fnA的this指向obj，执行fnA并返回其执行结果 apply > 调用方法：fnA.apply(o"}, {"id": "6844903956401881096", "title": "帮你揭开函数式编程的底层面纱——喜提国庆buff", "desc": "祝：我和我的祖国，当然还有各位小伙伴，国庆快乐哈！国庆 buff 加持， bug 退散。 如今我再看这篇文章的时候，发现有些观点并不深入，没有那种直接本质的穿透感。于是，我想重新对函数式编程的理论篇进行一次高纬度的概括。 在本文中，我将通过背景加提问的方式，对函数式编程的本质、…"}, {"id": "6964006257715838984", "title": "npm 依赖管理细节分析", "desc": "前言 提起 npm，大家第一个想到的应该就是 npm install 了，但是 npm install 之后生成的 node_modules 大家有观察过吗？package-lock.json 文件的"}, {"id": "6993948920929845279", "title": "初探javascript设计模式-责任链模式", "desc": "责任链模式就是某个请求需要多个对象进行处理，从而避免请求的发送者和接收之间的耦合关系。将这些对象连成一条链子，并沿着这条链子传递该请求，直到有对象处理它为止。"}, {"id": "6874147411732725767", "title": "力导向树形图算法的推导与优化", "desc": "为给定的图找到美观的布局是一个众所周知的难题。没有已知的解决方案能可靠地为任意的图找到美观的布局, 特别是对应密集连接的大型图, 做到这一点尤其困难。但是对于某些特定类型的图, 例如, 平面图(可以在没有彼此相交的情况下绘制)存在有效的布局方法。在图的绘制过程中, 我们需要关注…"}, {"id": "6997575489745322014", "title": "Promise 对象方法---Promise.all()", "desc": "Promise.all() Promise.all() 方法接收一个promise的iterable类型（注：Array，Map，Set都"}, {"id": "6946094725703139358", "title": "webpack核心模块tapable源码解析", "desc": "上一篇文章我写了tapable的基本用法，我们知道他是一个增强版版的发布订阅模式，本文想来学习下他的源码。tapable的源码我读了一下，发现他的抽象程度比较高，直接扎进去反而会让人云里雾里的，所以本文会从最简单的SyncHook和发布订阅模式入手，再一步一步抽象，慢慢变成他源…"}, {"id": "6844904177731141639", "title": "前端自动生成图片并下载（不到60行代码）", "desc": "由于一些简单的图片拼合需要处理（大概8000张），但是又没有找到合适的傻瓜软件能够很好地解决需求，同时也很令人头疼的是nodejs里面图片处理库，基本上没几个好用，且安装费时费劲 （当然我还是装了）。作为一个有追求的前端，如果能不依靠其他的东西，直接在前端页面上实现它不香么？于…"}, {"id": "6981456743767212062", "title": "jest 实战总结", "desc": "单元测试是指的对软件中最小单元进行测试和验证。单元测试一般是对于业务逻辑的测试，不论是业务逻辑组件还是 UI 库，校验的目的都是验证具体执行逻辑是否正确。"}, {"id": "6997410947987931149", "title": "边学边译JS机制-- 37.DOCK 化Node应用", "desc": "Docker是一个工具，简化团队间应用开发环境。应用被打包在一个容器中，让开发者在开发，测试和部署的时候具有更好的体验。这个容器是由Docker 镜像创建的，所有的依赖和运行时信息都在里面运行。 最近"}, {"id": "6993892108138463263", "title": "堆栈执行及闭包", "desc": "主题 底层机制 闭包理解 This总结 底层机制 相关名词 JS执行平台 不同的浏览器 Nodejs webview 不论在哪一种平台上执行 JS 都需要代码执行的环境 环境执行栈 不论何种编程语言编"}, {"id": "6844904135452524552", "title": "万万没想到，你是个套路满满的parseUrl", "desc": "当你看到parseUrl的时候，首先映入眼帘的应该是曾几何时在面试的时候，或多或少都有被提及到的问题我们不用太关心面试方面的东西，放轻松，不要带着心理压力，即使它是套路满满，我们也依然能轻松搞定par"}, {"id": "6992205283732766750", "title": "JS的二进制家族：Blob、ArrayBuffer和Buffer | 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 Blob、ArrayBuffer和Buffer 都是前端的二进制流数据 Blob: 前端的一个专门用于支持文件操作的二进制对象 ArrayB"}, {"id": "6982809214267703304", "title": "JavaScript 原型链", "desc": "原型其实每天都在用，理解原型就是理解一个底层的逻辑概念。本文只讲原型，争取能用最简单是话术语，讲明白原型的概念。"}, {"id": "6908885198381776910", "title": "在前端业务场景下的设计模式", "desc": "前端的代码也是需要设计的，话虽如此，但即便看了很多设计模式的书籍，也无法真正应用起来。后来发现还是需要真实业务场景入手，思考在面对复杂多变的需求时如何编写更简洁、更容易维护的代码。本文从这个角度入手，整理了自己在前端业务开发中遇见的一些设计模式。 本文不会介绍相关的概念，也不会…"}, {"id": "7005396118099984421", "title": "JS -- 原型及原型链模式", "desc": "原型 每一个函数数据类型的值，都有一个天生自带的属性：prototype（原型），这个属性的属性值是一个对象（用来存储实例公用的属性和方法的） 普通函数 类（自定义类和内置类） 2.在prototyp"}, {"id": "6844903517073702926", "title": "Q：你了解异步编程、进程、单线程、多线程吗？", "desc": "同步：一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去。 异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。 进程：狭…"}, {"id": "6844903649454325773", "title": "ES6 Promise的使用和理解", "desc": "JS语言的执行环境是“单线程”的，即指一次只能完成一件任务；如果有多个任务，那么必须排队，前面一个任务完成，再执行后一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器…"}, {"id": "6844903609822363661", "title": "Event Loop是个什么玩意：从 Vue 的 nextTick 说起", "desc": "熟悉 Vue 的同学们都知道，Vue 有个 nextTick 方法，用来异步更新数据。 看起来似乎一切正常，我们在给数组添加了一条数据之后，页面也确实对应的更新了。可是，当我们在打印这个 ul 元素里 li 的 length 时，问题出现了： 这时候如果我们有需求需要通过 li…"}, {"id": "6983665207360880653", "title": "Rxjs vs Promise", "desc": "本文重点是强调 Promises 和 Observables 的差异。这样做的目的是，如果你已经了解了 Promises(反之亦然)，就可以更容易地理解 Observables。让我们一起来学习吧！！"}, {"id": "6844903849858170888", "title": "代码注释的艺术，再也不怕被说代码可读性差啦！", "desc": "可能现在不管大家去面试还是在公司上班都会涉及到代码可读性，或者是代码规范。优秀的代码注释可以提高代码可读性，当然优秀的命名规范也可以啦。我们这里就讨论一下代码注释。代码注释可能就相当于产品使用说明书，当别人看到你的代码的时候，知道你的代码是干嘛的，是怎么使用的。我们所熟悉的可能…"}, {"id": "7002566140165619726", "title": "浏览器历史记录有关系的内容", "desc": "一、浏览器历史记录有关系的内容 window.history 1.历史记录的回退 window.history.back(); 2.历史记录的前进 window.history.foword(); 3"}, {"id": "6844904001717141518", "title": "多维数组转一维数组（降维的多种方式）", "desc": "很多时候，我们的数组层次并没有那么深，只有个二维数组，所以我们可以了解下一些快捷的使用方法。 既然二维降一维的小伙伴们看过之后，我们就可以进一步了解多维降一维数组了。 我们先了解下通过递归降维。 在这个递归方法中，我们判断每一项是不是数组。 如果是，则进一步递归，直到其不是为止…"}, {"id": "6844903928719491080", "title": "【干货】前端进阶应该知道的这些调试方法", "desc": "方法虽然简单粗暴，但是它是实用且简单的。然而，如果 BUG 十分复杂，涉及到跨组件甚至是源码，采用打 log 的方式就变得十分麻烦了； F12 打开调试工具之后刷新页面，断点就会停在 created 里了。 当然，这里只是做简单的示例，实际情况更加复杂的时候，右边的堆栈可以让你…"}, {"id": "6859174196841447438", "title": "精读《可视化搭建思考 - 富文本搭建》", "desc": "「可视化搭建系统」——从设计到架构，探索前端的领域和意义 这篇文章主要分析了现阶段可视化搭建的几种表现形式和实现原理，并重点介绍了基于富文本的可视化搭建思路，让人耳目一新。 基于富文本的可视化搭建看似很新颖，但其实早就被广泛使用了，任何一个富文本编辑器几乎都有插入表格功能，这就…"}, {"id": "6981587671789338661", "title": "前端人需要了解的JsDoc", "desc": "前端人需要了解的JsDoc 这是我参与新手入门的第一篇文章 前言 大家在写前端的时候，应该多多少少都知道JsDoc, 就算不知道JsDoc的大名，估计在看到一些代码的时候，就会惊呼，原来我之前就用过它"}, {"id": "6844903620878532616", "title": "异步解决方案----Promise与Await", "desc": "异步编程模式在前端开发过程中，显得越来越重要。从最开始的XHR到封装后的Ajax都在试图解决异步编程过程中的问题。随着ES6新标准的到来，处理异步数据流又有了新的方案。我们都知道，在传统的ajax请求中，当异步请求之间的数据存在依赖关系的时候，就可能产生很难看的多层回调，俗称'…"}, {"id": "6844903652289675278", "title": "[贝聊科技]首屏视频的优化过程（补充moov的研究）", "desc": "我司的官网首页——贝聊官网，首屏有一个自动播放的背景视频，一直被诟病视频加载慢、播放卡。刚开始以为是文件太大，或者是网速太慢，但当我去优化它的时候，发现并没有预想的简单。本文记录了优化过程和经验总结，希望能对读者有所帮助。 官网的首页由6屏组成,首屏主要内容是一个自动循环播放的…"}, {"id": "6844903686779453454", "title": "Vue解析--如何应对面试官提问", "desc": "近期不断面试中，面试官都会提一些关于Vue相关的源码和“全家桶”之类的问题。那么针对这些提问，我们应该如何更好应答呢？在这里我把对Vue的理解整理出来供大家来参考。 Vue是一套构建用户界面的渐进式框架，也是一个非常典型的 MVVM 的程序结构（model-view-viewm…"}, {"id": "6844903825124360200", "title": "传说中图片防盗链的爱恨情仇", "desc": "我们先来了解了解防盗链的原理，在 http 协议中，如果从一个页面跳到另一个页面，header字段里面会带个 Referer。图片服务器通过检测 Referer 是否来自规定域名，来进行防盗链。 如果盗用网站是 https 的 协议，而图片链接是 http 的话，则从 http…"}, {"id": "6980587457775403044", "title": "一个相当有意思的字符问题", "desc": "最近在实现一个功能，那就是显示图片的分辨率信息。 由于分辨率无非就是宽乘以高的格式嘛，比如 250x140 这样的。 然后我代码里面就实现成了这样子： dimension 就是分辨率对象，它有宽高两个"}, {"id": "6975753631895126030", "title": "前端小咸菜，那些年由js引发的血案", "desc": "这是我参与更文挑战的第 20 天，活动详情查看： 更文挑战 前端小咸菜，那些年由js引发的血案 1. var 的变量提升 1.1 题目一，以下程序分别打印什么？ 分析：因为var的变量提升，第一个打印"}, {"id": "6950550331327512583", "title": "JS - 如何判断一个变量是Array类型？如何判断一个变量是Number类型？（都不止一种）", "desc": "1.typeof操作符2.instanceof操作符（这个操作符和JavaScript中面向对象有点关系，了解这个就先得了解JavaScript中的面向对象。因为这个操作符是检测对象的原型链是否指向构"}, {"id": "6991755278911963173", "title": "JavaScript 导出 excel ，设置字体，列宽，行高，对其方式，合并单元格等效果｜8月更文挑战", "desc": "本文介绍了通过xlsx-style来实现浏览器端的 excel 下载并针对下载的 excel文件，设置字体、列宽、行高、合并单元格、对起方式等效果。"}, {"id": "6979831996159639588", "title": "从零开始学习3D可视化之事件的常用方法", "desc": "1、 绑定事件并添加条件 2、 同一个事件注册多个回调 3、 tag 标签 4、 设置事件优先级 5、 注册单次事件 事件不会自己执行，需要触发(即事件被触发之后才可执行)。审视任何JavaScrip"}, {"id": "6954965029313576973", "title": "是LHS查询还是RHS查询？编译器有话说", "desc": "结合JavaScript的部分编译原理，来学习区分是LHS查询还是RHS查询，并通过形象比喻让你更容易区分。希望本文对你有所帮助！"}, {"id": "6844903574535667720", "title": "记一次低级并严重的开发失误", "desc": "前端从事了超过两年，修复了无数的bug，写了无数的bug；挖了很多次坑，填了很多次坑；犯了很多次错，弥补了很多次，学习了很多次。一般而言，对于bug、坑，都是修复完了或者填完了，并且记住为什么会产生bug，为什么有坑，为什么犯错，怎么解决的，下次怎么避免，就行了，就学习到了。而…"}, {"id": "6844903513336610823", "title": "js的四种for循环", "desc": "深入了解JavaScript中的for循环来源：www.codeceo.com在ECMAScript5（简称ES5）中，有三种for循环，分别是：在2015年6月份发布的ECMAScript6（简称E"}, {"id": "6844903870708056078", "title": "10个流行的JavaScript面试题", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS 初学者总是对 this 关键字感到困惑，因为与其他现代编程语言相比，JS 中的这this关键字有点棘手。 “this” 一般是表示当前所在的对象，但是事情并没有像它应该的那样发生。JS中的this关键字由…"}, {"id": "6844903910868516871", "title": "JavaScript 竟然没有标准库?", "desc": "最近在SegmentFault解题，一个问题比较让我比较印象深刻：一个初学者试图在浏览器中导入Node.js的net模块。结果在控制台打印后是一个空对象。 对于有点Javascript经验的人来说，这是一个‘弱智’问题，怎么可以在浏览器端运行Node程序呢？因为这些Node模块…"}, {"id": "7002027977387016205", "title": "如何从无到有实现Promise（下）", "desc": "温故知新 上一篇《如何从无到有实现Promise（上）》中我们已经实现了一个看似可以正常工作的简易版 Promise ，不要认为这样就结束了，其实好戏才刚刚开始。 本篇我们继续改造和丰富这个 Prom"}, {"id": "7002028615940440094", "title": "老司机也翻车的闭包", "desc": "前置知识 es6之前，js中变量作用域分为两种：全局作用域、局部作用域。 学习闭包之前需要先了解作用域及变量提升的概念。《JS变量作用域&作用域链》，《js变量提升》 通过了解变量作用域我们知道，js"}, {"id": "7002029100177031205", "title": "前端如何实现hash路由", "desc": "路由发展 以前的路由都是由后端实现的，根据url来重新载入页面。但是近年来前端页面变得越来越复杂导致服务器端压力越来越大。自然出现了解决方案，通过url的改变，在不刷新页面的情况下，修改页面内容，这就"}, {"id": "6995466036858830884", "title": "JavaScript知识——JS怎么写、变量、逻辑运算符", "desc": "JS怎么写 写在script标签内 JS写在标签内，要加“；”，不加分号，浏览器会自动添加，但是会消耗一些系统资源，而且有些时候，浏览器会加错分号，所以开发中要加\";\" JS写在body的标签里面 可"}, {"id": "6989571810236825614", "title": "typeof数据类型检测/等号比较的数据转换/任意数求和", "desc": "typeof数据类型检测, 等号比较的数据转换, 任意数求和"}, {"id": "6844903704567644167", "title": "移动端rem怎样适配", "desc": "假设现在图上有个宽度100px的按钮，UI图是750px的图。 答案是我们应该写 100px / 2 = 50px。css里width = 50px; 就这样。 那为什么是100px除以2呢？？？因为iPhone的dpr = 2。 dpr的全称是window.devicePix…"}, {"id": "6930480423009157134", "title": "JS 深拷贝与浅拷贝", "desc": "其实在工作写代码和面试中，会经常碰到这两个概念：深拷贝，浅拷贝。但今天的重点是深拷贝。 浅拷贝就是直接将一个Object对象所有的属性和属性值复制给另一个Object对象。这样导致的后果是，新对象和老对象相同的Object类型的属性值在内存中的指向是一样的，也就是新对象和老对象…"}, {"id": "6971221013983920165", "title": "ES6新增方法", "desc": "这是我参与更文挑战的第8天，活动详情查看： 更文挑战 数组的解构 概念 在ES6中可以使用 [ 变量 ] 的形式按照一定的规则(下标匹配模式)从数组中提取对应的值 语法 注意 数组的结构可以有缺省值 "}, {"id": "6991733306073022471", "title": "【建议收藏】大前端yarn的命令-效率篇", "desc": "Yarn 对你的代码来说是一个包管理器。它可以让你使用并分享 全世界开发者的（例如 JavaScript）代码。 Yarn 能够快速、安全、 并可靠地完成这些工作，所以你不用有任何担心。"}, {"id": "6995192332664438791", "title": "js中this指向完全详解", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 函数中this的指向 先测一下你是否真的明白了this的指向 你可能一脸茫然道：这不是应该输出4吗？？咋输出0捏。（尼克杨脸） foo是执"}, {"id": "6844903638368780295", "title": "JavaScript 函数式编程", "desc": "应该很多童鞋都听过函数式编程（Functional programming）的概念吧，可能有的童鞋有听说过函数式编程但并不是特别了解，但其实在我们的开发过程中，或多或少都已经应用了函数式编程的思想。 相对于面向对象编程（Object-oriented programming）关…"}, {"id": "7005447984234102792", "title": "JavaScript系列 - 对象的基础知识", "desc": "介绍对象的基本知识，包括但不限于：对象声明、对象属性、对象属性描述符、[[get]]、[[set]]、判断属性、遍历属性、查找属性、对象的不变性、对象合并等等"}, {"id": "6935722510491222029", "title": "解决前端精度问题的JS库-math.js", "desc": "由于现在开发的软件都是零售、餐饮这方面的项目居多，自然就会对金额计算这块要求就会比较高。而js对精度这块计算一直存在缺陷，所以给大家推荐一个类库-math.js JavaScript 浮点数运算结果不对，是因为浮点数的存储问题导致计算结果不对。 Math.js是一个用于Java…"}, {"id": "6844904024693555213", "title": "immer.js 使用文档及在Redux项目中的实践", "desc": "Immer 是 mobx 的作者写的一个 immutable 库，核心实现是利用 ES6 的 proxy，几乎以最小的成本实现了 js 的不可变数据结构，简单易用、体量小巧、设计巧妙，满足了我们对JS不可变数据结构的需求。 无奈网络上完善的文档实在太少，所以自己写了一份，本篇文…"}, {"id": "6844903907647291400", "title": "JS函数式编程究竟是什么?", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 在长时间学习和使用面向对象编程之后，咱们退一步来考虑系统复杂性。 在做了一些研究之后，我发现了函数式编程的概念，比如不变性和纯函数。这些概念使你能够构建无副作用的函数，因此更容易维护具有其他优点的系统。 在这篇…"}, {"id": "6981050356381941797", "title": "ES6 详解Set和WeakSet集合", "desc": "每天都用数组，有没有过一个Moment，担心不小心插入了重复的值？使用Set集合吧！Set拥有特殊的数据结构，保证插入的值永远不会重复。"}, {"id": "6844903830409183239", "title": "JS 异步错误捕获二三事", "desc": "我们都知道 try catch 无法捕获 setTimeout 异步任务中的错误，那其中的原因是什么。以及异步代码在 js 中是特别常见的，我们该怎么做才比较？ 这段代码中，setTimeout 的回调函数抛出一个错误，并不会在 catch 中捕获，会导致程序直接报错崩掉。 所…"}, {"id": "6987669019998289956", "title": "js高德地图使用入门(1)", "desc": "从今天开始跟大家一起入门学习高德api的使用，争取天天更新文章，保证进度 1.准备工作： 登录地址完成注册，获取到key值 https://console.amap.com/dev/key/app 2"}, {"id": "6844903619846897672", "title": "csv和excel读取和下载", "desc": "同时，使用FileReader对象，web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容，可以使用File对象或者Blob对象来指定所要处理的文件或数据。FileReader 提供了如下 几个方法。 readAsText(file,encoding)：以…"}, {"id": "6844904198274809869", "title": "ES6常用但被忽略的方法（第二弹函数、数组和对象）", "desc": "ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "6950826293923414047", "title": "Vue 源码解读（3）—— 响应式原理", "desc": "详细讲解了 Vue 响应式的实现原理 以及从源码层次来回答一些和响应式相关的面试题 ........"}, {"id": "6949167656314830884", "title": "写给自己复习的js系列（1）-- 原型链", "desc": "这是最基本的一段通过构造函数新建对象的代码核心知识点进阶一上面说到了，函数既是对象又是函数，作为函数它拥有prototype属性，而作为对象，它拥有__proto__属性，函数既拥有__proto__"}, {"id": "6844903902123393032", "title": "你未必知道的49个CSS知识点", "desc": "本文的每一条，都是我曾经发过的掘金沸点，其中有很多条超过了百赞（窃喜）。 鉴于时不时有童鞋翻我以前的沸点，因此，本文收集了个人目前发过的所有CSS知识点动图，以便阅读。 需要说明的是，顺序仍是按当时发布顺序罗列的，还没有系统的总结，多多包涵。 另外这里，老姚谢谢各位一如既往的支…"}, {"id": "7007413630052335623", "title": "ES6新增语法", "desc": "ES6+: ECMA Script 2015; 一、 变量的声明 let 不能重复声明,可以重复赋值 作用范围:let 只在块级作用域内起作用 ： 全局作用域 3.let 没有声明前置"}, {"id": "6844904004007247880", "title": "(2.4w字,建议收藏)😇原生JS灵魂之问(下), 冲刺🚀进阶最后一公里(附个人成长经验分享)", "desc": "笔者最近在对原生JS的知识做系统梳理，因为我觉得JS作为前端工程师的根本技术，学再多遍都不为过。打算来做一个系列，一共分三次发，以一系列的问题为驱动，当然也会有追问和扩展，内容系统且完整，对初中级选手会有很好的提升，高级选手也会得到复习和巩固。这是本系列的第三篇。 本次分享的主…"}, {"id": "7002915023446081573", "title": "潮流前端周刊（第46期）- 大阪夜景", "desc": "封面图为一张18年的老图，摄于大阪的一个高楼透明玻璃往外望全城的夜景。 前端技术 如何防止他人恶意调试你的web程序 https://juejin.cn/post/700078441485880525"}, {"id": "6999432149732425764", "title": "前端自动生成路由", "desc": "前言 准备工作 在开始之前，先检查一下你的版本（我是基于react的，vue的也是一样）： react >= 16 npm <= 11 （题主的是10.15.3） gulp 3.9.1（3.+） 由于"}, {"id": "6996546764295634980", "title": "ECMAScript 新特性语法，一次性掌握 ES6+", "desc": "牛人不是培养出来的，都是自己努力拼搏出来的，靠谁都不如靠自己，自己都不想主动多学习，只期望用一把锤子，就能搞定所有钉子，那你还不如想想怎么买彩票中500万吧，还更实际些，喜欢收藏，不喜勿喷，谢谢"}, {"id": "7001706202115604511", "title": "前端性能优化系列 | 加载优化", "desc": "“这是我参与8月更文挑战的第18天，活动详情查看： 8月更文挑战” 1. 资源加载优先级 在浏览器发起网络请求时，并非每个字节都具有相同的优先级，所以，浏览器通常会对所要加载的内容进行推测，将相对重要"}, {"id": "6962897454781956133", "title": "前端进阶：细数2年内我做的15个开源项目", "desc": "从19年到21年,笔者利用空余时间陆陆续续做了一些开源项目, 大部分开源项目都立足于企业实际业务需求, 所以笔者觉得有必要做一个总结和复盘."}, {"id": "6995706341041897486", "title": "赠你13张图，助你20分钟打败了「V8垃圾回收机制」！！！", "desc": "前言 大家好，我是林三心。前两天，无意中看到了B站上一个讲V8垃圾回收机制的视频，感兴趣的我看了一下，感觉有点难懂，于是我就在想，大家是不是跟我一样对V8垃圾回收机制这方面的知识都比较懵，或者说看过这"}, {"id": "7004857408203784200", "title": "彻底弄懂css中的透明度", "desc": "有时候，我们在css设置透明度来实现特殊的效果。css中共有两种透明度方式：opacity和rgba，那么两者又有什么区别呢？ opacity opacity设置的透明度会被子元素继承。 rgba r"}, {"id": "6932610749906812935", "title": "手把手教你写一个脚手架", "desc": "最近在学习 vue-cli 的源码，获益良多。为了让自己理解得更加深刻，我决定模仿它造一个轮子，争取尽可能多的实现原有的功能。 尽可能用最少的代码实现一个最简版本的脚手架。 在 1 的基础上添加一些辅助功能，例如选择包管理器、npm 源等等。 实现插件化，可以自由的进行扩展。在…"}, {"id": "7000012794804305928", "title": "由一道关于Promise.all的面试题引发的思考", "desc": "懂不懂Promise.all的含金量啊！！不懂的话进来研究研究呗~本文介绍了Promise.all的用法及其实现原理，以及对一道面试题的解答，快来一起探讨8！~"}, {"id": "6989764387275800607", "title": "React 中的一些  Router 必备知识点", "desc": "前言 每次开发新页面的时候，都免不了要去设计一个新的 URL，也就是我们的路由。其实路由在设计的时候不仅仅是一个由几个简单词汇和斜杠分隔符组成的链接，偶尔也可以去考虑有没有更“优雅”的设计方式和技巧。"}, {"id": "7002074555745304583", "title": "运用logaX \"优雅\" 展现可视化图表极端数据🎨", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 可视化开发是前端开发的重要分支之一。日常的数据需求需要我们去熟练使用Echarts、Antv、Highcharts等开源可视化库。可"}, {"id": "6991701614612447239", "title": "面对 this 指向丢失，尤雨溪在 Vuex 源码中是怎么处理的", "desc": "Vuex 源码中是如何处理 this 指向丢失的。 跟着学习部分 Vuex 源码实现。 复习this指向、call、严格模式等知识"}, {"id": "7002415744977731592", "title": "解决封装AJAX遇到的几个问题", "desc": "今天前面两篇文章的探索，我们已经封装好AJAX，但是对比其他人封装的，我们这个还存在许多问题，需要完善。下面一起来看看"}, {"id": "6898962197335490573", "title": "前端高效开发必备的 js 库梳理", "desc": "之前有很多人问学好前端需要学习哪些 js 库, 主流框架应该学 vue 还是 react ? 针对这些问题, 笔者来说说自己的看法和学习总结. 首先我觉得在学习任何知识之前必须要有一个明确的学习目标, 知道自己为什么要学它, 而不是看网上说的一股脑的给你灌输各种知识, 让你学习…"}, {"id": "7002000624644521998", "title": "浅谈「我爱掘金」3D文字技术方案", "desc": "之前在群里一直有粉丝对我做的3d文字感兴趣，今天它来了，我是如何去做的。本篇文章可能不会讲太多代码层面的东西，主要是一个技术方案从选型到最终实现中的遇到的一些问题。 主要是结合自己项目做的一些思考。希"}, {"id": "6844903936365690894", "title": "图解javascript原型链", "desc": "本文永久有效链接: https://github.com/AttemptWeb...... 原型链和原型对象是js的核心，js以原型链的形式，保证函数或对象中的方法、属性可以让向下传递，按照面向对象的说法，这就是继承。而js通过原型链才得以实现函数或对象的继承，那么下面我们就来…"}, {"id": "7001402205978755085", "title": "自制浏览器网页背景是什么体验？", "desc": "浏览器一键换肤插件制作 1、思路 2、代码 （1）插件配置文件 配置文件相关属性可以查看 chrome扩展：manifest.json文件相关字段 （2）弹出按钮页面 （3）切换背景的相关逻辑代码 3"}, {"id": "6870080206087028749", "title": "什么是节流和防抖，以及它们的使用场景", "desc": "1. 节流 效果：即使一段时间内大量触发同一事件，在回调函数执行一次之后，该回调函数在指定的时间期限内不再工作，直至过了这段时间才重新生效。 2. 防抖 效果：在某个时间段内，不管你触发多少次事件，只执行一次回调函数。 3. 事例 可以看到子弹射出后，要等待一段时间⏱才能，再次…"}, {"id": "6844903901595090958", "title": "今天，我明白了JS事件循环机制", "desc": "js是一门单线程的编程语言，也就是说js在处理任务的时候，所有任务只能在一个线程上排队被执行，那如果某一个任务耗时比较长呢？总不能等到它执行结束再去执行下一个。 举个例子来说：比如你去银行办理业务，都需要领号排队。银行柜员一个个办理业务，这时这个柜员就相当于一个js线程，客户排…"}, {"id": "6844903882167074823", "title": "[译]现代框架存在的根本原因", "desc": "我曾见过许多人盲目地使用像 React，Angular 或 Vue 这样的现代框架。这些框架提供了许多有趣的东西，但通常人们会忽略它们存在的根本原因。 它们适合做单页应用。 邮箱，每个地址的右侧都有一个删除按钮。 这个表单是一个包含电子邮件地址和唯一标识符的对象数组。最初它将是…"}, {"id": "7005935927566565412", "title": "JavaScript系列 - JavaScript 的执行过程和作用域", "desc": "本文会介绍 JavaScript 的大致执行过程：词法分析、语法分析、编译时和运行时。之后介绍了作用域的基础知识以及 JavaScript 的词法作用域。"}, {"id": "6977753698759868452", "title": "我儿时的小梦想-开发贪食蛇小游戏", "desc": "前言 记得读书的年代,有一款手机游戏叫贪食蛇,以前的手机就几款游戏，同学们都废寝忘餐地玩，就像现在玩王者荣耀一样火。只不过穷人的孩子没有手机，看着人家玩得不亦乐乎o(╥﹏╥)o,就立志我以后我直接搞一"}, {"id": "6962554050990571556", "title": "Javascript 干货", "desc": "Javascript 重点知识篇之算法底层机制数据类型检测this指向new具体做了什么以及一些案例方便大家更好理解"}, {"id": "7001393888057376805", "title": "关于模块化，你是否还有很多问号❓❓❓", "desc": "前言 JS 模块化是一个很大的主题，网上相关的文章很多，但也参差不齐，甚至很多有明显的错误。写作本文的目的就是对前端模块化的知识做一个梳理，同时尽量保证正确性"}, {"id": "6844904023003234311", "title": "回到基础：什么是DOM及DOM操作？", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 文本主要介绍 **文档对象模型(DOM)**了解什么是DOM操作，以及如何使用砶 DOM API 与 JS 中的 Web 页面进行交互。 DOM(文档对象模型)是针对于xml但是扩展用于HTML的应用程序编程接…"}, {"id": "6994244679332020254", "title": "JavaScript温故而知新 - 作用域的理解", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 作用域 作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合 换句话说，作用域决定了代码区块中变量和其他资源的可见性 举"}, {"id": "6996853712165535751", "title": "进阶教程 8. 继承详解", "desc": "一文掌握ES6、ES5的各种继承，包含原型链继承、借用构造函数继承、原型式继承、组合继承、冒充对象继承...."}, {"id": "6992482179414491149", "title": "手动实现bind函数", "desc": "手动实现bind函数 > 1. bind返回 的函数如果作为构造函数搭配new关键字出现的话，绑定的this就会‘被忽略’.为了实现这样的规则，开发者需要考虑如何区分这两种调用方式。具体来说就是，要在"}, {"id": "6985127614922883109", "title": "Vue封装全局注册弹窗组件，实现全局调用。", "desc": "编写一个全局都可以调用的登录注册组件，实现权限控制，只要没登录都弹出此弹窗，主要采用的全局组件注册思想。"}, {"id": "6844903859194691591", "title": "基于\"发布-订阅\"的原生JS插件封装", "desc": "大家好，我是神三元。 今天我们来做一个小玩意，用原生JS封装一个动画插件。效果如下： 这个飞驰的小球看起来是不是特有灵性呢？没错，它就是用原生JS实现的。 接下来，就让我们深入细节，体会其中的奥秘。相信这个实现的过程，会比动画本身更加精彩! 封装一个插件，将小球的DOM对象作为…"}, {"id": "6844903635168526343", "title": "Javascript装饰器的妙用", "desc": "最近新开了一个Node项目，采用TypeScript来开发，在数据库及路由管理方面用了不少的装饰器，发觉这的确是一个好东西。 装饰器是一个还处于草案中的特性，目前木有直接支持该语法的环境，但是可以通过 babel 之类的进行转换为旧语法来实现效果，所以在TypeScript中，…"}, {"id": "6961339083650138119", "title": "【v8引擎】Javascript内存机制之问——数据是如何存储的？", "desc": "此次分享的主题是JS内存机制和深浅拷贝的实现，是一块逻辑环环相扣、语言简单但内容很有深度的内容，相信对不同级别的选手都有不同的帮助。"}, {"id": "6987325687661068318", "title": "Thunk 函数是什么鬼", "desc": "JS中的thunk函数 我们先来看一个 thunk 实现 ajax 的例子 这时候就有小伙伴要说了，这不是 currying 吗？怎么能叫 thunk？区别在于解决的问题不同，首先 两者都是符合函数式"}, {"id": "6844903586275524615", "title": "ES6会这些就够了", "desc": "1. let、const 解构是es6新特性，可以对数组对象内容直接解析。 es6中加入了“`”反引号，反引号中${}处理模版字符串。 4. 函数 5. 数组 6. 对象 7. Class 类 8. Generator 9. async await"}, {"id": "7001322057539518501", "title": "JS之从数据类型和堆栈内存来理解深浅拷贝", "desc": "一、基本类型和引用类型 值类型(基本类型) 引用数据类型 二、栈内存和堆内存 栈内存(stack) 堆内存(heap) 堆栈内存之间的联系 三、浅拷贝与深拷贝 浅拷贝 深拷贝 JSON.stringi"}, {"id": "6844904197133975560", "title": "ES6常用但被忽略的方法（第一弹解构赋值和数值）", "desc": "ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "6991852539842920484", "title": "图解Promise", "desc": "本文将以图解和源码相结合的方式介绍Promise的原理，主要以Promises/A+规范为主，帮助大家更好地理解Promise。"}, {"id": "6942357662482825223", "title": "z-index的值明明很大为何却会在一个很小的值的下面？", "desc": "最后一种方案（特指绝对定位）将会把元素从正常文档流中完全移走，其最终的落脚点将取决于开发者。 通过设置 top，left，bottom 和 right 的值，你可以在二维空间中对元素进行定位，但 CSS 同时也允许你使用 z-index 把它放置在三维空间中。 表面看起来，z-…"}, {"id": "7001115441695309837", "title": "【TypeScript】简单介绍一下泛型", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 泛型简单介绍 （1）概念 泛型： 它是在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性 （2）使用"}, {"id": "6991721686240346126", "title": "数字孪生可视化案例分析：河南洪灾如何科技守护", "desc": "此次河南郑州特大暴雨致多人遇难，无数房屋倒塌，交通瘫痪，给国民经济带来巨大损失。幸好在党和国家的领导下，洪灾得到有效缓解。无论是台风还是洪涝灾害，协同防汛，建设防护洪涝的应急保障机制已经迫在眉睫。处于"}, {"id": "7000646712561762318", "title": "JS的基础语法", "desc": "1. 表达式和语句 语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。 1+3 是一个表达式， var a = 1+3 是一个语句。 表达式和语句不能完全区分。一般来"}, {"id": "6992211225446711326", "title": "JS中的this指向", "desc": "this作为Javascript语言中的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。简言之，this是用来指向对象。"}, {"id": "6984357222427918372", "title": "DOM级别及事件流", "desc": "一、DOM是什么？ 简单来讲，DOM就是一组API（接口）。它将一份结构化文档看做一棵树，这棵树由各种各样的节点构成，即节点树。DOM不是专为HTML设计的，它是通用型的标准，为所有标记语言而设计。 "}, {"id": "6844904112346103816", "title": "手写Promise", "desc": "众所周知，Promise是ES6引入的新特性，旨在解决回调地狱。下面是一个简单的例子：控制接口调用顺序： apiA-->apiB-->apiC。复杂的业务，开发人员会裂开。后生在此向老前辈致敬。 因此Promise/A+规范应运而生，ES6的Promise就是遵循规范开发出来的…"}, {"id": "6985900898778087461", "title": "js中的深浅拷贝", "desc": "学习深浅拷贝先学习数据类型 js中的数据类型 一般来说我们分为基本数据类型（原始类型）和引用类型（复杂类型）。 原始类型：在存储时变量中存储的是值本身，包括string ，number，boolean"}, {"id": "6862305213148381198", "title": "React Router v6 使用指南", "desc": "在本教程中，让我们看一下如何使用React Router v6库创建路由。请注意，在撰写本文时，React Router v6仍处于测试阶段。本教程将带你一窥该库即将推出的一些新功能。 如果你有在React应用程序中使用路由的经验，你可能已经知道在过去的几年里Reach Rou…"}, {"id": "6844903749270372365", "title": "聊聊对象深拷贝和浅拷贝", "desc": "slice() 方法返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。"}, {"id": "6844903688830468109", "title": "带你五步学会Vue SSR", "desc": "SSR大家肯定都不陌生，通过服务端渲染，可以优化SEO抓取，提升首页加载速度等，我在学习SSR的时候，看过很多文章，有些对我有很大的启发作用，有些就只是照搬官网文档。通过几天的学习，我对SSR有了一些了解，也从头开始完整的配置出了SSR的开发环境，所以想通过这篇文章，总结一些经…"}, {"id": "6844903647806128135", "title": "Vue-router的使用姿势", "desc": "我们不提动态组件了，开始router了。常用的api，官网介绍的很详细了。记得看官方教程，别忘了官方的api 不管是什么路由的配置 还是vuex的配置等等，都有相应的规范，在普通js文件，不按规范也不会怎么样，在ts文件，就会报错了。前提是有兴趣玩ts。 其实配置很简单，就这么…"}, {"id": "7000669241871433765", "title": "Math", "desc": "Math对象 Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()，像 Math.sin() 这样的函数只是函数，不是某个对象的方法。无需创建它，通过把 M"}, {"id": "6959138179664314398", "title": "使用 lit 编写 Web Components 简化 Layui 代码", "desc": "有没有一种方式在不增加多少复杂性和学习成本的前提下使得 Layui 项目能应用上组件开发呢？答案是有的，Web Components 就是其中一个，其比 React 简单，且受浏览器原生支持。"}, {"id": "6844904016778887175", "title": "Vue 和递归组件", "desc": "有人说递归很难理解，也有人不这么认为。递归函数简单的定义是：一个自调用函数，这意味着它将在执行的某个时刻调用自己。 咱们无法决定哪一个更重要。如果没有结束点，递归将成为一个无限循环，但是如果一组规则就不能实现期望的行为，所以两者都存在才能使它正常工作。 在 Vue 中，递归非常…"}, {"id": "6844903891100762125", "title": "技术栈中的爱马仕？Facebook发布全新JavaScript引擎：Hermes", "desc": "今天，想向你们介绍技术栈中的爱马仕！"}, {"id": "6908516995889790984", "title": "精读《设计模式 - Proxy 代理模式》", "desc": "Proxy（代理模式）属于结构型模式，通过访问代理对象代替访问原始对象，以获得一些设计上的便捷。 意图：为其他对象提供一种代理以控制这个对象的访问。 如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准备了三个例子，让你体会什么…"}, {"id": "6844903934432116743", "title": "Cmder&iTerm美化你的终端", "desc": "在npm的日益壮大下，开发项目时我们无法离开终端，但是如果你作为一名具备美感的前端，可能会吐槽为什么系统自带的终端会那么丑。下面贴上Windows和MacOS自带的终端界面。 有没有办法对它进行美化或者使用第三方终端工具代替它呢。答案是肯定的，在此我推荐两款终端工具，分别代替W…"}, {"id": "6984812261781012494", "title": "「✍ Q: 对象扁平化&树形展开」", "desc": "现有两种来自同一数据源的结构 树状结构 扁平结构 现要求对两种数据结构进行相互转换 扁平化 给定一个树状对象，要求转换成一个扁平对象 递归 在不考虑性能的情况下，递归是最快的实现方法 展开 给定一个扁"}, {"id": "6998727762643009573", "title": "JS判断数据类型的六种方式", "desc": "本文整理了js中判断数据类型的六种方式，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6953035396330881032", "title": "拖拽，让用户更爽的交互操作", "desc": "前端业务中，产品想要通过拖拽来实现的一些交互十分广泛。因为比起点击或触摸之类简单操作，拖拽能够更直接的、可视化的响应用户操作。拖拽交互发生得如此自然，以至我们甚至都没有意识到，拖拽操作存在的本身就是提"}, {"id": "6844903604013252621", "title": "打造跳跃音波播音乐放器(Electron+Nodejs+React)", "desc": "Electron可以让我们使用html,css,javascript来搭建跨平台（Windows、macOS、Linux）的桌面应用。下面通过Electron+Nodejs+React来实现一个支持播放在线音乐及本地音乐的播放器。播放器设计风格为windows的Fluent D…"}, {"id": "6844903667426918408", "title": "揭密React setState", "desc": "setState(updater, callback)这个方法是用来告诉react组件数据有更新，有可能需要重新渲染。它是异步的，react通常会集齐一批需要更新的组件，然后一次性更新来保证渲染的性能，所以这就给我们埋了一个坑： 那就是在使用setState改变状态之后，立刻通…"}, {"id": "7001065972463304734", "title": "EventLoop", "desc": "这是我参与8月更文挑战的第14天，活动详情查看： 8月更文挑战”https://juejin.cn/post/6987962113788493831"}, {"id": "6847902216028848141", "title": "如何中断Promise？", "desc": "这样的话后面所有的 then、catch 和 finally 都不会执行了。 注意这里是中断而不是终止，因为 Promise 无法终止，这个中断的意思是：在合适的时候，把 pending 状态的 promise 给 reject 掉。例如一个常见的应用场景就是希望给网络请求设置…"}, {"id": "6844904153739706375", "title": "实现埋点上报方案过程中的思考", "desc": "任何一个重视数据的公司与部门，都不会忽略前端埋点数据上报的作用。 从实际开发经验来回答：实际上并没有那么简单。为了能够将收集的用户数据最终展示并从中分析得出有意义的数据，这其中涉及的细节比想象的要多。 在本文中，我们会从两个方面来思考数据埋点上报的过程：数据收集与数据上报。 对…"}, {"id": "6994331922067357709", "title": "深入JS 之 数据类型解读 数据类型转换", "desc": "4. 数据类型解读之 number、Symobol、BigInt 5. 数据类型转换 5.1 把其他数据类型转换为number 5.2 把其它类型转换为布尔 5.3 把其它类型转换为string"}, {"id": "6844903682698379277", "title": "原来vue的slot可以这么玩转", "desc": "“下拉加载更多”的场景在移动端相对来说出现得比较多。我们知道下拉触底都要监听触底事件，触底的操作也相同（去后台拉取数据），分页算法也相同，因此我们会想到把它做成一个组件，重用这些相同的地方，让其他地方可以共用这个组件，从而减少代码量。 然而，下拉loading并不是一个可以完全…"}, {"id": "6884987711074091016", "title": "事件循环机制Event loop", "desc": "我们经常听到这样一句话，Javascript是一门在单线程环境下运行的语言，什么是单线程呢？就是同一时间只能做一件事那为什么他不能设计成多线程呢？这样就能在同一时间做多件事。 也就是说web workers是子线程，由主线程控制，也就是说他相当于主线程的辅助，为了避免主线程被阻…"}, {"id": "7000916663524671496", "title": "JS继承详细解（带图说话）", "desc": "原型链的作用你了解吗？原型链就是给js的继承提供关联关系，可以从原型链图中知道对象上的属性及方法是如何继承过来的"}, {"id": "6844903645905977357", "title": "node-ffi使用指南", "desc": "在nodejs/elctron中，可以通过node-ffi，通过Foreign Function Interface调用动态链接库，俗称调DLL，实现调用C/C++代码，从而实现许多node不好实现的功能，或复用诸多已实现的函数功能。 node-ffi通过Buffer类，在C代…"}, {"id": "6986164967435141128", "title": "Web Worker入门(内部分享笔记)", "desc": "`Web Worker `的作用，就是为 `JavaScript` 创造多线程环境，允许主线程创建 `Worker` 线程，将一些任务分配给后者运行。在主线程运行的同时，`Worker` 线程在后台运"}, {"id": "6886458031777808397", "title": "你不知道的typeof string 竟然等于object", "desc": "明天是1024,我会在公众号送出【100个现金红包】,不关注也可以参与抽奖，大家记得参与就好。（并非为了宣传公众号，就简单发个福利，让大家高兴热闹下,不少号主也经常抽到我的礼品） 还有一个原因是：字符串竟然有方法，但是它又不可以设置属性。让我们用代码揭晓 因为字符串是基础数据类…"}, {"id": "6961324184655888392", "title": "【译】JavaScript 代码整洁之道-复杂判断", "desc": "复杂的条件判断会使代码难于理解，因而增加了维护成本。此外，条件的复杂程度通常也是衡量代码耦合程度的指标之一。如果想要提高代码质量，最好避免编写复杂条件判断的代码"}, {"id": "6992213107846807560", "title": "JavaScript之观察者模式", "desc": "设计模式是开发人员在开发过程中面临的一般问题的解决方案。这些解决方案是众多开发人员经过相当长的一段时间的试验和错误总结出来的。其中，观察者模式就是前端比较常用的一种了，许多场景就是基于该模式下实现的。"}, {"id": "6844903679644958728", "title": "深入探究Immutable.js的实现机制（一）", "desc": "本文是我正在更新的深入探究immutable.js系列的第一篇。 Immutable.js 由 Facebook 花费 3 年时间打造，为前端开发提供了很多便利。我们知道 Immutable.js 采用了持久化数据结构，保证每一个对象都是不可变的，任何添加、修改、删除等操作都会…"}, {"id": "6844903618999500808", "title": "10分钟了解JS堆、栈以及事件循环的概念", "desc": "其实一开始对栈、堆的概念特别模糊，只知道好像跟内存有关，又好像事件循环也沾一点边。面试薄荷的时候，面试官正好也问到了这个问题，当时只能大方的承认不会。痛定思痛，回去好好的研究一番。 我们将从JS的内存机制以及事件机制和大量的🌰（例子）来了解栈、堆究竟是个什么玩意。概念比较多，…"}, {"id": "6995180538537443342", "title": "小小装饰器", "desc": "装饰器可对指定的类/类方法/属性/参数进行装饰,扩展其功能。 它本质是一个函数,底层实现上依赖Object.defineProperty。"}, {"id": "6844904082046451719", "title": "前端实现压缩图片功能", "desc": "最近在做一个移动端h5上传图片的功能，本来这个功能并不复杂，只需要将图片文件通过axios传到服务端即可，但是考虑到现在手机设配的拍照功能十分强大，随便一张照片都能动辄五六兆，而服务端的要求是上传图片必须小于两兆，而且直接传这么大图片，带宽它也受不了，所以前端进行压缩图片就成了…"}, {"id": "6924974792688959496", "title": "富文本如何实现本不支持的功能", "desc": "轻松的打开需求文档，瞄了一眼。。。。。。。。。。。。。 迅速打开Tinymce文档，我心凉了半截，这只有图片文件上传上传的回调方法。链接插入上传想都不要想。 看我如何暴打Tinymce，逼他上演一场宫廷大戏，做出不支持的功能，满足需求，走上。。。 本文用另一种角度完成了，在富文…"}, {"id": "6999905298127274014", "title": "「字符串」leetcode 7.取反转数（简单）", "desc": "一、了解题目 附上原题链接：7. 整数反转 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1]"}, {"id": "6844903751271055374", "title": "前端开发中的Error以及异常捕获", "desc": "在前端项目中，由于JavaScript本身是一个弱类型语言，加上浏览器环境的复杂性，网络问题等等，很容易发生错误。做好网页错误监控，不断优化代码，提高代码健壮性是一项很重要的工作。本文将从Error开始，讲到如何捕获页面中的异常。文章较长，细节较多，请耐心观看。 JavaScr…"}, {"id": "6997978685064085541", "title": "【日拱一卒】JavaScript事件循环机制（node篇）", "desc": "这是我参与8月更文挑战的第19天，活动详情查看： 8月更文挑战” 前言 接着昨天梳理到的浏览器事件循环，趁热情还在，今天顺手把Nodejs事件循环也给梳理掉。 nodejs简介 JavaScript是"}, {"id": "6844903560325398541", "title": "react-loadable原理浅析", "desc": "有兴趣的同学可以自行研究。 这样，你就会发现只有路由匹配的时候，组件才被import进来，达到了code splitting的效果，也就是我们常说的按需加载，\b代码分块，而不是一开始就将全部组件加载。 可以观察到，点击不同的路由都会加载一个chunk.js，这就是我们所分的块。…"}, {"id": "6987603312237346830", "title": "如何使用jscodeshift+Commander来开发一个简易的重构脚手架", "desc": "开发多语言转换工具小记 有点标题党啦。其实文章就是个开发总结。 前言 最近我司有个多语言需求，考虑到一个个手动替换，不是个好方法，通过查找资料，咱就找到了字节前端如何基于 AST 做国际化重构？，这篇"}, {"id": "6844903871504973837", "title": "【进阶 7-3 期】[译] Throttle 和 Debounce 在 React 中的应用", "desc": "使用 React 构建应用程序时，我们总是会遇到一些限制问题，比如大量的调用、异步网络请求和 DOM 更新等，我们可以使用 React 提供的功能来检查这些。 在这篇文章中，我们将研究如何在不使用 React 提供的功能下来改进 React 应用程序性能，我们将使用一种不仅仅适…"}, {"id": "6991434994765955080", "title": " JS 原生方法原理探究（十）：如何手写实现 Promise/A+ 及其方法？", "desc": "这是 JS 原生方法原理探究系列的第十篇文章。本文会介绍如何手写一个符合 Promise A+ 规范 的 Promise，并顺带实现 Promise 的相关方法"}, {"id": "6990596058870972446", "title": "JavaScript中的in运算符与数组", "desc": "前言 JavaScript中有很多怪异点，这个in运算符后接数组就很奇特（虽然大家很少用到这个）。语义上讲in是个介词，词性prep，表示在什么什么里面。但在js中可能就不太一样了。"}, {"id": "6970569912180244516", "title": "面试官：如何正确的判断Javascript中的数据类型？", "desc": "面试官：如何正确的判断Javascript中的数据类型？如何判断对象类型和原始类型？如何实现instanceof？"}, {"id": "6844903816895152141", "title": "[译] 图解 Map、Reduce 和 Filter 数组方法", "desc": "map、reduce 和 filter 是三个非常实用的 JavaScript 数组方法，赋予了开发者四两拨千斤的能力。我们直接进入正题，看看如何使用（并记住）这些超级好用的方法！ Array.map() 根据传递的转换函数，更新给定数组中的每个值，并返回一个相同长度的新数组。…"}, {"id": "6844903661596835854", "title": "通过HTTP的HEADER完成各种骚操作", "desc": "作为一名专业的切图工程师，我从来不care网页的header，最多关心Status Code是不是200。但是HEADER真的很重要啊，客户端从服务器端获取内容，首先就是通过HEADER进行各种沟通！HEADER可以帮助我们完成许多骚操作，提高网站的性能，用户的体验。好了让我们…"}, {"id": "6844903699911802894", "title": "前端AI实战——告诉世界前端也能做AI", "desc": "我想大多数人和我一样，第一次听见“人工智能”这个词的时候都会觉得是一个很高大上、遥不可及的概念，特别像我这样一个平凡的前端，和大部分人一样，都觉得人工智能其实离我们很遥远，我们对它的印象总是停留在各种各样神奇而又复杂的算法，这些仿佛都是那些技术专家或者海归博士才有能力去做的工作…"}, {"id": "6988516630519250951", "title": "前端面试每日 3+1 —— 第829天", "desc": "今天的知识点 (2021.07.23) —— 第829天 (我也要出题) [html] 使用HTML5绘制一副乒乓球拍 [css] 使用CSS3实现空中飘动的云朵动画 [js] 为什么会有宏任务和微任"}, {"id": "6983979577559220232", "title": "JS防抖节流函数", "desc": "前端开发过程中，有一些事件，常见的例如，scroll，mousemove ,mousehover 等，会被频繁触发（短时间内多次触发），不做限制的话，有可能一秒之内执行几十次、几百次....."}, {"id": "6989888412069134343", "title": "JavaScript实现异步请求并发数限制", "desc": "背景 上一篇《JavaScript 阻塞方式实现异步任务队列》实现了异步请求依次执行的方案，实际上就是限制同一时间只能有一个异步请求，并发请求数为1。 那实现流量控制，怎么实现并发数大于1的情况呢？ "}, {"id": "6844904178284920840", "title": "[举个栗子]增加组件通用性的几个点", "desc": "最近在做项目的时候，看到有两个功能一样，但是交互，样式不一样的需求，为了图方便维护，就封装了组件，发现一个看似简单的组件，如果要封装得通用些，要考虑的东西其实也不少。 然后组件就无法使用了。 这个时候，肯定不是复制一个文件，改下样式再写一个组件，只能把原来的组件改得通用些，能适…"}, {"id": "6844903573826830343", "title": "关于setTimeout", "desc": "我：支支吾吾...... span标签里面的内容一秒之后由“测试”变成了“一秒后”。 这里点击之后执行start()函数，在函数里面setTimeout()函数又调用了start(),所以就是一秒钟调用一次start()函数。 大家都知道setInterval()和setTim…"}, {"id": "6844903685458231303", "title": "JavaScript 前端倒计时纠偏实现", "desc": "前端网页倒计时是非常常见的应用，我们在各大购物网站的秒杀活动中总是能见到它的身影。但是在实际情况中，我们常常会发现当网页不刷新、让倒计时程序持续运行时，显示时间相比实际时间会越来越慢，相信大家也有在秒杀时间即将到来时不停刷新页面的经历。原因自然也不难理解：倒计时通常使用定时器（…"}, {"id": "6993302435984834591", "title": "浅拷贝和深拷贝", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 浅拷贝和深拷贝是一个非常重要且具有实际价值的话题。"}, {"id": "6989502669496778782", "title": "typeof的“小秘密”", "desc": "相信很多朋友们在开发过程中都会用到typeof去验证码判断一个变量的数据类型，但是你是否真正了解在进行typeof的过程中，浏览器到底都做了些什么，接下来就让我们研究研究。 谈一谈js中的数据类型 或"}, {"id": "6981251280236707853", "title": "JavaScript 中 this 指向详解", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 使用 JavaScript 开发的时候，很多开发者多多少少会被 this 的指向搞蒙圈，但是实际上，关于 this 的"}, {"id": "6995358734335606814", "title": "JavaScript 事件冒泡、事件捕获、事件委托", "desc": "不做过多介绍，直接上干货，首先我们先把整体样式结构写出来 结构 效果 1、事件冒泡 父盒子和子盒子是嵌套关系  当点击子盒子和父盒子共同的部分时，就会产生一种现象 叫作事件冒泡，分别给父子盒子注册事件"}, {"id": "7001129770154983438", "title": "JavaScript 浏览器对象", "desc": "JavaScript可以获取浏览器提供的很多对象，并进行操作。window、navigator、screen、location、document、history"}, {"id": "6844903560400863240", "title": "前端组总结", "desc": "在我们这面对前端的定义是高效率的实现可交互并且高质量的产品。所以我们整体的支撑体系如下： 最终前端这块主要负责前端开发（本职工作）和服务端开发（应用逻辑）。 体验。 体验这块主要和设计团队的沟通比较多。设计团队主要负责：视觉规范、交互规范、界面设计。前端团队主要负责：组件抽象、…"}, {"id": "6996870087068106789", "title": "下一代web工具-vite解析｜8月更文挑战", "desc": "vite 为什么出现 在很久以前，浏览器上是没有 ESM 的，缺少对于模块化的支持，从页面中引入 js 的方案一般都是通过 script 进行加载，后来出现了比如 requirejs，commonjs"}, {"id": "6844903961804161031", "title": "【AST篇】手把手教你写Eslint插件", "desc": "虽然现在已经有很多实用的 ESLint 插件了，但随着项目不断迭代发展，你可能会遇到已有 ESLint 插件不能满足现在团队开发的情况。这时候，你需要自己来创建一个 ESLint 插件。 本文我将带你了解各种Lint工具的大致历史，然后一步一步地创建一个属于你自己的 ESLin…"}, {"id": "6871630496535838734", "title": "镜像构建篇 - 我是如何实现 docker 镜像 2 分钟构建、部署", "desc": "在前端开发过程当中，我们要解决的不止是页面的风格、浏览器的兼容、用户的体验，当然这些都是非常重要的一部分，但是有一部分，虽然平时我们不需要特别重视，但是它的存在，是对我们项目的及时修复处理一些及时性的问题，起到至关重要的作用。 其实，这件事是一直之前我个人也没有注意到的一个问题…"}, {"id": "6994465289333112840", "title": "环形加载动画｜8月更文挑战", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "6844903997698998285", "title": "Tampermonkey油猴用户脚本API文档", "desc": "设置脚本在哪些网页中可以运行，允许设置多个标签。 @include 不支持URL hash参数。 与 @include 标签类似，允许设置多个。 排除的URL， 在这些页面不运行脚本， 即使地址包含在 @include或@match标签内。允许设置多个。 表示在运行脚本前需要加…"}, {"id": "6995510297859457037", "title": "【从头学前端】10-JavaScript中的作用域", "desc": "本篇文章我们将来学习JavaScript中的作用域。通过本篇文章的学习可以掌握什么知识呢？如下图：JavaScript中的作用域 (scope )，就是指变量、函数或者对象的可访问范围 。"}, {"id": "6980636592201269279", "title": "小技巧系列 -- 函数作为函数的形参，可以传入函数进行运转", "desc": "前言 我们通常有个需求，就是在一个函数里头，对其里面的循环遍历的每一项进行特定的处理操作，比如打印、拷贝、存储、上传、... 等等。 将外部函数作为函数的形参对应的实参，可以传入外部函数进行运转处理，"}, {"id": "6974562010252083213", "title": "ES6 ---- 函数", "desc": "这是我参与更文挑战的第17天，活动详情查看： 更文挑战 默认值 概念 在ES6中函数的参数支持使用默认值,当在调用函数时如果没有给函数传递实参则形参会使用默认值 语法 注意 函数中的任意形参都可以包含"}, {"id": "6938341501831217189", "title": "js中如何实现深浅拷贝？", "desc": "自己创建一个新的对象，来接受你要重新复制或引用的对象值。如果对象属性是基本的数据类型，复制的就是基本类型的值给新对象；但如果属性是引用数据类型，复制的就是内存中的地址，如果其中一个对象改变了这个内存中的地址，肯定会影响到另一个对象。浅拷贝的方法有很多如Object.assign…"}, {"id": "6844904047648964616", "title": "一个白学家眼里的 WebAssembly", "desc": "在知乎「如何看待 WebAssembly 技术」的问题里，可以看出大家普遍对浏览器、WASM 和 JS 之间的三角关系有不少误解。因此这里作为一个开 (bai) 发 (xue) 者 (jia)，我就来尝试纠正些常见的问题吧。 这显然不对，WASM 里的 Assembly 并不意…"}, {"id": "6976494144717848606", "title": "vue项目 html标签中能否直接使用外部引入的js方法", "desc": "vue项目 html标签中不能直接引用外部js中定义方法的解决方案。在methods中重新定义一个方法去调用外部方法。"}, {"id": "6881204780035751944", "title": "「查缺补漏」女朋友问我能不能给她讲讲reduce", "desc": "女朋友问我能不能给她讲讲reduce，想想之前对reduce理解的也不是很深刻，这次正好趁着给她讲解的功夫自己也巩固一下。 initialValue是可选值，看似不太重要，但是对accumulator和currentValue却有着很重要的影响。 从上述例子可以看出，当init…"}, {"id": "6968280964673830942", "title": "最全 ECMAScript 攻略之 ES2017-ES8", "desc": "Object.values/Object.entries 直接获取对象的值是一种非常常见的用例-例如，在将对象用作哈希过滤器时。许多库都有一个“值”函数：lodash 的mapValues。 Obje"}, {"id": "6844903618290663438", "title": "深入了解 Weex", "desc": "上一篇文章讲到了混合应用简单的发展史，本文以Weex为例分析一下混合应用，本文并非是介绍Weex是怎么使用的，如果想要了解怎么使用，不如了解一下 Eros 的解决方案，主要想剖析一下Weex的原理，了解Weex的运行机制。 首先想聊一聊我们为什么选择Weex。上一篇文章结尾对W…"}, {"id": "7001395482983399437", "title": "页面的生命周期你知道吗", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：            8月更文挑战 ​ 序言 在我们日常工作中，偶尔会有一些需求，需要在页面的生命周期上做一些操作，以至于让我们在合适的时间点，触发我"}, {"id": "7001399024754360334", "title": "CommonJS & AMD & ES6", "desc": "首先我们要清楚 模块化规范 和 模块化实现 的区别，规范是定义，比如规定 A 对象应该有 B 属性，实现则是参照这些规范来编写工具库。 一种规范可以有多个实现，CommonJS、AMD、ES6 这些都"}, {"id": "6890680584033533960", "title": "「算法与数据结构」二叉树之美", "desc": "这次梳理的内容是数据结构专题中的树，如果你看到树这类数据结构时，满脑子头疼，觉得它很难理解，如果是这样子的话，那么本文可能对你或许有点帮助。 俗话说得好，要想掌握理解的话，我们得先了解它的概念，性质等内容。 公众号前端UpUp，回复二叉树，即可获取脑图。 联系👉TianTia…"}, {"id": "7002174716001648670", "title": "原生js DOM", "desc": "DOM 1.DOM操作演示 Document Object Model 插件emmet学习 DOM定义了表示和修改文档所需的对象、这些对象的行为和属性以及这些对象之间的关系。DOM对象即为宿主对象，由"}, {"id": "7000944326406733860", "title": "CodeasilyX增强版 - 可回放的webIDE", "desc": "这次带来了编辑器功能的增强，在上一版中只能做简单的静态html运行，这次加入了类似webpack的打包运行的能力，目前只做了react+typescript技术栈的运行环境，未来可以支持更多运行环境"}, {"id": "6995569758204592136", "title": "深入理解JavaScript原型与原型链(GIF预警) | 8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 本文主要围绕下述代码进行讲解，Person是构造函数，p是Person实例化的对象。 动图预警 下面一起来逐步拆解GIF动画，完成最后"}, {"id": "6885867756864929806", "title": "仅需 5 分钟，快速优化 Web 性能的10 个手段", "desc": "本人已经过原作者制授权翻译。 大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 在这篇文章中，主要介绍10种快速提高网站性能的方法，你只需5分钟内就可以将它应用到你的网站上，废话不多说，让我们进入正题吧 💎。 1. 文件压缩 文件压缩，可以减少网络传输的字节…"}, {"id": "6989916379868561445", "title": "element取消全局loading", "desc": "前两天在开发一个管理后台项目时， 遇到了一个问题，后端接口返回特别慢，由于该接口调用的是第三方API，无法通过后端去处理。此时想到用loading动画"}, {"id": "6975157617039523870", "title": "深入理解Object.defineProperty", "desc": "这是我参与更文挑战的第18天，活动详情查看： 更文挑战 没有前言，这次咱们直接单刀直入，直奔主题！ 从名字就可以看出，Object.defineProperty()的作用就是用于定义一个对象的属性，于"}, {"id": "6999899608881053733", "title": "你真的了解原型吗", "desc": "👉 原型 👉 基于原型的语言 JavaScript 常被描述为一种基于原型的语言——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承"}, {"id": "7002832615787118623", "title": "工作后夯实promise和异步函数基础", "desc": "前言：异步和同步之间的概念就不多述了，在网上这种文章比比皆是，也不是本篇要讲的重点。 1.promise（期约） 1.1 es6新增promise引用类型，可以通过new操作符来实例化，并且创建新pr"}, {"id": "6940978764293783588", "title": "前端业务组件库技术实现的三个关键点", "desc": "从而提高业务的开发效率。但是我发现埋在明确需求之后，开始调研技术方案时，很多同学并不清楚要调研哪些技术点，怎么找到某个具体方向的解决方案，找到方案之后都需要试哪些case, 以及怎么把这些方案集成在一起等等。 其实不用想那么复杂，你只需要按照以下三个技术实现的关键点搞定就可以了…"}, {"id": "6992771162056949796", "title": "自己动手封装canvas公用函数", "desc": "canvas公用函数封装 前言 在传播和分享中很多时候会用到canvas生成图片进行分享的操作，场景不一需求也不一致，但是有些方法是比较公用，适当的做一些抽离，下边就是我列的几个比较常用的方法。 把长"}, {"id": "6890357960040513550", "title": "jsliang 求职系列 - 01 - JavaScript 基础", "desc": "这样杂七杂八的问题，亦或者 a == 1 &#x26;&#x26; a == 2 这样有趣的问题。 将它们归类到 JavaScript 基础，并在本篇文章中一一讲述。 同时，会有十几道简单题目练手。 可以使用 document 或 window 元素的 API 来操作文档本身或…"}, {"id": "6983698994413174797", "title": "你不知道的reduce的用法", "desc": "万物皆可reduce，本文只是想介绍了reduce的强大。reduce可能看起来令人生畏，但学习它只会对我们好处多多。本文以实践例子为主，通过案例来学习这个方法。熟悉 reduce 方法，开发必备。"}, {"id": "6898979293024485383", "title": "种草ECMAScript2021新特性", "desc": "ECMAScript 是 Ecma International 颁布的一部语言标准，编号为 262，又称为 ECMA-262。 Ecma International 则是一个制定信息和通讯技术方面的国际标准的组织，前身是欧洲计算机制造商协会(European Computer …"}, {"id": "6988479604021428237", "title": "细说节流（Throttle）和防抖（Debounce）", "desc": "节流（Throttle）和防抖（Debounce）对于前端开发人员来说应该是十分熟悉的，两者的目的都是为了优化性能，提高用户体验，都是基于 DOM 事件限制正在执行的 JavaScript 数量的方法"}, {"id": "6844903953126129671", "title": "三种视频流浏览器播放解决方案", "desc": "最近在项目中遇到需要视频直播、视频回放等需求，在实现过程中也碰到了很多坑，因此在这里记录一下调研过程中遇到的解决方案。 可以将不同速率的版本切成相应的片；播放器可以直接使用http协议请求流数据。 延迟大小受切片大小影响，不适合直播，适合视频点播。 实时性差，延迟高。HLS 的…"}, {"id": "6984345536660766728", "title": "快乐Js之数组去重", "desc": "我们在写业务代码的时候，经常会碰到给复杂数组去重的需求，那么如何帅气的实现数组去重呢？请你看完这篇文。"}, {"id": "6911477791754027021", "title": "「算法与数据结构」时间与空间复杂度", "desc": "肯定不是，在计算机行业发展，不管是前端亦或是后端，算法都是进阶的一个绊脚石，可以说不会算法永远也成不了一个合格的高级工程师，想要进大厂确实要会些算法，但是它并不只是为了面试，它和我们的程序是息息相关的，有人说前端不需要算法？你把大名鼎鼎的 虚拟DOM (Virtual DOM)…"}, {"id": "6995039882888347679", "title": "自己动手写轮播图Swiper——原生JS实现", "desc": "使用原生JS实现轮播图Swiper。涉及知识点包括css的transform、transition等属性；js的touchstart、touchmove、touchend等触摸事件。"}, {"id": "6844903966505975822", "title": "骚年，你确定没有人在折腾你的站点吗？", "desc": "前端发展至今， 从最初前端简单的页面切图到现在承担越来越重要的职责， 前端安全一直存在并且日益重要。 a. 什么是CSRF b. CSRF的特征 1). 攻击者为三方的网站 2). 攻击者实际利用的是用户已经在被攻击网站保存的授权信息, 如上图中的login session 3…"}, {"id": "6906696251660566536", "title": "手把手教你搭建一个类似lodash的前端工具库", "desc": "随着公司业务扩大,前端项目相应的越来越多,项目中有些工具类代码逻辑相同, 如果在每个项目中复制一份十分不利于维护, 那么就需要一个工具库, 通用代码直接写在这个仓库中,发布到公司私有 npm, 业务项目需要用到时通过 npm 安装即可. 既然是前端工具库, 肯定要支持按需加载,…"}, {"id": "6984409351716864030", "title": "阮一峰JS三轮复习——第三天", "desc": "4. 语法专题 4.1 数据类型转换 运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。 4.1.1 强制转换 1. Number() 原始类型值 Number函数"}, {"id": "6983503349182119966", "title": "理解js中的this", "desc": "人生三大问题，我是谁？我从哪儿来？我到哪里去？哲学上，没有人能真正回答这三个问题，同样，在js中，因为情况太多，要想真正理解各种情况下js中this代表什么也是一比较难的事情，更加尴尬的是，this这"}, {"id": "6844903894867247118", "title": "「HTML5」FileAPI 文件操作实战", "desc": "HTML5 为我们提供了 File API 相关规范。主要涉及 File 接口 和 FileReader 对象 。 本文整理了兼容性检测、文件选择、属性读取、文件读取、进度监控、大文件分片上传以及拖拽上传等开发中常见的前端文件操作。 首先，我们的 File 来自于<input>…"}, {"id": "6939144174616707103", "title": "[译]JavaScript: 带你彻底搞懂 this｜技术点评", "desc": "搞明白 JavaScript 中 this 的值有时候会很棘手，本文带你彻底搞懂 this。 JavaScript 的 this 往往会成为许多笑话的笑柄，因为它相当复杂。然而，我发现很多开发人员为了避免处理 this，用了更加复杂和特定领域的处理。如果你对 this 还不熟悉…"}, {"id": "6844903973506269198", "title": "如何在 JavaScript 中使用新特性“顶层 await”", "desc": "以前要使用 await，相关代码必须位于 async 函数内部。换言之你不能在函数外使用 await。顶层 await 能使模块表现得像 async 函数一样。 模块是异步的，拥有 import 和 export，而这两者也是存在于顶层。这样做的实际意义是，如果你想提供一个依赖…"}, {"id": "6982833495093542942", "title": "一次性了解闭包", "desc": "什么是闭包 闭包形成的本质 JavaScript 闭包的本质源自两点，词法作用域和函数当作值传递。 词法作用域 词法作用域也就是静态作用域,一开始就定义好的. 引擎通过数据结构和算法表示一个函数，使得"}, {"id": "6850418121074573320", "title": "[7000字]JavaScript数组所有方法基础总结", "desc": "基础决定一个人的上限，很多时候我们感叹别人在实现一个功能时使用方法的精妙，并且反思，为什么别人想的出来自己却想不出来？我觉得主要是因为对于基础的掌握上有很大的差距。本文总结数组的所有方法的基础使用，希望对你有帮助，如果有错误，请指出。 1、该类数组对象必须具有 length 属…"}, {"id": "6921857717380317192", "title": "Es6 模块 与 CommonJS 模块的区别", "desc": "模块的作用为什么需要模块作用Es6模块import引入export、exportdefault导出引入与导出的混合动态加载返回的是一个Promise循环引用CommonJS模块require引入exp"}, {"id": "6995118396828286990", "title": "JS中的Set类", "desc": "集合是值的集合，就像数组一样。但是，与数组不同的是，集合不被排序或编制索引，并且它们不允许重复：一个值要么是集合的成员，要么不是一个成员；不可能询问一个值在一个集合中出现了多少次。"}, {"id": "6948444766963138591", "title": "面试题 | 走进数组中方法的实现", "desc": "filter() 方法创建一个包含通过测试的数组元素的新数组。 every() 方法检查所有数组值是否通过测试。 map() 方法通过对每个数组元素执行函数来创建新数组。 map()方法不会对没有值的数组元素执行函数。 map() 方法不会更改原始数组。 some() 方法检查…"}, {"id": "6960651913176023076", "title": "了解一下 Map、WeakMap 和 Set、WeakSet", "desc": "本文的初衷是自己对这 Map 和 Set 两个数据类型及相关类型学习的沉淀与总结。希望也可以对其他人起到一个入门的学习效果。"}, {"id": "6862975925257469965", "title": "如何分析及优化React Native中的JavaScript bundles", "desc": "在使用react-native进行开发的过程中，也许会因为开发阶段的忙碌而忽略一些小细节，导致最后打包出来的bundle size不尽如人意。 本文将提出在JavaScript层面，优化react-native最终打包尺寸的几种方案。 首先是进行具体模块的剪裁，因为在开发阶段会…"}, {"id": "6966998150162857992", "title": "const和let到底存不存在变量提升？", "desc": "每天做个总结吧，坚持就是胜利！ 2021-05-27： const和let到底存不存在变量提升？（需重构）"}, {"id": "6876264679681982477", "title": "OpenLayers入门（二）", "desc": "首先来分享一个我无意中找到的教程，http://linwei.xyz/ol3-primer/index.html。虽然是基于v3版本介绍的，很多api可能变了，但还是值得一看，除了OpenLayers本身的介绍，还会有一些地理基础知识的分享，这种相对全面的中文教程真的很稀有，且…"}, {"id": "6998901487741075487", "title": "# 数组常用方法--数组迭代【第三弹】", "desc": "八月的色彩是用金子铸就的，明亮而珍贵；八月的色彩是用阳光酿造的，芬芳而灿烂。 未来的日子，愿你把自己调至最佳状态，缓缓努力，慢慢变好 Y(^o^)Y"}, {"id": "6844903953319067656", "title": "用 JavaScript 操作 Cookie", "desc": "Web 服务器和 HTTP 服务器是无状态的，因此当 Web 服务器将网页发送到浏览器时，连接会被断开，服务器会忘记与用户相关的所有内容。 那么浏览器和 Web 服务器是怎样记住用户信息的？cookie 被发明出来解决这个问题。 当用户访问网页时，他们的名字、唯一 ID 或其他…"}, {"id": "6844903951351939080", "title": "JavaScript-你可能不了解的块级作用域", "desc": "我们在for循环中直接定义了变量i，通常我们只想在循环体内部的上下文环境中使用i，但是事情并不是向着我们希望的发展，i会被隐式的绑定到外面的作用域（函数作用域或者是全局作用域）。 我们声明的变量b在代码使用时，仅仅在if声明的上下文使用，如果能将它限制在if的上下文将是一件很有…"}, {"id": "6992549134431420447", "title": "JS的二进制家族：ArrayBuffer的具体介绍 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 一、基础知识 1.1 ArrayBuffer ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuff"}, {"id": "6997408008091205640", "title": "浅谈Promise", "desc": "javascript 异步操作执行历史 JavaScript 语言的执行环境是“单线程”， 所谓单线程，就是一次只能完成一件任务， 如果有多个任务就需要排队，一个完成了，继续下一个......"}, {"id": "6844903503412854798", "title": "SVG动态绘制不规则图形", "desc": "在浏览器中，任意的二维平面图形均可以通过path路径的形式描述。然后底层api 直接静态绘制出来。但是如果想动态的绘制路径，浏览器是没有直接支持方式的。 本文就是解决这个问题， 为浏览器补全这个功能，让静态的路径能方便的动态绘制。 效果还是挺酷炫的，实现的整个开发过程就从接需求…"}, {"id": "6966130701569622030", "title": "JS事件循环", "desc": "如果总是被JS执行顺序的问题难住，那么你需要了解一下什么是JS事件循环(Event Loop)，征服这类问题。"}, {"id": "6868930336269697038", "title": "2020年9月第1周 - 智云健康前端技术每周文摘（含谷歌面试题）", "desc": "编辑距离是一种量化两个字符串差异的方法，其含义是：将一个字符串转换为另一个字符串的最小转换次数来计算的。转换包括插入、删除和替换。 比如 cat 与 cat，编辑距离为0。"}, {"id": "6988040063808438279", "title": "【ES6系列】字符串和正则表达式", "desc": "ES6系列，专门介绍ES6的一些变化。林林总总在网上也看了不少介绍ES6的帖子，最近有时间决定以《深入理解ES6》为基础，整理一下相关知识点"}, {"id": "6939730986858971149", "title": "让你的浏览器变成Siri一样的语音助手", "desc": "最近业余时间浏览技术文章的时候，看到了一篇关于语音朗读的文章：Use JavaScript to Make Your Browser Speak（用Javascript让你的浏览器说话），文章中提到可以通过speechSynthesis实现让现代浏览器语音朗读指定的内容，这激发…"}, {"id": "6844904136308162568", "title": "mapbox+GeoglobeJS天地图", "desc": "最近因为业务需求接触了mapbox这个插件，过程中踩了超多坑，现在就我接触到的一些资料与踩过的坑，总结一下，希望看到这篇文章的码友们能帮助到你们。 具体的用法官方文档写的很清楚，请多读文档，这里只讨论页面引入js的写法。 上面代码运行之后，会发现所有的资源加载的是mapbox网…"}, {"id": "6844903679061934093", "title": "从酷炫的果冻菜单谈起 CSS3 filter 属性", "desc": "从酷炫的果冻菜单谈起CSS3filter属性今天中午刷掘金沸点时，看到一个JerryMenu，看着效果不错，就像学（抄）习（袭）一下。效果图见下：这里我要学（抄）习（袭）的就是这个菜单效果，这个dom"}, {"id": "6844904161453015054", "title": "你不知道的js对象遍历", "desc": "js里面遍历一个对象的属性有很多种方式，比如：Object.keys 、for...in、Object.getOwnPropertyNames等等，平时写业务代码的时候，大家随便用哪个。 上面代码，又给obj添加了一个c属性，此时c属性就是不可枚举的。关键就是enumerabl…"}, {"id": "6892951045685641224", "title": "你真的了解React Portals吗", "desc": "这样来实现全局遮罩层，modal里边的内容自己控制。但是这样会存在一个问题，具体如下: 然后就发现狂点这个按钮不能控制modal的显示隐藏，因为这个button严重影响了modal的行为。 这种其实是很难排查问题的，你不知道用户写了什么奇葩的代码，这个时候就考虑其他方式来规避这…"}, {"id": "6844903885379731464", "title": "JS如何实现函数缓存", "desc": "闭包的作用：闭包是javascript的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在函数调用后被自动清除。我觉得对于闭包的作用一个很好的理解就是：…"}, {"id": "6858936715118772238", "title": "金额数字转换", "desc": "前段时间，项目遇到一个需求，将金额的阿拉伯数字转成大写，而且是西班牙语，网上搜索未果，于是自己撸了一个 cardinal-number。目前已支持三种语言，汉语、西班牙语、英语。 每种语言特性不太一样，我们汉语是万分制12345678 => 1234,5678, 英语和西班牙语…"}, {"id": "6844903773173727239", "title": "Chameleon跨端框架——壹个理想主义团队的开源作品", "desc": "文章较长，信息量很大，请耐心阅读，必然有收获。下面正文开始~ 真正专注于一套代码运行多端。 微信月活10亿月活（超过网民数量，用户多个账号？）、支付宝4亿月活、百度3.3亿月活；2018 Q3中国Android手机占智能手机市场超过80%；无论BAT还是Android快应用都是…"}, {"id": "6993156630598696991", "title": "JS中 prototype 和 __proto__ 的区别", "desc": "JavaScript中的 Object 是构造函数； Oject.prototype完全不同于Object.__proto__"}, {"id": "6844903685340790792", "title": "从0到1实现Promise", "desc": "Promise大家一定都不陌生了，JavaScript异步流程从最初的Callback，到Promise，到Generator，再到目前使用最多的Async/Await（如果对于这些不熟悉的可以参考我另一篇文章《JavaScript异步编程》），这不仅仅是技术实现的发展，更是思…"}, {"id": "6844904045132382222", "title": "JS操作小技巧，工作简单了（二）", "desc": "场景：页面月和日的显示，需要用0或者其他字符占位。 场景：页面展示金额，进行位数划分。 场景： 使用 void 运算符可确保你得到一个真正的 undefined 。 也用于最小化目的。 评论出你的工作的小技巧，让大家都学习。"}, {"id": "6861438433362247694", "title": "用动画演示宏任务与微任务运行过程", "desc": "代码从上到下开始运行，这是一段代码块，会作为一个宏任务进入到任务队列中，然后事件循环在轮询的时候，会执行这段代码，暂且叫做全局任务（因为在全局作用域执行的）。首先执行第1行（代码中标识的“//1”）打印1。 执行到第2行的时候，发现这是一个setTimeout方法，js引擎会把…"}, {"id": "6968415027808174110", "title": "算法题-有效的括号-leecode20", "desc": "给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。"}, {"id": "6984350738335924260", "title": "js的Proxy对象", "desc": "前言 在js里面对一个js对象进行拦截和自定义操作是非常常见的场景。那么今天介绍一下如何通过Proxy对象进行创建一个对象的代理。 用法 语法 参数 target 要使用 Proxy 包装的目标对象（"}, {"id": "6844904052388708366", "title": "2019年,盘点一些我出过的前端面试题以及对求职者的建议", "desc": "笔者虽然曾经也面试过很多求职者,但是对于前端的笔试和面试,我觉得并不能体现一个人的真实能力,所以建议大家多修炼前端真正的技术.对于前端面试题,之前也承诺过读者要出一篇,笔者大致总结一下曾今面试的题目.后续不会再出面试题,而是聚焦于一些真正的,有利于成长性的技术文章和思维方式,来…"}, {"id": "6998423128753831950", "title": "js 算法 - 冒泡排序", "desc": "冒泡排序大概是每个编程人员所学的第一个算法。冒泡排序很简单，我们将前一个数据与后一个数据做比较，如果前一个数据比后一个数据大（从小到大排序），就将前一个数据与后一个数据做交换，这个操作一直从第一个数据"}, {"id": "6968261755063500831", "title": "Vue3.0七大亮点是什么？？", "desc": "一，性能比2.x快1.2～2倍 diff算法的优化 在vue2中，虚拟dom是全量比较的。 在vue3中，增加了静态标记PatchFlag。在创建vnode的时候，会根据vnode的内容是否可以变化，"}, {"id": "6844903901616046093", "title": "「前端进阶」如何优雅的处理图片异常", "desc": "首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到的事件。最后一个阶段是冒泡阶段。 我们上文中的监听图片自身的 error 事件，实际上在事件流中是处于目标阶段。"}, {"id": "6983911601116020773", "title": "精读《React 18》", "desc": "React 18 带来了几个非常实用的新特性，同时也没有额外的升级成本，值得仔细看一看。 下面是几个关键信息： React 18 工作小组。利用社区讨论 React 18 发布节奏与新特性。 发布计划"}, {"id": "6932766917694324749", "title": "Webview的使用 | VSCode插件开发系列教程", "desc": "最近开发了一个VSCode的插件叫“我爱掘金”，主要就是围绕Webview这个api来实现的。作为前端工程师，只要给你一个Webview，虽然不能撬动地球，但我们可以做很多酷炫的插件呀。比如小霸王插件，彩虹屁老婆插件 等等。 其实VSCode也是基于electron框架的桌面软…"}, {"id": "6971673576017494053", "title": "真的理解font-size和line-height了吗？", "desc": "line-height和font-size都是大家在日常开发过程中经常用到的css属性，例如line-height设置父容器的高度来实习文本垂直居中，那它背后的原理又是怎样呢？"}, {"id": "6844903612879994887", "title": "闭包详解一", "desc": "现在去面试前端开发的岗位，如果你对面试官也是个前端，并且不是太水的话，你有很大的概率会被问到JavaScript中的闭包。因为这个闭包这个知识点真的很重要，还非常难掌握。 什么是闭包，你可能会搜出很多答案.... 我最认同的是《你不知道的JavaScript》中的描述，虽然前面…"}, {"id": "7001863862416834567", "title": "Node.js 的基本概念[翻译]", "desc": "想象一个 Web 应用程序每秒向服务器发送数百个请求，该服务器每次只处理一个请求，然后再转移到另一个请求。您可能会遇到一些性能问题，并为您的用户提供糟糕的体验。"}, {"id": "6947944559452094472", "title": "前端页面填加水印方案及实现", "desc": "最近有个项目需要在页面上加上水印。这里尝试了一个实现方案。 left top repeat属性表示背景图像将从left,top开始向垂直和水平方向重复。 支持多个参数，传多个参数时，将分行展示。 当然，该方法也可以直接写在页面js里面。 防止DOM还没加载完的情况出现。"}, {"id": "6928739992986615816", "title": "统计页面首屏时间，很多人第一步就错了", "desc": "前端页面性能对用户留存、用户直观体验有着重要作用。这样的话如何更好的监控前端页面性能就变的十分重要。前端页面的性能监控主要分为两个方式： 一种叫做合成监控 Synthetic Monitoring, SYN。就是在一个模拟场景里，提交一个需要做性能审计的页面，通过一系列的工具、…"}, {"id": "6844904033652572174", "title": "公司年会用了我的抽奖程序，然后我中奖了……", "desc": "临近年末，又到了各大公司举办年会的时候了。对于年会，大家最关心的应该就是抽奖了吧？虽然中奖概率通常不高，但总归是个机会，期待一下也是好的。 最近，我们部门举办了年会，也有抽奖环节。临近年会的前几天，Boss 突然找到我，说要做一个抽奖程序，部门年会要用。我当时都懵了：就三天时间…"}, {"id": "6971628356273963021", "title": "155个JavaScript基础问题（86-95）", "desc": "这是我参与更文挑战的第7天，活动详情查看：更文挑战 86. 那个选项是将hasName置为true的方法，前提是不能将true作为参数进行传递？ 87. 输出是什么？ 88. 输出什么？ 89. 输出"}, {"id": "6844903508760608776", "title": "web调试优化-chrome开发者工具不完全指南", "desc": "chrome，对于web开发者而言，都是很熟悉的一个浏览器，无论是从事的是前端，后端或者是测试！简单、快捷和功能强大使它受到了许多开发者的青睐！在浏览器排行上，chrome最多人使用，而且占了浏览器份额的半壁江山。可见其欢迎程度。作为一个前端开发者，我也是注重chrome的使用…"}, {"id": "6989494092098961445", "title": "JS技巧： 循环、遍历、迭代", "desc": "大家好, 我是echo. 一名刚毕业的应届生.最近再学习Vue源码和看小黄书上卷.从平时摸鱼中学习一些js技巧和一些问题的解决方案. 在这里,分享自己的一些的解决方案和一些数组循环、遍历和迭代的知识分"}, {"id": "6948257149625729055", "title": "看破JS底层——实现a==1、2、3", "desc": "很多人第一眼或许会认为这是true，但是我可以很负责的和你说结果是false!在这里我们要清楚的认知到，value=1只是a的一个属性，并不等于a本身。接下来我们再看一段代码： 为什么加了一个valueOf这里就为true了？说到这，我们就有必要了解一下==的背后，核心原理是啥…"}, {"id": "6844904196689379335", "title": "前端进阶：跟着开源项目学习插件化架构", "desc": "1. 1 微内核的概念 微内核架构（Microkernel Architecture），有时也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构，通常用于实现基于产品的应用。微内核架构模式允许你将其他应用程序功能作为插件添加到核心…"}, {"id": "6913350888845213703", "title": "当 forEach 遇上了 async 与 await", "desc": "当前有一个存有用户 id 的数组，例如：[1, 2, 3, ...]，我需要使用 sql 语句查询每一个 id 对应的用户的用户名。下面写一下我最初的伪代码： 最初的伪代码是这样的，解释一下，sql 语句你可以跳过，exec 是我封装的 mysql 的执行 sql 语句的方法。…"}, {"id": "6966144534799450143", "title": "自适应网页设计", "desc": "前言 随着3G的普及，越来越多的人使用手机上网。 移动设备正超过桌面设备，成为访问互联网的最常见终端。于是，网页设计师不得不面对一个难题：如何才能在不同大小的设备上呈现同样的网页？ 手机的屏幕比较小，"}, {"id": "6992848107004231687", "title": "JS判断数据类型方法的总结", "desc": "读过小红书的人都知道，JavaScript判断数据类型的方法大致有以下几种： typeof instanceof constructor 下面就总结一下这几种方法的优缺点"}, {"id": "6979840705921286180", "title": "ES6中扩展运算符的8种用法", "desc": "扩展操作符 … 是ES6中引入的，将可迭代对象展开到其单独的元素中，所谓的可迭代对象就是任何能用for of循环进行遍历的对象，例如：数组（数组常用方法）、字符串、Map （悟透Map）、Set"}, {"id": "6931901497953222670", "title": "实现图文消息的正确加载", "desc": "昨天，在我的开源项目chat-system中查看聊天记录时，发现消息中如果有图片滚动条的位置就会算错，导致最后一条消息定位不准确。 经过一番排查后，终于解决了这个问题，本文就跟大家分享下我的解决方案与思路，欢迎各位感兴趣的开发者阅读本文。 如下图所示，我们点开一个聊天窗口，最后…"}, {"id": "6992887065050349605", "title": "JavaScript是如何影响DOM树构建的", "desc": "文档对象模型 (DOM) 文档对象模型 (DOM) 会将 web 页面与到脚本或编程语言连接起来。通过本文可以学习到DOM树的构建过程及在此过程中JavaScript对构建过程的影响。"}, {"id": "7005401042057691144", "title": "第二章 数值（下）", "desc": "前言 开局一个小彩蛋，JS全靠悟。JavaScript的数值精度丢失问题一直是个很让人诟病的地方，今天让我们来好好研究一下，前人的智慧吧"}, {"id": "6987691568362684430", "title": "js中的==与===", "desc": "我们都知道js中判断两个数是否相等有两个操作符==和===。==是不严格相等，在比较过程中会先将比较数进行强制类型转化，在进行值比较，而===是严格相等，它不会对数值的类型进行强制转换，所以理解为=="}, {"id": "6955627754536566792", "title": "（html+css+js）一个简单小项目——3D卡片时钟", "desc": "效果 废话不多说，先上效果图： 这个小项目用到了jquery，目的是为了一些书写的简便 先贴上整体的框架的代码 别看这么长一坨，其实就等同于只有一个显示小时的，其他的直接复制的（小声逼逼） 所需实现的"}, {"id": "6904135847411941390", "title": "针对白屏埋点，我是这样做的（前端监测）", "desc": "这里要按自己公司的产品或者自己的项目来决定了。下面是我对公司的产品提出的三个“埋点方案”，可参考，但不一定适合你们。 因为我们产品，主要页面都是居中布局，所以这种“埋点”可以满足我们产品的80%页面。垂直“埋点”，也就是在X,Y轴上埋，看图 因为，垂直埋点可以解决居中布局的页面…"}, {"id": "6844903602197102605", "title": "7种方法实现数组去重", "desc": "去重是开发中经常会碰到的一个热点问题，不过目前项目中碰到的情况都是后台接口使用SQL去重，简单高效，基本不会让前端处理去重。 那么前端处理去重会出现什么情况呢？假如每页显示10条不同的数据，如果数据重复比较严重，那么要显示10条数据，可能需要发送多个http请求才能够筛选出10…"}, {"id": "6844903696040476686", "title": "VS Code 快速使用指南", "desc": "最近团队为了保持较好的前端开发规范，鼓励大家使用同一款编辑器，我们选择了vscode, 因为团队大部分人都在用，而且用起来很爽。为了让没有用vscode的同学快速了解它，我收集了网上一些资料加上自己的一点日常使用经验写了这篇介绍文章。 Visual Studio Code （简…"}, {"id": "6993690753386053645", "title": "快来围观Map啦", "desc": "Map Map结构类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。 Object 结构提供了“字符串—值”的对应。 Map 结构提供了“值—值”的对应"}, {"id": "6985448063376556069", "title": "LeetCode刷题，设计前中后队列（1670）", "desc": "思路：使用两个双端队列来进行前中后插入，如queue1和queue2，当有插入时，判断两个队列元素数量是否相等。 不相等时往少的那个队列进行插入。始终保持两个队列元素相等或元素少一即可"}, {"id": "6996197966075658270", "title": "TypeScript类型系统初识", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6993998398198120461", "title": "手写一个 mini 的 webpack 项目构建工具", "desc": "了解过 webpack ，也用过 webpack 来构建项目，只不过都是停留在使用这个层面上，具体内部是什么机制还不算了解。希望这篇文章能够给你带来一些写自己构建工具的思路。"}, {"id": "6998891444312211492", "title": "Promise.all和promise.race的应用场景举例", "desc": "问题描述 为了解决前端异步函数多层嵌套会产生回调地狱问题，以及回调地狱错误不方便捕捉的问题。所以，那些制造规则的大佬们，就在ES6中加入了一个新功能~Promise。本文主要记录一下Promise.a"}, {"id": "6994282153710190622", "title": "记一次在Vue项目中使用防抖函数的有趣折腾！（涉及贼多知识）", "desc": "一、起因： 最近在学习防抖的一些知识，然后就和好兄弟交流，然后好兄弟说：“这种知识点要用到再好好学会记得更深刻。”，然后我就想我学以致用也挺不错，刚好这时候好兄弟和我（我比较菜，好兄弟带着我写的）在写"}, {"id": "6844903503266054157", "title": "JavaScript设计模式", "desc": "当然我们可以用一个通俗的说法：设计模式是解决某个特定场景下对某种问题的解决方案。因此，当我们遇到合适的场景时，我们可能会条件反射一样自然而然想到符合这种场景的设计模式。 比如，当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能…"}, {"id": "7005755872597000229", "title": "《JavaScript高级程序设计（第3版）》读书笔记4", "desc": "第五章 引用类型 一、Object 1、创建： new 操作符后跟 Object 构造函数 对象字面量 2、访问 点表示法 方括号表示法： 可以通过变量来访问属性；属性名中是可以包含非字母非数字的，用"}, {"id": "6991802572608634916", "title": "JavaScript迭代器 | 8月更文挑战", "desc": "在软件开发领域，迭代的意思就是按照顺序反复并且多次执行一段程序，在JavaScript中，计数循环就是一种最简单的迭代， 循环是迭代机制的基础。"}, {"id": "7002868148588249096", "title": "双指针排序", "desc": "1. 给有序数组的平方排序 已知有序数组 [-4,-1,0,3,10]，给每个值平方组成的数组排序。要求时间复杂度O(n)。 思路 因为已知有序，那么复数部分平方后是单调递减。正数部分单独递增。 拆分"}, {"id": "6977363048113635365", "title": "模拟实现字符串的新增方法 | 重学ES6", "desc": "ES6新增了很多属性、方法以及某些特性，本系列主要通过模拟实现的方式来重学ES6,以便更深入的的理解那些新增的东西~"}, {"id": "6951182604200575006", "title": "纯 JavaScript 实现页面滚动动画", "desc": "在做前端 UI 效果时，让元素根据滚动位置实现动画效果是一个非常流行的设计，通常我们会使用第三方插件或库来实现。在本教程中，我将教大家使用纯 JavaScript 和 CSS 来实现。"}, {"id": "7005370759480606733", "title": "CommonJS规范", "desc": "摘自 阮一峰老师的博客的CommonJS规范 1.介绍 node应用由模块组成，采用的commonjs模块规范。每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等，对其他的模块都不可见。C"}, {"id": "6994263179773624350", "title": "Taro React Native 端开发流程", "desc": "简介 Taro 移动端的开发基于 Facebook 的开源项目 React Native，Taro3.x 将不再锁定 React Native 版本，用户可在项目中自行安装 >=0.60 版本的 Re"}, {"id": "6976988570514882574", "title": "开车啦！今天去往浏览器对象的操作及实例 | JavaScript", "desc": "这是我参与更文挑战的第23天，活动详情查看： 更文挑战 window 对象 moveBy(x, y) 函数: 从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，"}, {"id": "7002031965989765150", "title": "js中this到底指向谁", "desc": "什么是this JavaScript中的this是什么？ 定义：this是包含它的函数作为方法==被调用时所属的对象。== 我们将定义拆分一下 包含它的函数：包含this的函数是fn1。 作为方法被调"}, {"id": "6972360327057014798", "title": "详解ES6关键字Class", "desc": "本文通过以下几个方面来谈谈ES6 中新增的关键字Class 背景 如何使用 Class 横向、纵向对比 JavaScript 是如何实现 Class 的 Class 关键字的限。"}, {"id": "6990607261848731678", "title": "前端基础小白都会的H5拖放效果", "desc": "先上效果图： HTML代码： CSS代码： JavaScript代码： JavaScript代码解析： 1.当鼠标拖动元素时，触发 ondragstart() 事件，获取要拖动元素的ID； 2.当鼠标"}, {"id": "6965462394286014471", "title": "React源码解析-虚拟DOM", "desc": "JSX是什么 弄清JSX对理解虚拟DOM有很重要的作用JSX只是看起来像是HTML，但它却是JavaScript,在React代码执行之前，Babel会将JSX编译为React API。 React."}, {"id": "6844903895789993997", "title": "JavaScript 数据结构与算法之美 - 归并排序、快速排序、希尔排序、堆排序", "desc": "1. 前言 想学好前端，先练好内功，只有内功深厚者，前端之路才会走得更远。 笔者写的 JavaScript 数据结构与算法之美 系列用的语言是 JavaScript ，旨在入门数据结构与算法和方便以后复习。 之所以把归并排序、快速排序、希尔排序、堆排序放在一起比较，是因为它们的…"}, {"id": "7006223806456922142", "title": "vite的开箱即用", "desc": "在vite官方文档中对于vite的使用是通过 npm or yarn 命令 init OR create @vitejs/app 创建项目。但在尤雨溪的一场直播中讲到了vite的从0开始，通过使用vi"}, {"id": "6844903617619558408", "title": "一起学习造轮子（一）：从零开始写一个符合Promises/A+规范的promise", "desc": "Promise 是异步编程的一种解决方案，比传统的解决方案回调函数和事件更合理更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。本篇不注重讲解promise的用法，关于用法，可以看阮一峰老师的ECMAScript 6系列里面的…"}, {"id": "6844904183003349005", "title": "TypeScript 期中考试开始了！", "desc": "相信这段时间来，对 TypeScript 感兴趣的小伙伴们已经把这个神器给系统的学习了一遍了吧。如果计划开始学习但是还没有开始，或者没有找到资料的同学，可以看下我在之前文章中 前端进阶指南 找一下 TypeScript 部分的教程，自行学习。 本文从最近在 Github 上比较…"}, {"id": "6915377977765134344", "title": "浅谈移动端开发技术", "desc": "之前上家公司主要是做移动端 H5 开发的，但相关技术和配套体系已经很成熟了，很难接触到背后的这套体系。 在现在的公司也做了一些零散的 H5 页面，有一些相关实践。反而因为基础设施和体系不完善，接触到了更多东西。 刚好最近刚好开始搞 React Native，就恶补了一些相关的知…"}, {"id": "6844903553127940110", "title": "webpack增量打包多页应用", "desc": "技术：好的，这就改。 这种方案，很快就被自我否定了。 这种方案，也思索了很久，后来也被否定了。 经过前面两个问题后，我发现思考的方向完全是错误的，总是妄想改变webpack的打包方式，简直就是跟它的理念对着干。 可以看到这一次生成的hash是4897.... 但是输出的每个文件…"}, {"id": "6986814365492068389", "title": "JavaScript读取本地文件配置（兼容低版本IE）", "desc": "年年有风，风吹年年，慢慢即漫漫。—— 夏吉尔硕 # FileReader对象 JavaScript读取本地文件 Web应用程序异步读取存储文件 ActiveXObject对象"}, {"id": "7002061811084165133", "title": "JAVAScript常见方法", "desc": "获取字符串中的字符数 获取字符数是一个有用的实用程序，在许多情况下都很有用。你可以使用它来获取空格数和随后的单词数，或者这可用于获取字符串中某个分隔符的计数。 这个想法非常简单。我们使用传递的参数 c"}, {"id": "7006210721365098527", "title": " .sync 修饰符", "desc": "应用场景 是在父子组件传值的，且子组件要修改这个数据的时候使用。它的原理是利用EventBus，子组件触发事件，父组件响应事件并实现数据的更新，避免由子组件直接修改父组件传过来的内容。（如果子组件直接"}, {"id": "6844903568726556686", "title": "手把手教你如何编写一个前端图片压缩、方向纠正、预览、上传插件", "desc": "今天我们要讲解下如何编写一个图片压缩、方向纠正插件，附带着会讲解下如何上传和预览。 相信大家在做项目过程中，经常会遇到上传图片到后端，但是由于图片过大，需要对图片压缩处理。特别在移动端，手机拍的照片普遍过于大了，我们有时候只是需要上传一张头像，很小就够用了。还有在部分手机上（已…"}, {"id": "6844903662217625608", "title": "Vue开发——实现吸顶效果", "desc": "因为项目需求，最近开始转到微信公众号开发，接触到了Vue框架，这个效果的实现虽说是基于Vue框架下实现的，但是同样也可以借鉴到其他地方，原理都是一样的。 其实js做这个效果还是挺简单的，因为在css中我们可以设置一个元素的position: fixed;，这样它就可以固定在那里…"}, {"id": "6986526148809195534", "title": "从零开始学习3D可视化之2D界面", "desc": "在ThingJS中搭建的数字孪生可视化场景都是放在3D“容器”内的，3D“容器”提供了3D和2D的界面展示能力。上篇文章浅析过了3D空间界面，下面我继续学习一下2D界面如何与3D界面连接。ThingJ"}, {"id": "6844903615438553096", "title": "Three.js粒子特效，shader渲染初探", "desc": "关于Three.js，网上有不多不少的零碎教程，有些过于初级，有些云里雾里，而Three.js官网上的示例逼格之高又令人望而却步，这些对于没学过计算机图形学的童鞋来说，就像入门迈槛不知先迈左脚还是右脚，兴趣使然，于是我就先双脚蹦了进去试试水...... 可以观察到成品效果：粒子…"}, {"id": "6999935646244536351", "title": "react-router-dom API 详解，入门（一）", "desc": "API Hooks（钩子） useHistory 该useHistory钩子，可以进行路由导航。 useLocation 该useLocation钩子返回location表示当前URL对象。您可以将其"}, {"id": "7000229670260064292", "title": "超简洁版手写代码 这次一定记得住（二）", "desc": "函数柯里化是一个不怎么常用，但是面试的时候经常考察的知识点，分为两种，一种是确定参数数量的版本，一种是不确定参数的版本"}, {"id": "7004430755036315685", "title": "干货 - gulp打包支持await/async语法", "desc": "在项目中，最近需要对node代码进行混淆编译，原来曾经解决过ES6打包混淆的问题，在使用的是gulp打包，为了提升代码质量还有异步操作顺序问题，使用了async/await语法，原来的gulpfile"}, {"id": "6980724800318603272", "title": "我要造轮子系列 -Vue3放大镜组件", "desc": "系列前几个组件都是用vue2编写的，这次用最新的vue3编写, vue3也出了一段时间，公司也不会牟然换版本，所以很少实践的机会，那就只能够自己写一个组件实践下，看了一下vue3的文档，最大变化"}, {"id": "6987942452782956558", "title": "晓前端周刊 第 82 期 前端周刊：如何搭建适合自己团队的构建部署平台", "desc": "如何搭建适合自己团队的构建部署平台? 既然已经有了稳定的构建部署方式，为什么还要自己做一套前端自己的构建平台呢?"}, {"id": "6856964615596769288", "title": "vivo 悟空活动中台 - H5 活动加载优化", "desc": "《揭秘 vivo 如何打造千万级 DAU 活动中台 - 启航篇》 主要为大家讲述 vivo 活动中台的能力与创新。 《悟空活动中台 - 微组件状态管理（上）》介绍了活动页内 RSC 组件之间的状态管理和背后的设计思路。 《悟空活动中台 - 微组件状态管理（下）》探索平台和跨沙箱…"}, {"id": "6988847682689171486", "title": "JavaScript的垃圾回收", "desc": "垃圾回收就是确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间就会自动运行。浏览器发展过程中主要用到俩种方法，标记清理和引用计数。"}, {"id": "6994257250034384904", "title": "精读《JS with 语法》", "desc": "with 是一个不推荐使用的语法，因为它的作用是改变上下文，而上下文环境对开发者影响很大。 本周通过 [JavaScript's Forgotten Keyword (with)](https://"}, {"id": "6996972738267054116", "title": "开发Chrome Extension的记录与心得", "desc": "这是一款拦截蓝湖切图并上传的chrome插件 前言 由于小程序项目中切图比较多，而小程序主包有2M的大小限制，所以不能一直把图片塞到项目文件里面，而公司有专门用来存放图片的资源服务器，我们就可以把切图"}, {"id": "6999132017908531237", "title": "javascript正则表达式 - 常用的正则表达式总结及正则的捕获", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 常用的正则表达式 验证是否为有效数字 验证密码 验证真实姓名 验证邮箱 身份证号码 正则的捕获 实现正则捕获的方法 基于exec实现正则的"}, {"id": "6844903634870730759", "title": "微信小程序朋友圈分享图片生成方案实现", "desc": "在小程序界里，生成图片分享到朋友圈这个功能，是如此得光芒耀眼，以至于各个小程序都趋之若鹜地前来跪倒在她的石榴裙下。不幸的是，微信爸爸并没有提供给我们很好很便捷的相关工具；恰恰相反，屏幕截屏的功能被残忍丢进历史的垃圾桶，只留下一个Canvas组件以及围绕在其周围的深渊巨坑们。 所…"}, {"id": "6958661915149074463", "title": "JS篇： 宏任务和微任务", "desc": "宏任务和微任务 参考文章 参考文章 一. 为什么js是单线程的？ JavaScript的单线程，与它的用途有关。 作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。 如果"}, {"id": "6993142489213321224", "title": "快来围观Set啦", "desc": "Set 基本概念 Set是es6提供的一种新的数据结构。类似于数组，但是成员是唯一的，没有重复的。 Set 本身是一个构造函数，用来生成Set数据结构。"}, {"id": "6875115400154054669", "title": "乘风破浪的WebGL系列-初识WebGL", "desc": "在前端领域我们可以通过四种方式来绘制图形，包括 HTML+CSS、SVG、Canvas2d 还有 WebGL，其中 WebGL 属于非常少用的一种绘图方式，尽管如此，其却有着无可替代的位置。接下来，让我们从这四种绘图方式开始，来了解下 WebGL 吧。 HTML+CSS 是最常…"}, {"id": "6997703185158799390", "title": "十大经典排序算法（JavaScript版）", "desc": "本文整理了常用的十大经典排序算法， 该篇文章基本引用于菜鸟教程，笔者只是做了一个简化版，以作记录。。。"}, {"id": "6985347114117611527", "title": "VUE3（二十）VUE自定义指令v-preventReClick，防止多次点击，重复请求", "desc": "VUE不仅为我们提供了自定义组件，还提供了自定义指令。当然，这个玩意我在VUE2中是没有用到过的。 VUE3中我大概试一下这个自定义指令： 官方文档： https://vue3js.cn/docs/z"}, {"id": "6844903638582689806", "title": "[浅析]特定场景下取代if-else和switch的方案", "desc": "相信很多人有这样的经历，在项目比较忙的时候，都是先考虑实现，用当时以为最好的方式先实现方案，在项目不忙的时候，再看下以前代码，想下有什么更好的实现方案，或者优化方案。笔者也不例外，下面就和读者们分享一下自己最近在特定场合下，代替if-else，switch的解决方案。如果大家有…"}, {"id": "6855129007453814791", "title": "我的前端自学笔记 => ES 新特性与 TypeScript、JS 性能优化", "desc": "ES新特性与TypeScript、JS性能优化从今天开始，我要总结一下自己学习前端的笔记本人前端小白一枚，只是整理一下自己的学习过程，第一次在掘金发表自己的文章，有问题欢迎大家及时指出ES新特性首先了"}, {"id": "6950088586590961700", "title": "使用JavaScript学习设计模式｜小册免费学", "desc": "学习了《JavaScript 设计模式核⼼原理与应⽤实践》小册，刚好最近有活动，就赶紧把这篇笔记整理出来了，并且补充了小册中的没有写到的其余设计模式，结合 JavaScript 编写的例子，以便于理解"}, {"id": "6950156721939546148", "title": "最全 ECMAScript 攻略 ", "desc": "你有一份 ECMAScript 特性速查表,请查收本文以倒序的顺序并通过代码示例或简单的罗列展示所有 ECMAScript 版本提供的功能。 旨在为大家在编码时提供 ECMAScript 特性速查表E"}, {"id": "6920166836688388104", "title": "Proxy来做懒惰的Promise", "desc": "接下来我们找点栗子来实现下这个懒惰的Promise。 微信生态今时今日还是有很多人默默地用着回调，控制不好的话，很容易就会掉进地狱回调，也用不了真香async。 在写之前，我们假设下，如果下次再碰到类似的场景。换成了uni-app或者其他一些类似的框架，我们还可以继续复用部分代…"}, {"id": "6844904122844446733", "title": "前端错误监控指南", "desc": "作为一个前端，在开发过程即便十分小心，自测充分，在不同用户复杂的操作下也难免会出现程序员意想不到的问题，给公司或个人带来巨大的损失。 这时一款能够及时上报错误和能够帮助程序员很好的解决错误的前端错误监控系统就必不可少了。 接下来我们就聊聊常见的错误发生与处理。 ... 可以阅读…"}, {"id": "6956775377708515341", "title": "3D酷炫扭动卡片 html+css+js", "desc": "看效果，动起来~： 实现： 1. 定义标签，.card是底层盒子，.card2是呈现卡片效果的盒子，然后里面就是一些图片和文字，字体图标的标签了。： 2. 定义底层盒子.card的基本样式： posi"}, {"id": "6918576380309602317", "title": "从0到1去搭建一个适合自己公司的微前端架构", "desc": "由于我所在的团队目前主要是做一套服务于政府信息化建设性的项目，也就是我们常说的toG。这个项目由将近十几个中标公司的产品研发团队来共同完成，每个公司负责一个子业务系统，且每个系统的复杂程度都是我之前所做的项目都无法比拟的。我们公司子系统从立项到上线耗时一年半的时间，如此庞大的项…"}, {"id": "6984261384200519717", "title": "前端模块化", "desc": "前端模块化 模块化也就是将一个系统细分为多个小单元，这些小单元是抽象的、可扩充的、可复用的逻辑代码。模块化是工程化的基础，只有能将代码模块化，拆分组织为合理的单元结构，才能使其具备调度整合的能力。 模"}, {"id": "6998411158285713439", "title": "《javascript高级程序设计》学习笔记 | 10.14-10.16.闭包", "desc": "相关代码 → 10.14 闭包 闭包是指引用了另一个函数作用域中变量的函数，通常在嵌套函数中实现（如果一个函数访问了它的外部变量，那么它就是一个闭包） 闭包中函数的作用域链中，有对外部函数变量的引用 "}, {"id": "7000715312156901406", "title": "前端面试每日 3+1 —— 第863天", "desc": "今天的知识点 (2021.08.26) —— 第863天 (我也要出题) [html] html5中的meta标签scheme有什么作用？ [css] 使用css实现一个曲线路径动画 [js] 如何用"}, {"id": "7000904640552239112", "title": "前端面试每日 3+1 —— 第864天", "desc": "今天的知识点 (2021.08.27) —— 第864天 (我也要出题) [html] 你有使用过bgsound标签吗？说说它的作用 [css] 你有使用过resize属性吗？它有什么用途？ [js]"}, {"id": "6844904081190813710", "title": "从零开始做一个图片裁剪组件", "desc": "一个图片裁剪组件的应用场景其实比较多，相应的第三方插件也不少，但有时候会需要一些特定的功能，比如想有个特定样式的裁剪框，想批量裁剪，甚至想直接裁出定制化的尺寸等等，这时就只能手写一个裁剪组件了。 上传图片时，用onChange事件来获取该file对象，里面会包含文件的name，…"}, {"id": "6844904058394771470", "title": "Rollup打包工具的使用（超详细，超基础，附代码截图超简单）", "desc": "Rollup打包工具详细使用教程；之前在网络上查找过相关的rollup使用，有些文章很概念不易理解，没有具体步骤；有些文章步骤不够详细，没有来龙去脉。所以打算整理个文章给后来者减少弯路。"}, {"id": "6854573222071894029", "title": "AST原理，让你蜕变为高级前端工程师的原理", "desc": "webpack和Link等很多工具和库的核心都是通过Abstract Syntax Tree抽象语法树这个概念来实现对代码的检查、分析等操作的。 通过了解抽象语法树这个概念，你也可以随意编写类似的工具。 一般来说每个js引擎都会有自己的抽象语法树格式，Chrome的v8引擎，F…"}, {"id": "6844903831571021837", "title": "前端应该知道的web登录", "desc": "来了字节跳动之后，前端很少接触HTTP请求之后的事情，而且登录相关的SDK封装的很好，所以这篇文章就简单的学习记录一下。 首先这是因为HTTP是无状态的协议，所谓无状态就是在两次请求之间服务器并不会保存任何的数据，相当于你和一个人说一句话之后他就把你忘掉了。所以，登录就是用某种…"}, {"id": "6844903614759043079", "title": "一步一步的了解webpack4的splitChunk插件", "desc": "webpack4出了两个月，发现大家包括我对splitChunk的使用都还是在摸索阶段。我也看了挺多别人的配置demo，都觉得不太满意或者没得到太好的解惑，issue 下面的问题也没什么人回复，只能自己操作了，顺便记录下来，如果大家有更好的，欢迎评论区留下地址。 maxAsyn…"}, {"id": "6844904094692278286", "title": "总结vue知识体系之高级应用篇", "desc": "vue 作为目前前端三大框架之一，对于前端开发者可以说是必备技能。那么怎么系统地学习和掌握 vue 呢？为此，我做了简单的知识体系体系总结，不足之处请各位大佬多多包涵和指正，如果喜欢的可以点个小赞！本文主要讲述一些vue开发中的几个高级应用，希望能对大家有所帮助。 我们使用的第…"}, {"id": "6909133332064239623", "title": "用神奇的 form 验证 API 来优化你的表单验证", "desc": "鱼头曾在 『极限版』不掺水，用纯 CSS 来实现超飒的表单验证功能 一文中分享过一个花里胡哨的 纯 CSS 的表单验证功能 。虽然仅仅依赖 CSS 是无法满足我们的日常开发需求的，但是配合着各种原生的 form 验证 **API ** ，情况又不一样了。 下面就让我们来了解一下…"}, {"id": "6844904127416238093", "title": "这些优化技巧可以避免我们在 JS 中过多的使用 IF 语句", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 最近在重构代码时，我发现早期的代码使用太多的 if 语句，其程度是我从未见过的。这就是为什么我认为分享这些简单的技巧是非常重要的，这些技巧可以帮助我们避免过多的使用 if 语句。 接下来会介绍6种方式来代替 i…"}, {"id": "6844903865767165959", "title": "前端必知必会--操作URL的黑科技", "desc": "杀鸡焉用牛刀呢，今天我们来学习下专门用来处理URL的query的接口：URLSearchParams 。 有时候不知道一个字段是否存在，所以想事先校验下。使用实例的has方法进行判断，代码： 有时候想重写一个字段，而不是添加(append)一个字段，这时候需要使用set方法，比…"}, {"id": "6844904004703485966", "title": "通过事例重温一下 JS 中 常见的15 种数组操作(备忘清单)", "desc": "数组是 JS 中广泛使用的数据结构。数组对象提供了大量有用的方法，如array. forEach()、array.map()等来操作数组。 在实战中，我经常对数组可能的操作和相应采用哪个更好的方法不知所措，所以本文就列出 15 种常用数据方法，让咱们重温加强记忆一下。 1. 数…"}, {"id": "7000700538232766472", "title": "手撕祖传原型链图（上）", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 祖传原型链图 先来张祖传原型链图，是不是很熟悉？这个图呢咱先放一放（就拿出来吸口灵气用的哈哈哈），在讲解这个之前先介绍几个相关重要的概念 "}, {"id": "6844903709592256525", "title": "KOA2框架原理解析和实现", "desc": "koa是一个基于node实现的一个新的web框架，它是由express框架的原班人马打造的。它的特点是优雅、简洁、表达力强、自由度高。它更express相比，它是一个更轻量的node框架，因为它所有功能都通过插件实现，这种插拔式的架构设计模式，很符合unix哲学。 koa框架现…"}, {"id": "6844904151227301901", "title": "手写 new,  call,  apply,  bind,  reduce,  currying， 防抖节流 源码，并配上详细分析", "desc": "写这些主要是为了回顾与沉淀，再次编写的过程中也会提出自己的一些理解，有不恰当的地方希望指出。 在这里推荐一个线上 IDE, 我没事敲一些代码 demo 就用它了 StackBlitz，还是比较好使的，但是推荐在设置中改为保存的时候再更新，不然编写的时候更新太频繁会经常出问题。 …"}, {"id": "6844903951729426439", "title": "🚀揭秘vue/react组件库中🤚5个\"作者不造的轮子\"", "desc": "🚀 这五个轮子其实是5个纯js实现的插件, 都非常优秀, 下面一一给大家揭秘. 默认集成了url和email验证, 支持异步验证. element-ui和iview的表单组件都是用他实现的验证功能. 补充: 看了作者的github, 作者应该是阿里的员工, 而且也是ant d…"}, {"id": "6864111058891538445", "title": "重学前端-Promise用法详解", "desc": "在JavaScript的世界中，Promise毫无疑问是里程碑式的一个变革，它不仅解决了异步编程中，回调函数嵌套过深的问题，还为Async/Await奠定了基础。 Promise规范最早由CommonJS社区提出，后来成为ES2015(ES6)语言规范，到现在可以说已经成了异步…"}, {"id": "6999867280725114894", "title": "js语法基础-基础语法和变量声明", "desc": "ECMA-262第5版（ES5）定义的ECMAScript，是目前为止实现得最为广泛（即受浏览器支持最好）的一个版本。第6版（ES6）在浏览器中的实现（即受支持）程度次之。到2017年底，大多数主流浏"}, {"id": "6844903902307942414", "title": "Node.js 高级进阶之 fs 文件模块学习", "desc": "文件操作是开发过程中并不可少的一部分。Node.js 中的 fs 模块是文件操作的封装，它提供了文件读取、写入、更名、删除、遍历目录、链接等 POSIX 文件系统操作。与其它模块不同的是，fs 模块中所有的操作都提供了异步和同步的两个版本,具有 sync 后缀的方法为同步方法，…"}, {"id": "6990645790477647903", "title": "JS中使用Array的reduce&map&flat进行实践操作", "desc": "js 的Array相关操作， 包括map/reduce/flap等实践操作。 可以看到如上的方法取代传统的for"}, {"id": "6995899695092465672", "title": "CSS文字溢出显示省略号，且出现title或者tooltip", "desc": "CSS文字溢出显示省略号，且出现title或者tooltip，文字没有溢出则不出现title或者tooltip。"}, {"id": "7000731052675170317", "title": "JavaScript复习（四）｜ 8月更文挑战", "desc": "“这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战” 往期的复习资料： 【1】JavaScript复习（一）  【2】JavaScript复习（二） 【3】JavaScript复习（三） 说"}, {"id": "6994351715428335653", "title": "JavaScript 基础（五）", "desc": "正则表达式是JavaScript语言中的一部分，经常用于对字符串的校验。所以本文先介绍了字符串的属性和方法，然后入门正则表达式,从各个方面进行了解正则表达式。"}, {"id": "6993404191385485325", "title": "抖音双击点赞动效｜8月更文挑战", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 双击点赞动画：是指用手指点击两下特定的区域，就会自动完成点赞操作，这种动画在 桌面端 并不常见"}, {"id": "6844903503026995214", "title": "反击爬虫，前端工程师的脑洞可以有多大？", "desc": "对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。 而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是爬虫与反爬虫这一话题的由来。 但是世…"}, {"id": "6844903718089916429", "title": "面试官问：能否模拟实现JS的bind方法", "desc": "用过React的同学都知道，经常会使用bind来绑定this。 那么面试官可能会问是否想过bind到底做了什么，怎么模拟实现呢。 先看一下bind是什么。从上面的React代码中，可以看出bind执行后是函数，并且每个函数都可以执行调用它。 眼见为实，耳听为虚。读者可以在控制台…"}, {"id": "6990612233822666789", "title": "javaScript数组方法汇总", "desc": "JavaScript的 Array 对象是用于构造数组的全局对象，数组是类似于列表的高阶对象。数组是一种类列表对象，它的原型中提供了遍历和修改元素的相关操作"}, {"id": "6992193878321266725", "title": "Element 2 源码学习:组件源码剖析之国际化", "desc": "本文将系统讲解 element的国际化方案,内容包括语言翻译文件、国际化处理方法、文本格式等，耐心读完，相信会对您有所帮助。"}, {"id": "6844903569632526344", "title": "Vue 服务端渲染（SSR）", "desc": "什么是服务端渲染，简单理解是将组件或页面通过服务器生成html字符串，再发送到浏览器，最后将静态标记\"混合\"为客户端上完全交互的应用程序。 于传统的SPA（单页应用）相比，服务端渲染能更好的有利于SEO，减少页面首屏加载时间，当然对开发来讲我们就不得不多学一些知识来支持服务端渲…"}, {"id": "6995203008527073288", "title": "写了一个Strview.js", "desc": "Strview.js是一个可以将字符串转换为视图的JS库。这里的字符串一般指的是模板字符串。当然你也可以使用普通字符串，只不过在特定场景下普通字符串更有局限性。所以，优先使用模板字符串。"}, {"id": "6997014635186487332", "title": "《你所不知道的JavaScript》读书笔记（一）：作用域和闭包（上）", "desc": "、最近刚看完《你所不知道的JavsScript》的第一部分，为了防止自己遗忘，也是分享欲在作祟吧。想跟大家分享一下自己关于作用域和闭包的新认识。"}, {"id": "6990560208372105247", "title": "3D地图与3D柱状图联合使用", "desc": "给3D地图添加3D柱状图使用的功能原理是在地图上加上圆柱对象，可以用颜色和高度分别代表分类和值大小，根据需要将柱状图放置到指定位置即可。3D地图与3D柱状图联合使用，效果大概是这样： 注：根据你项目需"}, {"id": "6993982666601152549", "title": "学习canvas之实现简单绘制", "desc": "学习canvas断断续续已经有个小几天了，除了看下API，也不知道该怎么去学习。所以，又开始试图去模拟一些小工具，当然功能方面是能简单就简单，毕竟还在初学阶段，太复杂做不出来。"}, {"id": "6844904194474770445", "title": "javascript篇--1.6万字带你回忆那些遗忘的JS知识点", "desc": "发文前，小编想先对上一篇文章-css篇纠正错误以及针对文章提出的优化的小伙伴表示感谢，你们的每个建议或意见都很宝贵🌻🌻。 继上两篇文章html篇和CSS篇之后，本篇文章对于常见的有关Javascript部分的内容进行了大致的整合。文中涉及的知识面还是蛮广的，小编在整理的时候…"}, {"id": "6998826681976750110", "title": "setInterval（）函数的第二个参数", "desc": "setInterval定时器函数的第二个参数为变量 当第二个参数为变量的时候，变量改变了，但是我发现执行的等待时间并没有什么变化，还是等待原本第一次设置的时长，于是我就写了几句代码测试了一下。"}, {"id": "6989547878276399141", "title": "let 、var、const", "desc": "1.var 2.let 3.var 与 let 的区别 4.let 与 const 异同 及let var在for循环中的区别"}, {"id": "6931647184349691911", "title": "three.js 实现3D动态文字", "desc": "大家好，这里是 CSS 魔法使——alphardex。 demo里不止本文创建的这一种形状，大家可以随意把玩。"}, {"id": "6844904163285925902", "title": "[译] ECMAScript 2020 新特性", "desc": "JavaScript 是最流行的编程语言之一，每年都会添加新的特性。本文介绍了添加在 ECMAScript 2020（又称ES11）中的新特性。 在引入 ECMAScript 2015（又称 ES6）之前，JavaScript 发展的非常缓慢。但自 2015 年起，每年都有新特…"}, {"id": "6844903567912878094", "title": "前端知识集锦", "desc": "大家可以关注我的公众号，我在公众号中会更新视频，并且每晚都会推送一篇我认为不错的文章。"}, {"id": "7000947247789637663", "title": "LeetCode26-删除有序数组中的重复项 | 算法练习系列", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 前言 今天来一道LeetCode上面简单难度的算法题，删除有序数组中的重复项，听起来好像很简单，有序并且是数组，直接for循环遍历把和前一"}, {"id": "6844903607452581896", "title": "JavaScript 中常见设计模式整理", "desc": "开发中，我们或多或少地接触了设计模式，但是很多时候不知道自己使用了哪种设计模式或者说该使用何种设计模式。本文意在梳理常见设计模式的特点，从而对它们有比较清晰的认知。 看完了上述设计模式后，把它们的关键词特点罗列出来，以后提到某种设计模式，进而联想相应的关键词和例子，从而心中有数。"}, {"id": "6989878411296505893", "title": "🍉十分钟搞定解构赋值，你确定不来看看嘛~", "desc": "一、数组的解构赋值 基本用法 不完全解构 即等号左边的模式只匹配等号右边数组的一部分。这种情况下，解构依然可以成功。 报错的情况 如果等号的右边不是数组（或者严格地说，不是可遍历的结构，那么将会报错）"}, {"id": "6844903593896574990", "title": "Vue前端开发规范", "desc": "1. 组件名为多个单词 2. 组件数据 3. Prop定义 4. 为v-for设置键值 6. 为组件样式设置作用域 1. 组件文件 2. 单文件组件文件的大小写 3. 基础组件名 4. 单例组件名 5. 紧密耦合的组件名 6. 组件名中的单词顺序 7. 模板中的组件名大小写 8…"}, {"id": "6997403652348444679", "title": "JavaScript 的闭包，可以这样理解", "desc": "闭包这个概念是前端工程师必须要深刻理解的，但是网上确实有一些文章会让初学者觉得晦涩难懂，网上关于\"闭包\"的文章数不胜数，而且文章质量良莠不齐。本文面向初级的程序员，聊一聊我对闭包的理解。"}, {"id": "6992460647418036255", "title": "实现一个完整Promise对象｜8月更文挑战", "desc": "Promise 的规范有很多，如 Promise/A，Promise/B，Promise/D 以及 Promise/A 的升级版 Promise/A+。"}, {"id": "6913708131864772621", "title": "凹凸技术揭秘·羚珑页面可视化·成长蜕变之路", "desc": "京东零售集团 · 用户体验设计部打造的「羚珑智能设计平台」于 2019 年 5 月为内部运营及商家推出了智能页面设计工具，羚珑智能页面设计是一款在线可视化页面搭建平台，拥有在线搭建 PC、H5、小程序等多平台页面能力，覆盖频道页、活动页、店铺页、滑屏宣传页、答题类、互动游戏类、…"}, {"id": "7004702150118866974", "title": "js实现table排序", "desc": "现在很多组件库都包含table，并且都带有排序功能。虽然已经接触前端很长一段时间了，但是一直都在使用这些轮子，没有实现过排序功能。"}, {"id": "7000643595581521951", "title": "JavaScript 工具函数大全", "desc": "1.前言 \\ 总结下项目中经常使用到的一些js方法，以帮助自己的及别人的回顾 \\ 在开发的时候应该知道，有很多常见的实例操作。比如数组去重，关键词高亮，打乱数组等。这些操作，代码一般不会很多，实现的逻"}, {"id": "6968778160544415752", "title": "潮流前端周刊（第32期）- 南京", "desc": "封面图摄于南京总统府，有个城市旅游套路就是前几天吃吃逛逛，最后一天叫个跟团游，带你玩遍整个城市知名景点，车接送还很便宜，最后送你回高铁站，很香；此外南京是一座我觉得很潮流的城市，很值得一去，推荐去吃吃"}, {"id": "6995693849070796807", "title": "JSX和RN样式以及和web的不同之处", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 JSX：React中写组件的代码格式， 全称是JavaScript xml RN样式（主要讲解和web开发的不同之处） flex布局： 在"}, {"id": "6844903999074729997", "title": "TypeScript 真香系列——接口篇", "desc": "JavaScript 是弱类型的语言，所以并不会对我们传入的代码进行任何的检测，有些错你自己都说不清楚，但是就出了问题。 这时候你会发现这段代码还是有点长，代码不便与阅读，这时候就体现了 interface 的必要性。 使用 interface 对 user 的类型进行重构。 …"}, {"id": "6991335772137734152", "title": "JavaScript日常开发中常用的Object操作方法", "desc": "JavaScript日常开发中常用的Object操作方法 1. Object.assign() Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目"}, {"id": "6844903854174109703", "title": "精读《Function Component 入门》", "desc": "1. 引言 如果你在使用 React 16，可以尝试 Function Component 风格，享受更大的灵活性。但在尝试之前，最好先阅读本文，对 Function Component 的思维模式有一个初步认识，防止因思维模式不同步造成的困扰。 2. 精读 也就是，一个返回了…"}, {"id": "6844904101096980488", "title": "从全局播放到单例模式", "desc": "本文以音频能力中的全局播放为切入点，探讨单例模式在前端业务中的应用。文中代码均为 React 组件内代码。 对大多数具备音频能力的应用而言，为了保证音频体验上的流畅，全局播放基本是一项必备的能力，很难想象使用一个不具备全局播放能力的应用是种什么样的体验。设想一下，你在听一首歌的…"}, {"id": "6972363472159916046", "title": "ES6复习", "desc": "1.let 与块级作用域 JS中作用域有：全局作用域、函数作用域。没有块作用域的概念。ECMAScript 6(简称ES6)中新增了块级作用域。 块作用域由 { } 包括，if语句和for语句里面的{"}, {"id": "7004103046665863176", "title": "第7章第1节4-1函数递归--计算4的阶乘", "desc": "第7章第1节 题目要求+思路分析 代码实现............................."}, {"id": "6844903910809813005", "title": "可靠React组件设计的7个准则之组合和复用", "desc": "原文的篇幅非常长，不过内容太过于吸引我，还是忍不住要翻译出来。此篇文章对编写可重用和可维护的React组件非常有帮助。但因为篇幅实在太长，我对文章进行了分割，本篇文章重点阐述 组合和复用。因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 组合（com…"}, {"id": "6844904051457392654", "title": "使用intro.js实现分步骤帮助引导", "desc": "data-position：定义提示的位置，top，left，right，bottom，bottom-left-aligned（同bottom）， bottom-middle-aligned，bottom-right-aligned或auto（检测元件的位置，并自动分配正确的位…"}, {"id": "6844903985338400776", "title": "【JS 口袋书】已整理完毕,下个系列【TS 演化史】", "desc": "接下准备吞整理一下 【TypeScript 演化史】系列，全面讲解一下 TS 的发展，及每个特性的演化。 文章大部分虽然都是翻译的，但每篇基本都有加入自己的理解，并不完全翻译，因为这样我才能从中学到更多的东西，由于整理出来是给大家看的，所以还得逼自己不断去学习新的知识，不然整理…"}, {"id": "6844904004376330248", "title": "自定义的数据可视化大屏", "desc": "项目实现了： 生成图表， 任意拖拽， 改变图表大小， 样式（输入input按回车enter）， 双击删除， 可全屏的， 高度自定义的数据可视化大屏。 这里面有很多大佬制作了很多不错的echarts图表， 博主偷懒， 都是从大佬那嫖来的图表。 通过echarts-for-reac…"}, {"id": "6999545631589171214", "title": "JS中 var,let,const的区别和用法", "desc": "let 和 const 是ES6后新增的，同时也新增了块级作用域（大括号内{}） 一、主要区别： 使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象 使用 let 声明的变量，"}, {"id": "6867066016313114632", "title": "一点点学会编译文本", "desc": "使用 vue，都知道{{msg}}，能变成data.msg相对应的值hello。 此文循序渐进实现最终vue中编译文本的效果。 这里先不关注 dom 之类的事情，只专注于其中的逻辑。 其实这里的逻辑并不难，无外乎先找到{{msg}}，然后将整那个字符串替换成data.msg的值…"}, {"id": "6974952982076981284", "title": "# Egg —— 从零开始搭建一个商用Egg.js框架", "desc": "通过本文，你可以学习到： egg中生成swagger-ui文档 创建项目 Egg.js官方文档传送门 安装依赖: 启动项目 集成swagger-ui文档 安装依赖 config/plugin.js中声"}, {"id": "6881513398127820814", "title": "如何使用cesium加载3D模型", "desc": "高德地图不给力，加载大型复杂的建筑模型性能不佳，只能找到专业做3D地图的厂子cesium寻求理想的技术方案。 前后花了2天时间，终于实现了卫星地球加3D模型的顺滑效果，另外使用cesium突破了高德地图缩放尺度（最高到18）的限制，进入到街景的角度看到更多细节。然而cesium…"}, {"id": "6844904016388816904", "title": "精读《正交的 React 组件》", "desc": "搭配了合适的设计模式的代码，才可拥有良好的可维护性，The Benefits of Orthogonal React Components 这篇文章就重点介绍了正交性原理。 所谓正交，即模块之间不会相互影响。想象一个音响的音量与换台按钮间如果不是正交关系，控制音量同时可能影响换…"}, {"id": "6844903588590780429", "title": "前端工程师为什么要学习编译原理？", "desc": "普遍的观点认为，前端就是打好 HTML、CSS、JS 三大基础，深刻理解语义化标签，了解 N 种不同的布局方式，掌握语言的语法、特性、内置 API。再学习一些主流的前端框架，使用社区成熟的脚手架，即可快速搭建一个前端项目。胜任前端工作非常容易。再往深处学习，你会发现前端这个领域…"}, {"id": "6844903582433542151", "title": "JavaScript基础: 类与继承", "desc": "首先欢迎大家关注我的Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。 许久已经没有写东西了，因为杂七杂八的原因最近一直没有抽出时间来把写作坚持下来，感觉和跑步一样，一旦松懈下来就很难再次捡起来。最近一直想重新静下心来写…"}, {"id": "6844903606953459719", "title": "(干货)微信小程序组件封装", "desc": "自己封装的一个比较简单微信弹窗小组件，主要就是教会大家对微信小组件的用法和理解，因为微信小程序对组件介绍特别少，所以我就把自己的理解分享给大家。 相信大家在开发小程序时会遇到某个功能多次使用的情况，比如弹出框。这个时候大家首先想到的是组件化开发，就是把弹出框封装成一个组件，然后…"}, {"id": "6844904138002661384", "title": "插件封装｜封装一个属于自己的轮播图插件——左右切换版", "desc": "上一篇文章案例｜原生手写一个轮播图——渐隐渐显版还有很多不足，这里要非常感谢大佬csdoker给出的宝贵意见和指导🙏，所以笔者决定重新完善一下轮播图的案例，打算做一个简易版的左右轮播图插件的封装；一、"}, {"id": "6844904198220283912", "title": "前端效率工程", "desc": "vscode 有分屏功能，对于比较长的 vue 或者 html 页面，可以分两屏，第一屏看上面部分，第二屏看下面部分，这样不会上下来回滚动查看，从而节省时间，提高效率。 代码片段可以通过几个字符，打出一些复杂的固定的代码，甚至可以自己定义一些重复的代码模板，减少敲打代码工作量，…"}, {"id": "6989801374795956238", "title": "JavaScript基础-BOM", "desc": "JavaScript简介：页面上几乎所有的动态效果基本上都是JS做出来的，是一门解释性的编程/脚本语言"}, {"id": "6857672134526058510", "title": "你不知道的JavaScript对象", "desc": "在这个疫情慢慢好转，各种活动渐渐开始的时候，听到对象这个词，会让人浮想联翩。 只想不做，不是我们烧烤摊的风格，所以还是时间管理一波，总结下所想到的东西吧。 在一个旧的react项目中，00后贡献的代码基本都是Function Component + React Hook，但是一…"}, {"id": "6976918150084460580", "title": "Unity下TypeScript开发方案puerts", "desc": "puerts是游戏引擎下的TypeScript编程解决方案,能够支持Unity/UE4引擎. puerts是xLua的作者车雄生开发的,目前已经在腾讯的github上开源(https://github"}, {"id": "6991513747986579469", "title": "IIFE-立即调用函数表达式", "desc": "立即调用的匿名函数又被称作立即调用的函数表达式(IIFE, Immediately Invoked Function Expression)"}, {"id": "6844903895693737998", "title": "【JS进阶】教你在中后台系统玩转ES6", "desc": "本文是一篇应用型文章，根据实际的项目场景总结ES6的各种使用姿势。文章不会对ES6语法中的特性或原理做过多的说明，重点从实际的应用场景去理解ES6的新语法、新特性。 let声明的变量可被重赋值，const不行。 日常我们项目开发中，会在IDE保存文件或提交Git时会借助Esli…"}, {"id": "6969544898777186334", "title": "实现Promise串行函数", "desc": "函数描述 该函数作用类似Promise.all，不同的是Promise.all中的promise是并行的，而此函数的promise 要依次执行，类似这样 实现 目前能确定的是此函数的参数是个数组，返回"}, {"id": "6844903737736036360", "title": "Bootstrap 发布了个 v3.4 版本？是不是搞错了？", "desc": "是的你没有看错 - 今天我们发布了 Bootstrap 3.4.0 版本，这是一个早就该发布的更新，它解决了一些生命周期问题，修复了 XSS，并更新了构建工具，能让我们的开发更加轻松。 虽然我们为全新的 v3.x 准备了很长一段时间，但由于精力都集中在 v4 的工作上，导致动力…"}, {"id": "6844903953981767688", "title": "JavaScript：V8编译过程", "desc": "众所周知ECMAScript语言类型分为：Undefined，Null，Boolean，String，Symbol，Number，和Object。我们常说前六种数据类型为基础类型，Object为引用类型或者说复杂类型数据。那么我们有想过为什么说Undefined，Null，Bo…"}, {"id": "6844904160274415623", "title": "JS 工具库文档化 - JSDoc", "desc": "JSDoc 是一个自动化生成 JavaScript 文档工具，它是利用对 JavaScript 函数的特定注释来编译成 HTML 文件的一个文档工具。 这样我们就可以通过在项目下执行 npm run docs 命令来生成文档了。 常见的 JavaScript 块级注释，必须以 …"}, {"id": "6983656688419078174", "title": "JavaScript 字符串 经典面试算法", "desc": "需掌握的概念 ①回文 ②子串(连续) ③子序列(不连续) ④前缀树(Trie树) ⑤后缀树和后缀数组 ⑥匹配 ⑦字典序 1.互为变形词 给定两个字符串str1和str2,如果str1和str2中出现的"}, {"id": "6925036863543738375", "title": "Map and Set （映射和集合）", "desc": "首先这个 Map 不是数组操作方法的 map ，Set 也不是设置值的 set 。 Map 是一个带键的数据项的集合，就像一个 Object 一样。 但是它们最大的差别是 Map 允许任何类型的键（key）。 Set 是一个特殊的类型集合 —— “值的集合”（没有键），它的每一…"}, {"id": "6844903615627264007", "title": "[译文] 现代 js 框架存在的根本原因", "desc": "我曾见过很多很多人盲目地使用（前端）框架，如 React，Angular 或 Vue等等。这些框架提供了许多有意思的东西，然而通常人们（自以为）使用框架是因为： 它们适合做单页应用。 但这些都不是使用框架的根本原因。 假设你正在设计这样一个 Web 应用：用户可以通过群发电子邮…"}, {"id": "6903695584788807687", "title": "温故而知新ES6篇-符号与可迭代对象", "desc": "符号是ES6新增的基本值类型，是JavaScript中的第7种数据类型。符号是独一无二的数据类型，而且不具备字面量表示形式。 符号起初被设计用于创建对象私有成员。在符号诞生之前，将字符串作为属性名称导致属性可以被轻易访问，无论命名规则如何。而“私有名称”意味着开发者可以创建非字…"}, {"id": "6986646797217169416", "title": "Jong丨列表模糊搜索功能", "desc": "实现模糊搜索匹配高亮文字，用户在搜索栏输入搜索的内容，将列表中匹配的内容展示在列表中，同时对应的字段进行高亮处理"}, {"id": "6994087478034432037", "title": "es6 解构赋值 的几个注意点", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 es6中，解构赋值其实就是对赋值运算符的扩展。 他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。 在代码书写上简洁且易读，语"}, {"id": "6965133009578278942", "title": "高性能 JavaScriptの笔记（三）", "desc": "高性能的 JavaScript 算法和流程控制中阔以优化性能的地方 内涵循环、条件、递归的性能可优化方法介绍"}, {"id": "6966877665936539684", "title": "axios入门级封装以及取消重复请求应用", "desc": "axios封装以及取消重复请求应用。开发项目中，在处理长列表点击加载更多，需要考虑到用户网速比较慢的情况，在请求还没有到达之前，如果再次点击加载更多，需要对这种重复请求进行处理"}, {"id": "6900150859171430413", "title": "javaScript 二维码生成实战", "desc": "因项目开发经常会需要使用到二维码，无论是使用React或Vue框架都会找一找相关的封装好的框架，看着都是基于qr.js或者qrcode.js套一个外壳，还有些其他的版本的实现，看了看和qr.js大同小异，甚至可以说都是直接基于qr.js添加些功能。看着这个项目都是8年前的项目了…"}, {"id": "6844903646535139336", "title": "React服务端渲染+pm2自动化部署", "desc": "本文是直接着手SSR部分的并通过实战讲述自己遇到的一些问题和方案，需要大家有一定的React,node和webpack基础能力。skr，skr。 首先我们需要知道SSR对于SPA的好处，优势是什么。 更好的SEO（Search Engine Optimization），SEO是…"}, {"id": "6844903902849007624", "title": "async、await和generator函数内部原理", "desc": "async的实现就是将Generator 函数和自动执行器，包装在一个函数里。 协程是一种程序运行的方式，可以用单线程实现，也可以用多线程实现。 next 同一时间，可以有多个普通线程运行，而协程则只有一个在运行，其他协程则处在暂停状态。 js的Generator并非由引擎从底…"}, {"id": "6850418114836856846", "title": "immutablejs 是如何优化我们的代码的", "desc": "前一段时间群里有小伙伴问 lucifer 我一个问题：”immutablejs 是什么？有什么用？“。我当时的回答是：immutablejs 就是 tree + sharing，解决了数据可变性带来的问题，并顺便优化了性能。今天给大家来详细解释一下这句话。 我们还是通过一个例子…"}, {"id": "6991453355365105694", "title": "web前端高级JavaScript - 基于多种方案实现发布订阅设计模式 | 8月更文挑战", "desc": "方案一：不支持自定义事件，且页面只有一个事件池（基于单例设计模式） 方案二：支持自定义事件 方案三：创建多个事件池，每个事件池是独立的存放自己的订阅方法，但也可以互相共用(基于面向对象中的类和实例)"}, {"id": "6990639370080354311", "title": "JS 函数的执行时机", "desc": "1 解释为什么如下代码会打印 6 个 6 这里主线程上面要执行的任务是：for循环。由于每执行一次for循环就要设一个定时，就好比是每次循环“定一个闹钟”。一共执行6次循环，那么就定了6个闹钟。 在零"}, {"id": "6906295144505409549", "title": "VUE单元测试--开启测试之旅", "desc": "作为程序员，没有比临上线前发现之前的更改的代码导致应用崩溃更糟糕的事了。而唯一能够确保应用正常的工作的只有进行程序的测试。所以说对应用进行全面的测试是很重要的一件事了。 高效的测试方法可以加快开发速度，提高代码质量，尽早发现并去除代码中的BUG。测试驱动开发（TDD）是一种在编…"}, {"id": "6948587295473664007", "title": "JavaScript中面向对象到底什么是？", "desc": "记得大学java课的老师经常说:\"万物皆对象\"。 支持面向对象编程（OOP）的语言通常以类(主要语言有Java)或原型(主要语言有JavaScript)的形式出现，然后使用继承用于代码重用和可扩展性。那些使用类的时候有两个主要概念： 对象有时对应于现实世界中发现的事物。例如，一…"}, {"id": "6992942358337847309", "title": "重学es6 - 第四部分 | 8月更文挑战", "desc": "上一次我们在最后介绍了一些数组方法find、fill、map、reduce、filter、forEach,我们先接着上次没介绍完的数组新方法. 如果想了解上边方法的话,可以看我的上一篇文章."}, {"id": "6950793020052602910", "title": "一起搞清楚JS中的new到底做了什么，并模拟实现一个new", "desc": "new关键字对于前端开发者来说是比较常见的操作，在互联网大厂的面试中，有时候会要求手写实现new。接下来我们一起看看new到底做了什么？如何模拟实现？new原理介绍new概念关于new关键字，MDN上"}, {"id": "6923055742161600526", "title": "JavaScript深入之从原型、原型链到继承", "desc": "大家可以把他想象成梯子，一节一节的通过__proto__连在一起。查找对象属性和方法的时候会一直向上查找，直到梯子的顶端。其实在js里一切皆是对象，不是java类语言，没有复制机制，对象之间联系只能通过原型链做为关联。 从下面代码中我们可以看到Person函数有prototyp…"}, {"id": "6844903997476700174", "title": "精讲 JavaScript 的 \"switch\" 语句", "desc": "switch 语句可以替代多个 if 判断。 switch 语句为多分支选择的情况提供了一个更具描述性的方式。 switch 语句有至少一个 case 代码块和一个可选的 default 代码块。 比较 x 值与第一个 case（也就是 value1）是否严格相等，然后比较第二…"}, {"id": "6844903648460275726", "title": "房价在手，天下我有 --反手就撸一个爬虫(始)", "desc": "最近身边的朋友都在看房子，天天沉浸在各大房价网站中，看了几天和我抱怨还是对杭州的整个房价高低没有一个具体的概念。优秀且敏感的我听到了仿佛闻到了一丝需求的味道，既然他们拥有了这么优秀的我，怎么能让他们一直这么看房！ 憋说了！你们的房价由我来守护，是时候要拿出我的吃饭的家伙了。 项…"}, {"id": "6844904186837106696", "title": "『初中级前端必看』谈谈如何更有质量地看源码", "desc": "最近有很多童鞋跟鱼头说，面试的时候动不动就问源码。 也有很多童鞋遇到问题的时候，鱼头建议这些童鞋看相关库 / 框架 / 项目的源码。 但是也有很多童鞋向鱼头抱怨说：“源码太难了。” 其实不是的。 作为一个优秀（或说合格）的开源项目，它的代码一定不会是晦涩难懂的。不仅是代码本身，…"}, {"id": "6991271618718728205", "title": "JS的四种 for loop ", "desc": "for loop 普通 for 循环 自行指定循环次数。 先来看一下常见写法： 如果数组长度在循环过程中不会改变，将数组长度用变量存储起来会获得更好的效率，改进后的写法： forEach 循环 ite"}, {"id": "6844904029823188999", "title": "几分钟优化你的国际化", "desc": "本文针对国际化翻译数据多，并存放在服务器的情况，对优化进行了思考，并写了了一个插件https://github.com/jmx164491960/translate-manager，供大家参考或使用。抛砖引玉，如果有需要改进的地方，希望大家指正。 国际化翻译数据存在了数据库中。…"}, {"id": "6974219870657314852", "title": "从底层原理一步步剖析JS的原型和继承【40个疑问解答】", "desc": "本文从底层原理一步步剖析JS的原型和继承，学习了这些，我觉得自己对这方面的理解的功底明显加厚，之前也总结过几篇相关文章，但是这篇是方便平时使用的理解。也更系统的一步步递进知识点，形成知识体系。"}, {"id": "6844903559251640328", "title": "微信小程序中生成二维码工具：weapp.qrcode.js", "desc": "在近期的小程序开发中，有一个离线生成二维码的需求。当时想到了一些优秀的前端开源库 jquery-qrcode 和 node-qrcode，由于小程序中没有DOM的概念，这些库在小程序中并不适用。 所以，针对微信小程序的特点，封装了 weapp.qrcode.js ，用于在小程序…"}, {"id": "6844903661097713671", "title": "悄悄掀起 WebAssembly 的神秘面纱", "desc": "对于现在的计算机来说，它们只能读懂“机器语言”，而人类的大脑能力有限，直接编写机器语言难度有点大，为了能让人更方便地编写程序，人类发明了大量的“高级编程语言”，JavaScript 就属于其中特殊的一种。 为什么说是特殊的一种呢？由于计算机并不认识“高级编程语言”写出来的东西，…"}, {"id": "6844903696409559048", "title": "「译」React 项目结构和组件命名之道", "desc": "React 作为一个库，不会决定你如何组织项目的结构。这是件好事，因为这样我们有了充分的自由去尝试不同的组织方式并且选取最适合我们的方式。但是从另一个角度讲，这可能会让刚刚上手 React 的开发者产生些许困惑。 我将会在本文为大家展示我已经使用过一段时间并且效果不错的方式，这…"}, {"id": "6844903618777186311", "title": "基于Vue的SPA如何优化页面加载速度", "desc": "..... 2. 静态文件本地缓存有两种方式 而开启GZip压缩和使用SSR原理都比较简单，我们很容易想到这两种方式是如何提高页面加载速度的。 但是除了上面几种方式，另外一种优化方案也不容小觑，这也是我在近期项目开发中使用并理解到的。我们先说说通常项目中是如何加载页面数据：Vu…"}, {"id": "6844903732518322183", "title": "深入理解JavaScript原型链与继承", "desc": "原型链原型链一直都是一个在JS中比较让人费解的知识点，但是在面试中经常会被问到，这里我来做一个总结吧，首先引入一个关系图：一.要理解原型链，首先可以从上图开始入手，图中有三个概念：1.构造函数：JS中"}, {"id": "6904138166685401102", "title": "js数组所有内置方法简述以及手动实现(一)", "desc": "因为有一次面试碰到了问有没有用过数组所有的内置方法？、是否清楚所有内置方法的参数和使用？当时并没有能全部答出来，所以决定从头理一篇所有的数组内置方法，并且自己实现一遍。主要是知识梳理，读者们也能从头梳理一遍。下面的方法尽量会全部自己实现，实在有困难的会google，然后注明出处…"}, {"id": "6980170760258060324", "title": "js实现图片合并下载（附代码）", "desc": "前些日子碰到一个需求，关于图像合并下载并转换为文件格式。综合考虑，决定使用Canvas实现，本文以记录实现流程，供大家参考。"}, {"id": "6980241901244907551", "title": "js 下载文件并重命名", "desc": "背景 当我们将图片，视频，音乐，PDF或者其他文件上传给后端时，后端为了文件名不重复，可能会做一些处理。比如使用日期+时间戳+随机数的方式名命，又或者使用UUID或其他方式生成文件名。这就会导致一个问"}, {"id": "6875676763658141709", "title": "使用 babel 全家桶模块化古老的面条代码", "desc": "在最近的工作中，接手了一个古老的项目，其中的 JS 代码是一整坨的面条代码，约 3000 行的代码全写在一个文件里，维护起来着实让人头疼。 想不通为啥之前维护项目的同学能够忍受这么难以维护的代码……既然现在这个锅被我拿下了，怎么着也不能容忍如此丑陋的代码继续存在着，必须把它优化…"}, {"id": "6914853359350448142", "title": "详解 Typescript 里的 This", "desc": "this可以说是Javascript里最难理解的特性之一了，Typescript里的 this 似乎更加复杂了，Typescript里的 this 有三中场景，不同的场景都有不同意思。 在处理继承的时候，如果 superclass 调用了示例方法而非原型方法，那么是无法在 su…"}, {"id": "6895562434715746318", "title": "前端 MVVM 模式中的数据层（Model）", "desc": "当今时代，React、Vue、AngularJS 三大框架横行，我们很难争论出哪个是最好的框架，但三者共同点是 MVVM 的模式，用一张简单的图可以看到，MVVM 模式最出色的是 ViewModel 层，ViewModel 帮我们摆脱了麻烦的 DOM 操作，相比 MVC 模式有…"}, {"id": "7000729469820338213", "title": "分享字符串、数组、 对象 之间转化的经典练习", "desc": "分享2道字符串、数组、 对象 之间转化的经典练习 字符串怎么转化成数组？？ 字符串又怎么转化成对象？？"}, {"id": "6976515552118308894", "title": "自定义 Stylelint 插件-自动转换sass的变量值", "desc": "我们关心代码质量和用户体验。出于这个原因，我们使用各种工具来使开发更容易、更准确。其中，我们使用Stylelint来整理我们的 SCSS 和 CSS 文件。stylelint 的强大功能之一是能够添加"}, {"id": "6993663670714630157", "title": "【jszip】压缩/解压缩文件", "desc": "整理 jszip 在浏览器端以及 nodejs 中解压文件、压缩文件的使用方式，以及解压文件之后针对不同类型的文件解码方式。"}, {"id": "7005210758359302174", "title": "【Js】axios批量请求指南", "desc": "一、axios请求 封装好的axios的post请求 二、错误示范 首先，主观的去使用for循环在循环体中使用axios去发送请求，将response返回的参数赋值给变量，然后存入数组中。 最后在控制"}, {"id": "6844904182915432455", "title": "精读《用 React 做按需渲染》", "desc": "BI 平台是阿里数据中台团队非常重要的平台级产品，要保证报表编辑与浏览的良好体验，性能优化是必不可少的。 当前 BI 工具普遍是报表形态，要知道报表形态可不仅仅是一张张图表组件，与这些组件关联的筛选条件和联动关系错综复杂，任何一个筛选条件变化就会导致其关联项重新取数并重渲染组件…"}, {"id": "6844903576318246919", "title": "H5直播入门（理论篇）", "desc": "这篇总结其实是去年公司每周技术分享会轮到我的时候写的。那时候公司正在大刀阔斧地准备直播业务，私以为主管会委以重任，就翻了不少论坛，做了一次简单的技术分享。后来直播业务让另一位同事承担了，自己也就没了实践直播的机会，有点可惜吧。好了，废话不多说，开始我们的理论篇~ 可以看到，直播…"}, {"id": "6977953126271680549", "title": "数据结构之树（二叉树的遍历）", "desc": "这是我参与更文挑战的第26天，活动详情查看：更文挑战 树的遍历 遍历一颗树就是指访问树的每个节点并对它们进行某种操作的过程。 遍历方式又分为： 中序遍历，是一种以上行顺序访问BST所有节点的遍历方式，"}, {"id": "6844904167728021512", "title": "精读《recoil》", "desc": "Recoil 是 Facebook 公司出的数据流管理方案，有一定思考的价值。 Recoil 是基于 Immutable 的数据流管理方案，这也是它值得被拿出来看的最重要原因，如果要用 Mutable 方式管理 React 数据流，直接看 mobx-react 就足够了。 断点…"}, {"id": "6844903651182379021", "title": "前端异常监控、上报及js压缩代码定位", "desc": "1. window.onerror 异常处理 window.onerror 无论是异步还是非异步错误，onerror 都能捕获到运行时错误。 1）window.onerror 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Unc…"}, {"id": "6987655482043269156", "title": "初学者必须知道的JavaScript认识(一)", "desc": "JavaScript的组成： ECMAScript****是一种由Ecma国际(前身为欧洲计算机制造商协会,英文名称是（European Computer Manufacturers Associat"}, {"id": "6990247282612371486", "title": "组件注册 - 学习vue源码系列3.4", "desc": "认识组件的注册过程，并理解全局注册和局部注册的差异。其实在平时的工作中，当我们使用到组件库的时候，往往更通用基础组件都是全局注册的，而编写的特例场景的业务组件都是局部注册的"}, {"id": "6873695385358073864", "title": "Blazor VS JavaScript：Blazor 能否取代 JavaScript 成为 Web 开发的首选框架", "desc": "在过去的数年中，JavaScript 一直是开发单页应用最受欢迎和使用最广泛的语言。但是近期，微软推出了一个名为 Blazor 的新框架，让我们可以使用 C# 开发基于浏览器的应用。在这篇文章中，我将首先介绍 Blazor，其热度背后的原因，并且将其与 JavaScript 作…"}, {"id": "6964749085794369566", "title": "[JS]解构赋值", "desc": "数组的解构赋值 ES6允许按照一定模式从数组或对象中提取值，然后对变量进行赋值，称为解构。只要等号两边的模式相同，左边的变量就会被赋予对应的值，这种写法属于“模式匹配”。统称起来就叫做“解构赋值”。 "}, {"id": "6968277948151365663", "title": "最全 ECMAScript 攻略之 ES2019-ES10", "desc": "Array#{flat,flatMap} ECMAScript 2019 在 Array.prototype 上增加了两个方法:flat()和 flatMap()。 这两个方法为打平数组提供了便利。如"}, {"id": "6972902195087966244", "title": "Javascript系列之事件循环 （别再被面试官问倒了!）", "desc": "作为面试常考的知识点之一，我们都应该知道事件循环的重要性。我们如何彻底弄懂Javascript的事件循环呢？看完这篇文章，让你彻底深入了解事件循环，面试再也不慌。"}, {"id": "6965704719356395557", "title": "JavaScript——关于迭代（迭代与循环、迭代器、可迭代对象.....）", "desc": "迭代还是循环？到底什么是迭代器？迭代器和可迭代对象又有什么关系？隔壁小孩半夜传来惨叫哭诉迭代太难？这到底是人性的扭曲还是道德的沦丧，且听我慢慢道来。"}, {"id": "6879039137819656206", "title": "前端开发必会的JS硬知识（二）", "desc": "文/小魔女本文简介前端开发必会的JS硬知识的第二篇文Javascript是前端必不可少的，它涵盖的内容很多。本系列将把前端开发得掌握的所有知识点整理并分享给大家，本文将围绕this、原型链与继承展开。"}, {"id": "6916460251336146958", "title": "看完，你会发现，原型、原型链原来如此简单！ | 七日打卡", "desc": "在Javascript(下面简称JS)的世界里，有这么一句话，一切皆为对象。 答案：当然，不是。 准确来讲应该是对于 “引用类型” 而言，Javascript把数据类型分为原始数据类型和引用数据类型。 本文所讲的原型对象和原型链也只是针对对象才有的，JS以原型链的形式，保证对象…"}, {"id": "6844903496521613320", "title": "跨域", "desc": "本文主要涉及三种跨域方法：JSONP、CORS、postMessage。 通常，最常用的跨域方式有以下三种：JSONP、CORS、postMessage。 单纯地为了实现跨域请求而创造的一个 trick。 虽然因为同源策略的影响，不能通过XMLHttpRequest请求不同域上…"}, {"id": "6989429948251373582", "title": "简述回调地狱现象以及解决方法", "desc": "1. 回调地狱的出现形式 举个栗子： 输出结果：先2s拿到油条，再1s拿到豆浆 2. 回调地狱现象 3. promise对象 promise的详细用法请看===> js中的promise对象 结果依旧"}, {"id": "6980901682825674760", "title": "JavaScript高级", "desc": "第一部分：基础总结深入 1.1 数据类型 基本类型（值类型） 对象（引用类型） 判断 typeOf undefined、数值、字符串、布尔值 instanceOf 专门用来判断对象的具体类型：函数？数"}, {"id": "6894401976809816077", "title": "详解 JavaScript 构造函数和 \"new\" 操作符", "desc": "常规的 {...} 语法允许创建一个对象。但是我们经常需要创建许多类似的对象，例如多个用户或菜单项等。 这可以使用构造函数和 \"new\" 操作符来实现。 构造函数在技术上是常规函数。不过有两个约定： 它们的命名以大写字母开头。 它们只能由 \"new\" 操作符来执行。 一个新的空…"}, {"id": "6893478613573156872", "title": "低代码开发平台核心功能设计——组件自定义交互实现", "desc": "笔者最近一直在研究Lowcode(低代码)平台, 也做了非常多的实践, 对于页面可视化搭建平台有了基本的研发方向和解决方案, 后期会陆续分享我对低代码平台的一些理解和解决方案, 并在企业应用层做一些探索. 1. 什么是低代码以及低代码的意义 低代码 是一种软件开发方法，可以更快…"}, {"id": "6844903858632654856", "title": "Babel快速上手使用指南", "desc": "在刚开始使用babel的时候，相信很多同学应该和我一样，对于babel的使用配置一知半解，babel相关的包@babel/core，@babel/cli，babel-loader，@babel/polyfill，@babel/plugin-transform-runtime，@…"}, {"id": "6998158915066134541", "title": "JS算法之旋转数组的最小数字及矩阵中的路径", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 旋转数组的最小数字 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。"}, {"id": "6988756455662829576", "title": "JavaScript的async与await应用", "desc": "JS协程异步处理多任务demo 在Chrome的Console下处理1000个请求，耗时50s内全部完成"}, {"id": "6996286023751696397", "title": "JavaScript 基础学习-事件委托&拖拽原理", "desc": "☆☆☆ 今天的内容(事件委托) 重点!! ☆☆☆ 用自己的理解, 用白话文简单又全面概括基础知识点,"}, {"id": "7002238440477720606", "title": "重温js——作用域和作用域链", "desc": "作用域 看过上一篇重温js——执行上下文,里面提到了一个概念叫做执行环境，在里面说到了 全局环境，函数环境和eval的环境。那里面所说的环"}, {"id": "6844903694069137421", "title": "ES6 系列之我们来聊聊 Promise", "desc": "Promise 的基本使用可以看阮一峰老师的 《ECMAScript 6 入门》。 我们来聊点其他的。 1. 回调嵌套 然而在实际的项目中，代码会更加杂乱，为了排查问题，我们需要绕过很多碍眼的内容，不断的在函数间进行跳转，使得排查问题的难度也在成倍增加。 当然之所以导致这个问题…"}, {"id": "6967320305475780638", "title": "JS - Web APIs 应用js实现页面交互 ", "desc": "Web APIs 和 JS 基础关联性 JS的组成 ： js语法 DOM BOM Web APIs：DOM BOM API 和 Web API API： 应用程序编程接口， 是一些预定义的函数 简单理"}, {"id": "6844903720929460237", "title": "Cookbook：优化 Vue 组件的运行时性能", "desc": "Vue 2.0 在发布之初，就以其优秀的运行时性能著称，你可以通过这个第三方 benchmark 来对比其他框架的性能。Vue 使用了 Virtual DOM 来进行视图渲染，当数据变化时，Vue 会对比前后两棵组件树，只将必要的更新同步到视图上。 Vue 帮我们做了很多，但对…"}, {"id": "6987417948533030925", "title": "【算法学习】JavaScript数据结构与算法-栈", "desc": "前言 做程序员的第3个年头，从一名切图仔逐渐成为公司开发的主力，随着业务的深入和经验的积累，算法的学习提上了日程。 从今天开始，我将把平时项目中积累的经验和JavaScript算法结合起来出一个系列的"}, {"id": "6916058482231754765", "title": "for in 和 for of 的区别", "desc": "在对数组或对象进行遍历时，我们经常会使用到两种方法:forin和forof，那么这两种方法之间的区别是什么呢？让我们来研究研究简单来说就是它们两者都可以用于遍历，不过forin遍历的是数组的索引（in"}, {"id": "6844904121963642894", "title": "倒计时的那些坑", "desc": "在移动端，浏览器切到后台，页面的定时器就被暂停了，重新打开浏览器时，倒计时才继续执行，这就导致倒计时执行时长变长了。 一个页面有多个倒计时，比如商品列表的开售倒计时，当页面打开停留较长时间后，会发现有的商品倒计时会不准确。 定时器被暂停是因为浏览器将页面的线程停止了，毕竟浏览器…"}, {"id": "6844903667414335501", "title": "前端数据校验从建模开始", "desc": "做前端已经有很长一段时间了，不知道大家是否和我有同样的感受，在一些 Web 应用中表单处理起来比其他功能模块都麻烦，很多体力活，往往在数据的校验会很费时间。 为了能够把这部分代码更有条理,我们把数据校验部分通过 Schema 预先定义一个数据模型，把数据扔进去，返回校验结果。 …"}, {"id": "6953594159768797214", "title": "这一次，彻底弄懂 JavaScript 函数执行机制", "desc": "一、作用域&上下文 1、 作用域 作用域就是JS函数和变量的可访问范围，分为全局作用域、局部作用域和块级作用域。 全局作用域是整个程序都能访问到的区域，web环境下为window对象，node环境下为"}, {"id": "6844903747110305805", "title": "2019 年，19 种方法让自己成为更好的 Node.js 工程师", "desc": "编者按：文中作者为大家提供了19种方法，大多数方法后面都提供了例子，如果你对这些例子感兴趣，请直接查看英文原文，并访问例子中的链接。 我已经汇集了 19 项 2019 年可能有价值的技能和主题。请别为难我 - 我和大多数开发人员一样，不可能熟悉每一个主题。 这些只是我所关注的令…"}, {"id": "6844903806807834637", "title": "JavaScript设计模式总结", "desc": "补充：如果以下内容有什么不对的地方，欢迎指正。 设计模式是为了更好的代码重用性，可读性，可靠性，可维护性。 创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。 结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元…"}, {"id": "6914538946751889422", "title": "ES2021 新特性提前知，附案例", "desc": "ES2021 也就是 2021 年的 ECMAScript 版本。ES2021 并没有像 ES2015 那样提出很多新特性，但却合并了一些有用的特性。 本文将会用通俗易懂的代码示例来介绍 ES2021 的新特性。当然在这之前，你需要了解 JavaScript 的基础知识。 上述…"}, {"id": "6844903710816993287", "title": "VS Code书写vue项目配置 eslint+prettier 统一代码风格", "desc": "以前公司的vue项目只是我一个人在写，代码风格统一，但是后来随着团队增加，统一的代码风格就越来越重要。我的主力工具是sublime，ws辅助，vscode基本很少使用（就下载安装放在冷宫），但是听说用来写vue项目还不错，就开启了一番折腾。当然工具么，没有谁好谁坏了~~ 不盲目…"}, {"id": "6844903846993461256", "title": "深入理解 Webpack 打包分块（上）", "desc": "随着前端代码需要处理的业务越来越繁重，我们不得不面临的一个问题是前端的代码体积也变得越来越庞大。这造成无论是在调式还是在上线时都需要花长时间等待编译完成，并且用户也不得不花额外的时间和带宽下载更大体积的脚本文件。 然而仔细想想这完全是可以避免的：在开发时难道一行代码的修改也要重…"}, {"id": "6967174228231585822", "title": "一分钟了解BOM ", "desc": "BOM BOM(浏览器对象模型)的核心是window对象 1. window对象 window表示浏览器的一个实例 window对象是js访问浏览器窗口的一个接口,也是es规定的es的Global对象"}, {"id": "6844903608534695943", "title": "从头开始学习vue-router", "desc": "要学习vue-router就要先知道这里的路由是什么？为什么我们不能像原来一样直接用标签编写链接哪？vue-router如何使用？常见路由操作有哪些？等等这些问题，就是本篇要探讨的主要问题。 这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是SPA（单页应用）的路径管理…"}, {"id": "6906369563793817607", "title": "深拷贝 浅拷贝", "desc": "首先说下堆栈，基本数据类型与引用数据类型，深拷贝与浅拷贝与此相关。 引用数据类型：统称为Object类型，细分的话，有：Object，Array，Date，Function等。 a.基本数据类型保存在栈内存，形式如下：栈内存中分别存储着变量的标识符以及变量的值。 b.引用数据类…"}, {"id": "6874829017006997511", "title": "掌握JavaScript面试：什么是闭包？", "desc": "在学习闭包之前，我们要先了解下作用域与词法作用域。掌握了之后，只需一步就可以最终了解闭包。 这个例子中的count变量属于foo函数创建的作用域，在该作用域内可访问。如果从外部访问count会引发报错,正常情况下执行完foo函数后他所拥有的这个作用域就会被主动释放和销毁。 分别…"}, {"id": "6984983467834638366", "title": "js 中关于操纵 Element 进行滚动的方法，都在这了‍‍‍", "desc": "为了方便咱操作 html 中的元素滚动条进行上下左右的滚动，js 自带了N种（规范内）方法，遵循 CSSOM View 规范的 Scroll。"}, {"id": "6998312832731185188", "title": "处理异步请求 demo(for await of 对比 Promise.all 、generator 、Promise.allSettled)", "desc": "返回最终值请求无依赖关系时： Promise.allSettled、promise.all、for await of"}, {"id": "6844903509192605709", "title": "好用的前端API备忘录", "desc": "记住所有API几乎是不可能的，这时候你需要一份备忘录！下面是我收集的最棒的前端备忘录。"}, {"id": "6844903802185711629", "title": "彻底搞懂浏览器Event-loop", "desc": "前段时间，和头条的小伙伴聊天问头条面试前端会问哪些问题，他称如果是他面试的话，event-loop肯定是要问的。那天聊了蛮多，event-loop算是给我留下了很深的印象。原因很简单，因为之前我从未深入了解过，如果是面试的时候，我遇到了这个问题，估计回答得肯定不如人意。 因此，…"}, {"id": "6887054571080777735", "title": "闭包中的变量到底存在哪里？", "desc": "我在面试的时候经常会与候选人探讨闭包内的变量存储，发现绝大多数的人仅仅止步于闭包的定义，却对闭包内的变量存储模糊不清，所以本文将试着通过对js引擎运行时heapdump分析来一探究竟。 这里说明下，heapdump是对堆内存进行文件快照，从上述的结果中可以清晰地看到闭包中定义的…"}, {"id": "6854573216107593742", "title": "JS通信方式知多少？JS和多端应用通信", "desc": "其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。 将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传…"}, {"id": "6844904042171203591", "title": "一句话讲明白 WebAssembly、微前端等技术背后的核心", "desc": "WebAssembly 是在浏览器端可执行的字节码，主要解决的问题是性能。编辑器能把 C、C++、Go、TS 等语言编译成 WebAssembly 并能在浏览器中运行。 使用场景一般就是对性能有很高要求的应用，另外也可以把一些本来需要在后端完成的操作放到前端来做。比如视频解码、…"}, {"id": "6844903813501976583", "title": "灵活使用 console 让 js 调试更简单", "desc": "Web开发最常用的高度就是 console.log ，虽然 console.log 占有一席之地，但很多人并没有意识到 console 本身除了基本 log 方法之外还有很多其他方法。 适当使用这些方法可以使调试更容易，更快速，更直观。 在console.log 中有很多人们意…"}, {"id": "7000993572363173924", "title": "数组常用方法总结", "desc": "数组和对象是我们在开发过程中最常用的数据结构,有好的轮子能帮助我们在处理代码时跑的更快,在代码的路上跑的更远.数组常用方法总结,用于记录菜鸟的点滴代码人生,不喜勿喷"}, {"id": "6844903939062628360", "title": "学习 lodash  源码整体架构，打造属于自己的函数式编程类库", "desc": "感兴趣的读者可以点击阅读。 underscore源码分析的文章比较多，而lodash源码分析的文章比较少。原因之一可能是由于lodash源码行数太多。注释加起来一万多行。 分析lodash整体代码结构的文章比较少，笔者利用谷歌、必应、github等搜索都没有找到，可能是找的方式…"}, {"id": "6844903591174471687", "title": "webpack从此不再是我们的痛点 — 核心基础", "desc": "WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。并且跟具你的在项目中的各种需求，实现自动化处理，解放我们的生产力…"}, {"id": "7003223416547311652", "title": "javascript  对象原型记录（红宝书）", "desc": "new 操作叫符，经历了4个过程。 创建一个新的对象 将构造函数的作用域赋值给新的对象（因此this 就指向了这个对象） 指向这个构造函数中的代码 返回了新的对象 person1 和 person2 "}, {"id": "6992879683377299463", "title": "手写Promise｜ 8月更文挑战", "desc": "“这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战” promise 可以说是现在面试必出的知识点之一，这不也快到了金九银十的招聘季了嘛，就趁着这段时间，好好的复习一下知识点。"}, {"id": "6860387632887955463", "title": "都2020年了，我还不懂虚拟DOM", "desc": "2020年，vue3.0 beta 和 vue3 rc陆续发布，优秀的人也早已开始各种实践新版本的新特性，而我还不懂虚拟DOM，所以赶紧跟学起来。 当我们打开一个页面，点击查看元素，就能在开发中工具中看到页面对应的DOM节点。 假如我们将这些DOM节点使用一个js对象去表示，那…"}, {"id": "6877794770387730445", "title": "如何拆解React巨石应用？qiankun | 🏆 技术专题第四期征文", "desc": "项目引用的npm包很多，业务代码也很多，有着向巨石应用发展的趋势。巨石应用的一些典型问题如下：构建效率低下、dev-server 占用内存大甚至内存泄露、维护成本急剧增加。 项目主框架升级成本高，要兼容旧代码。 项目里的某些业务几乎不再迭代，但每个版本依然会被打包构建，每次构建…"}, {"id": "6844904133321818119", "title": "你不知道的 web 生命周期", "desc": "最近做 web 性能采集分析，一直觉得跟用户交互无关的采集都放在 onLoad 或 DOMContentLoaded 中很不合理。 一番搜索，发现 web 页面也是有生命周期的。一番研究，解决了如何避免干扰用户采集信息的困惑。 提供了一系列的生命周期钩子函数，方便开发者能够在不…"}, {"id": "7000248616216428575", "title": "Jsx如何转换成真实DOM", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 React渲染 react通过将组件编写的JSX映射到屏幕，以及组件中的状态发生了变化之后 React会将这些「变化」更新到屏幕上 在前面"}, {"id": "6960609406530617375", "title": "浅谈ECMAScript6", "desc": "1.Proxy Proxy 可以理解成，在目标对象之前架设一层\"拦截\",外界对该对象访问的时候 都必须先通过这一层拦截，相当于提供了一种机制，可以对外界的访问进行过滤和改写 Proxy对象的所有用法，"}, {"id": "6844903838328045576", "title": "[探索] 怎样让 JS - API 具有更好的实用性", "desc": "在上家公司开发后台管理系统的时候，频繁要处理各种数据显示的问题，一开始是实现就好。后来写多了，自己看得也难受了。就想着怎么优化代码和复用了。下面就通过一个简单的例子，怎么让 API 更加的实用，更好的复用。 代码写好了，想必大家也开始难受了。因为每改一次需求，就要改一次 set…"}, {"id": "6998702248419147807", "title": "【日拱一卒】JavaScript面向对象精要 三", "desc": "前言 这是我参与8月更文挑战的第21天，活动详情查看： 8月更文挑战” 加速加速~ 第三章 理解对象 定义属性 当第一个属性第一次被添加给对象时，JavaScript在对象上调用一个名为[[Put]]"}, {"id": "6982390786990014477", "title": "call和apply的那些事", "desc": "js基础apply和call 二者用途都更改 this 的指向。 使用效果完全一样，有和区别呢 自定义实现你学会了吗"}, {"id": "6972856323314548743", "title": "JS学习笔记之Symbol类型", "desc": "ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法，新方法的名字就有可能与现有方法产生冲突。"}, {"id": "6844904063457312781", "title": "从0到1开发一个开源项目(TS + ESlint + Jest + TravisCI)", "desc": "最近想尝试一下如何开源一个项目，正好手边做异常监控的时候遇到一个功能。就是解析errorstack中的源码位置。在npm中找了好久都没有合适的库。正好自己造一个轮子发布出来。也趁这个机会把开源过程整理一下。 Prettier 是格式化代码工具。用来保持团队的项目风格统一。 “E…"}, {"id": "6844903558576341000", "title": "简单聊聊H5的pushState与replaceState", "desc": "HTML5引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与window.onpopstate 配合使用。 这将使浏览器地址栏显示为 http://mozilla.org/b…"}, {"id": "6984395402082533390", "title": "前端面试题总结1（持续更新）", "desc": "对于前端面试题以及开发的时候遇到的一些技术的总结，很多可能理解的不是非常的到位，欢迎大佬进行指正，欢迎探讨"}, {"id": "6844903970800926734", "title": "【前端vue进阶实战】：从零打造一个流程图、拓扑图项目【Nuxt.js + Element + Vuex】 （三）", "desc": "接前面二，下面我们实现右键菜单、http通信、路由。 本系列教程是用Vue.js + Nuxt.js + Element + Vuex + 开源js绘图库，打造一个属于自己的在线绘图软件，最终效果：http://topology.le5le.com 。如果你觉得好，欢迎给文章和…"}, {"id": "6844903806921080845", "title": "如何开发一款 60fps 的“无缝滚动”插件", "desc": "所谓的“无缝滚动”就是多屏切换的过程是连续可循环的，而不是到最后一屏就停止播放。这种业务场景在实际开发中很常见，下面是“淘宝”和“京东” H5 版的首页截图，里面的 “banner 图”以及“头条栏”就是典型的无缝滚动的场景。但是体验一番之后，你会发现他们和原生 App 中的效…"}, {"id": "6844903776533364749", "title": "使用verdaccio搭建npm私有仓库", "desc": "需求背景：平时在项目工作中可能会用到很多通用性的代码，比如，框架类、工具类以及公用的业务逻辑代码等等，通过打包发布到npm中央仓库或者私有仓库，来进行维护和托管代码，方便公用代码的使用，如果涉及到不方便公开的代码组件可以发布到私有仓库。 私有npm组件库的优势： 私有npm包只…"}, {"id": "6959390019777724446", "title": "JS输出特殊字符串", "desc": "前言 放一篇之前的博文代码打印神兽。 正文：在浏览器控制台的Console中输入下面这串神奇代码(只有数字和[])，会输出什么? 试一下,就可以发现是个标准表白抒情话语I love you(爱老虎油)"}, {"id": "6844903502729183239", "title": "React合成事件和DOM原生事件混用须知", "desc": "如果DOM上绑定了过多的事件处理函数，整个页面响应以及内存占用可能都会受到影响。React为了避免这类DOM事件滥用，同时屏蔽底层不同浏览器之间的事件系统差异，实现了一个中间层——SyntheticEvent。 React并不是将click事件绑在该div的真实DOM上，而是在…"}, {"id": "6844904110223802376", "title": "字节跳动一面的第一道基础题", "desc": "很明显实现了效果，对于萌新来说也特别好理解，每次实例化对象的时候，把全局属性后加加，完美达到了面试官的要求，只见面试官悠悠的说，嗯可以，但能不能不用全局变量。。。"}, {"id": "6989979837691592735", "title": "函数式编程与Js异步编程、手写Promise（02）", "desc": "文章说明：本专栏内容为本人参加【拉钩大前端高新训练营】的学习笔记以及思考总结，学徒之心，仅为分享。如若有误，请在评论区支出，如果您觉得专栏内容还不错，请点赞、关注、评论。上一篇中提到了js中的部分前置知识：【高阶函数】、【闭包】，点击上方链接可查看。四、纯函数1.纯函数概念2.纯..."}, {"id": "6940176827587493925", "title": "装饰器模式在生产环境中的实践", "desc": "最近在 review 项目的代码，发现很多对表单的 submit 处理函数中，经常会对取到的表单数据做特殊处理以符合后端接口对数据格式的要求，比如把时间选择器拿到的数据转成 unix 时间戳，再或者把多选拿到的值做一次 join 操作拼接成字符串等等。如果每次有类似需求的时候，…"}, {"id": "6984908770149138446", "title": "【收藏就会】浏览器WebStorage缓存使用指南", "desc": "较为全面的WebStorage使用方法指南，封装工具类的同时也手把手带你入门本地存储技术的使用方法，同时对开发中可能碰到的问题也做了一个梳理。"}, {"id": "6934500357091360781", "title": "字节跳动最爱考的前端面试题：JavaScript 基础", "desc": "最大安全数字：Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1，转换成整数就是 16 位，所以 0.1 === 0.1，是因为通过 toPrecision(16) 去有效位之后，两者是相等的。 在两数相加时，会先转换成二进制，0.1 和…"}, {"id": "7005340749432619038", "title": "必点？JavaScript 召唤师【必点】的 4 个函数式编程【天赋】~~", "desc": "JavaScript 最大的特性就是作为动态语言的灵活，它是多范式的，你想写面向对象也行，想写函数式编程也行；但至少拥有这两种思想是必要的！"}, {"id": "6982361231071903781", "title": "webpack 最佳实践", "desc": "本文讲述的最佳实践是从日常业务中总结而出的，不一定适合所有项目。毕竟每个公司或个人的项目不同，最佳实践也会有所不同。但是可以从这篇文章借鉴吸收一点有用的东西，有问题的地方也欢迎大家积极吐槽指正。"}, {"id": "6999810846402543629", "title": "浏览器window对象，你有多少细节不知道？", "desc": "window 对象 概述 浏览器里面，window对象（注意，w为小写）指当前的浏览器窗口。它也是当前页面的顶层对象，即最高一层的对象，所有其他对象都是它的下属。一个变量如果未声明，那么默认就是顶层对"}, {"id": "6947860760840110088", "title": "17K star 仓库，解决 90% 的大厂基础面试题", "desc": "笔者开源的前端进阶之道已有三年之久，至今也有 17k star，承蒙各位读者垂爱。在当下部分内容已经略微过时，因此决定提笔翻新内容。 翻新后的内容会全部集合在「干爆前端」中，有兴趣的读者可以前往查看。 本文非百科全书，只专为面试复习准备、查漏补缺、深入某知识点的引子、了解相关面…"}, {"id": "6990582632270528525", "title": "从了解到深入虚拟DOM和实现diff算法", "desc": "虚拟DOM 和 diff 算法 ，大家有的时候就会经常听到，那么它们是什么实现的呢，这是小浪在这里就来带大家实现深入了解虚拟DOM 和 实现 diff 算法"}, {"id": "6987179395714646024", "title": "你真的了解package.json吗？来看看吧，这可能是最全的package解析", "desc": "1. 概述 从我们接触前端开始，每个项目的根目录下一般都会有一个package.json文件，这个文件定义了当前项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等）。 当运行npm i"}, {"id": "6994976281053888519", "title": "初学者也能看懂的 Vue3 源码中那些实用的基础工具函数", "desc": "1. 如何学习 JavaScript 基础知识 2. 如何学习调试 Vue 3 源码 3. 如何学习源码中优秀代码和思想，投入到自己的项目中 4. 学习 Vue 3 源码 shared 工具函数等"}, {"id": "7006973909857730568", "title": "【设计模式】装饰器模式", "desc": "目录 定义 可改进的场景代码 通过装饰器模式，不直接修改原始方法，通过外部函数，引用原始方法，添加功能 实际场景 装饰器模式 优点 参考 总结 一、定义 **定义：**装饰者模式能够在不改变对象自身的"}, {"id": "7004724017504452638", "title": "聊聊使用 composition-api plugin 遇到的坑", "desc": "本文字数约 2000 字，阅读时间约 6 分钟 看懂本文需要一些 Vue2 响应式的源码知识 背景 部门要开发一款小程序，技术栈为 Vue"}, {"id": "7005219553584087053", "title": "Leader让我在console面板画嫦娥奔月", "desc": "Leader：小周，还有十来天就中秋节了，你这几天在咱们网站的console面板中画一个嫦娥奔月，咱也来蹭一波中秋节的热度。"}, {"id": "7006982274759524360", "title": "深入理解JavaScript 的事件执行机制", "desc": "熟悉事件循环，了解浏览器运行机制将对我们理解 JavaScript 的执行过程和排查运行问题有很大帮助。以下是总结的一些浏览器事件循环的一些原理和示例..."}, {"id": "7007383872694386696", "title": "vue3 项目封装侧导航文字骨架效果组件-全局封装", "desc": "当显示页面的时候，有些数据是需要从后台加载，网络不好的时候可能需要等待，那么可以做一个骨架层闪动动画，增加用户体验"}, {"id": "6996811608756322334", "title": "从【if...else...】到【责任链】再到【composeAOP】，顺带把【传参】解决了~", "desc": "本篇是又一次强有力的函数式编程之代码优化实践好文，老掘友看了直呼：针不戳！新掘友看了，赶快按下了收藏键！还有灵魂画手配图，顶啊！"}, {"id": "6995235136547586084", "title": "前端异常监控和容灾", "desc": "对 JS 而言，异常一般只会中止当前任务，基本不会导致崩溃，可异常监控却是一个完善的前端方案必须具备的"}, {"id": "6976810016930005029", "title": "我优化了进度条，页面性能竟提高了70%", "desc": "大家总说性能优化的xxx条建议，但实际操作时又觉得很无力。本文就带你体验一次真实的性能优化案例和原理解析"}, {"id": "7005908066671525895", "title": "嫦娥飞天动画简易版", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 中秋佳节即将到来，上古神话传说-嫦娥奔月，大家都知道，那我来实现个简单版的嫦娥奔月"}, {"id": "6982215543017193502", "title": "前端工程化实战 - 企业级 CLI 开发", "desc": "前言 去年同期写过一个基于 Node 的 DevOps 系列，但是整个项目工程非常大，上手成本比较高，对于一些中小型团队或者新手参考的意义不算多，所以针对这些群体重启了一个新的工程化系列。 新的系列将"}, {"id": "7007430442358046733", "title": "WEB 剪切板操作navigator.clipboard的使用", "desc": "浏览器允许 JavaScript 脚本读写剪贴板，自动复制或粘贴内容，而这一切都是通过 navigator clipboard 的API来实现的。剪贴板可以用于存储数据并在应用程序内部或应用程序之间使"}, {"id": "6998136482611331086", "title": "排序算法之快速排序", "desc": "快速排序：核心思想： 从数组中选择中间一项作为主元。 接着，（进行划分操作）：创建两个指针，左边一个指向数组的第一项，右边一个指向数组的最后"}, {"id": "6993145860896866318", "title": "PPT 居然可以用 js 写？", "desc": "用 powerpoint 或者 keynote 写演示文稿，对于代码、数学公式等的支持一直是个痛点。而且对于前端同学来说，一身的 css 功力用不上也是个痛点。我们需要一个基于 web 技术的 ppt"}, {"id": "6996295253347024910", "title": "JS中V8底层运行机制之执行上下文及堆栈内存安排，内含大厂面试题，拿来把你~", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 特殊的节日，也要继续更文呀，祝大家七夕快乐哦作为一个成熟的程序员，分分钟new一个对象 大家好，我是圈圈，热爱前端，喜欢分享，很感谢这个活"}, {"id": "6862981984801521672", "title": "\"无 Typescript\" 编程", "desc": "一旦陷入 Typescript 就离不开它了。安全感、智能提示、代码重构.. 使用 Typescript 最终还是要转译为 JavaScript 代码，我不想整这一套构建工具，喜欢直接写完直接跑、直接调试、直接发到 npm.. ... 接着添加一个 jsconfig.json …"}, {"id": "6999098361684951048", "title": "JS作用域", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 JS作用域是一套变量查找规则，用于确定在代码执行的时候在能够被访问的范围内如何查找变量，任何语言都有作用域的概念，在JS的世界中，作用域分"}, {"id": "7001104706118352932", "title": "JS 同DOM节点同时绑定【双击】【单击】事件", "desc": "节点绑定【单击】或者【双击】事件方法很简单，可以使用 onclick 单击事件及 ondbclick 双击事件即可，但是一个节点同时绑定【双击】和【单击】事件，你知道怎么监听么?"}, {"id": "6978065034484285470", "title": "【设计模式】我这样学习设计模式-单例模式", "desc": "限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。适用于单一对象，只生成一个对象实例，避免频繁创建和销毁实例，减少内存占用。不适用动态扩展对象，或需创建多个相似对象的场景。"}, {"id": "6939688892526231582", "title": "Promise从入门到手写 | [Promise系列一]", "desc": "从零开始，带着你入门Promise并亲手实现。本文分为四大部分，包括Promise介绍，Promise特点，Promise使用，和Promise手写~"}, {"id": "6936814903021797389", "title": "深入浅出JSBridge：从原理到使用", "desc": "其中的原生、Web相互通信都离不开JSBridge，这里面小程序比较特殊，对于UI渲染和JS的执行环境做了隔离，基于前两种方式之间。 在Hybrid模式下，H5会经常需要使用Native的功能，比如打开二维码扫描、调用原生页面、获取用户信息等，同时Native也需要向Web端发…"}, {"id": "6844903815041269774", "title": "【前端词典】5 种滚动吸顶实现方式的比较[性能升级版]", "desc": "这篇文章是三天前写就的，有大佬给我提了一些修改意见，我觉得这个意见确实中肯。所以就有了这个升级的修改版本。代码同步更新到 GitHub 了。 我入职第二家公司接到的第一个需求就是修复之前外包做的滚动吸顶效果。我当时很纳闷为何一个滚动吸顶会有 bug，后来我查看代码才发现直接用的…"}, {"id": "6987186914168143902", "title": "我爱你，你爱我，commi-ui甜蜜蜜🌟｜前端 · 浪漫 · 热爱 · 组件库@CodingCommunism", "desc": "前端最浪漫的事情可能就是用自己设计的组件搭建我们自己的网站了，于是我们几个志同道合的伙伴开始了commi-ui的开发之旅，这篇文章是commi-ui启动文，希望大家关注支持我们。"}, {"id": "6990652014862532622", "title": "【重磅升级！】写给前端非科班的「计算机组成原理」！！！", "desc": "之前写过一篇类似的文章（ 非科班前端注意了！ 计算机组成原理知识已送到你嘴边! )，但是已经是1年前的事了，今年我觉得自己又成长了很多，再次总结一次，其内容丰富程度远超上篇文章！废话不多说！上车吧！ "}, {"id": "6995896750116438023", "title": "JavaScript期约Promise", "desc": "理解期约 Promise 是一个对象，它代表了一个异步操作的最终完成或者失败。简单来说我们可以用它来处理异步操作。 期约有三种状态，待定，拒绝。"}, {"id": "6892315162657685518", "title": "如何突破自己的技术瓶颈期", "desc": "很久没有分享学习方法类的文章了，也少有思维层级学习方法的涉足。从这一期开始，将开创一个全新的板块，目的在于分享学习方法和心得，感兴趣的小伙伴记得常来看看。今天要聊的主题是：如何突破自己的技术瓶颈期。 从事前端3年左右的时候，大多会遇到职业的第一个瓶颈，这个时候，什么都会一点，又…"}, {"id": "6935973925004247077", "title": "【面试说】Javascript 中的 CJS, AMD, UMD 和 ESM是什么？", "desc": "最初，Javascript 没有导入/导出模块的方法， 这是让人头疼的问题。 想象一下，只用一个文件编写应用程序——这简直是噩梦！ 然后，很多比我聪明得多的人试图给 Javascript 添加模块化。其中就有 CJS、AMD、UMD 和 ESM。你可能听说过其中的一些方法(还有…"}, {"id": "7002484014414037000", "title": "for...in和for...of的区别", "desc": "前言 在JavaScript中遍历数组通常是使用for...i循环，在ES5具有遍历数组功能的还有forEach、map、filter、some、every、reduce、reduceRight等。 "}, {"id": "6924669859859005447", "title": "基于原生js构建超级玛丽游戏", "desc": "本文将会手把手带着大家完成一款别样的超级玛丽游戏。线上地址, 该游戏一共有5关, 欢迎在评论区说出你们完成前两关的总耗时吧哈哈 ~ 黑色的小方块代表的是玩家, 他的任务时收集关卡内所有的金币同时需要避开岩浆。当最后一个金币被收集到了之后, 这一关就通过了。 玩家通过键盘上下左右…"}, {"id": "6844903953671389191", "title": "《javascript高级程序设计》核心知识总结", "desc": "此文是对js高级程序设计一书难点的总结，也是笔者在看了3遍之后的一些梳理和感想，希望能借此巩固js的基础和对一些核心概念有更深入的了解。 一. Number类型关键点讲解 浮点数值的最高精度是17位小数，但在进行算术计算时精度远远不如整数。例如 ECMAScript能够表示的最…"}, {"id": "6993298095408676872", "title": "TS系列篇｜TypeScript的诞生", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 Hejlsberg 决定建立一个“可擦除类型系统”，这个组件使 TypeScript 成为 JavaScript 的超集。"}, {"id": "6975858843729264653", "title": "一篇彻底理解Proxy | 建议收藏", "desc": "代理模式是常见的编程模式之一。今天来重新理解Proxy，从而对代理以及代理模式有进一步的认知~~~~"}, {"id": "6925666432563085326", "title": "Canvas在超级玛丽游戏中的应用", "desc": "在上一篇文章中, 我们基于DOM体系构建了超级玛丽, 那么在本篇文章中我们使用canvas对整个架构进行升级, 从而提升游戏的视觉体验。 有需要的同学可以查看源码学习. canvas标签可以让我们能够使用JavaScript在网页上绘制各种样式的图形。要访问实际的绘图接口, 首…"}, {"id": "6844903603484753927", "title": "微信小程序“反编译”实战（一）：解包", "desc": "我们知道，在微信开发者工具中开发完小程序后，我们点击“上传”按钮，微信开发者工具会进行“编译”，对 JS 代码进行压缩混淆以及对 wxml、wxss 和资源文件等进行整合打包成一个 .wxapkg 文件上传给微信服务器。 所以要“反编译”小程序，首先我们要获取到小程序对应的 .…"}, {"id": "6972363698144804894", "title": "ES的语法糖-babel的可选链和双问号语法", "desc": "ES全称为ECMAScript，是JavasSript的一种语言标准。ECMAScript发布新语法规范需向TC39委员会提案，任何人都可以向其会提"}, {"id": "6996268080028450847", "title": "JavaScript继承的实现方式：原型语言对象继承对象原理剖析", "desc": "在经典的面向对象语言中，可能倾向于定义类，继承类。原型语言 只有对象,没有类；对象继承对象,而不是类继承类。继承的对象函数并不是通过复制而来，而是通过原型链继承。JavaScript里面没有类这个概念"}, {"id": "6844903872842956814", "title": "我如何实现Promise", "desc": "最大的难点在于链式调用的实现，具体来说就是then方法的实现。 现在手写一个简陋但是功能较为完备的Promise就大功告成了。"}, {"id": "7003341595751743524", "title": "JavaScript隐式转换", "desc": "JavaScript中有两类数据类型:原始类型、对象类型： 原始类型(基础类型)： Undefined、Null、String、Number、Boolean、Symbol（es6新推出的，暂不考虑） "}, {"id": "6997412666360725534", "title": "javascript二叉树（二叉搜索树）", "desc": "若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉搜索树。"}, {"id": "6844903906607136775", "title": "方老湿写不来的系列二：黑魔法播放器", "desc": "0. 背景 HTML5中一个十分重要的提升就是对音视频的无插件支持，不论是各个端浏览器对各种视频容器格式越来越丰富的支持，还是Media Source Extension（MSE）对Video扩展性的提升，我们现在能对浏览器上的音视频做越来越多的新奇尝试。但也因为Web技术的开…"}, {"id": "6992834810720813064", "title": "Iterator迭代器你了解吗？", "desc": "Iterator迭代器 想必大家使用过for循环、while循环等，遍历Array获取其中的值，那其他数据结构如何通过遍历获取呢？或者这样"}, {"id": "6971675118854471711", "title": "隐式类型转换", "desc": "本文会通过对 ECMAScript 官方文档和各大网站高赞文章进行系统性的总结，务必帮助大家在读完后彻底掌握此知识点。"}, {"id": "6994012537230458894", "title": "【经典面试题】用原型链的方式实现一个 JS 继承", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 这是一道非常经典的面试题。最近面试的时候被问到了，因为很久没复习，而且在工作中也很少会实现这种东西，结果支支吾吾了半天没有回答出来，心情非常"}, {"id": "6975709535105368077", "title": "前端防抖与节流", "desc": "这是我参与更文挑战的第16天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 前端工作中免不了会用到防抖和节流，但是之前"}, {"id": "6983668837799428132", "title": "Web 开发必须掌握的三个技术：Token、Session、Cookie", "desc": "在Web应用中，HTTP请求是无状态的。即用户第一次发起请求，与服务器建立连接并登录成功后，状态是不会被记录的。为了避免每次打开一个页面都需要登录一下，就出现了cookie，Session。"}, {"id": "6903852199311310862", "title": "12 个拷贝数组的 JS 技巧", "desc": "数组拷贝经常被误解，但这并不是因为拷贝过程本身，而是因为缺乏对 JS 如何处理数组及其元素的理解。JS 中的数组是可变的，这说明在创建数组之后还可以修改数组的内容。这意味着要拷贝一个数组，咱们不能简单地将旧数组分配给一个新变量，它也是一个数组。如果这样做，它们将共享相同的引用，…"}, {"id": "6935627673989283848", "title": "前端玩转GIF图片压缩", "desc": "GIF图片的极致压缩方案，让你全方位了解GIF压缩的原理，，简单的API，让你拿来即用。让你的压缩更加轻松，让你的项目更加出众。"}, {"id": "7001878237068394527", "title": "JavaScript之操作BOM、DOM对象", "desc": "这是我参与 8 月更文挑战的第 27 天，活动详情查看： 8月更文挑战 1. 操作BOM对象 BOM：浏览器对象模型 (1) navigatoe对象，封装了浏览器的信息。 (2) location对象"}, {"id": "6994042970831847437", "title": "完成LeetCode【螺旋矩阵Ⅱ】这道题之后，我尝试用HTML+CSS+JS动画来还原算法过程。", "desc": "完成LeetCode【螺旋矩阵Ⅱ】这道题之后，我尝试使用HTML+CSS+JS动画将算法过程可视化。"}, {"id": "6997982013424664613", "title": "JavaScript语言基础（七）函数", "desc": "函数实际上是对象，每个函数都是Function的实例，而Function也有属性和方法，和其他引用类型一样。函数定义方式：函数声明、函数表达式、使用Function构造函数和箭头函数。"}, {"id": "6994986407626276901", "title": "前端刷题路-Day77：不同的二叉搜索树（题号96）", "desc": "给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数..."}, {"id": "6844903505296097288", "title": "babel到底该如何配置？", "desc": "说起ES6，webpack，打包，模块化总是离不开babel，babel作为一个js的编译器已经被广泛使用。在babel的官网是这样介绍它的： 大家都知道js作为宿主语言，很依赖执行的环境（浏览器、node等），不同环境对js语法的支持不尽相同，特别是ES6之后，ECMAScr…"}, {"id": "6991385573944459301", "title": "js基础之事件模型：事件冒泡事件捕获", "desc": "概要：本文主要记录js事件模型相关的知识，主要讲解事件冒泡事件捕获，以及阻止冒泡，事件相关的方法。还有因为事件冒泡引发的鼠标事件之间的区别 js事件模型发展历史 原始事件模型（DOM0级的事件模型） "}, {"id": "6844903686804602894", "title": "TradingView + WebSocket 实时推送 K 线脱坑指南", "desc": "0. 竟然被催更了 1. TradingView 是个啥 今天咱们说个比较特别的—— TradingView，这是一个专业的图表库，专门做 K 线图的，而 K 线图是股票、基金等交易所必备的一样东西。项目本身是免费的，但并不开源，官方提供了托管在 Github 上的私有库，开发…"}, {"id": "6991278420734771231", "title": "手写深浅拷贝|八月更文挑战", "desc": "实现浅拷贝 首先浅拷贝是指，一个新的对象对原始对象的属性值进行精确的拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数值类型的值，如果是引用数据类型，拷贝的就是地址指针。如果其中一个对象的引用内存地址发"}, {"id": "6844904145946673166", "title": "[译]编写更快、更好的JavaScript的13个技巧", "desc": "10年前，亚马逊分享一个例子，每100毫秒的延迟都会是他们损失1%的销售收入，即在全年中，每增加1秒钟的加载时间将使该公司损失约16亿美元。同样，谷歌发现搜索页面的生成时间增加500毫秒，访问量将减少20%，潜在的广告收入也将减少五分之一。 我们中很少人可以像谷歌和亚马逊一样去…"}, {"id": "6844903636108066830", "title": "这一次，我要弄懂javascript的模块化", "desc": "1. 无模块化 script标签引入js文件，相互罗列，但是被依赖的放在前面，否则使用就会报错。如下： 即简单的将所有的js文件统统放在一起。但是这些文件的顺序还不能出错，比如jquery需要先引入，才能引入jquery插件，才能在其他的文件中使用jquery。缺点很明显： 2…"}, {"id": "6844903505866522638", "title": "5分钟前端国际化", "desc": "需要国际化的react项目已经迭代了1年多，文件众多，包含了jsx和普通的js对象文件。粗略估计有几千个中文词条。本文先介绍了采用的国际化方案，然后给出了国际化的过程和一个自己开发的脚本i18n-pick，按照教程，可以帮助前端jsx项目5分钟快速国际化。 先大体上介绍下我选择…"}, {"id": "6974322300170534943", "title": "原来JavaScript是这样实现模块区分的！", "desc": "我们都知道代码模块化带来的好处有很多很多，但是在ES6以前的JavaScript中时没有代码import的概念的，那么他们又是怎么组合起来的呢？"}, {"id": "6986555726457995272", "title": "JavaScript 模块化", "desc": "ES6 规范 单个导出 批量导出 取别名 默认导出，一个模块只能有一个默认导出，对于默认导出，导入的名称可以和导出的名称不一致 CommonJS 规范"}, {"id": "6914201197620494350", "title": "为什么要用 setTimeout 模拟 setInterval ？", "desc": "在JS 事件循环之宏任务和微任务中讲到过，setInterval 是一个宏任务。 用多了你就会发现它并不是准确无误，极端情况下还会出现一些令人费解的问题。 下面我们一一罗列.. 上面这句代码的意思其实是fn()将会在 N 秒之后被推入任务队列。 所以，在 setInterval…"}, {"id": "6987574831357100063", "title": "electron 调用 dll 文件方法，和常见问题解决", "desc": "我这里用的 window 7 系统的 其他版本的系统应也是差不多的 问题解决 Q： A： Q: A： Q: A： Q: A： Q: A:"}, {"id": "6995569582484242469", "title": "边学边译JS工作机制---30. MVC以及基于MVC的JS框架", "desc": "编程中，我们需要从用户接口层去拆分应用逻辑。这种拆分能让我们的前端和后端工程师同时在一个工程上工作而互不影响。同时也让我们的代码干净,可复用。 MV架构的目标，就是允许开发者去写模块化和可复用的代码。"}, {"id": "6959537632376274974", "title": "JavaScript 系列一：语言基础", "desc": "前言 在开始学习之前，我们想要告诉您的是，本文章是对JavaScript语言知识中 \"语言基础-语法和变量\" 部分的总结，如果您已掌握下面知识事项，则可跳过此环节。"}, {"id": "6844904141995638791", "title": "精读《React 性能调试》", "desc": "在数据中台做 BI 工具经常面对海量数据的渲染处理，除了组件本身性能优化之外，经常要排查整体页面性能瓶颈点，尤其是维护一些性能做得并不好的旧代码时。 React 性能调试是面对这种问题的必修课，借助 Profiling React.js Performance 这篇文章一起学习…"}, {"id": "6844903679401656333", "title": "【译】Google - 使用 webpack 进行 web 性能优化（二）：利用好持久化缓存", "desc": "在优化应用体积之后，下一个提升应用加载时间的策略就是缓存。将资源缓存在客户端中，可以避免之后每次都重新下载。 这个方法可以告诉浏览器去下载 JS 文件，并将它缓存，之后使用的都是它的缓存副本。浏览器只会在文件名发生改变（或者一年之后缓存失效）时才会请求网络。 使用 webpac…"}, {"id": "6896397110078504973", "title": "聊聊CommonJS与ES6 Module的使用与区别", "desc": "1. CommonJS 我们可以把一个文件看成一个模块，每个模块之间是互相独立的，即不会互相影响。当需要使用到某个模块时，只需在文件中将目标模块导入即可 上述代码中，两种导出方式是等价的。 2. ES6 Module 3. CommonJS 与 ES6 Module 的区别 因…"}, {"id": "6992859625540288526", "title": "JavaScript 奇怪的操作符（一）——感叹号、问号、逻辑运算符、置位运算符", "desc": "最近在看公司大佬代码的过程中发现了挺多有趣的操作符，有些是以前见过也用过的，但是也有很多没见过的，而且熟练使用一些操作符能够加快开发速度并且使代码更加优雅。"}, {"id": "6844903604126482440", "title": "如何让webpack打包的速度提升50%？", "desc": "随着前端应用包含的模块数量日益增长，代码打包的耗时也越来越长。公司很多项目打包耗时超过了10秒，对于一般人来说超过10秒的等待是比较难受的，虽然后续增量编辑的速度很快。于是我想结合实际开发环境提升一下首次打包的速度。 1. 实际开发环境 许多需求只涉及到js模块的修改，并不涉及…"}, {"id": "6932663004416868365", "title": "JS实现多行文本的展开/收起", "desc": "点击 展开 显示所有文本内容，内容的尾部会有一个 收起。如此可反复操作。 换行添加\"展开\"按钮即可。可是呢，这个玩意好用是好用，看到-webkit-的前缀，我们就能敏感的知道存在浏览器兼容性问题。严格说来，这种换行显示 “展开”按钮的形式与我们想要的还是有点区别。 如何达成我们…"}, {"id": "6989783496558379044", "title": "VUE3（二十八）页面加载完成后，使用onclick为动态添加的dom元素绑定点击事件", "desc": "博客做的比较早，那个时候还不知道有markdown编辑器这个玩意。 所以我的文章都是用ueditor编辑的。 我这里大概想做一个大图的自定义组件：需求是，点击文章中的图片，显示大图。 那么这里就有一个"}, {"id": "6844903902077272071", "title": "学习 jQuery 源码整体架构，打造属于自己的 js 类库", "desc": "感兴趣的读者可以点击阅读。 虽然现在基本不怎么使用jQuery了，但jQuery流行10多年的JS库，还是有必要学习它的源码的。也可以学着打造属于自己的js类库，求职面试时可以增色不少。 本文章学习的是v3.4.1版本。 外界访问不到里面的变量和函数，里面可以访问到外界的变量，…"}, {"id": "6844904051918766087", "title": "全网最详bpmn.js教材-properties-panel篇(下)", "desc": "bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成. 因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找…"}, {"id": "6844903606127165453", "title": "vue中使用高德地图搭建实时公交应用（地图 + 附近站点+线路详情   + 输入提示+换乘详情）", "desc": "注意不管是采用哪种方式，都要保证你想要加载地图的js文件，在引入的sdk之后。这样，在第三步的时候，才不会报错"}, {"id": "6969119561182347300", "title": "AST深入浅出一", "desc": "什么是AST(抽象语法树) AST是一种分层的程序表示，根据编程语言的语法来呈现源代码结构，每个 AST 节点对应一个源代码项。 上面说法的确很抽象，可以看下面的代码表示，可以看出来源码和下面树中的节"}, {"id": "6844903656723054599", "title": "node：爬虫爬取网页图片", "desc": "周末自己在家闲着没事，刷着微信，玩着手机，发现自己的微信头像该换了，就去网上找了一下头像，看着图片，自己就想着作为一个码农，可以把这些图片都爬取下来做成一个微信小程序，说干就干，了解一下基本都知道怎么做了，整理分享一波给大家。 安装成功后会出现你所安装的版本号。 新建一个·名为…"}, {"id": "6992929814516596773", "title": "跨域[2]--jsonp、webpack、koa2-cors解决跨域 ｜8月更文挑战", "desc": "书接上一章,上一章我们简单在本地搭建了前后端分离项目，从代码的层面的理解跨域。这一章是我们的实践篇,我们来看看jsonp等"}, {"id": "6974674412054249486", "title": "JavaScript中的this理解", "desc": "JavaScript中的this 老生常谈的话题了，今天看了一些博客，再结合自己的理解，写篇博客记录一下。"}, {"id": "6955009240587042846", "title": "详解函数中的 arguments", "desc": "arguments 是一个对应于传递给函数的参数的类数组对象, 它只定义在函数体内. 在使用的时候要注意以下几点: arguments 对象是所有 (非箭头) 函数中都可用的局部变量. 举个例子: a"}, {"id": "6955002046504239134", "title": "JavaScript学习(3) - 聊聊原型链- 2. 对象与原型", "desc": "《JavaScript高级程序设计》笔记3 - 第二部分：对象与原型。学习对象的prototype属性；实例属性；创建对象的方式：原型模式、构造函数模式、寄生模式等"}, {"id": "6972376995095117831", "title": "记一次分别使用三种事件编写首页一键定制模块的经历", "desc": "写在前面   这段时间忙着做公司的新项目(业务端 + 后台 + 工厂)，在处理业务端首页一键定制模块的过程中，遇到了一些问题。特此记录，方便日后查阅。 需求分析 & 思路重点 1.需求分析   先上效"}, {"id": "6977983566256799781", "title": "JavaScript中sort的底层实现", "desc": "本文主要介绍js中常用的几种排序算法，并结合v8中相关源码分析排序方法sort 的实现策略，祝有裨益"}, {"id": "6984396676836360223", "title": "three.js 入门第一天", "desc": "一、three.js和webGL 引用官方的说法： three.js是使用WebGL来绘制三维效果的，three.js封装了诸如场景、灯光、阴影、材质、贴图、空间运算等一系列功能，让你不必要再从底层W"}, {"id": "6981091923234668552", "title": "Javascript 的工作原理：引擎、运行时和调用堆栈概述", "desc": "随着 Javascript 越来越流行，使其应用的场景越来越多，不仅限于前端，可以是后端、混合应用程序、嵌入式设备等等，于是就有了大前端的叫法。"}, {"id": "6960839686755450894", "title": "这个\"this\"到底是什么", "desc": "前言 this 的值是由不同的执行方式决定。通过这篇文章我们依次看一下日常开发中不同情况下使用 this 之间的区别吧，已经学废的同学可以直接跳过看文章结尾总结部分。 普通函数 普通函数的使用方式分为"}, {"id": "6844903891021086734", "title": "Async/Await 如何通过同步的方式实现异步", "desc": "上面仅仅是一个 for 循环，而在实际应用中，会有大量的网络请求，它的响应时间是不确定的，这种情况下也要痴痴的等么？显然是不行的，因而 js 设计了异步，即 发起网络请求（诸如 IO 操作，定时器），由于需要等服务器响应，就先不理会，而是去做其他的事儿，等请求返回了结果的时候再…"}, {"id": "6844903624418525192", "title": "2018前端面试总结js部分【中】", "desc": "闭包让函数的变量都保存在内存中，内存消耗变大。使用不当会造成内存泄漏。 所以调用add结果都是一样的因此真正到执行代码的时候，也就是第一次调用add(),输出的当然是4,第二次执行add()同样输出4. 于是就这样一直找下去，也就是我们平时所说的原型链的概念。 引用数据类型存储…"}, {"id": "6922252880474505229", "title": "记录一个 Vue3 源码压缩错误引出的声明提升知识点", "desc": "作用域的作用在于隔断变量，给变量增加命名空间。在作用域里定义的变量，作用域外无法使用 作用域另一个作用在于避免了无用变量的定义。设想，若没有作用域，所有定义的变量都能自由访问，这会导致高额的内存占用，通过销毁作用域，可以将其内部定义的变量一并销毁，释放内存"}, {"id": "6923049481361424397", "title": "JavaScript基本包装类型", "desc": "js中为了便于基本类型操作，提供了3个特殊的引用类型：Boolean、Number、String它们具有基本类型特殊行为。 实际上，每当读取一个基本类型的时候，js内部会自动创建一个基本包装类型对象，可以让我们调用一些方法来操作。 上面example中，str是一个字符串类型，…"}, {"id": "6968704947265208327", "title": "柯里化", "desc": "一. 什么是柯里化？ 当一个函数有多个参数的时候，我们可以对函数进行改造。让其只传入一部分参数并调用它（这部分参数以后永远不变）， 然后返回一个新的函数接收剩余参数，并返回相应的结果。 柯里化最终会帮"}, {"id": "6999227087223521294", "title": "数组扁平化的实现", "desc": "数组的扁平化 1. 什么是数组扁平化 所谓数组的扁平化, 就是指将一个有着多层嵌套数组转换成一个没有嵌套的数组. 例如: 将 [1, [2, 3], [4, [5, [6]]]] 转换成为 [1, 2"}, {"id": "6844903624947023880", "title": "Vue-插件开发", "desc": "Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象: 注释：通过Vue.extend()方法创建了一个构造器NwdLoadingPlugin，其次我们再通过new NwdLoadingPlugin…"}, {"id": "6844904161868251149", "title": "回流(reflow)与重绘(repaint)，KFC与MC", "desc": "回流与重绘，会影响页面性能，每次这两个都会被同时提及，关系就好像KFC边上一定会有MC一样亲密的让人摸不到头脑。 Display:将像素发送给GPU，展示在页面上。（这一步其实还有很多内容，比如会在GPU将多个合成层合并为同一个层，并展示在页面中。而css3硬件加速的原理则是新…"}, {"id": "6844903663400402957", "title": "Android webview 与 js(Vue) 交互", "desc": "js 与原生交互分为两种情况：js 调用原生方法，原生调用 js 方法。 本文将对这两种情况分别讲解，H5 端用 vue 实现。 本文的 H5 端用Vue 实现，所以在正式开始前先把 Vue 项目环境准备好。 10.0.0.188 是我本机的 ip 地址，每个人的不一样。 在电…"}, {"id": "6980962149115887623", "title": "意想不到的的控制台输出？(预编译、隐式类型转换、强制类型转换、this指向、事件循环)", "desc": "预编译、隐式类型转换、强制类型转换、this指向、事件循环。仔细看下，内容如图，你觉得会控制台输出什么？"}, {"id": "6992558596403757064", "title": "Swiper 应用Vue遇到问题处理记录", "desc": "Swiper 应用Vue遇到问题处理记录 最近在学习vue，在开发一个需求中发现了一个问题，轮播图图片在语言切换后不更新，解决过程做个记录"}, {"id": "6995492618809376781", "title": "js中的原型和原型链", "desc": "快速搞懂js中的原型、原型链，看完这个你就会了。话不多说，上图、上代码，没搞懂的小伙伴儿快来瞄一眼~"}, {"id": "6992016321676312607", "title": "前端刷题路-Day69：跳跃游戏（题号55）｜ 8月更文挑战", "desc": "给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个下标。"}, {"id": "6992174698234658852", "title": "扎实基础篇-----你可能会忽略的关于类型的一些小细节", "desc": "前言 javaScript的类型，相信对于学前端的小伙伴们来说，应该是最熟悉的概念了吧，我们要知道js语言的每一个值都会属于其中某一种数据"}, {"id": "6891126082200993805", "title": "深入浅出node中间件原理", "desc": "中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。 在NodeJS中，中间件主要是指封装http请求细节处理的方法。我们都知道在http请求中往往会涉及很多动作, 如…"}, {"id": "6992140226760015909", "title": "Solid-js 基础教程", "desc": "Solid-js - 高性能框架，极小的打包体积，使用熟悉的 jsx，编译为直接 DOM 操作，极小运行时，极易上手"}, {"id": "6993506698887430174", "title": "JavaScript中 切割截取字符串的几种方法", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 1. slice() 2. substring() 3. substr() 4. split() 5. join() 6. charAt()"}, {"id": "6844903513181388808", "title": "解锁Charles的姿势", "desc": "Charles，作为mac开发的好基友，不知道大家是否对它的使用姿势了如指掌。相信很多童鞋只是熟悉几种简单的功能，今天为大家解锁几种高级姿势......希望能够帮到大家。 Charles是个啥，相信大家都会知道，如果真有不知道的，请百度之... ... 还有很多场景就不一一介绍…"}, {"id": "6974334662663471140", "title": "JS中if/else的优化", "desc": "前言 在你的实际开发中有没有写过或者见过下面的代码呢 是不是瞬间感觉头大，一天的好心情也烟消云散 接下来笔者将提供几个优化方案，希望能帮助到您。 单个if语句优化 if/else语句优化 单个if多条"}, {"id": "6954387292010053639", "title": "先有鸡还是先有蛋——浅析javascript中代码的编译", "desc": "先有鸡还是先有蛋？ 我们直觉上一般认为JavaScript代码在执行时是由上到下一行一行执行的，但是实际上这并不完全正确，考虑以下代码： 初学者可能会认为输出undefined，因为var a 声明在"}, {"id": "6844903498362912775", "title": "JS中的算法与数据结构——链表(Linked-list)", "desc": "主要是针对前端同学，将一些常见的算法和数据结构用 JavaScript 去实现，起到一个抛砖引玉的作用"}, {"id": "6959025873433559070", "title": "URL Scroll-To-Text Fragment", "desc": "近期Chrome更新带来很多新东西，比如标签移动，新建组，阅读清单，标签页搜索功能，以及在Chrome90版本转正的功能【分享特定的文本内容】，超级惊艳的效果，为我们带来更佳友好的使用体验。"}, {"id": "6983547755436212232", "title": "超实用的js处理方法", "desc": "盘点前端最常用的js处理方法，让你的代码瞬间高大上。本文适用于js方法不熟悉的前端童鞋查漏补缺，方法很多，这里只提供最简洁有效的一种"}, {"id": "6844903582651645965", "title": "webpack4之高级篇", "desc": "HappyPack就能让Webpack把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。 happypack"}, {"id": "6986161397365211167", "title": "详细解析 JavaScript 闭包", "desc": "最近给博客搞了背景音乐，想找个方便的方法生成音乐外链。发现可以用OneDrive来弄。 主要是生成音乐外链，至于图片外链，现在有许多图床可以使用，文章末尾会给出免费图床的推荐。 生成外链 先想办法把你"}, {"id": "6983198541992689701", "title": "Cypress 自定配置文件与环境变量定于与访问", "desc": "指定启动命名 open 默认的 cypress 的配置文件是项目根目录下： 自定义 Cypress 的环境配置文件： package.json 脚本启动 在 cypress.dev.json 中配置开"}, {"id": "6950975844361699342", "title": "手把手教你玩转render函数「组件封装-dynamic-select」(下)", "desc": "接上篇文章👉手把手教你玩转render函数「组件封装-dynamic-select」 Select Slots提供了`prefix/empty`这两个内置插槽，所以我们基于`el-select`"}, {"id": "6844903942464208909", "title": "手写算法并记住它：计数排序", "desc": "本系列文章就尝试解决这个问题。 研读那些排序算法，细品它们的名字，其实都很贴切。 比如计数排序，所谓“计数”，就是数一数，统计每个元素重复出现的次数。 上图演示了该算法的总体流程。分为两步：查和排。 首先查一查每个元素都出现了多少次，比如元素0出现了1一次，元素1出现了一次，元…"}, {"id": "6844903673517211655", "title": "[译] Vue: scoped 样式与 CSS Module 对比", "desc": "It should not come as a surprise that CSS in modern web development is far from perfect. Nowadays, projects are usually quite complex and, …"}, {"id": "6844903577505251335", "title": "小程序scroll-view自身下拉刷新的实现分享", "desc": "本来就是想给自己发布的第一个开源代码骗骗star，结果有不少善良的朋友给文章点赞了，搞得我有点不好意思，所以决定写点干货讲讲具体是怎么实现的。 完成刷新后，再将 scroll-view 的y轴偏移通过css动画再变回 -40px（用 translate 而不用 margin 就…"}, {"id": "6992380833172553759", "title": "JavaScript学习（十） —— OOP之对象", "desc": "一、对象的定义： 无序属性的集合，其属性可以包含基本值，对象或者函数。这是ECMAScript-262 给出的定义。 对象是由无数个无序的键值对（key-value）组成的集合，它的值（value）可"}, {"id": "6992379731911901221", "title": "JavaScript学习（八） —— 函数", "desc": "关于函数： 在介绍函数式编程、面向对象等内容之前需要先了解一些JS中函数某些特性。函数的声明方式、表现形式、参数的特性、封装等内容。"}, {"id": "6992566501983125511", "title": "JS 的基本语法", "desc": "1. 什么是表达式和语句 表达式 1+3 称为表达式，指一个为了得到返回值的计算式。 语句 这是一个语句，语句是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。 var a = 1 2. 标识"}, {"id": "6971754718775214093", "title": "源码系列—is-generator-function", "desc": "is-generator-function 是 Koa 的一个依赖包，用于判断是否是一个 Generator 函数，源码总共 38 行，逻辑并不复杂。"}, {"id": "6900137788960669709", "title": "从Promise链理解Event-Loop", "desc": "如果你没有得出正确的结果,有必要继续往下看. 为了能正确解答上题,需要对宏任务、微任务以及Event-Loop深入理解. 浏览器执行代码的过程中,JS引擎会将大部分代码进行分类,分别分到这两个队列中--宏任务(macrotask ) 和 微任务(microtask ) . 常见…"}, {"id": "6844903621339906055", "title": "H5页面滚动阻尼效果实现", "desc": "好吧，生涩难懂，没能理解。不过网上有说此效果在iPhone上比较常见，直接上图比较容易理解： 简单来说，就是界面滑动到了最底部或最顶部仍可以比实际的内容多滑动一段距离然后回弹的弹性效果。 滑动到最顶部或最底部才出现。 表现出比实际的内容多滑动一段距离，实际操作知道，多滑动的距离…"}, {"id": "6993899025430741000", "title": "javascript设计模式", "desc": "单例模式 惰性单例模式封装 策略模式 除了算法外，策略模式还可以用来封装一系列的业务规则，例如：表单校验，业务规则可以对应表单校验的规则和错误的提示语。定义好规则策略后，需要校验的地方传入规则名和错误"}, {"id": "6844903583637307400", "title": "JS灵巧判断7种类型的方式", "desc": "当然 Object.prototype.toString.call 也可以换成 Object.prototype.toString.apply 。 注1：这种方式存在兼容性问题，具体兼容性问题点击 这里 ，JavaScript 1.8.5，无法完全检测上述情况。 法1：直接用严…"}, {"id": "7000774376698150943", "title": "JavaScript 的核心特性", "desc": "JavaScript的历史版本 尽管 ECMAScript 是一个重要的标准，但它并不是 JavaScript 唯一的部分，实际上，一个完整的 JavaScript 实现是由以下 3 个不同部分组成的"}, {"id": "6993891136389513247", "title": "那些你应该掌握的HTML DOM APIs", "desc": "Web 前端在过去几年发展迅速，从最早的 jQuery 到 Angular、React、Vue 框架，我们对 DOM 的操作方式的也在变化。 jQuery 提供了一系列快速操作 DOM 的方式，"}, {"id": "6985456957499031588", "title": "axios取消请求原理", "desc": "axios取消请求 const CancelToken = axios.CancelToken; config.cancelToken.promise"}, {"id": "7000753415361921037", "title": "JavaScript设计模式｜8月更文挑战", "desc": "为了方便回忆快速使用设计模式 设计模式介绍 设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的"}, {"id": "7000735634696437790", "title": "分享用css+jss做的时钟", "desc": "首先先用CSS画一个时钟，包括时针，分针，秒针。 css样式 接下来用js动态获取当前电脑的本地时间"}, {"id": "6844904117614166023", "title": "请你完成一个 async await 的在较低版本里的实现", "desc": "1. 回调函数 2. Promise 这样链式调用看上去我们的代码就像串联一样，不再是多个回调函数嵌套时，Promise虽然跳出了异步嵌套的怪圈，用链式表达更加清晰，但是我们也发现如果有大量的异步请求的时候，流程复杂的情况下，会发现充满了屏幕的then，看起来非常吃力，而ES7…"}, {"id": "6844904180511932430", "title": "javascript 阻塞程序运行", "desc": "JavaScript 是单线程的，一段 Js 程序的运行会占满整个程序进程，我们通常会想方设法的通过异步编程来减少程序的阻塞，但在某些特殊的场景下我们需要阻塞程序的运行，那么今天就反其道而行之，看看通过怎么样正常的方式来阻塞 Js 运行。 但是这种方式其实是通过无限占用计算机的…"}, {"id": "6844903687748321294", "title": "处理 JavaScript 复杂对象：深拷贝、Immutable & Immer", "desc": "我们知道 js 对象是按共享传递（call by sharing）的，因此在处理复杂 js 对象的时候，往往会因为修改了对象而产生副作用———因为不知道谁还引用着这份数据，不知道这些修改会影响到谁。因此我们经常会把对象做一次拷贝再放到处理函数中。最常见的拷贝是利用 Object…"}, {"id": "6970924747144036359", "title": "【译】JavaScript 代码整洁之道 - 重构篇", "desc": "在本系列文章中，我们介绍了一些编写高可维护性代码的技巧。在本文中，将以凯撒密码为例来介绍如何对代码一步一步地实现重构。"}, {"id": "6844903713140637709", "title": "你不知道的 eval", "desc": "eval() 是 JavaScript 中一个非常有用的函数，它可以一段代码字符串动态执行。然而各种编码规范和最佳实践都强烈抵制 eval，几乎将 eval 打入了死牢，大牛 Douglas Crockford 也在《JavaScript 语言精粹》一书中将 eval 视为 J…"}, {"id": "6919004138785210381", "title": "JavaScript语言精粹", "desc": "1） 你没得选择。web已经变成了重要的开发平台，JavaScript是唯一一门所有浏览器都可以识别的语言。 2） 他尽管有缺陷，但是真的很优秀。具有极强的表现力的轻量级语言，掌握以后，会爱上函数式编程。 空白表现为被格式化的字符或者注释。 1、空白通常是没有意义的，但有时候必…"}, {"id": "6975355881554870285", "title": "从零开始 - 50行代码实现一个Vuex状态管理器", "desc": "回顾下Vuex 先vue-cli工具直接创建一个项目，勾选Vuex，其他随意： 创建完毕自动安装依赖，之后启动项目，熟悉的helloworld ~"}, {"id": "6959795169482768398", "title": "JavaScript数据深浅拷贝的深度解析(一文明白!)", "desc": "深浅拷贝是JavaScript对数据的操作,但是深浅拷贝是相对于JavaScript的数据类型来说的,在JavaScript中基本数据类型是没有深浅拷贝之分的,深浅拷贝只是说对于JavaScript的"}, {"id": "6844903807055298573", "title": "如何编写高质量的函数 -- 打通任督二脉篇[实战卷]", "desc": "我会从如何用 `FP` 编写高质量的函数、分析源码里面的技巧，以及实际工作中如何编写，来展示如何打通你的任督二脉。"}, {"id": "6844903669897363469", "title": "记录一次vue2.0（history模式）下微信自定义分享的坑", "desc": "吐槽：关于微信自定义分享前前后后翻了文档两三遍，感觉大佬们写文档都是这么潇洒么？躲在角落里的我瑟瑟发抖了两天..... 1. 根据文档来配置（公众号安全域名，引入官方微信js） 2. 配置权限，根据微信文档描述：所有需要使用JS-SDK的页面必须先注入配置信息 3. 通过rea…"}, {"id": "6996841448754642957", "title": "详细讲解跨域问题相关概念及常见的CORS和JSONP解决方案代码", "desc": "什么是跨域问题 浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域 跨域跨域，见名知意，跨出领域的意思。那什么是领域呢？ 我们知道，无论是前端还是后端代码想要运行，需要"}, {"id": "6844904100123901959", "title": "🔥17行代码, 学会UI组件库都在用的\"el.contains(node)\"", "desc": "el.contains(node)用来判断一个元素是否在另一个元素内. 一般组价库中的\"下拉\"和\"气泡对话框\"用这个特性来实现\"点击组件外部关闭组件\"功能. 本文并不是要讲如何实现一个\"气泡\"组件, 而是实现一个组件中的通用功能:点击元素外部触发, 希望帮助大家能举一反三. 监…"}, {"id": "6996838793173008397", "title": "不要再说你不懂原型链了---从原型、构造函数、实例开始理解原型链", "desc": "这几天，又重新梳理了原型链的相关知识，原型链是个怪圈，每次看都会又有一些新的体会，所以趁着记忆还是深刻的时候整理出文章，希望能帮助社区的同学对原型链有不一样的理解。"}, {"id": "6844903602109022216", "title": "如何为团队潜规则明码标价", "desc": "靠谱的前端团队一般都会引入自己的代码风格规范，但真实项目中的问题常常不是统一了空格数量和是否加分号就能解决的，而是有很多看不见的暗坑。我们是否有代码风格之上，对代码质量的更高级把控呢？ESLint 插件或许能够为你打开新世界的大门。 在前端发展日新月异的这个时代，我们实际上正在…"}, {"id": "6975367924202602527", "title": "一文搞定JavaScript的防抖与节流的理解与封装", "desc": "防抖与节流 这是我参与更文挑战的第5天，活动详情查看更文挑战 为什么使用防抖节流? 在前端开发中有一部分的用户行为会频繁的触发事件执行，而对于DOM操作、资源加载等耗费性能的处理，很可能导致界面卡顿，"}, {"id": "6983856814186037284", "title": "走进chrome内心，了解V8引擎是如何工作的", "desc": "作为一个前端程序员，每天上班的第一件事就是打开电脑，不由自主的点开chrome浏览器，或是摸会儿鱼或是立马进入工作状态。接下来浏览器窗口就会陪伴着你度过一天的时光，正常到七八点钟，晚点就九十点钟"}, {"id": "6929364242101452808", "title": "异步编程", "desc": "单线程的特点是同一个时刻只能执行一个任务。因为一些和用户的互动和操作DOM等相关操作决定了js要使用单线程，否则多线程会带来同步问题。如果一个线程在修改DOM，另一个线程要删除DOM，就需要对这个共享资源进行加锁，使执行任务非常繁琐。 单线程会带来阻塞问题，只有前一个任务执行完…"}, {"id": "6887065420994609160", "title": "从Babel编译结果看ES6的Class实质", "desc": "这是一段简单的代码, 它构造了一个Parent类, 我们使用Babel 官网的编译器, 设定编译目标为 es2015-strict. 首先会发现的是, Parent类实际上还是一个函数(IIFE 内部返回的那个Parent函数), 我们在_createClass中对它进行了一些…"}, {"id": "6996683476028096520", "title": "浅谈DOM事件委托", "desc": "本文你带你了解什么是事件委托，事件委托的使用场景和绝招，事件委托的优点。需要你提前了解一些DOM事件模型的知识，如捕获和冒泡"}, {"id": "6996675932710764558", "title": "讲讲ES6的模块与CommonJS的模块的异同", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 前言 之前2篇文章讲了exports与module.exports的异同和es6的export和export default指令，今天来讲"}, {"id": "6844903809211170830", "title": "每日 30 秒 ⏱ URL 大爆炸", "desc": "小四分别测试后便把问题解决了，这也让小二想起 小熊猫哥哥 在开发的时候，也遇到过这个问题网上一搜发现别人用 qs 库中的 stringify 直接代码一试没报错能运行，不管它的原理是什么，现在想想挺可怕的。 没想到吧 小小的一段 url地址 里面居然有这么多属性，在这里主要会讲…"}, {"id": "6966633334474702879", "title": "js中的常见的循环迭代：for loop, forEach, for...in...  for...of...  ", "desc": "引言 平时工作中循环的使用场景可以说是非常之多了，昨天改别人代码时候有位同事非常喜欢用ES6等新特性，一个数组的遍历全部都是用for...of...，然后业务需求要用到数组中的序号index值，就很尴"}, {"id": "6933920639354929165", "title": "塑造高质量代码", "desc": "首先我们认识一下，整洁的代码 和 高质量代码 是有着密切的关系，也可以说是，想写出高质量代码，代码就需要整洁性，可读性。下面给大家介绍一些编写代码的基本原则和规范。 变量名，常量名——名词或名词短语，比如 变量名 d 就没有 remainingTimeInDay 命名具体，更有…"}, {"id": "6998127819578408968", "title": "JavaScript(6) | 运算和运算符", "desc": "算数运算 1. 加法 + 一、拼串 概念: 不同类型数据和字符串进行 操作会拼接字符串。 1、如果是字符进行加法，会 \"拼串\" 2、任何类型和字符做加法运算会转化为字符串 然后再拼串 ⚠️ 注: 拼串"}, {"id": "6854573210794082318", "title": "JavaScript中的Map、WeakMap、Set和WeakSet介绍", "desc": "我猜想，超过70％的JavaScript开发人员仅使用对象来收集和维护其项目中的数据。好吧，确实如此，新的集合对象（例如Map和Set）即使在2015年问世也没有得到充分利用。 因此，今天，我将讨论2015年以来的神奇新功能——Map，Set，WeakMap和WeakSet。 …"}, {"id": "6844903608379523085", "title": "大前端性能总结", "desc": "使用defer延迟脚本执行：使用defer，该脚本会被推迟到整个HTML文档解析完后，再开始执行。被defer的脚本，在执行时会严格按照在HTML文档中出现的顺序执行。使用defer方法，可以提早脚本资源加载 使用async异步加载脚本：该脚本不会阻塞HTML parser，也…"}, {"id": "6844903782145327118", "title": "Immer 全解析", "desc": "第一次听说 Immer 差不多在几个月前吧，那会儿写了个状态管理库想在公司推广，组内同学发了 Immer 的 GitHub 地址给我，说是有个基于 Proxy 的状态管理库，自称性能很好，我们能用上么？我就去瞄了几眼，回复说这称不上状态管理库吧，概念上更贴近 Immutable…"}, {"id": "6971687263562383368", "title": "js生成各种随机数", "desc": "1.生成[0,1)范围内的随机数 使用random()方法可以返回一个介于0～1之间的伪随机数(包括0，不包括1) 2.生成[n,m)范围内的随机数（大于等于n，小于m） 使用random公式 3.生"}, {"id": "6844903824696541192", "title": "人生不过一场绚烂循环", "desc": "额，不好意思，走错片场了，今日不谈李易安，且论循环。 本文讲的是js的循环遍历并非事件循环机制，立意不深，大神走马观花，众生可抢沙发。 while语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。先判断后执行。 do...while循环与while循环类似，…"}, {"id": "6923112227012608014", "title": "JavaScript高程笔记 —— BOM", "desc": "1. BOM 浏览器对象模型（BOM，Browser Object Model），是使用 JavaScript 开发 Web 应用程序的核心。 是实现 Web 开发与浏览器之间互相操作的基础。 BOM 的核心对象，有两个身份：ES中的全局作用域和浏览器窗口的JavaScript…"}, {"id": "6995018623920111647", "title": "什么是JavaScript 预解析", "desc": "JavaScript 代码的执行是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器执行JavaScript"}, {"id": "6844903919760441352", "title": "可靠React组件设计的7个准则之终篇", "desc": "本篇文章重点阐述 可测试和富有意义。因水平有限，文中部分翻译可能不够准确，如果你有更好的想法，欢迎在评论区指出。 尽管 组合、复用 和 纯组件 三个准则在掘金平台似乎不太受欢迎，不过本着有始有终的原则，当然我个人始终还是觉得此篇文章非常优质，还是坚持翻译完了。本篇是最后 可靠R…"}, {"id": "6975413511597850655", "title": "前端JS进阶：对象属性的高级用法", "desc": "获取属性值用点’.运行效果： 属性的特性(除了属性名和属性值） 1.可写：是否可以设置该属性的值 writable:true 2.可枚举：for…in是否可以获取该属性值 enumerable:true 3.定义属性的特性： Object.defineProperty(对象，属性..."}, {"id": "6911237216387727367", "title": "elementui预览图片组件二次封装", "desc": "起因在elementui组件库中，el-image组件有个预览图片功能，比较简洁，但是和图片绑定在一起，我们只想要一个单纯的预览组件，传递一个图片，通过事件方式，显示大图分析通过查看elementui"}, {"id": "6844903639115366408", "title": "前端性能优化", "desc": "在之前的开发中，经常会接触到前端性能优化的问题，这段时间看了一系列大佬的课程与博客，下面主要对前端性能优化进行一个总结。 用户首先在浏览器中输入一个url，浏览器中的核心代码会将url进行拆分解析。浏览器会将domain发送到dns服务器，dns服务器会根据domain查询对应…"}, {"id": "6926927963636105223", "title": "你应该编译你的 JavaScript 代码吗？", "desc": "我们都会也都喜爱 JavaScript，并且我们都通过编写代码和在我们最爱的运行环境（通常是浏览器，Node.js 和 Deno）中来执行 JavaScript 代码。但你是否曾经尝试过去编译你的 JavaScript 代码呢？ 不对，等一下，我们都知道 JavaScript …"}, {"id": "6926807331602694152", "title": "理解Cookie原理并对js-cookie源码解析", "desc": "HTTP是一种无状态协议，无状态是指服务端对于客户端每次发送的请求都认为它是一个新的请求，上一次会话和下一次会话没有联系。很多场景下，我们需要知道下一次的会话和上一次的会话的关系（比如登陆之后我们需要记住登陆状态），于是就引入了Cookie技术 。 Cookie会根据从服务器端…"}, {"id": "6910581842118868999", "title": "CSS、JS对页面渲染的影响", "desc": "根据 W3C 的规范，我们平常会将 HTML、CSS、JS 进行分层书写；并且一般 CSS 在上方，HTML 随后书写，JS 在最后才会书写。相信这是读者书写前端的默认习惯了，但是你是否有想过为啥要如此进行排列呢？ CSS：CSS 不会阻止 DOM 树解析，但是会阻止 DOM …"}, {"id": "6970345845778546718", "title": "如何绘制好看的动态排序图，教你用 js包 anichart 来实现！", "desc": "1. anichart 介绍 啰嗦了这么多，正式开始本期技术案例分享，关于动态排序图制作之前分享过一篇文章，用的是 matplolib 的 animation 函数，感兴趣的可以看下 基本功能是实现了"}, {"id": "6904535599139700750", "title": "import和require的基本使用和区别", "desc": "在 ES6 中 module 成为标准，使用 import 引入模块，使用 export 语句导出接口，但是在node 环境中，每个文件就是一个模块，采用的是 CommonJS 规范，使用 require 引入模块，使用 module.exports 导出接口。import 和…"}, {"id": "6997983446953885704", "title": "【青训营】——对JavaScript原型和原型链的理解", "desc": "学习到 JavaScript 原型这个地方的时候，最开始是比较懵的状态，今天早上起来看了下红宝书中对于原型的解释，慢慢的也就有了些了解，但是解释的比较官方。接下来，我会把自己的理解分享下来，尽量用通俗"}, {"id": "6844903864576000013", "title": "使用JavaScript将Excel转换为JSON", "desc": "JSON是码农们常用的数据格式，轻且方便，而直接手敲JSON却是比较麻烦和令人心情崩溃的（因为重复的东西很多），所以很多码农可能会和我一样，选择用Excel去输入数据，然后再想办法转换成JSON格式。今天教大家使用JS 将 Excel 转为 JSON的方法。 我们可以使用<in…"}, {"id": "6844904022051127310", "title": "定时器不准时☞带你揭秘setTimeout和setInterval", "desc": "某天上班摸鱼，一个Q群里有人在发笔试题在线求助。大概瞄了一下。发现里面有道主观判断题。 可能很多人第一印象，包括我再内，都认为这道题是对的。但是其实是错的！！ 为什么呢，就是JavaScript执行机制搞得鬼，那什么是JavaScript执行机制，不懂可以点这里看一下。 set…"}, {"id": "6982589202286247949", "title": "模块化开发", "desc": "模块化开发 1.1、模块化演变过程 1.1.1、文件划分方式 1.1.2、命名空间方式 1.1.3、IIFE 1.2、模块化规范 1.2.1、CommonJs 规范 一个文件就是一个模块; 每个模块都"}, {"id": "6983917032727117831", "title": "微信小程序实现锚点定位", "desc": "在小程序开发中，我们经常会遇到滚动列表查看的需求，那么使用锚点定位来实现可以达到交互体验更加友好的效果，我们看下项目中实现的效果：                                   "}, {"id": "6891816004721049607", "title": "这个项目可以让你在几分钟快速了解某个编程语言", "desc": "作为程序员，编程语言就是我们建造程序世界的物料。学习编程第一步就是选择一门适合自己的编程语言。 但是，编程语言的种类太多了，像 Python、Java、Go、C++、JS等等都是目前比较热门的编程语言。我们的痛点是无法快速了解某个编程语言来搞清楚这个编程语言是否适合自己。 Gi…"}, {"id": "6844904065327972366", "title": "前端手写代码原理实现", "desc": "现在的前端门槛越来越高，不再是只会写写页面那么简单。模块化、自动化、跨端开发等逐渐成为要求，但是这些都需要建立在我们牢固的基础之上。不管框架和模式怎么变，把基础原理打牢才能快速适应市场的变化。下面介绍一些常用的源码实现： 一般情况，谁调用函数，函数的this就指向谁。利用这一特…"}, {"id": "7001358369369882638", "title": "少年，关于new操作符的四个特征你还记得吗？", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 其实new操作符做的事情很简单，先来看看MDN定义 官方话语，总是那么男爵😕，可以分为两部分： 创建一个用户定义的对象类型的实例； 创建一"}, {"id": "6844903795407716366", "title": "GraphQL 从入门到实践", "desc": "如果希望将 GraphQL 应用到前后端分离的生产环境，请期待后续文章。 0. 什么是 GraphQL GraphQL 是一种面向数据的 API 查询风格。 传统的 API 拿到的是前后端约定好的数据格式，GraphQL 对 API 中的数据提供了一套易于理解的完整描述，客户端…"}, {"id": "6844903655372488712", "title": "我对 React v16.4 生命周期的理解", "desc": "该方法在getSnapshotBeforeUpdate方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的"}, {"id": "7005856873429598221", "title": "JS 基础知识", "desc": "代码结构 js 将换行符理解成“隐式”的分号。这也被称为 自动分号插入 例外： 严格模式 use strict，必须在最顶部才有全局效果 控制台 需要 使用自执行函数 变量命名 变量名称必须仅包含字母"}, {"id": "6965049497403523108", "title": "如何设计开发一个 Web 插件系统", "desc": "插件，在前端系统中的使用越来越广泛。是时候好好了解下了，不仅仅是第三库和工具才会用到，在实际的业务场景中使用也是很爽的。"}, {"id": "6846687602242748423", "title": "「牛客网」45道JS能力测评经典题总结", "desc": "牛客网的45道JS能力评测题个人觉得是非常好的45道js基础检测题，基本就是对自己的JavaScript基础做一个比较全面的评估，包括if语句、循环体、基础操作符、setInterval、setTimeout、流程控制、常用数组方法及es6相关（解构、Map、Set、...等）…"}, {"id": "6998807567107358756", "title": "从零开始实现一个错误监控系统", "desc": "错误的类型 当JavaScript运行时错误（包括语法错误）发生时，window会触发一个ErrorEvent接口的error事件，并执行window.onerror()。 当一项资源（如或）加载失败"}, {"id": "6942098460095021063", "title": "怎么实现一个九宫格抽奖？", "desc": "将高亮的方块盒子的执行顺序定义好，利用定时器将速度调节为由快到慢，等速度降到某个区间就判断高亮的下标是否匹配最终的奖品下标，匹配则开奖，不匹配则继续降速。 每到特殊的节日或者搞活动的时候就需要开发配合运营，搞一些抽奖的活动，比较常用的抽奖方式有：大转盘，九宫格，老虎机等。这次我…"}, {"id": "7000647493163679752", "title": "从Vue源码学习JavaScript 之 this instanceof Vue", "desc": "通过 this instanceof Vue 来判断有没有用 new 关键词调用。 那么，为什么可以这么判断呢？我们分别了解一下 `this` 和 `instanceof` 的用法。"}, {"id": "6997672638529159176", "title": "为什么你要理解j s x", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战” 前言 我们假设你有一定的前端知识，简单使用过React但不了解他的原理以及为什么要用它。 通过这篇文章你会了解到这些问题的答案: 为什么"}, {"id": "6977649537812791303", "title": "简述 JavaScript 高阶函数的开发使用", "desc": "作为一个 JavaScript 开发者，会经常使用高阶函数，所以你务必对这些函数有正确的理解，这篇文章将会详细说明。"}, {"id": "7001860266040229919", "title": "JavaScript进阶（八）generator（生成器）实现", "desc": "> generator（生成器）是ES6标准引入的新的数据类型。generator看上去就像是平常用到的函数，它可以返回多次，和 Promise ⼀样，也可以⽤来异步编程。其借鉴了Python的gen"}, {"id": "6844903588607557639", "title": "带你走进webpack世界，成为webpack头号玩家。", "desc": "最近朋友圈被《头号玩家》刷爆了，斯皮尔伯格一个资深电影导演，把对过去经典的致敬，对未来的憧憬浓缩在这一部电影中，可以说让观众燃了起来。 观望整个前端开发，不断的演化，发展迅速。前端开发从最开始切页面, 前端自动化构建工具日新月异，从最初的Grunt,Gulp到现在前端项目可以说…"}, {"id": "7002152806329090078", "title": "es6 数组语法15个总结,前端的你一定会有用到的时候", "desc": "pusgh() 添加数组 unshift() 添加数组 一 总结pusgh()跟unshift()都是添加数组，同时也都返回添加后的长度。区别在于pusgh添加到数组后面unshift添加到数组前面 "}, {"id": "6844904090225360904", "title": "【建议👍】记录一次BAT一线互联网公司前端JavaScript面试", "desc": "你需要一些HTML和css的基础知识，掌握JavaScript和ES6的基本语法，对事物的好奇心。 除了0之外的所有数字，转换为布尔型都为true。 除了“ ”之外的所有字符，转换为布尔型都为true。 null和undefined转换为布尔型为false。 所有自由变量的查找…"}, {"id": "6997584076404162574", "title": "前端刷题路-Day84：打家劫舍（题号198）", "desc": "你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入..."}, {"id": "6844904199700873223", "title": "聊一聊typeof instanceof 实现原理", "desc": "可能大家对BigInt原始数据类型比较陌生,它的提出解决了一部分问题，比如大于253 - 1 的整数。这原本是 Javascript中可以用 Number 表示的最大数字。BigInt 可以表示任意大的整数。 了解了数据类型后,我们接下来就来看看如何检测数据类型吧。 typeo…"}, {"id": "6962857149856907300", "title": "你要知道的 Npm Script 都在这里", "desc": "在拿到一个项目之后，如何看入口文件，如何运行项目，我们都会找到 package.json 中的 script 。 甚至在做项目做久之后，我们会自己写一些脚本来给开发提效，但你知道 NPM 脚本能做什么"}, {"id": "7005194750210867214", "title": "ESM( ECMAScript Module)", "desc": "ESM( ECMAScript Module) Why Daily Code Tree Shaking ES6 模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，这就是 tree-sh"}, {"id": "6844903807793512456", "title": "全面分析前端的网络请求方式", "desc": "带着以上这些问题、关注点我们对几种网络请求进行一次全面的分析。 这种交互的的缺陷是显而易见的，任何和服务器的交互都需要刷新页面，用户体验非常差，Ajax的出现解决了这个问题。Ajax全称Asynchronous JavaScript + XML（异步JavaScript和XML…"}, {"id": "7001042279532085261", "title": "AES算法（十）浏览器端 JS 实战", "desc": "本篇将对之前所属的 AES 算法在浏览器端的 JavaScript 语言中做实战讲解，为什么要强调是浏览器端？因为后面还会对 Node 环境下 AES 算法应用单独做个实战演示。"}, {"id": "6844903743117361165", "title": "函数式编程，真香", "desc": "最开始接触函数式编程的时候是在小米工作的时候，那个时候看老大以前写的代码各种 compose，然后一些 ramda 的一些工具函数，看着很吃力，然后极力吐槽函数式编程，现在回想起来，那个时候的自己真的是见识短浅，只想说,'真香'。 最近在研究函数式编程，真的是在学习的过程中感觉…"}, {"id": "6844903622870827022", "title": "[译] ES2018（ES9）的新特性", "desc": "在这篇文章中，我将介绍ES2018（ES9）的新特性，并介绍如何使用它们。 JavaScript（ECMAScript）是跨多个平台的许多厂商实施的不断发展的标准。ES6（ECMAScript 2015）花费六年的时间敲定，是一个很大的发行版。新的年度发布流程被制定，以简化流程…"}, {"id": "6995899033734610981", "title": "重温ES6系列之“对象的扩展-属性的简洁表示法、属性名表达式”", "desc": "1.属性的简洁表示法 ES6允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。 上面代码表明，ES6允许在对象之中，只写属性名，不写属性值。这时，属性值等于属性名所代表的变量。下面是另"}, {"id": "6997033439400574984", "title": "vue3组件之间方法互相调用", "desc": "“这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战” 场景描述 父组件页面 子组件页面 出现 Uncaught TypeError: listRef.value.fatherMess is"}, {"id": "6971367726401093668", "title": "JavaScript 中数组 sort() 方法的基本使用", "desc": "今天，就数组的 sort 方法来学习一下，避免日后踩坑的悲惨遭遇。 概念 sort 方法用于对数组的元素进行排序。"}, {"id": "6844903704491982856", "title": "炫酷粒子表白，双十一脱单靠它了！", "desc": "双十一光棍节又要来临了，每年这个时候都是本人最苦闷的时刻。日渐消瘦的钱包，愈发干涸的双手，虽然变强了，头却变凉了。今年一定要搞点事情！ 最近听女神说想谈恋爱了，✧(≖ ◡ ≖) 嘿嘿，一定不能放过这个机会，给她来个不一样的表白。 作为整天搞可视化的前端攻城狮，最先想到的就是常玩…"}, {"id": "6989437152341786655", "title": "前端导出excel文件", "desc": "xlsx 介绍 由 SheetJS 出品的 js-xlsx 是一款非常方便的只需要纯 JS 即可读取和导出 excel 的工具库，功能强大，支持格式众多，支持 xls、xlsx、ods(一种 Open"}, {"id": "6969536778927603725", "title": "用 ObjectComponent 重新定义 React 组件", "desc": "前言 今天在公司内部完成了应用框架的第一个版本, 然后又开始回顾之前写的 structured-react-hook 这个库, 其实关于名字我一直很纠结, 我始终在思考, 这种定义 react 组件的"}, {"id": "6990223628809797669", "title": "从前端编译到手写 Babel", "desc": "编译这个概念好像离前端很遥远，遥远到好像工作面试都不要求相关的知识。 但是，真的遥远么？ 我们每天用 Babel、Typescript Compiler 来做代码的转换，用 Vue Template "}, {"id": "6999833336596135966", "title": "js 算法 - 插入排序", "desc": "插入排序是一种简单的排序算法，插入排序将一组数据分为有序区间和无序区间，每次从无序区间找到合适的一个数据插入到有序区间的合适位置，当无序区间没数据，即只剩下有序区间时，这组数据就变为完全有序。"}, {"id": "6990156087726964766", "title": "一文带你掌握js自定义事件", "desc": "什么是事件事件是一种机制，当某些特定的行为或动作被触发，此时会自动执行其他行为。就拿我们常用的点击事件为例，当点击这一个动作发生之后，就会触发"}, {"id": "7002949819073298463", "title": "《JavaScript高级程序设计（第3版）》读书笔记1", "desc": "第1章　JavaScript简介 JavaScript是一种专为与网页交互而设计的脚本语言。 一、ECMAScript ECMA-262定义ECMAScript语言的标准，ECMAScript就是对实"}, {"id": "6986557098804920351", "title": "JS核心知识点", "desc": "JavaScript ( JS ) 是一种基于原型编程、多范式、具有函数优先的轻量级、解释型或即时编译型的编程语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。"}, {"id": "6844904015147499533", "title": "你真的懂package.json吗", "desc": "在Node.js中，模块是一个库或框架，也是一个Node.js项目。Node.js项目遵循模块化的架构，当我们创建了一个Node.js项目，意味着创建了一个模块，这个模块的描述文件，被称为package.json。 当时看的有点懵， 于是又补了下相关知识， 发现原来packag…"}, {"id": "6844903844510449672", "title": "如何配置透明发光的骚气 vscode —— Jinkey 原创", "desc": "在 VSCode 安装目录（自己随便选择一个文件夹也可以），放入以下文件。 为了方便下载，文件整理到了 Github-Jinkeycode/vscode-transparent-glow，欢迎 star。 文字发光样式，样式请在 Github 获取。如果要不发光的，可以使用 s…"}, {"id": "6971036721442095111", "title": "js - 正则表达式", "desc": "正则表达式的意义在于通过开发人员编写匹配模式，然后可以通过这个匹配模式去校验用户的输入是否符合开发人员编写的模式。"}, {"id": "6985033972531068942", "title": "js Map对象的用法", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 一、Map对象方法 Map： Map是一组键值对的结构，具有极快的查找速度。 举个例子，假设要根据同学的名字查找对"}, {"id": "6979778428505423886", "title": "前端面试高频出现的八个基础JS概念", "desc": "面试常考题， Javascript 世界里将数据类型分为了两种：原始数据类型 与 引用数据类型，共有八种数据类型。"}, {"id": "6992756660234092551", "title": "性能优化之记忆函数（Memoization ）", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 1.什么是记忆函数 记忆化是一种构建函数的处理过程，让函数能够记住上次计算结果。简单来说就是保存每一次调用的参数和函数的运行结果，在下一次使"}, {"id": "6844903662519599111", "title": "防抖和节流原理分析", "desc": "窗口的resize、scroll、输入框内容校验等操作时，如果这些操作处理函数是较为复杂或页面频繁重渲染等操作时，在这种情况下如果事件触发的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。此时我们可以采用debounce（防抖）和throttle（节流）的方式来减少触发的…"}, {"id": "6908895602222825486", "title": "呆呆带你手撸一个思维导图-基础篇", "desc": "你盼世界，我盼望你无bug。Hello 大家好，我是霖呆呆！ 哈哈哈，好久没写文章了，不过今日再次提笔就像和一位很久没见面的好朋友约了顿饭，熟悉的感觉又回来了[窃喜~]。 希沃ENOW大前端也已经发了十几篇文章，一轮了，感谢大家的支持和喜欢啦[笔芯～]。 这周给大家带来的是一篇…"}, {"id": "6998861012245938189", "title": " 微任务？区区队列罢了。", "desc": "序言 最近在学 Vue 源码 $nextTick的时候，对任务调度有了新的认识，其中有运用到 promise 来创建微任务这"}, {"id": "6844904197519835150", "title": "一文读懂base64编码", "desc": "我们知道一个字节可表示的范围是 0 ～ 255（十六进制：0x00 ～ 0xFF）， 其中 ASCII 值的范围为 0 ～ 127（十六进制：0x00 ～ 0x7F）；而超过 ASCII 范围的 128～255（十六进制：0x80 ～ 0xFF）之间的值是不可见字符。 在 AS…"}, {"id": "6983978027419959303", "title": "您可能不知道的Alan", "desc": "当前有很多语音助手：iOS有Siri，Windows有小娜，Android有Google Assistant，亚马逊的Alexa，国内安卓有灵犀。各大厂还推出了小度、小雅、小爱、天猫精灵等智能音箱产品"}, {"id": "6986162635561500680", "title": "变量 var const let 的区别", "desc": "第一章 变量 var const let 的区别 前言 ECMAScript变量是松散类型的，变量可以保存任何类型的数据，每个变量不过是一个用于保存任意值的命名占位符"}, {"id": "6844903945823846414", "title": "Vue 3.0 最新进展，Composition API", "desc": "在上一篇文章Vue 3.0 前瞻，体验 Vue Function API，笔者通过尝试vue-function-api，提前体验了Vue 3.0 即将发布的函数式API，在文章最后，笔者提出了一些思考。最近，Vue 官方发布了最新的3.0 API 修改草案，并在充分采纳社区的意…"}, {"id": "6844903688222277640", "title": "优秀前端必知的话题：我们应该做些力所能及的优化", "desc": "在 Web 应用开发过程中，我们经常谈及到的就是优化，而优化往往又是既简单而又复杂的过程，优化这个命题很广，最终体现出来的都是用户体验问题，我们一切优化都是为了用户体验。 为什么说简单？在现代 Web 开发生态中，有非常优秀的工具链帮助我们做一些很实际的优化工作，例如 webp…"}, {"id": "6991498713629720607", "title": "JS进度条顺滑版实现", "desc": "相信大多前端同学都自己写过音频、视频播放器，实现并不复杂，可是进度条不顺滑，现提出优化方案和代码示例"}, {"id": "6959072496633151502", "title": "如何在 JavaScript 中使用宏", "desc": "在语言当中，宏常见用途有实现 DSL 。通过宏，开发者可以自定义一些语言的格式，比如实现 JSX 语法。在 WASM 已经实现的今天，用其他语言来写网页其实并不是没有可能。"}, {"id": "6922710332813082638", "title": "Lodash 个人使用文档", "desc": "Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。 Lodash 遵循 MIT 开源协议发布，并且支持最新的运行环境。 查看各个构件版本的区别并选择一个适合你的版本。 该笔记为记录比较常用的方法，一些可通过 ES6 方式实现的，以及不是很重要的都进…"}, {"id": "6844903702554214408", "title": "一次性搞懂JavaScript正则表达式之语法", "desc": "Regular Expressions翻译成中文叫正则表达式。也不知道是谁翻译过来的，听起来就很严肃。似乎翻译成通用表达式更能传达其精髓，如果你不怕梦见屈原的话。 为什么叫通用表达式？因为它有一套和编程语言无关的文本匹配规则。很多语言都实现了正则表达式的文本匹配引擎，只不过在功…"}, {"id": "6957682023540457480", "title": "Lodash 源码解读（一）", "desc": "近期比较提升一下自己的代码功底，想到自己的项目里用到 Lodash 的地方比较多，于是决定阅读一下 Lodash 的源码，看一看这种大型的开源工具函数库有哪些细节值得学习。"}, {"id": "6844904096059621389", "title": "React-Router v6 新特性解读及迁移指南", "desc": "18年初，React Router的主要开发人员创建一个名为Reach Router的轻量级替代方案。 目前 v6已是测试最后一版，估计新的特性不出意外就是下面这些了。 &#x3C;Switch>重命名为&#x3C;Routes>。 &#x3C;Route>的新特性变更。 嵌套…"}, {"id": "6844904096634241032", "title": "上次24个实用 ES6 方法受到好评，这次再来 10个", "desc": "毫无疑问，JavaScript 是Web开发中最流行的编程语言之一。 无论使用的是 React，Vue 还是Angular，都只是 JavaScript。 JS围绕着广阔而至关重要的生态系统发展，提供了无数的框架和库，可帮助我们更快地开发应用程序。 但是有时候最好退一步，尝试了…"}, {"id": "6844904088220467213", "title": "学习 koa 源码的整体架构，浅析koa洋葱模型原理和co原理", "desc": "感兴趣的读者可以点击阅读。 其他源码计划中的有：express、vue-router、react-redux 等源码，不知何时能写完（哭泣），欢迎持续关注我（若川）。 源码类文章，一般阅读量不高。已经有能力看懂的，自己就看了。不想看，不敢看的就不会去看源码。 所以我的文章，尽量…"}, {"id": "7002776685808467982", "title": "在浏览器中自定义下载一些内容", "desc": "场景：我想下载一些DOM内容，我想下载一个JSON文件 使用方式： 提供一个图片链接，点击下载 图片、pdf等文件，浏览器会默认执行预览，不能调用download方法进行下载，需要先把图片、pdf等文"}, {"id": "6875242225056350222", "title": "前端跨域真Easy，妈妈再也不用担心了", "desc": "本文主要介绍 JSONP、CORS 两种跨域方式，后台采用 Koa 模拟，真正的目标是理解整个跨域的流程。 至于什么是跨域和浏览器同源策略的问题，请同学们自行百度。 JSONP 其实是一种 trick, 利用浏览器对带有 src 标签的能力实现访问跨域数据的小技巧（像 img、…"}, {"id": "6844903503807119368", "title": "关于IT培训机构的个人看法", "desc": "缘分与巧合，最近接触比较多的培训机构出来的人，以及看过关于培训机构的文章和问答。虽然没在培训机构上过课，但是接触过很多培训机构出来的人，也看过一些培训机构的课程。关于培训机构，我也有自己的看法。经历了这些，我写了这篇文章，不吹不黑的写下我对培训机构的个人见解。这篇文章可能会有些…"}, {"id": "6968998053130797086", "title": "Cesium源码跟读之CesiumWidget的实现", "desc": "没错，我也来读源码了，因为上一篇文章中简单提到了一下Cesium的渲染机制，所以我索性一咬牙将这块的源码通读一遍，自己也能更深入的了解Cesium"}, {"id": "6908748150719299598", "title": "使用JS将聊天记录聚合在一起", "desc": "今天在给我开源项目的聊天记录添加消息发送时间展示时，正好遇到了这个问题，一开始想不明白应该如何处理这些数据，后来经过一番思考后，终于有了实现思路，将其实现了，本文就跟大家分享下我的实现思路以及过程，欢迎各位感兴趣的开发者阅读本文。 观察上方数据，我们发现：每个消息对象都有一个c…"}, {"id": "6844903924323844103", "title": "你在 19 年剩余的时间里还能学点什么？", "desc": "时间过得真快，转眼之间 19 年都已经快进入 9 月份了。 今天就来谈谈在这剩余的时间中我们还可以学点什么来充实自己，提高自己的竞争力。 前端基础的重要性我觉得不需要多说了，无论是写出健壮的代码还是定位问题亦或者是面试中都是相当重要的一块内容。 如果你认为自身的前端基础还不过关…"}, {"id": "6963097187744120862", "title": "从一次重构组件代码来谈谈前端多语言最佳实践", "desc": "重构代码背景 我们的一些业务组件需要支持多语言，这些单独发包的组件翻译文案通常都维护在项目一些文件夹下，并且每个需要翻译的文案在代码中都需要手动用 intl.get(key)包裹来实现运行时翻译，开发"}, {"id": "6888105621372026888", "title": "用JS从零开始搭建3D渲染引擎(一)", "desc": "为什么要写这个系列呢? 市面上关于前端的三维渲染的入门教程层出不穷, 有偏重于数学计算原理的, 有偏向于渲染管线流程介绍的, 也有告诉你API怎么用如何快速上手的. 这系列文章期望从零开始去考虑3D渲染引擎的搭建, 从无到有一步一步去构建三维渲染必备的要素和流程, 让读者能够\"…"}, {"id": "6844903910834962446", "title": "「前端进阶」彻底弄懂函数组合", "desc": "函数组合在函数式编程中被称为组合(composition),我们将了解组合的概念并学习大量的例子。然后创建自己的compose函数。 组合的概念是非常直观的，并不是函数式编程独有的，在我们生活中或者前端开发中处处可见。 比如我们现在流行的 SPA (单页面应用)，都会有组件的概…"}, {"id": "7000293683836747790", "title": "js中的事件委托/代理", "desc": "小编今天在做项目的时候，在项目的注释中发现了关于事件委托的注释（PS：虽然下面代码写的不是事件委托的代码!）"}, {"id": "7000273590650142727", "title": "前端分享--ES6之Promise源码系列【干货】", "desc": "Promise实现 在传统的异步编程中，如果异步之间存在依赖关系，我们就需要通过层层嵌套回调来满足这种依赖， 如果嵌套层数过多，可读性和可维护性都变得很差，产生所谓“回调地狱”， 而Promise将回"}, {"id": "6999846191257092127", "title": "重温js—— 错误处理", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 出现错误的原因 书写错误 运行错误 运行时报错 代码的书写中，我们可能没有报错，但是代码在执行的过程中发现错误了。 上面的代码中，我们定义"}, {"id": "6980633376575193101", "title": "First-class Function (函数是一等公民/头等函数）| 函数式编程", "desc": "First-class Function (函数是一等公民/头等函数）, 有如下特性: 函数可以被赋值给一个变量; 函数可以被当作参数传递给其他函数;..."}, {"id": "6844903550280024071", "title": "合格前端系列第九弹-前端面试那些事", "desc": "选一个你觉得印象最深的项目讲一讲，然后会从项目里面切入到 web 基础（html/css/js），这一块大概会聊 20-30 分钟，所以一定要提前选好一个自己做过的得意的项目，花一点时间捋一捋你觉得项目中出色的点，用到了比较 hack，比较酷炫的方法解决了哪些痛点。 this：…"}, {"id": "6867469476196155400", "title": "一文带你层层解锁「文件下载」的奥秘", "desc": "大家好我是秋风，今天带来的主题是关于文件下载，在我之前曾经发过一篇文件上传的文章（一文了解文件上传全过程（1.8w字深度解析，进阶必备 200+点赞），反响还不错，时隔多日，由于最近有研究一些媒体相关的工作，因此打算对下载做一个整理，因此他的兄弟篇诞生了，带你领略文件下载的奥秘…"}, {"id": "7002597072427810830", "title": "前端小白不迷路 - 今天来讲下面试高频问点-原型和原型链", "desc": "任何一个对象，都有原型对象，而原型对象本身也是对象，也有自己的原型对象，这样一环扣一环就形成了一个链式结构，我们把这个链式结构称为：原型链。任何对象都有__proto__属性，指向当前的原型对象。"}, {"id": "6844904115969982472", "title": "字节跳动面试官—麻烦你搞个方法出来🌈使得以下程序最后能输出 success", "desc": "的方式，循序渐进完全搞定 js 中 this 指向优先级的问题。 ⛹️‍♂️⛹️‍♂️ js 中的 this 指向问题应该是一个讨论了很久的话题了，关于这个话题的文章，在掘金也有很多。但是，可能之前看到的文章不怎么适合自己，每次看完都还是似懂非懂、没有多少头绪。前几天幸得我的老…"}, {"id": "6922245359137718279", "title": "带你入门前端工程（十）：重构", "desc": "重构和性能优化有相同点，也有不同点。 相同的地方是它们都在不改变程序功能的情况下修改代码；不同的地方是重构为了让代码变得更加容易理解、易于修改，性能优化则是为了让程序运行得更快。这里还得重点提一句，由于侧重点不同，重构可能使程序运行得更快，也可能使程序运行得更慢。 重构可以一边…"}, {"id": "6844903790789967879", "title": "【前端词典】进阶必备的网络基础（下）", "desc": "在上一篇我提到了前端面试频率较高的几个网络基础知识，这一篇我会把上一篇遗留的五个尽力讲清楚。如果还没有来得及看上一篇，那么现在可以一起看。 主机地址：用于识别该网络中的主机。 D 类用于用于特殊用途. 又称做广播地址 一. A类地址 10.X.X.X是私有地址（所谓的私有地址就…"}, {"id": "6867690497545076743", "title": "手把手教你实现 Promise", "desc": "很多 JavaScript 的初学者都曾感受过被回调地狱支配的恐惧，直至掌握了 Promise 语法才算解脱。虽然很多语言都早已内置了 Promise ，但是 JavaScript 中真正将其发扬光大的还是 jQuery 1.5 对 $.ajax 的重构，支持了 Promise…"}, {"id": "6844903698498322439", "title": "手摸手教你使用WebSocket[其实WebSocket也不难]", "desc": "在本篇文章之前，WebSocket很多人听说过，没见过，没用过，以为是个很高大上的技术，实际上这个技术并不神秘，可以说是个很容易就能掌握的技术，希望在看完本文之后，马上把文中的栗子拿出来自己试一试，实践出真知。 客户端(浏览器)和服务器端进行通信，只能由客户端发起ajax请求，…"}, {"id": "6977152988678733855", "title": "手写 Vue 系列 之 Vue1.x", "desc": "手写 Vue1，实现数据响应式原理、编译器、指令(v-bind、v-model、v-on)....."}, {"id": "6857800782276902919", "title": "前端10个灵魂拷问 吃透这些你就能摆脱初级前端工程师！", "desc": "这个题目如果回答非常完美，那么可以判断这个人已经脱离了初级前端工程师，前端的核心就是异步编程，这个题目也是体现前端工程师基础是否扎实的最重要依据。 new promise((resolve,reject)=>{ resolve() }).then().... 第二个问题是定时器…"}, {"id": "6986409229825343496", "title": "草系前端手摸手带你实现正则引擎，点燃夏日最热情的烟火🔥", "desc": "前端讲编译原理系列全新篇章：从自动机基础知识出发，扩展至我们常用的技术栈：正则匹配，最后与大家一起共同实现简易的正则引擎。让我们一同在炎热的夏日一起点燃最热情的烟火吧！"}, {"id": "6919295789630455815", "title": "前端搞工程化：从零打造性能检测库「源码 + 视频」", "desc": "聊下来以后得出一些结论：这类读者普遍就职于中小型公司，前端人员个位数，平时疲于开发，团队内部几乎没有基础建设，工具很蛮荒。工程化对于这些读者来说很陌生，基本不知道这到底是什么，或者说认为 Webpack 就是前端工程化的全部了。 笔者目前就职于某厂的基础架构组，为百来号前端提供…"}, {"id": "6844903512845860872", "title": "这一次，彻底弄懂 JavaScript 执行机制", "desc": "本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。 不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程…"}, {"id": "6976070529388118030", "title": "这些 JS 的新语法有点东西啊", "desc": "TC39 的提案笔者一直有关注，攒了一些有趣的今天来聊聊。 PS：提案总共五个阶段，只有到阶段 4 才会被纳入到发布规范中，其它的只是有几率会被纳入。"}, {"id": "7004816788676427813", "title": "弄清react路由——从源码开始(一)", "desc": "阅读源码是提升编程功底和深层次理解原理的不二方法，强烈建议大家初次学习源码就拿前端路由开始。因为路由组件可以说和我们开发项目息息相关了，而且其源码结构也非常清晰，可以说是初识源码的绝佳例子。 reac"}, {"id": "6948576107163549732", "title": "前端模拟面试字数过23477万内容｜刷题打卡", "desc": "小达：嗯，好的。 http是超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准，用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。 而对于https，他是以安全为目标的http通道，是http的…"}, {"id": "7005766827645075463", "title": "AST，真香", "desc": "抽象语法树（Abstract Syntax Tree, AST），是源代码的抽象语法结构的树状表示，与之对应的是具体语法树；之所以是抽象的，是因为抽象语法树并不会表示出真实语法中出现的每一个细节"}, {"id": "7002775460115562527", "title": "前端关于复制粘贴板的使用", "desc": "最近做了一个关于这方面的需求，自己也是第一次做关于这一块的内容，现将相关实现进行一个梳理。JS对粘贴板的访问有如下几种方式 原生方法 execCommand 原生方法 Clipboard"}, {"id": "6986485485765918733", "title": "让你 vscode 写代码效率更高的技巧", "desc": "vscode 是我们写代码常用的编辑器，它的功能很多，但其实我们有很多功能都没用到，这篇文章就是想梳理下那些可能你不知道的但是却对效率提高很有帮助的一些技巧。 包括： 一键执行 npm scripts"}, {"id": "6906709240329535495", "title": "你不知道的轮播图细节~", "desc": "事情是这样的，前两天有学员问我轮播图无缝滚动的原理，说平时用框架习惯了，到自己手撸的时候不会了。 如果是几十张图片，那就直接做成一个3D的圆环，还是那句话，有解决思路最重要。 想看代码的，继续往后看，代码量其实很少，连着css一起也才一百多行而已，所以其实一点都不复杂，重点还是…"}, {"id": "6844903652881072141", "title": "vue中Axios的封装和API接口的管理", "desc": "回归正题，我们所要的说的axios的封装和api接口的统一管理，其实主要目的就是在帮助我们简化代码和利于后期的更新维护。 在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，它是基于promise的http库，可运行在浏览器端和node.js中。他有很多优秀的…"}, {"id": "7006113032799535111", "title": "「每日一题」找到需要补充粉笔的学生编号", "desc": "1. 题目描述 一个班级里有 n 个学生，编号为 0 到 n - 1 。每个学生会依次回答问题，编号为 0 的学生先回答，然后是编号为 1 的学生，以此类推，直到编号为 n - 1 的学生，然后老师会"}, {"id": "6977300934120439815", "title": "那些高级/资深的前端是如何回答JavaScript面试题的 （四）", "desc": "纯干货文，带你完全掌握webpack整个编译流程。 只要有需要，耐心看完。你就发现以前你不懂的好像都懂了。 求各位小伙伴推荐！"}, {"id": "6980129607353630756", "title": "手写 Vue2 系列 之 编译器", "desc": "手写 Vue 2 系列 之 编译器，基于 lyn-vue (Vue1) 直接进行升级，从字符串模版解析开始，到最终得到 `render` 函数。"}, {"id": "6995497136510992414", "title": "React状态管理的一些思考（上篇）", "desc": "随着SPA单页面应用复杂度的提高，状态也会变大，管理状态的难度也会增加。为了更好的管理应用的状态，或许会考虑状态使用react状态管理的库，但是该考虑和如何选择？"}, {"id": "7000375297363148814", "title": "深入探究数组和类数组", "desc": "我们经常会听人提到类数组，也经常会遇到类数组转真数组的怎么转的问题？要理解类数组，肯定会谈起数组，那我们今天就来探究探究"}, {"id": "6993502739560923143", "title": "使用javascript写shell脚本 二", "desc": "“这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战” 上篇文章总结了javascript写shell脚本的基础操作 使用javascript写shell脚本 一 这篇文章继续介绍执行如何li"}, {"id": "6844904062257725447", "title": "2020 前端面试 | 第一波面试题总结", "desc": "16年出来工作，工作经验四年，之前主要做平面相关，自己喜欢瞎折腾，从17年开始研究前端，然后公司内部转岗到开发部门工作，算下来前端经验也快三年之久。 年底由于种种原因想换一份工作，但由于太忙，没认真搞简历，也没怎么复习基础，导致很多本来会的都没敢往简历上写。于是写了一个简版的简…"}, {"id": "6956224653526302733", "title": "从几种清除浮动的方法聊到BFC", "desc": "【前言】 浮动的核心就是破坏了文档流，使用它的目的是为了能实现文字能够环绕图片的排版功能，以达到自己想要的布局效果。"}, {"id": "6990604925675765774", "title": "JavaScript：作用域链与闭包", "desc": "解释了全局作用域与局部作用域的原理，以及块级作用域的创建； 解析了作用域链与闭包的关系，以及闭包的原理；"}, {"id": "6993567551720521758", "title": "JavaScript 的内存管理", "desc": "内存管理存储比较抽象，但是和我们日常的研发息息相关，了解内存的管理，对日常处理内存问题也会更加得心应手一些。希望对你有帮助。"}, {"id": "6999824657494851591", "title": "JavaScript实现二分搜索树（递归）", "desc": "一文搞懂二分搜索树！ 还不来看看~ 二分搜索树相比于其他数据结构的优势在于有着高效的插入、删除、查找操作"}, {"id": "6997033917282779149", "title": "【前端笔记】谈谈javascript中的数字", "desc": "大家好哇，今天来记录一下javascript的数字，内容主要参考《你不知道的JavaScript》（中卷），同时会加上自己的思考，以及实践的例子，有道是好记性不如烂笔头，读了书一定要勤做笔记，这样不仅"}, {"id": "6844904019589070856", "title": "看了多篇Vue内核文章原理还是不太明白，看看这篇试试？", "desc": "切换到仓库的第一个commit，自己运行运行，尝试着去看一看代码，自己先理解理解，断点调试调试。然后再来看这篇文章代码中写的注释，遇到不太理解的再来看看这篇文章，看看是不是能够更易于理解些。代码真的已经简化到不能再简化，总计才150行左右，仔细看你一定能理解。第一个commit…"}, {"id": "6986454629223497765", "title": "精读《算法 - 二叉搜索树》", "desc": "二叉搜索树的特性是，任何一个节点的值： 都大于左子树任意节点。 都小于右子树任意节点。 因为二叉搜索树的特性，我们可以更高效的应用算法。 精读 还记得 《算法 - 二叉树》 提到的 二叉树的最近公公祖"}, {"id": "6999660317701570596", "title": "js中.语法和[]的区别", "desc": "中括号语法： 任何时候场合 都可以使用 点语法：有局限性 eg1.正常 eg2.key为空字符串时,点语法报错 eg3.key为数字字符串时，点语法报错 eg4.key为number类型时,点语法报错"}, {"id": "6963603066507493412", "title": "js - 执行上下文【附带作用域和执行上文的区别】", "desc": "什么是执行上下文 执行上下文是一种代码运行时的场景，环境的概念。就好比中国文化博大精深。可能同一句话在不同的场景下，说的意义和意识是两种不同的。 执行上下文的类型 全局执行上下文 — 这是默认或者说基"}, {"id": "6952472461438877704", "title": "前端面试JS ES6篇（持续更新 2021 5 8）", "desc": "前端面试中容易问到的一些基础JS题，以及ES6新特性。也有部分计算机网络，浏览器原理相关题目，希望可以帮到你"}, {"id": "6991666806549119007", "title": "前端面试必考点：深拷贝和浅拷贝｜8月更文挑战", "desc": "深拷贝和浅拷贝 深拷贝和浅拷贝是前端面试的必须考点，有必要把它搞清楚，深拷贝和浅拷贝究其原因和内存有很大的关系，js中的基本数据类型都保存在栈中，引用类型都保存在内存堆中，知道了这点就可以很容易的搞懂"}, {"id": "6844903959996399624", "title": "聊聊面试必考-递归思想与实战", "desc": "“递归”算法对于一个程序员应该算是最经典的算法之一，而且它越想越乱，很多复杂算法的实现也都用到了递归，例如深度优先搜索，二叉树遍历等。 作者简介：koala，专注完整的 Node.js 技术栈分享，从 JavaScript 到 Node.js,再到后端数据库，祝您成为优秀的高级…"}, {"id": "6982416460723257352", "title": "vscode 烟花抖动效果实现原理揭秘", "desc": "最近一直在研究 vscode 插件，今天给大家一分享一个效果特别炫的插件，名字叫 power mode。 编写代码边放烟花、编辑器还会抖动。 效果很炫，但是我们肯定不能满足于会用，得研究下它是怎么实现"}, {"id": "7001744013627752479", "title": "异步编程", "desc": "异步编程的由来 JavaScript语言的执行环境是的是单线程的，一次只能执行一个任务，多个任务需要排队等候，这种模式会出现阻塞代码，代码的执行顺序比较混乱，导致代码执行效率低下，，会造成页面卡顿，影"}, {"id": "7001118274100396069", "title": "夯实基础篇----讲讲js中的循环与迭代", "desc": "for语句可谓是最经典也最全能的循环语句选手了，使用起来很方便，自由度也很高，比如输出0到100，我们可以这样写。"}, {"id": "6907060255373393927", "title": "H5 必知必会之与 App 交互 ", "desc": "本文将深入探讨 H5 与 App 交互的几种常见模式。 首先声明，本文涉及的 H5 与 App 交互协议和模式没有什么特别独到之处，相反，它们恰恰是在业界既有经验基础上结合项目实际归纳提炼出来的。因此，文中涉及的技术和代码可以看作是行业经验落地的产物，不涉秘，也不是权威做法，仅…"}, {"id": "6982080668679274527", "title": "这可能是你没见过的“JS函数式编程(ramda)”实践", "desc": "列举一些主要在react项目中，函数式编程（ramda）的案例实践和分析思考。希望带来不一样的编码感觉。"}, {"id": "7006485916655026207", "title": "javascript实践教程-07-分支结构", "desc": "本篇介绍了js中的4种分支结构：if、if else、else if、switch case，用来判断在不同的条件下运行不同的代码分支。 阅读时间10~15分钟。"}, {"id": "7002771962619494436", "title": "js语法基础-操作符", "desc": "ECMA-262描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔"}, {"id": "6994807048680669191", "title": "浅析 JavaScript 数据类型 | Object 基础", "desc": "上次我们对基本数据类型有了基础的认识，今天我们主要了解一下引用数据类型中的 Object 对象的基础知识，以普通对象作为例子，开启探索之旅。"}, {"id": "6854573208323457032", "title": "用户名-手机号加密特殊处理", "desc": "这不是一篇正经的文章,但是或许对你有用."}, {"id": "6981636473204244511", "title": "JS常用高阶函数", "desc": "JavaScript是一种功能强大的编程语言，尤其是在Web开发中。在过去的几年中，它有了很大的改进，并且由于其新的一些功能而变得更加易于编写。 这些功能之一是高阶函数，这些函数将其他函数作为参数或将"}, {"id": "6844904013532495885", "title": "状态管理之 Flux、Redux、Vuex、MobX（概念篇）", "desc": "本文是对 Flux、Redux、Vuex、MobX 几种常用状态管理模式的总结，偏向于概念层面，不涉及过多代码。 组件之间通常会有一些共享的状态，在 Vue 或者 React 中我们一般会将这部分状态提升至公共父组件的 props 中，由父组件来统一管理共享的状态，状态的改变也…"}, {"id": "7001367565117325320", "title": "【javascript专题】 高逼格的数组方法reduce解析及运用", "desc": "本文章要讲述数组方法中一个比较难理解的方法：reduce 首先，我们搬出reduce方法的模型： array.reduce((pre,cur,index,arr)=>{},init) 接着，重点理解以"}, {"id": "6952442048708345863", "title": "list和tree的相互转换", "desc": "最近在写项目的时候，遇到了现有的树状组件不能满足目前的需求，需要对树形组件进行（TreeSelect）扩展。扩展的功能主要是能够通过输入搜索关键字对树形结构进行过滤，在扩展的过程中遇到了数据结构的相互"}, {"id": "6844903526796099591", "title": "JavaScript 实用技巧和写法建议", "desc": "从大学到现在，接触前端已经有几年了，感想方面，就是对于程序员而言，想要提高自己的技术水平和编写易于阅读和维护的代码，我觉得不能每天都是平庸的写代码，更要去推敲，去摸索和优化代码，总结当中的技巧，积极听取别人的建议，这样自己的技术水平会提高的更快。那么今天，我在这里就分享一下关于…"}, {"id": "6844903874113830920", "title": "详细判断浏览器运行环境", "desc": "看到标题，大家就能想起这个需求在很多项目上都能用到。我们部署在Web服务器上的前端应用，既可以用PC浏览器访问，也可以用手机浏览器访问，再加上现在智能设备的推广，我们甚至能在车载系统、穿戴设备和电视平台上访问。 设备的多样化让用户无处不在，有时候我们需要根据不同的浏览器运行环境…"}, {"id": "6999420350433853453", "title": "【译】Learn D3 入门文档: Data", "desc": "引子 继 Learn D3: By Example 第三篇，只是英文翻译，可修改代码的部分用静态图片替代了，想要实时交互请阅读原文。 原文：Learn D3: Data 版本：Published Ma"}, {"id": "6975282946638872584", "title": "Node 系列 - 006 - Puppeteer", "desc": "在前面的 5 篇文章打底下，咱们应该接入点接地气的业务了。本篇开始将接触前端多语言功能。本篇文章我们将讲解如何使用 Puppeteer 控制 Chrome/Chromium，从而达到下载文件的目的。"}, {"id": "6991793448701411364", "title": "阿里播放器直播/点播使用与多分辨率与OBS推流使用｜8月更文挑战", "desc": "背景 一，直播选择-Source模式 播放器的使用代码为： 　　 　　 点播选择-Source模式 二，点播-videoId模式 播放器的使用代码为： HLS的多码率 EXT-X-STREAM-INF"}, {"id": "6903698870694313991", "title": "如履薄冰的复制粘贴-clipboard详解", "desc": "本文从纯前端出发，因此不会涉及到类似flash或者插件之类跳过浏览器安全检测的操作实现的复制粘贴，完全基于浏览器下的安全限制与一些“奇技淫巧”去实现一个相对较为完整的复制粘贴功能。 本文将从浏览器自身的复制粘贴功能出发，带领大家了解复制粘贴背后的功能实现，对比多个富文本文档实现…"}, {"id": "6995928631033724965", "title": "JavaScript 常用数据类型及使用方式 -1", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 吃饱饭才有力气写代码~ 今天写代码的时候发现连最常用的JavaScript的数据类型以及使用都不熟练，所以打算今天好好整理一下！其中"}, {"id": "6989171774957027336", "title": "每天一题，实现flat", "desc": "有时候数组里面的成员依然是数组，那么这个时候如果要对这个数组进行\"压平\"，变成一个一维数组，就是今天要实现的方法（flat）。 问题 具体实现 实现思路 参数： array（Array）：需要压平的数"}, {"id": "6844903687597342728", "title": "[探索] 在开发中尽量提高代码的复用性", "desc": "相信很多人和我一样，在开发项目的时候，因为项目赶，或者一时没想到等原因。频繁使用 ctrl+c 和 ctrl+v ，导致代码很多都是重复的。这几天，也看了自己以前写的代码，简单的探索了一下，挑选几个实例，分享下如何在特定场景下，保证代码质量前提下，提高代码复用性。 在做项目的时…"}, {"id": "6914827188025950216", "title": "通俗易懂的理解Javacsript原型和原型链", "desc": "1. 原型是什么 首先给出定义：给其它对象提供共享属性的对象，简称为原型( prototype )。 所有对象，都有一个隐式引用，它被称之为这个对象的 prototype 原型。当访问对对象的某个属性时，会先在对象本身的属性上寻找，没找到就会去他的原型对象上寻找。 proto：…"}, {"id": "6850037271065722888", "title": "思想实验：如何在Vue中使localStorage具有响应式？", "desc": "响应式是Vue的最大特色之一。如果你不知道幕后情况，它也是最神秘的地方之一。例如，为什么它不能用于对象和数组，不能用于诸如 localStorage 之类的其他东西？ 让我们回答这个问题，在解决这个问题时，让Vue响应式与 localStorage 一起使用。 如果运行以下代码…"}, {"id": "6844903710972182536", "title": "当下拉列表数据过大时，该如何应对？", "desc": "在日常开发中，除了现成插件的使用外，还有很多问题是只能自己动手的。先抛出问题，当一个下拉列表的数据达到几千条甚至上万，这个时候浏览器已经会出现严重卡顿了。看看下面的例子 这个问题其实和表格数据是同一个性能问题，表格的解决方式是通过分页器来减少页面承载的数据量。那么下拉列表该如何…"}, {"id": "6844904035770695693", "title": "前端中的事件循环eventloop机制", "desc": "在不运行的情况可以先猜测下最终的输出，然后展开我们要说的内容。 1. 宏任务与微任务 依据我们多年编写 ajax 的经验：js 应该是按照语句先后顺序执行，在出现异步时，则发起异步请求后，接着往下执行，待异步结果返回后再接着执行。但他内部是怎样管理这些执行任务的呢？ 在 js …"}, {"id": "7005246259602653197", "title": "搞懂JS关于作用域和执行上下文", "desc": "执行上下文 定义 1.全局执行上下文： 创建阶段：在执行全局代码前创建， 创建全局执行对象：浏览器端就是window，node中是global 对全局数据进行预处理： var定义的全局变量==>und"}, {"id": "6844903809743847432", "title": "CSS 滚屏效果，要比想象中的难", "desc": "比如下图中，有的列表项的文字短，有的文字长。 需求是：希望文字长的部分能通过动画滚动显示。 我的第一反应是用纯 CSS 做不了。 其中涉及了一些有趣 CSS 知识点，在这里分享一下。 1. 如何让文字溢出容器？ work-break 属性是用来处理文字如何换行的，这里使用了不太…"}, {"id": "6925641096152399880", "title": "一看就懂的var、let、const三者区别", "desc": "哈喽大家好，又见面啦，我依旧是那个可爱的蛙人。 今天又周五了啊，划水人的一天，开心。 我们在全局作用域中或还是在局部作用域中，使用var关键字声明的变量，都会被提升到该作用域的最顶部，这就是我们常说的变量提升。 上面example中，if代码块中的var声明的变量就被提升到了函…"}, {"id": "6966797306423312414", "title": "项目中Axios二次封装", "desc": "请求封装，主要是对请求拆分比较细致，便于维护。开发时也比较方便。对于新接口需求，只需要在对应模块增加URl配置和响应的生成器配置。便可以在业务代码里面处理请求。"}, {"id": "6952673382928220191", "title": "哇擦！他居然把 React 组件渲染到了命令行终端窗口里面", "desc": "也许你之前听说过前端组件代码可以运行在浏览器，运行在移动端 App 里面，甚至可以直接在各种设备当中，但你有没有见过: 前端组件直接跑在命令行窗口里面！"}, {"id": "6844903664155525127", "title": "H5唤起APP指南(附开源唤端库)", "desc": "前一段时间在做一些H5页面，需求中落地页占比较大，落地页承担的职责就是引流。引流有两种形式，同时也是我们对唤端的定义：引导已下载用户打开APP，引导未下载用户下载APP。 引导已下载用户打开APP，从数据上说用户停留在APP中的时间更多了，是在提高用户粘性；从体验上说，APP体…"}, {"id": "6991105821274964005", "title": "CSS 布局的本质是什么", "desc": "UI 发展史 自从图形界面操作系统问世以来，之上的应用软件基本都会绘制界面，这也是用户使用软件的接口，叫做 UI （user interface）。涉及到用户体验、设计、具体界面的开发，是软件中和用户"}, {"id": "6971260867300032525", "title": "XDM，JS如何函数式编程？看这就够了！（三）", "desc": "没错，本篇就是谈关于——组合函数。它是函数编程的重中之重。组合与声明式数据流是支撑函数式编程其他特性的最重要的工具之一！"}, {"id": "6952437673839558664", "title": "一份不可多得的TypeScript系统入门整理 | 创作者训练营第二期", "desc": "导语 在2017年，TypeScript 已经占领了前端非原生语言市场的主导地位。node 的后继者 deno 也是构建在 TypeScript 之上的。"}, {"id": "6998652205721419813", "title": "什么是状态管理工具?（vuex）", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 直接使用全局对象的问题 全局对象里面的数据是普通的JavaScript数据类型，它们不是响应式的，也就说第一次读取渲染有可能没有问题，但是"}, {"id": "6992398435055845384", "title": "h5白屏异常监控技术调研", "desc": "当你决定要做一件不太熟悉的事情，你会如何做技术调研？面对老板的需求，你会如何做技术选型？ 思考的童鞋可以进来看看，算是抛砖引玉了。"}, {"id": "6844904063570542599", "title": "这一次，彻底弄懂 Promise 原理", "desc": "Promise 必须为以下三种状态之一：等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）。一旦Promise 被 resolve 或 reject，不能再迁移至其他任何状态（即状态 immutable）。 Promise里的关键是要保证，the…"}, {"id": "6845166891393089544", "title": "前端登录，这一篇就够了", "desc": "登录是每个网站中都经常用到的一个功能，在页面上我们输入账号密码，敲一下回车键，就登录了，但这背后的登录原理你是否清楚呢？今天我们就来介绍几种常用的登录方式。 HTTP 是一种无状态的协议，客户端每次发送请求时，首先要和服务器端建立一个连接，在请求完成后又会断开这个连接。这种方式…"}, {"id": "7005019598210727972", "title": "代码输出", "desc": "异步&事件循环，一些事件循环题目，不定时更新，包含题目，promise, async/await,底部含有答案的连接"}, {"id": "7006210269345120293", "title": "js隐式类型转换", "desc": "六种类型 String 字符串 Number 数值 Boolean 布尔值 Null 空值 undefined 未定义 Object 对象 前五位为基本数据类型，Object为引用数据类型 1、首先来"}, {"id": "7001704315370864648", "title": "JavaScript 系列之异步编程（四）", "desc": "[JavaScript 系列之异步编程｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6934508023385849864", "title": "开发嵌入京东app h5| Hybrid | 微信小程序 ｜ 实践踩坑总结十六条", "desc": "笔者最近一直在开发京东app嵌入的h5项目和微信小程序商城项目，在此期间遇到很多坑。这篇文章主要是针对 h5| Hybrid | 微信小程序 三个方向来讲述我遇到的坑，以及详细讲解我是如何解决问题的。 一直以来，移动端适配就是一个令人头疼的问题。如果想要吃透移动端，还需要不少的…"}, {"id": "6924108426125508616", "title": "给 ES6 class 说句公道话", "desc": "最近知乎上有个探讨「ES6 为什么要加入 class？它是否是鸡肋？」的问题，这篇文章是对它的回答。这问题本身让我感到有些唏嘘，当初身为 ES6 最重磅新特性的 class 才几年就沦落到了路人眼中鸡肋的地步，前端社区的总路线动摇得实在太快了…… 不可否认，近年来的 class…"}, {"id": "6995710760928149535", "title": "你真的弄懂闭包了么？", "desc": "这是我参与 8 月更文挑战的第 4 天，活动详情查看： 8月更文挑战 MDN中的解释为：一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围"}, {"id": "6844904203110842376", "title": "[查缺补漏]再来100道JS输出题酸爽继续（共1.8W字）", "desc": "下面是我收集一些有趣的，易错的JS代码题，对JS基础知识点的考察都有所涉及，内容可能不全面，希望对大家有所帮助。 使用||运算符，我们可以返回第一个真值。 如果所有值都是假值，则返回最后一个值。 （false || {} || null）：空对象{}是一个真值。 这是第一个（也…"}, {"id": "6844903782229213197", "title": "2019 面试准备 - JS 原型与原型链", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 在本文中，…"}, {"id": "7004831818063020062", "title": "js面向对象编程", "desc": "对象 何为对象 对象是一组属性的无序集合，并且对象的每一个和属方法性都有一个名称来标识，这个名称映射到一个值上。 接下来来了解一下属性的类型，如何定义一个或多个属性，怎么样读取属性的特性，如何合并对象"}, {"id": "6960840387208577032", "title": "JavaScript 中 for in 和 for of 的区别", "desc": "for in 和 for of 的异同点 比较 for in for of 不同点 可以遍历普通对象 遍历出数组的原型对象 可以遍历出数组自身属性 遍历出来的值是 key 不可以遍历 map/set "}, {"id": "6945633593020383268", "title": "巧用 SVG 滤镜还能制作表情包？", "desc": "本文将介绍一些使用 SVG feTurbulence 滤镜实现的一些有趣、大胆的的动效。 刚好最近一直在学习 SVG，脑海中就把这个表情包的效果和 feTurbulence 滤镜关联了起来。 这里我们会用到 SVG 中的 feTurbulence 滤镜。再简单介绍下。 turb…"}, {"id": "6999914057771778056", "title": "Event Loop事件循环机制", "desc": "1. Event Loop是什么 Event Loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。 JavaScript"}, {"id": "6844903999183781895", "title": "栈、堆、队列深入理解，面试无忧", "desc": "Event Loop的执行栈、任务队列。 变量存储的堆、栈问题。 栈、队列数据结构的实现问题。 还有一些列相关的手写问题。 在面试中，经常问遇到与之相关的一些列问题哈。 栈 是一种遵循 后进先出（LIFO） 原则的有序集合。新添加和待删除的数据都保存在栈的同一端栈顶，另一端就是…"}, {"id": "6979878750250860575", "title": "第一次使ECharts | 总结30天更文的心路历程 ", "desc": "总结本来是我的强项，今天试着用Echarts来总结，思路有点凌乱了，不过没关系，新的东西就是要不断的接触~"}, {"id": "6844903878253608968", "title": "8 个有用的 JS 技巧", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 这些技巧可能大家大部分都用过了，如果用过就当作加深点映像，如果没有遇到过，就当作学会了几个技巧。 1. 确保数组值 使用 grid ，需要重新创建原始数据，并且每行的列长度可能不匹配， 为了确保不匹配行之间的长…"}, {"id": "6999438772139982856", "title": "【重温JS】巩固基础day23-前端也要了解一些数据库", "desc": "☆☆☆ 今天学习的内容: ( 数据库相关 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'! 加油! 认真对待!! day23"}, {"id": "6987903781992136712", "title": "如何跳出递归函数，不再执行？？？", "desc": "前几天看到一个面试题： 请实现一个 find 函数，功能等同于 document.getElementById"}, {"id": "6993649354250649631", "title": "js 数据结构 - 栈", "desc": "栈是一种线性表结构，基本上它只有两个操作：入栈和出栈。入栈（push）的意思是，将数据作为栈帧压入栈；出栈（pop）的意思是，去除栈顶的栈帧"}, {"id": "6951686918778126349", "title": "学习 JavaScript 从吃透变量提升开始", "desc": "JavaScript是web开发人员必须学习的一门语言， 想学好JavaScript，要先练好内功 ，只有内功深厚，我们才能走得更远。"}, {"id": "6995171561086910501", "title": "聊聊解构赋值的本质", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 今天我们来聊聊解构赋值 ES6的解构赋值本质上是属于一种“模式匹配”、“映射关系”；只要等号两边的模式相同，一一对应，左边的变量就会被赋予"}, {"id": "6997988483516104712", "title": "使用腾讯位置服务API完成车辆轨迹回放（模拟真实的速度和方向）", "desc": "产品需求： 根据能够回放出来车辆的运行轨迹路线、运行方向和速度。 需求分析： 1、首先因为是Web网页端的功能，所以需要用到的是地图模块的API，可以选择百度地图或者腾讯地图。 2、由于需要位置信息"}, {"id": "6844903831893966856", "title": "Cz工具集使用介绍 - 规范Git提交说明", "desc": "在多人协作的项目中，如果Git的提交说明精准，在后期协作以及Bug处理时会变得有据可查，项目的开发可以根据规范的提交说明快速生成开发日志，从而方便开发者或用户追踪项目的开发信息和功能特性。 这里提供演示项目地址：cz-example。 如果没有规范的提交说明，很难阐述当前代码的…"}, {"id": "7002589268996521998", "title": "诡异的JS知识", "desc": "在日常开发和学习中，我总能遇到一些奇怪的问题，所以记录了下来！一起来体会JS作用域、原型、语句、异步的奇特之处吧"}, {"id": "6844904162472247304", "title": "React组件逻辑复用的那些事儿（Mixins -> HOC+render props -> Hooks）", "desc": "基本每个开发者都需要考虑逻辑复用的问题，否则你的项目中将充斥着大量的重复代码。那么 React 是怎么复用组件逻辑的呢？本文将一一介绍 React 复用组件逻辑的几种方法，希望你读完之后能够有所收获。如果你对这些内容已经非常清楚，那么略过本文即可。 我已尽量对文中的代码和内容进…"}, {"id": "6964360374359752734", "title": "es6 超详细版(持续更新ing)", "desc": "let 与 const 箭头函数 数组与字符串新增的高级方法 模板字符串 解构赋值 三点拓展运算符 类..... es6你掌握了吗?"}, {"id": "6844903862009069575", "title": "如何实现一个下载进度条/播放进度条", "desc": "技术上没太大难度，有难度的地方是怎么让整个动画比较流畅。一个主要问题是动画的滞后性：当下载进度到某个点的时候，你再用250ms的动画过渡过去，这个时候已经慢了，所以很多人可能因为这个原因或者嫌麻烦，直接就不做动画了，在进度事件触发的时候直接更新进度条相应的位置，不过我们可以尝试…"}, {"id": "6927556136652668942", "title": "分析diff算法与虚拟dom（理解现代前端框架）", "desc": "直观来说，虚拟DOM其实就是用数据结构表示真实的DOM结构。使用它的原因是，频繁的操作DOM会使得网站的性能下降，为了保证性能，我们需要使得DOM的操作尽量精简，我们可以通过操作虚拟DOM的方法，去比较新旧节点的差异然后精确的获取最小的，最为必要的DOM集合，最终挂载到真实的D…"}, {"id": "7005464384143097892", "title": "执行上下文与作用域", "desc": "1 执行上下文 变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。 每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上"}, {"id": "6926801566699618312", "title": "🐮写给零基础的前端算法入门指南，acmer带女友刷80+【栈与队列与链表篇】｜牛气冲天新年征文", "desc": "之前的文章大部分都是写给女友系列，但有一段时间没有进行更新了，一方面春招要准备开始了，另一方面女友还在准备年前面试，面试之后的复盘总结是挺重要的。 好像越要到过年了，一些写作时间还多了起来，现在和大家分享一下我们是如何准备算法这一块的，正好春招即将开启，年前还能最后准备一下，希…"}, {"id": "6844903721483108366", "title": "三行代码实现 JS 柯里化", "desc": "最近有看到一些柯里化的文章，怎么说呢，感觉很奇怪。一篇是阿里云的译文，文章末尾给出了这样一个 \"curry\"： 在我们自己实现之前，对柯里化没什么概念的同学可以看下 wiki（要看英文 wiki，中文 wiki 对柯里化的解释写得又乱又不准确，容易和部分应用混淆），简单来说柯里…"}, {"id": "6844904184446189576", "title": "箭头函数与普通函数的区别？", "desc": "箭头函数是前端面试环节的一个高频考点，箭头函数是ES6的API，相信很多人都知道，因为它的语法比一般的函数更简洁，所以深受大家的喜爱。这是我们在日常开发中一直使用的API，但大多数同学对它的理解还不够，下面我们来详细了解下箭头函数的基本语法，以及箭头函数与普通函数的区别。 来定…"}, {"id": "6844903657515794446", "title": "小程序开发实践总结", "desc": "css样式不能引用本地图片资源，只能引用线上资源(background-image)，引用本地图片资源只能用<image>标签。 {{}}不能执行函数方法，{{}}只支持基本的简单运算和ES6拓展运算符。如价格格式化这种常用的处理，只能在js代码中处理好然后再模板中渲染。 可以…"}, {"id": "6994035006674829348", "title": "JavaScript知识点回顾（八）——闭包", "desc": "闭包是前端面试中的常考点，也是我们必须掌握和合理运用的点，今天就一起来学习下闭包吧。 什么是闭包？ 先来看看闭包的定义。"}, {"id": "6844903970029174791", "title": "[译] 什么将会替代 JavaScript 呢？", "desc": "有些编程语言很受欢迎。而有些只是被开发人员被迫接受。对于许多程序员来说，JavaScript 就是后者中的一个例子，每个前端开发人员都需要学习和理解这种语言，但是却没有人喜欢它。 十年前，JavaScript 还没有统治世界的迹象。其他的平台，像 Java，Flash 和 Si…"}, {"id": "7002186296969920526", "title": "js面向对象编程 tab切换案例", "desc": "步骤 自定义创建一个构造函数,把属性放在构造函数里面,将方法放在构造函数的原型对象里面(减少内存消耗) 通过构造函数创建一个实例化对象,然后通过实例对象调用构造函数里面的方法 总得来说，可以就是先按照"}, {"id": "6993972189976330271", "title": "求求你不要再用TypeScript的枚举类型了", "desc": "曾几何时，我也沉迷于 TypeScript 提供的枚举类型，有种高大上的感觉。但后来发现，其实枚举类型是「金玉其外，败絮其中」，请听我一一道来。"}, {"id": "6862321554686214158", "title": "一个较新的JavaScript API——ResizeObserver 的使用", "desc": "今天在看同事代码的时候看见这个API，出于好奇就去了解了一下。 众所周知window.resize事件能帮我们监听窗口大小的变化。但是reize事件会在一秒内触发将近60次，所以很容易在改变窗口大小时导致性能问题。换句话说，window.resize事件通常是浪费的，因为它会监…"}, {"id": "6844904137792962567", "title": "V8引擎详解（一）——概述", "desc": "在现有的javascript引擎中，V8引擎绝对是其中的佼佼者，chrome和node底层都使用了V8引擎，其中chrome的市场占有率已经达到70%，而node更是前端工程化以及扩展边界的核心支柱，V8引擎对于一个前端开发工程师来说重要程度可想而知。我们大部分javascri…"}, {"id": "6844903569317953543", "title": "深入JavaScript继承原理", "desc": "实现一个较为fancy的JavaScript继承方法。 此外，如果你完全明白了文末的终极版继承，你也就懂了这两篇所要讲的核心知识，同时，也能说明你拥有不错的JavaScript基础。 我们来回顾一下ES6 / TypeScript / ES5类的写法以作对比。首先，我们创建一个…"}, {"id": "6966080062168760327", "title": "React Native项目框架搭建的一些心得", "desc": "由easy to code到easy to read. 在整个项目中,定义了很多规范,是想在功能的实现之上,更利于项目人员的维护."}, {"id": "6844903565660520456", "title": "程序员的小浪漫----烟火", "desc": "烟花炸裂后微粒：自身位置（x, y），自身大小（size），自身速度（rate），最大烟花半径（radius）。 config：为全局变量，以及控制参数，包括画布宽高，设定烟花属性等。 此时烟花是这样的，感觉少了点小尾巴。 现在我们每一帧都是清除了画布，如果要加上小尾巴其实也很…"}, {"id": "6990532472279105572", "title": "刷完这几道堆题，可能还是手撕不了大厂面试", "desc": "前言 对于我与堆的渊源，那得从2年前说起，那时候我年少轻狂，意气风发，刚入前端之门就憧憬着1年打开大厂之门，3年P7 走上人生巅峰； 是他，那个男人，用那么的一道猥琐而又不失分寸的算法将我从云端拉回来"}, {"id": "6941678925542064158", "title": "知识分享：物理分辨率与逻辑分辨率？", "desc": "此时在单位空间内实际存在若干个像素点，但是我们只渲染一个，这样就出现了问题。 现在有一台PC，屏幕尺寸为24寸，分辨率是1920x1080，这就是它的硬件指标-物理分辨率，此时有一个软件开发商开发了一款软件，该软件固定像素横向以1920像素渲染、纵向以1080像素渲染，那么它就…"}, {"id": "6844903629573324807", "title": "GMTC 大前端时代前端监控的最佳实践", "desc": "本文为2018年6月21日，在北京举办的GMTC(全球大前端技术大会)，下午性能与监控专场，由阿里云前端监控团队前端技术专家彭伟春带来的演讲稿，现场反馈效果非常好，地上都坐了三圈，很多人反馈根本无法挤进去。先上现场照。 先做一个自我介绍，我叫彭伟春，英文名是Holden, 阿里…"}, {"id": "6844903651232710670", "title": "JS数组循环的性能和效率分析（for、while、forEach、map、for of）", "desc": "前端开发中经常涉及到数组的相关操作：去重、过滤、求和、数据二次处理等等。都需要我们对数组进行循环。为了满足各种需求，JS除了提供最简单的for循环，在ES6和后续版本中也新增的诸如：map、filter、some、reduce等实用的方法。因为各个方法作用不同，简单的对所有涉及…"}, {"id": "6904082229916336142", "title": "如何将前端代码写的优雅？", "desc": "作为一个前端工程师，令我最头疼的两件事，一个是逻辑混乱且没有注释的js代码，还有一个就是污染严重、命名奇葩的css样式了。 在项目开发中，扎实的基础和高超的技术水平固然重要，但是良好的编码风格也是不可或缺的一部分。开发一个业务或许只需要几天或者几个月的的时间，但项目在线上运行和…"}, {"id": "6953160272496295943", "title": "GoGoCode协助清理代码中的「垃圾」", "desc": "什么是「垃圾」代码? 权限管理场景中，我们经常会根据权限码的不同来调用不同的接口，或者展现不同的UI界面，以实现功能的灰度测试，在新功能稳定运行之后，全量开放。"}, {"id": "6983163968961380388", "title": "ES2021 新特性！", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我(全网同名)，解锁前端成长新姿势。 以下正文： 2021 年 6 月 22 日，第 121 届 Ecma 国际（Ecma Intern"}, {"id": "7002612028766421022", "title": "深入理解红宝书 ( 31 )", "desc": "第 6 章 集合引用类型 这是我参与8月更文挑战的第31天，活动详情查看： 8月更文挑战 6.1 Object 到目前为止，大多数引用值的示例使用的是 Object 类型。Object 是 ECMAS"}, {"id": "7003300118539534343", "title": "【JS基础】- 变量与函数提升", "desc": "目录 变量提升 函数提升 一 变量提升 demo 下面来看一道经典面试题： 输出的结果： 2. 函数提升 javascript中不仅仅是变量声明有提升的现象，函数的声明也是一样；具名函数的声明有两种方"}, {"id": "6993687015359250446", "title": "JS异步加载方案", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 我们知道渲染引擎遇到 script 标签会停下来，等加载并执行完该脚本，才继续向下渲染，这种传统js加载方式存在着明显的不足。当过多的js加"}, {"id": "6981408670609309704", "title": "每天学习10个实用Javascript代码片段（一）", "desc": "现代前端开发有大量的框架和代码库来帮助实现各种复杂的需求，导致让很多人认为前端开发很简单，如切页面、组框架、网页制作等等。一个前端工程师如果需要提升技能，必然要经历原生代码的编写"}, {"id": "6991325027870195726", "title": "详解JavaScript系列之数组(一)｜ 8月更文挑战", "desc": "数组的方法清单 涉及类型、真伪转换 方法 返回值 描述 Array.isArray() Boolean 判断是否为数组 toString() String 将数组转换为字符串 Array.from(a"}, {"id": "6968645960175976478", "title": "CSS 奇思妙想 | Single Div 绘图技巧", "desc": "经常能看到有关 CSS 绘图的文章，譬如使用纯 HTML + CSS 绘制一幅哆啦 A 梦图画。实现的方式就是通过堆叠 div，一步一步实现图画中的一块一块。这种技巧本身没有什么问题，但是就是少了一些"}, {"id": "7001883285345271845", "title": "深入事件环(In The Loop)", "desc": "事件环是js的重点与难点，本文通过大量图文演示来帮助同学们更加深入的理解事件环的基本原理。比起网上单纯讲原理概念的文章更加生动有趣。"}, {"id": "6999124279983865863", "title": "React状态  react state", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 # 什么是状态管理工具?（vuex） 单组件化抽离 demo： 组件化 tab切换 最后"}, {"id": "6978664826893500423", "title": "Js是怎样运行起来的？", "desc": "前言 不知道大家有没有想过这样一个问题，我们所写的 JavaScript 代码是怎样被计算机认识并且执行的呢？这中间的过程具体是怎样的呢？有的同学可能已经知道，Js 是通过 Js 引擎运行起来的，那么"}, {"id": "6999270301649338382", "title": "async/await 与 Generator 和 Promise 有啥关系 ？ | 8月更文挑战", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 前言 说到异步编程方法，熟知的可能有回调函数、Promise (ES6)、async/await (ES7)三种解决方案。而ES6除了提出P"}, {"id": "6909829331352125453", "title": "基于NW的H5桌面应用", "desc": "众所周知前端大多是基于命令行的cli工具，比如常见的脚手架工具，其实使用JS也可以编写很多具有UI界面的应用软件。 这里我要介绍的是nwjs，为什么介绍他，因为他用起来真的很简单，可以让你快速入门，火速开发出属于自己的桌面应用。 nwjs 是基于Chromium和Node.js…"}, {"id": "6997071223075143710", "title": "a==1 && a==2？ 看看ECMAScript规范里面自动类型转换都有啥！", "desc": "为何一个变量可以同时等于多个值呢？我们来看看 ECMAScript 规范是怎么说的，掀开js诡异行为的背后的面纱。"}, {"id": "6998840757784150023", "title": "JavaScript 系列之数组（三）", "desc": "[JavaScript 系列之数组｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "7004785044975779854", "title": "简单实现webpack mock中间件", "desc": "平时开发的时候，常常后端接口还未开发完毕，这样对于样式以及交互的调试会比较困难，使用webpack-dev-server可以实现中间件来进行mock数据，达到提前调试的目的。"}, {"id": "6967005714971639815", "title": "Javascript中经常被忽略的两个神奇操作符—— ?. 和 ??", "desc": "?.和??估计是Javascript两个最为有用并且最经常被忽略的操作符了。这两个操作符最大的作用，就是对于undefined和null的应对，在没有lodash等库的情况下，直接桶过Javascri"}, {"id": "6942262577460314143", "title": "手把手教你实现手绘风格图形🔵", "desc": "是不是有点蠢萌，本文的主要内容是带大家手动实现上面的图形，最终效果预览：http://lxqnsys.com/#/demo/handPaintedStyle。话不多说，代码见。 万物基于线段，所以先来看线段怎么画，仔细看上图会发现手绘版线段其实是用两根弯曲的线段组成的，曲线可以…"}, {"id": "6977316327421640741", "title": "ES6 中的 Symbol 是什么？", "desc": "symbol 是一种基本数据类型。Symbol() 函数会返回 symbol 类型的值，该类型具有静态属性和静态方法。"}, {"id": "6989231061238546468", "title": "前端必会-闭包", "desc": "面试的时候被问到闭包，一时间不知道从哪里说起？其实闭包只是js的一种特性，没有想象中那么可怕。快来看看小姐姐如何解释闭包的吧！"}, {"id": "6999884653083492365", "title": "husky实现git commit规范", "desc": "本文首发于[个人博客网址](https://www.kelen.cc)：[https://www.kelen.cc/posts/husky-commit-rule](https://www.kele"}, {"id": "6992589453550157838", "title": "生成Github JS 仓库的测试覆盖率徽标", "desc": "今天给我的开源项目popular-message增加了一下测试覆盖率的图标，覆盖率提高到了88%，不过这个覆盖率的图标还真不是直接放个图片链接这么简单，不过也难不到哪里去。"}, {"id": "7002437413440061447", "title": "浏览器的事件循环机制？看这一篇就够了", "desc": "面试中遇到的高频问题当然少不了浏览器的事件循环了，什么是浏览器的事件循环？什么是微任务宏任务？为什么要区分微任务宏任务？给你一段代码让你写出执行的先后顺序等。这篇文章带你捋清浏览器的事件循环"}, {"id": "6992098793722216462", "title": "你需要知道的javaScript的调试", "desc": "背景 在写代码的过程中，难免会出现一些问题，那么如何查找问题以及找到问题出现在什么地方至关重要。可能平常在开发过程中，大家可能并没有怎么在意调试代码，大部分都是通过console.log来打印日志进行"}, {"id": "6985313111666327559", "title": "该来的还是来了，盘点 ES12 中有新特性！", "desc": "今天主要介绍一下 ECMAScript 2021（ES12）的一部分的 JS 功能。 逻辑赋值操作符 数字分隔符(1_000) Promise.any 与 AggregateError String."}, {"id": "6998900371208798238", "title": "谈谈JavaScript中数组对象常用的方法", "desc": "如上篇文章所言，数组对象是特别常见的，所以一些数组对象的方法也需要经常复习才能做到温故而知新。所以今天我们就来谈一谈JavaScript中数组对象常用的方法。"}, {"id": "7002630835392217096", "title": "0-1 背包问题 - JavaScript 描述", "desc": "0-1 背包问题 1 贪心 假设一个背包可以装 100 kg 物品，我们有如下 5 种豆子，每种豆子的总量和总价值各不相同，为了让背包中所装的物品总价值最大，我们如何选择在背包中装哪些豆子，每种豆子该"}, {"id": "6844903641468403726", "title": "JS 中可以提升幸福度的小技巧", "desc": "1. 类型强制转换 可以使用双位操作符来替代正数的 Math.floor( )，替代负数的Math.ceil( )。双否定位操作符的优势在于它执行相同的操作运行速度更快。 如果variable1是真值就直接返回了，后面短路就不会被返回了，如果为假值，则会返回后面的foo。 如果…"}, {"id": "6992834425369133064", "title": "前端监控系统之接口监控", "desc": "前言 为什么要对接口进行监控 接口的性能监控在系统上我们可以在后端进行统计，但是在浏览器上发送请求时，可能会出现跨域问题，chrom也有自己"}, {"id": "6989755950974533640", "title": "javaScript 你不知道的运算符技巧  ", "desc": "这篇文章你可以学习到js的运算符到一些特性，还有一些实际的使用场景。如果觉得不错或者哪里可以补充的，可以评论留言"}, {"id": "6994330536239955981", "title": "从defineProperty 和 proxy 了解vue2和vue3的响应式原理", "desc": "说到响应式，大家肯定都有了解。这篇文章会带领我们从底层去了解vue的响应式实现原理，并手写一个注册响应式的方法。"}, {"id": "6988059848407515150", "title": "js引用类型引起的问题", "desc": "前言 背景 被问道的引用问题 1 一次会议问道的引用类型问题，同学想使用惰性加载，希望在网页中fetch得到的数据保存下了，如果某些不改变参数，就不在发起请求，前提是会对fetch返回的数据进行修改，"}, {"id": "6844903649605320711", "title": "CSS性能优化的8个技巧", "desc": "我们都知道对于网站来说，性能至关重要，CSS作为页面渲染和内容展现的重要环节，影响着用户对整个网站的第一体验。因此，与其相关的性能优化是不容忽视的。 对于性能优化我们常常在项目完成时才去考虑，经常被推迟到项目的末期，甚至到暴露出严重的性能问题时才进行性能优化，相信大多数人对此深…"}, {"id": "6974277933229670437", "title": "这个this的解析", "desc": "首先得理解this是在函数被调用的时候绑定的，完全取决于函数的调用位置。这与静态作用域相反，反而有点类似动态作用域，由运行时决定。 其次，就是我们常见的this指向问题，即this的绑定。"}, {"id": "6977685978420871181", "title": "前端 JavaScript 获取字符串中重复次数最多的字符", "desc": "想要保持自己的技术活力，最有效的手段就是通过不断地输入来提供足够的养分。我们也不必刻意追求高深的或者新鲜的知识点，通过对一个基础问题的全方位多维度解析，同样也会收获不小。"}, {"id": "6891820537736069134", "title": "函数式编程进阶：应用函子", "desc": "上一章中介绍了 Functor(函子) 的概念，简单来说，就是把一个 “value” 填装进 “Box” 中，继而可以使用 map 方法映射变换 Box 中的值：Box(1).map(x => x+1)。本章我们在继续在 Box 的基础上继续扩展其他更强大的理念，从纯函数与副作…"}, {"id": "6993109621393063967", "title": "手写一个简易bundler打包工具带你了解Webpack原理", "desc": "🥝序言 我们都知道， webpack 是一个打包工具。在我们对它进行配置之前，它也是经过一系列的代码编写，才生成的打包工具。那这背后，又做了"}, {"id": "6844904065223098381", "title": "【建议改成】读完这篇你还不懂Babel我给你寄口罩", "desc": "最近在学习webpack, 发现了webpack中一个重要的功能点babel-loader, 于是就想着学习了解一波Babel. 我们在做一件事, 学习一个知识点的时候, 都应该是抱有一个目的去做的. 在这一篇文章中我并没有介绍过于深入的内容, 但是如果把它当成一个入门Babe…"}, {"id": "6974330720994983950", "title": "聊一聊进行中的TC39提案（stage1/2/3）", "desc": "前言 最近看到了一些很有趣的ES提案，如Record与Tuple数据类型，思路来自RxJS的Observable，借鉴自函数式编程的throw Expressions"}, {"id": "6994617237793406990", "title": "【复盘plan(二)】前端八股文再来一遍🧐（图解 + 总结）", "desc": "前端八股文回顾，持续更新。秋招自取。。。 正文：js的数据类型、js的类型判断、js的类型转换、this的指向问题"}, {"id": "6844903566776205319", "title": "面试分享：专科半年经验面试阿里前端P6+总结(附面试真题及答案)", "desc": "年底由于种种原因想换一份工作，但由于太忙，没认真搞简历，也没怎么复习基础，导致很多本来会的都没敢往简历上写。于是写了一个简版的简历挂在Boss直聘上，准备年过完再认真筹备这件事情。 balabala....，好久没面试过，自我介绍居然显得很紧张，说了一些简历上没有的东西，比如之…"}, {"id": "6989036863440814087", "title": "从零开始写一个babel插件", "desc": "本文从整体上介绍babel插件的编写流程，方便对babel有个整体上的认识，通过提供示例代码方便大家进行效果测试，动手实践后，更加利于对于babel插件的进一步理解。"}, {"id": "6844903568130965517", "title": "2018 前端性能优化清单", "desc": "推荐大家时间充裕的话可以自己阅读英文原文，此文是根据掘金翻译的四篇文章 + 其他的翻译文章 + 自己翻译修改得出的。因为翻译大家懂得，会有一些错误的地方，欢迎大家指出，本人不保证翻译没有错误，但已经尽力去翻译了，所以欢迎大家直接阅读英文原文！！欢迎大家直接阅读英文原文！！欢迎大…"}, {"id": "6930817144040980488", "title": "JavaScript高级程序设计第四版总结（第1~4章）", "desc": "相信每一个前端开发者对这本书都不陌生，不管是用作入门、进阶还是全面深入，本书都可以作为首选教材。本书覆盖的知识点之全面，组织体系之完善，让不管是处于什么阶段的读者，都能收益良多。 JavaScript高级程序设计 从2006年出了第一版开始，就成为前端开发者最受欢迎的专业书籍之…"}, {"id": "6919023038688133127", "title": "[JS红宝书笔记]迭代器和生成器", "desc": "这一章节篇幅不长，但是很多关键定义非常重要，需要通过拆分理解和实例验证来更具体的了解这些定义。那么首先抛出本章核心： 顺序：迭代会在有序集合上进行，其中“有序”指集合中所有项都可以按照既定的顺序被遍历，特别是开始和结束项有明确的定义。（数组 arr 就是有序集合的最典型的例子）…"}, {"id": "6847902222978662407", "title": "记一次校招面试回忆，迟来的位运算符小解", "desc": "大家好呀，我是wangly19。时方七月，绿树荫凉夏日长。一篇JavaScript的位运算符文章送给大家，希望大家在工作上顺顺利利。如果觉得有帮助，不妨给我一个👍吧。 JavaScript位运算符是一个非常有意思的东西，这一次给大家分享位运算符主要是做一个位运算符的总结。也时…"}, {"id": "6989520234562453512", "title": "JavaScript 基础系列之数字与字符串（三）", "desc": "数字与字符串相加 JavaScript 的加法和级联（concatenation）都使用 + 运算符。 数字用加法。字符串用级联。 数字字符串运算 用 + 运算符对字符串进行了级联。 数字与非数字字符"}, {"id": "6844903810310078478", "title": "一人两年前端的自我总结", "desc": "作为两年的前端狗来说,我所会的还很少,所以我也无法在字里行间中给各位带来啥子的技术提升,这篇文章的目的也只是对我这两年的工作总结,我也只是在找一个答案而已. 有人会说,一个菜鸟学什么大牛写技术总结,是的😂,文章很多地方都存在问题和缺陷,这也是我为什么写出来的原因,所以还请大家…"}, {"id": "6844904164326129672", "title": "JSON数据归类的实现", "desc": "今天在写业务代码时，遇到了表格归类的一个需求，刚开始以为很简单，但是真正上手实现时，发现还是有一点点难度的。 本文将以上述问题为背景，讲解JSON数据归类的实现，欢迎各位感兴趣的开发者阅读本文。 如下图所示，需要将图一的表格转成图二的表格。 观察上图后我们发现，这个问题可以描述…"}, {"id": "6926186705472978958", "title": "对跨域的最后一战", "desc": "在前后端对接时，我们常常会遇到过ajax报出上图的错误，这就是典型跨域问题。 跨域是指绕过浏览器同源策略约束请求资源的方式。 同源策略是1995年由Netscape公司入浏览器的一种安全策略，主要防止XSS(跨站脚本攻击)、CSRF(跨站请求伪造) 等攻击。 同源的判断依据是协…"}, {"id": "6844903782380240904", "title": "Web Beacon 刷新/关闭页面之前发送请求", "desc": "有一个任务非常耗时会消耗后台大量算力，所以在退出页面的时候，要求前端这边发送一个请求来杀死任务。 一开始以为这个需求非常简单，就是在进入其他路由前，发送一下请求，杀死一下任务就好了。 然而在刷新页面的时候，beforeRouteLeave并不会执行，接着想到了下面这两个API.…"}, {"id": "6844903944196456456", "title": "让你成为灵魂画手的 JS 引擎：Zdog", "desc": "今天给大家推荐一个使用 JavaScript 语言编写的开源 Web 3D 模型项目 —— Zdog。 Tips: 本文出现的所有作品都是通过 Zdog 完成的。 圆形、扁平、设计师友好用于 canvas 和 SVG 的伪 3D 引擎。 使用 Zdog 您可以在 Web 上设计…"}, {"id": "6998402145225555976", "title": "arguments相关", "desc": "arguments的定义是对象，但是因为对象的属性是无序的，而arguments是用来存储实参的，是有顺序的，它具备和数组相同的访问性质及方式，并拥有数组长度属性length，所以arguments是"}, {"id": "6905345705640984583", "title": "js数组所有内置方法简述以及手动实现(二)", "desc": "因为有一次面试碰到了问有没有用过数组所有的内置方法？、是否清楚所有内置方法的参数和使用？当时并没有能全部答出来，所以决定从头理一篇所有的数组内置方法，并且自己实现一遍。主要是知识梳理，读者们也能从头梳理一遍。下面的方法尽量会全部自己实现，实在有困难的会google，然后注明出处…"}, {"id": "6844903512237670414", "title": "[译] JavaScript 如何工作：在 V8 引擎里 5 个优化代码的技巧", "desc": "几个星期前我们开始了一个旨在深入挖掘 JavaScript 以及它是如何工作的系列文章。我们通过了解它的底层构建以及它是怎么发挥作用的，可以帮助我们写出更好的代码与应用。 第一篇文章 主要关注引擎、运行时以及调用栈的概述。第二篇文章将会深入到 Google 的 JavaScri…"}, {"id": "6844904158781243400", "title": "小玩Promise的万花筒", "desc": "这里不讲仿写，主要讲自己的所得；最近又回顾了一下promise的实现；以及async-await，promise 串行，限流并行；妙哉妙哉。 不定时的回看，看完后有所思，有所得，多实践。才是最关键的。 对于 reject 的情况，可以每个 promise 兜底，也可以最后兜底。…"}, {"id": "6952686959596666911", "title": "JavaScript基础—循环", "desc": "1 - 循环1.1 for循环语法结构名称作用初始化变量通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。条件表达式用于确定每一次循环是否能被执行。如"}, {"id": "6844903641699057671", "title": "手把手教你用vue搭建个人站", "desc": "其实一个最简单的个人站，就是许多的HTML页面，你只要可以用HTML写出来就可以，然后挂到Github pages上。但这并不是我想要的。 也有许多的人会选择用Vuepress，Hexo，Wordpress，Jekyll等等这样的博客框架来搭建自己的博客，我也都尝试过，有很多的…"}, {"id": "6916742628746723336", "title": "【LeetCode】盛最多水的容器（JS实现）", "desc": "问题给你n个非负整数a1，a2，...，an，每个数代表坐标中的一个点(i,ai)。在坐标内画n条垂直线，垂直线i的两个端点分别为(i,ai)和(i,0)。找出其中的两条线，使得它们与x轴共同构成的容"}, {"id": "6844903621599952909", "title": "html5录音支持pc和Android、ios部分浏览器，微信也是支持的，JavaScript getUserMedia", "desc": "以前准备做一个网页版聊天界面，表情啊、图片啊、上传文件啊都应该要有，视频就算了，语音还是要的。 如是，就有了这个轮子。 在线测试，支持大部分已实现getUserMedia的移动端、PC端浏览器，包括腾讯Android X5内核(QQ、微信)。点此查看浏览器支持情况。 录音默认输…"}, {"id": "6844903625467265032", "title": "微信公众号-- 微信分享功能（分享到朋友和朋友圈显示图片和简介）", "desc": "并没有什么效果，原因：微信对自定义分享内容作了限制，最终还是要依靠配置wx.config。"}, {"id": "6987561008541728804", "title": "cornerstoneTool.js使用记录三", "desc": "Annotation 这是用来绘制一些辅助工具、测试、备注等。cornerstoneTools.addTool第二个参数是可有可无的，要配置初始化个性时可使用。"}, {"id": "6844903697743347719", "title": "让react用起来更得心应手——（react-router原理简析）", "desc": "前台路由:页面的显示由前台js控制，在url的路径中输入哈希值是不会往后台发送请求的，所以前台可以通过将哈希和页面进行映射从而控制渲染显示哪个页面。 但是这种方法有一个问题，如果再按一次回车键，它是会向后台发送请求的，如果后台路由没有相应的匹配，那么会报404的错误，一般需要后…"}, {"id": "7005744715144364046", "title": "2021年VS Code主题推荐", "desc": "一个好的工作环境，离不开一个好的生产力工具（高配电脑）、一个高分辨率显示器（27 寸 4 K）、一个人体工学椅和一套优良的键鼠。 当然说完了硬件，我们的软件也要用的舒服。 这篇文章给大伙推荐一波我最喜"}, {"id": "7000919400249294862", "title": "16个工程必备的JavaScript代码片段（建议添加到项目中）", "desc": "“这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战” 1. 下载一个excel文档 同时适用于word,ppt等浏览器不会默认执行预览的文档,也可以用于下载后端接口返回的流数据，见3 2."}, {"id": "6995334897065787422", "title": "基础很好？总结了38个ES6-ES12的开发技巧，倒要看看你能拿几分？🐶", "desc": "大家好，我是林三心，这段时间很多兄弟姐妹都来问我问题，我也看过很多他们的代码。给我的感觉就是，代码的使用还停留在了ES5的那个阶段，很多用新语法就能轻松实现的，却都不怎么了解，所以我就打算写一篇文章，"}, {"id": "7007994748669526046", "title": "JS 事件循环机制", "desc": "1 事件循环机制 因为js 是单线程的，如果有两个线程对DOM的操作有冲突的，为了解决阻塞的情况，所以有一个event loop 机制。 当javascript代码执行的时候会将不同的变量存于内存中的"}, {"id": "7007769377466482724", "title": "JavaScript 类型查看的方法", "desc": "内置类型 javaScript有七种类型： 空值（null） 未定义（undefined） 布尔值）（boolean） 数字（number） 字符串（string） 对象（object） 符号（sym"}, {"id": "7007725055287230471", "title": "如何开发一个组件库", "desc": "项目结构 实现组件 1、安装依赖 2、编写 button 组件 3、编写 hello 组件 4、导出组件 使用 parcel 运行项目 1、安装依赖 2、创建 .babelrc 文件 3、创建入口文件"}, {"id": "7007715305443033096", "title": "从0到1设计开发Chrome插件", "desc": "一、场景 之前一直在公司业务上做H5开发，发现项目的繁琐点不在某一个具体的业务逻辑，而是无数个已经上线或者下线亦或是反反复复上上下下的AB测。"}, {"id": "6997186741866070023", "title": "【利器篇】前端40+精选VSCode插件，总有几个你未拥有！", "desc": "工欲善其事，必先利其器！ VSCode作为前端开发的重要工具，其插件能大幅提升战斗力，精心收集40+插件，总有几款你还未曾拥有。"}, {"id": "7007779533185089544", "title": "ES6新特性", "desc": "数据结构 Map 和 Set 跟数组和对象一样,map和set也是javascript的复杂数据结构 Map Map和Object一样,都是带有键的数据集合,跟Object最大的区别就是Map的键可以"}, {"id": "7002248038529892383", "title": "林三心花了3小时实现了这30个JS原生方法，我看看谁比我短！！！", "desc": "前言 大家好，我是林三心，大家也知道，本菜鸟平时写基础文章比较多，我始终坚信两句话 用最通俗易懂的话，讲最难的知识点 基础是进阶的前提 实际开发中，或许咱们会使用很多JavaScript自带的方法，而"}, {"id": "7006966254158217253", "title": "中秋节快乐 大家快来《在线博饼》", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 中秋佳节即将到来，除了赏月、恰月饼、吃团圆饭，我们这还有博饼的习俗。这篇文章教大家来实现一个博饼小项目"}, {"id": "6994959998283907102", "title": "15张图，20分钟吃透Diff算法核心原理，我说的！！！", "desc": "前言 大家好，我是林三心，在日常面试中，Diff算法都是绕不过去的一道坎，用最通俗的话，讲最难的知识点一直是我写文章的宗旨，今天我就用通俗的方式来讲解一下Diff算法吧？Lets Go 什么是虚拟DO"}, {"id": "7002746459456176158", "title": "电商最小存货 - SKU 和 算法实现", "desc": "前言 目前电商平台的业务中，只要有商品，不可避免的会遇到 SKU 方面功能。这篇文章就从理论到实践，从商品创建到商品购买，手把手带你实现 SKU 相关的“核心算法”。 让我们看看实际场景： 有了上图规"}, {"id": "7007766183864696839", "title": "吃透JavaScript核心——数组", "desc": "什么是数组 创建数组 利用new创建数组 利用数组字面量[]创建数组 获取数组中的元素 数组名[索引号] 遍历数组 数组长度 数组名.length 动态检测数组元素个数 数组中新增元素 修改lengt"}, {"id": "6999391770672889893", "title": "8个工程必备的JavaScript代码片段（建议添加到项目中）", "desc": "“这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战” 8个工程必备的JavaScript代码片段，听过这样起博客标题可以提高阅读量。😀 最近写博客好累，让8月征文活动搞的，今天水一篇好了，"}, {"id": "7007672895438913567", "title": " 热爱函数式的你，句句纯正的 Haskell【表达式篇】", "desc": "本篇关注 Haskell 中表达式是怎样写的，运算符怎样用的，并与 JavaScript 比较差异，感受下函数计算的思想，花个三、五分钟阅览一遍还是阔以~~"}, {"id": "6997943192851054606", "title": "Vue 3.2 发布了，那尤雨溪是怎么发布 Vue.js 的？", "desc": "1. 熟悉 vuejs 发布流程 2. 学会调试 nodejs 代码 3. 动手优化公司项目发布流程"}, {"id": "7005342465532100644", "title": "百万PV商城实践系列 -\b团队接口请求封装实践", "desc": "简介 本篇文章是商城实践系列的第三篇文章，主要为大家带来在项目开发时对接口请求的一些配置，以及接口映射是如何去做的。"}, {"id": "7007767634691227684", "title": "JavaScript 系列 -- 变量提升和函数提升详解", "desc": "前言 预编译后，变量 / 函数会被提升，变量 / 函数被提升过后，JS 引擎先对提升上来的所有对象统一执行一遍声明步骤，然后再对变量执行一次赋值步骤 变量提升 例子 1 预编译 例子 2 预编译 如果"}, {"id": "7000610903615864869", "title": "连夜爆肝只为将它送到你的面前，写给初级前端快速转TypeScript指南", "desc": "哈喽，今天给大家带来的是TypeScript教程，希望看完本文你有不一样的收获，谢谢支持，欢迎来踩。"}, {"id": "6998335494664749087", "title": "深入解析基于 Flutter 的 Web 渲染引擎「北海 Kraken 」技术原理", "desc": "从技术角度深入解析如何基于 Flutter 开发一个 Web 渲染引擎，以及北海的一些重要技术特性的原理。"}, {"id": "6992167223523541023", "title": "彻底搞懂JavaScript事件循环 ", "desc": "1. 异步执行原理 （1）单线程的JavaScript 我们知道，JavaScript是一种单线程语言，它主要用来与用户互动，以及操作DOM。 JavaScript 有同步和异步的概念，这就解决了代码"}, {"id": "6970845778713509919", "title": "「React进阶」漫谈React异步组件前世与今生", "desc": "一 前言 今天我们聊一聊React中的异步组件的现况和未来，异步组件很可能是未来从数据交互到UI展示一种流畅的技术方案，所以既然要吃透React，进阶React，就有必要搞懂异步组件。 老规矩，我们还"}, {"id": "7000695428677107749", "title": "JavaScript事件处理程序", "desc": "事件处理程序 事件就是用户或者浏览器执行的某种操作。我们常用的点击，滚动视口，鼠标滑动都是事件，为响应事件而调用的函数被称为事件处理程序。"}, {"id": "7001007956502249485", "title": "技术周报 · 2021-08-27", "desc": "小编推荐 现代 Web 开发者问卷调查报告 基于 OpenFaaS 的函数服务实践 Code Review 质量思考：阶段化评审 开发实践 光速入门 VSCode 插件开发 奇技淫巧之当你不得不 de"}, {"id": "6991630925792542750", "title": "学习 Webpack5 之路（基础篇）", "desc": "本文从 webpack 是什么、为什么选择 webpack、webpack的基本概念介绍 3个角度进行讲述，从 Webpack 基础着手，和你一起了解 webpack。"}, {"id": "6844904170538041351", "title": "前22年的Loser，后4年和自己赛跑的人 | 最惨前端面经", "desc": "前东家部门是做旅游的，在这次疫情打击下，基本玩完。 于是我半休半远程三个月后，在4月底领了裁员便当。至今，差不多找了两个月的工作。 本篇不是标准的面经，想从中获取大厂跳槽经验的可以歇一歇。 更多的是想讲一下绝大多数如你如我，学历渣技术差，没大厂经验的前端如何走。 1. Offe…"}, {"id": "7004350348827885581", "title": "web前端从零入门到实战（3万字长文）", "desc": "web前端入门到实战是为零基础的小伙伴们（有基础当然更好啦~）量身定制的前端学习教程。通过本教程的学习，小伙伴们可以系统掌握一套web前端开发体系，满足日常开发需要，并且具备系统地分析..."}, {"id": "6999254525861167134", "title": "『面试的底气』—— 设计模式之装饰者模式（一）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6998409477124800526", "title": "Web前端的WebRTC攻略：NAT穿越与ICE", "desc": "WebRTC 进行端对端进行实时音视频通讯时，常常一方或者双方都是隐藏在 NAT 之后的内网地址。ICE 则用于寻找一条传输数据通道连接。本文介绍了 NAT 穿越和 ICE 框架的基础知识和主要步骤。"}, {"id": "7002131643326529572", "title": "(三)：Canvas动画🔥上——动画原理及匀速、变速运动（大量示例及代码）", "desc": "动画帧，将一系列离散的图像以极快的速度连续播放，从而模拟物体运动或变化。帧率保持在每秒24帧，人脑就会将其看做运动。而且人眼无法识别更高频率的帧..."}, {"id": "7005504075303223304", "title": "JavaScript  Genrator 生成器", "desc": "generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次。执行 Generator 函数会返回一个迭代器对象。"}, {"id": "7000555758542651405", "title": "深入理解DOM如何脚本化CSS", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前言 我们知道DOM部分其实就是浏览器各大厂商提供的一些列方法和属性的集合，这一系列的属性和方法也被称为接口，这些接口可以让我们更加方便的"}, {"id": "6844903577220349959", "title": "前端面试考点多？看这些文章就够了（2019年6月更新版）", "desc": "金三银四跳槽季，offer快到碗里来，前端面试考点众多，而网上各个知识点的博客文章又太多，看的眼花缭乱……所以便整理了一下常见知识点的精华文章，每个知识点的文章控制在3篇以内，尽量覆盖该知识点的下容易被面试到的所有内容，文章都是之前自己读过的，确定是精华干货。文章会一直更新，也…"}, {"id": "6964141635856760868", "title": "Vue 源码解读（12）—— patch", "desc": "深入理解 Vue 的 patch 阶段，理解其 diff 算法的原理 ..............."}, {"id": "6844903815053852685", "title": "【面试篇】寒冬求职季之你必须要懂的原生JS(上)", "desc": "互联网寒冬之际，各大公司都缩减了HC，甚至是采取了“裁员”措施，在这样的大环境之下，想要获得一份更好的工作，必然需要付出更多的努力。 一年前，也许你搞清楚闭包，this，原型链，就能获得认可。但是现在，很显然是不行了。本文梳理出了一些面试中有一定难度的高频原生JS问题，部分知识…"}, {"id": "7005881016753586189", "title": "LeetCode第19天🐱‍🏍", "desc": "11. 盛最多水的容器 双指针，数组第一项和最后一项为初始边界，当左边界小于右边界时，将下一次的左边界右移，反之右边界左移。 25. K 个一组翻转链表"}, {"id": "6991628964573741093", "title": "我的掘金前端周刊 第六周 7月26日-8月1日 ｜ 8月更文挑战", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。欢迎关我的掘金前端周刊专栏。"}, {"id": "6997615197498114085", "title": "图片在点击之后！", "desc": "在前端性能优化的话题中，我们经常能够看见，图像延迟加载。在延迟加载的情况下，只有用户向下滚动，知道出现在用户眼前，图片才开始加载。在面对大量图片的情况下，极大的提高了页面的加载速度。"}, {"id": "6994000994300330021", "title": "谈谈JS中new的原理与实现", "desc": "使用new [constructor]的方式来创建一个对象实例，但构造函数的差异会导致创建的实例不同。"}, {"id": "6844904196475486221", "title": "让你秒懂四种设计模式！", "desc": "0. 回顾过去 说实话，这标题有点儿 uc小编 的味道了。虽然真正的大佬已经对设计模式烂熟于胸，只希望我的学习记录能帮助到部分同学就足够了。经过我下面的介绍，你可以在极短的时间，了解并知道如何使用他们。 每一种设计模式都是前辈们总结多年的经验，实属精华。尽管我不能完全出神入化的…"}, {"id": "6984823298685304863", "title": "数组常用方法", "desc": "数组常用方法 1. 方法是否改变原数组 2. 查找元素和索引 3. 遍历 4. 插入与弹出 5. 其他常用方法 6. 常见问题"}, {"id": "6844903833571688462", "title": "V8 是怎么跑起来的 —— V8 中的对象表示", "desc": "V8，可能是前端开发人员熟悉而又陌生的领域。 当你看到这篇文章时，它已经迭代了三版了。目的只有一个，在保证尽可能准确的前提下，用更直观的方式呈现出来，让大家更加容易接受。本文不需要太多的预备知识，只需要你对 JavaScript 对象有基本的了解。 为了让文章不那么枯燥，也为了…"}, {"id": "6844903637089533966", "title": "RxJS教程", "desc": "Observable（可观察对象）： 表示一个概念，这个概念是一个可调用的未来值或事件的集合。 Observer（观察者）： 一个回调函数的集合，它知道如何去监听由Observable提供的值。 **Subscription（订阅）：**表示Observable的执行，它主要用…"}, {"id": "6844903710426923021", "title": "零门槛的全栈体验 小程序云开发完整项目分享", "desc": "小程序云开发发布有一段时间了，最近着手做了一个基于云开发的小程序项目--仿《微博鲜知》，来自新浪的这款全新风格的小程序虽然界面非常简约清新，但是内部还是内藏了很多玄机，在实现的路上遇上了不少坎坷，在这里分享给大家。希望给大家提供一些思路。 开发一个完整的小程序时，我们应该先分析…"}, {"id": "6998884349881876517", "title": "【Magic JavaScript】函数编程，你真的会用了吗？", "desc": "函数是一等公民，函数可以出现在任何它想出现的地方，函数可以完成任何它想完成的功能。我们来一起学习一下 函数式编程(FP) 的相关知识。"}, {"id": "6995849832933883934", "title": "ES 新特性与 TypeScript、JS 性能优化", "desc": "ES2015+的新特性：Proxy、Symbol、class等介绍；Typescript基础介绍和使用；GC得常见算法：引用计数、标记清除、标记整理、V8引擎等介绍"}, {"id": "6999054543480684581", "title": "Js中数组的常用方法(含ES6)", "desc": "1. concat()，不改变原数组 2. join()，不改变原数组 3. push() & unshift() 添加元素操作，改变了原数组 4. pop() & shift() 删除元素操作，改变"}, {"id": "6991287843377119268", "title": "nuxt.js 踩坑之旅", "desc": "第一个：屏幕适配问题 对应的设计稿是以 1920px 为主的 下载flexible.js 下载postcss-px2rem 配置nuxt.cofig.js 在head里加上 在build里加上 第二点"}, {"id": "6993128787365855240", "title": "js性能优化-各种GC、新老生代GC、性能优化code tips", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 ->去往我的博客原文 前情提要 内存管理 内存：由可读写单元组成，表示一片可操作的空间 管理：人为的去操作一片空间的申请、使用和释放 内存管"}, {"id": "6844903647915016199", "title": "[译文] 初学者应该了解的数据结构： Graph", "desc": "在这篇文章中，我们将要探索非线性的数据结构：图，将涵盖它的基本概念及其典型的应用。 你很可能在不同的应用中接触到图（或树）。比如你想知道从家出发怎么去公司最近，就可以利用图的（寻路）算法来得到答案！我们将探讨上述场景与其他有趣的情况。 在上一篇文章中，我们探讨了线性的数据结构，…"}, {"id": "6994227243463475231", "title": "前端性能优化，GC、V8快快GET一下", "desc": "性能优化介绍 性能优化是不可避免的 哪些内容可以看做是性能优化 无处不在的性能优化 内存管理 内存为什么需要管理 内存管理介绍"}, {"id": "6964572136564490254", "title": "Three.js大模型优化分片加载", "desc": "背景 ​ 由于公司业务的持续发展，模型的体积从几十兆变成几百兆又逐渐增加到上G，同样，请求速度和加载速度也从几秒钟变成几分钟。作为一个急性子，加载loading页面这么久，这不能忍，这绝对不能忍。因此"}, {"id": "6994053451143446564", "title": "深入理解红宝书(8)", "desc": "今天主要讲解一元运算符和布尔运算符,其中布尔运算符在所有的程序员中用到的比例都是最高的.在我们的一些面试中,布尔运算的判也是经常会出现,所以新入门的同学一定要认真敲一遍代码,记清楚,别迷糊."}, {"id": "6969054720639893540", "title": "30行代码实现合并指定目录下的所有文件的内容", "desc": "指导老师叫把所有的源代码放论文附录 ，这么多文件，手动CV是不可能手动CV的，写个脚本实现合并指定目录下的所有文件的内容"}, {"id": "6991645042695733285", "title": "3D标签旋转球，前端可以上大屏的效果", "desc": "这个是个旋转球3D效果的 标签样式如上 静态图看不出效果哈，等会自己copy代码去试试， 不做动态图了。 实现 实现也不难 准备个HTML"}, {"id": "6844903972646420488", "title": "一文理解 this、call、apply、bind", "desc": "当时对this的内部原理什么的都理解的不是很深刻，就只能凭借遇到很多坑之后，总结了出了那时候自己用来判断的标准。这里会再次略微深入的说一下。思路还是围绕上面总结的那两句话。 位置①，obj.foo()，是obj通过.运算符调用了 foo()，所以指向的值 obj。 位置②，是把…"}, {"id": "6844903913880027150", "title": "使用 React Hooks + Context 打造简版 Redux", "desc": "React Hooks 在 React@16.8 版本正式发布。我最近在一两个公司的内部项目中也开始用起来尝尝鲜。 不了解 Hooks 的同学先撸一遍文档。本文不对 Hooks 做详细介绍，只阐述一种使用 Hooks 的思路。 一般我们写 React 如果不是特别大的应用，前后…"}, {"id": "6967223362019917838", "title": "从零开始学习ThingJS之创建App对象", "desc": "1、 创建App 2、 加载场景 3、 加载地图 在数字孪生可视化行业，搭建模型以及3D场景都是让人头疼的事，但是有一个平台解决了这些难题，它就是ThingJS。作为面向物联网的3D可视化开发平台其特"}, {"id": "6983668043557634062", "title": "JS基础之new和instanceof", "desc": "1.new运算符 1.new操作符的执行过程 1.创建一个空的JavaScript对象（{}）。 2.链接该对象的constructor到另一个对象。 3.将步骤1创建的对象作为this上下文。"}, {"id": "6987702694915866655", "title": "JavaScript 函数（一）", "desc": "在 JS 中，函数不是数据类型，它属于 object 对象，是一种特殊的对象。 函数的声明 1. 具名函数 function命令声明的代码区块，就是一个函数。 2. 匿名函数 具名函数去掉函数名，就是"}, {"id": "6858620181448097800", "title": "一文带你搞懂Javascript里的原型和继承", "desc": "最近两周面试了将近30个人，其中绝大部分都是有3年以上的前端工作经验，但是很多人对js的原型和继承的概念都搞不懂，更不用说更深层次的问题了。这也是我写这篇文章的原因吧，同时也是有必要自己做一个知识总结。 ES6为我们带来了定义类的keyword class，但这只不过是给程序员…"}, {"id": "6956376456364556325", "title": "10 分钟掌握浏览器运行 JS 的顺序", "desc": "前言 不知道你有没有遇到过类似这样的问题，某些代码乱序执行或样式的更改后不生效？你是不是曾经把代码包在 setTimeout 里面来解决类似的问题？是不是这种方式不太可靠？然后你就不断调试…"}, {"id": "6844903533905461262", "title": "JS写的一个抽奖小Demo从普通写法到设计模式再向ES6的进阶路程", "desc": "这款抽奖小Demo拥有类似现实中转盘抽奖的效果，会在最后慢慢停止。 1. 整体目录 2. HTML结构 这里有一点需注意，因为每个格子是通过CSS整体进行30°旋转，所以1号格子想要在0°的话需要放到最后一个。 3. CSS样式 然后每个 li 设置成上三角形的样式。ul进行溢…"}, {"id": "6986617501274603533", "title": "异步与回调", "desc": "一、异步和同步 同步：如果能直接拿到结果，则为同步 eg:在医院挂号，要拿到号才能离开窗口，不拿到结果不会离开 异步：不能直接拿到结果 eg:在餐厅门口等位，拿到号可以去逛街，每10分钟去餐厅问一下（"}, {"id": "6996303959740645406", "title": "前端常用的函数封装js篇（五）", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 阻止事件冒泡 适用场景：一个按钮绑定了一个click事件同时它的父元素中也有绑定click事件，这时点击触发了按钮的click事件会出现冒"}, {"id": "6844904161583054855", "title": "精读《@umijs/use-request》源码", "desc": "与组件生命周期绑定的 Utils 非常适合基于 React Hooks 来做，比如可以将 “发请求” 这个功能与组件生命周期绑定，实现一些便捷的功能。 这次以 @umijs/use-request 为例子，分析其功能思路与源码。 默认自动请求：在组件初次加载时自动触发请求函数，…"}, {"id": "6844903519594643464", "title": "【译】JavaScript 权威面试指南", "desc": "根据 Stack Overflow 的调查，JavaScript 自2014年以来就成为了最受欢迎的编程语言。也难怪超过三分之一的开发人员工作都需要了解一些 JavaScript 的知识。所以，如果你打算在不久的将来从事开发工作，你多少都应该熟悉一下这种非常流行的语言。 这篇文…"}, {"id": "6844904179568230414", "title": "DD每周前端七题详解-第二期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6992579303070236709", "title": "腾讯地图JavaScript API的使用，并实现打卡功能", "desc": "教给大家如何使用JavaScript API进行基于LBS的基础开发：在地图上标记位置。提供服务有高德地图、百度地图和腾讯地图，腾讯地图官网上的JavaScript API已升级了"}, {"id": "6999570033814798366", "title": "在 script 标签上使用 defer 和 async 的区别", "desc": "script标签存在两个属性，defer和async，因此script标签的使用分为三种情况： 没有defer或async属性，浏览器会立即加载并执行相应的脚本。也就是说在渲染script标签之后的文"}, {"id": "6996571715010560036", "title": "【JS从入门到精通】18-定时调用与延时调用", "desc": "[TOC] 定时调用与延时调用 1、定时调用 JS 的程序的执行速度是非常非常快的如果希望一段程序，可以每间隔一段时间执行一次，可以使用定时调用 setInterval() 定时调用，可以将一个函数，"}, {"id": "6991839175028768775", "title": "创建自己的async和await｜8月更文挑战", "desc": "async和await关键字，其背后的原理其实就是基于生成器和promise实现的。当然我们可以打造自己的async 和 await 来更深入地理解、学习这两个关键字。"}, {"id": "6921686794987634695", "title": "看完这篇 “原型” & “this”，就两字“通透了”", "desc": "今天想跟大家分享一个比较 \"别扭\" 的概念： “原型 &#x26; this” 。 想把这玩意儿给说清楚，大多都会感到头大。用的时候也会遇到些尴尬的场景。就很难去整明白，这到底是个啥。 这一期，就试着将这 说个清楚，讲个明白。开始~ 什么是 原型 ？带着这个问题往下看。 首先说…"}, {"id": "6932762351108096007", "title": "知道这两个 DOM 属性区别的，头发应该不多了吧？", "desc": "你可能知道，获取和设置 DOM 元素内部文本可以用这两个属性：Node.textContent 和 Element.innerText。 乍一看，它们似乎做着完全相同的事情，但它们之间有一些微妙但重要的区别。今天，我们来看看它们的作用，以及它们的异同之处。 废话不说，直接看代码…"}, {"id": "6881875371826872327", "title": "JavaScript引擎的基本原理", "desc": "作为 JavaScript 开发人员，深入了解 JavaScript 引擎的工作原理有助于你了解自己代码的性能特征。这篇文章对所有 JavaScript 引擎中常见的一些关键基础知识进行了介绍，不仅仅局限于 V8 引擎。 这一切都要从你写的 JavaScript 代码开始。Ja…"}, {"id": "6996500961921335304", "title": "【JS从入门到精通】17-BOM", "desc": "[TOC] BOM 1、BOM BOM：浏览器对象模型 BOM 可以使我们通过 JS 来操作浏览器 在 BOM 中为我们提供了一组对象，用来完成对浏览器的操作 BOM 对象 Window 代表的是整个"}, {"id": "6981712212310097927", "title": "浅谈JavaScript 事件循环（Event loop）", "desc": "这是我参与新手入门的第1篇文章 事件循环概念 JavaScript 事件循环（Event loop）是JavaScript的执行机制。 分为浏览器事件循环机制和 Node 事件循环机制。本篇文章浅谈"}, {"id": "6994073570015985672", "title": "JS注意事项 ｜ 8月更文挑战", "desc": "1，JS循环 1，遍历数组，20年前JavaScript刚萌生的时候，实现遍历的方法： 自ES5发布之后，可以使用内建方法：forEach 这样写的缺点是：不能使用break语句，也不能使用retur"}, {"id": "6844903576972574734", "title": "用CSS实现Tab页切换效果", "desc": "最近切一个页面的时候涉及到了一个tab切换的部分，因为不想用js想着能不能用纯CSS的选择器来实现切换效果。搜了一下大致有下面三种写法。 缺点：因为锚点会将选中的元素滚动到页面最上面，每次切换位置都要移动，体验极差。 经过实验发现第三种方法达到的效果最好。所以下面讲一下第三种实…"}, {"id": "6844903686376816647", "title": "小程序即时通讯demo", "desc": "大家可以自行下载，按照提示运行，就能看到效果；现在只是做了要给基本版的，要做复杂功能，可以继续添加。"}, {"id": "6922406119809908743", "title": "整理一下JavaScript中的数组方法reduce的学习知识", "desc": "介绍这么一看似乎看起来很懵，我也是这样然后就有了下面的学习记录基本使用多一个参数画个图理解一下理解不如手写自己简写的MDN的Polyfill简单应用扁平化数组组合函数reudxapplyMiddlew"}, {"id": "6896474141227450376", "title": "普通下载 && Vue文件图片下载处理", "desc": "一般的下载,也就a标签加个链接地址,标签内加个download属性. 当地址是后端提供时:可通过创建a标签, 随即给a便签附下载链接,文件名和属性, 最后再创建点击效果,最后清楚生成的a标签. 再则是图片地址提供:可以通过Base64加canvas,对图片的下载可以进行处理. …"}, {"id": "6844904126195695624", "title": "为什么能快乐的在 esm 中使用 cjs 模块", "desc": "对于我们现在的 web 开发项目中，我们快乐的使用着 export/import 来进行模块化开发。好像一切原本就这么简单~ 但是我们也知道， esm 是es6 才在规范中引入。在此之前 js 语言规范中并没有模块化一说（当然，以前 web 也没有那么复杂）。 cjs 就是在没…"}, {"id": "6859879886794981389", "title": "前端工程师的 LeetCode 之旅 -- 周赛 201", "desc": "给你一个由大小写英文字母组成的字符串 s 。 s[i] 是小写字符，但 s[i + 1] 是相同的大写字符；反之亦然 。 请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。 请返回整理好的 字符串 。题目保证在给出的约束条…"}, {"id": "6844903519493816334", "title": "你不知道的前端SDK开发技巧", "desc": "最近在做公司内部的一个的一个SDK的重构，这里总结一些经验分享给大家。 作为一个SDK，我们的目标是让使用者能够减少查看文档的时间，所以我们需要提供一些类型的检查和智能提示，一般我们的做法是提供JsDoc，大部分编辑器可以提供快捷生成JsDoc的方式，我们比较常用的vscode…"}, {"id": "6844903586481209358", "title": "Async +Await", "desc": "1、内置执行器：Generator函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器.也就是说，async 函数的执行，与普通函数一模一样。 2、更好的语义：async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有…"}, {"id": "6909480503431299080", "title": "ES2021特性全集（一）", "desc": "本系列包含ES2021规范全部28章内容，分两期来发,本期包含前21章,其余的部分在ES2021特性全集（二）,建议按顺序阅读。 ES2021是ECMAScript Language specification(也被称为js规范或ECMA-262)2021年的版本，也是第十二个…"}, {"id": "6988886552114003981", "title": "玩转字符串的正确姿势", "desc": "玩转字符串的正确姿势 - 算法篇 - 取反方法 思路：清楚加减进制转换，之后翻转一下 现在可以试试练练LeetCode344. 反转字符串和541. 反转字符串 II，期待更多的解法~ - JS字符串"}, {"id": "6844903635172737037", "title": "JS高程中的垃圾回收机制与常见内存泄露的解决方法", "desc": "起因是因为想了解闭包的内存泄露机制，然后想起《js高级程序设计》中有关于垃圾回收机制的解析，之前没有很懂，过一年回头再看就懂了，写篇博客与大家分享一下。如果喜欢的话可以点波赞/关注，支持一下。 由于字符串、对象等没有固定的大小，js程序在每次创建字符串、对象的时候，程序都会分配…"}, {"id": "6844903503500935176", "title": "浅析redux-saga实现原理", "desc": "项目中一直使用redux-saga来处理异步action的流程。对于effect的实现原理感到很好奇。抽空去研究了一下他的实现。本文不会描述redux-saga的基础API和优点，单纯聊实现原理，欢迎大家在评论区留言讨论。 我们尝试写一个demo，用saga的方式实现用gene…"}, {"id": "6914105914261766158", "title": "鉴权的2种解决方案", "desc": "常用来实现用户鉴权的2种解决方案分别为：cookie-session模式和jwt-token模式一、Cookie-Session模式二、Token模式"}, {"id": "6949015537682759694", "title": "技术周报 · 2021-04-09", "desc": "小编推荐通过字节码保护 Node.js 源码之原理篇H5 小说阅读器左右翻页研究JavaScriptBabel 是如何转换 async/await 的？浅探 Web Worker 与 JavaScri"}, {"id": "6844904088698617864", "title": "Service Worker简易教程", "desc": "W3C组织早在2014年5月就提出过Service Worker这样的一个HTML5 API ，主要用来做持久的离线缓存。 浏览器中js运行中单一主线程中，同一时间只能做一件事情。 如果一段代码运算太过耗时，就会一直占用浏览器主线程，造成性能下降。基于这个问题，W3C提出了we…"}, {"id": "6844903885300039688", "title": "作为一名JS开发人员，是什么使我夜不能寐", "desc": "JavaScript 是一种奇怪的语言。虽然受到 Smalltalk 的启发，但它用了类似 C 的语法。它结合了程序、函数和面向对象编程（OOP）的方方面面。它有许多能够解决几乎任何编程问题的方法，这些方法通常是多余的，并没有强烈推荐哪些是首选。它是弱动态类型，但采用了类似强制…"}, {"id": "6992760389964398628", "title": "JavaScrpit 基础系列之语句（条件、循环）（六）", "desc": "条件 三元运算符 if、else、else if if 语句 if 使用小写字母 else 语句 else if 语句 Switch switch 语句来选择多个需被执行的代码块之一。 通过 swit"}, {"id": "6934726003533185038", "title": "实现apply  call   bind", "desc": "一：从this指向开始1：this指向分类this指向分为默认绑定，隐式绑定，显式绑定，new操作，箭头函数这几类。(1):默认绑定：声明一个函数：在window的非严格模式下：this指向为wind"}, {"id": "6956236646698188814", "title": "【译】JavaScript 代码整洁之道-函数篇", "desc": "在这篇文章中，我们将介绍书写整洁代码的基本技巧和建议，并重点关注于可复用的代码单元 -- 函数。 本文中所有示例都是用 JavaScript 来实现，但是这些良好的实践适用于任何编程语言。"}, {"id": "6950187569246126087", "title": "浏览器表单自动填充问题", "desc": "问题描述：如果是同域名网站，并且曾经在该网站下登录过账号密码，并且选择了记住账号密码，或者在设置中设置了自动填充设置。chrome浏览器会对账号密码进行自动填充功能，或者以下拉历史记录的形式给到我们。"}, {"id": "6844904054628302855", "title": "从 JS 引擎到 JS 运行时（下）", "desc": "在上篇文章中，我们已经为 JS 引擎扩展出了个最简单的 Event Loop。但像这样直接基于各操作系统不尽相同的 API 自己实现运行时，无疑是件苦差。有没有什么更好的玩法呢？是时候让 libuv 粉墨登场啦。 我们知道，libuv 是 Node.js 开发过程中衍生的异步 …"}, {"id": "7001770069961228295", "title": "JavaScript中Let和Const的使用方法", "desc": "Let和Const的使用 ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: let 和 const。 let 声明的变量只在 let 命令所在的代码块内有效，const 声明"}, {"id": "7002545896718073886", "title": "全栈开发者路线图[翻译]", "desc": "作者: 云峰 github: https://github.com/ihtml5 专注于 Web 开发的前端很容易，但是后端呢？了解后端可以提高您的前端技能。 这里有一些用于全栈开发的资源，您可以保存"}, {"id": "6992093474266808350", "title": "一文带你学懂React前端路由😃", "desc": "React路由介绍 SPA 即单页面web应用。本文是通过一个案例来理解路由的使用，主要是讲前端的路由应用。"}, {"id": "6959472431656353805", "title": "深入学习SSR , NextJS 一起重构 掘金!", "desc": "逃不开的SSR，大掘金就是使用Nuxt的SSR，本篇文章对SPA单页面应用的的一些SEO痛点进行总结，再简单实现一下掘金PC界面，学习一下Next，冲！ 所以 一位程序员的职业生涯大约十年，只有"}, {"id": "6994247926060498974", "title": "浅谈Javascript设计模式之创建型模式", "desc": "前言 一个设计模式就是对某个特定问题域的最优解，是前人智慧的捷径，学好23种设计模式，可以让我们更好的解决遇到的问题。设计模式可以"}, {"id": "7000020870852935694", "title": "【重温JS】巩固基础之-ajax原理/缓存/接口", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 ☆☆☆ 今天学习的内容: ( 前后端通信-ajax原理/缓存/接口 ) !查缺补漏! ☆☆☆ 开始今天的学习吧! '打牢地基才能筑高楼'!"}, {"id": "6995749646366670855", "title": "异步队列进行try catch时的问题", "desc": "我们在写js的时候，经常的会遇到需要异步去请求接口，或者通过setTimeout或Promise去做什么事， 然后让同步进程继续向下走， 当到某个时间节点的时候或者数据请求成功的时候在通过e"}, {"id": "6844903557372575752", "title": "简单理解Vue中的nextTick", "desc": "先来一个示例了解下关于Vue中的DOM更新以及nextTick的作用。 从图中可以得知：msg1和msg3显示的内容还是变换之前的，而msg2显示的内容是变换之后的。其根本原因是因为Vue中DOM更新是异步的（详细解释在后面）。 下面了解下nextTick的主要应用的场景及原因…"}, {"id": "6938563589485641765", "title": "统计用户停留网站时长", "desc": "最近接到一个需求，需要统计用户从进入网页到全部网页都在浏览器关闭这个过程的时间。 首先，进入页面的时候，浏览器会调用onload事件,浏览器关闭时，浏览器会调用beforeunload事件，可以从这两个事件入手。 有什么可以记录浏览器是否刷新呢？这时候我想到了sessionSt…"}, {"id": "6844903850621550605", "title": "11 种在大多数教程中找不到的 JavaScript 技巧", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 当我开始学习JavaScript时，我把我在别人的代码、code challenge网站以及我使用的教程之外的任何地方发现的每一个节省时间的技巧都列了一个清单。 在这篇文章中，我将分享11条我认为特别有用的技巧…"}, {"id": "6998740313502121997", "title": "和this来一场旅途吧！", "desc": "this定义 关于this的定义，参考MDN上面的描述述是这样的：在绝大多数情况下，函数的调用方式决定了 this 的值（运行时绑定）。this 不能在执行期间被赋值，并且在每次函数被调用时 this"}, {"id": "7001871729769316382", "title": "js函数高级之原型与原型链（二）", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 原型(prototype) 函数的prototype属性(图) 每个函数都有一个prototype属性, 它默认指向一个Object空对象("}, {"id": "6897949585558208525", "title": "「硬核JS」数字之美", "desc": "那么它的二进制就是 0.0001100...... 这样反复循环，这也引出了我们在语言层面的问题，例如 JS 中被人诟病的 0.1 + 0.2 != 0.3 的问题，我们后面再说 PS： 这里也说了是假如，当然你也可以用 32 位来理解，这里只是为了解释原码、反码、补码的概念，…"}, {"id": "6971228585503916068", "title": "利用高阶组件(HOC)思想实现更优雅的modal框", "desc": "利用HOC组件实现更优雅的打开Modal框，解决了开发中定义了重复变量的问题，也使得代码的可读性增强。"}, {"id": "6995897520924655646", "title": "重温ES6系列之“函数的扩展-尾递归”", "desc": "1.尾递归：函数调用自身，称为递归。如果尾调用自身，就称为尾递归。 递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于"}, {"id": "7000551347686735886", "title": "React源码解析之 createElement", "desc": "起步 github找到react官方代码，clone到自己本地。 打开项目，在packages目录下找到react包，然后根据react目录下的package.json文件找到入口文件index.js"}, {"id": "7003176008941731848", "title": "前端JavaScript基础知识之数组的方法", "desc": "前端JavaScript基础知识之数组的方法。toString、join、push、pop、shift、unsfhit、splice、concat、slice、sort、reverse"}, {"id": "6953963506693570573", "title": "前端也要懂编译：AST 从入门到上手指南", "desc": "阅读文章之前，不妨打开手头项目中的 package.json ，我们会发现众多工具已经占据了我们开发日常的各个角落，例如 JavaScript 转译、CSS 预处理、代码压缩、ESLint、Prett"}, {"id": "7002976349241819143", "title": "解析JS数组splice和slice", "desc": "资料来源 slice MDN splice MDN 英语小课堂 slice：薄片，切开 splice：连接 Array.prototype.slice() slice() 方法返回一个新的数组对象，这"}, {"id": "6992374613191688222", "title": "今天我们聊聊JavaScript的组成", "desc": "开篇介绍 主要由三部分组成，ECMAScript，DOM，BOM。那这三者到底是什么东西呢？今天咋们就来说道说道啊！ ECMAScript"}, {"id": "6946021671656488991", "title": "JS 中 this 指向问题", "desc": "相信我，只要记住本文的 7️⃣ 步口诀，就能彻底掌握 JS 中的 this 指向。 先念口诀：箭头函数、new、bind、apply 和 call、欧比届点（obj.）、直接调用、不在函数里。"}, {"id": "7004740971824939045", "title": "目标是实现webpack打包零配置", "desc": "目标是实现webpack打包零配置（配置在内部已默认设置，可重写覆盖） 包括创建项目、本地运行项目、打包线上项目 基本功能 SPA/MPA 单选 Router、Vuex 多选 esl"}, {"id": "6844903767226351623", "title": "九种跨域方式实现原理（完整版）", "desc": "前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。 本文完整的源代码请猛戳github博客，纸上得来终觉浅，建议大家动手敲敲代码。 同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSR…"}, {"id": "6870319532955828231", "title": "「灵魂之作」2020斩获30道高频JS手撕面试题", "desc": "最近在准备面试，刚好利用几天的时间系统的整理了下JS经常考的手撕题类型。 在这里，以脑图的形式带大家手撕这篇文章里的所有题（带注释）。 5. 手动实现防抖函数 柯理化函数含义：是给函数分步传递参数，每次传递部分参数，并返回一个更具体的函数接收剩下的参数，这中间可嵌套多层这样的接…"}, {"id": "6844903987330678798", "title": "9个项目助你在2020年成为前端大神！", "desc": "DEV的年度热文，读完觉得不错，所以翻译出来供大家参考，个人水平有限，文中可能会有一些翻译错误，可以在评论区指正。 本篇文章一共涉及了9个流行的框架/库，没有具体的介绍使用方法，而是给了一些非常棒的实战教程。 初学者(也许一些有经验的开发者也是一样)在读完官方文档，想写一个项目…"}, {"id": "6998133425953570829", "title": "重学前端 | 跟着月影学JavaScript之怎么封装组件", "desc": "本期主要的话题就是如何写好JS，介绍了一个常规的组件从最开始到迭代、一步步改进，重构过程的思路分析 。 从最简单的一个问题，一步步迭代实现出一个抽象的组件。"}, {"id": "6844904093463347208", "title": "带你深度解锁Webpack系列(优化篇)", "desc": "带你深度解锁Webpack系列(基础篇) 和 带你深度解锁Webpack系列(进阶篇)，主要是讲解了 Webpack 的配置，但是随着项目越来越大，构建速度可能会越来越慢，构建出来的js的体积也越来越大，此时就需要对 Webpack 的配置进行优化。 本文罗列出了十多种优化方式…"}, {"id": "7007056251150401567", "title": "最简单上手的json-server构建本地数据桩", "desc": "最简单上手的json-server构建本地数据1.需要的安装的工具-json-server 安装命令：npm i json-server -D 2.项目环境 任何可以运行的项目 3.实现步骤"}, {"id": "6844904184894980104", "title": "一文读懂 TypeScript 泛型及应用（ 7.8K字）", "desc": "软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。 在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型…"}, {"id": "6844904061947346957", "title": "(1.8w字)负重前行，前端工程师如何系统练习数据结构和算法？【上】", "desc": "准备了很长一段时间的练习攻略，同时也放到了github仓库, 也有其它的在线阅读地址。原创代码和攻略文章不易，如果觉得不错，请给仓库点个 star 哦 : ） 如果你听说过LeetCode这个网站，想要一刷到底，迈向算法巅峰，却因为浩瀚的题量和缺乏系统训练感到无力，三天打鱼两天…"}, {"id": "7000501203947749389", "title": "一文彻底搞懂：js-闭包", "desc": "什么是闭包 ？一个函数和对其周围状态（**lexical environment，词法环境**）的引用捆绑在一起（或者说函数被引用包围）。即：函数引用了它的外面的变量，就形成了闭包。"}, {"id": "6982808443488829476", "title": "五天六万字，JavaScript 面试大全", "desc": "一、什么是编译型语言？什么是解释型语言？JS 是什么类型的语言？ 1、编译型语言 1. 解释 程序在执行之前需要一个专门的编译过程，把程序编译成 为机器语言的文件，运行时不需要重新翻译，直接使用编译的"}, {"id": "6893891476913291278", "title": "推荐几个大厂的前端代码规范，学会了，你也能写出诗一样的代码！", "desc": "前端章鱼猫从 2016 年加入 GitHub，到现在的 2020 年，快整整 5 个年头了。 相信很多人都没有逛 GitHub 的习惯，因此总会有开源信息的不对称，有哪些优秀的前端开源项目值得学习的也不知道。 初步前端与高级前端之间，最大的差距可能就是信息差造成的。 从 201…"}, {"id": "6999591143616839710", "title": "HTML5中的DOM扩展（二）", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 往期回顾：HTML5中的DOM扩展（一） 今天我们说一下HTMLDocument扩展及自定义数据属性 HTMLDocument扩展 HTM"}, {"id": "6924349424701276167", "title": "做了N+1个企业项目之后, 我总结了这些React必备插件", "desc": "为了提高大家开发 React 项目的效率, 笔者结合自己的实际工作经验, 汇总如下React项目常用插件. 1. 状态管理 2. UI组件库 React desktop 基于React的JavaScript库，旨在将本机桌面体验带入网络，其中包含许多macOS Sierra和W…"}, {"id": "7000629954249490462", "title": "得物小程序深入一：简单实现评论点赞功能👌", "desc": "接着得物小程序开发的第一次启动，近几天实现了简单的评论点赞功能，一起来看看吧了😊 效果如下 ，。。"}, {"id": "7000180538103300127", "title": "前端算法技巧锻炼之双指针法", "desc": "双指针：指的是在遍历对象的过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向（快慢指针）或者相反方向（对撞指针）的指针进行扫描，从而达到相应的目的。"}, {"id": "6968802868035846152", "title": "人家都三胎了，你还没女朋友？那来画一个！", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 前言 今天是六一节，就在昨天朋友圈被一条消息刷屏并成为热搜！即： 一句话就是，国家实施一对夫妻可以生育三个子女的政策。 消息一经公布，立刻在网络上"}, {"id": "6993681326851244069", "title": "『面试的底气』—— 设计模式之单例模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6988855680773914661", "title": "潮流前端周刊（第38期）- 好久不见的知了壳", "desc": "封面图摄于上周西溪湿地团队共创，在一棵树上找到的，这东西快10年没有见过了，很神奇。 前端技术 从探索到实践，iOS动态库懒加载实录 58技术如何将他们复杂的app在业务迭代过程中实现启动优化与下载优"}, {"id": "7002149448092483615", "title": "深拷贝？看这里就够了！", "desc": "我要一个深拷贝函数，跳转至：[深拷贝函数] 我要一个更优雅的深拷贝，跳转至：[proxy深拷贝] 我要从头学习深拷贝，请通读此文。"}, {"id": "6997572321212891143", "title": "聊一下不一样的 cookie 和 session ? 进来看看你了解多少", "desc": "首先来简单聊下会话控制 http协议的缺陷： 什么是会话控制： 会话控制的分类 1. cookie技术 1.1 什么是cookie cookie是将数据持久化存储到客户端的一种技术。"}, {"id": "7001741903959949320", "title": "Vue3.0 响应式实现原理分析", "desc": "我们知道Vue 2.0是利用Ojbect.defineProperty对对象的已有属性值的读取和修改进行劫持，但是这个API不能监听对象属性的监听和删除，此外为了深度劫持对象的内部属性，必须在初始化的"}, {"id": "6998076849133715464", "title": "新生代农民工也要懂的策略设计模式", "desc": "凡事讲策略，想要区分是否是新生代农民工，得看他会不会策略设计模式，不妨一起来感受下策略设计模式，以及表驱动发法的代码整洁之道！"}, {"id": "7006182934776381454", "title": "JavaScript经典题目a.x=a={n:2}", "desc": "题目 答案： 易错点（错误理解） 等号运算符如果从右往左，那么不是应该先a赋值到了新地址，然后a.x追加到a的新地址里吗？ 纠正：不是把a.x追加进a的新地址，而是把a的新地址赋值给a.x，而a.x是"}, {"id": "7002429757442752543", "title": "try...catch错误捕获", "desc": "介绍try...catch捕获异常，包括在进入异常之前，之中，之后，以及对同步和异步错误的捕获，async...await与promise"}, {"id": "7001481662265557022", "title": "JavaScript 进制问题", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战。 在JavaScript当中，最经常使用的进制计算方法是十进制，这也是平时生活中计算方式。当然也可以使用其他进制方式来进行计算"}, {"id": "6955482100426342430", "title": "大厂面试必考题：三列布局之圣杯布局和双飞翼布局的区别", "desc": "前言 今天给大家分享一个圣杯布局和双飞翼布局及他们之间的区别，这两个三行布局一直是一些大厂前端面试的高频考点，带你走进大厂面试题，活不多说，冲冲冲~ 布局的效果 这两个种三行布局效果是一样的，实现的效"}, {"id": "6994972305516412958", "title": "WebScoket 实例", "desc": "上篇文章为大家讲解了 WebScoket 的基础，本篇文章就为大家通过一个实例介绍 WebScoket 的使用。"}, {"id": "6984322390322839559", "title": "循序渐进带你全方位剖析原型链", "desc": "有一篇好文章——彻底搞定原型链 不懂的时候贼难！弄懂了之后我艹！"}, {"id": "7002526429330014245", "title": "红宝书笔记——JavaScript 面向对象", "desc": "属性类型 要修改对象的属性的默认的特性，必须使用Object.defineProperty() 方法。这个方法接受三个参数：属性所在的对象，属性的名字，一个描述符对象。描述符对象的属性必须是confi"}, {"id": "6988492265748430861", "title": "requestAnimationFrame与setTimeout动画对比", "desc": "通过在vue3中用jsx的语法对比requestAnimationFrame和setTimeout requestAnimationFrame浏览器自动控制运动的频率 setTimeout实际情况计算"}, {"id": "6844904009568878600", "title": "一个简洁、有趣的无限下拉方案", "desc": "长列表渲染、无限下拉也算是前端开发老生常谈的问题之一了，本文将介绍一种简洁、巧妙、高效的方式来实现。话不多说，看下图，也许你可以发现什么？ 说明了要素，也许你可以尝试着开始思考，看你是否能猜到具体的实现方案。 一直以来，检测元素的可视状态或者两个元素的相对可视状态都不是件容易事…"}, {"id": "6906674140792094727", "title": "vite——纵享丝滑开发体验", "desc": "esbuild底层使用的golang进行编写的，在对比传统web构建工具的打包速度上，具有明显的优势。编译Typescript的速度远超官方的tsc 执行vite命令后直接安装npm包，无需重启服务。 vite在浏览器端使用 export import 的方式导入和导出模块，同…"}, {"id": "6975321674015047693", "title": "Webpack5.0学习总结-进阶篇", "desc": "前言 Vue项目开发一直使用的脚手架，对Webpack这个黑匣子知之甚少，碰到问题总是一头雾水，所以趁着Webpack5.0发布不久，较完整地学习了一遍。本篇文章总结一下学习成果。整体大纲如下图，本文"}, {"id": "6844904023787569159", "title": "从ES6到ES10的新特性万字大总结（不得不收藏）", "desc": "ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会）在标准ECMA-262中定义的脚本语言规范。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。 至发稿日为止有九个ECMA-262…"}, {"id": "6844903606815064077", "title": "优雅的提交你的 Git Commit Message", "desc": "知乎上有个问题: 如何写好 Git commit log? 很有意思, 能看到各种提交风格: 有用 emoji 的, 有用唐诗的, 有用随机生成的. 风格没有对错, 只要能够体现出 commit 所做的修改即可. 本文就顺着这个方向, 给大家介绍下如何保障项目 commit m…"}, {"id": "6844903924441284615", "title": "React路由鉴权", "desc": "上一篇文章中有同学提到路由鉴权，由于时间关系没有写，本文将针对这一特性对vue和react做专门说明，希望同学看了以后能够受益匪浅，对你的项目能够有所帮助，本文借鉴了很多大佬的文章篇幅也是比较长的。 单独项目中是希望根据登录人来看下这个人是不是有权限进入当前页面。虽然服务端做了…"}, {"id": "6999096522973397022", "title": "【面试必问】前端的深拷贝和浅拷贝", "desc": "深拷贝和浅拷贝只针对像 Object, Array 这样的复杂类型数据的。简单来说，浅拷贝只复制一层对象的属性，而深拷贝则递归复制了所有层级。"}, {"id": "6991140329931931656", "title": "如何使用 Web Worker 为 JS 创造多线程环境？", "desc": "我们都知道JS是单线程的，虽然可以通过AJAX、定时器等可以实现\"并行\"，但还是没有改变JS单线程的本质..."}, {"id": "6959528501061877767", "title": "技术周报 · 2021-05-07", "desc": "小编推荐 向现代 Javascript 转型 论好文章和烂文章 Using asynchronous web APIs from WebAssembly JavaScript 如何将中文识别的 npm"}, {"id": "6994333596597092388", "title": "浅谈JS运行机制，宏任务，微任务", "desc": "一开始整个脚本作为一个宏任务执行。执行过程中同步代码直接执行，宏任务等待时间到达或者成功后，将方法的回调放入宏任务队列中，微任务进入微任务队列。 当前主线程的宏任务执行完出队，检查并清空微任务队列。"}, {"id": "6971446711113744421", "title": "JavaScript 知识体系之 Array的 最佳实践", "desc": "这是我参与更文挑战的第六天，活动详情查看:更文挑战 上一篇文章，我们总结了数组的基础常用 API，本篇文章我们继续梳理一下数组一些常用的工具方法 数组转字符串 join():将一个数组（或一个类数组对"}, {"id": "6844904205937803277", "title": "面试如何写出一个满意的深拷贝(适合初级前端)", "desc": "引用类型的赋值是传址。只是改变指针的指向，例如，引用类型的赋值是对象保存在栈中的地址的赋值，这样的话两个变量就指向同一个对象，因此两者之间操作互相有影响。例如： 这样子的情况,会导致a和b指向同一份数据,对其中一个进行修改数据的话,会影响到另外一个，实际开发中,这不是我们预期中…"}, {"id": "6933076704969949192", "title": "将VSCode打造成为开发神器-插件篇", "desc": "VSCode现在是世界上最为常用的编辑器之一，为什么被称为编辑器，是因为它不像IDE一样集成了大量开发环境的配置，必须你手动配置很多东西，才能将它打造成为一个趁手的生产工具。 VSCode最大的优势就在于它是完全免费的，你不需要支付任何费用，就可以得到一个开发各种代码的编辑器，…"}, {"id": "6992546366526324750", "title": "算法之前", "desc": "数据结构与算法的关系 数据结构：计算机存储，组织数据的方式，就像锅碗瓢盆。 算法：一系列解决问题的清晰指令，就像食谱。 程序 = 数据结构 + 算法"}, {"id": "6961236834173075463", "title": "聊聊各端手势体系以及对 Web 标准手势的思考", "desc": "在过去，早期的 Web 更多用做内容展示的页面，最早从后端框架中直出，再配上各种 CSS 以及 JS 的交互内容，以完成最终对页面内容的展示，那时候的 Web 更多属于 【内容开发】，做内容的直出与展"}, {"id": "6987425143538581534", "title": "canvas 绘图技术与图片处理", "desc": "本文将讲述一些 canvas 相关的绘图技术，其中包括： 绘图 API 图片加载 像素处理，这为后续的动画学习做了更好的基础铺垫。"}, {"id": "6981633206848061477", "title": "用vue3开发一个打砖块小游戏", "desc": "用vue3写了几个实例，感觉Vue3的composition Api设计得还是很不错，改变了一下习惯，但写多两个就好了。 这次写一个也是儿时很觉得很好玩的游戏-打砖块， 无聊的时候玩一下也觉得挺"}, {"id": "6844904199604404231", "title": "还在迷茫于前端如何入门和进阶？万字指南让你不再迷茫！", "desc": "我经常会看到很多同学在学习前端的时候比较迷茫，不知道到底应该以怎样的学习路线来入门和进阶前端领域。每次遇到这种问题我也会分享一下自己的学习经验，但是发现这是一个问得非常多的一个共性问题。 作为程序员，肯定是不能容忍重复无味的劳动的，因此我就系统地总结分享一下我的前端学习路线，希…"}, {"id": "6844903957853126663", "title": "快速掌握es6+新特性及es6核心语法盘点", "desc": "首先先祝各位国庆快乐，好好去体验生活的快乐，也祝祖国生日快乐，越变越强大，越来越繁荣。 1. let和const 上面使用let的代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，JavaScript 引擎内部会记住上一轮循环的值，…"}, {"id": "7004630361472761869", "title": "JavaScript Event Loop(事件循环)", "desc": "一、Event Loop: 也叫做事件循环，是指浏览器或Node环境的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是实现异步的原理。作为一种单线程语言，javascript本身是没"}, {"id": "6844903543573315598", "title": "送给前端开发者的一份新年礼物", "desc": "React 其实只是一个 UI 框架，频繁进行 DOM 操作的代价是很昂贵的，所以 React 使用了虚拟 DOM 的技术，每当状态发生改变，就会生成新的虚拟 DOM 并与原本的进行改变，让变化的地方去渲染。并且为了性能的考虑，只对状态进行浅比较（这是一个很大的优化点）。 Re…"}, {"id": "6990367124053196807", "title": "bind、call、apply 区别？如何实现一个bind?", "desc": "为什么要使用bind,apply,call 简单的来说就是改变this指向，他们都属于函数的方法，所以只有函数才可以调用bind,call,apply apply apply接受两个参数，第一个参数是"}, {"id": "7005855220718632990", "title": "查找某个值中是否存在的几个好方法", "desc": "伊始 大家应该都遇到过一些查找字符串、数组中是否包含某个元素的情况，下面我来给大家介绍几个函数，方便大家查找这些值，增加摸鱼时间 字符串 startsWith() 方法用于检测字符串是否以指定的前缀开"}, {"id": "6897518583564697607", "title": "手把手教你做一个华为鸿蒙系统Demo级项目（JS角度）", "desc": "HarmonyOS是一款“面向未来”、面向全场景（移动办公、运动健康、社交通信、媒体娱乐等）的分布式操作系统。在传统的单设备系统能力的基础上，HarmonyOS提出了基于同一套系统能力、适配多种终端形态的分布式理念，能够支持多种终端设备。 对消费者而言，HarmonyOS能够将…"}, {"id": "6978111647323783199", "title": "模拟实现数组的核心方法", "desc": "本篇文章将模拟实现数组的核心方法，算是对之前文章的补充，也是对数组这块知识最后的补充，一起来看看吧~~~~"}, {"id": "6995717309956358181", "title": "JavaScript 系列之继承（一）", "desc": "[JavaScript 系列之继承｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6844904029168877582", "title": "如何衡量一个人的 JavaScript 水平？", "desc": "之前刷知乎的时候，看到这么一个问题：“如何衡量一个人的 JavaScript 水平？”然后自己也不要脸地回答了一下这个问题。以下是我的答案： A：看一个人写代码是否有规范，代码是否壮健，是否可拓展，可读性高不高，API设计是否合理。 这些都是长年累月积累下来的且独立于编程语言以…"}, {"id": "6844904200594259976", "title": "前端开发神器Charles从入门到卸载", "desc": "本文将带大家学习使用前端开发神器-charles，从基本的下载安装到常见配置使用，为大家一一讲解。 截取 Http 和 Https 网络封包。 支持重发网络请求，方便后端调试。 支持修改网络请求参数。 支持网络请求的截获并动态修改。 支持模拟慢速网络。 点击Proxy->Sta…"}, {"id": "6992658985459400734", "title": "ECMAScript 中的迭代器讲解", "desc": "多初级前端开发者在往中级迈进的过程中，面试经常问到的一个就是迭代器和生成器，其实在开发中都用过，但是并不知道这是什么"}, {"id": "6984845444404740133", "title": "万字总结webpack的超入门核心知识", "desc": "🎨文章超过1w字，通读大约需要30min。在前端工程化日趋复杂的今天，模块化打包工具在我们的日常开发中起着越来越重要的作用，而其中， webpack 已然是前端打包构建的不二选择。 说到 w"}, {"id": "7003229054711103502", "title": "前端全屏（轮播）滚动插件", "desc": "全屏滚动 1、fullpage.js fullPage.js 是一个基于 jQuery 的插件，它能够很方便、很轻松的制作出全屏网站。如今我们经常能见到全屏网站，尤其是国外网站。这些网站用几幅很大的图"}, {"id": "7005816675865985061", "title": "前端JS复制文案到剪切板兼容安卓iOS", "desc": "移动端点击按钮实现复制到剪贴板功能，通过Javascript的原生方法document.execCommand('copy')实现。注意区别Android和iOS的区别"}, {"id": "6998698072838520846", "title": "DOM扩展Selectors API", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 理解Selectors API Selectors API是基于css选择器获取DOM的匹配模式，我们很早之前用的jQuery就有按照cs"}, {"id": "7005849516838486046", "title": "详解JavaScript原型", "desc": "之前看到过一个问题，大概意思是“如何创建一个纯净的对象”。以此为题，咱俩探索一下什么才是一个纯净的对象。"}, {"id": "7002061062593839118", "title": "带你掌握JS防抖与节流", "desc": "摘要：防抖与节流可谓是面试常见，其实很好理解，下面带你分分钟了解防抖与节流的基本思想与写法~本文分享自华为云社区《JS防抖与节流快速了解与应用》，作者：北极光之夜。 。"}, {"id": "6999867459884810248", "title": "浅谈Vue响应式原理", "desc": "浅谈Vue响应式原理 这是我参与 8 月更文挑战的第 24 天，活动详情查看： 8月更文挑战 前言 本文我们主要来聊聊Vue，从日常使用到核心原理实现，一步步揭开Vue响应式原理的本质。 基本概念 首"}, {"id": "6953029932968574984", "title": "使用Javascript制作BadApple字符画视频 | 创作者训练营第二期", "desc": "本文配有视频：点击播放视频 结合文章一起看效果更好！ 写作的背景 是这样的，最近有B站的小伙伴在我某个视频下评论，让我分享一下，这个BadApple动态效果怎么做。好家伙，我开始还不知道badappl"}, {"id": "7004791905900822565", "title": "Vue3.0 常用响应式API的使用和原理分析(二)", "desc": "reactive对传入的类型是有限制的，必须是对象或者数组。对一些基础类型，例如string, number，boolean等不支持，如果要使用reactiveAPI必须将这些基础类型封装成对象，这样"}, {"id": "7001314206653874206", "title": "设计模式 | 状态模式 | 代码详解", "desc": "设计模式，是前人总结的一些经典场景下的经典的解决方案。核心其实是一种思想，无关乎语言。本文就是我用 js 代码来讲解这个模式"}, {"id": "6914092198170460168", "title": "万恶的前端内存泄漏及万善的解决方案", "desc": "最近收到测试人员的反馈说我们开发的页面偶现卡死，点击无反应的情况，特别是打开页面较久的时候发生概率较高。打开任务管理器，看到内存占有率已经很高了，初步判断可能存在内存泄漏的情况。下面排查内存泄漏的原因。 系统进程不再用到的内存，没有及时释放，就叫做内存泄漏（memory lea…"}, {"id": "6844904130494857229", "title": "Vue 3.0 全家桶抢先体验", "desc": "完成上述操作后，项目正式升级到 Vue 3.0，注意该插件还能支持 typescript，用 typescript 的同学还得再等等。 Vue 3.0 中初始化状态通过 setup 方法，定义状态需要调用 ref 方法。接下来我们定义一个事件，用来更新 count 状态： 通过…"}, {"id": "7001022287981838350", "title": "js 如何实现拖动滑块", "desc": "js 如何实现拖动滑块 实现拖动滑块，先分析，滑块可以拖动应该改变滑块在页面中的坐标，那就采用定位拿到元素的 top 和 left 对它们进行赋值，接下来就是准备事件..."}, {"id": "6947856296771223589", "title": "精读《DOM diff 原理详解》", "desc": "DOM diff 作为工程问题，需要具有一定算法思维，因此经常出现在面试场景中，毕竟这是难得出现在工程领域的算法问题。 无论出于面试目的，还是深入学习目的，都有必要将这个问题搞懂，因此前端精读我们就专门用一个章节说清楚此问题。 Dom diff 是所有现在框架必须做的事情，这背…"}, {"id": "7003658896141189128", "title": "ES6中常用特性", "desc": "1. ECMAscript2015 共有三种作用域 全局作用域 函数作用域 块级作用域（新增） 2. 变量声明： let const let const 都是块级作用域，let是变量，const是常量"}, {"id": "6969544464113074189", "title": "基于 lerna 的多包 JavaScript 项目搭建维护", "desc": "将大型代码仓库分割成多个独立版本化的 软件包对于代码共享来说非常有用。但是，如果某些更改 跨越了多个代码仓库的话将变得很麻烦并且难以跟踪，并且，跨越多个代码仓库的测试将迅速变得非常复杂。"}, {"id": "6990176227118022693", "title": "一位初级进阶中级 JavaScript 工作者的自我修养（二）", "desc": "前言 最近的前端面试已经卷的飞起了，从计算机原理、编译原理、数据结构、算法、设计模式、编程范式到编译工具、格式工具、Git、NPM、单元测试、Nginx、PM2、CI / CD 了解和使用。 这随便挑"}, {"id": "7003173943251042341", "title": "手写Promise 2.0", "desc": "前言 很久很久以前，手写过一个promise1.0，今天 是对其做一些完善&一些常用的Promise静态方法的实现。"}, {"id": "6844903669389885453", "title": "7分钟理解JS的节流、防抖及使用场景", "desc": "据说阿里有一道面试题就是谈谈函数节流和函数防抖。 糟了，这可触碰到我的知识盲区了，好像听也没听过这2个东西，痛定思痛，赶紧学习学习。here we go！ 可以看到，我们只要按下键盘，就会触发这次ajax请求。不仅从资源上来说是很浪费的行为，而且实际应用中，用户也是输出完整的字…"}, {"id": "6844903857797988360", "title": "线上出bug了？别怕，这么定位！", "desc": "摘要： Source Map还是很神奇的。 工作中，生产环境代码是编译后代码，搜集到报错信息的行和列无法在源码中对应，很多时候只能靠“经验”去猜，本文针对这种情况，开发了一个npm命令行小工具，帮助快速定位报错的源码位置，提升效率。 由于现在构建工具盛行，前端部署的代码都是经过…"}, {"id": "6844903510283124749", "title": "前端图片预览", "desc": "很多时候我们都会有图片上传的功能需求，如果我们先将图片上传到服务器，然后在将返回结果显示在前端，这样的操作性能开销太大，如果图片一多，简直要哭，而且万一还碰到了上传错误要删除的，那简直无法想象了。所以我们需要先将图片在前端展示后，然后由用户确认没有问题了，再统一上传，这样才是比…"}, {"id": "6916135313186226190", "title": "潮流前端周刊（第18期）- 心灵奇旅", "desc": "封面图是最近上线电影「心灵奇旅」中一张图，电影创意很棒，个人觉得近一年最佳，值得一看。 Ryan 对于 node.js 的十大遗憾之一就是支持了 node_modules，node_modules 的设计虽然能满足大部分的场景，但是其仍然存在着种种缺陷，尤其在前端工程化领域，造…"}, {"id": "6996624495469395999", "title": "【从头学前端】13-JavaScript中的Array对象方法详解", "desc": "本篇文章我们将来学习JavaScript中的Array对象，通过本篇文章的学习可以掌握什么知识呢？如下图：JavaScript中的数组，也就是Array对象，该对象提供了一系列属性和方法来进行数组的操"}, {"id": "6986812469796667399", "title": "Vue-RSA 非对称加密传输，万千方法取其一", "desc": "用 jsencrypt.js  官网http://travistidwell.com/jsencrypt/ 装好后在vue文件里引用 首先，你得有一对公钥和私钥，有在线生成器，我们先来一对"}, {"id": "6844903911363444744", "title": "也许你并不需要第三方小程序框架", "desc": "在小程序的世界里，原生小程序框架已经足够好，它就是那把给你雕刻小而美应用的雕刻刀，而不必要去寻找一把屠龙刀。 最近 Vue 作者尤大关于框架设计平衡的分享中也提到了框架的取舍问题。 框架的确给前端带来了生产力的提高，也带动了前端界生态的发展。所以在小程序出现之后，一股框架之风也…"}, {"id": "6987558235532165156", "title": "绑定鼠标事件返回的event对象属性解析", "desc": "MouseEvent 接口指用户与指针设备( 如鼠标 )交互时发生的事件。使用此接口的常见事件包括：click，dblclick，mouseup，mousedown。"}, {"id": "6987299544736366606", "title": "js 数据结构 - 链表", "desc": "本篇文章将介绍“链表”结构，并使用 js 代码进行实现对应的结构。链表是由一个个结点组成的数据结构，而结点一般是由数据和记录下一个结点地址的“指针”组成（双向链表还有一个记录上一个结点地址的“指针”）"}, {"id": "6988095335805485093", "title": "强引用和弱引用——Set、WeakSet、Map、WeakMap区别", "desc": "WeakSet中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存"}, {"id": "6844903609990119431", "title": "EventLoop", "desc": "毋庸置疑，大家都很了解js是一门单线程语言，这也就说明JS无法进行多线程，但是JS中异步的功能完全可以模拟多线程，而且效果还杠杠滴。当然，如果想完全理解异步，首先要了解JS的运行核心——事件环（Event Loop），下面分两部分理解事件环： 图虽然有些乱，但是我们只需关心ti…"}, {"id": "6844903960889786381", "title": "我对 JS 中相等和全等操作符转化过程一直很迷惑，直到有了这份算法", "desc": "在日常的 JS 编码过程中，可能很难看到相等运算符(==)是如何工作的。特别是当操作数具有不同类型时。这有时会在条件语句中产生一些难以识别的 bug。很容易理解为什么 0 == 8 是 flase 的或者 '' == false 是 true。但是为什么{} == true是 …"}, {"id": "6993325615097053220", "title": "JS数组奇淫巧技", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 基本操作中常见情况 主要涉及到数组的一些常用方法，也是开发中使用频率较高的，本文适合对数组的方法有一定理解的朋友阅读🈷"}, {"id": "6864362069991358472", "title": "九宫格抽奖中的程序设计", "desc": "上线一个九宫格抽奖活动，可以分享的细节较多，写一篇文章记录一下。 你肯定见过，各种各样的抽奖。概率问题对吧，但他们会通过一些紧张的过渡效果反馈给用户。例如 这时候我们本以为前端可以已一种上帝视角来控制抽奖概率，但是需求对过了之后才发现，中奖那个奖励是服务端接口返回的。 这样就比…"}, {"id": "7002416075413405704", "title": "正则表达式", "desc": "正则表达式 正则表达式的模糊匹配 正则表达式有两种模糊匹配方式：横向模糊匹配和纵向模糊匹配 横向模糊匹配： 纵向模糊匹配: 正则表达式的排除字符组 排除字符组 量词（也称重复） 量词 含义 {m,} "}, {"id": "6844903503983280135", "title": "前端表单进阶之路：通过 Vue.js 实现表单可配置化", "desc": "作为现代网页中最早具有逻辑的部分，表单至今仍在博客类、分类信息以及论坛等以用户发布的信息为核心的网站中，扮演着重要的角色。对这些网站来说，表单意味着信息的初始来源，因此它实际上承载了对于信息处理的第一手逻辑。对于不同的类目，表单的内容显然在业务上需要进行区分，所以，如何实现表单…"}, {"id": "6912366231647453198", "title": "web视频播放一杆到底", "desc": "毫无疑问，现在是短视频、直播的时代。视频内容逐渐代替图文形式成为网友们获取新鲜事物以及展现自我的一大媒介。随着5G的到来，2020年属于直播短视频爆发式增长的一年，电商平台也都涌入直播营销的大风口，成为了各自平台引流转化的关键。不管是用户还是开发者，我们处于这个风口中。本文将带…"}, {"id": "6844903847668744199", "title": "深入理解 Webpack 打包分块（下）", "desc": "随着前端代码需要处理的业务越来越繁重，我们不得不面临的一个问题是前端的代码体积也变得越来越庞大。这造成无论是在调式还是在上线时都需要花长时间等待编译完成，并且用户也不得不花额外的时间和带宽下载更大体积的脚本文件。 然而仔细想想这完全是可以避免的：在开发时难道一行代码的修改也要重…"}, {"id": "6844904158101766151", "title": "可以不会用但你必须要了解的Web Worker详解", "desc": "Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。 Web Worker分为两种类型，专用线程（Dedicated Web Worker） 和共享线程（Shared Web Worker）。专用线程仅能被创建它的脚本所使…"}, {"id": "6917840080514056205", "title": "【七日打卡】开箱即用的微信小程序订阅消息代码封装", "desc": "微信小程序消息订阅是大部分小程序场景都会用到的功能，作为基础开发时，这一类的API都应该提前被包装好，作为一个工具类库存在。方便团队成员订阅消息时使用。 在大多数情况下，订阅消息都只是配置项和中介方法不一样。前端只需要负责调用微信的API,然后通知后端订阅的具体模型就算是达到目…"}, {"id": "6844903965834870798", "title": "精读《用 css grid 重新思考布局》", "desc": "Flex 与 Grid 相比就像功能键盘和触摸屏。触摸屏的控制力相比功能键盘来说就像是降维打击，因为功能键盘只能上下左右控制（x、y 轴），而触摸屏打破了布局障碍，直接从（z 轴）触达，这样 无论 UI 内部布局再复杂，都可以通过 touch 直接定位。 Flex 是一维布局方…"}, {"id": "6966883776324452360", "title": "JS理论要点", "desc": "JS事件循环机制 js面向对象的理解 对象：万物皆对象 类：对对象的细分 实例：类中具体的事物 js为什么是单线程,而不是多线程 进程：是cpu分配资源的最小单位；（是能拥有资源和独立运行的最小单位）"}, {"id": "6844904054968025095", "title": "【前端性能优化指南】5.1 - 优化你的 JavaScript", "desc": "随着 Web 的发展，JavaScript 已经被用于构建大型、复杂的前端应用，在当下的前端中扮演了一个非常重要的角色，因此针对 JavaScript 的优化至关重要。"}, {"id": "6953836870388154381", "title": "浅谈 Virtual DOM", "desc": "前言 “Virtual Dom 的优势是什么？” 这是一个常见的面试问题，但是答案真的仅仅是简单粗暴的一句“直接操作dom和频繁操作dom的性能很差”就完事了吗？"}, {"id": "6966860515398123556", "title": "包装类", "desc": "铺垫 // 原始值没有属性和方法,经过包装类的过程，对象有 js中提供了三种特殊的引用类型（String Number Boolean）每当我们给原始值赋属性值时 后台都会转换 调用包装类，，，，，，"}, {"id": "6998496510639882253", "title": "深入理解红宝书(20)", "desc": "第五章 基本引用类型 这是我参与8月更文挑战的第20天，活动详情查看： 8月更文挑战 5.2.2 RegExp 实例方法 RegExp 实例的主要方法是 exec()，主要用于配合捕获组使用。这个方法"}, {"id": "6985410659085680654", "title": "常用JavaScript函数", "desc": "1.深拷贝 2.数组去重 3.判断数据类型 4.字符串去重 5.防抖 6.节流 7.拆解url参数 8.数组排序 9.字符串处理 10.数组扁平化 11.常用正则验证规则"}, {"id": "6876058127461154830", "title": "前后端交互-从用户注册到登录说起", "desc": "在我们登录一个网页时，只要输入帐号密码，如果跟注册时账号密码相同，那么就会提示登录成功并跳转页面，如果失败则会提示失败。那么，用户从注册到登录究竟发生了哪些数据转换，前后端之间是如何交互的，这是今天我要描述的问题，此博客作为模拟用户登录小功能的一次记录，我将在这里复述我所学到的…"}, {"id": "6983700332060606501", "title": "深拷贝浅拷贝的区别", "desc": "一.浅拷贝 浅拷贝指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址。 在js中，浅拷贝的方法有以下几种："}, {"id": "6844903842350366727", "title": "基于Fixed定位的框选功能", "desc": "最近项目涉及到一个支持批量操作的小需求，交互上需要使用框选来触发。在查阅了一些资料后发现，网上的方案基本都是基于绝对定位布局的，此方案如果是针对全局（在body上）的框选，还是可用的。但是现实需求里几乎都是针对某个区域的框选。如果用绝对定位实现就比较繁琐了，需要调整定位原点。下…"}, {"id": "6905707252963868679", "title": "【前端工程化基础 - Babel 篇】如何用 Babel 为代码自动引入依赖", "desc": "2020年5月写的一篇文章，还没在掘金发过。 最近在尝试玩一玩已经被大家玩腻的 Babel，今天给大家分享如何用 Babel 为代码自动引入依赖，通过一个简单的例子入门 Babel 插件开发。 我们得首先通过 import axuebin from 'axuebin' 引入 a…"}, {"id": "6911361664805765134", "title": "JS系列-趣谈bind", "desc": "是不是看不太懂，没关系我翻译一下，说人话就是 bind 函数执行完会返回一个新的函数，后续我们都称为绑定函数，执行这个绑定函数时， this 的指向就会变成 bind 函数的第一个参数，其他参数会作为返回的绑定函数的参数，在执行绑定函数的时候再传入到这个函数中。 这下明白了吧，…"}, {"id": "6844903833181618184", "title": "前端战五渣学JavaScript——前端数据存储", "desc": "我们都知道，作为一名前端开发，或多或少在开发的过程中因为各种各样的需求，需要在前端存储一些数据，比如登录验证，可能会用到cookie，或者localStorage存储token，然后请求手动带上。所以我们很需要搞清楚前端存储有哪些方法，以及我们该如何去使用这些我们已经司空见惯的…"}, {"id": "6943476703410782222", "title": "ES6中的let和const", "desc": "好像又很久没有写文章了，说实话，写文章这种东西是真的看心情，有时候想写，有时候又不想写，就和过山车差不多哈哈哈，今天我们也不讲深奥的，就讲讲我们在变量声明时很常见的 let 和 const。 既然讲到 let 和 const，我们就得摸着自己的良心问一下自己，这是什么，为啥出现…"}, {"id": "6844903508337164296", "title": "内存分析与内存泄漏定位", "desc": "无论是分布式计算系统、服务端应用程序还是 iOS、Android 原生应用都会存在内存泄漏问题，Web 应用自然也不可避免地存在着类似的问题。虽然因为网页往往都是即用即走，较少地存在某个网页长期运行的问题，即使存在内存泄漏可能表现地也不明显；但是在某些数据展示型的，需要长期运行…"}, {"id": "6844903700440285191", "title": "手把手教你用node撸一个图片压缩工具", "desc": "依然是先介绍一下工具，本次我们主要用到了 tinypng 这个工具。tinypng是一个主流的图片压缩工具，他可以实现高保真的压缩我们的图片，一般我们可以进入他的官网https://tinypng.com/压缩图片，手动点击上传，但是每次只能压缩20张，这对于追求方便的我们来说…"}, {"id": "6977000721938022407", "title": "HTMLCollection 和 NodeList 的区别", "desc": "HTMLCollection 例如使用 getElementsByTagName() 方法返回的就是一个 HTMLCollection 对象。 HTMLCollection 对象中的属性和方法： it"}, {"id": "6982802518493364238", "title": "【javaScript】取消浏览器默认行为", "desc": "如何取消浏览器默认行为，在响应一个用户个人操作的同时，防止浏览器会附加地、默认地做出自带的响应动作。"}, {"id": "6987721398349201438", "title": "Vue2.0是如何通过 Object.defineProperty()实现数据双向绑定？", "desc": "我们都知道vue2.0通过Object.defineProperty来实现对属性的getter和setter劫持，达到监听数据变动的目的。这也是我们理解vue实现数据双向绑定必不可少的一个知识点..."}, {"id": "6844903703137239054", "title": "react高仿掘金移动版，支持服务端渲染", "desc": "react-juejin一个高仿的掘金，大部分是按照掘金的ui来实现的，个别地方就根据自己想法修修改改，只做了移动端的部分，还做pc的部分就要花太多时间了，支持服务端渲染、pwa等，写这个项目主要是对"}, {"id": "7002214437700665351", "title": "【JavaScript】18.浏览器对象模型", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 浏览器对象模型 01.基本概念 BOM： Browser Object Model，即浏览器对象模型 提供了独立于內容而与浏览器窗口进行交"}, {"id": "6844904050543034376", "title": "「硬核JS」一次搞懂JS运行机制", "desc": "多进程：多进程指的是在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的，比如大家可以在网易云听歌的同时打开编辑器敲代码，编辑器和网易云的进程之间不会相互干扰 JS的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript…"}, {"id": "7000634168652595214", "title": "干货慎入 | JavaScript引擎中的内存管理", "desc": "JavaScript引擎中的内存管理。内存是什么，如何工作，内存的生命周期，js引擎的内存模型。垃圾回收算法等"}, {"id": "6913480482638266382", "title": "达达前端个人web分享92道JavaScript面试题附加回答 | 创作者训练营", "desc": "希望可以通过这篇文章，能够给你得到帮助。 1. JavaScript垃圾回收机制的了解 对于在JavaScript中的字符串，对象，数组是没有固定大小的，只有当对他们进行动态分配存储时，解释器就会分配内存来存储这些数据，当JavaScript的解释器消耗完系统中所有可用的内存时…"}, {"id": "6981467496742125604", "title": "那些资深/专家的前端是如何回答JavaScript面试题的 （一）", "desc": "面试官问：如何快速排查内存泄露？ 相信我，面试的基调从一开始就定好了。面试官是往死里问还是往平里问，这都取决于看起来简单却需要猛料的回答。"}, {"id": "6872639403102208014", "title": "逐行分析鸿蒙系统的 JavaScript 框架", "desc": "我在前文中曾经介绍过鸿蒙的 Javascript 框架，这几天终于把 JS 仓库编译通过了，期间踩了不少坑，也给鸿蒙贡献了几个 PR。今天我们就来逐行分析鸿蒙系统中的 JS 框架。 文中的所有代码都基于鸿蒙的当前最新版（版本为 677ed06，提交日期为 2020-09-10）…"}, {"id": "7004834442158014501", "title": "【前端面试题库】待分类题库（一）", "desc": "目录 理解xss，csrf，ddos攻击原理以及避免方式 http状态码 TCP 三次握手 与 四次挥手 跨域通信的几种方式 浏览器的本地存储？各自优劣如何？ 常见的Webpack Loader 常见"}, {"id": "6971443652191076366", "title": "假如易立竞问你如何判断 JavaScript 中的数据类型？", "desc": "JavaScript 中检测数据类型的方法有哪些你知道吗？typeof、instanceof、constructor、Object.prototype.toString.call()"}, {"id": "6999452525703364622", "title": "老湿说的万物皆对象，你也信？  | 重学JS", "desc": "浑浑噩噩在前端领域磕磕碰碰了两年多，想看看Vue源码，不知道有没有最近想看源码的猿友，如果JS不够硬，建议跟我一起来**重学JS**，重学完相信再去看源码，会事半功倍。 接下来我们来看看数据、变量、内"}, {"id": "7002410203811414023", "title": "处理封装AJAX的GET请求遇到的问题", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 前言 经过上文，我们已经了解了AJAX，下面来封装GET请求 Ajax的GET请求"}, {"id": "6981388210580488206", "title": "JSBridge原理解析——以WebviewJavascriptBridge实现方式为例", "desc": "一、什么是JSBridge？ JSBridge是一种webview侧和native侧进行通信的手段，webview可以通过jsb调用native的能力，native也可以通过jsb在webview上执"}, {"id": "7004089093407637540", "title": "Promise.allSettled() 原理解析及使用指南", "desc": "Promise.allSettled(promises) ，返回一个在所有给定的 promise 都已经 fulfilled 或 rejected 后的 promise ，并带有一个对象数组，每个对象"}, {"id": "7001502185947136014", "title": "使用reduce方法让代码倍加优雅", "desc": "在实际项目中，最常见可能是在计算、循环逻辑方面的处理，可以使用数组中`reduce`方法也可以解决很多的问题，使得你的代码风格更加优雅！"}, {"id": "6999449620942159902", "title": "深入理解定时器以及JS执行机制", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 没有前言，直接单刀直入，来聊聊定时器！ 我们知道，定时器setInterval和setTimeout是定义在window上的两个函数 这两"}, {"id": "6907143412227522567", "title": "简单正则一手掌握", "desc": "正则表达式很简单，但要多用方可掌握。正则表达式很简单，但要多用方可掌握。正则表达式很简单，但要多用方可掌握。"}, {"id": "6864398060702760968", "title": "「查缺补漏」我的2020前端面试秘籍，为你秋招保驾护航", "desc": "开门见山，这篇文章，适合「初级前端」，如果你还在校招的话，或者还在求职的话，可以看看本文，找一找灵感，希望对你们有帮助呀。 先说一下最近个人情况：2020年8月底已经拿到网易有道offer, 这算是我的第一份web前端工作吧，一直以来都是自学前端的，走过很多的弯路，之前的技术栈…"}, {"id": "7005076205711933477", "title": "你应该会喜欢的的新语法 .at", "desc": "看推特偶然间看到的 JavaScript的新.at()方法允许你根据索引选择项。   这对于获取数组或字符串的最后一项非常方便，因为与数组不同，它支持负索引! 原文 平常我们获取数组的最后一个元素的时"}, {"id": "6999424813848592414", "title": "总结的17个JavaScript开发技巧", "desc": "async/await 宽松相等 == == 和 ! 优先级 数字与字符串相加减 补零 是否为空数组 是否为空对象 数组比较大小 Stri"}, {"id": "6993024127099469832", "title": "ECMAScript 的集合引用类型——Object讲解", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 在常用的引用类型中，Object 首屈一指，尽管你发现 Object 实例并没有多少功能，但却很适合存储和在应用程序之间交换数据。 创建 O"}, {"id": "6844903845642911752", "title": "Vue 组件间通信六种方式（完整版）", "desc": "组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系： 如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。 针对…"}, {"id": "7002401071511863303", "title": "彻底搞懂 JavaScript 数据类型转换", "desc": "本文主要介绍 JavaScript 的数据类型转换，对 Number、String、Boolean 等数据类型的转换规则做了一些总结。"}, {"id": "6976250246376456206", "title": "谈谈基于JS实现阻止别人调试通过控制台调试网站的问题", "desc": "今天我们来谈谈浏览器控制台的那点事儿，作为一名程序员来说，肯定是不希望自己的代码被别人反复的调试，万一被别人调试出bug怎么办？被不怀好意的人获取接口信息恶意攻击怎么办？"}, {"id": "6972425232111894541", "title": "这一次，彻底搞懂Promise的状态转换", "desc": "Promise的三种状态到底是什么？ pending fulfilled rejected 下面我们先看下三种状态的产生 1.pending状态的Promise 2. fulfilled状态的Prom"}, {"id": "6844904036194320397", "title": "【动画演示】JavaScript 引擎运行原理", "desc": "JavaScript 很酷，但是 JS 引擎是如何才能理解我们编写的代码呢?作为 JS 开发人员，我们通常不需要自己处理编译器。然而，了解 JS 引擎的基础知识并了解它如何处理JS代码，并将其转换成机器能够理解的东西，绝对是个有益无害的事情。 注意:本文主要基于 Node.js…"}, {"id": "6867043707506409480", "title": "Vite: 如何不使用 webpack 开发应用", "desc": "突然就对这个非常感兴趣，而且这可能是未来的一种趋势，所以在项目不是太庞大的时候去了解一下它的内部原理就会更加简单一些。而且「阅读他人优秀开源项目源码的过程可以学到很多平时工作学不到甚至看不到的东西」 打开 Vite GitHub[2], 拷贝项目到本地。 「Vite」重度依赖「…"}, {"id": "6993908833139556360", "title": "JavaScript-async、await、promise、setTimeout", "desc": "一、来一道字节的面试题，分析一下输出什么 二、看看大佬的讲解 https://juejin.cn/post/6844903988584775693#heading-6"}, {"id": "6940606303240716295", "title": "闭包没有那么难", "desc": "闭包来源于functional progra，mming 函数式编程，闭包是一个持久的作用域，即使代码执行已经移出了当前执行上下文环境（当前作用域），这个作用域中的局部变量也不会销毁。作用域对象和作用域里的全部局部变量，都与函数绑定在一起，只要函数持久存在，就会持久存在。 上面…"}, {"id": "6919356617448718343", "title": "乘风破浪的WebGL系列-使用 WebGL 构建基础 2d 几何形体", "desc": "WebGL 没有提供一些基础的 API 来帮助你构建矩形、圆形或则立方体和球体等基础几何形体，如果你想用原生的 WebGL 来绘制这些形体的话，就需要了解 WebGL 支持直接绘制的基础图元，以及如果通过这些基础图元去构建更加复杂的几何形体。 图元（primitive） 是指绘…"}, {"id": "6997382497684160543", "title": "es6的async函数是什么", "desc": "async函数是什么。Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API。"}, {"id": "6997417251489972255", "title": "vue3 学习", "desc": "调试环境搭建 迁出Vue3源码： git clone https://github.com/vuejs/vue-next.git 安装依赖： yarn --ignore-scripts ⽣成sourc"}, {"id": "6991827361129824264", "title": "【从头学前端】02-JavaScript词法结构 | 八月更文挑战", "desc": "标识符的规范 语句和表达式 可选的分号 JavaScript注释 JavaScript代码块 JavaScript中的关键字与保留字"}, {"id": "6969602420850556941", "title": "var、let、const的区别", "desc": "变量提升问题 这是个老生常谈的问题了，我们再回顾一下 这段代码会依次输出 undefined、10。那为什么会这样呢？我们简单的来分析一下实际代码执行的过程,由于var存在变量提升，也就是说会把用va"}, {"id": "6992936072518828068", "title": "【日拱一卒】JavaScript对象杂记", "desc": "这是我参与8月更文挑战的第5天，活动详情查看： 8月更文挑战”  七夕快要到了，有对象了吗？没有的话，来学着自己new一个吧！（狗头保命） 前言 结合《JavaScript二十年》聊聊对象 （很菜 大"}, {"id": "6913156226008711182", "title": "<script>标签加载知多少？", "desc": "都知道，前端性能优化的一条原则是将script标签放在body底部，为什么呢？因为script标签的加载和执行时会阻塞DOM结构渲染的，若是script标签放在头部，加载时间或者执行时间过长，会影响后续DOM的渲染，造成很长时间的页面白屏，前端体验会变得很差。 为了使例子更加直…"}, {"id": "6997338621657382942", "title": "前端常见JS手写代码", "desc": "1.手写new关键字 注意：new关键字创建实例对象的时候，返回类型必须为Object，如果返回值不为对象（null一样不行），返回无效。 2.手写instanceof 3.数组扁平化 其他方法参考 "}, {"id": "6844904090799964173", "title": "垃圾回收（GC）那些事儿", "desc": "第一次了解垃圾回收是在一个公众号看到的，当时讲了一下标记清除法和引用计数法，但是当时存在很多疑惑，比如可达不可达到底是什么？当时也没太在意。今天重新了解，用自己的话总结分享出来。希望能给您一些启发和思考。 在文章开始前要知道一个很重要的知识，JS的内存生命周期。今天要讲的就是那…"}, {"id": "6891911819355488270", "title": "「JS系列之基础整理」扫盲\b(2)-数组专题", "desc": "数组，顾名思义就是数据组合，也就是一组数据的集合，那我们知道集合中的个体被称作元素，这里的数据也就是元素，又因为js是弱类型语言，所以在不加约束的情况下一个数组内的元素数据类型可以是任意的。在ts中，一般我们会对数组中的数据类型做统一的约束处理，这时候我们就不能任意存放了，对于…"}, {"id": "6844904148614250509", "title": "当我们说做灰度发布的时候我们在做什么", "desc": "现在对于稳定性的要求越来越高，同时在维护的应用中有一个正在进行迁移，需要采取一些措施来实现平稳升级和迁移。采用灰度发布是一个可行的方案。 降低发布带来的影响。即使在日常和预发环境进行充分测试，但也没人能保证线上一定是好的。测试环境和线上毕竟不是完全一样，测试也不可能覆盖所有地方…"}, {"id": "6993882373586681893", "title": "开来围观Iterator啦", "desc": "Iterator(遍历器) 概念 Iterator(遍历器)：是一种用来统一的接口机制，用于处理所有不同的数据结构。 Iterator(遍历器)：是一种接口，为各种不同的数据结构提供统一的访问机制。 "}, {"id": "6937537783653203976", "title": "面向 JavaScript 开发人员的 Monads", "desc": "和别的程序员一样，我也很想知道 Monads 到底是什么。但每当我在网上搜索 Monads 的时候，都只会找到大量的 Monads 理论范畴文章，而其它的资源似乎也并没有什么参考意义。 为了搞清楚什么是 Monads，我花费了大量的时间精力。我开始去学习 Haskell，但在学…"}, {"id": "6974658460243722247", "title": "常用方法集合（转）", "desc": "Array, Object, String, Number, Boolean 常用方法集合。"}, {"id": "6844903888424796168", "title": "Canvas实现高性能的瀑布图", "desc": "可能很多同学不知道频谱图和瀑布图，其实我也不懂...但是咱们前端就是负责把数据按照规则显示出来就好（上方折线图为频谱图，下方那一坨为瀑布图）。 因为需要服务器实时传输数据，要求达到30帧，每帧动画由 1024 个点组成，肯定要比 Ajax 轮询舒服的多，而且这个项目对于浏览器兼…"}, {"id": "6969714551428218893", "title": "JS 原生方法原理探究（四）：实现继承的几种方式以及优缺点对比", "desc": "这是JS 原生方法原理探究系列的第四篇文章。本文会介绍如何实现 JS 中常见的几种继承方式，同时简要介绍它们的优缺点。"}, {"id": "6980282248104771615", "title": "JS计算小数精度丢失解决方案", "desc": "缘由 最近在做公司的一个点餐H5项目需要前端动态计算用户选的商品的总价（单价*数量）和购物车的总价格时发现关于 JavaScript 浮点数计算精度不准确问题。"}, {"id": "6844903784825503751", "title": "如何用JS做一个小清新导航？", "desc": "看完上面的预览图，是不是有一点兴奋，想自己敲出一个属于自己的小清新导航。下面就开始动手敲代码吧！ 给HTML标签添加class，并添加图片。注：仅仅是个人习惯！ 1. 初始化数据 2. 生成键盘 定义一个变量（boolean类型）作为一个开关，当input获得焦点，将那个变量变…"}, {"id": "6974572589427458084", "title": "《javascript高级程序设计》学习笔记 | 9.2.代理捕获器与反射方法", "desc": "代理捕获器与反射方法 代理可以捕获13 种不同的基本操作，代理对象上执行的任一种操作只会有一种捕获处理程序被调用，不存在重复捕获现象 只要在代理上操作，所有捕获器都会拦截对应的反射 API 操作 相关"}, {"id": "6844903684724228104", "title": "[译]JavaScript: Promises 介绍及为何 Async/Await 最终取得胜利", "desc": "异步函数在JavaScript中有好有坏。好的一面是异步函数是非阻塞的，因此很快 - 特别是在Node.js上下文中。缺点是处理异步函数可能很麻烦，因为有时必须等待一个函数完成才能在进行下一次执行之前获得“回调”。 有一些方法可以发挥异步函数调用的优势并正确处理它们的执行，但其…"}, {"id": "6959086599841939486", "title": "数据管控路由实现状态持久化", "desc": "封装路由容器层，通过数据管控路由，达到页面级状态和数据持久化缓存的目的，并且支持具备匹配相同路由多个副本。"}, {"id": "6844904120042651662", "title": "手把手教你用原生JavaScript造轮子（四）——Tabs选项卡", "desc": "To be continued..."}, {"id": "6993325530141425672", "title": "FLIP动画🔥🚀🌋", "desc": "FLIP是一种动画思想，在某些场景中使用这类思想能让我们更加方便地做出动画。比如当你增删元素，而想让元素平滑过渡到最终布局态时，如果你不确定元素最终的位置在哪里，用FLIP思想是一种简易的解决之道。"}, {"id": "6952709351907786760", "title": "单讲 防抖 debounce ", "desc": "看了也不亏不是么？我滴朋友！！！实际工作场景：在写用户注册页面的时候，用户名框输入名称的同时去服务器校验名称是否重复，但发现之前的代码竟然都没做限制，输入一次发一次请求。简直忍不了！！！函数防抖和节流"}, {"id": "6844903743985549320", "title": "一本让你醍醐灌顶的小册：《Vue.js组件精讲》", "desc": "三年前，我开始接触 Vue.js 框架，当时就被它的轻量、组件化和友好的 API 所吸引。与此同时，我也开源了 iView 项目。三年的磨(cǎi )砺(kēng)，沉淀了不少关于 Vue.js 组件的经验，于是乎，将 Vue.js 最精髓的内容，编写了一本掘金小册 《Vue.…"}, {"id": "6883462967082516487", "title": "【JavaScript】有趣的作用域和提升", "desc": "最近复习到了作用域这块的内容，打算归纳总结一下，加入自己的理解和尝试，更好的理解作用域和提升相关的知识点。 1. 什么是作用域 按照我的理解，在程序的运行中，需要获取和存储变量的值，并且在某些情况下需要获取这些值包括状态，那么这些值和状态的集合就可以称之为作用域。 在词法作用域…"}, {"id": "6916814466407464973", "title": "ES数组操作方法介绍【七日打卡】", "desc": "1. find()与findIndex() find()方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。 find()方法的回…"}, {"id": "6988643224906629156", "title": "前端面试每日 3+1 —— 第831天", "desc": "今天的知识点 (2021.07.25) —— 第831天 (我也要出题) [html] 使用HTML5绘制一只小蜜蜂 [css] 使用CSS3实现立体文字重叠特效 [js] DOM是哪种基本的数据结构"}, {"id": "6844903693301579784", "title": "用 React 编写的基于Taro + Dva构建的适配不同端（微信小程序、H5、React-Native 等）的时装衣橱", "desc": "Taro 是一套遵循 React 语法规范的 多端开发 解决方案。现如今市面上端的形态多种多样，Web、React-Native、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配…"}, {"id": "6844903655313768461", "title": "手把手教你用原生JavaScript造轮子（二）——轮播图（文章内容已过期，可不看）", "desc": "通过上一篇文章的学习，我们基本掌握了一个轮子的封装和开发流程。那么这次将带大家开发一个更有难度的项目——轮播图，希望能进一步加深大家对于面向对象插件开发的理解和认识。 老规矩，在写代码之前，我们需要对要开发的东西有个感性的认识，比如你可以先在脑中大致过一遍最终的项目效果是如何的…"}, {"id": "6844904185259884558", "title": "谈谈图片上传及canvas压缩的流程", "desc": "我们通常在做图片上传的时候都会遇上这样的情况，一是后端接口限制上传图片的大小，或者是即使后端没有限制大小，因为图片太大在前端渲染时太慢，造成页面加载体验较差。因此我们很有必要对上传的图片进行压缩。 FileReader.onload:处理 load 事件。即该钩子在读取操作完成…"}, {"id": "6992866561207828510", "title": "第2章 HTML中的JavaScript", "desc": "在 JavaScript 早期， 网景公司的工作人员希望在将 JavaScript 引入 HTML 页面的同时，不会导致页面在其他浏览器中渲染出问题。"}, {"id": "6994273604540203021", "title": "一张图带你搞懂Javascript原型链关系", "desc": "在某天，我听了一个老师的公开课，一张图搞懂了原型链。 老师花两天时间理解、整理的，他讲了两个小时我们当时就听懂了。 今天我把他整理出来，分享给大家。也让我自己巩固加深一下。"}, {"id": "6844903592663449607", "title": "从零开始搭建前端脚手架", "desc": "一键拉取 github 代码"}, {"id": "6920000387814522894", "title": "【真香】我同事开发了一款媲美postMan的免费api管理工具", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 各位看官，好久不见，我又来了。今天我给大家带来一个好消息，我同事（老孟）的api接口管理工具终于开发完成，正式发布上线了。喜大普奔，秦爱德发来贺电yeah~~~ 曾多少个日日夜夜，看着日渐消瘦的老孟，一遍遍抓着为数不多的头…"}, {"id": "6987329417244573726", "title": "package-lock.json需要提交到git？", "desc": "package.json 与 package-lock.json 两者都是项目的配置文件，它们之间是什么关系呢？package-lock.json可不可以删除？"}, {"id": "6995778614079799327", "title": "使用 HTML、CSS 和 JavaScript 制作的随机密码生成器", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 随机密码生成器🙈 🎼 写在前面的 随机密码生成器 是一个简单的 JavaScript 应用程序，可以自动生成密码。这种类型的应用程序使用各"}, {"id": "6999514306345697294", "title": "🔨 新生代总结 JavaScript 运行机制解析", "desc": "引言 在一些面试中，我们或许会被问到这样的问题 还有可能会被问这样的代码 这些虽然看起来很深奥很复杂，但是如果你了解了 JavaScript 的运行机制，这些问题都能够一一化解"}, {"id": "6865184344990810126", "title": "前端进阶必经之路（一）：1.2w字深入理解JavaScript26个核心概念", "desc": "大家好，我是六六。花费了一周的时间终于写完了这篇js核心概念的汇总。创作的过程也是查缺补漏，希望大家也能有收获的。喜欢的给作者点个赞哦，创作不容易的。 如有错误，请大家积极指出来，避免误导他人。（第一次写这么多字的文章，难免会有错误的） 如有补充，告诉我，我会积极添加上来。 我…"}, {"id": "6981243994076348429", "title": "【面试说】怪异的 JavaScript", "desc": "Javascript 之所以有以上怪异表现，主要是初期设计过于匆忙，1995 年仅用用了 10 天来完成的。可能上面的行为我们用得不多，但了解它们对于我们更加深入了解 JavaScript 也是有所帮"}, {"id": "6987713761444364296", "title": "简述 JavaScript 三个不应使用的功能", "desc": "JavaScript 已经存在了相当长的一段时间（大约 26 年），在这段时间里，该语言已经有了很大的发展。 这种演变大多是有目的，特别是在最新的迭代"}, {"id": "6984228477184507911", "title": "js面试常问问题含详细答案", "desc": "总结一些前端js的知识，将笔记整理跟大家分享，有些知识会经常在前端面试的时候会问到，所以做个记录，希望对大家有所帮"}, {"id": "6997465633432535047", "title": "Typescript 类型的本质是什么", "desc": "类型 类型指的是变量的类型，而变量是一块内存空间，不同类型的变量会占用不同的字节数，而且可以做的操作也不同。number、boolean、string 等类型的变量会占用不同的内存大小。 类型分为基础"}, {"id": "6984599136842547213", "title": "CSS 奇思妙想 | 巧妙的实现带圆角的三角形", "desc": "之前在这篇文章中 -- 《老生常谈之 CSS 实现三角形》，介绍了 6 种使用 CSS 实现三角形的方式。 但是其中漏掉了一个非常重要的场景，如何使用纯 CSS 实现带圆角的三角形呢？，像是这样： 本"}, {"id": "7002084234428940319", "title": "精读文档，快速了解Vue工具", "desc": "以图的形式总结vue相关知识点，一来可以快速了解相关知识，二来方便以后复习和查看，欢迎阅读！！！！！"}, {"id": "6950076780669566983", "title": "我曾为配置 webpack 感到痛不欲生，直到我遇到了 webpack-chain", "desc": "今天给大家介绍社区当中一个 webpack 的流式配置方案——webpack-chain，这个方案现在已经在我目前所在的团队落地，且带来了一些正向的收益。"}, {"id": "6978773901736149029", "title": "手写 Vue 系列 之 从 Vue1 升级到 Vue2", "desc": "手写 Vue 系列 之 从 Vue1 升级到 Vue2，将上篇文章中写的 lyn-vue 升级到 Vue2"}, {"id": "7001710776578899998", "title": "JavaScript表单基础", "desc": "我们应该知道JavaScript设计的的初衷很大程度上是为了处理表单验证，因为在那个远古时代表单验证是通过后台来验证的，网速都比较慢，我们向后台发送数据都需要很长时间才能接收返回数据。"}, {"id": "7000300249235357709", "title": "如何正确判断JS的数据类型", "desc": "这是我参与 8 月更文挑战的第 25 天，活动详情查看： 8月更文挑战 前言 Javascript是一门动态类型的语言，一个变量从声明到最后使用，可能经过了很多个函数，而数据类型也会发生改变，那么，对"}, {"id": "6992007156320960542", "title": "5000字带你全面深入理解JS中的Stream API｜8月更文挑战", "desc": "Streams API 能够让我们直接处理通过网络接收的数据流或通过本地任何方式创建的数据流。许多以往需要服务端配合才能实现的功能，现在网页也能轻松搞定。"}, {"id": "7000282509959233567", "title": "无头浏览器与Puppeteer中PDF生成应用指南", "desc": "最近在做项目的时候，遇到了在后端生成PDF的需求，而且生成的页面较多，且样式管理相对复杂，还原度要求较高。通过一系列的社区调研后发现，`Puppeteer`可以较为完美地应用~"}, {"id": "6991106972187623455", "title": "潮流前端周刊（第40期）- 天马牛肉饼", "desc": "封面图摄于长沙小巷里的天马牛肉饼，简直超级好吃，还可加辣椒，特别是做淘宝搭建的那群人要去吃吃😂。 前端技术 本地生活综合性需求图谱的构建及应用 https://tech.meituan.com/202"}, {"id": "7007214052065673224", "title": "ES Module", "desc": "export default 和对应的 import 1.认识导出和导入 导出（export）的东西可以被导入（import），并访问到 一个模块没有导出，也可以将其导入 2.基本用法 export "}, {"id": "6996976883883589662", "title": "弹幕效果实现(canvas)，含弹幕重叠处理", "desc": "一.知识准备 1.动画 动画——我们的眼睛具有“视觉暂留”的特性，当我们看到一幅画或一个物体后，在0.34秒内不会消失，当我们在0.34秒内切换画时，就会有一种流畅地动画效果，整个画面看起来像是在动的"}, {"id": "7001450572561776676", "title": "JavaScript事件中的内存与性能", "desc": "为什么要说内存与性能 因为事件处理程序在web中可以实现交互等其他功能，所有我们很多开发者都会在页面中大量的使用事件处理。在js中每一个函数都是对象，都占用内存空间。"}, {"id": "6998854938008748045", "title": "重学前端 | 跟着月影学JavaScript之如何写好JS", "desc": "前面已经分享了该如何写好JS的一些方式技巧，本篇就来做个最后的总结，看看写代码最应该关注什么？哪些写法是不可取，可以改进的。 前言 『前期"}, {"id": "7003945915396407304", "title": "关于JS继承，你到底了解多少？", "desc": "前言 关于继承，你到底了解多少，什么样的继承是最最优的，让我们一起来学习一些关于继承的那些知识点，带你了解他们的实现过程，以及他们的优缺点 构造函数，原型对象，实例对象三者之间的关系 先来了解他们的关"}, {"id": "6844904193258602504", "title": "10个打开了我新世界大门的 WebAPI", "desc": "原来我对好多 Web API 一无所知，打开了我新世界的大门，未来 Web 可以做到更多，早日一统江湖吧，吼吼吼。 虽然这些 API 很多目前还存在兼容性的问题，但是还是有必要了解一下的，文中的代码，我已经都测试过了。希望你看完之后能够有所收获。 你可能已经知道并使用更为流行的…"}, {"id": "7007702027564220423", "title": "深拷贝如何解决循环引用?", "desc": "当存在循环引用的时候，deepCopy 会报错，栈溢出。 obj 对象存在循环引用时，打印它时是不会栈溢出，深拷贝 obj 时，才会导致栈溢出"}, {"id": "6844903960386469895", "title": "你未必知道的CSS知识点（第二季）", "desc": "本文的每一条，都是我曾经发过的掘金沸点，其中有很多条超过了百赞（窃喜）。 鉴于时不时有童鞋翻我以前的沸点，因此，本系列收集了个人目前发过的所有CSS知识点动图，以便阅读。 两个月前，曾发过一篇《你未必知道的49个CSS知识点》，已有3000多赞，这里，老姚真心谢谢大家的支持。 …"}, {"id": "6973849126609879047", "title": "CSS ::marker 让文字序号更有意思", "desc": "本文将介绍 CSS 中一个比较有意思的新增伪元素 ::marker，合理使用，让文字序号变得更加的有意思！"}, {"id": "6844903975112671239", "title": "这可能是最通俗的 React Fiber(时间分片) 打开方式", "desc": "写一篇关于 React Fiber 的文章， 这个 Flag 立了很久，这也是今年的目标之一。 最近的在掘金的文章获得很多关注和鼓励，给了我很多动力，所以下定决心好好把它写出来。 我会以最通俗的方式将它讲透, 因此这算是一篇科普式的文章。不管你是使用React、还是Vue，这里…"}, {"id": "6883306672064987149", "title": "ES11新增的这9个新特性，你都掌握了吗？", "desc": "ECMAScript 2020 是 ECMAScript 语言规范的第11版。自1997年出版第一版以来，ECMAScript 已发展成为世界上使用最广泛的通用编程语言之一。 matchAll() 方法返回一个包含所有匹配正则表达式的结果的迭代器。使用 for...of 遍历或…"}, {"id": "7000418822612058125", "title": "js运行机制中的常见宏任务和Promise.then方法微任务实现", "desc": "JS运行机制，宏任务、微任务有哪些及区别和常见面试可能会问到的setInterval宏任务和微任务Pomise.then方法具体实现。"}, {"id": "6854573211443544078", "title": "「查缺补漏」送你 54 道 JavaScript 面试题", "desc": ". VS = 操作符优先级 可以好好想一想，你会茅塞顿开的。 这里贴上 Array.prototype.map 的 polyfill. JavaScript默认使用字典序(alphanumeric)来排序。因此结果是[1,10,2,5] 期望输出的是0,1,2,实际上却不会。原…"}, {"id": "7004721065351970846", "title": "Event Loop 事件轮询", "desc": "为什么JavaScript是单线程 JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。 JavaScr"}, {"id": "7000693155498557477", "title": "还你一个为所欲为的掘金抽奖", "desc": "寒暄 掘金的抽奖系统已经出来一段时间了，不知道大伙都抽中了什么呢，还是像我这样经历了绝望，看破红尘，存起来留给下一代。 这种抽奖场景在活动中很常见，为了更好的摸鱼，决定自己去写一个插件来解决重复劳动。"}, {"id": "6952643167715852319", "title": "Vue 源码解读（5）—— 全局 API", "desc": "目标 深入理解以下全局 API 的实现原理。 Vue.use Vue.mixin Vue.component Vue.filter Vue.directive VUe.extend Vue.set 等"}, {"id": "7003985293393002527", "title": "vscode插件—— Quokka.js的简单使用", "desc": "适合简单的一些js练习，比如什么什么js手写高频面试编程题，以及刚开始学习js的同学也可以用来写写小demo。"}, {"id": "6854573215830933512", "title": "「查缺补漏」送你18道浏览器面试题", "desc": "想要成为一名合格的前端工程师，掌握相关浏览器的工作原理是必备的，这样子才会有一个完整知识体系，要是「能参透浏览器的工作原理，你就能解决80%的前端难题」。 这篇梳理的话，更多的是对浏览器工作原理篇的查缺补漏，对于一些没有涉及到的知识点，准备梳理梳理，也正好回顾之前梳理的内容。 …"}, {"id": "7004088407483744292", "title": "JS 实现通过某个属性值对【对象数组】进行分组", "desc": "在项目开发中，调用接口请求数据时，后台返回的列表数据格式没按某一控制条件进行分组时，需要我们自己对数据重新进行处理，从而获得我们想要的数据结构 运行结果："}, {"id": "6986645219290644517", "title": "12～18k的前端面试会问个啥？（答案版上）", "desc": "基本功考察 一、关于html html语义化标签的理解seo优化 语义化简单的说就是用正确的含义的标签做正确的事eg：头部：header 导航：nav等，语义化的优点是易于修改和维护，支持无障碍阅读，"}, {"id": "6859888538004783118", "title": "「一劳永逸」由浅入深配置webpack4", "desc": "webpack在前端化过程中十分重要，所以花了一段时间学习webpack，以及webpack4新特性，本文是按照从易到难的过程，梳理部分webpack概念，常见的loader，plugins，webpack4新特新，还有部分高级概念。 Output: 如何命名输出文件，以及输出…"}, {"id": "7005421014251208711", "title": "Sentry-CLI 使用文档", "desc": "您可以在 GitHub release 页面上找到 release 列表。 我们提供适用于 Linux、OS X 和 Windows 的可执行文件。 这是一个单独的文件下载，在收到文件后，您可以将其重"}, {"id": "6844903575416487949", "title": "Cordova使用（vue）", "desc": "Cordova 能够将你的 HTML/JS 代码打包在一个原生的容器中运行，并且可以调用系统的各类软硬件接口（JavaScript API）。我们将这种架构称之为 hybrid app , 得益于这种架构，我们能将前端代码跨平台运行，并且得到接近原生应用的系统特性。最终发布到各…"}, {"id": "6940963094948478990", "title": "「JavaScript进阶」一文吃透call、apply、bind、new", "desc": "我准备花半年时间针对一些大厂面试常见的JavaScript 基础做一次系统的梳理：JavaScript进阶。觉得对你有帮助的，别忘了点个赞哦～ 把call()和apply()放在一起，是因为这两个方法非常接近，区别在于调用的时候参数形式不同。 从上面小结中，我们知道call和a…"}, {"id": "6964278768101752869", "title": "Object 认知", "desc": "在javaScript中，几乎所有的对象都是Object类型的实例，它们会从Object.prototype继承属性和方法。Object构造函数为给定值创建一个对象包装器。"}, {"id": "6844903637454422030", "title": "一个小例子搞懂redux的套路", "desc": "随着JavaScript单页应用开发日趋复杂，管理不断变化的state非常困难，Redux的出现就是为了解决state里的数据问题。在React中，数据在组件中是单向流动的，数据从一个方向父组件流向子组件(通过props)，由于这个特征，两个非父子关系的组件（或者称作兄弟组件）…"}, {"id": "6919784942352367624", "title": "Kurimudb：前端本地存储库", "desc": "介绍 Kurimudb 是什么 Kurimudb 是一款渐进式的 Web 数据仓库，可以帮你将你应用的数据，存储在 Memory 或 IndexedDB 里。我们在保持语法简单的同时，还提供了模块化、"}, {"id": "6844903856350953480", "title": "「真®全栈之路 - DNS篇」故事从输入URL开始.....", "desc": "但想着，这是别人嚼烂很多次的内容，缺乏挑战性，而且，页面操作过程中能优化的地方实在太多了。 那就干脆给自己挖个坑吧，好歹也在运维开发部待过一年的时间。 本文将尝试从前后端或运维多个角度，来述说整个站点从解析到操作过程中的优化。 1. 流程回顾 1. URL的输入到浏览器解析的一…"}, {"id": "6844903602985664525", "title": "Licia：最全最实用的 JavaScript 工具库", "desc": "在业务开发过程中，我们经常会重复使用日期格式化、cookie 操作、模板、浏览器判断、类型判断等功能。为了避免不同项目之间进行复制粘贴，可以将这些常用的函数封装到一起并发布 npm 包。在将近三年的前端开发工作中，笔者将自己平时用到的工具库统统封装到了一个项目中 Licia。目…"}, {"id": "6995849976907726855", "title": "JavaScript创建对象的方法演变", "desc": "一、工厂模式->构造函数模式：解决对象类型识别问题 从两者输出的实例对象开看，原型链是不一样的。 工厂模式原型链：实例对象->Object构造函数的原型对象，p.constructor输出Object"}, {"id": "6844903705729318919", "title": "浅探 Vue 组件化思路", "desc": "都说前端是个更新迭代飞快的领域，前端框架的演进也越来越激烈，以至于在技术社区里总看到有人求饶：“求不要更新了，老子学不动了”。 在过去的好多些年，jQuery 在前端领域都处于统治地位，在众多框架中脱颖而出，很多写惯了 jQuery 语法的开发者们，都发现再也回不去写原生 JS…"}, {"id": "6844903576368578574", "title": "简单CSS实现闪烁动画（+1白话讲解）", "desc": "提到闪烁动画，很多人可能会想起 <blink> 这个标签，亦或者是text-decoration: blink这个东西，但是这两者都有很大的局限性，身为\"专业\"前端开发者的我们怎么能满足于此呢？所以我们不得不去寻找一些其他的方法。"}, {"id": "6987635294707122213", "title": "《浅析异步和回调》", "desc": "一、什么是同步和异步？ 同步：直接能拿到结果 异步：不能直接拿到结果 在JS中，有的函数不能立刻拿到结果，需要等一会才能拿到结果，比如发送HTTP请求，等待响应需要一段时间。 如果 JS 不能直接拿到"}, {"id": "6992717360452861960", "title": "vue基础 ｜ 8月更文挑战", "desc": "说明：本文本来是提供给公司内开发阅读，有些地方不必参考 认识项目结构 详细的看https://juejin.cn/post/6844904087280943111（包含项目结构和webpack） 如果"}, {"id": "6995828393560424462", "title": "js原型及原型链", "desc": "函数原型及原型链 一、函数的 prototype 属性 每个函数都有一个prototype属性，可称为显式原型对象，它默认指向一个 Object 空对象 原型对象中有一个属性 constructor，"}, {"id": "6958356485654970381", "title": "js这绕绕的事件机制", "desc": "js的主线程通过等待任务队列，执行任务源源不断地处理用户事件和页面绘制，每次事件循环称为一次tick，包括从任务队列取出任务执行，清空微任务队列，页面重绘。"}, {"id": "6972716569407258661", "title": "一次搞懂前端this、闭包、作用域，就用代码来理解", "desc": "闭包的应用 0. 封装私有变量 1. 储存变量(缓存) 2. 防抖节流函数的实现 参考上一篇文章：解析几个JS手写函数（call、防抖节流） th"}, {"id": "6995819745953988644", "title": "「栈」leetcode 155.取出最小栈", "desc": "一、了解题目 附上原题链接：155. 最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) —— 将元素 x 推入栈中。 pop() —— 删"}, {"id": "6987283754297327629", "title": "晓前端周刊 第81期 前端周刊：前端猛男带你走进nodejs系列（三）", "desc": "业界动态 Google 与微软再次合作，改进浏览器 API ​ MongoDB 5.0 正式发布，新增时序集合功能 ​ 渐进式 Node.js 框架 Nest.js 8.0 发布 好文推荐 理解 ma"}, {"id": "6886379203843850247", "title": "JavaScript实现继承[总结篇]💯", "desc": "哈喽，大家好！我是奶茶不加糖。一个喜欢喝奶茶的前端攻城狮"}, {"id": "6937664300630671390", "title": "顶级开源项目 Sentry 20.x JS-SDK 设计艺术（理念与设计原则篇）", "desc": "本文档为 Sentry 上的 SDK 开发设置了一些常规指南。 它应该帮助内部和外部开发人员了解 SDK 的设计动机以及为什么我们以某些方式做出决定。 依赖是有成本的，而且成本很高。我们使用的每一个依赖都增加了 SDK 的体积，并增加了更多的许可、维护和安全问题。我们知道依赖关…"}, {"id": "6844903671377952782", "title": "引言· 2018年前端开发工作手册", "desc": "什么是前端开发人员? 2017年度前端开发回顾 即将在2018的发生前端故事... 第一部分：前端实践 前端开发相关职位 前端开发基础知识 前端开发进阶知识 前端程序运行环境一览 在一个团队里前端开发的角色 全栈大神 前端面试问题合辑 前端求职平台合辑 前端薪资水平 前端开发相…"}, {"id": "6993556098762440718", "title": "js 实现放大镜", "desc": "前言 图片放大镜特效大家应该都司空见惯了。当你逛淘宝天猫，浏览京东时。将鼠标移动到缩略图上，就会出现一块遮罩，且旁边还会显示一张高清图，显示的内容就是遮罩区域的图片的放大版。但有的小伙伴可能还不太明白"}, {"id": "7000170997412266021", "title": "【JS】函数节流与函数防抖 - 定义 - 实现 - 使用场景 - 自定义JS工具类", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 自定义JS工具类 相关类似的源码请看 https://gitee.com/ykang2020/my_utils"}, {"id": "7005857653297512455", "title": "JSON.stringify() 、JSON. parse()、eval()详解", "desc": "JSON.stringify() 语法：JSON.stringify(value, replacer, space) value：是必选字段。就是你输入的对象，比如数组，类等 replacer：可选。"}, {"id": "6994434583378952228", "title": "ES2018异步迭代器", "desc": "异步迭代器`（Asynchronous iteration）`是`ES2018`的新特性之一，它就是专门为了给异步数据源提供的通用遍历接口。"}, {"id": "6844903640902156301", "title": "React 16 加载性能优化指南", "desc": "关于 React 应用加载的优化，其实网上类似的文章已经有太多太多了，随便一搜就是一堆，已经成为了一个老生常谈的问题。 但随着 React 16 和 Webpack 4.0 的发布，很多过去的优化手段其实都或多或少有些“过时”了，而正好最近一段时间，公司的新项目迁移到了 Rea…"}, {"id": "6999944584813871141", "title": "用吃巧克力来理解 防抖和节流！再也不忘了！", "desc": "- 节流是拿一个定时器，你叨叨的时候，如果计时器还在计时的话，就无视；如果不在计时的话，就开始计时； - 防抖是拿一个定时器，你叨叨的时候，就重新计时； 计时结束，主动给巧克力"}, {"id": "6998892666905690126", "title": "js的五种绑定", "desc": "五种绑定 方式:默认绑定、隐式绑定、显示绑定、new绑定、箭头函数绑定 优先级：显式绑定 > 隐式绑定 > 默认绑定 new绑定 > 隐式绑定 > 默认绑定 默认绑定 隐式绑定 1. 如果函数调用时，"}, {"id": "6942319196797665288", "title": "深入理解作用域和闭包", "desc": "JavaScript中的变量是松散类型的，没有规则定义它必须包含什么数据类型，它的值和数据类型在执行期间是可以改变的。 这样的设计规则很强大，但是也会引发不少的问题，比如我们本文即将要讨论的作用域与闭包，欢迎各位感兴趣的开发者阅读本文。 理解作用域与闭包之前，我们需要先来深入解…"}, {"id": "6844903986231771143", "title": "7道简单的 JavaScript 面试题，三个月没招到一个人", "desc": "如果你符合JavaScript高级开发人员的资格，在编码面试中很有可能会被问到一些刁钻的问题。 我知道这不公平。一些不知名的人把你放在角落上下打量，似乎想看你是什么做成的。这是一次不愉快的经历。 遵循这个建议：“熟能生巧”。通过投入足够的时间，更好地定期深入了解JavaScri…"}, {"id": "6844904085926199309", "title": "2020 年，Vue 受欢迎程度是否会超过 React？", "desc": "前端框架的受欢迎程度每年都在增长， 如今，在较大型或者中型的项目，基本都需要使用框架来进行开发。 前几年，由谷歌发布的Angular和Facebook的React就开启前端框架地位竞争。 但是，在2018年，前端世界发生了重大变化，因为还有一个更强大的选手Vue参加了比赛。 接…"}, {"id": "6978832154323222541", "title": "js中的数据", "desc": "本文介绍了数据的基本类型和引用类型，数据、内存、变量之间的关系，以及变量与引用变量之间赋值的差别比较。"}, {"id": "7001480951851139080", "title": "[你不知道的JavaScript（上）] 作用域和闭包读书笔记", "desc": "JavaScript是一门编译语言，但与传统的编译语言不一样，它不是提前编译的，编译结果也不能在分布式系统移植。在传统编译语言中，编译分三个步骤。"}, {"id": "6844903962529759239", "title": "剖析一些经典的CSS布局问题，为前端开发+面试保驾护航", "desc": "width和margin实现。margin: 0 auto; table标签配合margin左右auto实现水平居中。使用table标签（或直接将块级元素设值为display:table），再通过给该标签添加左右margin为auto。 inline-block实现水平居中方法…"}, {"id": "6945114066528501767", "title": "常见的8个前端防御性编程方案", "desc": "当我们初始化一个对象obj为{}时候,obj.a这个时候是undefined.我们打印obj.a可以得到undefined,但是我们打印obj.a.c的时候，就会出现上面的错误。js对象中的未初始化属性值是undefined,从undefined读取属性就会导致这个错误(同理，…"}, {"id": "6844904094948130824", "title": "🔥【何不三连】比继承家业还要简单的JS继承题-封装篇(牛刀小试)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 看着右侧目录这么一大排的题目一、题目二、题目三...你是不很开心，终于...又有题做了。 你会发现霖呆呆的文章每期都是这么丰满，字动不动就是上万，题目动不动就是好几十题，我也很担心你们会不会不想去看。 包括我自己其实…"}, {"id": "6844903929755484167", "title": "关于前端学习路线的一些建议（内含经典自测题）", "desc": "这几个月几乎每天都会有朋友加我微信，而他们问的最多的问题就是 —— 前端技术现在如此繁杂，我到底应该如何学习。这个话题太大了，几句话回答不好；也由于这个问题确实困扰了很多前端开发人员，所以我也就着手系统的输出这篇文章。 我们俨然能感受到前端岗位现在已经发展成了最重要的研发岗位之…"}, {"id": "6872144813051871246", "title": "跟着大佬学防抖节流", "desc": "本文非原创，应各位掘友要求分享给大家（文章较长）。 因为这个例子很简单，所以浏览器完全反应的过来，可是如果是复杂的回调函数或是 ajax 请求呢？假设 1 秒触发了 60 次，每个回调就必须在 1000 / 60 = 16.67ms 内完成，否则就会有卡顿出现。 现在随你怎么移…"}, {"id": "6993520730239402020", "title": "用canvas写了一个流光特效插件", "desc": "本插件初衷专为 大数据可视化页面打造，提供UI的流光动效 插件提供了直线流光、曲线流光两种动效方式，并且内置有单帧渲染方法、自动动画方法等等 背景素材是用的网上找的资源"}, {"id": "6844903807789318152", "title": "【半月刊 3】前端高频面试题及答案汇总", "desc": "半月刊第三期到来，这段时间 Daily-Interview-Question 新增了 15 道高频面试题，今天就把最近半月汇总的面试题和部分答案发给大家，帮助大家查漏补缺。 更多更全的面试题和答案在下面的项目地址中，点击查看。 timers定时器：本阶段执行已经安排的 setT…"}, {"id": "6992738808517099528", "title": "webpack实战之手写一个简易的loader和plugin", "desc": "🔔序言 对于 webpack 来说， loader 和 plugin 可以算是需求程度最为广泛的配置项了。但是呢，单单止步于配置可能还不够。"}, {"id": "6960460126796906532", "title": "精读《算法基础数据结构》", "desc": "掌握了不同数据结构的特点，可以让你在面对不同问题时，采用合适的数据结构处理，达到事半功倍的效果。 所以这次我们详细介绍各类数据结构的特点，希望你可以融会贯通。 精读 数组 数组非常常用，它是一块连续的"}, {"id": "6954393788001288199", "title": "JS中真的存在预编译吗？这种“行为”是怎么进行的？", "desc": "前言 预编译，顾名思义就是是做些代码文本的替换工作。是整个编译过程的最先做的工作。JavaScript 的圣经 —— MDN 明确地说过， JavaScript 是一个解释型语言，而并非编译型语言，所"}, {"id": "7001522790784303112", "title": "时间对象及时间戳的运用（时针、倒计时）", "desc": "时间对象 时间的获取 时间的操作 及特别需要注意的两点 时间的操作实现时针的写法 时间戳 实现 倒计时的写法注意事项"}, {"id": "6995882287539683358", "title": "JavaScrip入门指南之“Web API、DOM”（笔记十）", "desc": "Web API介绍 API 的概念 API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数或方法，目的是提供应用程序与开发人员基于某软件或硬"}, {"id": "6936871299234922509", "title": "原来也没有那么难！Vue商城开发 | 技术点评", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 使用Vue开发商城全流程的界面设计，如首页，产品展示，购物车，下单，会员界面等。（首页开发，用户管理，实现产品，新闻页面，购物，和订单处理） Vue.js入门，数据绑定，表单和双向数据绑定，条件和循环指令，样式绑…"}, {"id": "7002419362430713893", "title": "湖中剑 前端周刊 #6 | 2021-08-30", "desc": "周刊收集包括前端（但不限于前端）的文章、新闻、开源项目、工具等等，每周一更新。 📰 News TypeScript 发布4.4版本 主要变更： 提供针对 Aliased Conditions 的控制流"}, {"id": "6844904041282027527", "title": "看完这几道 JavaScript 面试题，让你与考官对答如流（上）", "desc": "1. undefined 和 null 有什么区别？ 2. && 运算符能做什么 3. || 运算符能做什么 4. 使用 + 或一元加运算符是将字符串转换为数字的最快方法吗？ 5. DOM 是什么？ 6. 什么是事件传播? 7. 什么是事件冒泡？ 8. 什么是事件捕获？ 9. …"}, {"id": "6844903842635579405", "title": "【面试篇】寒冬求职之你必须要懂的Web安全", "desc": "随着互联网的发展，各种Web应用变得越来越复杂，满足了用户的各种需求的同时，各种网络安全问题也接踵而至。作为前端工程师的我们也逃不开这个问题，今天一起看一看Web前端有哪些安全问题以及我们如何去检测和防范这些问题。非前端的攻击本文不会讨论(如SQL注入，DDOS攻击等)，毕竟后…"}, {"id": "6994563519047794701", "title": "🚀详解JavaScript系列之数组(十)终结篇", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 前言 reduce() 作用: reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。返回值"}, {"id": "7002122057379119140", "title": "面试常问的 JavaScript 数据结构与算法 （适用新手）", "desc": "1 数组 数组去重（三种方法） 方法一：arr.forEach 方法二：arr.forEach+空对象 方法三：集合Set，利用集合Set自身的去重功能 concat 数组合并 slice 数组切片 "}, {"id": "7003267384358207501", "title": "原型 原型链", "desc": "js分为函数对象和普通对象，每个对象都有__proto__属性，但是只有函数对象才有prototype属性 Object、Function都是js内置的函数, 类似的还有我们常用到的Array、Reg"}, {"id": "7002975286539075592", "title": "JavaScript中this指向问题", "desc": "无论是工作或者面试中，this指向问题是经常遇到的。所以这篇文章把常见的指向问题列出来给大家，避免踩坑。首先我们要知道，在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确"}, {"id": "7002036441601540109", "title": "「轻松科普」浏览器中的 JavaScript", "desc": "学习编程知识，能不能生动有趣，容易理解呢？我还在探索尝试的过程中，这篇文章，将从不一样的角度切入，让大家对浏览器中的 JavaScript 有了一些了解，希望大家看完之后，都有不一样的收获。"}, {"id": "7004735253755478029", "title": "必须知道的JavaScript String原生方法", "desc": "在JavaScript中，字符串的原生方法并不多，所以字符串操作是每个前端必须掌握的，面试的时候也会被重点考察。 创建字符串 静态方法 fromCharCode() 将Unicode编码转换为字符 f"}, {"id": "6844904201672196110", "title": "总感觉自己不会的太多了，不知该如何下手？", "desc": "前端东西确实蛮多，但也没必要什么都想学。一旦你有这个想法，多半会像个无头苍蝇乱飞。这个看看，那个学点，到头来啥东西都没学好。 这样的例子其实我在读者里看到好些了，学习确实看起来是在学习，啥资料都收藏了，今天看会这个技术的视频，明天拿上另一个技术的书读起来，但是这种学习方式相当低…"}, {"id": "6945240902625394718", "title": "你真的了解执行上下文吗？", "desc": "由于JS是单线程的，每次只能做一件事情，通过这种机制，我们能够追踪到哪个函数正在执行，其他函数在调用栈中排队等待执行。 JS引擎第一次执行脚本时，会创建一个全局执行上下文压到栈顶，然后随着每次函数的调用都会创建一个新的执行上下文放入到栈顶中，随着函数执行完毕后被执行上下文栈顶弹…"}, {"id": "6999443086547877925", "title": "执行上下文和调用栈", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 执行上下文和调用栈这两个概念便一直伴随我们左右，我们每编写的每一行代码都和其息息相关，理解这两个隐藏在代码后的执行逻辑，有助于更好的编写代"}, {"id": "6880882560973438984", "title": "阿里新开源Sifo--初步上手体验", "desc": "刚刚也提到了刚刚接触到Sifo的时候我以为他是一个low code的解决方案，但是这个表述并不准确，先来看下另外一款类似能力的解决方案，也就是百度的amis，这款解决方案的话他的着眼点就完全在于low code，旨在全部通过JSON配置的方式快速低成本的搭建出前端页面。而Sif…"}, {"id": "7002985912091017246", "title": "call、apply、bind的应用与区别", "desc": "call 可以这么理解： 看一个例子： apply 可以这么理解： 看一个例子： call和apply可用来借用别的对象的方法，这里以call()为例： 从上面我们看到，Person2 实例化出来的对"}, {"id": "6991496588401049631", "title": "前端知识链条中少不了的一环--Ajax｜ 8月更文挑战", "desc": "什么是Ajax？ Ajax的核心是JavaScript对象XmlHttpRequest，XmlHttp使我们可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。"}, {"id": "6982460666976141343", "title": "Kraken v0.8.0 发布 — 支持 Flutter 2.0", "desc": "官网：https://openkraken.com/ Github: https://github.com/openkraken/kraken 自 2021年4月21日开源以来，北海（Kraken）就"}, {"id": "6987934009888079909", "title": "让前端页面中的文字更加生动有趣", "desc": "有时候有些页面需要生动的表现力，我们不得不运用 SVG、CANVAS、CSS、WebGL等等技术来满足需求。笔者这次收集了一些富有生动表现力的字符串效果，里面涵盖以上技术。只要你修改字符串，就可"}, {"id": "6844903956905197576", "title": "深入浅出 Babel 上篇：架构和原理 + 实战", "desc": "✨满满的干货，不容错过哦. 写文不易，点赞是最大的鼓励。 文章下篇已经更新：深入浅出 Babel 下篇：既生 Plugin 何生 Macros 有点冷清，赞起来。 上图是 Babel 的处理流程, 如果读者学习过编译器原理，这个过程就相当亲切了. 1️⃣词法解析(Lexical…"}, {"id": "6961545472204865572", "title": "Vue 源码解读（10）—— 编译器 之 生成渲染函数", "desc": "深入理解渲染函数的生成过程，理解编译器是如何将 AST 变成运行时的代码，也就是我们写的类 html 模版最终变成了什么？"}, {"id": "6844903599080734728", "title": "webpack4-用之初体验，一起敲它十一遍", "desc": "在webpack4之前，提取公共代码都是通过一个叫CommonsChunkPlugin的插件来办到的。到了4以后，内置了一个一模一样的功能，而且起了一个好听的名字叫“优化” 好了，就写到这里吧，想必大家也看累了吧，辛苦大家了，哈哈。"}, {"id": "6844904094079926286", "title": "最简实现Promise，支持异步链式调用（20行）", "desc": "在面试的时候，经常会有面试官让你实现一个 Promise，如果参照 A+规范来实现的话，可能面到天黑都结束不了。 说到 Promise，我们首先想到的最核心的功能就是异步链式调用，本篇文章就带你用 20 行代码实现一个可以异步链式调用的 Promise。 这个 Promise …"}, {"id": "7002248752543039501", "title": "使用canvas对图片进行点位截取的hooks", "desc": "背景 我在忙碌且枯燥且乏味日子里，突然有那个一天，产品经理提了这么一个需求：由于算法引擎想提升效率，本来由他们截取的图片现在由前端去截取。我突然感觉，我的摸鱼日子要被打破了。终于有了一个有意思的需求了"}, {"id": "6929755669683765261", "title": "🐮写给零基础的前端算法入门指南，acmer带女友刷80+【递归与回溯篇】｜牛气冲天新年征文", "desc": "原本打算通过一篇文章介绍一下，推荐一下自己的刷题方式和刷题路线，得到一些伙伴的反馈：最好还是更加详细，面向零基础，小白这些，还有github访问速度也是一方面问题，可能图片都加载不出来。 因此，我打算分模块出几期文章，这样你只用通过首发在掘金的文章即可了解 Chocolate …"}, {"id": "6990614690665611294", "title": "技术周报 · 2021-07-30", "desc": "小编推荐 如何快速打造一款技术产品 前端如何赋能业务 小程序 Taro3 跨端跨框架原理初探 小程序性能极致优化：独立分包和性能测速上报 前端工程 5000 万行以上大型代码仓库工程实践 你可能并不需"}, {"id": "7000965564692693029", "title": "发布者订阅者模式，看这一篇就够辣！", "desc": "发布者订阅者模式相比于观察者模式多了一层事件调度中心。主要有发布事件，触发事件，删除事件等功能。 ES5原型写法 测试 记录记录！"}, {"id": "7001786915158491172", "title": "【浏览器-题库】（一）｜8月更文挑战", "desc": "目录 PV UV 的区别 【PV页面访问量, UV(独立访客)一天24H内相同的客户端只算一次】 浏览器的储存 【cookie 4kb ，localStroage 5MB】 浏览器的缓存 【强缓存 >"}, {"id": "6982533707898814471", "title": "Chrome Tools花式玩法（三）", "desc": "分析页面性能的时候通常会用Performance，但它提供的是回顾性数据。如果想要看实时的性能数据表现，我们就可以使用Performance monitor，像在日常工作中遇到类似内存泄漏等问题."}, {"id": "6844903600737484808", "title": "Vue.js中 watch 的高级用法", "desc": "上面的代码的效果是，当我们输入firstName后，wacth监听每次修改变化的新值，然后计算输出fullName。 这里 watch 的一个特点是，最初绑定的时候是不会执行的，要等到 firstName 改变时才执行监听计算。那我们想要一开始就让他最初绑定的时候就执行改怎么办…"}, {"id": "6995559820669648909", "title": "『面试的底气』—— 设计模式之代理模式(二)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7006847817696149512", "title": "JS原生Background Tasks", "desc": "一.window.requestIdleCallback 1.作用： 这个方法将会在浏览器的空闲时间调用函数排队。这样可以使操作者在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，比如动画"}, {"id": "7001019763644186661", "title": "浅析浏览器渲染优化策略", "desc": "这是我参与 8 月更文挑战的第 27 天，活动详情查看： 8月更文挑战 前言 本文将从浏览器渲染过程开始说起，然后会谈到回流和重绘，最后会基于浏览器的运行原理，给出一些优化策略，来帮助我们打造高性能的"}, {"id": "6912220538286899207", "title": "如何利用 JavaScript 实现并发控制", "desc": "在开发过程中，有时会遇到需要控制任务并发执行数量的需求。 例如一个爬虫程序，可以通过限制其并发任务数量来降低请求频率，从而避免由于请求过于频繁被封禁问题的发生。 接下来，本文介绍如何实现一个并发控制器。 上述示例代码利用 Promise.all 方法模拟6个任务并发执行的场景，…"}, {"id": "6997874691285188645", "title": "腾讯云 API 网关应用认证之 JavaScript 实现的踩坑经历", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 腾讯云的 API 网关支持认证后请求，目的是为了保护 API 不被恶意攻击，目前，API 网关支持以下几种认证方式，免鉴权、EIAM 认证"}, {"id": "6885250789825052679", "title": "坚持造轮子第二天 - 防抖与节流", "desc": "一天造一个轮子，干就完了。 防抖和节流可以说是一对好基友，也是前端面试的手写热点考题。防抖和节流其实都是在规避频繁触发回调导致大量计算，从而影响页面发生抖动甚至卡顿。简单的说将多次回调比如页面点击或ajax调用变为一次。防抖和节流的区别在于以第一次为准还是最后一次为准。 1. …"}, {"id": "6916107880903114760", "title": "建议收藏，使用WebAssembly保护前端JS核心代码实战", "desc": "上个月我花了2天开发了一个全新的VSCode插件叫“我爱掘金”，让所有掘友可以化身为小蝌蚪，在VSCode里实时聊天。使用的是一个开源项目 workerman-todpole ，在原项目的基础上我做了大量的修改和优化。也曾试图添加一些房管功能，比如只有管理员可以使用大红色，只有…"}, {"id": "6844903696111763470", "title": "JavaScript常用八种继承方案", "desc": "更新：在常用七种继承方案的基础之上增加了ES6的类继承，所以现在变成八种啦。 构造函数、原型和实例之间的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个原型对象的指针。 继承的本质就是复制，即重写原型对象，代之以一个新类型的实例。 原型…"}, {"id": "7002515463318011911", "title": "JavaScript 异常处理与错误", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战” 当执行 JavaScript 代码时，会发生各种错误。 错误可能是程序员的编码错误，由错误输入引起的错误，或者由于其他不可预见的问题 t"}, {"id": "6987687201341440037", "title": "fixed 固定底部组件的一个样式写法小技巧", "desc": "正文 某次修改一个页面的逻辑，页面布局比较简答，整个页面 overflow-y: auto;，页面的底部放置一个 position: fixed;的固定按钮，如下： 为了避免页面主体内容被底部的固定按"}, {"id": "6989858247486210055", "title": "奇奇怪怪的 JavaScript", "desc": "函数表达式和函数声明 函数声明，会在执行当前作用域的代码之前执行完毕。 而函数表达式，只有处理器真正遇到这段代码的时候才会执行。 .sort() 的默认行为 默认情况下，sort() 会将元素转换成字"}, {"id": "6844903577421365255", "title": "前端笔试题面试题记录（上）", "desc": "过完元宵，就到上海找了波工作，现在已经入职好了，蹭波热点，写一波面试记录，内容包含笔试题和面试题，还有一些没有写进来，准备再开一篇，许久没写了，写的确实有些慢。如果喜欢的话可以点波赞，或者关注一下，希望大家看完本文可以有所收获。 跨域问题是这是浏览器为了安全实施的同源策略导致的…"}, {"id": "6844903961472974855", "title": "Chrome Devtools 高级调试指南（新）", "desc": "本文暂未涉及Performance面板的内容。 1. Chrome Devtools 的用处 2. 菜单面板拆解 3. 常用命令和调试 1. 呼出快捷指令面板：cmd + shift + p 在Devtools打开的情况下，键入cmd + shift + p将其激活，然后开始在…"}, {"id": "6977245873797349413", "title": "JavaScript 变量命名", "desc": "好的代码读起来如同在读一段文章： \"牛逼\"的代码五花八门，这里来段非常牛逼的大家感受下： 再看一个变量名逐步迭代的过程： 看完以上几个示例，我们就知道自己在变量命名这么一件简单的事情上达到了什么层次。"}, {"id": "6844903636963688456", "title": "手写一个webpack4.0配置", "desc": "确认过眼神，你还是没有准备秋招的人？时间仓促。自京东6月8号开启管培生的招聘，就意味着秋招的开始。然而你还在等着秋天的到来？今年形势应该更为严峻，随着各大技术(vue,webpack，react，微信小程序)生态越来越成熟，这也意味着我们要更加深入的去了解他们，掌握他们。比如你…"}, {"id": "6844904112803282957", "title": "😀前端入门操作系统知识，这一篇就够啦！", "desc": "此文针对非科班同学来补充程序猿必备的基础知识。 好了，这里问题是，如果没有操作系统，一个简单的1+1运算，你的js代码还需要考虑这些硬件的协调工作，比如你的代码要协调CPU资源什么时候读取你的代码，什么时候把进程切换到别的进程。。。这些脏活累活都是操作系统帮你屏蔽了，要不这代码…"}, {"id": "6844903553291517959", "title": "16年毕业的前端er在杭州求职ing", "desc": "因为曾经看过一篇文章面试分享：一年经验初探阿里巴巴前端社招所以来杭州也是带有目标的，网易！如果能有幸加入阿里，也是非常荣幸的。所以面试总是懒懒散散的，大概一天也就面试一家。 目前的状态是阿里通过了技术面和交叉面，大概下周一总监面+hr面。网易hr面结束了，在等通知，科大讯飞已经…"}, {"id": "6981308797847355400", "title": "JavaScript函数式编程解析（上）", "desc": "一些必要的概念 纯函数（Pure Function） 副作用 副作用可以包含，但不限于： 更改文件系统 在资料库写入纪录 发送一个 http 请求 状态变化 打印到屏幕/ log DOM 查询 存取系"}, {"id": "6993875087841558565", "title": "编辑表格输入内容、根据input输入框输入数字动态生成表格行数、编辑表格内容提交传给后台数据处理", "desc": "编辑表格输入内容、根据input输入框输入数字动态生成表格行数、编辑表格内容提交传给后台数据处理 记录自己学习做的东西，写的小demo"}, {"id": "6844903862302670862", "title": "用JS开发跨平台桌面应用，从原理到实践", "desc": "使用Electron开发客户端程序已经有一段时间了，整体感觉还是非常不错的，其中也遇到了一些坑点，本文是从【运行原理】到【实际应用】对Electron进行一次系统性的总结。【多图，长文预警～】 本文所有实例代码均在我的github electron-react上，结合代码阅读文…"}, {"id": "6844904063872532487", "title": "2020必备VS Code 插件(内附 gif 图)", "desc": "推荐几个非常实用的 VS Code 插件. 附 gif 图. 1. Better Comments Better Comments 你可以使用不同的前缀来让注释显示为不同的颜色。 非常适合快速扫描并发现重要的代码片段。 若使用的话, 建议团队统一规范. 2. Bracket P…"}, {"id": "6844903714164047879", "title": "看看这些被同事喷的JS代码风格你写过多少", "desc": "现在写代码比以前好多了，代码的格式都有eslint,prettier,babel(写新版语法)这些来保证，然而，技术手段再高端都不能解决代码可读性（代码能否被未来的自己和同事看懂）的问题，因为这个问题只有人自己才能解决。我们写代码要写到下图中左边这样基本上就功德圆满了。 你可以…"}, {"id": "7004849414682935303", "title": "JavaScript 回顾（九）", "desc": "1， 事件对象 （1）onmousemove（鼠标移动事件） 当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数。在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标，"}, {"id": "6844903655125024776", "title": "ES6核心，值得驻足花一天时间来学习", "desc": "在es5时，只有两种变量声明，var 和function。在es6中新增了四种let和const，以及另外两种声明import和class。 我们在代码块中声明了a，b。然后a is not defined.这是因为let命令只在对应的代码块中有效，我们在外部去引用它，就会报错…"}, {"id": "6989433079760683022", "title": "js烧脑面试题大赏", "desc": "本文精选了20多道具有一定迷惑性的js题，主要考察的是类型判断、作用域、this指向、原型、事件循环等知识点，每道题都配有笔者详细傻瓜式的解析，偏向于初学者，大佬请随意。 第1题 第2题 第3题 第4"}, {"id": "6958654275194978340", "title": "原生JS实现轮播图！！！", "desc": "轮播图原理就是图片的移动。所有轮播图片横向排列，在一个窗口中显示一张图片，窗口外的图片隐藏，每一次一排图片就是移动一张图片的距离，切换到下一张图片，即可实现图片轮播。 图片的移动有两种方式： tran"}, {"id": "6993945759926206495", "title": "ES6 reduce 实现异步串行【初中级前端必会】", "desc": "何为异步 以上是关于异步的概念的解释，接下来我们通俗地解释一下异步：异步就是从主线程发射一个子线程来完成任务。 那么回到正题，如何实现一个异步串行？ 异步串行 reduce构造连续 Promis"}, {"id": "7004114982849740807", "title": "十一个案例带你搞懂JavaScript的事件循环机制——EventLoop", "desc": "setTimeout中递归自己，浏览器会出现什么样的效果？Promise的then中递归自己，浏览器又会出现什么样的效果？"}, {"id": "7002605719597875207", "title": "什么是实例对象", "desc": "1.对象是什么 对象是一个容器，封装了属性（property）和方法（method）。 2.构造函数 面向对象编程的第一步，就是要生成对象。典型的面向对象编程语言（比如 C# 和 Java），都有“类"}, {"id": "7004612308055883784", "title": "JavaScript字符串API大全", "desc": "一、charAt() 返回在指定位置的字符。 二、charCodeAt() 返回在指定的位置的字符的 Unicode 编码。 三、concat() 连接字符串。 四、indexOf() 检索字符串。i"}, {"id": "6993606017523122213", "title": "🚀详解JavaScript系列之数组(七)", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 背景 在开发中，我们常常需要获取并操作数组中的每一个元素，然后得到想要的返回结果。这样就需要我们去对数组做一个遍历的操作。 遍历数组的"}, {"id": "6844904093828251662", "title": "2020面试收获 - js原型及原型链", "desc": "2020年是特殊的一年，由于疫情原因，大家都窝在家办公。而我则怀着梦想，从天津来到了北京，开启了人生的第一次跳槽。 在面试过程中，频频被原型相关知识问住，每次回答都支支吾吾。后来有家非常心仪的公司，在二面时，果不其然，又问原型了！ 有些理解还比较浅薄，随着时间的推移和理解的深入…"}, {"id": "6866372840451473415", "title": "彻底理解Promise原理及全功能实现", "desc": "Promise作为前端异步解决方案的出现，可以说是火遍全网，几乎所有的异步场景甚至框架都会有它的身影，比如Vue的批量处理等。今天我们就按照Promise A+ 规范来完整实现Promise全功能，话不多说，上代码。 测试成功，promise的改造就算符合规范了。这个难点在于t…"}, {"id": "6982494781834264612", "title": "Javascript执行机制 - 宏任务与微任务、事件循环(Event Loop)", "desc": "我们常说 Javascript （下面简称JS）是一门单线程编程语言，而单线程就意味着同一时刻只允许一个代码段在主线程上执行，那么对于执行一些需要长时间等待的任务来说，它们会占据线程不放。"}, {"id": "6844903842773991431", "title": "你真的了解 Cookie 和 Session 吗", "desc": "我在做面试官的时候，曾经问过很多朋友这个问题： Cookie 和 Session 有什么区别呢？大部分的面试者应该都可以说上一两句，比如：什么是 Cookie？什么是 Session？两者的区别等。 但如果再往深入探讨的话，就慢慢有一些朋友不太了解了，谈起原理时就很少有朋友全部…"}, {"id": "6956849493245591588", "title": "这些常见的手写题，你掌握了吗？", "desc": "前言 手写代码很能考验面试者的编码能力，所以这类题常常受到面试官的青睐，如果没提前准备的话，经常会有挂一漏万的情况，现在我们来总结一下那些经常被问到的手写题。 1. 实现 instanceof 运算符"}, {"id": "7002450024202240037", "title": "【ci】ci过程中的一些坑点", "desc": "背景 我们项目组ci/cd没有一起，因为部署是在k8s里的，所以cd过程是登录master节点手动修改yml文件，然后apply重启服务就可以了。所以要做的只有ci。 常规理解 ci服务器上启一个no"}, {"id": "7001101053202563080", "title": "JavaScript 设计模式之工厂模式", "desc": "设计模式，其实就是一些套路，帮助我们写出这样的代码。工厂模式，做的事情就是将创建对象的过程抽离，今天我们来聊聊工厂模式。"}, {"id": "7001762158832779277", "title": "jsc: 我的新好友", "desc": "最近，我的朋友告诉了我一个很棒的隐藏命令行工具。在 Safari 和 一些其他 Apple 产品 使用的 JavaScript 架构中，有一个叫做 `jsc` 的工具。"}, {"id": "7001998897346248717", "title": "手把手带你理解单例模式的实现思路，其实也就那样", "desc": "你有没有思考过这样一个问题：如何才能保证一个类仅有一个实例？这就要说到我们的单例设计模式啦。今天我们来讲讲单例模式。"}, {"id": "6907028003469918222", "title": "通过Object.defineProperty数据拦截对比，体验一下proxy有多优秀", "desc": "这里通过vue1.x,vue2.x时的数据拦截来说一下Object.defineProperty。 先来用Object.defineProperty实现一下对象的拦截。 上面通过遍历data的数据，进行了一次简单的拦截；看似没有问题，但如果我们改变data.h.c是不会触发se…"}, {"id": "7006480692217380878", "title": "全局对象window下找不到const、let声明的变量？？？（第一次发现整个人都。。。）", "desc": "工作是苦涩也是甘甜，丰富自己坚持不懈 昨天写this的默认绑定的时候无意间发现了问题，全局作用域找不到const、let声明的变量，上代码： 看到这个瞬间蒙圈？？满脸的问号。。。什么鬼东西？什么情况？"}, {"id": "7006447182790262821", "title": "JavaScript预编译", "desc": "JavaScript 预编译 在重新学习JavaScript之前，先了解一下JavaScript从编译到执行的过程，大致分为四步： 词法分析 语法分析：检查代码是否存在错误，若有错误，引擎会抛出语法错"}, {"id": "6958609646013644836", "title": "【Vue】Vue-i18n 变量使用以及采坑总结", "desc": "前言 笔者目前在 Shopee 工作，我们公司主要业务是跨境电商，业务涉及到多个国家，所以我们各个系统都会涉及到国际化翻译。我们 Vue 项目技术上采用了 Vue-i18n 这个库。 今天就聊聊这个库"}, {"id": "6997617674532438046", "title": "面试：js手动实现reduce方法", "desc": "面试官问：你听说过reduce吗？我：那必须听过呀， 面试官：那你用reduce来实现一下数组去重？我内心尼玛万马奔腾~~"}, {"id": "6844903718387875847", "title": "脑阔疼的webpack按需加载", "desc": "随着单页应用发展的越来越庞大，拆分js就是第一要务，拆分后的js，就可以根据我们需求来有选择性的加载了。 这里就添加了一句，chunkFilename而已，chunkFilename的作用就是用来给拆分后的chunk们起名字的配置项。 还是只打包出了一个main.js，毫无变化…"}, {"id": "7004391923020464141", "title": "如何阅读 ECMAScripts pecification (总结)", "desc": "阅读 ECMAScripts pecification 的前置知识。阅读后，遇到问题或者感兴趣可以直接查规范。"}, {"id": "6844903670300016648", "title": "Vue-cli@3.0 插件系统简析", "desc": "Vue-cli@3.0 是一个全新的 Vue 项目脚手架。不同于 1.x/2.x 基于模板的脚手架，Vue-cli@3.0 采用了一套基于插件的架构，它将部分核心功能收敛至 CLI 内部，同时对开发者暴露可拓展的 API 以供开发者对 CLI 的功能进行灵活的拓展和配置。接下来…"}, {"id": "6999271948203737096", "title": "揭开提升神秘的面纱", "desc": "或许看完这段代码很多小伙伴会认为是undefined。 或许你错了... 我们来捋一捋这其中的细节, 在var hello声明在hello = 2的后面,很多人认为变量被重新赋值了,故被赋予默认值un"}, {"id": "6939129392715005983", "title": "【深入理解】面试热点-- 闭包 ｜ 技术点评", "desc": "一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函…"}, {"id": "6844903502968258574", "title": "前端安全知识", "desc": "xss: 跨站脚本攻击（Cross Site Scripting）是最常见和基本的攻击 WEB 网站方法，攻击者通过注入非法的 html 标签或者 javascript 代码，从而当用户浏览该网页时，控制用户浏览器。 DOM即文本对象模型，DOM通常代表在html、xhtml和…"}, {"id": "6844903989843066887", "title": "《前端实战总结》之使用postMessage实现可插拔的跨域聊天机器人", "desc": "由于笔者之前的项目中接触过聊天机器人的项目，主要实现机器人客服模块，以及支持跨多平台使用的目的，所以特地总结一下，希望有所收获。 1. 跨域技术常用方案介绍 首先要强调的是跨域的安全限制都是对浏览器端来说的，服务器端是不存在跨域安全限制的。我们常用的跨域技术主要有如下几种： J…"}, {"id": "7000704280449515533", "title": "重温js——属性描述符", "desc": "属性描述符 数据属性 在我们使用对象的过程中，对一个对象进行取值和赋值的时候，该属性称之为 数据属性 存取器属性 语法 例如: 存取器修饰"}, {"id": "6844903569141809166", "title": "移动端事件touchstart、touchmove、touchend详解", "desc": "这几个事件最早出现于IOS safari中，为了向开发人员转达一些特殊的信息，所以新增了这些事件，随着Android中的webkit的加入，慢慢地这样的专有事件成了事实的标准，从而导致W3C开始指定Touch Event规范的内容。 touchstart 手指触摸屏幕时触发，即…"}, {"id": "6992048915876937759", "title": "前端监控系统之性能监控｜8月更文挑战 ", "desc": "前言 为什么要做前端监控？ 比用户更快的发现问题，并可以快速定位到问题及时修复 收集加载/访问指标，为用户体验方向优化提供正确方向 对面向用户的网站进行收集用户行为，支撑决策的重要依据 第三方监控服务"}, {"id": "6844904079257239560", "title": "Hooks 的性能优化及可能会遇到的坑总结", "desc": "class 组件中性能优化可以通过 shouldComponentUpdate 实现或者继承自 PureComponent，当然后者也是通过 shouldComponentUpdate 去做的，内部对 state 和 props 进行了 shallowEqual。 对于函数组件…"}, {"id": "6873305669786107918", "title": "让我们一起来做小程序直播吧！", "desc": "直播这两年太火了，做直播的公司也越来越多，尤其是今年小程序针对直播组件的优化（性能优化 + 同屏渲染），催生了很多的小程序直播应用。京喜直播的小程序端上线也有几个月了，基于内部分享，当前稍加总结一下，我这里就主要讲讲直播的几个重点场景。 这种方式固然简单，但是在消息越来越多的时…"}, {"id": "7003385931382128653", "title": "为什么for循环中用var和let的结果会不一样？", "desc": "首先，先看两个例子，例子如下： 例子一： 例子一代码 例子一结果如下： 例子二： 例子二代码 例子二结果如下所示： 结论： 嗯？为什么结果不一样？？？发生了什么？ 最开始学js的时候我也不明白，后面终"}, {"id": "6844903704307433486", "title": "前端实现文字跑马灯的三种方式", "desc": "最近写了一个文字跑马灯的项目需求，刚开始用js写，能够完成需求。后面想着换种方式(分别是html和css)来实现同一个需求,以减少性能消耗。 1.判断文字的长度和容器的长度，如果文字长度大于容器长度，则开始滚动，否则不滚动。(offsetWidth) 2.获取滚动条到元素左边的…"}, {"id": "6993498947813638157", "title": "JavaScript温故而知新 - 原型和原型链", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 原型 JavaScript 常被描述为一种基于原型的语言——每个对象拥有一个原型对象 当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还"}, {"id": "6844903667900874766", "title": "少侠，留步，图片预览术", "desc": "少年，我看你骨骼精奇，是万中无一的武学奇才，我这有本《图片流》秘籍，见与你有缘，就送于你了。 本文所说的图片流就是读取本地图片，并在页面使用文件流的方式显示出来。 paste事件提供了一个clipboardData属性，是一个DataTransfer类型的对象，前面我们说到，拖…"}, {"id": "6971782374157713439", "title": "实践：利用ArrayBuffer在线预览指定文件夹下的所有内容", "desc": "利用ArrayBuffer读取指定文件内容，使用树形结构展示指定目录下的所有文件，按需展开在线预览指定文件内容"}, {"id": "6963161636592943112", "title": "JavaScript 系列六: 函数", "desc": "前言 在开始学习之前，我们想要告诉您的是，本文章是对JavaScript语言知识中 \"函数\" 部分的总结，如果您已掌握下面知识事项，则可跳过此环节直接进入题目练习 函数简介 函数名称 函数重载 函数声"}, {"id": "6958989831212892196", "title": "React hooks与Faced pattern", "desc": "写在开头 去年CTO一直跟我在宣扬faced模式，但是当时没有get到它的点 等我get到的时候，他已经不在我身边工作了，真是一个悲伤的故事 阅读本文前需要先了解的知识点 什么是react hooks"}, {"id": "6949533652439007268", "title": "数组扁平化、深拷贝、总线模式js手写", "desc": "前言古人学问无遗力，少壮工夫老始成。纸上得来终觉浅，绝知此事要躬行。看懂一道算法题很快,但我们必须将这道题的思路理清、手写出来。将一道题的思路理一理在进行coding,我们可以来到死磕36道js手写题"}, {"id": "6881429401582436365", "title": "富文本编辑器Prosemirror - 入门", "desc": "prosemirror-model：负责prosemirror的内容结构。定义了编辑器的文档模型，用于描述编辑器内容的数据结构，并实现了对编辑器内容的一原子的操作。实现了一套索引系统，用于处理位置信息\u0010。同时提供了从DOM -> ProsemirrNode的Parser以及反向…"}, {"id": "6844903639086006279", "title": "用Vue来实现图片上传多种方式", "desc": "没有业务场景的功能都是耍流氓，那么我们先来模拟一个需要实现的业务场景。假设我们要做一个后台系统添加商品的页面，有一些商品名称、信息等字段，还有需要上传商品轮播图的需求。 我们就以Vue、Element-ui，封装组件为例子聊聊如何实现这个功能。其他框架或者不用框架实现的思路都差…"}, {"id": "6844904109691109390", "title": "8个问题带你进阶 React", "desc": "高阶组件(HOC) , render props 以及 hook 的对比和用处. 如果以上的问题你都懂的话, 那么你可以关闭这个网页了. 一. 高阶组件(HOC) , render props 以及 hook 的对比和用处. 二. 虚拟 DOM 是什么? 在 React 中, …"}, {"id": "6982742120222654495", "title": "谈谈获取当前元素到页面各个部分的距离问题", "desc": "哈喽，大家好哇！今天大冰块来谈谈获取当前元素到页面各个部分的距离问题。 在我们进行懒加载的逻辑时，经常会遇到各种获取距离问题，比如获取当前元素到页面底部的距离，获取文档网页底部到可视区窗口距离，获取各"}, {"id": "6966049183698534414", "title": "ES6的解构赋值是深拷贝or浅拷贝?", "desc": "ES6的解构赋值，大家应该都清楚，就是可以快速取出数组或者对象中的值；我们先来看一个使用案例： 更多的解构赋值知识可以查看: https://es6.ruanyifeng.com/#docs/dest"}, {"id": "6844904038526353422", "title": "如何全面出色的回答面试官防抖与节流提问？", "desc": "阅读本文你将收获：清晰认识防抖与节流之间的区别，并能够正确的应用与实际开发中多样的代码实现闭包的特性的应用什么是防抖技术最终都要服务于社会，任何脱离业务（社会）实际的都是耍流氓，防抖当然也不例外，实际"}, {"id": "6936250525310517278", "title": "0.1+0.2问题的一些思考", "desc": "在js中只有number类型，没有进行整数和浮点数的区分而在js的内部，number是采用IEEEF754规范中的64位双精度浮点数进行编码的，所以1===1.0是为true的，也就是说js语言底层根"}, {"id": "6956103205650432037", "title": "console.log是“异步打印吗”——寻求console.log的打印机制", "desc": "console.log的打印机制，控制台打印数据“凭空消失”，console.log的”异步“打印原理，是bug，还是控制台的”小魔术“，请锁定——”hyh有话说~“。"}, {"id": "6932425858472738830", "title": "JavaScript 中的循环", "desc": "先前翻译了一篇文章，JavaScript 中哪一种循环最快呢？，原作在比较上稍有偏颇，比较的内容似乎也不够全面，也因此想要作此文与大家分享一下。 ψ(｀∇´)ψ 不知道大家的想法是什么，但是看到结果，还是有些乍舌的 —— 其实与评论区和译文中的结果有一些出入。 以及测试平台，选…"}, {"id": "6844904036932534279", "title": "图解 JavaScript 垃圾回收 — 现代 JavaScript 教程", "desc": "对于开发者来说，JavaScript 的内存管理是自动的、无形的。我们创建的原始值、对象、函数……这一切都会占用内存。 JavaScript 中主要的内存管理概念是 可达性。 简而言之，“可达”值是那些以某种方式可访问或可用的值。它们一定是存储在内存中的。 这里列出固有的可达值…"}, {"id": "6857123751205535751", "title": "TS核心知识点总结及项目实战案例分析", "desc": "最近工作一直很忙，复盘周期也有所拉长，不过还是会坚持每周复盘。今天笔者将复盘一下typescript在前端项目中的应用，至于为什么要学习typescript，我想大家也不言自明，目前主流框架vue和react以及相关生态的内部构建大部分都采用了typescript，其原因就在于…"}, {"id": "6972045231776595976", "title": "一点点开发中的JS小技巧", "desc": "在实际工作中，经常会遇到一些特殊的场景，需要做一些处理。 这里收集了一些常用的处理方式，希望能够对大家有一些帮助。 一、字符串收尾去空格、"}, {"id": "6964687516876144654", "title": "javascript中关于函数传递参数的一点理解——区分值传递还是引用传递", "desc": "首先，ECMAscript中所有的函数是按照值传递的 这意味着函数外的值会被复制到函数内部的参数中，就类似于一个变量。如果是原始值，那么就跟原始值变量复制一样，如果是引用值，那么就跟引用值变量复制一样"}, {"id": "6957956510815092750", "title": "文字图片视差效果 html+css+js", "desc": "话不多，先看效果： 这是我在网上看到的一外国博主的创意，感觉不错，马上自己也敲了一个，果然不错~ 实现： 1.先定义一段文字，多点，起码能超过浏览器的可视区： 2.主要让section标签跟可视区一样"}, {"id": "6991755305289793544", "title": "JS原型及原型链｜ 8月更文挑战", "desc": "本文正在参加「8月更文挑战」，详情查看 活动链接 前言 借着这次8月更文挑战，我想学习和巩固一下Js基础和vue源码，刚好以文章的形式输出。 我记得红宝书中的第一章有句话：JavaScript是一种专"}, {"id": "6844903847094124552", "title": "简单梳理Redux的源码与运行机制", "desc": "前几天写了一篇react另一个状态管理工具Unstated的源码解析。 开启了我的看源码之路。想一想用了好长时间的redux，但从没有深究过原理，遇到报错更是懵逼，所以就啃了一遍它的源码，写了这篇文章， 分享我对于它的理解。 这里实现的是一个点击按钮加减数字的效果，点击触发的行…"}, {"id": "6985343642504265765", "title": "js修改鼠标选中的内容", "desc": "如果这是你的需求并且解决了你的痛点，那请你点个赞或者转载。 function sup() { var selection=window.getSelection();"}, {"id": "6993633445826002974", "title": "ES6+新增常用内容总结（一）", "desc": "本文主要是在日常开发中一些比较常用的ES6+新增的特性， 如有错误,欢迎指出,将在第一时间修改,欢迎提出修改意见和建议"}, {"id": "6995219610144342052", "title": "【重温JS】巩固基础-day12-事件对象(一)", "desc": "day12☆☆☆ 今天的内容(event 事件对象) 重要!! ☆☆☆ 可作为初学者的学习路线, 可参考一下, 学习进度也不是特别赶 用自己的理解, 简单又全面概括基础知识点, 大部分内容为白话文"}, {"id": "6914538946751889422", "title": "ES2021 新特性提前知，附案例", "desc": "ES2021 也就是 2021 年的 ECMAScript 版本。ES2021 并没有像 ES2015 那样提出很多新特性，但却合并了一些有用的特性。 本文将会用通俗易懂的代码示例来介绍 ES2021 的新特性。当然在这之前，你需要了解 JavaScript 的基础知识。 上述…"}, {"id": "6844903846993461256", "title": "深入理解 Webpack 打包分块（上）", "desc": "随着前端代码需要处理的业务越来越繁重，我们不得不面临的一个问题是前端的代码体积也变得越来越庞大。这造成无论是在调式还是在上线时都需要花长时间等待编译完成，并且用户也不得不花额外的时间和带宽下载更大体积的脚本文件。 然而仔细想想这完全是可以避免的：在开发时难道一行代码的修改也要重…"}, {"id": "6967174228231585822", "title": "一分钟了解BOM ", "desc": "BOM BOM(浏览器对象模型)的核心是window对象 1. window对象 window表示浏览器的一个实例 window对象是js访问浏览器窗口的一个接口,也是es规定的es的Global对象"}, {"id": "6844903834456702984", "title": "【译】JavaScript中的async/await", "desc": "异步的JavaScript从未如何简单！过去段时间，我们使用回调。然后，我们使用promises。现在，我们有了异步功能函数。 异步函数能够使得（我们）编写异步JavaScript更加容易，但是，它自带一套陷阱，对初学者很不友好。 在这个由两部分组成的文章中，我想分享下你需要了…"}, {"id": "6844903567560540174", "title": "初探微信小程序", "desc": "昨天上班第一天，没错，是第一天。公司今年放假很足，撒泼的我无（tian）忧（bu）无（zhi）虑（chi）的度过了漫长的十一天，上班了发现自己得了节后综合症，这病严重吗？嗯，估计得有个礼拜才能痊愈。 没出正月，都在年里，给大家拜个晚年，祝大家晚年幸福。 扯了会，接下来咱们开始正…"}, {"id": "6844903622346539021", "title": "原生JS实现一个无缝轮播图插件(支持vue)", "desc": "前段时间准备用vue加上网易云的nodejs接口，模拟网易云音乐移动端。因为想自己写一遍所有的代码以及加固自己的flex布局，所以没有使用UI组件。在轮播图部分，本来在vue里面写了一下，但是发现总是出现bug,所以后来准备封装一个插件来实现。 其次的一个原因是，以为这一学期学…"}, {"id": "6844904033660977159", "title": "实战精髓，项目级登录鉴权方案及权限跳转【Node vs Vue】", "desc": "不管是企业项目，还是个人项目，一个优秀的系统必须具有鉴权的能力，何为鉴权，是指验证用户是否拥有访问系统的权利。"}, {"id": "6946076218697449485", "title": "前端JS高频面试题---3.代理模式", "desc": "代理模式，式如其名——在某些情况下，出于种种考虑/限制，一个对象不能直接访问另一个对象，需要一个第三者（代理）牵线搭桥从而间接达到访问目的，这样的模式就是代理模式。 这是为啥呢？这就要从网络请求的整个流程说起了。一般情况下，当我们访问一个 url 的时候，会发生下图的过程： 为…"}, {"id": "6844903605070200846", "title": "从零开始搭建React应用（一）——基础搭建", "desc": "webpack4的cli(command line interface)已经移动到webpack-cli了，如果要使用CLI,你需要安装webpack-cli，具体使用可以查看webpack-cli的文档。 由于Babel默认只转换新的JavaScript句法（syntax），…"}, {"id": "6970562289380360229", "title": "循序渐进实现Promise", "desc": "promise的循序渐进的实现，功能和逻辑一步步完善。更容易接受和理解。不看不敲后悔的拍大腿。必看！！"}, {"id": "6844903753624059911", "title": "See Conf 悠鹤《蚂蚁庄园背后的技术与思考》笔记", "desc": "XX注：顺着这个例子，XX觉得这样有利于玩家随时了解当前升级情况，有利于一些战术操作从而给对方一个惊喜，或是判断当前场上局势，或者只是单纯地告诉玩家，很快就要升级了再加油补几个兵。 细节，上午场也有提到“细节”。在帮助引导系统中，通过不打扰用户的情况下，提供一些小细节给用户带来…"}, {"id": "6972352231085441031", "title": "Javascript复习第六天", "desc": "这是我参与更文挑战的第10天，活动详情查看：更文挑战 条件分支语句 三元表达式 三元表达式是js中唯一一个需要三个元素参与的表达式。 语法： 条件表达式 ? 值1 : 值2; 计算机会自行计算条件表达"}, {"id": "6991646944120537118", "title": "JavaScript中 new 一个对象过程详解｜8月更文挑战", "desc": "要创建 Person 的新实例，必须使用 new 操作符。以这种方式调用构造函数实际上会经历以下 4个步骤： 创建一个新对象； 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）； 执"}, {"id": "6844903683000385543", "title": "记录一次打包优化", "desc": "webpack本地开发时，经常会出现开发着然后打包速度很慢的情况。 可以看见每个chunk都很大 有些快达到了1M。 可以看出lodash被打包了很多次，导致加载lodash的chunk很大。 重新打包时间达到了2.592s，其中起始文件index.0a8ac.js达到了841…"}, {"id": "6844903975725400078", "title": "React基础(10)-React中编写样式CSS(styled-components)", "desc": "React是一个构建用户界面的js库,从UI=render()这个等式中就很好的映射了这一点,UI的显示取决于等式右边的render函数的返回值. 因为在render方法中声明样式化组件，每次都会动态渲染创建一个新的组件。这意味着React必须在每个后续渲染中丢弃并重新计算DO…"}, {"id": "6844903636737196045", "title": "Promise到底解决了什么问题？", "desc": "大家都知道Promise解决了回调地狱的问题。说到回调地狱，很容易想到下面这个容易让人产生误解的图片： 这也是嵌套，虽然好像不是特别美观，可我们并不会觉得这有什么问题吧？因为我们经常会写出类似的代码。 在这个例子中的嵌套的问题仅仅是缩进的问题，而缩进除了会让代码变宽可能会造成读…"}, {"id": "6844904167333429256", "title": "V8引擎详解（五）——内联缓存", "desc": "本文是V8引擎详解系列的第五篇，重点内容是关于V8引擎的内联缓存，V8之所以可以高效的运行，其内部实现了很多优化策略，其中 内联缓存 就是其中很重要的一个优化策略，本文会从一个小问题开始一起探究到底什么是 内联缓存（Inline Cache） ，简称 IC。文末会有已经完成的系…"}, {"id": "6844903661093519368", "title": "企业级React项目的个人构建总结", "desc": "距离上篇文章已经好长一段时间了，这两个星期公司派驻到京东方这边出差负责入驻项目团队的前端工作。这段时间从零搭建一下前端项目，这次给的时间比较充裕，思考的也比较多。以前也常有搭过前端项目，但是给的时间都比较紧，因此很多问题都忽略掉了。这次正好对以前的进行一次优化，并总结了一些经验…"}, {"id": "6844904104821555213", "title": "JavaScript进阶之this指向", "desc": "再谈上下文总结一下：this的指向与上下文有关由于活动对象还包含this指向，所以可以在作用域链访问到thisthis指向是在函数调用的时候才能确认，定义的时候不能确认另外值得注意的是this的值是个"}, {"id": "6850418112026984462", "title": "【万字长文】通过grunt、gulp和fit，彻底搞懂前端的自动化构建", "desc": "在上一篇文章中介绍了前端工程化中脚手架工具，这篇文章作为前端工程化的第二部分，自动化构建。 一切重复工作本应自动化。 自动化构建是前端工程化中一个重要的组成部分。 自动化就是通过机器代替人工，构建就是将源代码转换为生产代码。 机器自动将源代码转换为生产代码的过程就是自动化构建工…"}, {"id": "6973626342495485989", "title": "常用的解决跨域的方法", "desc": "跨域指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。"}, {"id": "6989507242093445157", "title": "js语法基础：var、let、function", "desc": "概念及部分选题参考mdn文档 var 概念介绍 1、变量声明，无论发生在何处，都在执行任何代码之前进行处理。 2、用 var 声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，或者对于声明在"}, {"id": "6884207513768558606", "title": "JS基础面试高频（三）：浅拷贝和深拷贝", "desc": "工作中可能会遇到这样一个问题，我明明把数据拷贝了一份，但改变拷贝后的数据居然同时会改变原始数据中的值。那就来看看为什么吧，希望这篇文章可以给你解惑。 当拷贝后的对象obj2数据改变的时候会影响原始数据obj1，因为info对象拷贝的是源对象指针。 「不管数据对象有多少层，改变拷…"}, {"id": "6864740285303324686", "title": "强烈推介的几个微信小程序开发小技巧，简单又实用", "desc": "前段时间在下开发了个微信小程序，开发过程中总结了一些我觉得对我有用的小技巧，提炼出来，相当于一个总结复盘，也希望可以帮助到大家。如果对大家确实有帮助，别忘了点赞哦 🌟 ～ 1. 开发中可能遇到的坑以及 Tips 本来想写个小技巧的，结果我总结了一堆坑，没上手之前完全想象不到微…"}, {"id": "7002407116325519367", "title": "了解AJAX五步骤", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 前言 今天我们来重学AJAX，聊聊AJAX五个步骤 简介 AJAX = 异步 Ja"}, {"id": "6844903783630127111", "title": "我如何零基础转行成为一个自信的前端", "desc": "我本科学的是国际贸易，乱选的专业。毕业后做了半年外贸，实在不喜欢，然后去做英文编辑了。第二份工作也很无聊，就是写英文软文，发表在国外的行业期刊上，给公司做广告。然后也做英文官网的内容。这是一个很没创意的工作。每天写几篇我自己都没感觉的文章，不知道价值在哪。最重要的是，这份职业里…"}, {"id": "7006136011830853668", "title": "代码输出之this问题", "desc": "this相关 1. 代码输出结果 2. 代码输出结果 3. 代码输出结果 4. 代码输出结果 5. 代码输出结果 6. 代码输出结果 7. 代码输出结果 8. 代码输出结果 9. 代码输出结果 10."}, {"id": "6993874989153779748", "title": "JavaScrip入门指南之“ES6简介”（笔记七）", "desc": "ES6语法的简介 浏览器：javascript 三个部分： ECMAScript + BOM + DOM 服务器：javascript = ECMAScript + 系统内置的核心模块(fs http"}, {"id": "7002411370238967845", "title": "「每日一题」航班预订统计", "desc": "1. 题目描述 这里有n个航班，它们分别从1到n进行编号。 有一份航班预订表bookings，表中第i条预订记录bookings[i] = [firsti, lasti, seatsi]意味着在从fi"}, {"id": "6991736335249702949", "title": "【js 进阶】八分钟搞懂 JavaScript 中的 原型（prototype）、原型链、继承 ", "desc": "大家好,我是雪月。这篇文章主要讲原型prototype、原型链和原型继承。开始（四个概念、一个例外、三个方法）每个引用类型都有对象特征，都可以自由扩展属性 每个引用类型都有一个__proto__属性"}, {"id": "6844903924520992782", "title": "关于JS中一些重要的api实现, 巩固你的原生JS功底", "desc": "在面试中，常常会遇到一些手写XXX之类的面试题，因此好好总结一下，对于巩固我们的原生js的基础是非常必要的。 尽管在网上已经有了非常多的总结文章，但在我看来有一个普遍的问题，那就是把原理性的东西过于复杂化了。如果站在面试官的角度，他的目的是在最短的时间内考察出面试者对于JS语言…"}, {"id": "6998408813162266637", "title": "Qunar 酒店 NodeJS 覆盖率收集实践", "desc": "对于一个没有维护单元测试的旧系，通过收集覆盖率来检验系统功能和熟悉系统结构不是一件容易的事情，为此我们进行了诸多的思考与尝试。 本文分享了一个通过收集覆盖率来检验系统功能和熟悉系统结构的实现方案。"}, {"id": "6985081488920281119", "title": "前端热更新原理-上篇", "desc": "web可以实现 热加载 hot-loader 或者是模块热更替 HMR 主要归功于HTML5中提出的俩种新的通信方式..."}, {"id": "6991241111167565860", "title": "🍉如何理解单线程的JavaScript及其工作原理｜8月更文挑战", "desc": "一、单线程的来源 几乎所有人都已经听过V8引擎的概念，并且很多人知道JavaScript是单线程的，JavaScript作为浏览器脚本语言，它的主要用途是与用户交互，那么为什么JavaScript是单"}, {"id": "6973222013028532237", "title": "【第一批吃螃蟹】试用 React 18 ！", "desc": "React 团队最近发布了 React 18 的 alpha 版本。这个版本主要是增强 React 应用程序的 并发渲染 能力，你可以在 React 18 中尝试体验以下几个新特性..."}, {"id": "6985072343257677855", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（一）", "desc": "感激相遇 你好 我是阿ken JavaScript是Web开发领域中的一种功能强大的编程语言，主要用于开发交互式的Web页面。在计算机、手机等设备上浏览的网页上，大多数的交互逻辑几乎都是由JavaSc"}, {"id": "7005453760663142430", "title": "dom-to-image踩坑记录", "desc": "之前调研过的需求HTML转PDF由于实现起来有诸多问题，产品最终决定把HTML转PDF需求降级为保存页面截图即可。本文记录使用dom-to-image实现截图踩过的坑"}, {"id": "6844904063729926152", "title": "25个你不得不知道的数组reduce高级用法", "desc": "reduce作为ES5新增的常规数组方法之一，对比forEach、filter和map，在实际使用上好像有些被忽略，发现身边的人极少使用它，导致这个如此强大的方法被逐渐埋没。 如果经常使用reduce，怎么可能放过如此好用的它呢！我还是得把他从尘土中取出来擦干净，奉上它的高级用…"}, {"id": "7004755773385343013", "title": "原型到原型链-JavaScript深入第一章-", "desc": "简言 原型和原型链是面试中高级基本都会问的面试题，所以想要要个一个高的工资一定要理解，其实谈不上理解，只要记住以下几点，然后进行举例说明面试这个面试题就算过了。"}, {"id": "6937862827499749406", "title": "从英雄联盟来学pixi.js", "desc": "首先回顾一下上期文章 从表情包来学canvas, 初步认识了canvas的基本用法，并且通过案例来实现了常见的2D图形类的写法。 本期进步深入canvas，认识canvas的绘图库，并且制作一款简易的lol走位小游戏(点击试玩)。如果你觉得碰撞单位有点丑，其实我是故意的，学会他…"}, {"id": "7002426812269592589", "title": "一文彻底搞懂：js函数防抖与节流", "desc": "本文介绍了js中常见的2中函数优化机制，函数防抖与节流，他们都是用来防止函数被频繁调用的，但使用的场景略有差别。"}, {"id": "6999858060919308296", "title": "谈一谈地址栏url的跳转", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 地址栏url是我们前端的重要组成部分，我们需要用到它进行页面跳转，页面传参。像我就经常用到地址栏传参的方法，但却很少用到修改地址栏的方法，近"}, {"id": "7002041527572643877", "title": "「每日一题」按权重随机选择", "desc": "1. 题目描述 给定一个正整数数组w，其中w[i]代表下标i的权重（下标从0开始），请写一个函数pickIndex，它可以随机地获取下标i，选取下标i的概率与w[i]成正比。 例如，对于w = [1,"}, {"id": "6986258146826616863", "title": "手写自己的Promise", "desc": "es6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要： 可以参照promisesA+规范 Promise 的"}, {"id": "6844904193367474184", "title": "浅谈浏览器架构、单线程js、事件循环、消息队列、宏任务和微任务", "desc": "看到这些词仿佛比较让人摸不着头脑，其实在我们的日常开发中，早就和他们打过交道了。 其实上面举的这些click, setTimeout, setInterval, Promise，async/await, EventEmitter, MutationObserver, Event…"}, {"id": "6844903607855235079", "title": "搭建自己的脚手架—“优雅”生成前端工程", "desc": "我平时工作会做移动端H5多一些，所以我通过webpack搭建了自己的前端工程（x-build），主要是编译stylus、jade、es6，自适应解决方案，还有一些自己写的一些插件。 做新的项目时，每次复制文件夹，然后修改package.json、README.md等，感觉很不“…"}, {"id": "6855632652172312583", "title": "停止犯下这5个JavaScript风格错误，使你的代码可读和可维护的快速提示", "desc": "使你的代码可读和可维护的快速提示。 有多少次，你打开一个旧的项目，发现混乱的代码，当你添加一些新的东西时，很容易崩溃？我们都有过这样的经历。 为了减少难以读懂的javascript的数量，我提供了以下示例。这些都是我过去所犯过的错误。 假设我们有一个返回多个值的函数。一种可能的…"}, {"id": "6998504051147014174", "title": "力扣每日一题  - 反转字符串", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 8.20 - 541. 反转字符串 II 题意 示例1： 示例2： 分析 根据题意，分为两步处理即可，分为完整截取的部分和不完整截取的部分"}, {"id": "6993124250269777957", "title": "JavaScript中 编码和解码的几种方式", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 JavaScript中有几个可以对字符串编码的函数，分别是：escape、encodeURI、encodeURIComponent。 1. "}, {"id": "6975827689508700190", "title": "震惊！有关一个dotaer学习TypeScript这件事。。。。", "desc": "1.Type Script 介绍 Type Script 是什么？ 简单来说，TS就是Javascript的超集，超集就是数学上的那个超集的意思，其实就是以JS为基础，增加了许多更人性化和更方便的功能"}, {"id": "6998471442769657892", "title": "【回顾】函数防抖和节流 ｜8月更文挑战", "desc": "函数防抖和节流. 在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。"}, {"id": "6844903817201352717", "title": "You-Dont-Know-JS 疑难汇总", "desc": "最近我看了 You-Dont-Know-JS 的两个小册，在看书的过程中，为了方便以后索引与更深入的了解，也为了避免遗忘，我对每一册的较为复杂的点做了总结，编辑如下。"}, {"id": "6998541496945213477", "title": "禁止网站被iframe嵌套的几种方式", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 前言 昨天写了一篇文章，是关于iframe的跨域通信问题，是嵌套iframe，由于跨域导致不能与主页面通信的问题，然后提出了几种解决方案。"}, {"id": "6844904202632691726", "title": "ES6常用但被忽略的方法（第六弹Generator ）", "desc": "Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。语法上，Generator 函数是一个状态机，封装了多个内部状态。"}, {"id": "6844903891071401991", "title": "正则表达式简明教程", "desc": "正则是字符串匹配模式，在处理文本时很有用。最常见的操作就是用于查找和替换。 说到处理文本，其实我们每天敲的代码就是文本，因此常用的代码编辑器的查找替换工具基本都支持正则语法的。 先说明一下，接下来的内容都以《We will rock you》的歌词测试文本。 使用的正则测试工具…"}, {"id": "6844903895957766151", "title": "某条一面异步题解析", "desc": "这道面试题论在当时我是写不出来的，当时自吹熟悉promise结果这道题写不粗来有点尴尬哈哈，面试结束后面试官官让我再让我想一下（大概下一面会再考），目前这个写法大概消耗了一下午的时间去思考吧。 这场面试后续没完成，因为面之前就已经入职某滴的实习生了。 注意add方法里面传入的是…"}, {"id": "6844903661450035207", "title": "惰性求值——lodash源码解读", "desc": "lodash受欢迎的一个原因，是其优异的计算性能。而其性能能有这么突出的表现，很大部分就来源于其使用的算法——惰性求值。 本文将讲述lodash源码中，惰性求值的原理和实现。 以下是How to Speed Up Lo-Dash ×100? Introducing Lazy E…"}, {"id": "6868138631714848775", "title": "Fetch API介绍及使用Fetch发送请求", "desc": "Fetch API提供了一个 JavaScript 接口，用于访问和操纵HTTP的请求和响应等。提供了一个全局 fetch() 方法来跨网络异步获取资源。 当接收到一个代表错误的 HTTP 状态码， 即使响应的 HTTP 状态码是 404 或 500。从 fetch() 返回的…"}, {"id": "6844904058747093005", "title": "白话分析自适应跟响应式的区别", "desc": "根据日常开发经验及网上相关资料，用简单通俗易懂的大白话分析自适应跟响应式的区别。注：本文只分析自适应跟响应式的区别以及了解其由来的背景，不在于讨论其使用的方法 在PC时代初期，网页设计者都会设计固定宽度的页面，最开始的电脑显示器分辨率种类不多，因为当时电脑本来就少。后来随着显示…"}, {"id": "6992132915358335007", "title": "【日拱一卒】JavaScript执行上下文梳理", "desc": "这是我参与8月更文挑战的第3天，活动详情查看： 8月更文挑战”  前言 JavaScript执行过程有编译阶段、执行阶段。编译后获得执行上下文，可执行代码。执行阶段维护执行上下文栈（调用栈）。本文我们"}, {"id": "6995366858798940168", "title": "前端常用的函数封装js篇（三）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 在字符串指定位置插入字符 方法有多种： 先使用split将字符串分割成数组，然后在指定位置索引上添加字符，最后使用join将数组转换成字符"}, {"id": "6992125326969012232", "title": "记使用umi-request，在组件中调用request.then((resp) => {})中拿到的resp不是完整的response的解决方法", "desc": "本人使用的是umi-request， 因为有一个需求是要用到response.blob()方法，但是发现在调用request请求后的then((resp) => {})返回中拿到的resp不是完整的r"}, {"id": "6994804438095527967", "title": "边学边译JS工作机制--26. 多态的3种类型", "desc": "在现实世界中，一个女性可以具有不同的角色。她可以是同时是妈妈，职工，妻子。根据不同的角色，她需要做不同的行为。这就是多态的概念，只是用另一种形式表现。 在JS中，多态这个概念并不广为人知，但是在面向对"}, {"id": "6999598321610260510", "title": "Cocos——UI多端适配之道", "desc": "前端同学通常都用媒体查询或 rem 做多端适配，但是在 Cocos 上 CSS 不复存在。那你知道在 Cocos 上如何做到多端适配吗？本文从需求背景出发，带你领略 Cocos 的多端适配之道～"}, {"id": "6864378349512065038", "title": "彻底搞懂闭包，柯里化，手写代码，金九银十不再丢分！", "desc": "这段时间我试着通过思维导图来总结知识点，主要关注的是一些相对重要或理解难度较高的内容。下面是同系列文章： 如果您需要换个角度看闭包，请直接打开解读闭包，这次从ECMAScript词法环境，执行上下文说起。 本文总结了javascript中函数的常见知识点，包含了基础概念，闭包，…"}, {"id": "7002428164324458527", "title": "探索并手动封装ES5数组新增方法-indexOf和lastIndexOf", "desc": "之前我封装过ES3数组的核心方法，但后来有新的版本ES5、ES6。一个版本的跟新迭代必然会摈弃一些旧的东西，同时新增一些实用的东西。一起来看ES5中数组的新增方法并实现封装"}, {"id": "6997546635471355917", "title": "🍌【深扒】 JavaScript 中的迭代器", "desc": "大家好，我是小丞同学，这篇文章将带你深入理解JavaScript中的迭代器，关于迭代器相关的知识，直接的影响到了后面生成器的内容，以及对for...of循环的理解"}, {"id": "7003391567226470408", "title": "nextjs 项目热更新失败排查", "desc": "热更新失败 无意间听到同学 A 说开发项目 B 这么久了, 开发时修改代码后页面内容未进行重新渲染, 甚至页面连刷新也没有 😨, 所以平时是手动刷新了一次浏览器, 惊讶之余就得快速解决这个问题。 热更"}, {"id": "7006665847716446222", "title": "一文了解Event Loop，还不会你打我呀", "desc": "一、什么是Event Loop? Javascript的宿主环境中共通的一个“线程”（一个“不那么微妙”的异步玩笑，不管怎样），他们都有一种机制：在每次调用JS引擎时，可以随着时间的推移执行你的程序的"}, {"id": "7000947433588916232", "title": "ES5的继承和ES6的继承有什么区别？让Babel来告诉你", "desc": "如果以前问我ES5的继承和ES6的继承有什么区别，我一定会自信的说没有区别，不过是语法糖而已，充其量也就是写法有区别，但是现在我会假装思考一下，然后说虽然只是语法糖，但也是有点小区别的，那么具体有什么"}, {"id": "6947936223126093861", "title": "前端浏览器缓存知识梳理", "desc": "在前端性能优化的方式中，最重要的当然是缓存了，使用好了缓存，对项目有很大的帮助。比如我们访问网页时，使用网页后退功能，会发现加载的非常快，体验感很好，这就是缓存的力量。什么是缓存呢？当我们第一次访问网"}, {"id": "6976792239393472520", "title": "Web 动画原则及技巧浅析", "desc": "在 Web 动画方面，有一套非常经典的原则 -- Twelve basic principles of animation，也就是关于动画的 12 个基本原则（也称之为迪士尼动画原则），网上对它的解读"}, {"id": "6844904034181070861", "title": "傻傻分不清之 Cookie、Session、Token、JWT", "desc": "在战国时期，商鞅变法，发明了照身帖。照身帖由官府发放，是一块打磨光滑细密的竹板，上面刻有持有人的头像和籍贯信息。国人必须持有，如若没有就被认为是黑户，或者间谍之类的。 在现实生活中，每个人都会有一张专属的居民身份证，是用于证明持有人身份的一种法定证件。通过身份证，我们可以办理手…"}, {"id": "7002088024532058142", "title": "p5.js 实现鼠标炫光残影移动效果", "desc": "大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。 最近开始玩起了 p5.js，发现这是一个很有意思的库，本文我们将一起来实现一个炫酷的鼠标移动特效。"}, {"id": "6994620925501177863", "title": "js关于变量提升的两道“变态”面试题，你能做对么？", "desc": "这是我参与8月更文挑战的第9天 老版本浏览器没有块级上下文的概念 老版本浏览器中，放在{}【排除:函数、对象】中的function在变量提升阶段 都是声明+定义 新版本浏览器中      1. 如果f"}, {"id": "6844904070889603085", "title": "(建议收藏)TCP协议灵魂之问，巩固你的网路底层基础", "desc": "TCP 作为传输层的协议，是一个软件工程师素养的体现，也是面试中经常被问到的知识点。在此，我将 TCP 核心的一些问题梳理了一下，希望能帮到各位。 001. 能不能说一说 TCP 和 UDP 的区别？ TCP是一个面向连接的、可靠的、基于字节流的传输层协议。 而UDP是一个面向…"}, {"id": "7003979841863155743", "title": "P2P在线互传文件小工具", "desc": "简介 这两天把之前写的一个P2P文件传输demo优化了一下界面和体验，只需要其中一方输入对方的6位UUID就可以建立连接，然后就可以选择文件发送了，下面是体验链接： https://peer.code"}, {"id": "7000560149504983047", "title": "Three.js拨云见雾(5)——粒子和精灵", "desc": "three.js中粒子（也叫精灵），可用来创建非常细小的物体，可以用来模拟雨滴、雪、烟等其他有趣的效果。精灵模型对象Sprite和网格模型一样需要设置材质。不过精灵模型不需要开发者设置几何体。"}, {"id": "6844903869378461710", "title": "[译] 送你 43 道 JavaScript 面试题", "desc": "这两天的GitHub Trending repositories被一个名叫 javascript-questions的项目霸榜了，项目中记录了一些JavaScript题目。 我大概从头到尾看了一遍，都是一些基础的题目，我大概花了半个小时（有些题很简单，可以一扫而过）把这些题做完…"}, {"id": "7004393172738506782", "title": "umijs/plugin-qiankun 微应用前端实践", "desc": "准备两个应用 初始化主应用 使用 create umi 来快速的初始化主应用。 选择 ant-design-pro： 选择 antd 的语言版本，TypeScript 或 JavaScript 选择 "}, {"id": "7001026338576400415", "title": "2021前端应该掌握的干货", "desc": "随着NodeJS的出现，JavaScript从以前的浏览器端可以运行到服务端,推进了前端工程师向全栈发展的新时代。"}, {"id": "6995368093509746701", "title": "面向 JavaScript 初学者的二叉搜索树算法", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 在本文中，我将尽力解释一些您在编码面试之前应该学习的核心算法。 什么是二叉搜索树 (BST)？ 在编码面试中很常见，BST 是一种树状数据"}, {"id": "7001450572561776676", "title": "JavaScript事件中的内存与性能", "desc": "为什么要说内存与性能 因为事件处理程序在web中可以实现交互等其他功能，所有我们很多开发者都会在页面中大量的使用事件处理。在js中每一个函数都是对象，都占用内存空间。"}, {"id": "6844903700356399112", "title": "0.1+0.2  !== 0.3？", "desc": "我们知道，计算机里所有的数据最终都是以二进制保存的，当然数字也一样。所以当计算机计算0.1+0.2的时候，实际上计算的是这两个数字在计算机里所存储的二进制，那么0.1在JavaScript里存储的二进制到底是多少？ 我们先根据十进制转二进制的方法，把0.1转化为二进制是：0.0…"}, {"id": "6986898502106218526", "title": "栈基础知识", "desc": "栈基础知识 栈中的数据，从哪儿入，从哪儿出（从头部入栈，并从头部出栈，先入后出FILO）。 基本操作：出栈（逻辑上的出栈，栈顶指针向下移动一位），入栈（栈顶指针向上移动一位，然后将元素放入相应的位置上"}, {"id": "6954977079502831629", "title": "原来 class 语法糖也没这么难嘛", "desc": "ECMAScript6 实现了 class ，实际上它是一个语法糖，但是它的出现能使 JS 编码更清晰，更接近 面向对象编程。 实现原理 首先我们来看 ES6 中 class 的实现和 ES5 构造函"}, {"id": "6844903974441582599", "title": "重构：从kfc点单发现状态模式", "desc": "对象的行为依赖于它的状态（属性）,允许对象在内部状态发生改变并且可以根据它的状态改变而改变它的相关行为。 国庆回来决定重构我司的重要项目，因其复杂的逻辑一直找不到好的角度去梳理代码，某个夜黑风高的晚上，我来到了kfc，当我看到了菜单中琳琅满目的内容陷入了沉思..... 将状态与…"}, {"id": "6844904163923460104", "title": "js 多个容器同步滚动卡顿问题", "desc": "在实际工作中，会遇到一种场景，多个容器需要同步滚动--也就是滚动其中一个，另外几个容器也会同步的滚动以保证这几个容器所显示的内容都是相关的。 原因： 当左边滚动的时候，触发了左边的滚动事件，于是右边跟随滚动，但是与此同时右边的跟随滚动也是滚动，于是也触发了右边的滚动，于是左边也…"}, {"id": "6844903906942648327", "title": "「前端发动机」Touchmove 禁止默认滚动的几种方案", "desc": "分享一些实际开发过程中遇到的问题和解决方案，文中如有不对之处，也欢迎大家指出，共勉。！ 源于最近的一个移动端走马灯需求，使用 touchmove 事件，来触发走马灯的动画。但是在实际运行时发现，滑动走马灯的时候很容易触发页面自身垂直方向的滚动，如下图 可以看出，在滑动过程中，滑…"}, {"id": "6844903622526894087", "title": "JavaScript事件机制——记一次认真准备的技术分享", "desc": "点击s2，click事件从document->html->body->s1->s2(捕获前进)这里在s1上发现了捕获注册事件，则输出\"s1 捕获事件\"到达s2，已经到达目的节点。 但是，stopPropagation方法只会阻止【该元素的当前事件（冒泡或者捕获）】的传播，不会阻…"}, {"id": "6997594010223280165", "title": "JavaScript - 编写一个函数返回字符串中最长的连续重复字母", "desc": "思路 可以将每个重复字母开头的字符串中的第一个保存到一个变量中 (代码中的a), 然后将后面的数组元素与它对比: 如果相同, 则计数器累加. 计数器代表的是这串重复字符串的长度 如果不同, 说明后面是"}, {"id": "7004049531197210661", "title": "模拟实现数组中的map、reduce、filter等方法", "desc": "模拟实现数组中的map方法 reduce方法 filter方法 push方法 pop方法，超详情~~"}, {"id": "6844904116481687565", "title": "本地https服务搭建指南", "desc": "Chrome升级到80版本以上会将原来默认值 SameSite=None 修改为SameSite=Lax（其它浏览器，例如safari，firefox等都有此类似计划），导致跨站cookie无法传递，从而导致类似登录失败等问题。通用的解决方案是将涉及业务开发的所有域名下的coo…"}, {"id": "6844903711249022984", "title": "双十一，打包半价理解Vue的nextTick与watcher以及Dep的蓝色生死恋？", "desc": "这段脚本执行我们猜测会依次打印：19，20，21。但是实际效果中，只会输出一次：21。为什么会出现这样的情况？ 在点击click触发handleClick()事件之后，number会被遍历增加10000次，在vue的双向绑定-响应式系统中，会经过 “setter -> Dep …"}, {"id": "6983303143513653285", "title": "JavaScript - this绑定规则的特殊应用", "desc": "JS中的this在通常的4种绑定(默认绑定、隐式绑定、显示绑定、new绑定)之外，还需存哪些特殊情况呢？"}, {"id": "6999477763367239711", "title": "1、javascript变量提升机制", "desc": "不会写东西，有错误请大家帮忙纠正，谢谢！当浏览器开辟内存后，并木有立刻从上而下执行代码，而是先做了以下操作： 把当前作用域中所有带**var/function**的关键字进行提前声明和定义=>"}, {"id": "6966944690981568542", "title": "用 new 把JavaScript中的知识点串起来", "desc": "从 new 入手，学习JavaScript中的构建函数、原型、原型链、数据类型、基础类型、Class。"}, {"id": "6999451502926364680", "title": "可选链操作符( ?. )和空值合并操作符（??）[es2020]", "desc": "在翻看书时偶然看到了使用?.对对象进行链式访问，当时并不了解它的用法，所以查阅了一些资料。 ?. ?.是可选链式操作符，是用于应对在开发中访问嵌套在内部多层级属性的时候，可能会报错Cannot rea"}, {"id": "6844903848008482823", "title": "jQuery老矣，尚能饭否", "desc": "在2005年8月的某一天，有一位叫John Resig的美（guo）人，在blog上连发3个栗子公开怼了Prototype的Behaviour的代码冗长，在那之后没多久就开源了风靡全球的利器JQuery，还兼容了IE5.5，解决了开发者兼容性处理的心头大患，之后JQuery…"}, {"id": "6844903608253693960", "title": "页面性能优化办法有哪些？", "desc": "互联网有一项著名的8秒原则。用户在访问Web网页时，如果时间超过8秒就会感到不耐烦，如果加载需要太长时间，他们就会放弃访问。大部分用户希望网页能在2秒之内就完成加载。事实上，加载时间每多1秒，你就会流失7%的用户。8秒并不是准确的8秒钟，只是向网站开发者表明了加载时间的重要性。…"}, {"id": "6844903608144805901", "title": "从高阶函数--->高阶组件", "desc": "今天有幸去参加了下别人公司的分享会，我带着想让个人给我梳理下我对高阶组件了解比较混乱的思路，但分享的内容跟我期望方向不在一个点上，所以结束后我还是想象，我自己来梳理下自己对高阶组件浅显的理解。希望大家给予指导 要讲高阶组件，先让我介绍下高阶函数，这样类比下就很容易理解了。 以及…"}, {"id": "6885956413940563976", "title": "5分钟让你的应用接入 gitlab", "desc": "3. 配置名称、重定向地址、以及应用程序使用用途 在 gitlab v10之前官方提供了下面的一个 api,可以自定义登陆页面，只要最后通过这个验证即可。"}, {"id": "6954521549894320141", "title": "如何理解闭包", "desc": "今天我们一起来谈论JavaScript中的闭包，不过你要做好心理准备，因为闭包有非常多难懂的知识点，我也很困惑为什么有些人会 对JS小白编一些很难理解的例子来讲解闭包。所以今天我将用最简单的例子来让你"}, {"id": "6976431352912543758", "title": "如何让老项目的打包构建时间减少70%？", "desc": "Hello，大家好，我是小羽同学，一个平凡而又不甘于平凡的前端开发工程师。 今天的话，主要是想和大家聊聊小羽是怎么把一个react老项目的构建时间减少70%+的。"}, {"id": "6973614044867461157", "title": "Why系列： (!(~+[])+{})[--[~+\"\"][+[]]*[~+[]] + ~~!+[]]+({}+[])[[~!+[]]*~+[]] ", "desc": "(!(~+[])+{})[--[~+\"\"][+[]]*[~+[]] + ~~!+[]]+({}+[])[[~!+[]]， 纳尼，这是什么东西，请君冷静，让我们来揭开它这见不得人的面纱。"}, {"id": "6935811262752227335", "title": "实现Web端指纹登录", "desc": "现在越来越多的笔记本电脑内置了指纹识别，用于快速从锁屏进入桌面，一些客户端的软件也支持通过指纹来认证用户身份。 前几天我在想，既然客户端软件能调用指纹设备，web端应该也可以调用，经过一番折腾后，终于实现了这个功能，并应用在了我的开源项目中。 本文就跟大家分享下我的实现思路以及…"}, {"id": "7004257642130472996", "title": "基于JS实现Ajax并发请求的控制", "desc": "最近看到一个面试题，当然了，就是这篇文章的标题,Ajax的并发请求的控制，感觉挺有意思的，在社区看了下，应该是字节的面试题，也挺多大佬对这个进行了总结，都看了下，于是自己也想试着总结下"}, {"id": "6911175470255964174", "title": "为什么我推荐使用JSX开发Vue3", "desc": "关于本文异常热闹的评论区，我在https://juejin.cn/post/6911883414110994439进行统一回应，后面没什么必要我不会直接在评论区进行回应，如果之前的回应有一些过激的语言我表示抱歉，因为太长时间没有发文有点没控制住。 以防万一有的同学实在不看官方文…"}, {"id": "7006894289636556837", "title": "闭包的作用和原理", "desc": "作用：能够在函数定义的作用域外，使用函数定义作用域内的局部变量，并且不会污染全局。 原理：基于词法作用域链和垃圾回收机制，通过维持函数作用域的引用，让函数作用域可以在当前作用域外被访问到。"}, {"id": "6872154561574862855", "title": "浅析鸿蒙 JavaScript GUI 技术栈", "desc": "众所周知，刚刚开源的「鸿蒙 2.0」以 JavaScript 作为 IoT 应用开发的框架语言。这标志着继 SpaceX 上天之后，JavaScript 再一次蹭到了新闻联播级的热点。这么好的机会，只拿来阴阳怪气实在太可惜了。作为科普，这篇文章不会拿着放大镜找出代码中的槽点来吹…"}, {"id": "7000265115287158798", "title": "你知道 V8 是如何执行 JS 代码的吗？", "desc": "本文将介绍 V8 引擎执行 JavaScript 代码的主要过程，清晰简单，作为一名前端人员一定要了解它！"}, {"id": "7005129167758983198", "title": "ES6小记", "desc": "ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。"}, {"id": "7003273696819281956", "title": "js中的只读数据", "desc": "分享一些javaScript中的一些只读属性的数据 (持续更新中...) eg1 字符串用数组关联法获取的值是只读属性的，并不能修改里面的值 eg2 字符对象中的charAt()是从一个字符串中返回一"}, {"id": "6985050959390965797", "title": "Javascript 基础总结", "desc": "1: 类型及检测方式 1：js内置的数据类型 js的数据类型如下图所示 javascript一共有8中数据类型，其中有7种基本数据类型：Null、Undefiend、Boolen、String、Num"}, {"id": "7007665990628540424", "title": "浅谈 js sort() 的使用", "desc": "Array.prototype.sort 是一个原地排序算法，执行后会修改原数组。 看了一些解释，类似于返回正(负）数，谁在谁前面之类的。不容易记，以前我经常随便写一个，运行看看，如果顺序反了就把函数"}, {"id": "6995515261008740388", "title": "潮流前端周刊（第42期）- 无争的灵隐寺", "desc": "封面图摄于周天去灵隐寺闲逛，拍的一张有意境的照片，心静、心诚、与世无争的感觉，录了小段 诵经声 可用耳机调低音量听。 前端技术 拖拽内容转移竟然还能这样玩！ https://juejin.cn/pos"}, {"id": "7007614569812066334", "title": "使用Antd和Express实现文件的上传功能", "desc": "前言 根据公司需求，前端网页上传excel文件，后端接收文件并解析。采用Antd的Upload组件实现前端功能，由于上传文件不好用mock进行测试，临时编写一个node程序测试后端功能。 使用Node"}, {"id": "6918881497264947207", "title": "可视化拖拽组件库一些技术要点原理分析（二）", "desc": "本文是对《可视化拖拽组件库一些技术要点原理分析》的补充。上一篇文章主要讲解了以下几个功能点： 友善提醒：建议结合源码一起阅读，效果更好（这个 DEMO 使用的是 Vue 技术栈）。 14. 拖拽旋转 在写上一篇文章时，原来的 DEMO 已经可以支持旋转功能了。但是这个旋转功能还…"}, {"id": "6966216905208102949", "title": "还在手动埋点么？out 了。不到百行代码实现自动埋点", "desc": "埋点是一个常见的需求，就是在函数里面上报一些信息。像一些性能的埋点，每个函数都要处理，很繁琐。能不能自动埋点呢？ 答案是可以的。埋点只是在函数里面插入了一段代码，这段代码不影响其他逻辑，这种函数插入不"}, {"id": "6846687590704381959", "title": "学会使用Vue JSX，一车老干妈都是你的", "desc": "连续几篇文章，每篇都有女神，被掘友给吐槽了，今天不提了女神了，反正女神都是别人的（扎心了）。这两天小编看了腾讯与老干妈的事情，晚上馒头夹老干妈吃起来都感觉很带劲。今天这篇文章将给大家小编在项目中使用JSX的一些实战经验。其实一般情况下写Vue还是比较推荐template的写法的…"}, {"id": "6997585762489221151", "title": "只要功夫深，菜鸟也能写出细节满满的古茗点单小程序", "desc": "炎炎夏日正是喝奶茶的好时候，想必大家用过古茗点单小程序点过奶茶吧，本文将教会大家如何做一个古茗点单小程序，快来文章中喝奶茶吧~"}, {"id": "7000541019808727076", "title": "JavaScript 系列之异步编程（一）", "desc": "[JavaScript 系列之异步编程｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6920000387814522894", "title": "【真香】我同事开发了一款媲美postMan的免费api管理工具", "desc": "海阔凭鱼跃，天高任鸟飞。Hey 你好！我是秦爱德。😄 各位看官，好久不见，我又来了。今天我给大家带来一个好消息，我同事（老孟）的api接口管理工具终于开发完成，正式发布上线了。喜大普奔，秦爱德发来贺电yeah~~~ 曾多少个日日夜夜，看着日渐消瘦的老孟，一遍遍抓着为数不多的头…"}, {"id": "6844903886898069511", "title": "嘿，不要给 async 函数写那么多 try/catch 了", "desc": "另外可以发现并不是一个 token 对应一个 Node，等号左右必须都有值才能组成一个声明语句，否则会作出警告，这就是 eslint 的基本原理。最后所有的 Node 组合在一起就形成了 AST 语法树 通过 @babel/traverse 我们能够轻松的找到 await 表达…"}, {"id": "6998119681739456526", "title": "命令行创建模版页面教程", "desc": "在日常的业务开发中，我们经常会在不同的项目中，甚至是相同的项目中开发相似的页面。教程实现通过一行命令帮你在项目中创建特定的页面代码。"}, {"id": "6999908858646790158", "title": "前端迭代器和生成器知多少，值得收藏~", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 迭代器 迭代器是一种特殊的对象，它具有一些专门为迭代过程设计的专有接口，所有的迭代器对象都有一个next()方法，每次调用都返回一个结果对"}, {"id": "6844903764202094606", "title": "一次弄懂Event Loop（彻底解决此类面试问题）", "desc": "Event Loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。 是要增加自己技术的深度，也就是懂得JavaScript的运行机制。 现在在前端领域各种技术层出不穷，掌握底层原理，可以让自己以不变，…"}, {"id": "7004839874650079263", "title": "【React】特性", "desc": "目录 生命周期 fiber React hooks Redux setState 一、 生命周期 在新版本中，React 官方对生命周期有了新的 变动建议: 使用getDerivedStateFrom"}, {"id": "6889780734324637703", "title": "2020 年前端分类推荐书单【结合思维导图】", "desc": "作为一个喜欢纸质书的前端爱好者，按照这个导图也整理了一些前端推荐书单，其中有一些看过的，也有一些网评不错的。 建了一个前端买书微信群，感兴趣的同学可以加我微信 qianduanshilian，推荐书单实时更新。"}, {"id": "7002971181036879908", "title": "【前端开发技巧】iframe，给你一个不升级webpack和plugin版本的理由", "desc": "最近比较忙，疯狂开发新需求，疯狂修复同事留下的bug 乘着发烫的手指还有余温，水一篇文章😊 iframe 借用w3c官方解释：iframe元素会创建包含另外一个文档的内联框架(即行内框架）。 你可以简"}, {"id": "7002363524181655559", "title": "关于数字", "desc": "这是我参与8月更文挑战的第31天啦，对于数字我们之前一直以为不是那么重要，没有很多知识点，今天我们一起来看看吧"}, {"id": "6844904165462769678", "title": "深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）", "desc": "resize、scroll 这些事件是何时去派发的。 这些问题并不是刻意想刁难你，如果你不知道这些，那你可能并不能在遇到一个动画需求的时候合理的选择 requestAnimationFrame，你可能在做一些需求的时候想到了 requestIdleCallback，但是你不知道…"}, {"id": "6950082433647640612", "title": "开源项目都在用 monorepo，但是你知道居然有那么多坑么？", "desc": "mono repo 并不是银弹，使用这个架构还是会带来很多问题，无非市面上的工具帮助我们解决了大部分。文章主要聊了聊在没有这些工具的时候我们可能会遇到哪些问题，以及使用这些工具后解决了什么又带来了什么"}, {"id": "6989868554644357127", "title": "检验你的js知识，选择题，填空。（持续更新）", "desc": "答案 答案 js对象知识的考查 1.哪一个是正确的？ A: mouse.bird.size是无效的 B: mouse[bird.size]是无效的 C: mouse[bird[\"size\"]]是无效的"}, {"id": "6844903854882947080", "title": "【JS 进阶】你真的掌握变量和类型了吗", "desc": "如果你还不能很好的解答上面的问题，那说明你还没有完全掌握这部分的知识，那么请好好阅读下面的文章吧。 本文从底层原理到实际应用详细介绍了JavaScript中的变量和类型相关知识。 ECMAScript标准规定了7种数据类型，其把这7种数据类型又分为两种：原始类型和对象类型。 上…"}, {"id": "6987241984154927134", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（二）", "desc": "感激相遇 你好 我是阿ken 数字型有3个特殊值，分别是 Infinity(无穷大)、-Infinity( 无穷小) 和 NaN( Not a Number,非数字)。NaN 属性是代表非数字值的特殊"}, {"id": "6844903858636849159", "title": "我从来不理解JavaScript闭包，直到有人这样向我解释它", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 正如标题所述，JavaScript闭包对我来说一直有点神秘,看过很多闭包的文章，在工作使用过闭包，有时甚至在项目中使用闭包，但我确实是这是在使用闭包的知识。 最近看到的一些文章，终于，有人用于一种让我明白方式对…"}, {"id": "6953817305901957127", "title": "javascript防篡改对象", "desc": "大家好，我是德莱问。 javascript防篡改对象 Object.preventExtensions Object.seal Object.freeze"}, {"id": "6982435184838705159", "title": "用最简单方式打造Three.js 3D汽车展示厅", "desc": "在上一篇文章简单粗略的描述了开发3D汽车展厅，笔者再写一篇比较详细的教程。对于笔者来说Three.js说难不难，说简单也不简单。说简单因为他简化了对三维知识的理解，简化了很多操作。说难是因为ap"}, {"id": "6984939221681176607", "title": "手写一个虚拟DOM库，彻底让你理解diff算法", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 所谓虚拟DOM就是用js对象来描述真实DOM，它相对于原生DOM更加轻量，因为真正的DOM对象附带有非常多的属性，"}, {"id": "7002526436969480222", "title": "手把手带你实现一个双人版的“斗牛牛”游戏", "desc": "扑克牌-斗牛牛游戏相信很多人都玩儿过吧，怎么自己实现一个这样的游戏呢？今天就带你手把手实现一个双人斗牛牛游戏。"}, {"id": "7005810137491308580", "title": "搞懂 ArrayBuffer、TypedArray、DataView 的对比和使用", "desc": "一张图说明 为了说明他们之间的关系，我画了一张图，其中箭头不代表包含关系，是底层到上层的关系，我们在后面会分别说明一下 ArrayBuffer ArrayBuffer 对象代表存储二进制数据的一段内存"}, {"id": "6988853906872729613", "title": "潮流前端周刊（第37期）- 想学前端的猫", "desc": "封面图为家里汤圆的新窝，最近老喜欢躺在「JavaScript 权威指南」上睡觉，看来也想写前端。潮流前端"}, {"id": "6844903695935602696", "title": "Vue番外篇 -- vue.nextTick()浅析", "desc": "这时，我们就会用到一个方法是this.$nextTick（相信你也用过）。 nextTick是全局vue的一个函数，在vue系统中，用于处理dom更新的操作。vue里面有一个watcher，用于观察数据的变化，然后更新dom，vue里面并不是每次数据改变都会触发更新dom，而是…"}, {"id": "6854573214316789774", "title": "对于组件的可重用性，大佬给出来6个级别的见解，一起过目一下！", "desc": "我们所有人都希望编写更少的代码，同时也要做更多的事情。为了实现这一点，我们构建了组件，以便可以多次重用它们。 有些组件只需要基本的可重用性，而另一些则需要更复杂的重构技术，我们才能充分复用它。 这里有6个不同级别的可重用性概念，大家先来体会体会，后续更新会一个一个的讲。 通过模…"}, {"id": "6987585714921668645", "title": "js实现图片复制，可以粘贴到微信聊天框", "desc": "```js实现图片复制，可以粘贴到微信聊天框，使用canvas和clipboard原生实现哦 ```"}, {"id": "7004438527542820871", "title": "JavaScript数据类型", "desc": "1.概述 JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本章不涉及。） 数值（number）"}, {"id": "6953254793863233573", "title": "JavaScript 原型对象（ Prototype ）", "desc": "什么是原型（ Prototype ）？ Javascript规定，每一个函数都有一个 prototype 对象属性，指向另一个对象（原型链上面的）。 什么叫原型链？ 顺着原型对象寻找对象的一条“链子”"}, {"id": "6981721700031266852", "title": "JS-史上最小清新的Promise", "desc": "Promise是ES6新增的语法，是异步编程的一种解决方案，解决了回调地狱的问题。其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。"}, {"id": "6992867251875479566", "title": "js实现斗地主计分工具", "desc": "现在大家斗地主的时候往往喜欢在每局结束后进行微信转账，然而这样的转帐过程往往比较浪费时间，所以咱们可以自己写一个简单的斗地主计分器来提高我们 赢钱的效率🤪。"}, {"id": "6844903831365500936", "title": "在JavaScript中进行面向切面编程", "desc": "面向切面编程（Aspect-oriented programming，AOP）是一种编程范式。\b做后端 Java web 的同学，特别是用过 Spring 的同学肯定对它非常熟悉。AOP 是 Spring 框架里面其中一个重要概念。可是在 Javascript 中，AOP 是一…"}, {"id": "6950080757532459044", "title": "远离JavaScript字符串转数字的坑", "desc": "前言通过一道面试题引申出JavaScript字符串转数字。面试题使用 + 或一元加运算符是将字符串转换为数字的最快方法吗？"}, {"id": "6982835947456954404", "title": "从零开始学习3D可视化之摄像机", "desc": "数字孪生可视化场景中的摄像机，与大家拍照时使用相机的功能相似，数字孪生可视化场景中用摄像机来确定观察 3D 场景的视角。摄像机包含两个重要的位置参数：镜头位置 position 和被拍摄物体的位置 t"}, {"id": "6953422248862547982", "title": "微前端落地：Systemjs模块化解决方案", "desc": "如何实现多个应用之间的资源共享？ 扩展前端开发规模以便于多个团队可以同时开发一个大型且复杂的产品是一个重要但又棘手的难题。因此，早在2016年，微前端概念诞生了。"}, {"id": "6844903859270221838", "title": "那些年，我们一起踩过的坑（前端防翻车指南）", "desc": "javascript做为一门脚本语言，由于缺乏约束，以及各种自动容错机制和隐式转换，产生了很多容易误解和容易引发问题的地方， 《javascript语言精髓》一书中，有很大一部分篇幅介绍了javascript语言的糟粕和毒瘤部分，相信大部分问题有些人遇到过，有些人则通过学习知晓…"}, {"id": "6844903574560833550", "title": "浏览器和Node不同的事件循环（Event Loop）", "desc": "Event Loop也是js老生常谈的一个话题了。2月底看了阮一峰老师的《Node定时器详解》一文后，发现无法完全对标之前看过的js事件循环执行机制，又查阅了一些其他资料，记为笔记，感觉不妥，总结成文。 浏览器中与node中事件循环与执行机制不同，不可混为一谈。 浏览器的Eve…"}, {"id": "6844903959979655181", "title": "【JS 口袋书】第 4 章：JS 引擎底层的工作原理", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 有没有想过浏览器如何读取和运行JS代码？ 这看起来很神奇，我们可以通过浏览器提供的控制台来了解背后的一些原理。 在Chrome中打开浏览器控制台，然后查看Sources这栏，在右侧可以到一个 Call Stac…"}, {"id": "6984672030092181517", "title": "LeetCode第739题：每日温度", "desc": "题干 请根据每日 气温 列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperat"}, {"id": "6896265281178435598", "title": "带你手写一个对象，深入理解可迭代对象是什么，与类数组有什么区别", "desc": "可迭代（Iterable） 对象是数组的泛化。这个概念是说任何对象都可以被定制为可在 for..of 循环中使用的对象。 数组是可迭代的。但不仅仅是数组。很多其他内建对象也都是可迭代的。例如字符串也是可迭代的。 如果从技术上讲，对象不是数组，而是表示某物的集合（列表，集合），f…"}, {"id": "6981661382051627021", "title": "js基础-类型判断", "desc": "数据类型应该算得上是 js 的基础第一课。在日常的开发中会遇到很多类型判断和类型转换的场景。姐妹们，快来get起来吧！"}, {"id": "6844904202871799821", "title": "几道面试题理清JavaScript执行机制(Event Loop)，任务队列、宏任务和微任务", "desc": "JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。 JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定Java…"}, {"id": "6844903604135034893", "title": "当vue遇到pwa--vue+pwa移动端适配解决方案模板案例", "desc": "写在前面：这个项目杂七杂八看起来很杂，这篇文章主要是就是介绍下这个模板项目的几个要点，让大家从这个项目中能学到真正实用的技术要点，项目地址在文末。 Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。 PW…"}, {"id": "6844903693343522829", "title": "授人以渔式解析原生JS写轮播图", "desc": "循环无缝自动轮播五张图，按左右箭头可以手动切换图片，鼠标点击轮播图下面按钮 1 2 3 4 5会跳转到对应的第1 2 3 4 5张图片。鼠标放到轮播图的图片上时不再自动轮播并且左右箭头显示出来，鼠标移开时左右箭头隐藏掉并且自动轮播。 布局：准备七张图片实现所谓的无缝轮播，固定七…"}, {"id": "7005527614433525774", "title": "实现随机数组方法总结", "desc": "今天翻阅了一些资料，思考许久后，给大家整理出几种可以实现随机数组的方法。快来一起来看看都有哪些吧~~"}, {"id": "6990538424545443854", "title": "从零搭建Webpack5-react脚手架(附源码)", "desc": "webpack5 近期终于有时间和精力专注于公司技术基础建设了，于是将公司的Saas系统改造成了微前端模式，解决了历史遗留的一部分问题 接着，想着webpack5已经发布这么久了，该在生产环境推广了"}, {"id": "6992876656125804551", "title": "从零开始写一个微前端框架-样式隔离篇", "desc": "前言 自从微前端框架micro-app开源后，很多小伙伴都非常感兴趣，问我是如何实现的，但这并不是几句话可以说明白的。为了讲清楚其中的原理，我会从零开始实现一个简易的微前端框架，它的核心功能包括：渲染"}, {"id": "6997720488709455879", "title": "DOM核心——Element类型", "desc": "Element 是一个通用性非常强的基类，Element表示html对外暴露访问元素标签名，节点和属性的能力。"}, {"id": "6856517315010232333", "title": "在Vue中使用装饰器，我是认真的", "desc": "作为一个曾经的Java coder, 当我第一次看到js里面的装饰器(Decorator)的时候，就马上想到了Java中的注解，当然在实际原理和功能上面，Java的注解和js的装饰器还是有很大差别的。本文题目是Vue中使用装饰器，我是认真的，但本文将从装饰器的概念开发聊起，一起…"}, {"id": "6986189232565911560", "title": "ECMAScript 2019（ES10）主要新特性深入讲解", "desc": "2019年6月，ECMA 协会正式推出了 ES 的第十个版本，也就是 ES10，它一共带来了 6 个新特性，让我们"}, {"id": "6906126184031977480", "title": "12 个 GitHub 上超火的 JavaScript 奇技淫巧项目，找到写 JavaScript 的灵感！", "desc": "猫哥是一个常年混迹在 GitHub 上的猫星人，所以发现了不少好的前端开源项目、常用技巧，在此分享给大家。 已经推荐了 面试项目、css奇技淫巧项目、代码规范项目、数据结构与算法项目、管理后台模板、前端必备在线工具 等专题的近 100 个优秀项目了。 以下为【前端GitHub】…"}, {"id": "6905913200060366862", "title": "捕获用户在该页面停留的时长，我是这样做的（前端监测）", "desc": "在监测功能的时候，我们首要考虑的就是，我们的监测代码不能影响我们现在的业务代码，和以后的业务代码。 经过自己的一点小测试，发现无论在关闭的时候（也就是点击叉），还是隐藏的时候（也就是点击左右箭头）都会触发 onpagehide;也无论是在首次加载，还是刷新的时候，都会触发onp…"}, {"id": "6999795457543110669", "title": "JavaScript 系列之字符串（二）", "desc": "[JavaScript 系列之字符串｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6989041778221383717", "title": "带你“深入”节流", "desc": "节流就像吃饭。吃饭说明规定，五个小时吃一次。吃了一次饭，小狗蹦蹦哒哒地玩了五个小时。五个小时一到， 小狗再回来吃饭。依次类推，每五小时回来吃一次饭."}, {"id": "6844903625609707534", "title": "面试精选之Promise", "desc": "我们看一些 Promise 的常见面试问法，由浅至深。 3、Promise 解决的痛点还有其他方法可以解决吗？如果有，请列举。 8、能不能手写一个 Promise 的 polyfill。 这些问题，如果你都能 hold 住，那么面试官基本认可你了。带着上面这些问题，我们往下看。…"}, {"id": "6996253288102363143", "title": "JavaScript异步函数async/await", "desc": "异步函数是将期约应用于JavaScript函数的结果。异步函数可以暂停执行，而且不阻塞主线程。异步函数就是async/await，它是Es8新增的。"}, {"id": "7002523410181914661", "title": "Ajax JavaScript select 级联", "desc": "一、创建Ajax 二、发送请求 open(method，ul，async)有三个参数； 1、请求类型：GET和POST。 2、请求文件的地址。 3、true（异步）或 false（同步） 三、请求得到"}, {"id": "6994271359220056072", "title": "JavaScript call()、apply()、bind()三个函数的备忘录", "desc": "今天又是连续暴雨的一天，已连续下雨好几周了。房间里黑漆漆的，突然想到 JavaScript 的call()、apply()、bind()三个函数。。。人家都在想女友，而我此时此刻想到了代码，太惨了。。"}, {"id": "7001831638673915912", "title": "浅谈JavaScript中的几种设计模式（图文并茂带实例）", "desc": "通过结合实际场景，真实案例，来一步一步分析理解设计模式是怎么？怎么用？什么时候应该用？ 前言 本文适合人群：和我一样的设计模式入门小白📖"}, {"id": "7002976928898482184", "title": "和闭包唠唠嗑", "desc": "闭包的概念 红宝书上时这样描述的：闭包指那些引用了另一个函数作用域中变量的函数，通常时在嵌套函数中实现的。 mdn上是这样描述的：一个函数和对其周围状态（lexical environment，词法环"}, {"id": "6997959087551938568", "title": "重学 JavaScript 作用域和闭包", "desc": "“这是我参与8月更文挑战的第11天，活动详情查看： 8月更文挑战” 1. 作用域 对于多数编程语言，最基本的功能就是能够存储变量当中的值、并且允许我们对这个变量的值进行访问和修改。那么有了变量之后，应"}, {"id": "6969575610108772359", "title": "【手写简易浏览器】思路综述篇", "desc": "其实有这个想法很久了，只是一直没开始写，正好赶上掘金的日更活动，就想着把它实现一遍吧，然后把实现过程记录下来。 想法的来源 前段时间在研究 ba"}, {"id": "6994663876012802062", "title": "漫谈：从全栈开发到技术架构", "desc": "前端、客户端主要是负责构建和用户打交道的界面，也就是 UI（user interface），而构建 UI 需要在不同的位置显示文字、图片、视频等等，要分成不同的区块和页面，为了简化构建 UI 的过程，"}, {"id": "6915287057795874824", "title": "基于H5的录屏工具开发", "desc": "WebRTC是谷歌于2011年开源的一个音视频处理引擎，可以实时的进行视频数据的采集，也就是说可以做直播，也可以做桌面录屏，桌面分享。使用起来还是比较简单的。 这里我们来开发一个屏幕录制工具。 首先我们在页面中创建一个video标签，用于展示录屏的内容，再创建四个按钮，一个屏幕…"}, {"id": "6998125702406996004", "title": "JavaScript(4) | 标识符和数据类型", "desc": "5. 数据类型 一、数据类型 概念: 数据类型就是在计算机实际存储中存在不同的储存方式,方式和实际需求表达的数(内容)相关,有的数值大,有的数值小,有的数还有其他要求。 六大数据类型 数据类型就是字面"}, {"id": "6964134073480511501", "title": "监听一个变量的变化，需要怎么做", "desc": "监听一个变量的变化，当变量变化时执行某些操作，这类似现在流行的前端框架（例如 React、Vue等）中的数据绑定功能，在数据更新时自动更新 DOM 渲染，那么如何实现数据绑定喃？ 本文给出两种思路"}, {"id": "6844903645411016718", "title": "旧项目 TypeScript 改造问题与解决方案记", "desc": "由于本次改造的项目为一个通过NPM进行发布的基础服务包，因此本次采用TypeScript进行改造的目标是移除Babel全家桶，减小包体积，同时增加强类型约束从而避免今后开发时可能的问题。 本次改造使用的是TypeScript v2.9.2，采用Webpack v4.16.0进行…"}, {"id": "6844903585545715719", "title": "2017年前端工作小结，个人踩坑之旅，前端学习者的杂谈", "desc": "写多少项目就得写多少css，我曾一度轻视它，认为实现预期效果便是大胜利，滥用各类选择器，命名杂乱无章，为了解决bug，而写入行内式，然后在工作中顺利的发展成为一名css上的残障人士，偶尔面对曾经写过的css，总是无语凝噎，但这种情况在近期得到了控制。 BEM命名法：在初学前端时…"}, {"id": "6861202791214514189", "title": "使用JavaScript检测空闲的浏览器选项卡，可以做些什么？", "desc": "在某些情况下，当用户与我们的最终产品或应用程序进行交互时，我们发现自己会执行许多密集的，占用大量CPU的任务。启动轮询器，建立WebSocket连接，甚至加载视频或图片等媒体，都有可能成为性能障碍，尤其是当这些任务在不需要的情况下消耗资源的时候。在用户没有主动与界面交互的同时，…"}, {"id": "6844904099821912077", "title": "定制一套方便自己开发的Vue-Cli项目模版", "desc": "当我们使用Vue去开发项目时，Vue-Cli 给我们提供了一套开箱即用的项目模版，免去了我们配置 webpack 的烦恼。但由于Vue-Cli是面向所有开发者的，它所提供的项目模版是非常基础的，当我们使用这套模版去开发的时候，通常还要再引入 axios Element-ui 等…"}, {"id": "6844904145372053511", "title": "JS夯实之执行上下文与词法环境", "desc": "JavaScript是一门解释性动态语言，但同时它也是一门充满神秘感的语言。如果要成为一名优秀的JS开发者，那么对JavaScript程序的内部执行原理要有所了解。 本文以最新的ECMA规范中的第八章节为基础，理清JavaScript的词法环境和执行上下文的相关内容。这是理解J…"}, {"id": "6983700711104053256", "title": "判断变量类型的方法（上）：js中的数据类型", "desc": "1. js一共6种数据类型： 5中基本数据类型（也叫做简单数据类型） 1种复杂数据类型 2. typeof操作符检测结果 \"undefined\" // 这个值未定义，声明了没有给值 \"boolean\""}, {"id": "6946068471612440584", "title": "canvas ： 搞个涂鸦板玩玩吧", "desc": "先看一下成品图。这里因为主题的问题下面被截断了一点，但是原来的主题实在不好看，所以就将就一下吧。 因为接下来的功能都是得在能涂鸦的情况下实现，所以最开始就得先实现这个最基础的功能啦。 在开始之前，首先得明确一下，canvas是如何做这个绘画的功能的呢？我们知道，当我们开始画图的…"}, {"id": "6844903641837649928", "title": "热乎的前端笔试/面试/跳坑笔记（指南)", "desc": "1. display:none与visibility:hidden的区别（2018拼多多前端笔试真题) 答案：在视觉效果上，两者是相同的，但是对于操作dom上是不同的 。 1. 基本问题 答案： 有风险，js的基本数据类型有 String Number Boolean unde…"}, {"id": "6960214100743815175", "title": "EventLoop", "desc": "一.JS是单线程还是多线程 JS其实是没有线程的概念的，所谓JS是单线程的其实是相对于多线程而言，所以JS不具备并行任务处理的能力。 二.不同环境下的EventLoop(异步回调原理) 2.1 宏任务"}, {"id": "6921629877984722958", "title": "浅谈JavaScript性能优化", "desc": "1.为什么要优化JavaScript的性能？    性能是创建网页或应用程序时最重要的一个方面，没有人想要应用程序崩溃或者网页无法加载，或者用户的等待时间过长。大部分用户希望网站在2秒以内加载完成，如"}, {"id": "6925963894259187725", "title": "this使用细节注意与三个固定切换方法", "desc": "浏览器（解析器）调用函数时，每次都会向函数内部传递两个隐含的参数，不是普通的写好的实参传递给形参那种。 这两个隐含的参数就是函数的上下文对象 this和封装实参的对象 arguments。 this指向的是一个对象，即this的类型就是object。这个对象称为函数执行的上下文…"}, {"id": "6994762728174780446", "title": "前端必会——对象的深浅拷贝", "desc": "js中如何进行对象的深浅拷贝呢？相信看过本文后，你就会有一定的了解。话不多说，看过代码演示后相信你就懂了~"}, {"id": "6844903994020610056", "title": "JavaScript 代码性能优化 - 从排查到处理", "desc": "近期在对我们的控制台做性能优化，这次记录下代码执行方面的性能排查与优化（纯 JS 上的不包含 DOM 操作等优化）。其它的优化点以后有机会再分享。 首先需要排查出需要优化的点，这个我们可以借助 Chrome 的 DevTool 来排查网站中的性能问题。 第一种方式可以借助 Pe…"}, {"id": "6844903721298558983", "title": "30分钟实现小程序语音识别", "desc": "为了参加某个作秀活动，研究了一波如何结合小程序、科大讯飞实现语音录入、识别的实现。科大讯飞开发文档中只给出 Python 的 demo，并没有给出 node.js 的 sdk，但问题不大。本文将从小程序相关代码到最后对接科大讯飞 api 过程，一步步介绍，半个小时，搭建完成小程…"}, {"id": "6855129007969697805", "title": "深入理解JavaScript闭包之闭包的使用场景", "desc": "本篇文章是上一篇 深入理解JavaScript闭包之什么是闭包文章的下篇，闭包的使用场景。 定义在函数中的参数和变量在函数外部是不可见的。 任何一对花括号中的语句都属于一个快，在这之中的所有变量在代码块外都是不可见的，我们称之为块级作用域。大多数类C语言都拥有块级作用域，JS却…"}, {"id": "6844903560388280327", "title": "一步步打造一个移动端手势库", "desc": "移动端已经为我们提供了touchstart,touchmove,touchcancel和touchend四个原生触摸事件。但一般情况下很少直接用到这几个事件，诸如长按事件等都需要自己去实现。不少开源的项目也实现了这些功能，如zepto的Touch模块以及hammer.js。本文…"}, {"id": "6917150828633686030", "title": "JavaScript词法作用域及作用域链", "desc": "系统学习总结，见证自己阶段性成长，通过文章的形式更加严谨、客观地梳理JavaScript的相关知识，也希望能够帮助更多的前端开发的朋友共同进步。 大多数时候，我们对作用域产生混乱的主要原因是分不清楚应该按照函数位置的嵌套顺序，还是按照函数的调用顺序进行变量查找。再加上this机…"}, {"id": "6920236688224550925", "title": "Javascript数据类型转换", "desc": "显式转换其他数据类型转换成Number将其他数据类型的值转化为数值时，有几种方法？Number()parseInt()parseFloat()+/-（一元操作符）说一说上面方法的异同？它们都是可以将非"}, {"id": "6987429420306792462", "title": "字符串常用方法", "desc": "字符串常用方法 1. 是否包含 2. 查找索引 3. 替换 4. 分割 5. 正则匹配 6. 大小写转换 7. 去空格 8. 补全 9. 截取"}, {"id": "6844903704219353102", "title": "「译」写好JavaScript条件语句的5条守则", "desc": "在用 JavaScript 工作时，我们经常和条件语句打交道，这里有5条让你写出更好/干净的条件语句的建议。 第一眼，上面这个例子看起来没问题。如果我们有更多名字叫 cherry 和 cranberries 的红色水果呢？我们准备用更多的 || 来拓展条件语句吗？ 我们可以用 …"}, {"id": "6844903648468664333", "title": "JS简单实现防抖和节流", "desc": "Ps: 比如搜索框，用户在输入的时候使用change事件去调用搜索，如果用户每一次输入都去搜索的话，那得消耗多大的服务器资源，即使你的服务器资源很强大，也不带这么玩的。 1. 防抖 - debounce 其中一种解决方案就是每次用户停止输入后，延迟超过500ms时，才去搜索此时…"}, {"id": "6981025191467941919", "title": "11-JS-WEB-API 事件", "desc": "~~~ - 编写一个通用的事件监听函数 - 描述事件冒泡的流程 - 无限下拉的图片列表，如何监听每个图片的点击？ ~~~"}, {"id": "6987390645564506149", "title": "JS面试题", "desc": "JS 变量类型 JS 中有 6 种原始值，分别是： boolean number string undefined symbol null 引用类型： 对象 数组 函数 JS 中使用 typeof 能"}, {"id": "6987354063553691678", "title": "现代 js 使用笔记（es6 之后）", "desc": "历史包袱 js 是一个独特的语言，因为他大部分情况下运行在浏览器里，你不能确定客户的浏览器是什么版本 而且有些时候，可以确定客户用的就是非常非常老的版本 他的历史包袱太重了： “不好的特性”不能被删掉"}, {"id": "6889310185156771853", "title": "纯前端实现分段读取本地文件", "desc": "领导提出一个问题，能不能不借助端的能力，实现本地分段读取数据分段显示。在没有特别大的性能要求或者明确提出要求的情况下一般是一次性加载所有的数据并渲染，但是如果数据量大或者手机性能不好的话就会有别的问题了。 既然FileList 对象继承于Blob对象，Blob对象对象又有sli…"}, {"id": "6844903985921392648", "title": "element-ui 文件上传修改文件名", "desc": "我们所有的静态资源（比如图片）都会上传到一个服务器上，在活动中访问时会统一访问静态资源服务器，而静态资源上传时并没有处理重名问题！！！接口侧仅仅是在前面加了一个4位数的随机数，也就是说，当同名图片超过 10000 张时，百分百会有图片被覆盖！！没错是直接覆盖而不是报错！即使不到…"}, {"id": "6844903606043279367", "title": "【翻译】Webpack 4 教程：从0配置到生产模式", "desc": "这个流行的模块打包工具进行了大规模的升级。 webpack4，有什么更新？大幅度的性能优化，零配置和明智的默认配置。 给中大型项目提供一个配置文件不是什么大问题。你甚至无法离开它。然而，对于一些较小型应用来说就有点麻烦了，尤其是你在心血来潮想开始做一些好玩的app的时候。 简要…"}, {"id": "6844904159385239566", "title": "CommonJS和ES6 Module 模块规范原理浅析", "desc": "这个两个规范曾经困扰过我，因为他们的关键词都很像：import/export/export default/require/module.exports... 总是傻傻分不清楚。 关于他们之间的区别只是听说一个动态加载、一个静态加载；一个导出副本，一个导出引用。这又是什么意思，…"}, {"id": "6960268419035824159", "title": "Lodash 的使用", "desc": "Lodash 的使用 安装 浏览器环境： or 数组 chunk 将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组。 如果 array 无法被分割成全部等长的区块，那么"}, {"id": "6932144984174886925", "title": "BB前端优化大法(上)", "desc": "作为新一代四有青年，在前端的路上，我们不能止步于满足日常的业务开发，一个项目做完我们更应该花些时间去复(mo)盘(yu)整个项目，想想怎么样让项目跑得更猛更快更好，现在我们就来扒一扒这些年前端优化的那些骚操作。 了解前端优化前，我们需要先了解一下浏览器运行机制，如果对这些东东不…"}, {"id": "6857876880701030408", "title": "图解作用域，作用域链，闭包", "desc": "作用域的概念是理解js的关键所在，但是大部分刚入们的同学，都像曾经的我一样，对其一知半解，甚至从未听闻。不管从性能角度还是从功能角度，作用域都非常关键。 1、首先我们要清楚，每一个js函数都表示为一个对象，他们都是Function对象的一个实例。Function对象同其他对象一…"}, {"id": "6844903778404007943", "title": "React 16.8 版本: 带 Hooks 的版本", "desc": "Hooks 允许你在不编写 class 的情况下使用状态(state)和其他 React 特性。 你还可以构建自己的 Hooks, 跨组件共享可重用的有状态逻辑。 Hooks 介绍 解释了我们给 React 添加 Hooks 的原因。 Hooks 概览 是对内置 Hooks 的…"}, {"id": "6998390369511538724", "title": "JS应用：统计字符串中每个字符出现的次数", "desc": "将字符串例如：str = “abcddcbaAABBC” 中每个字符统计，数据结果为使用对象形式表示。 即：{ a:2,b:2,c:2,d:2,A:2,B:2,C:1 }"}, {"id": "6969803183086370847", "title": "JavaScript 中优雅处理对象的6个方法", "desc": "在平常项目开发中可以使用这些方法容易地处理对象。本文介绍6个在项目中用得上的方法，如Object.freeze()、Object.seal()、Object.create()等的使用"}, {"id": "6949778575100739597", "title": "top-level await", "desc": "ECMAScript 提案 Top-level await 允许开发者在 async 函数外使用 await 字段,目前已进入 tc39 Stage 3"}, {"id": "6963127638315515912", "title": "关于变量提升和函数提升的那些事", "desc": "前言 在学习javascript过程中，我们应该如何让初学者理解关于变量提升和函数提升,接下来让我们来了解一下关于变量提升和函数提升的那些事。 变量提升 首先，大家都知道代码是从上往下执行的，接下来，"}, {"id": "6844904194680291342", "title": "客户端缓存（http缓存和本地缓存）", "desc": "Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires sessionStorage …"}, {"id": "6844904165982879758", "title": "用英雄联盟的方式讲解JavaScript设计模式（二）！", "desc": "设计模式在编程开发中用途十分广泛，每一个模式描述了一个在我们周围不断重复发生的问题，以及解决问题的核心！很多的时候，对于我们其实如何选择适合的设计模式，才更加消耗时间。从之前的文章，每一个设计模式都会有一到两个例子，既可以给自己以后开发回忆设计模式提供帮助，也希望可以给读者一些…"}, {"id": "6964209571988504584", "title": "Service Worker 使用指南", "desc": "service worker用的可能不多，但在很多时候却有着不可替代的作用，现在很多文章都只是对其简要介绍，细节部分都没有说明，所以就打算写这篇文章较为全面地聊一聊service worker。"}, {"id": "6942272538827292679", "title": "JavaScript数据结构 - 集合", "desc": "大家好，我是图图。上一篇文章聊了链表的数据结构，链表包括：单向链表、双向链表、循环链表和有序链表这几个常见的链表。而在操作的过程中，也是比较复杂的。因为它具备有一个指向下一个节点的指针，因此在操作的过程中要多加小心。那么这一章我们就来聊聊集合。下面我们废话不多说，一切尽在代码中…"}, {"id": "6844903717045534734", "title": "app中的webview通识篇（上）", "desc": "如果你还是第一次与app合作开发webview的页面，那么对于如何调试，可能有哪些问题可能是不够了解的。本文尝试性的根据自己的经验给大家一个入门级别的了解，如果是大佬级别的，可以绕路了。 为了更好的在app中调试开发我们的移动页面（h5），我们需要与app开发人员约定一些基本的…"}, {"id": "6995922322679365662", "title": "JavaScript的7大类型补缺补漏", "desc": "知道你对JavaScript的类型很熟了，那以下几个关于类型的问题你你能答出几个？ String字符串有最大长度吗？0.1+0.2 == 0.3 是否正确？typeof null 得到的是什么？..."}, {"id": "7001445812119011364", "title": "了解web中的同源策略", "desc": "同源策略是对脚本代码可以与哪些web内容进行交互的全面安全限制。它通常在网页包含<iframe>元素时发挥作用。在这种情况下，同源策略控制一个框架中JavaScript代码与其他框架内容的交互。"}, {"id": "6844904200220966920", "title": "10分钟学会 optioanl chaining 可选链", "desc": "这里列举一下常用的场景，以供下次能在项目实践中更好的使用。 由于 JavaScript 是一门动态语言，所以我们访问对象属性的时候总是会很小心的做一系列的防御性编程。 比如我们要访问对象的某个属性，但是对象是后端接口返回的，有可能为 null ，这时候我们在访问属性的时候一般会…"}, {"id": "6981723059359055886", "title": "js中的变量提升和函数提升", "desc": "js 执行 词法分析阶段：包括分析形参、分析变量声明、分析函数声明三个部分。通过词法分析将我们写的 js 代码转成可以执行的代码。 执行阶段 变量提升 只有声明被提升，初始化不会被提升 声明会被提升到"}, {"id": "7000771871394234376", "title": "数组的5种循环方法", "desc": "数组提供循环方法 1.forEach 循环 2.map 循环 :循环数组的时候再复制一个数组出来 3.filter ： 过滤 循环 4.some 循环5.every 循环 以及循环的拓展"}, {"id": "6994453653184577567", "title": "二叉树《学习笔记》——删除操作", "desc": "删除二叉树的子节点 这个比较复杂一点，要分情况进行处理。首先找到要删除的节点，没找到就不用删除了；处理方式如下："}, {"id": "6994290044294922254", "title": "js数组常见方法", "desc": "数组方法 push() 在数组尾部新增元素, 改变原数组 unshift() 在数组最前面新增元素,改变原数组 pop() 删除数组末尾的元素, 改变原数组, 返回删除的元素 shift() 删除数组"}, {"id": "7001882059740282910", "title": "js第三周总结", "desc": "前言 这个周主要学习了数组的API，字符串的API，怎样创建元素渲染DOM,正则，Math对象,Date对象,Error对象，函数，以及Object对象等等，下面是我对这个周学习的东西的总结 数组 数"}, {"id": "6844903694035582989", "title": "vue + webpack 前端性能优化", "desc": "对于程序开发者而言，开发一个项目不仅仅注重效率和功能，前端的性能问题也是非常重要的。这直接影响用户的体验，从而间接的也反应该项目质量的好坏。 影响项目性能的原因有很多，如：资源文件的大小，业务的繁杂程度等，所以前端优化的方式也很多。这些东西很零碎，容易被人遗忘。所以这篇文章中对…"}, {"id": "6844903960650711054", "title": "聊一聊 Javascript 中的 AST", "desc": "在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。 听起来还是很绕，没关系，你可以简单理解为 它就…"}, {"id": "6844903501219233800", "title": "JavaScript 异步队列实现及拓展", "desc": "队列对于任何语言来说都是重要的，io 的串行，请求的并行等等。在 JavaScript 中，又由于单线程的原因，异步编程又是非常重要的。昨天由一道面试题的启发，我去实现 JS 中的异步队列的时候，借鉴了 express 中间件思想，并发散到 co 实现 与 generator，…"}, {"id": "6844903959237230605", "title": "【React系列】动手实现一个react-redux", "desc": "react-redux 是 redux 官方 React 绑定库。它帮助我们连接UI层和数据层。本文目的不是介绍 react-redux 的使用，而是要动手实现一个简易的 react-redux，希望能够对你有所帮助。 首先思考一下，倘若不使用 react-redux，我们的 …"}, {"id": "6896830895354249230", "title": "JS继承", "desc": "继承是为了子类可以使用父类的所有功能，并且能对这些功能进行扩展。 1. 构造函数继承（call&#x26;apply） 2. 原型继承 3. 组合继承 4. 寄生组合继承 5. Class继承 new创建一个对象，执行构造函数。 Object.create相当于创建一个对象，但…"}, {"id": "6992763767029235749", "title": "一文图解树结构及应用", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 什么是树？ 一种分层数据的抽象模型 常见的数结构： DOM树、级联选择、树形控件...... js中，可以用object, array构建树"}, {"id": "6880202777084067853", "title": "不懂就问 | 一文弄懂 this 的前世今生", "desc": "JavaScript 的`this`关键字大家都不陌生，根据`this`所在的不同的运行环境，会产生一些容易让人困惑的表现和差异，希望大家阅读完这篇内容能够清楚的明白`this`的用途。"}, {"id": "6960602881229586439", "title": "读懂JS核心（二）--变量提升与函数声明提升", "desc": "变量提升与函数声明提升 这一节，我们会对变量声明、函数声明做详细的介绍，深入地了解变量提升和函数声明提升，最后我们还会介绍一下class的声明，以及let、const是如何工作的。"}, {"id": "6992873276305309709", "title": "JS的二进制家族：Blob的具体介绍 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 什么是Blob Blob是一种JavaScript对象类型。Blob对象存储着大量的二进制数据，我们所熟悉的file对象就是继承自Blob，"}, {"id": "6996084301250953247", "title": "进阶教程 5. 正则基础", "desc": "正则这个小妖精，一直很磨人。正则虐我千百遍，我待正则如初恋！今天当是写给正则的情书啦，今天七夕，我们一起宠爱她吧！！"}, {"id": "6846687598790836232", "title": "坑爹的 iOS 9：记一次 H5 白屏踩坑之旅", "desc": "某天，客服群里反馈，App 内嵌的某个活动页，iOS 9 的用户打开白屏，然后测试说 PC 浏览器、自用的手机都能打开，于是理所当然的将锅甩给了原生同事。但随着问题的排查，发现 “锅” 越来越朝 Web 前端方向靠拢…… Google 后说白屏是因为有 ES6 的语法在里面，我…"}, {"id": "6856784900775739400", "title": "使用Chrome扩展程序生成网页骨架屏", "desc": "对于依赖接口渲染的页面，在拿到数据之前页面往往是空白的，为了提示用户当前正在加载中，往往会使用进度条、loading图标或骨架屏的方式。对于前两种方案而言，实现比较简单；本文主要研究骨架屏的应用及实现，并给出一种使用Chrome扩展工具快速生成骨架屏的方案。 首先需要保留节点的…"}, {"id": "6844903648162480142", "title": "你好，JavaScript异步编程---- 理解JavaScript异步的美妙", "desc": "每天不能不写业务，但也不能只写业务。所以选择了一个自己还在学校期间没有学明白的内容进行了巩固，同步异步问题。学习一个知识之前必先给自己一个问题三连。为什么要有这个？ 这个怎么用？ 这个怎么回事？ 首先JS是一个单线程的语言。单线程的含义类似于从头走到尾，谁也别管谁，前面堵车我就…"}, {"id": "6844903692752142343", "title": "JavaScript 事件循环及异步原理（完全指北）", "desc": "在 Node 中，Node.js 借助 libuv 来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助libuv来实现多线程。 JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这样设计的方案主要源于其语言特性，因为 JavaScr…"}, {"id": "6887952135648968717", "title": "如何实现一个FormData？", "desc": "最近项目中遇到一个问题，我们需要在cocos项目里去上传音频文件，而cocos原生环境和平时我们开发所在的浏览器环境和Node环境有很多差异，而cocos环境只提供了基础类，没有提供FormData这种封装类。 这里我列一个最简单的例子，我们来看看FormData到底是什么。 …"}, {"id": "6981747653323276319", "title": "介绍下 Set、Map、WeakSet 和 WeakMap", "desc": "Set 和 Map 主要的应用场景在于 数据重组 和 数据储存 Set 是一种叫做集合的数据结构，Map 是一种叫做字典的数据结构 1. 集合（Set） Set 本身是一种构造函数，用来生成 Set "}, {"id": "6986288017883267079", "title": "JS个人学习(3)——二进制基础", "desc": "关于二进制方面知识的一些学习记录以及总结，包括了原码，反码，补码，以及双精度浮点数方面的基础理论记录。。"}, {"id": "6950673570196357156", "title": "new 到底都做了什么事情", "desc": "简介最近由于换了工作，都没有时间写文章，今天好不容易抽出一点时间，就来好好介绍一下 new 运算符吧，虽然这个东西我们平时都很常见，但是它到底都做了什么事情呢，让我们来好好探究一下。new 运算符的作"}, {"id": "6974183435761877022", "title": "Javascript复习第十一天", "desc": "这是我参与更文挑战的第15天，活动详情查看：更文挑战 正则表达式 概述 正则表达式（regular expression） RegExp 正则表达式用于匹配字符串中字符组合模式，用于表单验证。 正则字"}, {"id": "6941179323978088479", "title": "如何解决数组塌陷？", "desc": "​谈到数组塌陷，估计小伙伴们不知道什么意思，先看一张图。从上图我们大概明白了“塌陷”的意思，即如果删除了数组中的某一个元素，当前这个索引的内容不会是空的，也不会占位，数组只会把后面的元素往前补上，这就"}, {"id": "6961005845278621726", "title": "JavaScript 中 自执行函数&函数类型&函数表达式各有什么特点，三者又有什么区别？", "desc": "函数&自执行函数&函数类型 1、自执行函数特点 函数表达式与函数声明不同，函数名只在该函数内部有效，并且此绑定是常量绑定。 对于一个常量进行赋值，在 strict 模式下会报错，非 strict 模式"}, {"id": "6844904004770594830", "title": "JavaScript 加减危机 —— 为什么会出现这样的结果？", "desc": "下面，我们会通过探讨 IEEE 754 标准，以及 JavaScript 加减的计算过程，来复现问题。 JavaScript 里面的数字采用 IEEE 754 标准的 64 位双精度浮点数。该规范定义了浮点数的格式，对于 64 位的浮点数在内存中表示，最高的 1 位是符号为，接…"}, {"id": "6844903583708610568", "title": "自己写的面试题，自己想的答案", "desc": "因为机缘巧合，让当了无数次面试者的我，当上了面试官，也和几个面试者交流过。既然要应对面试者，我就当然要准备面试题了，好让我大概知道面试者是什么水平。这个时候，也该详解下，自己的写的那些题目。因为题目是我自己写的，并不是网上摘的，所以知识点比较基础，也不全面。如果大家对面试题有什…"}, {"id": "6844903971866279949", "title": "追求完美代码之——实现元素拖拽修改宽高和位移插件", "desc": "一个元素正常展示。点击的时候，会多出边框，边框的角落会有拖拽修改宽高的控件,控件位置、大小和元素一模一样 点击某个角落的拖拽控件，以该控件的的中心对称点为中心点，变更宽高。新的width = 旧的width + 控件x坐标变化量(可正可负)，height也是 给元素加上mous…"}, {"id": "6893311497666199559", "title": "原型与原型链", "desc": "JavaScript 的作者 Brendan Eich 在设计这门编程语言时，只是为了让这门语言作为浏览器与网页互动的工具。他觉得这门语言只需要能完成一些简单操作就够了，比如判断用户是否填写了表单。 基于简易语言的设计初衷，Brendan Eich 觉得 JavaScript …"}, {"id": "6987428929501921311", "title": "leetcode 221. 最大正方形 --javascript dp", "desc": "221. 最大正方形 题目 在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。 题解 动态规划（Dynamic Programming, DP） 动态规划"}, {"id": "6886031972884774925", "title": "当我谈 Rax 按端拆分代码的时候我谈些什么", "desc": "Rax 是淘系的一套跨端解决方案。 根据 Rax 工程配置 知道，使用 Rax 时，如果设置了 target: ['web', 'weex']，则构建产物 build 目录会有两个子目录：web 和 weex，分别在 web 端和 weex 端消费。并且通过观察可以发现，两个目…"}, {"id": "6844903570769199118", "title": "危险的 target=\"_blank\" 与 “opener”", "desc": "在说 opener 之前，可以先聊聊 <iframe> 中的 parent。 我们知道，在 <iframe> 中提供了一个用于父子页面交互的对象，叫做 window.parent，我们可以通过 window.parent 对象来从框架中的页面访问父级页面的 window。 op…"}, {"id": "6844903602822053895", "title": "babel-polyfill VS babel-runtime VS babel-preset-env", "desc": "其中涉及到的包执行一下npm install安装一下即可，这里就不赘述了。这里的部分包接下来会重复提到，说明为什么要这样装 babel-polyfill 是为了模拟一个完整的ES2015+环境，旨在用于应用程序而不是库/工具。并且使用babel-node时，这个polyfill…"}, {"id": "6945659721055469605", "title": "new Date()引发的血案", "desc": "距离上线就剩一天了，晚上临下班的时候，我们测试小姐姐火急火燎的找我来了，日期插件出问题啦，顿时虎躯一震，感觉距离下班时间又远了一步，这个插件是从其他项目直接拿过来的，已经在线上运行很久了，怎么还会有问题呢。 先让测试小姐姐莫急，然后了解了一下问题，原来是插件初始化是3月份，点击…"}, {"id": "6931971590728974344", "title": "js机制3: 栈、堆、垃圾回收", "desc": "语言类型静态语言：使用前需要确认其变量数据类型（c）动态语言：运行过程中需要检查数据类型（js）强类型语言：不支持隐式类型转换弱类型语言：支持隐式类型转换（c、js）js：可以用同一个变量保存不同类型"}, {"id": "6844903569544462343", "title": "关于 Vue 的路由权限管理", "desc": "曾经在工作上对 vue 路由权限管理这方面有过研究，这几天又看到了几篇相关的文章，再加上昨天电面中又再一次提及到，就索性整理了一下自己的一些看法，希望对大家有帮助。 大体上实现的思路很简单，先上图： 无非是将路由配置按用户类型分割为 用户路由 和 基本路由，不同的用户类型可能存…"}, {"id": "6929351680669122568", "title": "[JS犀牛书英文第七版笔记]4. 对象，原型，原型链", "desc": "上一章链接：[JS犀牛书笔记]3. 语句，循环和声明 对象使 JavaScript 中最基本的数据类型。对象是一个复合值，这意味着它结合了许多值（包括基本值或别的对象），对象也允许我们根据名字去存放或者取回这些值。 对象是一个未排序的属性（properties）组合，每个属性都…"}, {"id": "6863350045845307400", "title": "一文带你重写call、apply、bind", "desc": "小编荐语：本文旨在帮助大家彻底掌握call、apply、bind重写Call在重写之前我们分析一下call到底是怎么执行的1.func首先基于_proto_找到Function.prototype.c"}, {"id": "6844903605850341390", "title": "react中使用swiper", "desc": "欢迎大家访问我的博客OECOM，与我一起探讨前端。 最近的react项目需要使用轮播图，自然而然的就想到了swiper，一直想通过npm安装的方式来使用，但是网上找了很多，资料很少，于是就暂时通过在index.html里直接引用swiper的js和css文件的方式来加载，下面来…"}, {"id": "6844903589924569101", "title": "实现多个标签页之间通信的几种方法", "desc": "之前在网上看到一个面试题：如何实现浏览器中多个标签页之间的通信。我目前想到的方法有三种：使用websocket协议、通过localstorage、以及使用html5浏览器的新特性SharedWorker。 localstorage是浏览器多个标签共用的存储空间，所以可以用来实现…"}, {"id": "6844903976446459917", "title": "vue/react🚀\"联动\"/\"菜单\"组件的小帮手🔧, \"数组\"变\"树\"🌲函数", "desc": "这次菜单层级不固定. 直接给把数据库中的表数据(数组)发给你. 菜单需要排序. 其实平时很少写数据处理, 不过觉得自己差不多能实现就答应了. 写完了觉得还挺好用就分享一下, 🐦菜鸟一枚, 👨路过的大佬如果发现什么问题请告知, 😜我必虚心接受. 注: 饿了么/iview等组…"}, {"id": "6844903621469929480", "title": "H5实现iPhoneX上的Animoji", "desc": "不到100行代码实现iPhone X上的Animoji。 两个Demo及源码，一个Animoji的，一个\"视差\"的。"}, {"id": "6844903861606416397", "title": "前端面试之JavaScript设计模式", "desc": "面向对象编程就是将你的需求抽象成一个对象，然后对这个对象进行分析，为其添加对应的特征（属性）与行为（方法），我们将这个对象称之为 类。 面向对象一个很重要的特点就是封装，虽然 javascript 这种解释性的弱类型语言没有像一些经典的强类型语言(例如C++，JAVA等)有专门…"}, {"id": "6844904116699807757", "title": "这有一份网络相关的消息，请查收", "desc": "疫情虽然没有结束，不过学习始终是不能停的。这次的内容主要以网络为主，也是依据正常面试中常被问及的话题进行了梳理"}, {"id": "6895883081014575117", "title": "如何在一个区域内实现随机出现头像并替换", "desc": "好久没写文章了，最近一直在想着写些实用性的逻辑文章。刚好在做公司的周年庆活动时，一个需求是 在一个地图区域内随机显示头像替换 React 或者 Vue，这个随便，主要讲述思路，用什么都没所谓，这里作者使用的是 React 。 假设我获取了 100 个用户头像，将其分为 100 …"}, {"id": "6931686483023626254", "title": "一直成谜的js执行上下文，终于真相大白", "desc": "当一段代码被执行的时候，JavaScript 引擎先会对其进行编译，并创建执行上下文。 哪些情况下代码才算是“一段”代码，才会在执行之前就进行编译并创建执行上下文。一般说来，有这么三种情况： 当 JavaScript 执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且…"}, {"id": "6844903599655370759", "title": "Node HTTP/2 Server Push 从了解到放弃", "desc": "前阵子，在Media看到一篇文章《Node.js can HTTP/2 push!》。看到push这个字眼时，我想到的是WebSocket消息推送。难不成HTTP/2还能像WebSocket那样可以服务端主动推送消息？好厉害，我就一下子来了兴趣。 然而阅读完文章之后，发现理想与…"}, {"id": "6844903655565426696", "title": "理解异步之美：Promise与async await（一）", "desc": "很难以理解这种地狱式的回调（回调地狱）会对可读性有多么大的摧毁。 当你把一件事情交给别人去做（可能马上就能完成的也可能是需要一段时间的）这个人在任务完成或者失败后都会给你一个回应，这样的人你是不是特别放心的把事情交给他，他没回应你那么他是正在办事、回应你了就是成功了或者失败了。…"}, {"id": "6844904078934278158", "title": "长篇总结之JavaScript，巩固前端基础", "desc": "JavaScript是一种基于对象和事件驱动的客户端脚本语言，最初是为了检验HTML表单输入的正确性，起源于Netscape公司的LiveScript语言。 关系是：liveScript是javaScript的一个曾用名，ECMAscript: 定义了javascript的语法…"}, {"id": "6912353646420164622", "title": "2020的最后一天，不妨了解下装饰器", "desc": "引入装饰器更能够便于代码逻辑的解藕和复用。举一个例子 举一个非常常见的需求。假设我们有一个类Network，它有一个异步getList方法 如果需要对另一个方法使用全局 loading，可能又需要再写一遍。并且这个代码还入侵了函数本身的逻辑。这时候使用装饰器就可以相对优雅解决这…"}, {"id": "6844904086169468936", "title": "我与花呗与前端技术", "desc": "掰起手指头一数，这已经是在家办公的第六周了。 回想起我的 2020 年，是在 B 站晚会上，听着五月天的「干杯🍻」开始的——原以为会开个好头呢。 窗外雨声吧嗒，我的心绪也跟着躁动起来，不如就藉此和大家唠唠我与花呗还有团队的前端技术吧，也算个总结感想之类的杂谈。 2019 年年…"}, {"id": "6981074629779521566", "title": "web前端高级JavaScript - JS高阶编程之模块化思想/惰性函数/柯理化函数/compose组合函数", "desc": "JS高阶编程技巧之模块化思想/惰性函数/柯理化函数/compose组合函数 模块化思想 多个人去维护。那么在这种情况下就很有可能造成全局变量的污染；比如小A写了一个queryData函数用于查询数据，"}, {"id": "6844903536501735438", "title": "字符串模板浅析", "desc": "虽然现在有各种前端框架来提高开发效率，但是在某些情况下，原生 JavaScript 实现的组件也是不可或缺的。例如在我们的项目中，需要给业务方提供一个通用的支付组件，但是业务方使用的技术栈可能是 Vue、React 等，甚至是原生的 JavaScript。那么为了实现通用性，同…"}, {"id": "6844903613391699981", "title": "nodejs微服务框架解决方案", "desc": "seneca是一个nodejs微服务工具集，它赋予系统易于连续构建和更新的能力。下面会逐一和大家一起了解相关技术入门以及实践。 这里插入一段硬广。小子再进行简单整合之后撸了个vastify框架 ---- 轻量级nodejs微服务框架，有兴趣的同学过目一下，欢迎顺手star一波，…"}, {"id": "6872765382898221064", "title": "JS 浅拷贝与深拷贝问题", "desc": "JS中对象之间的赋值采用的是引用拷贝的方法。在理解这个之前，需要先理解JS运行时的堆栈空间。对象数据存放在堆内存中，对象变量存放在栈内存中，对象变量通过引用数据的堆地址实现对象访问。 与基本类型不同，对象之间的赋值，是拷贝了堆内存的地址空间，结果是两个变量指向了同一个对象实体，…"}, {"id": "6998346862558183460", "title": "数组的方法—常用数组", "desc": "常用数组 pop：删除数组的最后一个 原数组变，返回删除的元素 ` ` push：向数组尾部添加一个元素 原素组变 ` ` shift：删除数组的第一个元素 原数组变，返回删除的元素 ` ` unsh"}, {"id": "6989579945282371620", "title": "使用原生js来替换title属性的悬浮文字提示", "desc": "使用原生js来替换title属性的悬浮文字提示 背景 一般我们想要DOM元素出现悬浮文字提醒，就会给这个元素添加title属性即可 title属性的悬浮文字提示在不同的浏览器，悬浮等待的时间和悬浮文字"}, {"id": "6953536214150414350", "title": "前端内练基础-彻底搞懂浏览器的Event-loop", "desc": "背景 Event loop 是一个很重要的概念，本质上指的是计算机的运行机制，JavaScript语言采用的就是这种机制，众所周知JavaScript是单线程，为什么会设计成单线程呢？其实早在几年前阮"}, {"id": "6987602787014017060", "title": "JS获取视频编码问题", "desc": "需求及问题 对用户本地上传的视频进行预览播放，然后做一些操作（裁剪、添加滤镜等）。 但是，浏览器(chrome)只能对编码为h264的视频进行预览，对于浏览器不能预览的视频，前端需要调用后端接口上传视"}, {"id": "6972115016027750414", "title": "AJAX", "desc": "同步交互和异步交互 所谓同步交互就是指当客户端向服务端和数据库发送数据之后，若要发送下一个请求需要等待服务端和数据库的响应结果。这就好比数据结构中的队列，一个执行完毕在执行下一个。也类似一些面向过程语"}, {"id": "6927136884195852296", "title": "数组去重的十一种方式", "desc": "思路：利用Set方法不能含有相同值的特性，返回时利用展开运算符(...)返回一个新的数组，因此原数组不会被改变。 思路：利用Array.from方法，该方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。因此原数组不会被改变。 从而达到去重的效果，由于是新声明的数组来…"}, {"id": "6953505088673415176", "title": "JavaScript（十二）操作符：一元、加性、乘性、指数", "desc": "位操作符 位操作符用于数值的底层操作，也就是操作内存中表示数据的比特（位）。ECMAScript 中的所有数值都以 IEEE 754 64 位格式存储。"}, {"id": "6972403805006594078", "title": "技术周报 · 2021-06-11", "desc": "小编推荐 大型前端项目 DevOps 沉思录 —— CI 篇 The Plan for React 18 CSS size-adjust for @font-face 框架 & 基础 微前端框架 Mi"}, {"id": "6844904130796847111", "title": "[译]掌握 JavaScript 面试：什么是函数式编程", "desc": "函数式编程已经成为 JavaScript 领域中一个非常热门的话题。就在几年前，甚至很少有 JavaScript 程序员知道什么是函数式编程，但是我在过去 3 年看到的每个大型应用程序代码库中都大量使用了函数式编程思想。 函数式编程（通常缩写为 FP）是通过组合纯函数，避免状态…"}, {"id": "6844903601282744334", "title": "为什么我的经纬度坐标放在百度地图上会偏移几百米？", "desc": "国内对地理坐标有特殊的政策，所有电子地图必须对位置做偏移处理，这导致了从底层接口得到的经纬度坐标展示在地图上会有偏移。gcoord可以用来修正不同坐标系之间的偏移。"}, {"id": "6844903590033621006", "title": "尾调用和尾递归", "desc": "1. 定义 尾调用是函数式编程中一个很重要的概念，当一个函数执行时的最后一个步骤是返回另一个函数的调用，这就叫做尾调用。 2. 尾调用优化 造成这种结果是因为每个函数在调用另一个函数的时候，并没有 return 该调用，所以JS引擎会认为你还没有执行完，会保留你的调用帧。 ba…"}, {"id": "6844903872226394120", "title": "想做前端开发？推荐几个必备珍品组件库", "desc": "前端是一个一直在发展的名词，从最初刀耕火种时代的页面仔到文艺复兴时期的前端工程化再到如今新时代的大前端，前端技术在某种程度上似乎可以为所欲为了。但是我们这次讨论的是前端技术中的一部分—组件库。 组件是组成页面中最基本的元素，按钮，输入框，下拉选择都是组件，组件和组件组合就变成了…"}, {"id": "6844903591484866568", "title": "Webpack 4 使用指南", "desc": "最近想学一学Webpack,在网上看了很多相关文章,但是Webpack更新的太快了,很多文章都不适用weback新的版本,我从头开始研究了一番,在这里和大家分享交流一下,有错误的地方请指出. webpack-dev-server 等... 一 . 搭建一个webpack项目 W…"}, {"id": "6844903544596725767", "title": "19 个 JavaScript 有用的简写技术", "desc": "当想写if...else语句时，使用三元操作符来代替。 简写： const answer = x > 10 ? 'is greater' : 'is lesser'; 也可以嵌套if语句： const big = x > 10 ? \" greater 10\" : x 当给一个变…"}, {"id": "6844903590339821575", "title": "「面经：面试 ThoughtWorks | 掘金技术征文」", "desc": "我是一名web前端程序员，说真的TW的面试真的很有意思，也很有心意，让我在整个面试过程中不仅仅了解到自己的优势，并且看到了自己的不足之处，先不说面不面得上，面试的过程都是一次很不错的经历。 早在大学里，就对于TW有了解，技术大牛，极客思想，扁平化管理，出国经历。非常的吸引我这样…"}, {"id": "6844903654978224141", "title": "揭秘js框架中的常用套路", "desc": "我们每天都在使用各种各样的框架，这些框架伴随着我们每天的工作。通过使用这些框架的目的是为了解放我们，很少人去真正关心这些框架的背后都做了些什么。我也使用了不少的框架，通过这些流行框架也让我学习到了一些知识，就想把这些东西分享出来。 以上代码执行的结果就是在页面增加了一个div节…"}, {"id": "6844903589907808269", "title": "styled-components：一本通", "desc": "虽然在vue这样的框架里我们能在.vue文件里将css、js、html写在一起，但实际上它们的联系很弱，特别是js和css，它们完全无法沟通。 而styled-components很好的解决了这个问题，通过它，我们能让整个css架构跟着组件走，而不再仅仅是貌合神离的被放置在一个…"}, {"id": "6844903598510309390", "title": "虚拟滚动的轮子是如何造成的？", "desc": "相信大家都遇到过渲染一个很长的列表或者页面带来的痛苦，长列表与页面可能对首屏渲染速度造成很大的影响，并且会对页面的滚动造成一些不流畅的体验。 我也在最近遇到了这个问题，发现除了直接使用分页外，虚拟滚动这种解决方案很是流行，于是也重新造了一下vue中虚拟滚动的轮子。虚拟滚动简单的…"}, {"id": "7001481897704587301", "title": "《JavaScript 的诞生》", "desc": "一、JavaScript的历史 JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器"}, {"id": "6995353069978386462", "title": "模仿Win10 UI 框架 Vue3", "desc": "Win10 UI 框架 Vue3 推荐 Vue 3 + Typescript + Vite + Using <script setup> 本框架可以让你的页面像win10视窗系统一样，变为一个网页上的"}, {"id": "6844903505791025166", "title": "JavaScript 开发人员需要知道的简写技巧", "desc": "本文来源于多年的 JavaScript 编码技术经验，适合所有正在使用 JavaScript 编程的开发人员阅读。目的在于帮助大家更加熟练的运用 JavaScript 语言来进行开发工作。"}, {"id": "6844903732686094350", "title": "H5页面监听Android物理返回键", "desc": "Android物理返回键的点击事件，一般webview的默认行为是 window.history.go(-1) ，但是在实际需求场景下，简单的页面回退并不能满足需求，所以需要H5页面监听Android物理返回键从而自定义处理方法。 主要是运用 HTML5 History API…"}, {"id": "6940215790108934152", "title": "凹凸技术揭秘：如何服务 toG 项目——数字人民币项目前端总结", "desc": "toG 项目——一个在我等日常工作中极为罕见、极为神秘的项目领域，所有经历过的人，都仿佛经受了一场狂风暴雨的洗礼，谁做谁知道。 而数字人民币项目，光看名字就令人心生敬畏——新的货币形式、政府合作项目，充满着未知与挑战。事实也的确证明，这一不同寻常的项目，拥有从政府侧沟通、产品策…"}, {"id": "6957611897550012430", "title": "自适应布局方案与px2rem-loader加强版源码实现", "desc": "1.核心概念 1.1 设备物理像素 是一个物理概念，是显示器显示的最小物理单位，设备屏幕的物理像素，任何设备的物理像素的数量都是固定的 iPhone6的像素分辨率是750*1334 1.2设备独立像素"}, {"id": "6844903645071294472", "title": "TypeScript 一些你可能不知道的工具泛型的使用及其实现", "desc": "本文将简要介绍一些工具泛型使用及其实现, 这些泛型接口定义大多数是语法糖(简写), 甚至你可以在 typescript 包中的 lib.d.ts 中找到它的定义, 最新版的 typescript (2.9) 已经包含了大部分, 没有包含的我会特别指出. Partial 作用是将…"}, {"id": "6998913017215713294", "title": "数据结构-对象和数组(一)", "desc": "前文我们学习了 Node.js 实战: 文件系统模块 结合 HTTP模块-搭建一个简单本地文件服务器, 通过读取本地 json文件, 返回 数据 本文来学习数据结构 - 对象"}, {"id": "6844903875904798727", "title": "函数式编程初探", "desc": "前端函数式编程的概念已经出现了蛮久了，我可能或多或少在项目中使用过函数式的方法写代码，但是我一直也没有仔细深入的研究下什么是函数式编程，最近刚好有空，查了些资料，看了些书籍，把自己的心得总结下。 要是想要弄明白函数式编程首先要明白什么是高阶函数。 这样拆分后，逻辑就分为了两个部…"}, {"id": "6955962274917908488", "title": "什么变量是存储在堆/栈？", "desc": "什么变量保存在堆/栈中？ 看到这个问题，第一反应表示很简单，基本类型保存在栈中，引用类型保存到堆中✌️✌️✌️，但仅仅就如此简单吗？我们接下来详细看一看 ### JS 数据类型 我们知道 "}, {"id": "6981000078815133733", "title": "levi_js 总结2", "desc": "实现lazyman Jquery选择器怎么实现的 给页面注入50万个li怎么做提升性能？ 手写懒加载（考虑防抖和重复加载问题） setTimeout和requestAnimationFrame的区别 "}, {"id": "6994674768238608398", "title": "ECMAScript新特性", "desc": "ECMAScript2015 1. let和const let和const只会在所声明的块中生效 let在for循环中的表现 let修复了变量声明提升现象 const是恒量，恒量要求声明同时赋值 恒量"}, {"id": "6940957081633718280", "title": "前端刷题路-Day1", "desc": "给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。 你可以按任意顺序返回答案。 解释：因为 nums[0] + nums[…"}, {"id": "6981617935093923870", "title": "JS 中的继承", "desc": "这是我参与新手入门的第1篇文章 这篇文章简单总结了JS 中的实现继承的方法，如有纰漏，还请多多指教！ 原型链继承 重写原型对象，直接使用父类型的实列 原型链继承存在的问题： 多个子类型的实例对象，操作"}, {"id": "6996557818081837087", "title": "前端将UTC时间格式转化为本地时间格式", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 背景 在前后端数据接口通信中，后台返回的时间往往是 UTC 格式的，即2020-10-12T10:31:35.891724+00:00这种"}, {"id": "6982198385184866335", "title": "数组中一部分方法", "desc": "数组中一些基本常用知识，巩固基本知识，这是我参与新手入门的第2篇文章，想要持续更新，一边锻炼自己的语言表达能力"}, {"id": "6844903616189300744", "title": "[译]如何优雅地用 Vue 创建数据驱动的用户界面", "desc": "虽然我们通常在构建大部分的视图时知道需要用到哪些组件，但有时我们直到运行时才知道它们是什么组件（译者注：动态组件）。这意味着我们需要基于应用程序状态、用户设置或来自 API 请求的响应结果来构建视图。一个常见的情况是构建动态表单，其中所需的问题和组件由 JSON 对象配置，或者…"}, {"id": "6955658907431895076", "title": "JavaScript实现鼠标点击拖拽", "desc": "JavaScript实现鼠标点击拖拽 三个即将要用的事件 onmousedown 鼠标按下事件 onmouseup 鼠标抬起事件 onmousemove 鼠标拖动事件 三组浏览器常用属性 client"}, {"id": "7002588369653858340", "title": "浅拷贝--Object.assign()方法", "desc": "基本用法 Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。"}, {"id": "6844903725249593352", "title": "前端er来学习一下webWorker吧", "desc": "我们都知道，JavaScript 是单线程的，在同一时刻只能处理一个任务，我们会通过 setTimeout()、setInterval()、ajax 和事件处理程序等技术模拟“并行”。但都不是真正意义上的并行: Web Worker 是 HTML5 标准的一部分，这一规范定义了…"}, {"id": "6981371547021901831", "title": "容易被忽视的JavaScript超实用新特性", "desc": "容易被忽视的JavaScript超实用新特性 这是我参与新手入门的第1篇文章 一.可选链操作符( ?. ) 你可能碰到过这样的情形：当需要访问嵌套在对象内部好几层的属性时，可能会得到这种错误Canno"}, {"id": "6844904042452221960", "title": "都2020年了，你应该知道如何手写Call、Apply、Bind了吧", "desc": "作为面试中面试官最宠爱的一个问题，在这里进行一个详细的介绍，大家重点要放在理解，而不是背。 1.call主要都做了些什么。 相比于call、apply，我个人觉得bind的实现逻辑更加复杂，需要考虑的东西很多，在这里分开进行优化。 在这里我们需要进行一下判断，判断调用bind的…"}, {"id": "6844904050165563406", "title": "[译]JavaScript️可视化：事件循环", "desc": "哦，事件循环。这是每个JavaScript开发人员都必须以一种或另一种方式处理的事情之一，但是起初理解起来可能有些混乱。我是一个视觉学习者，所以我想我会尝试通过gifs来帮助您。 JavaScript是单线程的：一次只能运行一个任务。通常，这没什么大不了的，但是现在想象您正在运…"}, {"id": "6844903576532172813", "title": "简单快速理解js中的this、call和apply", "desc": "全局中执行这个方法普遍的方法是直接a()，这个方法的执行环境是window，控制台会打印出window对象。 那么为什么会打印出window对象呢？我们可以这样理解，方法的执行必须要有个直接调用者，刚才那个方法a是定义在window全局下的，window下的变量和方法有个特点就…"}, {"id": "6979396673436909604", "title": "前端刷题路-Day66：石子游戏（题号877）", "desc": "亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。 游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。 亚历克..."}, {"id": "6959737576232058887", "title": "前端面试常备07：JS事件循环辨析", "desc": "JS中的事件循环 尽管 JS 运行异步 JS 代码, 但实际上, JS 本身并没有内建异步的概念. JS 引擎没有运行在隔离的区域, 而是运行在一个宿主环境中, 它可能是浏览器, 或者 Node 这样"}, {"id": "6974600884353253390", "title": "简单手写async函数，让生成器函数自动执行", "desc": "async函数实现了异步代码以近乎同步的方式写，可读性强，使用的时候真是非常方便。 其本质是生成器函数的语法糖，本文尝试手写一个函数来替换async函数，去掉糖衣看看。"}, {"id": "6974402348323962888", "title": "JavaScript|数组基础", "desc": "目标 能够知道为什么要有数组 （存放多个相关的元素） 能够创建数组(两种方式) 能够获取数组中的元素 （arr[下标]） 能够对数组进行遍历（for循环） 能够给数组新增一个元素 能够独立完成冒泡排序"}, {"id": "6844904101789040654", "title": "鼠标选中文本划词高亮、再次选中划词取消高亮效果", "desc": "当我们需要鼠标选中文本后，文本高亮。当再次将选中的文本选中后，取消高亮效果时该如何实现呢？ 获取鼠标选中内容，主要是利用了window.getSelection()这个API。返回一个Selection对象，表示用户选择的文本范围或光标的当前位置。 Selection 对象所对…"}, {"id": "6926106151629586445", "title": "手撕代码系列（三）：一石二鸟探寻防抖和节流的多种实现思路", "desc": "防抖和节流是前端性能优化的两大利器，核心思想都是限制高频行为。 防抖，意在当外界不再变化时，再去做响应。 节流，意在不管外界如何变化，始终保持着自己的响应频率。 防抖：用户疯狂点击提交按钮，用户每次点击提交都会向服务器发出请求，如果不做限制那么会无意义地消耗服务器资源。因此，我…"}, {"id": "6993544659133792292", "title": "TypeScript的数据类型说明", "desc": "数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，另外还提供了实用的枚举类型方便我们使用"}, {"id": "6968654120316043277", "title": "JavaScript中的可选链操作符", "desc": "前言 可选链操作符(?.)允许读取位于链接对象链身处的属性的值,而不必明确验证链中的每个引用是否有效。不同之处在于，在引用为空（null或者undefined）的情况下不会引起错误，该表达式短路返回值"}, {"id": "6844904168679800840", "title": "ES 2020 新特性", "desc": "在 ES 2020 中，有一些非常实用的新特性，接下来，就跟我一起看看在新版本中有哪些新特性在平时的开发中可以用到。 因为我们不确定 a 或 b 是否存在，那么获取 c 就会报错，这时候可选链式调用就非常有用了。 也就是说 ?? 只有当左边是 null 和 undefined …"}, {"id": "6993536900334092318", "title": "闭包基础知识", "desc": "闭包的概念 从定义中我们知道闭包是一个函数，只不过这个函数有超能力，可以访问到另一个函数的作用域。 为什么说闭包有超能力呢？ 因为我们都知道函数作用域是独立的、封闭的，外部的执行环境是访问不了的，但是"}, {"id": "6985057946853965832", "title": "Promise学习笔记-五（Promise静态方法）", "desc": "如何在编写已知结果时，不走编排任务？如何监听多个依次执行的Promise对象执行？创建已解决的Promise和响应多个Promise执行，这两个特点的四个静态方法很好的解决了以上两个问题。"}, {"id": "6908344595998998542", "title": "页面资源优化之preload、prefetch", "desc": "作为一个社会底层的前端打工人，页面优化应该大多都有做过或者了解过，毕竟如果写出来一个项目别人访问某个页面的时候先来个十几秒的白屏，可能早被老板打死了。。。 页面优化方面设计到的点很多，对应这些点的解决方案也有很多。比如常见的图片懒加载，其中一个解决方式就是先用data-src的…"}, {"id": "6981417003097538574", "title": "Promise学习笔记-二", "desc": "Promise运行流程 由于resolve处理异步时传入的参数为实例本身时，程序也会抛出异常进行reject来结束程序执行。"}, {"id": "6844903505203822599", "title": "JS中的算法与数据结构——排序（Sort）", "desc": "主要是针对前端同学，将一些常见的算法和数据结构用 JavaScript 去实现，起到一个抛砖引玉的作用"}, {"id": "6960673420254117924", "title": "防抖节流原理、区别以及应用", "desc": "1）防抖 原理：在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。 适用场景： 按钮提交场景：防止多次提交按钮，只执行最后提交的一次 搜索框连续场景：防止连续发送请求，只发送最"}, {"id": "6844903812809900046", "title": "每日 30 秒 ⏱ 掘金SEO大揭秘", "desc": "可能图上的数据不够准确，但是作为参考可以发现 网站总数 大概在 16亿 左右，当查找一个网站并对其访问，相当于在人海茫茫的世界里找到你的另一半。这个概率还是相当低的，为了解决这个问题 搜索引擎 便诞生了，我们最常用的搜索引擎 有百度、必应、谷歌等。 搜索引擎 在记录网站和自然排…"}, {"id": "7000891889465425957", "title": "一万字ES6的class类，再学不懂，请把我锤死（语法篇）", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 Class 的基本语法 简介 类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 上面这种写法"}, {"id": "7002054481252728869", "title": "30 个有用的 Node.js NPM 包", "desc": "Nodejs生态通过npm包的形式复用代码,目前累计有超过100多万个开源可用的包。我们遴选了30个常用的nodejs安装包，让您免于重新发明轮子。"}, {"id": "7005856003145072648", "title": "手写Promise过程中的“恍然大悟”", "desc": "前前言 hello 大家好，我是来自推啊前端团队的zhouchao，今天给大家带来【数据结构与算法】的第一篇，基础介绍。 相信小伙伴们可能看到过许多次手写Promise的文章，但可能绝大部分是看到了面"}, {"id": "7003369591967596552", "title": "95%的人都回答不上来的问题：函数的length是多少？", "desc": "前言 大家好，我是林三心，我今天给大家讲讲function的length，到底是怎么算的。希望大家能从中学到东西，并且可以巩固一下基础。 为什么 为什么我会想到这个知识点呢？因为昨晚，在一个群里，有一"}, {"id": "7001999813344493581", "title": "林三心画了8张图，最通俗易懂的Vue3响应式核心原理解析", "desc": "前言 大家好，我是林三心，大家也知道，本菜鸟平时写基础文章比较多，我始终坚信两句话 用最通俗易懂的话，讲最难的知识点 基础是进阶的前提 其实Vue3已经出来很久了，可能大部分公司都用上了"}, {"id": "7007800114848890917", "title": "【JavaScript算法刷题：最大子序列和】力扣53题", "desc": "本文主要解析力扣第53题的解法，本体较为基础，但思路很巧妙。 重点语句解析： addRes = Math.max(nums[i]+addRes,nums[i]) 这段代码主要是采用了如下的思路： 假设"}, {"id": "7008036538021838878", "title": "作用域链和闭包", "desc": "理解作用域链是理解闭包的基础，而闭包在 JavaScript 中几乎无处不在，同时作用域和作用域链还是所有编程语言的基础"}, {"id": "7006223223851319332", "title": "技术周报 · 2021-09-10", "desc": "小编推荐 开源浪潮下程序员的职业规划和成长 精读《捕获所有异步 error》 从底层实现看 React 表单方案演进(上) News ECMAScript 双月报告：2021/8 废宅阿斗 NPM 即"}, {"id": "7004664419485483015", "title": "华为主动找我合作，我放弃了！前端实现拍照识别垃圾分类最简单的方法！", "desc": "前言 2019年7月，上海作为第一个试运行垃圾分类的城市。当时的微信指数居高不下，引发了非常热烈的社会讨论，原因是上海当时执行得很坚决，社区垃圾桶旁都有带着红袖标的大爷大妈在看着，扔错了现场罚200元"}, {"id": "7007714208569622541", "title": "javaScript设计模式（上）", "desc": "前言 阅读了javascript设计模式这本书，觉得作者写的挺实用的，我们开发过程中往往太注重是否实现了结果，而忽略了函数算法的设计思路，以下是阅读过程中做的笔记，跟大家分享。 单例模式 单例模式的定"}, {"id": "7000784414858805256", "title": "如何防止他人恶意调试你的web程序", "desc": "看到社区很多都在讨论如何调试,如何高级的调试,以及一些调试的奇技淫巧,今天我想和大家聊聊,怎么禁止调试,禁止他人调试我们的程序~"}, {"id": "7007774883501801485", "title": "前端js设计模式", "desc": "观察者模式 设计理念是什么： 定义对象的一种一对多的依赖的关系，当一个对象发生改变时，所有依赖该对象的对象都得到通知并触发更新 解决了什么问题：一个对象状态改变给其他对象通知，易用、低耦合、保证高度的"}, {"id": "7007349603242606628", "title": "理解作用域，把作用域链比喻成一个建筑", "desc": "最近在看《YOU DON’T KNOW JS》一书，里面讲到作用域的嵌套，内容主要讲了两点： 一是作用域嵌套产生由来，其实就是当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套； 二是..."}, {"id": "6971727286856843295", "title": "那些高级/资深的前端是如何回答JavaScript面试题的 （一）", "desc": "面对最常见的问题，给出让面试官惊喜的答案。 我认为通往所谓“精通”的过程分三步骤： 1. 能熟练使用API 2.理解API实现的原理 3. 自己去实现一个API，能用来实际解决问题的那种，经得住考验。"}, {"id": "7004611718009585678", "title": "我读技术书很焦虑，读不下去书怎么办？", "desc": "前言 因为自己很喜欢读书，也读了很多技术书籍，最近有很多小伙伴问我，\"该怎么读书\"，\"我读不下去怎么办，读了一半我就不读了\"，\"我越读越焦虑\"，\"我都不知道读这些书有什么用\"，\"读完过了一段时间就忘了"}, {"id": "7005337324821315597", "title": "🎑提前祝大家中秋快乐，教你做一个【中秋花灯许愿】💖的网站", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 为了参加掘金社区的中秋征文活动专门策划了这么一个小站。但是物尽其用，我最近自研了一套Web网站基于扫小程序码登录的机制，正好借这个小站测试"}, {"id": "7004989581955170341", "title": "前端装逼技巧 108 式（三）—— 冇得感情的API调用工程师", "desc": "作为一名拥有钢铁般意志的前端打工人，装逼是不可能的，这辈子都不可能装逼。如果真要装逼，那就大家一起装逼，毕竟前端要讲武德嘛，要耗子尾汁。前端装逼技巧108式，供诸君茶余饭后一乐，为打工生活增添乐趣。"}, {"id": "7006307519937134628", "title": "为什么说，JavaScript才是真正意义上的“面向对象”语言？", "desc": "前言 传统的面向对象（OOP）语言，比如java，大量采用类的抽象设计来实现面向对象的三大特征：封装、继承、多态，随着这类语言的流行，这已然成为一种非常经典的编程范式。 但在js中并没有真正的类，或者"}, {"id": "7007369187949543431", "title": "从零开始使用create-react-app + react + typescript 完成一个网站", "desc": "在线示例 以下是一个已经完成的成品，如图所示: 你也可以点击此处查看在线示例。 也许有人咋一看，看到这个网站有些熟悉，没错，这个网站来源于https://jsisweird.com/。我花了三天时间，"}, {"id": "7006100899265249311", "title": "菜鸟也能搞懂的typeof 与 instanceof 区别", "desc": "一、typeof typeof 操作符返回一个字符串，表示未经计算的操作数的类型 使用方法如下： operand表示对象或原始值的表达式，其类型将被返回 举个例子 从上面例子，前6个都是基础数据类型。"}, {"id": "6960141759200362526", "title": "JS 实现个位数四则运算", "desc": "JavaScript 利用栈结构，实现 四则运算式，先乘除后加减。 数 0～9，+-*/，没有括号。"}, {"id": "6844903700494974983", "title": "vue 生命周期梳理", "desc": "在使用vue开发过程中经常会接触到生命周期的问题，但对于每个钩子函数都做了什么，应用场景比较模糊，希望通过这次梳理让自己清楚一些。初次写文章，有不对的地方还望各位多多指正！ 1. vue实例化过程 Vue 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始…"}, {"id": "6844903726684061710", "title": "[译] React 的今天和明天（图文版） —— 第二部分", "desc": "嗨。我的名字是 Dan。我在 React Team 工作，这是我第一次参加 React 大会。 （掌声） 刚才 Sophie 讲述了这三个问题，我想大多数的开发者在 React 开发过程中都会遇到这些问题。当然，我们可以逐一来解决这些问题。我们可以尝试独立地去解决这些问题。但是…"}, {"id": "6968293467143274504", "title": "《Java Script DOM》读书笔记——DOM", "desc": "1、文档：DOM中的“D” \"D\"代表document(文档) 2、对象：DOM中的“O” “O”代表object(对象)3、模型：DOM中的M代表：“model”"}, {"id": "6844903565769572366", "title": "[译] JavaScript 中的私有变量", "desc": "最近 JavaScript 有了很多改进，新的语法和功能一直在被增加进来。但有些东西并没有改变，一切仍然是对象，几乎所有东西都可以在运行时被改变，并且没有公共、私有属性的概念。但是我们自己可以用一些技巧来改变这种情况，在这篇文章中，我介绍各种可以实现私有变量的方式。 在 201…"}, {"id": "6844903625077030925", "title": "webpack 从入门到放弃(一)", "desc": "为什么使用 webpack，这应该是和前端的发展有关系的，我认为，webpack 是前端发展到一定阶段的必然产物（貌似是一句废话）。 因为计算机网络的飞速发展，导致 web 前端也在迅猛发展。最初的实践方案已经不能满足我们的需求，于是，越来越多的新技术新思想新框架孕育而生，比如…"}, {"id": "6947165395941851173", "title": "使用 Webpack + TypeScript 实现简易的富文本编辑器", "desc": "写这篇文章的目的是为了记录自己第一次实现一个非常简易的富文本编辑器的过程，项目使用到了 Webpack 和 TypeScript。 当一个HTML文档切换到设计模式时，document暴露 execCommand 方法，该方法允许运行命令来操纵可编辑内容区域的元素,本次项目实现…"}, {"id": "6844903703929946125", "title": "最近在 Vue 项目中用到的一些小技巧，或许有用", "desc": "在最近的 Vue 项目中，为了完成需求使用了一些小技巧，做个笔记，或许也能帮到道友。 在开发过程中，我们经常需要引入各种文件，如图片、CSS、JS等，为了避免写很长的相对路径（../），我们可以为不同的目录配置一个别名。 这个需求，怎么说呢，反正就是需求，就想办法实现吧。 就是…"}, {"id": "6984952109909147684", "title": "VUE3（十九）服务端开启gzip加速网站打开速度", "desc": "一：压缩的好处 压缩可以减小HTTP回复的大小，从而降低web服务器的响应时间。gzip是web服务器广泛使用的压缩工具，可以将HTTP回复的大小降低到原来的50％～30％。既提高了网页的加载速度，又"}, {"id": "6844903588620156936", "title": "[译] 提高 10 倍性能：优化静态网站", "desc": "几个月前，我在国外旅行，想给朋友看我个人（静态）网站上的一个链接。我试着浏览我的网站，但花费的时间比我预期的要长。网站绝对没有任何动态内容--只有动画和一些响应式设计，而且内容始终保持不变。 我对结果感到震惊，DOMContentLoaded 要 4 s，整个页面加载要 6.8…"}, {"id": "6944587375334916126", "title": "JavaScript中令人困扰的 this", "desc": "JavaScript this 属于 作用域下的一部分，指的是当前调用的上下文，其他繁杂的概念就不赘述了。 温馨提示：下面的示例，可以作为题型，可先不看答案，尝试 答出，如果全能答出 说明 这块基础 夯实了，最下面有 总结的 万能大法，建议收藏食用。 this 指向 上层 对象…"}, {"id": "6966137590093185061", "title": "Vue路由笔记：Vue脚手架搭建", "desc": "要使用Vue路由，先要明白路由是什么，简单来说路由就是一种利用数据来控制连接的关系，理解起来比较抽象，我们可以通过一些小案例来熟悉用法。 1.创建脚手架工程 1.1 安装Vue脚手架 首先使用控制台在"}, {"id": "6907193857159462919", "title": "uniapp开发钉钉小程序使用web-view", "desc": "如果我代码写的烂，请拿法律惩罚我，而不是。。。 公司的一个项目，使用uniapp开发钉钉小程序，其中一个应用是在 web-view 里面加载一个h5页面，h5页面有一个按钮，点击时返回钉钉小程序上一个页面。 但是。。。 网上逛了一圈，很多人都遇到了同样的问题，下面都没贴出解决办…"}, {"id": "6844903950089453575", "title": "JavaScript-V8引擎", "desc": "渲染就是根据描述或者定义构建一个数据模型，生成图形的过程。 浏览器内核就是将页面（Html、Css、JavaScript）构建成可视化、可听化的多媒体结果。 我们也可以将浏览器内核称之为\"渲染引擎\"，渲染引擎经常做的事情就是将Html、Css、JavaScript文本或者其他的…"}, {"id": "6989581949631365133", "title": "javascript预编译", "desc": "javascript预编译 1. **函数声明**整体提升 1. **变量声明**提升（*注意是变量声明 ）"}, {"id": "6844903616218660872", "title": "在 JavaScript 中创建数组的正确姿势", "desc": "在 JavaScript 中，数组本质上也是对象，是对象的一种特殊形式。 数组索引实际上和碰巧是整数名的对象属性没有什么差别，不过数组的实现是经过了优化的，通过数组索引访问数组元素比访问一般对象的属性要快的多。 规定数组索引的范围是 0 ~ 4294967294 （2^32 -…"}, {"id": "6844903798784131079", "title": "深入理解JavaScript执行上下文和执行栈", "desc": "如果你是一名 JavaScript 开发者，或者想要成为一名 JavaScript 开发者，那么你必须知道 JavaScript 程序内部的执行机制。执行上下文和执行栈是JavaScript中关键概念之一，是JavaScript难点之一。 理解执行上下文和执行栈同样有助于理解其…"}, {"id": "6908329539525410830", "title": "「笔记整理」D2前端技术论坛: 揭秘TC39: ES2020 和 ES2021", "desc": "本文记录并整理了 D2 前端技术论坛中揭秘 TC39: ES2020 和 ES2021 的会议笔记。(截取了 TC39 部分)分享给没时间看或是对 TC39 还不了解的同学们。 TC39 成员、Node.js 核心协作者。 TC39 是 Ecma International 标…"}, {"id": "6844903732740636685", "title": "JS事件那些事儿 一次整明白", "desc": "事件流包括三个阶段。简而言之：事件一开始从文档的根节点流向目标对象（捕获阶段），然后在目标对象上被触发（目标阶段），之后再回溯到文档的根节点（冒泡阶段）。 事件的第一个阶段是捕获阶段。事件从文档的根节点出发，随着 DOM 树的结构向事件的目标节点流去。途中经过各个层次的 DOM…"}, {"id": "6983493206025764877", "title": "纯JS实现列表侧滑展示更多操作实现删除操作", "desc": "主要实现的功能： 对外暴露点击操作按钮的标示属性（indexPath） 增加删除dom对象操作，如果这里是数据支持的列表那么这里在操作完dom对象后应该删除对应的数据源。 html里初始化 DragM"}, {"id": "6945113684599865357", "title": "造一个 copy-to-clipboard 轮子", "desc": "关于 JS 做复制功能的文章还挺多的，这里列举一篇 阮一峰的《剪贴板操作 Clipboard API 教程》 作为例子。 大部分文章的做法是这样：创建一个输入框（input 或者 textarea），将复制文本赋值到元素的 value 值，JS 选中文本内容，最后使用 docu…"}, {"id": "6844903649529823240", "title": "Vue 全站缓存二：如何设计全站缓存", "desc": "从早期粗暴得将 css、js 资源设定浏览器本地缓存，到后来小图标合并成大图节省请求资源，还有动态请求304状态判断，然后 ajax 开启 web2.0 时代， pjax 大放光彩，到如今 vue.js 等前端框架的繁荣盛世，所有的这一系列发展，我认为，提速是一个核心驱动力。 …"}, {"id": "6971608740327866382", "title": "js继承之寄生组合式继承", "desc": "这是我参与更文挑战的第9天，活动详情查看：更文挑战。 所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。"}, {"id": "6943887664063971341", "title": "从js纯函数到immutable", "desc": "在上面的代码中 writer是全局的对象，但是appendCompany()函数修改了全局对象。我们就说 appendCompany()函数不是一个纯函数。一般来说，函数内部不应该修改全局的对象。我们知道reducer是纯函数，当action发生变化时，会返回一个全新的对象。我…"}, {"id": "6844903621545443342", "title": "vue 开发 2048/围住神经猫  小游戏", "desc": "写之前，我觉得如果利用好vue的双向绑定，那么就只需要操纵数组就可以玩2048了。但实际操作过程中遇到坑好多。不过基本功能已经实现，可以玩额。 阻止父元素原生的scroll事件，这关乎小游戏是否稳定，之前思路一直是觉得只要js就能搞定，现在发现，这个应该用css来做，但是ios…"}, {"id": "6968750855071727630", "title": "详解队列在前端的应用，深剖JS中的事件循环Eventloop，再了解微任务和宏任务", "desc": "队列 在日常生活中的应用非常广泛，比如我们最熟悉不过的食堂排队打饭、击鼓传花等等问题。同时，它在前端中的应用也非常广泛，比如，事件循环 Event loop 、JS异步中的任务队列。 所以呢，对于前端"}, {"id": "6844903602658476046", "title": "基于canvas生成图片", "desc": "随着APP的获客成本越来越高，很多产品开始从wap页引流，而最常见的方式便是分享，尤其是在微信中。因此诞生了一些新玩法，比如生成一张海报图片，用户可以保存或分享到其他平台。 本文将介绍如何生成一张海报图片，以及可能会碰到的问题和解决方案。 目前移动端浏览器对于canvas的支持…"}, {"id": "6844904130570354696", "title": "数组查找: 线性查找与二分查找", "desc": "本文将通过图文形式，详细讲解线性查找与二分查找，并用JavaScript将其实现，欢迎各位感兴趣的前端开发者阅读本文。 线性查找是一种在数组中查找数据的算法，从数组的头部开始按顺序往下查找即为线性查找。 从数组的最左边开始查找，将其与6进行比较，如果结果一致，查找便结束，不一致…"}, {"id": "6844904022206332941", "title": "【前端知乎系列】ArrayBuffer 与 Blob对象", "desc": "ArrayBuffer 对象与 Blob 对象大家或许不太陌生，常见于文件上传操作处理（如处理图片上传预览等问题）。 那么本文将与大家深入介绍两者。 ArrayBuffer 对象是 ES6 才纳入正式 ECMAScript 规范，是 JavaScript 操作二进制数据的一个接…"}, {"id": "6844903744396591111", "title": "完美解决jspdf各种中文乱码问题", "desc": "打开里面的html文件，然后把选择你的本地文件，填上name最好要填中文！然后会生成一个js文件，然后你需要把这个js文件复制到你前端文件的static静态资源目录下，并且在页面上引用。"}, {"id": "6844904179232686094", "title": "在Vue中创建可重用的 Transition", "desc": "Vue.js中的transition确实很棒。 毫无疑问，它们可以非常轻松地让应用程序栩栩如生，但是通常必须在每个项目中从头开始编写它们，甚至还需要引入animate.css之类的CSS库来使它们功能更强大。 如果我们可以将它们封装到组件中，并在多个项目中简单地重用它们，结果会…"}, {"id": "6844903713509736456", "title": "HTML5新特性概述(下)", "desc": "1. 拖放（Drag 和 drop） 拖放是html5提供一个新的特性，这个特性增加了拖拽事件的api,和定义可以拖拽的属性。举个例子，在h5之前实现拖拽功能，其实用的是一种模拟方式，鼠标onmousedown时，获取当前的一些信息，然后在onmousemove时不断更新推拽对…"}, {"id": "6986919621563547678", "title": "详解 js 函数中的 arguments", "desc": "1、什么 arguments 简单来说：arguments 是一个对应于传递给函数的参数的类数组对象 arguments 对象是所有（非箭头）函数中都可用的局部变量。你可以使用arguments 对象"}, {"id": "6844903924269318158", "title": "JS可选链的好处", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS的一些特性极大地改变了咱们的编码方式。从ES6年开始，对咱们代码影响最大的特性的解 、箭头函数、类和模块系统。 到2019年8月，一个新的可选链提案已经进入第三阶段，这是一个很好的改进。可选链接改变了从深层…"}, {"id": "7000138167441424398", "title": "一文彻底搞懂：js-Promise", "desc": "通过Promise 实现了以同步的流程表示异步的操作，成功解决了代码嵌套的问题，代码结构清晰。 通过then 方法实现异步代码成功回调。"}, {"id": "6983654402783445028", "title": "js基础之作用域", "desc": "几乎所有编程语言最基本的功能之一，就是能够储存变量当中的值，但是这些变量住在哪里？换句话说，它们储存在哪里？最重要的是，程序需要时如何找到它们？"}, {"id": "6854573220431921160", "title": "当遇到跨域开发时, 我们如何处理好前后端配置和请求库封装(koa/axios版)", "desc": "我们知道很多大型项目都或多或少的采用跨域的模式开发, 以达到服务和资源的解耦和高效利用. 在大前端盛行的今天更为如此, 前端工程师可以通过nodejs或者Nginx轻松搭建起web服务器.这个时候我们只需要请求后端服务器的接口即可实现系统的业务功能开发.这个过程中会涉及到web…"}, {"id": "6844903939008102413", "title": "最全的DOM和BOM的解释分析", "desc": "今天咱们就来看看DOM和BOM。什么是DOM和BOM？ 我想很多的人都看过这样的官方的解释，那具体的如何我们一起来分析下。 Javascript 由三部分构成，ECMAScript，DOM和BOM。根据宿主（浏览器）的不同，具体的表现形式也不尽相同，ie和其他的浏览器风格迥异,…"}, {"id": "6960470262433529893", "title": "跟着大佬走——深入理解 js 中的继承", "desc": "2020 年阿里前端技术专家磐冲一篇《我在阿里招前端，我该怎么帮你？》可谓是火了半个前端圈子 原文链接。 磐冲对职级在技术层面上的要求描述的条理清晰，感兴趣的同学自行打开原文链接查看。"}, {"id": "6844904168549777422", "title": "🐲【2】ShutdownHTTP系列-HTTP报文篇", "desc": "之前，有一位大佬和我说过这么一句话：\"网络知识在一定程度上决定了你的上限\"。 这次请给霖呆呆一个机会，跟着我的脚步👣从1开始学习它。另外我整理的HTTP系列基本都会附有一个面试时的浅答与深答的的配套答案，浅答是为了让你们更好的记住，深答保证你确实理解了浅答中的知识点。 1. …"}, {"id": "6965675185890394119", "title": "精读《前端职业规划 - 2021 年》", "desc": "不知道你上次思考前端职业规划是什么时候？这篇前端职业规划是站在我自己角度写的，你如果也在思考长线发展问题，可以作为参考。"}, {"id": "6990323158955851784", "title": "对巨石应用说不：转转商业微前端qiankun历史项目迁移升级实践", "desc": "之前和大家分享过微前端的相关知识（具体可见之前的文章：闲庭信步聊前端 - 见微知著微前端），本次分享qiankun在转转商业的一些实践，及问题解答 背景 商业Crm开发多年，随着开发成长为巨石应用。打"}, {"id": "7002884666952941576", "title": "Js中如何安全的获取Object深层对象", "desc": "Js中如何安全的获取Object深层对象 做前端的小伙伴一定遇到过后端返回的数据有多层嵌套的情况，当我要获取深层对象的值时为防止出错，会做层层非空校验，如何来简化空校验操作呢？"}, {"id": "7006244439546920967", "title": "浅拷贝与深拷贝", "desc": "1、浅拷贝 概念：子对象复制父对象，父子对象发生关联，两者属性值指向同一内存空间。简单来讲，就是改变其中一个对象，另一个对象也会跟着改变。 2、深拷贝 概念：拷贝对象各个层级的属性。简单的讲，就是复制"}, {"id": "6935261498822361119", "title": "如何编写神奇的「插件机制」，优化基于 Antd Table 封装表格的混乱代码 ｜ 技术点评", "desc": "功能虽然已经实现了，也记录在了 给 Antd Table 组件编写缩进指引线、子节点懒加载等功能 这篇文章中。不过我个人感觉意义不大，对功能代码不感兴趣的同学完全可以跳过。 这篇文章我想聊聊我在这个需求中，对代码解耦，为组件编写插件机制的一些思考。 指引线的逻辑分散在 rewr…"}, {"id": "7001291416508825630", "title": "Three.js拨云见雾(6)——动画和移动的摄像机", "desc": "如果希望我们的场景动起来，那么首先要解决的问题是如何在特定的时间间隔重新渲染场景。考虑到动画的实现方案，我们可以选择setInterval、setTimeout以及requestAnimatFrame"}, {"id": "6998521022919999495", "title": "JS 异步编程都有哪些解决方案？", "desc": "众所周知，JS是一门单线程语言，并且浏览器使用异步非阻塞的事件循环模型来进行JS任务调度，因此，JS的异步编程可以说在日常的前端业务开发中经常出现。"}, {"id": "6989461400535973896", "title": "面试官：请手动实现一个Sass-loader", "desc": "本文讲述什么是Loader及它是干嘛的，Loader的基本使用，并动手实现自己的Loader。欢迎阅读"}, {"id": "6993101968545677319", "title": "浅析 Map 和 WeakMap 区别以及使用场景", "desc": "希望这一篇文章能让你对 Map 有更好的理解，或者能够帮你理解 Map 和 WeakMap 这篇文章会先从Map再到WeakMap 一、为什"}, {"id": "6959019174215548935", "title": "Vue 源码解读（8）—— 编译器 之 解析（下）", "desc": "深入理解 Vue 编译器的解析过程，理解如何将类 html 模版字符串转换成 AST 对象 ...."}, {"id": "7001025002287923207", "title": "深入理解 Class 和 extends 原理", "desc": "前言 ES6 里面的 class 和 extends 大家想必都会用了，但对于他们的实现是否了解呢，babel 后 class 和 extends 又是如何实现的呢？ 这节课将带领你深入理解 babe"}, {"id": "6862559324632252430", "title": "前端监控平台系列：JS SDK（已开源）", "desc": "一般情况下都是通过重写js原生事件然后拿到错误信息，比如ajax请求，通过重写xhr、fetch事件来截取接口信息，所以我们需要优先编写一个易于重写事件的函数来复用。 所有的请求第三方库都是基于xhr、fetch二次封装的，所以只需要重写这两个事件就可以拿到所有的接口请求的信息…"}, {"id": "6935977815342841892", "title": "如何快速为团队打造自己的组件库（上）—— Element 源码架构", "desc": "组件库是现代前端领域中不可缺少的一项基建。它可以提高代码的复用性、可维护性，提高团队的生产效率，更好的服务于未来。 那么如何为团队打造自己的组件库呢？ 最理想的方案是借用社区的能力，去裁剪一个优秀的开源库，只保留你需要的东西，比如它的架构、工程化和文档能力，以及部分基础组件，在…"}, {"id": "6844903890270289928", "title": "8个问题看你是否真的懂 JS", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 接下来，来看看几个问题，你也可以试试想想，然后作答。 现在，让我们从头到尾回答每个问题。我将给您一个简短的解释，同时试图揭开这些行为的神秘面纱，并提供一些参考资料。 使用var关键字声明的变量在JavaScri…"}, {"id": "7000009964538789896", "title": "『面试的底气』—— 设计模式之命令模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6998245155052945415", "title": "浏览器结构化数据存储方案—IndexedDB 讲解", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 想必在使用一些浏览器存储方案，例如 storage 或者 cookies 的时候，你肯定看到了还有一个叫 IndexedDB 的东西，它是"}, {"id": "7002199279901081637", "title": "JavaScript表单约束验证", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 我们在采集用户输入内容的时候肯定是需要判断用户输入的内容是否为我们需要的内容，js中有很多Api可以辅助我们来约束用户输入正确内容。"}, {"id": "6876301731966713869", "title": "零距离接触websocket🚀", "desc": "虽然http1.1默认开启了keep-alive长连接保持了这个TCP通道使得在一个HTTP连接中，可以发送多个Request，接收多个Response，但是一个request只能有一个response。而且这个response也是被动的，不能主动发起。 websocket虽然…"}, {"id": "6998996280215076877", "title": "JavaScript 的浏览器客户端检测讲解", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 这篇文章主要介绍一些浏览器客户端的检测相关的东西，这在面试题中虽然问得不多，一旦问到便会手足无措，虽然借助一些第三方的开发框架，可以不用在"}, {"id": "6998299582954209311", "title": "我在工作中经常用到的6个TypeScript新特性", "desc": "今天来介绍一下 TypeScript 的一些较新的功能和进展，这些是我在日常工作中经常在用的功能。 在构造函数中直接定义属性 Typescript 中可以通过构造函数的参数直接定义属性，我们来先看早期"}, {"id": "6960931205302714405", "title": "Event Loop浅析", "desc": "js是单线程的，所有任务依次排队执行，只有前一个任务结束以后才会执行下一个任务，如果遇到一个耗时很久的任务，下一个任务就不得不一直等待。"}, {"id": "6998428884936949768", "title": "纯前端10万+数据量二维表格-实现翻页加载数据效果", "desc": "在报表设计过程有时候会遇到大数据量的报表展示，那么对于大数据量的报表展示，如果一次性把所有数据加载到页面上，那势必会造成页面卡顿、反应慢等性能问题。那么对于这种大数据量的报表展示我们如何该做性能优化呢"}, {"id": "6844903689052749832", "title": "深入理解移动端适配与探究其解决方案", "desc": "最近在重构公司的一个移动端项目，除了需要对新项目进行前端技术栈的搭建外，还需要考虑的一个重要问题就是移动端适配，关于移动端适配的理解我之前一直是处于一种比较朦胧的状态（知其然而不知其所以然），所以最近又做了进一步的学习，在该博文中谈谈我对移动端适配的理解。 在这篇博文中，我会先…"}, {"id": "6898572110214479879", "title": "浅谈TypeScript设计模式-基础篇（一）", "desc": "没学过以前是一点也不懂，在特定的场景下想不到一种通用的设计方式，设计的代码比较糟糕。 学了几个模式以后很开心想着到处用自己学过的模式，于是会造成误用模式而不自知。 学了很多设计模式，感觉诸多模式极其相似，无法分清模式之间的差异，但深知误用有害，应用时有所犹豫。 灵活应用模式，甚…"}, {"id": "6907123079630045197", "title": "JavaScript判断视频编码是否为h.264", "desc": "H.264/AVC是2003年制定的视频编码压缩标准 ，集中了以往标准的优点，并吸收了以往标准制定中积累的经验，采用简洁设计，使它比MPEG4更容易推广。H.264创造性了多参考帧、多块类型、整数变换、帧内预测等新的压缩技术，使用了更精细的分象素运动矢量（1/4、1/8）和新一…"}, {"id": "6987250631580860446", "title": "理了一理，内存泄漏如何查找", "desc": "引言 本篇提供了查询内存泄漏的方法，阅读时间大约15分钟。 导致内存泄漏的原因 要想治病，得先找到病因。所以先说说导致内存泄漏的原因吧。"}, {"id": "6935306384724459551", "title": "[译]JavaScript 调优：如何处理  bundle 大小 ｜ 技术点评", "desc": "有一个古老的故事，关于一个醉汉试图在路灯下找到他的钥匙。为什么？因为那是最明亮的地方。这是一个有趣的故事，但也是有关联的，因为作为人类，我们都倾向于走阻力最小的道路。 我认为我们在网络性能社区也有同样的问题。最近人们非常关注 JavaScript bundle 大小：你的依赖有…"}, {"id": "6994061465560809503", "title": "JS异步迭代", "desc": "单个Promise不适用于异步事件序列，ES2018提供了一个解决方案。它们是基于Promise的，并且打算与for/of循环的新形式一起使用：for/await。"}, {"id": "6844903861153447950", "title": "JS基础篇之作用域、执行上下文、this、闭包", "desc": "js中的作用域是词法作用域，即由函数声明时所在的位置决定的（区别于词法作用域，动态作用域是在函数执行的时候确认的，js的没有动态作用域，但js的this很像动态作用域）。词法作用域是在编译阶段就产生的，一整套函数内标识符的访问规则。 说到底作用域只是一个“空地盘”，其中并没有真…"}, {"id": "6844904152305238029", "title": "DOM转JSON的实现", "desc": "昨天组员在业务开发中遇到了一个菜品领取登记表修改菜品后，如何将修改后的数据以json的形式发给后端的问题，我在解决这个问题时，发现这个问题蛮有意思，于是就将这个问题发到了沸点和群里，看了大家的解决思路后，学到了不少知识。 接下来就以这个问题为背景，讲解这个功能如何实现，欢迎各位…"}, {"id": "6844903823379546119", "title": "JavaScript 专题之花式表示 26 个字母", "desc": "undefined + [] 相当于 undefined + \"\" 结果为\"undefined\"字符串。 这时候已经获得一个 undefined 字符串了，我们只用通过下标就可以取到对应的字母了。 是不是很有意思，然而这才只是个开始。 通过这种方式我们可以取到字母 a。 剩下的…"}, {"id": "6970845846145335327", "title": "JS 原生方法原理探究（六）：手写实现 30 个数组原生 API", "desc": "本文会介绍数组的常用 API，共计 30 个。在讲每个方法的具体实现之前，会简要介绍它们的用法（更详细的查阅 MDN 即可），之后给出实现的思路和具体的代码。"}, {"id": "6900783554037284878", "title": "精读《设计模式 - Decorator 装饰器模式》", "desc": "Decorator（装饰器模式）属于结构型模式，是一种拓展对象额外功能的设计模式，别名 wrapper。 意图：动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。 如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来…"}, {"id": "6844903895873896455", "title": "Javascript 数组常用方法", "desc": "把数组中所有元素放入一个字符串中，返回字符串。 连接多个（含两个）数组，两边的原始数组都不会变化，返回被连接数组的一个副本，可继续 concat。 从开始到结束（[)左闭右开，即不包括结束）选择数组的一部分浅拷贝到一个新数组。 slice(1, 5) 可见里面最多含 4（5 -…"}, {"id": "6960553330024120333", "title": "dva项目中微前端的实际运用", "desc": "我们公司有一个运营系统，粗略估计有30多个互不关联的业务系统在上面开发。代码量很大，本地开发时启动会把一个配置不差的电脑卡成半死，打包只能在打包机上，本地打包不敢想象。而且这么多业务系统代码管理"}, {"id": "6844904000949600264", "title": "网页性能检测-performance", "desc": "推荐使用window.performance对象。 实质上来说performance对象就是专门用于性能监测的对象，内置了几乎所有常用前端需要的性能参数监控。 注意：performance对象的所有API，都是只读的。 performance的监控前端性能推出，让几乎所有浏览器…"}, {"id": "6919307036362539016", "title": "Vue 系列序篇", "desc": "Vue是一个开源框架，最新版本已经更新到了3.0，当前系列基于2.X(单独发文3.0)，是一个独立的Javascript框架，不依赖于任何其他框架（例如jquery）。 根据个人从业7年来看，经验这事挺重要，不会让你更加“优秀”，但是会让你“靠谱”，实现的技术方案，接口设计，部…"}, {"id": "6844903689799335943", "title": " 🃏 令人愉快的 JavaScript 测试", "desc": "Jest 是 Facebook 出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用。 而作为一个面向前端的测试框架， Jest 可以利用其特有的快照测试功能，通过比对 UI 代码生成的快照文件，实现对 Re…"}, {"id": "6964581943522361351", "title": "javascript闭包详解", "desc": "闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。"}, {"id": "6956030216766488607", "title": "JavaScripts高阶（1）你一定要知道的数据类型的核心操作原理、堆栈内存", "desc": "js的数据类型 基础数据类型（值类型） number string boolean null undefined symbol 引用数据类型 对象 {} 普通对象（json） [] 数组 /^$/ 正"}, {"id": "6965682915141386254", "title": "Chrome 89 更新事件触发顺序，导致99%的文章都错了（包括MDN）", "desc": "在 Chrome 89.0.4363.0 以及之后版本中,目标元素的触发事件顺序不再按照注册顺序触发! 而是按照先捕获再冒泡的形式依次执行！"}, {"id": "6844903988073070606", "title": "35 道咱们必须要清楚的 React 面试题", "desc": "虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和。 类组件可以使用其他特性，如状态 state 和生命周期钩子。 当组件只是接收 pro…"}, {"id": "6881779044505878542", "title": "10个好用的 HTML5 特性", "desc": "在本文中，我列出了十个我过去没用过的HTML5功能，但现在发现它们很有用，废话不多说，让我们开始吧。 &#x3C;details>标签向用户提供按需查看详细信息的效果。 如果需要按需向用户显示内容，简单的做法就是使用此&#x3C;details>标签。 默认情况下，它是收起来的…"}, {"id": "7002921291845992484", "title": "正则表达式优化 - 避免灾难性回溯", "desc": "最近我在运用正则的过程中，发现了一些让程序变慢的现象，甚至导致了...服务器CPU飙升至100%的问题。本文主要来总结一下，关于避免正则中灾难性回溯的学习收获。"}, {"id": "6844904159226003463", "title": "重新认识  package.json", "desc": "在每个项目的根目录下面，一般都会有一个 package.json 文件，其定义了运行项目所需要的各种依赖和项目的配置信息（如名称、版本、许可证等元数据）。 使用scripts字段指定运行脚本命令的 npm 命令行缩写。 其实，package.json 的作用远不止于此，我们可以…"}, {"id": "6991339338487300104", "title": "『面试的底气』—— 设计模式之单一职责原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6979182109218848782", "title": "前端 JavaScript 中 JSON.stringify() 的基本用法", "desc": "JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数。"}, {"id": "6994806285187153956", "title": "『面试的底气』—— 设计模式之策略模式(二)｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7002027101620535310", "title": "大厂面试必须掌握的六种继承方式，你会吗？", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 1：原型链继承 原理 实现代码 优缺点 优点：实例可以继承的属性包括：实例的构造函数的属性，父类构造函数的属性，父类原型对象上的属性。 缺"}, {"id": "6982509986270150670", "title": "Vision 内核大升级——可视化搭建引擎 Gems 应运而生", "desc": "本文围绕 Vision 内核升级、Gems 的诞生，以及可视化搭建的一些典型场景进行阐述 ，希望能给读者带来一些启发。"}, {"id": "6951554398740807717", "title": "【真香】我开发了一款提醒各位 [ 倔友 ] 喝水的 [ chrome插件 ]", "desc": "在我们日常工作中，经常会因为长时间伏案工作而忘记了喝水或起来走动走动，扭扭腰。于是乎，我开发了一款提醒各位倔友按时喝水的chrome插件😎，希望大家在忙碌工作的同时，也要照顾好身体，按时喝水"}, {"id": "7001696210889211940", "title": "JavaScript 面试知识点 📝 🎉～（0x41-0x60）", "desc": "TOC JavaScript 面试知识点 📝 🎉～（0x01-0x20） JavaScript 面试知识点 📝 🎉～（0x21-0x40） > JavaScript 面试知识点 📝 🎉～（0x41-0"}, {"id": "7003230645598044196", "title": "Service Workers - overview 「译文」", "desc": "丰富的离线体验、定期后台同步、推送通知——这些通常是手机APP的功能——但是现在web端也可以拥有。Service Worker 提供了这些功能所依赖的技术基础。"}, {"id": "7000756069244862477", "title": "快速搞定JS中的深浅拷贝", "desc": "深浅拷贝是编程中非常重要的知识，在`JS`中，分为基本数据类型和引用数据类型，引用数据类型在进行赋值操作时传递的是指针的值，这就使得赋值后的变量只是原来变量的别名。"}, {"id": "6992948723273695239", "title": "『面试的底气』—— 设计模式之依赖倒置原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6974373490526978079", "title": "戏说前端 JavaScript 之『防抖节流』基础知识", "desc": "函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行，不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数。"}, {"id": "7002595945942614029", "title": "重学前端 | Web 标准与前端开发", "desc": "大概就是一些【不明觉厉】的资料汇总，虽然不一定用得到，但是至少了解一下 关于前端开发 起源、架构、变迁 关于web的起源 架构 1989年"}, {"id": "6844904191379374087", "title": "前端电商 sku 的全排列算法很难吗？学会这个套路，彻底掌握排列组合。", "desc": "前段时间在掘金看到一个热帖 今天又懒得加班了，能写出这两个算法吗？带你去电商公司写商品中心，里面提到了一个比较有意思故事，大意就是一个看似比较简单的电商 sku 的全排列组合算法，但是却有好多人没能顺利写出来。有一个毕业生小伙子在面试的时候给出了思路，但是进去以后还是没写出来，…"}, {"id": "6969016132741103624", "title": " XDM，JS如何函数式编程？看这就够了！（二）", "desc": "本篇承接上一篇《XDM，JS如何函数式编程？看这就够了！（一）》，将着重介绍函数的输入——偏函数，它是 JS 轻量函数式编程的基础之基础，重要之重要！！！"}, {"id": "6940218189921910797", "title": "基于 esbuild 的 universal bundler 设计", "desc": "由于 Lynx(公司自研跨端框架)编译工具和传统Web编译工具链有较大的差别（如不支持动态 style 和动态 script 基本告别了 bundleless 和 code splitting，模块系统基于 json 而非 js，没有浏览器环境)，且有在 Web 端实时编译(搭…"}, {"id": "6965514185371287582", "title": "VueConf2021话题，用Vue和JS开发Flutter应用？", "desc": "VueConf2021全程官方视频 连线尤雨溪：谈谈 Vue3 生态进展 Vite，下一代Web工具 Vue3 在编译优化方面做的努力 面向新一代构建工具优化代码 探索 Vue 3 中的 JSX Co"}, {"id": "7000989623673421860", "title": "一篇整理正则常用知识点", "desc": "正则表达式是用于匹配特殊字符和特殊搭配的字符串的强大工具，今天我们来梳理一下常用的基础知识，以便快速上手和复习"}, {"id": "6992581497190350855", "title": "『面试的底气』—— 设计模式之里氏代换原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6992270892424232990", "title": "ECMAScript 的原始值和引用值讲解", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 这应该是很基础的 JavaScript 的知识点，但估计很多小伙伴都只是简单带过，到面试时一问三不知。"}, {"id": "6999079863487299597", "title": "做了一个Nest.js上手项目，很丑，但适合练手和收藏", "desc": "前言 最近爱了上 Nest.js 这个框架，边学边做了一个 nest-todo 这个项目。 没错，就是一个 UI 很丑陋的 Todo List App。不知道为啥，慢慢开始喜欢上这种原始风味的 UI "}, {"id": "7006662106028179463", "title": "JS数组详解", "desc": "JS数组详解 数组 数组的声明与赋值 通过字面量形式创建 new Array()构造函数的方式创建 数组的读与写 若arr.length为num则： arr[num] 不报错但会返回undefined"}, {"id": "7005434415484502046", "title": "JS压缩图片", "desc": "为什么要前端来压缩图片 因为现在h5手机拍照功能强大，导致图片动辄5，6M，如果这样子直接上传的话，不做限制，会导致流量庞大，服务器请求过慢 服务端的要求是上传图片必须小于2M，而且直接传这么大图片，"}, {"id": "6994378843620556808", "title": "Es6新特性——箭头函数", "desc": "箭头函数是Es6新增的一种定义函数表达式的语法，它简化了我们之前写的函数书写方式，箭头函数实例化的函数对象与我们Es5之前创建的函数表达式的创建函数行为是相同的。但还有一些差异，点击查看"}, {"id": "6989108056407670797", "title": "前端冰可乐🥤｜用 50 行代码成为洛竹🎋升级lv5的关键先生", "desc": "前端冰可乐系列有前端最好玩的实践，在这里把前端变成有趣的模样。本篇文章主题是使用nodejs脚本成为洛竹升级lv5的关键先生～"}, {"id": "6931313450836557838", "title": "Typescript也许应该这样入门才对", "desc": "前言：Typescript是前端当中一门饱受争议的技术，有人爱有人恨。在本文中，我不会劝你使用或者不使用TS，而是会站在一个客观的角度，探讨TS这门技术所解决的更本质的问题（即JS类型问题）及其解决方案（TS只是其中一种）。希望阁下看完这篇文章之后，能够超脱于TS本身，看到更加…"}, {"id": "6844904085930377229", "title": "大厂面试题分享：如何让(a===1&&a===2&&a===3)的值为true?", "desc": "当我第一次看到这一题目的时候，我是比较震惊的，分析了下很不合我们编程的常理，并认为不大可能，变量a要在同一情况下要同时等于1，2和3这三个值，这是天方夜谭吧，不亚于哥德巴赫1+1=1的猜想吧，不过一切皆有可能，出于好奇心，想了许久之后我还是决定尝试解决的办法。 这次跟上面只有一…"}, {"id": "6991986498186772487", "title": "《JavaScript高级程序设计（第四版）》精读（三）第3章（续）| 8月更文挑战", "desc": "第三章真的好多，但是有些又很基础有点乏味 第三章：语言基础（续） 3.5 操作符 3.5.1 一元操作符 只能操作一个值的操作符叫一元操作符 1. 递增递减操作符 前置型：++(--)值先递增（递减）"}, {"id": "7002078558902288392", "title": "v-for循环中使用require或import关键字引入本地图片", "desc": "问题描述 我们做项目中，常常需要把图片呈现到页面上，一般来说有以下几种方式 方式一（后端返回图片URL） 这种方式就是后端返回图片的url地址，我们直接img标签的src属性绑定imgUrl即可。如下"}, {"id": "6960850759759953957", "title": "小技巧！CSS 提取图片主题色功能探索", "desc": "本文将介绍一种利用 CSS 获取图片主题色的小技巧。一起看看~ 背景 起因是微信技术群里有个同学发问，有什么方法能够获取图片的主色呢？有一张图片，获取他的主色调： 利用获取到的这个颜色值，来实现类似这"}, {"id": "6998519744072515621", "title": "如何编写前端设计文档？", "desc": "在笔者所在的前端研发流程中, 【技术调研及方案设计】属于连接【需求阶段】和【开发阶段】的中间节点。在需求详评(三审)后了, 需求的功能和交互已经基本确定, 而在实际进入开发之前, 还有一些待确定的技术"}, {"id": "7004007273668296740", "title": "AST抽象语法树", "desc": "ast，即_Abstract Syntax Tree_抽象语法树（通常被简写成AST），在计算机科学中，抽象语法树其实是源代码的抽象语法结构的树状表现形式。 AST 抽象语法树，似乎我们平时并不会接触"}, {"id": "6991241602253455391", "title": "《JavaScript高级程序设计（第四版）》精读（一）第1、2章 | 8月更文挑战", "desc": "第一章：什么是JavaScript 1. JavaScript的实现 完整的 JavaScript 实现包含以下几个部分： 核心（ECMAScript） 文档对象模型（DOM） 浏览器对象模型（BOM"}, {"id": "7002020945636360222", "title": "Three.js拨云见雾(7)——加载和使用纹理贴图", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 前面我们简单介绍了Three.js中的材质，但是没有介绍如何将纹理应用到网格上，纹理贴图是Three.js一个很重要的内容，游戏、产品"}, {"id": "6996951798724427807", "title": "画一张属于自己的JS原型链", "desc": "简单明了 一图流 虽然看起来乱糟糟的，但其实顺着图中的关系一步步梳理起来其实真的是简单明了，实在看着费劲没关系画图水平有限，咱们一步一步来把这条原型链撕个细碎。   先明确几个概念： 原型 当对构造函"}, {"id": "6844904050543034376", "title": "「硬核JS」一次搞懂JS运行机制", "desc": "多进程：多进程指的是在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态。多进程带来的好处是明显的，比如大家可以在网易云听歌的同时打开编辑器敲代码，编辑器和网易云的进程之间不会相互干扰 JS的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript…"}, {"id": "6996624626264588324", "title": "涨点防抖节流的知识 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 首先防抖和节流属于性能优化方面的知识，现实开发中也经常遇到。例如：resize，scroll等这些无法控制触发频率的，而且如果这时候调用接"}, {"id": "6844904127437209607", "title": "全面让你了解和打造自己的自定义滚动条（提供组件", "desc": "最近在封装一个自定义滚动条容器，打算以后用它来取代常用的div标签，因为在Window上的浏览器的确比较丑，为了跟mac里的滚动条尽量保持一致，自己动手封一个。 在动手时发现现有网络资源的一些不足之处，在这里加以补充和描述，希望后来之人在查阅资料时能看到这篇文章就能满足所需。 …"}, {"id": "6930134116042014734", "title": "[JS犀牛书英文第七版笔记]6. 函数，this 指向和闭包", "desc": "上一章链接：5. 数组，数组方法和类数组对象 函数是 JavaScript 中最基础的组件，也是所有编程语言中最普遍的特性之一。函数就是一块只被定义了一次，但是可以被多次调用（执行）的代码块。函数的定义中可以包括一列参数（parameters），它们会在函数体中被使用。在调用函…"}, {"id": "6844903911938080782", "title": "如何利用JavaScript的Map提升性能", "desc": "在ES6中引入JavaScript的新特性中，我们看到了Set和Map的介绍。与常规对象和Array不同的是，它们是“键控集合（keyed collections）”。这就是说它们的行为有稍许不同，并且在特定的上下文中使用，它们可以提供相当大的性能优势。 在这篇文章中，我将剖析…"}, {"id": "6985438938777255949", "title": "React 中使用Swiper实现中间小，两侧大的轮播图", "desc": "目标样式 实现 首先，使用 npm 安装 Swiper，这里需要注意的是 swiper 是小写。 npm install --save swiper 接下来在项目中引入需要用到的 Swiper 等组件"}, {"id": "6991822067234504717", "title": "【盲目分析系列】为什么0.1+0.2 ！==0.3，而0.2-0.1 === 0.1 ", "desc": "前言 这个问题有意义吗？我觉得可能不大，这不就是个浮点数精度问题吗。嗯，确实。之前笔试遇到过这个题，现在来盲目分析一波"}, {"id": "6844903712003997704", "title": "简单粗暴的移动端适配方案 - REM ", "desc": "腾讯Web前端 来教你如何做 移动端的适配"}, {"id": "6996500314803142686", "title": "【JS从入门到精通】16-滚轮事件与键盘事件", "desc": "[TOC] 滚轮事件与键盘事件 1、滚轮事件 onmousewheel、DOMMouseScroll onmousewheel：鼠标滚轮滚动的事件，会在滚轮滚动时触发，但是火狐不支持该属性 DOMMo"}, {"id": "6844903711127388173", "title": "【译】理解JavaScript中的柯里化", "desc": "函数式编程是一种编程风格，这种编程风格就是试图将传递函数作为参数（即将作为回调函数）和返回一个函数，但没有函数副作用（函数副作用即会改变程序的状态）。 有很多语言采用这种编程风格，其中包括JavaScript、Haskell、Clojure、Erlang和Scala等一些很流行…"}, {"id": "6919075978832510984", "title": "登上 Github 趋势榜，iMove 原理技术大揭秘!", "desc": "我认为前端开发中问题很多，尤其是以下3点。 组合接口，这是历史原因，主要是和后端配合导致的。其实没有Node BFF层，都由组件来做，会问题非常多。 最近我们的开源项目 iMove 一天就涨了 280+ star，一举登上了 github 趋势榜第 1 名，取得的成绩还是不错的…"}, {"id": "6844903609516163079", "title": "JavaScript中的类型判断，了解一下？", "desc": "关于typeof操作符，我们需要记住两点，第一点：当操作数为null时。 第二点：当操作数为原始类型(Primitive)时很有效，但是对于对象具体类型的判断往往并不是我们需要的结果。 instanceof操作符主要用来检查构造函数的原型是否在对象的原型链上。 从好的编程习惯来…"}, {"id": "6904551988290453512", "title": "开源推荐|JSONsite：使用JSON文件创建SPA页面", "desc": "发现一个开源项目，可以让你用一个JSON文件创建一个网站。 做一个fork，添加你的URL，然后咣当一声，一个好看的网站就用JSON文件做出来了。而且所有的网站都是由Vercel托管的，他们有惊人的正常运行时间和CDN。 然后，JSONsite将开始解析这些数据，并将其传递给n…"}, {"id": "6844903636338737159", "title": "约束你的git操作，让你生无可恋。", "desc": "今天看到小伙伴写的《你可能会忽略的git提交规范》，不禁想起自己那些不忍直视的提交信息，当然也不能怪自己，谁叫我能够随意的commit呢?上述文章中已经介绍了一些相关的工具以及规范，这里我再补充一些操作，以下内容算是一个简单的教程吧。 既然要规范起来，当然要从最基本的JS代码规…"}, {"id": "6986164693790359565", "title": "红宝书——章节读感（第三章 语法、关键字、变量、数据类型）", "desc": "语言基础 说到基础，红宝书讲述的这一章可谓是ECMAScript的主心骨、大蟒蛇的七寸了。个人通过这一章节，重新巩固认识了JS这门语言。后面章节的学习也是依赖此章节知识的堆叠，后面就是个人竭尽全力的细"}, {"id": "6844904029441490951", "title": "console你只会log?", "desc": "console.log我相信写过JavaScript人一定都有接触过，它可谓是我们debug的灵丹妙药。可是除了log方法，你知道console还有很多可以帮你快速提高代码debug效率（逼格）的方法吗？ 输出不同类型（level）的内容。 呈现输出时的上下文信息（contex…"}, {"id": "6989549714844680199", "title": "边学边译JS工作机制--11. 渲染引擎以及性能优化建议", "desc": "迄今为止，我们主要讨论的是JS语言的特性。 但是当构建App时，代码是需要跟它所处的环境进行交互的。理解环境的原理和构成，能让你构建更好的app，也能为发布之后潜在的问题做好准备 来看看浏览器环境的主"}, {"id": "6956405515123425294", "title": "JavaScripts高阶（6）面向对象（OOP）、构造函数模式", "desc": "面向对象 面向对象的三大特性： 1、封装 隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性。 2、继承 提高代码复用性；继承是多态的前提。 3、多态 对象、类"}, {"id": "6991631708051210271", "title": "前端面试知识点小记 —— day1 (javaScript的执行上下文和执行栈)", "desc": "什么是执行上下文 执行上下文是评估和执行 JavaScript 代码的环境的抽象概念。每当JavaScript代码在运行的时候，它都是在执行上下文中运行。 执行上下文类型 全局执行上下文： 这是默认的"}, {"id": "6844903568177119245", "title": "babel-polyfill VS babel-runtime", "desc": "在项目迭代过程中，因为有兼容 IE 的需求，根据文档使用babel-polyfill和babel-runtime两个插件解决问题。但是对于二者之间的恩怨情仇，却不甚了解，便打算细细探究一番。 如果我们没有配置一些规则，Babel 默认只转换新的 JavaScript 句法（sy…"}, {"id": "6994076970510188557", "title": "重温js —— 流程控制", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 流程图 开始或者结束 判断 流程中的步骤 输入或者输出 连接线 if 判断 用法： switch 开关 用法： 循环 这里咋们做一个1 + "}, {"id": "6995362229046476830", "title": "数据结构之图的广度优先搜索", "desc": "广度优先搜索 首先，我们要知道广度优先搜索需要标注被访问过的顶点。用来记录哪些顶点被访问过，哪些未被访问。"}, {"id": "6989055903651594248", "title": "为什么要用 setTimeout 模拟 setInterval", "desc": "前言 在JS 事件循环之宏任务和微任务中讲到过，setInterval 是一个宏任务。 用多了你就会发现它并不是准确无误，极端情况下还会出现一些令人费解的问题。 推入任务队列后的时间不准确 上面这句代"}, {"id": "6991810819944087582", "title": "深入浅出Object.defineProperty｜8月更文挑战", "desc": "Object.defineProperty是一个方法，作用是创建一个属性，或者修改一个属性。 接收三种参数，而且这三个参数是必填的参数 参数一： 目标对象 (target:Object) 参数二"}, {"id": "6995716188114255903", "title": "初识面向对象", "desc": "相信大家都听过一句话啊，万物皆对象！ 人 ， 车 ，猫 对象的概念: 对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，"}, {"id": "6996655197125214215", "title": "虚拟dom使用key进行对比的策略", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 数据驱动视图 数据 ==> vdom ==> 真实 dom ==> 渲染 dom diff vdom ==> 真实 dom 需要经过 do"}, {"id": "6998877876019789838", "title": "js基础总结深入(一)", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 数据类型 基本类型 Number String Boolean undefined null 任意数值 任意字符串 true/fals"}, {"id": "6992501157511823396", "title": "正则表达式应用——实例应用 | 8月更文挑战", "desc": "正则表达式应用——实例应用 巩固学习 javascript 基础知识，加深理解记忆，打牢地基才能盖高楼，加油！！！"}, {"id": "6844904185830473736", "title": "这个长列表优化渲染，值得学一波（通俗易懂，学不懂你找我）", "desc": "公司里的PHP后台项目，上一任的工程师对于很长列表的处理，都是直接全部进行渲染，导致的一个问题就是，加载页面都要加载比较久的时间，这里只能庆幸这个后台项目只是给公司里边的大佬用，用的机器还可以，除了忍受一下加载速度比较慢之外，没有很大的影响。但他们能忍，作为前端工程师，我实在是…"}, {"id": "6844904048106143757", "title": "全面介绍JavaScript数组方法", "desc": "随着JavaScript的发展，JavaScript的Array也增加了许多方法。有必要全面了解一下。本文基本涵盖了Array所有的方法介绍。 判断传入的值是否是一个数组。 Array.from()方法用于将类数组对象和可迭代对象转为真正的数组，并且返回一个新的，浅拷贝的数组实…"}, {"id": "6979027240542142478", "title": "浅谈前端 | JavaScript基本语法和数据类型", "desc": "这是我参与更文挑战的第29天，活动详情查看： 更文挑战 前言 基本的网页框架和网页基本美化已经做过简单介绍了，接下来一起学习如何使用JavaScript控制网页的行为吧！ JavaScript简介 J"}, {"id": "6951308575805276196", "title": "👀  理一波 Javascript 事件机制【回顾 Plan】", "desc": "说起Javascript事件，你想到的是什么呢？我想答案里免不了有，事件捕获，冒泡，代理之类的词在里面。但是是否真的理解到位了呢？javascript本身作为一门事件驱动型的语言，可见事件的重要性"}, {"id": "6999510850709127182", "title": "前端开发 闭包详解 作用域 立即执行函数", "desc": "闭包 一、作用域初探 作用域定义：变量（变量作用于又称上下文）和函数生效（能被访问）的区域 互相嵌套的函数，里面可以访问外面的，外面不能访问里面 外面不访问里面演示： 里面能访问外面演示： 二、js运"}, {"id": "6913376799674236942", "title": "ES2020让代码更优美的运算符 (?.) (??)", "desc": "我们通常获取一个对象多层的属性值时，需要进行多次的判断。如不判断，一个为空则报错，导致后面无法继续下去。 也可以用三元运算符?:来判断单个值，下面例子中，必须先判断fooInput是否存在，才能读取fooInput.value。 接着，我们来使用 ?. 运算符看看有多神奇： 一…"}, {"id": "6844904166226133000", "title": "[译]手把手教你用Node.js创建CLI", "desc": "Node.js除了可以编写“传统“的Web应用外，还有其他更广泛的用途。微服务、REST API、工具、物联网，甚至桌面应用，它能满足你的任何开发需求。 本文要做的事情就是利用Node.js来构建命令行工具CLI。我们先来看一些用于创建命令行的第三方npm包，然后，从零开始构建…"}, {"id": "6844903993223839751", "title": "14 个拷贝数组的 JS 技巧", "desc": "为了保证的可读性，本文采用意译而非直译。 数组拷贝经常被误解，但这并不是因为拷贝过程本身，而是因为缺乏对 JS 如何处理数组及其元素的理解。JS 中的数组是可变的，这说明在创建数组之后还可以修改数组的内容。 这意味着要拷贝一个数组，咱们不能简单地将旧数组分配给一个新变量，它也是…"}, {"id": "6844903656152645640", "title": "vue全家桶仿某鱼部分布局以及功能实现", "desc": "每次写文章时，总会觉得比写代码难多了，可能这就是我表述方面的不足吧，然而写文章也是可以复盘一下自己的开发过程，对自己还是受益良多的。在这里简单叙述一下我仿某鱼部分布局以及功能实现的过程，仅做学习用途。 Vue是一套用于构建用户界面的渐进式框架，Vue 的核心库只关注视图层，不仅…"}, {"id": "6992508391377764382", "title": "【javaScript】通过http-proxy-middware引发正反向代理的思考", "desc": "正向代理隐藏真实客户端、反向代理隐藏真实服务端、使用http-proxy-middware实现正向代理达到跨域的目的"}, {"id": "6844903861941993479", "title": "JavaScript 中数组方法 reduce 的妙用之处", "desc": "Javascript数组方法中，相比map、filter、forEach等常用的迭代方法，reduce常常被我们所忽略，今天一起来探究一下reduce在我们实战开发当中，能有哪些妙用之处，下面从reduce语法开始介绍。 若传入初始值，accumulator首次迭代就是初始值，…"}, {"id": "6859026583533912072", "title": "「面试必会」手写35道JS面试高频题(一)", "desc": "在面试中，常常会问到一些“手写XXX”的面试题，如果我们只是停留在熟练使用这些 API，问到这种问题想必总是束手无策的。其实想要手写 API 的实现也并不难，更多的是需要我们训练自己通过使用方式来推倒实现的能力，千万不要死记硬背。最近我也在强化自己手写 API 的能力，并汇总了…"}, {"id": "6844904056847073293", "title": "你可能不知道的 JavaScript 模块化野史", "desc": "对于 JavaScript 新手，看到 \"CommonJS vs AMD\" 、\"Requirejs vs Seajs\"、\"Webpack vs. Browserify\"等这些可能会不知所措。 特别是在大部分浏览器都已经实现 ES6 模块化规范的今天，我们新开发的项目基本都是 E…"}, {"id": "6989296490795499534", "title": "[JS]闭包和词法环境", "desc": "词法环境由两个部分组成： 环境记录和对外部词法环境的引用。一个函数和其词法环境的组合就是闭包。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。"}, {"id": "6995925423070642206", "title": "扎实基础篇-----浅谈js中的深拷贝", "desc": "深拷贝：对于复杂引用数据类型，它会在堆内存中完全**开辟一块内存地址**，并将原有的对象完全复制过来存放起来。这**两个对象是相互独立，不受影响的**。"}, {"id": "6987548503933190181", "title": "vue(utils.js工具类)常用的公共方法的整理", "desc": "vue(utils.js)常用方法的封装,以下是我搜集到的认为vue中可能会用到的一些公共方法的整理，在后面开发过程中遇到的方法或浏览到比较好的方法我会持续补充："}, {"id": "6958087344121446436", "title": "Promises/A+ 规范写一个自己的Promise", "desc": "前言 百度了很多次别人写的promise ,也是一时兴起 今天自己写了一个并且做了这么一个记录 Promises/A+ 同学们:此处自行查阅Promises/A+规范 Just do it 接下来我根"}, {"id": "6844903561327820808", "title": "深入理解Vue响应式原理", "desc": "最近一段时间在阅读Vue源码，从它的核心原理入手，开始了源码的学习，而其核心原理就是其数据的响应式，讲到Vue的响应式原理，我们可以从它的兼容性说起，Vue不支持IE8以下版本的浏览器，因为Vue是基于 Object.defineProperty 来实现数据响应的..."}, {"id": "6914108205258211335", "title": "你应该了解的25个JS技巧", "desc": "写代码的时候总有一些东西是会重复出现的，次数多了你就会想找找捷径了。这类问题中有很大一部分解决起来甚至连库都不用装。下面就是我多年来收集的前 25 个捷径和小技巧。 1. 类型检查小工具 JavaScript 不是强类型语言，对此我推荐的最佳解决方案是 TypeScript。但…"}, {"id": "6916678317736132615", "title": "在轮播图里寻求新颖是不是搞错了什么", "desc": "大家好，这里是CSS魔法使——alphardex。 轮播图（Carousel），相信大家并不陌生。平时大部分我们都是借助现有的框架来实现的，大都是swiper，或者UI框架里的某一个小组件。于是乎这东西就开始变得千篇一律：几张图片，外加几个小点，两边各有2个箭头，能够点击它们进…"}, {"id": "6844904191396151310", "title": "那个炒鸡有趣的H5标签 —— <dataList>", "desc": "按照whatwg文档所展示的，截至到本文截稿之前，一共有 113 个HTML标签。 因为所出标签太多，所以我们很难都用得上或者意识到需要用。 但其实也有许多有趣但是我们未曾发掘的标签，本文所要介绍的 &#x3C;dataList> 便是一个。 &#x3C;dataList> 标…"}, {"id": "6844903878148751374", "title": "基于react-draggable实现边界拖拽功能", "desc": "左边面板部分支持拖拽功能，可以让用户可以看到完整的目录。 其中关于鼠标移动距离的计算可以借用event.clientX获取。 博主去github上一顿找，找到一个还不错的插件react-draggable，npm链接。 （1）左右box最好采用flex布局，左边box初始wid…"}, {"id": "6989206702704820260", "title": "边学边译JS工作机制---9 网页推送机制", "desc": "本系列其他译文请看JS工作机制 - 小白1991的专栏 - 掘金 (juejin.cn) 推送机制在手机端已经非常普遍了，但奇怪的是在web上却出现的很迟，即使开发者呼吁这个功能很久了。 概述 网页推"}, {"id": "6977546679360684068", "title": "数据结构之树（二叉树和二叉搜索树）", "desc": "这是我参与更文挑战的第25天，活动详情查看：更文挑战 什么是二叉树 二叉树：是每个结点最多有两个子树的树结构。一个是左侧子节点，一个是右侧子节点。"}, {"id": "6990572277913878541", "title": "使用UOS微信桌面版协议登录，wechaty免费版web协议又可以用了", "desc": "## 重磅通知 很高兴能够写这篇文章通知大家Wechaty的web协议又能大放光彩了，如果之前你的微信提示不能登录web端，那么这个更新将会是你的福音。因为现在的`wechaty-puppet-w"}, {"id": "6844904070872825870", "title": "高级 Vue 技巧：控制父类的 slot", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 最近一位同事问我这个问题，答案很简单：可以的。但我的解决方案可能和你想的完全不一样，这是涉及一个棘手的Vue架构问题，但也是一个非常有趣的问题。 在我们的应用程序中，我们有一个顶部栏，其中包含不同的按钮、搜索栏…"}, {"id": "6996654337036386311", "title": "探寻模块(module) ", "desc": "前言 随着应用越来越大，越来越复杂，我们想要将其拆分成多个文件，即所谓的“模块（module）”。一个模块可以包含用于"}, {"id": "6965419256108449823", "title": "八.一篇文章搞定JavaScript中this指向问题", "desc": "第一部分:常见的this指向问题 1. 全局上下文中的 this 2. 块级上下文中的 this 3. 给事件绑定方法中的this 函数私有上下文中的 this 千变万化，可以总结为以下五种情况： 3"}, {"id": "6994589411774038052", "title": "一文搞懂JS系列（十二）之改变this指向的方式", "desc": "彻底搞懂改懂如何通过箭头函数，apply call bind 改变this指向，并且这三者的异同，以及 new操作符为什么能改变this指向，自己如何实现一个 new ，以及通过变量保存的方式。"}, {"id": "6991057787757281311", "title": "小程序原理解析（二）", "desc": "基础库 整体架构 小程序的基础库是 JavaScript 编写的，基础库提供组件和 API，处理数据绑定、组件系统、事件系统、通信系统等一系列框架逻辑，可以被注入到渲染层和逻辑层运行。在渲染层可以用各"}, {"id": "6948587382866182180", "title": "你知道原生端和JavaScript端如何通信吗？", "desc": "React Native 作为跨平台开发框架，采用了 JavaScript 语言开发视图和逻辑，iOS 和 Android 两个原生端通过桥接层与 JavaScript 环境进行通信。利用桥接层提供的通信方式，JavaScript 和原生端可以实现互相调用各自定义好的方法。这是…"}, {"id": "6844903764973846542", "title": "前端加密那点事", "desc": "最近公司一个项目在传输数据的时候，测试部门安全扫描后，发现密码类型的数据是明文传输的，果断不符合要求，让加密，就有了接下来的故事。 前后端使用HTTP协议进行交互的时候，由于HTTP报文为明文，所以通常情况下对于比较敏感的信息可以通过加密在前端加密，然后在后端解密实现\"混淆\"的…"}, {"id": "6995418842688143396", "title": "JavaScript 正则表达式(上)", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战” 正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列"}, {"id": "6999914110838112293", "title": "JS的this指向问题", "desc": "this 是什么 ？ 方法中的 this 在对象方法中 ，this 指的是此方法的 ''拥有者''."}, {"id": "6986087239554072583", "title": "ES2019、ES2020、ES2021、ES2022 特性大汇总【2021-09-04更新】", "desc": "[本文持续更新，收藏不亏，最近一次于 2021-09-04 更新] 截止目前，ES 2022 的最新特性已全部收录！"}, {"id": "7004657938392416287", "title": "数组map和forEach比较", "desc": "数组map和forEach比较 问题来源：面试过程中，面试官问我数组方法map和forEach有什么区别？ 本人遂答：map会返回新数组，forEach不会。 面试官微微一笑，“还有呢？” \"没有了吧"}, {"id": "6995715460159242271", "title": "最全的 IndexedDB API 操作指南（值得收藏）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 先说一下背景吧。这两天在封装一些底层的基础库，其中有一个封装就是“通用前端 storage 方法的封装”，需要封装操作 cookie"}, {"id": "7000659327971229704", "title": "Js中的正则表达式基础知识", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 认识正则 最简单的字面量方式声明正则。例： 正则对象的声明方式 RegExp 和字符串类型和数组类型类似，既支持字面量的生命方式也支持对象"}, {"id": "6844904025310117901", "title": "自从学会了 Array.reduce() ，再也离不开它", "desc": "在所有后 ES6 时代的数组方法中，我觉得最难理解的就是Array.reduce()。 从表面上看，它似乎是一个简单无趣的方法，并没有太大作用。 但是在不起眼的外表之下，Array.reduce()实际上是对开发人员工具包的强大而灵活的补充。 今天，我们就来研究一下通过Arra…"}, {"id": "7004762174782439454", "title": "devtools-detector 源码阅读", "desc": "devtools-detector 检查控制台是否被打开 用法 实例化 使用5种方法检查控制台是否打开 addListener 把回调函数加入队列 launch 启动监听 _detectLoopDel"}, {"id": "6844903545636929543", "title": "2018前端值得关注的技术", "desc": "2017悄然过去，2018已经来到。人在进步，技术在发展。2018年前端有哪些领域，技术值得关注，哪些技术会兴起，哪些技术会没落。下面就我个人的判断进行一个预测判断，希望能对大家起到一个参考作用！下面提及的技术，只是建议大家关注，也不是建议大家全部的都要学，而是建议大家按需学，…"}, {"id": "6992371317605400590", "title": "为什么 Webpack 使用 tapable 插件系统（包含设计思想、使用手册和插件系统对比）", "desc": "tapable 是为了使系统更容易扩展而抽象的库。它要求将程序设计为一套流程，然后开发者可以在任意的流程节点中进行扩展，达到开发者想要扩展的目的。"}, {"id": "6998456779998756895", "title": "浅谈React Native之原理篇", "desc": "这是我参与 8 月更文挑战的第 20 天，活动详情查看： 8月更文挑战 前言 要说React Native的原理，我们就不得不先聊聊React了。 React 框架是一个非常优雅、现代的前端开发框架，"}, {"id": "6928968738196684813", "title": "console.log 真的可信吗？", "desc": "相信大家都会平时在调试代码时，都会用上 console.log、debugger或者调试工具。但是一般顺手的情况下，我们大多数都会使用console.log，但是console.log真的可信吗？ 结论：console.log在打印引用类型的数据，可能会不准确。在复杂的断点调试…"}, {"id": "6844904022223110151", "title": "JS 高级之手写一个Promise,Generator,async和 await【近 1W字】", "desc": "1.1.3.1中第2小点 reject变为 rejected 2.Generator中级版polyfill这里let = val=ret.value"}, {"id": "6996319213447020557", "title": "js 实现数组方法 forEach、filter、map、some、every、find、findIndex", "desc": "数组方法自己实现 forEach、filter、map、every、some、find、findIndex"}, {"id": "6994979397249794079", "title": "重温ES6系列之“数组的扩展-Array.of()、数组实例的copyWithin()”", "desc": "Array.of() Array.of方法用于将一组值，转换为数组。其实个人感觉我在项目使用的比较少，几乎没有使用过。 这个方法的主要目的，是弥补数组构造函数Array()的不足。 因为参数个数的不同"}, {"id": "6844903827984875528", "title": "【前端词典】分享 8 个有趣且实用的 API", "desc": "这几个 API 使用得当的话，可以提高你应用的友好性。 这些 API 的示例代码我已放在 github 上，感兴趣的可以 clone 代码到本地运行。望给个 star 支持一下。 1. 监听屏幕旋转变化接口: orientationchange 这个 API 可以将你手机是否横…"}, {"id": "6955730664045936670", "title": "浅谈TypeScript设计模式-基础篇（二）", "desc": "本系列将会和大家一起从了解面向对象开始，再深入到常用的设计模式，一起探索TypeScript配合设计模式在我们平时开发过程中的无限可能，设计出易维护、易扩展、易复用、灵活性好的程序。"}, {"id": "6861741444098195469", "title": "金九银十冲刺大厂，你需要知道的性能优化和手写源码", "desc": "今天这些只是基础知识，面试时候如果面试很高级的岗位，只靠背面试题是很容易被识破,建议大家只是作为一个学习的点，不断去深入、实践在项目中。有一些同学说前端很难，很多东西，学不完，我想你可能是走错了方向，毕竟人不是万能,不要太深入那些对你目前来说没有意义的东西,如果你有对现状不是很…"}, {"id": "6982857009037213709", "title": "前端 JavaScript 实现一个简易计算器", "desc": "前端使用 JavaScript 实现一个简易计算器，没有难度，但是里面有些小知识还是需要注意的，算是一次基础知识回顾吧。"}, {"id": "6968629791343771661", "title": "electron踩坑系列之一", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 前言 此文最初版本我发布在博客园 electron踩坑系列之一, 经过整理和加工，再发布到掘金。 以electron作为基础框架，已经开发两个项目"}, {"id": "6994211215652159495", "title": " 你可能没有听说过 js中的 DOM操作还有这个: HTMLCollection 和 NodeList", "desc": "⛱️序言 犹记得上回有一次面试的时候被问到 htmlCollection 和数组的关系。当时的我心里想的是， html 中的集合和数组的关系，那解题就是说 set 和数组的关系？ 于是……面试官当下立"}, {"id": "6915297687873159176", "title": "基于自然流布局的可视化拖拽搭建平台设计方案", "desc": "LowCode 是高效、高性能的拖拽式低代码开发平台. 也是笔者最近一直在研究的方向, 对于可视化搭建平台的实现方案笔者之前写过很多文章, 这里带大家探索一个新方向——基于自然流布局的可视化搭建平台. 因为第一种方案笔者在dooring的早期已经实现过一版, 最后弃用采用了网格…"}, {"id": "7002896797408444429", "title": "Chrome谷歌浏览器使用JS关闭当前标签页", "desc": "只有通过window.open()打开的页面才可以通过window.close()关闭 在之前版本的chrome浏览器中，window.close()是可以直接关闭当前标签页的，后来出于安全性的考虑，"}, {"id": "6966841051591999518", "title": "a标签下载文件，文档流 xls，xlsx，doc，docx，pdf", "desc": "a标签下载文件，文档流 xls，xlsx，doc，docx，pdf，通过a标签下载文件 项目中需要下载后台execl文件，通过接口下载，使用js文档流 创建单独js文件，"}, {"id": "6987211325050994701", "title": "前端热更新-下篇", "desc": "热更新过程中浏览器都做了哪些，从上一篇分享中可以知道,代码改变之后，webpack会通知浏览器有代码改变，然后浏览器拉取最新的代码"}, {"id": "6854573220033953806", "title": "玩转经典十大Top10之手撕实现", "desc": "Promise.all传入一组以promise为实例的数组，all方法会按照传入数组内的顺序依次执行，直到那个耗时最久的resolve返回，才能算做全部成功。中间环节如果有一个出现reject就直接中断掉 考点：很多人都知道new一个实例的时候，对应类会在this上挂很多属性和…"}, {"id": "6984972209240408078", "title": "超实用的AST的基本操作，你学会了吗？", "desc": "超实用的AST的基本操作 什么是AST? 我们可以把AST看成一棵千变万化的树，它能够变成任何我们开发中想要的东西。 抽象语法🌲(Abstract Syntax Tree) 简称AST,是以树状形式"}, {"id": "7001858278430867487", "title": "介绍几个前端视频相关的场景应用", "desc": "我们都知道Video标签可以让视频在web页面中播放，某种程度上替代了flash。今天介绍几个关于Video视频在web页面的几个应用场景：变速播放、实时绘制视频流到画布"}, {"id": "7005749245961568293", "title": "如何在JS中获取所有的H1，H2，H3, H4", "desc": "1、浏览器支持querySelectorAll 如果是jQuery 2、JQuery 3、纯JS解决方案 4、没有JQuery 和 querySelectorAll函数"}, {"id": "7002524768935084069", "title": "ECMAScript新特性", "desc": "ECMAScript 通常将 ECMAScript 看作是 JavaScript 的标准规范 实际上 JavaScript 是 ECMAScript 的扩展语言 ECMAScript 只是提供了最基本"}, {"id": "6995744323123806238", "title": "深入理解Typescript系列-接口", "desc": "这是我参与 8 月更文挑战的第 13 天，活动详情查看： 8月更文挑战 前言 在上篇文章中，我们谈及了TS的类型系统，以及它的能帮助我们解决什么问题。而接口，作为一种重要的类型约束方式，这篇文章，我们"}, {"id": "6958361473953300488", "title": "已阅冴羽大佬文章 | 创作者训练营第二期", "desc": "一些功能点的实现，防抖、节流、去重、类型判断、拷贝、最值、扁平、柯里、递归、乱序、排序等。欢迎一起阅读冴羽大佬文章~~~"}, {"id": "6992851756161957925", "title": "🚀详解JavaScript系列之数组(五)", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 前言 reverse() 作用：如其名，就是反转数组，返回结果为反转后的数组（是在原数组的基础上反转）。 sort()方法 sort()：对"}, {"id": "6998438314210508807", "title": "整理JS一些常用的工具函数", "desc": "1.JS判断是否为空 2.JS时间戳转成时间 3.JS时间戳转成时间(通用版，可以自定义格式) 4.JS生成指定位数的随机整数 5.去除空格 6.JS格式化现在距${endTime}的剩余时间 7.J"}, {"id": "6844903830916694030", "title": "深入理解HTTPS工作原理", "desc": "近几年，互联网发生着翻天覆地的变化，尤其是我们一直习以为常的HTTP协议，在逐渐的被HTTPS协议所取代，在浏览器、搜索引擎、CA机构、大型互联网企业的共同促进下，互联网迎来了“HTTPS加密时代”，HTTPS将在未来的几年内全面取代HTTP成为传输协议的主流。 HTTPS是在…"}, {"id": "6933063693487833102", "title": "解构：使数据访问更便捷！", "desc": "初衷：最近在读《深入理解Es6》这本书，之前没好好全面学过Es6语法，也是趁着不忙的阶段重新好好研究一下整理一下笔记分享给大家，不喜勿喷。 适合人群：前端初级开发，大佬绕道。 在Es5中，我们之前要想从对象或数组对象中获取特定的数据，通常都是这么做的。来看下面例子 上面exam…"}, {"id": "6995895317287665694", "title": "重温ES6系列之“函数的扩展-name属性、箭头函数”", "desc": "1.name属性 函数的name属性，返回该函数的函数名。 需要注意的是，ES6对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5的name属性，会返回空字符串，而ES6的nam"}, {"id": "6997787733796061215", "title": "图解一道经典闭包面试题，剖析闭包面试考什么", "desc": "上次，我们通过这篇文章“JavaScript 的闭包，可以这样理解”，让大家对闭包有了一个不一样的理解。今天我们从一道经典面试题出发，剖析 JavaSctipt 闭包面试考什么。"}, {"id": "7001010747400536094", "title": "Promise Generator Async 的原理(万字!)", "desc": "介绍 本文写的比较多,不感兴趣的小伙伴可以根据标题直接跳到对应部分，阅读本文可以了解到~ Promise 符合A+标准实现 Generator 内部原理和简单实现 Async/await 是怎么样的"}, {"id": "6844904019987529735", "title": "学习 axios 源码整体架构，打造属于自己的请求库", "desc": "1. 前言 感兴趣的读者可以点击阅读。下一篇可能是vue-router源码。 本文比较长，手机上阅读，可以直接看文中的几张图即可。建议点赞或收藏后在电脑上阅读，按照文中调试方式自己调试或许更容易吸收消化。 文章详细介绍了 axios 调试方法。详细介绍了 axios 构造函数，…"}, {"id": "6844904021627502599", "title": "头条面试官：你知道如何实现高性能版本的深拷贝嘛？", "desc": "JS 中有个重要的类型叫做引用类型。这种类型在使用的过程中，因为传递的值是引用，所以很容易发生一些副作用，比如： 上述代码的写法会造成 a 和 b 的属性都被修改了。大家在日常开发中肯定不想出现这种情况，所以都会用上一些手段去断开它们的引用连接。对于上述的数据结构来说，浅拷贝就…"}, {"id": "6844903944175484936", "title": "【译】Google 官方文章——如何去做code review", "desc": "作者: 也就是本次CL的开发者，原文中是以author来称开发者的。以老外的思维，意思是“CL的作者” cr(Code review)主要目的在于确保Google 的代码库代码质量越来越好。而所有相关的工具与流程皆是因应这个目的而生。为达到此目的，势必需要做出一连串的权衡与取舍…"}, {"id": "7000278152953987103", "title": "看一下 async/await 的实现原理", "desc": "javascript中的async/await着实解决了异步的痛点，在开发的时候也越来越离不开async/await的加持。最近在使用的时候突然想知道async/await以及Generator的中断"}, {"id": "6983951407640477726", "title": "微信开放能力接入", "desc": "微信开放能力接入，公众号、jssdk1.6.0版本、微信开发者工具，微信授权分为两类，主动授权和静默授权。区别大致如下"}, {"id": "6964413078922330126", "title": "从源码聊 postcss 和 babel 的 api 风格的不同", "desc": "postcss 和 babel 内部的流程都是啥，为什么 postcss 的api 调用链条是那样的，链式和集中式 api 风格都有什么优缺点。"}, {"id": "6988013808480419854", "title": "送你一个月亮和笑脸 | HTML5图形开发 从最基础开始学Canvas(一)：路径及基本图形绘制(线条、矩形和圆弧)", "desc": "canvas基于栅格(grid)和坐标空间完成图形的定位和长度的度量。canvas元素默认被网格所覆盖。通常来说网格中的一个单元相当于canvas元素中的一像素。栅格的起点为左上角（坐标为(0,0)）"}, {"id": "6994233558529212452", "title": "this指向 |  8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 特点 this永远指向一个对象。 this指向 在函数执行时确定。(执行上下文三大属性之一) 执行上下文概念可在往期文章 作用域与作用域链 "}, {"id": "6996202678170681351", "title": "细说JavaScript正则表达式（RegExp）", "desc": "在本文将解释 JavaScript 中的 RegExp 是什么、它的重要性、特殊字符、如何有效地创建和编写它们、主要用例以及它的不同属性和方法。"}, {"id": "6893320971462279175", "title": "温故知新：前端安全知多少", "desc": "Hello，AV8D～今天我们要分享的主题是前端Web安全。web安全的重要性不言而喻，是所有互联网企业都绕不开的话题。 在web前端领域，尽管浏览器已经在系统层面帮我们做了诸多的隔离和保护措施，但是网页代码开放式的特点和html、JS的语言特性使得黑客们依然有非常多的可乘之机…"}, {"id": "6844903665216520206", "title": "怎么实现一个3d翻书效果", "desc": "这种整页翻转的效果主要是做rotateY的动画，并结合一些CSS的3d属性实现。 主要是通过计算页面翻折过来的位置。 这两种原理上都不是很复杂，需要各个细节配合好，形成一个连贯的翻书动画。 我们先重点说一下第一种翻页效果的实现。 1. 基本布局 一个li.paper就表示一张纸…"}, {"id": "6987551621500633118", "title": "Node 系列 - 008 - ShellJS", "desc": "在工作中，你可能会碰到：Git 系列操作、关闭被占用的系统端口、删除指定文件/文件夹等……但是，对于这些操作你可能一时半会又忘记它的指令，或者它的指令太繁琐了，所以将这些内容装起来，岂不省事？"}, {"id": "7001012495573843999", "title": "判断 JavaScript 数据类型的方式", "desc": "🎯总结：typeof 操作符；instanceof 操作符；Object.prototype.toString.call() 方法。"}, {"id": "6968636129239105549", "title": "为什么说用 babel 编译 typescript 是更好的选择", "desc": "typescript 给 javascript 扩展了类型的语法和语义，让 js 代码达到了静态类型语言级别的类型安全，之前只能在运行时发现的类"}, {"id": "6844904143081996301", "title": "告别无聊的undefined判断, 让老vue-cli3支持🚀\"可选链\"等\"ES2020\"特性", "desc": "让老项目(基于vue-cli)支持ES新语法(处于试验阶段), 比如\"可选链\". 了解其他目前在实验阶段的ES新语法. 近期看到多个群中都在聊\"可选链\", 所以就把单位的老项目也开启了\"可选链\"功能, 使用了1个月后的感受就是: 再也不用写那么长的\"undefined\"判断了,…"}, {"id": "6857315310908506119", "title": "使用 localStorage 的最佳实践", "desc": "localStorage 是 HTML5 规范中作为持久化保存客户端数据的方案，localStorage 可以用于数据缓存，日志存储等应用场景。由于 localStorage 本身的一些特性： 使用好 localStorage 并没有那么简单，本文主要介绍其使用的一些最佳实践。…"}, {"id": "6924188714419634190", "title": "看懂此文，手写十种Promise！", "desc": "前言：这篇文章应该会和你见到的大部分手写Promise文章都不一样，文中不会讲到Promises/A+规范，也不会提到Promise.race / race等语法糖。在本文中，我会大量使用到面向对象的思维方式，并且只关注Promise的核心思想及其实现，相信在您认真看完之后，会…"}, {"id": "6844903873992196103", "title": "[译] 如何写出漂亮的 JavaScript 代码", "desc": "如何提高代码的可读性、复用性、扩展性。我们将从以下四个方面讨论： 可以用 ESLint 检测代码中未命名的常量。 既然创建了一个 car 对象，就没有必要把它的颜色命名为 carColor。 如果参数超过两个，建议使用 ES6 的解构语法，不用考虑参数的顺序。 这是一条在软件工…"}, {"id": "6935238528510984205", "title": "你的应用需要一个 “可取消的异步 HTTP 请求模块”", "desc": "异步 HTTP 请求在现代 web 应用中可以说是随处可见。为了更好的用户体验，05 年出现了 Ajax，支持不刷新页面实现局部更新。 Ajax 支持同步和异步两种方式，但是大家基本上只用异步方法，因为发送同步请求会让浏览器进入暂时性的假死状态，特别是请求需要处理大数据量、长时…"}, {"id": "7004046580105871391", "title": "图片裁剪cropperjs的使用", "desc": "------------------图片裁剪cropperjs的使用------------------"}, {"id": "6844903543397154824", "title": "B站的前端之路", "desc": "过去的开发模式中，我们采用了以后端为主的 MVC 架构方式。具体来说，每次项目评审后，前后端会先一起约定好接口，之后分别进行开发，开发完，前端需要把页面提供给后端，后端配置上数据，然后返回出来。正式基于这样的开发模式，导致了总工作量的增加，同时沟通和联调成本的消耗也十分显著。 …"}, {"id": "7002204948419051527", "title": "2021前端面试知识点总结之vue篇", "desc": "MVVM 和 MVC MVC M(Model)：模型，负责处理数据。 V(View)：视图，负责数据的展示。 C(Controller)：控制器，负责数据和视图之间的交互。"}, {"id": "6976078332165095438", "title": "面向过程与面向对象", "desc": "1.面向过程与面向对象 1.1面向过程 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。 1.2面向对象 面向对象是把事务分解成为一个"}, {"id": "6844903540960280583", "title": "一起来聊聊table组件的固定列 ", "desc": "现有Web页面上，table一般用于统计数据、列表书记等信息的展示。但是当table包含大量的信息需要列出展示时，往往对table添加滚动条来展示更多的数据。突然想到要研究下table组件也是因为最近碰到table数据大量展示的问题，寻觅了一些比较好的解决办法，就目前来说，个人…"}, {"id": "6844903573122351112", "title": "Weex BindingX 尝鲜", "desc": "三月初，阿里巴巴开源的一套基于 Weex、React Native 的富交互解决方案 「BindingX」。提供了一种称之为 「Expression Binding」 的机制可以在 Weex、React Native 上让手势等复杂交互操作以60fps的帧率流畅执行，而不会导致…"}, {"id": "6977626786184036382", "title": "如何在PC端使用WebRTC 拍摄静态照片", "desc": "一、业务场景 我们需要在PC端打开摄像头，捕获摄像头画面，并实现截图保存该画面。 二、代码实现 1.界面有两个主要的操作部分：流和捕获面板和演示面板,一个元素，它将接收来自 WebRTC 的流，一个用"}, {"id": "7000711555641770021", "title": "第 32 题：如何统计一个字符串出现最多的字母？", "desc": "直接上代码 ``` let str = 'apple'; let obj = {}; let number = 0; let activeIndex = ''; [...str].map(key"}, {"id": "6844904146840059918", "title": "JS核心理论之《React Native原理浅析》", "desc": "React Native是一个优秀的跨平台移动应用解决方案，可以让你轻松地使用React（和JavaScript）来创建native移动应用程序。 React Native 需要使用 JavaScript 引擎执行 JavaScript 代码，包括 JavaScriptCore…"}, {"id": "6844903678906728456", "title": "不到50行代码实现一个能对请求并发数做限制的通用RequestDecorator", "desc": "在开发中，我们可能会遇到一些对异步请求数做并发量限制的场景，比如说微信小程序的request并发最多为5个，又或者我们需要做一些批量处理的工作，可是我们又不想同时对服务器发出太多请求（可能会对服务器造成比较大的压力）。这个时候我们就可以对请求并发数进行限制，并且使用排队机制让请…"}, {"id": "6844904047351169038", "title": "介绍下 Set、Map、WeakSet 和 WeakMap 的区别？", "desc": "题目描述：介绍下Set、Map、WeakSet和WeakMap的区别？解题：思路一：Set和Map主要的应用场景在于数据重组和数据储存Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构1."}, {"id": "6998425471981453349", "title": "第 28 题：如何理解计数排序？", "desc": "## 什么是计数排序？ 计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数 "}, {"id": "6998426810698432549", "title": "「队列」leetcode 933.最近的请求次数（简单）", "desc": "一、了解题目 写一个 RecentCounter 类来计算特定时间范围内最近的请求。 请你实现 RecentCounter 类： RecentCounter()"}, {"id": "6989611756083494948", "title": "《红宝书》第8章——类", "desc": "类 刚开始学到“类”的时候还是有点懵懵懂懂，一直在思考，类到底是什么呢？原来，类其实是ECMAScript中新的基础性语法糖结构，实际上使用的都是一些原型和构造函数的概念。接下来开始对类的总结~"}, {"id": "6844904068993777677", "title": "如何实现 lodash.get 函数及使用可选链操作简化取值", "desc": "本篇文章简介 lodash.get 函数的实现以及可替代的可选链操作，源于我自己的仓库 面试每日一题，其中记录了关于前端进阶及工程化的各种问题。心灵鸡汤之所以被抵制就是因为只有鸡汤没有勺子，别人也开始问我的仓库有没有答案了。因此我将写一大堆文章来捎带回答这些问题 ---- 如果…"}, {"id": "6991247175963377695", "title": "对象的动态条件属性与数组的动态条件元素", "desc": "对象的动态条件属性与数组的动态条件元素 1. 对象的动态条件属性 长话短说上代码： b的结果将会是{ c: 'c', d: 'd' }。 分析一下这个代码，先说 && 运算符。 &&也可以算作一种短路"}, {"id": "6844903541887205389", "title": "CSS3的动画属性", "desc": "transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。 transition主要包含四个属性值：执行变换的属性：transition-property，变换延续的…"}, {"id": "6917501960371470349", "title": "[JS小技巧] JS 中的!与!!用法", "desc": "例如：判断变量a为非空、未定义或者非空字符串才能执行方法提的内容。 如果a是true，那么b不管是true还是false，都返回true。因此不用判断b了，这个时候刚好判断到a，因此返回a。 如果a是false，那么就要判断b，如果b是true，那么返回true，如果b是fal…"}, {"id": "6900431244652183565", "title": "分享《构建自动接收派发机器人》", "desc": "村庄M由11个地点组成, 其间共有14条道路。我们可以用如下道路数组来描述: 村里的道路组成了一张图。这张图就是机器人要行走的世界: 字符串数组不太容易使用, 因此我们按照起点终点将道路列表转化为 [start, end]的形式。 那么, roads经过buildGraph 之…"}, {"id": "6981017147304575006", "title": "【学习笔记】JavaScript字符串方法总结", "desc": "前言 最近，针对JavaScript中的字符串方法进行了复习，为了避免自己忘记并能够及时回顾，特此总结。"}, {"id": "6844903993567608840", "title": "声明式UI框架在类小程序运行的原理", "desc": "近年新出的UI框架，包括React，Flutter， SwiftUI等在内都采用了声明式的方法构建UI，其中基于React的RN，Flutter都是多端框架，可以一套代码多端复用。但是在国内“端”还有一个小程序，所以在国内的跨端，必须要兼顾到小程序。 本文将探讨一种将声明式UI…"}, {"id": "6844903549273391117", "title": "ES6函数与Lambda演算", "desc": "造了一个轮子，根据GitHub项目地址，生成项目目录树，直观的展现项目结构，以便于介绍项目。欢迎Star。 应用涉及到了展现目录树，实现方法不可或缺的一定是递归遍历。进而开启了我对lambda演算的探索发现之旅。 本次乘坐的是 斐波那契 号邮轮，下面会涉及到一些 JavaScr…"}, {"id": "6844903704123211783", "title": "开发者需要了解的nodejs中require的机制", "desc": "可以认为require模块是一个command，module模块是所需模块的organizer。 require模块暴露出一个函数（就像上面看到的那样）。当require()函数传入一个path参数的时候，node会依次执行如下步骤： Resolving : 找到path的绝对…"}, {"id": "7003281202706661389", "title": "this的行为解析", "desc": "this的默认绑定规则、隐式绑定、显示绑定、new绑定行为，this绑定优先级，箭头函数this绑定规则 call, apply, bind, new"}, {"id": "6989533954034368520", "title": "玩转自动化工具开发", "desc": "在日常工作当中除了要实现业务功能外, 往往还会遇到一些需要进行自动化处理的场景。大多数情况下我们都会采用脚本的方式进行。那么作为前端工程师，如果你要用node.js去做一些自动化的工作，就需要掌握.."}, {"id": "7000287525247926279", "title": "^ | & ~  >> _ << ** ?? 这些 JS 运算符，试试你会几个", "desc": "标题的这些星星点点，基本都是 JavaScript 运算符。如果能看懂的话，我就不说话了，因为你就是传说中的大神哇~"}, {"id": "6954902440915238920", "title": "JavaScript中几个优雅的运算符使用技巧", "desc": "ECMAScript发展进程中，会有很多功能的更新，比如销毁，箭头功能，模块，它们极大的改变JavaScript编写方式，可能有些人喜欢，有些人不喜欢，但像每个新功能一样，我们最终会习惯它们。新版本的"}, {"id": "6955636911214067720", "title": "「react进阶」一文吃透react事件系统原理", "desc": "一 前言 今天我们来一起探讨一下React事件原理，这篇文章，我尽量用通俗简洁的方式，把React事件系统讲的明明白白。 我们讲的react版本是16.13.1 , v17之后react对于事件系统会"}, {"id": "7002038414182711310", "title": "【笔记】之前遇到的两个小问题和解答", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 前言 前段时间搭建一个网站，遇到了几个问题，用此文记录下来，避免下次又有问题！ 问"}, {"id": "6930973929452339213", "title": "JavaScript 中哪一种循环最快呢？", "desc": "了解哪一种 for 循环或迭代器适合我们的需求，防止我们犯下一些影响应用性能的低级错误。 JavaScript 是 Web 开发领域的“常青树”。无论是 JavaScript 框架（如 Node.js、React、Angular、Vue 等），还是原生 JavaScript，都…"}, {"id": "7006791636680179720", "title": "理解“闭包”", "desc": "本文研究了离散数学与函数式编程中“闭包”的概念、原理与关系，并侧重讲解函数式编程的“闭包”，对细节、具体语言实现、类似技术等方面都有阐述。最后，提出了自己对“闭包”这个概念的认识与理解。"}, {"id": "7003578237595058207", "title": "压榨计算机的性能：浏览器和 Node.js 的异步计算", "desc": "都说 Node.js 可以实现高性能的服务器，那什么是高性能呢？ 所有的软件代码最终都是通过 CPU 来跑的，能不能把 CPU 高效利用起来是区分性能高低的标志，也就是说不能让它空转。 那什么时候会空"}, {"id": "6994241743688302600", "title": "keep-alive 如何清除缓存", "desc": "这是我参与8月更文挑战的第N天，活动详情查看：8月更文挑战”（已经更文1天） 开篇场景 我的项目是前后端没有分离的，技术栈是layui+vue+jq,vue是我后面引入的，为了能够更好的组件化，将页面"}, {"id": "7002454069407121438", "title": "快速了解无障碍", "desc": "以图的形式汇总Vue相关知识点，一来方便快速记忆，二来方便以后快速复习。本文是关于无障碍，来了解一下吧~🙆"}, {"id": "6986433541319950373", "title": "我的掘金前端周刊 第四周 7月12日-7月18日", "desc": "收集一周之内，优秀的前端文章，以便自己和有类似需求的同志，能更高效的学习和成长。 如有遗漏，敬请谅解。"}, {"id": "7002412093525721124", "title": "AJAX的POST请求", "desc": "经过上文的了解，我们已经了解了AJAX，并且封装了GET请求。那么POST请求是不是也得完善上去呢？本节来看AJAX的POST请求"}, {"id": "7006500106522329101", "title": "企业级单点登录如何实现？", "desc": "企业里也许会拥有多个一级域名，为了让用户使用体验更好，无需在每个站点都登录一遍，故产生了单点登录的需求。一个站点登录，其他站点同步登录状态，站点间跳转更加流畅。"}, {"id": "6844904191203213326", "title": "多年 Git 使用心得 & 常见问题整理", "desc": "显示的是一个 HEAD 指向发生改变的时间列表。在你切换分支、用 git commit 进行提交、以及用 git reset 撤销 commit 时，HEAD 指向会改变，但当你进行 git chec"}, {"id": "6992743763844005902", "title": "yo!使用javascript写shell脚本 一", "desc": "本文主要总结一下使用nodejs写脚本的流程及一些常见场景。 一般来说，我们都是用shell写脚本的，但是shell的语法比较难记，也不太好用，所以推荐前端程序员使用javascript来写脚本。 注"}, {"id": "7007016129587740679", "title": "边学边译JS工作机制--40.数组和哈希表", "desc": "这一章我们将讨论数据结构的运作，主要是数组和哈希表。我们会对比他们的不同，以及使用他们解决一些算法问题。 什么是数据结构 数据结构是很多值的集合，由算法来处理它们。 一句老话说得好： 数据结构+算法 "}, {"id": "7003172998228230175", "title": "你还在一行行手写组件/API代码？", "desc": "前言 近些年来lowcode、nocode是一个非常火热的话题，各大厂各团队也都开发了很多类似的产品。从可视化搭建到可视化逻辑编排再到前端智能化，这些对前端的研发效率带来了革命性的提升。 很多前端同学"}, {"id": "6963241181358587911", "title": "从网文到印刷：《JavaScript 二十年》出版啦！", "desc": "由 JS 之父与 ES6 首席作者联合出品，中文版 GitHub 获得 2.6k star 的《JavaScript 二十年》已经达到了「出版级」的质量，纸质版正式上架啦！"}, {"id": "6969206858179411982", "title": "一个让 git clone 提速几十倍的小技巧", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战。 不知道大家有没有遇到比较大的项目，git clone 很慢很慢，甚至会失败的那种。大家会怎么处理的呢？ 可能会考虑换一个下载源，可能会通过一些手"}, {"id": "6844903704160649229", "title": "[译] Google 工程师提升网页性能的新策略：空闲执行，紧急优先", "desc": "几周前，我开始查看我网站的一些性能指标。具体来说，我想看看我的网站在最新的性能指标 —— 首次输入延迟 （FID）上的表现如何。 我的网站只是一个博客（并没有运行很多的 JavaScript），所以我原本预期会得到相当不错的结果。 用户一般对于小于 100 毫秒的输入延迟没有感…"}, {"id": "6991256050309529636", "title": "JavaScript JSON 与 AJAX", "desc": "本文介绍 JSON 的概念和基本格式、JSON 与对象的转换、原生 AJAX 的使用、JSONP 解决跨域的方法以及 AJAX 和 JSONP 工具函数的封装"}, {"id": "6881897639001751560", "title": "前端装饰器模式快闪", "desc": "狸猫换太子装饰器模式咱们闲言少叙，言归正传。装饰器模式是设计模式的一种，是为已有功能动态的添加更多功能的一种方式。重点体现了设计模式六大原则之中的单一职责原则和开闭原则。单一职责很好理解，就是专心，就"}, {"id": "6965801247811043341", "title": "HBuilderX配置自动格式化，统一代码规范", "desc": "1、前言   团队协作是稍具规模公司必不可少的问题，也是项目开发进度保证的重要基石。只有团队协作，各自的功力发挥到极致，才能保证团队生产力最大化。随着团队增加，统一的代码风格就越来越重要，为此使用 H"}, {"id": "6844903968443891720", "title": "【THE LAST TIME】this：call、apply、bind", "desc": "【THE LAST TIME】一直是我想写的一个系列，旨在厚积薄发，重温前端。 也是给自己的查缺补漏和技术分享。 欢迎大家多多评论指点吐槽。 讲道理，这篇文章有些拿捏不好尺度。准确的说，这篇文章讲解的内容基本算是基础的基础了，但是往往这种基础类的文章很难在啰嗦和详细中把持好。文…"}, {"id": "6894954382245232654", "title": "【JavaScript】关于原型的知识点你都吃透了吗？（超详细！）", "desc": "盲生，你发现了华点！我们来慢慢的展开解释一下，故事就先从prototype对象说起吧。 可构造的函数被定义时，默认会创建一个prototype对象，而且这个对象上还有一个constructor属性保存着对函数本身的引用。 JavaScript中的对象有一个特殊的[[protot…"}, {"id": "6844903983438381069", "title": "JavaScript进阶-执行上下文(理解执行上下文一篇就够了)", "desc": "在编程这个行业中总是能听到这个词执行上下文。那么什么叫执行上下文呢？ 首先我们来介绍什么是“执行上下文”. 举个例子，生活中，相同的话在不同的场合说可能会有不同的意思，而这个说话的场合就是我们说话的语境。 同样对应在编程中， 对程序语言进行“解读”的时候，也必须在特定的语境中，…"}, {"id": "6844903734384787464", "title": "《你不知道的 JavaScript》全卷读书笔记", "desc": "持续更新中,欢迎star传送门上卷第一章作用域和闭包第二章this全面解析第三章对象第四章混合对象\"类\"第五章原型中卷下卷"}, {"id": "6844904121833619469", "title": "IntersectionObserver API 应用总结", "desc": "今天主要给大家分享下本人在日常开发中关于 IntersectionObserver 的一些实际应用，关于 API 原理以及介绍大家可以阅读 Intersection Observer API - MDN 和 IntersectionObserver API 使用教程。 使用 I…"}, {"id": "6891250149374558215", "title": "javascript贪吃蛇案例", "desc": "效果图：https://user-gold-cdn.xitu.io/2020/4/8/171580b93458fdfb?imageslim布局：snake.html样式：snake.css脚本：sna"}, {"id": "6996667853478821896", "title": "var let const 关键字区别", "desc": "var声明的变量为函数作用域 let、const声明的变量为块级作用域 变量提升 var声明的变量存在变量提升（将变量提升到当前作"}, {"id": "6844903601513447437", "title": "Vue + better-scroll 实现移动端字母索引导航", "desc": "vue + better-scroll 实现移动端歌手列表字母索引导航。算是一个学习笔记吧，写个笔记让自己了解的更加深入一点。 Demo： list-view，使用 chrome 手机模式查看。换成手机模式之后，不能滑动的话，刷新一下就 OK 了。 因为用到的是 vue-cli…"}, {"id": "6844903939683385351", "title": "关于 CSS margin，一些让你模糊的点", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 当我们学习CSS时，我们大多数人学到的第一件事是CSS中盒子的各个部分的细节，这部分通过叫做 CSS盒、模型。“盒模型”中的元素之一是margin，即盒子周围的透明区域，它会将其他元素从盒子内容中推开。 CSS…"}, {"id": "6844903640893751304", "title": "你可能从未听说过这15个HTML元素方法！", "desc": "虽然现代化的 web 开发更多地依赖各种 MVC 框架，但开发者仍需要熟练掌握 HTML 与 DOM 方面的基础知识。不过，即使是有着多年经验的前端开发者，也会遇到一些不明所以的情况。本文首先将为初学者介绍 HTML 与 DOM 的基本常识，随后为大家介绍 15 个比较冷门的 …"}, {"id": "6959741480537686024", "title": " History 对象", "desc": "window.history属性指向 History 对象，它表示当前窗口的浏览历史。 History 对象保存了当前窗口访问过的所有页面网址。"}, {"id": "6844903920792240142", "title": "apply、call、bind", "desc": "bind是偏函数型，返回对应函数，便于稍后调用；apply、call则是立即调用 。 call 立即调用，需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。例如：func.call(this, arg1, arg2);。（非严格模式下）当参数数量不确定时，函数内部…"}, {"id": "6964001169534517261", "title": "打字母游戏 系列之--游戏输入", "desc": "在上一篇中，已经介绍了游戏、游戏的更新循环和输出，此篇来讨论游戏的输入。 我们的打字母游戏的输入方式..."}, {"id": "6988897840843980837", "title": "JS--对象的属性以及ES6下对象的语法糖", "desc": "对象的内容是一组键值对，值可以是数据或者函数。 属性的类型有数据属性和访问器属性。本文对于合并对象，对象相等判定，增强对象语法，对象结构等内容给出了一些例子"}, {"id": "6988884014476034084", "title": "JS个人学习(4)——位操作符及其使用场景", "desc": "本文是对于JavaScript中位操作符的一些理解记录，其中涉及到的一些二进制知识，可以参考：JS个人学习(3)——二进制基础 简介 JS中的所有数值都是以IEEE 754 64位格式存储，但是位操作"}, {"id": "6988033273054101512", "title": "说说 JS 运行机制", "desc": "假如我是路边卖水果摊的小老板，遇到这个问题了，想尽快寻找答案。 靠！小老板啥都不知道，只看懂了前面 “说说” 两个字，还能怎么办？百度吧 1. 先查一下什么是 JS。 百度结果，小老板懂了，哦！JS "}, {"id": "6905957978001244173", "title": "Postman 工作流", "desc": "Postman 是前端圈主流的接口测试工具，相信很多人都用过，但大部分开发者只用到了最基本的功能，即请求和响应，然而 Postman 提供给开发者的不仅仅是这些，下图是 Postman 的工作流，可以看到，在 request 的前面有前置请求脚本（pre-request scr…"}, {"id": "6992887127541284871", "title": "elasticsearch--Searchkit -- 搜索引擎解决方案 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 之前写公司项目用到 elasticsearch，遇到一些问题整理如下： 项目依赖的是 Elasticsearch"}, {"id": "6844904032306200590", "title": "20多种数组去重？看懂这4种，全都不在话下", "desc": "我之前还写过两个小工具，希望可以帮助到大家，一起学习一起进步。"}, {"id": "6992163896555470885", "title": "Next.js 的三种渲染方式", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 前言 Next.js 是什么 NextJS 是一个用于生产环境的 React 框架，它可以提供生产环境所需的所有功能，开发体验极佳。 提供的"}, {"id": "6976082120108163086", "title": "this到底指向什么？记住这4点就够了！", "desc": "本文主要在于掌握this在JavaScript的指向，了解this是在什么时候确定的，谁决定了this的指向~"}, {"id": "6997456084147372063", "title": "JavaScript 面向对象", "desc": "一、面向对象和面向过程的对比 二、ES6中的类和对象 面向对象的思维特点: 抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板) 对类进行实例化, 获取类的对象 2.1 对象 在 JavaSc"}, {"id": "6970098656191971364", "title": "JS 原生方法原理探究（五）：如何实现 instanceof？", "desc": "--这是JS 原生方法原理探究系列的第五篇文章。本文会介绍如何实现 `instanceof` 方法--"}, {"id": "6989090239964790797", "title": "[TC39/ecma262] Import 的循环引用记录", "desc": "Import 的循环引用记录 文档阅读路线 step1 https://tc39.es/ecma262/multipage/ecmascript-language-scripts-and-module"}, {"id": "6906022950990774286", "title": "如何学习-我是这样学JS理论！[不看后悔篇]", "desc": "JS基础对于我们前端开发的重要性不言而知~于是，我们都会选择去阅读一些书籍来充实自己。那当我们读完那些理论基础之后，你是否依旧迷茫，还是豁然开朗？ 我想：有了理论基础作为根据的时候，应该多去思考一些代码的结果来实践这些理论。 就比如解决bug一样，你总得先知道出现bug的原因，…"}, {"id": "6937142012718088205", "title": "0.1+0.2!=0.3 的原因你还记得吗？", "desc": "随着网络的快速发展，线上消费已经成为主流，与大众的生活融为一体。作为一个程序猿，在保证消费者隐私安全的情况下，金额的准确计算成了非常重要的一环。对于我们来说，数字的加减乘除的规则肯定手到擒来，但是计算机的加减乘除呢，你了解它的计算规则吗？ 这样的例子其实有很多，在这里小编就不一…"}, {"id": "6992381057890779143", "title": "JavaScript中 函数闭包详解", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 1. 变量作用域 理解闭包，首先必须理解变量作用域，在ECMAScript5的标准中有两种作用域：全局作用域和函数作用域。 两者的调用关系是"}, {"id": "6999024847833530399", "title": "「双指针」leetcode 165.比较版本号（中等）", "desc": "一、了解题目 附上原题链接：165. 比较版本号 给你两个版本号 version1 和 version2 ，请你比较它们。 版本号由一个或多个修订号组成，各修订号由一个 '.' 连接。每个修订号由 多"}, {"id": "6970547194013155342", "title": "JavaScript 实现四种重要的设计模式", "desc": "什么是设计模式？ 设计模式就是代码问题的一套解决方案，或者说，解决特定问题的“最佳实践”。 常见的设计模式大概有23种，本文会使用JS实现以下四种设计模式： 对象、组合模式、适配器模式、装饰者模式。"}, {"id": "6943390052965679112", "title": "关于加载状态的思考和尝试", "desc": "以react为例，最简单的loading大概是这样的,定义state状态，通过切换state状态来改变加载UI。 通过使用延迟loading消失的时间，如：不管请求合适请求成功，都延迟500ms再消失loading。这样也就避免了闪烁的问题，但是在网络条件好的情况部分接口大概2…"}, {"id": "6938358811908374559", "title": "[译] JavaScript Temporal API —— Date API 问题的一个解决方案｜技术点评", "desc": "JavaScript 的日期处理 API 比较糟糕，因为它是直接对 Java 的 Date 类 进行复制来实现了 Date 对象，而 Java 维护者最终弃用了许多 Date 类的方法，并于 1997 年创建了 Calendar 类以取代它。 但由于目前 Date API 被广…"}, {"id": "6941984549396021255", "title": "前端面试系列-JavaScript中的Event Loop(事件循环)机制(含图解)", "desc": "javascript是一门单线程的非阻塞的脚本语言。 单线程：javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。 单线程的原因：浏览器中，我们需要进行各种各样的dom操作。如果javascript是多线程的，那么当两个线程同时对dom进行一项操作，例如…"}, {"id": "6968342588881403940", "title": "你应该熟练掌握的JavaScript类型转换", "desc": "数据转换方式共分为两类：显示类型转换和隐式类型转换，掌握并且熟练的使用类型转换不仅能提升我们开发的效率，还能提高我们找bug的效率"}, {"id": "6854573210533363719", "title": "微前端自检清单", "desc": "最近在做公司微前端，整理了一份微前端搭建清单，如果你正在考虑是否要做微前端，不妨做个参考。 第一步，我们需要进行需求分析，以便真正清楚我们需要解决的问题是什么。 前两个需求是典型的业务需求，它的核心在于解决公司的业务问题，对于这一类需求，通常技术难度都不大，开发者只需要按照原型…"}, {"id": "6971318737668407333", "title": "前端架构之Nginx （二）", "desc": "Linux 版本安装 关于 Nginx 的安装，分为在 Windows 平台和 Linux 平台安装，Windows 版本的 Nginx 服务器在效率上要比 Linux 版本的 Nginx 服务器差"}, {"id": "6974036651588714510", "title": "高性能 JavaScriptの七 -- 编程实践小技巧", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 随着web开发者对JavaScript和浏览器的推动，在JavaScript中出现了一些十分特别的模式，有精华也有糟粕（对js性能上来说的）"}, {"id": "6991578712110006302", "title": "《JavaScript高级程序设计（第四版）》精读（二）第3章 | 8月更文挑战", "desc": "第三章：语言基础 3.1 语法 3.1.1 区分大小写 例如：test和Test是两个不同的变量 注意：typeof是关键字，不能做函数名，而Typeof可以 3.1.2 标识符 第一个字符必须是一个"}, {"id": "6998856870869860383", "title": "【多种、全 | 10余种】js 数组去重，来瞅瞅是不是你用到了那个", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 数组去重 第一种（new Set && Array.from） new Set() 和 Array.from() 这个是我最常用的 优点：使"}, {"id": "6844903838449664013", "title": "灵活运用JS开发技巧", "desc": "何为技巧，意指表现在文学、工艺、体育等方面的巧妙技能。代码作为一门现代高级工艺，推动着人类科学技术的发展，同时犹如文字一样承托着人类文化的进步。 每写好一篇文章，都会使用大量的写作技巧。烘托、渲染、悬念、铺垫、照应、伏笔、联想、想象、抑扬结合、点面结合、动静结合、叙议结合、情景…"}, {"id": "6999838407409025037", "title": "（建议收藏） React Hooks 源码解毒", "desc": "干货。旨在进阶的小伙伴更快一步突破。 同时也希望帮助大家面试…… 另外，可爱吧（咦，最近换画风了。。）"}, {"id": "6993096471792844813", "title": "图解算法 | LeetCode第 70 题爬楼梯问题", "desc": "假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？"}, {"id": "6996163760628957191", "title": "函数柯里化到底是什么？有什么好处？进来跟我一起揭秘呀", "desc": "这是我参与 8 月更文挑战的第 5 天，活动详情查看： 8月更文挑战 柯里化：把接收多个参数的函数变换成接收一个单一参数的函数（单一参数为多个参数中的第一个）并且返回接受余下的参数而且返回结果的新函数"}, {"id": "6850037270729359367", "title": "还在看那些老掉牙的性能优化文章么？这些最新性能指标了解下", "desc": "性能优化相关的文章其实网上挺多，但是大部分都是在讲如何优化性能，也就是讲方法论。但是在实际工作中，如何量化性能优化也是相当重要的一环。今天本文会介绍谷歌提倡的七个用户体验指标（也可以认为是性能指标），每个指标分别根据以下几点讲解： 首次绘制，FP（First Paint），这个…"}, {"id": "6844903705058213896", "title": "JavaScript 复杂判断的更优雅写法", "desc": "我们编写js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂，那么如何更优雅的写判断逻辑，本文带你试一下。 嗯，这样看起来…"}, {"id": "6999971119180546062", "title": "HTML5中的DOM扩展（三）插入标记", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 今天我们说一下插入标记，我们熟悉的插入有innerHTML，其实还有几种和他类似的方法，我们展开说一下。 插入标记 我们之前用的api大多"}, {"id": "6974573181356998669", "title": "宝啊～谈谈Tapable", "desc": "tapable 是一个类似于 Node.js 中的 EventEmitter 的库，但更专注于自定义事件的触发和处理。webpack 通过 tapable 将实现与流程解耦。"}, {"id": "7006232342398238733", "title": "JavaScript 中 new 的实现原理", "desc": "JavaScript 中 new 关键词的作用就是执行构造函数，然后返回一个实例对象；在 new 的过程中，根据构造函数的定义，来确定是否需要传递参数。"}, {"id": "6844904197675024391", "title": "图片处理不用愁，给你十个小帮手", "desc": "本文阿宝哥会为小伙伴们隆重介绍用于图片处理的十个 「“小帮手”」，他们各个身怀绝技，拥有模糊、压缩、裁剪、旋转、合成、比对等技能。相信认识他们之后，你将能够轻松应对大多数的图片处理场景。 不过在介绍 「“小帮手”」 前，阿宝哥会先介绍一些图片相关的基础知识。此外，为了让小伙伴们…"}, {"id": "7005850465854291999", "title": "ES6 | 块级作用域中函数声明后，产生的微妙变化？", "desc": "首先提出一个问题： Es6之前有块级作用域吗？ 当然有, { } 就是一个块级作用域 那么来看以下代码： 它的输出结果是： 里面, 2 外面, 1 是不是很惊讶，我们现在逐步拆解，来分析函数声明在块级"}, {"id": "7004249113449463844", "title": "JavaScript 中什么情况下会返回 undefined ", "desc": "1、访问声明，但是没有初始化的变量 2、访问不存在的属性 3、访问函数的参数没有被显式的传递值 4、访问任何被设置为 undefined 值的变量 5、没有定义 return 的函数隐式返回..."}, {"id": "7000392227893542919", "title": "抠一抠 事件循环机制 💗 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前言 拆解实现 Promise 及其周边 | 8月更文挑战 文中大量聊到关于宏任务和微任务的知识点，其实这和事件循环机制息息相关。本文也将和"}, {"id": "6844904178305728519", "title": "这些神仙代码库值得每一个前端开发者收藏", "desc": "经常会有小伙伴让推荐好的代码库，最近看到了这篇文章，都是非常棒的代码库，供得大家学习参考。 手头有大量的资源📚总是一件很棒的事。 作为一个码农，我们需要专注于功能和最佳实践，而不是一遍遍地编写样板代码。消除无用功，投入时间学习使用正确的工具或者懂得使用有用的资源可以极大的帮助…"}, {"id": "6844903821429178382", "title": "【周刊-2】三年大厂面试官-前端面试题（偏难）", "desc": "在大厂工作了6年，当了3年的前端面试官，把大厂常问的面试题与答案汇总在我的Github中。希望对大家有所帮助，助力大家进入自己理想的企业。 如果你在大厂面试的时候遇到了什么不懂的问题，欢迎给我提issue，我会把答案和考点都列出来，公布在下一期的面试周刊里。 大家如果去大厂面试…"}, {"id": "7001637803381489694", "title": "前端工程师如何用docker搭建自己的Mcok服务器", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战。 一、搭建mock服务器的必要性 在公司的实际开发业务中，无论是PC端、H5端、还是后台管理系统的前端部分，大多采用前后端分离的开发模式。"}, {"id": "7000984701435379719", "title": "探讨Date及其常用方法", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 我们知道js自带了众多接口，Date也是其中之一 Date用于表示日期和时间，通过new Date()可以创建日期对象；Date 对象一旦"}, {"id": "6960508857785417741", "title": "🔥「深入本质」临时死区？哇哦，好中二的名字，啥玩意？", "desc": "欢迎大家来到\"深入本质\"系列，Blue在这个系列中将带领大家一起挖掘代码背后的本质，一窥潜藏在代码背后作者的思想与意图，体会本质之下的精巧构思与设计之美 临时死区（Temporal Dead Zone"}, {"id": "6844904128104103949", "title": "JavaScript 优雅使用", "desc": "如上所说，假值返回false,真值返回true。 当undefined被放在在function函数内，我们把它当成一个局部变量，它是可以赋上值，下面我们来试试。 先声明一个变量a，赋值为undefined，接下来我们用void 0来判断一下。 第二个打乱的方法同样是遵循sort…"}, {"id": "6999174697728344078", "title": "setTimeout 放入消息队列的时机", "desc": "在遇到 setTimeout 代码的时候就立即放入任务队列等到定时时间到了再执行回调 还是 等到定时结束后再将回调放入任务队列"}, {"id": "6844904082285527053", "title": "有意思的异步校验async-validator", "desc": "async-validator 是个纯 js 库，可以对数据进行异步校验。async-validator 是基于早期的 async-validate 进行修改的，但是早期出现的 async-validate 并没有得到更多的人使用，反而基于它做了修改的 async-valida…"}, {"id": "6844903810821783565", "title": "【JS迷你书】我的 JavaScript 世界观", "desc": "我们都生活在主观的世界里，但真实世界却是个复杂系统。 对于一个非线性系统来说，用任何线性思维去理解都会所偏颇。 用《失控》的观点来说，对于非线性系统，你只有运行起来才知道它具体会是什么。 《好好学习》一书中，一个重要假设就是：复杂现象背后都是由几个简单的规律所主导的。 个人认为…"}, {"id": "6844903721613131789", "title": "跨域资源共享——CORS", "desc": "跨域资源共享（Cross-Origin Resource Sharing）是一种机制，它使用额外的 HTTP 头部告诉浏览器可以让一个web应用进行跨域资源请求。 No event listeners are registered on any `XMLHttpRequestU…"}, {"id": "6844903604394934279", "title": "滑向未来（现代 JavaScript 与 CSS 滚动实现指南）", "desc": "一些（网站）滚动的效果是如此令人着迷但你却不知该如何实现，本文将为你揭开它们的神秘面纱。我们将基于最新的技术与规范为你介绍最新的 JavaScript 与 CSS 特性，（当你付诸实践时，）将使你的页面滚动更平滑、美观且性能更好。 大多数的网页的内容都无法在一屏内全部展现，因而…"}, {"id": "6917135315576553479", "title": "【LeetCode】从两数之和到四数之和（JS实现）", "desc": "背景从零开始的leetcode之路，刚刚开始就遇到了之前常常遇到的问题，两数之和，我也去回顾了我在一年之前写的代码。结果是毫无疑问的暴力破解。​直接双重循环解决，执行用时也仅仅超过了11%的提交记录，"}, {"id": "6964635223531192333", "title": "五.JS第一座大山:堆栈内存和闭包作用域", "desc": "本文中一共讲了五个专题：词法解析和变量提升、堆栈内存及垃圾回收机制、作用域和作用域、闭包及其两大作用：保护/保存、以及关于这些内容的BAT经典面试题.....本文对第五部分高阶编程没有做总结"}, {"id": "6844903785689546760", "title": "用最基础的方法讲解 Redux 实现原理 ", "desc": "阅主题，通过deliver发布主题事件的方式被通知。就和用户订阅微信公众号道理一样，只要发布，用户就能接收到最新的内容。 这个发布订阅通过 addSubscriber 来储存订阅者（方法fn），当通过调用 deliver 来改变数据的时候，就会自动遍历 addSubscribe…"}, {"id": "6992958592923992077", "title": "手写一个array.reduce()方法", "desc": "过去有很长一段时间，我一直很难理解 reduce() 这个方法的具体用法，平时也很少用到它。事实上，如果你能真正了解它的话，其实在很多地方我们都可以用得上，那么今天我们就来简单手写实现一下吧"}, {"id": "6844903825388601352", "title": "JS MODULE 大战", "desc": "JS本身是一个多才多艺的语言，一个可以用自己编译自己的自由度极高的语言。正因为这份自由，出现了天花乱坠的规范与框架们，其中最基础的一块便是Module。 JS是一个自由度极高的语言，即使没有模块的概念。也可以通过IIFE，new一个对象来实现类似与模块的概念。也可以实现可复用，…"}, {"id": "6933962736111976461", "title": "JS系列 · 函数对象", "desc": "如果有一组数据，松散的储存不利于使用，存入数组中受下标限制，切有固定的顺序。而对象中可以自定义储存一系列无序的相关数据。 现实生活中，具体的某个事物就是对象，一个具体的对象就会有行为和特征。 在JS中，对象就是对现实事物的抽象。JS 中的对象是无序属性的集合。 属性值V：任意数…"}, {"id": "6999081761195950116", "title": "ES6：generator", "desc": "generator、Iterator、promise&（async/await）关系 generator 实现 执行next传递值，可以把传递值作为上一次yield后的结果，但是yield后面跟的值是"}, {"id": "6980163879380729864", "title": "promise-async-await异步编程", "desc": "介绍前端promise异步编程，从异步同步=>阻塞非阻塞=>事件循环机制=>callback回调=>promise=>Generator=>async"}, {"id": "6844903672636243976", "title": "Vue项目数据动态过滤实践", "desc": "这个问题是在下在做一个Vue项目中遇到的实际场景，这里记录一下我遇到问题之后的思考和最后怎么解决的(老年程序员记性不好 -。-)，过程中会涉及到一些Vue源码的概念比如 $mount、render watcher 等，如果不太了解的话可以瞅瞅 Vue源码阅读系列文章 ~ 1. …"}, {"id": "6885120726039265293", "title": "一文搞懂JS系列（五）之闭包应用-防抖，节流", "desc": "了解防抖和节流之间的区别，以及如何自己实现防抖和节流，实现防抖和节流的立即执行和非立即执行的实现方式"}, {"id": "6844903608715067400", "title": "手把手实战react + storybook组件库", "desc": "在UI组件库的开发过程中，如何方便的展示组件，测试组件，编写文档呢？storybook就提供了这样一种工具，利用它我们可以更方便地进行UI组件开发。最近一直在研究react，react和storybook的碰撞会是怎么样的呢。下面将从零开始，运用storybook手把手撸一个r…"}, {"id": "6980236582393495589", "title": "vue-html5-editor深入研究和拓展", "desc": "vue-html5-editor是一款拓展性特别好，已经灵活性特别强的富文本编辑器，他不仅能实现pc端，以及移动端和钉钉方面的编辑工作，还能实现其他附加功能已实现产品方面各种各样的需求"}, {"id": "6844904084395261965", "title": "本周总结请查收(内附21道前端面试题)", "desc": "本周发起了一个100天前端进阶\b计划，每天一个\b\b知识点，\b搞明白背后的原理，这是第一周的总结，请注意查收。 CommonJs模块输出的\b是一个值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。 ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对…"}, {"id": "6969441426467717134", "title": "深入了解 javascript 中的 new 操作符", "desc": "深入了解 javascript 中的 new 操作符new 操作符在执行过程中会改变 this 的指向，所以我们在了解 new 操作符之前，我们先解释一下 this 的用法。prototype与new"}, {"id": "6844903519078580238", "title": "[译] JavaScript 工作原理：内存管理 + 处理常见的4种内存泄漏", "desc": "几周前，我们开始了一系列旨在深入挖掘 JavaScript 及其工作原理的研究。我们的初衷是：通过了解 JavaScript 代码块的构建以及它们之间协调工作的原理，我们将能够编写更好的代码和应用程序。 本系列的第一篇文章着重于提供引擎概览, 运行时, 以及堆栈调用。第二篇文章…"}, {"id": "6844903809198587918", "title": "前端战五渣学JavaScript——call、apply以及bind", "desc": "今天的主题（😍？）是call、apply以及bind，这里这个以及我觉得用的很好，后面我会解释为什么不把bind和call、apply归为一类。 上面我觉得用了言简意赅的方法解释了一下这个问题，因为这个涉及到闭包的知识，以及函数的活动对象，不明白的可以看我的另一篇博客《前端战…"}, {"id": "6844903564578390029", "title": "设计师图解TCP连接过程", "desc": "我们知道Ip层包裹着tcp报文段把它从源Ip运送到目的Ip，如果过程中出现差错（16位的Ip检验和错误），Ip协议会直接丢弃该数据报并且不生成差错报文。这种情况tcp会发现数据丢失并进行重传。 这篇文章想探讨一下TCP协议是通过什么方式做到这些的，曾经做过设计师的我忍不住抄起老…"}, {"id": "6971447144423096351", "title": "实践：使用jsencrypt配合axios实现非对称加密传输数据", "desc": "不希望应用发送的数据能在 Devtools 中被看到，避免接口被“同行”扒下来，然后被恶意使用，使用非对称加密传输数据解决这个问题"}, {"id": "6998352369129881636", "title": "JavaScript函数高级篇", "desc": "一、SetTimout和SetInterval 理解书中这部分内容需要对JavaScript运行机制有一些认识： JavaScript运行机制： http://www.ruanyifeng.com/b"}, {"id": "6844903912768536589", "title": "('b' + 'a' + + 'a' + 'a').toLowerCase()输出banana的剖析", "desc": "当时第一反应是JavaScript会报错，但是并没有。然后就来了兴趣 后来仔细一想，估计和JavaScript运算符优先级、隐式转化有关系。 首先把toLowerCase去掉，这个函数没啥用，只是起到一个迷惑的作用。 这就是主要的，因为一元正号的优先级是比加法高的，所以这里用括…"}, {"id": "6844903663576547335", "title": "React专题：生命周期", "desc": "生命周期，顾名思义，就是从生到死的过程。 而生命周期钩子，就是从生到死过程中的关键节点。 每到关键节点，我们总希望有一些沉思时刻，因为这时候做出的决策会改变人生的走向。 React组件也一样，它会给开发者一些沉思时刻，在这里，开发者可以改变组件的走向。 React花了两年时间祭…"}, {"id": "6844904000861503495", "title": "用这个库 3 分钟实现让你满意的表格功能：Bootstrap-Table", "desc": "从项目名称就可以知道，这是一款 Bootstrap 的表格插件。表格的展示的形式所有的前端几乎在工作中都有涉及过，Bootstrap Table 提供了快速的建表、查询、分页、排序等一系列功能。 Boostatrp Table 分为两种模式：客户端（client）模式、服务端（…"}, {"id": "6844903873358872589", "title": "搞懂JavaScript引擎运行原理", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS引擎 — 一个读取代码并运行的引擎，没有单一的“JS引擎”;，每个浏览器都有自己的引擎，如谷歌有V。 作用域 — 可以从中访问变量的“区域”。 词法作用域— 在词法阶段的作用域,换句话说，词法作用域是由你在…"}, {"id": "6844903581661790216", "title": "浅谈模块化开发", "desc": "现在的前端开发, 不仅仅是完成浏览的基本需求，并且通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码. 如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个…"}, {"id": "6844903859719143437", "title": "前端基本功（四）：性能优化之你真的懂回流、重绘与合成层吗？", "desc": "1. 页面的呈现流程 浏览器把获取到的HTML代码解析成1个DOM树，HTML中的每个tag都是DOM树中的1个节点，根节点就是我们常用的document对象。DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。 浏览器把所有样式(用…"}, {"id": "6844903765040955405", "title": "每个 JavaScript 开发者都该了解的 ES2018 新特性", "desc": "编者按：曾几何时，年少的我捧着阮一峰老师的《ES6 标准入门》，感叹 JS 变迁实在太快，好怕学不动了。直至写了几年 ES6 的今日，回头看方知：不要为了学 ES X 而学 ES X，无论 ES 几其实都是语法糖，是辅助角色，重点是想清楚它能为我们的开发带来什么好处，而不是本末…"}, {"id": "6844903903864209422", "title": "[译] postMessage 很慢吗？", "desc": "这里的“慢”是什么意思呢？我之前在这里提及过，在这里再说一遍：如果你不度量它，它并不慢，即使你度量它，但是没有上下文，数字也是没有意义的。 话虽如此，人们甚至不会考虑采用 Web Workers，因为他们担心 postMessage() 的性能，这意味着这是值得研究的。我的上一…"}, {"id": "6986924830801002526", "title": "立即执行函数", "desc": "IIFE（ 立即调用函数表达式）是一个在定义时就会立即执行的 JavaScript 。 这个匿名函数拥有独立的词法作用域。不仅避免了外界访问此 IIFE 中的变量，又不会污染全局作用域。"}, {"id": "6989931166379802655", "title": "【JS从入门到精通】05-对象", "desc": "[TOC] 对象 JS中数据类型 String 字符串 Number数值 Boolean 布尔值 Null空值 Undefined 未定义 以上这五种类型属于基本数据类型，以后我们看到的值只要不是上边"}, {"id": "6987561488328163364", "title": "前端正则，拿来吧你！", "desc": "正则表达式总是像黑魔法，看别人写的好，总是被秀到，所以查缺补漏下，系统梳理前端相关正则，进你们收藏夹吃灰吧！"}, {"id": "6959777879680876575", "title": "用 setTimeout 代替 setInterval", "desc": "JavaScript 中的事件循环指的是浏览器处理并发模型（管理多个任务的的方法），包括了执行栈（call stack）、收集和处理任务（web APIs），任务队列（callback queue，也"}, {"id": "6844903649852784647", "title": "Promise A+中文翻译", "desc": "这是实施者为实施者提供的开源健全可互操作的JavaScript Promise 规范。 Promise代表着异步操作的最终结果。与promise进行交互的主要方式是通过then方法， 该方法通过注册回调以接收promise的最终值或promise未完成的原因。 该规范详细说明了…"}, {"id": "6844903901716545543", "title": "不到 0.3s 完成渲染！360 信息流正文“闪开”优化实践", "desc": "开篇之前先介绍一下场景。信息流是一个基于用户兴趣使用算法将用户感兴趣的新闻内容推荐给用户的一种业务。这种业务带有非常特色的场景就是用户有一个“永远”都刷不完的推荐流列表，点击列表中的新闻之后可以跳转到其详情页中查看新闻的正文内容。列表一般都是由客户端原生去实现的，而详情页这块由…"}, {"id": "6987429420306792462", "title": "字符串常用方法", "desc": "字符串常用方法 1. 是否包含 2. 查找索引 3. 替换 4. 分割 5. 正则匹配 6. 大小写转换 7. 去空格 8. 补全 9. 截取"}, {"id": "6844903780840898574", "title": "轻量级滑块Swiper插件发布（仅3kb）", "desc": "以上是最初需要的结构：一系列元素包裹在两个容器中。 在每个swipe-item可以自定义你想要的内容。初始化Swiper只需简单一行代码，传入swiper的最外层DOM即可，如下所示： Swipe现在兼容所有浏览器，包括IE7 +。 Swipe最适合支持CSS变换和触摸的设备，…"}, {"id": "6844903896670814222", "title": "详解JavaScript的任务、微任务、队列以及代码执行顺序", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 正确的答案是:script start, script end, promise1, promise2, setTimeout，但是由于浏览器实现支持不同导致结果也不一致。 Microsoft Edge、Fir…"}, {"id": "6976548361730506782", "title": "运行时包含的一些基本概念", "desc": "mdn-并发模型与事件循环 栈 函数的调用形成了一个由若干帧组成的栈 当调用bar时，第一个帧(包含了bar的参数和局部变量)被创建并压入栈中，帧中。当bar调用foo时，第二个帧（包含foo的参数和"}, {"id": "6844903951247081485", "title": "引用、浅拷贝及深拷贝   到   Map、Set（含对象assign、freeze方法、WeakMap、WeakSet及数组map、reduce等等方法）", "desc": "这其实就是一种引用，对于复杂数据结构，为了节省存储资源，符号 “=” 其实并不是将值赋给新建的变量，而是做了一个地址引用，使其指向原来存储在堆中的数据的地址，此时testObj与secObj都指向同一个地址，因此在修改secObj的数据内容时，即是对其指向的原有数据进行修改。 …"}, {"id": "6966967773880647717", "title": "从 Object.assign 开始了解ES2015", "desc": "本文着重介绍ES2015新增内容之一：Object.assign。在文章最后也介绍ECMAScript的发展历程。"}, {"id": "6984451444409630751", "title": "23种设计模式全面解析 -- 单例模式", "desc": "单例（Singleton）模式 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例。 创建对象和管理单例的职责被分布在两个不同的方法中，这两个方法组合起来才具有单例模式的威力。 使用闭包"}, {"id": "6844903748997742605", "title": "浅谈 class 私有变量", "desc": "在 es6 之前，虽然 JS 和 Java 同样都是 OOP （面向对象）语言，但是在 JS 中，只有对象而没有类的概念。 对比传统 OOP 语言中的类写法，这种写法让许多学过其他 OOP 语言的 JS 初学者感到困惑。 为了实现在 JS 中写 Java 的心愿，当时有人将构造…"}, {"id": "6850418118171475982", "title": "你的浏览器，独一无二--解读浏览器指纹", "desc": "如果技术有罪，那人类可真是罪大恶极。--- 沃·镃基烁德 是的你没有看错，和人有指纹一样，Web客户端（这里主要指浏览器）也有自己的指纹信息。将这些信息综合分析计算后，可对客户端进行唯一性识别，进而锁定、追踪、了解网民行为和隐私数据， 进而做到精准广告投放，反薅羊毛等功效。 1…"}, {"id": "6967302817790820360", "title": "转换类型的那些事儿", "desc": "最近一直在看《你不知道的 JS》，轻总结下，转换类型。 强制转换分为隐式和显式转化，虽然名声不好，但还是有必要知道转换的规则是啥。 显式的强制转换，通过减少困惑，增强了代码的可读性和可维护性。 隐式的"}, {"id": "6844904197654052877", "title": "原生javascript组件开发之Web Component实战", "desc": "作为一名前端工程师，我们每天都在和组件打交道，我们也许基于react/vue使用过很多第三方组件库，比如ant design，elementUI，iView等，或者基于它们进行过组件的二次开发，比如业务组件，UI组件等，亦或者觉得团队能力很强，可以不依赖第三方而独立开发属于自己…"}, {"id": "6854573212190605319", "title": "JavaScript面试题 由浅到深", "desc": "每一个函数都有一个prototype属性，每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型\"继承\"属性。 当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这…"}, {"id": "6844903687165313031", "title": "大话 JavaScript 动画", "desc": "138.2亿年前，世界上没有时间和空间，或许世界都不存在，在一个似有似无的点上，汇集了所有的物质，它孕育着无限的能量与可能性。 巨大的内力已无法被抑制，瞬间爆发，它爆炸了！世界上有了时间和空间，随着岁月的变迁，时光的流逝，无数的星系、恒星、卫星、彗星形成。我们生活的地球，只是茫…"}, {"id": "6994404257281605645", "title": "【从头学前端】07-掌握JavaScript中的循环语句", "desc": "本篇文章我们将来学习JavaScript中的循环语句 循环语句 就是对某些语句的重复执行，这个重复执行是通过指定表达式来控制的。简单来说就是指定表达式转换为boolean类型的值后的结果为true，哪"}, {"id": "6990607725835059213", "title": "JS中的正则表达式", "desc": "1.RegExp类型 ECMAScript通过RegExp类型支持正则表达式。 pattern（模式）是任何正则表达式，正则表达式可以带零个或多个flags。 常见 修饰符（标记） 修饰符 描述 g "}, {"id": "6844903830665035789", "title": "“深拷贝” 与 “浅拷贝” 的区别，JS实现深浅拷贝的几种方法", "desc": "对于这个问题，可以考虑从深拷贝和浅拷贝的使用或者起源说起，也就是为什么会出现这个问题。 首先了解一些javascript的基本知识。 【1】javascript变量包含两种不同数据类型的值：基本类型和引用类型。 在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型…"}, {"id": "6985955030373236750", "title": "JavaScript 变量声明：let 与 const", "desc": "变量的三种声明方式 区别： var 是过时的，不好用的方式 let 是新的，更合理的方式 const 是声明时必须赋值，且不能再改的方式 最后的这种方式是错误的，不要这样声明 变量声明在指定值的同时，"}, {"id": "6981346703127347213", "title": "js闭包之——相信我，这次真是手把手教", "desc": "闭包的含义：闭包是一个访问了其他函数内部作用域的函数 产生闭包的原因：当前函数内保持对上层作用域的引用（一般表现为函数内返回另一个函数）"}, {"id": "6844903779364503560", "title": "那些你可能不知道的Web APIs", "desc": "我们之前在实现一个业务需求的时候，判断一个页面是否失焦，用的是 onblur、onfocus，有了这个 API，会方便很多。 前面，我介绍了 Page Visibility API。有了它，就可以监听各种情况的网页卸载。 但是，它没有解决一个问题。Android、iOS 和最新…"}, {"id": "6844903735102013454", "title": "JS监听手机物理返回键（及IOS微信端的bug）", "desc": "1. popstate-一个可以监听历史记录点的API JavaScript中没有监听物理返回键的API，所以通过监听浏览器历史记录的变化来实现。 在HTML5就提供给我们 popstate 用来监听历史记录点。 2. 监听不到？pushState来告诉你为什么 当我们完成两个…"}, {"id": "6984666551991402532", "title": "JavaScript基础——dom操作", "desc": "JavaScript中的dom操作 作为一个前端，各种dom操作是必须要会的，尽管现在很多插件已经帮助我们实现了很多功能，以及vue，react等框架也帮我们节省了很多的dom操作，但是随着我们水平进"}, {"id": "6844903699425263629", "title": "vue watch数组引发的血案", "desc": "变异方法，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异方法，例如：filter(),concat()和slice()。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组 2. 数组也是一个对象，索引相当于对象属性的key值，…"}, {"id": "6933400179538133000", "title": "详解Promise 和 setTimeout速度比拼", "desc": "Promise.resolve(1) 是一个静态函数，可返回立即解决的 promise。 setTimeout(callback, 0) 执行延迟为 0 毫秒的回调。 打开执行并检查控制台。您会看到日志先打印了 'Resolved!' ，然后打印了 'Timeout compl…"}, {"id": "6844903589328977928", "title": "那些优雅灵性的JS代码片段", "desc": "我的个人网站：拓跋的前端客栈~了解一哈。 如果您甘于平凡，写代码对您来说可以就是Ctrl+C和Ctrl+V；如果您充满创造力，写代码也可以成为一门艺术。我们在平时总会遇到一些堪称优雅灵性的代码片段，在这里，仅以我之见，列举出我所见到的那一部分。 下面为了阅读方便，我会把代码的题…"}, {"id": "6844903582223826951", "title": "Websocket 使用指南", "desc": "在浏览器与服务器通信间，传统的 HTTP 请求在某些场景下并不理想，比如实时聊天、实时性的小游戏等等，其面临主要两个缺点： 无法做到消息的「实时性」； 服务端无法主动推送信息； 其基于 HTTP 的主要解决方案有： 基于 ajax 的轮询：客户端定时或者动态相隔短时间内不断向服…"}, {"id": "6992763588418994206", "title": "JavaScript中 获取DOM元素尺寸和位置", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 本文案例使用的浏览器为Chrome； 1. 获取元素的 css 大小 1.1 获取元素的行内样式 只是将 style 属性中的值显示出来 1"}, {"id": "7004618258703712292", "title": "第7章第1节4-3 用递归实现斐波那契数列", "desc": "4-1 用递归实现斐波那契数列 思路分析 代码实现........................."}, {"id": "6844904040157937678", "title": "Single-Spa微前端实践", "desc": "在前端，往往由一个前端团队创建并维护一个 Web 应用程序，使用 REST API 从后端服务获取数据。这种方式如果做得好的话，它能够提供优秀的用户体验。但主要的缺点是单页面应用（SPA）不能很好地扩展和部署。中后台应用由于其应用生命周期长 (动辄 3+ 年) ，由于参与的人员…"}, {"id": "6844903664931307534", "title": "webpack4搭建现代Hybird-h5工程", "desc": "入口繁杂其实意味着你的前端工程搭建必须是以多入口为起点搭建的，如webpack你可以配置entry，自行写一个脚本在构建时获取每一个页面的js入口，而多入口意味着你必须考虑页面之间共享的模块应该如何抽取以达到一个较优的模块利用率，这点我们在文章下一节详细讲。 其实有做过混合开发…"}, {"id": "6844903764759937038", "title": "重构你的javascript代码", "desc": "重构，对于每个开发者都至关重要，特别是对于那些需要进阶的高级程序员。根据二八理论，20%的重构方法，能解决80%的坏代码。笔者最近查阅较多js编码指南以及重新阅读了《代码整洁之道》、《重构：改善既有代码的设计》两本经典书籍（强烈建议每隔一段时间看，每次都有新体会），整理出以下几…"}, {"id": "6844903614146691085", "title": "作为前端，如何帮帝都的朋友租到合适的房子？", "desc": "在帝都打拼的小伙伴都知道，要租个合适的房子真心不易。中介要收一个月的房租作为中介费。而且很多黑中介打着租房的旗号各种坑蒙拐骗。要想在茫茫帖子中找到真正的房东，宛如大海捞针，同时需要和各路黑中介斗智斗勇。接下来就讲讲我浴血奋战的故事。 那么，How to start? 我们先选一…"}, {"id": "6844904080217735182", "title": "【JavaScript】几个必须要会的高级编程技巧", "desc": "在我们的代码中，一定包含了大量的if语句，这些if语句的执行要花费一些时间。有一种情况是这样的，我们第一次进入到if分支中，执行了这部分代码，然后第二次同样执行进入了同一分支，所以会再次执行此部分代码。这样的情况下，代码执行肯定会慢一些，那么如果我们只让代码有一个if分支，代码…"}, {"id": "6952907248393781284", "title": "React构建组件/React 组件设计模式的方式有哪些-面试题", "desc": "俺作为 Reac 初学者时，总是对组件声明的几种方式及其暗坑云里雾里！React中高阶组件是什么?高阶组件使用有什么缺点? render props又是什么? 都有有哪些使用场景? 为什么又要出来一个"}, {"id": "6934950536508604429", "title": "函数防抖与节流", "desc": "浅谈js中的函数防抖与节流前言在平常的前端业务开发中，大家都会涉及到点击事件，以及浏览器一些滚动事件，当用户频繁操作时代码性能较低，加重浏览器的负担，导致用户体验较差，如果我们想降低这些事件的擦操作频"}, {"id": "6844903983673245710", "title": "async function(面试小难点？)", "desc": "你还可以使用 异步函数表达式 来定义异步函数。 记住，await 关键字只在异步函数内有效。如果你在异步函数外使用它，会抛出语法错误。 在sequentialStart中，程序在第一个await停留了2秒，然后又在第二个await停留了1秒。直到第一个计时器结束后，第二个计时器…"}, {"id": "7004473998322958349", "title": "this 到底指向谁", "desc": "this 的指向纷繁复杂，往往会让人感到迷惑。从优先级到显隐性，在日常开发的编码中，扮演着重要的角色。如果能灵活使用，往往会使代码灵活且简洁。 按照以下几条规则来确定 this 的指向: new 绑定"}, {"id": "6993228043363811341", "title": "js 提取html 文字、转义字符", "desc": "产品经理提出了想要一个富文本形式的商品描述，一开始想的很简单，只需在后台加一个富文本，小程序端只需将在商品卡片出将html将标签去掉，这时候问题来了，测试加了许多双引号，空格之类的导致出现了问题"}, {"id": "6950690579286065182", "title": "2021 年前端开发者需要知道的 JS/React 规范", "desc": "规范: 导入模块的顺序以有组织的方式引入 ES6 模块将节省你查找任何找不到或不需要模块的时间之前之后在之前的引入是无序的，一个文件可能会很乱，但是当你打开大量文件时候，尝试找到一个特定的包真的很难。"}, {"id": "6985738912199081997", "title": "客户端界面开发，一种基于映射关系的简洁编码方案", "desc": "Why 没有规矩，不成方圆！ 客户端界面通常会存在诸多事件（用户点击等），而每个点击事件的背后又会是一连串的动作。一图胜千言，如下图所示，各动作之间 有潜在的关联关系 关系路径有多条 你会怎么做？ 如"}, {"id": "6930425915700674574", "title": "推出掘金统计dashboard功能【我爱掘金】0.0.15｜牛气冲天新年征文", "desc": "之前我发布了一个VSCode的插件 《爱了爱了🌹，这个VSCode插件极大提升你的工mo作yu效率》。最近终于抽时间继续完善了一下这个插件的功能。 1. 掘金统计dashboard 因为我是掘金的“重度”依赖患者，同时也非常喜欢做数据分析，希望监控自己每天的掘力增长，关注增长…"}, {"id": "6844904103882162184", "title": "[译] JavaScript Proxy -- 一些真实的用例", "desc": "在编程术语范畴中, Proxy指的是帮助/替代另一个实体(Entity)完成一系列操作的实体. 一个架设在客户端与服务端之间的Proxy服务器分别充当了客户端的服务端和服务端的客户端. 对于Proxy来说, 它们的任务就是介入收到的请求/调用, 并在处理后传递给其上游. 这些介…"}, {"id": "6976153834758340621", "title": "在 esbuild 中实现 babel 超人气爆款插件", "desc": "前言 esbuild 是近些天来非常火的一个全新的工具，年前霸屏掘金前端板块，被称作第三代构建方案，它最与众不同之处就是它独特的使用 go 语言构建。得益于此，它的打包速度非常的惊人。 构建十次 th"}, {"id": "6998890762402267173", "title": "浅谈eventLoop", "desc": "event loop 分为宏任务跟微任务，是单线程 宏任务：就是由宿主（node,浏览器）主动发起的 script,settimeout,setInterval... 微任务：就是由javascrip"}, {"id": "6950218916018782245", "title": "手写JS-函数柯里化", "desc": "前言什么是函数柯里化呢？所谓”柯里化”，简单来说就是把一个多参数的函数，转化为单参数函数。手写一个简单的小例子：而这个例子显然也并不完整，比如curry函数是如何实现的呢？接下来跟着实现一下。实现cu"}, {"id": "6844904093467541517", "title": "函数柯里化：三行代码实现 add(1)(2)(3)", "desc": "本文主要从 3W (what, how, why) 角度出发通俗易懂的解释一下 什么是函数柯里化，以及怎么用三行代码来实现 add(1)(2)(3) 这个很常见的面试题。 函数柯里化（curry）是函数式编程里面的概念。curry的概念很简单：只传递给函数一部分参数来调用它，让…"}, {"id": "6875120334602371085", "title": "基于NodeJS从零构建线上自动化打包工作流（H5-Dooring特别版）", "desc": "NodeJS在前端领域正扮演着越越重要的地位，它不仅可以让前端工作者使用javascript编写后端代码，还能方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动，非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。 所以作为一…"}, {"id": "6844903846334971918", "title": "前端跳槽面试算法——动态规划", "desc": "众所周知，与后台开发人员相比，算法是我们前端开发人员的一个弱项。 而近两年随着互联网行业竞争愈发激烈，市场上对前端岗位的算法要求也有一定的提升。 我记得大三参加腾讯的校招面试时只准备了几种常见的排序算法就足以应对了，然而今年包括今日头条在内的多家大厂的前端笔试题目中都出现了\"贪…"}, {"id": "6844904080955932679", "title": "ES2020新特性", "desc": "ES2020 是 ECMAScript 对应 2020 年的版本。这个版本不像 ES6 (ES2015)那样包含大量新特性。但也添加了许多有趣且有用的特性。 本文以简单的代码示例来介绍 ES2020新特性。这样，你可以很快理解这些新功能，而不需要多么复杂的解释。更多优质文章请猛…"}, {"id": "6882930418446925832", "title": "websocket长连接和公共状态管理方案（vuex + websocket or redux + websocket ）", "desc": "我们都知道在vue和react这种单页面组件化项目中，建立socket连接会遇到:重复连接，切换页面连接中断 ,状态丢失等问题，而且如果想要在任何页面接受到来自socket传递的信息，所以在建立socket连接时候就要考虑是否要把连接实例化放在公共state里边统一管理，这样可…"}, {"id": "6931924197765545997", "title": "成为优秀程序员必备的 6 个提高条件判断语句可读性的方式", "desc": "如果你用过条件判断语句，你应该通常会用到 if 或 switch 语法。 ES6 给我们更强大的能力去写更好的条件判断语句，它更短，更简洁。 1. 早早的 return 代替 if else 看看下面的代码。嵌套式的 if 判断的代码是很丑陋的，很难控制，很难定位 bug。如果…"}, {"id": "7003343191487283236", "title": "浅谈async与Generator", "desc": "async await作为异步的终极解决方案，优雅的使用它可以避免Promise的深层嵌套，面试的时候也喜欢问到async的原理，让我们一起来探其究竟。"}, {"id": "7001891803309801509", "title": "JS数字之旅——BigInt", "desc": "BigInt是一种可以用来表示大于Number.MAX_SAFE_INTEGER的任意整数的原始数据类型。它的字面量格式是在要表示的数字后面加上n，例如："}, {"id": "6844903870276206606", "title": "更优雅地基于 canvas 在前端画海报", "desc": "我们的业务涉及电商、教育行业，出于营销以及功能需要，会有很多卡片展示（长按保存）的需求，或者分享长图的需求。以及我们有面向商家的PC端，商家端又能编辑、实时预览卡片的样式。 同样的卡片内容我们需要在两端以两种框架（vue react）分别维护。 考虑到依赖太大（ungzippe…"}, {"id": "6983967244816482334", "title": "面试官：听说你对package.json很熟？ ", "desc": "还在npm install。npm start一直工作下去吗？你真的了解package.json的每个字段的含义吗？~和^之间的区别是什么你知道吗？快来和我一起了解一下真正的pack.json吧！"}, {"id": "6994428654130298910", "title": "JS 模块化资源引入", "desc": "随着前端技术的逐渐发展，模块化的概念越来越成熟。随着ES6的出现，模块的设计思想变得尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。"}, {"id": "6844903657318645767", "title": "前端性能优化之雅虎35条军规", "desc": "本文主要考虑客户端性能、服务器端和网络性能，内容框架来自Yahoo Developer Network，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。 前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名…"}, {"id": "6844903831973675015", "title": "iframe跨域的几种常用方法", "desc": "随着业务的发展，自然地会有一些公共的业务被抽离成为公共组件共各个项目使用。但是由于各个项目用到的技术栈都有所不同，所以这个公共组件就不能方便地被引用了。为解决这个问题，我们把这个组件写成了单独的页面挂到一个域名下，其他项目采用iframe或者webview的方式去加载这个页面，…"}, {"id": "7002901880254758919", "title": "[JS]原型链", "desc": "原型链，原型链是JS中十分重要的一个概念，今天的文档就选这个主题(其实已经准备了好一会了这篇)，继承、__proto__、prototype"}, {"id": "6844903678244028429", "title": "七年切图仔如何面试大厂web前端？（沟通软技能总结） | 掘金技术征文", "desc": "最近面了很多大厂的web前端岗位，都被刷了，在决定入职前，手里拿了几分待遇差不多的offer，后期的面试越来越顺，自己思考和总结了一下，原来面试也有好多技巧和方法可循，希望这些方法可以帮助到为找工作而且苦恼的你，可能每个人的方法不一样，不过至少可以提供一些参考。 先说明一下我的…"}, {"id": "6988315639685316616", "title": "初识 SSR （SSR 入门 对产品经理，运营友好）", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 前言 最近在大规模的改造SSR页面，所以对 SSR 技术有了一定的技术认识，想着写一篇文章来总结一下对于 SSR "}, {"id": "6854573221291753480", "title": "【1.2W】精心整理33个css知识干货助你升级", "desc": "值得扩展的我都在问题后面附上文章链接，里面会有详细的讲解和案例分析，面试突击的话只看本文就好了，想跟面试官聊聊技术的可以深入的看一下。 最后，整理不易，所以。。如果白嫖使你快乐的话。。。。那就白嫖吧。。。但是，不点赞的话，以后找不到了哦🤔🤔 区别： 标准盒子模型盒子的hei…"}, {"id": "6844903585650573326", "title": "不要再去背面试的知识点了", "desc": "前几次的面试，让我对于一个前端工程师需要掌握的知识体系有了一个全新的认识。之前自己在学习方面一直属于野路子，没有一个很规范的学习路径，往往都是想到什么就去学什么。而且基本都是处于会用的那种水平。并没有真正的做到知其然且知其所以然。面试基本都没有通过，我自己也明白了自己在那些方面…"}, {"id": "6981662926092369927", "title": "优化循环结构", "desc": "前言 循环是最耗费资源的操作，任意一个小小的损耗都会被成倍放大，从而影响程序整体运行的效率。有以下两个因素影响到循环的性能。 每次循环做什么。 循环的次数。 通过减少这两者中一个或全部的执行时间，可以"}, {"id": "6844904175868837901", "title": "V8引擎详解（六）——内存结构", "desc": "本文是V8引擎详解系列的第六篇，重点内容是关于V8的内存结构，以及通常情况下内存的使用过程，本文会先从基本概念入手，了解V8的堆栈结构，最后描述一个对象创建后在内存中的生命周期（本文不会有太多GC相关内容，关于垃圾回收会在下一篇详细描述）文末会有已经完成的系列文章的链接，本系列…"}, {"id": "6928046950650642439", "title": "浅谈浏览器实时构建｜牛气冲天新年征文", "desc": "在遥远的几个月前，还在上家公司的时候，老板突发奇想，想要搞个代码片段平台，类似于 snipit，实现代码片段的复用。本身这个需求并不难实现——简单的前端界面 + 简单的 node CURD，搞定收工，下班回家。 但是，在实际使用中，发现了一个使用痛点——没有在线调试功能，所有代…"}, {"id": "6932494622661083150", "title": "分析JS对象内部属性的遍历顺序", "desc": "在我们日常的开发中，有很多下拉选框里面的选项值是通过后端传回来的枚举值（enums）来作为渲染的数据的。例如这样子的下拉选框： 如果我们需要让下拉选框里面的选项顺序，是依据后端返回的数据进行排序，那这个时候就有两种方法。一种是后端返回一个数组数据，然后我们按照顺序遍历这个数据数…"}, {"id": "6844903510362816520", "title": "Vue响应式----数组变异方法", "desc": "查看官方文档才发现，不是女神太高冷，而是你没用对方法。 看来想让女神自己动，关键得用对方法。虽然在官方文档中已经给出了方法，但是在下实在好奇的紧，想要解锁更多姿势的话，那就必须先要深入女神的心，于是乎才有了去探索Vue响应式原理的想法。(如果你愿意一层一层地剥开我的心。你会发现…"}, {"id": "6844903497255616526", "title": "前端面试问题（持续更新）", "desc": "BFC: 提供一个环境，html元素会在这个环境中按照一定的规则进行布局。 ex: 例如浮动元素会形成bfc,浮动元素内部子元素主要受该浮动元素影响，但是两个浮动元素互相不影响。 这个可以理解为一个独立容器，里边规则不会影响到外边。 这些基本的比如比如哪儿是content大家都…"}, {"id": "6951591339418976264", "title": "浅浅地聊聊js是如何获得dom从而控制html和css的", "desc": "例子：控制视频播放速度成果展示1. 先生成页面2. 插入css由于今天的主角是js，所以html和css部分就不给予讲解，直接看效果：3. 编写js代码那么在写js代码前，我们肯定得考虑这几个问题：3"}, {"id": "6994419483339309069", "title": "前端Leetcode系列｜14. 最长公共前缀", "desc": "这是力扣系列第2篇，今天来和小伙伴们一起打卡力扣第14题：最长公共前缀。 一、题目描述 编写一个函数来查找字符串数组中的最长公共前缀。 如"}, {"id": "6844904066435252238", "title": "精通React/Vue系列之实现一个全局提示(Message)组件", "desc": "本文是笔者写组件设计的第十一篇文章, 今天带大家实现一个同样比较特殊的组件——全局提示(Message)组件。 由于全局提示组件的设计原理和笔者上一篇写的精通React/Vue系列之手把手带你实现一个功能强大的通知提醒框(Notification)是类似的，区别主要是布局和配置…"}, {"id": "6937889429168062494", "title": "阅读React源码带来的按位运算符的思考", "desc": "最近准备把react@17.x的源码认真看一遍， 在阅读的过程中发现源码中大量使用了按位运算符， 当初看《你不知道的Javascript》就曾看到这一章节， 当时没细看， 想着这玩意用的少， 没必要看。 果然， 天道好轮回， 欠下的迟早要还上， 这里就记录下js进制转换和按位运…"}, {"id": "6999262893577338887", "title": "今天聊一聊ES6的箭头函数", "desc": "箭头函数 箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方......"}, {"id": "7000220043141185543", "title": "原生JS 对象 包装类 原形 原型链", "desc": "对象 用已学的知识点，描述一下你心目中的对象 改进 第一人称：this 1.属性的增、删、改、查 增 改 删 delete + 属性 当一个变量没有声明就是用报错，对象的属性没有就访问打印undefi"}, {"id": "6844903624833761294", "title": "Vue单元测试探索", "desc": "一类是相似度很高的项目，比如管理后台，这类项目的页面通过各种公共组件搭建而成。公共组件的复用性很高，所以质量尤为重要。如果开发人员在修改了公共组件之后留下了bug，那么将会直接降低了整个项目的质量。我希望让程序去测试这些公共组件，保证每一个公共组件是可用的。 另一类是公司的核心…"}, {"id": "6844903610099171341", "title": "前端利用Blob对象创建指定文件并下载", "desc": "Blob对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File接口基于Blob，继承了blob的功能并将其扩展使其支持用户系统上的文件。 array 是一个由ArrayBuffer（二进制数据缓冲区）、ArrayBuffe…"}, {"id": "6969766350566735909", "title": "文字背景对比度contrast ratio的计算公式", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 对比度标准 MD规范里说：文本应该保持至少 "}, {"id": "6990186384778756109", "title": "DOM树：JavaScript和css是如何影响DOM树构建和渲染的？", "desc": "1、JavaScript和css会不会DOM树构建和渲染的 先做个总结，然后再进行具体的分析： CSS不会阻塞DOM树的解析，但是会影响 JavaScript的运行， JavaScript 会阻止DO"}, {"id": "6974746618062962724", "title": "通过几个例子初步了解JS面向对象的程序设计", "desc": "这是我参与更文挑战的第17天，活动详情查看： 更文挑战 目的： 理解对象及对象的属性 熟悉对象的建立和属性设置 了解对象创建的几种方式 题目1 1.分别使用new和字面量方式创建一个实例汽车，并给汽车"}, {"id": "6844904168486862856", "title": "轻松理解函数防抖和节流", "desc": "函数防抖和节流，这个知识点面试中被问的概率比较高。 非立即执行版防抖可以理解为n时间后执行一次函数。立即执行版防抖是立即执行一次函数。 节流可以理解为每隔n时间执行一次函数。 用文本框输入文字来演示的话，假如时间都设置为1s，用户不断输入文字，如果是非立即执行防抖的话是停止输入…"}, {"id": "6844904106704764942", "title": "你所需要的跨域问题的全套解决方案都在这里啦！（前后端都有）", "desc": "随着RESTful架构风格成为主流，以及Vue.js、React.js和Angular.js这三大前端框架的日益强大，越来越多的开发者开始由传统的MVC架构转向基于前后端分离这一基础架构来构建自己的系统，将前端页面和后端服务分别部署在不同的域名之下。在此过程中一个重要的问题就是…"}, {"id": "6997654580087488542", "title": "降维数组的多种方式~ 原生js", "desc": "1.利用[].concat.apply实现降维 2.如果concat方法的参数是一个元素，该元素会直接插入新数组中；如果参数是一"}, {"id": "7002595472929980447", "title": "Javascript错误处理", "desc": "每个前端开发都会用到浏览器调试，有了这个调试，我们可以更好的找到问题并解决问题。我们主要讲错误处理。"}, {"id": "7000648636430303268", "title": "如何画一条抛物线引导成烟花炸开效果？看这篇就够了", "desc": "最近需求有点狂，一言不发就要1天完成一个抛物线，这让人倍受压力，虽然知道贝塞尔曲线，但是使用并不是你想象那么容易~"}, {"id": "6869521076771094536", "title": "Vue3.0来袭，你想学的都在这里（一）", "desc": "近期工作感觉很忙，都没有多少时间去写文章，今天这篇文章主要是将自己前期学习Vue3.0时候整理的一些笔记内容进行了汇总，通过对本文的阅读，你将可以自己完成Vue3.0环境搭建，同时还会对Vue3.0的一些新的特性进行了解，方便自己进行Vue3.0的学习。 在前面的文章中，我们通…"}, {"id": "7000938640452878367", "title": "项目实战 | Js 数据结构转化处理", "desc": "这是我参与8月更文挑战的第 27 天，活动详情查看：8月更文挑战 前言 在本示例中，用到了 js 的 3 种结构，Object, Array, Set，用 Object 替代 Map 是个人觉得 Ma"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "6996658359810129950", "title": "『面试的底气』—— 设计模式之发布-订阅模式（一）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6998720622113079333", "title": "【Tip】事件委托妙用", "desc": "问题回顾 当我们想给一个列表中的每个列表项添加相同的事件时，我相信最先想到的方法一定是事件委托，通过将事件监听器设置在其父节点上，利用事件"}, {"id": "7004751416564645901", "title": "Webpack配置-环境分离和代码分离", "desc": "环境分离 第一种方案添加两个配置文件，然后添加两个 build指令分别指向两个配置文件如下图显示 第二种方案是使用相同的入口配置文件但是需要在后面配置参数来区分生产环境还是开发环境 这样做的好处就是可"}, {"id": "7005014632175763470", "title": "湖中剑 前端周刊 #7 | 2021-09-06", "desc": "周刊收集包括前端（但不限于前端）的文章、新闻、开源项目、工具等等，每周一更新。 📰 News Electron 14.0.0 发布 Electron 14.0.0 现已发布，此次带来了诸多更新，同时终"}, {"id": "6844903880774385671", "title": "为什么视频网站的视频链接地址是blob？", "desc": "自从HTML5提供了video标签，在网页中播放视频已经变成一个非常简单的事，只要一个video标签，src属性设置为视频的地址就完事了。由于src指向真实的视频网络地址，在早期一般网站资源文件不怎么通过referer设置防盗链，当我们拿到视频的地址后可以随意的下载或使用（每次…"}, {"id": "6924108781542440974", "title": "10个JS优化小技巧", "desc": "1. if多条件判断 2. if...else... 3. Null, Undefined, 空值检查 4. foreach循环 5. 函数条件调用 6. switch条件 7. 多行字符串 8. 隐式返回 9. 重复字符串多次 10. 幂乘"}, {"id": "6999993029482250253", "title": "从V8源码角度来手撕JS数组方法底层实现（二）：map", "desc": "前言 map方法是日常开发经常用到的方法之一，调用后返回一个新数组，新数组的元素是原数组中的每个元素是调用一次提供的函数后的返回值。 函数签名： callback：生成新数组元素的函数，包含三个参数："}, {"id": "6860646761392930830", "title": "蚂蚁金服异步串行面试题", "desc": "朋友去面试蚂蚁金服，遇到了一道面试题，乍一看感觉挺简单的，但是实现起来发现内部值得一提的点还是挺多的。 flow 是指一系列 effects 组成的逻辑片段。 flow 支持嵌套。 effects 的执行只需要支持串行。 用数组包裹的上述三项。 先把参数浅拷贝一份（编写库函数，…"}, {"id": "6999099938453848094", "title": "HTML5中的DOM扩展（一）", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 我们都知道HTML5与之前的html是截然不同的方向，html5规范新增了很多DOM节点操作。我们下面来展开说一下 css类扩展 伴随着H"}, {"id": "6939854031787393031", "title": "三十分钟包会——正则表达式", "desc": "正则表达式，对大家来说既熟悉又陌生。熟悉是因为工作中有很多场景能用到，比如手机号、邮箱、密码等规则校验。 陌生则是因为正则表达式看上去就是一堆乱码，且一眼看上去很难看懂匹配规则。有时候在网上去找一个特定规则的正则表达式，搜出来的结果各不相同，执行效果更是不尽人意，想自己去修改，…"}, {"id": "6993806145341095967", "title": "ECMAScript 的基本引用类型——Date 讲解", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 Date 类型 ECMAScript 的 Date 类型是参考 Java 早期版本的 java.util.Date。Date 类型保存的是自"}, {"id": "6937449598143168549", "title": "如何快速为团队打造自己的组件库（下）—— 基于 element-ui 为团队打造自己的组件库", "desc": "基础组件库在 UI 结构上差异很小，一般只是在主题色上会有较大差异，毕竟每个团队都有了 UI 风格。比如，我们团队的 UI 设计稿其实是基于 Ant Design 来出的，而组件库是基于 Element-UI 来开发，即使是这种情况，对组件本身的改动也很少。所以，基于开源库打造…"}, {"id": "6983938127911976990", "title": "教你如何用Three.js创造一个三维太阳系", "desc": "笔者认为Three.js是一个伟大的框架，为什么这样说，因为它可以让我们轻易创造三维世界，甚至好像笔者写这遍教程，可以创造一个太阳系，在这个三维世界里你就是创世主。"}, {"id": "6996527739129823239", "title": "BOM核心——window对象之窗口", "desc": "浏览器对象模型BOM（Browser，Object，Model）是以window对象为基础的，这个对象代表了浏览器窗口，页面可视区域。"}, {"id": "6982215281582030856", "title": "记录防抖和节流", "desc": "记录所学，节流和防抖，检验自己的掌握程度。 我们会遇到这样的场景， 一个按钮，正常逻辑是点击一次，等待接口返回数据，进行接下来的处理，"}, {"id": "6970661955845488654", "title": "函数", "desc": "这是我参与更文挑战的第6天，活动详情查看：更文挑战 什么是函数 在javaScript中，函数是头等对象。因为它们可以像任何其他对象一样具有属性和方法。也就是说每个函数都是一个Function对象。 "}, {"id": "6844903652272898056", "title": "动手理解导航守卫（Vue）", "desc": "最近不是很忙，把自己不会的技术点看了一遍文档，然后动手敲了一下代码，加深自己理解。通过实战Demo，调试，结果分析，理解了官网的知识点。记录下来，第一是方便自己加深理解，第二是后续可以回顾，第三可以帮助像我这种小白的人一起学习。 导航就是我们说的路由，当路由发生变化的时候，我们…"}, {"id": "6995151942469025800", "title": "深入理解红宝书(11)", "desc": "这章可以说是JavaScript语言的基石,非常非常重要,很多新学者没有系统的学习过这些知识.在跟着网站上视频学习的时候是不会教的这么详细的,也给那些自学的兄弟做一个补充.毕竟有些知识不遇到没事,遇到"}, {"id": "6913739544055513102", "title": "JavaScript阿里云OSS CDN URL三种鉴权方式", "desc": "URL鉴权功能旨在保护用户上传到视频点播的内容资源不被非法站点下载盗用，可通过控制台配置。本文为您简要介绍了URL鉴权的原理和鉴权方法。 一般情况下，可以通过配置访问Referer黑名单和白名单来实现对访客身份的识别和过滤，保护站点资源。但由于Referer内容可以伪造，采用U…"}, {"id": "6992836239707619365", "title": "JS继承方式", "desc": "记录一下几种继承方式： 父类： 原型链继承，构造函数继承， 组合继承（前两种的结合），原型式继承，寄生式继承， 寄生组合式继承 原型链继承： 新建一个cat的实例作为子类的原型对象， 缺点： 由于ca"}, {"id": "6844903638939205640", "title": "Vue(ES6)中的data属性为什么不能是一个对象？", "desc": "最近来面试的很多人。我都会问这个问题“vue中，为什么data是一个方法返回一个对象，而不是直接赋给一个对象”，只有少数人会回答出是怕重复创建实例造成多实例共享一个数据对象。更多的人回答是不知道，或者是官方文档要求这么写就这么写了。 其实这个问题的考点无非就是对vue的熟悉情况…"}, {"id": "6844904120818597895", "title": "eggjs新手村指南", "desc": "公司最近准备建 node 中间层，可考虑的方案就 express koa nest egg ，express 和 koa 都太轻了，给企业用不合适，nest 中文文档太少，开发中如果出现问题，查找相关解决方案并不容易，所以最后可选的也就 eggJs 了。eggjs 是阿里出品的…"}, {"id": "6844903661064159240", "title": "边写 Javascript 代码边玩游戏 – WarriorJS", "desc": "在 WarriorJS 中，你穿着勇士般的盔甲，爬上一座高塔，到达顶端的 JavaScript 之剑。传说持剑者因为使用 JavaScript 语言变得豁然开朗，但是要注意的是: 这个过程并不容易。在每层楼上，你需要编写 JavaScript 来指导战士与敌人战斗，拯救俘虏，活…"}, {"id": "6846687596605603854", "title": "更新！从基础到进阶（二），100～道JavaScript题目，测试你有多了解 JavaScript，刷新你的知识！🚀", "desc": "我在我的 Instagram 上每天都会发布 JavaScript 的多选问题，并且同时也会在这个仓库中发布。 :muscle: :rocket: 我每周都会在这个仓库下更新新的问题。 答案在问题下方的折叠部分，点击即可展开问题。祝你好运 ❤️ 使用||运算符，我们可以返回第一…"}, {"id": "6992927481875398669", "title": "前端实现日志的自动滚动", "desc": "本文讲述了如何使用 scrollTo 和 scrollIntoView 方法实现日志或者进程数据的自动滚动效果，从二者的调用方法、参数层面结合实际的案例代码，让读者深入掌握二者的用法。"}, {"id": "6992724626165989389", "title": "先有鸡，还是先有蛋？", "desc": "从”先有鸡，还是先有蛋“的问题出发，一步步探索javascript对这个问题的解释，在它背后到底发生了什么。"}, {"id": "6968355020970393636", "title": "ES6(16)class 继承", "desc": "总结： Class 可以通过extends关键字实现继承，继承父类的所有属性和方法不管是公有私有还是静态 子类必须在constructor方法中调用super方法，否则新建实例时会报错 ES5 的继承"}, {"id": "6921223943219544078", "title": "使用FrameController.js优雅的处理单页多框架窗口（<iframe>）管理同步问题", "desc": "0. 痛点 做后台时，不可避免的会遇到 内嵌 iframe 的情况。 最近的 一个项目 有客户反馈无法保存，提示 token 错误。 经过沟通发现 是因为打开了 多个内嵌页（iframe），会出现此问题（使用ThinkPHP5自带方法 token()，每次调用都会生成新的Tok…"}, {"id": "6844904018016206856", "title": "13个需要知道的方法：使用 JavaScript 来操作 DOM", "desc": "DOM 或文档对象模型是 web 页面上所有对象的根。它表示文档的结构，并将页面连接到编程语言。它的结构是一个逻辑树。每个分支结束于一个节点，每个节点包含子节点、对象。DOM API非常庞大，在本文中，咱们只讨论比较常用有有用的那些API。 document.querySele…"}, {"id": "6992976904886321165", "title": "边学边译JS工作机制--21.XSS的5种方式和防范策略", "desc": "概述 跨站脚本（XSS）是浏览器侧进行的代码注入类的攻击方式。攻击者把木马代码注入到应用中，然后在特殊的场景下出发执行。 比如浏览器，攻击者会把代码注入到受害者使用的web应用中。一般来说，XSS攻击"}, {"id": "6844903951410659341", "title": "Webpack 打包太慢? 试试 Dllplugin", "desc": "1. 介绍 对于 CommonsChunkPlugin，webpack 每次打包实际还是需要去处理这些第三方库，只是打包完之后，能把第三方库和我们自己的代码分开。而 DLLPlugin 则是能把第三方代码完全分离开，即每次只打包项目自身的代码。Dll这个概念是借鉴了Window…"}, {"id": "6969214467909353486", "title": "Class类，你知道多少", "desc": "这是我参与更文挑战的第2天，活动详情查看：更文挑战 class类 es6引入的class类的概念，作为对象的模版。通过关键字class可以定义类。 es6的类完全可以看作是构造函数的另一种写法。 从上"}, {"id": "6974206338985361439", "title": "数据结构之链表（四）", "desc": "这是我参与更文挑战的第16天，活动详情查看：更文挑战 实现链表的其他方法 在之前的三节中我们已经了解到什么是链表，并且实现了链表的append方法，removeAt方法和insert方法"}, {"id": "6844903604738867214", "title": "微信小程序“反编译”实战（二）：源码还原", "desc": "在上一篇文章《微信小程序“反编译”实战（一）：解包》中，我们详细介绍了如何获取某一个小程序的 .wxapkg 包，以及分析了 .wxapkg 包的结构，最后通过脚本解压获取包中的文件：小程序“编译”后的代码文件和资源文件，但是由于这些文件大部分被混淆了，可读性很差，所以本文将进…"}, {"id": "6898871196591325198", "title": "Layr：前后端数据交互新思路", "desc": "网关到微服务通常采用RPC进行交互，本文不赘述。 前端与网关的交互国内公司通常用Rest，国外有不少公司使用GraphQL，从技术实现上讲，这两种方式各有优缺点，也都不难。 对于开发人员来讲，如果不需要区分客户端与服务端，本来一套代码是可以相互调用的，但区分后，不得不通过url…"}, {"id": "6844903503874244615", "title": "js 计算两个时间的时间差", "desc": "如题，就像题目说的需要计算出时间差，虽然不太难，但这个需求经常会在项目中遇到的，我在这边做一下整理，希望能够尽量全的整理出来。有需要的朋友可以做一下参考，喜欢的可以点波赞，或者关注一下，希望可以帮到大家。 方法定义： getTime() 方法可返回距 1970 年 1 月 1 …"}, {"id": "6982855097101336612", "title": "自定义滚动条", "desc": "前端；自定义滚动条；前端；自定义滚动条；前端；自定义滚动条；前端；自定义滚动条；前端；自定义滚动条；"}, {"id": "6844903799853678605", "title": "基于 React.js 和 Node.js 的 SSR 实现方案", "desc": "传统的服务端渲染可以使用Java，php 等开发语言来实现，随着 Node.js 和相关前端领域技术的不断进步，前端同学也可以基于此完成独立的服务端渲染。 即：当前页面的内容是服务器生成好给到浏览器的。 右键点击 -> 显示网页源代码，如果页面上的内容在HTML文档里，是服务端…"}, {"id": "6982810258821349413", "title": "javascript继承", "desc": "从原型链的角度一步步深入了解js传统的6种继承方式，了解继承为什么会有这么多方法，为什么需要这样做。"}, {"id": "6844903713488781319", "title": "基于babylon.js的3D网页游戏从零教程", "desc": "在很久一段时间 web 端的 3D 游戏引擎一直是 nothing，但现在却如雨后春笋。 本文介绍使用 babylon.js 的 3D 网页游戏开发流程。 1. Get Started 四种光类型a. 聚光灯的参数用于描述一个锥形的光束 b. 环境光模拟一种四处都被光照射到的环…"}, {"id": "6844904137033793543", "title": "霖呆呆向你发起了多人学习webpack-构建方式篇(2)", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 什么？！你还想要\"呆妹\"出来给你讲webpack？！小伙子，你的想法很危险❌啊。 不可能的，下次想要见到\"她\"可能要等到呆呆5000粉的时候吧😒。在这之前我绝不可能再女装👚了 😊。 另外关于「霖呆呆的webpa…"}, {"id": "6982750764938559502", "title": "JS-手写方法", "desc": "手写call方法 手写Tab切换 手写斐波那契数列 手写快排 手写冒泡 手写拼接时间戳（yyyy-mmm-dd hh:ms:ss） 手写浅拷贝 手写深拷贝 手写数组去重 数组去重方法1 数组去重方法2"}, {"id": "6908970440492843015", "title": "VS Code 调试 js 的两种方法", "desc": "可以看到有两个选项，一个是调试 js 的，一个是调试 ts 的。我们选第一个。 可能会有一个询问你是否购买 pro 版的提示，你可以关掉不用理会，也可以选择购买。 你会发现，代码的运行是实时的。左边的绿色方块代表语句被成功执行，如果执行不成功，会变成红色。 请先下载安装这两个插…"}, {"id": "6968743571235340296", "title": "es6 module和 commonjs 的一些区别", "desc": "1.es6 module导出来的数据是值的映射,而且是只读的,如果把导出去的变量更改会报错,模块里面的数据变化了 导出去的数据也会变化 a.js b.js 2.commonjs导出的值是值的拷贝 可以"}, {"id": "6844904055005773831", "title": "[译]core-js@3, babel展望未来", "desc": "经过一年半的开发，数十个版本，许多不眠之夜，core-js@3 终于发布了。这是 core-js 和 babel \b补丁相关的功能的最大的一次变化。 core-js 是我自己爱好的项目，没有给我带来任何利润。它花了我很长的时间，真的很昂贵：为了完成 core-js@3，我在几个…"}, {"id": "6997202441649258509", "title": "【前端笔记】谈谈javascript中的原生函数", "desc": "大家好哇，今天来记录一下javascript的数字，内容主要参考《你不知道的JavaScript》（中卷），同时会加上自己的思考，以及实践的例子，有道是好记性不如烂笔头，读了书一定要勤做笔记，这样不仅"}, {"id": "6844903573348696072", "title": "密码强度的正则表达式（JavaScript）总结", "desc": "本文给出了两个密码强度的正则表达式方案，一个简单，一个更复杂和安全。并分别给出了两个方案的解析和测试程序。一般大家可以根据自己的项目的实际需要，自行定义自己的密码正则约定。 用户注册时，都会用到密码正则校验。要写出正确的正则表达式，先要定义表达式规则。 上述字面量匹配所有以字母…"}, {"id": "6844903987766886413", "title": "vue 自定义右键样式", "desc": "主要是靠双击和右键来操作，可操作多个模态框，跟操作windows类似，接下来在里面拆出一个功能块来写一篇文章，就是自定义系统默认的右键。 阻止默认右键。 获取当前右键点击时的x/y坐标，及id。 自定义右键菜单样式及内容，定位在指定的位置后显示。 返回对应点击目录的事件如:查看…"}, {"id": "6969785442564571143", "title": "数组方法及常见数组面试题", "desc": "数组常见的方法，api，迭代方法，数组的常见面试题，数组的应用，常考面试题，forEach，map，reduce"}, {"id": "6997243935018090510", "title": "数组方法", "desc": "数组方法整理 数组转换为字符串（toString()） 数组所有元素结合为一个字符串（join()） 数组末尾添加元素或删除元素（push()和pop()） 数组开头添加元素或删除元素 （shift("}, {"id": "6931587532379553800", "title": "浅谈JavaScript中this的指向问题及面试题", "desc": "this 作为JavaScript中的一个关键字，它的复杂度很高，主要原因是它所处不同场景的代表的指向是不一样的。这里先做一个结论，重要事情说三遍： 作为对象属性方法调用，都指向前面调用函数都那个对象。当然有的时候会出现各种变种或者干扰的面试题 箭头函数体内的this对象，就是…"}, {"id": "6844903878530433038", "title": "Smartour——让网页导览变得更简单", "desc": "在遇到网页内容有着较大调整的时候，往往需要一个导览功能去告诉用户，某某功能已经调整到另外一个位置。比较常规的办法是添加一个蒙层，高亮显示被调整的区域，然后通过文字介绍去完成引导。我们把这个功能称为“导览”，而 Smartour 则把这个导览的功能抽离出来，提供了一个开箱即用的解…"}, {"id": "6998434917923176479", "title": "JS面向对象、原型和原型链常见问题", "desc": "知识要点 了解JS的面向对象 了解JS中的原型及原型链 一些常见的问题 补充知识点 对象的理解 对象是对单个物体的简单抽象，它是一个容器，封装了一些属性和方法 构造函数 - 生成对象 JS 本质不是基"}, {"id": "6844903655926136846", "title": "iview admin 使用爬坑", "desc": "前段时间公司需要开发一个后台管理系统，时间比较急迫，一两天时间。想一想自己一点一点的搭建起来可能性不太大，就想着有没有现成的可以改一改，就找到了基于Vue.js和iview组件库的现成后台，拿来改改就可以了 iview admin。 1. iview UI组件库是基于Vue.j…"}, {"id": "6888911624871084046", "title": "JavaScript的offset、client、scroll家族属性", "desc": "​ 偏移量(offset dimension)是javascript中的一个重要的概念。涉及到偏移量的主要是offsetLeft、offsetTop、offsetHeight、offsetWidth这四个属性。当然，还有一个偏移参照——定位父级offsetParent。本文将详…"}, {"id": "6844903847249330184", "title": "时间切片（Time Slicing）", "desc": "上周我在FDConf的分享《让你的网页更丝滑》中提到了“时间切片”，由于时间关系当时并没有对时间切片展开更细致的讨论。所以回来后就想着补一篇文章针对“时间切片”展开详细的讨论。 从用户的输入，再到显示器在视觉上给用户的输出，这一过程如果超过100ms，那么用户会察觉到网页的卡顿…"}, {"id": "6844904184941133832", "title": "DD每周前端七题详解-第三期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "7000001669127733261", "title": "作用域、对象、递归函数、数组操作的那些事~", "desc": "作用域的赋值规则 1、局部作用域的查找规则 2、局部作用域的赋值规则 总结：局部作用域的赋值规则，会先赋值给本作用域声明的变量，如果本作用域没有声明该变量，那么这个赋值就会赋值给外层作用域 ，外层作用"}, {"id": "6977363265965785102", "title": "2021年，让我们手写一个mini版本的vue2.x和vue3.x框架", "desc": "mini版本的vue.js2.X版本框架 模板代码 首先我们看一下我们要实现的模板代码: 逻辑代码 然后就是我们要编写的javascript代码。 运行效果 我们来看一下实际运行效果如下所示: 思考一"}, {"id": "6911312117089959950", "title": "前端工程化必备，语义化版本号扫盲，支持任意版本号位数的比较方法", "desc": "因为最近在做 Node 相关的项目，涉及到版本号的处理，根据版本号大小做升级 js 处理的，而因为多加了一位数，导致线上的 js 不能升级。 所以只能重写一个支持任意位数的版本号对比方法。 顺便先来一个语义化版本号的扫盲吧。 在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷…"}, {"id": "6844903665363501063", "title": "微信小程序入门一篇就够了 豆瓣电影Top250", "desc": "一直从事安卓开发，前不久公司突然让我研究一下微信小程序。微信小程序的需求现在越来越多了，各种大小公司现在一开口就是来给我做个小程序，微信小程序以其“即用即走”的超便利特性受到越来越多用户的青睐，毕竟有些时候你并不想花时间或者流量去下载一个app，小程序能够以一种极轻的方式展现在…"}, {"id": "6989589374568513544", "title": "JS中常用的三种判断及循环语句", "desc": "JS中常用的三种判断语句以及常见的三种循环语句 - if、else if、else - 三元运算符 - switch"}, {"id": "6844903712553435149", "title": "ES6 系列之模块加载方案", "desc": "最后再延伸讲下 Babel 的编译和 webpack 的打包原理。 在了解 AMD 规范之前，我们先来看看 require.js 的使用方式。 data-main=\"vender/main\" 表示主模块是 vender 下的 main.js。 require 的第一个参数表示依…"}, {"id": "6844903984398860295", "title": "如何手动实现数组的splice方法 ? (V8源码级别)", "desc": "这篇文章是下一波大文章《原生JS灵魂之问(中)》的预告，下波文章会参照 V8 源码将数组中一些常用的的方法实现一遍，可以说全网独家首发，欢迎关注。 V8引擎中的数组方法采用JS语言实现，链接也附在了最后，如果对我的代码有质疑，随时对照源码检查。并且测试代码已经附在最后，亲测全部…"}, {"id": "6992885145187401736", "title": "12个有用的JavaScript数组方法技巧", "desc": "1、数组去重 1、from()叠加new Set()方法 字符串或数值型数组的去重可以直接使用from方法。 2、spread操作符(…) 扩展运算符是ES6的一大创新，还有很多强大的功能。 2、替换"}, {"id": "6871077497044205575", "title": "【译】设计一个 JS 插件系统", "desc": "许多开源库都有插件系统，例如：Vue、jQuery、Gatsby。插件是库和框架的一个常见特性，用于允许开发人员以一种安全、可伸缩的方式添加功能。那么怎么构建一个插件系统呢？让我们用JS构建一个自己的插件系统来回答这个问题。 从一个名为BetaCalc的示例项目开始。BetaC…"}, {"id": "6844904127374295053", "title": "面试官在“逗”你系列：不借助第三变量交换两个变量值的方案你有几种？", "desc": "在我们学习编程之初，就学习过变量的赋值操作，同时也学习了将一个变量的值赋值给另外一个变量。对于交换两个变量的值，很多童鞋都有解决方案。然鹅，对于面试官提出的不借助第三变量来交换两个变量的值，你能想到几种解决方案呢？ 了解学习了JS ES6的数组解构赋值的童鞋对此冷冷一笑，嘴角一…"}, {"id": "6943075831304912933", "title": "前端面试系列-JavaScript-call、applay、bind的区别及代码实现", "desc": "call 和 apply 的主要作用，是改变对象的执行上下文，并且是立即执行的。它们在参数上的写法略有区别；bind 也能改变对象的执行上下文，它与 call 和 apply 不同的是，返回值是一个函数，并且需要稍后再调用一下，才会执行。 调用 call 的对象，必须是个函数 …"}, {"id": "6910439952526344205", "title": "Serverless 实战：打造个人阅读追踪系统 | 🏆 技术专题第七期征文", "desc": "在互联网时代，知识可以说从未像如此一般廉价，但是再好的知识若是对个人没有产生价值的话，那也只不过是一种信息噪音而已。我在 个人知识管理：知识的三种形态 这篇文章中使用 材料 -> 资料 -> 知识 这样的路径来解释信息的流通，如何方便快捷并且有效地收集材料，再将其整理转化为有价…"}, {"id": "6844903807051268110", "title": "如何编写高质量的函数 -- 打通任督二脉篇[理论卷]", "desc": "凡是点进来的老铁都会受到 dva 的卖萌祝福。我会理论结合实践的去阐述：如何运用函数式编程思想去编写高质量的函数。 在这篇文章中，你可以收获一个满意的答案。 嗯，本来打算一篇搞定，可是写着写着就到了 10000 字了。虽然已经较简洁了，但是涉及到的知识有点多，还是要花字数去阐述…"}, {"id": "6972818418395250695", "title": "155个JavaScript基础问题（116-125）", "desc": "这是我参与更文挑战的第10天，活动详情查看：更文挑战 116. 输出什么？ 117. 下面哪个选项会返回6？ 118. 输出什么？ 119. 输出什么？ 120. 输出什么？ 121. 输出什么？ 1"}, {"id": "6844903768132157447", "title": "「干货」细说 call、apply 以及 bind 的区别和用法", "desc": "上一篇文章 《「前端面试题系列4」this 的原理以及用法》 中，提到了 call 和 apply。 它们最主要的作用，是改变 this 的指向。在平时的工作中，除了在写一些基础类，或者公用库方法的时候会用到它们，其他时候 call 和 apply 的应用场景并不多。 不过，突…"}, {"id": "6889663131934130183", "title": "写久了ES6的class、extends，你是否还记得在ES5中如何实现类与类的继承", "desc": "面向对象程序设计（Object Orientend Programming, OOP） 是一种计算机编程范式，通过尽可能的模拟人类的思维方式，使得软件的开发方法与过程尽可能接近人类认识世界，解决现实问题的方法和过程。其主要目标是重用、灵活性和扩展型。 OOP = 对象 + 类 …"}, {"id": "6844903682501246983", "title": "通过一个案例理解 JWT", "desc": "JWT（json web token）是为了在网络应用环境之间传递声明而基于 json 的开放标准，JWT 的声明一般被采用在身份提供者和服务器提供者间传递被认证的身份信息，以便于从资源服务器获取资源。 JWT 一般用于用户登录上，身份认证在这种场景下，一旦用户登录完成，在接下…"}, {"id": "6885855016788181000", "title": "【JavaScript】来好好盘一盘闭包！", "desc": "想要深入学习JavaScript这门语言，闭包这个概念几乎是绕不开的关键，今天就让我们一起好好地盘一盘，闭包到底是什么东西。 1. 什么是闭包 一个定义在函数内部的函数和所在作用域的组合称为闭包。 这么讲可能还是非常抽象，不过我们先有个概念，下面会详细解释这个概念。对于闭包，其…"}, {"id": "6844903503249276936", "title": "高效使用 JavaScript 闭包", "desc": "在 Node.js 中，广泛采用不同形式的闭包来支持 Node 的异步和事件驱动编程模型。通过很好地理解闭包，您可以确保所开发应用程序的功能正确性、稳定性和可伸缩性。"}, {"id": "6971020885310324749", "title": "前端轮询执行方法", "desc": "定时执行方法，如进度条进度询问等，也可以用于接口时间超时，轮询处理等，第一次是否需要立即执行，根据实际青情况处理，根据接口实际时间的情况，需在func中对定时器做处理，故方法将pollTimer re"}, {"id": "6844903510161489928", "title": "玩转异步 JS ：async/await 简明教程（附视频下载）", "desc": "在软件开发领域，简洁的代码 => 容易阅读的代码 => 容易维护的代码，而 ES2017 中的 async/await 特性能让我们编写出相比回调地狱和 Promise 链式调用更直观、更容易理解的代码，await 关键字接收一个 Promise，等待代码执行，直到 Promi…"}, {"id": "6844903684736827400", "title": "whistle--前端调试利器", "desc": "前端本地开发的场景中，我们需要频繁的改动代码，并需要实时看到效果，并且在一些开发场景中，我们需要将特定的请求代理到特定的IP、本地文件等，所以使用fiddler或whistle等本地、真机抓包调试工具是非常必要的。 在历史的长河中，我们是使用fiddler+willow再搭配小…"}, {"id": "6931889145916702734", "title": "JS实用技巧断点调试详解", "desc": "调试能力是一个程序员的生存根本，可是很多初学者却忽视调试。今天我们就来讨究一下JS的调试技巧。 本文章将会详细列举JS相关的各种实用调试技巧。如果您是JS的初学者，那么这篇文章将对您有很大的帮助。 程序就是函数堆砌起来的，程序的运行就是函数的执行过程。而通过JS调试，我们可以更…"}, {"id": "6995551737431998472", "title": "关于JS继承的几种实现方式", "desc": "JS实现继承的几种方式 原型链继承 借用构造函数继承 组合式继承 原型式继承 寄生式继承 寄生组合式继承"}, {"id": "6992119922625085476", "title": "JavaScript设计模式初探 | 8月发文挑战", "desc": "JavaScript设计模式初探 单例模式 策略模式 代理模式 发布-订阅模式 中介者模式 装饰者模式 状态模式 适配器模式 外观模式 迭代器模式 职责链模式 模板方法模式 享元模式 组合模式 命令模"}, {"id": "6910032329331179527", "title": "JS实现图片飞入特效", "desc": "从效果图中可以看出来，最外层是放了一个大盒子，最终的大图会铺满这个大盒子，而整个一张大图是被分割成了许多的小图，将它们打乱顺序，然后在一个一个的推入到大盒子中。 这里其实是用了100个\"小盒子\"，每个小盒子中装了大图的一部分，通过给它们加上背景图片然后设置对应的定位值，最后把这…"}, {"id": "6844903560266645511", "title": "better-scroll滚动排坑", "desc": "BetterScroll号称目前最好用的移动端滚动插件，因此它的强大之处肯定是存在的。要不...哈哈。个人感觉还是很好用的。这篇文章不是笼统的讲BetterScroll，而是单讲滚动，想要深入了解它，请移步或者这里。 绿色部分为 wrapper，也就是父容器，它会有固定的高度。…"}, {"id": "6993700413786718216", "title": " 手动实现浅拷贝与深拷贝", "desc": "浅复制是对地址的复制，并没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，而深复制是开辟一个新的栈。"}, {"id": "6844903589488361486", "title": "[译] JavaScript 单元测试框架：Jasmine, Mocha, AVA, Tape 和 Jest 的比较", "desc": "我的同事经常写一些有关单元测试如何让脑子平静下来且减少软件错误的文章。所以我也总会花时间来做测试。但是在你的项目中应该选那个框架来做测试呢？在匆忙做出决定之前，我搜集了 5 个最受欢迎的 JavaScript 单元测试框架，让你决定那一个才是最合适你的。 注意:如果你已经有更喜…"}, {"id": "6991000195580297247", "title": "边学边译JS工作机制---14.AST和优化建议", "desc": "概述 众所周知，把所有的JS代码写到一个大文件中是非常头疼的。这些代码不仅要在网络中传输，还要被解析，编译成字节码，最后才执行。 我们之前讨论了JS引擎，运行时，调用栈，以及V8。这一章，我们讨论一下"}, {"id": "6844903506185289735", "title": "关于移动端开发1px边框的一些理解及解决办法", "desc": "学习前端方向也有一段时间了，起初做过一些项目，总是发现做完之后自己的边框会变得比较粗，后面翻阅了部分资料慢慢的才了解了这个问题，大致列举了几种解决的办法。 在window对象中有一个devicePixelRatio属性，他可以反应css中的像素与设备的像素比。然而1px在不同的…"}, {"id": "6990980826452197407", "title": "js一张图搞定arrayBuffer/Blob/File/fileReader/canvas/base64的各种转换操作,以及文件上传", "desc": "js一张图搞定arrayBuffer/Blob/File/fileReader/canvas/base64的各种转换操作,以及文件上传"}, {"id": "6844903634321276942", "title": "前端遇上Go: 静态资源增量更新的新实践", "desc": "美团金融的业务在过去的一段时间里发展非常快速。在业务增长的同时，我们也注意到，很多用户的支付环境，其实是在弱网环境中的。 大家知道，前端能够服务用户的前提是 JavaScript 和 CSS 等静态资源能够正确加载。如果网络环境恶劣，那么我们的静态资源尺寸越大，用户下载失败的概…"}, {"id": "6847902217123397640", "title": "V8引擎详解（九）——协程&生成器函数", "desc": "本文是V8引擎详解系列的第九篇，重点内容是关于生成器函数的运作机制，以及协程的概念。文末会有已经完成的系列文章的链接，本系列文章还在不断更新欢迎持续关注。 在Javascript最初的规则中中，一个函数开始执行后，就会运行到最后或遇到return时结束，运行期间不会有其它代码能…"}, {"id": "6987565769366175751", "title": "VUE3（二十四）自定义alert弹窗组件", "desc": "我这里自定义了几个alert弹窗组件： 1：带有确定取消的alert弹窗组件：效果如下图所示 代码： 调用示例： 2：自定义alert，在自定义时间消失（仿layer），效果如下图所示： 代码： 调用"}, {"id": "6993676113486544904", "title": "JS的编译、执行、调用栈、栈溢出", "desc": "js代码的执行流程：编译----> 执行。 一、案例一 例如： 这段代码在执行前会先编译。 编译的过程： 创建一个该段代码对应的执行上下文，执行上下文有变量环境、词法环境。 从上而下的开始编译。 当遇"}, {"id": "6844903636489732103", "title": "Vue中eventbus很头疼？我来帮你", "desc": "怎么样？是不是除了在事件名字前面加了global:其他都没变化，如果你还不了解Vue这部分内容，我帮你准备好了，官方文档。 接下来，尽情的使用吧。 如果对此实现感兴趣，源码地址奉上。"}, {"id": "6998330860843991053", "title": "JavaScript中设置默认值的3种方法", "desc": "这是我参与8月更文挑战的第8天，活动详情查看： 8月更文挑战 我的首选一直是有条件地为变量赋值的三元运算符。但自从我发现“||” 可以用作选择器运算符，我一直在使用它。我发现我的代码更容易阅读👍 是的"}, {"id": "6844903673709985805", "title": "babel 用法及其 .babelrc 的配置详解，想做前端架构，拒绝一知半解", "desc": "babel 用法及其 .babelrc 的配置详解，想做前端架构，拒绝一知半解"}, {"id": "6879739215869935624", "title": "TypeScript 4.1 类型模板字符串实现Vuex的commit和dispatch类型判断", "desc": "本文是在掘金的这篇文章（TS 4.1 新特性实现 Vuex 无限层级命名空间的 dispatch 类型推断。）的基础上进一步的实现，在阅读本文之前，可以先到掘金看看这篇文章。 通过上面的Actions和Mutations，我们可以很轻松地通过infer拿到action名称、pa…"}, {"id": "6877269504804519943", "title": "【图表开发小案例】快来码一个性感妖娆的高逼格 “圆环”", "desc": "日常生产生活中，我们会经常读到或使用各种类型的图表。圆环（圆弧）便是一种较常见的类型，用于直观展现某一数据指标占整体的比例。本文以 HTML Canvas 的实现为主（当然，SVG 党可以在了解原理后自行实现），逐层介绍圆环图表开发的一些主要思路和原理。 图1 所示是一些我们平…"}, {"id": "6917925151317164045", "title": "JavaScript从编译到执行/预编译", "desc": "词法分析、语法分析、解释执行是有引擎控制的，预编译由编译器控制。 词法分析就是将我们写的代码块分解成词法单元。 在《你不知道的js》中是这样描述的：将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（token）。例如，考虑程序var a = …"}, {"id": "6974667122139988005", "title": "从零开始学习3D可视化之爆炸图", "desc": "说到爆炸图你第一时间想到的是什么？是这样吗？ 不不不，爆炸图现在一般指立体装配图，有了爆炸图工程技术人员在绘制立体装配示意图时就显得轻松多了，不仅提高了工作效率还减少了工作的强度。如今这项功能不仅仅是"}, {"id": "6885390648254398472", "title": "构造函数、对象实例和原型对象“三角恋关系”？", "desc": "（作为当代大学生，标题就是要够骚才能骗点击嘛，轻点喷..）下面开始开车1.构造函数创建对象可以通过以下三种方式：（1）利用newObject（）（2）利用对象字面量（3）利用构造函数Construct"}, {"id": "6844903926882385933", "title": "【译】JS解构的五种有趣用法", "desc": "定期回顾我写的JS代码，我发现解构运算无处不在。 获取对象的属性和访问数组内容是都是很常用的操作。而解构运算使得这些操作变得非常简单明了。 在这篇文章中，我将会讲解JS解构不同于常见用法的五种使用技巧。 1. 交换变量 temp是一个临时变量，在例子中存储了变量a的值，b的值赋…"}, {"id": "6844903810062614541", "title": "竟然不会函数节流跟防抖，来看这篇包学包会", "desc": "前言前端开发中会遇到一些频繁的事件触发，比如：window的scroll、resize；mousedown、mousemove，keyup、keydown等等，假如你对自己的代码不做什么的处理，你会发"}, {"id": "6844903831977869325", "title": "11 个 React Native 组件库和 JavaScript 数据可视化库", "desc": "1. NativeBase 超过 10k stars 和 1k fork，NativeBase 是一个广受欢迎的 UI 组件库，它为 React native 提供了几十个跨平台组件。当使用 NativeBase 时，你可以使用任何现成的本地第三方库，并且项目本身围绕着它提供了…"}, {"id": "6964669075909771301", "title": "手撕-JS Clone", "desc": "突然发现有两年没写过东西了，最近准备温习一下js基础以及一些比较实用的技术点。本想以小册的形式发布，不定时更新一个知识点，奈何等级不够，就先一篇一篇写吧，看之后能不能收到一个专栏里。 好了，废话不多说"}, {"id": "6844903760548855815", "title": "细读《你不知道的JavaScript·上卷》1-1 作用域是什么？", "desc": "通常，把 JavaScript 归类为 “ 动态 ” 或 “ 解释执行 ” 的语言，但是事实上它是一门 编译语言，不提前编译，编译结果也不在分布式系统中进行移植。 传统编译语言，在执行之前的三个步骤，统称为 “ 编译 ” 。 将有字符组成的字符串分解成（对编程语言来说）有意义的…"}, {"id": "6844904192650428429", "title": "Vue实现数据的懒加载节流版", "desc": "scrollHeight：指元素的总高度，包含滚动条中的内容。只读属性。不带px单位 scrollTop：当元素出现滚动条时，向下拖动滚动条，内容向上滚动的距离。可读可写属性。 clientHeight：元素客户区的大小，指的是元素内容及其边框所占据的空间大小，实际上就是可视区…"}, {"id": "6992414043625488397", "title": "JavaScript的左查询和\"右查询\"", "desc": "标准应该称为JavaScript的LHS和RHS，含义是“赋值操作的左侧和右侧”，并不意味着就是“=赋值操作符的左侧和右侧”。例如console.log(a)，对a进行的是RHS。"}, {"id": "6950679052336234533", "title": "js - 理解函数柯里化", "desc": "怎么理解柯里化柯里化的意思就是将一个多元函数，转换成一个依次调用的单元函数。curry 的这种用途可以理解为：参数复用。本质上是降低通用性，提高适用性。上面代码，我们将返回对象属性的部分通过函数编程实"}, {"id": "6968290299516977189", "title": "js的执行机制--EventLoop", "desc": "js的执行机制 -EventLoop 单线程任务 -> 同步任务 + 异步任务-> 宏任务 + 微任务"}, {"id": "6844903513449824269", "title": "JavaScript 观察者 (发布/订阅) 模式", "desc": "所以主要的想法是我们要有一个大的对象来处理订阅（Subject/Observable），以及很多对象（Observers）被订阅然后等待事件触发。 还有一个重要的点就是Observers接受消息的顺序是随机的，所以你不要依照Observers添加的顺序。 当你只想要你需要的数据…"}, {"id": "6996615733794832392", "title": "JSON自定义", "desc": "如果JSON.stringify()被要求序列化JSON格式本身不支持的值，它将查看该值是否具有toJSON()方法，如果是，则调用该方法，然后将返回值字符串化以代替原始值。"}, {"id": "6844903517346349070", "title": "小程序中吸底按钮适配 iPhone X 方案", "desc": "是bug就得修，是体验问题就得优化，于是立马搞了一台iPhone X开始研究。 网页端的适配还好，有viewport meta标签以及下面的方案进行处理。具体可参看这里 但比较尴尬了，从四个角被裁掉的表现上可以推测小程序里的viewport-fit默认为cover（根据表现猜测…"}, {"id": "6844903542327607310", "title": "H5页面中尝试调起APP", "desc": "这种功能现如今应该非常普遍了，淘宝H5，知乎H5等等。。。 点击后会调起APP或者打开下载页面或者直接进行下载。 但是我这里发现知乎的这个功能有点不一样 他的逻辑是先提示我是否打开手机中的知乎APP（浏览器的机制询问用户操作许可），然后接着又弹出下载的提示。 URL s…"}, {"id": "6844903942057525261", "title": "JS异步--async,await,promise,setTimeout 执行顺序", "desc": "如果遇到await，就将await执行后，后面的代码放入等待队列（因为async和await的本质还是promise的运用，返回的是一个promise对象）。 备注：async是generator的语法糖， 只是把generator的function后面的*换成了前面的asyn…"}, {"id": "6955967831217274887", "title": "深入 JS 类型检测原理和模拟实现", "desc": "思维导图 JS 中的类型 基本类型，number，string，null，undefined，Boolean，es6 新增的 symbol，es11 中的 bigint 总共 7 种基本类型 引用类型"}, {"id": "6985049578810638343", "title": "[JS]【二】---基本数据类型之【Number篇】", "desc": "核心知识点 Number数字数据类型简述 isNaN（检测一个值是否为非有效数字）方法 自增及其特殊性 把其他类型值转换为数字类型 数组对象以及map方法回调函数的类型转换例子 Number数字类型 "}, {"id": "6916229848126111751", "title": "一文学废排序", "desc": "网易云音乐的歌单排序功能十分鸡肋，只能按照歌曲名、歌手名、专辑名排序。别说处理一些复杂的规则了，他连从 Z-A 这种简单的倒序逻辑都搞不定。这对像我这种红星单动不动就几千首曲子或是喜欢给曲子分类、制作歌单的朋友来说简直就是灾难。 于是，我写了一个专门用来给歌单中的歌曲排序的爬虫…"}, {"id": "6844903501756104712", "title": "js实用的十个小技巧", "desc": "补充：评论里面有人建议用!!代表true，用!代表false，这一点认可，这样操作是有好处的，!!代表强制转化成true，这样做的目的就是保证值只能在true/false中取，而非其它值。最近在看vue源码，细想一下，尤神也有对这点的应用 ~~NaN等于0，这个原理就是js会先…"}, {"id": "6973848523922440228", "title": "构建 Typescript 知识体系(十二)-如何编写TS类库", "desc": "这是我参与更文挑战的第十八天，活动详情查看:更文挑战 这里我们学习如何在 TS 中使用外部类库，以及如何为他们编写声明文件 类库一般分为三类 全局类库 模块类库 UMD 类库 如:jquery 是一种"}, {"id": "6844903874210299912", "title": "JavaScript 设计模式（一）：单例模式", "desc": "单例模式是创建型设计模式的一种。针对全局仅需一个对象的场景，如线程池、全局缓存、window 对象等。 JavaScript 是一门非正规面向对象的语言，并没有类的定义。而单例模式要求一个 “唯一” 和 “全局访问” 的对象，在 JavaScript 中类似全局对象，刚好满足单…"}, {"id": "6984724514579955743", "title": "客户端存储指南", "desc": "在以下场景中，可以考虑选用客户端存储： 保留应用程序的状态，例如活动面板、主题、输入选项等。 出于性能考虑，需要预上传、预加载等场景 离线应用，除了初始下载和更新之外没有其他网络请求 客户端存储的数据"}, {"id": "6931897505240383501", "title": "React后台管理前端系统(基于开源框架开发)起步式", "desc": "写博客不容易，如果对你有帮助请点个赞吧。有时间的可以评论一下。 这个系统的搭建背景是这样的，有一个朋友想看到现有系统中的一些,用户数据,新闻数据,只需要看到,短期不需要增删改功能,让我搭建一个简单的后台系统给他看.接到任务作为一个有四年开发经验的人来说这也太简单了吧,开始干吧,…"}, {"id": "6963585876492288031", "title": "神策数据王磊：如何用 JS 实现页面录制与回放", "desc": "本文根据神策数据资深前端研发工程师王磊《如何用 JS 实现页面录制与回放》的直播整理而成。以下为正文： 一、业务背景 对于研发来说，总是需要处理一些线上问题。To B 和 To C 企业在应对线上问题"}, {"id": "6974711290745454623", "title": "js实现串联所有单词的子串", "desc": "这是我参与更文挑战的第6天，活动详情查看： 更文挑战 题目 描述 给定一个字符串 s 和一些 长度相同 的单词 words 。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。 "}, {"id": "7002236579800416263", "title": "JavaScript数据结构-集合｜8月更文挑战", "desc": "1. 集合简介 集合（set）是一种包含不同元素的数据结构。集合中的元素称为成员。集合的两个最重要特性是：首先，集合中的成员是无序的；其次，集合中不允许相同成员存在。 2. 集合的定义 不包含任何成员"}, {"id": "6938184217868107812", "title": "力扣 (LeetCode)-合并两个有序数组,字典,散列表｜刷题打卡", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 有时候，一些键会有相同的散列值。不同的值在散列表中对应相同位置的时候，我们称其为 冲突。处理冲突有几种方法：分离链接、线性探查和双散列法 分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。 88.…"}, {"id": "6921168054046949383", "title": "Vue前端导出Excel文件实现方案", "desc": "表头名数据 json_fields：可以选择要导出的字段，并为字段分配标签。该数据类型为 Object ，key 对应的是标签，value 对应的是 JSON 字段，将导出与数据列表相同字段的数据。如果需要自定义导出的数据，可以定义回调函数。 然而在实际的业务场景下，导出表格数…"}, {"id": "6844903623311228942", "title": "函数防抖与函数节流", "desc": "函数防抖与函数节流"}, {"id": "6844903677317087246", "title": "你试过不用if撸代码吗？", "desc": "当然，使用if语句没有任何不对的地方。但是，不使用if的话，有时候可以增加代码的可读性。这一点并不是绝对的，如果完全不使用if语句的话，代码可读性也许会更差。这需要你根据不同情况去判断。"}, {"id": "6844903511956815885", "title": "主题色提取", "desc": "在做音乐webapp的时候，被腾讯的一款本地音乐播放器（轻听）的播放界面惊艳到了（如下图），于是决定‘复制’下来。 首先想到的是绘入canvas中利用getImageData提取数据然后分析得到主题色，因为用的qq音乐api遇到了跨域问题，在解决跨域问题后（具体方法看这里跨域那…"}, {"id": "6884014516582613000", "title": "JavaScript的rAF，你掌握了吗？", "desc": "我们先从字面意思上理解requestAnimationFrame，「request - 请求」，「Animation - 动画」， 「Frame - 帧率;框架」，rAF难道是JS的动画框架???，结果显而易见并不是。但确实rAF和动画有关系 requestAnimationF…"}, {"id": "7002206661603491871", "title": "CO源码解读", "desc": "Co是什么? co 函数库是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。 其实就是Generator函数的语法糖。"}, {"id": "6844903588737597448", "title": "React实战篇（React仿今日头条）", "desc": "上次初学用 react 写了个后台管理，这次便寻思写个移动端的项目。便有了这次的这个项目。 这个项目以前写了个 vue 的版本。有兴趣的可以 点击进入 通过 import() 方法加载组件， 在通过高阶组件处理 import 返回的 Promise 结果。 通过 react-r…"}, {"id": "6844903664998416392", "title": "Vue.js源码角度：剖析模版和数据渲染成最终的DOM的过程", "desc": "因为最近做的项目采取的技术栈是vue.js，加上自己对vue.js的底层运行机制很感兴趣，所以最近每天花点时间，大概一两个月左右把vue.js源码捋了一遍，在这里针对模版和数据渲染成最终的DOM的过程这一部分做一下总结。 在看源码的过程当中，可能当中有自己理解出偏差或者大家有理…"}, {"id": "6996903867082358797", "title": "常用utils.js 后续完善", "desc": "常用工具类，后续追加中。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。"}, {"id": "6844903618240315406", "title": "JavaScript函数式编程之深入理解纯函数", "desc": "纯函数是函数式编程的基础，需要重点理解。纯函数的作用，可以看《JavaScript函数式编程之为什么要函数式编程（非严谨技术层面的扯淡）》。 他的重点在于“相同的输入，永远会得到相同的输出”，后面所说的副作用也是为了满足这一点。 在详细说明纯函数之前，先讲两个其他的概念：可变数…"}, {"id": "6844903698917752839", "title": "前端优化常用技术心得", "desc": "从建立http连接开始，到页面展示到浏览器里，经历了加载、执行、渲染，重构的几个阶段。将分享下我自己的心得和其他人的优秀经验。 浏览器是友善的客户端，对同域名并发请求是有数量限制，过去浏览器一般是2个，支持H5的一般是6个；并且服务器端是可以关闭请求。 有朋友不理解，为什么不是…"}, {"id": "6972857036212011022", "title": " 防抖与节流", "desc": "每天做个总结吧，坚持就是胜利！ 2021-06-12： 防抖与节流； 简单实现手写防抖与节流； 端午安康！"}, {"id": "6996866782782816264", "title": "一篇文章带你了解JavaScript-对象", "desc": "JavaScript 中的所有事物都是对象：字符串、数值、数组、函数...此外，JavaScript 允许自定义对象。希望本篇文章能给你带来帮助 创建对象 对象直接量 对象直接量是由若干名/值对组成的"}, {"id": "6844903731079675917", "title": "DOM事件机制", "desc": "DOM级别一共可以分为四个级别：DOM0级、DOM1级、DOM2级和DOM3级。而DOM事件分为3个级别：DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理。由于DOM 1级中没有事件的相关内容，所以没有DOM 1级事件。 当希望为同一个元素/标签绑定多个同类型事…"}, {"id": "6844903577454919693", "title": "前端优化系列 - JS混淆引入性能天坑", "desc": "前言 现在用户手机性能，浏览器性能，网络性能，越来越好，后端逻辑逐渐向前端转移，前端渲染变得越来越普遍。前端渲染主要依赖JS去完成核心逻辑，JS正变得越来越重要。而JS文件是以源码的形式传输，可以在Chrome Devtools上轻易地被修改和调试。 现在用户手机性能，浏览器性…"}, {"id": "6983666380402851871", "title": "浏览器的多进程架构、事件循环运行机制解析", "desc": "event loop典型案例详解，一定给你讲懂，我梳理后就再也不迷茫了。深入理解事件循环以及事件循环下的宏任务和微任务"}, {"id": "6844904086874095623", "title": "前端劝退预警：JavaScript 工具链不完全指南", "desc": "经过这么多年的发展，JavaScript 早已经不是当年那个不太起眼的脚本语言。如今的 JavaScript 可以说是风光无限，在 Web 前端、移动端、服务端甚至物联网设备上都大展身手，到处都有它的身影。 在 JavaScript 语言日渐强大的同时，与其配套的开发工具也蓬勃…"}, {"id": "6844903784133427208", "title": "ESLint 静态代码检查", "desc": "ESLint是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。如果每次在代码提交之前都进行一次eslint代码检查，就不会因为某个字段未定义为undefined或null这样的错误而导致服务崩溃，可以有效的控制项目…"}, {"id": "6845166891447631879", "title": "ES6常用但被忽略的方法（第九弹Module）", "desc": "ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "7002212031038242852", "title": "JavaScript语言基础（十）事件", "desc": "JavaScript与HTML的交互是通过事件实现的。围绕着使用事件，需要考虑内存与性能问题。使用JavaScript也可以在浏览器中模拟事件。"}, {"id": "6844903725903921166", "title": "微信小程序开发总结与心得", "desc": "最近的工作重心一直在小程序，也开发了几个小程序，对小程序开发的流程及相关技术相对比较熟悉，在开发过程中也总结了一些心得经验、了解一些小程序文档上没有的东西、踩了一些坑。所以想着写篇文章记录下来，并借此将小程序开发的相关知识进行梳理，方便以后参考，也作为自己工作的阶段性总结。同时…"}, {"id": "6967152385776943134", "title": "跟着大佬走——node中的eventloop", "desc": "废话不多说，书接上文。 node 中的 eventloop node 也是单线程，在处理 eventloop 上与浏览器稍有不同。"}, {"id": "6967145826107801630", "title": "到底为什么写func.apply(this, arguments)", "desc": "接上回日记，在我坚持不懈的努力创作下，终于将我的创作者中心中的部分数据变为了正数.........."}, {"id": "6992772589441515550", "title": "前端刷题路-Day71：合并区间（题号56）", "desc": "以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖.."}, {"id": "6996932998692077599", "title": "ES6 JS防抖节流实现", "desc": "防抖 // 定时器方式实现 // reactHook方式实现 // 测试用，需要改变窗口大小 节流 // 定时器方式实现 // 时间戳方式实现 // 测试用"}, {"id": "6897095512954077191", "title": "JS原型&原型链", "desc": "解释： 原型是首创的模型，代表同一类型的人物、物件、或观念(维基百科)。那边对应到javascript 中来, 我们可以理解为：原型是对象创建之初的的模型，拥有同一类对象的公有属性和行为(方法)。 在js中每个函数都有一个指向原型的属性——prototype，称为原型对象。原型…"}, {"id": "6972469448372387848", "title": "对象与浅拷贝的妙用", "desc": "前言 开发过程中我们经常遇到需要循环对象数组，递归循环树查询某个对象，对对象进行赋值，如果每次查询都用到循环都会消耗很大的资源，这个时候 我们就可以巧妙的使用对象来完成查询、浅拷贝进行赋值"}, {"id": "6981692827872788488", "title": "从现在开始用 NanoID 会取代UUID", "desc": "如果你的项目有生成唯一 key 或者使用 uuid 的场合，那么从现在开始，请使用 NanoID。NanoID 是一个创建唯一 key 的轻量级的脚本库"}, {"id": "6986585164155453470", "title": "初识 React-Native —— 开发环境搭建、选择和坑点", "desc": "前言 （废话） 上次搞完小程序，老大说接下来有个项目，可能需要做 App 。我心想，先是管理后台、接着是 H5、再到 小程序，这回又搞 App 。要是这次搞完 App 那我岂不是也算多端通吃啦！？前端"}, {"id": "6994219722208182308", "title": "js的四种继承方式", "desc": "本文介绍实现继承的四种方式 1. 原型链继承 2. 组合继承 3. 寄生式组合继承 4. es6 class继承"}, {"id": "7002032849318576165", "title": "详解JS中常用的循环和遍历", "desc": "详解JS中常用的循环和遍历，包括常用循环和常用遍历方法的使用和注意点，以及这个的使用场景和代码的例子"}, {"id": "6844903639945871368", "title": "Vue Render介绍和一些基本的实例", "desc": "Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力，这就是render 函数，它比 template 更接近编译器。（从官网复制的，慌得一批，其实简单来说就是以函数的方式写HTML，可控…"}, {"id": "6862175878475546638", "title": "在Vue中使用HOC模式", "desc": "HOC它是一个模式，是一种思想，并不是只能在React中才能用。所以结合Vue的特性，一样能在Vue中玩HOC。 并不是说哪种技术新颖，就得使用哪一种。得看这种技术能够解决哪些痛点。 HOC主要解决的是可复用性的问题。在Vue中，这种问题一般是用Mixin解决的。Mixin是一…"}, {"id": "7003619178464837668", "title": "JavaScript 类", "desc": "ES6中的类 好在 ES6 中加入了新特性 class，new 跟 function 搭配的怪异行为终于可以退休了（虽然运行时没有改变），在任何场景，我都推荐使用 ES6 的语法来定义类，而令 fun"}, {"id": "6994051026869305351", "title": "PIXI.js中的层级问题", "desc": "笔者在之前使用PIXI.js的时候，经常出现忽略层级而导致画板上的内容不能正常交互的问题。于是便有了写下这篇博客的想法。"}, {"id": "6898219830027714574", "title": "从0到1教你写一个JS的多语言库", "desc": "大部分js的多语言库似乎都采用了json格式，可以很方便的转为对象解析，还可以分多级结构来组织配置内容。但是我个人感觉json格式对非技术人员（比如正经请个翻译的话）并不太友好。加上联想起过去做iOS开发多语言时的体验，我还是倾向于选择普通的文本格式，基本上完全照搬iOS里的.…"}, {"id": "6895478706580488200", "title": "纯前端实现一键生成二维码,打开新页面展示二维码（原来可以这么简单）", "desc": "首先我们需要生成二维码，而且要打开一个新的页面展示，那么我们需要img标签来展示图片的载体，那么生成图片src必不可少的。无论我们的项目是spa，还是多页面应用，我们这里都要用base64储存图片的信息。所以需要把生成的二维码转化成base64。接下来让我们整理一下思路。 第一…"}, {"id": "6963074150034309127", "title": "js笔记", "desc": "lion小学生的自学前端时的笔记,从最基础的到复杂的一些原理实现,包括一些高阶函数,一些js内部原理"}, {"id": "6999185394428297230", "title": "JS实用篇复习笔记（6）", "desc": "1、浏览器调试 F12 如我们所见，暂停脚本有以下三种主要方式： 一个断点。 （直接在控制台打） 该debugger声明。（在代码中写 debugger"}, {"id": "6844903512413831175", "title": "也许 Vue+CSS3 做交互特效更简单", "desc": "做项目就难免会开发交互效果或者特效，而我最近开发的项目一直在使用vue，开发技术栈方面，理所当然就使用了vue+css3开发，过程中发现使用vue+css3开发特效，和javascript/jquery+css3的思维方式不一样，但是比javascript/jquery+css…"}, {"id": "6977720261625774116", "title": "5分钟带你做个可爱的滑动导航条！", "desc": "今天来带大家做一个可爱😊的滑动导航栏效果，这个demo很基础，但是使用场景非常广泛噢 ！作为前端大白，今天就手把手一步一步教你实现"}, {"id": "6989613051557183501", "title": "小白看过来！防抖和节流！", "desc": "前言 面试会被经常问到的知识点，关于防抖（debounce）和节流(throttle)，而他们也是我们在做项目是会经常遇到的问题，如果用户点击过多，就会一直不断的给服务器发送请求，就会造成严重的资源浪"}, {"id": "6992197325535838215", "title": "postMessage踩坑实践", "desc": "在低代码编辑器中进行页面预览常常不得不用到iframe进行外链的url引入，这就涉及到了预览页面与编辑器页面数据通信传值的问题，常常用到的方案就是postMessage传值"}, {"id": "7002962044039233572", "title": "js循环生成表格", "desc": "1.获取dom元素 2.操作元素 通过循环来生成tr和td 3创建dom元素 4用元素创建表格比较两种方法的区别"}, {"id": "6974339572272480263", "title": "js内功修炼-基础篇", "desc": "本文主要针对面试中容易遇到的考点进行梳理，包括js数据类型、判断数据类型的方式、手动实现深浅拷贝、原型、原型链、继承、执行上下文、执行上下文栈、作用域、作用域链、闭包等"}, {"id": "6986843436951289870", "title": "ExpressJs中间件原理学习", "desc": "ExpressJs是一个很受欢迎 Node.js Web 应用程序框架。在使用过ExpressJs后，想更深层次的学习一下这个框架的中间件源码设计，做到知其所以然。"}, {"id": "6885482174103945224", "title": "ES11屡试不爽的新特性，你用上了几个？", "desc": "Promise.all：可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值 返回结果里会将返回一个数组，包含了所有成功与失败的结果，数组每项为对象，均含…"}, {"id": "6844903718249299981", "title": "2019年前端面试都聊啥？一起来看看", "desc": "JavaScript ES2015 规范出现后，一切都大变样啦。 该规范很大——随着对modules（模块）原生支持以及不断发展的函数式编程，新的 JavaScript 语言重焕新生。并且每年持续推出 ES2016，ES2017 ... 然而在面试或招聘前端开发时，期望、现实和…"}, {"id": "7003223817208201247", "title": "js数据结构之有序栈", "desc": "有序栈的类实现方式 现在函数式编程比较流行，这里再给出函数式的实现方式。明显可以看出，函数式的实现方式更加简洁明了，对外暴露的变量和函数都通过return的方式。"}, {"id": "6860253625030017031", "title": "从一道面试题说起：GET 请求能传图片吗？", "desc": "忘了在哪里看到的这个题目，觉得挺有意思，来说下我的答案及思考过程。 首先，我们要知道的是，图片一般有两种传输方式：base64 和 file 对象。 base64 的本质是字符串，而 GET 请求的参数在 url 里面，所以直接把图的 base64 数据放到 url 里面，就可…"}, {"id": "7002143873640169502", "title": "JavaScript小游戏", "desc": "本小游戏是学习JavaScript的时候，参考别的大佬书写的小游戏 这个小游戏，运用了HTML ， css ， JavaScript进行书写的 代码如下 html部分 css代码 JavaScript"}, {"id": "6975072912483041294", "title": "《XDM，JS如何函数式编程？看这就够了！（五）》", "desc": "纪伯伦曾说过：我们都已经走的太久了，以至于忘了为什么出发。 所以，第五篇开始前，咱们不如先来一个对前面每篇的梳理......"}, {"id": "6994970135433854990", "title": "🔥JavaScript作用域和变量提升，你真的会了么？（一）", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 作用域（Scope）的概念 概念：通俗来讲，作用域是一个变量或函数的作用范围。作用域在函数定义时，就已经确定了。 目的：为了提高程序的可靠"}, {"id": "6844904143891464200", "title": "面试官：请用一句话描述 try catch 能捕获到哪些 JS 异常", "desc": "其实为啥会安全感低呢，是因为界限模糊。 面试者：能捕捉到的异常，必须是线程执行已经进入 try catch 但 try catch 未执行完的时候抛出来的。 我们我们来分析下这个一句话描述 try catch 的含义。 主要分为三段：try catch 之前，之中，之后。 代码…"}, {"id": "6999879739502493703", "title": "LeetCode54-螺旋矩阵 | 算法练习系列", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 前言 螺旋矩阵是一道很有意思的题目，螺旋矩阵也就是从二维数组中取出各项，其实没什么特定的算法来解螺旋矩阵，只要把四个边界（向右，向下，向左"}, {"id": "7005086431332794382", "title": "this 指向问题", "desc": "一道 this指向问题 从输出结果看 setTimeout的对象是window,所以输出结果如上。 在函数内部使用_this = this 使用箭头函数 使用apply call bind 使用app"}, {"id": "6976997881605521445", "title": "从微服务到微前端：浅谈微前端的设计思想", "desc": "1、引入：什么是微服务？ 微服务是近几年在互联网业界内非常🔥 的一个词，在俺们大学沸点工作室Java组也已经有Spring Cloud微服务的实践先例，那我们作为前端的角度，该怎么理解微服务呢？ 可以"}, {"id": "6997345741010108446", "title": "js 冷门知识 - 弊端过多的 with 语句", "desc": "我相信大部分人都没有认识过 js 的 with 语句，大概是因为很少有人或教材提起过它。with 语句的设计初衷大概是希望简化对象的调用，减少不必要的指针路径解析运算，可惜它的使用弊端多且严重"}, {"id": "6968113844086374431", "title": "最全 ECMAScript 攻略之 ES2022-ES13", "desc": "2022 提案为 ECMAScript Class 新增了下表中所描述的特性（绿色为现有特性） 前置知识 在理解 Class 字段特性之前我们需要了解一下面向对象编程的一些概念，话不多说，答案都在上图"}, {"id": "6884420198389973000", "title": "h5,小程序飞入购物车(抛物线绘制运动轨迹点)", "desc": "无论是小程序还是h5飞入购物车无非就是平抛 ，或者是上抛两种情况，对于这两种情况，初中就开始学习抛物线理论知识是完全可以搞定的，高中一年级物理学的自由落体运动，平抛运动就是抛物线理论的具体实现。 此方案的本质就是，根据购物车起点和终点，分别做为抛物线的两点，这样一个感念就是要以…"}, {"id": "6967266465854521374", "title": "JavaScript Array、Object、数组、对象等数据转换及处理总结（一）", "desc": "JavaScript Array、Object、数组、对象等数据转换及处理总结（一） JS 对象转数组 应用场景实例：将某年级一班的对象格式转成数组格式 Object.entries 方法返回一个给定"}, {"id": "6902003222890692615", "title": "Typescript代码整洁之道", "desc": "最近半年陆续交接了几位同事的代码,发现虽然用了严格的eslint来规范代码的书写方式，同时项目也全量使用了Typescript,但是在review代码的过程中,还是有很多不整洁不规范的地方。良好的代码具有很好的可读性,后续维护起来也会令人愉悦,也能降低重构的概率。本文会结合Ty…"}, {"id": "6862156294611009544", "title": "从图片裁剪来聊聊前端二进制", "desc": "前两天项目中有个小需求：前端下载后台小哥返回的二进制流文件。 然后非IE的通过URL.createObjectURL()将Blob(Blob是啥？不知道？没关系，我下面会具体装逼讲解的)构建为一个object URL对象、指定文件名&#x26;文件类型、创建a链接模拟点击实现下…"}, {"id": "7006950361122471967", "title": "JS 原型链", "desc": "原则 通用 函数的 __proto__ 指向 Function.prototype，（函数的__proto__指向它构造函数的原型） 原型对象的 __proto__ 指向 Object.prototy"}, {"id": "6993499351288905742", "title": "一文搞懂 JavaScript 中的 6 种继承方式！", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 1. 原型链继承 父类Parent有属性和方法，子类Child没有属性和方法。实现继承的关键是，子类Child没有使用默认原型，而是将其替换"}, {"id": "6844904064262619144", "title": "2020 前端面试 | 第二波面试题总结", "desc": "哈，看样子年后跳槽还是大家比较关心的一件事情了，继第一波面试题汇总的反响和评论，观看和点赞的朋友们很多，我继续将后续面试的一些内容写出来，有很多面试题答案我自己写的比较含糊，但是在面试的过程中是描述的表较多的。毕竟写文字要写出来太多了。我也只是写了一个大概，如果对答案不太满意的…"}, {"id": "6976246792694431758", "title": "Promise 概述", "desc": "ECMAscript 6 原生提供了 Promise 对象，在一定程度上解决了以往“回调地狱”的问题。 Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。"}, {"id": "6997946965497479199", "title": "对this的理解 以及实现一个apply、call、bind", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 this 全局的 this 这个this指向全局 windows object中的this 第一种是obj自己本身调用的指向obj 第二种是"}, {"id": "6974948689521426445", "title": "技术周报 · 2021-06-18", "desc": "小编推荐 开源带给我什么 CSS ::marker 让文字序号更有意思 Conformance for Frameworks JavaScript 聊一聊进行中的 TC39 提案 JavaScript"}, {"id": "6988759009260109855", "title": "Canvas描绘多彩的星星 | HTML5图形开发 从最基础开始学Canvas(二)：基本图形变换、状态的保存恢复及代码实现五角星", "desc": "基本的图形变换包括位移、旋转、缩放，在canvas中，这些操作都是基于坐标系原点进行操作的。在复杂多图形处理中，不同的图形应用的变换多种多种，这样就有可能产生混乱，因此提供save和restore"}, {"id": "6881493149261250568", "title": "Facebook 新一代 React 状态管理库 Recoil", "desc": "在 React Europe 2020 Conference 上， Facebook 软件工程师 Dave McCabe 介绍了一个新的状态管理库 Recoil。 Recoil 现在还处于实验阶段，现在已经在 Facebook 一些内部产品中用于生产环境。毕竟是官方推出的状态管…"}, {"id": "6998345449090318372", "title": "技术周报 ·  2021-08-20", "desc": "小编推荐 渲染性能优化的全局视角 如何用研发效能搞垮一个团队 探索实践 生成浏览器唯一稳定 ID 的探索 如何玩转 WebGL 并行计算 Node 服务资源治理 拓展阅读 浅谈弹幕的设计 《重构，改善"}, {"id": "7002101968436985863", "title": "ES6-Symbol", "desc": "ES 6 引入了一个新的数据类型 Symbol，它是用来做什么的呢？ 为了说明 Symbol 的作用，我们先来描述一个使用场景。 我们在做一个游戏程序，用户需要选择角色的种族。 那么用户选择种族后，就"}, {"id": "6993852176229482504", "title": "🚀详解JavaScript系列之数组(八)", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 前言 forEach() 遍历 forEach()方法需要一个函数作为参数。这种函数，是由我们创建但是不由我们调用的，我们称为回调函数。数组"}, {"id": "6844903996872720391", "title": "前端Vue中常用rules校验规则", "desc": "前提Git地址前端常用的正则校验git地址欢迎关注前端公众号【小夭同学】1、是否合法IP地址2、是否手机号码或者固话3、是否固话4、是否手机号码5、是否身份证号码6、是否邮箱7、合法url8、验证内容"}, {"id": "6993940120051122189", "title": "『面试的底气』—— 设计模式之JavaScript中的单例模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6983313955233988644", "title": "JS循环大总结， for, forEach，for in，for of, map区别", "desc": "map（数组方法）： 特性： map不改变原数组但是会 返回新数组 可以使用break中断循环，可以使用return返回到外层函数 实例： forEach（数组方法）： 特性： 便利的时候更加简洁，效"}, {"id": "6956170676327677966", "title": "通过面试题研究JavaScript数据类型转换", "desc": "JavaScript 本身是一门弱类型语言，这意味着 JavaScript 变量没有预先确定的类型。变量当前的类型由其值所决定，也许上一秒种的string，下一秒可能就是个array。"}, {"id": "6997578178566979591", "title": "React 路由", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 安装： cnpm install react-router-dom --save ReactRouter三大组件： Router：所有路由"}, {"id": "6868849475008331783", "title": "【前端体系】从一道面试题谈谈对EventLoop的理解", "desc": "因为掘金改版之后对于字数有了一定的限制（亲测了下在12500字左右，所以看到标题还有几万字长文的标题一定是在唬你的😂）文章美化排版之后字数超出了限制所以打算将后面的部分单独拎出来写, 这样也更好的写出相对比较深入的一点的内容, 对于【前端体系】这类文章内容一定是包括但不限于标…"}, {"id": "6991208255452086285", "title": "最小堆最大堆了解吗？一文了解堆在前端中的应用", "desc": "⚡序言 我们都知道树是一个数据结构，但可能很少听到堆这个数据结构。其实，堆就是一种特殊的完全二叉树。而对于前端来说，我们通常了解最大堆和最小堆，也经常用最大堆和最小堆来解决各种问题。比如，数组中的第K"}, {"id": "6844903548870721549", "title": "Vue学习看这篇就够", "desc": "可以看看。"}, {"id": "6844903840681033742", "title": "「中高级前端」窥探数据结构的世界- ES6版", "desc": "1. 什么是数据结构？ 数据结构是在计算机中组织和存储数据的一种特殊方式，使得数据可以高效地被访问和修改。更确切地说，数据结构是数据值的集合，表示数据之间的关系，也包括了作用在数据上的函数或操作。 数据是计算机科学当中最关键的实体，而数据结构则可以将数据以某种组织形式存储，因此…"}, {"id": "6844903569422811150", "title": "记录面试中一些回答不够好的题（Vue 居多） | 掘金技术征文", "desc": "flex 布局 与 grid 布局。 实现 Vue SSR 。 从 SPA 使用最小成本迁移到 SSR 。 根据指定元素，在数组里面找出 ff 数组（ff 数组这个名字是我瞎说的）。比如数组 [2, 3, 6, 7] ，指定元素 7，则 ff 数组是 [2, 2, 3]（2+2…"}, {"id": "7001046290763087908", "title": "实现pc端鼠标滚轮缩放图片的步骤", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 之前写一个图片预览插件的时候，遇到了鼠标滚轮滚动进行图片缩放的需求，现在来回顾一下。 思路 首先整理一下思路，要想实现这一需求都需要哪几部，"}, {"id": "6989233922408185869", "title": "直播《从 Babel 深入前端编译原理》", "desc": "前端领域学习编译原理有什么用？ Babel 插件怎么写？ Babel 插件在工具链中的用途、在业务中的用途？ 如果对这些问题感兴趣，欢迎明天（7 月 27）晚上来掘金直播观看《从 Babel 深入前端"}, {"id": "6940804223994953765", "title": "JavaScript 模块基础", "desc": "下面我们从 JavaScript 模块的发展史开始讲起，到最新的 ES Modules 的，重新认识一下模块。 JavaScript 被开发出来的时候，是没有模块标准的，因为 JavaScript 的设计初衷就是作为一个 toy script，在浏览器中做一些简单的交互。但是随…"}, {"id": "7005776781022068766", "title": "从零开始搭建小程序架构", "desc": "笔者接触小程序开发已3年有余，如果问我从零开始开发一个小程序改怎么做，可以瞧瞧这篇文章。代码先行，顺着代码示例表述笔者的观念。"}, {"id": "7001283744829014029", "title": "数值千分位，6种方法和性能对比，值得一看", "desc": "不就一个千分位， 分分钟解决你， 正则万岁。 没错， 正则很帅， 性能呢，其他方案呢？考察点吗， 一是基于你现有的知识实现， 二是知识面。"}, {"id": "6993133406565449736", "title": "【SSD系列】共享桌面，3分钟自己实现一个吧，还能听见麦克风声音哦", "desc": "共享桌面，3分钟自己实现一个吧，还能听见麦克风声音哦。3-10分钟里， 500-1000字，有所获，又不为所累。"}, {"id": "7002763440800399391", "title": "12张图带你看看 V8 是如何执行和回收JavaScript代码的", "desc": "又到了新的学期，九月冲！ 今天就来一起看看 V8 引擎执行JavaScript的过程和垃圾回收的机制。"}, {"id": "7006965419844042766", "title": "大型乌龙狗血剧之反斜杠", "desc": "反斜杠和转义符的爱恨情仇，愿世界再无 bug,真的，把我最好的祝福送给大家，希望大家写代码信手拈来，畅通无阻，一泻千里！"}, {"id": "7005140118960865317", "title": "【Vue】带你快速上手Vue3 - 使用 - Composition API - 响应式原理 - 新特性", "desc": "Vue3早就发布了，博主一直拖到今天才开始学习，主要还是因为博主 ~~懒~~ 学习前端时间不长，前端要学的东西太多了，加上博主买的书还有学习的项目都是Vue2的，所以就一直在研究Vue2了，今天终于准"}, {"id": "6983853725987110919", "title": "从零带你架构一个企业级 React 项目", "desc": "本文没有只针对 React 读者，除了强相关 React 技术栈的内容，其他东西完全是可以应用进任意技术栈的项目。"}, {"id": "6844904103504527374", "title": "写给初中级前端的高级进阶指南", "desc": "我曾经一度很迷茫，在学了 Vue、React 的实战开发和应用以后，好像遇到了一些瓶颈，不知道该怎样继续深入下去。相信这也是很多一两年经验的前端工程师所遇到共同问题，"}, {"id": "7006975685898027016", "title": "JS面试题之箭头函数，高阶函数，柯里化函数，纯函数（三）", "desc": "今天我们主要来看看在JavaScript中的函数，函数在JavaScript中很重要，也有很多种使用方式，今天我们主要来复习复习箭头函数、高阶函数、柯里化函数、纯函数，它们分别是什么？在JS中有什么作"}, {"id": "7002536429314277384", "title": "Google zx 源码浅析", "desc": "前端日常开发中我们大部分时间都是使用Javascript，在编写shell脚本时，写bash没有像js那般熟悉，如果能选择一种更方便的编程语言来写它，何乐而不为呢？"}, {"id": "6969401491853410312", "title": "又来了！10分钟实现微信 \"炸屎\"大作战", "desc": "微信又发布了新功能（更新到微信8.0.6）。最火热的非\"炸屎\"功能莫属了，各种群里纷纷玩起了炸屎的功能。我们就借此花10分钟来学习一下这个功能。"}, {"id": "7007043314197200932", "title": "【算法】每日一题-定时器相关（1）", "desc": "目录 写一个定时器，每次间隔不同的时间 setInterval 缺点 与 setTimeout 的不同 一、写一个定时器，每次间隔不同的时间 1） 思路 // 运行结果 二、setInterval 缺"}, {"id": "7007714885232492574", "title": "JavaScript复习速记-1", "desc": "原型链 每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型\"继承\"属性。 可以使用Object.getPrototype"}, {"id": "6992018709439053837", "title": "尤雨溪国外教程：亲手带你写个简易版的Vue！", "desc": "很多时候我们都对源码展现出了一定的渴求，但当被问到究竟为什么想看源码时，答案无非也就那么几种： 为了面试 为了在简历上写自己会源码 了解底层原理 学习高手思路 通过源码来学习一些小技巧(骚操作)"}, {"id": "7003514213658263588", "title": "如何实现一个深浅拷贝？", "desc": "浅拷贝的原理与实现 浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值；如果拷贝的是引用数据类型，拷贝的就是内存地址。如果其中一个对象的"}, {"id": "6992752397411942430", "title": "用技术创造惊喜｜成熟的前端工程师一定要学会亲手制作生日礼物 🎁 ", "desc": "生日将至，我用前端技术为自己制作了一个精美的礼物。在此分享给大家。成熟的前端工程师一定要学会亲手制作生日礼物~回归最初学习前端的初心，技术不仅可以用来谋生，也可以用来创造快乐~"}, {"id": "6947842412102287373", "title": "字节跳动最爱考的 64 道算法题（JS版）", "desc": "现在大厂面试中，算法题几乎为必考项，且近几年频现 LeetCode 真题，此篇为拿到字节、腾讯、京东 Offer 的笔者本人在准备面试过程中亲自刷过以及遇到过高频算法题。文章内容会分模块整理，对于笔者在面试过程中遇到的真题，会给予着重 【🔥】标出。 同时，可以毫不客气的说，如…"}, {"id": "7007327298013626399", "title": "使用 TypeScript 时你会想念的 Python 特性", "desc": "了解不同的语言和框架如何处理相似的问题总是很有趣。当你理解它们方法之间的一致或差异时，你也会对编程本身有更好的理解。"}, {"id": "6908502083075325959", "title": "可视化拖拽组件库一些技术要点原理分析", "desc": "建议结合源码一起阅读，效果更好（这个 DEMO 使用的是 Vue 技术栈）。 1. 编辑器 先来看一下页面的整体结构。 这一节要讲的编辑器其实就是中间的画布。它的作用是：当从左边组件列表拖拽出一个组件放到画布中时，画布要把这个组件渲染出来。 用一个数组 componentDat…"}, {"id": "6989003710030413838", "title": "为了让你们进阶Canvas，我花7小时写了3个有趣的小游戏！！！", "desc": "前言 大家好，我是林三心，相信大家看了我前一篇canvas入门文章为了让她10分钟入门canvas，我熬夜写了3个小项目和这篇文章，对canvas已经有了入门级的了解。今天，我又用canvas写了三个"}, {"id": "6976927131095793678", "title": "JS运行机制", "desc": "本文阐述了浏览器端和node端的js运行机制执行的过程，还进行了两者的运行机制比较，以及同步任务和异步任务的说明，两种异步任务的必要性，以及各自有哪些回调，部分回调的优先级。"}, {"id": "7002124641867137054", "title": "JS 基础 -- Iterator & Generator", "desc": "Iterator 迭代器 定义 迭代器是一个特殊对象，每个迭代器都有一个 next() 方法，每次调用都返回一个结果对象；结果对象有两个属性：一个是 value 表示当前迭代返回的值，另一个是 don"}, {"id": "6844904024232165384", "title": "34 个今年11月最受欢迎的 JavaScript 库", "desc": "个人专栏 ES6 深入浅出已上线，深入ES6 ，通过案例学习掌握 ES6 中新特性一些使用技巧及原理，持续更新中，←点击可订阅。 直接开门见山，看看有哪些好用受欢迎的库值得我们使用。 在编写调试Node.js项目，修改代码后，需要频繁的手动close掉，然后再重新启动，非常繁琐…"}, {"id": "6977250535766392839", "title": "vue中使用海康监控H5视频播放—精简版", "desc": "H5视频播放器是海康在这个月3号才上线的一个开发包，如果你的需求仅仅是用于视频实时监控而不需要其他的功能，一定是首要推荐这个H5视频播放器"}, {"id": "6901494216074100750", "title": "进阶必读：深入理解 JavaScript 原型", "desc": "Prototype 是 JavaScript 里的一个基础概念，原本应该很容易理解。然而，出于各种原因，大部分前端开发者（包括我），在刚开始学习 JS 时，原型和原型链都是一个需要克服的困难。 其实看不懂上图也没关系，请不必自责，这不是你跟我的问题。尽管上图并没有画错。 只能说…"}, {"id": "6844903613966319624", "title": "送给写小程序的你。", "desc": "声明：本人也是菜鸟一只，写的不好的地方，大佬们指点指点。 微信小程序商城，持续更新。（已经跳槽了，但是还是小程序相关的项目/斜眼） 先说说写小程序的渊源吧，我之前认识的大佬写了一个比较简单的小程序，我改了改样式于是成功的有了我的第一个小程序。然后我在找工作的时候，简历上写了这么…"}, {"id": "6999799443264372749", "title": "Three.js拨云见雾(4)——确实存在的几何体", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 几何体本质上就是threejs生成顶点的算法，如果有兴趣你可以打开threejs几何体部分的源码查看threejs具体如何通过程序生成顶点位"}, {"id": "7000343679818792974", "title": "学习js测试框架-Mocha", "desc": "这是我参与8月更文挑战的第7天，活动详情查看： 8月更文挑战 前言 学习一个新知识点，要知道ta 是什么(what)，在哪用(where)，为什么(why)，怎么用(how)! Mocha（发音\"摩卡"}, {"id": "6999425019918942222", "title": "【今天你更博学了么】Object.defineProperty 都能 \"define\" 什么?", "desc": "今天来学习一下被多个前端框架青睐的Object.defineProperty,都有哪些属性描述符,然后简单实现一个双向绑定."}, {"id": "7005118019076620324", "title": "前端-JS篇", "desc": "前言: JS篇可以说是前端的重点,本人准备找实习了,做一些总结,对js重新进行缕一遍,也希望有理解错误的够被指出 1、列举typeof返回的数据类型? 2、列举基本数据类型和引用数据类型? 3、为什么"}, {"id": "6844904116913700877", "title": "手写一个Promise/A+,完美通过官方872个测试用例", "desc": "本文会讲解另一种更现代的异步实现方案：Promise。Promise几乎是面试必考点，所以我们不能仅仅会用，还得知道他的底层原理，学习他原理的最好方法就是自己也实现一个Promise。"}, {"id": "6999530125020626957", "title": "深入理解js中的yield", "desc": "深入理解js中的yield yield是什么 yield是ES6的新关键字，使生成器函数执行暂停，yield关键字后面的表达式的值返回给生成器的调用者。它可以被认为是一个基于生成器的版本的return"}, {"id": "7001478314833477645", "title": "「学习笔记」MediaQueryList", "desc": "window.matchMedia 方法 window.matchMedia 方法返回一个 MediaQueryList 对象。window.matchMedia 接受 媒体查询字符串 作为参数。 M"}, {"id": "6844903604839514125", "title": "chrome开发者工具各种骚技巧", "desc": "对于每个前端从业者来说，除了F5键之外，用的最多的另外一个键就是F12了。 今天，大神（@小鱼二）推荐我一个网站，才知道chrome还有各种骚姿势。 所有的我都看了，这里随便列举几个个人之前不了解，觉得挺有用的。 多的就不列举了，可以看看开头的网站。看了有几个功能我电脑（win…"}, {"id": "7004052340374732836", "title": "常见的7种继承方式", "desc": "例子: 比如说我们生活中的汽车就是一个类 轿车 和 货车 分别 继承汽车的属性 只不过 轿车 后面加的是 后备箱, 货车后面接的是大货箱, 使得轿车 和 货车 具备与父类不同的方法 定义: 继承可以是"}, {"id": "6844903597986037768", "title": "当面试官问你Vue响应式原理，你可以这么回答他", "desc": "看过vue官方文档的同学，对这张图应该已然相当熟悉了。 听过太多回答，通过Object.defineProperty，可是再详细的问时，对方浑然不知。 这里我们用不到100行的代码，实现了一个简易的vue响应式。当然，这里如果不考虑期间的过程，我相信，40行代码之内可以搞定。但…"}, {"id": "7002176877116784654", "title": "深复制与浅复制", "desc": "js实现对象的深复制和浅复制的几种方式。JSON.stringify，扩展运算符，typeof等等。。"}, {"id": "6998884113637703693", "title": "JavaScript 中几种循环对比及性能分析", "desc": "本文将对比几种循环，了解相关原理，比如，探索 forEach 的底层原理和 for of 循环的底层机制；运行代码，比较所耗费的时间。"}, {"id": "6970588001734754334", "title": "潮流周刊（第34期）-  沙巴小女孩", "desc": "封面图摄于疫情前一年沙巴游玩，在当地小商场端正坐在等妈妈的小女孩，不知不觉不能出国已过去3年了。潮流周刊"}, {"id": "6844904168784658439", "title": "JavaScript中的这些骚操作，你都知道吗？", "desc": "写这篇文章的缘由是上周在公司前端团队的code review时，看了一个实习小哥哥的代码后，感觉一些刚入行不久的同学，对于真实项目中的一些js处理不是很熟练，缺乏一些技巧。 因此整理了自己开发中常用的一些js技巧，灵活的运用，会增强你解决问题的能力，也会对你的代码简洁性有很大的…"}, {"id": "6844904016686628877", "title": "利用 JS 实现多种图片相似度算法", "desc": "在搜索领域，早已出现了“查找相似图片/相似商品”的相关功能，如 Google 搜图，百度搜图，淘宝的拍照搜商品等。要实现类似的计算图片相似度的功能，除了使用听起来高大上的“人工智能”以外，其实通过 js 和几种简单的算法，也能八九不离十地实现类似的效果。 为了便于理解，每种算法…"}, {"id": "6994683950497021983", "title": "js声明变量的方式", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 JavaScript中可以通过var、let、const、function、import、class这几种方式来声明变量，下面分别进行介绍"}, {"id": "6993870930346770440", "title": "JavaScript 防抖和节流", "desc": "本文介绍 JavaScript 中优化高频率代码的手段 - 函数防抖和节流，防抖函数的封装（需要立即执行和不需要两个版本版）和节流函数的封装（Date 和计时器两个版本）"}, {"id": "6972831690334928904", "title": "JS重复事件绑定会彼此覆盖吗", "desc": "onclick与addEventListener事件多次绑定，彼此是否会覆盖？？若不覆盖彼此执行优先级问题"}, {"id": "6993819881560866829", "title": "输入框提示文字上移效果｜8月更文挑战", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 我们在设置 表单 时，一般都要设置一些 提示文字 搭配 输入框 来告知用户这里输入什么内容，此时根据提示文字的位置，我们一般有三种设计"}, {"id": "6993653718264594468", "title": "类的继承与接口", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：  8月更文挑战 ​ 继承 普通继承 多态 多态：父类定义一个方法不去实现，让继承他的子类去实现，每一个子类有不同的表现，多态属于继承。 这定义了一个动物"}, {"id": "6844903663056470023", "title": "小哥哥小姐姐，来尝尝 Async 函数这块语法糖", "desc": "编者注：众所周知，JS 最大的特性就是异步，异步提高了性能但是却给我们编写带来了一定困难，造就了令人发指的回调地狱。为了解决这个问题，一个又一个的解决方案被提出来。今天我们请来了 《JavaScript 高级程序设计》等多本书的知名译者 @李松峰 老师给我们讲解下各种异步函数编…"}, {"id": "6994389106977407007", "title": "ES6+新增常用内容总结（三）", "desc": "本文主要是在日常开发中一些比较常用的ES6+新增的特性， 如有错误,欢迎指出,将在第一时间修改,欢迎提出修改意见和建议"}, {"id": "6863995537063215112", "title": "前端，你真的知道BOM的这些用法吗？", "desc": "一. BOＭ简介&#x26;写作背景 二. window对象 使用 window.attr 声明的变量和 var 声明的变量有个区别，使用 var 声明的变量，不能使用 delete 删除，使用 window. 声明的变量可以被删除 三. location对象 四. navig…"}, {"id": "6844903656748220429", "title": "开源库架构实战——从0到1搭建属于你自己的开源库", "desc": "最近在 H5 开发与 APP 客户端工程师的联调过程中， 经常需要实现一些常用的移动端事件封装成接口提供给客户端，例如用户的单击 tap 事件、双击事件、长按事件以及拖动事件。但由于浏览器默认只提供了 touchstart、touchmove、touchend 三个原生事件，在…"}, {"id": "6861785535543771149", "title": "有趣的算法『爬楼梯』", "desc": "这道题最初是在一个孙红雷演的电影《少年班》里面看到的，当时没搞懂怎么解决，但有了一个印象，后来再遇到的时候就感觉很有趣，值得研究一下。 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个…"}, {"id": "6844903985007050765", "title": "Typescript 严格模式有多严格？", "desc": "\"use strict\" 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。 至今，前端er们基本都默认开启严格模式敲代码。 1. Typescript严格模式规则 当Typescript严格模式设置为on时，它将使用 strict族下的严格类型规则…"}, {"id": "6870445156001120270", "title": "javascript截取视频第一帧", "desc": "在企业资料的开发中，除了涉及到视频上传之外，还需要使用视频中的第一帧或者或许几帧作为视频封面展示。 因此，JS截取视频第一帧的难点就此诞生，但是查阅了资料发现，网上提供的资料无外乎俩种，第一种是 wasm + ffmpeg 配合后端去截取，第二种是JS自行截取。优缺点也是显而易…"}, {"id": "6844903974332530701", "title": "【 学 ES6 ？】 先看看这篇文章，还清ES5的帐吧！", "desc": "虽然很多人入门ES6都是去阮一峰老师的ES6教程ECMAScript 6 入门，但是注意了，阮老师开篇就建议如果你的js基础不够扎实，还是先把基础打扎实再回来学es6。出来混，ES5的债，迟早要还滴！！（泛指ES6之前的基础知识） JavaScript 提供了一个内部数据结构，…"}, {"id": "6984649021008674853", "title": "啥？竟然是Chrome的bug，你的前端监控还稳吗？", "desc": "故事的开始 最近在项目中遇到一个问题，业务逻辑就不在这里介绍了，在排查过程中发现项目里有类似这样一段代码： 上面没有对最后一个then进行catch操作，我们怀疑这里出了问题..."}, {"id": "6985028650370334734", "title": "js|请假时长、天数自动计算", "desc": "介绍了一个可以计算请假时长、天数的小demo。时长统计去除了工作时间及午休时间，天数去除了周六周日。"}, {"id": "6971804290583101453", "title": "这一次要彻底搞清JS提升", "desc": "这是我参与更文挑战的第9天，活动详情查看： 更文挑战 前言 我们知道JavaScript有预编译环节，这个环节发生在引擎编译代码前，用于做一些代码的“拼凑”工作，方便之后执行代码。预编译往往导致两个奇"}, {"id": "6996315680651870244", "title": "JavaScript 中的异常处理", "desc": "错误是编程过程的一部分。编写程序的过程难免会出现一些错误，通过这些产生的错误，我们可以学会如何避免遇到这样的情况，以及如何在下次做的更好。 在 JavaScript 中，当代码语句紧密耦合并产生错误时"}, {"id": "6919805736734162952", "title": "面试题：四种判断数据类型的方法", "desc": "JavaScript 是一种弱类型或者说动态类型，这就意味着你不需要提前声明变量的类型，在程序运行的过程中，类型会被自动确定。这就意味着你可以使用同一个变量保存不同类型的数据： 相信不管是在学习还是平常写业务的过程中，或多或少的都会碰到类似于--- 如何判断数据类型 的这种问题…"}, {"id": "6959420029850877982", "title": "原生js中的三座大山（上）-this", "desc": "前言： 想要学好前端，基本功必须得要扎实，原型和原型链、闭包、this,那这三座大山就一定要跨过去，今天先说this,话不多说，go~ this： 在开发时，我们要搞清楚this的指向，是至关重要的~"}, {"id": "6991381838698643470", "title": "JavaScript 一文搞定理解原型与原型链| 8月更文挑战", "desc": "原型原型链 重要知识点 所有对象都是通过new 函数创建 所有的函数也是对象 new Function() 函数中可以有属性 Array.from 所有对象都是引用类型 定义: 原型 prototyp"}, {"id": "6999195833094635527", "title": "Js回顾（四） JavaScript异步，promise，async await,事件循环，宏任务 微任务", "desc": "Js回顾（四） JavaScript异步，promise，async await,事件循环，宏任务 微任务 js执行机制 event loop js的执行机制是单线程，由上到下顺序执行的，这就造成了一"}, {"id": "6986677194965647390", "title": "JavaScript 对象的遍历", "desc": "1. for in 方法 1. 遍历对象的可枚举属性（属性全部可枚举） 2.遍历含不可枚举属性时的结果（对比） 2. Object.keys()方法 返回由对象的key组成的数组 1.获取对象的可枚举"}, {"id": "6986786250636132360", "title": "走进 Jest 内心，了解单元测试引擎是如何工作的", "desc": "本文主要给大家深入了解 Jest 背后的运行原理，方便应对面试和实际业务需求，Jest 编写单测相信我们已经很熟悉了，但 Jest 是如何工作的我们可能还很陌生，那让我们一起走进 Jest 内心，一同"}, {"id": "6948063813157519396", "title": "手撕三道js手写题", "desc": "万丈高楼平地起，一砖一瓦届地基。我觉得要来一波死磕 36 个 JS 手写题 但是由于方法必须定义在构造函数中，所以会导致每次创建子类实例都会创建一遍方法。 对象这种js手写题可以先看题干，再着手进行写出相关代码。"}, {"id": "6989875957000011812", "title": "重学JS基础-作用域链和闭包", "desc": "一，作用域和作用域链 1.全局作用域 JS有一个全局对象，window，在全局声明的变量都属于window的属性,未使用声明符声明的属性也是window的属性。 2.函数作用域 我们在定义函数的时候，"}, {"id": "6994019472264658952", "title": "边学边译JS工作机制--25.函数式编程和一些基本概念", "desc": "概述 函数式编程，简单来说就是一个函数，入参是数据，出参是函数。 函数式编程最美妙的地方，是它不会改变我们的入参，也不会产生任何的副作用。状态值是通过函数来表达的。 这一章我们会讨论函数式编程在JS中"}, {"id": "6999287680668270606", "title": "8月更文挑战 | 前端Js手写题汇总（二）", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战，内容：继承、数组去重、数组扁平化、new"}, {"id": "6864332891887927304", "title": "想要在JS中把正则玩得飘逸，学会这几个函数的使用必不可少", "desc": "在之前的一系列文章中，我们讲解了很多关于正则表达式的知识。那么作为一个前端工程师，如果想要把这些知识应用到我们平时的开发中去的话，就需要知道在JavaScript中，能够使用正则的函数有哪些？然后它们各自的功能是什么？有哪些需要注意的地方？只有掌握好了每一个方法的使用场景，我们…"}, {"id": "6844904063402770439", "title": "babel polyfill 到底怎么用？", "desc": "为了支持业务中少量的es6+的高级特性，最近在研究了一下babel的垫片，现将此整理为文字，如下。(本文旨在说明babel及babel周边相关的包之间的关系和使用方式，以及应用场景。) 理清了他们之间的关系，那么再正式来讲讲有关polyfill的二三事。 babel-polyf…"}, {"id": "6844904001192853511", "title": "学习 vuex 源码整体架构，打造属于自己的状态管理库", "desc": "感兴趣的读者可以点击阅读。下一篇可能是学习 axios 源码。 文章比较详细的介绍了vuex、vue源码调试方法和 Vuex 原理。并且详细介绍了 Vuex.use 安装和 new Vuex.Store 初始化、Vuex.Store 的全部API（如dispatch、commi…"}, {"id": "6844903496232206349", "title": "VirtualDOM与diff(Vue实现)", "desc": "因为对Vue.js很感兴趣，而且平时工作的技术栈也是Vue.js，这几个月花了些时间研究学习了一下Vue.js源码，并做了总结与输出。 文章的原地址：https://github.com/answershuto/learnVue。 在学习过程中，为Vue加上了中文的注释http…"}, {"id": "6844904146303189000", "title": "仿EventBus实现小程序兄弟组件传值", "desc": "公司业务中有个场景，需要在用户点击标签的时候，把标签内容进行处理成类似微博话题的形式，插入到 textarea 中。textarea 和标签是页面的两个组件，正常情况我可以点击标签后向外抛出事件，页面去监听，然后再把数据传给 textarea ，但这样的处理麻烦，所以就想仿照 …"}, {"id": "6980524151945560077", "title": "cornerstone.js使用记录（一）", "desc": "做web医疗影像大多数都会用到这个JS文件 cornerstone.js，以及它的生态插件。 废话不多说，上手就干。"}, {"id": "6883823489342668813", "title": "如何使用JavaScript实现前端导入和导出excel文件(H5编辑器实战复盘)", "desc": "最近笔者终于把H5-Dooring的后台管理系统初步搭建完成, 有了初步的数据采集和数据分析能力, 接下来我们就复盘一下其中涉及的几个知识点,并一一阐述其在Dooring H5可视化编辑器中的解决方案. 笔者将分成3篇文章来复盘, 主要解决场景如下: 本文接下来的内容素材都是基…"}, {"id": "6844903833609437198", "title": "如何在新时代下的结对编程中将代码玩出花来", "desc": "好久没写文章了，标题起的有点膨胀。 我想写一个结对编程小记。最近在和 S (帅气的花名) 利用业余时间，进行了一次结对编程。现在我准备把结对编程的一些思考分享给大家，下面开始吧。 这里我说明一下原因，请往下看。 结对编程（英语：Pair programming）是一种敏捷软件开…"}, {"id": "6936410734037303332", "title": "【深入理解】函数防抖与节流 ｜ 技术点评", "desc": "等场景之下，都有可能会出现这个问题。 要处理这个问题，就需要控制函数的调用次数和频率，不能每次触发都去做一次执行。这个时候就需要引入函数防抖和节流两个概念，下面我就来详细介绍一下。 从上面的 gif 图可以看出，在监听 mousemove 事件的区域内移动鼠标，onMouseM…"}, {"id": "6844903971857907720", "title": "面试官：你怎么优雅管理 CSS？", "desc": "借由这个面试题目， 我们来了解 css 管理方式一共有几种。 佛性选手, 复制粘贴一把梭. 方案一. 命名空间 + BEM 规范 原理：强行增加一个最外层的命名空间将底部样式包裹起来。 样式名遵循 BEM 规范， 让维护者可以从类名就分辨出 dom 上的嵌套情况。方便维护， 如…"}, {"id": "6994359304480358436", "title": "详细代码举例剖析var和let区别", "desc": "let和var的三点区别： 是否有块级作用域？ 同一作用域下是否可以多次声明同一变量？ 是否可以在声明语句前调用变量？"}, {"id": "6844904063964807176", "title": "全网最详bpmn.js教材-群友问题汇总(一)", "desc": "bpmn.js是一个BPMN2.0渲染工具包和web建模器, 使得画流程图的功能在前端来完成. 因为公司业务的需要因而要在项目中使用到bpmn.js,但是由于bpmn.js的开发者是国外友人, 因此国内对这方面的教材很少, 也没有详细的文档. 所以很多使用方式很多坑都得自己去找…"}, {"id": "6844904120214618120", "title": "JS 必须知道的基础《严格模式 'use strict'》", "desc": "JS的严格模式'use strict'应该是大家熟悉不过的知识，按字面意思来解释就是遵循严格的行为模式来写代码。但有那些规则来约束我们在开发过程中来使用严格模式规范自己代码呢？所以这篇文章的目的仅仅是为了再次加深对严格模式的认识。虽然本文是基础知识，但希望对大家有所帮助。 为未…"}, {"id": "6850418121456418823", "title": "深入理解JavaScript 执行上下文", "desc": "执行上下文是当前代码的执行环境。 函数执行上下文：可以有无数个，函数被调用的时候会被创建。每次调用函数都会创建一个新的执行上下文。 eval执行上下文，很少用。 变量对象 (variable object, VO): 每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量…"}, {"id": "6844904202431365128", "title": "抽丝剥茧般的阅读源码，将$nextTick()拉下神坛！", "desc": "相信有很多开发第一次碰到vue中的$nextTick()时都会把它当作一次setTimeout()调用。这个理解是对的吗？ 1. 前置知识 下面假设大家对这些概念已经非常清楚了。 1. 概念 掌握一个知识点的背后原理，就必须对它的使用要非常熟悉。来看官方的介绍。 上面有一句话说…"}, {"id": "6844903721046900743", "title": "谈起音视频，前端能做些什么", "desc": "音视频随着互联网的发展，对音视频的需求越来越多，然而音视频无乱是播放还是编解码，封装对性能要求都比较高，那现阶段的前端再音视频领域都能做些什么呢。 提起音视频的播放，我萌首先想到的是HTMLMediaElement，video播放视频，audio播放音频。举个栗子： contr…"}, {"id": "6908273702769524744", "title": "「JS刷题之路-递归回溯（上篇）」和我一起系统的刷题吧（内附思维导图）", "desc": "你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为shorter，长度较长的木板长度为longer。你必须正好使用k块木板。编写一个方法，生成跳水板所有可能的长度。 返回的长度需要从小到大排列。 我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 1…"}, {"id": "6989827778451341325", "title": "JavaScript学习（一） —— 内存机制", "desc": "一、内存空间中的栈（stack）和堆（heap） JavaScript的数据类型分基本数据类型和引用数据类型（以ES5为准），基本数据类型包括Number、String、Boolean、Null、Un"}, {"id": "6965678914467266590", "title": "基于 AlloyCrop 的图片手势缩放、裁剪业务实践", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 前言 最近经常接到活动页面需要给用户定制化图片的需求，于是对之前所做过的图片裁剪业务功能、踩"}, {"id": "6971621438151196680", "title": "js的基本数据类型及校验方法", "desc": "今早的地铁看了一个很基础的js面试题，结果悲剧了。。。 那就从头来理一下js的基础吧。 1、js的数据类型 原始类型---保存栈中、赋值是复制变量值 对象类型（引用类型）---保存堆中、赋值是复制引用"}, {"id": "6844904160077283335", "title": "浅谈对比 XState、Redux 使用", "desc": "这篇文章主要调研一下 xstate 和 redux 的使用对比，介绍一下 xstate 的优势所在。 redux 的基本原理是将单一状态树作为应用的数据容器（Provider），组件可以发布 Action 修改数据树，数据树的更新也会对应通知到订阅属性的组件。从 API 上来看…"}, {"id": "6844903886084374536", "title": "TradingView--最专业的走势图表，收下吧，也许你会用到", "desc": "最近在做交易所项目里的K线图，得些经验，与大家分享。 点赞 收藏 不迷路。 基于canvas绘制，种类齐全的可视化图表库。 基于svg绘制，可定制化内容很多，操纵dom更方便。 基于canvas的专业全球化走势图表。 hightcharts: 前些日子有仔细研究过 hightc…"}, {"id": "6844903880652750862", "title": "CodeSandbox 浏览器端的webpack是如何工作的？ 上篇", "desc": "这期来关注一下CodeSandbox, 这是一个浏览器端的沙盒运行环境，支持多种流行的构建模板，例如 create-react-app、 vue-cli、parcel等等。 可以用于快速原型开发、DEMO 展示、Bug 还原等等. 相似的产品有很多，例如codepen、JSFi…"}, {"id": "6844903667905069070", "title": "javascript性能优化", "desc": "大家都知道，浏览器在解析DOM树的时候，当解析到script标签的时候，会\b阻塞其他的所有任务，直到该js文件下载、解析执行完成后，才会继续往下执行。因此，\b这个时候浏览器就会被阻塞在这里，如果将script标签放在head里的话，\b那么在该js文件加载执行前，用户只能看到空白…"}, {"id": "6887744450584395784", "title": "精读《设计模式 - Prototype 原型模式》", "desc": "Prototype（原型模式）属于创建型模式，既不是工厂也不是直接 New，而是以拷贝的方式创建对象。 意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 如果看不懂上面的意图介绍，没有关系，设计模式需要在日常工作里用起来，结合例子可以加深你的理解，下面我准…"}, {"id": "6963088104932507684", "title": "你想知道的Promise都在这里", "desc": "Promise 是一种异步解决方法，它的出现解决了使用回调函数处理异步逻辑，造成回调地狱的问题，本文主要从 Promise 的基本用法、Promise A+、手写 Promise 角度出发，深度分析 "}, {"id": "6971940848439132196", "title": "你真的理解事件绑定、事件冒泡和事件委托吗？", "desc": "事件，是JS Web API比较重要的一个知识点。我们平常所看到的网页，肯多内容都要用到事件。比如说一个点击、一个下拉、一个滚动，都要用到事件进行"}, {"id": "6844904078942666766", "title": "从设计到实现前端Uploader基础类", "desc": "本文将带你基于ES6的面向对象，脱离框架使用原生JS，从设计到代码实现一个Uploader基础类，再到实际投入使用。通过本文，你可以了解到一般情况下根据需求是如何合理构造出一个工具类lib。 相信很多人都用过/写过上传的逻辑，无非就是创建input[type=file]标签，监…"}, {"id": "6971335162118275079", "title": "js实现解数独游戏", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 编写一个程序，通过填充空格来解决数独问题。数独的解法需遵循如下规则……"}, {"id": "6844903894288433159", "title": "前端工程师彻底征服树结构组件的秘籍", "desc": "先把名字作为节点title，然后如果有子节点，就用同样的方法渲染子节点。 组件已经好了，如果我们要点击，我们怎么知道哪个层级的哪个节点被点了呢？是不是会写一个搜索算法，传入当前节点id，然后回溯去记录路径展示出来？这虽然可以做到，但显然是不优雅的，我们只需要牺牲空间换时间的方法…"}, {"id": "6844903619385360397", "title": "编写可维护的JavaScript", "desc": "软件生命周期中80%的成本都消耗在了维护上；而且几乎所有的维护者都不是代码的直接开发人。如何让自己写的代码让别人阅读起来更高效？当然是写代码的时候注入一些规范。那么在Javascript中有哪些编程风格值得我们去注重呢？这篇文章将总结《编写可维护的JavaScript》里面的观…"}, {"id": "6983247848473100325", "title": "JavaScript基础知识回顾", "desc": "该博客是暑期实训的第一天的内容，会从js到vue实现，如果有问题，请评论提醒我，引入的部分会在结尾注明."}, {"id": "6982482024237891621", "title": "数组去重的方法合集", "desc": "一、利用ES6 Set去重（ES6中最常用） 不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。 二、利用for嵌套for，然后spl"}, {"id": "6973062729925918756", "title": "关于前端性能优化问题，认识网页加载过程和防抖节流", "desc": "前端性能优化—网页加载过程、性能优化方法、防抖和节流 这是我参与更文挑战的第13天，活动详情查看：更文挑战 平常我们在加载网页的时候，首先需要先加载网页代码，之后渲染出页面，在这个期间会执行若干个 J"}, {"id": "6956823225590513671", "title": "JavaScript系列 -- 作用域、执行上下文、作用域链、闭包、垃圾回收机制", "desc": "前言 作用域的定义相信大家都已经非常清楚，但作用域链那块的底层你了解吗，本文对作用域链的底层原理进行深入解析。本文先从作用域和执行上下文说起，再到作用域链，层层深入，最后补充闭包相关内容。 （篇幅过长"}, {"id": "6844903566767849480", "title": "为你的 VS Code 搭建远程开发环境", "desc": "开篇先说一下自己遇到的烦恼，介绍下写这篇文章的背景。我有一台低配的 MacBook 和 一台性能强悍的台式机。之前自己都是在 Mac 上跑前端项目的，那台台式机基本上处于闲置状态，偶尔用来看看文档。后来随着自己需要做服务端开发，有时候需要同时跑前后端数个项目，那台低配 Mac …"}, {"id": "6930494066174099469", "title": "Node还能用来摸鱼?(适用部分大量重复工作的数据展示项目)", "desc": "解决方向公司技术栈从Vue转型到React之后,后台管理页面项目的目光也从vue系列UI库的ProAdmin方向聚焦到Umi及AntPro相关本着能少写代码就少写的理念,开始打起了生成代码的念头,毕竟"}, {"id": "7004097366462578724", "title": "基于xlsx.js前端导出多sheet的Excel", "desc": "提示： 该方法有性能问题，建议在导出数据小于500行的数据时候进行使用。数据量较多的情况下，依然推荐后端导出！ 一. index.html 二、02-多表导出.js 三、测试数据 index02.js"}, {"id": "6987634893748437023", "title": "基于 Creat React App 创建项目", "desc": "使用 Create React App 初始化项目 使用 prettier 规定项目风格 使用 commitlint 规定 commit message 自定义 create-react-app"}, {"id": "6971441603546349581", "title": "前端复盘专题(一)", "desc": "一、基础知识 var与let/const区别 1.作用域不同 var ：函数作用域 var定义的变量作用域为包含它函数的局部变量，改变量在函数退出时被销毁。(所以在函数内部用var定义的变量在函数外部"}, {"id": "6844904095468224519", "title": "体验concent\b依赖收集，赋予react更多想象空间", "desc": "concent v2版本的发布了，在保留了和v1一模一样的api使用方式上，内置了依赖收集系统，支持同时从状态、计算结果和副作用3个维度收集依赖，建立其精确更新路径，当然也保留了v1的依赖标记特性，支持用户按需选择是让系统自动收集依赖还是人工管理依赖，大多数场景，推荐使用自动收…"}, {"id": "6998718912548306951", "title": "JavaScript的显示和隐式类型转换", "desc": "本文整理了JavaScript中存在的显式和隐式类型转换，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6998912508442460168", "title": "今天来学习下CSP（内容安全策略）", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 前言 昨天讲了如何限制网站不能被iframe嵌套，里面有一种方式是设置CSP（内容安全策略），它不单单只是可以限制网站被iframe嵌套，"}, {"id": "6845166890566844424", "title": "ES6常用但被忽略的方法（第八弹Class）", "desc": "ES6常用但被忽略的方法 系列文章，整理作者认为一些日常开发可能会用到的一些方法、使用技巧和一些应用场景，细节深入请查看相关内容连接，欢迎补充交流。"}, {"id": "6844903635743162381", "title": "浅谈web前端的发展趋势", "desc": "相信web前端开发的伙伴们，在职业道路上，十有八九会受到这样的质疑或者嘲讽（大多数其实还是调侃之意）。写几个标签，懂一些HTML CSS 就是程序员？ 近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户…"}, {"id": "6844903774620762120", "title": "[译] Object.assign 和 Object Spread 之争, 用谁？", "desc": "在 2018 年 Object Rest/Spread Proposal 达到了 stage 4，这意味着在未来它会将入到 ECMAScript 标准中。它也被加入到Node LTS. Node.js 8 以后的版本你可以使用它，所以你可以放心地开始使用它。 Object Sp…"}, {"id": "6844903850583785480", "title": "前端进阶之 a 可以同时 == 1 && == 2 && == 3吗？", "desc": "1. 类型转换时的劫持 对象在转换类型的时候，会执行原生方法ToPrimitive。 如果都没有 原始类型 返回，则抛出 TypeError类型错误。 当然，我们可以通过重写Symbol.toPrimitive来制定转换规则，此方法在转原始类型时调用优先级最高。 鱼头注：事实上…"}, {"id": "6844903511394615303", "title": "underscore 系列之如何写自己的 underscore", "desc": "在 《JavaScript 专题系列》 中，我们写了很多的功能函数，比如防抖、节流、去重、类型判断、扁平数组、深浅拷贝、查找数组元素、通用遍历、柯里化、函数组合、函数记忆、乱序等，可以我们该如何组织这些函数，形成自己的一个工具函数库呢？这个时候，我们就要借鉴 underscor…"}, {"id": "6999071603736707103", "title": "剑指offer(16)——链表中环的入口节点", "desc": "“这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战” 题目 给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。 思路 代码"}, {"id": "6941004264995029028", "title": "自己构建一个博客系统｜项目复盘", "desc": "基础的前端页面构造使用了原生 Vanilla JavaScript + CSS + HTML，构造一个静态的文章展示系统。 在文章处理（标签获取、图片爬取）上使用了 Java + Kotlin 的组合，主要是我对 Kotlin 挺熟的，毕竟做了一年 Kotlin 项目了 = =…"}, {"id": "6844904100308467726", "title": "从零实现 redux 和 react-redux", "desc": "1. 前言 在前端圈子有这样一种说法，Vue 入门最简单，React 学习曲线太陡，Angular...我还是选择狗带吧。 在 React 诞生之初，Facebook 宣传这是一个用于前端开发的界面库，仅仅是一个 View 层。前面我们也介绍过 React 的组件通信，在大型应…"}, {"id": "6854573218305409038", "title": "有人问：学历不好，技术不行，该怎么换工作？我：...", "desc": "虽然这个问题看起来比较让人无语，但其实鱼头也有过类似情况的时候。估计这种状态并不是只有一两个人才会有，所以也就把这个无语的问题拎出来，谈谈自己的想法了，希望能帮到这位童鞋以及有类似想法的人。 我入行的第一家公司，是一家小公司，前端只有我，整个公司加起来只有十来人的那种。 由于是…"}, {"id": "7000286777801981959", "title": "JS 基础 -- this 解析", "desc": "this 是 JS 中常见的属性，但是经常会使人晕头转向，本文总结了一些常见的使用场景，希望能加深大家的认识。本文主要包含以下内容： this 常见场景 手动实现 call、bind 全局 this "}, {"id": "6997955159158423582", "title": "🍉【深扒】深入理解 JavaScript 中的生成器", "desc": "写在前面 在上篇文章中，我们深入了理解了迭代器的原理和作用，这一篇我们来深扒与迭代器息息相关的生成器。 关于生成器有这样的描述 红宝书：生"}, {"id": "6985030118758416391", "title": "一篇搞定【web打印】知识点", "desc": "对很多中后台的业务来讲，打印场景还是很常见的。针对个人遇到的，以及现有的一些方案对比，总结一波😎（文末有PPT，需要留言），希望能帮助同样头疼的你。"}, {"id": "7000303038111940616", "title": "每天学习 10 个实用Javascript代码片段（六）", "desc": "每天学习10个实用JavaScript代码片段，加深对 Javascript 语法的理解，积累代码优化经验，第六天来了，本文代码片段包括生成随机数、数字加密、四舍五入、文件扩展名、变量数字转换"}, {"id": "7005884530263326727", "title": "Es5中的this和Es6箭头函数中的this随笔", "desc": "深入了解this这个关键字，并准确区分es5和es6箭头函数的区别，并且通过若干实际例子来真正帮大家理解"}, {"id": "6997204529024335908", "title": "JavaScript实现飞机大战，你来你也行！", "desc": "之前我有用Java写过一个飞机大战，感觉挺受欢迎的，有的小伙伴想用Javasript写，我这次就按我的思路写了一个JS版本。"}, {"id": "6974203096679317535", "title": "前端学编译原理（一）：编译引论", "desc": "编译原理系列（一），主要讲了：1我们为什么要学习编译原理（从前端角度出发），以及对编译原理的一些基础知识进行分享，并简单的分步骤介绍了编译器的各个过程。"}, {"id": "6991204669573824520", "title": "实战：前端接口请求参数混淆｜8月更文挑战", "desc": "分享一下前东家的技术团队，在请求接口参数的处理上做得一些混淆处理。 安全性是衡量一个项目能否稳定运行的必备条件之一，同时也是一个技术团队的工作质量考核指标。"}, {"id": "6891427703249977352", "title": "别光知道用console.log调试了，快来试试这些高效的调试方法！", "desc": "作为一名前端开发人员，你一定经常使用 console.log 来进行开发调试，这当然没什么问题，但你可能不知道，除了 console.log ，浏览器的 Console 对象还包含了许多其他非常有用的方法，让我们一起来领略一下吧。 console.log方法使我们最常使用的了，…"}, {"id": "6844903966526930951", "title": "JavaScript 工具函数大全（新）", "desc": "原本只想筛选下上面的那篇文章，在精简掉了部分多余且无用的工具函数后，感觉不够。于是顺藤摸瓜，找到了原地址： 30 seconds of code 然后将所有代码段都看了遍，筛选了以下一百多段代码片段，并加入了部分自己的理解。 另外，本文工具函数的命名非常值得借鉴。 1. 第一部…"}, {"id": "6938581764432461854", "title": "聊聊什么是CommonJs和Es Module及它们的区别", "desc": "初衷： 将我整理的笔记分享给大家，希望本篇文章能给你带来不一样的认知，不喜勿喷。 适合人群： 前端初级开发，大佬绕道。 内容结构： 为什么有模块化 -> 基本语法 -> 两者区别。 我们都知道在早期JavaScript模块这一概念，都是通过script标签引入js文件代码。当然…"}, {"id": "6991456034657140773", "title": "潮流前端周刊（第41期）-  一群笔直的树", "desc": "封面图摄于杭州的郭庄，里面风景很不错，特别是后面这一片笔直的树林很舒服，天气好时候可以去看看。 前端技术 机器学习常用术语总结 https://mp.weixin.qq.com/s/JNpdys7MT"}, {"id": "7005378568066695199", "title": "模拟打鼓", "desc": "这是Js30的第一篇。实现了一个模拟打鼓的效果。文章将通过页面结构、功能实现这两个角度写做这个练习的过程。最后会放上代码。"}, {"id": "6844903632815521799", "title": "Vue 项目里戳中你痛点的问题及解决办法（更新）", "desc": "最近要求使用vue进行前后端分离开发微信公众号，不断摸索踩坑之后，总结出如下几点vue项目开发中常见的问题及解决办法。如果你是vue大佬，请忽略小弟的愚见^V^ 列表进入详情页的传参问题。 列表进入详情页的传参问题。 c页面的路径为http://localhost:8080/#…"}, {"id": "6904517485349830670", "title": "工作中如何进行前端性能优化(21种优化+7种定位方式)", "desc": "1.重要性当我们面试的时候，前端性能优化方面算是必考的知识点，但是工作中我们又很少会重点的对项目进行前端优化，它真的不重要吗？如果我们可以将后端响应时间缩短一半，整体响应时间只能减少5%~10%。而如"}, {"id": "6995010007263608846", "title": "浅谈弹幕的设计", "desc": "为了创造更好的多媒体体验，许多视频网站都添加了社交机制，使用户可以在媒体时间轴上的特定点发布评论和查看其他人的评论，其中一种机制被称为弹幕。"}, {"id": "6994349533807247397", "title": "50天用JavaScript完成50个web项目，我学到了什么?", "desc": "1.Expanding Cards 效果如图所示: 源码 在线示例 知识点总结: CSS:弹性盒子布局中的flex属性:让所有弹性盒模型对象的子元素都有相同的长度，且忽略它们内部的内容。 JavaSc"}, {"id": "6953503236254859294", "title": "Vue 源码解读（6）—— 实例方法", "desc": "详细介绍了 Vue 各个实例方法的实现原理，以及在面试中如果被面试官问到相关方法的实现原理时应该如何回答"}, {"id": "7005135785263366157", "title": "从零到一实现对Git Commit Message规范和校验，并生成changelog文档", "desc": "当团队开始执行Angular团队Git Message提交规范，团队成员如何遵守，难道要每次codeReview团队成员的git message,很显然成效很低，而且我们在使用命令commit -m "}, {"id": "6999588842990731295", "title": "搞懂正则表达式的\"位置\"，让你少写1000行代码", "desc": "正则表达式是大多数程序员同学成长道路上的一个坎，让我们一起直面这个坎，一步步干懂它， 相信我，看完这篇文章，对于正则的位置匹配，你可以收获不一样的风景噢"}, {"id": "6979888232867725320", "title": "[JS]【二】---基本数据类型之【Number篇】", "desc": "核心知识点 Number数字数据类型简述 isNaN（检测一个值是否为非有效数字）方法 自增及其特殊性 其他类型值转换为数字类型的方法和各种情况 数组对象以及map方法回调函数的类型转换例子 进制转换"}, {"id": "6979794245817221157", "title": "js深浅拷贝", "desc": "浅拷贝： 　　如果是基本类型拷贝，新值不会影响旧值， 　　如果是引用类型拷贝，只会拷贝第一层，并且指向与旧值指向同一个地址 　　引用类型拷贝有个其他理解： 　　浅拷贝是按位拷贝对象，它会创建一个新对象"}, {"id": "6928702425016565774", "title": "JavaScript中的继承实现", "desc": "构造继承、原型链继承、构造继承+原型链继承组合继承、以及在组合继承上衍生出的继承方式。 (1) 这应该是实现继承最完美的方案了，es6的extends关键字，在babel转换后代码也是通过这种方式实现的继承。"}, {"id": "6844903566591688711", "title": "JavaScript 奇怪事件簿", "desc": "不好意思做了一回标题党，JavaScript 中从来就没有什么奇怪的事件，我只是想梳理一下 javascript 中让人疑惑的表达式以及背后的原理。 一元+操作符的运算规则是：ToNumber(ToPrimitive(operand))，也就是把任意类型都转化为数字类型。 如果…"}, {"id": "6991442751107629092", "title": "常用Javascript 技巧,提高工作效率｜ 8月更文挑战", "desc": "使用方便有用的方法，以减少代码行数，提高我们的工作效率，增加我们的摸鱼时间。 在我们的日常任务中，我们需要编写函数，如排序、搜索、寻找惟一值、传递参数、交换值等，所以在这里分享一下我工作多年珍藏的几个"}, {"id": "6946098712326176782", "title": "前端进阶之必会的Webpack多页面打包", "desc": "公司一些项目使用的技术栈都是（jQuery+css+html）的方式，为了体现出自己的KPI。一直想把这种技术栈进行优化，所以就采用入手比较简单vue+webpack方式，不过需要webpack3.0以上的版本才支持，可以直接处理一个配置对象的数组，所以可以为每个页面单独写一份…"}, {"id": "6992006679407624199", "title": "前端常用的函数封装js篇（一）｜ 8月更文挑战", "desc": "前言 我们在开发前端项目的时候时常会有一些相似的功能和需求，如果大量的ctrl+c and ctrl+v会造成大量的代码冗余，好的解决办法是我们自己有一个公共函数库和样式库用到的时候我们引用一下就好，"}, {"id": "6844903577631227912", "title": "再谈前端虚拟列表的实现", "desc": "书接上文，在之前的 聊聊前端开发中的长列表 中，笔者对「可视区域渲染」的列表进行了介绍，并写了一个简化的例子来展现如何实现。这种列表一般叫做 Virtual List，在本文中会使用「虚拟列表」来指代。在本文中，笔者会把上篇文章中的简化例子一步步强化成一个相对通用、性能优异的虚…"}, {"id": "6963054953812197384", "title": "前端刷题路-Day30：省份数量（题号547）", "desc": "省份数量（题号547） 题目 有n个城市，其中一些彼此相连，另一些没有相连。如果城市a与城市b直接相连，且城市b与城市c直接相连，那么城市a与城市c间接相连。 省份 是一组直接或间接相连的城市，组内不"}, {"id": "6910075316148895757", "title": "彻底搞清CommonJS、AMD、CMD...", "desc": "CommonJS、AMD、CMD、requeir， moudle.exports， exports，import，export...原地爆炸... CommonJS规范诞生比较早，Mozilla工程师Kevin Dangoo在2009年发起，它出现的目的是希望JS可以运行到更多…"}, {"id": "6844903614993940494", "title": "音悦 ~ 一款PWA版的在线音乐APP", "desc": "从2017年暑假到现在, 想想自己自学前端也快接近一年了。最大的感受就是前端的技术真的是变化太快，入了前端的坑后, 自己陷的越深, 越是发觉自己要学的东西越多。也是因为这段时间感觉自己的知识积累到了一定的程度, 所以两周前便有了做一个正经的项目的念头。恰好PWA相关的技术在18…"}, {"id": "6937080912542695454", "title": "一文搞懂JS系列（七）之构造函数，new，实例对象，原型，原型链，ES6中的类 ", "desc": "本文主要讲的就是函数，方法，构造函数，`new`操作符，实例对象，原型，原型链，`ES6`类。因为这几个知识点都是有互通的关系的，所以一起讲，方便大家疏通整个关于这方面的知识体系。希望对大家有所帮助。"}, {"id": "6844903619347611656", "title": "慕尔名，我的“知乎”小程序（1）", "desc": "不知道有多少人跟我一样爱上“知乎”的呢？一直喜欢“知乎”所带来的用户体验效果和一些新颖的信息传送。所以在最近的小程序学习中，开始的第一个项目实训，就是“知乎”了。 开始做了才知道，“知乎”小程序的工程量之大，我这个前端新手不知应该需要多少个工作日，才能把“知乎”完整做成小程序。…"}, {"id": "6844904003499720712", "title": "JavaScript 中的位运算和权限设计(前端权限控制实现方案)", "desc": "JavaScript 的位运算, 简单回顾下位运算，平时很少用, 估计忘记差不多了. 1. Number 在讲位运算之前，首先简单看下 JavaScript 中的 Number，下文需要用到。 也就是说一个数字的范围只能在 -(2^53 -1) 至 2^53 -1 之间。 好了…"}, {"id": "6989921132518309919", "title": "原生js实现图片懒加载", "desc": "1 几个和图片懒加载相关的API clientHeight,clientWidth MDN上的解释 直观的图解 offSetTop MDN上的解释 # getBoundingClientRect MD"}, {"id": "6844904086924427278", "title": "javascript优化知识点", "desc": "传统的方式就是，把JavaScript的脚本放到head标签之后之前，也就把script标签放到最尾处，来确保页面加载完之后才执行JavaScript脚本，从而达到一些不必要的阻塞。（可能这也是我们平时用得比较多的方式） HTML4为script标签扩展了一个Defer属性，指…"}, {"id": "6991876865988231205", "title": "搞清楚import和export｜ 8月更文挑战", "desc": "因一次项目中对于第三方包的引入问题，深入理解JS模块化演进过程及ESM的import和export。"}, {"id": "6896349345143406605", "title": "前端计时器方案探索", "desc": "最近在项目中遇到一个需求，每个会话需要显示一个计时器。后来发现一个bug，时间一直显示0。排查后发现，在计算时间差时，使用的是当前的客户端时间 - 消息中带的服务器时间，当电脑时间比网络时间晚（小）时，差值为负，这里就会显示0。 now - msgTime，所以 now 需要修…"}, {"id": "6969768031438241805", "title": "JavaScript实现队列", "desc": "队列简介 队列是什么？队列是一种先进先出（FIFO）的数据结构。队列有什么用呢？队列通常用来描述算法或生活中的一些先进先出的场景，比如： 在图的广度优先遍历中，我们需要使用队列来记录每个节点的相邻节点"}, {"id": "6980157580177833991", "title": "教你怎么更优雅的去实现交互过渡动效", "desc": "前言 对我们前端来说，用户体验是我们在开发面向客户的应用时必须做好的一点，怎样实现良好的交互过渡特效也是我们需要掌握的一个技术。笔者用过vue和react，这两个框架都为我们开发应用时处理UI的过渡动"}, {"id": "6844903593837871111", "title": "ES6之---读懂let才能少踩坑", "desc": "在刚接触ES6的时候，我就「以为」我理解了let。然后漫长的自学道路上，let一次又一次的让我认识到了自己的无知。 希望写了这篇文章之后能用我的无知，让在这条道路上的人能少踩些坑。 和很多人一样，在听说了ES6很好用之后，就马不停蹄的去学习这门充满着语法糖的东西。开始抱着emm…"}, {"id": "6844903879306379277", "title": "你可能不知道的 npm 实用技巧", "desc": "绝大多数前端和 Node.js 开发者每天的日常工作都离不开 npm，不知道你对 npm 的观感如何？如果你觉得 npm 很棒，那么不妨看下这篇文章，说不定其中有你之前没留意过的小窍门，可以让你 npm 用得更顺手。如果你觉得 npm 很糟糕，那也可以看下这篇文章，也许会发现用…"}, {"id": "6844903584031571975", "title": "把一串数字表示成千位分隔形式——JS正则表达式的应用", "desc": "如何把一串整数转换成千位分隔形式，例如10000000000，转换成10,000,000,000。 在了解正则表达式之前，想要实现这个功能，无论代码量还是烧脑程度，都很令人抓狂，但若是运用正则表达式来解决的话，两三行代码即可搞定！匹配、替换那些符合某种规则的字符串，恰恰是正则表…"}, {"id": "6844903682140553229", "title": "像滤镜一样改变字体颜色", "desc": "既然这样，那么我们给伪元素也来和窗口运动刚刚相反的动画吧，这样相对浏览器不就是静止了吗..."}, {"id": "6844903912646901774", "title": "100来行代码, 自己动手写一个模板引擎", "desc": "上面一张图，已经大概把一个简单模板引擎(这里以EJS为例)的原理解释得七七八八了。本文将描述一个简单的模板引擎是怎么运作的？包含实现的关键步骤、以及其背后的思想。 基本上模板引擎的套路也就这样了，但这些思想是通用的，比如你在看vue的模板编译器源码、也可以套用这些思想和方法. …"}, {"id": "6970978621573824525", "title": "面试题 - js异步执行顺序", "desc": "因为js是单线程的，同一时间只能有一段代码在执行，所以首先执行的就是JS的主程序。之前说主程序是宏任务，微任务优先级又比宏任务高，那为什么还先执行主程序这个宏任务呢？"}, {"id": "6844903667301089288", "title": "图解JS执行机制", "desc": "js代码分为同步任务和异步任务。 同步任务会进入主线程，异步任务会进入Event Table（事件表），当事件表中的异步任务完成后会在Event Queue（事件队列）中注册回调函数。 主线程任务全部完成后，才会完成Event Queue中的任务。 js解析器会不断地重复检查主…"}, {"id": "6993275714015330317", "title": "听说你还不会搭建自己的组件库？快进来吧你", "desc": "不会开发组件库？这篇文章或许能够帮助到你，不过也别报太大希望，毕竟这篇文章只能带你入个门，后续的发展还是要看你自己嘿嘿"}, {"id": "6978394118808895495", "title": "深拷贝和浅拷贝", "desc": "1：前置技能 一般数据类型：number string boolean undefined null 引用数据类型：obj 2：深拷贝和浅拷贝 浅拷贝：创建一个新对象，有着原始对象属性值的一份精确拷贝"}, {"id": "6844903567606677518", "title": "webpack-4.0更新日志（翻译）", "desc": "不在支持Nodejs 4。源代码已经更新到一个较高的ecmascript版本。 import()永远都会返回一个带命名空间的对象。CommonJS模块会被包成export的default里面。 这个很可能会破坏你的代码，如果你使用import()的方式去导入你的CommonJS…"}, {"id": "6990606646556753956", "title": "Vue框架中集成ActiveReportsJS 如何在IE浏览器中展示", "desc": "ARJS支持在IE 11及以上版本展示，但是需要引用(Polyfills js文件 )不然就无法在IE浏览器中展示。 下面我就来说说在Vue中集成ARJS2.0应该进行怎样的配置，才可以在IE浏览器中"}, {"id": "6995395616809418783", "title": "【日拱一卒】JavaScript 闭包", "desc": "这是我参与8月更文挑战的第12天，活动详情查看： 8月更文挑战”  前言 聊聊闭包，缓一缓。 思路：自由变量=》闭包=》案例 自由变量 是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。"}, {"id": "6955650581033648135", "title": "JavaScripts基础（8）字符串操作方法全解析", "desc": "字符串是基本数据类型的，字符串的每一次操作都是直接的对值进行操作，不像数组是基于空间地址来操作的，所以不存在原有字符串是否改变的问题，肯定都是不变的 charAt/charCodeAt 作用：char"}, {"id": "6977966305110392869", "title": "浏览器端的机器学习 tensorflowjs(5) 数据处理", "desc": "为了体现 TensorFlow.js 的性能优势，需要将数据转换成张量，同时来需要进行一些处理如洗牌和归一化，具体做法代码里见。 数据洗牌 每次训练数据前我们需要将数据的顺序打乱好处是更利于训练。因为"}, {"id": "6956093307533393956", "title": "JavaScripts高阶（4）前端逃不过的this、同步异步", "desc": "this 在js非严格模式下this： 1、自执行函数中的this一般都是window 2、给元素的某个事件绑定方法，当事件触发执行对应事件的时候，方法中的this一般都是元素本身 3、还有一种方式能"}, {"id": "6844903677317103624", "title": "React开发中提升幸福度的一些小技巧", "desc": "又一篇来自日常开发的汇总：各位客官请对号入席，店小二逐一上菜。"}, {"id": "6916290543307718669", "title": "从打字机效果的 N 种实现看JS定时器机制和前端动画", "desc": "打字机效果即为文字逐个输出，实际上就是Web动画。在Web应用中，实现动画效果的方法比较多，JavaScript 中可以通过定时器 setTimeout 来实现，css3 可以使用 transition 和 animation 来实现，html5 中的 canvas 也可以实现…"}, {"id": "6844903690000678919", "title": "vue组件通信--注意事项及经验总结", "desc": "如果传到子组件的prop的数据在父组件会被改变的，放到计算属性中监听变化使用。因为如果传递的是个对象的话，只改变下面的某个属性子组件中是不会响应式更新的，如果子组件需要在数据变化时响应式更新那只能放到computed中或者用watch深拷贝deep:true才能监听到变化 当然…"}, {"id": "6991485990347128869", "title": "扎实基础篇-----reduce进阶（上）｜ 8月更文挑战", "desc": "前言 想必小伙伴们对reduce应该不会陌生吧，这是ES5新增的处理数组的方法，不过虽然说是处理数组的方法，但他可并不是仅仅局限在数组上而已，下面一起来学习一下吧！ 语法 reduce方法接收两个参数"}, {"id": "6973835831555391518", "title": "构建 Typescript 知识体系(九)-高级类型之映射类型", "desc": "这是我参与更文挑战的第十五天，活动详情查看:更文挑战 通过映射类型，可以从一个旧的类型，生成一个新的类型，比如 把一个类型/接口中的所有属性变为只读 Readonly源码实现原理 Readonly是一"}, {"id": "6844903622010994695", "title": "前端性能优化：细说JavaScript的加载与执行", "desc": "本文主要是从性能优化的角度来探讨JavaScript在加载与执行过程中的优化思路与实践方法，既是细说，文中在涉及原理性的地方，不免会多说几句，还望各位读者保持耐心，仔细理解，请相信，您的耐心付出一定会让您得到与之匹配的回报。 随着用户体验的日益重视，前端性能对用户体验的影响备受…"}, {"id": "6844903560434417677", "title": "谈谈IntersectionObserver懒加载", "desc": "这是MDN上给的官方概念，不用去管它，我粘出来只是为了显得专业点嘛... 重点看这里监听目标元素与其祖先或视窗交叉状态的手段，其实就是观察一个元素是否在视窗可见。 可以看到，交叉了就是说明当前元素在视窗里，当前就是可见的了。 其实就是一个简单的构造函数。 以上代码会返回一个In…"}, {"id": "6844903874214494221", "title": "JS处理大数相加问题", "desc": "前面讲到，在JavaScript中，使用浮点数标准IEEE 754表示数字的，在表示小数的时候，在转化二进制的时候有些数是不能完整转化的，比如0.3，转化成二进制是一个很长的循环的数，是超过了JavaScript能表示的范围的，所以近似等于0.30000000000000004…"}, {"id": "6844904192222429198", "title": "0.1+0.2===0.3?事情并没有那么简单！", "desc": "众所周知JavaScript中0.1 + 0.2是不等于0.3的，这非常容易求证。如下图，在chrome控制台中显示 而且这似乎不是JavaScript的问题。 在java中，输入0.1 + 0.2也是这个数，如下图：。 想要弄清楚这个问题，首先得清楚浮点型在计算机中是如何存储…"}, {"id": "6844903574934126599", "title": "不可错过的javascript迷你库", "desc": "最近看着下自己的github star，把我吓坏了，手贱党，收藏癖的我都收藏了300+个仓库了，是时候整理一下了。 Unix主张kiss，小而美被实践是最好用的，本文将介绍笔者收集的一些非常赞的开源库。 这些库的共性是非常小，而且功能单一。 如果你操作过cookie的接口，那么…"}, {"id": "6844903781969166349", "title": "深入理解DOM事件机制", "desc": "针对不同级别的DOM，我们的DOM事件处理方式也是不一样的。 DOM级别一共可以分为4个级别：DOM0级「通常把DOM1规范形成之前的叫做DOM0级」，DOM1级，DOM2级和 DOM3级，而DOM事件分为3个级别：DOM0级事件处理，DOM2级事件处理和DOM3级事件处理。如…"}, {"id": "6927246122402447373", "title": "js 校验身份证姓名及号码", "desc": "最近在项目中遇到了关于身份证姓名和 id 的校验，特此记录。 首先明确校验规则，中国人的姓名，无非就是汉字+长度校验。这可很简单，随便去网上搜一下汉字校验，千篇一律的以下代码： 看起来好像没什么问题，实际测试好像也没什么问题。但是我们也知道，中国汉字是一直在增加的，对应的 un…"}, {"id": "6904131189435858951", "title": "javascript对象的v8底层原理实现", "desc": "javascript 对象像⼀个字典是由⼀组组属性和值组成的，所以最简单的⽅式是使⽤⼀个字典来保存属性和值，但是由于字典是⾮线性结构，所以如果使⽤字典，读取效率会⼤⼤降低。 V8 为了提升存储和查找效率，V8 在对象中添加了两个隐藏属性，排序属性(element)和常规属性(p…"}, {"id": "6844903665803722759", "title": "【webpack进阶】前端运行时的模块化设计与实现", "desc": "webpack是一个强大而复杂的前端自动化工具。其中一个特点就是配置复杂，这也使得「webpack配置工程师」这种戏谑的称呼开始流行🤷但是，难道你真的只满足于玩转webpack配置么？ 显然不是。在学习如何使用webpack之外，我们更需要深入webpack内部，探索各部分的…"}, {"id": "6844904195389128717", "title": "Vue技巧 | 在Vue3中使元素在滚动视图时淡入", "desc": "除了视差组件和滚动事件外，添加响应式触摸的一种好方法是使元素在滚动视图时淡入。 在本技巧中，将介绍如何使用滚动事件和CSS转换在Vue3中实现此功能。 这是我们将学习如何在本教程中进行构建的屏幕截图。 我们要做的第一件事是构建模板并设置组件样式。在此示例中，我们将使用空白块来说…"}, {"id": "6972903826491703333", "title": "Vue 模拟｜数据双向绑定", "desc": "此文采用了设计模式中的观察者模式，模拟实现了 Vue 中数据双向绑定的效果。如果您对观察者模式不熟悉，可先阅读《JS 设计模式｜观察者模式》，本文只模拟了数据双向绑定的效果"}, {"id": "6844903762910248968", "title": "模拟实现 JS 引擎：深入了解 JS机制 以及 Microtask and Macrotask", "desc": "实现自定义 Javascript 引擎来解释 event loop 系统的工作原理并演示其任务队列、执行周期。 Task Queue ：是用来处理异步任务的，当该任务完成时，会指定对应回调进入队列。 总结一下就是，Javascript 引擎会将脚本内容包裹在 Main 函数内，…"}, {"id": "6973834804169015326", "title": "构建 Typescript 知识体系(八)-高级类型之索引类型", "desc": "这是我参与更文挑战的第十四天，活动详情查看:更文挑战 在开发中经常会遇到这样的场景: 从对象中获取一些属性的值,然后建立一个集合 栗子，getValue 函数 抽取 obj 对象的一些值，形成一个数组"}, {"id": "6844903544907104270", "title": "初探 Electron - 理论篇", "desc": "提起构建桌面应用，最先想到的肯定是 NW.js ，但却一直不温不火。直到 Electron 的出现，将这一切推向了巅峰，前端的触手伸向了更为广阔的系统应用。"}, {"id": "6953063385609175076", "title": "防抖节流看这篇就够了", "desc": "前言 在日常开发中我们经常遇到一些频繁事件的触发情况，比如在滚动事件中需要做个复杂计算、防止一个按钮的多次点击提交操作、监听窗口的 resize 事件处理一些逻辑等等。这些需求都可以通过函数防抖动或者"}, {"id": "6844903910902087688", "title": "javascript之闭包七（闭包的应用场景）", "desc": "1. 闭包应用场景之setTimeout 2. 闭包应用场景之回调 我们定义行为，然后把它关联到某个用户事件上（点击或者按键）。我们的代码通常会作为一个回调（事件触发时调用的函数）绑定到事件上 3. 闭包应用场景之封装变量 共享的环境创建在一个匿名函数体内，立即执行。 环境中有…"}, {"id": "6954936502681862151", "title": "【???尼克杨操作符】三元操作符、可选链、双问号操作符", "desc": "一脸问号的进去，一脸问号的出来。 一个问号是可选链，两个问号是非空校验，多个问号？？？尼克扬！！！"}, {"id": "6991057858930409480", "title": "小程序原理解析（三）", "desc": "编译原理 微信开发者工具和微信客户端都无法直接运行小程序的源码，因此我们需要对小程序的源码进行编译。代码编译过程包括本地预处理、本地编译和服务器编译。为了快速预览，微信开发者工具模拟器运行的代码只经过"}, {"id": "6991056943758442510", "title": "小程序原理解析（一）", "desc": "双线程模型 小程序的渲染层和逻辑层分别由两个线程管理：渲染层的界面使用 WebView 进行渲染；逻辑层采用 JSCore 运行 JavaScript 代码。一个小程序存在多个界面，所以渲染层存在多个"}, {"id": "6844903758661419016", "title": "Event Loop 原来是这么回事", "desc": "... 以前有一个餐厅，这个餐厅有一个老板和一个厨师，自己创业的，刚开始起步阶段，没有资金请员工，所以自己来当老板兼服务员。 作为VIP顾客，肯定得有VIP特权。 一天、老板开始营业后，陆陆续续的来了一些人进来点餐吃饭。 由于这个店只有一个人，所以老板招待好他们点完餐之后就去炒…"}, {"id": "6996600528230678541", "title": "浏览器 Event Loop 初探", "desc": "事件循环过程是一个很复杂的过程，首先有一个常规的流程（涉及到宏任务、微任务、渲染、动画等）。但是浏览器进行了很多优化（例如：渲染队列优化，定时器合并等），所以有时候循环顺序是不符合常规流程的，这也是我"}, {"id": "6900852535637377038", "title": "JavaScript 是如何成为一门严肃的编程语言的", "desc": "JavaScript 的卑微起步始于 1995 年，是由当时在 Netscape 通信公司工作的 Brendan Eich 在短短 10 天内创建的。从那时起，JavaScript 已经走过了漫长的道路，从一个让网站变得漂亮的工具变成了一种严肃的编程语言。 在其早期，JavaS…"}, {"id": "6844903696770269191", "title": "JavaScript 模块化解析 ", "desc": "随着 JavasScript 语言逐渐发展，JavaScript 应用从简单的表单验证，到复杂的网站交互，再到服务端，移动端，PC 客户端的语言支持。JavaScript 应用领域变的越来越广泛，工程代码变得越来越庞大，代码的管理变得越来越困难，于是乎 JavaScript 模…"}, {"id": "6844904052006846471", "title": "JS：获取对象属性有哪些方法？", "desc": "对象的属性有两种类型：字符串和 Symbol。 因为对象只支持字符串和 Symbol 两种类型的属性，如果我们使用的是任何其他类型值作为属性名，最后都会被转为字符串。比如这里的 [objProp]，objProp 是个对象，用它创建完 obj 后，再看看，就变成字符串 \"[ob…"}, {"id": "6844903541509718030", "title": "用 webpack 写一个简单的 JS SDK", "desc": "1. 加载引用 2. 暴露一个公共变量 最简单的做法是在 index.js 里加一句 window.SDK = ... 3. 提供两个版本 4. 提供定制版本 5. 内部实现通过模块引用"}, {"id": "6844903656811151367", "title": "腾讯 Node.js 非侵入开发框架 Tars.js 2.0 正式发布", "desc": "随着互联网的发展，越来越多的业务不仅仅由单一节点或是单一语言就可承载，而是趋向多语言分布式协同开发，例如接入层由 Node.js 完成，逻辑以及数据层由 C++/GO/Python 实现，并由此组成大型异构系统。 基于 Tars 体系研发出 Tars.js 以便用户在不改变异构…"}, {"id": "6844903779133816840", "title": "JS 扁平化 (flatten) 数组", "desc": "数组是 JS 中使用频率仅次于对象的数据结构，官方提供了众多的 API，谈谈如何扁平化（flatten）数组。"}, {"id": "6844903514003488776", "title": "vue-cli 实战总结", "desc": "如果在created阶段的发送ajax请求，此时页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，请求建议放在mounted阶段，当然mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染 完毕再发生请求，可以用 vm.$nextTick。 …"}, {"id": "6844903744413384717", "title": "一道面试题引发的思考：理解 new 运算符", "desc": "说实话，第一反应我以为值为 'Tom'，等到我把代码丢到控制台一输出，才明白我错了。天呐，new运算符给无视掉了吗？？？ 很显然，输出的结果是 'Tom', 但是有 new 存在呢？接下去，我们来捋一捋。 emmmm，相当晦涩难懂。 我们接着看 MDN 文档的解释，毕竟光光看这…"}, {"id": "6992577544205647879", "title": "JavaScript变量声明", "desc": "JavaScript变量的声明。var、let和const，内容来源于JavaScript红宝书和MDN。"}, {"id": "6844903781990137864", "title": "基于原生fetch封装一个带有拦截器功能的fetch，类似axios的拦截器", "desc": "是的。原生fetch确实不够用。 在项目中，如果想要在所有的网络请求之前往header中加入权限信息（比如：authorization=xxxx）。用原生fetch的话，你只能在每个fetch请求的时候，header配置中写上authorization=xxxx。或者在请求结果…"}, {"id": "6981077786022641672", "title": "LeetCode215. 数组中的第K个最大元素", "desc": "215. 数组中的第K个最大元素 题目描述 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。"}, {"id": "6844903863632314375", "title": "[译] 8 个实用的 JavaScript 技巧", "desc": "每种编程语言都它独特的技巧。其中很多都是为开发人员所熟知的，但其中一些相当的 hackish。在这边篇文章中，我将向你展示一些我觉得有用的技巧。其中一些我在实践中使用过，而另一些则是解决老问题的新方法。Enjoy！ 1. 确保数组的长度 不知道你是否遇见过这样的情况，在处理网格…"}, {"id": "6953390808334598157", "title": "JS中的apply、call、bind你掌握了吗？一起来手写实现这三个方法吧 | 创作者训练营第二期", "desc": "apply、call和bind这三个方法在函数原型链中是比较重要的概念，和this关键字密切相关。如果你对这三个方法还不是很清楚的话，那么认真地阅读这篇文章吧，让我们一起来彻底掌握它们吧！ 在开始介绍"}, {"id": "6932770913259634701", "title": "如何打造一款乖巧的鼠标指针特效", "desc": "也可以在我的博客主页预览. 为了让页面所有的元素都有这个效果，直接对 * 设置就好了. 这里的 url 是个内置的 svg 图片，长宽 8 像素，颜色为 #000 再加上 0.5 的透明度. 两行代码搞定. 在这里 “元素” 指 “可以点击的 DOM 对象”. 一般而言，网页设…"}, {"id": "6996932693279637540", "title": "js 继承六种方式", "desc": "前言 本文详细详解了js继承的六种方式，保证一看就懂，例子非常贴和，毫无违和感。 切记：学习js继承，需要前置知识，必须要理解并掌握原型链的使用，以及会使用构造函数新增属性/方法的方式"}, {"id": "6991481305112248351", "title": "深入理解红宝书（1）| 8月更文挑战", "desc": "相信码农同学们一定非常了解“红宝书”系列书籍了，但是大多数人还是没有从头到尾的细致的读一遍这一系列书籍，毕竟无论是纸质书还是PDF的电子书，对我们的吸引远远不如视频来的强烈"}, {"id": "6844904004745592846", "title": "[译] 图解Event Loop", "desc": "事件循环（Event Loop），是每个JS开发者都会接触到的概念，但是刚接触时可能会存在各种疑惑。我是一个视觉型学习者，所以打算通过gif动图的可视化形式帮助大家理解它。 众所周知，JavaScript是 单线程（single-threaded） 的，也就是同一时间只能运行一…"}, {"id": "6844903686376816647", "title": "小程序即时通讯demo", "desc": "大家可以自行下载，按照提示运行，就能看到效果；现在只是做了要给基本版的，要做复杂功能，可以继续添加。"}, {"id": "6922406119809908743", "title": "整理一下JavaScript中的数组方法reduce的学习知识", "desc": "介绍这么一看似乎看起来很懵，我也是这样然后就有了下面的学习记录基本使用多一个参数画个图理解一下理解不如手写自己简写的MDN的Polyfill简单应用扁平化数组组合函数reudxapplyMiddlew"}, {"id": "6844903680357957645", "title": "ElementUI的构建流程", "desc": "最近一直在着手做一个与业务强相关的组件库，一直在思考要从哪里下手，怎么来设计这个组件库，因为业务上一直在使用ElementUI（以下简称Element），于是想参考了一下Element组件库的设计，看看Element构建方式，并且总结成了这篇文章。 废话不多说，先看看目录结构，…"}, {"id": "6968796449609875493", "title": "前端经典题之JavaScript第一篇(持续更新)", "desc": "一、JavaScript第一篇 1.1什么是JavaScript JavaScript是客户端和服务端脚本语言，可以插入到HTML中，同时JavaScript也是面向对象的编程语言。 1.2 Java"}, {"id": "7000318486396272676", "title": "Promise作用和实现", "desc": "Promise 作用 Promise 表示异步操作的最终结果，解决异步回调、多层函数嵌套、并发的问题。"}, {"id": "6844904135641268231", "title": "手把手教你用原生JavaScript造轮子（五）——Collapse折叠面板", "desc": "To be continued..."}, {"id": "7000325193381986335", "title": "js基础笔记第二天", "desc": "数据类型转换 算术运算会具有隐式转换，如果类型不一样，则默认转成字符串比较。 特殊 NaN：NaN是一个Number类型跟任何的东西都不相等 参与任何比较运算结果都为false 有可能用户恶意输入，结"}, {"id": "6844904113130438663", "title": "如何取消 Fetch  请求", "desc": "JavaScript 的 promise一直是该语言的一大胜利——它们引发了异步编程的革命，极大地改善了 Web 性能。原生 promise 的一个缺点是，到目前为止，还没有可以取消 fetch 的真正方法。 JavaScript 规范中添加了新的 AbortControlle…"}, {"id": "7000328017436229669", "title": "js核心笔记第二天", "desc": "函数 什么是函数？ 函数是描述一项任务清单的代码段，可以反复调用。就相当于一件事情每次做的话都要去重复完成这些步骤，我们就可以把它封装成一个函数，这样后面再调用的话就不需要写很多重复的代码。 创建函数"}, {"id": "6996995163771895838", "title": "用js实现一个随机背景色的九九乘法表", "desc": "今天用js整一个随机背景色的九九乘法表，一起来看看怎么实现的吧。觉得好玩儿的话，记得点赞支持一下哟~"}, {"id": "6909725682784272398", "title": "前端玩转阿里云对象存储 OSS", "desc": "对象存储（Object Storage Service，OSS），也叫基于对象的存储，是一种解决和处理离散单元的方法，可提供基于分布式系统之上的对象形式的数据存储服务，具有可拓展、可管理、低成本等特点，支持中心和边缘存储，能够实现存储需求的弹性伸缩，主要应用于海量数据管理的各类…"}, {"id": "7000014661739347998", "title": "初识Webpack(二)", "desc": "loader介绍 由于webpack 只能识别与分析 JavaScript 和 JSON 文件，于是面对不是这类文件时，我们需要对webpack扩展..."}, {"id": "6844904048236167176", "title": "H5与原生APP交互", "desc": "在前端进行开发H5页面的时候，常常会有一些需要内嵌到APP的H5页面。在APP中使用H5页面主要是由于它是运行在浏览器上，所以只需要开发一次便可以在不同的操作系统上显示，并且迭代版本很方便。开发成本比较低。 在开发的过程中，经常需要和APP进行交互。本文已H5的角度整理了双方交…"}, {"id": "6844903942292258830", "title": "JS 中几种轻松处理'this'指向方式", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 我喜欢在JS中更改函数执行上下文的指向，也称为 this 指向。 另一方面，this 很难把握。 咱们经常会发现自己用的 this 指向不正确。下面的教你如何简单地将 this 绑定到所需的值。 在开始之前，我…"}, {"id": "6998541743826141197", "title": "数据结构 - 深入了解 JSON", "desc": "学习了 node.js 实战: 文件系统模块 结合 HTTP模块-搭建简单本地文件服务器, 通过读取本地文件, 模拟数据接口 其中用到读取的 .json文件你了解吗? 今天来深入了解一下 JSON"}, {"id": "6970289328929013767", "title": "【typescript 类型检查原理】override 是如何实现的", "desc": "前段时间写过一篇类型检查的实现原理的文章，那只是实现了简单的赋值语句和函数调用的类型检查，实际上类型检查的情况特别多，一篇文章肯定写不完，所以我准备用系列文章来讲述各种类型检查的实现原理，帮助大家更好"}, {"id": "6938789885037789192", "title": "Chrome Dino 小恐龙作弊？控制台解决｜技术点评", "desc": "Dinosaur Game（也被称为 T-雷克斯 游戏），最初代号为 Program Bolan，由塞巴斯蒂安·加布里埃尔（Sebastien Gabriel）于 2014 年构建的，是 Chrome 浏览器内置的一个小游戏。 Chrome 浏览器在无网络连接的错误页面埋了一个…"}, {"id": "6996674958717894664", "title": "边学边译JS工作机制--34. 调试异步代码的4个提示", "desc": "调试是软件开发的一个重要部分，任意开发者在这个领域都可以深入的提升。在发布环境中遗留下重大bug会给你的应用和公司带来巨大的损失。调试程序包括找bug和修Bug 在调试过程中，你可以单步调试代码，确定"}, {"id": "6998527512753995790", "title": "JavaScript进阶（二）", "desc": "写在前面，兜兜转转，来来回回，从开始学习JS到现在已经工作这些来年，我和JS每天的生活可以用如胶似漆来形容。但自认为对他认识的还不够深刻。故从头再来，从基础开始。Go！！！"}, {"id": "6844904115462488077", "title": "面试官：JavaScript 原始数据类型 Symbol 有什么用？", "desc": "以前提到 JavaScript 原始数据类型时，我们知道有Number，String，Null，Boolean，Undefined这几种。ES6 引入了新的基本数据类型Symbol和BigInt。今天我们就来了解下Symbol类型。Symbol类型是为了解决属性名冲突的问题，顺…"}, {"id": "6844903855772303367", "title": "给你一个开箱即用，功能完善的koa项目", "desc": "结合当前的node比较火的三大框架，Express、Koa、egg。笔者之前用的Express,后面发现回调把我搞死了，实在太无奈了。终于有一天去尝试了Koa来进行开发，发现实在太舒服了。ES6语法支持很多，同步模式也很到位，但是在学习koa的过程中，发现基本的基础知识都了解了…"}, {"id": "6955892858842775582", "title": "一次性搞懂JavaScript异步编程", "desc": "什么是异步 有异步肯定就有同步，那我们就比较的来看。 1、同步：同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；"}, {"id": "6968757807239659528", "title": "深入浅出__proto__和prototype", "desc": "- 每个函数都有一个`prototype`属性，值是一个原型对象 - 每个对象都有一个`__proto__`属性（null除外），指向构造函数的原型`prototype` - 构造函数的原型对象的`c"}, {"id": "6844904128368345102", "title": "给自己提了个bug：setInterval卡顿问题", "desc": "移动端开发，一些用到UI线程的方法(比如：通过动画、setInterval、setTimeout等频繁操作dom)，在引擎线程被占用时，会发生卡顿的现象。 结论：在某些低版本的webview内核中，触摸滑动（滚动）会触发重绘，也就是UI线程被占用，此时引擎线程被挂起。 🤔 使…"}, {"id": "6977636002382741518", "title": "前端大白话之\"库里\"化（Currying）", "desc": "前端大白话之柯里化（Currying） 深入研究了柯里化的概念，实现以及作用。 并探究了进阶的柯里化的实现。"}, {"id": "6918446305438072845", "title": "JavaScript的简单语法", "desc": "本文✍了我学习JavaScript的一些基本语法，如果你是老手希望可以查漏补缺，如果是和我一样的小白，那我的一系列笔记都会对你很有帮助的。 它的优秀之处并非原创，它的原创之处并不优秀。(优秀的地方大部分是从别的地方借鉴过来的，而我自己设计的东西却-好烂。) 很多JavaScri…"}, {"id": "7000977014194700325", "title": "flex布局，左右固定宽度，中间自适应", "desc": "下面这种写法没有问题，但是如果中间放的是文字，要求显示一行，超出部分...显示呢？ 改进写法详见代码"}, {"id": "6844903801191661575", "title": "容易被遗忘的前端基础：JavaScript 内存详解", "desc": "某些语言，比如C有低级的原生内存管理原语，像malloc()和free()。开发人员使用这些原语可以显式分配和释放操作系统的内存。 相对地，JavaScript会在创建变量（对象、字符串）时自动分配内存，并在这些变量不被使用时自动释放内存，这个过程被称为垃圾回收。这个“自动”释…"}, {"id": "6844903726465941518", "title": "webpack - babel 篇", "desc": "基于我的上篇文章，webpack4.0 入门篇 - 构建前端开发的基本环境，补充对babel进行的一次探究。上篇文章讲叙到的 webpack babel 时几乎一笔带过，所以这篇文章将进行补充说明. 本文以当前最新版本的 babel - 7.10 为例， 做 babel 的配置…"}, {"id": "6844903685781225480", "title": "一文读懂前端缓存", "desc": "大家都知道缓存的英文叫做 cache。但我发现一个有趣的现象：这个单词在不同人的口中有不同的读音。为了全面了解缓存，我们得先从读音开始，这样才能够在和其他同事(例如 PM)交(zhuāng)流(bī)时体现自己的修(bī)养(gé)。 友情提示：文章有些长，您可能需要分批次读完…"}, {"id": "6993717698836299784", "title": "今天来说说箭头函数", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 es6标准还没出来之前，我们一直使用的是普通函数 就比如下面写法： es6标准出来后，增加了箭头函数（Arrow Function），"}, {"id": "6844903616067665933", "title": "你不是一个前端", "desc": "大四拿到了百度Offer后不久，便开始了在百度的实习。 热爱前端，热爱JS，有自己偏执的审美，认为整个宇宙其实是一个用JS编写的程序——这当然是不可能的。不过热爱JS确实是这样。 华丽丽的我接到了我的第一个Task——为页面开发导入功能，我负责前端，我的Mentor负责后端。 …"}, {"id": "6993703366845005860", "title": "边学边译JS工作机制-24. 加密和中间人（MITM）攻击", "desc": "密码学是IT界的重要领域。无数人在网络上互相交流，在信息传递的过程中就可能有人窃取或者劫持，可能有人利用网络弱点窃取个人信息。 人们如何安全发送信息，以及JS扮演了什么角色？如果你不知道答案，那么这一"}, {"id": "6968377530428424200", "title": "JavaScript Array、Object、数组、对象等数据转换及处理总结（三）", "desc": "这一篇总结一下基础的数组遍历和对象遍历的对比、结合、技巧 JS 对象的遍历 先上题目 现需要将对象数据 cityInfo 转变为 cityInfoArr 用于饼图统计图显示这个班级的性别占比，如果城市"}, {"id": "6930450490585006093", "title": "typeof & instanceof 原理", "desc": "typeof原理typeof是操作符而不是函数，用来检测变量的类型数据在底层都表示为二进制，js中前三位（低位）代表数据类型000：对象110：布尔100：字符串010：浮点数1：整数typeofnu"}, {"id": "6993682031779512356", "title": "数组32个方法整理 | 8月更文挑战", "desc": "数组共包含33个标准API方法和一个非标准的API方法，使用场景和使用方案纷繁复杂。未来便于学习，将数组分为三类： 改变自身值 不改变自身值 遍历方法 改变自身值的数组方法"}, {"id": "6844904118679502855", "title": "【译】将多个属性传递给 Vue 组件的几种方式", "desc": "所有使用基于组件的体系结构(如Vue和React)的开发人员都知道，创建可重用组件是很困难的，而且大多数情况下，最终会通过传入大量的属性，以便从外部更容易地控制和自定义组件。这并不坏，但是传递大量属性确实会变得有点麻烦和丑陋。 我们以 vuetify 的按钮组件为例，它是最简单…"}, {"id": "6865262396672311310", "title": "这次，彻底搞懂发布订阅模式", "desc": "之前写过一篇分析发布订阅模式的文章，文章中代码比较多，看起来比较费劲不好理解。决定用看得见且体验的到的方式重新表达其中发布、订阅、取消订阅等操作和关系，如有不足请大家指出，互相学习。 点击创建，输入名字，点确定，分别创建发布者和订阅者，鼠标hover到订阅者时展示订阅和解订的功…"}, {"id": "6998437488708550686", "title": "vue、js 保留小数点位数以及转化为百分比", "desc": "toFixed MDN toFixed() 方法使用定点表示法来格式化一个数值。 一、保留小数点后两位四舍五入 二、留两位小数不四舍五入 三、将小数转化为百分比（保留两位小数，四舍五入） 注意：将小数"}, {"id": "6975707843806625799", "title": "JavaScript window 对象详解", "desc": "这是我参与更文挑战的第 14 天，活动详情查看: 更文挑战 1. 概述 window对象 指当前的浏览器窗口，它也是当前页面的顶层对象，即最高一层的对象，所有其他对象都是它的下属。 一个变量如果未声明"}, {"id": "6844903632974905358", "title": "JavaScript中的强制类型转换", "desc": "总结和剖析JavaScript中的强制类型转换，主要参考《你不知道的JavaScript(中卷)》第四章。 文章内容主要分为五个部分，第一部分讲述向基本类型数据转换的4种抽象操作，第二部分讲述显式强制类型转换，第三部分讲述隐式强制类型转换，第四部分讲述相等关系，其中需要掌握“抽…"}, {"id": "6876332844667371527", "title": "面试系列之JavaScript手写代码篇", "desc": "1. bind 2. call 3. apply 1. 继承 2. instanceof 1. Objcet.create 2. Object.is 3. new 4. 浅拷贝 5. 深拷贝 6. 对象扁平化 1. 数组扁平化 2. 数组去重 1. Promise 2. asy…"}, {"id": "6844903728374546445", "title": "webpack4之splitchunksPlugin拆拆拆--项目实践", "desc": "其他的非公共代码。 all: 不管文件是动态还是非动态载入，统一将文件分离。当页面首次载入会引入所有的包 async： 将异步加载的文件分离，首次一般不引入，到需要异步引入的组件才会引入。 initial：将异步和非异步的文件分离，如果一个文件被异步引入也被非异步引入，那它会被…"}, {"id": "6902467368899837966", "title": "js - 继承图解", "desc": "语雀地址：地址 继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，因为函数"}, {"id": "6844903686569721869", "title": "webpack4.0 入门篇 - 构建前端开发的基本环境", "desc": "自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。 构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。 入口(entry point): 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的…"}, {"id": "6844903988907737102", "title": "10 个常问的 JS 面试题", "desc": "为了保证的可读性，本文采用意译而非直译。 JS 初学者总是对 this 关键字感到困惑，因为与其他现代编程语言相比，JS 中的这this关键字有点棘手。 “this” 一般是表示当前所在的对象，但是事情并没有像它应该的那样发生。JS中的this关键字由函数的调用者决定，谁调用就…"}, {"id": "6993286253521141768", "title": "JavaScript 中的 window.onload 应该什么时候写", "desc": "JavaScript 中的 window.onload 应该什么时候写 0. 参考资料 《JavaScript DOM 编程艺术》第 69 页 JS中window.onload事件详解 为什么把 Sc"}, {"id": "6844903621893554183", "title": "精读《React 八种条件渲染》", "desc": "介绍了八种 React 条件渲染方式。 这样对 React 渲染效率有提升。 将组件赋值到变量，就可以在 return 前任意修改它了。 但三元运算符产生嵌套时，理解成本会变得很高。 这个是最常用了，因为代码量最少。 高阶组件，就是返回一个新组件的函数，并且接收一个组件作为参数…"}, {"id": "6844903649659846669", "title": "JS 装饰器，一篇就够", "desc": "在 ES6 中增加了对类对象的相关定义和操作（比如 class 和 extends ），这就使得我们在多个不同类之间共享或者扩展一些方法或者行为的时候，变得并不是那么优雅。这个时候，我们就需要一种更优雅的方法来帮助我们完成这些事情。 在面向对象（OOP）的设计模式中，decor…"}, {"id": "7004640539609923621", "title": "JavaScript原型、原型链、作用域链", "desc": "JavaScript在编程语言界是个异类，JavaScript在运行时动态的改变变量的类型。JavaScript中有个特殊的存在：对象"}, {"id": "6979508545146322980", "title": "react-i18next基本使用", "desc": "配置文件 解释 intervalPlural插件 用于区间的数量表示； 利用count属性可以表示复数，但若要区分某个区间，那么需要使用该插件 具体使用见官方用例即可 Backend插件 由于配置项缺"}, {"id": "6910837207632707592", "title": "Javascript执行期上下文、预编译 ", "desc": "当知识的不断涌入，知识的精炼程度和深度基础变的尤为重要。无论你是初学者，还是已经工作了几年的工作者。基础的往往是新技术学习理解的基石，但知识的深度达到一定的程度，对新知识的学习更加迅速，理解将更为透彻！ 一位程序员的职业生涯大约十年，只有人寿命的十分之一。前端项目只是你生活工作…"}, {"id": "6992014889141141517", "title": "JavaScript中的冒泡事件｜8月更文挑战", "desc": "比起好好告别，其实我更擅长逃跑。——夏吉尔硕 # 什么是JS冒泡事件 冒泡事件就是点击子节点，会向上触发父节点，祖先节点的点击事件 即在父div中存放子div的情况下"}, {"id": "6896680181000634376", "title": "TypeScript 中的严格模式", "desc": "不允许出现隐式的 any 类型。下图声明了一个判断奇偶的函数： 建议开启 noImplicitAny 选项。 严格空检查。如果关闭此选项，则 null 和 undefined 两种类型是任意类型的子类型，即下面的语法不会报错： 建议开启 noImplicitAny 选项。 严格…"}, {"id": "6903827268759388173", "title": "开始学习函数式编程", "desc": "函数式编程就是将程序全部使用函数来表达，向函数传入参数，接着输出结果。当有一串数据时，我们需要思考如何通过函数的形式来表达，而不是一行一行的命令式编程，举个例子： 这就是典型的命令式编程，先处理第一行，接着处理第二行。再来看看用函数式来表达这串代码，非常简洁易懂： 函数式编程的…"}, {"id": "6992960127171035149", "title": "重温js—— 数字的存储,js精度问题", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 原因分析 整数10进制转2进制 例如： 将十进制的10转成二进制的数据是 1010 表达式 商 余数 10 / 2 5 0 5 / 2 2 "}, {"id": "6844903958402564104", "title": "【JS 口袋书】第 1 和 2 章：JS简介及基础", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 JS 是一种用于 web 的脚本语言。JS 诞生于 1995 年，由 **Brendan Eich **一手创建，用于向web页面添加交互性。那时的互联网还处于起步阶段，我们今天看到的大多数花哨的网页在那时候还…"}, {"id": "6844903661340983304", "title": "【译】15个有趣的JS和CSS库（2018.7）", "desc": "Tutorialzine每月都会给我们精心挑选优秀的web开发资源，这些资源可以帮助我们解锁最新和最炫酷的网络开发姿势。前端er,让我们一起先睹为快吧！ polly是一个用于记录，重放和模拟HTTP交互的开源库。它提供了一套完善且易用的API来拦截、修改和附加事件，并更改配置来…"}, {"id": "6844903639815815181", "title": "3YAdmin-专注通用权限控制与表单的后台管理系统模板", "desc": "3YAdmin基于React+Antd构建。GitHub搜索React+Antd+Admin出来的结果没有上百也有几十个，为什么还要写这个东西呢？ 一个后台管理系统的核心我认为应该是权限控制，表单以及错误信息收集这三大块，前两个最为重要。而GitHub上的大多数项目关注点都不在…"}, {"id": "6922298907326152712", "title": "分享上家的一个小需求，低配版“轮询”", "desc": "一开始我刚拿到这个需求有些懵逼，履了履思路，然后还是一头懵逼。可能当时脑阔有点昏，不会写然后就是同事帮忙处理的。 现在我固定好了商品数量，和员工人数，将商品依次分给选定的人员。 倘若每人分完以后，还有多的商品那么多的商品就优先分给编号靠前的人。 。 2号分到了：2,5,8。 一…"}, {"id": "6901513900466896904", "title": "从Promise规范到手写Promise", "desc": "promise就是将异步任务队列化，将多个异步任务按照顺序输出，同时用链式调用解决回调地狱的问题。 此时的Promise已经可以实现基本的功能了，不信的话调用看看。 但是这个不能解决异步问题。 怎么解决这个问题呢？我们可以借助发布-订阅者模式来处理。 再执行一下上面的操作，肯定…"}, {"id": "6913520919906844679", "title": "潮流前端周刊（第17期）- 火锅店担担面", "desc": "很有有一种读书记笔记的感觉，值得一看。 浏览器插件在一定程度上可以帮忙解决不少辅助性的内容，不过很不建议去第三方下载。 有趣的对比，可能大部分同学知晓虚拟 DOM 优缺点，但是增量 DOM 对比虚拟 DOM 可看这篇。 原来 HTTP/2 标准是 2015 年的东西了，不知不觉…"}, {"id": "7000661332689158151", "title": "js之对象和继承", "desc": "创建对象的几种方式 通过Object 方式二：对象字面量 方式三：工厂模式 方式：通过工厂函数动态创建对象并返回。 返回一个对象的函数，就是工厂函数。 适用场景: 需要创建多个对象。 问题: 对象没有"}, {"id": "6993986271475400735", "title": "【前端--JavaScript】知识点（五）—— 项目中的内存泄漏（一）", "desc": "首先我们得清楚什么是内存泄漏，在引擎中有垃圾回收机制，主要针对一些程序中不再使用的对象，清理回收释放掉内存，但是实际上垃圾回收机制并不会把不再使用的对象全部回收掉。"}, {"id": "6869371313287495687", "title": "源码篇（八）：手写promise版mini源码。附送简版promise源码", "desc": "promise是前端同步代码执行机制的一个重点手段。也许你今天用的已经是es7的await，但理解好什么是promise依然是前端的重点。我们逐步分析一下promise的实现。 在传统的项目中，前端解决异步问题，只能用无止境的callback回调。其实小的项目，或者简单点的逻辑…"}, {"id": "6844904199700889607", "title": "JavaScript中解析 super 关键字", "desc": "在上面的代码中,子类 B 的构造函数之中的super(),它代表调用父类的构造函数。这是必须的,否则 JavaScript 引擎会报错。 而在ES6中规定, 在子类普通方法中, 通过 super 调用父类的方法时, 方法内部的 this 指向当前子类的实例. 导致输出的是\"随笔…"}, {"id": "6950273569523761166", "title": "浅拷贝和深拷贝", "desc": "浅拷贝和深拷贝的考题重心我认为是在 对 基本类型 和引用类型 的理解深度抛出问题。Weak Map循环引用"}, {"id": "6844903605481242637", "title": "开发必备的webpack4", "desc": "首先webpack4建议使用node版本在8.5以上，是因为要兼容新版npm下的npx，cmd中node -v查看node版本。 WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss…"}, {"id": "6906714992071213064", "title": "前端魔法堂：可能是你见过最详细的WebWorker实用指南", "desc": "JavaScript从使用开初就一直基于事件循环的单线程运行模型，即使是成功进军后端开发的Nodejs也没有改变这一模型。那么对于计算密集型的应用，我们必须创建新进程来执行运算，然后执行进程间通信实现传参和获取运算结果。否则会造成UI界面卡顿，甚至导致浏览器无响应。 从功能实现…"}, {"id": "7000621572213964831", "title": "那些年你不知道的this", "desc": "你不知道的this-函数上下文 this的指向不仅由定义函数的方式和位置决定的，同时还严重受到函数调用方式的影响"}, {"id": "6982463981696843806", "title": "Config配置中心", "desc": "学习目标 服务配置现状 　　 　　配置文件是我们再熟悉不过的，在微服务系统中，每个微服务不仅仅只有代码，还需要连接其他资源，例如数据库的配置或功能性的开关 MySQL、Redis 、Security "}, {"id": "6844903958423552013", "title": "精读《用 Babel 创造自定义 JS 语法》", "desc": "在写这次精读之前，我想谈谈前端精读可以为读者带来哪些价值，以及如何评判这些价值。 前端精读已经写到第 123 篇了，大家已经不必担心它突然停止更新，因为我已养成每周写一篇文章的习惯，而读者也养成了每周看一篇的习惯。所以我想说的其实是一种更有生命力的自媒体运作方式，定期更新。一个…"}, {"id": "6844903888215080973", "title": "面试官：JavaScript的数组有什么特殊之处？", "desc": "数组是前端开发者最常用的数据结构了，我们在项目中无时不刻在操作着数组，例如将列表组件的数据储存在数组里、将需要渲染成条形图的数据同样储存在一个数组里，虽然我们经常使用数组，但是很多人并不了解JavaScript数组的本质。 本节我们将从JavaScript数组的使用、内存模型两…"}, {"id": "6988811442245861407", "title": "leetcode笔记 | 704二分查找 278第一个错误的版本 35搜索插入位置（JavaScript）", "desc": "之前的思路中，mid固定不变，没有参与循环，实际上只实现了一次二分。于是定义数组下标左右端点l、r，采用求l、r平均值的方式确定mid，mid可以随l、r的变化而改变。"}, {"id": "6844903617099464718", "title": "前端的水平线，错误处理和调试", "desc": "错误处理在程序设计中的重要性是一定的。任何有影响力的Web应用程序都需要一套完善的错误处理机制。 执行代码期间可能会发生的错误有多种类型。每种错误都有对应的错误类型，而当错误发生时，就会抛出相应类型的错误对象。 在找不到对象的情况下，会发生ReferenceError（这种情况…"}, {"id": "7000370254018953252", "title": "JavaScript链表刷题（三）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 之前写了JavaScript链表刷题，JavaScript链表刷题（二） 有兴趣的童鞋可以冲，接下来继续刷两道链表题~~ 一、反转链表II"}, {"id": "6844903917260636168", "title": "科普：身份证号为什么不会重复？", "desc": "先来看看身份证号内包含了哪些元素。 1.按地域划分。每个人出生都有一个出生地，某个省市，某个区县，总会有一个地点，一块空间，具体到身份证号里，前几位所代表的正是每个人所在的空间。2.按时间划分。每个人都有生日，生日代表着什么？如何把时间看做一条长河，那么你的生日就是上岸的那一刻…"}, {"id": "6992210861813137415", "title": "《JS原理、方法与实践》- canvas作图基础", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 canvas简介 canvas标签是HTML5标准最受欢迎的一个标签，它的作用就相当于一块画布，可以通过JS脚本在canvas上面进行绘画，"}, {"id": "6985177884289662984", "title": "# JavaScript 基础（二）", "desc": "合抱之木,生于毫末;九层之台,起于累土。作为一个前端，不管技术更新多快，JavaScript基础知识永远是最重要的知识。本文从运算符、条件分支语句、循环语句章节介绍了一些基础知识"}, {"id": "6992208659551879176", "title": "【从头学前端】03-这次我就搞懂了JavaScript中的变量", "desc": "这篇文章我们将来学习JavaScript中的变量，这篇文章包含了变量的概念、声明、调用，以及在声明变量时的特殊情况等内容。"}, {"id": "6921975823612248077", "title": "让人欲罢不能的reduce（内含小编项目实战示例）", "desc": "以前遇到复杂一点的数据结构处理时，for循环套for循环两梭子，代码篇幅大幅度增加，隔壁工位哥们看了不忍心了，说reduce那么好用为啥不用呢？菜鸡小编也不敢多问reduce怎么用，悄悄的下去查资料。"}, {"id": "6992194951492665374", "title": "Vue 3 基础", "desc": "这是我在学习 Vue 3 时做的笔记，除了一些常见的使用框架必备基础知识，还包括一些需要注意的细节。"}, {"id": "6844904094533074951", "title": "如何修复Vue中的 “this is undefined” 问题", "desc": "别担心，不只有你一个人，我也经常遇到这个问题很多次，接下我们一起来看看如何解决这个问题。 一个可能的原因是混淆了常规函数和箭头函数的用法，如果你遇到这个问题，我猜你用的是箭头函数。如果用常规函数替换箭头函数，它可能会为你修复这个问题。 我们再深入一点，试着理解为什么会这样。 毕…"}, {"id": "6954626742824910878", "title": "WebSocket 实战与心跳机制", "desc": "前言 WebSocket 是 Web 应用程序的传输协议，它提供了双向的，按序到达的数据流。 他是一个 Html5 协议，WebSocket 的连接是持久的，他通过在客户端和服务器之间保持双工连接，服"}, {"id": "6844903717561434126", "title": "ES6 系列之私有变量的实现", "desc": "在阅读 《ECMAScript 6 入门》的时候，零散的看到有私有变量的实现，所以在此总结一篇。 1. 约定 2. 闭包 constructor 的逻辑变得复杂。构造函数应该只做对象初始化的事情，现在为了实现私有变量，必须包含部分方法的实现，代码组织上略不清晰。 3. Symb…"}, {"id": "6844903826902761479", "title": "对于防止按钮重复点击的尝试", "desc": "我经常在项目中会遇到按钮重复点击后引起表单的重复点击问题。所以针对这个问题，自己尝试了几种办法分别去解决。直接上代码。 直接定义一个变量，每次点击过后等所有操作结束后释放变量。或使用loading防止用户点击 这种办法简单粗暴，但是每次需要防止重复点击的地方,都要去关注lock…"}, {"id": "6952311502686650375", "title": "记一次绘图框架技术选型: jsPlumb VS mxGraph", "desc": "公司项目需要用到绘图框架，绘图部分以前是另一位同事负责，用的是 jsPlumb 框架。由于人员流动，后来这部分我接手了。项目绘图业务需求变得越来越复杂，jsPlumb 已经满足不了我们项目，于是我将目"}, {"id": "6996491119798255629", "title": "前端 input 手机上传图片的坑", "desc": "前端上传图片，一般是用 Web 原生的 input 去调用手机系统的相册（文件）或者摄像头拍照，最近开发遇到两个坑 1. 怎么控制可以选择手机拍照模式还是从相册/文件里面选取文件？ 我们的需求很简单，"}, {"id": "6964772680738275358", "title": "Node.js使用数据库LevelDB：超高性能kv存储引擎", "desc": "LevelDB是Google传奇工程师Jeff Dean和Sanjay Ghemawat开源的一款超高性能Key-Value存储引擎，以其惊人的读性能和更加惊人的写性能在轻量级NoSql数据库中鹤立鸡"}, {"id": "6844903781881102344", "title": "前端笔试之手写代码(一)", "desc": "1. 扁平化嵌套数组/flat实现 描述：将嵌套多层的数组展开平铺成只有一层的数组。 其它方法：...... 2. 数组去重 描述：将数组中重复的元素过滤掉。 其它方法：...... 3. 模拟Call实现 4. 模拟bind实现 5. 模拟New实现 6. 格式化数字 7. …"}, {"id": "6996227978845749279", "title": "【从头学前端】12-JavaScript中的String对象（String引用类型）方法详解", "desc": "本篇文章我们将来学习JavaScript中的String对象，通过本篇文章的学习可以掌握什么知识呢？如下图： String对象可以用来定义字符串，基本数据类型类型string也可以使用String对象"}, {"id": "6844903904337985550", "title": "JavaScript通过userAgent判断几个常用浏览器", "desc": "通常在做h5页面的时候需要在微信、QQ、微博等生态内做一些引流的工作，但引流时受限于这些平台。比如上次的文章《h5唤醒app实现以及注意点》就是妥协的一个办法，那么常用的这几个浏览器的User Agent什么样呢？如何判断呢？今天就具体来看看这个问题。 User Agent中文…"}, {"id": "7000011007418433543", "title": "走过路过别错过的Symbol", "desc": "解读解读ES6-Symbol 今天学习时看到了Symbol这个陌生的词，一看，原来也是个人物呀。 symbol是Es6的一种新的原始数据类型。中文翻译是\"象征\"，在应用中表示\"独一无二的值\"。让我们一"}, {"id": "6844903743499026446", "title": "深入学习javascript函数式编程", "desc": "大家都知道JavaScript可以作为面向对象或者函数式编程语言来使用，一般情况下大家理解的函数式编程无非包括副作用、函数组合、柯里化这些概念，其实并不然，如果往深了解学习会发现函数式编程还包括非常多的高级特性，比如functor、monad等。国外课程网站egghead上有个…"}, {"id": "6844904008801320974", "title": "七种武器：JavaScript 新特性闪亮登场", "desc": "JavaScript(或ECMA Script) 是一门不断发展的语言，有许多关于如何前进的建议和想法。TC39(技术委员会39)是负责定义JS标准和特性的委员会，今年他们非常活跃。以下是目前处于“Stage 3阶段”的一些提案摘要，这是“完成”之前的最后一个阶段。这意味着这些…"}, {"id": "6844904085708079112", "title": "async原理解析", "desc": "async其实就是 Generator的语法糖，看本篇文章之前可以先看一下上一篇文章 Generator函数。理解 Generator就容易理解为什么说async是异步编程的完美解决方案了。 可以发现，async函数就是将Generator函数的星号(*)替换成async，将 …"}, {"id": "6921623546636550158", "title": "一道js笔试题， 刷新了我对map方法函数的认知，你做对了吗？", "desc": "昨天在看一道笔试题的时候本以为很简单，但是结果不是我想象的那样，直接上笔试题。 我第一个想到的是new Array(5)生成的数组是[undefined, undefined, undefined, undefined, undefined]。 new Array(5)生成的数…"}, {"id": "6893827826949029896", "title": "🎉🎉一篇推翻掘金80%文章的Event Loop完整分析🎉🎉", "desc": "本文的目的在于，一次性推翻80%人构建好的关于Event Loop的知识体系和一次性的完整的理解Nodejs(13以上)和浏览器中的Event Loop。 首先进行一下基础概念的划分。 requestAnimationFrame和render不为宏任务，也不为微任务。他们两个的…"}, {"id": "6844903950534049800", "title": "掌握JS函数中的几种参数形式（函数基础）", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 函数是一段结合在一起执行特定任务的代码，函数一般使用参数与外部进行交互。要编写简洁高效的JS代码，必须掌握函数参数。 在本文中，会使用一些有趣的例子来解释 JS 必须有效地处理函数参数的所有特性。 JS 函数可…"}, {"id": "6948723601801641991", "title": "这一次彻底弄懂函数防抖与函数节流", "desc": "函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。 频繁触发的情况下，只有等待足够的空闲时间，才可以执行代码一次。 函数防抖的影响：防止函数在极短的时间内反复调用，造成资源的浪费。 就比如在页面上的某些事件触发频率非常高，比如滚动条滚动、窗口尺寸变化、鼠标移动等，如…"}, {"id": "6974333867272601608", "title": "前端知识点-JS 篇", "desc": "JS VO：变量对象 AO：活动对象 defer & async Vue 生命周期 ​ 从开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载等一系列过程，我们称这是 Vu"}, {"id": "6994703628242010143", "title": "V8是如何执行JavaScript代码的？", "desc": "V8是如何执行JavaScript代码的？使用V8引擎的原因，编程语言是如何运行的，V8执行Js代码的整体流程。"}, {"id": "6995483110515146759", "title": "JS中的Map类", "desc": "映射Map对象表示一组称为键的值，其中每个键都有另一个与之关联（或“映射到”）的值。从某种意义上说，映射就像数组，但它不使用一组连续的整数作为键，而是允许我们使用任意值作为“索引”。"}, {"id": "6869560945748901895", "title": "一行代码实现display\"过渡动画\"原理", "desc": "上篇文章，提到如何让display出现过渡动画，却没有仔细介绍原理。 为什么会出现动画了呢？ 因为我读取dom的这些特殊属性时，浏览器就会强制清空渲染队列一次，让我拿到最新的值。也就是说读取的时候，其实已经是display为\"block\"了，因此。我们出现了过渡动画 有数字的变…"}, {"id": "6993870176512901156", "title": "ES6 Class 之操作方法", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 操作一个方法，这里的“方法”包括： 对象实例的方法 类的静态方法 对象实例的方法之前在《ES6 Class 之类的声明》一文中已经讲过，这里"}, {"id": "6997013155767386125", "title": "原型，原型链理解/Object和Function特殊性", "desc": "什么是原型，原型链 它们对应的名称应该是： prototype：原型 _proto_:原型链 它们的从属关系，和实质应该是： prototype： 它是函数的一个属性，并且是一个对象 _proto_:"}, {"id": "6844903539379011592", "title": "利用FormData对象实现AJAX文件上传功能及后端实现", "desc": "包括HTML基础设置、CSS界面优化、JS利用FormData对象和AJAX进行上传、后端接收文件并存储到指定路径以及删除文件操作。 因此，传输完整的文件数据需要multipart/form-data属性。 保存了用户指定的文件的名称。 设置input类型为file。 可多选，…"}, {"id": "6844903910533136398", "title": "理解了JS 中的function调用的小秘密， this， apply()，call()，bind()原来很简单啊", "desc": "我希望在开始读这篇文章之前，你了解过函数调用、this指向、call()、apply()、bind()，当然，只要了解过就好，因为本文就是为了让你更好的理解它们。 我将说明几个你在阅读下文时可能会觉得困惑的概念，当你觉得疑惑时，可以回到这里来看看。 “指向”、“指针”怎么理解？…"}, {"id": "6844904005223579655", "title": "手写源码系列（三）：new操作符的实现", "desc": "创建了一个新的实例对象。 也就是说，通过new操作符实现的实例对象，即可访问构造函数的属性，也可以访问构造函数原型上的属性。 创建一个新的对象，并返回。符合new函数的功能。 截取传入myNew函数的第一个参数。 将第一个参数的prototype与要返回的对象建立关联。 使用a…"}, {"id": "6993099044788633608", "title": "了解JS中的包装对象 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 包装对象 有人说，JavaScript语言“一切皆是对象”，数组和函数本质上都是对象，就连三个原始类型的值（数值、字符串、布尔值），在一定条"}, {"id": "6988019896676253726", "title": "JS atob btoa方法处理base64数据后转Blob类型实现文字转语音.mp3文件", "desc": "前端js + google Text-to-Speech API 实现文字转mp3文件 使用由 Google 的 AI 技术提供支持的 API 将文字转换为自然而逼真的语音。 地址Google Tex"}, {"id": "6844903700725661709", "title": "HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器", "desc": "由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。 因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，写个PHP做代理 （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。"}, {"id": "6844904196345430023", "title": "熟悉requestidlecallback到了解react ric polyfill实现", "desc": "全面熟悉requestidlecallback用法和存在的价值。 明确requestidlecallback的使用场景。 了解react requestidlecallback polyfill的实现。 当前大多数的屏幕刷新率都是60hz，也就是每秒屏幕刷新60次，低于60hz…"}, {"id": "6996821553128144903", "title": "防抖节流", "desc": "“这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战” 1， 定义 防抖： 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间 节流：高频事件触发，但在n秒内只"}, {"id": "6987713273340624903", "title": "实现数组去重（UNIQ）函数的拓展思考 - 如何设计一个工具函数", "desc": "总所周知，借助 Set 对象不可包含重复元素的特性，可以以简单的逻辑实现基本的数组去重 但在实际的应用中，情况往往会复杂一些。我们可能不会将数组中的元素本身直接进行比较去重，而是以元素转换后的某个值为"}, {"id": "6844903941046550542", "title": "原生JS数组sort()排序方法内部原理探究", "desc": "此时排序的方式是按照ascii码进行排序，它会先将数组里的元素全部转为字符串(不影响原值)，方便比较。"}, {"id": "6992381880007917581", "title": "JavaScript 实现 call、apply、bind", "desc": "一、call ES5 实现 将 myCall 方法定义在 Function.prototype 上，每个定义的 function 可以直接访问 myBind 方法。 myCall 方法参数 conte"}, {"id": "6844903505862328333", "title": "fly.js vs axios", "desc": "这是fly的第二篇文章，主要是将fly和axios进行一个全面的对比。 首先感谢大家支持，在fly的第一篇文章 JS HTTP 请求终极解决方案 - fly.js 发布后，github 首日破百星，如果您是新读者，在您了解了fly之后，如果您喜欢，不用找打赏入口，去github…"}, {"id": "6844903596970999815", "title": "关于Rollup那些事", "desc": "下一代打包工具，这是rollup对自己的定位。如今的前端领域，构建工具并不缺少，每个前端工程师都用过或者听过webpack。可以看到的是像React、Vue等框架的构建工具使用的都是rollup。既然如此，这些框架为什么会选择rollup？它的特性是什么？面对不同场景，我们要怎…"}, {"id": "6961033067016552485", "title": "Array.prototype.sort的排序原理", "desc": "Array.prototype.sort() 的逻辑是什么，用到的排序方法是什么，时间和空间复杂度是多少都不清楚，本篇从 ECMA262 标准，V8 引擎源码来探究 sort 方法。"}, {"id": "6988855147979866148", "title": "看了这两篇，ECMAScript12你就懂了（一）", "desc": "主要包含ES2021版本发布的新功能。如replaceAll,Promise.any...如此细致的讲解你一定学得很容易，难以忘怀。"}, {"id": "6895888535301062670", "title": "如何在 Express4.x 中愉快地使用 async", "desc": "为了能够更好地处理异步流程，一般开发者会选择 async 语法。在 express 框架中可以直接利用 async 来声明中间件方法，但是对于该中间件的错误，无法通过错误捕获中间件来劫持到。 以上述代码为例，中间件方法并没有通过 async 语法来声明，如果 doSomethi…"}, {"id": "6937257727106220040", "title": "从零开发一款可视化大屏制作平台", "desc": "几个月前开源的H5页面制作平台H5-Dooring 收到了很多热心的反馈和交流, 顺着笔者之前的规划, 我们又做了一款可视化大屏编辑器V6.Dooring. 接下来笔者就来带大家一起看看我们的方案设计和技术实现. 在介绍之前, 我们先看看实现的效果展示. 目前很多企业或多或少的…"}, {"id": "6997697142353559560", "title": "JS基础篇：12、搞懂防抖、节流", "desc": "对于短时间内触发频率过高的事件（滚动事件，resize事件，mousemove事件等等），如果处理不当或者放任自流很容易引起浏览器卡死 gameover。"}, {"id": "6917648021794586631", "title": "轻松教你搞定组件的拖拽, 缩放, 多控制点伸缩和拖拽数据上报", "desc": "由于我们的技术栈采用的是 React, 目前还没有一个成熟库可以同时支持自由拖拽和缩放, 我们不得不用 react-dragable 和 react-resiable两个库来实现拖拽和缩放, 但是这样我们要维护的数据结构就相当复杂了(当然vue生态有成熟的vue-dragabl…"}, {"id": "7002064993612988424", "title": "Element el-table 表格二次封装", "desc": "内容背景 公司开发的管理后台系统需要用到大量的表格数据，每个页面内容大致相同，为了便于后期维护，便考虑将el-table进行封装，将公共部分内容提取出来，后期只需对表格内容进行维护即可。"}, {"id": "6888702006962814990", "title": "一句有趣的JS代码", "desc": "从结果中可以看到该方法的主要功能是用于检测对象的类型。但通常类型检测，我们可能更多地看到如下代码实现： 其实主要的原因是防止原型污染，比如我们在业务代码中覆写了Object.prototype.toString方法，第二种写法将得不到正确的结果，而第一种写法仍然可以。我们用代码…"}, {"id": "6986621723961475103", "title": "还在困惑项目脚手架代码为什么那么写？那这篇webpack5 + react + typescript环境配置代码完全指南送给你", "desc": "前言 本文是对某开源的项目webpack5 + react + typescript项目地址逐行代码做分析，解剖一个成熟的环境所有配置的意义，理清一些常见的问题，比如 文件中的 import 转es5"}, {"id": "7002207049954115592", "title": "如何优雅的实现js资源的按顺序加载", "desc": "在实际的开发过程中，我们有时候会遇到动态加载静态资源的需要，这当然是一个很简单的需求，但是如何做到更优雅的实现呢？ 参考优秀的vue-ueditor-wrap库 首先，我们可以采用回调函数的方法实现 "}, {"id": "6992195110276431885", "title": "『面试的底气』—— 设计模式之最少知识原则｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7002108799439863821", "title": "常用操作数组得22个方法", "desc": "前沿 大家好！我叫vially，是一个刚入行不久得前端工程师，本着在提升自我学习能力为前提和认识一些前端方面得朋友为主要任务，准备发表一篇关于常用操作数组得方法，因为本人得能力有限，可能整理得比较简单"}, {"id": "7003536559651684388", "title": "字符编码&JavaScript", "desc": "什么是编码解码？ 众所周知，计算机内部使用的是二进制码进行数据的存储、运算，而大部分人更加擅长对图形、文字的阅读理解。为了便于理解计算机存储内容或者存储图文内容，就需要在两者之间做一种转换。 编码，是"}, {"id": "6992365335588372511", "title": "《JavaScript高级程序设计（第四版）》精读（四）第4章 ", "desc": "第四章：变量、作用域与内存 4.1 原始值与引用值 原始值：最简单的数据。保存原始值的变量是按值访问的，因为我们操作的就是存储在变量中的实际"}, {"id": "7001695652153393165", "title": "JavaScript 面试知识点 📝 🎉～（0x01 - 0x20）", "desc": "0x01 在 JavaScript 中，有什么创建对象 Object 的方法？ 一般来说，JavaScript 中有以下几种方法创建对象： 1.1 Object 构造器 最简单的创建一个空对象的方式，"}, {"id": "6966158666030383118", "title": "【js 进阶】全篇干货 ！一篇文章让你彻底弄懂栈、堆、队列、执行栈、上下文、事件循环（Event Loop）", "desc": "前言（本文背景） 网上有很多讲解 Event Loop 的文章，但大多数都过于片面，少数相对全面的也仍有一些知识盲区，甚至一些文章还传播错误的知识，结果就是让我们 似懂非懂。这篇文章让你彻底弄懂！"}, {"id": "7006136792093048869", "title": "前端-JS-手写篇", "desc": "手写面试题.涵盖前端常见手写!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"}, {"id": "6951684431597797389", "title": "前端开发者应该知道的 Centos/Docker/Nginx/Node/Jenkins 操作(🍡 长文)", "desc": "作为前端开发者，我们应该跳出自己的一亩三分地，跳出舒适区。扩大自己的技术广度和深度，只有这样作为我们才能\"做大做强，再创辉煌\".服务器作为开发一环，并且现在非常多的商业公司部署在生产环境上的服务器都是"}, {"id": "6904047941883789319", "title": "代码整洁之道的 7 个方法", "desc": "在这篇短文中，我将介绍一些你可以用来改进你的代码的方法。本文代码示例均使用 JavaScript。 我发现但凡是可读的代码必定是可维护的。 作为一名开发人员，我的目标是编写高质量的代码。团队中的每个开发人员，不管他/她的技术水平如何，都必须能够通过阅读理解我所写的代码。代码的可…"}, {"id": "6861725116389130254", "title": "学习Vue3.0,先来了解一下Proxy", "desc": "据悉Vue3.0的正式版将要在本月(8月)发布，从发布到正式投入到正式项目中，还需要一定的过渡期，但我们不能一直等到Vue3正式投入到项目中的时候才去学习，提前学习，让你更快一步掌握Vue3.0,升职加薪迎娶白富美就靠它了。不过在学习Vue3之前，还需要先了解一下Proxy,它…"}, {"id": "7002794898302697503", "title": "手摸手带你撸一个网络请求库（rollup，babel）", "desc": "接下来开始\"手摸手\"用rollup+babel+XMLHttpRequest封装一个网络请求的库，这里尽可能详细的步骤和思路列出，方便各位读者的学习之旅。会按照rollup使用、babel配置、封装X"}, {"id": "6921549680639737863", "title": "前端监控平台系列：微信小程序监控和Web监控（已开源）", "desc": "这篇：前端监控平台系列：JS SDK（已开源）文章已经讲的很清楚怎么劫持原生的函数，并拿到我们想要的信息，如果页面正常运行时则记录用户行为栈，如果页面报错时则上报该错误并将用户行为栈一并上报，这样有助于开发者更快的定位线上问题。 获取用户行为，比如click事件，在web端是可…"}, {"id": "6995357238277701668", "title": "万字长文，重学JavaScript异步编程", "desc": "“这是我参与8月更文挑战的第7天，活动详情查看： 8月更文挑战” 浏览器中的JavaScript程序是典型的事件驱动型程序，即它们会等待用户触发后才真正的执行，而基于的JavaScript的服务器通常"}, {"id": "6975806986969415688", "title": "JavaScript 异步编程指南 — Give me a Promise", "desc": "“Give me a promise, I will not go anywhere, just stand here and wait for you.”"}, {"id": "6844904002786689037", "title": "JS精度丢失问题", "desc": "最近开发的项目新需求中，需要一个金额的输入框，其输入上限为16位整数带两位小数的浮点类型，由于前台显示的金额是字符串型，在传递给后台时使用了parseFloat()方法，却发现在测试校验最大临界值时，发生了四舍五入，最终导致校验失败，由此引发了我对JS浮点数表示和运算了深入理解…"}, {"id": "6998697178193461261", "title": "前端刷题路-Day87：移动零（题号283）", "desc": "给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 说明: 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数..."}, {"id": "6955892083068502053", "title": "页面布局中的三列布局", "desc": "三列布局实现的方法有: 经典三列布局：定位实现三列布局，浮动实现三列布局。 圣杯实现三列布局 双飞翼实现三列布局 那么什么叫做三列布局呢？ 主要是两侧定宽，中间自适应，就是说把一个人看成页面，头、脚，"}, {"id": "6912066358461071374", "title": "从0到1，带你脱离类库重新写一个高端的无缝自动轮播图！", "desc": "前几天看到某位大佬的一篇名为《你们都被VUE惯坏了》的文章，没怎么细读，大概意思就是拿轮播图举例，来告诫各位开发者脱离框架外还是要掌握JS的基础功能，要多了解各种库实现的原理，虽然那篇文章有说到轮播图的一些实现思想，但是要实现一个库，要注意的细节还是很有很多，所以决定写下这一篇…"}, {"id": "6998707022577270798", "title": "「链表」leetcode 237.删除链表中的节点（简单）", "desc": "一、了解题目 附上原题链接：237. 删除链表中的节点 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。 示例： 现有一个链表 -- head = "}, {"id": "6844903928534941709", "title": "浏览器和Node中的JavaScript是如何工作的? 可视化解释", "desc": "有非常多满怀激情的开发者，他们搞前端或者搞后端，为JavaScript奉献自己青春和血汗。JavaScript是一种非常容易理解语言，毫无疑问它是前端开发中一个非常关键的部分。但是和其他语言不同的是， 它是单线程的，这就意味着，同一时间只能有一个代码片段在执行。因为代码执行是线…"}, {"id": "6847902216917876743", "title": "js使用require 和 import 引入依赖的区别？", "desc": "最近在项目里面经常会看到require和import这两种引入依赖的方式，一直不太了解这两种引入方式的区别，趁着有时间，打算捋一捋，整理一下。 首先，我们要知道require和import本质上都是为了JS模块化编程使用的一个语法，语法一般都遵循这一定的语法规范，require…"}, {"id": "6844903988379418632", "title": "装饰你的敲门砖，离大厂更进一步", "desc": "这是我个人面试系列的第二篇文章，在第一篇文章中我主要分享了一下我之前面试大厂的部分面试题，很高兴得到了许多前端小伙伴儿的支持和点赞。平心而论，我的学历和背景并不是很突出，只能算普通，但幸运的是还是有机会接收到某些大厂(比如携程、哔哩哔哩、流利说、喜马拉雅等)的面试邀请，当然也不…"}, {"id": "6844903669305966599", "title": "Redux-saga框架使用详解及Demo教程", "desc": "在 redux-saga 的世界里，所有的任务都通用 yield Effects 来完成（Effect 可以看作是 redux-saga 的任务单元）。Effects 都是简单的 Javascript 对象，包含了要被 Saga middleware 执行的信息（打个比方，你可…"}, {"id": "6953483902203723790", "title": "大白话讲防抖与节流", "desc": "字节跳动笔试题 什么是防抖和节流？有什么区别？如何实现？ 故事的起源 在讲防抖和节流之前，我们先来引入本次的主人公。王老板、Chuck、汉堡店老板娘Judi..."}, {"id": "6994309021561782308", "title": "JavaScript数组去重的方法合集", "desc": "这是我参与8月更文挑战的第7天，活动详情查看： 8月更文挑战 js实现数组的去重，给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。 1.使用Set集合 利用set集合数据不重复的特性我"}, {"id": "6968012268261310478", "title": "LeetCode64题：最小路径问题（动态规划入门）", "desc": "题目 给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。 说明：每次只能向下或者向右移动一步。"}, {"id": "6990602416631021576", "title": "JavaScript 基础系列之对象（五）", "desc": "介绍 在 JavaScript 中，几乎“所有事物”都是对象，即万物皆对象。所有JavaScript除了原始值都是对象。 布尔值是对象（new 定义） 数字是对象（new 定义） 字符串是对象（new"}, {"id": "6844904036202889230", "title": "图解 JavaScript 对象 — 现代 JavaScript 教程", "desc": "正如我们在 数据类型 一章学到的，JavaScript 中有七种数据类型。有六种原始类型，因为他们的值只包含一种东西（字符串，数字或者其他）。 相反，对象则用来存储键值对和更复杂的实体。在 JavaScript 中，对象几乎渗透到了这门编程语言的方方面面。所以，在我们深入理解这…"}, {"id": "6988888980284506126", "title": "web前端—前端三剑客之JS-ES6(11)：Proxy代理", "desc": "菜鸟教程：https://www.runoob.com/w3cnote/es6-reflect-proxy.html Proxy是在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦"}, {"id": "6844903606131359758", "title": "（干货）微信小程序转发好友", "desc": "友情提示一下如果点击按钮分享的话，button一定要设置open-type=\"share\"否则不起作用。 如果觉得文章还不错并对你有帮助的话，请分享给你的小伙伴，并点赞，有什么不懂得可以在底下留言哦。"}, {"id": "6994213327719596046", "title": "JavaScript进阶-闭包", "desc": "这是我参与8月更文挑战的第7天，活动详情查看： 8月更文挑战 ​ 闭包的定义 如何产生闭包？ 当一个嵌套的内部（子）函数引用了嵌套的外部（父）函数的变量时，就产生了闭包。 产生闭包的条件 函数嵌套 内"}, {"id": "6992777421225197605", "title": "深入理解闭包", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 闭包 闭包是我们函数的一种高级使用方式 在聊闭包之前我们要先回顾一下 函数 函数的两个阶段 我们一直说函数有两个阶段 定义阶段 调用阶段 函"}, {"id": "6992764476009218084", "title": "常用的数组方法", "desc": "这篇文章主要总结了JS中数组的常用方法，结合之前的学习的笔记整理的，如有不对，请各位大佬多多指教！！！"}, {"id": "6996311879895547912", "title": "记录寄生继承和ES6 Class继承", "desc": "寄生组合继承 这是一种接近完美(接下来会展开)的继承方式，先来看其它一些继承方式有助于记忆； 原型链继承 这就是原型链继承， 优点：继承了父类的模板和原型 缺点： 子类修改了父类的引用类型的变量，会影"}, {"id": "6844904165060116487", "title": "【JS】节点截图的最终解决方案dom-to-image与html2canvas", "desc": "..."}, {"id": "6844904194189557773", "title": "纯JS打造级联选择器控件，仿ElementUi(附源码)", "desc": "公司之前有过Vue开发的项目，用到了ElementUi的级联选择器控件。不得了了，产品爸爸们开始作妖了，哎呦不错哦，我要用它到我这个项目里（项目以Js + Php为架构，前后端不分离）。 “这个需求很简单，怎么实现我不管。” 既然battle不过，那没办法，只能写一个纯Js插件…"}, {"id": "6996480955292598302", "title": "进阶教程 6. 正则应用", "desc": "上文介绍了正则的入门，本文将接着说正则虽然很傲娇，但是她也是风情万种，她能帮你解决很多复杂问题，不来看看么"}, {"id": "7000191211721981960", "title": "深入理解 JavaScript 原型", "desc": "JavaScript 中有个特殊的存在：对象。每个对象还都拥有一个原型对象，并可以从中继承方法和属性。本文已参与掘金创作者训练营第三期「话题写作」赛道"}, {"id": "6844904160198918158", "title": "你可能不太了解的JSON", "desc": "这个知识点面试中被问的概率虽然很低，但是也有可能会问。 注意：JSON的key一定要用双引号，以及value如果是字符串也一定要用双引号。 原生的JSON对象得到以下浏览器支持。"}, {"id": "6844903924172865543", "title": "Typescript版图解Functor , Applicative 和 Monad", "desc": "本文是经典的Functors, Applicatives, And Monads In Pictures的Typescript翻译版本。 Functor/Applicative/Monad是函数式编程中的一些比较‘基础’的概念，反正我是不认同‘基础’这个说法的，笔者也阅读过很多…"}, {"id": "6844903700176044040", "title": "Vue SPA 项目webpack打包优化指南", "desc": "最近一个小伙伴问我他们公司的Vue后台项目怎么首次加载要十多秒太慢了，有什么能优化的，于是乎我打开了他们的网站，发现主要耗时在加载vendor.js文件这个文件高达2M，于是乎我就拿来他们的代码看看，进行了一番折腾。最终还是取得了不错的效果。 对于网页性能，如何提升加载速度、等…"}, {"id": "6844904013247283214", "title": "前端UI设计稿对比工具 - chrome+webpack插件", "desc": "（切图仔）前端开发者一大重要的职责就是将UI画稿转化为实际可用的页面，效果图的还原度在相当大的程度上决定了UI和PM的满意度一般情况下，拿到设计稿后，懒散点的可能直接看图软件打开，肉眼测距就开搞了，负"}, {"id": "6992959237248778254", "title": "JavaScript从根源了解深浅拷贝问题", "desc": "从JavaScript的变量开始介绍，逐步了解为什么会出现深浅拷贝问题，引用值和原始值的区别，以及如何解决。"}, {"id": "6992938207230820389", "title": "Event Loop事件循环", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 1. JavaScript为什么是单线程的？ JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用"}, {"id": "6844904104582447118", "title": "JavaScript常见笔试题（持续更新）", "desc": "1. Promise模拟实现 2. Promise.all实现 4. call实现 5. apply实现 6. bind实现 7. 继承方法"}, {"id": "6879606179924803591", "title": "JavaScript 类型 — 重学 JavaScript", "desc": "JavaScript 中最小的结构，同学们已知的有什么呢？我想同学们都应该会想到一些东西，比如一些关键字，数字 123，或者 String 字符等等。这里我们从最小的单位，字面值和运行时类型开始讲起。 这里分为语法（Grammer）和运行时（Runtime）两个部分。 有一个设…"}, {"id": "6941761567046238245", "title": "报表可视化搭建平台 - 筛选器联动优化 | 项目复盘", "desc": "项目目标: 报表通过可视化搭建的方式，来缩短数据报表开发周期。减少研发同学的依赖，解放生产力。支持 PC 端和移动端展示。 目标用户: BI 分析师、HR 或者效能改进部门。 本身是整个可视化搭建生态中的一员，整个可视化搭建生态底层引擎由单独一个前端小组开发和维护，然后再和业务…"}, {"id": "6844903513613418503", "title": "前端全（无）埋点之页面停留时长统计", "desc": "本文讲解了传统的通过beforunload或者unload事件发送页面停留时长的时候丢点的问题；罗列了几种解决问题的思路。"}, {"id": "6844903728990912525", "title": "你的 JS 代码本可以更加优雅", "desc": "有时感觉挺有趣的是在群里聊天时的自嘲，「xx 项目在经过我一年的不断努力下，终于变得不可维护」。个人认为，维护是一件比开发更富挑战性的事情，前人的代码是否规范优雅会很直接地影响我们的工作效率和心情。 所以，我们更要时刻地去注意我们代码的质量，也许你的代码已经足够规范，但在某种程…"}, {"id": "6844903711991414791", "title": "[译] React 的今天和明天 I —— 现状和问题", "desc": "早上好。大家好，欢迎来到 React 大会。今天来到这里我感到非常激动。我非常高兴可以给你们做开场演讲。 我是 Sophie Alpert，个人主页是 sophiebits.com。我是 Facebook 的 React 核心小组的开发经理。 你们正在使用的 React 做的很…"}, {"id": "6854573221983813645", "title": "javascript 事件流和事件委托", "desc": "javascript事件流和事件委托DOM事件流事件对象👉event:MDN传送门事件类型事件委托👉彻底弄懂JS事件委托的概念和作用相关文章推荐：👉EventLoop事件循环机制（浏览器）👉javas"}, {"id": "6844903619582509063", "title": "精读《深入浅出Node.js》", "desc": "从不同的视角介绍了 Node 内在的特点和结构。由首章Node 介绍为索引，涉及Node 的各个方面，主要内容包含模块机制的揭示、异步I/O 实现原理的展现、异步编程的探讨、内存控制的介绍、二进制数据Buffer 的细节、Node 中的网络编程..."}, {"id": "6844903728328212488", "title": "JS函数节流和函数防抖", "desc": "1.为什么需要函数防抖和函数节流？2.什么是函数防抖和函数节流2.1函数防抖(debounce)2.2函数节流(throttle)3.应用场景类型场景函数防抖1.手机号、邮箱输入检测2.搜索框搜索输入"}, {"id": "6998124844978012168", "title": "JavaScript(3) | 字面量和变量", "desc": "4. 字面量和变量 一、字面量 概念: 都是一些不变的常量，如 1 2 3 4 5 ，12344，123456，553535。 字面量可以直接使用，但是一般不会直接使用字面量。选择使用变量来替换。如一"}, {"id": "6997319321651249183", "title": "ES6异步处理方式---Promise知识点总结", "desc": "本文整理了Promise相关基础和一些方法的底层原理实现，带你知道Promise是什么？Promise又是如何处理异步的？常用的方法有哪些？它们的作用是什么？"}, {"id": "6997313681079943181", "title": "Promise方法底层原理实现", "desc": "本文整理了Promise的一些方法的底层原理实现，如果对答案有不一样见解的同学欢迎评论区补充讨论，当然有问题，也欢迎在评论区指出。"}, {"id": "6844903653774458888", "title": "JavaScript设计模式与实践--工厂模式", "desc": "工厂模式是用来创建对象的一种最常用的设计模式。我们不暴露创建对象的具体逻辑，而是将将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。工厂模式根据抽象程度的不同可以分为：简单工厂，工厂方法和抽象工厂。 如果只接触过JavaScript这门语言的的人可能会对抽象这个词的概念…"}, {"id": "6844903677958815752", "title": "【译】Google - 使用 webpack 进行 web 性能优化（一）：减小前端资源大小", "desc": "现代 web 应用经常使用打包工具来创建生产环境的“打包”文件（脚本、样式等等），这些文件经过优化和压缩之后能够极快的被用户下载。在使用 webpack 进行 web 性能优化系列文章中，我们将介绍如何使用 webpack 高效的优化站点资源。这将会帮助用户更快的加载网站以及交…"}, {"id": "6844903814508773383", "title": "JavaScript的宏任务与微任务", "desc": "在介绍前端宏任务与微任务之前，先列出来一道题，一块看一下。 诸位可以先给出来一个自己的答案，运行一下结果，看看是否与自己想的一致。 关于代码执行环境，JavaScript代码执行时，引擎会创造出来当前代码块的执行环境，在涉及到使用变量时，只能查找到当前环境的变量和包含当前执行环…"}, {"id": "6844904081991925774", "title": "几个 JavaScript 性能优化小 Tip", "desc": "像任何其他编程语言一样，JavaScript 也有自己的最佳实践列表，以使程序更易于阅读和维护。JavaScript 有很多棘手的部分，因此应避免某些降低代码质量的做法。通过遵循最佳实践，我们可以创建优雅且易于管理的代码，让任何人都可以轻松使用。 在本文中，我们将探讨提高应用程…"}, {"id": "6995758595648258078", "title": "loader和plugin专题", "desc": "plugin 原理 webpack插件是一个具有apply方法的JS对象，apply方法会被webpack compiler调用，并且在整个编译生命周期都可以访问compiler对象。 原理：通过在生"}, {"id": "6844903735554998280", "title": "require 和 import 详解", "desc": "JS模块化编程是前端小伙伴们必不可少的知识，下面妹子将于自认为比较清晰的方式列举出来。 Node.js就是用CommonJS思想。 在CommonJS中，有一个全局性方法require()，用于加载模块。 模块写法分exports和module.exports。 require…"}, {"id": "6882529843892731911", "title": "浏览器是如何工作的：Chrome V8让你更懂JavaScript", "desc": "V8 是由 Google 开发的开源 JavaScript 引擎，也被称为虚拟机，模拟实际计算机各种功能来实现代码的编译和执行，一文了解Chrome V8的方方面面。"}, {"id": "6844903914198794254", "title": "非常规 - VUE 实现特定场景的主题切换", "desc": "不同的业务场景，我们一般会选择不同的方法来实现目标。最近在公司运营活动平台上的主题功能的实现 ，我们尝试了一种新的解决方案，实现了页面主题的切换，目标是为了提高项目的可维护性、可扩展性，以及降低接入复杂度。 在了解主题功能之前，我们先来解下业务场景：在运营活动后台中，编辑活动配…"}, {"id": "6978130696820752420", "title": "【Utils】那些常用的JavaScript工具函数（一）", "desc": "这是我参与更文挑战的第 15 天，活动详情查看： 更文挑战 工欲善其事，必先利其器。实践（巧偷懒）促进科技发展-，- 为大家分享日常开发用到的一些工具函数，总结的样式，代码规范等"}, {"id": "6844903992707792904", "title": "听说会做这道题的人后来都进了头条？", "desc": "在面试的过程中，相信好多朋友都经历过一些百思不得其姐的题目，或难题，或怪题，或偏题。今天咱们一起来看一道相对偏、但其实又很基础的面试题。这道题是我的一个哥们儿，在半年前去面试字节跳动广州分公司的时候遇到的。他说当时不会做，回来后和分享的（其实是请教嘿嘿嘿~）。 作为专业的切图仔…"}, {"id": "6947831474544934919", "title": "动手写一个简单的编译器：在JavaScript中使用Swift的尾闭包语法", "desc": "首先跟大家说一下我为什么会有这个想法吧，因为最近在空闲时间学习Swift和SwiftUI的时候会经常使用到这种叫做尾闭包的语法，就觉得很有趣。同时因为很早之前看过jamiebuilds的the-super-tiny-compiler，就想着能不能自己也实现一个类似的有趣好玩简单…"}, {"id": "6996889705480454157", "title": "对sessionStorage、localStorage和cookie浏览器端三种数据存储方式的理解", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 在较高版本的浏览器中，js提供了sessionStorage和globalStorage。在HTML5中提供了localStorage来取"}, {"id": "6844903559599751175", "title": "现代化懒加载的方式", "desc": "通常用户打开网页时,整个网页的内容将被下载并且呈现在一个页面中，虽然允许浏览器缓存页面，但是不能保证用户查看所有下载的的内容,例如一个照片墙应用,可能用户仅仅查看第一个图片之后离开，结果就是白白浪费了内存和带宽。因此我们需要当用户需要访问页面的一部分时才去加载内容，而不是一看是…"}, {"id": "6956359655387824164", "title": "由一道bilibili面试题看Promise异步执行机制 ", "desc": "```js var date = new Date() console.log(1, new Date() - date) setTimeout(() => { console.lo"}, {"id": "6889626317160906766", "title": "前端如何分片上传大文件", "desc": "最近做了一个需求，让用户本地上传一个最大 300M 的视频文件，下面是前端部分的记录。 接下来首先如何让用户上传文件，input 标签中type=file可以让用户上传文件，此处我是在 Vue 项目里。 此时已经可以让用户在本地上传文件了，但是这里有个问题，在该用户已经有上传过…"}, {"id": "6844903700272513031", "title": "前端错误日志收集方案", "desc": "公司的项目上线出现问题后难以定位错误，研究过现存的错误监控方案，受限于特殊条件只能定制自己的错误收集方案。 基于以上背景我撸出来一个错误日志收集方案 - Ohbug。 除此之外，addEventListener 还可以捕获资源加载错误、未 catch 的 promise 错误。…"}, {"id": "6844903502246838280", "title": "6 张思维导图学习 JS", "desc": "通过 6 张思维导图梳理 JS 基础知识，涉及 JS 基本概念、操作符、语句、Date、函数、数组、字符串等。高清图片已打包，下载地址：http://t.cn/ROtH1OZ"}, {"id": "7001695733334147108", "title": "JavaScript 面试知识点 📝 🎉～（0x61 - 0x80）", "desc": "TOC JavaScript 面试知识点 📝 🎉～（0x01-0x20） JavaScript 面试知识点 📝 🎉～（0x21-0x40） JavaScript 面试知识点 📝 🎉～（0x41-0x6"}, {"id": "7003625954572517383", "title": "业务：快速解决白名单", "desc": "在日常业务开发中，经常会有类似的需求：编辑功能只有部分白名单中的人才可以操作，文章中的方法可以快速解决白名单问题，提高开发效率"}, {"id": "6844903862898262024", "title": "webpack4 的30个步骤打造优化到极致的 react 开发环境，如约而至", "desc": "本篇所有代码线上代码react-webpack4-cook,翻译过来叫：webpack4和react的乱炖，可以跟着代码进行配置，之前有很多坑，线上代码都已经被解决了 。如果对您有帮助，不妨给个star.点赞关注不迷路 一篇文章不写前言总感觉不太正式，大概介绍下我是怎么完成一个…"}, {"id": "6844903682283143181", "title": "[译] 理解 JavaScript 中的执行上下文和执行栈", "desc": "如果你是或者想成为一名 JavaScript 开发者，你必须知道 JavaScript 程序内部是如何执行的。理解执行上下文和执行栈对于理解其他 JavaScript 概念（如变量声明提升，作用域和闭包）至关重要。 正确理解执行上下文和执行栈的概念将使您成为更出色的 JavaS…"}, {"id": "7005375196366372894", "title": "数组方法", "desc": "给数组增加项的方法 var ary =[1,2,3] 利用数组的length属性给数组向末尾增加 ary[ary.length]=4;给数组末尾增加数字4 push方法：给数组的的末尾增加，传参多项就"}, {"id": "7004452888638554125", "title": "Proxy和Reflect的要注意的问题与局限性", "desc": "Proxy对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。Proxy被用于许多库和浏览器框架上，例如vue3就是使用Proxy来实现数据响应式的。"}, {"id": "6934516416326729735", "title": "反直觉！浏览器到底是如何下载资源的", "desc": "今天文章来聊聊浏览器到底是如何对待下载资源的，比如说 JS、CSS、字体、图片等文件。 HTML 在解析的过程中遇到同步的 script 会卡住 DOM 解析这个知识点我相信读者们应该都知道。 上述代码中，HTML 遇到 &#x3C;script>console.log(1)&…"}, {"id": "6982081539249012766", "title": "为什么都说定时器 setTimeout 不能准时执行呢？", "desc": "本文从一段代码的执行时间开始，去了解 setTimeout 的基本使用，深入浅出地剖析浏览器怎么实现 setTimeout ，之后再去探索 setTimeout 不能够准时执行的原因。"}, {"id": "6844904056893243400", "title": "2年vue项目实战经验汇总", "desc": "vue作为前端主流的3大框架之一，目前在国内有着非常广泛的应用，由于其轻量和自底向上的渐进式设计思想，使其不仅仅被应用于PC系统，对于移动端，桌面软件（electronjs）等也有广泛的应用，与此诞生的优秀的开源框架比如elementUI，iView， ant-design-v…"}, {"id": "7001006027529256967", "title": "js 数据类型检测，几种方法我知道大致区别了", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 前言 检测数据类型再开发中也是比较常用的, 其实想到检测数据类型可能大脑里面就是instanceof、typeof、Object.prop"}, {"id": "6959882656548913188", "title": "基于 babel 手写 ts type checker", "desc": "从编译原理的角度分析 typescript 类型检查的实现，基于 babel 手写一个 ts type checker."}, {"id": "6893856813247266823", "title": "前端基础知识大汇总（欢迎收藏）", "desc": "这些内容主要是针对我自己的薄弱知识点进行的总结，目前正在准备面试中，有一些内容会写得特别特别详细，而有一些内容则写得比较少，但是保证里面的很多内容都是干货，很多都有详细的解释，干货都在后面啊，继续往下看吧。。。各位路过的小哥哥小姐姐们，希望看完了对你有所帮助。万字长文~~~如果…"}, {"id": "6844903828093927431", "title": "【面试篇】寒冬求职季之你必须要懂的原生JS(中)", "desc": "互联网寒冬之际，各大公司都缩减了HC，甚至是采取了“裁员”措施，在这样的大环境之下，想要获得一份更好的工作，必然需要付出更多的努力。 一年前，也许你搞清楚闭包，this，原型链，就能获得认可。但是现在，很显然是不行了。本文梳理出了一些面试中有一定难度的高频原生JS问题，部分知识…"}, {"id": "7001429617164681247", "title": "分析并实现几个常见的es5方法", "desc": "兀然想起一次面试被问实现ES5的bind方法，当时懵了，后面的回答一下子没了分寸。其实那些都是基础知识，今天就来实现一下Es5的几个重要的方法bind、forEach等，再纪念一下当时的囧态。"}, {"id": "6844904040564785159", "title": "关于Vue和React的一些对比及个人思考（上）", "desc": "Vue和React都是目前最流行、生态最好的前端框架之一。框架本身没有优劣之分，只有适用之别，选择符合自身业务场景、团队基础的技术才是我们最主要的目的。 博主1年前用的是Vue框架，近半年转技术栈到React框架，对于Vue和React都有一些基本的了解。接下来博主将与大家一起…"}, {"id": "7001779859730989086", "title": "「学习笔记」child_process", "desc": "child_process child_process 用于创建衍生子进程。Node 和衍生的子进程建立 stdin(标准输入), stdout(标准输出), stderr(标准错误) 管道。chil"}, {"id": "6973197623788306462", "title": "Why系列： A.__proto__.__proto__.__proto__ === null", "desc": "A.__proto__.__proto__.__proto__ === null 让我们一起深入浅出的探知真相。"}, {"id": "7002396430820196388", "title": "基于Strview.js项目脚手架StrviewApp是怎么搭建起来的？", "desc": "“这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战” 前言 前几天，因为借着看源码的热乎劲，搞了一个玩具Js库Strview.js。为什么会搞这么一个玩具库呢？其实也不全是因为晚上闲的没事，"}, {"id": "6997416261735055374", "title": "『面试的底气』—— 设计模式之发布-订阅模式（三）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7006970729644163103", "title": "JS数据类型、原始值和引用值", "desc": "原始值 引用值 位置 存储在栈中的简单数据段，他们的值直接存储在变量访问的位置。 存储在堆中的对象，存储在变量处的值是一个指针，指向存储对象的内存处。 数据类型 undefined、null、bool"}, {"id": "6844903573675835400", "title": "webpack详解", "desc": "webpack是现代前端开发中最火的模块打包工具，只需要通过简单的配置，便可以完成模块的加载和打包。那它是怎么做到通过对一些插件的配置，便可以轻松实现对代码的构建呢？ Plugins：Loaders将各类型的文件处理成webpack能够处理的模块，plugins有着很强的能力。…"}, {"id": "6888613308153692174", "title": "全球最火的程序员学习路线！没有之一！3天就在Github收获了接近1w点赞", "desc": "国外有一个爆火的开发人员学习路线，目前已经在 Github收获了 131 k+ star，Star 数量在 Github 所有仓库中排名第 9 。这个仓库有多火就不用说了吧！ 作为程序员，如果你还不知道这个仓库的话，就真的亏大发了！另外，我司的一些技术大佬给应届生写学习路线的时…"}, {"id": "6844904192549584903", "title": "前端存储除了 localStorage 还有啥", "desc": "在介绍目前比较流行的一些开源的前端存储方案之前，阿宝哥先分享一些与存储有关，有趣好玩的开源库。 ShareDB 是一个基于 JSON 文档操作转换（OT）的实时数据库后端。它是 DerbyJS Web 应用程序框架的实时后端。 ImmortalDB 是在浏览器中存储持久键值数据…"}, {"id": "6896118234391511053", "title": "一些提高前端代码健壮性的方法", "desc": "在过去的开发经历中处理了各种奇葩BUG，认识到代码健壮性（鲁棒性）是提高工作效率、生活质量的一个重要指标，本文主要整理了提高代码健壮性的一些思考。 本文将继续探究除了单元测试、打日志之外其余一些帮助提高JavaScript代码健壮性的方法。 同理，后台在处理前端请求参数时，也应…"}, {"id": "7005808576996311048", "title": "h5微信支付功能封装", "desc": "因为各种原因吧，我们在做移动端开发的时候，涉及到money，我们经常要做微信支付。如果是做小程序开发，我们可以直接用小程序的原生接口，一键搞定，如果是h5网页的话，那我们就需要使用微信提供的js-sd"}, {"id": "6854818587820736526", "title": "解锁各种js数组骚操作，总有你想要的！", "desc": "在开发中，数组的使用场景非常多，平日中也涉及到很多数组相关操作，对一些常见的操作方法进行总结和收藏，在开发中就能信手拈来，大大提高开发效率。 2、先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。 3、利用对象属性存在的特性，如果没有该属性则存入新数组。 4、利用数组原…"}, {"id": "6977563249650696206", "title": "call、apply、bind实现原理", "desc": "本文介绍了call、apply、bind的用法和他们各自的实现原理。apply与call方法类似，call方法接收的是一个参数列表，而apply方法接收的是一个包含多个参数的数组。"}, {"id": "6889231003697709070", "title": "前端前沿观察，Cookie 居然可以这样整了", "desc": "用 JS 操作 Cookie 其实是很麻烦的，并不存在一个简单的 API 能让我们获取或者设置 Cookie。 唯一一个操作 Cookie 的 API 是 document.cookie，但是这句代码使用起来很难受。如果说我们想要获取一个需要的 Cookie，可能得先写这么一个…"}, {"id": "6972369882469892127", "title": "花十分钟来了解下Vite原理吧", "desc": "Vite是一个面向现代浏览器的一个更轻，更快的web应用开发工具，他基于ECMAScript标准原生模块系统ES Module实现。 他的出现是为了解决webpack冷启动时间过长，另外Webpack"}, {"id": "6963058923829985288", "title": "那些好用的 VS Code 插件，究竟是如何提高编码效率的？", "desc": "在开始正题之前，我们先回忆一下自己在 VS Code 上常用并且获得编码幸福度的是不是包含以下几个点。"}, {"id": "6985751821369212935", "title": "烧不死的鸟🐦是凤凰 ｜ 2021年中总结", "desc": "DevUI 是一款面向企业中后台产品的开源前端解决方案，它倡导沉浸、灵活、至简的设计价值观，提倡设计者为真实的需求服务，为多数人的设计，拒绝哗众取宠、取悦眼球的设计。如果你正在开发 ToB 的工具类产"}, {"id": "6963275723867947015", "title": "基于 babel 和 postcss 查找项目中的无用模块", "desc": "如何做一个查找项目中无用模块的工具？如何写一个通用的模块遍历器？babel 和 postcss 分别怎么做依赖分析？这篇文章给你答案。"}, {"id": "6844903726201700365", "title": "ES6 完全使用手册", "desc": "此外还要注意这里不一定就是正式进入规范的语法。 1. let 和 const 在我们开发的时候，可能认为应该默认使用 let 而不是 var，这种情况下，对于需要写保护的变量要使用 const。 然而另一种做法日益普及：默认使用 const，只有当确实需要改变变量的值的时候才使…"}, {"id": "7006578313556656135", "title": "JavaScript 系列 -- Null、Undefined、Boolean 的区别", "desc": "本文转载自 null, undefined 和布尔值 Null 和 Undefined  概述 null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或nul"}, {"id": "7002016650127999007", "title": "小五的算法系列 - 集合与字典 (Set & Map)", "desc": "此系列文章以《算法图解》和《学习JavaScript算法》两书为核心，其余资料为辅助，并佐以笔者愚见所成。力求以简单、趣味的语言带大家领略这算法世界的奇妙。"}, {"id": "7006203339549458439", "title": "js常用算法整理", "desc": "冒泡排序（时间复杂度O(n*n)） 快速排序（时间复杂度：O(nlogn)） 数组转树形结构 树形结构转成列表 数组扁平化 实现对象的扁平化 DOM 节点输出 JSON 的格式 虚拟 Dom 转化为真"}, {"id": "7005025080166055967", "title": "学会这5种JS函数继承方式，前端面试你至少成功50%", "desc": "摘要：函数继承是在JS里比较基础也是比较重要的一部分，而且也是面试中常常要问到的。下面带你快速了解JS中有哪几种是经常出现且必须掌握的继承方式。掌握下面的内容面试也差不多没问题啦~"}, {"id": "6937688619503058974", "title": "JS原理学习：路线规划", "desc": "最近找人帮忙内推了几个大公司的web前端开发岗位，简历筛选没通过，跟几个网友聊了下加上内推人给我的简历反馈结果，我找到了自己的问题所在。 我是大专学历，他们团队要求本科学历，内推我的人看了我在掘金发的"}, {"id": "6984947948966641672", "title": "教你用 JavaScript 设计一个 Neumorphism 风格的数字时钟 (代码详解)", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 时钟是我们用来测量时间的装置。如果使用得当，时钟对于任何 UI 都是有用的元素。时钟可用于以时间为主要关注点的网站"}, {"id": "6997026855350075422", "title": "『面试的底气』—— 设计模式之发布-订阅模式（二）｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6924520063399624712", "title": "推荐程序员必备的 10 大 GitHub 仓库，前端占了 7 个！", "desc": "关于猫哥，大家可以看看我的年终总结 前端工程师的 2020 年终总结 - 乾坤未定，你我皆黑马。 初级前端与高级前端之间，很大原因就是投入学习前端的时间、经验的差别，其实就是信息差。 如果有一个地方能又快又好的获得这些优质的前端信息，那么将会大大缩短从初级到高级的时间。 已经推…"}, {"id": "6987589727289344036", "title": "哭了，21k Star 的 Yapi 被黑客入侵了", "desc": "事情是这样的，由于我们项目使用了这个 Yapi 项目，前几天收到了安全组的预警通知，说 Yapi 被爆出了安全漏洞，新注册的用户，可以在你的服务器执行任意代码，删除任意东西，让我紧急修改！！"}, {"id": "6999580006049873956", "title": "面试官：写一下防抖和节流叭。", "desc": "又是老生长谈的问题了，接下来我们就看一下具体的例子叭。 防抖 如果一直触发，则不执行。直到达到规定的时间，没有继续点击，就执行。 应用示例 直到300ms内没有点击，数字才加一。 节流 频繁触发，只会"}, {"id": "6994000994300330021", "title": "谈谈JS中new的原理与实现", "desc": "使用new [constructor]的方式来创建一个对象实例，但构造函数的差异会导致创建的实例不同。"}, {"id": "7007640136775106568", "title": "JSON-Server总结", "desc": "JSON-Server是一个Node模块，运行Express服务器，可以指定一个json文件作为api的数据源。 json-server可以直接把一个json文件托管成一个具备RESTful风格的API，并支持跨域、jsonp、路由订制、数据快照保存等功能的web服务器。 然后…"}, {"id": "6981664519244218382", "title": "如何让函数只执行一次", "desc": "实现函数只执行一次的核心思想非常的简单：「通过记录是否被执行的状态，来决定函数是否需要被调用」。接下来讨论一些常用的实现方式。"}, {"id": "7005908899022766110", "title": "ServiceWorker工作原理、生命周期和使用场景", "desc": "service worker 是现代web开发的关键部分，在最近几年获得了关注，这都要归功于 PWA（渐进式 Web 应用程序） 的流行。"}, {"id": "6844904175562653710", "title": "前端算法渣的救赎之路🚀", "desc": "首先这是一份面向面试的算法题，题目主要选自leetcode中hot 100 | 腾讯精选50题 | 精选Top面试题 | 剑指offer | 面试中遇到的一些算法题,全文122题，基本涵盖了前端面试中的算法题分类。因为个人能力有限，所以题目几乎是easy | mid，并且搬运了…"}, {"id": "7001712210095374373", "title": "几个JavaScript极短日期时间代码片段（你值得拥有）", "desc": "本篇文章主打日期时间相关代码片段，让你不用工具库也能秀的飞起，团队作战纵然势不可挡，有时候单兵作战也不可忽视，该文章带你认识 日期时间相关函数，让你认识到 “麻雀（函数）虽小，五脏（功能）俱全”"}, {"id": "6954923081462710309", "title": "Vue 源码解读（7）—— Hook Event", "desc": "详细讲述了 Vue 的 Hook Event 是什么，以及它的使用场景和实现原理 ........."}, {"id": "7005397846782541860", "title": "【TS】一、类型注解", "desc": "为了方便书写，以下用ts来指代TypeScript。 ts已经用了一段时间了，为了更系统的学习ts，仔细品读了一遍官方文档，由此做了些记录和总结。希望这篇文章也能帮助到正在学习ts的你，带领你入门。 "}, {"id": "6914160814152744973", "title": "前端的Nginx知识梳理", "desc": "因为开发中有很多环境，开发环境，测试环境，预生产环境等，所以会经常会用到nginx来配置代理。但是我也只是会用，想仔细梳理一下nginx的知识。1.什么是NginxNginx(enginex)是一个高"}, {"id": "7000744055713824775", "title": "『面试的底气』—— 设计模式之模板方法模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "6911710329185501191", "title": "推荐 12 个学习前端必备的神仙级工具类项目与网站", "desc": "猫哥是一个常年混迹在 GitHub 上的猫星人，所以发现了不少好的前端开源项目、常用技巧，在此分享给大家。 已经推荐了 面试项目、css 奇技淫巧项目、代码规范项目、数据结构与算法项目、JavaScript 奇技淫巧项目、前端必备在线工具 等专题的近 100 个优秀项目了。 以…"}, {"id": "7004853617400217637", "title": "判断数组的方法（面试问到的，下一篇我会写一篇关于跨域的文章）", "desc": "废话不多刷！直接来正题吧！ 1.使用数组自带的方法：Array.isArray() 常用方法 2.使用constructor(constructor是一个构造器，指明了是由什么构造出来的) 其实 le"}, {"id": "7000375775517999117", "title": "『面试的底气』—— 设计模式之组合模式｜8月更文挑战", "desc": "在面试高级前端时，往往会遇到一些关于设计模式的问题，每次都回答不太理想。恰逢8月更文挑战的活动，准备用一个月时间好好理一下关于设计模式方面的知识点，给自己增加点面试的底气。"}, {"id": "7001795242433183751", "title": "重温js——执行上下文", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 要明白上下文是啥，那么我们先来了解一下js的执行环境，运行过程等。 执行环境 在函数的那一张中，提到了全局环境和局部环境的概念，就是说在函"}, {"id": "6900713052270755847", "title": "从破解某设计网站谈前端水印(详细教程)", "desc": "最近在写公众号的时候，常常会自己做首图，并且慢慢地发现沉迷于制作首图，感觉扁平化的设计的真好好看。慢慢地萌生了一个做一个属于自己的首图生成器的想法。 制作呢，当然也不是拍拍脑袋就开始，在开始之前，就去研究了一下某在线设计网站（如果有人不知道的话，可以说一下，这是一个在线制作海报…"}, {"id": "6844904184962105357", "title": "这些前端基础题你能答对几道？(测试你的基础掌握,附答案解析)", "desc": "在三大框架盛行的时代, 基本上会个Vue就能在小公司浑水摸鱼。但是当想突破的时候就会意识到基础的重要性。 JavaScript中有很多重要特性及概念。比如原型,原型链,this,闭包,作用域,隐式转换等等。如果不能熟练掌握,在进阶中级前端开发工程师的道路上必定是困难重重。 用一…"}, {"id": "7000286902335045662", "title": "JavaScript|BOM 相关知识", "desc": "目标 能够说出什么是BOM 能够知道浏览器的顶级对象window 能够写出页面加载事件以及注意事项 能够写出两种定时器函数并说出区别 能够说出JS执行机制 能够使用location对象完成页面之间的跳"}, {"id": "6844903847693910029", "title": "JS 调用栈机制与 ES6 尾调用优化介绍", "desc": "栈是一种遵从后进先出(LIFO)原则的有序集合，新元素都靠近栈顶，旧元素都接近栈底。 餐厅里面堆放的盘子(栈)，一开始放的都在下面(先进)，后面放的都在上面(后进)，洗盘子的时候先从上面开始洗(先出)。 调用栈是一种栈结构的数据，它是由调用侦组成的。 调用栈记录了函数的执行顺序…"}, {"id": "6974265537761116196", "title": "3D可视化色彩设计大揭秘", "desc": "3D可视化，是目前非常热门的方向。所谓“文不如表，表不如图”，3D可视化具有丰富的展示形式和效果，美观和设计感也成了当下3D可视化行业越来越重视的部分。 在3D可视化场景中利用颜色可以对场景内不同信息"}, {"id": "6943009671724826654", "title": "前端刷题路-Day3", "desc": "定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。 每个next都包含着剩下所有的内容，比方说这是一个5组数据的链表，那么第一个元素的next包含着剩下四组的数据的所有内容，第二个元素的next包含着剩下三组元素的所有内容，这才是链表。 看看这个答案，明显…"}, {"id": "6864411395179184136", "title": "前端监控方案 - 埋点SDK", "desc": "在此方案之前，公司采用的是私有化部署的 sensor，来满足项目的错误监控、业务事件的埋点等功能的。 由于 渐渐不能满足业务的需求，二次开发受限。(主要原因) 资金投入比较大。 所以就有了前端公共埋点方案的出现。 埋点node服务：统一处理埋点请求，并发送kafka 事件，用于…"}, {"id": "6992948967306690568", "title": "你不知道的Class细节", "desc": "class类，通常标识一个相同类型的共有属性， \"Class\"语法 然后我们通过 new people()可以创建一个具有以上方法的对象"}, {"id": "6945265298777833479", "title": "前端面试每日 3+1 —— 第714天", "desc": "【推荐】欢迎跟 jsliang 一起折腾前端，系统整理前端知识，目前正在折腾 LeetCode，打算打通算法与数据结构的任督二脉。GitHub 地址 欢迎大家前来讨论，如果觉得对你的学习有一定的帮助，欢迎点个Star, 同时欢迎微信扫码关注 前端剑解 公众号，并加入 “前端学习…"}, {"id": "6992367573983559688", "title": "1、线程管理&任务分发", "desc": "1、线程管理&任务分发 一、线程管理概述 不同应用在各自独立的进程中运行。当应用以任何形式启动时，系统为其创建进程，该进程将持续运行。当进程完成当前任务处于等待状态，且系统资源不足时，系统自动回收。 "}, {"id": "6844903506986401805", "title": "Alloyteam Conf 2017 现场实录", "desc": "首先是大佬登场介绍 AC 是每年一度的 Alloy Team 团队技术分享会，而前段时间 TFC 主要是邀请业界大牛的技术分享。AC 希望给开发者提供最好的参会体验，也希望现场的各位分享自己的故事。 以兴趣部落为例讲解面向亿万用户的 Web 同构直出。 首先介绍了一些基本概念。…"}, {"id": "6967153378098937870", "title": "HOT100——寻找两个正序数组的中位数（JS实现）", "desc": "题目描述 解题思路 本题采用双指针的解题方法。 一个指针指向数组1。 一个指针指向数组2。 依次比较两个指针指向的元素的大小，谁小谁加到排序好的数组中，直到一方遍历完，将没遍历完的全部加到排序好的数组"}, {"id": "6844903586535571463", "title": "React中setState真的是异步的吗", "desc": "在学习react的过程中几乎所有学习材料都会反复强调一点setState\b是异步的,来看一下react官网对于setState的说明。 如果你熟悉react，你一定知道最后的输出结果是0，而不是1。 codesandbox。 结果似乎有点出人意料，三种方式只有在div上绑定的\b…"}, {"id": "6993516005406277645", "title": "重温js ——位运算", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 什么是位运算？ 位运算是在数字底层（即表示数字的 32 个数位）进行运算的。由于位运算是低级的运算操作，所以速度往往也是最快的（相对其它运算"}, {"id": "6844903570974703629", "title": "使用Rollup打包JavaScript", "desc": "String 要写入的文件。也可用于生成 sourcemaps，如果适用 iife – 一个自动执行的功能，适合作为<script>标签。（如果要为应用程序创建一个捆绑包，您可能想要使用它，因为它会使文件大小变小。） 我们用的是 --save-dev 而不是 --save，因为…"}, {"id": "6844903567342436366", "title": "面向 Web 前端的原生语言总结手册", "desc": "这一系列文章旨在让具有 Web 前端背景的开发者快速上手原生语言。 从 WebView 到 Hybrid 再到 React Native，移动端主流技术方案中前端同学的施展空间越来越大。但传统 Web 前端背景的同学所熟悉的编程语言主要是 JavaScript，在与 Nativ…"}, {"id": "6844903976505344013", "title": "一分钟说完JSONP请求，面试满分答案ヾ(≧▽≦*)o", "desc": "JSONP是JSON with Padding的略称，JSONP为民间提出的一种跨域解决方案，通过客户端的script标签发出的请求方式。 ​ 那请求何必做得如此麻烦，直接使用ajax做请求岂不美哉，这里便要涉及到一个同源和跨域的问题，往下。 ​ 现在所有支持JavaScr…"}, {"id": "6844903504872488968", "title": "面试分享：一年经验初探阿里巴巴前端社招", "desc": "一般阿里社招都是招3-5年的P6+高级工程师，当初自己一年经验也没有想过有这个面试机会。 虽然没想着换工作，但是经常关注一些招聘网站的信息，某一天，在某boss上有个人找我，叫我发一下简历，我一看是阿里的某技术专家，虽然之前也有阿里的在某boss上给我要简历，但是我深知自己经验…"}, {"id": "6844903635852230669", "title": "洞察 video 超能力系列——玩转 mp4", "desc": "Technologically, for greater probability to be happy. 只要在 HTML5 中使用过视频播放的同学对 video 标签一定不会陌生，不过很多同学只使用了 video 的基础功能，实际上 video 拥有强大潜能的，只要姿势正确…"}, {"id": "6844904007048101895", "title": "JavaScript 基础特性回顾和总结", "desc": "本章简要回顾我们到现在为止学到的 JavaScript 特性，并特别注意了一些细节。 这就是所谓的「自动分号插入」。但有时它不起作用，例如： 大多数代码风格指南都认为我们应该在每个语句后面都加上分号。 ……但即使我们在某处添加了「额外的」分号，这也不是错误。分号会被忽略的。 为…"}, {"id": "6961650265367789581", "title": "前端模块化开发", "desc": "历史 模块化 内容概述 模块化演变过程 模块化规范 常用的模块化打包工具 基于模块化工具构建现代Web应用 打包工具的优化技巧 1. 模块化演变过程 Stage 1 - 文件划分方式(每个功能和具体的"}, {"id": "6844903938198618126", "title": "JavaScript性能优化", "desc": "写这篇文章之前，本来想写“提升js性能的常规手段”，但是后来想想，这个主题有点太大了，改为《js性能优化从每一行代码做起》，可能更为贴切，再后来，又改为《提高js性能有哪些骚操作》，程序员也有程序员该有的风骚。 好了，接下来我们进入正题。 性能是创建网页或应用程序时最重要的一个…"}, {"id": "6844904017215111182", "title": "【译】9个强大的JavaScript技巧", "desc": "但是，如果站点无法在用户的Internet Explorer 11浏览器中运行，他们不会在乎我的优化代码。 我使用Endtest来创建自动测试，并在跨浏览器的云上执行它们。 Netflix使用相同的工具来测试他们的web apps。 下面是9个极其强大的JavaScript技巧…"}, {"id": "7005499017090039822", "title": "JS Advance --- this的基本使用", "desc": "在常见的编程语言中，几乎都有this这个关键字(Objective-C中使用的是self) ， JavaScript中的this并不是在编译时被确定，而是在运行时被确定。"}, {"id": "6859506910652006414", "title": "Web开发应了解的5种设计模式", "desc": "设计模式是对软件设计开发过程中反复出现的某类问题的通用解决方案。设计模式更多的是指导思想和方法论，而不是现成的代码，当然每种设计模式都有每种语言中的具体实现方式。学习设计模式更多的是理解各种模式的内在思想和解决的问题，毕竟这是前人无数经验总结成的最佳实践，而代码实现则是对加深理…"}, {"id": "7000179819895848996", "title": "想写好面向对象的代码，这篇一定要看  | 重学JS", "desc": "访问对象内部数据可以用['属性名']，那什么时候必须使用['属性名']的方式? 如何调用(执行)函数？请举例至少三种。 如何确定this的值?"}, {"id": "6844903853905674248", "title": "关于webpack4的14个知识点,童叟无欺", "desc": "没有什么比时间更具有说服力了，因为时间无需通知我们就可以改变一切。 Webpack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使…"}, {"id": "6998130329429114916", "title": " React Hooks的使用", "desc": "使函数组件可以进行存储状态 类组件的不足 同一组相干逻辑拆分到多个生命周期中，一个生命周期中有多个不相干的逻辑 this指向问题 useState 每次修改，App函数都会执行 useState方法可"}, {"id": "6974418499649142814", "title": "一篇彻底搞定对象的深度克隆 | 包括function和symbol类型", "desc": "深度克隆对象中所有可能出现的数据类型，包括function和symbol类型！看完不会打我来来来来来来来来来来来~"}, {"id": "6991966321529815053", "title": "万字总结webpack入门进阶知识", "desc": "🤾‍♀️序言 上一篇文章中我们讲到了 webpack 的一些基础特性，但是呢，单单会基础特性还是远远不够的。因此，在今天的文章中，将给大家带来 webpack 的高级特性，包括但不限于 dev 环境和"}, {"id": "6998081798773145613", "title": "【Base64简易版】迫于经常打交道，整理了一波相关概念", "desc": "涉及二进制，ascii码，base64相关知识；囫囵吞枣，只理清了大概的编码思路，有不对、不严谨的地方还请指出"}, {"id": "6993631926938501128", "title": "黑客说：如何做到 4 天上线一个小程序？", "desc": "自 6 月 6 号上线 “黑客说” 网页版（hackertalk.net）以来吸引了很多用户，为了进一步完善终端体验，我们决定复用已有的技术栈，实现微信端小程序，前后开发仅花了4天，本文主要从技术的角"}, {"id": "6916675943343849479", "title": "「多图预警」那些年，被blob虐过的程序猿觉醒了！", "desc": "lobParts:数组类型，可以存放任意多个ArrayBuffer, ArrayBufferView, Blob或者DOMString（会编码为UTF-8），将它们连接起来构成Blob对象的数据。 type：存放到blob中数组内容的MIME类型（默认为\"\"）。 endings…"}, {"id": "7002837745521393701", "title": "提高代码效率的 20 个JavaScript 技巧和窍门", "desc": "#目录 1. 声明和初始化数组 2. 找出总和、最小值和最大值 3. 对字符串、数字或对象数组进行排序 4. 从数组中过滤出虚假值 5. 对各种条件使用逻辑运算符 6. 删除重复值 7. 创建计数器对"}, {"id": "6998310603466997767", "title": "JavaScript 系列之数组（二）", "desc": "[JavaScript 系列之数组｜ 8月更文挑战 ] 连更数天带你学会 JavaScript 基础。"}, {"id": "6997593810465193992", "title": "深入理解Typescript系列-TSX", "desc": "这是我参与 8 月更文挑战的第 18 天，活动详情查看： 8月更文挑战 前言 JSX是一种可以在JavaScript中描述HTML的语法，尽管转换的语义是依据不同的实现而定的。 JSX本身也是一个表达"}, {"id": "6895304726822027277", "title": "【前端红宝书】精读训练营开始拉！一起来学习吧", "desc": "B站视频地址大家好我是大圣，之前做过前端书籍测评，很多人私信问我，最多的问题就是红宝书读不下去，所以我除了会继续做css和小黄书等书籍推荐外，我准备做一个红宝书的详细精读训练营，也得到了图灵出版社的同"}, {"id": "6992722475595333663", "title": "export和export default的区别", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 一、概述 ES6中，在JavaScript ES6中，export与export default均可用于导出常量、函数、文件、模块等。 二、"}, {"id": "7005834163236372488", "title": "js 原型链与原型掐死理解", "desc": "关于js原型链的问题一直是很多大厂喜欢的面试内容，网上收到的答案大多如出一辙，生怕你看懂，这里整理了一份给你看得懂的，看不懂请自掐 首先先上一幅图，后面来解释这图的具体内容 首先需要先了解三条原则： "}, {"id": "6968061014046670884", "title": "基于 slate.js（不依赖 React）设计富文本编辑器", "desc": "wangEditor 正在设计新版本，力争做一个更加稳定、简洁的开源富文本编辑器。虽然已经实现部分功能，但目前还处于技术方案设计过程中，API 和代码结构还会继续调整。"}, {"id": "6844903603421839368", "title": "VUE组件汇总", "desc": "内容UI组件开发框架实用库服务端辅助工具应用实例Demo示例UI组件element★13489-饿了么出品的Vue2的webUI工具套件Vux★8133-基于Vue和WeUI的组件库iview★663"}, {"id": "6988800686523678728", "title": "三年写BUG得出的找BUG经验", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 前言 零零碎碎从开始写代码已经整整三年多了，别人说只要写十万行代码就能在大学毕业时找到一份好工作，像我种写了超过十"}, {"id": "7003709338996965413", "title": "LeetCode第13天🐱‍🏍", "desc": "面试题 17.14. 最小K个数 排序 slice返回一个新的数组 快排 设计一个算法，找出数组中最小的k个数。以任意顺序返回这k个数均可。"}, {"id": "6844904046436843527", "title": "字节跳动面试官：请你实现一个大文件上传和断点续传", "desc": "这段时间面试官都挺忙的，频频出现在博客文章标题，虽然我不是特别想蹭热度，但是实在想不到好的标题了-。-，蹭蹭就蹭蹭 :)"}, {"id": "7005876555863818277", "title": "fetch ios低版本兼容cannot clone a disturbed response", "desc": "ios11以下 fetch兼容问题 cannot clone a disturbed response"}, {"id": "6925197705832562696", "title": "一个合格的初级前端工程师需要掌握的模块笔记", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 不要害怕做梦，但是呢，也不要光做梦，要做一个实干家，而不是空谈家，求真力行。 html标签是由&#x3C;>包围的关键词。 html标签通常成对出现，分为标签开头和标签结尾。 有部分标签是没有结束标签的，为单标签…"}, {"id": "6987420993568374797", "title": "vscode 是怎么跑起来的", "desc": "vscode 是前端工程师常用的 ide，而且它的实现也是基于前端技术。既然是前端技术实现的，那么我们用所掌握的前端技术，完全可以实现一个类似 vscode 的 ide。但在那之前，我们首先还是要把 "}, {"id": "7005188929804582919", "title": "图解数据结构js篇-链表结构（Linked-list）", "desc": "通过22张图带你彻底了解链表，就差把内存晶体管扒开来看了。当我写完这篇文章的标题后，我就知道这篇文章不会短。原创码字画图都不易，还请点赞鼓励一下。🤭"}, {"id": "7007702275149791239", "title": "《JavaScript高级程序设计（第3版）》读书笔记6", "desc": "第5 章 引用类型（接上篇） 一、基本包装类型 借助基本包装类型可以使基本类型值可以被当作对象来访问，三种基本包装类型分别是：Boolean、Number 和 String。具有如下特征： 每个包装类"}, {"id": "7002379294483841038", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十六）", "desc": "感激相遇 你好 我是阿ken 清除所有 li 的 class 类，并且在第 13 行给自己设置 current 类。同时当事件发生时执行第 15 ~ 19 行代码，显示当前鼠标单击的标签及其对应的内容"}, {"id": "6844904100035821575", "title": "（建议精读）HTTP灵魂之问，巩固你的 HTTP 知识体系", "desc": "上回就已经承诺过大家，一定会出 HTTP 的系列文章，今天终于整理完成了。作为一个 web 开发，HTTP 几乎是天天要打交道的东西，但我发现大部分人对 HTTP 只是浅尝辄止，对更多的细节及原理就了解不深了，在面试的时候感觉非常吃力。这篇文章就是为了帮助大家树立完整的 HTT…"}, {"id": "6997212505579716644", "title": "程序员不得不会的Reflect，有多少人不知道？", "desc": "Reflect 概述 Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。 （1） 将Object对象的一些明显属于语言内部的"}, {"id": "7002198277462442014", "title": "SSR 技术概述", "desc": "SSR 不是一种新型的技术，而是互联网最开始时所使用的加载技术。到底是什么原因，使得人们愿意拭去历史的尘埃，让服务端渲染这一古老的概念重新绽放光芒呢？"}, {"id": "6985459853183434789", "title": "JavaScript基础知识总结", "desc": "1. JavaScript简介 JavaScript 最开始是专门为浏览器设计的一门语言，但是现在也被用于很多其他的环境。 如今，JavaScript 已经成为了与 HTML/CSS 完全集成"}, {"id": "7002891064059117576", "title": "JS数据类型检测那些事", "desc": "背景 总所周知，js是一门动态的弱类型脚本语言，其采用动态的类型系统以及基于原型的继承方式。 缺乏类型的静态约束，这意味着数据类型导致的程序错误并不能在编译阶段及时发现，要想写出健壮的代码，就必须.."}, {"id": "6996589872265822221", "title": "javascript代码简写的几种方式", "desc": "“这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战” 本文主要介绍一些工作中常用的JavaScript编码技巧。非常有用，建议大家看完赶快实践，keep it in your mind! "}, {"id": "7002616348090040351", "title": "你知道 ES6~ES12等叫法是怎么来的吗？", "desc": "我们常常听别人说并且自己也会说 ES6、ES7……ES12，那么，这些叫法到底是怎么来的？今天，我们就来总结一下这些有关 JavaScript 的发展历程。"}, {"id": "6844904196626448391", "title": "实战技巧，Vue原来还可以这样写", "desc": "每天上班写着重复的代码，当一个cv仔，忙到八九点，工作效率低，感觉自己没有任何提升。如何能更快的完成手头的工作，提高自己的开发效率，在上一篇《绝对干货~！学会这些Vue小技巧，可以早点下班和女神约会了》，小编整理了一些Vue开发技巧，今天小编又整理了一些新的Vue使用技巧。你们…"}, {"id": "6996665189357584421", "title": "javascript包装对象", "desc": "包装对象 定义 对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。 所谓“"}, {"id": "7002410645316436004", "title": "Webpack 原理系列九：Tree-Shaking 实现原理", "desc": "一、什么是 Tree Shaking Tree-Shaking 是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，确"}, {"id": "7003604608320798734", "title": "(开源)给图片编辑器添加了【框选节点】功能", "desc": "一款开源图片编辑器，采用React + Typescript + knova 框架开发.支持完备的功能"}, {"id": "7000892038417743885", "title": "【JS干货分享 | 建议收藏】挑战最短时间带你走进JS（十二）", "desc": "感激相遇 你好 我是阿ken 文档对象模型 ( Document Object Model, DOM )，是 W3C 组织推荐的处理可扩展标记语言 ( HTML或者XML ) 的标准编程接口。形结构，"}, {"id": "7004613507844931614", "title": "【实战】自定义 ESLint Plugin", "desc": "Eslint 对于一个团队的代码规范是非常重要的，Eslint 自身带有很多有用的规则，本文介绍了 ESlint 的基础原理以及如何自定义 Eslint 插件来解决对象数组排序的问题"}, {"id": "6993913549256917029", "title": "对JavaScript中this和原型的理解", "desc": "本篇依然是关于《你不知道的JavaScript》书中知识的总结和思考，也算是自己的一个笔记和以后复习的资料"}, {"id": "6844904116284555271", "title": "redux、mobx、concent特性大比拼, 看后生如何对局前辈", "desc": "redux、mobx本身是一个独立的状态管理框架，各自有自己的抽象api，以其他UI框架无关（react, vue...），本文主要说的和react搭配使用的对比效果，所以下文里提到的redux、mobx暗含了react-redux、mobx-react这些让它们能够在reac…"}, {"id": "6994104278847586318", "title": "[译]使用JavaScript Promise的优点", "desc": "对于Promise，往往很多人认为主要解决回调地狱的问题，我认为其实不然，最重要的是带来了控制反转。本文详细举例了Promise是如何做到控制反转的。"}, {"id": "7002575459569369102", "title": "Taro2升级Taro3踩坑", "desc": "一、全局配置的升级 1、更新CLI 执行确认CLI升级成功,如图： 二、项目配置的升级 如果使用taro-ui，请升级到3.0.0-alpha.3 升级后的配置文件和之前的依赖项比对如下： 根目录co"}, {"id": "6990108681777971231", "title": "TypeScript的30个小问答", "desc": "1、 TypeScript 的主要特点是什么？ 跨平台：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。 ES6 特性：TypeScript 包"}, {"id": "7000567910905151501", "title": "webpack掠影-2", "desc": "前面我们已经学习了如何让 webpack 工作，包含开发时的 webpack-dev-server 和 用于生产环境的 webpack 打包输出文件。今天我们进一步了解 w"}, {"id": "6977768176146710558", "title": "为啥套娃？聊聊 babel、jscodeshift 和阿里妈妈的 gogocode", "desc": "首先，我是《babel 插件通关秘籍》 掘金小册的作者，对 babel 有源码级的掌握，算是有资格讨论这个话题。 本来会探讨以下话题： babel 是怎么转换代码的 jscodeshift 是怎么转换"}, {"id": "6998536198650232846", "title": "谈谈JavaScript中简单粗暴的10个数组方法", "desc": "在JavaScript中，对象毫无疑问是被应用最多的，数组作为对象的一种，在实际开发中每时每刻都会用到，今天我们就来简单谈一谈简单粗暴的10个数组方法，主要涉及到数组的增删改查以及一些复杂的操作，深入"}, {"id": "6992540058150502437", "title": "工厂函数和构造函数", "desc": "工厂模式是一种设计模式，说白了就是一种简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个对象。就像一个工厂一样"}, {"id": "6996479857559339038", "title": "深入理解Typescript系列-泛型", "desc": "这是我参与 8 月更文挑战的第 15 天，活动详情查看： 8月更文挑战 前言 在我们的日常开发中，时长会考虑到方法的复用性，毕竟对于相似的场景拷贝一份代码既增加了代码量还增加了额外的维护成本，要是重构"}, {"id": "6985701534499602462", "title": "【掘金 - 自动签到功能的实现】 - 让我们使用【ios/iphone 快捷指令自动化】实现一个社区每天自动签到小脚本", "desc": "准备工作 一台能够正常使用的苹果手机 快捷指令自动化功能 配置自动化信息 打开手机的【快捷指令】 - 底部【自动化】-点击右上角【+】-点击【创建个人自动化】 第二步 然后我们点击【充电器】进去- 然"}, {"id": "6997212807003537416", "title": "富文本及编辑器的跨平台方案", "desc": "本文将围绕富文本跨平台和编辑器跨平台两个部分介绍跨平台的价值，以及如何实现跨平台。通过一些方案介绍和踩坑分享，希望能给有富文本编辑器跨平台相关需求的小伙伴带来一些帮助。"}, {"id": "6875221687537926157", "title": "《JavaScript 20 年》中文在线版发布", "desc": "加入了共约 500 条的参考文献超链接。 加入了共约 100 条的脚注超链接。 加入了共约 100 条术语表的注解超链接。 加入了共约 400 项的 JavaScript 演化时间线表格。 加入了可跳转的章节目录。 加入了标志着 JavaScript 诞生的公告稿译文。 加入了…"}, {"id": "6844904046986280967", "title": "前端轻量化部署脚手架实践", "desc": "1.打包，本地运行npm run build打包生成dist文件夹。 2.ssh连接服务器，切换路径到web对应目录下。 3.上传代码到web目录，一般通过xshell或者xftp完成。 1.每次都需要打开xshell软件与服务器建立连接。 2.当负责多个项目且每个项目都具有测…"}, {"id": "6844903662020460552", "title": "5 分钟撸一个前端性能监控工具", "desc": "页面性能对用户体验而言十分关键。每次重构对页面性能的提升，仅靠工程师开发设备的测试数据是没有说服力的，需要有大量的真实数据用于验证； 资源挂了、加载出现异常，不能总靠用户投诉才后知后觉，需要主动报警。 关于前端性能指标，W3C 定义了强大的 Performance API，其中…"}, {"id": "6993881631731744775", "title": "JavaScript温故而知新 - 执行上下文和执行栈的机制", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 执行上下文 简单的来说，执行上下文是对Javascript代码执行环境的一种抽象概念，只要有Javascript代码运行，那么它就一定是运行"}, {"id": "7005847011761061901", "title": "【前端学习】全面js学习第一天", "desc": "解析过程和变量提升 解析：在代码执行前会有代码的解析 因为解析的变量提升是后是 let&const暂时性死区TDC let&const声明的变量必须放在使用之前 var-let-const的共同点 全"}, {"id": "6994985376150454285", "title": "力扣刷题👊【150. 逆波兰表达式求值】", "desc": "从头开始遍历测试用例的每一个字符串，如果当前的字符是数字，就压入 `stack`；如果当前的字符不是数字（即为运算符），就需要从 `stack` 中执行两次弹出操作，分别得到数字为 `a, b`，然后"}, {"id": "6976537488529555464", "title": "前端 JavaScript 复制粘贴的奥义——Clipboard 对象概述", "desc": "为了使 JavaScript 更加灵活的操作剪切板，也是为了顺应 JS 发展的历史潮流，Clipboard API 应运而生。"}, {"id": "6997212869469143054", "title": "Three.js实现穿越云层动效", "desc": "上文说到，我对《你的性格主导色》活动中最感兴趣的部分就是通过 Three.js 实现穿越云层动效了，据作者说每朵云出现的位置都是随机的，效果很好，下图是我实现的版本。 在线 Demo 首先说下实现穿越"}]