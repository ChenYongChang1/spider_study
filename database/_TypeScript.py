[{"id": "6987197521609097229", "title": "从零到一学习TypeScript（二）类型 与 对象", "desc": "函数 和 对象 函数的参数和返回值类型 函数是javaScript中重要的组成部分， typescript为函数提供了参数类型和返回值类型， 允许我们指定在声明函数参数时， 可以在每个参数后面添加类型"}, {"id": "6876624667533115400", "title": "前端常量维护：TypeScript 项目中维护常量引发的思考", "desc": "背景：项目基于antd + typescript 开发，经常用到字段映射列表项，这里叫做常量，并配合 Select 筛选联动。具体需求： “种类”一栏里，通过接口返回的 fruitType 字段匹配对应的中文。 我们首先想到的是维护一个对象格式的常量 FRUITS_OBJECT…"}, {"id": "6844903873040105480", "title": "TypeScript 类型断言", "desc": "类型断言（Type Assertion）就是手动指定一个值的类型。具体看看怎么做吧 推荐使用这种，因为在 tsx 语法中只认它。而 tsx 是 react 的 jsx 语法的 ts 版，后面实战篇幅天天见，别着急。 猜想失败，unionGetLength2.ts 与 union…"}, {"id": "6844903895949377544", "title": "Typescript结合React实践", "desc": "Typescript是JavaScript的一个超集，主要提供了类型系统和对es6的支持。本人使用ts编写react将近3个月的时间，中间踩了不少坑，从刚开始的觉得ts没有必要到现在觉得ts真香。在这里对使用ts编写react的心得做一下总结。 一个好的代码习惯是常常对自己写的…"}, {"id": "6988907997049126943", "title": "TypeScript学习(十一)：工具类型", "desc": "Distributive Conditional Types 重点阅读：https://www.typescriptlang.org/docs/handbook/2/conditional-types"}, {"id": "6844903860692074504", "title": "还可以这么玩？超实用 Typescript 内置类型与自定义类型", "desc": "大家用过 Typescript 都清楚，很多时候我们需要提前声明一个类型，再将类型赋予变量。 这样写会出现一个问题，如果后面id 类型要改成 string，我们需要改 2 处地方，不小心的话可能就会忘了改另外一处。所以，有些人会这样写： 这样一来，很多情况下，我们可以尽量少地写…"}, {"id": "6974962649570213901", "title": "ts中的泛型", "desc": "泛型 为什么要用泛型？泛型有什么好处，看下面的示例 不用泛型 运行结果 泛型的写法 运行结果 看完上面的示例，你会觉得用了泛型好麻烦，代码量一下多了好多！我不仅要定义接口，还要处理接口，好麻烦！是的。"}, {"id": "6987347279749316639", "title": "TypeScript和webpack问题浅析", "desc": "never 类型是什么？ 它用来描述那些永远无法出现的值。 never类型是所有类型的子类型，可以赋值给任何类型的值 除never类型外，任何类型都不是never的子类型，也不能赋值给never类型的"}, {"id": "6998030564469145637", "title": "TypeScript相关内容", "desc": "TypeScript相关内容：描述TS出现的原因，解决的问题，具体的类型限制写法，类的修饰符，结合React常见的类型限制；"}, {"id": "6990883128629788680", "title": "TypeScript学习(十三)：枚举类型", "desc": "对JS而言，枚举并不是一个单纯的类型，它会侵入 JS 运行时。 数字 Numeric enums 下面写法默认 name 为 1，age 为 2。使用的是时候直接读取即可。 也可以指定任意数字 自增 "}, {"id": "6844903619188391950", "title": "TypeScript 模块导入那些事", "desc": "两者大部分是等价的，但 ES6 规范对 import * as 创建出的模块对象有一点限制。 根据该规范，该模块对象不可被调用，也不可被实例化，它只具有属性。 因此，如果你想调用该对象，或者使用 new 方法，在 allowSyntheticDefaultImports: fa…"}, {"id": "6844903792463314958", "title": "我为 VS Code 开发了一个 Deno 插件", "desc": "这几天为 Deno 开发了一个 VS Code 插件：Deno support for VSCode，GitHub 地址：https://github.com/justjavac/vscode-deno。 自 Deno 发布以来就备受关注，也有很多媒体和开发者称 Deno 为“…"}, {"id": "6844904142599618568", "title": "typescript不能不掌握的高级特性（一）", "desc": "在当前这个typescript火的一塌糊涂的时候，掌握typescript的一些高级用法，对我们开发出高质量的代码尤为重要。接下来的一段时间，笔者将会采用实例的方式向大家讲述typescript的一些高级用法。本期要讲述的是typescript里面的交叉类型&。 iUserIn…"}, {"id": "6919021480575500302", "title": "TypeScript 面向对象编程（类 接口与泛型）", "desc": "TypeScript 是面向对象类的编程。 简而言之，就是程序中所有的操作，都是通过对象来完成的。计算机程序本质是对现实事物的抽象。一个人，一辆车，一只狗，这些都是对象，而这些对象发出的动作就是对象的方法，某些特征就是对象的属性。比如一个人，他的身高，长相，姓名，年龄等这些在对…"}, {"id": "6844903669385658382", "title": "iView 发布 3.1.0 版本，支持 TypeScript，支持 Vue CLI 3", "desc": "自 iView 7.28 发布 3.0 后，今天我们又带来了一个重要的版本 3.1.0（版本代号：INSIDE），这个版本 iView 开始支持 TypeScript，可以算是一个新的里程碑。 支持 TypeScript。 增加 Vue CLI 3 插件。vue-cli-plu…"}, {"id": "6992971076523261960", "title": "TypeScript学习笔记（1）", "desc": "1、环境搭建 IDE使用VS Code进行安装： Demo编写：在练习目录下输入tsc --init可以快速创建一个 tsconfig.json 文件或者手动新建一个tsconfig.json 文件。"}, {"id": "6992923100329279525", "title": "Ts高级类型（Utility Types）", "desc": "前言 学习TypeScript的过程中发现对某些UtilityTypes不是很理解，就重新在文档上系统学习了一遍，TypeScript提供了几种实用工具类型来促进常见的类型转换，这些实用程序是全局可用"}, {"id": "6844903854107000845", "title": "【译】React, TypeScript 中 defaultProps 的类型解决", "desc": "现在大型的前端项目中是很需要注意可维护性，易读性的，因此选择使用“安全的” JavaScript -- 即 Typescript 是非常有帮助的，你工作将会变得更简单，避免一些潜在的错误问题。Typescript 搭配 React 能轻松的创建你的应用，配置好 tsconfig…"}, {"id": "6854573218255241224", "title": "TypeScript项目实践之 Omit 特性", "desc": "入职两个月以来每天都在接触 TypeScript，但其实用的还不是很好，经常踩坑。所以我接下来也会尝试着更新自己该系列文章，目的是除了巩固总结自己的所学之外，也希望能够帮助到正在学习TypeScript但没有在真实项目实践中使用过TypeScript的人们。 因为是我想写的主要…"}, {"id": "6955393667129409573", "title": "ts 4.1 模板字符串类型实现一个纯类型层面的url2json", "desc": "开始 首先我们要确定这个类型应该是什么结构的 它需要传递进去一个url，是一个字符串类型 它需要返回一个Record<string, string>类型，分别对应的是我们传递进去的每一个key和val"}, {"id": "6921614982777929736", "title": "JavaScript 、TypeScript 中的 Boolean", "desc": "boolean 是 JavaScript 中一种有趣的原始数据类型。在TypeScript中，非严格模式下（\"strictNullChecks\": false），它总共允许4个值 true 、false、undefined、null 。 boolean 可以取值 true 或 …"}, {"id": "6996545273375768613", "title": "Typescript 最佳实践", "desc": "`TypeScript `具有类型系统, 且是`JavaScript`的超集. 它可以编译成普通的 `JavaScript`代码. `TypeScript` 是一个比 `JavaScript` 更"}, {"id": "6844903902295359501", "title": "[译]TypeScript 和 Babel 7", "desc": "今天我们很高兴为Babel用户宣布一些特别的东西。一年前，我们开始着手发现用户在使用TypeScript时遇到的最大困难，我们发现Babel用户的一个共同问题是尝试设置好TypeScript 太难了。 原因通常各不相同，但对于许多开发人员来说，重写已经正在使用的构建配置可能是一…"}, {"id": "6844904071334199309", "title": "TypeScript 夜点心：自定义类型守卫", "desc": "TS 在遇到以下这些条件语句时，会在语句的块级作用域内「收紧」变量的类型，这种类型推断的行为称作类型守卫 (Type Guard)。 类型守卫可以帮助我们在块级作用域中获得更为精确的变量类型，从而减少不必要的类型断言。下面通过一些具体的例子来帮助大家理解这个看起来有点抽象的概念…"}, {"id": "6954168461039927309", "title": "TypeScript 深入应用了解", "desc": "超集： 在TS环境中写JS也是不会发生问题。 定义： 不预先确定的数据类型，具体的类型在使用的时候才能确定。 3. 改变成能接收任何类型的数据 4. 泛型的实现 定义： TS能够在特定的区域中保证变量属于某种确定的类型，可以在此区域中放心的引用此类型的属性，或者调用此类型的方法…"}, {"id": "6844903637496365064", "title": "ES7 Decorator 应用小结", "desc": "许多面向对象的语言都有 装饰器(Decorator) 函数，用来修改类的行为。目前，这个方法已经被引入了 ES7，但是无论是主流浏览器还是 Node.js 对它的兼容性都不是特别友好。 因此要在项目中使用Decorator的话，需要使用 Babel 进行转译，或者使用 Java…"}, {"id": "6844903698926141453", "title": "发布一个react组件——react-read-pdf，用于在移动端展示PDF文件", "desc": "PC端的浏览器对于PDF文件的展示没有太大的问题，给定一个PDF的链接，就可以用浏览器默认的展示样式来展示和渲染PDF文件的内容。比如一个\"http://www.baidu.com/test/pdf\"。 如何在移动端展示这个文件。为了在移动端展示和渲染PDF文件的内容，本文在p…"}, {"id": "6844903939658219533", "title": "TypeScript入坑指南（三）", "desc": "上一篇文章简单讲了ts跟js相同的数据类型和void、enum和any等类型，这一篇将会继续讲到其它类型。 我们在前面有说过，当我们未给某个变量声明类型时，ts会根据上下文，自动推导出变量的类型，这种过程其实就是类型推论。 如果定义变量时，既未赋值，又未声明定义，那这时就相当于…"}, {"id": "6844903985959190541", "title": "Vue3都要上的TypeScript之工程实践", "desc": "0. 前言 怎么上... 咳咳，大家别想歪，这是一篇纯技♂术文章。 好吧，Vue3.0可能最快也要19年年末才出来，Vue3.0是会对Ts使用者更友好，而不是只能用ts了，尤大使用ts的原因也是因为ts的静态类型检测以及ts的表现比flow越来越好了。自从巨硬大步迈向开源，前端…"}, {"id": "6844903785106522119", "title": "TypeScript In ICE", "desc": "TypeScript 是 JavaScript 的 强类型 版本。 提供了 静态类型系统 和支持 最新的不断发展的 JavaScript 新特性。 在编译期去掉类型和特有语法，生成 纯粹的 JavaScript 代码。 由于最终在浏览器中运行的仍然是 JavaScript，所以…"}, {"id": "6911974820150247431", "title": "TypeScript使用指南（初级篇）", "desc": "索引：指定索引的类型，比如number，string。如果是string，则索引既可以是string，也可以是number。如果是number，则索引只能是number"}, {"id": "6844903801699172359", "title": "用TypeScript开发手势库 - (2)tsconfig.json & rollup.config.js & npx", "desc": "注: 为了阅读体验, 我把为什么不用webpack放在的本文的最后. 我对代码做了注释(如有不懂请留言): 其实npx并不是本文主角,但是如果你的tsc不是全局安装的, 那么你在命令行运行tsc会提示找不到他, 但是如果你用npx tsc那么他就会运行你本地的node_modu…"}, {"id": "6981319737233899557", "title": "TypeScript介绍", "desc": "一、介绍 官网简介：TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。 详细介绍：TypeScript是微软开发的一个开源的编程语言，通过在JavaScript"}, {"id": "6844903565970915341", "title": "TypeScript在React高阶组件中的使用技巧", "desc": "随着TypeScript语言特性的完善，我们团队的前端代码已完全迁移至TypeScript。当前TypeScript完全支持JSX语法，举个例子： 这样我们声明的ComponentA组件就可以在编译时检查传入参数是否正确。 在使用React的过程中，我们不可避免的会对现有组件进…"}, {"id": "6844903641724223495", "title": "TypeScript在node项目中的实践", "desc": "TypeScript可以理解为是JavaScript的一个超集，也就是说涵盖了所有JavaScript的功能，并在之上有着自己独特的语法。 最近的一个新项目开始了TS的踩坑之旅，现分享一些可以借鉴的套路给大家。 作为巨硬公司出品的一个静态强类型编译型语言，该语言已经出现了几年的…"}, {"id": "6844904066179579918", "title": "typescript入门：高级类型", "desc": "我已经开始迷迷糊糊了。接着提问者又延伸了这个问题 把一个数字类型或者字符串类型在转换为类型时，缩紧为字面量。 如何理解字面量和string类型？字面量也是单独的一个类型，而类型string ，可以理解为无穷(所有)字面量的联合 \"a\" | \"b\" | \"c\"|.... 它是字面…"}, {"id": "6854573209761611790", "title": "Bit 最佳实践 - 第二节：基于bit的组件共享工作流之一的实践", "desc": "bit 基本的套路即，将项目 A 里组件直接发布到共享的远程空间【本文特指 bit.xxxx.com，大家可以按需搭建属于自己的 bit server 】，从而在其他项目内内可以通过 bit install 和 bit import 两种方式引入共享的组件；并且在 bit im…"}, {"id": "6891203805862428686", "title": "【记】一个简单的文本编辑器实现过程", "desc": "js提供了一个 api：contenteditable 允许我们对内容进行编辑。即在标签中加入contenteditable document对象暴露出一个execCommand方法去操纵当前的可编辑区域。即document.execCommand() 拖蓝区已可以加粗了。"}, {"id": "6844903620329078792", "title": "[译] 别再对 Angular Modules 感到迷惑", "desc": "Angular Modules 是个相当复杂的话题，甚至 Angular 开发团队在官网上写了好几篇有关 NgModule 的文章教程。这些教程清晰的阐述了 Modules 的大部分内容，但是仍欠缺一些内容，导致很多开发者被误导。我看到很多开发者由于不知道 Modules 内部…"}, {"id": "6844903601639424013", "title": "VS Code v1.23发布,这个版本有点意思", "desc": "亮点: 1: 缩进不用依赖插件就能有线条高亮了 2: 快速选择多列,终于把 sublime 的这一个特性拿过来了 3: 编码格式增加 4: 缩放编码的范围的时候,聚焦中心点 5: 问题输出增加过滤范围 6: 不用插件直接跑 npm 的命令了 7: git 和搜索复制这块加强"}, {"id": "6844904120688607246", "title": "从两个角度理解 TypeScript 中的类型是什么？", "desc": "TypeScript中的类型是什么？本文中描述了两种有助于理解它们的观点。 以下三个问题对于理解类型如何工作非常重要，并且需要从两个角度分别回答。 如果 myVariable 的类型为 MyType，则意味着所有可以分配给 myVariable 的值都必须是 MyType 集合…"}, {"id": "6844904079676669965", "title": "TypeScript 夜点心：条件范型", "desc": "现在假设我们需要实现一个名为 promisify 函数，它的功能有些类似 then 方法：接受一个值，如果它已经是 Promise 了，就直接返回；如果不是，就把它包在一个 Promise 中返回。这个需求实现起来不难： 上面的实现通过范型 T，声明了入参 input 的类型。…"}, {"id": "6903443271507247118", "title": "Typescript运行时校验", "desc": "基于此类需求，我开发了一个npm包，来实现这个功能。来实现ts运行时类型检查 表述为“整体是一个数组，每一项是一个数字”，这种结构表述方式符合这样的特点，复杂的ts类型，具有多层结构，但是每一层是类似的结构，type代表类型，value代表下一层的结构。"}, {"id": "6921699755928059912", "title": "TypeScript入门", "desc": "类型系统类型安全强类型：语言层面限制函数的实参类型必须与形参类型相同;弱类型:语言层面不会限制实参的类型;强类型和弱类型根本不是某一个权威机构的定义:强类型有更强的类型约束,而弱类型中几乎没有什么约束"}, {"id": "6895630169118572552", "title": "TypeScript的索引类型与映射类型，以及常用工具泛型的实现", "desc": "相信现在很多小伙伴都在使用 TypeScript（以下简称 TS），在 TS 中除了一些常用的基本类型外，还有一些稍微高级一点的类型，这些就是我本次文章要讲的内容：索引类型与映射类型，希望小伙伴们看过这篇文章后能对 TS 有更深一步的理解。 改写后这个函数是一个泛型函数，泛型为…"}, {"id": "6937635588774313998", "title": "TS装饰器的使用以及应用（基于express实现Controller等装饰器）", "desc": "TS 为什么要用TS对express进行封装呢？ 我们先来了解一下什么是装饰器 那么TS里面的装饰器如何使用呢 接下来我们介绍一下TS里面有那些类型的装饰器 类装饰器 属性装饰器 方法装饰器 方法参数"}, {"id": "6844903689933553672", "title": "【译】开发大型 Angular 应用的12条架构清单", "desc": "在 Nrwl，我们帮助财富500强公司用正确的方式使用 Angular 平台开发。这些公司很少存在小型应用，大多是多个团队使用多个共享库构建的多个应用程序。经历过此种情况的开发者就知道，如果处理不当它很快就会演变成一个多对多的卷积噩梦。 文章的末尾——在讨论了一些相关因素和关注…"}, {"id": "6915418098468126733", "title": "TS学习笔记（Six Day）", "desc": "TS学习笔记（泛型和装饰器）TS泛型泛型语言：使用泛型来创建组件可以使一个组件支持多种类型的数据，这样用户可以用自己的数据类型来使用组件相比使用any，泛型会保留参数类型，泛型有点把数据类型抽出来，动"}, {"id": "6937274981990531079", "title": "基于TS + Webpack实现简易的编辑器", "desc": "本文主要说下如何从零实现一个简易的编辑器，从webpack环境的搭建，到编辑器的实现都会讲到。 其中会涉及到个人的一些思考和总结。感兴趣的同学可以查看本文的源码仓库：简易编辑器 因为该编辑器是基于ts写的，所以针对ts需要进行编译和解析。需要typescript 和 对应的ts…"}, {"id": "6877428065425702925", "title": "TS模块解析", "desc": "模块解析是指编译器在查找导入模块内容时所遵循的流程。假设有一个导入语句import{a}from\"moduleA\";为了去检查任何对a的使用，编译器需要准确的知道它表示什么，并且需要检查它的定义mod"}, {"id": "6857013186462220302", "title": "TypeScript泛型的实际应用", "desc": "类型约束是类型提示的基础，正因为有了类型约束，类型提示才能正常工作。类型约束越严谨，类型提示就越精准。而定义一个严谨的类型约束离不开泛型。下面我们通过几个例子，来了解下泛型在类型约束中的作用。 现在我们约束key为keyof S也就是S这个泛型的所有key的取值，这样智能提示就…"}, {"id": "6920614816705052686", "title": "Ts 学习 02----------青涩少年爱上TS", "desc": "类型别名和类型断言类型别名(typealiases)类型别名用来给一个类型起个新名字,常用于联合类型，与接口interface很相似，使用type关键字创建类型别名缺点：一次只能定义一个变量，若定义多"}, {"id": "6844903827490127880", "title": "TS学习笔记（三）：类", "desc": "传统的 JavaScript 程序使用函数和基于原型的继承来创建可重用的组件，从 ES6 开始，JavaScript 程序能够使用基于类的面向对象的方式。使用 TypeScript，你可以使用 ES6 中规定的新特性，编译后的 JavaScript 可以在所有主流浏览器和平台上…"}, {"id": "6844903689975496711", "title": "用typescript撸个前端框架InDiv", "desc": "有个同事跟我说：需求还是不够多，都有时间造轮子了。。。 这个轮子从18年4月22造到18年10月12日，本来就是看了一个文章讲前端框架的路由实现原理之后，想试着撸一个路由试试，结果越写越多，到最后就莫名其妙变成了个mvvm框架了。顺便写了个比较渣的文档和服务端渲染。。。 名字其…"}, {"id": "6844904159511052295", "title": "一个例子贯穿单例模式，Typescript的private，public，static 属性理解", "desc": "原理：我们可以看到实例化的时候 new Person()下面飘红了，解释是不允许实例化构造函数是私有类型的类，因为 private声明后只能在类的内部使用。 原理：通过 static声明我们可以通过类的本身来调用这个方法，通过这个方法再来实例化这个类，就达到了内部访问私有构造函…"}, {"id": "6844903590507577352", "title": "用typescript开发爬虫过程实践", "desc": "这段代码是获取豆瓣上小组话题和对应的链接，然后写入数组里面，分别打印出来。我们跑一下代码，看看输出 可以看到已经获取到我们想要的数据了。接下来我们尝试把这些数据写入到数据库里面 这里我们往数据库中插入title数组和urls数组的数据。跑一下代码，看了输出没有问题，我们看下数据库"}, {"id": "6844903898122027016", "title": "超难：如何消除 TypeScript 代码中的 any", "desc": "本人刚录制的免费视频教程"}, {"id": "6984721975587373069", "title": "06-TypeScript对象", "desc": "在各种面向对象的语言中， 如Java， Python， C#等， 都有对象的概念， 有这样一句解释 --- 万物皆对象， 那么对象到底是个什么东西， 怎么就万物皆对象了。 实际上， 对象这个概念非常的"}, {"id": "6844903741292986382", "title": "聊聊Typescript中的设计模式——装饰器篇(decorators)", "desc": "随着Typescript的普及，在KOA2和nestjs等nodejs框架中经常看到类似于java spring中注解的写法。本文从装饰模式出发，聊聊Typescipt中的装饰器和注解。 上述代码定义了一个处理url为“/cats”的控制器，该控制器对于url为“/cats”的…"}, {"id": "6844904094826496013", "title": "一张页面引起的项目架构思考（Rax+Typescript+hooks）", "desc": "咳咳，不要意思，题目起大了~~ 小生之辈，岂敢以架构而论。 不过话说来，很多人都认为前端无非就是 HTML+CSS+JS,一个目录一类文件，有何架构可言。但是我想说。。。。你说的都对！ 但是，笔者一直在探索不同的页面架构组织形式，鄙人愚见，好的架构，能够方便拓展和开发以及后期的…"}, {"id": "6844904002509864974", "title": "新手前端学🔥typescript - 实战篇, 实现浏览器全屏(59行)", "desc": "初学ts的时候, 大家都会问\"有什么实际项目可以参考吗?\". 好了! 满足大家的需求, 我计划定期用ts做一些业务常用小插件, 代码量尽量小(控制在🦕1kb以内), 方便大家阅读源码, 也方便大家有时间去实现一遍. 最近后台项目需要一个\"全屏\"的按钮, github了下, 发…"}, {"id": "6859914549341093896", "title": " 聊一聊Typescript中与this相关的类型定义", "desc": "从本文开始，会陆续介绍一些typescript的使用，由浅入深，本文主要介绍一下Typescript中的this用法以及与this相关的内置函数。 默认情况下，如果ts没有this对象类型声明，this是自动隐式定义。如果noImplicitThis设置为true,此时不允许t…"}, {"id": "6902333925562499086", "title": "在  VsCode  中调试  TypeScript", "desc": "最近在 leetcode 上刷题，大部分都是用的 TypeScript 进行代码编写，但是 TypeScipt 调试起来太不方便了，总不能写一堆console.log，如果是 JavaScript 直接按 F5 就能调用 Node 来调试了，很显然，TypeScript 不能这…"}, {"id": "6981454550964109319", "title": "TypeScript——类型兼容性", "desc": "TypeScript里的类型兼容性是基于结构子类型的。结构类型是一种只使用其成员来描述类型的方式。 它正好与名义（nominal）类型形成对比。"}, {"id": "6844904051654524935", "title": "TypeScript 真的值得吗？", "desc": "在开始之前，希望大家知道，我是 TypeScript 爱好者。它是我在前端 React 项目和基于后端 Node 工作时的主要编程语言。但我确实有一些疑惑，所以想在本文中进行讨论。迄今为止，我已经用 TypeScript 写了至少三年的代码，所以 TypeScript 做得的确…"}, {"id": "6994084660003209230", "title": "TS 学习笔记（二）", "desc": "本文为TS学习笔记第二篇，主要介绍了类的定义与继承、类中的访问类型和构造器、getter 和 setter 抽象类"}, {"id": "6934593935335489544", "title": "将小驼峰接口类型递归的转成大驼峰：TypeScript 高级类型与 4.1 字符串模板类型实战", "desc": "在 Javascript 中，变量名，键的命名风格一般都是 camelCase 的，而在许多接口规范中，则都是接受 PascalCase 风格的 JSON Object。完成大驼峰参数到小驼峰参数的转换，这在 Javascript 中是较容易实现的。可是在 Typescript…"}, {"id": "6988014928258924552", "title": "typescript + vue-property-decorator", "desc": "vue-property-decorator Vue 属性装饰器 vue-class-component + vue-property-decorator 它们的区别与联系： vue-property"}, {"id": "6985893932617957413", "title": "TypeScript编译原理学习笔记", "desc": "TypeScript的编译器的源文件位于TypeScript的源码的src/compiler目录下。 一、TypeScript编译器 1、关键组成部分 TypeScript编译器分为如下五个关键部分："}, {"id": "6997022215229177887", "title": "TypeScript 使用规则", "desc": "“八月的色彩是用金子铸就的，明亮而珍贵；八月的色彩是用阳光酿造的，芬芳而灿烂。未来的日子，愿你把自己调至最佳状态，缓缓努力，慢慢变好 Y(^o^)Y"}, {"id": "6981004656176529422", "title": "TypeScript——枚举", "desc": "使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。"}, {"id": "6844903665203953672", "title": "深入理解 TypeScript", "desc": "正如你所见，TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以及可维护性；同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。 TypeScript Deep Dive 是一本很好的开源书，从基…"}, {"id": "6987945879814701092", "title": "TypeScript中接口和抽象类", "desc": "接口和抽象类的出现主要是为了添加参数的限制，来规范代码 接口 TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScrip"}, {"id": "6993944879508242440", "title": "TypeScript-入门教程(4)", "desc": "1.数组的类型 类型 + 方括号」表示法 2.数组泛型 我们也可以使用数组泛型（Array Generic） Array<elemType> 来表示数组： 3.用接口表示数组 接口也可以用来描述数组："}, {"id": "6976889073562550286", "title": "TypeScript 入门：高级类型", "desc": "内容有类型断言、接口interfaces、类的使用、泛型、类型声明。很干啊，很无趣啊，但是就是这样了。"}, {"id": "6844903645411016718", "title": "旧项目 TypeScript 改造问题与解决方案记", "desc": "由于本次改造的项目为一个通过NPM进行发布的基础服务包，因此本次采用TypeScript进行改造的目标是移除Babel全家桶，减小包体积，同时增加强类型约束从而避免今后开发时可能的问题。 本次改造使用的是TypeScript v2.9.2，采用Webpack v4.16.0进行…"}, {"id": "6981858171790819365", "title": "简要介绍fp-ts（四）", "desc": "Reader 在 fp-ts 中，Reader的定义如下： 也就是一个类型为r -> a的函数，r可以看作为计算所需的环境，而a是计算的结果。它经常被用来做依赖注入。先来看一段代码： 这是三个普通的函"}, {"id": "6844903778366259213", "title": "Vue框架TypeScript装饰器使用指南", "desc": "装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 @expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。 拷问灵魂的问题！ 因为装饰器可以 对业务代码非侵入。 本篇…"}, {"id": "6948059999683739662", "title": "一文带你了解TypeScript", "desc": "Typescript是Javascript的超集，遵循最新的ES6，ES5规范。Typescript扩展了Javascript的语法。 注： 属于数组的一种，可以指定数组里面每个项的数据类型（可以指定多个数据类型）。 typescript中表示没有任何类型，一般用于定义方法的时…"}, {"id": "6844904100153262087", "title": "【THE LAST TIME】Typescript 进阶 之 重难点梳理", "desc": "【THE LAST TIME】 一直是我想写的一个系列，旨在厚积薄发，重温前端。 也是给自己的查缺补漏和技术分享。 JavaScript 毋庸置疑是一门非常好的语言，但是其也有很多的弊端，其中不乏是作者设计之处留下的一些 “bug”。当然，瑕不掩瑜~ 话说回来，JavaScri…"}, {"id": "6844903516939485197", "title": "VS Code 折腾记 - (11) 再来一波插件推荐!(代码片段,框架,Node,touchbar,TS,Git,数据库,python!!)", "desc": "我看到很多人会在一些插件下面辱骂.说什么万年不更新,辣鸡插件卸载不掉. 真心替那些作者不值,浪费自己生命造福社区的人却不被尊重还辱骂,贼寒心... NPM Dependency Links : 这个就是方便你在初始化脚手架项目之后想了解某些模块,点击直接调到npm 模块发布页面…"}, {"id": "6844904008415445006", "title": "前端项目技术选型", "desc": "一个react的项目，光react肯定是不足以做出一个优秀的项目的。那么一个将军要配哪些兵的。 1. 懒加载 bundle-loader，安装bundle-loader来使用，简单轻便，就是每个文件都的加上lazy，社区热度不够，目前已很少更新维护。 dynamic impor…"}, {"id": "6911662480473194509", "title": "TypesScript 的使用感想", "desc": "19 年刚毕业工作那会，会点 js 只看过 react 文档但并没有在实际项目中使用过的我怀着紧张局促不安还有点小期待的心情开始了入职以来的第一个项目，项目的技术栈选用的是 react + redskull + babel + ant design。 这三板斧加上以后就很 am…"}, {"id": "6996451125448687624", "title": "typescript学习系列2：关于tscconfig.json配置", "desc": "这是我参与 8 月更文挑战的第 3 天，活动详情查看： 8月更文挑战 最近笔者在学习typescript对于配置上问题基本做一个小小的笔记总结下： 1.创建项目： 新建文件夹typescript,创建"}, {"id": "6844904056905793544", "title": "TS（JS）与 Go", "desc": "v8 引擎首先会解析源码，生成抽象语法树（AST），基于 AST，解释器便可以开始工作生成字节码，经过编译器后生成可以运行的机器码。 Go 是一门编译型语言，在代码***运行之前***需要通过编译器生成二进制机器码。它的编译过程大致如下： 代码首先会被扫描（词法分析）生成 to…"}, {"id": "6854573220738105357", "title": "探究typescript类型元编程", "desc": "大家在平时写typescript的代码时，用到的最多功能应该是它的类型标注，给变量加上类型约束，一方面是方便自己的编码，避免明显的bug，另外一方面是增强了代码的可读性。因为js语言的灵活性比较高，typescript的类型系统也被设计得比较强大，甚至强大到可以单独作为一门编程…"}, {"id": "6844903829100576775", "title": "TS 进阶", "desc": "我们使用 type 定了一个字符串字面量类型 EventNames，它只能取三种字符串中的一种。 注意，类型别名与字符串字面量类型都是使用 type 进行定义。 不具有初始化函数并且之前的枚举成员是常数(单纯声明的时候)。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 1…"}, {"id": "6844903923430457357", "title": "Vue + Typescript 的开发实践", "desc": "VUE 是前端三剑客之一, 之前一直处在写过 demo 的地步, 没有很深入的体会, 这次公司因为招不到 react 的人, 所以希望尝试将技术栈换为 vue, 以便更方便招人. 于是就有了 VUE 的踏坑之旅, 而且一开始就是配合 ts 来食用, 因为在 react 中 ts…"}, {"id": "6844903759773089805", "title": "聊聊TypeScript中类、接口之间相互继承与实现的那些事儿", "desc": "本文讲述了类的继承、接口的实现中需要注意的一些小细节，同时也对类、接口的多继承做了一些讲解。 由于 Dog 继承了 Animal 类，所以同时也继承了 Animal 的 name 属性和 sayHello 方法，因此可以直接使用 dog 实例调用 sayHello 方法。 那么…"}, {"id": "6844903594223730702", "title": "使用webpack搭建基于typescript的node开发环境", "desc": "正在学习node.js，这里介绍使用webpack来搭建基于typescript的node开发环境。"}, {"id": "6976400798775246856", "title": "TypeScript 基础类型", "desc": "TypeScript 基础类型：为了让程序有价值，Typescript提供了能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。还有一些复杂的数据类型。"}, {"id": "6930439224974016520", "title": "金三银四：了解AST为牛年新机会助力", "desc": "基于上述的“和谐场景”，作为一个爱偷懒的程序员，我们有没有办法让程序帮我们做一些事呢？答案是肯定的。举一个现在一个比较成熟的解决方案： 以上方案根据我们常用的接口文档生成工具Swagger产生的JSON文件作为数据源，可以生成不同平台的代码，如我最喜欢的：Typescript。…"}, {"id": "6844903649341079559", "title": "理解TypeScript", "desc": "TypeScript是JavaScript的一个超集，扩展了JavaScript的语法，本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。任何现有的JavaScript程序可以不加改变的在TypeScript下工作,等同于ES时代的JS。TypeScript是为大型应…"}, {"id": "6982103493821595655", "title": "TypeScript基础学习总结", "desc": "0-引言 0.1JavaScript的隐式类型转换： 隐式类型转换的规则是当 == 操作符两侧的值不满足恒等时（===），则先将空数组转换为字符串类型，然后再进行恒等比较。 0.2Typescript"}, {"id": "6981112029100802085", "title": "TypeScript 断言总结", "desc": "1. 类型断言 在使用 TypeScript 的过程中，你可能会遇到这种情况：你比 TypeScript 更加清楚某个值的类型。 比如你从异步请求中拿到一个类型为any的值，但你清楚的知道这个值就是s"}, {"id": "6844903745503903758", "title": "Typescript编译原理（一）", "desc": "。各位可先行下载。其编译部分位于 src/compiler 目录下。 每个部分在源文件中均有独立文件，稍后会解释这些部分在编译过程中所起到的左右。 parser解析器控制scanner扫描器将源码转化为抽象语法树（AST）。流程如下： 词法分析过程，解析器阶段可对应为语法分析过…"}, {"id": "6938666518733389860", "title": "Vue3+TypeScript实现网易云音乐WebApp（播放界面：播放、暂停、音量控制、播放进度控制(点击/拖拽进度条)、上一首、下一首）", "desc": "1. 成果展示 2. 处理接口数据 如何不知道如何使用vue3+ts创建vuex的，请点击右侧观看。Vue3 + TypeScript创建Vuex 建议放在播放页的前一个页面进行使用（也就是歌曲列表页）。获取到当前点击音乐的id和当前列表所有音乐的ids后，传入到handleG…"}, {"id": "6844903576112726029", "title": "typescript-react-webpack4 起手与踩坑", "desc": "webpack4正式版发布也有一段时间了, 为了从实际中感受变化, 于是以typescript, react, 结合之前翻译的一篇文章webpack-4.0更新日志（翻译）, 搭建一个可供项目使用的框架. ...... 我是由另一个项目升级过来的, 因为原项目没用babel, …"}, {"id": "6844903504675340296", "title": "在 Create-React-App 中使用 TypeScript(汉化)", "desc": "这篇快速入门指南将告诉你 如何将 TypeScript 和 React 联系起来. 我们将使用 create-react-app 工具来快速建立项目. 我们假设你已经在使用 Node.js 和 npm. 你也应当有一些 React 基础知识 的了解. 我们将要使用 create…"}, {"id": "6844904093870194701", "title": "TypeScript 开发经验分享", "desc": "改为如下格式，勉强骗过校验，达到不报错的地步。 采用方案，在注入属性后使用!表明该属性确认存在。 但是，以更严谨的角度来说，未进行实现的任何方法都不应该写在普通类里，而应该放在抽象类里。因此，遇到以上情况时，代码应该以下方式来实现： 例如src/component/Permis…"}, {"id": "6976663140637343757", "title": "ts 进阶用法 --- 1. 接口与类型别名", "desc": "介绍interface type基本用法以及扩展相关(如: 可缺省属性 只读属性 接口定义函数类型(可执行类型)等等 ) 并列举他们的区别"}, {"id": "6844904055567810568", "title": "Typescript全面介绍", "desc": "Typescript作为ECMA的实现，javascript的超集，目前已经广泛在项目中使用。typescript是什么？有什么具体功能？这些已经被大家写得差不多了。在这里，我不再赘述ts的作用，而是直接用起来，从一个初学者角度告诉大家一些使用typescript的心得。下文将…"}, {"id": "6844903635868991501", "title": "我与小程序的故事以及小程序框架选型", "desc": "这是一篇我与小程序的故事，但小程序的过去却与我无关。 曾经与她错失交臂，但愿一切还来得及。 毕业后的两年内，一直在创业公司工作，但自己却错过了很多创业风口，如区块链和小程序，唯独跟风了机器学习，但这是一条漫长的路，需要潜心学术否则很难做出成绩，我曾在现公司AI Labs的某部门…"}, {"id": "6971796012168200199", "title": "TypeScript ｜ 接口 Interface", "desc": "在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。 在 TypeScript 中，我们使用接口（"}, {"id": "6921174402893774856", "title": "Typescrit从入门到放弃系列(十一)-交叉类型", "desc": "交叉类型(IntersectionTypes)是将多个类型合并为一个类型交叉类型"}, {"id": "6844904055844634638", "title": "TypeScript真香系列-泛型", "desc": "TypeScript真香系列的内容将参考中文文档，但是文中的例子基本不会和文档中的例子重复，对于一些地方也会深入研究。另外，文中一些例子的结果都是在代码没有错误后编译为JavaScript得到的。如果想实际看看TypeScript编译为JavaScript的代码，可以访问Typ…"}, {"id": "6876776311696654344", "title": "【前端】浅析元数据与Typescript装饰器", "desc": "元数据：实际上就是一组特别的常量，通常储存着有关class的各种信息，在运行时可读取这些信息做一些操作，目前主要由 reflect-metadata 库提供实现。 Typescript装饰器：基本语法为 @xxx 放置在类的各个不同地方。实际上即Typescript会编译出一段…"}, {"id": "6844903934172069896", "title": "TypeScript: 通过一个小案例了解 ts 函数重载和类型保护", "desc": "联合类型表示一个值可以是几种类型之一。 我们用竖线（|）分隔每个类型，所以number | string | boolean表示一个值可以是number，string，或boolean。 所谓函数重载就是同一个函数，根据传递的参数不同，会有不同的表现形式。 当至少具有一个函数重…"}, {"id": "6945769612529270821", "title": "typescript的实际应用", "desc": "typescript是js的超集，它在js的基础上增加了静态类型校验，可以在运行前校验js中的一些错误并修正。 在定义类型之后，js中任何地方都会有文档提示，对象中包含的值都可以提示出来，这一点让js变得相当友好。 ts支持渐进式迁移，可配置只检查部分文件,在已有项目中慢慢改造…"}, {"id": "6844903511033921543", "title": "手把手教写 TypeScript Transformer Plugin", "desc": "在一个没有使用 antd 全部组件的项目里，这样做可以明显减少打包后的代码体积。 这就要用到本文的主角：custom transformation，这是从 TypeScript@2.3 开始引入的新能力，他让我们可以部分修改 TS 从源码转换成的语法树，从而控制生成的 Java…"}, {"id": "6844903781314854926", "title": "TypeScript 中的多种 import 解义", "desc": "JavaScript 中有多种 export 的方式，而 TypeScript 中针对这种情况做了多种 import 语法，最常见的就是 import * as path from 'path' 这种。这篇文章主要来讲解 TypeScript 中不同的 import 具有什么意义"}, {"id": "6899018451881295880", "title": "利用Decorator和SourceMap优化JavaScript错误堆栈", "desc": "配合源码阅读体验更佳。 这属于业务型报错，对于熟悉云开发能力细节的用户一眼就能看出错误的症结出在安全规则配置上，但是对于刚接触云开发的新用户或者之前没有遇到类似问题的用户来说，看到这样简短的错误信息肯定会一头雾水，分不清楚到底是业务报错还是代码写的不对。所以大部分人的第一反应是…"}, {"id": "6844903893927723015", "title": "[官方] TypeScript 发布 3.6 Beta", "desc": "Today we’re happy to announce the availability of TypeScript 3.6 Beta. This beta is intended to be a feature-complete version of TypeScript…"}, {"id": "6844903725111181319", "title": "koa2 一网打尽（基本使用，洋葱圈，中间件机制和模拟，源码分析(工程，核心模块，特殊处理)，核心点，生态）", "desc": "koa2 从基础使用， 手把手创建一个可运行项目，到基本 api 梳理，洋葱圈模式和一个简易实现模型，再到源码分析，源码分析涵盖： 工程，核心模块，特殊处理【委托，中间件机制，易用性处理，】，异常捕获，中间件交互，核心点，生态等多个方面。 全文较长，有什么意见欢迎提到 issue"}, {"id": "6911551957245100046", "title": "浅析TypeScript（一）", "desc": "TypeScript好处类型提示：更智能的提示编译时报错：还没运行代码就知道自己写错了类型检查：无法点出错误的属性写Vue组件的三种方式（单文件组件）1.用JS对象用TS类用JS类（方法同ts但是推荐"}, {"id": "6844903696401186824", "title": "使用typescript开发react-native踩坑记录", "desc": "我用rn开发了一个项目后，就迫不及待的准备在下个项目中开始介入ts了，但是完事开头难，遇到了好多问题，主要在配置上...我自己想了办法解决，但是感觉不完美，希望掘金ts大佬指导下，另外react-native的坑在上个项目也让我见识了，不是一般的多，怪不得现在还没发布1.0版本…"}, {"id": "6949060229610864654", "title": "你不知道的 「 import type 」", "desc": "背景TypeScript 3.8 带来了一个新特性：仅仅导入 / 导出声明。在上一篇文章中， 我们使用了这个特性，解决了: 引入类型文件报错的问题。其实这个特性并不复杂，但是我们需要了解其背后的机制原"}, {"id": "6844903826470895630", "title": "TypeScript 中 class 的实例成员与静态成员", "desc": "在阅读 TypeScript 文档的时候，经常会看到 类的静态属性 或者类的 类的实例属性 等名词，阅读其他篇章可能会出现另一个 类的静态成员 之类的名词。 把文档中的名词提取出来，分析后就可以发现：这些名词就是称呼多，理解起来还是很简单的。 文章语法适用于 TypeScrip…"}, {"id": "6844904110588690439", "title": "TypeScript 夜点心：常量断言", "desc": "这样的类型推断策略在大部分的情形下比较通用，但在个别情形下会显得有些棘手。例如我们想实现一个 React 中的自定义 Hook。这个 Hook 能通过 Ref 维护一个状态。它的返回值与 useState 类似是一个元组：第一项是该状态的值，第二项是该状态的 setter 上面…"}, {"id": "6844903686867517448", "title": "重磅！尤雨溪发布Vue 3.0开发路线", "desc": "在上周的 Vue.js 伦敦大会上，尤雨溪简要介绍了 Vue 下一个主要版本要发布的内容，9 月 30 日，尤雨溪在 medium 个人博客上发布了 Vue 3.0 的开发路线，全文如下： 为什么要推出新的主要版本？ Vue 2.0 发布于两年前，时间过得真快！在此期间，核心部…"}, {"id": "6979049666818080798", "title": "TypeScript中的类(class)", "desc": "在JS和TS中都有类(class)这个定义，类描述了所创建的对象共同的属性和方法。 1.类中的主要模块 字段：字段是类里面声明的变量。字段表示对象的有关数据。 构造函数：类实例化时调用，可以为类的对象"}, {"id": "6854573204862992392", "title": "【TypeScript历险记】", "desc": "> 记录从零开始的TypeScript基础 > 简要概括在学习过程中的**重点难点** > 作为今后复习的文章 ✨"}, {"id": "6947674777213468702", "title": "TypeScript 4.2 官方手册译文 - 对象类型", "desc": "在 JavaScript 中，分组和传递数据的基本方式是通过对象。在 TypeScript 中，我们通过对象类型来表示。 在上面的三个例子中，我们编写了接受对象的函数，这些对象包含属性 name （必须是字符串）和 age （必须是数字）。 对象类型中的每个属性都可以指定一些额…"}, {"id": "6855129007051145229", "title": "《重构-代码整洁之道TypeScript版》第2天", "desc": "昨天我们发了第一篇，今天让我们来继续第二天。先来回顾一下昨天我们都实现了哪些： 1. 这是如下我们要实现的目标任务列表（每天进步一点点⏰） 2. Change Reference to Value（将引用对象改为值对象） 描述🍏：你有一个引用对象，很小且不可改变，而且不易管理…"}, {"id": "6844904035682615309", "title": "VSCode 里的 GoToDefinition 是如何实现的", "desc": "咱们翻山越岭。。。终于找到了最为核心的一段，该 tsserver.js 文件是 extension 目录下 node_modules 目录的 typescript 模块编译后的 lib 包文件，为其提供了语法功能，我们要找的 “跳转到定义” 的 ts 实现就是在这里；"}, {"id": "6867689680670818317", "title": "弹幕看得多，试试用TypeScript亲手写一个弹幕库？", "desc": "如今各大视频网站都有弹幕功能，貌似不存在没有弹幕的视频直播网站。弹幕元素比起留言板等交互性和实时性更高，深受广大基友们喜欢。 然后，我就在各大视频网站假装观看视频的同时，悄悄地按下了F12，想一探究竟。了解发现，目前弹幕的主要实现有两种方式： 一说到动画，大家第一时间能想到的就…"}, {"id": "6869431300416077837", "title": "TypeScript实现向量与矩阵", "desc": "作为一个对线性代数一无所知的开发者，想快速对向量和矩阵进行一个了解和认识，那么本文就正好适合你。 本文将站在开发者的角度讲解向量和矩阵，并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 向量是线性代数研究的基本元素，将一组数放在一起其基本的表示方法就是向量，例…"}, {"id": "6844904029395353608", "title": "Vue 项目添加 TypeScript 支持", "desc": "前言如果原有项目webpack版本低于4,建议直接用vue-cli新建项目然后把项目文件迁移过去原有项目添加TypeScript添加TypeScript及代码检查初始化TypeScript及代码检查配"}, {"id": "6844903605086978062", "title": "TypeScript+Webpack+React组件库开发采坑实记", "desc": "本文为配置TypeScript+Webpack+React，开发UI组件库时遇到的坑以及相对应的解决方案记录，适合相关同学进行查阅解决问题。 此三类配置和选择会同时导致某一类问题，因此这三类不作为分类标准，仅作为读者思考的方向，我们下面会根据具体的问题和错误以及对应的解决方案来…"}, {"id": "6844904154024919054", "title": "我对前端代码设计的理解", "desc": "上面只是列了两个case，但实际项目中，上面可能有几十个case。 想象下，如果这个时候你需要添加一个新的request类的实现，你需要改动RequestType,RequestManager，比如新增一个CRequest。 在软件工程当中，我们提倡对修改关闭，对新增开放，也就…"}, {"id": "6947329488195682335", "title": "使用webpack+typescript开发出简单的富文本编辑器", "desc": "在开发社交、商城、管理等系统时常用到富文本编辑器，这次有幸接到关于编辑器开发方面的需求，且工作中不常见(不使用任何框架从零搭建项目)。算来接触nestjs这种函数注入式开发也有三个月了，那就索性试着写一个函数注入式的工程，本文也是为此而记录的。 一期我们主要实现的功能为 2个功…"}, {"id": "6955392566992830477", "title": "TS 单测工具！ts-jest 和 babel-jest", "desc": "什么是 Jest ？ Jest 是 Facebook 的一套开源的 JavaScript 测试框架， 它自动集成了断言、JSDom、覆盖率报告等开发者所需要的所有测试工具，是一款几乎零配置的测试框架。"}, {"id": "6844904014346190856", "title": "浅谈 C#、Typescript、JavaScript", "desc": "以前做后端的时候主要是微软的项目为主，随着公司业务发展需要后来转向偏前端项目的开发，今天我到了聊聊微软主导的TypeScript，如你使用过C＃或Visual Basic .NET等语言，你会很熟悉。 在微软强大的visual studio2012版本未出之前，对Javascr…"}, {"id": "6972180715362320391", "title": "TypeScript ｜ 类 Class", "desc": "类描述了所创建的对象共同的属性和方法。通过 class 关键字声明一个类，主要包含以下模块： 属性 构造函数 方法 相关概念 类（Class）：定义了一件事物的抽象特点，包含它的属性和方法 对象（Ob"}, {"id": "6870407504568942606", "title": "typescript + vue 基础操作", "desc": "创建项目新建一个基于ts的vue项目vuecreatexxx如下配置勾选TS在已存在的项目中安装typescriptvueadd@vue/typescriptTS语法特点类型注解、类型检测类接口泛型类"}, {"id": "6844903618038988808", "title": "在Vue中使用TypeScript", "desc": "很早以前，想在Vue中使用TypeScript来增强开发体验，TypeScript的优点自不必多说。查了很多资料，了解了当时在Vue中使用TypeScript的体验。由于当时TypeScript对Vu"}, {"id": "6988712110351974408", "title": "Typescript的json转model工具介绍", "desc": "```` # ts-json-model 在`Typescript`开发过程中，不可避免要编写`Model`；对于`Model`不多的简单应用倒是没有什么，但是对于复杂且`Model`较多、较复杂的应"}, {"id": "6844903763954630664", "title": "typescript + react 项目开发体验之typescript", "desc": "文档太无趣，我们就来讲个故事尝试着贯穿ts的知识点吧。 可以看到鸡比较牛皮，叫了两声。 下面我们来创建人物，给他多添加姓名这个属性，发出声音的方式就是speak了。 接下来是小和尚，小和尚难免会有个小秘密，一般不会轻易被人知道，但是总得有让人知道的方法。 众所周知，住持同学需要…"}, {"id": "6901584134968180743", "title": "手摸手教你使用Typescript", "desc": "一. TypeScript是什么 TypeScript是一种由微软开发的开源、跨平台的编程语言。它是JavaScript的超集，最终会被编译为JavaScript代码。 二. TypeScript的简介 它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类…"}, {"id": "6844903506210471944", "title": "antd源码解读（8）- Dropdown", "desc": "下拉菜单组件是一个可以将页面上比较冗杂的操作收纳在一个点，以便节省页面空间，达到整洁美观的目的。 Antd的下拉菜单组件中有一个点，就是他的内部元素必须是Antd的Menu组件，感觉有点捆绑的意思。 所以这里只是对其参数做了一些封装，比较简单。 这个组件是一个带按钮的下拉菜单组…"}, {"id": "6949318474057383973", "title": "【Typescript小手册】模块系统", "desc": "在编写 Javascript 时，我们会用到 ESM、CommonJs、UMD 等模块系统。Typescript 支持多种模块系统，推荐的是 ESM 和 CommonJs。"}, {"id": "6945057521044291598", "title": "TypeScript学习笔记（一）TS介绍，环境安装与运行", "desc": "TypeScript是JavaScript的超集，扩展了JavaScript的语法，因此现有的JavaScript代码可与TypeScript一起工作无需任何修改，TypeScript通过类型注解提供编译时的静态类型检查。其源于JavaScript（JS的拓展），终于JavaSc..."}, {"id": "6844903505438703623", "title": "Typescript--JavaScript that Scales入门", "desc": "Typescript的入门介绍"}, {"id": "6844904198962675720", "title": "TypeScript知识梳理", "desc": "官网下载直接安装即可， 使用 node -v 和npm -v 查看是否安装成功，显示相关版本号代表安装成功。 变量名:类型; ..... this.变量名= 变量名;.... do something....."}, {"id": "6844903969144176654", "title": "EventHub 粗糙实现笔记", "desc": "首先 eventHub 是模块之间进行传递的一种方式，采用发布订阅模式。关于概念好想也没啥说的。下一步就是找到 eventHub 需要实现的方法，分别是 emit、on、off。 基本思路是，我们有个缓存能存储监听器，当时对应的事件触发(emit)时，调用监听器就好，当想要注销…"}, {"id": "6844903917864632327", "title": "Typescript 入门基础篇（二）", "desc": "Typescript 入门基础篇（一）传送门。 Typescript 入门基础篇（三）传送门。 抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。抽象类中的抽…"}, {"id": "6844903641736806408", "title": "JavaScript 工作原理之十五－类和继承及 Babel 和 TypeScript 代码转换探秘", "desc": "本系列持续更新中，Github 地址请查阅这里。 这是 JavaScript 工作原理的第十五章。 如今使用类来组织各种软件工程代码是最常用的方法。本章将会探索实现 JavaScript 类的不同方法及如何构建类继承。我们将深入理解原型继承及分析使用流行的类库模拟实现基于类继承…"}, {"id": "6844903922541428744", "title": "TypeScript入门-开篇（一）", "desc": "公司前端开始了ts的重构，我作为一个ts小白开始了新的学习旅程。在接下来我将把我的学习过程记录下来分享给大家。 axios是现在前端项目最常用的数据请求库之一。相信很多人都知道怎么使用而不知道它究竟是怎么实现数据请求的。当然这也是我好奇的地方。所以接下来我就想用学习的ts来实现…"}, {"id": "6844903497704407053", "title": "精读《null >= 0?》", "desc": "本期精读的文章是：null &gt;= 0?1 引言你是如何看待 null &gt;= 0 为 true 这个结果的呢？要么选择勉强接受，要么跟着我一探究竟吧。2 内容概要大于判断javascript 在判断 a &gt; b 时，记住下面 21 步判断法：调用 b 的 ToP…"}, {"id": "6844903917873004551", "title": "Typescript 入门基础篇（三）", "desc": "使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。 TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。 TypeScript里的类型兼容性是基于结构子类型的。…"}, {"id": "6844904116179714055", "title": "【译】10个帮助你捕获更多Bug的TypeScript建议", "desc": "1. 对TypeScript提供运行时检查的思考 有一个对TypeScript常见的误解是：一个变量只要标注了类型，那么它总是会检查自己的数据类型是否与我们的预期一致。 与该误解相呼应的想法会认为：对一个从后端返回的对象进行类型标注可以在代码运行时执行检查来确保对象类型的正确性…"}, {"id": "6907787761366302727", "title": "Typescript学习 （二）之tsconfig配置", "desc": "目标语言的版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. 生成代码的模块标准: 'none', 'commonjs', 'a…"}, {"id": "6844903564741984270", "title": "缩减你的 Koa 控制器代码：更优雅的 RESTful 函数库", "desc": "使用一行代码帮助你完成大部分的 RESTful 状态回复，使代码更简单而标准。"}, {"id": "6844903623634206727", "title": "用typescript撸一个让元素高亮的库", "desc": "一直都想做一个js库，而且github上没有太多重复的轮子那种(轮子太多自己造就没必要了)，最好是自己会用得上。思前想后，决定做一个高亮文字的js库。 刚好最近接触一段时间typescript，可以拿来练练手，毕竟自己的东西怎么折腾都可以。 如何让一个元素的文字高亮，或者鼠标选…"}, {"id": "6921171186646777870", "title": "Typescrit从入门到放弃系列(九)-类型保护", "desc": "通过判断识别所执行的代码块，自动识别变量属性和方法一.typeof类型保护二.instanceof类型保护三.in类型保护四.可辨识联合类型五.null保护六.自定义类型保护七.完整性保护"}, {"id": "6921008467058622472", "title": "TypeScript —— TS中的数据类型", "desc": "基本类型布尔类型数值类型字符串类型数组类型元组类型枚举类型anyvoidnull和undefinedneverobject类型断言"}, {"id": "6844903569481531399", "title": "如何编写一个高性能的Angular组件", "desc": "这篇文章讲述如何分析组建，编码技巧，如何巧妙的规避一些嵌套循环，减少嵌套循环，低性能的编码等。 这次还是主要拿之前分享的一片文章中出现的业务组建，上次只是贴了代码，并没有详细说出实现过程，这次就以这个业务组建为中心，讲述如何编写一个高性能的业务组件。 这个类似省市联动的加强版，…"}, {"id": "6844903666328174599", "title": "ts-node 单测错误堆栈问题排查小记", "desc": "背景此前egg需要支持ts，所以我们在egg-bin中集成了ts-node（详见当Egg遇到TypeScript，收获茶叶蛋一枚），从而能够让开发者直接跑用ts写的egg应用，当然也包括单元测试。但是"}, {"id": "6844903535058878478", "title": "在 Angular 中简洁优雅的生成 mock API", "desc": "一个帮助开发者在 Angular 中简洁优雅的生成 mock API 模块，轻量无侵入无依赖。"}, {"id": "6844903501835812877", "title": "通过 creact-react-app 构建使用 typescript的项目", "desc": "这是 typescript react starter的个人汉化版，历时3个多小时。 终于翻译完了，最近刚要学typescript(๑•ั็ω•็ั๑), 喜欢点赞哟！"}, {"id": "6911582538784440334", "title": "基于H5分片上传、断点续传，采用迅雷下载的方式的上传服务", "desc": "在使用迅雷的时候，一直对迅雷下载文件的方式很感兴趣，一个是temp.xltd文件，另外一个是 config.cfg文件，大致的猜想是迅雷是多线程下载，需要将每个线程的数据保存到temp.xltd文件中，然后在config.cfg标记此次数据块的位置和字节数，为此我将写个大文件上…"}, {"id": "6854573218011807758", "title": "进击TypeScript(核心、高级特性及工程相关)", "desc": "2020年，越来越多的前端开源项目已经或者正在使用TypeScript重构（ant design、vs code 、vue3等）。正在从事前端开发的我们，已经不能忽视TypeScript整个生态链对前端开发的影响。 首先我们看一下下面这张图片: compile time err…"}, {"id": "6844903762146885645", "title": "2.TypeScript 基础入门（二）", "desc": "类型注解使用：TypeAnnotation 语法。类型声明空间中可用的任何内容都可以用作类型注解。 2. 原始类型 Javascript原始类型也同样适用于 TypeScript的类型系统。因此，string, number,boolean也可以被用作类型注解： 3. 数组 T…"}, {"id": "6844903720304525320", "title": "深度解读 2018 JavaScript 趋势报告（含视频）", "desc": "Hello 我是 Randy. 🤣今天在这个视频里，我要带大家一起看看 The State of JavaScript 2018 的调查结果。 The State of JavaScript 是一个由 Raphaël Benitte 和 Sacha Greif, 以及 Mic…"}, {"id": "6904955026645778446", "title": "typescript中泛型的使用场景", "desc": "​ typescript中许多时候，标注的具体类型并不能确定，比如一个函数的参数类型。 ​ 上面的函数，我们想实现的是获取一个对象指定的k所对应的值，那么实际使用的时候，obj 的类型是不确定的，自然 k 的取值范围也是不确定的，它需要我们在具体调用的时候才能确定，这个时候这种…"}, {"id": "6910611616635551758", "title": "JavaScript 中的惰性求值与流", "desc": "本文章主要内容是用 Typescript 实现 SICP 书中3.5章节。 在JavaScript中可以用Generator函数配合 yield 关键字进行惰性求值。 我们制定一个规范，Lazy类型的值（被lazy包裹的）必须通过 force 函数去取。 当然仅仅是一个Lazy…"}, {"id": "6844903503714844686", "title": "Vue 2.5 & TypeScript: API 参数中的类型推导", "desc": "在刚刚发布的 Vue.js 2.5 中加强了对 TypeScript 的支持，TypeScript 可以直接推导出 Vue.extend(options), Vue.component(options) 和 new Vue(options) 等 API 的参数中的 this 的…"}, {"id": "6976189434413170696", "title": "TypeScript基础(中)", "desc": "TypeScript常用语法 基础类型 枚举 enum 类型是对 JavaScript 标准数据类型的一个补充。"}, {"id": "6844903827485753351", "title": "TS学习笔记（一）：基本类型", "desc": "TypeScript 是 JaveScript 类型的超集，它可以编译成纯 JavaScript，TypeScript 可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。 TypeScript 支持与 Javascript 几乎相同的数据类型，此外还提供了使用的枚…"}, {"id": "6892312326100549640", "title": "制作极简的零配置 JS/TS 打包工具", "desc": "大约 18 年下旬想要搞一个方便的打包工具，面向的人群是非前端领域，对 JS 没有那么熟悉的做其他方向的 developer 和 research developer。彼时从其他方向 dev 们那听到最多的声音就是关于对各种 JS 语法兼容、语言特性、模块化的疑惑，不像 Jav…"}, {"id": "6844903935698796557", "title": "Fundebug前端异常监控插件更新至2.0.0，全面支持TypeScript", "desc": "Fundebug提供专业的前端异常监控服务，我们的插件可以提供全方位的异常监控，可以帮助开发者第一时间定位各种前端异常，包括但不限于JavaScript执行错误以及HTTP请求错误。 Fundebug前端异常监控插件更新至2.0.0，全面支持TypeScript，为使用Type…"}, {"id": "6844904175449407502", "title": "小菜鸡的成长之路（FLOW、TS、函数编程）", "desc": "一直计划准备一些博客，种种原因搁浅（主要还是没时间。。。）。最近公司里的项目逐渐稳定下来了，前端的开发节奏虽然很快，但是都能实现，剩下的开发大多其实是繁复的代码组装的体力活。哈哈哈...遂给自己开了这个专栏，一是为了督促自己记录下编写过程和一些踩的坑，跟大家分享；二是写点自己想…"}, {"id": "6844903729305485326", "title": "基于koa实现一个装饰器风格的框架", "desc": "装饰器（Decorator）是用来修改类行为的一个函数（语法糖），在许多面向对象语言中都有这个东西。 装饰器装饰不同类型的目标是有一些差异的，这些差异体现在装饰函数接受的参数里面。 首先对一个类的装饰是由内到外的，先从类的属性开始，从上到下，按顺序修饰，如果类的属性是个方法，那…"}, {"id": "6844903617573421069", "title": "TypeScript初战Chrome插件：Bilibili弹幕热度", "desc": "这是一个用来在B站视频进度条上方创建显示弹幕热度的Chrome插件，以弹幕数量-时间的直方图显示，在高能处（定义为短时间内有大量弹幕出现的时间点）有明显的峰值，可以用来直观地看视频中的热点，也可以拿来作为空降（跳跃快进）的指示。 已经上架Chrome插件市场，在这里或者搜【Da…"}, {"id": "6907428558843412487", "title": "TypeScript Class", "desc": "构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如， 抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含 abstract…"}, {"id": "6844903866589249544", "title": "写一个基于 typescript compiler 的转换工具", "desc": "链接是typescript官方的介绍，这里我简单说一说一些ts compiler的基本概念。 在开始之前我们需要个 ast viewer 帮我们快速分析ast树结构， 这里，让我们把上述代码复制进去， 看看ast树结构。 第二个参数是ts项目下面的tsconfig.json的一…"}, {"id": "6917502679254040590", "title": "TypeScript入门：枚举类型", "desc": "常量枚举成员会在编译阶段计算出结果，然后以常量值的方式出现在运行环境，计算枚举成员不会在编译阶段被计算，会被保留到运行阶段，在运行阶段才会计算出结果。 当我们不需要用到对象，而需要用到对象里面的值的时候，可以使用常量枚举，常量枚举编译后的代码会在编译后被移除，从而减少了编译后的…"}, {"id": "6844903663022899214", "title": "使用Vue全家桶+typescript 还原 cnodejs前端页面", "desc": "功能 1、所有文章的浏览位置记录 2、查看过的文章缓存 3、查看过的用户缓存 4、 回复文章 5、支持(文章详情页头部(用户名)、文章详情页内@用户、评论@用户)用户跳转 所有地方的用户跳转 6、 代码高亮 7、图片放大预览"}, {"id": "6844904178490277901", "title": "TypeScript基础类型总结", "desc": "近期正在学习TypeScript，正好总结一下学习的知识点，便于自己和读者记忆。 官方文档是入门的好途径，中文文档也翻译的很详细，建议打算学习TypeScript的小伙伴先入手官方文档：https://www.tslang.cn/docs/handbook/basic-type…"}, {"id": "6921230443962433543", "title": "Typescrit 从入门到放弃系列(十五)-自定义类型", "desc": "一.Diff实现求两个对象不同的部分二.InterSection交集三.Overwrite属性覆盖四.Merge对象合并"}, {"id": "6844903810431713293", "title": "TypeScript 简明教程：接口、函数与类", "desc": "TypeScript 中，我们使用接口来描述对象或类的具体结构。接口的概念在 TypeScript 中是至关重要的。它就像是你与程序签订的一个契约，定义一个接口就意味着你答应程序：未来的某个值（或者类）一定会符合契约中所规定的模样，如果不符合，TS 就会直接在编译时报错。 感兴…"}, {"id": "6962030090435690533", "title": "TypeScript入门（三）", "desc": "一、类 TypeScript 是面向对象的 JavaScript，类描述了所创建的对象共同的属性和方法，TypeScript 支持面向对象的所有特性，比如 类、接口等。 定义类的关键字为 class，"}, {"id": "6931528177575526413", "title": "React+Typescript最佳实践", "desc": "随便叨叨一句，TypeScript是一个JavaScript的类型化超集，可以编译成纯JavaScript，比如随便新建一个index.ts文件，随便来个函数，然后cd到该文件，执行tsc index.ts 就可以编译成js文件了，当然前提是全局安装了typescript。 当…"}, {"id": "6988432675673473037", "title": "TypeScript学习(四)：Handbook -> Object Types", "desc": "strictNullChecks xPos是可选属性，可能是 opts.xPos 可能是undefined。TS 设置中开启 strictNullChecks 后，TS 会有提示：(property)"}, {"id": "6953892137175875597", "title": "要不要学一下更高效的 TS 构建方式（工程引入）", "desc": "工程引入是 TypeScript 3.0 的新特性，它支持将 TypeScript 程序的结构分割成更小的组成部分。 这样可以改善构建时间，强制在逻辑上对组件进行分离，更好地组织你的代码。"}, {"id": "6844904014987919373", "title": "vue+TypeScript需要注意的点", "desc": "意思是告诉 TypeScript *.vue 后缀的文件可以交给 vue 模块来处理。 而在代码中导入 *.vue 文件的时候，需要写上 .vue 后缀。原因还是因为 TypeScript 默认只识别 *.ts 文件，不识别 *.vue 文件： 其他类似的报错：比如我写了一个自…"}, {"id": "6844904176770613256", "title": "记一个Vue+TypeScript项目配置实例", "desc": "1. 通过Vue CLI 3 创建vue项目 2. 启动项目 此时其实脚手架已经帮我们配置好了大多数的配置，但还是需要熟悉一下配置。 在项目根目录下创建tsconfig.json。 在根路径下创建tslint.json文件,就是 引入 ts 的 standard 规范。 如果已…"}, {"id": "6844903939675013127", "title": "TypeScript中使用getElementXXX()", "desc": "Angular 1.x版本是用JavaScript编写的，我们在百度Angular经常会搜索到AngularJS，并不是JavaScript的什么衍生版本，就是Angular 1.x。在后续版本中，改用TypeScript来重写了Angular框架。改动较大，所以做了个区分，A…"}, {"id": "6844904166536527880", "title": "聊聊TypeScript类型兼容，协变、逆变、双向协变以及不变性", "desc": "2020-12-06更新：近期在团队技术分享上，提炼了一个Playground，里面包含了更直观易懂的例子对全文的一些概念进行了补充说明。可以配合全文查看。"}, {"id": "6907908365930725389", "title": "Typescript之infer 关键字", "desc": "在讲infer关键字之前，先看一下不用infer的时候，实现一个条件类型推断的例子。 当Flatten给定的是Array&#x3C;string>时，它使用索引number来获取Array的元素类型。否则，返回给定的类型。 不知道你在写TS代码的时候，又没用过ReturnTyp…"}, {"id": "6927507046115835917", "title": "深入typescript:  简易 dependent type 实现", "desc": "最近经常碰到有同事需要一些实现的复杂的函数类型，即根据函数前序的函数的实参类型确定后续参数的类型。"}, {"id": "6844904182558752781", "title": "TypeScript在Model中的高级应用", "desc": "在MVC、MVVC等前端经典常用开发模式中，V、C往往是重头戏，可能是前端业务主要集中这两块。结合实际业务，笔者更喜欢路由模式、插件式设计，这种在迭代和维护上更能让开发者收益（不过你需要找PM协调这事，毕竟他们理解的简化用户体验，多半是怎么让用户操作简单）。但我们今天来看看Mo…"}, {"id": "6974337730088009742", "title": "TypeScript数据结构与算法：二叉堆", "desc": "上一篇《TypeScript 数据结构与算法：红黑树》实现了 Typescript 中自平衡的红黑树的数据结构与算法，本篇继续实现二叉堆（Heap）。"}, {"id": "6971606567439319053", "title": "TypeScript ｜ 基础类型", "desc": "在写 TypeScript 代码时，所有的变量都需要有类型 布尔类型 最基本的数据类型就是简单的 true / false 值 数字类型 二进制数、十进制数、十六进制数都可以用 number 类型来表"}, {"id": "6844904047116288013", "title": "TypeScript 3.8 Beta", "desc": "TypeScript 3.8 将会带来了许多特性，其中包含一些新的或即将到来的 ECMAScript 特性、仅仅导入/导出声明语法等。 为了能让我们导入类型，TypeScript 重用了 JavaScript 导入语法。例如在下面的这个例子中，我们确保 JavaScript 的…"}, {"id": "6844903823069151245", "title": "使用typescript封装mongodb", "desc": "疫情当前，大家足不出户，对于普通人来说，保护好身体，不生病，不给医护人员和国家添乱就是一种爱国的表现。 如果在这期间还能保持学习就是爱自己的表现。面对越来越严峻的互联网行业，自己也需要拓宽自己的视野，做好迎接挑战的准备。所以这段时间学了下koa和typescript，学完之后还…"}, {"id": "6946391746628550669", "title": "TypeScript 入门笔记（一）", "desc": "简介本文改进自 TypeScript 入门教程 ，原文代码执行在“非严格模式”下，这儿我修改为“严格模式”下可正常执行的代码，并精简提炼了许多章节。"}, {"id": "6961459233892073503", "title": "关于TypeScript联合类型报表达式有误的问题", "desc": "今天在工作时使用TypeScript联合类型导致报了一个“表达式有误”的错，因为这个错误出现的位置是在reduce方法上，一个数组使用reduce居然报错了。"}, {"id": "6844903684833280014", "title": "搭建Typescript+React项目模板(2) --- 提升开发体验", "desc": "sass是一款css预处理语言，支持变量，嵌套，mixin和导入等功能，可以极大地方便和简化css写法。 css module是针对css类名作用域做出限定的一种规范，用以解决css类名冲突的问题，此外还能避免一些爬虫进行数据爬取(当然厉害的爬虫除外)，同等的还有BEM规范。 …"}, {"id": "6886711858502828040", "title": "koa开发之使用ts装饰器", "desc": "装饰器使用 @log 的形式，称为注解型装饰器，其中 log 必须能够演算为在运行时调用的函数。 装饰器工厂就是一个简单的工厂函数，它返回一个装饰器函数，区别就在于调用装饰的时候传不传参数。如需要传参则升阶为装饰器工厂。"}, {"id": "6992926213014568991", "title": "TypeScript常用知识之--类定义和装饰器", "desc": "类的定义 装饰器 1. 类的装饰器 2.方法装饰器 4.属性装饰器 5.参数装饰器 相关资料 TypeScript 官网 大家喜欢的可以看看我的专栏 (TypeScript常用知识) 我会尽量保持每天"}, {"id": "6934700390428934152", "title": "队列实现栈&栈实现队列", "desc": "给你两个栈你如何实现一个队列，给你两个队列你如何实现一个栈。 本文就跟大家分享下这两个问题的解决思路与实现过程，欢迎各位感兴趣的开发者阅读本文。 执行入队操作时，我们元素放进栈1。"}, {"id": "6987953039155920904", "title": "30个小知识让你更清楚TypeScript", "desc": "关注我不定时分享精彩内容 来源：web前端开发 TypeScript 是 Microsoft 开发的JavaScript 的开源超集，用于在不破坏现有程序的情况下添加附加功能。 由于其独特的优势，例如"}, {"id": "6975521568025739272", "title": "TS 中 type 和 interface 的区别", "desc": "事实上这两者非常的像，大多数情况下我们都可以根据自己的喜欢选择其中的一个，也没有什么孰对孰错之分。开发中，我们也是往往选择一个不行，就无脑的切换下一个。interface 能做的，type 基本都能做"}, {"id": "6844903783869349902", "title": "TypeScript 简明教程：认识 TypeScript", "desc": "作为一名 JavaScript 开发者，如果你总在担心代码上线后会不会冷不丁报个 undefined，如果你写代码时总需要在文件间来回跳转查阅接口，如果你正准备接手一个大型 JS 项目，那么，该是时候考虑使用 TypeScript 了。 根据 TS 官网 的介绍：TypeScr…"}, {"id": "6994060870955302943", "title": "TypeScript 基本基础（02）", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 了解一些编程语言的术语 标识符 使用一个符合约定的名字给变量、常量、函数和类等命名，以建立起名称与实体之间的映射关系，这个名字就是标识符（i"}, {"id": "6844903866073350151", "title": "[译] TypeScript 3.0: unknown 类型", "desc": "TypeScript 3.0 引入了新的unknown 类型，它是 any 类型对应的安全类型。 unknown 和 any 的主要区别是 unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。而在对 any 类型的值执行…"}, {"id": "6998135720174944269", "title": "TypeScript系列 --- 类型兼容性", "desc": "TypeScript里的类型兼容性是基于结构子类型的。 结构类型是一种只使用其成员来描述类型的方式。 它正好与名义（nominal）类型形成对比"}, {"id": "6972433024935968798", "title": "react hooks + ts 用法", "desc": "总结react结合typescript使用时的一些类型定义规范。。。。。。。。。。。。。。。。。。。"}, {"id": "6844903984117858311", "title": "TypeScript(一)TypeScript培养类型思维", "desc": "一. JavaScript的痛点 1.1. 优秀的JavaScript 每个人可能观点并不完全一致，但是从很多角度来看，JavaScript是一门非常优秀的编程语言。 而且，可以说在很长一段时间内这个语言不会被代替，并且会在更多的领域被大家广泛使用。 Stack Overflo…"}, {"id": "6994359287480844325", "title": "数栈技术分享前端篇：TS，看你哪里逃~", "desc": "​ 数栈是—站式大数据开发平台，我们在github和gitee上有一个有趣的开源项目：FlinkX，FlinkX是一个基于Flink的批流统一的数据同步工具，既可以采集静态的数据，也可以采集实时变"}, {"id": "6844903925338865678", "title": "TypeScript类型声明书写", "desc": "注意：尽量不要把解构和声明写在一起，可读性极差。"}, {"id": "7000176271833432078", "title": "ts入门知识", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 TS初识 ts文件不能被浏览器运行，要用tsc + *.ts 先编译成js文件 每次修改ts文件后都需要重新编译成js文件，很麻烦，所以可"}, {"id": "6872901872693444622", "title": "TypeScript 核心概念梳理", "desc": "8月20日，TypeScript 4.0 正式发布了( Announcing TypeScript 4.0 )，虽然没有重大的变更和特性，可以看做是 3.9 版本正常迭代，不过 Daniel 也在公告中说了：对于初学者而言，现在是最好的上手时机。 In fact, if you…"}, {"id": "6844903706006126599", "title": "基于TypeScript的JSDoc注释", "desc": "JSDoc ( JSDoc 的最新版本是JSDoc 3) 其实是通过特定格式的注释来帮助我们生成 JavaScript API文档的工具。类似的工具还有 Javadoc 或 phpDocumentor. JSDoc 的提供的注释标记类型可以参考Block Tags, 但是到现在…"}, {"id": "6995849832933883934", "title": "ES 新特性与 TypeScript、JS 性能优化", "desc": "ES2015+的新特性：Proxy、Symbol、class等介绍；Typescript基础介绍和使用；GC得常见算法：引用计数、标记清除、标记整理、V8引擎等介绍"}, {"id": "6844903645071294472", "title": "TypeScript 一些你可能不知道的工具泛型的使用及其实现", "desc": "本文将简要介绍一些工具泛型使用及其实现, 这些泛型接口定义大多数是语法糖(简写), 甚至你可以在 typescript 包中的 lib.d.ts 中找到它的定义, 最新版的 typescript (2.9) 已经包含了大部分, 没有包含的我会特别指出. Partial 作用是将…"}, {"id": "6994038108543156238", "title": "TypeScript学习之Utility Types", "desc": "TS在全局内置了很多`Utility Types`，可以极大的提高我们开发效率。所以本文就是详细介绍、理解、掌握。"}, {"id": "6936083986644992013", "title": "Deno 1.8 正式发布：支持 WebGPU API、deno lsp 现在进入了稳定状态", "desc": "今天我们正式地发布了 Deno 1.8.0 版本。我们在这个版本中添加了大量的新功能，也同时优化了它的稳定性： 对 WebGPU API 的实验性功能支持：提供在 Deno 中开箱即用的使用 GPU 去加速机器学习的路径。 内置国际化 API 的启用：所有的 JS Intl A…"}, {"id": "6927159742359928845", "title": "【译】React+TypeScript 最佳实践", "desc": "React和TypeScript是现在很多开发者都在使用的两种很棒的技术。寻求做事的方法会变得很棘手，有时很难找到正确的答案。不要担心。我们将最佳实践与示例结合在一起，以澄清您可能存在的任何疑问。 在我们开始之前，让我们先回顾一下React和TypeScript是如何一起工作的…"}, {"id": "7007721214017798151", "title": "21条-总结typescript基础知识", "desc": "一、TypeScript 基础语法 1、typescript定义 TypeScript是JavaScript的超集，主要提供可选的静态类型，类和接口。其中一个重要好处是使IDE能够在您键入代码时提供更"}, {"id": "7007606687745966093", "title": "来玩TS吗，机都给你开好了", "desc": "实现 Pick 实现 TS 内置的 Pick<T, K>，但不可以使用它。 从类型 T 中选择出属性 K，构造成一个新的类型。 例如： 答案： 实现 Readonly 不要使用内置的Readonly，"}, {"id": "7008043042280046599", "title": "setTimeout() 函数的TypeScript返回类型是什么", "desc": "在TypeScript项目中，常常会用到setTimeout()函数，比如设置等待时间之后显示目标内容。setTimeout的返回类型是什么呢"}, {"id": "7007617841817976869", "title": "如何在TypeScript项目中使用ESLint", "desc": "ESLint是一个十分优秀的JavaScript代码检查工具，我们可以用ESLint来检查TypeScript和JavaScript代码。这篇文章我将一步一步展示如何在项目中使用ESLint来检查代码"}, {"id": "7007731144418394149", "title": "Vue3 + TSX 最佳实践？不存在的", "desc": "本文是《Vue3 + TS 最佳实践 》的补充篇，尝试通过使用 JSX 来达到 Vue3 与 TS 的完美配合。但是……"}, {"id": "7007982161814880269", "title": "深入理解Typescript中的extends关键字", "desc": "前言 extends关键字在TS编程中出现的频率挺高的，而且不同场景下代表的含义不一样，特此总结一下： 表示继承/拓展的含义 表示约束的含义 表示分配的含义 基本使用 extends是 ts 里一个很"}, {"id": "7007732766456414244", "title": "在 TypeScript 中如何正确使用 interface 和 type ", "desc": "在 TypeScript interface 更偏于一种类型 shape，同时 TypeScript 也提供了 type 用于定义类型，其实 interface 和 type 在 TypeScript"}, {"id": "7007998827038769159", "title": "typescript学习笔记【第二课】类型系统", "desc": "TS 的核心部分就是类型系统 类型注解使用 :TypeAnnotation 语法。在类型声明空间中可用的任何内容都可以用作类型注解。类型声明关键字 interface type class 类声明的空"}, {"id": "6999440503712251935", "title": "还不会TS？ 带你 TypeScript 快速入门", "desc": "TS现在使用地越来越多，学计算机的就得不断的学习，才能更好的追逐这个时代，这是小浪以前学习TS时候的总结，能快速的帮助大家入门 TS,希望对大家有所帮助"}, {"id": "7000610903615864869", "title": "连夜爆肝只为将它送到你的面前，写给初级前端快速转TypeScript指南", "desc": "哈喽，今天给大家带来的是TypeScript教程，希望看完本文你有不一样的收获，谢谢支持，欢迎来踩。"}, {"id": "7003171767560716302", "title": "重学TypeScript", "desc": "前言 不做笔记不学习 一个线上的TypeScript练习地址：TypeScript Playground 为什么要有 TypeScript TypeScript是JavaScript的超集，因为它扩展"}, {"id": "6994102811218673700", "title": "Ts高手篇：22个示例深入讲解Ts最晦涩难懂的高级类型工具", "desc": "深入讲解Typescript高级类型工具实现原理和编程技巧。全程干货、不扯闲篇，助你轻松实现Ts进阶。"}, {"id": "7000109529757122590", "title": "关于TypeScript开发的6个小技巧", "desc": "本文总结一下使用TypeScript开发应用程序的经验。说之前，推荐一个VSCODE立即执行TS代码的插件quokka.js, 使用方式，ctrl+shipt+p,输入关键字quokka 回车之后，输"}, {"id": "7007260822736994340", "title": "Typescript工程化", "desc": "Typescript工程化，学习总结：模块系统、tsc编译、babel编译、webpack工程、tsconfig配置项。"}, {"id": "6998334271538593828", "title": "基于Typescript和Axios的接口请求管理", "desc": "“这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战” 本文主要介绍基于TS和AXIOS的接口请求封装 思路 请求拦截 在请求头添加一些参数，例如token,uid等 判断用户登录状态，如果"}, {"id": "7006526195420364836", "title": "iTerm2 + oh-my-zsh + powerlevel9k 打造你喜欢的编码终端", "desc": "辛勤动手之后收获的美好往往才能给自己极大的满足感，动手用iTerm2 + oh-my-zsh + powerlevel9k 打造你喜欢的编码终端吧，让你的编程更加心情愉悦"}, {"id": "7006304933813157919", "title": "TS系列篇｜基础数据类型 和 类型推论及断言", "desc": "在开始之前先了解一个概念 1、数字类型（number） 除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。 2、字符串类型（stri"}, {"id": "7006482612306837534", "title": "TS系列篇｜类(class) ", "desc": "类（Class）定义了一件事物的抽象特点，包含它的属性和方法 1、定义类 在 TypeScript 中，我们也是通过 Class 关键字来定义一个类, 使用 constructor 定义构造函数。 2"}, {"id": "6992233443585163300", "title": "Vue DevUI 已经有10个组件成员啦～🥳😋", "desc": "3个月之前，我们在掘金发了一篇文章，正式发起了 Vue DevUI 项目。让我们一起建设 Vue DevUI 项目吧！🥳 很快就有不少热爱开源的小伙伴参与进来，于是我们迅速成立了Vue DevUI 核"}, {"id": "7006480910933557255", "title": "TS系列篇｜接口(interface)  和 类型别名(type)", "desc": "接口一方面可以在面向对象编程中表示为 行为的抽象, 另外也可以用来描述 对象的形状 一、接口 1、接口的使用 interface 中可以用分号或者逗号分割每一项，也可以什么都不加 1.1 对象的形状 "}, {"id": "6972342025832103950", "title": "构建 Typescript 知识体系(五)- 泛型的类/接口/函数", "desc": "这是我参与更文挑战的第十一天，活动详情查看:更文挑战 背景: 很多时候，我们希望一个函数或者类可以支持多种数据类型 栗子， 一个打印函数的改造: 函数会返回任何传入它的值 1.改造为接受一个数组参数 "}, {"id": "6953518863560638495", "title": "TypeScript在React项目中的使用总结", "desc": "序言 本文会侧重于TypeScript（以下简称TS）在项目中与React的结合使用情况，而非TS的基本概念。关于TS的类型查看可以使用在线TS工具👉TypeScript游乐场"}, {"id": "6954188375263969287", "title": "快速摸一个 Ant design vue 项目", "desc": "用 ant-design-vue 和 Vue 摸一个 pro 项目，是从0-100的应有尽有的搭建过程。"}, {"id": "6999265176239210509", "title": "TS基础知识（二）", "desc": "面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成"}, {"id": "6967679826568151048", "title": "0基础入门TypeScript", "desc": "TypeScript是可扩展的JavaScript。兼容js，具有es6-es10的语法支持，能够兼容各种浏览器，使用ts能够减少代码错误，能够使程序更容易理解和维护,提高开发效率"}, {"id": "6844903702462119950", "title": "仿有赞后台+vue+ts+vuecli3.0+elementUi+二期项目结构文件搭建+以及路由的使用", "desc": "前言昨天写了vue+ts+vuecli3.0第一场主要是一个vuecli搭建的内容，今天讲一下vue项目结构搭建+以及路由的使用，看了一个小伙伴$refs报错问题有大佬可以回复我一波困扰已久，伸手党本"}, {"id": "6995477522561368078", "title": "ts中的装饰器", "desc": "类修饰器 不传入参数 执行结果： 传入参数 执行结果： 类修饰器重载构造函数 执行结果为： 属性修饰器 运行结果为： 方法修饰器 输出结果为： 方法修饰器修改方法 运行结果： 参数修饰器 输出结果为："}, {"id": "6926432698139590670", "title": "为什么说 TypeScript 是开发大型前端项目的必备语言", "desc": "可能很多软件工程师都或多或少知道或了解 TypeScript（简写 TS），使用过 TypeScript 的前端开发者们也出奇一致的对 TypeScript 抱有好感。如果你在搜索引擎里搜索 TypeScript，会发现几乎铺天盖地都是称赞或表扬 TS 的文章，例如 《Type…"}, {"id": "6844904034621456398", "title": "Typescript 书写声明文件（可能是最全的）", "desc": "对于为第三方模块/库写声明文件之前，我们需要知道第三方模块/库，是否需要声明文件，或者是否已有声明文件。 在书写声明文件之前，我们需要了解Typescript 相关知识， 可以自行查阅官方文档，或阅读我前一篇TypeScript 总结篇， 当然有需要写声明文件的需要，肯定是对T…"}, {"id": "6985018463039258637", "title": "typescript 聚焦业务开发，试着写一写", "desc": "typescript 在业务的使用，更加聚焦业务开发本身。如：用户登录，数据列表，详情页面，安全信息，分析图表，按照数据类型抽象出来，我们一起试着写一写。"}, {"id": "6994236609138786335", "title": "我的一份Ts入门清单", "desc": "目录： 基础泛型 基本类型守卫 分布式条件类型 infer关键字初试 基础递归 键名组成的联合类型 简单模版 合并、互斥泛型 基础泛型 基本类型守卫 类型判断：typeof 实例判断：instance"}, {"id": "6989065442044149790", "title": "didi  新手指南之TypeScript", "desc": "TypeScript 引言 TypeScript是微软开发的一个开源的编程语言，通过在JavaScript的基础上添加静态类型定义构建而成。TypeScript通过TypeScript编译器或Babe"}, {"id": "7003291588550098975", "title": "TypeScript语言", "desc": "一、TypeScript 概述 TypeScript 是一门基于 JavaScript 之上的编程语言，它重点解决了 JavaScript语言自有类型系统的问题；通过使用TypeScript的语言可以"}, {"id": "6844904111603744776", "title": "Typescript落地和代码自动化——前端稳定性和研发效率精进", "desc": "钉钉业务体量已达亿级，钉钉技术的服务端、客户端等的数据模型和接口已达到极高的复杂度。面对多样的客户端和技术栈IO环境，我们采用了IDL(interface description language)来描述多端数据通信的约定，以收敛业务复杂度带来的维护风险。 对于前端来说，容器环…"}, {"id": "6844903687563771918", "title": "巧用 TypeScript （一）", "desc": "它也适用于参数不同，返回值类型相同的场景，我们只需要知道在哪种函数类型定义下能使用哪些参数即可。 在这个 test 函数里，我们的本意可能是当传入参数 para 是 User 时，不传 flag，当传入 para 是 number 时，传入 flag。TypeScript 并不…"}, {"id": "6991147126197583909", "title": "TypeScript学习 --- 其它内容补充｜ 8月更文挑战", "desc": "在开发中不可避免要引用其他第三方的 JavaScript 的库。通过直接引用可以调用库的类和方法，却无法使用TypeScript中类型检查等特性。为了解决这个问题，我们需要为对应库编写类型声明文件。"}, {"id": "6983497669016551461", "title": "TypeScript简洁学习笔记 By Ksanars (更新中)", "desc": "简单的TypeScript教程，来自于自己看书看网课后的总结与思考，适合快速入门和了解TypeScript。"}, {"id": "6979478595483729957", "title": "原来TS的泛型如此好用😁😌", "desc": "在前端开发中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。这时候ts的泛型就起"}, {"id": "6972357401504645128", "title": "15 个提高开发效率的 TypeScript 小技巧", "desc": "TypeScript 相信大家都见的很多了，但总有些时候不知道类型怎么写才能不报错 有时候你满脑子疑惑“哈？这都能报错？我写的明明是对的啊，到底该怎么写？” 来看看下面的小技巧吧，总有一个能提高你的效"}, {"id": "6982433501802921991", "title": "【study】Typescript进阶之路", "desc": "一.Typescript的安装 npm/cnpm安装 yarn安装 二.实现一个简单的'你好 ts' 目录结构 2. 实现一个简单的'你好 ts' ts变成js的手动输入命令 $\\color{red}"}, {"id": "6844903863082844174", "title": "TypeScript 学习总结 基础数据类型（一）", "desc": "因为typescript文档个人感觉写得不好(概念过于杂乱，示例代码有错误~)。所以总结一下TS的知识 这是个人学习笔记总结，并没有官方文档严谨。更多的是个人的大白话 代码部分 推荐各位复制到支持TS的代码编辑器里 看看什么效果。体验一下 TS在编译阶段的严谨~~ 除了规定了变…"}, {"id": "6911679290140524552", "title": "TypeScript学习笔记（四）- 函数", "desc": "在JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式。 输入和输出均为number类型。 此时sum的类型并没有做明确的约束，只是通过约束等号右边，推断出来的。如果我们手动给sum加类型，完整函数类型如下： …"}, {"id": "6844903827489947662", "title": "TS学习笔记（四）：函数", "desc": "函数是 JavaScript 应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。 TypeScript 为 JavaScript 函数添加了额外的功能，让你可以更容易地…"}, {"id": "6948307594859511845", "title": "TypeScript 入门笔记（二）", "desc": "基础篇TypeScript 入门笔记（一）进阶篇1. 类型别名2. 字符串字面量类型3. 元组数组合并了相同类型的对象，而元组合并了不同类型的对象。元组起源于函数编程语言（如 F#），这些语言中会频繁"}, {"id": "6913525278505435143", "title": "如何理解 TS 中的类型 | 创作者训练营", "desc": "上一篇如何理解 TS 中的静态类型检查 讲解了 TS 的核心作用，这篇我们从 TS 类型说起。 TS 中的类型由三部分组成，JS 中原有的类型，TS 扩展的类型，以及新增加的函数返回类型。 细心的朋友可能会发现，我们没有提及 Object 类型。官网上对 Object 类型解释…"}, {"id": "6844903560283422727", "title": "[译] 你为啥还不用TypeScript？", "desc": "在如今这个编程世界中，JS似乎已经成了最受欢迎的语言。加上Nodejs，我们有了后端编程的能力；加上Electron，我们有了桌面应用的能力；加上React Native，我们有了在手机上近似于原生的体验。毫无疑问，JS已经渗透到很多技术生态当中了。 首先我想说的是：如果你还没…"}, {"id": "6844904095497584647", "title": "《前端之路》- TypeScript(二) 函数篇", "desc": "在 Java 中 定义的同名重载函数，会根据传入数据类型的差异，直接执行对应的函数，但是 ts 不会。 在 ts 中，即使定义了重载函数，编译成 ES5 以后，还是只剩下一个对应函数的判断。这里我们只做一个简单的了解，在前端写 JS 的时候还是需要注意命名空间和命名重叠的问题。"}, {"id": "6844903535373467661", "title": "【译】如何用 TypeScript 玩转后端？", "desc": "我将从一个开发者的角度介绍几个优秀的库。它们可以满足你后端应用的绝大部分特性。装饰器和元数据的能力在这些库中得到的充分的应用，使其非常强大并且简单易用。 我希望这篇文章可以帮到像我这样，喜欢 TypeScript 而且想用它编写后端代码的人，让他们像我一样发现这些库之后乐在其中…"}, {"id": "6844903618043183118", "title": "Vue2.5+ Typescript 引入全面指南", "desc": "Vue2.5+Typescript引入全面指南-Vuex篇系列目录：Vue2.5+Typescript引入全面指南Vue2.5+Typescript引入全面指南-Vuex篇前言Vuex正是我下决心引入"}, {"id": "6844903704773001230", "title": "TypeScript 基本类型和泛型的使用", "desc": "元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为 string 和 number 类型的元组。 enum 类型是对 JavaScript 标准数据类型的一个补充。像 C#等其他语言一样，使用枚举类型可以为一组数值赋予友好的名字。 …"}, {"id": "6844903929436700679", "title": "TypeScript入坑指南（一）", "desc": "近年来，Ts在前端的热门程度越来越高，尤大大也说了vue3.0版本对Ts的支持会更友好（从原来的flow转向Ts，真香），学习Ts，理解Ts，也是前端必不可少的一个趋势。下面就来了解一哈，首先是最基本的疑问三连，Ts是什么？它有什么作用？我们为什么要用它？ 简单来说，TypeS…"}, {"id": "6844903608538890253", "title": "lenneth -- 基于koa2 的web极简框架", "desc": "封装 lenneth 旨在快速方便的搭建出一个 node web 应用，不过度封装也不随波逐流，koa 的 node 是简单的，lenneth 也是。 基于 ES6+typescript 的一些特性，做了一些类似 spring 的注解，对开发本身不增加复杂度，并且不失 koa …"}, {"id": "6935699900134850568", "title": "TypeScript 入门1：创建一个在Chrome上运行的TypeScript Demo", "desc": "概述构建环境vscode：1.53.2chrome：87.0.42.80.141Node.js：12.8.3win10具体步骤第一步：创建工程第二步：创建目录和相关文件目录结构效果具体内容如下：hel"}, {"id": "6844903725081821197", "title": "静态类型在 JavaScript 中是一种负担吗？", "desc": "最近我在公司的项目中遇到很多由于类型不匹配所导致的不可预估的问题。比如说，我们的程序产生了一个纯数字的 unique id, 存到数据库中被识别为 number 类型，但是客户端需要的是字符串，导致一条数据在没有办法在客户端正常显示。 我年轻的时候曾经是一位动态类型的忠实拥趸，…"}, {"id": "6844903582391599118", "title": "[译] 你真的知道 Angular 单向数据流吗", "desc": "大多数架构模式是很难理解的，尤其是在相关资料很少时那就更加头疼，比如 Angular 的单向数据流（unidirectional data flow）文档资料就很少，即使官方文档上，也仅仅在 表达式指南 和 模板表达式 两小块中略有提及。我也很少在网上搜到比较好的解释文章，所以…"}, {"id": "6917963728189308942", "title": "学习记录-week3（TypeScript）", "desc": "本周的主要任务是过完 TypeScript 的基础知识。因为 TypeScript 不是我想要分享、学习的重点，我们仅仅是为了利用 TypeScript 来养成一个良好的编码习惯，所以过的会快一些。 另外， TypeScript 的基础知识网上有非常多的教程，想要深入学习的同学…"}, {"id": "6844903810020671501", "title": "TypeScript 简明教程：基本类型（二）", "desc": "上一篇文章 基本类型（一）中，我们介绍了原始数据类型和其他几个 TypeScript 新引入的基本类型。这篇文章将会继续介绍剩下的几个基本类型，包括：列表（array）、元组（tuple）、对象（object）、字面量（literal）和枚举（enum）类型。 TypeScri…"}, {"id": "6844903922516099086", "title": "TypeScript入门-为什么要学TS（二）", "desc": "在未来前端应用会越来越复杂，ts是特别适合开发大型复杂项目的。并且适合开发js基础库或者框架的。我们知道的很多大型项目就是用ts编写的，比如： 现在很多大公司的前端团队都在陆续的往ts转型。如果掌握这门技术，对面试这些大公司就有很好的竞争力。 越来越多的知名项目在向ts转型，如…"}, {"id": "6844904089633947661", "title": "前端深入理解TypeScript装饰器（Decorators）概念", "desc": "装饰器是TypeScript提供的最强大的功能之一，它使我们能够以干净的声明性方式扩展类和方法的功能。装饰器目前是JavaScript 的第2阶段提议，但在TypeScript生态系统中已受到欢迎，主要的开放源代码项目（例如Angular）正在使用装饰器。 本人工作中是使用An…"}, {"id": "6844903901531996167", "title": "了不起的Virtual DOM(二): 使用TypeScript开发简易Virtual DOM库", "desc": "首先欢迎大家关注、点赞、收藏我的掘金账号和Github博客，也算是对我的一点鼓励，毕竟写东西没法获得变现，能坚持下去也是靠的是自己的热情和大家的鼓励。之前的文章我们介绍了MV*框架的历史以及React引入Virtual DOM所带来的新的解决思路，俗话说，百闻不如一见，百见不如…"}, {"id": "6950522097483399176", "title": "Vue2 核心成员战斗力：几天内把 Flow 重构为 TypeScript！", "desc": "尤雨溪在推特说，Vue2 收到了一个将整个代码库迁移到 TypeScript 的 PR，一起来看看怎么回事儿。"}, {"id": "6844903865255477261", "title": "Vue3.0 前的 TypeScript 最佳入门实践", "desc": "其实Vue官方从2.6.X版本开始就部分使用Ts重写了。 我个人对更严格类型限制没有积极的看法，毕竟各类转类型的骚写法写习惯了。 1. 使用官方脚手架构建 新的Vue CLI工具允许开发者 使用 TypeScript 集成环境 创建新项目。 只需运行vue create my-…"}, {"id": "7005450507531583525", "title": "Vuex4 typescript 中自动将modules的类型添加到state中", "desc": "在vuex4中使用typescript的时候，用模块modules时，如果不做一些处理，用Hooks获取store然后取子模块的state会丢失类型。 首先需要参照vuex4.0中使用typescri"}, {"id": "6990543774552162340", "title": "Vue 2 落地 TypeScript 指南", "desc": "自古以来，Vue 2 对 TypeScript 的支持能力一直为人诟病。但自从 Composition API 面世后，病情已经大为好转。本文介绍如何在 Vue 2 项目中像 Vue 3 一样编码。"}, {"id": "6997465633432535047", "title": "Typescript 类型的本质是什么", "desc": "类型 类型指的是变量的类型，而变量是一块内存空间，不同类型的变量会占用不同的字节数，而且可以做的操作也不同。number、boolean、string 等类型的变量会占用不同的内存大小。 类型分为基础"}, {"id": "6876240277208563720", "title": "技术胖的 TypeScript免费视频图文教程（2W字）", "desc": "00. B站视频观看地址 出这个教程也是为了迎接Vue3的推出，今晚更新最后一集视频后，开始更新Vue3视频。 我原本准备更新 Vue3.x 教程的，由于官方文档一直不出，我又不敢瞎讲，所以干脆先来一个 TypeScript 教程热身，TypeScript 已经在我们公司全面使…"}, {"id": "7000557971159646244", "title": "Typescript 凭什么可以和 JavaScript 并肩作战(5)—类成员变量可见性和静态成员变量", "desc": "TypeScript通过对类成员变量的添加不同修饰符来控制类成员变量在类内部和类外部访问。学过 Java 或者其他支持面向对象语言的应该对 public protected 和private 不会陌生"}, {"id": "7001060484677894158", "title": "TypeScript 快速指南", "desc": "TypeScript 可以让我们开发中避免一些类型或者一些不是我们预期希望的代码结果错误。TypeScript 错误直接是在编辑器里告知我们的，这极大的提升了开发效率."}, {"id": "6994376794073727007", "title": "📧叮~你有一份 DevUI 12 新版本待查收~😋", "desc": "DevUI是面向企业中后台产品的开源前端解决方案，其设计价值观基于\"至简\"、\"沉浸\"、\"灵活\"三种自然与人文相结合的理念，旨在为设计师、前端开发者提供标准的设计体系，并满足各类落地场景，是一款企业级开"}, {"id": "7002494139153530917", "title": "Typescript 理解Conditional Types", "desc": "如何用类型系统实现JS中的filter？看到最后你就会了。Typescript真难，类型体操是真滴好玩。"}, {"id": "7000166301054271502", "title": "Typescript 凭什么可以和 JavaScript 并肩作战(F)—提升类型的复用的 look up", "desc": "今天介绍一下 look up 功能，翻译过来是搜索意思，也就是在现有类型通过搜索方式来得到一个新的类型。这样做的好处是什么，也就是我们为什么需要 look up 功能，很简单就是避免定义过多类型。"}, {"id": "6910863689260204039", "title": "🔖TypeScript 备忘录：如何在 React 中完美运用？", "desc": "一直以来，ssh 身边都有很多小伙伴对 TS 如何在 React 中运用有很多困惑，他们开始慢慢讨厌 TS，觉得各种莫名其妙的问题降低了开发的效率。 其实如果运用熟练的话，TS 只是在第一次开发的时候稍微多花一些时间去编写类型，后续维护、重构的时候就会发挥它神奇的作用了，还是非…"}, {"id": "7003148571717402632", "title": "TS 小册 ｜ 一些些关键字和工具类型", "desc": "本文记录 TS 一些工具类型的实现 源码约在 `typescript/lib/lib.es5.d.ts` 1468 行处开始 在阅读这些工具类型的实现时 需要先了解一些 TS 中的关键字"}, {"id": "7007619764763754504", "title": "Tapable学习笔记", "desc": "webpack事件机制是由tapable库实现的 tapable提供了同步和异步的钩子，通过tap、tapAsync、tapPromise注册事件，call，callAsync，promise执行事件"}, {"id": "6992492282385694756", "title": "为了偷懒，我们做了Yapi生成Typescript接口请求工具", "desc": "​ 最近为了走协议先行的开发模式，加快开发效率。从swagger迁移到yapi，所以抛弃了之前使用的Pont。懒得每次都手写接口请求方法和接口的声明文件🐶，实现了从Yapi生成Typescript。"}, {"id": "7000360236372459527", "title": "TypeScript的另一面：类型编程（2021重制版）", "desc": "前言 作为前端开发的趋势之一，TypeScript 正在为越来越多的开发者所喜爱，从大的方面来说，几乎九成的框架与工具库都以其写就（或者就是类似的类型方案，如 Flow）；而从小的方面来说，即使是写个"}, {"id": "6844904184894980104", "title": "一文读懂 TypeScript 泛型及应用（ 7.8K字）", "desc": "软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。 在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型…"}, {"id": "6996923383355015205", "title": "DevUI Admin 2.0 重磅发布！🥳", "desc": "DevUI是面向企业中后台产品的开源前端解决方案，其设计价值观基于\"至简\"、\"沉浸\"、\"灵活\"三种自然与人文相结合的理念，旨在为设计师、前端开发者提供标准的设计体系，并满足各类落地场景，是一款企业级开"}, {"id": "7006598365203054605", "title": "使用vite-vue3-ts快速上手做一个todolist", "desc": "使用vite-vue3-ts快速上手做一个todolist Gitee：https://gitee.com/heyhaiyon/vite-vue3-ts-todolist.git"}, {"id": "7001417997600423949", "title": "Typescript 凭什么可以和 JavaScript 并肩作战(6)—聊一聊 this 的问题", "desc": "在 JavaScript 有关 this 问题，一直以来也是面试官喜欢问的一个问题，特别是 this 的指向问题，所以今天我们就聊一聊在 TypeScript 中类和方法中 this 指向问题。"}, {"id": "6844903975595016200", "title": "Typescript 强化数据结构", "desc": "左子树的右节点和右子树的左节点相同。 右子树的左节点和左子树的右节点相同。 类似于 React 16 的 Fiber Node 连接而成的 Fiber Tree ，就是个单链表结构。 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。 反转从位置 m 到 n 的链表…"}, {"id": "6844903591086391304", "title": "在 Typescript 中使用可被复用的 Vue Mixin", "desc": "转到用 Typescript 写 Vue 应用以后，经过一轮工具链和依赖的洗礼，总算蹒跚地能走起来了，不过有一个很常用的功能 mixin，似乎还没有官方的解决方案。 既想享受 mixin 的灵活和方便，又想收获 ts 的类型系统带来的安全保障和开发时使用 IntelliSens…"}, {"id": "6976438840684707870", "title": "TypeScript上手05 interface的理解和使用再也不用担心了", "desc": "interface 这是我参与更文挑战的第8天 ts中的interface是一个很基本的概念,我们在使用过程中必须熟练掌握,本文将举例说明其使用"}, {"id": "6844903869546233863", "title": "[vue中使用typescript] 超实用教程", "desc": "VueConf，尤大说，Vue支持Ts了，网上关于Vue+Ts的资料有点少，楼主踩了一个星期坑，终于摸明白了修饰器的玩法，下面我们就来玩下Vue的decorator吧1，data值的声明在这里publ"}, {"id": "6986660174366769183", "title": "TypeScript 命名空间", "desc": "使用命名空间可以防止全局污染 命名空间是可以分布在不同文件中，相同名称的 namespace 共享同一个命名空间。 以下面代码为例，b.ts 中可以使用 Shape.square() 调用到 a.ts"}, {"id": "6888848965731778567", "title": "TypeScript魔法堂：枚举的超实用手册", "desc": "我敢保证，前端的同学都会万分肯定地告诉大家：我们从来没有写过枚举。那是因为虽然ECMAScript将enum作为保留字，但至ES2020为止还没有提出枚举的实现规范。语言没有提供规范和语言实现，不代表思想活跃勇于造轮子的程序员们不会自己撸一个。 首先，枚举字面上的意思就遍历一个…"}, {"id": "6844903649420771342", "title": "JS之父和JSON之父：JavaScript的下一站", "desc": "7 月 11 日，FullStack 2018 在伦敦举行，JavaScript 之父 Brendan Eich 和 JSON 之父、“JavaScript：The Good Parts”的作者 Douglas Crockford 一同出席，并就 JavaScript 的未来发…"}, {"id": "6961669154038349854", "title": "TypeScript 入门（一）", "desc": "一、TypeScript TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准，是一种给 JavaScript 添加特性的语言扩展（增加的功能在后文会讲）。"}, {"id": "6979412028985180196", "title": "TypeScript笔记——枚举", "desc": "枚举是个不错的语法，有利于代码阅读与维护，而在js中没有枚举这个语法，现实际项目已全面拥抱ts，方便以后查找，故整理ts中枚举使用语法，"}, {"id": "6844903998852431885", "title": "typescript 3.7 中值得注意的 3 个新特性", "desc": "距 typescript 3.7 正式发布已经有一段时间了，这段时间正在对手上的项目进行 typescript 的迁移工作，所以会特别留意每一次的 release。 对于 3.7 中包含的新特性，其实相比较之前几次 release 来说，算是一个比较小的发布版本，但是其中包含的…"}, {"id": "6912960680257667079", "title": "如何理解 TS 中的静态类型检查  | 创作者训练营", "desc": "一句话，TS 是 JS 的超集，增加 JS 没有的静态类型检查。体现在 TS 既支持 ES 最新的语言规范，又集成了 JS 在社区的一些新特性。 TS 最最最最大的特性是：静态类型检查 / 数据类型预测 。 理解 TS 一定要理解静态类型检查在干啥，解决了什么问题，否则可能会陷…"}, {"id": "6883011755434475534", "title": "TypeScript装饰器完全指南", "desc": "装饰器让TypeScript的世界更好。 例如Angular和Nestjs。 在这篇博客中我将介绍装饰器和它的许多细节。 我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。 所以应用装饰器其实很像是组合一系列函数，类似于高阶函数和类。 通过装饰器我们可以轻松实现代…"}, {"id": "6981793337812451335", "title": "【沉浸式学习】一起学习Typescript的第一天--10分钟上手TypeScript", "desc": "这是我参与新手入门的第1篇文章！！！ 双双碎碎念： 咳咳咳，看到沉浸式标题应该会有猜想叭，什么是沉浸式学习呢？就是此刻你们正在本人特意营造的学习氛围中。所以呢，在阅读本文十分钟内不许回复微信哦"}, {"id": "6903083469719633928", "title": "TypeScript(五) —— 类型知识补充", "desc": "之前讲语法，觉得这些既属于语法，但是不是特殊的类型，一时间不知道怎么分类，所以就做为类型补充知识。 隐式类型推断 ： 如果我们没有明确通过类型注解去标注这个变量的类型，那么TypeScript根据一些可以推断出这个类型。 如果我们没有设定类型，赋值了一个数字，那么会推断这个为n…"}, {"id": "6844904031643664397", "title": "# 为什么 Babel 要支持编译 TypeScript", "desc": "目前 TypeScript 的编译有两种方式。一种是使用 TypeScript 自家的编译器 typescript 编译（我们后面会用统一称为 TS 编译器），一种就是使用 Babel + @babel/preset-typescript 编译。所以，当我们使用 TypeScr…"}, {"id": "6844904071892058119", "title": "手写一个 typescript 打包器", "desc": "halo，大家好，我是132，那个啥，俺又出来诈尸啦这次带来的是一个ts打包器的主要思路，最终实现代码先放一下https://github.com/yisar/picopack欢迎star和fork！"}, {"id": "6993297998339915789", "title": "TypeScript系列 --- 类", "desc": "传统的JS程序使用函数和基于原型的继承来实例对象，这对于熟悉使用面向对象方式的程序员有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。但从ES6开始，JS程序员也可以使用类来创建实例对象。"}, {"id": "6913492272738729998", "title": "TypeScript学习笔记（七）- 类与接口", "desc": "TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 public、private 和 protected。 上面的例子中，name 被设置为了 public，所以直接访问实例的 name 属性是允许的。 TypeScript 编译之后的代码…"}, {"id": "6997946703877767175", "title": "在TypeScript中异步/等待", "desc": "这是我参与8月更文挑战的第7天，活动详情查看： 8月更文挑战 如果您正在阅读此博客，您可能对JavaScript中的异步编程有些熟悉，并且您可能想知道它在TypeScript中是如何工作的。 由于Ty"}, {"id": "6844903623684538375", "title": "让前端的子弹飞-TypeScript", "desc": "本文开篇同时引用了编程界大牛和菜鸟的语录来\"大肆\"宣扬前端的地位，不，不止于前端，我们的真正名字应该叫JavaScript开发者，“前端”是历史遗留下的误解，亦或是在工作岗位中被局限于的小小领域。 那么2007年提出震惊中外的“Atwood定律”的Jeff Atwood何许人也…"}, {"id": "6986900400758603784", "title": "使用TypeScript实现IoC设计模式", "desc": "IoC的概念 IoC（Inversion of Control）称为 控制反转，是基于 依赖倒置 的设计模式。就是面向接口编程而不是面向实现编程，将所依赖的底层功能模块注入到高层模块中"}, {"id": "6971663559080181790", "title": "再谈泛型-约束关系", "desc": "本系列作为《TypeScript 入门实战笔记》课程（见拉勾教育）的补丁，随时更新。 约束关系 这篇文章源于与同事的关于泛型类型推断的讨论，如下示例所示（playground）： 如第 10 讲泛型里"}, {"id": "6975095716935008286", "title": "TypeScript ｜ 泛型(Generic)", "desc": "软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。 初识泛型 之所以使用"}, {"id": "6979129206860939300", "title": "05-TS的泛型", "desc": "TS基础--泛型。01-泛型 02-多个泛型的参数 03-泛型接口 04-泛型类 05-泛型的约束 凑字数"}, {"id": "6844904162287681549", "title": "使用 TypeScript 快速开发 Serverless REST API", "desc": "这是一个对于 AWS Lambda Functions 的简单 REST API 项目，使用 TypeScript 语言编写，数据存储采用 MongoDB Atlas 云数据库，从编码到 AWS Lambda 下的单元测试，再到部署、日志调试完整的介绍了如何快速编写一个 Faa…"}, {"id": "6916779372238077960", "title": "typescript之接口", "desc": "ts接口主要用来定义一个对象的类型，通过interface关键字来定义简单的例子：属性可选有些时候我们不确定对象的某个属性是否存在，这时候就需要将该属性设置成可选属性只读属性字面上的意思，如果某个属性"}, {"id": "6862627423289245709", "title": "Typescript+Vue体验与总结", "desc": "TypeScript是 JavaScript 的超集，就是在 JavaScript 上做了一层封装，封装出 TypeScript 的特性，最终代码可以编译为 JavaScript。 TypeScript 的核心就是静态数据类型。在js中，我们定义函数时并不会去声明他的参数类型或…"}, {"id": "6925054242138882062", "title": "Typescript —— 函数和泛型", "desc": "函数基本使用可选参数缺省参数函数重载泛型泛型约束"}, {"id": "6932158781677633550", "title": "TypeScript for React (Native) 进阶", "desc": "这文章在19年11月发过, 但后来在掘金就找不到了. 只好再重发一次. I. 为何要用TypeScript 我们公司在德国还有个团队. 我们这次要接他们的一个库. 其中的一个API要求我们传入参数, 这个API是这样定义的: 看到这样的代码, 我是崩溃的. 这个input是个O…"}, {"id": "6923854749729046542", "title": "TypeScript Mixin 混入", "desc": "TypeScript 不支持多重继承，这意味着一个类只能继承自一个类，因为他会潜在地增加程序的复杂性。 倘若，在支持多继承的环境下，一个子类所继承的两个父类都拥有一个同名的方法，子类在调用父类方法的时候，哪一个父类的方法被调用是不清楚或者说是有歧义的。 但是，有时候，我们会认为…"}, {"id": "6910464536164171784", "title": " TS是最好的语言（一）", "desc": "前言都快2021年了,TS早就不是什么新技术，而是前端需要掌握的硬核知识，所以今天就从一些库入手开始探究TS的应用以及一些小技巧看本篇文章之前需要的一些基础知识：JS基础知识熟悉react-route"}, {"id": "6844904051352698894", "title": "TypeScript三部曲之基础篇", "desc": "TypeScript是JavaScript的超集，为JavaScript赋予了强类型语言的特性。在项目中使用TypeScript能够将错误提前暴露在开发阶段，并且TypeScript除保留JavaScript原有特性外还增加了很多强大的特性，如：接口、泛型、类等等，为开发带来了…"}, {"id": "6844903624665989127", "title": "在node中使用ts的compilerOptions.paths的简单姿势", "desc": "这样即能正确运行，又能正确的deubg。"}, {"id": "6844903591438893070", "title": "[译] Angular DOM 更新机制", "desc": "由模型变化触发的 DOM 更新是所有前端框架的重要功能（注：即保持 model 和 view 的同步），当然 Angular 也不例外。定义一个如下模板表达式： 当每次 name 值发生变化时，Angular 会神奇般的自动更新 DOM 元素（注：最上面代码是更新 DOM 文本…"}, {"id": "6844903930497859592", "title": "TypeScript 入门系列 | TypeScript 基础（二）", "desc": "这节介绍 TypeScript 里的类型推论。即，类型是在哪里如何被推断的。 当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。 为了推断x的类型，我们必须考虑所有元素的类型。 这里有两种选择： number和null。 计算通用类型算法会考…"}, {"id": "6917897863947255816", "title": "TypeScript 类型声明 与 进阶", "desc": "当对变量的声明和赋值同时进行时，TS 编译器会自动判断变量的类型，因此当声明和赋值同时进行的时候，可以省略掉类型声明。 指定 String 类型，同样也只能赋值字符串类型的值，如果赋其它类型的值，也会报错。 当我们给 a 直接字面量赋值的时候，a 的值只能是初始赋值的那个值，如…"}, {"id": "6861185929426223118", "title": "如何利用 Typescript 的类型编程自动推断 Redux reducer 的类型", "desc": "今日，使用 ts 几乎已经变成前端的政治正确了。虽然 ts 的自动类型推导已经很强大了，但受限于 js 语言本身，我们依然需要手写很多的类型，并且手动的去指定。 这种写法非常的简单，但是这样写 ts 无法帮我们推导出 payload 类型，如果我们想要使用 payload 属性…"}, {"id": "6974697870423244814", "title": "TypeScript 基础（一）", "desc": "TypeScript 基础系列（一）：包含环境搭建与编译执行、类型系统、接口、高级类型和函数。可以 look look~"}, {"id": "6844904198966870030", "title": "TypeScript 知识汇总（三）（3W 字长文）", "desc": "该文章是笔者在学习 TypeScript 的笔记总结，期间寻求了许多资源，包括 TypeScript 的官方文档等多方面内容，由于技术原因，可能有很多总结错误或者不到位的地方，还请诸位及时指正，我会在第一时间作出修改。 每个模块都可以有一个default导出,默认导出使用 de…"}, {"id": "6971040169507946527", "title": "TypeScript ｜ 简介、安装与使用", "desc": "好好学习，天天向上，每天进步一点点～ TypeScript 学习ing~ 如有错误欢迎指正，谢谢～"}, {"id": "6844903910793019399", "title": "node命令行工具之实现项目工程自动初始化的标准流程", "desc": "可以看出，传统的初始化步骤，花费的时间并不少。而且，人工操作的情况下，总有改漏的情况出现。这个缺点有时很致命。 甚至有马大哈，没有更新项目仓库地址，导致提交代码到旧仓库，这就很尴尬了。。。 命令行工具的角色，是负责将两个信息进行融合，提供一个交互平台给用户。 配置信息的获得，需…"}, {"id": "6993253744905289741", "title": "TypeScript总结", "desc": "一、初识 TypeScript TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源于 GitHub 上。"}, {"id": "6844903870716444686", "title": "sequelize V5 升级记录", "desc": "由于官方提供了 typescript 的支持，不需要在安装 @types/sequelize。 由于使用了 typescript 编译，解决问题。 由于 sequelize 的 type 此时由官方维护，重新定义了 Model 等类型。 虽然目前官方已经支持了对 Model 的…"}, {"id": "6844904161503346696", "title": "【闲谈】babel和ts对ES6的import干了什么", "desc": "前端开发时基本都有babel了，可以 import moment from 'moment';，运行正常。 但是在nodejs的typescript下，有时会报错没有默认导出，要使用import * as moment from 'moment'; 。 此时请检查 tsconf…"}, {"id": "6977190361147899911", "title": "TypeScript基础学习", "desc": "文章参考： TypeScript超详细入门教程 TypeScript 入门教程——菜鸟教程 TypeScript 入门教程-阮一峰 Typescript 和 Javascript之间的区别 上面的教程"}, {"id": "6976988381976723470", "title": "快速入门TypeScript类型别名", "desc": "TypeScript 提供了很多强大的类型别名，通过这些类型别名，可以方便将一种类型转换为另一种类型，本文主要作为常用类型别名的速查及基本的使用。"}, {"id": "6844904153710329870", "title": "前端开发的瓶颈与未来之路", "desc": "我们把时间拉到 5 年前... 如果你「那时」还是前端开发的话。上面的问题肯定是你不得不面临的典型问题。甚至是当时前端开发的意义所在。 ... 但是随着时间的推移，前端技术的更新迭代，以及互联网的发展。你会发现这些曾经的问题似乎已经不再是问题，或者说在能预见的未来 可能 不再是…"}, {"id": "6844904066481389575", "title": "TypeScript 的映射类型 Mapped types (e.g. { [P in K]: T[P] })", "desc": "在JS中我们可以通过 for...in 遍历出一个 object{} 的所有 key 然后进行一些逻辑处理，那么在 TS 中是否有类似的功能用于遍历 interface{} ，在 TS2.1 版本就推出了此能力。 下面我们对其中的 K、P、T 各自表示什么，都进行详细的说明。 …"}, {"id": "6986253975506927653", "title": "TypeScript学习 --- TS中的类型(2)", "desc": "TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以及可维护性；同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。"}, {"id": "6971003286233186334", "title": "TypeScript数据结构与算法：红黑树", "desc": "上一篇《TypeScript 数据结构与算法：AVL 树》实现了 Typescript 中自平衡的AVL树的数据结构与算法，本篇继续进一步实现性能更加优秀的红黑树(red–black tree)。"}, {"id": "6844904095568887815", "title": "从编译后的js代码看typescript中的面向对象", "desc": "众所周知，ts目前是不能直接编译成机器码运行的需要转换成js代码后运行由于js的动态特性，所以我也很好奇编译后的代码是怎么样的呢废话不多说，直接切入正题注：(ts版本为:3.1,编译的js版本为：ES"}, {"id": "6869580500143947789", "title": "Typescript夯实基础——react", "desc": "我们添加了 ESLint 和 Prettier ，下一步就是在保存时自动修复/美化我们的代码。 首先，安装 VSCode 的 ESLint extension 和 Prettier extension 。这将使 ESLint 与您的编辑器无缝集成。 保存时， VS Code 会…"}, {"id": "6844903885190987789", "title": "使用TypeScript实现一个Ticker", "desc": "通常在开发一个项目的时候，总会有不少场景需要创建定时器，这会导致项目中出现很多重复的代码。为了解决这个问题，不妨构建一个Ticker来维护整个项目的时间线。 当Ticker需要作用在整个项目中时，最好的设计模式就是单例。为了使用方便，结合静态方法构造Ticker的雏形。 采用单…"}, {"id": "6997008349518626847", "title": "typescript的认识与了解（一）--- 笔记(二)", "desc": "Typescript简介 Typescript是javascript的超集。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析"}, {"id": "6844903684833280013", "title": "搭建Typescript+React项目模板(3) --- 整理项目和杂项", "desc": "在上一篇提升开发体验中，我们一下子集成了一堆插件和功能进去，导致项目结构比教混乱，重点问题就在webpack的相关配置项目录build文件夹中，所以今天的工作较为轻松，重点就是进行项目结构整理，然后再进行一些杂项的添加。 那么当前最先需要做的工作就是进行build文件夹下web…"}, {"id": "6844904008138620941", "title": "探索 TypeScript 类型注解 - 数据类型", "desc": "欢迎来到 《探索 TypeScript 类型注解》 系列教程。 开篇我们（重新）认识了 TypeScript，本篇探索 TypeScript 的原生数据类型。 语法 ： : Type。如 : boolean。 作用 ：约定变量的数据类型。如约定 bar 为布尔值。 静态编译时检…"}, {"id": "6844903712280805384", "title": "TypeScript: 深入 ts - 几个常用的小技巧", "desc": "刚开始写 typescript 遇到的问题和简单的解决方案。 这个分情况，原则上来说，我们希望能对所有的值都做类型注解。 对于TS编译器来说，如果声明变量时没有做类型注解，那么TS会根据赋值自动推导出变量类型。这一点大多数情况下很完美，很方便，但是有一些列外： 当你后面需要重新…"}, {"id": "6868156971393449997", "title": "用 TypeScript 模板字符串类型来制作 URL parser", "desc": "昨天写了一些简单的基于 TypeScript 模板字符串类型的字符串操作后，看到 @Kingwl 做了一个 算术（只有加和减）执行器，于是手有点痒，想写一个 parser。 无疑写一个 JSON parser 是相对高大上的，但是很复杂（毕竟完全基于类型系统）。后来决定做一个 …"}, {"id": "6881978855096057863", "title": "看懂复杂的TypeScript泛型运算", "desc": "对于从JavaScript转来的TypeScript的初学者来说，一开始无脑用一个新的interface规定一切的方式确实很过瘾。但是，当不得不尝试提高函数或组件的通用性时，使用泛型成了必须的选择。当尝试阅读一些用TypeScript开发的库的源码时，可能会被各种尖括号包裹的复…"}, {"id": "6986124648094121992", "title": "TypeScript学习 --- TS中的类型(1)", "desc": "TypeScript通过类型标注的形式对JavaScrip的类型进行约束。 TypeScript支持与JavaScript几乎相同的数据类型，并在此基础上对数据类型进行了补充和扩展。"}, {"id": "7000764673024851976", "title": "【TypeScript】类", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 TypeScript——类 （1）概念 类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法 （2）"}, {"id": "6992761370831749134", "title": "typescript 配置 axios", "desc": "./package.json 中用到了axios。UI随意，这里用了element-plus 新增 /src/api/request.ts 文件。 request.ts 封装了 Request 方法，"}, {"id": "6956789566783094797", "title": "前端周边 - 手把手教你写VSCode插件", "desc": "1.前言 喜欢或者尝试过写文章的朋友可能会在需要打符号的时候，中英切换出错，将英文感叹号打成中文感叹号，比如 markdown 语法里展示链接或者图片，如果你打错就会编程下面这样 ！我是图片啊喂 就很"}, {"id": "6972420316601516040", "title": "TypeScript装饰器官网笔记", "desc": "首先因为装饰器在js中还是提案阶段, 所以在ts中想提前体验装饰器功能的话, 必须在命令行或tsconfig.json 里启用experimentalDecorators 命令行: tsc —targ"}, {"id": "6903135012963483656", "title": "揭开TypeScript的面纱", "desc": "TypeScript 是微软公司在 2012 年正式发布。TypeScript 其实就是拥有类型系统的 Javascript 的超集。TypeScript 是建立在 Javascript 之上，最后转换为 Javascript。 类型检查。TypeScript 在编译代码时进行…"}, {"id": "6937155970199978014", "title": "Typescript开发学习总结（附大量代码）", "desc": "如果评定前端在最近五年的重大突破，Typescript肯定能名列其中，重大到各大技术论坛、大厂面试都认为Typescript应当是前端的一项必会技能。作为一名消息闭塞到被同事调侃成“新石器时代码农”的我，也终于在2019年底上车了Typescript。使用的一年间整理了许多的笔…"}, {"id": "6984694047910658055", "title": "Typescript 笔记", "desc": "刚开始学typescript,有点懵,留个笔记记录下常用的类型方法,方便后续查找 接口 首字母要大写,加?表示参数可选 继承使用extends 类 类在声明时,必须要有constructor进行初始化"}, {"id": "6981347221664956452", "title": "TypeScript 的基础类型总结", "desc": "TypeScript 是⼀种由微软开发的⾃由和开源的编程语⾔。它是JavaScript 的⼀个超集，⽽且本质上向这个语⾔添加了可选的静态类型和基于类的⾯向对象编程。"}, {"id": "6844903853528186888", "title": "老铁，听说TypeScript很牛逼？", "desc": "TypeScript是啥，有人说TypeScript = Type + Script，实际我觉得更准确的应该是TS = Java(JS)或者 TS = C#(JS)，使用Java/C#的语法写JS，并且为了能让JSer能更容易接受，它的语法又不能直接把Java/C#的那套搬过来…"}, {"id": "6970399903805603847", "title": "Typescript的基本理解", "desc": "前言: Typescript的一些基本概念层级理解，理解了该语言本身约定俗成的东西，后续进一步学习才有方向。 如果有错误，欢迎指出。不喜勿喷哦！"}, {"id": "6963800542615175182", "title": "ts-node不支持alias，编译报错", "desc": "在koa+ts项目中，配置tsconfig使其IDE支持快速跳转，但是用tsnode编译时报错 如下 Error: Cannot find module '@/lib'。"}, {"id": "6844903918669922318", "title": "「2019 JSConf.Hawaii - Brie.Bunge」大规模应用 TypeScript", "desc": "这是一个由 simviso 团队对 JSConf.Hawaii 中关于 TypeScript 相关话题进行翻译的文档，内容并非直译，其中有一些是笔者自身的思考。分享者为 Brie.Bunge，Airbnb（爱彼迎）高级前端工程师。 现如下，TypeScript 已然兴起，如果各…"}, {"id": "6984290303880478757", "title": "TypeScript Tutorial 中文版 - Section 1. 入门", "desc": "开源的 TypeScript Tutorial 教程中文版，翻译自：https://www.typescripttutorial.net/"}, {"id": "6844903733181022222", "title": "TypeScript入门完全指南（基础篇）", "desc": "为JavaScript提供一个包含将来新特性的版本。 TypeScript的核心价值体现在第一点，第二点可以认为是TypeScript的向后兼容性保证，也是TypeScript必须要做到的。 那么为什么JS需要做静态类型检查呢？在几年前这个问题也许还会存在比较大的争议，在前端日…"}, {"id": "6972421467552088072", "title": "Reflect Metadata(元数据)学习笔记", "desc": "一些例子使用了reflect-metadata库来支持实验性的metadata API。 这个库还不是ECMAScript (JavaScript)标准的一部分。 然而，当装饰器被ECMAScript"}, {"id": "6864473591770152968", "title": "[译] TypeScript 4.0 终于发布了我一直在等待的东西", "desc": "昨天，微软官宣了 TypeScript 4.0 的候选版本。然后随之而来的 具标签的元组元素（Labeled Tuple Elements），就成为了这篇文章标题的答案。 这是一个人为的例子。IQuery，它旨在描述查询事物的函数的形状。它总是返回一个 Promise 并且使用…"}, {"id": "6995562951012777991", "title": "TypeScript常用知识之--条件类型和代理", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 条件类型 1. extends 的基本使用 2.条件类型的应用 3.一些常用的内置类型对extends的使用 4.infer 类型的使用 "}, {"id": "6992094314620780551", "title": "TypeScript学习笔记——TS类型/高级用法及实战优缺点", "desc": "最近这两年，有很多人都在讨论 Typescript，无论是社区还是各种文章都能看出来，整体来说正面的信息是大于负面的，这篇文章就来整理一下我所了解的 Typescript。"}, {"id": "6991134436817534990", "title": "TypeScript学习(十四)：混入", "desc": "何为混入 简单地可以理解为，往一个对象( 类 )里面添加一些属性及值。 以下面为例，往 Base 类(对象) 中混入 Scale 属性。 Constrained Mixins 在混入的过程中，可能需要"}, {"id": "6844904007069089805", "title": "实现一个掘金Style的markdown目录", "desc": "已经几乎很久没有更新文章了，由于工作和生活的原因，仿佛失去了之前在大学时候的样子，变得慵懒起来。刚踏入社会还是需要不停的鞭策自己，有很多东西要学，定期的写作对自己的提升是很大的。在写的过程你依旧在思考，你会想着把这东西变得更好展现到别人眼前。不会像写业务一样，完成了功能和需求很…"}, {"id": "7003142725058969636", "title": "TS进阶篇 | 详解 TypeScript 高级类型（上）", "desc": "TypeScript中除了基本类型之外，还定义了很多高级类型，高级类型包括字面量类型、联合类型、交叉类型、索引类型、映射类型、条件类型、this类型等。"}, {"id": "6934140963262562312", "title": "Deno 将停用 TypeScript 的五个原因", "desc": "最近有一份流传的文档，说是 Deno 将停止在其内部代码中使用 TypeScript。文档中提到了当前开发环境的几个问题，包括了 TypeScript 编译时间、结构和代码管理等。在未来，Deno 的内部代码将使用原生 JavaScript 进行开发。 当更改文件时，TypeS…"}, {"id": "6844904182843965453", "title": "1.2W字 | 了不起的 TypeScript 入门教程", "desc": "TypeScript 已经入门了，但觉得 TypeScript 泛型有点难，想系统学习 TypeScript 泛型相关知识的小伙伴们看过来一文读懂 TypeScript 泛型及应用（ 7.8K字）（掘金）。 TypeScript 是一种由微软开发的自由和开源的编程语言。它是 J…"}, {"id": "7006881951042764813", "title": "TypeScript学习心得", "desc": "前端小白一个，最近学习TS，根据一些掘金大佬的文章和本人看书所得写出此文，文章涉及到TS的类型，断言、联合、交叉、守卫类型，函数，类，泛型及接口，大家一起学习，一起进步"}, {"id": "7002516533062664206", "title": "好用的canvas生成工具", "desc": "之前在移动端上做了几个cavnas生成海报的需求，发现不是插件不够好用就是自己每次手写代码去绘制cavans十分麻烦，所以抽空集中处理一下这个功能。 需要实现的功能清单 移动端的主流平台兼容：H5和微"}, {"id": "6993676123385102373", "title": "[点线面Vue3]先跑起来再说！", "desc": "一直觉得框架只是工具，工作中用不上就没必要去学，要用的时候再去学习即可。 所以对国内非常火爆的Vue框架也只有一个初浅的印象： Vue是一个渐进式的JavaScript框架 Vue2通过defineP"}, {"id": "7005021340973400100", "title": "教你gitlab集成企业微信机器人消息通知", "desc": "让gitlab事件直接在企业微信中发起提醒，替代传统的邮件提醒，达到更好的消息送达率。如果你司目前还没有类似的通知机制，不妨尝试一下，说不定因此而得到上司赏识，开始幸福而甜蜜的生活。 废话不多说，直接"}, {"id": "7005018998874062855", "title": "Why TypeScript？", "desc": "TypeScript 是一种非常受欢迎的 JavaScript 语言扩展。它在现有的 JavaScript 语法之上加入了一层类型层，而这一层即使被删除，也丝毫不会影响运行时的原有表现。"}, {"id": "6996217326378942472", "title": "Vue DevUI 又新添了11位新成员啦～🥳😋", "desc": "月初我们在掘金同步了 Vue DevUI 的最新进展：Vue DevUI 已经有10个组件成员啦～🥳😋 很快就有超多掘金的小伙伴对 Vue DevUI 开源项目感兴趣： 3天之内就有超过100+社区的"}, {"id": "7005507273535701006", "title": "玩转TypeScript工具类型（上）", "desc": "联系我们：有道技术团队助手：ydtech01 / 邮箱：ydtech@rd.netease.com。"}, {"id": "7004035071459983390", "title": "一起读透TS装饰器", "desc": "装饰器是 JS stage-2 的一个提案，并作为 TS 的实验特性存在。如果你有使用过 Spring 的经验，相信你一定对其中强大的注解能力印象深刻，借助装饰器强大元编程能力也可以在做到类似的功能。"}, {"id": "6997796393460957215", "title": "使用vue3.x + typescript + tsx基于element-plus开发一个搜索组件", "desc": "简介 由于业务需要，本人需要开发一个基于element-plus的表单组件集成的搜索组件（效果如下图），效果为通过对组件以JSON Schema的方式传入配置项的json达到动态渲染的效果。本文主要记"}, {"id": "6985296521495314445", "title": "TypeScript 高级类型及用法", "desc": "本文详细介绍了 TypeScript 高级类型的使用场景，对日常 TypeScript 的使用可以提供一些帮助。"}, {"id": "7004098142282973215", "title": "总结了13道 Typescript 项目常用语法练习，学会它，90%的场景都不再害怕！", "desc": "总结了项目中常见的 TS 语法，所有的题目都整理在这 Typescript Practice，可在线练习。practice 中是题目，answer 中是对应的答案。希望能对你有帮助！ 1. 常用类型 "}, {"id": "7006945510120488996", "title": "typescript中几种特别的变量类型", "desc": "1. any any 指的是一个任意类型，它是官方提供的一个选择性绕过静态类型检测的作弊方式。 我们可以对被注解为 any 类型的变量进行任何操作，包括获取事实上并不存在的属性、方法，并且 TypeS"}, {"id": "7003266312377991199", "title": "记录TypeScript 的一些基础知识", "desc": "背景 下面是TS的一些基础知识，确实有点宽泛，加深自己的理解，之后，还会针对不同的知识点来写文章 基础类型 数组 类型断言 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断"}, {"id": "7005397846782541860", "title": "【TS】一、类型注解", "desc": "为了方便书写，以下用ts来指代TypeScript。 ts已经用了一段时间了，为了更系统的学习ts，仔细品读了一遍官方文档，由此做了些记录和总结。希望这篇文章也能帮助到正在学习ts的你，带领你入门。 "}, {"id": "6980971321165348894", "title": "TypeScript 4.3 新功能的实践应用", "desc": "TypeScript 在 5 月底发布 4.3 版本，那么其中的一项更新值得重点关注：Template String Type Improvements"}, {"id": "7000940156035285006", "title": "TypeScript 入门指南 【大白话】", "desc": "去年还有很多朋友犹豫用不用学习`TypeScript` , 很多被社区朋友发的文章误导， `TypeScript` 就是 `AnyScript`。"}, {"id": "6999280101556748295", "title": "TypeScript 类型体操姿势合集<通关总结>--刷完", "desc": "建议做体操之前阅读： 官方文档 大佬的文章，受益匪浅 之前在写一个自己的库，深感自身的ts写的太渣，所以决心要好好修炼一下ts，不得不的说，只有掌握了这些姿势，才能在运用中写出更好的类型设计 原项目地"}, {"id": "6880488633057411080", "title": "TS入门笔记2——TS接口进阶详解", "desc": "如果使用接口来限定了变量或者形参, 那么在给变量或者形参赋值的时候, 赋予的值就必须和接口限定的一模一样才可以, 多一个或者少一个都不行。 但是开发中我们往往可能会遇到少一个或者多一个的场景。 可选属性意如其名，用法也简单，只需要在属性名字后面加一个？即可。 用于描述那些“通过…"}, {"id": "6844903645339713549", "title": "在react中使用svg的各种骚姿势", "desc": "兼容性也不是什么大问题. 当然, 如果你的网站还是需要兼容这些旧式的浏览器, 社区上也有对应的方案, 比如张鑫旭的一些SVG向下兼容优雅降级技术 如果每个svg要前端画, 对前端要求较高. 直接把代码复制到项目css中, 定制你的标签样式, 参考阿里官方的文章, 使用起来简单粗…"}, {"id": "6844904128712294414", "title": "类型即正义：TypeScript 从入门到实践（三）：类型别名和类", "desc": "学习了注解函数，又了解了类型运算如联合类型和交叉类型，接下来我们来了解一些 TS 中独有的类型别名，它类似 JS 变量，是类型变量，接着我们还会学习 TS 中内容非常庞杂的内容之一：类，了解 TS 中类的独有特性，以及如何注解类，甚至用类去注解其他内容。 就像我们为了在平时开发…"}, {"id": "6927507521783627790", "title": "This in Typescript", "desc": "this可以说是Javascript里最难理解的特性之一了，Typescript里的 this 似乎更加复杂了，Typescript里的 this 有三中场景，不同的场景都有不同意思。 在处理继承的时候，如果 superclass 调用了示例方法而非原型方法，那么是无法在 su…"}, {"id": "6844904093404626957", "title": "通过vue-property-decorator源码学习装饰器", "desc": "在使用TS和Vue开发的过程中我们经常使用vue-property-decorator这个库，它封装了@Component、@Prop、@Watch、@Emit等常用装饰器，用于像原生ES class那样声明基于类的Vue组件，接来下我们就通过vue-property-deco…"}, {"id": "6996863278458601502", "title": "Typescript 学习记录", "desc": "接口(Interface)与类型(Type)别名的异同点 相同点 都可以描述对象或函数 都可以扩展 interface和type可以混合扩展，也就是说interface可以扩展type,type也可以"}, {"id": "6844903609516163079", "title": "JavaScript中的类型判断，了解一下？", "desc": "关于typeof操作符，我们需要记住两点，第一点：当操作数为null时。 第二点：当操作数为原始类型(Primitive)时很有效，但是对于对象具体类型的判断往往并不是我们需要的结果。 instanceof操作符主要用来检查构造函数的原型是否在对象的原型链上。 从好的编程习惯来…"}, {"id": "6878519063270817805", "title": "react -- 在ts里面获得css的class智能提示", "desc": "有没有遇到过tsx里面转跳css文件，结果却是d.ts文件，这谁受得了，有没有遇到过ts文件引入css后，只能获取到一个any类型。这样写错了属性也不知道?"}, {"id": "6844903535381839879", "title": "【译】如何用 TypeScript 玩转后端？", "desc": "我将从一个开发者的角度介绍几个优秀的库。它们可以满足你后端应用的绝大部分特性。装饰器和元数据的能力在这些库中得到的充分的应用，使其非常强大并且简单易用。 我希望这篇文章可以帮到像我这样，喜欢 TypeScript 而且想用它编写后端代码的人，让他们像我一样发现这些库之后乐在其中…"}, {"id": "6939514335169347620", "title": "TypeScript入门", "desc": "按照TS官网的介绍，ts是一门javaScript的超集。所谓超集意思就是，js有的东西，我ts有，js没有的，我ts还有，那到底ts提供给了我们哪些额外的东西了呢，先让我们看下js这门语言的简单描述，然后一切就明白了。 JavaScript是一门动态弱类型语言。 熟悉js的同…"}, {"id": "6844904116649459725", "title": "类型即正义：TypeScript 从入门到实践（二）", "desc": "了解了基础的 TS 类型，接口之后，我们开始了解如何给更加复杂的结构注解类型，这就是我们这节里面要引出的函数，进而我们讲解如何对类型进行运算：交叉类型和联合类型，最后我们讲解了最原子类型：字面量类型，以及如何与联合类型搭配实现类型守卫效果。 我们在之前 TodoInputPro…"}, {"id": "6844904096156090376", "title": "【你应该掌握的】深入浅出typescript", "desc": "TypeScript是一种由微软开发的开源、跨平台的编程语言。它是JavaScript的超集，最终会被编译为JavaScript代码。 TypeScript可以解决JavaScript弱类型和没有命名空间，难以模块化的问题，同时也增强了代码的可读性，在团队协作和大型项目中体现出…"}, {"id": "6869597575243284493", "title": "两个月的时间，我重构了三个项目", "desc": "其实对于我们团队的这三个项目，有很多公共的组件，就要考虑是否可以将这些公用组件提取，提高项目可维护性。具体操作方式，可以先看一张图片，country和star就是代表的两个不同的项目，通过在config中的配置来决定当前启动的项目。 更多的细节以及仓库可以参考我这篇文章多个项目…"}, {"id": "6991745271768023071", "title": "玩转TypeScript工具类型（中）", "desc": "本文是《玩转TypeScript工具类型》系列的第二篇，包含了如下几部分内容： 必读：extends条件运算符 Exclude<Type, ExcludeUnion> Extract<Type, Un"}, {"id": "6924550897871781901", "title": "TS类与接口 之 结合看wangEditor大佬架构学习", "desc": "大家好，这里是梅利奥猪猪，经过这几天的学习产出，功夫不负有心人，总算通过了开源团队老大的考核(大家有兴趣也可以来加入哈，直接官方文档里加群，老大会对你考核的)，有机会成为开源团队wangEditor的成员，有了变强的途径，哈哈所以和大家来分享我的喜悦。但是加入团队前，很多知识我…"}, {"id": "6977264825348915231", "title": "TypeScript完全解读", "desc": "TypeScript完全解读 本文主要是从一个项目的角度来对typescript从无到有进行解读，若有不当或者不对之处，敬请指教。持续更新中..."}, {"id": "6844903955173277703", "title": "基于TypeScript+Node.js+Express搭建服务器", "desc": "鉴于JavaScript是弱类型语言和动态类型语言，因此JavaScript在变量声明的时候无需指定变量的类型，在声明之后便可为其赋值不同的类型。因此在多人团队的开发里面，JavaScript的这种“便捷”反而会带来很多麻烦。 TypeScript就是为了解决JavaScrip…"}, {"id": "6844904170353328135", "title": "理解TypeScript中的infer关键字", "desc": "我可能一年前就看见infer了，一直没有好好学，原因除了自己懒，还有就是水平确实不够，今年再学明显感觉不同了。"}, {"id": "6844903879075692552", "title": "TypeScript 小书之入门篇-连载中...", "desc": "首先，对于官方的和类似这样全面介绍一门技术的站点都在竭尽所能地描述每一个知识点，这个我没有意义，并且十分赞同（这是我的态度）。可我还有自己的观点：按照自己学习方法将所学知识整理成一个学习目录，便于自己查阅（如果恰好也符合你的阅读习惯，能给你帮助和启示，那就更加荣幸了）。 本小书…"}, {"id": "6978417573050187784", "title": "TypeScript Interface和Type的异同点", "desc": "在使用TypeScript的时候，我们常常使用interface和type去描述复杂数据的形状和类型，比如对象和函数。由于他们的使用方式高度相似，一度让我觉得他们是可以相互替换的。"}, {"id": "6844903940350296072", "title": "前端也来点算法(TS版) | 1 - LRU Cache", "desc": "这是 前端也来点算法 系列的第一篇文章，项目中的代码打算全部用 TS 编写。 缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。 缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应…"}, {"id": "6844904198891372551", "title": "TypeScript 知识汇总（二）（3W 字长文）", "desc": "该文章是笔者在学习 TypeScript 的笔记总结，期间寻求了许多资源，包括 TypeScript 的官方文档等多方面内容，由于技术原因，可能有很多总结错误或者不到位的地方，还请诸位及时指正，我会在第一时间作出修改。 当我们比较带有 private或 protected成员的…"}, {"id": "6844904096189644808", "title": "【译文】TypeScript笔记1/17：Pick，Exclude与高阶组件", "desc": "这些笔记有助于更好的理解TypeScript，并可以用来查询特殊情况下的TypeScript使用。例子基于TypeScript 3.2。 本文主要阐述如何编写React中的高阶组件hoc。首先为了处理不同的hoc实现问题，我们需要理解omit和exclude这两个函数。pick…"}, {"id": "6844903889636950023", "title": "TypeScript将会大规模流行", "desc": "大量重量级前端开源项目采用TypeScript开发，例如：Angular、VScode、Vue3.0、Rxjs、TypeScript、Mobx、deno、Antd,这个趋势越来越明显，包括Facebook自家的Jest也宣布从flow Type转向TypeScript。 居然是…"}, {"id": "6844903790479409159", "title": "Fen - 基于deno的简单Typescript Web框架", "desc": "Fen 是一个使用Typescript基于deno的轻量级web框架，他通过Server主体来实现服务，通过Process以及Tool来赋予Server各种各样的功能。 Fen 仅仅通过上下问context来连接各个环节，虽然这样的模式存在着上下文在修改过程中难以保证稳定的问题…"}, {"id": "6844903511864377351", "title": "TypeScript CheetSheat", "desc": "TypeScript 风靡全球后不懂 TypeScript 的前端绝对不是一个好前端。TypeScript 的设计来源于大多数的静态语言，如果曾经有静态语言的开发经验，TypeScript 一整个下午就能上手。 这里记录一下 TypeScript 常用的一些语法层面的东西，方便"}, {"id": "6854573209950535693", "title": "TypeScript到底有什么好", "desc": "超集 ：TypeScript 是 JavaScript 的一个超集。 类型系统 ：正如其名，TypeScript在JavaScript的基础上，包装了类型机制，使其变身为静态类型语言。 编辑器功能 ：增强了编辑器和IDE功能，包括代码补全、接口提示、跳转到定义、重构等。 错误提…"}, {"id": "6844903828760821774", "title": "TypeScript - 一种思维方式", "desc": "电影《降临》中有一个观点，语言会影响人的思维方式，对于前端工程师来说，使用 typescript 开发无疑就是在尝试换一种思维方式做事情。"}, {"id": "6992604730249707534", "title": "typescript基础篇（二）", "desc": "这是我参与8月更文挑战的第2天，活动详情查看： 8月更文挑战 定义函数：4种方式 混合类型 的接口： 这样，一个接口已经实现了，但是他的问题是，对全局暴露了一个变量 lib ，他是一个单例，如果我们想"}, {"id": "6844903575731044360", "title": "[译] TypeScript：拥有超能力的 JavaScript (上)", "desc": "JavasSript 很酷。但你知道什么更酷一点吗？TypeScript。 TypeScript 可以看出来。看到那个红色的下划线了吗？这就是 TypeScript 给我们的错误提示。 你可能已经发现了这个问题（干的漂亮） — toUpperCase() 是 String 的方…"}, {"id": "6992538691331686431", "title": "TypeScript 使用 tsc 打包纯 ts 项目  引入非 ts 依赖导致打包后上传到npm上  安装使用报错问题", "desc": "我们新建了一个纯TS项目,项目名为： demo 。 最开始使用 module.d.ts 设置引入的依赖为any 这个在编写ts项目的时候不会报错 但是在 react 项目中，我们引入 demo 依赖发"}, {"id": "6844903615228821517", "title": "[官方] TypeScript 2.9 发布 | VSCode 等编辑器高度整合及 import() types 等", "desc": "If you’re not familiar with TypeScript, it’s a language that adds optional static types to JavaScript. Those static types help make guarant…"}, {"id": "6907872739890036743", "title": "TypeScript的学习实践二", "desc": "从基于 Node.js 的服务端 commonjs 模块化，到前端基于浏览器的 AMD、CMD 模块化，再到 ECMAScript2015 开始原生内置的模块化， JavaScript 的模块化方案和系统日趋成熟。 UMD：严格来说，UMD 并不属于一套模块规范，它主要用来处理…"}, {"id": "6921693230257930253", "title": "Typescript  学习之 - Interface", "desc": "Learning TypeScript — Interfaces,看到这篇文章的定义和示例，突然有了新的理解。 简单的说，接口就是对 对象形状 的描述。 TypeScript 中，我们只关心一个对象所拥有的属性是否是我们定义的类型，而不关心他们是否是同一个实例。 为了突出 Ty…"}, {"id": "6844903554545614856", "title": "自定义 TSLint 规则实践", "desc": "TSLint 是一个非常好用的开源 TypeScript 代码风格检查器，它能够在可读性、可维护性、代码正确性等方面为开发者提供帮助。TSLint 被广泛用于各种前端构建工具和编辑器中。 在编写代码时，编译器会根据 TSLint 抛出高亮提示，在代码编译时，编译工具可以运行 T…"}, {"id": "6844903800495407117", "title": "[译] 如何使用 Phaser 3 和 TypeScript 在浏览器中构建一个简单的游戏", "desc": "我是个后端开发，我的前端开发专业知识相对较弱。前一段时间我想找点乐子 —— 在浏览器中制作游戏；我选择 Phaser 3 框架（它现在看起来非常流行）和 TypeScript 语言（因为我更喜欢静态类型语言而不是动态类型语言）。事实证明，你需要做一些无聊的事情才能使它正常工作，…"}, {"id": "6844904191652003847", "title": "设计模式： 从ES5 到 TypeScript ——单例模式", "desc": "单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型 (Creational) 模式，它提供了一种创建对象的最佳方式。 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象…"}, {"id": "6951279809842380807", "title": "关于TypeScript的一些总结", "desc": "1.由于javascript允许隐式类型转换，属于弱类型且动态类型语言。缺失了类型系统的可靠性。所以在大型项目中，我们一般使用TypeScript.TypeScript 比起 JavaScript 有"}, {"id": "6844903581536288775", "title": "[译] TypeScript：拥有超能力的 JavaScript（下）", "desc": "欢迎回来，继前文 [译] TypeScript：拥有超能力的 JavaScript (上) 之后，本周带来下篇。 使用枚举（enum）可以更清晰地组合一组数据。 但这样返回的是这个值的整数索引，和数组一样，枚举类型的索引也是从 0 开始的。 注意看我们怎么获取到字符串的值。 还…"}, {"id": "6844903870703861774", "title": "一个简单案例教你如何用Typescript写Vuex", "desc": "相信很多人都像我一样，学习使用了vuex后，想把项目改写成Typescript。但是官方教程要么晦涩难懂，要么缺少鲜活的例子。我花了一天时间，总结出了一些经验。在此分享出来。 本教程通过编写一个简单的demo讲解vuex的实现方式，以及如何对基于vue2.x的已有项目进行Typ…"}, {"id": "6844903901070639118", "title": "TypeScript入门指南（基础篇）", "desc": "ts是拥有类型系统的js的超集，近年来非常火热。可以这么说，ts才是真正意义上的js。虽然ts的官方文档非常全面，但是对于原来没有接触过ts的同学来说，全篇通读下来需要耗掉不少时间，这篇文章旨在为尝试入门ts的同学使用。 一个好的代码习惯是常常对自己写的代码进行小的重构，使得代…"}, {"id": "6996484677280202759", "title": "typescript学习系列3:联合类型和类型保护", "desc": "1.联合类型： 通过\"|\"来实现一个联合类型，如下代码： 2.类型保护以及常用的类型保护的方式： 1.联合类型只会对共有属性或者方法予以提示 联合类型中的，ts代码提示只能给出共有的方法或者属性 2."}, {"id": "6844903873316913165", "title": "Typescript 数组类型", "desc": "数组类型定义方式有多种，可见灵活性很强，一起来看看吧。 看来，必须的传入数字。 上面的例子所要表达的是，只要 index 的类型是 number，那么值的类型必须是 number。 看来类数组不是像上面想的那么简单，还需要专门的类型 IArguments 来定义，IArgume…"}, {"id": "6844904040027914247", "title": "7 个好用的 TypeScript 新功能", "desc": "TypeScript 语言小组一直在以惊人的速度推出新功能。从最新的《 Javascript 语言状况调查》（https://2019.stateofjs.com/javascript-flavors/typescript/）中可以看出，该语言的使用率越来越高。 本文将会总结你…"}, {"id": "6844904150501687304", "title": "在 TypeScript 处理空值异常", "desc": "这两种情况在业务迅速迭代的情况下非常常见。 根据 object 对象的 path 路径获取值。如果解析值是 undefined，就返回一个默认的值(defaultValue) TypeScript 3.7 推出了两个新语言特性 可选链（Optional Chaining）和 空…"}, {"id": "6861500194232467470", "title": "TypeScript 类型系统", "desc": "TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有： 它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在逻辑上比较零散。 大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。 大多数内容比较枯燥，…"}, {"id": "6844904100123901959", "title": "🔥17行代码, 学会UI组件库都在用的\"el.contains(node)\"", "desc": "el.contains(node)用来判断一个元素是否在另一个元素内. 一般组价库中的\"下拉\"和\"气泡对话框\"用这个特性来实现\"点击组件外部关闭组件\"功能. 本文并不是要讲如何实现一个\"气泡\"组件, 而是实现一个组件中的通用功能:点击元素外部触发, 希望帮助大家能举一反三. 监…"}, {"id": "6854573211284144136", "title": "在 TypeScript 项目中配置路径别名", "desc": "这次自己搭了一个 react + typescript 的项目环境, 然后也想配置路径别名，因此遇到了很多坑。所以在此做一个记录，希望能对遇到这个问题的人有所帮助。 当我们这样配置完启动项目的时候，会发现paths被干掉了。 至于原因，个人觉得是在通过npm start 项目的…"}, {"id": "6844903838063788039", "title": "React项目从Javascript到Typescript的迁移经验总结", "desc": "现在越来越多的项目放弃了javascript，而选择拥抱了typescript，就比如我们熟知的ant-design就是其中之一。面对越来越火的typescript，我们公司今年也逐渐开始拥抱typescript。至于为什么要使用typescript？本文不做深入探讨，对这方面…"}, {"id": "6844904080335355918", "title": "vue2.x中使用typescript", "desc": "本文目的在于大家可以快速在vue中使用ts，关于ts的具体的使用方法，大家可以去官网查看。 然鹅在最近的项目中，由于类型判断引发的bug不在少数，比如A页面跳转B页面带的参数是个String类型，但是在B页面会校验这个参数是否是Number类型，由此出现问题，一顿猛找，最后一阵…"}, {"id": "6844904129089765384", "title": "人人都该具备封装思维：Taro+Es6+Promise+Ts简易构建微信小程序的全局请求方法", "desc": "无论是app还是小程序或者其他端，交互中请求无处不在。 一个优秀的封装类，能让你的开发效率事半功倍，所以封装逻辑至关重要，当然我也是个小菜鸟，跟着自己的思路写过一些封装方法，一方面是想不足之处还望路过的大神给予指正，二者是为新手打开一个善于封装思维的大门，下面进入到前置知识。 …"}, {"id": "6844903873316913160", "title": "Typescript 对象类型-接口", "desc": "新的一天，打卡签到。按照在 Typescript 类型推论 里的约定，我们将文件 notes/package.json 的 version 改为 0.0.5，然后 npm run createDir, 这个时候，notes 目录下就会新增文件夹 0.0.5，很简单是吧，后面章节…"}, {"id": "6844903519493816334", "title": "你不知道的前端SDK开发技巧", "desc": "最近在做公司内部的一个的一个SDK的重构，这里总结一些经验分享给大家。 作为一个SDK，我们的目标是让使用者能够减少查看文档的时间，所以我们需要提供一些类型的检查和智能提示，一般我们的做法是提供JsDoc，大部分编辑器可以提供快捷生成JsDoc的方式，我们比较常用的vscode…"}, {"id": "6844903917348716558", "title": "vue-cli +typescript+webpack4 项目搭建超详细步骤", "desc": "而在代码中导入 *.vue 文件的时候，需要写上 .vue 后缀。原因还是因为 TypeScript 默认只识别 *.ts 文件，不识别 *.vue 文件"}, {"id": "6844903684829085709", "title": "搭建Typescript+React项目模板(1) --- 项目初始化", "desc": "8 . 配置tsconfig 9 . 项目启动"}, {"id": "6844904170521100296", "title": "一文读懂 TS 中 Object, object, {} 类型之间的区别", "desc": "TypeScript 2.2 引入了被称为 object 类型的新类型，它用于表示非原始类型。在 JavaScript 中以下类型被视为原始类型：string、boolean、number、bigint、symbol、null 和 undefined。 所有其他类型均被视为非基…"}, {"id": "6844903825493639182", "title": "【译】TypeScript中的React高阶组件", "desc": "高阶组件（HOCs）在React中是组件复用的一个强大工具。但是，经常有开发者在结合TypeScript使用中抱怨道很难去为其设置types。 这边文章将会假设你已经具备了HOCs的基本知识，并会根据由浅入深的例子来向你展示如何去为其设置types。在本文中，高阶组件将会被分为…"}, {"id": "6844903813531303943", "title": "前端工具类项目规范化-使用TS", "desc": "TypeScript 是微软开发一款开源的编程语言，本质上是向 JavaScript 增加静态类型系统。它是 JavaScript 的超集，所有现有的 JavaScript 都可以不加改变就在其中使用。它是为大型软件开发而设计的，它最终编译产生 JavaScript，所以可以运…"}, {"id": "6844904056566054920", "title": "使用typescript改造koa开发框架", "desc": "强类型的 TypeScript 开发体验和维护项目上相比 JavaScript 有着明显的优势，那么对常用的脚手架进行改造也就势在必行了。 基于 typesript 的特性改造项目。 基于 gulp 搭建开发编译环境，gulp-typescript 插件用于编译 typescr…"}, {"id": "6854573216732545038", "title": "TypeScript从入门到项目实战（进阶篇）", "desc": "嗨嗨嗨，大家好，我是八字昵称，我又回来了。 上上周不是说要统一技术栈吗，首个要统一的就是TypeScript，于是就有了这一系列文章，今天写完了进阶篇，既然写出来了，就要发出来帮（水）助（波）不会（经）的同学（验）。 声明（还是这个声明）：✨本系列文章为基础教程，不涉及过深的东…"}, {"id": "6844903727485157390", "title": "TypeScript: 深入 ts - 基本风格和小技巧使用", "desc": "一些常用的小技巧平时写代码的时候查询资料积累的一些小技巧基本风格使用class的使用在TypeScript中，我们可以通过Class关键字来定义一个类：处理json和字符串转换数字基本的JavaScr"}, {"id": "6977688238982955045", "title": "SAP Spartacus Translation(翻译) 相关话题", "desc": "官网地址 在典型的 Spartacus 店面中，大部分内容要么来自 CMS，要么来自产品内容。 但是，对于店面站点标签（例如按钮中的文本），内容存储在单独的文件中，并且可以对这些文件进行本地化（即翻译"}, {"id": "6844903827485786119", "title": "TS学习笔记（二）：接口", "desc": "在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implements），TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述。 类型检…"}, {"id": "6844903825665425415", "title": "初探TypeScript 基础篇", "desc": "由于自己目前在学习typescript;想着边学习变做笔记，往后也可以翻出来看看，也分享出来给像我一样的初学者一起学习。望各位大佬指教。 以上命令会在全局环境下安装 tsc 命令，安装以后我们就可以在任何终端执行tsc命令了。我们可以简单的创建一个文件 hello.tsc 我们…"}, {"id": "6844904169820651528", "title": "常见类型 -- Typescript基础篇（3）", "desc": "从3.2开始，ts内置了bigint类型来支持理论上任意大的整数类型。使用该类型，需要指定配置文件的target为ES2020以上，如ESNEXT： 使用bigint类型的变量有两个方式：使用bigint类型标识，并在数字结尾加n；或者使用Bigint()函数。 注意虽然上一节…"}, {"id": "6903079722595385351", "title": "TypeScript(四) —— 函数/接口/类/泛型语法总结", "desc": "可选参数一定要在必选参数后面，放在函数最后。 接口，是一种规范、契约，约定对象的结构。 接口是用来约束一个对象的结构，我们要使用这个接口，就要遵循其全部的约定。 动态成员 ：不确定有哪些成员，自己定义添加，一般这种都存在动态对象里面，例如程序中的缓存对象。 类用来描述一类具体事…"}, {"id": "6844903668412579854", "title": "如何将 Elixir 模块风格应用在 JS 中", "desc": "展开原文Moving your code towards a more functional style can have a lot of benefits – it can be easier to reason about, easier to test, more de…"}, {"id": "6844904067169271815", "title": "TypeScript入门级知识点整理", "desc": "与void的区别是，null和undefined是所有类型的子类型。也就是说undefined类型的变量，可以赋值给number类型的变量，如下： 在typescript中，boolean是JavaScript中的基本类型，而Boolean是JavaScript中的构造函数。 …"}, {"id": "6844903924135100429", "title": "[译]使用 Typescript 使无效状态不可恢复", "desc": "有一种好的 Haskell 编程原则，同样也是一种好的函数式编程原则，叫做使无效状态不可恢复原则。这是什么原则呢？通常我们使用类型系统来构建对数据和状态施加约束的类型，从而达到可以代表已存在状态的效果。现在，在类型级别上，我们设法消除了无效状态，但类型系统每次试图构造无效状态时…"}, {"id": "6926517667470409736", "title": "复杂场景下的 typescript 类型锚定 （1） ----- 对象索引提取", "desc": "作者：ICBU东墨前言：在编写typescript应用的时候，有时候我们会希望复用或者构造一些特定结构的类型，这些类型只从typescript靠内建类型和interface、class比较难以表达，这"}, {"id": "6850418121702899726", "title": "TypeScript——小知识总结", "desc": "假如我们要实现一个函数，这个函数会返回任何传入它的值。不用泛型的话就只能使用any或者是用类型推断。这时用泛型就是一个很好的选择。 泛型简单来说就是当你传进来的参数是string，那么T在这个执行中就等于string。 never不能被赋值，而且代表的是无法到达的终点。也就是说…"}, {"id": "6921163314600869901", "title": "Typescrit从入门到放弃系列(七)-泛型", "desc": "一.指定函数参数类型单个泛型多个泛型二.函数标注的方式类型别名接口三.泛型接口使用四.默认泛型五.类中的泛型创建实例时提供类型校验构造函数类型六.泛型约束泛型必须包含某些属性返回泛型中指定属性"}, {"id": "6844903512200085518", "title": "设计一个SKU多维规格生成组件(Angular5)", "desc": "我们在选购一件商品的时候通常都是需要选择相应的产品规格来计算价钱，不同规格的选择出来的价格以及库存数量都是不一样的，比如衣服就有颜色，尺码等属性 下面引用sku的概念 最小库存管理单元（Stock Keeping Unit, SKU）是一个会计学名词，定义为库存管理中的最小可用…"}, {"id": "6916340551247724551", "title": "<笔记>typescript-类", "desc": "1.类的继承和基本类型指定ts中super必须被调用，否则会提示Constructorsforderivedclassesmustcontaina'super'call2.修饰符（公共/私有/受保护）"}, {"id": "6844903506285953032", "title": "让你的JavaScript成为真正的Java Script", "desc": "JavaScript为什么叫“JavaScript”？ 要回答这个问题还得从JavaScript的历史说起。 1995年5月，Netscape创建了称为Mocha（摩卡）的浏览器端的脚本语言。 可是没过多久，同年9月就改名为“LiveScript”。 又过了没多久，同年12月，…"}, {"id": "6844903535935488013", "title": "你所不知道的 Typescript 与 Redux 类型优化", "desc": "自从 Redux 诞生后，函数式编程在前端一直很热；去年7月，Typescript 发布 2.0，OOP 数据流框架也开始火热，社区更倾向于类型友好、没有 Redux 那么冗长烦琐的 Mobx 和 dob。 然而静态类型并没有绑定 OOP。随着 Redux 社区对 TS 的拥抱…"}, {"id": "6844904066917597197", "title": "类型安全的 React + MobX 路由器", "desc": "路由器是前端生态中非常常用，通常非常成熟的一个组成部分。于是为“什么还要造这么一个轮子”成了必须要回答的灵魂拷问。最初驱使我去做这件事情的大致是以下几个原因： 常见的 React Router 方案没有中心化的路由状态，不方便在组件外与全局状态/服务集成。有时还需要自行、多次处…"}, {"id": "6844903512342528014", "title": "ng-alain 发布正式版！", "desc": "ng-alain 是一个基于 ng-zorro-antd 的企业后台脚手架，目标也非常简单，希望在Angular上面开发企业后台更简单、更快速。"}, {"id": "6844904169816489998", "title": "基础类型 -- Typescript基础篇（2）", "desc": "与 js 相同，ts 的原始类型包括布尔值，数值，字符串，undefined，null以及object，symbol。 ts 中的所有数字都是浮点数，其类型为number，并且支持十进制，二进制，八进制，十六进制。 除此之外，number类型的变量还可以被赋值NaN和Infin…"}, {"id": "6911514919024197639", "title": "TypeScript基础类型", "desc": "1. 概念预览 基础类型: 布尔值,数字,字符串,数组,元组,枚举,any,void,null,undefined,never,object. 类型断言: 有时候,我们比typescript本身更了解某些值的详细信息,我们可以通过断言去标注它,告知编译器,我知道我在干什么.但是…"}, {"id": "6844904023586242574", "title": "TypeScript 之基础类型", "desc": "为了让程序更有价值，我们需要能够处理最简单的数据单元：数字、字符串、结构体、布尔值等。TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。 最基本的数据类型就是简单的 true/ false 值，在 JavaScript 和…"}, {"id": "6844903511042457608", "title": "IWinter 一个路由转控制器的 Nodejs 库", "desc": "最近在学习使用 Typescript ，打算把以前写的博客管理后台用 Typescript 进行全面重构，在重构服务端代码时接触到了 Typescript 的装饰器功能。可以用装饰器对路由进行一层包装，然后就可以这样编写路由： 由于工作中会使用 Java 编写控制层代码（Spr…"}, {"id": "6949315742974574599", "title": "【Typescript小手册】基本类型", "desc": "Typescript 的变量都具有类型，包括基本类型和复合类型，不同的类型之间不一定兼容。本篇文章介绍Typescript的基本类型。"}, {"id": "6844903897346080781", "title": "带你了解和实践 Typescript 的泛型 （Generics）", "desc": "泛型（Generic）提供了一种在消费API对象时按需添加约束类型的能力，从而不必固定在某个单一的类型约束上，而是按使用的实际情况时具体约束"}, {"id": "6844903695407120398", "title": "富交互Web应用中的撤销和前进", "desc": "在web应用中，用户在进行一些富交互行为的操作时难免会出现误操作，比如在富文本编辑器设置错了字体颜色就需要撤回，做H5活动页面的时候不小心删了一个图片也需要撤回，更比如在线设计原型图应用的时候不小心删了一个页面等，总之在交互场景非常复杂的情况下，用户操作失误的可能性非常大，这时…"}, {"id": "6844903503886827533", "title": "Vue 2.5 正式发布 – TypeScript 集成优化，更好的错误处理，SFC 里的 Functional Support 及 SSR 支持更多的环境", "desc": "3.0 快出了，💊"}, {"id": "6946404610814771231", "title": "五、TypeScript中的接口", "desc": "是一种规范的定义，定义了行为和动作的规范自定义方法传参约束传的实参类型必须和形参类型一致1、属性类接口举例：原生js封装ajax2、函数类型接口加密函数类型接口 对方法传入的参数以及返回类型做约束3、"}, {"id": "6945771917601144869", "title": "四、TypeScript中的类", "desc": "抽象方法只能放在抽象类里面。 抽象类提供继承的基类，不能直接被实例化，直接实例化会报错。 用abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现且必须在子类中实现。"}, {"id": "6844903703238049806", "title": "React Suite 3.4.0 版本更新，支持 TypeScript", "desc": ""}, {"id": "6844903697277796359", "title": "ts-node 下错误堆栈问题排查小记", "desc": "此前 egg 需要支持 ts，所以我们在 egg-bin 中集成了 ts-node （ 详见 当 Egg 遇到 TypeScript，收获茶叶蛋一枚 ），从而能够让开发者直接跑用 ts 写的 egg 应用，当然也包括单元测试。 强迫症表示这可不行啊，这必须得解决，于是开始了对源…"}, {"id": "6844903869344923662", "title": "Angluar-模态视图构建简析（A）", "desc": "在一般的开发中，如果要创建一个模态视图，基本的思路是创建一个不可见的顶层视图，然后在需要的时候，展示这个顶层视图，那么基本的模态视图就创建完成了。 在Angluar中，我们可以使用CDK(component dev kit)中的Overlay来构建模态视图，它把模态的构建过程抽…"}, {"id": "6844903607045718024", "title": "TypeScript 2.9 RC 发布，微软脚本编程语言", "desc": "TypeScript TypeScript 2.9 RC 已发布，TypeScript 是由微软开发的自由和开源的编程语言，是 JavaScript 类型的超集，它可以编译成纯 JavaScript ，可以在任何浏览器、任何计算机和任何操作系统上运行。"}, {"id": "6844903537562877960", "title": "Angular5.1以及更多可用功能", "desc": "我们很高兴的宣布Angular5.1版本发布了。这是一个小版本，包含几个小的功能和bug修复。我们也发布了Angular Cli的1.6版本，以及Angular Material的第一个稳定版本。 有关功能和bug修复的完整列表，请参阅Angular，Material和CLI的…"}, {"id": "6912785500617064461", "title": "Typescrit从入门到放弃系列(三)-类型推导", "desc": "一.类型推导声明变量没有赋予值时默认变量是any类型声明变量赋值时则以赋值类型为准二.包装对象我们在使用基本数据类型时，调用基本数据类型上的方法，默认会将原始数据类型包装成对象类型#三.联合类型在使用"}, {"id": "6912783962528022535", "title": "Typescrit从入门到放弃系列(二)-基础类型", "desc": "只能接受null，undefined。一般用于函数的返回值 任何类型的子类型,never代表不会出现的值。不能把其他类型赋值给never"}, {"id": "6844903566910423054", "title": "利用angular依赖注入的multi选项更好的组织代码（翻译）", "desc": "在几乎所有的应用程序中都有一个将所有应用的端点都抛出的文件。如果你正在使用Angular，它可能看起来像这样： 乍一看，一切看起来都很好，但这个文件随着应用程序的增长就会产生一些问题。 我们违反了单一责任原则。我们面临合并冲突，我们的端点不可移植，并且很难在文件中找到端点位置。…"}, {"id": "6844903566025424910", "title": "RetrofitJs - TypeScript实现的声明式HTTP客户端", "desc": "由于文档已经在 github 里写好了, 这里并不是很想再写一次中文版文档, 本文将着重于解析工具的设计.( 好像看国人写的英文也是件蛮痛苦的事哇? 本人英文渣渣. ) 实际上 Retrofit 是 Java 的一款基于 OkHttp 开发的, 类型安全的声明式HTTP客户端,…"}, {"id": "6844903581145890824", "title": "[英] 机器学习驱动打包——JavaScript工具的未来", "desc": "Tools based on machine learning techniques allow us to perform data-driven chunk clustering and pre-fetching for single-page applications."}, {"id": "6844903920171483150", "title": "TypeScript基础语法篇", "desc": "原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。 任意值（Any）用来表示允许赋值为任意类型。 但如果是 any 类型，则允许被赋值为任意类型。 可以认为，声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都…"}, {"id": "6844903669872214030", "title": "通过proxies设置常量", "desc": "在这篇博文中，介绍了一种快速设置常量的奇淫技巧（类似于枚举值，但是并没有封装在命名空间里）。这是一个具有教育意义的难题，而不是你应该在代码中实际使用的东西。"}, {"id": "6977761817598623752", "title": "06-ts-迭代器和生成器", "desc": "Symbols symbol类型的值是通过Symbol构造函数创建的。 Symbols是不可改变且唯一的。 像字符串一样，symbols也可以被用做对象属性的键。 Symbols也可以与计算出的属性名"}, {"id": "6844904004615421966", "title": "聊一聊 TypeScript 的工程引用", "desc": "考察下面的代码结构: 假设这是一个前后端未分离的项目, client 目录下存放的是客户端代码; server 目录下存放的服务端代码; common 存放的是一些共用代码, 比如一些 util 方法, client/index.ts 和 server/index.ts 会引用…"}, {"id": "6888592944963616781", "title": "初识TypeScript", "desc": "本文是针对于初学TypeScript的同学所编写的一文,在这篇文章里,我会尽量从新手角度思考以及去提问问题(我自己也是个新手)并解决疑问,并且会带上一些重要的知识点带你快速入门TypeScript,但是并不会太深入 ,我目的只是想推动你学习TypeScript,以上。 接口是在…"}, {"id": "6900712964299423758", "title": "TypeScript中的高级类型工具类型及关键字", "desc": "本文主要帮助理解 TypeScript 中的高级类型及工具类型。在实际使用 TypeScript 的开发过程中，得益于这些高级类型于工具类型，我们可以更方便的构建出我们需要的类型。 比如说：我们在后台登陆信息认证中构建了一个用户，它是 LoginUser 的类型， 它包含了：“…"}, {"id": "6912721321214558222", "title": "TypeScript学习笔记（五）- 接口", "desc": "在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。 在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。 定义了一个接口 Person，接着定…"}, {"id": "6913924174725513223", "title": "Ts学习笔记（two day）", "desc": "你可以通过类型断言的方式告诉编译器，相信我，我知道自己在干吗，类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你已经进行了必须的检查。 类型断言有两种形式，一种是尖括号，一种是as，jsx…"}, {"id": "6969557512936751111", "title": "用Typescript编译器解析获取代码里的类型", "desc": "最近试验了一下用Typescript编译器的接口替换原先用Babel做解析的一段代码，用于尽可能找出ES模块中export的函数。"}, {"id": "6844903597252018183", "title": "使用 TypeScript 开发你的项目", "desc": "早在去年（2017），TypeScript 赢来了它的爆发式增长。时至今日，随着 JavaScript 的代码数量越来越庞大，越来越多的开发者意识到 JavaScript 在构建大型项目时的不足之处。JavaScript 是动态类型的，只能在 runtime 时进行类型检查；同…"}, {"id": "6844904068205248525", "title": "TypeScript真香系列-高级类型", "desc": "TypeScript真香系列的内容将参考中文文档，但是文中的例子基本不会和文档中的例子重复，对于一些地方也会深入研究。另外，文中一些例子的结果都是在代码没有错误后编译为JavaScript得到的。如果想实际看看TypeScript编译为JavaScript的代码，可以访问Typ…"}, {"id": "6918687523141058568", "title": "使用TypeScript制作爬虫小案例", "desc": "目标网址。 我们先定义一个类，定义一个获取目标网页的方法。这里我们使用superagent来发起请求，同时使用了es6的async await来处理异步操作；拿到数据之后我们打印结果会发现html结构存储在返回对象的text属性中，所以我们直接把text存储的值return出去…"}, {"id": "6864521018245906439", "title": "初探 Typescript 解析器", "desc": "前段时间看了下开源组件 stryker 的源码，对 Typescript 的解析器产生了兴趣。这个开源组件是用来检查单测质量的，通过识别源码自动更改某些代码内容，然后看单测能否检测出来。Typescript 解析器做的，就是识别源码这一关键步骤。 于是花了些时间学了下 Type…"}, {"id": "6844903655338950663", "title": "TypeScript快速入门", "desc": "总所周知，JavaScript语言并不是一门面向对象的语言，而是一种解释性的函数式编程语言。在前端Web还不是很复杂的情况下，使用JavaScript是可以应付各种需求的，但当前端页面变的越来越复杂时，JavaScript就显得比较力不从心了，而TypeScript就是为了解决…"}, {"id": "6844904102615334919", "title": "console.log(typeof  typescript  === 'javascript' )  --- 浅谈typescript", "desc": "记录下学习typescript的小结，也算是尝试着自己写些东西，从一个前端开发的角度去看待typescript这个新生物（2020年了，它不新了，是个老东西了，嘿嘿）。 首先说说typescript是个什么东西，哦，它不是个东西，它是一种基于js的扩展语言，更强调数据的类型，在…"}, {"id": "6857715090649677831", "title": "  一文带你了解TypeScript基础", "desc": "TypeScript(TS) 是一种由微软开发的自由和开源的编程语言，它是 JavaScript 的一个超集，扩展了 JavaScript 的语法。 2. ts类型初探 ts里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 …"}, {"id": "6931517309911597070", "title": "理解Typescript装饰器", "desc": "在这个例子中，对于使用床的人而言，“睡觉”这个动作没有发生改变，床还是那张床，只不过我们通过床垫、被絮、按摩机增加了额外的功能。在程序设计中，它们就可以分别以装饰器的形式进行设计，再通过组合使床拥有全部的装饰特征，程序中类之间的关系使用uml类图表示如下： 前端领域同样存在装饰…"}, {"id": "6844904128989102087", "title": "TypeScript 基础", "desc": "TypeScript 是 JavaScript 的超集, 支持 JavaScript 的写法，并且提供类型检查，TypeScript 提供了一些面向对象编程的能力。"}, {"id": "6844904029231775752", "title": "《五》大话 Typescript 函数与类", "desc": "TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。 在实际开发中, 函数调用经常会直接使用解构赋值的方式, 进而减少赋值. 这种场景的声明方式如下: 剩余参数在使用的时候, 实际是一个数组. 按照这个思路, 我们只需要声明数组格式即可. 代码如下: …"}, {"id": "6844903799463608333", "title": "用 TypeScript 开发手势库 - (1)web开发常用手势有哪些?", "desc": "说在最前面,本文是一个系列文章的开头, 这个系列里我会讲如何用typescript开发一款支持pc和手机端的手势库any-touch, 以及通过jest让你的代码测试覆盖率100%. 今天的文章里我们先不讲代码, 我们讲一下都有哪些手势以及手势的逻辑, 理解了逻辑再写代码就简单…"}, {"id": "6934281275696119822", "title": "浅谈TS中的类型兼容性和This", "desc": "TypeScript使用结构化的类型检查系统，即判断两个类型是否兼容，只需要判断他们的“结构”是否一致，也就是结构属性名和类型是否一致。 两个拥有相同结构的类型，子类型可以赋值给父类型，反之报错。 如上子类型dog可以赋值给父类型，反之报错。这样的设计是处于类型安全的考虑。an…"}, {"id": "6917263304058486791", "title": "TypeScript 开发备忘录 | 七日打卡", "desc": "在开发中使用 TypeScript 已经一年多了，逃不开“真香定律”哈，日常重度依赖 TypeScript。在组件开发、前后端对接或者定位问题的过程中，类型检查发挥了极大的作用，可以说提高生产力了。这里就总结一些个人的常用方法吧，也算备忘录了。 TypeScript 有什么高级…"}, {"id": "6926817808160882702", "title": "Typescript的奇妙探险(初体验)", "desc": "感谢大家百忙之中点击进入这篇文章，因缘和合，我们从网络的万水千山之隔遥聚于此，也相信看到这里的同学有着相似的特点--强烈的求知欲望和持续的学习热情。 综上归根结底，javascript是一门动态弱类类型语言，对变量类型的十分宽容，如果我们长期在没有类型判断的思维下开发，很容易养…"}, {"id": "6844904025771474952", "title": "TypeScript 学习与总结", "desc": "基本类型booleannumberstring数组T[]元组[T,U]枚举enumany空值void与any相反，表示没有任何类型nullundefinednever表示永远不存在的类型，如抛出异常o"}, {"id": "6844904019886866445", "title": "typeScript中的高级类型", "desc": "每次都显式标注类型会比较麻烦，TypeScript 提供了一种更加方便的特性：类型推导。TypeScript 编译器会根据当前上下文自动的推导出对应的类型标注，这个过程发生在："}, {"id": "6943525154840379406", "title": "TypeScript的高级类型简介", "desc": "在前端开发中，大家入门ts其实是很简单的，只要掌握一些基本的类型知识就可以逐步的将js过渡到ts的应用，然而，当我们的项目很庞大复杂的时候，在开发过程中很容易将一些类型定义成any,这里主要介绍一下ts的高级类型，帮助大家更好的定义变量类型，从来减少any的使用。 泛型是强类型…"}, {"id": "6844903920678993933", "title": "使用 TypeScript，GraphQL 和 服务器渲染写一个诗词的小站", "desc": "使用 typescript，graphql 和 服务器渲染写一个诗词的小站，并优化网站加载速度，减小打包体积。"}, {"id": "6844903495888273422", "title": "IMweb Conf 2017图文(部分)笔记 -- 上", "desc": "IMWebConf 2017前端大会的发起方是腾讯公司，组织者是腾讯公司最专业的前端团队之一IMWeb团队，官网地址：http://2017.imweb.io/，难得的是腾讯副总裁Ross做开幕致辞，分享了自03年加入腾讯十几年的开发历程，生动而有趣的分享。 有w3c经理分享w…"}, {"id": "6919513472556335111", "title": "TypeScript", "desc": "从类型安全的角度可以分为强类型与弱类型从类型检查的角度可以分为静态类型与动态类型javaScript就是典型的弱类型且动态类型语言，语言本身的类型系统是非常薄弱的，几乎没有任何的类型限制，及其灵活多变"}, {"id": "6844904084009385992", "title": "TypeScript进阶篇（二）", "desc": "生成tsconfig.json文件，也就是TS的编译配置文件。 只有直接运行tsc时，才会走tsconfig.json中的配置。在未配置tsconfig.json的情况下，会执行编译所有的ts文件 compilerOptions字面意思：就是编译过程中的一些属性或配置。 指定文…"}, {"id": "6844904080477798414", "title": "从两个角度看 Typescript 中的类型是什么?", "desc": "0.作者以及原文介绍作者是Dr.AxelRauschmayer，号称”德国阮一峰“，本文原文来自于他的博客：https://2ality.com/2020/02/understanding-types"}, {"id": "6844903534954020878", "title": "Parcel,0配置打包typescript和react", "desc": "平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。 现在很多人…"}, {"id": "6844903568424566798", "title": "vscode-eslint的踩坑实践--typescript无法格式化", "desc": "vscode-eslint的踩坑实践--typescript无法格式化引言最近开发的前端项目随着开发的人员越来越多，代码规范已经是一个很难避免的问题了，虽然百度有fecs这个规则检查，但是不论是ico"}, {"id": "6844903861744828429", "title": "TypeScript基本类型检查", "desc": "==因为TS有严格的类型检查，在对函数重命名的时候，可以使用F2来全局替换。== 通过在tsconfig.json中的compilerOptions添加strictNullChecks: true, 可以获得更加严格的空类型检查，之后null和undfined只能赋值给自身。 …"}, {"id": "6962373944804376606", "title": "前端：设计模式 - 策略模式及其应用", "desc": "基于 typescript 实现策略模式以及应用。 本文通过一个例子，讲解了策略模式以及在应用。例子是简化版的 axios 配置合并。"}, {"id": "6844903621197316110", "title": "深入 TypeScript 的类型系统", "desc": "导语 在2017年，TypeScript 已经占领了前端非原生语言市场的主导地位。node 的后继者 deno 也是构建在 TypeScript 之上的。本文将介绍类型系统为我们带来了什么好处，然后从集合的角度探一探类型系统的究竟，并介绍 TypeScript 在可靠性和生产力…"}, {"id": "6844904006817415176", "title": "使用 Proxy 结合观察者模式来实现数据双向绑定", "desc": "观察数据更新，然后通知订阅者更新视图从而达到数据双向绑定效果，Vue 使用了 Object.defineProperty() 这个方法来劫持了 VM 实例对象的属性的读写，我这里主要采用了 ES6 Proxy，实例化的时候 _initSet() 把 data 的数据挂载到 th…"}, {"id": "6942338521541640223", "title": "一种编辑 TypeScript 代码的方式", "desc": "众所周知，TypeScript 在 #13940 中开放了 transformer 的API，在此之后， 这些 API 已经成为在 TypeScript 生态中编写代码生成器（codegen），代码转换（transformer）的普遍方式。同时，目前这些 API 也有它的一些缺…"}, {"id": "6882765571566354440", "title": "深入理解TypeScript——文档篇之函数", "desc": "通常需要将类型抽离成接口，形成规范。 函数定义赋值语句一边有类型。 ​ ts中传递给一个函数的参数个数必须与函数期望的参数个数一致。 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能。 注意：可选参数必须跟在必须参数后面。 在TypeScript里，我们也可…"}, {"id": "6844903713283457037", "title": "我理想中的状态管理工具", "desc": "现已存在许多成熟的状态管理解决方案：Redux、Mobx、Mobx-state-tree，还有基于 Redux 的 Dva.js、Rematch... 但对于我个人来说，理想的状态管理工具只需同时满足两个特点： 要做到这两点其实并不简单。 我碰巧写写过一个类似状态管理库，叫 m…"}, {"id": "6908742407819362317", "title": "TypeScript学习笔记系列三(接口)", "desc": "思维导图用处：函数、类、构造器函数：interface类：interface继承VSinterface构造器：interface接口的继承"}, {"id": "6844903505233182728", "title": "为Angular 4开发的UI组件库：FreeNG", "desc": "FreeNG是一款基于Angular 4的UI框架，提供了诸多强大的可以重新组合的UI组件，可以让你在项目开发中以搭积木的方式来快速高效的实现业务需求。 FreeNG最新版本为v0.4.0，其中包含了按钮、表单、选择器、表格、模态框、编辑器、图表、自定义滚动条等40多种组件，未…"}, {"id": "6844903508987265038", "title": "JavaScript 和 TypeScript 交叉口 —— 类型定义文件(*.d.ts)", "desc": "TypeScript 的核心在于静态类型。但是主流的库都是 JavaScript 编写的，那么如何让这些第三方库也可以类型呢？ 这篇文章我们来讲解 JavaScript 和 TypeScript 的静态类型交叉口 —— 类型定义文件。"}, {"id": "6844903613534306318", "title": "精读《Typescript2.0 - 2.9》", "desc": "2.0-2.8，2.9 草案. 我发现，许多写了一年以上 Typescript 开发者，对 Typescript 对理解和使用水平都停留在入门阶段。造成这个现象的原因是，Typescript 知识的积累需要 刻意练习，使用 Typescript 的时间与对它的了解程度几乎没有关…"}, {"id": "6892329006381662221", "title": "系列之颜色选择器（一）：内部事件", "desc": "前言最近接到一个任务，通过第三方库的形式写一个颜色选择器并引入wangEditor，以此优化wangEditor当前字体颜色和背景颜色功能。为了方便理解，我定义了一些名词一：准备工作我这里是用的Typ"}, {"id": "6950637625774440455", "title": "20分钟了解TypeScript", "desc": "1. 为什么要学习TypeScript?javaScript的书写自由度非常高，最为突出的就是JavaScript没有类型的概念。该笔记是在学习尚硅谷李立超老师的学习视频结合官方文档所做。例如以下代码"}, {"id": "6844903870506745864", "title": "TypeScript中的函数详解", "desc": "es5里面方法的实参和形参可以不一样，但是ts中必须一样，如果不一样就需要配置可选参数。==可选参数要配置到所有参数的最后面=="}, {"id": "6864714103382867976", "title": "TypeScript 入门指南", "desc": "其实快速入门 TypeScript 你只需要去阅读官方文档即可，之所以还需要总结本文的原因是，官方文档有些地方难以理解以及内容较多不易于快速上手。因此作者总结此文，旨在帮助同学快速上手 TypeScript 并且能轻易理解 TypeScript 晦涩难懂的部分。 支持 ES6 …"}, {"id": "6929144387821649933", "title": "「译」深入了解TypeScript系列-unknown类型", "desc": "TypeScript3.0介绍了新类型unknown这是any类型的类型安全（type-safe）的参照物。 unknow和any的主要区别在与：unknown比any更严格些：在对类型为unknown的值执行大多数操作之前，我们必须做某种形式的检查，而在对类型为any的值执行…"}, {"id": "6844903913343172616", "title": "TypeScript入门指北（一）", "desc": "随着前端在各种类型的项目中扮演的角色越来越重要，人们发现 JavaScript 这门弱类型语言已经不能满足当下的需求，尤其是在一些大中型项目中，JavaScript 远远没有一些强类型语言用得顺手，而 TypeScript 因此诞生。 简单来讲，TypeScript 是 Jav…"}, {"id": "6961704314993639432", "title": "TypeScript入门（二）", "desc": "一、Map 对象 Map 是 ES6 中引入的一种新的数据结构，保存键值对，并且能够记住键的原始插入顺序。 Map使用方法： new Map()：创建 Map map.clear() – 移除 Map"}, {"id": "6844904177492033544", "title": "TypeScript  学习笔记", "desc": "typeScript 是一门基于javaScript 之上的一门编程语言，解决了javascript 自有的语言类型系统的不足。TypeScript 大大提升了系统的安全性。 1.强类型，从语言层面限制函数的实参类型必须与形参类型相同，而弱类型没有。 2.强类型有更强的语言类型…"}, {"id": "6844903863107993614", "title": "TypeScript由浅入深学习", "desc": "Typescript是由微软开发的一款开源的编程语言。 typeScript是javascript的超级，遵循最新的ES6、ES5规范。Typescript扩展了javascript的语法。 Typescript更像后端Java、C#这样的面向对象语言可以让js开发大型企业项目…"}, {"id": "6912316609046511629", "title": "Typescript-Class(1)", "desc": "接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。 当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor存在于类的静态部分，所以不在检查的范围内。"}, {"id": "6908971419044954126", "title": "2020年TypeScript常见问题汇总", "desc": "最近因为项目使用TypeScript开发，通过翻阅一些github上的源码，一些论坛的文档，渐渐的有所了解。对于初学者来说，无论去学习哪个框架或者哪种语言，我们首先要知道的应该先去了解如构建开发环境。下面小编把用TypeScript开发项目中遇见的问题做个小结。希望对大家工作有…"}, {"id": "6844904104137867278", "title": "《前端之路》- TypeScript (四) class 中各类属性、方法，抽象类、多态", "desc": "[TOC]一、TypeScript中的类转换成ES5的代码后：二、TypeScript中类的继承三、TypeScript中公共，私有与受保护的修饰符3-1、属性的public3-2、属性的privat"}, {"id": "6844903570542706696", "title": "Web 前端开发日志（一）：Proxy 与 Reflect", "desc": "Proxy 和 Reflect 是用于实现元编程的 API，是应对复杂应用程序与工程管理的得力助手. Proxy 一般用于拦截 JS 的默认行为，Reflect 一般用于对被拦截的对象进行修改操作. Proxy 提供拦截 JS 默认行为的能力，比如从一个对象的属性取值、赋值时，…"}, {"id": "6966770969079709703", "title": "typescript-基本类型", "desc": "注意事项 自动类型判断 TS拥有自动的类型判断机制 当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型 所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明 声明变量如果不指定类"}, {"id": "6949315742978277390", "title": "【Typescript小手册】高级类型", "desc": "Typescript 的高级类型指操作基本类型和复合类型而得的类型，包括： - 联合 - 交叉 - 泛型 - 字面量类型"}, {"id": "6844903703560847367", "title": "快速学习RN之属性props和状态state(二)", "desc": "在react-native run-android执行成功跑起来后,如果想修改页面和修改代码逻辑后看效果,不需要像原生一样,再run一次,安卓的项目如果moudle比较多的话building的时间真的是很长. 我个人理解,该属性的值是在父组件中引用子组件时候指定的,该属性是子组…"}, {"id": "6844903667972177928", "title": "浅谈 TypeScript - 前言开篇", "desc": "传统意义上的 JavaScript 是一个非常松散的语言，因此在以往的面试过程中，很大几率会问及类型以及一些区别。但更传统的软件工程中我们常常在使用的是由编译器进行过编译的语言（转换成了机器实际可运行的格式），由于编译阶段的存在，我们可以更易于找到错误和进行优化（想想 Java…"}, {"id": "6844903570546884621", "title": "Web 前端开发日志（二）：JavaScript 的二进制操作", "desc": "在浏览器中处理二进制数据，需要使用 Typed Array、ArrayBuffer、DataView. 在浏览器环境中使用的二进制数据类型一般为 Typed Array（类型数组） ，它和普通的数组很像，只不过里面的成员类型是严格要求，并且长度固定的. Int8Array：每个…"}, {"id": "6964692485415108645", "title": "TypeScript 高级用法", "desc": "hi，豆皮粉儿们，今天又和大家见面了，本期分享的是由bytedancer“米兰的小铁匠”， 带来的TypeScript高级使用， 适用于对TypeScript已经有所了解或者已经实际用过一段时间的同学"}, {"id": "6844904192331481101", "title": "【vue选手极速进阶】图文详解vue+ts+class+注解风格开发排坑全指南（更新）", "desc": "从vue开始火热起来到现在，已经基本上前端开发小伙伴入门的技能了。相信这么久时间过去之后，大家也早已习惯vue的开发模式了。那么，你和别人比比的时候，难道不想有些许亮点吗？虽然目前vue2+对ts的支持没有像react、ng等支持的更友好，但是随着社区相关工具链的完善，其生产项…"}, {"id": "6981300825054248996", "title": "TypeScript 每周挑战第 2 期：如何在 Pick 之后仍然保持 Union 关系？", "desc": "其实大多数 TypeScript 开发者，对 TypeScript 的利用，还停留在初级水平。 不信？来试试 TypeScript 每周挑战吧！ 第 2 期挑战题目全新开启~"}, {"id": "6991642741612478472", "title": "⚡qiankun微前端中的应用通信(三)-结构模块化，用法简单化｜8月更文挑战", "desc": "一个qiankun微前端的应用间通信模块，该方案以redux为核心，采用发布-订阅模式进行封装，实现应用间通信数据上的响应式，代码结构模块化，api仿照vuex，降低上手难度, 并可适用多框架"}, {"id": "6991728891870052359", "title": "TS（TypeScript）基础知识一：数据类型（变量）声明｜ 8月更文挑战", "desc": "布尔类型boolean、数字类型number、字符串类型string、任意类型any、null类型、undefined、object类型、数组类型、枚举类型"}, {"id": "6844904037922373639", "title": "你可能不知道的 TypeScript 高级技巧", "desc": "在 2020 年的今天，TS 已经越来越火，不管是服务端（Node.js），还是前端框架（Angular、Vue3），都有越来越多的项目使用 TS 开发，作为前端程序员，TS 已经成为一项必不可少的技能，本文旨在介绍 TS 中的一些高级技巧，提高大家对这门语言更深层次的认知。 …"}, {"id": "6982082111540822052", "title": "[译]TypeScript 4.4 Beta版本发布", "desc": "TypeScript4.4版本的一些主要亮点： 别名条件下的控制流分析 Symbol和模板字符串模式索引签名 Catch变量中默认为unknown类型（--useUnknownInCatchVaria"}, {"id": "6996590290555371534", "title": "TypeScript 装饰器的基本语法", "desc": "相信大家一定在很多代码中见过这样的用法： 对，没错像 @classDecorator 、@propertyDecorator 这样子的语法就是装饰器。 装饰器是什么 要解释装饰器是什么，这里引用官方文"}, {"id": "6973913696628113444", "title": "汉字笔顺动画C端实现&B端原理 - [大力智能 前端]", "desc": "一、简介 笔顺后台的目标是只要对于给定的字体文件（WOFF, OTF, TTF ）以及需要的字形（汉字，字母 or 其他各国的语言），就能产出与之对应的笔顺动画数据。是对开源项目Make me han"}, {"id": "6995842578914476062", "title": "TypeScript 数组的类型", "desc": "使用 TypeScript 可以帮你降低 JavaScript 弱语言的脆弱性，帮你减少由于不正确类型导致错误产生的风险，以及各种 JavaScript 版本混杂造成错误的风险。"}, {"id": "6980269488998449183", "title": "原创 Typescript 中你可能不知道的一些东西", "desc": "Typescript 是一种很不错的语言。我用了差不多有两年了，对这门语言还是挺喜欢的。它是 Javascript 的超集，但是远不止于此。 Typescript 在日常开发中非常好用，也有能帮我避免"}, {"id": "6986438080085360671", "title": "让你彻底理解TypeScript中的readonly", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 1.readonly的讲解 2.什么时候使用readonly 3.readonly的基本使用 4.有新的发现 5.这样"}, {"id": "6907831475089965064", "title": "走近Ts，用了爽，用后一直爽（二)", "desc": "中写了Ts的一些类型、属性等简单语法，以及类、接口、装饰等高级用法后，今天我们来看看如何在vue项目中使用ts,目前使用公司项目用的较多的还是vue2.x,vue是渐进式的框架，我们学习也要渐进式的，所以本文也先围绕vue2.x来对Ts进行实战，为后期切换vue3.0打下基础。…"}, {"id": "6895538129227546638", "title": "进来看看，TypeScript居然还能这么玩", "desc": "keyof T 拿到 T 所有属性名, 然后 in 进行遍历, 将值赋给 P, 最后 T[P] 取得相应属性的值. 当然这也只能一层 如上面Partial例子来看jack.person.name 是可以直接修改的。 上面的-?, 这里很好理解就是将可选项代表的 ? 去掉, 从而…"}, {"id": "6844903792865984520", "title": "[译] TypeScript 牵手 Babel：一场美丽的婚姻", "desc": "感谢 Babel 的 TypeScript 插件（@babel/preset-typescript），TypeScript 从未变得如此简单，这是 TypeScript 和 Babel 团队长达一年的官方合作成果。本文列举出了4条理由来证明 TypeScript 和 Babel…"}, {"id": "6983281839460843527", "title": "TypeScript——高级类型", "desc": "介绍了TypeScript的高级类型。比如交叉类型、联合类型、类型保护与区分类型、类型别名、字符串字面量类型、多态的 this类型、索引类型（Index types）、映射类型等等。"}, {"id": "7000964572098068488", "title": "Typescript的Enums", "desc": "8月更文挑战，Typescript的Enums的基本使用，为什么使用enum以及什么时候使用enum"}, {"id": "6844903939079405576", "title": "Vue3.0之前你必须知道的TypeScript实战技巧", "desc": "很多人对TypeScript的使用还停留在基本操作上,其实TypeScript的特性非常强大,我们利用好这些特性可以有效地提高代码质量、加速开发效率，今天就介绍9个非常实用的TypeScript技巧或者特性. 我们可以通过/** */来注释TypeScript的类型，当我们在使…"}, {"id": "6969457470783619103", "title": "TypeScript 学习笔记", "desc": "本文初衷为笔者在使用一段时间 TS 后, 对所学所想做一个记录. 文章内容较为基础, 适合作为入门级教程学习. 欢迎与笔者一同进入这严谨却又妙趣横生的奇幻旅途."}, {"id": "6844903616143179784", "title": "Deno 并不是下一代 Node.js", "desc": "这几天前端圈最火的事件莫过于 ry(Ryan Dahl) 的新项目 deno 了，很多 IT 新闻和媒体都用了标题：“下一代 Node.js”。这周末读了一遍 deno 的源码，特意写了这篇文章。长文预警（5000字，11图）。 0. 为什么开发 Deno？ 这是我上周做的一张…"}, {"id": "6885672896128090125", "title": "TypeScript的另一面：类型编程", "desc": "作为前端开发的趋势之一，TypeScript正在越来越普及，很多人像我一样写了TS后再也回不去了，比如写算法题写demo都用TS，JS只有在Webpack配置（实际上这也可以用TS写）等少的可怜的情况下才会用到（有了ts-node后，我连爬虫都用ts写了）。 预实现的ES提案，…"}, {"id": "6981487855637889032", "title": "寻找旋转数组中的最小数字", "desc": "把一个数组最开始的若干个元素搬到数组的末尾，就称之为数组的旋转。有一个递增排序数组，将其开头的若干个元素移动至数组的末尾，寻找其中的最小值。 本文就跟大家分享下如何用最快的速度找到递增旋转数组中的最"}, {"id": "6996214451523289096", "title": "Typescript中的接口 类", "desc": "使用 TypeScript 可以帮你降低 JavaScript 弱语言的脆弱性，帮你减少由于不正确类型导致错误产生的风险，以及各种 JavaScript 版本混杂造成错误的风险。"}, {"id": "6999620488825667598", "title": "重学前端 | TypeScript入门之基础知识", "desc": "本篇主要介绍了TS的一些基础知识。 前言 『前期回顾』 重学前端 | TypeScript入门之预备知识 基础知识 TS中的类型层次 Un"}, {"id": "6997609858002321445", "title": "🔥摸鱼系列，一键生成TS+Interface+接口", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 今天给大家推出一份新鲜的摸鱼神器，请看噔噔蹬蹬。。。 搞错了，再来！ 不知道大家在用TS的时候，有没有遇到过这种问题， 明明后端接口里已经定"}, {"id": "6971341417893330952", "title": "Typescript一些常用的泛型工具", "desc": "前言 本文将简要介绍Typescript一些常用泛型工具的作用以及如何使用，简单总结了一下。 Typescript泛型工具 Partial 将传入的属性变为可选项 Record<K, T> 类型参数K"}, {"id": "7001478891701436429", "title": "TypeScript 开发 vue 项目", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 使用 TypeScript 开发 vue 项目 在 vue 项目中启用 TypeScript 支持 关于编译器 要使用 TypeScrip"}, {"id": "6994318311974502436", "title": "手把手教你用TypeScript封装window.localstorage", "desc": "手把手教你使用 TypeScript 来对原生的window.localstorage 进一步的封装，新增多种api接口，并打包部署到npm。"}, {"id": "6998888580999446535", "title": "在electron中监听系统剪贴板变化", "desc": "前言 因为要完成剪贴板历史记录功能，经过查阅electron剪贴板文档。没有发现有剪贴板变化的钩子事件，于是决定自己实现一个。 electron 中有读取剪贴板内容API，可以借助此API封装监听定时"}, {"id": "6940053362058461198", "title": "聊一聊 Vue 3 动态组件是如何工作的", "desc": "在这篇文章中，阿宝哥将介绍 Vue 3 中的内置组件 —— component，该组件的作用是渲染一个 “元组件” 为动态组件。如果你对动态组件还不了解的话也没关系，文中阿宝哥会通过具体的示例，来介绍动态组件的应用。由于动态组件内部与组件注册之间有一定的联系，所以为了让大家能够…"}, {"id": "6996578939288158239", "title": "TypeScript 类（一）", "desc": "使用 TypeScript 可以帮你降低 JavaScript 弱语言的脆弱性，帮你减少由于不正确类型导致错误产生的风险，以及各种 JavaScript 版本混杂造成错误的风险。"}, {"id": "6877373779471761416", "title": "Typescript在Vue中的实践", "desc": "项目变的越来越庞大时，记住一个变量描述的具体是什么也是一件很困难的事，可能需要我们不停的去查找类型的定义，事实上 ts 可以很好的解决这个问题，虽然一开始的类型定义稍显繁琐，但是他带来的类型提示、代码补全等会让我们觉得这份工作量是值得的。 这可能是类型系统一个比较大的优势了，之…"}, {"id": "6987590161735368718", "title": "Typescript 类型体操 —— Simple Vue ", "desc": "🤔️要求 实现类似Vue的类型支持的简化版本。 通过提供函数名称SimpleVue（类似于Vue.extend或defineComponent），它应该正确地推断出计算和方法内部的this类型。"}, {"id": "6985346145799110669", "title": "【Typescript】精选的知识点", "desc": "精选出Typescript的常用容易忽略的点，比如enum、接口interface 和 类型别名type的区别 还有高级用法，比如is、typeof、keyof、泛型"}, {"id": "6991792107304255495", "title": "从0开始的TypeScriptの二：类型系统", "desc": "类型系统是TypeScript中一个重要的概念，在JavaScript中有的类型在TypeScript中也都存在，并且还多出一些新的类型定义"}, {"id": "7000267162774405134", "title": "体验了一把 swc 替代 babel 和 tsc", "desc": "背景 Next.js 11 已经使用了 swc 替换 babel 进行了 js 代码编译，构建速度提升了不少。于是针对自己的组件库进行了一波优化。 组件库使用了 React + TypeScript "}, {"id": "6844904102355271694", "title": "【开源】一个 React + TS 项目模板", "desc": "在小公司待了三年多，前端团队很小很小，没有前端大佬坐镇，完全处于自我摸索的状态。两年前开始独立负责前端项目，热衷于自己手搭项目。对于那个时候的我来说，一切都处于朦胧的状态，虽然有心想要把项目设计的更好，但是没有什么好的方向/思路（就比如刚开始写项目，调用后端接口都是分散在每个模…"}, {"id": "6992956547252879374", "title": "从0开始的TypeScriptの五：webpack打包typescript", "desc": "webpack打包TS : 相信很多前端的朋友都知道webpack是什么，webpack 是一个模块打包器。"}, {"id": "6973735400384757773", "title": "手摸手一起学习Typescript第一天，数据类型和vscode的搭配typescript", "desc": "这是我参与更文挑战的第5天，活动详情查看：更文挑战 1.安装node 2.全局安装typescript 3.Typescript开发工具vscode自动编译.ts文件 创建tsconfig.json文"}, {"id": "7000364283364114440", "title": "node + TS服务端开发实践", "desc": "主要技术栈：框架选择express，TS语言开发，TS在JS基础上增加了多种数据类型，包括其提供的接口编程、类型检查等特性，非常适合编写一套简单的服务端程序。"}, {"id": "6997700173921009672", "title": "Vue3+TS+ElementUI搭建管理系统之MockJs数据实现表格分页", "desc": "Vue3+TS+ElementUI搭建后台管理系统之MockJs数据实现表格分页，ts中安装mock"}, {"id": "6995069044365721630", "title": "玩转TypeScript工具类型（下）", "desc": "本文是《玩转TypeScript工具类型》系列的最后一篇，包含了如下几部分内容： ThisParameterType<Type> OmitThisParameter<Type> ThisType<Ty"}, {"id": "6997681580772687909", "title": "用 typescript 写一个工具函数库", "desc": "通过这篇文章你可以学到：ts-mocha和chai 来写测试用例、如何写一个babel插件、如何用schame-utils来做options校验、typescript 双重断言的一个应用场景。"}, {"id": "6973669032738160670", "title": "【端午节来了Typescript走一波🚀🚀🚀】", "desc": "前言 近几年来前端的发展趋势一度离不开ts静态类型，包括我自己在用了之后就在也没回头过，在开发的体验中确实能在静态编译的时候帮我们避免很多问题"}, {"id": "6871018004289683463", "title": "多种方式实现自定义 React 路由拦截弹窗", "desc": "在做项目的时候，你的产品可能会提出这样的需求：在某些拥有表单的页面中，如果用户还未保存表单数据，就想去浏览别的页面内容。这时候需要给一个弹窗，提示用户是否需要在未保存数据的情况下跳转页面。 最简单的实现就是使用 react-router 提供的 Prompt 组件来控制是否显示…"}, {"id": "6998345658964901924", "title": "TypeScript-泛型", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "7000684849652563975", "title": "TypeScript  多个最佳通用类型候选和泛型接口", "desc": "1 多个最佳通用类型候选 当有多个最佳通用类型可用时，现在编译器会做出选择（依据编译器的具体实现）而不是直接使用第一个。 这会在多种情况下发生。具有一组共享的必需属性和一组其它互斥的（可选或其它）属性"}, {"id": "6995786330533806117", "title": "typescript在实际项目中的运用", "desc": "最近在公司技术群里发现一个 typescript体操题库，之前虽然也用 ts但只是当成一个纯粹的类型注释来用，也听说过 ts的类型可编程性，但一直不解其意，直到我看到这个库后大感震撼"}, {"id": "6982916386758623262", "title": "【Typescript】装饰器", "desc": "装饰器：是一种特殊类型的声明，它能够被附加到类声明，方法，属性或参数上，可以修改类的行为 通俗的讲装饰器就是一个方法，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能。"}, {"id": "6993284345649872909", "title": "从0开始的TypeScriptの六：webpack5热更新打包TS", "desc": "热更新，是指 Hot Module Replacement，缩写为 HMR。 模块热替换是 webpack 提供的最有用的功能之一"}, {"id": "6984268372930199583", "title": "组件库实战 | 用vue3+ts实现全局Header和列表数据渲染ColumnList", "desc": "🖼️序言 最近在用 vue3 和 ts 捣鼓一些小工具，发现平常开发中一个很常见的需求就是，数据列表的渲染。现在重新学习，发现我在学 `vue2` 时的很多设计规范和逻辑都考虑的不是特别妥当。"}, {"id": "6991372329414557733", "title": "从0开始的TypeScriptの一：启航", "desc": "总所周知，每个新的系列文章第一篇都是比较简单的介绍，本次的TypeScript也不例外，第一篇先水一下了"}, {"id": "6993873401815236616", "title": "学习笔记——TypeScript基础语法与面向对象", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 1. typescript基础语法 1. 类型声明 类型声明是 TS 非常重要的一个特点 通过类型声明可以指定 TS 中变量（参数、形参）的"}, {"id": "6844903999074729997", "title": "TypeScript 真香系列——接口篇", "desc": "JavaScript 是弱类型的语言，所以并不会对我们传入的代码进行任何的检测，有些错你自己都说不清楚，但是就出了问题。 这时候你会发现这段代码还是有点长，代码不便与阅读，这时候就体现了 interface 的必要性。 使用 interface 对 user 的类型进行重构。 …"}, {"id": "7004829836376178696", "title": "vue3之ts入门", "desc": "​  本文是ts入门学习的记录，如有问题欢迎大家指出。 一、数据类型 1、原始类型 Number String Boolean BigInt Symbol Null Undefined 其中 null"}, {"id": "7000621456258236429", "title": "typescript之枚举", "desc": "1. 数字枚举 由上可知，默认情况下，TOP 的初始值为 0，其余的成员会从 1 开始自动增长。 以上的枚举示例经编译后，对应的 ES5 代码如下： 2.字符串枚举 在一个字符串枚举里，每个成员都必须"}, {"id": "6994317900299370532", "title": "使用ts-compiler来遍历AST处理你的代码", "desc": "前言 本文在于给初次了解 ts 编译器的前端同学做一个初步引导，通过一系列由浅入深的示例后能够掌握 ts 编译器的基本使用，包括 ast 遍历，transform 函数编写、表达式节点创建等，同时对 "}, {"id": "6999451760934780941", "title": "TypeScript-装饰器", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "7002232432023830535", "title": "TypeScript快速入门教程（一）、基础类型和变量声明", "desc": "目前其实移动端与前端的界限在慢慢的模糊，很多公司已经将移动端和前端整体统称为大前端了，而整体的技术栈和技术人员，也在逐步趋于全面和面对整个大前端技术栈。虽然技术终究是细分的，但是了解更多知识，有一个完"}, {"id": "7005199115759910948", "title": "【学习笔记】TypeScript class", "desc": "在学习typescript，当作学习笔记来记录。 1 发展 使用函数和基于原型的继承来创建可重用的组件 基于类的面向对象方式 2 语法 new 操作符会创建一个对象，并调用 contructor 构造"}, {"id": "6919478002925453320", "title": "TypeScript 中提升幸福感的 10 个高级技巧", "desc": "用了一年时间的 TypeScript 了，项目中用到的技术是 Vue + TypeScript 的，深感中大型项目中 TypeScript 的必要性，特别是生命周期比较长的大型项目中更应该使用 TypeScript。 以下是我在工作中总结到的经常会用到的 TypeScript …"}, {"id": "6995808271034482696", "title": "vite + vue3 + ts 移动端实践", "desc": "技术栈选择 公司的技术栈主要是react,然后刚好有一个项目，看到vue3的发布一时手痒,直接开干，总结了一下项目的搭建以及一些坑"}, {"id": "6916495590754877453", "title": "推荐 7 个 GitHub 上很火的 TypeScript 的宝库，2021 学 TS 看这篇就够了！", "desc": "猫哥是一个常年混迹在 GitHub 上的猫星人，所以发现了不少好的前端开源项目、常用技巧，在此分享给大家。 已经推荐了 面试项目、CSS 奇技淫巧项目、代码规范项目、数据结构与算法项目、JavaScript 奇技淫巧项目、前端必备在线工具 等专题的近 100 个优秀项目了。 今…"}, {"id": "6862981984801521672", "title": "\"无 Typescript\" 编程", "desc": "一旦陷入 Typescript 就离不开它了。安全感、智能提示、代码重构.. 使用 Typescript 最终还是要转译为 JavaScript 代码，我不想整这一套构建工具，喜欢直接写完直接跑、直接调试、直接发到 npm.. ... 接着添加一个 jsconfig.json …"}, {"id": "7005582975974768654", "title": "TypeScript  记录（一）", "desc": "1-返回值类型 2-void类型，返回值为空，希望没有return值 3-never类型，永远不可能执行到最后 4-解构语法定义类型 5-基础类型 boolean，number,string,void"}, {"id": "6986648575623036965", "title": "Electron+Vue3 MAC 版日历开发记录(32)——使用vueuse", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6993298095408676872", "title": "TS系列篇｜TypeScript的诞生", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 Hejlsberg 决定建立一个“可擦除类型系统”，这个组件使 TypeScript 成为 JavaScript 的超集。"}, {"id": "6869249404495200263", "title": "用 TypeScript 写 React & Redux - 完全指南", "desc": "表示更多特殊 event。一些常见的 event 例如：ChangeEvent, FormEvent, FocusEvent, KeyboardEvent, MouseEvent, DragEvent, PointerEvent, WheelEvent, TouchEvent。…"}, {"id": "6992470291175702559", "title": "Typescript(进阶必备知识) ｜ 8月更文挑战", "desc": "Typescript 这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 基础知识 基础类型: number string boolean array object 1. enum: 枚举 2"}, {"id": "6992616185686654990", "title": "回溯算法 - 机器人的运动范围", "desc": "有一个矩阵，机器人可以从坐标(0,0)的格子开始移动，它每次可以向左、右、上、下移动一格，但是不能进入行坐标和列坐标的数位之和大于K的格子，求这个机器人总共能走多少个格子以及它的行动轨迹......."}, {"id": "6993876476068118536", "title": "「TypeScript」入门基础(二)🎯---联合类型与接口", "desc": "本文主要分享了TypeScript的联合类型和接口，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript生疏了..."}, {"id": "6984597380825874469", "title": "一篇 TypeScript 实践指南（万字长文）", "desc": "一篇 TypeScript 的实践指南，从基础、提高、实践三个方面介绍和使用 TypeScript，讲解”面向类型编程”中的那些坑。"}, {"id": "6844903641829081095", "title": "TypeScript + 大型项目实战", "desc": "TypeScript 已经出来很久了，很多大公司很多大项目也都在使用它进行开发。上个月，我这边也正式跟进一个对集团的大型运维类项目。 每一个模块要做的事情也很多，由于牵扯到公司业务，具体要做的一些事情这里我就不一一列举了，反正项目整体规模还是很大的。 在做了一些技术调研后，再结…"}, {"id": "6999806954679828510", "title": "Typescript 凭什么可以和 JavaScript 并肩作战(3)—TypeScript 类型转换实用方法(下)", "desc": "文章可能不算什么长篇大论，不过还是下来一番功夫，整理好后分享给大家，便于大家理解 TypeScript 中的类型转换工具背后原理。"}, {"id": "6982602203374551053", "title": "TypeScript学习、实战总结", "desc": "最近一直在看TS，很多文章都是一些概念，少有一些实战，我把这一个月学到的一些使用经验，总结为一篇文章，具体围绕一些场景进行思路的梳理。"}, {"id": "6997218406176915470", "title": "深入理解Typescript系列-装饰器", "desc": "这是我参与 8 月更文挑战的第 17 天，活动详情查看： 8月更文挑战 前言 本章内容我们主要来聊聊TS中的装饰器，装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装"}, {"id": "6977368765855956999", "title": "前端也要懂图形学：使用 TypeScript 实现光线追踪", "desc": "计算机图形学是什么 Rasterization （光栅化） 计算机图形学对于我们前端来说可能就是 WebGL，其实 WebGL 所代表的光栅化图形学只是计算机图形学中的一部分。从下图我们可以看到光栅化"}, {"id": "6999815351311532062", "title": "TS-数据类型", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 JavaScript 中已经存在了一些数据类型，但是并不能很好的满足TypeScript的，因此TypeScript中引入的新类型来增强T"}, {"id": "6844903775203753991", "title": "给2019前端的5个建议", "desc": "2019 农历新年即将到来，是时候总结一下团队过去一年的技术沉淀。过去一年我们支撑的数据相关业务突飞猛进，其中两个核心平台级产品代码量分别达到30+万行和80+万行，TS 模块数均超过1000个，协同开发人员增加到20+人。由于历史原因，开发框架同时基于 React 和 Ang…"}, {"id": "6996495648149209125", "title": "「TypeScript」入门进阶(五)✈️---声明与声明合并", "desc": "本文主要分享了TypeScript的声明，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript..."}, {"id": "6973794854866255885", "title": "使劲卷TypeScript进阶二--泛型和命名空间", "desc": "这是我参与更文挑战的第13天，活动详情查看： 更文挑战 一、泛型 泛型的定义： 泛型是指在定义函数、接口或类的时候，不预先指定具体类型，而在使用的时候再指定类型的一种特性，比如定义一个带有参数的函数，"}, {"id": "6993945898736680967", "title": "TypeScript入门", "desc": "一、TypeScript 是什么 TypeScript是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 "}, {"id": "6977795009735032845", "title": "用 typescript 整一个虚拟机（下）", "desc": "指令 之前在我们生成函数原型的时候是以 number[] 的形式声明的指令表。 这意味着指令其实就是一个数字。 计算机不就是用来处理一大串 01010 嘛，这个角度看，谁又不是数字呢。 指令根据长度可"}, {"id": "7000930676488798216", "title": "ts下 import React from ‘react’ 和import * as React from 'react'的区别", "desc": "import React from 'react' 和 import * as React from 'react' 的区别 创建一段测试代码: 使用ts默认编译配置（ts在默认会将代码编译为es5）"}, {"id": "7003816665377046542", "title": "typescript--7 泛型的理解", "desc": "typescript 泛型的理解 在学习泛型之前，先明确一下泛型的作用：就是类型不明确的时候定义的一个变量 下面结合代码来讲解下泛型 定义一个类型叫做T 上面的函数 参数类型就是一个泛型 并且定义了T"}, {"id": "6844903977331621901", "title": "【译】结合使用 TypeScript 与 React", "desc": "这篇文章是基于我过去在 React JS & React Native Bonn Meetup 上所做的演讲。文章的目的是回答以下几个问题： 这是我在学校之外的第一次公开演讲，能够顺利结束真是极好的，谢谢所有前来捧场的朋友！😁演讲是我非常喜欢的一件事情，希望未来能做更多的演讲…"}, {"id": "6987383865748750343", "title": "新手使用webpack5搭建typescript项目", "desc": "新手记录webpack5搭建typescript项目时遇到的一些问题，根据实际操作总结出来的一点儿经验，已备以后搭建项目时借鉴"}, {"id": "6987556809527525406", "title": "TypeScript学习(二)：Handbook -> Narrowing", "desc": "type guard 对于联合类型，需要进行类型收窄。此时需要 if 或者 typeof 对类型进行收窄，进行类型守卫。 typeof typeof 操作符可以得到值的基础类型，如，string，nu"}, {"id": "6844903983975235591", "title": "vue项目引入ts步骤", "desc": "最近考虑到老项目代码的可维护性以及稳定性，决定引入ts做规范检测。因为介绍的东西比较基础，如果介绍的不对，麻烦指正。 1. 简介 TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持。网上关于ts的学习资料很多，这里不做详细介绍。可…"}, {"id": "6989252958022008846", "title": "TypeScript小白入门", "desc": "目标 掌握ts的常见类型 了解ts的一些优点和用途 要点 TypeScript——JavaScript的超集 👁‍🗨有点碎，慢慢看，别走神👁‍🗨 基本类型🔵 number string boolean"}, {"id": "6859039959299391496", "title": "【译】在 React Native TypeScript 项目中使用 defaultProps", "desc": "大家好，我是俊宁，今天整理博客时翻到这么一篇去年翻译的文章，现在读来仍不过时，遂与大家分享。 随着时间的推移，TypeScript 改进了 defaultProps 相关的类型检查。本文将讲述最新的用法和旧版本中的用法以及一些问题。 尽管foo不是必须的，但是我们并没有把它被标…"}, {"id": "6920795765912633358", "title": "一步一步解析wangEditor4源码", "desc": "1. 找到入口文件 2. 打开 3. 重头戏 4. 选区api封装 5. execCommand命令封装 6. 初始化编辑区域 这里将编辑区域的keydown事件都放在了keydownEvents的数组里，然后循环执行，已到达全局管理，非常的优雅。 7. 菜单初始化 8. 全局…"}, {"id": "6844903929172459534", "title": "TypeScript 入门系列 | TypeScript 基础（一）", "desc": "TypeScript 设计目标是开发大型应用，然后转译成 JavaScript。由于 TypeScript 是 JavaScript 的严格超集，任何现有的 JavaScript 程序都是合法的 TypeScript 程序。 TypeScript 支持为现存 JavaScrip…"}, {"id": "6993544659133792292", "title": "TypeScript的数据类型说明", "desc": "数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，另外还提供了实用的枚举类型方便我们使用"}, {"id": "6962877044052983839", "title": "使用TS封装操作MongoDB数据库的工具方法", "desc": "使用TS+Node封装MongoDB数据库的CRUD方法，帮助大家编写CRUD代码更加自然与高效率。"}, {"id": "6844903600833970190", "title": "异步多图加载这件小事儿（Promise与async)", "desc": "日常开发过程中，时不时会遇到要同时预加载几张图片，并且等都加载完再干活的情况，结合 Promise 和 async/await 代码会优雅很多，但也容易遇到坑，今天就来简单聊聊。 先从最基本的 ES5 说起，基本思路就是做一个计数器，每次 image 触发 onload 就加一…"}, {"id": "6985330108730966024", "title": "Typescript入门", "desc": "学习TS，并对TS相关内容的一个总结与记录，方便以后重温。本文只是简单介绍了ts的一些常见基础知识，对于其高级编程，后续也会相应写成文章"}, {"id": "6844904055878189069", "title": "春节间的TypeScript笔记整理", "desc": "由于在春节期间，实在没什么事干，就想系统的写份typescript笔记。废话不多说，为什么我们都在说着ts这件事呢，尤其对于前端开发者来说，JavaScript作为行为交互，是四剑客之一。那么为什么还要用ts呢? tips:这里暂不说跨平台解决方案，比如比较优秀的Flutter…"}, {"id": "6844903961497960462", "title": "typescript叫anyscript？不存在的", "desc": "强烈建议使用vscode，因为都是同一家，对ts的支持和开发体验是非常棒的，大大增加了开发效率和质量，避免各种错误。 对于js的对象，我们可以表示为object[key]。ts也有类似的，即索引访问T[K]。如果T是object的interface或者type、K是key的话，…"}, {"id": "6844904067420913678", "title": "TypeScript 条件类型的 infer 类型推断能力", "desc": "类型推断 infer 是作为 extends 条件类型的子语句使用，同时在 TS2.8 推出。（如果你不熟悉 extends 条件类型可以查看之前分享的 TypeScript 的 extends 条件类型） 上面的 infer U 语句就是声明一个类型变量 U（它可以是任意字母…"}, {"id": "6993116578036318222", "title": "小白学前端之TypeScript的逻辑判断", "desc": "条件判断语句 if 语句 这个和 Java 差不多，分为： if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码 if...else 语句 - 当条件为 true 时执行代码，当条件为"}, {"id": "6844904109976322061", "title": "一起学 TypeScript 配置篇", "desc": "本篇主要介绍 TypeScript 中的 tsconfig.json 文件的作用以及配置参数.主要介绍文件选项和编译选项两部分. 如果一个目录下存在一个 tsconfig.json 文件，那么它意味着这个目录是 TypeScript 项目的根目录。tsconfig.json 文…"}, {"id": "6934487015970832391", "title": "寻找二叉树的下一个节点", "desc": "本文就跟大家分享下这个问题的解决方案与实现代码，欢迎各位感兴趣的开发者阅读本文。 如果存在，则遍历它的左子树至叶节点，将其返回。 如果不存在，则遍历它的父节点至根节点，直至找到一个节点与它父节点的左子节点相等的节点，将其返回。"}, {"id": "6965857170646630408", "title": "TypeScript 中的依赖注入", "desc": "简介 每一个软件程序都有其最基础的构建模块。在面向对象的编程语言中， 我们使用类去构建复杂的体系架构。像建一幢大楼，我们把模块之间建立的联系称之为依赖。其他的类为了支持我们类的需求，提供复杂的封装操作"}, {"id": "6844903887686598664", "title": "TypeScript 声明文件的书写", "desc": "通常，常用的声明文件，社区都帮我们做好了。在此作为笔记分享，还是要了解下当第三方库没有时，自己该如何书写。在动手前，先分析下场景： declare class 只定义类型，不具体实现（ 例子中 showName2 是具体实现所以报错了）。 namespace 第一次见，是 ts…"}, {"id": "6952429235743129636", "title": "document.execCommand的探索", "desc": "主流编辑器和document.execCommand这个原生api的探索，带你分析一些问题，和execCommand的替代方案探索"}, {"id": "6844904145732763655", "title": "typescript不能不掌握的高级特性（二）", "desc": "在上一篇我重点讲述了 ts 的交叉类型，本期将结合实例重点讲述 ts 中的一些高级操作符。本篇文章略长，笔者之前的文章都略短，作为男人还是要好好学习，文章还是长点好。 自己的 ts 代码更加智能，不再是满屏的 any 了。 下面我将结合具体实栗向大家讲述 ts 中的高级操作符。…"}, {"id": "6999250134731227173", "title": "typescript学习系列7：描述文件中的全局类型", "desc": "这是我参与 8 月更文挑战的第 6 天，活动详情查看： 8月更文挑战 继续系列6中的代码，继续操作 1.描述文件中的全局类型： 将index.html中引·jquery.js文件: 引入了jquery"}, {"id": "6971323669825994789", "title": "玩转 TS - 实现 dva 的完整类型推导", "desc": "前言 在 TypeScript 4.1 来临之前，对于像 dva、 vuex 这种需要在触发时写入命名空间的函数，我们无奈的只能使用 any 对其进行类型定义..."}, {"id": "6987294614663200781", "title": "从零到一学习TypeScript （三） 函数", "desc": "讲函数之前 我们在学习一点知识点 1. 类型缩小 什么是类型缩小呢？ 类型缩小的英文 是Type Narrowing， 我们可以通过 typeof 'erke' === 'string' 来改变我们代"}, {"id": "6987193656587321358", "title": "新增商品弹框组件的实现（Demo）", "desc": "技术栈： umi + antd + ts 先看效果: 1.点击+符号，弹出新增商品组件 2.新增商品弹框内容 文件目录 文件解析 const.ts index.tsx 实现效果 addShop.tsx"}, {"id": "6877372444613722119", "title": "可视化页面编辑器的架构设计", "desc": "前不久开发历时半年的可视化搭建项目终于上线[手动撒花 🌹🌹🌹]，产品功能上和市面上常见的可视化编辑器其实并没有很大区别，功能细节处略有不同而已。本文主要是记录开发过程中遇到的问题以及解决思路。 前期的准备工作还是比较重要的, 尤其是前端项目, 如果整个项目搭建好之后发现某…"}, {"id": "6844904176217145352", "title": "2020还不会TypeScript？", "desc": "TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。 JavaScript是一门弱类型/动态类型脚本语言。过…"}, {"id": "6975710581550481415", "title": "用npm7和TypeScript实现交叉编译Monorepo工程", "desc": "Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包。本文通过用npm7和TypeScript，解决多包在开发和编译时的交叉引用问题。"}, {"id": "6954945631328665613", "title": "TypeScript数据结构与算法：二叉搜索树", "desc": "上一篇《TypeScript 数据结构与算法：散列表》实现了 Typescript 中散列表的数据结构与算法，本篇继续实现二叉搜索树。"}, {"id": "6984207261887365151", "title": "a brief introduction to Typescript", "desc": "a brief introduction to Typescript, why we use it ,how to use it and more ......."}, {"id": "6844903881919430669", "title": "项目中使用 TypeScript 的一些感悟", "desc": "上周发布了一款名为 Smartour 的工具，是完全采用 TypeScript （以下简称 ts）来开发的。抛开以前做业务的时候的不完全使用，这次实践可以算是我第一次真正意义上的使用 ts。由于写法上的不同，以及对不熟悉事物的新鲜感，在这次项目开发的过程中着实有着许多感悟，于是…"}, {"id": "6960852275724025870", "title": "JS的静态类型检测，有内味儿了", "desc": "大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 我们知道 TypeScript 2.3 以后的版本支持使用 --checkJs对 .js文件进行类"}, {"id": "6992761596741156901", "title": "小白学前端之TypeScript的接口和类", "desc": "接口 和 Java 一样，TypeScript 的接口也是用关键字 interface 来声明的 使用： 接口继承 接口可以使用 extends 关键字继承其他接口。 类的结构 类用关键字 class"}, {"id": "6988777936480387079", "title": "TypeScript——命名空间", "desc": "这篇文章描述了如何在TypeScript里使用命名空间（之前叫做“内部模块”）来组织你的代码。 就像我们在术语说明里提到的那样，“内部模块”现在叫做“命名空间”。"}, {"id": "6959882656548913188", "title": "基于 babel 手写 ts type checker", "desc": "从编译原理的角度分析 typescript 类型检查的实现，基于 babel 手写一个 ts type checker."}, {"id": "6995715431646363679", "title": "「TypeScript」入门进阶(三)✈️---类与接口", "desc": "本文主要分享了TypeScript的类与接口，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript.."}, {"id": "6906126184031977480", "title": "12 个 GitHub 上超火的 JavaScript 奇技淫巧项目，找到写 JavaScript 的灵感！", "desc": "猫哥是一个常年混迹在 GitHub 上的猫星人，所以发现了不少好的前端开源项目、常用技巧，在此分享给大家。 已经推荐了 面试项目、css奇技淫巧项目、代码规范项目、数据结构与算法项目、管理后台模板、前端必备在线工具 等专题的近 100 个优秀项目了。 以下为【前端GitHub】…"}, {"id": "6993231126374383647", "title": "2021前端必须掌握的TS | 8月更文挑战", "desc": "TypeScript之泛型篇 前端的小伙伴每每看到这样的代码是不是想吐,究其原因是还不特别了解泛型,快来跟着铁蛋儿一起学习吧。 学完以后就可以开开心心恰饭了!!!"}, {"id": "6989859410021449759", "title": "快速搭建 TypeScript 学习开发环境", "desc": "快速搭建 TypeScript 学习开发环境 微软官方也提供了一个在线开发 TypeScript 的环境。学习和测试使用都很方便，对于刚接触TypeScript的新手来说，是个很好的选择，可以先把重点"}, {"id": "6898882861277904910", "title": "如何基于 TypeScript 实现控制反转", "desc": "一. 前言 最近接到任务，需要给团队封装一个基于 EggJS 的上层 NodeJS 框架，在这个过程中参考了 NestJS 、Midway 等开源项目，发现它们都引入了一项重要特性 —— IoC ，于是笔者借这个机会对 IoC 进行了一些学习和梳理。本文主要参考了 Midway…"}, {"id": "7004036114990235655", "title": "简单一文，让你快速上手TypeScript", "desc": "今天我们来简单介绍一下TypeScript，让你可以快速上手 TypeScript 概述 javascript的超集 任何一种javascript运行环境都支持 功能更为强大，生态也更健全、完善 缺点"}, {"id": "6991725767822737415", "title": "我们为什么要学习TypeScript ？", "desc": "JS语言存在的问题 先看一段代码，下面代码中存在错误，小伙伴们瞅瞅看找出存在的问题，奥利给！😁 第一个错误类型就是字母写错了 第二个就是getStr方法可能返回404，404身上并没有split方法 "}, {"id": "6996856327469269028", "title": "TypeScript-高级类型", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6952437673839558664", "title": "一份不可多得的TypeScript系统入门整理 | 创作者训练营第二期", "desc": "导语 在2017年，TypeScript 已经占领了前端非原生语言市场的主导地位。node 的后继者 deno 也是构建在 TypeScript 之上的。"}, {"id": "6996098612275413000", "title": "「TypeScript」入门进阶(四)✈️---泛型", "desc": "今天是七夕，先祝大家七夕快乐🎋🎋🎋本文主要分享了TypeScript的泛型，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript..."}, {"id": "7004423877359042597", "title": "TypeScript实践中一些的奇妙的应用", "desc": "嗨喽小伙伴们好，本篇总结了typescript实践中关于基础类型、函数this与重载、类、接口、类型别名、联合类型、交叉类型、枚举、泛型、类型守卫等知识点的总结，区别、以及妙用。"}, {"id": "7003504350370725925", "title": "TypeScript笔记（五）--  tsconfig.json 配置文件", "desc": "TypeScript中的tsconfig.json配置文件，files、include、exclude、extends、compolerOptions等"}, {"id": "6935255387893399560", "title": "TypeScript 4.2 正式发布：优化了类型和开发者体验", "desc": "TypeScript 团队最近正式发布了 TypeScript 4.2 版本！该版本的 TypeScript 拥有了更灵活的类型注释，更严格的检查，额外的配置选项以及一些其他的重大变化。我们现在可以在元组的类型定义中的任意位置使用 Rest 参数（而不是只能在末尾使用）了！类型…"}, {"id": "7005376193738309663", "title": "TS-实现 Pick", "desc": "TS-实现 Pick 题目链接 实现 TS 内置的 Pick<T, K>，但不可以使用它。 从类型 T 中选择出属性 K，构造成一个新的类型。 例如： 一、关键词说明 type :类型保护 type "}, {"id": "7005913788289384485", "title": "【学习笔记】TypeScript", "desc": "优缺点 优点 缺点 基础类型 布尔 boolean 数值 number 字符串 string void null 和 undefined bigint symbol 数组 array 有以下两种声明方"}, {"id": "7005376227150135303", "title": "TS-实现 Readonly", "desc": "实现 Readonly 题目链接 不要使用内置的Readonly<T>，自己实现一个。 该 Readonly 会接收一个 泛型参数，并返回一个完全一样的类型，只是所有属性都会被 readonly 所修"}, {"id": "6997576373728444446", "title": "TS入门篇 | 详解 TypeScript 数据类型", "desc": "“这是我参与8月更文挑战的第10天，活动详情查看： 8月更文挑战” 一、简单基础类型 在说TypeScript数据类型之前，先来看看在TypeScript中定义数据类型的基本语法。 在语法层面，缺省类"}, {"id": "6999519671577739277", "title": "TS（TypeScript）基础知识六：（Literal） 文字类型", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 Literal类型 常量 来看一个例子：使用文字类型来实现类似常量的功能。借此例子来了解下其基本运行机制。 上例中：声明s的值为字符串‘h"}, {"id": "6876981358346895368", "title": "结合实例学习 Typescript", "desc": "这篇文章将通过简单实例介绍开发中常见的问题，希望能帮助你更好理解 Typescript。由于介绍 Typescript 基础知识的文章很多，官方文档本身也很全面，关于 Typescript 的基础本文就不再赘述。 在没有 Typescript 以前，大部分项目都是使用原生 Ja…"}, {"id": "6991032082781159437", "title": "TypeScript——装饰器", "desc": "随着TypeScript和ES6里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。"}, {"id": "6980248901966102564", "title": "TypeScript，从0到入门带你进入类型的世界", "desc": "从0到入门进入TS的世界 众所周知， js 是一门弱类型语言，并且规范较少。这就很容易导致在项目上线之前我们很难发现到它的错误，等到项目一上线，浑然不觉地， bug 就UpUp了。于是，在过去的这两年"}, {"id": "6844903876605280269", "title": "使用 TypeScript 装饰器装饰你的代码", "desc": "Mohan Ram 原作，授权 New Frontend 翻译。 装饰器让程序员可以编写元信息以内省代码。装饰器的最佳使用场景是横切关注点——面向切面编程。 上面的代码展示了装饰器多么具有声明性。下面我们将介绍装饰器的细节： 装饰器使用 @expression 的形式，其中 e…"}, {"id": "6999985998423654437", "title": "TypeScript方法装饰器应用", "desc": "这是我参与8月更文挑战的第13天，活动详情查看： 8月更文挑战 背景 在初入安卓开发的阶段要为一个按钮绑定点击事件需要经过 通过ID查找视图 为视图添加监听方法 完成点击事件具体内容 后来引入了一些I"}, {"id": "7005600609965441037", "title": "Typora+坚果云+NodeJS+PicGo+Gitee搭建云笔记环境", "desc": "前言 用Typora已经有一段时间了，体验还不错，但它并不能实现云笔记，而我经常的一个写作场景是一篇文章在家在公司都会修修改改，在公司保存后到家打开文件就可以继续写。于是就有了这篇文章，记录这次云笔记"}, {"id": "6999891494618267656", "title": "Typescript的结构化类型系统", "desc": "Typescript结构化类型的基本原则是:如果x要兼容y,那么y至少要具有与x相同的属性 如下代码： 这里要检查y是否能赋值给x,编译器检查x中的每个属性,看是否在y中也能找到对应属性。 在上面的例"}, {"id": "6992838311186268197", "title": "TS（TypeScript）基础知识二：函数规范 、类", "desc": "**这是我参与8月更文挑战的第3天，活动详情查看：[8月更文挑战] 掌握基础知识可以通读vue源码"}, {"id": "6999208747612504101", "title": "经常用到的6个TypeScript新特性", "desc": "在构造函数中直接定义属性 Typescript 中可以通过构造函数的参数直接定义属性，我们来先看早期的做法： 采用 ts 中简写的语法： 它可能看上去不像是有属性的类，但它确实有，利用的是 Types"}, {"id": "6987596107866079269", "title": "Typescript 类型体操 —— Union To Tuple", "desc": "🤔️要求 实现一个可以\b将 union 转化为 tuple 的类型 UnionToTuple。 由于 union 是一个无序结构， tuple 是一个有序结构。因此在这个挑战中, tuple 中的元素"}, {"id": "6844903904140853255", "title": "TypeScript中高级应用与最佳实践", "desc": "本文只讨论图中蓝色部分。 快速修复 command + . ctrl + . 虽然在写法上，这两个操作符与位运算逻辑操作符相同。但在语义上，它们与位运算刚好相反。 对于这种表现，可以这样理解：&表示必须同时满足多个契约，|表示满足任意一个契约即可。 建议库的开发者所提供的公共a…"}, {"id": "6987951913622831141", "title": "记录一个TS中的小坑", "desc": "在渲染列表的时候，很多场景中都需要key这个属性，这个属性一般是后端给的，但是上次我发现后端给的数据出现了问题，于是就打算自己加一个key……"}, {"id": "6994170168834261022", "title": "Mixin and Typescript", "desc": "What is Mixin? 上面是我能找到的 mixin 的最佳定义。它清楚地显示了 mixin 和 normal class 之间的区别，并强烈暗示了 mixin 如何在 JavaScript 中"}, {"id": "6997229191468941348", "title": " 低代码&弹幕系统，TypeSrcipt 最近又有哪些好玩的新玩意？", "desc": "今天马建仓为大家推荐的就是几款近期在 Gitee 上比较受欢迎的 TypeScript 新项目，一起来看看吧～"}, {"id": "6999230388342095880", "title": "重学前端 | TypeScript入门之预备知识", "desc": "准备开始向TS下手了，我们不先说TS该【怎么用】，而是先来看看【是什么】:TS与JS之前是什么关系？TS的编译过程是什么样的？什么是类型拓宽、收窄类？值空间、类型空间又是什么？不论你是刚学ts，"}, {"id": "6996281525881077796", "title": "从0开始的TypeScriptの十：泛型", "desc": "泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。"}, {"id": "6998406416486629390", "title": "TS（TypeScript）基础知识五：Type别名、断言", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 Type 别名 示例 实例一 我们先来看第一个例子看看什么是别名，别名是如何工作的。 上例中：使用type关键字给string起了个别名s"}, {"id": "6986173429888057380", "title": "Electron+Vue3 MAC 版日历开发记录(31)——Icons Font 制作", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6864712731484749831", "title": "从零开始实现VS Code基金插件", "desc": "随着7月一波牛市行情，越来越多的人投身A股行列，但是股市的风险巨大，有人一夜暴富，也有人血本无归，所以对于普通人来说基金定投是个不错的选择，本人也是基金定投的一枚小韭菜。 上班的时候经常心理痒痒，想看看今天的基金又赚（ge）了多少钱，拿出手机打开支付宝的步骤过于繁琐，而且我也不…"}, {"id": "7003170259540639758", "title": "Typescript 官网阅读笔记（四）", "desc": "内置的快捷类型（全局可用） Partial<type> 构建新类型且所有的类型属性修改为可选的 Required<type> 构建新类型且所有的类型属性修改为必选的 Readonly<Type> 构建"}, {"id": "6984450123262591012", "title": "回溯算法 - 寻找矩阵中的路径", "desc": "给定一个矩阵和一个字符串，如何从矩阵中寻找出这个字符串在矩阵中的路径？本文就跟大家分享下如何使用回溯法来解决这个问题，欢迎各位感兴趣的开发者阅读本文。"}, {"id": "7002962792315650079", "title": "typescript--3webpack的配置", "desc": "在开发过程中必然使用webpack 来打包编译，下面来记录下配置过程 简单的配置步骤 npm init yarn add -D webpack webpack-cli typescript ts-lo"}, {"id": "6982581149688135710", "title": "[答案公布] TypeScript 每周挑战第 2 期：条件类型重组", "desc": "其实大多数 TypeScript 开发者，对 TypeScript 的利用，还停留在初级水平。 不信？来试试 TypeScript 每周挑战吧！ 第 2 期用到了 TS 中的 “条件类型重组” 特性。"}, {"id": "6977343292849520653", "title": "typeScript中接口和类型限制", "desc": "“这是我参与更文挑战的第8天，活动详情查看： 更文挑战” 1typeScript 中的接口 2 typeScript中函数类型 3.数组类型限制 4 函数的返回类型"}, {"id": "7001107979755847717", "title": "TypeScript系列 --- 命名空间和模块", "desc": "命名空间是位于全局命名空间下的一个普通的带有名字的JavaScript对象。 这令命名空间十分容易使用。 它们可以在多文件中同时使用，并通过`--outFile`结合在一起。"}, {"id": "6953886657690992677", "title": "TypeScript-从函数返回类型开始讲怎么用好TS", "desc": "前言： 对于初学TS的同学，最大问题是不擅长处理函数的返回类型，如果一个函数返回的类型是多种或可以为空的，甚至是复合的，或者对原始类型做修改，做组合，做修剪，新手往往需要大量定义相似度高的类型来解决问"}, {"id": "6993643128943018021", "title": "从java注解漫谈到typescript装饰器——注解与装饰器", "desc": "之前整理过《Java注解(批注)的基本原理》，typescript通过注解添加元数据，然后在装饰器中获取这些元数据，完成对类、类的方法等等的修改，可以在装饰器中添加元数据的支持"}, {"id": "6994796487733428232", "title": "TypeScript中的类--(TypeScript 05)", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 类的注解方式 继承中的super 1. 构造函数内部的super指的是父类的构造函数 2. 构造函数外部的super指的是父类本身 类成员"}, {"id": "6968364365237993479", "title": "vue3+ts+vite2项目，关于找不到声明文件的处理", "desc": "vue3+ts+vite2项目，关于找不到声明文件的处理，如找不到模块“./App.vue”或其相应的类型声明"}, {"id": "6982911847888486407", "title": "TypeScript: 接口 vs. 类型别名", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 1. 对象（Objects） / 方法（Functions） 二者均可被用来声明对象和方法的签名，但语法不同。 接口 "}, {"id": "6987566217271705637", "title": "用TypeScript写一个简单的贪吃蛇小游戏", "desc": "前言 这个项目是参考尚硅谷TypeScript教程写的，自己做了一些改进，目的是为了练习TypeScript的写法，学会用TS的思维去写代码。 1 项目界面搭建 html结构 less结构 2 完成F"}, {"id": "6993370466614247461", "title": "TypeScript学习(十六)：模块解析 | 八月更文挑战", "desc": "“这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战” 模块解析是编译器找出导入内容所指向地方的过程。以 import { a } from \"moduleA\" 为例，为例检查对象 a 的使用"}, {"id": "6930159918343258125", "title": "TS泛型基础知识 之 萌新总结", "desc": "这是一篇本来在假期前就应该总结输出的文章，可惜由于自己太懒，太咸鱼，于是balabalabala(省略几万字的理由)。但真相永远只有一个，就是说多了都是借口，正好假期余额不足了，是时候收心，作为萌新，和大家一起巩固总结下之前看的TS泛型的相关知识，争取输出一篇和各位萌新一看就懂…"}, {"id": "6844903887363653645", "title": "解读TypeScript中的泛型以及条件类型中的推断", "desc": "近来发现 TypeScript 已成一种趋势，基本已成大型项目的标配。TypeScript 弥补了弱类型的 JavaScript 所带来的一些缺点，可以帮助我们构建更稳健的代码，同时也增强可阅读性和可维护性。可以使得许多运行时才能出现的错误，在编译时就暴露出来，让潜在的问题更容…"}, {"id": "6994336176601563150", "title": "全栈之路：node+ts+koa 开发环境搭建", "desc": "入行前端一年多了，虽然对前端的热爱丝毫未减，但也逐渐对后端产生了xing趣（这可能就是渣猿吧~，啥都想学）。于是，我便利用工作的闲（摸）暇（鱼）时间，开始了我的全栈之路。 由于平常开发前端都是使用ts"}, {"id": "6865910915011706887", "title": "源码解读utility-types", "desc": "之前有系统的学过 TypeScript，并且可以在项目中使用一些基本的类型定义，但是对于高级类型却一知半解，看到一些项目或者库中写的高级类型完全是懵逼的状态，于是就决定想办法去改变这种状态。忘记是哪位大神说过：看源码是最好的学习方式，于是就决定找个专门做 TypeScript …"}, {"id": "6991061608386527239", "title": "TS学习（二）--.d.ts声明文件", "desc": "前言 最近在项目中需要在全局声明TS接口类型，需要使用到.d.ts文件进行声明，所以对这块的内容进行研究理解下。"}, {"id": "6844903728399532039", "title": "TS 版 Promise 详解", "desc": "由于笔者在过渡到 TypeScript ，所以本次开发依旧会采用 TypeScript 来敲。 这应该是笔者最后一次用 TypeScript 冠名分享文章，再见 🤞，我已经可以安全上路了。( 喊了那么多次，快上车，都没有多少人上车，那我就先走了。) 笔者希望读者可以仅通过看仅…"}, {"id": "6919361059019358215", "title": "【翻译】只需几步，轻松提高Typescript性能", "desc": "豆皮粉儿们，又又又见面了，今天这一期，由字节跳动数据平台的“StoneyAllen ”，给大家翻译一篇文章“typescript性能”。 最近某公司员工在下班途中猝死，引发大家的关注。代码要认真写，但是也不要太过劳累哦，休息好才能工作好！ 有些简单的Typescript配置，可…"}, {"id": "6976905048169119751", "title": "swagger与JSDoc的集成实践", "desc": "通过将Swagger文档转换成JSDoc，自动生成前端请求文件/枚举/Mock数据，并给原有的JavaScript项目加上类型定义和代码提示。"}, {"id": "6999162715340013575", "title": "typescript 进阶", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 前言 未来的日子，愿你把自己调至最佳状态，缓缓努力，慢慢变好 Y(^o^)Y"}, {"id": "6890360742671810574", "title": "TypeScript魔法堂：函数类型声明其实很复杂", "desc": "江湖有传“动态类型一时爽，代码重构火葬场”，由于动态类型语言在开发时不受数据类型的约束，因此非常适合在项目原型阶段和初期进行快速迭代开发使用，这意味着项目未来将通过重写而非重构的方式进入成熟阶段。而在企业级应用开发中，每个系统特性其实都是需求分析人员与用户进行多次调研后明确下来…"}, {"id": "6992098564067295262", "title": "typescript 不常用但是很好用的类型声明方式", "desc": "基础的分型声明 防止获取object时候输入错误key 创建new Class 模板字符串类型 基础映射类型 映射修饰符 添加-或前缀来删除或添加这些修饰符+ 键重映射通过类型 根据输入值判断获取类型"}, {"id": "6844904061783769095", "title": "TypeScript的索引类型和映射类型", "desc": "在ts中，索引类型和映射类型是相对复杂的内容。使用索引类型，编译器就能够检查使用了动态属性名的代码，而使用映射类型，可以将旧类型转化成新类型。下面用一篇文章来稍微深入介绍一下这两个概念。 在实际开发中，我们经常能遇到这样的场景，在对象中获取一些属性的值，然后建立对应的集合。 编…"}, {"id": "6998727647337381901", "title": "TypeScript学习(二十二)：TS 架构总览 | 八月更文挑战", "desc": "“这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战” 架构分层 核心：TS Compiler Parser：string ---> AST Binder：使用符号链接对统一结构有关联的声明，"}, {"id": "6983309121604812836", "title": "React创建Ts项目注意的事项", "desc": "官方脚手架创建Ts项目 1.创建Ts和Js的区别 创建Js:npx create-react-app project js的目录结构 创建Ts项目:npx create-react-app proje"}, {"id": "6844903640386404360", "title": "从 Vue typings 看 “this”", "desc": "在 2.5.0 版本中，Vue 大大改进了类型声明系统以更好地使用默认的基于对象的 API。 ...... 在这篇文章里，我们来谈谈上述背后的故事。 这会存在一个问题，Methods 上定义的方法里的 this，全部都是 Vue 构造函数上的方法，而不能访问我们自定义的方法。 …"}, {"id": "6936860982710894629", "title": "Typescript 4.2新特性一览", "desc": "在Visual Studio Code 或 TypeScript Playground 之类的编辑器上，将鼠标悬停于想查看的类型之上时，会展示一个信息面板，显示其类型。鼠标悬停查看BasicPrimitiveOrSymbal： 开启标志后索引签名中未显式声明的属性通过.操作符访…"}, {"id": "6970692856260329502", "title": "TypeScript 实现微信的红点通知", "desc": "微信看似有很多红点，实际这中间的过程都是由最深处的某个事件触发的，比如一条消息，一个朋友圈点赞。中间的过程我们可以理解为通过最边缘的红点逐个传递到根部......"}, {"id": "6844904132629757965", "title": "【译】Typescript 3.8 常用新特性一览", "desc": "# 私有字段的使用来替代不太严格的 private等。 这里只翻译了部分重要的特性，还有更多好玩的新特性可以看下面的参考链接原文查看。 TypeScript 3.8为仅类型导入和导出添加了新语法。 如果您在--isolatedModulesTypeScript的transpil…"}, {"id": "6986121564911566862", "title": "TypeScript学习 --- TS初体验", "desc": "TypeScript是由微软开发的开源、跨平台的编程语言。TypeScript是JavaScript的一个超集，支持ESNext标准，是对原生JavaScript的语法扩展和补充。"}, {"id": "6844903604092928014", "title": "详解配置VS Code/Webstorm来调试JavaScript", "desc": "译者按： 本文介绍了使用Node Inspector来调试 JavaScript和TypeScript应用。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 我准备了一个计算斐波拉契序列的例子，放在Github仓库。我建议你将它克隆下来并且跟…"}, {"id": "6922108422397788168", "title": "基于TypeScript从0到1搭建一款爬虫工具", "desc": "今天，我们将使用TS这门语言搭建一款爬虫工具。目标网址是什么呢？我们去上网一搜，经过几番排查之后，我们选定了这一个网站。 一个视频网站，我们的目的主要是爬取这个网站上视频的播放链接。下面，我们就开始进行第一步。 俗话说，万事开头难。不过对于这个项目而言，恰恰相反。你需要做以下几…"}, {"id": "6857323329137672206", "title": "TypeScript 快速入门", "desc": "理解JavaScript自有类型系统的问题。先要理解以下的类型系统 由于这种强弱类型之分根本不是某一个权威机构的定义，一般描述强类型有更强的类型约束，而弱类型中几乎没有什么约束。 早期JavaScript应用简单，JavaScript是一个脚本语言，没有编译环节的（静态类型语言…"}, {"id": "6985826471260454926", "title": "08-TypeScript抽象类", "desc": "抽象类， 很抽象， 使用 abstract 关键字定义， 有以下几个特点 不能被创建对象， 是专门用来被继承的类 可以添加抽象方法， 且抽象方法只能定义在抽象类中 子类继承了抽象类， 必须对抽象方法重"}, {"id": "6844904001268350984", "title": "typescript必备基础", "desc": "一、使用TS前准备安装TS(sudo)npmitypescript-g新建TS项目文件夹，在文件夹下执行 tsc--init和npminit-y后生成tsconfig.json和package.jso"}, {"id": "6985807961482493965", "title": "typescript 变量定义", "desc": "let和const是 JavaScript 中变量声明的两个相对较新的概念。 正如我们之前提到的，在某些方面let类似于var，但允许用户避免用户在 JavaScript 中遇到的一些常见“陷阱”。 "}, {"id": "6985558559463309319", "title": "typecript 入门笔记（1）", "desc": "TypeScript 是 JavaScript 的一个超集。 在完整保留 JavaScript 运行时行为的基础上，通过引入静态类型系统来提高代码的可维护性，减少可能出现的 bug。"}, {"id": "6882197002814390285", "title": "玩转typescript,使开发更高效", "desc": "typeScript是微软提出的，基于javascript做了一些优化调整，使javascript更加的规范化，有助于开发者的使用、理解和使程序的健壮性。 比如有一天接到需求，让在原有项目上做新的需求，这时候我们就可能需要调用别人写的方法，为了搞清楚函数的参数类型以及用法就需要…"}, {"id": "6988506562650177573", "title": "TypeScript学习(七)：Handbook -> Conditional Types & Template Literal Types", "desc": "条件类型可以帮助减少函数重载次数 Conditional Type Constraiints 在数组中的“现象” 在条件类型中使用 infer 可以直接 infer 函数的返回值类型，Return 函"}, {"id": "6905666894984904717", "title": "TypeScript 类型系统 协变与逆变的理解 函数类型的问题", "desc": "TypeScript 中有许多关于类型系统的概念，如果只知其一不知其二的话，那么就有可能被报错打的满地找牙。 这篇文章写的是关于类型系统中的协变与逆变的概念，了解协变和逆变是如何发生及运作的。 理解一个新东西所需要的是一个良好且完善的上下文，所以需要先了解最基础的类型关系。 在…"}, {"id": "7002762106718126111", "title": "TypeScript笔记（四）-- 索引类型、映射类型及辅助泛型", "desc": "TypeScript的索引类型(keyof)、映射类型(in)及常用的辅助泛型Pick、Omit、Exclude、Extract..."}, {"id": "6955730664045936670", "title": "浅谈TypeScript设计模式-基础篇（二）", "desc": "本系列将会和大家一起从了解面向对象开始，再深入到常用的设计模式，一起探索TypeScript配合设计模式在我们平时开发过程中的无限可能，设计出易维护、易扩展、易复用、灵活性好的程序。"}, {"id": "6999905088949256228", "title": "我对ts泛型的理解", "desc": "在学习ts源码的时候，发现很多泛型还是看不懂，于是想写一篇文章，总结一下常用的范型。 基础必备知识 联合类型vs交叉类型 联合类型使用 “｜”表示或的关系， 满足其中的一个情况即可。 交叉类型使用“&"}, {"id": "7003748545907916830", "title": "typescript 协变与逆变的理解", "desc": "有时候在处理父子类型赋值时会出现类型错误， 这时可能就涉及到协变 与 逆变 , 这里记录个人的理解。 协变例子 逆变例子 类型范围 在理解协变与逆变前我们需要先了解类型的范围， 父子类型的类型范围是，"}, {"id": "6999492290913763335", "title": "Typescript 凭什么可以和 JavaScript 并肩作战(2)—TypeScript 类型转换实用方法(上)", "desc": "在 TypeScript 提供多种多样的对于类型进行操作的方法，或者可以说是对类型进行转换的方法。在现有类型基础上通过操作提供一个新的类型。"}, {"id": "7000686124783894542", "title": "TypeScript02  null和undefined明显的错误使用方式现在会报错", "desc": "null和undefined明显的错误使用方式现在会报错 例子： 相似地，把null和undefined当做具有方法的对象使用时会报错。 例子："}, {"id": "6844903684422254606", "title": "TypeScript 在 React 中使用总结", "desc": "近几年前端对 TypeScript 的呼声越来越高，Ryan Dahl 的新项目 Deno 中 TypeScript 也变成了一个必须要会的技能，知乎上经常见到像『自从用了 TypeScript 之后,再也不想用 JavaScript 了』、『只要你用过 ES6，TypeScr…"}, {"id": "6844903687207272462", "title": "[译] 尤雨溪：Vue 3.0 计划", "desc": "Last week at Vue.js London I gave a brief sneak peek of what’s coming in the next major version of Vue. This post provides an in-depth over…"}, {"id": "6994802331011252237", "title": "从0开始的TypeScriptの八：类", "desc": "类 介绍 定义了一件事物的抽象特点，包含它的属性和方法。 在es6中出现了class来定义类，这是一个很棒的新特性。 typescript中还要一些新的用法"}, {"id": "6993279804602581028", "title": "2021年8月前端面试题最新出炉(一)", "desc": "TypeScript相关问题及知识点 Q1: ts中type和interface的区别？ A1: 有相同点与不同点，具体内容如下。 1. 相同点： （1） 两者都可以定义对象和函数。 interfac"}, {"id": "6981286316998656008", "title": "Typescript 类型体操 —— 实现 Extract", "desc": "实现一个 Typescript 内置的 Extract 类型并深入了解其原理。 每天完成一个 TS 类型编程题，妈妈再也不用担心我写不出 TS 类型啦！"}, {"id": "6844903612787720206", "title": "TypeScript 2.8下的终极React组件模式", "desc": "如果你了解我，你就已经知道我不编写没有类型定义的javascript代码，所以我从0.9版本后，就非常喜欢TypeScript了。除了有类型的JS，我也非常喜欢React库，所以当把React和Typescript 结合在一起后，对我来说就像置身天堂一样:)。整个应用程序和虚拟…"}, {"id": "6935629277870161957", "title": "为什么我对 TypeScript 黑转粉？一个 JS 开发者的深情自白", "desc": "在这篇博客文章中，我将会讲述我是如何从一名 TypeScript 黑粉的开发者转变到如今不想回到原生 JavaScript 世界的开发者的旅程 🚀，也许我的想法可以帮助和我几年前一样境遇的人们。 我一直觉得给函数和变量设定类型，满足 TypeScript 编译器的各种检查是一…"}, {"id": "6998532107114905614", "title": "进阶 TypeScript 之初见泛型", "desc": "大家晚上好，特别为大家做这次分享，因为现在几个团队都开始使用 TypeScript 了，那么除了在日常的 TypeScript 基础使用外，我想给大家带来一些 TypeScript 的进阶使用"}, {"id": "6977037119373967390", "title": "斐波那契数列的多种解法", "desc": "求任意位置的斐波那契数，最常见的做法是使用递归，这种做法虽然可以得到结果，但是它的性能很差。 本文跟大家分享一种性能较好的解决方案，欢迎各位感兴趣的开发者阅读本文。"}, {"id": "6844903749501059085", "title": "Typescript 中的 interface 和 type 到底有什么区别", "desc": "但是没有太具体的例子。 明人不说暗话，直接上区别。 interface 和 type 都可以拓展，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 extends interface 。 虽然效果差不多，但是两者语法不同…"}, {"id": "6944875414208643102", "title": "Vue 3.0 自定义指令的这些知识你掌握了么？", "desc": "在 Vue 的项目中，我们经常会遇到 v-if、v-show、v-for 或 v-model 这些内置指令，它们为我们提供了不同的功能。除了使用这些内置指令之外，Vue 也允许注册自定义指令。接下来，阿宝哥将使用 Vue 3 官方文档 自定义指令 章节中使用的示例，来一步步揭开…"}, {"id": "6844903560270839815", "title": "vscode + prettier 专治代码洁癖（一）", "desc": "相信很多小伙伴都纠结过自己代码的格式化问题，特别是团队协作的时候，加上前端语言种类繁杂，各种语法糖+团队个人的敲码习惯，会让你感觉到一团糟。 在过往，我们尝试过很多方式，从EditorConfig到各种***Lint, 还要研究各种配置，还是没办法满足我们的需求。 现在，pre…"}, {"id": "7000362772928135176", "title": "重学前端 | TypeScript入门之高级篇", "desc": "本篇是TypeScript入门的最后一篇，主要分析了TypeScript高级里的映射类型、模板字面量类型和条件类型。最后汇总了一些TS的学习书籍以及在线学习资源以便后续的继续学习。"}, {"id": "7002239193707446308", "title": "TypeScript泛型应用", "desc": "概念： 泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。 "}, {"id": "6988141757900800037", "title": "Electron+Vue3 MAC 版日历开发记录(33)——打包问题", "desc": "在工作之余，写一个基于 Electron + Vue 3 + TypeScript + Vite，边学边开发一个 Mac 版日历📅️。"}, {"id": "6996559915732975630", "title": "TypeScript-接口", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6844903912923725838", "title": "一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比", "desc": "JavaScript 的类型分为两种：原始数据类型和对象类型。 本节主要介绍前五种原始数据类型在 TypeScript 中的应用。"}, {"id": "7002551042105671688", "title": "你还在手写Restful的Json响应的TS类型吗？", "desc": "使用 TypeScript 开发前端项目，类型批注非常提升开发效率。然而，当遇到 Restful，似乎只能手写类型，随着接口越来越多，手写类型是繁琐低效的，有没有一种方法，自动生成接口类型？"}, {"id": "6995364819511541791", "title": "「TypeScript」入门进阶(二)✈️---类", "desc": "本文主要分享了TypeScript的类，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript.."}, {"id": "6908523306211606542", "title": "超硬核前端er：自制仿TypeScript编程语言", "desc": "TypeScript现在已经成了前端项目的标配，但是现在的TypeScript实际上只是用于对前端代码的静态类型检查工作，它并没有自己真正的编译器或者运行时(runtime)，前端项目编译打包时都把TypeScript编译为了JavaScript。 即使号称Node.js的替代…"}, {"id": "6871752423577223176", "title": "细数这些年被困扰过的 TS 问题", "desc": "TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECM…"}, {"id": "6901552013717438472", "title": "搭建自己的 typescript 项目 + 开发自己的脚手架工具 ts-cli", "desc": "这个事情起始于前两天给团队写一个脚手架工具，这段时间刚做做完一个系统，是团队第一个正式意义上的全栈项目；团队有自己的前端脚手架，但是没有后端脚手架，所以想着给团队写一个后端脚手架工具，这样团队在开展后续的全栈项目时可以使用脚手架构建项目，避免了重复搭建项目初始架构的大量工作，成…"}, {"id": "6993568844191121421", "title": "「TypeScript」入门基础(一)🎯---安装与基础数据类型", "desc": "本文主要分享了TypeScript的安装和基础数据类型，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript生疏了..."}, {"id": "6994610183439646727", "title": "「TypeScript」入门基础(四)🎯---类型断言", "desc": "本文主要分享了TypeScript的类型断言，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript生疏了..."}, {"id": "6999103048010170382", "title": "TypeScript-模块解析策略和命名空间", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6867785919693832200", "title": "TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？", "desc": "TypeScript 4.1 快要发布了，老爷子 Anders Hejlsberg 加入了一项重大更新，「字符串模板类型」 的支持。昨天看到这个更新的我特别兴奋，曾几何时，只要一遇到字符串拼接相关的类型，TypeScript 就束手无策了，比如： Vuex 中加了 namesp…"}, {"id": "7000636611415244837", "title": "【前端--面试】常见面试题（十一）—— TypeScript", "desc": "TypeScript 是 Microsoft 开发的JavaScript 的开源超集，用于在不破坏现有程序的情况下添加附加功能。"}, {"id": "6938176673292484615", "title": "Vue 3.0 $emit 之后发生了什么", "desc": "对 Vue 3 双向绑定 感兴趣的掘友，可以阅读 聊一聊 Vue 3 双向绑定是如何工作的 这篇文章。本文阿宝哥将以一个简单的示例为切入点，带大家一起一步步探索 $emit 之后发生了什么。阅读完本文之后，你将会掌握 Vue 3 自定义事件背后的原理。 在以上示例中，我们先通过…"}, {"id": "6994979001156517925", "title": "「TypeScript」入门进阶(一)✈️---类型别名、字符串字面量与元组", "desc": "本文主要分享了TypeScript的类型别名、字符串字面量和元组，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript.."}, {"id": "6987735091925483551", "title": "一文读懂TS的(.d.ts)文件", "desc": "随着前端技术的不断发展，TypeScript(简称:TS)已经在逐步取代JavaScript(简称:JS),尤其在以Vue3使用TS重构后，TS更是成为前端框架编写的主力语言。"}, {"id": "6997688966392578084", "title": "TypeScript-面向对象编程", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6998147559495565349", "title": "从0开始的TypeScriptの十二：装饰器", "desc": "装饰器/修饰器 Decorator 定义：装饰器是一种特殊类型的声明，能够被附加到类的声明、方法、属性或参数上，可以修改类的属性"}, {"id": "6938614411397431304", "title": "新发布的 TypeScript 手册！先睹为快！", "desc": "在过去的一年里，团队高度重视提升 TypeScript 文档的规模、时效性和范围。TypeScript 手册是我们的文档中最关键的部分，它是你在大多数代码库中都会看到的 TypeScript 代码的导览。我们希望这本手册能让你觉得是学习 TypeScript 的首选资料。 去年…"}, {"id": "6998420361343680520", "title": "将vue+js项目改造成vue+typescript", "desc": "为什么要使用typescript 优点 程序更容易理解 javascript：函数输入输出的参数类型，外部条件等，需要手动调试 typescript：已解决此问题 效率更高 在不同代码块和定"}, {"id": "6985188488303869989", "title": "一篇学习TypeScript的文章", "desc": "1. 什么是 TypeScript TypeScript 是一种由微软开发的自由和开源的编程语言。它是基于 JavaScript 的一门语言，是 JavaScript 的一个超集。也就是说 TypeS"}, {"id": "6850418120788721677", "title": "表格封装：让我们轻松的coding~", "desc": "在后端管理项目中，我们通常有着许多重复利用的组件，尤其是表格与分页器是用得最多的。我们采用的是 element-ui所以我们对其进行了封装。 其中的slot是很关键的一点，它能让我们自定义每一项，其他的倒无非是增加相关属性而已。 需要注意的是，我们在其中引入了一个minxins…"}, {"id": "6844904052174635015", "title": "JavaScript 私有类字段和 TypeScript 私有修饰符", "desc": "在本文中，我们将对 JavaScript 私有类字段进行一些说明，并了解它们与 TypeScript 私有修饰符的区别。 在过去，JavaScript 没有保护变量不受访问的原生机制，当然除非是**典型闭包**。 闭包是 JavaScript 中许多类似于私有模式（如流行的模块…"}, {"id": "6895321780464467976", "title": "按照新的思路再学一遍typescript", "desc": "ts是一门语言，是js添加了类型的超集，即 A Typed Superset of JavaScript ，经过编译后输出对应js代码以在浏览器或其他运行时上运行。 js在设计之初仅用来作为浏览器中的简单脚本语言，后来随着ecma版本迭代和浏览器为其添加了更多api，使得js的…"}, {"id": "6844903946427858951", "title": "JavaScript和TypeScript中的符号", "desc": "symbol 是 JavaScript 和 TypeScript 中的原始数据类型，可用于对象属性。与 number 和 string 相比，symbol 具有一些独特的功能，使它脱颖而出。 Symbol 没有构造函数。该参数是可选描述。通过调用工厂函数，为 TITLE 分配了…"}, {"id": "6925750001574346765", "title": "【每日一记】event.target 不是 HTMLElement 如何处理", "desc": "具体表现在使用ts开发前端项目时，如果标注事件响应回调函数的event对象类型为Event，会在尝试使用event.target.className（等其他的dom实例属性）得到提示：解决办法显式地指"}, {"id": "6954290627710779400", "title": "你所知道的typescript", "desc": "typescript是什么 TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 1 "}, {"id": "6844903717087477773", "title": "2018 JavaScript 现状调查报告火热出炉", "desc": "StateOfJS 刚刚发布了 2018年的 JavaScript 现状调查报告，今年他们调查了超过 20000 名 JavaScript 开发者，以确定他们正在使用什么，他们对什么感到满意以及他们想要学习什么。 1、JavaScript 现状 —— “方言” 随着 JavaS…"}, {"id": "6844903716508663815", "title": "我们应该如何（以及为什么）要将Typescript与Express、nodejs一起使用（译文）", "desc": "在我的职业生涯开始时，我是一名桌面应用开发人员，其中强类型语言占据了市场主导地位。 当我迁移到Web开发时，我对JavaScript和Python等语言的每个新功能都很着迷。事实上，我没有必要声明变量的类型，这极大的提高了我的生产力，并且使我的工作变得更有趣了。 所以我第一次听…"}, {"id": "6877551766033039367", "title": "TypeScript中的六个知识盲区！", "desc": "今天这篇文章的由来，是由我们技术群里的小伙伴在技术讨论的时候提出需要来提升对Ts理解而来,本文将讲述几个Ts常见并且不易理解的几个知识点，简单的使用就自行官网文档了!Typescript中的几个重要概"}, {"id": "6950585494547742733", "title": "vue3+ts(2)：TypeScript 语法汇总", "desc": "本文是vue3+ts项目系列第2篇《TypeScript 语法汇总》，关于`TypeScript`的基础语法，你了解..."}, {"id": "6914677587940016135", "title": "TS学习笔记（Four Day）", "desc": "数组解构，数组展开运算符，数组遍历。 小结：TS中数组和JS中操作变化不大。 对象解构，对象展开运算符。 小结：和JS差别不大。 对象的形状。 小结；这里定义一个对象，他有名字和年龄，那么创建这个对象时候，要给他一个名字和年龄的属性。 可选|只读。 任意属性：除了必选，可选，有…"}, {"id": "6928232605620027399", "title": "ts映射类型", "desc": "在映射类型里，新类型以相同的形式去转换旧类型的每个属性。 除此以外，还有很多类似的映射类型，可以参考TypeScript: Documentation获得更详细的信息。"}, {"id": "6950254535298252836", "title": "Typescript中的协变和逆变", "desc": "1. 基本概念1.1 鸭子类型在TS中，一个对象所包含的属性、方法如果一致，那么它们就是等价的。1.2 里式替换原则（Liskov Substitution Principle, LSP）"}, {"id": "6943580000180240398", "title": "为什么ts 项目中总有那么多的any", "desc": "在很多开发的项目中经常出现一堆的“any”，有时候开发同学为了图方便，所以出现了很多的any。毕竟要去定义一个类型 远比写一个any 来的麻烦。然后我在项目中搜了一下，出现了436个any。如果罚抄100遍算惩罚的话，这个项目已经惩罚我4.36遍了。 发现问题不少但是答案不多，…"}, {"id": "6844903842065170440", "title": "typeof-jsonc 将 JSONC/JSON 转换为 TypeScript 声明", "desc": "开发过程中需要更多的类型，以让 TypeScript 的效果更好，特别是前后端协作时，将接口文档信息转换为 TypeScript 类型声明，来保证项目质量。 但是手动的根据后端接口文档进行编辑，带来很高的编辑成本。"}, {"id": "6844903876798185479", "title": "基于Webpack/TypeScript/Koa的环境配置", "desc": "TypeScript是一种开源编程语言，在软件开发社区中越来越受欢迎。TypeScript带来了可选的静态类型检查以及最新的ECMAScript特性。 作为Javascript的超集，它的类型系统通过在键入时报告错误来加速和保障我们的开发，同时越来越多对的库或框架提供的type…"}, {"id": "6854573217781284872", "title": "TypeScript + React最佳实践-第二节：@tkit/model - React 全局和局部状态管理方案", "desc": "单个 effect 内部的类型化以及 action 参数的贯通，设计到类型计算，仅仅通过 interface 泛型是做不到，我们需要一个工厂函数——来实现参数类型对返回类型的复杂逻辑关系。 在 effect 逻辑里直接调用 model.actions.doSomething——…"}, {"id": "6971609782545285150", "title": "TS入门-枚举", "desc": "基础定义 枚举属于类型 数字枚举 数字枚举，根据初始化值，自增设置属性值 初始化值可选，默认为 0 字符枚举 字符枚举没有自增行为，所以需要为每一属性设置值 常量成员 第一成员没有初始化器 它不带有初"}, {"id": "6844903649353662477", "title": "TypeScript 3.0重磅发布，新特性详解！", "desc": "今天，微软正式发布 TypeScript 3.0，这是 TypeScript 之旅的一个新的里程碑！ 3.0 虽然是个大版本，但并没有包含太多重大的突破性变更（也就是说升级很容易）。新版本引入了一种新的灵活且可扩展的方式来构建项目、对操作参数列表提供了更强大的支持、新的强制显式…"}, {"id": "6911953391140732942", "title": "TypeScript 基础总结", "desc": "#置Ts环境typescript是的超集javascript，相比原生js，规避了动态类型的所产生的诸多问题，以及完善了js对象使用的体验vscode配置自动编译第一步tsc--inti生成tscon"}, {"id": "6844903684833296398", "title": "搭建Typescript+React项目模板(4) --- 项目打包", "desc": "经过前面的初始化，提升开发体验和集成了一堆工具，调整了项目结构等等之后，我们是时候考虑进行项目打包了。 0. 添加打包路径工具 该配置项指定了打包路径和打包后的js文件名，在webpack的配置项中，output是必须有的。 以后指定打包文件存放路径的时候就可以直接使用这个工具…"}, {"id": "6938702674476941349", "title": "前端也要懂的解耦思想：从面向对象到面向接口", "desc": "前端似乎很少谈设计思想，大部分的编程思想和设计模式都是来自于后端的经验和总结。但是随着前端工程化越来越重，促使我们这些前端切图仔也不得不开始关注编程思想和设计模式。从面向过程到面向对象，所有编程理念和思想的提出，本质上是为了调和程序员稳定的个体智力水平和程序不断上升的复杂度之间…"}, {"id": "6844904090913226766", "title": "《前端之路》- TypeScript基础数据类型", "desc": "在说 typeScript 之前 ，我们先了解下 Javascript。"}, {"id": "6921870622565875726", "title": "【详细教程】教你如何使用Node + Express + Typescript开发一个应用", "desc": "Express是nodejs开发中普遍使用的一个框架，下面要谈的是如何结合Typescript去使用。 我们的目标是能够使用Typescript快速开发我们的应用程序，而最终我们的应用程序却是编译为原始的JavaScript代码，以由nodejs运行时来执行。 为了实现我们的目…"}, {"id": "6901255219691454472", "title": "TypeScript(一) —— 了解并快速入门", "desc": "之前ES6合集已经更新完毕，趁热打铁今天来更新一下TypeScript，虽然已经有很多的文档和pdf了，但是自己总结的就是自己的。 我们之前已经讨论过了JavaScript自身类型系统的问题，如果对强弱类型以及强类型的好处有不太懂的，回顾看 JavaScript类型系统 , 也…"}, {"id": "6844903896469471239", "title": "Nextjs摸鱼进阶二： React中使用Typescript类型校验", "desc": "经过第一章的Nextjs摸鱼进阶一：Typescript编译环境后，咱们开始结合Typescript+React进行开发。 子组件的getInitialProps不会执行，只有在pages目录下最终export导出提供Nextjs输出页面的组件，才会执行一次服务端getInit…"}, {"id": "6905250221039550478", "title": "【Typescript】进击的基础（二）条件类型", "desc": "语法 T extends U ? X : Y。一般语意为：如果 checkType 可赋值给 extendType ，则结果为真分支类型 tureType ，否则结果为假分支类型 falseType 这系列文章目前打算走推导式风格(应该？)，前面定义、概念挺多的，静下来心来慢慢…"}, {"id": "6844903849816227854", "title": "新发布的 TypeScript 3.5 RC 作出的改进和优化", "desc": "在2019年5月16日，**微软宣布推出最新的Ty peScript 版本候选版本：3.5 RC **。此版本修复了以前的一些问题，引入了新的改进、性能优化、并添加了一些功能。 TypeScript最近在 ThoughtWorks技术雷达报告中的排行上升，根据 RedMonk …"}, {"id": "6904616590482866184", "title": "2020你应该知道的TypeScript学习路线", "desc": "随着Vue3的发布，作为JavaScript类型超集的TypeScript，以可以编译成纯JavaScript，可以在任何浏览器、任何计算机和任何操作系统上运行，并且开源，被再一次被推向了前端开发语言的巅峰，为了顺应时代的变化，争取成为与时俱进的开发者，小编特意总结出前端学习大…"}, {"id": "6938689464533254158", "title": "Vue3+TypeScript实现网易云音乐WebApp(解析歌词，并实现自行匹配滚动)", "desc": "1. 实现思路 在timeupdate钩子函数中，当currentTime大于lyricArr[Idx].time，获取到当前歌词dom绑定的data-index属性的索引index,又当index和Idx相等时，把Idx的值赋值给lyricIndex。PS：lyricInde…"}, {"id": "6951761416911061022", "title": "使用webpack5 + typeScript开发富文本编辑器demo的总结", "desc": "项目周期https://github.com/IronPans/TGeditor 参考了这个项目的实现富文本功能逻辑 (学习模块以及富文本操作的相关概念)基于上续功能, 引入了webpack打包项目,"}, {"id": "6951674686639964168", "title": "不用的 TypeScript？命名空间。", "desc": "命名空间在 JavaScript 中，我们需要一种手段来组织代码，以防止对象之间产生命名冲突。 因此，我们把代码包裹到一个个命名空间内，而不是把它们放在全局命名空间下，可以有效避免全局污染。"}, {"id": "6916059701788540942", "title": "typescript之基础类型", "desc": "任意类型anyts的基本类型，可以复制为任意类型字符串stringts的基本类型，当一个变量的类型定义为字符串的时候，他的值只能是字符串，若赋值了其他类型的值，则ts就会报错数字numberts的基本"}, {"id": "6844903844887920647", "title": "TypeScript学习记录", "desc": "相比于js的数据类型，typescript中多了元组类型、枚举类型、任意类型、void类型和never类型。当然这些只是基础类型，还有更多其他类型，后面的类型推论和高级类型可以进一步了解。 写ts代码变量可以指定其类型，指定类型后赋值必须为指定的类型，否则报错。 如果没有指定类…"}, {"id": "6844904070675857421", "title": "Koa+TypeScript从0到1实现简易CMS框架（二）：路由自动加载与全局异常处理", "desc": "koa本身是没有路由的，需借助第三方库koa-router实现路由功能，但是路由的拆分，导致app.ts里需要引入许多路由文件，为了方便，我们可以做一个简单的路由自动加载功能来简化我们的代码量；全局异常处理是每个cms框架中比不可少的部分，我们可以通过koa的中间件机制来实现此…"}, {"id": "6844903618038988813", "title": "Vue + TypeScript 尝鲜体验", "desc": "适用Vue.version<2.5&&Vue.version>=2.2其实我个人一开始很讨厌TypeScript这个东西，就是因为讨厌Java的啰里巴嗦，突然在我眼前出现了JavaScript，便爱上"}, {"id": "6941630734146732062", "title": "TS深入浅出系列 - 泛型", "desc": "老包是 浙江省除了水啥都不能包包装厂 厂长，刚开业就接到了 浙江省大自然搬运工工厂 的大\b单子，需求是帮他们包装新生产的产品 搬运工水。合同一签，拿到搬运工水 工厂就忙活起来了。 很快流水线投产的样品就出来了，甲方很满意。老包的厂子算是活下来了， 做大做强之后，和业界各个工厂联…"}, {"id": "6844903650146385933", "title": "[译] Angular 的 @Host 装饰器和元素注入器", "desc": "我们知道，Angular 依赖注入机制包含 @Optional 和 @Self 等影响依赖解析过程的装饰器，尽管它们字面意思就直接解释了其作用，但是 @Host 却困扰了我好久。我在其源码注释中看到该装饰器的 描述： 由于网上大多数教程都提到 Angular 的模块注入器和组件…"}, {"id": "6844904069614534670", "title": "TypeScript 的 类型保护机制", "desc": "在编写 TS 时，它做了比我们看到的更多的事情，例如类型保护机制。让我们编写的代码更加严谨，至于怎么回事，让我们来看看吧。 由于这些机制的存在，就算你仍旧以 JS 原生的书写方式，也能帮助你提前发现代码中潜在的问题。（对于认为 TS 语句更复杂的人，也能实现 0 门槛，不改变已…"}, {"id": "6965795276921503758", "title": "[TS 杂谈](2) Object object {} 区别及如何辨别 {}(emtyType)", "desc": "Object object {} 区别在哪 以及如何辨识并判断一个类型是否为 {} Number/number String/string 这些的关系又是怎样的？"}, {"id": "6981315086904197133", "title": "简要介绍fp-ts（一）", "desc": "有谁能够在见识过函数式编程的优雅之后还不心动的呢？ 对我来说，函数式编程是一个可望而不可及的梦想。它很美好，但是却有点超脱现实。如果说，全然开始使用 Haskell 等函数式编程语言是疯狂，那么从这个"}, {"id": "6893071406481801224", "title": "这些高阶ts内置泛型帮助类型，你用过几个", "desc": "上面的类型意思是，若 T 能够赋值给 U，那么类型是 X，否则为 Y。 原理是令 T' 和 U' 分别为 T 和 U 的实例，并将所有类型参数替换为 any，如果 T' 能赋值给 U'，则将有条件的类型解析成 X，否则为Y。 a 可以赋值给 Words 类型，所以 WA 为 t…"}, {"id": "6991050580399489061", "title": "TypeScript——三斜线指令", "desc": "三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为编译器指令使用。 三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。"}, {"id": "7000647851990581278", "title": "TypeScript学习", "desc": "TS 的基础类型 1.number 数值型 2.string 字符型 3.boolean 布尔型 4.null 表示对象值缺失 5.undefined 初始化的变量为定义值 Null 和 Undefi"}, {"id": "6996262908506144805", "title": "TypeScript类", "desc": "TypeScript class class 基本使用 class 继承 class 修饰符 public 默认就是 public, 开放的 private 定义该属性只能的这个类的内部访问 (一般私"}, {"id": "6990639299909648415", "title": "[ts入门01]基本了解", "desc": "为什么要学习ts? 可以减少bug 发现过程：在tsc过程将ts转化为js过程中会提示变量不一致问题 ts转化的js：普通的js，只不过是已经通过了ts检查的js(没有变量问题的js) 常见问题： 变"}, {"id": "6983619450620608543", "title": "typescript 基础知识，试写一下", "desc": "学习一个编程技术，掌握基础的知识（如果没有了解基本知识，可以看一下点我查看)，试着去写一写，可以加深理解，也许这也是一种不错的方式。"}, {"id": "6977651234492645413", "title": "重读Typescript手册（泛型）", "desc": "重读Typescript手册，了解泛型。 现在我们想定义一个函数 identity，接收参数为 number 类型，返回参数也为 number 类型，我们通常的做法是像下面这样定义这个函数。 当然这没"}, {"id": "6854573217252655111", "title": "TypeScript实现图", "desc": "图是一个非线性数据结构，本文将讲解图的基本运用，将图巧妙运用，并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 本文着重讲解图的实现思路，对图的基础概念不了解的开发者，请移步我的另一篇文章：图的认识。 图是网络结构的抽象模型，图是由一组边连接的顶点。任何二元关…"}, {"id": "6955310865180524580", "title": "你需要知道的vscode插件开发步骤", "desc": "简介 在开发小程序的时候，因为业务需要接触到了vscode插件开发。因为自己也是从零开始开发插件没有什么经验，所以就是一边查资料一边踩坑，经过一番折腾终于完成了一个简单的插件。插件功能虽然简单，但是开"}, {"id": "7000339697142595592", "title": "Provide/Inject + TypeScript 使用", "desc": "翻译来自： https://logaretm.com/blog/2020-12-23-type-safe-provide-inject 本文是一篇关于 provide/inject TypeScrip"}, {"id": "6972108971779817509", "title": "构建 Typescript 知识体系(四)-类的类型与接口的关系", "desc": "这是我参与更文挑战的第十天，活动详情查看:更文挑战 1. 类实现接口的时候，必须实现接口中所有的属性， 并且可以在类中定义其他的属性 2. 接口只能约束类的公有成员 3.接口不能约束类的构造函数 4."}, {"id": "6844903545720815624", "title": "TypeScript VS JavaScript 深度对比", "desc": "TypeScript 和 JavaScript 是目前项目开发中较为流行的两种脚本语言，我们已经熟知 TypeScript 是 JavaScript 的一个超集，但是 TypeScript 与 JavaScript 之间又有什么样的区别呢？在选择开发语言时，又该如何抉择呢？"}, {"id": "6981725218020524040", "title": "来看看TypeScript 4.3.5 的一些新增特性吧～", "desc": "模版字符串也可以写ts; TypeScript 4.3 is now available, 4.4 is currently in beta;"}, {"id": "6993937591288463396", "title": "TypeScript-入门教程(3)", "desc": "1.对象类型--接口(Interfaces) 在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。 什么是接口 一个非常灵活的概念,它是对行为的抽象,除了可用于对类的一"}, {"id": "7003349030285606948", "title": "typescript--4 类的介绍", "desc": "在开始，先介绍下类当中涉及到的知识点 类的定义 类的构造函数 类的继承 类中的静态属性和方法 super 的使用 抽象类的使用 类的定义 下面是类的定义格式 构造函数 constructor 是类的构"}, {"id": "6942404475206238222", "title": "看完就会的 TypeScript 教程", "desc": "描述：本文十分适合那些觉得难学、被官网文档劝退、初次接触`typescript`的老铁们。我是2018年开始写`typescript`的，所以文中将以我学习的思维作为出发点来讲解"}, {"id": "6990304091683422215", "title": "探讨Node.js、TypeScript如何解析模块", "desc": "了解下常见引入方式 node解析 通常，在Node.js里导入是通过 require函数调用进行的。 Node.js会根据 require的是相对路径还是非相对路径做出不同的行为。 相对路径 相对路径"}, {"id": "6997425094842810405", "title": "TypeScript常用知识之--声明文件", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 声明文件 1.全局的声明文件 2.声明全局的命名空间 模块的引用 1. es6导入导出 2. 引入common.js 3. UMD库的声明"}, {"id": "6989219003596013581", "title": "TypeScript——命名空间和模块", "desc": "这篇文章将概括介绍在TypeScript里使用模块与命名空间来组织代码的方法。我们也会谈及命名空间和模块的高级使用场景，和在使用它们的过程中常见的陷阱。"}, {"id": "6985808225044004894", "title": "TypeScript 实战指南详解", "desc": "1.tsconfig.json 配置 相关配置选项 compilerOptions 编译选项是 TypeScript 配置的核心部分， 根据功能可以分为 6 个部分 项目选项 用于配置项目的运行时期望"}, {"id": "6880488222451826696", "title": "TS入门笔记1——TS的类型声明", "desc": "而TypeScript是强类型, 它提供了一套静态检测机制,如何我们编码事中途变换变量的类型，ts就会在报错，帮助我们在编码时发现错误。 void与any正好相反, 表示没有任何类型, 一般用于函数返回值。在TS中只有null和undefined可以赋值给void类型 表示的是…"}, {"id": "6875135569018486797", "title": "深入探索前端路由，手写 react-mini-router", "desc": "前端路由一直是一个很经典的话题，不管是日常的使用还是面试中都会经常遇到。本文通过实现一个简单版的 react-router 来一起揭开路由的神秘面纱。 前端路由本质上是什么。 前端路由里的一些坑和注意点。 hash 路由和 history 路由的区别。 Router 组件和 R…"}, {"id": "6986252404752646151", "title": "typescript 笔记", "desc": "安装 全局安装 npm install typescript -g 安装完成之后 配置环境，然后查看是否安装成功 tsc -v tsc --version 查看是否安装成功 创建项目 tsc --in"}, {"id": "6844904146877808653", "title": "白话typescript中的【extends】和【infer】", "desc": "我们再来看看infer。 在extends语句中，还支持infer关键字，可以推断一个类型变量，高效的对类型进行模式匹配。但是，这个类型变量只能在true的分支中使用。 不知道初学ts的朋友们看完这个介绍是不是一脸懵逼，反正之前我是... 建议自己捋一遍。 ts提供的exten…"}, {"id": "6844903633004265480", "title": "初探 TypeScript", "desc": "前段时间有朋友和我推荐 TypeScript ,他说写起来特别爽，让我去试一试，那时候我还在那是啥高深莫测的东西。刚好那段时间忙，一直没有时间看。最近也很忙，还是抽时间来探一探 TypeScript ;简单说 ts 主要提供的是 dynamic type check，提供的 i…"}, {"id": "6992457902740996126", "title": "typescript 学习笔记", "desc": "记录和学习下ts的基本使用和以供后续排查问题和作为参考手册，单纯看文档比较枯燥，记录一下简单的上手使用的点。 安装 ts 的核心功能就是四个字：类型约束。 核心功能 数据类型 原始数据类型包括：布尔值"}, {"id": "6960848202757046302", "title": "TypeScript 新品尝鲜", "desc": "本文介绍了 TypeScript 3.7 版本以来的一些实用特性。帮助各位开发者编写更加稳定，优雅的 TypeScript 代码。"}, {"id": "6844903513202409485", "title": "如何用 ESLint 检查 TypeScript 代码", "desc": "ESLint 是一个代码检查工具，主要用来发现代码错误、统一代码风格，目前已被广泛的应用于各种 JavaScript 项目中。 它通过插件化的特性极大的丰富了适用范围，搭配 typescript-eslint-parser 之后，甚至可以用来检查 TypeScript 代码。 …"}, {"id": "6964281135794749453", "title": "vue3+TS从零开始(1)---创建项目&TS用法.", "desc": "本文主要创建一个vue3+ts的初始化项目, 然后说一下TS的一些简单的基本用法, 主要在于对弱语言到强语言的语法区别"}, {"id": "6844903607003774983", "title": "可能是 GitHub 上第一款 Vue 全家桶 + TypeScript 的完整项目", "desc": "基于Vue.js的2.5.13版本和TypeScript编写的模仿原生应用的WebApp. 建议直接添加到主屏幕(ios端体验差一些). 学习vue全家桶，本人很长一段时间在用React。 利用PWA技术来模仿原生应用,来探究PWA与原生的差异。 作者声称2.5之后vue增强了…"}, {"id": "6989149644152373284", "title": "typescript开发react native 进阶", "desc": "项目中使用 TypeScript帮助我们检测类型, 方便使用/阅读其它的模块，JS里一般使用PropTypes来定义类型, 但它不是很精确。 TS中对props, state都可以进行限制 - 这适用"}, {"id": "6844904196827774990", "title": "你不知道的 TypeScript 泛型（万字长文，建议收藏）", "desc": "泛型是 TypeScript（以下简称 TS） 比较高级的功能之一，理解起来也比较困难。泛型应用场景非常广泛，很多地方都能看到它的影子。平时我们阅读开源 TS 项目源码，或者在自己的 TS 项目中使用一些第三方库（比如 React）的时候，经常会看到各种泛型定义。如果你不是特别…"}, {"id": "6955025103507849223", "title": "代码检查工具！从 TSLint  到 ESLint", "desc": "2019 年 1 月，TypeScript 官方决定全面采用 ESLint，之后也发布 typescript-eslint 项目，以集中解决 TypeScript 和 ESLint 兼容性问题。"}, {"id": "6844904040455733262", "title": "Vue with TypeScript", "desc": "最近重新看了下这个文章，发现这个文章没有标明 ts 预发预发高亮，于是把预发高亮加了上去，还有就是编写本文的环境是 Vue 2.5.*，可能对于现在的环境有些不太合适，里面有些插件或者一些实现方式，可能有些改变，或者 Vue 官方已经有不同的实现方式，所以本文章还是当做参考，毕…"}, {"id": "6883446877422010382", "title": "Vue3都用ts重构了，TypeScript咱也不能掉队(第一篇)", "desc": "在 JavaScript 中 null 表示 \"什么都没有\"。 null是一个只有一个值的特殊类型。表示一个空对象引用。 用 typeof 检测 null 返回是 object。 在 JavaScript 中, undefined 是一个没有设置值的变量。 typeof 一个没…"}, {"id": "6915297458692194318", "title": "Effective Typescript：使用 Typescript 的 n 个技巧", "desc": "主要整理了 effective typescript 里列出的一些技巧，列出了一些自己觉得有用的，有的简单的就一笔带过。更加友好的排版见 https://blog.staleclosure.com/effective-typescript/ 即虽然vector3D不是vecto…"}, {"id": "6983278501809881125", "title": "Typescript 基础类型详解", "desc": "Boolean 布尔类型声明： Number 和在JavaScript中一样，TypeScript中的所有数字要么是浮点值，要么是BigIntegers。这些浮点数的类型是number，而BigInt"}, {"id": "6991047010040152078", "title": "TypeScript——Mixins", "desc": "除了传统的面向对象继承方式，还流行一种通过可重用组件创建类的方式，就是联合另一个简单类的代码。 你可能在Scala等语言里对mixins及其特性已经很熟悉了，但它在JavaScript中也是很流行的。"}, {"id": "6844903714591866894", "title": "优雅的在 react 中使用 TypeScript", "desc": "react中的组件从定义方式上来说，分为类组件和函数式组件。 这是因为我们使用 class properties 语法对state做初始化时，会覆盖掉Component<P, S>中对state的readonly标识。 是的。只要在组件内部使用了props和state，就需要在…"}, {"id": "7000640105924788232", "title": "typescript入门笔记", "desc": "这是一篇typescript的入门笔记，仅做记录使用。内容有联合类型，枚举类型，以及初步认识泛型使用"}, {"id": "6989538421978955783", "title": "Typescript 总结", "desc": "本文比较适合有一定Javascript基础的人阅读。 What is Typescript？ Typed JavaScript at Any Scale。（添加了类型系统的 JavaScript，适用"}, {"id": "6985463429502877726", "title": "[译]TypeScript条件类型", "desc": "本文介绍了什么是条件类型以及条件类型的实现原理，通过循序渐进的方式由浅入深的讲解了条件类型的使用场景以及如何使用条件类型"}, {"id": "6999153827668557837", "title": "tsconfig.json文件各字段吐血整理", "desc": "## tsconfig.json文件说明 一般在 `typescript` 的项目中，我们都能看到 `tsconfig.json` 这个文件，它指定了此项目的编译选项，也指定了此项目的根目录，因"}, {"id": "6974137600449708063", "title": "手摸手一起学习Typescript第二天，interface接口和readonly属性", "desc": "这是我参与更文挑战的第6天，活动详情查看：更文挑战 Typescript 文档地址：Interface Duck Typing 概念： 1. 对象类型的接口 2. 函数类型的接口 3. 混合类型的接口"}, {"id": "6964670046127783973", "title": "为什么选择 TypeScript ？", "desc": "TypeScript 是一种非常受欢迎的 JavaScript 语言扩展。它在现有的 JavaScript 语法之上加入了一层类型层，而这一层即使被删除，也丝毫不会影响运行时的原有表现。"}, {"id": "6872967325637836808", "title": "TS 4.1 新特性实现 Vuex 无限层级命名空间的 dispatch 类型推断。", "desc": "前几天，TypeScript 发布了一项 4.1 版本的新特性，字符串模板类型，还没有了解过的小伙伴可以先去这篇看一下：TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？。 那么接下来的重点就是实现 dispatch(action: Action&#x…"}, {"id": "6844903753431138311", "title": "TypeScript 强大的类型别名", "desc": "TS 有个非常好用的功能就是类型别名。 类型别名会给一个类型起个新名字。类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。 上面的类型意思是，若 T 能够赋值给 U，那么类型是 X，否则为 Y。 原理是令 T' 和 U' 分别为 T 和 …"}, {"id": "6987585311228297230", "title": "Typescript 类型体操 —— EventEmitter", "desc": "要求实现一个 EventEmitter 类，该类中存在两个方法 on / emit。分别完成 函数的 订阅和调用。"}, {"id": "6923523666340741128", "title": "TypeScript高级特性", "desc": "Required 译为必须的, 作用是将一个接口中所有非必填参数 变为必填，Required&#x3C;T> 的作用就是将某个类型里的属性全部变为必选项。 Exclude 译为排除/不包括, Exclude&#x3C;T, U> 表示从T中排除那些可分配给U的类型, 简单点说就…"}, {"id": "6970083128345903135", "title": "TypeScript 的 Utility Types，你真的懂吗？", "desc": "都是 TypeScript 的骚操作，20 种内置Utility Types和 16 个手写工具类型，如果你看不懂 16 个中最后一个，就从头到尾把这篇文章看一遍吧，相信会对你的 TS 水平有很大提升"}, {"id": "6997372799870304293", "title": "TypeScript challenges", "desc": "背景 因为平常自己用TS，用的不深，只是简单的使用，然后想做做题加深理解，下面是自己做的一些题目，长期更新 题库 https://github.com/type-challenges/type-cha"}, {"id": "6993221499851276295", "title": "typescript深入理解系列之infer： 二次封装的类型声明", "desc": "常见的二次封装到底应该怎么声明类型呢？infer关键字到底是什么用途呢？别人讲的总是一知半解，这一篇有两个例子真实讲解"}, {"id": "6998496930238038024", "title": "感受TS里泛型的好处", "desc": "最近一直使用TS开发React应用，一开始对里面的<>很茫然，后来弄清楚了这是泛型，慢慢了解了它的用处后，感觉到它们是非常有用的特性。今天就来谈谈TS里的泛型的应用。"}, {"id": "6965812965966774302", "title": "TypeScript学习小记", "desc": "一、TypeScript简介 1.TypeScript简介 1.TypeScript是JavaScript的超集。 2.TypeScript 其实就是类型化的 JavaScript，它不仅支持 Jav"}, {"id": "6993370245410848781", "title": "TypeScript中object、Object 和 {} 之间的区别", "desc": "在我们学习TypeScript的过程中发现，TypeScript定义了一些名字相似但是概念不同的类型，下面我们来一起讨论下object、Object 和 {} 之间的区别。 object object"}, {"id": "6962441571018997791", "title": "Typescript 高级类型-映射类型", "desc": "一、映射类型 映射类型是TS允许将一个类型映射成另外一个类型。 详细内置高级类型，可查看官方lib.es5.d.ts。注意类型操作都是操作的对象是类型 先定义两个简单类型: 1、可选属性 语法: 使用"}, {"id": "6844904159485886478", "title": "React + TypeScript + Hook 带你手把手打造类型安全的应用。", "desc": "TypeScript 可以说是今年的一大流行点，虽然 Angular 早就开始把 TypeScript 作为内置支持了，但是真正在中文社区火起来据我观察也就是没多久的事情，尤其是在 Vue3 官方宣布采用 TypeScript 开发以后达到了一个顶点。 本文所使用的所有代码全部…"}, {"id": "7002388145555636237", "title": "TypeScript笔记（三）-- 联合类型、枚举类型及泛型", "desc": "TypeScript的联合类型的使用、类型保护的方法、枚举类型的定义及泛型的概念、定义、继承和使用。"}, {"id": "6984954524314107917", "title": "TypeScript类与继承和修饰符就是这样简单", "desc": "本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！ 1.我理解的类 2.类的基本使用 ![SFUU~J3D8M51E_F}38K3.png 3.实例化类的注意点 4.类与"}, {"id": "6919359418505609230", "title": "浅入浅出typescript泛型与类型黑魔法", "desc": "工作中看到很多同学对于 ts 的使用还是有局限性，包括对复杂类型和类型运算的抵触，导致写出来的代码 any 随处都是，维护、迭代时代码提示基本没有，方法名字基本靠猜，参数类型依赖文档，完全丧失了 ts 的作为强类型语言的优势。本文会在展开介绍泛型和各种类型黑魔法，为大家的 ts…"}, {"id": "6872617267323109389", "title": "从编译器出发深入理解Typescript", "desc": "每个部分的编译器代码在src/compiler都可以找到, 本文会对每个解析器进行一一讲解。在开始之前,我从网上找了一张图 能够帮助我们了解编译器是如何将上述几个关键部分组合在一起的。 我先介绍每个解析器的工作原理, 最后我将会对每一条线路做一次概括。 ts扫描器的源代码均位于…"}, {"id": "6993971864989073422", "title": "TypeScript中如何使用Object、object和{}？", "desc": "不知道是不是有很多兄弟和我一样，在进行typescript的前端项目开发时，总是不能很好地使用对象类型；有时会定义为Object，有时又会定义为···"}, {"id": "6987946367226396680", "title": "typescript命名空间（namespace）", "desc": "简介: 个人理解：TypeScript中的命名空间其实是为功能文件做一个归类。 比方说我们所使用的的学校案例，我们的学生类，人类，学校类都可以在一个命名空间下进行定义。 一. 先来看下用命名空间的第一"}, {"id": "6995351228804792328", "title": "TypeScript数据类型", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 原始数据类型 我们了解JavaScript的数据类型分为：原始数据类型（Primitive data types）和对象类型（Object"}, {"id": "6874831839224299528", "title": "TypeScript 在 React 中干货分享", "desc": "社区内或网上关于 TS 的文章大部分是对官方文档的解读，从基础类型开始介绍，这种对于已经有 TS 经验的开发者没有任何意义，对于刚上手同学建议阅读官方文档足够了，大部分同学包括我都希望看到解决实际项目中遇到的问题分享。 最近一年一直使用TypeScript开发项目，从最初的an…"}, {"id": "6844903774570414087", "title": "值得一看，Vue 作者尤雨溪的回答【TypeScript 不适合在 vue 业务开发中使用吗？】", "desc": "尤大现身说法，讲解了当初 Vue 在2.0为什么会采用flow的各种历史原因和兼容考虑，而在3.0中又会如何与 TypeScript 结合。"}, {"id": "6972344955373256711", "title": "构建 Typescript 知识体系(六)-类型检查机制", "desc": "这是我参与更文挑战的第十二天，活动详情查看:更文挑战 类型检查机制是什么 typescript 编译器在做类型检查时，所秉承的一些原则，以及表现出的一些行为。 类型检查机制有什么作用 辅助开发，提高开"}, {"id": "6844903869923737607", "title": "用 webpack 4.0 撸单页/多页脚手架 (jquery, react, vue, typescript)", "desc": "首先来简单介绍一下webpack：现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个会映射项目所需的每个模块 的依赖图(dependency graph)，并生成一个或多个 bundle。webpack4.0出现之后，…"}, {"id": "6953592990770298887", "title": "TypeScript 进阶经验总结", "desc": "使用 TypeScript 也快一年了，本文主要分享一些工作常用的知识点技巧和注意点。 本文适合了解 TypeScript 或有实际使用过一段时间的小伙伴。"}, {"id": "6983622014556700679", "title": "TypeScript封装播放器组件及webpack配置", "desc": "本文可以了解TypeScript是如何工作的，项目是如何构建的，代码是如何组织的，播放器api的的基本使用，支持TS的webpack环境，组件的设计方法和css模块化。"}, {"id": "6939724738818211870", "title": "Web 富文本编辑器 embed 卡片机制的设计与实践", "desc": "富文本编辑器不仅仅是图文，需要扩展更多类型的信息。像比较出名的 notion 编辑器直接就是一个“大杂烩”，啥都能塞进去。 wangEditor 正在考虑做全面的插件化，也是近期我就以“公式”和“代码块”为例子，探索了一下 embed 的设计和实践。正好，这俩是不同的显示类型，…"}, {"id": "6844903693607763975", "title": "Typescript配合React实践", "desc": "使用ts写React代码写了将近三个月，从刚开始觉得特别垃圾到现在觉得没有ts不行的一些实践以及思考。 如果按部就班的写React就体会不到使用ts的乐趣，如果多对代码进行优化，进行重构，在业务中实践比较好的一些方案就会体会到ts真正的乐趣，但是ts也在过程中给我带来了痛苦，在…"}, {"id": "6984309890021867533", "title": "TypeScript入门学习记录", "desc": "前言：TypeScript是Js的一个超集，并且支持ES6，是一种面向对象的编程方法，常用的用法主要包括以下几个部分：基础类型，类型批注，类型推断，接口，枚举，修饰符，泛型，命名空间，类，元组等。 T"}, {"id": "6844904041391063048", "title": "TypeScript基础看腻了？进阶实现智能类型推导的简化版Vuex，手把手带你实现。", "desc": "React + TypeScript + Hook 带你手把手打造类型安全的应用。 React Hook + TypeScript 手把手带你打造use-watch自定义Hook，实现Vue中的watch功能。 这篇文章我决定更进一步，直接用TypeScript实现一个类型安全…"}, {"id": "6924848590544207885", "title": "🌚如何更容易上手 Typescript 类型计算？", "desc": "这个问题的答案在实战演练环节会结合本文的内容给出答案，如果你觉得这个问题简单得很，那么恭喜你，你已经具备本文将要介绍的大部分知识点。 我们需要知道 promisify(fs.readFile)(...) 这里能够接受的类型。 我们需要知道 let file = await ..…"}, {"id": "6844903921031479309", "title": "为 Vue3 学点 TypeScript, 命名空间(namespace)是什么?", "desc": "看js代码能发现, 在js中命名空间其实就是一个全局对象. 如果你开发的程序想要暴露一个全局变量就可以用namespace; 现在在yyy.ts中我们就可以直接使用xxx.ts中的Food类型了, 而不需要使用import. 如果你的tsconfig中设置了\"module\": …"}, {"id": "6862803836781002760", "title": "图解设计模式之发布-订阅模式（TypeScript）", "desc": "1. 生活场景 最近刚毕业的学生 Leo 准备开始租房了，他来到房产中介，跟中介描述了自己的租房需求，开开心心回家了。第二天，中介的小哥哥小姐姐为 Leo 列出符他需求的房间，并打电话约他一起看房了，最后 Leo 选中一套满意的房间，高高兴兴过去签合同，准备开始新生活~ 还有个…"}, {"id": "6999437922340438052", "title": "TypeScript之泛型", "desc": "这是我参与 8 月更文挑战的第 6 天，活动详情查看： 8月更文挑战 为什么要用泛型 定义时就限制类型 只能传入number类型，无法传入string等类型 采用any 是可以支持传入任何类型，可传入"}, {"id": "6998305839933046798", "title": "typescript学习系列5:命名空间namespace", "desc": "这是我参与 8 月更文挑战的第 5 天，活动详情查看： 8月更文挑战 1.在浏览器下运行ts文件： 目录树如下： 新建文件夹mytscode文件夹,输入npm init -y 运行tsc -init,"}, {"id": "6991021399322148872", "title": "TypeScript——JSX", "desc": "JSX是一种嵌入式的类似XML的语法。 它可以被转换成合法的JavaScript，尽管转换的语义是依据不同的实现而定的。 JSX因React框架而流行，但也存在其它的实现。"}, {"id": "6992540247191978014", "title": "TypeScript在vue编码中使用小结（ts的？！类型转换等方面问题）", "desc": "TypeScript中 问号 感叹号 会有点令人费解。TypeScript有时需要手动进行一些类型转换才能消除错误提示。本文将会讲解以上问题并给出一定的解决方法，并持续更新中，并主要面向vue3开发。"}, {"id": "6994761135023439880", "title": "从TS接口来理解观察者和发布订阅者设计模式", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：     8月更文挑战 ​ 观察者模式 核心：解决一对多的消息通信问题。 特点：观察者 ：拥有一个更新的方法(收到通知的回调)， 被观察对象 ：拥有一个添"}, {"id": "6962554488032854029", "title": "用TypeScript类型系统编程实现斐波那契数列", "desc": "TypeScript经常被用于项目中的类型约束，使得在JavaScript这种弱类型语言中有了静态检查的能力，但你有想到过用TypeScript类型语法也可以编程实现一个斐波纳切数列算法吗？"}, {"id": "6873671679080398855", "title": "前端架构探索与实践", "desc": "从思考、到探索、到脚手架的产生，后面经过一系列的项目开发，不断优化和改良。目前已经成功应用到房产中间页（改名天猫房产）中。这里，做一下总结。 目前，我们大多数页面，包括搜索页、频道页都是大黄蜂搭建的页面。至于搭建的优点，这里就不多赘述了。而我们使用源码编写，主要是基于以下几点思…"}, {"id": "6844904054770892813", "title": "tsconfig.json入门指南", "desc": "之前开发都是在用脚手架,几乎0配置,只需要会ts的语法就完全可以开发ts项目了，这次自己从零折腾了一个ts项目，发现配置方面还是有挺多坑的，所以不如从头看一下具体的方法和文档，于是总结出了这篇文章。相信我，自己系统的了解一遍和使用脚手架直接配置相比，理解上肯定会有不一样的认知。…"}, {"id": "6992377628921593886", "title": "小白学前端之TypeScript的数据类型", "desc": "String 包装类型对象 此外 String 对象还有许多对象方法，详见：https://www.runoob.com/typescript/ts-string.html Number Number"}, {"id": "6980965121392640007", "title": "TypeScript——接口", "desc": "TypeScript的核心原则之一是对值所具有的结构进行类型检查，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。"}, {"id": "6990338818129788935", "title": "react+ts白手起家建个属于自己的项目（二  应用篇）", "desc": "目标 1、配置路由 使用react-router-dom 官方文档 https://reactrouter.com/web/guides/quick-start 项目目录 app.jsx代码 home"}, {"id": "6844904068951834632", "title": "对比理解Typescript中的as、问号与叹号", "desc": "在Typescript中，表示断言有两种方式。一种是尖扩号表示法: 唯一区别是，在JSX中，尖扩号与JSX语法冲突，只能使用as关键字。 可选属性的含义是：使用这个属性时，要么这个属性名不存在，要么必须符合属性的类型定义（官方解释）。比如上述createSquare函数编译时会…"}, {"id": "6844904122550845448", "title": "精读《@types react 值得注意的 TS 技巧》", "desc": "从 @types/react 源码中挖掘一些 Typescript 使用技巧吧。 泛型可以指代可能的参数类型，但指代任意类型范围太模糊，当我们需要对参数类型加以限制，或者确定只处理某种类型参数时，就可以对泛型进行 extends 修饰。 问题：React.lazy 需要限制返回…"}, {"id": "6993596331440914440", "title": "TypeScript中的函数（中）", "desc": "JavaScript中的每个函数都有this变量，而不局限于类的方法；以不同的调用函数，this的值也不同，这极易导致代"}, {"id": "6982219930905575432", "title": "TypeScript + React 个人最佳实践(WIP持续补充中)", "desc": "React + TypeScript 个人最佳实践；本文最初发布于个人博客：https://moltemort.top/post/typescript-react-ge-ren-zui-jia-shi"}, {"id": "6844903588200726535", "title": "JavaScript 装饰器极速指南", "desc": "Decorators 是ES7中添加的JavaScript新特性。熟悉Typescript的同学应该更早的接触到这个特性，TypeScript\b早些时候已经支持Decorators的使用，而且提供了ES5的支持。\b\b本文\b会对Decorators做详细的讲解，相信你会体验到它给…"}, {"id": "6844903682618687496", "title": "记录一次基于vue、typescript、pwa的项目由开发到部署", "desc": "最近秋招之余空出时间来按自己的兴趣动手做了一个项目，一个基于vue，typescript，pwa的实验浏览移动端webapp，现在趁热打铁，将这个项目从开发到部署整个过程记录下来，并将从这个项目中学习到的东西分享出来，如果大家有什么意见或补充也可以在评论区提出。先介绍一下这个项…"}, {"id": "6986552161375092766", "title": "TypeScript的类型注解--(TypeScript 02) ", "desc": "TS中的类型注解 基础类型：boolean string number null undefined symbol any never 对象：interface 数组：number[] string["}, {"id": "6844903573927493640", "title": "浅谈TypeScript类型、接口、装饰器", "desc": "TypeScript 对于前端人员甚至后台人员都不算是特别陌生的东西了（身边很多java朋友看ts都觉得还不错），今天来聊聊这玩意，基础用法，以及项目中大家都是怎么用的。 ts里大家多少应该都听过，一些number类型string类型包括函数的参数类型什么nerver、void…"}, {"id": "6985024494792343589", "title": "【Typescript】知识梳理：基础类型", "desc": "文章整理总结了typescript的几种基础数据类型以及一些类型相关的方法和书写规则。适用于入门了解和日常温故。"}, {"id": "6844903705955794952", "title": "一起学 TypeScript 基础篇", "desc": "今年10月初尤雨溪在 GitHub 发布了 vue3 的 Pre-Alpha 版本源码，同时大部分源码使用了 TypeScript 语言进行编写。可以说 TypeScript 已经成为前端开发未来的趋势。 本篇大部分内容讲 TypeScript 的基础知识，后续内容会更新介绍 …"}, {"id": "6844904177286512653", "title": "TypeScript Compiler API 使用简介", "desc": "TypeScript 本身提供了一些 Compiler API，可以生成 TypeScript 代码对应的 AST 等操作。作为官方提供的编译工具，也可以说是目前唯一可用的工具了。TypeScript 官方有一个介绍 Compiler API 的 Wiki，但这个文档内容较少，…"}, {"id": "6877836937982705677", "title": "【ts】这都Vue3，还不学习TypeScript嘛?", "desc": "​ 首先我就爱喜欢一篇长文总结学习知识点，方便不说，也是为了统筹全局的学习，所以，篇幅和前面的文章一样，可能有点过于长，别介意哈，我不太喜欢分一二三四，一口气吃完，我也觉得挺香的哈。 数字枚举：默认情况下，从0开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的…"}, {"id": "6997239118748975140", "title": "踩坑：webstorm 中使用 typescript 自定义类型识别错误问题", "desc": "在前端项目中想使用 typescript 定义数据类型，但发现 webstorm 开发工具总是无法正确识别自定义的数据类型。"}, {"id": "6917523407886106631", "title": "TypeScript 渐进迁移指南", "desc": "我在大概一年前写了一篇如何把 Node.js 项目从 JavaScript 迁移到 TypeScript 的指南。指南的阅读量超过了七千，不过其实当时我对 JavaScript 和 TypeScript 的了解并不深入，把重心更多地放到特定工具上，而没怎么从全局着手。最大的问题…"}, {"id": "6927475526202294285", "title": "细嚼慢咽 Typescript +  React17 +Eslint + Git hook 工作流", "desc": "那时候 create-react-app 还没有官方的 ts 版本。 eslint 和 tslint 还没合并在一起。 大部分项目都在用 ts-loader + eslint + tslint + webpack + babel 混用的工作流。 每次修改了一点代码，都会将 ts…"}, {"id": "6844903873912668173", "title": "Typescript 函数类型", "desc": "函数，一等公民（满满的自豪感）。 通过对接口定义的认识，函数的参数多一个和少一个（没有对参数做可选操作）应该也不行。试一下 提示很明显了，就是说我们参数多了一个，参数少了一个。总结，函数对于参数的个数是不容修改的。 来看 = 左边，多了 : (x: number, y: num…"}, {"id": "6938026834525159431", "title": "Vue3 + Typescript 开发浏览器插件", "desc": "索性就写个浏览器插件，当看到好文章的时候也可以保存至服务器，也方便分享给团队成员。 目的明确 浏览器插件, 在查相关资料得时候想起来以前看过一篇政采云的浏览器插件文章。 项目创建完成了，咱们就要去装点npm包来开发了。 public 文件夹下创建icon, 再放入几张png。 …"}, {"id": "6907498065846861831", "title": "什么是 TypeScript 4.1 中的模板字面类型？", "desc": "写了这么多年 TypeScript，最大的感触就是它非常易于理解——特别是对于具有 Java 背景的人。 但是，在听说了 TypeScript 4.1（该语言最近的重大更新）的新闻之后，我还是为新鲜的特性感到惊奇。 我不认为我是个无知的例外。 在利用该新闻作为机会来深入了解类型…"}, {"id": "7000664063088787493", "title": "三、TypeScript class 类", "desc": "“这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战” class 类 类是面向对象语言的程序设计中的概念，是面向对象编程的基础。 类是创建对象的模板,是对现实生活中一类具有共同特征的事物的"}, {"id": "7000641597935190030", "title": "TypeScript 基础整理", "desc": "快速上手 yarn init --yes yarn add typescript --dev yarn tsc path // 文件 编译好的注解会自动去掉 配置文件 生成配置文件: yarn tsc"}, {"id": "6860263805625204743", "title": "亲手码出TypeScript最前沿的教程（基础篇）", "desc": "本文旨在帮助大家在闲暇时间掌握TS用法，故抽出时间，学习整理TypeScript教程，本文大部分内容来自阮一峰老师的网站，大家放心阅读。 TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源…"}, {"id": "6995421126767673381", "title": "TypeScript中同名interface接口会自动合并", "desc": "今天在VSCode里用TypeScript写代码时发现一个很有趣的事情 如上图，当我在调用bugReport传入URIError的对象时，vscode提示了如下错误 意思就是对象{ status: 5"}, {"id": "6980995865565462559", "title": "TypeScript——泛型", "desc": "可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。"}, {"id": "6987661586953404453", "title": "ts报错Declaration of public instance field not allowed after declaration of public", "desc": "ts报错Declaration of public instance field not allowed after declaration of public instance method. In"}, {"id": "6844904113822498830", "title": "Vue + TypeScript 踩坑总结", "desc": "有些问题可能还没解决，欢迎各位大佬给与提点。 大体用 vue-cli 创建的项目，结构基本不变。 1、将 shims-vue.d.ts 文件一分为二。 第一种：github 找到的 demo 这样。如下代码中hideHeader就是由默认参数的父组件传过来的属性 如果不传值此函…"}, {"id": "6844904121821036551", "title": "create-react-app typescript 配置路径别名", "desc": "最近在开发新项目，时间比较紧急，所以并没有时间去浏览技术文章沉淀新知识。但只要用心，会思考，在业务开发中也是可以沉淀技术的。 这次的项目是用create-react-app搭建的，开发语言选的是typescript。由于是首次用typescript来开发搭建一个完整的项目（以前…"}, {"id": "6995938935767564295", "title": "《TypeScript》 - Map 对象", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 Map 对象保存键值对，并且能够记住键的原始插入顺序。 任何值(对象或者原始值) 都可以作为一个键或一个值。 Map 是 ES6 中引入的"}, {"id": "6844903927456989197", "title": "当Koa遇上Typescript的时候", "desc": "最近在做运营侧中台项目的重构，目前的选型是 koa2+typescript。在实际生产中，切实体会到了 typescript 类型带来的好处。 作为一门灵活度特别大的语言，坏处就是：复杂逻辑编写过程中，数据结构信息可能由于逻辑复杂、人员变更等情况而丢失，从而写出来的代码含有隐含…"}, {"id": "6986264431499935774", "title": "typescript学习（进阶）", "desc": "11类型守卫：如何有效地保障类型的安全性？ 11.1类型守卫 JavaScript 作为一种动态语言，意味着其中的参数、值可以是多态（多种类型）。因此，我们需要区别对待每一种状态，以此确保对参数、值的"}, {"id": "6993384332152799240", "title": "TypeScript学习(十七)：模块解析 | 八月更文挑战", "desc": "“这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战” TS 1.5 开始内部模块用命名空间表示，外部模块用 module 表示。 使用场景 以文件为例：一份文件就可以看作是一个模块 当文件内"}, {"id": "6999807282343051277", "title": "[深入25] Typescript", "desc": "导航 [react] Hooks [封装01-设计模式] 设计原则 和 工厂模式(简单抽象方法) 适配器模式 装饰器模式 [封装02-设计模式] 命令模式 享元模式 组合模式 代理模式 [React "}, {"id": "6984378114897870861", "title": "浅谈 Typescript（一）：什么是Typescript？", "desc": "Typescript 为 JS 带来了类型能力，如今已被越来越多的大型前端项目选用。Typescript 的出现大大改善了开发体验，增强了代码的可维护性和稳定性。"}, {"id": "6995533168824549384", "title": "TS（TypeScript）基础知识四：泛型", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 泛型是什么？为什么要用到泛型？来看几个例子 泛型函数 重载 即使考虑的很全面，也有漏掉某些类型的可能。或者将来语法扩展多出了新的类型，又需要"}, {"id": "6844903977461514254", "title": "TypeScript 泛型之 Omit<T, K> = Pick<T, Exclude<keyof T, K>>", "desc": "如果对这个例子很清晰，大佬请点击右上角。 如果不清楚 我们可以来往下共同探索一番。。 Partial 作用是将传入的属性变为可选项. 我们发现一个有意思的用法 -?, 这里很好理解就是将可选项代表的 ? 去掉, 从而让这个类型变成必选项. 与之对应的还有个+? , 这个含义自然…"}, {"id": "6883432548970545160", "title": "15分钟入门Typescript", "desc": "在本文开始之前，我们需要先了解一些类型系统的相关知识，然后我们会分析Javascript类型系统的特征和已经存在的一些问题，进而开始学习Javascript类型系统问题的终极解决方案---TypeScript。 从类型安全的角度出发，类型系统分为强类型与弱类型，从类型检查的角度…"}, {"id": "6844904066489778183", "title": "Typescript 中的 Partial, Readonly, Record, Pick", "desc": "在 typescript （后面简称为 ts）中定义 interface（后面简称为“接口”） 时，常常需要对进行二次封装或调整，而 ts 在2.1版本中加入了一些程序类型工具，供开发者方便的进行此类操作。 这些程序类型早在2016年就发布了，因此已经被很多框架或插件所使用。那…"}, {"id": "6844904008834875400", "title": "Node.js项目TypeScript改造指南", "desc": "如果你有一个 Node.js 项目，并想使用 TypeScript 进行改造，那本文对你或许会有帮助。TypeScript 越来越火，本文不讲为什么要使用 TypeScript，也不讲基本概念。本文讲的是如何将一个旧的 Node.js 项目使用 TypeScript 进行改造，…"}, {"id": "6996955747909107725", "title": "使用typescript实现对后端接口规范，参数自动匹配，以及返回值的定义。", "desc": "先看效果：^_^ API ModelApi RequestParams： BaseParams： BasePage： 使用： RequestRes： BaseListRes： 使用： 在post方法中"}, {"id": "6994046752479248415", "title": "6. 学习 typescript 复杂用法", "desc": "1.Partial<Type>：将类型的属性「变成可选」 索引类型查询操作符: keyof 使用 2.Required<Type>:将类型的"}, {"id": "7002012702046437406", "title": "TypeScript学习笔记（二）", "desc": "TypeScript的接口的基本使用及属性和方法的写法，类的构造函数、继承、重写、访问类型及静态属性和方法"}, {"id": "6984945589859385358", "title": "@babel/types深度应用", "desc": "前文说过，types已经集成到@babel/core里，当然也可以单独安装： 概述 @babel/types的用途主要有3种： 类型集合 当你在ts中使用babel时，types可以为你提供全部节点对"}, {"id": "6991968796575531039", "title": "TypeScript中的复杂类型 ｜ 8月更文挑战", "desc": "复杂的数据类型，如：数组、元组、对象、枚举等等，在TypeScript中有时我们也可以根据数据的类型推导而事半功倍，以及不同类型的字面量所表示的含义及作用"}, {"id": "6844904183003349005", "title": "TypeScript 期中考试开始了！", "desc": "相信这段时间来，对 TypeScript 感兴趣的小伙伴们已经把这个神器给系统的学习了一遍了吧。如果计划开始学习但是还没有开始，或者没有找到资料的同学，可以看下我在之前文章中 前端进阶指南 找一下 TypeScript 部分的教程，自行学习。 本文从最近在 Github 上比较…"}, {"id": "6998323276174852110", "title": "TypeScript重写axios之项目诞生", "desc": "TypeScript重写axios之项目诞生，如何更灵活的使用TypeScript，那肯定要多去重构一些开源的库"}, {"id": "6990981470382882852", "title": "TypeScript——模块解析", "desc": "模块解析是指编译器在查找导入模块内容时所遵循的流程。假设有一个导入语句 import { a } from \"moduleA\"; 为了去检查任何对 a的使用，编译器需要准确的知道它表示什么..."}, {"id": "7000249225107734535", "title": "TS（TypeScript）基础知识八：类型转换（别名和函数）", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 别名中的类型转换 Exclude<Type, ExcludedUnion> “排除”：通过从 Type 中排除所有可分配给 Exclude"}, {"id": "6855517117778198542", "title": "深入 TypeScript 中的子类型、逆变、协变，进阶 Vue3 源码前必须搞懂的。", "desc": "TypeScript 中有很多地方涉及到子类型 subtype、父类型 supertype、逆变和协变covariance and contravariance的概念，如果搞不清这些概念，那么很可能被报错搞的无从下手，或者在写一些复杂类型的时候看到别人可以这么写，但是不知道为什…"}, {"id": "6844903880006844424", "title": "在Typescript项目中，如何优雅的使用ESLint和Prettier", "desc": "对于Typescript项目的编码规范而言，主要有两种选择ESLint和TSLint。ESLint不仅能规范js代码，通过配置解析器，也能规范TS代码。此外由于性能问题，TypeScript 官方决定全面采用ESLint，甚至把仓库作为测试平台，而 ESLint 的 TypeS…"}, {"id": "6994739325967548446", "title": "设计模式 - State 状态模式", "desc": "《设计模式 - State 状态模式》 State（状态模式） State（状态模式）属于行为型模式。 意图：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。 简单来说，就是将"}, {"id": "6999983369069166628", "title": "重学前端 | TypeScript入门之进阶篇", "desc": "本篇先从类型操作（keyof）说起，然后主要说的是TypeScript进阶的接口和类。 前言 『前期回顾』 重学前端 | TypeScri"}, {"id": "6926445148880502792", "title": "Typescript 4.0新特性一览｜牛气冲天新年征文", "desc": "但如果传入的元祖长度不能确定，我们只能不断的编写重载以尽可能覆盖所有的情况，这显然是不可接受的。 TypeScript 4.0 带来了两个基础更改，并在推断方面进行了改进。 其中一个更改是范型可用于扩展运算符。这意味着可以用范型声明一个可变的元祖。 另一个更改是旧版本Types…"}, {"id": "6926812947050135565", "title": "TS 泛型疑难杂症详解", "desc": "关键词：keyof、typeofTextendsany?U:Yinfer协变、抗变、双变、不变（最后一个本文没提到，参考文章中有）一来就showyoucode~如果下面这些都能看懂且理解，那么恭喜你，"}, {"id": "6883747691218599943", "title": "加入wangEditor开发小组2个月，我的感受", "desc": "我是一名研究生，目前刚研二。研一的时候，课题组有一个网站项目，我负责前端部分。项目中需要用到富文本编辑器，于是我找到了wangEditor的群，最后很方便的引入了wangEditor。在此过程中，以及"}, {"id": "6847902214174801934", "title": "想去力扣当前端，TypeScript 需要掌握到什么程度？", "desc": "2018 年底的时候，力扣发布了岗位招聘，其中就有前端，仓库地址：https://github.com/LeetCode-OpenSource/hire 。与大多数 JD 不同， 其提供了 5 道题， 并注明了: 完成一个或多个面试题，获取免第一轮面试的面试机会。完成的题目越多…"}, {"id": "6844903826558812167", "title": "typescript：never与keyof的妙用", "desc": "typescript的never类型代表永不存在的值的类型，它只能被赋值为never。 可以这样理解：若type T = T1 & T2，则T类型的值可以赋给T1或T2类型的变量（类似类的继承关系）。 那么若与never交叉，则T类型的值可以赋给一个never类型的变量，那T只…"}, {"id": "6949805275989671944", "title": "TS深入浅出系列 - 面向类型编程", "desc": "用面向类型编程的思想去写TypeScript类型，结合JS编程基础学习TypeScript面向类型编程基础知识，穿插TypeScript内置类型，结合知识点实现useRequest。"}, {"id": "6844904030917885959", "title": "TypeScript 演化史 -- 10】更好的空值检查 和 混合类", "desc": "在TypeScript 2.2中，空检查得到了进一步的改进。TypeScript 现在将带有可空操作数的表达式标记为编译时错误。 如果+运算符的任何一个操作数是可空的，并且两个操作数都不是any或string类型。 如果-，*，**，/，%，&#x3C;&#x3C;，>>，>>…"}, {"id": "6844903874004779016", "title": "Typescript 内置对象", "desc": "在 Typescript 数组类型 这篇文章末我们提及到了 Typescripe 一种内置对象。 在 Typescript 中内置对象是作为已经定义好（内置）的类型去使用的，很显然它是存在全局作用域（Global）上。 拿 Boolean 这个内置对象来说吧，这样的对象在 EC…"}, {"id": "6983962439993802788", "title": "TypeScript 学习笔记", "desc": "本文为TS学习笔记的基础班，里面介绍了TS相关的一些比较基础的东西，对于初学者有很大帮助，进阶版的学习笔记后面也会更新上来。"}, {"id": "6983941409522843684", "title": "TypeScript 常用工具泛型", "desc": "前言 Typescript 中默认内置了很多工具泛型，通过使用这些工具，可以使得我们定义类型更加灵活，高效。本文将会介绍常用泛型工具的使用技巧，以及对其实现原理进行相应的解析。"}, {"id": "6976426195936083976", "title": "typescript语法初级 ", "desc": "什么是typescript？ typescript是javascript的一个超级 必须通过响应的编译器才能进行运行 typescript的优点 有更好的报错机制 更好的编辑器提示 更好的语义化申明以"}, {"id": "6873388654803288071", "title": "TypeScript：vue全家桶中如何使用TypeScript语法合集", "desc": "这篇学习如何在vue项目中使用ts，其中包含：组件，axios请求，vuex，父子组件传值，Mixins等。。。 vue-class-component 强化 Vue 组件，使用装饰器语法使 Vue 组件更好的跟TS结合使用。 vue-property-decorator在 v…"}, {"id": "6954023744809467935", "title": "5分钟Typscript - 枚举（Enums）", "desc": "Typscript - 枚举（Enums） 基本用法 & 类型 字面量类型推断 如果枚举的值都是字面量类型，则TS可以利用这个枚举推断并缩减类型范围 运行时 & 编译时的特性 枚举的反向映射 常量枚举"}, {"id": "6870668113210245134", "title": "开始编译第一个typescript实例", "desc": "1、什么是typescriptTypeScript是JavaScript的一个超集，支持ECMAScript6标准。TypeScript由微软开发的自由和开源的编程语言。TypeScript设计目标是"}, {"id": "6844903973141348366", "title": "【译】Typescript 3.7 常用新特性一览", "desc": "3.7, 其实至今 3.9 beta 已经发布，有兴趣的同学可以研究一下，这里列举几个常用的 3.7 的特性。 大部分自译，少量借用 google 翻译(ps: google 翻译质量还不错)，需要了解和使用 typescript 的看官网学习是非常好的，特别是英文文档写得非常…"}, {"id": "6844903841763328013", "title": "TypeScript 中的非基础类型声明", "desc": "在使用 TypeScript 进行类型声明时，除了使用到 boolean 、number、string、Array 等基础类型，还会使用到 DOM 元素的声明，或者 setInterval 等常用方法的声明。自己刚开始使用 TypeScript 的时候，会对这些非基础类型的声明…"}, {"id": "6921981879629381639", "title": "TypeScript 的 Substitutability", "desc": "Substitutability 中文含义是 可代替性，这个词我未在 TypeScript 的语言特性相关文档上看到，百度、谷歌搜索也寥寥无几。仅在TypeScript FAQ 找到相关描述。 这段描述很好理解，大体就是子类型可以用在父类型出现的地方。但实际涉及的TypeScr…"}, {"id": "6844903703913168909", "title": "HTML5游戏开发(五)：飞机大战之让所有元素动起来", "desc": "《HTML5游戏开发》系列文章的目的有：一、以最小的成本去入门egret小项目开发，官方的教程一直都是面向中重型；二、egret可以非常轻量；三、egret相比PIXI.js和spritejs文档更成熟、友好；四、学习从0打造高效的开发工作流。 本文我们将会让游戏的所有元素动起…"}, {"id": "6916743631281848334", "title": "TS学习中可能会遇到的问题", "desc": "对于使用过 JavaScript 的开发者来说，对于 window.MyNamespace = window.MyNamespace || {}; 这行代码并不会陌生。为了避免开发过程中出现冲突，我们一般会为某些功能设置独立的命名空间。 以上异常信息是说在 Window &#x…"}, {"id": "6844903886063419400", "title": "TS与JS中的Getters和Setter究竟有什么用", "desc": "当 ECMAScript 5（2009）发布时，getters 和 setter（也称为访问器）被引入 JavaScript。 问题是，对于引入它们的原因及实用性存在很多困惑。 我在 reddit 看到了一个帖子，讨论的内容是它们是否是反模式。 不幸的是，该主题的普遍共识是 “…"}, {"id": "7002829811177504798", "title": "TypeScript搭配项目axios request接口做推倒", "desc": "简述 随着前端技术的发展，TypeScript 已经逐渐取代Javascript，尤其在各大开源项目，或者是其他开源js项目，我们都可以看到ts的身影，例如我们熟知的vue3 就是用ts重构的； 在使"}, {"id": "6961012856573657095", "title": "为什么我不用 Typescript", "desc": "说下我个人感觉 Typescript 的缺点、为何它的优点无法打动我用它替代 Javascript，以及跟推荐我使用 Typescript 的大家讲一下我不用 Typescript 的逻辑。"}, {"id": "6937750049715650591", "title": "聊一聊 Vue 3 双向绑定是如何工作的", "desc": "本文是 Vue 3.0 进阶系列 的第三篇文章，在阅读本文前，建议你先阅读 Vue 3.0 指令的本质是什么 和 Vue 3.0 $emit 之后发生了什么 这两篇文章。在看具体示例前，阿宝哥先来简单介绍一下双向绑定，它由两个单向绑定组成： 视图 —> 模型事件绑定。 而在表单…"}, {"id": "7005459533623459876", "title": "Ts在项目中的使用笔记之常用类型", "desc": "一、常用类型 字符串 string 数字类型 number 布尔类型 boolean 数组类型 array 元组 Tuple 当访问一个已知索引的元素，会得到正确的类型： 当访问一个越界元素，会使用一"}, {"id": "6999657240550440973", "title": "为什么推荐使用 TypeScript 开发 Vue3", "desc": "在 Vue3 中，官方全面采用 TypeScript 进行开发，极大的增强了对 TypeScript 的支持，Vue3 可以说是先天就支持类型提示，和 Vue2 相比好了太多。"}, {"id": "6844904126283776014", "title": "Vue3 跟着尤雨溪学 TypeScript 之 Ref 类型从零实现", "desc": "Vue3 中，ref 是一个新出现的 api，不太了解这个 api 的小伙伴可以先看 官方api文档。 简单介绍来说，响应式的属性依赖一个复杂类型的载体，想象一下这样的场景，你有一个数字 count 需要响应式的改变。 这样肯定是无法触发响应式的，因为 Proxy 需要对一个复…"}, {"id": "7003366517723103245", "title": "TypeScript快速入门教程（四）、联合类型 & 交叉类型 & 类型保护", "desc": "联合类型和交叉类型其实在生活中是一个很常见的案例。 黄瓜，你说他是水果还是蔬菜呢？ 番茄是属于水果还是属于蔬菜呢？ 那么水果黄瓜呢？ 其实我们单纯看黄瓜和番茄的话，其实既可以算是水果，也能算是蔬菜，其"}, {"id": "6994236151942905864", "title": "「TypeScript」入门基础(三)🎯---数组类型与函数类型", "desc": "本文主要分享了TypeScript的数组类型和函数类型，欢迎掘友们阅读。虽然之前有学过TypeScri但是平时业务上面都还是用JavaScript来开发导致逐渐对TypeScript生疏了..."}, {"id": "6999902837387821070", "title": "TS（TypeScript）基础知识七：类型转换（接口）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 接口中的类型转换 Readonly 修饰符 之前的章节中有提到过Readonly修饰符，所以我们很容易明白这个代表的是只读。我们先来看第一"}, {"id": "6868530321776705544", "title": "你还在为项目里的重复请求发愁吗?", "desc": "最近发现项目里面会出现一些重复的请求，在某些页面中，相同参数相同地址的请求会在1s之内连续发送多次。为了解决这个问题，最终做出了两个工具（repeat-request-minder和repeat-request-minder-webpack-plugin）来辅助我们避免重复的请…"}, {"id": "6844903877859360776", "title": "抛弃 JS，使用 TypeScript", "desc": "最近几个月我已经全面抛弃 JavaScript，完全使用 TypeScript 进行前端开发（只在上课的时候用到 JS）。 bug 显著减少，之前会遇到的 xxx 为空的问题几乎不会出现了，类型相关 bug 直线减少。 应用更可控，当你需要约束某些代码的时候，用类型就能很简单地…"}, {"id": "6997235605843230733", "title": "Vite + TypeScript + Ant Design Vue 搭建后台管理系统（四）", "desc": "从零开始搭建后台管理系统 采用的技术是Vite2，Vue3，Vue Router 4.x，Vuex 4.x，Ant Design Vue 2.x，Typescript"}, {"id": "7001857261756743694", "title": "TS 中实现 IsEqual 工具类", "desc": "最近刷体操题，很多场景都需要判断两个类型是否相同，那么如何优雅地实现isEuqal<A, B>这样一个工具类 呢？ 很自然地想到了使用 extends，两个类型互相 extends 的话那不就表示类型"}, {"id": "6844903936483131405", "title": "京东 PC 首页 2019 改版前端总结", "desc": "在性能几近无懈可击的情况下，我们决定从稳定性入手，为项目引入强类型校验，弥补 JavaScript 这种弱类型语言在不可预测性上的缺陷。 强类型语言 TypeScript 已发布6年有余，国内应用的开发者也在慢慢增长。一般来说，业务开发周期短，迭代频繁，TypeScript 的…"}, {"id": "6998040237217677325", "title": "TypeScript-类型系统深入", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6844903863791648782", "title": "TypeScript 高级技巧", "desc": "用了一段时间的 typescript 之后，深感中大型项目中 typescript 的必要性，它能够提前在编译期避免许多 bug，如很恶心的拼写问题。而越来越多的 package 也开始使用 ts，学习 ts 已是势在必行。 以下是我在工作中总结到的比较实用的 typescri…"}, {"id": "6997593810465193992", "title": "深入理解Typescript系列-TSX", "desc": "这是我参与 8 月更文挑战的第 18 天，活动详情查看： 8月更文挑战 前言 JSX是一种可以在JavaScript中描述HTML的语法，尽管转换的语义是依据不同的实现而定的。 JSX本身也是一个表达"}, {"id": "6844903741456384014", "title": "vue-property-decorator使用指南", "desc": "在Vue中使用TypeScript时，非常好用的一个库，使用装饰器来简化书写。"}, {"id": "6902003222890692615", "title": "Typescript代码整洁之道", "desc": "最近半年陆续交接了几位同事的代码,发现虽然用了严格的eslint来规范代码的书写方式，同时项目也全量使用了Typescript,但是在review代码的过程中,还是有很多不整洁不规范的地方。良好的代码具有很好的可读性,后续维护起来也会令人愉悦,也能降低重构的概率。本文会结合Ty…"}, {"id": "6957694465486094350", "title": "写了3个月TypeScript，我学到了什么？", "desc": "最近在新环境的日常工作中也需要用到TypeScript，学习过程中遇到一些疑惑，做了记录。 个人觉得还是比较适合TypeScript入门的同学阅读的，因为我遇到的这些疑惑，可能你也会遇到。"}, {"id": "6992001689867780126", "title": "从0开始的TypeScriptの三：TS的类型", "desc": "本次来介绍一些TypeScript中新的类型, 有元组，枚举，任意值，Unknown，空值，Never。 在TypeScript对于类型系统的使用，还存在类型别名和类型断言等用法"}, {"id": "6990991978104111134", "title": "TypeScript——声明合并", "desc": "TypeScript中有些独特的概念可以在类型层面上描述JavaScript对象的模型。 这其中尤其独特的一个例子是“声明合并”的概念。 理解了这个概念，将有助于操作现有的JavaScript代码。"}, {"id": "6988364988427534349", "title": "TypeScript 内置工具详谈", "desc": "TypeScript 内置 Type 详谈。TypeScript 提供了几种实用程序类型来助力常见的类型转换。这些实用程序是全局可用的。 也就是说全局声明了一些`Type`, 调用`Type`就可以"}, {"id": "6946144546518466573", "title": "Typescript 泛型包教包会", "desc": "不知道在你的日常工作中，是否出现过这样的场景：明明 Typescript 官方文档已经看了很多遍，实际写起代码来却各种煎熬，遇到报错，在搜索无果之后，无奈写下 any。🤷‍♀️ （我猜有，不然你也不会点开这篇文章。👻 而阻碍你强类型更近一步的，绝大多数情况下是因为泛型还没完…"}, {"id": "6989171435675582494", "title": "TypeScript使用详解", "desc": "typescript安装，运行环境的搭建，以及各种类型使用方式，泛型、枚举、联合类型等等，还有模块的使用方式。"}, {"id": "7001881657976291335", "title": "hooks中的ts类型", "desc": "React中的hooks 学习这些内容需要一些前置知识，typescript的类型定义和react的hooks知识。 在看hooks的类型声明时建议先看_。 useState useMemo useC"}, {"id": "6844904137788768264", "title": "【万字长文】深入理解 Typescript 高级用法", "desc": "最近刚入职新公司，正好部门每个新人都需要做技术分享，这里借这个机会把自己的知识体系梳理一遍。 原本题目设定为是 Typescript 高级用法介绍，但是考虑掘金有很多关于 Typescript 高级用法 相关的分享，写的都非常好，这里就不做重复性工作了。所以把题目改成了 深入理…"}, {"id": "6999621568900890631", "title": "TypeScript中你可能不知道的这些数据类型", "desc": "类型 TypeScript的类型有很多，但是这里不会逐一进行讲解。下面列出来的几种类型，有的你可能没听过、有的你可能没用过、有的你可能用过但是不知道含义、有的你可能知道含义但是不能和其他类型区分···"}, {"id": "6995165569687388190", "title": "从0开始的TypeScriptの九：接口Interfaces · 中", "desc": "接口 Interfaces （中篇） 在上一次的《从0开始的TypeScriptの四：接口Interfaces · 上》文章中，已经把typescript的接口基本使用说完了（我自己如果有遗忘也会重新"}, {"id": "6929793926979125255", "title": "使用 Typescript 的一些注意事项", "desc": "ts 用了一年了，回顾起来，也没有那么顺利。趁这两天春节假期有时间，整理了几个自己觉得需要注意的情况，复盘一下。 我上学时学过 java 和 C# ，毕业后又做了两年 C# 全栈开发，对于静态类型语言是有一定经验的。ts 之所以能够慢慢取代 js ，也是因为它是静态类型语言。 …"}, {"id": "6973457503480709151", "title": "看看 TypeScript4.3 带来了哪些新特性", "desc": "TypeScript4.3正式发布，确定不了解一下么？可以通过npm直接下载或更新最新版本体验哦。冲鸭"}, {"id": "6951934677682749477", "title": "因为这几个 TypeScript 代码的坏习惯，同事被罚了 500 块", "desc": "摘要：近几年 TypeScript 和 JavaScript 一直在稳步发展。我们在过去写代码时养成了一些习惯，而有些习惯却没有什么意义。以下是我们都应该改正的 10 个坏习惯。"}, {"id": "6998508262542802951", "title": "TypeScript 创建单页天气查询应用程序", "desc": "TypeScript 是 javaScript 的类型的超集，它可以编译成纯 javaScript。编译出来的 javaScript，使用TypeScript创建单页应用程序（SPA）示例，天气查询。"}, {"id": "7002593723066351629", "title": "TypeScript小笔记", "desc": "陆陆续续从文档上手`TypeScript`，发现仍然还是有很多不懂。 比如各种框架的常用类型，`ts`中内置的常用类型，以及一些容易被忽略和遗忘的点，陆陆续续顺手把他们写到文章中记录起来。"}, {"id": "6972834535167754270", "title": "Node 系列 - 002 - TypeScript", "desc": "TypeScript 是 JavaScript 的超集，为语言增加了新的功能（下面简称 TS）。jsliang 羡慕 TypeScript 很久了，一直没有自己去搭建过，都是用别人搭建好的……"}, {"id": "6861525441786675208", "title": "TypeScript语法总结+项目(Vue.js+TS)实战", "desc": "1. 数字枚举：初始值可自动增长 1. as语法（值 as 类型） 2. 尖括号语法（&#x3C;类型>值） 1. 类型守卫 2. 自定义类型守卫 1. 联合类型 2. 类型别名 1. 普通函数 2. 箭头函数 3. 可选参数 4. 默认参数 5. 剩余参数 6. 函数重载 注…"}, {"id": "6865860467307315207", "title": "你不知道的 TypeScript 高级类型", "desc": "对于有 JavaScript 基础的同学来说，入门 TypeScript 其实很容易，只需要简单掌握其基础的类型系统就可以逐步将 JS 应用过渡到 TS 应用。 然而，当应用越来越复杂，我们很容易把一些变量设置为 any 类型，TypeScript 写着写着也就成了 AnySc…"}, {"id": "6966151454914510878", "title": "2021不得不学的Typescript", "desc": "ts作为一门新技术，这两年是越来越火，经过了一段时间的学习和理解之后，写了这篇文章，通过记录ts的核心知识点来带大家轻松掌握typescript，希望能够打动屏幕面前的你。 Typescript基础语"}, {"id": "6844904131610542087", "title": "Vue3 Composition-Api + TypeScript  + 新型状态管理模式探索。", "desc": "Vue3 Beta 版发布了，离正式投入生产使用又更近了一步。此外，React Hook 在社区的发 展也是如火如荼。 这篇文章就从 Vue3 的角度出发，探索一下未来的 Vue 状态管理模式。 在组件的对象里面声明，使用场景的也很少，所以之前我也并没有往状态管理的方向去想。 …"}, {"id": "6983961596829646878", "title": "vuecomponent-seed —— 一个开箱即用的 Vue 3 组件库模板", "desc": "vuecomponent-seed 是一个 Vue3.0 组件库的“次佳”实践，旨在提供较好的开发体验，较为清晰、美观的文档，助力同学们快速启动组件UI库的开发。"}, {"id": "6985363584804978719", "title": "vue3+ts组件封装踩坑(install引发的类型错误)", "desc": "vue3+ts封装组件，shims-vue.d声明文件导致的类型错误，跳坑研究。提供一个最有的声明文件"}, {"id": "6998405270007185416", "title": "【TypeScript】知识梳理：内置对象（常用）", "desc": "JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型..."}, {"id": "6959498972268822542", "title": "Subtyping in TypeScript", "desc": "较严格地介绍了 Subtyping 的概念，以及把 TypeScript 中与 Subtyping 的不安全的行为都做了详细阐述"}, {"id": "6844903846607585293", "title": "TypeScript 中使用React Hook", "desc": "从 React V 16.8.0 和 React Native 0.59.0 版本开始, 引入了React Hook的概念。React Hook 在开发支持就考虑到了类型，所以很多Hook函数可以直接推断出他们的参数、返回值等类型，但也有一些场景需要我们显示声明类型。阅读本文前…"}, {"id": "6986828275595083790", "title": "Typescript入门篇《一》", "desc": "最近使用vue3+typescript开发的新项目，让我对TypeScript有个一个更新的认识。TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以"}, {"id": "6964648818176426015", "title": "不会吧不会吧！不会还有人没用过WebWorker吧！", "desc": "众所周知： JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。"}, {"id": "6997429933962330149", "title": "使用 Webpack 为 React 项目设置 TypeScript并使用React Hooks ( 上 )", "desc": "学习如何在 React 项目中有效地设置 TypeScript，探索 TypeScript、React 钩子，例如 useReducer、useContext 和 Reach Route。"}, {"id": "6999795433283256350", "title": "了解使用TypeScript（一）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 简介 TypeScript是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，TypeScript 设计目标是开"}, {"id": "6992085488647553054", "title": "【TypeScript】知识梳理：声明文件", "desc": "TypeScript 作为 JavaScript 的超集，通过引用声明文件，不仅可以调用库的类和方法，也可以使用TypeScript 诸如类型检查等特性功能。"}, {"id": "6844903993727008776", "title": "TypeScript系列🔥尾声篇, 什么是声明文件(declare)? [🦕全局声明篇]", "desc": "年底比较忙🔥, 受个人时间限制, 暂把\"声明\"部分的内容分为\"全局声明篇\"和\"模块声明篇\", 👷还请多多包涵, 本次先说\"全局\". 声明文件就是给js代码补充类型标注. 这样在ts编译环境下就不会提示js文件\"缺少类型\". 看过vue3源码的同学一定知道这些是vue中的变量…"}, {"id": "6998816083369000968", "title": "typescript入门到精通（四）（原始类型、标准库声明、中文错误信息）", "desc": "typescript入门到精通（四）（原始类型、标准库声明、中文错误信息）,正式开始TypeScript篇章。"}, {"id": "6986562616818663432", "title": "在TypeScript中实现Vuex精准的类型推断", "desc": "和Vuex耗上了 上一次我也对Vuex进行了推断，但结果很难让人满意。于是这次认真思考了一下，有了一个新的方案，复杂的映射后能拿到差强人意的结果了"}, {"id": "6986582671832907790", "title": "面向对象的编程（TypeScript）重载（overloading）和重写（overriding）", "desc": "接口和抽象类的出现主要是为了添加参数的限制，来规范代码 接口 TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScrip"}, {"id": "6997204867060072484", "title": "TypeScript  存取器以及抽象类", "desc": "使用 TypeScript 可以帮你降低 JavaScript 弱语言的脆弱性，帮你减少由于不正确类型导致错误产生的风险，以及各种 JavaScript 版本混杂造成错误的风险。"}, {"id": "6844903683356884999", "title": "教你搭建基于typescript的vue项目", "desc": "自尤大去年9月推出vue对typescript的支持后，一直想开箱尝试，对于前端sr来说，vue的顺滑加上ts的面向对象，想着就非常美好~ 终于在两个月前，找到了个机会尝试了一把vue+ts的组合。 开文记录下vue和ts整合之旅和遇到的一些坑。 应该大部分人都知道vue，毕竟…"}, {"id": "6844903717666291726", "title": "一位赌狗前端的自我修养", "desc": "这段时间工作巨多，直到今天才有时间写点东西。可是要输出点什么比较好呢？这时候看到了隔壁桌面上放着一张机打的写着一组一组数字的纸，有了！那要不抽个奖吧！ 抽奖，讲究一个随机，只要把随机摇号解决了不就不管什么规则都能抽了？所以我们需要一个可以产生随机数的函数。不仅要随机数，我们还需…"}, {"id": "6987001375938838542", "title": "Typescript 类型体操 —— Change Argument", "desc": "🤔要求 实现一个范型 ChangeArgument<Fn extends (...args: any[]) => any[]>，对于给定的函数类型 Fn, 返回一个新的函数 G。"}, {"id": "6844903720967372814", "title": "TypeScript 重构 Axios 经验分享", "desc": "拒绝做一个只会用 API 的文档工程师，本文将会让你从重复造轮子的过程中掌握 web 开发相关的基本知识，特别是 XMLHttpRequest。 又是一篇关于 TypeScript 的分享，年底了，请允许我沉淀一下。上次用 TypeScript 重构 Vconsole 的项目 …"}, {"id": "6844904169577381895", "title": "在 TS 中如何减少重复代码", "desc": "相信有些读者已经听说过 DRY 原则，DRY 的全称是 —— Don't Repeat Yourself ，是指编程过程中不写重复代码，将能够公共的部分抽象出来，封装成工具类或者用抽象类来抽象公共的东西，从而降低代码的耦合性，这样不仅提高代码的灵活性、健壮性以及可读性，也方便后…"}, {"id": "6844903678797676552", "title": "30个极大提高开发效率的Visual Studio Code插件", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 我们的 VSC(VSCode)将会像一个长了五只可以发射激光的独角兽一样！接下来会介绍我每天使用的非常有用的插件。 如果你还是一个 VSC 的新手，那么点击左侧最下方的按钮来安装插件。 自动去查…"}, {"id": "6844903828769210382", "title": "ts基础总结", "desc": "TypeScript的设计目的应该是解决JavaScript的“痛点”：弱类型和没有命名空间，导致很难模块化，不适合开发大型程序。另外它还提供了一些语法糖来帮助大家更方便地实践面向对象的编程。 typescript不仅可以约束我们的编码习惯，还能起到注释的作用，当我们看到一函数…"}, {"id": "7001103909636800526", "title": "typescript 笔记（二）", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 往期文章 上一篇文章介绍了 typescript 的基础类型和一些其他的内容，本文就来记录下 ts 的一些常用功能。 类型断言 类型断言，"}, {"id": "6854573221976113159", "title": "《重构-代码整洁之道TypeScript版》第一天", "desc": "看到这个标题你的脑海中一定会浮现出两本书，一本就是，《重构--改善既有代码设计》 和 《代码整洁之道》 。这确实是两本非常伟大的图书，但是很遗憾里面提供的 code 都是 Java 的版本。《重构--改善既有代码设计》 的第2版提供了 JavaScript 的版本，已经非常方便…"}, {"id": "6914853359350448142", "title": "详解 Typescript 里的 This", "desc": "this可以说是Javascript里最难理解的特性之一了，Typescript里的 this 似乎更加复杂了，Typescript里的 this 有三中场景，不同的场景都有不同意思。 在处理继承的时候，如果 superclass 调用了示例方法而非原型方法，那么是无法在 su…"}, {"id": "6844904114925600776", "title": "TypeScript 中 interface 和 type 使用区别介绍", "desc": "在接触 ts 相关代码的过程中，总能看到 interface 和 type 的身影。写代码感觉谁像是一堆亲兄弟，相同的功能用哪一个都可以实现。但最近总看到他们，就想深入的了解一下他们。 TypeScript 的核心原则之一是对值所具有的结构进行类型检查。 而接口的作用就是为这些…"}, {"id": "6898133050224771079", "title": "如何让 Typescript 和 i18n 擦出火花💥", "desc": "这篇文章将介绍如何在项目中将 i18n 与 Typescript 融合，以便为开发者提供更好的开发体验。更好的开发体验指的是提供键入提示，自动补充，参数类型校验等等，避开低级的错误。 在需要展示文案的位置，使用 i18n 工具包提供的方法，传递 “key” 来指定需要展示的多语…"}, {"id": "6844904148438106119", "title": "【译】React Refs中使用TypeScript", "desc": "今年4、5月的杭州天气总是让人摸不着头脑，可能也是今年疫情的原因，似乎并没有太多春天的感觉；虽然温度是慢慢的升上来了，但感觉没有春天的那种万物复苏，到处鲜花盛开的感觉；不知道是今年疫情的原因，还是视线被俗事一叶障目，总之一切都不太像想象中的样子。闲话少叙吧，搬运一篇Martin…"}, {"id": "6997349981262888990", "title": "TypeScript中的泛型", "desc": "泛型：Generics   软件工程的主要部分就是构建一些即有声明良好且稳定的API又可重用的组件。而这些组件能帮助我们构建一个健壮且可扩展性强的系统。   在像 C# 和 Java 这样的语言中，可"}, {"id": "7000203077525438477", "title": "Uniapp + TypeScript 配置文档", "desc": "uniapp 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5"}, {"id": "6883767565772914702", "title": "Vue3都用ts重构了，TypeScript咱也不能掉队(第二篇)", "desc": "假设我们要创建一个identity函数，这个函数返回他传入的任意参数。首先每个类型写一种是不行的，使用any类型会导致这个函数可以接收任何类型的arg参数，丢失了传入类型 类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。 所以…"}, {"id": "6998564257583333407", "title": "typescript 面试常用高级用法", "desc": "TypeScript 的类型系统会对数据进行类型检查，它可以在编译阶段规避不必要的错误，并且语义化清晰，有助于代码的阅读。 TypeScript 类型检查机制包含三个部分： 类型推断 类型保护 类型兼"}, {"id": "6844903833165004808", "title": "用 TypeScript 开发 Node.js 程序", "desc": "当我第一次发现 TypeScript 时，就把它用到了自己的 JavaScript 程序中。使用 TypeScript 有很多好处，现在你要让我在用原生 JavaScript 写任何东西的话，需要给我一个令人信服的理由。 在本文中，我将向你展示如何设置一个简单的开发环境，以便使…"}, {"id": "6844903977654419464", "title": "TypeScript 3.7 Beta 版发布", "desc": "我们很高兴发布 TypeScript 3.7 Beta 版，它包含了 TypeScript 3.7 版本的所有功能。从现在到最后发布之前，我们将修复错误并进一步提高它的性能和稳定性。 请遵循有关 Visual Studio Code 和 Sublime Text 的说明。 Ty…"}, {"id": "6957276082437537828", "title": "用ts类型系统实现斐波那契数列", "desc": "用ts类型系统实现斐波那契数列, 涉及基本运算, 比较, 加法, 循环, 递归, ts高级应用, ts类型体操"}, {"id": "6844904057010651143", "title": "TypeScript 参数简化实战（进阶知识点conditional types，中高级必会）", "desc": "TypeScript中有一项相当重要的进阶特性：conditional types，这个功能出现以后，很多积压已久的TypeScript功能都可以轻而易举的实现了。 没错，它只是节省了几个字符串，但是却是一个非常适合我们深入学习条件类型的实战。 这样的语法就叫做条件类型，A, …"}, {"id": "6996921557297659918", "title": "学点新东西 for typescript 之一(windows环境搭建）", "desc": "“这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战” 前言 哈哈哈，又是我 Viruss来新开专栏了，这次我们就来玩玩 typescript吧！(ps: 每天五分钟冲击python基础教程还"}, {"id": "6986983789751140365", "title": "从零到一学习TypeScript（一）基本类型", "desc": "搞定TypeScript Typescript 帮助我们前端人员提高类型思维的能力，弥补类型约束的条件，减少我们开发时发生的各种类型判断的验证 我们所有 ts 代码在 webpack 环境运行 首先我"}, {"id": "6985871185049452580", "title": "MobX6 React TypeScript 函数式组件", "desc": "MobX官网的示范代码风格class组件和函数式组件混用，翻看github仓库中mobxjs/mobx-react-lite的readme.md文件后发现，有些废弃的api也在官网示例上，感觉官网的示"}, {"id": "6844903792543006733", "title": "使用 TypeScript + React + Redux 进行项目开发（入门篇，附源码）", "desc": "对于 TypeScript + React 开发，MicroSoft 编写了一个 TypeScript-React-Starter 的例子，Github 地址。有需要的朋友可以去看一下。 我自己也看了一下，文档说明讲解的很好，但是 Demo 拉下来却无法正常运行，一直报错。所以…"}, {"id": "6973950153346514952", "title": "TypeScript上手01 常用数据类型", "desc": "这是我参与更文挑战的第1天，活动详情查看更文挑战 1.ts定义静态类型 TypeScript 的一个最主要特点就是可以定义静态类型，英文是 Static Typing。那到底是什么意思那？太复杂的概念"}, {"id": "7000140081293950984", "title": "基于websocket实现《全双工协议》的TS同步调用之Request/Response/Notify 原理与实战~", "desc": "本文教你搞明白什么是全双工与半双工通信。及如何实现全双工协议下Request/Response的`同步`调用？"}, {"id": "7006345877140799502", "title": "TS系列篇｜函数(Function)", "desc": "函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。 TypeScri"}, {"id": "7007430442358046733", "title": "WEB 剪切板操作navigator.clipboard的使用", "desc": "浏览器允许 JavaScript 脚本读写剪贴板，自动复制或粘贴内容，而这一切都是通过 navigator clipboard 的API来实现的。剪贴板可以用于存储数据并在应用程序内部或应用程序之间使"}, {"id": "7004658172409430029", "title": "ReScript 与 TypeScript，谁是前端圈的“当红辣子鸡”", "desc": "摘要： ReScript 和 TypeScript 的出现都是为了更好地使用JavaScript，但两者还是有很大的不同。"}, {"id": "6970841540776329224", "title": "总结TypeScript在项目开发中的应用实践体会", "desc": "在日常工作中对TypeScript的一些开发实践总结，对比较常用的API和新特性进行了归类，同时在实践中是如何一步步将dva拥有主动类型约束，以及服务端数据类型是如何进行多人协同开发进行工作。"}, {"id": "7004491721073508360", "title": "用通俗易懂的方式讲解动态规划", "desc": "动态规划是一种比较难以理解的算法思想，本文结合自己的理解采用通俗易懂的方式来讲解下动态规划，欢迎各位感兴趣的开发者阅读本文。"}, {"id": "7006604966475350047", "title": "TypeScript interface使用实践", "desc": "你将学会 通过一个简单的例子来实践interface的用法，加深对interface的理解 面向对象 对TypeScript有一定掌握程，了解\"鸭子类型\"，使用react技术栈的同学 难度系数 ⭐⭐ "}, {"id": "6981728323051192357", "title": "一篇够用的TypeScript总结", "desc": "越来越多的项目都在支持TypeScript，逐渐成为前端必备能力之一。特性虽然很多，但是正常业务开发用到的并不多，够用就行。这里以自己的理解了下总结常用的ts特性。有理解错误的，欢迎大哥指正👏🏻"}, {"id": "7006483808832716813", "title": "TS系列篇｜装饰器(@)", "desc": "装饰器是一种特殊类型的声明，它能够被附加到类声明、方法、属性或者参数上， 语法：装饰器使用 @expression 这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明"}, {"id": "7006483218765447182", "title": "TS系列篇｜泛型", "desc": "泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性 1、泛型函数 首先，我们来实现一个函数 createArray, 它可以创建一个指定长"}, {"id": "7006127408763895816", "title": "Vue - The Good Parts: 类型支持", "desc": "虽然大家说 Vue 2 对于 TypeScript 支持不够好，但是这里边 Vue 也依旧做了很多事情，一起来学习下 Vue 2 是怎么做类型支持的，对于我们自身而言，可以学到什么？"}, {"id": "6872111128135073806", "title": "一份不可多得的 TS 学习指南（1.8W字）", "desc": "阿宝哥第一次使用 TypeScript 是在 Angular 2.x 项目中，那时候 TypeScript 还没有进入大众的视野。然而现在学习 TypeScript 的小伙伴越来越多了，本文阿宝哥将从 16 个方面入手，带你一步步学习 TypeScript，感兴趣的小伙伴不要错…"}, {"id": "6999886459343732772", "title": "【万字实战长文】手把手教你赋予Vuex 4.x 更好的 TypeScript体验", "desc": "更好地在 Vue 3.x 中结合类型系统使用 Vuex 4.0，贴合实际工作场景，讲解细致，有完整示例代码可拿来主义"}, {"id": "7006248113069359117", "title": "typescript基础用法", "desc": "本人菜鸡一枚，写这篇文章的意义，就是通过对typescript进行总结性来温习旧的知识，防止遗忘，此篇文档较为基础，适合新手。"}, {"id": "7003248080690610189", "title": "TypeScript之类型窄化篇", "desc": "TypeScript之类型窄化篇 TS最好用的地方就是强类型,随之而来的就是类型窄化,摸鱼的时候顺道总结下."}, {"id": "7001897686567747598", "title": "Vue3 + TS 最佳实践", "desc": "笔者有 3 年多 React + TS 的实践经验，深刻体会到 TS 对生产效率的提升作用。最近换了新团队，Vue3 + TS 的最佳实践是笔者最近研究的方向，现将阶段性成果总结成文，供大家参考。"}, {"id": "6989796543880495135", "title": "TypeScript 的另一面：类型编程", "desc": "作为前端开发的趋势之一，TypeScript 正在为越来越多的开发者所喜爱，从大的方面来说，几乎九成的框架与工具库都以其写就（或者就是类似的类型方案，如 Flow）"}, {"id": "7002052568629116965", "title": "Typescript 4.4 发布 - 特性中文介绍", "desc": "经过beta 和 rc版本，Typescript 4.4 的正式版本在8.26发布了。下面来看看有哪些更新： 流程控制类型推断支持Aliased Conditions和Discriminants 由于"}, {"id": "7005863516401844255", "title": "【工程搭建】从零搭建一个 typescript + express + eslint 工程", "desc": "ts已经逐渐成为了一项必不可少的技能，类型检查可以帮助我们在开发时避免一些不必要的bug，本文将记录如何从零搭建一个 typescript + express + eslint 的工程。"}, {"id": "6926794697553739784", "title": "TypeScript 高级用法", "desc": "unknown 指的是不可预先定义的类型，在很多场景下，它可以替代 any 的功能同时保留静态检查的能力。 这个时候 unknown 的作用就跟 any 高度类似了，你可以把它转化成任何类型，不同的地方是，在静态编译的时候，unknown 不能调用任何方法，而 any 可以。 …"}, {"id": "6999133120070942728", "title": "Throwable - 在 TypeScript 中类型安全地处理 Error", "desc": "在 ts/js 中我们一般通过 throw, try..catch 来处理 error， 但是这种方式无法保证类型安全: 一个 function 无法告诉使用者它可能出现的必须要被处理的问题。这很大程"}, {"id": "6844903497205448711", "title": "TypeScript体系调研报告", "desc": "TypeScript = Type + Script（标准JS）。我们从TS的官方网站上就能看到定义：TypeScript is a typed superset of JavaScript that compiles to plain JavaScript。TypeScrip…"}, {"id": "6844903841951924232", "title": "TypeScript - 一种思维方式", "desc": "摘要： 学会TS思考方式。 电影《降临》中有一个观点，语言会影响人的思维方式，对于前端工程师来说，使用 typescript 开发无疑就是在尝试换一种思维方式做事情。 其实直到最近，我才开始系统的学习 typescript ，前后大概花了一个月左右的时间。在这之前，我也在一些项…"}, {"id": "6996589436892872711", "title": "TypeScript 你学废了吗", "desc": "TypeScript到目前为止，语言特性已经相当多相当复杂了。本文档着重于介绍那些特别有用、如果灵活运用会极大提高coding experience的语言特性。"}, {"id": "6976247111394263053", "title": "Typescript 类型体操(一)—— condition type", "desc": "你是否曾经在学习/使用 TS 时:1. 看了各种TS文档，写起来还是似懂非懂； 2. 接触了一些TS关键字，用起来不太熟练，缺乏明确的理论参考？那么这篇文章非常适合你！"}, {"id": "6992485323464933407", "title": "为什么TypeScript比JavaScript有优势？TypeScript和JavaScript区别在哪？", "desc": "TypeScript和JavaScript是目前项目开发中比较流行的两种脚本语言，但JavaScript能否创建大型复杂的web应用，这恐怕没那么容易 于是我们选中另外一个解决方案——TypeScri"}, {"id": "6992560274435751966", "title": "从0开始的TypeScriptの四：接口Interfaces · 上", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 在 typescript中，有一项比较重要的核心知识，那就是接口Interfaces"}, {"id": "6994066701742522404", "title": "从0开始的TypeScriptの七：函数", "desc": "函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块，同时也是JavaScript中的一等公民"}, {"id": "6994242530233548837", "title": "【实战篇】koa2+Ts项目的优雅使用和封装", "desc": "Koa2+TypeScript优雅使用和封装；由于最近学习到 SSR 相关的内容，并且需要做一些内部的工具系统；考虑先熟悉 Koa2+TypeScript 的方式；"}, {"id": "6994420380463333407", "title": "TS（TypeScript）基础知识三：接口（interface）", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 接口是对相对复杂情况的约束 本章主要介绍对象和类中应用到的规范基础 对象接口 对象、函数 先来看（回忆）一下对象和函数的约束： 上面的函数中"}, {"id": "6844903569552834568", "title": "TypeScript 实践", "desc": "TypeScript 是有类型定义的 JS 的超集，包括 ES5、ES5+ 和其他一些诸如泛型、类型定义、命名空间等特征的集合，为了大规模 JS 应用而生。对于 TypeScript 本身，更多信息请参考《TypeScript 体系调研报告》。本文只记录 TypeScript …"}, {"id": "6995466449766596621", "title": "TypeScript 函数", "desc": "使用 TypeScript 可以帮你降低 JavaScript 弱语言的脆弱性，帮你减少由于不正确类型导致错误产生的风险，以及各种 JavaScript 版本混杂造成错误的风险。"}, {"id": "6844904008583217165", "title": "为 Vue3 学点 TypeScript , 体验 TypeScript", "desc": "vue3是用typescript开发的, 我揣测在vue的带领下typescript会成为主流呢, 要不先学点. 很多小错误比如: 对象的字段不存在或者字段名字拼写错误, 编辑器会在写代码的时候就提示你, 降低出低级错误的几率. 标注了类型的变量, 使用的时候编辑器都会列出变量…"}, {"id": "6878092891013677063", "title": "我为 Express 开了外挂", "desc": "随着 Nodejs 在前端涉及领域越来越广，也越来越成熟，相信很多朋友已经尝试或使用过 Nodejs 开发服务端项目了。 本文我将和大家一起回顾 Express，然后介绍一个超级外挂——OvernightJS，它强大的地方在于，它将为 Express 路由提供 TypeScri…"}, {"id": "7004798805598011428", "title": "TypeScript中interface和type的区别", "desc": "TypeScript中定义类型的两种方式 1、接口（interface）：只能约束对象类型 2、类型别名（type alias）：以声明的方式来定义组合类型，交叉类型，原始类型 相同点 1、都可以约束"}, {"id": "6984604019272450085", "title": "Vue3+TS 优雅地使用状态管理", "desc": "Vue3的引入了新特性Composition Api，相比于Vue2的代码出现了重大变化，也为状态管理方式提供了新的途径。而Vue3中利用typescript的全面加持则可以让我们更优雅地使用状态管理"}, {"id": "6968720680527331359", "title": "TypeScript 4.3 新增 feature", "desc": "本系列作为《TypeScript 入门实战笔记》课程（见拉勾教育）的补丁，随时更新。 类相关 override 添加 override 修饰符，实现更智能的方法重写检测。如以下示例所示：通过 over"}, {"id": "6844904034302705671", "title": "Typescript 最佳实践", "desc": "一年前刚接触 typescript 的时候, 觉得它加大了代码工作量. 写一大堆东西.为了找某个类型东奔西跑, 引入第三库还经常报错. 然而现在的我想说: 真香. 我们经常吐槽别人代码可维护性特别低, 总是希望别人能够主动的写注释, 可是写注释却没有任何方式可以进行约束. 这下…"}, {"id": "6998775833548554276", "title": "TypeScript-模块系统", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6993651076096360479", "title": "TypeScript学习之Omit", "desc": "Omit是什么 Omit是TypeScript3.5新增的一个辅助类型，它的作用主要是：以一个类型为基础支持剔除某些属性，然后返回一个新类型。 Omit背后定义 那接下来我们看看Omit内部是如何实现"}, {"id": "6844903924655357959", "title": "【Ts重构Vue】01-如何创建虚拟节点", "desc": "React/Vue都用到了虚拟DOM，围绕虚拟DOM，本篇主要解决下面3个问题。 我们的编码目标是下面的demo能够成功渲染。 我们会发现，真实dom上有非常多的属性，通过自定义虚拟dom能够有效节省空间。 另外，真实dom的重排重绘是非常消耗性能的，应该尽量少修改，借助虚拟D…"}, {"id": "6924283950542094343", "title": "【每天学一点】-Typescript: 可选访问操作符 '?.' 空合并操作符 '??'", "desc": "可选访问操作符 ?. 空合并操作符 ?? 可选链和可选属性访问操作符 ?. 可选链的核心 是让我们在写 Typescript 代码时，当我们的代码运行进入 null 或者 undefined时，可以立即停止运行某些表达式。可选链最重要的是可选访问操作符?.。代码如下： 注意，如…"}, {"id": "6910959793909972999", "title": "TypeScript-泛型", "desc": "什么是泛型通俗一点解释，泛型就是类型系统中的“参数”，主要作用是为了类型的重用。从上面定义可以看出，它只会用在函数、接口、类和类型别名中。它和js程序中的函数参数是两个层面的事物（虽然意义是相同的），"}, {"id": "6969584729620217886", "title": "TypeScript 重学之—进阶笔记", "desc": "这是我参与更文挑战的第3天，活动详情查看: 更文挑战 1， 面向对象 类可以理解为对象的模型，对象的声明有很多中方法， （1）定义对象的方法 （2）定义函数的方法 （3）定义枚举 （4）& 表示同时"}, {"id": "6884277754716487688", "title": "记一道”面试题“的开发过程引发的一些感悟", "desc": "当我的朋友把 【长文】wangEditor V4.0 探索以团队的形式做开源项目 这篇文章分享给我的时候，我也是抱着对朋友负责的态度读了一下，读完之后，看到互联网前辈的一些分享和感悟，我也有所触动。然后那天午休的时候，我就没睡着，闭着眼睛沉思了下，我想这可能是我的一个机会：认识…"}, {"id": "6844903872008306702", "title": "【译】TypeScript 3.5 变更内容", "desc": "typescript 3.4 版本为了修复一个 bug 导致了类型检查变慢，构建时间大大增加、使用编辑器时有卡顿感。 TypeScript 3.5 做了一些优化，目前在许多增量检查中实际上会比 TypeScript 3.3 更快。 TypeScript 3.4 引入了一个新的 …"}, {"id": "6982103428235264007", "title": "05-TypeScript的编译配置", "desc": "编译一个ts文件， 使用命令 tsc xxx.ts ； 每次使用命令编译太麻烦， 可以使用 tsc xxx.ts -w 编译并监视文件的变化， 当发现文件有变化， 会自动编译文件。如果感觉一个文件一个"}, {"id": "6947672875583143973", "title": "TypeScript 4.2 官方手册译文 - 模块", "desc": "JavaScript 有很多处理模块化代码的不同方法。TypeScript 在 2012 年就出现了，已经实现了对很多种格式的支持，但随着时间的推移，社区和 JavaScript 规范已经汇聚成一种称为 ES 模块（或ES6模块）的格式。你可能知道它就是 import/expo…"}, {"id": "6900858745853755405", "title": "搭建一个typescript函数库", "desc": "我们用一个js文件保存这些通用的函数，用导出的方法来使用，他就是一个函数库了。 新建package.json, 添加需要的依赖，包括rollup，typescript，还有rollup的两个插件/plugin-babel，plugin-typescript。 rollup -c…"}, {"id": "6844903861279260685", "title": "TypeScript 从听说到入门（下篇）", "desc": "在上篇文章里，我对 TypeScript 中的类型声明做了介绍，这块也是 TypeScript 的基础知识。讲解的内容包括： 接下来要介绍的包括：面向对象编程、访问控制修饰符、类和接口、泛型。 我们一个个来讲。 ES6 引入了 class 关键字，为 JavaScript 引入…"}, {"id": "6942380528456695844", "title": "从 TypeScript 到 VSCode —— 语言服务插件导引", "desc": "众所周知，在如今的开发者中 TypeScript 日渐流行。TypeScript 提供了强劲的类型检查能力，除此之外，比较不为人知的是，它还以 language service 的形式提供了针对 TypeScript 和 JavaScript 开发体验的编辑器支持能力，例如重构…"}, {"id": "6936758602325557261", "title": "TypeScript 模块解析", "desc": "当我们编写代码导入一个模块的时候，编译器需要知道怎么找到并解析我们导入的模块，会尝试定位表示导入模块的文件。 这里编译器会遵循以下二种策略之一： Classic或Node。 这些策略会告诉编译器到哪里去查找导入的模块。 相对导入是以/，./或../开头的。 下面是一些例子： 共…"}, {"id": "6928004601710903303", "title": "优雅解决 TypeScript 生成接口文档的问题", "desc": "我这个人平时比较懒，尤其不是很喜欢写接口文档，在前后端开发的过程中这个需求总是存在的。虽目前主营前端，但是工作室后端的事情也经常是我在管的，所以如何更好的偷懒呢？于是，这个项目就诞生了。 TypeScript 有着严格的类型语法规范，prettier 可以帮我们很好的格式化我们…"}, {"id": "6921695603865059336", "title": "TypeScript - 基础类型", "desc": "模版字符串，它可以定义多行文本和内嵌表达式。 元组类型允许表示一个 已知 元素 数量 和 类型 的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。 使用枚举类型可以为一组数值赋予友好的名字。 默认情况下，从0开始为元素编号。 你…"}, {"id": "6909112530765873160", "title": "TypeScript学习笔记系列四(泛型)", "desc": "思维导图定义：把类型作为一个特殊的参数传进去泛型类泛型函数泛型构造器泛型extends：限定范围"}, {"id": "6974704747471175710", "title": "TypeScript ｜ 字面量类型", "desc": "字符串字面量类型 字符串字面量类型允许你指定字符串必须的固定值。 字符串类型，其实是一个集合类型，所有的字符串集合在一起构成了 string 类型。 而字符串字面量类型很直接，你定义为 'imooc'"}, {"id": "6844903821617938440", "title": "【译】使用TypeScript两年后-值得吗？", "desc": "基础笔记的github地址：https://github.com/qiqihaobenben/Front-End-Basics ,可以watch,也可以star。 这是我的第一篇翻译文章，想看这篇文章的时候，发现没有中文翻译版，无奈去读了英文版，读完发现可以试试翻译出来。 本人…"}, {"id": "6911603873765392391", "title": "TypeScript接口", "desc": "1. 概念预览 typescript类型核心原则之一就是对值所具有的结构进行类型检查. 接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约. 2. 代码展示"}, {"id": "6844903882133340173", "title": "查看TypeScript库中原生JS的声明文件", "desc": "我很喜欢TypeScript。 我是名C#转前端的程序员，当第一次看到TypeScript时，感觉好熟悉，当上网查询到TS是由微软出品时，瞬间明白了。微软将很多的C#特性移植到了JS上，就是TypeScript。 1. 类型系统给我带来稳定感。 JS的变量可以随意赋值一个数字或…"}, {"id": "6844903671399088135", "title": "关于保障前端项目代码质量的思考", "desc": "对于中大型前端项目，项目规范与代码质量尤为重要。糟糕的编码对产品迭代来说是很致命的。"}, {"id": "6991319120385949732", "title": "⚡qiankun微前端中的应用通信(二)-可订阅指定state｜8月更文挑战", "desc": "qiankun微前端通信，该方案以redux为核心，采用发布-订阅模式进行封装，实现应用间通信数据上的响应式，代码结构模块化，api仿照vuex，降低上手难度, 并可适用多框架（如vue、react）"}, {"id": "6984616593498046495", "title": "react + tyepscript 项目的尝试", "desc": "失败记录 关于 react + typescript 项目更新 dependencies 或更新 yarn 都会遇到无法解决的问题 步骤 第一步, 创建项目 npx create-react-app "}, {"id": "6952668254548525086", "title": "TypeScript + Vue3 快速上手 【上】", "desc": "hello，大家好，我最近也在学习TS，在学Vue3前，还是有必要了解一些TypeScript的相关知识,让我们一块学习吧！1. 初识 TypeScriptTypeScript 的介绍TypeScri"}, {"id": "6993936498374475806", "title": "TypeScript的变量声明", "desc": "let和const是JavaScript里相对较新的变量声明方式 。 像我们之前提到过的, let在很多方面与var是相似的，但......"}, {"id": "6844904052094926855", "title": "Webpack 转译 Typescript 现有方案", "desc": "1. awesome-typescript-loader 2. ts-loader + babel-loader + fork-ts-checker-webpack-plugin 这种方案，当 webpack 编译的时候，ts-loader 会调用 typescript（所以本…"}, {"id": "6986533489776525320", "title": "TS 高级类型", "desc": "交叉类型 联合类型 类型断言/类型保护 属性 条件类型 Partial类型 pick<Type, Keys>函数 Omit Record Exclude<Type, ExcludedUnion> Ex"}, {"id": "6844904167840940039", "title": "（三万字长文）类型即正义：TypeScript 从入门到实践系列，正式完结！", "desc": "Tim Berners-Lee 于1989年发明了万维网并于1991年对外发布了世界上第一个网页浏览器 WorldWideWeb，从此拉开了 Web 时代的序幕。 1994 年网景公司（Netscape）发布了 Navigator 浏览器 0.9 版本，这是历史上第一个比较成熟…"}, {"id": "6986465588876935199", "title": "使用 TypeScript 常见困惑：interface 和 type 的区别是什么？", "desc": "当我们使用 TypeScript 时，就会用到 `interface` 和 `type`，平时感觉他们用法好像是一样的，没啥区别，都能很好的使用，所以也很少去真正的理解它们之间到底有啥区别。我们开发过"}, {"id": "6975752572028059655", "title": "手摸手一起学习Typescript第六天 - 泛型 Generics / 泛型约束 / 泛型与类和接口", "desc": "这是我参与更文挑战的第10天，活动详情查看：更文挑战 泛型 Generics 泛型 Generics：是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 泛型第"}, {"id": "7000171331677323294", "title": "了解使用TypeScript（二）", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 TypeScript Map 对象 Map 对象保存键值对，并且能够记住键的原始插入顺序，任何值(对象或者原始值) 都可以作为一个键或一个"}, {"id": "6997334459984904205", "title": "使用 typescript 时修改 npm 包的类型定义", "desc": "使用 typescript 时修改 npm 包的类型定义 出现的场景 某些 npm 包的类型定义可能有误. 此时需要修改该定义."}, {"id": "6859314697204662279", "title": "走近MidwayJS：初识TS装饰器与IoC机制", "desc": "很惭愧在阿里实习将近三个月没有一点文章产出，同期入职的 炽翎 和 炬透 都产出了不少优秀的文章，如不想痛失薪资普调和年终奖？试试自动化测试！（基础篇），不禁感慨优秀的人都是有共同点的：善于总结沉淀，而且文笔还好（这点太羡慕了）。入职即将满三个月，也就是说我三个多月没写过文章了。…"}, {"id": "6844904198899761160", "title": "使用TypeScript + React发布组件到Npm", "desc": "最近封装了项目中使用的React地图组件，摸爬滚打发布到npm上；学到的知识点也比较散，如TypeScript、Commit规范/版本语义化、React组件测试、Npm发布更新、Readme模板、组件文档搭建等，有的知识点也是浅尝辄止（一知半解😱），先记录下来，后期有时间深挖…"}, {"id": "6976984185055477790", "title": "typescript的7种数据类型和void和any与联合类型详解", "desc": "“这是我参与更文挑战的第7天，活动详情查看： 更文挑战” 1.安装并运行 ts 2. typescript 的 7 种数据类型 3.定义 5 大基本类型 4.null,underfined 是字符串、"}, {"id": "6996826617876054053", "title": "TypeScript 类（二）", "desc": "使用 TypeScript 可以帮你降低 JavaScript 弱语言的脆弱性，帮你减少由于不正确类型导致错误产生的风险，以及各种 JavaScript 版本混杂造成错误的风险。"}, {"id": "6896645702421020686", "title": "BetterScroll2.0 TS类型推导实践", "desc": "如何在 BetterScroll 2.0 里面合理使用 TypeScript，并且能够做到友好的 IDE 智能提示，在以 class 为基础的架构中，我们费了相当多的功夫让 TypeScript 提示更智能、更完善。在这个过程中，我们要解决的主要是以下三个问题： 既然知道了问题…"}, {"id": "6961985123923263525", "title": "TypeScript进阶, 如何避免 any", "desc": "为什么会出现 any 不知道如何准确的定义出类型，TS 报错了，用 any 能解决，便用 any 了 觉得定义类型浪费时间，项目经理催的紧，工期紧张，any 更方便 频繁使用 any 的弊端 不利于良"}, {"id": "6844903902563794952", "title": "为 Vue3 学点 TypeScript, 解读高级类型", "desc": "第二课的时候为了更好的讲解基础类型, 所以我们讲解了一部分高级类型, 比如\"接口( interface )\" / \"联合类型( | )\" / \"交叉类型( &#x26; )\", 本节课我会把剩余高级类型都讲完. 注意: 在ts文档中, 该部分的知识点叫做typeof类型保护, …"}, {"id": "6898710177969602574", "title": "typescript 全局变量声明文件和模块声明文件那些事儿", "desc": "最近有个需求，需要写声明文件。虽然一直有在用typescript，但是对声明文件相关信息没有怎么使用过，于是记录一下。 在使用第三方库的时候，想使用typescript类型检查、自动补全等等功能，需要一个描述javascript 库和模块信息的声明文件。通常来说，都是将声明语句…"}, {"id": "6920404495583150093", "title": "🔥 在 wangEditor 研发团队我都干了些什么 ？？？", "desc": "2020已过-2021已来，是时候回顾下这一年的成长，看看自己又成长了多少。再立一下 2021 年的 flag，然后2022年回头再回顾一下2021，哈哈哈。 估计还好多小伙伴也和我一样，仿佛昨天还在老家过年，转眼又过一年了，又到了一年一度交成绩单的时候了（流下了菜鸡的眼泪~~…"}, {"id": "6844903762146885639", "title": "TypeScript 基础入门（一）", "desc": "TypeScript 是 JavaScript 的一个超集，TypeScript 在 JavaScript 的基础上添加了可选的 静态类型 和基于 类 的面向对象编程。 TypeScript 最大的目的是让程序员更具创造性，提高生产力，它将极大增强 JavaScript 编写应…"}, {"id": "6844903710120738824", "title": "TypeScript: 思考类型使用具体情节", "desc": "最近学习 ts，公司中大佬做了一次关于 ts 的分享，收获颇丰，自己总结了一下笔记，下面给大家分享一下。 第一篇主要是分享几个关于 ts 类型的几个细节的问题。 而TS中的string、boolean、number等声明类型，则是指原始的基本数据类型。 在js中，Boolean…"}, {"id": "6912313301619703815", "title": "TypeScript-泛型", "desc": "平时我们是对 **值 **进行编程，泛型是对 类型 进行编程，用来限定值和对值的操作。 使用联合类型或函数重载，过于麻烦。 如果换成any类型，就没有意义。失去了定义返回类型的能力，也失去了类型保护的能力。 TypeScript是静态分析工具，不应该依赖js运行时。 这种可以适…"}, {"id": "6913446800347103246", "title": "TypeScript学习笔记（六）- 类型推论&类型断言", "desc": "如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。 上面的例子中，获取 animal.swim 的时候会报错。 这样就可以解决访问 animal.swim 时报错的问题了。 上面的例子中，我们声明了函数 is…"}, {"id": "6914312229684772878", "title": "TS学习笔记（Three Day）", "desc": "联合类型：可以用来约束只取某些类型或者某些值中的一个。 小结：这里定义的是sayHellow的参数只能为字符串和数字类型，里面判断属性，是数字用来累加，当传入其他类型，会报错，说该类型不能赋值给那个对象。 小结：首先明白什么是可辨识， 联合类型中的每个元素都含有一个单例类型属性…"}, {"id": "6913530341202329607", "title": "TypeScript学习笔记（八）- 泛型", "desc": "泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 我们使用了之前提到过的数组泛型来定义返回值的类型。 Array 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 value 的类型。 …"}, {"id": "6987205537935048735", "title": "笔记：TypeScript Architectural Overview", "desc": "原文：https://github.com/microsoft/TypeScript/wiki/Architectural-Overview TypeScript工程分析"}, {"id": "6844904198232883214", "title": "TypeScript+React+Loadable遇到的类型错误（ts:2345）", "desc": "近期在react项目中使用了typescript来开发，然后使用react-Loadable做异步加载，然后报类型错误。ts错误提示如下： 看报错提示Loadble要传递render来实现自定义渲染，看过react-Loadable源码后，render接收两个参数loaded和…"}, {"id": "6844903872876527624", "title": "Typescript 联合类型", "desc": "联合类型（Union Types），其取值可以为多种类型中的一种，前提是取值的类型之前定义过。 可见，联合类型使用 | 来分隔每种类型。 问题在于 number 类型没有 length 属性。 上面例子中，第 2 行（基于这个文件 unionInference.ts）union…"}, {"id": "6987042293567979528", "title": "TypeScript学习 --- 类和接口", "desc": "ES6之前，JavaScript 通过构造函数实现类的概念，通过原型链实现继承。直到ES6终于迎来了class。在TypeScript中，除了实现了所有 ES6 中的类的功能以外，还进行了相应的扩展。"}, {"id": "6904890590602330119", "title": "class-transformer 中文文档（翻译）", "desc": "纯对象是`Object”类的实例。 当通过“{}”符号创建时，有时它们被称为文字对象。 有时候你想把普通的javascript对象转换成你拥有的ES6类。 例如，在“users”中有一个用户列表。 在此代码中，您可以使用' users[0] '。id '，你也可以用' user…"}, {"id": "6844903871484002317", "title": "Typescript 的成长环境", "desc": "命令行输入 tsc -v 查看成功安装好我，然后就是你可以在任何地方执行 tsc 命令了。 我的精彩履历中就提过，我的一个优势是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等，好用到不要不要的。 主流的编辑器都支持我，这里推荐 Visual Stud…"}, {"id": "6844903933798776845", "title": "【译】TypeScript简介", "desc": "JavaScript曾是作为客户端语言引入的。Nodejs的到来让JavaScript成为服务器端语言的新星。然而，随着JS代码的增长，它变得更加混乱，较难去维护和重用代码。除此之外，它没有采用面向对象，强类型检测以及编译时错误检查等特性，这些造成了js很难在企业级应用有所发展…"}, {"id": "6972130991331049509", "title": "TypeScript的一些笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844903791372845063", "title": "TypeScript 简明教程：基本类型（一）", "desc": "从这篇文章，我们开始讲解 TypeScript 的类型系统。之前我们说到，TypeScript 是 JavaScript 的超集，是 JavaScript 的继承与发展，即所谓的『增强版』。这一点，从 TypeScript 中的基本类型可以看出。TS 的数据类型与 JS 几乎相…"}, {"id": "6844904160454770695", "title": "[译]使用 TypeScript complier API", "desc": "请记住，这还是一个不完整的 API —— 我们将其发布版本定为 0.5，随着时间的流逝，情况会发生改变。毕竟第一次迭代，难免有些不完善的地方。希望社区能够多给予反馈以改进 API。为了允许用户在将来的版本之间转换，我们会记录每个新版本的 API 重大更改。 首先你需要使用 np…"}, {"id": "6854573209766461453", "title": "Bit 最佳实践 - 第三节：bit是如何处理组件之间的依赖的", "desc": "通过 bit add src/source/zoo --id demo/zoo 对 Zoo 组件进行追踪，bit 会把组件目录、文件等相关信息会被写入到 .bitmap。 然后就可以再次 bit tag demo/zoo，并且成功—— bit 会把对 Camel、Elephan…"}, {"id": "6844903882292723720", "title": "抛弃JavaScript，快速入门TypeScript", "desc": "总所周知，JavaScript语言并不是一门面向对象的语言，而是一种解释性的函数式编程语言。在前端Web还不是很复杂的情况下，使用JavaScript是可以应付各种需求的，但当前端页面变的越来越复杂时，JavaScript就显得比较力不从心了，而TypeScript就是为了解决…"}, {"id": "6972129199859433508", "title": "TypeScript 入门应用：类型系统和配置文件", "desc": "安装及使用 npm install typescript -g 进行全局安装，也可以使用 npm install typescript -D 作为项目的开发依赖项。 ​"}, {"id": "6986937744433872933", "title": "TypeScript 简单入门", "desc": "TypeScript 是一个开源的编程语言，通过在 JavaScript（世界上最常用的语言之一） 的基础上添加静态类型定义构建而成。 类型提供了一种描述对象形状的方法。可以帮助提供更好的文档，还可"}, {"id": "6955465767529906206", "title": "Typescript的初探", "desc": "1.typescript的安装： 1.安装： 2.卸载重装: 2.类型： 1.基础类型： ECMAScript最新定义了8种数据类型 7种原始数据类型 Boolean Null Undefined N"}, {"id": "6927440567714447374", "title": "OSS 图片链接处理工具和组件", "desc": "目前有部分前端项目附件会保存在阿里云上管理，无论是前端直接调用ali-oss上传，还是通过调用后端接口上传，最终返回的是一个oss 图片链接，基于不同的需求场景我们需要对返回的图片链接进行相应地处理，虽然ali-oss提供了一套较为完善的开发文档，但是实际使用起来还是会有点不太…"}, {"id": "6844904063218221064", "title": "typescript的泛型(Generics)", "desc": "从上图可以知道，在props里面会有form这个对象。 函数返回FormWrappedProps，继续按ctr+B定位到定义的地方，我们可以知道FormWrappedProps是一个函数，(component:C) => ConnectedComponentClass, 参数接…"}, {"id": "6936907786777264135", "title": "源代码解析——core-decorators(decorate)", "desc": "这次要分析的源代码是 core-decorator 库中的一个函数：decorate。先简单介绍一下 core-decorators这个库是干嘛的， core-decorators是一个按照 JavaScript state-0 decorators 提案编写的一个装饰器库。（…"}, {"id": "6926527268378378254", "title": "编写 .d.ts 时的一些心智技巧", "desc": "作者：ICBU东墨前言TypeScript的类型标注、提示功能是一个投入大、但收益也大的特性。经常听到这样的声音：谁都想做吃水者，也总要有人来吃挖井人的苦。如果你刚好是一个挖井人，这里有一些关于Typ"}, {"id": "6844904003818487815", "title": "Fast-Nest -- 基于Nest.js的Node项目启动框架(Typescript)", "desc": "希望使用者有JavaScript基础，熟悉typescript更佳。 如代码所示，将本项目克隆至本地，安装好依赖即可启动服务，默认端口为9999，倘若需要调整请在根目录的config.ts中进行调整。 会持续维护。至于后续会接入什么模块，将视个人业余时间而定，初步设想会完善有用…"}, {"id": "6912319492157210637", "title": "TypeScript-Class(2)", "desc": "除此之外，抽象类相比普通类还有一个额外的特性就是，可以在抽象类中定义抽象方法，就像我们上面的 makeSound 方法，在普通的方法定义之前加上 abstract 关键字，这个抽象方法类似于接口里面的方法的类型定义：1）注解参数和返回值 2）不给出具体的实现，如上面的 move…"}, {"id": "6971002899354615816", "title": "TypeScript 语言", "desc": "一、语言类型概述 我们在类型安全方面分为：强类型和弱类型，在类型检查方面分为：静态类型和动态类型。 强类型语言不允许任意的隐式类型转换。 弱类型语言则允许任意的数据隐式类型转换。 静态类型：一个变量声"}, {"id": "6912321012600143886", "title": "TypeScript-Class(3)", "desc": "介绍：多态的 this类型表示的是某个包含类或接口的 子类型。 这被称做 _F_``-bounded多态性。 它能很容易的表现连贯接口间的继承 1. 表单模板组件的ts编写 ts是一个随便写写也能运行，但是写好不容易的语言(毕竟是js的超集)，在实现这个功能的时候提取现有知识 …"}, {"id": "6905290810582499336", "title": "TypeScript 学习笔记 -- 高级类型", "desc": "用于断言操作对象是非null和非undefined。具体而言，x!将从x值域中排出null和undefined。 简单来说忽略null和undefined类型。 因为使用了非空断言，因此编译的时候不会报错，但是运行的时候会报错。 可选链运算符 ?. 1. 如果foo.bar是n…"}, {"id": "6844903810075197454", "title": "Canvas绘制一个类似老版支付宝信用分仪表盘效果", "desc": "代码写了一大堆注释。 公司有这么个需求，而我以前没用过Canvas，只能自行爬坑。 总体来说canvas的标准使用姿势并不复杂，复杂点在于数学这块。 有不对之处请留言，会及时修复，谢谢阅读。"}, {"id": "6844903519955189774", "title": "Typescript+React+Redux-Observable脚手架", "desc": "强类型的JavaScript，提高编码、debug效率 facebook开源库，基于JSX语法创建组件 可预测状态容器，最流行的react状态管理方案 虚拟化容器，一键打包部署发布 npm install -g typescript git clone git@github.c…"}, {"id": "6844903817629138952", "title": "TypeScript 中的字面量是什么意思", "desc": "阅读 TypeScript 文档的时候，字面量 这个词出现的频率还挺高，虽然不理解它的意思也不影响阅读，但看到 字面量 扎堆出现的时候，还是想知道 字面量 到底是什么意思。 这是百度百科的解释，可能不太好理解。但是从上面的程序我们可以分析出： = 右边是什么类型，那么这个字面量…"}, {"id": "6904572771724951560", "title": "TS之面向对象编程", "desc": "面向对象编程中一个重要的核心就是： 类 ，当我们使用面向对象的方式进行编程的时候，通常会首先 去分析具体要实现的功能，把特性相似的抽象成一个一个的类，然后通过这些类实例化出来的具体对象 来完成具体业务需求。 通过 class 定义了一个类以后，我们可以通过 new 关键字来调用…"}, {"id": "6844903672543969288", "title": "TypeScript AST 查看器", "desc": "这个网站左侧输入 TypeScript 代码段，右侧实时预览抽象语法树。"}, {"id": "6844903613223944205", "title": "高效前端编程实践", "desc": "最近在阅读《高效前端：Web高效编程与优化实践》这本书，书中介绍了前端高效编程的优化实践和前端基础。本文将结合个人的理解介绍部分高效编程的例子。 表单中原生的radio/checkbox的样式各个浏览器都不太一致。要想统一样式，一种做法是自己div/span去画，然后去监听单击…"}, {"id": "6928632254792990728", "title": "无星的前端之旅（十七）-typescript初探", "desc": "之前干iOS的，写过一段时间swift，所以从js转到ts对我其实影响不太大。 只是有些知识点比较乱，没有串起来过。 实际上现在看官网也有中文语言这个选项了，但是翻译完成的文章不太多，今后应该会越来越多。 个人觉得不要，typescript也是有版本的，版本随着项目走，项目去安…"}, {"id": "6844903906506457102", "title": "typescript中import模块的寻址方式与ES6不同之处", "desc": "这篇文章主要总结一下typescript的import寻址特点，虽然我们对ES6的这个语法已经很熟悉了，但是我发现它们还是有很多区别的。 以前我们写几个js文件就能发一个包，现在如果想能在ts中也能引入，那么就需要再写一份对应的ts声明文件。 之前我们定义包的入口文件可以在pa…"}, {"id": "6844904046621360141", "title": "探索 TypeScript 类型注解 - 类型编程", "desc": "欢迎来到 《探索 TypeScript 类型注解》 系列教程。 上一篇介绍了 TS 的高级类型。 本篇将前面的知识点融会贯通，将对类型的探索提升一个层次：从类型层面进行编程。 首先，我们回顾一下前几节对类型的探索。 通过数据类型，我们了解到 TS 支持的数据类型。 支持 JS …"}, {"id": "6844903804937175054", "title": "[译] TypeScript 快速学习指南", "desc": "本文将告诉你如何快速开始使用 TypeScript，同时探讨一下使用 TypeScript 的优缺点。TypeScript 是 JavaScript 和 Ecma TC39 标准 的超集。TypeScript 赋予我们在代码中定义简单和复杂静态类型变量的能力。 TypeScri…"}, {"id": "6980158674681462820", "title": "TypeScript类型挑战：学习高级用法", "desc": "TypeScript 工具和版本 版本和工具 typescript: 4.3.2 ts-node: 10.0.0 知识点 联合类型 联合类型表示多种取值中的一种，采用|来进行分隔： 当不确定为哪种联合"}, {"id": "6991653568278757413", "title": "小白学前端之TypeScript使用Vuex 4.0｜8月更文挑战", "desc": "简介 官方介绍：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 简单来说，Vuex 就像是"}, {"id": "6844903633578885128", "title": "在 Vue 中使用 TypeScript 的一些思考（实践）", "desc": "Vue.extend()：使用基础 Vue 构造器，创建一个“子类”。此种写法与 Vue 单文件组件标准形式最为接近，唯一不同仅是组件选项需要被包裹在 Vue.extend() 中。 vue-class-component：通常与 vue-property-decorator …"}, {"id": "6990624194920710175", "title": "【Typescript】知识梳理：泛型", "desc": "泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。"}, {"id": "6980259023878635534", "title": "[答案公布] TypeScript 每日挑战：约束多个函数参数间的类型关系", "desc": "其实大多数 TypeScript 开发者，对 TypeScript 的利用，还停留在初级水平。 第 1 期的 TypeScript 每日挑战给大家出了这样的一道题目，看看你能解决吗？"}, {"id": "6844904169417998349", "title": "你不知道的 WeakMap", "desc": "相信很多读者对 ES6 引入的 Map 已经不陌生了，其中的一部分读者可能也听说过 WeakMap。既生 Map 何生 WeakMap？带着这个问题，本文将围绕以下几个方面的内容为你详细介绍 WeakMap 的相关知识。 在计算机科学中，垃圾回收（Garbage Collect…"}, {"id": "6953500339425247246", "title": "【豁然开朗】为什么要用那么复杂的TS", "desc": "我JS写的好好的，为啥要用TS写呢？ 本文写给那些完全没有用过TS，也没有使用过结构化语言，对TS有一定的心智负担的前端新手同学。"}, {"id": "6844904112669065224", "title": "一文让你彻底掌握 TS 枚举", "desc": "在 JavaScript 中布尔类型的变量含有有限范围的值，即 true 和 false。而在 TypeScript 中使用枚举，你也可以自定义相似的类型。 No 和 Yes 被称为枚举 NoYes 的成员。与对象字面量一样，尾随逗号是被允许的。对于 NoYes 枚举我们能够轻…"}, {"id": "6987258682463649805", "title": "玩转TypeScript工具类型（上）", "desc": "这是玩转TypeScript工具类型系列的第一篇。本系列主要记录我在学习TypeScript工具类型中的一些心得体会，如果有不对的地方欢迎指正，拜谢🙇 通过本系列，希望尽量可以达到如下几个"}, {"id": "6996546411038769183", "title": "TypeScript-入门教程(5)", "desc": "函数类型 函数是 JavaScript 中的一等公民 1.函数声明 JavaScript中两种常见的定义函数的方式：函数声明和函数表达 在TypeScript中函数如果有输入和输出，那么则要对其输入和"}, {"id": "6981284036652040205", "title": "TS基础应用 & Hook中的TS", "desc": "## 说在前面 > 本文难度偏中下，涉及到的点大多为如何在项目中合理应用ts，小部分会涉及一些原理，受众面较广，有无TS基础均可放心食用。 > "}, {"id": "7004450361071108103", "title": "TS基础教程", "desc": "TypeScript常用基础总结: TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目,是一门静态类型、弱类型的语言."}, {"id": "6988784851855867917", "title": "TypeScript学习(九)：Handbook -> Classes", "desc": "--strictPropertyInitialization 参数开启时，calss 的属性必须在构造函数中定义初始值。可以在属性后面添加 ! 来关闭提示。 构造函数 重载 注意：构造函数不能有类型参"}, {"id": "6844903837921181704", "title": "从今天开始，拿起 TypeScript 做一个轮子的制造者", "desc": "前端这些年发展非常迅速，社区里涌现了一堆优秀的轮子，比如Vue、React、Angular、jQuery、axios 等，它们解决着不同领域下的问题。使用这些轮子能极大地帮助我们提升生产力，有些人甚至基于这些轮子二次开发了一些轮子，比如 element-ui、ant-desig…"}, {"id": "6844904012777537544", "title": "【TS 演化史 -- 破晓】一步一个脚印带你入门 TS", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 官方网站的定义是:TypeScript 是 JS 类型的超集。它假设咱们知道什么是超集，什么是类型化。为了简单起见，你可以将 TypeScript 看作是 JavaScript 之上的一个外壳。 TypeScr…"}, {"id": "6844903506676023310", "title": "Vue + TypeScript 新项目起手式", "desc": "TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。 TypeSc…"}, {"id": "6862112623417098248", "title": "图解设计模式之观察者模式（TypeScript）", "desc": "1. 背景介绍 在软件系统中经常碰到这类需求：当一个对象的状态发生改变，某些与它相关的对象也要随之做出相应的变化。这是建立一种「对象与对象之间的依赖关系」，一个对象发生改变时将「自动通知其他对象」，其他对象将「相应做出反应」。 我们将发生改变的对象称为「观察目标」，将被通知的对…"}, {"id": "6993972189976330271", "title": "求求你不要再用TypeScript的枚举类型了", "desc": "曾几何时，我也沉迷于 TypeScript 提供的枚举类型，有种高大上的感觉。但后来发现，其实枚举类型是「金玉其外，败絮其中」，请听我一一道来。"}, {"id": "7001656534421733383", "title": "Typescript系列 --- 声明合并", "desc": "TypeScript中有些独特的概念可以在类型层面上描述JavaScript对象的模型。 这其中尤其独特的一个例子是“声明合并”的概念。 理解了这个概念，将有助于操作现有的JavaScript代码。"}, {"id": "6844904016686628877", "title": "利用 JS 实现多种图片相似度算法", "desc": "在搜索领域，早已出现了“查找相似图片/相似商品”的相关功能，如 Google 搜图，百度搜图，淘宝的拍照搜商品等。要实现类似的计算图片相似度的功能，除了使用听起来高大上的“人工智能”以外，其实通过 js 和几种简单的算法，也能八九不离十地实现类似的效果。 为了便于理解，每种算法…"}, {"id": "6987380392684699661", "title": "Learning Typescript（一）", "desc": "最近复习基础看到了Learning Typescript这本书，翻开学习，发现了不少知识，在此记录一下。 面向对象编程 SOLID原则 利用Typescript进行面向对象编程要注意SOLID原则"}, {"id": "6844903767310073864", "title": "【译】30 分钟入门 Typescript", "desc": "今天我们来学习 Typescript,一门被设计用来开发大型和复杂 apps 的语言。相较于松散的，弱类型的 Javascript , Typescript 继承了很多其它高级语言（ c# , java ）的概念，进而更加的规范。 这篇入门针对于有一定的 Javascript …"}, {"id": "6844903869579788296", "title": "配置Typescript、ESLint并支持polyfill踩坑指南", "desc": "但是在配置的过程中TypeScript与其他工具的配合上总会出现一些坑，而这些坑是我翻了很多国外论坛、知乎提问、去github仓库找到两年前的issue才解决的，所以在此记录分享一下，希望可以帮助需要的人躲避这些坑。 编译过程中需要引入的库文件的列表。 然而并不会这样，在配置文…"}, {"id": "6873080212675166215", "title": "TypeScript 实践与技巧", "desc": "1. 函数重载 2. 捕获变量类型 3 . 函数绑定 this 上下文 4. 使用 Never 5. 索引签名 6. 通过索引访问类型 7. 使用 as 8. 条件类型 9. 使用 is 10. 通过修饰构造函数参数定义类属性 以上2种写法是等同的，但是上面的可以少写一些代码。…"}, {"id": "6844903725400588301", "title": "在2018年如何优雅的开发一个typescript语言的npm包？", "desc": "本篇文章里，我会列出每个步骤的详细说明。 实际开发中，如果每个包都去走一遍这些步骤，步骤好像确实有点多。所以如果你需要实际创建项目的时候，你可以选择 clone 我提供的样板项目 来开始一个新的 ts 模块的开发，主要步骤如下： 1. 初始化文件夹，初始化 npm，初始化 ts…"}, {"id": "6844903509175828494", "title": "字幕字体滚动插件——scroxt.js", "desc": "scroxt.js是一个字体滚动的插件库，包括视频弹幕滚动，直播弹幕、直播弹幕强制模式、单行水平左右滚动、文本垂直滚动上下，用于简单快捷生成滚动字体。性能优秀，通过CPU加速，缓存字体元素，帧运动，达到最流畅的效果。兼容Chrome、Firefox、Opera、IE9及IE9以…"}, {"id": "6984313766053675022", "title": "TypeScript Tutorial 中文版 - Section 4. 函数", "desc": "开源的 TypeScript Tutorial 教程中文版，翻译自：https://www.typescripttutorial.net/"}, {"id": "6984309148553445406", "title": "TypeScript Tutorial 中文版 - Section 2. 基本类型", "desc": "开源的 TypeScript Tutorial 教程中文版，翻译自：https://www.typescripttutorial.net/"}, {"id": "6981356770748792868", "title": "简要介绍fp-ts（二）", "desc": "Option Option的 kind 为 * -> *。也就是说，它和 Array 一样可以接受一个 concrete type a，产生另一个concrete type Option a。我们可以"}, {"id": "6850418110433165320", "title": "通用 TypeScript 项目结构与实践经验", "desc": "在多年的 TypeScript 项目开发过程中，我们曾多次改变项目结构以适应新增的项目拆分需求，最终形成了现有的通用项目结构。这篇文章将会介绍这种通用的项目结构以及部分与之相关的实践经验。 不管项目简单还是复杂，通常都是由一个或多个包组成。首先我们讨论单一包的项目结构，举个例子…"}, {"id": "6950561539950641165", "title": "TypeScript Interface vs Type 知多少", "desc": "接口和类型别名非常相似，在大多情况下二者可以互换。在写TS的时候，想必大家都问过自己这个问题，我到底应该用哪个呢？希望看完本文会给你一个答案。知道什么时候应该用哪个，首先应该了解二者之间的相同点和不同"}, {"id": "6945437607983595534", "title": "TypeScript数据结构与算法：队列", "desc": "上一篇《TypeScript 数据结构与算法：栈》实现了 Typescript 中栈的数据结构与算法，本篇继续实现队列。 队列 （Queue）是遵循 先进先出（First In First Out，FIFO）原则的一组有序集合。队列在底部添加新元素，并从顶部移除元素。最新添加的…"}, {"id": "6872238443334729735", "title": "用TypeScript装饰器实现一个简单的依赖注入", "desc": "有两个元素A、B，如果元素A的变化会引起元素B的变化，则称元素B依赖（Dependency）于元素A。在类中，依赖关系有多种表现形式，如：一个类向另一个类发消息；一个类是另一个类的成员；一个类是另一个类的某个操作参数，等等。 我们先定义四个Class，车，车身，底盘，轮胎。然后…"}, {"id": "6947994744559681549", "title": "TypeScript数据结构与算法：链表", "desc": "上一篇《TypeScript 数据结构与算法：队列》实现了 Typescript 中队列的数据结构与算法，本篇继续实现链表。 链表 存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接…"}, {"id": "6983994330264535070", "title": "你所不知道的typescript", "desc": "基础 1. 基础类型 数组 2. interface 和 type 参考：https://juejin.cn/post/6844903799459414029 interface 对象interfac"}, {"id": "6844904082092589069", "title": "支持 TypeScript、Promise API，来体验一下新一代的 Web SDK", "desc": "声网 Agora Web SDK 过不了多久即将发布新版本。现在，我们已经有一个稳定的内测版本了。我们在新的 SDK 中增加了一些新功能，而且相对上一版更易用，集成起来更顺滑。为了让 部分开发者也一起来体验一下，我们决定再开启一次“尝鲜之旅”。老朋友、新用户，都可以来免费试用！…"}, {"id": "6986991111994605605", "title": "TypeScript 学习笔记", "desc": "本文已在两个月前就完成，这次发布到网上与大家共同交流学习。文章内容主要涵盖 TypeScript 的一些基础使用，方便日后做项目时查看与回顾。"}, {"id": "6844903826915328013", "title": "科学甩锅技术: Typescript 运行时数据校验 ", "desc": "大家出来写 Bug 代码的，难免会出 Bug。 测试：\"xxx系统前端线上出 Bug 了，点进xx页面一片空白啊\"。 我：\"纳尼？我写的Bug怎么会出现代码呢？\"。 虽然大脑一片空白，但是锅还是要背的。 进入页面一看，哦豁，完蛋，cannot read the property…"}, {"id": "6844903766236332040", "title": "TypeScript 3.3来了！快看看有什么新功能", "desc": "在TypeScript的早期版本中，不同的联合类型如果想互相访问其取值，它们参数的取值列表必须完全一致才行。 不管怎样，在上面的例子中，FruitEater 和 ColorConsumer 都应该能够接受字符串\"orange\"，并返回 number 或 string 类型才对。…"}, {"id": "6844903636418428936", "title": "TS+Nodejs+Express构建用于前端调试的WEB服务器", "desc": "本文将简述如何使用vscode [Visual Studio Code]开发工具来搭建一套TypeScript的开发环境，其中我们会使用Express这套灵活的web应用开发框架来提高我们的编码效率，另外我们还会增加nodemon这个程序来自动监控你源代码的改变并自动重新启动服…"}, {"id": "6844903764726546440", "title": " TypeScript学习笔记之对象类型", "desc": "在TypeScript中，利用接口(Interfaces)来定义对象的类型。 在面向对象语言中，接口（Interfaces）、它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implements）。 在TypeScript中没有接口的概念，在编译成JavaSc…"}, {"id": "6916418888222097422", "title": "taro+ts+dva+微信小程序云开发实现《诗词小程序》", "desc": "输入创建命令时会让你选择语言，类型什么的，因为我们是用typescript，所以选择是就行了。 使用微信开发者工具调试项目，请将项目整个文件夹作为运行目录。 注意： 不是 client 中生成的 dist 文件夹 必须将整个项目作为运行目录，我觉得这样挺麻烦的，其实云开发主要是…"}, {"id": "6901485121522630670", "title": "蒲公英 · JELLY技术周刊 Vol.32: 前端的自我进化之路", "desc": "2020年11月17日，Chrome 发布 M87，这是今年的最后一个正式版本，Chrome 产品总监 Matt Waddell 在一篇博客文章中写道：“该版本是多年来Chrome浏览器性能获得最大提升的一次”，那么到底是什么给了他如此强大的信心敢放此豪言，赶紧打开文章来一探究…"}, {"id": "6902230923639521287", "title": "Vue + TypeScript 中基础使用", "desc": "typescript属于静态类型（static typing）,一旦定义了类型，就不可以改变。 在vue中使用会帮助我们更快的查找错误，初步学习会有点点头疼，但是熟悉以后会提高代码质量以及工作效率。 Vue CLI 3 可以使用 TypeScript 生成新工程。创建方式： 然…"}, {"id": "6854573212374663176", "title": "[译] 使用 TypeScript 开发 React Hooks", "desc": "React hooks 在 2019 年二月被引入，以改善代码可读性。本文将探讨如何将其和 TypeScript 协同使用。 一种常见用法是，由前者构建复杂的容器（Container）组件，而后者负责简单些的展示型（Presentational）组件。 容器组件负责状态（sta…"}, {"id": "6844903919018049543", "title": "TS + React Hooks TodoMVC", "desc": "TodoMVC是一个示例项目，它使用目前流行的不同JavaScript框架的来实现同一个Demo，来帮助你熟悉和选择最合适的前端框架。 Redux是遵循 Flux 模式的一种实现，是一个状态管理库，适用于 React，Angular，VueJs 等框架或库，而不是局限于某一特定…"}, {"id": "6844903822981070855", "title": "TypeScript (基础)", "desc": "以及 Ts 官网的一些内容，没有基础的小伙伴直接看打了⭐️的内容即可。 方式二才是给 sum 定义类型，**其中的 => 不是 es6的 => ** ,它用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。 如果给参数添加了默认值，ts 会自动识别为可选，且不…"}, {"id": "6844903639442522119", "title": "vue + typescript 进阶篇", "desc": "本文是继 Vue + TypeScript 新项目起手式 之后的进阶+踩坑配置，所以推荐先行阅读前文 完整阅读完之后，基本可以顺利在新项目中使用vue + typescript 了 另外特别注意！！！ 不推荐在已有项目上强加 typescript， 因ts写法的组件跟之前的…"}, {"id": "6844904116523630600", "title": "基于 React、TS 的聊天室 monorepo 实战", "desc": "最近在思考如何编写高质量的 React 项目，刚好接到聊天室的需求，于是决定写一篇关于 React、TS 的实战教程，采用 monorepo+lerna 管理包。如何关注代码质量与规范的同时，快速实现需求。 接下来，带着大家快速开发一个 Web 版聊天室。心急的小伙伴可以直接看…"}, {"id": "6914185316664524814", "title": "typescript编译配置", "desc": "对单个文件进行编译tscxxx.js对编译文件进行监视则用-wtscxxx.js-w首先在目录下创建tsconfig.json文件inculde：对test1下的路径文件进行编译设置好后只用tsc即可"}, {"id": "6911988490730143757", "title": "TypeScript 学习总结之 泛型", "desc": "在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。 代码中 T 代表 「Type」，在定义泛型时通常用作第一个类型变量名称。但实际上 T 可以用任何有效名称代替。 由于我们操作的是数组，所…"}, {"id": "6844904047221178382", "title": "你不知道之vue如何支持TS", "desc": "从去年年初，我们开始在团队内部推行TS，TS的好处不言而喻，虽然当时有些同学提出一些异议，但最终还是利大于弊，我们成功迈出了第一步。 我们前期也做了相关调研，vue对TS的支持并不是很好，必须使用第三方库来支持；相比较而言，react因为本身就支持函数和类，和TS搭配起来简直是…"}, {"id": "6844904142293434375", "title": "Vue+TypeScript 入门小问题汇总", "desc": "*.d.ts类型文件不需要手动引入，TypeScript会自动加载。TypeScript 默认只识别 *.ts 文件，不识别 *.vue 文件，因此需要告诉TypeScript*.vue文件交给vue编辑器来处理。 在 vue-class-component 上增强更多的结合 …"}, {"id": "6975390686719770637", "title": "TypeScript ｜ 高级类型", "desc": "TypeScript 高级类型：交叉类型、联合类型、类型别名、索引类型、映射类型、条件类型。 交叉类型 示例 应用场景 合并两传入对象的成员属性的例子： 函数返回结果的类型是两个对象的交叉类型。调用 "}, {"id": "6977281038263255054", "title": "[翻译] DefinitelyTyped 的自动化管理改造", "desc": "Definitely Typed 为 TypeScript 生态提供了大量 js 模块的类型定义，每日流转的 PR 数量有 20 个左右，本文介绍开发团队是如何通过自动化改造来优化这个开源项目的管理的"}, {"id": "6968833702365233159", "title": "TypeScript ｜ 第一章：环境搭建和基础数据类型", "desc": "TypeScript入门到实战系列文章连载中。本文带你了解typescript是什么，并搭建基础学习环境，初步学习基础数据类型。"}, {"id": "6844903982809399304", "title": "TypeScript的六个类型", "desc": "元组可以看作是数组的拓展，表示已知元素数量和类型的数组。也就是说已知数组中每一个位置上元素的类型 never指那些永远不存在的值的类型，它是那些总会抛出异常或根本不会有返回值的函数表达式的返回值类型。 联合类型实际是几个类型的结合，但是和交叉类型不同，联合类型是要求只要符合联合…"}, {"id": "6921298566015090696", "title": "TypeScript", "desc": "一.如何优雅的声明类型独立的类型或接口声明看起来似乎并没有那么难，到项目中糅合一下呢？可能会有几十个类型声明；类型声明可能出现在接口入参出参中、React组件的Props和State中、函数方法中；当"}, {"id": "6844904022583803918", "title": "使用webpack/gulp构建TypeScript项目", "desc": "构建过程中，对ts文件的转换不再使用命令行方式，所以tsc的配置参数，需要通过tsconfig.json文件设置。 之后，我们会在项目目录中得到一个完整冗长的 tsconfig.json 配置文件。这个文件暂且不必改动。 经过上述配置之后，在控制台项目路径内，中直接运行 web…"}, {"id": "6844903605384773646", "title": "精读《重新思考 Redux》", "desc": "本周精读内容是 《重新思考 Redux》。 《重新思考 Redux》是 rematch 作者 Shawn McKay 写的一篇干货软文。 dva 之后，有许多基于 redux 的状态管理框架，但大部分都很局限，甚至是倒退。但直到看到了 rematch，总算觉得 redux 社区…"}, {"id": "6847902219216355341", "title": "TypeScript实现二叉搜索树", "desc": "树是一种非顺序数据结构，它用于存储需要快速查找的数据。现实生活中也有许多用到树的例子，比如：家谱、公司的组织架构图等。 本文将详解二叉搜索树并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 二叉树中的节点最多只能有两个子节点:一个是左侧子节点, 另一个是右侧子…"}, {"id": "6992355754078371854", "title": "TypeScript中的函数（上）", "desc": "在TypeScript中 声明和调用函数的不同方式有： 签名重载 多态函数 多态类型 函数声明和调用 在JavaScript中函数是一等公民，接下来我们一一盘点"}, {"id": "6844904184102256648", "title": "ts装饰器-元编程技巧：如何利用装饰器特性开发框架？", "desc": "最近在用 TypeScript 开发一款在 Deno 环境下运行的 Web 服务框架，其中大量用到了装饰器。 这是一小段框架的测试代码。 事实上就是这样，我目前在做的这个框架就是在 Spring 上面寻找的灵感。其实也谈不上什么灵感，可能只是单纯喜欢这种风格的服务端代码。 在此…"}, {"id": "6949490211243950116", "title": "TS学习（一）--tsconfig.json配置", "desc": "tsconfig.json作为Typescript的配置文件，主要有两方面的作用:指定编译文件和定义编译配置。"}, {"id": "6887874578748538887", "title": "前端算程序员还是工程师", "desc": "这是个标准的JavaScriptfunction。每个前端开发者(你以为)都是这样写自己的function的。和那一夜的你一样，不慎为自己的疯狂付出了代价。但这个代价还只是个形参，他存在，但他的真实却"}, {"id": "6927088564194770951", "title": "【🤦‍♂️工作无用】证明 JS 和 TS 类型编程是图灵完备的", "desc": "图灵完备和实现偏递归函数是等价的，关于偏递归函数的定义可以参照以下系列视频，我觉得这几个视频介绍偏递归函数解释得比较简单明了。 因为图灵完备和实现偏递归函数是等价的 ，因为我们可以通过用一门语言实现偏递归函数来证明这门语言是图灵完备完备的。这种领域有一个有趣的定理是，任意偏递归…"}, {"id": "6980987478207381540", "title": "TypeScript——函数", "desc": "函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义 行为的地方。"}, {"id": "6844903497532473352", "title": "TypeScript 中使用 CSS Modules", "desc": "相当长一段时间 CSS 总是在页面上作为一个全局的存在，以前这个『特性』影响还不算很大，命名上注意一点，比如使用 BEM 也能一定程度上解决问题。 但是随着 web 组件化的需求越来越强烈，CSS 的这种特性开始成为束缚开发者自由飞翔的绳索，每一个 CSS 类名都有可能产生意想…"}, {"id": "6913553116440821773", "title": "拥抱ts之后更优雅的异步请求处理", "desc": "笔者个人认为，业务侧的前端其实蛮大一部分的工作的在处理异步请求和组织各种各样的请求把数据进行组装，比如从登录开始就需要处理登录拿到用户信息展示avator之类的组件，获取新闻列表接口拿到数据做table组件展示之类的业务是十分常见的。业务代码中的异步请求越多，如果处理的请求的代…"}, {"id": "6996262207004606472", "title": "Typescript 的类型", "desc": "Typescript 类型 String string 区别 这边冒号后面的类型是区分开来的 strinig: 代表 ts 中的字符串类型 String: 代表 js 中字符串包装类的类型 类型推导 "}, {"id": "6859292592195158030", "title": "typescript实战总结之实现一个互联网黑白墙", "desc": "笔者上一篇文章 TS核心知识点总结及项目实战案例分析 主要写了typescript的用法和核心知识点总结, 这篇文章将通过一个实际的前端案例来教大家如何在项目中使用typescript. 该项目是一个响应式网站, 针对PC端和H5均做了一定的适配, 接下来我们将正对该网站做一次…"}, {"id": "6952378510094630919", "title": "TypeScript数据结构与算法：散列表", "desc": "上一篇《TypeScript 数据结构与算法：字典》实现了 Typescript 中字典的数据结构与算法，本篇继续实现散列表。"}, {"id": "6844903862390751240", "title": "TypeScript --- 快速学习", "desc": "1. typescript是什么 Typescript是Javascript的超集，遵循最新的ES5/ES6规范。TypeScript扩展了Javascript语法 2. TypeScript安装和编译 3. 数据类型 常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能…"}, {"id": "6994073072005283854", "title": "typescript学习系列1:TypeScript安装、初始化以及类型", "desc": "这是我参与 8 月更文挑战的第 1 天，活动详情查看： 8月更文挑战 1.安装： 2.卸载重装: 3.基础类型： ECMAScript最新定义了8种数据类型 7种原始数据类型 Boolean Null"}, {"id": "6952154467047309326", "title": "TypeScript数据结构与算法：字典", "desc": "上一篇《TypeScript 数据结构与算法：集合》实现了 Typescript 中集合的数据结构与算法，本篇继续实现字典。"}, {"id": "6963544539252391972", "title": "打字母游戏 系列之--做一个简单的游戏", "desc": "游戏介绍 该系列会做一个游戏：打字母，游戏是这样的： 在屏幕顶部有一些随机位置的随机的字母落下，随着游戏进度，字母下落的速度会越来越快..."}, {"id": "6991599858633162766", "title": "TypeScript中的基本类型 ｜ 8月更文挑战", "desc": "TypeScript中的一些基本数据类型，包括 string、number、bigint、boolean、undefined 和、symbol和null"}, {"id": "6844904040728379406", "title": "基于 Angular 的小程序可视化编辑器 —— Panel-Magic", "desc": "在此之前说明该平台的定位，目的不是给技术人员编辑完之后进行二次开发或代码的定制化。关于这个定位问题我个人的想法是，code 问题不可能完全交托给可视化编辑、除非是类似传统的简单的企业介绍页等还有可能完全代替，但还是比不上直接代码生成的工具，所以 Panel-Magic 一开始的…"}, {"id": "6844903845332516872", "title": "是时候开发你自己的vscode扩展插件了", "desc": "Visual Studio Code（以下简称vscode）是现在非常流行的一款编辑器，相信很多人都在用或者用过，至少也是听说过。不同于WebStorm这样的IDE大而全但稍显笨重，vscode算是比较小巧快速的了，虽然还比不上Sublime Text，但是毕竟自带了调试，GI…"}, {"id": "6844903848939634696", "title": "杀手级的TypeScript功能：const断言", "desc": "我发现官方的 TypeScript 文档非常有用，但是总觉得有点过于学术化并且枯燥无味。每当我发现一个新功能时，我想要知道这个功能究竟能够解决什么问题而不是长篇大论。 在我看来，const assertions 是 TypeScript 3.4 的杀手级新功能，正如我稍后将要解…"}, {"id": "6895704666827390990", "title": "TypeScript 学习笔记 -- 类以及类的装饰器", "desc": "近期在学习TypeScript, 主要原因还是新来的同事说利用TypeScript来开发React Native项目比较方便。目前已经能够开发小型项目(想要玩的很6的话, 还要多写几个项目累积经验)。 public(默认): 公有, 可以在任何地方被访问。 private: 私…"}, {"id": "6844903902773854216", "title": "IM  web application with protobuff & TypeScript", "desc": "Recently I'm making a customer feedback web applciation.Since the backend and app end already using the protocal ProtoBuf(Protocol Buffer).…"}, {"id": "6844903760234283022", "title": "「译」深入typescript系列1", "desc": "typescript为js提供了编译时的类型检查，最棒的是类型完全是可选的，你的js代码（.js文件）可以重命名成（.ts）文件，typescript同样会返回和原有js文件一样的输出。通过可选的类型检查，typescript就是严格的js超集。 这种类型推断具有良好的动机，如…"}, {"id": "6844903470814740493", "title": "《前端之路》- TypeScript (三) ES5 中实现继承、类以及原理", "desc": "所以这个时候神奇的事情发生了，我们把 每个实例化对象的 constructor 作为一个共享数据，放在 prototype 对象中，节约内存。"}, {"id": "6921171621524815880", "title": "Typescrit从入门到放弃系列(十)-类型推断", "desc": "一.赋值推断赋值时推断，类型从右像左流动,会根据赋值推断出变量类型二.返回值推断自动推断函数返回值类型三.函数推断函数从左到右进行推断四.属性推断可以通过属性值,推断出属性的类型五.类型反推可以使用t"}, {"id": "6844904152280072199", "title": "通过示例演示 TypeScript 的高级类型", "desc": "提升你对 TypeScript 的理解，并学这些高级的技术，可以帮助你掌握该语言并且可以更好的在 React 中使用 TypeScript。 去年冬天，我开始使用 TypeScript，我已经从一个使用 any 的新手逐渐成长为一个习惯使用高级内置类型和自定义类型的老手。通过在…"}, {"id": "6917592126339432462", "title": "TypeScript入门：类的继承和修饰符", "desc": "类的写法构造函数参数和成员属性都添加类型注解如果构造函数没有给name属性赋值，在写代码时需要给name属性设置一个初始值，否则会报错如果不想设置初始值，可以把name设置为可选属性name?:str"}, {"id": "6926517239298392072", "title": "复杂场景下的 typescript 类型锚定 （2） ----- 概念回炉", "desc": "作者：ICBU东墨继上次分享了typescript类型锚定的方法后，和同事们又进行了一些点对点的讨论。在交流的过程中，我发现部分同学已经能较为熟练地使用ts的类型推导，但对某些不常见的typescri"}, {"id": "6972944805164761102", "title": "TypeScript的使用方法", "desc": "花10分钟，阅读本篇文章你能得到什么? ts的优点 ,ts的特点 ,安装方式, 常用的类型使用方式 ,关键字的用法; 本篇文章适合刚上手ts的同学入手"}, {"id": "6956151216229318663", "title": "Hi-Bus中如何使用Proxy实现修饰器功能", "desc": "Hi-Bus是我在项目中开发出来发布订阅消息的消息总线系统，与常用的消息总线系统类似，就是实现了订阅消息和发布消息，不过我使用了TypeScript的修饰器来简化了订阅和发布的操作，经过实际项目的使用"}, {"id": "6844904169929719822", "title": "内置工具类型 -- Typescript类型编程篇（5）", "desc": "可以看到，Omit类型就是对之前提到的Pick和Exclude的进一步封装。 可以看到T被约束必须为函数类型，如果传入一个非函数类型会报错。 T同样被约束必须为函数类型。 T被约束为必须为构造函数。 T同样被约束为必须为构造函数。 ThisParameterType用于获取函数…"}, {"id": "6912777170130829320", "title": "Typescrit从入门到放弃系列(一)-环境配置和搭建", "desc": "一.什么是TypescriptTypescript更像后端JAVA,让JS可以开发大型企业应用TS提供的类型系统可以帮助我们在写代码时提供丰富的语法提示在编写代码时会对代码进行类型检查从而避免很多线上"}, {"id": "6844903842631385095", "title": "Canvas 2D 渲染指南 - 用 TypeScript 实现一个程序入口 Application 类", "desc": "两年前，我曾徒手写过一个运行在 Web 端的小游戏，就是用 Canvas 来实现的，之后便几乎从未与 Canvas 打交道，这两天偶然接触到一本书《TypeScript图形渲染实战：2D架构设计与实现》，又再次让我对这方面产生了兴趣，同时这本书采用的 TypeScript 实现…"}, {"id": "6844903944775270413", "title": "JavaScript和TypeScript中的void", "desc": "如果你来自传统的强类型语言，可能会很熟悉 void 的概念：一种类型，告诉你函数和方法在调用时不返回任何内容。 void 作为运算符存在于 JavaScript 中，而作为基本类型存在于 TypeScript 中。在这两个世界中，void 的工作机制与大多数人习惯的有点不同。 …"}, {"id": "6911697843258408967", "title": "TypeScript 学习总结之 接口", "desc": "// 这种注解方式， 你会发现它同样把函数的实现方式也给实现了。 这样做不太好 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索…"}, {"id": "6897505773224460302", "title": "简易音乐盒with TS", "desc": "这是参加一个简易音乐盒项目的过程记录。 这个音乐盒原先是由vue3.0写出来的，之后在此基础上升级为vue 3.0 + TS。严格来说，这个小项目里面只是使用了TS风格的代码，远远没有运用复杂的TS知识。 因为等等启动脚手架后，原有的App.vue 文件会被更改为跳转到Type…"}, {"id": "6878150659170893831", "title": "typescript的应用基础", "desc": "语法规范上，typescript的类型声明使代码开发更更清晰，更严谨。可以在很大程度上提升代码的开发水准。前有eslint作为前端规范代码工具，遭到广大开发者的喜爱. 1. typescript 泛型 typscript实现了类似c++，java语言的泛型模式。本着可复用原则 …"}, {"id": "6844904121070256141", "title": "TypeScript Utility Types 学习笔记及源码解析", "desc": "最近写类型定义时，发现想要实现的类型不知道该用什么方法实现。也发现之前的代码里写了一些不优雅的类型定义。看了Utility之后觉得还是自己知道的太少了，想要用的这里都有了。然后去看了一下他们的源码实现，发现也不难。这里分享一下自己的学习笔记。 将T中所有属性转换为可选属性。返回…"}, {"id": "6917454629496160269", "title": "技巧与思维可兼得——读 TypeScript of Redux 有感", "desc": "Redux 是一个非常经典的状态管理库，在 2019 年接近年底的时候这个项目用 TypeScript 重写了。网上有很多分析 Redux JavaScript 代码实现的文章，然而 TypeScript 部分的却很少。我在看重写的 TypeScript 代码时发现有很多地方比…"}, {"id": "6844903650410627085", "title": "TypeScript 3.0 发布！", "desc": "TypeScript 3.0 is here! Today marks a new milestone in the TypeScript journey, serving JavaScript users everywhere. If you’re unfamiliar wi…"}, {"id": "6844903916950257672", "title": "TypeScript入门指北（二）", "desc": "当然，函数 和 接口 在上篇文章已经讲过了，这篇文章着重讲一下类。 在面向对象编程(OOP)中，类是对对象的一个高度的抽象。打个比方，女朋友可以看成一个对象，因为女朋友是具体的一个人；而女人/人则可以看成一个类，因为它是泛指的。 可以看到，这个对象什么都没有，接下来我们给她添加…"}, {"id": "6844903511398989838", "title": "ThinkJS 3.0 如何实现对 TypeScript 的支持", "desc": "ThinkJS 3.0 是一款面向未来开发的 Node.js 框架，内核基于 Koa 2.0。 3.0 相比 2.0 版本进行了模块化改造，使得内核本身只包含了最少量必须的代码，甚至还不足以构成一个完整的 Web MVC 框架，除了内核里面实现的 Controller， Vie…"}, {"id": "6901833830618333192", "title": "Typescript 终于能实现类型安全的 Printf 函数了 ！！！", "desc": "以上是最终代码。第一次写文章，如果有用词不当或理解错误的地方请大佬们指正。 在条件类型中，我们可以在它的分支上引用自身。 函数的返回类型则是取出目标字符后的进行递归的 format 类型。 这里我们safePrint的类型和具体实现是分开的，并且因为typescript有递归深…"}, {"id": "6844903760599187463", "title": "typescript 中的 interface 和 type 到底有什么区别？", "desc": "介绍 typescript 中 interface 和 type 的相同点和不同点，以及两者应该什么时候使用。"}, {"id": "6844904068029104136", "title": "TypeScript夜点心：类型推断的策略", "desc": "熟悉 TypeScript 的朋友都知道，TS 具有一套类型推断系统来帮助减少不必要的类型声明。即使是面对纯 JS 代码，TS 也能通过类型推断系统给每个变量自动套上一个默认类型。 所以对 a1的赋值是成立的， 而其他的赋值就报错了。 不同的出发点和情形，造成了两种不同的类型推…"}, {"id": "6881899559904247821", "title": "react 中的类型定义", "desc": "最近在研究TypeScript，结合React看了一下，发现了一段不是很好理解的类型定义，下面结合自己的理解来谈谈。"}, {"id": "6844903942992691213", "title": "前端也来点算法(TypeScript版) | 2 - 回文数和回文链表", "desc": "算法采用 TS 进行编写。 这个数字可以看成是以中心对称分布的。最优的方案是尽量少的循环和使用空间，所以能不能想办法只循环 length / 2 次就可以判断出结果？显然是可以的，因为它具备对称性，所以排除边界条件之后，判断 str[i] 和 str[length - i - …"}, {"id": "6844904194051145735", "title": "深夜聊Typescript：关于Never类型(一)", "desc": "never类型作为Typescript的原始类型，一直很神秘，因为在实际场景中鲜有用到。它用来描述那些永远无法出现的值。我闭眼一想：如果一个值我永远无法到达或者出现，那我干嘛不删了它？编译器立刻给了我答复：你这么豪横，你咋不自己编译代码！ 不要提问，我知道上面说的不是人话。咱们…"}, {"id": "6844903854023114765", "title": "TypeScript 2.9+ 版本中的几个知识点", "desc": "TypeScript 2.9 版本中添加了一个 resolveJsonModule 编译选项，它允许我们在 TypeScript 模块中导入 JSON 文件。 这是由于在默认情况下，相对路径导入模块时，TypeScript 只识别 .ts/tsx 文件模块。如果你使用的是 Ty…"}, {"id": "6949423098554744839", "title": "TypeScript学习笔记", "desc": "基本类型和对象类型基础类型：number, string, null, undefined, symbol, boolean, void对象类型：{}, [], Class, function类型注解"}, {"id": "6844903589236719624", "title": "[译] $digest 在 Angular 中重生", "desc": "我使用 Angular.js 框架好些年了，尽管它饱受批评，但我依然觉得它是个不可思议的框架。我是从这本书 Building your own Angular.js 开始学习的，并且读了框架的大量源码，所以我觉得自己对 Angular.js 内部机制比较了解，并且对创建这个框架…"}, {"id": "6844903582555176973", "title": "[译] 关于 `ExpressionChangedAfterItHasBeenCheckedError` 错误你所需要知道的事情", "desc": "最近 stackoverflow 上几乎每天都有人提到 Angular 抛出的一个错误：ExpressionChangedAfterItHasBeenCheckedError，通常提出这个问题的 Angular 开发者都不理解变更检测（change detection）的原理，…"}, {"id": "6844903517585408007", "title": "Typescript 构建命令行工具上手指南", "desc": "这篇小教程里演示使用 TypeScript 构建命令行工具，利用 async/await 进行非阻塞操作，利用 mocha 自动化测试以及 travis-ci 进行持续集成。 最近 TJ 发布了 node-prune 进行对 node_modules 里冗余文件的清理，但项目由…"}, {"id": "6844903697982586893", "title": "浅谈 TypeScript - immutable", "desc": "在我们最基础的印象里 JavaScript 的对象都是引用关系，这对于我们的应用来说，可能会有无法预期的结果，比如： 这影响了外部定义的对象，有时候我们不可预知的错误，就是如此。那么，是否有更好的解决方案来解决这个对象不可变的事情呢？immutable 这个库就能很好的解决这个…"}, {"id": "6844903575475191822", "title": "[译]Typescript : 类 vs 接口", "desc": "无论是在 Java 或 Typescript 中，接口和类的定义是不同的。 我想指出一个我今天看到了很多次的错误。在这段 Typescript 的代码中我发现： 不！绝对不对。太让人难受了。但是真正让人难受的是接下来读到的： 哎呀呀！我知道这可能对来自一种 OOP 语言的人有一…"}, {"id": "6844903570395906062", "title": "Angular组件库集合", "desc": "这个网站收集了大量的angular的第三方库，可以节省各位同学的时间，请把该链接添加到你的浏览器的书签栏上。"}, {"id": "6917484457985310727", "title": "TypeScript入门：基础数据类型", "desc": "TS基础数据类型及声明方式：原始类型数组类型元组函数对象symbolundefined和null定义为undefined和null的变量只能赋值定义的类型，但ts官方说unedfined和null是任"}, {"id": "6844903827028590599", "title": " 一个数学表达式的计算", "desc": "如果有人问你 2 * (3 + 4) 等于多少，也许你会脱口而出说等于14， 但是你有没有想过，计算机是如何计算这个表达式的？为什么当你在计算机里输入2 * (3 + 4)， 它也能得出14？在思考计算机如何计算这个数学表达式之前，我们来看下人是怎么计算出结果的。2 * (3 …"}, {"id": "6844903765347319816", "title": "vue-classify, 将 JS 写的 vue option object 转为 Typescript class 形式", "desc": "批量迁移业务组件，辅助使用 Vue 写的项目从 js 迁移到 ts。 个人作品，做个小广告。"}, {"id": "6844903857584078861", "title": "typeScript 使用小感触", "desc": "以上实例定义了一个类 Site，该类有一个方法 name()，该方法在终端上输出字符串 Runoob。 new 关键字创建类的对象，该对象调用方法 name()。"}, {"id": "6993384332152799240", "title": "TypeScript学习(十七)：模块解析 | 八月更文挑战", "desc": "“这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战” TS 1.5 开始内部模块用命名空间表示，外部模块用 module 表示。 使用场景 以文件为例：一份文件就可以看作是一个模块 当文件内"}, {"id": "6954304242093932557", "title": "TS 编译工具！从 ts-loader 到 Babel", "desc": "TS编译器如何选择？ts-loader ? awesome-typescript-loader ? babel ?"}, {"id": "6850037259375214605", "title": "TypeScript实现AVL树与红黑树", "desc": "二叉搜索树存在一个问题: 当往树中插入的数据一大部分大于某个节点或小于某个节点，这样就会导致树的一条边非常深。为了解决这个问题就出现了自平衡树这种解决方案。 本文将详解两种自平衡树：AVL树和红黑树并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 AVL树(A…"}, {"id": "6965320374451961886", "title": "用ts类型系统实现斐波那契数列", "desc": "编程实现一个斐波那契数列算法。换句话说，类似于用现有的机器码到指令集、二进制到十进制、汇编语言到高级编程语言的过程，让类型定义语法也可以实现编程。"}, {"id": "6933163362410823693", "title": "看这篇TypeScript入门真的够够了！", "desc": "js是动态数据类型，不能进行数据类型的校验，导致我们接触别人的代码的时候很有可能不知道这一行代码是什么意思，需要传递什么样的参数，导致写代码的困难以及bug的增加。 所以出现了typescript这种超级JavaScript，这种非动态数据类型的语言--》 静态类型的语言。 来…"}, {"id": "6962122843329052686", "title": "TypeScript中的底层和顶层类型", "desc": "本篇文章介绍了TypeScript的顶层类型和底层类型, 以及对于any和unknown类型的正确使用"}, {"id": "6932407430563725326", "title": "Node server typescript改造指南", "desc": "最近将项目中的代理层的node server，从旧的js改造成了ts，总结该过程中遇到的一些小坑。 来支持在node中直接运行，之后的版本就已经天然支持es module，可以直接运行es module模块。 在node项目中直接运行esm，可以指定文件的后缀为mjs，或者不指…"}, {"id": "6844903877305729038", "title": "如何使用 Typescript 搭建一个 Node.js 服务", "desc": "很多时候，我们在学习了某个新东西以后，却不知道如何在项目中运用自己学到的新东西。本篇旨在使用 Node.js + TypeScript + Express 实现一个简单的后台服务器，以此更加深入的理解 ts 在实际开发中的运用。 了解 TypeScript 基本知识，可参考 T…"}, {"id": "6844903799459414029", "title": "🔌 TS 的 Interface 了解一下？", "desc": "Interface 是一种描述对象或函数的东西。你可以把它理解为形状，一个对象需要有什么样的属性，函数需要什么参数或返回什么样的值，数组应该是什么样子的，一个类和继承类需要符合什么样的描述等等。下文分七个部分，一起看一下对象接口、函数接口、可索引类型接口、类接口是如何定义的，以…"}, {"id": "6844903661982728200", "title": "20分钟上手 webAssembly", "desc": "Web应用的蓬勃发展，使得JavaScript、Web前端，乃至整个互联网都发生了深刻的变化。前端开始承担起了更多的职责，于是对于执行效率的诉求也就更为急迫。除了在语言本身的进化，Web从业者以及各大浏览器厂商，也在不停地进行探索。2012年Mozillia的工程师提出了Asm…"}, {"id": "6950311155264913438", "title": "从零开始撸富文本编辑器", "desc": "前言功能描述按功能区域来看，富文本编辑器一般主要包括两个部分 菜单栏，文本编辑区域。菜单栏用于设置输入框的文本格式，如字体大小、字体颜色、字号、标题、背景、行高、缩减等等。文本编辑区域用于输入富文本内"}, {"id": "6981666533114118174", "title": "简要介绍fp-ts（三）", "desc": "IO 函数式编程最不能容忍的就是副作用，但是副作用又是一段有用的程序所必不可少的。所以，在函数式编程中，会把产生副作用的代码减少到最小并聚集在一起。IO就是用来表示一个会产生副作用的操作。查看 fp-"}, {"id": "6972932322995732517", "title": "带你从ast理解typescript编译原理和智能语法提示", "desc": "最近在研究一款低代码平台，名为“拽拽”，支持可视化编辑，也支持逻辑代码抽离。由于我自己人力有限，项目才处于刚开始的阶段，就不放出来了。后期还要支持后端接口生成，想要加入的小伙伴可以留言。 什么是ast"}, {"id": "6844903778970255367", "title": "react与typescript搭配干活就是不累(译)", "desc": "typescript在增强react应用的稳定性，可读性以及易管理性方面一直都处在非常重要的位置上，typescript为React和其他javascript前端框架逐步引入了更多的支持；从3.0版本和3.1版本之后显著增强了许多功能。在过去，typescript集成到reac…"}, {"id": "6850418120356691976", "title": "TypeScript + React最佳实践-第一节：Component类型化", "desc": "TypeScript + React 类型安全三件套：Component、Redux、和Service类型化。 React.FunctionComponent<Props, Context> 或者 React.StatelessComponent<Props, Context>…"}, {"id": "6844903937930346509", "title": "深入 Typescript 类型系统", "desc": "最近项目中准备推广接入 Typescript，抽空复习了一波相关的技术知识。说复习是因为之前看过了然而现在已经忘得一干二净了，除了不常用的原因外，也是因为 Typescript 知识相对比较零散，学习时难成体系，所以趁这个机会整理整理，就当学习笔记吧。 Typescript （…"}, {"id": "6987002391212392462", "title": "Typescript 类型体操  ——  Underscore", "desc": "🤔️要求 实现一个范型 Underscore，对于给定的下划线形式的字符串类型 T, 返回驼峰形式的类型G."}, {"id": "6981445433348325384", "title": "TypeScript——类型推论", "desc": "这节介绍TypeScript里的类型推论。即类型是在哪里如何被推断的。TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。"}, {"id": "6947969820117696548", "title": "Chrome 牵头启动 Compat2021 计划 、Firefox 87 发布", "desc": "新增 SmartBlock 功能。SmartBlock 为被 Firefox 阻止的脚本提供了替代程序，防止网站在隐私浏览和严格增强跟踪保护下显示不正确，确保网站正常显示。 默认剪裁 HTTP Referrer 以保护用户隐私。默认将 Referrer-Policy 修改为 s…"}, {"id": "7000259019340251150", "title": "vuex-class在typescript+vue项目中的使用", "desc": "vue-class的在typescript+vue项目中的使用-vuex-class是vuex和vue-class-component的绑定助手"}, {"id": "6973950153346514952", "title": "TypeScript上手01 常用数据类型", "desc": "这是我参与更文挑战的第1天，活动详情查看更文挑战 1.ts定义静态类型 TypeScript 的一个最主要特点就是可以定义静态类型，英文是 Static Typing。那到底是什么意思那？太复杂的概念"}, {"id": "6850418113859551239", "title": "再次研究一道网红typescript面试题", "desc": "说到取某些key出来，就是Pick或者Omit了。但ts又没有类似Object.keys().filter这种方式，需要使用映射类型+never去做特殊处理。整个流程就是：映射类型 =》 如果值为函数类型，返回key，否则返回never =》 对映射类型取值，得到函数类型的ke…"}, {"id": "7000363007763021831", "title": "【TypeScript】类型拓展", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 TS类型拓展 （1）联合类型 联合类型表示取值可以为多种类型中的一种 使用|来分隔多种类型 适用于不确定具体是什么类型，但能确定是哪几种类"}, {"id": "6844904115919650829", "title": "类型即正义：TypeScript 从入门到实践（一）", "desc": "JavaScript 已经占领了世界上的每一个角落，能访问网页的地方，基本上就有 JavaScript 在运作，然而 JavaScript 因为其动态、弱类型、解释型语言的特性、出错的调用栈隐蔽，使得开发者不仅在调试错误上花费大把时间，在团队协作开发时理解队友编写代码也极其困难…"}, {"id": "6844904115919650824", "title": "类型即正义：TypeScript 从入门到实践（序章）", "desc": "因为需要尽可能全且精炼的讲解 TypeScript 语法知识，所以我们需要一个恰到好处的实战项目，这一小节主要是用于讲解我们准备初始 TypeScript 版本的 React 项目代码的过程，在下一个小节中我们将会结合 React 项目代码，真正开始 TypeScript 语法…"}, {"id": "6977147950266859557", "title": "使用 TypeScript 常见困惑：interface 和 type 的区别是什么？", "desc": "当我们使用 TypeScript 时，就会用到 interface 和 type，平时感觉他们用法好像是一样的，没啥区别，都能很好的使用，所以也很少去真正的理解它们之间到底有啥区别。"}, {"id": "6984281217168310302", "title": "TypeScript Tutorial 中文版 - 项目介绍", "desc": "开源的 TypeScript Tutorial 教程中文版，翻译自：https://www.typescripttutorial.net/"}, {"id": "6951635439174287374", "title": "从0到1学会TypeScript", "desc": "从零到一学会TypeScript背景TypeScript是JavaScript的超集，可以理解为JavaScript的升级版。因为JavaScript是动态类型语言，这让我们在编写代码时有了更高的编码"}, {"id": "6894919707674345480", "title": "从历史的角度入门TypeScript", "desc": "如果你了解 npmtrends.com，你可以在上面轻松获取以下这个截图信息。 图示 TypeScript 的下载量在 5 年内呈现指数级增长。如果咱按照买基金股票抄底思路，学习 TypeScript 的最佳时间或许就是几年前。 但是谁都无法回到过去，别灰心，还有另一个最佳时间…"}, {"id": "6912309038743191559", "title": "Typescript-函数签名与函数重载", "desc": "参数类型的名字和函数参数的名字可以不一致，写成一致是为了增加该函数类型的可读性。 一边指定了类型但是另一边没有类型的话，TypeScript编译器会通过类型推断自动识别出类型。 Interface 里面需要列出参数列表返回值类型的函数定义。写法如下： 类型别名会给一个类型起个新…"}, {"id": "6998339468973309983", "title": "Vue3+TS+ElementUI搭建管理系统之Echarts可视化", "desc": "Vue3通过ref属性获取元素 在compositionAPI中如何使用生命周期函数？ 需要用到哪个生命周期函数，就将对应函数的import进来，接着在setup中调用即可"}, {"id": "6844903796997357582", "title": "巧用 TypeScript（五）-- infer", "desc": "infer 最早出现在此 PR 中，表示在 extends 条件语句中待推断的类型变量。 在这个条件语句 T extends (param: infer P) => any ? P : T 中，infer P 表示待推断的函数参数。 整句表示为：如果 T 能赋值给 (param…"}, {"id": "6844903778085240846", "title": "【译】2019年开始使用Typescript", "desc": "基于2018年Stack Overflow Developer的调研，TypeScript作为编程语言比JavaScript更受“喜爱”。TypeScript在js开发者中这么受喜爱的原因是：在你运行代码前，添加到javascript中的类型有助你发现错误（代码）。TypeSc…"}, {"id": "6844903968527613960", "title": "TypeScript 基础精粹", "desc": "基础笔记的github地址：https://github.com/qiqihaobenben/Front-End-Basics ,可以watch,也可以star。 有两种类型注解方式，特别注意第二种使用 TS 内置的 Array 泛型接口。 函数类型可以先定义再使用，具体实现时…"}, {"id": "6999898789209178143", "title": "一、TypeScript 入门｜8月更文挑战", "desc": "“这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战” TYPESCRIPT 官网 github TypeScript是一种由微软开发的开源、跨平台的编程语言。它是JavaScript的超集"}, {"id": "6860501233308794887", "title": "TypeScript实现八大排序与搜索算法", "desc": "我们在页面上渲染数据时，通常会根据特定规则来对数据进行一个排序，然后再将其渲染到页面展示给用户。 那么对数据进行排序有很多种方式，哪一种效率高？ 哪一种稳定性好？那一种占用内存小？本文将详解经典的八大排序算法以及三种搜索算法，并用TypeScript将其实现，欢迎各位对上述问题…"}, {"id": "6844904074534453261", "title": "Vue + TypeScript 项目放弃 TSLint，拥抱 ESLint", "desc": "到这里 ESLint 和 prettier 相关配置已经完成，接下来我们利用一些工具帮我们在 git commit 阶段完成代码格式化和校验工作。如果涉及多个 Vue 项目想要复用配置项，我们可以把 eslint 配置和 prettier 的配置封装成一个 npm 私服包引入。…"}, {"id": "6930628304491773966", "title": "理解Ts联合类型和交叉类型", "desc": "最近写了个需求，当前存在两个列表数据，一个是提问列表，一个是回答列表。两个列表数据存在共同的数据结构：头像、名称、时间。于是我们根据数据后台的数据接口字段提炼出以下的ts类型。 很明显，优秀的代码根据DNR（do not repeat）原则，相同重复的声明片段是不好的。可以根据…"}, {"id": "6844904178234458120", "title": "掌握 tsconfig.json", "desc": "在 TypeScript 开发中，tsconfig.json 是个不可或缺的配置文件，它是我们在 TS 项目中最常见的配置文件，那么你真的了解这个文件吗？它里面都有哪些优秀配置？如何配置一个合理的 tsconfig.json 文件？本文将全面带大家一起详细了解 tsconfig…"}, {"id": "6999598104102060045", "title": " 查漏补缺「typescript」基础", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 前言 未来的日子，愿你把自己调至最佳状态，缓缓努力，慢慢变好 Y(^o^)Y"}, {"id": "6990247421846487077", "title": "【Typescript】知识梳理：函数", "desc": "函数是JavaScript应用程序的基础。是定义行为的地方。文章主要介绍了函数在Typescript中的使用和拓展。"}, {"id": "6994742779473575972", "title": "TypeScript常用知识之--模块和类型组合", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 模块 1.导出 2.导入 3.命名空间 类型组合 1. any 组合类型 2.交叉类型 3.联合类型 4.嵌套类型 5.克隆类型 相关资料 "}, {"id": "6844904144545775629", "title": "TypeScript 技巧集锦", "desc": "编写 TypeScript（后面简称TS）应用是一个与类型斗争的过程，你需要使用 TS 提供的类型工具通过不同的组合来精确描述你的目标。描述越精确，类型约束和提示越准确，潜在错误越少。反之，描述越模糊（如any一把唆），TS 能提供的类型辅助就越少，潜在的错误也就越多。如何描写…"}, {"id": "6987802605464322055", "title": "TypeScript学习(三)：Handbook -> More on Functions", "desc": "构造函数 -> Construct Signatures 泛型函数 inference -> 推断 TS 会根据 Constraints -> 约束 extends 有时候，当想关联两个值。但是，只能"}, {"id": "6844903621889359879", "title": "使用ESLint ＆ Prettier美化Vue代码", "desc": "Prettier 是一个有见识的代码格式化工具。它通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制执行一致的样式，并在必要时包装代码。如今，它已成为解决所有代码格式问题的优选方案；支持 JavaScript、 Flow、 TypeScript、 CSS、 SCSS、…"}, {"id": "6944959532082675742", "title": "TypeScript 面向对象编程", "desc": "面向对象编程中一个重要的核心就是：类，当我们使用面向对象的方式进行编程的时候，通常会首先去分析具体要实现的功能，把特性相似的抽象成一个一个的类，然后通过这些类实例化出来的具体对象来完成具体业务需求。 通过 class 定义了一个类以后，我们可以通过 new 关键字来调用该类从而…"}, {"id": "6972521427819839501", "title": "Typescript随时生成Mock数据？", "desc": "背景 平常我们写代码经常会写个mock，测一测我们写的函数功能执行的跟我们的预期一不一致。但是复杂的类型填写数据就会变得比较繁琐，于是写了个vscode插件生成mock数据。 看下效果 支持选中cla"}, {"id": "6995938531688316958", "title": "《TypeScript》 - Array(数组)", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 数组对象是使用单独的变量名来存储一系列的值。 TypeScript 声明数组的语法格式如下所示： 或者直接在声明时初始化： 示例： 整个数"}, {"id": "6844903812256251912", "title": "来用 TypeScript（技术周刊 2019-04-01）", "desc": "WebKit 已经实现了 ResizeObserver API，此前该 API 已被 Chrome 支持。通过 ResizeObserver 可以监听元素盒子尺寸的变化。🔗 Scroll-linked Animations 进入 W3C 非官方草案。通过 Scroll-lin…"}, {"id": "6975794418347409444", "title": "TypeScript ｜ 迭代器 Iterator", "desc": "迭代器是一种特殊对象，它符合迭代器协议规范。在 TypeScript 中，我们可以定义一个接口，这个接口上有一个函数类型 next ，next() 方法的返回值类型是 { value: any, do"}, {"id": "6992208648587968519", "title": "TS小学习", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 ts 基础用法 字面量 使用any后 ts不检测变量，和使用js没有区别；他可以赋值给任何类型变量 unknown，类型不相同，在赋值后会报"}, {"id": "6992198790245531662", "title": "TypeScript系列 --- 基础类型", "desc": "为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。"}, {"id": "6844904168918876173", "title": "使用Typescript和ES模块发布Node模块", "desc": "TypeScript已经成为一种非常流行的JavaScript语言，这是有原因的。它的类型系统和编译器能够在您的软件运行之前的编译时捕获各种bug，并且附加的代码编辑器功能使它成为一个非常适合开发人员的高效环境。 本文旨在解决所有这些问题，并为你提供一个设置，使你可以放心地编写…"}, {"id": "6986920887513513997", "title": "TypeScript的类型推论与联合类型--(TypeScript 03)", "desc": "什么是TS中的类型推断？ 什么时候需要进行类型注解什么时候不需要呢？ 比如下面的代码，TS能够推断的，我们可以不进行注解 比如下面的代码，TS不能够对参数进行推断的情况下，我们需要进行注解 什么是联合"}, {"id": "7000241507424796709", "title": "二、TypeScript Interfaces 接口", "desc": "“这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战” Interfaces 接口 接口是对象的属性和方法的抽象描述 比如：一个叫小猫的小黑狗正在吃骨头,一个叫小狗的小白猫正在吃猫粮... "}, {"id": "6953941753028149278", "title": "[TS进阶][BFE-TS]1-20题", "desc": "BFE是一个前端面试及学习网站，这篇文章将带你学习并理解BFE-TS的1-20题，进行TS能力进阶。 需要一定的TS基础 学习并理解这些题目可以让你的TS能力飙升。"}, {"id": "6869571836066299912", "title": "TypeScript实现动态规划", "desc": "前面的一系列文章跟大家分享了各种数据结构和算法的实现，本文将分享一些算法的设计技巧：分而治之、动态规划，使用这些技巧可以借算法来解决问题，提升自己解决问题的能力，欢迎各位感兴趣的开发者阅读本文。 前面分享的排序算法中，归并排序就是一种分而治之的算法。分而治之是算法设计中的一种方…"}, {"id": "6858073734994919437", "title": "TypeScript 运行时类型检查指南", "desc": "mistermicheels 原作，授权 New Frontend 翻译。 TypeScript 只在编译期执行静态类型检查！实际运行的是从 TypeScript 编译的 JavaScript，这些生成的 JavaScript 对类型一无所知。编译期静态类型检查在代码库内部能发…"}, {"id": "6980977767823179789", "title": "TypeScript——类", "desc": "传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。"}, {"id": "6999996499908100109", "title": "【TypeScript】函数与接口", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战本篇文章主要介绍TypeScript中的函数的一些定义和接口的基本概念"}, {"id": "6844904015235383303", "title": "TypeScript 泛型的通俗解释", "desc": "在 TypeScript 中我们会使用泛型来对函数的相关类型进行约束。这里的函数，同时包含 class 的构造函数，因此，一个类的声明部分，也可以使用泛型。那么，究竟什么是泛型？如果通俗的理解泛型呢？ 通俗的解释，泛型是类型系统中的“参数”，主要作用是为了类型的重用。从上面定义…"}, {"id": "6844903861493170189", "title": "JavaScript：Aho–Corasick算法实现敏感词过滤", "desc": "敏感词过滤应该是许多后端同事经常会遇到的需求，无论是评论、弹幕、文章，都需要做敏感词过滤处理来规避风险。在前端开发中，使用replace函数来替换字符串是我们的常规操作，在这之前我思考过如果用JavaScript来实现敏感词过滤该怎么做。在学习过程中，接触到了Trie树，瞬间有…"}, {"id": "6844903710070407181", "title": "Typescript 入门写一个 react 进度条组件", "desc": "如果你写过 react 的组件， 这篇文章对与你来说基本没有什么难度。纯粹的是加上了一点 ts 的知识。 我完全是以学习者的姿态来描述我写组件的过程，很多不严谨的地方请大家指出来哈哈。 也可以打开下面 codeSandbox 看一下源代码。 这是一个普通的 UI 组件，难点主要…"}, {"id": "6844903880648720397", "title": "基于 TypeScript 的 IoC 和 DI", "desc": "上述代码中使用了Component的装饰器，并在模块的providers中注入了需要使用的服务。这个时候，在AppComponent中otherService将会自动获取到OtherService实例。 你可能会比较好奇，Angular是如何实现这种神奇操作的呢？实现的过程简而…"}, {"id": "6844904034952806414", "title": "TypeScript 仅仅导入声明语法", "desc": "在 TypeScript 中，如果导入的模块没有用于任何表达式，TypeScript 将会删除该模块导入。 在正常编译时，TypeScript 将会在编码者毫不知情的情况下舍弃 source-component.ts 文件。待到提测阶段，你可能才会发现问题所在，查找、抱怨之后，…"}, {"id": "6844904048596877320", "title": "使用typescript下的项目架构最佳实践", "desc": "此文章记录下在 typescript 项目里的一些相关配置和包的选用，其中各种依赖包和最佳实践都在不断发展演变中，最新的配置以该仓库 MVVM 为准。 在webpack中使用 babel 7.0 +,摒弃了传统的 ts-loader 或 awesome-typescript-l…"}, {"id": "6844903729347592199", "title": "ts学设计模式: 第一篇: 单例模式", "desc": "单例模式: 确保一个类只有一个实例, 并且提供一个全局访问的方法, 属于创建型模式。 测试代码不变。 单例模式的目的: 确保只有一个类的实例出现, 并提供一个全局访问的方法。 单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时…"}, {"id": "6959490789688737805", "title": "typescript", "desc": "TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 TypeScript 提供最新的"}, {"id": "6979477094380077064", "title": "Typescript 最佳入门实践", "desc": "Typescript 最佳入门实践。 为什么要使用 Typescript？程序更容易理解-代码即全部注释；效率更高；更少的错误；非常好的包容性"}, {"id": "6897089356457541640", "title": "【译】typescript：type vs interface", "desc": "本文作者：cjinhuo，未经授权禁止转载。翻译自：TypeScript:typevsinterface你只能使用type来给基础类型关键字定义别名不能使用interface来声明元组互斥联合类型只适"}, {"id": "6922784306838372366", "title": "TypeScript中的private、protected", "desc": "首先我们要清楚 private 、 protected 现阶段只是javascript中的保留字(Reserved words)，而非关键字(Keywords )。因此TypeScript中的纯类型声明语句，编译后都会被擦除。 TypeScript是一个结构类型语言。当比较两个…"}, {"id": "6948682414394884126", "title": "react如何实现泛型组件", "desc": "泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性，主要在用typescript时可以实现类型推导，不需要人为的每个地方去约束类型。 在实现react组件时，有时候我们也想通过泛型来定义某个属性的类型。比如常见的列表…"}, {"id": "6989437943039393805", "title": "ts在对象中取值报错", "desc": "20年工作记录-1，css样式以及ts报错问题 20年工作记录-1，css样式以及ts报错问题 20年工作记录-1，css样式以及ts报错问题"}, {"id": "6854573212127199245", "title": "TypeScript + React最佳实践 - 第三节：Service类型化（1） - sm2tsservice技术方案介绍", "desc": "TypeScript + React 类型安全三件套：Component、Redux、和Service类型化。 业务逻辑里需要明确的就是，接口定义里入参和响应数据主体的类型。 从前边的例子，可知 Service 类型化真正的痛点在于基于接口文档手写 TypeScript 代码，…"}, {"id": "6953622766700462117", "title": "装饰器 vs 注解", "desc": "装饰器原理解析 在 Typescript 中，装饰器分为五种： 类装饰器 类方法装饰器 访问器装饰器 参数装饰器 属性装饰器 这些装饰器可以用来修改类的行为，也可以添加 MetaData，实现注解的功"}, {"id": "6844903777359626248", "title": "TypeScript: 一些使用的小技巧 ", "desc": "Object.keys()返回 keys 的数组，Object.values()返回 values 的数组。 需求1：处理这样的对象中的 value 值,拼接成一个字符串。 需求2：需要处理一个 object 中的 values 返回一个新的对象。"}, {"id": "6844903509737865230", "title": "用TypeScript编写发布函数库", "desc": "代码库在发布之后，使用者可能期望能以各种方式来使用库，如直接在浏览器中加载使用、通过NodeJs的CommonJS模块方式来引用代码库、或者直接通过ES6的module方式来引用。 下面分别介绍以上几种不同使用情景下的编译过程。 目前前端开发库绝大部分都会发布到npm上，npm…"}, {"id": "6844904024005672968", "title": "code-server 是如何把 vscode 搬到浏览器的", "desc": "其中 cert 参数做了自签名证书处理，我猜测是为了安全考虑吧。。"}, {"id": "6978844288914292743", "title": "解读 TS 的配置文件 ", "desc": "tsconfig.json 是 TypeScript 的配置文件，可以使用 tsc --init 命令初始化，本篇文章会按照这个命令生成的配置顺序进行解读。 ps: TypeScript 版本是 4."}, {"id": "6844903571259916302", "title": "2018 如何玩转 JavaScript", "desc": "从命令行工具和 webpack 到 TypeScript 和 Flow 等，让我们来谈一下在 2018 年如何玩转 JavaScript。"}, {"id": "6844903510631251975", "title": "使用 Typescript 踩 react-redux 的坑", "desc": "然后竟然没想到在项目刚开始就深陷大坑--搭建react-redux项目流程，一下内容就是记录我是怎样从这个深坑中爬出来的过程。 从项目创建之后就掉坑里了。。。 然后就开始报错了。。。 哇心态爆炸，都不知道怎么写这个断言。。。然后我想起了antd的一个例子，写的是React.Re…"}, {"id": "6850418120616738823", "title": "typescript 简明教程", "desc": "TypeScript 是 JavaScript 的类型的超集，其增加了代码的可读性和可维护性，它会进行静态检查，如果发现有错误，编译的时候就会报错（虽然会报错了，但还是会生成编译结果）。 和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型…"}, {"id": "6938004124835250212", "title": "React工程接入TypeScript实践", "desc": "网上看了一下,项目中引入ts共有三种方案，@babel/preset-typescript这个库也被create-react-app脚手架所集成，这种方案的话只用babel插件把ts文件直接替换成js"}, {"id": "6844903917088669710", "title": "大规模应用TypeScript「2019 JSConf -Brie Bunge」", "desc": "这是一个由 simviso 团队对 JSConf.Hawaii 中关于大规模应用Typescript相关话题进行翻译的文档，内容并非直译，其中有一些是译者自身的思考。分享者是Brie Bunge，Airbnb高级前端工程师。 大家好，我的名字是 Bree，我在 Airbnb 工…"}, {"id": "6980349249233879071", "title": "TypeScript学习", "desc": "0, 简介，优点 1，安装和查看 2, 语法检查 3,基础数据类型 4, 函数 声明函数参数的过程中，有三种情况： 1， 可选参数： 2，默认参数 3，形参多个 函数定义方法 1, 函数声明法 2，函"}, {"id": "6867538991073296392", "title": "使用 TypeScript 模板字符串类型", "desc": "在今天的早些时候，Anders Hejlsberg 在 TypeScript 的仓库中发了一个 Pull Request：Template string types and mapped type as clauses。这个特性估计会在 4.1 版本中可用。 具体给 TypeS…"}, {"id": "6971623428474290207", "title": "TypeScript+Rollup快速构建JS-SDK", "desc": "基于typescript-library-starter （它是一个开源的 TypeScript 开发基础库的脚手架工具），快速初始化一个 TypeScript 项目，打包成js-Sdk."}, {"id": "6844903496341258254", "title": "教程 - 使用 TypeScript 构建 Node.js 应用", "desc": "这篇文章将会告诉您，怎样编译、构建、测试以及调试使用 TypeScript 开发的 Node.js 应用。为此，我准备了一个示例工程， 您稍后可以查看源码。"}, {"id": "6980313772921962503", "title": "前端工程化 -- ReactNative项目升级Typescript", "desc": "工作中会遇到很多恶心的问题，但是解决恶心问题的能力是高级工程师必须的。主要讲述把ReactNative项目升级为纯ts项目时对项目做的一些优化如删无用文件、调整目录结构等"}, {"id": "6844903701514043400", "title": "防抖和节流的应用场景和实现", "desc": "防抖就是将一段时间内连续的多次触发转化为一次触发。 原理很简单，主要是判断是否到达等待时间，如果没到达的话就继续加入任务队列等待执行。使用方法： 返回一个执行器的原因是这样可以方便获取最后一次函数执行时返回的值。 节流顾名思义则是将减少一段时间内触发的频率。 可以将一些事件降低…"}, {"id": "6844903871223955463", "title": "Typescript 为什么选择她", "desc": "近3年，这家伙很火。🔥 到什么程度？一度没朋友，一度让我心头热了（冷笑话）。 就我来说，我还是一个不太理性的前端，截止到今年，看到哪门语言火热就去凑个热度，然后学学就丢了。3月份加入掘金，就暗暗给自己作了一个规划前端知识沉淀。其实也是在自我约束，约束那颗散漫（懒散又漫无目的）…"}, {"id": "6844903607821664270", "title": "React-Typescript 单元测试：Jest + Enzyme", "desc": "按道理说官配用起来会更舒服才是，结果接连碰壁，加上雷同情况的资料确实有点少，只能填一下。 0. 目前遇到的问题 首先脚手架肯定不是cra（cra用户请直接用官方封装的测试就行），我们肯定会使用自己定制的脚手架。当我们在选用Jest做单测时，出现了几个问题： 第二点简直硬伤，直接…"}, {"id": "6969961927250280455", "title": "TypeScript 重学之—实战笔记", "desc": "这是我参与更文挑战的第4天，活动详情查看: 更文挑战 1, 实战前奏 实例属性必须通过实例去访问 静态属性必须通过类去访问 构造函数：在 new Person()的时候，constructor执行 在"}, {"id": "6844903799287447565", "title": "一文学懂 TypeScript 的类型", "desc": "如果你认为这段代码非常神秘 —— 那么我同意你的意见。但是（我希望证明）这些符号还是相对容易学习的。一旦你能理解它们，就能马上全面、精确的理解这种代码，从而无需再去阅读冗长的英文说明。 TypeScript 有一个在线运行环境。为了得到最全面的信息，你应该在 “Options”…"}, {"id": "6844903715938238472", "title": "巧用 TypeScript（三）", "desc": "此时，TypeScript 能推出 a 的类型是 A, b 的类型是 B。 我们期望它会如预想时那样工作，可是事与愿违，Promise.all(requestList)，会出现类型兼容性的报错，在这个 Issues 里，描述了相同的问题。 在 JavaScript 基础上，Ty…"}, {"id": "6844903792194879502", "title": "为你的 JavaScript 项目添加智能提示和类型检查", "desc": "最近在做项目代码重构，其中有一个要求是为代码添加智能提示和类型检查。智能提示，英文为 IntelliSense，能为开发者提供代码智能补全、悬浮提示、跳转定义等功能，帮助其正确并且快速完成编码。说起来，JavaScript 作为一门动态弱类型解释型语言，变量声明后可以更改类型，…"}, {"id": "6966788831831916552", "title": "Typescript", "desc": "typescript的学习记录，对于怎么直接去使用.ts文件，而不是去通过，tsc编译得到.js文件后再node去运行。"}, {"id": "6982807704616042526", "title": "typescript深入理解系列之泛型： 表单填写", "desc": "到底什么是泛型呢？如何理解一开始不指定后续再指定类型呢？它到底有什么用呢？本文从表单填写的理解带你加深理解泛型。"}, {"id": "6992985810001723400", "title": "TypeScript学习(十五)：模块 | 八月更文挑战", "desc": "import side effect 一些模块会有建立被其他模块使用的全局状态。这些模块没有任何的导出语法，或者使用时不关心模块中的导出内容。此时，可以使用如下语法： import types imp"}, {"id": "6974968647689175071", "title": "TypeScript上手04 类的理解再也不用担心了", "desc": "这是我参与更文挑战的第4天，活动详情查看更文挑战 前端在在使用js的时候已经对类有了一定的认识,那我们在转为使用TypeScript的时候又该怎么理解和使用TypeScript里面的类呢? 1 类的基"}, {"id": "7001720162164408327", "title": "聊聊 Typescript 中如何更好地实现多继承与类型推断", "desc": "前言 最近由于在设计一个sdk，想用搭积木的方式，把不同功能拆分模块，在使用的时候让一个class 通过混合的方式获得不同的功能，于是就开始了对js 多继承的研究。 在实现了多继承之后，又因为用了 t"}, {"id": "7005870555123417124", "title": "typescript怎么根据传入的参数判断函数的返回类型", "desc": "你会发现，这根本判断不出来，func 的返回值无论如何都是 any，因为 typeof param 在编写的时候就已经被 typescript 判断了，"}, {"id": "6998038784361103390", "title": "Typescript 凭什么可以和 JavaScript 并肩作战(1)—TypeScript 对类的支持", "desc": "在面向对象编程中，最核心的就是 class 概念，Typescript 中类继承(extends)和实现(implement)的区分给出解释和说明。"}, {"id": "7000272843757846535", "title": "What's new in TypeScript4.4 🤪", "desc": "TypeScript每次小版本更新都会新增不少特性，也会有一些breaking changes。TypeScript4.1到现在更新围绕模版字符串类型以及type narrowing相关比较多。"}, {"id": "7000182870404759589", "title": "TS入门篇 | 详解 TypeScript 类类型", "desc": "“这是我参与8月更文挑战的第16天，活动详情查看： 8月更文挑战” 传统的面向对象语言都是基于类的，而JavaScript是基于原型的。在ES6中拥有了class关键字，虽然它的本质依旧是构造函数，但"}, {"id": "6844904185838698503", "title": "让人眼前一亮的 10 大 TS 项目", "desc": "TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECM…"}, {"id": "6994617648596123679", "title": "Vue 中的 defineComponent", "desc": "defineComponent 本身的功能很简单，但是最主要的功能是为了 ts 下的类型推到。本文详细分析下其实现，怎么做到类型推导的"}, {"id": "7001047557522604040", "title": "那些年我不知道的typeScript中的问题~", "desc": "前言 学习ts是去年小程序项目里第一次尝试使用，公司的领导们经过商量讨论觉得有必要去使用ts在开发中，正好新开了一个小程序的项目，使用MPX进行搭建，以前没有接触过ts看官方文档，被那么多特性吓尿了，"}, {"id": "6999804146148704263", "title": "TS入门篇 | 详解 TypeScript 接口类型", "desc": "在JavaScript中，我们似乎很少听说接口这个概念，这是TypeScript中很常用的一个特性，它让 TypeScript 具备了 JavaScript 所缺少的、描述较为复杂数据结构的能力。下面"}, {"id": "6950052678927908901", "title": "TypeScript趁早学习提高职场竞争力", "desc": "TS：以JavaScript为基础构建的语言；可以在如何支持JavaScript的平台中执行；一个JavaScript的超集，TypeScript扩展了JavaScript，并添加了类型."}, {"id": "7001087988159479839", "title": "Canvas钢琴琴键弹起来", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 。本次可以通过键盘按键来操纵钢琴，并且88键都有不同的音效"}, {"id": "6998690233067765796", "title": "TS入门篇 | 详解 TypeScript 函数类型", "desc": "在 JavaScript 中，函数是构建应用的一块基石，我们可以使用函数抽离可复用的逻辑、抽象模型、封装过程。在TypeScript中，函数仍然是最基本、最重要的概念之一。下面就来看看TypeScri"}, {"id": "6996654736652894222", "title": "[点线面Vue3]把模板语法这条线串起来！（包含学习新技术的方法论）", "desc": "本文字数：5570，阅读完全文大约要花费25分钟。 我把一个初学者学习新技术分成3个大阶段8个小阶段，分别是： 阶段一：入门和熟悉 先用起来：从一个工作多年的Vue初学者角度学习Vue3：初识Vue组"}, {"id": "6875091047752400910", "title": "细数 TS 中那些奇怪的符号", "desc": "本文阿宝哥将分享这些年在学习 TypeScript 过程中，遇到的 10 大 “奇怪” 的符号。其中有一些符号，阿宝哥第一次见的时候也觉得 “一脸懵逼”，希望本文对学习 TypeScript 的小伙伴能有一些帮助。 好的，下面我们来开始介绍第一个符号 —— ! 非空断言操作符。…"}, {"id": "7002155265332084773", "title": " tsconfig.json 配置：如何定制 TypeScript 的行为？", "desc": "tsconfig.json 是 TypeScript 项目的配置文件。如果一个目录下存在一个 tsconfig.json 文件，那么往往意味着这个目录就是 TypeScript 项目的根目录。"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "7005376185278414861", "title": "TS-元组转换为对象", "desc": "TS-元组转换为对象 题目链接 传入一个元组类型，将这个元组类型转换为对象类型，这个对象类型的键/值都是从元组中遍历出来。 例如： 一、关键词说明 元组 元组官方链接 在 TypeScript 中，元"}, {"id": "6923379384002805774", "title": "向微软官方贡献 @types 包后引发的思考", "desc": "在前端社区中，TypeScript 差不多是老生常谈的主题了。这不仅反映了 TypeScript 的流行度，也反映了它的学习上手成本。今天我们不来探讨 TypeScript 本身。而是记录一下我艰难地发布一个 @types 包的历程。 上图是我在掘金的第一篇文章 优雅地使用 T…"}, {"id": "7000932294001164319", "title": "得泛型者，得TypeScript", "desc": "开始使用ts,但是泛型一直弄得糊里糊涂，汇总一些常见用法，窥探泛型工具类的实现原理，使其理解更加深入 一、泛型基础 1、泛型定义的理解 泛型 , 用来在代码执行时传入的类型，来确定结果, 即 泛型就是"}, {"id": "6856410900577026061", "title": "从零开始配置 TypeScript 项目", "desc": "本文是算法与 TypeScript 实现中 TypeScript 项目整体的环境配置过程介绍。主要包括了以下一些配置内容： 如果你对以上的某些配置非常熟悉，则可以跳过阅读。如果你不清楚是否要继续阅读其中的一些配置信息，则可以通过工程问题来决定是否要继续阅读相关的内容。 算法与 …"}, {"id": "6915043435796201480", "title": "TS学习笔记（Five Day）", "desc": "TS学习（TS类）TS类类的属性和方法：有静态属性，成员属性，构造函数，静态方法，成员方法；编译后的es5代码私有字段每个私有字段以#开头，每个私有字段名称都唯一地限定于其包含的类不能在私有字段上使用"}, {"id": "6844903698364121101", "title": "Webpack3.X升级到4.X多页面实战和构建优化", "desc": "Webpack4.x出来也有一段时间了，网上已经有很多关于Webpack4.x原理和新特性的介绍，比如零配置等，这边就不重复了。 最近将之前基于Webpack3.x写的一个多页面项目升级到4.x，记录和总结Webpack3.x升级到4.x遇到的问题以及解决方案。 区分3.x和4…"}, {"id": "6948389912970264613", "title": "typescript编译工具和代码检查工具(TSLint和ESLint)", "desc": "1. ts-loader 2. awesome-typescript-loader"}, {"id": "6935414728088879141", "title": "你能做对这几道TypeScript练习题吗", "desc": "这样一来，TS 就会推断出swap(123, 'hello')的返回值类型是[string, number]了。 这样一来就达到题目的要求了，其中用了辅助泛型Omit。 每个响应数据都有成功和失败的状态，成功时返回的是 data，失败时返回的是 error，error 的类型都…"}, {"id": "6844904144570941448", "title": "TypeScript 面向对象程序设计（OOP）", "desc": "在 JavaScript 中 ES6 之前我们使用函数（构造器函数）和基于原型来创建一个自定义的类，但这种方式总会让人产生困惑，特别是习惯了 Java、PHP 等面向对象编程的同学来说更加难以理解。 面向对象编程的基本单位是对象，但对象又是由类实例化的，所以我们第一步需要先知道…"}, {"id": "6844903776625623054", "title": "Typescript 代码整洁之道", "desc": "适用于 Typescript 的代码整洁之道。 受到 clean-code-javascript 的启发。 软件工程原理，源自 Robert C. Martin's 的书 适用于 TypeScript。 这不是风格指南，它是在 TypeScript 中生成 可读，可重用和可重构…"}, {"id": "6844903513990889480", "title": "VS Code 折腾记 - (10) 你想发布自己捣鼓的snippets到VSCode插件市场!", "desc": "趁着周六日的空闲时间,了解了下vscode插件或者代码片段的发布套路. 本来找下GG有啥文章前人走过的文章,最后似乎木有,那就只能自己摸索了. 从官方文档入手!!实践出真理.... 学会这个,你能收获什么?见仁见智... 但是起码你知道怎么发布了,且对 npm的package.…"}, {"id": "6847902215399538695", "title": "还在犹豫学不学TS? 肝就对了╮(￣▽￣)╭", "desc": "「在 TypeScript 中，任何类型都可以被归为 any 类型。」 用来表示类型是不确定的, 如果U的类型可以表示T, 那么返回X, 否则Y. 「a 可以赋值给 Words 类型，所以 WA 为 true，而 d 不能赋值给 Words 类型，所以 WD 为 false。」…"}, {"id": "6973623129704759303", "title": "Typescript多字段映射枚举支持TS签名，强迫症的福音", "desc": "enummapping 由于 typescript 的枚举只有 key code 的两者关联，而实际使用远远不止，还有有 label 甚至更多字段的关联。 以下方法、属性使用均有 typescript"}, {"id": "6871892655471591437", "title": "关于 Typescript+ESLint+React 项目中 FunctionComponent 的冲突问题", "desc": "issue 里有老哥建议使用传统的 function 关键字声明函数组件，但我们如果想要使用箭头函数带来的便利，这样的方法就行不通。有不少讨论者也希望能够保留箭头函数的形式，其中有人提出这样的写法可以避免报错："}, {"id": "6854573208776114184", "title": "TypeScript实现图的遍历", "desc": "有一个图，我们想访问它的所有顶点，就称为图的遍历。遍历图有两种方法：广度优先搜索和深度有优先搜索。 图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通。本文将详解图的两种遍历并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 本文重点讲解图遍历…"}, {"id": "6844904057614630920", "title": "TypeScript真香系列-枚举", "desc": "TypeScript真香系列的内容将参考中文文档，但是文中的例子基本不会和文档中的例子重复，对于一些地方也会深入研究。另外，文中一些例子的结果都是在代码没有错误后编译为JavaScript得到的。如果想实际看看TypeScript编译为JavaScript的代码，可以访问Typ…"}, {"id": "6844903918527315975", "title": "TypeScript中的面向对象编程", "desc": "一直到今天对于JavaScript是否是面向对象的语言定论仍然没有一致的结果，因为JavaScript(ES5)中没有类的概念，而是直接使用对象来实现编程，使用原型来实现继承，一种基于对象和事件驱动的弱类型动态语言。由于这些不一而足的缺点，微软推出了JavaScript的超集语…"}, {"id": "6844904165374689287", "title": "数组实现栈与对象实现栈的区别", "desc": "栈作为一种数据结构，它可以应用在很多地方，当你需要经常获取刚存放进去的数据时，那么栈这种数据结构将是你的首选。 栈的实现方式一般有两种：数组实现和对象实现，这两种实现方式最终实现的功能都是一样的，但是在性能上却有着很大的差别。 本文将详细讲解这两种实现方式的差异并用TypeSc…"}, {"id": "6955684347424800798", "title": "四两拨千斤——你不知道的VScode编码TypeScript的技巧", "desc": "如果你体验过JAVA这种强类型语言带来的便利，包括其丰富的类型变量、抽象与接口，转而使用JavaScript一定会觉得不够满意。尤其是JavaScript声明的变量Number可以轻而易举的分配给St"}, {"id": "6844903861598027789", "title": "TypeScript 代码整洁之道", "desc": "将 Clean Code 的概念适用到 TypeScript，灵感来自 clean-code-javascript。 这不是一份 TypeScript 设计规范，而是将 Robert C. Martin 的软件工程著作 《Clean Code》 适用到 TypeScript，指…"}, {"id": "6844903871337201678", "title": "Typescript 精彩履历", "desc": "兵法云：知己知彼，百战不殆（语出《孙子·谋攻篇》）（一个前端开始聊兵法，瞎搞，凑字数）。引用此主要想说，要用我就先看看我漂亮的履历吧。 我是 Microsoft 公司注册商标（来头大，后台硬）。 我是 JavaScript 的一个超集，主要提供类型系统和对 ES6 的支持。 我…"}, {"id": "6844903507066093575", "title": "教你用Vue渐进式搭建聊天室，从JavaScript=>TypeScript", "desc": "希望能给大家一个渐进学习的经验。 关于TypeScript的基本知识，可以直接看xcatliu整理的教程，简单易懂，有Java/C#基础就可快速上手。"}, {"id": "6844903703510515719", "title": "10分钟了解react引入的hooks", "desc": "“大家好，我是谷阿莫，今天要将的是一个...”，哈哈哈，看到这个题我就想到这个开头。最近react 官方在 2018 ReactConf 大会上宣布 React v16.7.0-alpha(内测) 将引入 Hooks。所以我们有必要了解 Hooks，以及由此引发的疑问。 当然，…"}, {"id": "6917600383615369230", "title": "TypeScript入门：抽象类和多态", "desc": "多态：在父类中定义一个方法，在子类中有多个实现，在程序运行的时候，根据不同的对象执行不同的操作，实现运行时的绑定。"}, {"id": "6910976327759691789", "title": "简单构建一个TypeScript转JavaScript脚本", "desc": "废话不多说,上码😁... target:目标文件语言规范. module:目标文件模块规范. declaration:是否附带d.ts类型描述文件. moduleResolution:支持node路径模块查询方式. baseUrl:路径前缀. rootDir:源文件根路径. …"}, {"id": "6844903545720799245", "title": "Bright UI v0.1.0：一套简约优雅的React组件库", "desc": "基于TypeScript构建，已包含常用组件，并且持续更新中。"}, {"id": "6844903830455320584", "title": "Typescript学习笔记（二）", "desc": "在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。 我们需要一种方法使返回值的类型与传入参数的类型是相同的。 这里，我们使用了 类型变量，它是一种特殊的变量，只用于表示类型而不是值。 我们…"}, {"id": "6844903638238756877", "title": "深层属性，轻松提取", "desc": "实际开发过程中可能因为比如节省资源的考虑，当用户未进行过设置时，它的 notification 或者更深的某一级的值是 null 或 undefined，而非对象。 经验丰富的开发者都知道，这样做的缺点很多，在此就不展开了。 属性的路径被写成了字符串，开发者无法获得 IDE/编…"}, {"id": "6921154890328702989", "title": "Typescrit从入门到放弃系列(六)-接口", "desc": "接口可以在面向对象编程中表示行为的抽象，也可以描述对象的形状。 接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。 (接口中不能含有具体的实现逻辑) 这里先来强调一下抽象类和接口的区别,抽象类中可以包含具体方法实现。接口中不能包含实现"}, {"id": "6844903871752437773", "title": "y轴数据变换利器——yaxis-transformer", "desc": "yaxis-transformer已经发布到npm, 点击查看源码, 欢迎star。 前不久笔者分享过y轴数据处理方案的基本思路，当时需求比较紧张，苦于没有时间去整理代码。现在刚好空闲下来，回头看看之前的代码，发现存在几个问题：业务侵入性太强， 定制化能力太弱和方案设计不够合理…"}, {"id": "6844903805964795911", "title": "【译】TypeScript 的类型（一）", "desc": "JavaScript 很酷。但是你知道比JavaScript更酷的是什么吗？ 是Typescript。 看到红色下划线了吗？这是Typescript给我们的错误提示。 你可能找到这个错误了—— toUpperCase() 是 字符串类型的方法。我们把一个整数作为参数传入，不过整…"}, {"id": "6844903641145409543", "title": "@angular/forms 源码解析之双向绑定", "desc": "我们知道，Angular 的 @angular/forms 包提供了 NgModel 指令，来实现双向绑定，即把一个 JS 变量（假设为 name）与一个 DOM 元素（假设为 input 元素）进行绑定，这样 name 的值发生变化，input 元素 的 value 也会自动…"}, {"id": "6844903913330573319", "title": "大规模应用TypeScript「2019 JSConf -Brie Bunge」（上）", "desc": "大家好，我的名字是 Bree，我在Airbnb工作。众所周知，在大公司中进行大的改革很难。这需要去说服很多人，同时又需要涉及大量的代码迁移。我想要与大家分享我们是如何将 TypeScript 应用到 Airbnb 这个公司的日常开发中的。 我很感谢你们能在这里，我知道你们完全可…"}, {"id": "6904873961314598925", "title": "TypeScript 新特性介绍", "desc": "用来建立某种代码约定，使得其他开发者调用某个方法或者创建新的类时必须遵循接口所定义的代码约定。 模块可以帮助开发者将代码分割为可重用的单元。开发者可以自己决定将模块中的哪些资源（类、方法、变量）暴露出去提供外部使用，哪些资源只能在模块内使用。 为程序的元素（类、方法、变量）加上…"}, {"id": "6844903729297096712", "title": "TypeScript重写设计模式库的搭建", "desc": "js 的设计模式是经常使用的,但是最近在转 ts,所以就打算用 ts 重写 js 的设计模式. 说是重写其实也是模仿. 使用 jest 测试的原因是使用和配置相对简单,并且支持 ts 文件(不需要编译成 js 文件后测试),也是 react 的推荐测试框架(毕竟 faceboo…"}, {"id": "6844903669301772295", "title": "浅谈 TypeScript - 使用类编写一个有趣的动画", "desc": "除了 TypeScript 本身的特性之外，我们又回到了前端最本质的工作上，在没有使用现代 Web 前端框架的情况下，我们要做一个类似抽屉柜一样的效果。 两周之后，产品 小向 跟 小明 说很希望在列表的旁边做一个类型抽屉柜的效果，将原来的个人信息，放置在这个抽屉柜中，这样来说用…"}, {"id": "6844903916967034894", "title": "大规模应用TypeScript「2019 JSConf -Brie Bunge」（下）", "desc": "这听起来很棒！ 但对于我们的初步提案，还有很多问题和疑虑。让我们来对TypeScript进行更深入的了解。 我们的主仓库依赖了一些我们内部的NPM包。为了获得自动完成和类型检查的能力，我们需要先将它们转换成TypeScript，这样做是否值得？ 这也是我们目前面临的困境，我们的…"}, {"id": "6844903839166889998", "title": "相对时间表达式 —— 解决相对时间序列化的问题", "desc": "平时开发监控系统时免不了与时序数据库的查询打交道，在查时序数据库时 时间范围 是必不可少的条件，所以在查询的UI展示上通常会将时间范围作为一个独立的组件来让用户交互。 时间范围通常会展示为两种形式：相对时间和绝对时间。对于监控系统来说，日常观察指标、建立看板基本都是使用相对时间…"}, {"id": "6844903799060955150", "title": "袋鼠云 EasyManager 的 TypeScript 重构纪要", "desc": "在 2018 年 Stack overflow 的开发者调查结果中，开发者们最爱的语言一栏中TypeScript 超越了 JavaScript 位居第四"}, {"id": "6898291197271130119", "title": "个人对泛型理解", "desc": "如果是科班出身，对编译型语言有一定了解的话，可以看看这句话，就能初步理解了个大概。 泛型是程序设计语言的一种特性。允许程序员在强类型程序设计语言中编写代码时定义一些可变部分，那些部分在使用前必须作出指明。这里提及的可变部分必须作出声明，typescript 可以自动推断类型，所…"}, {"id": "6844903745533247495", "title": "使用Typescript开发 （一）", "desc": "ES5和ES6中提供了类、模块以及装饰器等等这些特性，其中有些特性已经在Typescript中实现了。而Typescript支持额外的类型注解，所以与Javascript相比，他支持更多语法特性。 看十遍书籍不如手动敲一遍，所以为了能让这些代码运行起来，需要在你的机器装上TS编…"}, {"id": "6844903725115375623", "title": "异步处理方案系列之- generator", "desc": "Generator 函数是一个状态机，封装了多个内部状态，执行一个Generator函数会返回一个迭代器对象，可以依次遍历 Generator 函数内部的每一个状态 调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个 generator 的 迭代器 （iterato…"}, {"id": "6921149967100805127", "title": "Typescrit从入门到放弃系列(五)-类", "desc": "抽象类无法被实例化，只能被继承，抽象方法不能在抽象类中实现，只能在抽象类的具体子类中实现,而且必须实现。"}, {"id": "6949318539710824485", "title": "【Typescript小手册】类型兼容", "desc": "Typescript 的类型兼容指不同的类型的变量可以相互替换和给编译器额外信息来识别具体类型，主要包括： - 变量类型兼容 - 函数类型兼容 - 类型守卫"}, {"id": "6844903985007050765", "title": "Typescript 严格模式有多严格？", "desc": "\"use strict\" 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。 至今，前端er们基本都默认开启严格模式敲代码。 1. Typescript严格模式规则 当Typescript严格模式设置为on时，它将使用 strict族下的严格类型规则…"}, {"id": "6988474824200814605", "title": "TypeScript——模块", "desc": "模块在其自身的作用域里执行，而不是在全局作用域里；这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用export形式之一导出它们。 相反，如果想使用其它模块..."}, {"id": "6991329143992352782", "title": "【TypeScript】001-类型、接口、函数、类", "desc": "原始类型：Number，String，Boolean，null，undefined，Symbol 引用类型：Array，Function，Object TypeScript在ES6的数据类型基础上，新"}, {"id": "6978123055398649892", "title": "优秀装饰器源码学习（一）：time", "desc": "学习一下优秀的装饰器开源库，站在巨人的肩膀上前行，本文一起学习time装饰器的实现与conole.time/timeEnd的模拟实现"}, {"id": "6983576807735820318", "title": "TypeScript——Symbols", "desc": "自ECMAScript 2015起，symbol成为了一种新的原生类型，就像number和string一样。 symbol类型的值是通过Symbol构造函数创建的。"}, {"id": "6879379144275132429", "title": "TS 的装饰器还可以这样用 | 掘金技术征文-双节特别篇", "desc": "近期掘金上有小伙伴问阿宝哥装饰器的应用场景，这让阿宝哥突然萌生了通过优秀的 TS 开源项目，来学习 TS 的想法。 本文阿宝哥将以 Github 上的 OvernightJS 开源项目为例，来介绍一下 如何使用 TypeScript 装饰器来装饰 Express，从而让你的 E…"}, {"id": "6844903693226082318", "title": "如何编写 Typescript 声明文件", "desc": "使用TypeScript已经有了一段时间，这的确是一个好东西，虽说在使用的过程中也发现了一些bug，不过都是些小问题，所以整体体验还是很不错的。 TypeScript之所以叫Type，和它的强类型是分不开的，这也是区别于JavaScript最关键的一点，类型的声明可以直接写在代…"}, {"id": "6881605603135848456", "title": "走近Ts，用了爽，用后一直爽（一）", "desc": "vue3已经发布了，ts的脚步已经阻拦不住了，还只会es6?别想了，人家都已经在行动了，以下是ts的基本系列教程，ts的基本语法，高级语法等，以及在vue项目中如何应用ts，跟着我赶紧撸起来吧。 传递多个时，如果用了剩余参数，就可以把未定义的形参转换为数组。 在程序设计里面，接…"}, {"id": "6844903846859243528", "title": "TypeScript 它不香吗？还不快来！", "desc": "环境到此安装结束。 2. undefined 类型 3. null 类型 null是一个空指针对象，undefined是未初始化的变量，所以，可以把undefined看成一个空变量，把unll看成一个空对象。 默认情况下，undefined 和 null 类型，是所有其它类型的…"}, {"id": "6983581583282274334", "title": "TypeScript——迭代器和生成器", "desc": "当一个对象实现了Symbol.iterator属性时，我们认为它是可迭代的。一些实现了该属性的内置类型有 Array，Map，Set，String，Int32Array，Uint32Array等。"}, {"id": "6993913735081361444", "title": "TypeScript学习(十八)：模块与命名空间 | 八月更文挑战", "desc": "“这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 使用模块 模块包括代码与声明 模块可以提供更好的代码复用，代码隔离与更好的打包工具支持。对于 Node 应用，优先推荐使用模块，而非命名"}, {"id": "6918999203117006862", "title": "前端猛男带你玩转Typescript（上）", "desc": "在开始讲述typescript的语法之前，笔者觉得有必要对typescript的诞生背景进行一定的描述，而这一切都要从编程语言的类型说起。 现有主要的编程语言分为：强类型或者弱类型语言、静态类型或者动态类型。 强类型语言，指的是强类型定义语言，不允许任意的隐式类型转换。 弱类型…"}, {"id": "6857123751205535751", "title": "TS核心知识点总结及项目实战案例分析", "desc": "最近工作一直很忙，复盘周期也有所拉长，不过还是会坚持每周复盘。今天笔者将复盘一下typescript在前端项目中的应用，至于为什么要学习typescript，我想大家也不言自明，目前主流框架vue和react以及相关生态的内部构建大部分都采用了typescript，其原因就在于…"}, {"id": "6992763925284519943", "title": "Vue3 TypeScript 配置 Vuex4", "desc": "目录 ./src/store 。 首先看 ./src/store/index.ts ，这里是整个 store 的入口，里面定义并默认导出了 createStore 方法创建的 store 供整个项目使"}, {"id": "7002530804437876749", "title": "TypeScript日常使用总结", "desc": "最近工作中开始使用TypeScript进行项目开发，在此总结一下自己用过的特性与功能 1.TS有个优点是打出[.]后会有很多智能提示，例如： 先在ts文件中定义state的全局属性： 此后state."}, {"id": "7002030736807034887", "title": "typescript学习笔记——（二）接口", "desc": "你要知道的 TypeScript的核心原则之一是对值所具有的结构进行类型检查。接口的作用就是为类型命名和为代码或第三方代码定义契约或者约束。 接口 什么时候该使用接口呢，先看下面一个示例。 函数pri"}, {"id": "6844903882309500942", "title": "由 shims-vue.d.ts 引发的思考", "desc": "由于项目近期进行 ts 迁移，作为第一个吃螃蟹的人，踩过了不少坑。迁移过程中遇到的大大小小的问题基本上都解决了，但是对于 shims-vue.d.ts 文件的命名以及其内的模块声明始终找不到比较贴切的解释。沉下心来读了些外网资料，总算是有点“豁开云雾见青天”的感觉了。此处就记录…"}, {"id": "6979982683547893796", "title": "TypeScript 每日挑战，你敢来试试吗？", "desc": "其实大多数 TypeScript 开发者，对 TypeScript 的利用，还停留在初级水平。 不信吗？来试试每日挑战吧！ 今日题目 有一个名为 DocType 的 interface，包含一组必填字"}, {"id": "7000666896307585038", "title": "typescript 笔记（一）", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 ts 的前世今生 ts 的全称是 typescript，它是 javascript 的超集。 ts 补充了 javascript 作为弱类"}, {"id": "6922086052027072520", "title": "TypeScript × @ant-design/icons 动态加载与类型提示", "desc": "After: 需要单独引入具体的 IconName 这样的组件, 在 typescript 环境下, import 的只能提示可是比 JSX 的提示要差劲的多了, 更别说还要从 import 部分 cv 好几个 IconName 过来, 并增加 &#x3C;/> 标签这种~~即…"}, {"id": "6844903670350348302", "title": "WEB 前端交流大会", "desc": "2018 西安 Web 前端交流大会将于 9 月 16 日在碑林区南二环西段69号西安创新设计中心大楼举办。"}, {"id": "6844903640981831694", "title": "ThinkJS 中如何实现对 TypeScript 的支持", "desc": "ThinkJS3.0是一款面向未来开发的Node.js框架，内核基于Koa2.0。3.0相比2.0版本进行了模块化改造，使得内核本身只包含了最少量必须的代码，甚至还不足以构成一个完整的WebMVC框架"}, {"id": "6984614633172959245", "title": "react ts 创建过程", "desc": "react 搭建过程，结合typescript ，详解目录结构，小白初学，有不足请弥补，谢谢各位大佬"}, {"id": "6941204708950278180", "title": "万字长文，小白必看-TypeScript 学习笔记", "desc": "TypeScript 会忽略程序中出现的空格、制表符和换行符。 空格、制表符通常用来缩进代码，使代码易于阅读和理解。 | 任意类型 | any | 声明为 any 的变量可以赋予任意类型的值。 | | 数字类型 | number | 双精度 64 位浮点值。它可以用来表示整数和…"}, {"id": "6911890652825387015", "title": "[TS 杂谈](1)Promise.all 优雅的类型声明", "desc": "TS 内置的Promise.all，在lib.es2015.promise.d.ts文件中声明，通过函数重载定义多个泛型进行类型声明的。 而在最新的 TS(4.1.3) 中已经有比较优雅的方法进行声明了，因此这篇文章的作用就是介绍怎么写出比较优雅一个Promise.all类型。…"}, {"id": "6854573211197046791", "title": "TypeScript实现二叉堆", "desc": "二叉堆是计算机科学中一种非常著名的数据结构，由于它能高效、快速地找出最大值和最小值因此常被用于优先队列和堆排序算法。 本文将详解二叉堆并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 一颗完全二叉树，它的每一层都有左侧和右侧子节点(除过最后一层的叶节点),并且…"}, {"id": "6844903599173173255", "title": "用Flow提升前端健壮性", "desc": "很简单，重复上面的步骤，搞清楚result包含的数据，在测试的时候确保其数据跟原先的相同。 ... 没有东西可以在代码层面保证 某个变量，某个函数 跟预期的一致。 Flow是个JavaScript的静态类型检查工具，由Facebook出品的开源码项目，问世只有两三年，是个相当年…"}, {"id": "6844904158328258567", "title": "【译】Typescript 3.9 常用新特性一览", "desc": "1、优化了 Promise.all 的定义，在 3.7 版本中一些混用 null 或 undefined 的时候的问题已经在 3.9 得到了修复。 2、大大的提高了打包速度，微软团队自测的时候 typescript项目的平均编译时间由 26s 缩短到了 10s 左右。 我们知道…"}, {"id": "6977733575537852430", "title": "vue2.x老项目typescript改造过程经验总结", "desc": "前言： 关于Vue2.x 的TS改造，其实没有啥好说的。 对于vue-cli项目来说，从新跑一遍 vue create xxx-project ，选择Manually select features "}, {"id": "6917220355421519885", "title": "大前端进击之路(四)|TypeScript入门基础", "desc": "项目初期，使用TypeScript会增加成本。 语言本身相对于JavaScript多出一些新的概念，增加学习成本。 在当前文件使用export，也就是把当前文件变成一个模块，模块具有单独的作用域。"}, {"id": "6986902512888447007", "title": "记录 typescript 的使用", "desc": "基本使用 定义类型尽量优先inteface，type,内置工具泛型巧用可以减少重复定义，如 ReturnType，Partial，Required，Omit，Pick"}, {"id": "6918628636497018894", "title": "「查漏补缺」进阶的TypeScript", "desc": "先介绍一下tsconfig配置，因为非常有必要，如果没兴趣就可以跳过不看，不过建议看看。 tsconfig配置是通过tsc --init打出来的ts配置文件，如果使用框架脚手架的话就会自带，一般来说80%的人不会配的比脚手架的人更好，但是如果有独特需求，也可以知道去哪里更改。 …"}, {"id": "6988491607385309191", "title": "TypeScript学习(六)：Handbook -> Keyof Type Operator & Mapped Types", "desc": "上篇文章中简单介绍了 keyof 操作符 下方 Keyof 的返回的类型似于 “x” | \"y\" 索引签名 类型中有索引签名的时候，Keyof返回的是 number 类型 有一个特殊现象，由于 JS "}, {"id": "6993865794585100296", "title": "Typescript学习记录", "desc": "Typescript学习 环境配置 需要安装的包： typescript ts-node(可以直接运行ts文件) 注意事项： 用ts-node运行ts文件的时候可能会报 Cannot find mod"}, {"id": "6844904202892738574", "title": "TypeScript学习笔记", "desc": "最新发布的 Vue3 使用了TypeScript。 学习TypeScript之前我们先来了解类型注解这个概念TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。 最基本的数据类型就是简单的true/false值，在JavaScript和TypeScript…"}, {"id": "6988527921778556958", "title": "TypeScript学习(八)：Handbook -> Typeof Type Operator & Indexed Access Types", "desc": "typeof typeof 操作符可以得到一些变量或者属性的类型，但是更多情况下需要与别的操作符一起使用。 ReturnType 的泛型为必须为类型 否则，需要配合 typeof 操作符。因为，泛型参"}, {"id": "6844903907366273031", "title": "TypeScript在react中的实践", "desc": "在动手将TypeScript融合进现有的React项目之前，先看一下create-react-app是怎么做的。 react-scripts-ts是一系列适配器，它利用标准的create-react-app工程管道并把TypeScript混入进来。此时的工程结构应如下所示： t…"}, {"id": "6844904052816347149", "title": "分享快速搭建 Node 端 TypeScript 开发环境", "desc": "本文分享笔者使用 TypeScript 编写运行 Node 应用的一些些经验。基本只需要 3 分钟，即可实现 node + ts 的开发环境配置。 比如笔者要用 ts 写个 socket Node 应用。先用 tree 命令看项目结构。 配置 ts 配置 tsconfig。当然…"}, {"id": "6944708786128945189", "title": "超实用的TypeSCript 使用总结", "desc": "很多项目，尤其是中大型项目，我们是需要团队多人协作的，那么如何保证协作呢?这个时候可能需要大量的文档和注释，显式类型就是最好的注释，而通过 TypeScript 提供的类型提示功能我们可以非常舒服地调用同伴的代码，由于 TypeScript 的存在我们可以节省大量沟通成本、代码…"}, {"id": "6844903668039286797", "title": "一次TypeScript, React, Node, MongoDB的模板式前后端分离开发实践", "desc": "在大概1年前接触了typescript之后, 日渐被它所吸引. 甚至一个简单的本地测试文件node ./test.js有时也会切到ts-node ./test.ts. 在同样的时间节点之前, 还是会不时地去学学node, mongodb相关的. 可是, 由于懒(需)惰(求), …"}, {"id": "6844903785320415245", "title": "TypeScript 简明教程：安装 TypeScript", "desc": "通过前一篇文章，相信大家对 TypeScript 有了基本的了解，对 TypeScript 的价值也有了一定的认识。不过，光说不练假把式，本节我们学习如何搭建 TypeScript 的开发环境。 从安装结果我们可以看出，以上命令在全局环境下安装了两条命令：tsc 和 tsser…"}, {"id": "6844904017957486599", "title": "Vue & TypeScript 初体验 - TypeScript中的Interface", "desc": "在这两篇中, 主要介绍了在vue 2.x版本中使用TypeScript面向对象编程时, 一些在编写Vue组件时语法上的变化. 以及使用Vuex时一些变化. 本文主要介绍下, 利用TypeScript语言的特性, 如何有效利用Interface进行面向接口编程. 1. 什么是接口…"}, {"id": "6984313301530312734", "title": "TypeScript Tutorial 中文版 - Section 3. 控制流语句", "desc": "开源的 TypeScript Tutorial 教程中文版，翻译自：https://www.typescripttutorial.net/"}, {"id": "6988051370376953869", "title": "vue3+ts dome学习记录（一）", "desc": "初次接触vue3+ts的学习记录。只记录业务层面的只是，底层原理暂不探究。先学会使用，照葫芦画瓢。。"}, {"id": "6971692753839194125", "title": "使劲卷--TypeScript入门, 数据类型和推断, ts-node直接运行ts文件", "desc": "这是我参与更文挑战的第7天，活动详情查看： 更文挑战 一、初始TypeScript 1.TypeScript定义 TypeScript是JavaScript类型的超集, 简称TS, 包含JavaScr"}, {"id": "6898499829799124999", "title": "TypeScript", "desc": "必须等到运行阶段才能发现一些编译异常。异步 Flow：JavaScript的类型检查器。标记类型注解"}, {"id": "6844903793151180808", "title": "TypeScript从入门到精通", "desc": "当我使用一些常见的前端框架和库，发现现在很多框架和库都已经使用了TypeScript的时候；当我在项目中使用某些库产生了bug，因为时间问题我急着解决问题，自己去找库的bug，然而我发现这些ts编写的文件让我无处下手的时候；当我想看用TypeScript编写的antd desig"}, {"id": "6844903684837474312", "title": "搭建Typescript+React项目模板(5) --- 团队规范", "desc": "这篇文章的每一步都基于vscode这款编辑器，如果你使用的不是vscode，那么就需要自行集成相关插件及其配置。 该文章只是简单介绍各各代码检测的流程，至于配置项则需要读者自行前往对应的lint官网自己查看、配置需要的。 一般在项目中用到typescript作为开发工具的都是大…"}, {"id": "6992385005783613447", "title": "[ts入门03]interface和type", "desc": "interface和type是什么？ interface是接口类型 可以被extend继承(\"Extends and implements\" ) 可以属性合并(\"Declaration merging"}, {"id": "6992224752790143013", "title": "typeScript 基础篇 ｜ 8月更文挑战", "desc": "这是我参与8月更文挑战的第1天，活动详情查看： 8月更文挑战。首先来介绍下什么是 typeScript；根据官方定义，它是拥有类型系统的javascript的一超级，可以编译成纯javascript。"}, {"id": "6844904175491350535", "title": "TypeScript从入门到放弃(一)", "desc": "亲爱的读者们，大家好，我是杨戬，一个在互联网前端苟且偷生的划水程序员，本编文章开始将带你入坑TypeScript。 TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准，TypeScript扩展了JavaScript的语法。 Type…"}, {"id": "6927463792225812487", "title": "讲讲如何实现自动转换ts的import和type-only import", "desc": "又有半年没写文章了，趁着最近不那么忙先来水一篇。恰巧最近给typescript-eslint实现的支持decorator metadata的PR合掉了，那就拿这个写写吧。标题因为不知道怎么取，就拿最终实现的目标写上去了。 先说说做这件事的背景吧。我们公司一小伙苦于项目里的循环依…"}, {"id": "6989230778009780261", "title": "TypeScript学习(十二)：声明合并", "desc": "TS 会合并同名的多个类型声明至一个类型类型结构 TS 声明会创建出包含命名空间，类型与值的实体。命名空间创建声明会创建一个命名空间，可以通过 “.” 符号访问。类型创建声明会创建一个有特定“形状”的"}, {"id": "6989215229649371143", "title": "不写any，0 TS error，你的类型就真的安全了吗？", "desc": "前言 TS能起到错误前置的作用，但是不正确地使用TS就不能保证，下面我们看看经典的不正确使用案例。 1.objArr[index].key 这其实是很危险的，因为一旦报错页面白屏是不可接受的。 那么如"}, {"id": "6844903704177410061", "title": "巧用 TypeScript（二）", "desc": "Decorator 早已不是什么新鲜事物。在 TypeScript 1.5 + 的版本中，我们可以利用内置类型 ClassDecorator、PropertyDecorator、MethodDecorator 与 ParameterDecorator 更快书写 Decorato…"}, {"id": "6989258039165452324", "title": "快速学习Typescript基础知识", "desc": "原始类型 1.string 2.number 3.null 4.boolean 5.undefined 6.symbol object类型 1.object对象 2.Array数组 3.functio"}, {"id": "6962864388671963149", "title": "类的继承与接口", "desc": "继承 普通继承 多态 多态：父类定义一个方法不去实现，让继承他的子类去实现，每一个子类有不同的表现，多态属于继承。 这定义了一个动物，然后猫和狗都继承于动物，但是定义的吃的方法，表现都不一样。 抽象类"}, {"id": "6872022498326609933", "title": "TypeScript实现贪心算法与回溯算法", "desc": "本文将介绍两种算法设计技巧：贪心算法与回溯算法，并用TypeScript将其实现，欢迎各位感兴趣的开发者阅读本文。 贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的解），从而达到全局的最优。 接下来我们通过两个例子讲解下贪心算法。 最少硬币找零问题…"}, {"id": "6855612660973731853", "title": "《重构-代码整洁之道TypeScript版》第三天", "desc": "1. 这是如下我们要实现的目标任务列表（每天进步一点点⏰） 2. Consolidate Conditional Expression（合并条件表达式） 描述🍏：你有一些列的条件测试都得到了相同的结果，你可以将这些测试合并为一个条件表达式，并将这个条件表达式提炼为一个独立的函…"}, {"id": "6844903886210367495", "title": "TypeScript 声明文件", "desc": "可见 declare var 只是定义一个全局变量的类型（不是定义一个全局变量），仅在编译时用于检查，不会存在与编译的结果中。 存放声明语句的文件，叫声明文件，通常格式为 xxx.d.ts。还是拿 jQuery 举例 既然像 jQuery.d.ts 这类很多人都需要的声明文件，…"}, {"id": "6898270313050537997", "title": "TS的高级类型编程", "desc": "4. infer 5. 阅读utility-types的源码 3. ReadonlyKeys 5. FunctionKeys 7. RequiredKeys 9. SetDifference 12. Diff"}, {"id": "6844903651090104333", "title": "开发自己的前端工具库(二)：函数式编程", "desc": "本系列文章将通过自己的一个开发工具库的实战经验(踩过的坑)教大家如何开发属于自己的一个工具库，在这里你可以学到Git的使用规范，基础项目的搭建，代码编写的规范，函数式编程思想，TypeScript实战，单元测试，编写文档和发布NPM包等等知识。 因为函数式编程不会改变外部的变量…"}, {"id": "6844903844606902285", "title": "自己搭建Vue + Vuex + Typescript 项目的使用", "desc": "1. JavaScript的超集 2. 强类型语言 现在很多主流语言都是强类型的，而这点也一直是JavaScript所被人诟病的地方。使用TypeScript之后，将会在代码调试、重构等步骤节省很多时间。 1. Webpack 2. tsconfig.json 3. 修改mai…"}, {"id": "6844904072064008206", "title": "[译]TypeScript 3.8 更新", "desc": "1. 类型导入和导出（Type-Only Imports and Exports） 问题出现的原因是Typescript在引用类型的时候复用了Javascript的import语法。 这样导入doThing和Options很方便，因为大多数情况下我们不关心导入的具体内容，只知道…"}, {"id": "6844903878207799304", "title": "Typescript 类与接口", "desc": "前面章节 Typescript 对象类型-接口，主要讲接口对对象属性的类型描述。 本章说道另一作用，可以说当对象遇到接口，给你不一样的精彩。 通常，一个类只继承另一个类。有时，不同类之间有一些共有的特性，把这些特性提取出来可以提高效率，提取出来的就是接口，用关键字 implem…"}, {"id": "6980631413959688228", "title": "03-TypeScript的类型（1）", "desc": "上一节说了类型声明的语法， 我们接着学习更多的变量类型 字面类型， 举例 any类型， 表示任意类型， 举例 声明变量为any类型， 可以给变量赋任意类型的值。 可以理解为， 声明变量为any类型， "}, {"id": "6855609397197373454", "title": "《重构-代码整洁之道TypeScript版》第4天", "desc": "1. 这是如下我们要实现的目标任务列表（每天进步一点点⏰） 2. Decompose Conditional（分解条件表达式） 动机🍃： 在业务开发中，你必须编写代码来检查不同的条件分支、根据不同的分支做不同的事，然后你就会得到一个相当长的函数，大型函数自身就会使代码的可读性…"}, {"id": "6875132763205271566", "title": "一文快速拿下typescript~", "desc": "never 表示一个从来不会优雅的返回的函数时，你可能马上就会想到与此类似的 void，然而实际上，void 表示没有任何类型，never 表示永远不存在的值的类型。 泛型（在计算机科学中，许多算法和数据结构并不会依赖于对象的实际类型。然而，你仍然会想在每个变量里强制提供约束）…"}, {"id": "6844903696581525517", "title": "为什么 JavaScript 的私有属性使用 # 符号", "desc": "这几天 JavaScript 的私有属性又成为了前端社区热议的话题。原因很简单，这家伙长这样： 而且 TC39 委员会以及对此达成了一致意见，并且该提案已经进入了 stage 3。在 es 规范阶段 stage 3 是候选提案，又很大的可能会进入到下一个标准。到目前为止，已经可…"}, {"id": "6970194473863086117", "title": "泛型工具及实现", "desc": "可实现的泛型工具 Pick 定义 大意：从 T 中挑出一些属性集合 K 来组成新的类型，举个例子： 源码 Exclude 定义 大意：从 T 中剔除一些属性，举个例子： ⚠注意这里 Child 相当于"}, {"id": "6970268609473937422", "title": "Vue2项目中引入TypeScript的一些用法", "desc": "最近项目中引入了TypeScript，这里针对一些用法做一些简单的记录。当然，这里仅仅记录一些常用的用法，具体内容可见官方文档。"}, {"id": "6844903502347501576", "title": "Vue 2.5 中关于 TypeScript 的改变要来了！", "desc": "类型改进 自Vue2.0发布以来，我们一直在收到更好集成TypeScript的请求。从那时起，我们已经为大多数核心库（vue，vue-router，vuex）加入了官方的TypeScript类型声明。然而，当使用开箱即用的Vue API时，目前的集成还是有所欠缺。例如：TypeS"}, {"id": "6985527337144025118", "title": "TypeScript介绍--(TypeScript 01)", "desc": "TypeScript的五个特点 TS是由微软开发的开源编程语言。 TS是JS的超集。（所谓的超集是指兼容了所有的特性） TS是开发大型应用的基石。 TS提供了更加丰富的语法提示。 TS在编译阶段能够检"}, {"id": "6844903503962308615", "title": "Vue + TypeScript 尝鲜体验", "desc": "适用 Vue.version &lt; 2.5 &amp;&amp; Vue.version &gt;= 2.2其实我个人一开始很讨厌 TypeScript 这个东西，就是因为讨厌 Java 的啰里巴嗦，突然在我眼前出现了 JavaScript，便爱上了这门语言。但现在的我稍稍…"}, {"id": "6974651220476723208", "title": "TypeScript上手03 数组类型定义", "desc": "数组类型定义 这是我参与更文挑战的第3天，活动详情查看更文挑战 普通数组类型定义 1. number类型 可以直接写也可以自己定义 2. string类型 3. 可以定义任何类型 4. 数组的元素有多"}, {"id": "6913542796775440397", "title": "TypeScript学习（one day）", "desc": "TypeScript 它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。 它和JS的主要区别在于用于解决大型项目的代码复杂性，可以带编译期间发现并且纠正错误，强类型，支持静态和动态类型，最终会编译成JavaScript代码，…"}, {"id": "6974705078384984078", "title": "TypeScript ｜ 类型断言", "desc": "有使用关键字 as 和标签 <> 两种方式，因后者会与JSX 语法冲突，建议统一使用 as 来进行类型断言。 关键字 as 编译器推断 const user: {}，这是一个没有属性的对象，所以你不能"}, {"id": "6844903711181897742", "title": "中国公民身份证号码验证标准、方案与实现", "desc": "方剑成的博客"}, {"id": "6844903781633622023", "title": "Typesctipt 定义定长列表的类型", "desc": "可以看到当我想对超出限定范围下标的数组元素进行赋值时, typescript 会给我们提示异常. 可以看到,结合元组展开以及交叉类型,我们成功定义了一个长度为50,数组元素为 number 的数组. 回到前言提到的那个棋盘类,我们就可以这样定义一个9x9的棋盘类型了."}, {"id": "6844903630126972936", "title": "TypeScript 数据模型层编程的最佳实践", "desc": "虽然 TypeScript 主要用于客户端，而数据模型的设计主要是服务端来做的。 但是要写出优雅的代码，也还是有不少讲究的。 如果 PostStatus 状态比较多的话，根据喜好可以写成下面的这样。 一开始的时候，由于之前的编程经验的影响，我一上来就搞一个数据类。如下： 这可谓…"}, {"id": "6934317895950434311", "title": "Typescript学习笔记及注意事项", "desc": "ts 用了一年了，回顾起来，也没有那么顺利。趁这两天春节假期有时间，整理了几个自己觉得需要注意的情况，复盘一下。 我上学时学过 java 和 C# ，毕业后又做了两年 C# 全栈开发，对于静态类型语言是有一定经验的。ts 之所以能够慢慢取代 js ，也是因为它是静态类型语言。 …"}, {"id": "6985417495066705933", "title": "07-TypeScript类的概念和类的继承", "desc": "上一章说了TypeScript的对象， 说完对象， 说TypeScript类。 类是对象的模板， 描述了所创建的对象共同的属性和方法。创建一个类的语法是这样 举例 static关键字， 用于定义类的数"}, {"id": "6844903997682237447", "title": "聊一聊 TypeScript 的装饰器", "desc": "针对类的修饰，会接受一个参数即类对象本身，下文通过对类添加静态属性实现。"}, {"id": "6844904161864056846", "title": "拍卖源码架构在拍品详情页上的探索", "desc": "没有想到之前写的一篇一张页面引起的前端架构思考还收到不少同学关注。的确，正如之前在群里所说，一个系统能有一个非常好的架构设计。但是仅仅对于前端项目页面，其实很难把架构一词搬出来聊个天花乱坠。 但是！好的代码结构的组织的确能够避免一些不必要的采坑。当然，这其中也不乏对前端工程师的…"}, {"id": "6877831170990555144", "title": "深入理解TypeScript——文档篇之变量声明", "desc": "使用var的好处：公用变量，作用域下都可以获取到值。 var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，也就是说，var可以在其赋值前被访问（undefined），即使其定义在代码块内。 var定义的变量可以重复定义，并且不会报错，所以会导致变量引用重…"}, {"id": "6858822784542801927", "title": "TypeScript 高级类型，你了解几个？", "desc": "不可否认，如今 TypeScript 已成为一个前端工程师的所需要具备的基本技能。严谨的类型检测，一方面是提高了程序的可维护性和健壮性，另一方面也在潜移默化地提高我们的编程思维，即逻辑性。 那么，今天我将会通过结合实际开发场景和 Vue 3.0 源码中的部分类型定义来简单聊聊 …"}, {"id": "6955486620267053069", "title": "TypeScript 笔记", "desc": "TypeScript 的类型校验是给程序员看的，在编译后不会存在TS代码。 类型注解 有哪些基础类型注解？ 什么是类型注解和类型推断、类型断言？ 类型注解 是显式的标注类型 类型推断 是编辑器根据值来"}, {"id": "6921241905908940814", "title": "TS部分工具泛型和操作符", "desc": "最近开始逐步转向TypeScipt,在学习和开发的过程中，发现使用一些工具泛型可以大大提高开发效率。下面介绍一些常用的工具泛型和具体实现的源码。 工具泛型的实现主要是对类型的操作，这就需要先理解一些TS中的操作符的作用。 keyof 操作符 用于获取某种类型的所有key,返回一…"}, {"id": "6844903886893875208", "title": "理解 TypeScript 类", "desc": "在ES5中，只有对象的概念，对象是通过构造函数创建出来的，构造函数本身也是对象。所以说JavaScript是一种基于对象的语言。 ES6之后，有了class，也就是我们的类，虽然class实质上是 JavaScript 现有的基于原型的继承的语法糖。但我们同样可以借鉴C#语言的…"}, {"id": "6878612979537936398", "title": "深入理解TypeScript——文档篇之类", "desc": "js是基于类的面向对象方式，构建父子类的继承结构，写起来不简洁，也不形象。ts则是以简洁明了的方式实现类的定义、继承、扩展等等。 之前我也提过，js最终会登录浏览器平台，但是至少不是现在，所以在下一个js时代之前，我们需要定ts来规范当前的客户端代码。 使用extends 关键…"}, {"id": "6979129902797127711", "title": "06-其他", "desc": "TS基础--其他的一些东西，然后就是凑字数啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊"}, {"id": "6979129067886870559", "title": "04-TS的函数", "desc": "TS基础--函数：01-函数 02-可选的参数和默认的参数 03-剩余的参数 04-函数重载 凑字数啊啊啊啊啊啊啊"}, {"id": "6844903617703444494", "title": "Angular, 工程之美", "desc": "如果只能用一个词来概括 Angular 的优点，那我会选“工程化”；如果要换个文艺点的词，我会说 “大巧若工，大道至简”。这个诞生于一群 Google 工程师之手的框架，从一开始就打上了鲜明的“工程化”烙印。 什么是工程化开发呢？它是和手工作坊式的开发相对而言的。主要的特征是需…"}, {"id": "6844903741074702344", "title": "巧用 TypeScript（四）", "desc": "在定义泛型后，有两种方式使用，一种是传入泛型类型，另一种使用类型推断，即编译器根据其他参数类型来推断泛型类型。简单示例如下： 它通常与映射类型一起使用，用来实现一些比较复杂的功能。 test 函数将传入参数的所有属性取出来，现在我们来一步一步加工，实现想要的功能。 首先，更改传…"}, {"id": "6978725109401911310", "title": "TypeScript 的 generic 区别是什么？", "desc": "编写一个函数，其中输入的类型与输出的类型相关，或者两个输入的类型以某种方式相关。 让我们考虑一个返回数组第一个元素的函数： function firstElement(arr: any[]) { re"}, {"id": "6844903565345980429", "title": "使用Jest对原生TypeScript\b项目进行UI测试", "desc": "通过官网的Getting started 我们可以在最下方找到 ts-jest 不难理解，我们需要配的其实就是jest加载到什么样类型的文件，使用什么预处理来处理文件。 既然有transform，那我们任何文件都可以通过transform进行预处理了。 如果是js文件我通过ba…"}, {"id": "6911139806303125512", "title": "使用Typescript+webpack实现一个简单的富文本编辑器", "desc": "因为我这里主要使用TypeScript去撸的代码，所以我们首先是由webpack来构建一下我们项目的基本结构。 从思维导图中我们可以看到webpack的配置分为两种模式，开发环境和线上环境，在这里可以通过书写两个文件来实现不同的配置方式，然后在package.json的scri…"}, {"id": "6847902225663000589", "title": "TypeScript从入门到项目实战（基础篇）", "desc": "最近领导让我统一一哈前端技术栈，首个要统一的就是TypeScript，是的，以后我们公司前端开发都要用TypeScript，至于TypeScript的好处嘛，大家随手一百度都能百度到。 于是乎，我从周二开始，利用空余时间写了这篇基础教程（加班？加班是不可能加班的啦，介辈子都不可…"}, {"id": "6922076292871356430", "title": "认识 TypeScript", "desc": "1. 程序更容易理解 2. 效率更高 3. 更少的错误 4. 非常好的包容性 1. 安装 2. 运行 1. 原始数据类型和 Any 类型 2. 数组和元组 3. Interface 接口 4. Function 函数 5. 类型推论、联合类型、类型断言和类型别名 类型别名： 类…"}, {"id": "6844904067836149773", "title": "vue全家桶 + typescript  起手一个后台管理系统", "desc": "在家隔离，把之前的项目框架改改，加入typescript的使用。"}, {"id": "6926085757991911432", "title": "TypeScript - 类与接口", "desc": "相比于类接口的概念要更为抽象一点，我们继续以手机的例子作比。手机作为一个类型，这个类型的实例都是能够打电话、发短信的。因为手机这个类的特征就是打电话、发短信。但是能够打电话不仅仅是手机，以前还有比较常"}, {"id": "6954311488936869925", "title": "TypeScript", "desc": "静态类型与动态类型 在动态语言JS中，变量是没有类型的。而存放在里面的值是有类型的 类型安全：强类型、弱类型（是否允许隐式类型转换：'100' - 50 ，这里其实是可以计算的） 类型检查：静态类型、"}, {"id": "6844903849166110728", "title": "可能是你需要的 React + TypeScript 50 条规范和经验", "desc": "1. 注释 2. 引用组件顺序 3. 引号 4. 缩进 5. 分号 除了代码块的以外的每个表达式后必须加分号。 6. 括号 下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, fina…"}, {"id": "7005829389862567966", "title": "TypeScript DOM类型的声明", "desc": "TS DOM类型的声明 lib.dom.d.ts HTMLInputElement HTMLElement"}, {"id": "6976458717579444237", "title": "🌱vue3只用ref, 12行代码实现\"useAxios\"", "desc": "ref 是 vue3 新增的 api, 他的意义就是单独定义一个可以\"被追踪\"的变量, vue2 中所有变量都需要在data中定义, vue3 中增加了一个setup字段, 在这里我们可以更灵"}, {"id": "6988763249982308382", "title": "「面试题」TypeScript", "desc": "前几个星期在面试。typescript面试题总结。包含了50+道各种复杂的类型推导的题目。大家多多支持。"}, {"id": "6881384600758091784", "title": "这九种常用的设计模式你掌握了吗", "desc": "在软件工程中，设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。根据模式的目的来划分的话，GoF（Gang of Four）设计模式可以分为以下 3 种类型： 1、创建型模式：用来描述 “如何创建对象”，它的主要特点是 “将…"}, {"id": "6998318291420708900", "title": "TS入门篇 | 详解 TypeScript 枚举类型", "desc": "TypeScript 在 ES 原有类型基础上加入枚举类型，使得在 TypeScript 中也可以给一组数值赋予名字，这样对开发者比较友好，可以理解枚举就是一个字典。枚举类型使用enum来定义： 上面"}, {"id": "6998785406619615269", "title": "TypeScript从平凡到不凡（基础篇）", "desc": "由于JS语言本身的局限，难以胜任和维护大型的项目，因此微软在2013年发布了正式版本的TypeScript，使其能够胜任大型项目的开发维护；现在，很多流行的框架和类库都已经转向采用TypeScript"}, {"id": "6998810582690299935", "title": "TS系列篇｜TypeScript基础入门", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 一、TypeScript是什么？ TypeScript 是一种开源语言; TypeScript 也是一种保留JavaScript 运行时行为"}, {"id": "6844904055039344654", "title": "TS 常见问题整理（60多个，持续更新ing）", "desc": "用 React 全家桶 + TS 写项目快一年了，大大小小的坑踩了很多，在此整理了在项目中遇到的疑惑和问题。 体会：不要畏惧 TS，别看 TS 官方文档内容很多，其实在项目中常用的都是比较基础的东西，像泛型运用、一些高级类型这种用的很少（封装库、工具函数、UI组件时用的比较多）…"}, {"id": "6998736350841143326", "title": "TS关键字extends用法总结", "desc": "本文主要整理一下extends关键字在TS中的两种用法，即接口继承和条件判断。文章重点说明extends条件判断在ts中的特殊用法，以及尝试解释一些特殊示例。最后，举例说明extends在高级类型推断"}, {"id": "6997699490064891912", "title": "浅谈 Typescript（三）：两个空间的交流", "desc": "上一篇我们了解了 TS 在「类型声明空间」的行为，那「类型声明空间」的产物是如何约束「变量声明空间」的，「变量声明空间」又能为「类型声明空间」提供哪些信息呢？这就是本篇要讨论的——两个空间的交流。"}, {"id": "6997202777046777893", "title": "TS入门篇 | 为什么学习 TypeScript ？", "desc": "“这是我参与8月更文挑战的第9天，活动详情查看： 8月更文挑战” 一、为什么学习TypeScript？ TypeScript是一门由微软推出的开源的、跨平台的编程语言。它是JavaScript的超集，"}, {"id": "7005457366246244365", "title": "【学习笔记】TypeScript 函数", "desc": "1 函数 函数有两种类型： 命名函数 匿名函数 2 函数类型 函数类型包含2个部分： 参数类型 返回值类型 ts中完整的函数形式是包含参数类型和返回值类型： 2.1 推断类型 在赋值语句左边指定了类型"}, {"id": "6997008649860169735", "title": "从0开始的TypeScriptの十一：模块和命名空间", "desc": "模块 JavaScript先天缺少一项功能：模块， 所以在es6提出的Module模块的概念。命名空间：在代码量较大的情况下，为了避免各种变量命名相冲突而产生的内置模块"}, {"id": "6986157463225499684", "title": "Typescript 实现一个可在 React 项目中使用的简单依赖注入系统", "desc": "什么是依赖注入？在说依赖注入之前，我们发现有个概念叫做 “控制反转”经常一起出现，它们有何区别呢？本文将带你实现一个可在 React 项目中使用的简单依赖注入系统"}, {"id": "6997237723534737422", "title": "TypeScript-函数详解", "desc": "TypeScript日常学习笔记整理，如有不对，希望大家多多指教，同时，我也希望自己的整理的东西，能帮助一些同学，让我们共同进步"}, {"id": "6986890347313889293", "title": "Typescript 在实际开发的应用", "desc": "随着前端技术的发展，老的技术已经不能给大家带来满满的装b感了。 那么前端技术发展，其潮流就是开始拥抱TS。那么我们如何灵活在在项目中使用ts呢，本文就从实用角度来给大家说明一下，项目中该如何使用ts."}, {"id": "6996834929401151525", "title": "搭建一套支持TS的Node运行环境", "desc": "前几天遇到一个批量处理文件的需求，需要用node来实现，由于第一次接触它，没啥经验，又想写TS，于是就搭建了这么一套环境，期间也踩了挺多坑。 本文就跟大家分享下我的实现过程，欢迎各位感兴趣....."}, {"id": "6989063604016250893", "title": "Typescript 边学边练", "desc": "适合对象：“掌握JS，看过TS的，打算加强理解的前端同学” 看完收获：“掌握TS的若干核心知识点；体会类型体操的快乐” 食用姿势： 按题不定期食用（每个题都有涉及到相关知识点） 食用顺序：关键词 ->"}, {"id": "6844904046352941064", "title": "Typescript+Vue大型后台管理系统实战", "desc": "只收藏也不点💖的也一样是耍流氓。 ts香不香这里我就不做过多吹捧了，基础api官方文档有比较清晰的介绍，本篇博客主要分享Vue+typescript+element-ui，后台管理系统实战篇。 ... 本次项目基础框架为Vue，跟正常的Vue项目还是或多或少有不少差距的。众所…"}, {"id": "6997266181082054664", "title": "TypeScript 从集合论的角度理解类型系统", "desc": "0. 前言 在学习和使用 TypeScript 的过程中，有一些问题一直困惑着我： 比如说联合类型与交叉类型在基础类型和对象类型上的不同表现， extends 关键字到底是什么意思等。"}, {"id": "6985424163502571534", "title": "【译】TypeScript的Record类型说明", "desc": "Record 是TypeScript的一种工具类，在版本2.1后，开箱即用 从表面上看，Record创建了一个拥有Keys类型的属性和对应值的Type的对象。有一个能实现相似功能的是使用 索引签名， "}, {"id": "6989610606420557861", "title": "vue3.0 + ts + jsx 实践手札", "desc": "Vue3.0出来后，本人也一直关注和学习 ，以下是本人对vue3.0 + ts + jsx的一些实践手札"}, {"id": "6917830695301677069", "title": "2021年与TypeScript愉快玩耍", "desc": "近几年，前端领域得到了日新月异的发展，各种新技术、框架层出不穷，前端的圈子越来越大。在 Github 的官方统计中，JavaScript 已经连续多年在语言榜上拔得头筹。随着应用越做越大，业务越来越复杂，动态语言自然有其灵活性好的优点，但是同时会因为无法保证合理的类型而引起不必…"}, {"id": "6995551538181570590", "title": "TypeScript系列 --- 函数和字面量", "desc": "函数和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。一个字面量是一个集体类型中更为具体的一种子类型。字面量类型可以通过联合联系、类型守卫、类型别名来结合实际字符串值"}, {"id": "6844904024794202119", "title": "Node.js项目TypeScript改造指南（二）", "desc": "最近笔者把一个中等规模的 Koa2 项目迁移到 TypeScript，和大家分享一下 TypeScript 实践中的经验和技巧。 原项目基于 Koa2，MySQL，sequelize，request，接口加页面总计 100 左右。迁移后项目基于 Midway，MySQL，seq…"}, {"id": "6844903797236449287", "title": "JavaScript 项目迁移到 TypeScript 步骤以及遇到的问题", "desc": "本文讲述了如何将 JavaScript 项目迁移到 TypeScript 上，以及如何在项目中添加 TypeScript 配置，编写 TypeScript 代码。 安装项目所需插件，一般对应的模块都会有对应的 @types 插件可以使用。不知道的是否需要安装对应的 @types…"}, {"id": "6917680537759350797", "title": "跟Vue3源码学习TypeScript", "desc": "TypeScript一直是方兴未艾的前端编程工具语言，它极大的提高了代码的可读性、可维护性。 同时在静态编译能提早暴露出很多问题，比如因不小心写错变量名、传递给函数的参数类型或个数不对、大对象上属性名的获取，很大的提高了开发体验、效率以及测试效率。 目前很多库也都改用TypeS…"}, {"id": "6929370042589151246", "title": "TypeScript（十九）命名空间（上）", "desc": "一、准备工作学习命名空间之前我们先来做一下准备工作，在一个空的文件夹下创建一个新的项目，目录结构为npm init 生成package.jsontsc -init 生成tsconfig.json我们想"}, {"id": "6980621316374315045", "title": "ts不放弃检测的unknown类型", "desc": "unknown，一个神奇的类型，有点像any，但是又不太一样，用官网的说法就是: 翻译成大白话的意思就是：\"unknow\"类型代表任何类型，它的定义和\"any\"定义很像，但是它是一个安全类型，使用\"u"}, {"id": "6932297989591400461", "title": "vue3+typescript实战记录一", "desc": "本文记录一些vue3+ts+less开发过程中的一些小问题。 不断开发、不断更新... 1. 引用.vue文件报错（vue3必须使用.vue后缀？暂时没找到解决方案） 2. .vue文件export导出 要让 TypeScript 正确推断 Vue 组件选项中的类型，需要使用 …"}, {"id": "6994438543779217445", "title": "TypeScript 基础之类型 （1）", "desc": "TypeScript 基础之类型，会慢慢更新，同时也是在学习，如有错误欢迎指出。 这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战”"}, {"id": "6977658976456409095", "title": "类型守卫的改善：别名条件表达式和判别式的控制流分析", "desc": "本系列作为《TypeScript 入门实战笔记》课程（见拉勾教育）的补丁，随时更新。 类型守卫的改善：别名条件表达式和判别式的控制流分析 这是 TypeScript 大佬 ahejlsberg 新近提"}, {"id": "6844903768975212551", "title": "基于 React & TypeScript & Webpack 的微前端应用模板", "desc": "在 Web 开发导论/微前端与大前端一文中，笔者简述了微服务与微前端的设计理念以及微前端的潜在可行方案。微服务与微前端，都是希望将某个单一的单体应用，转化为多个可以独立运行、独立开发、独立部署、独立维护的服务或者应用的聚合，从而满足业务快速变化及分布式多团队并行开发的需求。如康…"}, {"id": "6844903666919407630", "title": "ReactNative仿某租车软件", "desc": "循例都要介绍下React-Native，下面简称RN。 RN是让你使用Javascript编写的原生移动应用。它在设计原理上和React一致，通过声明式的组件机制来搭建丰富多彩的用户界面。 1. 搭建RN环境 其实文档上面写得很清楚，很友好的分了开发平台跟目标平台，基本上按着上…"}, {"id": "6966614976689602591", "title": "ts-migrate - 大规模迁移到TypeScript的工具(译)", "desc": "原文是爱彼迎在ts迁移上的最佳实践分析以及对ts-migrate的介绍，可以从中学习并借鉴ts的迁移经验"}, {"id": "6936006115209510948", "title": "typescript索引签名的参数类型(ts interface使用动态键)", "desc": "类型“number”的属性“page”不能赋给字符串索引类型“boolean”。ts(2411)"}, {"id": "6936508902515638309", "title": "浅谈高效写 type 的几种姿势", "desc": "究其根本，TypeScript（TS）的就是一个关于 Type 的工具，在实践中，我们为数据写好与之对应的数据结构就可以了，之后一系列的事，TypeScript 都会帮我们做好，因此，相对于编程来说，TS真是再简单不过了。 简单在于在框架加持下，我们的脚手架都已经配置好了 TS…"}, {"id": "6973805515365154847", "title": "使用更具可读性的方式来设置 TypeScript 类型", "desc": "TypeScript 提供了一些内置的实用类型，可以更好的方式将类型从一种形式转换到另一种形式。 这些内置的类型全局可用的，所以可以很方便的使用它们。"}, {"id": "6844904013289226254", "title": "约束即类型、TypeScript 编程内参（一）", "desc": "本文是《约束即类型、TypeScript 编程内参》系列第一篇：约束即类型，主要记述 TypeScript 的基本使用和语法。 那么，你了解 ts 吗？类型本质上是对变量的约束，理解类型，首先要理解的是变量的值，然后 ...... 本文是本系列的第一篇约束即类型，面向的是「有一…"}, {"id": "6903717607237517325", "title": "TrueType 入门：基本概念", "desc": "OpenType 是 TrueType 的扩展。本文全流程介绍 TrueType 从字体设计到字体显示的每个步骤，这些步骤同样也适用于 OpenType。 TrueType 字体可能诞生于纸上，也可能从其他格式转换而来。但最终，字体文件中一定包含每个字形的描述信息。下图展示了从…"}, {"id": "6998347146709696519", "title": "TypeScript：一文搞懂 infer", "desc": "不久前曾做了一场分享，希望可以用 md 记录下来，主要是想深入浅出地帮助大家搞懂 TypeScript 中最难的一部分，协变逆变和 infer 以及前置知识。"}, {"id": "6972348468496957470", "title": "构建 Typescript 知识体系(七)-高级类型之交叉类型与联合类型", "desc": "这是我参与更文挑战的第十三天，活动详情查看:更文挑战 TS 的高级类型是，TS 为了保证语言的灵活性，所引用的一些语言特性。这些特性有利于应对复杂多变的开发场景 什么是交叉类型 将多个类型合并为一个类"}, {"id": "6844903892979810312", "title": "TypeScript 入门教程文档（通俗易懂）", "desc": "从 JavaScript 程序员的角度总结思考，循序渐进的理解 TypeScript。 ​在线阅读（部署在 GitBook 上，可能需要翻墙） ​在线阅读（GitHub 版）​ ​GitHub 地址​ 作者：xcatliu​ 官方 QQ 群：加入 QQ 群 767142358​…"}, {"id": "6844904116620115982", "title": "看完这篇还敢说不会TypeScript吗？", "desc": "一篇长文总结 TypeScript 需要掌握的基础，希望对正在学或者想学 TypeScript 的看完这篇文章后的你，会对 TypeScript 有一个初步的理解。 安装完成之后，我们就可以在任何地方执行 tsc 命令了。 这里可以发现，在 ts 文件中使用 : 指定变量类型。…"}, {"id": "6844903959954472974", "title": "TypeScript：又一个终将逝去的青春", "desc": "TypeScript 真的是太火了，伴随着 Vue 3 的登场，三大框架全面支持 TypeScript，全民学习 TypeScript 迎来新一波热潮，娱乐圈正式进入 TypeScript 新时代。 回头一看，娱乐圈像这样的头条还真不在少数，Flutter、微信小程序、ES6 …"}, {"id": "6982965288224440357", "title": "TS 泛型：写一个有提示的发布订阅类", "desc": "前言 常规的发布订阅无论是在类型校验还是在语法提示上都是一大痛点，对于不同的事件名以及传递的参数数据类型，都犹如一个盲盒，对于不熟悉它的人来说，维护它同于维护si山。"}, {"id": "6991469642770284558", "title": "使用TS实现一个可以处理事件的倒计时", "desc": "目标 实现一个倒计时 要点 ts的实际应用 补充： 这么做的好处是什么？ 首先可以实时的开启和停止倒计时 stop的回调函数countdown.on(CountdownEventName.STOP, "}, {"id": "6981114092563988517", "title": "TypeScript 泛型总结", "desc": "1. 泛型是什么？ 官方的定义是： 通俗的解释是：泛型是类型系统中的参数，就像函数的参数一样，只不过函数的参数传递的是值，而泛型传递的是类型。他只出现在现在函数，接口，和类中，主要作用是为了类型的复用"}, {"id": "6844903587739336717", "title": "Vue CLI 3.X 初体验", "desc": "接下来我们尝试用typescript写点东西，体验一下。点开component目录下的HelloWorld.vue文件，发现编辑器居然画了红线，这不科学啊"}, {"id": "6887893266847498248", "title": "TypeScript 泛型", "desc": "软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。在像C#和Java这样的"}, {"id": "6985134633851568136", "title": "【Typescript】知识梳理：接口和类", "desc": "文章整理了typescript中接口和类的相关知识，同时对两者的区别和使用做了介绍。此外对extends和implements的区别和使用也做了介绍。"}, {"id": "6971601176387141669", "title": "TypeScript ｜ 元组 Tuple", "desc": "定义元组类型 元组中规定的元素类型顺序必须是完全对照的，而且不能多、不能少： 当访问一个已知索引的元素，会得到正确的类型： 元组越界 可选元素类型 元组类型允许在元素类型后缀一个 ? 来说明元素是可选"}, {"id": "6844903892119977998", "title": "[译文]一步步构建发布一个 TypeScript NPM 包", "desc": "在这篇文章中，我们会使用 TypeScript, TSLint, Prettier, Jest 等构建并发布一个 NPM TypeScript 包。下面将会是我们要构建的： 下载 Node.js 和 NPM。 选一个好的包名。包名必须是 pascal-case 并且全部小写。因…"}, {"id": "6866403741608722445", "title": "2020之TypeScript项目Lint终极解决方案", "desc": "首先，TSLint只能用于TypeScript项目，而ESLint同时支持JavaScript和TypeScript项目。 另外，早在2019年的时候，TypeScript团队就公开发表说ESLint较于TSLint有一个更高效的架构，他们后面不会再维护TSLint，转而投入到…"}, {"id": "6844903560056930311", "title": "CSS in Typescript", "desc": "使用typescript无非就是因为它的代码约束和提示能力. 以react为例: 正如一开始所说, 使用typescript无非就是因为它的代码约束和提示能力, 那么, 第三种才是我们的最优解. typings-for-css-modules-loader是一个webpack …"}, {"id": "6996299816871395336", "title": "TypeScript常用知识之--类型保护自定义类型", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 类型保护 1. typeof 2. instanceof 3. null 保护 4. in 保护 5.字面量保护 自定义类型 1.获取不同"}, {"id": "6993915605195685902", "title": "TypeScript-入门教程(2)", "desc": "1.联合类型 联合类型（Union Types）表示取值可以为多种类型中的一种。 联合类型使用 | 分隔每个类型。 上图代码中我们可以看出定义的变量unionType我们指定类型为字符串或者是数字类型"}, {"id": "6844903569397645320", "title": "【推荐】开源项目minapp－重新定义微信小程序的开发", "desc": "minapp重新定义微信小程序的开发minapp重新定义微信小程序的开发使用用npm安装命令行工具：npminstall-g@minapp/cli--registry\"https://registry"}, {"id": "6844903967877513230", "title": "在vue3🔥源码中学会typescript🦕 - \"is\"", "desc": "vue3🔥是用typescript实现的, 所以我认为他的源码是我们学习tyepscript的最佳实践, 下面我就用他源码中的实例让大家学会使用typescript的\"is\"特性. 是一种类型推断表达式的关键字, 通过和函数返回值的比较, 从而\"缩小\"参数的类型范围. 😠看…"}, {"id": "6844904084202323981", "title": "前端深入理解Typescript泛型概念", "desc": "泛型程序设计（generic programming）是程序设计语言的一种风格或范式。泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。 泛型是指在定义函数，接口或者类的时候，不预先定义好具体的类型，而在使用的时候在指定类型…"}, {"id": "6992955545423052813", "title": "TypeScript系列 --- 接口", "desc": "TypeScript 的核心原则之一是对值所具有的_结构_进行类型检查。在TypeScript 里，接口的作用就是为对象的具体属性定义类型注解。这里的对象包括普通对象类型，也包括函数，数组等特殊的对象"}, {"id": "6987673468091236389", "title": "10-TypeScript泛型变量", "desc": "泛型本质属于类型的一种， 是一种不确定的类型。 通俗的理解， 泛型就是解决类， 接口， 方法的复用性以及对不特定类型和对未来类型支持的一种类型。 因为不确定， 所以泛型是模糊的， 抽象的。 比如， 有"}, {"id": "6844903967999131662", "title": "Vue-cli3项目引入Typescript", "desc": "根目录下新建 tsconfig.json，下面为一份配置实例(点击查看所有配置项)。值得注意的是，默认情况下，ts 只负责静态检查，即使遇到了错误，也仅仅在编译时报错，并不会中断编译，最终还是会生成一份 js 文件。如果想要在报错时终止 js 文件的生成，可以在 tsconfi…"}, {"id": "6958725981309927431", "title": "TypeScript学习笔记", "desc": "一、TypeScript定义 TypeScript是JavaScript的超集，扩展了JavaScript的语法，TypeScript通过类型注解提供编译时的静态类型检查。 二、TypeScript基"}, {"id": "6844903539978813453", "title": "ANTLR：在浏览器中玩语法解析", "desc": "在前端开发中，通常提到语法解析等功能，这是都是有后端负责提供接口，前端调用。那么前端是否能自主完成语法解析相关的功能，并在浏览器中运行呢？答案是肯定，本文将描述一种简化的语言称为Expr语言，并在浏览器中完成对输入的Expr代码做错误验证、执行和翻译等等功能。 前4行的行为是大…"}, {"id": "6844903971341991949", "title": "《四》大话 Typescript泛型", "desc": "javascript 作为一门动态语言, 在实际运行的时候,等变量被赋值才知道该变量的类型. 动态语言给实际的编码带来了很大的灵活性. 但是同样的, 在代码运行期间有可能会发生与类型相关的错误, 降低了代码的可维护性. 那下面我们用 typescript 来定义变量. 为了支持…"}, {"id": "6903051090359484424", "title": "TypeScript(三) —— 基础类型语法", "desc": "虽然是原始类型，但是这个类型是ES6提出的，默认的配置是ES3，所以会报错。 它表示没有任何类型。 最长当一个函数没有返回值时，你通常会见到其返回值类型是 void。 目前没有见到用的，看文档说函数抛出异常会用，所以这里先不做解释。 any是任意类型，其仍然是动态类型，和普通的…"}, {"id": "6844903953688166408", "title": "TypeScript 技巧拾遗", "desc": "很早以前就尝试过使用 TypeScript 来进行日常编码，但自己对静态类型语言的了解并不深入，再加上 TypeScript 的类型系统有着一定的复杂度，因此感觉自己并没有发挥好这门语言的优势，使代码变得更具可读性与可维护性。于是这几天便想着好好研究下这门语言，希望能够总结出一…"}, {"id": "6844904017294786574", "title": "《一》大话 Typescript 基本类型", "desc": "作为一个使用 Typescript 很久很久很久的人来说, 真真切切感受到了 Typescript 的魔法, 大大提高了代码的可维护性. 方便代码重构(一个月重构一次, 半年重构6次,不是在重构的路上就是在重构……) 一种使用数组泛型, Array<元素类型>. 作用: 限定了…"}, {"id": "6844903875690905614", "title": "Nextjs摸鱼进阶一： 配置Typescript编译环境", "desc": "用Next.js开发项目有一段时间了，最近萌生了一个加上Typescript折腾一下自己的想法。虽说上班有鱼摸是好事，有时间还是要提升一下自己呀~ (*￣︶￣)"}, {"id": "6844904003604578312", "title": "TypeScript经常用到的高级类型", "desc": "ts入门了一段时间，可是碰上一些高级类型总是一头雾水，还需要去看文档，所以总结了一些工作中经常用到的一些高级类型。所以阅读之前你需要掌握一点儿ts基础。 交叉类型将多个类型合并为一个新的类型，新的具有所有参与合并的类型的特性，本质上是一种并的操作。形式如下： 联合类型用 | 分…"}, {"id": "6844903665577279496", "title": "TypeScript在react项目中的实践", "desc": "前段时间有写过一个TypeScript在node项目中的实践。 在里边有解释了为什么要使用TS，以及在Node中的一个项目结构是怎样的。 但是那仅仅是一个纯接口项目，碰巧赶上近期的另一个项目重构也由我来主持，经过上次的实践以后，尝到了TS所带来的甜头，毫不犹豫的选择用TS+Re…"}, {"id": "6974746024464089124", "title": "TypeScript ｜ 类型检查机制", "desc": "TypeScript 的类型检查机制都是为了让开发者在编译阶段就可以直观的发现代码书写问题，养成良好的代码规范从而避免很多低级错误。 TypeScript 类型检查机制包括 类型推断、类型保护、类型兼"}, {"id": "6861110836825210894", "title": "亲手码出TypeScript最前沿的教程（进阶篇）", "desc": "本文为是TypeScript的进阶篇，在上一篇TypeScript的基础篇中，我们讲到了什么是TypeScript，他们的优缺点对比和如何安装，以及TS基础语法中的原始数据类型，任意值、联合类型、接口、数组类型、函数类型。 那么在进阶篇中，我们将继续带领大家学习TS中的类，元组…"}, {"id": "6844904143098757134", "title": "从零配置 Eslint + Prettier + husky + lint-staged 构建前端代码工作流", "desc": "最近入职了新公司，领导让我修复项目中出现的bug，当我修复了bug提交代码的时候发现并没有提交上去而且还给我报了一堆的错误，于是我就发现了原来是在代码commit的时候用eslint去检查了代码，仔细看了看package.json发现gitHooks 在代码pre-commit…"}, {"id": "6844903998261051399", "title": "设计模式ts实战系列(上)", "desc": "本文是一系列 ts 的设计模式实战总结，并不是单纯的介绍设计模式，而是从工作中的例子出发，因为这样才能让人体会到设计模式离我们很近。全篇每个设计模式都是从，概念、一句话概括、优缺点、实战几个方面来讲。 设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向…"}, {"id": "6982570523632861221", "title": "【沉浸式学习】一起学习Typescript的第二天--10分钟让vue老项目支持JS与TS混用", "desc": "这是我参与新手入门的第2篇文章。 双双碎碎念： 是的，她她她又来了，俺也是没得办法。前天发完文章后就突然有很多想法，万一没人喜欢呢，万一被人嫌弃呢，是不是一个女孩子搞得太油腻了呢， 也想到很多文章说要"}, {"id": "6979209707227447333", "title": "ts中的接口", "desc": "接口 接口的关键字interface 可选属性 只读属性 ,关键字 readonly 用接口声明函数 可索引类型的接口 声明的数组 声明的map 类类型,接口对class的约束 接口的继承"}, {"id": "6844903833500385288", "title": "vue-typescript 就是这么简单...", "desc": "1. 项目创建和初始化 1.2. 初始化项目 2. 通过node来生成组件 2.1. 通过node来生成组件 2.2. 通过node来生成页面组件 3. vue与typescript结合 3.1. 首先组件声明 3.2. data定义 5. 踩坑"}, {"id": "6844903537042784269", "title": "千呼万唤始出来！一键构建Vue-TypeScript应用", "desc": "A simple TypeScript CLI for scaffolding Vue.js projects. Prerequisites: Node.js (>=4.x, 6.x preferred), npm version 3+ and Git. Example: Th…"}, {"id": "6946144372475822093", "title": "Hello Typescript（06）-- 类", "desc": "与 es 不同，ts 中类的属性必须有初始值，或在构造函数中被初始化。无论是在 ts 还是 es 中，类的成员属性都是实例属性，类的成员方法都是原型方法。"}, {"id": "6844903894812721159", "title": "面向对象不是银弹，DDD 也不是，TypeScript 才是", "desc": "Simplicity is hard，when simplicity is not the reality。"}, {"id": "6921237775102509070", "title": "Typescrit 从入门到放弃系列(十九)-扩展全局变量类型", "desc": "同一名称的两个独立声明会被合并成一个单一声明，合并后的声明拥有原先两个声明的特性。"}, {"id": "6844903574191734791", "title": "那些鲜为人知的 TypeScript 功能", "desc": "过去的几年中，TypeScript 已经成为编写 JavaScript 应用的流行方式。这种语言非常强大，能做很多事情。 你可以是用下划线的方式定义 numbers。比如：1000000000 可以写成 1_000_000_000。在 JavaScript 中它将会被编译成正常…"}, {"id": "6844903508685094925", "title": "Vue2.5+ Typescript 引入全面指南", "desc": "Vue2.5+Typescript引入全面指南写在前面写这篇文章时的我，Vue使用经验三个多月，Typescript完全空白，花了大概三个晚上把手头项目迁移至Typescript，因此这篇文章更像个入"}, {"id": "6901265229787693070", "title": "TypeScript(二) —— 配置文件注解", "desc": "里面属性是typescript编译器配置的一些选项，下面是一些常用的配置及其含义，之后用到什么就进行补充。 有了配置文件之后，我们使用tsc命令编译整个项目的时候，配置文件才会生效，如果是单个文件，则不会起作用。"}, {"id": "6844903661026410504", "title": "爱你的声音看起来像什么-音频手绘可视化", "desc": "音频可视化并不是一个新课题，但是搭配上手绘画风，和你的心意，在这个特殊的日子里，还是能给你心爱的 TA 带来小小的惊喜吧！ 今夜月色真美 - 音频手绘可视化​umeecorn.com GitHub 传送门：Ovilia/moonight 这个项目最初的想法来自于卖声音挂画的淘宝…"}, {"id": "6889994141065822216", "title": "关于TypeScript，我想说", "desc": "哈哈，其实只是学习📒可以提高代码的可靠程度类型系统强类型和弱类型（类型安全）强类型有更强的类型约束，而弱类型中几乎没有约束强类型不允许任意的数据隐式类型转换，而弱类型则允许任意的数据隐式类型转换语言层"}, {"id": "6844904040845819917", "title": "探索 TypeScript 类型注解 - 高级类型", "desc": "欢迎来到 《探索 TypeScript 类型注解》 系列教程。 上一篇介绍了类型检查机制，本篇深入探索高级类型。 具有联合类型的值只能访问类型的共有成员。 keyof T：表示为 T 的公有属性名的联合。 T[K]：表示 T 的属性 K 的类型。 如果类型 T 带有字符串索引签…"}, {"id": "6912788659930890253", "title": "Typescrit从入门到放弃系列(四)-函数类型", "desc": "一.函数的两种声明方式通过function关键字来进行声明通过表达式方式声明二.可选参数三.默认参数四.剩余参数五.函数的重载"}, {"id": "6844903592013332487", "title": "[译] Angular 属性绑定更新机制", "desc": "所有现代前端框架都是用组件来合成 UI，这样很自然就会产生父子组件层级，这就需要框架提供父子组件通信的机制。同样，Angular 也提供了两种方式来实现父子组件通信：输入输出绑定和共享服务。对于 stateless presentational components 我更喜欢输…"}, {"id": "6844903583737970695", "title": "[英][官方] TypeScript 2.8 发布 | 支持 Conditional Types, @jsx pragma comments 等等", "desc": "Conditional types Declaration-only emit @jsx pragma comments JSX now resolved within factory functions ..."}, {"id": "6970203344417751053", "title": "TS 工具泛型使用", "desc": "keyof 首先来看keyof的定义：keyof操作符可以用来枚举出一个对象中的所有key值。 通俗来说，keyof可以取出一个对象中的所有由key值组成的枚举类型。 可以看到使用let a: { ["}, {"id": "6844903648250576903", "title": "Angular 2.x折腾记 ：(11) 写一个挺不靠谱的多少秒/分/时/天前的管道", "desc": "前言在写东西的时候发现需要这么一个东西,而也找不到有人写这个东东,那就自己写一个吧效果图之前用了管道之后前置基础ng2+的基础知识typescript基础实现代码LongTimeago.pipe.ts"}, {"id": "6844903811555786765", "title": "从零开始为 PicGo 开发一个新图床", "desc": "用过几款上传图片到图床的软件，但是自己常用的图床，比如青云对象存储基本都没有支持的。 刚好前几天发现了一款可以自定义插件的图片上传软件 PicGo，借此机会正好为其新增青云对象存储图床的支持。 插件基于 PicGo-Core 开发，参阅开发文档 PicGo-Core-Doc 进…"}, {"id": "6844903917864615943", "title": "Typescript 基础 （一）", "desc": "Typescript 入门基础篇（二）传送门。 Typescript 入门基础篇（三）传送门。 ts 的类型主要有布尔值、数字、字符串、数组、元组、枚举、Any、Void、Null和Undefined、Never。 有时候你会遇到这样的情况，你会比TypeScript更了解某个…"}, {"id": "6844903569280204813", "title": "vue全家桶与typescript使用总结", "desc": "最近重构了我之前项目 qq 音乐移动端，使用的技术是 vue，vuex，vue-router，和 typescript，在这期间，遇到的问题还是蛮多的，一会儿我会把我遇到的问题以及解决方法列出来，避免忘记。 重构完成的项目 ===> vue-qq-music TypeScrip…"}, {"id": "6911577379819225095", "title": "TypeScript 学习总结之 类", "desc": "// 注意这个super， 如果在constructor内就是默认指 构造函数 。 // 如果在constructor外部（除了constructor），这个super 就是指的 父类 （Animal）。 // 在TypeScript里，成员都默认为 public。 因此 , …"}, {"id": "6844904069262229517", "title": "武夷 | TypeScript 是什么？", "desc": "啦啦啦，我是武夷，一个不太会卖萌的码农。今天我们一起来聊一聊 TypeScript 是什么？ A statically typed superset of JavaScript that compiles to plain Javascript. (编译为纯 Javascrip…"}, {"id": "6910498066424397832", "title": "TypeScript  学习总结之基础类型", "desc": "TypeScript 是 JavaScript类型的超集，它可以编译纯JavaScript ， 是由 微软开发的开源的编程语言。 TypeScript 可以在任何浏览器，任何计算机和任何操作系统上运行。 TypeScript 是开发大型应用的基石。 TypeScript 提供了…"}, {"id": "6917475031454842887", "title": "ts(typescript)初识---数据类型的详细分解", "desc": "当当当~写一下我的第一篇掘金文章，主要目标方便自己之后回翻加强记忆，其实说出来不怕大家笑话，受上学习惯的影响，我是比较喜欢记录纸质版笔记的，方便回翻，自己写的笔记，位置都会很熟悉~现在也开始适应大环境"}, {"id": "6844903928283267080", "title": "Angular公共组件开发II", "desc": "上一篇:Angular公共组件开发谈了Angular公共组件的开发,其中有个细节不知道大家注意到没有。 不知道大家有没有考虑过这边为什么在Angular的Onchange()生命周期里初始化数据。其实，这是因为通过@Input拿到的数据对于这个公共组件来说是异步的，所以，在构造…"}, {"id": "6844904019895255048", "title": "typeScript中的函数类型", "desc": "函数的标注一个函数的标注包含参数返回值可选参数和默认参数可选参数通过参数名后面添加?来标注该参数是可选的默认参数我们还可以给参数设置默认值有默认值的参数也是可选的设置了默认值的参数可以根据值自动推导类"}, {"id": "6949311418277560357", "title": "【Typescript小手册】配置文件", "desc": "概述Typescript 会根据配置文件来设定编译编译方式和细节，这篇文章来讲讲 Typescript 编译配置文件常用的选项的含义。"}, {"id": "6949316114362925086", "title": "【Typescript小手册】复合类型", "desc": "Typescript 的复合类型指由基本类型组成的类型，包括：数组、枚举、元组、函数、接口、类。"}, {"id": "6949317933185122318", "title": "【Typescript小手册】类型操作", "desc": "Javascript 中一切都是变量，Typescript 中也一样，类型也可以作为一个“变量”来进行一些操作，比如之前介绍的高级类型，就是在基础类型和复合类型的基础上扩展出的类型。"}, {"id": "6844903638477832206", "title": "你不知道的前端SDK开发技巧 ", "desc": "另一种做法是使用Flow或者TypeScript，选择TypeScript的主要原因是自动生成的JsDoc比较原始，我们仍然需要在上面进行编辑，所以JsDoc维护和代码开发是脱离的，往往会出现代码更新了，JsDoc忘记更新的情况。 除此之外开发过程中我们无法享受到类型检查等对S…"}, {"id": "6914685572543938573", "title": "TypeScript学习笔记（一）数据类型、函数", "desc": "TypeScript作为一门前端语言，其形式上更类似于后端java语言，相对于JavaScript而言TypeScript更体现出面向对象的编程方式，其提供的参数校验、接口、泛型等等，都使得ts在开发大型前端项目时有着出色的表现，因此作为一名前端开发人员，掌握ts语言是非常有必…"}, {"id": "6906466443995381768", "title": "关于TS中的“任意属性”", "desc": "有时候我们希望一个接口允许有任意的属性、TypeScript给我们提供了两种索引签名：字符串和数字。 1. 一旦定义了任意属性 且 任意属性的类型为string时、那么确定属性和可选属性的类型都必须是它的类型的子集 👆🌰任意属性的值允许是 string，但是可选属性 age…"}, {"id": "6914189917669031944", "title": "react中 ts注入器的使用", "desc": "你羡慕的生活背后都是你熬不起的苦前端QQ群:981668406在此附上我的QQ:2489757828有问题的话可以一同探讨我的github:李大玄我的私人博客:李大玄我的npm开源库:李大玄我的简书:"}, {"id": "6913927193022332935", "title": "TypeScript（三）类型注解和类型推断", "desc": "TypeScript中有两个概念，类型注解和类型推断，下面我们去分别理解这两个概念。 上面的代码就是类型注解，我们声明count是一个number类型的变量，简单说类型注解就是我们告诉程序这个变量是什么类型。 这段代码我们并没有对变量username进行类型注解，但是当我们把鼠…"}, {"id": "6844904065286012935", "title": "TypeScript真香系列-类型推论和类型兼容性", "desc": "TypeScript真香系列的内容将参考中文文档，但是文中的例子基本不会和文档中的例子重复，对于一些地方也会深入研究。另外，文中一些例子的结果都是在代码没有错误后编译为JavaScript得到的。如果想实际看看TypeScript编译为JavaScript的代码，可以访问Typ…"}, {"id": "6844903558190497800", "title": "[译] RxJS: multicast 操作符的秘密", "desc": "multicast 操作符有一个秘密。publish 操作符也是如此，它封装了 multicast 。这个秘密有时候真的挺好用的。 multicast 和 publish 的文档中都提到了 ConnectableObservable 。ConnectableObservable…"}, {"id": "6844904175290023950", "title": "TypeScript入门指南", "desc": "看到这里你可能对 TypeScript 还是没有什么感觉，其实在我看来 TypeScript 是对 JavaScript 做了各种限制，这里说的限制并不是贬义的意思，因为 JavaScript 实在是太灵活了，很多的问题只有在运行的时候才会暴露出来，比如对于函数，即使定义时要求…"}, {"id": "6844903537256710151", "title": "TypeScript, Angular 和移动端的跨平台开发", "desc": "Google技术经理陈亮将为大家介绍TypeScript和Angular是什么以及如何利用TypeScript和Angular进行移动端的跨平台介绍。 内容来源：2017年7月15日，Google Engineering Manager陈亮在“2017 JavaScript中国…"}, {"id": "6921570028072632334", "title": "TypeScript语言特性-后记", "desc": "TypeScript 最大的优势之一便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。 主流的编辑器都支持 TypeScript，这里我推荐使用 Visual Studio Code。 它是一款开源，跨终端的轻量级编辑器，内置了对 TypeScri…"}, {"id": "6844903657679355917", "title": "复杂 React 应用中的TypeScript 3.0实践", "desc": "如果你了解，也许应该知道我已经很久没有编写没有类型系统的JavaScript了，我非常喜欢 React 这个库，更喜欢使用 TypeScript 来编写 React。虽然网络世界中有很多介绍 React 的文章，但极少发现有介绍如何应用 TypeScript 来编写 React。"}, {"id": "6882252156133441550", "title": " TypeScript - Basic - Part I", "desc": "The main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs. While the size, scop…"}, {"id": "6904574285570916360", "title": "TS之函数详解", "desc": "TS之函数详解学习目标掌握TypeScript中的函数类型标注函数可选参数、默认参数、剩余参数函数中的this函数重载1、函数的标注一个函数的标注包含参数返回值2、可选参数、默认参数、剩余参数可选参数"}, {"id": "6844904201831579662", "title": "TypeScript学习小记", "desc": "不知不觉typescript的学习快两个月了，适当做一下整理。 typescript和babel的合作，babel是一个compiler，typescript也有这方面的职能，双方有冲突。typescript有寻求babel合作，把compiler的职责专门交给babel，现在…"}, {"id": "6844904150350708744", "title": "利用泛型+类型推导定义伪GraphQL模型", "desc": "简单来说就是前端自行定义接口所需要返回的数据, 想要尝试的可以试着调用GithubAPI V4. 答案是可以, 但是提前必须是后端必须提供足够的数据让前端自行选择. 任何接口如果有涉及到拿User数据的, 都会把该User的数据全量返回, 也就是说前端能从接口中拿到User相关…"}, {"id": "6844903640524816391", "title": "在 Vue 中使用 TypeScript 的一些思考（实践）", "desc": "使用 TypeScript 写 Vue 组件时，有两种推荐形式： Vue.extend()：使用基础 Vue 构造器，创建一个“子类”。此种写法与 Vue 单文件组件标准形式最为接近，唯一不同仅是组件选项需要被包裹在 Vue.extend() 中。 vue-class-comp…"}, {"id": "6974581345070628871", "title": "TypeScript ｜ 函数 Function", "desc": "函数 return_type 是返回值的类型。 return 关键词后跟着要返回的结果。 一般情况下，一个函数只有一个 return 语句。 返回值的类型需要与函数定义的返回类型(return_typ"}, {"id": "6949572257945485343", "title": "【TypeScript笔记】接口", "desc": "接口是对 JavaScript 本身的随意性进行约束，通过定义一个接口，约定了变量、类、函数等应该按照什么样的格式进行声明。"}, {"id": "6844904159070650382", "title": "聊聊 TypeScript 中的类型保护", "desc": "如上所示，getSmallPet 函数中，既可以返回 Fish 类型的对象，又可以返回 Bird 类型的对象。由于返回的对象类型不确定，所以使用联合类型对象共有的方法时，一切正常，但是使用联合类型对象各自独有的方法时，ts 会报错。 那么如何解决这个问题呢？最粗暴的方法当然是将…"}, {"id": "6844903665220714509", "title": "拖拽拉伸加上旋转角度的数学原理", "desc": "最近在写公司项目的时候遇到了拖拽拉伸加旋转组件然后改变其高度宽度的需求，原本以为‘拖拽那么简单，拉伸的话就改变width和height就好了’，因为拖拽拉伸的方位有八个点，所有一个个计算总会解决的，but 起初在没有加上旋转角度的时候测试了八个方位的拖拽拉伸是没有问题的，而且其…"}, {"id": "6898291760636624904", "title": "Typescript 工具泛型", "desc": "一直没有深入学习更多内容，后来加入观麦前端团队，有辛认识到有着 TS 丰富经验的前辈，开始意识到自己在 TS 方面还有很多盲区，所以选择跳出来，往更深的内容学习。现在与大家分享工具泛型相关的学习，有什么不足的地方，希望能和大家共同交流。如果不想看的，可以直接请官网学习 处理一些…"}, {"id": "6936752268549029919", "title": "使用typescript与webpack搭建开发环境（一）", "desc": "项目启动有两种方式，一种是直接在终端中输入webpack serve来启动或者使用yarn命令启动，我们使用第二种方式。"}, {"id": "6923101406882856974", "title": "Typescript 学习之 - Class", "desc": "类包含了一类事物的抽象特点，包含这类事物的属性和方法。 传统方法中我们通过构造函数实现类的概念，在ES6中我们终于迎来了 class，而 Typescript 除了实现ES6中的类的功能外，还添加了一些新的用法。 通过 new 生成实例的时候，会自动调用 constructor…"}, {"id": "6844903504847306760", "title": "antd源码解读（6）- Affix", "desc": "这个组件是一个图钉组件，使用的fixed布局，让组件固定在窗口的某一个位置上，并且可以在到达指定位置的时候才去固定。"}, {"id": "6844903657679388680", "title": "快速入门 TypeScript React Starter 工程", "desc": "WLM-TypeScript-React-Starter 是一个 TypeScript Starter 项目，集成了 [ React + React-Router + Redux + Redux-Thunk ]，旨在为 Web 应用程序开发者提供 “开箱即用” 的 TypeSc…"}, {"id": "6844903607746166797", "title": "TypeScript 2.7 记录", "desc": "ES6 引入的 Symbol 机制,Symbol是js的第七种数据类型,可以产生独一无二的值，可以用来保证每个属性的名字都是独一无二,从根本上防止属性名的冲突。结合ts，我们可以这样声明一个symbol，const Foo: unique symbol = Symbol() 现…"}, {"id": "6942811671190732814", "title": "TypeScript的环境搭建", "desc": "一. 什么是TypeScript 二. 环境配置"}, {"id": "6950112645265653768", "title": "Hello Typescript（09）-- 类型推断、类型兼容性、类型保护", "desc": "类型推断是不需要指定变量的类型（函数返回值的类型），可以自动推断出一个类型。ts允许不同类型的变量一定规则下可以互相赋值。类型保护区块中可以确定保护变量类型。"}, {"id": "6844903567204024333", "title": "使用 TypeScript 构建 Koa2 项目的最佳实践", "desc": "使用 TypeScript 构建 Koa2 项目的最佳实践"}, {"id": "6844903725320896526", "title": "Iterables和迭代器", "desc": "ES6引入了一种遍历数据的新机制：迭代。两个概念是迭代的核心： 可迭代是一种数据结构，让我们可以方便的访问其元素。它通过实现一个键为 Symbol.iterator 的方法来实现。这是迭代器的工厂方法。 迭代器是用于遍历数据结构元素的指针（想想数据库中的游标 （cursors …"}, {"id": "6844904086593093646", "title": "TypeScript 夜点心：修饰器", "desc": "开发中我们会遇到一类逻辑，他们与特定的类没有耦合关系，甚至与特定的接口（interface）也没有耦合关系。我们可以把他们抽离出来，并通过某种语法再添回到特定的属性和方法上去，实现逻辑的解耦和复用，这便是修饰器。 在基于 TypeScript 开发的库中时常能见到修饰器的身影（…"}, {"id": "6949514531068444703", "title": "前端类型系统", "desc": "TypeScript是一种基于JavaScript的编程语言，它解决Javascript类型系统不足的问题，大大提高了代码的可靠程度。 从类型安全角度出发，类型系统分为强类型和弱类型"}, {"id": "6847902224631365645", "title": "TypeScript 基础（记录学习）", "desc": "泛型用于提升代码的重用性我们希望自己编写的代码，无论是模块还是组件，不仅能支持当前设计的数据类型，而且也能支持将来的数据类型。这在大型系统中是非常基础且重要的功能。所以我们常常能在各种各样的静态类型语言中看到泛型设计，使得用户可以灵活地选择希望支持的类型，而非局限于某一种类型 …"}, {"id": "6988458876874489893", "title": "TypeScript学习(五)：Handbook -> Generics", "desc": "泛型函数 就算不指定泛型类型，TS 也会从参数中推导出。 各种写法 泛型类 注意：泛型类的 【类型参数T】 只对类的实例方法、属性有约束。对于静态方法、属性没有作用。 函数中 extends 的作用 "}, {"id": "6896043465801793550", "title": "走进ts-工具泛型", "desc": "上一篇文章简单介绍了泛型的概念，以及函数泛型、类泛型、接口泛型的使用方式，还有多参数泛型和泛型约束的方法。本篇将介绍下ts官网提供的一些工具泛型，什么是工具泛型呢？简单来说就是可以把一个复杂的类型转变成我们想要的类型。以下代码举例 这里的Pick也是工具泛型的一种，可以从一个复…"}, {"id": "6860359782956859405", "title": "【译】不使用TypeScript的7个很好的理由，给不会的找些理由", "desc": "大家都喜欢TypeScript。它“解决”了JS的很多问题，它是JS的“超集”，它会让你的代码不容易出错，而且阅读起来很愉快。使用TypeScript有很多好的理由，但我要给你7个真正好的理由不要使用。 哗，怎么会有风险呢？如果TypeScript添加类型定义并在编译时检查它们…"}, {"id": "6844903624477261831", "title": "vue-cli 3.0 下发布一个 TypeScript 组件", "desc": "vue-cli 3.0 提供了一系列功能，包括对 Babel, TypeScript, ESlint, PWA 等开箱即用的支持，同时，它也提供了一个 CLI 上的 GUI 界面，你只需输入 vue ui 即可看到配置界面，这里不过多说明，有兴趣的同学，可以参考文档： http…"}, {"id": "6844903974215090184", "title": "TypeScript全栈工程实战-(Nuxt. js & Nest. js) -  一、《简介》", "desc": "TypeScript全栈工程实战-(Nuxt. js & Nest. js) - 一、《简介》 TypeScript全栈工程实战-(Nuxt. js & Nest. js) - 二、《框架融合》 TypeScript全栈工程实战-(Nuxt. js & Nest. js) - …"}, {"id": "6991620802206498852", "title": "TS基础知识(一) ｜ 8月更文挑战", "desc": "1. TypeScript简介 JS易学易用，但容易出bug 项目大的时候，难以维护 JS没有变量、函数参数 类型，变量类型、函数参数可动态改变，埋下安全隐患；面向对象写起来不容易 开发较早较快，要考"}, {"id": "6990641533699489823", "title": "[ts入门02]基本类型", "desc": "基础类型的分类 分类 boolean：布尔值 number： 支持2/8/10/16进制 string：字符串 array：普通数组，有2种方式，string[]或者Array tuple：元组，特殊"}, {"id": "6844904162438676493", "title": "类型即正义：TypeScript 从入门到实践（四）：5000字长文带你重新认识泛型", "desc": "在之前的文章中，我们了解了 TypeScript 主要分为 JS 语言侧和类型侧两个部分。 在介绍了类型侧的一些基础知识，我们用这些学到的基础知识去注解对应的 JS 内容，将 JS 内容如变量、函数、类等类型化，这样确保写出的代码非常利于团队协作，且能快速排错。 在了解了之前几…"}, {"id": "6844903961938378759", "title": "Typescript+Ant-Design + Redux+Next.js搭建服务端渲染框架", "desc": "先说说先要搭建这个工具的起因吧！最近这段时间分别了学习Typescript和react服务端渲染，但是苦于没有没有实际使用端场景，我就突然想起了将Typescript与Next结合起来搭建一个服务端渲染端工具，一是这样即可以起到练手的作用，二是如果以后有相应业务需求可以直接拿来…"}, {"id": "6888302980832559112", "title": "TypeScript和Nodemon终极设置！", "desc": "在此github仓库中找到本文的完整源代码。 最后，我们需要一些源代码来工作，所以让我们创建 src/index.ts 文件，其中包含以下TypeScript。 Nodemon的配置方式有很多种，我准备用一个json文件来配置，在我们的项目根目录下添加 nodemon.json…"}, {"id": "6844903729234182158", "title": "使用 NestJS 开发 Node.js 应用", "desc": "NestJS 最早在 2017.1 月立项，2017.5 发布第一个正式版本，它是一个基于 Express，使用 TypeScript 开发的后端框架。设计之初，主要用来解决开发 Node.js 应用时的架构问题，灵感来源于 Angular。在本文中，我将粗略介绍 NestJS…"}, {"id": "6969871716428283934", "title": "第一章、欢迎来到TypeScript的世界", "desc": "一、环境配置 TypeScript（本系列文章将全部简称为TS）的爹是谁，不是我们要讨论的话题，有兴趣的网友自己去Baidu。直接进入正题，TS它是javascript的一个超集，意思就是对javas"}, {"id": "6989432843784945701", "title": "TypeScript SVG cannot find modules", "desc": "在TypeScript中引入svg文件报错 解决方案 如果项目中使用webpack打包，你可以新建一个专门的文件来解决这个问题，这个文件叫做custom.d.ts。 使用svg-sprite-load"}, {"id": "6895195252869562376", "title": "从零开发Vscode上传图片插件", "desc": "在工作中经常用有一些图片来美化我们的前端页面，这时需要我们先将图片下载到本地再通过tinypng这个网站将图片压缩后上传到七牛云，最后将图片链接放在我们的代码中，虽然工作也都在搬砖，但是这种砖不是我喜欢的那种砖。于是，就想到开发一个Vscode插件来帮我自动压缩上传图片。 1.…"}, {"id": "6844903709172826119", "title": "TypeScript 知识汇总（一）（3W 字长文）", "desc": "该文章是笔者在学习 TypeScript 的笔记总结，期间寻求了许多资源，包括 TypeScript 的官方文档等多方面内容，由于技术原因，可能有很多总结错误或者不到位的地方，还请诸位及时指正，我会在第一时间作出修改。 TypeScript 的首个版本发行于 2012 年 10…"}, {"id": "6982734659390029855", "title": "typescript学习总结（二）", "desc": "4字面量类型、类型推断、类型拓宽和类型缩小 4.1引入 在很多情况下，TypeScript 会根据上下文环境自动推断出变量的类型，无须我们再写明类型注解。 上面的示例可以简化为如下所示内容： 注意：这"}, {"id": "6997577791034097694", "title": "TypeScript 基础之接口 （2）", "desc": "接口用来描述使用这个接口的对象需要满足接口中定义的要求， 这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战”"}, {"id": "6983658925287538702", "title": "Typescript基础学习总结（三）", "desc": "6类类型-高效使用类型化的面向对象编程利器 集面向对象抽象、封装、多态三要素为一体的编程利器，类类型。 在JavaScript（ES5）中仅支持通过函数和原型链继承模拟类的实现（用于抽象业务模型、组织"}, {"id": "6932001664190644232", "title": "介绍一个工具，通过swagger得到ts所需要的出入参定义，并生成可直接调用的函数(请求层解决方案)", "desc": "在2020年底的时候开始注重定义类型的tsdoc书写的时候。如果当前是一个字段比较多的详情接口，我们定义interface和tsdoc注释就很麻烦，写一个字段复制一段字段描述，可能要耗费好几分钟。会越来越不想写注释。 其实我们再用swagger上联调接口（其他工具也类似），你会…"}, {"id": "6844904084735000583", "title": "工程化和运行时、TypeScript 编程内参（三）", "desc": "本文是《约束即类型、TypeScript 编程内参》系列第三篇：工程化和运行时，主要记述 TypeScript 在工程中的应用和实际问题。 tsconfig.json 用于指定项目中 TypeScript 编译器 tsc 的一些编译配置，通常放在项目根目录。可以用 --init…"}, {"id": "6978854812100067341", "title": "ts 进阶用法 --- 2. 联合类型与交叉类型: ts类型的编程能力", "desc": "1. union 联合类型 \"|\" 类型\"或\" 声明联合类型 类比 js中 || 或符号 类型声明 或 用 \"|\" 符号 联合类型还可以把接口类型联合起来 表示更复杂的类型结构 2. intersec"}, {"id": "6844903615669207053", "title": "玩Deno遇到问题的解决方案", "desc": "最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。 再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。 在开始之前请准备好vpn*。 大家需要去安装 Go 环境.并且去 export 各种Go相关的环境…"}, {"id": "6912057679804366855", "title": "2020你应该知道的TypeScript学习路线【函数类型】", "desc": "函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。它在编程范式中为我们控制行为，抽象某些实现有着较大的帮助，因此 TypeScript 在 JavaScript 的基础之上添加了一些额外的功能，辅助我们更好的使用函数。 在TypeScrip…"}, {"id": "6844903872876511245", "title": "Typescript 类型推论", "desc": "要是没有明确的指定类型，那么 TS 会推断出一个类型，这是依照类型推论（Type Inference）的规则来的。 不好意思，现在你在 TS 的世界里，就得按照这里的规则来。既然来学 TS，咱就得放下包袱（以往一些经验）。 出现这问题的原因在于TS 在变量没有明确指定类型的情况…"}, {"id": "6844903677841391623", "title": " TypeScript实现数组相关简单算法", "desc": "算法看起来在离我们一般的开发者不是很近，但是实际上又和我们的开发息息相关。不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。现在想想大学的时候没有好好的学习算法和数据结构真的是后悔的吐血。本文只是简单理解算法，并不会深入的…"}, {"id": "6844903630668038152", "title": "实现一个完美符合Promise/A+规范的Promise", "desc": "简要介绍：Promise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise. 在了解Promise规范之前，我们知道主流的高…"}, {"id": "6844903701828616206", "title": "记一次基于react、cra2、typescript的pwa项目由开发到部署（二）", "desc": "在上一篇文章记一次基于react、cra2、typescript的pwa项目由开发到部署（一）中，我们了解到了create-react-app 给我们提供了哪些pwa支持，也了解到了有哪些不足。虽然create-react-app会帮我们自动生成一个service-worker…"}, {"id": "6896299652958650382", "title": "你不知道的TypeScript工具类型", "desc": "在上一篇文章《看懂复杂的TypeScript泛型运算》中，我们介绍了如何去用”函数“的思维去看懂TypeScript中的泛型和工具类型。本文作为上一篇的补充，主要内容是介绍并理解开源项目utility-types中更多的工具类型的具体实现。 Primitive、Falsy、Nu…"}, {"id": "6844903609923026957", "title": "Web Bundler CheatSheet, 选择合适的构建打包工具", "desc": "题注：Web Bundler CheatSheet 属于 Awesome-CheatSheet 系列，盘点数个常用的开发打包工具清单。欢迎加入阿里南京前端团队，欢迎关注阿里南京技术专刊了解更多讯息。 工欲善其事，必先利其器，当我们准备开始某个 Web 相关的项目时，合适的脚手架…"}, {"id": "6844904041294594062", "title": "浅谈TypeScript下的IoC容器原理", "desc": "在此篇文章开始之前，先向大家简单介绍 IoC。什么是 IoC？以及为什么我们需要 IoC？以及本文核心，在 TypeScript 中实现一个简单的 IoC 容器？ 简单来说，IoC 本质上是一种设计思想，可以将对象控制的所有权交给容器。由容器注入依赖到指定对象中。由此实现对象依…"}, {"id": "6925736205548158990", "title": "TypeScript - 元祖类型 Tuple Type", "desc": "元祖类型是一种特俗的数据结构，其实元祖就是一个明确元素数量以及每个元素类型的一个数组。各个元素的类型，不必要完全的相同。在TS中可以使用类似数组字面量的这种语法去定义，如果想去访问元祖中的某个元素仍然"}, {"id": "6953462937591742471", "title": "Go+gRPC-Gateway(V2) 微服务实战，小程序登录鉴权服务(六)：客户端基础库 TS 实战", "desc": "小程序登录鉴权服务，客户端底层 SDK，登录鉴权、业务请求、鉴权重试模块 Typescript 实战。"}, {"id": "6844903712343719950", "title": "用typescript开发koa2的二三事", "desc": "最近在写一个博客的项目，前端用的 vue+typescript+element-ui,后台则选择了 koa2+typescript+mongoDB的组合。写这篇博客的目的也是在写后台的过程遇到一些问题，查了很多资料才解决。于是权当总结，亦是记录，可以给别人做一个完整的参考。 这…"}, {"id": "6844903700951990279", "title": "Typescript part 1：类型，高级类型，类型兼容", "desc": "梳理 TS 基础类型，高级类型，类型兼容，等方面的知识点，并且接合类，接口，泛型等等模块交叉梳理，对官方文档做了整理和拓展，有大量例子补充说明。 推荐使用 deno 执行大部分例子，更加简洁。 生产环境不建议使用。"}, {"id": "6910839518400610318", "title": "TypeScript 学习总结之函数", "desc": "// 默认：传递给一个函数的参数个数必须与函数期望的参数个数一致。 // 注意：可选参数必须要放在必选参数的后边，否则会报错。"}, {"id": "6844903503899394055", "title": "[译] Vue 2.5 发布了", "desc": "我们很高兴宣布 Vue 2.5 Level E 的发布！本次发布包括多个功能提升并且我们推荐你查看发布说明来获取完整详细信息。 在这篇文章中，我们将重点介绍一些更重要的的变化：更好的 TypeScript 集成，更好的错误处理，更好地支持单文件组件中的功能组件以及与环境无关的服务"}, {"id": "6844903688562016263", "title": "使用 React+TypeScript+Firebase 实现的 Chrome Extension 总结", "desc": "此文粗略记录用 React+TypeScript+Firebase 实现一个用来统计 Gitlab Spent Time 的 Chrome Extension 的过程。 当初想写这个扩展的动机，是源于我们公司将项目管理平台从 Redmine 切换到了 GitLab，GitLab…"}, {"id": "6939362267276247070", "title": "TypeScript快速入门", "desc": "阅读人群：熟悉JavaScript语言，但对TypeScript不了解、没有实践过的前端研发人员。 通过ts的类型系统，我们的应用程序将会更加规范、稳健，对于大型的复杂应用，也将更利于扩展和维护。 一个类型决定了一个变量具有哪些属性和方法，访问某种类型不具有的属性或方法将导致程…"}, {"id": "6844903604332003335", "title": "一款使用typescript开发的，简单的，易用的在线表格组件", "desc": "Modern browsers and Internet Explorer 9+(no test)."}, {"id": "6844903614129913863", "title": "源码分析 @angular/cdk 之 Portal", "desc": "最近在学习 React 时，发现 React 提供了 Portals 技术，该技术主要用来把子节点动态的显示到父节点外的 DOM 节点上，该技术的一个经典用例应该就是 Dialog 了。设想一下在设计 Dialog 时所需要的主要功能点：当点击一个 button 时，一般需要在…"}, {"id": "6915056308836106253", "title": "TypeScript学习笔记（二）类、多态、抽象方法和抽象类", "desc": "TypeScript作为一门前端语言，其形式上更类似于后端java语言，相对于JavaScript而言TypeScript更体现出面向对象的编程方式，其提供的参数校验、接口、泛型等等，都使得ts在开发大型前端项目时有着出色的表现，因此作为一名前端开发人员，掌握ts语言是非常有必…"}, {"id": "6844903649659846663", "title": "巧用 Typescript", "desc": "记录一些有趣、实用的写法。不定期更新。🌀巧用注释通过/***/形式的注释可以给TS类型做标记，编辑器会有更好的提示：注：Don'tdothis:🌀巧用注释进阶注释有很多规范的字段，基本和JSDOC一致"}, {"id": "6912314481716494349", "title": "Typescript-react相关类型", "desc": "简写FC&#x3C;P={}>，无状态组件(SFC)，函数组件的类型定义，一个泛型接口，可以接受一个参数，可以不传，用来定义props的类型。 return返回的jsx语法类型，例如上述的render中return的就是这个类型。 类的类型，泛型接口，可以在高阶组件中使用,当接…"}, {"id": "6844904179849232392", "title": "VUE使用typescript搭建项目", "desc": "使用脚手架vueCli工具搭建选择自定义模块选择自定义模块（作者选择是以下几种）安装完成在这里进行开发还有点吃力作者推荐三个插件vue-property-decorator这个插件是对vue-clas"}, {"id": "6925954441346727950", "title": "TypeScript - 枚举类型 Enum Types", "desc": "在应用开发中经常会涉及到用某几个数值去代表某种状态，比如下例中用数字表示文章的发布状态：0：‘草稿’、1：‘未发布’，2:‘已经发布’。也就是说这个状态属性的取值，也只有0、1、2这三个值。如果直接在"}, {"id": "6844903873170276359", "title": "TypeScript 要点知识整理", "desc": "本篇主要是整理一下 typescript 相关的知识点，实际的运用会在下篇文章仔细讲解。 Ts 只会进行静态类型检查，如果发现错误，编译的时候就会报错。日常一般搭配 Eslint 或 Tslint 使用，在编码过程中即会报出对应错误。 通过在变量后加 :类型 声明变量的类型。 …"}, {"id": "6899633473268088840", "title": "IoC in Typescript", "desc": "高效的工作方式都有一个共性：把大任务拆分为多个小任务，再一一破解；较小的任务可以减少我们的心智负担，也帮助我们更高效的分配、解决问题。 用在软件工程上，就是通过分治手段，将软件模块化，实现高内聚低耦合。 OK，本文以 IoC（控制反转） 入手，介绍一下我自己正在执行的一套开发方…"}, {"id": "6844903504570515470", "title": "React, TypeScript 写游戏探索", "desc": "1. React的优势 如果渲染的多了结构复杂了,阅读就会十分困难。现在的代码风格就能够一目了然的看到所有运行的组件 2. React的劣势 其中子弹也可以继承至飞行物使得飞行物等可以衍生更多子类。React中各组件只能继承至React.Component,可采用HOC高阶组件…"}, {"id": "6876679867392491534", "title": "TypeScript 采坑系列: typescript Property 'xx' does not exist on type 'Function'", "desc": "在Javascript中获取对象的属性或者方法使用点或者中括号的这两种方式即可，例如：但是在Typescript中，有时会提示像Property'value'doesnotexistontype'Ob"}, {"id": "6890188451481255950", "title": "TypeScript - Functions(函数类型)", "desc": "当省略返回值的类型注解，Typescript 会自动根据返回的值进行类型推断。 在 JavaScript 中，函数的每个参数都是可选的，用户可以根据情况传递，没有传参的值默认为 undefined。而在 TypeScript 中，要想让一个参数可选，可以把类型注解改为 ?: ：…"}, {"id": "6844903559671054350", "title": "Typescript玩转设计模式 之 对象行为型模式（下）", "desc": "Subject（目标）：目标又称为主题，它是指被观察的对象。在目标中定义了一个观察者集合，一个观察目标可以接受任意数量的观察者来观察，它提供一系列方法来增加和删除观察者对象，同时它定义了通知方法notify()。目标类可以是接口，也可以是抽象类或具体类。 ConcreteSub…"}, {"id": "6844904053516795918", "title": "TypeScript真香系列-类", "desc": "TypeScript真香系列的内容将参考中文文档，但是文中的例子基本不会和文档中的例子重复，对于一些地方也会深入研究。另外，文中一些例子的结果都是在代码没有错误后编译为JavaScript得到的。如果想实际看看TypeScript编译为JavaScript的代码，可以访问Typ…"}, {"id": "6984056213134639112", "title": "TypeScript基础", "desc": "1.数据类型 ts中对于没有返回值的函数可以用void来表示 联合类型 用于变量的类型有多种 注意：接口也可以用来约束数组，但是不建议这么去做，比较麻烦，如下： 建议使用type来约束数组类型 typ"}, {"id": "6979855758963769352", "title": "Typescript学习笔记", "desc": "为什么使用Typescript？ 微软推出TypeScript主要是为实现两个目标： 为Javascript提供可选的类型系统； 兼容当前及未来的JavaScript的特性。 静态类型带来的好处： 有"}, {"id": "6844904083468337160", "title": "【译】在 React Native TypeScript 项目中使用 defaultProps", "desc": "随着时间的推移，TypeScript 已经改进了 defaultProps 相关的类型检查。本文将讲述最新的用法和旧版本中的用法以及一些问题。原文 尽管foo不是必须的，但是我们并没有把它被标记为可选的（例如 foo?: string）。标记为可选的意味着它可能是 undefi…"}, {"id": "6910509920286670856", "title": "解析 url query 的一些小技巧", "desc": "大背景这两天因为要写一个新项目，重拾了react-router-dom这个库，但是翻遍了整个文档，居然发现没有query解析的功能，唯一擦点边的是useLocation 这个api，但是这个返回的是s"}, {"id": "6844903773433921549", "title": "从 0 打造一个 React 的 TS 模板", "desc": "最近导师安排了一个任务，将一个已配置好的React、Webpack4等具有市场上常见功能的模板添加上TypeScript。俗话说：环境配置三小时，Coding不足5分钟。配置环境真的非常浪费时间，因此写个文章记录下，希望能对各位要配置TS的前端们有所帮助。 运行 yarn 或者…"}, {"id": "6844903801988595725", "title": "The TypeScript Tax", "desc": "用TypeScript要收税？"}, {"id": "6917549679421390861", "title": "TypeScript入门：对象类型的接口", "desc": "用任意的字符串去索引Names，得到的结果是字符串，但是不能在后面去声明一个number类型的属性y: number，因为两种索引签名是可以混用的，如果在后面加上[z: number]: string，那么既可以用字符串去索引Names也可以用数字去索引Names，注意数字索引…"}, {"id": "6844903701153480717", "title": "前端数据模型Model，适用于多人团队协作的开发模式", "desc": "本文讲述的数据模型并不是一个库，也不是需要npm的包，仅仅只是一种在多人团队协作开发的时候拟定的规则。至少目前为止，我们的开发团队再也没用过mock（虽然一开始也没用），也不用担心后台数据的字段或结构发生变动，真正实现前后台并行开发的愉快模式。 这四种，倘若我们在项目当中直接使…"}, {"id": "6979128272273702948", "title": "03-TS的类", "desc": "01-类 02-继承 03-多态 04-修饰符 05-readonly修饰符 06-存取器 07-静态成员 08-抽象类"}, {"id": "6844903752604844046", "title": "从零开始学typescript构建一个rest风格web服务", "desc": "随着应用的庞大，项目中 javascript 的代码也会越来越臃肿，团队之间的协作也会遇到难题，如果不一直看 api 文档，很难知道团队其他成员写的方法需要什么参数，返回结果又是什么。 解决的方案有很多，这里不比较各种方法的优劣，仅说下选择 typescript 的考虑：1、接…"}, {"id": "6979095365366579214", "title": "02-TS的interface", "desc": "ts的interface， 然后开始凑字数啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊"}, {"id": "6934905799009370126", "title": "TypeScript基础概览", "desc": "本文结构全部采用无序列表，是对 TS 基础知识的概览，发现这种结构阅读起来更顺畅，比那种分层次的减少了一层大脑加工。 前提：JavaScript 是一门动态类型语言，许多低级错误（类型错误）无法在开发阶段发现，为了减少 bug 出现几率，需要给 JavaScript 加入类型定…"}, {"id": "6921235508970389518", "title": "Typescrit 从入门到放弃系列(十八)-18.类型声明", "desc": "二. 类型声明文件"}, {"id": "6844903631183937549", "title": "前端工程化之路-语法检查", "desc": "javascript作为前端的利器，上可撸AI，下可写驱动，（好吧，我承认我瞎编的），但是js作为一门弱类型的动态语言，在给我们带来方便的同时，也会悄悄的埋下坑，尤其是在大型项目中，一不小心，就要加班"}, {"id": "6844903545754353677", "title": "用TypeScript来写推箱子游戏", "desc": "利用Vue、TypeScript 实现的一个推箱子游戏，用来学习TypeScript"}, {"id": "6844903687572160526", "title": "Nuxt升级2.0.0时出现的问题", "desc": "喜大普奔，Nuxt终于正式发布2.0了，最近趁热把博客从1.4升级到了2.0，并且用Typescript重构了下，可以点Jooger.me看下，在升级Nuxt过程中出现了一个小问题关于release2"}, {"id": "6844904079068495879", "title": "TypeScript入门篇（一）", "desc": "TS是JS的超集，是建立在JS上的一门语言。 TS可以使用JS之外的扩展语法、面向对象、静态类型。 1. TS的定义 推荐使用VSCode编辑器。因为TS和VSCode都是微软推出的。VSCode做了很多对TS的适配。 定义：TypeScript is a typed supe…"}, {"id": "6951688861219029028", "title": "TypeScript 整理", "desc": "TypeScript 是什么TS与JS的区别层面TypeScriptJavaScript语言层面TS为JS的超集，用于解决大型项目的代码复杂性一种脚本类语言类型层面强类型，支持静态与动态类型弱类型，没"}, {"id": "6844904205757464589", "title": "typescript 类型基础", "desc": "TypeScript 是 JavaScript 的一个超集，意味着js本身的语法在ts里面也能跑的通。ts一方面是对js加上了很多条条框框的限制，另一方面是拓展了js的一些能力，主要提供了「类型系统」和「对 ES6 的支持」，它由 Microsoft 开发，代码开源于 GitH…"}, {"id": "6844903668806844424", "title": "使用 TypeScript 改造构建工具及测试用例", "desc": "最近的一段时间一直在搞TypeScript，一个巨硬出品、赋予JavaScript语言静态类型和编译的语言。 第一个完全使用TypeScript重构的纯Node.js项目已经上线并稳定运行了。 第二个前后端的项目目前也在重构中，关于前端基于webpack的TypeScript套…"}, {"id": "6881546991705423885", "title": "一篇没代码的技术文章—尝试vscode插件", "desc": "这是一篇没代码的技术文章，仅仅想尝试分享一些总结和想法。 所以最后选择不分享api了，直接聊聊零零散散的东西，当然我也做好没啥阅读量的准备。 近2年大部分时间都在折腾小程序，微信、百度、字节、支付宝、360等等平台都在探索。 在6月份WWDC 2020 上推出iOS的App C…"}, {"id": "6844903520504659976", "title": "vue-cli 中使用 TypeScript", "desc": "在 vue-cli 中使用 TypeScript 的一次小结"}, {"id": "6844903505832968206", "title": "antd源码解读（7）- Breadcrumb", "desc": "Antd的面包屑组件是一个能够结合路由进行跳转页面的组件，其中对于路由的支持是react-router@3以及react-router@4。"}, {"id": "6844903713287438344", "title": "可能是基于 Hooks 和 Typescript 最好的状态管理工具", "desc": "未能找到一个完美满足这两点的，所以我决定自己造了一个：叫 Stamen。 首先是 简单易用，并且适合中大型项目，Stamen 的 Api 设计借鉴了 dva、mirror、rematch，但却更简单，主要借鉴了它们的 model 的组织方式：state、reducers、eff…"}, {"id": "6944705046458138637", "title": "TypeScript数据结构与算法：栈", "desc": "《学习 JavaScript 数据结构与算法》的地铁读书计划已经读到了图的深度优先遍历部分，现在边学边复习，用刚学的 TypeScript 重新捋一下每种数据结构的源代码。源代码参考自作者的Github 仓库。 栈 （Stack）是一种遵从 后进先出（Last In First…"}, {"id": "6844904052338212878", "title": "TypeScript真香系列-基本类型和变量声明", "desc": "TypeScript真香系列的内容将大量参考中文文档，但是文中的例子基本不会和文档中的例子重复。另外，文中一些例子的结果都是在代码没有错误后编译为JavaScript得到的。如果想实际看看TypeScript编译为JavaScript的代码，可以访问TypeScript的在线编…"}, {"id": "6950942954617831432", "title": "Hello Typescript（10）-- 交叉类型、联合类型、索引类型、映射类型、条件类型", "desc": "所谓高级类型，就是 `ts` 为了保障语言的灵活性所引入的语言特性。这些特性有助于我们应对复杂多变的开发场景。"}, {"id": "6908364086304571400", "title": "TypeScript学习笔记系列二(类)", "desc": "思维导图定义：同一类的东西放在一起（进行归类）构造器：初始化类属性：存放特征函数：操作修饰符：访问public：共有（默认，外部可以使用）private：私有（只有类内部可以使用，子类不能使用）pro"}]