[{"id": "6972720564301463565", "title": "CSS  :root  CSS 变量  var() env() 的学习", "desc": "在 CSS 的世界里面，:root、CSS 变量、var()、env() 是经常一起碰到的几个概念。温故而知新，下面一起学习一下用法。"}, {"id": "6844903656853078029", "title": "前端神器—Google Chrome Devtools细节详解", "desc": "本人是一位没出实习期的前端小菜鸟一枚，这几个月发现了Google Chrome Devtools的易用性非常高的小功能和小细节 特意分享给大家。欢迎大家收藏+点赞。新人需要鼓励哈哈 1. styles内 悬浮样式名可以高亮符合样式名的所有元素（如图） 这个功能还是比较有用的。适…"}, {"id": "6948961142530113543", "title": "CSS - flex弹性布局+rem适配布局", "desc": "Less是css的扩展语言，也是css的预处理器。Less是一门CSS预处理语言，它扩展了CSS的动态特性"}, {"id": "6987223635643596807", "title": "CSS实现元素居中N种方法 ——比较全，附上 demo", "desc": "这阵子在准备面试，复习一些基础知识，发现元素居中的实现方式特别多，网上那些整理的也比较乱，就准备自己动手整理一下。影响元素居中的因素很多，不同元素类型。是否设置宽高、不同实现方式"}, {"id": "6905926398037196813", "title": "快速为你的网站添加暗黑模式", "desc": "现如今手机和电脑等设备无处不在，随时随地都有屏幕伴随着我们的工作与生活。在很多场景下，暗黑模式都有助于我们更轻松地浏览内容，譬如长时间在电脑前工作，睡前的“玩一会手机”。为自己的网站添加暗黑模式也比较简单，只需要几行 css 足以搞定。 在现代浏览器中，使用 prefers-c…"}, {"id": "6844903567032057864", "title": "2018年你应该了解的前端新技术", "desc": "CSS Grid 布局由两个核心组成部分是 wrapper（父元素）和 items（子元素）。 wrapper 是实际的 grid(网格)，items 是 grid(网格) 内的内容。下面是一个 wrapper 元素，内部包含6个 items ： 为了使其成为二维的网格容器，我…"}, {"id": "6844903680076939272", "title": "实战项目之自动简历", "desc": "一个可以自动播放书写过程简历，主要运用原生JS和CSS3的知识点。 既要开始，也要结束。想办法取消闹钟 运行一下。黑人问号脸——我的换行没啦？？？ 但是在CSS中这样的语法是不允许的。 我们需要让代码默认是平平无奇的样子，然后再增加高亮效果。这样活增加视觉的观赏性。 我们需要在…"}, {"id": "6844903599474999309", "title": "饿了么购物车动画", "desc": "之前用饿了么印象最深刻的是联动菜单和小球飞入购物车动画，所以想看看别人是怎么实现的，但是看了很多仿饿了么的demo都是实现了一个完整的大的项目，要找到那个小模块很麻烦，所以自己将联动菜单和动画提取出来写了一个demo，方便学习。 1. 联动菜单 该元素定位表现为在跨越特定阈值前…"}, {"id": "6844903594181787656", "title": "用CSS Houdini画一片星空", "desc": "要问2018最让人兴奋的CSS技术是什么，CSS Houdini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome 65才正式支持。 这3个例子都是用了Houdini里面的CSS Paint API。 第1个例子如果使用传…"}, {"id": "6914279543716970509", "title": "介绍两种 CSS 方法论", "desc": "说起 CSS 命名规范，大家应该都很熟悉，或者应该听说过 BEM 。BEM 是由 Yandex 团队提出的一种 CSS Class 命名方法，旨在帮助开发人员创建更好的且结构一致的 CSS 模块。 BEM 将页面的类名分为块（Block）、元素（Element）、修饰符（Mod…"}, {"id": "6998538452539015176", "title": "关于CSS的颜色，你知道多少？", "desc": "这是【从头学前端】系列文章的第十八篇-《CSS颜色的基本概念以及用法》 关于CSS颜色的内容，首先需要来了解一些有关颜色的相关概念，具体有如下几个概念："}, {"id": "6996161108834779173", "title": "css 选择器", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战” css 的选择器划分有如下几种 1 简单选择器 2 复合选择器 3 复杂选择器 其中复合选择器和复杂选择器都是由简单选择器组合而成，这可"}, {"id": "6996532696868470815", "title": "老司机重学CSS：盒模型", "desc": "在 CSS 中，所有的元素都被一个个的 “盒子（box）” 包围着，我们广泛地使用两种“盒子” —— 块级盒子 (`block box`) 和 内联盒子 (`inline box`)。"}, {"id": "6844903556420632583", "title": "[译] 这些 CSS 命名规范将省下你大把调试时间", "desc": "我听说很多开发者厌恶 CSS。而在我的经验中，这往往是由于他们并没有花时间来学习 CSS。 CSS 算不上是最优美的『语言』，但迄今二十多年来，它都是美化 web 举足轻重的工具。从这点来说，也还算不错吧？ 尽管如此，CSS 写得越多，你越容易发现一个巨大的弊端。 因为维护 C…"}, {"id": "6844904072206614535", "title": "选择某类的最后一个元素——CSS3伪类选择器走过的坑", "desc": "众所周知，在CSS3规范中，添加了许多了伪类选择器，这些选择器代替了不少JS的工作，让我们从以前通过获取DOM节点进而进行样式修改的操作，变得更加便捷高效。 然而我在近期开发使用的过程中，遇到了不少坑，事实证明认真阅读文档还是很有必要的，所以这里总结分享几个我遇到的问题，通过一…"}, {"id": "6844903683432382478", "title": "如何管理 CSS  类库 / 内裤", "desc": "命名 是我认为 CSS 里最难的问题没有之一。 CSS 是一个不强调逻辑，而更侧重表现的一门所见即所得的语言。你写了一个属性它就有一个样式，就好比嗑瓜子，你每嗑一下都能及时的得到一个奖励。这种愉悦感是别的开发语言所不具备的。 CSS 也不像其它侧重逻辑的语言，有比较多的代码管理…"}, {"id": "6972759988632551460", "title": "仅用CSS几步实现赛博朋克2077风格视觉效果", "desc": "我非常喜欢赛博朋克2077官网的设计风格，因此本篇文章主要以 2077官网为例，通过几个例子，依次实现赛博朋克风格元素效果。"}, {"id": "6844903566298054670", "title": "巧用 CSS 动画实现动态气泡背景", "desc": "然鹅，还是被昨晚特意设置的八个闹钟⏰吵醒，冬天早上起床的难度...想必各位都心有体会 😭，抱着一万个不情愿起床早早地来到了办公室，还是熟悉的环境，还是熟悉的味道。。。 还有，熟悉的任务需求😂。 今天的第一个任务是写个登录页面，老大给了我一个参(chao)考(xi)案例，大家…"}, {"id": "6906328075353456654", "title": "你需要知道的css布局", "desc": "布局是我们前端开发中不可避免的，简单回忆一下 css 的布局方案，供大家参考以及自己参阅。 这里的居中布局是不定宽度为前提，固定宽度情况也包含其中。 这个方案的兼容性比较好，可兼容到 IE8，对于 IE567 不支持inline-block,需要使用 css hack 进行兼容…"}, {"id": "6992417388545179656", "title": "HTML、CSS、JavaScript 总结", "desc": "1、开发技巧2、常见问题2.1、分割线标签、文字居中、背景图片充满全图2.2、HTML如何引入外部JS文件2.3、HTML中 块级元素 如何转为 行内元素??2.4、怎么在字的中间加一条横线表示这些字被划掉了，用css。2.5、用a标签在当前网页跳转和打开新页面再跳转2.6、锚点..."}, {"id": "6844903892027703309", "title": "【不可思议的CSS】天气不可能那么可爱", "desc": "只有你想不到，没有 css 做不到。今日分享只由 css 实现的效果 - weather 以下是为效果图的所有实现源码，因为 css 内容较长，相关 css 可以点击查看展开阅读。 点击访问 这里 查看源码，并附有 codepen 在线编辑为您带来不一样的体验。可以点个 sta…"}, {"id": "7006859845638815775", "title": "CSS盒模型", "desc": "CSS盒模型 两种盒模型 content-box 内容盒： 宽度只是内容的宽度 border-box 边框盒： 宽度包括内容+ padding + border的宽度 content-box 内容盒："}, {"id": "7002590410161782797", "title": "VUE中对象与数组监听问题", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 问题起源 起源于最近的生产项目，父组件向子组件传递一个Object数据，因为这个Object数据太多，于是我“偷懒”了一下，在子组件的da"}, {"id": "6968034561791885319", "title": "React项目使用styled-components后的几点感受", "desc": "最近在项目里使用了 styled-components 来写 CSS，感觉有一些好处，但也遇到了一些问题，本文简单记录一下这一个多月的使用感受。"}, {"id": "6982959609103253512", "title": "CSS选择器优先级、层叠、继承", "desc": "为什么我的css代码不起作用，也许是有人在我不知道的地方给我加了一个 !important 故意整我~~"}, {"id": "6844904039558152199", "title": "【译】推荐的十个CSS动画库", "desc": "在这篇文章中，我将向你展示目前为止，我发现/遇到的十个优秀的CSS动画库。 我大约尝试30种，但是这十种是我找到最好的。 请注意，这些库不需要引入JavaScript就可以运行。 这个站点是我不久前才发现的，但是我立马爱上了她。实话说，它值得被提出。 你可以选择你喜欢的动画类型…"}, {"id": "6992845192961196062", "title": "使用 CSS Transition 通过改变 Height 来展开收起元素", "desc": "一个常见的开发需要，我们希望折叠元素的一部分，直到需要它为止。一些常见的框架（如 Bootstrap 和 JQuery）提供了转换效果。然而，CSS Transition 在转换高度方面给予了我们很大"}, {"id": "6844903630714519559", "title": "两天撸一个天气应用微信小程序", "desc": "II、d0e51c8 版本之后为小程序云开发版本，若未开通云开发功能，为不影响小程序正常运行，可以将版本号回退到 git reset d0e51c8 --hard，或，将云开发相关代码注释掉。具体可查看这里。 这是一个完整的已经线上运行的天气应用小程序，点击可查看源码，可随意 …"}, {"id": "6844903583419203592", "title": "不可思议的纯CSS导航栏下划线跟随效果", "desc": "在继续阅读下文之前，你可以先缓一缓。尝试思考一下上面的效果或者动手尝试一下，不借助 JS ，能否巧妙的实现上述效果。 OK，继续。这个效果是我在业务开发的过程中遇到的一个类似的小问题。其实即便让我借助 Javascript ，我的第一反应也是，感觉很麻烦啊。所以我一直在想，有没…"}, {"id": "6978841032179843080", "title": "以CSS为例，聊聊我所理解的兼容性问题及解决方案", "desc": "关于前端为什么会出现那么多兼容性问题的一些思考和心得，一起来来来来来来来来来来来来来来来来来看看吧~"}, {"id": "6963637688360501261", "title": "【不一样的CSS】实现垂直布局的 8 种方式", "desc": "【不一样的CSS】实现垂直布局的 8 种方式 单行文本垂直居中 行内块级元素垂直居中 使用 Flex 实现垂直居中 使用 Grid 实现垂直居中"}, {"id": "6993182909108584484", "title": "浅谈原生CSS变量（自定义属性）", "desc": "在CSS中使用变量并不是一个稀罕事，早在2007年Sass的诞生，就可以通过预处理的方式去处理变量，相继的又出现了Less和Stylus预处理器。 变量 （又称为自定义属性 ）"}, {"id": "7000660401885036551", "title": "【老生常谈👴】使用css绘制三角形", "desc": "我认为在不断探索前端领域的前沿技术时，也不应该抛弃掉\"地基\"知识，正如我博客首页里的那句话：万丈高楼平地起，一砖一瓦皆地基，我们在不断攀登技术的高峰时，也必须脚踏实地，一步一个脚印地前进🧗‍"}, {"id": "6844903951322578958", "title": "【译】这44个 CSS 精选知识点你能在30 秒内给出答案吗？", "desc": "一个周五的晚上，闲来无事整理下自己的 github（经常做收藏党），今天打算都过一遍，发现一个star很高的项目，里面有大量的 CSS 片段，而且标题很诱人，然后又花了将近1个小时从头到尾过了一遍，其中一些是我们常用的一些知识点，另外也包含一些比较新的属性的应用，知识点挺多的，…"}, {"id": "6990972557528662053", "title": "「HTML+CSS」自定义加载动画【049】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为24px 背景色：红色 效果图如下 步骤2 span标签圆角化 效果图如下 步骤3 为span添"}, {"id": "6998416606384619551", "title": "页面导入样式时，使用link和@import有什么区别？", "desc": "文章正文第一句：本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 1. 区别 link是XHTML标签,它不仅可以引入css文件，"}, {"id": "6844903727552266254", "title": "2018 前端开发分享", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 查阅网上诸…"}, {"id": "6988063543341891615", "title": "放大一个组件，你的CSS需要改动几处？", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 尽量减少代码重复 尽量减少改动时要编辑的地方 尺寸: 放大一个组件，你的CSS需要改动几处 当某些值相互依赖时，应"}, {"id": "6988877671606272031", "title": "CSS盒模型的面试六问你能答出几个？", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 对于前端面试来说，css盒模型肯定是必考必问的前端知识点，因为这是CSS基石中非常重要的内容，而且它关联的知识也非"}, {"id": "6977281427935068197", "title": "小摩尔来了！5分钟带你学会小摩尔眼睛跟随鼠标移动效果", "desc": "活抓一只可爱魔性的小摩尔，摩尔庄园种地不过瘾，自己打出一个小摩尔属实快乐，我们一起来看看小摩尔是怎么实现的吧~"}, {"id": "6998371884815351845", "title": "【动画消消乐】HTML+CSS 自定义加载动画 070", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度、高度均为5px 背景色：白色 "}, {"id": "6844904174623129607", "title": "flex布局的那些事儿", "desc": "在学习flex布局之前，我们是如何让如下四个盒子排在一列呢？我们也许会用浮动、定位等等。当我们使用的时候我们会觉得很麻烦，需要调间距、量距离等。然而学习了felx布局，我们可以轻松的解决这些问题。 2009年，W3C 提出了一种新的方案——Flex 布局，可以简便、完整、响应式…"}, {"id": "6977352311739777061", "title": "百叶窗效果 html+css", "desc": "这是我参与更文挑战的第22天 效果： 大家好，今天分享一个百叶窗css效果，其实实现很简单，打开vscode，一起冲冲冲~ 实现： 1.定义父盒子，放入5张图片： 2.给父亲元素宽，高： cursor"}, {"id": "6910944605123018766", "title": "手摸手带你学CSS", "desc": "在大一的时候，上过网页设计的课程，当时感觉学的还不赖，但也确实挺长时间没碰了，很多东西都忘了，所以这段时间在B站上找了视频重新学了一遍。好记性不如烂笔头嘛，所以一边学一遍做了详细的笔记，以后有什么不记得的就可以拿出来复习复习。 CSS中的选择器可以将HTML中的标签选择出来，然…"}, {"id": "6952762295374053412", "title": "Grid vs Flexbox：哪个更好？", "desc": "这个话题已经争论了很多次，哪个更好？对您的网站布局和内容使用Grid(网格)系统还是Flexbox？让我们深入了解两者之间的主要区别以及何时使用它们。网格布局——二维网格布局（即Bootstrap或C"}, {"id": "6966108618299015182", "title": "学习CSS创建霓虹灯文字总结", "desc": "霓虹灯文字可以为任何网站增添美好的未来感。我一直都很喜欢霓虹灯的那种未来感。 在本文中，我们将使用CSS和keyframes实现文本发光效果，以及各种霓虹灯动画的方法。 最终效果： 为文本添加发光效果"}, {"id": "6844903513651150856", "title": "详解前端响应式布局、响应式图片，与自制栅格系统", "desc": "什么是响应式？同一个页面在不同屏幕尺寸下有不同的布局。 传统的开发方式是PC端开发一套，手机端再开发一套，而使用响应式布局只要开发一套就好了，缺点是CSS比较重。 栅格系统用于处理页面多终端适配的问题。栅格的响应式能力，得益于CSS3媒体查询（Media Queries）的强力…"}, {"id": "6986472855261151246", "title": "react-native的定位样式", "desc": "前言 对于一个经常游走于 web 端的前端开发来说，我们都知道 css 的 position 属性，position: 'absolute' 的元素，永远是相对与最近一个设置了position: re"}, {"id": "6919757661030318093", "title": "前端移动端和PC端自适应解决方案", "desc": "不懂原理的同学们也没关系，下面跟着操作就可以实现。 这个px不转rem是依赖注释的，可是生产环境打包的时候就会把注释去掉，这样导致你写了 /*no*/不转这条css属性，也没效果，打包删除了注释，它就会自动帮你转了。 解决方法一. 可以把样式写到index.html文件的sty…"}, {"id": "6844903662326644744", "title": "【译】谈橡皮筋特效的解决方案", "desc": "本文翻自Scroll Bouncing On Your Websites，拜读之后收获颇多，结合自己的理解，将该文章翻成中文，一方面加深理解另一方面好文共享。 本文介绍了不同浏览器上弹簧滚动(即scroll bouncing)特效及实现，并回顾了网上几种常见的解决方案,顺便介绍…"}, {"id": "6971013190524076069", "title": "学习 CSS @media 媒体查询 ", "desc": "这是我参与更文挑战的第7天，活动详情查看： 更文挑战 属性简介 基于一个或多个 媒体查询 的结果来应用样式表的一部分。就是可以根据不同的媒体类型定义不同的样式。 当页面需要响应式布局时，@media "}, {"id": "6986935474635931656", "title": "解决position:fixed导致下层组件覆盖问题", "desc": "解决position:fixed导致下层组件覆盖问题 问题描述 当上层组件固定（多见于导航栏的css样式）时，易造成下层组件被覆盖的问题。"}, {"id": "6992410628321181704", "title": "【动画消消乐】HTML+CSS 自定义加载动画 053", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 相对定位 步骤2 利用sp"}, {"id": "6973208711800193031", "title": "CSS | css画鸡蛋和心形的思路解析", "desc": "这是我参与更文挑战的第5天，活动详情查看 更文挑战 在之前的文章【CSS | 4句CSS送你一个小月牙】中，汇总了很多经常用到的css形状，本篇文章主要是分析一下鸡蛋和心形的实现思路。"}, {"id": "6952150039732944910", "title": "web图标的工程化方案", "desc": "如何管理图标是我们在web项目开发过程中都会遇到的问题。随着web技术的发展，图标方案也经历了几个阶段，以下这几种图标方案也基本能涵盖web图标使用的历程。"}, {"id": "6854573210214596615", "title": "收藏！常用的CSS函数~", "desc": "1. attr() 2. calc() 3. linear-gradient() 4. radial-gradient() 5. repeating-linear-gradient()"}, {"id": "6967000761322438692", "title": "CSS3新增动画、过渡效果及样式、移动端适配", "desc": "CSS3新增动画、过渡效果 transform、transition、animation，Css3新增的样式、媒体查询、兼容处理"}, {"id": "6953500845426081800", "title": "【不一样的CSS】彻底搞懂 margin 重叠问题", "desc": "margin 这个 CSS 属性的重叠问题，经常在我们的开发过程中会遇到很多问题，严重的时候会导致我们的页面整体布局都会变乱"}, {"id": "6844903936910966791", "title": "巧用rem实现数据可视化大屏", "desc": "amfe-flexible主要用于解决移动端的适配问题，amfe-flexible将html的font-size设置为屏幕分辨率宽/10，即1920 * 1080的分辨率html的font-size就应该是192。 rem是CSS3新增的相对长度单位，是指相对于根元素html的…"}, {"id": "6998876528230531108", "title": "【CSS】flex布局简介", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 初识flex布局 01.几个概念 flex布局 即弹性盒子布局，是给父元素添加flex属性，以控制子元素的位置和排列 主轴和侧轴 主轴：即"}, {"id": "6844903600636821518", "title": "前端将数据转化为弹幕效果的实现方式", "desc": "这个需求如题，大体上是将文章的评论数据，在文章的首图上面以弹幕的形式出现。当时在做这个需求的时候，花了挺多精力的，踩了很多坑，现将弹幕的实现思路写出来，如果喜欢的话可以点波赞/关注，支持一下，希望大家看完本文可以有所收获。 实现弹幕的原理，并不算太复杂，耗费一些时间，怼一怼应该…"}, {"id": "7003992651431149581", "title": "CSS布局技巧", "desc": "布局的传统解决方案是基于盒模型，依赖 position属性 + float属性 + display 属性。它对于那些特殊布局也有其局限性，比如，垂直居中就不容易实现。"}, {"id": "6844903896071012366", "title": "详细教你微信公众号正文页SVG交互开发", "desc": "现在很多公众号都直接在正文页通过SVG交互动画增加文章的阅读交互体验，而不再跳转H5。结合这一需求，本期分享的内容是如何开发交互式SVG，并嵌入微信公众号正文页。设计师和前端开发同学都可以来学习下。学会了可以接这方面的私活了，短平快地赚小钱钱。 技术要有落地的应用场景才能发挥实…"}, {"id": "6984649100813664270", "title": "从页面加载到数据请求，前端页面性能优化实践分享", "desc": "背景 做过前端开发都知道前端的工作内容是很多的，对于HTML、CSS、Javascript、Image、Flash等各种内容的使用。为了更好提升应用的性能，我们需要对各种资源内容进行不同方面的优化。 "}, {"id": "6989085136373415973", "title": "CCS实现带下拉列表的导航栏", "desc": "初学CSS，运用无序列表、div标签和选择器实现一个简易的具有下拉列表的导航栏，以AMD官网的导航栏作为模板，对它进行简单的复刻"}, {"id": "6997342677888925733", "title": "flex布局一行显示，显示不下的省略号显示", "desc": "因为整个头部是flex布局，detail为右侧占flex：3 1 1，并没有设置固定的宽度，当box设置不换行时，拿到的宽度是整个box的宽度,会导致如下样式超出问题 所以需要把detail设置wid"}, {"id": "6905921139164315661", "title": "元素水平垂直居中", "desc": "flex布局适用于子元素是行内元素、行内块元素、块元素，适用性比较广。 该方法也适用于子元素是行内元素、行内块元素、块元素，适用性比较广。 这是因为 position: absolute; 和 float 属性会隐式地改变元素的 display 类型（display: none…"}, {"id": "6844903650402238477", "title": "神奇的选择器 :focus-within", "desc": "CSS 的伪类选择器和伪元素选择器，让 CSS 有了更为强大的功能。 有个错误有必要每次讲到伪类都提一下，有时你会发现伪类元素使用了两个冒号 (::) 而不是一个冒号 (:)，这是 CSS3 规范中的一部分要求，目的是为了区分伪类和伪元素，大多数浏览器都支持下面这两种表示方式。…"}, {"id": "6892593515147034637", "title": "[CSS]线性渐变的凹面矩形过渡动效", "desc": "本文聊一聊线性渐变的凹面矩形过渡动效的难点和思路，主要介绍凹面矩形实现、给凹面矩形加线性渐变、线性渐变背景色的过渡。如果有更好的实现方案，欢迎在评论区和我讨论。 使用radial-gradient径向渐变来实现，将渐变的模糊距离缩小到0就能看到清晰的圆形界限。 径向渐变如果模糊…"}, {"id": "6989525651891945486", "title": "CSS的flex布局", "desc": "1.认识flex布局 flex布局是目前web开发中使用最多的布局方案： 两个重要的概念: 2.flex布局模型 main axis称为主轴： cross axis称为交叉轴： 3.flex相关的属性"}, {"id": "7000746275679240199", "title": "极其富有趣味性地学习CSS选择器？", "desc": "分享一个学习或练习CSS选择器的极具趣味的网站与我自己做的解法。目前是更新了 32 关卡，每关都能学到一个小知识点，从简单到逐渐复杂。非常适合初学者，老手拿来复习也有意思~"}, {"id": "6997428899076374565", "title": "总结css隐藏元素的几种方式", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 前言 我们在写页面的时候，经常需要对元素执行隐藏操作，一般做法是用css的方法去隐藏，下面我把这些方法罗列一下，做一下对比，看完之后可以根"}, {"id": "6844903497687646222", "title": "移动 Web 开发问题和优化小结", "desc": "到目前为止，互联网行业里，手机越来越智能化，移动端占有的比例越来越高，尤其实在电商，新闻，广告，游戏领域。用户要求越来越高，网站功能越来越好，效果越来越炫酷，这就要求我们产品质量越来越高，web前端开发而言是一个挑战，是一个难题，也是一个机遇。如何让我们所开发的手机页面能有更好…"}, {"id": "7005761536912424968", "title": "css隐藏video标签控制栏组件", "desc": "当 video 标签添加上 controls 属性时，页面上会显示出所有的控制组件。若有些组件不需要只需要在css中设置相关属性把它隐藏掉即可。 <video controls></video>"}, {"id": "6998333978625179655", "title": "纯css实现横向动态加载条", "desc": "1.首先看一下效果 2.直接上代码 3.我这里颜色用的是 #FEDA5D 和 透明色 大家可以根据自己业务需求更改 4.顺便 说一下 css 之前遇到的问题及解决方案"}, {"id": "6844903577761103880", "title": "面向Vue新人：使用Vue写一个图片轮播组件", "desc": "在制作这个组件之前，笔者google了不少关于轮播的文章，发现实现一个轮播的思路虽然各有不同，但是大的逻辑其实差不多，本文主要依据慕课网上焦点轮播图特效这节课，不过慕课网主要用原生JS写，而笔者则用Vue进行了重构，并且进行了一点修改。完成后的组件效果图如下： 1. 要写一个什…"}, {"id": "6844904112270622728", "title": "移动端适配 - 基础知识篇", "desc": "设备像素又称物理像素（physical pixel），是显示器中最小的物理单元，设备能控制显示的最小单位。 每个像素根据操作系统的指示设置自己的颜色和亮度。 任何设备的物理像素数量都是固定的。 由程序使用并控制的虚拟像素，比如web编程中的CSS像素(px)、安卓（dp）、io…"}, {"id": "6973555813181259783", "title": "CSS 弹性浮动布局应用", "desc": "碰到不支持 flex 的项目怎么办？浮动布局一样可以实现。本文将列举几个常用的布局使用浮动实现，相信能适用于绝大部分布局，多一条思路，多一种方法，快来学习吧"}, {"id": "6999466004745027614", "title": "【动画消消乐 】HTML+CSS 吃豆豆动画 073", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 上、下、左边框为48px 白色 实线"}, {"id": "6935952741755781156", "title": "针对CSS说一说｜技术点评", "desc": "哪吒人生信条：如果你所学的东西 处于喜欢 才会有强大的动力支撑。 %。 webkit引擎的浏览器，如Safari,Chrom的私有属性的前缀是-webkit-，gecko引擎的浏览器，如Firefox的私有属性的前缀是-moz-，Opera浏览器的私有属性的前缀是-o-，IE浏…"}, {"id": "6844903826885967880", "title": "三栏布局之自适应布局", "desc": "在前端的面试中，经常会遇到的一个问题就是“怎么实现左右两端宽度固定，中间自适应”。下面我总结了五种常见的方式实现。"}, {"id": "6844903591379992589", "title": "彻底了解渲染引擎以及几点关于性能优化的建议", "desc": "在日常开发过程中，要编写性能足够优秀的代码，构造更加稳定的应用，我们不仅要对javascript本身的执行机制有深入的了解，更要对其宿主环境有更加深刻的认识，理解其工作原理以及组成结构，它可以帮助我们对web世界的运转模式有更高层级的认知。这次想要介绍的是浏览器的渲染引擎。 在…"}, {"id": "6844903648351256590", "title": "日常发骚 第一期", "desc": "上个周末由于搬家原因耽搁了，导致没有写，抱歉了自己，还有关注我的各位。 说一下个人经历吧，我属于北漂一族，刚来北京三四个月的那种。别人眼中的北京都是忙碌的，虽然忙碌，但是他们也建议我来北京一趟。我怀揣着对北京的向往，以及高薪资，高技术的诱惑就来了。北京的扶梯不像青岛，会留出来靠…"}, {"id": "6844903845953273864", "title": "从头开始复习css之BFC", "desc": "其实你叫我单纯的回答你们什么是BFC，我只能告诉你BFC的全称（Block Fromatting Context）和中文翻译名（块级格式化上下文）。如果你叫我深入的解释这这个名词，这就好比你叫我来解释什么叫男生/女生一样，大家我都知道这两个名词，但是你叫人跟你解释清楚却是很麻烦…"}, {"id": "6844903865502924808", "title": "CSS进阶（6）—— 浅尝盒模型中最友好的border", "desc": "常用的border-style有四种类型：none，solid，dashed和dotted。 border-style的默认值是none，也就是不参与计算，这有点类似于display:none，因此如果你单纯设置border-width和border-color是不会有边框显示…"}, {"id": "6847902216762687496", "title": "css层叠上下文和浏览器渲染过程", "desc": "1. 层叠上下文 将HTML比做一个三维的结构，众 HTML元素基于其元素属性按照优先级顺序占据这个空间。 z-index可以将它理解为空间直角坐标系中的z轴，值越优先级越高。它可以用来设置元素在HTML中占据这个空间的优先级。 而在HTML的DOM树中每一个DOM元素都可以有…"}, {"id": "6844903495942799373", "title": " W3C CSS Transforms摘译", "desc": "CSS Transforms可以对一个元素进行二维平面或三维空间的变换，如translate, rotate, scale和skew等变换。 下面是对W3C官网CSS Transforms模块的部分摘译，为了理解的连贯性，调整了W3C规范中相关章节的顺序。 用户浏览器（UAs）…"}, {"id": "6844903646673518600", "title": "使用grid来进行常见布局", "desc": "grid 布局是W3C提出的一个二维布局系统，通过 display: grid 来设置使用，对于以前一些复杂的布局能够得到更简单的解决。本篇文章通过几个布局来对对 grid 布局进行一个简单的了解。目前，grid 仅仅只有 Edge使用前缀能够支持，为了更好地体验，可以使用 C…"}, {"id": "6844903570458804232", "title": "使用HTML5和CSS3制作一个模态框", "desc": "模态框，前端开发必不可少的组件之一，广泛的用于：提示信息、操作反馈、加载动画、登录/注册表单等，它通常由 Javascript 来动态创建，而使用 JavaScript 并不能很好地适应渐进式增强或优雅降级，使用 HTML5 和 CSS3 也可以轻松创建一个模态框。"}, {"id": "6844903605271527438", "title": "深入理解-CSS内联元素之vertical-align", "desc": "从头到尾，我们都试图在梳理清楚内联元素中一些较为重要的概念，其中一个很主要的目的，就是为了解决内联元素的对齐问题。对于很多前端开发来说，对齐问题一直是一个非常常见，但有时候又让我们感到非常困惑的问题。在这篇文章里我会用最简洁的解释来解释内联元素到底是怎么回事。这篇换个形式，我们…"}, {"id": "6844903893277605901", "title": "【英】纯CSS实现多行文本超出长度省略", "desc": "纯CSS实现多行文本超出长度省略， IE不支持。"}, {"id": "6844903726189117447", "title": "Omi 入坑指南 The second floor 初步接触", "desc": "PS：由于Omi 使用了Shadow Dom 所以你使用小程序开发的时候会有种很熟悉的感觉，一说小程序就有种想揍打微信团队的冲动，做的微信开发者工具简称要人命，体验不是一般的差。 就会很明白的知道 之前的 my-app 是怎么来的。就是 define (string,xxx)中…"}, {"id": "6922819791405187079", "title": "BFC—格式化上下文", "desc": "块格式化上下文（BlockFormattingContext，BFC）是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。块格式化上下文对浮动定位与清"}, {"id": "6945710215832862756", "title": "CSS盒模型", "desc": "两种盒模型1.content-box 内容盒： 宽度只是内容的宽度2.border-box 边框盒： 宽度包括内容+ padding + border的宽度一般用border-boxMargin合并兄"}, {"id": "6945706364538716174", "title": "CSS语法和文档流", "desc": "block元素的高度是由内部文档流元素决定的，这就意味着，如果元素脱离了文档流，block元素就不会计算它的高度。"}, {"id": "6844903721508290568", "title": "也来谈谈CSS层叠", "desc": "稍微有点HTML和CSS基础的人都能看出，h1最终呈现的字体大小是10px，因为内联样式的优先级更高。 打开Chrome开发工具，可以看到对h1的字体大小有三处声明。浏览器决定最终采用的哪个值，是通过各种考量的。各处声明的PK过程我们称之为层叠。PK的胜负由以下三个方面决定： …"}, {"id": "6844903560644313101", "title": "后端工程师入门前端页面重构（二）：心法 I", "desc": "本文由 KnewHow 发表在 ScalaCool 团队博客。 从左到右，从上到下，化整为零。 那么在接下来的几篇文章中，我们就来聊聊页面布局的「心法」和一些具体的「招式」。 如果说口诀是页面布局的原则，那么心法就是对页面布局中一些重要概念的认识。 在上一篇文章，我们一直推荐使…"}, {"id": "6844903648724680711", "title": "如何在 JavaScript 中获取 CSS 值", "desc": "有时候单独的使用CSS是不够的。您可能需要使用JavaScript控制CSS值。但是你如何在JavaScript中获得CSS值？ 有两种可能的方式，取决于您是尝试获取内联样式还是计算样式。 内联样式是存在于 HTML style 属性(attribute)中的样式。 要获取内联…"}, {"id": "6844903550804295688", "title": "网页在Safari快速滚动和回弹的原理： -webkit-overflow-scrolling : touch;的实现", "desc": "现在很多for Mobile的HTML5网页内都有快速滚动和回弹的效果，看上去和原生app的效率都有得一拼。 要实现这个效果很简单，只需要加一行css代码即可： 可用以下网页测试： 可以用手指滑动中间的蓝色区域，会发现回弹效果以及滚动得很快： （点击图片查看大图） 如果把-we…"}, {"id": "6844903616327712775", "title": "哇牛叉学院之基于 VoiceOver 的移动端无障碍阅读访问", "desc": "本文作者：张鑫旭。基于 VoiceOver 的移动端无障碍阅读访问"}, {"id": "6969154513705893896", "title": "“盒模型”初探", "desc": "在 CSS 中，所有的元素都被一个个的“盒子（box）”包围着，理解这些“盒子”的基本原理，是我们使用CSS实现准确布局、处理元素排列的关键。"}, {"id": "6992760234838065188", "title": "浅谈css盒模型的宽高", "desc": "这是我参与8月更文挑战的第一天，活动详情查看：8月更文挑战 前文 写了好久的CSS，但是对于各种盒模型的尺寸，还是很懵逼的状态，一知半解，所以决心整一波。 正文 盒模型有块级盒子（block flex"}, {"id": "6844903505983963143", "title": "CSS盒模型详解", "desc": "CSS的盒模型是CSS的基础，同时也是难点，这个问题经常在面试中会被问到，属于经典问题了。很多博客里讲得也很模糊不清，于是，我在这里重新整理一下。 可以认为每个html标签都是一个方块，然后这个方块又包着几个小方块，如同盒子一层层的包裹着，这就是所谓的盒模型。 盒模型分为IE盒…"}, {"id": "6977597613885358117", "title": "【前端】制作一个拼图验证码", "desc": "大家好，我是 Steven。这一期我们会做一个拖拉形式的拼图验证码，是近年很常见的一种验证码方式，有别于传统的猜文字的那种： 那我们就开始吧。"}, {"id": "6936724379451703327", "title": "【译】 刚出炉的 Grid 布局备忘录，拿走！| 技术点评", "desc": "通过本文和大家一起重新认识 CSS Grid 布局 。 该属性用于定义列数和宽度。您既可以单独设置每列的宽度，也可以使用 repeat() 函数为所有列设置统一的宽度。👇 该属性用于定义行数和高度。您既可以单独设置每行的高度，也可以使用 repeat() 函数为所有行设置统一…"}, {"id": "6969118313301573669", "title": "超赞圆形动画进度条，爱了爱了(使用HTML、CSS和bootstrap框架)", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 在本文中，我将向您展示如何仅使用HTML、CSS和Boostrap框架创建圆形的动画进度条。之前，我已经设计了更多类型的动画进度条，但是这种设计是"}, {"id": "6999536724854603812", "title": "百分比环形圆", "desc": "查看以前的psd，发现对应C端存在挺多的环形圆，脑子突然就断掉啦，这要咋搞！所以提前研究一下，有备无患；本身理解加个人感觉比较好使的方法如下： 方案一、  jquery实现 jquery方案参考：ht"}, {"id": "6995408772201988127", "title": "常见的CSS面试题（二）", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战。 H5新特性 新增语义化标签 什么是HTML语义化   根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更"}, {"id": "6961711500549423112", "title": "CSS基础整理", "desc": "关于css基础的知识都在这里了。如果有任何问题都可以留言给我，我看到了就会回复，如果我解决不了也可以一起探讨、学习。如果认为有任何错误都还请您不吝赐教，帮我指正，在下万分感谢。希望今后能和大家共同学习"}, {"id": "7005107108333125662", "title": "采用Sass生成你的Css库", "desc": "采用Sass自定义生成自己的Css库，使其不用在<style></style>里写样式，全程在class里写，一把梭~"}, {"id": "6997618978474426382", "title": "CSS3 Flex布局属性介绍", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 Flex布局 注意: 设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。 基本概念 采用Fle"}, {"id": "6921513905604788238", "title": "生僻标签 fieldset 与 legend 的妙用", "desc": "谈到 &#x3C;fieldset> 与 &#x3C;legend>，大部分人肯定会比较陌生，在 HTML 标签中，属于比较少用的那一批。 我最早知道这两个标签，是在早年学习 reset.css 或者 normalize.css 时，在这些重置统一代码默认样式的 CSS 中看到…"}, {"id": "6902291855782707214", "title": "深入浅出 tailwindcss ", "desc": "一个偶然的机会，我看到一个视频，说的是一个不同的 CSS 框架 Tailwind.css，它让一切都变得更美好。也许是时候去试试了。 功能类优先是 tailwind 最重要的设计理念，上面的例子，我们做的时候我们需要一遍一遍的定义自己的 css classes 名称，甚至起名也…"}, {"id": "7001687585567277063", "title": "CSS 背景样式", "desc": "在 CSS 中，背景样式有两个方面，背景颜色和背景图片，背景颜色使用 background-color 属性设置，而背景图片有多个属性。"}, {"id": "6844904023900815368", "title": "纯CSS实现简单骨骼动画", "desc": "1. 背景 某天设计师来找我说，“这个心愿牌傻傻地挂在那不好看，加个动效呗，就左右摆动一下就行，很简单的！”，我一想，行呀，提升用户视觉体验，开搞。 十分钟后，不对呀，这个左右摆动好假，不像现实中风吹的效果。 冷静思考，为啥这个摆动会没有灵魂。于是拿起工卡开始摆动，看看现实中的…"}, {"id": "6999046747120992264", "title": "前端小白不迷路 - 今天来讲 从盒子模型来分析CSS3三角形的实现", "desc": "标准盒模型的width指的是内容区域content的宽度，不包括border、padding，而IE盒子定义的width是包括内容+边框+内边距，我们今天从盒模型分析如何实现一个三角形"}, {"id": "6995926185267953695", "title": "纯CSS绘制阴影效果 | 负值的扩散半径", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 在文章“如何快速实现多重边框 | CSS实现边框的4种方式”一文中，我们介绍了如何使用阴影box-shadow生成多层边框。今天来看看bo"}, {"id": "6844903542994501646", "title": "你以为 CSS 只是个简单的布局？", "desc": "前几天看了一篇文章 ， 颠覆了我对 CSS 认识，心中无数次蹦出一个念头：'卧槽，卧槽，还能特么这么用，这特么太叼了' ... 本文中，所有的图形都是在单个标签内实现的，大量使用了 CSS3 中的 ::before 、::after 伪元素，transparent 、borde…"}, {"id": "6934898831909715998", "title": "用 CSS 画个马里奥？box-shadow 的邪道用法~", "desc": "如果要在网页上画一个像素风的小图标，你都有什么思路呢？用 Canvas 也好，单独制作 svg 也好，感觉办法有的是。那如果把方法限定在只能用 CSS 呢？可能你没想过，用 box-shadow 就能完成这个任务。 一般来说，box-shadow 负责的阴影是负责凸显前方的视图…"}, {"id": "7001657011985186852", "title": "常用布局：水平垂直居中 & 多列等高", "desc": "一文整理业务常见、面试爱问之布局问题（Layout），包括水平居中布局、垂直水平居中布局、多列等高布局的最佳实践。"}, {"id": "6844903585948368903", "title": "Webpack4 那点儿东西", "desc": "近几年，构建对于前端开发来说是一个很重要的名词，它给前端开发注入了很大的活力，解放了很多生产力。而webpack在前端项目中起了不可小觑的作用，它可以将我们所用的各种浏览器不认识的代码比如es6，es7,sass,less等转换为浏览器认识的语言，可以对文件进行压缩合并，代码进…"}, {"id": "6997235034901970952", "title": "前端基础二之css篇", "desc": "身为一个合格的后端开发人员 前端的基础知识也是需要了解的 CSS CSS（cascading style sheets）"}, {"id": "6844904006251184142", "title": "CSS 性能优化还有哪些方法？", "desc": "为了保证的可读性，本文采用意译而非直译。 CSS 必须通过一个相对复杂的管道，就像 HTML 和 JavaScript一样，浏览器必须从服务器下载文件，然后进行解析并将其应用于DOM。由于优化程度极高，这个过程通常非常快——对于不基于框架的小型 web 项目，CSS通常只占总资…"}, {"id": "6844904152548507661", "title": "[译] Atomic CSS-in-js", "desc": "译者： 国内大家都去搞 JS 去了，可以看到我们有可以与 REACT 抗衡的 VUE。却显见有类似 CSS-in-js, OOCSS，BEM，Atomic CSS ... 的 CSS 解决方案出现？这是为什么呢？ 随着 Facebook 和 Twitter 最近的产品技术方案的…"}, {"id": "7000540299441209351", "title": "CSS 选择器", "desc": "介绍元素的 id 和 class 属性在项目中的作用，给出选择器的概念并常用的五种元素选择器，文中有较多例程。"}, {"id": "6844904039503642637", "title": "如何使用SASS编写可重用的CSS", "desc": "Sass 也是 Bootstrap 4 运行的基础。这意味着为了理解如何操作引导代码而学习Sass是非常有帮助的，而不是覆盖代码(这是大多数开发人员的定制方法)。理解Sass可以更好地理解源代码级别的工具。 当使用CSS时，我们经常在一个全局环境设置，这样可能会错误地设置元素的…"}, {"id": "6916678317736132615", "title": "在轮播图里寻求新颖是不是搞错了什么", "desc": "大家好，这里是CSS魔法使——alphardex。 轮播图（Carousel），相信大家并不陌生。平时大部分我们都是借助现有的框架来实现的，大都是swiper，或者UI框架里的某一个小组件。于是乎这东西就开始变得千篇一律：几张图片，外加几个小点，两边各有2个箭头，能够点击它们进…"}, {"id": "6919002880800686088", "title": "每天弄懂一个CSS知识点好吗   （BFC的布局问题）", "desc": "column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中）。"}, {"id": "6998887462160302110", "title": "浅谈 CSS3 新特性：transform 元素转换", "desc": "transform 属性允许你旋转，缩放，倾斜或平移给定元素。通过修改 CSS 视觉格式化模型的坐标空间来实现。"}, {"id": "6844903716101816333", "title": "精读《怎么用 React Hooks 造轮子》", "desc": "上周的 精读《React Hooks》 已经实现了对 React Hooks 的基本认知，也许你也看了 React Hooks 基本实现剖析（就是数组），但理解实现原理就可以用好了吗？学的是知识，而用的是技能，看别人的用法就像刷抖音一样（哇，饭还可以这样吃？），你总会有新的收获…"}, {"id": "6997744474126303268", "title": "ios（safari）浏览器，使用100vh遇到的问题和修改方法。", "desc": "容器的高度需要设置为100vh，发现在ios(safari)浏览器显示的时候，浏览器的底部工具栏总是会挡住底下的一部分。"}, {"id": "6844903585575108615", "title": "H5手机端开发问题汇总及解决方案", "desc": "少侠，请留步，相见必是缘分，赠与你一部《踏坑秘籍》 ios竖屏拍照上传，图片被旋转问题 解决方案 ios：DOM元素固定一边，另一边滚动，滚动很卡的问题 部分手机第三方输入法会将页面网上挤的问题 iPhoneX适配 某些机型不支持video标签的poster属性，特别是安卓 C…"}, {"id": "6844903588817289224", "title": "前端笔试题面试题记录（下）", "desc": "接上篇前端笔试题面试题记录（上）。趁清明小长假，把上篇剩下的部分也写一下，因为最近比较忙这篇已经拖了很久了。现在刚刚开始银四了，应该还是有些小伙伴在找工作，时间还不算太晚，希望本篇可以帮到这些小伙伴。 在同一个作用域里面：var可以重复声明变量，let不能重复声明同一个变量。 …"}, {"id": "6844903897199296525", "title": "2019下半年，该用用grid网格布局了！", "desc": "现在我们大家在实际的开发中，可能用的最多的就是flex布局，当然还有浮动和定位，除此之外，这两年一直听到网格布局是趋势，即grid布局，但是项目中没有太多的应用，所以特此总结一下，希望对大家也对我自己有帮助。 1. 固定值 2. repeat()函数 有时，单元格的大小是固定的…"}, {"id": "6953646632571240462", "title": "h5开发｜别切图了 用CSS手写一个箭头吧", "desc": "话说分页箭头长啥样？就长下面这样： 看完了吧，是不是很熟悉。那就开干吧。 1. 实现思路 用CSS直接实现上面的箭头肯定比较麻烦，我们换个思路：把箭头顺时针旋转45度看成半个正方形： 聪明的同学肯定想"}, {"id": "6994757364205223950", "title": "如何快速实现多重边框 | CSS实现边框的4种方式", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 双重边框甚至多重边框是设计上的常用样式，如何用代码实现呢？ 层叠DOM元素 最原始的方法自然是可以通过层叠不同背景色的DOM元素来实现，通"}, {"id": "6844904062593269768", "title": "用 css 画三角形、梯形、扇形、箭头和椭圆几种基本形状", "desc": "1. 画三角形 然后我们可以通过给任意三边的颜色设置为 transparent 即可分别实现任一方向的三角形。 通过设置某条边的宽度比其它边宽，来调整三角形的高度。 通过设置某条边的宽度比其它边窄，来调整三角形的宽度。 2. 画梯形 梯形也是基于 border 来绘制的，只不过…"}, {"id": "6982805558843670564", "title": "Flex弹性盒", "desc": "Flex弹性盒 Flex弹性盒的属性 1.Flex-direction 指定容器中弹性元素的排列方式 2.Flex-wrap 设置弹性元素是否在弹性容器中自动换行 3.Flex-flow wrap和d"}, {"id": "6844904081559912462", "title": "忍法，scroll 翻滚之术！", "desc": "在日常的开发中，我们对 scroll 这个单词肯定不陌生。 例如因为看不惯浏览器默认样式而用 JS 一顿猛如虎操作的 自定义滚动条 。 或者是嗖~一下就到顶的 回到顶部 。 又或者是想去哪点哪的 标题导航 。 但是在过去的开发中，要实现这些功能并不是那么轻松的一件事情。 例如我…"}, {"id": "6982442085773705229", "title": "彻底理解flex弹性布局，看这一篇就够了！", "desc": "Flex布局是什么？ 基本概念 容器的属性 容器有6个属性，容器可以当做是父盒子，就是设置了display: flex 属性的盒子。 flex-direction 决定主轴的方向(即项目的排列方向) "}, {"id": "6844903544760336398", "title": "Tree-Shaking性能优化实践 - 实践篇", "desc": "三. tree-shaking实践 webpack2 发布，宣布支持tree-shaking，webpack 3发布，支持作用域提升，生成的bundle文件更小。 再没有升级webpack之前，增幻想我们的性能又要大幅提升了，对升级充满了期待。实际上事实是这样的 升级完之后，b…"}, {"id": "6998483245490765832", "title": "【CSS】从背景介绍展开", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 背景本篇文章主要介绍CSS的背景background相关的一些属性，以及介绍了背景渐变的一些知识点"}, {"id": "6844904149516189710", "title": "【译】CSS 中你需要知道 auto 的一切！", "desc": "在CSS中，我们有auto值，它可以用于像margin，position，height，width等属性。在本文中，会先解释auto的工作方式以及如何最大程度地利用auto的技术细节,当然，会配合一些用例和示例。 auto关键字的使用因属性而异。 对于本文，我将在每个属性的上下…"}, {"id": "6970977802674044959", "title": "CSS 知识体系之 CSS 选择器", "desc": "这是我参与更文挑战的第五天，活动详情查看:更文挑战 层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表 语言，用来描述 HTML或XML（包括如 SVG、Ma"}, {"id": "6987262705635688484", "title": "CSS选择器(一)", "desc": "CSS是什么 CSS，指的是“Cascading Style Sheet（层叠样式表）”，是用来控制网页外观的一门技术。HTML、CSS、JavaScript构成了前端网页的三个必要组成部分，其中HT"}, {"id": "6994518097214308382", "title": "介绍下 BFC 布局规则，除此之外，你还知道哪些 CSS 格式化上下文? ", "desc": " ## BFC 布局规则 ### 什么是 BFC 既 Block Formatting Context（块级格式化上下文），是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，"}, {"id": "7000189696449970207", "title": "CSS 简介", "desc": "CSS 即 Cascading Style Sheet（层叠样式表），用来控制网页外观。 CSS 与 CSS3 的关系：CSS3 指的是相对于 CSS2 增加的内容。"}, {"id": "6987210302228004877", "title": "小程序实现录音动态加载样式", "desc": "微 信 小 程 序 通 过 改 变 c s s 样 式，实 现 录 音 动 态 加 载 样 式。"}, {"id": "6932088781113819150", "title": "使用 CSS Painting API 自动生成图像", "desc": "图像为应用程序增添色彩，丰富内容。然而，如果网页中嵌入了大量高分辨率图像，会大量增加页面资源加载时间，严重影响用户体验。对于展示产品、方案等必须内容的图像，我们别无选择，只能按照正常方式嵌入这些图像并通过缓存它们来优化应用程序。但是，如果我们在应用程序中需要几何图像，则不必再将…"}, {"id": "6844903763329679368", "title": "css经典布局——圣杯布局", "desc": "圣杯布局和双飞翼布局一直是前端面试的高频考点，圣杯布局的出现是来自由 Matthew Levine 在 2006 年写的一篇文章 《In Search of the Holy Grail》。 比起双飞翼布局，它的起源不是源于对页面的形象表达。在西方，圣杯是表达“渴求之物”的意思…"}, {"id": "6898523728389341197", "title": "极致追求，让小程序代码包立减 10% 的插件 weapp-css-modules", "desc": "css-modules 是一种 css 模块化方案，它在构建过程中生成一个原类名与新类名的 map，根据 map 引用样式，通过设定 hash 规则，实现了对 CSS 类名作用域的限定，它通常用来解决页面类名冲突的问题。由于微信小程序内组件样式默认隔离，为什么要使用 css-m…"}, {"id": "6990562446389821470", "title": "纯css手写数据大屏常用旋转地球", "desc": "纯css手写数据大屏旋转地球 纯css手写数据大屏旋转地球 纯css手写数据大屏旋转地球 纯css手写数据大屏旋转地球"}, {"id": "6942662875005583391", "title": "【CSS Houdini】Paint API，带你变身前端达芬奇", "desc": "作为 CSS Houdini 所暴露出的API之一，CSS Paint API 从一出现就倍受期待。它通过扩展 CSS 的部分能力，使其提供更强大的表现力。 本文将从其定义到应用逐一介绍，来让大家对其有更加深刻的认识。 先简单介绍下什么是 Houdini。 ~~Houdini一…"}, {"id": "6990186384778756109", "title": "DOM树：JavaScript和css是如何影响DOM树构建和渲染的？", "desc": "1、JavaScript和css会不会DOM树构建和渲染的 先做个总结，然后再进行具体的分析： CSS不会阻塞DOM树的解析，但是会影响 JavaScript的运行， JavaScript 会阻止DO"}, {"id": "6971382430842224670", "title": "你不知道的CSS-background", "desc": "​ background族属性是我们经常会用到的css属性，用于控制背景样式，但其实background还有很多细节性的东西，让我们来了解一下吧。 首先我们先简单介绍一下background族属性都包"}, {"id": "6844903776164249614", "title": "CSS滚动条样式修改 && 真！全屏", "desc": "敬请各位看官多多斧正。就是想到一种思路,分享出来,没别的意思,我自认为天资一般,所以诸位师兄中必有武功高强,天资聪慧者,望轻拍砖"}, {"id": "6844903496639053831", "title": "你真的会用getBoundingClientRect吗", "desc": "本文介绍了什么是getBoundingClientRect；以及获取width,height的兼容性写法；最后介绍了两个使用场景：获取页面元素的位置和判断元素是否在可视区域。"}, {"id": "6920459603931201549", "title": "纯css实现旋转的金字塔", "desc": "css是个神奇的东西，在学习的过程中你会发现绘画和艺术的美,金字塔是世界八大奇迹之一，设计精巧，计算精密，令世人赞叹。那么如何用CSS画一个金字塔呢？ 金字塔是由5个面组成的，即4个侧面和1个底面。我们可以把它看作是一个童年时期玩过的元宝，或者端午节戴在身上的福字。为什么这么说…"}, {"id": "6968655323288567844", "title": "border-raduis 圆角边框", "desc": "1. pt 单位 pt 点（Points），绝对长度单位。 印刷业上常使用的单位，磅的意思，一般用于页面打印排版。 1in=2.54cm=25.4 mm=101.6q=72pt=6pc=96px 关于"}, {"id": "6985413889047396365", "title": "画皮卡丘", "desc": "简单记录一下思路，有非常多可以优化的地方 画鼻子（一个扇形） 利用 transparent画出合适的三角形 再画出三角形上面的半圆共同组成扇形 画左右两个黑眼睛 再画出黑眼睛里面的白眼睛 画嘴唇 制作"}, {"id": "6973620370876137508", "title": "什么？你还不了解BFC？", "desc": "记住首图，后面要考(带你理解BFC)🐾 什么是BFC？ BFC 全称为block formating context（块级格式化上下文），它有什么作用呢？ ​ 若一个元素触发了BFC，则这个元素就可以"}, {"id": "6844903695428108302", "title": "最全的获取元素宽高及位置的方法", "desc": "HTMLElement.offsetWidth 是一个只读属性，返回一个元素的布局宽度。一个典型的（各浏览器的offsetWidth可能有所不同）offsetWidth是测量包含元素的边框(border)、水平线上的内边距(padding)、竖直方向滚动条(scrollbar)…"}, {"id": "6982498259461734408", "title": "「HTML+CSS」--自定义加载动画【035】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 背景色：白色 效果图如下 步骤2 span圆角化 效果图如下 步骤3 使用span::"}, {"id": "6894540841117810696", "title": "CSS布局之Grid", "desc": "​ 网格是由一系列水平及垂直的线构成的一种布局模式。根据网格，我们能够设计元素进行排列，帮助我们设计一些具有固定位置以及宽度的元素的页面，使我们的网站页面更加统一。 ​ 一个网格通常具有很多的列(column)与行(row)，以及行与行，列与列之间的间隙，这个间隙一遍被称之为沟…"}, {"id": "6886619061321465864", "title": "CSS Sprite雪碧图、背景和边框属性（推荐）", "desc": "此文章有对应视频讲解，方便大家更易于理解。背景、边框属性、css雪碧图讲解。视频对应64~71。 css的背景和边框属性是css中的一个模块，它可以让你为元素的背景和边框设置样式。背景可以用颜色或图像填充，裁剪和调整大小，以及其他方式的修改。边框可以用线条或图像装饰，并制作成方…"}, {"id": "6891916739651567624", "title": "使用svg描边来实现移动端1px", "desc": "1. 1px分割线 2. 1px边框 3. 1px带圆角的边框"}, {"id": "6844904129408532487", "title": "[译] 如何使用 HTML tabindex 属性", "desc": "这些元素默认都能使用键盘 Tab 键，以及 JS focus 方法聚焦。 试图非可聚焦元素上聚焦，不会起作用。 在使用 Tab 键聚焦元素时，聚焦顺序等于元素在源码文件中的出现顺序。 尽管默认行为涵盖了我们所需的大多数交互需求。但在某些情况下，我们可能有移除、添加聚焦，或者重新…"}, {"id": "6844903718031196168", "title": "浅谈webpack4.0 性能优化", "desc": "对开发者而言，我们希望webpack这个工具可以给我们带来流畅的开发体验。比如，当不断修改代码时，我们希望代码的变更能及时的通知浏览器刷新页面，而不是手动去刷新页面。更进一步的我们希望，代码的修改只会局部更换某个模块，而不是整个页面的刷新。这样可以使我们不需要在等待刷新中浪费很…"}, {"id": "6889642079283052558", "title": "CSS让元素绝对居中，你知道几种方法？———— CSS技巧系列第一", "desc": "给定两个元素，这两个元素是父子级关系。并且两个元素的大小都是不确定的，那么这时候如何让子级在父级中上下左右都居中？（暂且设定父级比子级要大一些） 父级相对定位，子级绝对定位 而四个定位属性的值都设置了0，那么这时候如果子级没有设置宽高，则会被拉开到和父级一样宽高。而现在设置了子…"}, {"id": "6932021000192147469", "title": "BFC详解", "desc": "BFC定义： BFC(Block formatting context)直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-leve"}, {"id": "6844903662918041607", "title": "[贝聊科技]小动画大学问", "desc": "对于移动端的Web单页应用来说，为了达到媲美原生应用的效果，页面过渡动画是必不可少的。常用的页面过渡动画包括： 位移——当前页向左侧或右侧水平移出可视区，下一页由反方向移入可视区。 不透明度变化——当前页淡出，下一页淡入。 1和2同时进行。 目前大多数设备的屏幕刷新率为60次/…"}, {"id": "6844903621436375047", "title": "移动端使用 rem 单位时 css sprites 定位问题", "desc": "优点：1. 完整显示图标；2. 减少请求数量； 缺点：1. 色彩丰富的图片转成 base64 效果不好；2. 会增大图片提及，相当于用下载时间换取请求时间； 好了，这篇分享就说到这里，初次写文章，语句和方式难免有瑕疵，望各位看客老爷见谅。"}, {"id": "6850418109867081742", "title": "【FCC前端教程】44关学习CSS与CSS3基础「二」", "desc": "我有一段时间没有更新FCC前端教程了，这一周就继续写完CSS与CSS3基础的教程。最近工作和生活都比较繁忙所以文章更新也受到了一定的影响。不过技术文章写作再忙也不会放弃的。我会继续努力坚持着一周一篇文章的进度，继续为大家带来我学习到的知识。让我们一起继续终身学习吧！ 这一篇文章…"}, {"id": "6896690189436256269", "title": "「开源」✨即贴即用的鼠标经过图像效果✨", "desc": "无需 Javascript，一套你一直想找的即贴即用的鼠标滑过图片效果。 1. 诞生背景 写页面的时候，特别是营销页，官网，博客首页这种纯展示的页面时，我们通常需要上面这种效果。 因为大部分应用场景下，我们仅仅需要 1 个或 2 个效果，没有必要引入一整个 css 库，制作这个…"}, {"id": "6997937263652896804", "title": "CSS3 新特性", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 ​ 浏览器历史 开始写 CSS3 了，那么为了避免浏览器兼容问题，先来看看浏览器的世界大战 为什么浏览器们不能一起好好玩，为什么要有千奇百"}, {"id": "6844903653849956359", "title": "一个Vue媒体多段裁剪组件", "desc": "2020.04.20 修复若干bugs; 优化部分动画; 优化交互方式。 近日项目有个新需求，需要对视频或音频进行多段裁剪然后拼接。例如，一段视频长30分钟，我需要将5-10分钟、17-22分钟、24-29分钟这三段拼接到一起成一整段视频。裁剪在前端，拼接在后端。 网上简单找了…"}, {"id": "6997772890150191111", "title": "前端--css水平垂直详解", "desc": "前言 老板的手机收到一个红包，为什么红包没居中？ 如何让一个子元素在父容器里水平垂直居中？这个问题必考，在实战开发中，也应用得非常多。 你也许能顺手写出好几种实现方法。但大部分人的写法不够规范，经不起"}, {"id": "6907607307941576718", "title": "移动端适配之简易导航头实战", "desc": "得出基础 font-size 的vw值为 ：100vw / 7.5rem = 13.3333333...vw。充分考虑兼容性的情况下可以写：font-size: calc(100vw /7.5); 图片的大小是固定的，所以如果想让图片也做适配就要给图片设置宽高。例如54行中图片…"}, {"id": "6844903784406073352", "title": "有趣的 box-decoration-break", "desc": "这两天接触到一个很有意思的 CSS 属性 -- box-decoration-break。下面就一起去一探究竟。 因为 MDN 上关于这个属性，没有中文文档，所以一直在想一个合理贴切的中文翻译。直译一下： 那么，这个属性可以先理解为，元素在发生断行时其样式的表现形式。 这个属性…"}, {"id": "6981715778953281544", "title": "css3实现云彩浮动变幻效果", "desc": "云——神秘却又毫无保留地将自己呈现给大家，时而安静慈祥;时而深厚内敛;时而流溢着多情;时而散发着妩媚;时而热情如火焰;时而孩子般顽皮，悠闲自在地俯视着大地，忙忙碌碌的人们。"}, {"id": "6844903664079863822", "title": "前端项目框架搭建随笔---Webpack踩坑记", "desc": "只知道Webpack怎么拼怎么用的我。。被领导委托搭建移动端项目框架。。。 “得过几天想想。。搞不好咱们自己手写一套” “好的老板。一定完成任务” 熟练的打开PowerShell，把vue脚手架搞好，把多页面跟着教程配置好。 什么意思呢？如果我在src/page下创建一个pas…"}, {"id": "6844903784817098765", "title": "CSS中的“大白”——CSS 动画", "desc": "让我们用CSS从电影Big Hero 6中创建Baymax角色。 在这篇文章中，我们将动画一个背景图像，以及一个微妙的动画计时效果，并用一个单独的HTML元素制作一个CSS演示。 你可以在这里全屏看到它。 通过使用伪元素，我们将能够使用一个HTML元素创建面部部分。 为了设置舞…"}, {"id": "6844903568265199623", "title": "Grid 布局发车啦", "desc": "好了，大家都坐好，我准备发车啦。不符合要求的同学请下车，没满 18 岁的，咳咳，开玩笑。不是所有人现在都能搭上 Grid 的小车车，毕竟项目兼容性问题很现实，不过不耽误我们学习。 好了，大家看了看浏览器的兼容性就知道，如今主流浏览器都已经支持了 Grid 布局，还等啥呢？上车吧…"}, {"id": "6844903618433253383", "title": "纯CSS实现吸顶效果", "desc": "吸顶效果，顾名思义，就是当元素靠近顶部时，自动固定在顶部。 要实现导航吸顶效果，我们一般使用的是监听scroll，然后设置导航的position: fixed以达到固定在顶部的效果。这种导航吸顶效果的实现方法网络上已经N多种，今天肯定不是再来介绍一…"}, {"id": "6993227661170442270", "title": "CSS3圆角", "desc": "使用 CSS3 border-radius 属性，你可以给任何元素制作 \"圆角\"。 CSS3圆角制作器 CSS3 border-radius 属性 使用 CSS3 border-radius 属性，你"}, {"id": "6993220597610217508", "title": "CSS布局案例(float-position-flex)", "desc": "CSS布局案例(float-position-flex) 熟练掌握float-position-flex三种布局，一个案例就够了，话不多说，直接上效果图 1.Position布局 2.flex布局 3"}, {"id": "6891192695776411661", "title": "深入理解css行内元素", "desc": "一些前置知识替换/非替换元素替换元素不直接显示html元素内容的元素，如img、input、iframe等替换元素尺寸video、iframe等默认宽高为300px、150px，img默认尺寸为0，加"}, {"id": "6998377064352972808", "title": "一篇文章包你学会Flex布局", "desc": "这是我参与8月更文挑战的第18天，活动详情查看： 8月更文挑战 ​  Flexible Box Flexible Box是一种新的排版上下文，它可以控制子级盒子的以下样式： 摆放的流向 摆放顺序 盒子"}, {"id": "6844903511210065927", "title": "JavaScript核心参考", "desc": "对于那些希望学习JavaScript和已经开始使用JavaScript的程序员来说，如果想让自己对JavaScript语言和Web平台的理解和掌握再上一个台阶，可以通过阅读这篇文章，会让你的JavaScript编程基本更加夯实。"}, {"id": "6993159486336679949", "title": "只要一行代码，开启网页暗模式", "desc": "前言 暗模式似乎已成为网页端和移动端应用程序所必需的视觉模式。我们的眼睛更适应暗模式，特别是对于喜欢半夜进行编码和阅读教程的人。不幸的是，并非所有网站都提供暗模式，本文使用一行代码即可开启所有网站的暗"}, {"id": "6992918103424237604", "title": "前端笔记-CSS图标字体｜8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 图标字体（iconfont） 在网页中经常需要使用一些图标，可以通过图片来引入图标，但是图片大小本身比较大，并且非常的不灵活，所以在使用图标"}, {"id": "6945449808295378951", "title": "CSS伪类&伪元素", "desc": "nth-child 根据元素在标记中的次序选择相应的元素首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从1开始排序，选择的结果为"}, {"id": "6844904180822327303", "title": "不可忽略的空格（white-space）", "desc": "富文本编辑器中需要实现一个可编辑的导航树，在上线运行时客户反馈其设置的导航树的空格不起作用。具体问题如下所示： 由此可以看到HTML文本节点与渲染展示的内容不同，造成了用户直观感受到的输入空格不起作用。 空格之所以被忽略是因为浏览器对HTML文本中空格的处理规则：文本的前部和后…"}, {"id": "6844903555606773773", "title": "浅谈表格组件的实现：固定表头和固定列", "desc": "在前端开发中，表格组件相对来讲是比较复杂的组件之一，主要原因在于大家对表格组件的需求不同，笔者没看到过一个表格组件可以覆盖所有人的需求。 从业务场景来讲，可以把表格组件分成三种类型： Bootstrap 类：CSS 就可实现的表格，主要用在信息展现类的页面上。 中后台类：着重在…"}, {"id": "6844903716387029000", "title": "[译] 10 个有趣的 JSCSS 库（2018.11）", "desc": "Tutorialzine每月都会给我们精心挑选优秀的web开发资源，这些资源可以帮助我们解锁最新和最炫酷的网络开发姿势。前端er,让我们一起先睹为快吧！ 鹅厂出品，下一代 Web 框架，去万物糟粕，合精华为一。让 JSX, Web Components, Proxy, Stor…"}, {"id": "6950894475484856334", "title": "深入css的flex排版原理", "desc": "在经历过table布局、div布局之后，flex逐渐完善且成为标准。这时候前端排版迎来了一次解放，很多难以书写的布局写法被大大简化了。时至今日，flex早已成为一个基础，那么怎么实现它呢？"}, {"id": "6844903613895032846", "title": "[译] 新的 CSS 特性正在改变网页设计", "desc": "如今，网页设计的风貌已经完全改变。我们拥有又新潮又强大的工具 —— CSS 网格/栅格（CSS Grid），CSS 自定义属性（CSS custom properties），CSS 图形（CSS shapes）和 CSS 写作模式（CSS writing-mode），这里仅举此…"}, {"id": "6908962052727898125", "title": "CSS中的函数和变量", "desc": "CSS函数Color颜色相关rgb()、rgba()这两个函数一定是不会陌生的，对于颜色属性值通过红绿蓝三原色来进行调整。区别在于rgba()中a表示透明度，取值0-1之间。相对来说最为常用除此之外，"}, {"id": "6954339544535662599", "title": "纯CSS实现的几种图形示例", "desc": "几种使用纯css实现的图形。依靠数学基础实现图形效果才是真正的王道。 所有图形中，就是关于正无穷符号的实现，参考代码中原元素的宽度计算值不太理解"}, {"id": "6964408154020904997", "title": "完全理解transform中的Matrix()", "desc": "基本概念 css中transform属性值是一个或多个transform-function值。对于二维平面的变换，transform-function包括scale，rotate、translate、"}, {"id": "6844904017127047182", "title": "Web开发中最该知道却从不重视的 —— Accessibility", "desc": "Accessibility，通常缩写为 A11Y ，这缩写取的是首字母 + 中间字母长度 + 结尾字母，译为 “可访问性”。这是一种让尽可能多的人访问我们所开发的网站的技术概念，通过这个概念，让互联网访问公平变得可能。 A11Y是一件非常正确的事，在某些国家与地区，甚至提供无障…"}, {"id": "6844903903134220296", "title": "【漫画讲技术】CSS系列漫画教程（1-5讲）", "desc": "《CSS系列漫画教程》共15讲，是我2012年刚毕业步入互联网时的早期作品。时隔多年，如今互联网内容为王的分享经济迅速发展，这些作品压箱底太可惜，不如分享给大家。 漫画还停留在当年前端兼容ie6的时代，如今ie6随着那一代人的青春一起逝去，大家各奔前程，留下是感情和回忆。漫画不…"}, {"id": "6993231158930571295", "title": "大屏展示边框太丑？纯css撸9个实用边框（性能提高120%）", "desc": "项目中做过大屏数据展示的应该都使用过Datav，里面有很多酷炫边框。 但是他有个致命的问题，严重消耗内存。 之前在项目中使用，每次打开小风扇"}, {"id": "6993232017915674660", "title": "元素水平垂直居中方法", "desc": "元素水平垂直居中方法 1.绝地定位 + margin: auto 2. 绝对定位 + margin 负值 3.绝对定位 + transform 4.flex 布局 将父元素设置为 display: f"}, {"id": "6844903622010994695", "title": "前端性能优化：细说JavaScript的加载与执行", "desc": "本文主要是从性能优化的角度来探讨JavaScript在加载与执行过程中的优化思路与实践方法，既是细说，文中在涉及原理性的地方，不免会多说几句，还望各位读者保持耐心，仔细理解，请相信，您的耐心付出一定会让您得到与之匹配的回报。 随着用户体验的日益重视，前端性能对用户体验的影响备受…"}, {"id": "6966991944442445861", "title": "【不一样的CSS】实现全屏布局的 3 种方式", "desc": "【不一样的CSS】实现全屏布局的 3 种方式 全屏布局主要应用在后台 使用calc函数实现 使用 grid 方案"}, {"id": "6844904164279992333", "title": "[重拾CSS]一道面试题来看伪元素、包含块和高度坍塌", "desc": "前几天某个群友在群里问了一道面试题，就是关于一个自适应的正方形布局的困惑，先贴上代码。我其实很长一段时间没有写 CSS 了，对于里面的一些细节也比较模糊了，因此决定重拾 CSS，来重新捋一捋这题目中的一些知识点。（本文大多采用的讲解方式为 w3 的 CSS 标准 + MDN，如…"}, {"id": "6844904034109751309", "title": "滚动视差让你不相信“眼见为实”", "desc": "视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果。 其实，这项技术早在 2013 年就已经开始在一些国外的网站中得到了大量的应用。由于它给网站带来了非常出色的视觉体验，现在已经有数不胜数的网站应用了这项技术。 我是在最近的项目中…"}, {"id": "6917446456605409294", "title": "真香，又一款纯CSS实现的图标库！", "desc": "大家好，我是小编南风吹，今天推荐一款好用的开源图标库。 我们平常找图标往往会去 iconfont，但是今天，看了本篇文章后，就会有一个新的选择——CSS.GG，只要是优秀的，我们就有理由去使用它。 CSS.GG拥有700多个时尚漂亮的 css 图标库，特别适合 UI 设计师和前…"}, {"id": "6995531789976469534", "title": "【动画消消乐】HTML+CSS 自定义加载动画 062", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度、高度均为48px 背景色：go"}, {"id": "6844903858565562376", "title": "【切图仔日常】浅谈CSS3动画之凌波微步--steps()", "desc": "一日敲代码的我，得到一个需求：写一个10秒的倒计时。 用JavaScript定时器麻溜写完之后，恰好同事勇司机接完水。瞟了一眼，然后凑过来说，这个用CSS3也可以写，而且一行JavaScript都不用写。 \"一行JavaScript都不用写，纯CSS3就可以写。CSS3有这么溜…"}, {"id": "6844903914148462599", "title": "[译] width 与 flex-basis 的区别", "desc": "这个问题很多人问起过我，实际上，当我对使用 Flexbox 还不太熟悉的时候，我谷歌过这个问题很多次。查看下我的谷歌搜索历史，上一年我曾四次搜索类似“flex-basis vs width vs min-width”的问题。废话少说！今天让我来回答这个问题，希望大家以后不用再搜…"}, {"id": "6844903939683385351", "title": "关于 CSS margin，一些让你模糊的点", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 当我们学习CSS时，我们大多数人学到的第一件事是CSS中盒子的各个部分的细节，这部分通过叫做 CSS盒、模型。“盒模型”中的元素之一是margin，即盒子周围的透明区域，它会将其他元素从盒子内容中推开。 CSS…"}, {"id": "6982915264161513503", "title": "CSS布局（五）：从设计图到html页面", "desc": "在这篇文章中，我想跟大家聊一下如何利用CSS和html将网页的设计图转换成实际可以在前端工程中使用的css和html资源。"}, {"id": "6974964859263795236", "title": "学会这个flex-shrink再进大厂", "desc": "flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。这就懂了，原来是这个属性导致了flex item都是默认可以被缩小，被挤占空间的。"}, {"id": "6993135739080818725", "title": "【动画消消乐】HTML+CSS 自定义加载动画 054", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 前言 效果展示 在这里插入图片描述 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 相对定"}, {"id": "6904176996729749512", "title": "纯css实现tab切换你会吗？（锚点定位）", "desc": "纯css实现tab切换另一种方法（input法）：纯css实现tab切换（input[type=radio]）效果1、核心每项【切换内容】的宽高为【内容展示区域】的宽高，【内容展示区域】设置超出部分隐"}, {"id": "6939891749665898504", "title": "3 种在任何浏览器中使用 CSS 网格的后备方案", "desc": "如今，CSS Grid 在浏览器中已经广受支持 —— 支持 Grid 基本功能的浏览器占比约为 95％。不过有时我们无法忽略剩下的 5％，因为我们可能希望自己的 Web 应用的布局在所有浏览器中看起来都一样的棒，而且我们甚至还可能希望去使用一些支持度较低的 Grid 的新功能。…"}, {"id": "6844903721797681165", "title": "精读《使用 CSS 属性选择器》", "desc": "虽然现在 Css Module 与 Css-in-js 更流行，但使用它们会导致过分依赖 滥用 class 做唯一定位，违背了 Css 选择器的初衷。 本期精读的文章是：attribute-selectors-splicing-html-dna-css，带你重新理解强大的 Cs…"}, {"id": "6844903910277120008", "title": "我说 CSS 类名可以缩写，你不要打我！", "desc": "当我们遇到一种与自己认知不同的方案或者观点的时候，情感上的喜欢和不喜欢肯定是冲在我们前面的，这是我们的本能无可厚非。你不喜欢一个人，你就很难注意到他身上的优点，你喜欢一个人你本能会忽略这个人身上的缺点。 像最开始我不喜欢 BEM 一样，我觉得它让我的 CSS 名称又长又臭。当我…"}, {"id": "6844904144772268039", "title": "【地狱难度】面试官：你可以用纯 CSS 判断鼠标进入的方向吗？", "desc": "正直的勇者们经历远航，一路横扫除魔，终于来到了魔王（指面试官）所在的石塔。勇者们在石塔前的守夜人陈大鱼头（此处@陈大鱼头）那里接受了一个挑战——用纯 CSS 难度判断鼠标进入盒子的方向。 勇者 A 给四个盒子分别定位到上下左右四个方向，并利用其 Hover 状态制作动画，三下五…"}, {"id": "6844903817645916173", "title": "第三代移动端布局方案", "desc": "最近在研究关于布局的设计方案，通过学习理解阿里的fusion.design的设计思想并结合手机淘宝H5版的px布局问题。逐渐有了一些想法，这里进行综合整理，也算是抛砖引玉吧。 rem和vw都是为了解决移动端适配问题。rem方案中最成功的就是淘宝的lib-flexible了，它是…"}, {"id": "7002907731929612301", "title": "CSS学习系列(一) --- 盒模型", "desc": "css盒模型。content box在标准盒模型里内容width和heiht定义的这些属性就构建出了我们看到的页面，目前的浏览器总共有两种盒模型，标准盒模型和IE盒模型"}, {"id": "6994786292026327076", "title": "不能不知道的15 个JavaScript数组实用技巧", "desc": "JavaScript 充满了技巧。JavaScript 是一门庞大的语言，具有一系列有时奇怪的功能，使其特别、与众不同。在 JavaScript 中有很多方法可以完成工作；特别是对于编程世界中最重要的"}, {"id": "7000646037509505038", "title": "BFC 的简单理解", "desc": "☠ BFC 是什么？ BFC 的全称是 Block Formatting Context，名为 “块级格式化上下文”。 作用是让触发 BFC 的元素处于一个完全独立的空间，使其子元素的布局不会影响到外"}, {"id": "6844903654756089864", "title": "从青铜到王者10个css3伪类使用技巧和运用，了解一哈", "desc": "伪类经常与伪元素混淆，伪元素的效果类似于通过添加一个实际的元素才能达到，而伪类的效果类似于通过添加一个实际的类来达到。实际上css3为了区分两者，已经明确规定了伪类用一个冒号来表示，而伪元素则用两个冒号来表示。伪类与伪元素的本质区别就是是否抽象创造了新元素。具体的伪类和伪元素相…"}, {"id": "6975758852868292639", "title": "CSS吸顶效果", "desc": "这个导航栏如果到顶部的会就自动变成固定顶部（吸顶效果） position:sticky是css定位新增属性； 可以说是相对定位relative和固定定位fixed的结合； 它主要用在对scroll事件"}, {"id": "6994059570469404686", "title": "CSS性能优化", "desc": "提高性能的方法有哪些? 合并css文件减少http请求，如果页面加载10个css文件,每个文件1k，那么也要比只加载一个100k的css文件慢。 减少css嵌套，加速css解析，最好不要嵌套三层以上。"}, {"id": "6844904021552005128", "title": "吃透移动端 H5 响应式布局 ｜深入原理到目前最佳实践方案", "desc": "最近写了第三个移动端 H5 的项目，准备记录下自己在 H5 项目中的一些实践探索。移动端 H5 与 PC 端开发最大的区别之一，大概就是响应式布局问题。 那么下面我们就来聊聊移动端响应式布局，了解他的来龙去脉，对现有的最佳解决方案探索吧。 H5 这个命名本身是一个很不讨巧的命名…"}, {"id": "7001067625107324941", "title": "颜色表示", "desc": "设置颜色的方式，虽然很基础，但是的确很常用，如果不了解的了解了解很重要；同时我对颜色的理解越多，这里就越丰富。"}, {"id": "6858448795949236231", "title": "三行CSS为掘金添加暗黑模式支持", "desc": "filterCSS属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。（参考：MDN Web文档） invert：反转输入图像。值定义转换的比例。100%（或1）将完全转换：黑色变为白色，白色变为黑色，其它颜色类似。 hue-rotate：hue-…"}, {"id": "7005100520465661982", "title": "CSS学习笔记", "desc": "注意事项 必须用中文符号，不然浏览器会警告 区分大小写 文档流（normal flow） 中文翻译不准确，即元素的正常流动方向 内联元素（inline）如<span> 从左到右分布，到最右边自动换行（"}, {"id": "6844903972281516045", "title": "巧妙实现带圆角的渐变边框", "desc": "这个问题本身不难，实现的方法也有一些，主要是有一些细节需要注意。 border-image 是 CSS 规范 CSS Backgrounds and Borders Module Level 3 (最新一版的关于 background 和 border 的官方规范) 新增的一个…"}, {"id": "7002046431913738248", "title": "CSS 浮动布局", "desc": "介绍了文档流和改变文档流的方式、元素浮动效果的实现以及其带来的副作用，为了消除这些副作用，使用清除浮动的方式解决。"}, {"id": "6988423658683236383", "title": "面试官：请说下CSS选择器优先级", "desc": "什么是CSS选择器优先级？ 通过权重来计算CSS选择器的优先级 1. !important的优先级是最高的。（没有这个属性的话，则按照下面的向量来计算优先级） 2. 权重相同，看谁的定义靠后，越靠后就"}, {"id": "6979617409082589197", "title": "【CSS】纯 CSS 实现24个大写英文字母 CSS-fonts", "desc": "本文已参与好文召集令活动，点击查看：[后端、大前端双赛道投稿， 工欲善其事，必先利其器。实践（巧偷懒）促进科技发展-_-! 本文分享 CSS-fonts： CSS 实现 24 个英文字母 效果如下"}, {"id": "6986900328843051022", "title": "移动端横竖屏视口检测", "desc": "1、不同视口的获取方法 2、JavaScript检测横竖屏 3、CSS检测横竖屏 4、meta标签属性设置 5、meta标签属性设置设置刘海屏&底部小黑条 设置安全区域与边界的距离 注：constan"}, {"id": "6844904016997007374", "title": "前端常用的CSS代码", "desc": "61、两个子元素 一个有内容自动撑开，另一个为空如何跟随高度。"}, {"id": "7000380160289538062", "title": "与超链接(a元素)息息相关的4种伪类选择器，你都用过吗？", "desc": "这是【从头学前端】系列文章的第二十三篇-《与超链接(a元素)息息相关的4种伪类选择器》 本篇文章我们将来学习与超链接(a元素)息息相关的哪些伪类选择器，本篇文章涉及的内容如下所示："}, {"id": "6844904129354006541", "title": "🍥 9张看面试题也写不出来的CSS图案！", "desc": "又到了金三银四面试季，这里我整理了... 欸！？不好意思，跑题了... 感觉近来掘金首页全是面试相关的内容，我是打开掘金也不知道该看啥，实在无奈。 上个礼拜看了许多关于平面构成的资料，我就边用 CSS 画了一些类似背景图案的玩意儿。这里给大家选了12种，从观察者的角度由易到难的…"}, {"id": "6844904040774500360", "title": "CSS实现一个粒子动效的按钮", "desc": "效果就更加震撼了，当然canvas实现也有一定的门槛，而且实际使用起来也略微麻烦（所有js实现的通病），这里尝试一下CSS的实现方式。 抛开js方案，还有HTML和CSS实现方式。HTML就不用说了，直接写上大量的标签 那么来看看CSS实现方式，主要也是两种方式，其实就是想一下…"}, {"id": "6979003471072591909", "title": "丰富多彩的CSS条纹背景与边框实现", "desc": "快速学习css背景知识和边框知识，创建出各种各样的条纹背景，发挥自己的想象力，创造力。思考力。干就完了！"}, {"id": "6909747419974467597", "title": "纯 CSS 实现轮播图", "desc": "大家好，我是 Steven。 今集我们会尝试只用 HTML 和 CSS，实现基础的轮播图效果，当然会有一些功能的缺失，例如不能自动跳转，但我们来看看用 CSS 可以实现到多少。 打开 CodePen 编辑器，先建立 HTML 的结构，轮播图我会用 &#x3C;ul> 去制作，加…"}, {"id": "6925339784537702414", "title": "引入第三方字体体积太大的问题", "desc": "在做营销活动的时候，设计稿这边使用了\"思源\"的字体。为了统一整个页面的字体风格，于是就把用到的字体引进来项目，但是最后发现字体大小竟然达到了 14MB，加载时间为3.74秒，可以预想到加载时间会进一步增长。如果用户还处于弱网环境下，这个等待时间是不能接受的。 font-spid…"}, {"id": "6978853282156396557", "title": "css-图片缩小变模糊了。", "desc": "这是我参与更文挑战的第28天，活动详情查看： 更文挑战 写作背景 事情是这个样子的。 公司的APP有个关于我们的板块（大家都有），原本是很单纯很素的文本，最多是加粗和标题。 但是公司新来的美女设计给它"}, {"id": "6844904023145857038", "title": "吃透移动端 1px｜从基本原理到开源解决方案", "desc": "最近在写移动端 H5 应用，遇到一个值得记录下来的点。现在从它的由来到实现，我们来聊一下移动端 1px，说 1px 不够准确，应该说成 1 物理像素。 CSS 像素 (虚拟像素)：指的是 CSS 样式代码中使用的逻辑像素，在 CSS 规范中，长度单位可以分为两类，绝对单位以及相…"}, {"id": "6983702849641250847", "title": "使用css绘制任意角度的扇形", "desc": "开始 先说思路吧，首先要绘制出一个扇形，肯定是从一个圆中，截取出来。因此我们只需一个平行四边形，以短边为半径，画一个圆，取与平行四边形重合的部位，就是一个扇形了，如下图。 实现 首先，其实我们只需要右"}, {"id": "6997245805707034638", "title": "CSS 常见样式整理", "desc": "css改变滚动条样式 css: 溢出文字省略号 以下方法适用于WebKit浏览器及移动端 -webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的W"}, {"id": "6844903704307433486", "title": "前端实现文字跑马灯的三种方式", "desc": "最近写了一个文字跑马灯的项目需求，刚开始用js写，能够完成需求。后面想着换种方式(分别是html和css)来实现同一个需求,以减少性能消耗。 1.判断文字的长度和容器的长度，如果文字长度大于容器长度，则开始滚动，否则不滚动。(offsetWidth) 2.获取滚动条到元素左边的…"}, {"id": "6882527193260539917", "title": "多个你不知道的 CSS 居中方案！", "desc": "要使内联元素（如链接，span 或img）居中，使用 text-align: center 足够了。 大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 使用网格容器时，图中的盘子将根据其网格区域居中。 请注意，除非将它们包裹在一个元素中，否则这将不适用于多个盘…"}, {"id": "6993682995282460709", "title": "纯CSS实现奥运升国旗", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 这周休假基本在家看奥运了。外行看个热闹，跳水看水花，体操看落地。奥运健儿们非常棒，期待中国这次奥运会金牌榜第一名！奥运健儿们加油！ 8月更文"}, {"id": "6844903812621139982", "title": "《CSS世界》中提到的实用技巧", "desc": "以下技巧的具体原理和解释请支持张老师的《CSS世界》，在这里不做展开。 一部分没录入的技巧原因是部分属性将被标准废弃，如：clip。还有一部分是因为个人觉得兼容性不好，而且CSS3的一些特性可以弥补，比如text-align:justify;，完全可以用flex布局实现。 应网…"}, {"id": "6854573222483099656", "title": "box-shadow 设置单边、多边阴影", "desc": "box-shadow 属性用于在元素的框架上添加阴影效果。 你可以在同一个元素上设置多个阴影效果，并用 逗号 将他们分隔开。 该属性可设置的值包括阴影的X轴偏移量、Y轴偏移量、模糊半径、扩散半径和颜色。 如果只给出两个值, 那么这两个值将会被当作 <offset-x> <off…"}, {"id": "7001503586697904135", "title": "CSS 选择器", "desc": "什么是CSS？ CSS（层叠样式表）用于给文档添加样式，是描述HTML或XML文档样式的语言。 CSS选择器规定了某些CSS规则会应用在哪些元素上。"}, {"id": "7000695952524705800", "title": "CSS 移动端 1 像素问题", "desc": "在移动端web开发中，UI设计稿中设置边框为1像素，前端在开发过程中如果出现border:1px，测试会发现在某些机型上，1px会比较粗，即是较经典的 移动端1px像素问题。 一、为什么会有1px问题"}, {"id": "6844903592160133127", "title": "基于react/vue的移动端终极适配方案（更新css-modules配置）", "desc": "2018-4-16日更新css-modules配置，前面步骤不变，可直接跳到第七步。 移动端适配最接近完美的解决方案在react中的使用方式。本文只讲create-react-app创建的项目如何配置，具体每个插件的用途和使用方法请先查阅大漠先生的文章，我相信大漠先生的文章已经…"}, {"id": "6998370506181181448", "title": "常见的浏览器兼容性问题处理", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 市场上浏览器种类很多，不同浏览器的内核也不尽相同，所以各个浏览器对网页的解析存在一定的差异。 下面我罗列了一些常见的兼容性问题及处理方式，"}, {"id": "6844903512413831175", "title": "也许 Vue+CSS3 做交互特效更简单", "desc": "做项目就难免会开发交互效果或者特效，而我最近开发的项目一直在使用vue，开发技术栈方面，理所当然就使用了vue+css3开发，过程中发现使用vue+css3开发特效，和javascript/jquery+css3的思维方式不一样，但是比javascript/jquery+css…"}, {"id": "6999454798151942175", "title": "浅谈 CSS3 新特性：动画", "desc": "CSS3中的动画可以分成两个属性：@keyframes 和 animation，@keyframes 负责创建动画，animation 则指定动画的播放方式。"}, {"id": "6995010018059763719", "title": "【动画消消乐】HTML+CSS 自定义加载动画 061", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为64px 相对定位 背景色：go"}, {"id": "6844904181304655886", "title": "这些 CSS 伪类，你可能还不知道，可以用起来了！", "desc": "css 伪类是用于向某些选择器添加特殊的效果，是动态的，指当前元素所处的状态或者特性。只有一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。 这篇文章在一定程度上鼓励你在构建UI时使用更简单的CSS和更少的 JS。熟悉 CSS 所提供的一切…"}, {"id": "6844903650502901767", "title": "vue 手写一个时间选择器", "desc": "最近研究了 DatePicker 的实现原理后做了一个 vue 的 DatePicker 组件，今天带大家一步一步实现 DatePicker 的 vue 组件。 1. 构思页面结构 DatePicker 组件由输入框和日历面板组成，写好页面主体结构。 输入框<input>点击显…"}, {"id": "6998339761018503199", "title": "浅谈 CSS3 新特性：文字&字体", "desc": "文字阴影 text-shadow、溢出内容的处理 text-overflow、单词断行 word-break 和 自定义在线字体 @font-face。"}, {"id": "6987419678465327134", "title": "「CSS」背景图探索", "desc": "前言：业务需求为使用两张图片纵向拼接作为页面背景，其余位置使用纯色填充，作为下拉加载更多的背景使用。"}, {"id": "6970607260837871646", "title": "5分钟实现简约计算器效果 html+css", "desc": "这是我参与更文挑战的第5天 效果： 实现： 定义标签, .result是显示计算结果框，.anniu里放数字和运算符按钮，.zero是清除按钮，它们都在表单域 form里： 可以看到，每个按钮都绑定了"}, {"id": "6913075132101558279", "title": "打字动画 CSS", "desc": "有时候我们希望一段文字可以逐字符显现，模拟出打字的效果。我们尝试用 CSS 来说实现这种效果。 这个动画是连贯的，不是逐字出现的。 针对第一个问题，我们可以用 steps() 进行处理。 针对第二个问题，我们可以用 ch 这个css单位进行缓解。 ch 它表示的是 “0” 字形…"}, {"id": "6887020887456153608", "title": "CSS flex 排版与动画 — 重学 CSS", "desc": "同学们好，我是来自 《技术银河》的 💎 三钻 。 上一部分我们讲到了盒、盒模型和整个正常流中的所有重要知识点和问题。这一部分我们来了解一下 Flex 排版的详细知识。 在之前的《实现中学习浏览器原理》篇章中，其实已经有了比较详细的接触到 Flex 排版的知识。这里我们基本上是…"}, {"id": "6846687590788104200", "title": "10分钟回顾CSS媒体查询", "desc": "今天的主角不是响应式页面怎么写,这个话题有点广,以后有时间再写好了.今天我们就来聊一聊响应式布局中很重要的一个点:媒体查询. 定义不同的样式.通常在设计响应式页面中,media属性是非常有用的.我们可以将这个属性设置在style标签上.下面是一个媒体功能查询,其作用是查询屏幕的…"}, {"id": "6995915168450347038", "title": "CSS基础知识 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 一、link和@import的区别 1、link是XHTML标签，权重高于@import，页面加载时会被同时加载，无兼容问题 2、@imp"}, {"id": "6844903507405848589", "title": "打造丝般顺滑的 H5 翻页库", "desc": "打造丝般顺滑的 H5 翻页库"}, {"id": "6844903496970420237", "title": "史上最全面、最透彻的BFC原理剖析", "desc": "本文讲了什么是BFC，BFC的概念是什么；咋样才能生成新的BFC; BFC的约束规则；BFC在布局中的应用：防止margin重叠； 清除内部浮动；自适应两（多）栏布局的"}, {"id": "6975076251220312101", "title": "当CSS不够用时。无障碍组件的JavaScript要求", "desc": "作为ModernCSS.dev的作者，我是一个CSS解决方案的忠实拥护者。而且，我喜欢看到人们用CSS来实现真正的开箱即用的设计和交互性的巧妙方法然而，我注意到一种趋势，即使用 \"复选框黑客\"等方法来"}, {"id": "6988806487523098632", "title": "纯 html + css 实现彩虹蝴蝶", "desc": "代码 解释 mask 可以看作一个遮罩，作用在其他元素上时，黑色的部分会被隐藏，白色的部分与元素原来的背景合成新的背景。 用渐变的背景填充 rect，然后使用一个背景为黑色，主体部分为白色的蝴蝶图像作"}, {"id": "6953889489420812302", "title": " 面试之CSS选择器？看这一篇就够了", "desc": "前言 这段时间在整理跟面试题相关的知识点，进行查缺补漏，然后自己对于CSS选择器这部分知识点只是有一些了解，所以这次专门梳理一下CSS选择器的知识点。下面我们就从面试官常问的几个问题开始入手 第一问："}, {"id": "6976595668949270542", "title": "使用CSS给你的“章节”添加自增序号", "desc": "当我们想写一个类似掘金的文章或者自己的博客的时候，是否有想过该怎么实现给自己文章的章节添加章节号？给小标题增加标题号？或者给列表增加列序号？"}, {"id": "6983713864693219364", "title": "CSS弹性盒子布局之Flex", "desc": "🤤弹性布局模型中，弹性容器的子元素可以在任何方向上排布，也可以“弹性伸缩”其尺寸，既可以增加尺寸以填满未使用的空间，也可以收缩尺寸避免父元素溢出。子元素的水平对齐和垂直对齐都能很方便的进行操控。通过嵌套这些框（水平框在垂直框内，或垂直框在水平框内）可以在两个维度上构建布局。—…"}, {"id": "6969735124288012318", "title": "vue中纯CSS3 实现转盘样式", "desc": "可以根据奖品数量进行转盘等分（可以做到通用性，不需要写很多套样式）；主要用到transform中的rotate和skewY;"}, {"id": "6986472855261151246", "title": "react-native的定位样式", "desc": "前言 对于一个经常游走于 web 端的前端开发来说，我们都知道 css 的 position 属性，position: 'absolute' 的元素，永远是相对与最近一个设置了position: re"}, {"id": "6993911205370789925", "title": "【动画消消乐】HTML+CSS 自定义加载动画 056", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 边框：2px solid "}, {"id": "6844903581649207309", "title": "你真的理解@import和link引入样式的区别吗", "desc": "最近在做知识体系的复盘，在复盘的时候尽可能的查漏补缺。关于@import和link引入样式的区别网上有很多种说法。大致有如下几种，不过这其中会有我存疑的地方，我们可以一起来探讨一下。 @import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，…"}, {"id": "6858826987688722446", "title": "CSS水平垂直居中回顾总结", "desc": "用了一段时间的 material-ui，都很少自己动手写原生的样式了。但html, css, js 始终是前端的三大基础，这周突然想到 CSS水平居中方案，因为用多了 flex 和 margin: auto等这类方案解决，在回顾还有几种方案可以解决，于是打算温故知新，重新打下代…"}, {"id": "6995874665616900109", "title": "CSS弹性子元素未设置高度时，如何做到高度自适应？", "desc": "有时候使用弹性盒子布局会遇到这种场景：在弹性子元素未设置高度时，想让其高度是自适应的状态，而不是被拉伸至同父元素一样的高度..."}, {"id": "6989521006779957256", "title": "CSS 3实现奖牌效果", "desc": "因为不同数字奖杯是不同颜色，所有决定用css写，实现的效果如图 HTML CSS，纯CSS实现奖杯效果"}, {"id": "6844903610082410504", "title": "CSS实现宽高等比例自适应矩形", "desc": "今天遇到一个很有趣的问题：「如何实现一个宽度自适应，高度为宽度的一半的矩形」。 经过搜索引擎的筛选和自己的反复试验,发现使用padding-bottom是最完美的解决方案。 首先我们要明白，padding-top/bottom和margin-top/bottom都是相对于父元素…"}, {"id": "6940168648052965389", "title": "2021升职加薪，了解下这个 CSS 变量", "desc": "变量大家都再熟悉不过了，为啥要代码需要变量？因为相同的数值被多个地方引用，我们将其提取为变量，这样只需要修改该变量，那么所有引用的地方都会同步修改。 一直以来CSS只是简单的UI描述语言，无法像js那样使用更高级的特性，后期CSS变量的诞生赋予CSS更多的能力，让我可以实现“一…"}, {"id": "6970575597244252167", "title": "学习 CSS 滚动条样式", "desc": "这是我参与更文挑战的第6天，活动详情查看： 更文挑战 在开发中经常出现要滚动的模块，原始样式会影响客户的体验。为了以后更快速开发，现在开始加深影像。 属性简介 注意 ::-webkit-scrollb"}, {"id": "6947877966118387726", "title": "【快讯】字节跳动加入 W3C ", "desc": "4 月 6 日，W3C 中国发布公告《欢迎字节跳动加入 W3C》。 W3C组织是对网络标准制定的一个非盈利组织，W3C是World Wide Web Consortium（万维网联盟）的缩写，像HTML、XHTML、CSS、XML的标准就是由W3C来定制。 北京字节跳动旗下拥有…"}, {"id": "6999653939570294792", "title": "CSS 常用选择器", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 标签选择器(掌握) 什么是标签选择器? 作用: 根据指定的标签名称, 在当前界面中找到所有该名称的标签, 然后设置属性 格式: 注意点: "}, {"id": "6953262866354929672", "title": "可能是最强大的 CSS 动画库", "desc": "在前端开发中，想让页面变得更生动自然，往往需要添加一些小动画，比如渐隐渐现、摇摆等。 通过 CSS3 提供的 keyframes 规则，我们可以自己实现各种各样复杂的动画效果。但是很多同学可能对动画开"}, {"id": "6844903780253696013", "title": "前端面试之BFC", "desc": "BFC(块格式化上下文): 是Web页面可视化渲染CSS的一部分, 是布局过程中生成块级盒子的区域。也是浮动元素与其他元素的交互限定区域。 简单理解就是具备BFC特性的元素, 就像被一个容器所包裹, 容器内的元素在布局上不会影响外面的元素。 可见两个块元素外边距为20px。 我…"}, {"id": "6941732312400805902", "title": "自己做个 Material Ripple 效果的按钮｜项目复盘", "desc": "我第一次发现 Material Design 是几年前玩 Android（当时还不会开发 Android 应用程序）时候看到的些贴文。那时候我就超级喜欢它的按钮组件。它有着波纹效果，以简单，优雅的方式为用户提供反馈，Q 弹爆汁儿～ 我打算用 JavaScript 监听点击事件，…"}, {"id": "6844903550938529800", "title": "别找了，这就是你想要的年会抽奖开源项目", "desc": "项目是在2016年年底给公司做的年会抽奖项目，自豪的采用jquery和原生js开发，利用非工作时间于一个月左右独立开发而成，想当年，那时我还没在项目中使用MVVM框架开发，而是稳妥的采用了我的jQuery老朋友，最后在公司年会上因为我们技术部抽的奖比较多而被群众纷纷质疑(虽然项…"}, {"id": "6844904192591527944", "title": "如何使用css3实现一个类在线直播的队列动画", "desc": "用纯css3配合数据驱动模型来实现. 大家都知道在现代的Web开发中, 我们能使用Css实现的效果尽量不要用Js, 所以我们应该优先考虑用Css3来实现,但是我们要结合数据流才能实现真正的队列动画, 所以我们可以利用MVVM框架便捷的数据驱动模型来控制动画的走向. 又由于动画的…"}, {"id": "6882983779376300045", "title": "六种设计难题的CSS实用技巧！", "desc": "最近在恶补css的知识，看到《css揭秘》一书，如获至宝。下面节选一部分笔记。 对于哪些较小的、难以瞄准的控件来说，如果不能把它的视觉尺寸直接放大，将其可点击区域向外扩大也能大幅度提升用户体验。因为一个点来点去都点不到的按钮可不招人喜欢。 只要加上cursor: pointer…"}, {"id": "6990627814814777381", "title": "纯 html + css 实现灯泡", "desc": "静止 鼠标移上去 代码 解释 灯泡的外形 这里用 border-radius 进行模拟，三个方向直角变成圆形，最后一个方向的的直角变成椭圆。然后将椭圆的那一个方向旋转到上方。 当然，如果想要更逼真的效"}, {"id": "6844903553090191368", "title": "Vue 换肤实践", "desc": "Vue 实现切换主题功能，包括 CSS 切换，图标切换和图片切换。"}, {"id": "6986902214510018591", "title": "CSS【vertical-align】属性相关", "desc": "1、Demo1案例：img元素底部间隙问题 注：图片底部有一定高度的间隙 解决方法： 方法一：给父元素设置 **font-size: 0px **清除底部多余间隙 方式二：给行 内块元素设置 vert"}, {"id": "6974779279083044901", "title": "巧用CSS实现进度条", "desc": "这是我参与更文挑战的第17天，活动详情查看： 更文挑战 ! 👽 概论 进度条相信大家都不要陌生，但大家在碰到进度条的时候是否有考虑过进度条是怎么实现的呢？其实进度条的并不算很难，单纯靠css就能完美实"}, {"id": "6924544831687491591", "title": "「多图预警」这一次，带你彻底掌握Less！", "desc": "我们都知道CSS的编写有些令人沮丧，尤其是涉及到具有数千行代码的更严肃的项目时。你最终将在各地重复相同的规则，要保持CSS的可维护性，需要付出大量的努力 幸运的是，Web开发社区已经解决了这个问题。现在，我们有了CSS预处理器，例如Less，Sass和Stylus,虽然Sass…"}, {"id": "6983170975357468680", "title": "前端优化——CSS优化", "desc": "前面两篇都在说性能优化，整篇的理论性知识，没有任何实践的内容，很不符合我们程序员的风格。而我的初衷是为了我们代码中的优化，不仅仅是指性能上的，还有可维护性这个指标需要我们重视。"}, {"id": "6948291105825751076", "title": "对BFC理解", "desc": "以前对BFC的理解仅限于，两个相邻的box盒子设置margin，外边距会出现塌陷，会以margin最大值作为两个盒子的距离。解决思路是只设置一个方向的margin值，或者给任意一个box盒子再嵌套一个box盒子。后面发现自己的理解太狭隘，于是在网上收集资料，分析；写下自己对BF…"}, {"id": "6939137968766615582", "title": "CSS3复习（1）", "desc": "1、CSS概述使用HTML标记属性对网页进行修饰的方式存在很大的局限和不足，如网站维护困难、不利于代码阅读等。如果希望网页美观、大方，并且升级轻松维护方便，就需要使用CSS实现结构与表现的分离。CSS"}, {"id": "6844903553270562830", "title": "[CSS]提出质疑：@import和link的区别", "desc": "事情是这样的，自己在看这两个的区别的时候，看到的说法都是在说，@import会慢于link去执行，使用@import的时候样式表会在页面加载完之后再去执行，而link会在页面加载的时候执行，不过我在chrome下去测试却不是这样的，测试的结果是，按照其在页面中的引入顺序来加载的…"}, {"id": "6914085611699699725", "title": "谈谈文档流", "desc": "可以直观地看出:inline-block元素到最右边不会像inline元素一样会折行显示文字内容，而是类似块级元素，一整块地显示。所以说inline-block有着inline元素的从左到右的流动方向，也有着block元素的块级显示。 1. float 2. position:…"}, {"id": "6948038372984094728", "title": "CSS学习:基础+进阶 （三）", "desc": "盒子模型border(边框)、padding(内边距)不占据盒子模型的宽高强制border(边框)、padding(内边距)不占据盒子模型的宽高: border-box-->以边界去固定盒子尺寸与bo"}, {"id": "6897921349633867790", "title": "CSS揭秘：6.复杂的背景图案（上）", "desc": "上一篇文章中我们学会了如何使用渐变实现条纹状的背景，但是实际上条纹背景并不是我们能实现的唯一的背景图案，利用渐变我们可以实现很多更为复杂的图案，本篇会介绍一些其他的简单而实用的背景图案。 网格的原理其实很简单，目前我们已经实现了条纹背景，那么如果我们将条纹背景组合呢？互相穿插组…"}, {"id": "6905643441662164999", "title": "css定位+动画", "desc": "div的分层postion:static(默认值无作用)默认值，呆在文档流里无作用postion:sticky(大部分不兼容)移动到后，变成fixed效果position:relative使用场景用于"}, {"id": "6844903635512475662", "title": "Airbnb CSS-in-JavaScript 风格指南", "desc": "为什么呢？因为我们在组件中将这些键作为styles对象的属性获取，使用驼峰命名是最为方便的方法。 对其他样式的修改器(modifier)，使用下划线命名 为什么？类似BEM， 这个命名惯例使它非常清晰地表明这个类就是要用来修改前面添加了下划线的元素的。下划线不需要引用，所以比起…"}, {"id": "6844903565136248840", "title": "使用 SVG 打造一个高质量的 ICON 系统", "desc": "使用 SVG 打造一个高质量的 ICON 系统"}, {"id": "6938419250130321416", "title": "前端基础之CSS篇", "desc": "千位：声明在style的属性（内联样式）则该位得一分。 百位：选择器中包含ID选择器，则该位得一分。 十位：选择器中包含类选择器、属性选择器或者伪类则该位得一分。 个位：选择器中包含元素、伪元素选择器则该位得一分。 盒模型是CSS的核心概念，描述了元素如何显示，以及如何相互作用…"}, {"id": "6938392016434921509", "title": "css-布局 两边等宽中间自适应的三栏布局", "desc": "我们通常使用圣杯布局和双飞翼布局来实现两边等宽中间自适应的三栏布局。 这两种布局的实现思路基本一致，但有一些细微的差别。 圣杯布局的实现思路是通过设置父元素的padding-left和padding-right值，让父元素左右的两边撑出足够容纳左右子元素的空间，然后调整左右两个…"}, {"id": "6844903559419396104", "title": "float 常见用法与问题", "desc": "float 作为一个出现频率相当高的属性，但是很多新手对它的一些理解和使用并不太了解，前段时间有个实习生问起我，然后就把以前写的文章翻出来，大致整理了一下。对新手朋友可能还是有点用，喜欢的可以点个star哦 ^^"}, {"id": "6844903698175361037", "title": "【译】通过例子解释 Debounce 和 Throttle", "desc": "前言：这篇文章是lodash文档里在 Debounce 和 Throttle 内容中推荐阅读的一篇文章，所以建议想要详细了解这块技术的同学可以看一看这篇文章，有助于你直观的理解。 Debounce 和 Throttle 是两个很相似但是又不同的技术，都可以控制一个函数在一段时间…"}, {"id": "6844903576397938701", "title": "JavaScript 3/30: CSS变量", "desc": "本题当实现这样的效果，利用JavaScript及CSS3来改变CSS的值，使得拖动滑块及选中颜色时，可以实时调整图片的内边距（padding）、模糊度（blur）及背景颜色（background），同时标题中JS二字的颜色也随之更改。 查看我的demo及代码。 为每个input…"}, {"id": "6844903504599842830", "title": "我遇见的哪些 CSS 中有趣的尺寸、宽高", "desc": "fill-available 元素会充分利用可用空间，就像 div 一样「默认 100% 宽度」。 块级元素默认宽度表现行为就是 fill-available。 如果包含英文，因为默认英文单词不换行，所以，最小宽度可能就是里面最长的英文单词的宽度。 inline-block 元…"}, {"id": "6844903730735906830", "title": "# 翻译：Shadow DOM隔离释义", "desc": "使用shadow DOM的一个主要好处是样式隔离。 要了解这意味着什么，让我们来假设我们要创建自定义进度条组件。 我们可以使用两个嵌套的DIV来显示条形，使用另一个DIV来显示文本以显示百分比，如下所示： 模板元素中的内容是惰性的，不运行脚本或加载图像和其他类型的子资源。 这个…"}, {"id": "6844903865377095694", "title": "CSS进阶（5）—— 深入理解margin", "desc": "说到margin，通常我们会想到一层透明的外边距，用于划分元素与元素之间的界限，然而margin除了可以划分边界，还可以改变元素\"可视尺寸\"，注意这里我没有用内部尺寸，因为margin和padding在改变元素可视尺寸方面几乎是互补的。对于设定了width或者元素保持\"包裹性\"…"}, {"id": "6844903865586827277", "title": "CSS进阶（7）—— 内联元素的掌管者line-height和vertical-align（上）", "desc": "要了解内联元素，就不得不提到字母x，正是有了x，内联元素才确定了自己的基线（baseline），有了baseline之后，才有了line-height和vertical-align。因此在学习后面的内容之前，必须要了解一个概念： 既然x那么重要，因此CSS还给了它一个特殊的称呼…"}, {"id": "6844903853721124877", "title": "[译] 在项目中集成第三方动画库 —— 第二部分", "desc": "在为本文查资料时，我发现第三方动画库中最常见的动画类型就是过渡动画（并非 CSS transition）了。有些简单的动画应用于元素出入页面的过程。现代单页应用中最司空见惯的模式就是让一个元素进入页面，顶替另一个离开页面的元素。想想这种情况：第一个元素淡出而第二个元素淡入。这个…"}, {"id": "6844903612938731534", "title": "CSS最佳实践探讨 - Atomic CSS", "desc": "5年前的文章，感觉就像一颗被人遗忘的遗珠"}, {"id": "6844903586841755655", "title": " 【基础知识】Flex-弹性布局原来如此简单！！", "desc": "布局的传统解决方案是基于盒状模型，依赖 display + position + float 方式来实现，灵活性较差。2009年，W3C提出了一种新的方案-Flex，Flex是Flexible Box的缩写，意为”弹性布局”。Flex可以简便、完整、响应式地实现多种页面布局。下…"}, {"id": "6858674249117204487", "title": "精读《CSS揭秘》之背景与边框", "desc": "CSS对于前端工程师来说是基础中的基础，如果基础不扎实，就得日常跪求UED给图来实现效果。 CSS 背景的工作原理是默认延伸到border区域的，CSS3 中，我们可以使用 background-clip 属性来调整这个默认行为带来的不便。将它设为 padding-box，便可…"}, {"id": "6918726428532375566", "title": "如何使用CSS和JS创建“前后”图像比较效果", "desc": "使用html range input创建前后图像比较效果的分步教程。使用CSS和JavaScript，JS部分代码非常少，主要是HTML、CSS，和实现思路。 如果你有两张图像进行比较，则“前后”图像滑块是一个有效而又简单的UI元素。 该“slider”元素使你的用户可以控制两…"}, {"id": "6996585531530280991", "title": "总结常用的flex布局", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。块级元素使用display: flex;"}, {"id": "6911203296078692359", "title": "仅使用CSS就可以提高页面渲染速度的4个技巧", "desc": "用户喜欢快速的网络应用，他们希望页面加载速度快，功能流畅。如果在滚动时有破损的动画或滞后，用户很有可能会离开你的网站。作为一名开发者，你可以做很多事情来改善用户体验。本文将重点介绍4个可以用来提高页面渲染速度的CSS技巧。 1. Content-visibility 一般来说，…"}, {"id": "6844904016439148551", "title": "深入理解 flex-grow、flex-shrink、flex-basis", "desc": "1. Flex布局 接下来，我们先提出两个概念：剩余空间和溢出空间，具体是什么意思我们后面慢慢解释。 2. flex-grow 传统的布局是子容器在父容器中从左到右进行布局，应用 flex 进行布局，那么父容器一定设置 display: flex，子容器要“占有”并且“瓜分”父…"}, {"id": "7002227970710437919", "title": "【老生常谈👴】关于css选择器优先级的那些事儿", "desc": "在这篇博客里，我想跟大家聊聊关于css选择器优先级的话题。虽然是个\"老话题\"，但是在最近的研究中我发现了一些新东西，本着 好记性不如烂笔头的原则，决定整理成文分享出来，希望对正在阅读本文的你有所帮助"}, {"id": "6844903615920898056", "title": "CSS动画：animation、transition、transform、translate傻傻分不清", "desc": "在平时开发过程中，由于都是自己捣鼓玩的项目，并没有UI设计给我的设计图，更没有什么特效要求，导致对css动画一直都不是很熟悉，但是作为即将进入实习单位的萌新程序员，要时刻准备着设计师要求的各种动画，于是有了这一篇文章。 什么叫过渡？字面意思上来讲，就是元素从这个属性(color…"}, {"id": "6909343429550866445", "title": "【BiliBili 秋】头图景深对焦效果", "desc": "大家好，我是 Steven。 今期我们会介绍怎样实现 BiliBili 秋季 的那个顶部图片横幅效果，当游标移过去的时候，随着左右移动，会有景深和对焦的效果。 打开 CodePen 编辑器，在 HTML 的部份加入一个 &#x3C;header> 标签，然后里面加入六个 &#x…"}, {"id": "6966567804849881124", "title": "练习动画最好的方式（一）：锁链按钮", "desc": "今天简单练习了一下从Dribbble上找灵感然后用前端技术将动画实作出来的过程，或许没有什么新的东西，但希望能给大家带来点启发， 我自己平常没事在家做点有趣的动画或CSS，自娱一下！"}, {"id": "6992409650570199071", "title": "css常用总结-超全的居中分类总结", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 居中问题(重点) 居中问题真的是老生常谈的话题,基本上每次面试都会被问到,毕竟在样式的时候居中真的无处不在,关于居中的文章网上比比皆是,好好"}, {"id": "6845166890893967373", "title": "不走寻常路,CSS垂直居中的另类实现", "desc": "..."}, {"id": "7002231366884524046", "title": "【日拱一卒】CSS案例：封页角实现", "desc": "这是我参与8月更文挑战的第30天，活动详情查看： 8月更文挑战” 封页角需求 主要是实现这里的封页角 demo实现 第一步 实现不旋转的标签调整好间距 宽度 字体大小 加上旋转-webkit-tran"}, {"id": "6844903560879013901", "title": "CSS设置居中的方案总结-超全", "desc": "CSS设置居中的方案总结，主要是垂直居中的梳理。最后改于2021年2月4日，根据目前常用的方案进行了调整。"}, {"id": "7001708284130361358", "title": "基础HTML+CSS3 知识总结", "desc": "1. HTML5 meta标签 语义化标签 三种html列表 超链接、图片、内联框架、音视频 实体（转义字符） 2. CSS3 1 选择器 复合选择器 关系选择器 伪类选择器 a伪类 伪元素，表示页面"}, {"id": "6939437900954091551", "title": "三个网站玩转 Grid 布局", "desc": "CSS Grid 布局是如今 CSS 中最强大的布局系统。与 flexbox 的一维布局系统不同，CSS Grid 布局是一个二维布局系统，也就意味着它可以同时处理列和行。通过将 CSS 规则应用于父元素 (成为 Grid Container 栅格容器)和其子元素（成为 Gri…"}, {"id": "6997722260815478814", "title": "纯CSS绘制五角星", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 问题起源 问题起源于最近在读的《CSS Secret》书籍中介绍了一个CSS属性，clip-path，没听过这个属性，所以略微研究了一下。"}, {"id": "7000564760722800654", "title": "CSS 字体样式", "desc": "在写项目的过程中，常常会遇到给文字设置样式的场景，一般来讲，字体有类型、大小、粗细、风格、颜色等样式。"}, {"id": "6844903855847637005", "title": "前端进阶之什么是BFC？BFC的原理是什么？如何创建BFC？", "desc": "当浏览器对一个 render tree 进行渲染时，浏览器的渲染引擎就会根据 基础盒模型(CSS basic box model) ，将所有元素划分为一个个矩形的盒子，这些盒子的外观，属性由CSS来决定。 我们在浏览器控制台输入如下代码就可以看到页面的每一个元素都是由一个矩形来…"}, {"id": "7000669639055245325", "title": "CSS动画-调速函数", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 通过本月的一些文章： 纯CSS制作跳动的心， 纯CSS制作一个小动画， 如何使用vue的transition做动画效果， 纯CSS实现奥运"}, {"id": "6994313210278969374", "title": "基础知识常备1：盒子垂直水平居中问题", "desc": "这是我参与8月更文挑战的第N天，活动详情查看：8月更文挑战 已经更文1天 实现效果： 方法1：（利用定位方式子绝父相1） 方法2：（利用定位方式子绝父相2） 方法3：（利用定位方式子绝父相3-未指定盒"}, {"id": "6975736013888978975", "title": "CSS 变量实现主题切换", "desc": "CSS 变量实现主题切换 CSS 变量 基本用法 声明一个变量，属性名需要以两个减号（--）开始，属性值则可以是任何有效的CSS值。 选择器是指定变量的可见作用域，该变量仅用于匹配当前选择器及其子孙，"}, {"id": "6986154661661114404", "title": "前端基础6/1-页面布局", "desc": "基础共讲六部分，如图 页面布局 题目：假设高度100px，三栏布局，其中左右栏宽度为300px，中间自适应 想一下你有几种方式？？？？？ 一：解决方案 1：浮动 但是他有缺陷，如图所示 2：绝对定位 "}, {"id": "7005846227887587364", "title": "CSS 知识总结", "desc": "一、浏览器渲染原理 浏览器渲染过程 步骤 根据 HTML 构建 HTML 树 （DOM） —— 描述内容 根据 CSS 构建 CSS 树 （CSSOM） —— 描述需要应用的样式规则 将两棵树合并成一"}, {"id": "6844903573847801870", "title": "给新手前端的✋5段救命🚀css代码(scss mixin)", "desc": "在工作中我也攒下了不少常用css, 我把他们封装成了mixin, 挑选了✋5个分享给大家, 希望大家喜欢. 参过参数可以只是单/多行. 移动端由于像素密度比的问题, 实际的1px边框看起来比较粗, 如果想要更\"细\"可以使用下面的代码. 不同像素密度比的设备都可以兼容(pc/手机…"}, {"id": "6844903671143088136", "title": "rem布局解析", "desc": "移动端的屏幕大小各异,尤其是安卓机,千奇百怪,各种尺寸的机型都有,而且有1倍屏,2倍屏，3倍屏之分，作为精益求精的前端，我们希望找到一种完美适配各种机型的方案。rem是现在主流的移动端自适应布局方案，本文主要介绍了rem布局的原理和通用方案 首先说一下，我们想要达到的自适应效果…"}, {"id": "6844903588607557639", "title": "带你走进webpack世界，成为webpack头号玩家。", "desc": "最近朋友圈被《头号玩家》刷爆了，斯皮尔伯格一个资深电影导演，把对过去经典的致敬，对未来的憧憬浓缩在这一部电影中，可以说让观众燃了起来。 观望整个前端开发，不断的演化，发展迅速。前端开发从最开始切页面, 前端自动化构建工具日新月异，从最初的Grunt,Gulp到现在前端项目可以说…"}, {"id": "6982595708796796965", "title": "最全的CSS阴影总结【建议收藏】", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 使用box-shadow属性表现阴影效果是现代浏览器中是一个非常有用的技巧，通过它我们可以做出很多非常酷的东西。虽"}, {"id": "6992467573879078948", "title": " CSS3 转换动画transform", "desc": "CSS3 转换： 一、transform：2D 转换方法：子属性：translate()、rotate()、scale()、skew() 二、原点 transform-origin(x,y) x，y可"}, {"id": "6981015460774936589", "title": "手把手教你系列之CSS基础-上", "desc": "书接上回没有看我写的手把手教你系列之html基础的赶紧去看一下吧！！！如果把一个网页比作人的的话，那么html就相当于人的骨架，那么我们的CSS就相当于人的衣服。没错CSS就是来给网页设置各种漂亮的样"}, {"id": "6963070013863362567", "title": "[UI 调试技巧] CSS的outline调试法", "desc": "本文转载自 yck 的文章： https://github.com/KieSun/Dream/issues/27 在业务开发过程中，想必大家经常会需要查看一个元素的位置及大小并修改它的 CSS，因此就"}, {"id": "6995503836039217183", "title": "老生常谈的水平垂直居中的几种方案", "desc": "如何让一个盒子水平垂直居中，我想大家都有自己的办法了，但是我还是想系统化的收集、比较和总结一下，以方便自己的学习，那让我们来交流讨论一下吧，如果错了的地方，欢迎大家指点，如果大家还有其他没有提到的方法"}, {"id": "6997384048012656671", "title": "重学前端 | CSS基础下部", "desc": "本篇主要说了CSS关键的盒模型、文档流、布局、定位等关键概念和相关CSS属性，并展示了CSS装饰文档的可能性。最后，在简略看下如何调试CSS，以及当今都有什么工具可以帮助我们更好的写CSS、用更好的理"}, {"id": "7001815521200963591", "title": "【面试必知】CSS3都有哪些新特性", "desc": "前几天面试被问到一个问题：CSS 3有哪些新特性，我整个人都不好了。心里MMP，嘴上xxx。 事实上，当前主要网站均已支持CSS 3。但还是要知道CSS3有哪些新特性有助于通过面试"}, {"id": "6844903925896708103", "title": "【前端词典】这些功能其实不需要 JS，CSS 就能搞定", "desc": "今天我们大家介绍一些你可能乍一眼以为一定需要 JavaScript 才能完成的功能，其实 CSS 就能完成，甚至更加简单。 1. 每个单词的首字母大写 其实我第一次看到这个功能的时候就是使用 JS 去实现这个功能，想都没想 CSS 可以完成这个功能。马上就屁颠屁颠的写了一个方法…"}, {"id": "6844903619909648398", "title": "CSS 常用技巧", "desc": "相信大家在写css属性的时候，会遇到一些问题，比如说：垂直对齐，垂直居中，背景渐变动画，表格宽度自适应，模糊文本，样式重置，清除浮动，通用媒体查询，自定义选择文本，强制出现滚动条，固定头部和页脚，自己在网上看到的一篇关于css的文章，感觉这里边一些常用的css代码片段对大家很有…"}, {"id": "6992132960040255518", "title": "详解flex弹性盒子", "desc": "弹性盒子 一、（了解）Flexbox布局功能主要具有以下几点： 二、创建Flex容器： 三、基本概念： 四、容器属性： 五、项目属性 小试牛刀总结了一番，flex的属性及用法"}, {"id": "6844903591317094407", "title": "50道 CSS 基础面试题（附答案）", "desc": "1、介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？ 标准盒子模型：宽度=内容的宽度（content）+ border + padding + margin 低版本IE盒子模型：宽度=内容宽度（content+border+padding）+ margin …"}, {"id": "6975882876193603597", "title": "我用纯CSS实现了优惠券剪卡风格，UI小姐姐说....", "desc": "在做商城类项目的时候，我们可能都会经历过“优惠券”这类需求，笔者在过往工作中，都是直接要求UI切图来实现，直到有一天产品告诉我一个奇思妙想"}, {"id": "6844903715283927054", "title": "2018年前端面试总结", "desc": "再有两个月，2018就快过完了，因而有必要在年末对2018年的前端学习做一个总结，本文主要从前端面试中的一些基础知识来对前端进行相关的总结。本文根据网络面试题进行总结。 根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的…"}, {"id": "7007803214758150175", "title": "中秋佳节，致敬远在太空上的中国航天员。使用css实现火箭登月的效果", "desc": "使用css实现火箭登月的特效来致敬远在太空的中国航天员们，表达对他们的思念。希望他们能够圆满完成任务，顺利回到地面。"}, {"id": "7005763586999975943", "title": "波浪动画很常见，但这个波浪组件绝对不常见", "desc": "最近项目优化的时候发现了一个巨大的累赘：一个78kb的gif动态图： 这个动图是干嘛用的呢？就是在请求一些大面积数据等情况时显示一个我们网站的镂空Logo，然后会出现一些金黄色的液体像水漫金山..."}, {"id": "7007971869655564324", "title": "HTML+CSS+JS实现React简单的计算器实例", "desc": "​ ​   ​ CSS样式： 部分HTML代码 : 上面的其他css样式和js等需要引入即可运行成功 、很简单"}, {"id": "7007626716667609125", "title": "CSS3 动画 详解", "desc": "CSS3 动画 前言 css3 动画 两大组成部分：transition（过度）和animation(动画); 同时, 还有transform属性来对2D/3D节点进行平移、缩放、旋转以及拉伸. （这"}, {"id": "7007632958622269471", "title": "css做‘展开收起’功能，借鉴大佬思路", "desc": "开局一张图 上图所示，多行文本的展开收起是一个很常见的交互效果。 实现这一类布局和交互难点主要一下几点： 位于多行文本右下角的“展开收起”按钮 “展开”和“收起”两种状态的切换"}, {"id": "7002829486806794276", "title": "巧用CSS filter，让你的网站更加酷炫！", "desc": "CSS filter在日常开发中是很常见的，这里我们将使用它实现一些动画效果，让网站交互更加酷炫，同时也加深对CSS filter的理解。"}, {"id": "7006507905050492935", "title": "【中秋】纯CSS实现日地月的公转", "desc": "为了这次掘金的中秋活动，我也算是苦思冥想了两天，终于想到了一个在掘金没见人做过的东西（应该没做过吧，我也不知道）—— 用 HTML+CSS 模拟日地月的公转"}, {"id": "7007819026910937125", "title": "再谈文字省略符的实现", "desc": "本文介绍不同情况下文本截断的实现方案；并且着重说明了实现多行文本的折叠，并且控制折叠位置的方案。其中涉及到Range这个api的使用"}, {"id": "7007203118798618661", "title": "原来3D感空间行星轨迹是这样画的", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 背景 点击查看太阳、地球、月亮3D旋转 点击查看太阳、地球、月亮3D旋转源码 中秋佳节即将到来，远在他乡的孩子们马上可以回家和父母一起吃月饼，看"}, {"id": "7007794917149786119", "title": "怎样才能写好页面，对于前端人员来说布局真的有那么重要吗", "desc": "css基础篇（第五篇） 回顾 在上一讲中我们基本上了解了 css 中比较重要的清除浮动四种方式以及float怎么用会比较合理，以及在 css 中常见的普通流、浮动、定位等问题。除此之外在前端中掌握基本"}, {"id": "7007796518740557837", "title": "CSS知识点总结", "desc": "总结了面试常涉及的CSS相关知识，比如盒模型、选择器优先级、伪元素伪类元素、display属性、动画属性、opacity、visibility和opacity的区别等等"}, {"id": "7007590222800109598", "title": "HTML+CSS+JS实现卡通足球人物梅西ui特效", "desc": "HTML+CSS+JS实现卡通足球人物梅西ui特效 HTML+CSS+JS实现卡通足球人物梅西ui特效"}, {"id": "7007992008870461477", "title": "Less教程", "desc": "Less也是一门CSS预处理语言，它扩展了CSS语言，增加了变量、Mixin、函数等特性，使CSS更易维护和扩展。Less可以运行在Node或浏览器端。  一、Less的安装与编译 书写less代码 "}, {"id": "7005366966554722312", "title": " 【评论参与抽奖】学透CSS- :is 和 :where 让你的CSS更简洁", "desc": "新人在入门CSS的时候，往往最困惑的就是两件事情（个人想法）：1. CSS是基于文档流的，有些时候编写的代码，并不符合自己的预期！2.复杂的选择器，什么场景用什么选择器，选择器太长，让新人很困恼。"}, {"id": "7005378226612600863", "title": "高手是如何写出让别人看不懂的选择器", "desc": "本文的标题是如何写出让别人看不懂的选择器，但是本意不是希望大家去写如此复杂的选择，一些复杂（怪异）的选择器在一些特定场景下也许有着妙用，又或者写出这种选择器是基于当时的特殊背景。 通过这些案例，我们窥"}, {"id": "7006721748368359460", "title": "中秋节快乐，使用CSS3实现小火箭🚀绕月飞行", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 一年一度的中秋悄然而至，提前祝掘友们中秋节快乐，祝大家开心甜蜜与爱人团圆，幸福美满和家人相聚，好运相随“圆圆”不断 🚀🚀🚀"}, {"id": "7007091202352742437", "title": "用CSS实现《亲热天堂》——致敬自来也老师", "desc": "前言 效果展示 实现思路 首先《亲热天堂》在平铺时需要呈现出立体感，我们可以使用伪类元素来构成书籍的上侧边和右侧边，通过transform:skew() 属性我们可以定义一个倾斜转换的元素，同时我们给"}, {"id": "7001779766852321287", "title": "一个\"剑气\"加载🌪️", "desc": "我们在网页加载的时候总会加上一些过渡效果来引导用户，减少白屏时间，而加载的效果可以用svg也可以使用一些我们封装好的组件,今天就..."}, {"id": "7007796463308636174", "title": "css的自学快乐笔记（3）----css盒模型", "desc": "CSS盒模型 所有的​HTML元素​都可以被认为是​盒子​。CSS盒模型代表网站的设计和布局。 它由​外边距​​(margin)​，​边框​​(border)​，​​内边距（填充）​​(padding"}, {"id": "6997697496176820255", "title": "居然不知道CSS能做3D？天空盒子了解一下，颠覆想象👽", "desc": "大家好，这次给大家换换口味，我们来点不一样的东西。请不要理解歪了🐶。 通过Three实现3D很容易，但这次我们通过CSS来实现3D。"}, {"id": "7002578650289831944", "title": "前端css单位小结：vh、vw、百分比、rem、px、计算属性calc", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 前端css单位小结：vh、vw、百分比、rem、px、计算属性calc 1 vh 视口的高度，也就是眼睛可以看到屏幕的高度，如果你的屏幕分"}, {"id": "6991426569038200845", "title": "一篇文章学会Flex布局的基本使用｜ 8月更文挑战", "desc": "传统布局与Flex布局的区别 传统布局兼容性好，flex布局兼容性较差。 传统布局不能在移动端很好的布局，flex布局则适合在移动端布局。 传统布局布局较为繁琐，Flex布局较为简单。 flxe的布局"}, {"id": "6937543860180484110", "title": "这几个CSS概念你了解吗？", "desc": "1. CSS Module CSS Module 在打包的时候会将类名转换成带有hash值的新类名，根据命名规矩，从而杜绝css类名冲突的问题。 我们可以看到，CSS Modules在最终构建页面时会自动重命名class，用vue官方描述就是，这个 module 特性指引 Vu…"}, {"id": "7002046131748208648", "title": "css伪元素详解", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。下例中"}, {"id": "7001775912366637093", "title": "CSS 盒子模型", "desc": "在 CSS 盒子模型理论中，页面中所有的元素都可以看作一个盒子，并且占据着一定的页面空间。一个页面由很多盒子组成，因此掌握盒子模型不仅要掌握一个盒子的内部结构，还要理解多个盒子的相互关系。"}, {"id": "6844903553765474311", "title": "2017 年崛起的 JS 项目", "desc": "和 2016年 一样，又到了我们回顾 2017年 Javascript 领域发展与变化的时候。 通过对比各项目过去 12 个月在 GitHub 上新增 star 数量，来评估其在 2017 年度的受关注程度，进而选出 2017 年度 JavaScript 领域崛起的明星项目。 …"}, {"id": "6951559858629902349", "title": "面试题 有关CSS查缺补漏", "desc": "前言：这是一篇有关CSS面试复盘，在面试过程中紧张是难免的，但也要发挥出自己应该有的水平，把自己知道的都有条不紊的讲出来。所以面试总结是非常重要的。1. Img background 区别Img ： "}, {"id": "6846687594693001223", "title": "奇妙的 CSS MASK", "desc": "本文将介绍 CSS 中一个非常有意思的属性 mask 。 顾名思义，mask 译为遮罩。在 CSS 中，mask 属性允许使用者通过遮罩或者裁切特定区域的图片的方式来隐藏一个元素的部分或者全部可见区域。 其实 mask 的出现已经有一段时间了，只是没有特别多实用的场景，在实战中…"}, {"id": "6844904062035427342", "title": "CSS 故障艺术", "desc": "本文的主题是 Glitch Art，故障艺术。 什么是故障艺术？我们熟知的抖音的 LOGO 正是故障艺术其中一种表现形式。它有一种魔幻的感觉，看起来具有闪烁、震动的效果，很吸引人眼球。 故障艺术它模拟了画面信号出现故障导致成像错误的感觉。青色色块与红色色块无法重合就是这种故障的…"}, {"id": "6844903667733118983", "title": "css加载会造成阻塞吗？", "desc": "之前面试今日头条的时候，今日头条面试官问我，js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？所以，接下来我就来对css加载对DOM树的解析和渲染做一个测试。 假设结果: 在bootstrap.css还没加载完之前，下面的内容不会被解析渲染，那么我…"}, {"id": "6844904192142737422", "title": "前端！7个快速发现 bug 神仙调试工具", "desc": "如果你从事的是前端开发，就应该能理解调试代码还是很有难度的。特别是对于JavaScript，一个小错误有时会花费数小时来调试。对于不同的浏览器、操作系统和设备，错误又是不可避免的。 本文主要列出一些调试工具，你们可以自己根据情况来选择。 任何现代的 Web 浏览器都配有功能强大…"}, {"id": "6992961262560739364", "title": "深入学习 CSS 中的伪元素 ::before 和 ::after", "desc": "伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。例如 `::first-line` 伪元素可用于更改段落首行文字的样式。"}, {"id": "6998321881405194247", "title": "你应该知道的这 十个 CSS 小技巧", "desc": "作为一个专业的切图仔，为了能够提高切图效率，收藏一下 CSS 常用的方法不可少，话不多说直接开始😁。"}, {"id": "6911155980789088264", "title": "CSS3-实现苹果手机解锁的字体闪亮效果", "desc": "首先呢，需要做出来一道倾斜的白光，这道白光就是用来实现“照亮字体”的效果的。 这一步做好之后，接下来的事情就简单了，也就是让白光先消失，然后当鼠标移动到字体上的时候，白光出现，从字体上划过。 上面的图片可以看到，就是白光的边缘不是由白色直接变成黑色，而是渐变成黑色。所以，我们在…"}, {"id": "7002611049090269214", "title": "CSS变量 —— 在CSS中使用JS变量，使用JS操作CSS", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 场景 | 带有前缀 `--` 的属性名，比如 `--eg--name`，表示的是带有值的自定义属性，其可以通过 var 函数在全文档内复用"}, {"id": "6844903982960214029", "title": "面试官：你能实现多少种水平垂直居中的布局（定宽高和不定宽高）", "desc": "我们在日常的开发中，经常会遇到这样一个问题，就是如何实现居中水平垂直居中对齐。并且在面试中也会出现这样的问题，但是我们往往回答的不是很全部，而导致没有得到面试加分。接下来我们通过不同的方式来实现，让我们成功破解这道面试。 不定宽： 参考上诉例子中不定宽高例子。"}, {"id": "6993346338976956429", "title": "CSS3响应式布局", "desc": "CSS3响应式布局 随着互联网时代的发展，我们对网页布局有了新的要求，例如我们可能是通过手机或者电脑来看网页的，而手机和电脑的大小和分辨率都是不一样的，那么就要要求页面能够在不同的设备上呈现相同的效果"}, {"id": "6993199691533910046", "title": "CSS中content属性的妙用", "desc": "本文讲解CSS中使用频率并不高的content属性，通过多个实用的案例，带你由浅入深的掌握content的用法，让代码变得更加简洁、高效。"}, {"id": "6844903710070407182", "title": "几种常见的CSS布局", "desc": "其中实现三栏布局有多种方式，本文着重介绍圣杯布局和双飞翼布局。另外几种可以猛戳实现三栏布局的几种方法 对于第一种，先通过对header,content,footer统一设置width：1000px;或者max-width：1000px(这两者的区别是当屏幕小于1000px时，前…"}, {"id": "6990265152423591949", "title": "使用下一代高性能图像技术", "desc": "还记得以前当切图仔年代，Photoshop想高保真输出的图像也是比较大。不得不把切好的图再批量上传到TinyPNG压缩，压缩后都是无损或者说看不出有损的图像。大大提升网站访问速度，再到前端工"}, {"id": "6844903875208544270", "title": "CSS 进阶（终章）—— CSS 世界流向的掌控者 direction 和 writing-mode", "desc": "direction属性的兼容性非常好却鲜有人用（又包括我了），很多人甚至都没有听过这个属性，要说这个属性的作用，可了不得，他能改变水平流的方向。作者对这个属性对于纯文本影响介绍的不多，只提到某些国家的语言是从右往左书写的，因此这个属性开发的本意是为了兼顾这些语言。那么具体是怎么…"}, {"id": "6844903565949927438", "title": "vue 使用Jade模板写html，stylus写css", "desc": "使用Jade模板写html，stylus写css"}, {"id": "6918688201041248264", "title": "用CSS实现一个方块 [动画演示] [#1持续更新中.....]", "desc": "CSSBattle 是一个使用 HTML 和 CSS 来实现目标图案，并实时预览和对比符合程度的网站。具有很高的趣味性和游戏性。 本文是 CSSBattle #1 Simply Square， 实现一个方块。 直接给div 设置 absolute,并且设置 width and …"}, {"id": "6952042097973133325", "title": "你必须学会的flex布局", "desc": "CSS3中的Flex布局flex布局是2009年W3C提出的一种新的布局方案，可以非常简洁方便的完成网页布局，与平常的浮动，定位相比，flex布局显得更灵活更好上手和理解什么是flex布局？flex意"}, {"id": "6844903918233714696", "title": "CSS绘制小黄鸡", "desc": "看到可爱的卡通形象就很想用CSS实现一波，找点乐子~codepen链接：https://codepen.io/woshilyy/pen/oNvLpeEHTML代码如下：头部与头上两撮毛毛代码如下：眼睛"}, {"id": "6951731808392183839", "title": "CSS基础知识", "desc": "一个人至少拥有一个梦想,有一个理由去坚强。1、引入CSS样式表（书写位置）1.1 行内式（内联样式）其基本语法格式如下：如下👇所示：注意：style其实就是标签的属性样式属性和值中间是:多组属性值之间"}, {"id": "6983720558441529374", "title": "可拖动的窗口盒子", "desc": "一个类似窗口的效果，通过盒子头部拖动盒子，点击关闭按钮，可以清除掉盒子（因为清除掉盒子，省去了盒子复位的麻烦）"}, {"id": "6944990442345725982", "title": "手把手教你用纯css3实现轮播图效果", "desc": "css3动画效果的强大不言而喻，自它出现一直热度不减，它与js动画的优劣也一直成为前端界争论的话题，不可置疑的是css3动画的出现在一定程度上降低了动画效果的实现难度，利于前端的学习，其精简的代码量把我们从烦人的js调试中解放出来，当然css的动画效果有其局限性，我们不能只用c…"}, {"id": "6844903943084998664", "title": "部份css样式详解(附实际应用)", "desc": "博客开通之后，很多人最先做的事情一定是改页面的背景，换成一张图片或者换上一个自己喜欢的颜色，这时候用到的就是background属性。 我们经常能看到类似background: #fff;这种使用方式，如果背景是张图片，那可能会看到background: url('xxx.jp…"}, {"id": "6974977795080339492", "title": "【CSS】三栏布局", "desc": "运用CSS实现三栏，甚至多栏布局的小结，失责抛转引玉，吸引感兴趣的同学一起交流讨论学习 有错误还望同学能指出，提前感谢"}, {"id": "6951664889240748062", "title": "CSS系列 -- grid布局", "desc": "grid布局被称为弹性布局，是CSS3中新增内容创建grid盒子grid-template-columns 属性，grid-template-rows 属性grid-template-columns属"}, {"id": "6844903517313318920", "title": "聊聊flexbox", "desc": "和一步聊聊布局神器flexbox。 本文涉及内容如下： flexbox的基本概念、容器属性学习、项目属性学习、实战演练。 flexbox 堪称布局神器，但属性实在太多让人无从下手，因此将自己所学的知识做个总结。 flexbox是Flexible Box的缩写，译为弹性布局。fl…"}, {"id": "6924527888263806983", "title": "关于CSS变量你需要知道的一切", "desc": "这是我新书的第一章（PDF和Mobi格式都有）。 多数编程语言都支持变量。但是CSS从最初就一直缺少对原生变量的功能支持。 你写CSS吧？那你就没办法用变量。不过，你还可以用Sass这样的预编译器。 Sass这样的预编译器就把变量作为一个巨大的卖点，一个尝试新东西的原因。你知道…"}, {"id": "6974759268373233694", "title": "关于 网格布局 笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6844903509557526542", "title": "使用 CSS Houdini 绘制平滑圆角", "desc": "最近，我在推特分享了一篇关于人机交互界面的视错觉的文章。我向来喜欢视错觉，但这篇文章传达了一个新观点：与几何上的正圆比起来，一个微调过的圆形有可能给人以更加圆的感觉，而这一点对于圆角矩形同样适用。同时，我也惊奇地发现苹果从 iOS 7 开始就对系统图标做了同样的调整。在数学上，…"}, {"id": "6844903725337690119", "title": "HTML编写规范", "desc": "元素ID必须保证页面唯一同一个页面中，不同的元素包含相同的 id，不符合 id 的属性含义。并且使用 document.getElementById 时可能导致难以追查的问题。 除HTML5 中规定允许省略的闭合标签外，其他不允许省略闭合标签。（对代码体积要求非常严苛的场景，可…"}, {"id": "6844903704047386632", "title": "canvas环形倒计时", "desc": "1. html代码 2. 引入process.js文件 3. 初始化参数 canvas本身没有任何的绘图能力，所有的绘图工作都是通过js来实现的。通常我们在js通过getElementById来获取要操作的canvas（这意味着得给canvas设个id）： 1.准备好画笔之后就…"}, {"id": "6844903826936332301", "title": "CSS 实现仿 Windows10 鼠标照亮边框效果", "desc": "安装最新 Windows 10 update 之后，注意到系统 UI 里有一个很棒的细节效果，在开始菜单的磁贴里或者 UWP 风格的设置界面中，元素的高亮边框是可以感知鼠标的，边框的高亮部分会跟随鼠标的移动而移动。顿时灵机一动，这个效果用 CSS 可否实现？ 拿桌面日历中的效果…"}, {"id": "6844903504012640264", "title": "[译]HTML&CSS Lesson5: 定位", "desc": "CSS最大的用处之一就是可以将内容和元素定位到任何我们想要的位置，使我们的设计具有结构，使内容更加易懂。 CSS有好几种不同的定位属性，每种都有自己的使用场景。在这节课中我们会通过不同的案例——可复用的布局和针对单元素的布局——来介绍每种方法。 定位的其中一种方法就是使用flo…"}, {"id": "6844903674028752910", "title": "网站性能优化实战（二）", "desc": "本文是对前文：http://imweb.io/topic/5b6fd3c13cb5a02f33c013bd 相关知识的补充，文中的“前文”一词同此。 特以此文向《WebKit技术内幕》作者朱永盛前辈致敬。 自上次发布了《网站性能优化实战——从12.67s到1.06s的故事》一文…"}, {"id": "6844904143966978056", "title": "面试官：你可以用纯 CSS 判断鼠标进入的方向吗？", "desc": "在之前某一个前端技术群里，有一个群友说他面试的时候遇到了一个问题，就是面试官让他用纯 CSS 来实现一个根据鼠标移动位置觉得物体移动方向的 DEMO。 ~~净会问这种不实用又跟业务没啥关系的问题，气抖冷，中国前端什么时候才能真正的站起来。~~ 谢谢面试官提出的好问题，我会努力实…"}, {"id": "6987973574694797319", "title": "sass最简教程，从入门到上手", "desc": "以上就是sass的logo, 开始之前你首先得具备html和css的基本知识！ 什么是sass？ Sass 是一个 CSS 预处理器。 Sass 是 CSS 扩展语言，可以帮助我们减少 CSS 重复的"}, {"id": "6997575885096222727", "title": "第7章 CSS3布局与动画", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 带着问题去看书学习啦~ HTML5＋CSS3＋JavaScript Web 前端开发案例教程（慕课版），微信读书中找到的学习Web前端书籍"}, {"id": "6854573212337078285", "title": "一文梳理CSS必会知识点", "desc": "一般情况下，页面加载时自上而下的。将style标签至于body之前，为的是先加载样式。 若是写在body标签之后，由于浏览器以逐行方式对html文档进行解析，当解析到写在写在文档尾部的样式表时，会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后会重新渲染，在windows…"}, {"id": "6844903503026995214", "title": "反击爬虫，前端工程师的脑洞可以有多大？", "desc": "对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。 而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是爬虫与反爬虫这一话题的由来。 但是世…"}, {"id": "6996213733257117703", "title": "面向未来CSS", "desc": "CSS 新特性实验笔记。这些属性可能比较新，也可能早就进入了标准，但大都没有在所有的浏览器都得到支持。"}, {"id": "6844903930216841223", "title": "H5 页面适配iPhone 刘海，就是那么简单", "desc": "iPhoneX 取消了物理按键，改成底部小黑条，这一改动导致网页出现了比较尴尬的屏幕适配问题。对于网页而言，顶部（刘海部位）的适配问题浏览器已经做了处理，所以我们只需要关注底部与小黑条的适配问题即可（即常见的吸底导航、返回顶部等各种相对底部 fixed 定位的元素）。 大家都知…"}, {"id": "6931236076929744904", "title": "良心巨制！看完这篇关于Flex布局你应该不会有什么疑问了", "desc": "此篇教程是关于Flex布局的完整系统教程，对于已经非常熟悉Flex布局的读者，推荐直接跳到`flex-grow`和`flex-shrink`属性部分，相信你会了解到你之前没有关注到的点。"}, {"id": "6967697242115276813", "title": "CSS Containment优化复杂页面", "desc": "前言 在一个页面中, 如果页面中某个元素的几何属性变了, 就会导致页面的重排重绘。如果一个页面元素或者结构十分简单的时候, 那么我们几乎可以不考虑由于重排重绘所消耗的时间。但是在一个复杂的页面中, 我"}, {"id": "6844903613320396808", "title": "愈发熟练的 CSS 技巧", "desc": "rem+simple-flexible适配方案简单解析rem相对于根元素<html>的font-size的大小来计算坐作为一个单位；simple-flexible是根据手淘团队lib-flexible"}, {"id": "6968750919366213646", "title": "11种居中对齐这件事", "desc": "居中对齐作为一种极其常见的需求，似乎从理论上来说他是如此简单又理所当然，但是在实际开发中初学者总是会遇到这样或那样的问题，而今天我们将聊聊十一种我喜欢的居中对齐方式，希望大家有所收获。"}, {"id": "6984642364778233886", "title": "「HTML+CSS」--自定义加载动画【037】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 边框大小及形状：4px solid 边框颜色：上/下边框为白色，左/右边框为透明 效果"}, {"id": "6893875394584248334", "title": "双11小黑盒很炫酷？咱们用CSS变量来改进一下！", "desc": "对比一下发现哪里不同了么，普通版的是一开始完全透明，随着窗口的滚动而慢慢显示出来，靠的是控制opacity透明度属性来实现的。 而小黑盒那版是一开始就有一个渐变色，渐变到接近半透明，这种方式看起来更加的优雅，但看起来只是一开始进入页面还没滚动的时候带着很漂亮的渐变色，一滚动的时…"}, {"id": "6994977139116212232", "title": "CSS书写顺序优化及原理", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 相信很多刚入门前端的小伙伴 甚至 一些在前端行业摸爬滚打多年的程序员都没有意识到：原来CSS样式书写顺序也是有讲究的。 就像我刚开始学习前"}, {"id": "7000192329327837198", "title": "摸鱼不如来了解一下--CSS3选择器｜8月更文挑战", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战” CSS3 新增选择器 类选择器、属性选择器、伪类选择器，权重都为10 (E[att]{ } 权重为1(E)+10=11 ；E:first"}, {"id": "6844903652851712014", "title": "不定期更新的CSS奇淫技巧（二）", "desc": "内部的Box会在垂直方向，从顶部开始一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加 box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC的区域不会与float box叠加。 B…"}, {"id": "6990607261848731678", "title": "前端基础小白都会的H5拖放效果", "desc": "先上效果图： HTML代码： CSS代码： JavaScript代码： JavaScript代码解析： 1.当鼠标拖动元素时，触发 ondragstart() 事件，获取要拖动元素的ID； 2.当鼠标"}, {"id": "6996971685517721608", "title": "tailwind使用指南——配置", "desc": "通过tailwind.config.js可以进行自定义配置，另外也可以在css中利用相关的指令进行更便捷的配置"}, {"id": "6844903553127940110", "title": "webpack增量打包多页应用", "desc": "技术：好的，这就改。 这种方案，很快就被自我否定了。 这种方案，也思索了很久，后来也被否定了。 经过前面两个问题后，我发现思考的方向完全是错误的，总是妄想改变webpack的打包方式，简直就是跟它的理念对着干。 可以看到这一次生成的hash是4897.... 但是输出的每个文件…"}, {"id": "6989114048948207653", "title": "Vue之固定底部组件", "desc": "【实现效果】 【实现方式】 【增加需求】增加一个A逻辑，当满足A逻辑的时候，底部按钮就不展示，其他情况则展示。 新增一个Bool值（isShow）来判断是否显示底部按钮，具体代码如下："}, {"id": "6909287895660494856", "title": "Pure CSS教你画图", "desc": "其实画三角形就是利用了border的形状，在.square中把盒子的宽度和高度设置为0，只给border设置宽度，就可以得到被对角线划分为四个三角形的正方形。通过给其余的三角形对应的border加上transparent属性就可以得到我们想要的三角形，两种写法都可，第一种代码更…"}, {"id": "6844903543090970631", "title": "Angular 4.0 内置指令全攻略", "desc": "在这篇文章中，我们将分别列举每一个内置指令的用法，并提供一个例子作为演示。尽量用最少最简单的描述，让你在更快更准确地学会每一种内置指令的基本用法。 他的语法是 *ngFor=\"let username of userInfo\"，其中 userInfo 是从中取值的数组，user…"}, {"id": "6844903818073735175", "title": "CSS 布局与“仓库管理”的关系", "desc": "当下已经有很多工具或者是软件，在努力实现从设计稿到原型稿的转换。但是还没有哪一家可以挺起胸膛说，我们可以 100% 的实现这个需求。 在我看来，是因为它们之间的物理逻辑不一样。 简单的说，要实现从设计稿到原型稿到转换，其实是要达到突破二者之间物理次元的高度。 首先因为我们都太习…"}, {"id": "6844903602318737415", "title": "[译] JavaScript 是如何运作的：用 MutationObserver 追踪 DOM 的变化", "desc": "本系列专门研究 JavaScript 及其构建组件，这是第 10 期。在识别和描述核心元素的过程中，我们也分享了一些构建 SessionStack 的重要法则，SessionStack 是一个 JavaScript 应用，为了帮助用户实时查看和再现他们的 web 应用程序缺陷，…"}, {"id": "6919664610429632525", "title": "编写小而美函数的艺术", "desc": "随着软件应用的复杂度不断上升，为了确保应用稳定且易拓展，代码质量就变的越来越重要。 不幸的是，包括我在内的几乎每个开发者在职业生涯中都会面对质量很差的代码。这些代码通常有以下特征: 这些话听起来非常常见：“我不明白这部分代码怎么工作的”，“这代码太烂了”，“这代码太难改了”等等…"}, {"id": "6919483430744883207", "title": "CSS：定位", "desc": "布局是屏幕平面上的，定位是垂直于屏幕的。 背景的范围是从border外边沿围成的区域。 一个 div 的分层 浮动元素脱离文档流，其实就是浮起来一点点。 浮动元素的文字内容永远在内联子元素文字内容之下"}, {"id": "6844904131795091463", "title": "我不知道的CSS盒子", "desc": "很久之前学习css的时候，我只看到盒模型四大家族——content,padding,border,margin，以及他们分别代表什么，气什么作用，不同浏览器上对于width属性的计算方式不一样。 当然理解盒模型的四大家族也很重要，但是有些细节的地方被我忽略到了，所以想在这里再梳…"}, {"id": "6844903887061647368", "title": "关于移动端开发1px线的一些理解和解决办法", "desc": "作者|李兴瑞1px线变粗的原因在做移动端项目时，常常是根据设计图设置元素节点的大小和样式，但是有时候根据设计图写出来的样式还是不如人意，虽然表面上看起来和设计稿是一样的，可是就是没设计稿那种感觉，而且"}, {"id": "6844903574955098120", "title": "React框架实现移动页面翻译是一种什么体验？", "desc": "我要渲染的内容是一段段的html，用react渲染一段html内容是没有什么难度，使用dangerouslySetInnerHTML 即可。但是可以做到将内容中的英文单词翻译出来，是怎么实现的呢？一起来看一下吧。 事情是这样的... 仔细看，这个属性用的是{{ }}2个括号而不…"}, {"id": "6939427195051835405", "title": "CSS 层叠性和继承性", "desc": "一个HTML标签可以由多个CSS选择器来共同设置样式，那如果设置的样式有冲突，哪个选择器说了算？这就是层叠性要研究的。 换句话说：爸爸比爷爷的权重大，爷爷比太爷爷权重大。。。"}, {"id": "6844903575445831693", "title": "第4届CSS大会3月31日相约厦门，与行业CSS专家面对面", "desc": "由W3C中国联合w3ctech、前端圈共同举办的中国第四届CSS大会将于2018年3月31日与你相约厦门，一起享受CSS盛宴。"}, {"id": "6900122737847566349", "title": "5个可以尝试的 CSS 新特性【译】", "desc": "通常 CSS3 的新特性在经过长时间的讨论之后，才会被加入到 W3C 规范当中，之后各浏览器才开始逐渐去进行支持。有很多新的 CSS 特性值得我们讨论，但是本文我们会聚焦5个新特性，这些特性已经至少有一个浏览器开始支持了: 浏览器对这些新特性的支持总是在变化，所以可以随时在类似…"}, {"id": "6918706216977989640", "title": "用CSS实现上下颠倒的图案 [动画演示] [#4持续更新中.....]", "desc": "本文是CSSBattle #4 Ups n Downs， 实现以下上下颠倒的图案。 CSSBattle 是一个使用 HTML 和 CSS 实现目标图案，并进行实时预览和对比的网站。具有很强的趣味性和游戏性。 1. 使用 flex， 把三个正方形居中排列 2. 使用 border…"}, {"id": "6918692053291876360", "title": "用CSS实现按钮图案 [动画演示] [#3持续更新中.....]", "desc": "本文是CSSBattle #3 Push Button，实现按钮图案。 CSSBattle 是一个使用 HTML 和 CSS 来实现目标图案，并实时预览和对比符合程度的网站。具有很高的趣味性和游戏性。 1. 使用 display:flex，把一个 300 X 150 的长方形居…"}, {"id": "6844903795382566920", "title": "[译] 浏览器中 CSS 支持指南", "desc": "摘要：当你想要使用某个特性，发现它不受支持或在不同的浏览器中的行为不同时，这可能会令人沮丧。在本文中，Rachel Andrew 详细介绍了不同类型的浏览器支持问题，并展示了 CSS 是如何发展的，以便更容易地处理这些问题。 我们将永远不会生活在一个每个浏览我们网站的人都拥有相…"}, {"id": "6909333893439193101", "title": "CSS字体样式的使用", "desc": "定义字体的各个属性，可以让页面板式变得更好看。 字体样式包括字体类型、大小、颜色基本效果，另外还包括一些特殊的样式，如字体粗细、下划线、斜体、大小写样式等。 font-family 属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等。 name：表示字体名称，可以使用多…"}, {"id": "6844903588754358286", "title": "和 Houdini, CSS Paint API 打个招呼吧", "desc": "浏览器发展至今，已经很久没有感受过这种期待了。Hodini的出现将赋予开发者前所未有的控制页面视觉表现的能力。这个项目的第一步是实现CSSPaintAPI。本篇将解释为什么Houdini的到来让人如此"}, {"id": "6973652245153841189", "title": "float的魔鬼属性与清除浮动", "desc": "浮动是一个奇怪的属性，为我们的网页布局提供了新的方法，也产生了一些问题，让我们从应用和原理的角度去理解他 什么是浮动 浮动缺陷的历史渊源 float有个著名的表现是高度塌陷，这种会影响正常布局"}, {"id": "6908914295011508237", "title": "CSS 知识总结", "desc": "重新绘制. ==颜色和阴影等== 用setTimeout, 在浏览器渲染完成后加入, 重新渲染. 这样做的好处: ==总共浏览器经过2次渲染==. 我们能在第二次渲染看到位移的变化 如果直接将transform: translateX(300px); 加入demo的样式. 那么…"}, {"id": "6844904020117553165", "title": "也许你并不知道 flex-shrink 的计算机制", "desc": "Flexbox 布局现在已经广泛使用了，我也经常使用。 不过到今天我才知道，原来自己一直以来都有这样一个误区：认为 flex-shrink 的计算机制跟 flex-grow 一样。但其实并不是的。 我们先来看看 flex-grow 的计算机制。 容器宽度 700px，每个子元素…"}, {"id": "6870293447300317192", "title": "字体构造与文字垂直居中方案探索", "desc": "1. 引子 2. 常见的垂直居中的方法 下图是一个使用各种常见的垂直居中的方法来居中文字的示例，其中涉及到不同字体的混排，可以看出，虽然这里面用了几种常用的垂直居中的方法，但是在实际的观感上这些文字都没有恰好垂直居中，有些文字看起来比较居中，而有些文字则偏移得很厉害。 我们用鼠…"}, {"id": "6844903687597342728", "title": "[探索] 在开发中尽量提高代码的复用性", "desc": "相信很多人和我一样，在开发项目的时候，因为项目赶，或者一时没想到等原因。频繁使用 ctrl+c 和 ctrl+v ，导致代码很多都是重复的。这几天，也看了自己以前写的代码，简单的探索了一下，挑选几个实例，分享下如何在特定场景下，保证代码质量前提下，提高代码复用性。 在做项目的时…"}, {"id": "6844903809743847432", "title": "CSS 滚屏效果，要比想象中的难", "desc": "比如下图中，有的列表项的文字短，有的文字长。 需求是：希望文字长的部分能通过动画滚动显示。 我的第一反应是用纯 CSS 做不了。 其中涉及了一些有趣 CSS 知识点，在这里分享一下。 1. 如何让文字溢出容器？ work-break 属性是用来处理文字如何换行的，这里使用了不太…"}, {"id": "6999652606129733662", "title": "CSS对文本处理的那些操作操作", "desc": "这是【从头学前端】系列文章的第二十一篇-《CSS对文本的处理》 本篇文章我们将来学习CSS中对文本的处理，通过本篇文章的学习可以掌握的内容如下图所示："}, {"id": "6925734845062578184", "title": "使用 Tailwind CSS 可能会遇到的问题及新方案", "desc": "其实，大家若有实际工程经验，就非常赞同该文章中的观点。 使用了 Tailwind CSS，我们可以非常快速的编写 UI，并且非常简单的编写伪类和媒体查询，代码量是手写 CSS 的 1/5 至 1/10，可以说是非常好的提效。 缺点2，无法确保生产环境和开发环境100%保持一致。…"}, {"id": "6991643849961504798", "title": "实用的10个CSS新功能 | 8月更文挑战", "desc": "随着前端技术的更迭，CSS已经超越了背景颜色、边框、文本样式、边距和盒模型。现代CSS能够提供一系列的功能，而在过去，您需要JavaScript或变通方法来实现这些功能，但是现在css的一些属性逐渐j"}, {"id": "6844903608199151630", "title": "你对CSS权重真的足够了解吗？", "desc": "css权重很多人都听过，也了解一些，但是很多人对具体的规则或者说再深如一些关于css权重的问题，可能会不那么清楚。日常开发中，或多或少都会遇到css规则不生效的问题，为了让我们能够减少调试css规则的时间，深刻理解css权重，就十分关键了。如果喜欢的话可以点波赞/关注，支持一下…"}, {"id": "6844903623583891469", "title": "再谈 load 与 DOMContentLoaded", "desc": "window 的 onload 事件对于前端童鞋来说肯定是熟的不能再熟了，相信大家在刚入门时，见的最多的可能就是 load 事件了。load 事件接触多了，大家就会接触到它的闺蜜 DOMContentLoaded 事件，网上有很多介绍这两个事件的文章，对它们的解释无外乎以下两种…"}, {"id": "7002208534884515870", "title": "CSS基础", "desc": "CSS（cascading style sheet层叠样式表） (一)引入CSS 1.行间样式 2.页面级CSS 3.外部CSS文件 面试能力 表达能力：学习——表达：过场 （演练很多次） 多说多练（"}, {"id": "6844903700943601671", "title": "webpack4.x最详细入门讲解", "desc": "本文主要从webpack4.x入手，会对平时常用的Webpack配置一一讲解，各个功能点都有对应的详细例子，所以本文也比较长，但如果你能动手跟着本文中的例子完整写一次，相信你会觉得Webpack也不过如此。 简单来说，它其实就是一个模块打包器。 如果像以前开发时一个html文件…"}, {"id": "7002615795096223780", "title": "CSS构建基础", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战  基础知识 外部样式表是指将CSS编写在扩展名为.css 的单独文件中，并从HTML<link> 元素引用它的情况 内部样式表是指不使用外"}, {"id": "6982010966720380935", "title": "css-语音的声波和水波效果", "desc": "最近在做语音识别，遇到两个css效果感觉以后会有用就记录一下。用到了vue的class和style动态绑定功能。"}, {"id": "6924826615729881101", "title": "CSS中，如何处理短内容和长内容？", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 当我们使用 CSS 构建布局时，考虑长短文本内容很重要，如果能清楚地知道当文本长度变化时需要怎么处理，可以避免很多不必要的问题。 在许多情况下，添加或删除一个单词…"}, {"id": "6986513470959124487", "title": "前端面试题目—css", "desc": "这是我在掘金写得第一篇文章，整理记录自己最近找工作中，面试官常问得最多的css方面的问题，后续还有其他系列，敬请期待哦。根据面试官的水平以及面试官擅长的技术点的不同，每场面试的侧重点会有很多不同"}, {"id": "6844903638746267656", "title": "如何更愉快地使用rem —— 别说你懂CSS相对单位", "desc": "前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以…"}, {"id": "6844903678797676552", "title": "30个极大提高开发效率的Visual Studio Code插件", "desc": "为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 我们的 VSC(VSCode)将会像一个长了五只可以发射激光的独角兽一样！接下来会介绍我每天使用的非常有用的插件。 如果你还是一个 VSC 的新手，那么点击左侧最下方的按钮来安装插件。 自动去查…"}, {"id": "6996949472919945223", "title": "一篇文章带你了解CSS 文本样式", "desc": "一、文本颜色Color 颜色属性被用来设置文字的颜色。 颜色是通过CSS最经常的指定： 十六进制值 - 如\"＃FF0000\"。 一个RGB值 - \"RGB（255,0,0）\"。 颜色的名称 - 如\"红"}, {"id": "6904091153310695438", "title": "CSS 字体：字体特性", "desc": "CSS Font Module Level 3（本文以下简称 “ML3”）新增了字体特性（Font Feature）属性，用于扩展font-variant，以支持丰富 OpenType 字体特性，如连字。 我们知道，字体文件中包含着从 Unicode 码点到字形的映射。在给简单…"}, {"id": "6844903633528553485", "title": "移动端300ms点击延迟和点击穿透", "desc": "故事：2007 年初。苹果公司在发布首款 iPhone 前夕，遇到一个问题：当时的网站都是为大屏幕设备所设计的。于是苹果的工程师们做了一些约定，应对 iPhone 这种小屏幕浏览桌面端站点的问题。 这当中最出名的，当属双击缩放(double tap to zoom)，这也是会有…"}, {"id": "7000553821319462949", "title": "【动画消消乐｜CSS】 单span标签实现自定义简易过渡动画 076", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签 设置为 相对定位 宽度、高度均为5px 背景色：白色 "}, {"id": "6844903497603760135", "title": "未来布局之星Grid", "desc": "Grid-layout不是为了取代flex-layout，它是flex的补充。grid擅长二维布局，flex擅长一维布局。他们需要各司其职。 千呼万唤始出来的grid-layout终于在2017年3月开始支持得到了部分浏览器的支持。 flex并不能满足我们对于页面整体布局的需求…"}, {"id": "6844903795231555591", "title": "CSS 怎样写一个动画（从基础动画到3d动画)", "desc": "以前看过许多教学视频，大部分讲师都是讲个大概，然后就开始无厘头的灌输知识了。直到我后来看到一位优秀讲师的视频，他的讲课模式是第一堂课展示成果。这样下来，当我看到最终效果，我就有心思去不断学习这个东西了。 1. 简单的渐变动画 2. 稍复杂的关键帧动画 3. 结合transfor…"}, {"id": "6875901124931977229", "title": "【非标题党】SVG 图标看我就够了", "desc": "在不考虑兼容性（IE8+）的情况下，SVG 应该是目前解决项目中图标问题的最佳方案，没有之一。 SVG 在变大变小的情况下不会出现失真（出现锯齿或者看到像素点），也可以像 GIF 一样可以动起来。你也不再会有只是因为同一个图标颜色不同，就需要切两张图的困扰。只要你愿意，你甚至可…"}, {"id": "6995793978629029918", "title": "【前端--CSS】知识点（十）—— 给男朋友总结的CSS知识点（四）", "desc": "今天梳理的的是css中比较复杂的一个知识点————css3的变形，回顾一下有利于我们对css动画的实现！"}, {"id": "6974550435872899103", "title": "网站专题开发常用动画⛑", "desc": "网站常用动画系列（一）💨 擦亮按钮 火焰燃烧 丝绸延展 字体变色 鼠标悬浮图片放大或缩小 按钮点击动效 欢迎关注作者，感谢支持❗☘"}, {"id": "6918971529124872205", "title": "CSS原子化-记第一次使用tailwindcss", "desc": "不同于大家常用的BEM这类规则，原子css就是拆分，所有 CSS 类都有一个唯一的 CSS 规则。例如如下 这样的写法当然没问题，但是当你越写越多的时候，你会发现你需要写很多遍flex,很多遍width。这时候你就会自己去拆分，如果你项目里能用sass，你可能会写很多@incl…"}, {"id": "6911142386362122247", "title": "CSS布局大全", "desc": "相比于上面的方法多了一些代码，理解麻烦，不推荐。 略微难理解，margin或padding的值要对应好；浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷。 这种布局常用推荐使用浮动去做，配合 overflow:hidden; 触发 BFC，非常好用，兼容性也 ok，但是设置…"}, {"id": "6992572232568406047", "title": "CSS台动画篇时间到 - animation", "desc": "顾名思义：**过度**的意思，只包含两个状态<u>初始状态</u>与<u>结束状态</u>，不存在中间状态，只能完成一个状态向另一个状态的改变，<u>触发过程中**只能执行一次**</u>"}, {"id": "6844903817960488973", "title": "大厂h5开源视频系列-网易云音乐年度总结", "desc": "他并没有多震撼多酷炫， 那些花里胡哨的都没有，能形容的只有两个词：用心 细腻。网易云真的很用心，只要在 app 内部搜索【年度总结】你依然能看到自己的年度总结，在看到那首深夜还在听的歌，听过最多的歌词等瞬间，你是否回想起那个你爱过的女孩，是否能激起心里的涟漪。 1. 第二屏 概…"}, {"id": "6959106904027037733", "title": "z-index踩坑及梳理", "desc": "z-index在实际使用中总会遇到一些奇奇怪怪的现象，本文对使用过程中遇到的坑进行一个简单的梳理，列出一些z-index上下文相关的知识点"}, {"id": "6844903807072075784", "title": "马蹄疾 | 2019年，是时候认真学一波 Grid 布局了", "desc": "上周，我写的 Flex专题 被阮一峰的「每周分享第 48 期」收录，然后 仓库 就登上了子类的 GitHub Trending (流量太可怕了😅)。 这一次是Flex专题的姊妹篇Grid专题。正巧昨天阮一峰也发布了 Grid 布局教程，大家可以切换着看呐 (我觉得我的写得更好…"}, {"id": "6997270273317666824", "title": "基础知识常备3：css中定位的常见特性", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 已经更文3天 (基础知识常被3：css中定位的常见特性) 最近很多需求都是关于定位的，那么我想有必要在这里把定位跟大家分享一下！ 1.相对定"}, {"id": "6943774663524745247", "title": "如何优雅地修改antd组件内部样式", "desc": "在前端领域，antd无疑是react生态下使用最为广泛的UI类库，antd对常见的表单类输入组件进行了高度封装，带来开箱即用的便利性，但是与此同时，对其样式的控制也愈发困难。大家应该都有过被产品或者交互逼着修改antd样式的经历。次数多了，很难再通过\"这是开源的控件，样式不好修…"}, {"id": "6844903635474710541", "title": "[翻译]阮一峰webpack教程（Demo集合）", "desc": "Webpack用于构建Javascript模块脚本来给浏览器使用的前端工具。 Webpack允许多个入口文件存在，在多页面的app中很有用，每个页面有不同的入口文件。 加载器(Loaders)是一些预处理器，用于在Webpack的构建过程前，将你app里的一些资源文件进行转换。…"}, {"id": "6994046975851102239", "title": "css module 解决css命名冲突原理", "desc": "css module 思路 css module 遵循以下思路解决类名冲突问题： css的类名冲突往往发生在大型项目中 大型项目往往会使用构建工具（webpack等）搭建工程 构建工具允许将css样式"}, {"id": "6972147385451413540", "title": "CSS | 4句CSS送你一个小月牙", "desc": "这是我参与更文挑战的第2天，活动详情查看 更文挑战 整理一些经常用到的css形状，本篇主要是效果与代码，方便直接取用，实现思路后面在单独开文；"}, {"id": "6910555811286614024", "title": "撸一个响应式的掘金导航栏", "desc": "我们使用 @media 通过定义不同尺寸下页面的不同布局，从而实现响应式的页面。 在屏幕尺寸小于 375px 的时候 wrap 显示红色；当屏幕尺寸大于 375px 的时候，屏幕显示蓝色；当屏幕尺寸大于 980px 的时候会变为绿色。 先说一下原理：当屏幕尺寸小于我们设定的尺寸…"}, {"id": "6844904154872332296", "title": "浅谈 tailwindcss 的原理", "desc": "如果打开 tailwindcss 的 github仓库，大概会一脸蒙，怎么 css 框架一堆 js ，而且 css 文件也是奇怪的atrule?可以说，tailwindcss对 postcss 的使用真的上了一个层次，之前我也没想到可以这么玩！通过 js 配置，postcss-…"}, {"id": "6844903504490790919", "title": "前端移动端适配总结", "desc": "meta标签到底做了什么事情做过移动端适配的小伙伴一定有遇到过这行代码：但是，很多小伙伴只是感性的认识：噢，我加了这行代码，然后页面的宽度就会跟我的设备宽度一致。然而，这种理解是很片面的。那么，这句话"}, {"id": "6922710931642253319", "title": "【css 系列】Grid 入门到精通完整指南", "desc": "无论作为一个合格的web/移动端开发者，或者一个UI/UX工程师，精通css中的Grid布局可以让你设计出各种各样的布局。 让我们先用一张图来看看它能做什么事情... 如果你觉得你可以轻松做到，那你可以看看哪里可以优化的更简洁一些。 CSS Grid布局可以说是CSS中最强大的…"}, {"id": "6844903965834870798", "title": "精读《用 css grid 重新思考布局》", "desc": "Flex 与 Grid 相比就像功能键盘和触摸屏。触摸屏的控制力相比功能键盘来说就像是降维打击，因为功能键盘只能上下左右控制（x、y 轴），而触摸屏打破了布局障碍，直接从（z 轴）触达，这样 无论 UI 内部布局再复杂，都可以通过 touch 直接定位。 Flex 是一维布局方…"}, {"id": "6992381801952100360", "title": "前端必知：6种CSS实现水平或垂直居中的技巧汇总 | 8月更文挑战", "desc": "css 水平居中对齐是我们前端工程师必备的技能之一，也是面试时经常会被问到的问题之一，掌握这个小技能让你的面试过程少些小坑，闲言少叙，上正文"}, {"id": "6998000368953065485", "title": "css 居中方法整理", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 水平 内联元素水平居中，利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。此方法对内联元素inline"}, {"id": "6988044544864419871", "title": "flutter: CSS规则映射flutter控件-position", "desc": "css庞大而复杂,灵活且繁难, 如何把css的规则映射成flutter的控件确实是个不小的挑战. css有如此多的规则和属性, 而且还有各种简写形式, 无论如何肯定无法实现css的全部效果"}, {"id": "6995066028908609567", "title": "CSS3媒体查询media_queries响应式布局入门指南知识点总结", "desc": "什么是媒体查询 我们知道，我们给网页HTML写样式用的主要是CSS（层叠样式表）语言的规则，比如：盒模型设置宽高背景色什么的。 目前我们使用的最新版本的层叠样式表主要是CSS第三版，也就是CSS3，C"}, {"id": "6844903782984187911", "title": "再次简单明了总结flex布局，一看就懂...", "desc": "备注：1、设置flex-wrap：wrap，不然默认nowrap按照比例排满一行。 有不足之处，请评论留言... 谢谢"}, {"id": "6844904017357717517", "title": "[译]Flexbox：使用 Auto Margin 对齐", "desc": "align-self 控制的是交叉轴上的 Flex 项目对齐。但问题来了，“在主轴上有没有类似的属性存在呢”，比如说“justify-self”🤔 好问题！不过答案是没有😅。但有一个已经存在的属性可以利用，那就是 auto margin ！我们可以用它控制指定元素在水平方向…"}, {"id": "6844903500963397640", "title": "CSS 写作建议和性能优化小结", "desc": "还有几天就到国庆中秋了，快要放假了，先祝大家节日快乐！之前写过js的写作建议和技巧，那么今天就来聊聊css吧！说到css，每一个网页都离不开css，但是对于css，很多开发者的想法就是，css只要能用来布局，把效果图排出来就可以了，其它的细节或者优化，不需要怎么考虑。但是我觉得…"}, {"id": "6966777837940375560", "title": "纯css实现展开和收起 ，纯css 多行显示和隐藏", "desc": "纯css实现展开和收起 在宽度和高度未知的情况下，不使用js，纯css实现多行展开和收起 vue组件和示例地址"}, {"id": "6844903576658001933", "title": "H5 分层屏幕适配", "desc": "屏幕适配应当指内容 适配区 和 屏幕区 间的适配关系。 单屏适配有 contain、cover 或 fill，多屏常见是 依宽 。 contain 和 cover 还需要 定位 来处理留白和超出的内容。 而同一个 H5 里不同内容往往用不同适配方式，即 分层。 对于屏幕适配这类…"}, {"id": "6844903700515799054", "title": "css3绘制百度度熊", "desc": "先来一张呆萌小度熊的成果照。 在绘制小度熊之前，首先要对小度熊布局上进行一个分解，便于我们组织代码结构。 从整体结构上主要分成耳朵，头部和身体。我们统一对将胳膊，肚子和腿都放到了身体的部分里。 结构调整好之后，我们先把背景容器的位置和大小设置一下。在开发的时候，可以先给背景设置…"}, {"id": "6937855892234698759", "title": "仅用CSS实现fullpage.js全屏滚动效果", "desc": "使用它就可以实现fullpage.js这种全屏滚动效果，其实，这种全屏滚动效果的理论非常简单，就是使用js监听界面滚动，当界面滚动到某个值时就让界面持续滚动到下一个屏幕，但是！要考虑到屏幕尺寸大小带来的兼容性问题就是一件非常麻烦的事情。 它们在浏览器上面存在兼容性问题。 CSS…"}, {"id": "6949119408967155725", "title": "H5动画实战", "desc": "动画效果一直是人机交互的一个非常重要的部分，动画效果的引入，会让交互变得更加友好，让用户获得更加愉悦的体验。而随着市场环境变化，手机性能越来越好，网速越来越快，以及用户视觉效果要求越来越高，作为一"}, {"id": "6844903593212903431", "title": "[译] 深入浅出 SVG", "desc": "SVG 是优秀且令人难以置信的强大图像格式。本教程通过简单地解释所有需要了解的知识，为您提供 SVG 的概述。 尽管在 21 世纪初被标准化了，SVG（Scalable Vector Graphics 的缩写）是近年来的一个热门话题。 SVG 已经被糟糕的浏览器支持（尤其是 I…"}, {"id": "6963455375873933320", "title": "CSS开发总结《设计模式》", "desc": "本文主要介绍在css中应用设计模式的思想，首先通过分析页面的结构去构想划分css功能模块和命名的思路，接着去分析和总结社区提出现有的设计模式思想，然后根据它们的思想去总结出使用css设计模式的必要性"}, {"id": "6844903519342821390", "title": "看完离编写高性能的JavaScript又近了一步", "desc": "JavaScript对未声明变量的处理方式：在全局对象上创建该变量的引用(即全局对象上的属性，不是变量，因为它能通过delete删除)。如果在浏览器中，全局对象就是window对象。 如果未声明的变量缓存大量的数据，会导致这些数据只有在窗口关闭或重新刷新页面时才能被释放。这样会…"}, {"id": "6994718555925119012", "title": "css 水平居中（8种方法）、垂直居中（8种方法）", "desc": "总结： flex 绝对定位 同时适用于水平居中和垂直居中。 一、水平居中 ( 八种方法 ) 1.1 行内元素 - 方法一 1.2 块级元素 1.2.1 一般情况 - 方法二 1.2.2 子元素含 fl"}, {"id": "6844903705712525319", "title": "你所知道或不知道的CSS content属性", "desc": "css博大精深，很多属性，往往都是看似熟悉，但是似乎又不能将其特性和用法完整地说出来。 如上所示，content 属性与 :before 及 :after 伪元素配合使用，并可以接受一个字符串作为值。 其中none、normal、inherit这三个和大多数属性类似，故不做介绍…"}, {"id": "6844903667418546190", "title": "Next.js 踩坑入门系列（二）— 添加Antd && CSS", "desc": "个人对于脚手架的UI有一种执念，如果搭建出来就是一个首页＋a标签跳转，实在不是我这个处女座的风格，因此第二步我就想引用UI框架 —— ant-design，相信很多使用react的开发者用的也都是这个UI框架吧。因为以前自己在配制的时候也经常采坑，所以还是在这里记录一下~ 既然…"}, {"id": "6935245880568053791", "title": "React css-in-js", "desc": "随着React、Vue等支持组件化的MVVM前端框架越来越流行，在js中直接编写css的技术方案也越来越被大家所接受。 css在设计之初对“组件化”的考虑是不完全的，css直接作用于全局，无法直接作用于某个组件内部的样式。 在我们的前端组件中有很多“组件样式随着数据变化”的场景…"}, {"id": "6854573211548549127", "title": "我们应该如何写好HTML&CSS", "desc": "可以看到，我在首页任意调换两个div,页面的布局也跟着调换过来而且没有乱,这就是一个良好的布局。你也可以在自己的项目这样试一试 重绘是指当 DOM 元素的属性发生变化 (如 color) 时, 浏览器会通知render 重新描绘相应的元素, 此过程称为重绘。 重排是指某些元素变…"}, {"id": "6844903809710309384", "title": "如何用自己喜欢的 CSS 风格重置网站的样式", "desc": "许多前端开发人员都在用 Normalize 为他们的网站设计样式。一些人喜欢在 Normalize.css 中添加一些自己偏好的样式，我也一样。 在本文中，我会与你分享我自己的 CSS reset 项目（除了 Normalize.css 之外我还使用它们）。 box-sizin…"}, {"id": "6899789721921126414", "title": "如何实现 div 水平+垂直+水平垂直居中？", "desc": "1. 子元素添加margin: 0 auto 属性 2. 父元素文本对齐方式为居中对齐；子元素设置为display: inline-block"}, {"id": "6971603811408281613", "title": "CSS3中的calc、constant、env函数，IOS适配以及小程序字体加粗", "desc": "这是我参与更文挑战的第 8 天，活动详情查看： 更文挑战 CSS3中的calc、constant、env函数，IOS适配以及小程序字体加粗 1. css3中的calc()函数 最近做项目，看到别人的c"}, {"id": "6979598148192698405", "title": "BFC 及其应用", "desc": "BFC 特性 BFC 在 Web 页面上是一个独立的容器，容器内外的元素互不影响 和标准文档流一样，BFC 内的两个相邻块级元素垂直方向的边距会发生重叠 BFC 不会与浮动元素的盒子重叠 BFC 在计"}, {"id": "6844903757122109448", "title": "【译】CSS遮罩实现过渡效果", "desc": "今天我们想向您展示如何使用CSS Masks创建一个有趣的过渡效果。 与剪切类似，遮罩是定义可见性和与元素复合的另一种方式。 在下面的教程中，我们将向您展示如何在简单轮播图中为过渡效果应用新属性。 我们将使用steps（）计时功能动画，并在图像上移动遮罩PNG以实现有趣的过渡效…"}, {"id": "6914563196057550861", "title": "如何快乐的写CSS？？", "desc": "1.俄罗斯套娃，这样可以解决全局污染问题，你只需要修改最上面的父级的名称就可以新一波的套娃了。但是这样写出来的代码容易被骂，代码冗余，可读性差 预处理器增强了 CSS 的语法。让标准 CSS 具备了以下的这些能力"}, {"id": "6971613036033343524", "title": "日常开发记录：电话号码滚动及iPhone X小黑条等", "desc": "近期开发中处理的小问题记录： 1. 随机电话号码 需求： 生成随机电话号码，并单行滚动展示（如下图）。 实现： 随机电话号码： 滚动效果： 2. C"}, {"id": "6844903813778767886", "title": "CSS 中的 Grid 布局 完全指南", "desc": "Grid 是一个基于二维网格布局的系统，有了它我们可以非常方便的实现过去很复杂布局，无需再使用float, inline-block, position 这些本质上是 hack 的方法。 CSS网格布局擅长于将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系…"}, {"id": "6952685594589790239", "title": "CSS3弹性盒子Flex布局", "desc": "布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。"}, {"id": "6994603942621478942", "title": "第 16 题：如何通过 CSS 绘制一个三角形？", "desc": "虽然网上有很多关于绘制三角形的代码，但是我相信还是有一部分人是不知道如何实现的。我下面举个栗子。 这种情况应该都能理解，不就是设置一个边框嘛 ``` width: 100px; height: "}, {"id": "6847902224237101069", "title": "FlavorCSS: 一种运行时编译原子样式的方案", "desc": "这多简洁，心里舒坦多了。 我们可以发现Atomic CSS的阅读体验还是不错的（50步笑100步），并且我们现在大概可以猜出上面大部分 class 的含义。 那么如果我们有一个非常好的规范，设计好的，有逻辑 Atomic CSS 风格的样式库，那我们可以非常高效的编写我们的界面…"}, {"id": "6904568682555375624", "title": "CSS 中你应该了解的 BFC", "desc": "我们常说的文档流其实分为定位流、浮动流和普通流三种。而普通流其实就是指BFC中的FC。FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有B…"}, {"id": "6946258353291001886", "title": "CSS Matrix 变换原理", "desc": "C 的行数等于 A 的行数，C 的列数等于 B 的列数，即 AC 同高，BC 同宽。 C(m,n) = A(m,1) x B(1,n) + A(m,2) x B(2,n) + ... 至此，我们发现右上角的 1 表示，在 x 变化时，y 的增量。这个量再加上 y 本身的量，就得…"}, {"id": "6985408446061346847", "title": "毛玻璃状效果登陆页面", "desc": "什么是毛玻璃效果？ 背景模糊的磨砂玻璃效果 空间物体漂浮多层次 鲜艳的色彩突出模糊的透明度 半透明物体上有一个细微的光线边界 整个页面使用了一个渐变的背景色(这里直接使用了图片)，重要的内容居中显示，"}, {"id": "6844903684833280014", "title": "搭建Typescript+React项目模板(2) --- 提升开发体验", "desc": "sass是一款css预处理语言，支持变量，嵌套，mixin和导入等功能，可以极大地方便和简化css写法。 css module是针对css类名作用域做出限定的一种规范，用以解决css类名冲突的问题，此外还能避免一些爬虫进行数据爬取(当然厉害的爬虫除外)，同等的还有BEM规范。 …"}, {"id": "6899280789851914253", "title": "在Vue中使用CSS3实现内容无缝滚动", "desc": "最近在做一个活动页面，遇到幸运用户中奖的滚动公告需求。下面是实现效果： Q2：设置动画。由于内容区实际有AB两份，B是A的副本，所以一段动画的终点就是内容区向左位移50%（内容区width的50%），这也就解释了Q1中为什么一定要设置宽度属性了：如果不设置，width的值不会随…"}, {"id": "6844903895135682574", "title": "svg或css，写loading圆环和百分比", "desc": "css的步骤很多，可以的话优先svg写圆环。 mdn上stroke-dasharray的理解，就是实线的长度 空白的长度 实线的长度 空白的长度 。。。 1. 写个圆。 so easy。设个宽高，设置radius，搞定。 2. 写个圆环。 有点难度。细细一想，加个border，…"}, {"id": "6844903726914732039", "title": "tbody 滚动条设置", "desc": "文章介绍了如何将滚动条设置在tbody标签上，并且表格整体和未设置滚动条一致；此外补充了一些table的冷门姿势。 要想给tbody一个超出的滚动条，其实只需要给tbody设置一个固定height，以及overflow:auto也就是超出添加滚动条。但是table固有的disp…"}, {"id": "6844903613018423303", "title": "一个由line-height引发的血案与思考", "desc": "找了一下原因，发现是由于UI设计稿中设计的文字大部分是font-size:24px;line-height:24px,代码实现时为了不至于每处都写一遍字体大小，故直接在根节点上统一设置字体与字体大小为24px，小部分不一致的地方再单独设置字体大小，从而忽略了设置line-hei…"}, {"id": "7000735634696437790", "title": "分享用css+jss做的时钟", "desc": "首先先用CSS画一个时钟，包括时针，分针，秒针。 css样式 接下来用js动态获取当前电脑的本地时间"}, {"id": "6993709181454778405", "title": "CSS回顾（二）", "desc": "CSS知识回顾（二） css动画，css3操作及进阶内容 css过渡实现动画 过渡transition:属性（all） 花费时间 运动曲线 何时开始。 搭配:hover使用。谁要发生动画效果就给谁加。"}, {"id": "6869375816162082823", "title": "Sass 可能会节约你 50%的 CSS 代码", "desc": "Sass 是一个 CSS 预处理器。Sass 是 CSS 扩展语言，可以帮助我们减少 CSS 重复的代码，节省开发时间。 之前 Sass 采用的是缩进的方法进行书写，大多数开发者并不习惯，所幸第三代 Sass 改变了写法，并且将后缀名由sass 更改为 scss。 当在 CSS…"}, {"id": "6844903774322950158", "title": "如何去除讨厌的Chrome自动填充黄色背景", "desc": "这个问题是老生常谈了, 但是之前一直没有找到一种很好的处理方式, 这次主要就是说明一下我见过的几种处理方式. 实际上黄色没有消除, 只是用其他颜色覆盖. 例如上面的代码中是用白色进行覆盖, 做不到半透明的效果."}, {"id": "6914306537951494151", "title": "css之隐藏滚动条", "desc": "隐藏滚动条的同时还需要支持滚动，我们经常在前端开发中遇到这种情况，最容易想到的是加一个iscroll插件，但其实现在CSS也可以实现这个功能，下面我们来看一下使用css隐藏滚动条的方法。 可以使用自定义滚动条的伪对象选择器::-webkit-scrollbar设置隐藏滚动条。 …"}, {"id": "6980323774595858468", "title": "CSS 字体属性", "desc": "css fonts(字体)属性用于定义字体系列，大小，粗细，和文字样式(如斜体) 字体系列 css 使用font-family属性定义文本的字体系列 各种字体之间必须使用英文状态下的逗号隔开 一般情况"}, {"id": "6844904112274800647", "title": "团队规范之样式规范实践", "desc": "我所处的团队最近正在不断壮大中，在维护项目增多，人员增加以及每个人的编程习惯不同的背景下，我开始思考团队编码规范统一的工作该如何开展。提及编码规范这个词，大部分的人都会联想到EsLint，它是一个JavaScript语言的检查工具。这证明对于JavaScript的编写规范上大家…"}, {"id": "6844903593137405959", "title": "妙用 scale 与 transfrom-origin，精准控制动画方向", "desc": "上次发完 不可思议的纯 CSS 导航栏下划线跟随效果 这篇文章之后，很多朋友找我讨论，感叹 CSS 的奇妙。 将下面这个动画的下划线效果，从左进入，右边离开修改为从上方进入，下方离开。 第一眼看到这个效果，我的内心毫无波澜。以为只是简单的一个下划线 hover 效果，经过友人提…"}, {"id": "6844903593800105992", "title": "CSS —— gradient渐变专题", "desc": "1. 默认第一个参数如果不写就是从上到下的 2. 如果有第一个参数(top/left/bottom/right) 3. 使用角度也可以angle(角度值deg)进行控制 1. 可以使用英文字母进行颜色控制 2. 可以使用16进制#RRGGBB进行颜色控制 3. 可以使用16进制…"}, {"id": "6844903939196846094", "title": "纯CSS使用vw和vh视口单位实现自适应", "desc": "编者注：在移动端中利用rem的相对于根HTML进行改变，通过一段时间JS实现了移动端自适应，本文则使用纯CSS视口单位来自行自适应，虽然现在的兼容性还没法完全能够接受，但不妨碍你认识这个vw和vh的强大。 响应式布局的实现依靠媒体查询（Media Queries）来实现，选取主…"}, {"id": "6844903891276922893", "title": "[Grid布局] - 快到格子里来", "desc": "CSS的网格布局模块提供了一个基于网格的布局系统，能够以行和列来进行布局，使其更容易设计网页，而不必使用浮标和定位。 display属性被设置为网格或内联网格。 为了使一个HTML元素表现为一个网格容器，你必须设置显示属性为网格或内联网格。网格容器组成的网格项目，网格项目又置于…"}, {"id": "6844903541887205389", "title": "CSS3的动画属性", "desc": "transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。 transition主要包含四个属性值：执行变换的属性：transition-property，变换延续的…"}, {"id": "6998408197174198303", "title": "CSS自用学习笔记（四）", "desc": "动画相关属性2 div大小 width height max-height 最大高 min-height 最小高 max-width 最大宽 min-width 最小宽 margin margin-l"}, {"id": "6981654673960435719", "title": "九宫格css的几种简单例子", "desc": "css九宫格.....................................................css九宫格"}, {"id": "6966923388455501831", "title": "Sass 基础", "desc": "Sass 简介 什么是 CSS 预处理器？ CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用"}, {"id": "6991702486230761502", "title": "【动画消消乐】HTML+CSS  自定义加载动画  051｜8月更文挑战", "desc": "前言 【动画消消乐】 平时学习生活比较枯燥，无意之间对一些网页、应用程序的过渡/加载动画产生了浓厚的兴趣，想知道具体是如何实现的？ 便在空闲的时候学习下如何使用css实现一些简单的动画效果，文章仅供作"}, {"id": "6844904087012507656", "title": "【小技巧】巧用CSS属性值正则匹配选择器", "desc": "这3种属性选择器是字符匹配，而非单词匹配。其中，尖角符号^、美元符号$以及星号*都是正则表达式中的特殊标识符，分别表示前匹配、后匹配和任意匹配。 利用这些选择器，纯CSS就可以做出很炫酷的功能。 利用[attr^=\"val\"]前匹配选择器可以判断<a>元素的链接地址类型，以用来…"}, {"id": "6844903686313869320", "title": "CSS魔法堂：display:none与visibility:hidden的恩怨情仇", "desc": "我们都清楚当元素设置display:none后，界面上将不会显示该元素，并且该元素不占布局空间，但我们仍然可以通过JavaScript操作该元素。但为什么会这样呢？ 这个涉及到浏览器的渲染原理：浏览器会解析HTML标签生成DOM Tree，解析CSS生成CSSOM，然后将DOM…"}, {"id": "6989170561280638989", "title": "CSS3属性概念 ", "desc": "如今很多新的 CSS3 属性出现可以建立丰富的布局，如创建圆角、渐变和阴影以及调整透明度等。( CSS3 属性概念基础个人学习笔记）"}, {"id": "6844903502691450888", "title": "CSS原理解析之模型篇", "desc": "盒模型是我们每天都在接触的，但盒子模型到底如何计算排列的，总是一知半解。本文尝试从W3C规范和实例入手，解决上述问题。 每个盒子会变成他后代盒子的包含块，后代盒子的大小和位置会根据他包含块的矩形边框进行计算。但是不会受到包含块的限制，可能会溢出。 1. 最基本的例子 2. 当e…"}, {"id": "6844904202922098701", "title": "css3 javascript 单行和多行文本溢出截断多种方案", "desc": "在我们日常开发中的时候经常会遇到一种业务场景，需要截断一些文字的显示。可能是一行或者两行，或者根据字数限制或者用户的显示屏幕大小来展示对应的文字。 响应式截断，当文本溢出的时候才显示省略号。 用伪元素模拟省略号，兼容性较好，但是展示有部分问题，可能需要结合部分 javascri…"}, {"id": "6844903603136806919", "title": "提高你的开发效率啊，切图仔", "desc": "工作到今天正好一年，待过两家公司，做过面向用户的前端，也做过管理系统的前端，现在主要的还是移动端的活动页。每天都在写业务相关的代码，怕久而久之…"}, {"id": "6844903634841370632", "title": "「CSS思维」组件化VS原子化", "desc": "因为技术站的更新，我们公司 M 站的项目，开始往 React 迁移。然后在对于 React 中 CSS 的使用方式上，我和一个同事有了很大的分歧。 我是一个非常推崇原子化使用 CSS 的人。我喜欢使用类似： 这样的方式去使用 CSS 样式。和我角度不一样的同事可能会更倾向于组件…"}, {"id": "6953999190791815198", "title": "前端工程师进阶要点二——更多的使用CSS｜小册免费学", "desc": "CSS负责定义元素如何展现，页面上所有元素的样式不管是依赖业务需求还是静态的，都要尽可能的交由CSS来完成。此外CSS自定义属性、Scss等也可以帮助更好的实现css效果"}, {"id": "6961458258456346632", "title": "十.CSS—网页布局（标准流、浮动流）", "desc": "本文介绍了CSS标准流的一些规则；并且深入浅出的介绍了浮动流相关的知识，并结合CSS权威指南，做了详尽的描述。"}, {"id": "6844903596992135182", "title": "webpack 换肤功能多主题/配色样式打包解决方案", "desc": "本文主要详细介绍了，如何使用 webpack打包多套不同主题的解决方案以及实践中所遇到的问题。"}, {"id": "6844903623399309326", "title": "让你的代码更Prettier！代码风格统一终极方案！", "desc": "很多团队还在为代码风格头疼。大到采用哪套代码风格方案，小到tab和space之争，都是团队开发面临的选择。之前解决这种代码统一问题的方案是：EditorConfig，或者ESLint。 这篇文章介绍Prettier。写这篇文章前我搜了一下知乎，发现竟然还没有人普及Prettie…"}, {"id": "6917985820787867662", "title": "七日打卡-如何用绝对定位(position:absolute)完美定位布局及其注意事项", "desc": "此片博文主要讲解如何应用绝对定位实现完美布局，及应用注意事项。 在布局的过程中我们经常用到绝对定位，很多初学者在一开始用绝对定位经常会达不到预期的效果，因为它们往往会忽略使用绝对定位的两个条件。 当然要啦！代码又没有脑子，没法自己思考应该定位到哪里。为了使用的时候方便，使用绝对…"}, {"id": "6972916275874332685", "title": "「HTML+CSS」--自定义加载动画【023】", "desc": "这是我参与更文挑战的第1天，活动详情查看： 更文挑战 前言 效果展示 思路 Demo代码 HTML CSS 原理详解 步骤1 设置span标签 宽度、高度均为96px 效果图如下 span此时是没有显"}, {"id": "6844903809064386567", "title": "CSS 绘制各种形状", "desc": "使用 CSS 可以绘制出许多形状，比如三角形、梯形、圆形、椭圆，等 并不只是可以绘制矩形。下面来看看怎么实现这些形状的吧。 为了容易理解，文章分为基本形状 和 组合形状来说，基本形状是比较容易实现的，而利用这些基本形状进行组合，就可以实现稍微复杂点的组合形状了。 心形是由两个圆…"}, {"id": "6844904067873914894", "title": "🔥 常见的CSS文字居中显示", "desc": "本文首发于公众号：小夭同学，同步更新个人博客：故事胶片，转载请署名。代码不断更新中！！Demo预览在这儿！！！！代码预览Demo1、利用line-height和vertical-alignhtmlcs"}, {"id": "6958857811795279880", "title": "07.CSS盒子的相关属性", "desc": "一.outline属性 outline表示元素的外轮廓 不占用空间 默认显示在border的外面 outline相关属性有 outline-width outline-style：取值跟border的"}, {"id": "6969873114394001438", "title": "BFC (Block Formatting Contexts) 块格式化上下文", "desc": "BFC (Block Formatting Contexts) 块格式化上下文，是页面上的一个独立渲染的区域，该区域会包含器内部的所有元素，并且区域内元素的渲染不会影响到区域外的元素"}, {"id": "6912656994667069454", "title": "移动端开发套路总结", "desc": "本文只讲最基础的套路(适配问题)，其他特殊问题特殊解决。 对于新项目开发，上文说的方式其实已经算最优解了。至于之前主流的方案lib-flexible+postcss-pxtorem的方案比较麻烦，而且lib-flexible的作者都说放弃了，改用viewport来代替此方案（h…"}, {"id": "6844903550821072910", "title": "前端布局方式汇总及概念浅析", "desc": "1. 基础布局方式 2. 常见的布局概念以及实现方法 3. 响应式设计和自适应设计"}, {"id": "6942788958480760862", "title": "css - 选择器优先级", "desc": "从CSS选择器文章中我们知道，与多种不同的方法选择元素。所以当我们使用多种规则的时候，我们必须要明确其中的优先级。但是在CSS选择器的规则中，称之为特殊性，特殊性越高，自然优先级越高。 对于选择器中给定的元素选择器和伪元素，加0001. 当选择器出于同一种特殊性的时候，位于cs…"}, {"id": "6844903517971283982", "title": "如何用语文知识改善代码可读性", "desc": "我们经常能看到许多技术文章从工程角度介绍各种编码实践。不过在计算机科学之外，编程语言和自然语言之间同样有着千丝万缕的联系。下面我们会从高中水平的语文和英语出发，分析它们与代码可读性之间的关系。如果你看腻了各种花哨的技术新概念，或许回归基础的本文能给你一些启发🤔 代码很难正确预…"}, {"id": "6970670612196884517", "title": "CSS 盒子模型之边框（border）的注意点", "desc": "HTML 中如 <div></div> <span></span> <p></p> 等元素在网页上都是以一个方形盒子呈现，每个元素都叫做一个盒子，我们可以给这些盒子设置宽、高、内边距、外边距等参数来调"}, {"id": "6888471725080903687", "title": "使用原生 CSS 实现响应式字体", "desc": "有时需要根据屏幕宽度将字体大小比例进行适配操作。奇怪的是，我见过有人为了实现这个功能经历了重重困难。例如 Ahmed Sakr 在他的文章 Medium 中概述的 RFS 的使用，尽管他很好地概述了 RFS 如何工作的，但在 CSS3 计算和比较时代，RFS 本身却是过时的淘汰…"}, {"id": "6844903891184648205", "title": "利用css‘content实现指令式tooltip文字提示", "desc": "直接上图分析执行流程鼠标移入节点检测是该节点是否存在开启实现tooltip实现的标识（类名，属性等）检测主题、位置（类名，属性等）生成/显示气泡借鉴他人让我们先来看看element-ui的toolti"}, {"id": "6964376177863557128", "title": "【不一样的CSS】实现水平垂直布局的 7 种方式", "desc": "【不一样的CSS】实现水平垂直布局的 7 种方式 行内块级水平垂直居中方案 定位+定宽+定高实现水平垂直居中方案"}, {"id": "6961242631230177316", "title": "掌握这些CSS知识点，Coding如飞！", "desc": "整理了一些在CSS（层叠样式表）中的知识点，或许你曾看过一些什么“万字总结”、“面试必看”，但还是希望更多同学能沉下心来学习，不仅仅满足于停留在“API工程师”的层面"}, {"id": "6968753107819823117", "title": "CSS复合选择器", "desc": "为什么要学习css复合选择器 CSS选择器分为 基础选择器 和 复合选择器 ，但是基础选择器不能满足我们实际开发中，快速高效的选择标签。 目的是为了可以选择更准确更精细的目标元素标签。 复合选择器是由"}, {"id": "6988389914257653790", "title": "一些CSS知识点总结", "desc": "总结了一些面试常考的以及我个人常混淆的CSS知识点。不是完整的知识体系梳理，只是个人认为的高频知识点总结。"}, {"id": "6844903636888207373", "title": "5分钟学会Vue动画效果", "desc": "v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。 v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函…"}, {"id": "6844903984314974215", "title": "CSS 阴影动画优化技巧一则", "desc": "本文不是直译，因为觉得这个技巧很有意思很有用，遂起一文。 box-shadow 在我们的工作中使用以及越来越多，伴随阴影的动画或多或少都有一点。假设，我们有下面这样一个盒子： 希望 hover 的时候，盒阴影从 box-shadow: 0 2px 4px rgba(0, 0, …"}, {"id": "6992857130646634533", "title": "解决text-align-last ios端失效问题", "desc": "今天UI提了个要求将表单中的文字左右对齐，一开始想到了text-align:justify，但是放上去发现没有得到想要的对齐效果，于是去网上搜索了下，发现了text-align-last"}, {"id": "6986568345671696421", "title": "web动画", "desc": "一动画的分类   css动画， js动画， canvas动画 二Transition动画 1初识： transition是一个复合css属性。包括transition-property、transit"}, {"id": "6986199576780734500", "title": "css动画和js动画", "desc": "css动画：相当于补间动画，重视始末状态（适合简单动画） 优点： 性能好，浏览器会对动画进行优化，浏览器会通过合成线程把每一帧中所有的dom操作在一次回流或重绘中完成而不是占用主线程，对于隐藏的或不可"}, {"id": "6988130376996634637", "title": "CSS相关面试点-2021", "desc": "我看大家都在找工作，分享点相关知识，为大家省点时间。 flex布局介绍 Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 F"}, {"id": "6992592827976777735", "title": "CSS的奇思妙想（1） |  神奇的 div", "desc": "各种神奇的CSS，只有你想不到，没有做不到 [ 手动滑稽 ] ，来看看万能的 DIV 是如何实现一个神奇的输入框 这是我参与8月更文挑战的第1天"}, {"id": "6992505047829446670", "title": "牢记css基础，提高你的开发效率", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 在工作中，你有没有遇到过这样的问题，就是你明明没有添加什么属性，页面上却偏偏不一样，然后一层层的再找上去，发现，原来是有一个可继承的属性，导"}, {"id": "6985045603214426143", "title": "counter实现图片九宫格超出展示Demo", "desc": "css counter+定位低成本简单实现图片九宫格超出数量效果，在不学会就out了，确定不点进来康康吗？"}, {"id": "6985001275796488228", "title": "前端面试基础 CSS篇", "desc": "CSS 1.css选择器 菜鸟教程 阮一锋CSS选择器笔记 新增的css3选择器可以再看下，过一遍 优先级：!important > 内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类"}, {"id": "6844903573415804941", "title": "那些有趣的codepen项目", "desc": "codepen是一个在线的前端代码编辑运行的网站，支持前端现今的众多技术，比如babel，coffeescript， typescript， scss，less，stylus。可以用于在线展示demo或者代码。 codepen目前项目众多，其中也不乏很多优秀的作品，本期周刊将把…"}, {"id": "6966851861257125896", "title": "CSS 高级技巧汇总", "desc": "「列举一下效果」 设置input的placeholder的字体样式 单行和多行文本超出省略号 负边距使用技巧 定位同时设置方位情况 相邻兄弟选择器之常用场景 outline属性的妙用技巧 隐藏滚动条或"}, {"id": "6844903544726749198", "title": "什么是BFC?", "desc": "对于BFC的概念以及应用场景一直都不是很明白，今天着重去了解了一下，做了以下总结。 在解释 BFC 是什么之前，需要先介绍 Box、Formatting Context的概念。 Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素…"}, {"id": "6988480719207006245", "title": "「HTML+CSS」--自定义加载动画【045】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为48px 背景色：红色 效果图如下 步骤2 span标签圆角化 效果图如下 步骤3 为span"}, {"id": "6919082264005787655", "title": "《看完就懂系列》聊聊CSS3的 calc() 函数", "desc": "今天在less里面用到了CSS3的calc()函数，很久不用，先是把运算符前后的空格给漏掉了，还好我及时发现。然后编译结束的运行，UI竟然说界面展示不对，我仔细一瞅，好像真有些不对劲。 知道的还是太少啊，那就重新再看看calc()函数好了。看得多了以后遇到问题也不慌，即使没看出…"}, {"id": "6977183530623500295", "title": "【译】css timing-function", "desc": "CSS 中的 <timing-function> 是一个（数学）函数，它指定被动画化或从一个值转换到另一个值的物体随着时间的推移的速度。本文将系统学习它。"}, {"id": "6978647140910727176", "title": "2021年你可能不知道的 CSS 特性（下篇）", "desc": "在这个话题中主要整理了有关于 CSS 方面的特性，并且尽可能的整理了一些大家现在能用或过不了多久就能用的属性。另外，虽然标题是“新特性”，但其中有蛮多特性并不是“新”，可能已经出现在你的项目中"}, {"id": "7006234598464028686", "title": "你不知道的CSS----伪元素::marker", "desc": "::marker是什么 ::marker是css伪元素，可以用在li元素或设置了display:list-item的元素上，自定义项目符或者数字的样式。 ::marker允许的属性值 ::marker"}, {"id": "7006184119969251341", "title": "送个月亮给你 | CSS制作简单过渡页✨", "desc": "中秋 我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言   前一段时间刚好在b站上看到一个非常有创意的PPT，没错！就是PPT！   在PPT里展示的是一段过渡转场，视觉效果看起来还挺不错"}, {"id": "7005357707762860039", "title": "提高前端工作效率的利器，你学会了吗？", "desc": "一、概述 Grid 布局即网格布局，是一个二维的布局方式，由纵横相交的两组网格线形成的框架性布局结构，能够同时处理行与列 擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系 这"}, {"id": "7005001846964092936", "title": "面试官：画一个边框宽度为0.5px的正方形叭。", "desc": "我们知道在写移动端页面时，有个经典的1px问题。该问题的原因是：在pc端的设计稿拿到移动端会产生视觉上的放大，解决该问题的方案就是将1px缩小为0.5px。 解决方法 1.直接写0.5px，不兼容。 "}, {"id": "6999416290997698596", "title": "有趣的 CSS 数学函数", "desc": "大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。本文将帮助你通过一些小技巧，来创作出一些属于自己的 CSS 数学函数，从而实现一些有趣的动画效果。"}, {"id": "7005430941757734942", "title": "CSS中秋特别篇---使用CSS实现嫦娥奔月", "desc": "用CSS3实现嫦娥奔月难不难，几行代码可以搞定呢？探寻最简单的实现方案，几行代码实现花里胡哨的嫦娥奔月，让我们一探究竟吧。在这里也祝掘友们中秋节快乐，摸鱼事业蒸蒸日上，早日实现财富自由。"}, {"id": "7006130464620544030", "title": "用c++写一个的一个推箱子小游戏", "desc": "相信各位都肯定完整这种推箱子的小游戏。游戏玩法很简单，那就是一个人把所有的箱子推动到对应的位置那就可以赢了。那么我们接下来看看这个推箱子的游戏改怎么写。 首先先画出地图，这里面的#是墙壁，x是终点，o"}, {"id": "6932647134944886797", "title": "前端优秀实践不完全指南", "desc": "本文其实应该叫，Web 用户体验设计提升指南。 ... 所谓的用户体验设计，其实是一个比较虚的概念，是秉承着以用户为中心的思想的一种设计手段，以用户需求为目标而进行的设计。设计过程注重以用户为中心，用户体验的概念从开发的最早期就开始进入整个流程，并贯穿始终。 良好的用户体验设计…"}, {"id": "7006624020460208164", "title": "详解css中清除浮动的四种方式，float浮动怎么用更为合理", "desc": "css基础篇（第四篇） 回顾 在上一讲中我们基本上学习了 css 中经典的塌陷问题以及 margin 和 padding 具体指的是什么和怎么合理运用，除此之外，在上一讲的最后我们还了解了圆角边框和盒"}, {"id": "7006509258149724190", "title": "🌓🌛一张网页带你了解中秋节的前世今生", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 🌗序言 中秋节是中国的传统节日之一，是一个非常历史悠久的节日。同时，各地也有各地的习俗，祭月、赏月、观花灯、吃月饼等等。除此之外呢，各地还有民间"}, {"id": "6921886428158754829", "title": "中高级前端必须注意的40条移动端H5坑位指南 | 网易三年实践", "desc": "不知不觉在网易已有三年半，占了一半时间都在与移动端打交道，整个阶段都是遇坑填坑的学习过程。移动端开发在前端里像神一样地存在，不是说它多难而是说它坑位实在太多了，怎样填都填不完。Android和iOS各显神通，Android的系统版本和屏幕分辨率多得难以一招兼容，iOS的顽固标准…"}, {"id": "7007174168944836639", "title": "css动画知识总结", "desc": "浏览器渲染原理 浏览器渲染的过程： 根据HTML标记并构建DOM树 根据CSS构建CSS树（CSSOM） 将两棵树合并成一棵渲染树（render tree layout布局（文档流，盒模型，计算大小或"}, {"id": "6986873449721364510", "title": "8则未必知道且超级实用的纯CSS布局排版技巧 | 网易四年实践", "desc": "开发每一张网页都离不开布局排版，基于良好布局排版打下基础，才能使后续的开发更顺利。今时不同往日，现代CSS属性能更好地快速实现各种布局排版，节约更多时间去摸鱼"}, {"id": "7002516309296545806", "title": "学透CSS-实战 :target 选择器，解放生产力！！！", "desc": "网页开发中的锚点：网页内设置的一个位置，点击链接可以跳转到指定位置。以掘金文章详情页为例,右边侧边栏有目录，当你点击其中的一个目录是不是会跳转到具体的内容。"}, {"id": "7005056135279427614", "title": "深入了解魔性的CSS字体", "desc": "最近在开发遇到了两个一直困扰我的问题： 当 font-family 为 PingFangSC-Regular 时，为什么设置了 font-weight 为 500 和 font-weight 为 40"}, {"id": "7005565219162292237", "title": "【译】停止在 CSS 中使用像素单位", "desc": "停止在 CSS 中使用像素单位 为什么 web 开发者会不假思索的使用“px”单位？这仅仅是他们的一个坏习惯?还是他们缺乏对其他 CSS 单位的认识?更或许是他们的设计团队更倾向于使用“px”和“pt"}, {"id": "7006525548851626015", "title": "《CSS新世界》读书总结", "desc": "前提 张鑫旭老师这本书也是刚出版不久，篇幅很大，内容很多，所以目前我还没看完。 读CSS书有个好处就是，你可以随意翻开书中的某一章，阅读起来，不必担心如果不从头看到尾，可能就看不懂了的问题。随意打开一"}, {"id": "6963904955262435336", "title": "CSS 实现多行文本“展开收起”", "desc": "多行文本展开收起是一个很常见的交互， 如下图演示 实现这一类布局和交互难点主要有以下几点 位于多行文本右下角的“展开收起”按钮 “展开”和“收起”两种状态的切换 当文本不超过指定行数时，不显示“展开收"}, {"id": "6999438892441026591", "title": "聊一聊移动端适配", "desc": "这是我参与8月更文挑战的第17天，活动详情查看:8月更文挑战 一、引言 充分了解各种设备，我们会知道不同尺寸的屏幕本身就有各自的定位，像ipad类的大屏设备本身相比较iphone5就应该具有更大的视野"}, {"id": "6991642464096354340", "title": "请用CSS画个心&高斯模糊｜8月更文挑战", "desc": "矮人看戏何曾见，都是随人说短长。——夏吉尔硕 # 前言 高斯模糊 可以让页面更美观，利用图层关系及filter(滤镜) 属性 filter(滤镜)属性，是CSS3中新增的样式属性"}, {"id": "6882992895080136712", "title": "玩转Grid布局", "desc": "但是，菜只有一种，而烤的手段可以有多种，所谓技多不压身！下面我们一起看看实现这种效果有多少种方式。 父容器的宽自适应，子容器的宽计算公式为 (100% - (n - 1) * 24) / n 。如果页面宽度大于1280px，n等于5，小于1280px时，n等于4，页面最小宽度是…"}, {"id": "6989114048948207653", "title": "Vue之固定底部组件", "desc": "【实现效果】 【实现方式】 【增加需求】增加一个A逻辑，当满足A逻辑的时候，底部按钮就不展示，其他情况则展示。 新增一个Bool值（isShow）来判断是否显示底部按钮，具体代码如下："}, {"id": "6997255364857036813", "title": "css3动画与js动画的区别", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 JS动画 缺点： (1)JavaScript在浏览器的主线程中运行，而主线程中还有其它需要运行的JavaScript脚本、样式计算、布局、"}, {"id": "6958694510188560392", "title": "css - position", "desc": "前置回顾 先回顾前面的文章： 总结，visual formatting model决定浏览器如何显示如何处理文档树。盒子类型和定位方案决定元素盒子如何在文档树中显示和放置。 本篇学习一下定位方案中的p"}, {"id": "6994817775013199885", "title": "CSS Bulma 框架", "desc": "Bulma 是一个免费的、开源的框架，采用了移动优先的响应式布局，它提供了可随时使用的前端组件，您可以轻松地将这些组件组合起来构建响应性强的 web 界面。 Bluma 可以作为 Bootstrap "}, {"id": "7002030951345684493", "title": "css——什么是BFC", "desc": "什么是 BFC 它会创建一个特殊的区域，在这个区域中只有 block box 参与布局，而BFC的一套规则就规定了在这个特殊的区域中如何进行布局，如何进行定位，区域内元素的相互关系和相互作用，这个特殊"}, {"id": "6988123135157960734", "title": "Less 中使用 Css3 calc()函数遇到的问题", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2 万元奖池等你挑战」 Less 中使用 Css3 calc()函数遇到的问题 背景 这两天在写样式的时候，遇到了这个奇奇怪怪的问题，于是"}, {"id": "6844903807885787143", "title": "CSS 火焰？不在话下", "desc": "正文从下面开始。 今天的小技巧是使用纯 CSS 生成火焰，逼真一点的火焰。 嗯，我们需要使用 filter + mix-blend-mode 的组合来完成。 如上图，整个蜡烛的骨架， 除去火焰的部分很简单，掠过不讲。主要来看看火焰这一块如何生成，并且如何赋予动画效果。 模糊滤镜…"}, {"id": "7001302677720137758", "title": "HTML和CSS当中的BFC模块作用和特点。（面试经典题目，大厂必问）", "desc": "1.BFC中的英文全称是 block formatter context(块级格式化执行上下文)，是css里面的一种块级概念。 我们都知道。如果有一对父组关系的元素，如果子元素有原先的高度和宽度，并且"}, {"id": "7002031035508752415", "title": "css——如何实现水平垂直居中", "desc": "居中也是 css 中使用频率非常高的知识点，看下面的例题。 使用多种方式实现绿色块的水平和垂直居中。 一、居中元素定宽高 absolute + 负 margin absolute + calc abs"}, {"id": "6996198385338286088", "title": "【前端--CSS】知识点（十一）—— 给男朋友总结的CSS知识点（五）", "desc": "每日一问，今天你学习了吗？周末到了，刷剧玩游戏的时候不用忘记学习吖~（css相关的知识点的总结回顾）"}, {"id": "6970621510755188749", "title": "css：如何实现左右定宽，中间自适应布局", "desc": "今天看到一个css题目，说你能用几种方式来实现css左右定宽，中间自适应布局？恰好好久没写布局了，今天通过几种布局方式巩固一下，加深印象。"}, {"id": "6844904033145061389", "title": "CSS的常用属性速查表", "desc": "要想写出优美的CSS作品，想象力固然很重要，然而基础也是不可忽略的。相信大部分人怕写CSS的原因是被它庞大的基础知识体系给吓到了，在此笔者推荐一个叫freecodecamp的网站，通过闯关的方式来学习前端三剑客，用它入门CSS是最佳的选择！ 当你成功地入了门之后，便可以开始探索…"}, {"id": "6844903655045333000", "title": "移动端适配知识你到底知多少", "desc": "CSS像素：web编程用到的，我们在JS和CSS中使用的10px就是CSS像素，是可变的。CSS像素受屏幕缩放和设备像素比（dpr）的影响。如我们网页的中的字体在网页放大之后会变大，还有在移动端看起来会比PC端小一些 ...... Retina屏幕即视网膜屏幕，是苹果发布iph…"}, {"id": "6977381057439989796", "title": "纯css实现：文字可换行的下划线、波浪线等效果", "desc": "今天领导开会时说努力工作会更快成熟，比如大冰块同学就比起刚进公司时就成熟了不少，我若有所思，上卫生间时照照镜子才发现，哦~原来我现在看上去比他们都老..."}, {"id": "6844903712268222471", "title": "兼容iphone x刘海的正确姿势", "desc": "，我的天，等了这么久你给我看这个？码农慌得一批满地找新 iphone 的逻辑像素，然后想着怎么兼容这刘海和胡子。 其实对于 web 前端来说，刘海在绝大多数的场景下是可以不用处理的，因为 safari 或客户端（微信，手Q等）的 statusBar 已经替我们抹平了顶部刘海，我…"}, {"id": "6988353326463057956", "title": "CSS的文本样式", "desc": "首行缩进(text-indent) 我们原来讲过段落标签可以用<p>标签表示，但是<p>标签没有直接设置首行缩进的属性。不过CSS中的text-indent属性可以实现段落的首行缩进。来一段宋词: C"}, {"id": "6998865367477010439", "title": "一篇文章带你了解HTML的网页布局结构", "desc": "大家好，我是IT共享者，人称皮皮。这篇我们来讲讲CSS网页布局。 一、网页布局 网页布局有很多种方式，一般分为以下几个部分：头部区域、菜单导航区域、内容区域、底部区域。 1. 头部区域 头部区域位于整"}, {"id": "6844903655489929224", "title": "边学边玩CSS Grid", "desc": "Grid Garden1是Codepip2创建的一款寓教于乐的在线网页游戏，游戏共有28关。玩家可以通过过关的方式掌握CSS最新标准CSS Grid。 游戏的设定是一个花园种植胡萝卜的场景，玩家通过在代码区填写CSS Grid的相关代码完成除草、浇水等任务。通过玩家的辛勤劳作，…"}, {"id": "6844903958905880584", "title": "基于z-index重新认识“层叠上下文”", "desc": "形成层叠上下文的节点，z-index就能生效（误解）。 下面，带着疑问去整理相关的知识点。 可能之前在对于“层级”的一个了解仅限于此，并没有去做更多详细的了解，但是其实这只是css“层级”关系里面的冰山一角，更具体的，可能需要好好了解一下“层叠上下文”这个点。 层叠上下文是HT…"}, {"id": "6921963462654427150", "title": "Flexbox 使用指南", "desc": "本文重点介绍了 容器 (flex container) 和 元素(flex items) 的所有属性，以方便查阅。 常规布局 基于块和内联流方向，而 flex 布局 与方向无关。flexbox 是一个完整的模块而不是单个属性，因此它涉及很多东西。其中一些设置在 容器 (flex…"}, {"id": "6844903566574878733", "title": "深入理解 CSS 属性 z-index", "desc": "带你深入理解 CSS 属性 z-index 的使用技巧，让你设置的 z-index 不再失效。"}, {"id": "6919296113778360334", "title": "（css篇）1.grid布局", "desc": "PS：整理自 阮一峰 CSS Grid 网格布局教程 后续会加上自己练习内容。 5.grid-auto-flow 划分网格后，容器子元素排列顺序。PS：默认会先行后列 8.grid-auto-columns和grid-auto-rows用来设置，浏览器自动创建的多余网格的列宽和…"}, {"id": "6844903519154077703", "title": "CSS  VS  JS Animation: 哪个更快?", "desc": "这篇文章将会逐点讲解基于JavaScript的DOM动画库，比如Velocity.js和GSAP，是如何比jQuery和基于CSS的动画库高效的。"}, {"id": "6844903811446751246", "title": "CSS 搞事技巧：hover+active", "desc": "在 JavaScript 中，我们可以利用变量，DOM 来保存状态，而 CSS 当中，我们也可以利用伪类选择器来保存状态，这就是 CSS 搞事的核心了。 核心概念：保存状态。 在上一篇 CSS 搞事技巧：checkbox+label+selector 中利用 checkbox+…"}, {"id": "6986832896866664456", "title": "CSS 背景应用以及背景属性", "desc": "css中的背景属性有：background-color、background-position、background-size、background-repeat、background-origin、"}, {"id": "6971704980474429454", "title": "【记录】一个经典场景的布局方案", "desc": "最近刚好在写页面，遇到一个比较经典的场景，当时记录一下吧。我想，稍有经验的道友看到这种场景，多半是轻蔑一笑，心想：“简直不要太简单好吗？”"}, {"id": "6899261323176050695", "title": "HTML+CSS之如何找BUG", "desc": "很多刚进入前端行业的小伙伴在写页面的时候，很容易出现错误，这时候很多小伙伴就会一行行查看自己的代码哪里有问题，或者仔细的对比网上代码，这样查看错误很浪费时间，而且陷入了自己的思维里面看不出错误在哪里。 下面呢，教大家如何快速的查找错误及解决问题。其实，咱们的浏览器就有控制台及一…"}, {"id": "6955667136010256398", "title": "CSS @property，让不可能变可能", "desc": "以下文章来源于iCSS前端趣闻 ，作者SbCoco 本文主要讲讲 CSS 非常新的一个特性，CSS @property，它的出现，极大地增强的 CSS 的能力！ 根据 MDN -- CSS Prope"}, {"id": "6905695376645292045", "title": "2020版w3c css specifications全解 ", "desc": "并推荐一篇讲原生css以外知识的文章，两个搭配可以包含我们需要的绝大部分css内容。 关于css的参考资料，我们能查到的资料里，要么讲奇淫技巧、华而不实，要么讲某几个热门知识点，要么已经过时很多年了，甚至很多同学还把css3作为新技术或者不知道css到底包括什么。 因为相关内容…"}, {"id": "6986663414328197151", "title": "当面试官问我BFC", "desc": "大龄青年重学CSS之BFC篇——很惭愧当面试官问到我BFC，作为一个有着三年开发经验的前端，我只能茫然的摇头..."}, {"id": "6867108878278983693", "title": "想知道什么是BFC，一篇文章就够了", "desc": "Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 BFC 即 Block Formatting Contexts (块级格…"}, {"id": "6844903822444199943", "title": "8个有用的 CSS 技巧:视差图像，sticky footer 等等", "desc": "CSS是一种独特的语言。乍一看，这似乎很简单,但是，某些在理论上看起来很简单的效果在实践中往往不那么明显。 在本文中，我将分享一些有用的技巧和技巧，它们代表了我在学习CSS过程中的关键进展。本文并不是要演示CSS可以变得多么复杂。相反，它分享了一些在大多数CSS教程中不太可能找…"}, {"id": "6978806263807213605", "title": "理解css的BFC", "desc": "BFC的定义 也就是当BFC起作用的时候，其元素内部无论怎么翻江倒海都不会影响到外部元素。同样，外部元素的变化也不会影响到BFC内部元素，这就跟结界一样。可以理解为有一个很强的护盾在包裹着BFC元素。"}, {"id": "6898144070125518856", "title": "使用原生 CSS 实现自适应视频", "desc": "我在研究 CSS 数学函数时，曾考虑过响应式 iframe，也能找到一些现有的解决方案，例如这个，但是需要使用包装器或 JavaScript。假如没有包装器，只使用原生 CSS 能实现相同的功能吗？ 首先，我们需要获取视频的宽高比。然而无法从属性中获取视频的宽高比（此方法存在于…"}, {"id": "6844903586044854286", "title": "给我三行代码，还你一个海洋-致敬中国第四届CSS大会", "desc": "代码很简单，只有几行代码。"}, {"id": "6844903566562312200", "title": "CSS动画制作绽放的花朵", "desc": "最近看到几篇有关css的文章，纯css实现各种复杂效果，甚至可以获取用户密码并发送到指定位置，甚是震撼。闲暇之余，利用自己现有的css基础，实现了本作品，同时练习一下许久不用的CSS3技能（技术分享，不考虑兼容性）。 看起来比较复杂，其实不然。运用的技术点如下： .flower…"}, {"id": "6978811753287122975", "title": "CSS3 filter(滤镜) 属性", "desc": "原文链接：CSS3 filter(滤镜) 属性 效果预览 这里仅展示黑白效果，更多效果移。 定义和使用 filter 属性定义了元素（通常是<img>）的可视效果(例如：模糊与饱和度)。 默认值 no"}, {"id": "6982574775927308318", "title": "简述CSS盒模型", "desc": "什么是盒模型？ 盒模型的概念：盒模型是CSS布局的基石，它规定了网页元素如何显示以及元素之间的相互关系。 盒模型的组成：content（内容）+padding（内边距）+border（边框）+marg"}, {"id": "6963555718670598151", "title": "🍍Flex 和 Grid布局完全掌握", "desc": "你真正了解 flex 的特性吗？Grid 布局是否体验过？本文带你全面全面掌握，可以收藏作为手册自查。"}, {"id": "6844904190938972173", "title": "移动端适配总结（长文）", "desc": "对于屏幕，分辨率一般表示屏幕上显示的物理像素总和。比如，我们说iPhone6屏幕分辨率是(750 x 1334px) 对于图像，概念等同于图像尺寸、图像大小、像素尺寸等等。比如，我们说(20 x 20px)的icon 在CSS规范中，长度单位可以分为绝对单位和相对单位。px是一…"}, {"id": "6844903561780789255", "title": "彻底搞定vertical-align垂直居中不起作用疑难杂症", "desc": "原本我的文章标题是深入探讨line-height与vertical-align的疑难杂症，但这样似乎没能针对性的抛出一个问题，故改成“彻底搞定vertical-align垂直居中不起作用疑难杂症”。因此，本文讲解的还是line-height和vertical-align。至于各…"}, {"id": "6981357659366621197", "title": "CSS: 纵享丝滑滚动", "desc": "如何实现如德芙般的丝滑滚动效果？CSS、JQuery、原生 JS 它们各自都有什么缺点？这篇文章告诉你，实现丝滑滚动其实很简单"}, {"id": "6971604819635093512", "title": "一些开发中的CSS小技巧", "desc": "以下都是一些我积累的一些css技巧，有些在我工作中用的很多，有些相对较少。 同时，为了让大家更清楚什么情况下使用，我会贴出关于属性的兼容情况"}, {"id": "6974356682574921765", "title": "flex布局子元素宽度超出父元素问题", "desc": "最近在做项目中，使用flex布局遇到了个老问题：当flex子元素里的子元素的宽度过大，超出flex父元素时，设置flex:1并不能限制flex子元素的尺寸"}, {"id": "6997228474410729479", "title": "老司机重学CSS：BFC & IFC", "desc": "Formatting context（格式化上下文） 是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。"}, {"id": "6844903617057521672", "title": "不定期更新的CSS奇淫技巧（一）", "desc": "一、CSS写自适应大小的正方形代码：效果图：原理：元素的padding的百分比值四个值均根据当前元素的宽度来计算的padding只能取top或者bottom，自适应正方形其值要和宽一致，当然其他不同比"}, {"id": "7000693042269126664", "title": "css盒子模型有几种？ 以及盒模型设置？", "desc": "一、CSS盒模型 二、CSS盒子模型有几种？ 1. W3C盒子模型(标准盒模型) 2. IE盒子模型(怪异盒模型) 1.怪异盒模型中的width指的是内容、边框、内边距总的宽度（content + b"}, {"id": "6997599403385028616", "title": "浅谈 CSS3 新特性：Border 边框", "desc": "CSS 用于控制网页的样式和布局，CSS3 是最新的 CSS 标准，且 CSS3 已完全向后兼容，也就是说 CSS3 = CSS2 + CSS3 新增属性。"}, {"id": "6931206551466475528", "title": "亿点点玩 CSS | 水平渐变 linear-gradient ", "desc": "过年期间，玩了玩 css，感觉很有意思。特别是在看《CSS 揭秘》这本书时，仿佛打开了新世界的大门。以前认为，渐变不就是那样吗，颜色逐渐变一下，还能玩出花来 ? 看到了书中用渐变实现条纹，让我很意外。书中关于渐变说的并不是很细致，于是我觉定好好把水平渐变的使用整理整理，再写点其…"}, {"id": "6974733176346263566", "title": "css - 文本属性", "desc": "这是我参与更文挑战的第17天，活动详情查看： 更文挑战 缩进文本 将Web页面上一个段落的第一行缩进，这是一种最常用的文本格式化效果。 适用于：块容器 <length>：用长度值指定文本的缩进。可以为"}, {"id": "6844903651362734094", "title": "web移动端布局的那些事儿", "desc": "为了保证在低版本的机型也能正常显示页面，可以引入 viewport-units-polyfill 来处理 vw 的兼容问题。 viewport-units-polyfill 其实是 viewport-units-buggyfill 的简化版。 简单介绍下 viewport-un…"}, {"id": "6844903727548088333", "title": "刷《一年半经验，百度、有赞、阿里面试总结》·手记", "desc": "有给出的或者有些不完善的答案，也尽力给出/完善了（可能有错，大家自行辨别）。有些很困难的题目（例如实现Promise），附带相关链接（懒癌患者福利）。 总的来说，将这些题目分成了“Javascript”、“CSS”、“浏览器/协议”、“算法”和“Web工程化”5个部分进行回答和…"}, {"id": "6982458662493093924", "title": "表单label文字两端对齐", "desc": "表单label文字两端对齐，为了增加美观，不同字数的文字两端对齐是很有必要，主要会用到 text-align 和 text-align-last"}, {"id": "6844903672556552205", "title": "前端优化：浏览器缓存技术介绍", "desc": "在前端开发中，性能一直都是被大家所重视的一点，然而判断一个网站的性能最直观的就是看网页打开的速度。其中提高网页反应速度的一个方式就是使用缓存。缓存技术一直一来在WEB技术体系中扮演非常重要角色，是快速且有效地提升性能的手段。 一个优秀的缓存策略可以缩短网页请求资源的距离，减少延…"}, {"id": "6924981596831842317", "title": "纯 CSS 制作摇骰子（随机结果）", "desc": "大家好，我是 Steven。 这一期，我们会做一个摇骰子的效果。等等，这个很容易？那就挑战一下，不用 JavaScript，只用 CSS 去制作，我们来看看怎么实现。 里面是骰子从一到六的面板，然后为了等下转骰子的时候看上去随机一点，这里我将一到六的顺序掉乱一下。 打开 Cod…"}, {"id": "7000657396041252877", "title": "CSS 边框样式", "desc": "在网页中，几乎所有的元素都可以定义边框，边框主要有三个属性，即宽度、外观和颜色，分别由 border-width、border-style、border-color 来控制（必需同时设置三个属性）。 "}, {"id": "6905772706198159374", "title": "开源推荐|10个惊人的复古CSS套件", "desc": "是否想发现可在下一个项目中使用的非典型CSS设计？下面是我最喜欢的一些。 NES-style（8bit-like）的CSS框架，非常适合您的复古浏览器游戏。 Web中用于老式RPG GUI的轻量级纯CSS框架；包括按钮，复选框，图标，滑块，光标和许多其他有趣的东西。 98.cs…"}, {"id": "7000936775107477535", "title": "前端写CSS的几个层次", "desc": "作为一个工作多年的前端，开发的工作中，大概有一半的时间在写样式，通过总结，得出前端写CSS分为以下几个层次： 第一层 使用Element UI、Ant design 这样的组件库，通过添加各种组件，然"}, {"id": "6857474410392059918", "title": "一篇文章教会你利用html5和css3实现3D立方体效果图", "desc": "【一、项目背景】随着HTML5CSS3的出现和发展，使得我们的网页可以实现更加复杂的效果，也使得我们的浏览体验更加丰富，所以今天我们将制作一个正方体的3D效果。【二、项目分析】想要利用CSS3实现3D"}, {"id": "6844903950177533965", "title": "CSS之Flex布局", "desc": "布局的传统解决方案，基于盒子模型，依赖display属性+position属性+float属性。对于那些特殊布局非常不方便。 Flex布局，意思是弹性布局，用来为盒子模型提供最大的灵活性。 任何一个容器都可以指定为Flex布局。 WebKit内核的浏览器，必须加上-webkit…"}, {"id": "6844903655468957704", "title": "关于BFC理解", "desc": "BFC(Block Formatting Context，块格式上下文)是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。对其的理解能够帮你更好的布局页面。 在普通流中，元素按照其在HTML的先后位置至上而下布局，在这…"}, {"id": "6844903508869644296", "title": "推荐一个漂亮的vue Material Design风格的组件库", "desc": "Vuetify comes ready to go with 5 pre-made vue-cli templates. From simple html to full-blown SSR, you are ready to go in minutes. Each and e…"}, {"id": "6844903502699839502", "title": "work-break: break-all和word-wrap: break-word的区别？", "desc": "一直以来，对work-break和word-wrap都是止于使用，只会死记硬背的写一个word-wrap:break-word;word-break:break-all;这样的东西来强制断句，还没有深入去探究两者的区别。鉴于最近常常遇到，便来加深一下了解！"}, {"id": "6909648382932254728", "title": "css-base-interview", "desc": "1. position 脱离文档流，元素相对于浏览器窗口顶部定位，不占据原来位置空间。 必须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。 2. css盒子模型 而设为 border-box 时，属于 IE 盒模型，设置宽度和高…"}, {"id": "6844903847844904974", "title": "前端进阶之JS中基本类型，复杂类型以及那个让人头大的null", "desc": "除 Object 以外的所有类型都是不可变的（值本身无法被改变）。 鱼头注：在最新的ECMA proposal里有个处于Stage 3的基本数据类型 BigInt ，用于表示比253大的所有数字。 typeof null === 'object'是个早在第一版的JS就存在的BU…"}, {"id": "6844903569779326989", "title": "IOS中Fixed元素包含输入框时的解决方案", "desc": "在移动端上的前端开发中，经常会遇到这种场景：某个元素或容器需要固定在页面中的一个位置，可能是将输入框固定在底部，也可能是固定在中心的模态框中包含一个输入框。 在 IOS 中，输入框聚焦，会使键盘唤起，键盘被唤起时，经常会出现一些莫名其妙的 BUG... ..."}, {"id": "6854573217198112781", "title": "CSS 列表模型之counter计数器", "desc": "在CSS语法中，需要定义一个counter-name作为计数器的唯一标识，这是必不可少的。解析计数器一般有以下几个步骤： 你可以使用counter-reset实例化元素上的新计数器，作用是给这个新计数器起一个名字并附上初始值。[<counter-name> <integer>]…"}, {"id": "6844903731729809422", "title": "你应该不知道的ol元素属性:type, start, value, 和reversed", "desc": "12年写的文章，今天又看到，发现写得还挺有意思，内容也不错，不该被埋没，于是掘坟，挖出来给大家看看~嘻嘻嘻嘻~"}, {"id": "6941262580539359268", "title": "CSS系列——四两拨千斤的Content属性", "desc": "一. 认识 是不是第一眼看过去，会感觉这哥们平平无奇，但是（重点来了），经本工具人验证，这哥们可以在 Chrome 浏览器中应用在任何元素后面，而不是仅仅只应用在伪类元素后面，鉴于公司业务目前还是主营 Chrome 浏览器，所以。。。（真香警告⚠️） 二. 使用 是不是出人意料…"}, {"id": "6869965391918825485", "title": "【翻译】指定属性值、级联以及继承（ Assigning property values, Cascading, and Inheritance）", "desc": "在翻译第六章时，先对第四章《Syntax and basic data types》中的 URLs 和 URIs 做一个翻译，以便于在后面提到这两个术语时有一个大致的概念。 本规范中的 URI 值（统一资源标识符，请参见[RFC3986]，其中包括 URL、URN 等）用“&#…"}, {"id": "6968715596707921950", "title": "CSS初识", "desc": "1. CSS层叠样式表 1.1. HTML的局限性 说起HTML，这其实是个非常单纯的家伙， 他只关注内容的语义， 比如<h1>表明这是一个大标题，用<p> 表明这是一个段落，用<img> 表明这儿有"}, {"id": "6941241025360838687", "title": "一行代码实现黑夜模式和保护元素, 浅谈 CSS3 filter", "desc": "这几年基本各大网站和应用都支持了黑夜模式. 这篇文章将介绍一下 CSS3 filter 属性 并通过使用 filter 一行代码实现网站的黑夜模式。 然后还是通过 filter 保护个别元素不受影响。 filter 有点类似于一个遮罩层, 能够将模糊或颜色偏移等图形效果覆盖于元…"}, {"id": "6908949359186935821", "title": "【Ten Mins Effect】 - 01 创意列表悬停效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现要给简单精美的 css 效果。 知道了流程，那么我们尝试先实现一个单独的 list item。 接下来是左边按钮的实现，这里可以借助 before 和 after，就不用再增加额外的 do…"}, {"id": "6949815131865874462", "title": "CSS基础（二）", "desc": "此为pink老师的html和css全套笔记，包括css3属性，不包括移动端布局部分。看的时候请搭配bilibili视频观看。b站搜索黑马pink老师即可"}, {"id": "6844903598665498638", "title": "scroll to the future - 现代 JavaScript 滚动条实践", "desc": "Everything you always wanted to know about implementing scrolling but were afraid to ask. We have scrolled to the bottom of modern web spec…"}, {"id": "6844903734254780430", "title": "CSS与中文相关的一些特性", "desc": "这段时间写CSS比较多，间接地发现一些与中文有关的CSS特性，在此整理了几点。👀 1. 竖向写作 writing-mode: vertical-lr; 中文在vertical-lr或vertical-rl下每个字符并不会发生旋转，而英文和阿拉伯数字则会把整个字符旋转90度。 …"}, {"id": "6844904036081074183", "title": "【Youtube】CSS best practices - Introduction to Atomic CSS", "desc": "01:15 - The nature of CSS and the challenges it brings 05:08 - Object-oriented CSS 06:03 - The BEM (Block Element Modifier) approach"}, {"id": "6844903509431681031", "title": "webpack中hash和chunkhash是不是很眼熟？", "desc": "后者很容易理解，因为chunk在webpack中的含义就是模块，那么chunkhash根据定义来就是模块内容计算出来的hash值。 这里我们还得提一个问题，比如像vue这些框架，把js和css共同放在一个里面会时，我们一般会用一个插件叫extract-text-webpack-…"}, {"id": "6844903569879990285", "title": "分享手淘过年项目中采用到的前端技术", "desc": "当你陪着家人嗑着瓜子，和家人一起看着春晚，顺便拿着手淘参与春晚抽奖互动的时候，杭州还有两百多程序员还奋战在一线当中。现在年也过完了，奖也抽了，红包也拿了。也该好好回来工作的时候了。这次很荣幸，自己能参与手淘过年项目（红包开光和春晚互动项目）的项目中，虽然仅仅参与其中的部分工作，…"}, {"id": "6844903831348723726", "title": " 使用纯 CSS 实现仿 Material Design 的 input 过渡效果", "desc": "以前一段时间，基于对 next 与 graphql 的调研，再加上本人的兴趣，我做了一个站点，也作为我以后各种技术折腾，实践以及兴趣交汇的试验田。 最近我需要在我的实验田使用 jwt 实践校验码的功能。校验码，就是指注册时邮箱或者短信的校验码。需要校验码则需要有登录注册，而在登…"}, {"id": "6934273120295452680", "title": "开发一个常用的响应式 css 工具类", "desc": "经常就遇到有人说，用 Vue 做一个响应式的网站，用 Bootstrap 呢，还是用 Element-ui 或者 Ant Design Vue 还是其他的组件库。当然用 Vuetify 挺好的，但是有时候我们或者老板们不喜欢 Material Design 的设计。而且说实在的…"}, {"id": "6956040192595591199", "title": "【CSS】从浏览器渲染层面解析css3动效优化原理", "desc": "引言 在h5开发中，我们经常会需要实现一些动效来让页面视觉效果更好，谈及动效便不可避免地会想到动效性能优化这个话题: 减少页面DOM操作，可以元素使用CSS实现的动效不多出一行js代码 使用绝对定位脱"}, {"id": "6983929811156615176", "title": "页面想要变成黑白灰？ie如何做兼容呢？", "desc": "👏👏👏页面想要变成黑白灰？ie如何做兼容呢？ 业务场景：某些突发情况下，页面换成黑白灰的颜色主题 解决方法1：css滤镜。 解决方法2: 使用grayscale.js"}, {"id": "6868087257154289671", "title": "复制文章内容时添加版权信息", "desc": "在复制有些网站的文章时，通常会发现，复制的内容还带了一个“小尾巴”，上边附带着版权信息。 在本篇文章中，尝试来实现一下这种效果。 大致原理就是在用户复制时，获取用户选中的将要复制的内容，然后再加上版权信息即可。 如何获取用户复制的内容呢？我们可以通过window.getSele…"}, {"id": "6844903782959038471", "title": "马蹄疾 | 聊聊你可能并没有完全掌握的 Flex 布局", "desc": "很多谈 Flex 布局的文章都是一个一个属性的干聊，有点像约会时的查户口，枯燥而无趣。 如果让你硬记中国 34 个省级行政单位，你不仅会记的很吃力，可能还没法分清省和省之间的相邻关系。而一旦你心中有了一副中国地图，这些知识就变成信手拈来的东西了。 这篇文章立志做 Flex 布局…"}, {"id": "6844903891553746958", "title": "CSS 面试题: 手写 collapse(折叠) 的 css/html 部分", "desc": "其实vue/react等框架的出现, 让自己做一个ui变得简单, 大部分的js逻辑都被库封装, 反而组件的代码主要都是css, 所以只要css写好了, 一个组件就完成60%以上了. 给组件增加一个\"手风琴\"的选项, 就是只可以同时打开一个\"页\". 给每次点击header标签的时…"}, {"id": "6979538491721908231", "title": "如何修改antd样式", "desc": "antd下拉框选择完成后自动换行，不显示省略号。编写样式覆盖antd样式达到想要的效果~~~~~~~"}, {"id": "6844903501890322440", "title": "手把手教你如何使用webpack 生成css sprites", "desc": "我们在开发网站的时候，通常会把常用的图标合并成css sprite(雪碧图)，可以有效的减少站点的http请求数量，从而提高网站性能。 下面让我们一起来学习一下如何使用webpack合并sprite图。 好了，以上就是webpack生成css sprite的办法了，是不是觉着很…"}, {"id": "6986855459101605918", "title": "「HTML+CSS」--自定义加载动画【042】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为96px 背景色：quamarine（这里只是为了先显示span，后面会删除的） 相对定位 效"}, {"id": "6844904094226710535", "title": "杂记：关于 navigator.sendBeacon 接口", "desc": "今天在 GoogleChrome 的 Samples 仓库中看到了 navigator.sendBeacon 接口案例 demo。 打开上面的页面，然后关闭，再点击进入地址 https://putsreq.herokuapp.com/4GE2nVUuDoDGsNyKES2G/i…"}, {"id": "6844903827603193863", "title": "css经典布局系列三——三列布局(圣杯布局、双飞翼布局)", "desc": "缺点：如果有文字出现，布局就会错乱，导致扩展性不好。 3、将未浮动的middle挤了下去。 此时lefe和right都跟着被拉回来了，左右空出了200px。所以用相对定位把left,right拉回来； 如果某一列内容过多，文字会溢出。解决方法：等高布局；"}, {"id": "6986451333461049375", "title": "清楚浮动的四种常见方式", "desc": "为什么要去除浮动？ 蓝色的div块因为浮动脱离文档流而挡住了红色div的显示，因此我们需要去除浮动让红色div块显示在蓝色div块下面 现在效果 目标结果 1.给浮动的元素的祖先元素加上高度 2.使用"}, {"id": "6844903942392905736", "title": "css中的多种垂直水平居中", "desc": "在面试的时候**css面试题**里面基本上都会问一个元素**垂直水平居中**，其实这个有多种方式实现，同时元素可以是**固定宽高、不固定宽高**的。"}, {"id": "6844903687433764871", "title": "[译] 当你创建 Flexbox 布局时，都发生了什么？", "desc": "快速简介： 在我的理想世界里，CSS Grid 和 Flexbox 应当作为一个整体一起出现，才能组成完整的网页布局系统。然而，我们先有了 Flexbox 属性，因为它比浮动（floats）更适合用来做网格布局，所以出现了很多以 Flexbox 为基础的网格布局系统。事实上，很…"}, {"id": "6844904200401502215", "title": "display:none visibility:hidden opacity:0 区别", "desc": "transition：transition 不支持 display。"}, {"id": "6961407570368004109", "title": "CSS盒子的水平垂直居中", "desc": "水平居中写了5种方法，垂直居中写了5种方法，水平垂直居中写了7种方法，实际上只有6种； 一.水平居中 指当前元素在父级元素容器中，水平方向是居中显示的；有以下几种方法: 方案一:text-align:"}, {"id": "6993598607353970718", "title": "解决 CSS3 多列样式 column-width 布局时内容被截断、错乱", "desc": "一、问题 使用 CSS3 的 column-width: auto | <length> 属性时，出现排列的内容被截断，出现错位的现象。 二、原因 需要为图片容器设置高度，不然会崩掉。 三、解决方法 "}, {"id": "6844903495917961229", "title": "前端工程师面试题(html+css)", "desc": "正值金九银十的招聘旺季，我把我珍藏整理多年的前端面试题分享给大家，分三部分。这是第一部分,html和css布局相关的。 1. HTML5相关 HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。 浏览器支持新标签后，还需要添加标签默认的样…"}, {"id": "6992784600573427726", "title": "css清除浮动的总结 与 BFC ", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 清除浮动 css使用了浮动 导致了父元素的塌陷问题 要是用清除浮动 父盒子塌陷了 1 .clear清楚浮动 2 . overflow: hi"}, {"id": "6992783215048015879", "title": "绝对定位和粘性定位无法同时使用的替代方案", "desc": "需求是在一个子容器的右上方放一个菜单栏，且要求在容器滚动时，这个菜单栏始终在顶部出现，效果如图。 一开始的想法是，使用绝对定义 postition: absolute 让菜单栏位于右上方，然后"}, {"id": "6981297848701124615", "title": "【CSS SCSS】@mixin and @include 变量空格", "desc": "写scss时，用上@minix 规则，如下 期望结果是 可实际结果是 变量前多了空格 看了下官方文档，没看到空格相关情况，剩下我一脸懵逼 解决办法 将@minix 规则改一下，用加号连接 这样结果就正"}, {"id": "6844903587915497486", "title": "如何在 Vue 中优雅地使用 CSS Modules？", "desc": "CSS Modules 为每一个局部类赋予全局唯一的类名，这样组件样式间就不会相互影响了。如： 当导入一个 CSS 模块文件时，它会将局部类名到全局类名的映射对象提供给我们。就像这样： 的确，CSS Modules 对于 Vue 组件是一个不错的选择。但也存在以下几点不足： v…"}, {"id": "6844903746678308872", "title": "你该知道的《css揭秘》--形状篇", "desc": "关于以下内容，我们假设结构层的变更是不允许的。 我们也尽量不去添加额外的HTML,以做到样式层与结构层的分离，如若实在没有其他的可能性，才退而求其次来增加额外的HTML。 制作一个自适应的椭圆是形状篇中最简单的图形了，简直不能再简单了。 众所周知，制作与圆相关的图形，用到的属性…"}, {"id": "6844904163625697293", "title": "CSS 伪元素的一些罕见用例", "desc": "伪元素已经使用了很长时间。然而，我觉得有些用例并不是所有开发人员都完全了解的。我写下这篇文章是为了阐明它们，以便它们能被更多地使用。 由于伪元素属于其父元素，因此存在一些不寻常的用例。 现在，让我们看一个简单的示例。 这个设计有一个 section title，在它的左边有一个…"}, {"id": "6945738891685167111", "title": "CSS Grid 网格布局", "desc": "采用网格布局的区域，称为\"容器\"（container）。 容器内部采用网格定位的子元素，称为\"项目\"（item）。 行和列的交叉区域，称为\"单元格\"（cell）。 正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。 划分网格的线，称为\"网格线\"（g…"}, {"id": "6845166891036573710", "title": "再看CSS长度单位使用，做到胸有成竹", "desc": "在日常的开发过程中，对长度单位的使用较为混乱。本瓜称之为“黑盒长度单位使用”。 涉及到网站需同时兼容 PC 和移动端情况更甚：px、百分比、em、rem、vw etc. 像素（px）在不同的设备有不同表现。对于低 dpi 的设备，1px 是显示器的一个设备像素（点）。对于打印机…"}, {"id": "6985526559205490695", "title": "谈一谈盒子模型", "desc": "CSS 盒模型本质 CSS 盒模型本质上是一个盒子，封装周围的 HTML 元素。 简单点理解，就是把 HTML 元素看成一个一个的盒。 我们做网页布局，就是用在 CSS 摆盒。先用CSS设置好样式，然"}, {"id": "6969738412022562830", "title": "学习css", "desc": "1.什么是CSS 如何学习CSS 1.1、CSS是什么 Cascading Style Sheet 层叠级样式表 CSS：表现（美化网页） 字体，颜色，边距，高度，背景图片，网页定位，网页浮动... "}, {"id": "6844904178599526413", "title": "用css实现一个皮卡丘", "desc": "当我学完css和js后，冒出来一个想法。自己去实现一个可爱的卡通人物。于是我就去codepen找素材，最终选择了皮卡丘，如下图。 在开始写皮卡丘之前，我先观察了皮卡丘的整个页面。发现如果要很好的实现这个皮卡丘你不能像写传统网页那样从左到右布局，而是要从中间布局，因为左右两边对称…"}, {"id": "6875520020642791437", "title": "快速掌握CSS三大特性", "desc": "直奔主题，CSS的三大特性：继承性，层叠性，优先级一、继承性  作用：给父元素设置的一些属性，子元素和后代元素也有权使用注意：并不是所有的属性都能够继承，只有color/font-/text-/lin"}, {"id": "6991458694202392590", "title": "CSS基础复习第六天 | 8月更文挑战", "desc": "css常用单位 em 相对单位，相对于父盒子字号比值。属性值是数字可以带有小数点 rem 相对单位，相对于根元素(html)字号的比值和父盒子没有任何关系。属性值是数字可以带有小数点 Px 像素，是屏"}, {"id": "6956856972004032520", "title": "你真的了解 CSS 选择器吗？🧐", "desc": "相信对于 CSS 选择器大家都不陌生吧，但其实选择器的种类还是十分繁多的，直接抱着 W3C 的草案啃也没有什么意思。所以本文对 CSS 选择器做了一些总结，希望可以帮大家巩固一下选择器的知识。"}, {"id": "6854573212513075208", "title": "轻松使用纯css3打造有点意思的故障艺术(附React/Vue加强组件版)", "desc": "很早之前就看到国外很多酷炫的网站在实践\"故障艺术\", 或者错位动画\", 感觉非常有意思, 现在APP端的抖音启动界面有着这种设计的影子, 作为一名用于探索未知的前端工程师, 有必要好好实践一下这一设计. 接下来笔者将带大家使用纯Css3来实现\"故障动画\", 并将这一特效封装成R…"}, {"id": "6844903693649723406", "title": "css菜鸡的自我救赎", "desc": "0. 前言 理论倒是熟悉，但用起来还是一塌糊涂。于是，回头自我救赎一波，好好复习基础。flex、grid后面不多作研究，尤其是grid这种一两行就可以搞定很多复杂样式。如果我们不知道新技术是为了什么而来的，解决什么痛点，没有体验一下刀耕火种的时代，又没有一个良好的团队合作能力，…"}, {"id": "6844903783487504398", "title": "纯 CSS 实现斜纹效果", "desc": "然后..........然后 我就想实现一下这个效果， 然后...... 然后就是 到现在我也莫得游戏玩"}, {"id": "6922342731175952398", "title": "移动端常用的css代码段", "desc": "6.文本超出... 滚动条样式太丑希望自定义，::-webkit-scrollbar-*来帮你。记住以下三个关键词就能随机应变了"}, {"id": "6844904062702321672", "title": "[译] 解决 100vw 下滚动条引发的问题", "desc": "Widows 系统中的滚动条是会占据视口空间的。 vw 单位没有将滚动条计算在内。 fixed 弹出框里的 fixed 按钮是相对视口定位的而非弹出框。 作为一个 Windows 系统用户，我有时会注意到有些网站没有在 Windows 上测试。导致的问题之一就是，可能在什么地方…"}, {"id": "6844903497045917710", "title": "CSS外边距(margin)重叠及防止方法", "desc": "外边距重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界。本文针对相邻、嵌套该两个场景提出来解决方案。"}, {"id": "6844903721650880519", "title": "纵横开阖-微信小程序之通讯录全攻略", "desc": "【2019-08-16】Hello 小伙伴们，由于 jsliang 对文档库进行了重构，这篇文章的一些链接可能失效，而 jsliang 没有精力维护掘金这边的旧文章，对此深感抱歉。请需要获取最新文章的小伙伴，点击上面的 GitHub 地址，去文档库查看调整后的文章。 感觉文章有…"}, {"id": "6844903718366740493", "title": "多行文本加省略号的处理方法", "desc": "写这篇文章的起因是，当使用样式实现多行文本超出显示省略号的效果的时候，发现有的页面上省略号不是在文字末尾，而是在文字中间。后来查了下竟是跟文字在a链接里显示有关。下面详细说明下。 页面上文字超出部分用省略号表示，有多种方法可以实现，比如利用JS计算字数或是宽度，超出指定长度的字…"}, {"id": "6950587021836419109", "title": "BEM命名规范", "desc": "BEM规则 块名称为其元素和修饰符定义了命名空间。 块名称与元素名称之间用双连字符--分隔。 块名称与修饰符或元素与修饰符之间用双下划线__分隔。 命名一般使用小写字母。 单词之间可以使用-分隔。"}, {"id": "6844903828857290765", "title": "你不知道的 CSS 文档流技巧，让布局更简单", "desc": "看文章之前，先来看两个例子。这是我们在项目中最常见的项目布局方式。 案例一：多个容器按照相同间距水平排列。 看到这两个案例时，你可以先短暂的想想平时都是如何实现的，很多同学的答案应该是这样的。 效果我们是做到了，但是这里所有像素都是你自己固定计算的。 比如第一个例子中，父容器的…"}, {"id": "6966959546115981320", "title": "flex弹性盒模型学习总结", "desc": "flex弹性盒模型的学习笔记和总结，有待不断地进行补充和完善，介绍了一些基本内容以及相关的细节问题。"}, {"id": "6844903601479893005", "title": "CSS网格布局（Grid）完全教程", "desc": "CSS网格布局（Grid）是一套二维的页面布局系统，它的出现将完全颠覆页面布局的传统方式。创建本教程的目的是为了帮助您更好地理解和学习网格布局（Grid）。 网格容器 显示网格 轨道的最小最大尺寸 重复的网格轨道 定义网格间隙 用网格线编号定位项目 网格项目跨越行列 网格线命名…"}, {"id": "6901903789197197325", "title": "CSS——清除浮动所有方法总结", "desc": "一开始css的浮动，其本质是用来做一些文字混排效果的，但是后来被我们拿来做布局用，就出现了很多问题。 我们很多时候不方便给父盒子的高度，因为我们不清除有多少子盒子，有多少内容。经常的做法会让内容撑开父盒子的高度。 但是如果父盒子中有子盒子浮动了之后，就会影响到后面的盒子，因为浮…"}, {"id": "6844903560186953735", "title": "H5首评秒开方案探讨", "desc": "本文作者：蚂蚁金服高级无线开发专家bang阿里妹导读： 越来越多的APP内业务使用H5的方式实现，怎样让H5页面启动更快是很多人在探索的技术点，本文梳理了启动过程中的各个点，分别从前端和客户端角度去探"}, {"id": "6844903646581260296", "title": "form表单其实不是那么简单", "desc": "# Form表单你真的了解么？ ** 我相信作为一个前端开发，对于form表单或多或少都有一些了解；其实在html开始的阶段我们网页主要就是用来展示信息和提交表单的。如果你真正的了解form（这里指的是包括input、select、rank等），你会觉得它就像一个潘多拉魔盒你根…"}, {"id": "6844903831063494669", "title": "【CSS系列】命名千万条，BEM第一条", "desc": "没有太重视“命名”这个似乎不在技术范畴之内的东西，随着项目更新迭代变得庞大，维护起来欲哭无泪。尤其是在CSS中，一个高效的命名规范到底有多重要？ 之前看到过一种丑丑的命名（\"__\"和\"--\"）不以为然，这正是本文探讨的主题——BEM命名规范。 1. BEM简介 2. BEM命名…"}, {"id": "6844904046663303181", "title": "fixed 元素一定是相对视口定位的吗？", "desc": "fixed 元素一定是相对视口定位的吗？不一定。举一个例子，如果父元素 transform: scale(1) 了，子元素是 position: fixed。会发现，子元素是相对这个父元素定位的。 其实上面这个问题，牵扯到了包含块（containing block）的概念。那么…"}, {"id": "6971707391721078815", "title": "css揭秘 - 形状（二）", "desc": "这是css揭秘系列文章的第三篇，本篇主要介绍使用css可以实现的一些形状。包括切角效果、梯形标签页以及简单的饼图。"}, {"id": "6885504560664838152", "title": "CSS常用选择器都在这里了！！！！", "desc": "在css中{}之前的部分就是\"选择器\",\"选择器\"指明了{}中的”样式“的作用对象，也就是说该”样式“作用与网页中的哪些元素。 标签选择器顾名思义就是html代码中的标签。我们之前学习的html、body、h系列的标签、p、div、img等等我们都可以使用标签选择器来设置对应的…"}, {"id": "6844904003550052366", "title": "如何写一个 Figma 插件", "desc": "如果要用一句最简单的话来解释 Figma 是啥，它是一个可以同时在浏览器和本地客户端使用的 Sketch（设计工具)。 对于前端的我来说，它最吸引人的点就在于可以在浏览器端运行。因为之前也开发过两个 Sketch 插件： 但是介于之前 Sketch 插件是类似开发客户端的感觉，…"}, {"id": "6913729045997813768", "title": "switch开关实现", "desc": "使用checkbox来实现，勾选、未勾选对应开启、关闭状态，使用:checked选择器来控制开启状态下的样式显示。 appearance的用武之地（MDN链接），appearance英译外观、外貌，作用改变元素的UI。在MDN上我们可以看到有很多的属性值，注意到checkbox…"}, {"id": "6949953781471641631", "title": "比神奇女侠还神奇的 postcss", "desc": "postcss 是什么按 官网 上的介绍，它是一个 用 JavaScript 转换 CSS 的工具（A tool for transforming CSS with JavaScript） 。与之类似"}, {"id": "6844903830123970573", "title": "CSS 面试知识点合集", "desc": "specifying how HTML is presented to users. web pages. information. It processes the document in two stages: converts HTML and CSS into the …"}, {"id": "6992426479883649032", "title": "HTML与CSS、安全相关知识点", "desc": "HTML与CSS 介绍盒子模型 所有HTML元素可以看作盒子，在CSS中，\"box model\"这一术语是用来设计和布局时使用。 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边"}, {"id": "6844903614209605646", "title": "浅谈Flex布局的属性及使用", "desc": "Flex容器默认有两根轴：主轴（main axis）和侧轴（cross axis）。在默认情况下主轴是水平分布的，侧轴是垂直分布的，但可以通过flex-direction来改变主侧轴的分布方向。所以并不能说，水平分布的是主轴，垂直分布的是侧轴。 默认的情况下，Flex容器中的子…"}, {"id": "6992364742354403342", "title": "关于CSS知识点汇总 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 CSS Cascading Style Sheets 层叠样式表 引入CSS （1）行间样式 （2）页面级样式 （3）外部样式 2.css注"}, {"id": "6971316284717793288", "title": "css揭秘 - 形状（一）", "desc": "这是css揭秘系列文章的第二篇，本篇主要介绍使用css可以实现的一些形状。包括多自适应的椭圆、平行四边形以及菱形图片。"}, {"id": "6844903812977655821", "title": "你可能不知道的 CSS3 Animation", "desc": "目前 animation 有下面 9 种属性，其中第一个是后面属性的简写形式。 该属性用于指定 @keyframes 动画的名称。定义关键帧需要使用 @keyframes 规则。样式块语句中可以使用 from...to 结构，也可以使用百分比来定义。 如下面这段代码，它在动画开…"}, {"id": "6911858781043294222", "title": "蒲公英 · JELLY技术周刊 Vol.36: 你好 Hooks，再见 2020", "desc": "使用 CSS 构建布局时，如何做好短文本内容与长文本内容的兼容，是每位优秀前端工程师的基本修养，当清楚地知道文本长度变化是否会影响界面布局时，可以避免很多不必要的问题。 在 React 支持使用 Hooks 编写组件后，越来越多的同学已完全投入 Hooks 的怀抱，本文总结了五…"}, {"id": "6850037271417061383", "title": "使用内联的 CSS 变量技巧，提高灵巧布局效率！", "desc": "有些情况下，我需要用一种简单的方法来创建网格布局。 例如，每次我改变主意时，在不修改CSS的情况下快速画出五列网格。 在本文中，我们一起探索一些用例，并思考如果实现及使用它们。 在深入探讨这些概念之前，首先我们来回顾一下 CSS 变量的基础知识， 我们也可以将它称为“自定义属性…"}, {"id": "6931372123441233927", "title": "3 个最棒的最值得你去在产品中使用的 CSS Grid 功能", "desc": "Grid 最初是由 Microsoft 团队起草的，并于 2011 年在 IE 10 中落实的。经过近 9 年的发展，我们现在可以说，浏览器对 Grid 的支持已经变得足够好，这样我们可以安心在生产环境中中使用 Grid 了。 本篇文章我们主要讨论浏览器支持且使用频率最高的 3…"}, {"id": "6844903619385360397", "title": "编写可维护的JavaScript", "desc": "软件生命周期中80%的成本都消耗在了维护上；而且几乎所有的维护者都不是代码的直接开发人。如何让自己写的代码让别人阅读起来更高效？当然是写代码的时候注入一些规范。那么在Javascript中有哪些编程风格值得我们去注重呢？这篇文章将总结《编写可维护的JavaScript》里面的观…"}, {"id": "6963941148163473445", "title": "viewport-fit解决iphoneX的“刘海”问题", "desc": "前言 iphoneX的“刘海”为相机和其他组件留出了空间，同时在底部也留有可操作区域。其实对于 web 前端来说，刘海在绝大多数的场景下是可以不用处理的，因为 safari 或客户端（微信，手Q等）的"}, {"id": "6844903573155741710", "title": "纯 CSS 实现多行文字截断", "desc": "最近在做响应式系统设计的时候遇到需要对标题进行多行文字截取的效果，如下图： 看似十分简单的标题截断效果，但是竟然没有一个统一 CSS 属性实现标准，需要用到一些奇淫妙计来实现，"}, {"id": "6992223342673543204", "title": "常见CSS高频重点|八月更文挑战", "desc": "1. CSS选择器以及优先级 标签选择器、伪元素选择器：1 类选择器、属性选择器、伪类选择器：10 id选择器：100 内联样式：1000 注意： !important声明的样式优先级最高 优先级相同"}, {"id": "6993691193196576782", "title": "BFC到底是什么？", "desc": "什么是BFC BFC：全称 “Block Formatting Context” 即 “块级格式化上下文” 定义：是一个独立的模块，内部的元素不受外面的元素布局影响，也不会影响外面的元素布局 触发BF"}, {"id": "6996530242156232734", "title": "CSS Grid 网格布局", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 前言： 网格布局（Grid）是最强大的 CSS 布局方案。 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。 以前，只"}, {"id": "6844903587525427214", "title": "浏览器渲染引擎", "desc": "浏览器的内核中主要分为渲染引擎和 javascript 引擎，本篇主要围绕渲染引擎介绍一下浏览器的工作原理。 Mozilla/ 4. 0 (compatible; MSIE 7. 0; Windows NT 6. 0) Mozilla/ 5. 0 (Linux; Android…"}, {"id": "6844904071497777165", "title": "CSS知识点面试总结", "desc": "标准文档流中，竖直方向的margin不叠加，只取较大的值作为margin(水平方向的margin是可以叠加的，即水平方向没有塌陷现象)。 PS：如果不在标准流，比如盒子都浮动了，那么两个盒子之间是没有margin重叠的现象的。 margin这个属性，本质上描述的是兄弟和兄弟之间…"}, {"id": "6844903704080957447", "title": "解决canvas合成图片大小错误、模糊以及跨域的问题", "desc": "最近要做一个生成海报的h5, 原理就是用canvas的drawImageAPI把图片画出来，想着应该很简单，却发现里面有大坑。在填完坑后分享下解决方案，文章主要围绕以下两个问题来展开。 1. demo初试 2. canvas大小错误以及模糊 在浏览器的 window 对象中有一…"}, {"id": "6844903605850341390", "title": "react中使用swiper", "desc": "欢迎大家访问我的博客OECOM，与我一起探讨前端。 最近的react项目需要使用轮播图，自然而然的就想到了swiper，一直想通过npm安装的方式来使用，但是网上找了很多，资料很少，于是就暂时通过在index.html里直接引用swiper的js和css文件的方式来加载，下面来…"}, {"id": "6844903497532473352", "title": "TypeScript 中使用 CSS Modules", "desc": "相当长一段时间 CSS 总是在页面上作为一个全局的存在，以前这个『特性』影响还不算很大，命名上注意一点，比如使用 BEM 也能一定程度上解决问题。 但是随着 web 组件化的需求越来越强烈，CSS 的这种特性开始成为束缚开发者自由飞翔的绳索，每一个 CSS 类名都有可能产生意想…"}, {"id": "6951560370670534687", "title": "[CSS]还在用媒体查询？要不尝鲜下Container Queries", "desc": "我们通常使用媒体查询来创建响应式页面，不过，随着新提案@container查询的提出，我们可以不根据整个页面大小，而是组件所属容器的大小进行响应"}, {"id": "6986081274544979981", "title": "「HTML+CSS」--自定义加载动画【040】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为96px 相对定位 步骤2 利用span::before、span::after伪类元素，作为"}, {"id": "6981260939119034376", "title": "css3控制div无限旋转", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 少废话，上代码： div{ -webkit-transition-property: -webkit-transf"}, {"id": "6844904054917693453", "title": "《精通react/vue组件设计》之用纯css打造类materialUI的按钮点击动画并封装成react组件", "desc": "作为一个前端框架的重度使用者,在技术选型上也会非常注意其生态和完整性.笔者先后开发过基于vue,react,angular等框架的项目,碧如vue生态的elementUI, ant-design-vue, iView等成熟的UI框架, react生态的ant-design, m…"}, {"id": "6998305378849013768", "title": "CSS 自用学习笔记（三）", "desc": "动画相关属性 背景相关 background （可以所有背景属性） 推荐顺序： background-color，background-image，background-repeat，backgrou"}, {"id": "6998138180583030815", "title": "CSS ｜图片淡入淡出特效", "desc": "每天一个css小技巧，巩固自己的css基础知识，例子都是网上找的，尽可能的会把出处标记出来，没有标记的作者看到请联系我。。。目的只是为了借助这些例子学习巩固基础。谢谢，尊重原创，一起学习！ 原文 -〉"}, {"id": "6998119046822494238", "title": "懒加载与预加载", "desc": "一、懒加载 1. 什么是懒加载 懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种很好优化网页性能的方式。 2. 为什么要用懒加载 能提升用户的体验，等待时间很长，严重影响用户体验。 减少无效资"}, {"id": "6844903975792164872", "title": "面试官：请实现三栏布局，尽可能多的方式。", "desc": "在面试中我们经常会被问到一个简单的问题，那就是\"实现一个三栏布局，左右固定，中间自适应\"。这个问题就是考察知识点就是页面布局，我们是实际的项目开发中，也经常会遇到这个问题。其实我发现一个前端开发人员有一个通病，包括我自己也是，\"觉得CSS不是很重要，不需要深入的学习\"，这其实是…"}, {"id": "6844903729007689736", "title": "利用vw+rem实现移动web适配布局", "desc": "1em与当前元素的字体大小相同（更具体地说，一个大写字母M的宽度）。CSS样式被应用之前，浏览器给网页设置的默认基础字体大小是16像素，这意味着对一个元素来说1em的计算值默认为16像素。但是要小心—em单位是会继承父元素的字体大小，所以如果在父元素上设置了不同的字体大小，em…"}, {"id": "6969772662973268004", "title": "2D转换", "desc": "1. 2D 转换 2D 转换是改变标签在二维平面上的位置和形状 转换（transform）是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、变形、缩放。 移动： translate 旋转： "}, {"id": "6844904193833041934", "title": "深入理解 CSS 中的外边距折叠及 BFC", "desc": "作为一个前端工程师，在编写 CSS 时外边距折叠及 BFC 都是经常遇到的情况，今天就来做一下总结。 在 CSS 中，两个或者多个普通流中相邻盒子的边距在垂直方向上会发生折叠的这种现象叫做外边距折叠。外边距折叠分为父子外边距折叠及兄弟外边距折叠。 我们给 child 添加了 m…"}, {"id": "6989434512186802212", "title": "CSS 弹性布局 (display：Flex) 基础篇", "desc": "本文是我对弹性布局（display: flex）的一个学习笔记，也是我对自己最近几个月学习前端的一个小总结。"}, {"id": "6989169565485760543", "title": "CSS样式抽离之 extract-text-webpack-plugin 插件", "desc": "extract-text-webpack-plugin webpack4+ 版本 才能用 mini-css-extract-plugin 插件 ，这里是把所有的样式打包到一个css 文件中 1. 插件"}, {"id": "6844904085318008845", "title": "（16）CSS 拓展：① 浏览器兼容 | CSS", "desc": "前言： 什么是浏览器兼容问题？同一份代码，有的浏览器效果正常，有的不正常。 C 级兼容（IE7 以下）：能用。 首先以最大程度完善设计稿为基础，再考虑兼容性，不能盲目为了兼容问题而弃用方便简洁的新方法（如 HTML5、CSS3）；当然也不能用过新的技术方法使得兼容性过于低、实用…"}, {"id": "6976242166154657829", "title": "文字波浪特效 html+css", "desc": "这是我参与更文挑战的第19天 先看效果： clip-path描好效果会更好~ 原理： 就是两段文本重叠一起，底层的没颜色，上面层的有颜色，然后通过动画再通过clip-path属性截取上层的部分显示~ "}, {"id": "6930231387693776903", "title": "纯CSS实现3D效果的立方体", "desc": "给立方体的每个面设置绝对定位，长宽100%，然后设置背景为网格状。"}, {"id": "6844903498073505806", "title": "CSS实现空心三角指示箭头", "desc": "web开发中，三角形的日常应用，以三角形指示箭头最为常见，其用CSS来实现非常简单，熟悉了之后相比于引入SVG或是背景图片会是更好更灵活的选择。 而三角箭头一般而言，又分为两种，一种是视觉上没有边框的，我们叫做实心三角形；还有一种是视觉上有边框的，而三角箭头刨去边框的部分又要与…"}, {"id": "6975319039157469192", "title": "自定义浏览器滚动条样式（兼容chrome和firefox）", "desc": "这是我参与更文挑战的第15天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 问题描述 浏览器默认的滚动条样式太丑了，而"}, {"id": "6844903576368578574", "title": "简单CSS实现闪烁动画（+1白话讲解）", "desc": "提到闪烁动画，很多人可能会想起 <blink> 这个标签，亦或者是text-decoration: blink这个东西，但是这两者都有很大的局限性，身为\"专业\"前端开发者的我们怎么能满足于此呢？所以我们不得不去寻找一些其他的方法。"}, {"id": "6942186697727836174", "title": "你写的CSS为什么这么慢", "desc": "在前端开发的过程中，经常会看到浏览器在做一个Recalculate Style的任务。https://codepen.io/TGuoW/pen/GRNzeZv 在这个页面内点击按钮，录制profile，便会发现，仅仅给main元素增加了一个完全不影响样式的class，竟然会影响…"}, {"id": "6986505027053420551", "title": "关于css属性clear属性的一些理解", "desc": "这个属性更多的是用来清楚浮动元素的，其具有的属性词为none,left,right,both 首先如果一个盒子中右浮动元素，那么这个浮动元素的高度是不会传给父元素的，因而产生了高度塌陷 于是这个时候清"}, {"id": "6995749157918998558", "title": "CSS中specificity的研究（CSS选择器权重）", "desc": "什么是 specificity ？ 在CSS世界中，选择器是经常使用的工具。如果使用不同的选择器操纵同一个元素时，元素的样式到底该怎么生效呢？ CSS specificity 就是为了解决这类问题而诞"}, {"id": "6975734100455850015", "title": "CSS之居中方法整理", "desc": "一、行内元素居中 行内元素的居中比较简单，因为行内元素无法设置宽高，所以我们想让行内元素居中只需要给父元素设置样式即可。 1、水平居中 2、垂直居中 垂直居中只需要设置line-height为父容器的"}, {"id": "6969740319386501151", "title": "总结一下工作中常用的 CSS 属性", "desc": "在这里回忆总结一下工作中常用的 CSS 属性，并整理成表格： 文本 属性名 描述 font-size 设置文本大小 font-family 设置文本字体 font-style 设置文本样式 font-"}, {"id": "6917234004454293517", "title": "世界上第一个可用于React、Vue、纯HTML和CSS的可组合CSS动画工具包— AnimXYZ", "desc": "AnimXYZ是一个CSS动画库，用于为你的网站创建自定义CSS动画。是什么让AnimXYZ如此之好，它是可组合的，这意味着你可以组合和混合不同的动画来创建自己的高度可定制的CSS动画，而无需编写一个单一的关键帧。 例如，你可以通过编写 xyz = \"fade big up\" …"}, {"id": "6844903664297967630", "title": "使用webpack4打造自己的前端工作流", "desc": "webpack4发布已经有一段时间了，我在实践的过程中发现，很多项目配置在webpack3下工作正常，但是升级到webpack4直接就崩了，如果想要webpack4正常工作，很多插件也需要升级到新版。下面是我使用webpack4配置的一个学习案例，包含了日常开发的常用配置项，比…"}, {"id": "6961281156687855623", "title": "熟练使用CSS（一）--组合器与选择器", "desc": "熟练使用CSS（一）--选择器与选择器的组合 CSS的知识点比较多，我们挑选了其中比较常用的几个点来为大家介绍，希望可以帮助大家更好地理解CSS的使用。"}, {"id": "6951009210326843400", "title": "【知识梳理】rem 小记", "desc": "起因在对自己掌握的 css 知识进行梳理的时候，进行到移动端适配的模块时，对 rem 这个单位产生了好奇，不明白如此广泛使用的单位为何没有统一的标准，经常可以看到各大网站，在 html 中有各式各样 "}, {"id": "6997160407286677512", "title": "边框0.5px和解决1px的问题", "desc": "工作中遇到了一个产品需求，要求把列表分割线改成0.5px，直接写成border：0.5px solid #cccccc;是不符合规范的写法，会存在Android和IOS手机上的兼容问题，故，我们可以利"}, {"id": "6844903539379011592", "title": "利用FormData对象实现AJAX文件上传功能及后端实现", "desc": "包括HTML基础设置、CSS界面优化、JS利用FormData对象和AJAX进行上传、后端接收文件并存储到指定路径以及删除文件操作。 因此，传输完整的文件数据需要multipart/form-data属性。 保存了用户指定的文件的名称。 设置input类型为file。 可多选，…"}, {"id": "6844903700725661709", "title": "HTML+CSS+JAVASCRIPT 高仿低配网页版网易云音乐播放器", "desc": "由于我是自学的，没有那么多规矩，我这个人看到是我感兴趣的，我立马就会去做，这个播放器也不例外。 因为涉及到跨域问题。暂时我前台这边又没有办法跨域，所以参考了网上的代码，写个PHP做代理 （2018-09-14更新：现在代码已改为Nodejs做代理服务），这样就不存在跨域问题了。"}, {"id": "6994013341198843934", "title": "CSS cursor 属性", "desc": "用到 cursor 属性时总是忘记，在这里记录一下 cursor:auto cursor:crosshair cursor:default cursor:text cursor:e-resize cu"}, {"id": "6927244208809984007", "title": "30 个案例教你用纯 CSS 实现常见的几何图形｜牛气冲天新年征文", "desc": "1. 三角形 我们知道，如果设置一个盒子的宽高为 0，盒子就会变成一个点。此时再给上下左右四个 border 一定的宽度和不同的颜色，那么单纯由 border 填充的盒子看起来是这样的： 上面两种方法效果一样，接着根据实际情况隐藏其中三个三角形即可。我们这里只想要显示底下的三角…"}, {"id": "6946106237758996488", "title": "什么？CSS还有这种写法？", "desc": "css背景介绍CSS(Cascading Style Sheets), 前端DSL语言，是当下多元化时代的必不可缺的产物，早在CSS未出现之前，只有html元素标签，每个html元素都会有自己独立的样"}, {"id": "6896487557497323534", "title": "CSS-animation-按钮呼吸态", "desc": "写在前面 笔者最近面试恰好碰到此题，以往做这类的需求往往都是问设计师要两张呼吸前后的图片，更或者直接GIF完事，真要开始纯用CSS3的一时半会摸不着头脑，于是乎自己准备认真撸上一发按钮呼吸，看看有什么"}, {"id": "6925273471421251598", "title": "vue3使用css实现主题切换", "desc": "在开发自己的小项目过程中，临时起意想做一个光暗主题切换，于是就开始各种查资料捣鼓，看看 less 怎么办，再找找 scss 怎么整。偶然发现知乎上有一篇对国外大神文章的翻译，介绍了使用 css 实现的主题切换。于是在自己的项目中动手试一试~"}, {"id": "6844903633742462983", "title": "webpack 4 ：从0配置到项目搭建", "desc": "webpack4发布以来，我写项目都是用脚手架，即使再简单的项目，真的是really shame。。虽然道听途说了很多 webpack4 的特性，却没有尝试过，因为它给人的感觉就是，em...很难。但是今天我从最简单的部分开始，一点点搭建起一个项目。 而 webpack4 的 …"}, {"id": "6875262717717020685", "title": "如何用CSS实现一个带尖角的框？", "desc": "答案是使用两个三角形，一个是阴影的颜色，一个是框内的颜色，然后第一个三角形比第二个三角形的绝对定位高出边框宽度个像素。"}, {"id": "6844903633021075469", "title": "移动端网页性能优化自查表", "desc": "我是一个莫得感情的代码搬运工，每周会更新1至2篇前端相关的文章，有兴趣的老铁可以扫描下面的二维码关注或者直接微信搜索前端补习班关注。"}, {"id": "6844904165395677191", "title": "CSS中的混合模式，制作高级特效的必备技巧", "desc": "在CSS中，有两个属性负责混合。 mix-blend-mode用于混合DOM元素，background-blend-mode用于组合多个CSS背景。 我们以一个基本的例子来看一下它是如何工作的。 我的标题上方有一个圆圈。 我要做的是将文本与圆混合。 为文本元素添加了mix-bl…"}, {"id": "6953510109125279751", "title": "异卵双胞胎relative 与 absolute之间的较量", "desc": "浅谈 relative 与 absolute relative 与 absolute 属于 position 中的属性，positon除了这两种属性外，还有另外两种属性分别是 static 和 fix"}, {"id": "6844903950936702989", "title": "css3实战汇总（附源码）", "desc": "本文是继上一篇文章用css3实现惊艳面试官的背景即背景动画（高级附源码）的续篇也是本人最后一篇介绍css3技巧的文章，因为css这块知识难点不是很多，更多的在于去熟悉css3的新特性和基础理论知识。所以写这篇文章的目的一方面是对自己工作中一些css高级技巧的总结，另一方面也是希…"}, {"id": "6844903625077030925", "title": "webpack 从入门到放弃(一)", "desc": "为什么使用 webpack，这应该是和前端的发展有关系的，我认为，webpack 是前端发展到一定阶段的必然产物（貌似是一句废话）。 因为计算机网络的飞速发展，导致 web 前端也在迅猛发展。最初的实践方案已经不能满足我们的需求，于是，越来越多的新技术新思想新框架孕育而生，比如…"}, {"id": "6844903703929946125", "title": "最近在 Vue 项目中用到的一些小技巧，或许有用", "desc": "在最近的 Vue 项目中，为了完成需求使用了一些小技巧，做个笔记，或许也能帮到道友。 在开发过程中，我们经常需要引入各种文件，如图片、CSS、JS等，为了避免写很长的相对路径（../），我们可以为不同的目录配置一个别名。 这个需求，怎么说呢，反正就是需求，就想办法实现吧。 就是…"}, {"id": "6957521363326205982", "title": "CSS实战笔记(十二) 图片等比例缩放", "desc": "在网页展示图片是一个很常见的需求，大多数情况下，展示区域的大小是固定的，原图片的大小也是固定的 如果展示区域的宽高和原图片的宽高不等比例，那么在默认情况下很可能会压缩或拉伸图片以适应区域大小"}, {"id": "6867054761741549576", "title": "[译] Javascript 应用中引入 CSS 的几种方式", "desc": "欢迎你踏上了一条在前端世界中饱含争议的道路！相信大部分读者会在关于如何在 JavaScript 应用中处理 CSS 这一话题上产生共鸣。 文章伊始，先声明一句：无论是在基于 Vue、Angular 还是 React 构建的应用，针对如何处理 CSS，世界上并没有任何放之四海而皆…"}, {"id": "6844903811400597512", "title": "一些有趣的 CSS 魔法和布局（下）（结尾有岗位内推哦~）", "desc": "上一篇 一些有趣的 CSS 魔法和布局（上） 中，我们聊了一些有趣且实用的布局。今天，将呈现一些 CSS 带来的魔法特效，有部分特效可以帮我们省去不少工作量。 在以前遇到这个需求的时候，我们可能会想到用 JS 来操作内容的显式与否。现在，CSS3 的 transition 可以…"}, {"id": "6994352704189366302", "title": "CSS之linear-gradient（渐变、切角）", "desc": "linear-gradient有什么用？颜色渐变。从这个例子可以看出该属性最直接的效果是让容器渐变颜色。那么它接受的参数有什么呢？又有什么技巧呢？切角。切角的思路其实很简单，将其中一个颜色变为透明即可"}, {"id": "6973177746096979975", "title": "浅析CSS样式权重和优先级", "desc": "一、什么是优先级： 即通过优先级来判断如何在页面上显示这些样式。优先级是基于不同种类的选择器组成的匹配规则。 关于CSS的选择器可以看这篇《一次性搞懂CSS选择器》，这里就不重复讲啦。 二、优先级是怎"}, {"id": "6859890348089409544", "title": "CSS到底会不会阻塞页面渲染", "desc": "可能大家都知道，js执行会阻塞DOM树的解析和渲染，那么css加载会阻塞DOM树的解析和渲染吗？接下来，我们就一起来分析一下。 那么为什么会出现上面的现象呢？我们从浏览器的渲染过程来解析下。 不同的浏览器使用的内核不同，所以他们的渲染过程也是不一样的。目前主要有两个 根据Ren…"}, {"id": "6844903890161238030", "title": "温故而知我不懂的CSS", "desc": "流：“流”实际上是 CSS世界中的一种基本的定位和布局机制，可以理解为现实世界的一套物理规则，“流”跟现实世界的“水流”有异曲同工的表现。 特殊布局与流的破坏。如果全部都是以默认的“流”来渲染，我们只能实现类似 W3C 那样的文档网页，但是，实际的网页是有很多复杂的布局的，怎么…"}, {"id": "6985541311298273317", "title": "《图解CSS》CSS简介", "desc": "在学习一门新的知识之前，我们需要先知道，它是什么，为什么使用，和怎么使用，也就是常说的3W（what， why，how）。 CSS是什么？ CSS全称为Cascading Style Sheets，中"}, {"id": "6850037281828143117", "title": "Web 技术：CSS最小和最大(宽度/高度)知识点及优缺点", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 通常，我们希望限制元素相对于其父元素的宽度，同时使其具有动态性。因此，有一个基础宽度或高度的能力，使其扩展的基础上，可用的空间。比如说，我们有一个按钮，它的宽度应该是最小的，不应该低于它的宽度。这就是最大和最小…"}, {"id": "6844903854660665358", "title": "[译] 从原型图到成品：步步深入 CSS 布局", "desc": "对很多人来说，创建布局是前端开发领域中最难啃的骨头之一。 你肯定经历过耗费数个小时，换着花样地尝试所有可能起作用的 CSS 属性、一遍遍地从 Stack Overflow 上复制粘贴代码，寄希望于误打误撞地赌中那个能实现预期效果的魔幻组合。 如果你的惯用策略就是按部就班地组合布…"}, {"id": "6844904019689734151", "title": "移动端长按保存、取消长按保存图片", "desc": "有时候会遇到在移动端长按保存图片的功能，微信打开h5页面可以实现，那么普通浏览器可能效果不一。 safari浏览器在打开的时候效果不尽如人意，比如做一个保存二维码功能，我的iphone 11长按下图毫无反应。 -webkit-touch-callout。 可以看到safari可…"}, {"id": "6844904082226987021", "title": "全面分析总结BFC原理及实践", "desc": "经常在面试中被问到“如何清除浮动？”、“为什么 overflow: hidden 可以清除浮动？”等等比较基础的问题。虽然这些题目案在各种写面试题的文章中都有提供答案，但这种教科书式的问答肯定不是我们的目的，与其记住答案不如彻底掌握其核心原理——块级格式化上下文（BFC）。 这…"}, {"id": "6956481119361433614", "title": "CSS In JS 的几种方式和设置项目主题等基操实操", "desc": "CSS In JS 的几种方式和设置项目主题等基操实操 以下将从迄今主要CSS In JS库主流的三个库进行介绍 styled-components 33.4k star 主要 radium 7.4k"}, {"id": "6996891176599027720", "title": "Css 第三天", "desc": "这是我参与8月更文挑战的第5天，活动详情查看： 8月更文挑战 五、背景 1.背景颜色 2.背景图片 3.背景图片的平铺 4.背景图片的定位 5.背景图片的尺寸 6.背景的简写方式 六、渐变 1.线性渐"}, {"id": "6844903777888108557", "title": "【CSS】Grid 布局总结", "desc": "1. 前言 grid 布局是 css 中的一种新的布局方式，对盒子和盒子内容的位置及尺寸有很强的控制能力。与 flex 不同，flex 着重于单轴，而 grid 适应于多轴，下面就来做个简单的介绍。 2. 基本概念 设置 display: grid; 的元素称为容器，它的直接子…"}, {"id": "6963991572702560287", "title": "【必知必会-经典CSS布局系列】=＞  让一个元素水平垂直居中，到底有多少种方案？", "desc": "一、让一个元素水平垂直居中，到底有多少种方案？ 水平居中 对于行内元素: text-align: center; 块级元素 对于确定宽度的块级元素： width和margin实现。margin: 0 "}, {"id": "6844904030469095432", "title": "探索CSS单行文字居中，多行文字居左的实现方式", "desc": "琢磨了一下，当时我还真按照产品经理的逻辑，通过js判断一下文字的高度，如果超过一行，就添加一个类名，而且这样的文字很多地方都有，所以还做了遍历，还有最重要的一点是关于方法执行的时机，有可能刚加载的时候高度还获取不到（当时好像还用了定时器，还造成了先居中随后居左跳动的现象）...…"}, {"id": "6989059501596868615", "title": "纯css实现三级导航栏", "desc": "纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯css实现三级导航栏纯"}, {"id": "6978860907908562951", "title": "纯CSS实现随机翻牌效果之 steps 妙用", "desc": "翻牌是大家很熟悉的一个互动效果，通常在抽奖活动中出现。那么不借助 JavaScript 是否能够实现随机翻牌效果？翻牌效果肯定是没有问题，CSS 没有随机函数，今天就来分享一个另类的交互实现思路。"}, {"id": "6961060761976832008", "title": "五.块元素、行内元素、行内块元素", "desc": "1.块元素的特性block 独占一行； 宽度缺省是它父级元素的100%，除非设定一个宽度； 高度、行高、外边距、内边距都可以设置 可以容纳其他内联元素或者其他块元素，一般用于配合css完成网页的基本布"}, {"id": "7000009814155722782", "title": "一文带你掌握前端CSS3的新特性", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 CSS3的新特性 属性选择器 选择符 简介 E[attr] 选择具有attr属性的E元素 E[attr='val'] 选择具有attr属性"}, {"id": "6953857255846445093", "title": "[这个我能做]掌握几个技巧，轻松实现苹果产品页面效果", "desc": "苹果春季发布会也可以说是苹果前端发布会，如何写出如此炫酷的产品页面？作者对中间经常用到的方法进行了概括，同时分享了一些相关的文章。"}, {"id": "6992627835995160612", "title": "惊艳的无限循环加载动画｜8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "6997241964932382734", "title": "img标签的cover+放大效果", "desc": "img的cover效果+放大效果!vue-photo-preview实现图片放大功能,object-fit属性让图片保持原有尺寸比例展示,超出部分剪切."}, {"id": "6998746659932864548", "title": "【自种树自乘凉】Flexbox 弹性布局", "desc": "CSS3 中的 Flexbox 生来就是为了布局而生的，使用它能使许多布局布局变得简单。典型的三栏式布局、垂直水平居中布局，使用的是传统的浮动法、定位法，代码相对复杂难懂。"}, {"id": "6994244258584592397", "title": "【译】使用Checkbox Hack技术可以做的事", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 本文由bigo前端翻译小组翻译，原文链接：The “Checkbox Hack” (and "}, {"id": "7005942800148693022", "title": "CSS篇02-什么是BFC？", "desc": "一. 什么是BFC？ BFC的全称是Block Formatting Context，即块级格式化上下文。 格式化上下文是元素所处的一个自带一套布局规则的环境，这个环境决定了元素如何进行定位，如何与其"}, {"id": "7001313023621070861", "title": "【动画消消乐｜CSS】078.单span标签实现自定义简易过渡动画", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度为8px 高度为48px 相对定位 背景色"}, {"id": "6909618260581777416", "title": "拿到 UI 时，前端人该如何思考？", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 经常有人私信我，小智这个设计图用 CSS 要怎么布局呀，这个按钮要怎么画的。所以今天，在这篇文章我们来介绍一些新的布局的方法，希望对智米们有些用处。 我通常做的第…"}, {"id": "6999412815547072520", "title": "抽屉动画", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 背景 抽屉动画：抽屉动画使用使用非常广泛，但最主流的还是运用于隐藏/展示侧边菜单栏。 桌面端运用逻辑：左侧为操作菜单，默认不显示。"}, {"id": "7002555007253872654", "title": "使用 HTML、CSS 的新拟态动画", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 前言 效果图 我在下面分享了有关我如何进行此设计的完整教程。希望下面的教程能帮到你。 为此，首先，你必须创建一个 HTML 文件。 第 1"}, {"id": "6970238117714329637", "title": "CSS 常用布局及解决方案", "desc": "CSS 常用布局包括元素的水平、垂直居中，单栏布局、三栏布局等，本文将结合具体 demo 讲解每种布局的实现方案及相关要点。"}, {"id": "6844903633708908557", "title": "如何机智地回答浏览器兼容性问题", "desc": "有过面试经验的同学应该都被问过浏览器兼容性的问题，对于面试官的问题，常常猝不及防，因为通常他们都是这么问的。\"来谈谈浏览器兼容的问题吧\"，\"你对浏览器的兼容性有了解过吗\"，那么如何才是我们正确回答这个问题的姿势呢。 在CSS3还没有成为真正的标准时，浏览器厂商就开始支持这些属性…"}, {"id": "6950580963638738974", "title": "H5项目适配系统深色模式方案", "desc": "H5项目适配深色模式方案： 声明 color-scheme， 通过 CSS 媒体查询根据不同模式采用不同的样式， 利用picture+source标签，设置不同模式下的图片 url， Js监听模式变化"}, {"id": "6997968989859086373", "title": "浅谈 CSS3 新特性：背景&渐变", "desc": "CSS3中，关于背景（background）的新增属性和渐变函数（gradient），看看提供了哪些新背景元素控制和多种渐变效果的实现。"}, {"id": "6844904179064897544", "title": "学会这些CSS，休想让我切图！！！", "desc": "标题开个玩笑，实际上CSS3有许多亮眼的特性，比如阴影shadow、动画animation、形变transform、渐变gradient、滤镜filter等，合理运用这些特性，可以实现许多高大上的效果。如果觉得有用请点个赞或者收藏。 利用border-color支持transp…"}, {"id": "6908521872577527822", "title": "content-visibility——只需一行CSS代码，让长列表网页的渲染性能提升几倍以上！", "desc": "长列表网页相信大多数开发者都遇到过，在DOM元素过多的情况下，浏览器渲染会很慢，非常影响用户体验。 因此我们会经常采用虚拟滚动、分页、上拉加载更多等不同的方式来进行优化，这些方式的思想都是一样的，都是只渲染可见区域，等用户需要时再加载更多的内容。而以上的方式无论哪种，都需要写大…"}, {"id": "6986921642156883976", "title": "CSS布局高度始终为宽度的一半", "desc": "最近在准备面试，刷了一些大厂的真题，经常出现关于布局的一个高频问题，“使用css实现如何让div高度始终为宽度的一半？” 下面看看有哪几种实现方式，其每种方法优缺点如何： 第一种：vw单位 html代"}, {"id": "6995469262525579300", "title": "【前端--CSS】知识点（九）—— 给男朋友总结的CSS知识点（三）", "desc": "每天回顾几个知识点，在平时代码中写起来会更加得心应手。大家继续努力呀，每天一小步，工资一大步~~~~"}, {"id": "6886770985060532231", "title": "千万别小瞧九宫格 一道题就能让候选人原形毕露！", "desc": "据不完全统计(其实就统计了自己身边的朋友和同事)，在刨除抖音或快手这一类短视频 APP 后，每天在手机上花费时间最长的就是刷微博和逛朋友圈。 它有一个高大上的名字：九宫格。 顾名思义，九宫格通常为如图这种三行三列的布局。 它在移动端的运用十分的广泛，而且不仅仅是在移动端的运用，…"}, {"id": "6844903865490341896", "title": "浅谈line-height和vertical-align", "desc": "1. 单行文本占据的高度 2. 图片下面的空隙 3. 图文对齐问题 4. 矩形块对齐异常 上例中，vertical-align:1.5时，标题和文字显示正常；其他两个值时，标题和文字却挤在了一起。 分析：继承的差别，line-height为数值时，所有子元素继承的都是这个值；而…"}, {"id": "6844903557112528904", "title": "一个简单的CSS圆形缩放动画", "desc": "最近在做公司的登录页，UE同学希望第三方登录的图标在hover的时候有一个圆形的缩放效果（原话是波纹效果-_-||），效果参考腾讯新闻和网易新闻的分享按钮。 外层的a标签用于整体容器和跳转，内层的i标签使用伪元素::before和::after分别作为背景色和前景色，这两个伪元…"}, {"id": "6844903616403210254", "title": "电视机顶盒web开发总结，避免踩坑", "desc": "开发工具：WebStrom。它的Tools>Deployment可以配置连接远程服务器。随时上传代码。 开发中用到的技术：JQuery + Sass。 能用 HTML + CSS 呈现的东西，就不要用 JS 去动态控制。 避免使用“焦点”事件去触发非必要的操作。 当某段 JS …"}, {"id": "6844903519074385934", "title": "为什么CSS Grid比Bootstrap更适合布局", "desc": "CSS Grid是一种全新的创建布局方式，这是有史以来第一次合适的布局系统，并且他是浏览器原生的，他给我们带来了很多好处。 当你和当今最流行的Bootstrap框架相比，grid的好处变的尤为清晰，您不仅可以创建在以前在不引入JavaScript的情况下无法实现的布局，而且您的…"}, {"id": "6844903591388381191", "title": "前端性能优化之浏览器渲染优化 —— 打造60FPS页面", "desc": "前言 本文整理自：developers.google.cn 及 高性能JavaScript，再加上了一些个人对其中提到的知识点的理解与补充。前端性能优化涉及很多方面，本文仅针对高性能渲染进行分析。"}, {"id": "6850418109522640910", "title": "移动端1px像素问题的根本原因 | 优质解决方案", "desc": "发现这个问题是因为验收过程中被设计小伙伴吐槽在不同手机设备下同样是1px宽度的border却显示不同宽度。 在和设计小伙伴一番沟（zheng）通（bian）之后，我陷入了沉思并且提出了以下问题。 要解答上述的问题，首先我们需要的就是先理清楚相关的概念。 px其实是pixels的…"}, {"id": "6844903734854565901", "title": "10月11月写的十几篇CSS文章综述", "desc": "1. CSS :visited伪类选择器隐秘往事回忆录 主要介绍CSS :visited伪类选择器，由于安全方面的限制，很多你以为可以使用的CSS属性，在:visited这里都是不能使用的，当然，很多很多其他怪异的特性。如有兴趣，可以点击这里阅读原文。 2. CSS scrol…"}, {"id": "6907899935992545293", "title": "CSS display 属性必知必会", "desc": "display 属性，对前端同学来说都不会陌生。几年前， “display 的 block、inline、inline-block 有什么区别？” 这道面试题应当是面试必问的了。后来常用的属性又增加了 “flex” 弹性盒子。不管对前端新手还是大神，这个属性都是最为简单、基础、…"}, {"id": "6844904078888140808", "title": "大前端之路-快速入门css布局", "desc": "适用前端初学者，尤其是移动端转大前端，平时工作weex和rn 为主，但迟迟找不到css布局感觉的。读了这篇文章应该很快就能上手工作了。介绍的东西都是平时移动端开发中常见的。有兴趣的可以再根据文中的内容自行拓展。 w3cSchool真的是垃圾，你看那个css字典，看完了也是找不到…"}, {"id": "6922281133228949517", "title": "textarea自适应实现", "desc": "一、背景介绍在一个老项目中，需要使用到texarea组件，项目久远且庞大，默认的texarea的样式出不来，在一顿查找之后，并没有找到样式出不来的原因，能力和时间都有限，决定单独给texarea写样式"}, {"id": "6844903721546055693", "title": "从0到1实现VueUI库思路", "desc": "UI 库是很庞大的一个项目，如果个人开发，会很占用我的业余时间，所以我想到了组队，便在掘金发布一个这样的事情，很快便召集了20多个前端加入进来。 这么多人加入，怎么样的流程管理能保证项目有效进行，让他们按时按量完成任务，最后保证进度，此时我采取了现在很流行的 scrum 敏捷模…"}, {"id": "6844904041634349063", "title": "动态条漫实战", "desc": "所有动画都放在时间轴上按照先按照滑动的顺序移动变化。 获取龙骨资源、并创建dragonBones实例对象。将龙骨场景对象添加至画布 物件退场需要与背景反方向运动，造成错落感。或顺方向退场，避免导致认为物品或人与背景不分离"}, {"id": "6844903545737592845", "title": "CSS经典布局之Sticky footer布局", "desc": "我们常见的网页布局方式一般分为header（页头）部分,content（内容区）部分和footer（页脚）部分。当页头区和内容区的内容较少时，页脚区不是随着内容区排布而是始终显示在屏幕的最下方。当内容区的内容较多时，页脚能随着文档流撑开始终显示在页面的最下方。这就是传说中的St…"}, {"id": "6935677483672928287", "title": "Web 帧动画解决方案 - lottie-web源码剖析", "desc": "Lottie 是一个复杂帧动画的解决方案，它提供了一套从设计师使用 AE（Adobe After Effects）到各端开发者实现动画的工具流。在设计师通过 AE 完成动画后，可以使用 AE 的扩展程序 Bodymovin 导出一份 JSON 格式的动画数据，然后开发同学可以通…"}, {"id": "6844903598871019528", "title": "带css样式的console.log() ，进来了解一下", "desc": "想必你一定打开过百度首页，按过F12，如果那样，你一定了解百度也会觊觎你的才华，毕竟常打开控制台的毕竟多数是程序猿嘛。 7.console.assert(false, \"我们好像在哪儿见过\")-----判断第一个参数是否为真，false的话抛出异常并且在控制台输出相应信息。 大…"}, {"id": "6998414499321479175", "title": "Flex布局—语法", "desc": "布局一直是css的重点知识 flex布局更是近几年流行的布局方式 通过此篇文章 可以迅速掌握flex布局的方式"}, {"id": "6985541533105651719", "title": "《图解CSS》盒子模型", "desc": "盒子模型 在HTML文档中，每个元素都会在页面上生成一个盒子。因此，HTML页面实际上就是由一堆盒子组成的。默认情况下，每个盒子的边框不可见，背景也是透明的。 每个盒子由4部分构成: 外边距、边框、内"}, {"id": "6844903889913774087", "title": "翻译：使用PurgeCSS删除未使用的CSS", "desc": "为了提高英文水平，尝试着翻译一些英文技术文章，首先就从这个Vue的小技巧文章开始，目前英文版一共22篇。计划用时2~3个月翻译完成。 我们可以用不同的方式处理Web性能，其中之一就是删除我们在应用程序中不使用的所有JS和CSS。 就CSS而言，当我们使用Bootstrap、Bu…"}, {"id": "6979937037810040862", "title": "CSS::marker让文字序号不再呆板", "desc": "本文介绍CSS新增的伪元素:marker,它可以改变文字序号样式。 什么是::marker ::marker是在CSS Lists Module Level 3提出，于CSS Pseudo-Eleme"}, {"id": "6974662995645300767", "title": "css揭秘 - 结构与布局（一）", "desc": "这是css揭秘系列文章的第十篇，本篇主要介绍使用css可以实现的结构与布局。包括自适应内部元素、根据兄弟元素的数量设置样式等。"}, {"id": "6999442216431124516", "title": "webpack如何打包CSS样式资源", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 处理css都是用的loader来进行，具体使用如下： 1、处理CSS css-loader：识别import 和 url() 比如 imp"}, {"id": "6965882401117437982", "title": "flex布局学习", "desc": "flex布局学习 一、flex布局原理 flex: flexible box的缩写，意为弹性布局，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。 当我们为父盒子设为flex布局"}, {"id": "6972166381299040286", "title": "css揭秘 - 视觉效果（一）", "desc": "这是css揭秘系列文章的第四篇，本篇主要介绍使用css可以实现的一些视觉效果。包括单侧投影、不规则投影以及染色效果。"}, {"id": "6937336524543361031", "title": "[译] 5w 字的 CSS 的 @property 小结 —— 你说把它用在动画上，会咋样？｜技术点评", "desc": "它是一个新的 CSS 功能，能够为我们提供强劲的能力！我可不是说笑的哈，它能够解锁 CSS 的一些功能，让我们能够完成一些以前没法做到的事情。 尽管有关 @property 的内容都令我们很是兴奋，但也许最有趣的是，它为我们提供了一种为自定义 CSS 属性指定类型的方法。类型能…"}, {"id": "6844903799929176072", "title": "那些年让我们头疼的CSS3动画", "desc": "这是笔者整理的个人在CSS3动画上遇到的问题，全部都是笔者个人的经验，以及解决方案，并不相信网上会有重复的文章。大家可以点进每个小栏目的codeplay去地直观feel一下。 常见错误一：动画做完就disappear了！喂喂喂！没让你消失啊。code play~ 这个应该是an…"}, {"id": "6862315902928044045", "title": "[译]content-visibility: 一个可以提高渲染性能的css属性", "desc": "通过跳过屏幕外的内容渲染来缩短初始加载时间在Chromium85中，content-visibility属性可能是在提高页面加载性能方面最具影响力的新CSS属性之一。因为content-visibil"}, {"id": "6994349673238495269", "title": "PostCss、Webpack中的file-loader、url-loader、asset module type", "desc": "引言：浏览器的兼容性，我们这里的兼容性是指对CSS、JS的兼容性，但是现在前端已经非常工程化，比如css可以用autoprefixer来给浏览器加前缀，就不用我们手动添加，但是这也会导致一个问题，我可"}, {"id": "6958446786918744095", "title": "水平垂直居中和盒子塌陷", "desc": "前言 最近已经结束了项目的学习，因为里实习的时间越来越近，我也开始看一些面试题，这次主要是学习CSS方面的知识，分享一些水平垂直居中和盒子塌陷内容 正文 盒子塌陷（第一种情况） html代码 css代"}, {"id": "6844903849510043661", "title": "[知其所以然]探究Flex盒子的‘’弹性‘’", "desc": "我们使用Flexbox 实现垂直水平居中、自适应容器宽度乐此不疲，因为确确实实很方便。可以简便、完整、响应式地实现各种页面布局，目前已得到所有现代浏览器的支持。但Flex属性如何计算呢？ Flex是Flexible Box的缩写，翻译成中文就是“弹性盒子”，用来为盒状模型提供最…"}, {"id": "6850037258356162573", "title": "你不知道的CSS(上)", "desc": "编写CSS样式时，其实有很多技巧可以节省HTML元素和让CSS更加的DRY，在这跟大家分享下。 文章将大量举各种示例，让同学们能更加清楚CSS的魅力所在。 文章将持续输出，增加一些新奇的或者唯美的示例。。。 半透明边框相信很多前端小伙伴都经常遇到过，UI设计师也经常性设计出这类…"}, {"id": "6844903635751534605", "title": "前端实现弹幕效果的方法总结(包含css3和canvas的实现方式)", "desc": "之前在一个移动端的抽奖页面中，在抽奖结果的展示窗口需要弹幕轮播显示，之前踩过一些小坑，现在总结一下前端弹幕效果的实现方式。 1. css3实现乞丐版的弹幕 其中如果I）中和II）中的属性发生变化会发生reflow(回流)，如果仅仅III）中的属性发生改变，只会发生repaint…"}, {"id": "6844903552431685639", "title": "使用 CSS 追踪用户", "desc": "点击 这里 你可以查看该仓库的一个 demo。index.html 实践了的上述的方法，访问 results.php 可以查看结果 此外，分辨率监测还不是特别的准确，因为目前只能监测最常用的屏幕宽度。最后还想说的是，监测用户实际屏幕的宽度并没有想象中的那么简单，因为 CSS 监…"}, {"id": "6844903687601520647", "title": " 浏览器内核渲染：重建引擎", "desc": "在 BlinkOn9 会议中，Google Blink 团队开发者 Philip Rogers 与 Stefan Zager 进行了《Blink Rendering - Rebuilding the Engine Mid-Flight》分享，旨在介绍 Blink 渲染的基本原理…"}, {"id": "6992510224842096677", "title": "CSS Grid网格布局", "desc": "概念 网格布局由容器和子元素组成。 容器(container)：通过设置 display 属性的值为 grid或 inline-grid将其定义为弹性容器。 子元素(item)：容器中的每个单元称为子"}, {"id": "6919059789411123214", "title": "BFC", "desc": "BFC(Block formatting context)，块级格式化上下文。 1、具备BFC特性的元素，即独立的渲染区域，或者看成是一个容器，容器内的不会影响到外面的容器。 3、清除浮动。 在开发过程中，我们会遇到需要清楚浮动的操作，不管用什么方式，其实都是基于BFC的基础。…"}, {"id": "6844903965746790413", "title": "忘掉基本的css, 使用全新的库替代", "desc": "开发了这么久的项目，每天重复的 margin , padding , background 重复了一遍又一遍， 自从使用了基础样式库 assembly-css后(下面统一称为基础库)，几乎可以完全的避免了一遍一遍的基础样式。 每次写页面, 你要有样式， 总要用class类来连接…"}, {"id": "6966135385701220382", "title": "CSS | 属性知识 | Transition", "desc": "Transition 1. transition是什么? 中文:过渡;转变;变革;变迁 2. transition有什么用? 作用: 实现过渡效果 (元素从属性从一个值的样式变为另一个值的样式) 语法"}, {"id": "6963872975892250661", "title": "【夯实基础--CSS】=＞  字体样式（font）、外观属性(行高)", "desc": "CSS字体样式 font字体 「1. font-size」 font-size属性用于设置字号(字体大小) 谷歌浏览器默认的文字大小为16px 不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明"}, {"id": "6883759797338898439", "title": "CSS 全局变量的使用", "desc": "为了统一页面风格在编写CSS样式文件时经常会大量复用相同的颜色或者字号，加重开发工作量的同时也不利于后期的维护，所以需要用到CSS全局变量。 CSS全局变量的声明是在变量名称前加两个中横线--。 上述代码中，body选择器中声明了Color和BackGround两个变量。而使用…"}, {"id": "6977746620947365902", "title": "开始你的第一个动画", "desc": "这是我参与更文挑战的第17天，活动详情查看 更文挑战 主要对动画做了一个入门的介绍，如果是初学者可以通过这篇文章快速了动画，同时也可以当做一个开发指南，在忘记动画的某些用法的时，作为参考。"}, {"id": "6844903590268502030", "title": "70个老司机技巧教你更好的进行CSS编程", "desc": "CSS 并不总是容易处理。 在你的能力和经验不够的时候，CSS编程会成为一个噩梦，特别是你不确定为页面元素中选择哪种选择器的时候。使用一个不常见的CSS属性以实现更好的语义化，没有比这个方法更好用的更简单的的实现减少代码复杂度的了。"}, {"id": "6844903615816007693", "title": "[译] Font-size：一个意外复杂的 CSS 属性", "desc": "这可能是每一个写过 CSS 的人都知道的属性。它随处可见。 但它也十分的复杂。 我曾经也这么认为，直到我开始致力于实现 stylo。 Stylo 是一个将 Servo 的样式系统集成到 Firefox 中的项目。这个样式系统负责解析 CSS，确定哪些规则适用于哪些元素，通过级联…"}, {"id": "6929889326876590094", "title": "整理了清除浮动的常用的四种方法,", "desc": "如果我们清除了浮动，父元素自动检测子盒子最高的高度，然后与其同高。 缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout. 缺点：用zoom:1触发hasLayout."}, {"id": "6844903625538404360", "title": "「起点订阅页」Checkbox 美化引发的蝴蝶效应", "desc": "「据说亚马逊雨林的一只蝴蝶偶尔扇动几下翅膀，可以在两周以后引起美国得克萨斯州的一场龙卷风」曾经起点的订阅页也经历了类似的龙卷风袭击事件，那只蝴蝶便是我们加工过的 Checkbox（复选框）。我们对无公害的 Checkbox 究竟做了什么，才引发了这场性能风暴？ 起点订阅页是龙卷…"}, {"id": "6953604810482384932", "title": "三个案例搞懂BFC", "desc": "BFC 1. 概念 这只是CSS布局知识中的一个普通概念，并不高深。 BFC的英文表达是Block Formatting Context，块格式化上下文。 首先要搞清楚什么是格式化上下文，Format"}, {"id": "6947335144894103583", "title": "CSS 模块化方案探讨（BEM、OOCSS、CSS Modules、CSS-in-JS ...）", "desc": "众所周知，CSS 根据选择器名称去全局匹配元素，它没有作用域可言，比如你在页面的两个不同的地方使用了一个相同的类名，先定义的样式就会被覆盖掉。CSS 一直缺乏模块化的概念，命名冲突的问题会持续困扰着你。每次定义选择器名称时，总会顾及其他文件中是否也使用了相同的命名，这种影响在组…"}, {"id": "6844903812256251918", "title": "重温 Flex 布局", "desc": "1. 两栏布局 flex 是一个简写属性，用来设置 flex-grow、flex-shrink、flex-basis。一般来说让元素等高需要额外设置，而 flex 容器的存在一个默认属性值：align-items:stretch，它会帮助你，当然也会给你带来糟糕的体验。 2. …"}, {"id": "6844903716236034061", "title": "Web 安全漏洞之 XSS 攻击", "desc": "编者说：作为JS系工程师接触最多的漏洞我想就是 XSS 漏洞了，然鹅并不是所有的同学对其都有一个清晰的认识。今天我们请来了@卢士杰 同学为我们分享他眼中的 XSS 漏洞攻击，希望能帮助到大家。 XSS（Cross-Site Scripting）又称跨站脚本，XSS的重点不在于跨…"}, {"id": "6844903735605329934", "title": "(S)CSS中实现主题样式的4½种方式 [译]", "desc": "1. 什么是主题样式？ 相信大家对网页的主题样式功能肯定不陌生。对于一些站点，在基础样式上，开发者还会为用户提供多种主题样式以供选择。 下面就是一个主题样式功能：用户可以在右侧选择自己喜欢的主题色，从而得到一个“个性”的页面。 还有时候，我们开发了一个系统用来售卖，采购我们系统…"}, {"id": "6998124353942454302", "title": "CSS笔记(一)", "desc": "CSS CSS 语法 语法格式 CSS 的一些简单常见的属性 括号中内容为快捷键 字体颜色：（c） 字号大小：（fos） 背景颜色：（bgc） 加粗：（fwb） 不加粗：（fwn） 斜体：（fsi）"}, {"id": "6844903897497092109", "title": "[译] 多网站项目的 CSS 架构", "desc": "复杂的 CSS 架构，可不是你在科班里能学到的东西。 我在互联网行业的第四份工作，是在我国一家领先的媒体新闻公司中任职一名 CSS/HTML 专家，我的主要职责就是开发可重用的、可扩展的、用于多网站的 CSS 架构。 在本文中，我将与大家分享我在构建多网站架构领域中积累的知识和…"}, {"id": "6844903566683930631", "title": "[译] CSS 变量实现炫酷鼠标悬浮效果", "desc": "我最近从Grover网站上的有趣的悬停动画中获得灵感。将鼠标移动到订阅按钮上可以显示光标移动后的彩色渐变。这个想法很简单，但结果是一个按钮从复位和等待点击中脱颖而出。 我们需要做的第一件事便是跟踪鼠标光标的位置。 是的，只需要 6 行代码就可以让你的 CSS 知道用户鼠标的位置…"}, {"id": "6844903809123090439", "title": "原生js 实现输入框emoji表情发布", "desc": "normal表示合并空格，多个相邻空格合并成一个空格，在源码中的换行作为空格处理，只会根据容器的大小进行自动换行。 这里的空白是值空白字符，包括空格，制表符等空白字符，下面为了行文方便，统一用“空格”代表。"}, {"id": "6844903879985872910", "title": "Loading动效实现背后的思考过程", "desc": "有一个制作Loading动效的需求，设计师从AE导出了动画JSON数据，但需要加载 lottie-web 才能播放，考虑到这种小动效并不是业务中的常见需求，所以我不打算引入 lottie-web，而是直接根据动画效果自己用CSS写一个，记录动效实现的思考过程。 为了实现宽度变化…"}, {"id": "6998078241932050463", "title": "CSS核心样式", "desc": "一、CSS常用样式 1、文字属性 （1）粗细 font-weight 加粗显示，属性值两种类型：单词类型、数字类型 单词类型： 属性值 说明 normal 默认值，定义标准的字体 ，常用 bold 定"}, {"id": "6844903715250389006", "title": "Webpack之模块化优化", "desc": "当然，相信了解过前端模块化发展历史的童鞋，都应该听过IIFE、AMD、CommonJS等等，它们都是能够实现模块化的规范，直到ES2015出来后，才正式把模块化纳入其标准中。在谈到今天主题前，我们先简单讲解一下上面几种模块化方式的实现以及区别，对于后面将要讲到的webpack模…"}, {"id": "6988770449538678791", "title": "CSS 文本基础属性", "desc": "CSS-文本属性 使用 CSS 可以修改文本字体、大小、粗细、倾斜、行高、前景和背景颜色、间距和对齐方式。也可以决定为文本添加下划线和删除线， 可以将文本转化为全部使用大写字母(个人学习笔记）"}, {"id": "6844903670979493901", "title": "HTTP 协议中的并发限制及队首阻塞问题", "desc": "HTTP/0.9 和早期的 HTTP/1.0 协议对 HTTP 请求处理是串行化的。假如一个页面包含 3 个样式文件，同属于一个协议、域名、端口。那么，浏览器一共需要发起四次请求，并且每次只能打开一个 TCP 通道，在一个请求资源完成下载后，立刻断开该连接，再开启一个新的连接去…"}, {"id": "6926457623269244941", "title": "悟了悟了，妈妈再也不用担心我不会background-image之线性渐变篇", "desc": "最近我在掘金上查阅资料（摸鱼）的时候，发现了一篇神文，瞬间就裂开了，啥？？？？ background-image 竟然可以玩出花来！真·花，原文在这，瞅瞅大神是如何把css的背景图玩出花的。于是乎，我也有许多奇思妙想想去试验，甚至想直接在背景图里直接撸出一个清明上河图~ 相信很…"}, {"id": "6844903778064285704", "title": "啊，这连字体都要减肥的世道啊", "desc": "设计师大佬一脸委屈地看着菠萝：“可是这个字体好看啊。” 哎没办法，这眼神分分钟让人觉得自己在犯罪。那就只能搞个font-face了，可是就10个阿拉伯数字要77K，这这这！不行不行，减下肥。 运行index.js，得到精简的字体文件。 unicode-range的作用是可以让特…"}, {"id": "6844903918690910221", "title": "Web技巧（17）", "desc": "上周又断档一期了，这周不能再断了。这两天翻阅了@hj_chen在新家坡组织的Talk.css沙龙中的一些PPT，有些内容还是蛮有意思了。国外氛围真不错，其实国内也有不少同学在搞沙龙。前面社区活动也不少，这周参加了腾讯Live前端大会。下个月@裕波在成都举办第五届FEDay。 广…"}, {"id": "6911318513982373895", "title": "CSS必知|重点属性overflow|实践技巧|温故知新", "desc": "学海无涯，不要沉浸在知识的海洋里，迷失自己。要知道自己想要什么，抓住重点，不忘初心。这个世界上百分之20的人，掌握着百分之80的财富。接下来一系列教程，就带领大家抓住重点，一起做那百分之20的人。往期"}, {"id": "6947974722827386911", "title": "你不一定知道的七种图标", "desc": "直接使用图片作为图标当然是可以的，有用起来简单，兼容性好等优点。但是 1202 年了，这样的前端确实有点跟不上时代了。 等等缺点，虽然 HTTP/2 改善了请求数啥的，还是问题多多，已经不推荐了。 首先用 css 来实现是一种非常节约资源的方式。 借助这个网站，可以方便的使用将…"}, {"id": "6947966801405804581", "title": "「HTML+CSS」--自定义加载动画【005】", "desc": "文章仅作为学习笔记，记录从0到1的一个过程。希望对您有所帮助，如有错误欢迎小伙伴指正～"}, {"id": "6922983744617840648", "title": "理解BFC，不妨看看这篇", "desc": "BFC是block formatting contexts的简称，中文含义「块级格式化上下文」。我们先来看一下MDN对它的定义 内部元素已经超出父元素的范围了，why？这是float属性造成的父元素高度塌陷，现在父元素的高度是文本内容所占据的高度加上padding和border…"}, {"id": "6850037254929907725", "title": "CSS总结", "desc": "问：一个DIV中浮动元素，能不能脱离DIV。 如果是body，body没有设置高度，也会对body造成影响，body的高度也会塌陷，使用overflow:hidden; 不能清除浮动，所以说不要直接在body中裸奔。"}, {"id": "6844903816492482574", "title": "CSS 中的颜色、背景和剪切", "desc": "CSS 中可以改变文字的颜色还有元素的背景颜色。可以用颜色关键字来定义颜色，如red，但是这些颜色关键字并不常用。 transparent可以让文字或背景变的完全透明的颜色，它就像rgba(0,0,0,0)的缩写。 currentColor代表原始的color属性的计算值。比如…"}, {"id": "6844903891436322823", "title": "CSS系列之教你几招小技巧，让开发更高效", "desc": "俗话说「人靠衣装马靠鞍」，一个网页的漂亮与否CSS起到了很大的作用。它能够帮助我们进行美化。因此 CSS 在前端开发中的地位不用多说。 很多人认为 CSS 的入门门槛较低，所以认真对待和学习的人其实并不多，只要能把项目撸出来，管它呢。 殊不知 CSS 有很多的价值并没有被发挥出…"}, {"id": "6844903693423214600", "title": "border-radius结合动画创建酷炫的效果", "desc": "CSS3圆角只需设置一个属性：border-radius（含义是\"边框半径\"）。你为这个属性提供一个值，就能同时设置四个圆角的半径。所有合法的CSS度量值都可以使用：em、ex、pt、px、百分比等等。不允许负值。"}, {"id": "6844904053525200909", "title": "CSS的“层”峦“叠”翠", "desc": "提起，z-index 大家脑海里可能会立刻浮现这样的知识点：“z-index 的值大小控制元素在 Z 轴上显示的层级，z-index 越大显示的层级越高（也就是在最上层，离观察者越近），没有指定的按照出现顺序堆叠，此外 z-index 不能跨父元素比较。 HTML 中有如下两个…"}, {"id": "6844903516742352910", "title": "如何在Swiper内制作CSS3动画效果", "desc": "以下内容参考链接在需要添加动画的页面里面引入以下几个文件版本对应接着在页面js部分添加(按业务需求)在需要执行的动画的元素上面添加class:下面是案例"}, {"id": "6908952023526440974", "title": "【Ten Mins Effect】 - 02 波浪加载器动画效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现要给简单精美的 css 效果。 让我们先来看看一个摆动的半圆怎么实现吧。"}, {"id": "6922420985366839310", "title": "Grid 网格布局", "desc": "Flex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指定\"项目所在\"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。 采用网格布局的区域，称为\"容器\"（containe…"}, {"id": "6976262650267172877", "title": "「HTML+CSS」--自定义加载动画【031】", "desc": "这是我参与更文挑战的第9天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为96px 相对定位 步骤2 利用span"}, {"id": "6844903502519468039", "title": "代码分割结合 Prefetch 完美优化单页应用加载性能", "desc": "单页应用性能的最大痛点就是 bundle 体积大导致首屏时间过长。使用 webpack 的 code splitting（代码分割）功能可以将 bundle 分片，加速首屏，但之后的交互势必会受到影响。预加载分片 thunk 是必需的，本文探讨最理想的预加载手段。"}, {"id": "6916758946166341645", "title": "基本知识点--CSS3篇", "desc": "在开发过程中 我们会通过通配符+box-sizing ,将元素的标准统一，解决不同浏览器的兼容问题 ，box-sizing可选属性：content-box（content）、border-box（content + border）、padding-box（content + b…"}, {"id": "6947588118992289823", "title": "CSS盒模型简述", "desc": "什么是盒模型？ 盒模型就是元素生成的一个矩形区域。它包括了四个部分： margin 外边距区域（边框外的区域，外边距是透明的） border 边框区域 padding 内边距区域 content 内容"}, {"id": "6844903830203662349", "title": "初涉grid布局🐱（一）", "desc": "发现其实兼容性已经很好了，本篇文章基于Wes Bos的grid课程，以及相关技术文章整理而成。 推荐使用火狐浏览器开发者版本 Firefox Developer Edition ，对css grid调试很有帮助，相关好处下文有提到。 就是运用display: grid的元素，对…"}, {"id": "6968655340145475620", "title": "SVG", "desc": "SVG (rect)矩形 rect 元素的 width 和 height 属性可定义矩形的高度和宽度 style 属性用来定义 CSS 属性 CSS 的 fill 属性定义矩形的填充颜色（rgb 值、"}, {"id": "6882609384854126599", "title": "用Line box的方式理解CSS属性vertical-align", "desc": "1. 概述 为了理解vertical-align，常常构造一种叫line-box的模型。一个line-box如下图所示，它有几条关键的参考线，分别是top、middle、baseline和bottom。其中黄色区域为line-height大小。 Line box是由一行同级或多…"}, {"id": "6989568319841910820", "title": "前端Vue框架在PostCSS怎样使用sass", "desc": "为什么要使用PostCss 众所周知转换 px 单位的插件有很多，知名的有 postcss-px-to-viewport 和 postcss-pxtorem，前者是将 px 转成 vw，后者是将 px"}, {"id": "6995006409423192078", "title": "你知道z-index: 0和z-index: auto的区别吗？快来看看吧！", "desc": "你知道z-index: 0和z-index: auto的区别吗？最近在学习层叠上下文，学习的过程中对z-index为0和为auto有什么区别产生了疑问，然后整理出了这篇笔记，"}, {"id": "6986913600472367111", "title": "纯 html + css 实现毛毛虫", "desc": "毛毛虫 分析 毛毛虫是由一个个的圆从里到外组成。 最里面的圆距离中心位置最近，最外层的圆距离中心位置最远。 圆的旋转速度是一样的，只是开始旋转的时间（或者位置）不一样。 初始时 然后从左到右依次开始绕"}, {"id": "6993709586314166309", "title": "less学习指南第四期【进阶】|   条件语句和循环语句", "desc": "LESS是一个CSS预处理器，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，"}, {"id": "6965687467747835940", "title": "使用 CSS prefers-* 规范，提升网站的可访问性与健壮性", "desc": "文本将介绍 CSS 媒体查询中新增的几个特性功能，该规范提出了一系列有益的属性，用于适配用户的一些个性化配置，提升页面的可访问性及健壮性。"}, {"id": "6916400346868744206", "title": "CSS现状和如何学习", "desc": "在2020年岁末有幸和一群优秀大学生在一起聊CSS相关的话题，感到非常的荣幸！在此非常感谢平台（阿里巴巴集团.前端练习生计划）给我这样的机会，同时也要非常感谢好友 裕波，墨苒对我的鼓励和支持。在结束直播的时候，说过后面要整理一篇文字版本，由于个人新转团队（互动团队转到 F(x)…"}, {"id": "6976436998340870180", "title": "CSS 自动显示“全文”链接", "desc": "最近有同事问我这样一个交互，当文本较多时（超出5行），出现“全文”链接，说明有更多的内容，点了之后跳转新页面。那么纯 CSS 如何实现这样一个交互呢"}, {"id": "6975334906431799327", "title": "使用CSS3实现开红包特效", "desc": "小程序上发红包给用户有两种形式，一种是采用订阅消息的形式给用户发信息，用户点开就可以领红包，一种是自己实现领红包的效果，领完后自动将领取到的金额打到用户的微信账上，由于业务需要我们采用的是第二种方式。"}, {"id": "6897937643372937224", "title": "移动端开发一些常见问题的解决方案", "desc": "1. 获取设备的真实开发分辨率（逻辑分辨率） 其实，对于开发来说，只需要了解三个概念。 物理分辨率，就是设备上标称的分辨率。 逻辑分辨率，开发时所用的分辨率。 设备像素比，物理分辨率和逻辑分辨率之比。 例如 iphone 6，它的物理分辨率是 750 x 1334，逻辑分辨率是…"}, {"id": "7001005259426365470", "title": "菜鸟之Vue前端面试题 - Css", "desc": "CSS (布局，动画，适配) 介绍一下标准的CSS的盒子模型 如何居中div CSS3有哪些新特性？ （1） RGBA和透明度 （2） background-image （3）background-o"}, {"id": "6862599699334725639", "title": "纯CSS免费让掘金社区拥有暗黑模式切换功能", "desc": "暗黑模式这个概念最早起源于MacOS系统的Mojave，提供浅色主题和深色主题两种皮肤供用户选择，深色主题就是我们常说的暗黑模式。为了眼睛健康，笔者在手机、平板和电脑上都选择了暗黑模式。 随着苹果官方逐渐要求各大系统平台都得适配暗黑模式，所以笔者也探索出一种应该是市面上最低成本…"}, {"id": "6993963678949179429", "title": "纯CSS实现奥运五环", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 奥运会马上结束了，为了庆祝中国队的良好表现，今天我们来绘制一个奥运五环。 先看奥运五环的图： 实现的难点在于两个圆环交叉的位置互有遮盖，换句"}, {"id": "6971708936734900254", "title": "使用 CSS variables 和Tailwind css实现主题换肤", "desc": "最近在网上看到 Tailwind Labs的实现的[换肤视频]，决定使用 Tailwind css 实现博客列表主题换肤。"}, {"id": "6844904180776173581", "title": "💫 CSS 幻术 | 抗锯齿", "desc": "传统网页的呈现是基于像素单位的，所以图片不能和 SVG 一样进行任意尺寸缩放后还保持边缘平整。也就是说，放大像素逻辑的图片，必然导致可视质量下降（信息失真）。所以我们往往会使用技术手段去规避失真，如： 这篇文章将会简单的提及以上几点，并介绍一种通过 CSS Background…"}, {"id": "7004098242216460296", "title": "css中的圣杯布局", "desc": "其实我们常用的应该是float，但是flex和定位也是可以实现的；下面我将一一进行实现，如不对之处望大家提出 float方法 HTML CSS flex方法 HTML CSS position方法 H"}, {"id": "7001763697852956708", "title": "CSS 超链接样式", "desc": "在浏览器中，超链接通常带有下划线，在默认情况下、鼠标点击时、鼠标点击后超链接的样式都会改变。可以用超链接伪类来定义超链接在点击的不同时期的样式。"}, {"id": "6973451851702206501", "title": "前端冷知识：overscroll-behavior滚动控制", "desc": "还是冷知识，传递一些鲜为人知的前端小知识。 这篇文章讲讲一个关于滚动的属性：overscroll-behavior，项目开发时相信你也遇到过只想滚动弹窗而不是滚动页面的情况吧"}, {"id": "6966449320744714277", "title": "做了这个活动，感觉自己成了垂直排版大师", "desc": "前段时间协助完成作家的盘点活动，设计大大给的视觉稿如下图。最初拿到稿子时，以为是一个简单的常规活动，实际在完成这个活动的过程中有一点点小波折，自己也在这个过程中学习到了关于垂直排版的知识点，下面来跟大"}, {"id": "6988420911950987272", "title": "# 2021不一样的css新玩法（上）", "desc": "对一些近些年来的css好用的新特性做一个总结, 让诸如: filter, object-fit, gap, box-reflect, aspect-ratio等新特性进入大家的视野"}, {"id": "6994355215392112670", "title": "两栏、三栏布局", "desc": "两栏布局5种方法，三栏布局5种方法 Five ways to do a two-column layout, five ways to do a three-column layout"}, {"id": "6844903618500362247", "title": "2018 美团、腾讯、头条、蔚来 社招面试随谈", "desc": "2018，工作快两年了，趁着春招的尾巴，面了几个大厂，现记录下这次的面试路程。 去美团面试时，在路上问路正好问到美团的同学，美女人很友好，直接带我上去了，哈哈。 此时我因为已经拿到了美团的offer，腾讯的面试当时自我感觉也挺有戏的，本来就不打算继续面试了，后来考虑各种因素还是…"}, {"id": "6986832597061992462", "title": "实现序列帧图片动画的3种方式", "desc": "做可视化项目或者其他项目时，我们都可能会用到一些动画，当有些动画前端实现起来比较复杂时，UI组那边就会甩过来好几十张图"}, {"id": "6914591881057959949", "title": "【BiliBili冬】头图日夜转换视差效果", "desc": "大家好，我是 Steven，这几天终于感受到冬天真的要来了，我都有些感冒，所以大家要注意保暖喔。 制作的原理和秋季的版本也差不多，那我们今集就将这个冬天的头图实现出来啦。 class 名为 evening，以及窗框积雪效果的图片，class 名为 window-cover。 再…"}, {"id": "6856912385652424718", "title": "一个有意思的方案：不借助后台和 JS ，只用 CSS 让一个列表编号倒序，你会怎么做？", "desc": "我正在做一个项目，其中有一个倒序的列表。列表创建时间降序排序的，这里我想在语义和视觉上都能体现出来(让列表显示对应的编号，编号越大表示是最新的)。网上做了一些研究，找到了一些有趣的解决办法，有些很好，有些就不那么好了。 接着，我们来看看有哪些实现的方式。 简单，最直接的解决方案…"}, {"id": "6968766143523717128", "title": "html和css笔记整理", "desc": "​ html和css笔记整理: meta标签 meta标签主要用于设置网页的元数据，元数据不给用户看 常用语法： charset 指定网页的字符集 name 指定的数据的名称......"}, {"id": "6844903504545316877", "title": "清除浮动的四种方式及其原理理解", "desc": "本文介绍了四种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。 在讲清除浮动的方法之前，我们先来了…"}, {"id": "6975819518153064462", "title": "display:none与visibility: hidden的区别", "desc": "“这是我参与更文挑战的第4天，活动详情查看： 更文挑战” 1.visibility: hidden/visible与dispaly：none 2.display和visibility对计数器的影响 3"}, {"id": "6989868623196061727", "title": "CSS 是魔法, 是时候试试 3D 了", "desc": "CSS 是魔法, 是时候试试 3D 了 CSS transform 是 css 最全能，最神奇的属性之一。它不仅是在你的网站上实现平滑动画的最佳方式，更是你创造奇迹的一种方式。"}, {"id": "6995592030390845453", "title": "CSS｜另类图片展示框", "desc": "超级炒鸡丝滑的轮播图 首先看下效果图： 上代码： html: 我们全部使用div来完成，主要看css样式 css: 这才是重头戏。 js: 添加事件 总体的一个思路呢就是：通过flex布局中的flex"}, {"id": "6988363163989196813", "title": "CSS记忆点", "desc": "一、盒模型 元素的内在盒子是由margin box、border box、padding box、content box组成的，这四个盒子由外到内构成了盒模型。 content-box，默认值，只计算"}, {"id": "6844903518956961805", "title": "Web自适应布局你需要知道的所有事儿", "desc": "有这样一个问题。 别急，下面我们就开始逐一分析各种方法在web自适应布局下的使用姿势，最后做个总结。 本文的所有例子使用了同一种三栏布局。源代码点我 1. 浮动布局 float:left|right 最常用的布局方式之一，设置了float的元素脱离了文档流。需要注意在使用过浮动…"}, {"id": "6844903906976219143", "title": "怎么用用css实现表单验证🤦‍♂️", "desc": "效果图原理表单元素中，有一个pattern属性，可以自定义正则表达式（如手机号、邮箱、身份证..）；valid伪类，可以匹配通过pattern验证的元素；invalid伪类则相反，可以匹配未通过pat"}, {"id": "6995487405012680718", "title": "CSS常用属性", "desc": "本文总结于张鑫旭老师的《css世界》，个人学习笔记。 demo：https://github.com/JuliaJaJa/css-demo 介绍一些常用的css属性"}, {"id": "6920998412506628109", "title": "一个卡牌小游戏入门CSS3的3D变换", "desc": "对于3D变换，最基础的肯定是坐标系。在3D中有两种完全不同的坐标系：左手坐标系和右手坐标系。 右手坐标系是X轴向右，Y轴向上，Z轴是指向“自己”的。 左手坐标系的Z轴正好相反，是背向“自己”的，在计算机中通常使用的是左手坐标系，而数学中则通常使用右手坐标系。 CSS3中的3D坐…"}, {"id": "7000939591096090637", "title": "浅谈 CSS3 新特性：按钮进阶", "desc": "按钮元素是最常见最普遍的存在，不论是展示页面还是后台管理，都有按钮的位置。作为用户交互的一个必要元素，一些小巧妙的视觉效果就能让用户体验 up up up"}, {"id": "6844903799446831117", "title": "一起搞懂 CSS 水平居中与垂直居中的16个方法", "desc": "以上是 CSS 水平居中的 8 种方法。 注：① 子元素 line-height 值为父元素 height 值。② 单行文本。 适应 IE7。 元素高度可以动态改变, 不需再CSS中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断。 IE6~7, 甚至IE8 beta…"}, {"id": "6990555938310586382", "title": "2021-前端面试（24道）手写/场景/排序题", "desc": "手写题 绑定事件？ 通用绑定事件+事件代理 marches: 判断一个DOM元素是不是符合一个CSS选择器 例子: 画一个三角形？ 实现简易的ajax? 实现new操作符？ 实现promise.all"}, {"id": "7000773522767216648", "title": "CSS｜人类高质量玩具", "desc": "每天一个CSS小作品学习，每天在码海中游荡，突然一抹异色引起了我的注意，一个啤酒人走出了康纳的步伐，哈哈哈，太好玩了。拿来吧你 html部分： 整个效果全部是使用CSS完成的，具体代码如下： 哈哈哈，"}, {"id": "6954158506433839141", "title": "Tailwindcss发布了2.1版本，是时候“入手”了", "desc": "Tailwindcss v2.1发布，最大的更新就是把原来的jit插件以一种mode的方式合并到主题程序中了。 性能和编译速度大大提升。更带来了更多便捷的写法。"}, {"id": "6989178467392684068", "title": "纯 html + css 实现奥运五环", "desc": "代码 - 以蓝色和黄色的环为例 环的交错效果解释 以蓝色和黄色的环为例： 蓝色的环为基准，黄色的环切割成两个部分，第一个部分在蓝色的环上面，第二个部分在蓝色的环下面。 画完蓝色和黄色的环以后，就可以继"}, {"id": "7007711498306846727", "title": "CSS备忘录（六）：flex 、移动端页面 与 响应式布局", "desc": "flex 01. 弹性盒 flex-direction 指定容器中弹性元素的排列方式。 弹性元素的属性： 02.弹性容器的样式 flex-wrap: justify-content align-ite"}, {"id": "7007820079320530951", "title": "HTML+CSS+JS考试复习题（二）", "desc": "1.如何实现一个对象的深拷贝？ 2.用递归的方法实现1到100求和 3.什么是闭包？如何解决闭包打来的内存泄露问题？ 4.简述http协议的报文格式 5.列举最少5个animation的子属性，并说明"}, {"id": "7003521434261651487", "title": "巧用模糊实现视觉的 3D 效果", "desc": "本文较短，将介绍巧用模糊实现视觉 3D 效果的技巧。 我们都知道，在正常的视觉效果中，离我们越近的通常我们会看的越清晰，而离我们较远则相对没那么清晰~ 我们可以利用清晰与模糊两种状态来构建视差效果。像"}, {"id": "6979391400844460068", "title": "CSS 奇思妙想 | 全兼容的毛玻璃效果", "desc": "通过本文，你能了解到 最基本的使用 CSS backdrop-filter 实现磨砂玻璃(毛玻璃)的效果 在至今不兼容 backdrop-filter 的 firefox 浏览器，如何利用一些技巧性的"}, {"id": "7005019405834780702", "title": "高级前端工程师如何避免写出屎一样的代码（一）？", "desc": "用ES新特性来优化你的javaScript代码 更优雅地使用console 💩 👍 使用对象解构 使用css样式 使用表格展示 显示代码执行耗时 显示调用的日志 解构 💩 👍 将参数解构 模板字符串 "}, {"id": "7004496282907574279", "title": "CSS液体加载动画", "desc": "前言 效果展示 实现思路 首先我们要让元素能够旋转起来，可以使用transform中的rotate进行2D的360deg旋转。 紧接着我们可以通过CSS变量（--开头的形式）结合animation-d"}, {"id": "7005475978809966605", "title": "举头望明月  低头写代码——使用css实现中秋的月亮", "desc": "丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间。转朱阁，低绮户，照无眠。"}, {"id": "7001381120918945799", "title": "学透CSS-学以致用，boxshadow实现手风琴悬停效果", "desc": "对于CSS来说，由于CSS的特殊性，导致它的学习不能局限于眼观，而是要放到真是的DOM中才能更好的体会具体属性的具体价值。"}, {"id": "7005901644609093639", "title": "HTML+CSS+JS实现 slicebox酷炫3d图片轮播切换", "desc": "HTML+CSS+JS实现 ❤️slicebox酷炫3d图片轮播切换❤️​ CSS样式： HTML代码 : 上面的图片和JS以及CSS文件需要引入  ​"}, {"id": "7005592829065953316", "title": "学透CSS-当CSS遇到古诗和月亮，月亮动起来！！！", "desc": "“新月”，也叫“朔日”，这时是农历初一；“蛾眉月”，这时是农历初三、四；农历初七、八，半个亮区对着地球，人们可以看到半个月亮（凸面向西），这一月相叫“上弦月”；农历十五、十六、十七，月球的"}, {"id": "6973922659125952548", "title": "一次千万级流量的 618 电商 H5 活动页干货分享 ", "desc": "前言 文章较长，建议收藏～ 笔者个人实话实说，是第一次做活动页相关的前端开发工作，所以也算是初体验之后的总结： 第一：活动类经历会短期内提升一个业务前端的技术水平 如果你从来没写过活动类型的需求，第一"}, {"id": "7000779250785583141", "title": "学透CSS-还在用JS计数吗？来试试纯CSS计数器！！！", "desc": "文章目录会在标题前面加上数字编号的，大部分的实现方案是什么呢？我一开始是在遍历的时候加上数字编号的，不过这样的JS代码很多。需要判断层级数很麻烦。直到我发现纯css的counter属性！"}, {"id": "7006555397171462180", "title": "你不知道的CSS—writing-mode", "desc": "#前言 CSS Writing Modes，是为了支持国际上各种书写模式，例如从左到右的拉丁语和印度语，从右到左的希伯来语和阿拉伯语，双向的混合拉丁语和阿拉伯语和垂直的亚洲文本。 CSS书写模式由in"}, {"id": "7000652451435003918", "title": "一个\"水\"按钮💧", "desc": "🐳不知道大家平时有没有留意水滴落下的瞬间。 仔细去听，仔细去看，每一滴滴水珠落下泛起的涟漪都让人意向连篇。这次给大家带来水滴按钮。"}, {"id": "6999934705957077029", "title": "🍬 为什么 CSS 动画比 JavaScript 高效？", "desc": "引言 讲到动画，当然是非常有意思的啦，你可以往上滑一下，看看上面的封面图，是不是相当的炫酷，以为我是代码写出来的吗？ 那当然不可能啊，我这么摸鱼，怎么会为了个封面图上号呢"}, {"id": "7007054331828502558", "title": "CSS布局——两栏布局/三栏布局", "desc": "整理了一下两栏布局和三栏布局的方法，包括一侧固定一侧自适应的各种方法，三栏布局包括弹性布局、浮动、定位、圣杯、双飞翼布局。"}, {"id": "6980220327951335432", "title": "疯狂操作 CSS3 实现 60 FPS 动画效果，CodeReview 时同事直呼：细节！", "desc": "本篇是基于浏览器渲染原理，对 CSS3 动画的一个很好结合实践。CodeReview 时，同事都直呼：细节！"}, {"id": "7004844597994061838", "title": "学透CSS-@support 判断兼容性", "desc": "@support并属于比较新的CSS3属性了，几年前，@support刚出现的时候，大家其实对这个属性并没有啥感觉，因为那个时候CSS3在浏览器上的兼容性不是太好，并且有的浏览器也不兼容@suppor"}, {"id": "7002824717727973384", "title": "[框架/插件-第三期] 还在用Bootstrap？这10个CSS框架可以尝试！！！", "desc": "在日常工作中，我们需要编写大量的CSS代码，当然如果你的日常工作主要是后台管理之类的系统的话，那你可能CSS用的比较少，但是如果你做过官网，宣传等等内容的话，一般这些可能比较更需要CSS的功底！"}, {"id": "7005527799628824612", "title": "DongXH丶🐒 🐒的的中秋献礼🥮，【css星空实现，中秋诗】", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 中秋节献礼🎑 说起中秋诗词，大家耳熟能详莫过于苏轼《水调歌头·明月几时有》，以及王建的《十五夜望月》，但其实在这两首之外，还有很多优秀的中秋诗词"}, {"id": "6844903541455355917", "title": "2017年前端有什么样变化？即将来临的2018有什么样的期待？", "desc": "在即将过去的2017年里，我们回顾：逃不过的三大框架。React 继续在前端领域占据着主导地位，并在 2017 年发布了最受期待的版本之一 - React 16。 它包含了可以实现异步 UI 渲染的 fiber ..."}, {"id": "6992932440285118500", "title": "CSS基础知识-盒子模型", "desc": "这是我参与8月更文挑战的第3天，活动详情查看： 8月更文挑战 盒子模型 简介 CSS处理网页时，它认为每个元素都包含在一 个不可见的盒子里。 为什么要想象成盒子呢？因为如果把所有的元素都想象成盒子，那"}, {"id": "6844903556164616205", "title": "css3 制作圆环进度条", "desc": "刚开始写这个圆环的时候是参照帖子上给出的css代码代入，然后根据自己的需求改，发现圆环可以完美转动了，但是好像没法用百分比控制，所以放弃了随便copy一个现成的想法，该动动脑子还是有必要的。 css实现圆环的方法很多，我看大部分都是采用边框（border）+ 裁剪（clip：r…"}, {"id": "6915756476208414727", "title": "「4种方案」搞定CSS水平垂直居中", "desc": "方法：父元素相对定位，子元素绝对定位，left和top定位到父元素50%，再用margin向左和向上移动子元素尺寸的一半。 方法：此方法与方案一是一个道理，将margin换为transform：translate（-50%，-50%）。 方法：父元素相对定位，子元素绝对定位，l…"}, {"id": "6844903535411200007", "title": "express，koa2等node处理前端上传图片并保存到文件中", "desc": "在另个项目中，同样的代码却报错了... 我也是一脸懵逼"}, {"id": "6992921119732793375", "title": "移动端flex图标和文字上下结构布局思路", "desc": "上下结构 思路 效果 (蓝色部分): 代码: html: css: 单行排列 可以将每个图标及其对应的文字作为一个li, 那么一行就有五个li. 然后为每个li 设置flex:1; , 这样五个元素就"}, {"id": "6844903577840779271", "title": "网页性能 CaseStudy：以 PressOne 首页为例", "desc": "页面性能差的直接后果是用户需要等待，而等待，尤其是不确定要多长时间的等待会给用户带来焦虑，为了尽早的结束这种焦虑，除非访问网页是刚需，用户通常会选择直接关闭页面。从实际数据来看，性能差是页面高跳出率的重要原因之一。 结论显而易见：越快越好，少即是多。 实际上，最近几年来大型互联…"}, {"id": "6902317368635523080", "title": "Flex布局", "desc": "Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员。 flex-flow属性是flex-directi…"}, {"id": "6844904016388816910", "title": "解析transform,transition和animation的区别", "desc": "1. transform transform主要用于给元素做变换,主要由以下几种变换,rotate(旋转),scale(缩放),skew(扭曲),translate(移动)和matrix(矩阵变换). none表示不做变换, transform-functions表示变化函数,…"}, {"id": "6982500332773326879", "title": "垂直居中的方式", "desc": "简单的几种垂直居中方式 1. diplay: table 2. display: flex 3. position: relative 4. margin: auto"}, {"id": "6844903649437564936", "title": "解决lib-flexible，第三方ui样式缩小", "desc": "vue项目下一开始用的是lib-flexable，px2rem，但是发现引入ui框架时样式会缩小，以为是转换的问题，然而px2rem没有配置过滤。。就找到了postcss-pxtorem，在配置项下过滤了iview样式 结果开了火狐，样式恢复，以为解决了。直到有一天打开chro…"}, {"id": "6844903600859119629", "title": "纯css改变输入框光标颜色", "desc": "我就记得在不久前, 旭神写了一篇文章, CSS改变插入光标颜色caret-color简介及其它变色方法, 当时还发现旭神的demo页面一个BUG. 后来发现评论区有人说使用text-shadow也可以实现, 然后在逛大漠大大的博客时又偶然发现如何改变表单控件光标颜色, 说的就是…"}, {"id": "6993176401939529764", "title": "scoped和scoped穿透", "desc": "在Vue文件中的style标签上有一个特殊的属性，scoped。当一个style标签拥有scoped属性时候，它的css样式只能用于当前的Vue组件，可以使组件的样式不相互污染。"}, {"id": "6914207587584081933", "title": "CSS布局-Flex", "desc": "1. 让一个容器变为flex容器 2. 改变items的流动方向 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 3. …"}, {"id": "6844903649974435854", "title": "在 CSS 动画中使用硬件加速(翻译)", "desc": "近些年，我们总是听到硬件加速，以及它如何帮助我们提升网页的动画性能，让网页动画变得更好，在移动端更流畅。但是我想一大部分经验少的工程师是不知道硬件加速是如何工作的以及我们如何使用它来帮助我们让动画变得更流畅。 硬件加速听起来非常复杂，像高等数学。在这篇文章中，我会简明的讲解如何…"}, {"id": "6925210174571413518", "title": "web动画探索(一)", "desc": "前端项目直面客户，为了更好的交互体验，免不了需要使用动画来增香提味。在此分享自如动画的尝试与探索。 使用transition实现：位移、旋转、缩放、透明度等简单过渡效果。 优点： 流畅、简单。 缺点： 仅能实现简单动画，仅能监控动画结束（transitionend），无法实现用…"}, {"id": "6844903929801621518", "title": "精读《使用 css 变量生成颜色主题》", "desc": "本周工作中遇到类似颜色主题的问题，在查资料的时候，看到这个视频，觉得讲得很清楚，而且趣味性丰富，所以想拿出来讲讲这个很有意思的主题。 1. 精读 Web 内容无障碍指南的对比度指的是 W3C 组织发布的 《Web Content Accessibility Guidelines…"}, {"id": "6979210105057181733", "title": "小程序中如何使用字体图标", "desc": "本文主要介绍图标字体在小程序中的如何使用， 小程序中自带的图标不满足开发需求的情况下下，如何解决这个问题。"}, {"id": "6979159113800351781", "title": "最后亿遍CSS常用考点总结", "desc": "这是我参与更文挑战的第19天，活动详情查看：更文挑战 css3新增属性 这里简单说几个常用的 动画 ：@keyframes 2D&3D ：translate()、rotate() 过渡等：transi"}, {"id": "6844903688578809863", "title": "还原一个 Windows 10 Metro 布局", "desc": "先来看一下这个Demo，看似复杂的交互实现起来其实并不难，下面我们就来拆解一下其中的动画效果以及实现原理吧。 1. 3D旋转 Win10 Metro的一个比较显著的特点就是磁贴的3D旋转。 我们将每一个磁贴展示为横截面为正方形的长方体，然后通过css旋转动画来实现3D旋转。 在…"}, {"id": "6844904063985778702", "title": "关于animation和transition一点知识", "desc": "CSS3动画和JS动画的区别JS实现的是帧动画CSS3实现的是补间动画帧动画：使用定时器，每隔一段时间，更改当前的元素补间动画：过渡（加过渡只要状态发生改变产生动画）动画(多个节点来控制动画)性能会更"}, {"id": "6969103077001396238", "title": "浮动(float)", "desc": "1. CSS 布局的三种机制 CSS 提供了 3 种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中： 普通流（标准流） 块级元素会独占一行，从上向下顺序排列； 常用元素：div、h"}, {"id": "6936108808179548196", "title": "嘿！老铁！听说你要设爆z-index ?!!", "desc": "前两天，我在某乎上看到一篇文章： 这个场景有点似曾相识...... 总之，这番言论.....突然激起了我的创作欲，于是本美少女为你们准备了一篇z-index的正确使用指南。快拿来笔和纸做个小笔记吧！！"}, {"id": "6844903496836186119", "title": "webpack 前端多页项目工程", "desc": "webpack 前端多页项目工程，适用于展示型站点，比如官网。"}, {"id": "6844903510455107598", "title": "不吹不黑聊聊前端框架--尤雨溪知乎Live整理", "desc": "最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈"}, {"id": "6844903617833631752", "title": "JavaScript 工作原理之十－使用 MutationObserver 监测 DOM 变化", "desc": "本系列持续更新中，Github 地址请查阅这里。 这是 JavaScript 工作原理的第十章。 网络应用在客户端日益复杂，这是由很多因素的造成的，比如需要更加丰富的界面交互以提供更加复杂的应用功能，实时计算等等。 网络应用的日益复杂导致无法知晓其生命周期中指定时刻准确的交互界…"}, {"id": "6844903780115283976", "title": "[译] 💅 styled-components 背后的魔法", "desc": "你可以用 Button 变量来渲染组件，就如同其他任何 React 组件一样。 实际上，styled.button`` 这种古怪的声明，是 JavaScript 语法的一部分！这是一种叫做“标签模板字符串”的特性，在 ES6 中引入。 本质上来说，调用函数 styled.but…"}, {"id": "6844904003344547854", "title": "CSS 盒模型、布局和包含块", "desc": "CSS 盒模型是页面布局的基础。 当对一个文档进行布局的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。 …"}, {"id": "6844903817503326216", "title": "移动端三种适配方案", "desc": "viewport:中文的意思就是“视口”，通常就是浏览器用于显示页面的区域，但是在移动端，viewport一般都要大于浏览器的可视区域，保证PC页面在移动页面上面的可视性，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏…"}, {"id": "6844903509880471566", "title": "一次webpack体验", "desc": "这个是公司要做的一个官方网站。由于项目比较简单，要求是单页的，没有页面跳转，所以只有一个 .html 文件。项目用了比较常规的 bootstrap + jquery 的开发，这个也没啥好说的。考虑到 CDN 的可控性，所以把所有 bootstrap 的资源都下载到了本地进行引用…"}, {"id": "6873651900957491207", "title": "五个有用易忽略的 CSS 属性", "desc": "分享一些容易忽略的CSS属性，在此之前，没有人告诉我这些属性的存在。 也许你们和我不一样，已经了解了这些属性，让我们一起来看看。 使用属性user-select，并且将它的值设置为none，我们可以将一个元素的文本设置为不能被用户选中。 当你不想一个元素的原始内容被复制时，可以…"}, {"id": "6844903516931112974", "title": "一个行为标准Popup组件(vue), 强大的过度动画支持, 和定位支持", "desc": "前言之前看过很多的组件库,但是它们的Popup行为和原生的界面差别不大,但是行为上面却各种小细节不足,所以有了这个强调行为标准的popup组件特点支持返回键,可以按浏览器返回按钮关闭popup可以写出"}, {"id": "6961622967063150628", "title": "十一.网页布局-CSS定位", "desc": "CSS定位的基本思想很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。利用这些属性，可以建立列式布局，将布局的一部分与另一部分重叠...."}, {"id": "6961668091356905485", "title": "十二.CSS Flexbox-弹性盒布局", "desc": "通过弹性盒指定空间的分布方式、内容的对齐方式、和元素的视觉顺序，从而是我们的网页布局变得异常简单；弹性盒依赖父子关系，在元素上声明display:flex或者display:inline-flex;可"}, {"id": "6897920816375398407", "title": "CSS揭秘：4.边框内圆角", "desc": "两个div实现内圆角很容易，只需要内圆角外直角即可。 这种方案更加灵活，我们可以在box上设置更多的样式，但是需要两个元素才能实现。 还记得上篇中，outline和box-shadow对于圆角的区别显示吗？box-shadow会贴合border的圆角，outline不会。当我们…"}, {"id": "6966573033343418404", "title": "纯CSS实现简易的无缝滚动效果", "desc": "本文将介绍通过CSS的animation来实现无缝滚动动画，动画逻辑是：2个相同的元素，父容器的宽度是1680px，当第1个元素向左偏移840px完成后，瞬间复原位置，利用视觉差来实现无缝滚动的效果。"}, {"id": "6844904106209837063", "title": "前端 | 20个常用的 CSS 技巧", "desc": "这样代码就干净，易读，易于理解了。 你不需要分别添加 line-height 到每个 p,h 标记等。只要添加到 body 即可： 这样文本元素就可以很容易地从 body 继承。 这样文本元素就可以很容易地从 body 继承。 看，是不是很简单。注意：在 IE11 中要小心 f…"}, {"id": "6901909474798206990", "title": "CSS —— 三大特性(层叠、继承、优先级)总结", "desc": "CSS(Cascading Style Sheets)又称为层叠样式表，所以这个第一个特性就是层叠性。 要说层叠性就要先明确一个定义：样式冲突 。因为层叠性就是解决样式冲突的问题的。 一般打开网页，会先下载文档内容，加载头部的样式资源，然后按照从上而下，自外而内的顺序渲染DOM…"}, {"id": "6844904098127413255", "title": "记录文本图标对齐的几种解决方案", "desc": "默认的对齐方式是baseline，也就是x字母的最下面那条线。 这也就回答了第一个问题，浏览器的图片跟文字未额外设置时是基于小写字母x的下边缘为基准，也就是vertical-align:baseline;。 怎么让图片跟文字居中对齐呢，下面来看几种常见的解决方案。 vertic…"}, {"id": "6844903695960801293", "title": "关于flex-shrink如何计算的冷知识", "desc": "假设有一个div内包含三个子div1， div2, div3,宽度分别200px. 对于flex-grow对于剩余空间分配比例的计算相信用过flex布局的都非常熟悉了。这里还是简单列一下计算公式： 假设div1, div2, div3的flex-grow分别设置为 1，2，3.…"}, {"id": "6844903624330461198", "title": "页面渲染机制", "desc": "将HTML构建成一个DOM树（DOM = Document Object Model 文档对象模型），DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。 根据DOM树和CSSOM来构造 Rendering Tree（渲染树…"}, {"id": "6844903844619501576", "title": "《三分钟阅读》CSS对话框小尾巴实现的最佳方式", "desc": "不设置triangle宽高，设置border10像素的透明边框，然后设置top方向边框颜色和父元素一致就可完成这样的效果，同理，变换小尾巴箭头方向只需要在top，bottom，left，right方向上单独设置不同的边框颜色即可。 我们可以看到triangle继承了父元素too…"}, {"id": "6882722361959940110", "title": "栅格布局实现 - BootStrap 版", "desc": "1. 基本点 这是最基本的一点，将盒子模型设置成边框盒子.这样 width 属性指定的盒子宽度就包括 border + padding + content。只要 width 固定，指定 padding 和 border 将不会改变盒子的大小。 2. Container 响应式容…"}, {"id": "6844903539571949576", "title": "超详细教程：纯CSS3写一个摇头晃脑的小哥", "desc": "1.1作为一个刚刚打算要入行的准前端，并没有什么基础，暂时是按照网上的前辈们的指导，按部就班地学习中。首先就要学习CSS3的使用。前期，做过几个比较简单的网站首页的仿制，现在想要试试动画效果的制作。如果有什么写得不对的地方，欢迎批评指正：我要进步！ 1.2没有什么美术基础，不会…"}, {"id": "6926081206417260557", "title": "CSS学习笔记【Grid布局】", "desc": "Flex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指定\"项目所在\"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。 Grid 布局的属性分成两类。一类定义在容器上面，…"}, {"id": "6844903516868182023", "title": "css实现图片背景填充的正六边形", "desc": "最近有个需求需要实现带有图片背景的正六边形，这里记录一下我自己实现的方法。 我项目里的最终效果大概是这样子的，这里我们只演示实现一个正六边形。 这里为了得到一个正的六边形，两个矩形旋转的角度必须为-60deg和60deg，以及矩形高宽比必须是Math.sqrt(3) : 1， …"}, {"id": "6844904115177259022", "title": "昨天网站都变灰了，你知道是怎么做的么？", "desc": "昨天是 2020 年 4 月 4 日，清明节。 这个清明节，我想我们很多人在今后的很多年中都不会忘记，这一刻，我们参与了历史，同时成为了历史的见证者。 2020 年从过年到现在，我们的国家遭遇了非常惨痛的经历，很多英雄在救助他人的路上倒下，更有很多烈士保卫人民的安危遇难，全国下…"}, {"id": "6844903567266938894", "title": "代码质量管理——如何写出优雅的代码", "desc": "作为一个刚写代码不久的小菜鸟，工作的半年多让我越发意识到提高代码质量的重要性。从前只会关注实现功能，慢慢的开始关注性能，现阶段则发现其实还有很多细节也是（如可读性、易用性、可维护性、一致性）提高代码质量的关键。“实现功能”跟“优雅地实现功能”是两码事。 面向对象五大设计模式基本…"}, {"id": "6844903935401000973", "title": "Css3.0-前端排版时的布局", "desc": "space-around: 每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍 flex-start: 与交叉轴的起点对齐。 flex-end: 与交叉轴的终点对齐。 center: 与交叉轴的中点对齐。 space-between: 与交叉轴两端对齐，轴线之间的间…"}, {"id": "6844903736976883725", "title": "盘点 CSS Selectors Level 4 中新增的选择器", "desc": "CSS 选择器在实践中是非常常用的，无论是在写样式上或是在 JS 中选择 DOM 元素都需要用到。在 CSS Selectors Level 4 中，工作组继续为选择器标准添加了更丰富的选择器。下面我们来了解一下。 :is 是一个用于匹配任意元素的伪类，使用方法很简单，只需要将…"}, {"id": "6914811150655979534", "title": "CSS实现两个圆重叠交替", "desc": "解决办法就是使用css-blend-mode:multiply属性来实现，详细可以看css-blend-mode"}, {"id": "6844903689656909831", "title": "CSS实现元素居中原理解析", "desc": "在 CSS 中要设置元素水平垂直居中是一个非常常见的需求了。但就是这样一个从理论上来看似乎实现起来极其简单的，在实践中，它往往难住了很多人。 让元素水平居中相对比较简单：如果它是一个行内元素，就对它的父元素应用 text-align: center；如果它是一个块级元素，就对它…"}, {"id": "6844904062039621645", "title": "（14）把“可以动的盒子”更优雅地展示：③ 常用的“布局” | CSS", "desc": "前言： 拿到一张设计稿，我们首要的就是从宏观上考虑这整个页面的“布局”。随着前端技术的不断更替，以前很多老的布局方式现在也慢慢淡化了，那哪些是我们最基本最常用的布局方式呢？ 本篇给出答案，属于必掌握篇。 从上到下、从左到右、定宽、自适应... 现方式——定宽 + 水平居中。 一…"}, {"id": "6844903519317655565", "title": "CSS 实现左右交换的效果", "desc": "鞋厂的 App 有这么一个效果，而我的小伙伴刚好要做这样一个效果，于是就开始研究到底是怎么做的，Emmmm，大家都知道我平时糊设计图的功底为 0，所以好好研究了一下。： 首先布局用 flex 可以实现，而动画可以用 transform 或者 animation 实现。 这个布局…"}, {"id": "6985323951601762318", "title": "CSS3-过渡", "desc": "transition过渡 transition过渡属性是css3浓墨重彩的特性，过渡可以为==一个元素在不同样式之间变化自动添加“补间动画” 兼容性 过渡从IE10开始兼容，移动端兼容良好 曾几何时，"}, {"id": "6844903827523502093", "title": "圣杯布局进阶版-flex布局实现", "desc": "源码地址：https://github.com/ZYuMing/Blog/blob/master/layout.html效果图：①顶部栏+内容模块+底部栏的高度之和小于浏览器高度②顶部栏+内容模块+底"}, {"id": "6844903943290486792", "title": "移动端适配之一：到底什么是像素", "desc": "最近在做移动端的开发，深入了解了下移动端适配的一些问题，加上自己的理解，记录下来，写一个小的系列博客，与大家分享。所有的问题，就开始从像素说起吧~ 像素是一个经常提到的概念，写CSS的人都经常会用到px作为单位。但是，在移动端，看着分辨率高达1125x2436的iPhone X…"}, {"id": "6844903509125677069", "title": "组件化必杀技：styled-components 简明教程【附视频下载】", "desc": "23 分钟带你学会现代化的组件样式书写方法：styled-components。 通过将 ES6 中的模板字符串（template literals）特性创造性的运用到 CSS 编码上，styled-components 成了前端社区现象级的 CSS-IN-JS 解决方案，能让…"}, {"id": "6844903861858091021", "title": "【译】如何，以及何时使用CSS多列布局", "desc": "当我们把注意力都放在 CSS Grid 布局和 CSS Flexbox 布局的时候，经常忽略了另一种布局方法。在本文中，我将介绍多列布局 - 通常称为 multicol 或者 “CSS Columns” 。通过这篇文章，你了解到使用 columns 的最佳实践，以及一些使用 c…"}, {"id": "6904567443470221325", "title": "浅析 CSS 中的边距重叠", "desc": "现在有两个元素 div1 和 div2 上下紧挨着，中间没有其它元素，它们的外边距就会发生重叠。div1 在上，div2 在下，div1 的 margin-bottom 为 20px， div2 的 margin-top 为 30px，那两个元素应该距离多少呢？ 50px 吗？…"}, {"id": "6844903637685141512", "title": "论低于 12px 字体处理方案", "desc": "浏览器可渲染的最小字号为 12px，但设计图上经常出现小于该值的字体。对于 11px 我往往就按 12px 处理了，可 9px 这样的超小字号处理成 12px 绝对太不地道啊。大家可能都知道通过 transform: scale(n) 能达到缩小字体的效果，但你没有发现并非十分…"}, {"id": "6844904014845313031", "title": "使用 sroll-snap-type 优化滚动", "desc": "根据 CSS Scroll Snap Module Level 1 规范，CSS 新增了一批能够控制滚动的属性，让滚动能够在仅仅通过 CSS 的控制下，得到许多原本需要 JS 脚本介入才能实现的美好交互。 首先看看 sroll-snap-type 可能算得上是新的滚动规范里面最…"}, {"id": "6982376242934726669", "title": "elementUI步骤条：CSS改变步骤条状态样式，进度条跟随到当前步骤，而不是当前步骤完成了才显示颜色。", "desc": "elementUI 步骤条，状态改变进度条的显示： elementUI步骤条原本的进度条显示是步骤2完成了，步骤1和2才显示之间的进度条。 本CSS改成：走到步骤2，1和2之间的进度条就显示。"}, {"id": "6997590944346275876", "title": "tailwind使用指南——常见问题和实践建议", "desc": "tailwind css的实践中有不少小技巧，比如插件和配置，以及和scss等预编译技术的搭配使用。"}, {"id": "6844903841805107214", "title": "css做个波浪悬浮球？", "desc": "？？？啥玩意？？？去他电脑上看了一下才发现是安全软件的那个展示电脑使用情况的悬浮球，WTF！！你见过哪个Linux有这悬浮球的？你咋不让我再给你整一只瑞星小狮子在旁边给你跳舞呢？？算了还是别说了，说了真让我做怎么搞.... 项目使用的是vue框架，所以demo都是在vue环境下…"}, {"id": "6844903605426716685", "title": "前端基础面试题@CSS篇", "desc": "最近出去面了一次试。去之前信心满满，去之后灰头土脸，因为连最简单的“css居中方式有多少种”、“说说js数据类型”这种入门问题竟然回答的支支吾吾，也怪不得面试官20分钟就优雅的把我送了出来。 1、使用伪类。 也可以在父级标签最后添加一个div，div中的属性同伪类。原理其实和伪…"}, {"id": "6844903618789785613", "title": "一个浪漫又悲情的爱情故事——笛卡尔心形线", "desc": "写这篇文章是因为某天看到这样一个公式 r=a(1-cosθ) ，我上网搜了下，原来是笛卡尔心形线的极坐标方程，这个方程里面的确有一个浪漫又悲情的爱情故事，感兴趣的朋友可以点这里看看，而至于这个故事是真是假，这 并不重要。 而这篇文章的目的是要用前端的方式，画出笛卡尔心形线。 本…"}, {"id": "6996651496007794701", "title": "纯CSS绘制椭圆与平行四边形", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 border-radius 我们都知道的一个常用的CSS属性: border-raduis，通过它可以设置DOM元素的4个角的的半圆。例如"}, {"id": "6844903696854155277", "title": "浏览器原生支持平滑滚动", "desc": "浏览器从去年年底开始，已经开始支持浏览器的原生平滑滚动定位，CSS scroll-behavior属性和JS scrollIntoView()方法都可以。 scroll-behavior:smooth写在滚动容器元素上，可以让容器（非鼠标手势触发）的滚动变得平滑。 我们先看一个…"}, {"id": "6844903588586586126", "title": "聊聊 cube-ui 的技术内幕", "desc": "cube-ui 是滴滴去年底开源的一款基于 Vue.js 2.0 的移动端组件库，主要核心目标是做到体验极致、灵活性强、易扩展以及提供良好的周边生态—后编译。 自 17 年 11 月开源至今已有 5 个月，在这个过程中 cube-ui 受到了不少的关注，同时从社区中也收到了很多…"}, {"id": "6999589446324584479", "title": "CSS3 常见边框汇总", "desc": "CSS3 常见边框汇总 效果如下： 爱心 效果如下： 它其实是下面这两个盒子叠起来的： 改变 .heart::after 的 left值，即可叠起来。"}, {"id": "6996633495841800200", "title": "css3学习第一天", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：更文挑战 css3 css3 css3一些改变： 盒模型 弹性盒 媒体查询 background的改变： transition:过渡 transform"}, {"id": "6999589369048727588", "title": "Css之布局样式与非布局", "desc": "一、非布局样式 CSS中，有很多非布局样式，这些样式（属性）和与布局无关，包括： 字体、字重、颜色、大小、行高 背景、边框 滚动、换行 装饰性属性（粗体、斜体、下划线）等。 这篇文章，我们来对上面的部"}, {"id": "6844903878966640654", "title": "太惊艳了，这些画都是CSS的杰作！", "desc": "今天给大家分享一些CSS绘画大师的作品，实在是太惊艳了，有的作品真的难以想象是CSS画出来的，希望大家能从这些作品里找到灵感，说不定哪天你也会成为CSS绘画大师！贵妇油画作者：DinaSmith 项目"}, {"id": "6844904034281734151", "title": "梳理 CSS 模块化", "desc": "最近年底，抽出一点时间总结了一下 css 的模块化。 行内样式，即直接在 html 中的 style 属性里编写 css 代码。 内嵌样式，即在 html h 中的 style 标签内编写 class，提供给当前页面使用。 导入样式，即在内联样式中 通过 @import 方法，…"}, {"id": "6992013294470955038", "title": "屏幕分辨率和css技巧", "desc": "1.目前台式电脑与笔记本适配测试数据以下为参考数值： 台式机和笔记本电脑的分辨率：2560x1440 1920x1200 1680x1050 1600x1200 1440x900 1366x768 1"}, {"id": "6844903844455907336", "title": "前端性能优化指南", "desc": "发现总结性的小干货可以为大家提升更好的开发技巧和编码思维，对代码量产化提供更扎实的质量和支持。这次我们来聊聊大家可能都比较关心的话题：性能优化。 一说到页面的性能优化，大家可能都会想起雅虎军规、2-5-8原则、3秒钟首屏指标等规则，这些规则在开发过程中不是强制要求的，但是有时候…"}, {"id": "6978743605905063972", "title": "浅谈前端 | CSS如何让页面更漂亮", "desc": "这是我参与更文挑战的第28天，活动详情查看： 更文挑战 前言 HTML是网页的骨架，架子搭好了就需要为架子添加装饰了，CSS就是为HTML添加样式让其变得更漂亮~ CSS简介 CSS全称Cascadi"}, {"id": "6976064801562853412", "title": "两个小技巧，使css的animation动画更好地开始和结束", "desc": "两个实用小技巧让css animation动画更加符合直觉，以实现一个下载按钮的动画为例子介绍animation-delay属性和animationiteration事件。"}, {"id": "6844903598980071438", "title": "CSS动画之旋转魔方轮播", "desc": "很久没有回头来复习CSS方面的知识了, 正好又到了月底写文章的deadline...... 之前都是在SF上发的文章, 掘金是第一次。 所以这次选择了详细巩固一下CSS3动画有关的知识点,因为之前只是用过一些属性并没有深究细节。 在我自己写完这篇文章的时候, 才觉得CSS确实能…"}, {"id": "6844903865280659464", "title": "CSS进阶（3）——深入理解content", "desc": "在了解content之前，我们需要掌握CSS中一种常见的元素——替换元素。替换元素是“内容（content）可以被替换”的元素，常见的有“input”、“img”、“iframe”、“video”等。以图片为例 《img src=\"1.png\" /》我们只需要将src的图片替换…"}, {"id": "6844903637680914445", "title": "「译」CSS语义化还是前端架构？", "desc": "CSS语义化其实是不利于CSS复用的"}, {"id": "6926019010622390280", "title": "css 盒子模型", "desc": "1. css 盒子模型（box model） 2. 举一个例子： 4. 怪异盒模型和标准和模型的兼容性问题： 5. css 指定盒子模型的种类："}, {"id": "6919065304316411912", "title": "用CSS 实现彩色圆盘 [动画演示] [#6持续更新中.....]", "desc": "本文是 #6 Missing Slice，实现彩色圆盘。 主要解决思路就是给每个边设置不同颜色。 1. body 使用 display:flex， 创建一个div并且居中 2. 设置 border 宽度和样式 上下左右的 border 都为 100px。换句话说就是div的长宽…"}, {"id": "6972601052281438222", "title": "css修改浏览器默认的滚动条样式", "desc": "浏览器自带的滚动条样式多少有一点呆板,为使在项目中UI美观,所以重写了滚动条样式 要注意是哪个容器产生的滚动条 就把伪类的样式加到哪个容器上 1.html 2.css 3.最终效果"}, {"id": "6844903689384116238", "title": "神奇的background——绘制图形", "desc": "相信大家在平时工作中少不了会被要求在某些元添加一些特殊的背景图片，这时候通常就拿起ps就是切切切。不说这种方式麻烦，有ui给你切好的情况已经不错，没有的就有自己动手。还可能有需要切一整张超大图的情况。作为一个“优秀”的前端，本着自己动手丰衣足食的理念，下面给大家介绍用backg…"}, {"id": "6844903503542894599", "title": "基于node实现文件路径替换", "desc": "本次分享一个简易路径替换工具。功能很简单，重点在于掌握：递归遍历文件夹目录 正则替换目标内容、解压上传文件，返回更新后的压缩文件"}, {"id": "6844903721407610893", "title": "[译] 如何根据浏览器的现代、过时进行包的分发", "desc": "A website today receives a large chunk of its traffic from evergreen browsers — most of which have good support for ES6+, new JavaScript st…"}, {"id": "6844903711488081933", "title": "[译] 如何用函数式 CSS 简化样式工作", "desc": "Do you dread styling your apps? Fear that a change might break the styles you crafted through many hours of labour? I'm here to tell you th…"}, {"id": "6844903496630665230", "title": "如何使用Flexbox和CSS Grid，实现高效布局", "desc": "在现代网页设计时代，使用Flexbox和CSS Grid来对齐元素，变得相对容易起来。"}, {"id": "6844903510392193032", "title": "分享17点PC浏览器前端优化策略——网络加载篇", "desc": "PC端优化的策略很多，如 YSlow（YSlow 是 Yahoo 发布的一款 Firefox 插件，现 Chrome 也可安装，可以对网站的页面性能进行分析，提出对该页面性能优化的建议）原则，或者 Chrome 自带的 Audits 等，总结起来主要包括网络加载类、页面渲染类、…"}, {"id": "6911644105554690056", "title": "原生图片预览实现及由此引出的图片自适应宽高问题探索", "desc": "如果在原生网页中使用插件，那必不可少的要引入一堆东西（并不是鄙视插件，只是为了引入下文，见谅嘿嘿）；但又不是说所有的页面都要用框架... 大概流程就是：可以点开大图观看、可以左右滑动切换、进入预览时可以从你当前点击的那一张开始浏览。 熟悉笔者的都知道：笔者提倡“尽可能的使用CS…"}, {"id": "6981852435170099213", "title": "10 個使用 CSS 的漂亮文字效果", "desc": "查看使用 CSS 的 15 個最佳文本效果 IF YOU LIKE AIRTICLE THEN CHECK MORE 50+ Cool CSS Text Effects   CSS Perspecti"}, {"id": "6844903507376635912", "title": "CSS 渐变背景在线设计工具", "desc": "支持新增删除颜色节点，支持选取颜色，支持改变角度，支持随机生成渐变色，还提供了默认的一系列渐变色供选择"}, {"id": "6947539868071231502", "title": "清除浮动方式（持续更新）", "desc": "float:left;或right。可以让元素脱离标准文档流，向左或向右贴靠。传言浮动刚开始设计出来是为了让文字围绕图片环绕显示，后面被开发者们用来布局。 当一个父盒子内部的子元素全部浮动起来的时候，子元素就脱离了标准文档流。父盒子的高度就会塌陷，影响到后面的布局。 1. 给父…"}, {"id": "6844903512132976647", "title": "uiw 1.2.17 发布，基于 React 16 的组件库", "desc": "发布， 高品质的UI工具包，React 16+的组件库。 🐞 修复没有代码检测文件匹配*.css。 5712887 🌟 添加 .editorconfig 文件. d82dabf 📝 Tree组件添加文档。 c459fe7 🌟 添加新的组件Tree。 b10f140 🐞…"}, {"id": "6844903629191643144", "title": "前端文本多行省略的完美解决方案", "desc": "在前端中单行显示可以很简单的用css完成；但是在实际的开发中会存在很多的多行省略，在网上找了很多方式都不能很好的解决问题。主要的问题是： 中文和英文不能简单的通过自负串长度去处理字符串：100个中文可能足够了，但是100个长度的英文可能只是几个单词 每个中文和英文的宽度不一样，…"}, {"id": "6908953585581588487", "title": "【Ten Mins Effect】 - 03 用户账户下拉菜单效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现要给简单精美的 css 效果。 现在，就只剩下上面提出的关键点了，我们一一分析。"}, {"id": "6972165123578265637", "title": "z-index属性", "desc": "1. 首先使用z-index需要先加上position:absolute/relative定位 这里不写代码了, 画图表示一下 123三个盒子, 都是兄弟关系, 都有定位的话, 2号盒子设置z-ind"}, {"id": "6844903841402486792", "title": "摩拜前端周刊第7期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜彻底揭秘keep-alive原理地址：https://juejin.im/"}, {"id": "6997993033799041037", "title": "【动画消消乐】HTML+CSS 自定义加载动画 069", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度：48px 高度：6px bor"}, {"id": "6973562604581027853", "title": "CSS之圣杯布局与双飞翼布局", "desc": "一、圣杯布局与双飞翼布局 首先我们需要知道两种布局的需求是什么。 需求都是实现如下的三列布局，（重点！！） 1、两侧内容宽度固定，中间内容宽度自适"}, {"id": "6995342987651874824", "title": "第3章 用CSS3装饰网站", "desc": "HTML5＋CSS3＋JavaScript Web 前端开发案例教程（慕课版），微信读书中找到的学习Web前端书籍，第3章开始啦，耶(＾－＾)V"}, {"id": "6994345926668058654", "title": "多行展开收起效果的三种解决方案", "desc": "浮动元素是如何定位的，当一个元素浮动之后，它会被移出正常的文档流，然后向左或者向右平移，一直平移直到碰到了所处的容器的边框，或者碰到另外一个浮动的元素。"}, {"id": "6844903704567644167", "title": "移动端rem怎样适配", "desc": "假设现在图上有个宽度100px的按钮，UI图是750px的图。 答案是我们应该写 100px / 2 = 50px。css里width = 50px; 就这样。 那为什么是100px除以2呢？？？因为iPhone的dpr = 2。 dpr的全称是window.devicePix…"}, {"id": "6969470924022087716", "title": "学习 filter属性 和 常用方式", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 filter属性 filter CSS属性 将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。 原图 blur(px)"}, {"id": "6979471820575473671", "title": "CSS简易毛玻璃效果", "desc": "CSS 毛玻璃效果 一、什么是毛玻璃效果？ 二、如何实现？ 三、兼容问题？摘自掘金，让代码丰富你的生活！"}, {"id": "7001881637763956773", "title": "# 背景图", "desc": "背景图 background-image:url(); 控制背景图是否重复：background-repeat background-repeat:repeat;​ 默认情况 重复 backgroun"}, {"id": "6997570073959333901", "title": "一文了解CSS3文本新增的东西 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 针对文本，CSS3新增了一些属性 1. tab-size 2. word-break 3. word-wrap/overflow-wrap"}, {"id": "6999116838990938120", "title": "CSS3常用属性及效果汇总", "desc": "一、边框 1.1 border-radius 圆角 1、border-radius的值可以为绝对单位px，和相对单位em，rem，也可以为百分比，值越大，弧度越大。 2、属性值位数不同时，表现也不同，"}, {"id": "6925657061627789325", "title": "从矩阵与空间操作的关系理解 CSS3 的 transform（科普文）", "desc": "注：文中图片取材于线性代数的本质并加以合适的修改！推荐大家去观看这套视频，另外这套视频毕竟是一套数学性质的视频，不包含 css 的相关讲述，这篇文章将借鉴这套视频的思路为你讲述 css 变换的原理。 很多同学在大学时期都学过一本叫做线性代数的书，如果没猜错的话，你们的老师在教学…"}, {"id": "6944674906684686366", "title": "2020 网络年鉴：热门的前端框架依然是互联网的一小部分", "desc": "HTTP Archive 最近完成了 2020 网络年鉴，一份关于网络状况的年度报告。这份报告从四个部分（页面内容、用户体验、内容发表和分发）中的 22 个章节和 600 页中得出结论：jQuery 的使用率仍然高达 80%；CSS Houdini 很少被使用；2020 年网站…"}, {"id": "6977523853077512199", "title": "css 属性之 transition-timing-function 和 animation-timing-function", "desc": "css 计时函数是一个（数学）函数，它指定被动画化或从一个值转换到另一个值的物体随着时间的推移的速度。其主要用作于 `transition-timing-function`…"}, {"id": "6844903670652338183", "title": "Vuejs 配合 mint-ui 开发移动端web", "desc": "这是一个比较着急的事情（两天时间，写一个带视频播放、图片浏览、图文混排列表、上拉刷新、滚动刷新等等的单页），一开始同事使用传统H5+JS+CSS的方式，我担心进度，就硬着头皮上vuejs，为什么说硬着头皮上，原因是这是第二次在项目中使用vuejs，第一次使用的经历并不太好，主要…"}, {"id": "6844903569917739021", "title": "webpack打包之后的文件过大的解决方法", "desc": "以前一直使用create-react-app这个脚手架进行react开发，后面因为一些自定义的配置，转而使用webpack搭建一套自己的脚手架。但是在使用webpack打包之后发现，纳尼？怎么文件这么大？？？ 于是研究了一下如何处理webpack打包之后文件太大的情况，简单记录…"}, {"id": "6979230572946145317", "title": "聊聊怎么学css吧", "desc": "卖个关子 算不上很频繁吧，但是还是尝尝会看到很多吐槽说“前端超级简单的，就是css太麻烦了”，HTML虽然简单，但是太枯燥了吧，诸如此类的话语，"}, {"id": "6975531630836318222", "title": "纯css实现：单行文本的打字机动画效果", "desc": "今天准备给个人博客的时间线页面添加一个动态打字的效果，之前的打字机效果我一直用JS实现的，不过今天我打算来尝试一下用css实现打字机的效果。"}, {"id": "6911149782446669838", "title": "CSS字体，从Level 1到Level 3", "desc": "本文是阅读 CSS 标准文档的笔记，也是对 CSS 字体相关知识的一个梳理。 CSS 1 定义的字体属性包括：font-family、font-style、font-variant、font-weight、font-size和font。其算法要求 UA(User Agent，用…"}, {"id": "6886348996990730253", "title": "CSS的书写顺序对性能的影响你知道么？", "desc": "$\\color{FF0000}{PS：对于是否是真的会影响性能，下面做一个实验。}$ $\\color{FF0000}{貌似对css的计算是有些许影响，但是最终浏览器的总时间并没有太大出入(多次的平均值)。}$ PS：记得chrome有一个timline选项的，但是找不到了，不知…"}, {"id": "6973307952836902920", "title": "揭秘CSS中的background模块", "desc": "css里的background模块提供了各种方式来设置背景图。了解一些常用的属性基本就能覆盖工作的大部分场景，但为了能更灵活地使用css背景，还是很有必要全面地认识并理解其中的知识."}, {"id": "6906845910157525000", "title": "sass和 less的区别", "desc": "Sass (Syntactically Awesome Stylesheets)是一种动态样式语言，Sass语法属于缩排语法，比css比多出好些功能(如变量、嵌套、运算,混入(Mixin)、继承、颜色处理，函数等)，更容易阅读。 Sass的缩排语法，对于写惯css前端的web开…"}, {"id": "6844903682132148238", "title": "CSS并不简单：多栏布局（Multi-Columns Layout）", "desc": "多栏布局的结构很简单，主要由multi-column container和column box组成。 当一个元素设置了column-width和column-count属性并且值不为auto，那么这个元素就是multi-column container。 multi-colum…"}, {"id": "6844903608253693960", "title": "页面性能优化办法有哪些？", "desc": "互联网有一项著名的8秒原则。用户在访问Web网页时，如果时间超过8秒就会感到不耐烦，如果加载需要太长时间，他们就会放弃访问。大部分用户希望网页能在2秒之内就完成加载。事实上，加载时间每多1秒，你就会流失7%的用户。8秒并不是准确的8秒钟，只是向网站开发者表明了加载时间的重要性。…"}, {"id": "6999457543047086117", "title": "css3属性之box-reflect", "desc": "box-reflect也就是倒影特效 语法如下： 属性说明： none：默认值，表示无倒影。 direction：生成倒影的方向，above、below、left、right 分别代表上下左右。 of"}, {"id": "6844904119216373768", "title": "人们不使用CSS新功能的5个原因", "desc": "尽管每年都会开发和发布新的CSS特性和属性，但web开发人员很少学习它们或在他们的项目中使用。 这是一个问题，因为CSS工作组（维护和改进CSS规范的开发人员团队）通过查看这些新功能的采用率来衡量成功与否。 这是一个鸡生蛋还是蛋生鸡的问题。如果社区不采用和实现新特性，工作组就不…"}, {"id": "6844904051369328648", "title": "CSS in JS的好与坏", "desc": "CSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。简单来说CSS-in-JS就是将应用的CSS样式写在JavaScript文件里面，而不是独立为一些.css，.scss或者less之类的文件，这样你就可以在CSS中使用一些属于JS的诸…"}, {"id": "6935679549300867102", "title": "Web 帧动画解决方案 - WebGL实现透明视频动画", "desc": "作为前端同学，或多或少都会接到动画需求。目前动画效果越来越酷炫，动画的绘制难度也逐渐增大。在上述两篇文章中都各自讲述了 APNG、Lottie 的原理、优缺点等，今天要讲的主题是 Video 实现动画"}, {"id": "6991653343751831565", "title": "前端笔记-CSS清除浏览器默认样式｜8月更文挑战 ", "desc": "上图我们可以看出虽然我对div和p没设置任何外边距内边距，但是他们之间还是会出现间隔。这是因为浏览器给他们设置了默认的边距。设置了默认值不要紧，但是不同浏览器会设定不同的默认值，这种默认样式在开发中会"}, {"id": "6844903682140553229", "title": "像滤镜一样改变字体颜色", "desc": "既然这样，那么我们给伪元素也来和窗口运动刚刚相反的动画吧，这样相对浏览器不就是静止了吗..."}, {"id": "6984782638502543396", "title": "【CSS】面试题总结 - 基础知识总结 - 复习专用 - 前端面试必备 - 吐血整理", "desc": "> CSS入门挺简单，但是想要精通CSS还挺难的~今天整理一些面试题，面试题说明是最常用最基础的最容易混淆的一些知识点，用来复习CSS也是很不错的选择 > 学无止境，不定期持续更新中......"}, {"id": "6925311725042892813", "title": "Css一些小样式", "desc": "IE不支持Can I use... Support tables for HTML5, CSS3, etc 猫头鹰选择器，因为+这种方式酷似猫头鹰，被称为猫头鹰选择器。 IE7，8不支持 Can I use... Support tables for HTML5, CSS3, …"}, {"id": "6977780984519819271", "title": "新支持的现代CSS伪类选择器指南", "desc": "伪类选择器是以冒号字符\":\"开始的，根据当前元素的_状态_进行匹配。这个状态可能是相对于文档树而言的，也可能是对状态变化的反应，如:hover 或:checked 。 :any-link 虽然定义在选"}, {"id": "6844903638289252360", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （下）", "desc": "终于有时间静下心学点东西，把这个系列最后一篇填上。 中篇 介绍了 tachyons, 本篇介绍个人的最爱，没有之一：styled-jsx。 zeit 的一系列产品从 now，到 next.js，我算是一个脑残粉。简洁好用是我对 zeit 的项目的印象。而且一套库自成系统，sty…"}, {"id": "6952707054524071972", "title": "Flex布局", "desc": "Flex布局Flex意为“弹性布局”，任何一个容器都可以指定为Flex布局，用来为盒状模型提供最大的灵活性。"}, {"id": "6973450636897550366", "title": "「HTML+CSS」--自定义加载动画【025】", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置css样式 宽度、高度均为36px 边框：20px sol"}, {"id": "6997306325109571614", "title": "css 自用学习笔记（二）——函数、颜色、单位", "desc": "函数 attr() 返回所选元素的属性值 2.calc() 允许执行计算来确定 CSS 属性值 cube-bezier(p0,p1,p2,p3) 函数定义三次贝塞尔曲线(速度变化) P0 和 P3 是"}, {"id": "6993503309608779790", "title": "纯css实现倾斜tab切换，并且加上两边圆角", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战  前端开发过程中难免会遇到倾斜的tab设计，并且两边要做成圆角效果，如下图： ​ 我的想法：     1. 给每个tab项设置transfo"}, {"id": "7004224200961425438", "title": "动画、less、scss使用的总结", "desc": "less与sass的使用 less 框架应用 1复用 命名前面加上@可以进行复用 2局部使用：局部使用只能在花括号里使用 3嵌套 3mixins混入技术 数值可以运算 可以进行加减乘除 除法需要用括号"}, {"id": "7004115137929936933", "title": "CSS3学习的一些细节（1）", "desc": "CSS3学习的一些细节，记录了有关选择器、文本和背景的一些便捷操作，以及对CSS3语法的一些尝试和思考"}, {"id": "6997246221278527525", "title": "CSS自用学习笔记（一）——选择器", "desc": "选择器 基本选择 .class .class1.class2 .class1 .class2 #id * element element.class element1，element2 element"}, {"id": "6854573220306255880", "title": "最强大的 CSS 布局 —— Grid 布局", "desc": "Grid 布局即网格布局，是一种新的 CSS 布局模型，比较擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。号称是最强大的的 CSS 布局方案，是目前唯一一种 CSS 二维布局。利用 Grid 布局，我们可以轻松实现类似下图布局，演示地址 讲到布局，…"}, {"id": "6950209377403928584", "title": "听说过CSS in JS，还有JS in CSS?", "desc": "Houdini是一组底层API，它公开了CSS引擎的各个部分，从而使开发人员能够通过加入浏览器渲染引擎的样式和布局过程来扩展CSS。从而创建新的CSS功能，而无需等待它们在浏览器中本地实现。"}, {"id": "6844903683411410951", "title": "前端常用插件、工具类库汇总，不要重复造轮子啦！！！", "desc": "在开发中，我们经常会将一些常用的代码块、功能块进行封装，为的是更好的复用。那么，被抽离出来独立完成功能，通过API或配置项和其他部分交互，便形成了插件。 下面这些是我在工作中积累的一些常用的前端开源插件，这里只是罗列出来，详细的用法各个插件官网或者Gayhub都有介绍。注意：往…"}, {"id": "7002491953019355173", "title": "🔥CSS的伪类/元素选择器，我也想你学会！！！", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 场景引入 前端攻城狮们大都或多或少地接触过CSS伪类和伪元素，比如最常见的:fo"}, {"id": "6966042926853914654", "title": "CSS 文本超出提示效果", "desc": "在 mac 文件管理中有这样一个小细节。 当文件名不超过一行时，完整显示，此时鼠标放上去无任何提示 当文件名超过一行时，出现省略号，此时鼠标放上去提示显示完整文件名。一起看看如何实现吧"}, {"id": "7005501410787737631", "title": "用CSS制作中秋之夜星星闪烁动效", "desc": "Hello!掘金的小伙伴们大家好，我是 妖孽哪里逃 前端菜鸡,这是我的第一篇技术文章,[ 用CSS制作中秋之夜星星闪烁动效 ] 欢迎前来阅读"}, {"id": "6995778614079799327", "title": "使用 HTML、CSS 和 JavaScript 制作的随机密码生成器", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 随机密码生成器🙈 🎼 写在前面的 随机密码生成器 是一个简单的 JavaScript 应用程序，可以自动生成密码。这种类型的应用程序使用各"}, {"id": "6861501624993447950", "title": "CSS八种让人眼前一亮的HOVER效果", "desc": "巧用伪元素:before、:after等，让你的页面按钮眼前一亮。更多内容：https://github.com/reng99/blogs"}, {"id": "6984599136842547213", "title": "CSS 奇思妙想 | 巧妙的实现带圆角的三角形", "desc": "之前在这篇文章中 -- 《老生常谈之 CSS 实现三角形》，介绍了 6 种使用 CSS 实现三角形的方式。 但是其中漏掉了一个非常重要的场景，如何使用纯 CSS 实现带圆角的三角形呢？，像是这样： 本"}, {"id": "6937102296442470413", "title": "奇思妙想 CSS 文字动画", "desc": "本文将会和这篇 -- CSS 奇思妙想边框动画类似，讲一些文字效果，利用不同的属性搭配，实现各式各样的文字动效。 在写各种 DEMO 的时候，有的时候一些特殊的字体能更好的体现动画的效果。这里讲一个快速引入不同格式字体的小技巧。 当我们相中了一个我们喜欢的字体，它也提供了非常快…"}, {"id": "6866914148387651592", "title": "「一劳永逸」48张小图带你领略flex布局之美", "desc": "48张图带你从0到1掌握flex布局方式。 需要本文的Xmind导图的话，移步公众号--前端UpUp,回复flex关键字即可。 从上面图来看，我们将flex布局分为两部分讲，轴和容器。 打个预防针，flex布局涉及到12个CSS属性，父容器,子容器各6个。 接下来先梳理常见的属…"}, {"id": "6994101950375526408", "title": "学透CSS-一次性解决text-justify，text-orientation等冷门属性文本属性（下） （连载中）", "desc": "text-justify，text-orientation,text-combine-upright等等属性，虽然冷门，但是在特定场景仍有妙用，赶紧学习把！！！"}, {"id": "6976792239393472520", "title": "Web 动画原则及技巧浅析", "desc": "在 Web 动画方面，有一套非常经典的原则 -- Twelve basic principles of animation，也就是关于动画的 12 个基本原则（也称之为迪士尼动画原则），网上对它的解读"}, {"id": "6997953156730585119", "title": "【HTML干货分享 | 建议收藏】挑战最短时间带你走进HTML（十九）", "desc": "感激相遇 你好 我是阿ken 在 CSS3 之前，如果需要为页面设置变形效果，需要依赖于图片、Flash 或 JavaScript 才能完成。CSS3 出现后，通过 transform 属性就可以实现"}, {"id": "6997332019445235743", "title": "CSS H5 移动端ios/Android兼容性技巧", "desc": "理解一下meta 禁止复制、选中文本 IOS中input键盘事件keyup、keydown、keypress支持不是很好, 用input监听键盘keyup事件，在安卓手机浏览器中是可以的，但是在ios"}, {"id": "6973849126609879047", "title": "CSS ::marker 让文字序号更有意思", "desc": "本文将介绍 CSS 中一个比较有意思的新增伪元素 ::marker，合理使用，让文字序号变得更加的有意思！"}, {"id": "7006625681865965604", "title": "CSS 代码重构与优化之路", "desc": "CSS 代码重构与优化之路：我们写CSS代码时，不仅仅只是完成页面设计的效果，还应该让CSS代码易于管理，维护。我们对CSS代码重构主要有两个目的：提高代码性能，提高代码的可维护性。"}, {"id": "6881546676188741645", "title": "我写CSS的常用套路·续", "desc": "前言前篇传送门：猛戳这里其实大多数的技巧前篇都已经讲完了，本文算是具有补充性质的番外篇吧0.03D方块如何在CSS中创建立体的方块呢？用以下的SCSSmixin即可方块的长度、高度、深度都可以通过CS"}, {"id": "6998826892673417247", "title": "学透CSS- 让你的文字活起来- style/小型大写字母", "desc": "文字应该是网页中最常见的元素了，俗话说的好，见字如见人。下面请欣赏两幅书法作品，我相信即使你不懂书法，也能看到出来哪副作品好吧！！！ 如果你非要说第一个比较好看，那我也只能表示:"}, {"id": "6963445854589960206", "title": "一种巧妙的使用 CSS 制作波浪效果的思路", "desc": "本文将会再介绍另外一种使用 CSS 实现的波浪效果，思路非常的巧妙！实现动画的整个过程，动画负延迟时间的运用，都是有一些参考学习意义的。"}, {"id": "6943062740281851935", "title": "TailwindCSS", "desc": "Tailwind CSS 是一个可定制化的 CSS 框架，最大的特点是功能类优先，和我们知道的bootstrap，element ui，antd，veui等框架一样。将一些CSS样式封装好，用来加速我们开发的一个工具。 简单理解 TailwindCSS 就是 CSS 的 lod…"}, {"id": "6844903641485148173", "title": "CSS中重要的BFC", "desc": "CSS中有个重要的概念BFC，搞懂BFC可以让我们理解CSS中某些原本诡异(??)的地方。 1. 简介 在解释BFC之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流、普通流三种。而普通流其实就是指BFC中的FC。FC(Formatting Context)，直译过来…"}, {"id": "6844903516897542158", "title": "CSS定位属性详解", "desc": "在介绍postion之前，有必要先了解下文档流。 简单说就是元素按照其在 HTML 中的位置顺序决定排布的过程。HTML的布局机制就是用文档流模型的，即块元素（block）独占一行，内联元素（inline），不独占一行。 一般使用margin是用来隔开元素与元素的间距；padd…"}, {"id": "6970953585831968804", "title": "css揭秘 - 背景与边框", "desc": "这是css揭秘系列文章的第一篇，本篇主要介绍使用css可以实现的边框与背景。包括多重边框、水平条纹、垂直条纹等等。"}, {"id": "6964212383124291621", "title": "CSS 代码总结", "desc": "目录 基础知识 placeholder 输入提示设置 css 单行、多行文本省略号 图文不可选择 css -表单验证 你不知道的 css ios 基础 css 总结 placeholder 输入提示设"}, {"id": "6953200320256147464", "title": "玩转CSS的艺术之美-背景 | 小册免费学", "desc": "background这个属性有很多子属性，倘若真正的掌握了CSS背景的各种属性和用法，真的是可以当画布画画了。"}, {"id": "6844904168038072334", "title": "BFC、Flex box,一文带你探索CSS布局定位的奥秘", "desc": "相信所有前端开发者的入门课，都是从div和css开始的，CSS作为基础中的基础，除了让页面因为样式而变得丰富美观外，更是决定了页面元素的排列布局，然而很多时候，当我们对CSS一知半解，我们总会在开发中遇到元素不能按照我们所想的那样呈现出来的问题，所以本文就来系统的讲讲CSS的布…"}, {"id": "6963255359985156110", "title": "【不一样的CSS】深入理解 overflow (溢出要学会处理)", "desc": "【不一样的CSS】深入理解 overflow (溢出要学会处理) overflow 的基本属性自定义滚动条 获取滚动条高度 块格式化上下文 创建 BFC resize 属性 text-overflo"}, {"id": "6844903577715113998", "title": "移动端适配-REM", "desc": "我们可以用红蓝绿可以调配出任何颜色,我们常说的手机像素就是由许多红蓝绿组成的一个小块,1个小块表示1个像素. 上图,横向有7个小块 纵向有7个小块,表示7*7像素. 因为在尺寸没有改变的情况下.物理像素增加.因此css中的1px并不能等于设备的1个物理像素. 目前主流的做法是用…"}, {"id": "6993722707049185311", "title": "写的 height:100% 不起作用的原因", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：“8月更文挑战“ ##为什么写的height:100%不起作用？ ###1.百分比宽高的设定 按照w3c中的width和height属性，可以明确%设定宽"}, {"id": "6844903560266645511", "title": "better-scroll滚动排坑", "desc": "BetterScroll号称目前最好用的移动端滚动插件，因此它的强大之处肯定是存在的。要不...哈哈。个人感觉还是很好用的。这篇文章不是笼统的讲BetterScroll，而是单讲滚动，想要深入了解它，请移步或者这里。 绿色部分为 wrapper，也就是父容器，它会有固定的高度。…"}, {"id": "6844903506185289735", "title": "关于移动端开发1px边框的一些理解及解决办法", "desc": "学习前端方向也有一段时间了，起初做过一些项目，总是发现做完之后自己的边框会变得比较粗，后面翻阅了部分资料慢慢的才了解了这个问题，大致列举了几种解决的办法。 在window对象中有一个devicePixelRatio属性，他可以反应css中的像素与设备的像素比。然而1px在不同的…"}, {"id": "6992931175417413639", "title": "什么是BFC？BFC的使用场景是什么？", "desc": "1. BFC的含义 2. 触发BFC的方式： 3. 实际例子（两端固定，中间自适应） 以浮动为例： 可以看到图中.center的宽度被两个浮动的元素压在了下面，若是想实现两边固定中间自适应，只需要给."}, {"id": "6844904053210628104", "title": "[译] 使用 CSS object-fit 属性裁剪图片", "desc": "contain：保持图片原始的长宽比，调整图片尺寸，使高度或宽度（两者中较长的一个）能够适应给定的尺寸。 cover：保持图片原始的长宽比，图像区域完全被图片完全覆盖。 fill：默认值。图片完全填充于图像区域，即使付出会损失原始长宽比的代价。 none：图片尺寸不会被调整。原…"}, {"id": "7004394253149274126", "title": "锦旗，表格", "desc": "锦旗 的制作 注：空盒子不给宽高，给盒子边框100px，加粗，字体会自动放到右下角 表格 table:定义表格，表格元素最外层元素 th：定义表格的表头 tr：定义表格的行 td：定义表格单元（书写内"}, {"id": "6984215676097396750", "title": "手把手教你系列之CSS基础-下", "desc": "书接上回，没有看我写的手把手教你系列之CSS基础-上的同学赶紧去看一下吧！本次我们要讲解的是CSS3动画系列以及非常重要的移动web适配的四种方案，分别是流式布局、flex布局、rem布局以及栅格系统"}, {"id": "6997379312399679502", "title": "小白入门前端必懂之盒子模型", "desc": "你是不是开始入门前端的时候，总是对于网页布局有着神一样的向往，特别希望自己能赶紧做出像淘宝、京东等页面来，认为达到这种程度就离真正的前端不远了！"}, {"id": "6997381542985236511", "title": "【JavaWeb基础 · CSS--盒子模型、边框、外边距和内边距】", "desc": "“这是我参与8月更文挑战的第17天，活动详情查看： 8月更文挑战” 盒子模型 什么是盒子模型？ 所有 HTML 元素可以看作盒子，在 CSS 中，\"box model \"这一术语是用来设计和布局时使用"}, {"id": "6963872547649617951", "title": "【夯实基础--CSS】=＞复合选择器", "desc": "CSS复合选择器 复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的 「1. 后代选择器」 又称为包含选择器 用来选择元素或元素组的子孙后代 其写法就是把外层标签写在前面，内层标签写在后面，"}, {"id": "6844903669171748877", "title": "制作60fps的高性能动画", "desc": "说到web的高性能动画，这部分内容其实已经是老生常谈的了，不过其中还是有不少比较新的而且非常实用的内容可以和大家分享一下。 读完这篇文章后相信大家都会对动画渲染的机制以及制作60fps动画的关键要素有足够的理解，以后遇上了动画相关的问题也可以很好的从源头上解决。 动画帧率可以作…"}, {"id": "6974771550943707143", "title": "CSS |  css实现居中的最全汇总", "desc": "这是我参与更文挑战的第9天，活动详情查看 更文挑战 居中是我们开发的过程中经常会用到的，水平居中，垂直居中，宽高固定，宽高不固定等，不一样的情况，实现的方法也不同，本文主要对各种情况的居中做一个完整的"}, {"id": "6844903838709710856", "title": "常用的Css函数", "desc": "1. attr() 2. calc() 3. linear-gradient() 4. radial-gradient() 5. repeating-linear-gradient()"}, {"id": "6844903502288797709", "title": "软软的 Echarts", "desc": "一种 Echarts 的屏幕适配的方案。"}, {"id": "6844903661139656718", "title": "JS脚本异步加载浅析", "desc": "在梳理知识点的时候，发现作为浏览器渲染中的机制之一——异步加载机制，当用户访问站点，需要下载各种资源，例如JS脚本，CSS，图片，iframe等，它是实现现代网站进行加载页面时一种必不可少的手段。查资料加上老师拓展课程均对于异步加载机制还有很多方法可以说，故抽出来单独进行一个知…"}, {"id": "6844903703141416967", "title": "Flex Box 概念梳理", "desc": "最近重新学习了一下Flex Box，把知识点和相关概念做了一个梳理。加深记忆，方便回顾。 Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。 采用 Flex 布局的元素，称为 Flex 容器（flex container），容器里的子元素称为项目…"}, {"id": "6844903597616922637", "title": "如何调试前端：优化网络资源", "desc": "网络性能可以决定 web app 的成败。最初 app 很新很小时，很少有开发者会持续关注 app 到底用了多长时间发送了多少兆字节给用户。 如果你从未测量过自己 app 的性能，那很可能会有一些改进余地。问题是，你需要改善多少才能让用户注意到。 在下面的研究中，你可以找到有关…"}, {"id": "6844903779704242183", "title": "CSS 属性篇(一)：relative与absolute", "desc": "1、static：默认值。没有定位，元素在正常显示出现（它将忽略top、bottom、left、right、z-index声明） 2、relative：生成相对定位的元素，相对于其正常位置进行移动。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"botto…"}, {"id": "6844903776776617998", "title": "关于绝对定位和overflow的可见与不可见", "desc": "这就很影响用户体验了，也不是我们想要的效果，我们想要的效果应该是，当宽度不足时，应该裁剪两侧图片的宽度来填充内容宽度。这个地方就涉及到一个知识点，为什么会出现滚动条？ 通常一个盒子的内容是被限制在盒子边界之内的。但有时也会产生溢出，即部分或全部内容跑到盒子边界之外。溢出将在满足…"}, {"id": "6844903692974424078", "title": "聊一聊CSS3的渐变——gradient", "desc": "时下，渐变（gradient）效果在页面设计中已经变得越来越常见了。而且现在的CSS3对于渐变的支持也已经足够的丰富了。虽然我们可能使用过CSS3中的line-gradient属性或radial-gradient属性，但其实CSS3中的渐变功能比我们想象的要强大的多，加以利用会…"}, {"id": "6844903585906425869", "title": "webpack loader的\"套路\"", "desc": "loader是一个函数，用来把文件转换成webpack识别的模块。 this.callback，一个可以同步或者异步调用的可以返回多个结果的函数。 当使用一个loader时，这个loader函数只有一个参数，参数是包含文件内容的字符串。 当配置多个loader时，loader的…"}, {"id": "6844903701568552968", "title": "写给自己看的display: flex布局教程", "desc": "写是一种效果非常好的学习方式，所以学习flex布局我给自己写个flex布局教程，顺便还可以帮助需要的小伙伴，可谓一举两得。教程最大特点是所有属性效果都有实时可交互的demo，相比静态示意图片更直观，同时很多flex相关属性的解释比现有教程要详细很多。希望分享的这个链接有所价值。"}, {"id": "6988467086792065054", "title": "css 修改scrollbar样式", "desc": "​  滚动条从外观来看是由两部分组成：1，可以滑动的部分，我们叫它滑块2，滚动条的轨道，即滑块的轨道，一般来说滑块的颜色比轨道的颜色深。 滚动条的css样式主要有三部分组成： 1、::-webkit-"}, {"id": "6947868864604536868", "title": "CSS", "desc": "-webkit-line-clamp: 2；（用来限制在一个块元素显示的文本的行数，2 表示最多显示 2 行。为了实现该效果，它需要组合其他的 WebKit 属性） 有 A、B、C 三个盒子，A 左浮动，B、C 右浮动。设置 A 盒子的高度与 B 盒子高度（或最大高度）要保持一…"}, {"id": "6916384615066238984", "title": "解决外边距塌陷的问题", "desc": "外边距塌陷也称为外边距合并，是指两个在正常流中相邻（兄弟或父子关系）的块级元素的外边距，组合在一起变成单个外边距，不过只有上下外边距才会有塌陷，左右外边距不会出现这种问题。"}, {"id": "6844904063146917896", "title": "[译] 你知道关于视口单位的这几件事情吗？", "desc": "David Chanin 写了一篇 简短的文章 总结了在手机端为元素设置 height: 100vh 带来的一个问题。 我们将 一个元素定位在了 _100vh_ 高的元素的底部。带来的问题是，Chrome 浏览器没有把地址栏考虑在内，导致地址栏显示时，迫使底部元素超出视口之外了…"}, {"id": "6844903926358081544", "title": "css如何实现n宫格布局?", "desc": "现在的APP界面基本都是大同小异, 宫格布局现在基本成了每个APP必然的存在. padding的值如果是百分比, 那么他是相对\"父\"元素宽度计算的, 也就是说如果\"父\"元素宽度是100px, \"子\"元素设置padding-top:100%,\"子\"元素的padding-top实际…"}, {"id": "6844903727577448455", "title": "开发小程序的一些小经验", "desc": "图片在微信小程序中可以说是一个神奇的存在。在web开发中，我们会利用图片的自适应比如百分比而省去不少麻烦，因为高度会自适应。但是小程序中的图片都有一个初始大小，而且是固定的，无论你的图片多大多小，都是统一的320px*240px。虽然作为组件的图片支持平铺，剪切等呈现效果，但是…"}, {"id": "6979020491113644040", "title": "CSS基础复习第三天", "desc": "这是我参与更文挑战的第28天，活动详情查看：更文挑战 盒模型初步认识 border 边框：（边框必须写全3个属性值） border:复合属性，可以使用复合写法，每一个小属性值之间用空格隔开。 （边框宽"}, {"id": "6844903783370080264", "title": "CSS 技巧篇(七)：设置元素居中", "desc": "要让居中元素满足两个条件：其一，元素需要有一个固定宽度值；其二元素的margin-left和margin-right都必须设置为auto，这两个条件少了任何一个都无法让元素达到水平居中的效果。 缺点：需要固定居中元素的宽度。 居中元素设置一个负的“margin-left”并且值…"}, {"id": "6844903553278935053", "title": "用CSS来制作图标", "desc": "在利用CSS制作图标时，经常用到border边框，所以，先看看边框的相关知识。 从上图中，可以看出，四个边框都变成了三角形，那么如果将左，右，下的边框都设置为透明(transparent)，那么就显示了一个下三角。 从上图可以发现，第二个菜单和第三个菜单的左边框不正确，其原因是…"}, {"id": "6985385932958466056", "title": "「HTML+CSS」--自定义加载动画【038】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 边框：48px solid 效果图如下 步骤2 为span添加动画 关键分为4帧 第一帧 左边框颜色：rgb"}, {"id": "6971082806252437534", "title": "CSS基础：margin重叠与负值 / 什么是BFC", "desc": "margin 重叠与负值 一、margin 纵向重叠 与横向不同，margin 纵向重叠取重叠区最大值，不进行叠加。 如下： 效果图如下： 当然父子元素直接也如此。 二、margin 负值问题 mar"}, {"id": "6844903688436187149", "title": "CSS使用的一些小技巧/高级进阶", "desc": "最近闲暇时间在看鑫爷的《CSS世界》，内容真的是非常精彩，很多细节分析的非常透彻，值得推荐。在日常开发中实现某种效果有很多方式，但是下面的css code我以前都很少用到，原来css还可以这么玩 。。 局限性：content 属性 改变 的 仅仅是 视觉 呈现， 当 我们 以 …"}, {"id": "6924195320742019085", "title": "面试复盘之一/BFC", "desc": "(block formatting context)块级格式化上下文。 4，内部盒子会在竖直方向上一个个放置。 5，BFC是一个隔离的独立容器，容器里的子元素不会影响到外部元素，外部元素也不会影响到里面元素。 6，元素的margin-left与其包含块的border-left相…"}, {"id": "6844903520265568263", "title": "Webpack3.0小案例躺坑资源处理、服务器启动和打包优化", "desc": "图片处理 ， 包括file-loader、url-loader、image-webpack-loader的用法，file-loader和url-loader的区别等。 服务端启动webpack-dev-server ，包括手动搭建测试服务端以及运用webpack建立webpac…"}, {"id": "6981341620037746702", "title": "移动端去除滚动条兼容IOS", "desc": "问题 已经设置: .selector::-webkit-scrollbar { display: none } 在浏览器上面横向滚动条已经消除，安卓上面也消失了，但是ios上面仍然有 解决思路 处理前"}, {"id": "6844903871572082702", "title": "CSS进阶（11）—— overflow属性详解，利用CSS实现锚点定位", "desc": "overflow属性用于指定块容器元素的内容溢出时的表现方式——滚动，裁剪，自适应。“BFC的最佳结界”只是其衍生出来的特性，“裁剪”才是其本职工作。在使用overflow做裁剪工作的时候需要注意裁剪的边界时border box的内边缘，来看下面的例子。 HTML中有两个标签是…"}, {"id": "6951317744549625870", "title": "谈谈一些有趣的CSS题目（21）-- 提高 CSS 动画性能的正确姿势 | 盒子端 CSS 动画性能提升研究 #11", "desc": "> 不同于传统的 PC Web 或者是移动 WEB，在客厅盒子端，接大屏显示器下，许多能流畅运行于 PC 端、移动端的 Web 动画，受限于硬件水平，在盒子端的表现的往往不尽如人意。 > > 基于此，"}, {"id": "6977735731754041374", "title": "BFC详解", "desc": "这是我参与更文挑战的第25天，活动详情查看： 更文挑战 前言 说起BFC，一些不熟悉的童鞋往往会有两种情况：1. 用了BFC但是不知道有这回事，2.请教过大佬听过BFC大名然后CV了一段overflo"}, {"id": "6869327886969470983", "title": "『极限版』不掺水，用纯 CSS 来实现超飒的表单验证功能", "desc": "去年的时候写过一篇文章 纯CSS实现表单验证 ，在发表之后不久就有网友跟鱼头说，打算拿我这篇文章作团队内部分享。 当时听到这个消息之后，在屏幕前的鱼头笑咧了嘴，但这位童鞋的下一段内容，就让我马上笑不起出来了。 只有在进行输入且输入内容不对的时候才展示错误信息。 我：“。。。。。…"}, {"id": "6908908738980085768", "title": "用CSS3制作版头动画", "desc": "网易看游戏官网（http://kanyouxi.163.com/）（已下架），是我以前（2014年）做的一个项目，也是我们首个放弃Flash，采用HTML5与制作动画的网站，当时业内为数不多的采用CSS3用于主动画实际生产的网站，当然现在已经很广泛使用了，特别是在移动端，CSS…"}, {"id": "6844904090531528717", "title": "无js 一个div实现饼图百分比效果动画", "desc": "是的没错！没有前言了，我们直接上正文。 通常我们如果要实现百分比显示， 通常要用到另一个div来设置遮罩层。但是我们今天不用， 我们打算使用：：before， 黑框部分就是我们用伪元素实现的遮罩层。至于为什么只遮一半部分，往下看。 首先要旋转，我们给伪元素设置了backgrou…"}, {"id": "6844903641816514573", "title": "前端性能优化：细说浏览器渲染的重排与重绘", "desc": "前端性能优化因为涉及到计算机网络、数据算法、图形图像处理、浏览器渲染等多方面计算机知识，常作为前端工程师乐此不疲的技术讨论话题，也正因如此，它也是面试时容易被问及的面试题之一。 本篇文章缘起一次偶然的面试问答所引申出的思考整理，着笔于浏览器渲染的角度，探讨前端性能优化的思路和实…"}, {"id": "6844903781893668871", "title": "前端面试之居中布局", "desc": "方法: 块级元素使用margin: 0 auto。 若子元素包含float,为了让子元素水平居中,可让父元素宽度设置为fit-content,并且配合margin。 若元素是单行文本, 则可设置 line-height 等于父元素高度。 已经父元素高度: 若元素是行内块级元素如…"}, {"id": "6974332854599680014", "title": "「HTML+CSS」--自定义加载动画【027】", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签作为箭尾，设置为 宽度、高度均为96px 边框：10px sol"}, {"id": "6981643501993721886", "title": "css 基础", "desc": "css 标准盒子模型 标准文档流 行内元素有哪些?块级元素有哪些? CSS优先级 CSS 权重 内联样式，如: style=\"...\"，权值为1000。 ID选择器，如：#content，权值为010"}, {"id": "6844903944464908302", "title": "优雅的使用 rem 进行移动端布局开发", "desc": "这其中，因 bootstrap 的原因，我们对响应式布局绝对是很熟悉的，它的栅格系统就是使用了响应式布局方案。 那么静态布局，也是我们经常使用在 PC 当中，但是随着科技的发展，越来越多的屏幕大小，以至于静态布局再也满足不了我们需求了，这时候自适应布局就出来了，根据不同尺寸和设…"}, {"id": "6933216755091406861", "title": "CSS相关总结", "desc": "1.提高代码的可读性，可以更快的了解到页面的布局。 2.让搜索引擎的爬虫程序更容易理解代码。 特点：独占一行。 div h1(hx) p ul li table form 内联元素：display:inline/inline-block。 特点：不会独占一行，紧跟着排列，直到没…"}, {"id": "6931147937519304711", "title": "css系列之clear属性", "desc": "由于one盒子的浮动，导致two盒子位置上移，即two盒子受到了one盒子浮动的影响。如果我们不想某个元素因为其他元素的浮动导致位置的改变，我们可以利用clear属性来清除浮动元素对当前元素的影响。"}, {"id": "6844904151411900430", "title": "盒模型和盒模型属性", "desc": "盒模型是CSS布局的基础，用来控制网页元素显示位置以及元素间的位置关系。CSS可以定义所有元素都可以有像盒子一样的外形和平面空间。顾名思义CSS盒模型本质上像盒子一样，用来封装周围的HTML元素。 接着给盒子加margin（外边距）,为了方便我们观察给盒子加margin的变化，…"}, {"id": "6844903640210096141", "title": "dialog.js弹窗插件", "desc": "从一开始使用alert来提示，到后来的jQuery手动写弹窗，再到后来使用layer弹窗插件来完成，到现在使用dialog插件来完成弹窗，一步步的摸索，一步步的收获。 看了代码也就知道dialog的基本用法了，title表示弹窗的标题，content表示弹窗的内容，本例子使用了…"}, {"id": "6844903608215928840", "title": "css3D的魅力", "desc": "最近玩了玩用css来构建3D效果，写了几个demo，所以博客总结一下。 在阅读这篇博客之前，请先自行了解一下css 3D的属性，例如：transform-style，transform-origin，transform, perspective。 1. 我们先用css实现一个长…"}, {"id": "6937483448051318791", "title": "原来CSS的background还可以这么玩", "desc": "身为一个前端开发者，背景是开发中的常客。大到整个网站的主题背景，小到一个按钮的背景。CSS 的 background 属性基本上每天开发都会遇到，绝大多数情况下我们都只会使用到了纯色背景或者图片背景。如果你想让你开发的内容看起来更加生动有趣，通过本文让你用纯CSS也可以开发出炫…"}, {"id": "6844903877578342407", "title": "【译】来用 SVG 和 CSS 画朵云彩吧", "desc": "希腊神话中有这样一个故事是讲述宙斯创造出来一个云女神涅斐勒，并且类似大多数的希腊神话一样的，这个故事非常的奇异且限制级。下面一个简短克制的版本。 我们能够知道的是： 涅斐勒是由宙斯以他自己美丽的妻子的形象创造的。一个凡人遇见涅斐勒，陷入爱河，并且他们一起有了一个孩子，确切的说是…"}, {"id": "6844903601127555085", "title": "BEM命名规范入门及常用CSS class 命名", "desc": "如果编写项目的 CSS 代码只有你一个人，或者项目的 CSS 代码量很小，你可以用你喜欢，习惯的方式去组织你的 CSS 代码。但是项目更大，更复杂，有多人编写项目的 CSS 代码（每个人有自己的风格），代码量大的时候，就需要一种统一形式去组织 CSS 代码，这时候 BEM 就派…"}, {"id": "6918049507884138510", "title": "CSS3-2D变换与3D变换、过渡与动画一文全搞定", "desc": "感觉这四大部分的内容需要一起研究，才算是把三维立体空间的各种动态效果的最基础的知识点给吃透，我也一直想找到一个关于这部分比较全面系统且有案例来验证其中知识点的教程，也搜过不少次，可是都没有找到，只能各个地方查找，然后拼凑到一起，而且又不显得太过学术，要用通俗的手册式教程，来介绍…"}, {"id": "6844903722070310920", "title": "CSS 中 calc() 的应用", "desc": "现在开始求解决w1（然后是w2）。开始在公式2）中分别用公式3）和4）代替h1和h2，然后求解为w2如图所示： 用红色圈出的结尾处的表达式。它只包含边距，宽高比宽度和宽高比高度 - 在运行时都不会改变。因此，它是我们可以在构建时预先计算的常数值。为方便起见，我将此命名为常量值c："}, {"id": "6866363565641564168", "title": "box-shadow用法", "desc": "一. box-shadow的定义和语法 当我们需要设置多个阴影时，中间需要将每个阴影用逗号隔开。 这里我们用border-radius属性设置了一个圆形，并且为这个圆形添加了一个浅黄色阴影和一个白色的阴影。 第四个10px是阴影半径的意思；最后一个规定了阴影的颜色为rgba(2…"}, {"id": "6934487204496408590", "title": "CSS工程化", "desc": "一旦样式多起来，这个问题就会变得越发严重，其实归根结底，就是类名冲突不好解决的问题。 这种问题就更普遍了，一些重复的样式值总是不断的出现在css代码中，维护起来极其困难。 如果有更多的颜色，都是从这些色调中自然变化得来，可以想象，这些颜色会到处充斥到诸如背景、文字、边框中，一旦…"}, {"id": "6844903703921573902", "title": "[译] 使用CSS制作球体", "desc": "使用border-radius属性，我们可以实现带圆角的形状和圆形。可以添加一些渐变效果来使他们变成圆球。让我们尝试一下，并且可以添加一些动画效果来赋予他们活力。 我们可以通过两种方式用css来制作圆球。 第一种方式是通过使用大量元素来创建一个真正的3D球体。这种方式存在的缺点…"}, {"id": "6844903520986988558", "title": "CSS终极之战：Grid vs Flexbox", "desc": "在过去几年里，Flexbox已经成了前端最流行的布局框架，这并不奇怪，因为我们可以很方便的用它去对齐元素。 然而，前端村儿里面还有个叫Grid的小孩儿，他和Flexbox有很多功能相似的地方，有些地方他比Flexbox要好，但有也有不足。 这也会变成让开发者们纠结的地方，应该用…"}, {"id": "6844903665875025928", "title": "页面字体闪一下？这两个标准能帮到你", "desc": "当我们在浏览一些使用自定义字体的网站，或在开发中使用 @font-face 设置自定义字体时，时常会看到一个现象：页面结构和图片出来了，但文字区域是空白的。这种现象被称之为 FOIT (Flash Of Invisible Text)。 通常，我们通过@font-face规则定…"}, {"id": "6844903570874056717", "title": "webpack从入门到放弃", "desc": "注册所有配置的插件，让插件监听webpack构建生命周期的事件节点，以做出对应的反应。 从配置的entry入口文件开始解析文件构建AST语法树，找出每个文件所依赖的文件，递归下去。 在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。 …"}, {"id": "6844903735475322893", "title": "css绘制特殊图形", "desc": "一个display：block的元素设定宽高之后表现为矩形。通过设定border-radius可以得到圆角矩形，圆形和椭圆形。 border-radius，可以分别对4个角进行设定。 例如上图：border-top-left-radius: apx bpx; border-xx…"}, {"id": "6844903624246738951", "title": "滑动吸顶效果", "desc": "滑动吸顶附带上拉加载更多效果，使用vue组件构成整体页面，顶部titlebar，中间轮播banner，底部iscroll滑动部分，滑动到吸顶的时候初始化底部iscroll，继而导致页面监听滑动失效；跳"}, {"id": "6844903576699928589", "title": "利用perspective和transform创建随鼠标倾斜的动画", "desc": "我正在做的项目需要给用户展示大量的图片，常见的灯箱效果（放大缩小等）略显枯燥，我决定让图片的展示效果更有互动性更有趣：当鼠标在图片上移动时让图片随鼠标的移动而倾斜。 这个效果的完成需要同时用到 CSS 与 JavaScript，下面的小教程能帮助你快速的理解。 建议各位先简单了…"}, {"id": "6844903672522997767", "title": "webview布局适配实践", "desc": "3、rem：相对于根元素(即html元素)font-size计算值的倍数（我以前真不大清楚）。 所以flexible.js通过这两种方式布局，如果在css文件中设置一个div标签的宽度，设计图的长度是75px，第一种方式需设置width=2rem，第二种需设置width=1re…"}, {"id": "6844903648762265614", "title": "小程序—九宫格心形拼图", "desc": "前几天在朋友圈看到好几次这种图片。 这种图片，是用九张图片拼成的一个心形。 感觉很有趣，就上网查了查怎么做，大部分的说法就是用美图秀秀的拼图功能来做， 在微信小程序中也有专门做心形拼图的小程序，我都试了试之后，感觉还可以更加简单一些，于是我就自己做了个小程序。 1、有两个 ca…"}, {"id": "6844903725631275015", "title": "Vue一个案例引发「动画」的使用总结", "desc": "项目开发中动画有着很重要的作用，而且也是用到的地方非常多，例如：鼠标的进入离开，弹窗效果，组件的显示隐藏，列表的切换等等，可以说我们网页上的动画无处不在，也有人说了，这些东西也可以不使用动画。 对，你说的没错可以不使用，但是，首先你要说服你的产品经理咱能不能简单点，不搞这么多虚…"}, {"id": "6844903633088315400", "title": "Font Awesome 使用指南", "desc": "无极缩放。 如何字体一样使用图标，指定大小即可，不必担心变大后图标变形的问题 实际上，技术上来说，这套图标不再是一个个的图片，而是一套字体，如同文字一样的使用它。 可以查看效果，就是按钮的左边有一个心形的图标出现。如果你想单独显示一个图标，典型的做法是通过标签<i>来完成： 然…"}, {"id": "6905645988153655304", "title": "css基础+布局", "desc": "查看浏览器是否支持特性caniuse.com草图工具-墨刀-adobexd网站推荐-Google关键词+MDN-CSStricks(英文)-张鑫旭博客练习素材1.PSDFreepik搜索PSDweb3"}, {"id": "6844903553815805965", "title": "CSS :focus-within伪类选择器及纯CSS下拉等应用举例 « 张鑫旭-鑫空间-鑫生活", "desc": "这个新特性的支持，未来势必会带来更加丰富的交互形式，以及特定场景简化我们实现。"}, {"id": "6844904087880728584", "title": "深入理解层叠上下文（2）", "desc": "每个层叠上下文都是自包含的：当一个元素的内容发生层叠后，该元素将被作为整体在父级层叠上下文中按顺序进行层叠。 这一篇文章我想要来说一下，如果增加了浮动元素，层叠上下文又会如何呈现。 在正片开始前，我们再通过一个例子，来加深一下对层叠上下文的理解。 根据上一篇文章中，我们了解的内…"}, {"id": "6844903497888956423", "title": "前端精髓", "desc": "所有的语言都是面向对象开发的: 包括类的继承，封装，多态。继承：子类继承父类的属性和方法，多态：包括重载和重写。"}, {"id": "6844903929428312072", "title": "常用的css垂直居中方法", "desc": "方式一：通过display:flex实现CSS垂直居中给父元素设置display:flex;接着给子元素设置align-self:center;先看效果图具体看代码演示htmlcss方式二：通过伪元素"}, {"id": "6900526891426381838", "title": "CSS 选择器的介绍和使用（一）", "desc": "一、CSS选择器是什么？CSS选择器可以用于我们需要添加的样式的标签。想要在HTMLl页面中的元素实现一对一，一对多或者多对一的控制，就得要使用css选择器，css选择器进控制着HTML页面中的元素。"}, {"id": "6844903838525161486", "title": "网页文字的秘密", "desc": "而不是从右到左，或是从上到下，或是呈锯齿形，或是八字路，或是就这样随心所欲的写... 其实这是由CSS本身的规则以及前端开发人员设定的属性值决定的。 在CSS中最基本的单元就是box，所有的网页本质上都是一堆box按照CSS规则和开发人员的设置形成的一个3D模型的平面效果图。和…"}, {"id": "6904581759682215949", "title": "前端学习-CSS3篇", "desc": "子级选择器用于选取带有特定父元素的元素。 注意:如果 element2 元素不是父元素 element1 的直接子元素，则不会被选择。 > 符号之前书写父级的选择器，> 符号之后写子级选择器，必须满足父子级关系才能选中标签。 相邻兄弟选择器可以用于选择紧接在另一个元素后的兄弟元…"}, {"id": "6844903889565646855", "title": "FDCon2019大会分享之滤镜与混合模式实录", "desc": "mark!"}, {"id": "6914379740837068807", "title": "CSS解密：从零基础到高级Web标准解决方案", "desc": "CSS 是开放网络的核心语言之一，由 W3C 规范 实现跨浏览器的标准化。 样式可以通过定义保存在外部.css文件中，同时控制多个网页的布局。 CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准， CSS3 分成多个小模块且正在标准化中。 事实上，可能很多人…"}, {"id": "6844903977008496654", "title": "[译]使用 Firefox Shape Path 编辑器编辑 shape-outside、clip-path 属性", "desc": "页面布局不一定是四四方方的。历史上，页面中的每个元素都被渲染为矩形，但也可以不是矩形。借助 CSS Shapes 我们可以创建与印刷杂志一样时尚的页面布局，同时又具有网页本身的优势。 CSS Shapes 让你的网页设计突破矩形的限制。所有经典的杂志设计元素，如非矩形文本流和非…"}, {"id": "6946876233493774350", "title": "「HTML+CSS」--自定义按钮样式【002】", "desc": "鼠标停留时：button背景变成白色，文字变为蓝色，边框四条直线产生汇聚效果，同时每条直线会有一个阴影的产生。 上下两条直线就是利用span的两个伪元素实现的，原理也是一样的，这里就不再赘述了。"}, {"id": "6844903686963986446", "title": "[小清新] 一段 node 脚本生成风格优雅的 Directory Tree", "desc": "使用图片输出的话，感官上不够和谐，尤其在移动端环境下，图片内容可能会被多次转码、缩放以至于影响阅读体验。 使用文本输出的话，在不同设备、编辑器下内容排版容易混乱。 某一天，你想修改一下内容或者结构时，一个字符一个字符的编辑简直让人抓狂。 使用文本输出的另一个毛病就是，不同设备、…"}, {"id": "6844903534941437960", "title": "杂谈 CSS IN JS", "desc": "关注点分离（separation of concerns）原则多年来大行其道，实践中一般将 HTML、CSS、JavaScript 分开编写维护，早期框架 angularjs 即是如此，直到 React 争议中问世，引领关注点混合趋势，驱使开发者重新审视 CSS 工程化发展。 …"}, {"id": "6844903698909380615", "title": "数学标记语言MathML简介、工具及兼容", "desc": "MathML指数学标记语言，是XML语言的一个子集，使用特殊的类似HTML的标记在网页中显示数学公式。本文是国内目前少有的详尽介绍MathML的文章，小众领域，有兴趣的可以了解下。MathML本身很复杂，但我们不必深入，因为有不错的转换工具……"}, {"id": "6844904095262720007", "title": "CSS居中那些事儿", "desc": "CSS中内容水平居中、垂直居中是经常有的需求，在不同的场景，居中的方式也不同，此篇文章就总结下CSS居中的各种方法。 若父元素的 height 高度没有写，则默认是子元素撑开的高度，此时子元素若想垂直居中，直接在父元素内：padding: 20px 0; 即可。 1. 使用 t…"}, {"id": "6844903581032660999", "title": "2017年最佳的JavaScript和CSS库 -- 众成翻译", "desc": "The Best JavaScript and CSS Libraries for 2017.我们Tutorialzine的任务是让您了解最新的最酷Web发展趋势。在过去的一年中，我们向您展示了许多有趣的库和资源，我们认为这些库和资源值得一试。这就是我们决定在这篇文章中与你分享那"}, {"id": "6971791951825731620", "title": " CSS基础：float应用 / 盒子塌陷", "desc": "float 应用 一般来说，浮动元素会脱离文档流，我们会认为脱离文档流的元素不会像非浮动元素一样对其他元素造成影响。然而，由于 float 出现的原因是 为了在网页中实现文本环绕图片的效果 ，因此严格"}, {"id": "6844903576511184904", "title": "推荐15个JavaScript和CSS库", "desc": "Tutorialzine的使命是让开发者与最新的Web开发发展同步。因此，我们每月都会精选一批最优秀的资源推荐给大家，相信这些资源你绝对值得拥有！"}, {"id": "6844903638469443592", "title": "构建你的第一个Vue.js组件", "desc": "我记得当时我拿起CakePHP，我很喜欢，开始使用它是多么容易。这些文档不仅结构合理，详尽无遗，而且用户友好。多年以后，这正是我在Vue.js中感受到的。然而，与Cake相比，Vue文档仍然缺少一件事：一个真实的项目教程。 无论框架的文档记录如何，这对每个人来说都是不够的。阅读…"}, {"id": "6997847091548520484", "title": "打字机效果", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 背景 打字机效果：是指自动模拟键盘打字的效果，让文字一个接着一个的显示出来，再自动模拟键盘通过 delete键 把文字一个接着一个删除"}, {"id": "7003546811075919903", "title": "CSS动画与LESS、SASS框架", "desc": "实体字符 可通过html代码、css代码来实现 调整实体字符在页面的显示方向： 顺时针转换方向 transform: rotate(361deg) 字体字符 通过link http://www.fon"}, {"id": "6999538420636712973", "title": "CSS框架之Tailwind CSS使用说明", "desc": "什么是Tailwind CSS 如何安装Tailwind CSS 对于大多数项目（并利用 Tailwind 的自定义功能）"}, {"id": "7000328079411249165", "title": "开发一个在线检测文章中代码块占比的页面（ 优化 ）", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 项目优化 现在，我们已经把项目已经写好了，但是，还存在一些小问题。比如页面刚开始在加载的时候出现样式未加载，但字体已经显示出来的问题，还有"}, {"id": "6984658863735701517", "title": "js 和 css 的阻塞问题分析", "desc": "现代浏览器为了更好的用户体验，渲染引擎将尝试尽快在屏幕上显示的内容。它不会等到所有DOM解析完成后才布局渲染树。而是当js阻塞发生时，会将已经构建好的DOM元素渲染到屏幕上，减少白屏的时间。"}, {"id": "6986825925237145631", "title": "CSS 世界中的方位与顺序", "desc": "在 CSS 中，我们经常会与各种方向方位打交道。 譬如 margin、padding，它们就会有 margin-left、margin-right 或者是 padding-left、padding-r"}, {"id": "7003171338584064037", "title": "CSS3 文本样式", "desc": "在 CSS3 中，增加了丰富的文本修饰效果，使得页面更加美观，常用的文本属性有：文本阴影、描边、溢出、强制换行、嵌入字体等。"}, {"id": "7002592437755445278", "title": "What?你是说BFC？🥱", "desc": "前端学习的零零散散不是很系统化，可能我们学过不短时间后，中间依然很多概念都没有很好的理解，今天来看一下之前不是很清楚的BFC这个东西。"}, {"id": "6960138349789216804", "title": " 作为Web开发人员应避免的10种CSS做法!", "desc": "有人认为CSS很难学习，没有什么逻辑可言，而且还坑很多，可能是大家对CSS还不是很了解，因为我提出了五个我不喜欢的开发者习惯，并向大家展示如何避免它们。 1.设置边距或填充，然后将其重置 我经常看到有"}, {"id": "6971325956409524261", "title": "有趣的css知识又增加了之 conic-gradient + 饼图组件", "desc": "你是不是有这种感觉：能用几行css画出来，不用四处找svg或者上传图片，就觉得特别开心呢。那么渐变就可以做很多这样的事情，比如花纹，遮罩，常见图形等。 我们熟知的有线性渐变和锥形渐变，那么今天介绍另一"}, {"id": "6991105821274964005", "title": "CSS 布局的本质是什么", "desc": "UI 发展史 自从图形界面操作系统问世以来，之上的应用软件基本都会绘制界面，这也是用户使用软件的接口，叫做 UI （user interface）。涉及到用户体验、设计、具体界面的开发，是软件中和用户"}, {"id": "7005585982825168933", "title": "纯html+css3 绘制iphone7 模型和常用app图标", "desc": "纯css写的iphone7 和常用app图标。 你所能看到的都是div+css写出来,没用任何图片和字体图标。 先看个图 对你没有看错，你所看到的全是css实现， 纯css实现iphone7模型 其实"}, {"id": "6980993692476080164", "title": "CSS渐变-神奇的前端效果", "desc": "linear-gradient、radial-gradient结合background-size的效果"}, {"id": "6889226357851553805", "title": "你可能不知道的Animation动画技巧与细节", "desc": "在大多数需求中，css3 的 transition / animation 都能满足我们的需求，并且相对于 js 实现，可以大大提升我们的开发效率，降低开发成本。 它的值是一个数列，数与数之间用逗号或者空白隔开，指定短划线(50px)和缺口(50px)的长度。 设置 strok…"}, {"id": "6844903677262561293", "title": "Vue 应用性能优化指南", "desc": "得益于 Vue 的 响应式系统 和 虚拟 DOM 系统 ，Vue 在渲染组件的过程中能自动追踪数据的依赖，并精确知晓数据更新的时候哪个组件需要重新渲染，渲染之后也会经过虚拟 DOM diff 之后才会真正更新到 DOM 上，Vue 应用的开发者一般不需要做额外的优化工作。 但在…"}, {"id": "7001009522013634574", "title": "面试官：层叠上下文是什么鸭？", "desc": "其实在页面渲染时，渲染过程划分的细一点，会有一个根据层叠上下文分层渲染的过程。那么什么是层叠上下文呢？ dom元素z轴判断顺序 层叠顺序：同一层叠上下文内：z-index > 0 → z-index:"}, {"id": "7005195208304361480", "title": "Flex布局basis、grow、shrink 运用", "desc": "前言 在使用 flex 布局的时候大家难以理解的是flex-basis、 flex-grow、flex-shrink 几个属性的用法。在平时面试时，大多数人也只能答出flex布局基础的一些用法，当深入"}, {"id": "7000623026614042661", "title": "【面试必问】DOM元素 居中的多种实现方式", "desc": "前端开发过程中，经常会碰到需要 DOM 元素居中的场景，面对不同的情况，居中的实现方式有很多种，今天就让我们来重温一下DOM元素居中的多种实现方式。"}, {"id": "7003315163625422879", "title": "个人实践几种React在线主题切换方案", "desc": "关于在线主题切换方案，特意去看了一些解决方案，并自己尝试了其中几种相对容易理解和使用的方案，这些实践都是基于umi3和React的，可能跟其他项目有所区别，具体使用还要注意一下。"}, {"id": "6998119754942644237", "title": "关于 CSS 编码规范的思考", "desc": "在日常的前端工作中遇到的一些问题做个总结。由于本人前后在多个公司经历过项目的开发，对这几家公司的编码规范都有一定的了解，然而近日在公司进行项目开发的过程中发现关于 CSS 编码规范上的一些问题。"}, {"id": "6944892753402822686", "title": "有意思！不规则边框的生成方案", "desc": "本文将介绍一种配合 SVG 滤镜实现各种不规则图形添加边框的小技巧。 在我们日常开发中，时长会遇到一些非矩形、非圆形的图案。类似下面这些： 使用纯 CSS，搭配一些技巧，是可以制作出上面的图形的，当然这只是需求的第一步。 紧接着，可能会有要给上述图形添加边框的诉求，这个时候，C…"}, {"id": "6844903950123188237", "title": "用css3实现惊艳面试官的背景即背景动画（高级附源码）", "desc": "我们传统的前端更多的是用javascript实现各种复杂动画，自从有了Css3 transition和animation以来,前端开发在动画这一块有了更高的自由度和格局,对动画的开发也越来越容易。这篇文章就让我们汇总一下使用Css3实现的各种特效。这篇文章参考《css揭秘》这本…"}, {"id": "6948944161504493581", "title": "夜12点，头秃的那家伙，还在用 CSS 处理图片上的文字", "desc": "做项目过程中，我们可能会遇到这样的一个组件，该组件的图像上方是文本。 在某些情况下，根据所使用的图像，文字难以阅读，如文字是白色的，背景图偏浅。 这种情况有一些不同的解决方案，例如添加渐变叠加或着色的背景图像，文本阴影等。 每个解决方案都应该解决一个问题。 我们来探讨本案的问题…"}, {"id": "6998816224582828045", "title": "纯 CSS Flex Box 响应式设计 - 故障动画", "desc": "使用 Flex Box，我们可以轻松地让我们的网页充当响应式容器，通过这篇文章我希望你对 Flex Box 是什么以及它如何更好地帮助我们轻松地进行响应式设计有更好的了解"}, {"id": "6917061427958120461", "title": "CSS 奇技淫巧：动态高度过渡动画", "desc": "当上述代码设置成 height: unset 时，实际等同于设置了 height: auto，我们的想法是希望这段代码能够容器支持文本的动态高度。每次展开的时候，过渡展开到容器本身的高度即可。 查看规范，究其原因，在于 CSS transtion 不支持元素的高度为 auto …"}, {"id": "6999886526142218277", "title": "【动画消消乐 】仿ios、android中常见的一个loading动画 074", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用一个div盒子，用于放置整个loading动画，只需要设置为相对定位"}, {"id": "7000765730081734664", "title": "HTML和CSS中的图像与背景图像", "desc": "这是【从头学前端】系列文章的第二十四篇-《HTML和CSS中的图像与背景图像》 HTML提供<img>元素用于在页面中表示一个图像，该元素为一个空元素。使用src属性来引入一张图片的路径，这个路径既可"}, {"id": "6996338055548239902", "title": "惊艳的双垂直滑块设计", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 双垂直滑块：是指把页面分成两半，一般放置 图片 ，另一半放置 图片相关说明，比如 图片名，图片分类，图片说明等等细节，图片与其相对应"}, {"id": "6844903845470945294", "title": "2019年了，你还不会CSS动画？", "desc": "今年我面试了很多同学，只要看到简历上写“熟练掌握CSS3”的，我都会问问动画相关知识。然而我发现：都 2019 年了，还有很多同学不会 CSS 动画。 即，一个小球从向右匀速移动 200px，然后移动回来，再移动过去，最后停留在 200px 处。 就是需求这么简单的一个动画，然…"}, {"id": "6996921260970262535", "title": "CSS 性能优化", "desc": "CSS 对于加载页面和令人愉悦的用户体验至关重要。虽然我们通常可能会优先考虑其他资产（例如脚本或图像）的影响更大，但我们不应该忘记 CSS。"}, {"id": "6844904158466670600", "title": "手把手教你实现「京喜工厂」的CSS动画效果", "desc": "今年Q1（2020年第一季度）参与了京喜事业部「京喜工厂」业务的前端开发。用户可以通过「京喜工厂」参与口罩、抽纸、大米等商品的“在线生产”，既能趣味造物，又能免费领奖品。目前可以通过「京喜」小程序首页访问该活动。 活动在上线一个月后，PV达到千万的量级，引人注目。有不少前端同学…"}, {"id": "6887792725031288839", "title": "纯CSS实现密室逃脱游戏", "desc": "大家好，这里是CSS魔法使——alphardex。 “密室逃脱”这个词想必大家并不陌生，在以前的flash时代，这是一类很经典的益智游戏之一。玩家常常会被困在一间密室中，而过关的目的就是想法设法逃出这件密室。以下是笔者玩的最早的一个密室逃脱游戏——深红房间，它也可以说是密室逃脱…"}, {"id": "6994701436542484494", "title": "一文学完Less语言", "desc": "3.0 Less 基础 3.1 维护css的弊端 CSS是一门非程序式语言，没有变量、函数、SCOPE(作用域）等概念。 CSS需要书写大量看似没有逻辑的代码，CSS冗余度是比较高的。 不方便维护扩展"}, {"id": "6844903665216520206", "title": "怎么实现一个3d翻书效果", "desc": "这种整页翻转的效果主要是做rotateY的动画，并结合一些CSS的3d属性实现。 主要是通过计算页面翻折过来的位置。 这两种原理上都不是很复杂，需要各个细节配合好，形成一个连贯的翻书动画。 我们先重点说一下第一种翻页效果的实现。 1. 基本布局 一个li.paper就表示一张纸…"}, {"id": "6844903695067381767", "title": "腾讯发布前端组件框架 Omi，全面拥抱 Web Components", "desc": "左(上)边是Omi，右(下)边是 React，Omi 使用 Shadow DOM 隔离样式和语义化结构。 点击这里看执行结果。 Cli 自动创建的项目脚手架是基于单页的 create-react-app 改造成多页的，有配置方面的问题可以查看 create-react-app …"}, {"id": "6991320101492359182", "title": "无规矩不成方圆，整理一些CSS开发规范 ", "desc": "相关属性一组 相关的属性声明应当归为一组，并按照下面的顺序排列： Positioning Box model Typographic Visual 位置属性(position, top, r"}, {"id": "7000643251183026190", "title": "CSS 系列 -- 伪类和伪元素总结", "desc": "转载自AlloyTeam：http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/ 熟悉前端的人都"}, {"id": "6999998435319349284", "title": "CSS选择器：伪元素是怎么回事儿？", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力 巧妙地使用伪元素可能会带来事半功倍的效果，让我们一起来了解一下伪元素究竟为何物。"}, {"id": "6981603719938834439", "title": "学会使用 CSS 自定义滚动条，能让你做的产品更有用户体验！", "desc": "自定义滚动条现在越来越流行，很值得研究一翻。为什么需要自定义滚动？浏览器的默认的滚动条让UI在多个操作系统中看起来不一致，使用定义滚动我们可以统一风格。"}, {"id": "7001133554943918117", "title": "CSS 居中对齐的多种方式", "desc": "居中对齐: 指的是将元素定位在相对父元素的水平和垂直的中心 本文整理在多种情况下，使元素居中对齐的方法"}, {"id": "6993326608350183437", "title": "使用单选按钮切换 CSS 自定义属性", "desc": "我们有一组单选按钮，分别切换不同的背景颜色，其主要结构如下： 以往，我们可以使用 JavaScript 来检测用户何时与单选按钮交互并相应地附加一个类。 然后，我们为每个类添加 CSS backgro"}, {"id": "6976223622570442766", "title": "什么是BFC？", "desc": "一、常见定位方案 在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案： 普通流 (normal flow) 在普通流中，元素按照其在 HTML 中的先后位置至"}, {"id": "6844903545242648589", "title": "深入Webpack-编写Loader", "desc": "Loader 就像是一个翻译员，能把源文件经过转化后输出新的结果，并且一个文件还可以链式的经过多个翻译员翻译。 可以看出以上的处理过程需要有顺序的链式执行，先 sass-loader 再 css-loader 再 style-loader。 由上面的例子可以看出：一个 Load…"}, {"id": "6980336416928563231", "title": "对元素居中做一下总结（元素居中）", "desc": "块级元素居中： margin：0 auto； > > 行内和行内块元素：text-align：center； > > 浮动元素居中：给浮动元素套个父盒子，给父元素设置margin："}, {"id": "6844903874424225806", "title": "【译】来，用 SVG & CSS 给你画一朵真实的云", "desc": "希腊神话讲述了一个关于宙斯创造云女神涅斐勒的故事。和其他希腊神话一样，这个故事极其怪异并且有点限制级。下面的表述则是一个比较简短且含蓄的版本（限制级，非战斗人员请撤离）。 涅斐勒（云神），据说是宙斯按照自己美丽妻子的形象创造的。传说有个凡人遇见了涅斐勒，一见钟情爱上了她并且在一…"}, {"id": "6985542001324687397", "title": "《图解CSS》定位", "desc": "CSS布局的核心是 position 属性，对元素盒子应用这个属性，可以相对于它在常规文档流中的位置重新定位。 语法 静态定位（static） 在静态定位的情况下，每个元素在处在常规文档流中。它们都是"}, {"id": "6844903645058695176", "title": "Webpack 中 css import 使用 alias 相对路径", "desc": "在用 Webpack 处理打包时，可将某一目录配置一个别名，代码中就能使用与别名的相对路径引用资源。 这样我们就可以在 js 文件中用形如 import tool from '@/utils/xxx' 的方式引用 /src/utils/xxx.js 文件，并且 Webpack …"}, {"id": "6959741971573260301", "title": "前端面试常备08： CSS常见问题（1）", "desc": "link vs @import link 属于 XHTML 标签，而@import 是 CSS 提供的。 页面被加载时，link 会同时被加载，而@import 引用的 CSS 会等到页面被加载完再加"}, {"id": "6950165576442445832", "title": "CSS 复习笔记", "desc": "画 1px 高的线，不同浏览器的效果一致盒模型盒模型分为两种：IE 盒模型（怪异盒模型）、W3C 盒模型（标准盒模型）盒模型是由 内容(content)、填充（padding）、边界（margin）、"}, {"id": "6944714103671914509", "title": "css - 盒子模型", "desc": "1. 块级盒子和内联盒子 2. 盒模型 Content box: 这个区域是用来显示内容，大小可以通过设置 width 和 height. Padding box: 包围在内容区域外部的空白区域； 大小通过 padding 相关属性设置。 Border box: 边框盒包裹内容…"}, {"id": "6970533881627803661", "title": "CSS篇-垂直居中", "desc": "一个元素如果需要垂直居中，有许多方案。 列举以下 9 种方法来实现一个 元素相对于父元素的垂直居中。"}, {"id": "6970500385479852040", "title": "一次性搞懂CSS的选择器", "desc": "选择器的类别 一、简单选择器 通过元素类型、元素的类以及元素id匹配元素。 1、类型选择器（元素选择器） 类型选择器就是选择一个HTML元素名（不区"}, {"id": "6844903565631160333", "title": "浅析CSS里的 BFC 和 IFC", "desc": "之前一直听到有人提到 CSS里的BFC，正巧在 IFE的练习里遇到了外边距折叠的问题，所以正好弄清楚BFC的机制。 和之前所有博文一样，还是先从What的角度开始介绍，由浅入深的理解BFC。 所谓的 Formatting context(格式化上下文), 它是 W3C CSS2…"}, {"id": "6942505042532368397", "title": "关于CSS3 的 box-sizing属性", "desc": "在实际开发中经常盒模型的大小推算失误导致的页面错乱问题,有了box-sizing属性之后,你就不用再担心啦。因此就以案例来说明box-sizing的属性值的作用与区别。关于 CSS3的box-sizing 属性还可以参考W3school。如若有描述不恰当的地方还请多多指点。 以…"}, {"id": "6910862580244283406", "title": "【CSS+SVG】滑动放大表情符号效果", "desc": "大家好，我是 Steven。 这期我们会做一个滑动放大表情符号的效果，随着游标移过表情符号，表情符号会放大。除此之外，背景的灰色也会有个不规则的顺滑线条放大，这个部分我们会用 SVG 去制作的。 打开 CodePen 编辑器，在 HTML 里面加入 &#x3C;svg> 标签。…"}, {"id": "6844904041282011143", "title": "纯css 实现3d轮播", "desc": "常常使用网易云音乐，看见它的首页轮播图想自己也实现一个，本文会通过 animation 结合 perspective 等 css 属性实现3d轮播的效果。让我们开始吧！ 我们设定图片的宽度 329px ，为了凸显出中间这张图片，左右两种使用 transform:scale(0.…"}, {"id": "6844903665367515149", "title": "CSS 在按钮上做个涟漪效果（Ripple Animation）", "desc": "作为一个 CSS 渣，这次在看到一个 Vue 组件库的按钮里有个点按之后的效果之后跃跃欲试。 效果大概长这样： 首先先观察了一番，大概得到以下特征： 以鼠标按下的位置为原点，以某个值为半径进行扩散 在长宽、以及透明度上，均有渐变 原本是 Vue 实现的，但剥离框架实现，就还得在…"}, {"id": "6844903584023183373", "title": "教你用 css 写一个拟物化图标", "desc": "拟物化（Skeuomorphism）风格的图标在iOS7发布之前广为流行。相当长一段时间，无论系统、网页还是第三方应用都争相使用拟物化的设计风格。那时候的dribbble网，各色优秀的拟物化设计作品也争奇斗艳、层出不穷。 下面先展示几张优秀的拟物化设计作品，让你们进一步了解这一…"}, {"id": "6844903582274174984", "title": "快速理解web语义化", "desc": "本文简单快速描述了什么是web语义化、语义化的特点以及常用的几个html标签和CSS语义化的命名方式。希望更多的人关注到web语义化并在实践中有意识的去使用它。"}, {"id": "6844903503601598477", "title": "前端性能优化常用总结", "desc": "对于前端的性能话题，从来都没有断绝过。因为这个东西没有最好，只有更好。而且往往也是业务的繁杂程度去决定优化程度的。作为一个前端开发者，性能是我们关注的指标。它直接影响着我们的用户，同时也影响着产品本身。前端发展以来，优化方式，琳琅满目，有雅虎军规等。这些内容复杂繁多，往往容易被…"}, {"id": "6844903668781678600", "title": "五分钟 Styled-components 高级实用技巧", "desc": "回到2013年，React凭空出世。但是在那时，我们会想，oh shit! 我们好不容易分离了HTML/CSS/JS, 为什么出现了JSX，我们又需要把HTML和JS耦合在一起？React 创造了 HTML in JS. 在React中，我们知道，一切即组件。那既然HTML能在…"}, {"id": "6844904062689738765", "title": "一个栗子让你彻底弄懂CSS3动画", "desc": "ease 规定慢速开始，然后变快，然后慢速结束的过渡效果。 ease-in 规定以慢速开始的过渡效果。 ease-out 规定以慢速结束的过渡效果。 ease-in-out 规定以慢速开始和结束的过渡效果。 linear 动画从头到尾的速度是相同的。 delay属性：用于将动画…"}, {"id": "6936533939876003877", "title": "学习 animation属性 和 常用方式", "desc": "animation 属性是 animation-name，animation-duration，animation-timing-function，animation-delay，animation-iteration-count，animation-direction，ani…"}, {"id": "6989921555954270244", "title": "利用CSS逻辑和值实现多语言网站支持", "desc": "现在，跨浏览器支持已经到了一个临界点，现在是看一下逻辑属性和值的好时机。如果你正在创建一个多语言的网站，逻辑属性和值是非常有用的。即使你不是，仍然有一些方便的新的速记方法，值得了解。 例如，我已经数不"}, {"id": "6844903864496291853", "title": "CSS3动画animation认识，animate.css的使用", "desc": "没考虑小马的头的方向，只是写了旋转的效果，很多css属性都可以用到动画效果里。可以参考~ lightSpeedIn 字面意思就是光速出来喽，记得调快速度哦，什么，怎么调速我没说么？好吧，先留个坑，待会儿补。 到此呢，整个animate.css里的所有动作效果规整完毕。回上边去填…"}, {"id": "6844903629485260814", "title": "VS code 插件推荐", "desc": "最近sublime和webstorm的序列号频频失效，经常在关键时候掉链子，深有体会，刚好身边有朋友也有使用VS code，对比atom,sublime,webstorm这些编辑器，个人觉得VS code是一款不错编辑器，比sublime插件多，比Atom的界面好看，比webs…"}, {"id": "6844903621155356685", "title": "<link>标签实现预加载功能详解", "desc": "这就触到了本人的知识盲区了，本着扫盲的目的，研究了下 link 标签，发现这个小东西功能还是挺强大的，上面的就是为了实现预加载功能，懂点儿英文的，一看见preload 就大致知道了。 之前也有预加载技术，像 prefetch，subresource 等，关于这两者和 prelo…"}, {"id": "6960215946971578404", "title": "关于圣杯布局中负边距问题", "desc": "前端小白，最近刚学习圣杯布局，对于圣杯布局中出现的负边距问题有所疑问，希望大佬讲解一下。 DOM结构： CSS代码： 布局结果如下图所示： 关于上述代码中的负边距理解对于 对于该段代码中的margin"}, {"id": "6844903552360382477", "title": "[英] Bootstrap 4 正式发布", "desc": "It’s literally taken us years to do it, but Bootstrap 4 has finally arrived! Words cannot begin to describe the elation the entire team and…"}, {"id": "6844903871047794701", "title": "[译] 前端项目中常见的 CSS 问题", "desc": "快速摘要：近年来，跨浏览器的渲染和交互已经愈加一致。不过，它仍然没有达到完全一致，有很多小问题会让你出错。除了这些问题之外，还有不同的屏幕尺寸、语言偏好和明显的人为错误等不确定因素，我们从中发现了许多会让开发者出错的小问题。 在浏览器中实现用户界面时，最好是尽可能地减小这些差异…"}, {"id": "6844903943424704525", "title": "BFC究竟是个什么东东？", "desc": "FC是Formatting Context的简写，直译过来是格式化上下文。其实并不是什么复杂的东西，个人对于它的理解是：FC就是html页面中的某个元素内的一套渲染规则，决定了其子元素如何布局，以及和其他元素在html页面中的位置。 比如说BFC, BFC是block form…"}, {"id": "6844904042372546573", "title": "CSS炫酷特效", "desc": "好了几天分享就到这里了，一点小特效。"}, {"id": "6931602180797366279", "title": "耍一耍 background", "desc": "前几天看到 chokcoco 大佬的 CSS奇思妙想 -- 使用 background 创造各种美妙的背景 ，仿佛发现了新大陆。回想起来， background 虽然总是在用，但是却又似懂非懂，话在嘴边但又说不出来的那种感觉。所以今天以学习为目的，整理一下 background…"}, {"id": "6844903983337717768", "title": "CSS3的那些奇淫巧技（一）", "desc": "本文主要说一下以下5种效果： “毛玻璃、折角、切角、阴影、内圆角”。"}, {"id": "6844903650062499847", "title": "淘宝放大镜的简单实现，原来道理很简单", "desc": "前言：自己在学习过程中构思的淘宝放大镜的实现，大佬轻喷，小白可以跟我一起探讨学习。话不多说，我们来看效果图。 首先是html结构，结构主要就三块，放大镜，小图和大图区域，我们都用div来实现。 图是在淘宝取的网络地址。 css代码我就不截图了，简单说几个需要注意的地方就行，一个…"}, {"id": "6844904020729921543", "title": "CSS3 Transition 过渡动画用法介绍", "desc": "通常，当一个元素的样式属性值发生变化时，我们会立即看到页面元素发生变化，也就是页面元素从旧的属性值立即变成新的属性值的效果。css属性transition能让页面元素不是立即的、而是慢慢的从一种状态变成另外一种状态，从而表现出一种动画过程。 transition-propert…"}, {"id": "6992779402023026701", "title": "前端快速上手grid二维布局（实战干货）", "desc": "很多人都认为布局是UI的事，和前端没多大关系。 其实不然，我们coding时不可能简单粗暴的元素堆砌，那"}, {"id": "6844904177554948104", "title": "CSS居中的常用方式以及优缺点", "desc": "居中是页面开发中经常遇到的问题。 使用合适的、简单的、兼容性好的居中方式是我们页面仔在整个工作生涯中都要面对的问题。 来看这个例子，一张图片和文字进行居中。如下图所示： img与文字内容都是行内元素，因此直接使用text-align就行了。代码如下图所示： 在最外层的div中使…"}, {"id": "6915317397817655303", "title": "深入扩展文本溢出解决方案", "desc": "在实际的开发中不管是移动端还是PC端都会遇到文本太长，因为宽度不够导致我们需要设置成省略号。文本就文本溢出做一个总结，希望对你们开发过程中有帮助。 如果将display: -webkit-box和text-overflow: ellipsis配合使用，文本将以省略号结尾。 我们…"}, {"id": "6995744833373487140", "title": "踩坑记录之element ui 表格fixed列与正常列不一致", "desc": "处理element ui的表格fixed列与正常列不一致问题,并且提供了2种解决方案:一种适合不需兼容1350px一下屏幕开发使用,另外一种解决方式较为优雅."}, {"id": "6991752850644664333", "title": "前端button组件之涟漪效果｜8月更文挑战", "desc": "在前端项目中，我们常常会使用到button组件进行事件的触发，而一些项目为了更好的交互效果，加入了一系列的动画，例如：脉冲、果冻、涟漪、滑箱等特效。 今天我们来讲讲如何实现涟漪效果"}, {"id": "7004712684960776222", "title": "让CSS3中Transform属性带你一文实现炫酷的转盘抽奖效果", "desc": "前端时间有个需求是客户端双端APP内嵌入整个转盘抽奖的web子系统，具体是要在后台能够控制大转盘抽奖的奖项数，和用户免费抽奖的次数，并且免费抽奖使用完，用户可以观看广告进行抽奖或使用积分抽奖。正好最近"}, {"id": "6960850759759953957", "title": "小技巧！CSS 提取图片主题色功能探索", "desc": "本文将介绍一种利用 CSS 获取图片主题色的小技巧。一起看看~ 背景 起因是微信技术群里有个同学发问，有什么方法能够获取图片的主色呢？有一张图片，获取他的主色调： 利用获取到的这个颜色值，来实现类似这"}, {"id": "7003259855926460429", "title": "CSS 函数那些事（六）多姿多彩颜色函数", "desc": "rgb(),rgba() rgb(red,green,blue) rgb(red,green,blue),分别代表着red,green,blue,是色彩三原色，原色以不同比例混合时，会产生其他颜色。为"}, {"id": "6894044091836563469", "title": "Web移动端适配方案", "desc": "在过去的几年时间里，移动端web野蛮生长，智能机的Android阵营和IOS阵营分庭抗礼，随之产生了多个系统版本（系统版本多样）；五花八门的屏幕尺寸、屏幕展示技术（如大名鼎鼎的Retina技术屏）层出不穷（屏幕尺寸、技术多样），还是CSS的W3C标准在各式各样的移动端浏览器上落…"}, {"id": "7002848354405187621", "title": "在JS中使用css变量的方式", "desc": "Webpack:结合`css-loader`在项目中启用CSS Modules。 CSS Modules:CSS Modules 内部通过 [ICSS](https://github.com/css-"}, {"id": "6881429197542785031", "title": "简单实用又不花里胡哨的鼠标滑过样式", "desc": "一、纯图片的DIVhtml代码（以下效果皆围绕这个代码展开）：1、缓动上移效果图：2、放大效果效果图：3、框内放大效果效果图：4、蒙层效果效果图：二、上图下文的DIV不建议将整个div放大，会导致文字"}, {"id": "6999481454761607176", "title": "玩游戏学 CSS，哎，我就是玩儿！", "desc": "之前在社区中发现了几款不错的`学习 CSS 的游戏`，体验之后发现不错，和大家分享一下。对于初学者来说，CSS 繁多的语法可能有些枯燥，而且重要的是 W3C 中 CSS 相关文档不仅多，而且阅读体"}, {"id": "6993468505773309982", "title": "你可能对position和z-index有一些误解", "desc": "🧃序言 最近在整理一些很偏的面经题，想起来很久以前被问到的一道题，就是 position 和 z-index 。短短 10min 问了这两个"}, {"id": "7005583424790462494", "title": "css中塌陷问题到底指的是什么，margin和padding应该怎么区分", "desc": "css基础篇（第三篇） 回顾 在上一篇中我们基本了解了css中background的综合写法以及css中的权重优先级问题，在这一讲中我们会认识一个比较重要的padding和margin，并且会了解到c"}, {"id": "6994625063127351303", "title": "CSS filter 生成不规则边框", "desc": "之前做过很多特殊的布局，比如在这两篇文章 CSS 实现优惠券的技巧 (juejin.cn)、CSS 实现支持渐变的提示框（tooltips） (juejin.cn)，如下 但是一直有一个痛点就是：无法"}, {"id": "6907027007318687751", "title": "css精髓：这些布局你都学废了吗？", "desc": "最近忙里偷闲，给自己加油充电的时候，发现自己脑海中布局这块非常的凌乱混杂，于是花了一些时间将一些常用的布局及其实现方法整理梳理了出来，在这里，分享给大家。 单列布局是最常用的一种布局，一般是将一个元素作为容器，设置一个固定的宽度，水平居中对齐。 一栏布局（通栏）头部和底部宽度一…"}, {"id": "6995575394464169997", "title": "学透CSS-图片属性最终篇-24张图攻克border-image  连载中", "desc": "前有background-image 为背景增光增彩，后有mask-image 给背景增加可玩性，今天我们来聊聊border-image!"}, {"id": "6990289477201559565", "title": "来看看CSS Functions好不好恰 🍽", "desc": "而CSS(Cascading Style Sheets)作为层叠样式表，也拥有自己的函数。可将它们插入要放置值的位置，或者在某些情况下，将其插入另一个值声明，一些CSS函数甚至允许函数嵌套。"}, {"id": "7000653056509476894", "title": "一文掌握flex布局", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 一文掌握flex布局 开启flex布局 display:flex 常见父项属性 flex-direction 设置主轴方向 主轴分行和列 行"}, {"id": "6956030985251061791", "title": "探秘神奇的运动路径动画 Motion Path", "desc": "CSS 中有一个非常有意思的模块 -- motion path。本文将对 motion path 一探究竟，通过本文，你可以了解到如何使用 motion path 实现简单、复杂的路径动画！"}, {"id": "6998389354271866910", "title": "看完还分不清重绘和重排过来捶我👊，我说的！！！", "desc": "不会吧不会吧？？2021年了还有人分不清重绘和重排？ 这次给大家带来了重绘和重排的分享，希望可以帮助到有需要的人。"}, {"id": "6974041331878346782", "title": "一些有意思的阴影特效，建议收藏！", "desc": "这是我参与更文挑战的第15天，活动详情查看： 更文挑战 前言 CSS3新增了box-shadow，用于设置盒子的阴影，今天玩了一下~"}, {"id": "6955052354664136712", "title": "血轮眼轮回眼特效 html+css", "desc": "效果（完整代码在底部）： 实现并不难，都是重复的代码比较多。 实现（可跟着一步一步写）： 1. 先定义基本标签： 2. 定义左右眼的基本css样式： border-bottom: 5px solid "}, {"id": "6995173758809931812", "title": "CSS也能像组件状态一样响应式更新？", "desc": "大家好，我是卡颂。 不知道平时在项目里你怎么处理CSS呢？ 我们知道，由于原生CSS存在一些问题，比如： 复用时容易样式冲突 没有作用域、没有模块化 没有编程能力 社区涌现出很多解决方案，比如： 命名"}, {"id": "6940498706143641613", "title": "Flexbox布局中不为人知的细节", "desc": "Flexbox布局 已是目前最为流行的Web布局方式之一，它给Web开发者在完成页面或组件的UI布局带来了极大的灵活性和便利性。但也是因为它有极大的灵活性，里面隐藏了一些不为人知的细节，如果不是对Flexbox极为熟悉或者对其规范极为了解的话，其中有很多细节将会被遗漏，而这些细…"}, {"id": "6998153351649034271", "title": "谈谈文字两端对齐的css问题", "desc": "文字两端对齐问题还挺常见的，比如说容器内有一段文字，如果不是两端对齐的话，看起来就不是很整齐。还有在一些提交表单界面，表单的标题一般也是两端展示的，比如在做表单的时候，我们一般会设置为文字两端对齐的样"}, {"id": "6844903667175260174", "title": "彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index", "desc": "最近，在项目中遇到一个关于CSS中元素z-index属性的问题，具体问题不太好描述，总结起来就是当给元素和父元素色设置position属性和z-index相关属性后，页面上渲染的元素层级结果和我预想的不一样。根据自己之前的理解，也没找到一个合理的解释。我知道，肯定是我对相关属性…"}, {"id": "7002986907172880420", "title": "前端开发中css这些样式你还熟悉吗，Chrome调试工具还可以这样用", "desc": "css基础篇（第一篇） 开篇词 在前几篇文章中我们综合的讲解了 html 的基础用法，用两篇文章来综合的阐述了 html 基本用法以及浏览器的相关内容，如果 html 不太熟悉的话，建议好好看看之前的"}, {"id": "6971617175886888997", "title": "2021年你可能不知道的 CSS 特性（上篇）", "desc": "前几天在 F(x) Team.午夜识堂 和大家聊了一下 CSS 方面的话题，即 CSS 新特性。 ​ 整理了有关于 CSS 方面的特性，并且尽可能的整理了一些大家现在能用或过不了多久就能用的属性。"}, {"id": "6917079398160007175", "title": "CSS 水滴效果", "desc": "大家好，我是 Steven。 打开 CodePen 编辑器，新增一个 &#x3C;div>，class 是 container；在里面新增三个 &#x3C;div>，class 是 drop，代表滴下的水点。 在 CSS 那边，新增 .container 选择器，display…"}, {"id": "6916326043934851080", "title": "如何不使用 overflow: hidden 实现 overflow: hidden？", "desc": "一个很有意思的题目。如何不使用 overflow: hidden 实现 overflow: hidden？ CSS 中 overflow 定义当一个元素的内容太大而无法适应块级格式化上下文时候该做什么。而 overflow: hidden 则会将超出容器范围内的内容剪裁。 这源…"}, {"id": "6979242113913323556", "title": "纯css实现：如何快速做一个视差滚动效果", "desc": "今天是我坚持日更的第二十九天，最近老是加班，每天除了上班、通勤、吃饭、遛狗之外，只有7、8个小时的样子，可是我还是挤出时间做到了每日更文。嗐~ 一个人真心想做一件事，怎么会觉得难呢？日拱一卒，功不唐捐"}, {"id": "7002980054632235045", "title": "CSS｜自定义字体，让页面看起来更加舒服一些", "desc": "如何选择自己喜欢的页面字体？ 每天一个前端小技能：页面自定义字体，让我们的页面不在千篇一律。 关于页面字体，其实我们很多时候都没怎么注意，我们基本上也知识更改字体font-size，font-weig"}, {"id": "6992763627623153671", "title": "几个CSS知识｜8月更文挑战", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 选择器+、～ ~选择器 必须是拥有相同的父元素 element1~element2 选择器 element1 之后出现的所有 element"}, {"id": "6844903682467856397", "title": "Vue页面跳转动画效果实现", "desc": "现如今移动端APP对用户体验方面的要求越来越高了，最近致力于用户体验优化，因为需要实现类似APP页面切换的动画效果，百度google搜索资料不是很全，所以自己写文档，在实现效果的基础上，顺便恶补一波VueRouter及CSS过渡动画的知识点，欢迎有兴趣的朋友多多指教。 创建vu…"}, {"id": "6844904121862979597", "title": "给你一份详细的CSS布局指南，请查收", "desc": "在我们前端开发过程中，写css（包括sass, less, stylus这样的预处理器）进行设计稿的样式还原是一项重要的工作，而其中，关于页面布局的部分，又是书写样式代码时候的重点和难点，这篇文章就尽可能的去总结常见的一些页面布局实现方案(并不是全部，布局实现方法太多了)，希望…"}, {"id": "6972772802793308174", "title": "用CSS造出詞云效果", "desc": "前段时间，接到一个需求要做一个充满随机词云的区域，而且词云要互相不重叠，效果如下图: 我刚开始打算先把词云做出来，然后用js算每一个的位置，但实在太难和太麻烦，一方面要用js去随机生成每一个云的位置，"}, {"id": "6844903687593148429", "title": "一篇文章搞定前端面试", "desc": "面试过前端的老铁都知道，对于前端，面试官喜欢一开始先问些HTML5新增元素啊特性啊，或者是js闭包啊原型啊，或者是css垂直水平居中怎么实现啊之类的基础问题，当你能倒背如流的回答这些之后，面试官脸上会划过一丝诡异的笑容，然后晴转多云，故作深沉的清一下嗓子问：从用户输入URL到浏…"}, {"id": "7001847626534486024", "title": "前端闪烁效果的两种实现方式", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 在阅读《CSS Secret》第44节“闪烁效果”中，作者这样说： 从这段话我们能获取到2个关键点： 从前，前端行业“刀耕火种”的年代，有"}, {"id": "6982943321970704398", "title": "用纯css制作的3D模型，开发一个打飞机小游戏", "desc": "一般公司都注重JavaScript的功底，css熟悉掌握常用的就可以，但css远不止这些，css可以做很多事情，有些场景直接代替JavaScript，比如纯css可以制作轮播、选项卡、甚至用纯css制"}, {"id": "6992860199736475661", "title": "纯CSS做旋转不断的效果", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 昨天学习了CSS的animation动画特性，做了一个简单的放大字体效果。 文章链接如下：https://juejin.cn/post/69"}, {"id": "6973643201945174024", "title": "前端 CSS 变量简介及基本使用方法", "desc": "CSS 变量（自定义属性）在某个地方存储一个值，然后在其他许多地方引用它，另一个好处是语义化的标识。"}, {"id": "6984612634557415455", "title": "纯 html + css 实现彩带效果", "desc": "这个效果看起来很酷，我们来实现一下。 代码 html - 一个容器，一个彩带 css translateY(-100%) translateX(var(--offsetX)) rotate(45deg"}, {"id": "6999823925869805582", "title": "摸鱼不如来了解一下--CSS3动画｜8月更文挑战", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战” CSS动画 制作动画分两步(相当于类选择器，先定义好样式，再通过类名调用) ●   1.定义动画 ●   keyframes意为关键帧。"}, {"id": "6844903604030013454", "title": "CSS Grid VS Flexbox：实例比较", "desc": "不久以前，所有 HTML 页面的布局还都是通过 tables、floats 以及其他的 CSS 属性来完成的。面对复杂页面的布局，却没有很好的办法。 然而 Flexbox 的出现，便轻松的解决了复杂的 Web 布局。它是一种专注于创建稳定的响应式页面的布局模式，并可以轻松地正确…"}, {"id": "6901253812033028104", "title": "css滚动系列", "desc": "滚动混淆属性解析滚动分类全局滚动局部滚动指定某一元素滚动到某个位置：先获取元素到整个文档顶部的距离，然后再设置全局滚动条进行滚动scrollingElement滚动优化滚动防抖滚动节流干货补充滚动到底"}, {"id": "6844904009573072909", "title": "被低估的动画 v0.1.0", "desc": "这几年前端的发展很快，特别是 javascript。人们越来越关注 javascript 的新事物，关心怎么提高 js 代码可读性和可维护性，这个是值得肯定的。但是，有很大一部分人却逐渐忽视 UI 层级的东西。要知道，直接影响用户体验的是面前的产品界面，UI 美观度和交互的友好…"}, {"id": "6935985948513533982", "title": "【译】彩！纯CSS版打地鼠", "desc": "我们之前介绍过如何对checkbox改造(译者注：“checkbox hack”，即通过隐藏checkbox标签，展示lable标签，并用for属性将两者关联，最后根据checkbox上的CSS伪类选择器“:checked”来区分以及定义各种状态)，来实现一个纯CSS的完全状态…"}, {"id": "6862023581350494215", "title": "浅析 CSS Grid 布局(中)", "desc": "四、容器上的属性grid-template-*修改grid.css如下：效果图grid-template-*相关的属性repeat第一个参数是重复的次数，第二个参数是所要重复的值效果auto-fill"}, {"id": "6862021952001966087", "title": "浅析 CSS Grid 布局(下)", "desc": "五、项目属性grid-column-start/grid-column-endgrid-row-start/grid-row-end用来指定item的具体位置,根据在哪根网格线justify-self"}, {"id": "6844903615497240584", "title": "哇牛叉学院之超简缓动动画小算法", "desc": "张鑫旭老师用文学小说式的表达演绎了一篇动画算法文章，你有兴趣读一读吗？"}, {"id": "6844903599823290376", "title": "组件化开发的思考", "desc": "经历过很多场面试，以及对自己所做项目的思考与积累。对于组件化的开发有了一点点理解。 其实开发一个项目，就类似与做一个乐高玩具。乐高由不同的积木块拼成，每个积木块可以和不同的积木块连接。 而且积木块与积木块之间没有影响。一个萝卜一个坑，只要这个坑你能填进去，你就适合。 而我们开发…"}, {"id": "6844903655729004552", "title": "如何更愉快地使用rem", "desc": "如何更愉快地使用em"}, {"id": "6844903857680547853", "title": "深入理解行高 - 以“支柱”概念为核心", "desc": "让用户代理设使用值为一个基于元素字体的“合理”值。该值与< number >意义相同。我们推荐 normal 的使用值在1.0到1.2之间。计算值为 normal。 指定长度用于行盒高度计算。负值非法。 本属性的使用值为此数值乘以本元素的字号。负值非法。 本属性的计算值为此百分…"}, {"id": "6844903976094138381", "title": "[译] 趣味学习 CSS 布局 —— 第一部分：弹性布局", "desc": "在我开始学习 CSS 时，一切都是关于用浮动、绝对定位与相对定位实现你想要做的事。今天，我们有了很棒的新工具来创建布局：弹性布局和网格布局。如果你忽略 IE9 以及更早的版本，则 Flexbox 几乎在任何地方都受到很好的支持，可用于创建灵活且可扩展的布局。目前，网格布局并非在…"}, {"id": "6844903781931433998", "title": "【译】\bbox-shadow美化3D转换效果", "desc": "当使用 3D 转换来对元素进行格式化的时候，您可能会注意到它们没有任何阴影并且看起来非常平坦。 在现实生活中，物体会阻挡光线并产生阴影。 物体表面可能是哑光，反光，或者介于两者之间。所以，我们可以做得更好。 如果你需要将光线投射到复杂的几何体上，可以选择Photon等引擎，但它…"}, {"id": "6844903540524056590", "title": "浏览器小于1px渲染的差异", "desc": "背景色替换成绿色，发现和第一组比所有都偏绿，所以我倾向于渲染小于1px像素的像素点颜色时浏览器会根据XXXX算法，根据周边颜色计算出一个视觉上更小的颜色。 很神奇，这个颜色非常淡，甚至接近第三组第四个.......... 做浏览器真的厉害，然后这个结果只是在我电脑上的，应该都是…"}, {"id": "6847902219615141901", "title": "前端面试知识点梳理：css基础篇", "desc": "高效学习三部曲：找准知识体系刻意训练及时反馈前端知识体系css基础知识js基础语法js-web-api开发环境运行环境http协议HTML面试题如何理解HTML语义化让人更容易读懂(增加代码可读性)让"}, {"id": "6844903509033238542", "title": "tufte-css - 像写论文排版一样的 CSS 文字样式", "desc": "精致漂亮，还有侧边注释的样式"}, {"id": "6844903588171366408", "title": "CSSModules", "desc": "一般我们引入页面的CSS的作用域都是全局的，都是对这个页面起作用，产生局部的作用域，就是使用一个独一无二的class的名称，不会和其它选择器重名的，CSS Modules 就是这个原理。下面我们看一段代码 这样一来，这个类名就是独一无二的了，只对应用的组件有效。 **CSS M…"}, {"id": "6844903762402738184", "title": "一个自动为背景图添加 width 和 height 的 PostCSS 插件", "desc": "还在烦切图写背景的时候还要手动写 width 和 height ？使用该插件马上解放你手写宽高的烦恼。"}, {"id": "6954374526150901767", "title": "盘点常见的HTML+CSS布局", "desc": "传统布局（等分，等高，两列三列自适应，圣杯和双飞翼），Flex布局，Grid布局，居中的几种实现方式。"}, {"id": "6954343115188600846", "title": "简单理解伪类和伪元素", "desc": "为什么要引入伪类呢？ 官方解释是伪类和伪元素概念的引入是为了格式化文档树以外的信息。简单来说，可以把伪类和伪元素理解为“加强版的选择器”，比如用来选择一句话的第一个字母，列表中的第一个元素。 在CSS"}, {"id": "6844903849124184072", "title": "CSS核心技术详解-核心概念", "desc": "替换元素是指浏览器根据元素的标签和属性来决定元素的具体内容 img:src input:checkbox ... 视口viewport: 也叫作可视窗口，根据屏幕百分比布局，可视区域改变，布局也会改变。每个页面只可能有一个可是窗口，并提供滚动条机制，但是iframe可以嵌入多个…"}, {"id": "6913966372485595150", "title": "CSS入门笔记5(CSS动画,浏览器渲染)", "desc": "本文主要记录学习css动画的过程，主要讲浏览器渲染原理，translate平移，transition过渡，animation动画，最后还有个小实践-跳动的💗，本文源码都有的。--资料来源饥人谷 动画是一种通过定时拍摄一系列多个静止的固态图像（帧）以一定频率连续变化、运动（播放…"}, {"id": "6897467920406806541", "title": "CSS盒模型", "desc": "盒模型是浏览器对文档布局（lay out）的渲染标准之一，所有元素被表示为一个个的矩形盒子。CSS决定了这些盒子的大小、位置、属性等样式 默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（m…"}, {"id": "6844904138128490504", "title": "CSS 文档流 和 盒模型", "desc": "2. overflow溢出 3. 脱离文档流 4. 盒模型 CSS 盒模型有两种，一种是 content-box 一种是 border-box。content-box 的宽度 width 表示内容区的宽度，不包含 padding 和 border；border-box 的宽度 …"}, {"id": "6844904200137080839", "title": "浏览器渲染原理与 CSS 动画", "desc": "1. 浏览器渲染 Composite 合成（根据层叠关系展示画面）。 一般用 JavaScript 更新样式，可以修改样式或者添加类，添加类更为方便常用。使用 JavaScript 更新样式要经过布局、绘制、合成这几个步骤中的一步、二步或者全部。 经过合成过程，如改变 tran…"}, {"id": "6844903512241881096", "title": "retina屏中1物理像素border的实现", "desc": "retina屏会以2个（乃至3个）物理像素来显示一个CSS像素（1px），所以在CSS中指定1px的边框实际占据的却是2个以上物理像素，在retina屏用户体验较差。 问题：只在Firefox and Safari 8+支持，安卓不支持。 border-img属性会将图片（如上…"}, {"id": "6844903495905050632", "title": "devices.css - 用纯 CSS 展示各种终端，如 iPhone X, Galaxy S8, iMac 等", "desc": "Modern devices in pure CSS"}, {"id": "6844903937170997256", "title": "CSS垂直居中常用的几种方法", "desc": "CSS实现垂直居中在网页布局中是经常会用到的，所以一定要牢记这些方法以应对之，写下这篇文章也是为了巩固自己的知识点。"}, {"id": "6969561344760610824", "title": "伪元素选择器", "desc": "1. 伪类选择器 选择符 简介 ::before 在元素内部的前面插入内容 ::after 在元素内部的后面插入内容 2. 伪类选择器注意事项 before 和 after 必须有 content 属"}, {"id": "6924611571880558599", "title": "《CSS 知识总结》", "desc": "这些步骤做完了，就展现在我们眼前了。 在更新样式的时候，会省略 Layout 或 Paint 这些步骤，可以通过 Chrome 中的开发者工具里的 Rendering 中添加 Paint flashing。通过高亮显示来突显重绘区域。 每个属性在不同浏览器都会触发不同的流程，还…"}, {"id": "6844904032629161998", "title": "[译]块状格式化上下文（BFC）里一个不为人知的秘密", "desc": "本文是根据网上一段 2013 年视频整理出来的，原视频标题为 The secrets of block formatting context - Fiona Chan，由 Fiona Chan 分享。 这段视频主要介绍讲了两块内容。 如何使用 display: table-ce…"}, {"id": "6844903603920961549", "title": "新世纪Nerv战士 – 京东首页补完计划", "desc": "回想17年的京东首页改版，从上线到现在竟然已经过去了四个多月。这四个多月，除了不曾中断的日常维护需求，对首页孜孜不倦的优化工作，更多的是那些与拖延症抗争的日夜：是今天写，还是等好好休憩回味后再动手？很明显，在这几十上百个日夜里，我基本都选择了第三个选项：不折腾了，先休息吧。现在…"}, {"id": "6844903645159358477", "title": "无单位数字和行高 —— 别说你懂CSS相对单位", "desc": "前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以…"}, {"id": "6844904066905014286", "title": "[译] CSS 网格布局入门：Part 2", "desc": "这里接着 《CSS 网格布局入门：Part 1》 继续讲。 现在我们已经知道如何定义网格容器以及网格的行和列了。下面要学习如何在网格中放置项目了。放置项目有好几种方式，我们从最基本的开始学习。下面是一个 3x2 的网格： 网格里的每个项目都会自动按默认顺序放置。 如果我们希望对…"}, {"id": "6977179421463707679", "title": "斯莫尔访问的风格", "desc": "在CodePen中打开 :visited 伪类是非常独特的，因为在用户的隐私方面有可能被利用。为了解决这个问题，浏览器制造商已经限制了哪些CSS样式允许使用:visited 。 一个关键的问题是，通过"}, {"id": "6844904001180270600", "title": "这就是css盒模型", "desc": "网页渲染的时候，所有的元素都会被浏览器引擎根据CSS-Box模型描述为一个盒子,CSS会决定这些盒子的大小, 位置, 属性(颜色, 边框...)。盒子模型由内容(content)、内边距(padding)、边框(border)、外边距(margin)组成。但盒子的大小由cont…"}, {"id": "6844903680215351310", "title": "[译]《Smashing》: 用 CSS 形状打造高级排版", "desc": "CSS Shapes Level 1 has been available in Chrome and Safari for a number of years, however, this week it ships in a production version of Fi…"}, {"id": "6977179281591894053", "title": "斯莫尔柔韧不易破损的盒子", "desc": "在CodePen中打开 CSS是了不起的，使用老式和现代CSS的混合，我们可以快速定义灵活的、牢不可破的盒子 这个blockquote 的演示首先利用了我们的响应式填充理念，使填充在盒子弯曲到不同大小"}, {"id": "6912852200985198605", "title": "CSS入门笔记4", "desc": "这是我学习路上总结的知识点，源码图文详细介绍分层div,CSS定位position,层叠上下文。希望对大家有所帮助，本人也会持续高更，新的一年里一起共同进步吧！ 一. div分层 背景范围是从border外边沿围成的区域。 可以通过代码来验证。 在上面代码基础上再在div里加上…"}, {"id": "6844903557003477005", "title": "PostCSS常用插件", "desc": "PostCSS是什么，官网地址PostCSS与Scss有什么区别？如上面的介绍所述，postCSS是提供了一种使用JS插件来变换样式的机制，在此基础之上借助插件不仅仅可以做到支持Scss的功能，还可以"}, {"id": "6985180384703021063", "title": "CSS知识总结", "desc": "一.浏览器渲染原理 根据HTML构建HTML树（DOM） 根据CSS构建CSS树（CSSOM） 将两棵树合并成一颗渲染树（render tree） Layout 布局（文档流 盒模型 计算大小和位置）"}, {"id": "6844903538741477389", "title": "两行 CSS 代码实现图片任意颜色赋色技术", "desc": "两行 CSS 代码实现图片任意颜色赋色技术"}, {"id": "6844903655145996296", "title": "常用的CSS小技巧", "desc": "实际开发过程中会遇到一些需要用CSS小技巧处理的布局问题，现在分享几个个人工作中遇到的小问题和解决方案。 这里要介绍一个神器font-size:0。 我们为了页面代码的整洁可读性，往往会设置一些适当的缩进、换行，但当元素的display为inline或者inline-block…"}, {"id": "6844903728747659272", "title": "CSS3动画卡顿性能优化解决方案", "desc": "最近在开发小程序，与vue类似，它们都有生命周期这回事。 所以这又触碰到了我的知识盲区，不过项目在磕磕绊绊中完成的差不多了，但是遇到了CSS3动画渲染的性能问题，所以我也是被逼的，再回过头来从浏览器渲染网页的流程出发，去找动画卡顿的症结。 可以结合Alon的这篇前端性能优化和安…"}, {"id": "6918996108509347854", "title": "一篇文章带你了解CSS clear both清除浮动", "desc": "一、前言CSSclearboth清除产生浮动，使用了cssfloat浮动会产生css浮动，这个时候就需要清理清除浮动，就用clear样式属性即可实现。二、clear语法与结构1.clear语法2.cl"}, {"id": "6880439417824083981", "title": "【学习笔记】CSS篇", "desc": "现在的移动主流屏DPR（像素比）一般为2或者3，比如要展示1px，那么实际应该写0.5px。这在ios中是支持的，但是安卓不支持、"}, {"id": "6922409621013397511", "title": "前端学习笔记（二十二）--styled component, immutable.js", "desc": "开始仿某个网站。记录一下过程中的一些思考或者遇到的坑。 1. styled component 由于 css 是全局作用的，经常会有 class 名字冲突，全局污染等情况出现。 而像 styled-component 这种工具，能够写出 css-in-js 风格的代码，以组件的…"}, {"id": "6952692838811303943", "title": "css 进阶-变量的使用", "desc": "css 进阶-变量的使用浏览器兼容很不幸，IE全线不支持（需要考虑IE兼容的可长点心）基本使用定义使用以 双连字符（--） 开头的自定义属性名称和可以是任何有效CSS值的属性值来声明自定义属性。在 :"}, {"id": "6844903633914429453", "title": "Grid —— CSS网格布局初探", "desc": "主要内容： 1.较详尽地讲解了CSS3 Grid Layout的基本知识 2.每个属性都配有一到两个例子，方便查看效果及亲手调试"}, {"id": "6957712219497103391", "title": "【持续更新】前端CSS样式实现", "desc": "1. hover 图片放大缩小 方法1 ：在鼠标hover上去的时候，使用transform的scale()来缩放图片。 方法2：将图片设置为背景图片，鼠标hover上去的时候，调整背景大小backg"}, {"id": "6948413041524342798", "title": "深入CSS vertical-align属性", "desc": "欢迎访问个人博客网站：http://www.zhuxin.club1. 前置知识在真正讲解vertical-align属性之前，我们需要了解下面一些前置的知识1.1 x-Height在各种内联相关模型"}, {"id": "6844903592424407053", "title": "关于硬件渲染了解一下", "desc": "浏览器的渲染方式，主要分为两种，第一种是软件渲染，第二种是硬件渲染。如果绘制工作只是由 CPU 完成，那么称之为软件渲染，如果绘制工作由 GPU 完成，则称之为硬件渲染。软件渲染与硬件渲染有不同的缓存机制，只要我们合理利用，就能发挥出最好的效果。 硬件渲染 WebKit 会依据…"}, {"id": "6844903684833296398", "title": "搭建Typescript+React项目模板(4) --- 项目打包", "desc": "经过前面的初始化，提升开发体验和集成了一堆工具，调整了项目结构等等之后，我们是时候考虑进行项目打包了。 0. 添加打包路径工具 该配置项指定了打包路径和打包后的js文件名，在webpack的配置项中，output是必须有的。 以后指定打包文件存放路径的时候就可以直接使用这个工具…"}, {"id": "6844903575361961991", "title": "学习并使用线性渐变linear-gradient", "desc": "之前的实践中我们了解并熟悉了background-size,以及backgroud-clip,今天我们学习并实践的是线性渐变linear-gradient. CSS linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。其结果属于<gradien…"}, {"id": "6844903697323950087", "title": "详细理解CSS中的outline", "desc": "讲到outline，也就是我们通常所说的描边,我们要分成两个部分来理解: 一个是shorthand CSS property: outline, 由outline-style、outline-width和outline-color组成 一个是独立的outline-offset …"}, {"id": "6943421111925211166", "title": "CSS布局(三)", "desc": "这篇文章已经是CSS布局系列的第三篇文章了。前两篇文章分别介绍了CSS布局的一些相关的概念以及三种盒模型布局。文章链接可以戳这里： 这篇文章将介绍一种全新的布局方式：弹性盒子（flexbox）布局模型。这种布局方式相较于前面的几种常规布局方式，更具有灵活性，其在大型或者复杂的应…"}, {"id": "6844903840622329863", "title": "巧用伪元素解决fixed元素被百度浏览器屏蔽问题", "desc": "在做这样一个活动页时，发现底部fixed定位的 button 元素在百度浏览器中展示不出来。 目前网上看到的方法都是在元素width上做文章，感觉都不太好用（会在最后的其他方法中细说）。 btn_fixed 就是一个空 div, 将按钮切图后，作为伪元素添加到页面中。这样就能完…"}, {"id": "6844903727044755464", "title": "关于CSS：line-height", "desc": "元素的高度是由什么决定对于我们解决页面显示问题和布局页面都有很大的帮助。 从结果来看确实如此，但是这句话不对，这句话多余了几个字，完全不需要设置height，只需要line-height就可以做到文字垂直居中了。 至此，前言三条结论都在本文中做出了解释和观察。"}, {"id": "6972601266623119390", "title": "css绘制三角形(border属性的使用)", "desc": "1 . 实现一个简单的三角形 使用css 盒模型中的border (边框) 即可实现如下的三角形: #实现原理： 首先来看在为元素添加border时，border的样子；假设有如下代码： 效果图： 这"}, {"id": "6844903822263861261", "title": "解析 CSS 格式化上下文", "desc": "BFC(Block Formatting Contexts)，块级格式化上下文。BFC 实际上就是页面中一块渲染区域，该区域与其他区域隔离开来。容器里面子元素不会影响到外部，外部的元素也不会影响到容器里面的子元素。 🦊 BFC 内部的盒子会从上至下一个接着一个顺序排列。BFC…"}, {"id": "6844903497062678535", "title": "前后端分离开发脚手架", "desc": "这是一个是针对于页面比较繁多的非单页面应用的官网开发脚手架。打包工具使用的是gulp，还用到了require引入资源的方式，样式编写时用的less，页面的模板和后台的交互显示是使用的art-template（下面有详细描述这个插件） 在src/layout文件夹中新建page1…"}, {"id": "6844903566847524877", "title": "如何使 CSS 动画更加顺滑自然？", "desc": "如何使 CSS 动画更加顺滑自然？"}, {"id": "6899478898984419336", "title": "【每日一问】如何获取元素的css样式？", "desc": "我们可以使用getComputedStyle来获取当前元素（也就是百度一下按钮）的最终css属性值，也就是你最终看到的样式，究竟由哪些css属性值组成。 getComputedStyle返回的值是一个具有样式属性的对象，这个对象是一个只读对象。可以通过getPropertyVa…"}, {"id": "6904138131420020743", "title": "【CSS三种居中方案全解】CSS水平居中常用方法集结", "desc": "2、margin-left:auto,margin-right:auto。，块级元素水平居中，加上 text-align：center 让里面的文字水平居中。不需要知道元素的宽高，与父元素无关，只是显示出现水平居中了。 8、flex，目前主流的布局方案，父元素为 flex 容器…"}, {"id": "6891877766543867917", "title": "一篇文章带你了解SVG 渐变知识", "desc": "渐变是一种从一种颜色到另一种颜色的平滑过渡。另外，可以把多个颜色的过渡应用到同一个元素上。SVG渐变主要有两种类型：（Linear，Radial）。一、SVG线性渐变<linearGradient>元"}, {"id": "6984988976306192421", "title": "背景裁切", "desc": "背景裁切 background-clip属性用来设置元素的背景裁切到哪个盒子，兼容到IE9 background-clip:border-box;-----背景裁切到border区域 backgrou"}, {"id": "6844903656639168526", "title": "实现一个简易的静态服务器", "desc": "静态服务器就是网站把一些在通常操作下不会发生改变的资源给浏览器。显示网站外观的图片和CSS文件，在浏览器中运行的JavaScript代码，没有动态组件的HTML文件就是这种资源中的代表，统称为静态文件。 我们的静态服务器的实现思路就是，启动一个静态服务器，监听用户发送的请求，当…"}, {"id": "6844903990337994765", "title": "Grid CSS 布局使用总结", "desc": "Grid 布局是一种强大的CSS布局方案， 它使用网格的形式存放子元素，以便使用行和列的概念管理和控制容器和子元素。在使用 Grid 布局的时候始终把容器当作是一个多行多列的网格有助于更准确的实现 UI 效果。 容器是网格的实现区域，代码中的 container。 在容器内部生…"}, {"id": "6949563871262670884", "title": "CSS3 样式学习笔记", "desc": "再次学习了 CSS/CSS3 基础知识，遇到了一些之前不知道、不熟悉的知识点，于是进行记录供后续查阅参考。"}, {"id": "6844904066598830093", "title": "[译] CSS 网格布局入门：Part 1", "desc": "在开始介绍网格布局（Grid Layout）之前，先来熟悉一下几个关键术语的定义。 在网格中，用来分隔行和列的线条，分水平和垂直两个方向。 CSS 网格里的一个单元。 由 4 根网格线围成的矩形区域。一个网格区域可以包含任意多个网格单元。 指 2 根网格线之间的空间。网格轨道分…"}, {"id": "6913169807965700104", "title": "css实现三列布局（圣杯布局）的几种方式", "desc": "这里会奇怪为什么center元素要写在最后面，left,right元素使用浮动布局，纷纷都脱离了文档流，碰到父元素或者另外一个浮动元素就会浮动停止，浮动元素后面的元素会围绕着它；center元素没有设置浮动，则在常规文档中，left和right看起来像是漂浮在了常规流中；如果c…"}, {"id": "6949594654660624391", "title": "flex布局详细总结", "desc": "1.Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。容器：container;容器内的每一项：item;2.容器(container)属性如下所示主轴"}, {"id": "6955072017045389348", "title": "彻底搞懂 CSS 生效规则", "desc": "前言 这段时间正在进行面试官培训，把很久以前整理的前端知识体系拿出来过了一遍，感觉又有了新的收获。这次就分享一下CSS代码生效的规则。 概念 先直接上 MDN 对优先级的定义: 一个 Dom 元素在浏"}, {"id": "6844903646010802184", "title": "一个空 div，一段 css，却在每个浏览器有完全不同的展现", "desc": ""}, {"id": "6844903543934058504", "title": "使用纯 CSS 实现 Google Photos 照片列表布局", "desc": "挺好的"}, {"id": "6907103254191013896", "title": "有规律的特殊样式实现方式", "desc": "这样确实能完成产品的需要,但是本身这个项目就因为数据量过大,从而存在了大量的计算,所以我们要尽量的减负,而不是增负,在抓掉了N根头发之后,我想到了,可以用CSS3的选择器去解决这个问题. 根据初始日来设置(an + b)中b的偏移量,这样,我们就通过CSS3的选择器来完成了JS…"}, {"id": "6844903637672525832", "title": "「译」CSS语义化是怎么往原子化进化的？", "desc": "想要复用CSS，请放弃语义化使用CSS。"}, {"id": "6949130287301263391", "title": "CSS-粘连布局-实现以及变形实战", "desc": "粘连布局实现已经实战。 场景：上面是列表下面是按钮，列表信息不多时，按钮固定在底部，列表信息比较多的时候，按钮跟随在后面滚动。"}, {"id": "6844903561801777159", "title": "可拖动table表头的实现", "desc": "自己做的项目碰到这样一个需求，就是对所有的表格添加表头可以拖动的效果。我一想，这不简单，分分钟钟给你做出来。拿起我的电脑，啪啪啪就敲起来了。 一定是哪里不对，以我的聪明才智，结果应该不是这样的，然后净下心来，好好理了下思路后，总算是做出来了。 至于结果嘛，我肯定是做出来的，像下…"}, {"id": "6844903982217838605", "title": "【全解析】关于word-wrap、word-break、white-space三种CSS字符换行处理", "desc": "文本换行的问题不要紧, 但遇到真要命。多种换行随缘尝试往往是大多人的解决方案。 所以今天就来整理一下常见的文本换行。同时了解一下每种换行的应用场景 首先我们整理出对应的参数表,方便查看。(不整理兼容性不好的属性，只列举常用属性) **CJK文本：**中日韩统一表意文字（CJK …"}, {"id": "6844903911992754183", "title": "CSS3 中 box-shadow 妙用", "desc": "on CodePen. 不使用inset，默认阴影在边框外，即阴影向外扩散。 使用 inset 后，阴影在边框内（即使是透明边框），即阴影向内扩散，背景之上内容之下。 这是头两个 length 值，用来设置阴影偏移量。x,y 是按照数学二维坐标系来计算的，只不过y垂直方向向下。…"}, {"id": "6844903697151950861", "title": "flex设计思想和语法简介", "desc": "float属性的布局方式，设计友好，目前兼容性已经很好了，很多主流网站都已经开始采用。本文总结一下flex的设计思想和语法，以及在实际的布局应用中为我们带来了哪些便利。 自适应，比如最简单的左侧是固定宽度导航栏，右侧自适应填充剩余空间。一般使用float和margin来实现或者…"}, {"id": "6985434110810390541", "title": "CSS3动画定义和调用", "desc": "动画的定义 可以使用==@Keyframes来定义动画==，Keyframes表示“关键帧”，在项目上线前，要不上@-webkit-这样的私有前缀 动画的调用 定义动画之后，就可以使用animatio"}, {"id": "6844903569611554823", "title": "使用css实现任意大小，任意方向， 任意角度的箭头", "desc": "，右侧箭头 这样的箭头。 一般用css来实现： 因为这是利用div的border-top, border-right，然后通过旋转div来实现的。 这里有个问题： 假如需要一个角度为120度的箭头怎么办呢？ 由于border-top, border-right一直是90度， 所…"}, {"id": "6844903636141621255", "title": "骚年，来一起聊聊React Portals吧", "desc": "先还原一下产品需求吧。 在这个功能模块中，A组件控制第一级tabs的展示，B组件控制第二级tabs的展示，C组件负责展示当前激活的tab内容；点击组件C中的标题列表的某一项（如左图所示），即在这个模块中展开右图的列表详情D。且该详情D会在此模块中撑满宽高显示。 组件C的大概结构…"}, {"id": "6844903759072460807", "title": "【译】CSS Shapes 简介", "desc": "CSS Shapes 允许我们通过定义文本内容可以环绕的几何形状、图像和渐变，来创建有趣且独特的布局。本次教程会教你如何使用它们。 在 CSS Shapes 问世之前，为网页设计文本自由环绕的杂志式布局几乎是不可能的。相反，网页设计布局传统上一直用网格、盒子和直线构造。 CSS…"}, {"id": "6977785934980841479", "title": "遇见乌托邦。用流体类型和空间尺度进行设计和建造", "desc": "20年前，当我们开始从舒适的、可预测的印刷品设计的海岸到万维网的流动和不断变化的公海的航行时，John Allsopp鼓励我们接受 \"事物的起伏\"。十年后，Ethan Marcotte创造了 \"响应式"}, {"id": "6844903505887494152", "title": "15 个有趣的 JavaScript 与 CSS 库", "desc": "包含CSS 框架、node.js包管理器，以及用于实现图标、加载效果、工具提示的纯 CSS 解决方案。"}, {"id": "6844903589954093064", "title": "深入研究CSS字体度量及CSS 盒子", "desc": "这篇文章主要研究： - font 的工作原理及度量参数 - CSS box models 的类型、定义"}, {"id": "6941276594581274655", "title": "关于CSS实现水平、垂直居中的问题", "desc": "1.absolute+负margin： 比较常用的方法，缺点是要知道子元素的宽高。 2.absolute+margin auto: 缺点是要知道子元素的宽高。 3.flex: 只需父级样式就可以。移动端可以使用，pc端要看自己业务的兼容性情况。 4. absolute+tran…"}, {"id": "6982380376236752910", "title": "(又叕)一个 CSS Loading", "desc": "展示效果 -- 一直是旋转状态的 Coding CSS Loading -webkit-keyframes"}, {"id": "6926893827550609421", "title": "CSS学习笔记【画图题】｜牛气冲天新年征文", "desc": "但是实际上border原型并不是上图那样，我们将border这个属性的大小变大，效果就如下图所示。 我们可以在上图的基础上，将任意三个三角形的颜色设置为透明就可以得到一个三角形。 如果我们想要得到一个特殊的三角形，比如等边三角形、等腰三角形、直角三角形等，我们可以通过设置四个区…"}, {"id": "6844903577224232967", "title": "星级评价组件--引发对React组件的思考", "desc": "星星填充的写法与tiny-rate类似，也是两层元素的叠加来模拟星星填充的效果，与之不同的是我给每颗星星(item)上都添加了点击事件，为了兼容我们在移动端的使用。点击每颗星星时，获取其序号，通过css3d的calc来计算出应该变化的宽度，从而达成星星填充的效果。 另外，由于☆…"}, {"id": "6844903929289900046", "title": "伪类和伪元素", "desc": "最近看一些前端面试题，经常有问到伪类和伪元素的作用以及两者区别，所以特意找了一些资料学习。下面是我对这一方面知识的理解和总结，可能会有遗漏或者一些出入，欢迎大家指正，相互交流～ 伪元素和伪类很像，但是伪元素类似于增添一个新的DOM节点到DOM树中，而不是改变元素的状态。注意了，…"}, {"id": "6844903501890338829", "title": "SVG Sprite 使用简介", "desc": "SVG即可缩放矢量图形 (Scalable Vector Graphics)的简称, 是一种用来描述二维矢量图形的XML标记语言. SVG图形不依赖于分辨率, 因此图形不会因为放大而显示出明显的锯齿边缘. 当我们需要使用多个icon的时候, 为了节省请求和方便管理, 通常会把i…"}, {"id": "6859361340294299661", "title": "CSS的解析和计算", "desc": "通过上一篇《DOM的解析》，我们已经知道当浏览器接收到HTML文本后，会将它解析成Token，再构建成DOM树。下面我们继续分析浏览器渲染流程的样式计算，即CSS的解析和计算。一、收集CSS规则浏览器"}, {"id": "6974666815871909902", "title": "子元素过多超出父元素时，强制在一行上显示", "desc": "假设在.box父元素内，有多个inline-block子元素，当子元素过多，总宽度超出父元素宽度，则会换行显示。使用CSS的white-space: nowrap;可强制子元素在一行上显示。 例如： "}, {"id": "6844903942904610830", "title": "网易前端面试真题之：使用CSS实现“钟摆”效果。", "desc": "动画是使元素从一种样式逐渐变化为另一种样式的效果。 欢迎大家关注我的微信公众号“IT男真会玩”。"}, {"id": "6963991111362674702", "title": "【必知必会-经典CSS布局系列】=＞浮动布局的优缺点？清除浮动有哪些方式？", "desc": "简介 优点 这样做的优点就是 在图文混排的时候可以很好的使文字环绕在图片周围。 另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等， 但它与inline-block还是有一些区别的 "}, {"id": "6844903743473860616", "title": "滑动动效解决方案（CSS antd-mobile better-scroll react-transition-group）", "desc": "声明：本笔记为示例代码，并非工作中生产环境源码。 其中flag是展开与否的标志，max-height可以设置一个大于等于滑动区最大可能高度的值。 若需求为整屏弹框且弹框内内容为展示类或无过多非常规定位，可以使用antd-mobile的Modal插件。配置属性可以实现顶部、底部划…"}, {"id": "6844903705427329032", "title": "HeyUI组件库 | 如何实现在线切换主题", "desc": "如果有更多的，请在下方留言，我会后期补充。 目前ant-design支持的切换主题颜色是在页面最下方。 是的，如果你不仔细，你是不知道系统有这个功能的。 然后这里要吐槽一个点，随便切换什么颜色都很卡，因为没有确认按钮，所以随便调一个小颜色，也会去后端请求，值得改进.... an…"}, {"id": "6844903917810089991", "title": "拉勾网系列页面重构-总结", "desc": "对页面整体布局在脑中有一个清晰的概念 ，html结构怎样正确合理的安排也很重要，考虑后续与数据渲染如何方便。 按照上述步骤首页应该可以完全搞出来，后续拼凑其他页面，注意样式的引用，按照文档中结构的先后顺序引用。 对框架和工具，实际项目中还是要针对具体情况具体问题有选择性的使用。…"}, {"id": "6844903933509369864", "title": "css盒子模型", "desc": "1.内联元素和块级元素块级元素：div、p、h1~h6、ol、ul、dl、li、dd、table、form内联元素：a、br、i、img、input、label、select、span、textare"}, {"id": "6844903523201597453", "title": "切换Web应用主题色的 (KU)", "desc": "用户切换主题色后..."}, {"id": "6922074067008749575", "title": "CSS盒", "desc": "说到CSS的盒我相信大家并不陌生，毕竟布局和渲染的基本单位是盒。所以理解了盒，那么就可以轻松驾驭布局了。那么盒又分为哪几种呢？盒主要有块级盒子(block box)和内联盒子(inline box)，还有一种特殊的形态是块级盒子和内联盒子的中间状态块级内联盒子(inline b…"}, {"id": "6844903556148019207", "title": "奇舞周刊第 245 期：普通用户与你之间的差距", "desc": "这篇文章结合境外业务特点，从网络优化、前端优化、后端优化几个角度介绍了境外业务在性能优化上的一些实践，重点篇幅放在了网络优化部分。 “你与普通用户之间，更大的差距其实在于计算机技能，这会对你的设计预估能力造成毁灭性的影响。” 要想在工作中让自己过得更舒服一些，你需要创造条件让自…"}, {"id": "6952007006009950238", "title": "CSS知识小总结", "desc": "一.浏览器渲染原理步骤根据HTML构建HTML树（DOM）根据CSS构建CSS树（CSSOM）将两个树合并成一颗渲染树（Render tree）Layout布局(文档流、盒模型、计算大小和位置)Com"}, {"id": "6951956497504944159", "title": "三列布局-圣杯与双飞翼", "desc": "圣杯布局步骤先写center部分，width 100%center,left,right都是左浮动父容器container设置padding-left和padding-right设置margin-le"}, {"id": "6844903846452396046", "title": "Web技巧(06)", "desc": "在上一期中我们提到了CSS的混合模式算法和滤镜相关的知识，正好在这周周会老板也提到滤镜相关的特性。主要使用滤镜来改变颜色和使用混合模式来让视频变得更有意思。那在这一期中，我们接着来聊CSS滤镜对颜色的处理以及滤镜对图标（图像）的处理。除了滤镜来改变颜色相关的知识之外，还会向大家…"}, {"id": "6844903714130657287", "title": "Emmet 食用指北", "desc": "Emmet 是书写 HTML 元素时的简易标记，它有各种规则，帮助你快速生成 HTML 标签。 比如仅输入一个!, 再按下键盘上的Tab按键，一个HTML基本模板就生成了（前提是安装了 Emmet 插件）。 伟大的 VS Code 内置了这个插件。 如果当时老师有这么个酷酷的东…"}, {"id": "6844903645142581261", "title": "视口相关单位的应用 —— 别说你懂CSS相对单位", "desc": "前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以…"}, {"id": "6844903564809076743", "title": "[译] 教你使用 CSS 计数器", "desc": "CSS 计数器是我们可以用特定属性递增或递减的变量。有了它，我们就可以像在编程语言里面一样，实现一些普通的迭代。 这种方法可以用于一些创造性的解决方案，其中包括代码中一些重复部分的计数。 为了控制你的计数器，你需要 counter-increment 和 counter-inc…"}, {"id": "6844903496198651917", "title": "前端每周清单第 31 期: iOS 11 Viewport 解析，Preact PWA 性能优化案例，JS 内存泄露分析", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID：frontshow），及时获取前端每周清单。 Mastodon 1.6 发布：Masto…"}, {"id": "6923702812228452359", "title": "小细节：盒模型里面连续输入英文和数字不会自动换行，汉字会自动换行", "desc": "前天开发中遇到一个小问题，就是连续输入许多数字发现不换行，会一直横向超出盒子的宽度。但是如果是输入连续汉字就会自动换行。后来试了试连续输入英文也是不会自动换行。后来经过一番研究将细节总结一下： 程序员其实就是记住前人设定的规则，并使用前人设定的规则。具体为什么会这样，全当做规则…"}, {"id": "6844903693863616525", "title": "Webpack in Node：前端模板开发工具TDS", "desc": "一个适合小页面的模板开发工具，基于webpack，支持热重载，将css、js打包到一个html模板文件中。 这个小工具的适用场景不广，但设计思路能带来不小的启发。 TDS其实是为了一些小型的广告模板服务的，当年接手这一块只能手动生产这些模板，开发维护起来特别麻烦 （没错，本人就…"}, {"id": "6844903634635849735", "title": "Columns —— CSS多栏布局", "desc": "主要内容—— 1.简单讲解了CSS3的新特性——多栏布局的使用 2.一个简单Demo可供读者实践操作"}, {"id": "6911225032127545358", "title": "css居中大全集", "desc": "目录1.父盒子使用flex布局控制子盒子水平垂直居中2.需要居中的盒子自身使用定位配合margin3.定位结合transform的translate属性在实际开发过程中，我们会碰到很多需要用到水平垂直"}, {"id": "6974419031331700749", "title": "Let's learn CSS 学习笔记 - Function", "desc": "与许多编程语言一样（话说 CSS 是编程语言吗？），CSS 内置了一组函数。在这篇文章中，你会了解到函数的功能和使用方法。"}, {"id": "6844903824373579790", "title": "对于BFC的理解", "desc": "BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 跟BFC相关的概念有Box,Formatt…"}, {"id": "6844903556886200334", "title": "一张图说明CSS中的各种百分数", "desc": "github地址： https://github.com/sxzy/myCSS/issues/4 ，喜欢可以关注哦。 CSS中涉及到的百分数有很多，所以有时候多起来的话，概念也就多了，所以也会有些混淆的地方，这里就做一个简单的总结吧，用一张脑图汇总总结了一下。 百分数.png …"}, {"id": "6844904052690518029", "title": "text-shadow 与 box-shadow 的不同之处", "desc": "text-shadow 与 box-shadow 有两点不同：一个是语法，另一个是阴影是否会被切除。 text-shadow 比 box-shadow 少支持了一个参数：spread-radius。 .elem 最终表现为（见下图）：文字阴影偏移出来的长度是 4px，而盒子阴影…"}, {"id": "6844903532869451784", "title": "CSS3 box-shadow 内外阴影效果", "desc": "box-shadow 属性可以给元素边框周围添加一个或者多个阴影效果。定义多个阴影，使用逗号分隔。 inset：可选。将边框外阴影改为边框内阴影（即使是透明边框），背景之上内容之下。如果不写，默认为边框外阴影。inset只可写在最前或者最后。 offset-x：必需。阴影水平方…"}, {"id": "6979490422074671112", "title": "浅谈CSS的BFC", "desc": "什么是BFC BFC是块级格式上下文，它是指一个独立的块级渲染区域。只有Block-level BOX参与，该区域拥有一套渲染规则来约束块级盒子的布局，且与外部区域无关。 从一个现象说起 一个父盒子如"}, {"id": "6971302993601757221", "title": "两侧定宽，中间自适应布局", "desc": "实现一个网页左右两栏定宽，中间宽度自适应的布局。 圣杯布局、双飞翼布局、flex、grid、table、position"}, {"id": "6984226004394836005", "title": "纯 html + css 实现 Element UI loading 效果", "desc": "这是 Element UI loading 组件的效果图，看起来很酷，我们来实现一下！ 分析 动画由两部分组成： 蓝色的弧线由点伸展成一个圆，又从圆收缩成一个点。 圆的父节点带着圆旋转 代码 html"}, {"id": "6844904069673271310", "title": "[译] 在网页中隐藏元素", "desc": "在平时的开发工作中，有时会有隐藏元素的需求。比如，一个按钮，需要在桌面端隐藏，在手机端显示；一个导航栏，需要在手机端隐藏，在桌面端显示。“隐藏”不是字面上展示的这样简单，它还包含几层意思： 元素完全从文档流中移除的隐藏。 元素仅仅是视觉上的隐藏，使用像屏幕阅读器（screen …"}, {"id": "6971019090844778526", "title": "CSS 盒子模型之外边距（margin）的注意点", "desc": "1.1 外边距（ margin ）属性 margin 方位属性 属性名 属性值 描述 实例 margin-top 正数px 设置上外边距的宽度 margin-top: 1px; margin-righ"}, {"id": "6935269870191771662", "title": "CSS学习- 层叠、优先级、继承", "desc": "你创建的效果没有生效，通常的原因是你创建了两个应用于同一个元素的规则。cascade,和它密切联系的概念是specificity, 决定在发生冲突的时候应该使用哪种规则。 Stylesheets cascade（样式表层叠）-- 简单的说, css规则的顺序很重要: 当应用两条…"}, {"id": "6867135878067093517", "title": "CSS 的几种经典布局", "desc": "经典的行布局，就是页面的结构（头、主体内容、尾）都是一行行排列下来的，常用于网站首页，如 Layui 的首页 。 经典的列布局，就是页面内容按照多列划分。 圣杯布局是由国外的 Kevin Cornell 提出的一个布局模型概念，实现了三列布局，两边定宽，中间宽度自适应，且中间栏…"}, {"id": "6844903495926185998", "title": "CSS并不简单--带你认识不一样的渐变", "desc": "更加灵活。 很显然，这比纯色的背景好看太多了。 由此可见，渐变并没有那么简单。 通过这个例子，是不是使用渐变的思路更加开阔了。不过这里还需要注意一点： 当你声明多个渐变时，最先声明的，离用户越近。（这里就需要我们考虑遮盖的问题，一般采用transparent）； 对于径向渐变的…"}, {"id": "6844903959342104583", "title": "CSS3: 解决 iOS 11 低版本输入框光标溢出问题", "desc": "在使用内嵌 webview， iOS 的时候发现了密码的输入框的光标不在正确的位置，溢出到 input 框外面了。 google 了一下问题，发现是 i 11 低版本的 safari 浏览器会出现的问题。"}, {"id": "6844903559150977037", "title": "[译] Bulma: 2018年你应该关注的CSS框架", "desc": "在这 Bootstrap 主导的世界里，Semantic UI和Foundation备受欢迎, 其它的一些框架很难脱颖而出。不过, 这三个是众所周知的, 已经相对成熟, 并且在市场上存在了相当长的时间, 但是它们都相对较重, 它们都需要对核心有深刻的理解，尤其是你需要自己定制些…"}, {"id": "6897921154628583431", "title": "CSS揭秘：5.条纹背景（下）", "desc": "上篇文章讲述了实现条纹效果所使用的CSS特性并实现了水平和垂直条纹，接下来我们来实现斜向条纹。 现在我们来试一下斜向条纹的效果。 1. 斜向 First Try 看来效果并不是我们想象的那样。 2. 斜向 Second Try 双条纹 第一次尝试失败了，但是失败的经验还是有的，…"}, {"id": "6844903501064060942", "title": "你的网站可以一键变色吗？", "desc": "若干年前写过一个叫「网站换色精灵」的小工具，原理是调整网站所有图片的色相、饱和度和亮度。然而并没有什么人用……或许是因为做得不好，又或许这本身就是一种伪需求。得益于 Web 标准的发展和设计风格的变化，前端开发者从通过切图还原设计逐渐变为通过…"}, {"id": "6979384258917826574", "title": "CSS基础复习第四天", "desc": "这是我参与更文挑战的第29天，活动详情查看：更文挑战 浮动 float: 浮动，漂浮。 属性值：left(左浮动) right(右浮动) 浮动元素性质 浮动的元素脱离标准文档流 体现：不在区分块级元素"}, {"id": "6913835819891589128", "title": "深入理解CSS之 如何使子元素撑宽 设置了display: block; 的父元素", "desc": "可能看到这个标题的并且懂一点 css 的小伙伴就要笑了，子元素称宽父元素不是很简单吗。 只需要设置父元素 display 为 inline-block, 或者 设置 float: left 并清除一下浮动影响就行，就像下面这样。 也可以设置 爷爷（父元素的父元素） 元素 dis…"}, {"id": "6906425299370672136", "title": "聊一聊居中实现方式", "desc": "需求：有时页面内的一些容器需要定位在特定的某个位置，但是需要容器在水平方向上面居中显示，比如页面内的一个背景图里面放置一个容器，使用margin-top不方便，就决定使用绝对定位来设置。"}, {"id": "6934671012638408712", "title": "float布局相关", "desc": "1. 概念： 2. 浮动的规则 朝着向左或向右方向移动，直到自己的边界紧贴着包含块（一般是父元素）或者其他浮动元素的边界为止。 浮动元素不能层叠，如果一个元素浮动，另一个浮动元素已经在那个位置，后浮动的元素将会紧贴着前一个浮动的元素 (左浮找左浮，右浮找右浮)。如果水平方向剩余…"}, {"id": "6979161068404736007", "title": "前端CSS编码规范", "desc": "CSS编码规范 语法 使用4个空格的 soft tabs — 这是保证代码在各种环境下显示一致的唯一方式。 使用组合选择器时，保持每个独立的选择器占用一行。"}, {"id": "6844903501840023560", "title": "如何在 CSS 背景图片中对 SVG 图片进行着色", "desc": "如何在 CSS 背景图片中对 SVG 图片进行着色"}, {"id": "6844903641363546120", "title": "纯 CSS 实现缕空遮罩层", "desc": "最容易想到的方法是切图，这个不用解释了。 在网上找到的大部分做法都是用边框，那么我们来看一下边框怎么实现这个效果。 原来是因为 border-width 设置越大，圆角会越不明显，超过一定数值就会变成直角（可以把 filter: blur(15px) 去掉看看），而且设置 bo…"}, {"id": "6844903865737822216", "title": "[译] 将第三方动画库集成到项目中 — 第 1 部分", "desc": "创建以 CSS 为基础的动画可能是一个挑战。它们可能是复杂且耗时的。你是否需要在时间紧迫的情况下调整出一个完美的动画（库）来推进项目？这时，你该考虑使用一个拥有现成的动画插件的第三方 CSS 动画库。可是，你仍然会想:它们是什么？它们提供什么？我如何使用它们？ 我们来看看吧。 …"}, {"id": "6844903542549905416", "title": "CSS实现长宽比的几种方案", "desc": ""}, {"id": "6844903849723969544", "title": "[译] 为什么 HTML 中复选框样式难写 — 本文给你答案", "desc": "在当今世界，大多数网页开发者认为掌握 JavaScript 是优先选择，这理所当然，因为 JS 是浏览器脚本语言。虽然 HTML 和 CSS 决定网站的样式，但是 JS 凭借它能调用 HTML 和 CSS API，优良性能以及它的多功能性，深受网页开发者喜爱。像 React、V…"}, {"id": "6844903506370002958", "title": "[英] 如何使用 Vue.js 里的 Transition 和 Animation", "desc": "好用"}, {"id": "6977353622891790366", "title": "CSS基础知识要点(Y5)", "desc": "1.【border】边框（布局时会占用空间） 1.1设置边框 1.2边框方向 1.3边框宽度 1.4圆角边框 2.【outline】轮廓线（不影响布局） （同边框一致）"}, {"id": "6844903645373267981", "title": "使用CSS Grid的九大误区", "desc": "在Web世界中，大家都知道，使用任何一项新技术都易于犯错，特别是像CSS Grid这样的与过去有很大变化的东西。初学者或者有一定经验的Web开发人员，都无法一时之间就能把控所有。@Jen Simmons录制了一个视频，向大家阐述了使用CSS Grid的九大误区，也是使用CSS …"}, {"id": "6844903958452895752", "title": "CSS梳理之流的破坏float与BFC", "desc": "“流”，文档流，是CSS中最基本的定位和布局机制。 浏览器中的元素默认的从左到右（内联元素），从上到下（块级元素）如同流水一般堆砌的布局方式。 被设置了float属性的元素呈现包裹性，即其自身的width不是默认撑满父元素，而是和height属性一样由子元素决定。 脱离文档流，…"}, {"id": "6902797258434019336", "title": "2d和3d变换", "desc": "transform-origin将当前变换原点(x1，y1，z1)变为(x1+x2，y1+y2，z1+z2)%pxem水平方向取值，相对元素的宽，leftcenterbottom垂直方向取值，相对元素"}, {"id": "6844903846930546695", "title": "移动端适配--meta标签玩的是什么", "desc": "基本一直都在做移动端的开发，rem布局也写了很久，不过对于实现的原理有些模棱两可的盲点，自己总结一下留着以后回顾。 本文分以下几个层面，主打用最最通俗的语言来阐述。 viewport是什么？翻译过来就是视窗的意思，只不过在移动端，视窗稍微有点绕。在解释这个之前，不得不引出几个词…"}, {"id": "6844903551945146381", "title": "【前端Talkking】CSS3系列-css3之线性渐变初探", "desc": "入行前端一年多的时间，想提高自己的css技术水平，于是在网上看了些关于css的书籍，想买几本比较好的css书籍啃啃，找来找去，终于找到了《CSS揭秘》这本书。入手这本书后，从开始看到后面，发现书中的很多效果都可以使用渐变来实现，于是，我对渐变产生了兴趣，决定好好掌握css3中的…"}, {"id": "6844903602125799431", "title": "【前端Talkking】CSS系列——CSS深入理解之absolute定位", "desc": "1. 写在前面 本篇将要介绍的绝对定位absolute属性和此前介绍的CSS系列——CSS深入理解之float浮动有着几分的相似性，可以认为两者是兄弟关系，都具有“包裹性”、“高度塌陷”、“块状化”的特性，它们在很多场合都可以互相替代。很多人可能有这样的疑问：一个属性名是“po…"}, {"id": "6946083880734556167", "title": "css布局----flex弹性布局(移动端完美解决方案）", "desc": "Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。本文给出了 flexbox 的主要特性。 我们说 flexbox 是一种一维的布局，是因为一个 flexbox 一次只能处理一个维…"}, {"id": "6844903656135852046", "title": "关于CSS变量你需要知道的一切", "desc": "这是我新书的第一章（PDF和Mobi格式都有）。 多数编程语言都支持变量。但是CSS从最初就一直缺少对原生变量的功能支持。 你写CSS吧？那你就没办法用变量。不过，你还可以用Sass这样的预编译器。 Sass这样的预编译器就把变量作为一个巨大的卖点，一个尝试新东西的原因。你知道…"}, {"id": "6844903655770947597", "title": "BFC 初体验", "desc": "BFC(Block Formatting Context)，中文翻译为“块格式化上下文”。它有一个明显的特性，那就是如果一个元素拥有了 BFC 特性，那么它内部元素不受外部元素的影响，外部元素也不会受其内部元素的影响。 先来看看 MDN 对 BFC 的解释。 好像也没具体的说什…"}, {"id": "6902063717236604936", "title": "box-shadow和text-shadow", "desc": "box盒模型定义参考文章：https://zhuanlan.zhihu.com/p/291489867盒子内部盒子外部content-box（标准盒模型）boxWidth=width+border2+"}, {"id": "6844903568923688967", "title": "初探CSS Grid布局", "desc": "在CSS3中纳入的Flex Box布局给前端开发者带来了极大的便利，它的强大是有目共睹的。很多以前需要以前复查代码实现的布局，现在通过 Flex Box 很容易就实现。而在下一版本的CSS规范中正在讨论纳入一个更加强大的布局系统，它就是今天要说的： CSS Grid Layou…"}, {"id": "6859685285127520269", "title": "Re：从零开始の CSS 学习笔记——布局（下）", "desc": "container 中的子元素，与列数一一对应。且默认只占据第一行。所以添加 border 后 效果如下图所示"}, {"id": "6901614433013858318", "title": "CSS盒模型", "desc": "在 CSS 中，所有的元素都被一个个的“盒子（box）”包围。每一个盒子包括内容(content)、内边距(padding)、边框(border)、外边距(margin)，这些元素共同组成盒模型。"}, {"id": "6844903552637206535", "title": "奇舞周刊第 244 期：Web 前端中的 AR 开发技术", "desc": "“在使用 React Native 开发中，我们熟练的采用 JavaScript 的方式发送请求的方式发送一个请求到服务端，但是处理这个请求的过程其实和处理 Web 应用中发送的请求的过程是不一样的。” 科普文一篇，前端方向的 AR 技术总结。 “我们需要明确的一点是: 重构不…"}, {"id": "6844903590843121671", "title": "只要你去过餐厅就能理解的前后端通俗解释", "desc": "If you have ever visited a sit-down restaurant, then you can understand the difference between front-end and back-end in web development. W…"}, {"id": "7000385001539928100", "title": "[8K字] CSS Background&Gradient完全指南(V0.1) #Archives009", "desc": "Coding Changes the World. 最简约高效的前端教程 / 表达最张狂的个性 / 创作不一样的体验 / 设计狂喜 ---- 忘我思考"}, {"id": "6999627144758296584", "title": "纯CSS制作跳动的心", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 问题起源 CSS不知道写啥了，兄弟们给出道题目吧 今天来写一个跳动的心给各位工友们，把你的心拿给那个她/他吧。 画心 我们先来看看心长什么"}, {"id": "6989819741468622855", "title": "翻译：styled-components 快乐之路", "desc": "styled-components是目前运用最为广泛的CSS-in-JS库之一。作者总结了自己几年来在React项目中使用styled-components的最佳实践，其方法和理念值得借鉴。"}, {"id": "6844903997459922958", "title": "CSS简单的继承", "desc": "也许你瞧不起以前的 css ，但是你不该再轻视眼下的 css 。近年来 css 的变量系统已逐步得到各大浏览器厂商支持，自定义选择器等强势袭来，嵌套系统/模块系统也在路上...为了更好的掌握 css 这门语言，很有必要把之前零零散散的 css 知识回炉重造下。 css 作为一门…"}, {"id": "7004378964743421982", "title": "css增强的功能", "desc": "一、样式前缀的自动补齐 现代浏览器的内核及前缀： IE浏览器：内核为Trident，前缀为-ms 火狐浏览器：内核为Geko，前缀为-moz 谷歌浏览器：内核为Webkit，前缀为-webkit 有些"}, {"id": "6997029820089499679", "title": "CSS 绘制各种常见的形状（三）", "desc": "使用 CSS 可以绘制出许多形状，比如三角形、梯形、圆形、椭圆等等，并不只是可以绘制矩形，还可以绘制心形、钻石、鸡蛋、吃豆人、聊天框、图标等等。下面来看看怎么实现这些形状的吧。"}, {"id": "6989649909938913294", "title": "神马是CSS预处理器", "desc": "- 什么是才css预处理器 ​ 既然要讲css预处理器，那首先知道什么是预处理器，简而言之，预处理器接受任意源文件，并将其转换为浏览器可以理解的东西。顾名思义，CSS预处理器用自己的手段将CSS处理浏"}, {"id": "6997199396869783588", "title": "CSS实现三角形", "desc": "这是我参与8月更文挑战的第七天，活动详情查看：8月更文挑战 # 前言 原生CSS实现图标 的好处 项目中图标的引入固然方便，但对于简易的图标可以使用CSS实现，来减轻服务器的压力。 思考的过程"}, {"id": "6844903519359598599", "title": "编写自己的代码库(css3常用动画的实现)", "desc": "在月初的时候，发了CSS3热身实战--过渡与动画（实现炫酷下拉，手风琴，无缝滚动）。js的代码库也发过两次，两篇文章。之前也写了css3的热身实战，既然热身完了，是时候开始封装css3的代码库了，相比起js的代码库，css3的代码库的逻辑性就更加简单了！可以说只要打上注释和一张…"}, {"id": "6844903749341675527", "title": "2018 最佳前端动效集锦", "desc": "用 CSS 能够做到什么？啥都有可能，看看这一年最美的动效吧，让你感受到帅气的动画哦！"}, {"id": "6877300587843551245", "title": "学好 css伪类 == 秋天的第一杯奶茶 🥤", "desc": "小红: 我觉得用户在选择一组数据时候， 能够知道默认选项是什么, 可以起到一定的引导作用, 增强用户体验。 另外 如果 option 中没有 selected, checkbox 和 radio 没有 checked, 伪类 :default 是不会匹配的。 小明: 怎么有这么…"}, {"id": "6982118272057475109", "title": "css来做el-table高度自适应", "desc": "纯css解决el-table高度自适应问题。flex布局与el-table高度问题解决。el-table高度自适应问题。"}, {"id": "6959070286192836616", "title": "CSS实现动画真的性能更好么？由页面动画卡顿引发的思考", "desc": "最近在优化页面动画效果时，和同事探讨到了页面动画卡顿的问题，即使大致了解CSS实现的动画会比JS性能更佳，卡顿更少，但是一直没有深究这样的问题原理是什么。这次在优化过程中，发现即使使用CSS动画，但是"}, {"id": "6844903688222277640", "title": "优秀前端必知的话题：我们应该做些力所能及的优化", "desc": "在 Web 应用开发过程中，我们经常谈及到的就是优化，而优化往往又是既简单而又复杂的过程，优化这个命题很广，最终体现出来的都是用户体验问题，我们一切优化都是为了用户体验。 为什么说简单？在现代 Web 开发生态中，有非常优秀的工具链帮助我们做一些很实际的优化工作，例如 webp…"}, {"id": "6844903552217792520", "title": "怎麽把＂滚动条＂隐藏？", "desc": "只要网页内容大于视窗，滚动条就会出现。 一般来说，只要不是body层次的滚动条，那用overflow: hidden;就能解决滚动条出现的问题，但此时页面也会变得无法捲动。 目前网路上已经有诸多可隐藏非body层次的滚动条又可捲动页面的教学，所以本文主要聚焦于如何隐藏浏览器（也…"}, {"id": "6936811586736619551", "title": "实现 3D 时间动画展示效果", "desc": "使用伪元素和元素的颜色差，让伪元素向我们的方向移动，实现影子效果。 使用transform属性，计算每一个块元素的位置组成一个数字。 使用transition属性给line::before和line::after设置过度动画。 通过css属性选择器，获取自定义属性的值。通过变换…"}, {"id": "6844903622602407950", "title": "如何利用vw+rem进行移动端布局", "desc": "因为在公司，只有一个前端，在做移动端布局的时候。利用px进行布局,发现，需要进行各种手机的适配。 所以在开发第二版的时候，想着引用lib-flexible库(即手淘的方案),询问了上一家公司的同事，会有一些字体和一些诡异的问题。 在无意中，突然一个网友跟我说，他有一个很好用的适…"}, {"id": "6965372708905287717", "title": "CSS3实战：实现一个旋转的3D金币", "desc": "使用css实现一个立方体，很简单。但你有想过怎么来实现一个360°无死角的圆柱体吗？come on~"}, {"id": "6844903569896767501", "title": "分享收集的一大波前端面试题和答案", "desc": "在github上看到的内容很好很丰富的一篇面试题（附带答案），不知道又没有被分享过，拿来分享一下，觉得不错的可以给个star给作者"}, {"id": "6930436514480390152", "title": "纯CSS实现的三种通知栏滚动效果｜牛气冲天新年征文", "desc": "通知栏组件是一个比较常见的组件了，基本上每个站点都会有怎么个组件，主要就是通告站点的一些变化或者是告知一些中奖名单等作用。 最近在复习CSS3动画部分内容，想着平时通知栏组件大部分还是用JS来实现，正好拿这块组件来当复习，下面写了三个小例子在此分享，欢迎大家观看，如有疑问，欢迎…"}, {"id": "6844903990669361165", "title": "响应式布局方法总结", "desc": "响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局。传统的开发方式是PC端开发一套，手机端再开发一套，而使用响应式布局只要开发一套就够。 响应式：只需要开发一套代码。 响应式设计通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容。 自适应：需要开发多…"}, {"id": "6844903598556446733", "title": "你应该知道的前端——缓存", "desc": "web 缓存是可以通过自动保存常见文档副本的 HTTP 设备。当 Web 请求抵达缓存时,如果本地有以缓存的副本,就可以从本地存储设备而不是原始服务器中提取这个文档。 1. 为什么需要缓存 有很多客户端访问一个流行的原始服务器页面时,服务器会多次传输同一份文档,每次传送给一个客…"}, {"id": "6999090071424991245", "title": "浅谈 CSS3 新特性：过渡效果", "desc": "CSS `transitions` 提供了一种在更改 CSS 属性时控制动画速度的方法。 其可以让属性变化成为一个持续一段时间的过程，而不是立即生效的。"}, {"id": "6844903701891514382", "title": "「前端那些事儿」③ CSS 布局方案", "desc": "居中布局1、水平居中a)inline-block+text-aligntips：此方案兼容性较好，可兼容至IE8，对于IE567并不支持inline-block，需要使用csshack进行兼容b)ta"}, {"id": "6844903657842933774", "title": "15 个有趣的 JS 和 CSS 库", "desc": "时光如白驹过隙， Tutorialzine 为我们带来了 2017 年 4 月份一些精心挑选的优秀 Web 开发资源。前端开发者们，让我们一起先睹为快吧！ Core UI 是一个基于 Bootstrap 4 的管理模板，它提供了创建控制面板的高度自定义解决方案。同时，为了让你快…"}, {"id": "6999968617160769573", "title": "css3实现椭圆轨迹旋转加闪烁", "desc": "实现效果如下图：开发一个沿椭圆轨迹旋转的动效 设计拆解 div块叠加的方式，以下图图标为底图，叠加一个沿椭圆轨迹移动的小球和一个闪"}, {"id": "6982452299301912589", "title": "重铸 CSS preprocessor 荣光 SCSS 义不容辞", "desc": "CSS with superpowers, most mature, stable, and powerful profession grade CSS extension language."}, {"id": "6987941038241349663", "title": "五分钟get纯css 旋转星球动画（vue篇）", "desc": "工欲善其事，必先利其器，脱离js，撸一个纯css动画。用不用到是其次，关键你得会，五分钟制作旋转动画星球，"}, {"id": "6974783378797101069", "title": "dispaly结合背景图片会提升加载性能", "desc": "“这是我参与更文挑战的第1天，活动详情查看： 更文挑战” 1.display的常见现象 2. 在谷歌浏览器中什么情况使用 display 图片不会进行加载 3.不使用display图片会进行请求吗? "}, {"id": "6978373459176849444", "title": "原来404页面也能这么炫酷！", "desc": "在浏览网页的时候，经常会遇到一些404的网页，一般来说都是很简陋的布局，但是最近发现了一个超炫酷的404页面~"}, {"id": "6844903784670298119", "title": "那些你需要知道的CSS-总结", "desc": "是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果px要换算成物理长度，需要指定精度DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。Windows系统默认是96dpi，Apple系统默认是72dpi。 是一个相对长度单位，最初是指字母…"}, {"id": "6996858497576992805", "title": "老司机重学CSS：Flex", "desc": "Flex 的基本概念有： flex container （容器）、 flex item（项目）、main axis（主轴）和 cross axis（交叉轴）。"}, {"id": "6981369590169206820", "title": "CSS 日常使用小结", "desc": "这是我参与新手入门的第一篇文章，我决定先从日常中用到的css开始，抱枕我来了。 1. posotion: sticky 粘性定位 设定sticky的表现类似于relative和fixed的合体，在超过"}, {"id": "6992133099345690637", "title": "常用的布局方式", "desc": "meta视口标签（骨架标签） 最标准的viewport设置 视口宽度和设备保持一致 视口的默认缩放比例1.0 不允许用户自行缩放 最大允许的缩放比例1.0 最小允许的缩放比例1.0 去除图片的空白缝隙"}, {"id": "7001302677720137758", "title": "HTML和CSS当中的BFC模块作用和特点。（面试经典题目，大厂必问）", "desc": "1.BFC中的英文全称是 block formatter context(块级格式化执行上下文)，是css里面的一种块级概念。 我们都知道。如果有一对父组关系的元素，如果子元素有原先的高度和宽度，并且"}, {"id": "6998900704710656007", "title": "【动画消消乐】纯CSS绘制一朵白云 071", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度、高度均为50px 背景色：白色"}, {"id": "6894068581854478349", "title": "width: 100%和width: auto有什么区别", "desc": "设置children元素margin:0如果设置children元素margin:0时，那么它们之间好像没什么区别设置children元素margin:030px如果设置children元素margi"}, {"id": "6976897119953256462", "title": "css揭秘 - 过渡与动画（二）", "desc": "这是css揭秘系列文章的第十三篇，本篇主要介绍使用css可以实现的过渡与动画。包括闪烁效果、打字动画以及状态平滑的动画。"}, {"id": "6992949698550038536", "title": "三个小实例，带你快速了解CSS伪元素", "desc": "css中的伪元素，之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，也可以理解为虚假的元素。 但是其所有用法"}, {"id": "6998900528977543175", "title": "CSS中的各种单位，你都知道嘛？", "desc": "这是【从头学前端】系列文章的第十九篇-《CSS单位的分类以及用法》 本篇文章将来学习CSS中的选择器，通过本篇文章可以掌握什么内容呢？如下图："}, {"id": "6982744977050697742", "title": "《css 设计指南》读书笔记", "desc": "1.HTML 标记与文档结构 所有 img 标签都需要加上 alt 属性。 ps：视障用户使用的屏幕阅读器会读出图片的 alt 属性。 行内( a, img, em, strong, abbr)、块级"}, {"id": "6844903871546916872", "title": "CSS进阶（10）—— 深入理解BFC结界", "desc": "BFC是block formatting context的缩写，中文名为“块级格式化上下文”。前面也多次提到了这个听起来十分拗口的属性，那么CSS设计这个属性的初衷是什么呢？ 记住一句话：拥有BFC特性的元素会形成类似“结界”的封闭内部空间，该元素内部的元素以及该元素本身都不会…"}, {"id": "6895165516403441671", "title": "移动端开发45个基础点", "desc": "align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用 order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主…"}, {"id": "6844903560539439117", "title": "注释的骚操作", "desc": "我想我不是唯一需要以某种方式轻松切换代码的​​。下面的这个技巧可以用来在两组代码之间切换，代码中只有一个符号，没有额外的快捷键需要学习，也没有工具依赖关系！下面是一个更简单的版本运行中的代码注释的代码"}, {"id": "6844903497335324686", "title": "利用 CSS 检测新 DOM 节点", "desc": "仅仅 682 bytes"}, {"id": "6844903811098607630", "title": "讨论下垂直水平居中的多种方案", "desc": "写博客主要是用来总结、巩固知识点，加深自己对这个知识点的理解。同时希望能帮助到有需要的人。如有不正确的地方。可以在评论区指出。你们的支持。是我不断进步的源泉。 本来想把这个知识点放在这篇博客中讲的,但是这里涉及的内容还挺多的。于是就把它单独拉出来写了。 下面的内容使用到了fle…"}, {"id": "6844903830421782536", "title": "浅谈Matrix", "desc": "学习css 3D有一段时间了，其中特别有意思的就是transform属性和animate属性。今天来梳理一下transform属性中的Matrix; Matrix是transform中的一个属性，也是最重要的一个属性。 因为transform所提供的所有 2D 或 3D 的转换…"}, {"id": "6907068079885418509", "title": "css布局系列1——盒模型布局", "desc": "网页的布局类似于在一个大盒子中摆放各不相同的小盒子。在布局之前，首先要明确几个概念： 块元素：在页面中独占一行，高度默认被内容（子元素）撑开，宽度默认为父元素的100%，也即auto（width和height的默认值不是0，而是auto）。 内联（行内）元素：在页面中不独占一行…"}, {"id": "6973095755527651342", "title": "「HTML+CSS」--自定义加载动画【024】", "desc": "这是我参与更文挑战的第2天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 设置span标签 宽度、高度均为96px 效果图如下 span此时是没有显示出来"}, {"id": "6844903550644912142", "title": "自定义字体", "desc": "一般来说，网页上的字体使用的都是我们电脑里面的字体，比如我们常说的微软雅黑、宋体就是 windows 系统自带的字体。所以你可以看到网页的字体一般都比较中规中矩，不像平面设计那样各种新花样。 但是我们在浏览一些网站时，还是可以发现一些非常酷炫和高…"}, {"id": "6909695229247356936", "title": "css 独立变换属性", "desc": "css 的 变换属性transform和动画属性anmition一起出现在web技术上，用来在界面上添加动画效果。十多年来，这些技术一直是web平台和前端开发人员的主要工具。实际上，css的transform属性早在08年7月iPhoneOS2.0 发布的时候就在Safari中…"}, {"id": "6844903942493732872", "title": "CSS background属性使用指南", "desc": "在日常开发中，我们常常需要对背景图进行一个尺寸的缩放，上面的常规操作是无法满足我们的需求的。 当使用 background-attachment 为fixed时，background-origin属性将被忽略不起作用。 该属性分别有fill、contain、cover、none…"}, {"id": "6844903498094477325", "title": "如何适配 iPhone X 网站开发 | WebKit 官方推荐", "desc": "view-port 又有新特性，我是很爱 Safari 的，希望不要演变成 IE 😛"}, {"id": "6844903498056728590", "title": "[译]HTML&CSS Lesson3: 了解CSS", "desc": "CSS是一门复杂的语言，拥有相当的大能力。 它我们允许为页面添加布局和设计，允许多个元素甚至多个页面共享样式。在我们有能力解锁所有功能之前，我们必须先充分理解它的基础点。 首先，我们要明确的了解样式是怎么被渲染的。 具体的来说，就是我们要知道不同类型的选择器是怎么样工作的，这些…"}, {"id": "6919424167888715784", "title": "用CSS 实现多片树叶 [动画演示] [#7持续更新中.....]", "desc": "本文是 #7 Leafy Trail，实现多片树叶。 主要解决思路就是使用border-radius把左上和右下的角弯曲，然后再用box-shadow向左复制另外的 2 片叶子。 1. body 使用 display:flex， 创建一个div并且居中 这里另外使用了trans…"}, {"id": "6844903520097812494", "title": "简解Css3 - linear-gradient", "desc": "简单的说，元素只要用了linear-gradient，它等同于一张图片。 所以它只能用在图片可以用的地方。如：background、background-image。 不要把它当作颜色用在color等样式中。 简单起见，只讲一种最通用的使用方式。 angle描述渐变的方向，单位…"}, {"id": "6844903822142226446", "title": "小程序scroll-view换行问题", "desc": "break-all ： 该行为与亚洲语言的normal相同。也允许非亚洲语言文本行的任意字内断开。该值适合包含一些非亚洲文本的亚洲文本，这个值会将单个的英文字符判定为独立的个体，每个英文字符都可以作为换行的表示 keep-all :与所有非亚洲语言的normal相同。对于中文，…"}, {"id": "6844904033056997390", "title": "在写 CSS 之前你应该了解的一些东西", "desc": "在日常开发过程中，团队成员的 CSS 写法多样，不同成员会有不同的命名方式，造成整体的样式结构比较混乱，同时，由于对 CSS 的部分认知有点偏差，写出来的样式代码健壮性不高，且难以维护。因此，本文提供了一个基础的指南和规范，让团队的同学在编写 CSS 代码之前能有一个简单的参考…"}, {"id": "6844904041659514893", "title": "灵魂拷问——关于DOM元素中的空白符", "desc": "请查看下面的示例代码，在ul元素下有三个使用display: inline-block;水平排列的li元素。 通过使用document.querySelector('ul').childNodes获取ul元素的子节点，可以发现，在li元素之间，存在节点类型为3的文本节点text…"}, {"id": "6844903886642216967", "title": "10 分钟理解 BFC 原理", "desc": "BFC是一个面试经常被提起的问题，却很少有人真正明白其含义……"}, {"id": "6894760287107448845", "title": "一篇文章带你了解CSS3 3D 转换知识", "desc": "CSS33D变换功能允许在3D空间中变换元素。一、元素的3D转换使用CSS33D变换功能，可以对三维空间中的元素执行基本的变换操作。如移动，旋转，缩放和倾斜。变换后的元素不会影响周围的元素，但可以像绝"}, {"id": "6844904084114259976", "title": "绝对定位+margin auto垂直居中引发的思考", "desc": "如何居中一直是前端开发一个比较有意思的问题，估计每个做前端开发的人都能说出几种方法来。但是不知道各位有没有想过背后更深一点的东西。下面我将借着本篇博客对使用margin居中的问题阐述一下自己的见解。 首先我们来讨论一下水平居中的情况。 为什么居中的效果突然消失了？其实这个问题应…"}, {"id": "6844903701266563079", "title": "[翻译] 用 CSS 背景混合模式制作高级效果", "desc": "如果「一图胜千言」，那多图混合创造的效果要超过千言万语。同理，CSS 的混合模式为设计带来的可能性远远超出了你的想象。 你所听到的 CSS 混合模式，就是三个被现代浏览器所广泛支持的 CSS 属性。这三个属性包含了： 不过，本文主要聚焦在 background-blend-mo…"}, {"id": "6979531161097732132", "title": "CSS 列表（有序，无序，去掉无序列表的点，列表一行显示）", "desc": "有序列表 样例代码： 效果截图： 无序列表 样例代码： 效果截图： 无序列表去掉点 通过直接在 ul 标签里写 style 属性或者写个选择器，加上 list-style: none; 这句都可以实现"}, {"id": "6987286411833671694", "title": "css样式表的三种方式", "desc": "在做html页面开发时，我们都会使用到css样式的，css样式有三种应用方式，下面我们来了解一下吧。 第一种方式，是使用link标签引用样式文件。   样式文件的样式定义和其他方式的一样，书写规范的样"}, {"id": "6972719794051088414", "title": "图片的预加载与懒加载", "desc": "图片预加载与懒加载 总结来说: 图片的预加载在一定程度上加强了服务器的压力, 图片的懒加载在一定程度上减轻了服务器的压力 预加载 就是在我们需要使用到图片资源的地方之前就先把这些图片资源加载下来,这样"}, {"id": "6844903569523474439", "title": "你应该知道的Sass常用方法", "desc": "像一些Sass是什么的基础概念，在这里我就不提了，只提供干货，相信别的文章关于Sass的描述还是很多的。 SASS允许使用变量，所有变量以$开头。 如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。 SASS允许选择器嵌套。比如: 在嵌套的代码块内，可以使用&引用父元素。…"}, {"id": "6844903807529254919", "title": "这样使用 GPU 渲染 CSS 动画", "desc": "大多数人知道现代网络浏览器使用GPU来渲染部分网页，特别是具有动画的部分。 例如，使用transform属性的CSS动画看起来比使用left和top属性的动画更平滑。 但是如果你问，“我如何从GPU获得平滑的动画？”在大多数情况下，你会听到像“使用transform:trans…"}, {"id": "6904560371814957069", "title": "2020年的css周边：preprocessor、css-in-js等解决方案与methodology", "desc": "最后结合vue-cli和create-react-app,对其预设的css方案进行分析，推荐出我们在日常项目中可以采用的较好方案。 缺少模块化，全局的选择器因其级联特性会造成样式映射不易维护。 对第一个问题，可以用preprocessor、post-css等方式先用另一种语法编…"}, {"id": "6942028171055202340", "title": "一文就能完全掌握CSS中的background属性！", "desc": "本文想通过简单的属性介绍和代码实践，给大家一个更加直观的CSS规则和表现的认识，同时领略CSS神奇的表现能力，以提升我们在UI开发过程中的效率。 background（背景）属性，是关于背景颜色、位置、图片等属性描述的集合，是一种简写，与其分析简写形式，不如逐个分析有关背景描述…"}, {"id": "6844904024718721038", "title": "CSS实现前端国际化的另类方式", "desc": "一个项目发展到一定的环境或者一开始就是为多国打造的，就需要考虑国际化了。简单来说，就是一套页面，多套语言。 然后，页面所有的官方组件都变成了中文（默认是英文）。 具体使用方式可以自行搜索，无非就是看各种api和配置文件。 其实原理很简单，这里只讲最基本的原理，不谈框架的特性。 …"}, {"id": "6844903838625841160", "title": "Margin会重叠，你造吗", "desc": "之所以要专门写一篇文章去解释margin重叠，一是因为前面的文章里有提到过，怕有些童鞋不了解；二是要写的内容不是三言两语就能说清楚的。 在讲重叠之前，我们先来了解一下margin这个属性。 一. margin 基础讲解 这个属性呢，太常见，我就大概讲讲，有几点大家注意一下就好。…"}, {"id": "6844903604403306510", "title": "CSS animation和transition的性能探究", "desc": "你可能已经在你的项目中用上了CSS Animation和CSS transition。如果还没有用上，那你有点out了。快去看下CSS-Trick上的这两篇关于animation和transition的文章。你在使用中一定发现了有些动画很流畅，而有些则很卡。为什么呢？"}, {"id": "6844903677866541070", "title": "基于webpack4[.3+]构建可预测的持久化缓存方案", "desc": "web缓存的好处不用多说，自从webpack一桶江湖后，如何做Predictable long term caching with Webpack让配置工程师们头疼不已。 webpack4.3前，有相当多的文章介绍如何处理（见参考），这里想做些更到位的探索。 使用HashedM…"}, {"id": "6987060505437290532", "title": "CSS 居中总结", "desc": "本文总结了 CSS 水平、垂直居中常用的方法。如果不考虑兼容性问题，推荐 flex 弹性盒子布局，不推荐绝对定位。"}, {"id": "6945012876960759816", "title": "BEM", "desc": "BEM的关键是，可以获得更多的描述和更加清晰的结构，从其名字可以知道某个标记的含义。于是，通过查看 HTML 代码中的 class 属性，就能知道元素之间的关联。 - 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。 block 代表了更高级别的抽象…"}, {"id": "6944633103688302606", "title": "CSS布局（四）", "desc": "到目前为止，CSS布局系列的文章已经写了三篇了，前面的三篇主要为到CSS布局的基本概念，CSS的基本布局方式，以及flex布局。这一篇文章是该系列的最后一篇文章，主要讲grid布局和多列布局的相关内容。前文之路： 这篇文章，我们从Flex布局和Grid布局的区别开始聊起，然后具…"}, {"id": "6844903510165684237", "title": "搭建 vue2 vue-router2 webpack3 多入口工程", "desc": "通过两个具体场景来介绍如何配置多入口工程"}, {"id": "6844904200346796045", "title": "一文汇总 CSS 两列布局和三列布局", "desc": "随着大前端的发展，UI 框架层出不穷，让我们前端开发对 CSS 的能力要求变得没那么高或者没那么严苛，起码重要性是比不上 JS 编程的。但是，基础的 CSS 依然需要我们熟练掌握，今天就来总结写下 CSS 布局的方式。 圣杯布局和双飞翼布局目的都是希望先加载的是中间的部分，然后…"}, {"id": "6844903503866019854", "title": "WebRender：让网页渲染如丝顺滑", "desc": "Firefox Quantum 发布在即。它带来了许多性能改进，包括从 Servo 引入的的极速 CSS 引擎。"}, {"id": "6844904089155960846", "title": "CSS 夜点心：类名范式一览", "desc": "CSS 的特性不断增强，预编译框架也层出不穷，但是即使使用 cssModules 这样的 scope 技术，我们仍需要一些范式来指导我们在局部更规范合理地给类取名字。 不同的范式的侧重不同，有些范式可以相互兼容组合，有些不能。他们大都是为了达成以下目标诞生的： OOCSS 提倡…"}, {"id": "6914934864256958478", "title": "CSS之CSS3样式", "desc": "border-image-repeat: 重复（repeat）、拉伸（stretch）或铺满（round）。 border-box：border不会影响背景，直接把border的内容也算在背影里面，背景会减去border的长度。 background-origin:conten…"}, {"id": "6844903541308391431", "title": "Bootstrap栅格布局源码解读", "desc": "接下来就是响应式布局了，一模一样的东西，顺便吐槽一下，一模一样的东西，为毛要写那么多？看不出来哪里响应了。。可能是less编译的问题吧。。。"}, {"id": "6844903725014712333", "title": "纯CSS实现小图标变色的一些研究", "desc": "想要使用CSS改变PNG小图标的颜色，似乎不太可能。但，实际上，我们可以有多种方法改变PNG小图标，SVG小图标的颜色，并且是任意的色值，可以是作为背景图片的图标，也可以是内联的图标。究竟如何CSS改变图标的颜色呢？点击链接揭开秘密。"}, {"id": "6844903645394272270", "title": "Webpack 黑魔法之 CSS Entry", "desc": "大家都知道 webpack 的 Entry 都是 js，如果想输出 css 文件只能在 js 文件里导入 css，所以很多人都会想要是 entry 也可以是 css 那多好，这样就可以任意输出 css 。那么问题来了：怎么让 webpack 支持 css 作为 entry 呢？"}, {"id": "6917917169640701959", "title": "css absolute与relative", "desc": "用绝对定位和相对定位的时候有时候效果总跟自己预想的不一样，在此做个小记录。首先建两个div一个为父一个为子<divclass=\"test1\"> <divclass=\"test2\"></div></di"}, {"id": "6844903599110094861", "title": "【CSS GRID】一起来学习CSS网格布局吧！", "desc": "CSS网格布局（Grid）是一套二维的页面布局系统，它的出现将完全颠覆页面布局的传统方式。传统的CSS页面布局 一直不够理想。包括table布局、浮动、定位及内联块等方式，从本质上都是Hack的方式，并且遗漏了一些重要的功能（比如：垂直居中）。"}, {"id": "6909377657268338695", "title": "冷门Grid 布局", "desc": "兼容性grid(95%左右)，基本都用flex （99.18%）布局。 网格线： 用来分割容器的线。分为水平网格线和垂直网格线 主要通过7个属性来设置构建容器。 对父元素使用上面的代码，就可以实现图中的效果。完整的写法是place-items: &#x3C;align-item…"}, {"id": "6919480357993578509", "title": "CSS：float、flex、grid三种常用布局方法", "desc": "CSS常用布局方法有：float布局、flex布局和grid布局。 如果兼容IE 9，则选用float布局，若无此项需求，则考虑flex布局和grid布局。当只需要兼容最新浏览器时，采用grid布局更"}, {"id": "6844903607792320519", "title": "CSS 专家提示", "desc": "CSS Resets 强化跨浏览器的一致性，并提供元素以干净的层叠样式。你可以使用诸如 Normalize 的 CSS reset 库。或者使用一种更为简单的方式： 现在，所有的元素都除掉了浏览器默认的 margin 和 padding，box-sizing 让你可以使用 CS…"}, {"id": "6844903569036935176", "title": "30秒学会酷炫的CSS代码", "desc": "A curated collection of useful CSS snippets you can understand in 30 seconds or less."}, {"id": "6844903846418857992", "title": "CCS进阶——div的宽度和高度是由什么决定的？", "desc": "我们先来看一个例子。这个div的高度是多少呢？ 不是。 换个字体就不是了。默认是行高和字体设计有关系。 div的高度不确定。或者说div的高度等于line-height指定的高度。 再加上text-align:center;就可以实现文字垂直水平居中。 总结：div的高度是由什…"}, {"id": "6844903616361267213", "title": "CSS魔法堂：Flex布局", "desc": "Flex是Flexible Box的缩写，就是「弹性布局」。从2012年已经面世，但由于工作环境的原因一直没有详细了解。最近工作忙到头晕脑胀，是要学点新东西刺激一下大脑，打打鸡血。 一说到兼容性就是永远的痛，不过幸运的是只要在IE10加-ms-前缀就可以用啦^_^ Flex…"}, {"id": "6946567338900586533", "title": "全面了解CSS“浮动”", "desc": "1. 浮动的初心 最初float属性的出现主要是为了实现浮动元素周围文字环绕的效果。如下示例： 可以发现，对于浮动元素后面的第一个同级正常元素，其文本会环绕在其周围（尤其是当浮动元素未占满一行时这一表现更加明显）。这是我们初始浮动所观察到的现象。实际上，这还不够全面和准确！ 2…"}, {"id": "6844903952882860045", "title": "【CSS】display的32种写法", "desc": "你知道『回』字有四种写法，但你知道display有32种写法吗？今天我们一一道来，让你一次性完全掌握display，从此再也不用对它发愁。 1. 外部值 所谓外部值，就是说这些值只会直接影响一个元素的外部表现，而不影响元素里面的儿子级孙子级元素的表现。 1.1 display:…"}, {"id": "6844903696904486925", "title": "图形算法可视化", "desc": "最近看了一些和图形、算法可视化相关的文章和代码，挺有意思，于是自己也学着做了些东西。 迷宫小时候玩过，但从来没琢磨过迷宫是怎么设计的，以为就是有人慢慢画出来的。看过网上这篇文章后，才知道，原来还可以随机生成： 自己找了些资料参考，试着实现了几种之后，才慢慢领会到其中的一些原理。…"}, {"id": "6898968128370245639", "title": "移动web开发基础", "desc": "总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。 含义：用户正在看到的网站的区域。 可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。 物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了的。 Retia(视网膜屏…"}, {"id": "6844903545079234574", "title": "使用ElementUI开发系统（介绍与开发中遇到的问题）", "desc": "最近使用ElementUI开发项目，遇到一些问题，由于网上能找到相关的资料实在太少了，所以把这次项目中的问题总结一下。 下载下来后你会发现，他们提供了一个element-variables.css给你设置你的主题色，帮助你快速设置你项目的主题颜色甚至是组件的长宽圆角。 如果你是…"}, {"id": "6844903844728537102", "title": "【Hello CSS】第八章-CSS图形", "desc": "上一节留了一个问题：“为什么 currentColor 是驼峰命名？”。 其实也有小伙伴答对了，原因就是因为 currentColor 是作为 SVG 的属性值存在，因此在 CSS 里就保留了这个驼峰写法，顺便提一个冷知识：“ currentcolor 这种全小写的方式也是允许…"}, {"id": "6898566751928369166", "title": "CSS定位", "desc": "​ static是position属性的默认值。如果省略position属性，浏览器就认为该元素是static定位。浏览器会按照源码的顺序，决定每个元素的位置，这称为\"正常的页面流\"（normal flow）。每个块级元素占据自己的区块（block），元素与元素之间不产生重叠，…"}, {"id": "6916298446638940173", "title": "为什么 Vue3 选择了 CSS 变量", "desc": "CSS 变量又称为 CSS 自定义属性，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： --main-color: black;），由 var() 函数来获取值（比如： color: var(--main-color);） 为什么选择两根连词线（--）表示？…"}, {"id": "6938583040469762055", "title": "小技巧！CSS 整块文本溢出省略特性探究", "desc": "今天的文章很有意思，讲一讲整块文本溢出省略打点的一些有意思的细节。 我们都知道，到今天（2020/03/06），CSS 提供了两种方式便于我们进行文本超长的打点省略。 基于上述的超长打点省略方案之下，会有一些变化的需求。譬如，我们有如下结构： 对于上述超出的情况，我们希望对于超…"}, {"id": "6925600887947657224", "title": "CSS奇思妙想 -- 使用 background 创造各种美妙的背景", "desc": "将介绍一些利用 CSS 中的 background、mix-blend-mode、mask 及一些相关属性，制作一些稍微复杂、酷炫的背景。 通过本文，你将会了解到 CSS background 中更为强大的一些用法，并且学会利用 background 相关的一些属性，采用不同的…"}, {"id": "6979605381962006542", "title": " CSS 里的整洁架构", "desc": "虽然开发工具早已经从 preprocessor 进化到了 styled component 甚至是 functional css，但在我看来新的工具并没有让我们的样式代码写的更好，只是更快——也可能会"}, {"id": "6844904176141467655", "title": "【收藏】你不知道的css技巧", "desc": "下面总结了一些常用又有趣的css技巧，希望大家收藏，以减少查资料的时间。 css自带的border-style属性 dotted/ dashed . 效果展示出来太密了，并不符合UI设计 为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性： display: -…"}, {"id": "7007012540685238308", "title": "flex弹性布局教程-03-项目属性flex-basis", "desc": "本篇介绍了 flex 项目属性的第一个 flex-basis ，用于设置占据主轴空间的大小。 阅读时间10~15分钟。"}, {"id": "6924206099193135111", "title": "CSS的N个编码技巧", "desc": "最近看了《CSS揭秘》这本书，里面介绍了很多实用编码技巧，常常让人有茅塞顿开的感觉，这里将一些常用的技巧进行了总结和实践。 这是毋庸置疑的最佳解决方案，因为 Flexbox是专门针对这类需求所设计的，只是一些老的浏览器版本兼容性可能不是很好，具体可以查看caniuse，现代浏览…"}, {"id": "7001165172882538509", "title": "CSS 中的 3D：学习去以立方体而不是盒子的方式考虑问题", "desc": "我学习 CSS 的道路有点不正统。我不是从前端开发人员开始的，而是一名 Java 开发人员。事实上，我最早对 CSS 的回忆是在 Visual Studio 中为挑选颜色。 直到后来我才开始解决并找到"}, {"id": "7007235509881667597", "title": "CSS使用filter、backdrop-filter实现高斯模糊效果", "desc": "用CSS实现高斯模糊效果：高斯模糊是一种常见的效果（俗称毛玻璃效果），在CSS中使用filter、backdrop-filter属性均可实现"}, {"id": "6908565208596217863", "title": "纯 CSS 制作赛博朋克 2077 “故障风”按钮", "desc": "大家好，我是 Steven。 虽然我不打机，但我都知道 赛博朋克 2077 这个游戏，在它的网页上，有一个 Available Now 的按钮，当游标移到它之上的时候，会有一个好像故障的毛刺效果。 这一期，我们就会模仿并且实现这个效果。 打开 CodePen 编辑器 ( htt…"}, {"id": "6865107864139087886", "title": "网页布局都有哪种？一般都用什么布局？", "desc": "随着Web技术不断的革新，CSS近几年也变得多年前要更强大。在Web开发中，CSS是不可或缺的一部分，对于很多Web开发者来说，有很多CSS属性不知道，或者说他们知道，但忘记在最恰当的时候使用最适合的CSS属性。而且时至今日，其中有一些CSS的属性可以让开发者能节约更多的时间。…"}, {"id": "6997203468863684639", "title": "学透CSS-CSS中的变量 连载中", "desc": "大部分的编程语言，在语言出现的那一刻就支持变量。但是，CSS一开始就不支持原生变量。所以大家开始选择SCSS,LESS等兼容的 CSS 扩展语言。不过庆幸的是CSS目前也已经支持变量。"}, {"id": "6999385211658043422", "title": "分享一些 CSS 开发中的编码规范（一）", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 作为一名合格的前端开发工程师，编码规范是极其重要的，当页面的样式随着时间的增加而变得复杂的时候，CSS 文件和代码量也随之增多，如果没有一"}, {"id": "6998178400506642445", "title": "学透CSS-25张图熟练掌握clip-path 看完就会！", "desc": "不知道大家在开始学习CSS的时候，会不会经常遇到这样一道问题：如何实现一个三角形。类似这样的代码是不是很眼熟。嗯！看上去不是很复杂.但是代码是不是超级多！"}, {"id": "7005211662890303518", "title": "前端基础知识系列一CSS（基础布局）", "desc": "前言 最近在改造之前项目的UI，发下自身对于css的许多知识掌握的还没有成体系化，乘着最近有时间就来看看我们熟悉又陌生的CSS，先说下学习路径：菜鸟教程（指的是看的人菜），MDN，掘金小册玩转CSS的"}, {"id": "6988714719125176351", "title": "阿ken的HTML、CSS的入门指南（三）_文本样式属性", "desc": "感激相遇 你好 我是阿ken 文章部分内容及图片出自网络，如有问题请与我本人联系(主页有公众号)应用字体样式时，会首选华文彩云，如果用户笔记本中没有安装该字体，则选择宋体，如果用户笔记本中没有安装该字"}, {"id": "6995348065473265671", "title": "css3实现动画效果常用方法指南", "desc": "这篇文章只是一个简介，方便了解全貌，当你想不起某一个用法的时候，能够快速地找到提示。第一部分：CSS 变形属性"}, {"id": "6965488051695353886", "title": "🌟 CSS 幻术 | 有关光影效果的黑魔法", "desc": "好的设计师往往都是用光高手，能通过复杂的光影向读者传达出物体的质感、空间感以及层次感。不过这可苦了前端同胞们呐。本文会介绍一些用 CSS 绘制的进阶光影效果，帮你扫除用 CSS 画画道路上的迷雾。"}, {"id": "6914471841327218702", "title": "一行 CSS 代码的魅力", "desc": "首先，这让我想到了，年初的时候沉迷的一个网站 CSS Battle 。这个网站是核心玩法就是： 官方给出一张图形，在给定的 400 x 300 的画布上，能够用越短的代码实现它，分数就越高。 注意是，完全一模一样还原。 额，这样当然可以，但是看看文章的标题，一行 CSS ？这明…"}, {"id": "7003149600697614350", "title": "借助 mix-blend-mode 纯CSS制作文字镂空效果", "desc": "本篇文章为大家带来如何制作文字镂空效果，仅仅使用CSS样式进行处理，借助 mix-blend-mode 属性，将文字的颜色反转，从而实现视觉上镂空。"}, {"id": "6844903501588332558", "title": "Chrome 62 Beta新特性都在这里了", "desc": "Network Quality Estimator API、OpenType 可变字体，以及从 DOM 元素捕获媒体"}, {"id": "6942732053016215582", "title": "杂说CSS", "desc": "BFC即Block Formatting Context，意为块级格式化上下文，就是一个块级元素的渲染规则。通俗一点讲，可以把BFC理解为一个独立封闭的大箱子，容器里面的子元素不会影响到外面的元素 IFC即 Block Formatting Context，指内联格式化上下文，…"}, {"id": "6844903896918278152", "title": "CSS，给你点“颜色“看看", "desc": "对于CSS颜色，想必大家都或多或少用过，本文是笔者整理的关于CSS颜色相关的一些基础知识，目的是希望在需要用到CSS颜色相关知识时，看这一篇就够了。 下面多图预警，就是要给你一点“颜色“看看（偷笑ing）。 一、CSS颜色体系包含哪些成员？一张图。 HEX，格式如#RRGGBB…"}, {"id": "6844903845823250440", "title": "谈一谈我所遇到的定位属性", "desc": "首先我们谈一谈positon，他是规定元素的定位类型。即元素脱离文档流的布局，在页面的任意位置显示。而在position中生活着四个孩子： 相对定位（大娃）relative：不脱离文档流的布局，只改变自身的位置，在文档流原先的位置遗留空白区域。定位的起始位置为此元素原先在文档流…"}, {"id": "6844903496353841159", "title": "SVG 研究之路 (22) - 深入理解 SMIL Animation - OXXO.STUDIO", "desc": "进阶的svg动画"}, {"id": "6844903620123557895", "title": "什么是CSS模块以及你为什么需要它们？| CSS-Tricks", "desc": "#什么是CSS模块以及你为什么需要它们？ 我最近对CSS模块很好奇。如果你还没有听说过它们，这篇文章就是为你而写。我们将了解CSS模块以及它的目的是什么。如果你也感兴趣，请持续跟踪，下一篇文章将关于怎样使用CSS模块。如果你想进一步提高你的CSS模块使用技能，第三部分将关于在R…"}, {"id": "6844903695662972936", "title": "行星工单系统部分实现（1）- 流程控制", "desc": "作者|刘哲1.工单系统的表格页工单系统是一种网络软件系统，根据不同组织，部门和外部客户的需求，来由针对的管理，维护和追踪一系列的问题和请求。大多用于记录、处理、跟踪一项工作的完成情况。为使客服同学有序"}, {"id": "6942296890025181221", "title": "css的三栏布局", "desc": "css的三栏布局主要是左右宽度固定，中间自适应下面就来介绍一下实现三栏布局的几种方式1.Flex布局利用flex布局可以实现给父级设置： display: flex;，给中间元素设置flex: 1;h"}, {"id": "6844903630475100173", "title": "如何将 emoji 当成单色 icon 使用", "desc": "分享一种将 emoji 当成单色 icon 使用的技巧"}, {"id": "6844903520466911245", "title": "canvas getImageData与任意字符图形点、线动效实现", "desc": "这篇文章发布于2017年12月9日，星期六，22:20，归类于canvas相关。阅读67次,今日67次byzhangxinxufromhttp://www.zhangxinxu.com/wordpre"}, {"id": "6844903930380435464", "title": "[译]CSS @supports实现的级联网页设计", "desc": "特性查询，即@supports规则，作为CSS2的扩展被引入CSS Conditional Rules Module Level3中，它在2011年首次作为工作草案发布。它是一个条件组规则，用来检测浏览器UA是否支持CSS的属性值，条件由逻辑与,逻辑或,逻辑非组合而成。 设计该…"}, {"id": "6844903957823750151", "title": "css3新特性--Conditional Rules Module", "desc": "该规范定义了一些CSS条件组规则,关联条件和一群其他CSS规则。 这些不同的规则允许测试不同类型的条件, 但他们的行为必须相同。条件组规则的 body 必须用{ } 包裹，允许嵌套，不允许出现 ruleset (e.g., ‘@charset’, ‘@import’, or ‘…"}, {"id": "6844903718781976589", "title": "12 CSS 3D Text Effects", "desc": "Collection of hand-picked free HTML and CSS 3D text effect code examples. This is a simple SCSS mixin that creates 3D blocky looking text w…"}, {"id": "6844903957022638087", "title": "做换行内容的注意点", "desc": "下面的列表有两种思路，一个是用inline-block来做，一个是用flex。 我这里两种都试了一下，代码其实差不多的，总结几个注意点。 其实这里margin塌陷是我们希望的，那就只需要一个margin: 12px就齐活。 但是没办法有BFC，margin是会叠加的，这就只能在…"}, {"id": "6941295030409625607", "title": "最近学习的关于CSS预处理器", "desc": "1.简介：css样式表主要是样式属性的描述，写起来相当的费事，为此，CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。通俗的说，CSS预处理器用一种专门的编程语…"}, {"id": "6908980771013263367", "title": "处理不定宽的横向列表hover后抖动问题", "desc": "在实践中遇到的一个问题，就是在鼠标hover时，如果将原来的字体变大，或者变粗之后，会增加宽度，导致所在区域整体抖动，给人一种很不好的体验。针对这个问题，做了一些尝试。主要是不想用定位之类的，就想着是"}, {"id": "6908917524251803656", "title": "跟我学习CSS(二)", "desc": "描述的方式还是以图片来进行描述,首先先给读者画出所有盒子都可能包含的内容. 从图片中可以看出,一个容器基本会包含外边距,内边距,边框,内容宽度四种. 从英文中可以明确看出,content-box其实指的就是内容区的一个盒子模型,当对content-box设置宽度时,设置的仅为内…"}, {"id": "6844903714168274958", "title": "CSS 属性值语法", "desc": ""}, {"id": "6844903599781183501", "title": "全局脚手架了解一下【fle-cli】", "desc": "fle-cli旨在帮助我们从复杂繁琐的编译配置中解放出来，全身心地投入业务开发中，提高开发效率。 它是真正意义上的全局脚手架，区别于市面上其他的全局脚手架，它不会在项目工程中生成各种编译配置文件，也不会给你安装一系列编译的依赖包，这意味着你的项目工程可以非常干净纯粹。 它同时兼…"}, {"id": "6844903974814875655", "title": "是时候了解一下 ，你一直在使用，却不知道概念的CSS BFC", "desc": "每个元素的margin的左边，与容器块border 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此； 规则3 每个元素的margin的左边，与容器块border 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此 因为BFC内部的元素和外…"}, {"id": "6997952387084189727", "title": "我的 CSS 就是这么可爱——如何组织 CSS", "desc": "我们在 0 和 1 的世界里，思考着物理世界的喜怒哀乐，希望朋友们能够撇去浮燥世界带来的浮沫，都能找到生活的真谛！毕竟努力工作只是手段，我们的目标是未来的幸福快乐生活！诸君共勉！"}, {"id": "6968614951703281701", "title": "用 CSS 找回童年的快乐，哆啦A梦伴你同行", "desc": "小时候我就想，如果能有一个像哆啦A梦一样的朋友陪伴我们成长该有多好？悲伤时有人安慰；想放弃的时候，有人鼓励；快乐的时候，有人分享。最关键的是他拥有无所不能的神奇口袋。而如今长大了，反过来我希望能"}, {"id": "6924114612799406093", "title": "你可能不知道的 transition 技巧与细节", "desc": "CSS 中，transition 属性用于指定为一个或多个 CSS 属性添加过渡效果。 最为常见的用法，也就是给元素添加一个 transition，让其某个属性从状态 A 变化到状态 B 时，不再是非常直接突兀，而是带有一个补间动画。 当然，除了上述基本的用法，其实 CSS t…"}, {"id": "6844904114053185544", "title": "明天全国哀悼日，一段css让全站变灰", "desc": "想到以往默哀日访问网站时发现整站会变成全灰，即想到如果立即开始开发、设计图修改等工作也会消耗大量的时间与精力，那会不会有css可以直接处理所有的元素将他们变灰，随即想到了css3的filter（滤镜），并也证实了这一想法的可行性。 我们可以联想出fixed是相对于html根容器…"}, {"id": "6844903570001625102", "title": "2018春招前端面试: 闯关记(精排精校) | 掘金技术征文", "desc": "年末研发组解散失业, 选择回去学车了,也顺利拿到了驾照，最近回归大深圳,开始踏上漫漫的找工作之路。 问题截止日期(2018/3/23)，我去面的创业,中大型皆有。 这种问题见仁见智,我的回答大体是这样的..待我捋捋. 让我们来举个栗子,.自己新建一个 html 跑一下,. ha…"}, {"id": "6993882215167819807", "title": "学透CSS-你不知道的下划线属性  文本属性（中） （连载中）", "desc": "下划线，上划线，删除线。你真的懂他们吗？text-decoration-skip，text-decoration-skip-ink，text-decoration-thickness你是否认识他们呢？"}, {"id": "7001177431214129183", "title": "使用粘性 Header 和 Footer 制作表格变得更容易", "desc": "不久前，当我在博客文章一个带有粘性 Header 和粘性第一列内容的表格中写到关于 HTML <table> 中的粘性 Header 和 Footer 的内容。那时我没有在任何 <thead>、<tf"}, {"id": "7001439806269947941", "title": "谈谈css3阴影、背景和渐变", "desc": "大家好哇，今天我们来谈谈css3阴影、背景和渐变，大神请绕道，因为本文基本摘自我刚入行时的笔记哦~ CSS3阴影 css3阴影主要包"}, {"id": "6996502722828566559", "title": "学透CSS-数学函数(上) 比较函数min/max/clamp 连载中", "desc": "css中大概有将近80个函数，但是我们所掌握的大概又有多少呢？今天我们先来介绍其中的数学函数。学起来吧！！！"}, {"id": "7001175796358316068", "title": "我们可以使用 Container 查询创造一个“缩放大小工具”吗？", "desc": "如果你对 CSS 的新发展有所关注，你可能听说过 Container 查询即将到来。我们将在这里查看基础知识，但如果您想再看一看，请查看 Una 的 Next Gen CSS CSS：@contain"}, {"id": "6958690548009926687", "title": "如何写出一套可维护的CSS库？", "desc": "如何写出一套可维护的CSS库？不妨谈谈CSS的设计模式/架构吧。接下来将为你讲述三个主流的CSS设计思想和一个最近通用的CSS设计思想：OOCSS、SMACSS、BEMCSS、METACSS。"}, {"id": "6993115889646174221", "title": "学透CSS-还在用em/strong吗？快来试试 text-emphasis 文本属性（连载中）", "desc": "言 最近在公司听一个小姐姐做工作安排汇报的时候，发现这样一个效果， 顿时感觉虎躯一震。在我的威逼利诱之下，小姐姐被迫说出这种文字效果是如何实现"}, {"id": "7005975996394373156", "title": "CSS｜gradient --- 渐变函数", "desc": "线性渐变：linear-gradient() 用于创建一个表示两种或者多种颜色线性渐变的图片 示例1: 示例2: 径向渐变：radial-gradient() 由从原点出发的两种或者多种颜色之间的逐步"}, {"id": "6934887428616355847", "title": "8个有点优秀的CSS实践", "desc": "这是一种社交平台的常见需求，比如说在掘金平台中让用户选择感兴趣的标签，通常都是用JS来处理已经选择了的标签数量。今天给出一个css版本： 然后自定义label样式，接着设置CSS计算器。 设置如果文字长度超出指定的宽度，则隐藏超出宽度的内容。 设置文字在一行显示，不能换行。 设…"}, {"id": "6942325271349592100", "title": "【网页特效】丝滑的macOS Dock效果", "desc": "大家好，我是 Steven。 如果是单纯的逐个图标放大，其实就没什么难度。不过我们的作风是，要做就做得够细致，当游标在同一个图标上左右移动时，都会影响到左边和右边的图标大小的，达到一个很连贯的效果，这个就是今次的难度所在。 好了，那我们就开始吧。 打开 CodePen 编辑器，…"}, {"id": "6844904031513477128", "title": "请收下这72个炫酷的CSS技巧", "desc": "CSS是一门很特殊的语言，不像一般的编程语言那样需要抽象的思维和严密的逻辑，它真正需要的是想象力——将你脑中所想的意象用代码来表现出来。那么意象又是如何产生的呢？最常用的方法就是探索和观察。举个例子，笔者平时热爱看番，每看到有意思的场景画面总会下意识地记录下来，这对动画创作会非…"}, {"id": "6916748944789733390", "title": "iPhone 12 页面卷动逐行滑入效果", "desc": "大家好，我是 Steven。 打开 CodePen 编辑器，在 HTML 的部份加入标题。由于它有一个副标题，所以我会用 &#x3C;p> 标签去装着它。然后加入一个 &#x3C;div>，id 名为 iphone，里面新增两个 &#x3C;div>，id 分别是 hardwa…"}, {"id": "7003147260741550117", "title": "记录CSS之BFC", "desc": "CSS 相关面试题 BFC 块级格式化上下文 BFC ,块级格式化上下文，他是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与"}, {"id": "7006229296616308766", "title": "css自学的快乐笔记（1）---入门基础知识", "desc": "css的基本概念 css并不是一门语言，而是用来描述html元素如何显示的层叠样式表，就像我们女孩子为了更好展现自己的美，画上美美的妆，穿上漂亮的衣服。 用css的几种方式 1.内联 在html标签内"}, {"id": "6891053442530279432", "title": "从王者荣耀里我学会的前端新手指引", "desc": "在王者的世界里，不仅仅只有快乐，还能搞学习，让你成为快乐而又富有知识的人。这其中的功臣，这不得不说的就是它的新手指引。 为什么这么说呢？我们先来看几张图。 没错，上面的就是王者荣耀的新手引导，手把手教学，还有妲己美妙的声音。 整个过程大约 2分钟。它使用了多种引导方式，蒙层引导…"}, {"id": "6844903848369192974", "title": "CSS Sticky 其实很简单", "desc": "Sticky 也不是新知识点了，写这篇文章的原因是由于最近在实现效果的过程中，发现我对 Sticky 的理解有偏差，代码执行结果不如预期。决定写篇文章重新学习一次。 Sticky （MDN 翻译成粘性效果）是 CSS 属性 position 中的一个可选值。跟我们用得比较多的 …"}, {"id": "6985934850897231879", "title": "页面样式开发实战之Css思路", "desc": "页面样式开发之css开发思路，总结拿到设计图之后如何规划自己的css样式和页面框架，实现更加友好的规划和命名"}, {"id": "6844903504176234510", "title": "[译] iPhone X 网页设计", "desc": "在最新发布 iPhone X 的全面屏上，Safari 可以精美地显示现有的网站。内容自动嵌入到显示屏的安全区域内，以免被圆角、原深感摄像头系统的空间遮挡住。 凹槽部分填充了页面的 background-color (比如指定为 <body> 或 <html> 元素的背景颜色)…"}, {"id": "6942081538209087501", "title": "学习 css变量 和 常用方式", "desc": "由作者自己定义的css属性,（比如： --main-color: black;）。 可以在整个文档中重复使用。 css变量遵循级联，会从父级继承它们的值。 可以降低维护成本，增加页面高性能，减少代码体积。 变量的声明语法是：--*，变量使用语法是：var(--*)。* 代表变量…"}, {"id": "6844904056679481351", "title": "截至 2020 年 2 月最受程序员欢迎的 20 个 CSS 框架，有没有你的菜？", "desc": "转眼间 2020 年已经过去了一个月，在祈祷疫情尽快消散的同时，不要忘了学习。本文为大家搜罗了 20 款截至目前最受程序员欢迎的前端CSS框架，其中有的霸榜已久，也有不少后起之秀，有的是单纯的 CSS 框架，也有的结合了 JavaScript 以提供更丰富的功能。一起来看看有没…"}, {"id": "6844904046130642958", "title": "CSS动画？教你使用障眼法，打造炫酷充电效果", "desc": "该篇文章的例子同时也算是我CSS动画的启蒙之作，思路来源于掘友的一篇文章，文末有链接，但只提供思路，于是我打算实现一波，顺便分享一下动画制作过程中的心得体会。也算是应证了，当你打开思路以后，动画，真的很简单。 接上篇文章JS动画？其实没你想的那么难。150行代码，带你走进新世界…"}, {"id": "6988009093982552071", "title": "CSS3实现立体书效果", "desc": "思路：利用CSS3中3D转换的perspective属性，通过左面和前面的旋转rotate、位移变化translate实现立体书的效果 具体可参考：HTML5+CSS3学习总结(完结) 该文章中的3D"}, {"id": "6993717745439211527", "title": "前端笔记-CSS盒模型｜8月更文挑战", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 文档流（normal flow） 网页是一个多层的结构，一层摞着一层，通过css可以分别为每一层来设置样式。作为用户来讲只能看到最顶上一层。"}, {"id": "6984216386922872839", "title": "CSS实现文本超过部分，超出两行，超出部分省略号显示", "desc": "经常忘记做个笔记 文字超过部分显示为省略号 文本超出两行，超出部分省略号显示经常忘记做个笔记 文字超过部分显示为省略号 文本超出两行，超出部分省略号显示"}, {"id": "6982374857602252830", "title": "CSS3:flex布局详解", "desc": "这是我参与新手入门的第2篇文章 flex 属性 flex属性可分为两类，一类写在父元素上，一类写在子元素上 其中作用于父元素身上的属性有: justify-content:设置子元素在主轴(默认为横轴"}, {"id": "6952828352684097573", "title": "CSS动画：animation、transition、transform、translate傻傻分不清", "desc": "css属性很多，并且有些无论是字母的拼写还是字面上的意思，都容易混淆，比如我列出来的几个属性，是不是也混淆过你～"}, {"id": "6844903794669518855", "title": "CSS之flex", "desc": "1. 初识 flex flex 是 flexible 的缩写，意思为弹性布局，用来为盒模型提供最大的灵活性。 2. flex 布局和正常布局比较 3. flex 属性 flex-direction 改变主轴的方向，默认为 row 横向排列。属性包含 row | row-reve…"}, {"id": "6844904183666065422", "title": "css基础之绝对定位与相对定位", "desc": "绝对定位是以父元素的左上角原点为定位基准点，absolute 会将对象拖离出正常的文档流绝对定位而不考虑它周围内容的布局。 假如其他具有不同 z-index 属性的对象已经占据了给定的位置，他们之间不会相互影响，而会在同一位置层叠。 如果父级（无限）设定position属性，那…"}, {"id": "6844903839452102670", "title": "掌握web开发基础系列--物理像素、逻辑像素、css像素", "desc": "在 《掌握web开发基础系列--长度单位》 这篇文章中已经介绍过了css像素单位--px，这篇文章详细探讨一下设备物理像素和css像素之间的关系。 “像素”，是一个名词，在不同的上下文中所描述的东西可能不一样，但是也可能存在一定关系。 设备屏幕实际拥有的像素点，屏幕的基本单元，…"}, {"id": "6844904066926002190", "title": "[秃破前端面试] —— CSS3", "desc": "年前年后跳槽季，准备从面试内容入手看看前端相关知识点，旨在探究一个系列知识点，能力范围之内的深入探究一下。重在实践，针对初级前端和准备面试的同学，争取附上实际的代码例子以及相关试题～系列名字就用【秃破前端面试】—— 因为圈内大家共识，技术与发量成正比。😄希望大家早日 秃 破瓶…"}, {"id": "6976678675659882510", "title": "《CSS揭秘》精读笔记（二）形状", "desc": "本文为《CSS揭秘》的第二部分-形状的笔记，介绍了自适应椭圆、平行四边形、棱形图片、切角效果、梯形标签页、简单饼图的实现原理。conic-gradient yyds！"}, {"id": "6844903673517211655", "title": "[译] Vue: scoped 样式与 CSS Module 对比", "desc": "It should not come as a surprise that CSS in modern web development is far from perfect. Nowadays, projects are usually quite complex and, …"}, {"id": "6844903577505251335", "title": "小程序scroll-view自身下拉刷新的实现分享", "desc": "本来就是想给自己发布的第一个开源代码骗骗star，结果有不少善良的朋友给文章点赞了，搞得我有点不好意思，所以决定写点干货讲讲具体是怎么实现的。 完成刷新后，再将 scroll-view 的y轴偏移通过css动画再变回 -40px（用 translate 而不用 margin 就…"}, {"id": "6965376473599311903", "title": "移动端网页", "desc": "视口 属性 解释说明 width 宽度设置的是viewport宽度，课题设置device-width特殊值 initial-scale 初始缩放比，大于0的数字 maximum-scale 最大缩放比"}, {"id": "6844903621339906055", "title": "H5页面滚动阻尼效果实现", "desc": "好吧，生涩难懂，没能理解。不过网上有说此效果在iPhone上比较常见，直接上图比较容易理解： 简单来说，就是界面滑动到了最底部或最顶部仍可以比实际的内容多滑动一段距离然后回弹的弹性效果。 滑动到最顶部或最底部才出现。 表现出比实际的内容多滑动一段距离，实际操作知道，多滑动的距离…"}, {"id": "6844903875166617614", "title": "CSS进阶（21）—— CSS中的装饰属性和用户体验属性", "desc": "background-position属性支持数值，百分比，关键字。当然你也可以混用关键字和数值，如:background-position:right 40px bottom 20px;表示距离右边缘40像素，距离底边缘20像素。background-position的不同之…"}, {"id": "6844903588183949326", "title": " CSS 计数器简介", "desc": "CSS 计数器（counter）是由 CSS 维护的变量，其主要用途是，可以通过指定的规则来计算节点元素的使用次数。 初始化计数器。 指定增量规则。 应用计数器。 下面使用一个例子，来熟悉这些规则。 首先，我们拥有一个如下的列表。 接下来我们使用计数器来为这个列表前面加上序号，…"}, {"id": "6844903541455192071", "title": "Stylelint 在提升企业微信 CSS 代码质量上的实践", "desc": "本文描述了企业微信前端团队是如何借助Stylelint 做自动化Code Review 以提升CSS 代码质量。内容包括从一开始的技术选型到开始制定规则，再然后如何在团队中进行有效的推动及配合svn hook 等探索各种自动化的监督机制。其中遇到的难点在于如何处理旧的项目代码，…"}, {"id": "6844903602956271624", "title": "✍️✍️ 控制按钮元素样式", "desc": "说说按钮吧。假如你正在搭建一个网站或web应用，那一定会用到不少按钮或者链接。或许是看起来像按钮的链接?又或者类似按钮的可点击区域?无论如何，正确使用它们很重要。"}, {"id": "6945437752523669540", "title": "CSS 元素水平/垂直居中方法总结", "desc": "容器元素为块级元素，欲居中元素为行级元素。实现水平居中。 容器元素为块级元素，欲居中元素设置了宽度。实现水平居中。 （1）当child元素宽度或高度已知，且欲让其水平或垂直居中。则child元素样式为（若想同时水平垂直居中，则样式代码综合即可） （2）当child元素宽度/高度…"}, {"id": "6844903561705308173", "title": "css 中引入 svg 来兼容部分安卓机显示 0.5px 边框", "desc": "相信大家昨天打开某 404 搜索引擎的时候应该都看到这张图片了，不得不说，后人会以这么一种方式来纪念前人，而且还是一个伟大的公司，挺感动的。 后面想到了用 rem 的方式，因为 H5 页面借鉴了手淘的响应式像素，根据移动设备的 dpi 设定了根元素的 font-size 大小，…"}, {"id": "6844903576863506445", "title": "text-decoration 回顾与展望", "desc": "大概看了下草案，发现自己对 text-decoration 这个属性已经有点陌生了（捂脸..）,于是乎只好重新回顾总结下。 CSS 1 和 CSS 2 只支持定义基本的 text-decoration。CSS 3 中增强了装饰线在颜色、定位、样式方面的效果并允许属性值复合使用。…"}, {"id": "6943867617715159071", "title": "CSS 常用样式 – 背景属性", "desc": "加载范围：默认的加载到边框及以内部分。后期如果图片不重复加载，加载从 border 以内开始 属性值：分为三种写法，单词表示法、像素表示法、百分比表示法。不论哪种写法 作用：设置的是背景图片是否要随着页面或者盒子的滚动而滚动。 属性值 属性值：可以有 1-5 个属性值，值之间用…"}, {"id": "6943865166496792613", "title": "CSS3的过渡和动画", "desc": "过渡和动画都是CSS3的重要部分，今天有时间，了解些相关内容并记录下。 在开始之前，首先看看CSS3的转化。 注意：闭合的内联元素不支持转化，过渡和动画：如&#x3C;span>、&#x3C;small>、&#x3C;i>等。可以通过添加样式 display: inline-b…"}, {"id": "6844903569485742087", "title": "[译]谷歌Web性能优化系列：HTTP 缓存（中英）", "desc": "When someone visits a website, everything the site needs to display and operate has to come from somewhere. All the text, images, CSS style…"}, {"id": "6919664938734747655", "title": "表单验证第三部分/ 一个Validity State API Polyfill | CSS-Tricks", "desc": "在这个系列的上一篇文章中, 我们创建了一个轻量级的脚本 (6kb, 2.7kb缩小后) 使用这个 Validity State API 来提高原生的表单验证体验。 这个脚本可以在所有的现代浏览器上运行，并且支持 IE10版本以下的浏览器。但是，浏览器本身仍然具有一些缺陷。 并不…"}, {"id": "6844903589400281101", "title": "Houdini 实战：自定义 checkbox", "desc": "在 html 中使用 checkbox 时，可能会由于默认 checkbox 的样式不符合页面风格，或是在不同浏览器样式不同而需要自定义。 常见的自定义 checkbox 的方法有： 为不同状态的 checkbox 定义不同的背景图。 定义 CSS 的 before、after…"}, {"id": "6942687468596494343", "title": "css零基础学习笔记", "desc": "CSS规则由两个主要的部分构成：选择器及一条或多条声明。 选择器是用于指定CSS样式的标签，花括号内是对该对象设置的具体样式。 类名之间用空格隔开。 不用自己调用，他会自动应用于所有标签。 可以通过body标签指定整个页面的文字大小。标题标签比较特殊，需要单独指定大小。 | n…"}, {"id": "6844903937171013639", "title": "CSS的一些常见样式(一)  字体，文本，边框，颜色，display，以及继承和一些单位", "desc": "line-height：行高，指的是行与行之间的空间，常用单位是px，em，rem，百分比。"}, {"id": "6942469575480967205", "title": "CSS 知识总结", "desc": "当浏览器发现某个部分发生了点变化影响了布局，需要倒回去重新渲染，这个回退的过程叫 reflow。 reflow 会从 &#x3C;html> 这个 root frame 开始递归往下，依次计算所有的结点几何尺寸和位置。 改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或…"}, {"id": "6844903601639260167", "title": "多个动画间存在部分相同动画的优化方案:gka", "desc": "原文地址“抓娃娃”并不陌生，存在两种结果:抓到与抓不到。在Web动画中，如上图，“抓到”与“抓不到”对应着两个动画，可以使用不同的动画图片资源来实现，似乎毫无异义。细做观察，不难发现：两个动画中“动画"}, {"id": "6844904045354713101", "title": "CSS 原生变量使用教程和几个 Tips", "desc": "2017年3月，Edge 浏览器支持 CSS 变量。 各值都可以放入 CSS 变量，比如变量名中带-。 变量名大小写敏感。 var() 函数用于读取变量，也可用于变量声明，只能作为属性值，不能用作属性名。 var 函数第二个参数，表示变量的默认值。参数可以带逗号和空格。 字符串…"}, {"id": "6941327460566827045", "title": "Bootstrap的学习分享", "desc": "大家好，这里是demo软件园，今天为大家分享的是Bootstrap的学习分享。 众所周知Bootstrap是一款简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。 容器的width为auto，只是两边加了15px的padding。 同时作为都是左浮动的column的wr…"}, {"id": "6844903508676722702", "title": "word-break 和 word-wrap 的区别", "desc": "本文主要要介绍的是 CSS 中 word-break: break-all 和 word-wrap: break-word 的区别，虽然这两个属性都有使用过，但都是属于使用时查一查文档随手就用，用完了也不会深入去探究的范畴，希望借着这篇文章来深入的探究一下这两者的区别。 有一句…"}, {"id": "6844903602188713998", "title": "关于外部样式表也许你不知道的事", "desc": "在讲解之前，先看一个问题。如下图所示，外部样式表是否会阻塞 HTML 解析（先不要看答案，可以自己思考和实验一下）： 如上图所示，indexcss.css 并没有阻塞 HTML 解析，因为 DOMContentLoaded 时间线在 indexcss.css 之后。但如果在 i…"}, {"id": "6844903540268204046", "title": "更便捷的css处理方式-PostCSS", "desc": "一般来说介绍一个东西都是要从是什么，怎么用的顺序来讲。我感觉这样很容易让大家失去兴趣，先看一下postcss能做点什么，有兴趣的话再往下看，否则可能没有耐心看下去。让我们开始吧 当然直接在现有浏览器上是跑不通的，就正如es2015刚开始一样，我们需要一个转化器来将其转成当前可用…"}, {"id": "6854573211649048584", "title": "CSS 基础回顾 - 层叠、优先级和继承", "desc": "层叠指的是决定同一个DOM元素的样式定义的一系列规则。它决定了如何解决冲突，是CSS语言的基础。 下面分析层叠的规则。当生命冲突时，层叠会依据三种条件解决冲突。 样式表的来源： 样式从哪来的，包括你的样式和浏览器默认样式等。 选择器优先级：哪些选择器比另一些选择器更重要。 源码…"}, {"id": "6844904131128197128", "title": "BFC介绍及其作用", "desc": "1. 什么是margin塌陷？ 1.1. 为什么只在垂直方向塌陷 1.2. 解决方案 2. margin合并(也叫margin折叠) 2.1. 参考 2.2. 触发原因 2.3. 解决方法 3. 浮动 3.1. 浮动实例1 3.2. 浮动实例2 3.3. 浮动实例3 4. CS…"}, {"id": "6844903853918273550", "title": "彻底搞清楚css权重", "desc": "一个元素有多个样式对他进行设置的时候，那么哪个样式会起作用呢？这就需要一个规则计算，这个规则就是权重。谁的权重大，就使用那个样式。 我们按照刚才的规则进行分类计算，计算一下有几个a，几个 b ， 几个 c 。 这个按照a,b,c这种格式计算的结果就是：1,2,2。 我们来分析一…"}, {"id": "6844903625089613837", "title": "装逼速成之手把手教你画 Wave 动画", "desc": "昨天晚上睡觉前脑海中突然闪过一个特效，从构思，设计，编码，调试，优化，雕琢花了一个多小时。自己爽了一把，发给烧饼哥和吴大狗看，得到了一致评价。 先看效果图： 由于录屏的缘故，看上去可能有些卡顿，也可以打开 CodePen 看源码，接下来的内容主要是讲如何实现这样的效果。 （当然…"}, {"id": "6844903513265274887", "title": "WebView性能、体验分析与优化", "desc": "在App开发中，内嵌WebView始终占有着一席之地。它能以较低的成本实现Android、iOS和Web的复用，也可以冠冕堂皇的突破苹果对热更新的封锁。 然而便利性的同时，WebView的性能体验却备受质疑，导致很多客户端中需要动态更新等页面时不得不采用其他方案。 以发展的眼光…"}, {"id": "6844904024714510349", "title": "CSS地址选择器?换一种方式来实现主题适配", "desc": "选择器是CSS中的一大特色，用于选择需要添加样式的元素。 这里只列举了几种，还有很多，不熟悉的可以自行搜索查找。 虽然说CSS选择器有很多种，可以满足绝大部分的需求，不过有时候还是会有一些看似合理，实际上比较棘手的问题。 比如说上面提到了相邻兄弟选择器，不过只能选择后面的兄弟节…"}, {"id": "6844903702520676365", "title": "【译】用CSS属性选择器来拼接HTML的DNA", "desc": "一般我们最普遍的使用方法是将HTML属性放进一个方括号中，称之为属性选择器。例如： 任何具有href属性且没有更具体的选择器的html元素现在都会变成黄绿色。属性选择器的特性和类选择器一致 但是你可以使用属性选择器做更多的事情。就像你的DNA一样，它们具有嵌入式的逻辑，可帮助您…"}, {"id": "6859685497938116622", "title": "Re：从零开始の CSS 学习笔记——动画", "desc": "而误以为是活动的画面。 JSBin 示例1 通过循环定时器 + 定位 + left 实现动画。控制每隔一小段时间增加 left 值，实现位移 JSBin 示例2 通过延时器 + 添加类名 + transition / transform 实现动画。控制添加类名 直到移动到目标地…"}, {"id": "6909750679410212877", "title": "谈谈这一周遇到的坑", "desc": "(⊙﹏⊙)或者不叫坑叫自己基础不扎实带来的BUG第一个：position:relative会提升元素层叠顺序---业务是实现一个单选框位于卡片列表的右边20px垂直居中当时想到的是用定位用父元素pos"}, {"id": "6844903501076627464", "title": "不会写 JavaScript 的人是否还有价值？", "desc": "最近我有幸参加在墨尔本召开的 2017 Web Directions Code 大会。我和 Mark Dalgleish 还有 Glen Maddern （他的演讲非常精彩）被分到了一个演讲小组里。我们做了一系列关于 CSS 的演讲，在小组讨论中，我们讨论了一个问题：“只会写 …"}, {"id": "6844903732728037389", "title": "利用纯 CSS3 定制单选/多选框样式", "desc": "在前端开发中，往往需要对默认元素的样式进行修改。然而有的元素却不是那么容易就能找到它所对应的样式的，今天要讨论的重点内容就是<input type=\"checkbox\">以及<input type=\"radio\">这两款默认表单元素的样式修改问题。 我们以复选框<input t…"}, {"id": "6844904006863552520", "title": "css面试点-BFC（块级格式化上下文）与常见布局方案", "desc": "BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。 可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。 浮动元素和绝对定位元素，…"}, {"id": "6844903616151552014", "title": "从零开始写个 Stylus 转换器", "desc": "在开发这个工具的过程中，我学习到了很多以前没有了解过的知识，例如 AST、可执行脚本，用了一些命令行交互的工具，查看了两个项目的源码。最大的感触就是有想法就去做，然后坚持下去，在没有做这个项目之前，一直觉得转换语法是一件很高大上的事情，也从没想过我可以做出来。"}, {"id": "6844903844724342797", "title": "【Hello CSS】第五章-CSS的选择器与函数", "desc": "在上一篇的HTML的标签与语意中简单的介绍了HTML标签跟其一些属性，向各位坚持看到这里的亲表示真诚的感谢。本篇主要会分享一些跟 CSS选择器（CSS Selectors） 相关的内容，有兴趣的请继续往下看。 通用选择器：写个 *，啥HTML标签都选中了。例如：* {width…"}, {"id": "6844903810465464333", "title": "那些被忽略的盒子模型小知识", "desc": "我们知道的盒子模型主要由4个区域组成，分别是内容区域（content），内边距区域（padding），边框区域（border）和外边距区域（margin）。 对于不了解盒子模型的朋友可以移步到这里了解一下。 1. 替换元素 替换元素（replaced element），顾名思义…"}, {"id": "6914908965285396487", "title": "探究background-position属性中的百分比值", "desc": "这两天在项目中替换首页图片的时候，发现了一个问题，之前的样式设置的是background-position:center,当页面缩小或者放大时背景图显示的区域也会变化，现在改成left top后，页面如何变化大小图片位置都没动。这一想，也不对啊，background-posit…"}, {"id": "6908648995472539655", "title": "1px的问题(像素比的问题)", "desc": "当我们在手机端设置边框或者其他属性时候。发现我们设置的1px属性和屏幕显示的像素不一样。 原因是非常简单的。我们先看下面两个手机型号 利用window.devicePixelRatio 可以得出，实际尺寸和分辨率的像素比。如果是2倍的话，那么同等物理单位1px 就会等于2px …"}, {"id": "6844904160186335246", "title": "如何自动加载网站的深色模式？🌙", "desc": "现在有一种新的趋势 - 把东西变黑。过去，你必须决定你的网站的风格(亮或暗)或者必须保存用户自己定义的主题风格。 Safari 12.1 ( macOS 10.14.4自带) 增加了对检测系统颜色主题的支持. 它可以传递此信息，并且可以呈现网站的特定版本。当你的系统使用深色模式…"}, {"id": "6844903859324715021", "title": "[译] 使用 CSS transitions（MDN）", "desc": "CSS transitions 提供了一种在改变CSS属性时控制动画速度的方法。你可以让某个属性在一段时间里逐渐改变，而不是猛地突变。例如，如果你想把颜色从白色变为黑色，通常这个变化是突然地。而利用CSS transitions，这个变化可以发生在一段时间里，并且遵循一个加速曲…"}, {"id": "6919727983955542029", "title": "CSS的伪类和伪元素", "desc": "CSS 伪类 是添加到选择器的关键字，指定要选择的元素的特殊状态。 例如，:hover 可被用于在用户将鼠标悬停在按钮上时改变按钮的颜色。 伪类存在的意义是为了通过选择器，格式化DOM树以外的信息以及不能被常规CSS选择器获取到的信息。 伪元素是一个附加至选择器末的关键词，允许…"}, {"id": "6914116062925570055", "title": "【Ten Mins Effect】 - 07 下拉图标效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现一个简单精美的 css 效果。 本效果关键点就一个：当 hover 的时候，给当前的图标染色。 并不会像目标中的那样从上往下刷新颜色。 那么，这里的思路就是一个带颜色的覆盖层，初始状态高度…"}, {"id": "6844904152158437389", "title": "你知道css3的focus-within选择器吗？", "desc": "说到这个，我们先回顾一下，伪类选择器和伪元素选择器，老版的浏览器没有严格区分下面 2 种写法。 伪类一般用于一个元素的某个状态，比如说鼠标悬浮，按钮点击，链接已经访问，输入框聚焦等，还用于选择某个特殊元素，比如说多个元素中的第一个，最后一个，偶数，奇数等。其作用是对某个符合以上…"}, {"id": "6844904194843885581", "title": "CSS盒模型详解", "desc": "当前大部分的浏览器支持的是W3c的标准盒模型，也保留了对怪异盒模型的支持，当然IE浏览器沿用的是怪异盒模型。怪异模式是“部分浏览器在支持W3C标准的同时还保留了原来的解析模式”，怪异模式主要表现在IE内核的浏览器。 1、标准盒模型中 width 和 height 对应的是内容区…"}, {"id": "6844904200355348488", "title": "CSS 选择器大全解", "desc": "本文使用一个统一的HTML案例，并通过使用不同的选择器例子来测试究竟哪些元素被添加了样式（主要是宽度为1px的边框），对应的HTML代码如下，为了方便你的理解，我在下面附带了一个树状的元素图。 继承是CSS中最基本的内容之一。 继承没有任何特定性（地位最低），我们随时可以用一个…"}, {"id": "6844903918883831816", "title": "基于flex-flow:column, 实现\"商城分类页\"充满屏幕高度", "desc": "早上看群里有人问如何让\"商城分类页\"在数据不多的情况下充满屏幕高度. 但是人家说头高度是padding撑起的没有具体高度, 好吧看来只能用flex-flow:column了. 没啥复杂的代码, 就是感觉比较常见, 可能对新手有帮助, 分享出来抛砖引玉, 因为我只是测试了微信浏览…"}, {"id": "6844903757705117704", "title": "css模块化方案", "desc": "css的模块化方案可能和js的一样多，下面简单介绍几种主要的模块方案。 面对对象的规则，主要的原则是两种：分离结构和外观，分离容器和内容。 分离结构和外观：增加可重复的设计单元，同时去推进产品和ui对这方面的思考，比如下面的css使用时对象模式的命名和模块化规则。 分离容器和内…"}, {"id": "6844903903729827848", "title": "浏览器端英文书封制作系统", "desc": "inkstone.webnovel.com 是一个面向海外原创作家和翻译的创作平台。大量的作家和原创作品，意味着大量的书封制作需求。这之前是需要设计师投入精力，或者花钱购买来解决的。而此时 浏览器端书封制作系统成为了我们解决这个需求的一大利器。作家只需要登录我们 inkston…"}, {"id": "6844904085691301901", "title": "关于字体对齐那些事", "desc": "前端开发中我们经常会遇到文字垂直居中的场景，这是候我就会使用line-height，vertical-align等css属性去调整文字的位置，但是实际我对这块内容一直是比较模糊的，未免有一些一叶障目了，因此在这里对这块内容进行整理总结，希望之后再遇到此类情况时可以做到成竹在胸。…"}, {"id": "6941189994484596743", "title": "如何在CSS中映射的鼠标位置，并实现通过鼠标移动控制页面元素效果", "desc": "只使用CSS就可以实现模仿鼠标\"点击和拖动\"效果，让我们来看看如何获得用户的鼠标位置，并将其映射到 CSS 自定义属性：--positionX 和 --positionY 中。下面是具体实现步骤。 我们的第一个 demo 将使用 --positionX 和 --position…"}, {"id": "6924551428568514567", "title": "CSS动画效果初学笔记", "desc": "处理HTML标记并构造DOM树。HTML解析涉及到 tokenization 和树的构造。HTML标记包括开始和结束标记，以及属性名和值。 如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。 处理HTML标记并构造DOM树。HTML解析涉及到…"}, {"id": "6844903666734858248", "title": "Element源码分析系列9-Switch(开关)", "desc": "关于开关组件，之前自己写了一个，其实这个组件是不需要绑定任何click事件的，也就是说js部分几乎可以不写，核心思想就是利用<input type=checkbox>的checked属性，当鼠标点击input时，会切换其checked属性，这是原生checkbox的特性。下面是…"}, {"id": "6968456185204703245", "title": "「HTML+CSS」--自定义加载动画【018】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 设置span标签 宽度、高度均为96px 相对定位 因为未设置背景色（这里不需要背景色） 所以视觉上看不见 实际效果如下 步骤2 设置"}, {"id": "6844903605774843912", "title": "overflow:hidden引起的页面晃动问题", "desc": "我们在实现页面弹层的时候，弹层后面一般都会有黑色半透明全屏的遮罩，一般会对这个遮罩元素设置position:fixed定位。当页面出现滚动条并且遮罩出现的时候，如果我们滚动鼠标会发现遮罩后面的网页是可以滚动的，这样的话可能会将用户的注意力从弹层转移到其背后的网页上，这样给用户的…"}, {"id": "6844903592239841294", "title": "[译] JavaScript 如何工作：渲染引擎和性能优化技巧", "desc": "这是探索 JavaScript 及其构建组件专题系列的第 11 篇。在识别和描述核心元素的过程中，我们分享了在构建 SessionStack 时使用的一些经验法则。SessionStack 是一个需要鲁棒且高性能的 JavaScript 应用程序，它帮助用户实时查看和重现它们 …"}, {"id": "6844903639278944270", "title": "【小程序】使用 css 快速绘制朋友圈分享海报", "desc": "项目使用样式表来绘制 canvas，利用 wxss 下 rpx 单位实现适配，既能保证开发效率，同时也没有学习成本。 组件实现了 css 基本盒子模型，涵盖宽高、背景、字体、边框、内边距等，支持 自适应宽高、文本换行、圆角边框、背景渐变、背景重复 等好玩功能，感兴趣的可以了解下…"}, {"id": "6844903506558599176", "title": "浏览器的渲染：过程与原理", "desc": "本文不是关于浏览器渲染的底层原理或前端优化具体细节的讲解，而是关于浏览器对页面的渲染——这一过程的描述及其背后原理的解释。这是因为前端优化是一个非常庞大且零散的知识集合，一篇文章如果要写优化的具体方法恐怕只能做一些有限的列举。 然而，如果了解清楚浏览器的渲染过程、渲染原理，其实…"}, {"id": "6844903881680355341", "title": "css3 制作各种形状的图形", "desc": "按照规范，css3 中的伪元素的话，应该使用的是双冒号（::）而不是单个冒号（:），但是，由于旧版本的 W3C 规范并未对此进行特别区分，因此目前绝大多数的浏览器都同时支持使用这两种方式来表示伪元素。 要创建一个四分之一的椭圆，其中一个角的水平和垂直值都需要等于100%，而其他…"}, {"id": "6908307309793902599", "title": "CSS—三栏自适应布局", "desc": "1. 原理：左右浮动，脱离标准流，中间不浮动，处在标准流之中，通过margin留出左右两个盒子的宽度。 2. 实现：左右分别采用浮动的方法，中间margin：0 width； 4. 效果图 1. 原理：两边绝对定位，脱离标准流，中间不脱离标准流，通过margin空出左右两个盒子…"}, {"id": "6844904162681946125", "title": "CSS属性中的百分比", "desc": "基于包含块的宽度来计算的属性：margin, padding, width, max-width,min-width, left, right, text-indent. . 基于元素本身的宽高：background-position：背景图像的位置，分别设置水平方向和垂直方向…"}, {"id": "6844903593359704072", "title": "JavaScript 5/30：Flex Panel Gallery即FLEX布局的图片库", "desc": "点击任意一张图片，图片放大X倍，同时图片上下两方飞入文字，再点击已经展开的图片后，图片被压缩，同时顶端和底部的文字飞出。查看我的代码和demo。 观察文档初始布局：在类名为.panels的父元素div之下，有5个类名为.panel的子div，这5个div内均包含3个p标签。文档…"}, {"id": "6844903616541622285", "title": "处理垂直居中与隐藏属性Font Metrics", "desc": "呃，好像还是没有居中。根据经验，在文字上也加上vertical-align: middle： 诶，这下好像基本对齐了。 在理解浮动以及清理浮动的原理时，相信很多人都接触过BFC（Block Formatting Contexts），定义了在“普通流”（Normal Flow）中…"}, {"id": "6844903554331705352", "title": "[译]迎接新的 Dialog 元素", "desc": "HTML 5.2 为原生弹窗对话框引入了一个新的 <dialog> 元素。 乍一看，它似乎相当简单（本来就是），但当我和它打交道的过程中，我发现有一些很棒的新特性很容易被忽视掉。 在本文的最后我加上了一个完整可行的 Demo ，但是如果你想在阅读的过程中也查看的话，你可以看这里…"}, {"id": "6844903632800399368", "title": "前端每日实战：68# 视频演示如何用纯 CSS 创作一本色卡", "desc": "前端每日实战：68# 视频演示如何用纯 CSS 创作一本色卡"}, {"id": "6844903697357471758", "title": "CSP：给大家介绍下我爸爸 — Performance", "desc": "这篇文章主要讲如何利用 PerformanceAPI 辅助书写 CSP 指令 里的域名名单的思路，并不是写 CSP 的最佳实践，也未提供成熟工具。如果你还不了解 CSP 或者 PerformanceAPI，可以看下第 0 步（由于我并未特别深入 CSP 规则，如果有写的不对的地…"}, {"id": "6844903597893763085", "title": "前端用H5+CSS3实现自定义表单控件（我是一个粉刷匠）", "desc": "为什么要写这个文章呢？是因为写页面不可避免的就要用到表单控件啊，当然在我用最常用的text和button的时候，基本上用css直接改就可以覆盖其表单控件。 Chrome的文本框——hover的时候没有状态，这是focus的时候的状态，渐变的蓝色框框。 IE的文本框——向来就是特…"}, {"id": "6844903498052534285", "title": "[译]HTML&CSS Lesson1: 构建第一张页面", "desc": "可以的话，请想象一下互联网没有发明之前的日子。网站还不存在，纸质的书本是我们主要的信息来源，而在书本中查询我们想要的资料会耗费相当多的精力和时间。 而如今，你打开个浏览器用搜索引擎搜索，任何你能想到的信息都会呈现在你的指间。并且有可能某人在某地建立了一个跟你心中实际要搜索内容一…"}, {"id": "6844903550120624136", "title": "2017前端发展回顾", "desc": "译者按： 老技术日趋成熟，新技术层出不穷。 为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。 前端开发在2017年依然持续火热，本文将对热点事件做一个总结。 在前端领域，React一直独占鳌头。2017年又发布了一个重大的版本更新 versio…"}, {"id": "6907422977604714510", "title": "[译] Devtools 架构演进：向 JavaScript modules 迁移", "desc": "你或许知道，Chrome DevTools 作为一个 Web 应用是用 HTML，CSS 和 JavaScript 写成的。这些年来，DevTools 的特性越来越丰富，智能，其功能覆盖横跨整个 web 平台。随着 DevTools 这几年来的发展，它的架构和最初它作为 Web…"}, {"id": "6907118255660335117", "title": "BFC 详细讲解-渲染规则 创造条件 应用场景", "desc": "BFC，block formatting context，块级格式上下文，是规定内部block元素摆放规则的一个独立环境。 对应的，IFC，inline formatting context，内联格式上下文，规定内部inline元素摆放规则的一个独立环境。 BFC是一个独立的容…"}, {"id": "6844903538309480462", "title": "小tips: 0学习成本实现HTML元素粘滞融合效果", "desc": "小tips:0学习成本实现HTML元素粘滞融合效果这篇文章发布于2017年12月21日，星期四，01:23，归类于SVG相关。阅读914次,今日561次byzhangxinxufromhttp://w"}, {"id": "6844903544454119437", "title": "CSS 实现元素较宽不能被完全展示时将其隐藏", "desc": "遇到一个需求，需要实现的样式是固定宽度的容器里一排显示若干个标签，数量不定，每个标签的长度也不定。当到了某个标签不能被完全展示下时则不显示。大致效果如下，标签只显示一排，多了放不下了就不显示了。 标签部分 DOM 结构如下 乍一看这个问题很简单嘛，本着样式问题尽量不用 js 解…"}, {"id": "6844903816379236365", "title": "《第五届中国CSSConf开发者大会》参会总结", "desc": "对于我来讲，虽然做前端那么多年，但对 CSS 的探索非常少，很多 CSS 知识还是在毕业之前积累下来。揣着一本《精通CSS:高级Web标准解决方案(第二版)》（现在出第三版了，这是我在 CSS 道路上的启蒙书）在前端路上走了这么几年。这次怀着对 CSS 的伪热爱，狠了狠心买了一…"}, {"id": "6844903502414610439", "title": "为什么 CSS 这么难学？", "desc": "为什么 CSS 这么难学？"}, {"id": "6844903649412399118", "title": "CSS自定义属性 —— 别说你懂CSS相对单位", "desc": "前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以…"}, {"id": "6914906996990967822", "title": "CSS定位描述", "desc": "CSS 有三种基本的定位机制：普通流、浮动和绝对定位。 除非专门指定，否则所有框都在普通流中定位。普通流中元素框的位置由元素在(X)HTML中的位置决定。块级元素从上到下依次排列，框之间的垂直距离由框的垂直margin计算得到。行内元素在一行中水平布置。 被看作普通流定位模型的…"}, {"id": "6844903520076824584", "title": "[英] 如何使用 CSS 实现优雅的纵向文字网页排版", "desc": "Chen Hui Jin 大佬的文章每次都写的非常清楚"}, {"id": "6972721238057680933", "title": "CSS特效2 - 刮刮乐效果", "desc": "效果展示效果展示效果展示效果展示效果展示效果展示效果展示效果展示效果展示效果展示效果展示效果展示效果展示"}, {"id": "6972721109309325320", "title": "CSS特效1 - 聚光灯效果", "desc": "效果预览效果预览效果预览效果预览效果预览效果预览效果预览效果预览效果预览效果预览效果预览效果预览效果预览"}, {"id": "6972718227239469069", "title": "css3 animation 实现波纹动画", "desc": "实现效果 实现代码 项目解说,使用css,模拟qq的官网制作的效果,用作学习记录,方便日后学习,暂存"}, {"id": "6844903822016380942", "title": "（03）CSS 结构和层叠 | CSS", "desc": "前言： 在上一篇《（02）CSS 选择器详解 | CSS》中，我们文章一开始就谈到了“结构树”，也明白了之后的种种“选择器”都是建立在有这个“结构树”的基础之上。 这篇，我们将详细阐述“结构树”之于“继承”、“层叠”等的重要性。 ② 层叠：层叠是一个“过程”，是浏览器“考虑”的…"}, {"id": "6844903794824708104", "title": "position:sticky 的 polyfill——stickyfill 源码浅析", "desc": "本人最近在修改 blogsue 中的样式时，使用到了 position: sticky。话不多说，开始主要内容。 position: sticky 是 CSS position 属性的一个新值。正如它的名字那样，它会“黏在”你的浏览器窗口中。这个展示方式有很多的应用场景。例如知…"}, {"id": "6844903641954942983", "title": "加入购物车—— SVG轻松实现路径动画", "desc": "为加入购物车动画提供一种法案"}, {"id": "6844903583146590222", "title": "一场由postcss-bem引发的血案", "desc": "楼主最近搭建了一套前后端开发环境用于开发自己的网站并尝试一些有趣的前端技术，在整个环境运行正常之后，楼主某天心血来潮想将之前的less文件用pcss代替，使用bem的方式去编写css,然后用postcss-bem插件去处理样式规则的转换。在一切配置准备就绪后，正当我兴致勃勃的运…"}, {"id": "6844903601240801287", "title": "CSS Grid重构Medium的文章布局", "desc": "好像有段时间没有发文了。最近一直在改博客，因为hexo博客的SEO并不太友好，文章页面权重太低。为了提高文章在搜索引擎中的权重，小编可需要花大把时间去整整了。 现在已经去掉了博客的tags，但是作者页面依然高于文章的权重，小编泪奔啊。 先不说这些了，还是说说CSS Grid吧。…"}, {"id": "6951300137045983239", "title": "css3伪类使用技巧和运用", "desc": "伪类实现盒子阴影，伪元素实现悬停时按钮填充和边界浮动动画，伪类after实现的三角箭头，伪类after实现的图片箭头，伪元素实现带角度的底部边界（倾斜的边界），伪元素和平移（translate）变换实"}, {"id": "6844903834318274567", "title": "《CSS揭秘》读书笔记", "desc": "《CSS揭秘》主要是介绍了使用CSS的技巧，通过47个案例来灵活的使用CSS进行实现，同时在实现过程中注重CSS代码的灵活性与健壮性。通过阅读这本书有利于我们编写高质量的CSS代码以及打破使用CSS时的固定思维，能够更加灵活的使用CSS。 《CSS揭秘》中的所有案例代码均上传到…"}, {"id": "6897503091667501069", "title": "【前端】sticky粘性定位", "desc": "详细说明:【前端】position:sticky解析 这次应该大结局了 ，补充说明并修正若干概念。 最近滚动祖先 ：以position:sticky;元素为起点往上找，遇到的第一个overflow-x或overflow-y不为visible的祖先节点。如果不存在，那么直接取 v…"}, {"id": "6925335711071600647", "title": "手写CSS处理器", "desc": "CSS处理器是一个能让你通过预处理器自己独有的预发来生成CSS程序。 市面上有很多CSS预处理可供选择，且绝大多数CSS预处理器会增加一些原生CSS不具备或不完善的高级特性，这些特性让CSS的结构更加具有可读性且易于维护。当前社区代表的CSS预处理器 主要有一下几种： Sass…"}, {"id": "6940630750798544903", "title": "估计这两个 HTML 标签，你听都没听过： <details> 与 <summary>", "desc": "众所周知， HTML5 已经出了很多年，其迭代版本都出到了 HTML5.3 。这其中有趣的 API 跟 标签有许多，这里就简单介绍两个：&#x3C;details> 跟 &#x3C;summary> 。 &#x3C;details> 就是一个展示附加内容的原生组件。 而 &#x…"}, {"id": "6844903645969055757", "title": "食用源码：image-size", "desc": "一个Node模块，用于获取任何图像文件的尺寸。 nodejs 的包加载机制会把 '..' 解析成 '../'，然后会尝试去 package.json 内取 main 字段的值，作为文件加载的入口，所以这里加载了 lib/index.js。 通过 process.argv.sli…"}, {"id": "6996266545433280526", "title": "【JavaWeb基础 · CSS样式--浮动】", "desc": "“这是我参与8月更文挑战的第14天，活动详情查看： 8月更文挑战” 今天我们主要学习CSS样式的浮动布局。通常默认的排版方式，是将页面中的元素从上到下一一罗列，而实际开发中，需要左右方式进行排版，这时"}, {"id": "6974636270848835592", "title": "Formatting context（FC）", "desc": "1. FC是什么 2. 介绍BFC、IFC、FFC、GFC 2-1. 它在什么条件下会创建 2-2. 它的布局规则是什么 2-3. 它的使用场景（利用它的特性来完成需求）"}, {"id": "6844903641707446285", "title": "你不知道的CSS堆叠上下文(Stacking Context)", "desc": "对于堆叠上下文，你可能没有听说过这个术语，但是你肯定有接触过它。当你在使用绝对定位和z-index来控制元素的层级时，该元素就建立了自己的堆叠上下文。 所以堆叠上下文是比较经常能接触到的，了解相关的知识也是很有必要的。 简单来说，为了让HTML元素在网页上绘制时有个前后的顺序（…"}, {"id": "6915280968337063944", "title": "如何解决CSS外边距塌陷的问题", "desc": "1.当上下相邻的两个块级元素相遇，上面的元素有下边距margin-bottom，下面的元素有上边距margin-top，则它们之间的垂直距离取两个值中的较大者。 这时候两个盒子之间的垂直距离不是30px，而是20px。 2.对于两个嵌套关系的块元素，如果父元素没有上内边距及边框…"}, {"id": "6844903582458724366", "title": "CSS人人都能写自定义Checkbox（+1白话讲解）", "desc": "那一刻...无数前端开发者想起了自己曾经被Checkbox支配的恐惧...这种在绝大多数浏览器中几乎或完全不能进行样式替代的玩意让开发者们被迫选择默认样式，或者是找一些访问性极差的hack方案... 关于em这里就不再讲解啦~ 不过还是推荐大家出门拐拐拐去学习一下emmmmm."}, {"id": "6968346533297291278", "title": "圣杯布局和双飞翼布局浅析", "desc": "圣杯布局和双飞翼布局实现的布局效果是相同的，就是两边的宽度确定，中间宽度自适应的左中右三栏布局。实际开发过程中，推荐使用flex来实现，其他方式只是用来作为了解即可。"}, {"id": "6920155337840394254", "title": "浅显的发表下我对flex弹性布局的理解", "desc": "最近在杭州溜达，无事可做。想着就把我学过的知识回忆起来，写点东西把。文章的出发点是一张图，因为PS一张图还挺花时间的，那么既然图都P了那就写个文章把。 一、要理解弹性布局首先得从CSS布局说起，简单的梳理一下。 flex布局属于弹性流。 对于每一个容器都有着这些重要的概念，看懂…"}, {"id": "6844903532861063182", "title": "[翻译] 理解 CSS 布局和块级格式上下文", "desc": "本文的目的是介绍一些概念，来帮你增强 CSS 码力。如标题所示，这篇文章主要是讲块级格式上下文（BFC，Block Formatting Context）。你可能没听过这个术语，但只要你曾经使用 过CSS 布局，你就能明白它。理解 BFC 是什么、它如何工作、如何创建一个 BF…"}, {"id": "6984989498836779038", "title": "盒模型", "desc": "盒模型计算 box-sizing属性 将盒子添加了box-sizing:border-box;之后，盒子的width 和 height 数字就表示盒子实际占有的宽高（不含margin)了，即paddi"}, {"id": "6949846494912446495", "title": "CSS（一）：什么是CSS", "desc": "人类喜欢自己琢磨，按照自己认为的事物运作方式来思考和解决问题。零件能拼上就行，只有事实跟想法相背离了，才不得已去察看指南。"}, {"id": "6844903510715138061", "title": "客栈说书：CSS遮罩CSS3 mask/masks详细介绍", "desc": "客栈说书：CSS遮罩CSS3mask/masks详细介绍这篇文章发布于2017年11月6日，星期一，22:32，归类于css相关。阅读380次,今日130次byzhangxinxufromhttp:/"}, {"id": "6844904035716169741", "title": "[ 基础系列 ] - CSS 小测 03", "desc": "本篇是张鑫旭老师的 CSS基础测试4 的阅后笔记。（感谢 XboxYan 的解答，堪称模板。另外还有几位同学的解答也各有亮点：yaeSakuras，maomao1996） 先来看看题目。 还是老规矩，先实现最基础的，再谈优化。 那么先来看看这个气泡小尾巴的实现。 在我上期的 c…"}, {"id": "6844903727518711822", "title": "【英】CSS Animation 101", "desc": "开源电子书《CSS Animation 101》，从零开始介绍 CSS 动画。"}, {"id": "6844903561009037325", "title": "现代CSS进化史", "desc": "英文：https://medium.com/actualize-... 编译：缪斯 CSS一直被web开发者认为是最简单也是最难的一门奇葩语言。它的入门确实非常简单——你只需为元素定义好样式属性和值，看起来似乎需要做的工作也就这样嘛！然而在一些大型工程中CSS的组织是一件复杂和…"}, {"id": "6882658156053282824", "title": "【For Interview】css相关", "desc": "核心概念点浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。 回流代价比重绘代价高，并且重绘不一定会引起回流，而回流一定会引起重绘。 下面这些方法会…"}, {"id": "6949037093079220237", "title": "响应式布局方法总结", "desc": "1.定义响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局。传统的开发方式是PC端开发一套，手机端再开发一套，而使用响应式布局只要开发一套就够。2.优点面对不同分辨率设备灵活性强；能够快捷解决多设备"}, {"id": "6844903577752698894", "title": "shapes 创建炫酷的内容流", "desc": "今天不瞎扯了，我想嘱咐你几句。你做为一名程序猿，一定多注意身体，尤其是职业病---颈椎病、肩周炎，一定要多起身活动活动，多注意休息，照顾好自己，锻炼起来，别懒。 我们知道，web布局可以理解为就是堆盒子，盒子嘛，就是一个块堆一个块，也就是一个矩形加一个矩形，所以文字只能围在矩形…"}, {"id": "6844903649131364366", "title": "深度解析混合开发技术成熟度曲线", "desc": "众所周知，HTML5技术本身具有许多优势。但是，如果HTML5想成为移动互联网时代App开发的主流技术，有一个必要的前提条件，就是它的功能、性能和API扩展能力上必须要达到Native的水平。而在这一点上，依靠W3C规范的定义和浏览器厂商的支持是不现实的，混合开发技术是唯一出路…"}, {"id": "6949029843199590436", "title": "「HTML+CSS」--自定义加载动画【008】", "desc": "前言效果展示Demo代码HTMLCSS原理解释动画的核心部分就是span和span::after，section仅作为提示框。步骤1将span元素设置为一个96✖️96px的正方形边框为10px，白色"}, {"id": "6844903586929852423", "title": "推荐15个有趣的Javascript 和CSS库系列2", "desc": "我们 Tutorialzine 的任务是让你紧跟最前沿、最酷炫的 Web 开发趋势。因此我们每月都会从我们偶然发现的，或者是我们认为值得你关注的资源中，手工挑选一批最好的资源集合，发布出来与你们分享。"}, {"id": "6844903838533550094", "title": "谈谈相对定位", "desc": "美好的周末从码字开始...... 说道相对定位，相信很多童鞋会立马想到绝对定位。虽是同个妈生的，爹地却不同，那么性情绝对是不相同滴。 相对定位，它是一种定位机制，可以使得block-level box和inline-level box相对它们本身的位置上下左右移动一段距离。 这…"}, {"id": "6844904120722128909", "title": "贝塞尔曲线真的有那么丝滑吗？用事实来一探究竟", "desc": "很多热爱设计开发的小伙伴，包括老叁我自己平时在学习绘图、后期剪辑、网页设计、建模等等时，都会遇到 “平滑过渡” 或者说是 “贝塞尔曲线” 的字眼。比如，这些地方都出现过它的身影： 由以上的案例可见，贝塞尔曲线在任何一款软件中，几乎都是一样的设计安排，其表现形式就是一条带有句柄和…"}, {"id": "6948600225900691464", "title": "【译】理解CSS关键字：“Initial”，“Inherit”和“Unset”", "desc": "CSS 中有各种各样的关键字。本文我将着重介绍以下几个关键字：initial、inherit 以及较新的 unset。 我确信绝大多数开发者都见过这几个关键字，但是对于它们的原理确知之甚少。 在此之前的一段时间，我只知道这些关键字是用来重置 CSS 样式的，但是如果它们都起到了…"}, {"id": "6919664206522368013", "title": "编写高效的 CSS 选择器 – CSS魔法 – CSS体系, 网页最佳表现, Harry Roberts", "desc": "高效的CSS已经不是一个新的话题了，也不是我一个非得重拾的话题，但它却是我在Sky公司工作之时，所感兴趣的，关注已久的话题。 有很多人都忘记了，或在简单的说没有意识到，CSS在我们手中，既能很高效，也可以变得很低能。这很容易被忘记，尤其是当你意识到你会的太少，CSS代码效率很低…"}, {"id": "6844904146546458638", "title": "CSS 知识总结", "desc": "将这些这帧以一定的速度进行播放，我们的视觉会产生残影形成动画效果。一般影视播放需要：1s/24帧，游戏需要1s/60帧。 3. 如何更新样式 对应下图的第一种方式，全走的方式，会触发当前消失，其他元素relayout。 transform属性允许你旋转，缩放，倾斜或平移给定元素…"}, {"id": "6844903588985044999", "title": "移动 Web入门前奏", "desc": "从最早的IE6时代到现在的HTML5时代，前端的主战场也从PC端转移到了移动端。几年前前端工程师还在为固定布局和流动布局打伤脑筋，而在如今的移动Web上我们可以使用弹性布局轻易实现以前在Pc端的复杂布局，甚至更强大的网格布局也在Css下一版本的规范。移动web在将来的一段时间仍…"}, {"id": "6844903606341091342", "title": "【前端Talkking】CSS系列——CSS深入理解之relative定位", "desc": "在前面的两篇文章：CSS深入理解之float浮动和CSS深入理解之absolute定位中，介绍了float和absolute的特性和使用方法，如果大家仔细阅读完了这两篇文章，相信你的CSS打怪技能又提高的一大截，那么趁着自己最近状态不错，就多给大家分享点自己平时所学的技能。一方…"}, {"id": "6844903571343802381", "title": "第三方 CSS 并不安全", "desc": "最近一段时间，关于 通过 CSS 创建 “keylogger”（键盘记录器） 的讨论很多。"}, {"id": "6855129006296006670", "title": "CSS 知识总结", "desc": "一. TRANSITION过渡 不是所有属性都能过渡, display: none =>/<= block没办法过渡。一般改成 visibility: hidden =>/<= visible。但是background背景和opacity透明度能过渡。 二. ANIMATION…"}, {"id": "6992141459977682951", "title": "前端button组件之按钮式进度条", "desc": "在一些前端项目中，它们会涉及文件的上传 / 下载 功能，当文件在进行上传 / 下载时，我们该怎么更好的向用户进行进度反馈呢？我们常见的有弹窗式进度条、吸顶式进度条 ..."}, {"id": "7000037377129316359", "title": "学透CSS-  :root + vm/vh 实现响应式字体！！！", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前言 一个网页中最多的东西是啥? 正常人的第一反映肯定是文字，你要是跟我说是图片，那我只能表示： 响应式网页设计中一个很难解决的问题就是文"}, {"id": "7001772184498601991", "title": "纯CSS从三角形进化到六边形", "desc": "今天要学习一下面试中常考的一个css题目，用css画多边形。 这一次以三角形、四边形、五边形、六边形为例，一次爽个够。"}, {"id": "6898482129592647693", "title": "10 个 GitHub 上超火的 CSS 奇技淫巧项目，找到写 CSS 的灵感！", "desc": "一般人没事的时候刷刷朋友圈、微博、电视剧、知乎，而有些人是没事的时候刷刷 GitHub ，看看最近有哪些流行的项目。 久而久之，这差距就越来越大，因此总会有开源信息的不对称，有哪些优秀的前端开源项目值得学习的也不知道。 初步前端与高级前端之间，最大的差距可能就是信息差造成的。 …"}, {"id": "7007350268891234312", "title": "CSS 页面翻转效果", "desc": "实现步骤 1、要实现空间3D效果，需要在容器的父节点上设置 2、默认一个DIV，翻转后，会显示其背面镜像图像的。这样，card的背面就被覆盖了。所以，我们需要为正面设置不让显示其背面 3、另外我们还需"}, {"id": "6975818153376874503", "title": "纯 CSS 创建五彩斑斓的智慧阴影！让前景图片自动转化为对应彩色的背景阴影", "desc": "我们是否可以使用网络技术创建一个足够智能以模仿前景色的彩色阴影。事实证明，我们完全可以只使用 CSS 构建出这个案例。在本文中，我们将了解如何创建这种效果。"}, {"id": "7003607712776847373", "title": "css 中的 滚动条", "desc": "滚动条问题 浏览器默认滚动条各不相同，感觉都是不好看的样式。而且同一种浏览器 window 和 mac 也有着比较大的区别。 于是打算从滚动条的css基础属性入手，然后制定两种解决方案，并阐述。 我想"}, {"id": "6999427791531802638", "title": "学透CSS-学会这9个伪类,让你的页面/表单更人性化！！！ 连载中", "desc": "一个优秀的网站永远都不是冷冰冰的，情感化、人性化一直是现代化网站所追求的！情感化设计利用彩配色激发用户情感，或高兴，或温暖，或宁静祥和；利用简单易懂，自由流畅的交互设计，吸引用户点击或参与."}, {"id": "7003398972756721695", "title": "水平垂直居中的八种方式", "desc": "讲述8种常见的垂直居中的方法，里面有有需要计算盒子大小和不用计算盒子大小分别三种以及其他两种的css属性的代码实现和效果展示."}, {"id": "6992724436608614414", "title": "element 穿梭框性能优化", "desc": "穿梭框处理大数据量时,由于渲染的 DOM 节点过多，造成页面卡顿的问题。在尽量不改变组件原有逻辑的前提下，进行优化。"}, {"id": "7000935508683522084", "title": "CSS选择器：伪元素是怎么回事儿？", "desc": "本文已参与掘金创作者训练营第三期「话题写作」赛道。 伪元素官方是怎么解释的？ 伪元素是一个附加至选择器末的关键词，允许你对被选择元素的"}, {"id": "7003268467004555301", "title": "一文读懂Tailwind CSS 核心理念（附开发实践）", "desc": "Tailwind CSS 为什么这么红？Tailwind CSS 跟 Bootstrap 到底有啥区别？啥是 Atomic/Utility-First CSS？这篇文章给你答案"}, {"id": "6958990366888607757", "title": "CSS新特性contain，控制页面的重绘与重排", "desc": "在介绍新的 CSS 属性 contain 之前，读者首先需要了解什么是页面的重绘与重排。 之前已经描述过很多次了，还不太了解的可以先看看这个提高 CSS 动画性能的正确姿势。 OK，下面进入本文正题，"}, {"id": "7003165528076320799", "title": "纯 css 实现数字自增的动画效果", "desc": "前言 最近在群里摸鱼时,讨论到 css houdini 能提供哪些能力,其中有一些能力还在规范中,有一些能力已经被部分浏览器支持了。我于是找到其中一个新增的 at-rule css 规则 @prope"}, {"id": "6987043290444988424", "title": "CSS 动画实现星球环绕效果", "desc": "今天为大家带来一个实用的前端小技巧，用CSS实现行星环绕运动 🪐 的效果，这来源于设计师山田日“奇怪”的想法。"}, {"id": "7002478486396862477", "title": "使用css变量和sass实现一键主题换肤功能", "desc": "需求 最近做的公共模块，需要提供给不同平台，可以通过传参实现主题色的适配，目前支持模板一键换肤以及自定义换肤。 实现方案 换肤方案主要是基于CSS自定义变量以及sass动态修改data-theme实现"}, {"id": "6998293783968219149", "title": "【HTML干货分享 | 建议收藏】挑战最短时间带你走进HTML（二十）", "desc": "感激相遇 你好 我是阿ken 参数 a 用于定义旋转的角度值，单位为 deg，其值可以是正数也可以是负数。如果值为正，元素将围绕 X 轴顺时针旋转；反之，如果值为负，元素围绕X轴逆时针旋转。rotat"}, {"id": "6991657194282450951", "title": "【Web动画】科技感十足的暗黑字符雨动画", "desc": "本文将使用纯 CSS，带大家一步一步实现一个这样的科幻字符跳动背景动画。类似于这样的字符雨动画： 或者是类似于这样的： 运用在一些类似科技主题的背景之上，非常的添彩。 文字的竖排 首先第一步，就是需要"}, {"id": "6997011885547585549", "title": "🥕初识当红框架Tailwind CSS", "desc": "Tailwind CSS 是一个功能类优先的 CSS 框架，它集成了诸如 `flex`, `pt-4`, `text-center` 和 `rotate-90` 这样的的类，它们能直接在脚本标记语言中"}, {"id": "6844903845617729549", "title": "关于移动端适配，你必须要知道的", "desc": "... 上面这些问题可能我们在开发中已经知道如何解决，但是问题产生的原理，以及解决方案的原理可能会模糊不清。在解决这些问题的过程中，我们往往会遇到非常多的概念：像素、分辨率、PPI、DPI、DP、DIP、DPR、视口等等，你真的能分清这些概念的意义吗？ 本文将从移动端适配的基础…"}, {"id": "6969737680489807879", "title": "CSS伪类和伪元素", "desc": "伪类的概念引入是为了能够表达在文档树语法之外无法通过简单的选择器表达的信息。伪元素是在html文档树语法的基础上创造的一种抽象概念。"}, {"id": "6911527369731751949", "title": "css布局篇：谈display，position， float属性", "desc": "在实习期间，发现自己在之前搭建前端页面的时候，过多的依赖UI框架，而对基础知识的掌握不到位，就比如最基本的布局，所以花了很多功夫来巩固自己的基础知识。此篇主要是谈在布局的时候，display、position以及float属性的使用。 p、ul、form、div 等元素被称为块…"}, {"id": "6844903941075894280", "title": "用CSS让DIV上下左右居中的方法", "desc": "利用表格单元格的居中属性。 当父div的行高等于自身高度时，内部的行内元素会上下居中显示。行内块没有固定高度时也会上下居中显示。通过文本居中属性text-align:center,可以使内部行内元素或行内块元素左右居中显示。 父div设置文本居中(text-align:cent…"}, {"id": "6844903703892197384", "title": "奇妙的canvas：弹跳小球", "desc": "关于canvas的入门知识，网上有很多成熟的资料，我就不多做介绍啦。 为了方便理解之后的弹跳运动，我们先看看如何在canvas里实现匀减速直线运动。 做过动画的人都知道，动画中经常会用到这个方法。它使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。回调的次数通常是每…"}, {"id": "6844904146823282695", "title": "CSS 定位详解", "desc": "作为一个后台开发，最不爱写的就是 CSS。然而有些时候还是要了解 CSS。本文作为前端学习的第一篇，主要讲定位部分。position 属性用来指定一个元素在网页上的位置，一共有 5 种定位方式 static 是 position 属性的默认值。如果省略 position 属性，…"}, {"id": "6844903862046818317", "title": "前端小白的成长之路 前端系列—shadow的尝试", "desc": "当然后，box-shadow支持多个阴影以“,”连接。 ，样式不算很复杂。值得一提的是中间的耀斑，灵感来自codepen--Fire，虽然最后没有达到很完美的效果，勉强能看，后面再看看有什么更好的模拟方式 在性能上，远远优于使用js来创建同样效果的dom动画，毕竟shadow的…"}, {"id": "6985430513255186446", "title": "CSS动画", "desc": "CSS动画 浏览器渲染过程 根据HTML构建HTML树（DOM） 根据CSS构建CSS树（CSSOM） 将两颗树合并成一颗渲染树（render tree） Layout布局（文档流、盒模型、计算大小和"}, {"id": "6844903650788130830", "title": "采用20/80原则学习 CSS Grid 布局", "desc": "采用20 / 80原则学习和使用 Grid 布局。 本文不会覆盖Grid 布局的所有细节，而是面向那些想快速用起来并看到效果的你们。我将会向你介绍 Grid 技术的20%，学会了这些你就掌握了Grid 功力的80%了，开心不🤒。 For a programmer, lazin…"}, {"id": "6844903496756527118", "title": "【译】2017 年 9 月：15 个有趣的 JS 和 CSS 库", "desc": "迎来了金秋 9 月，在这收获的季节，Tutorialzine 又为我们带来了哪些新鲜、有趣的前端资源呢？前端开发者们，一起来看看有木有你需要的前端库。"}, {"id": "6844903623093125127", "title": "2018前端面试知识整理【上】", "desc": "最近又迎来一年一度的求职高峰，本人也是准备找工作，于是整理了一下面试中可能出现的知识点。欢迎补充，本集内容只包含html和css。js下期分享吧。 声明于html文档中第一行，告知浏览器的解析器用什么文档标准解析这个文档。 link属于xhtml标签，除了加载css外，还能定义…"}, {"id": "6974560595320406030", "title": "前端练习4：响应式布局", "desc": "var gnMore = document.gnList = document.gnMore.if (gnList.style.gnList.style.gnList.style.效果： 当屏幕小时点击两次’=’，display: none;的效果会留在.gn-more的内联样式..."}, {"id": "6844903508685094926", "title": "前端笔/面试经典百题答疑解惑", "desc": "由于从校招实习到校招提前批，一直在学习前端相关的基础知识并针对具体遇到的细节进行查漏补缺，零零散散发现很多内容值得反复回顾，汇总到这里，供大家参考。欢迎有兴趣的同学一起建设该部分，大致分为以下几个方面： HTML, CSS, JavaScript, Node 和 HTTP。"}, {"id": "6844903909710888967", "title": "聊一聊CSS动画", "desc": "我们眼前所看到图像正在以每秒60次的频率刷新，由于刷新频率很高，因此你感觉不到它在刷新。而动画本质就是要让人眼看到图像被刷新而引起变化的视觉效果，这个变化要以连贯的、平滑的方式进行过渡。 ease:ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0). li…"}, {"id": "6918603001040994312", "title": "简单的JS+CSS实现网页自定义换肤", "desc": "简单的JS+CSS实现网页自定义换肤，原理 主要原理是利用css变量设置颜色，用js动态修改变量，使颜色变化"}, {"id": "6906025839926706189", "title": "css画皮卡丘", "desc": "其实画皮卡丘整体是十分简单的，用到的 JS 很少，最多的还是 CSS 代码。虽然在源码中没有 CSS 文件，但是字符串中全是 CSS 的代码。JS 只是用 MVC 模式实现了一个播放器 player。 可以实现弯曲的胡须，并且使用伪元素覆盖颜色。在画皮卡丘的过程中，最难的应该就…"}, {"id": "6844903872528384008", "title": "从 Chrome 源码看浏览器如何计算 CSS", "desc": "浏览器每收到一段html的文本之后，就会把它序列化成一个个的tokens，依次遍历这些token，实例化成对应的html结点并插入到DOM树里面。 我将在这一篇介绍第二步Style的过程，即CSS的处理。 1. 加载CSS 上面的rel指明了它是一个样式文件。这个加载是异步，不…"}, {"id": "6844903704747999245", "title": "[译] 最详细的 CSS 字符转义处理", "desc": "When writing CSS for [markup with weird `class` or `id` attribute values](https://mathiasbynens.be/notes/html5-id-class), you need to [cons…"}, {"id": "6844903498228695048", "title": "从搭建工程讲到CSS Modules", "desc": "这周的主要的工作就是搭建新工程的架子，项目基于vue-cli构建。基本的功能在脚手架里都已经具备，但是还是需要针对具体的业务场景来做一些定制。 这样前端可以不用等后端接口完全写完才可以开发，前后端并行开发，提高团队效率。 而脚手架提供的功能只有一个proxy，不能满足我们的需求…"}, {"id": "6844903937242300423", "title": "淘宝flexible深度解读", "desc": "关于flexible的第一篇介绍文章是大漠的《使用Flexible实现手淘H5页面的终端适配》。请先阅读这篇文章再来看本文。 三年前看的时候就一个感觉Perfect，还有这么神奇的操作，但是深入到原理就有点似懂非懂，向其他同学推荐的时候，总有些细节讲不清楚。究其原因是自己没有深…"}, {"id": "6959833102403239966", "title": "css - overflow-wrap、word-wrap、word-break、white-space 使用总结", "desc": "理解 css 里的 overflow-wrap、word-wrap、word-break、white-space 之间的关系。"}, {"id": "6844903526456377351", "title": "我脑中飘来飘去的css魔幻属性", "desc": "最近看到一篇20 个CSS高级技巧汇总的汇总，感触很深，不过我想，与技巧相比，有些常见css布局难题，有时候更加让我们的日常开发变得踌躇沮丧吧。 在写这一篇文章之前，自己还写过一篇：我所不注意的那些CSS冷知识，但却阻止了我做项目的速度,如果你看了，我相信你也会受益的。 大概就…"}, {"id": "6924554218426597383", "title": "用一些简单的CSS和JavaScript创建一个标签云", "desc": "我一直很喜欢标签云，我喜欢通过看标签的相对字体大小来了解网站上最受欢迎的标签是哪些，受欢迎的标签更大。 制作标签云有多困难？一点也不难。让我们来看看！ 对于我们的HTML，我们将每个标签放入&#x3C;ul class=“tags”>&#x3C;ul> 列表中，我们将使用Jav…"}, {"id": "6844903688071282696", "title": "CSS魔法堂：那个被我们忽略的outline", "desc": "用于创建可视对象的轮廓(元素的border-box)，如表单按钮轮廓等。 outline不一定是矩形。 outline作为CSS2.1规范，因此IE6/7/8(Q)均不支持，在IE8下写入正确的DOCTYPE则支持outline属性。 outline-offset则IE下均不支…"}, {"id": "6844903505551966222", "title": "初探 WAI-ARIA", "desc": "近期开发的一个项目，运行ESLINT某行提示报错 出错行代码 jsx-a11y/no-static-element-interactions 查找文档出现关键词 WAI-ARIA WAI-ARIA (Web Accessibility I…"}, {"id": "6844903615996362760", "title": "CSS3 mix-blend-mode 初探", "desc": "关于了一个我知道，但是从来没有用过的css3属性mix-blend-mode。做了一个小demo，再一次被css3 的强大所征服。 经常做图片处理的人，比如用photoshop处理图片，对混合模式一定不会陌生。在css3中，属性mix-blend-mode其实就是ps中的混合模…"}, {"id": "6844903586170667015", "title": "Ant design的Notification源码分析", "desc": "notification就是通知提醒框，在系统四个角显示通知提醒信息。经常用于以下情况： 较为复杂的通知内容。 带有交互的通知，给出用户下一步的行动点。 系统主动推送。 先来看一下notification的API。 可以看到，notification的API在antd的组件中可…"}, {"id": "6844903586162294798", "title": "从原理到实现动态简历", "desc": "1. 原理 假设有 10 个数字，初始时 n = 0，屏幕上一个数字都没有，每隔 500 ms多出现一个数，用 setInterval 来做定时，用 slice 或 substring 控制多出现的数，当 n ≥ 10 时 ，说明数字已经全部出现，clearInterval。 …"}, {"id": "6911682147000057870", "title": "float和absolute会改变元素的display", "desc": "无论是内联元素还是块级元素，当为其设置float属性或position:absolute属性时，元素都会脱离文档流。同时display值将变为inline-block。 当没有设置float和absolute属性时，块级元素独占一行，display为block；内联元素disp…"}, {"id": "6844903585801568270", "title": "30 秒 CSS 中文版", "desc": "弹跳加载中动画创建反弹加载程序动画。HTMLCSS演示说明注:1rem通常是16px。@keyframes定义了一个具有两种状态的动画，其中元素更改opacity并使用transform:transl"}, {"id": "6893511867495514126", "title": "CSS定位", "desc": "1.0布局和定位的区别布局是屏幕平面上的，定位是垂直于平面的2.0div的分层background（背景色）是在border的下面块级子元素、浮动元素、块级子元素的内容、浮动子元素的内容以及内联子元素"}, {"id": "6844903823413100557", "title": "备战-CSS篇", "desc": "提及到CSS首先我们就要弄清楚BFC这个点。小编之前有结合实例介绍过，就不浪费时间再写一次了BFC介绍，这边就简单说一下。 我们去用到flex布局前提要求就是我们要将父级盒子定义为弹性盒子,当时设置 flex 布局之后，子元素的 float、clear、vertical-ali…"}, {"id": "6941658437700812831", "title": "CSS居中常用大法小结", "desc": "块元素水平居中：效果：html结构如下：（子元素在父容器内居中）margin:autoflex布局子元素绝对定位时的水平居中对齐1：（最近一层父容器必须使用包含块定位,position: relati"}, {"id": "6944296726014623781", "title": "CSS选择器的介绍", "desc": "元素选择符通常是HTML元素，但也有例外。主要是在XML中，在CSS文档中什么都可以作为选择符，因为XML可以自己创建新标记语言。但是在HTML中书写CSS样式时，选择符则是HTML中预定的元素，例如p,h1,div等。 ok，群组选择符的应用是非常常用的，我们在开发中经常会遇…"}, {"id": "6911591190802464776", "title": "【Ten Mins Effect】 - 05 荧光方块攀爬效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现一个简单精美的 css 效果。 大致关键点就是上面这几点，而其他的细节我们可以在实现中讨论。 现在已经知道了思路，那么便开始愉快的 coding 吧，首先是实现一个荧光的方块。 实现了翻滚…"}, {"id": "6844903498052550670", "title": "[译]HTML&CSS Lesson2: 了解HTML", "desc": "我们初步了解了HTML和CSS，现在让我们深入挖掘HTML并了解哪些元素构成了这种语言。 建设网站前，我们需要了解什么元素适合排版什么内容。这对于理解元素如何展示在页面中以及元素的语义化都有非常重要的意义。 在工作中使用适当的元素排版需要长时间的实践，但接下来的学习中我们将会合…"}, {"id": "6844903518722261006", "title": "简单实现 3D 相册", "desc": "之前写过《CSS3 动画简单入门》，文章内容只是简单介绍 CSS3 动画属性的使用，并没有一个综合的案例演示，因此本章作为前者的内容补充。 下面简单介绍本章需要实现的 3D 效果： 当加载页面后，图片展示“摊牌”的效果，当鼠标点击页面左滑动或者右滑动时，图片会跟随左旋转或右旋转…"}, {"id": "6844904017219289096", "title": "CSS 优先级浅析", "desc": "层叠样式表 CSS 作为 Web 重要组成部分，开发人员的关注点大多在于复杂的视觉效果、惆怅的浏览器兼容性、脆弱的可维护性，而对于最基本的层叠优先级规则，往往如同雾里看花，人云亦云，甚至产生原则性谬误，本文基于规范文档，尝试理清脉络。 所谓层叠，跳过晦涩定义，简单理解为，浏览器…"}, {"id": "6898982975241715720", "title": "CSS概述", "desc": "层叠样式表，是用来表现HTML文件样式的计算机语言。 作用：静态修饰网页，并且可以配合各种脚本语言动态的对网页各元素进行格式化。 书写位置: 在HTML标签的style属性中书写css样式。 一个内联式的css代码只能给一个标签用，复用性差；多个相同时，会增加代码量，影响加载速…"}, {"id": "6844903844724359182", "title": "【Hello CSS】第六章-文档流与排版", "desc": "正常流的盒子属于格式化上下文(FC)，在CSS2.2中可以是表格、块或内联。 在CSS3中引入了flex跟grid，当然以后会引入得更多。 行内级盒子(inline-level boxes) 与创建 行内级格式化上下文(IFC) 有关。 鱼头注：在之前的文章中有介绍过如何生成一…"}, {"id": "6844903556252729351", "title": "从0到1设计一个react-spa后台应用", "desc": "下面围绕下面这张图，谈谈如何构建一个基本的react-spa应用框架。 使用SPA必然要说到按需加载，目前最简洁优雅的方案是使用webpack3 + react-router4 + react-loadable, 原理就是 webpack 的 Dynamic Imports。 …"}, {"id": "6986967746453962782", "title": "能用CSS实现的就不用麻烦JavaScript — Part2", "desc": "上一篇文章 “能用CSS实现的就不用麻烦JavaScript” 提到好几种常用场景，这次笔者再分享多几个用CSS代替JavaScript的场景。希望大家能在日常开发中使用到。"}, {"id": "7005108831143493663", "title": "前端常见面试题总结（HTML&&CSS部分）", "desc": "HTML&CSS 介绍一下你对浏览器内核的理解？ 浏览器最重要或者说核心的部分是“Rendering Engine”，可大概译为“渲染引擎”，不过我们一般习惯将之称为“浏览器内核”。负责对网页语法的解"}, {"id": "7002497512175042590", "title": "三个技术性不强但实用的CSS", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 今天更新一个CSS的，都是一些技术性不强，实用性很高的东西！ 半透明边框 先看成品图 再看代码 核心是hsla这个函数，这个函数的说明看下面"}, {"id": "6950082193632788493", "title": "面试官：请说说什么是BFC？大白话讲清楚", "desc": "BFC到底是什么东西BFC，怎样触发BFC，BFC的规则，BFC解决了什么问题，一文搞懂，进来瞅瞅吧"}, {"id": "7005035686868811807", "title": "探究css module类名hash生成规则", "desc": "每次调试代码都会看到css module处理过后的class样式，某一天突然对class里的hash生成规则产生好奇。"}, {"id": "6999658518592618503", "title": "学透CSS- 合理使用这8个单位,让你的网站Responsive", "desc": "今天，我们生活在手机的世界里。有如此多的手机，有如此多的屏幕，屏幕的尺寸从当年的2.4英寸到3.5英寸、4.0英寸、5.0英寸等等，到现在基本上6.0英寸起步了。"}, {"id": "7000943186000494628", "title": "css还只停留在写布局？10分钟带你探索css中更为奇妙的奥秘！", "desc": "📖序言 对于前端来说， css 是入门时和 HTML 一起学习的一门语言，它规定了很多样式和规范。但对于很多小伙伴来说，有时候可能只是简单的使用，但却不知道原来 css 还能画动画，又或者原来 css"}, {"id": "7001634685927292936", "title": "这一次，彻底搞懂 GPU 和 css 硬件加速", "desc": "从 cpu 聊起 cpu (central process) 是计算机的大脑，它提供了一套指令集，我们写的程序最终会通过 cpu 指令来控制的计算机的运行。 cpu 会对指令进行译码，然后通过逻辑电路"}, {"id": "6966789229909114911", "title": "新时代创意布局不完全指南", "desc": "运用现有的 CSS 技术，我们是否可以大胆的跳出常规思维，不再局限于矩形框框一块一块，试着更加艺术一些？"}, {"id": "6888102016007176200", "title": "【建议收藏】css晦涩难懂的点都在这啦", "desc": "下面我将选择进行划分为三大部分，对于基本选择器我就不说了，主要讲下伪类选择器，组合选择器及它们各自的使用场景。 下面讲讲nth-child()括号中的公式，这个算是这个选择器的亮点了。 上面这两我就不说了，相信大家都用烂了。主要说说下面这两个。 好了，在讲完这些选择器之后我们来…"}, {"id": "7007253021801480228", "title": "不忘初心，让你更有成就感的实用CSS3动效", "desc": "不忘初心，让你更有成就感的实用CSS3动效 CSS3动效主要利用transition、transform和animation实现"}, {"id": "6992018973856383013", "title": "CSS sticky实现返回顶部", "desc": "纯 CSS 实现，可以在滚动的时候自动显示返回按钮。还算是一个比较实用的小功能，相比 JS 而言，CSS 使用起来简单方便，也无需考虑加载问题，几乎零成本"}, {"id": "6991465721565806605", "title": "【爆肝面试系列】CSS 垂直居中的正确打开方式", "desc": "前言之爆锤面试官神器 - 11 种 CSS 垂直居中 其实垂直居中主要分为了两种类型：**居中元素宽高已知** 和 **居中元素宽高未知**，那么我们就结合这两种类型来一一做举例。"}, {"id": "6844904033405108232", "title": "我写CSS的常用套路", "desc": "本文是笔者写CSS时常用的套路。不论效果再怎么华丽，万变不离其宗。 有时候，我们需要给多个元素添加同一个动画，播放后，不难发现它们会一起运动，一起结束，这样就会显得很平淡无奇。 那么如何将动画变得稍微有趣一点呢？很简单，既然它们都是同一时刻开始运动的，那么让它们不在同一时刻运动…"}, {"id": "7002151760609411080", "title": "网页如何实现类似app的页面切换动画？", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 app打开一个页面时，有时会看到这么一种动画：当前页的某些元素跳到下一个页面上，类似于下图： 那么网页端有没有办法实现这种类似于app"}, {"id": "6996094906326319134", "title": "如何决定响应式网站的 CSS 单位？", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 很高兴又见面了！😊 如何决定响应式网站的 CSS 单位？ 1.绝对单位 px - 像素 pt - 点 pc - Picas in - 英寸"}, {"id": "6908879198933221383", "title": "8个硬核技巧带你迅速提升CSS技术 | 掘金直播总结", "desc": "前段时间笔者收到可爱漂亮的小册姐姐的邀请，做了人生首次直播分享。分享主题是《玩转CSS的艺术之美》，跟笔者在9月底发布的掘金小册同名。 9月底发布的玩转CSS的艺术之美，首日预售就达到709本，预售仅三日就破1000本。这也让笔者感到惊讶，没想到CSS技术还是那么受倔友们的欢迎…"}, {"id": "7005763632399122468", "title": "来，点一下这个月饼看看会发生什么", "desc": "技术：html+css 简介：兔子月饼，点击变换黑夜并会出来一些奇妙的东西 胡言乱语：哇哇哇哇哇哇哇哇哇哇哇中秋哇哇哇哇哇哇给孩子个赞吧哇哇哇哇哇孩子一辈子没中过奖哇哇哇哇哇"}, {"id": "7005963407073968165", "title": "中秋节献礼，赏月", "desc": "我正在参加中秋创意投稿大赛，详情请看：juejin.cn/post/700315… 最近难得空闲，也正好看到这个创意大赛，既然中秋了，怎么能少的了月亮呢，new个月亮，大家一起赏月吧！ 一、先画一个月"}, {"id": "6844903577220349959", "title": "前端面试考点多？看这些文章就够了（2019年6月更新版）", "desc": "金三银四跳槽季，offer快到碗里来，前端面试考点众多，而网上各个知识点的博客文章又太多，看的眼花缭乱……所以便整理了一下常见知识点的精华文章，每个知识点的文章控制在3篇以内，尽量覆盖该知识点的下容易被面试到的所有内容，文章都是之前自己读过的，确定是精华干货。文章会一直更新，也…"}, {"id": "6974742373553143815", "title": "css之flex", "desc": "之前写过一篇介绍grid的文章，也懒了好久，今天来聊一聊flex吧。使用flex首先要将容器的`display`属性设置为`flex`或`inline-flex`。使其转换为flex容器。"}, {"id": "6974740846767767559", "title": "CSS模块化", "desc": "什么是CSS模块化 CSS模块化就是通过将分模块进行封装，就像是我们在写vue组件的时候一样,也是一个一个模块的封装。 为什么要用CSS模块化 一"}, {"id": "6977010570507583502", "title": "5分钟实现书本翻页效果 html+css", "desc": "这是我参与更文挑战的第21天 效果： 有些细节没处理好 (“▔□▔) 实现： 定义标签，shu是书本，feng是封面，wen是文字内容。 定义书本的基本属性，宽高，阴影等，伪类是下面和右面那两条阴影。"}, {"id": "6986098412940689422", "title": "CSS小技巧---半透明边框", "desc": "问：如何制作一个半透明的边框，显示父级元素的背景？ 答：其关键时使用background-clip属性"}, {"id": "6938647655174111269", "title": "这是你还不知道的CSS包含块规则吗？", "desc": "包含块是一个非常重要的概念，通常包含块是当前元素的最近祖先元素的内容区，包含块的形成依赖于CSS position属性。 | absolute | 绝对定位，包含块就是由它的最近的 position 的值不是static的祖先元素的内边距区的边缘组成。 | CSS中例如widt…"}, {"id": "6953050300643016735", "title": "记一次伪元素动画引起的webview崩溃", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 背景 前不久做了一个imo年终盛典的 h5 移动端活动项目，活动主页有三个排行榜页面，以及任"}, {"id": "6844903589412864007", "title": "“破碎-重组-破碎” CSS3实现Lowpoly风格变形动画终极篇", "desc": "在受到SVG+CSS3动画仿作草莓音乐节宣传视频的伤害后，一直想找个简单唬人的东西做一做来平复一下悲愤的心情。翻了下收藏夹，找到了一个珍藏了很久的存货，三十种濒危动物的碎片动画效果。有时候，很多创意来自于别人，别不承认，戳戳看，很惊艳 。以前写过CSS3实现lowpoly动画效…"}, {"id": "6844903813959122958", "title": "CSS中如何实现伪随机？", "desc": "觉得既有趣，又有启发，这里记录分享一下。 我们可以从相反的角度来思考，先回答什么叫不随机。 从图上可以看出红绿蓝这三种颜色，每隔六次就整体重复一遍。 上图是我使用 CSS 实现并截图的。这里仔细看一下源码： 因为 1、2、3的最小公倍数是 6，所以颜色分布规律的周期是 6。 这…"}, {"id": "6844904023166828551", "title": "探讨移动端布局解决方案", "desc": "做了两三个移动端布局的h5项目，觉得收获颇多，就总结一下移动端布局的几种解决方案吧。 在探讨一些方案之前，先了解一些概念。 物理像素：相当于屏幕分辨率。如：4.7寸iPhone是750*1334，这个所指的就是物理像素。 设备独立像素：此为逻辑像素，计算机设备中的一个点，css…"}, {"id": "6844903633662771207", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （中）", "desc": "上篇 介绍了 React 现在流行的 CSS 解决方案。本篇就直接进入主题详细讲讲我最喜欢的解决方式之一：tachyons 0. 选择标准 1. tachyons 在我的经验，只是瞥一眼文档很少人会对 tachyons 上来就感冒的，真正感受到它的魅力是在使用中。我是看了一段现…"}, {"id": "6939073941197553700", "title": "Flex(弹性布局)实现五大常用布局", "desc": "css布局在前端开发工作中是必不可少的，在这里我将利用Flex实现五大常用布局，首先来熟悉一下flex。 注意：设置为flex布局后，子元素的float、clear、vertical-align属性将失效。 采用Flex布局的元素，称为Flex容器（flex container…"}, {"id": "6844903701170094094", "title": "rem 适配布局", "desc": "虽然上面这种简单的使用百分比可以实现但是，百分比无法实现字体的自适应，百分比转换成相应的尺寸还是很难的。接下来就说说这次我们的主角 rem （我们一般只适配宽度） 首先rem是一个相对于根元素fontSize大小的相对单位，也就是说 1rem 等于 html 的 fontSiz…"}, {"id": "6976545307764981767", "title": "CSS的文本样式", "desc": "​取值方法： 1.颜色名字 2.十六进制记法 3.R G B 三原色 4.<p >中国专业IT社区CSDN (Chinese Software Developer Network) 创立于1999年，致力于为中国软件开发者提供知识传播、在线学习、职业发展等全生命周期服务。旗下拥有..."}, {"id": "6924877823010144263", "title": "模拟 Tim 实现自定义的且可动态显示的滚动条", "desc": "这两天在写一个基于 SpringBoot + Vue 简单聊天室样例，然后中间想要实现一个像 Tim 的消息滚动条，中间也查了一些资料，颇费周折，下面就介绍一下具体的思想思路，为了展示和理解方便，本文用原生 js 实现，本文所使用的完整代码也已上传到GitHub。 可以发现滚动…"}, {"id": "6976617452738183176", "title": "CSS之详解2D转换", "desc": "这是我参与更文挑战的第14天，活动详情查看 更文挑战 css中的2D变换可以帮助我们实现更多炫酷页面的效果，通过2D我们可以创建旋转，缩放的元素和界面，下面我们就来一起来看看它都有哪些用法。"}, {"id": "6981341589763260430", "title": "vue样式穿透 ::v-deep的具体使用", "desc": "之前在项目中用到了 element UI，使用特别简单，而且组建也非常的丰富。即时这样，在项目中肯定也需要用额外的样式来打造自己的应用。直接在 <style lang=\"scss\" scoped> ."}, {"id": "6974405721009946660", "title": "CSS实战 | 磁性页头和页脚的表格制作", "desc": "表格，是用来展示记录集常用的标签，现如今各种终端设备，大分辨率、小分辨率等等，让表格展现数据变得不那么直观，如表头被滚动条操作移除可视范围导致查看数据不够友好。"}, {"id": "6844903593712025613", "title": "Rem自适应解决方案 px2rem-loader + hotcss", "desc": "假设一份宽度为640px(iphone5)的设计稿，一个元素宽度为:320px，通过px2rem-loader&#x26;hotcss.js实现代码只有width: 320px，就实现在任何尺寸的屏幕下都占屏幕的1/2。 上图可以看出，通过px2rem-loader自动将320…"}, {"id": "6930256864793853960", "title": "Nextjs之CSS配置的正确姿势", "desc": "nextjs样式的定义1.nextjs默认是不支持去加载一个css文件的，需要通过修改配置实现;2.默认集成使用css-in-js方案，在nextjs当中默认使用styled-jsx形成一个编译之后的"}, {"id": "6868530337971077134", "title": "Edge 浏览器在亚像素宽度计算的表现差异", "desc": "布局的话，首先想到的就是 flex 了。 过了不久，QA 跑来说，Edge 上布局错乱了。。。每行只有 6 列而不是 7列，node7 被放到下一行显示了！效果如下： 但是在数值计算上，它们还可以存在更小的单位，我们称之为亚像素。 亚像素的值是通过像素细分（比如继续分为4x4）…"}, {"id": "6844903496190263310", "title": "EyeDropper 开发实践", "desc": "Chrome Devtools 的颜色提取器 EyeDropper，用惯了 Chrome 的前端开发者并不陌生。 但它并不支持在页面中使用，想在页面中使用只能自己实现一个。 那么接下来就介绍一下如何自己实现一个 EyeDropper。 要实现 EyeDropper，必须先学习一…"}, {"id": "6844903501852573703", "title": "Alloy周刊 Oct 2", "desc": "CSS在刚开始学习的时候看起来非常简单。但是，随着你的不断了解。很快，你会发现 CSS 没你想象的那么简单，它复杂且有深度。那么本期就随小编一起来看下有趣的CSS～"}, {"id": "6844903583758942222", "title": "[译] Chrome 66 Beta：CSS 类型对象模型，异步剪贴板 API，AudioWorklet，等", "desc": "除非另有说明，否则下文所述的更改适用于 Android，Chrome OS，Linux，macOS 和 Windows 的最新 Chrome Beta 版本。在 ChromeStatus 上查看 Chrome 66 中完整的特性列表。 从历史上看，将图像渲染到画布上首先要创建一…"}, {"id": "6844903551668322311", "title": "Top Pens of 2017 on CodePen", "desc": "Top Pens of 2017 on CodePen"}, {"id": "6949878914407727117", "title": "CSS FlexBox布局全面详解", "desc": "欢迎访问个人博客网站：http://www.zhuxin.club1. 什么是FlexBoxFlexBox（”弹性布局”）是CSS3提供的用于布局的一套新属性，这套属性包括针对容器（弹性容器，flex"}, {"id": "6844903695084158983", "title": "更高效、安全地操作 CSSOM：CSS Typed OM", "desc": "本文作者：奇舞团前端开发工程师 何文力，同时也是 W3C CSS 工作组的成员 长期以来，我们要修改 DOM 元素的样式，我们实际上操作的是 CSS 的对象模型 CSSOM。而 Houdini 中推进的又一组 CSS 对象模型 Typed OM，该标准又给我们带来了什么好处呢？…"}, {"id": "6844903616512262152", "title": "利用CSS mix-blend-mode在firefox和chrome中获取Facebook用户信息", "desc": "最近，层叠样式表（CSS）的Web标准中又增加了一些新的功能，这些功能是如此强大，以至于安全研究人员可以滥用这些功能，对演示站点的访问者实施去匿名化攻击，从而暴露他们的Facebook用户名、头像以及是否喜欢特定的Facebook页面。 通过这种攻击泄露的信息，可以帮助某些广告…"}, {"id": "6844903496135737358", "title": "[前端] 在HTTP/2的世界里管理CSS和JS", "desc": "在HTTP/2的时代里，在你的网站里发布CSS和JS跟以前大不相同了，以下是我实践的一份建议。 我们听说HTTP/2已经很多年了，我们也写过一些相关的博客。但是我们并没有怎么使用它。直到现在，在一些最近的项目里，我把使用HTTP/2设定为一个目标，并且想出怎样最好的使用多路复用…"}, {"id": "6844903503647735821", "title": "SelectMenu - 简洁，易用，多样的菜单解决方案", "desc": "包含常规菜单、高级菜单（autocomplete，自定义模板，多数组数据）、右键菜单、嵌入式菜单、动态数据等菜单模式"}, {"id": "6948773207058939941", "title": "CSS选择器总结", "desc": "然后 完。"}, {"id": "6907103243193548807", "title": "居中实现方式总结", "desc": "一inline元素水平居中text-align:center二宽度确定的block元素水平居中margin:0auto三宽度未确定的block元素水平居中绝对定位+left:50%+tanslateX"}, {"id": "6844903573126381582", "title": "【译】提交到不同URL的表单按钮", "desc": "最近刚好遇到了类似的需求，就把这篇文章翻出来看了下，正好用到。另外 formaction这个属性兼容到 IE10。"}, {"id": "6906464758611443726", "title": "css文档流和盒模型-画彩虹实践", "desc": "1. css学习方法 ==Borde调试法==: 放在第一行: 能确定选择器有用. 如果boder正常, ==证明上面的代码没有问题==, 如果boder出问题, 那一定是上面一行的代码出问题了 2. 文档流 | inline-block | 类似于inline, 但是不会因为…"}, {"id": "6844903845957468168", "title": "从头开始复习css之2D变换", "desc": "从上面的效果，我们可以看出来没加过渡和加过渡的之后的效果差距，过渡效果就像在变换的过程中增加缓冲效果，也就是说过渡就是元素从一种样式逐渐改变为另一种的效果。 transition-property 规定应用过渡的 CSS 属性的名称。 transition-duration 定…"}, {"id": "6972717403331362824", "title": "CSS特效4 - 色彩板案例", "desc": "实现效果:使用css制作的色彩板练习,方便日后学习查阅的记录,暂时存在这里,没有很多的摘要,先随便写一点吧"}, {"id": "6844903829322874894", "title": "再次理解BFC(Block Formatting Context)", "desc": "A block formatting context contains everything inside of the element creating it that is not also inside a descendant element that creates …"}, {"id": "6844903856501948430", "title": "CSS2.1 属性赋值，层叠（Cascading）和继承", "desc": "指定值通过层叠被处理为计算值，例如，'em'和'ex'等相对单位被计算为像素或者绝对长度。计算一个值并不需要用户代理渲染文档 一个属性的计算值由属性定义中Computed Value行决定。当指定值为'inherit'时，计算值的定义见继承小节 即使属性不适用（于当前元素，定义…"}, {"id": "6905274766819753991", "title": "CSS篇一一简短介绍下CSS", "desc": "CSS是Cascading Style Sheet的缩写，层叠样式表，是一种用来表现文件样式的计算机语言。 CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。 CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。 C…"}, {"id": "6844903826177130510", "title": "[译]A Simple CSS Animation Tutorial", "desc": "看到这篇文章描述简单易懂，适合初学者，于是乎就想着记录和分享一下。 以将黄色方块转变为蓝绿色圆型作为一个开始。 在上述代码中.animateClass被赋给一个元素,动画随即起效。这个class链接到animationName上，animationName需要设定@keyfra…"}, {"id": "6947578659372793892", "title": "CSS实现隐藏元素的方法（持续更新）", "desc": "1. display:none 直接上代码，给元素设置display:none;以后，元素就会隐藏，并且原有的空间也会被释放掉。意思就是隐藏之后就不占位置了。 盒子1就隐藏了，并且它原有的位置也被释放了，此时盒子2就会跑上来。 2. visibility:hidden visi…"}, {"id": "6844903695386148871", "title": "CSS in JS 很棒, 但是如何方便的处理CSS伪类", "desc": "CSS in JS 很棒, 但是如何方便的处理伪类(Pseudo-classes)? react-dom-pseudo 提供一个类似 react-motion 方式的组件，方便的为 react-dom 对象提供类似 CSS 的伪类. 如果我们项目较大，需要切分模块，CSS in…"}, {"id": "6992903430922567688", "title": "《CSS世界》“流”相关内容精炼", "desc": "一、流特性 流是CSS世界一种基本的定位和布局机制，是引导元素排列和定位的一条看不见的水流。可以理解为现实世界的一套物理规则，“流”跟现实世界的“水流”有异曲同工的表现。 1.1 块级元素 特征：一个"}, {"id": "6904170705894506510", "title": "写个简单css动画，transition 和animate", "desc": "但transition的毛病就是，必须某种动作触发（hover active巴拉巴拉），然后一次性动画。 第一种常想到的方式：设置动画的100%处就是动画前的状态，这样结束时就和动画前的状态一致了。"}, {"id": "6943901111250239501", "title": "CSS垂直居中", "desc": "CSS让人头疼的问题就是垂直居中。实现垂直居中好几种方式，但每一种方式都有一定的局限性,所以垂直居中可以根据实际的业务场景来使用。 在容器里让内容居中最好的方式是根据特定场景考虑不同因素。做出判断前，先逐个询问自己以下几个问题，直到找到合适的解决办法。 设置一个大的行高，让它等…"}, {"id": "6844903640482709512", "title": "在2018年你应该知道的9个关于CSS组件化的JS库", "desc": "一个特别有趣的概念是在CSS中使用JS将CSS抽象到组件级别本身，使用JavaScript以声明性和可维护的方式描述样式。所以，我们已经列出了一些有用的项目来开始。 您还可以阅读这个推荐的讨论 ，以帮助您做出正确的决定，这是一个非常酷的项目比较。让我们深入了解一下吧。 在Aus…"}, {"id": "6844903686250971149", "title": "愿只有一个Grid Layout", "desc": "相比较Multi-Columns Layout 和Flexible Box Layout，Grid Layuot更像是两者的结合，当然这里并不是说Grid Layout可以取代二者。 另外Grid Layout与当前非常火热的Flexible Box Layout有一个本质上的…"}, {"id": "6844903622203932679", "title": "REM，你这磨人的小妖精！", "desc": "移动端的崛起，给了我们前端更大的舞台，与此同时，也给我们带来了一系列头疼的问题，移动端适配就是其中之一，目前市面上最常用的方案即是REM适配。 为什么说她是一个磨人的小妖精？因为她确实让人又爱又恨，灵活的自适应布局再搭配上css单位转换工具，让人爱不释手；另一方面，由于移动端的…"}, {"id": "6844903876596858894", "title": "CSS: 了解一下 REM", "desc": "为了了解移动端的布局兼容，特地来看看 REM. 这样iphone8（375px）下html的font-size 就是14.0625px，iphone8p下font-size就是15.525px。 如果在iphone8（375px）下设置元素font-size为 1.7066re…"}, {"id": "6844903664495116295", "title": "一些 JavaScript 中的代码小技巧", "desc": "在上次的 “Chrome DevTools 你可能不知道的小技巧” 文中，得到很多开发朋友的反馈确实不知道这些小技巧。今天，我们来聊一聊在 EcmaScript 5/6+ 中的一些小技巧，欢迎评论区讨论下更多技巧。 我们平时经常会用到 JSON 对象，比如当我们要实现对象的深拷…"}, {"id": "6844903597117800461", "title": "资源加载优化-让动画更加顺滑", "desc": "资源加载优化-让动画更加顺滑"}, {"id": "6873709255507148813", "title": "《深入解析CSS》—模块化CSS", "desc": "掌握浏览器如何渲染CSS很重要，了解如何在项目中编写和组织CSS也很重要。组织CSS代码使其更易于理解和维护。 模块化CSS（Modular CSS）是指把页面分割成不同的组成部分，这些组成部分可以在多种上下文中重复使用，并且互相之间没有依赖关系。最终目的是：当我们修改其中一部…"}, {"id": "6914088349372252168", "title": "css处理单行文本与多行文本的文字溢出", "desc": "一般自行截断，手动添加..."}, {"id": "6844904048873717773", "title": "[译] 2 分钟搞定 3 个现代 CSS 特性", "desc": "1. Clip Paths Clip Paths 能把元素元素“裁剪”成特定形状，使用 CSS 提供的 polygon、circle、ellipse 等这些函数实现。举个例子： Clip paths 可以通过两个属性实现：clip-path 和 background-clip。…"}, {"id": "6904138129612439560", "title": "【CSS三种居中方案全解】CSS垂直居中常用方法集结", "desc": "6、line-height，父元素：line-height=height。子元素：display:inline-block。子元素垂直居中，不需要知道子元素的宽高 7、flex，目前主流的布局方案，父元素为 flex 容器且添加 align-items: center，控制子元…"}, {"id": "6844903560895791117", "title": "尝试自己动手用react来写一个分页组件", "desc": "点赞关注不要钱，有你的支持更温暖。"}, {"id": "6844903989192966157", "title": "如何理解并应用贝塞尔曲线", "desc": "贝塞尔曲线又叫贝兹曲线，在大学高数中一度让我非常头疼。前阵子练手写动画的时候，发现贝塞尔曲线可以应用于轨迹的绘制以及定义动画曲线。 本文就来探究一下，贝塞尔曲线到底是个什么样的存在。 其中n就代表了贝塞尔曲线是几阶曲线，该公式描述了曲线运动的路径。 以下我们来讨论一下，贝塞尔公…"}, {"id": "6844903713434238983", "title": "【 可视化】热力图绘制原理", "desc": "网上那些炫酷的热力图是如何绘制的? 相信你也很好奇，本文将以 canvas 作为绘图示例来讲解热力图的原理。 我们经常遇到透明度的概念，如 CSS 中的 opacity 属性、rgba 颜色中的 alpha 变量、canvas 中的 globalAlpha 属性等。 它们的取值…"}, {"id": "6952481618736971806", "title": "浏览器渲染原理与CSS动画知识总结", "desc": "1. 处理 HTML 标记并构建 DOM 树。 2. 处理 CSS 标记并构建 CSSOM 树。 3. 将 DOM 与 CSSOM 合并成一个渲染树。 4. 根据渲染树来布局 5. 将节点绘制到屏幕上"}, {"id": "6844903567808004110", "title": "在原生CSS中使用变量", "desc": "一直以来，CSS作为一种申明式的样式标记语言，很难像如javascript等命令式编程语言一样通过定义和使用变量的方式来维护和追踪某些状态。后来随着scss,less等CSS预处理器的出现，我们可以像优秀的开源框架bootstrap那样，通过维护一个_variables.scs…"}, {"id": "6941282000244015141", "title": "有结构的学习CSS", "desc": "知道什么是BFC之后，越发疑惑为什么要设计这个，过去也在在疑问，但是没能解决，看一些博客的时候也只是从现象级来说如何使用，没有从逻辑设计角度，CSS体系的角度进行思考和解释的。 CSS的内部设计也是不断在发展的，1 -> 2 -> 2.1 ... -> 3 需要针对每个elem…"}, {"id": "6951671490538881060", "title": "编程回忆录 - 大杂烩-1 (H5C3)", "desc": "此文章只记录关于项目实战的记录,记录了4个项目的核心代码，以及画图分析重点知识，满足了前端的PC页面以及移动页面的布局需求。"}, {"id": "6844903878962446343", "title": "二维布局：Grid Layout", "desc": "CSS Grid Layout 是 CSS 中最强大的布局系统。不像 flexbox 那样的一维系统，Grid 是一个二维系统，可以同时处理列和行。您可以通过声明父元素为网格容器来使用 Grid Layout。 CSS Grid Layout，旨在完全改变我们处理网格的方式，它…"}, {"id": "6850418115352887309", "title": "CSS 解决高度塌陷的简单理解", "desc": "为什么会高度塌陷当父元素不设置‘height’属性时，向其中添加子元素，父元素会拥有子元素的高度但是当其中的子元素添加’float‘属性时，子元素会脱离文档流，父元素会失去支撑其的高度，也就是所谓的‘"}, {"id": "6844903988043726861", "title": "小和尚学习 - CSS属性值的计算过程", "desc": "一. 确定声明值 二. 层叠（权重值计算） 三. 属性继承 四. 使用默认值 一. a 标签的:link、:visited、:hover、:active伪类书写顺序"}, {"id": "6896817577256419341", "title": "【CSS学习（四） 定位】", "desc": "元素的定位一般分为相对定位、绝对定位和固定定位三种。 static：默认值。位置设置为 static的元素，它始终会处于文档流给予的位置。 inherit ：规定应该从父元素继承 position 属性的值。但是任何的版本的 Internet Explorer （包括 IE8）…"}, {"id": "6844903506046877710", "title": "浅谈Web图像优化", "desc": "前端优化有很多，图像优化也是其中的一部分。无论是渐进增强还是优雅降级，图像优化成为了开发上不可忽视的一部分。 图像优化的前提是需要了解图像的基本原理。常规的图像格式分为矢量图和位图。 原理： 矢量图形使用线、点和多边形来表示图像。 光栅图形，也可以成为位图，通过对矩形格栅内的每…"}, {"id": "6844903612838051853", "title": "被遗忘的CSS和HTML", "desc": "也许你天天都在写color: #xxx，但是，你是否还记得什么是color？你是不是第一反应：字体颜色。 如果是，很遗憾，color就是被你遗忘的CSS。 如果是，你是否曾想过，字体大小叫font-size，字体粗细叫font-weight，字体类型叫font-family………"}, {"id": "6844903907693445127", "title": "CSS垂直置中技巧，我只會23個，你會幾個？(vertical-align)", "desc": "vertical-align垂直置中自古以來(是有多古？)在網頁開發需求中始終沒有停過，對於垂直對齊的需求，其困難度也從未讓工程師輕鬆過，經過了每位開發先烈們的研究後，據說CSS的垂直置中技巧已達到近十種之多，但始終鮮為人知，部分公司甚至將CSS的垂直置中技巧當成了面試題目，其…"}, {"id": "6844903639996170248", "title": ".vue文件中style标签的几个标识符", "desc": "项目中使用了elementUI框架, 与.vue文件. 现状: <template>中使用$style:[类名], <style module>进行了样式的绑定. 个人认为使用$style这种方式的绑定, 写起来很麻烦. 不仅仅是麻烦更重要的是, 没有办法直接影响和修改elem…"}, {"id": "6911636545074102279", "title": "用户体验 | 页面阅读进度提示", "desc": "相信很多人都在项目中用过这么一个玩意 —— NProgress.js库，或者是其它类似的库，它们的作用很实用：页面加载进度提示。 顾名思义，就是在刚进入页面或刷新或请求数据时在页面顶部有一个进度条给用户以反馈，使页面加载显得不那么“尴尬”。 但只有很少人见过 “在页面顶部实时反…"}, {"id": "6916327686138757128", "title": "10个Github上相见恨晚的CSS 奇技淫巧项目，帮你找到写CSS的灵感！", "desc": "该项目是 CSS 的各种效果实现，尤其是动画效果。 笔者把自己的收获和工作中常用的一些 CSS 小样式总结成这份文档。目前文档一共包含 43 个 CSS 的小样式（持续更新…），所以还是很不错的学习 CSS 的项目来的。 这里可以让你寻找到使用或者是学习 CSS 的灵感，以分类…"}, {"id": "6844904052656963592", "title": "细数最新的CSS伪元素及其用法", "desc": "CSS 中有两个很常见的概念，伪类和伪元素。 伪类用于在页面中的元素处于某个状态时，为其添加指定的样式。 伪元素会创建一个抽象的伪元素，这个元素不是 DOM 中的真实元素，但是会存在于最终的渲染树中，我们可以为其添加样式。 最常规的区分伪类和伪元素的方法是：实现伪类的效果可以通…"}, {"id": "6844903696447307784", "title": "浏览器页面渲染机制", "desc": "分享目的： 解释浏览器如何将 HTML、CSS 和 JavaScript 转换为我们可以与之交互的网站，了解这个过程，可以帮助我们优化 Web 应用程序，从而获得更快的速度和更好的性能。 1. html解析 数据是以“数据包”的形式通过互联网发送，而数据包以字节为单位。当你编写…"}, {"id": "6862000051049201671", "title": "浅析 CSS Grid 布局(上)", "desc": "一、基本定义1.1什么是Grid布局​原本的Flex布局是轴线布局，所以Flex布局有主轴和辅轴的概念，其只能针对于某一个项目进行轴向的布局，所以Flex布局可以被认为是一维布局​Grid布局将容器划"}, {"id": "6844903502985035790", "title": "图片加载优化", "desc": "图片是界面显示效果很重要的组成部分，图片加载关系到用户体验、应用性能，优化图片加载的常用策略为：预加载和懒加载。"}, {"id": "6844903648103759880", "title": "text-size-adjust bug 分析", "desc": "某日，同事 J 说发现一个奇怪的现象：一个列表页，在 iPhone7 竖屏上字体大小正常，横屏的时候有些字体就变的特别大。本文便是笔者对这一 “bug” 的分析过程。 拿到那个页面，在 MacOS Chrome 下模拟了 iPhone7 的设备，发现横竖屏都是正常的。又在自己的…"}, {"id": "6844904116028719117", "title": "一次弄懂CSS的伪类和伪元素", "desc": "伪类是一种选择处于特定状态的选择器，其作用就是在文档的某部分添加了一个类，为我们提供更灵活、可维护的代码。 伪元素与伪类类似，区别在于伪元素就像添加了一个DOM节点到DOM树中，而不是将类添加到现有元素。 伪类与伪元素都用于向选择器加特殊效果的。 伪类和伪元素都用于表示文档树以…"}, {"id": "6844903602020974600", "title": "浏览器渲染简述", "desc": "主要为 CSS 优化工作打一下基础。要编写高性能的网站和应用，除了确保编写的代码尽可能高效地运行外，还需要确保页面性能，刷新频率尽量到达 60FPS。这就需要了解浏览器是如何进行渲染的。而浏览器渲染与 CSS 密切相关，因此只有了解其中工作原理才能让 CSS 更好地工作。 另外…"}, {"id": "6844903873044316167", "title": "初探flex布局", "desc": "下面分别对以上flex属性做讨论。以下部分示例图片的DOM结构如下: 其中.parent为设置display:flex的父元素为绿色,.child为被布局的子元素. 2. 对 父元素 设置的属性们 对父元素设置的属性可以控制子元素整体的布局方法。 其中||符号表示或。 注意：如…"}, {"id": "6844903501168918535", "title": "什么是关键 CSS ？", "desc": "网络速度很慢，但是有一些简单的策略可以使网站变快。其中之一就是 将关键的css内联插入到网页的<head>标签, 但是，如果您的网站包含数百页，甚至更糟糕的是包含数百种不同的模板，那么你该怎么做呢？ 你不能手动做这件事。"}, {"id": "6844903510937436174", "title": "jQuery核心解读", "desc": "jQuery如此强大和好用，关键得益于以下特性： 丰富强大的语法（CSS选择器），用来查询文档元素 高效的查询方法，用来找到与CSS选择器匹配的文档元素集 一套有用的方法，用来操作选中的元素 强大的函数式编程技巧，用来批量操作元素集，而不是每次只操作单个 简洁的语言用…"}, {"id": "6844903775354748936", "title": "深入前端之replaced element", "desc": "本篇文章的依赖主要是html specification 和 CSS specification。也就是说都是第一手资料，而不是转手资料。 本篇整体比较细节和理论，可能会看起来枯燥。但是我认为有时候阅读枯燥的文档式文章是有必要的。 写这篇的文章主要目的在于集群众之力量来修补自己…"}, {"id": "6844904019907837960", "title": "CSS那些破B事儿系列之position:fixed定位失效", "desc": "不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform 属性非 none 时，容器由视口改为该祖先。 …"}, {"id": "6844903586971779085", "title": "快应用，快入门 ", "desc": "开篇也不扯那些没用的，让我们高效的开始教程。 无论学习什么语言、框架、库，首先你要做的，就是登陆它的官网，认真阅读它的入门手册、文档等，这比任何《xx 分钟从入门到精通》、《xx 深入浅出》都要靠谱得多，再加上现在编程体系的愈加完善，开发者越来越注重基础设施的搭建，官网绝对是学…"}, {"id": "6972137484327059486", "title": "CSS的几种定位详解", "desc": "CSS中的定位使用来布局的熟练应用对页面美化有很好的帮助，下面就进行详细介绍：定位分为静态定位，相对定位，绝对定位，固定定位这四种，定位有不同的参数，例如：left、right、top、bottom、"}, {"id": "6844903734770663438", "title": "大侠，请留步，要不过来了解下CSS Scroll Snap？", "desc": "CSS Scroll Snap是CSS中一个独立的模块，可以让网页容器滚动停止的时候，自动平滑定位到指定元素的指定位置。"}, {"id": "6844903601228234759", "title": "canvas 图片、文字模糊问题", "desc": "注：[n]标识为遗留问题，在文章末尾遗留问题部分有详细解释说明。 之前做了一个在线给图片添加文本框的工具，大体思路是先把图片加载到一个 DOM 结构中，然后通过 html2canvas 导出到一个canvas，最后通过 canvas 自带的 toDataURL 方法导出成图片。…"}, {"id": "6915581889973747725", "title": "外边距塌陷", "desc": "外边距塌陷也称为外边距合并，是指两个在正常流中相邻（兄弟或父子关系）的块级元素的外边距，组合在一起变成单个外边距，不过只有上下外边距才会有塌陷，左右外边距不会出现这种问题。"}, {"id": "6897794764444762120", "title": "页面中有间隔的方格布局如何完美实现？", "desc": "如上图所示的布局，方格中间有一定的间隙，间隙是固定的。应该如何布局会更加完美呢，比如要保证在布局完成的情况下，可以快速的添加一个元素依然保持这样的布局。以及当出现第二行的时候，这样的布局依然能够不受影响。又不用修改太多的内容。 现在在这里说一个问题，就是块元素的宽度默认是占满一…"}, {"id": "6844903908289019911", "title": "【复习】CSS实现宽高等比自适应容器", "desc": "在最近开发移动端页面，遇到这么一个情况：当页面宽度 100% 时，高度为宽度一半，并随手机宽度变化依然是一半。 于是我们就需要实现一个宽度自适应，高度为宽度一半的容器。 这里先以高度为宽度一半为例，也可以是其他任意比例。 这个问题类似于：我们在移动端页面，上面有一张宽度 100…"}, {"id": "6844903511222665223", "title": "BFC模型浅识", "desc": "BFC为Block Formatting Context的简写，简称为“块级格式化上下文”，BFC为浏览器渲染某一区域的机制，CSS2.1 中只有BFC和IFC, CSS3中还增加了GFC和FFC。 float的值不为none。 overflow的值为auto,scroll或h…"}, {"id": "6844904146882019342", "title": "CSS解决高度塌陷的方法", "desc": "当父元素不设置高度的时候靠子元素撑大，也就是说子元素有多高，父元素就有多高，当子元素浮动后，父元素就会高度塌陷。父元素高度塌陷后，父元素下面的元素就会向上移动，这样会导致整个页面的布局混乱。 可以看到父元素高度塌陷后，下面的子元素都往上移动了，脱离了文档流。 给父元素设置固定的…"}, {"id": "6907171629814513671", "title": "CSS盒模型全面解析+应用", "desc": "1. 盒模型分类 1.2. 行盒： 1.3. 行块盒： 2. 盒模型由四部分组成 2.1. 内容区：盒子内容区域 2.3. 边框： 2.4. 外边距：盒子之间的距离 3.1. 设置如何计算一个元素的总宽高的时候 3.2. 设置元素的背景区域的时候 4. 三种盒子更进一步的区别 …"}, {"id": "6976516158874714126", "title": "css揭秘 - 过渡与动画（一）", "desc": "这是css揭秘系列文章的第十二篇，本篇主要介绍使用css可以实现的过渡与动画。包括缓动效果、弹性过渡以及逐帧动画。"}, {"id": "6981653460617789454", "title": "CSS代码书写规范", "desc": "@[TOC] 首先感谢乖乖老师悉心提点 阳光拥抱着雨露，绿树拥抱着鲜花。乖乖老师细心的培养和指导就像一抹暖阳，照亮了我人生的旅途 。在这里祝愿老师儿童节快乐，青春永驻！ 好，下面介绍CSS的书写规范 "}, {"id": "6844903845689212942", "title": "摩拜前端周刊第8期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜「中高级前端」窥探数据结构的世界-ES6版地址:https://jueji"}, {"id": "6981406270934745095", "title": "CSS 定位", "desc": "定位： · · 标准文档流 一般在 HTML 元素分为两种：块级元素和行内元素。 块级元素： 行内元素： static 定位 元素没有定位，以标准流方式显示 样例代码： 效果截图： 相对定位 rela"}, {"id": "6844903694593425421", "title": "更高效、更安全地操作 CSSOM ：CSS  Typed OM", "desc": "长期以来，我们要修改 DOM 元素的样式，我们实际上操作的是 CSS 的对象模型 CSSOM。而 Houdini 中推进的又一组 CSS 对象模型 Typed OM，该标准又给我们带来了什么好处呢？ 简单的说来，CSSOM 是一组能让 JS 操作元素 CSS 的 API。在浏览…"}, {"id": "6844903496706162702", "title": "CSS网页布局之传统解决方案与Flex大法", "desc": "网页布局主要包括全屏布局，水平居中，垂直居中和sticky Footer布局。本文针对网页布局的实现，利用传统的解决方案（display + position + float + table）与Flex解决方案进行实践，以加深记忆及巩固所学知识，同时分享给大家，希望也能帮助到前…"}, {"id": "6844903745545846792", "title": "炫酷的圆环加载及数字滚动效果（下）", "desc": "使用圆环加载效果可以用可以采用css3+js的方式。这种方式首先我们得有一个圆的图片。。核心是采用显示隐藏的方式，并且依靠层级的方式来控制圆的加载过程。 今天来看看svg实现圆环过渡的过程和原理。 SVG 代码都放在顶层标签 <svg>之中。 当然svg有很多基础知识,你可以点…"}, {"id": "6971024316670410766", "title": "[译]5个 CSS 避坑实践", "desc": "文章来自 Medium 的一篇文章哦，原文地址： https://betterprogramming.pub/5-css-practices-to-avoid-as-a-web-developer-1"}, {"id": "6844903669737979911", "title": "网站性能优化", "desc": "浏览器默认的缓存是放在内存内的，内存里的缓存会因为进程的结束或者说浏览器的关闭而被清除，而存在硬盘里的缓存才能够被长期保留下去。很多时候，我们在network面板中各请求的size项里，会看到两种不同的状态：from memory cache 和 from disk cache…"}, {"id": "6844903533385351181", "title": "CSS Flexbox详解", "desc": "Flexbox布局（Flexible Box)模块旨在提供一个更加有效的方式制定、调整和分布一个容器里的项目布局，即使他们的大小是未知或者是动态的。简单的理解，就是可以自动调整，计算元素在容器空间中的大小，并进行有效合理的布局。 Flexbox布局中有两个重要的概念：Flex容…"}, {"id": "6989619601965318158", "title": "【一天一个知识点】之@import和link引入样式的区别", "desc": "从兼容性来看 @import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。 从加载顺序来看 加载页面时，link标签引入的 CSS 被"}, {"id": "6945359576178884615", "title": "BFC （块级格式化上下文）详解", "desc": "对于相对定位(relative positioning)，position: relative，盒偏移位置由top、bottom、left、right属性定义。即使有偏移，仍然保留原有的位置，其它常规流不能占用这个位置。 1、内部的Box会在垂直方向，一个接一个地放置。（与常规…"}, {"id": "6921165527284973582", "title": "CSS定位与CSS动画", "desc": "$\\quad$ 布局是指的屏幕平面上的，定位是垂直于屏幕的。一个div的分层： static-默认值，呆在文档流中。 relative-相对定位，升起来但是不脱离文档流。可以配合z-index配置层叠样式，z-index默认值为auto用于不创建层叠上下文，可设置为... -2…"}, {"id": "6844904067358031885", "title": "动手练一练，用纯 CSS 制作一款侧滑显示留言面板的网页组件", "desc": "大家好，不知道你们是否和我一样存在这样的困惑呢，虽然css入门容易，但是其内容太多，好多属性看了似是而非，觉得自己看懂了，到自己用的时候又很犯难了，看到漂亮的效果还是无从下手，这主要还是自己对新属性实践太少了，不能进行灵活应用，CSS总让一些人找不到感觉。其实学好CSS真的没有…"}, {"id": "6844903860771749895", "title": "【前端帮帮忙】第9期 你可能不知道的CSS隐藏页面元素的方法", "desc": "1. opacity 2. visibility 3. display 是真正意义上的隐藏元素。 4. hidden HTML5新增的hidden属性，可以直接隐藏元素。 跟display表现一致。 5. position 6. clip-path 通过裁剪元素来实现隐藏。 7…"}, {"id": "6844903815586529294", "title": "CSS 你到底有多少长度单位？", "desc": "em 和 rem 是配合 flexible 方案非常火的一种相对单位， 虽然该方案已经凉了，但依然是当前兼容性最好的可伸缩布局方案。 两者的差别只是 rem 总是以根节点 (html) 的字体大小作为参考，你看命名 rem 就是 root em，而 em 则以当前元素的字体大小…"}, {"id": "6844903570056151047", "title": "CSS攻击：记录用户密码", "desc": "简单的CSS代码，甚至不符合图灵完备的语言，但是也能成为一些攻击者的工具，下面简单介绍一下如何使用CSS去记录用户的密码。但是这些CSS脚本会出现在第三方CSS库中，所以使用第三方CSS库也需要谨慎，确保代码安全。 input[type=\"password\"]是css选择器，作…"}, {"id": "6976902085690261518", "title": "Sass 进阶", "desc": "Sass 的控制命令 @if @if 指令是一个 SassScript，它可以根据条件来处理样式块，如果条件为 true 返回一个样式块，反之 false 返回另一个样式块。在 Sass 中除了 @i"}, {"id": "6844903597566754830", "title": "canvas打造QQ空间低俗广告", "desc": "在QQ空间中，我们最近经常可以看到某州学院的广告，当你滑下去时，会有一个圆形蒙版出现，并且会随着手指的滑动而变大或者变小。 这里的主要实现是利用canvas的2D绘图能力，会主要讲解drawImage与clip两个API的作用与原理。 ​ 在网上有很多的canvas的基础教程，…"}, {"id": "6979764300445401119", "title": "关于Sass实践尝试", "desc": "关于Sass实践尝试 最近项目引入Sass，并且对部分css进行了改进优化。Sass的语法学习使用是相对容易，但是结合实战，不同用法要适用于不同的场景，达到提高效率的目的才是关键。这篇文章对Sass使"}, {"id": "6844903958838771725", "title": "[译]跟着例子学 BEM 命名约定", "desc": "BEM（是 Block-Element-Modifier 的简写形式）是一个 CSS 类名的命名标准。现在已被广泛使用，用来编写易于阅读、理解和扩展的 CSS 代码。 块（Block）：组件的最外层的祖先元素定义为块。 元素（Element）：组件内部中的后代元素，可能是一个可…"}, {"id": "6844903647902433293", "title": "1分钟解读使用css-border制作小三角", "desc": "总所周知，元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。 CSS border 属性允许规定元素边框的样式、宽度和颜色。 此文为一个初入前端的小“码农”所写，若有不对的地方，请大家指正。"}, {"id": "6904601686825369607", "title": "CSS世界中一些冷门知识", "desc": "最近看到一篇css的文章，有关css的一些常用但容易被忽略的知识，把一些个人觉得有用，但是自己平常工作中忽略的记录下来，以便下次使用清除浮动inline-table内联表格特性取消textarea的自"}, {"id": "6844904000484016136", "title": "CSS 技巧篇(十)：1px边框解决方案", "desc": "随着移动端的web项目越来越多，设计师的要求也越来越高。在移动端上通过1px实现一条1像素的线时，它并不是真正的1像素，比真正的1像素要粗一点。 那么为什么会产生这个问题呢？主要是跟一个东西有关，DPR(devicePixelRatio) 设备像素比，它是默认缩放为100%的情…"}, {"id": "6844903613253287949", "title": "编写可维护的JS", "desc": "0. 写在前面 本文主要是《编写可维护的JS》的读书笔记，会结合我自己的工作经验，谈一谈如何写出易于维护的JS。作者写这本书的时候（大概2012-2013年）ES6还没出来，考虑到当前MV*时代下，大家几乎都在写ES6，所以本文会针对ES6作特别说明（原书内容针对ES5）。原书…"}, {"id": "6909646228301021191", "title": "transition过渡动画的自述", "desc": "Hi,大家好！我是transition，经常有小伙伴把我和隔壁animation搞混，下面我就好好的介绍一下自己，让大家能明白我到底是干啥的。 transition-property:需要参与过渡的属性，例如：width、height、background... 这里就是应用过…"}, {"id": "6932648467617710094", "title": "CSS弹性布局FLEX,媒体查询,移动端点击事件", "desc": "定义：Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。 主轴的开始位置（与边框的交叉点）叫做main…"}, {"id": "6987024470410002469", "title": "CSS 属性书写顺序(代码规范)", "desc": "建议遵循一下顺序: 1,布局定位属性:display/position/float/clear/visibility/overflow(建议display第一个写，毕竟关系到模式) 2,自身属性:wi"}, {"id": "6844903669922545671", "title": "React项目样式管理规范", "desc": "总结实际开发中的经验，形成一套基于React的前端项目中的样式管理规范，传统样式管理规范与新思想的结合。"}, {"id": "6844903832518934542", "title": "（10）让“盒子”动起来：① 浮动 | CSS", "desc": "前言： 前 10 篇文章，我们基本上都是在用“理论”学习“理论”，那从这篇开始，我们试着用“实践”来学习理论，然后又用于实践。 假设我们需要有个东西，然后它的排版不是依照盒模型的定义——从上往下依次排列，而是从左到右这种结构，那么我们需要考虑到使用“浮动”。 例如一个网站的头部…"}, {"id": "6844903505824579598", "title": "HTML5 拖放实现", "desc": "对于拖拽我们并不陌生，尤其是在 HTML5 支持拖拽后，让这一切变的更加容易了。本文旨在探讨 H5 拖拽方案、实现步骤，以及相关原理。"}, {"id": "6995545451596349448", "title": "【JavaWeb基础 · CSS选择器】", "desc": "“这是我参与8月更文挑战的第12天，活动详情查看： 8月更文挑战” 我们常在CSS中使用选择器来选择HTMl元素用以添加样式。那CSS都有什么选择器呢？下面我们就来依次学习一下这些选择器，分别为：元素"}, {"id": "6844903689912598535", "title": "显微镜下的webpack4入门", "desc": "前端的构建打包工具很多，比如grunt，gulp。相信这两者大家应该是耳熟能详的，上手相对简单，而且所需手敲的代码都是比较简单的。然后webpack的出现，让这两者打包工具都有点失宠了。webpack比起前两者打包工具，对于前端程序员JS编程能力的要求还是挺高的。不过需要兼容i…"}, {"id": "6911689122759475208", "title": "使用 CSS 提升页面渲染速度", "desc": "用户喜欢流畅的 Web 应用体验。他们希望页面可以快速加载并且平稳运行。如果用户在浏览网站过程中出现断断续续的动画或延迟，那么他们极有可能离开该网站。作为开发人员，你可以在改善用户体验上做很多事情。本文将重点介绍 4 个可以提升页面渲染速度的 CSS 技巧。 1. Conten…"}, {"id": "6844903669725413383", "title": "关于最近开发小程序中踩过的那些坑", "desc": "作为一个二流前端也有段时间了，每天沉溺于项目功能代码很多积累到最后只成了模糊的印象。 很不巧，我这个人记性不太好。 不过有句话是这么说的，好记性不如烂笔头，在这个年代当然不需要烂笔头了，但道理是一样的，得有个地方做积累与沉淀，无论是以后翻看还是分享都是可以拿出手的。 废话说够了…"}, {"id": "6844903811299950605", "title": "纯CSS实现瀑布流，你会吗？", "desc": "又来做标题党水文章了，前段时间在写在线便利贴的时候想做瀑布流，在查找网上的各种方法后，发现要么是用js来实现，要么就需要对瀑布进行分列包裹，我想找一种最简单的方法，只需要CSS而且不需要分列就可以轻松实现瀑布流。经过我的仔细查找，终于被我发现了。 在MDN上是这样解释colum…"}, {"id": "6911940153456099341", "title": "CSS必知|重点属性background|实践技巧|温故知新", "desc": "学海无涯，不要沉浸在知识的海洋里，迷失自己。要知道自己想要什么，抓住重点，不忘初心。这个世界上百分之20的人，掌握着百分之80的财富。接下来一系列教程，就带领大家抓住重点，一起做那百分之20的人。往期"}, {"id": "6920034280903016455", "title": "CSS水平&&垂直居中", "desc": "总是在网上看到一种流行的说法，单行垂直居中要将高度和行高设置成相同的值，但高度其实没必要设置。实际上，文本本身就在一行中居中显示。在不设置高度的情况下，行高可以撑开高度 通过为table-cell元素设置vertical-align:middle，可使其子元素均实现垂直居中。这…"}, {"id": "6907103414411051016", "title": "前端自适应解决方案", "desc": "高度尽量用em或者不转换高度，可以避免高度错位的问题。"}, {"id": "6972194878159585316", "title": "SCSS的简单入门", "desc": "昨天讲了一篇less的简单入门，链接在此，今天趁热打铁，继续把scss也一起写了，方便对比，巩固印象。 介绍 scss和less一样，也是一"}, {"id": "6844903593640755214", "title": "【基础】EM 还是 REM？这是一个问题！", "desc": "应用象EM 和 REM这种相对长度单位进行页面排版是WEB开发中的最佳实践。在页面排版中较好应用EM 和 REM，根据设备尺寸缩放显示元素的大小。这就使得组件在不同设备上都达到最佳的显示效果成为可能。 但问题是究竟该用 EM 还是 REM 呢？关于这个问题一直存在比较大的争议。…"}, {"id": "6908334872176263176", "title": "CSS的行内样式与内联样式，看完就会了", "desc": "行内样式，其实从它的名字就可以看出来它的特点，就是直接在 HTML 标签中使用 style 属性设置 CSS 样式。例如像下面这样的： 要记得用在每个样式声明之间使用分号 ; 分隔哟，否则样式会失效的。 例如下面这段代码，通过 CSS 行内样式，将第一个段落中的字体设置成了 2…"}, {"id": "6847009773351600135", "title": "【🙄🙄🙄】傻傻分不清css长度的(百分比|负值)基准是谁", "desc": "敲黑板： 老规矩，本文所有示例均为手打html示例，可以直接选中示例在控制台调试，欢迎👏 并且建议验证各种想法。手敲不易，如果你觉得收获了新知识，那我在此求个赞～ 当元素的height、width设置为百分比时，分别基于包含它的块级对象的高度、宽度。这个是常规百分比的含义。 …"}, {"id": "6844903789023985672", "title": "CSS3 动画解析", "desc": "1. 含义 CSS3 的 animation 是通过关键帧的形式做出来的。使用时常结合 transform 属性进行制作。 1. timing-function 属性"}, {"id": "6844903506059477000", "title": "浏览器渲染流程 详细分析", "desc": "十分详细 但是要全部弄明白 还要看好多东西 慢慢理解"}, {"id": "6900082726687375368", "title": "纯CSS实现Tip提示", "desc": "面试的时候面试官问到这个问题，回答的不太满意。 内容在链接上方，圆角，有个小箭头指向链接，位置和内容左对齐。类似百度百科的效果。 由于position:absolute是根据上一个非static定位的元素。所以需要设定.tip元素为position:relative，这个设定并…"}, {"id": "6844904115391184904", "title": "4月4日网站变灰实录", "desc": "效率和兼容可能会有很大程度上的冲突，但出发点都是对抗击新冠肺炎疫情斗争而牺牲的烈士和逝世同胞寄托哀思。"}, {"id": "6844903920758702093", "title": "触屏设备 :hover 兼容处理", "desc": "经过测试，在触屏设备上，元素被 touch 后，进入 :hover 状态切不会退出 hover 状态，需要等待其他元素被 touch 后才会再次退出，根据参考资料了解到 媒体查询 的 hover 和 pointer 判断条件可以用来解决此问题。"}, {"id": "6917267782044221448", "title": "响应式开发基础", "desc": "掌握了pc端和移动端的布局，面对一些不太复杂的页面，我们想让它在pc端显示又能在移动端显示，这就需要一个响应式的开发。同一个网页，根据浏览设备的不同，屏幕尺寸不同，显示不同样式，尽可能显示全部内容，做到不论那个屏幕大小，都能正常显示。 注意：媒询中的横竖屏检测，是根据可视区宽高…"}, {"id": "6844903583855427597", "title": "[译] 开始使用新的 CSS Typed Object Model", "desc": "0. 前言 现在，CSS 拥有一个适当的基于对象的 API 来处理 JavaScript 中的值。 1. 介绍 这些年 CSS 一直有对象模型（CSSOM）。事实上，每当你在 JavaScript 中读/写 .style 时，你都在使用它： 作为 Houdini 工作的一部分，…"}, {"id": "6844903941721817095", "title": "Flex布局笔记-基础部分", "desc": "重学一遍做做笔记，避免每次反复查。 部分图用的是参考链接里面的图或者他修改过的。原谅我懒。 如1.1的图flex布局分为主轴和交叉轴，主轴和交叉轴垂直。 注意⚠️：这个主轴的方向是由flex-direction 决定的，如果值是row 或者row-reverse那么横向是主轴，…"}, {"id": "6844904088178524167", "title": "[译] 理解 CSS 网格布局：创建一个网格容器", "desc": "本系列介绍 CSS 网格布局，分三篇发布。本篇是这个系列的第一篇。 使用 display: grid 或 display: inline-grid 创建网格容器。 使用 grid-template-columns 和 grid-template-rows 设置行和列。 使用 g…"}, {"id": "6844903825988386823", "title": "（06）CSS 给文本加样式：② 文本属性 | CSS", "desc": "前言： 作为上一篇《（05）CSS 给文本加样式：① 字体属性 | CSS》的兄弟文章，我们继续逐一学习“文本属性”怎样给文本加样式的。 大整形：把文本放在最和谐、最养眼的位置——文本布局。 这个就类似于我们用的 Office 的 Word 里：首行缩进、左对齐、右对齐、居中、…"}, {"id": "6911967446232465415", "title": "你必须知道的CSS盒模型", "desc": "盒子模型是html+css中最核心的基础知识，理解了这个重要的概念才能更好的排版，进行页面布局。下面是自己积累和总结的关于css盒子模型的知识^_^，希望对初学者有用。 CSS css盒子模型 又称框模型 (Box Model) ，包含了元素内容（content）、内边距（pa…"}, {"id": "6844903926731390984", "title": "知识体系整理之CSS篇", "desc": "CSS Hack就是针对不同的浏览器或不同版本浏览器写特定的CSS样式达到让浏览器兼容的过程。 CSS Hack常见的有三种形式：CSS属性Hack、CSS选择符Hack以及IE条件注释Hack。 问题症状：常用标签，不加样式控制的情况下，各自的margin、padding差异…"}, {"id": "6844903934939791374", "title": "CSS 属性篇(十)：filter、mix-blend-mode、background-blend-mode区别", "desc": "应用场景：filter CSS属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染。 应用场景：mix-blend-mode CSS 属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。 应用场景：background-blend-…"}, {"id": "6914083668273135629", "title": "在浏览器实时编辑css 查看效果最便捷方式", "desc": "虽然现在热更新很快了（Go Live 插件、或者nodejs 插件），但延迟还是有的。 想要更快的调试css 代码的样式，用浏览器自带的功能是最方便的。 这里并不是指 （chrome 浏览器下）在 Elements 控制台下更改 Styles 下的样式，这样写太慢了，只能一句一…"}, {"id": "6844903560484765703", "title": "【英】学习 CSS 网格布局的必备网站", "desc": "OMG 是一个汇集了 CSS 网格布局相关文章、视频、教程的学习网站，帮助你系统学习网格布局。"}, {"id": "6985050488941051918", "title": "背景固定", "desc": "background-attachment属性 决定背景图像的位置是在是口内固定，或者随着包含它的区块滚动。 background-attachment : scroll |fixed | local"}, {"id": "6906760387841458184", "title": "box-shadow 总结归纳", "desc": "第一,第二个参数是偏移值.阴影默认被元素覆盖. 大于0时,模糊阴影并且扩散. 小于0时,阴影消失. 阴影与外边距默认颜色是继承color色. 默认位置是元素当前位置,被元素覆盖. 默认和元素大小相同. 只有大于0时,会出现. 第四个参数在内部使用会与x,y轴偏移冲突. 建议单独…"}, {"id": "6844903682044084237", "title": "[译] 探索 SMACSS：可扩展的模块化 CSS 框架", "desc": "当我们在从事大项目或团队开发工作时，我们经常会发现我们写的代码，凌乱、难以阅读并且难以扩展。尤其是当一段时候后我们回头再看自己的代码，必须回想起当初自己写的时候的思路才能看懂。 因此，人们创建了许多 CSS 框架来对 CSS 代码进行样式化，使其更具可读性。比如说，SMACSS…"}, {"id": "6966245910351347749", "title": "css实现一个div垂直居中的4中常用方法", "desc": "1.利用flex布局 以下几个方法都为根据绝对定位来实现 2.可以设置margin值为当前子元素的一半的负值 3.把div的top left right bottom 都设置0 4.子元素的宽高未知可"}, {"id": "6844903513110085639", "title": "stylelint 搭配 stylelint-order，更随心所欲的编码 CSS", "desc": "为什么需要校验 CSS 规则？ 团队协作在 CSS 书写遇到的哪些问题？ CSS 哪些东西需要校验？ 怎么校验 CSS 规则？ 通过 stylelint 校验 CSS 规则，简单配置教程。"}, {"id": "6844903507036733447", "title": "从Chrome源码看浏览器如何加载资源", "desc": "通过源码可以找到答案。此次源码解读基于Chromium 64（10月28日更新的源码）。 下面通过加载资源的步骤，依次说明。 1. 开始加载 还有动态请求ajax属于Raw类型。因为ajax可以请求多种资源。 MainResource包括location即导航输入地址得到的页面…"}, {"id": "6972885030024511525", "title": "css揭秘 - 字体排印（一）", "desc": "这是css揭秘系列文章的第六篇，本篇主要介绍使用css可以实现的字体排印。包括连字符断行、插入换行、文本行的斑马条纹以及调整tab的宽度。"}, {"id": "6923574056252473352", "title": "CSS学习笔记【Flex布局】", "desc": "开启 flex 布局使用display: flex属性。 flex 布局有主轴和交叉轴，分别使用justify-content和align-items &#x26;&#x26; align-content控制对齐方式。 支持按行或列进行排列，使用flex-direction，另…"}, {"id": "6844903705330843656", "title": "关于做常规的数字定时滚动效果", "desc": "目前项目团队在做一个接受到的数字要做成实现数字滚动效果在轮询的基础上做的就是上一个数字到目前最新的数字的变化我想到的就是用使用setTimeout定时器,敬请读到文章结尾再提出自己的意见，前面都是不完"}, {"id": "6844904063654428679", "title": "解决ios中定位fixed的导航下滑时消失的问题", "desc": "今天在开发过程中遇到了一个定位为fixed的导航，在ios设备中下滑消失的问题。这个导航的需求是始终悬浮在页面最顶端，不管页面怎么滑动都不变。 上面的代码，在正常情况下是可以满足需求的，但是在iOS中，当下拉刷新时，可能是因为在iOS中fixed的内容是相对于窗口的，而不是相对…"}, {"id": "6899252050069684231", "title": "CSS小尺寸图片的背景自适应", "desc": "笔者最近面试就遇到这么个问题，需要把一个750×750的图片全铺开做一个官网大屏幕，显得高端霸气上档次些。但是纵观笔者的经验，对于类似的门户官网这类背景图往往都会按照一般的大尺寸和缩放比来做，没怎么见过这类小尺寸的750*750。好了，先打消疑惑先来试试： 并且随着窗口缩放背景…"}, {"id": "6941355126191816711", "title": "CSS 格式化上下文（BFC，IFC，FFC和GFC）基本介绍", "desc": "Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。 不同类型的 Box， 会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内…"}, {"id": "6844903895924211720", "title": "圣杯和双飞翼", "desc": "圣杯布局和双飞翼布局都是实现三栏布局的方法，左右定宽，中间自适应。与普通的三栏布局不同的是，这两种方式将main元素放在侧边栏的前面，以达到优先渲染的目，只是实现的方式略有不同。 下面以一个左边栏100px，右边栏120px的布局来说明。 此时，main占据一整行，left、r…"}, {"id": "6906759737284100110", "title": "CSS揭秘-自定义下划线", "desc": "其实目前是有现成的css属性去直接定义下划线的样式的，只不过对浏览性的兼容性相当的糟糕，相信未来在定义下划线的样式时，不需要在用这些类似hack的方法。当然目前这个阶段还是希望这个hack的方法对大家有所帮助~ 同时我也罗列出相关新的属性以及其兼容性"}, {"id": "6844903700767457294", "title": "国际化 - 通用 LTR/RTL 布局解决方案", "desc": "中东地区，有很多国家，诸如像阿拉伯语、希伯来语，他们的阅读习惯却是从右到左的，恰好跟我们是相反的，所以本文探究的是在假定语言文案，图片等信息正确的情况下，如何使用一套代码，不仅可以支持像英文，中文等 LTR 布局的网站，也可以支持像阿拉伯，希伯来语等 RTL 布局的网站。"}, {"id": "6960473811699367966", "title": "14.vertical-align垂直对齐", "desc": "一.vertical-align属性 官方文档的翻译：vertical-align会影响 行内级元素 在一个 行盒 中垂直方向的位置 思考：一个div没有设置高度的时候，会不会有高度？ 没有内容，没有"}, {"id": "6844903773517643783", "title": "CSS中关于定位及BFC中的易错点", "desc": "说起BFC，就必须先了解一下CSS文档流中的定位机制，而且这部分说简单也简单，但却有个坑有可能误导我们，特在本文作出解释。 1. 三种基本方式 浮动：浮动脱离普通流，可以左右移动，直到它的外边框边缘碰到包含框或另一个浮动框的边缘，触发方式基本就是float:left/top等。…"}, {"id": "6844903742383325192", "title": "探究 CSS 混合模式\\滤镜导致 CSS 3D 失效问题", "desc": "嗯，大概到了这个效果，想到了 CSS 混合模式 mix-blend-mode，寻思着，利用混合模式，是否能让效果更上一层楼或者碰撞出一些其他火花。 然而，给元素加上了一个混合模式之后，神奇的事情发生了，3D 效果消失了。 效果从 CSS 3D 变成了 2D。 这就很蹊跷了，预想…"}, {"id": "6844903953251975176", "title": "CSS之过渡transition", "desc": "CSS的过渡属性transition可以仅通过CSS来实现简单的动画效果，同时它是一个简写属性，由transition-property、transition-duration、transition-timing-function和transition-delay复合而成。 t…"}, {"id": "6844903862847946760", "title": "Web技巧（09）", "desc": "这一期中我们主要来聊聊全屏的事情。对于全屏的布局，大家可能首先想到的是100%（或100vw）来实现，但如果你要在一个限宽的容器中实现一个全屏效果呢？比如说，一个Banner区全屏显示。类似这样的效果在PC端是非常常见的一个效果。可能会有很多同学会说，这样的效果有什么好聊的，不…"}, {"id": "6844903850353115143", "title": "移动端前端适配方案", "desc": "meida queries 的方式可以说是我早期采用的布局方式，它主要是通过查询设备的宽度来执行不同的 css 代码，最终达到界面的配置。核心语法是： media query可以做到设备像素比的判断，方法简单，成本低，特别是对移动和PC维护同一套代码的时候。目前像Bootstr…"}, {"id": "6844903910935625736", "title": "原子设计理论 UI案例详解", "desc": "每当你做设计规范时候有没有很苦恼，如何才能把界面所需样式覆盖完，如何在多平台，多系统之间采用一致的语言而不会影响体验，如何保证多系统品牌调性一致，国外一个网页设计师 Brad Frost ，写了一本书 Atomic Design ，这本书是关于如何构建套设计系统方法论的著作，今…"}, {"id": "6921253238264365063", "title": "CSS 定位", "desc": "布局是屏幕平面上的，定位是垂直于屏幕的。 首先讲一下CSS垂直方向的分层。以一个div的分层为例： 由分层的图片可看出，背景background的范围是 border 的外沿。并且浮动元素脱离了文档流。 属性 position 就是规定 css 垂直于屏幕的位置。 sticky…"}, {"id": "6844903592818638855", "title": "深入理解-CSS内联元素之font-size", "desc": "这里面涉及到浏览器的影响，字体的设计等方面的知识。尤其是字体设计是一门高深的学问，而我们只是为了开发网页中控制文字大小和对齐，所以这里我们只取我们需要的部分，下面先介绍字体概念。 我们先来了解文字的各个概念。图看起来更直观，所以我简单画了个图。 对照着图，可以看出基线是位于字母…"}, {"id": "6844903941755551758", "title": "为什么z-index不好使了？记录一下我对层叠上下文的理解", "desc": "翻译过来就是： 层叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向（电脑屏幕的）视窗或者网页的用户的z轴上延伸，HTML元素依据其自身属性按照优先级顺序占用层叠上下文的空间。"}, {"id": "6923040855981260807", "title": "CSS：弹性布局", "desc": "采用 Flex 布局的元素，称为 Flex 容器（flex container），简称容器。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称项目。 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。 or…"}, {"id": "6844903920821600270", "title": "Css - background 终极探究", "desc": "作为程序员，技术的落实与巩固是必要的，因此想到写个系列，名为 why what or how 每篇文章试图解释清楚一个问题。 背景，作为 css 中的老牌属性，相信大家并不陌生，相关属性有的也不少，希望大家在看这篇文章时，先放下对背景的固有印象，跟着下面的思路来深入的了解下浏览…"}, {"id": "6844903758334263303", "title": "CSS 动作路径标准 Motion Path 简介", "desc": "动画。然而，要想让动画对象沿着一条路径进行移动，还是有一些难点的。CSS Motion Path 标准的出现，让开发者能够给动画对象定义一条动画路径，配合 keyframe 等操作，轻松实现让一个物体沿着一条路径进行动画。 Motion Path Level 1 从 2015 …"}, {"id": "6844903870213128206", "title": "CSS进阶（9）—— 那些年骗过你的float和“清浮动”", "desc": "在深入了解float之前，相信大家都听过一个传说，就是float被设计出来的目的是为了实现文字环绕图片的效果，可能是初学的时候忘了，还是受了“清浮动”的毒，我自己都忘了有没有用float去实现过这个效果。因此下面我们先来实现一下float的设计初衷，文字环绕图片效果。 非常简单…"}, {"id": "6844903586770452487", "title": "网页响应超简单：有CSS变量我怕谁", "desc": "如果你未曾听说过CSS变量，那么我告诉你，它就是CSS的一种新功能，可以让你拥有在样式表中使用变量的能力，这样做时并不需要什么特别的设置呦。"}, {"id": "6844903656614002702", "title": "深入浅出grid布局", "desc": "注意, 因为 grid 标准还在修订中, 以下内容可能会随着标准的改变而过时(比如据说之后的标准可能会将 grid-row-gap 和 grid-column-gap 改为 row-gap 和 column-gap, 以便与 column 布局统一), 当然我也会尽量及时修正.…"}, {"id": "6935797395875692574", "title": "CSS知识总结", "desc": "CSS概述CSS发明者李爵士的同事赖先生CSS特点：层叠样式层叠选择器层叠文件层叠劣势：极度灵活带来的隐患CSS版本最广泛的版本（IE支持）CSS2.1最新版本CSS3CSS文档流什么是文档流指的ht"}, {"id": "6844903496332869639", "title": "基于web创建逼真的3D图形 | CSS技巧", "desc": "在成为一名web开发者之前，我从事于视觉设计行业，创造屡获殊荣，电影和电视节目等高端3D效果，例如 Tron, The Thing, Resident Evil,和 Vikings."}, {"id": "6844903500992741390", "title": "前端代码规范 及 最佳实践 | Isobar", "desc": "本文档包含了Isobar公司的创意技术部（前端工程）开发web应用的规范。现在我们把它开放给任何希望了解我们迭代过程最佳实践的人。"}, {"id": "6844903641808109576", "title": "关于webpack优化，你需要知道的事（上篇）", "desc": "webpack 是一个优秀的打包工具，其本身为我们做了大量优化，同时也为我们提供了大量的配置项让我们可以自定义，从而有优化空间。 下面我先讲讲vue脚手架为我们做的一些优化，不喜欢看的请跳过，然后会讲如何在优化的基础上升华一下，内容从浅到深，但是所有的方法都经过楼主考证，内容较…"}, {"id": "6844903550460362765", "title": "display的32种写法", "desc": "你知道『回』字有四种写法，但你知道display有32种写法吗？今天我们一一道来，让你一次性完全掌握display，从此再也不用对它发愁。"}, {"id": "6844903602016747527", "title": "【基础】CSS实现多重边框的5种方式", "desc": "目前最优雅地实现多重边框的方案是利用CSS3 的 box-shadow属性，但如果要兼容老的浏览器，则需要选择其它的方案。本文简要地列举了几种多重边框的实现方案，大家可以根据项目实际及兼容性要求等情况，选择最适合的实现方案。 方案1利用描边(outline)属性结合border…"}, {"id": "6844904154834403335", "title": "100天学习前端计划 DAY 0 | CSS基础", "desc": "学习是件有意思的事 & 持续的积累。 本狸之前是做过产品啦，现在想学一学前端，实现一些自己的想法（虽然有在做，但很慢啦，因为自己缺乏一个系统性的学习，老是返工）。之前的学习进度也有点缓慢，缺乏自我的督促！因此做了这样一个几乎可以是说从0开始学前端的计划的100天计划。希望每天记…"}, {"id": "6844903598652932110", "title": "Service Worker实现浏览器端页面渲染或CSS,JS编译", "desc": "这篇文章发布于 2018年04月24日，星期二，22:49，归类于 js实例。 阅读 1362 次, 今日 80 次 by zhangxinxu from http://www.zhangxinxu.com/wordpress/?p=7488 本文可全文转载，但需要保…"}, {"id": "6844903842719465486", "title": "Grid布局简介", "desc": "Grid 布局是网站设计的基础，CSS Grid 是创建网格布局最强大和最简单的工具。 轻松使用 Grid 布局提高开发效率，对复杂的网页结构布局更加灵活。 Grid 将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。网格是一组相交的水平线和垂直线，它定义了网…"}, {"id": "6914081709960986632", "title": "CSS 使用技巧例子，理解样式之间的配合，缩短 tabs 组件线条宽度", "desc": "css 样式很多，相互之间配合起来其实能完成很不错的效果，也能减少很多JavaScript 代码。因为对样式理解少从而造成的 JavsScript 脚本 增多是得不偿失的。 之前我们UI 设计过一个 tab 切换的效果，主体样式和 vue 组件库 iview，elementui…"}, {"id": "6844903651668918280", "title": "神奇的选择器 :focus-within", "desc": "CSS 的伪类选择器和伪元素选择器，让 CSS 有了更为强大的功能。 伪类大家听的多了，伪元素可能听到的不是那么频繁，其实 CSS 对这两个是有区分的。 有个错误有必要每次讲到伪类都提一下，有时你会发现伪类元素使用了两个冒号 (::) 而不是一个冒号 (:)，这是 CSS3 规…"}, {"id": "6844903564691636237", "title": "每周一点canvas动画---《支付宝拖动选择》", "desc": "效果源码终于到年底了，再过两天我也要回家过年了，想想就激动呢！今天给大家带来一个基于移动端的canvas价格选择效果，设计给的效果是这样的。主要功能就是拖动标尺变动价格。而且支付宝和京东金融的里也有这"}, {"id": "6976491539719520263", "title": "「HTML+CSS」--自定义加载动画【032】", "desc": "这是我参与更文挑战的第10天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为96px 相对定位 背景色：紫色 效果"}, {"id": "6844903554176516109", "title": "一不小心发现掘金小彩蛋", "desc": "我用一个简单粗暴的方法模拟，两个css3 动画顺序播放。"}, {"id": "6914934323976077326", "title": "CSS之高性能代码与优化", "desc": "当某些值相互依赖时，应该把它们的相互关系用代码表达出来。 比如line-height写倍数、font-size写百分比更利于维护。 p 标签的边框会直接获取到 color 的颜色。 这 2 者的差距在后者如果在添加background-image之类的属性就会导致不一样的效果。…"}, {"id": "6844903505233182728", "title": "为Angular 4开发的UI组件库：FreeNG", "desc": "FreeNG是一款基于Angular 4的UI框架，提供了诸多强大的可以重新组合的UI组件，可以让你在项目开发中以搭积木的方式来快速高效的实现业务需求。 FreeNG最新版本为v0.4.0，其中包含了按钮、表单、选择器、表格、模态框、编辑器、图表、自定义滚动条等40多种组件，未…"}, {"id": "6917175440486449166", "title": "vue+css 利用transform属性实现圆环效果（一）", "desc": "搞着搞着，遇到的问题越来越多，这可是超出预期了呀！但是，都已经这样了，更不能半途而废，于是，就有了这篇文章，记录一下。 预计的浏览器兼容情况：Chrome、FF不用说了，IE就是只兼容9以上的。 思路挺简单的，就是利用css的transform: rotate()属性来完成，当…"}, {"id": "6905714270256922631", "title": "什么是BFC---笔记", "desc": "在解释什么是BFC之前，我们需要先知道Box、Formatting Context的概念。 1.利用BFC避免margin重叠。 每个盒子的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC的区…"}, {"id": "6844903545573998606", "title": " css网页的几种布局", "desc": "2018年已经过了一周，总结一下2017年在公司wiki上写的一篇关于css布局的知识，当时也借鉴了几个大神写的css布局知识，和自己在项目中遇到的坑。废话不多说。请看以下的干货。 第一种实现方式通过负边距与浮动 实现左边固定，右边自适应的布局。 1. 自适应的容器需要容器包裹…"}, {"id": "6844903543619452941", "title": "移动端前端适配方案对比", "desc": "首先说说到目前位置出现的一些关于移动端适配的技术方案： 通过媒体查询的方式即CSS3的meida queries 以天猫首页为代表的 flex 弹性布局 以淘宝首页为代表的 rem+viewport缩放 rem 方式 …"}, {"id": "6844903552578486285", "title": "再聊移动端页面的适配", "desc": "前端圈真乱，这话一点不假。但乱也乱的好处，乱则生变，有变化才有进步。今天还是老调重谈，聊聊移动端页面的适配。因为对于一枚前端而言，天天和页面打交道（H5页面），那么布局的活总是少不了，这也将面临不同终端的适配问题。不知道你是否和我一样，页面布局总是或多或少会有一些蛋疼的事情发生…"}, {"id": "6844903565115277320", "title": "[译] 使用 SVG 符号和 CSS 变量实现多彩图标", "desc": "使用图片和 CSS 精灵制作 web 图标的日子一去不复返了。随着 web 字体的爆发，图标字体已经成为在你的 web 项目中显示图标的第一解决方案。 字体是矢量，所以你无须担心分辨率的问题。他们和文本一样因为拥有 CSS 属性，那就意味着，你完全可以应用 size 、 col…"}, {"id": "6844903495905050637", "title": "面對 iPhone X，Web 設計師需要知道的幾個 CSS 屬性", "desc": "写前端怎么搞定刘海～"}, {"id": "6923586188142100494", "title": "CSS属性之aspect-ratio", "desc": "根据最新的浏览器chrom88稳定版发布的信息看到，已经完全支持aspect-ratio了，那我们就来实践一下以及了解它的应用场景。1.了解下aspectratioaspectratio翻译为中文就是"}, {"id": "6905176445199319053", "title": "盒模型精要", "desc": "padding,border,margin边框,就是环绕在标签宽度和高度周围的线条内外边距的四条边的宽度都叫做边框宽度,这跟矩形的宽高的宽不一样嗷,这一点要注意通过设置外边框能得到三角形!创意十足服气"}, {"id": "6844904047825125390", "title": "CSS 选择器 小结", "desc": "浏览器通过优先级来判断哪些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。 相信各位写过 CSS 的朋友都知道，CSS 几种常见选择器优先级是：!important > 内联 > ID选择器 > 类选择器 > 标签选择器 > 通…"}, {"id": "6844904143409119245", "title": "重新学习 flex-grow、flex-shrink、flex-basis", "desc": "flex 布局中，flex 设置单、双、三值的时候分别有什么意义。 我发现第三个子项并不是期待的 75px ，这个疑问稍后再讲。 也就是说，双值 第一个 flex-grow ，第二个无单位的话，是 flex-shrink 。 三值的话，分别是 flex-grow | flex-…"}, {"id": "6844903700230569992", "title": "显微镜下的webpack4：路径操作", "desc": "对于打包工具来说，最简单也是最复杂的操作莫过于路径的安排了，原本都在src下的资源，想要打包到dist目录下，但是打包出来的文件路径甚不如人意。明明想要分门别类地放置文件文件，然后却像大杂烩一样js,html，css甚至图片都混在了一起。虽然打包之后运行没什么问题，但是这是要逼…"}, {"id": "6974350011542962190", "title": "css水平垂直居中的几种方法", "desc": "1.小盒子固定宽高(定位方式， 2. 小盒子有固定宽高，但是不清楚是多宽多高（css3中的新属性） 3. 弹性盒子法"}, {"id": "6844903769092685837", "title": "css3 | 浅谈transform变换", "desc": "transform属性向元素应用2D或3D转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。学会transform的使用，才能更好创造出更好的页面效果。 translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。 rotate()方法，在一…"}, {"id": "6901269248056918030", "title": "flex布局与Grid 网格布局", "desc": "flex布局Flex是FlexibleBox的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。Webkit内核的浏览器，必"}, {"id": "6954572108164759565", "title": "《CSS动画知识概述》", "desc": "浏览器的渲染原理。 浏览器渲染的步骤 。 浏览器根据更新的样式进行渲染，达到一种“动画”的视觉效果。 三种更新的方式。 CSS动画两种做法简述。 其他。"}, {"id": "6907528156031221773", "title": "【CSS】CSS布局", "desc": "注意：如果一个元素里只有浮动元素，那它的高度会是0。如果你想要它自适应即包含所有浮动元素，那你需要清除它的子元素。一种方法叫做clearfix，即clear一个不浮动的 ::after 伪元素。"}, {"id": "6844903848012677127", "title": "纯CSS实现表单验证", "desc": "在我们的日常业务中，表单验证是个很常见设计需求，像一些登录注册框，问卷调查也都需要用到表单验证。 一般我们的实现思路都是JS监听input框的输入内容，判断用户输入内容，从而以此来决定下一步的操作。 以上就是我们常规的表达验证了，基本就都是用JS来完成的，那么我们能不能用CSS…"}, {"id": "6855570303280824334", "title": "样式篇 - CSS基础总结", "desc": "1. 行内样式 —— 写在html标签中 2. 内嵌样式 —— 写在style标签中如： 3. 链接样式 —— 使用link标签，如： 4. 导入样式 font-family 通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素设置字体。 font-size …"}, {"id": "6915418274331443208", "title": "重温CSS(01)选择器及权重", "desc": "1. 内联样式（行间样式，行内样式，嵌入式样式、内嵌样式） 内联样式显著的优点是十分的便捷、高效。但是不建议使用,内联样式权重过高,不利于后期维护。可以通常内联 CSS 作为测试使用，可以查找代码中 bug。 2. 外部样式 本质区别：link 属于 html 方式，@impo…"}, {"id": "6844903941260476429", "title": "你真的了解Grid布局吗？", "desc": "1. 行和列 2. 单元格 3. 网格线 用来隔开单元格的交叉线。网格线将每一行、每一列的单元格分割成全封闭的矩形 1. 指定一个Grid容器 fraction 的缩写，意为\"片段\" 。 这里的1fr表示剩余的位置。因为没有别的列占剩余空间。 5. grid-auto-flow…"}, {"id": "6844903651169812494", "title": "盒模型的相关计算及flex布局的不常见规律总结", "desc": "1. content-box与border-box的区别及相关计算 当多个元素分配W/H时，有子元素的可根据其子元素的W/H确定其值（具有优先分配W/H的权力）。且子元素一旦固定，其值也不会变化。"}, {"id": "6989938350211727374", "title": "都2021了，你还在用 jQuery UI？", "desc": "是的，我一直在用。 不论审美如何变化，jQuery UI 中，CSS 里基于状态改变的交互设计都是永恒的经典。"}, {"id": "6979418897061511198", "title": "【实战技巧】CSS自定义属性以及在VUE3中的使用", "desc": "官方称之为自定义属性 ,但我比较习惯叫它变量 ,简单点说就是一种开发者可以自主命名和使用的 CSS 属性."}, {"id": "6984346464025575431", "title": "分享几个 CSS 技巧 - 第二波", "desc": "正所谓「需求」是程序员的第一生产力，正是有了 PM 和 UI 千奇百怪的要求，才会使我们的编程技能（CSS）进一步上升。"}, {"id": "6917905474947907591", "title": "技术周报 · 2020 前端技术发展回顾", "desc": "字节前端技术周报第一期来啦~欢迎持续关注欢迎关注「字节前端ByteFE」简历投递联系邮箱「tech@bytedance.com」"}, {"id": "6844903965788749838", "title": "26个常用易忘CSS小技巧", "desc": "收集于平时常用但易忘的CSS实现方法，如有遗漏或补充，还请指正！解决inline-block元素设置overflow:hidden属性导致相邻行内元素向下偏移超出部分显示省略号css实现不换行、自动换"}, {"id": "6951300894684577823", "title": "使用 Tailwind CSS 一年后，我的一些感受", "desc": "Tailwind CSS 在过去两年的流行程度一直保持一个高速增长的态势，尤其是2020年，更是各大论坛/社区热烈讨论的话题。"}, {"id": "7000666184236400648", "title": "CSS 列表样式", "desc": "在 HTML 中，有序列表和无序列表的符号是用 type 属性来定义的，为了遵循结构和样式分离的原则，应该在 CSS 中定义列表样式。"}, {"id": "6931308590749712392", "title": "元素固定宽高比这么写太香了 - Chrome 支持 aspect-ratio 了", "desc": "去年差不多这个时候，发了一篇关于CSS 固定宽高比实现的文章，总结了如何从面试者的角度回答固定宽高比实现的问题。如果你对于历史的 hack 方式不太熟悉，建议先浏览一下原文章。 原文章的最后提到了 aspect-ratio 这种方式。不过当时还没有浏览器实现，现在标准以及实现都…"}, {"id": "7005450611353190414", "title": "移动端响应式布局", "desc": "移动端响应式布局 移动端 web 和 PC web 的区别 PC端布局 一般采用两种方案，一种是 min-width 限制最小的宽度，浏览器宽度小于 min-width 就直接滚动。另外一种呢，就是留"}, {"id": "6996283319847485477", "title": "折叠导航栏动画", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 折叠导航栏动画：是指当我们点击 关闭按钮 时，导航栏自动折叠，再次 点击按钮 时，导航栏又自动展开的动画效果，这种效果顺畅，简单又自"}, {"id": "7000683010504785950", "title": "CSS 表格样式", "desc": "介绍了表格标题位置（上下两个位置）、表格边框合并（是否合并）、表格边框间距的设置方式，在工程中较为实用。"}, {"id": "7001333383313768485", "title": "HTML+CSS中的3D转换translate/rotate ", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战  3D的特点 近大远小（离我们眼睛越近看上去越大，而离眼睛越远则看上去越小） 物体后面遮挡不可见 根据这些特点我们就可以在网页上模拟构建出"}, {"id": "6844903790970142733", "title": "不可思议的纯 CSS 实现鼠标跟随效果", "desc": "直接进入正题，鼠标跟随，顾名思义，就是元素会跟随着鼠标的移动而作出相应的运动。大概类似于这样： 通常而言，CSS 负责表现，JavaScript 负责行为。而鼠标跟随这种效果属于行为，要实现通常都需要借助 JS。 当然，本文的重点，就是介绍如何在不借助 JS 的情况下使用 CS…"}, {"id": "7001335271048347685", "title": "HTML+CSS利用3D转换translate/rotate 实现旋转木马/翻转盒子/3D导航栏", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战  案例一 实现两个翻转的盒子 案例二 3D导航栏 案例三 旋转木马"}, {"id": "6863028044165038088", "title": "被低估的CSS滤镜：drop-shadow", "desc": "如果你熟悉CSS，则可能了解 box-shadow 属性。但是你知道有一个CSS滤镜 drop-shadow 可以做类似的事情吗？就像 box-shadow 一样，我们可以输入x-offset、y-offset、模糊半径和颜色的值。 与 box-shadow 不同，它不需要 s…"}, {"id": "6988339600645177358", "title": "几分钟让你弄清垂直居中原理！", "desc": "很多人开始接触到文字垂直居中的时候一般都是靠以下两行代码 其实这个概念是很容易误导初学者的，line-height只是使控制文字对齐的元素之一，下面介绍下相关的知识，并解释下为什么仅靠这两行代码并不能"}, {"id": "7006098527805767716", "title": "垂直居中布局", "desc": "垂直居中布局常见的解决方案，以及个人的一些看法，摘要不满足最低50字的要求？呵呵呵呵呵呵呵呵呵呵呵！"}, {"id": "6844903667863126030", "title": "彻底搞懂word-break、word-wrap、white-space", "desc": "white-space、word-break、word-wrap（overflow-wrap）估计是css里最基本却又容易让人迷惑的三个属性了，估计很多人都有把它们搞混或用错的经历。必须系统整理一下，今天我们就把这三个属性彻底搞清楚！ 可以看到，nbsp;和</br>可以正常发…"}, {"id": "7005906064663117837", "title": "CSS知识总结", "desc": "一、浏览器渲染原理概述 1，浏览器的渲染过程 步骤1-根据HTML构建HTML树（DOM） 步骤2-根据CSS构建CSS树（CSSOM） 步骤3-将两棵树合并成一颗渲染树（render tree） 二"}, {"id": "7001869576069873695", "title": "CSS中的十二种结构伪类选择器", "desc": "这是【从头学前端】系列文章的第二十七篇-《CSS中的十二种结构伪类选择器》 本篇文章我们将来学习CSS中的结构伪类选择器，该类选择器包含的内容如下表所示："}, {"id": "7001409580890587172", "title": "CSS动画-调速函数 | steps与帧动画", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 在文章CSS动画-调速函数一文中，我们初步了解了一下CSS调速函数animation-timing-function的作用，介绍了一个重要"}, {"id": "7002881462303195150", "title": "css样式篇：边框", "desc": "CSS3中的边框属性，这里主要概述了border-radius、box-shadow、border-image三个属性值。"}, {"id": "6973988602950713358", "title": "优雅的处理文本溢出截断", "desc": "文本溢出截断是一个比较常见的场景，如新闻列表页、微博列表、商品列表等，溢出截断主要是为了保证界面的整齐。"}, {"id": "6844903933287071751", "title": "我的<input />不可能这么可爱（APP打开有惊喜）", "desc": "<input /> 标签是我们日常开发中非常常见的替换元素了，但是最近在刷 whattwg 跟 MDN 的时候发现 跟 <input /> 有很多相关的属性，选择器都没怎么用过，所以就开篇文章来整理一下一些比较有趣或者实用的知识点。 没想到，这些选择器居然跟 input ...…"}, {"id": "6992030971143045127", "title": "样式命名有多难?浅谈BEM命名规范⚡", "desc": "样式命名有多难 我以前觉得这是一个特别特别难的问题，最近在搭自己的组件库，关于CSS预处理器用的是SCSS。 对于样式的命名使用了BEM，借此机会分享一下"}, {"id": "6959474262440673288", "title": "css - flex 【4000+字总结】", "desc": "css 布局方式 css 2.1 CSS2.1定义了四种布局方式，由一个盒与其兄弟，祖先盒的关系决定其尺寸与位置的算法。 块布局：呈现文档的布局模式。 行内布局：呈现文本的布局模式。 表格布局：用表格"}, {"id": "7000185080899436551", "title": "overflow: hidden隐藏溢出内容的几种情况", "desc": "默认情况下，子div会超出父div的束缚，这就是溢出。我们可以通过设置父div的CSS属性——overflow来对子div进行控制。但给父子元素设置不同的属性也会造成不同的结果... ..."}, {"id": "7001847382631530504", "title": "border-css三角形原理", "desc": "css三角形原理： 1、通过只设置一个边框为有色，其余边框为透明色。 2、三角形大小受非同向的两边框宽度影响。 比如：下边框三角形，高度 = 下边框的宽度，宽度 = 左右边框宽度的和。"}, {"id": "6859713431755784205", "title": "能解决 80% 需求的 10个 CSS动画库!", "desc": "前言1.Animista网站地址:http://animista.net/网站描述:在线生成css动画Animista是一个在线动画生成器，同时也是一个动画库，它为我们提供了以下功能1.选择不同的动画"}, {"id": "6950081305560219679", "title": "【面试技巧】老生常谈之 n 种使用 CSS 实现三角形的技巧 ", "desc": "只会使用 border 绘制三角形吗？那你就 out 了，赶紧进来学习学习其它 N 种纯 CSS 绘制三角形的技巧吧！"}, {"id": "6844903877947424782", "title": "移动端1px解决方案", "desc": "移动端web项目越来越多，设计师对于UI的要求也越来越高，比如1px 的边框。在高清屏下，移动端的1px 会很粗。 比如，这个是假的1像素 那么为什么会产生这个问题呢？主要是跟一个东西有关，DPR(devicePixelRatio) 设备像素比，它是默认缩放为100%的情况下，…"}, {"id": "6844903619154673671", "title": "用最短的CSS样式，勾勒大数据演示屏", "desc": "本文github地址,持续更新...... 覆盖一层蒙版，并在蒙版上书写文字。需要2层，从低到上为图片层、蒙版层(上面可写字) 毛玻璃蒙版，本质上讲是两层图，底层图清晰完整，顶层图模糊残缺，并且两者位移完全一致，因此叠加到一起后像是一张图。为了确保位移一致，我们用了 backg…"}, {"id": "6909281076368293902", "title": "巧用css圆角实现有点意思的加载动画", "desc": "作为一名前端工程师, 需要对css技巧有充分的研究和了解, 接下来笔者将会带大家一起掌握如何用css的圆角属性来实现有点意思的加载动画. 以上是设置一个边的border-color的样子和设置四个边的border-color的样子, 所以说实现饼图用css就够用了. 代码如下:…"}, {"id": "6992503829367357448", "title": "纯CSS实现文字闪烁效果", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 刚刚学习了CSS动画，想着做什么酷炫的效果，先做一个CSS文字闪烁效果吧。 文字闪烁是一个做PPT常用的方式，可以吸引关注点，从而达到加重概"}, {"id": "6930196913119576077", "title": "Tailwind CSS （可能）是名过其实的", "desc": "Tailwind CSS 是一个工具集 CSS 框架，网上很多文章已对其有详尽的介绍。本文不是官方文档的复述，也不是系列优点的罗列，作者 Gerard 会从另一个角度出发，在尽力保持客观的前提下，立足于实际开发的场景，指出 Tailwind CSS 存在的一些问题。事实上，除了…"}, {"id": "6997193267452313637", "title": "css知识点总结", "desc": "这是我参与 8 月更文挑战的第 8 天，活动详情查看： 8月更文挑战 HTML语义化 让人更容易懂 语义化 更利于机器SEO 块状元素& 内联元素 块状元素： display:block/table;"}, {"id": "7002795715701243934", "title": "css自定义属性", "desc": "理解 :root 和 var() 自定义属性是一个名称以两个连字符（ - ）开头的属性，如 --foo。 定义后可以使用 var() 引用的变量。 css 在:root选择器中定义自定义属性意味着它们"}, {"id": "7000553004243877919", "title": "vue隐藏el-table表头左上角的全选勾选框", "desc": "问题描述 前两天公司产品提出了一个奇葩需求，就是要把表格左上角的全选/全不选复选框给藏起来，用户想要勾选数据，只能一条条的勾选；想要取消勾选，只能一条条的取消勾选。黑人问号？？？好吧，既然产品大佬发话"}, {"id": "7002021413334810637", "title": "CSS基础01", "desc": "第一章 css基础语法 每个css样式由两部分组成，即选择符和声明，声明又分为属性和属性值。 属性必须放在花括号中，属性与属性值用冒号连接。每条声明用分号结束。属性值与属性值不分先"}, {"id": "6994280435970736164", "title": "重温CSS之\"BFC\"", "desc": "1.叫什么？ BFC全称”Block Formatting Context”, 中文为“块级格式化上下文” BFC元素特性表现原则就是：内部子元素不会影响外部的元素。 2.是什么？ 通俗的来说：BFC"}, {"id": "7005204016443424805", "title": "# HTML&&CSS记录笔记第六天 盒子模型", "desc": "前提声明：所有内容均为之前学习过程中的笔记和个人总结，（无法避免雷同，敬请谅解，如有侵权，私信删除）。如有错误之处请各位大佬不吝赐教。"}, {"id": "6844904106209853448", "title": "面试官：你用纯CSS来写个游戏吗？", "desc": "不知道大家小时候有没有玩过一款游戏叫『井字棋』的。 上面的就是本次文章的最终结果，一个用纯CSS实现的AI井字棋游戏，Mmmm，虽然看起来有点蠢。。。 游戏的规则比较简单，就是在一个九宫格（据说十六宫格，二十五宫格也行~反正是格子就行），只要你下的棋能连成一条直线，就算赢。 所…"}, {"id": "6844904117056323597", "title": "详解BFC、IFC、GFC、FFC", "desc": "内部的Box会在垂直方向，一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。 每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使…"}, {"id": "6945284765851320328", "title": "SCSS+BEM", "desc": "SCSS 描述一个人第一步：声明bem-mixins这样子我们就可以像下面的写法第二步：解决 case.1，b--m 内嵌 b__e将上下文转换成字符串并判断是否包含 -- 也就是 $modifier"}, {"id": "6844903517346349070", "title": "小程序中吸底按钮适配 iPhone X 方案", "desc": "是bug就得修，是体验问题就得优化，于是立马搞了一台iPhone X开始研究。 网页端的适配还好，有viewport meta标签以及下面的方案进行处理。具体可参看这里 但比较尴尬了，从四个角被裁掉的表现上可以推测小程序里的viewport-fit默认为cover（根据表现猜测…"}, {"id": "6844903608379523085", "title": "大前端性能总结", "desc": "使用defer延迟脚本执行：使用defer，该脚本会被推迟到整个HTML文档解析完后，再开始执行。被defer的脚本，在执行时会严格按照在HTML文档中出现的顺序执行。使用defer方法，可以提早脚本资源加载 使用async异步加载脚本：该脚本不会阻塞HTML parser，也…"}, {"id": "6844903588506894349", "title": "Webpack 4进阶--从前的日色变得慢 ，一下午只够打一次包", "desc": "近期在团队项目里把Webpack升级到4.4.1，过程中发现现存的升级文档十分有限，踩了不少坑，好在升级之后提升还算显著，production场景下第三方依赖打包速度提升76%，development场景下本地服务首次启动提升效果约46%，再次启动提升效果上升至63%。这里将这…"}, {"id": "6844903604852097038", "title": "[译] 如何在 5 分钟之内写出一个不错的 loading 界面", "desc": "首先，让我们先看一下效果图。 这就是我们将要实现的 DEMO。 如果你想小试身手，可以在 Codepen 上创建一个 pen，编写教程代码。 1. 添加 class 作为标记 如果你不清楚为什么类名中出现了破折号，我在 这篇文章 中解释了背后的原因。 现在我们有一些文本，以及一…"}, {"id": "6844903924537769997", "title": "CSS动画：做两个简单好用的loading动画", "desc": "啰嗦一句，代码中只设置了长度的变化，为什么这个动画看起来还会有一个上下弹动的效果。而且改变元素高度时，元素看起来应该是顶部向下伸长，而不是动画中那样好像底部固定，向上长高再变回来。 原因在于inline-block的对齐方式，三个元素默认按基线对齐。当第0s第一个动画开始变高以…"}, {"id": "7000652569693405191", "title": "CSS笔记(二)", "desc": "CSS 的继承性 关于文字样式的属性，都具有继承性。这些属性包括：color、 text-开头的、line-开头的、font-开头的。 关于盒子、定位、布局的属性，都不能继承。 CSS 的层叠性 层叠"}, {"id": "6909742641936760846", "title": "纯css加载动画合集", "desc": "1、点点点加载 2、条形加载条 3、圆环加载 4、圆圈扩散加载 5、悬浮球进度加载 6、楼梯循环加载"}, {"id": "6926467789226475527", "title": "CSS之table任意列自由复制", "desc": "今天逛沸点看到个有趣的求助《怎么鼠标拖拽复制table中的某一列？》这个需求其实就是excel的列选中，但网页上的table和excel是不一样的，网页选中文字必须要有开始光标和结束位置，tabel和"}, {"id": "6844903814462439438", "title": "Chrome 73导致的flex布局崩坏", "desc": "父元素的高度都被子元素撑开了，导致scroll元素无法滚动。what? why? 纳尼？ emmm...读“规范”千遍，其义自见。当再三理解这个结论后发觉，似乎，新版Chrome的实现是符合规范的！确实，Chrome的此举改动就是为了让浏览器的flex布局行为更贴近规范。 Ch…"}, {"id": "6886247611318140942", "title": "CSS的浮动和定位布局详细（全）", "desc": "浮动是网页布局中非常重要的一个属性。那么浮动这个属性一开始设计的初衷是为了网页的文字环绕效果，如图所示: 另外之前咱们学习了标签的分类，每类标签都是有它自己的特点，比如块级标签独占一行，哎呀，突然有个idea，如果让两个div在一排内显示，那怎么办，可能有的同学又说了，老师，d…"}, {"id": "6899271427980001294", "title": "Web 字体 font-family 浅谈", "desc": "最近研究各大网站的font-family字体设置，发现每个网站的默认值都不相同，甚至一些大网站也犯了很明显的错误，说明字体还是有很大学问的，值的我们好好研究。 不同的操作系统、不同浏览器下内嵌的默认字体是不同的，错误的字体设置会导致页面在不同环境渲染的混乱，选择一套合适的字体是…"}, {"id": "6894134575094562824", "title": "五分钟弄懂移动端适配之 —— rem,vw方案", "desc": "这篇文章讲的是网页在移动端的适配问题，这里面没有物理像素之类的事，这是两个东西，别混为一谈！有些人为了博眼球，一上来就是什么物理像素，像素比之类的字眼，这俩东西对移动端确实有影响，但是没那么大，基础的同学不需要去深究。 适配是一件特简单的事情，别想太复杂。像什么数学换算之类的，…"}, {"id": "6844904153303482376", "title": "优雅的写个加载动画", "desc": "用户在进行某些操作时，都要从服务器获取资源，这个过程都需要时间，为了减少用户等待中产生的焦虑与不安，我们应该在合理的时间内做出合理的安抚，告诉用户他的操作是有回应的，所以一个优雅的加载可的方式也可以做的非常有趣，让用户轻松自在的享受等待。 好了，我们言归正转，不扯那些有的没的了…"}, {"id": "6984700539762114573", "title": "CSS 解决多层Flex布局元素滚动失效", "desc": "解决使用多层flex布局，内层元素滚动失效问题 问题 例如想实现效果： 结构却变成这个样子： html结构 样式 分析 从代码视觉上看 .root 是个flex元素同时有固定宽度 .box 是个fle"}, {"id": "6901551541111488519", "title": "前端组件化开发时组件className命名规范", "desc": ""}, {"id": "6844903598401257480", "title": "对HTML语义化的一些理解和记录", "desc": "为什么要使用语义化标签？我用DIV+CSS也能做出来一样的效果，确实单纯看效果两者并没有什么区别，但是页面不止是给人看的，机器也要看爬虫也要看。 标签语义化有助于构架良好的HTML结构，有利于搜索引擎的建立索引、抓取。简单来说，试想在H1标签中匹配到的关键词和在div中匹配到的…"}, {"id": "6844904198123814925", "title": "使用 CSS 的 clip-path 属性实现不规则图形的显示", "desc": "CSS 属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。 一种形状，其大小和位置由<几何盒>值定义。如果没有指定几何框，则边框将用作参考框 如果同<basic-shape>一起声明，它将为基本形状提供相应的参考框盒。通过自定义，它将利用确定的盒子边缘包括任…"}, {"id": "6992012726599958565", "title": "【动画消消乐】HTML+CSS 自定义加载动画 052｜8月更文挑战", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 相对定位 步骤2 利用span::before和span::after，充当白色、红色"}, {"id": "6943795524285759501", "title": "解析弹性盒flex,按比例缩放后是否是一定比例的", "desc": "子元素有固定宽度请看下面的代码如果父元素的宽度是1440, 那么本应该是这样的第一个div: 1440/4=360第一个div: 1440/2=720第一个div: 1440/4=360但是实际是这样"}, {"id": "6844903874579578887", "title": "学会使用CSS3 transform 变形", "desc": "自层叠样式表诞生以来，元素始终是矩形的，而且只能沿着横轴和纵轴放置。有些技巧能让元素看起来是倾斜的，但是底层的坐标方格并没有变形。CSS变形功能改变了这一现状，能以不同的方式改变对象的形态，而且还不只限于二维。 学习变形之前，先需要了解一下变形中的坐标系。在CSS中，笛卡尔坐标…"}, {"id": "6844904094331584520", "title": "CSS进阶之CSS变量", "desc": "自定义属性（有时可以称为CSS变量或者层叠variables）是由CSS作者定义的实体，这些实体在一个document内可以被重用。一般按照自定义属性的符号设置（比如，--main-color: black；）然后使用var()函数使用。（例如color: var(--main…"}, {"id": "6844903698359910407", "title": "用Vue实现一个掘金沸点图片展示组件", "desc": "整个系统比较复杂，包含图片文字上传组件，emoji表情组件，一级评论，二级回复，以及二级回复要能展示图片，点赞组件，图片展示组件等。其实主要是后台比较复杂，如何有效地设计数据库表结构以及各种增删评论。本文主要介绍下图片展示模块的构思和代码编写逻辑，如下图，下图是新鲜事中的图片展…"}, {"id": "6844904166737854478", "title": "CSS实现自适应九宫格", "desc": "我发现table布局还是很实用的，宽度自适应也可以用table实现。"}, {"id": "6844903520953450509", "title": "从a标签为什么不能包含div标签-了解HTML5元素分类与内容模型", "desc": "我们知道按新的 HTML 规范，已经不按 inline 和 block 来区分元素类型了。所以我们在a标签里面使用div标签时候会发现a标签并不能通过改变css盒子模型的方式将div元素包含。 需要注意的是，HTML5中的这种元素分类与inline、block没有任何关系，任何…"}, {"id": "6844903710041063431", "title": "CSS三角的写法（兼容IE6）", "desc": "1. 先创建一个div 2. 然后给div设定边框。 3. 给div的四个边框都设置不同的颜色 4. 把宽度和高度都变成0 5. 其余角为透明 6. 兼容IE6浏览器 7. 解决内联元素的三角显示问题 1. 去掉固定的内容高度 2. 将内联元素转化为块级元素或者行内块元素 3.…"}, {"id": "6844903687324712974", "title": "有趣的border-radius", "desc": "one,two,three,or four <length> or <percentage> values. This is used to set a single radius for the coners. followed optionally by \"/\" and o…"}, {"id": "6985402985002057759", "title": "可能用到的Css小技巧", "desc": "页面锚点跳转平滑过渡 再也不用因为一个简单的页面间跳转写一大堆js处理滚动条了 css实现单页滚动的简易方案 首先直接上代码 关键代码-scroll-snap-type scroll-snap-typ"}, {"id": "6924234405326258183", "title": "css 新属性：aspect-ratio", "desc": "长宽比最常见的表示方式是两个整数和一个冒号，尺寸为：宽：高，或x：y。摄影最常见的长宽比是4:3和3:2，而视频和最近的消费类相机则倾向于16:9的长宽比。 随着响应式设计的出现，保持长宽比对Web开发人员来说越来越重要，特别是当图像尺寸不同，元素尺寸根据可用空间而变化时。 创…"}, {"id": "6945622003537674276", "title": "CSS 伪选择器 focus-within 介绍", "desc": "CSS中的 :focus-within 伪选择器可有点“不寻常”，尽管它的名称看上去很简单，而且相当直观。但它的解释是：选择一个包含具有:focus 的任何子元素的元素。有点绕是不是，但仔细读应该也能理解，下面通过具体的例子你就更能理解了。 当form的子元素input获得焦点…"}, {"id": "6844903843453485070", "title": "用css实现视差效果", "desc": "某个月黑风高的夜晚，前端小白菜收到一个任务：做一张像王者荣耀登录界面一样的图片。 对面的猪八戒也太讨厌了！ --沉迷游戏两小时以后，小白菜如是说到。 接下来的任务，就是让这两只猪随着我们的猪蹄鼠标轻轻点击动起来。 根据我们想要得到的图片与鼠标之间的交互效果，为了方便计算，以图片…"}, {"id": "6844903517082107917", "title": "一步步打造自己的纯CSS单标签图标库", "desc": "图标作为网页设计中的一部分，其在凸显网页重要元素特性，视觉交互、引导以及网页装饰等充当的角色作用举足轻重。由于图标普遍具有尺寸小的特点，在项目实践时不宜将每个图标作为单个图片元素进行加载，这会增加Http请求，影响网页的性能。因此，在实际中，我们可能见到以下一些常见的解决方案：…"}, {"id": "6949852983471374366", "title": "css三种方式实现sticky footer底部黏连布局", "desc": "问题描述什么是sticky footer布局通俗来说，就是在网页中有一篇文章，文章可长可短，如果文章比较长，就在文章结束的地方，放置一个点赞按钮。如果文章比较短，就在页面的底部放置一个点赞按钮..."}, {"id": "6844903507007553550", "title": "深入理解行内元素的布局", "desc": "总括： 本文通过实例讲解CSS中最大的难点之一，行内元素的布局，主要是挖掘line-height和vertical-align两个属性在布局方面的使用。 白茶清欢无别事，我在等风，也在等你。😊 讲道理line-height和vertical-align 这对基是十分低调的，日…"}, {"id": "6844903784125038600", "title": "CSS核心概念一把梭-基础部分", "desc": "通过元素类型 tagName、*、.class 或 #id 匹配一个或多个元素。 通过 属性 / 属性值 匹配一个或多个元素。 伪类：匹配元素的相关状态和属性，如 :hover :first-child :nth-child() ，单冒号。 伪元素：匹配元素的相关位置, 如 :…"}, {"id": "6844904012794298375", "title": "【CSS】flex-basis 文本溢出问题", "desc": "不值一提的flex-basis，却给文本溢出添加省略号这个小小的功能带来很多了麻烦。下面来演示一下。 1. flex 家族 这样可以很方便的实现一个左右等分的布局。 2. flex-basis 从中作梗 flex-grow表示放大比例，flex-shrink表示收缩比例，fle…"}, {"id": "6844903693028966414", "title": "深入理解BFC", "desc": "Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。最常见的 Formatting context 有 Block fomatting con…"}, {"id": "6995047708041936933", "title": "纯CSS设置checkbox样式", "desc": "先隐藏需要自定义样式的checkbox复选框 隐藏掉Checkbox复选框后，添加一个label HTML元素，并设置for属性指向对象checkbox元素。 html结构： CSS结构： 以上就是完"}, {"id": "6844903686859145230", "title": "从一个小项目快速入门Scss", "desc": "很多人昨天都没找到我，其实我去...... 面价格不贵，50一碗可以加个鸡蛋加根肠。加个微信就算了哈哈哈哈 一大堆不同缎带和盒子颜色的礼物盒。然后用Scss 随机填充颜色和随机坐标 兼容CSS，特性丰富，成熟，行业认可，社区庞大，框架...... 个人理解其实就是让css的编写…"}, {"id": "6844904134273941518", "title": "认识“新”朋友—conic-gradient", "desc": "曾经，我们需要用图片来完成很多视觉效果，代码难以实现的形状、色彩等等，还好后来有了CSS3，很多新的属性可以实现以前无法想象的元素，帮我们节省了大量的开发成本和网络传输成本。 本篇我们聊一种新的渐变—conic-gradient，说新其实也不算新，早在两三年以前，就有书籍和开发…"}, {"id": "6844903968011714574", "title": "[译]CSS 第四级选择器", "desc": "选择器是 CSS 的核心部分。你用来做一些操作比如说选择某种类型的所有元素，就像下面这样： 当然，你也可以去做一些更复杂的事情，比如说选择选择列表中除了最后一个子元素之外的所有子元素。 事实上，这样做的方法不止一种，一些方法甚至更复杂。 ul li属于第一级选择器。 last-…"}, {"id": "6844903616935886861", "title": "前端性能优化之关键路径渲染优化", "desc": "## 关键路径 ### 浏览器加载流程 浏览器在渲染页面时需要将 HTML 标记转化成 DOM 对象 ![](https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/"}, {"id": "6904883909834899470", "title": "前端开发常用单位", "desc": "谷歌浏览器调试面板盒模型总展示当前这个块的各部分的像素值,这很方便像素什么是像素(Pixel)?在前端开发中视口的水平方向和垂直方向是由很多小方格组成的,一个小方格就是一个像素例如div尺寸是100x"}, {"id": "6984224159001739278", "title": "BFC规范与浏览器差异", "desc": "BFC规范 如何创建BFC BFC其他作用 BFC可以取消margin的塌陷 BFC可以阻止元素被浮动的元素覆盖。。。。无现实意义 ，只需记住其能够完场此效果即可 浏览器差异 IE6，7 浏览器使用h"}, {"id": "6844903602432000007", "title": "SVG 小技巧：CSS filter:drop-shadow 妙用", "desc": "SVG 小技巧：CSS filter:drop-shadow 妙用"}, {"id": "6844903848012677133", "title": "CSS Conf -《新时代CSS布局》学习总结", "desc": "CSS布局经常是令前端开发者头痛的一块工作。但是近几年来，浏览器不断发展，开始支持弹性盒子、网格布局、盒模型对齐等布局功能。这些CSS标准纯粹是为了应付网络布局而编写的。我们将深入了解这些新属性的特征，新时代的布局技巧、例子及最佳实践。希望听众会有所启发，利用这些新的CSS属性…"}, {"id": "6844903507045122055", "title": "从Chrome源码看浏览器如何加载资源", "desc": "对浏览器加载资源有很多不确定性，例如： css/font的资源的优化级会比img高，资源的优化级是怎么确定的呢？ 资源优先级又是如何影响加载的先后顺序的？ 有几种情况可能会导致资源被阻止加载？ 通过源码可以找到答案。此次源码解读基于Chromium 64。"}, {"id": "6858898030721138696", "title": "写给自己看的grid布局", "desc": "grid布局又称网格布局，因为属性太多了，在整理大神阮一峰的博客后，我写下这篇博客，方便日后自己翻看的时候加深一点印象。 在grid布局中，就跟flex一样，需要先设置父盒子的display:grid属性，然后来给父盒子设置有几行几列。 上面代码设置了一个五行五列的盒子，每行占…"}, {"id": "6844903621386043399", "title": "巧妙的CSS", "desc": "一个界面设计优秀的网站总是更能吸引用户的目光。界面设计优秀与否还是主要看UI设计师的能力，但是要想还原设计师给出UI，那么你的CSS编写能力就至关重要。 CSS和JS一样，也在不断的发展中，随着各个浏览器对CSS3的逐渐支持，CSS能发挥的作用越来越来大。熟练的使用CSS技术能…"}, {"id": "6844903745818624007", "title": "你该知道的《css揭秘》--背景与边框篇", "desc": "将背景绘制范围设为padding-box，边框设置为透明色，即可实现效果。 上图多边框可使用 box-shadow 实现，有一个缺点就是只能设置实线。 box-shadow支持逗号分隔语法，我们 可以创建任意数量的投影。 如上图，如果只是需要两层边框，当然我们还可以使用outl…"}, {"id": "6989635053168885791", "title": "小程序自动合成acss帧动画方案", "desc": "我在最近的开发项目中发现，需要很多动画效果，目前来说有几个方案实现， 1.使用apng gif等动图 2.使用视频 3.使用css帧动画。 每个方案在前面都不太完美。"}, {"id": "6977010685884989447", "title": "「HTML+CSS」--自定义加载动画【033】", "desc": "这是我参与更文挑战的第11天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 边框：48px 白色 solid 效果图如下 注：这里"}, {"id": "6915047570226020359", "title": "如何用 CSS 选择符杀死队友", "desc": "一本正经的胡写代码，不至于用来陷害队友，更重要的是防止队友耍(装)帅(逼)滑自己。 有部分 HTML 和 CSS 的书或者网上有些文章会说，元素上的 id 和 class 是不能以数字开头的。 有部分文章也会说，HTML 可以支持 id 和 class 以数字开头，但 css …"}, {"id": "6867409658198540296", "title": "当面试官谈起css布局之水平垂直居中时...", "desc": "最近面试的时候，面试官问到了CSS水平垂直居中布局的方式，对于刚入前端没多久的我，无疑是一脸懵逼，闲了赶紧查阅资料分析一波，给各位分享一下，避免落坑。 简单说一下原理，利用了绝对定位，绝对定位的百分比是相对于父元素的宽高，所以我们可以根据这个原理将元素居中显示。但是要注意：绝对…"}, {"id": "6844903833877872647", "title": "（11）让“盒子”动起来：② “定位”和 BFC | CSS", "desc": "前言： 这一篇我们主要探讨“定位”和 BFC 是怎样让“盒子”动起来的。 学习方法依然是：打开 JS Bin，拷贝代码运行查看效果，然后搞定每一行代码的前世今生。 “定位”就是通过设置 position 属性的值来脱离正常的文档流。 当你设置为绝对定位后，文档流上的其他元素就看…"}, {"id": "6844903751296237581", "title": "CSS keylogger：攻击与防御", "desc": "前阵子在 Hacker News 上面看到这篇：Show HN: A CSS Keylogger，大开眼界，决定要找个时间好好来研究一下，并且写一篇文章分享给大家。 Keylogger 就是键盘侧录，是恶意程式的一种，拿来记录你电脑上面所有按过的按键。还记得我小时候曾经用 VB…"}, {"id": "6844904117974859783", "title": "filter与fixed冲突的原因及解决方案", "desc": "当在 body 中使用了 filter 滤镜属性的时候，会导致 fixed 元素定位发生错误，即不再相对 viewport 进行定位，而是相对整个网页（ body 元素）进行定位。 效果图如下：注意右上角的 fixed item 元素已经不再相对屏幕视图右上角定位了。 产生这个…"}, {"id": "6844903510937436174", "title": "jQuery核心解读", "desc": "jQuery如此强大和好用，关键得益于以下特性： 丰富强大的语法（CSS选择器），用来查询文档元素 高效的查询方法，用来找到与CSS选择器匹配的文档元素集 一套有用的方法，用来操作选中的元素 强大的函数式编程技巧，用来批量操作元素集，而不是每次只操作单个 简洁的语言用…"}, {"id": "6844903630483488782", "title": "JavaScript 工作原理之十三－CSS 和 JS 动画底层原理及如何优化其性能", "desc": "本系列持续更新中，Github 地址请查阅这里。 这是 JavaScript 工作原理的第十三章。 正如你所知，动画在创建令人叹服的网络应用中扮演着一个关键角色。由于用户越来越注重用户体验，商户开始意识到完美，令人愉悦的用户体验的重要性，结果网络应用变得越来越重并且拥有更多动态…"}, {"id": "6903891501982908423", "title": "CSS定位之【BFC】", "desc": "块格式化上下文，是Web页面可视化渲染CSS的一部分, 是布局过程中生成块级盒子的区域。也是浮动元素与其他元素的交互限定区域。 我们可以把具有BFC的盒子看做一个隔离的独立容器，它改变内部的渲染方式，不会影响外面的布局。 1. 解决外边距重叠的问题 这是CSS的规范，上外边距和…"}, {"id": "6844903616961069064", "title": "CSS魔法堂：Transition就这么好玩", "desc": "以前说起前端动画必须使用JS，而CSS3为我们带来transition和@keyframes，让我们可以以更简单（声明式代替命令式）和更高效的方式实现UI状态间的补间动画。本文为近期对Transition的学习总结，欢迎各位拍砖。 首先先我们简单粗暴了解transition属…"}, {"id": "6844903559348273166", "title": "[译] styled-components v3.1.0", "desc": "一种新的 CSS 注入机制意味着在生产环境中更快的客户端渲染，同时流式服务器端渲染使得首字节时间(TTFB)更快。 CSS注入早就不是什么新鲜事了。早在一年半以前，Sunil Pai就发现了一个鲜为人知的DOM API: insertRule。它使我们能用JS的方式把CSS快速…"}, {"id": "6844903641514508302", "title": "将你的 Virtual dom 渲染成 Canvas ", "desc": "项目概述一个基于Vue的virtualdom插件库，按照Vuerender函数的写法，直接将Vue生成的Vnode渲染到canvas中。支持常规的滚动操作和一些基础的元素事件绑定。github地址：g"}, {"id": "6912452347054522382", "title": "为什么margin-top设置百分比基于父元素的宽度计算的？", "desc": "我们都知道css很简单。所以在平时的开发当中，也没有在意一些具体的细节。我们知道某一个属性值大概的含义。比如我们知道css的盒模型，是由margin, border, padding, content 四个部分组成。如果我们想要设置一个元素的外边距，只需要设置margin值就可…"}, {"id": "6844903874759753735", "title": "CSS进阶（16）—— CSS世界的层叠规则（下）", "desc": "根元素默认拥有层叠上下文，这可能跟页面中如果没有定位元素的话，默认会定位到根元素是一个道理，我们可以近似认为根元素的position默认值为relative，这也就很好的解释了，为什么页面中所有元素至少处于一个“层叠结界”中。 在使用z-index属性的时候，我们需要注意该属性…"}, {"id": "6861197000050737166", "title": "线条相关动画案例", "desc": "带遮罩效果的图片展示动画：鼠标hover动画显示遮罩和线 -> 四条线用伪类做盒子聚焦效果：hover火箭旋转，阴影增加，线条聚集 -> 四条线从四周起始，从0变为边框长度，向内运动聚焦"}, {"id": "6844903923380125704", "title": "CSS3高级属性巡礼—一半红一半绿", "desc": "color...似乎无能为力。 但总能想到办法，就像以前模拟三角形或者牛角那样。 从一个颜色到另一个颜色，怎么实现？——渐变。 一半红，一半绿呢？起点到中点是一个颜色，中点到终点是另外一个颜色即可。 颜色解决了，文字呢？我们的主角要登场了。 可以看到，上面的代码里，我标了两处”…"}, {"id": "6844903845835833351", "title": "从头开始复习css之盒子模型", "desc": "盒子模型这个名词来自英文里面的Box modelmodel。怎么理解盒子模型呢？我认为凡是里面可以盛装其他内容的标签，我们都可以称之为盒子。例如：div,p,span等等标签都可以往里面再添加元素，我们都可以称之为盒子模型，相反例如img，input等等 里面是无法盛装其他元素…"}, {"id": "6844903666554519560", "title": "如何使用纯 CSS 制作四子连珠游戏", "desc": "如何使用纯 CSS 制作四子连珠游戏"}, {"id": "6844903577962414088", "title": "你可能不清楚的 CSS 选择器用法（一）", "desc": "大家通常都是在下意识的使用伪类选择器，但是对其本质可能都忘记了。这篇文章对 :last-child 和 :last-of-type 两个伪类选择器再一次进行区分和详解"}, {"id": "6898566588451160077", "title": "CSS三种布局总结", "desc": "order 定义项目的排列顺序。数值越小，排列越靠前，默认为0。 flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 flex-shrink 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 align-self 允许单个项目有与其他…"}, {"id": "6950885343168036872", "title": "深入css的inline排版渲染原理", "desc": "对于web来说，CSS的文本排版功能异常强大，但web的绘图、矢量、动画等能力太过欠缺，这对RIA来说却是强项。反过来RIA在文本排版上又弱得可怜。如何在canvas/svg上实现一个排版渲染引擎？"}, {"id": "6844903538699534349", "title": "坚定地使用 CSS Custom Properties", "desc": "好久没译文，最近看到这篇 Getting Hardboiled with CSS Custom Properties。觉得不错，翻译出来给大家。现在 CSS 新特性层出不穷，比如 Flex，CSS Grid 等等，我们是不是也可以按照这个思路使用，而不是借助预处理工具呢？ 自定…"}, {"id": "6844903977478422541", "title": "CSS Solutions", "desc": "随着前端项目日益复杂，如何构建可维护、可复用、可配置的CSS代码，成了每个前端工程师都需要思考的问题。问题的本质：CSS最初是为了描述网页样式而被提出的，并不具备编程语言的特性，于是在前端走向工程化的道路上，CSS暴露出一些问题拖了后腿： ..... 针对这些问题，爱折腾的前端…"}, {"id": "6844903604931788807", "title": "亲历中国CSS开发者大会", "desc": "三个星期前，我有一次非常兴奋的经历——在3月31厦门召开的中国第四届CSS开发者大会上，我第一次做了中文发言。 我从这次的经历中学到了很多东西——既包括关于我自己的，也包括中国发展景象的——我想在这里，把我学到的东西与你们分享。 我先来介绍一下两位组织者。 组织者 (裕波 和 …"}, {"id": "6844903496521613319", "title": "CSS中设置border属性为0与none的区别", "desc": "在我们设置CSS的时候，对标签元素不设置边框属性或者取消边框属性一般设置为：border:none;或border:0;两种方法均可。border:none;与border:0;的区别体现有两点：一是理论上的性能差异、二是浏览器兼容性的差异。 【border:0;】把borde…"}, {"id": "6922242253041696776", "title": "css学习（一）", "desc": "简写方向顺序一般为上、右、下、左（4方向），上下、左右（2方向）。"}, {"id": "6949853697857814542", "title": "CSS（二）：CSS基础", "desc": "基础样式编写 CSS 应该先给网站一组基础样式。这样不仅描述了文档的结构，也为继续装扮提供了底层框架。"}, {"id": "6870006156975144967", "title": "css自制图书封面效果", "desc": "先上效果1HTML骨架一张封面，需要有这么几个信息：1.梗概2.文章名称3.作者4.简介我们来把这些东西填上去，然后随便编一点数据当前效果图2添加图书封面整体样式3banner部分添加背景色，文字颜色"}, {"id": "6988731910688243720", "title": "CSS构造块基础", "desc": "一、CSS 继承样式 1.构造样式规则：样式中包含了定义网页外观的规则。每条规则都有两个主要部分：选择器和声明块。选择器决定那些元素受到影响；声明块由一个或多个属性-值对（个人学习笔记）"}, {"id": "6844903536652713997", "title": "前端线上故障响应方法", "desc": "处理线上问题第一原则：先保障线上服务可用性，第一时间降低故障影响范围。 目前监控平台：实时数据监控平台prajna，实时错误日志平台CAT和 打点日志平台GALAXY。 CAT上可以观测到当天的异常报错数据，对比前一天和上周同一天同事间段的数据，是否错误异常。 GALAXY上可…"}, {"id": "6844904136488534024", "title": "[译] CSS 负边距的行为表现", "desc": "我正在写一本技术书，里面《盒子模型》一章要对负边距做阐述。出乎我意料的是，网上并没有关于负边距（negative margin）系统性介绍。所以，我只能自己试了，以下是我写的关于负边距一节的初稿。 最新规范 中仅提到“Negative values for margin pro…"}, {"id": "6914921172078034957", "title": "解决 space-evenly 兼容性问题的两种方法", "desc": "flex 从 2009 年推出到现在，已经得到了几乎所有浏览器的支持。作为一种简便的、响应式的布局方案，flex 给我们的布局开发带来了很多便利。 justify-content 属性是 flex 布局中很常用的属性，定义了子元素在主轴上的对齐方式。它有 flex-start …"}, {"id": "6844903575928176654", "title": "CSS实现文字打字动画（+1白话讲解）", "desc": "很多时候，我们会有一些奇怪的骚想法，比如让网页中的一些特定文本像敲代码一样一个一个显示出来，有一种命令行的感觉，增加设计感，很多人觉得这个效果要用很长一段JS来实现.... 正好手头有个例子，我决定用CSS实验一下 看起来还不错，但是还不够，我们希望字符能一个一个出来，想了想，…"}, {"id": "6970499554445623309", "title": "「HTML+CSS」--自定义加载动画【022】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 设置span标签 宽度、高度均为96px 效果图如下 span此时是没有显示出来的 因为没有设置颜色 步骤2 span上边框设置为 1"}, {"id": "6844903721776709640", "title": "CSS前景背景自动配色技术简介", "desc": "CSS越来越强，现在已经可以实现根据不同的背景色显示不同的前景色进行匹配了，例如一个按钮，如果是深色背景色，则文字颜色为白色，如果是浅色背景色，文字颜色会自动从原来的白色变成黑色了，同时边框也显示出来了，以便有更好的识别度。这么神奇的事情是如何实现的呢？确实大开眼界。"}, {"id": "6844903689761587214", "title": "大前端动画", "desc": "在 Web 前端开发中实现动画有2种方式。要么依靠 CSS 实现动画，要么依靠 JS 控制实现动画。 分析：给 div 添加了一个过渡动画，动画指定了 transform 动画，触发时机为当鼠标移上去的时候。因此当鼠标移入的时候元素的 transform 属性发生变化，那么这个…"}, {"id": "6951656753297637384", "title": "CSS", "desc": "Cascading Style Sheets简称CSS,层叠样式表是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。"}, {"id": "6844903657788407821", "title": "方便好用的 tree", "desc": "很多朋友在写文档或者整理目录结构的时候，可能都会使用到一个树状目录，之前我一直在想，这玩意要是自己一点点写，一点点整理，那得有多累啊，现在看来是自己知识面是多么的狭窄。 一个自己在 github 中的写了一点 CSS 小技巧的目录结构，很久没更新了 就好比上面这个简单的目录结构…"}, {"id": "6844903501311541255", "title": "2017 年如何在移动端优雅的使用 flex", "desc": "号外号外：专注于移动端的fullPage.js来啦！！！快点我查看做过移动端的同学都知道移动端布局太难了，终端太多了，传统的布局方式已经力不从心，各种新的布局方式被发明在flex之前，传统布局有流式布局（就是默认的方式），绝对定位布局，弹性布局（em），…"}, {"id": "6844903967491784712", "title": "前端深入之css篇丨2020年，彻底掌握css动画【transition】", "desc": "说起来css动画是一个很尬的事，一方面因为公司用css动画比较少，另一方面大部分开发者习惯了用JavaScript来做动画，所以就导致了许多程序员比较排斥来学习css动画（至少我是），但是一个不懂css动画的前端工程师不能称之为掌握css3，其实当你真正学习css动画之后，你会…"}, {"id": "6941199923412992007", "title": "tailwindcss 接入教程", "desc": "1. 安装依赖, 并且升级旧的依赖 2. 升级旧的依赖 3. 增加2个配置文件 4. 在main.js引入（入口文件） （原创整理，有疑问可以私信。如果有用，谢谢点赞~）"}, {"id": "6919005344639221774", "title": "图解line-height的使用", "desc": "line-height属性用于设置行间的距离（行高），行高指的是字母的大小(font-size)和字母的上下边缘(字母大小 + 上下空白)。 所以，文本单行占据的高度不是font-size来决定的，而是由line-height来决定的。 取决于用户端。桌面浏览器（包括Firef…"}, {"id": "6992161437879795725", "title": "CSS实现水平/垂直居中", "desc": "日常开发中，一些CSS盒子水平/垂直居中的方法，主要是为自己记录一下相关的知识点，如果有错误还请指正！"}, {"id": "6844903648225411080", "title": "使用create-react-app添加css modules、sasss和antd", "desc": "create-react-app是facebook的官方脚手架，对于个人开发者和中小型公司快速创建项目非常推荐。react的CSS解决方案有很多，这里我技术选型时用css modules和sass，然后配合antd使用通用组件库。但是create-react-app原生并不支持…"}, {"id": "6916453635702554638", "title": "使用Animate.css时动画不生效的问题", "desc": "... / 視窗內部的動畫控制項和元素"}, {"id": "6966239674813644831", "title": "CSS3原生变量使用", "desc": "1. 项目需求 由于对多个老工程需要采用统一的样式风格统一，需要约定好一个css的变量文件，各个项目都可以随时引入但是又无需适配自己的预处理器。此时css的原生变量就是最好的选择了，这样无论使用les"}, {"id": "6942076856195612680", "title": "CSS-多个元素在盒子内俩端对齐效果", "desc": "在一个确定宽度的盒子内，将item俩端对齐排列，且不影响确定盒子的原来布局。 css关键在于需要我们计算下item的宽度，/* width = (盒子宽度 - margin间距 * 一行items的个数 - 1) / 一行item的个数 */ ，这里我打算一行显示三个item,…"}, {"id": "6921949086497112077", "title": "CSS 加油包之垂直居中 [加强版]", "desc": "与 CSS 的回溯机制有关；由于 CSS 不正交，调节单个属性的时候，别的属性可能也会随之变化。 1. 不知道自己的高度和父元素的高度 2. 如果父容器下只有一个元素，且高度已设置，可以给子元素用相对定位 3. 如果父容器的高度已设置，还可以用 margin: auto; 4.…"}, {"id": "6895321934345240589", "title": "css的动画", "desc": "其实我们能够看到动画，就是脑子的一个bug。当我们观看一个物体运动时候，如果在一秒内他的像能不间断的改变很多次时，此时我们肉眼就会因视觉残象产生错觉，误以为这是活动的画面。此时引入概念如下： 这段代码的原理就是之前说的，没过1000/60毫秒，就进行一次运动(移动1px)，于是…"}, {"id": "6844903959170154509", "title": "CSS深入理解之overflow", "desc": "新手第一篇博客，整理一下最近学的css深入理解之overflowoverflow基本属性visiblehiddenautoscrollinheritoverflow作用前提非display:inlin"}, {"id": "6910602697867526157", "title": "CSS进阶 - 移动端响应式布局技巧", "desc": "1. 设备像素、设备独立像素、CSS像素、PPI、devicePixelRatio 页面放大200%时，页面的设备独立像素依旧不变，放大的是CSS像素。但是此时CSS像素与设备独立像素的关系变化了，1px === 4独立像素（宽x2，高x2） 1个设备独立像素所含的物理像素越多…"}, {"id": "6844904199239499790", "title": "CSS封装: CSS自定义属性的实战应用", "desc": "相信很多人都已经接触过CSS自定义属性(CSS Custom Properties)了，这也并非什么新鲜的概念。 但这些预编译CSS最终都会被编译成原生CSS，而这些所谓的变量也不过是单纯的复制粘贴为其定义的值，并不会实际起到变量的作用。 而CSS自定义属性与预编译CSS的变量…"}, {"id": "6844903701971206158", "title": "拥抱更底层技术——从CSS变量到Houdini", "desc": "0. 前言 平时写CSS，感觉有很多多余的代码或者不好实现的方法，于是有了预处理器的解决方案，主旨是write less &do more。其实原生css中，用上css变量也不差，加上bem命名规则只要嵌套不深也能和less、sass的嵌套媲美。在一些动画或者炫酷的特效中，不用…"}, {"id": "6938375589955010567", "title": "关于css垂直水平居中的几种方式", "desc": "css中元素的垂直水平居中是比较常见及较常使用的，在这里向大家介绍一下几种方式。 而文字的垂直水平居中也比较简单，加上line-height: 200px;与text-align: center;即可。 相对于文字来讲，元素的垂直水平居中就没这么简单，因为line-height…"}, {"id": "6899805997452230669", "title": "重新认识flex布局", "desc": "Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为flex布局 注意：注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 采用flex布局的元素称为Fl…"}, {"id": "6944603522939912200", "title": "css之背景、渐变", "desc": "角度；如：90deg，相当于to bottom，135deg，相当于to right bottom；默认180deg，相当于to bottom。参考图："}, {"id": "6844903668454539277", "title": "[译] 简单的响应式现代 CSS 网格布局", "desc": "在本文中，我们将展示如何创建响应式现代 CSS 网格布局，演示如何在旧浏览器上使用降级代码，如何逐步添加 CSS 网格，如何使用对齐属性重新构建小型设备的布局以及居中元素。 在之前的文章中，我们探索了四种不同的技术，可以轻松构建响应式网格布局。那篇文章是在 2014 年写的 —…"}, {"id": "6844903568495886350", "title": "css自定义属性和聚光灯效果", "desc": "神秘巨星是谁？它就是CSS Variables。 CSS Variables，一个并不是那么新的东西，但对css来说绝对是一场革命。 之前使用变量的时候，需要借助sass、less等预处理工具来实现，现在我们可以直接使用css来声明变量。 兼容性一片绿，红的那不是还有两个吗？做…"}, {"id": "6920864236956549127", "title": "重温css(03)-CSS3属性集", "desc": "| burl | 阴影的模糊程度，值不能为负，值为0，无阴影模糊效果。值越大越模糊 | 注：text-shadow 属性向文本添加一个或多个阴影。该属性是逗号分隔的阴影列表，每个阴影有两个或三个长度值和一个可选的颜色值进行规定。省略的长度是 0 border-radius可通过…"}, {"id": "6844903648309280776", "title": "Session, LocalStorage ,Cache-Control", "desc": "但是Expires表示的是本地时间，所以如果用户更改本地时间的话，那你设置的缓存很可能就无用了，不靠谱了。"}, {"id": "6977785807583051790", "title": "CSS中的溢出问题", "desc": "如果你是一个前端开发者，你可能遇到过水平滚动条问题，尤其是在移动端。因为造成滚动条问题的原因有很多，所以没有直接的解决方案。有些问题可以很快解决，有些则需要一点调试技巧。 什么是溢出问题？ 在讨论溢出"}, {"id": "6844903831524868104", "title": "【前端帮帮忙】第5期 关于CSS权重，你了解多少？", "desc": "配图是小孩叠的积木，觉得刚好符合这个主题，所以就拿来做封面了哈。 CSS权重，我们可以简单理解为CSS优先级。来看下MDN官网对优先级的描述： 运行后，可以看到p标签文本的颜色为蓝色。 那么为什么会是蓝色的？这就是CSS权重来决定的。决定最终用哪个样式作用到该p标签上。 上面代…"}, {"id": "6844904002832826381", "title": "🎨 有关 CSS 的一些极有趣的东西", "desc": "灵活字体（Variable fonts）是一种包含字体元信息如字宽、字重（甚至自定义形变）的字体的字体方案。主要通过使用 CSS font-variation-settings 属性配置变形轴，来达到使字体形变的效果，如： on CodePen. 当你在输入框中输入字母的同时，…"}, {"id": "6844903578016940040", "title": "JavaScript 社区由一个库引发的“smoosh门”事件到底怎么回事？", "desc": "一项名为 JavaScript 功能的提案 Array.prototype.flatten 证明与 Web 不兼容。在 Firefox Nightly 中发布该功能会导致至少一个受欢迎的网站中断。鉴于有问题的代码是广泛使用的 MooTools 库的一部分，很可能会有更多网站受到…"}, {"id": "6910061234951979015", "title": "CSS的文本样式属性值", "desc": "HTML编辑文本，通过CSS的设置属性赋予HTML网页活力，改变文字类型、背景以及插入图片、视频、音频等，使网页更具生动。"}, {"id": "6844903844715970568", "title": "【Hello CSS】第二章-CSS的逻辑属性与盒子模型", "desc": "在上一篇【Hello CSS】的第一章CSS的语法与工作流中介绍了CSS的语法规则以及基本的渲染流程。本篇则会分享CSS的逻辑属性以及盒子模型。 先不要急着往下翻，大家先思考一下。 这个问题的答案，鱼头会在文章中给出，欢迎大家带着这个问题往下翻阅，如果已经知道答案，也可以看看跟…"}, {"id": "6903914258405261326", "title": "组织和管理 CSS", "desc": "在项目开发的过程中，基于有限的时间内保质保量的完成开发任务无疑是一场挑战。在这场挑战中我们不但要快速处理自己的问题，还需要与别人协同合作，以避免两者之间的冲突。 针对于大型项目的开发，CSS 如何组织和管理才能让我们用更少的时间写出更强大的功能。这篇文章来表述一些我对 CSS …"}, {"id": "6912051514504806408", "title": "CSS盒模型", "desc": "标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。 IE盒子模型中，width 和 height 指的是内容区域+border+padding的宽度和高度。"}, {"id": "6844903847844921351", "title": "前端进阶之如何正确判断this的指向？", "desc": "上面简单列了 window 下的几种情况，但其实在node下的情况也类似。 无论是否在严格模式下，在全局执行环境中（在任何函数体外部） this 都指向全局对象。 简单函数调用， this 在一般模式下指向全局对象；严格模式下 this 默认为 ndefined 。 call …"}, {"id": "6975810313497083912", "title": "CSS 单位及其需要注意的地方", "desc": "px（Pixel）：相对长度单位，绝对像素值，它取决于显示器的分辨率。一旦分辨率确定，设置为 px 的尺寸就成为固定尺寸，不会自动缩放。（1px = 1/96英寸） em：相对长度单位，相对于父元素的"}, {"id": "6844903581368205325", "title": "前端学习之路之自适应设计(sass语法)", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 1. css像素、设备像素、逻辑像素、设备像素比 大家可以先看这篇文章了解一下基本概念。 css像素：我们大家经常写高多少px，宽多少px,这个就是px像素。 逻辑像素：其它就是css像素，他们其实是同一回事。…"}, {"id": "6844903887674032135", "title": "纯 CSS 实现开关效果", "desc": "我们使用标签来实现这个效果。 这里要讲解一下，使用了position来实现的定位。有不了解的同学可以打开MDN查看相关知识"}, {"id": "6844903838156062734", "title": "（12）把“可以动的盒子”更优雅地展示：① “伪元素”妙用 | CSS", "desc": "前言： “伪元素”在我们创建样式的时候用处很多，它可以大大简化我们的代码量，还可以做一些出乎意料的动作。 用于创建一些不在文档树中的元素，并为其添加样式。 其中 content 是必不可少的。 | rotateZ(angle) | 定义绕着 Z 轴的 3D 旋转。 | 后记： …"}, {"id": "6844903721885777934", "title": "webpack性能优化(下)", "desc": "limit属性是在文件大小超出limit的值才会单独打包，否则使用base64 的方式引用通常适用于小图片，这就是我们通常的文件处理方式。 当然从我们实际项目的测试效果来看，我只能说这种处理方式并不算是很优秀，仅供参考。 而source map是为了帮助我们定位程序出现的错误对…"}, {"id": "6844903909165629453", "title": "【漫画讲技术】CSS系列漫画教程（11-15讲）", "desc": "《CSS系列漫画教程》共15讲，是我2012年刚毕业步入互联网时的早期作品。时隔多年，如今互联网内容为王的分享经济迅速发展，这些作品压箱底太可惜，不如分享给大家。 漫画还停留在当年前端兼容ie6的时代，如今ie6随着那一代人的青春一起逝去，大家各奔前程，留下是感情和回忆。漫画不…"}, {"id": "6844903558869942279", "title": "Webpack Loader源码导读之css-loader", "desc": "本篇是Webpack Loader源码导读系列中关于css-loader的解读，主要阐述loader的工作，及部份配置项作用。 无论是loader.js还是localsLoader.js，都会先解析loader选项，然后执行processCss编译css文件，他们的区别在于对编…"}, {"id": "6844904121867173902", "title": "css+svg实现b站充电效果", "desc": "move1是父元素蒙版的，movetwo是黄色svg图形的，请不要吐槽起名。。。。"}, {"id": "6847902219824529421", "title": "[译]如何处理边距坍塌？", "desc": "在我们探讨外边距坍塌如何工作之前，我们需要重新研究盒子模型，文档树中的每个元素都是一个矩形框，由四个区域组成：内容区（content area），填充区域（padding area），边框区域（border area）和边距区域（margin area）。 外边距区域与盒模型的…"}, {"id": "6844904081170022414", "title": "（15）让这些“展示”有更好的扩展性——媒体查询 | CSS", "desc": "前言： 实际上在很早之前，CSS 就支持媒体查询了。 例如，页面有些部分需要在打印的时候隐藏或者变大，这时候可以使用 media 使某些 style 只在打印的时候生效。 而 CSS3 的 Media Queries 的到来，可以让我们针对不同的设备场景使用不同的 CSS。 a…"}, {"id": "6844903569502519304", "title": "每周一个前端动画之四：掘金头像旋转动画", "desc": "3月，东亚季风带来了来自太平洋的潮湿空气，趁着小雨的周末，送上每周一个动画系列的第四篇。闲话不说，开始我们的正文。本文分析实现的某些效果，仅仅作为一个思路分享，仅仅作为学习素材使用。 作为重度掘金用户，偶然发现了这个动画，动画实现起来很简单，整理如下，好奇问一句，你发现这个动画…"}, {"id": "6934226359845666830", "title": "CSS知识总结", "desc": "今天来做一下关于CSS基础知识的总结。 文件层叠：用多个文件进行层叠。 而CSS的版本可以从1996年开始追溯，当时所推行的版本为CSS1；而到了1998年，CSS2在原来的基础上增加了定位、z-index、media等；到了2004～2011年，CSS2.1的出现，使其成为了…"}, {"id": "6874872435208880142", "title": "CSS1, CSS2, CSS3属性归纳", "desc": "CSS1(Cascading Style Sheets, level 1)， 最早的一代CSS。早期的HTML页面很简陋，多数用标签来表示元素的样式，这时的CSS主要用来进行HTML元素的表现，因此包含的主要内容是文字、颜色、背景、盒子模型。 CSS2(Cascading St…"}, {"id": "6844903887162327053", "title": "[译] Web 流式文字排版的现状", "desc": "Web 流式文字排版可以提升用户的网站阅读体验，但与此同时，它也带来了字体不受控制变大的问题和对浏览器无障碍访问功能使用的影响。那么 Web 流式文字排版到底能否在实践中被应用呢？ 请注意本文使用了 GIF 动画来演示使用响应式/流式文字排版的实现效果，移动端设备的访问者可能阅…"}, {"id": "6844903842430058509", "title": "opacity骚操作", "desc": "借着这个节日，结合下最近的需求：移动端h5生成图片没有二维码（如上），长按保存下来时候有二维码（如下）。我们来聊聊如何实现，文末配上不严谨的源码，感兴趣的看官自取啊～ 到这里，某些大佬应该明白怎么简单操作，完成这个尴尬的需求了，不过之前自己还是费了点功夫，脑袋转不过弯啊。 这里…"}, {"id": "6844903890308038670", "title": "Grid 布局详解", "desc": "Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。 Flex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指定\"项目所在\"的单元格，可…"}, {"id": "6844903841582972935", "title": "css flex布局 精确计算成员宽度值", "desc": "css 的 flex 弹性布局,广泛应用在当今的页面开发中,其弹性伸缩的的灵活性非常擅长于开发有响应式需求的网站。但是有很多时候,其灵活性也会让人疑惑,特别是确定尺寸时,基本上是靠不断尝试。为了在开发时更加得心应手,下面将以主轴方向上,也就是默认布局方向上的成员宽度值计算为例子…"}, {"id": "6984317278653251592", "title": "相对定位", "desc": "相对定位： 盒子可以相对自己原来的位置进行位置调整，称为相对定位。 position属性 位置描述词 top 属性 ：向下移动 left 属性： 向右移动 bottom 属性 ：向上移动 right "}, {"id": "6844903848016871431", "title": "[译]19个CSS level 4 选择器", "desc": "1. Checkbox — Indeterminate状态 这是<input type=\"checkbox\">第三个状态。除了:checked和:unchecked的伪类选择器之外，还可以使用另一个状态:indeterminate。 警告：状态indeterminate不能像这…"}, {"id": "6918741384920842247", "title": "CSS 选择器与优先级", "desc": "其中复合选择器和复杂选择器都是由简单选择器组合而成，这可以借助一些连接符完成。 如果组成复合选择器的简单选择器中有标签选择器，则必须要让标签选择器置于最前方的位置，伪类和伪元素需要放在最后面。复合选择器的表现形式如下： 其中 space 的意思是空格，即两个复合选择器之间可以通…"}, {"id": "6844903543787225101", "title": "移动端前端开发中需要知道的一些屏幕知识", "desc": "像素（Pixel）对于WEB开发者来说很是熟悉，在PC互联网时代没少与其打交道。"}, {"id": "6844903773559635975", "title": "JS 和 CSS 间战火熊熊，该如何熄灭？", "desc": "太长不看版：有许多人同时热爱着 JS 和 UX/CSS/etc. 如果我们不再给别人贴上“JS 开发者”或“UX 开发者”的标签，我们将止住“JS vs CSS”的战火，更接近和平。 有人称之为「巨大的鸿沟」：真实存在的前线上，一边站着 JavaScript 顽固派，另一边站着…"}, {"id": "6844903495682752520", "title": "深入理解Div和CSS的布局layout盒模型Box Model", "desc": "熟练掌握Div和CSS的布局(layout)方法，首先要对盒模型(Box Model)有足够的了解。盒子模型是CSS布局网页时非常重要的概念，只有很好地掌握了盒子模型以及其中每个元素的使用方法，才能熟练使用css的定位方法和技巧。 所有HTML元素可以看作盒子，在CSS中，\"b…"}, {"id": "6844903889108467720", "title": "如何只使用CSS创建折叠标题效果", "desc": "折叠标题是向用户显示重要信息的绝佳解决方案，例如特价优惠和密钥通知。许多开发人员在创建此类效果时依赖JavaScript，但是，使用纯CSS创建更简单的折叠头效果也是完全可能的。 折叠标题的工作方式类似于视差效果。折叠标题的背景保持固定，以便当用户向下滚动页面时，其下方的内容可…"}, {"id": "6844903608308203533", "title": "[译]无尽滚动的复杂度--来自Google大神的拆解", "desc": "摘要: 重用你的DOM元素以及删除那些远离可视范围的元素。为延迟显示的元素使用占位符。这里是一个无尽滚动的演示和代码。 无尽滚动在互联网上到处都有应用。Google Music的艺术家列表是一个，Facebook的时间线是一个，Tweeter的话题列表也是一个。当你向下滚动，新…"}, {"id": "6972602184433303583", "title": "css使用@keyframes首次加载图片循环会出现白色间隙", "desc": "问题解说: 在使用css 的animations 属性时,首次加载循环会出现白色的间隙,看着有点像页面有刷新的感觉,后面每次循环就不会再有这个问题 问题演示 解决办法 最终效果 问题解析"}, {"id": "6844903621042110477", "title": "CSS3 animation属性中的steps功能符深入介绍", "desc": "张鑫旭关于CSS3 animation属性中的steps功能符的思考"}, {"id": "6895727466631921677", "title": "【CSS学习（二） 文本美化 & 背景】", "desc": "作为 Web 页面最基本的组成部分，“文本” 的重要性不言而喻。对于“文本”来说，我们需要掌握两个与之相关的属性，“字体属性” 和 “文本属性”。 CSS 文本属性：主要定义“文本”的外观——如缩进和水平对齐、垂直对齐、字符间隔和字母间隔、文本转换、文本装饰、文本阴影、处理空白…"}, {"id": "6844903991273340936", "title": "CSS布局（Grid布局）", "desc": "GridGrid布局设置行和列给每条线取名字，进行调用设置item范围(column行,row列)使用fr缩写,(freespace自由空间)grid-template-areas分区grp空隙练习："}, {"id": "6844903649429176334", "title": "关于存储及CSS的一些技巧", "desc": "页面数据更新 需要二次更新才能拿到最近的数据。有缓存读取的是最后一次数据 indexedDB 是一个本地数据库，该数据库是一种存储在客户端本地的 NoSQL 数据库，它可以存储大量的数据。 一个网站可以有多个 indexedDB 数据库，但每个数据库的名称是唯一的。我们需要通过…"}, {"id": "6844903586070003720", "title": "10 个使用 CSS 实现的优雅的形状视觉效果", "desc": "10 个使用 CSS 实现的优雅的形状视觉效果"}, {"id": "6920461456639000589", "title": "从包含块的角度理解元素宽高百分比及边距百分比的计算方式", "desc": "1.对于包含块的理解?一个元素的尺寸和位置经常受其包含块containintblock的影响。大多数情况下，包含块就是这个元素最近的祖先块元素的内容区，但也不是总是这样。2.包含块的影响在学习如何确定"}, {"id": "6951712788779630600", "title": "前端网页手册(2)--菜鸟教程网站分析", "desc": "菜鸟教程网站分析Okay，第一遍大致浏览了前端网页的功能、特性、语言等等，现在进入下一个环节，即是“再读和实例分析”，这里采用先两者同步进行的方式，即通过分析网页来查漏补缺。今天需要剖析的是什么呢？—"}, {"id": "6844904175982084104", "title": "编写邮件模板的注意事项", "desc": "事情的起因是运营需要给用户推送各类活动邮件，产品便把实现邮件模板的需求交由我来完成，得，有需求咱实现便是了。一开始想的确实挺好，不就是个静态页面嘛，刷的一下就搞定了，然后邮件发送出去各种兼容性问题，所幸只是测试邮件，不然就炸锅了。果然事情没有想象中的简单，网上查了一下发现HTM…"}, {"id": "6844903516780118023", "title": "10 个能启发你设计灵感的分屏视觉效果", "desc": "10 个能启发你设计灵感的分屏视觉效果"}, {"id": "6844903865591021582", "title": "摩拜前端周刊第12期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～如何实现一个下载进度条/播放进度条地址:https://juejin.im/pos"}, {"id": "6844903636800143368", "title": "Retina屏下的图片优化", "desc": "这篇文章的目的是讲解二倍图和三倍图使用时的问题的。之前在开发过程中，总是会遇到一些加粗的图案，无法使用css语法来实现效果。因此，只能够添加图片来展示。但是，单纯的添加图片，会导致图片在部分手机上面看上去模糊不清。因此，我们往往会使用到二倍图和三倍图。同时，还有其外在的原理需要…"}, {"id": "6844903591853948942", "title": "字号与行高 - 李银诚", "desc": "什么是字号大小？字号大小就是字体的高度，例如设置字号为50px，那么它的高度如下图所示： 什么是行距呢？如下图所示： 其中半行距 = (lineHeight – fontSize) / 2。 但是实际上，font-size经常不等于渲染的高度，如下图所示： 对于笔者用的Pro…"}, {"id": "6844903669901557767", "title": "利用Resource Timing监控资源加载速度", "desc": "重定向；如果服务器返回302的状态时，则会发生重定向，页面会重定向到302响应的location属性指定的地址去（response的Location属性指定，例如jd.com会被跳转到http://www.jd.com）。 读取浏览器缓存；如果资源的缓存时间还未过期（服务器设置…"}, {"id": "6844903604772405261", "title": "你过来，悄悄告诉你怎样适配iPhone X？", "desc": "iPhone X的出现，对于设计师来说，又增加了适配的工作量，因为iPhone X的齐刘海，实在是.....bulabula，你懂得......那么怎样适配iPhone X?今天要跟伙伴们分享的是来自QQ音乐团队设计师们关于这方面的研究工作，从方案对比选型到确定适配方案，最后的实"}, {"id": "6844903501970030605", "title": "CSS 写作建议和性能优化小结", "desc": "1.前言还有几天就到国庆中秋了，快要放假了，先祝大家节日快乐！之前写过JS的写作建议和技巧，那么今天就来聊聊CSS吧！说到CSS，每一个网页都离不开CSS，但是对于CSS，很多开发者的想法就是，CSS"}, {"id": "6844903777758085127", "title": "[译] 使用智能 CSS 基于用户滚动位置应用样式", "desc": "通过将当前滚动偏移量添加到到 html 元素的属性上，我们可以根据当前滚动位置设置页面上的元素样式。我们可以使用它来构建一个浮动在页面顶部的导航组件。 这是我们将使用的 HTML，<header> 组件是我们希望当我们向下滚动时，始终浮动在页面顶部的一个组件。 首先，我们将监听…"}, {"id": "6844903746044952590", "title": "你可能不知道的 CSS —— CSS规范阅读分享", "desc": "也许有人会说，都快 2019 年了怎么还读 CSS2.1 规范。一方面，现在最新的 CSS （core） 规范是 CSS2.2（以下截图来自 https://www.w3.org/TR/CSS/ ），又因为 CSS2.1 有中文的版本，并且和 CSS2.2 规范差异性不是很大，…"}, {"id": "6844903582177705997", "title": "潜入理解H5&CSS3-面试准备（不断更新中😄···）", "desc": "sticky：粘性定位，先按照relative定位，再按照fixed定位。详见MDN BFC是块级格式化上下文（Block Format Context），我们可以把它看作一个大盒子，一个独立的容器。这个容器就是一个BFC，其内部和外部不会有任何影响，在这个大盒子（BFC）中，…"}, {"id": "6846687583431294984", "title": "Grid 布局简介", "desc": "Grid 和 flexbox 的一个很大的差异是 Grid 允许我们在二维空间(多行多列)控制元素的位置, flexbox 则不行。但这并不意味着你永远不能在一维布局中使用 Grid, 在需要准确地在一维空间控制元素的尺寸和位置时选择我们依然可以选择使用 Grid 行和列的交叉…"}, {"id": "6970737559429185549", "title": "Atomic CSS 理念分析，及相关框架 TailWindCSS 学习", "desc": "CSS 发展趋势 比如 BEM、OOCSS、Css in js、Js in css、Utility first、Atomic css 等 BEM（Block-Element-Modifier）：一种c"}, {"id": "6844903683390439431", "title": "[译] ./dogs.html 和 /dogs.html 间有什么区别？", "desc": "它们都是 URL 路径。但是他们名字不同。 全限定 URL 的功能再明显不过 —— 它会指向一个确切的页面。所以，让我们再来看看前两个例子。 如果你在 cats.html 上放置了一个链接到 /dogs.html（一个“绝对”路径）的超链接，那么它将指向 404 页面 —— 这…"}, {"id": "6844903518034214920", "title": "CSS新手常遇到的一些坑", "desc": "最近开始上手一些前端的项目，最难受的就是CSS的各种定位，把其中遇到的一些问题记录下来，方便自己查阅，也希望能帮到像我一样的CSS初学者。 运行一下会发现，实际上，hehe这个div贴着haah的div，而不是我们想要的贴到底部。仔细查阅了w3c的文档，其实是由于对于top,l…"}, {"id": "6844903668613906446", "title": "CSS 写个带边框背景色透明的消息框", "desc": "写个消息框容易太容易了，网上一搜就一大堆教程。直接拷贝粘贴到自己项目就可以啦。大多是用::after或者::before实现三角形，绝对定位移动到边上成为消息框的角角。 似乎常用的消息框写法这种操作是实现不了的。 用常用的方式实现的消息框，想要改成透明背景，似乎不太可能。 因为…"}, {"id": "6980402873884655630", "title": "理解CSS中的margin负值", "desc": "给margin设置负值有什么用，先说结论吧，你遇到的情况这里应该都会包含： 块级元素设置 margin-top margin-bottom 都会发生位移，只不过设置 margin-bottom，"}, {"id": "6844904093773725703", "title": "[译] 理解 CSS 网格布局：网格区域", "desc": "本文是讲解网格布局系列的第三篇，教你从网格布局新手到专家。 我们已经学了如何使用行号和命名网格线定位网格项目。其实还有一种定位网格项目的方式，它是对布局的自然描述——grid-template-areas 属性。本篇文章介绍如何使用 grid-template-areas 属性…"}, {"id": "6844903965558046727", "title": "理解CSS中的BFC(块级可视化上下文)(浅显易懂)", "desc": "在普通布局中，元素按照其在 HTML 中的先后位置从左往右，从上往下布局。 在这个过程中，行内元素水平排列，直到当行被占满然后换行。块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决…"}, {"id": "6844903616629719054", "title": "大学没学过数学也要理解 CSS3 transform 中的 matrix", "desc": "CSS3 中使用 transform 可以对元素进行变换。其中包含：位移、旋转、偏移、缩放。 transform 可以使用 translate/rotate/skew/scale 的方式来控制元素变换，也可以使用 matrix 的方式来控制元素变换。 比如： 通过transfo…"}, {"id": "6970456637031055367", "title": "移动web开发之rem布局", "desc": "1. rem基础 1.1. rem单位 rem (root em)是一个相对单位，类似于em，em的大小是取决于当前元素的字 体大小或者父元素的字体大小。 不同的是rem的基准是相对于html元素的字"}, {"id": "6980330319262007309", "title": "CSS 三大特性", "desc": "层叠性 相同选择器给设置相同的样式，此时一个样式就会覆盖(层叠)另一个冲突的样式，层叠性主要解决样式冲突的问题。 层叠性原则: 样式冲突,遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式 样式不"}, {"id": "6980329994715136007", "title": "（三）CSS-HTML 知识点梳理", "desc": "知识点梳理 选择器的权重和优先级 盒模型 盒子大小计算 margin 的重叠计算 浮动 float 浮动布局概念 清理浮动 定位 position 文档流概念 定位分类 fixed 定位特点 绝对定位"}, {"id": "6969869163909251079", "title": "关于表格不同状态不同颜色", "desc": "方法一： 缺点：会减少性能 switch得一直判断 methods里面写个方法 方法二： 优点：状态和颜色的映射关系都在字典里面被管理起来了"}, {"id": "6844903650687451150", "title": "CSS三角形和饼图", "desc": "注意各个方向边框值的边框，可以写出不同的等边三角形，等腰三角形，任意三角形... transparent 透明色，这个得必须，也可以设置成跟底色一样的颜色就可以。 先建一个圆，然后分左右两块。 饼图的例子，在测算结果页还是经常会用到的，可以扩展为加载框等其他形式，代码比较简单易…"}, {"id": "6844903624460468237", "title": "响应式布局讲解", "desc": "响应式布局已经不是什么新鲜事物了，但使用的场景却在变少，因为现在web程序变得愈发丰富和复杂，而产品对移动端的重视也超过了pc端，如果仅用响应式布局实现适配，代码的复杂度和兼容性都难以维护，并且很容易造成代码冗余（比如媒体查询的多余代码）。开发成本和另开发一款程序接近，因此，独…"}, {"id": "6844903605862940685", "title": "深入清除浮动原理", "desc": "设置为浮动的元素会脱离当前文档流，向左或向右移动直到边缘遇到另一个浮动元素或者到达边界。普通元素不会对齐造成影响。 浮动是把双刃剑，在给我们的布局带来便利的同时有一些缺点需要我们去解决。例如最常见的父元素塌陷。如下图所示： 可以看到父元素的高度为0,为了解决这种状况就要清除浮动…"}, {"id": "6995912162807906335", "title": "【JavaWeb基础 · CSS边框属性】", "desc": "“这是我参与8月更文挑战的第13天，活动详情查看： 8月更文挑战” 边框属性 我们首先要知道的是所有的HTML标签都有边框，但是边框默认是不可见的。 那我们怎么把边框显示出来呢？那我们要认识borde"}, {"id": "6922712145230561293", "title": "Web前端知识梳理（三）CSS部分", "desc": "1. css sprite 是什么,有什么优缺点 将多个⼩图⽚拼接到⼀个图⽚中。通过 background-position 和 元素尺⼨ 调节需要显示的背景图案。 2. display: none; 与 visibility: hidden; 的区别 修改常规流中元素的 di…"}, {"id": "6844903503983280141", "title": "HTTP/2特性及其在实际应用中的表现", "desc": "HTTP/2是于2015年正式发布的新一代HTTP协议。其在保持HTTP1.x语义、不变更网络基础设施的前提下致力于降低用户可感知延时，提升网络传输效率。本文将从HTTP历史、HTTP/2新特性、升级方法、效果分析四个部分进行介绍。主要涉及了为什么我们需要HTTP/2，HTTP…"}, {"id": "6844904132923375629", "title": "CSS实现元素水平垂直居中", "desc": "水平垂直居中是页面布局中及其常见的样式，关于实现方式也是多种多样，闲话少说，我们直接进去正题。 好了，前戏到此为止，下面是重头戏了。 这种方法要根据父子元素的宽高来计算top和left的值，如果页面布局复杂起来，每一个都这样计算岂不是要烦死我这样的数学白痴？个人觉得这种方法有点…"}, {"id": "6917897979148009485", "title": "项目换肤方案", "desc": "更换页面的主题或配色，简单来讲就是更换css。 themes文件夹下并列三个主题文件，将默认主题写入default.less。 抽取主题颜色设为'颜色变量'，并赋值给'样式变量'。 注：这里要提及为什么项目要用less, 主要原因是：我们运用了大量的dpl中的组件，dpl是基于…"}, {"id": "6844903518248108039", "title": "7 款前端开发者重制的经典游戏 总有一款能让你回味童年时光", "desc": "之前，在微博上发起#每日一Pen#话题时，在 CodePen 上看到的经典游戏重制。蛮有意思的，与大家分享下。"}, {"id": "6844903781600100359", "title": "【前端帮帮忙】第3期 使用CSS的border属性绘制各种几何形状", "desc": "border边框属性可以说是我们在网页布局中最常用不过的一个属性之一。border它不只是边框，它还有很多非常有用的“黑魔法”哈，让我们一起来学习一下。 是不是剩下4个不同颜色不同方向的三角形了，继续往下看，一起来见证下border的黑魔法。 ... 下面代码都会用简写的形式。…"}, {"id": "6844903654764314637", "title": "使用JavaScript和D3.js实现数据可视化", "desc": "D3.js是一个JavaScript库。它的全称是Data-Driven Documents（数据驱动文档），并且它被称为一个互动和动态的数据可视化库网络。2011年2月首次发布，在撰写本文时，最新的稳定版本是4.4版本，并且不断更新。D3利用可缩放矢量图形或SVG格式，允许您…"}, {"id": "6844903946406871048", "title": "移动端1px边框解决方案", "desc": "对于750设计稿，相对于iphone6的屏幕宽度是375，即2倍的dpr，当在样式中写入border: 1px solid #ccc时，渲染出来的相当于1*2px的边框，所以看起来就是比设计图粗了。 注意: 当同时使用postcss-px-to-viewport插件进行vw方案…"}, {"id": "6991747117760905246", "title": "sass总结笔记--基础入门", "desc": "什么是sass 1.Sass 扩展了 CSS3，增加了规则、变量、混入、选择器、继承等等特性。Sass 生成良好格式化的 CSS 代码，易于组织和维护。 2.工程越大，css文件越大，重复代码越来越多"}, {"id": "6983562033027530765", "title": "css列表属性和样式控制", "desc": "列表在网页中是很常见的，今天就来学习css列表属性之后并制作它。 css列表属性和样式控制 列表属性 html有三种类型的列表：无序列表，有序列表和"}, {"id": "6991728137503506439", "title": "阿里巴巴iconfont的几种使用方法介绍｜8月更文挑战", "desc": "@[toc] 下载 如果你并不是想用 字体图标 ，那么你可以找到你喜欢的图标直接下载 图片格式。SVG是基于XML的矢量图像格式，所以你会看到SVG的选项是 ==复制SVG== 而不是 ==下载SVG"}, {"id": "6844903577119358989", "title": "从Chrome源码看HTTP/2", "desc": "下面一一进行说明。 1. 头部压缩 当这种请求数很多的时候，会导致网络的吞吐率不高。并且，比较大的HTTP头部会迅速占满慢启动过程中的拥塞窗口，导致延迟加大。所以HTTP头的压缩显得很有必要，HTTP/2的前身SPDY引入了deflate的压缩算法，但是据说这种容易受攻击，HT…"}, {"id": "6976506994085593095", "title": "如何用css画一个文件上传图案？", "desc": "这是我参与更文挑战的第18天，活动详情查看： 更文挑战 大家好，我是前端队长Daotin，想要获取更多前端精彩内容，关注我，解锁前端成长新姿势。 以下正文： 如下图，如果是你，你会怎么实现下面图案？ "}, {"id": "6963873504210976775", "title": "【夯实基础--CSS】=＞ 高级技巧篇（雪碧图/滑动门/CSS三角形/字体图标(iconfont)等）", "desc": "CSS高级技巧 CSS用户界面样式 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域"}, {"id": "6991574824992636958", "title": "前端笔记-CSS选择器｜8月更文挑战", "desc": "这是我以前学的时候记的东西了，最近想把关于计算机的东西清理出电脑，就发出来了。也没什么用，详细的还是去看时文档比较靠谱。如果出现☆就证明是CSS3才有的嗷。 网页分成三个部分： 结构（HTML） 表现"}, {"id": "6844903593984655368", "title": "Css实现checkbox及radio样式自定义", "desc": "checkbox和radio样式自定义在网页中是很常见的， 比如在进行表单输入时性别的选择，用户注册时选择已阅读用户协议。随着用户对产品体验要求越来越高，我们都会对checkbox和radio重新设计，checkbox默认的样式非常丑 ，无法直接修改checkbox和radio…"}, {"id": "6987655276614664222", "title": "CSS 基础概念（文档流、盒模型）", "desc": "一、文档流 流动方向 inline 元素从左到右，到达最右边才会换行 block 元素从上到下，每一个都另起一行 inline-block 也是从左到右 宽度 inline 宽度为内部 inline "}, {"id": "6844903811186704391", "title": "CSS 搞事技巧：checkbox+label+selector", "desc": "这三个元素作为这个 《CSS 搞事技巧》的第一篇并非仅仅是在接下来的 《重温 Flex 布局》中要使用，而是因为这个技巧的确是很基础。 核心概念：所谓技巧，无非就是保存状态（划重点啦）。 示例部分仅放 Gif 图样及源码地址，详情请查看技巧说明部分（技巧是通用的）。 1. sw…"}, {"id": "6939409032025210917", "title": "认识7种CSS选择器", "desc": "标签选择器比如要选中网页中所有的 p 标签id选择器id 是身份、名字的意思，给一个HTML标签添加一个 id 属性，这个HTML标签就有了唯一的名字，所以同一个网页中不能出现重复的 idCSS选择器"}, {"id": "6844903636749778951", "title": "vue内置组件——transition简单原理图文详解", "desc": "基本概念简单用法用v-if/v-show控制显示隐藏，使用transition组件控制其变化过程一个页面子组件router-view的消失隐藏，使用transition组件控制其变化过程类名介绍以上为"}, {"id": "6844903954912903175", "title": "我走过最远的路，就是移动端的坑", "desc": "但是，这里有问题啊，我们最后一篇要可以正常滚动啊，移动端的 touchmove 事件的默认行为就是滚动页面啊，我们给阻止掉了！！难受的一匹..."}, {"id": "6899240679784841229", "title": "移动WEB开发之rem适配布局", "desc": "rem的优势：父元素文字大小可能不一致，但是整个页面只有一个&#x3C;html>，可以很好的来控制整个页面的元素大小比例。 含义：将媒体类型或多个媒体特性连接到一起作为媒体查询的条件。 css需要书写大量看似没有逻辑的代码，css冗余度是比较高的。 本质上,Less包含一套自…"}, {"id": "6844903924567113736", "title": "rgba情况下：border-color和background-color颜色叠加问题。", "desc": "问题描述：border-color和background-color使用rgba颜色，border颜色会进行叠加。 1. border-color设置为transparent。（适合于border和background都是rgba且相同的情况） 2.使用background-c…"}, {"id": "6969856325245206558", "title": "3D转换", "desc": "1.认识 3D 转换 1.1. 3D 的特点 近大远小 物体和面遮挡不可见 1.2. 三维坐标系 三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的。 x 轴：水平向右 -- 注意：x 轴右边"}, {"id": "6969856239937257479", "title": "「HTML+CSS」--自定义加载动画【020】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 设置span标签 宽度、高度均为96px 背景色为渐变色：linear-gradient(0deg, red 33%, #2376b7"}, {"id": "6959195700160626719", "title": "css的几种居中方式", "desc": "1. position+margin计算偏移量 2. transform自动计算偏移量 3. margin:auto 4.text-algin、vertical-algin作用于行内元素"}, {"id": "6844903656274264072", "title": "CSS Modules 与 scoped 的不一样", "desc": "What?CSSModulesScopedHow?Cssmodules实现原理通过给样式名加hash字符串后缀的方式，实现特定作用域语境中的样式编译后的样式在全局唯一。具体效果demo由此可见cssm"}, {"id": "6844903593951100935", "title": "深入理解-CSS内联元素之line-height", "desc": "上一篇文章我们讨论了font-size，这一篇来说另一个与文字关系密切的属性line-height。这里涉及到了内联盒模型相关的东西，这里保持了与上一篇类似的结构，先来说说概念，然后是度量单位，最后来聊一个常见的内联元素的现象。 说到盒模型，只要了解css的基本都知道这个概念，…"}, {"id": "6882272759901061127", "title": "CSS-七种方式实现垂直居中", "desc": "一、table自带功能HTMLCSS二、100%高度的after、before加上inlineblockHTMLCSS三、div装成tableHTMLCSS四、margin-top：-50pxHTML"}, {"id": "6844903516843016199", "title": "webpack构建下换肤功能的实现思路", "desc": "到这里，运行 webpack && node cssExtract.js,index.html就变成上面期望的那样，我们得要了皮肤文件的一个mapping,并保存在window.cssUrls中，接下来，通过切换按钮的方式切换皮肤\b还是什么其他的就可以自由发挥了."}, {"id": "6912349699710124045", "title": "有趣的控制台使用方法", "desc": "大家都有用过各种类型的浏览器，每种浏览器都有自己的特色，本人拙见，在我用过的浏览器当中，我是最喜欢Chrome的，因为它对于调试脚本及前端设计调试都有它比其它浏览器有过之而无不及的地方。可能大家对console.log会有一定的了解，心里难免会想调试的时候用alert不就行了，…"}, {"id": "6844903645134192654", "title": "【译】如何更好的编写CSS", "desc": "废话不多说，咱们就开门见山吧：想写出优质的CSS代码将会是非常痛苦的。很多开发者都不想做CSS开发。我可以做你想做的一切，但是，除了CSS！ 当我在构建应用时，CSS是我挺讨厌的部分。但你无法摆脱它，对吧？我的意思是，正是因为我们如此的专注于用户体验和设计，所以现在我们才不能跳…"}, {"id": "6844903728772808711", "title": "variable fonts - 更小更灵活的字体", "desc": "variable fonts（下文中vf为缩写）是数字时代制作的字体技术，用更小的文件大小在web上提供更丰富的排版，但是一项新的技术往往伴随着新的挑战和复杂未知的情况。不过，我们要拥抱技术，那么怎么才能使用它呢？ 让我们从以下几个问题去学习一下variable fonts。 …"}, {"id": "6844903733873082376", "title": "Animation.css学习笔记", "desc": "animation.css是一款非常炫酷、有趣、跨浏览器的预设css3动画库，便于你在项目中引用。 如果想要设置其他的延时和加速效果，请在自己的代码中进行设置。"}, {"id": "6919829105873534990", "title": "用CSS 实现”干饭人“的叉子 [动画演示] [#8持续更新中.....]", "desc": "本文是 #8 Forking Crazy，实现一个叉子。 主要解决思路是，用三个div分别表示叉头，叉身，叉柄，然后用flexbox排成列，再使用box-shadow复制叉尖，最后使用border-radius弯曲叉身。 1. body 使用 display:flex， 创建三…"}, {"id": "6844903551940968455", "title": "vertical-align，今晚来我房间聊聊剧本", "desc": "其实图片和span都是对齐金线，因为span的高度和父元素的高度一致，金线为了迁就它，就跑到父元素中间去了。然后图片再去对齐金线，于是图片也居中了"}, {"id": "6844903555451584526", "title": "移动端相册", "desc": "这是一个利用zepto.js+animate.css+canvas简单的移动端手机相册。 Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。 如果你会用jquery，那么你也会用Zepto。Zepto.js API 中文版(…"}, {"id": "6952836801270644767", "title": "玩转CSS的艺术之美-变量计算 | 小册免费学", "desc": "CSS变量能用起来还是很爽的，不仅代码量少了不少，还避免了通过DOM操作去修改样式。此文主要总结了CSS变量的相关知识及实际应用。"}, {"id": "6844903568256794638", "title": "自己写了一个多行文本溢出文字补全的小库, 说不定你会用得到的", "desc": "有些时候产品会有这么个需求，希望给文章或者帖子给一个摘要，最多3行，或者其它行数，超出3行会补上'...'。当然这种很简单，用css可以搞定。但是遇上要求多点的产品，希望补上的是'...查看全文'，这样的话就难办了。 我也在网上查了很多，至少我没发现有一个比较好的解决方案，也参…"}, {"id": "6844903542042394631", "title": "一稿设计多端适配优雅的解决方案 - rem ", "desc": "为提高前端团队开发效率，输出高质量的前端页面代码，提高UI设计还原度，特编写该规范文档。本文档如有不对或者不合适的地方请及时提出。 ui设计师设计界面时建议以iphone6的两倍尺寸（750px）为设计标准尺寸，前端开发在开发页面先引用上述代码块，前端开发在选择标注时仍按照标准…"}, {"id": "6977373422137376776", "title": "CSS基础知识要点（Y7）", "desc": "1.【width】宽度和【height】高度 2.盒子模型（标准盒子模型和IE怪异盒子模型） 3.文本样式 4.CSS表格"}, {"id": "6844903966329798664", "title": "网文出海 • 书封自动化实践", "desc": "Inkstone 是一个面向海外原创作家和翻译的创作平台。大量的作家和作品，意味着大量的书封制作需求。这之前是需要设计师投入精力，或者花钱购买来解决的，淘宝的 5 元书封，说便宜也不便宜，和用户自己上传的书封一样，不保证版权方面没有问题，存在着各种风险。而此时浏览器端书封制作系…"}, {"id": "6844903639153131534", "title": "嗨，送你一张Web性能优化地图", "desc": "本文主要介绍性能优化需要做的事以及需要考虑的问题。目的在于给读者脑海中生成一个宏观的地图。"}, {"id": "6844904152284266504", "title": "前端中实现元素sticky特性的两种方法", "desc": "图二、红色区块滑动到顶部后，页面继续下滑，出现黑色区块。红色区块此时表现为fixed。"}, {"id": "6844903588242653192", "title": "30分钟快速了解webpack", "desc": "(2) loader:如果你只需要一个loader来处理那么就传一个字符串，如果有多个则写一个数组（这里需要两个css-loader解析css里的路径如背景图路径等等，style-loader用来把css文件内容变为style标签并插入）转换的时候是按数组从右往左去转换的。 p…"}, {"id": "6844904002228846600", "title": "你不知道的 CSS ： Next-generation web styling", "desc": "最近看了 Chrome Dev Summit 2019 大会视频, 了解到了很多之前不知道的 CSS 新特性，挺有意思的。 下面我就介绍几个激动人心的特性。 1. Stickey Stack stickey 属性我们或许都听说过，常见于吸顶需求。 当我们滚动容器的时候， sti…"}, {"id": "6883684521296789517", "title": "利用@media screen实现页面自适应", "desc": "优点：无需插件和手机主题，对移动设备友好，能够适应各种窗口大小。只需要在CSS中添加@media screen属性，根据浏览器宽度判断并输出不同的样式。 随后，添加@media screen属性，控制自适应的样式。 上面的代码表示，当页面的宽度小于600px时，类a的样式将采用…"}, {"id": "6981406414875049997", "title": "CSS 浮动", "desc": "浮动的特性 float 属性 下面我们用三个 div 来设置不同情况的 div 浮动来通过例子来理解 float 以及 overflow。 三个 div 都不浮动 样例代码： 效果截图： 第一个 di"}, {"id": "6844903830652452877", "title": "（09）CSS 给盒子、背景、链接、列表、表单、表格等加样式 | CSS", "desc": "前言： 通过前 8 篇文章基础知识的铺垫，我们也算是见识了 CSS 的“神通广大”。 这篇文章，我们就把实际工作中最高频用到的“CSS 加样式”挨个列一列，用一行行代码来展示 CSS 是如何给“盒子”、“背景”、“链接”、“列表”、“表单”、“表格”等加样式的。 本篇的所有知识…"}, {"id": "6925008958558044174", "title": "CSS-你不知道的Z-Index", "desc": "z-index的问题在于很少有人理解它真正的工作原理它并不复杂，但是如果你没有真正的花时间去阅读它的规范，肯定存在一些你完全不知道的关键点如果不相信我的话可以看看你怎么解决下面这个问题问题在下面的HT"}, {"id": "6844904053055422471", "title": "【译】你应该知道的5个CSS面试问题(上)", "desc": "Flex 布局和 grid 布局都是创建网页布局的好方法。但是，面试官想知道的是两者的主要区别：它们具有哪些功能和更强大灵活的功能？以及应该在何时使用？ Flex 布局是 1D。这意味着使用 flex 布局可以操作行或列，但只能同时操作行和列中的任意一个。在 grid 布局中，…"}, {"id": "6844903838864900109", "title": "掌握web开发基础系列--长度单位", "desc": "我们常用的其实就是px，em，rem，%四种，下文中我们将对常用的长度单位重点分析，对非常用的长度单位简单介绍。 首先我们要知道css中的长度单位可以分为两类：相对长度单位 和 绝对长度单位 。 css相对长度单位中的 “相对” 二字，表明了其长度会随着它的参考值的变化而变化，…"}, {"id": "6844903605976170504", "title": "前端优化的一些小技巧", "desc": "减少HTTP请求次数或者减少请求数据的大小1、采用CSS雪碧图（CSSSprit/CSS图片精灵）技术，把一些小图合并在一张大图上，使用的时候通过背景图片定位，定位到具体的某一张小图上2、真实项目中，"}, {"id": "6844903665115856904", "title": "CSS 样式防御", "desc": "顾名思义，就是保护你写的样式最后是你想展现的样子。一般样式被破坏多发生于第三方应用编程中，当编写的组件被应用于第三方网站中，组件的样式经常会被网站本身的样式影响而破坏了它本来想展现的样子。 为什么会研究这个东西呢？因为有一天，我引用的第三方代码的 CSS 被我网站上的 CSS …"}, {"id": "6919130225901043719", "title": "盒模型", "desc": "CSS 盒模型有两种，一种是 content-box 一种是 border-box。 border-box 的宽度 width 表示内容区 + padding + border 的总和。 一般优先使用后者。 在 CSS 中我们广泛地使用两种“盒子” —— 块级盒子 (block…"}, {"id": "6844903733071970312", "title": "不同浏览器下word-wrap,word-break,white-space强制换行和不换行总结", "desc": "我们一般控制换行所用到的CSS属性一共有三个：word-wrap; word-break; white-space。这三个属性可以说是专为了文字断行而创造出来的。首先我们得知道这三个属性到底是做什么用地： normal: 允许内容顶开指定的容器边界。 break-word: 内…"}, {"id": "6844903888836001806", "title": "[译] CSS 思维模式", "desc": "啊，是的，CSS。它几乎每个星期都是网络上热议的话题。它太难了。它太简单了。它无法预测。它过时了。此处应该有一张 Peter Griffin 折腾百叶窗的恶搞图。 我不知道为什么 CSS 会在开发者中激发出如此多的不同情绪，但我有一种直觉，为什么有时候它看起来不合逻辑或令人沮丧…"}, {"id": "6844903548937830408", "title": "在网页上如何使用 Variable Fonts", "desc": "variable font 可变字体，可以变化出各种不同的字重、字宽或笔画形状等等"}, {"id": "6844903751728234509", "title": "Even more about how Flexbox works — explained in big, colorful, animated gifs", "desc": "Last time we got started with the basic Flexbox properties: flex-direction, justify-content, align-items, and align-self. These commands ar…"}, {"id": "6844903536656924679", "title": "深入理解SVG feDisplacementMap滤镜及实际应用", "desc": "如何在项目中应用水波效果，这个是即插即用的，当下的就能带来收益。 至于feDisplacementMap相关知识，是留给后来人的，那些致力于在图形交互领域有所成长的小伙伴。 feDisplacementMap滤镜的原理和特性在不同的语言环境中，其实都是相通的，例如WebGL中"}, {"id": "6844903652927225863", "title": "优化基于文本的资产的编码和传送大小", "desc": "除了避免不必要的资源下载，在提高网页加载速度上您可以采取的最有效措施就是，通过优化和压缩其余资源来最大限度减小总下载大小。 在您消除了任何不必要的资源之后，下一步就是对浏览器需要下载的其余资源进行压缩。根据资源类型（文本、图像、字体等），有若干不同的技术可供您驱使：可在服务器上…"}, {"id": "6844903625836199944", "title": "Web Animations API 将在 Safari Preview 59 版本中被支持", "desc": "Over the last 8 months we have been working on adding support for Web Animations, a W3C standard offering Web developers a JavaScript API t…"}, {"id": "6844903588339122183", "title": "[CSS] 译文：简洁明了的响应式表格", "desc": "你必须承认，没有一种单一地能使表格响应式表现的方法，然后我们再来想办法来解决。Davide Rizzo 说过的这个我很赞同，并且这一伟大的领域我们已经实践了一段时间。 在一些有各种类型表格的网页上，内容会任意的疯狂地响应式的变化。我觉得最棘手的是对照表和普通内容布局表，而且也没…"}, {"id": "6904180176330948621", "title": "CSS基础知识总结", "desc": "CSS全称为“层叠样式表 (Cascading Style Sheets)”，它主要是用于定义HTML内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等。 使用CSS样式的一个好处是通过定义某个样式，可以让不同网页位置的文字有着统一的字体、字号或者颜色等。 在英文大括号“｛…"}, {"id": "6944988602304561166", "title": "关于CSS中的背景属性background简述", "desc": "像我之前提到的那样，文档树中的每个元素只是一个矩形盒子。这些盒子都有一个背景层，背景层可以是完全透明或者其它颜色，也可以是一张图片。此背景层由8个CSS属性（加上1个简写的属性）控制。 background-color属性设置元素的背景颜色。它的值可以是任意合法的颜色值或者是t…"}, {"id": "6943862847961038879", "title": "CSS3新增的部分属性", "desc": "HTML5、CSS3和JavaScript API一起形成了新的网页标准，很多浏览器已经开始实施其中的部分新功能。其中CSS3负责网页样式的表现，为了达到更好的表现效果，增加了一些新属性。 目前CSS3的部分属性在一些浏览器上处在实验阶段，为了在文档中有效应用这条规则，必须使用…"}, {"id": "6844903939306061837", "title": "浏览器渲染与 CSS 动画简介", "desc": "浏览器渲染过程步骤：根据HTML构建HTML树(DOM)根据CSS构建CSS树(CSSOM)将两棵树合并成一棵渲染树(rendertree)Layout布局（文档流、盒模型、计算大小和位置）Paint"}, {"id": "6844903497050095623", "title": "Devices.css", "desc": "Devices.css 是纯 CSS 实现的 iPhone X、iPhone 8、Galaxy S8、MacBook Pro、Surface Studio 等现代设备，内容区域遵循原屏幕分辨率比例，可用于首页或应用展示页。"}, {"id": "6844903559918518285", "title": "[英]用 CSS Grid Layout 重构 GitHub Contribution", "desc": "While learning CSS Grid Layout, I’ve found that the best way to internalise all the new concepts and terminology is by working on various l…"}, {"id": "6844903502397849608", "title": "Absolute Centering", "desc": "本文介绍了CSS中的 绝对居中 技巧，以及其他常用的居中技巧，并比较了各种居中技巧的特点，讲解的十分全面。"}, {"id": "6844903845428985869", "title": "关于Android工程师转vue的三两事儿(7)--适配篇", "desc": "在日常开发中你时常会遇到一种尴尬的情况--那就是你在开发前端的时候标记的尺寸只能在你开发的尺寸下面完美的呈现，在其他尺寸、屏幕下面会变得奇形怪状。正如如图所示的效果。 1、 在不同屏幕下面展示的效果一致，这就导致小屏幕的电脑需要借助滑动，并且在很多布局可能会存在显示不全或者换行…"}, {"id": "7008031913667461128", "title": "CSS的样式", "desc": "CSS的样式有哪几种？ css 样式代码插入的形式来看基本可以分为以下三种：内联式、嵌入式和外部式三种。 且优先级为：内联式>嵌入式>外部式。 注意： 嵌入式>外部式 有一个前提：嵌入式css样式的位"}, {"id": "7007401742857945101", "title": "flex弹性布局教程-06-项目属性flex和order", "desc": "本篇介绍了 flex 属性和 order 属性，flex属性就是 flex-grow、flex-shrink、flex-basis 三个属性的合集。 order 属性用来对项目进行排序。"}, {"id": "7007394075607302174", "title": "flex弹性布局教程-05-项目属性flex-shrink", "desc": "本篇介绍了 flex-shrink 属性，flow-grow 用于放大，那么 flex-shrink 就是缩小了，其缩小规则和 flex-grow 类似。 阅读时间约10~15分钟。"}, {"id": "7006670332211757092", "title": "当你讨厌 CSS 时如何编写 CSS", "desc": ""}, {"id": "7006492568372396045", "title": "元素大小设值单位 之 vw、px、 rem、em", "desc": "vw：视图宽度 px：设备像素值，绝对单位 rem： 相对单位， 相对于根html em：相对单位， 相对于父级 移动端设置：<meta name=\"viewport\" content=\"width="}, {"id": "7005512642190114852", "title": "CSS中cursor的使用", "desc": "1、CSS cursor属加粗样式性 cursor属性规定要显示的光标的类型（形状） 该属性定义了鼠标指针放在一个元素边界范围内时所用的光标形状 javascript语法 可能的值： default："}, {"id": "7003986165489467422", "title": "跟我一起玩转CSS变形", "desc": "前两天看到一篇文章做了一个“剑气”的加载动画，很有趣，自己顺道做了一下，发现变形属性已经不太记得了，想着写一篇文章复习一下。"}, {"id": "6955284148290322440", "title": "CSS 还能这样玩？奇思妙想渐变的艺术", "desc": "感受感受 CSS 之美，本文介绍了一种通过渐变背景配合小单位生成的美妙的背景图案方法，非常有意思，不要错过~"}, {"id": "6922257014840098830", "title": "CSS奇思妙想 -- 使用 CSS 创造艺术", "desc": "本文属于 CSS 绘图技巧其中一篇。之前有过一篇：在 CSS 中使用三角函数绘制曲线图形及展示动画 想写一篇关于 CSS 创造艺术的文章已久，本文主要介绍如何借助 CSS-doodle ，利用 CSS 快速创造美妙的 CSS 图形。 本文的所有技巧都会围绕这个布局展开，属于一类…"}, {"id": "6997649707384176647", "title": "前端面试总结-CSS", "desc": "CSS也是面试中高频问题的出处，其中布局（垂直居中）特别重要，其次就是inline元素和block元素的区别，以及一些常用的效果css实现"}, {"id": "7002628432672587789", "title": "与众不同的“走马灯”~", "desc": "前言 效果展示 实现思路 在下正是七省文状元兼参谋将军，绰号\"对王之王\"的对穿肠。今日给大家展示纯靠CSS实现的3D走马灯~ 首先我们先要将元素排列好，给每个子元素都定义好3D转换，接着依次沿着Y轴进"}, {"id": "6963235293587750943", "title": "我愿赌上一包辣条，这些定位相关你不知道", "desc": "玩儿着也能看懂的文章，带你揭秘奇奇怪怪的css定位，那些年那些定位，你都知道了嘛。图文并茂+举双手奉上demo+干（表）货（情包）满满，快进来看看叭"}, {"id": "7002144518199836679", "title": "CSS-float的工作原理和流的破坏与保护", "desc": "CSS-流的破坏和保护 前言 在日常开发中，经常会遇到float浮动导致的父级塌陷问题，为此，我们可以通过clearfix来解决，但内部到底发生了什么？ 本文将带你理解其中的原理，主要分为4个部分： "}, {"id": "7000738614501982221", "title": "面试官：BFC怎么触发，有什么作用？", "desc": "BFC即是块级格式化上下文的缩写，旨在创建一个独立的布局环境，其中的元素布局不受外界影响。 触发BFC的常见属性 overflow:hidden； display为inline-block、flex、"}, {"id": "6844904084936327182", "title": "妙用CSS变量，让你的CSS变得更心动", "desc": "CSS变量又叫CSS自定义属性，为什么会突然提起这个很少人用到的东西呢？因为最近在重构个人官网，不知道为什么突然喜欢用上CSS变量，可能其自身隐藏的魅力，让笔者对它刮目相看。 谈到为什么会在CSS中使用变量，下面举个栗子，估计大家一看就会明白。 看完可能会觉得使用CSS变量的代…"}, {"id": "6963251861134508045", "title": "快停止在 CSS 中使用像素单位", "desc": "为什么 Web 开发者如此盲目地使用 px 单位？这只是一个坏习惯吗？是因为缺乏其他单位的知识吗？也许是因为设计团队的模拟依赖于 px 和 pt？目前我们也无法明白为什么像素是大多数团队当前的首选单位"}, {"id": "7000909708412321800", "title": "这些CSS3动画你get了吗？", "desc": "前言 我们以前传统的动画可以是用js写的多一点，但是随之css3的出现，对动画的开发也比js简单，代码量也相对的会少一点。那我们今天就搞几"}, {"id": "6990160697648906254", "title": "🎉新主题！掘金编辑器新主题发布！", "desc": "为什么有这个想法？ UI 参考场景 色彩参考 参考自官方网站颜色，取 蓝、黄 两色，官方网站还是偏明亮的，所以对一些颜色进行了调整。 明日方舟官网 边框参考 引用参考 a 标签效果参考 悬浮在我上面试"}, {"id": "6985825629950181390", "title": "50 天学习 50 个项目 - HTML/CSS and JavaScript", "desc": "👍 👍 👍 项目源代码，点击【Github 原文链接】 所有项目如下所示： # 项目 在线演示 01 Expanding Cards Live Demo 02 Progress Steps Live "}, {"id": "6844903718249299981", "title": "2019年前端面试都聊啥？一起来看看", "desc": "JavaScript ES2015 规范出现后，一切都大变样啦。 该规范很大——随着对modules（模块）原生支持以及不断发展的函数式编程，新的 JavaScript 语言重焕新生。并且每年持续推出 ES2016，ES2017 ... 然而在面试或招聘前端开发时，期望、现实和…"}, {"id": "6935248489878126628", "title": "巧用 -webkit-box-reflect 倒影实现各类动效", "desc": "-webkit-box-reflect 是一个非常有意思的属性，它让 CSS 有能力像镜子一样，反射我们元素原本绘制的内容。 上一次写它，它的兼容性还非常非常的惨淡，但是到今天，虽然还是一个 Non-standard 的语法，但是兼容性已经大有改观，并且利用它，我们可以实现非常…"}, {"id": "6998953400423415816", "title": "简单又实用的加载动画", "desc": "这是我参与8月更文挑战的第222天，活动详情查看：8月更文挑战 背景 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "7007219099386249246", "title": "盒子垂直水平居中的几种方法", "desc": "一、定位 1、盒子宽高已知 2、盒子宽高未知 3、平移+定位 二、margin+padding 三、平移 四、table-cell布局 五、flex布局"}, {"id": "7004643117273972766", "title": "前端(CSS3、JS)动画库收集", "desc": "animate.style Bounce.js Effeckt.css hover.css magic.css"}, {"id": "6997477771723145230", "title": "输入框提示文字跳动效果", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 我们在设置表单时，一般都要设置一些 提示文字 搭配 输入框 来告知用户这里输入什么内容，此时根据提示文字的位置，我们一般有三种设计方案"}, {"id": "7000300640287064094", "title": "CSS的值与单位   em、rem详解", "desc": "绝对长度单位： 常用：px 不常用cm、mm、in、pc、pt 相对长度单位： 常用：em、rem、vw、vh 不常用：ex、ch、lh、vmin、vmax em:在font-size中使用是相对父元"}, {"id": "6844903742655954957", "title": "【CSS笔记】— 使用calc()计算宽高（vw/vh）", "desc": "简单来说就是CSS3中新增的一个函数，calculate（计算）的缩写。用于动态计算宽/高，你可以使用calc()给元素的各个属性设置值【margin、border、padding、font-size】等， 表达式中有“*”和“/”时，其前后可以没有空格，但建议留有空格。 你可…"}, {"id": "6844903790580072462", "title": "CSS @font-face性能优化", "desc": "本文主要介绍字体加载优化的常用策略，大部分内容为引用和翻译。 这样就可以使我们的网页用上自定义字体了。 除了font-family 和 src属性之外，还拥有font-style以及font-weight属性。 src可以指定多种字体，会按顺序依次适用，比如上面的示例中会先加载…"}, {"id": "6844904001633255431", "title": "《前端实战总结》之使用CSS3实现酷炫的3D旋转透视", "desc": "3D动画效果现在越来越普及，已经被广泛的应用到了各个平台，比如阿里云，华为云，webpack官网等。它可以更接近于真实的展示我们的产品和介绍，带来极强的视觉冲击感。所以说，为了让自己更加优秀，css3 3D动画必不可少。 当为元素定义 perspective 属性时，其子元素会…"}, {"id": "6997412966219907086", "title": "【CSS】常用的一些CSS选择器", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 CSS选择器，本篇文章主要介绍CSS中的一些选择器"}, {"id": "6977256316230664228", "title": "PhysicsEditor在CSS属性clip-path polygon中的应用", "desc": "无意中看到了国外一个动物保护主题的网站，发现主要动画效果都是用 CSS 的属性 clip-path 实现的"}, {"id": "6844904183401807879", "title": "【译】改善 CSS 的 10 个最佳实践", "desc": "CSS 看起来是一种非常直接且不易犯错的语言。只需要添加规则以对网站进行样式设置就可以了，对吗？对于只需要几个 CSS 文件的小型站点，可能是这种情况。但是在大型程序中，这样可能会使样式迅速失控。如何让它们更可控？ 事实是，就像其他任何语言一样，CSS的细微差别可以使你的设计有…"}, {"id": "7004424042476240909", "title": "轮播图banner", "desc": "1.写个div将需要放映的图片按顺序放入 2.给div设置宽高，使用弹性盒子，让图片横向排列（如果你想轮播图图片横向滚动的话），同时给div设置overflow: hidden;使超出div区域的部分"}, {"id": "6899219590832717837", "title": "应式网页中的高度设计，你认真的吗？", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 大家看到这个标题可能会以为小智是不是又写错别字了 😂，响应式高度设计？你认真的吗？ 因为“响应式Web设计”通常是在多个宽度和设备尺寸上检查浏览器。 我们一般通…"}, {"id": "6844903789686702087", "title": "[译] 选择 Grid 还是 Flex？", "desc": "然而，只是单单阅读推文并不会告诉我们始末。这篇文章旨在告诉读者两者的适用场景，以及在哪种情况下只能选择使用其中一个。 当浏览话题下面的回复时，我发现相当大数量的人只在页面级的布局中使用Grid，其他情况下直接使用 flexbox。如果你把这个当成一条准则，那么你在严重地限制自己…"}, {"id": "6844904002459549710", "title": "在 CSS 中使用三角函数绘制曲线图形及展示动画", "desc": "最近一直在使用 css-doodle 实现一些 CSS 效果。 css-doodle 是一个基于 Web-Component 的库。允许我们快速的创建基于 CSS Grid 布局的页面，以实现各种 CSS 效果（或许可以称之为 CSS 艺术）。后续几篇文章可能都会与之有关。 当…"}, {"id": "6844903589907808269", "title": "styled-components：一本通", "desc": "虽然在vue这样的框架里我们能在.vue文件里将css、js、html写在一起，但实际上它们的联系很弱，特别是js和css，它们完全无法沟通。 而styled-components很好的解决了这个问题，通过它，我们能让整个css架构跟着组件走，而不再仅仅是貌合神离的被放置在一个…"}, {"id": "6844903609776209927", "title": "React 快速上手 - 07 前端路由 react-router", "desc": "0. 安装 1. 先跑一个简单例子 2. 基础使用 BrowserRouter 是需要服务端配合, 是基于html5的pushState和replaceState的，很多浏览器不支持，存在兼容性问题。 需要匹配的将要被重定向路径。 若为真，重定向操作将会把新地址加入到访问历史记…"}, {"id": "6994352704189366302", "title": "CSS之linear-gradient（渐变、切角）", "desc": "linear-gradient有什么用？颜色渐变。从这个例子可以看出该属性最直接的效果是让容器渐变颜色。那么它接受的参数有什么呢？又有什么技巧呢？切角。切角的思路其实很简单，将其中一个颜色变为透明即可"}, {"id": "6985103470420295693", "title": "径向渐变", "desc": "径向渐变 盒子的background-imge属性可以用==radial-gradient()== 形式创建径向渐变背景 background-image:radial-gradient(50% 50"}, {"id": "6844903872037650440", "title": "CSS的一些你可能不知道的强大技巧", "desc": "现如今，各种前端框架盛行的时代，单纯的完成一些界面上的功能已经越来越方便了。然而，过多的使用了这些框架而不去多研究想想这类框架的具体实现，只是会用是不能迅速提高自己个人能力的，相反，用多了有时候会遮蔽自己的视野，无法完成自己的知识体系升级。今天，我就准备讲讲CSS能够做的一些功…"}, {"id": "6969488438785474590", "title": "CSS 样式有冲突谁是老大？", "desc": "如果我在 <div class=\"iphone\">iphone 12</div> 标签上同时定义了 div {color: lightgreen;} .iphone {color :red;} 两个同"}, {"id": "6996494789512282126", "title": "【动画消消乐】HTML+CSS 自定义加载动画 065", "desc": "这是我参与8月更文挑战的第15天，活动详情查看：8月更文挑战 前言 效果展示（初始版） Demo代码 HTML CSS 仔细观察效果图，其实可以明显发现整个白色部分整体也在上下移动，只是移动距离较小。"}, {"id": "6930991016816148487", "title": "css系列之BFC", "desc": "BFC的全称是Block Formatting Context,格式化上下文，它是css中一个隐藏的属性，可以为一个元素开启BFC，简单来说它是一块独立的渲染区域，有自己的渲染规则。 display 为以下其中之一的值 inline-block，table-cell，table…"}, {"id": "6992615241037119525", "title": "less学习指南第二期 | 运算和内置函数", "desc": "LESS是一个CSS预处理器，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写"}, {"id": "6847009773481623566", "title": "分享一些可能会用到的原生前端CSS例子~", "desc": "今天来分享一些原生的CSS或者是CSS+JS的实际例子，这些例子比较的简单，但是都是实际开发之中可能遇到的。相信还是会对部分童鞋有所帮助~ 时间轴算是很常见效果，我们可以通过CSS的相对定位和绝对定位来实现，在开发的时候我们可以根据实际情况来调整各个属性的值，以满足需求。 对于…"}, {"id": "6844903667326271496", "title": "页面渲染：性能分析", "desc": "Chrome DevTools的performance面板可以记录和分析页面在运行时的所有活动。 配合无痕模式，可以避免chrome插件的影响。 1. 录制查看 下面部分是网页快照，浏览器按照一定时间间隔截取。 2. 实时查看 Paint Flashing 高亮显示网页中需要被…"}, {"id": "6982944261163614244", "title": "CSS 盒子阴影和文字阴影", "desc": "盒子阴影 CSS3中新增了盒子阴影，我们可以使用box-shadow属性为盒子添加阴影 语法： h-shadow:必需。水平阴影的位置。允许负值。 v-shadow:必需。垂直阴影的位置。允许负值。 "}, {"id": "6846687603278741517", "title": "前端如何提高用户体验：增强可点击区域的大小", "desc": "必生这种情况是因为可点击区域未应用于整个元素。 为了更加清楚，请参见下图，左图可点击区别(圈红部分)明显比右图的小很多，所以右图的实现用户体验会更好。 对于本文，会介绍一些事例，并通过事例演示如何增加可点击区别，提高用户体验。 WCAG全称Web Content Accessi…"}, {"id": "6997017671631896589", "title": "CSS中七种垂直居中方式", "desc": "==transform 居中== absolute +margin auto absolute + calc absolte + 负margin lineheigth flex grid ==总结=="}, {"id": "6966519476279836709", "title": "CSS很杂，很乱，记不住？一文替你整理那些琐碎的CSS知识点", "desc": "CSS很杂，很乱，记不住？一文替你整理那些琐碎的CSS知识点 写样式时，经常遇到一些bug或者某些属性值忘了，然后去查去解决，下次又忘了，又继续，挺烦人的，每次查的结果还参差不齐，痛定思痛，干脆自.."}, {"id": "6844903968302759950", "title": "关于《CSS选择器世界》这本书", "desc": "小时候，爷爷家在东边，外婆家在北边，我自己家在西南边，连起来正好是一个圈，以为这个圈就是全世界。 这个月国庆回去，沿着县道慢悠悠开去爷爷家不过30分钟车程，去外婆家不过40分钟车程，和每天上班时间差不多，才发现，小时候以为的全世界不过是个偏角一隅。 同样的，说起CSS中的选择器…"}, {"id": "6940627375537258527", "title": "一文搞懂grid布局 和 flex 布局及其区别", "desc": "Flexbox 是一维布局系统，适合做局部布局，比如导航栏组件。 Grid 是二维布局系统，通常用于整个页面的规划。 二者从应用场景来说并不冲突。虽然 Flexbox 也可以用于大的页面布局，但是没有 Grid 强大和灵活。二者结合使用更加轻松。 Flexbox布局（Flexi…"}, {"id": "6844903605481242637", "title": "开发必备的webpack4", "desc": "首先webpack4建议使用node版本在8.5以上，是因为要兼容新版npm下的npx，cmd中node -v查看node版本。 WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss…"}, {"id": "6904520023373512718", "title": "刚知道纯css也可以定义变量，真香！", "desc": "大家都知道css有calc()，可否知道:root{}和var()？下面我就给大家介绍下他们：1、变量的声明 :root{}声明变量的时候，变量名前面要加两根连词线（--）。上面代码中，body选择器"}, {"id": "6945089335452827684", "title": "css - 视觉格式化模型 (visual formatting model )", "desc": "为什么需要了解视觉格式化模型？ 解释一些css效果，下面的问题： 下面child1：一般为了水平居中会在水平方向上设置auto，下面的例子在垂直方向上设置auto，会导致垂直居中的效果。原因在最后：解"}, {"id": "6844903503828107277", "title": "10 个 CSS、SVG 和 Canvas 蒙版（mask）精彩实例", "desc": "随着浏览器对蒙版（mask）的支持越来越好，在web开发中使用蒙版（mask）也变得越来越流行，使用它可以实现一些非常好的视觉效果。"}, {"id": "6844904166477955080", "title": "什么是BFC,BFC有什么用", "desc": "1. BFC里面的box都会以垂直方向排列 2. 同一个BFC里面中相邻的两个盒子的外边距会重叠 3. 每个元素的左margin box的左边与包含块的border box的左边相接触(对于从左往右的格式,否则相反),即使存在浮动也一样 4. BFC的区域不会和float Bo…"}, {"id": "6976210450576998436", "title": "Flex布局-语法篇", "desc": "网页布局（layout）是 CSS 的一个重点应用。     布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。"}, {"id": "6844904018817335310", "title": "图片该如何优化来提高网站的性能，这里提供几种方法", "desc": "个人专栏 ES6 深入浅出已上线，深入ES6 ，通过案例学习掌握 ES6 中新特性一些使用技巧及原理，持续更新中，←点击可订阅。 为了保证的可读性，本文采用意译而非直译。 图像是web上提供的最基本的内容类型之一。他们说一张图片胜过千言万语。但是如果你不小心的话，图片大小有时高…"}, {"id": "6993652335654207501", "title": "你不知道的CSS冷知识", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 在CSS中我们常常使用到了字体、颜色、边框、内外间距、图片等内容。 除此之外，CSS中还有一些不常用但有用的小姿势（知识）。 废话不多"}, {"id": "6989168450153545764", "title": "postcss-loader 与 mini-css-extract-plugin 打包冲突问题", "desc": "postcss-loader 与 mini-css-extract-plugin 打包冲突问题 postcss-loader 简单来来说就是 css3 的一些特性 在低版本浏览器也能运行，自动添加加前"}, {"id": "6948603132624502814", "title": "CSS - 浮动详解", "desc": "网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。"}, {"id": "6844903497356279821", "title": "前端 101：给不了解前端的同学讲前端", "desc": "大家好，今天的分享主要分为以下三个部分。 由于目前计算机专业还没有为 Web 前端技术设立专门的课程，每位同学对前端的了解程度也不一样，今天的讲座会以最浅显的方式来为大家介绍 “前端”，帮助大家建立一个基本的概念。 我们来简单地看一看 “网页展现” 的整个过程。 比如这里有一个…"}, {"id": "6844903568772710414", "title": "一年前端面试打怪升级之路（二）", "desc": "最想去的一家公司，参加过他们的技术分享会，技术氛围早有耳闻。不局限于做商业化的项目，而是会投入精力去做优化流程和提高效率的事情，开发开源工具，或者重构老旧项目等等 在我问到部门工作流程，第一位面试官说了一句话：在确定好技术选型后，怎么爽怎么写。 全程历时将近3小时，是学到最多的…"}, {"id": "6844903587445751822", "title": "基于REM的移动端自适应布局方案", "desc": "本文章为前端进阶系列的一部分，介绍了基于REM布局的移动端响应式开发的原理以及具体方案。"}, {"id": "6844904160119226382", "title": "CSS 知识总结", "desc": "现在不再区分内联元素和块级元素,而是有display决定. 千万不要在 inline元素中加block元素. 当内容的宽度或者高度大于容器的宽度或高度时,会产生溢出现象. CSS中有两种盒子模型,一种是W3C标准的盒子模型(content-box),另一种是IE标准的(怪异)盒…"}, {"id": "6844903517795139597", "title": "巧用CSS3动画与精灵图制作关键帧动画", "desc": "这篇主要介绍CSS3中animation动画属性的animation-timing-function属性，并不会介绍CSS3的animation全部特性，如需了解CSS3的animation属性完整的使用技巧，可以看之前写的这一篇 玩转有趣的 CSS3 Animation 动画…"}, {"id": "6844903503911976973", "title": "精读《css-in-js 杀鸡用牛刀》", "desc": "继 精读《请停止 css-in-js 的行为》 这篇文章之后，我们又读了一篇抵制 css-in-js 的文章，虽然大部分观点都有道理，但部分存在可商榷之处，让我们分析一下这篇文章，了解 css 还做了哪些努力，以及 css-in-js 会如何发展。 作者认为，模块化 jsx 让…"}, {"id": "6844903503492546568", "title": "CSS counters 深度介绍", "desc": "学过一天前端的小白都知道，html 里面有一个标签叫做 ol——order list。通过 ol 和 li 的嵌套，我们能够得到前面有数字标号的列表。这位小白如果再多学几天，也许还会知道，css 里有一个属性叫做 list-style-type。通过它，能够控制列表标号的类型，…"}, {"id": "6897178216189034510", "title": "CSS中的transform、transition和animation基本用法", "desc": "transition属性可以被指定为一个或多个 CSS 属性的过渡效果，多个属性之间用逗号进行分隔。 eg transition:left 200ms, top 400ms 可以为动画变化的关键位置设置一定的顺序。 有两种写法，一种是 0% - 100%，中间可以创建多个百分比…"}, {"id": "6942744328737390599", "title": "CSS使用小技巧", "desc": "display: none：隐藏元素并破坏其渲染状态。 这意味着取消隐藏元素与渲染具有相同内容的新元素一样昂贵 visibility: hidden：隐藏元素并保持其渲染状态。 这并不能真正从文档中删除该元素，因为它（及其子树）仍占据页面上的几何空间，并且仍然可以单击。 它也可…"}, {"id": "6942731831556964359", "title": "CSS3（二）", "desc": "| animation-play-state | 规定动画是否正在运行或暂停。默认是 running， 还有 paused | | ease | 默认。动画以低速开始，中间加快，在结束前变慢 |"}, {"id": "6844903576959975437", "title": "Vue-rap 构建基于 Vue 的流应用", "desc": "前几年前端还是html+css+js简单的配合,还记得那几年公司招前端要求很低,工资开的也低,前端需要学习的东西很低,一个新人(特别是刚出来的应届毕业生)只需要简单的培训下就可以快速进入公司前端的工作"}, {"id": "6844904056675287053", "title": "CSS3中的Flex整理", "desc": "Flexbox布局模块旨在提供一个更有效的方式，在一个容器里面去布局分配空间。即使容器的大小是未知的，或者动态变化的。 Flex 布局背后的主要思想是让容器能够改变其项目的宽度 / 高度(和顺序) ，以最佳地填充可用空间(主要是适应各种显示设备和屏幕大小)。 Flex 容器扩展…"}, {"id": "6952845341536452639", "title": "「HTML+CSS」--自定义加载动画【010】", "desc": "前言 效果展示 思路 这里用span元素代表外层白色圆圈 两个红色小球分别用span的两个伪类::before和::after代表 根据效果图，可以大概得出思路 先利用span生成一个正方形，设置好边"}, {"id": "6844903505220616206", "title": "对于浮动的定义我遗漏了什么", "desc": "本次记录一段突然令我困惑的css代码。主要是由于css一直掌握的不好同时突然出现了一种很常见的浮动情况但是并不能用已有的认知来解释，故从规范中寻找答案。"}, {"id": "6844903844720148487", "title": "【Hello CSS】第三章-浏览器的视图与坐标", "desc": "因为上一篇中有提到过CSS 逻辑属性的变革，从物理概念跳跃到了逻辑概念，也就是从top 、 right 、 bottom、 left更新为block、inline、start、 end。由于Flex box跟Grid box是CSS3的布局模式，所以自然而然会使用更加适应于新时…"}, {"id": "6975516827656912909", "title": "css3学习阶段总结", "desc": "css3中常用知识点及常见问题，主要总结了css3对于css2.1新增的属性，非常基础，适合前端新人，一起学习进步！"}, {"id": "6914092056755306504", "title": "CSS中的动画", "desc": "能够非常容易地创建简单动画，你甚至不需要了解JavaScript就能创建动画。 动画运行效果良好，甚至在低性能的系统上。渲染引擎会使用跳帧或者其他技术以保证动画表现尽可能的流畅。而使用JavaScript实现的动画通常表现不佳（除非经过很好的设计）。 让浏览器控制动画序列，允许…"}, {"id": "6913851204900978702", "title": "CSS中的background", "desc": "background 是一种 CSS 简写属性，用于一次性集中定义各种背景属性，包括 color, image, origin 与 size, repeat 方式等等。 设置元素背景图片，可设置多个，也可以是渐变色。设置多个背景先设置的在上方。border会在它们之上，back…"}, {"id": "6844903861606580238", "title": "「译」Flexbox 基本原理", "desc": "整理自 MDN web docs 的笔记，同时参考了 Web Bos 上的 什么是 Flexbox 系列视频。 Flexbox 是 Flexible Box Module 的缩写。 它是一种布局模型，允许我们方便地控制 html 元素之间的空间分布和对齐 [2]。 Flexbo…"}, {"id": "6844903920301506573", "title": "实用的CSS动画与应用", "desc": "后置 store.commit('UPDATE_LOADING', { isLoading: false})，可以添加延时，为了缓解异步加载组件的等待。 大组件加载路由，例如Eachat和高德地图的引入也页面，在route中定义meta路由元信息，对路由进行判断。 接口调用时，…"}, {"id": "6904276123136294926", "title": "CSS-标准文档流与浮动", "desc": "在元素的排版过程中，元素会默认自动从左往右，从上往下的流式排列方式。前面内容发生变化，后面的内容位置也会随着发生变化。HTML就是一种标准的文档流文件。HTML中的标准文档流特点通过两种方式体现：微观现象和元素等级。 元素等级：标准文档流中大部分元素是区分等级的，习惯将元素划分…"}, {"id": "6844903936105644039", "title": "寻根问底之——元素隐藏你知多少？", "desc": "一、切换显隐时会导致reflow(回流)，从而引起repaint(重绘)，当页面中reflow增多至一定程度时，会导致cpu使用率飙高。 原因是：浏览器会解析HTML标签生成DOM Tree，解析CSS生成CSSOM，然后将DOM Tree和CSSOM合并生成Render Tr…"}, {"id": "6844903585692532743", "title": "#每日一记#让我们玩起流行的渐变色", "desc": "今年年初有一波新的设计趋势席卷前端 UI 界，那就是**「彩色渐变」**。从 Ins 的 logo 开始，淘宝、qq 等阿里系 app 也开始使用大面积的渐变色作为 ui 色彩方案。 正所谓风水轮流转，时尚永远是循环的，当年的拟物到扁平，平了的不只是空间还有色彩，大家发现太平了…"}, {"id": "6847902223087697934", "title": "记录水平垂直居中的多种方式和优缺点", "desc": "初级前端面试必考题，很多面试官都喜欢问这个问题。实习生的我面试遇到好几次了，在这里做一下总结。 在使用子元素的外边距为子元素宽高一半的负值进行相反方向偏移就可以让子元素居中了。 设置各个方向的距离都是0，margin设为auto代表子元素到父元素上下、左右的距离相同，就可以实现…"}, {"id": "6844903729288871943", "title": "CSS届的绘图板CSS Paint API简介", "desc": "本文介绍CSS Paint API，CSS Paint API是CSS Houdini的一部分，是目前应用比较多的API之一，其是做什么用的呢？有什么好处呢？本文就将通过一个简单的案例，带你快速了解CSS Paint API，本文属于前端技术广度方面的学习，博闻强识。"}, {"id": "6844903859312132110", "title": "CSS八等分圆", "desc": "对于CSS的练习介绍如何绘制八等分的圆。 这个地方的主要思路是将一个八等分的圆分成两部分。左边和右边的圆分别用半圆旋转而得。"}, {"id": "6844903502372667399", "title": "让动画更自然,运动曲线探究与应用", "desc": "导语 本文将从为什么要探究更自然的动画、如何探究运动曲线方程、列举常用的运动曲线、分别使用js和css实现曲线动画效果、可视化实现工具这几个方面进行介绍。希望阅读后，本文能给你在制作动画效果时带来一点帮助。"}, {"id": "6978839159196778504", "title": "css 学习总结", "desc": "CSS全局属性值inherit，initial，unset，revert比较 inherit是继承的意思。 initial初始值，css初始值。 unset表示不固定值，如果该属性是默认继承属性，该值"}, {"id": "6844903608647942158", "title": "CSS中最全的换行处理方式", "desc": "特别声明，本文来源于@CHRIS COYIER的《Where Lines Break is Complicated. Here’s all the Related CSS and HTML》。 在Web页面上常常可以看到某个元素内部有一个很长的单词，元素的宽度不足以容纳它。一个…"}, {"id": "6844903536254255112", "title": "CSS工程化演进", "desc": "CSS 是 Web 开发中不可或缺的一部分，在前端工程化的不断进步的今天，一方面在 CSS 特性随着规范的升级越来越丰富，另一方面，前端业务复杂性的增加带来的工程愈加庞大，驱使者开发者不断寻找CSS工程化的最佳实践。 不可否认，无论从现代前端框架（React，Vue，Angul…"}, {"id": "6844903560514109447", "title": "简单实用的css属性：border", "desc": "一个样式可以用很多不同的方式去实现，知道每个属性的特征才能更好的运用它们"}, {"id": "6844903633323032583", "title": "微信小程序 自定义组件 - 弹出菜单demo", "desc": "之前看七月老师的视频，介绍到template的时候，七月老师说，这个template有一个缺点，大概意思就是封装度不够，只模板化了页面和样式，逻辑那些写不了。我也很困惑这件事，今天了解到自定义组件这个概念，就试了试，感觉好像弥补了template的那个缺点，于是写了个小demo…"}, {"id": "6844903566390329357", "title": "[英] 2018 JavaScript 学习概览", "desc": "You’ve been in the tech industry for a number of years, you know HTML and CSS inside-and-out, and you make a good living. But, you have a l…"}, {"id": "6844904052401438727", "title": "[译] CSS 计数器教程", "desc": "使用 CSS 计数器属性可以将任何元素转成有序列表，类似 <ol> 的功能。如果你需要为一个页面里的标题元素自动编号或者制作目录，使用它就非常方便了。 下面是它的使用。 下面解释计数器属性的工作原理。 这里的每一步，对应一个 CSS 属性，所以一共需要 3 个属性的使用，才能完…"}, {"id": "6844904138384343053", "title": "css的变量教程,更强大的css", "desc": "当微软宣布 Edge 浏览器将支持 CSS 变量。这个重要的 CSS 新功能，所有主要浏览器已经都支持了。本文全面介绍如何使用它，你会发现原生 CSS 从此变得异常强大。 声明变量的时候，变量名前面要加两根连词线（--）。 上面代码中，body选择器里面声明了两个变量：--fo…"}, {"id": "6844903792228433933", "title": "层叠等级和层叠上下文", "desc": "以往，由于自己使用z-index的频率不大，所以对这个CSS属性存在比较片面的认识。一直认为z-index就是用来描述定义一个元素在屏幕Z轴上的堆叠顺序。z-index值越大在Z轴 上就越靠上，也就是离屏幕观察者越近。最后才发现这个认识存在很大的问题： 1 首先，z-index…"}, {"id": "6923140676301520910", "title": "调试 CSS 的方法", "desc": "我经历过许多 CSS 代码的调试工作，有别人写的也有自己写的，有移动端平台的也有标准桌面浏览器的，从陈旧的 IE 到最新的基于 Webkit 的每日构建。经验告诉我，很多人并没有一个标准的 CSS 调试流程。 我发现在大多数情况下，拥有专业的解决问题的方法，能够节省花在 bug…"}, {"id": "6844903582106386446", "title": "webpack v4 从dev到prd", "desc": "Node.js 4 is no longer supported. Source Code was upgraded to a higher ecmascript version. development 模式给你极致的开发体验，包含浏览器调试相关工具，极快的增量编译，丰富全面…"}, {"id": "6844903619574120461", "title": "不一样的ZTree，权限树.js插件", "desc": "每一个有趣的创新，都源于苦逼的生活。 在最近的工作中，遇到一个做权限管理筛选的需求。 第一次遇到这样的需求，花费了很多时间去解决，在解决的过程中闪现一个灵感，觉得可以结合函数的递归用更少的代码去解决这个需求。"}, {"id": "6945741096873885733", "title": "CSS 命名空间", "desc": "我们之所以需要命名空间，一方面是为了扩展，最重要的原因是在看代码的时候，能够简单快速的了解各个函数，模块是做什么的。我认为这是命名空间需要解决的问题，也就是说变量冲突能够在隔一段时间或者别人接你的代码的时候能够快速上手，这个我觉得是比较重要的。 BEM 最终得到的 class …"}, {"id": "6844903545100042248", "title": "instagram.css - 使用纯 CSS 实现 Instagram 上的滤镜效果", "desc": "文艺一下"}, {"id": "6844903592952856584", "title": "JavaScript 是如何工作的：渲染引擎以及优化建议", "desc": "这是专门探索 JavaScript 及其构建组件的系列 #11。 在识别和描述核心元素的过程中，我们也分享了我们在构建[SessionStack](https://www.sessionstack.com/?utm_source=medium&utm_medium=blog&ut"}, {"id": "6951671490538881060", "title": "编程回忆录 - 大杂烩-1 (H5C3)", "desc": "此文章只记录关于项目实战的记录,记录了4个项目的核心代码，以及画图分析重点知识，满足了前端的PC页面以及移动页面的布局需求。"}, {"id": "6992534186347216909", "title": "CSS - 清除浮动影响的几种方式总结", "desc": "背景 有两个div父盒子, 内部子元素是浮动的: 方法一: 设置父元素高度 添加父元素高度, 值等于子元素高度 缺点: 如果浮动的子元素大小改变, 父元素不能自适应 方法二: 给父元素添加clear属"}, {"id": "6992521872059400199", "title": "CSS基础知识1-选择器", "desc": "这是我参与8月更文挑战的第2天，活动详情查看： 8月更文挑战 CSS（层叠样式表）简介 CSS可以用来为网页创建样式表，通过样式表可以对网页进行修饰，比如我们在一个网页中看到的的图片大小，背景颜色等都"}, {"id": "6858195013407997960", "title": "CSS Scroll Snap 的工作模式", "desc": "还记不记得，为了在页面上实现优雅的滚动效果（gallery, slide 等等）需要借助 JS 的那些日子？送走 JS，投入 CSS Scroll Snap 怀抱吧。 很久以前，当时 CSS 还处于第一阶段，我们就介绍过 CSS Scroll Snap，它可以让滚动的元素紧贴容…"}, {"id": "6896414154753015815", "title": "简短而全面解说CSS选择器层叠、优先级、冲突、继承、以及属性值计算过程", "desc": "这篇文章最核心的内容是属性值的计算过程，但是在介绍这个过程之前，需要以下必备的知识点，如果您已经很熟悉了，可以直接跳到最后。 1. 选择器分类 2. 优先级 3. 属性值计算过程 元素是怎么呈现的？每个元素相应的几百个CSS属性都必须有值，才能被渲染到页面上，没错，每个元素都有…"}, {"id": "6844903496743911432", "title": "前端技能学习导航", "desc": "编辑工具 WebStormJetbrains公司旗下一款JavaScript 开发工具，被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等。与IntelliJ IDEA同源，继承了IntelliJ IDEA强…"}, {"id": "6981779327645909029", "title": "《CSS 知识总结》", "desc": "CSS语法和文档流 CSS的厉害之处 CSS的厉害之处在于层叠样式表，其中包括 样式层叠：可以多次对同一选择器选择样式声明 选择器层叠：可以用不同选择器对同一个元素声明样式 文件层叠：可以用多个文件层"}, {"id": "6951595764929789989", "title": "CSS性能优化", "desc": "本文将会详细介绍CSS性能优化相关的技巧，笔者将它们分为实践型和建议型两类，共8个小技巧。实践型技巧能够快速地应用在项目中，能够很好地提升性能，也是笔者经常使用的，建议大家尽快在项目中实践。建议型技巧"}, {"id": "6985785095575568392", "title": "「HTML+CSS」--自定义加载动画【039】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 相对定位 背景色：yellow（这里只用作提示，后面会取消背景色的） 效果图如下 步骤"}, {"id": "6844903860780138510", "title": "CSS3 弹性布局快速入门", "desc": "弹性布局是新一代的布局方式，传统布局中使用浮动布局会给我们带来不少弊端，如CSS代码高度依赖于HTML代码结构等等，下面我将用几个例子让大家快速学会弹性布局。 PS：弹性布局适用于较简单的场景，过于复杂的场景可以尝试着使用CSS3的Grid布局，弹性布局在PC端中还存在兼容性问…"}, {"id": "6947536611391307783", "title": "CSS 水平垂直居中的方法", "desc": "CSS 水平垂直居中一直是一个值得讨论的问题，面试的时候也经常被问到。这里做一个小总结。 1. absolute + margin(负) 2. absolute + margin auto 3. absolute + calc 4. absolute + transform 5…"}, {"id": "6844903510379610120", "title": "基于 webpack 的持久化缓存方案", "desc": "基于 webpack 的持久化缓存方案"}, {"id": "6844903781004476423", "title": "前端面试之层叠上下文(z-index)", "desc": "层叠上下文是HTML元素的三维概念，这些HTML元素在一条假想的相对于面向（电脑屏幕的）视窗或者网页的用户的z轴上延伸，HTML元素依据其自身属性按照优先级顺序占用层叠上下文的空间。 所以一个页面中往往不仅仅只有一个层叠上下文(因为有很多种方式可以生成层叠上下文)，在一个层叠上…"}, {"id": "6970145707390926879", "title": "重学CSS系列，细说内联元素与流", "desc": "这是我参与更文挑战的第 5 天，活动详情查看： 更文挑战 重学CSS系列，细说内联元素与流 1. 关于内联元素line-height 1.1 内联元素的高度之本——line-height 内联元素的高"}, {"id": "6844903614381555726", "title": "HTML/BODY的背景渲染原理", "desc": "当html标签被设置了背景色时，我们看见的是真正作用在body上的背景色。 人在前端已经漂泊数年，机缘巧合才发现，这几年给body写的背景色，全被浏览器给「吃」了。文中涉及的是CSS中关于特殊元素（html/body）的背景渲染的原理，对你而言它也许是块新大陆，也可能，你早已熟…"}, {"id": "6844903605376385038", "title": "重构 - 保持函数的单一职责", "desc": "上篇文章写了添加扩展性方面的重构，讲到了开放封闭原则。学习的步伐不能就此停止，今天的文章，将会提及开发的另一个原则：单一职责原则。通俗点说就是一个函数只做一件事，下面将会通过几个实例，探究单一职责原则。 单一职责的定义可以理解为：一个对象或者方法，只做一件事。 遵守单一职责的实…"}, {"id": "6910840244745011213", "title": "CSS必知|重点属性flex|实践技巧|温故知新", "desc": "学海无涯，不要沉浸在知识的海洋里，迷失自己。要知道自己想要什么，抓住重点，不忘初心。这个世界上百分之20的人，掌握着百分之80的财富。接下来一系列教程，就带领大家抓住重点，一起做那百分之20的人。往期"}, {"id": "6844904161050378248", "title": "勇闯44关深入浅出CSS基础之一 ｜ FCC前端教程", "desc": "欢迎回来三钻的FCC前端教程，上一篇文章我们通过28关学会了HTML与HTML5网页开发基础。这一期我们一起攻破前端第二大知识点《CSS基础入门》。因为这一课一共有44关，我把文章分成两期更新。敬请期待！ Cascading Style Sheet缩写为CSS，顾名思义就是层叠…"}, {"id": "6844903599923806222", "title": "webpack实战（一）：真实项目中一个完整的webpack配置", "desc": "前段时间，使用webpack查阅资料时发现要么是入门级文章，要么是如何优化打包速度或如何使用某个plugin、loader的文章。找不到一个在真实项目中的使用webpack的完整方案用以参考，所以花了许多精力去整合资料、查看代码和踩坑。 因此我将自己摸索的一个配置方案，分享出来…"}, {"id": "6972180109239255048", "title": "用CSS做一个3d旋转立方体", "desc": "用CSS做一个3d旋转立方体，通过animation设置旋转，通过transform设置立方体6个面相对中心轴的偏移"}, {"id": "6844903651954163720", "title": "记一个JavaScript图片轮播思路与代码", "desc": "喜欢并学习前端，一路摸爬滚打过来，现在算算也快满一年的，每天或多或少都会来“拜读”大家的写的文章，学习与感悟了不少，作为一名要变的更强的前端小哥哥，在这个节点上，也想写点东西，算是完成自己的一个小目标，也是抛砖引玉吧，错误或者建议尽管砸过来，反正我头铁，嘿嘿。 前几天，项目需要…"}, {"id": "6844903510731915277", "title": "CSS居中的各种实现方式", "desc": "CSS中如何完美做到居中，一直是令前端工程师头疼的问题。最近读到CSS-TRICKS中的一篇帖子，将居中问题的解决方案策略化。感觉收获很大，翻译过来供大家交流学习。 我认为问题的关键，不在于怎么做，而在于我们如何从诸多居中方法中选择出适应当前情景的。 所以接下来，让我们一起创建…"}, {"id": "6963873166640807966", "title": "【夯实基础--CSS】=＞ 背景(background)", "desc": "CSS背景(background) 「1. 背景颜色」 「2. 背景图片(image)」 「3. 背景平铺（repeat）」 参数 作用 repeat 背景图像在纵向和横向上平铺（默认的） no-re"}, {"id": "6905945107745210382", "title": "CSS简介：初识CSS", "desc": "使用css的目的就是让网页具有美观一致的页面，另外一个最重要的原因是内容与格式分离 在没有CSS之前，我们想要修改HTML元素的样式需要为每个HTML元素单独定义样式属性，当HTML内容非常多时，就会定义很多重复的样式属性，并且修改的时候需要逐个修改，费心费力。是时候做出改变了…"}, {"id": "6899466946723446798", "title": "CSS实现自然的带三角的气泡", "desc": "这阴影下边那块怎么设置都搞不定，陷入沉思。这时候，同事拍一拍我的肩膀，跟我说你这个没用，我这个有用，只见他就是一鞭，两鞭，三鞭，两分多钟以后写好了。 然后关于 box-shadow和 drop-shadow的区别就很明显了， box-shadow是盒子的投影，它只是盒子的阴影，…"}, {"id": "6844903496290926605", "title": "借助CSS Shapes实现元素滚动自动环绕iPhone X的刘海", "desc": "iPhone X造型上有个显著的特质，就是有个明显的刘海。然后，也出现了一些酷酷的交互。CSS3里面针对这种特定形状环绕的效果已经支持很久了，CSS3 Shapes和CSS3 Regions都是可以实现的"}, {"id": "6844903687454916616", "title": "手把手教你实现一个引导动画", "desc": "最近看了一些文章，知道了实现引导动画的基本原理，所以决定来自己亲手做一个通用的引导动画类。 通过维护一个Modal实例，使用Modal的mask来隐藏掉页面的其他元素。 根据用户传入的需要引导的元素列表，依次来展示元素。展示元素的原理：通过cloneNode来复制一个当前要展示…"}, {"id": "6844904110194425870", "title": "css3 animation && filter: blur()引发的动画性能问题排查", "desc": "我们在工作中经常会遇到一些动画卡顿的问题，往往是一些性能比较差的安卓手机，笔者最近就遇到了这样的情况，这里也记录下本次排查问题的过程。 因为页面并不复杂，所以看到页面动画卡顿之后，能够很快速的猜想到是哪些css属性引起的卡顿，通过注释掉代码后，就能够很快的验证自己的推论，这次排…"}, {"id": "6844903559423590414", "title": "transform与position:fixed的那些恩怨", "desc": "在写这篇文章之前，我理解的fixed元素是这样的：(摘自CSS布局基础) 但是直到我看到这篇文章CSS 为什么这么难学？,作者在文章中提到了一个“黑魔法”，如何让fixed元素不再以viewport为定位参考对象，而是以父容器为参考对象。这下子我算是get到了一个技能。唯一不认…"}, {"id": "6844903496756494344", "title": "CSS-position:static/relative/absolute/fixed定位", "desc": "对象遵循标准文档流中，top, right, bottom, left 等属性失效。 relative（相对定位） 对象遵循标准文档流中，依赖top, right, bottom, left 等属性相对于该对象在标准文档流中的位置进行偏移，同时可通过z-index定义层叠关系…"}, {"id": "6844903666885869575", "title": "前端项目框架搭建随笔---Tab组件的编写", "desc": "低下头看了看自己的手环。距离自己的flag已经跳票3天了。。。 很简单的功能，很简洁的UI。 为了自由度高一点，我们采用 Tab+TabPanel 的方式制作。这种制作方式也是大部分UI框架的制作方式 以往我们写Tab 头部写头部的东西，内容写内容的东西。两者分开来写。便于理解…"}, {"id": "6979532323893018655", "title": "CSS 盒子模型", "desc": "div是什么 大概就这样，可以把整个网页分成不同的部分。 每个 div 可以看成一个盒子 元素宽高 样例代码： 效果截图： 边框颜色 边框粗细 border-width: 像素值 边框样式 样例代码："}, {"id": "6979530795375394846", "title": "CSS 伪类", "desc": "语法 伪类选择元素基于的是当前元素处于的状态。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。 各种属性 下表： · 样例 :hove"}, {"id": "6904609027700097031", "title": "CSS规范及命名", "desc": "1. 命名风格 使用带前缀的命名空间，防止命名冲突。 选择器中使用连字符，以提高可读性。 2. 值与单位 值为 0 时不用添加单位。 值在 -1 和 1 之间时，不需要加 0。 颜色统一用 16 进制表示，重复的字母省略。除了是带有 alpha 的颜色信息可以使用 rgba()…"}, {"id": "6844904174631550990", "title": "“入坑”自媒体写作，我有干货与你分享", "desc": "自媒体时代，人人都可以发声，大家都可以通过互联网发表自己的言论和观点。常见的自媒体平台有微信公众号，知乎，微博，头条，以及各个新闻博客平台等。自媒体写作与传统写作最大的不同，就是突出个性思维，只要找准自己的定位，一直坚持一个方向深耕，且不说会得到什么样的收益，但一定会提升自己的…"}, {"id": "6898977505730887694", "title": "CSS3", "desc": "含义： 子级选择器用于选择带有特定父元素的元素。 注意事项：必须满足父子级关系才能选中标签。(区别于：后代选择器) 含义：相邻兄弟选择器可以用于选择紧接在另一个元素后的兄弟元素(只有一个)，而且二者有相同的父元素。 含义：匹配同一个父元素中在element1后面的所有的elem…"}, {"id": "6844904065059536904", "title": "玩转 CSS Border-Image", "desc": "😂 尴尬的是本文也并不是陪读系列文章，而是歪马在进行第五章《漂亮的盒子》时，有感而发。 读到书中介绍border-radius的内容时，提到了传说中的九宫格技术，其相关介绍只有可怜的不到一页。九宫格技术所使用的 CSS 属性就是我们今天的主角border-image。虽然这一…"}, {"id": "6919767868359835661", "title": "了解css 变量", "desc": "又称为 CSS 自定义属性，它的值可以在整个文档中重复使用。 因为 $ 被 Sass 用掉了，@ 被 Less 用掉了 ，为了不产生冲突，官方的 CSS 变量就用了--。 声明变量的时候，变量名前面要加两根连词线--。 var()函数的第二个参数，表示变量的默认值。如果该变量未…"}, {"id": "6844903649584349192", "title": "AMP技术详解", "desc": "Google 前沿的 AMP 「 Accelerated Mobile Pages 」技术，能使用户从搜索引擎当中进入我们页面的体验得到一个极大的提升。 AMP HTML 本质上是使用自定义 AMP 属性扩展的 HTML。最简单的 AMP HTML 文件如下所示： AMP 网页…"}, {"id": "6844903824444882951", "title": "# 2019年是时候使用svg-sprite作为网站icon图标的主流了！！！", "desc": "·序言1.什么是SVG？2.SVG的历史和优势3.svg浏览器兼容性问题？4.svgVS传统图片格式有什么不同呢？兼容现有图片能力前提还支持矢量可读性好，有利于SEO与无障碍5.svgVSiconfo"}, {"id": "6844903983144763406", "title": "2019年，你是否可以抛弃 CSS 预处理器？", "desc": "随着前端工程化的不断完善，CSS 预处理器已经成为项目中不可缺少的部分，很多人在项目技术选型阶段就会先选择一个 CSS 预处理器，绝大部分前端工程的脚手架也内置了一系列的 CSS 预处理的模版，大家已经习惯了享受 CSS 预处理器带来的书写代码的灵活流畅，反而将原生的 CSS …"}, {"id": "6844903598665515015", "title": "Grid Layout 最佳实践", "desc": "Anincreasinglycommonquestion—nowthatpeopleareusingCSSGridLayoutinproduction—seemstobe“Whatarethebest"}, {"id": "6844903517849649165", "title": "[译] 如何做到一秒渲染一个移动页面", "desc": "[译]如何做到一秒渲染一个移动页面（原名：使用PageSpeedInsights分析移动网站）PageSpeedInsightsanalyzesapagetoseeifitfollowsourreco"}, {"id": "6844903713111293966", "title": "初识css自定义属性", "desc": "这算是一篇两篇文章译文的糅合体，旨在帮助理解css自定义属性。 在本文中，您将了解到如何将CSS变量集成到CSS开发工作流程中，这会使得样式表更易于维护和不重复性。 如果您使用过任何一种编程语言，那么您应该已经熟悉了变量的概念。 变量允许您存储和更新程序所需的值以便工作。 在C…"}, {"id": "6844903857235951623", "title": "摩拜前端周刊第10期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜【JS进阶】你真的掌握变量和类型了吗地址:https://juejin.i"}, {"id": "6844903569947099144", "title": "常用 CSS 代码片段合集", "desc": "30 Seconds of CSS"}, {"id": "6904499166328651790", "title": "web前端-css之float", "desc": "浮动的基本特点修改float属性值为：left:左浮动，元素靠上靠左right:右浮动，元素靠上靠右默认值none当一个元素浮动后，元素必定为块盒（更改display属性为block）浮动元素包含块，"}, {"id": "6915277728979615751", "title": "CSS的浮动属性", "desc": "div配合float浮动来做页面的布局，浮动最常用的地方就是用来做布局。只有一个标签设置了浮动float属性，就会变成块级标签。"}, {"id": "6844903977100771342", "title": "浅谈css的BFC", "desc": "BFC(Block Formatting Context)全名叫块级格式化上下文。它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。 当涉及到可视化布局的时候，Block Formatting Context提供了一个环境，HTML元素在这个环境中按照一定规则进…"}, {"id": "6844903647885656072", "title": "最全的实现垂直居中的方法", "desc": "利用 CSS 来实现对象的垂直居中有许多不同的方法，比较难的是选择那个正确的方法。我下面说明一下我看到的好的方法和怎么来创建一个好的居中网站。 使用 CSS 实现垂直居中并不容易。有些方法在一些浏览器中无效。下面我们看一下使对象垂直集中的7种不同方法，以及它们各自的优缺点。(可…"}, {"id": "6844903637513142286", "title": "React-简单通用的抛物线动画", "desc": "一个简单通用的React抛物线动画demoUsageparabola方法简易试图"}, {"id": "6844903811874553864", "title": "一步步教你用 CSS 为 SVG 添加过滤器", "desc": "自21世纪初以来，SVG就存在了，但仍有一些有趣的方法去用它。在本教程中，重点将放在 SVG 的过滤器上 —— 但不只是将它们应用于 SVG 图像，我将向你展示如何将它们应用于任何常规页面的内容上。 实际上我们是通过告诉 CSS 过滤器所拥有的 ID，然后再把过滤器应用于 SV…"}, {"id": "6844903641518702605", "title": "开发一个自己的 CSS 框架（四）", "desc": "这一节，我们来讲规矩，谈网格，做人可以不要脸，不讲规矩，不讲道理（特指傲娇兽），但底线还是要有的，如同网格一样，不能超出。 这里我们别人封装好的模块，不过呢，我们也会详细介绍一下原理。首先我们安装以下 jeet 框架 这个 jeet 框架有 scss 和 stylus 两个版本…"}, {"id": "6844903853716930574", "title": "【项目实用】Css 变量及函数", "desc": "优点：节省标签，将可修改的内容暴露在html标签上。 缺点： content的内容无法被选择也无法搜索到，不适合放关键文字。 动画曲线由4个点组成，p0和p1的坐标固定为：(0，0) 和 (1,1)。p2和p3两个点任意拖动就可以组成我们的动画曲线了。 其实animate.cs…"}, {"id": "6926089195144364040", "title": "CSS学习笔记【盒子模型】", "desc": "content-box 是 box-sizing 的默认值，也就是说所有的盒子默认都是内容盒子，那么这里 css 属性中的 width 和 height 设置的是它内容区域的宽高，而盒子的宽高需要加上内间距和边框，外边距不算在内。 css 盒子模型中还有一种特殊的盒子：替换元素…"}, {"id": "6844903618982723592", "title": "【翻译】：CSS 的 will-change 属性详解", "desc": "使用 will-change 代替 translate3d 来激活浏览器的硬件加速..."}, {"id": "6844903559255834637", "title": "小白记Canvas实现的一个小玩意 - 你的名字头像生成", "desc": "第一次写文章，如果有不对的地方请大家帮忙指出来."}, {"id": "6844903638452666382", "title": "border-image 的正确用法", "desc": "border-image 边框图片，顾名思义: 指定边框使用的图片。 尽管经常使用 border-image(-webkit-border-image)，但我们真的了解它的吗？ 本文分两部分来介绍 border-image： border-image 简史 border-ima…"}, {"id": "6950616904515977229", "title": "玩转CSS的艺术之美-函数计算 | 小册免费学", "desc": "CSS函数：此文只记录了工作中常应用到的函数(属性函数、数学函数和图形函数)，并通过经验、搜索和实践进行扩展。"}, {"id": "6844903497704407054", "title": "基于 RequireJS 的跨项目共用前端组件(模块)方案", "desc": "前端项目较多, 有跨项目共用组件的需求 希望有一套可以在各个项目中使用的公共组件(模块), 统一实现避免重复造轮子 公共组件统一维护"}, {"id": "6844904033128284168", "title": "requestAnimationFrame/cancelAnimationFrame——性能更好的js动画实现方式", "desc": "requestAnimationFrame 是专门为实现高性能的帧动画而设计的一个API，目前已在多个浏览器得到了支持，包括IE10+，Firefox，Chrome，Safari，Opera等，在移动设备上，ios6以上版本以及IE mobile 10以上也支持requestA…"}, {"id": "6990639979852464165", "title": "【task0001】HTML, CSS基础", "desc": "百度前端学院task0001任务答案及解析，包括基础html,css以及flex, float等内容。"}, {"id": "6894444655233105927", "title": "CSS 实用技巧：伪元素&伪类的妙用", "desc": "在一个网页中CSS占着非常重要的地位。近年来随着CSS的发展，伪元素/伪类也开始被大量应用：在性能愈加被看中的当下，处于文档流之外的CSS伪元素/伪类是当之无愧的“无冕之王” ！ 我们完全可以只用CSS的父子选择器（用于“父子嵌套”）/兄弟选择器（用于“同级并列排列”）+伪类 …"}, {"id": "6953827271387906078", "title": "你可能不知道的Media queries", "desc": "媒体查询可不仅仅是根据宽度适配不同分辨率哦。 它还支持更多好玩的特性查询。 一起来看看有哪些好玩的特性，也许你会有新的启发。"}, {"id": "6844903721206284301", "title": "轻松实现 Web 性能优化", "desc": "这是一篇关于性能优化的文章，是一篇非常值得你阅读的文章，文章的内容非常丰富，大概你花5-10分钟阅读。 在过去的一年里，我们忙于试图弄清楚如何让网络更快、更高效。因此就有了我们希望在本文中与你分享的新工具，方法和库。在第一部分中，我们将向你展示我们在开发 The Oodles …"}, {"id": "6950127217699455012", "title": "React如何优雅的书写css", "desc": "1.内联样式优点：这种方式较为简单，一目了然，给标签添加style属性。缺点: 这种方式可以造成项目结构较为臃肿，造成css命名冲突。2.使用import导入方式优点：这种方式使用起来更加灵巧，类似于"}, {"id": "6844903505786830862", "title": "CSS 框架 Bulma 教程 - 阮一峰", "desc": "有了 Bulma，即使完全不懂 CSS，也可以轻而易举做出美观的网页。"}, {"id": "6990366540550012941", "title": "滚动条距离与高度、兼容模式、可视尺寸", "desc": "查看滚动条的距离 常规：window.pageXOffset/pageYOffset(IE9某些版本，IE8以下不支持) IE9、IE8及以下： document.body.scrollLeft/do"}, {"id": "6981058672101163015", "title": "CSS基础知识小结", "desc": "css常用基础知识复盘，包括选择器、元素状态、页面布局、盒模型、定位、字体、图标以及其他等等（P2啦~）"}, {"id": "6977976016040001566", "title": "做了一夜的动画，一定要将CSS手势全部掌握", "desc": "一文汇总所有的CSS手势，赶紧收藏起来吧，一键COPY代码，以后开发绝对用得上。熬夜做了一晚上的动画，虽然代码简单，可是劳动力相当巨大，不过付出是值得的，为前端开发者带来福音！"}, {"id": "6844903565631160328", "title": "JS动态计算移动端rem的解决方案", "desc": "说起rem就的说px，em； 在Web页面初期制作中，我们都是使用“px”来设置我们的文本，因为他比较稳定和精确。但是这种方法存在一个问题，当用户在浏览器中浏览我们制作的Web页面时，他改变了浏览器的字体大小，这时会使用我们的Web页面布局被打破。这样对于那些关心自己网站可用性…"}, {"id": "6844903721743155207", "title": "【后知后觉系列】css position: sticky 属性以及某些场景的使用", "desc": "最近公司在用 Regular 封装一个表格组件，需要实现固定表头的功能。这个是几乎所有的组件库都会实现的一个效果，所以实现方式有很多种： 因为 thead/tr 的 position 属性是无效的，所以需要单独用 div 创建一个表头。然后设置这个表头的 position: a…"}, {"id": "6955012695791763486", "title": "CSS 伪元素", "desc": "什么是伪元素？ CSS 伪元素用于设置元素指定部分的样式。 例如，它可用于： 设置元素的首字母、首行的样式 在元素的内容之前或之后插入内容 ::first-line 伪元素 ::first-line "}, {"id": "6910800427831263245", "title": "彻底理解nth-child和nth-of-type的区别", "desc": "主要是因为之前觉得自己已经理解了nth-of-type但后来发现好像和自己之前理解的不太一样，于是打算写下来。 nth-child倒很好理解,就是选择第几个. 可以看出nth-child是根据元素的个数来计算的，尽管我们在:nth-child前面加了p。这个没啥好说的。 它说的…"}, {"id": "6959742192394960910", "title": "前端面试常备09：你应该知道的CSS选择器知识", "desc": "选择器是CSS规则的一部分, 且位于CSS声明块的前面 选择器可以按类别简单的分为: 简单选择器(Simple Selectors): 通过元素类型, class, id匹配一个或多个元素 属性选择器"}, {"id": "6844904052073955342", "title": "记一次愚蠢的 issue (css env)", "desc": "去年 11 月份中旬，随着有赞 Vant Weapp 库 1.0 版本的正式发布，我们的小程序也是立即跟随官方的脚步，着手把依赖库升级了一下。但是却发现 Vant Weapp 对于苹果的底边适配却在微信开发者工具中消失了。在不了解 css env 实际作用和开发工具适配的的情况…"}, {"id": "6987029522122014734", "title": "css 权重计算", "desc": "css 权重概念 浏览器通过优先级来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。"}, {"id": "6975069627789344799", "title": "现代CSS升级，提高可访问性", "desc": "对于在堆栈中从事任何工作的开发人员来说，可访问性是一项关键的技能。对于前端任务，现代CSS提供了我们可以利用的功能，使布局对任何设备上所有能力的用户都更具有可及性。 这篇文章将涵盖一系列的主题。 焦点"}, {"id": "6844903666584027144", "title": "日程表、学生课表插件", "desc": "timetables 参数为表格内容项,格式为二维数组,数组第二维中每项长度需要和timetableType中每一项的长度的累计总和一致, 长度不足时会自动以空字符串追加补全。 同一天内临近的日程相同时会自动合并为一格展示(设置merge参数为false时不自动合并)。 tim…"}, {"id": "6883687400149614599", "title": "真正的页脚！页脚贴在页面底部", "desc": "如图，正文不足页脚贴底。内容超出一屏，页脚挤出首屏。 一. position:sticky实现 三. `flex` 实现"}, {"id": "6931691734669885454", "title": "基于Viewport的移动端web屏幕适配方案详解", "desc": "1. 前言 随着手机，平板等移动设备的普及，现如今的绝大多数web应用会对桌面端和移动端进行网页适配的兼容处理。由于移动端和桌面端设备的型号和分辨率种类比较繁杂，如果专门为这些不同设备和终端分别建立网站显然成本太高，很不现实，并且它们之间的界限也很模糊。所以创建可以适配多种设备…"}, {"id": "6844904196030857223", "title": "写出具有动效的图标分享链接", "desc": "我想设置这样一个动画效果:当鼠标移动到链接时，里面的图标向左移动后消息，过很短的时间正常颜色的图标从右边出现，回到原点。 很显然，我们可以利用@keyframes这一属性，为里面的图标（或是图片）添加一个路径动画，同时设置外层的div属性为overflow: hidden;。为…"}, {"id": "6902793519476572174", "title": "Animation（动画）", "desc": "transitiontransition-property（默认all）指定监听的属性transition-duration过渡动画的时间transition-timing-function（默认li"}, {"id": "6844903711609716749", "title": "React Fragments – wrapper div终结者", "desc": "hi，大家好，我是Ken，目前就职于GetStream.io，为用户提供个性化可定制的feed流服务。 在过去的几个月里，我一直在开发Winds 2.0，一个开源的RSS阅读器和博客订阅应用。用Node.js, Electron, Redux and React开发，并且截止发…"}, {"id": "6844903570752421895", "title": "原生js和jq的延时提醒框 （QQ头像为例）", "desc": "首先说明一下效果：鼠标放到头像上面左边会显示一块个人资料框，离开头像后过一小段时间个人资料信息消失，离开头像后如果鼠标放在个人资料框上面则个人资料框不消失；html代码：一个id为head的标签和一个"}, {"id": "6844903562003087367", "title": "快速开始grid布局", "desc": "CSS Gird已经被W3C纳入到css3的一个布局模块中，被称为CSS Grid Layout Module，一般习惯称为网格布局。 网格布局可以将应用程序分割成不同的空间，定义它们的大小、位置和层级。 简单来说，网格布局就像表格一样可以让元素按列和行对齐排列，不同的是，网格…"}, {"id": "6844903569024368653", "title": "一步步打造一个支持异步加载数据的移动端选择器", "desc": "选择器在应用中是使用比较频繁的一个组件。在移动端，不同的操作系统默认的选择器存在各种差异，iOS为底部滚动的选择器，不同的Android系统，默认的选择器也是不尽相同的。同时，默认的选择器在web应用中定制性也比较差。在实际开发中，针对web应用，我们的需求一般是忽略系统差异，…"}, {"id": "6844903871207178254", "title": "flex +overflow在firefox与edge中不生效的问题", "desc": "代码链接这在chrome中没问题，但是在firefox和edge中，会出现header高度被压缩，并没有100pxcss:firefox和edge以及部分chrome下：最新chrome下ok:解决方"}, {"id": "6923140039970914312", "title": "从sass到PostCSS", "desc": "多年来我一直使用Sass.但是最近我想要使用PostCSS和它的cssnext插件来尝试处理样式.我爱死了现在就可以使用将来的CSS特性,相对于之前我用的工具,它们更顺手一些.我的个人站点就是尝试新特性的最好的测试地. 在切换到新语法之后我需要做一些准备.现在项目的目录结构是S…"}, {"id": "6844903625353871373", "title": "来，一起帮忙制定CSS规范吧", "desc": "API如何设计？ CSS工作组又要开会了，其中一个issue是“Allow shape-outside to apply to initial letter”。 标题一目了然，就是“让initial-letter支持shape-outside”。为了方便大家参与，我们简单介绍一…"}, {"id": "6902297128773779469", "title": "CSS 之 mix-blend-mode", "desc": "mix-blend-mode CSS 属性描述了元素的内容应该与元素的直系父元素的内容和元素的背景如何混合。它有以下属性值： 这里我就不一一的举例了，这个属性在有些时候可以解决一些棘手的样式问题，近期我对个人网站的样式又进行了一些优化，其中有一个波浪的效果。 gif不能像png…"}, {"id": "6844903698049531911", "title": "【1分钟知识点】利用「占位块」弥补 space-between 的不足", "desc": "但是FlexBox布局虽然枪弹但并不能完全呈现以上布局，于是我们需要结合FlexBox作下小的改动即可实现。 其实很简单，我们只要在后面加入一些等宽但是占高为0等隐藏元素即可轻松实现。"}, {"id": "6844903713706885128", "title": "【英】CSS 和网络性能", "desc": "Written by Harry Roberts on CSS Wizardry. there hasn’t been a great deal of CSS-related content on this site for a while. Let me address th…"}, {"id": "6901838446185152520", "title": "object-fit你真的知道吗", "desc": "应用示例：点这里【object-fit的使用】一、object-fit属性测试基本配置（后附有代码）1.选择一张图片（1024*582）大于容器（200*400）宽高，一张图片（150*150）小于容"}, {"id": "6953574916012638238", "title": "css3和预处理器", "desc": "预处理器(less/scss) https://juejin.cn/post/6844904041588211726 嵌套 变量 混入 不带任何值的参数 传一个带值参数（传入一个默认值） 传多个参数值"}, {"id": "6844904052820541448", "title": "CSS性能优化的8个技巧", "desc": "我们都知道对于网站来说，性能至关重要，CSS 作为页面渲染和内容展现的重要环节，影响着用户对整个网站的第一体验。因此，与其相关的性能优化是不容忽视的。 对于性能优化我们常常在项目完成时才去考虑，经常被推迟到项目的末期，甚至到暴露出严重的性能问题时才进行性能优化，相信大多数人对此…"}, {"id": "6844903810477850632", "title": "【译】使用CSS Transitions实现圆形悬停效果", "desc": "在今天的教程中，我们将在圆上试验悬停效果。 自从有了border- radius属性，我们可以创建圆形形状，并且它们作为设计元素更常出现在网站中。 我特别喜欢看到的一个用途是圆形缩略图，它看起来比通常的矩形更有趣。 因为圆是如此特殊的形状，我们将为它创造一些特殊的悬停效果！ 我…"}, {"id": "6844903539668418567", "title": "怎样做一个圆环放大的动画", "desc": "最近遇到一个问题，就是怎么做一个圆环放大的动画，如果是用transform: scale放大的话，会导致圆环变粗，这样看起来就不好看了，如下图所示： 如果改成用width/height做动画的话，动画看起来会有点变形，如下图所示： 这个圆圈是用border-radius: 50…"}, {"id": "6901228435034046477", "title": " CSS3动画知识总结", "desc": "在CSS3出现之前，动画都是通过JavaScript动态的改变元素的样式属性来完成了，这种方式虽然能够实现动画，但是在性能上存在一些问题。CSS3的出现，让动画变得更加容易，性能也更加好。CSS3中有"}, {"id": "6844903937166802957", "title": "关于CSS中的position（定位）样式", "desc": "目前大部分的浏览器都支持position样式，在IE8及其以下版本的IE浏览器是不支持position内的inherit值的。 absolute生成绝对定位元素，参照position值不是static的父容器，使用left，right，top，bottom进行定位，如果采用ab…"}, {"id": "6844903920565747720", "title": "如何更优雅的编写 CSS 代码【译】", "desc": "直白的说：编写优秀的 css 代码可能是很痛苦的。很多程序员都不想从事 CSS 开发—我可以做任何事情，除了css以外。 当我在编写app时，css是我最不喜欢的部分，但你又不能逃避它，对吗？我的意思是，在专注于用户体验和设计上，我们不能跳过css这一部分。 当开始一个项目是，…"}, {"id": "7002897165232111646", "title": "css样式篇：文字与字体", "desc": "text-overflow 与 word-wrap text-overflow用来设置是否使用一个省略标记（...）标示对象内文本的溢出。 语法： 但是text-overflow只是用来说明文字溢出时"}, {"id": "7001777832682586119", "title": "CSS-BEM 命名规范", "desc": "什么是 BEM 命名规范 Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。"}, {"id": "6934326962450071559", "title": "[译] CSS3 会替代 SCSS 吗？｜技术点评", "desc": "当谈及设置网页样式的时候，我们可以选择在项目中使用纯 CSS 或是 SCSS（除了其它处理器之外）。SCSS 是 CSS 的超集。大多数的开发者都认为，受益于高级的功能和清晰的语法，SCSS 使用起来比 CSS 更加方便。 在这篇文章中我想要带着大家一起探索 SCSS 的功能以…"}, {"id": "6844903654458146823", "title": "滚动视差？CSS 不在话下", "desc": "视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验。 作为网页设计的热点趋势，越来越多的网站应用了这项技术。 通常而言，滚动视差在前端需要辅助 Javascript 才能实现。当然，其实 CSS 在实现滚动…"}, {"id": "6963252241662738440", "title": "Web 开发者应该避免的 5 个 CSS 的做法", "desc": "有人认为 CSS 很难学习，觉得 CSS 有很多的坑，甚至还有一点儿魔幻，难以理解，很容易会搬起石头砸自己的脚。对此我感到难过，毕竟，我可不这么认为。 在考虑了可以做什么之后，我提出了五个我挺讨厌的 "}, {"id": "6999819661927792653", "title": "【VUE】@keyframes接收以及使用Animate.css库", "desc": "在CSS里直接指定动画效果，这需要使用keyframes属性。 对于复杂的CSS动画可以借助Animate.css库实现，节省效率和时间成本。"}, {"id": "6915210726730629127", "title": "水平垂直居中深入挖掘", "desc": "在上篇文章 -- 一行 CSS 代码的魅力 的最后，提到了两种快速实现水平垂直居中的方式。 当然，CSS 中实现水平垂直居中的方式很多。别看到水平垂直居中就准备右上角 x 掉，本文的重点不是罗列有多少种方式实现水平垂直居中方式，而是探讨一下常见的几种水平垂直居中的方式的利弊。 …"}, {"id": "6844903849388408846", "title": "探秘 flex 上下文中神奇的自动 margin", "desc": "水平垂直居中也算是 CSS 领域最为常见的一个问题了，不同场景下的方法也各不相同，各有优劣。嗯，下面这种应该算是最便捷的了： 嗯。这里其实就涉及了一个问题，如何让 margin: auto 在垂直方向上生效？ 让元素相对父元素水平居中。但是如果我们想让元素相对父元素垂直居中的话…"}, {"id": "6992236237922762759", "title": "less学习指南第一期 | 嵌套和变量", "desc": "LESS是一个CSS预处理器，它大大简化了 CSS 的编写，并且降低了 CSS 的维护成本。这个系列主要就是学习和巩固 Less 的基础知识，并且掌握一些更加高级的用法。"}, {"id": "6992136147367362596", "title": "那些熟悉又陌生的CSS属性  ", "desc": "这是我参与8月更文挑战的第2天，活动详情查看：8月更文挑战 css3 -webkit-font-smoothing 属性 对字体进行抗锯齿渲染可以使字体看起来会更清晰舒服。在图标字体成为一种趋势的今天"}, {"id": "7000668770704293918", "title": "这些原生的样式操作方式，你，知道多少？", "desc": "在 web 程序中，经常需要动态的控制 css 样式来丰富我们的页面。在如今这个框架横行的年代，这些原生的样式操作方式，你知道多少？"}, {"id": "6992595716820434981", "title": "一文读懂屏幕尺寸、分辨率、PPI、设备独立像素、Retina ", "desc": "当我们介绍一个设备的屏幕时，我们会怎么描述呢。除了说很大很细腻之外，还有更精确的概念吗。屏幕尺寸、分辨率、PPI、社保独立像素是什么意思。"}, {"id": "6991497884013166622", "title": "css的新玩法，语法与规则 | 8月更文挑战", "desc": "!important 语法： Selector{sRule!important;} 说明： 提升指定样式规则的应用优先权。 IE6及以下浏览器有个比较显式的支持问题存在，!important并不覆盖掉"}, {"id": "6999187718777503774", "title": "前端工程化系列——CSS模块化", "desc": "1. 在中大项目编写 CSS 的普遍问题 高耦合——改样式的时候，会同时其他地方的样式，导致意外的样式问题 低复用——重复编写相同的样式，即枯燥乏味又导致 CSS 体积过大，从而影响开发体验与页面加载"}, {"id": "6999274594225881119", "title": "探究mask-image的魔力——Win10日历的探照灯效果原来可以这样做！", "desc": "mask-image是CSS属性，它用于设置元素上遮罩层的图像。本文使用该属性实现了一个简单的进度加载动画和照亮边框的探照灯效果。"}, {"id": "6974044524641255432", "title": "css - 字体", "desc": "CSS字体属性定义字体，加粗，大小，文字样式。通用字体系列 Serif字体 字体成比例，而且有上下短线。如果字体中的所有字符根据其不同大小有不同的宽度，则称为字体是成比例的。例如：小写的i和m的宽度就"}, {"id": "6844903576561516558", "title": "🚨Web开发者需要知道的CSS Tricks", "desc": "作为一名Web开发者，CSS是必备技能之一，我一直以为自己对CSS的掌握已经够用了，直到读Lea Verou的《CSS揭秘》时，我发现自己充其量就算个会打CS的选手，书中针对我们常见的网页设计难题从不同的角度提出了多种实用又优雅的解决方案，在这里强烈的推荐给每一位从事前端相关的…"}, {"id": "6844904119992320014", "title": "前端必看的8个HTML+CSS技巧", "desc": "CSS是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的CSS技巧，一些在前端教程和培训课堂中不会讲到的知识。第二就是让还在前端开发这条道路上的童鞋们，重新燃起对前端排版和特效的热爱和热情！🔥 1. …"}, {"id": "6990667421950410766", "title": "[译]真实React项目中CSS与CSS-in-JS的性能比较", "desc": "前言 在真实应用中（而不是简单的todo类型应用）单独加载的 CSS 文件与CSS-in-JS文件，性能相差多少？本文作者从网络、覆盖率、Lighthouse性能、性能分析、用户交互比较等多方面进行分"}, {"id": "6937995501719519240", "title": "[译] 6 个没人讲过的 CSS 属性｜技术点评", "desc": "数十年来，CSS 和 HTML 一直都是互联网的基石。 虽然 HTML 能够负责创建网站结构并进行图文排列，但在设计网站上却无能为力。 自 1994 年以来，设计网站一直是 CSS 的唯一目的，它是一门描述网站外观的语言。 多年来，CSS 不断地推出更多的新属性，例如 Flex…"}, {"id": "6897739815920500743", "title": "一篇文章带你了解CSS3按钮知识", "desc": "在实际开发中，按钮的应用是必不可少。使用CSS来制作按钮，可以更有新意，更有趣，也可以自定义自己想要的样式。一、平面样式CSS按钮平面样式按钮的使用现在非常流行，并且符合无处不在的平面设计趋势。，这些"}, {"id": "6844904004770594829", "title": "彻底搞懂CSS伪类选择器：is、not", "desc": "1dds"}, {"id": "6844903620991811592", "title": "【CSS模块化之路2】webpack中的Local Scope", "desc": "CSS是一门几十分钟就能入门，但是却需要很长的时间才能掌握好的语言。它有着它自身的一些复杂性与局限性。其中非常重要的一点就是，本身不具备真正的模块化能力。 1. 面临的问题 你可能会说，CSS有@import功能。然而，我们都知道，这里的@import仅仅是表示引入相应的CSS…"}, {"id": "6844903583247253511", "title": "两列自适应布局方案整理", "desc": "本文讨论的是两列自适应布局：左列定宽/不定宽，右列自适应。 虽然分这两种情况，但实际上不定宽的方案同样适用于定宽的场景，因此不定宽的方案泛用度更高。 再者，这个方案由于.right-fix的margin-left和.left的width高度耦合，因此无法实现自适应，只能应用在左…"}, {"id": "6844903618059960333", "title": "【前端Talkking】CSS系列——CSS深入理解之line-height", "desc": "行高，顾名思义指的就是一行文字的高度。按照定义来解释，就是两行文字之间基线之间的距离。那么问题来了，什么是基线呢？大家回想下我们刚开始学习汉语拼音的时候，使用四线格本子的四条线，其中倒数第二条线就是基线，如果你说，抱歉，我已经全部还给老师了，没有任何印象。呵呵，别急呢，我已经给…"}, {"id": "6844904191685558279", "title": "2020 祝安，缝隙中寻找机遇：面试题第一波：css", "desc": "非常感谢，前同事行长@onlyadaydreamer分享的面经。 话说，写了这么长时间的项目，很多基础都快忘没了。 我们程序员就是这样，默默无闻的当着键盘侠，明明都懂，却说不出来，就像我对你的爱。 来达到水平居中的效果。 可以在父容器的尾部添加i标签，当然也可以是其他的，我一般…"}, {"id": "6912086688340639752", "title": "CSS入门笔记3", "desc": "i. CSS布局有三种方式: ii. 布局的两种思路 iii. 布局需要用到哪些属性 iv. 用什么CSS布局方式呢？ 1. float布局 在父元素上加 .clearfix ，用来包裹住里面的浮动元素。 如果设置为0，则不考虑内容周围的多余空间。如果设置为auto，则多余空间…"}, {"id": "6844903983383838733", "title": "CSS编写策略之BEM", "desc": "项目开发过程中，一套合适的开发风格指南能够有效提高实际开发速度，降低维护成本。然而在有些项目开发过程中，CSS并没有完善的结构或者遵循命名约定，这导致在项目迭代的过程中，CSS结构变得越来越冗余，既降低了开发效率也影响性能。 现有的CSS编写策略有很多，如OOCSS，SMACS…"}, {"id": "6951642080737230862", "title": "CSS系列 -- CSS 样式的四种使用方式", "desc": "CSS三种引入方式有内联样式内部样式表外部样式表内联样式实际在写页面时不提倡使用，在测试的时候可以使用页面渲染过程中，遍历 DOM 节点时要是遇到内联样式可能会引起重绘回流，而且内联样式的优先级较高内"}, {"id": "6844903497033318414", "title": "更快地构建 DOM: 使用预解析, async, defer 以及 preload - 众成翻译", "desc": "在 2017年，保证我们的页面能够快速加载的手段包括压缩，资源优化到缓存，CDN，代码分割以及 tree shaking 等。 原文地址：https://hacks.mozilla.org/2017/09/building-the-dom-faster-speculative-p"}, {"id": "6844903625353854989", "title": "为什么不会有CSS4？", "desc": "为什么不会有CSS4了？ 简单地说，就是从CSS3开始，CSS规范就被拆成众多模块（module）单独进行升级，或者将新需求作为一个新模块来立项并进行标准化。因此今后不会再有CSS4、CSS5这种所谓大版本号的变更，有的只是CSS某个模块级别的跃迁。 按照CSS工作组的说法，C…"}, {"id": "6844903673345081358", "title": "[译] CSS 变量和 JavaScript 让应用支持动态主题", "desc": "大家好！在这篇文章中我准备讲一讲我在 Web 应用中创建动态主题加载器的方法。我会讲一点关于 React、Create-React-App、Portals、Sass、CSS 变量还有其它有意思的东西。如果你对此感兴趣，请继续阅读！ 我正在开发的应用是一个音乐应用程序，它是 Sp…"}, {"id": "6844903713081917453", "title": "Canvas环形倒计时组件", "desc": "1. html代码 2. 引入process.js文件 3. 初始化参数 canvas本身没有任何的绘图能力，所有的绘图工作都是通过js来实现的。通常我们在js通过getElementById来获取要操作的canvas（这意味着得给canvas设个id）： 1.准备好画笔之后就…"}, {"id": "6844903537390911495", "title": "css sprites精灵图、css图片整合、css贴图定位案例教程", "desc": "CSS Sprites通常被称为css精灵图，在国内也被意译为css图片整合和css贴图定位，也有人称他为雪碧图。就是将导航的背景图，按钮的背景图等有规则的合并成一张背景图，即多张图合并为一张整图，然后再利用background-position进行背景图定位的一种技术。 二、…"}, {"id": "6924178754163982343", "title": "缓动函数", "desc": "首先我们来认识一个缓动函数的核心。先以一个匀速运动的函数为例子 返回值是点a对应的y轴坐标，（当前运动时间，当前移动距离）."}, {"id": "6981814438802243592", "title": "CSS3 新增属性：背景", "desc": "background-image CSS3 中可以通过 background-image 属性添加背景图片。"}, {"id": "6977325366515859492", "title": "CSS基础知识要点（Y1）", "desc": "一、什么是CSS？ 二、为什么要使用CSS？ 三、CSS语法 四、CSS的三种用法 五、元素的三大类型"}, {"id": "6966480459492491271", "title": "day11 CSS BFC", "desc": "BFC 常见定位方法 普通流 浮动 绝对定位 BFC的概念 Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规"}, {"id": "6844903685147852808", "title": "提高网页设计里文本的易读性", "desc": "网页设计中，文本是最常用的元素之一，文本易读性非常重要，我们都希望页面更加清晰易读，而颜色在文本易读性中起到了至关重要的作用。 文本和背景颜色有一个“对比度”，了解并能正确调整这个对比度，将会让你的页面更加清晰易读，进而提高阅读效率和阅读体验。 上面的两个案例，本质上都是文本色…"}, {"id": "6919744194428796941", "title": "BFC 块级格式化上下文(较完善版)", "desc": "理论来讲，包裹在父元素里的元素，不会影响父元素旁边的元素，但实际上并不总是如此，那有没有什么办法可以让里面的元素与外部真正隔离开来呢？可以试试BFC。 BFC Block Formating Context 块级格式化上下文，是一个独立渲染区域，主要是隔离保护作用。也就是说BF…"}, {"id": "6844903497515679758", "title": "「实战」纯React实现的拖拽组件", "desc": "首先恭喜React可以“回归”开源世界，Facebook协议中夹带私货的做法实在是让人摸不着头脑。 react作为一套工具，易用程度很高，我们可以用它做出很多牛逼的玩意。那么今天我就造了一个轮子。 「拖拽组件」作为每一个平台都有的组件，已经拥有各种各样的实现，今天我为大家带来的…"}, {"id": "6844904102871171085", "title": "【CSS】【译】一文了解 CSS 中关于 auto 的一切", "desc": "在 CSS 中，我们可以在 margin, positioning, height, width 等等属性中使用 auto 这个值。我会在这篇文章中记录我所知道的所有关于 auto 的知识，希望能够帮助到更多人，尤其是想深入了解 auto 相关知识的人。 接下来，我首先会解释一…"}, {"id": "6844903818170204168", "title": "[译] 你需要知道的 CSS 中所有 hyphenation 的使用", "desc": "月初我应邀在维也纳的奥地利印刷学会（tga）做了一场晚间讲座。我很荣幸能够做这样一个演讲，因为这意味着我将追随马修·卡特（Matthew Carter）、维姆·克鲁维尔（Wim Crouwel）、玛格丽特·卡尔弗特（Margaret Calvert）、埃里克·斯皮克曼（Erik…"}, {"id": "6844903844141334541", "title": "[译] Web 使用 CSS Shapes 的艺术设计", "desc": "去年，Rachel Andrew 写了一篇文章，重新审视 CSS Shapes ，其中为读者重新介绍了 CSS Shapes 基础的使用。对于任何渴望了解如何使用 shape-outside、shape-margin 和 shape-image-threshold 等属性的人来…"}, {"id": "6844903905285898247", "title": "【外文翻译】几分钟理解和使用BFC", "desc": "这是我找到讲解 格式化上下文 (Block Formatting Context, BFC) 最棒的文章之一（下文统称 BFC ），由于 BFC 困扰我良久，希望这篇翻译能让 BFC 不再困扰大家。 翻译是机翻 + 修改，会有删减，另外强烈推荐阅读原文。 你可能从没听过“块格式…"}, {"id": "6973906775149903886", "title": "「HTML+CSS」--自定义加载动画【026】", "desc": "这是我参与更文挑战的第4天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 边框：20px solid 效果"}, {"id": "6844903645029335053", "title": "画影图形: SVG & Canvas 图形对比", "desc": "画影图形指描画犯人面影，悬赏通缉。这里用法明显有问题，不过取其表义而已。 在一个前端看来，画图有三种方法，Cavas，SVG 以及 CSS。至于三者优劣，将在此针对各种图形做逐一比较，有方，圆，椭圆，扇形，多边形，渐变，文本处理以及动画 描边与填充是图形的基本属性。 在 CSS…"}, {"id": "6844903543539761165", "title": "2017 年 CodePen 优秀作品盘点", "desc": "2017 年最后一篇文章，与大家分享 2017 年 CodePen 上的一些优秀作品。感谢大家一直以来的支持，也提前祝大家新年快乐！ 2018 加油 <(￣︶￣)↗[GO!]"}, {"id": "6844903583264014349", "title": "【基础】这15种CSS居中的方式，你都用过哪几种？", "desc": "CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。"}, {"id": "6844903861069545479", "title": "CSS 多行省略失效 (-webkit-box-orient 失效)", "desc": "2. autoprefixer也会帮你增加新前缀"}, {"id": "6844903604327809031", "title": "炫酷H5中序列图片视频化播放的高性能实现 « 张鑫旭", "desc": "这篇文章发布于2018年05月1日，星期二，19:12，归类于js实例。阅读3631次,今日118次byzhangxinxufromhttp://www.zhangxinxu.com/wordpres"}, {"id": "6844903614838751245", "title": "用 js 获取页面元素的位置图文总结", "desc": "在做一些组件和交互时，常常需要动态获取鼠标点击位置、元素宽高和元素位置信息，网上有很多种方法，但自己没有总结过，不知道各种方法的优缺点和兼容性，在此专门的总结一下。 这些关于视觉的内容都被定义在了 W3C 的 CSSOM View Module 模块中，里面有详细的接口定义和说…"}, {"id": "6915638306487959566", "title": "CSS四种定位方式的详解", "desc": "默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。参考上篇随笔。 定位为relative的元素脱离正常的文档流，但其在文档流中的位置依然存在，只是视觉上相对原来的位置有移动。 通过top,bottom,…"}, {"id": "6968833487247769608", "title": "页面中含有position属性的div的相对位置", "desc": "只有当父节点中的position：relative，子节点的position: absolute。子节点才能通过top,bottom,left,right进行定位 当父节点中的position：abs"}, {"id": "6844903969878212622", "title": "从掘金首页列表一个小 Bug 说起", "desc": "掘金首页的列表出现了 <a/> 标签的多级嵌套。虽然有在 JS 里面处理父级跳转的逻辑，但这个在我的认知里好想是不太符合规范的。 比如我们直接在 VSCode 里面写一个嵌套的 <a/> ，会发现在 Chrome 中这个嵌套的逻辑会被尝试拍平成两个同级的<a/> 标签。 掘金首…"}, {"id": "6880721078402940936", "title": "引入适用于双屏和可折叠设备的Web API", "desc": "浏览器是所有设备上使用最广泛的应用之一，如今，它运行在全新的硬件类别上：双屏和可折叠设备。 随着各种新的双屏和可折叠设备进入市场，包括Microsofte Surface Duo，现在再没有比现在更好的时间来考虑你的网站如何采用这些外形。 今天，我们很高兴地宣布推出两项新的实验…"}, {"id": "6985065390535606279", "title": " 背景图片位置", "desc": "background-position属性 background-position属性可以设置背景图片出现在盒子的什么位置 background-position:100px 200px; 同样可以使"}, {"id": "6959396224591986724", "title": "         10.定位(position)", "desc": "一.标准流（Normal Flow） 默认情况下，元素都是按照normal flow（标准流、常规流、正常流、文档流【document flow】）进行排布 从左到右、从上到下按顺序摆放好 默认情况下"}, {"id": "6844903875024191496", "title": "CSS进阶（20）—— 详解display:none和visibility: hidden的区别", "desc": "对于一个display计算值是none的元素而言，该元素及其后代元素全部都被隐藏（请记住这个概念，等下对比下visibility的说法）。你可以认为当前元素从dom文档流中“消失了”，当然不是真正的消失，这个节点依旧存在于文档流中，因此vue中的v-show对应的是CSS的di…"}, {"id": "6844903549114171405", "title": "京东单品页前端开发那些不得不说的事儿", "desc": "详情页也叫做单品页，域名以「item.jd.com/skuid.html」为格式的页面。是负责展示京东商品 SKU 的落地页。主要任务是展示和商品相关的信息，如：价格、促销、库存、推荐，从而引导用户进入购买流程。同时单品页有很多版本。一般分为两类。一类我们通常看到的「通用类目详…"}, {"id": "6946394370966978567", "title": "css3 滚动动画", "desc": "前言：这是一篇译文，原文链接：https://cssanimation.rocks/scroll-animations/项目地址：https://gitee.com/chenuvi/clock/tre"}, {"id": "6984774202796539911", "title": "圆角设置", "desc": "圆角设置 border-radius属性 border-radius属性的值通常为px单位，表示圆角的半径。 border-radius属性可以单独设置四个圆角 border-radius: 左上 右"}, {"id": "6931259863335403534", "title": "grid布局实操记录", "desc": "接受两个参数，第一个参数是重复的次数（上列是3），第二个参数是所要重复的值。 repeat()重复某种模式也是可以的。 有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。 为了方便…"}, {"id": "6915269572018831374", "title": "CSS 遮罩 mask/-webkit-mask", "desc": "本文只挑几个属性详细说明。 大家做需求的时候有没有遇到过，设计师给的图标图片经常要换色，同一个图标在不同的场景下显示不同的颜色。 图标可以使用SVG来完成，比较适合稳定的项目迭代。也可以使用图片来制作，比较适合短期的活动页。 当图片要达到多种颜色，又希望只使用一套图时候，我们可…"}, {"id": "6844903503001829390", "title": "sticky你了解多少", "desc": "相对于其正常位置进行定位,但是不影响其他元素的偏移。元素的位置通过 left, top, right 以及 bottom 属性进行规定。 相对定位的元素并未脱离文档流，而绝对定位的元素则脱离了文档流。在布置文档流中其它元素时，绝对定位元素不占据空间。绝对定位元素相对于最近的非 …"}, {"id": "6844903588171350023", "title": "被遗忘的CSS", "desc": "平时在工作中遇到一些比较偏门的 css ，用过一两次，但是老是记不住，于是又需要去 baidu、 google ，所以都积累起来。"}, {"id": "6844904158298914830", "title": "聊聊三栏布局", "desc": "闲时要有吃紧的心思，忙时要有悠闲的趣味。 对于前端来说，布局是必须掌握的，一个好的布局可以让页面看起来更美观。提到布局，那就不得不说CSS三栏布局。 三栏布局一般多指左右两栏宽度固定，中间栏宽度自适应的布局。在能实现效果的情况下，尽可能的中间栏内容优先渲染。面试的时候经常被问到…"}, {"id": "6844904015445114894", "title": "翻译 | CSS伪元素的罕见用例", "desc": "伪元素 的使用已经很长时间了。然而，我觉得有很多用例 在开发人员中并不完全为人所知。我写下这篇文章是为了阐明它们，这样它们就可以被更多地使用。 伪元素 是属于它的父元素，所以有一些不寻常的用例 。现在，让我们探索一个简单的例子来说明我的意思。 这个设计是：有一个章节标题，它的左…"}, {"id": "6914860011424317454", "title": "【译】是时候了解 CSS 逻辑属性了", "desc": "在已经过去的 2020 年，盒模型的描述方式正在经历一场变革，一种重新定义盒模型的方式正在悄然流行，它不仅可以让前端的布局在逻辑上更加严谨，而且能让开发者以更少的代码写出兼容性更好的页面。它就是本文探讨的主题：CSS 逻辑属性。那么什么是 CSS 逻辑属性呢？首先让我们看一段代…"}, {"id": "6844903541463580679", "title": "瞎折腾：把JS,CSS任意文本文件加密成一张图片", "desc": "这篇文章发布于 2017年12月24日，星期日，16:04，归类于 js实例。 阅读 1256 次, 今日 88 次 by zhangxinxu from http://www.zhangxinxu.com/wordpress/?p=6661 本文可全文转载，但需得到…"}, {"id": "6854573214257905671", "title": "如何优雅的水平居中列表元素的内容？", "desc": "今天分享的内容来自于 Jeff Starr 的文章《CSS: Center-Align List with Left-Aligned Text (and Unknown Width)》。 还不够完美，内容确实居中显式了，但因为没有左对齐，看起来不是很方便。其次，<ul> 上的小…"}, {"id": "6996900863377670158", "title": "flex为1代表什么意思？", "desc": "这是MDN上关于flex取值的解释 initial 元素会根据自身宽高设置尺寸。它会缩短自身以适应 flex 容器，但不会伸长并吸收 flex 容器中的额外自由空间来适应 flex 容器 。相当于将属"}, {"id": "6892767573654372365", "title": "震惊！很多人都不知道 CSS Grid 框架早就有了！", "desc": "这篇文章拖沓了两个月，是因为真的不知道从哪里说好。这个问题的所有回答几乎都没有切中问题的本质，而且对 CSS Grid 也有很深的误解。另外这个问题的描述可能不太恰当，因为基于 CSS Grid 的框架已经有了。感兴趣的朋友可以了解一下 Flex-Layout，它是一个基于指令…"}, {"id": "6969559969171521573", "title": "结构伪类选择器", "desc": "1. 属性列表 选择符 简介 E:first-child 匹配父元素中的第一个子元素 E:last-child 匹配父元素中最后一个E元素 E:nth-child(n) 匹配父元素中的第n个子元素E "}, {"id": "6969550163526287391", "title": "CSS3 属性选择器", "desc": "1. 什么是 CSS3 在 CSS2 的基础上拓展、新增的样式 2. CSS3 发展现状 浏览器支持程度差，需要添加私有前缀 移动端支持优于 PC 端 CSS3 目前还草案，在不断改进中 CSS3 相"}, {"id": "6941326235608252430", "title": "CSS布局（一）", "desc": "上一篇文章介绍了CSS盒模型相关的内容。上一篇文章提到“web 页面本质上就是一堆 ‘盒子’ 的组合”，那么这一篇文章就来跟大家分享一下CSS中抽象的盒子是怎样排列在web页面中的。也就是CSS是如何进行页面布局的。如图所示，CSS的布局主要分为正常流布局、浮动布局、定位布局、…"}, {"id": "6988871341277609997", "title": "「HTML+CSS」--自定义加载动画【046】", "desc": "前言 效果展示 Demo代码 HTML CSS 这个版本的代码是仿照大佬的scss代码用css复写了一遍 其主要原理就是三个小球都是利用box-shadow阴影生成 然后利用动画 设置小球在每一个关键"}, {"id": "6917830385426497544", "title": "发现一个Chrome浏览器关于渲染div的css属性transform:translate(-50%, -26%)时而出现下边框bug", "desc": "用的浏览器是Chrome浏览器，后经测试，Edge浏览器就没事,应该是Chrome浏览器的问题transform:translate(-50%,-26%);第二个参数当它是奇数的时候，div会出现下边"}, {"id": "6844904173754925063", "title": "详解CSS响应式", "desc": "网页在不同尺寸的设备上，都有良好的显示效果，叫做\"响应式设计\"， 响应式图像的解决方案有很多，JavaScript 和 CSS 都可以实现。 媒体查询就是对设备按照某些条件进行查询，使符合查询条件的设备显示对应的样式，从而达到不同设备显示不同样式的效果。 通过百分比单位 \" %…"}, {"id": "6996644205921566727", "title": "【JavaWeb基础 · CSS样式--转换】", "desc": "“这是我参与8月更文挑战的第15天，活动详情查看： 8月更文挑战” CSS样式--转换 HTML给我们提供了丰富的标签，这些标签被定义成不同的类型，一般分为：块级元素和行内元素。 块元素 以区域块方式"}, {"id": "6844903512208326663", "title": "跟着Zepto学dom（二）", "desc": "this.cloneNode(flag) 其返回this的节点的一个副本flag为true表示深度克隆，为了兼容性，该flag最好填写。 children方法中的'children' in element是为了检测浏览器是否支持children方法，children兼容到IE9…"}, {"id": "6844903502284587021", "title": "可定制的 CSS 加载动画", "desc": "开源的、可配置的 CSS 加载动画，提供了直接复制代码和下载为可运行文件的功能"}, {"id": "6844903957639200776", "title": "【前端入门必知必会】CSS 基础选择器", "desc": "CSS 选择器是用来指定该组 CSS 样式会对什么元素生效的，是连接 HTML 结构和 CSS 样式的桥梁。这一篇将给大家介绍一下 CSS 里基础选择器的用法，同时会对使用上给出一些建议。 基础选择器包括 ID 选择器、类选择器、标签选择器、通配符选择器和属性选择器这几种。 I…"}, {"id": "6844903859555401735", "title": "整理一些CSS的知识", "desc": "最近在翻《CSS权威指南》，一些零散的知识点平时不太注意，这里记录一下。 display指定了元素的显示类型，它包含两类基础特征，用于指定元素怎样生成盒模型——外部显示类型定义了元素怎样参与流式布局的处理，内部显示类型定义了元素内子元素的布局方式。 rel（关系）中可以指定候选…"}, {"id": "6898608569193611277", "title": "纯CSS制作各种几何图形", "desc": "分享：今天在一个网站上看到用css制作各种css图形，摘录下，以供不时之需，特别分享一下Square(正方形)Rectangle(矩形)Circle(圆形)Oval(椭圆形)TriangleUp(向上"}, {"id": "6844903924156235790", "title": "CSS盒模型小结", "desc": "对盒模型简单做下总结和分享。 当浏览器对文档进行布局时，渲染引擎将所有元素表现为一个个矩形的盒子，称为盒模型。 如图，我们用chrome调试时看到的就是每个元素对应的盒模型示例图，盒模型从外到内包括margin-box,border-box,padding-box和conten…"}, {"id": "6943213394694504461", "title": "CSS常用伪类选择器详解", "desc": "1. 用户行为伪类 selector:hover 表示匹配鼠标经过的selector选择器元素。 :hover不适用于移动端，虽然也能触发，但消失并不敏捷，体验反而奇怪。 selector:active 表示匹配激活状态的selector选择器元素（通过鼠标主键点击或触屏触摸的…"}, {"id": "6844903498266460167", "title": "css变量", "desc": "如何让css像js一样拥有变量保存属性值，在开发中快速复用应该已经有了多种方案，类似less，sass等预处理器。那么现在css已经支持了自己的变量。学习了一波大佬们的知识 声明变量的时候，变量名前面要加两根连词线 -- 。 它们与color、font-size等正式属性没有什…"}, {"id": "6844903618982707208", "title": "笔记：CSS、canvas 和 SVG 分别实现元素沿环形路径运动动画", "desc": "通过使用 CSS、canvas 和 SVG 三种不同的方式实现同一个效果，反而成了对三种不同技术的最简单的介绍，这也是最后加上 canvas 实现的一部分原因，所以希望会对正在学些这些的初学者有所帮助..."}, {"id": "6844903555510304775", "title": "前端性能优化：客户端从输入到展示讲解", "desc": "前端性能优化大纲和总结"}, {"id": "6844903540792492039", "title": "用CSS来计数", "desc": "在CSS中，有两个很好用的伪元素，分别是::before和::after。也许你在看别人的代码时，会看到:before和:after，那是为了兼容早期的浏览器。W3C为了将伪类和伪元素加以区分，在伪元素前面加了两个冒号。 ::before和::after中有一个content(…"}, {"id": "6993336940829343780", "title": "BEM针对css类样式的命名方法", "desc": "BEM BEM是一套针对css类样式的命名方法。 BEM全称是：Block Element Modifier 一个完整的BEM类名：block__element_modifier，例如：banner_"}, {"id": "6844903965167976461", "title": "【重拾基础】耐人寻味的CSS属性white-space", "desc": "《耐人寻味的CSS属性white-space》，本文说的white-space是一个控制换行和空白处理的CSS属性。我曾经被这个属性烦死，一直没记住，今天决定还是写下来好好琢磨下。 默认值，正常换行，空白和换行符会被浏览器忽略。啥意思呢？ 正常换行的意思是，单词间会正常换行，如…"}, {"id": "6844903507959496711", "title": "js操作样式自动prefix", "desc": "在用vue写一个项目时，编译时vue-loader会自动给css加上合适的前缀，无需手动添加，无疑方便了很多。但是过程中，经常要用js动态添加样式，如此添加的样式就需要手动添加浏览器前缀了。相当的麻烦，还容易出错。下面介绍一种解决方法供大家参考。 以上就是js中的css pre…"}, {"id": "6844903600917839885", "title": "【图片版】CSS网格布局（Grid）完全教程", "desc": "CSS网格布局（Grid）是一套二维的页面布局系统，它的出现将完全颠覆页面布局的传统方式。传统的CSS页面布局 一直不够理想。包括table布局、浮动、定位及内联块等方式，从本质上都是Hack的方式，并且遗漏了一些重要的功能（比如：垂直居中）。Flexbox的出现部分解决了上述…"}, {"id": "6844904073179709453", "title": "据w3c文档了解BFC及应用学习总结", "desc": "首先回顾一下普通流，普通流对后面进一步了解BFC有很大的作用普通流（NormalFlow）普通流是网页中元素的默认排版，默认情况下块级元素：以blockflowdirection排列（每一个块级元素新"}, {"id": "6844903873019117576", "title": "教你用CSS玩转各种形状？", "desc": "很多小伙伴在做开发的时候，遇到一些要画很多形状的时候，就很纠结了，知道怎么用CSS去布局，就是不知道怎么画图案。 其实使用CSS可以绘制出很多形状，比如三角形，梯形，圆形，椭圆形等等，并不是只能画矩形。 今天的教程，就来教大家怎么去用CSS绘制这些图形吧。 为了方便大家去理解，…"}, {"id": "6936176481139687437", "title": "前端二向箔07-CSS选择器", "desc": "CSS选择器是CSS的主体内容. 选择器字如其名, 通过一些标识特征, 选中DOM中的元素( 伪元素选择器则不然, 后文会提及 ). 上一篇文章初略地列举了选择器地类型和优先级. 本文会详细整理选择器的相关核心知识. 更具三大优先级进行划分为特点的, 有四种. 结构特点划分, …"}, {"id": "6844903839557140494", "title": "CSS你可以不写，但这些规范必须要知道！", "desc": "前端技术栈的日益丰富，各位媛兄更多的是把技术专注点放在了JavaScript与框架上，对CSS有深入探究的少之又少，不知道别的公司什么样，我们部门关于写HTML+CSS的，直接就会丢给公司的实习生来完成，写的说不上好，但也不算差，没有什么亮点，而且CSS写的也不是那么规范，很不…"}, {"id": "6844903856984293384", "title": "CSS3动画属性之Animation", "desc": "Animation 是 CSS3 属性中，除了 transform、transiton 之外的一个动画属性。 具体有：animation-name、animation-duration、animation-timing-function、animation-delay、anim…"}, {"id": "6844903633289478152", "title": "微信小程序 CSS filter（滤镜）的使用示例", "desc": "之前在看七月老师的视频的时候，看到了有一个样式是-webkit-filter，不知道是什么（我没咋学过CSS，嘿嘿，所以不知道是啥），于是查了一下，原来是滤镜吖。但是在微信小程序里使用的时候，下面一直飘绿色的波浪线，再仔细查了一下，原来是在Chrome 18, Safari 6…"}, {"id": "6844904097733148686", "title": "CSS3之背景 background", "desc": "background是一个简写属性，可以在一次声明中定义一个或多个属性。除去特定的属性 其他属性可以按任意位置放置。 background ： [background-color] | [background-image] | [background-position][/ba…"}, {"id": "6844903844728537096", "title": "【Hello CSS】第七章-CSS的继承与可变性", "desc": "鱼头注：有很多人会认为 !important 也参与了优先级的排列，但 !important 是在优先级的规则之外的，如果参与了优先级的排列，意思就是 !important 是可以被覆盖的，但事实显然不是。 接下来我们谈谈 CSS中的继承。 在这里分享一个CSS属性all。CS…"}, {"id": "6963255405292355620", "title": "【不一样的CSS】深入理解 position (掌握定位就是这么 sao 气)", "desc": "【不一样的CSS】深入理解 position (掌握定位就是这么 sao 气) position 属性概述 absolute 属性值 sticky 属性值 fixed 属性值"}, {"id": "6968742858027679758", "title": "web前端入门到实战：CSS实现圆形进度条", "desc": "结构 首先一个父级div设置相对定位，内部含有四个半圆div和一个用于遮罩的小圆div 实现步骤 先写出基本html结构 父级div和content添加样式 当前效果： 添加第一个背景半圆 添"}, {"id": "6953168178532843556", "title": "Stack Overflow史上最流行的5个CSS问答", "desc": "Stack Overflow是最受程序员群体喜爱的问答平台。如果一个问题在Stack Overflow上比较受欢迎，那么你大概了已经遇到或者将要遇到同类型的问题。"}, {"id": "6844903511218454542", "title": "JavaScript常用方法", "desc": "JavaScript提供了很多的API，但是有时候为了实现兼容，我们不得不手动实现。"}, {"id": "6844904058172473352", "title": "「进击的前端工程师」CSS色彩揭秘", "desc": "每每提及色彩，我总会想起苏轼的一年好景君须记，正是橙黄橘绿时，白居易的日出江花红胜火，春来江水绿如蓝，朱熹的等闲识得东风面，万紫千红总是春。 也许世界本无色彩。 古人曾用诗词赋予了这个世界色彩，而如今是物理的光学让我们认识到了色彩。那么本文将带你揭秘CSS中的色彩。 但实际上，…"}, {"id": "6844903580965535757", "title": "CSS3布局神器 - Flexbox", "desc": "使用flex只需在父元素上定义display:flex,然后子级的所有元素都具有了flex功能。 现在.box以及子元素都具备了flex特性，可以通过相应特性进行个性化布局，接下来将逐一介绍每一个特性。 一个无单位数(): 它会被当作flex-grow的值。 一个有效的宽度(w…"}, {"id": "6844903519040831496", "title": "CSS float相关详解", "desc": "float元素也称为浮动元素，设置了float属性的元素会根据属性值向左或向右浮动。浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。简单来说，就是让block元素无视float元素，让inline元素让流水一样围绕着float元素来实现…"}, {"id": "6844904019823951879", "title": "公祭日网页灰色效果", "desc": "首先公祭日默哀。。。。 百度百科在有人去世会把搜索信息页面灰化，今天访问b站的时候发现在公祭日这一天b站也全站灰化，各网站都以一种互联网的风格来哀悼死者。 哀悼的同时给大家顺便讲下全网站灰色化的实现。 none: 默认值。 blur(): 给图像设置高斯模糊。 brightne…"}, {"id": "6899693749262090253", "title": "清除浮动", "desc": "1、问题描述：当一个没有设置高度的容器(父元素)内有多个浮动的子元素时，（1）这个容器没有被撑开；（1）在这个容器内再添加其他非浮动子元素，容器被撑开了，但是这个非浮动的子元素会被浮动元素遮盖住；（2"}, {"id": "6957979828515504158", "title": "CSS篇：BFC和IFC", "desc": "BFC和IFC Formatting Context Formatting context 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将"}, {"id": "6977188529814110221", "title": "css揭秘 - 过渡与动画（三）", "desc": "这是css揭秘系列文章的第十四篇，本篇主要介绍使用css可以实现的过渡与动画——沿环形路径平移的动画。至此CSS揭秘系列更新完毕~"}, {"id": "6877806036909195272", "title": "掘金头像旋转", "desc": "那一天我在摸鱼，突然有个评论告诉我，去我的主页，鼠标划上头像；（头像在转转转，第一反应WC!!转的好快JS写的嘛！然emmm，Css大哥你好'^-^'）1.浏览器devtool控制台的使用**需要抓取"}, {"id": "6885516530331713549", "title": "良好的CSS编码习惯", "desc": "一个 css 文件的核心内容是由许许多多的 css 规则组成的，而每个规则又包含了两部分：选择器和声明；声明块里可能又包含多个声明，每个声明又是由属性和值组成的。这个大概就是 css 的代码结构。 这么多的规则就像一个小镇上的房子一样，如果房子建造之初，毫无规划胡乱建造，那等房…"}, {"id": "6974045994988077063", "title": "一些不好记却很好用的CSS属性", "desc": "是我参与更文挑战的第10天，活动详情查看更文挑战 前言 在写过一点时间 CSS 之后，大家对于常见的属性应该都很熟了，例如最基本的 display、position、padding、margin、bo"}, {"id": "6844903501017939981", "title": "有意思的clip-path", "desc": "F12看了一下 Dom 结构，发现作者只是结合了 CSS3 的 clip-path 和 transition 特性，就实现了很厉害的效果，每个转场和动物的细节都做得很棒。 接下来，需要将每个三角形的坐标和色值转化为数据格式。我目前找不到很高效的转化方式，就用标注软件标注完后，手…"}, {"id": "6844903537063788558", "title": "后端工程师入门前端页面重构（一）：口诀", "desc": "本文由 KnewHow 发表在 ScalaCool 团队博客。 大家好，我是 KnewHow，一名前 Java 开发工程师。为什么要说是「前」呢？这要从两周前我加入一家新公司说起。 入职第一天，实习导师告诉我会有一个月的新人引导计划，当时心里还是美滋滋的，觉得这个公司比较人性化…"}, {"id": "6844903827565461512", "title": "css3实现椭圆轨迹旋转", "desc": "本篇如能对您有所帮助，实在是感到荣幸。如有不合理之处也请大家多多指点。"}, {"id": "6844903510706749448", "title": "使用 JavaScript 实现分屏视觉效果", "desc": "使用 JavaScript 实现分屏视觉效果"}, {"id": "6844903853565952013", "title": "用 radial-gradient 实现波浪效果", "desc": "图中的波浪线 L 就是我们要的，它是沿着上下两排相切圆的切线画出来的，只要画出 A 段然后重复，就可以得到我们想要的波浪效果。 首先要解决怎么画圆的问题，这里就要用到 css3 radial-gradient 属性，不了解这个属性的可以看一下mdn或者10个demo示例学会CS…"}, {"id": "6844904068230414344", "title": "[译] 如何为 <select> 添加一致性样式", "desc": "为 select 元素添加库跨浏览器一致性样式一直就是一件很难的事情。过去为了避免这个问题，我们用过诸如给父元素添加样式、添加伪元素、甚至是借助 JavaScript 的帮助实现类 Select 的功能控件，只是为了能够更加容易的自定义样式。但缺点是较难维护和使用，更不用说是用…"}, {"id": "6985436331040047118", "title": "CSS盒模型", "desc": "什么是CSS盒模型 MDN官网给的解释是： 举例说明: 定义一个元素 给这个元素加上如下样式 打开控制台，选中元素，如下图这就是盒模型 两种盒模型 content-box 内容盒 ---- 内容就是盒"}, {"id": "6844903678692818957", "title": "脆弱的HTML邮件模板", "desc": "在开展我们的项目时，在一些方面，如：注册确认、营销推广等，都需要以给用户发邮件的方式，进行沟通，但是我们编写的HTML邮件，很多主流邮箱都会或多或少的过滤掉一些东西，所以就要考虑如何编写才是能兼容各种。 iframe为代表的模版不支持特殊标签包括html5新特性：如：butto…"}, {"id": "6977183344333160455", "title": "为JavaScript开发者提供的CSS动画指南", "desc": "有充分的证据表明，人类的大脑对运动是有硬性规定的。人类更有可能关注元素如何移动，而不是关注静态元素。 CSS动画就是利用了这种人类行为。当动画被添加到一个网站上时，它可以将用户的注意力吸引到产品的重要"}, {"id": "6844903618387116045", "title": "Vertical-Align，你应该知道的一切", "desc": "好，我们聊聊vertical-align。这个属性主要目的用于将相邻的文本与元素对齐。而实际上，verticle-algin可以在不同上下文中灵活地对齐元素，以及进行细粒度的控制，不必知道元素的大小。元素仍然在文档流中，因而其他元素可以根据它们大小的变化进行相应的调整。一个有用…"}, {"id": "6985444293951356959", "title": " 块级格式化上下文", "desc": "全称 Block Formatting Context 简称bfc，它规定了在该区域中，常规流块盒的布局规则。"}, {"id": "6939423801721487391", "title": "探索@property以及它在动画上的能力", "desc": "在了解 @property 之前，一些背景知识可能会有所帮助。 CSS 自定义属性 （Custom Property）已经受到了广泛的支持，并已经被使用在了许多前端组件库中，如 Material-UI。 它能够帮助我们更好的管理复杂样式中的值，并且提升代码的可读性（毕竟 --m…"}, {"id": "6910037385078112270", "title": "CSS中的幽灵空白节点问题", "desc": "首先，vertical-align 这个属性，用来指定行内元素（inline）、行内块级（inline-block）或表格单元格（table-cell）元素的垂直对齐方式。 也就是说，它对于块级元素（block）是无效的。 其次，他的默认值是 baseline ，也就是元素的基…"}, {"id": "6985361507814998046", "title": "前端学习日记 # CSS疑难杂症", "desc": "SPAN 标签设置内外边距问题 问题 给<span>标签设置 padding、margin 后，父元素上下无法撑开，只有左右撑开了，代码如下 原因 <span> 等行内元素是可以设置内边距paddin"}, {"id": "6985351055550873613", "title": "css 常用选择器", "desc": "初级选择器 1 * 通配符选择器 这个选择器是匹配页面中所有的元素，一般用来清除浏览器的默认样式. 2、元素选择器 通过标签名来选择元素。 3、class选择器 class选择器 / 类选择器 / 用"}, {"id": "6844903687383416840", "title": "[译]从内部了解现代浏览器(3)", "desc": "这是本系列文章的的第3部分。 在前2篇，我们介绍了多进程架构和导航流程。在这篇文章中，我们将看看渲染器进程内部发生了什么。 渲染器进程涉及Web性能的许多方面。 由于渲染器过程中发生了很多事情，因此本文仅作为一般概述。 如果您想深入挖掘里面的细节，the Performance…"}, {"id": "6955395450539081759", "title": "前端学习笔记02——伪类和伪元素", "desc": "伪类和伪元素 为什么引入伪类和伪元素 css引入伪类和伪元素概念是为了格式化文档树以外的信息，即不在文档树中的部分。 比如，一个列表中的第一个元素，一句话的第一个字母。 伪类用于当已有元素处于某个状态"}, {"id": "6985183530963697700", "title": "CSS 知识总结", "desc": "文档流 将窗体自上而下分成一行行, 并在每行中按从左至右的顺序排放元素,即为文档流. inline 元素从左到右排列，到达最右边才换行 宽度为内部inline元素的和，不能用width指定 高度由li"}, {"id": "6844903761769398280", "title": "技术周刊（2019-01-07 CSS 动画 ）", "desc": "Chrome 72 已经进入了 beta 阶段。新增：公有类成员的声明和初始化、一些 DevTools 新功能（可视化性能指标、高亮 text nodes、复制节点的 JS 访问路径）等；废弃：页面 unload 的时候将不能使用 window.open() 打开一个新页面了，…"}, {"id": "6844903918984495118", "title": "CSS实现3D效果：立方体", "desc": "首先要给3D的元素准备一个“舞台”，因为页面本身是平面的，并不能展示出3D的效果。 通过设置透视距离，就相当于把这个区域变成了一个能表现出近大远小的“3D舞台”，在其内部就可以去做3D效果了。 舞台搭好，演员上场，在container中加入一个盒子用来做正方体。设置宽高并定位到…"}, {"id": "6948588849899667486", "title": "前端CSS高频面试题---3.如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？", "desc": "在日常的开发中和面试中，总能遇到两栏布局或者三栏布局，今天就给小伙伴简单介绍一下。 两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满。 比如 element-ui 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器。 …"}, {"id": "6844903794224922638", "title": "实现三栏布局的延伸", "desc": "这里主要是考察掌握知识度的延伸，比如你能答出几种？ => 这几种方式的优缺点在哪？ => 最佳方案是哪个以及如何解决这些缺点... 这些可以考验到你是否背题亦或者真正掌握到这些知识点。 高度已知，实现三栏布局，左右 300px 中间自适应。 左右浮动，给宽度，这样就实现了，是不…"}, {"id": "6844903736989450254", "title": "[译] Houdini：也许是你未曾听过的最振奋人心的 CSS 进化", "desc": "你是否曾经想要使用一些特别的CSS特性，却因为未曾得到所有浏览器的支持而选择放弃？又或者是，这些特性得到了所有浏览器的支持，但总会伴随着奇怪的bug，表现不一致甚至相互矛盾？如果这些事情都曾发生在你身上——我敢打赌——你应该关注一下Houdini。 Houdini是W3C的一项…"}, {"id": "6844904145544019982", "title": "CSS——过渡、变形、动画", "desc": "CSS中有几个特别相近的几个属性。他们是transition,transform,animation。可能还有人对translate是什么也不清楚，那我们先给个简单的介绍。 字面意思上来讲，就是元素从这个属性(color)的某个值(red)过渡到这个属性(color)的另外一个…"}, {"id": "6985728848755163149", "title": "CSS - 借助元素数量选择器实现“向前选择”", "desc": "CSS 不能选择前面的元素，因为会引起回溯。但是可以借助父元素和元素数量匹配样式曲线救国，解决“向前选择”和“优化重复元素“问题。"}, {"id": "6844903639568351239", "title": "Vue无限滑动周选择日期的组件", "desc": "写在最前面···先看效果思路根据用户传入日期（不传默认今天），获取上一周，当周，下一周对应的日期放数组dates里根据datas生成每一周对应的日期生成每一个滑动单元的style然后就是处理touch"}, {"id": "6844903509637201927", "title": "字幕字体滚动插件——scroxt.js", "desc": "scroxt.js是一个字体滚动的插件库，包括视频弹幕滚动，直播弹幕、直播弹幕强制模式、单行水平左右滚动、文本垂直滚动上下，用于简单快捷生成滚动字体。性能优秀，通过CPU加速，缓存字体元素，帧运动，达到最流畅的效果。兼容Chrome、Firefox、Opera、IE9及IE9以…"}, {"id": "6939034431562711048", "title": "[译] 如何不使用 JavaScript 在页面滚动时自动折叠标题？｜技术点评", "desc": "想象以下我们有一个看起来很棒而且很厚的一个标题栏，在标题内容的上下都有着不小的内间距。当页面向下滚动时，标题栏的内间距会被缩小而被折叠，从而让页面中的其他内容拥有了更多的屏幕空间展示它们的风采。 通常，我们必须使用一些 JavaScript 代码才能制作出类似的折叠效果，但是自…"}, {"id": "6992917458885541919", "title": "CSS的选择器", "desc": "选择器 标签选择器、id选择器、类选择器、后代选择器、子元素选择器、交集选择器、并集选择器、兄弟选择器、伪类选择器、序选择器、动态伪类选择器、a标签的动态伪类选择器、否定伪类选择器、伪元素选择器、属性"}, {"id": "6970143492152492063", "title": "CSS 不“止” Tailwind ", "desc": "基于内容的**语义化**命名能够让你创建艺术品。然而在一个多人协作的项目，自认为**语义化**的命名往往会成为被人的噩梦。"}, {"id": "6970142647042179079", "title": "让人又爱又恨的 CSS 浮动", "desc": "CSS 中可以用 <div></div> 或者 <span></span> 来当作一个放内容的盒子，我们都知道 <div></div> 属于块级元素、内容独占一行， <span></span> 属于行"}, {"id": "6948447703378427912", "title": "优质的组件库都离不开BEM！", "desc": "1. 摘要 当你在编写css代码的时候，是否遇到这样的困扰: 不知道取什么class名? 修改某个组件的样式，担心影响了其他组件? 编写的组件样式如何复用？为了解决这些问题，聪明的程序猿发明了BEM命名法。 BEM命名法，是对css命名的一种规范，将页面模块化，隔离样式，提高代…"}, {"id": "6984244520355364872", "title": "清除浮动的方法", "desc": "方法一 使用overflow：hidden;使父盒子形成BFC从而达到清除浮动效果 方法二 给后面的父盒子设置clear:both属性。 clear 表示清除浮动对自己的影响，both 表示左右浮动都"}, {"id": "6844903827548667911", "title": "「切图仔日常」浅谈加载动画两板斧", "desc": "此刻深圳大雨瓢泼，周围一片黑压压的。对于这样的日子，果断从冰箱里面拿出肥宅快乐水，打开电脑查看最近更新的番剧，舒服窝在沙发里真是美滋滋。 但是不知道大雨原因，网络加载一直时好时坏，看的贼忧伤，所以临时暂停，先缓冲一下。而此时快乐水中的气泡不断在底下冒出、爆炸，整个房间弥漫着快乐…"}, {"id": "6844903807688671240", "title": "【译】Web 性能优化：21种优化CSS和加快网站速度的方法", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 CSS 必须通过一个相对复杂的管道，就像 HTML 和 JavaScript一样，浏览器必须从服务器下载文件，然后进行解析并将其应用于DOM。由于优化程度极高，这个过程通常非常快——对于不基于框架的小型 web…"}, {"id": "6905017502749704206", "title": "Display: none 与 Visibility: hidden有什么区别？", "desc": "在css中，设置元素的隐藏的方式，主要有两种，一种是display:none，一种是visibility:hidden，那这两种隐藏方式的主要区别是什么呢？接下来，我将从四个方面，简单介绍一下二者的区别。 举例来说：比如，我这里有2个ul，每个ul下面，有4个li，而且，对每个…"}, {"id": "6985542080042893320", "title": "《图解CSS》背景", "desc": "CSS的背景可以为元素添加背景颜色（background-color）和背景图片(backgroud-image), CSS3也提供了背景使用多张图片和渐变色的功能。 CSS背景属性 backgrou"}, {"id": "6985541159938588680", "title": "《图解CSS》选择器", "desc": "在CSS简介一节中，我们了解到，CSS的语法如下： 那么有哪些选择器可以使用呢？ 上下文选择符：基于祖先或同胞元素选择一个元素 ID和类选择符：基于id和class属性的值选择元素 属性选择符：基于属"}, {"id": "6924507316847181831", "title": "移动端优先的弊端【译】—— Tapha Ngum", "desc": "虽然我是可以理解移动端优先开发背后的思想，但它总让我感到不舒服。 移动端优先是在开发桌面版的网页之前先开发它移动端版本，从理论上来说，它是一个非常棒的想法。 但在实际中就会出现很多问题。 在无数的开发者故事中，他们在听说了移动端优先方法（甚至学习如何布局）之后，但最终还是回到了…"}, {"id": "6958780861906944014", "title": "                           06.CSS盒子模型", "desc": "一.理解css盒子模型 HTML中的每一个元素都可以看做是一个盒子 HTML中的每一个元素都可以看做是一个盒子，如右下图所示，可以具备这4个属性 在浏览器中检查元素可得到下图： 二.标准盒子模型 从上"}, {"id": "6844903630450098189", "title": "开发一个自己的 CSS 框架（一）", "desc": "这是一个系列，带着大家封装一个纯 CSS 框架，从零学习 SASS 语法。 首先得为 UI 选择一些基本色调，这其实是最核心的。当你改变一些基本配色之后，你会发现框架完全不同了。 初始化一个 Nodejs 项目，安装 parcel 打包工具，让 parcel 来帮我们处理可编译…"}, {"id": "6844904152842108935", "title": "你知道雪碧图吗？有哪些优缺点？", "desc": "这道题实际上考的是前端性能优化的一个点。 雪碧图的英文是CSS Sprites。 其目的是将多张比较小的图片，合并到一张大的图片上面，大的图片背景透明，使用的时候，通过把该张图片当做背景图片，通过不同的 background-position定位来展示的那部分图片。 降低服务器…"}, {"id": "6966842596781981726", "title": "CSS清除浮动", "desc": "在非IE浏览器（如Firefox）下，当容器的高度为auto，且容器的内容中有浮动（float为left或right）的元素，在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外"}, {"id": "6844903687110787086", "title": "Create React App 2.0 华丽登场", "desc": "Create React App 是由官方所维护的开发工具，主要提供了专属于 React 开发环境的前置工作。简单来说，就是不需要安装或设定像 Webpack、Babel 这类的构建工具，而是由 CRA 替你预设且隐藏的。最主要的好处即是让开发者可以专注在程式开发，节省了繁杂的…"}, {"id": "6844904195452043272", "title": "CSS 知识总结", "desc": "默认每一个 z-index 为 auto ，auto 计算出来的值是 0 。 脱离原来的位置，另起一层。比如对话框的关闭按钮、鼠标提示等。 只要元素定位了，自动跑到所有东西最上层。默认 z-index = 0 上面定位提到了层叠上下文，那么什么是层叠上下文呢？层叠上下文也叫堆叠…"}, {"id": "6844903911791263758", "title": "[译] Flexbox 的使用场景", "desc": "本文是 Flexbox 系列的最后一篇文章。文本我将花时间说明 Flexbox 的使用场景，而且我们现在还有 Grid 布局，我会对如何在他们之间做选择和各的使用场景做些说明和建议。 如果你还没有读这个系列的其他文章的话，现在可以先去看看一下。我先讲了 当我们在使用 displ…"}, {"id": "6844903505606475784", "title": "哪些你知道或不知道的css，在这里或许都齐全", "desc": "暑假实习的时候带我的师傅，告诉我要注重基础，底层实现原理。才能在日新月异的技术行业站住脚跟，以不变应万变，万丈高楼平地起，所以我们应该不断的去学习，去交流。交流，不应该仅仅停留在技术方面，更多的应该是在思维方式。语言只是一种工具，编程的思想才是核心。我们只有在明白了编程的思想之…"}, {"id": "6844903727048949774", "title": "关于如何使用原生HTML + JS + CSS绘制简单折线柱状图", "desc": "CSS确实很重要，且有点奇技淫巧，看起来规则十分简单，但是创意更重要，如何用css构造出自己想要的效果，写的代码好看优雅十分重要。 在看了不借助Echarts等图形框架原生JS快速实现折线图效果并自己重新实现了以后，实在是感慨CSS的强大之处，并作出记录。 1. 如何实现以下效…"}, {"id": "6896348392604041223", "title": "清除浮动的几种方式（解决高度塌陷问题）", "desc": "   相信很多前端小白在进行页面设计时会用到浮动的方式进行布局，这样就会使元素脱离文档流。而在文档流中，父元素会默认被子元素撑开，一旦子元素设置浮动，完全脱离文档流，就会导致子元素无法撑起父元素的高度"}, {"id": "6909076799422988295", "title": "CSS定位全面解析+应用", "desc": "1. 定位的概念 2. 定位元素的特点： 3. 脱离常规流的元素的特点： 4. 相对定位 5. 绝对定位 6. 固定定位 7. 固定定位和绝对定位的共同点和区别 7.2. 包含块为第一屏网页的绝对定位 7.3. 包含块为其父元素的绝对定位 8. 定位元素的宽高 9. 定位实现居…"}, {"id": "6942087691919949831", "title": "在项目中使用glassmorphism UI趋势", "desc": "glassmorphim效果是从2020年开始的趋势之一，到2021年也将持续存在。尽管这种效果并不是Web设计中真正的新功能，但本文稍后将详细介绍。 “磨砂玻璃”效果最常用于信用卡的可视化，赢得了许多设计师的青睐，并掌握了Dribbble之类的网站。 我们有柔和的版本，有鲜艳…"}, {"id": "6844903831478747150", "title": "CSS3的过渡，动画，图形转换", "desc": "迟来的CSS3学习，在CSS3中，增加了许多的新特性，像过度动画，圆角，媒体查询...等等新的特性，可以给我们开发者日常使用。 要创建CSS动画，你需要了解keyframes规则和animation属性。 @keyframes需要规定变化发生的时间，可以使用百分比如0%,50%…"}, {"id": "6844903668609712136", "title": "原生JS实现轮播图--第一章图片展示", "desc": "首先实现一个功能时，要从整体考虑，将大功能分解为多个小功能，在轮播图的实现中，首先最直观的，是展示出来的和未展示出来的足多张图片、可点击的多个按钮和底部提示圆点，这三部分；其次是在不进行任何操作的情况下，图片会自动朝一个方向循环滚动；最后是点击不同的按钮，图片会朝不同的方向滚动…"}, {"id": "6957699182127742984", "title": "CSS布局", "desc": "CSS布局 布局的思路以及三种套路 float布局的步骤及方法 flex布局及练习小游戏 grid布局和练习小游戏"}, {"id": "6844903826806276110", "title": "（07）CSS 基本视觉格式化：① “块盒子”格式化 | CSS", "desc": "前言： 接下来的几篇系列文章我们讲一个东西——盒子（BOX）。 “盒模型”（Box Model）作为 CSS 看待元素的一种方式，CSS 将每个元素都看作由一个盒子表示。从某方面来说，对于初级、中级学习者的我们，大可将 CSS 的学习看作是对“盒子”的学习。 本篇我们将阐述最基…"}, {"id": "6975138139816132639", "title": "CSS居中布局", "desc": "一、水平居中布局 水平居中布局的html如下： 1、inline-block + text-align 将子元素的布局方式改成inline-block，或者子元素本来就是块级元素。父元素设置text-"}, {"id": "6844903792601743374", "title": "[英] 纯基于 CSS 实现不同 scroll 滑动位置的样式改动", "desc": "Rik Schennink documents a system for being able to write CSS selectors that style a page when it has scrolled to a certain point. If you're…"}, {"id": "6984959847372423204", "title": "背景相关知识", "desc": "背景颜色 设置元素的背景颜色 ： background-color : 颜色 | transparent transparent是全透明黑色（black) 的速记法，类似 rgba (0,0,0,0这"}, {"id": "6844904090028245005", "title": "[译] 理解 CSS 网格布局：网格线", "desc": "本文是讲解网格布局系列的第二篇，教你从网格布局新手到专家。 本系列第一篇讲到如何创建网格容器，以及在容器元素上能够使用的属性。网格格式化上下文一旦创建，你也就有了网格线了。有了网格线，你就能在网格项目上添加属性，对项目做定位（place items）了。 定位属性：grid-c…"}, {"id": "6844903584077889544", "title": "更好的 box-shadow 动画", "desc": "某日移动端有一需求：要求一 App Logo 有一层外阴影闪动效果，实现起来倒也不复杂。简单粗暴直接在 keyframes 中定义 box-shadow 动画即可交差，最终代码如下： 动画在 PC 端运行时我这写轮眼是看不出任何卡顿的，一旦在模拟器或者移动端上运行情况就不那么乐…"}, {"id": "6881607064708186126", "title": "【前端基础】 CSS", "desc": "如果把 box-sizing 设置为 border-box 则使用的是 IE 盒子模型。 在 iE6/7/8 的版本中如果缺失 DOCTYPE 就会触发 IE 盒子模型。其他情况我们可以使用 box-sizing 来指定盒子模型自由切换。 DPR=1 时，我们设 1dpi 在 …"}, {"id": "6844903510522200072", "title": "css实现元素水平垂直居中", "desc": "利用负边距实现子元素居中(相对于父元素(position:relative))，需已知子元素的width与height；且把子元素的position设为absolute，绝对定位；以及设置left和top为50%；再加上负边距，margin-left值为width的一半，同样的…"}, {"id": "6981639490594947108", "title": "CSS+ day2", "desc": "CSS+ day2 复合选择器（后代选择器，子选择器，交集选择器，并集选择器，伪类选择器） 标签显示模式 ：块级元素，行内元素，行内块元素，a行内元素常常被转换成行内块元素。 行高：行高和高度的三种关"}, {"id": "6916098799127494669", "title": "css布局篇：Flex 布局语法", "desc": "Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，这种布局已经得到了所有浏览器的支持，所以我们也能很安全地使用这项功能。 Flex 意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局，行内元素也可以使用 Flex 布局。 注…"}, {"id": "6844903511197515783", "title": "uiw-iconfont 1.2.4 发布，开源图标字体", "desc": "uiw-iconfont v1.2.4 已发布，uiw-iconfont 是从 uiw 组件库抽离出来的图标字体，基于 svg 图片生成的图标字体。 新增 environment, eye, folder, man, user-add, user-delete, usergro…"}, {"id": "6844903623277690888", "title": "SVG滤镜对图片调色", "desc": "通过SVG滤镜对图片进行处理，达到和专业软件PS相媲美的效果。"}, {"id": "6844903505291902989", "title": "Functional CSS: 从试着改进可重用CSS做起", "desc": "回想起每次更新泊学网站，最让我头疼的，就是改写CSS。在不同的阶段，对CSS不断深入的理解，对网站内容的调整，对UI的重用需求，都影响着CSS的编写方式，因此，稍不留神，你的代码理解就会充斥着各种风格和各种作用的CSS，让你什么时候想起这些，都觉得心情不那么愉快。 因此，就和大…"}, {"id": "6942787583210422303", "title": "如何去构建种类繁多的CSS Shapes", "desc": "实际项目中，UI会设计各种各样的样式(欲哭无泪)，如果你只会画个矩形，恐怖难以满足UI的需求，当然CSS的发展也为我们提供了可能，在CSS3之前，我们确实只能实现四四方方的矩形。CSS3出现了许多属性：border,border-radius,transform,gradien…"}, {"id": "6844904065395064839", "title": "关于 word-break 与 word-wrap 需要了解的知识", "desc": "CSS 中有一对容易让人混淆的规则，word-break 与 word-wrap。我们常常用它们进行换行的控制，不过我基本是处于用完就忘的状态，这次趁着机会总结一下关于它们的知识。 在介绍它之前，我们先理解一个名词，soft wrap opportunity。soft wrap…"}, {"id": "6844904048844341255", "title": "css网格布局：创建网格容器", "desc": "CSS Grid布局 （又名\"网格\"），是一个基于二维网格布局的系统，旨在改变我们基于网格设计的用户界面方式。我们常用的Flex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局，并不适用于复杂的二维布局。网格（Grid）是第一个专门为解决布局问题而创建的CS…"}, {"id": "6909741974740271118", "title": "CSS字体样式值", "desc": "2、如果设置成inherit表示继承父元素的字体大小值。 设置的字体必须是用户电脑里已经安装的字体，浏览器会使用它可识别的第一个值。"}, {"id": "6909382856947007501", "title": "后端也能写出这么有意思的东西", "desc": "1.台球桌布局2.动画实现3.动效实现球的滚动和反弹完整代码写在最后"}, {"id": "6844903774025154567", "title": "纯 CSS 实现的 Material 组件合集：Matter", "desc": "一个正在制作的项目，作者已将部分作品开源，效果可以在 CodePen 上查看。地址：https://codepen.io/finnhvman/full/zMKagM"}, {"id": "6844903865314181134", "title": "CSS进阶（4）—— 温和padding中的诡异CSS现象", "desc": "padding是盒模型的内边距（也称内补间），在CSS中，box-sizing默认的值是content-box，所以使用padding会增加元素的尺寸，例如 {width : 60px;padding : 0 20px},如果不考虑其他CSS干扰，此时content-box的宽…"}, {"id": "6844903512640323592", "title": "关于Angular样式封装", "desc": "这是一个很简单的话题，但是你很难在搜索到一篇比较完整的介绍它的文章，或者说单纯的告诉你 ViewEncapsulation 的用法而已，这在实际项目中远远不够的。"}, {"id": "6844903874252242951", "title": "CSS进阶（13）—— position:absolute如此高深，我当真不懂（中）", "desc": "在前面一文中，我们测试了很多“无依赖绝对定位”的特殊表现，事实上在平时开发的时候我们使用absolute都用的都是他的“绝对定位”特性，这也是absolute被设计出来的本职工作。为了做好自己的本职工作，absolute还需要left，top，right，bottom四个属性的…"}, {"id": "6844903498379689992", "title": "CSS变量（自定义属性）使用指南", "desc": "CSS预处理器，如Sass和Less，使得CSS代码易于组织和维护。通过提供变量、混合、循环等特性，使得CSS具有动态编写的能力，从而减少重复性工作，提高开发速度。"}, {"id": "6844903504226549767", "title": "iKcamp出品｜微信小程序｜小试牛刀(视频)+发布流程｜基于最新版1.0开发者工具初中级教程分享", "desc": "Step 1. 清理结构 修改后，看下控制台有报错信息，因为我们把页面全都干掉了。 从报错信息来看，很明显，小程序默认会从 pages 字段中读取第一个地址，作为首页加载 -- 知识点。 Step 2. 增加 flex 页面 Page() 函数接受一个 object 参数，其指…"}, {"id": "6949530354541658142", "title": "手写百度页面问题小结", "desc": "手写了百度页面 html + css。练练手巩固巩固基础。记录一下其中问题和需要注意的地方，以便加深印象。"}, {"id": "6868479700012908557", "title": "一篇文章带你了解CSS基础知识和基本用法", "desc": "前言相信做过网页的对Css都不是很陌生，它可以帮助我们重铸网页中很多绚丽的特效，尤其是现在Css已经发展3.0版本，很多功能更是丰富多彩，让我们的开发时间不仅大大缩短，而且还可以轻松做出许多华丽的特效"}, {"id": "6844903518466211853", "title": "transform 的副作用", "desc": "transform 想必大家都很熟悉，可以通过其转换（translate）、旋转（rotate）、缩放（scale）、倾斜（skew）等属性来对元素进行变换，不过这篇文章想探讨的不是这些内容，而是 transform 对元素布局、页面渲染方面的影响。例如，你知道它会影响 fix…"}, {"id": "6844903583767527432", "title": "移动前端开发viewport深入理解", "desc": "一个网页在pc端和移动端能统一适配，关键因素就在于viewport。在移动设备上进行网页的重构或开发，首先得搞明白的就是移动设备上的viewport了，只有明白了viewport的概念以及弄清楚了跟viewport有关的meta标签的使用，才能更好地让我们的网页适配或响应各种不…"}, {"id": "6844903496236400647", "title": "你不知道的CSS（三）", "desc": "在前面两篇文章《你不知道的CSS（一）》和《你不知道的CSS（二）》中大致介绍了一些CSS方面比较隐晦的但又很实用的技巧。相信这些技巧会为大家在项目实践中带来一定的帮助，本文作为《你不知道的CSS》系列的第三篇文章，将继续在CSS技巧方面进行探讨，不同于前两篇的是，本文将着重介…"}, {"id": "6971054450219679751", "title": "CSS flex布局总结", "desc": "flex布局的适用场景 flex 布局最适合应用程序的组件和小规模布局 (grid 布局则适用于大规模布局) 水平方向上的起始和终止方向的概念 世界上的语言有两种书写方向（包括：从左向右、从右向左），"}, {"id": "6971039364017192996", "title": "css选择器优先级计算", "desc": "1. css选择器的优先级 2. 了解css选择器各权重的值 3. 通过权重值计算css选择器优先级 4. 最后的总结"}, {"id": "6945334331313225742", "title": "10分钟理解CSS3 Grid布局", "desc": "列的个数是固定的，不能灵活定义。比如bootstrap是12列，semantic ui是16列，ant design 24列。 当然grid也可以用flex实现，但是并不会比用float简单多少，而且flex擅长的是一维空间的布局，而对grid这种二维空间并不擅长。现在css3…"}, {"id": "6844903831013163015", "title": "初涉grid布局🐱（二）", "desc": "这两个属性是设置的item上的，不是container上。 这两个属性可以指定分割线的数值。 span表示跨度，如上所示，item开始的地方在第二条线上跨度了两个单元。 根据规范上所说，个人感觉应该是比如第一个item它是1,2, 但是因为它开始的部分是span 2,所以它的初…"}, {"id": "6844903505002528782", "title": "深入了解超快的CSS引擎: Quantum CSS（Stylo）（下）", "desc": "（续篇）现在，我们怎么样让它变得更快?这就是没有优化过的样式计算看起来的样子。浏览器在样式计算里做了很多事情。这个过程并不只是发送在页面第一次加载的时候。随着用户和页面的不断交互，这个过程在不断地重复"}, {"id": "6844903535084060685", "title": "向Zepto学习关于\"偏移\"的那些事", "desc": "offset、position两个api内部的实现都依赖offsetParent方法,我们先看一下它是怎么一回事。 我们都知道css属性position用于指定一个元素在文档中的定位方式，其初始值是static, css3中甚至还增加了sticky等属性，不过目前貌似浏览器几乎…"}, {"id": "6844903736540659719", "title": "每天一点点--BEM命名规范的详解", "desc": "BEM命名的核心就是可以清晰的描述页面的结构,从其名字就可以知道某个标记的含义，于是通过查看class属性就可以知道元素之间的关联。"}, {"id": "6844903498056728584", "title": "[译]HTML&CSS Lesson4: 盒子模型", "desc": "现在我们已经熟悉了HTML和CSS。了解了它的基础。现在我们来更深入的了解元素在页面中的呈现和大小。 在这节课中，我们将会讨论什么是盒子模型，它的工作模式是怎样的。我们也会在课程中学习一些新的CSS属性，并且将介绍三种长度单位。 在了解盒子模型之前，我们先来了解一下元素是如何显…"}, {"id": "6844903845978439694", "title": "flex布局", "desc": "官方说法：Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 民间说法：flex 就是一种布局方式，类似于 block，inline-block等。 任何一个容器都可以指定为Flex布局。 注意：设为flex布局以后，子元素的float…"}, {"id": "6844903541371322382", "title": "从 PostCSS 和 CSSNext 中看 CSS 新特性", "desc": "圣诞礼物，强行翻译了一波，谢谢大家"}, {"id": "6844903497075261453", "title": "clear与BFC对浮动的影响", "desc": "本次是一个基础不能再基础的复习贴。旨在了解人人皆知的浮动，以及通过clear与bfc清除浮动的一些规范上的解释。"}, {"id": "6844903538246549511", "title": "Webpack实战-为单页应用生成HTML", "desc": "在简单的项目里因为只输出了一个 bundle.js 文件，所以手写了一个 index.html 文件去引入这个 bundle.js，才能让应用在浏览器中运行起来。 在实际项目中远比这复杂，一个页面常常有很多资源要加载。接下来举一个实战中的例子，要求如下： 项目采用 ES6 语言…"}, {"id": "6844903496186068999", "title": "React中的样式: 从外联样式到 Styled Components — SitePoint", "desc": "虽然使用React构建应用程序在许多方面已经达到了一定程度的标准化，但是样式仍然是一个有许多解决方案的领域。 每种方案都有其优点和缺点，并没有明确的最佳选择。 在这篇文章中，我会简要介绍关于React组件在Web应用程序是是如何组织样式的。当然，我也会介绍下styled-com…"}, {"id": "6952895430543802375", "title": "《CSS 知识总结》", "desc": "关于CSS的艺术审美实现 浏览器渲染原理 先搬上官方背书 渲染树构建、布局及绘制 渲染性能 使用transform来实现动画效果 可以查看CSS各个属性会触发什么 CSS秘诀 浏览器的渲染过程 单纯的"}, {"id": "6844903608425644046", "title": "详解css盒模型与外边距重叠", "desc": "之前写了一篇关于如何解决css的外边距重叠问题,可是后来发现,我有些本末倒置了,对于一个问题的正确的处理流程就应该是先发现问题,分析问题,解决问题,所以我在这篇文章中就对下css的盒模型,什么是外边距重叠,为什么会发生外边距重叠,以及怎样计算外边距重叠一一进行解读,旨在透过现象…"}, {"id": "6844903545418809357", "title": "【前端Talkking】CSS系列——一步一步带你认识animation动画效果", "desc": "在CSS系列——一步一步带你认识transition过渡效果这篇文章中，我给大家详细讲解了transition过渡的用法，能够实现比较友好的过渡效果，但是功能比较有限，如果要想实现比较漂亮的动画效果，就需要我们今天要请出主角animation登场了。首先，我们来看看animat…"}, {"id": "6844903545167151112", "title": "Excuse me？这个前端面试在搞事！", "desc": "金三银四搞事季，前端这个近年的热门领域，搞事气氛特别强烈，我朋友小伟最近就在疯狂面试，遇到了许多有趣的面试官，有趣的面试题，我来帮这个搞事 boy 转述一下。 以下是我一个朋友的故事，真的不是我。"}, {"id": "6913902197520629767", "title": "css实现一个按钮", "desc": "HTML部分CSS部分"}, {"id": "6844903512371888136", "title": "想象一双结实而富有弹性的大腿：理解 Flexbox 布局", "desc": "本站不支持 CodePen 的脚本插入，可以到我的博客阅读直接显示示例代码的版本。 有很多谈及 Flexbox 的文章，但依然有不少前端对此感到困惑。一方面，flex 相关的 CSS 属性繁多，影响到的具体效果也包含多个方面；另一方面，CSS 可以使用 Shorthand pr…"}, {"id": "6844903539404177415", "title": "[译] 用 CSS 选择器和自定义属性来升级你的项目", "desc": "这篇文章原文刊登在 TestProject。感谢你们的支持，让 SitePoint 成为可能。 Selenium WebDriver 的元素选择器是 自动化测试框架 中所提及的核心组件中的一种，同时也是与 web 应用进行交互的关键。在对 自动化元素选择器 的回顾中， 我们讨论…"}, {"id": "6844903670656565261", "title": "读 VuePress（二）：使用 Webpack-chain 链式生成 webpack 配置", "desc": "vuepress 有三套 webpack 配置：基础配置、dev 配置、build 配置，看似和普通的一个前端项目也没什么差别，但它使用 webpack-chain 生成配置而不是传统的写死配置。 在引入详细的示例之前，先让我们介绍一下 webpack-chain 中内置的两种…"}, {"id": "6951651144217133092", "title": "CSS系列 -- 各种布局实现", "desc": "position定位这里我们有必要先了解一下 position 定位static 元素出现在正常的流中relative 相对定位absolute 绝对定位fixed 绝对定位flex布局详细内容见 C"}, {"id": "6844903504293658632", "title": "谈谈PostCSS", "desc": "CSS，就是这个看似不起眼的家伙，却在开发中发挥着和js一样重要的作用。css，是一种样式脚本，好像和编程语言有着一定的距离，我们可以将之理解为一种描述方法。这似乎导致css被轻视了。不过，css近几年来正在经历着一次巨变——CSS Module。我记得js的井喷期应该可以说是…"}, {"id": "6991152962055700517", "title": "如何使用flex做平均布局和垂直居中的？", "desc": "1.最近需求里面涉及到平均布局，现在在这里总结一下： 想做一个这样的布局： 涉及到三层div：父div，五个子div，中间加一层x的div，flex，中间一层div加个负margin，实现一个平局布局"}, {"id": "6844903565454999560", "title": "移动端布局方案探究", "desc": "1. 物理像素(physical pixel) 2. 设备独立像素(density-independent pixel) 3. 位图像素 一个位图像素是栅格图像(如：png, jpg, gif等)最小的数据单元。每一个位图像素都包含着一些自身的显示信息(如：显示位置，颜色值，透…"}, {"id": "6844903517304569864", "title": "Q:你知道如何用line-height使多行文字垂直居中么？", "desc": "line-height（行高） : 指的是两行文字间基线之间的距离，而实际撑开div高度的不是height，而是line-height。 **line box **: 每一行称为一条line box，它又是由这一行的许多inline box组成，它的高度可以直接由最大的line…"}, {"id": "6920608051057655821", "title": "使用stroke-dashoffset 快速实现SVG描边动画", "desc": "stroke-dasharray：控制用来描边的点划线的图案范式。 这里可以传入以空格代表分隔的数组：可以传入任意数量的数字，代表了分割的规律。比如： stroke-dashoffset：用于指定 stroke-dasharray 开始的偏移量，这也是动画的原理的关键。 通过控…"}, {"id": "6844903705993543688", "title": "CSS系列——transition属性", "desc": "进度条会一段一段的渲染，非常突兀，用户体验很不友好。下面我们一起来探究一下transition属性用了什么魔法，让CSS能动起来？ property：可以做动画的属性，包括width、height、background、backgorundImage、opacity、font、…"}, {"id": "6961643051848564744", "title": "CSS系列 -- 清除浮动", "desc": "场景 一个大盒子 Box，里面包含两个小盒子 box1、box2，想让 box1、box2 的高度来撑开 Box ，使得 Box 能做到 高度自适应（因为大盒子 Box 里面可能还有其他盒子 box3"}, {"id": "6844903545053921293", "title": "[翻译] tween.js 中文使用指南", "desc": "在学习 tween.js 的过程中没找到合适的中文资料，于是翻译了一篇入门指南。"}, {"id": "6844903502217478157", "title": "浏览器性能优化-渲染性能", "desc": "在浏览器渲染过程与性能优化一文中（建议先去看一下这篇文章再来阅读本文），我们了解与认识了浏览器的关键渲染路径以及如何优化页面的加载速度。在本文中，我们主要关注的是如何提高浏览器的渲染性能（浏览器进行布局计算、绘制像素等操作）与效率。 很多网页都使用了看起来效果非常酷炫的动画与用…"}, {"id": "6844903751141212173", "title": "移动端开发——关于局部区域滚动总结 | 实战系列", "desc": "在移动端开发的时候经常会碰到区域滚动的需求，当然实现起来也是非常简单的，给需要滚动的元素定高然后添加一个overflow-y:scorll自然就可以滚动了，但是添加这个属性之后，使用chrome或者其他浏览器工具调试时是支正常的，但是到手机上时滚动效果就十分的奇怪，滚动会让人感…"}, {"id": "6971009198205173790", "title": "CSS入门基础（样式，css文件，选择器）", "desc": "CSS简介 详细样例： 基本用法——给元素添加样式 行内样式 运行效果： 内部样式 完整样例代码： 效果截图： 外部样式 定义样式 css 文件 在 html 中引入 css 文档 样例： 完整代码："}, {"id": "6909060535510269965", "title": "CSS3实现气泡对话框", "desc": "可以把该对话框拆解为带圆角的普通矩形+三角形, 三角形可以借助border属性实现, 其中三角形占位可以借助CSS3的before、after伪元素实现. 实现原理：将2个三角形叠加、before的三角形边框颜色和外面框的保持一致, after的三角形边框设置成白色即可."}, {"id": "6984789291264114695", "title": "CSS动画", "desc": "CSS动画 动画的原理 其定义为：有许多静止的画面（帧），以一定的速度（如30张/s）连续播放时，肉眼因视觉残像产生的错觉，而误以为是活动的画面。 帧的概念 帧是指每一个静止的画面，一般影视作品的播放"}, {"id": "6844903785316237325", "title": "红绿灯🚦——CSS 动画", "desc": "乍一看你可能会觉得纯CSS动画可能做不到，实际上知道了原理还是比较简单的。 从上面样式里看出，每盏灯的 animation 持续时间都是10s，那动画不断循环播放的时候，它们之间就会一直保持同步的时间关系。 从图中看，一共分5个阶段或者说5个步骤，在每个阶段，不同的灯处于 on…"}, {"id": "6844903767033249805", "title": "Webnovel 不用照顾 Edge 浏览器性能？想多了！", "desc": "曾写过一篇性能优化 “ 长篇报告 ” 「 checkbox 美化引发的蝴蝶效应 」 ，也曾感叹 CSS 对渲染的影响是如此大，也许深化记忆点的代价就是被同一块石头绊倒2次 ？是的，性能优化“报告”第二弹来了，希望本篇文章可以在优化页面性能上给大家提供一些思路。 visibili…"}, {"id": "6844903688444739592", "title": "LESS即学即用", "desc": "我们大家都知道HTML和CSS不属于编程语言而是属于标记语言，所以很难像JS一样定义变量、编写方法、实现模块化开发等。而目前的CSS编写模式中，都是定义一些公共的样式类名，哪一块的HTML需要这个样式，就去增加对应的样式类名，所以我们经常看到一个标签上存在很多样式类名，在这种模…"}, {"id": "6974739141921603597", "title": "CSS文件是什么", "desc": "CSS文件是什么 上张图： 怎么创建 CSS 文件 怎么使用 CSS 文件 首先我们先创建一个 html 文件写一些内容 接下来我们用 css 文件来修饰 css 代码： html 代码： 效果截图："}, {"id": "6905928473786974221", "title": "transition, transform, animation", "desc": ":hover 伪类选择器不仅可以用于a标签, 还可以用于所有标签, 但行元素在转为块元素或者脱标之前不能设置宽高. 这个属性让人不适应的地方在于属性值还要取值. 3D 相比 2D 多了个厚度."}, {"id": "6844904147414712334", "title": "前端布局必须了解的css选择器", "desc": "有时候我在想，我们前端写页面比较花时间，能不能减少这部分时间呢？当然你会说“你傻啊，不是有UI库嘛！”，但是别忘了，不是每个项目都有可用的UI库，同时使用别人的UI库，并不能百分比能够解决你所有的问题，如果我们对CSS选择器了解的更多一些，或许就可以少写很多JavaScript…"}, {"id": "6981456441341132837", "title": "下一代 CSS：@container", "desc": "Chrome 正在试验 CSS @container 查询器功能，这是由 Oddbird 的 Miriam Suzanne 和一群网络平台开发者支持的 CSS 工作组 Containment Leve"}, {"id": "6844903567707357197", "title": "CSS知识点及技巧整理", "desc": "这些个知识点是我个人认为的，下面我们就来看看这些个知识点。 position 的常见四个属性值: relative，absolute，fixed，static。一般都要配合\"left\"、\"top\"、\"right\" 以及 \"bottom\" 属性使用。 static:默认位置。 在…"}, {"id": "7002055216228991006", "title": "老司机重学CSS：认真扒一下 Grid Layout", "desc": "说到 CSS 的布局，肯定少不了 Flex（弹性盒子） 和 Grid（网格布局）。Flexbox 适合用在组件和小规模的布局中，而面对更复杂或整体规模的布局，Grid 则更擅长了。"}, {"id": "6989055383486758919", "title": "网页RTL布局适配方案和rtlcss插件在项目中实践", "desc": "本文首发于：https://github.com/bigo-frontend/blog/ 欢迎关注、转载。 前言 bigo作为全球化的互联网企业，产品体验要求国际化，本地化，所面向的用户来自世界各地，"}, {"id": "7000178416267821070", "title": "【自种树自乘凉】CSS 三种常见的垂直水平居中方案", "desc": "1. 绝对定位 + margin: auto 法；2. 绝对定位 + margin 负间距法；3. Flex 弹性布局法"}, {"id": "6984720412160557063", "title": "HEX vs RGB vs HSL：设置 CSS 颜色属性的最佳方法是什么", "desc": "不知道你是否了解 HEX、RGB 和 HSL 之间的区别，以及其中任意一种的各种优势？ 在深入探讨这个问题之前，让我们简要了解每种颜色方法的含义。 颜色方法的定义 Hex 颜色值是最流行的设置 CSS"}, {"id": "6844903520441729037", "title": "学习Less-看这篇就够了", "desc": "作为前端学习者的我们 或多或少都要学些 CSS ，它作为前端开发的三大基石之一，时刻引领着 Web 的发展潮向。 而 CSS 作为一门标记性语言，可能 给初学者第一印象 就是简单易懂，毫无逻辑，不像编程该有的样子。在语法更新时，每当新属性提出，浏览器的兼容又会马上变成绊脚石，可…"}, {"id": "6844903569087266823", "title": "浏览器的回流与重绘 (Reflow & Repaint)", "desc": "浏览器使用流式布局模型 (Flow Based Layout)。 浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了Render Tree。 有了RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点…"}, {"id": "7002242543584804901", "title": "写了这么久的代码，你知道CSS中的继承与层叠吗？", "desc": "这是【从头学前端】系列文章的第二十八篇-《CSS中的继承与层叠》 本篇文章将来学习CSS中的层叠与继承的内容，本篇文章中包含了CSS中继承的概念，可以继承的属性，以及关于继承的关键字等内容。"}, {"id": "6996224456414724104", "title": "纯CSS生成毛玻璃效果", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 今天我们尝试使用CSS绘制一个毛玻璃效果，在学习过程中，可以了解到CSS的几个属性： blur CSS中有一个blur()函数可以生成模糊"}, {"id": "6999644860240101389", "title": "CSS 数学函数之calc、clamp、min、max", "desc": "现在的 CSS 能够做很多事情，而对于浏览器的兼容性只需考虑主流的，并且大部分主流的浏览器都支持最新 CSS 特性。本文来总结一下CSS中数学函数之min、max、calc、clamp。"}, {"id": "6998305287861960712", "title": "优雅的加载动画", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 背景 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "7002546288180854820", "title": "sass Interpolation 自定义的rem()函数没生效", "desc": "背景 上面就是我之前写的代码，平时用rem() 都是没有问题的，但是上面的函数没有生效 解决方案 Interpolation #{} 参考资料 https://sass-lang.com/docume"}, {"id": "6998385391250178079", "title": "理解响应式布局(进阶必备知识)", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 viewport 也叫“视口”。 移动设备上的viewport就是设备的屏幕上能用来显示网页内容的区域。viewport不局限于浏览器可视"}, {"id": "6844903919106129934", "title": "讲道理，仅3行核心css代码的rate评分组件，我被自己秀到头皮发麻🙆‍♂️", "desc": "像rate评分组件一般都用javascript写，大概一年前，我在简书写过一篇文章原生Javascript实现星星评分组件，感兴趣的可以去看一下，很久之前写的，我不知道之前的代码有多啰嗦，所以这次将是"}, {"id": "6844903512107663368", "title": "前端：你要懂的单页面应用和多页面应用", "desc": "单页面应用（SinglePageWebApplication，SPA）只有一张Web页面的应用，是一种从Web服务器加载的富客户端，单页面跳转仅刷新局部资源，公共资源(js、css等)仅需加载一次，常"}, {"id": "6854573220382081037", "title": "CSS 技巧一则 -- 不定宽溢出文本适配滚动", "desc": "在日常布局当中，肯定经常会遇到文本内容超过容器的情况。非常常见的一种解决方案是超出省略。 这种情况下，在容器定宽但是文本又溢出且不能换行的情况下，我们就需要寻求另外的解决方案。 当然，这种方法简单但是可能缺乏点用户体验。 我们先假设一下，我们的容器的宽度如果是固定的，但是不确定…"}, {"id": "6991867254803529765", "title": "彻底搞懂CSS里的BFC｜8月更文挑战", "desc": "BFC是css中比较重要的一个概念，它不但能解决很多问题，还可以解释CSS中一些诡异的地方，所以搞懂BFC对于学习css来说是很有必要的，以下从【概念】【规则】【创建】【使用】等方面对BFC做了一些总"}, {"id": "6993346946026962981", "title": "预处理器less快速上手", "desc": "最近学习Vue，由于有时要写一些样式，决定来用一下预处理器，所以来回顾回顾 要了解LESS的使用，首先得知道什么是预处理器，说到预处理就会…"}, {"id": "6844904052220755975", "title": "重拾 CSS 伪类选择器 nth-of-type, nth-child", "desc": "下述翻译仅代表作者观点，如果错误，请及时指正child：父级下的所有子元素:nth-child:nth-last-child:first-child:last-child:only-childtype"}, {"id": "6920152965030346760", "title": "表单验证第一部分/  使用 HTML 和 CSS技巧对表单进行约束验证", "desc": "大多数的JavaScript表单验证类库体积都非常庞大，而且往往需要引入其他的库，像jQuery。 例如，MailChimp的嵌入式表单，包含了140kb的 验证文件(压缩后)。它引入了整个jQuery库，以及一个第三方的表单验证插件，还有一些原生的MaiChimp代码。实际上…"}, {"id": "6844903849174499336", "title": "CSS FC布局指南", "desc": "1. 布局 FC（Formatting Context）格式化上下文，其实指的是一个渲染区域，拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素之间的关系和相互作用。 Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。 元素…"}, {"id": "6844903823148875784", "title": "网格布局 ——（语法篇）", "desc": "前面我们讲了 伸缩盒。我们讲到，伸缩盒是传统盒模型布局的一种代替，并且伸缩容器以及flex item的属性足以应付我们常用的各种布局模式，那为什么还会出现Grid网格布局呢？ 可能你已经知道了，以往任何布局方式几乎都是一维布局，而Grid最大的特色就是采用了二维布局。当然，Gr…"}, {"id": "6896299434784030734", "title": "用 CSS Grid 布局制作一个响应式柱状图", "desc": "最新一段时间比较喜欢玩弄图表，出于好奇，我想找出比较好的用 CSS 制作图表的方案。开始学习网上开源图表库，它对我学习新的和不熟悉的前端技术很有帮助，比如这个：CSS Grid。 今天和大家分享我学到的新知识：如何用 CSS Grid 布局制作一个普通的响应式柱状图。先上效果图…"}, {"id": "6950260286297227272", "title": "vue项目全局自定义修改字体样式-只需三步", "desc": "问题描述在开发项目中，可以使用自带的字体，比如微软雅黑或宋体等（宋体很丑，不建议用）；也可以自己下载字体去用。本篇文章记录一下如何修改项目中的字体。步骤描述不同公司的项目中都会有重置样式表（reset"}, {"id": "6984033117904322568", "title": "使用浮动实现网页布局", "desc": "注意事项 垂直显示的盒子，不要设置浮动，只有并排的盒子才要设置浮动。 大盒子带着小盒子跑 构建网页布局时，首先对整个网页进行大块分割，进行浮动设置，，再对分割成的小块进行浮动设置。"}, {"id": "6844903687060455431", "title": "CSS魔法堂：改变单选框颜色就这么吹毛求疵！", "desc": "是否曾经被业务提出\"能改改这个单选框的颜色吧！让它和主题颜色搭配一下吧！\"，然后苦于原生不支持换颜色，最后被迫自己手撸一个凑合使用。若抛开input[type=radio]重新开发一个，发现要模拟选中、未选中、不可用等状态很繁琐，而涉及单选框组就更烦人了，其实我们可以通过lab…"}, {"id": "6844903496513224711", "title": "动态加载js css 插件", "desc": "动态加载js，css在现在以及将来肯定是很重要的。目前来看前端代码编写的业务量已经远远超过后端编写的。随着对用户体验度逐渐增强，前端业务复杂，加载速度变得很慢很慢。为了解决这个问题，目前出现的两个前端模块加载器为require.js与sea.js，这两款模块加载器都不错。但是呢…"}, {"id": "6844903600498409480", "title": "你不知道的那些DOM", "desc": "DOM2级和3级的目的在于扩展DOM API，以满足操作XML的所有需求，同时提供更好的错误处理及特性检测能力。从某种意义上讲，实现这一目的的很大程度意味着对命名空间的支持。 有了XML命名空间，不同XML文档的元素就可以混合一起，共同构成格式良好的文档，而不必担心发生命名冲突…"}, {"id": "6844903613500751879", "title": "有赞 WEB-UI 自动化实践", "desc": "Bee 是由有赞 QA 开发的 UI 自动化工具，并以此实现了 web 端和 wap 端的核心业务的自动化。旨在简化开源工具提供的接口，方便 UI 自动化测试用例的设计。 Bee 整个框架是基于 selenium 和 selenide 设计的。框架对 selenium 和 se…"}, {"id": "6844903592407597070", "title": "有趣的css", "desc": "扇形，实现了一个扇形，那其他的几个进行旋转。 这样会生成一个等腰直角三角形，顶角90°，显然不满足需求，但是我们也已经实现了一半，通过改变border-width，以达到60°脚。 border-width(具体怎么算，尝试一下就知道了)。那么如题，需求是半径100px,即我们…"}, {"id": "6844903597159743496", "title": "每个 JavaScript 工程师都应当知道的 10 个面试题", "desc": "对大部分公司来说，招聘技术人员这种事情，管理层就应该放手交给技术团队，只有他们才能够准确地判断应聘者的技术实力。如果你恰巧是应聘者，你也是迟早都要去面试的。不管你是哪边的，都让大哥来教你几招。 大兄弟们，要收藏，也要点赞呐。 在 How to Build a High Velo…"}, {"id": "6844903545968263176", "title": "canvas开发手册", "desc": "这是一遍作为canvas入门的文章，可以作为以后canvas开发的参考手册，学完这些基础知识对于普通的网页动画、简单的数据可视化开发很有帮助。"}, {"id": "6844904096470663182", "title": "css的艺术", "desc": "行内样式：标签内引入style属性。加载顺序：和页面同时加载。 内部样式（嵌入样式）：在<head></head>中<style></style>。加载顺序：和页面同时加载。 链入外部样式：<link href='xxx.css' rel='stylesheet' type='…"}, {"id": "6955749647625224229", "title": "CSS中的水平居中", "desc": "本文介绍CSS中的水平居中。让 inline 或 inline-xxx 元素在父元素内水平居中 如果是想让一个 inline 或 inline-xxx （inline-block, inline-ta"}, {"id": "6844903517191143437", "title": "CSS浮动简介以及实现", "desc": "如果在阅读本篇文章之前，浮动让你感觉到很困惑，那么开始阅读吧。"}, {"id": "6844903686997557261", "title": "Create React App 2.0: 集成Babel 7,Sass...", "desc": "2.0版本之前是1.5.2， 1.5.2版本是2018年2月份发布的，时隔半年之多终于迎来了一次革命性的大改变。 虽然React本身不需要任何构建依赖性，但编写一个没有快速测试运行器，生产minizer和模块化代码库的复杂应用程序可能具有挑战性。从第一个版本开始，Create …"}, {"id": "6877442138012352525", "title": "温故而知新之CSS学习", "desc": "1、BFC：BlockFormattingContext（块级格式化上下文）BFC布局规则内部的Box会在垂直方向一个接一个地放置Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Bo"}, {"id": "6844903506390827021", "title": "padding-使用必记", "desc": "说起了padding可谓是盒子模型中最常用的一个属性，你真的了解padding吗？那我请问您设置padding会影响盒子的宽度与高度吗？也许好多人会回答padding会影响到盒子的宽度与高度。在我看来，padding是不会影响盒子宽度与高度，padding会影响盒子宽度与高度的…"}, {"id": "6844903906229616647", "title": "【漫画讲技术】CSS系列漫画教程（6-10讲）", "desc": "《CSS系列漫画教程》共15讲，是我2012年刚毕业步入互联网时的早期作品。时隔多年，如今互联网内容为王的分享经济迅速发展，这些作品压箱底太可惜，不如分享给大家。 漫画还停留在当年前端兼容ie6的时代，如今ie6随着那一代人的青春一起逝去，大家各奔前程，留下是感情和回忆。漫画不…"}, {"id": "6844903542495379464", "title": "前端CSS的工程化——掌握Sass这四大特性就够了", "desc": "记得刚遇见css的时候，咱像是见了美人儿一样，简直是爱不释手啊，简简单单写几行算不上代码的代码，就能做出这么漂亮的东西，这也成了咱前端之路的最初动力。然而，随着项目体量和页面复杂度的增加，咱很快就发现这美人儿非但不漂亮，而且缺胳膊少腿儿的。"}, {"id": "6844903603589611533", "title": "用CSS3美化单选框 radio 、多选框 checkbox 和 switch开关按钮", "desc": "用CSS3美化单选框radio、多选框checkbox和switch开关按钮发表于2018年05月5日by愚人码头被浏览1,584次分享到：小编推荐：掘金是一个高质量的技术社区，从ECMAScript"}, {"id": "6844903983639707661", "title": "前端深入之css篇丨2020年，彻底掌握css动画【transform】", "desc": "说起来css动画是一个很尬的事，一方面因为公司用css动画比较少，另一方面大部分开发者习惯了用JavaScript来做动画，所以就导致了许多程序员比较排斥来学习css动画（至少我是），但是一个不懂css动画的前端工程师不能称之为掌握css3，其实当你真正学习css动画之后，你会…"}, {"id": "6977372193042890782", "title": "CSS之过渡（transition）", "desc": "transition（过渡）：用于设置元素的样式过渡 transition和animation有着类似的效果，但细节上有很大的不同。`transition`属性是 `transition-proper"}, {"id": "6985028650366140447", "title": "CSS position absolute", "desc": "上次在写demo时，发现position和自己理解的有点不一致，如果对position top和bottom都不设置值时,上下位置还是按正常布局 HTML CSS 展示结果如图 发现想让btn居中,必"}, {"id": "6844903961837699086", "title": "CSS实现标签效果", "desc": "需求场景 当前端页面需要展示皮肤是否在使用、书籍是否阅读中、文件是否下载完成时，这时最直接的效果就是在盒子(div)左/右上角显示相应标签，不仅美观且实用。 这里以制作图片右上角标签为例，用CSS以最"}, {"id": "6869654419609387022", "title": "CSS 中的层叠上下文", "desc": "层叠上下文即是网页在 Z 轴方向的一个概念，根据这个特性我们可以在页面上通过元素堆叠实现一些效果。比如页面上常见的引导浮层、Modal 对话框用的就是这个特性，如下图中的下拉菜单： 一瞬间我们就想到了 position: relative, position: absolute…"}, {"id": "6844903567510208520", "title": "5 分钟了解 CSS 变量", "desc": "CSS 自定义属性（即变量属性）是前端开发者的一大利器，它将变量的强大属性引入到 CSS 当中，从而减少了代码的重复性、提高了代码的可读性和灵活性。 此外，与一些 CSS 预处理器不同的是，CSS 变量实际上是 DOM 的一部分，这对于开发有极大的好处。 关于为什么在 CSS …"}, {"id": "6844903589186387976", "title": "移动端『H5日历组件』已废弃不再维护", "desc": "该组件目前仅适用于移动端H5页面展示，后期高级用法中会讲述到如何基于日历基类实现自定义模板传入。（即：开发者只需要传入自己的模板即可实现出自己的优美的日历出来。） 本篇主要是带大家入门日历组件的使用，该文档后面会持续优化更新。若有不足，请大家多多指教，小编会及时更正！ 会销毁清…"}, {"id": "6876368084974698503", "title": "CSS使用BEM命名规范实践", "desc": "...... BEM（块，元素，修饰符）是基于组件的Web开发的一种前端命名方法论，主要针对CSS。其背后的想法是将用户界面分为独立的块。即使使用复杂的UI，这也使界面开发变得容易和快速，并且允许重用现有代码而无需复制和粘贴。 不能将修饰符与修饰的块或元素隔离使用。修饰符应更改…"}, {"id": "6844903748926439431", "title": "css 命名：BEM, scoped css, css modules 与 css-in-js", "desc": "一. BEM 二. scoped css 三. css modules 将 css 的选择器转换成惟一的字符串，运用到 dom。是在用算法命名，记录了人的命名到算法命名的 map 表 四. css-in-js 将 css 内容用惟一的选择器表示。同 css modules，用算…"}, {"id": "6991970536603516935", "title": "前端笔记-CSS浮动 解决高度塌陷｜8月更文挑战", "desc": "float 通过浮动可以使一个元素向其父元素的左侧或右侧移动，使用 float属性来设置于元素的浮动 可选值： none默认值，元素不浮动 left元素向左浮动 right元素向右浮动   注意，元素"}, {"id": "6989036879450505247", "title": "「HTML+CSS」--自定义加载动画【047】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为20px 圆角化 背景色为红色 效果图如下 步骤2 将小球左移100px 效果图如下 步骤3 "}, {"id": "6844903516973039623", "title": "webpack稳定moduleid和chunkid以实现持久化缓存的梳理", "desc": "如何基于webpack做持久化缓存目前感觉是一直没有一个非常好的方案来实践。网上的文章非常多，但是真的有用的非常少，并没有一些真正深入研究和总结的文章。现在依托于于早教宝线上项目和自己的实践，有了一个完整的方案。 想要做持久化缓存那么就要依赖 webpack 自身提供的两个 h…"}, {"id": "6844903745696825358", "title": "「译」有限状态机在 CSS 动画中的应用", "desc": "随着用户界面中可能出现的不同状态和状态间转换的数目的不断增长，样式和动画的管理很快就变得复杂起来。即使是一个简单的登录表单也可以有很多不同的“用户状态流”，并且有许多边界情况需要考虑。 状态机作为一种很好的编程范式，通过符合直觉和声明式的方式来管理用户界面状态间的过渡。我们已经…"}, {"id": "6970500391880359944", "title": "bootstrap", "desc": "1. bootstrap的介绍 1.1. Bootstrap简介 Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVAS"}, {"id": "6844903843193470983", "title": "Css实现垂直居中的几种方法", "desc": "在前端布局过程中，我们实现水平居中比较简单，一般通过margin:0 auto;和父元素 text-align: center;就能实现。但要实现垂直居中就没有那么容易，下面向大家分享下我工作中实现垂直居中的几种方法。 这种方法比较适合文字的居中，其核心是设置行高（line-h…"}, {"id": "6934195007259672589", "title": "width 和 height", "desc": "最近在看张鑫旭大佬的《CSS 世界》，整理并分享一下学习笔记。本文简单学习一下 width 和 height，后面我会更进一步介绍盒模型。 我们可以通过 display 属性来改变 HTML 的默认设置。 每个元素都有两个盒子，外在盒子和容器盒子，外在盒子负责元素是可以一行显示…"}, {"id": "6953428053670232078", "title": "神奇的《css揭秘》第二章笔记", "desc": "--- theme: awesome-green --- 原来css还可以这样玩《css揭秘》第二章 摸鱼期间实在无聊，读了一下这本css揭秘，才发现css有这么多新奇的用法，故想记录下来。作者一共讲"}, {"id": "6844903889980882951", "title": "关于body,html与background的冷知识", "desc": "一. body,html与background-color 若html设置了背景颜色，则该背景颜色作用于画布区域，而body设置的背景颜色正常显示，也就是html的背景颜色会覆盖画布区域，如下图：所以说，若是我们想要给整个网页设置一个背景颜色，最好就是直接给html设置就好了。…"}, {"id": "6847902222106230797", "title": "负margin技术原理与运用 | CSS", "desc": "在CSS中，margin的值可以是正数，也可以是负数。 当margin为负数的时候，对普通文档流元素和对浮动元素的影响是不一样的。 当元素的margin-top或者margin-left为负数时，“当前元素”会被拉向指定方向。 当元素的margin-bottom或者margin…"}, {"id": "6844903502360084488", "title": "CSS切角效果实现", "desc": "切角效果是时下非常流行的一种设计风格，并广泛运用于平面设计中，它最常见的形态就是把元素的一个或多个切成45°的切口，尤其是在最近几年，扁平化设计盖过拟物化设计后，这种切脚设计更为流行，例如下图就是通过切角实现的一个导航栏，在后面将详细论述起实现。"}, {"id": "6844903568525230087", "title": "webpack深入——使用篇（二） | 席小白的边缘世界", "desc": "水平有限，欢迎批评指正 目录： webpack深入 ——使用篇（一） 在我们打包项目时，除了js文件之外，还有许多其他类型的文件，比如css，less，ts以及图片等资源都是需要打包进去的，webpack默认是不识别其他类型的文件或者说是模块的，是通过 各种不同的loader…"}, {"id": "6844903734292512775", "title": "CSS中各种布局的背后(*FC)", "desc": "块级元素(Block-level elements)：当元素的 CSS 属性 display:block / list-item / table 时，它就是是块级元素 block-level ，视觉上呈现为块，竖直排列。每个块级元素生成一个主要的块级盒 (Principal B…"}, {"id": "6844904126564794375", "title": "弹指间，重温几个设置满屏的小技巧", "desc": "常规开发种经常会碰到如上界面，我们希望它背景色全屏保持一致。 当然，从界面上来看，它这个效果图只是因为父容器未达到满屏导致底下留空白区域。 记不起来没关系，花2分钟时间简单过一下。 结果发现依然是 0，然后陷入了无限的疑问中... 因为 CSS 里部分属性是继承父级而来的，he…"}, {"id": "6938594596486119460", "title": "纯CSS打造粒子放射动画", "desc": "首先，先用一个元素的:before和:after画两个粒子。这样的好处是一个元素就能有两个粒子，节省dom。粒子都是绝对定位在中心。 接下来我们要给每个粒子生成随机的从各个方向进入圆心的动画。为了能让x与y轴的方向有的是正有的是负，我们用随机函数来生成1和-1： random(…"}, {"id": "6844903502804697095", "title": "翻译 | 关键CSS和Webpack: 减少阻塞渲染的CSS的自动化解决方案", "desc": "\"消除阻塞渲染的CSS和JavaScript\"。 这一条Google Page Speed Insights的建议总让我困惑。 当一个网页被访问时，Google希望它仅加载对初始视图有用的内容，并使用空闲时间来加载其他内容。这种方式可以使用户尽可能早地看到页面。 我们可以做很多…"}, {"id": "6856796010077749261", "title": "Re：从零开始の CSS 学习笔记——布局（上）", "desc": "原因可能是，虽然设定容器宽度为 300，但是容器添加了边框 border : 1像素，所以容器的内容区域的宽度实际只有 298 px。(仅限 border-box 情况) PC端通常可以写死。移动端不能写死，需要适配各种尺寸：平板/手机…"}, {"id": "6844903842111340552", "title": "集中コレクション，CSS垂直居中最强合集，看看你喜欢哪种？", "desc": "我们在编辑一个版面，通常都会用到水平居中和垂直居中来设计，而水平居中很好处理，不外乎就是设定margin:0 auto；或是text-align:center；，就可以轻松解决掉水平居中的问题，但一直以来最麻烦对齐问题，都是“垂直居中”这个讨人厌的设定，以下将介绍七种单纯利用C…"}, {"id": "6844903617565196302", "title": "预加载与缓存", "desc": "最近的项目中为了能够提升那么一丢丢性能，尝试了一下对 chunks 进行预加载处理。虽然做了异步加载的处理，但是项目大小决定了还是有多个异步的 chunk.js 需要进行预加载，这里我指的是 preload 与 prefetch。 这里推荐一个 GoogleChromeLabs…"}, {"id": "6844904080087728136", "title": "「前端厚说」CSS预处理器与企业级通用Mixin", "desc": "在实际项目开发中，我们已经渐渐的不去使用原始的css,反而使用较为方便的预处理器sass，less，也就是下文咱们即将要提到的。既然是前端开发者不得不掌握的一门技术：写样式，即使现在是工程化 模块化 开发，不过我们逃不开的还是最基础的样式。我们知道常见的css预处理器 有三种（…"}, {"id": "6893402135694671879", "title": "CSS 布局", "desc": "分类固定宽度布局：一般宽度为960/1000/1024px不固定宽度布局：主要靠文档流的原理来布局响应式布局：PC上固定宽度，手机上不固定宽度各种布局的使用场景float布局子元素上加float:le"}, {"id": "6844903608530501639", "title": "Vertical-Align，你应该知道的一切", "desc": "好，我们聊聊vertical-align。这个属性主要目的用于将相邻的文本与元素对齐。而实际上，verticle-algin可以在不同上下文中灵活地对齐元素，以及进行细粒度的控制，不必知道元素的大小。元素仍然在文档流中，因而其他元素可以根据它们大小的变化进行相应的调整。一个有用…"}, {"id": "6947563556598448158", "title": "实现元素水平+垂直居中的方法（持续更新）", "desc": "1. 父元素：flex flex这个东西简直就是一个神器... 这个时候子元素就会在父盒子内部水平+垂直居中了。 2. 子元素：绝对定位 + margin 给子元素设置绝对定位，让子元素相对父元素向右、向下移动父元素宽高的50%，然后再用margin-top和margin-le…"}, {"id": "6900554673330225166", "title": "用css画一个皮卡丘", "desc": "这部分是最难的部分，这块主要分成两部分，上嘴唇和嘴巴。 实现上嘴唇的思路是，首先使用两个div画出边框，然，后透明掉它们的上边框以及右边框，接着使用border-radius加上弧度，使它看起来有笑脸的感觉，接着使用transform旋转。 值得注意的是两边嘴唇弯曲弧度的部分与…"}, {"id": "6844903559742357517", "title": "CSS 动画实战：使用 CSS3 实现 Apple Watch 上的呼吸灯动画效果", "desc": "CSS 动画实战：使用 CSS3 实现 Apple Watch 上的呼吸灯动画效果"}, {"id": "6844903936004980743", "title": "📗CSS辞典：currentColor、:placeholder-shown、:focus-within、overscroll-behavior", "desc": "currentColor 是 CSS 很早就给我们提供的一个变量，它等于当前元素的 color 属性值。 .foo 中默认的文本颜色设置成了红色，在设置 box-shadow 的时候，指定为 currentColor ，就是说当前元素的阴影色也是红色的。 当然了，如果当前元素没…"}, {"id": "6844903888592568334", "title": "CSS动画小知识", "desc": "接着前文看《CSS权威指南》，本文整理一些CSS动画的知识点，同时给出一些例子。 在CSS动画中我们经常需要通过变形来达到一些奇妙的效果。使用 transform 首先要明确变形是基于笛卡尔坐标系，也就是通常所说的 x/y/z See the Pen FlipCard on C…"}, {"id": "6844903540826046478", "title": "一个有质感的CSS3按钮需要用到阴影、内阴影、线性渐变", "desc": "在.btn的css里写的阴影那一段代码里面写了两个阴影，用逗号隔开，第一个阴影是我们这个按钮边框下边的一点点阴影，用阴影的时候建议使用rgba来写，rgba的第四个参数是透明度，用透明度控制阴影在调整时是比较方便的，第二个阴影是内阴影，多了一个inset参数，这个阴影是在这个按…"}, {"id": "6935725712737304613", "title": "2021年, 是时候来尝试 Tailwind 框架编写 CSS 了", "desc": "在过去的几年里, CSS 编写方式一直在变, 最开始结合HTML文档编写CSS代码到CSS模块化, 以及后来的 CSS-in-js, styled components。 CSS 框架也是层出不穷, 从最初的 Bootstrap 到后来的 elementUI , antd。 它…"}, {"id": "6844903889343348743", "title": "“切图仔”如何体现重构优势", "desc": "在现在这个 JS 大行其道的前端环境下，偏逻辑的前端在人数上是以压倒性优势超过偏重构前端的。 但是不知道大家有没有想过，总共资源就那么多，当我们偏向逻辑和后端的同学争抢资源的时候，我们偏向体验和重构部分的资源，其实也正在被有工程化思维的设计同学分摊着。 如果只关注需求完成度，一…"}, {"id": "6844903510752903182", "title": "CSS 实用 Tips", "desc": "作为前端，日常开发充满了各种挑战与乐趣，我们穷尽一切在奇葩的需求中提升用户体验。本文将列举一些前端开发中碰到的小众需求，并提供解决方案以供参考。"}, {"id": "6992873304713330718", "title": "探索css选择器伪元素？｜8月更文挑战", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战” 选择器的组合 在CSS规则中，选择器部分是一个选择器列表。 选择器列表是用逗号分隔的复杂选择器序列；复杂选择器则是用空格、大于号、波浪线等"}, {"id": "6844903594001432589", "title": "[Video.js]隐藏和显示视频播放器控件", "desc": "上周我决定解决一些围绕控制栏的悬而未决的问题，然后进入相关播放器更新的流程。我现在很幸运地有了一些时间，并且我会写一些关于它的更新。 播放器控制栏的预期行为之一是，当用户在观看视频时处于非活动状态时，它会在几秒钟后淡出。以前，我们通过video.js实现这一点的方式是通过一些C…"}, {"id": "6844903599621799944", "title": "别人写的CSS，你敢用吗？", "desc": "大多数web开发者认为只要不使用别人的 JS，安全就会有保证。殊不知“黑客”已经开始在 CSS 上做手脚了。 在浏览器设置中用户可以禁用 JS，但是 CSS"}, {"id": "6988881323297341477", "title": "CSS 动画", "desc": "主要介绍了浏览器的 CSS 渲染步骤，以及使用 transition 和 animation 实现 CSS 动画的方法。"}, {"id": "6988878104609423374", "title": "高度可以设置百分比进行继承", "desc": "前言 最近所在的的新公司你用的jQuery做的项目，所以全是一些基本的css和js，很多都已经忘记了，所以做一下记录，在进行页面布局的时候，我们的高度是可以设置一个百分比进而继承父元素的 主要内容 在"}, {"id": "6844904131342106638", "title": "深入理解文档流（Document Flow）和视觉格式化模型（CSS Visual Formatting Model）", "desc": "最开始学习CSS的时候，我一度认为CSS基础很简单，但是CSS布局是一块难啃的骨头。又到后来，我去亚马逊买了畅销书HTML and CSS, design and build websites，书上内容浅显易懂，但是关于CSS布局，也就只有一章，而且似乎也没有提到复杂的文档流，…"}, {"id": "6988834073103826951", "title": "简述CSS盒模型", "desc": "盒模型的组成 css盒模型包括content、padding、border、margin 而盒模型可分为两种，即标准盒模型（实际设置的是 content box）和替代盒模型（实际设置的是 borde"}, {"id": "6975093060116070407", "title": "css揭秘 - 结构与布局（二）", "desc": "这是css揭秘系列文章的第十一篇，本篇主要介绍使用css可以实现的结构与布局。包括垂直居中以及紧贴底部的页脚。"}, {"id": "6844903567795421197", "title": "纯CSS画三角原理解析", "desc": "因为之前做一个页面出现了很多三角，开始直接用图片感觉并不是很好用，看着总是怪怪的颜色还很难调整的跟背景一样，就搜了一波代码直接用上了，事后想了一下感觉不知道具体原理是什么，很奇怪为什么边框能设置成三角的样式。于是搜了一波原理整理如下 因为很少用到很粗的边框，而且90%的情况下我…"}, {"id": "6981742231417798663", "title": "如何优雅地实现浏览器兼容与CSS规则回退", "desc": "层叠机制来支持较早的浏览器，Modernizr设置辅助类来分别编写样式，使用 @supports 规则回退，简短的 JavaScript 代码实现回退。"}, {"id": "6844903712792510471", "title": "在VS Code使用Sass最新配置流程", "desc": "原谅我标题党了一下，事实如此。搜到的博文都是一句话带过让我到这个官网下载安装包。（安装包链接已放到文末）尝试数个版本之后仍然是下载一半失效，可能我梯子质量不行吧。此外还很让人懵逼的一点是：在搜索引擎搜sass得到的sass.hk网站的指导是错误的...“gem sources …"}, {"id": "6937911432545566727", "title": "在 React 编程中, 我是如何用 tailwind 优化样式编写的?", "desc": "这就是我们这篇文章的主题。 1. 传统 HTML 代码 传统开发中, style 单独为一个标签 或 其他引入外部样式表, 在 Html 标签中通过 class 属性引入对应类。 重复利用相同的属性, 代码冗余大。 过于分散的类, 难以进行良好管理, 简单说起名字很头疼, 并且…"}, {"id": "6844903710980571149", "title": "如何清除浮动", "desc": "W3school中给出的浮动定义为浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框脱离文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。 浮动的特点，可以用八个字总结：脱标、贴边、字围和收缩。 当框 1 向左浮动时，它脱…"}, {"id": "6992750279577829412", "title": "CSS定位", "desc": "CSS定位（position） 取值如下： static 默认值，表示文档流。 relative 相对定位，升起来，但不脱离文档流。(通常搭配absolute使用) abosolute 绝对定位，定位"}, {"id": "6996610858331668487", "title": "CSS部分伪类", "desc": "css几个简单伪类：:first-child，:last-child，:nth-child()，:nth-of-type()以及a标签配套的伪类，简单几句，爱看不看"}, {"id": "6844903607553245192", "title": "vscode插件开发--快速插入图片相关css", "desc": "闲来无事，将之前写的一个vscode插件翻出来写个教程。此插件之前没有上传到vscode的插件库上，这才顺带整理一下发布流程。 很简单就是，快速的在编辑器里面插入css代码，不需要自己手工去ps量尺寸，或者看图片的尺寸啥的了。估计有大佬说着有啥用了，对于小小的只写scss的小菜…"}, {"id": "6992597748960722975", "title": " 利用webpack拆分css ", "desc": "利用webpack拆分css {ignore} 要拆分css，就必须把css当成像js那样的模块；要把css当成模块，就必须有一个构建工具（webpack），它具备合并代码的能力 而webpack本身"}, {"id": "6844903504947970056", "title": "程序猿小白应该注意什么", "desc": "如上代码出现问题。定位到这个错误很困难，因为你首先需要看页面源代码查找插入的这段HTML，但是找不到，因为它是动态生成，如果你对数据或者布局更改也会要求更改js，所以html呈现应该‘尽可能’的与js分离。 语义化的意思就是从名称中一眼就能看出内容是什么，HTML标签就是通过浅…"}, {"id": "6896386991529672718", "title": "个人理解的CSS文档流", "desc": "文档流，文档流，流就是它最大的特点：自适应。 那什么是文档流呢？ 顾名思义就是：像水流一样，倒入一个容器时，会自动充满容器。而css文档流的特性就是如此。 文档流有俩个比较重要的概念元素：inline元素、block元素，与之相对应的标签就是span、div。（还有一个是 in…"}, {"id": "6984769664760938532", "title": "边框的三要素", "desc": "border属性 border:1px solid red; 边框的三要素小属性 小属性 意义 border-width 线宽 border-style 线型 border-color 线颜色 四个方"}, {"id": "6844903815318077454", "title": "CSS背景渐变", "desc": "还是上面的例子，只指定颜色值，至少要指定两种颜色，默认将平均分配，每个色值各占比例相同。可以使用数值或者百分比调整渐变的长度，推荐使用百分比更加灵活。"}, {"id": "6976866369283293221", "title": "CSS 盒模型 box-sizing", "desc": "当对一个文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）"}, {"id": "6844904064677838861", "title": "使用css实现动画方法与动画性能分析", "desc": "transition 是 transition-property（状态发生变化的属性），transition-duration（过渡所用的时间），transition-timing-function（过渡变化的速度） 和 transition-delay（延迟多长时间开始过渡）…"}, {"id": "6844903863883939854", "title": "【译】CSS :placeholder-shown伪类实现输入框浮动文字效果", "desc": "在这篇文章中，我们将使用:placeholder-shown伪类创建一个浮动的问题标签效果，使用纯CSS实现。 当我们处理输入框时，会想方设法提供给用户更好的体验。有两个标签属性是我们经常会用到的： label标签是关联表单元素，提供说明信息最适合的元素。 输入框的placeh…"}, {"id": "6844903888819060744", "title": "移动端css兼容问题", "desc": "1.安卓使用绝对定位布局与原生input有冲突如果绝对定位的元素在最下面，键盘弹起时，绝对定位元素会在键盘上面解决办法：使用flex布局实现，有一个flex-shrink可使用或者监听resize事件"}, {"id": "6844903693611958285", "title": "flex布局下的flex-grow、flex-shrink、flex-basis属性详解", "desc": "来自51CTO博客作者youthfighter的原创作品：''Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。...''"}, {"id": "6844903613223944205", "title": "高效前端编程实践", "desc": "最近在阅读《高效前端：Web高效编程与优化实践》这本书，书中介绍了前端高效编程的优化实践和前端基础。本文将结合个人的理解介绍部分高效编程的例子。 表单中原生的radio/checkbox的样式各个浏览器都不太一致。要想统一样式，一种做法是自己div/span去画，然后去监听单击…"}, {"id": "6856636521618309127", "title": "Re：从零开始の CSS 学习笔记——基础篇", "desc": "熬夜总结 – CSS 基础篇 。🤞🏻 Nobody knows CSS than me !! 🤗 社区不是一个准确存在的概念，大家你帮我我帮你，互相学习，互相分享，就形成了社区。 是一种弱联系。 后来中国人发现 ASCII 不能表示中文，所以就发明了 GB2312，由中国…"}, {"id": "6844903541450997768", "title": "Webpack实战-加载SVG", "desc": "SVG 作为矢量图的一种标准格式，已经得到了各大浏览器的支持，它也成为了 Web 中矢量图的代名词。 SVG 相对于位图更清晰，在任意缩放的情况下后不会破坏图形的清晰度，SVG 能方便地解决高分辨率屏幕下图像显示不清楚的问题。 在图形线条比较简单的情况下，SVG 文件的大小要小…"}, {"id": "6844903641552257038", "title": "CSS pointer-events属性的使用", "desc": "在前端的开发中，我们都是直接与用户接触，应该尽量让用户感到操作畅快愉悦，获得类似native的感觉。其中动画是最常用的方法。 这里的需求是，弹层的设计，这个弹层希望可以像 native 上的弹层一样，点击按钮出现，点击遮罩或按钮时关闭，并且出现和关闭时有动画效果（fade，sl…"}, {"id": "6844903556709892109", "title": "CSS重构", "desc": "1. 重构和架构 重构是指在不改变代码行为的前提下，重写代码，使其更加简洁、易于复用。 架构是指软件项目的各个不同部件之间的组合方式。 2. CSS选择器的优先级 !important 优先级最高，可覆盖行内样式。不可以添加到行内样式属性中。 3. 如何编写优质的 CSS 但是…"}, {"id": "6879217533866639367", "title": "kiss——简单CSS动画展示", "desc": "一、展示二、构思使用技术：html+cssdiv盒模型position定位固定元素位置伪类制造元素（腮红部分）三、实现html部分三层结构（container+ball*2）css部分（positon"}, {"id": "6925373493924265992", "title": "和BEM的战斗：10个常见问题及如何避免", "desc": "无论你是刚刚发现BEM或者已经是个中熟手（作为web术语来说），你可能已经意识到它是一种有用的方法。如果你还不知道BEM是什么，我建议你在继续阅读这篇文章之前去BEM website了解一下它，因为我会假设你对这种CSS的方法有一个基础的理解。 本文旨在对那些已经是BEM的爱好…"}, {"id": "6976271917632192525", "title": "涨知识的css ::marker伪元素", "desc": "这是我参与更文挑战的第13天，活动详情查看更文挑战 前言 现在，在使用 <ul> 或<ol>时自定义数字或项目符号的颜色，大小或类型很简单。利用css的:marker伪元素，我们可以很轻易的更改内容以"}, {"id": "6844903501751926797", "title": "Webpack中的静态资源文件指纹", "desc": "本文讲解了在webpack中如何给静态资源加hash值：每次构建过程都会生成一个新的hash，所以一般用于做版本控制；chunkhash是基于内容生成的，但是webpack把所有类型的文件都以js为汇聚点打成一个bundle，改了css也会导致整个js的hash发生改变..."}, {"id": "6976256428935741448", "title": "CSS 继承、级联和特异性", "desc": "如果你想更好的掌握 CSS，CSS 的特异性是一个重要的话题。应用于 CSS 选择器的一组规则决定了应用于元素的样式。为了更好地理解这一点，我们必须了解一个相关的主题 —— CSS 中的级联和继承。 "}, {"id": "6982542585600573470", "title": "css自定义属性", "desc": "概念 css自定义属性又叫css变量，或级联变量（cascading variables). 特征：带有前缀--的属性名 解决的问题 相同的css属性值被重复用于多个地方，导致一旦该值需要修改，就需要"}, {"id": "6844903970159198221", "title": "盒模型及常见问题解决", "desc": "每个html元素都可看作一个盒子，由外边距margin、边框border、内边距padding、内容content组成，对这些属性的设置，可以实现元素的不同展示及布局(eg.设置margin实现水平居中)。 由于IE盒模型更贴合人们对于物理盒子宽高的理解，所以通常采用IE盒模型…"}, {"id": "6844903859324715021", "title": "[译] 使用 CSS transitions（MDN）", "desc": "CSS transitions 提供了一种在改变CSS属性时控制动画速度的方法。你可以让某个属性在一段时间里逐渐改变，而不是猛地突变。例如，如果你想把颜色从白色变为黑色，通常这个变化是突然地。而利用CSS transitions，这个变化可以发生在一段时间里，并且遵循一个加速曲…"}, {"id": "6844903781851725837", "title": "使用 Grid 进行常见布局", "desc": "grid 布局是W3C提出的一个二维布局系统，通过 display: grid 来设置使用，对于以前一些复杂的布局能够得到更简单的解决。本篇文章通过几个布局来对对 grid 布局进行一个简单的了解。目前，grid 仅仅只有 Edge使用前缀能够支持，为了更好地体验，可以使用 C…"}, {"id": "6844903909018828808", "title": "让网页的黑暗模式UI和系统保持一致", "desc": "关于黑暗模式的设计可以参考Material Design。如果你碰巧用的是React的Material-UI，那么可以方便的使用其内置的黑暗模式： 目前很多网站都已经内置了一键切换黑暗模式的功能，但美中不足的是，网页的UI并未与操作系统的UI保持一致。当你夜晚开着黑暗模式在被窝…"}, {"id": "6945832130249228319", "title": "003CSS-a标签样式与五种清除浮动方法", "desc": "1. height 2. clear 3. 外墙法 4. 内墙法 6. 添加伪类"}, {"id": "6945770903921754126", "title": "CSS动画", "desc": "使用transform属性里的translateX来完成移动，然后加上transition的过渡效果。 背景色和颜色可以添加过渡，透明度也可以添加过渡，但该元素仍会占空间，不推荐。 根据浏览器的渲染原理，若是开发者更新了样式（即元素的几何属性，类似于宽高，位置等），则浏览器会检…"}, {"id": "6844903597126205453", "title": "CSS如何实现内凹角效果 By 大漠", "desc": "特别声明：此篇文章内容来源于@ANA TUDOR的《Scooped Corners in 2018》一文。 记得@Lea Verou的《CSS Secrets》一书和前几天@Chris Coyier刚发的帖子都介绍了CSS怎么实现元素斜切口的效果。我也尝试着借助Vue的能力，把…"}, {"id": "6914079869479419918", "title": "遮罩覆盖的DOM，如何触发点击 等一系列事件", "desc": "今天，调试 iview 这个UI组件库 modal 组件样式的时候，在可 拖拽 的样式上看到一个样式 pointer-event 。虽然自诩（吹牛）在样式上有较多的理解，但是我却不知道这个样式的具体作用（打脸了）。 审查元素后，发现这是我多年来心心念念的一个效果 ヾ(◍°∇°◍…"}, {"id": "6920087965733650446", "title": "条纹背景", "desc": "条纹背景条纹背景背景知识难题解决方案等价于垂直条纹linear-gradient()斜向条纹更好的斜向条纹`>灵活的同色系条纹总结"}, {"id": "6911600664732762120", "title": "控制台的使用", "desc": "通过使用控制台提供的Console API方法来诊断日志信息,比如说:console.log(),console.profile(). 即时响应的命令窗口可以和document以及chrome开发工具相互联调.在控制台可以直接测试表达式,并且可以使用Command Line A…"}, {"id": "6975354226985664542", "title": "How does flex-wrap work with align-self, align-items and align-content?（结合自身理翻译）", "desc": "弄清flex-wrap和align-self、align-items、align-content之间的关系，flex-shrink是如何计算的，flex-basis与width/height等关系"}, {"id": "6844903542088531975", "title": "【前端Talkking】CSS系列——一步一步带你认识transition过渡效果", "desc": "transition从网页效果上来看是一种平滑过渡的动画，本质上是在一定的时间内将属性的状态从初始值过渡到结束值。如果不添加transition过渡，在网页中点击鼠标、获得焦点等操作将导致css的值在瞬间完成，看起来比较生硬，而添加了过渡效果，可以实现平滑的过渡，增加用户体验。…"}, {"id": "6907497955750576142", "title": "css揭秘 - 文本行的斑马条纹 ", "desc": "斑马条纹的常见场景当css3给我们提供了:nth-child和:nth-of-type的时候，我们常用这个新属性去实现$\\color{red}{表格的}$$\\color{red}{”斑马条纹“}$,之"}, {"id": "6901244914785320974", "title": "background奇淫巧技——邮票镂空半圆效果", "desc": "邮票样式实现！先上代码核心原理：利用radial-gradient渐变实现透明圆形background-size控制背景为长条background-position定位背景裁剪半圆默认repeat重复"}, {"id": "6844903943298875406", "title": "移动端适配之二：visual viewport、layout viewport和ideal viewport介绍", "desc": "上一篇博文，可算把像素这个东西讲清楚了。在这篇博文里面，将继续介绍viewport相关的内容。 很多博客都会提到PPK所讲的三个viewport，有的讲的比较复杂，看的云里雾里，我这里也大概介绍一下，三个viewport主要是相对于移动端而言的。 正如上篇博客所说的，前端里面能…"}, {"id": "6844903725207650311", "title": "CSS题目系列（2） - 实现一个固定比例盒子", "desc": "在开发过程中，会有这么一个情况，需要将一个盒子的尺寸定义为固定比例，且尺寸需根据视图的尺寸来进行缩放，也就是响应式，常见的多如有矩形、圆形等。 其实实现这个效果，有多种方法，下面逐一介绍。 也就是说，给padding的值设定为百分比时，将根据父容器的宽度来计算。 没错，就这么简…"}, {"id": "6975121634382331918", "title": "使用容器和范围CSS查询的组件驱动的响应式设计", "desc": "使用新的容器和范围查询，CSS终于追上了组件驱动的革命。 在过去的几年里，组件驱动设计在Web开发者中已经变得非常流行。这不仅是因为对这种开发策略的需求越来越大，而且还得益于解决了过去CDD方式的挑战"}, {"id": "6847902215567310862", "title": "那些不常见，但却非常实用的 css 属性", "desc": "可以把 块容器 中的内容限制为指定的行数。并且在超过行数后，在最后一行显示\"...\" 将除却 unicode-bidi 与 direction 之外的所有属性重设至其初始值，或继承值。 用来定义插入光标（caret）的颜色，这里说的插入光标，就是那个在网页的可编辑器区域内，用来…"}, {"id": "6844903874143191048", "title": "CSS进阶（12）—— position:absolute如此高深，我当真不懂（上）", "desc": "（1）根元素（通常情况下就是html）被称为初始包含块，其尺寸等同于浏览器可是窗口的大小。 （2）对于position:relative/static（默认）的元素，其包含块由其最近的块容器祖先盒的content-box边界形成。 （3）对于position:fixed的元素，…"}, {"id": "6844903536157786126", "title": "2017前端技术发展回顾", "desc": "前端领域在 2017 年再次以狂热的节奏向前发展。以下列出过去的一年中最值得关注的一系列事情…"}, {"id": "6901615561860939789", "title": " Css3/Flex 水平居中&&垂直居中、等宽度自适应布局方案", "desc": "display:inline/inline-block。不独占一行，同行显示，直到右边边距为止换行。 常见元素：span/img/input/button/label等。 实现要点：text-align: center;设置水平居中；设置line-height等于所在容器高度。…"}, {"id": "6844903552859684877", "title": "Vue中容易被忽略的知识点", "desc": "在反复阅读文档的时候，发现有些容易忽略的地方，遂记录之。"}, {"id": "6957512896439910408", "title": "「HTML+CSS」--自定义加载动画【015】", "desc": "前言 效果展示 思路 Demo代码 HTML CSS 原理详解 步骤1 利用span标签，生成一个正方形 宽度、高度均为96px 边框：10px solid ; 效果图如下 步骤2 上/右边框颜色设置"}, {"id": "6921964685248069646", "title": "Grid 使用指南", "desc": "网格布局（Grid）是最强大的 CSS 布局方案。 它是一个二维布局，这意味着它可以处理 列 和 行 ，不像 flexbox 主要是布局系统。 学习 Grid 布局之前，需要了解一些基本概念。 在 容器 上使用 display: grid 即可定义。它是所有 网格元素(grid…"}, {"id": "6844903730811305998", "title": "你也许不知道，CSS 也有编程能力？", "desc": "如今编程界有一种令人担忧的趋势——那些 “真正的” 程序员对 CSS 嗤之以鼻。 他们指出，这只是一种声明性语言，而不是一种功能齐全的编程语言。 啧啧啧，它甚至不是一种脚本语言。 这可能是实话，但这并不意味着 CSS 不强大。 它的强大体现在与传统语言不同的地方。 以 CSS …"}, {"id": "6844903621327323143", "title": "从一个垂直居中的方法深度了解基线与 vertical-align", "desc": "今天在一篇文章中无意看到一个利用伪元素实现垂直居中的方法，费了好大劲理解了它的原理，于是就有了这篇文章。 在深入了解之前，先来了解一些基本概念。 一行 inline 元素中，取行高最高元素的作为基准元素。 我们都知道，默认情况下，行内元素的垂直对齐方式为基线对齐。这里的基线（b…"}, {"id": "6844903544705810439", "title": "理解flexible.js所需的viewport知识", "desc": "这在这篇文章介绍了viewport的三种视口visual layout ideal、以及通过此三视口分析了淘宝的flexible.js方案的实现原理。"}, {"id": "6859685615269576718", "title": "Re：从零开始の CSS 学习笔记——定位", "desc": "如何验证自己的猜想？用代码证明即可。 特别适合做导航：正常状态会存在于文档流中，当向下滚动到 sticky 元素且 sticky 元素即将移出视口时，sticky 元素会始终保持在视口顶部，不会随文档流继续滚动。 兼容性特别差，可以在 caniuse 中查询。 （黄色是需要加前…"}, {"id": "6844903609268715533", "title": "页面优化的一些建议", "desc": "文章本来是给公司内部分享用的，现在发表出来，欢迎大家提出宝贵建议。 让官网首页加载速度更快，对用户的操作响应得更及时，给用户提供更为友好的体验。 减少页面请求数，减小请求所占带宽，节省资源。 页面级别的优化目标基本就是如何减少HTTP请求数，减少请求资源的体积。每个请求都是有成…"}, {"id": "6844904152972132360", "title": "小白笔记：前端小白浅谈translate和rotate", "desc": "一. 平面效果 将当前类名为transform的元素沿x轴方向平移120px，沿y轴方向移动自身高度的50%。 2. rotate() 默认以元素宽高的一半为原点旋转，括号内参数为顺时针旋转度数，可为负数，负数为逆时针旋转。 二. 3d效果 相当于当前眼睛距离该元素的距离，实现…"}, {"id": "6895652694195699725", "title": "css浮动篇", "desc": "1. 浮动简介 浮动定义：浮动可以理解为让某个div元素脱离标准流，漂浮在标准流之上，和标准流不是一个层次。 2. 浮动结论 假如某个div元素A是浮动的，如果A元素上一个元素也是浮动的，那么A元素会跟随在上一个元素的后边(如果一行放不下这两个元素，那么A元素会被挤到下一行)；…"}, {"id": "6844903809718681613", "title": "摩拜前端周刊第2期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜如何正确使用async/await地址：https://infoq.cn/"}, {"id": "6917238361753124872", "title": "移动端布局和适配", "desc": "将移动设备和电脑连入同一个局域网在移动设备的浏览器中，输入电脑本机的 ip 地址，访问我们的页面文件。 测试链接是否成功：把页面放入服务器环境 （xampp 安装目录下 htdocs）查看本机 ip 地址：cmd 输入：ipconfig。如果页面成功打开就说明成功了 根据当前设…"}, {"id": "6844903811576774669", "title": "当遇到css布局，你在考虑什么？", "desc": "​ CSS布局在前端开发中像呼吸一样——再平常不过的事。比如同事A在尝到了Flexbox布局的甜头之后，任何布局都会以display:flex打头阵，同事B因为项目得支持IE10，像避开毒蛇一样的避开Flexbox布局方法。你会发现我可能有点嗤笑这样的行为，我曾经也是这样的一员…"}, {"id": "6844904200359378951", "title": "手写一个简单的响应式栅格", "desc": "前段时间一冲动搞了个腾讯云主机，最简单的配置那种。买完之后一阵折腾，想着不如整个博客，于是各种博客搭建方案，看着好多漂亮的博客，毅然决定搭建一个自己的博客，正好自己是一个前端新手，写一个这样的博客，正好能锻炼自己，说干就干，开始逐个解决技术难点。这次我解决的自制响应式栅格。 在…"}, {"id": "6881540863085543432", "title": "Flex 布局教程：语法篇", "desc": "网页布局（layout）是 CSS 的一个重点应用。 布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。 2009年，W3C 提出了一种新的方案----Flex …"}, {"id": "6844903614352195597", "title": "[干货]如何使用webpack构建多页应用", "desc": "有兴趣的同学可以看下,内附详细注释,适合刚学习 webpack 的童鞋. 1.多个入口(entry),每个页面对应一个入口,理解为 js 资源. 2.多个 html 实例,webpack 使用html-webpack-plugin插件来生成 html 页面. 3.每个页面需要对…"}, {"id": "6984444674563899422", "title": "HTML与CSS", "desc": "HTML和 CSS的一些总结。 主要为CSS内容，包括了盒模型，BFC，flex布局，定位问题，如何居中，响应式等"}, {"id": "6844903648418365447", "title": "前端性能清单，让你的网站跑的更快", "desc": "性能是一个很大的主题，但它并不总是一个“后端”或“管理（admin）”所要考虑的主题：它也是一个前端需要考虑的。作为前端开发人员，前端性能清单是你在项目中应该检查或者至少需要注意的性能要点的详尽列表。 对于每个规则，将有一个段落解释为什么此规则很重要以及如何解决它。有关更深入的…"}, {"id": "6844903912336523272", "title": "偏方解决安卓 css transition 引起的抖动", "desc": "把 transition 换成 animation 后发现，还是有抖动的效果。换了几次参数效果类似。最后考虑是渲染的问题，加上 translate3d 加速渲染后，问题解决了。 偏方就是 translate3d(0,0,0) ，加上就解决问题了。 CSS3 中诸如 transl…"}, {"id": "6844903957626617864", "title": "css入门笔记(下)", "desc": "注意: 滤镜通常使用百分比 (如：75%), 当然也可以使用小数来表示 (如：0.75)。"}, {"id": "6844903495984742407", "title": "CSS |《CSS揭秘》读书笔记（一）", "desc": "就在最近这几年，CSS领域已经发生了极大的好转。（绝大多数）浏览器已经在兼容性上逐渐趋同，它们不兼容的地方几乎都是因为某一家支持了某个特性，而另一家还没支持——这比两家都支持但效果不一样要强多了。我们现在不需要再刻意记录某个浏览器的bug了。 一、标准的制定过程 与大众的理解大…"}, {"id": "6958421295058927647", "title": "CSS元素类型", "desc": "根据元素的显示（能不能在同一行显示）类型，HTML元素可以主要分为2大类：块级元素和行内元素 一.块级元素和行内级元素 1.1.块级元素 块级元素（block-level elements）： 独占父"}, {"id": "6844903874269020173", "title": "CSS进阶（14）—— position:absolute如此高深，我当真不懂（下）", "desc": "理论上relative/absolute/fixed都能对absolute的\"包裹性\"以及\"定位\"产生限制，但只有relative能使得元素保持在正常的文档流中，因此我们往往使用absoluted搭配relative使用。之前讲到，left/right/top/bottom是定…"}, {"id": "6844903552406519816", "title": "让人耳目一新的 CSS 埋点统计", "desc": "CSS埋点统计说明当然这种方式使用比较简单的事件埋点。复杂的话还是需要JS操作。JS埋点统计用户可以通过浏览器禁用，CSS的话没办法禁用"}, {"id": "6844903918879637512", "title": "2d矩阵", "desc": "canvas2DContext.transform、css transform matrix()都用到了2D矩阵，该文章详细直观的介绍了2D矩阵在坐标变换中的作用，推荐给大家。"}, {"id": "6844903902576377869", "title": "[译]这个弹性盒子有多大？", "desc": "这是 Flexbox 系列的第三篇文章，在前两篇中，我介绍了 当我们在使用 display: flex 的时候，到底发生了什么？，探讨了 Flexbox 中的对齐。本文我们将学习去控制 Flex 项目的尺寸，以及浏览器默认是如何分配项目尺寸的。 假设现在我们有一些内容不等的元素…"}, {"id": "6844903509955969032", "title": "增强网站无障碍功能的十条准则", "desc": "我们列出了十条关于网站无障碍功能的准则，它们能保证你的网站对任何人（包括残疾人）都是可用的。"}, {"id": "6899412108702973965", "title": "Flex布局", "desc": "Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 Flex 布局。 行内元素也可以使用 Flex 布局。 Webkit 内核的浏览器，必须加上-webkit前缀。 注意，设为 Flex 布局以后，子元素…"}, {"id": "6844903694626996237", "title": "[译] 你需要知道的所有 Flexbox 排列方式", "desc": "简论： 在这篇文章中，我们将会在探讨一些基本规则的同时谈一谈 Flexbox 的排列属性以帮助我们知道横轴和竖轴上（元素的）对齐是如何实现的。 在这个系列的第一篇文章中，我解释了当你把一个元素设置为 display: flex 时发生了什么。这次我们将会讨论下排列属性，同时也会…"}, {"id": "6844903559759298568", "title": "CSS3动画卡顿性能优化解决方案", "desc": "最近在开发小程序，与vue类似，它们都有生命周期这回事。 onLoad 监听页面加载 onReady 监听页面初次渲染完成 onShow 监听页面显示 到底是什么意思？ 所以这又触碰到了我的知识盲区，不过项目在磕磕绊绊中完成的差不多了，但是遇到了CSS3动画渲染的性能问题，所以…"}, {"id": "6844903576372772877", "title": "「文经课表」当日课表界面实现方法", "desc": "先简单介绍一下「文经课表」：基于微信小程序MINA框架的WXML、WXSS、JS为代码语言进行开发，视图层采用Flex弹性布局，逻辑层采用模块化模式开发。发布一周累计用户人数1000+，烟台大学文经学院、烟台大学文经学院学生会等官方微信公众号主动关联小程序，更多介绍：https…"}, {"id": "6914946229856108558", "title": "CSS之实现各种功能", "desc": "虽然flex可以实现，但有时候如果不想用到flex，可以尝试img自带的vertical-align属性。 但是单行也会居左，而不是居中，所以要同样再嵌套一层。 通常都是根据内容多少自动计算宽度的。 BFC是特性（功能），不是定义。 作者推荐了normalize.css替代传统…"}, {"id": "6844903958574530574", "title": "【前端面试必考题】页面渲染机制（一）", "desc": "页面渲染机制这部分内容会分成两篇来进行讲解，这两篇里我们准备聊一下页面的渲染的过程，包括页面的加载、DOM 树的构建、CSSOM 树的构建、渲染树的构建和最后的渲染过程等。浏览器的渲染机制和网页的优化息息相关，只有知道了页面是怎么渲染出来的，才能在写代码的时候使用最合理的方式，…"}, {"id": "6948693488057712671", "title": "实战小技巧--看学生和老师实时对话 学CSS分割图片的方法", "desc": "著作权归作者所有。"}, {"id": "6844903600003481608", "title": "IM应用中如何计算富文本的高度", "desc": "在开发IM的项目过程中，经常会有出现一些需要计算DOM高度，然后超出若干行隐藏等需求。很多时候，需要计算高度的DOM元素都是动态生成的，我们无法在数据渲染前获取到它的高度。 如果没有任何交互，我们可以通过CSS来实现这个需求。但是，如果我们需要使用JavaScript来实现一些…"}, {"id": "6948359055555919886", "title": "「HTML+CSS」--自定义加载动画【007】", "desc": "动画的核心部分就是span和span::after，section仅作为提示框。 文章仅作为学习笔记，记录从0到1的一个过程。希望对您有所帮助，如有错误欢迎小伙伴指正～"}, {"id": "6844903504847306766", "title": "Front-End-Checklist(前端清单)", "desc": "现代化网站需要考虑的前端细节问题汇总。。。。总结的挺全面的"}, {"id": "6844903809014038542", "title": "读《CSS揭秘》总结一超实用的项目开发技巧", "desc": "1.考虑css值是依赖关系的时候，要用比例代码表达。 1.考虑css值是依赖关系的时候，要用比例代码表达。 这是你设计的按钮样式。 库中，class加上button就是一个按钮样式，class再加上ok就是一个确认按钮了。 currentColor顾名思义是当前颜色，更准确的说…"}, {"id": "6911190455237476360", "title": "详解CSS盒模型", "desc": "盒子模型，英文即box model。无论是div、span、还是a都是盒子。 但是，图片、表单元素一律看作是文本，它们并不是盒子。这个很好理解，比如说，一张图片里并不能放东西，它自己就是自己的内容。 一个盒子中主要的属性就5个：width、height、padding、bord…"}, {"id": "6844903861036154893", "title": "通过动图学习 CSS Flex", "desc": "注意 overflow: hidden 行为类型是默认值，因为 flex-wrap 还未设置。 为了获得更好的想法，你可以在这个页面上去尝试一下 Flex Layout Editor。 按默认 flex不会包装你的内容。它的工作原理很像 overflow: hidden。 可能…"}, {"id": "6844904058461880333", "title": "（13）把“可以动的盒子”更优雅地展示：② “居中”盒子 | CSS", "desc": "前言： 让“盒子”居中，在实际工作中可以说是随时都会用到。 方法很多，我们在都理解的基础上用起来才能有的放矢、得心应手。 打开一个页面出现一个弹出框，那这个弹出框在页面垂直居中。这个弹出框可能下边还有东西，那这个弹出框很明显就是绝对定位了。因为，如果他不是绝对定位，他怎么去覆盖…"}, {"id": "6844903496492253191", "title": "flexbox的space-between并不是我们想要的样子", "desc": "但是FlexBox布局虽然枪弹但并不能完全呈现以上布局，于是我们需要结合FlexBox作下小的改动即可实现。 其实很简单，我们只要在后面加入一些等宽但是占高为0等隐藏元素即可轻松实现。"}, {"id": "6844903986349211661", "title": "这些特效即将告别JavaScript，迎来CSS时代！", "desc": "随着CSS和JavaScript的发展，这两种语言之间的界限逐渐变得模糊。 从自定义属性（即变量）到滤镜、动画或数学操作，CSS采用了很多我们以前在JavaScript（或流行的CSS预处理器）中使用的东西，并为我们提供了原生支持。 两种语言都有不同的用途。现代浏览器的每次发布…"}, {"id": "6844903565463388168", "title": "[译] CSS Grid 之列宽自适应：`auto-fill` vs `auto-fit`", "desc": "除了显式的指定列大小之外，CSS Grid 还有个非常强大的功能 —— 模式填充（repeat-to-fill）列然后对内容进行自动布局。也就是说，开发者只需要指定列数，自适应方面的事情（视口尺寸小则显示列数少，反之则多）交给浏览器来处理就行了，也不需要用媒体查询。 上述功能完…"}, {"id": "6844903741196353550", "title": "三分钟搞懂CSS 权重", "desc": "下来用几个例子说明下CSS的权重。 分析得出最后一个最大 权重为 320 覆盖上面所有的。 嵌套越多，权重就越大，除过!important，有important 还是人家最大 。 因为伪类的权重相当于类元素，故因为类元素的权重小于id元素的权重，所以下面这个设置：hover无效…"}, {"id": "6923140109768491021", "title": "大型项目中的结构化CSS", "desc": "写CSS很容易。 写持续可维护的CSS则很难。 你也许听说过不下100 次了。因为在CSS中默认都是全局的申明。如果你是个C的程序员你知道全局变量是糟糕的。同时不管你是什么程序员，你该了解独立及可组合的模块是一个可维护系统的关键所在。 SMACSS, OOCSS, BEM, I…"}, {"id": "6949929636482514952", "title": "前端学习Day2", "desc": "记录关于md文件的写法，观察任意网站看哪种标签使用得较多，以及阅读index.css文件，给不懂的属性进行注释。"}, {"id": "6844903577857556493", "title": "webpack总结", "desc": "插件，用于在文件头部输出一些注释信息。"}, {"id": "6876367482412597262", "title": "3分钟入门 StyleLint", "desc": "省略图像、媒体文件、样式表和脚本等URL协议头部声明 ( http: , https: )。如果不是这两个声明的URL则不省略。 StyleLint 是一个强大的、现代化的 CSS 检测工具, 是通过定义一系列的编码风格规则帮助我们避免在样式表中出现错误。 .stylelint…"}, {"id": "6981356111534227463", "title": "css加载会造成阻塞吗？", "desc": "1.css加载会阻塞DOM树的解析渲染吗？ 用代码说话： 假设： css加载会阻塞DOM树解析和渲染 假设结果: 在bootstrap.css还没加载完之前，下面的内容不会被解析渲染，那么我们一开始看"}, {"id": "6894852839143637006", "title": "【CSS学习总结（一） CSS理解 & 选择器】", "desc": "层叠样式表（英语：Cascading Style Sheets，缩写：CSS；又称串样式列表、级联样式表、串接样式表、阶层式样式表）是一种用来为结构化文档（如HTML文档或XML应用）添加样式（字体、间距和颜色等）的计算机语言，由W3C定义和维护。 CSS不仅可以静态地修饰网页…"}, {"id": "6844903844715954189", "title": "【Hello CSS】序章-起源", "desc": "在1982年的时候，万维网的发明者Tim Berners-Lee爵士为了让全世界的物理学家能够方便的进行合作与信息共享，造了HTML(HyperText Markup Language) 超文本置标语言。 在1991年3月，Tim Berners-Lee把HTML介绍给了给他在…"}, {"id": "6844904167576731662", "title": "CSS中你可能不知道的position属性的sticky与@supports", "desc": "1. 认识 position: sticky position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky，这里sticky是CSS3新发布的一个属性。我今天重点要说的就是sticky属性 2. …"}, {"id": "6844903520081018894", "title": "前端不止：Retina屏幕下两倍图", "desc": "一般情况下，不需要针对网站上的所有图片都提供两个版本（非Retina屏幕和Retina屏幕），大部分图片缩放并不会太多的影响用户的体验。常常需要被处理的图片有：网站的logo、彩色图片图标，因为他们的图像大小都偏小，在Retina上物理像素放两倍显示就会出现模糊情况，这个时候"}, {"id": "6906742243672424462", "title": "CSS选择器和规则", "desc": "1. 基本选择器 2. 组合选择器 3. 伪类 4. 伪元素 搜索引擎不会取得伪元素的信息（因为它在标记中并不存在）。因此,不要通过伪元素添加你想让搜索引擎索引的重要内容。 5. 继承 也有很多 CSS 属性不能继承，因为继承这些属性没有意义， 这些不能继承的属性主要涉及元素盒…"}, {"id": "6908646892662423565", "title": "一次有趣的flex尝试", "desc": "又开启了新的一周，按照惯例，这一周我要...... 可惜现实确是伴随着熟悉的闹铃声，程序化的起床，穿衣，赶地铁。慢慢悠悠，看似卡着9点赶到公司，其实是这一年多次踩坑总结出的稳如老狗的时间表。 放下背包，坐上工位。只一眼就看见坐对面的产品对我露出了久违的笑容，不经感觉座椅下传来一…"}, {"id": "6844903510870343694", "title": "如何使用Rollup来打包样式表并实现自动重载页面预览", "desc": "不想使用Grunt和Gulp？这篇教给你如何使用js打包工具Rollup，我先手把手告诉你怎么使用PostCSS来处理样式表吧！"}, {"id": "6844903781566513160", "title": "CSS 属性篇(七)：Display属性", "desc": "display 属性规定元素应该生成的框的类型。 其中我们在前端开发中比较常用的属性值一般是none、block、inline、inline-block。我将按顺序为这些属性值一一讲解。 将元素与其子元素从普通文档流中移除。这时文档的渲染就像元素从来没有存在过一样，也就是说它所…"}, {"id": "6919363499931992078", "title": "SVG 与环形进度条", "desc": "SVGpath实现环形进度条利用SVGpath实现环形进度条注意点stroke-dasharray=\"31\"表示一个长度为3，间隔为1的虚线，并且该虚线在svg宽度内是无限循环的stroke-dash"}, {"id": "6844903874957066247", "title": "用CSS Grid Shepherd 技术对数据进行排序", "desc": "牧羊人很擅长照顾他们的羊群，为牧群带来秩序和结构。即使有几百只毛茸茸的动物，牧羊人仍然会在一天结束时将它们悉数带回农场。 而对于程序员来说，当我们在处理数据时，通常不知道这些数据是否已经被正确的过滤或者排序。尤其是当你想要在页面上按照稍微复杂一点的规则显示数据时，这就比较痛苦了…"}, {"id": "6844903615656640520", "title": "有了white-space:nowrap；妈妈再也不担心我不会横向滚动布局了", "desc": "对于多个元素同在同一行的布局，比较常见的是轮播，还有就是二级分类菜单。本文讲解了如何采用white-space:nowrap来实现，适用任意个数的item，并且不用计算父容器宽度"}, {"id": "6844903827242483719", "title": "前端css布局之BFC", "desc": "BFC 可以理解为建立一个布局容器，容器里按自己的方式来布局，且与容器外界的元素互不影响。 1.BFC里的布局跟常规流里的一样，例如盒子会在垂直方向排列。 2.属于同一个BFC里的盒子会产生margin重叠。 3.容器内元素的margin的左边，会与容器的border左边相接触…"}, {"id": "6911206267599978510", "title": "CSS简介和基本概念", "desc": "一. CSS 简介 1. CSS(Cascading Style Sheets)层叠样式表 所以这些特性使CSS极度灵活，也造成了CSS不正交的特点。 2. CSS版本 3. CSS语法(超级简单) CSS任何地方写错了，浏览器都不会报错，会直接忽略，因此通过调试才能知道代码正…"}, {"id": "6970937635095199775", "title": "CSS基础：盒子模型", "desc": "什么是盒模型：当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。"}, {"id": "6944680150856368135", "title": "CSS学习:基础+进阶 （一）", "desc": "标签 input、textarea，默认在鼠标点击的时候是有边框亮色的效果的。如果统一去除呢？分组选择器。 eg 在开发中，经常会去封装一些样式，那如何去定义？使用基类+子类+并集选择器。eg: 答案：从右到左去进行匹配的(dom即从下到上匹配)。原因：如果从从左到右，那就先找…"}, {"id": "6844904070558253069", "title": "CSS布局中必须了解的属性", "desc": "传统布局方式：基于盒模型，依赖 display、position、float 属性。 现代布局方式：Flex 布局和 Grid 布局。 本文主要讲解传统的布局方式，直接分析常用的属性。 希望你已经掌握 CSS 基础知识，也了解文档流、盒模型这些核心概念。 1. box-sizi…"}, {"id": "6844903536933732359", "title": "由 Bootstrap 的媒体对象(Media object) 谈 flexbox", "desc": "CSS3 弹性盒子(flexbox)，是一种新的布局方式。使用 flexbox，可以很方便的实现常见的布局以及居中效果。Bootstrap v4 的 Media object 也是使用 flexbox 来实现。flexbox 相关的属性较多，本文便结合几种的情形来探讨 flex…"}, {"id": "6844903552368934920", "title": "【前端Talkking】CSS3系列——CSS3之径向渐变初探", "desc": "线性渐变是沿着一条直线渐变，而径向渐变则是沿着椭圆或者圆进行渐变。其标准语法如下： position，指明径向渐变的椭圆或者圆心的位置，支持的值有：left、right、top、bottom，也可以指定px或者百分比，默认是图形的正中心。相应的对应关系如下： shape，指明径…"}, {"id": "6915228217485983758", "title": "CSS定位", "desc": "正确答案：B。验证方法，把border调整成半透明。 2. 从左边看一个div是什么样子？ z-index：auto默认值，不会创建新的层叠上下文。 将class=\"two\"的div定位到距离它本来位置的顶部和左侧分别50px的位置。不会改变其他元素的布局，会在此元素本来位置留…"}, {"id": "6844903625588736008", "title": "web实战：装饰表格", "desc": "table标签在我们学习HTML的时候可能会经常用到，但开始做项目了后，原生table的使用反而减少了，因为大多UI框架都会对table进行包装美化，方便了我们的使用，但也使我们逐渐忘记了如何进行原生的修饰，今天通过一个小demo回顾温习下吧。 假设一个简单的需求：创建一个展示…"}, {"id": "6844904041156182024", "title": "CSS3(六)——旋转立方体问题", "desc": "3D坐标概念当元素进行旋转时，他的坐标轴也跟着他进行旋转注意-y方向问题旋转立方体的效果分析一个容器包含6个divposition：absolute之后6个面完全重合通过trandform：rotat"}, {"id": "6844903552268107783", "title": "「移动设备陀螺仪」与「preserve-3d」碰撞的火花", "desc": "基于「移动设备陀螺仪」与「preserve-3d」制作 3D 效果图文教程。 介绍 HTML + CSS3 搭建 3D 立方体。 使用 deviceorientation 构建动画。"}, {"id": "6970146211265249287", "title": "移动web开发之flex布局", "desc": "1. 传统布局和flex布局对比 1.1. 传统布局 兼容性好 布局繁琐 局限性，不能再移动端很好的布局 1.2. flex布局 操作方便，布局极其简单，移动端使用比较广泛 pc端浏览器支持情况比较差"}, {"id": "6970078144447381518", "title": "移动开发选择和技术解决方案", "desc": "1. 移动端主流方案 1.1. 单独制作移动端页面（主流） 京东商城手机版 淘宝触屏版 苏宁易购手机版 通常情况下，网址域名前面加 m(mobile) 可以打开移动端。通过判断设备，如果是移动设备打开"}, {"id": "6909089942467510286", "title": "理解一下BFC", "desc": "BFC 全名叫做块级格式化上下文（Block Formatting Context，BFC） BFC 提供了一个布局环境，在这个环境中按照一定规则进行布局才可以达到我们的预期，目的是形成一个独立的空间"}, {"id": "6844903728768614414", "title": "CSS 选择器 - 带实例", "desc": "前端css选择器种类繁多，今天做了一下整理，不过该文章只适合前端小萌新，老油条请绕道。 1. 常见选择器 说明：普通标签支持:hover,:focus,其他伪类只有一些特定的标签才支持，比如说：a标签支持:visited,:active,link；button支持:active…"}, {"id": "6844903541601992718", "title": "用 TypeScript 和 css-in-js 的方式写 react app", "desc": "Create react app with TypeScript & css-in-js. Init a project: Adding css-in-js module: Creating a style file at ./MyComponent/MyComponent-s…"}, {"id": "6844903571075366919", "title": "第三方 CSS 并不安全", "desc": "最近一段时间，关于 通过 CSS 创建 “keylogger”（键盘记录器） 的讨论很多。 有些人呼吁浏览器厂商去“修复”它。有些人则深入研究，表示它仅能影响通过类 React 框架建立的网站，并指责 React。而真正的问题却在于认为第三方内容是“安全”的第三方图片。"}, {"id": "6844903570010013710", "title": "JavaScript 2/30: JS & CSS Clock", "desc": "查看我的 Demo 和 代码。 调整当前时间下，指针在表盘的位置。 涉及的小知识点已经在注释中提及，不展开解释。有关CSS3 Transition的疑问，详见该网站。有关transform-origin的疑问，可参见该网站属性演示，可以帮助你更好理解。 观察时钟，我们会发现一个…"}, {"id": "6844903934360813581", "title": "借用repeating-linear-gradient实现一把刻度尺（ruler）📏", "desc": "1. 刻度尺盒子 2. 厘米刻度 3. 半厘米刻度 4. 毫米刻度 5. 数字"}, {"id": "6844903513495977992", "title": "【译】2017 年 10 月：15 个有趣的 JS 和 CSS 库", "desc": "在每个月，我们都会为大家分享一些最新、有趣的前端库，希望它们中的一些会对你的项目有所帮助。"}, {"id": "6844903957655977998", "title": "【前端入门必知必会】css 伪类和伪元素选择器", "desc": "这一篇我们来介绍一类稍微特殊的两种选择器–伪类选择器和伪元素选择器。在页面中，这两类选择器通常用于标记一些特殊的样式，这些样式是基础选择器和组合选择器解决不了的，有些甚至是 JS 也做不到的。下面我们就分别介绍一下这两种特殊的选择器。 在页面中，有时候同一个元素在不同动作下有不…"}, {"id": "6977297787893317645", "title": "CSS 布局样式一: 左侧宽度不确定, 右侧铺满剩余宽", "desc": "CSS 布局样式一: 左侧宽度不确定, 右侧铺满剩余宽 利用 flex 实现 实现效果如下: css"}, {"id": "6991970536603516935", "title": "前端笔记-CSS浮动 解决高度塌陷｜8月更文挑战", "desc": "float 通过浮动可以使一个元素向其父元素的左侧或右侧移动，使用 float属性来设置于元素的浮动 可选值： none默认值，元素不浮动 left元素向左浮动 right元素向右浮动   注意，元素"}, {"id": "6844903656836317198", "title": "回流VS重绘", "desc": "从最初接触css和html的时候，就听说过回流和重绘，当时只是简单的知道一个是尺寸位置等变化引起，另一个是因为外观样式变化引起，并没有做深入的考究，究竟哪些情况会引起重绘，哪些情况会引起回流，没有做过详细的总结，今天我们就来一起复习总结一下。 渲染引擎首先通过网络获得所请求文档…"}, {"id": "6976973127909654559", "title": "flex布局 justify-content：space-between; 解决最后一排数量不够自动向两端排列问题", "desc": "flex 布局两端对齐当最后一排数量不够时，会出现以下布局情况 原图 实现效果 方案一（父级添加 after 伪类法，解决最后一排数量不够两端分布的情况） 完美解决两端对齐布局混乱的情况 当然，这种解"}, {"id": "6913747261885251597", "title": "【Ten Mins Effect】 - 06 毛玻璃 Loader 效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现一个简单精美的 css 效果。 这个效果不算复杂，接下来我们具体分析实现上述关键点即可。 在 css 中，我们可以借助 backdrop-filter 实现滤镜效果，具体可以看看这篇文章：…"}, {"id": "6844903725652246535", "title": "你不知道的css3(上） -- 用css3为你的组件添加风景", "desc": "先放置一个.box的div父容器，在box里放置一个.dice的div，然后在其里面放置6个div，分别表示骰子的6个面。 transform-style 属性规定如何在 3D 空间中呈现被嵌套的元素，默认是其子元素不呈现3D效果，所以我们需要添加preserve-3d值，让其…"}, {"id": "6930940675475111949", "title": "Flex 布局", "desc": "2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。 Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。 当我们为父盒子设为 flex …"}, {"id": "6973642591803801630", "title": "css揭秘 - 用户体验（一）", "desc": "这是css揭秘系列文章的第七篇，本篇主要介绍使用css可以实现的用户体验。包括选用合适的鼠标光标、扩大可点击区域、自定义复选框以及开关式按钮。"}, {"id": "6844903767171678221", "title": "【译】如何学习CSS", "desc": "很多人想让我给他们推荐有关CSS部分的教程，或者问我如何学习CSS。 我也看到很多人对CSS的部分内容感到困惑，一部分原因是由于对语言的过时认识。 鉴于CSS在过去几年中发生了相当大的变化，这是一个更新知识的好时机。 即使CSS只是你所做工作的一小部分（因为你使用其他技术栈），…"}, {"id": "6844904046222901262", "title": "CSS：如何使用 px、em、rem？", "desc": "1. 三种单位详解 相对长度单位。像素 px 是相对于显示器屏幕分辨率而言的。 利用 px 设置字体大小及元素宽高等比较稳定和精确。Px 的缺点是其不能适应浏览器缩放时产生的变化，因此一般不用于响应式网站。 相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺…"}, {"id": "6987710383133835295", "title": "响应式布局-媒体查询(@media)", "desc": "响应式布局-媒体查询(@media)。CSS3新属性；@media可以针对不同屏幕尺寸设置不同的样式，适用于响应式页面。 重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。"}, {"id": "6844903720363245575", "title": "一个中年girl的技能遗忘清单——曾经理解的Flex是错误的", "desc": "写给未来的自己，也许几个礼拜，也许几年。 今天突然接到一个任务，做一个专题。那么我肯定用html+css+js写，但是由于我写了大半年的小程序，我已经忘记了动画怎么写，特效怎么写，甚至连单位布局都忘记了。 于是我开始百度/谷歌，像一个初学者一样，一步一个脚印。写页面的速度慢的连…"}, {"id": "6844903498165780488", "title": "移动端页面适配———多方案解析", "desc": "在移动互联网快速发展的今天，手机的种类和尺寸越来越多，作为前端的小伙伴们可能会越来越头疼。对于移动端适配，不同的公司、不同的团队有不同的解决方案。我们项目中也用了一部分解决方案，网上也看到了一些解决方案，对比下，总结一些自己的理解，希望对各位有帮…"}, {"id": "6844903901049651214", "title": "[译] 仅使用 HTML 和 CSS 创建多级嵌套弹出式导航菜单", "desc": "今天，我将为你提供一个关于如何创建分层导航弹出式菜单的快速教程，该菜单可以跨多个级别进行深层嵌套。 作为抛砖引玉，我们将从一个具体的实际用例开始 —— 一个桌面应用程序的示例菜单栏。我将选择 Chrome 浏览器菜单栏中的一个子列表来说明这一点。 在最后，我们会增加一些样式，让…"}, {"id": "6844903697000955911", "title": "点点动画～画出懂你的3D魔方", "desc": "好吧，gif图看着好像有点不是很清晰，想在线预览的同学，可点击在线预览 👈，废话不多扯了，先来分析一下，看如何实现这个功能吧。 说到渐变，偶然之间发现了一个有意思的东西hue-rotate，它能在你初始的颜色基础上旋转元素的色调及其内容，从而达到不同的效果。了解更多 以上就是…"}, {"id": "6844903999402082317", "title": "「前端料包」一文吃透盒子模型BFC", "desc": "接触写博客有一段时间了，都是边学边学着写，但总感觉写的凌乱，想起啥写啥。这几天在刷红宝书，收获还是蛮多的，决定结合自己的学习，写一个系列，我叫它 「前端料包」，旨在巩固前端基础，努力提升自己，同时也乐于做一个分享者。这个系列包括但不限于下面脑图中的内容，目录和发文顺序暂且如下图…"}, {"id": "6885348466940182541", "title": "z-index详解", "desc": "z-index 属性设置元素的堆叠顺序，也就是在元素Z轴上的层级。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。但是注意的是该属性只有在设置了positon定位之后才会生效。 同级下，z-index的值越大，堆叠顺序越靠前，相同的z-index值的时候，后面的会在前…"}, {"id": "6844903538212995080", "title": "用vue开发一个所谓的数独", "desc": "最近的后台管理系统页面，功能暂时没有新的需求，就在想首页放什么东西，最近我想到的就是放个所谓的数独，为什么是所谓的数独，因为规则不同于标准的数独，只要求每一行每一列数字不一样就可以了！这个实例也是基于vue的，代码分享给大家。给大家代码，并不是要让大家直接拷贝代码，而是希望能让…"}, {"id": "6844903529098772494", "title": "CSS常用Mixin封装", "desc": "个人在做项目的过程中总结归纳的一些常用Mixin，现在分享出来供大家学习。 基于Less编写。但是CSS预处理器都是相通的，你可以很轻易的修改成Sass、Stylus"}, {"id": "6985156037657493517", "title": "HTML CSS布局定位", "desc": "我们在编写网页代码时，首先应该做的就是设计好页面的布局形式，然后再往里面填充内容。网页布局的好与坏，直接决定了网页最终的展示效果。PC端常见的网页布局形式有两列布局、三列布局等。在CSS中，我们通常使"}, {"id": "6844903784007598088", "title": "时钟——CSS 动画", "desc": "这是关于时间的。在本文中，我们将接受创建和设置时钟动画的挑战，使用简单的CSS动画和JavaScript来触发它们。 这是我们使用HTML，CSS，SVG背景和一些JavaScript创建的时钟。我们将使用CSS动画或过渡进行任何移动，并依靠JavaScript来设置初始时间并…"}, {"id": "6844904062882676743", "title": "《精通react/vue组件设计》之5分钟教你实现一个极具创意的加载(Loading)组件", "desc": "本文是笔者写组件设计的第八篇文章, 今天带大家用5分钟实现一个极具创意的加载(loading)组件.涉及的核心知识点主要是css3相关特性, 如果大家非常熟悉,可直接跳过介绍直接看正文. 通用型组件: 比如Button, Icon等. 布局型组件: 比如Grid, Layout…"}, {"id": "6844903518021779464", "title": "[web前端性能优化]性能优化只有三步，你了解吗", "desc": "关于前端的性能优化，每次提到这个词大家都有很多idea。现在静下来思考下我们用到的各种手段最终可以归纳为三步 这里主要是因为要完成一整个页面的输出后端需要处理很多个任务，我们可以将这些多个任务进行分块，谁先完成谁就先输出，最终通过JS回填的方式输出DOM节点。这种方式主要解决了…"}, {"id": "6844903557729091591", "title": "转眼人到中年：前端老程序员无法忘怀的一次百度电话面试（二）", "desc": "当一面结束时，一切都显得不那么真实。几分钟前还在着急忙慌地接招，随着电话的挂断，周遭又安静了下来，安静到感觉连脑袋都变得有些迟钝。 这种感觉很熟悉。多年前高考结束的那个夜晚，暴雨，回到家，一个人，对着堆成小山的习题集和试卷，说不出话来。一切都结束了，却没有意料中的狂喜。平静，甚…"}, {"id": "6844903711018336263", "title": "5000字前端动画交互实现小谈", "desc": "很多内容写的比较粗略，所以还望大家不要太过吐槽，后续我会给完善的。 1. 空间与转换 当图形被绘制在屏幕上的时候，无论是2D还是3D，都会有其自己的空间，也会有其自己的转换数据。 在计算机图形学中，通常是才用齐次坐标来表示空间内的点,在三维空间内，会使用四元向量来表示。 一般w…"}, {"id": "6972975565645021198", "title": "前端CSS练习：transition过渡小动画", "desc": "background: rgba(0,0,0,0...background: linear-gradient(to bottom, transparent, rgba(0,0,0,0.transition: transform 0..transition-delay: 0.tra..."}, {"id": "6972432440761516040", "title": "CSS 知识总结", "desc": "本文是参照了Google Developer及MDN等知名前端文档及杭州饥人谷的课程等写成的笔记，历时10多天终于写完了。"}, {"id": "6966231446205792286", "title": "一篇文章带你了解CSS定位知识", "desc": "大家好，我是IT共享者，人称皮皮。这篇我们来讲讲CSS定位。 一、Position(定位) CSS定位属性允许你为一个元素定位。它也可以将一个元素放在另一个元素后面，并指定一个元素的内容太大时，应该发"}, {"id": "6844903615182667789", "title": "常用的多列等高布局收藏", "desc": "我们要实现的效果就是当各个栏目内容不一样的情况下，保证各个栏目还是对齐的。想要实现的效果如下图所示： 元素设置的padding-bottom尽可能大一些，并且需要设置一样大小的margin-bottom负值去抵消padding-bottom撑大的区域，正负一抵消，对于页面布局不…"}, {"id": "6844903873962835982", "title": "「译文」：CSS-in-JS 你所应该知道的一切", "desc": "你很可能听过像CSS-in-JS, Styled Components,Radium, 和Aphrodite，你可以也会想，这和我有什么关系？我非常乐于写CSS-in-CSS(纯.css文件)。 我来说一下这些为什么和你有关，希望至少能懂得概念，了解为什么和你有关。话虽如此，请…"}, {"id": "6994303708364292132", "title": " css盒模型详解", "desc": "css盒模型详解 盒模型分为IE盒模型和w3c标准盒模型 1.w3c盒模型和ie盒模型之间的区别是什么？ w3c标准盒模型： 属性width，height只包含内容的content，不包含border"}, {"id": "6844904054234038286", "title": "[译] CSS border-radius 还可以这么用？", "desc": "TL/DR：在 CSS 中使用八个值指定 border-radius 时，可以创建自然外观的形状。没时间阅读所有内容？好的，这里给你提供了最终的可视化工具，点击这里 查看、使用它吧。 在今年（译者注：是指 2018 年）的 Frontend Conference Zurich …"}, {"id": "6844903639274749959", "title": "还在为网页渲染性能优化而苦恼吗？", "desc": "博客 有更多精品文章哟。 在讨论性能优化之前，我们有必要了解一些浏览器的渲染原理。不同的浏览器进行渲染有着不同的实现方式，但是大体流程都是差不多的，我们通过 Chrome 浏览器来大致了解一下这个渲染流程。 处理 HTML 并构建 DOM Tree。 处理 CSS 并构建 CS…"}, {"id": "6998161177641484302", "title": "【CSS】定位与浮动", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 定位 01. 定位模式+定位偏移 定位模式：static、absolute、relative、fixed 定位偏移：top、bottom、"}, {"id": "6844903795646808071", "title": "[译] 为什么我用 JavaScript 来编写 CSS", "desc": "三年来，我设计的 Web 应用程序都没有使用 .css 文件。作为替代，我用 JavaScript 编写了所有的 CSS。 我知道你在想什么：“为什么有人会用 JavaScript 编写 CSS 呢？！” 这篇文章我就来解答这个问题。 开发者们已经创建了不同风格的 CSS-in…"}, {"id": "6984396133531385892", "title": "跳动的心", "desc": "用纯css制作一颗会跳动的红心，用了css3新语法， 添加了动画效果。有需要的可以借鉴一下，有问题可以提出来"}, {"id": "6984394209243594766", "title": "会旋转的CSS太极图", "desc": "一个添加了旋转动画效果的css太极图。 只用了一个div盒子，其余部分使用双伪元素搞定。 结构清晰易懂"}, {"id": "6844903845957468174", "title": "从头开始复习css之动画", "desc": "说到动画，在很多的眼里 都会认为动画是一个可有可无的东西。因为在很多程序员的日常开发中，动画基本都是没有被用到的。我们这里来谈到动画会不会有点多余呢？ 正如我前面说到，动画并不是项目中的必需品，但却是项目的润滑剂。因为它能很大程度上能增强用户的体验。说了这么多，究竟动画是什么呢…"}, {"id": "6844903850302767111", "title": "DOM2 CSS interfaces", "desc": "DOM2 的 StyleSheets 是任何类型样式表的基础类。期望表示特定样式表语言的DOM模块可能包含从这些接口派生出新的接口。 本节中的接口不是必须的。DOM 应用程序可以使用 DOMImplement 接口的 hasFeature （feature， version）方…"}, {"id": "6844903537931976718", "title": "D2小记-体验“匠心”之旅", "desc": "就着最近第一次参加前端技术论坛写个小小的记录吧~"}, {"id": "6844903556806344718", "title": "灵活使用 inline SVG 方法来优化 SVG 文本和图片，提高性能和效率", "desc": "灵活使用 inline SVG 方法来优化 SVG 文本和图片，提高性能和效率"}, {"id": "6844903501487669256", "title": "要在 JavaScript 中写 HTML、CSS 与 JavaScript 吗？", "desc": "Zero-runtime CSS in JS library. Familiar CSS syntax with Sass like nesting. CSS is extracted at build time, no runtime is included. JavaScr…"}, {"id": "6844903700733886477", "title": "为什么是link-visited-hover-active", "desc": "通常我们在设置链接的一些伪类（link，visited，hover，active）样式时，要让不同的状态显示正确的样式，我们需要按一定的顺序设置这些伪类的样式。这里我就按CSS2规范中推荐的顺序进行介绍，即 link-visited-hover-active，可记为 LoVe-…"}, {"id": "6844903501739327501", "title": "Firefox 56正式版新增功能特性介绍", "desc": "本帖最后由yingliu于2017-9-3015:09编辑今天Mozilla发布了Firefox56.0正式版，这也将是支持旧式扩展的最后一个版本，Firefox57预计将只支持WebExtensio"}, {"id": "6844903845827608584", "title": "从头开始复习css之选择器（中）", "desc": "前面一章说了很多基础方面的知识，怎么说呢？还是比较基础的，现在这篇文章主要来讲一讲伪类和伪元素。 由上面的现象可以观察到：span元素并没有link和visited的效果。其实link和visited是a元素特有的伪类，当然也包括下面要讲的target伪类，其他的元素使用起来是…"}, {"id": "6844903811283157006", "title": "假设最后一个css元素是html标签，则选择器解析从左往右的提案", "desc": "现在浏览器css匹配核心算法的规则都是是以right-to-left方式匹配节点的。 它的读取顺序变成：先找到所有的span，沿着span的父元素查找.sub,再找.root，中途找到了符合匹配规则的节点就加入结果集；如果直到根元素html都没有匹配，则不再遍历这条路径，从下一…"}, {"id": "6844903873023311880", "title": "自己动手构建 button 轮子", "desc": "构建一个轮子首先要保证的就是复用性，对一些 CSS 样式表的属性操作，我们应该避免使用绝对长度值，这种做法会添加后期维护，并且不容易扩展，下面通过一个反例来说明将绝对长度值赋值给 CSS 的一些危害。 在尺寸上面，已经实现了轮子复用的目的，但是在一些阴影的处理上面，可能稍有欠缺…"}, {"id": "6844903495976353800", "title": "一款可配置风格简单的下拉列表组件[采用vue2.0技术]", "desc": "一款可配置风格简单的下拉列表组件，希望大家喜欢 - [x] 可动态获取列表的值 - [x] 可动态指定列表展示的文字 - [x] 可动态指定列表选中后的值 - [x] 可指定列表初始选中的值"}, {"id": "6844903505044439053", "title": "Front-End-Checklist", "desc": "The perfect Front-End Checklist for modern websites and meticulous developers"}, {"id": "6844903574846046216", "title": "中国第四届CSS大会", "desc": "中国第四届CSS开发者大会于2018年03月31日在厦门举办。由W3C、w3ctech、前端圈主办。本次大会我们将邀请行业内知名讲师，与大家共聚厦门，畅聊CSS。"}, {"id": "6844903550640734221", "title": "人人都是艺术家！谈谈那些奇怪的字符（上）", "desc": "编码，是每个程序员绕不开的话题。对于前端工程师而言，字符更是会直观地展示在界面上。 提起文字，大部分人的脑中，都会定式为规整排列的字符。但是林子大了什么鸟都有，世界上可是存在着6800+种文字，难免会飞出来一些诡异的鸟… 而号称“万国码”的Uni…"}, {"id": "6844903616872972302", "title": "被遗忘的CSS和HTML（二）", "desc": "先前写了一篇《被遗忘的CSS和HTML（一）》，后来因为各种事情，懒得写。最近把文章分享到掘金收获了不少点赞和鼓励，决定就再写点，希望从另一个角度去看一些问题的解决方法，还是那句话： 各种技术都有其适用场景 这里更多的是探讨另一种思考问题和解决问题。 最近几年，前端的发展向Ja…"}, {"id": "6844903751732428807", "title": "How Flexbox works — explained with big, colorful, animated gifs", "desc": "Flexbox promises to save us from the evils of plain CSS (like vertical alignment). Well, Flexbox does deliver on that goal. But mastering i…"}, {"id": "6844903537055367182", "title": "小tip: 了解LinearRGB和sRGB以及使用JS相互转换", "desc": "小tip:了解LinearRGB和sRGB以及使用JS相互转换这篇文章发布于2017年12月18日，星期一，23:11，归类于graphic相关,js相关。阅读320次,今日120次byzhangxi"}, {"id": "6844903601819615240", "title": "CSS Variables学习笔记", "desc": "最近看了下CSS Variables（CSS变量，又名CSS自定义属性），跟大家分享一下我的学习笔记。 来，直接看MDN上的描述： CSS 变量是由CSS作者定义的实体，其中包含要在整个文档中重复使用的特定值。使用自定义属性来设置变量名，并使用特定的 var() 来访问。 CSS"}, {"id": "6919664483518382088", "title": "编写模块化的CSS（第二部分）—命名空间 | Zell Liew", "desc": "上周，我分享了如何使用BEM创建一个合理的CSS架构。 虽然BEM很棒，但它只是解决方案的一部分。 还有另一部分我还没有提到 - 命名空间。 在今天的这篇文章中，我想与大家分享一下为什么只用BEM还是不够的，以及如何使用命名空间来弥补一些不足。 我上周给大家展示的例子很简单。 …"}, {"id": "6919664391386300430", "title": "编写模块化 CSS（第 1 部分） - BEM", "desc": "你是否做过多页面的大型网站或者其中一部分？如果你做过，你可能会意识到 CSS 架构不够强大所带来的恐惧。你可能还会研究如何编写可维护的 CSS。 由于我们的行业很棒，我们有很多推荐的解决方案。因为专家们的纷纷加入，于是我们有 BEM，OOCSS，SMACSS，Atomic De…"}, {"id": "6844903954518638599", "title": "前端深入之css篇|你真的了解“权重”吗？", "desc": "权重这个概念，相信对许多进行过前端开发的小伙伴来说肯定并不陌生，有时候一个样式添加不上，我们就会一个 !important 怼上去，一切就好像迎刃而解了。但还有的时候，!important也并不能解决我们的问题，下面请跟随我来详细了解一下css的权重吧！ 以上是摘自百度百科对“…"}, {"id": "6904232744771911694", "title": "2020年的css周边之styled-components原理及使用指南", "desc": "styled-components是一个js库，以下简称SC,我们可以利用其提供的api编写css以增强react组件系统的样式功能，其他css-in-js解决方案的思路也类似。 追踪页面上渲染的组件自动注入样式，结合代码拆分可以加载尽量少的代码。 如果要学习一个js库，比使用…"}, {"id": "6844903928497176583", "title": "CSS Houdini实现动态波浪纹", "desc": "CSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CS…"}, {"id": "6946987276526157854", "title": "移动端网页自适应", "desc": "自适应的意思就是在不同屏幕尺寸大小的手机上，看见我们开发出来的网页是一样的。（这和响应式不是一个东西，不要弄混淆） Pixel，像素。分为真实像素，和逻辑像素（CSS像素）。 比如坚果Pro2S，屏幕6.01英寸，意思就是手机屏幕对角线的长度为6.01英寸（6.01 * 2.5…"}, {"id": "6844903603530907655", "title": "如何解决外边距叠加的问题？", "desc": "上面div的margin-bottom:10px; 下面div的margin-top:10px; 这样他们的外边距叠加了，有什么方法解决，最好不要转换成padding"}, {"id": "6910902473687302151", "title": "小小的css动画示例", "desc": "为什么有这篇文章今天翻看ui中国app看到这样一个效果用css动画实现它最终效果虽说不能百分百相同，不过还是凑合的dom结构css基本样式在css中除了基本样式外，，额外用transform使元素的初"}, {"id": "6903821443675455495", "title": "Web 性能优化-页面重绘和回流", "desc": "Display:将像素发送给GPU，展示在页面上。 当 render tree 中的一部分（或全部）因为元素的规模尺寸、布局、显示/隐藏等改变而需要重新构建，这个过程称作回流（reflow）。页面第一次加载的时候，至少发生一次回流。 内容发生变化，比如文本变化或图片被另一个不同…"}, {"id": "6844903590688096263", "title": "你应该掌握的CSS自定义属性技术点", "desc": "特别声明：此篇文章内容来源于@Ohans Emmanuel的《Everything you need to know about CSS Variables》一文。 大多数编程语言都支持变量。但遗憾的是，CSS从一开始就缺乏对原生变量的支持。如果写CSS的话，那是没有变量的，除…"}, {"id": "6844903552792395783", "title": "css中的浮动和BFC", "desc": "写了两篇，发现自己给自己挖了好多坑，现在得一点点慢慢填了。这次还是继续写一篇css的内容，来看一下浮动和BFC这两个概念。 float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，…"}, {"id": "6844903597130563591", "title": "超大型 JavaScript 应用的设计哲学", "desc": "前两天情封大大给我推荐了一篇文章，问我是否有意翻译分享一下。乍一看这个才发表两天的文章就有6000多次鼓掌（现在快一万了），快速扫了全文感觉是篇很棒的演讲，便决定开始干，于是，真正的痛苦便开始了。"}, {"id": "6844903794170396685", "title": "CSS 将支持三角函数", "desc": "CSS trigonometry functions approved but not expected to hit browsers any time soon."}, {"id": "6924223074459975687", "title": "CSS Grid重新思考布局", "desc": "1.引言Flex与Grid相比就像功能键盘和触摸屏。触摸屏的控制力相比功能键盘来说就像是降维打击，因为功能键盘只能上下左右控制（x、y轴），而触摸屏打破了布局障碍，直接从（z轴）触达，这样无论UI内部"}, {"id": "6954644026796703781", "title": "CSS 知识阶段总结", "desc": "Flex 布局 基本概念 Flexible Box 模型，通常被称为 flexbox，是一种一维的布局模型。它给 flexbox 的子元素之间提供了强大的空间分布和对齐能力。"}, {"id": "6954588840577204238", "title": "「HTML+CSS」--自定义加载动画【012】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 设置span元素 宽度/高度均为：96px 边框为：白色 10px solid 效果图如下 步骤2 使用span::before伪类，"}, {"id": "6844903774947917838", "title": "14 CSS Button Click Effects", "desc": "Collection of hand-picked free HTML and CSS button click effect code examples. Delightful Material UI stretch button built by clipping path…"}, {"id": "6913849870713356302", "title": "前端学习笔记（八）", "desc": "教程也看完。至此， MDN 的 html，css，js 的基础教程全看完了，路线图也可以往下走了。虽然路线图上还有 3 个部分没学到，这 3 个部分打算和别的同时学习。 1. 使用 css 美化表单 总体来讲，表单小部件并不适合用 css 修改。以下是部分解决办法。 浏览器专有…"}, {"id": "6844904041437200398", "title": "CSS小技巧之drop-shadow的妙用", "desc": "最近开始研究css的各种奇妙的用法，励志做一个能用css写出奇幻动画效果的程序媛。 先具体说说drop-shadow的用法。 可以看到和box-shadow的参数类似，但是不同的是drop-shadow没有inset内阴影，不能阴影叠加。 drop-shadow是CSS3中fi…"}, {"id": "6896447377012441096", "title": "CSS基础混讲（1）", "desc": "今天主要介绍以下CSS的基础，做一个基本知识的混讲。 首先，什么是CSS,它的全名叫做Cascading Style Sheets(层叠样式表),全称CSS(注意，一定要大写)，它是由李爵士的同事Håkon W Lie提出的，这个人也是个牛逼的，这是他的生平。 CSS因为它的不…"}, {"id": "6844903567304851464", "title": "前端每周清单第 52 期: Webpack 4.0，GraphQL 安全加固，去中心化的 Web", "desc": "前端每周清单专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号（ID: frontshow），及时获取前端每周清单。 Webpack 4.0.0 发布: 本周…"}, {"id": "6844903536958914568", "title": "css-3秒（大概吧...）快速撸出YY游戏页面（三）", "desc": "有哪里不懂的，请在下面留言，我每天都看，有时间我会一一解答，看评论区也许有人提出了跟你同样想问的问题，可以看看我给出的回答，不用重复提问。 声明，本教程只是为了帮助大家更好的理解css的一些细节，所以在这三篇里没有都涉及js，下面开始的轮播图我也只是讲解其中的css，其中我给出…"}, {"id": "6844903593284206599", "title": "怪异的margin-top百分比", "desc": "在我们日常前端开发中，特别一些新入门的前端，往往对margin/padding的百分比有错误的认知。最近面试时有遇到过这个问题，由于对这些小知识点的忽略而凭借自己的直观印象而回答错误，所以做下梳理与记录。 面试官问：假设一个div，宽400px，高200px，他有个子div的m…"}, {"id": "6844903630504460295", "title": "纯原生组件化-模块化的探索", "desc": "想象有这样的一个场景，类似资料卡的东东，需要在页面中展示头像和用户的名称。 姓名在右，字号16px，垂直居中。 此时，我们完成了需求，一切都没有什么不对的，但是一个很现实的问题。 不会有这么简单的页面存在的，就算简洁如 Google 首页，也用到了400左右的DOM元素。 很难…"}, {"id": "6936014446733033486", "title": "block，inline和inline-block", "desc": "1. display:block 块级元素会单独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度； 块级元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行； 块级元素可以设置margin和padding属…"}, {"id": "6910783942538821645", "title": "CSS基础", "desc": "inline元素从左往右，到达最右边才换行，比如&#x3C;span>标签。 block元素从上到下，每一个都会另起一行，比如&#x3C;div>标签。 inline-block也是从左到右，但是与inline不同之处是元素不会被断开。 inline的宽度，默认为内部inlin…"}, {"id": "6985565843383910431", "title": "盒子模型垂直居中的几种方法(记录一下)", "desc": "1.使用JavaScript 2.核心是利用定位(使用css)3.利用flex，不过有浏览器兼容问题"}, {"id": "6943856363248287752", "title": "隐藏一个元素有哪些方法以及区别", "desc": "开发过程中我们经常会对一个元素进行显示和隐藏的操作。那么我们都有哪些方式可以来隐藏页面上的一个元素呢？它们分别有什么不一样的地方？本文我们就一起来探讨一下。 position属性可被继承（position: inherit），子元素可以通过设置relative、position…"}, {"id": "6844904001129938951", "title": "CSS页面布局-float,flex,table,grid", "desc": "1. 布局展示 2. float 3. Flex 4. 优缺点对比 5. 清除浮动的方法"}, {"id": "6844903800336187405", "title": "WebGL 3D 入门与实践： CSS  中的 3D 属性", "desc": "前面介绍了 3D 变换的原理和算法实现，并通过一些简单的 demo 演示了变换效果，但这些 demo 都是使用 WebGL 技术渲染。本节我们暂时不使用 WebGL，而是改用前端同学最熟悉的 CSS 技术来实现 3D 效果，并进一步了解 CSS 中的 3D 属性和 WebGL …"}, {"id": "6935574312145387550", "title": "【CSS】深度学习Flex布局 | 面试系列", "desc": "如果没有css，那么文档元素的排列通常都是遵寻HTML默认的布局方式。比如下方一段HTML： 文档元素遵守自上而下、自左而右的排列规则。 块级元素默认垂直排列。内联元素会水平排列。 CSS中的一些属性就会改变的HTML默认的布局方式，去实现更复杂更灵活的布局。CSS改变布局方式…"}, {"id": "6844903573692628999", "title": "看完你也想编写自己的 react 插件", "desc": "图片懒加载是项目中常用的功能，然而现有 react 懒加载组件库，用着都不是很爽了 😝。概括一下有如下几点： 没有只针对 image 懒加载组件。多数组件库都内置了模块、组件、脚本、iframe 懒加载功能，而弱化了 image 懒加载功能。 不支持动画显示效果。 不灵活，可…"}, {"id": "6844903535314731021", "title": "DOMContentLoaded、readystatechange、load、ready详谈  ", "desc": "对前端同学而言，loade,unload,DOMContentLoaded等页面加载过程中会触发的事件肯定是都接触过，不过要是具体问各个事件的区别，我就不是那么能清晰的解答上来的了。正好刚刚在无阻塞脚本那看到了DOMContentLoaded事件，就来翻翻具体文档详细看一下各个…"}, {"id": "6844903567430680589", "title": "你有所不知的margin属性", "desc": "作为前端狗的我们，每天都要和网页打交道。当 UI 将设计稿发给你时，CSS 的知识便显得尤为重要。而 CSS 这一标记性的语言，却时常让我很头疼：毫无逻辑性，并充满了各种坑爹的潜规则 ，以至于每次做项目时，大部分时间精力都浪费在了调整布局与样式上，详情可点击知乎上的为什么 CS…"}, {"id": "6985542563985883143", "title": "《图解CSS》布局", "desc": "何为布局 此处说的布局是对HTML界面元素的布局，也就是对网页中的元素进行位置上的安排。 那么我们为什么需要布局和如何布局呢？ 为什么需要布局 我们在设计网页时,一般都是自顶向下，自左向右，可能存在很"}, {"id": "6985542322268143630", "title": "《图解CSS》字体与文本", "desc": "字体与文本 字体是“文字的不同体式”或者“字的形体结构”，例如宋体/黑体/行楷等。 文本就是一组字或字符，比如章标题、段落正文等等，跟使用什么字体无关。 CSS 为字体和文本分别定义了属性。字体属性主"}, {"id": "6935429828036263967", "title": "前端二向箔06-CSS语法", "desc": "本章开始复盘CSS系列的核心知识 . CSS并不像HTML或者JS那样有丰富的标准体系. 更多的是零散的草案和一些阅读性不高的文档规范. 所以复盘CSS更多将从概念和实践结合以达到成体系地复盘地目的. CSS的实践和奇技淫巧太多了, 这里知识做个大概的知识复盘, 将一些学习中遗…"}, {"id": "6844903778689237000", "title": "实现图片染色效果的三种方式", "desc": "为一张彩色图片增加染色效果变成灰度图片或者为灰度模式的图片增加染色效果变成彩色图片的css实现方式，有基于滤镜，基于混合模式的实现方式。 我们来为彩色图片添加一个灰色的染色效果，可以使用多个滤镜组合的方式来实现。 首先使用的是sepia()，它会给图片增加一种深褐色的染色效果，…"}, {"id": "6844903895215374349", "title": "[译] Flexbox 对齐全知道！", "desc": "在 本系列的第一篇文章 中，我解释了当在元素上声明 display: flex 的时候，发生了什么。这一次我将带领大家浏览一下对齐属性（alignment properties），看看它们是如何在 Flexbox 中起作用的。如果你曾困惑不知道该使用 align-* 属性还是 …"}, {"id": "6908968924889481223", "title": "【CSS】CSS动画", "desc": "translateZ(length)且父容器有perspective属性用于定义视点（原点）：垂直于视点所在平面。视点为0，数字越大，距离视点越远，图像越大。反之，数字越小，距离视点越近，图像越小。代码示例 补充中间帧。必须给出开头和结束，中间自动补齐。一般会有一次或者两次动画…"}, {"id": "6908955952007872525", "title": "【Ten Mins Effect】 - 04 3D 毛玻璃计算器效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现要给简单精美的 css 效果。 这次的效果看起来蛮炫酷的， 接下来我们便来分析一下，想要实现这个效果，有哪些关键点。 接下来我们一一分析一番。 其实实现这个背景的方法很多，最简单的比如直接…"}, {"id": "6951706603842174989", "title": "CSS系列 -- 媒体查询", "desc": "作用媒体查询的最大作用就是根据查看网页的设备的窗口大小，适配布局和元素大小基本语法或条件里的语法逻辑主要的逻辑也就是以下四个：and, 【 or 的意思】not 【对查询结果取反】only 【only"}, {"id": "6844903865796526094", "title": "[译] 4 个 CSS 调色滤镜", "desc": "SVG 提供了一种非破坏性的方式来更改图像或图形的某些颜色属性。但不幸的是，有一些更改实现起来比较麻烦。CSS 滤镜允许你以非破坏性的方式更改某些颜色属性，并且比 SVG 滤镜更简单。 过去几周里，我一直把 CSS 滤镜作为 SVG 滤镜的备选方案来探讨。首先我大体介绍了一下滤…"}, {"id": "6844903943462633485", "title": "CSS盒模型详解", "desc": "盒模型是CSS的基础中的基础。 因为它的重要性，所以很多面试中都会被问题。它也成为了考察求职者基本素质的一道题。属于绝对的经典问题。这样描述，相信大家能意识到盒模型的重要性了吧。 然而，在面试的过程中，我发现还有不少求职者，回答的支支吾吾，嗯！是那个，对！就是那样。说实话，我真…"}, {"id": "6844904089084493838", "title": "linear-gradient碎碎念", "desc": "首先我们要明确一下：linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。其结果属于<gradient>数据类型，是一种特别的<image>数据类型。 linear-gradient属于gradient数据类型， gradient是image的子…"}, {"id": "6844903543334240263", "title": "再读规范中浮动与定位细节", "desc": "如题，浮动与定位是CSS布局中重要且基础知识点，相关规范和书籍都有篇幅解读。但具体细节，笔者初读囫囵吞枣，几经再读受益匪浅。感叹规范，简明扼要，字字珠玑 。借此行文，着笔细节，竭尽所能，力求清晰。不过删繁就简，仍然又臭又长，自嘲厕所文。 在正文开始前，说几句题外话。以CSS 定…"}, {"id": "6844903874814279687", "title": "CSS进阶（17）—— CSS中的文本处理（上）", "desc": "个人将本章内容分成上中下三个章节，本节主要介绍文本(font)属性相关的知识，下一章则把@font face规则单独作为一章进行讲解，最后一章讲一些处理文本的CSS属性。闲话不多说，让我们来看看font家族有哪些成员，以及这些成员有哪些特性吧。 说起font属性，在平时的布局中…"}, {"id": "6844903779356131335", "title": "深入CSS基础之box model", "desc": "本篇文章的依赖主要是CSS2.1 specification 8. box model 和 CSS Box Model Module Level 3。 本篇整体比较细节和理论，可能会看起来枯燥，我尽量讲的逻辑简单些。个人认为有时候阅读枯燥的理论文章是有必要的。 写这篇的文章主要…"}, {"id": "6876350553484918792", "title": "盒模型与BFC", "desc": "在一个文档中，每一个元素都被抽象成一个盒子，每一个盒子又包括四部分外边距（margin）、边框（border）、内边距（padding）、内容（content）构成。在盒模型中，存在标准盒模型、IE盒模型（怪异盒模型）。 具有BFC特性的元素可以看作是隔离的独立容器，容器里面的…"}, {"id": "6844904144537403400", "title": "一种基于ccs3的timeline实现方法", "desc": "在web项目中我们经常要使用时间轴（timeline）控件。本文提供一种基于CSS3的可逐项展开的timeline，在各展开项中可以嵌入文本、图片、视频等元素。运行效果如下： 该控件的实现过程较为简单，主要由test.html文件和timeline.css文件组成。具体代码如下…"}, {"id": "6909014498284634126", "title": "CSS布局-基础", "desc": "子盒子是标准流，父盒子虽然没有高度，但是也会通过子盒子撑开父盒子，进而获得高度。 子盒子浮动，脱标，父盒子没有撑开高度就是0，那么下面的标准流盒子就会移上去。 清除浮动就是为了解决父级元素因为子级浮动引起的内部高度为0的问题。清楚浮动之后，父级就可以根据浮动的盒子自动检测高度。…"}, {"id": "6943492777649012744", "title": "CSS3之弹性盒子", "desc": "flex-start：子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。 flex-end：子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。 baseline：如子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线…"}, {"id": "6962897809703960583", "title": "「HTML+CSS」--自定义加载动画【016】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签作为外围白色部分，并设置 宽度、高度均为96px 边框：白色 10px solid 效果图如下 步骤2 \b设置span"}, {"id": "6925648260304633864", "title": "CSS BFC 简介", "desc": "一、什么是BFCBFC全称BlockFormattingContext,中文可译为块级格式化上下文对于浮动元素、绝对定位元素、非块级盒子的块级容器(inline-block、table-cells、t"}, {"id": "6908683530692198408", "title": "CSS浮动全面解析+应用", "desc": "1. 常规流 1.1. 视觉格式化模型(布局规则)将页面中的盒子排列方式分为三种： 1.2. 常规流 1.3. 包含块(containing block) 1.4. 水平方向的width和margin 1.5. 垂直方向的height和margin 1.7. 相邻盒子的外边距合…"}, {"id": "6844903783835648013", "title": "【译】一张图搞定CSS选择器知识", "desc": "这些天，我一直在折腾 CSS 选择器。 拥有杂七杂八符号的 CSS 选择器太多了，比如 > . , * + ~ [] 等等，因此我经常被如何使用这些选择器搞得头大。 终于，我把它们在我脑海中理顺了，并按照我的理解来构建知识体系。 *事实上，为了节省纸张、保护地球，我原本是想把它…"}, {"id": "6844903599999287304", "title": "CSS transition delay简介与进阶应用", "desc": "我相信这是一个很常见的一个需求，有很多种方式能够实现，但是，其实现方式的原理各不相同，也有利有弊。 在CSS中，有一个伪类hover也能够监听鼠标移动到某个元素上面，因此我们也可以利用CSS来实现我们刚刚的功能。 我们需要使用的是CSS3中的新特性：transition。 tr…"}, {"id": "6897920958918492174", "title": "CSS揭秘：5.条纹背景（上）", "desc": "red，yellow，blue代表渐变色，表示从red - yellow - blue (相当于red 0% - yellow 50% - blue 100%)。 意思是从0%距离处为red，通过0%-50%的距离渐变到yellow，再通过50%-100%的距离渐变到blue。…"}, {"id": "6844903927243079693", "title": "[译]CSS Grid #13：auto-fill 和 auto-fit  关键字", "desc": "在 Grid 布局中，使用 auto-fill 或 auto-fit 关键字，能帮你在一行中尽可能多的排列 Grid 项目。本教程将会解释这两个关键字的作用。 创建包含 4 列的 Grid 容器。每列的宽度设置为 200px，列与行之间的间隔是 1.5rem（差不多是桌面屏幕里…"}, {"id": "6943495777939357732", "title": "CSS 之关于高度", "desc": "1. 文字的高度由什么决定？ (3) 文字的高度由字体大小和默认行高决定。 2. div 的高度由什么决定？ (2) 当 div 内既有内联元素又有块级元素时，div 的高度由其内部文档流中元素高度总和决定。 3. 文档流 (3) 脱离文档流，元素脱离文档流之后，将不再在文档流…"}, {"id": "6844903507661684743", "title": "现代 Web 开发基础", "desc": "现代 Web 开发基础是笔者对于 HTML、CSS、DOM 等 Web 开发中涉及的基础知识与理念的总结介绍。 这是一个最好的时代，也是最坏的时代，我们亲身经历着激动人心的变革，也往往会陷入选择的迷茫。随着浏览器版本的革新与硬件性能的提升，Web 前端开发进入了高歌猛进，日新月…"}, {"id": "6931261141960097805", "title": "css-居中对齐", "desc": "div内文字实现水平居中对齐，如果是单行文字，适合用line-height和text-align来设置居中。 如果超出一行，那就无法实现全部居中对齐了，因为设置了行高和容器的高度一致，第二行会被顶出容器外。这种情况可以配合text-overflow和overflow实现超出的部…"}, {"id": "6916762468710613000", "title": "flex-basis和width", "desc": "今天遇到一个问题给一个按钮添加width怎么都不生效，看来对flex中使用width还是一窍不通啊.. width设置的一定是宽度，flex-basis不一定, 它的尺寸根据flex-direction的值改变，不变的是它的尺寸永远定义在主轴上。 好吧...我写不下去了，wid…"}, {"id": "6844904082277138446", "title": "如何利用负margin技术实现平均布局", "desc": "我们平常会利用float布局来解决IE浏览器CSS的兼容性问题，比如淘宝，就是用float布局来实现的。 我们会在淘宝页面会看到下图这样一种布局。 有的同学可能觉得，这还不简单，可以直接设置父元素div宽度和子元素宽度总和相等就可以了。 真的有这么容易吗，我们来试一下。 假如我…"}, {"id": "6973833558569779214", "title": "CSS3常用属性(线性渐变，径向渐变，新增background值，新增border值)", "desc": "background: linear-gradient(方向 color1[percent] color2[percent] ......border: 20px solid rgba(123,123,34,0.background: url(img1..border: 20px..."}, {"id": "6936444451690643470", "title": "前端多种方式实现网格布局", "desc": "这种布局对于 Grid 布局来说简直小菜一碟， Grid 布局能实现的效果很多，可以参考一下阮一峰的 博客， Grid 布局日常使用起来很方便，但是如果页面需要兼容比较老的移动端设备的话，建议最好别用，兼容性问题很大。"}, {"id": "6844903704970133511", "title": "文字两侧加横线的解决方案", "desc": "脑海闪过了什么？定位，浮动，背景图片，伪元素。。。还是大脑一片空白？ 条条大路通罗马，相信给你足够的时间，静静的坐在开着空调的房间里，你会得到自己的实现方法。 先看第一种，背景纯色的实现方案。 用的一个方法是用一个空的标签，来写这条横线。当然也可以用背景图，切一个中间透明，两边…"}, {"id": "6844903517358915598", "title": "BEM 实战之微信个人页面", "desc": "BEM 是由 Yandex 团队提出的一种前端命名方法论，是一个非常有用，强大，简单的命名约定，可以让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确而且更加严密。 我修改了我的html命名，感觉上结构更加清晰而且观察了一下微信的页面，头部和底部是不变的，每…"}, {"id": "6894595425542602759", "title": "教你如何写出一个碎片轮播~", "desc": "如果对于这个蒙版的概念你还不甚了解,你可以自己去这个网站操作熟悉。 Part 2. 轮播图中的碎片是怎么样的？ 1. 2."}, {"id": "6904609967505539085", "title": "纯css实现可交互的动画", "desc": "如题，不借助JavaScript，只利用CSS，如何实现可交互式的动画呢？或许该需求仅此一种解决方案，绝无仅有。不知该方案是否是第一次找到。 就是可以响应用户的动画，直接上图吧，更直观更清晰。 当用户点击按钮或者心的时候，就会跳动一下。 1. 重写checkbox样式 我们经常…"}, {"id": "6844903576314052615", "title": "【翻译】使用这20个好的css技巧提升你的CSS技能", "desc": "前端开发越来越关注效率：通过选择器的使用和简化代码来快速加载渲染。像Less、SCSS这样的预处理器在工作的时候，需要绕的路较长，而直接使用css速度会快。这里涵盖了20个css技巧来帮助你减少重复规则和复写，在布局中标准化样式流程，不仅可以帮助你高效地创建自己的框架，而且可以…"}, {"id": "6900461833883385869", "title": "前端人如何用clip-path画画....甚至做动画？", "desc": "clip-path即剪切路径，是css3中的新属性之一，clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。 方便各位进行clip-path绘图与动画制作。具体我们下文介绍,顺便为了勾起各位的兴趣，这里特地放出基于clip-path的碎片轮播…"}, {"id": "6844903934553751560", "title": "CSS清除浮动的8种方法以及优缺点-万能清除法", "desc": "下面总结8种清除浮动的方法（测试已通过iechromefirefoxopera，后面三种方法只做了解就可以了）1.万能清除法（推荐的方法）2.父级div定义height3，父级div定义伪类:afte"}, {"id": "6978434317101989924", "title": "[css]如何用纯css实现一个带有边框的三角形", "desc": "从实际需求出发，使用纯css实现带边框的三角形（箭头效果），可抽象为组件进行复用。你是否也遇到过这个问题？"}, {"id": "6882650074732560398", "title": "CSS中的变量", "desc": "现在业务中经常会使用一些 CSS 的预处理器或后处理器，他们极大的方便了开发过程中的 CSS 片段复用。但其实 CSS 原生也做出了一些改变，在兼容性没有那么苛刻的情况下， 可以尝试使用。本文就是我对 CSS 原生变量的探讨和认知。 跟 JS 中的变量一样，目的都是为了复用并且…"}, {"id": "6891173045675769864", "title": "linear-gradient实现圆环进度条", "desc": "最近项目有用到圆环进度条，所以也找了一些文章，看看是如何实现的。市面上的文章讲述的实现方式基本都是两个长方形旋转和canvas这两种方式，大家如果有兴趣可以自己去找找，百度一搜一大把😂。 然而我做的项目是小程序（提供demo是vue版本），canvas层级非常高，虽然官方提供…"}, {"id": "6844903889293017101", "title": "CSS三栏布局方案", "desc": "有多种布局方案可以实现，这里一一探索。"}, {"id": "6844903590956367879", "title": "一个简单易用的webpack4多页面脚手架配置加学习", "desc": "前言：以前刚接触webpack的时候还是1，当时大概过了下文档操作了一下当时写的一些注释。后来开发的时候基本写react都是用的create-react-app或者找别人的搭好的脚手架用。所以趁着这段时间的间隙加上webpack4刚出也不算久，重新学习加复习下webpack的一…"}, {"id": "6844904199075921927", "title": "Grid布局入门指南", "desc": "1. grid-template-* 分配单位 网格布局(Grid)是最强大的css布局方案。但是知识点较多,学习成本相对困难些,目前的兼容性不如flex好! 1. grid-template-* 分配单位"}, {"id": "6844903508487962631", "title": "我用SVG+CSS3做了一个舞动的机械人——致AI时代的到来", "desc": "想法来源于codepen大神的一个神作，一群机械人以神一样的步伐在进行群魔乱舞，可是，可是，打开一看，纯js实现，js！也罢，我偏要试一下用SVG+CSS3能不能搞出这个效果来，o(￣ヘ￣o＃)。此为前提。 先来个简易版的机械人吧，因为重点是动效，所以就简易到不能再简易，全部胶…"}, {"id": "6844903608081727495", "title": "line-height与vertical-align：简单的属性不简单", "desc": "如上图所示，结果应该很明确了：影响div元素高度的是line-height属性，影响span元素高度的是font-size属性，更准确的说法应该是line-height决定块状元素的内容区域高度，而font-size影响行内元素的文本区域高度，这里请记住内容区域与文本区域不是同…"}, {"id": "6844903597721780238", "title": "SVG：浪啊，浪来了，大浪来了", "desc": "如果你问我当我们想在项目里加一个波浪效果的时候我在想什么？我的回路大概是这样的： 打开我的 铬 浏览器 进入 代码笔 网站 搜索 浪 多点几次下一页，我的老伙计，哦我的天，写这些波浪人都是怪物吗 emmm....这个这个！！这个像设计师要求的 打开链接，CV 二连 去和设计师去…"}, {"id": "6977722702240940069", "title": "图片扫描仪特效 html+css", "desc": "这是我参与更文挑战的第23天 话不多，先看效果： 这样，有抖动的： 无抖动的： 实现： 1.先定义一个底层盒子： 2.基本样式，长宽背景图等等~ cursor: pointer;鼠标经过盒子样式为小手"}, {"id": "6844903498023174158", "title": "深度剖析Baseline设计原理", "desc": "前言：Baseline是很多前端人都用过的最基本的CSS属性之一，乍一看来，似乎很简单，但真的深究起来，Baseline可以算得上CSS最有深度的属性之一了。不信，那就继续往下看。 从vertical-align的值来了解Baseline的兄弟属性的值的含义。 首先，当务之急是…"}, {"id": "6970316006975602695", "title": "熟练使用CSS（二）--布局", "desc": "在CSS中，布局是非常重要的部分，了解常用的布局及如何实现这些布局是必要的。在这一节，我们详细介绍了CSS的flex布局和常用的圣杯布局，以及介绍了负margin的使用。"}, {"id": "6909733144069570567", "title": "【干货】常用且顺手的CSS布局方式", "desc": "为什么今天我会饶有兴趣的写一篇关于我们常用的CSS布局的文章？我相信每一个前端工程师在开发的过程中都有过这样的迷茫期：js和HTML写起来流畅飞快，但是在遇到复杂的或者没有经历过的样式设置时，就会耗费较长的时间去处理甚至卡在一个小问题上而停滞不前。但作为一个前端工程师而非jav…"}, {"id": "6844903509117140999", "title": "8个纯CSS3制作的动画应用及源码", "desc": "分享：8个纯CSS3制作的动画应用及源码"}, {"id": "6844903741477355534", "title": "CSS布局（inline和block）", "desc": "标签div的高度, 由其内部文档流元素的高度总和决定, 并不是相等. 文档流: 文档内部元素的流动方向. 如果文档内部是块级元素(block), 文档流布局方向就是从上到下布局, 一个块占据一行, 依次向下布局, 即使一个块宽度不足以达到总宽度. 内联元素(inline), 也…"}, {"id": "6844903839653429262", "title": "css-虚线边框滚动效果", "desc": "通过背景图片实现。 135度repeating线性渐变，p撑开高度，白色背景覆盖外层div渐变。 通过线性渐变以及background-size画出虚线，然后再通过background-position将其移动到四边。这种方式比较好的地方在于可以分别设置四条边的样式以及动画的方…"}, {"id": "6917855185150836750", "title": "前端面试——BFC相关问题", "desc": "翻译：块格式化上下文包含创建它的元素内部的所有内容，这些内容不包含在创建新的块格式化上下文的后代元素内部。"}, {"id": "6844903597772111886", "title": "CSS3硬件加速也有坑", "desc": "事情要从最近看的《WebKit技术内幕》说起，第二章介绍了网页的结构，其中提到了Webkit硬件加速的方式，会把需要渲染的元素放到特定的『Composited Layer』中，在chrome的控制台可以这样开启："}, {"id": "6844903815691370504", "title": "CSS 中的 float、BFC、position 和 inline-block", "desc": "CSS 中有时候需要一些特殊布局，用正常流做不出来的效果。这时我们就可以使用破坏流和保护流的那些 CSS 属性来实现这些效果。 float 属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流(文档流)中移除，尽管仍然保持部分的流动性（与绝…"}, {"id": "6844903574938320909", "title": "CSS Modules", "desc": "CSS命名规范，基本又是每个团队都要面临的问题，规范必定会出一则，但最后能严格执行的，始终是一件很难的事。 这套法则注重 CSS 语义的表达和管理，初衷就是为了方便区分样式模块的归属，也方便日后复用，有点像 BEM 方法。但缺点也很明显：难理解，命名需要花额个的时间考虑其独特性…"}, {"id": "6844903510685777934", "title": "10集视频让你入门React构建和路由操作", "desc": "10集图文+视频的形式，让你掌握React项目的构建和路由操作。 希望帮助更多的前端爱好者学习。"}, {"id": "6912030552849645575", "title": "CSS全解（前端面试重难点）", "desc": "​ BFC内部元素不影响外部元素。 static 默认属性值，即没有定位，遵循正常的文档流对象。 fixed 脱离文档流，相对于可视窗口做定位。（元素的位置相对于浏览器窗口是固定位置。） sticky 基于用户的滚动位置来定位。在 position:relative 与 pos…"}, {"id": "6903412753759731719", "title": "【BFC--块格式化上下文】看完这篇文章，你真的还没理解BFC吗？", "desc": "column-span 为 all 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。 块格式化上下文包含创建它的元素内部的所有内容. 块格式化上下文对浮动定位（参见 float）与清除浮动（参见 clear）都很重要。浮动…"}, {"id": "6844904199285637134", "title": "css实现圆形锯齿边效果", "desc": "话无多说，先看效果。 此处借用background-image: radial-gradient()实现锯齿效果，重点在于通过径向渐变radial-gradient去生成白色的圆缺。 radial-gradient支持分段设置每段的色值，每段色值后面跟着一个可选的停止位置，支持…"}, {"id": "6844903839691194381", "title": "使用这些 CSS 属性选择器来提高前端开发效率！", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 这样任何具有href属性的且没有更特定选择器的元素的文本颜色都会是红色的。属性选择器的特性与类相同。 注:更多关于笼匹配的CSS特异性，你可以阅读CSS特性:你应该知道的事情，或者如果你喜欢星球大战:CSS特性…"}, {"id": "6885533542156238855", "title": "CSS的继承性、层叠性、特殊性", "desc": "在css中某些样式是具有继承性的，那么什么是继承呢？官方解释，继承是一种规则，它允许样式不仅应用于特定的html标签元素，而且应用于其后代元素。 那么该颜色不仅仅应用在了div标签，还应用与div标签中的所有子元素(包括div中的文本和span包含的文本)文本。 给div设置b…"}, {"id": "6844903655338934279", "title": "网站性能优化实战（二）——深入浅出浏览器渲染机制", "desc": "本文是对前文：http://imweb.io/topic/5b6fd3c13cb5a02f33c013bd 相关知识的补充，文中的“前文”一词同此。 特以此文向《WebKit技术内幕》作者朱永盛前辈致敬。 自上次发布了《网站性能优化实战——从12.67s到1.06s的故事》一文…"}, {"id": "6844904035649077256", "title": "简述BEM, OOCSS，AMCSS，SMACSS，SUITCSS，ITCSS", "desc": "本文介绍的以下几种都是对CSS模块化的各种实现，你可能工作中使用不到，甚至部分有些被淘汰。但是希望你看到这些词的时候不会一脸懵逼！！！ AM是一种使用HTML 属性及其值而非样式元素的类的技术。这样，每个属性都可以有效地声明一个单独的命名空间来封装样式信息，从而使HTML和CS…"}, {"id": "6985542158019215396", "title": "《图解CSS》CSS3", "desc": "简介 继CSS2之后，CSS3增加了很多新的特性，虽然W3C仍在规范中，但是很多新的CSS3属性已经在很多现代浏览器中得到了支持。 CSS3边框 在CSS3中，可以创建圆角边框，添加边框阴影，设置边框"}, {"id": "6924550556723707917", "title": "css 世界学习总结 - 第三章 流、元素与基本尺寸", "desc": "| 静态布局 | Static Layout，传统Web设计，网页上的所有元素的尺寸一律使用px作为单位。不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。一般需要设置最小宽度 | 不能根据用户的屏幕尺寸做出不同的表现 | 传统PC网页 | | 流式布局 | …"}, {"id": "6844903830375628814", "title": "[译] 如何让你的 CSS Grid 布局有良好的可访问性", "desc": "CSS Grid 可以将元素放入有行和列的网格中，从而让创建二维布局成为可能。有了它，你可以自定义网格的任何形态，例如网格宽高、网格范围、或者网格之间的间隙。但是，CSS Grid 可能会有访问性不佳的问题，尤其是对于那些使用屏幕阅读器和仅使用键盘的用户。本篇教程将会帮助你避免…"}, {"id": "6949010745363431432", "title": "骨架屏动画", "desc": "转发https://juejin.cn/post/6844904186832748557前言在加载网络数据时，为了提升用户体验，通常会使用一个转圈圈的loading动画，或者使用Skeleton Sc"}, {"id": "6844903670522331150", "title": "一周学会小程序-比赛记分器", "desc": "为了方便使用，脱离App的限制，小程序版比赛记分器由此诞生。由于本人是新手，如有不对，请更正，欢迎在下方留言。iOS版比赛记分器 4.this指代 此时定义that变量保存this，因为在success函数中，this指代的不是上文的this了。 5.欢迎引导页：通过本地存储一…"}, {"id": "6891565156518756365", "title": "项目案例CSS分享：Flex布局&Css瀑布流", "desc": "CSS3 弹性盒子(Flexible Box 或 Flexbox)，是一种用于在页面上布置元素的布局模式，使得当页面布局必须适应不同的屏幕尺寸和不同的显示设备时，元素可预测地运行。对于许多应用程序，弹性盒子模型提供了对块模型的改进，因为它不使用浮动，flex容器的边缘也不会与其…"}, {"id": "6923979721273245710", "title": "display：none和visibility：hidden的区别，引发重排、重绘、合成阐述", "desc": "1、display：none隐藏完元素所占据的空间也会消失 。visibility：hidden隐藏完元素还是占据空间。 2、display：none没有继承性，visibility：hidden有继承性。给父元素设置visibility：hidden，其子元素也会继承该属性，…"}, {"id": "6844903757172457480", "title": "CSS动画属性关键帧keyframes全解析", "desc": "大概有多久没有更新专栏文章了。半年？下半年忙到起飞，或者毫不夸张的说是发射？仅有的一点个人时间，上半年贡献给了Python，现在差不多已忘掉了七七八八（一首《凉凉》送给自己），下半年贡献给了JavaScript，终于鼓起勇气系统的开始学习JS了（换台，梁静茹《勇气》走起）。本来…"}, {"id": "6980510860636585998", "title": "屏幕尺寸、像素、分辨率和 devicePixelRatio", "desc": "目录 引子 屏幕尺寸 像素 分辨率 devicePixelRatio 参考资料 引子 最开始写页面的时候，对页面里面的 px 还是蛮好奇的，电脑上的分辨率好像正好跟页面渲染的宽度值对应，但手机里面却不"}, {"id": "6844903559188709389", "title": "每周一个前端动画之一：UC浏览器球队展示动画的实现", "desc": "作为一个眼中有码的人，看见某个网页或者app的炫酷效果时，第一反应就是这怎么实现的。这个系列就是把自己见到的一些动画效果分析实现出来，本文分析实现的某些效果，仅仅作为一个思路分享，仅仅作为学习素材使用。闲话不说，这篇文章是前端动画系列的第一篇。 作为一个轻度伪球迷，经常会看些赛…"}, {"id": "6844903667305316360", "title": "页面渲染：过程分析", "desc": "1. HTML → DOM树 （解析html） DOM全称为文档对象模型Document Object Model，其中一个DOM节点对应一个标签，Dom树即表示了HTML的文档结构。转化过程如下图所示： 令牌化：浏览器把字符转化成W3C HTML5 标准指定的各种确切的令牌，…"}, {"id": "6844903814059802631", "title": "不会CSS布局可能是“物理”不好", "desc": "当下已经有很多工具或者是软件，在努力实现从设计稿到原型稿的转换。但是到目前我还没有看到，哪一家可以挺起胸膛说，我们这个可以 100% 的实现这个需求。 是什么阻止了这两个视觉上几乎一样的稿子之间的转换呢？在我看来，是因为它们之间的物理逻辑不一样。简单的说，要实现从设计稿到原型稿…"}, {"id": "6844903844489461774", "title": "13个帮你提高开发效率的现代CSS框架", "desc": "本文将向你介绍一系列顶级CSS框架。有些人可能听说过，也可能对有些人是全新的。但它们都提供了各种有用的先进功能，可以改善你的工作流程。开始吧！ 让我们先从一些专注于 CSS 的框架开始。你将找到所有类型的布局和UI元素来自己构建项目的基础。有些甚至可能包含一些 JavaScri…"}, {"id": "6844903566293860365", "title": "使用 CSS 获取用户密码", "desc": "新年工作第一天，在 github 上闲逛，发现了一个很有趣的项目，叫 CSS-Keylogging，这是一个演示如何用 css 去获取用户输入的密码的项目，这个项目与一两个月前的另外一个很火的项目 CrookedStyleSheets 类似，甚至于有可能 CSS-Keylogg…"}, {"id": "6905558081644527624", "title": "常用布局方式与盒模型补充", "desc": "padding, border, margin 都会影响元素空间的宽高. 为了使开发人员的布局不受默认设置干扰,一般清零浏览器自带的默认内外边距值. 盒子高度: 整个标签高度 | height: ; | 不设置的话会被内容撑开,设置后即固定. 内容可能跑出盒子 2.2 浮动流只…"}, {"id": "6844903811245424653", "title": "Vue 2.x折腾记 - (15) 捣鼓一个中规中矩loading组件", "desc": "说作为全局的页面loading ，但是自己想了想，还是选择画一个。 一开始想过用svg,canvas,最终还是选择了css3+js来实现这个效果。 除了常规的引入使用，还支持函数调用,挂载了一个$loading。 props的传递没有做增量合并(递归每个key赋值)，直接浅复制…"}, {"id": "6844904134508969997", "title": "CSS动画——柱形图", "desc": "这个月在写官网的时，遇到柱形图。经理又要求，为了提升用户体验，在设计稿合适的地方，加入恰当的动效。行，开搞。 嗯？这是什么，这动效，不是我想要的，这是什么。 在掘金上看到\"作者JowayYoung写的爱情信号满格，知识点：BFC+CSS变量遍历+CSS变量组合计算+滤镜色相旋转…"}, {"id": "6900407534679818253", "title": "viewport详解", "desc": "这次想聊聊移动开发相关的事。是的，你没有看错，一句话就可以开始你的移动前端开发。 你心里一定在想，什么话这么酷，能够瞬间带入到移动前端开发的世界。 但其实它一点也不新奇，不复杂。 没错，就是viewport特性，一个移动专属的Meta值，用于定义视口的各种行为。 该特性最先由A…"}, {"id": "6844903513391104013", "title": "border属性的多方位应用和实现自适应三角形", "desc": "border属性是在实际的应用中使用频率比较高的一个属性，除了作为边框使用，利用border属性的一些特征以及表现方式，可以在实现一些比较常见的效果（如等高布局，上下固定内容滚动布局和绘制CSS图标等），利用css3新增的属性值（如使用图片填充边框）可以实现一些更复杂的效果。 …"}, {"id": "6974229047769301000", "title": "css揭秘 - 用户体验（二）", "desc": "这是css揭秘系列文章的第九篇，本篇主要介绍使用css可以实现的用户体验。包括通过阴影来弱化背景、通过模糊来弱化背景、滚动提示以及交互式的图片对比控件。"}, {"id": "6844903923539509262", "title": "rem 产生的小数像素问题", "desc": "由于日常需求以无线居多，所以可以在业务中做一些尝试，如 rem，刚接触这个特性的时候，曾经一度爱不释手，仿佛在无线开发的坎坷路上寻找到一条捷径。然而随着使用范围的扩大，慢慢的发现了一些使用 rem 带来的问题。 关于 rem 这个单位的介绍，在此就不赘述，有兴趣的同学可以阅读一…"}, {"id": "6929028355639476238", "title": "前端增长（css）", "desc": "首先，需要把元素的宽度、高度设为0。然后设置边框样式。 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。 bfc是边距重叠的解决方案。 CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要…"}, {"id": "6844903668626489357", "title": "VUE实例：使用 CSS Filter 处理图片", "desc": "CSS 的 filter 函数，可以给图像设置高斯模糊，亮度，调整图像的对比度等的效果，利用 Vue.js 的双向绑定，可以十分方便的实现一个利用 filter 处理图片的应用。 然后将这些值使用 v-model 指令绑定到UI控件上，这里我用的是 ant-design-vue…"}, {"id": "6844903602360680461", "title": "前端干货系列----入门webpack这一篇文章就够了", "desc": "博主学习webpack，并不是因为项目需要，而是因为webpack现在比较流行，所以想学习一下，顺便看看对现在的项目是否有用。最后经过思考感觉对当前项目的作用并不大，不过总结了一下webpack适合使用的几个场景 1.前后端分离的项目，像vue,angular,react都采用…"}, {"id": "6844903944242593806", "title": "纯css写一个大太阳的天气图标", "desc": "用两个嵌套的div容器，父容器来控制图标显示的位置，子容器用来写太阳的一条光影矩形的样式。"}, {"id": "6844903875007217678", "title": "CSS进阶（19）—— CSS中的文本处理（下）", "desc": "text-indent指对文本首行的缩进控制，设计初衷就是为了实现段落文本的首行缩进2em的效果。但是这种缩进对内容的要求比较高，如果段落掺杂英文单词，长数字或图片等内容，就会导致段落层次不齐的感觉，因此text-index的首行缩进已经逐渐坐实冷板凳了。虽然text-inde…"}, {"id": "6844904019001884685", "title": "这一次终于看懂了BFC", "desc": "好像有点标题党了🤣。 没关系，最近复习，也是终于搞懂了以前一知半解的东西。 在这里做个复盘。 在我最早学习BFC时，看到过这样一句话一些问题是BFC触发的，同样也是用BFC来解决。 当时挺懵的，先记住这句，往下看。 我们常说的文档流其实分为定位流、浮动流和普通流三种。而普通流…"}, {"id": "6844903727204139022", "title": "css实现两栏固定中间自适应", "desc": "此方法的原理说将左右两侧进行定位，让其脱离文档流。 中心区域自然流动到它们下面，再为其设置margin值 此方法最常见，三者相互关联，最稳健。 首先需要将中间部分放再最前面，外面用一层容器包裹。外层容器让其占满整个屏幕100%， 左中右三者都float: left。 将cent…"}, {"id": "6844903865851068430", "title": "relative 和 absolute 元素的百分比定位", "desc": "relative/absolute 元素都支持 top/right/bottom/left 属性定位。 relative 元素是相对自身定位的；absolute 元素是相对于最近的 position 属性值不是 static（也就是 fixed, absolute, relat…"}, {"id": "6914489741979156487", "title": "在vue-cli中使用css-loader实现css module", "desc": "在使用上，vue中用scoped属性实现样式的私有化，利用深度作用选择器/deep来实现样式的去私有化。 不得不说，在使用上还是vue比较方便。 如果硬要在vue中使用css-loader实现css module的这套解决方案呢？这里以vue-clie 3.x为例。 无论在vu…"}, {"id": "6973294194827722782", "title": "css揭秘 - 字体排印（二）", "desc": "这是css揭秘系列文章的第七篇，本篇主要介绍使用css可以实现的字体排印。包括华丽的&符号、自定义下划线以及现实中的文字效果。"}, {"id": "6919484868271767560", "title": "CSS：动画", "desc": "动画的原理 定义 由许多静止的画面（帧），以一定的速度连续播放时，肉眼因视觉残象产生错觉，而误以为是活动的画面。 概念 帧：每个静止的画面都叫做帧 播放速度：美妙24帧（影视）或每秒30帧（游戏） 例"}, {"id": "6900020273388224519", "title": "CSS 知识总结", "desc": "浏览器渲染原理构建对象模型渲染树构建、布局及绘制浏览器渲染过程总结参考来源渲染性能渲染树构建、布局及绘制坚持仅合成器的属性和管理层计数CSSTriggersCSS动画的两种做法（transition和"}, {"id": "6844903882204659720", "title": "不容错过的CSS变量", "desc": "当我第一次听说CSS变量时，我是抱着怀疑态度的。scss、sass、less和stylus这些CSS预处理器不是都有变量机制吗? 为什么还要使用它？过了几年，我发现越来越多的人开始讨论和使用它，我觉得我是错过了什么…… 虽然花费了一点功夫，但在使用后，我确实被它吸引住了。这篇文…"}, {"id": "6911307390663000072", "title": "grid布局制作在线简历", "desc": "在线预览地址http://ryansu.gitee.io/cv/jsbin链接grid布局的思路设置合适的html语义化标签比如headerasidemainfooterfigure再对容器画格子，比"}, {"id": "6844903542126280718", "title": "简单的SVG线条动画", "desc": "[TOC]Demo项目下载看到网页中那种有如写字般的动画,觉得挺好玩的,就找了下制作方法,也比较简单,在此记录一下;先上几张图看看:用到的属性stroke定义边框颜色值;stroke-width定义描"}, {"id": "6940159717708660750", "title": "记录贴-移动端菜单栏效果", "desc": "最后是JS，在html中我给三个菜单Item都分别添加自定义属性data-index和data-attr,目的无外乎是为了在js操作更加便捷。 选中时：判断event的target,如果target上data-attr==\"menuLink\",表示当前节点currentNode…"}, {"id": "6920088659068878862", "title": "重温css(02) CSS3 选择器", "desc": "通用选择器 E~F --- E元素被忽略,其后所有 F 元素被安排。 | E :target | 选择匹配E的所有元素，并且匹配元素被相关URL指向。 |"}, {"id": "6844903748796432392", "title": "Css in Js 一次实践", "desc": "最终采用grid实现需求。实现的时候遇到一个问题，如果css和js分开写，css只能是定值，没有灵活性。所以考虑采用css in js的形式。关于css in js相关的概念介绍可以参考阮一峰老师的文章：css in js 介绍。 根据文档先写一个简单的demo。 可以看到，它…"}, {"id": "6850037282892677128", "title": "CSS伪类：CSS3鼠标滑过按钮动画第二节", "desc": "前面两章主要是从背景着手，而本章主要是围绕边框动画做效果。并且，本章节（按钮组:有趣的CSS按钮动画，带你进入CSS世界）也就到此结束了，本章结尾会对前3小节进行一定的总结。 看过前两小节的小伙伴，可能不需要看下面的源码，就知道如何实现了，大家可以先自己动手试试，然后再回头来看…"}, {"id": "6844903909782192136", "title": "【愣锤笔记】温故而知新、嗯！来花几分钟时间极速重温less高级核心特性", "desc": "大家可以回想一下，上次学习less/sass是什么时候了？平时是不是除了嵌套、变量貌似也没用其他啥了？知识久了，部分内容也就遗忘了。但是学会的东西再捡起来是很快的！ 是时候重新 坚挺 一下了！什么，坚挺？呸，什么玩意，重来。 好，基本的安装就不提了，大家在在各种vue、reac…"}, {"id": "6844903933387751437", "title": "Css3.0-你需要知道的动画知识", "desc": "transform 可以实现元素的形状，角度，位置等的变化。 skew(x, y) 接受两个值，第一个参数对应 X 轴，第二个参数对应 Y 轴。如果第二个参数未提供，则默认值是 0 任何一个元素都有一个中心点，默认情况下，其中心点是居于元素 X 轴和 Y 轴的 50% 处。 当…"}, {"id": "6844903838143479815", "title": "CSS揭秘实战技巧 - 结构与布局[六] ", "desc": "auto为默认值，表示自适应单元格中的内容，此时设置宽度无效。 fixed表示均等分割，即宽度是等分均分的，当然，我们也可以设置宽度。 此时，我们看到部分单元格文本较多，如何隐藏呢？这时，我们可以用text-overflow:ellipsis , 该属性要同时配合：overfl…"}, {"id": "6926134642588254222", "title": "flex布局", "desc": "Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 1. flex-direction 项目的排列方向 2. flex-wrap …"}, {"id": "6844903555338338312", "title": "基于Vue.js的简单的svg进度条", "desc": "svg-progress-bar发现bug或者有什么不足望指点,感觉不错点个star吧。"}, {"id": "6844903781570707469", "title": "CSS 技巧篇(六)：display设置元素为行内元素时，元素之间存在间隙问题", "desc": "之所以存在间隙是由于元素标签之间留有空白字符造成的。 消除元素标签之间的空白字符，把标签连在一起。"}, {"id": "6844903825619288071", "title": "css揭秘实战技巧- 背景与边框  [一]", "desc": "这段时间，一直觉得css这块感觉每次写代码都是常用的那些基本属性，觉得始终没有对css有一个更深层次的掌握，所以，最近开始学习css相关进阶知识，首先第一关就是攻克 “css揭秘” 这本经典书籍，所以在阅读过程中，有一些总结想分享给大家，希望大家一起进步。 如果我们想实现两层边…"}, {"id": "6971049292525993997", "title": "flex布局", "desc": "什么是flex布局 基本概念 flex容器的属性 1. flex-direction 2. flex-wrap 3. flex-flow 4. justify-content 5. align-ite"}, {"id": "6844903862394945549", "title": "CSS3 pointer-events 属性小结", "desc": "业务中遇到一个需求就是点击提交按钮的时候，为了防止用户一直点击按钮，发送请求，当请求未返回结果之前对按钮进行禁用。因为按钮是用 <a> 标签写的，所以单纯的 disabled 不可取。 就这样遇到了 pointer-events 这个 CSS3 属性。其作用是指定在什么情况下 …"}, {"id": "6971032902578470948", "title": "记录一些Less与Sass的笔记", "desc": "第一缕阳光，挣脱了雾的束缚，含笑而来。晨的歌声在露珠消失的瞬间满足地曳然停止，我的心却已经在晨的洗涤中变得更加明澈，带着纯净的清晨享受，我也安然地起步着这一天崭新！"}, {"id": "6868194531750182926", "title": "CSS的阳光大道（持续更新）", "desc": "&#x3C;length>-----使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。 top------------使元素及其后代元素的顶部与整行的顶部对齐。 bottom---------使元素及其后代元素的底部与整行的底部对齐。"}, {"id": "6861821239170695175", "title": "[深入理解]css选择器优先级", "desc": "这是选择器标准里的定义。大致的意思是： 在实现上面优先级的过程是取一个尽量大的值N，对ABC做乘法加法：S = A * N^2 + B * N^1 + C。 历史上IE有这么一个bug，IE为了节省内存把N取值为255，那么就会导致256个class相当于一个id。但是现代的浏…"}, {"id": "6866806391844110349", "title": "CSS真是太博大精深了", "desc": "1. 两种盒模型 W3C标准盒子模型：宽度 = 内容的宽度（content），padding、border、margin都不算在里面。 Margin(外边距) - 清除边框外的区域，外边距是透明的。 Border(边框) - 围绕在内边距和内容外的边框。 Padding(内边距…"}, {"id": "6985119260989194247", "title": "2D变形", "desc": "旋转变形 将tranform属性的值设置为rotate(),即可实现旋转变形 transfrom:rotate(45deg) 若角度为正，则顺时针方向旋转，否则逆时针方向旋转。 transform-o"}, {"id": "6907890510388527111", "title": "关于display你想知道的一切", "desc": "排版有误,已删除. 文章移至:[CSSdisplay必知必会](https://juejin.cn/post/6907899935992545293)"}, {"id": "6844903505539366919", "title": "Vue代码模块定位插件vue-component-finder介绍", "desc": "vue-component-finder是一款用于Vue项目的代码模块预览与快速定位的chrome插件，对于文件目录繁多的vue项目，可以使用该插件快速查看组件对应的代码模块，以及快速打开IDE修改组件代码。 4.运行项目开发构建npm run dev，打开页面，鼠标移动到组件…"}, {"id": "6844903827376717832", "title": "css经典布局系列二——等分等高布局", "desc": "此方法不会存在 IE 6 中3像素的 BUG，但 .left 不可选择， 需要设置 .left {position: relative} 来提高层级。 注意此方法增加了不必要的 HTML 文本结构。 相当于right也开启了bfc，就不会被left的浮动影响到。 设置 over…"}, {"id": "6844903745768128520", "title": "CSS变量在前端复杂布局和交互上的探索", "desc": "本文将和各位老铁一起探索如何使用CSS变量来降低复杂布局和交互的代码编写难度，并使其更易于维护。这里即将分享两篇该系列的文章，本篇是分享css变量的探索应用的各种用例。(ps:看懂和理解本文需要有一定的前端基础） 有点意思吧，接下来，我们就一起探索CSS变量在复杂布局和交互的一…"}, {"id": "6886747409183932430", "title": "精通css3 flex弹性布局", "desc": "精通flex弹性布局在远古时代，兼容ie6的年代使用float、position+display传统方式布局，经常会遇到一些奇奇怪怪的布局问题，所以在css3中的flex布局就营运而生，也就是弹性布局"}, {"id": "6970954122006822926", "title": "Flex布局", "desc": "1. flex布局 Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性 设为 Flex 布局以后，子元素的float、clear和vertical-ali"}, {"id": "6865614784214073352", "title": "CSS之flex与grid布局", "desc": "日常工作中，前端常常会与布局打交道，position,float,虽然有其特色，但是也容易出现问题；这里主要通俗的介绍两类功能强大的布局flex与grid及一些简单的应用实例；1、flex布局这里参考"}, {"id": "6844903946004381710", "title": "用CSS全新属性实现特殊的图片显示效果", "desc": "使用一个或多个图像相关的CSS属性（background-blend-mode, mix-blend-mode, or filter）可以实现许多特殊的图片显示效果。 详细代码及英文原文请访问Bennett Feely的主页。 详细代码及英文原文请访问Bennett Feely…"}, {"id": "6844904181606662151", "title": "停止使用像素思维去思考", "desc": "rem 的官方定义『The font size of the root element.』，可以简称root em，即以根节点的字体大小作为基准值进行长度计算。一般认为网页中的根节点是 html 元素，所以采用的方式也是通过设置 html 元素的 font-size 来做屏幕适…"}, {"id": "6980517420020531213", "title": "04-前端技术_CSS与CSS3美化页面", "desc": "二，CSS与CSS3美化页面 1，CSS简介 1.1 什么是CSS? 1.2 样式层叠次序 2，CSS基础语法 2.1 介绍 ​ ​ 2.2 注释 3，CSS使用方式 3.1 如何插入样式表 3.2 "}, {"id": "6909699690615275534", "title": "Css样式--文本样式详解", "desc": "1.实用负值：设置负值时要当心，如果对一个段落设置了负值，那么首行的某些文本可能会超出浏览器窗口的左边界。为了避免出现这种显示问题，建议针对负缩进再设置一个外边距或一些内边距。 3.字间隔和字母间距： word-spacing 属性可以改变字（单词）之间的标准间隔。其默认值 n…"}, {"id": "6844903640939888648", "title": "关于React项目中动画不生效的一些思考", "desc": "我最近做的React项目中需要做这样的一个组件来展示数据。 根据不同的数值，这个蓝色的条显示的宽度不同。 这个其实很简单，用正常的react的编程思维，我只要根据数据动态的计算它的宽度，循环生成相应的节点就行了。 这样就实现如上图所示的功能显示，但是现在又有个需求，就是需要那个…"}, {"id": "6844903518533320717", "title": "anime.js 实战：使用 SVG 实现一个 Twitter 赞的动画效果", "desc": "anime.js 实战：使用 SVG 实现一个 Twitter 赞的动画效果"}, {"id": "6844903620123574285", "title": "开始CSS模块 | CSS-Tricks", "desc": "这里不止一种方法来让CSS模块与JavaScript模板、CSS文件或者构建步骤运行起来。这篇文章作为CSS模块系列文章的一部分，我们学习一种方法。本文的目的就是开始一个CSS模块项目并且运行起来。 Part 1: 什么是CSS模块以及你为什么需要它? Part 2: 如何开始…"}, {"id": "6844903640746950663", "title": "[译] 由 CSS 网格系统的创造者们所讲述的故事", "desc": "一个来自编辑者的小提醒： 我们想要感谢 Microsoft Edge 团队，因为他们分享了与许多对 CSS 网格系统的发展有杰出贡献的专家的采访手稿。在编辑这份关于 CSS 网格系统历史的文章中，这些手稿十分珍贵。同时，你也可以在 Channel 9上观看他们制作的关于这些采访…"}, {"id": "6844903813237702664", "title": "摩拜前端周刊第3期", "desc": "Ladiesand乡亲们，摩拜前端周刊起航啦～摩拜前端团队会收集每周前端优秀文章，每周五发布至掘金平台，欢迎关注我们～Top榜跨端开发框架深度横评地址：https://juejin.im/post/6"}, {"id": "6844903594248896525", "title": "为何 Canvas 内元素动画总是在颤抖？", "desc": "我的场景是一个匀速直线运动的小姐姐。 在这个 Demo 中，小姐姐是按照 x 轴 10px/s，y 轴 30 px/s 进行移动的，不过她的移动是明显伴随着抖动的。 我索性把小姐姐的移动速度调快，调成 100px/s，发现，还是会抖动，以为高高兴兴能解决了这个问题，发现还是没那…"}, {"id": "6847902218105045005", "title": "前端学习笔记（二）CSS入门", "desc": "在学完HTML的基础内容之后，开始接触到CSS，发现bracket确实非常方便，快捷键ctrl+e即可打开光标所在位置的标签的css内容，非常方便进行修改。以下是CSS的基础知识笔记（还没有学到盒模型）： 1.CSS指层叠样式表。样式通常储存在样式表中，定义如何显示HTML元素…"}, {"id": "6912843204287004685", "title": "【CSS】【资料】常用命名表", "desc": "一、布局常用名称外套：wrap/wrapper站点：site导航：nav主题：main布局：layout侧栏：sidebar容器：container内容块：content/container栏：col"}, {"id": "6907085223532593165", "title": "一篇文章带你了解CSS基本用法和选择器知识", "desc": "前言相信做过网页的对Css都不是很陌生，它可以帮助我们重铸网页中很多绚丽的特效，尤其是现在Css已经发展3.0版本，很多功能更是丰富多彩，让我们的开发时间不仅大大缩短，而且还可以轻松做出许多华丽的特效"}, {"id": "6844903688406843406", "title": "css3中的unicode-bidi与direction使用", "desc": "古时候文人写毛笔字也是从上至下,从右往左的顺序写的.至于为什么会这样,大多数人的解释就是古人写字要悬肘举腕,刚写出来的字墨水并没有干,因此自上而下,从右往左不会触碰到墨水,影响笔迹.暂且就这么认为吧,毕竟很难考究了. 目前国际上有部分语言是右->左,比如希伯莱语,阿拉伯语,伊朗…"}, {"id": "6844903858502631437", "title": "【前端帮帮忙】第8期 关于BFC，你需要了解的", "desc": "要明白BFC是什么，我们要先来了解几个相关的概念。 当对一个文档进行布局(lay out)的时候，浏览器的渲染引擎会根据标准之一的CSS基础盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。CSS决定这些盒子的大小、位置和以及属性（例…"}, {"id": "6844903928488787976", "title": "CSS @support 实现渐进式网页设计", "desc": "特性查询赋予了我们使用CSS检测浏览器是否支持某个css特性的能力。我们可以使用该功能在浏览器支持最新的CSS特性时，使用新的语法来编写我们的样式，同时对于不支持的浏览器进行优雅降级。 CSS的设计本身就是支持优雅降级的。对于浏览器不支持的CSS语法，在浏览器解析时会被忽略。因…"}, {"id": "6844903902765285389", "title": "CSS :not伪类可能错误的认识", "desc": "Repost! 我鑫大奏是牛逼。"}, {"id": "6844903629653016590", "title": "W3C近期要闻：W3C重点报告发布，综述2018年发展路线图", "desc": "这份报告整合了W3C近期工作亮点，综述了W3C对现有工作的优化、改进、创新、孵化、研究，以及2018年的发展路线图。"}, {"id": "6951655167213338632", "title": "前端内练基础-什么是BFC", "desc": "前言：在前端的基础中，CSS的BFC是一个重要的概念，也是很多大厂考察前端基础比问的一个问题，很多时候我们都是知道这个概念，但是具体是什么作用，下面请大家耐着性子看完这篇文章相信会有一些收获的。在开始"}, {"id": "6844903608530501646", "title": "CSS网格与Flexbox", "desc": "几天前，我阅读了一篇关于CSS网格系统的文章。但作为开发人员，你真的不知道在你真正尝试之前有什么用处。所以让我们来尝试一下。我将创建两个基本设计。一个使用Flexbox，另一个使用网格系统。"}, {"id": "6844903495800520717", "title": " CSS Scroll Indicator —— 纯CSS 滚动指示器", "desc": "前段时间拜读阮老师的 《ECMAScript 6 入门》 ，看到官网上每个章节的页面都有一个类似进度条的东西，出于好奇，上网查了一下，发现这个东西叫Scroll Indicator. Scroll Indicator：滚动指示器。通俗来说，就是当前可视区域距离页面顶部的占比，效…"}, {"id": "6982174193454415902", "title": "CSS常见问题", "desc": "如何清除图片下方出现几像素的空白间隙？ 如何让文本垂直对齐文本输入框？ 如何让单行文本在容器内垂直居中？ 如何让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果？ 为什么Sta"}, {"id": "6901687095916986376", "title": "CSS3 —— background-size总结及兼容解决", "desc": "background-size 属性是规定了背景图像的尺寸，是 css3的属性 。 一张图看懂咯。 IE9+、Firefox 4+、Opera、Chrome 以及 Safari 7+ 支持 background-size 属性。 低版本安卓手机，官方说4.3以下的不支持，但是测…"}, {"id": "6863031374115733518", "title": "玩转 CSS 变量", "desc": "如果当年的 CSS 预处理器变量对于初入前端的我来说是开启了新世界的大门，那么 CSS 变量对于我来说无疑就是晴天霹雳。其功能不但可以优雅的处理之前 js 不好处理或不适合的业务需求。更在创造力无穷的前端开发者手中大放异彩。 在前端的领域中，标准的实现总是比社区的约定要慢的多，…"}, {"id": "6844904148324843534", "title": "你真的理解 flex 属性吗，最详细 flex 属性计算方法就在这", "desc": "最近想更改一下博客首页的布局样式，添加几个侧栏，就去看了看常见的布局方式，什么「双飞翼布局」「圣杯布局」也就两侧固定中间自适应的三栏布局方案。不过我之前一直都是用的 Flex 布局，Flex 布局是不是也可以做到呢，网上搜索一番，代码如下： Google 搜索出来的结果也都是说…"}, {"id": "6922406879314329608", "title": "CSS实用技巧", "desc": "张鑫旭的《CSS世界》这本书，强烈推荐前端er仔细阅读下，里面详细说明了许多不怎么被注意的CSS特性，对前端进阶很有帮助。 本文简要列举书中前四章比较实用的知识点，书中干货很多，值得一读。 利用元素的包裹性，元素的尺寸由内部元素决定，且永远小于容器的宽度。 具有包裹性的元素：i…"}, {"id": "6844904118146842632", "title": "一次弄懂css的BFC", "desc": "BFC在css的学习中是重要的但不易理解的概念，BFC也牵扯了很多其他问题，如浮动、定位、盒模型等，因此弄懂BFC是很有必要的。本文对BFC进行总结，希望对你有所帮助。 内部的Box会在垂直方向一个接着一个地放置。 Box垂直方向上的距离由margin决定。属于同一个BFC的两…"}, {"id": "6981465555609845773", "title": "只需三步！写出实用又好看的自定义checkbox", "desc": "前言： 最近在做登录页面时，产品希望单选框checkbox的颜色能能与登录页的主题色相呼应，以达到更加美观和协调的效果。对于这个需求，我的第一反应是当下传统的自定义checkbox实现方案，即伪元素模"}, {"id": "6844903824583294990", "title": "一篇文章告诉你 1px 等于多少 cm", "desc": "对各种单位的理解一直比较模糊，今据搜索信息做点计算、推断，如有错误请多指教。"}, {"id": "6994001741721108517", "title": "CSS 定位", "desc": "定位 1.1为什么需要定位 1.浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。 2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。 1."}, {"id": "7001869961433972744", "title": "背景属性", "desc": "1.opacity：设置透明 2.background-image:背景图 3.background-repeat:背景图重复设置 4.background-position:方位值，数值 5.b"}, {"id": "6844903656718860296", "title": "浏览器缓存你了解么?", "desc": "1. 为什么浏览器需要缓存 2. 缓存规则： 新鲜度和校验值两个维度来规定浏览器是否可以直接使用缓存中的副本，还是需要去源服务器获取更新的版本。 新鲜度（过期机制）：也就是缓存副本有效期。一个缓存副本必须满足以下条件，满足一个条件即可，浏览器会认为它是有效的，足够新的： 它可以…"}, {"id": "6844903695415525383", "title": "移动端h5模拟长按事件", "desc": "最近接了个需求，要求长按某个标签显示删除一个悬浮的删除按钮。这个需求其实在app上很常见，但是在移动端h5中，我们没有长按的事件，所以就需要自己模拟这个事件了。 ps: 为了做个gif还下了app，还得通过邮件发到电脑上，脑瓜疼。。 在touchend中清除这个定时器，这样如果…"}, {"id": "6908684963731177485", "title": "flex弹性盒模型和兼容", "desc": "布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。 在2009年，就提出了弹性盒模型的概念，并且具有简便，完整，响应式的特点。由于响应式的特点突出，它经常被用手机…"}, {"id": "6914528950186147853", "title": "[前端项目创新]自己写了个loader解决引入CSS导致的样式冲突", "desc": "自己在做数个项目时，经常会遇到CSS冲突的问题。主要表现在： 项目一开始就全局引入CSS库。然后自己写样式时，需要考虑到与第三方CSS库同名的类的样式会受到污染，因此要针对被污染的属性进行重写覆盖。有时还会因为该类的权重--Specificity不高而导致覆盖不了,要强行!im…"}, {"id": "6844903687572160519", "title": "小程序开发总结一：mpvue框架及与小程序原生的混搭开发", "desc": "参考web中一个项目可以有多个spa，我们也可以一个项目里包含多个小程序，多个小程序之间可以共用组件和公用页面，在某些场景下可以节省很多开发时间和维护时间。 从官方文档上生命周期的图示上可以看到created是在onLaunch之前，也就是说每个页面的created 出发时机都…"}, {"id": "6930890256019357704", "title": "【译】深度解析CSS是如何工作的", "desc": "本文已同步归纳在 Github。 在你为网站中的某个 DOM 元素编写 CSS 样式之前，浏览器会给这个 DOM 元素添加一个默认的样式。 在我刚开始学习 CSS 的时候，我还以为所有的 CSS 默认样式都来自于浏览器自身的 “User-Agent Stylesheet” 文件…"}, {"id": "6844904050371084302", "title": "[译]这可能是最好用的 CSS 技巧", "desc": "假设你在创建一个搜索表单。用户输入内容，然后点击搜索按钮进行搜索。 需要注意的是，搜索按钮只在输入框中输入内容后，才能点击。我们总不能允许用户使用空字符串搜索吧？ 我们可以使用下面的代码实现上述功能。 在我看来，不使用 JavaScript 的情况下，使用 CSS :not(:…"}, {"id": "6844903512732598280", "title": "BEM实战之扒一扒淘票票页面", "desc": "BEM是一套CSS国际命名规范，是一个非常有用的功能强大且简单的命名约定，它能使前端代码更易读，易于理解易于扩展。BEM是块（block）、元素（element）、修饰符（modifier）的缩写。 这个搜索框就可以看作一个块Block，这个块里由两个子节点，一个是输入区域in…"}, {"id": "6987724302212661278", "title": "「HTML+CSS」--自定义加载动画【044】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为48px 背景色：白色 效果图如下 步骤2 span标签圆角化 效果图如下 步骤3 使用box-"}, {"id": "6919718408166572039", "title": "flex布局属性详解之项目属性篇", "desc": "采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。 上篇介绍设置在容器上的属性，本篇介绍设置在项目上的。 flex-grow --定义项目的放大比例，默认…"}, {"id": "6919718026291986445", "title": "flex布局属性详解之容器属性篇", "desc": "Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。 关于fl…"}, {"id": "6844903588066492430", "title": "css变量初体验（有大图）", "desc": "css变量(慎重，有大图)hello2dj(dj_amazing@sina.com)Apr06,2018bookmarkbookmarkcssshareshareشاركعلىWeiboشاركعلى"}, {"id": "6942730818238300174", "title": "CSS3（一）", "desc": "nth-of-type 对父元素里面指定子元素进行排序选择。先去匹配E，然后再根据E找到第n个孩子"}, {"id": "6844903733516730382", "title": "第8章 CSS3中的变形与动画（上）", "desc": "旋转rotate()函数通过指定的角度参数使元素相对原点进行旋转。它主要在二维空间内进行操作，设置一个角度值，用来指定旋转的幅度。如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转。如下图所示： 扭曲skew()函数能够让元素倾斜显示。它…"}, {"id": "6844903520013910030", "title": "写一个可拓展的360度产品旋转插件", "desc": "做过电商的朋友应该比较熟悉，当我们在介绍一个实体产品的时候必不可少的会有这个产品的图片，这是用户对这个产品的最直观了解，从以前的包括现在的电商网站来看，产品详情页里面产品的图片一般都是占一大部分，而且一般的排版方式都是图片从上往下排来展示产品的各个角度的图片或者使用轮播图（参照…"}, {"id": "6844903726679851016", "title": "line-height和vertical-align采坑记", "desc": "由于在工作过程中经常遇到行内元素错位的问题，所以决定研究一下line-height和vertical-align，研究完后发现的确还有一些比较细节性的东西自己好不知道，这次打算和大家分享一下我自己的一些收获。 他们的语法和规范可点击一下链接，这里就不多说了。 w3c规范 MDN…"}, {"id": "6844903860578811917", "title": "用CSS Grid Shepherd 技术对数据进行排序", "desc": "牧羊人很擅长照顾他们的羊群，为牧群带来秩序和结构。即使有几百只毛茸茸的动物，牧羊人仍然会在一天结束时将它们悉数带回农场。 而对于程序员来说，当我们在处理数据时，通常不知道这些数据是否已经被正确的过滤或者排序。尤其是当你想要在页面上按照稍微复杂一点的规则显示数据时，这就比较痛苦了…"}, {"id": "6844903869483319309", "title": "实用的 Web 布局技巧：Flex 主轴上的自动外边距", "desc": "上图中需要实现在水平方向上子元素之间、子元素和父容器边框之间的间距要相等。 实现的方法有很多，我们这里要讨论的是：如何简洁地使用 Flex 布局来实现？我这里采用的方法是：使用自动的外边距在主轴上对齐。 这很好理解：自动外边距将平分全部的剩余空间。下面就来尝试下这个方案吧，代码…"}, {"id": "6844903720216428558", "title": "CSS和网络性能", "desc": "CSS对于呈现页面至关重要 - 在找到、下载和解析所有CSS之前，浏览器不会开始呈现 - 因此我们必须尽可能快地将其放到用户的设备上。关键路径上的任何延迟都会影响我们的“开始渲染”，并让用户看到空白屏幕。 所以要注意的一个好的经验法则是，页面只会像最慢的样式表一样快速地呈现。 …"}, {"id": "6844903556714102798", "title": "【前端Talkking】CSS系列-css3之box-shadow介绍", "desc": "在CSS3中，可以使用box-shadow属性来创建阴影效果来给二维平面增加深度效果，这个属性在前端开发中使用的非常多，例如segmentfault的首页就是使用了box-shadow属性来增加深度效果，今天我们就一起来看看这个属性。 其中，+在正则表达式中表示一次或者多次的意…"}, {"id": "6916806469224497166", "title": "浏览器渲染与css动画", "desc": "从 DOM 树的根节点开始遍历每个可见节点。 对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们。 将每个节点（包括内容和样式）组建成渲染树。 某些节点不需要渲染，如meta、script，会被忽略。 某些节点通过css隐藏也会被忽略，如使用了display: non…"}, {"id": "6940983575114153997", "title": "项目中CSS问题总结", "desc": "简单来说就是将对象呈递为内联对象，但bai是对象的内容作为块对象呈递。旁边的内联对象会被呈递在同一行内，允许空格。 定义为flex布局元素的子元素，自动获得了flex-shrink的属性，这个属性是什么意思呢？就是告诉子元素当父元素宽度不够用时，自己调整自己所占的宽度比，这个f…"}, {"id": "6844903637051768846", "title": "前端调试：记Iscroll4 疑难杂症之z-index失效", "desc": "用了一个很大的词“前端调试”，事情是这样的，这两天一直在解决一个bug，我们用iscroll做了一个下拉刷新的产品列表页面，总会出现页面渲染错乱的问题，只要用js动态修改html或者在浏览器开发者工具中修改css、html就会恢复正常。 本来想分享一下iscroll的问题，避免…"}, {"id": "6844903937171013640", "title": "CSS的一些常见样式(二)——背景，inline block，行高，两种盒模型及元素不可见", "desc": "一，背景(background)background的常用样式有：1.background-color：设置背景颜色；2.background-image：添加背景图片；3.background-po"}, {"id": "6904920692396195853", "title": "生动理解 CSS 中的 box-shadow", "desc": "影子在现实生活中可以是一个物体的副本，在 CSS 中也是这样的，相当于复制了那个元素（并不是真正的元素，对页面布局没有任何影响），可以从下面的代码中看出来。 这个时候实际上已经生成了一个宽度 100px，高度 100px 蓝色的正方体，现在我们通过给它加一些偏移量让其显示出来。…"}, {"id": "6844903634841370637", "title": "「英」在组件化浪潮中重新思考CSS", "desc": "这里还有一篇从思维方式，到项目经验，到和网友斗嘴等各个方面介绍「原子化CSS」的网页，强烈推荐大家看一下。虽然是英文但是，我相信不懂英文的人也能看懂。"}, {"id": "6904276786382077965", "title": "CSS-背景属性", "desc": "普通类需要给标签设置对应的class属性值，才能选中标签，类选择器后面添加的属性，会立即加载到浏览器之上。 伪类不需要给标签添加任何属性，伪类名都是语法提前规定好的，书写时伪类必须搭配其它选择器使用，伪类选择器后面添加的样式不一定立即加载到浏览器之上，只有用户触发了对应的行为，…"}, {"id": "6904187749977292808", "title": "前端学习-CSS核心样式篇", "desc": "作用:设置文字是否加粗显示。 属性名:font-weight，属于 font 属性的一个单一属性。 属性值有两种方式:单词类型、数字类型。 100-900 之间的整百数字。 数字越大，文字显示越粗。 其中 400 等价于 normal，700 等价于 bold。 作用:设置文字…"}, {"id": "6844903874461958152", "title": "CSS进阶（15）—— CSS世界的层叠规则（上）", "desc": "既然都是三维世界的层叠关系，那我们以自己的世界为例，来谈谈05年春晚的一个节目——千手观音。 千手观音这个节目很好的展现了三维世界的层叠关系与所展现的“视觉效果”。以图片平面为xy平面，视觉上呈现了排在第一个的人的完整图像，已第一个人为准，排在他后面的人，构成了三维世界的z轴，…"}, {"id": "6909723369139077133", "title": "CSS必知|重点属性display|实践技巧|温故知新", "desc": "学海无涯，不要沉浸在知识的海洋里，迷失自己。要知道自己想要什么，抓住重点，不忘初心。这个世界上百分之20的人，掌握着百分之80的财富。接下来一系列教程，就带领大家抓住重点，一起做那百分之20的人。往期"}, {"id": "6882555690934599687", "title": "CSS布局--超详解版", "desc": "答：item给定width以后，页面拉小时，控制item变瘦的那个小的更夸张。"}, {"id": "6972898336756105252", "title": "前端CSS练习：3d动画（6面旋转展示）", "desc": "使用transform的rotate和translate、transform-style、animation实现一个6面旋转展示的效果"}, {"id": "6844903925657649159", "title": "前端比较实用的CSS", "desc": "10. input,宽改变border,并且聚焦除掉橙色的边框 目前就想到这么多，后期如果有遇到新的，会继续更新。。。。。。。。。。"}, {"id": "6844903767448485896", "title": "理解CSS-BFC概念", "desc": "BFC 已经是一个耳听熟闻的词语了，但是我对于BFC的概念以及应用场景一直都不是很明白，据说搞懂BFC可以让我们理解CSS中某些原本诡异的地方。今天着重去了解了一下，做了以下总结。 在解释BFC之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流、普通流三种。而普通流其…"}, {"id": "6911952124804857863", "title": "详解z-index (含实用工具)", "desc": "在 CSS 2.1 中, 所有的盒模型元素都处于三维坐标系中，z轴即用户视角,z-index 改变这种顺序。z-index值越大，越靠前，类似于PS中图层的概念。 该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离…"}, {"id": "6968828179012124685", "title": "[前端好文翻译]新技术：组件驱动世界中的网页设计", "desc": "基于页面的响应式布局或许即将成为过去式，你准备好迎接新的响应式开发了吗？让我们从这篇响应式技术一探究竟吧。"}, {"id": "6844903853926645773", "title": "CSS盒子模型", "desc": "CSS盒子模型算是CSS中最重要的一部分，在开发中遇到难以理解的现象，往往是因为对模型的理解不够。 外边距区域「margin」：由外边边距限制，用空白区域扩展边框区域，来分开相邻的元素。 标准模型指的是设置box-sizing为content-box的盒子模型，一般width，…"}, {"id": "6972599909228740615", "title": "不隐藏滚动条使滚动条不占据位置", "desc": "问题描述: 之前自己仿写了一个聊天机器人的小项目,页面的高度会随着聊天数量的增加而变大,进而出现滚动条,滚动条默认的宽度是17px,所以每次出现滚动条右边的内容区域就会被挤压,影响布局 解决办法: 1"}, {"id": "6844903697940496392", "title": "Web阅读器开发系列教程（入门篇）", "desc": "最近我在慕课网发布了两门关于Web阅读应用开发的课程，采用Vue全家桶开发。免费课是入门级课程，初步实现了一个阅读器。实战课是进阶课程，实现了一个高性能的互联网阅读应用。两个项目都采用自适应布局，同时支持PC端和移动端，想要系统提升前端技能的同学不要错过。 本教程为系列教程，主…"}, {"id": "6844903573034123277", "title": "前端开发基础知识整理--CSS篇", "desc": "该篇是整理的一些面试中的CSS题。整理该项目的目的不只是为了面试，也是为了对平时一些零散知识点有一个整理和总结。好记性不如敲键盘，何况记性还不好呢。趁着年后分享面试的人多进行的整理，错误之处还请指正，同时欢迎分享更多优质题目..."}, {"id": "6844903591765868551", "title": "你应该知道的前端--渲染原理", "desc": "我们很容易将浏览器引擎看作是一个黑盒子,就像电视数据一样,黑盒子会指出显示的数据。那么浏览器是怎么把资源/数据转换到我们所看到的网页的呢 HTML描述了网页的结构。为了理解HTML,浏览器引擎首先必须将其转换为DOM(文档对象模型)。浏览器引擎中拥有解析器,它用于将HTML中的…"}, {"id": "6844903813640372232", "title": "CSS3 的一对孪生兄弟之 background & mask", "desc": "很多人在做前端开发的时候基本都用过 background 属性，但是 mask 属性却很少使用，甚至有些许陌生。但是实际上 mask 与 background 一样简单方便，甚至在某些地方比 background 更有优势！今天我们就来深度学习一下 background & m…"}, {"id": "6844903774041948167", "title": "通过CSS变量修改样式", "desc": "js怎么去修改css伪类样式呢？但是js并没有伪类选择器，那么该怎么办呢？网上有不少方法，比如通过切换元素的类、在style中动态插入新的样式等。 那么这里再来一种方法，设置css变量（var），通过js去改变这个变量来实现。 1. 基本用法 2. 语法 3. 浏览器支持"}, {"id": "6844903824881106957", "title": " dp是物理尺寸单位吗?", "desc": "根据上面的描述，维基百科甚至直接说了他是一个物理单位(physical unit of measurement), physical unit of measurement 就类似于cm, mm, inch这样的东西了. 根据dp的定义，1dp大小等同于160ppi屏幕上的1个…"}, {"id": "6904888109737967624", "title": "CSS实现水平居中，垂直居中，水平垂直居中(强迫症福利)", "desc": "在我们的平常项目里，页面布局中经常要把一些字，图，div等等居中，贴近用户的审美，我们自然也用到了很多种方法去实现，接下来我想做个系统的总结，帮助自己加深记忆，也希望能帮助到你们。 水平居中的方式有很多，但是因为元素不同的特性，它所适用的方法不多，所以下面按不同的元素带出对应的…"}, {"id": "6904462648520212488", "title": "Flex 属性计算规则", "desc": "Flex 布局中的 flex 属性大家可能都用过，知道它是控制缩放的，但是具体规则可能不是完全掌握，这里来细讲一下其缩放规则。 ​flex​ 的默认值是以上三个属性值的组合。假设以上三个属性同样取默认值，则 ​flex​ 的默认值是 0 1 auto。同理，如下是等同的： 百分…"}, {"id": "6922085874201001998", "title": "HTML5与CSS3知识点总结", "desc": "HTML5针对以前的不足，新增了一些新的标签、表单以及表单属性等。 之前在做布局的使用，使用了大量的div，这些div都是没有语义的，我们不能很轻易的就判断出某个div大致是什么内容，所以在HTML5中新增了语义化标签来弥补这个缺陷，现在我们可以根据标签名去推断出其大致内容，方…"}, {"id": "6980324251127513118", "title": "CSS 文本属性", "desc": "css Text(文本)属性可以定义文本的外观，比如文本的颜色，对齐文本，装饰文本，文本缩进，行间距等 文本颜色 color属性用于定义文本的颜色 预定义的颜色值：red，green等 十六进制：#F"}, {"id": "6865994810109460493", "title": "从误解 flex: 1 到理解 flexbox", "desc": "我们经常在某些业务场景中，需要实现子元素均等占用父元素空间的效果。到目前为止，我使用最多的就是用 flex: 1 来实现。直到有一天我突然想使用 flex-grow: 1 来达到相同的效果，但是浏览器却给了我不一样的表现，我才发现我忽略了剩余空间（free space）这个关键…"}, {"id": "6844903838499995661", "title": "CSS基本术语", "desc": "CSS中其实有很多专业术语，了解这些术语，有助于加强对css背后的机制的理解。 1. Continuous media & Paged media css样式可以让我们随心所欲的在各种电子产品上显示我们所要表达的东西，诸如在screen，在print，在projection上，…"}, {"id": "6844904079961882631", "title": "更好的块链接实现方案", "desc": "设计页面时，为了提升用户点击体验，会有扩大元素的可点击区域的需求——即我们看见的元素很小，但实际可响应的区域却是大的。比如，用一个 <a> 标签包裹一大块内容，以达到点击这块区域的任何部分都会跳转，这就是我们所谓的“块链接”。功能上当然没问题，但却没有考虑屏幕阅读器使用者的体验…"}, {"id": "6844903839355633671", "title": "理解 CSS 中的 BFC", "desc": "BFC 即 Block Formatting Contexts (块级格式化上下文)，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到…"}, {"id": "6844903861006630919", "title": "后端转前端 起步 css理论 OOCSS/SMACSS 实战心得", "desc": "网上查看了2014年的一些css理论，如oocss/smacss。面向对象的css？感觉又回到了后端老本行了。一番仔细阅读后，值得一试！以下为理论链接 最后，则是element-ui的组件样式重置，与主题切换。 这里存储一些由项目产生的组件样式，方便下次开发快速应用。 为了代码…"}, {"id": "6976247734567174151", "title": "如何利用CSS3的实现3D效果", "desc": "这是我参与更文挑战的第21天，活动详情查看： 更文挑战 这篇文章主要介绍了利用CSS3的3D效果制作正方体，本文通过实例代码效果图给大家展示的非常详细，对大家的工作或学习具有一定的参考借鉴价值,需要的"}, {"id": "6899076017634148366", "title": "一个前端新手的 CSS 知识汇总 ", "desc": "全称 Cascading Style Sheets —— 层叠样式表，是一种 样式表 语言，用来描述 HTML 或 XML 文档的呈现。 Normal Flow ，文档流的知识，回答了默认情况下，页面元素是如何布局的，主要涉及到默认的宽度、高度的计算方法，换行逻辑。 盒模型让我…"}, {"id": "6898995850098245646", "title": "CSS 常见知识点整理", "desc": "...持续更新中... 页面渲染时， dom元素所采用的布局模型。 可通过box-sizing进行设置。 static： 元素框正常生成。块级元素生成矩形框，行内元素则会创建一到多个行框，置于其父元素中。 relative（相对定位）： 元素框偏移某个位置。元素仍保持其未定位前…"}, {"id": "6844903605053440008", "title": "[轉載] Font-size: An Unexpectedly Complex CSS Property", "desc": "從 Gecko 引擎替代品 Servo 貢獻者的角度去分析為何 font-size is the worst."}, {"id": "6844904146311593997", "title": "初识浏览器渲染原理和CSS动画", "desc": "知道了哪些节点可见、它们的计算样式以及几何信息，将渲染树中的每个节点转换成屏幕上的实际像素即开始绘制。把边框、文字颜色、阴影等绘制出来。 最后将合成好的页面展示出来。 为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body…"}, {"id": "6975067516674506783", "title": "用CSS绘画API绘制图形", "desc": "CSS Paint是一个API，它允许开发者在CSS期望有图像的地方以编程方式生成和绘制图形。 它是CSS Houdini的一部分，是七个新的低级API的总称，这些API暴露了CSS引擎的不同部分，并"}, {"id": "6844903634761678862", "title": "深入理解CSS计数器", "desc": "计数器可以说是content的重点, 因为此功能非常强大, 实用, 并且不具有可替代性, 甚至可以实现连JavaScript都不好实现的效果. 1. counter-reset counter-reset 的计数重置可以是复数, 如 -2, 也可以是小数, 如 2.99, 不过…"}, {"id": "6953968732053962760", "title": "CSS过渡与动画学习笔记", "desc": "过渡 过渡的基本使用 transition过渡可以为一个元素在不同样式之间自动添加“补间动画” transition属性四要素 效果 哪些属性可以参与过渡 所有数值类型的属性，都可以参与过渡，比如wi"}, {"id": "6907164366668808205", "title": "CSS 加油包之 flex 用法", "desc": "本文是阅读张鑫旭技术博客《写给自己看的display: flex布局教程》的学习笔记，总结的非常好，在此感谢，侵删。 原文戳此链接 直接设置的元素称为 flex 容器，里面的子元素称为 flex 子项。 作用在 flex 子项上的属性：order, flex-grow, fle…"}, {"id": "6850418117575704589", "title": "你应该知道的 CSS 基础知识", "desc": "上面的 demo 是我们常见的 CSS 代码，那么他是如何组织的呢？首先，可以看到花括号里面有 width, height 之类的描述词，这种描述词就是 CSS 属性，而 width， height 后面会有进一步细化的描述，20px, 30px 等，这就是属性值。每一个属性值…"}, {"id": "6898565345301233678", "title": "CSS基础", "desc": "文本流是元素内部的一系列的字符的排列规则，简单来说是文档的读取和输出顺序，也就是我们通常看到的由左到右、由上而下的读取和输出形式，在网页中每个元素都是按照这个顺序进行排序和显示的，是单纯的相对于文字段落来说的，与容纳文字的元素无关。 文档流,英文是normal flow,又翻译…"}, {"id": "6914564126224154638", "title": "CSS的浮动属性", "desc": "浮动可以让元素一个挨着一个。创建一个自然流布局，同时可以设置自身尺寸和父元素容器的尺寸大小。 一个元素浮动时，其他元素会“环绕”他。 ，子元素的浮动确定了他们的位置，但浮动的元素不改变父元素的宽度。这样会使父元素塌陷，从而使父元素的高度为“0”，从而忽略其他属性，这种现象多数时…"}, {"id": "6844903569519312909", "title": "[翻译]CSS变量让你轻松制作响应式网页", "desc": "如果你之前没有听说过CSS变量，那么现在我将告诉你：它是CSS的新特性，让你能够在样式表中使用变量的能力，并且无需任何配置。 这样的词法有点奇怪，但它确实能够让你通过仅改变--base-font-size的值来改变app中所有原生的字体大小。 如果你想要学习CSS变量的知识，可…"}, {"id": "6953651407907979300", "title": "CSS2.1中常用知识点及常见的问题", "desc": "css2.1常用知识点及常见的问题，还有一些常用布局原理及方法（三列布局，圣杯布局，双飞翼布局，两列布局），以及一些常用css样式设置技巧。"}, {"id": "6915270509194117134", "title": "CSS variable", "desc": "1. 声明 声明变量的时候，变量名前面要加两根连词线 --，声明的命名不能包含$、[、^、(、%等字符，普通字符局限于[0~9]、[a~z]、[A~Z]、下划线_和短横线-这些组合，但是可以是中文，日文或者韩文。例如： 变量的值可以为各式各样的值，包括字符串。如： 2. 使用 …"}, {"id": "6915052988138520590", "title": "谈谈盒模型", "desc": "首先是content-box,content-box的width就是内容的宽度,通过下图可以验证这点。 width+左右padding+左右border=100+10+10+5+5=130。 外边距合并只在垂直方向有效，合并后的高度等于两个值中的最大值。 这两种情况，最终显示出…"}, {"id": "6844904096411942919", "title": "CSS中的flex布局详细介绍", "desc": "水平垂直的轴也是同理。 元素动态缩小使用flex-shrink属性控制。当你内部元素总宽度大于外部元素宽度，又不适用wrap让其换行，则可以使用flex-shrink控制内部元素缩放。"}, {"id": "6844903901951426568", "title": "CSS Houdini实现动态波浪纹", "desc": "CSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CS…"}, {"id": "6844904002958655502", "title": "这些常用组件完全不用 JavaScript，刚开始我还不信", "desc": "我们已经习惯用 JavaScript 实现常见的 UI 功能组件，如手风琴、工具提示、文本截断等。但是随着 HTML 和 CSS 新特性的推出，不用再支持旧浏览器，我们可以越来越少用 JavaScript 来创建 UI 组件，更多地集中在代码的逻辑部分(验证、数据处理等)。 有…"}, {"id": "6856028346959167501", "title": "CSS font-size-adjust 属性简介", "desc": "写网页时，我们通常会为网页指定字体以及尺寸。 这里将网页文字指定为 20px 大小，还使用了 Verdana, Times 的字体序列——如果当前操作系统中不包含 Verdana 字体，就回退使用 Times 字体。 一个问题是，当我们比较 20px 下的不同字体展示时，会看到…"}, {"id": "6847902225680433165", "title": "如何使用CSS Paint API动态创建与分辨率无关的可变背景", "desc": "现代Web应用对图像的需求量很大，它们占据网络下载的大部分字节。通过优化它们，你可以更好地利用它们的性能。如果你碰巧使用几何图形作为背景图像，有一个替代方案：你可以使用CSS Paint API以编程方式生成背景。 在本教程中，我们将探讨其功能，并探讨如何使用它来动态创建与分辨…"}, {"id": "6844903882095607816", "title": "Web技巧（13）", "desc": "任何一门语言都有自己的小技巧和新特性，比如Web的三大基石HTML、CSS和JavaScript，在各自的社区中总是有同学在不同的时候梳理一些相关的新特性和小技巧。让这些特性更好的服务于社区，尽量的让大家更好的理解和掌握。另外一个目的是，让更多的同学能把这些新特性运用于自己的项…"}, {"id": "6844903577278742541", "title": "CSS 栅格系统", "desc": "CSS 栅格布局中最重要的两个元素是 wrapper（parent） 和 items（children）。wrapper 实际上就是栅格，而 items 就是栅格里面的元素。 以下面的代码为例： 让这个 div 标签成为栅格，我们只需将他的 display 属性设置为 grid…"}, {"id": "6878661744391258120", "title": "【面试题拆解】--- css 水平垂直居中的实现方式和原理揭秘", "desc": "要了解其中缘由， 先弄清楚几个概念。 行高， 顾名思义， 就是一行文本的高度，在规范上讲就是两条基线之间的距离。行高由上间距、文本高度、下间距组成，上间距的距离与下间距的距离是相等的。 默认情况下一行文本的行高分为：上间距，文本的高度，下间距，并且上间距是等于下间距的，所以文字…"}, {"id": "6987727031114924046", "title": "css - transform", "desc": "对元素进行变形。 相关样式： transform-origin 设置一个元素变形的原点 transform-style 设置元素的子元素是位于 3D 空间中还是平面中。 transform-box p"}, {"id": "6844903745625538573", "title": "炫酷的柱状图滑动效果", "desc": "要用到柱状图,第一时间想到去echart看看示例扒一套代码下来。看了官方教程后感觉不太适合本项目,考虑后觉得自己动手写个图标比较省事而且不用引包。那就开始吧！ 滚动图表首先得有一些柱子呀,那我们就来早柱子,这些都是个宽度相等,高度按比例*设定好的最高高度的柱子。通过flex布局…"}, {"id": "6844904065692909576", "title": "[译] CSS 内在尺寸教程（min-content、max-content 和 fit-content ）", "desc": "CSS 中存在两种尺寸：内在尺寸（intrinsic）和外在尺寸（extrinsic）。为元素的 width、height 设置的固定属性值，就是指外部尺寸，这是最常用的方式。而内部尺寸，则是由元素包含的内容量决定的。 本篇将会详细介绍控制内在尺寸的每个值，看看它们的使用能带来…"}, {"id": "6844903585013039111", "title": "真正理解\"CSS选择器的优先级\"", "desc": "回答 : CSS属性的最终值是通过层叠计算得来的。 我通俗的理解，其实就是先计算再重叠。 计算的过程指的是用户代理（浏览器只是用户代理的一种“实例”）在渲染HTML的时候，对CSS进行层叠计算的过程（这里不讨论浏览器的渲染、重绘等触发时机）。 为了方便理解，这里只针对一个属性值…"}, {"id": "6844903581909270536", "title": "webpack小记", "desc": "入口文件，可以是对象，数组，字符串。 对象，key是可以做输出名字。 path，输出目录，绝对路径。 alias，设置别名。 noParse，如果确定一个模块没有其他的依赖，可以配置这项。可以提高打包的速度 rules，是一个规则数组，每一项是一个对象，配置loader。 在w…"}, {"id": "6942300868402216991", "title": "什么是BFC", "desc": "BFC（Block formatting context ）“块级格式上下文”。 是用于布局块级盒子的一块渲染区域。并且与这个区域的外部毫无关系。 可以理解为BFC是一个块独立的作用域，它有些自己的特性。具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布…"}, {"id": "6844903829268332552", "title": "（08）CSS 基本视觉格式化：② “行内盒子”格式化 | CSS", "desc": "前言： 作为学习“基本视觉格式化”的第二篇，我们在对上一篇中“块盒子”整个“格式化”过程中可以得到——所谓的“格式化”，其实就是确定这个“块/行内 盒子”的自身长度、高度，以及与其上下左右相邻“盒子”之间的距离和协调的过程。在确定这个“长度、高度、距离和协调”的过程中会有很多“…"}, {"id": "6942082759967899684", "title": "styled-components", "desc": "react使用jsx对html进行封装，通过来操作html和css，约定对css带“-”的属性采用驼峰的约定。css的样式规则是对整个页面生效的，在单页面中相当于是全局的，由于对css的封装非常脆弱，以及命名冲突等众多问题，出现许多 css in js 的三方库和css mod…"}, {"id": "6844904051822493710", "title": "如何用border-image实现文字气泡边框", "desc": "开发活动中，遇到了一个很简单的文字气泡效果，大概就是这样的。 emmmm，看起来很简单。实现思路如下 主体是个div，加上渐变和边框还有圆角即可。 左侧元宝切图，用::before定位在左侧。 右侧老鼠切图，用::after定位在右侧。 基本没啥难度，分分钟就能搞定了。直到..…"}, {"id": "6917863958145662990", "title": "百分百正确设置CSS断点的方法", "desc": "接下来近一分钟里，我希望你暂且将CSS、web开发、数字化用户界面抛之脑后。 接着，我想让你畅想时光回退，回到年少时，回到上学第一天。 那时的你更简单，只担心画没画好图形，有没有尿裤子。 现在，看看上图中的点，注意有些点是怎样聚在一起的，有些点又是怎样分开的?我想让你把这些点分…"}, {"id": "6992914845783834637", "title": "CSS的引入方式", "desc": "CSS的创建 插入样式表的方法有三种 外部样式表(External style sheet) 内部样式表(Internal style sheet) 内联样式(Inline style) 内联样式(行"}, {"id": "6904923833610797070", "title": "px和rem对比总结", "desc": "介绍这三个单位之前，需要了解屏幕分辨率。参考 通常说的屏幕分辨率是物理分辨率，比如iphone6的屏幕分辨率是75"}, {"id": "6844903990447046664", "title": "【CSS基础】伪类与伪元素的区别", "desc": "有同学在使用CSS伪元素时使用 :: (双冒号)产生疑问。 进而对：(单冒号)和::（双冒号）的区别产生疑问。 而我们在使用伪类伪元素的时候常常都是使用单冒号。 那么我们就来看看怎么回事吧。 之会有疑问，其实这是因为CSS2未遵循W3C规范，伪类和伪元素统一使用单冒号表示。 而…"}, {"id": "6927245849726877704", "title": "面试快回快答系列（一）：水平垂直居中布局", "desc": "本次快文快答的主题是水平垂直居中。 在阅读本文之前，为了节约大家时间，可以先通过下方介绍了解一下鼠子的面试快问快答系列，如果觉得该系列不适合您或有什么不妥之处，欢迎给我留言。 实现水平垂直居中在实习/校招中是一个很热门的题目，方法大家都会背，但是怎么在一道平平无奇的题目中让面试…"}, {"id": "6844903847832322061", "title": "面试官: css3动画了解吗? 我: .......", "desc": "transition允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值 变换延迟时间：transition-delay。 不是所有的CSS属性都支持transition。 tran…"}, {"id": "6844903606253027341", "title": "[译] JavaScript 是如何工作的：CSS 和 JS 动画背后的原理 + 如何优化性能", "desc": "这是专门探索 JavaScript 及其构建组件系列的第 13 篇文章。在识别和描述核心元素的过程中，我们还分享了构建 SessionStack 时的一些经验法则，SessionStack 是一个足够强大且高性能的 JavaScript 应用程序，用来帮助用户实时查看和重现其 …"}, {"id": "6844903610048839694", "title": "CSS-Next : CSS预处理器简单写法的替代者, 想了解下么?", "desc": "颜色计算,一般定制主题或者 UI 规范的会考虑.. 把手头项目 vue-cli 初始化的项目.升级到了 webpack4.8.3 , 引入了一堆移动端相关东东。 webpack 4.8.3的不如期待那般美好，只能说有所提升。"}, {"id": "6844903843830956045", "title": "Flex布局", "desc": "网页布局（layout）是CSS的一个重点应用。 布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 +float属性。针对于某些特殊布局就显得非常不方便，例如，垂直居中就不容易实现。 2009年，W3C提出了一种新的方案—-Flex布局，可以…"}, {"id": "6966621902060126215", "title": "关于ellipsis文本溢出显示省略号", "desc": "提出问题⁉ Q1. 为什么设置了 text-overflow: ellipsis;却不生效？ Q2. 设置了宽度以后，加一个样式 padding-left:12px;那么右边会不会超出12px？ 作出"}, {"id": "6844903676725690381", "title": "面向体验的重构优化", "desc": "前端重构程序员是一个关注代码同时还要留意体验的异类。代码的优化虽然难，但是有比较多的性能测试工具去证明优化的成果。然而体验这种东西，我们又要如何去证明它的好与坏呢？ 今天我着重会基于「webnovel」PC站点从以上两点给大家介绍，如何从体验的角度去做重构的优化，并如何用数据去…"}, {"id": "6844903678718001166", "title": "多页应用增量更新静态资源Webpack打包方案", "desc": "自从vue、react或者angular这类框架流行后，单页应用的数量也越来越多。但是限制于单页应用的一些缺点，比如：seo、首屏时间等因素，很多应用的结构还是保持了多页面结构。此篇讲述的是如何在多页面应用结构的基础上，利用webpack生成带hashcode文件名的方式实现静…"}, {"id": "6844903968192069646", "title": "深藏在CSS里的诗情画意", "desc": "一声梧叶一声秋，一点芭蕉一点愁，三更归梦三更后。 大概是因为入秋的缘故，最近的感慨比较多。 很多的碎碎念都用都用 HTML 跟 CSS 来记录在我的codepen https://codepen.io/krischan77 至上，眼见积累到了一些了，就选出几个来与大家一同分享。…"}, {"id": "6844903815469072391", "title": "你可能理解错了background-position", "desc": "文本主要解决如何理解背景定位（background-position）属性的。 文章虽短，但是内容足够拨乱反正。 其效果如下图所示，注意图片平铺是从 padding-box 开始的，另外， border 后面也是有图片的。 为了方便理解 background-position，…"}, {"id": "6976275958458220575", "title": "简单来认识下BFC(块级格式化上下文)", "desc": "面试的时候面试官如果要考察css，经常会问什么是BFC。而且，我们写样式的时候有时候我们已经触发了BFC，但是我们可能还不知道。所以，今天"}, {"id": "6844903622493503501", "title": "js利用H5的requestAnimationFrame（）API实现动画效果", "desc": "我们知道，浏览器实现动画绘制无非就是CSS3的动画属性transition，aniamtion和JavaScript的setTImeOut和setInterval方法（进行DOM的样式循环改变达到动画效果）。说到这可能很多同学都有疑问了，既然有CSS的动画属性这么方便的东西了，…"}, {"id": "6917923973808259085", "title": "移动端APP首页案例", "desc": "我主要巩固移动端开发知识，利用所学写出页面的效果，是一个练手的小案例。巩固html css等知识，在开发中多点思考，让效率更加高效。 当设计师没有将图标们转换为svg，使用不了字体图标的时候，我们可以考虑使用雪碧图，来减少图片的请求。它核心思想是：将很多很多的小图标放在一张图片…"}, {"id": "6844904196601282574", "title": "关于Position属性的相关使用及踩坑", "desc": "元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed定位使元素的位置与文档流无关，因此不占据空间。 Fixed定位的元素和其他元素重叠。 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，让这个元素“相对于”它的起…"}, {"id": "6844903696849960973", "title": "初尝微信小程序开发与实践经验分享", "desc": "一个java程序员最不务正业的一次分享了。 小程序的火热相信不用我多说了，年初的时候老婆去浦东某达面试，甚至都被问有没有小程序测试经验。俨然小程序成为了互联网公司自PC，WAP，安卓，IOS之后又一不可或缺的入口。正好这段时间公司也在做一款小程序，于是顺便也学习了一把。当然因为…"}, {"id": "6844903638175842318", "title": "记一次解决字体图标垂直对齐问题的过程", "desc": "最近处理了一个字体图标没有在容器中垂直居中的样式问题。原本以为，只是 css 写的不正确，实际却并没有那么简单。 一番波折后，最终发现，是因为一处小细节，挖出了个大坑。 在处理问题的整个过程中，一方面复习了相关的 css 基础知识；另一方面，对于问题原因的推理方法上，也给了我一…"}, {"id": "6844903511574970382", "title": "如何编写轻量级 CSS 框架", "desc": "前言这篇文章我已经酝酿了半年之久，或者说拖沓了这么久吧。想说的东西很多，却又无从说起。如今轻量级框架如雨后春笋，层出不穷。我想每个人都应该归纳总结工作中的常见需求，编写一套适合自己的CSS框架。在之前"}, {"id": "6844903516952068109", "title": "Q:为何img、input等内联元素可设置宽高", "desc": "因为<img>、<input>属于替换元素，替换元素一般有内在尺寸和宽高比(auto时起作用)，所以具有width和height，可以设定。 元素是文档结构的基础，在CSS中，每个元素生成了一个包含了元素内容的框（box，也译为“盒子”）。但是不同的元素显示的方式会有所不同，例…"}, {"id": "6896399109390958599", "title": "【CSS学习（三）盒子模型、边距重叠 & 浮动、清除浮动】", "desc": "盒子模型在CSS学习中尤为重要，对盒子模型的深刻理解有利于 CSS开发水平的提示，在开发中遇到难以理解的现象，往往是因为对模型的理解不够。 标准的盒子模型一般由外边距区域、边框区域、内边距区域、和内容构成。 我们随便点开一个网页按下 F12，都能看到盒子模型的身影。 边框使用 …"}, {"id": "6994473121743011870", "title": "学透CSS-万字长文助学图片属性（上）-背景图片，圆锥/线性/径向渐变 连载中", "desc": "作为网站中，第一吸引眼球的元素，图片承包了整个网站的颜值，无论是小白还是前端老司机，一定要学会！背景图片，渐变背景，赶紧学起来吧"}, {"id": "7005755782926958605", "title": "一文了解CSS预处理器", "desc": "现如今的Web应用对用户体验有较高的要求，随之而来的页面样式变得复杂，对CSS的要求也不再是以前的简单要求，了解CSS预处理器，提高CSS编写效率"}, {"id": "7004766568584314888", "title": "CSS实用技巧（中）", "desc": "前言 我们经常使用CSS，但是却不怎么了解CSS，本文主要对vertical-align、BFC、position中开发过程不怎么注意的特性进行简要总结，从本文中，你将了解到以下内容： vertica"}, {"id": "6998483082621747214", "title": "原子化 JSS 方案 broken-css", "desc": "技术背景 对于现代 UI 框架来说，选择使用 JSS 逐渐让人可以接受，而不再被视为“大逆不道”之举。 然而， JSS 作为管理样式的前沿解决方案，有些 JSS 方案可以说被称为前沿的前沿。如： li"}, {"id": "6999685992693121032", "title": "分享一些 CSS 开发中的编码规范（二）", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 6.值与单位 6-1.文本内容必须用双引号包围 例子： 6-2.省略整数部分的 0 当数值为 0 – 1 之间的小数时，可以省略整数部分的"}, {"id": "6998503180128993288", "title": "🍊深入理解前端动画", "desc": "作为一只前端仔，我们的使命就是在满足产品需求、实现交互设计的基础上，将最好的体验呈现给用户。在保证性能的同时，我们通常会给页面加一些动态效果，以增强页面的表现力并提升页面的交互体验。笔者将通"}, {"id": "6995721790550966302", "title": "阿ken的HTML、CSS的入门指南（十六）_多媒体技术", "desc": "感激相遇 你好 我是阿ken 在 HTML5 出现之前并没有将视频和音频嵌入到页面的标准方式，多媒体内容在大多数情况下都是通过第三方插件或集成在 Web 浏览器的应用程序置于页面中。通过这样的方式实"}, {"id": "6914444370033213448", "title": "纯CSS实现常见的UI效果", "desc": "大家好，这里是CSS魔法使——alphardex。 切图仔，是大多数前端用来自嘲的称呼。相信很多人平时写页面的时候，大部分时间是在切图和排图，如此往复。这里并不是要否定切图本身，而是在质疑：一直切图到底对自己的功力增长有何好处？想想UI丢给你一套好看的界面，你却只需一个img标…"}, {"id": "6844903574929932301", "title": "干货!各种常见布局实现+知名网站实例分析", "desc": "阅前必看：本文总结了各种常见的布局实现,每个方法的优缺点分析往后在github上陆续补充。还有就是这篇文章没提到的其他布局，待本人后续想到或遇到定会在github上及时更新。 由于文章篇幅较长,排版有些混乱,希望别介意哈。掘金PC端是会自动生成目录的,为了方便移动端阅读，还特意…"}, {"id": "6987731486707286030", "title": "阿ken的HTML、CSS的入门指南（一）_HTML基础", "desc": "感激相遇 你好 我是阿ken <!doctype>标记 位于文档最前面，使用html5的DOCTYPE声明，会触发浏览器以标准兼容模式来显示页面，浏览器才能将该网页作为有效的html文档。htm"}, {"id": "7006139308780290078", "title": "2021年9月份面试-css 基础", "desc": "最近出去浪了一圈，有一些公司会问到 css 基础知识，如果在这上面挂了，很不值，我总结了一下，后续会继续补充，希望对大家有所帮助。"}, {"id": "7000077353862823966", "title": "圆形加载动画 ", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 背景 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "6994349533807247397", "title": "50天用JavaScript完成50个web项目，我学到了什么?", "desc": "1.Expanding Cards 效果如图所示: 源码 在线示例 知识点总结: CSS:弹性盒子布局中的flex属性:让所有弹性盒模型对象的子元素都有相同的长度，且忽略它们内部的内容。 JavaSc"}, {"id": "7001523267286597639", "title": "扁平风按钮组动画效果", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 背景 按钮 是我们 编程 中使用频率最多的几个 交互元素 之一，点击它会产生其描述的动作。如果一个按钮上写着 提交 ，点击它很可能会 提交"}, {"id": "6994838999617503245", "title": "学透CSS-万字长文助学图片属性（中）-attachment、clip、repeat、size等 连载中", "desc": "上文我们介绍了，背景图片以及渐变，但是仅仅学会那点，只是背景图片的九牛一毛，本文要介绍的backdround-* 大家族，也是背景图片千变万化的基石。"}, {"id": "6973517448557363214", "title": "前端开发需要知道的 10 个 CSS 技巧", "desc": "个人觉得 CSS 是每个前端开发人员都必须掌握的基础，以完成相应的交互和终端设备的响应。在项目开发中，有些容易被忽略的小问题带来项目后期的胶水代码。本文总结一些项目开发中CSS的10个小技巧。"}, {"id": "7007421513787949070", "title": "overflow:hidden——溢出隐藏，解除塌陷，清除浮动", "desc": "一、溢出隐藏 如果父盒子没有设置固定高度或宽度时，子盒子会将父盒子的宽或高自动撑开；如果父盒子有固定高度或宽度时，且子盒子的高度或宽度大于父盒子，就会发生溢出。 1、父盒子没设置固定宽高 2、父盒子固"}, {"id": "6976272394247897101", "title": "理解margin塌陷和margin合并及其解决方案", "desc": "小问题总是被人视而不见，等遇到的时候又突然想不起来，所以我们需要经常总结，这可以帮助我们更好的记忆东西。今天我们来总结两个不起眼的小问题：margin塌陷和margin合并"}, {"id": "6933009968710811661", "title": "一键格式化代码带来的快感 | 你还在为每个项目配置Stylelint和Eslint吗", "desc": "大部分前端项目都配置Stylelint、Eslint、Tslint和Prettier四大前端代码校验工具。代码校验工具以下简称Lint，为了解决代码不严谨，通过预设规则校验代码，检测其是否存在错误/漏洞，并对错误/漏洞提示修复方案并尽可能依据修复方案格式化出正确代码。该功能称为…"}, {"id": "7002097448323645471", "title": "【译】用 Sass 的 !default 创建样式表的特性标志", "desc": "用 Sass 的 !default 创建样式表的特性标志 !default 是一个 Sass 标志，表明对一个变量进行 条件赋值 —— 只有在变量未定义或为 null 时才赋值。"}, {"id": "7002538987956994079", "title": "纯css代码实现连线效果", "desc": "近期遇到一个需求：给树形结构的筛选器增加连线样式，美化的同时增加可读性，如下图 方案与实现 看到连线这种功能，当时首先想到的思路就是通过canvas去画，但是想了下我们业务的代码早就完成了，使用"}, {"id": "6886258269137043464", "title": "超详|2020年你不应该错过的CSS新特性", "desc": "@argyleink在第四次的伦敦（LondonCSS 2020）CSS活动中分享了一个有关于CSS特性相关的话题。看了一下这个主题的PPT，里面有些新东西还是蛮有意思的。基于该PPT，我稍微整理近24个CSS方面的新特性，感兴趣的同学可以继续往下阅读。 接下来的内容我将分为：…"}, {"id": "6986556064502120478", "title": "带你探索神秘的“幽灵空白节点”", "desc": "在日常开发编写 CSS 代码的时候，时常会遇到一些奇怪的现象。比如以下几个场景 图 1 中，图片下面为什么会出现一段空白高度？ 在我们正常的认知中，块级元素的height在不设置具体值的时候，默认为0"}, {"id": "6984410165164392478", "title": "🍊Flex布局最佳实践之骰子实战篇（面试高频考点，速来围观呀~）", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 写在前面 一、骰子的布局 骰子的样式 这里给出样式代码： HTML: CSS: 上面代码中，div元素（代表骰子的"}, {"id": "7005867973227331598", "title": "css常见面试题", "desc": "CSS作为HTML页面结构的样式补充语言，在Web页面的布局和样式中起了重要作用。在前端面试中也是必不可少的一个考察点。本篇文章针对初级前端工程师总结了前端面试中常见的css面试题。"}, {"id": "6844904024278302728", "title": "【建议收藏】90%的前端都会踩的坑，你中了吗？", "desc": "移动开发时代，前端同学刚刚送别了让人头秃的IE浏览器，却发现憧憬已久的移动互联网时代并不是想象中那般美好。各种棘手的系统兼容问题和浏览器兼容问题怎么也让人高兴不起来。作为一名工作不足3年的前端程序媛，始终相信好记性不如烂笔头。每次在项目开发过程中踩到的坑，都习惯性地记录了下来。…"}, {"id": "6982363593241002014", "title": "好玩的 CSS - 40 个有趣的 CSS 网站", "desc": "💥 🔖 好玩的 CSS - 40 个有趣的 CSS 网站 🌐 基础学习 🧚 CSS 动画 🕹️ 教学游戏 🎰 代码生成 🎨 色彩搭配"}, {"id": "6931168723021758478", "title": "使用 mask 实现视频弹幕人物遮罩过滤", "desc": "经常看一些 LOL 比赛直播的小伙伴，肯定都知道，在一些弹幕网站（Bilibili、虎牙）中，当人物与弹幕出现在一起的时候，弹幕会“巧妙”的躲到人物的下面，看着非常的智能。 其实，这里是运用了 CSS 中的 MASK 属性实现的。 之前在多篇文章都提到了 mask，比较详细的一…"}, {"id": "7007011527211352095", "title": "flex弹性布局教程-02-容器display设置为flex", "desc": "本篇介绍了弹性布局的第一步，需要先将容器display设置为flex，并逐步对其中的流程进行了讲解。 阅读时间10~15分钟。"}, {"id": "7007013323422203912", "title": "flex弹性布局教程-04-项目属性flex-grow", "desc": "本篇介绍了项目属性 flex-grow，用于定义项目的扩大系数，用于分配容器的剩余空间。 阅读时间约10~15分钟，文字虽多，但主要都是例子。"}, {"id": "7005523234347024414", "title": "中秋佳节，嫦娥望月", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 前言 大家好，我是cv竹叶，中秋佳节即将到来，在此祝屏幕前的你，中秋快乐！！！ 竟然大家都来了，就一起和嫦娥看月亮吧！"}, {"id": "6844903894313598989", "title": "前端基础篇之CSS世界", "desc": "这些基本概念有些可能不易理解但却都很重要，如果看完还是很不理解的话需要自己谷歌或百度，网上关于这些概念的文章不少。 “流”又叫文档流，是css的一种基本定位和布局机制。流是html的一种抽象概念，暗喻这种排列布局方式好像水流一样自然自动。“流体布局”是html默认的布局机制，如…"}, {"id": "6895584191073927175", "title": "不可思议，纯 css 都能图片滚动", "desc": "传统的swiper太重了，里面封装了很多我们不需要的功能，而一个简单的滚动功能没必要那么重的文件。于是就想着自己如何实现，如何才能用最少的代码最优雅的实现呢？是否可以推翻传统的实现，使用纯css的某些特效实现呢？ 把上面提到的三个属性放在一起就实现了平稳缓慢的滚动，再借助js移…"}, {"id": "6974239153269506084", "title": "2021年你可能不知道的 CSS 特性（下篇）", "desc": "前几天在 F(x) Team.午夜识堂 和大家聊了一下 CSS 方面的话题，即 CSS 新特性。 ​ 在这个话题中主要整理了有关于 CSS 方面的特性，并且尽可能的整理了一些大家现在能用或过不了多久就"}, {"id": "6844904143757246471", "title": "你可能还不知的 7 个 CSS 好用的属性", "desc": "学习CSS是构建好看网页的一种方式。 但是，在学习过程中，我们倾向于（大部分时间）限制自己，一遍又一遍地使用相同的属性。 毕竟，我们是一种习惯性的动物，我们会使用自己习惯且熟悉的东西。 因此，在这篇文章中，向你介绍7个 比较少见且好用的 CSS 属性，希望对你有所帮助。 1. …"}, {"id": "6844904029336649741", "title": "巧用 CSS 实现酷炫的充电动画", "desc": "循序渐进，看看只使用 CSS ，可以鼓捣出什么样的充电动画效果。 欧了，勉强就是它了。有了电池，那接下来直接充电吧。最最简单的动画，那应该是用色彩把整个电池灌满即可。 有内味了，如果要求不高，这个勉强也就能够交差了。通过蓝色渐变表示电量，通过色块的位移动画实现充电的动画。但是总…"}, {"id": "7001798782069243941", "title": "布局、定位和BFC", "desc": "一、布局基础 二、flex布局：主轴、交叉轴 三、定位：相对、绝对、固定、粘性 四、BFC：块级格式化上下文"}, {"id": "7003748736304152612", "title": "一步一步教你手写轮播图", "desc": "轮播图是指网站主在同一个广告位设置投放多个广告，这些广告按照一定的规则进行轮询展示，如固定时间切换展示广告，或用户刷新页面后切换。"}, {"id": "6940899696038641700", "title": "两个DIV实现雷达扫描效果", "desc": "其中，radar类DIV是200px的宽高，fan类DIV是100px的宽高。 请用CSS完成下面的效果。 转动的扇形，实现的效果可以通过关键帧来处理。 DIV从距离顶部0的位置更改到距离顶部100px的位置，整个过程需要3秒。 扇形的颜色效果是一个线性渐变的过程，我们可以通过…"}, {"id": "7001312313953222670", "title": "前端动画lottie-web", "desc": "lottie是一个跨平台的动画库，通过AE（After Effects）制作动画，再通过AE插件Bodymovin导出Json文件，最终各个终端解析这个Json文件，还原动画。本文中我只介绍前端用到的"}, {"id": "7004077335989190670", "title": "2021-09-04 前端每日一题——CSS 居中方案", "desc": "点击这里查看效果： https://codesandbox.io/s/headless-framework-4qsx0?file=/index.html"}, {"id": "6968645960175976478", "title": "CSS 奇思妙想 | Single Div 绘图技巧", "desc": "经常能看到有关 CSS 绘图的文章，譬如使用纯 HTML + CSS 绘制一幅哆啦 A 梦图画。实现的方式就是通过堆叠 div，一步一步实现图画中的一块一块。这种技巧本身没有什么问题，但是就是少了一些"}, {"id": "7006097073422467108", "title": "水平居中布局", "desc": "水平居中布局常见的解决方案，以及个人的一些看法，摘要不满足最低50字的要求？呵呵呵呵呵呵呵呵呵呵呵！"}, {"id": "6999803276971474980", "title": "【CSS】这次带你彻底搞清楚经典的 双飞翼布局 与 圣杯布局 - margin负值 - 浮动 - padding", "desc": "今天来学习两种经典的PC端局部——双飞翼布局&圣杯布局.这两种三栏布局方式都是使用float来完成，是float的典型应用."}, {"id": "7004597253717360648", "title": "浏览器滚动条hover时变粗、改变颜色", "desc": "原生的滚动条虽然很使用，但确实不美观。 用了一些css美化后 好看多了，但是我们发现滚动条很占用位置，怎么能让它好看使用性价比高呢？"}, {"id": "6997329857063419918", "title": "CSS布局(进阶必备知识)", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 1、绝对定位 margin设置为负值(拉回模式) 这种场景，元素的宽高都是已知的 2、margin: auto 实际的开发中，当我们想要水"}, {"id": "6950848507817230349", "title": " 2021 年移动端的开发的几点经验", "desc": "1.微信 sdk 2. 产品适老化 3. Css适配刘海屏幕安全区 4. 细嚼慢咽 Typescript + React17 +Eslint + Git hook 工作流"}, {"id": "6844903649605320711", "title": "CSS性能优化的8个技巧", "desc": "我们都知道对于网站来说，性能至关重要，CSS作为页面渲染和内容展现的重要环节，影响着用户对整个网站的第一体验。因此，与其相关的性能优化是不容忽视的。 对于性能优化我们常常在项目完成时才去考虑，经常被推迟到项目的末期，甚至到暴露出严重的性能问题时才进行性能优化，相信大多数人对此深…"}, {"id": "7003901397749989412", "title": "CSS揭秘——条纹背景", "desc": "在我们开发中，经常会有各种尺寸、颜色、角度的条纹图案需要实现， 以前，我第一个想到的就是用无序列表添加元素，再去控制不同颜色，这样再改动的时候就太麻烦，根本不够 DRY，而用线性渐变的方法就会简单很多"}, {"id": "6992374133392670757", "title": "学透CSS-box-shadow你真的会吗?", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 兼容性 box-shadow 基本兼容市面上的大部分浏览器，所以不需要考虑兼容性。 是什么 box-shadow可以在元素上添加阴影，一个元"}, {"id": "7002898032782114830", "title": "CSS3 新选择器", "desc": "在 CSS2.1 中，常用的选择器有：元素选择器、id 选择器、class 选择器、群组选择器和层次选择器，在 CSS3 中，新增了属性选择器、结构伪类选择器、UI 伪类选择器等。"}, {"id": "7005934265510658061", "title": "CSS3的部分知识与新特性", "desc": "选择器， 属性选择器， 结构性伪类选择器， 伪元素，边框圆角，背景图像，渐变，用户界面属性，多列布局，字体"}, {"id": "6921498669816479758", "title": "🌠一文带你看CSS过渡动画艺术，附带常见动效分享", "desc": "在使用手机时，都会或多或少都会接触到 过渡动画 的使用场景。从最基本的页面切换到一个按钮的点击后的常态都是动画的应用场景。这些动画无时无刻不在 优化 （欺骗）着我们的大脑，加强我们对一件事情的认知度。不同情况下不同的动画操作能够无形中引导用户进行接下来的行为。并给人脑一定反应的…"}, {"id": "6997585435677425671", "title": "css3绘制github logo", "desc": "1. 概述 最近整理CSS和大家分享一下使用 CSS3 绘制github 的章鱼猫 Logo 的过程。 网上经常能看到一些通过border属性实现的圆形，椭圆形，三角形。这里主要用到的就是CSS的bo"}, {"id": "6844903976257896455", "title": "移动端H5页面开发坑点指南", "desc": "在安卓中，直接使用原生 video 会导致全屏播放，盖住所有元素，因此使用 x5 播放器。但是 x5 播放器还是存在问题，虽然不会盖住元素，但是会自己添加特效（盖一层导航栏蒙层）。 这样可以在安卓下使用 x5 播放器， playsInline 及 webkit-playsinl…"}, {"id": "6960844183611375630", "title": "【CSS】CSS布局解决方案（终结版）", "desc": "在我们前端开发时，经常会遇到不同的场景页面布局问题，页面框架搭建是前端开发基础，也是十分重要的一环。本文先是对页面开发基本流程思路进行了总结，在此基础上对CSS布局常见方案进行梳理。"}, {"id": "7003236964681908260", "title": "css盒模型", "desc": "一、概念 CSS盒模型本质上是一个盒子，封装周围的HTML元素，包括 外边距（margin）、边框（border）、内边距（padding）、实际内容（content）四个属性。 1.1 W3C盒子模"}, {"id": "6992401065861709837", "title": "CSS 将原生支持嵌套语法", "desc": "前端快爆 Chrome 92 的开发者工具有如下更新： 在浏览器的 Console REPL 中，将自动隔离不同执行的指令，重复执行 const 常量定义将不再报错； CORS 调试支持进行了增强，可"}, {"id": "6932768256683933703", "title": "你可能不太熟知的CSS布局技巧", "desc": "随着Web技术不断的革新，CSS近几年也变得多年前要更强大。在Web开发中，CSS是不可或缺的一部分，对于很多Web开发者来说，有很多CSS属性不知道，或者说他们知道，但忘记在最恰当的时候使用最适合的"}, {"id": "6944881756524789773", "title": "分享几个css生成工具", "desc": "Neumorphism/Soft UI generatorSmooth Shadow generatorFancy Border Radius GeneratorEasing GradientsDat"}, {"id": "7002599289537560589", "title": "CSS::伪元素是怎么回事儿？", "desc": "掘力计划｜创作者训练营第三期正在进行, 「写」出个人影响力. 我们在实际工作中经常用的两个伪元素, 或许大家都知道, 因为用的比较多, 那就是::after和::before"}, {"id": "7002158952184201229", "title": "CSS 定位布局", "desc": "虽然浮动布局比较灵活，但是不容易控制，定位布局的出现，使得用户精准定位页面中的元素成为可能，页面布局也随心所欲。但定位布局缺乏灵活性，给空间大小和位置不确定的版面布局带来困惑。"}, {"id": "7007308735878004772", "title": "CSS var（）函数 插入自定义的属性值", "desc": "用法： 值 描述 custom-property-name 必需。自定义属性的名称，必需以 -- 开头。 value 可选。备用值，在属性不存在的时候使用。 在全局css中定义时，变量名前记得加--。"}, {"id": "6996698448426696734", "title": "学透CSS- 数学函数(中) 阶梯值函数round/mode/rem 连载中", "desc": "强调！！！ 前言 css中有将近102个函数，但是我们所掌握的大概又有多少呢？今天我们先来介绍其中的数学函数，数学函数大概有： 基本算术：calc() 比较函数：min()、max()和clamp()"}, {"id": "6844903599080734728", "title": "webpack4-用之初体验，一起敲它十一遍", "desc": "在webpack4之前，提取公共代码都是通过一个叫CommonsChunkPlugin的插件来办到的。到了4以后，内置了一个一模一样的功能，而且起了一个好听的名字叫“优化” 好了，就写到这里吧，想必大家也看累了吧，辛苦大家了，哈哈。"}, {"id": "7004356964687806477", "title": "CSS3 颜色样式", "desc": "在 CSS3 中，增加了大量定义颜色方面样式的属性，主要包括：opacity 透明度、RGBA 颜色、CSS3 渐变。"}, {"id": "6976646049456717838", "title": "一篇搞清伪类和伪元素", "desc": "本文解决两个痛点：1.伪类和伪元素傻傻分不清楚的问题，2. 太多伪类和伪元素导致我裂开的问题~~快来看看吧~"}, {"id": "6932641770526212104", "title": "十几个CSS高级常见技巧汇总（虚线框、三角形、优惠券卡券、滚动条、多行溢出...）", "desc": "1-1. 设置input 的placeholder的字体样式 1-2. 单行和多行文本超出省略号 1-3. 负边距使用技巧 1-4. 定位同时设置方位情况 1-5. 相邻兄弟选择器之常用场景 1-6. outline属性的妙用技巧 1-7. 隐藏滚动条或更改滚动条样式 1-8.…"}, {"id": "6903083072661487624", "title": "手撸一个在线css三角形生成器", "desc": "为了提高 前端开发 效率, 笔者先后写了上百个前端工具, 有些是给公司内部使用的, 有些单纯是因为自己太“懒”, 不想写代码, 所以才“被迫”做的. 接下来介绍的一款工具——css三角形生成器也是因为之前想要解放设计师的生产力, 自己又懒得切图或者写css代码, 所以想来想去还…"}, {"id": "6998050344634679332", "title": "万字详解CSS中的基础选择器", "desc": "这是【从头学前端】系列文章的第十七篇-《CSS基本选择器的用法》 CSS选择器 的作用是按照CSS规则定位HTML页面的一个或多个元素 。浏览器在解析HTML页面时，会根据CSS规则中的选择器定位HT"}, {"id": "6856668819344392206", "title": "Vue超好玩的新特性：在CSS中引入JS变量", "desc": "Vue这次更新诚意满满，不过大家都把关注点放在了 Composition-API 上了，没有注意到这些不起眼的边边角角，但就是这些边边角角却可以极大的提高我们的开发体验。"}, {"id": "7000771606226141220", "title": "3D按钮组", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 背景 按钮 是我们 编程 中使用频率最多的几个 交互元素 之一，点击它会产生其描述的动作。如果一个按钮上写着 提交 ，点击它很可能会 提交"}, {"id": "7002609455099559972", "title": "通过一个按钮来学习关于用户行为的伪类选择器", "desc": "这是【从头学前端】系列文章的第二十九篇-《通过一个按钮来学习关于用户行为的伪类选择器》 在HTML中的按钮元素，一般情况下指的就是<button>元素，这是一个双标签元素，如下代码展示了<button"}, {"id": "7000740395197923359", "title": "重学前端 | 动画的基本原理以及前端三大动画怎么选？", "desc": "动画的基本原理 动画是什么？ 是通过快速连续排列彼此差异极小的连续图像来制造运动错觉和变化错觉的过程。——维基百科 动画的历史 其实动画"}, {"id": "6844903887699181581", "title": "单标签！纯CSS实现动态晴阴雨雪", "desc": "本期分享一下如何仅用CSS3，实现单标签的动态晴阴雨雪。技术关键点就是“单标签”和“纯CSS”。先看下最终效果： 没错，就是这么任性，每个动图就一个标签，而且无图无JS！下面就来详细介绍下技术实现。 以及实现单标签最关键的:before、:after伪元素运用。 最大的一点就是…"}, {"id": "6844903518520901639", "title": "个人总结（css3新特性）", "desc": "css3这个相信大家不陌生了，是个非常有趣，神奇的东西！有了css3，js都可以少写很多！我之前也写过关于css3的文章，也封装过css3的一些小动画。个人觉得css3不难，但是很难用得好，用得顺手，最近我也在过一遍css3的一些新特性（不是全部，是我在工作上常用的，或者觉得有…"}, {"id": "6997969737506537509", "title": "渲染优化之CSS Containment", "desc": "# 引言 在开始介绍今天的主角 _CSS Containment_ 之前，我们需要了解一些前置知识回流和重绘，方便我们理解以及应用的场景。 ## 简单回忆下回流和重绘 - 回流（Refl"}, {"id": "7007311918788526116", "title": "CSS知识点总结", "desc": "一、CSS动画 概念 多个静止画面以一定的速度播放时，肉眼产生错觉，误以为是活动的画面。 二.浏览器渲染原理 步骤 构建HTML树（DOM） 构建CSS树（CSSDOM） 将以上两种树合并成一个渲染树"}, {"id": "6996777531902787591", "title": "惊艳的分页滑动效果", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 分页滑动效果：是指当鼠标在页面左边时，左边的页面扩大，右边收缩；当鼠标在页面右边时，右边的页面扩大，左边收缩的一个动画效果，这种效果"}, {"id": "6917479303572226061", "title": "App Store 卡片展开效果", "desc": "大家好，我是 Steven。 本来想只用 HTML 和 CSS 去制作，但最后都要运用到 JavaScript，那我们立即开始吧。 打开 CodePen 编辑器，首先建立 HTML 结构。新增一个 &#x3C;div>，class 是 card，里面新增图片，图片来源使用 Un…"}, {"id": "7005368219053588510", "title": "中秋想看月亮还不想出门怎么办", "desc": "中秋节，团圆的日子，先祝各位节日快乐，身体健康！ 在吃过团圆饭后，我们是不是还有一个传统的习俗，就是赏月。古时候，人们都住在庭院里，没有现在的高楼大厦，吃完饭在院子里一坐，谈话赏月。"}, {"id": "6844903926110617613", "title": "灵活运用CSS开发技巧", "desc": "何为技巧，意指表现在文学、工艺、体育等方面的巧妙技能。代码作为一门现代高级工艺，推动着人类科学技术的发展，同时犹如文字一样承托着人类文化的进步。 每写好一篇文章，都会使用大量的写作技巧。烘托、渲染、悬念、铺垫、照应、伏笔、联想、想象、抑扬结合、点面结合、动静结合、叙议结合、情景…"}, {"id": "6936913689115099143", "title": "字节跳动最爱考的前端面试题：CSS 基础", "desc": "display 设置了 none 属性会隐藏元素，且其位置也不会被保留下来，所以会触发浏览器渲染引擎的回流和重绘。 不会，因为 BFC 是页面中一个独立的隔离容器，其内部的元素不会与外部的元素相互影响，比如两个 div，上面的 div 设置了 float，那么如果下面的元素不是…"}, {"id": "6986084648778465288", "title": "能用CSS实现的就不用麻烦JavaScript", "desc": "前言 凡是可以用 JavaScript 来写的应用，最终都会用 JavaScript 来写。——Atwood定律 虽然万物都可以是JavaScript，但某种程度css的运行效率会比JavaScrip"}, {"id": "6945023989555134494", "title": "CSS 实现优惠券的技巧", "desc": "在实际 Web 开发过程中，总会遇到各种各样的布局。有公司同事问我这样一种布局有没有什么好的实现方式，就是一种在活动充值页非常普遍的优惠券效果，如下 首先，碰到这类布局的最佳实现肯定是mask遮罩。关于遮罩，可以看一下CSS3 Mask 安利报告。这里简单介绍一下 这里的遮罩图…"}, {"id": "7001839827478020104", "title": "学透CSS- 再了解CSS中的overflow以及应用场景", "desc": "网页的设置在很多时候并不是正好满足一页，拿我们经常用的掘金来说，因为使用了数据的分页加载，如果你想看更多的文章的话，需要不停的往下滑动，在浏览器的右边会一直存在着一个滚动条,，这就是这篇文章想要了解的"}, {"id": "7001779860595015688", "title": "设计了一个 CSS 终极解决方案！", "desc": "一、前言 随着产品的迭代，发现现有的产品架构上存在很多的问题，比如性能方面、业务方面、团队协作方面等。作为一个老项目，已经无法再做进一步的优化和完善了，所以这次我们团队打算对整个项目进行一次彻底的重构"}, {"id": "7006997381564596260", "title": "flex弹性布局教程-01-前言和基础概念", "desc": "本篇介绍了学习flex弹性布局前需要的前置知识，介绍了布局的基本知识，flex弹性布局的基本的两个概念：容器和项目。 阅读时间10~15分钟。"}, {"id": "7007669577186279460", "title": "CSS3 实现动画闪烁效果 animation", "desc": "CSS animation 文档 效果图 介绍 animation 属性是一个简写属性，用于设置六个动画属性： animation-name animation-duration animation-"}, {"id": "7005499608394629133", "title": "中秋佳节，猴子也来吃月饼", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 中秋佳节即将到，猴子也来凑热闹，想着中秋，就想到月亮；想到月亮，就想到猴子捞月的故事，自此有了猴子钓月饼的想法。这篇文章主要用CSS完成的，画了"}, {"id": "6979775804758556686", "title": "「百毒不侵(五)」用纯CSS+高中知识+大学知识，精准画一面国旗！！", "desc": "前言 今天是建党一百周年，身为中国人，我骄傲，我自豪，我将用我所学知识，为国家出一份力！！！ 任务 1.创建一个div作为红旗旗面，用CSS控制其比例宽高比为3:2，背景为红色。 2.再创建五个小的d"}, {"id": "6844903902123393032", "title": "你未必知道的49个CSS知识点", "desc": "本文的每一条，都是我曾经发过的掘金沸点，其中有很多条超过了百赞（窃喜）。 鉴于时不时有童鞋翻我以前的沸点，因此，本文收集了个人目前发过的所有CSS知识点动图，以便阅读。 需要说明的是，顺序仍是按当时发布顺序罗列的，还没有系统的总结，多多包涵。 另外这里，老姚谢谢各位一如既往的支…"}, {"id": "7005809807441526814", "title": "css  - 重绘回流", "desc": "chrome performance看浏览器渲染过程 先看一个非常简单的页面代码 然后打开chrome performence查看页面的渲染过程： Send Request ：发送网络请求时触发 Re"}, {"id": "6994237760852721701", "title": "css实现锐化效果", "desc": "“这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战” 锐化效果的实现 我的需求是实现视频透明度、亮度、对比度，饱和度、模糊、锐化等效果的预览，然后传递对应的参数给后端。发现除了锐化，其他功能"}, {"id": "7004857408203784200", "title": "彻底弄懂css中的透明度", "desc": "有时候，我们在css设置透明度来实现特殊的效果。css中共有两种透明度方式：opacity和rgba，那么两者又有什么区别呢？ opacity opacity设置的透明度会被子元素继承。 rgba r"}, {"id": "7002459248433037320", "title": "CSS 实现一个太极图，循序渐进带你了解伪元素", "desc": "本文将从使用 CSS 实现一个太极图，作为出发点，循序渐进，让大家了解到伪元素能解决什么问题？和为什么会有伪元素，那现在就可以动手，写代码，实现一个太极吧。"}, {"id": "7005883976569061406", "title": "如何编写容易理解的CSS样式", "desc": "如何编写容易理解的CSS样式 自 CSS 本身诞生以来，CSS 样式就一直是件事。这是一种很好的练习和学习方式，也是一个有趣的编码挑战。但它有一个大问题：CSS 样式本质上是不可访问的。 在这篇文章中"}, {"id": "7003169181642260488", "title": "现代 Web 开发者问卷调查报告", "desc": "从编程语言、CSS技术、UI技术、数据逻辑、服务端开发、工程技术、研发环境等几个维度对 Web 开发者进行调查。"}, {"id": "6984971905069482021", "title": "前端网页字体优化指南", "desc": "日常开发网页经常会使用一些特殊字体，本文主要从字体格式、按需提取、统一渲染三个方面来谈谈优化字体的常用技巧"}, {"id": "6844903673009553416", "title": "2018前端面试总结，看完弄懂，工资少说加3K | 掘金技术征文", "desc": "文章涉及的内容可能不全面，但量很多，需要慢慢看。来源于各个地方，我花了很长的时间整理，希望对大家有帮助。但是难免会有打字的错误或理解的错误，希望发现的可以邮箱告诉我236490794@qq.com，我会及时的进行修改，旨在能帮到大家，谢谢。 意义：根据内容的结构化（内容语义化）…"}, {"id": "6844903542344384519", "title": "不可思议的混合模式 background-blend-mode", "desc": "本文接前文：不可思议的混合模式 mix-blend-mode 。由于 mix-blend-mode 这个属性的强大，很多应用场景和动效的制作不断完善和被发掘出来，遂另起一文继续介绍一些使用 mix-blend-mode 制作的酷炫动画。 CSS3 新增了一个很有意思的属性 --…"}, {"id": "6844903587013738510", "title": "【译】12个Chrome DevTools小技巧", "desc": "1.元素拖拽在Elements面板，你可以对元素进行任意拖拽操作2.获取当前选中元素在Elements面板选中一个元素之后，在Console中输入$0可以获取到选中元素的引用如果你使用jQuery，那"}, {"id": "6844903501265371150", "title": "实现达到 60FPS 的高性能交互动画", "desc": "译者注：这篇大部分是老生常谈，但也稍微有一些新东西呢，要看到最后哦 =) 每一个追求自然效果的产品都希望拥有一套顺畅的交互流程。但开发者可能会忽略一些细节，导致出现性能糟糕的 Web 动画，不仅会产生“页面垃圾”（janky），最直接的体验就是页面卡顿。开发者往往会花大量精力…"}, {"id": "6844903825229217805", "title": "（05）CSS 给文本加样式：① 字体属性 | CSS", "desc": "前言： 作为 Web 页面最基本的组成部分，“文本”的重要性不言而喻。对于“文本”来说，我们需要掌握两个与之相关的属性——“字体属性”和“文本属性”。 CSS 文本属性：主要定义“文本”的外观——如缩进和水平对齐、垂直对齐、字间隔和字母间隔、文本转换、文本装饰、文本阴影、处理空…"}, {"id": "6844903543002890247", "title": "JSONP的原理与实现以及XSS,CSRF的相亲相爱", "desc": "前端跨域是每个前端人绕不过的坎，也是必须了解的一个知识点。我记得第一次遇到前端跨域这个坑的时候，真是无语到极点，对于一个移动端出身的人来说，觉得这个玩意无可理喻。但是后来慢慢了解，觉得前端的同源策略是非常有必要的。同源策略就是浏览器默认让www.baidu.com不能加载来自w…"}, {"id": "6919674710145892360", "title": "详解CSS中的BFC", "desc": "请注意，BFC并不是一个css属性，也不是一段代码，而是css中基于box的一个布局对象和单位，它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。明确地，它是一个独立的盒子，并且这个独立的盒子内部布局不受外界影响，当然，B…"}, {"id": "6844903592218853384", "title": "使用code-printer生成一份炫酷的简历", "desc": "code-printer的最基本的原理是首先搭起一个骨架，然后通过遍历的方式，一点一点地往骨架里塞东西。 <div id=\"script-area\">: 主要是填JS代码的。但是由于一个字符一个字符往里面填代码会出现大量报错，因此这部分需要一个段落的JS代码全部书写完毕以后，通…"}, {"id": "6844903880749219854", "title": "「css早读课」如何理解Display：None，Block，Inline，Inline-Block", "desc": "display: none vs. visibility: hidden Display: None vs. Visibility: Hidden 如上图所示，使用Display: None，我们可以看出蓝色方块从中“删除”，中间的空位也被绿色的方块补位。 从上图我们看出，使用…"}, {"id": "6844904159817236487", "title": "通过样式调整火狐滚动轴样式", "desc": "然而firefox并不支持-webkit-scrollbar属性，因此在windows环境下Y轴滚动条宽度为17px。 mac环境下的firefox并不会出现这种情况，这是因为mac环境下滚动轴为浮起状态。 虽然说编程最难的是找到问题点，但这往往也是一种自我安慰罢了。 在各个前…"}, {"id": "6844903889615978509", "title": "视觉完美 四角边框（带圆弧）组件 代码编写和分享 Vue.js", "desc": "一开始看网络上的 发现大部分都是用背景渐变完成的 不行 因为弧形的边框背景渐变无法完成."}, {"id": "6974662709295972383", "title": "「HTML+CSS」--自定义加载动画【028】", "desc": "这是我参与更文挑战的第6天，活动详情查看： 更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签作为箭尾，设置为 宽度、高度均为96px 上边框：10px 红色"}, {"id": "6844903696774463496", "title": "css:touch-action导致安卓无法滚动页面", "desc": "相信大家搜css touch-action很容易搜到一批文章，但感觉自己还是需要写下自己这这个过程中的一些探索经历。 之所以写，是因为单独去学知识点或者单独看一篇文章其实很简单的，难的是在自己实践中，因为一个问题找一个方案，然后又引起另外一个问题，而这个不断发现问题的过程非常低…"}, {"id": "6926804951922393095", "title": "悟了悟了，妈妈再也不用担心我不会background-image之径向渐变篇", "desc": "30px 只写一个值的都是 ... center的简写，此处为30px center"}, {"id": "6844903750599983117", "title": "精读《国际化布局 - Logical Properties》", "desc": "“一带一路” 正在积极推动中国的国际化进程，前端网站也面临着前所未有的国际化挑战。那么怎么才能积极响应 “一带一路” 战略，推动网站的国际化工作呢？可以先从国际化布局开始考虑。 本周精读的文章是：new-css-logical-properties，通过一种新的 CSS 技术，…"}, {"id": "6920460099169304590", "title": "CSS中的box-shadow", "desc": "元素的阴影是跟元素尺寸一样，默认也是叠在一起的，但是只有元素之外的部分才能看见，为了能够看见阴影，需要把阴影挪动一点位置。 默认情况下阴影的尺寸跟元素的尺寸一样，扩散半径就是用于修改阴影的尺寸。spread-radius表示四个方向增大或减小的尺寸。"}, {"id": "6844903552872087566", "title": "[中文] Bootstrap 4 正式发布", "desc": "经过我们多年的努力， Bootstrap 4 终于来了！整个团队和我已经无法用语言描述对这个版本发布的喜悦之情，但是我会尽力去表达的。 感谢所有人，特别是团队成员，以及所有在 pull request 中提供代码或提出问题的人。谢谢。 自从我们最后一次测试，我们一直在努力稳定我…"}, {"id": "6844904037498748941", "title": "Sass 使用总结", "desc": "世界上最成熟、最稳定、最强大的专业级 CSS 扩展语言！ - Sass 官网。在 Sass 中，你可以像俄罗斯套娃那样在规则块中嵌套规则块。"}, {"id": "6907964701180149767", "title": "CSS各种样式代码实现", "desc": "设置一个元素的transform-style:preserve-3d，只影响这个元素的子元素（如果孙元素也有3d效果，那么还必须给子元素设置preserve-3d）。这样所有子元素都可以相对与父元素的平面进行3d变形操作。和二维变形一样，三维变形可以使用transform属性来…"}, {"id": "6844903966292049934", "title": "CSS3: Mac OS - light 和 dark 模式兼容属性perfers-color-scheme", "desc": "Mac OS 和 ipad OS ，iOS 都上了dark 和 light 模式，前端的兼容不容急缓，这里来了解一下一个 css 的新属性 perfers-color-scheme。 Mac OS 在 Mojave在支持暗黑模式以后，随之 chrome 和 safari 也支持…"}, {"id": "6969766147457548301", "title": "css选择器-child和-of-type的使用差异", "desc": "平时开发中经常 -child 和 -of-type 傻傻分不清楚，本文将以:first-child和:first-of-type为例说明其差异。"}, {"id": "6844904087486464007", "title": "CSS中容易被忽视的 position属性sticky", "desc": "position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky，这里sticky是CSS3新发布的一个属性。我今天重点要说的就是sticky属性 position:sticky 被称为粘性定位元素（…"}, {"id": "7000645664426164231", "title": "CSS 文本样式", "desc": "字体样式和文本样式的区别：字体样式针对的是字体本身的效果，而文本样式注重整个段落的效果，所以在使用过程中用 font 和 text 来区分。"}, {"id": "6844903508760608776", "title": "web调试优化-chrome开发者工具不完全指南", "desc": "chrome，对于web开发者而言，都是很熟悉的一个浏览器，无论是从事的是前端，后端或者是测试！简单、快捷和功能强大使它受到了许多开发者的青睐！在浏览器排行上，chrome最多人使用，而且占了浏览器份额的半壁江山。可见其欢迎程度。作为一个前端开发者，我也是注重chrome的使用…"}, {"id": "6999152398761951240", "title": "【CSS】十分钟弄懂flex布局 - 弹性盒 - 伸缩盒 - 实战", "desc": "先快速搞定Flex弹性盒模型布局的基本语法，然后利用flex进行一次实战，写一个携程手机网的静态页面，快速上手，快速实战！~"}, {"id": "6995118812458647583", "title": "CSS 文档中定位指南：static、relative、absolute、fixed、sticky", "desc": "CSS 中 position 属性用于指定元素的定位方法的类型（static、relative、absolute、fixed、sticky）。"}, {"id": "6999271690530209822", "title": "CSS盒模型", "desc": "本文已参与掘金创作者训练营第三期「高产更文」赛道，详情查看：掘力计划｜创作者训练营第三期正在进行，「写」出个人影响力。 1. 类别 IE盒模型-border-box W3C标准盒模型-content-"}, {"id": "6844903689124053005", "title": "让 Chrome 崩溃的一行 CSS 代码", "desc": "一般的 CSS 代码只会出现 UI 版式或者兼容性方面的小问题。但这里我们要分享一行有趣的 CSS，它可以直接让你的 Chrome 页面挂掉 :) 其实这台机器只有 8GB 内存，不过这不重要了。和让 JS 崩溃的红线容量 4GB 比起来，果然还是 CSS 更强大呢 :) 这行…"}, {"id": "7000382769918558215", "title": "纯CSS绘制曲线 | radial-gradient", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 在昨天的文章中：clip-path的一个重要的函数path所引入的曲线绘制问题我们提到，可以通过radial-gradient绘制曲线，那"}, {"id": "6992923072168886309", "title": "5分钟快速上手 CSS 媒体查询", "desc": "媒体查询 （英文：Media queries ），这个特性非常的实用，尤其是需要根据设备的类型或者根据特定的特征和设备参数，来修改网站中的CSS样式。 例如视口宽度小于400px的时候，媒体查询的代"}, {"id": "6914846392808636429", "title": "Web 帧动画解决方案 - APNG原理与实现", "desc": "作为前端同学，或多或少都会接到动画需求。如果是有规律性的动画还是相对容易实现的，但如果是比较复杂的帧动画，我们用 CSS 实现的话，就非常容易造成如下情况，设计师是卖家秀，我们开发的是买家秀。 或许你会想到用 GIF 实现，但是 GIF 经常会有杂边，无法满足设计师对精致度的要…"}, {"id": "6991274669600931853", "title": "自适应布局之初识flex（一）｜8月更文挑战", "desc": "自适应布局之初识flex（一）说起自适应、flex算一哥么？下面将结合一些例子我们一起来简单认识下flex吧。"}, {"id": "6956780666142851109", "title": "关于在Less中使用calc()的特殊现象", "desc": "在Less中使用calc计算的时候究竟需不需要特殊处理？以及不做特殊处理时会发生什么问题？可以不做特殊处理的原因是什么？"}, {"id": "6990928915120275470", "title": "前端复习-----css, html篇", "desc": "html, css学习总结。学习于github, 掘金，思否等大佬的总结。为以后面试，工作为铺垫..."}, {"id": "6906472194721710088", "title": "你不知道的 CSS 进度条", "desc": "进度条是一个非常常见的功能，实现起来也不难，一般我们都会用 div 来实现。 作为一个这么常见的需求， whatwg 肯定是不会没有原生组件提供（虽然有我们也不一定会用），那么就让我们来康康有哪些有意思的进度条实现方式。 这种方法的核心就是以当前盒子为容器，以 ::before…"}, {"id": "6844903635248218126", "title": "CSS世界中那些说起来很冷的知识", "desc": "使用CSS让元素不可见的方法很多，剪裁、定位到屏幕外、透明度变化等都是可以的。虽然它们都是肉眼看不见，但背后却在多个维度上都有差别 在Chrome和Safari浏览器，则根据父元素是否是否为none来影响图片加载情况，父元素带有display:none，图片不加载。 2. 与c…"}, {"id": "7002900566800072741", "title": "css样式篇：与背景相关的样式", "desc": "background-origin 设置元素背景图片的原始起始位置。 语法： 参数分别表示背景图片是从边框，还是内边距（默认值） ，或者是内容区域开始显示。 效果如下： 需要注意的是，如果背景不是no"}, {"id": "6993679610567196708", "title": "5.不常见的css", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 1.响应式图片 picture 如果<picture>元素与当前的<audio>,<video>元素协同合作将增强响应式图像工作的进程，它允"}, {"id": "7001803579988115464", "title": "CSS 层叠以及优先级", "desc": "、CSS层叠 层叠是CSS的一个基本特征，定义了如何合并来自多个源的属性值的算法。 参与CSS层叠计算的范围：只有属性名值对参与CSS层叠计"}, {"id": "6844903682010513415", "title": "利用CSS改变图片颜色的100种方法！", "desc": "你以为这些是经过PS软件处理出来的？不不不，纯粹的是用css写出来的，很神奇把。 CSS滤镜（filter）属提供的图形特效，像模糊，锐化或元素变色。过滤器通常被用于调整图片，背景和边界的渲染。 MDN CSS标准里包含了一些已实现预定义效果的函数。 调整图像的对比度。 给图像…"}, {"id": "6880111680153059341", "title": "CSS盒模型之内边距、边框、外边距 十九问 （持续更新）", "desc": "但是，盒模型有标准盒模型和IE的盒模型。 很简单，通过设置 box-sizing:content-box(W3C)/border-box(IE)就可以达到自由切换的效果。 这种方法只能获取使用内联样式的元素的宽和高。 这种方法获取的是浏览器渲染以后的元素的宽和高，无论是用何种方…"}, {"id": "6844903696443129869", "title": "H5实现移动端图片预览：手势缩放， 手势拖动，双击放大...", "desc": "自定义手势事件, （双指缩放，滑动，双击。。。） 图片预览即点击图片在页面中插入一个黑色全屏背景框并将图片居中显示。封装时，为了只对指定图片添加功能，可通过监听指定类名或添加某种属性的img标签监听；另外需在对背景框绑定点击事件，退出预览模式。一下是一个简单示例代码："}, {"id": "6844903512581603335", "title": "CSS3热身实战--过渡与动画（实现炫酷下拉，手风琴，无缝滚动）", "desc": "在自己的专栏上写了十几篇文章了，都是与js有关的。暂时还没有写过关于css3的文章。css3，给我的感觉就是，不难，但是很难玩转自如。今天，就用css3来实现三个特效，希望这三个特殊能让大家受到启发，利用css3做出更好，更炫的动画效果，并且对比这三个特效和JS特效的对比，希望…"}, {"id": "6844903945211478030", "title": "别再说Transition 无法过渡display了", "desc": "我们可以得知, 浏览器的UI Render是在每个macroTask最后清空microTask队列后才会触发一次, 但是浏览器会根据实际情况来确定是否需要渲染, 通常在每隔16.7ms的情况下会渲染一次, 在此期间，浏览器会将所有的DOM操作推入到队列中，在进行渲染的时候会一个…"}, {"id": "6844903510933258247", "title": "聊聊为什么淘宝要提出「双飞翼」布局", "desc": "突然有一天，脑之里不知怎地蹦出一个词，「双飞翼」，这是很久以前的淘宝提出的一种三栏布局优化方案，然而，时间久了已经不记得（换句话说是不理解）为啥要提出这个布局了，昨天在 SF 上发起了一个提问，但良久未有人答复，幸得@王能全是谁 提醒，终于回想起「双飞翼」的完整意义了。谨以此文…"}, {"id": "6978385634188591134", "title": "10分钟学会css原生变量", "desc": "这是我参与更文挑战的第18天，活动详情查看 更文挑战 当我们项目有大量css代码时，通常就会有很多重复的值。比如同样一个颜色值可能在成千上百个地方被使用到，如果想要改这一个值，一个一个替换很显然是很不"}, {"id": "6894827721449275406", "title": "【推荐收藏】10 个最佳实践来改良你的 CSS", "desc": "1. 你真的需要框架吗？ 首先，决定是否真的需要使用 CSS 框架。现在，有许多替代轻量级健壮（robust）框架的方法。通常，你不需要使用框架中的所有选择器，所以你的包中会包含死代码（dead code）。 如果你只对按钮使用样式，可以将它们加入到你的 CSS 文件，并去掉其…"}, {"id": "6986531145902981157", "title": "「HTML+CSS」--自定义加载动画【041】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为48px 使用flex布局 其中的元素左右居中 效果图如下 步骤2 使用span::before"}, {"id": "6844903973627887624", "title": "深入理解position sticky 粘性定位", "desc": "指的是粘性定位元素最近的可滚动元素（overflow属性值不是visible的元素）的尺寸盒子，如果没有可滚动元素，则表示浏览器视窗盒子。 它的定位效果完全受限于父级元素们。如果父元素的overflow属性设置了scroll，auto,overlay值，那么，粘性定位将会失效 …"}, {"id": "6989606530865692680", "title": "关于移动端适配的实现", "desc": "平时在PC端，我们一般做的可能就是固定一个中间宽度，然后用媒介查询去做响应式之类的操作。但是，在移动端设备上，由于市面上机型的屏幕宽度非常多，我这里就总结一下适配的方案。"}, {"id": "6990265515029577758", "title": "移动端公共样式——优惠券", "desc": "移动端优惠券的样式设计 UI小姐姐给了一套优惠券的样式，我看了几张效果图后心里就已经想好几种方法来实现了，但是等我看完后就发现那个想法是行不通的，因为有些页面是有不同的背景色，渐变色，图片效果等 1、"}, {"id": "6844903597096828936", "title": "论如何用Vue实现一个弹窗-一个简单的组件实现", "desc": "最近在使用element-ui框架，用到了Dialog对话框组件，大致实现的效果，跟我之前自己在移动端项目里面弄的一个弹窗组件差不太多。然后就想着把这种弹窗组件的实现方式与大家分享一下，下面本文会带着大家手摸手实现一个弹窗组件。 本文主要内容会涉及到弹窗遮罩的实现，slot插槽…"}, {"id": "6952892539653324831", "title": "面试题之CSS", "desc": "前言 前几天听过学长的大厂面试经历后，我深感自己的基础知识的不足(我是fw，呜呜...)，今天就借此讲一个有关CSS的一连串面试知识，希望大家能有所收获。 盒模型 CSS 盒子模型(Box Model"}, {"id": "6844903681599488007", "title": "移动端页面分享快照生成总结", "desc": "之前经常在微信中收到一些朋友分享带页面信息的图片（分享图片），这种分享方式相对于寻常的结构化分享（链接分享）更容易于表现页面内容。公司的产品童鞋也想在活动页面中生成一张分享图片（带用户专属二维码的），引导用户分享传播。 刚开始做这个功能时，我们是由后端根据用户的信息生成一张专属…"}, {"id": "6917034338479669262", "title": "【干货】使用 CSS Scroll Snap 优化滚动，提升用户体验！", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 你是否经常希望有一个CSS特性可以轻松创建一个可滚动的容器? CSS scroll snap 可以做到这一点。在早期的前端开发中，我依靠 JS 插件来创建滑块组件…"}, {"id": "6844903650939109384", "title": "Webpack 4 和单页应用入门", "desc": "可以说是我目前看到最详细的 webpack 4 入门文章。 基本看完这个，基本也算一个合格的初级webpack配置工程师了。"}, {"id": "6844903622354927624", "title": "真·数字滚动特效", "desc": "number-flip: Change number with flipping animation."}, {"id": "6905970139934654477", "title": "HTML/CSS常见题，淦就完了", "desc": "块级元素：总是独占一行，可以设置高度和宽度。没有设置宽度时为100%。常见的块级元素有：h1-h6 行内元素：和其它元素在一行，不可以设置高度、宽度和内边距。 宽高就是内容的高度，依靠自身字体大小和图形支撑结构，不可以改变 。可以设置padding和margin-left以及m…"}, {"id": "6936817559626842120", "title": "用CSS实现渐变边框，实现过程很简单最终效果却很赞", "desc": "一个看起来很酷的网站，CSS肯定是头号功臣，但平时由于开发技术、周期上的限制，大部分时间都是使用现成的UI框架进行开发，这就会造成好像开发出来的网页都一个模样，就跟使用WordPress搭建出来的网站一样，看起来貌似都一个样。 今天给大家分享的就是如何使用CSS开发一个渐变的盒…"}, {"id": "6961362732516507656", "title": "八.CSS盒模型", "desc": "CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。 下面的图片说明了盒子模型(Box Model)："}, {"id": "6994070933954625573", "title": "CSS预编译器  less工作原理", "desc": "CSS预编译器 基本原理 编写css时，受限于css语言本身，常常难以处理一些问题： 重复的样式值：例如常用颜色、常用尺寸 重复的代码段：例如绝对定位居中、清除浮动 重复的嵌套书写 由于官方迟迟不对c"}, {"id": "6986272360772927496", "title": "webpack5入门到精通(二)（css篇）", "desc": "webpack 5入门到精通（二）css打包篇。文章中若是有错误或者不准确的地方，欢迎大家指出讨论。"}, {"id": "6998498465302970376", "title": "纯CSS绘制太极图", "desc": "这是我参与8月更文挑战的第20天，活动详情查看：8月更文挑战 问题起源 前几天不知道写什么，在沸点上问工友们（敲黑板，官方口径）前端还有什么画起来有点儿意思的： CSS不知道写啥了，兄弟们给出道题目吧"}, {"id": "6901565362693734407", "title": "前端1px问题及解决方案", "desc": "在项目开发过程中，设计师经常会说，这里边框像素边框不对，要求1像素但是实际是2像素，当我们去查代码时我们写的就是1px，这是前端开发者经常遇到的一个问题，也就是1px像素问题。 要了解并解决问题，我们首先需要了解其原理才能从根本上找到解决方案。 首先我们需要对物理像素，逻辑像素…"}, {"id": "6988867814408847390", "title": "CSS相关", "desc": "画一条0.5px的线 采用meta viewport的方式 这个也是淘宝触屏采用的方式，常用的移动html viewport的设置如下 具体意思就不多提，它就是让页面的高宽度即为设备的高宽像素，而为了"}, {"id": "6978488036677910541", "title": " 纯css实现：理发店门口的转灯效果", "desc": "哈喽，艾瑞巴蒂，周末的时光总是特别的快，周末的床也总是格外的有吸引力，像一块吸铁石，在周末的早上，我不是大冰块，而是一个小铁块。今天晚上去遛旺旺，路过一家理发店，旺旺望着理发店门口的旋转灯，看起来很…"}, {"id": "6844904150954672142", "title": "CSS中的间距，前端开发中各种设置间距的优点缺点及实例", "desc": "如果两个或多个元素很接近，那么用户就会认为它们以某种方式属于彼此。当对多个设计元素进行分组时，用户可以根据它们之间的空间大小来决定它们之间的关系。没有间距，用户将很难浏览页面并知道哪些内容相关而哪些内容无关。 在本文中，我将介绍有关CSS中的间距，实现此间距的不同方法以及何时使…"}, {"id": "6951650430384341000", "title": "[实践总结]纯css实现动态边框", "desc": "背景这几天工作中遇到一个交互需求，要求实现一个效果，当鼠标移入一个元素的时候，元素出现一个动态的边框，如图：动态边框CSS3 BackgroundCSS3对于background做了一些修改，最明显的"}, {"id": "6996918972251635749", "title": "tailwind使用指南——起步", "desc": "Tailwind CSS 是一个功能类优先的原子级 CSS 框架。没人能逃出tailwind真香定理。"}, {"id": "6996907965139648526", "title": "CSS的盒模型", "desc": "CSS盒模型本质上是一个盒子，盒子包含着HTML元素。无论是div、span、还是a都是盒子。 但是，图片、表单元素一律看作是文本，它们并不是盒子。这个很好理解，比如说，一张图片里并不能放东西，它自己"}, {"id": "6844903791246983176", "title": "如何借助SVG+CSS用2个小时撸完一个网易云音乐的动效海报（可控制速度）", "desc": "因为平时也关注网易UEDC的订阅号，前几天就看到了这么一个动效，主题是《网易云音乐2018年度听歌报告》，内容是一个人在努力蹬车因为构图简单，创意又不错，所以就试了下用SVG+CSS动画实现起来的难度，大概费时两个小时左右，效率还是蛮高的，总比用AE实现起来快的多得多，下面就捋…"}, {"id": "6882704719882485774", "title": "图文并茂总结7个工作中常用的css3案例，带你了解冷门却实用的特性！", "desc": "最近看了《css 揭秘》这本神书，学到了很多技巧，工作中遇到的一些问题在这本书中得到了很好的解决。这篇文章也不是把书中的内容随便抄一下就拿来给大家说，我会在此基础上向外扩展一些，请求大家理性评论！另外，有几个案例是我工作中遇到过的比较棘手的问题的解决方案，总结出来让大家有个印象…"}, {"id": "6906476294423183368", "title": "h5适配ios屏幕", "desc": "这篇文章算是迟来的总结，最近做了一个h5项目内嵌到app页面内联，默认情况下app那边不会做任何处理，也就是顶部和底部需要额外处理一下做法默认情况下ios的顶部状态栏是20px，如果存在刘海则是44p"}, {"id": "6962438841743441927", "title": "【前端css】iphone webkit 如何禁止水平拖动", "desc": "在做移动端需求时碰到这样的场景，我们需要在某个区域实现内容上下滚动,但是在iphone的webkit浏览器，我们发现仍然可以在区域内，`左右拖动`，"}, {"id": "6993538860429000711", "title": "CSS基础知识-背景以及颜色渐变", "desc": "这是我参与8月更文挑战的第5天，活动详情查看： 8月更文挑战 CSS 背景属性用于定义HTML元素的背景 background-img：设置背景图片 语法：background-image:url(相"}, {"id": "6987626124658343950", "title": "CSS3 filter滤镜属性及小程序高斯模糊的使用", "desc": "CSS3 语法 浏览器兼容性 函数一览表(摘操自菜鸟教程) Filter 描述 none 默认值，无效果 blur(px) 给图像设置高斯模糊。\"radius\"一值设定高斯函数的标准差，或者是屏幕上以"}, {"id": "6844904082751111176", "title": "前端响应式布局原理与实践", "desc": "作为一个前端开发者，响应式网站开发是必备技能之一。响应式有它的很好的优点，也有它一定的缺点。这就需要我们在开发的时候做出取舍。对于内容较少、主要为展示类网站，故采用响应式；对于内容多，管理类的网站采用分开开发的方式，不同设备采用不同的一套代码。本文会主要探讨响应式布局原理和技巧…"}, {"id": "6844903570446237703", "title": "❤️❌  如何用vue制作一个探探滑动组件 ", "desc": "一. 功能分析 二. 具体实现 1. 堆叠效果 2. 图片滑动 3. 条件成功后的滑出，条件失败后的回弹 4. 滑出后下一张图片堆叠到顶部 重新堆叠是组件最后一个功能，同时也是最重要和复杂的功能。在我们的代码里，stack-item的排序依赖绑定:style的transform…"}, {"id": "6991819327049564196", "title": "详细认识下flex布局父元素身上的属性｜8月更文挑战", "desc": "详细认识下flex布局父元素身上的属性｜8月更文挑战 上一节简单介绍了下flex的作用以及关于flex的两个小案例，来 超链接自适应布局之初识flex（一），接着上章节的进度，我继续去描述...."}, {"id": "6844903620769497102", "title": "小程序自定义modal弹窗封装实现", "desc": "点击某个按钮，弹出 modal框，里面的内容可以自定义，可以是简单的文字提示，也可以输入框等复杂布局。操作完点击取消或确定关闭 modal. 将下面的 modal.wxml 、modal.wxss 、modal.js 、modal.json 四个文件复制到对应位置即可。 在mo…"}, {"id": "6943947537762123784", "title": "纯css实现图片在固定大小下的最大展示--img-fit实现", "desc": "但是这样会有一个问题，就是需要发起两个请求，这样导致服务器压力增大，或者对象存储多收钱，或者展示慢的问题。 这时候是完成了，但是假如我们需要给图片不展示的时候出现一个默认图，怎么办？backgroundImage可没有img的onError. 于是backgroundImage…"}, {"id": "6987301742673133581", "title": "「HTML+CSS」--自定义加载动画【043】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为48px 背景色：白色 效果图如下 步骤2 span标签圆角化 效果图如下 步骤3 为span添"}, {"id": "6844903648800014350", "title": "create-react-app 创建项目有关 less 的若干问题", "desc": "重新 npm start，项目可以正常启动。 Ant Design 默认的 iconfont 文件托管在 iconfont.cn 并默认使用平台提供的 alicdn 地址，公网可访问使用。 最新的 iconfont 文件可以到 此链接 下载。 由于项目使用的是 create-r…"}, {"id": "6922743693086556168", "title": "Grid布局+拖拽", "desc": "最近公司项目组觉得阿里云或者华为云控制台的自定义的功能非常好，让我进行一下调研，而我身为一个菜鸟前端，我只能一点点的研究了。 暂时实现了一个小的可以重排或者替换的demo作为基础，后续在进行更深度的开发。 主要这个是用的grid布局，每一个单元格目前都是grid-templat…"}, {"id": "6844903634048647182", "title": "【译】CSS 自定义属性的策略指南", "desc": "关于作者 Mike 是来自澳大利亚的独立网站开发人员，曾在澳大利亚的一些大型网站和一些小型社区工作过...... 关于Michael的更多信息... 自定义属性有很大的潜力可以改变我们编写和组织 CSS 的方式，并且在一定程度上改变 JavaScript 与 UI 组件的调用方…"}, {"id": "6844903606823419912", "title": "CSS3绘制腾讯QQ企鹅", "desc": "开始着手于QQ 企鹅的绘制, 第一步基本框架的绘制。 通过对Logo图像的观察，按照层次划分来组合最终的效果。选择使用绝对位置position:absolute;来布局各个元素。主要划分为头部，身体，围脖，双手，双脚。 基本框架结构就是这样的，QQ 对于容器是通过绝对定位来对每…"}, {"id": "6959778984204697608", "title": "Flex布局空间分配", "desc": "Flex布局方案很适合应用与多栏等高布局场景，本文将深入分析flex-grow、flex-shrink，flex-basis三个属性，并探讨flex在空间布局中的策略"}, {"id": "6844903583368871950", "title": "《css世界》的那些实用技巧", "desc": "下面所有的内容都来至张鑫旭所著的《css世界》。 《css世界》这是一本专门写css的书，书中并没有涉及css3的知识，但是它所展现的东西很多都是我从未知道或以前未重视的。这是一本能够开阔视野的书，我把这本书推荐所有从事前端的人。 下面都是我在看这本书所记录的一些新奇但实用的布…"}, {"id": "6986902899460669470", "title": "终于了解了transition🤣🤣", "desc": "transition transition 过渡 （在给定的时间内平滑地改变属性值),所以transition是有个时间段的， 如果没有持续时间是不会出现过渡效果的。 首先了解一下，各个浏览器对这个属"}, {"id": "6996912316524527624", "title": "css 写六边形", "desc": "css实现六边形 css实现六边形 css实现六边形 css实现六边形 css实现六边形 css实现六边形"}, {"id": "6844903687240810509", "title": "浅谈移动端中的视口（viewport）", "desc": "在 PC 端，视口指的是浏览器的可视区域，其宽度和浏览器窗口的宽度保持一致。在 CSS 标准文档中，视口也被称为初始包含块，它是所有 CSS 百分比宽度推算的根源，给 CSS 布局限制了一个最大宽度。 而移动端则较为复杂，它涉及到三个视口：布局视口（Layout Viewpor…"}, {"id": "6923866099981893639", "title": "【前端】position:sticky解析 这次应该大结局了", "desc": "之前觉得自己懂了，搞了个总结：【前端】sticky粘性定位 。然后跟人对线，发现自己的确有疏漏，没杠过，所以又来了。 MDN上的资料感觉多少还是有点模糊，所以这次直接到w3c CSS Positioned Layout Module Level 3 去做阅读理解了。而且不随便乱…"}, {"id": "6894890214330908679", "title": "使用CSS ::marker的自定义项目符号", "desc": "现在，在使用 &#x3C;ul> 或 &#x3C;ol> 时自定义数字或项目符号的颜色，大小或类型很简单。 感谢CSS ::marker，我们可以更改内容以及项目符号和数字的某些样式。 当Chromium 86发布时，::marker 将在桌面和Android的Firefox、…"}, {"id": "6844903943298891790", "title": "移动端适配之三：使用meta标签设置viewport", "desc": "前两篇博客，把像素和viewport的概念讲清楚了。现在开始，用meta标签来设置viewport。 meta标签里面的内容，主要是提供关于这个HTML页面的元信息的。简单点说，就是你用这些信息来告诉浏览器，应该如何解析这个HTML文件。比如 这个标签是告诉浏览器，该HTML文…"}, {"id": "6844903817150988296", "title": "三列自适应布局(圣杯布局)", "desc": "简单来说就是页面分为左中右3个部分，其中左右两侧固定宽度，而中间部分自适应。 假设每列的高度为150px，左列宽度为200px，右列宽度为150px，中间部分自适应。 设置margin-right:-150px;right上移到center一行，完成圣杯布局。此时改变窗口大小，…"}, {"id": "6899285757464084488", "title": "vue-js仿微信聊天窗口展示组件", "desc": "支持文本和图片的展示（后续将支持对语音类的展示）。 支持滚动加载数据，其中滚动加载依赖我另外一个组件scrollLoader.vue（《Vue.js上下滚动加载组件》）。"}, {"id": "6950923184023535653", "title": "css中的grid布局", "desc": "CSS 网格布局擅长于将一个页面划分为几个主要区域，以及定义这些区域的`大小、位置、层次`等关系（前提是 HTML 生成了这些区域）。"}, {"id": "6844903585533132813", "title": "从输入域名到最后呈现经历的过程", "desc": "1.浏览器的地址栏输入URL并按下回车。 2.浏览器查找当前URL是否存在缓存，并比较缓存是否过期。 3.DNS解析URL对应的IP。 4.根据IP建立TCP连接（三次握手）。 5.HTTP发起请求。 6.服务器处理请求，浏览器接收HTTP响应。 7.渲染页面，构建DOM树。 …"}, {"id": "6844903592915107847", "title": "Webpack 4 和单页应用入门", "desc": "是的，即使是外国佬也在吐槽这文档不是人能看的。回想起当年自己啃 webpack 文档的血与泪的往事，觉得有必要整一个教程，可以让大家看完后愉悦地搭建起一个 webpack 打包方案的项目。 官网新的 webpack 文档现在写的很详细了，能看英文的小伙伴可以直接去看官网。 可能…"}, {"id": "6844903760519495687", "title": "粉丝群CSS小测第1期答疑文字版", "desc": "左右排布的列表，左侧是标签信息，右侧是描述信息。 也欢迎关注这个github项目。 今天上午在B站进行了答疑直播，本文是整理后的文字版。 1. 通配符reset的问题 这是一直偷懒的CSS reset写法，我个人是不推荐这种写法的，一来带来比较多的资源开销，而且这些开销完全是没…"}, {"id": "6844903841624752141", "title": "移动端布局适配hotcss+postcss-pxtorem", "desc": "本来团队是搞PC端开发的，前段时间架构调整，移动端人力不足，所以团队把移动端的工作也一起接过来了。 不过由于我们团队以前没开发过移动端的东西，技术积累较少，因此花费了不少时间在基础技术积累上面。 这次介绍一下我们的移动端适配方案的改进过程。 最开始进行移动端开发时，由于工期比较…"}, {"id": "6844903621474123789", "title": "SVG Path路径在网页开发的作用", "desc": "SVG是矢量图形表示，它的一个强大之处在于path标签可以表示任意的矢量形状，利用好这个path可以做出很多传统html/css做不出来的效果。下面举几个例子。 1. 做路径动画 利用animateMotion结合path做的动画，具体说明可见上文。 2. 实现不规则形状的点击…"}, {"id": "6959407827047677965", "title": " css的Transform详解", "desc": "Transform字面上就是变形，改变的意思。 在CSS3中transform主要包括以下几种： 旋转rotate 扭曲skew 缩放scale 移动translate 矩阵变形matrix。"}, {"id": "6992729710492909582", "title": "CSS 会阻塞 DOM 解析吗？", "desc": "### 浏览器的渲染 浏览器的渲染流程如下： ![图：WebKit 主流程](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dea0a15"}, {"id": "6932393792519536647", "title": "CSS多种三列自适应布局实现", "desc": "为了按照常规WEB布局，这里全部采用拥有header和footer模式进行左中右布局编写。 赋予左中右三列父级display: table, width: 100%，分别赋予左中右三列display: table-cell，分别赋予左右Aside width即可。 赋予左中右三…"}, {"id": "6954550167307550757", "title": "[CSS奇技淫巧]CSS画爱心", "desc": "需求/功能: 怎么用CSS+HTMl绘画出一个爱心. 分析: 爱心可以通过一个正方形+两个圆形组合成. 先画一个正方形+圆形, 摆放位置如下: 再添加上一个圆形. 最后再将整个图形顺时针旋转45度即可"}, {"id": "6844903682669019144", "title": "求职季，前端面试送给你|掘金技术征文", "desc": "最近好多小伙伴都跳槽去找工作，我只能在心里默默的支持他们能找到一份好的工作，这份前端面试大全送给我的小伙伴们，主要说的是前端一些常用的一些知识，说的不对的地方请小伙伴们即使指正出来，自己同时也回顾下这些知识。主要分以下几个方边来说： 1.Doctype作用？标准模式和兼容模式区…"}, {"id": "6976404044222840868", "title": "宝， 来学习一下CSS中的宽高比，让 h5 开发更想你的夜！", "desc": "在图像和其他响应式元素的宽度和高度之间有一个一致的比例是很重要的。在CSS中，我们使用padding hack已经很多年了，但现在我们在CSS中有了原生的长宽比支持。"}, {"id": "6896707010000060429", "title": "实战|使用CSS3 Cubic-Bezier创建动画链接悬停效果", "desc": "我们将使用CSS3动画过渡来创建简单但引人入胜的链接悬停效果，将鼠标悬停在链接上时，会弹出一个小弹出框。 我们还将看一下CSS3 Cubic-Bezier（贝塞尔）曲线，它是CSS过渡，为弹出框提供了更加流畅的运动，而不是僵化的机械运动。 这是我们链接的HTML，图标来自ico…"}, {"id": "6900109008318054413", "title": "css 各种居中方法总结", "desc": "在使用 css 设置页面样式时会经常遇到需要居中的情况,下面我总结了一些 css 在不同条件下实现居中的方法。有一些方法具有一些 hack 味道,大家看看就好。"}, {"id": "6997578952000684062", "title": "基础知识常被4：圣杯布局", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 已经更文4天 (基础知识常被4：圣杯布局) 昨天工作比较忙，没有及时更新文档，趁着深夜发出来。所谓为什么叫圣杯布局，我的感觉可能是做出来的效"}, {"id": "6961209066782162951", "title": "仅用CSS实现多彩、智能的阴影", "desc": "背景 有没有想过如何创建从前景元素中继承某些颜色的阴影效果？前几天我经过家得宝他们正在大规模展销正在出售的智能灯 ，其中一种是一系列灯泡位于电视机后面，它们会投射出与电视机前景屏幕"}, {"id": "6990256017460166687", "title": "移动端公共样式整理", "desc": "移动端页面的踩坑总结： 1、解决手机上点击按钮的时候出现默认蓝色背景 2、隐藏微信浏览器的滚动条 3、行数展示控制 4、图片的不高清，可以通过更换图片来解决，也可加入下方代码，可以让图片更加清晰一点 "}, {"id": "6844903665422041095", "title": "微信小程序实现商城案例（赋源码)", "desc": "1、如果对你有帮助别忘了给作者 star、fork、打赏 三连。"}, {"id": "6844904119279452168", "title": "【译】不止是 box-shadow，用 css 能表现的各种影子，以及各种陷阱！", "desc": "一般要加阴影，就会想到要用 css 的 box-shadow 吧，实际上还有好几种表现方式。暂且不说网页，在逐年变化的设计潮流里，怎么处理阴影也是很重要的一个课题。 就比如说早些时间流行的长投影，以及今年开始流行的 Neumorphism（拟态）什么的。其独特的影子表现手法，也…"}, {"id": "6844904198090260488", "title": "12个令人惊叹的CSS实验项目", "desc": "你可能认为 CSS 只是一种简单地为网页设计样式的语言，但它的功能比你想象的要多得多。 从逼真的图像到甚至是视频游戏，你会惊讶地看到一个优秀的开发者可以用 CSS 做些什么。 这里有各种滤镜和特效，它们都是开源的，可以用在你自己的 web 项目中。 这些模块有的机遇 JavaS…"}, {"id": "6966605541263015950", "title": "【不一样的CSS】实现Sticky Footer布局的 4 种方式", "desc": "【不一样的CSS】实现Sticky Footer布局的 4 种方式 所谓的 Sticky Footer 布局并不是一种新的前端技术和概念，它就是一种网页布局。如果页面内容不够长时，底部栏就会固定到浏览"}, {"id": "6844903781591842829", "title": "用纯 CSS 实现镂空效果", "desc": "近来研究了一下镂空效果。 背景被裁剪为文字的前景色。第一次是在 CSS-Tricks 看到的这个用法: 在 CSS-Tricks 网站上，这个玩意用得到处都是。 这样，做简单的图片背景镂空效果便不再困难了。关键代码只有几行。 就这几行，视觉上会就会有大变化。前后对比： back…"}, {"id": "6977570135846420487", "title": "如何让Web字体加载的用户体验更好", "desc": "当用户第一次访问我们的网站时，如果网站使用的时Web字体，通常时需要下载所有的Web字体的。 在大多数情况下，当HTML文件已经在浏览器中加载完成后，Web字体文件可能仍然还在下载中。 这种情况下，浏"}, {"id": "6998886985230188575", "title": "CSS3新特性", "desc": "一、CSS3新增选择器 1、子级选择器 用于选取带有特定父元素的元素 书写语法：element1 > element2 注： 如果element2元素不是父元素element1的直接子元素，则不会被选"}, {"id": "6973859374280540173", "title": "谈谈css中的渐变", "desc": "css渐变让开发得以通过css代码来绘制简单渐变图形的能力，并且支持组合成更复杂的图形。本文介绍一下css渐变的定义、分类以及相应的语法，并在文末展示几个使用渐变的例子。"}, {"id": "6945819749293129759", "title": "画小米的新Logo只用border-radius可不行！", "desc": "大家都知道，昨晚的春季新品发布会上，小米正式发布了新Logo。据官方介绍，新Logo由日本国际著名设计师原研哉操刀设计共同打造，将小米品牌视觉融入东方哲学的思考，从“科技与生命的关系”出发，提出全新的"}, {"id": "6844903837661151240", "title": "【前端词典】提高幸福感的 9 个 CSS 技巧", "desc": "在这篇文章我会介绍 9 个使你的 CSS 更加简洁优雅的使用技巧。这些技巧小生经常使用，觉得挺高效实用，所以也就有了这篇文章。 正文现在开始。 1. 建议使用 padding 代替 margin 我们在设计稿还原的时候，padding 和 margin 两个是常用的属性，但我们…"}, {"id": "6844904168281358349", "title": "聊聊苹果营销页中几个有趣的交互动画", "desc": "前两天在浏览 苹果 16寸 营销页面 的时候，发现了几个比较有意思的交互，心里想着自己虽然是一个穷逼，但是知识是无界限的呀，于是便研究了一波。 一个是屏幕慢慢打开的效果，在屏幕打开的过程中，电脑图片 是在屏幕中固定不动的，直到打开完毕或者关闭完毕的时候再让 电脑图片 随着滚动条…"}, {"id": "6844903830098804743", "title": "可能是最全的前端动效库汇总", "desc": "一个跨浏览器的动效基础库，是许多基础动效的解决方案。从经典的弹跳动效到独特的扭曲动效，一应俱全。 文件大小：55.2 kB. 和其他的同类工具不同的地方在于，它不仅仅是一个库，而是有这用户可以直接操作的实际功能，它带有一个完整的网页构建器。Bounce.js 是为数不多的可以直…"}, {"id": "7004088333252952100", "title": "css中background简写顺序，css权重优先级原来这么重要", "desc": "css基础篇（第二篇） 回顾 上一篇css中基本山的认识了css是用来干什么的，以及大概的类型和基本的样式和数写规范之类的东西、重要的还是对于基础前端人员一个必备的技能：Chrome调试工具，这个是非"}, {"id": "6993485306875871268", "title": "学透CSS-深度剖析text-align家族 文本属性（上） （连载中）", "desc": "本文已text-align为切入点，详细剖析了text-align家族的各个熟悉感，相信通过本文，能对text-align有新的认识。"}, {"id": "6949433605231738917", "title": "如何用纯 CSS 实现酷炫的霓虹灯效果？", "desc": "最近关注了油管上的 CSS Animation Effects Tutorial 系列，里面介绍了非常多有意思的 CSS 动效。其中第一个就是很酷炫的霓虹灯效果，这里就实现思路做一个简单的记录和分享。"}, {"id": "7001692087905157151", "title": "网站布局的几种方式", "desc": "盒模型的真实大小固定不变，增加内边距，改变的是内容区 - 内容区，定义的高度和宽度 - 边框，边框的粗细 边框的颜色 边框的类型 border - 内边距..."}, {"id": "6999783608852414472", "title": "按钮提交动画", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 背景 按钮 是我们 编程 中使用频率最多的几个 交互元素 之一，点击它会产生其描述的动作。"}, {"id": "6844903758074216462", "title": "不可思议的纯 CSS 滚动进度条效果", "desc": "就是顶部黄色的滚动进度条，随着页面的滚动进度而变化长短。 在继续阅读下文之前，你可以先缓一缓。尝试思考一下上面的效果或者动手尝试一下，不借助 JS ，能否巧妙的实现上述效果。 OK，继续。这个效果是我在业务开发的过程中遇到的一个类似的小问题。其实即便让我借助 Javascrip…"}, {"id": "6998433304206655519", "title": "🔥🔥 试试这几个让你的项目更加炫酷的动画库", "desc": "如果你想让你的项目更加吸引用户的注意力，那么用上动画是最好的选择！ 在本文中，将为您推荐几个好用，能解决日常需求的动画库。 希望对你日常开发有所帮助！"}, {"id": "6997100641260666916", "title": "倒数动画效果", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 倒数动画 其实属于 加载动画 的一种，在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。以前我在发布一"}, {"id": "6997217183738626084", "title": "CSS选择器：伪元素是怎么回事儿？", "desc": "css伪元素代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中。伪元素用于创建一些不在文档树中的元素，并为其添加样式。"}, {"id": "7006221838846001183", "title": "秀动票夹二维码边框动画效果实现", "desc": "代码 效果图（gif录制出来看起来有点卡顿，实际运行丝滑） 实现步骤拆解 第一步实现渐变背景 实现渐变背景主要是使用linear-gradient() 函数，代码如下： 效果如下： 第二步实现渐变边框"}, {"id": "6997759314094096421", "title": "重学前端 | 给开发看的UI设计", "desc": "前言 前端为何要学习基本的UI设计原则和实践套路? 1、没有专业UI 你的团队里可能会有UI角色，但不一定专业，UI给出的设计稿，许多时候..."}, {"id": "6960493325061193735", "title": "Hi~ 这将是一个通用的新手引导解决方案", "desc": "组件背景 不管是老用户还是新用户，在产品发布新版本、有新功能上线、或是现有功能更新的场景下，都需要一定的指导。功能引导组件就是互联网产品中的指示牌，它旨在带领用户参观产品，帮助用户熟悉新的界面、交互与"}, {"id": "6951201528543707150", "title": "CSS @property，让不可能变可能", "desc": "本文主要讲讲 CSS 非常新的一个特性，CSS @property，它的出现，极大的增强的 CSS 的能力！让 CSS 拥有了更多可能！"}, {"id": "7001177660676112398", "title": "使用 cubic-bezier() 构建高级 CSS 动画", "desc": "在处理复杂的 CSS 动画时，我们总是会倾向于使用大量声明创建扩展的 @keyframes。虽然我想谈谈一些技巧可能有助于使构建复杂动画变得更容易，同时还能保持使用原生 CSS 完成这一切： 多种动画"}, {"id": "7001177914125320223", "title": "使用 CSS 和 SVG 滤镜给 SVG 图标添加阴影", "desc": "为什么我们需要给 SVG 添加阴影？ 阴影是一种常见的设计功能，可以帮助图标等元素脱颖而出。它们可以是持久的，也可以应用于不同的状态（例如专属于 :hover、:focus 或:active 的阴影）"}, {"id": "6867874227832225805", "title": "自适应布局方案", "desc": "rem（font size of the root element）是指相对于根元素&#x3C;html>来做计算的字体大小单位。 e.g. 设置html { font-size: 75px }时，其他元素1rem = 75px，4rem = 300px vw是基于viewpo…"}, {"id": "6844903625009938440", "title": "移动端适配的各种问题", "desc": "随着苹果发布更多尺寸的大屏手机，加上Android生态中纷繁复杂的各种奇葩尺寸，移动设计全面进入“杂屏”时代。 1.给根元素大小设置随着视口变化而变化的 vw 单位，这样就可以实现动态改变其大小。 关于移动端适配，就说这么多了。"}, {"id": "6844903679061934093", "title": "从酷炫的果冻菜单谈起 CSS3 filter 属性", "desc": "从酷炫的果冻菜单谈起CSS3filter属性今天中午刷掘金沸点时，看到一个JerryMenu，看着效果不错，就像学（抄）习（袭）一下。效果图见下：这里我要学（抄）习（袭）的就是这个菜单效果，这个dom"}, {"id": "6900081744662233095", "title": "[ 前端 ] 简单分析 B 站动态 banner 图", "desc": "B 站过段时间就会在首页加上一个动态的 banner 图，鼠标放上之后左右移动，banner 图中的各个元素(人物 / 物品)会随之移动，交互性很高且很有吸引力，今天简单分析一下如何实现的。 可以看到，在 HTML 元素上表现为 每个 layer 层 div 中的 img 元素…"}, {"id": "6844903582668423175", "title": "[译] 关于 CSS 变量，你需要了解的一切", "desc": "本文是我新写的电子书的第一章（电子书目前已支持 pdf 和 mobi 格式下载）。 大多数编程语言都支持变量。然而遗憾的是，CSS 从一开始就缺乏对原生变量的支持。 你写 CSS 吗？如果写的话你就知道是没法使用变量的。当然了，除非你使用像 Sass 这样的预处理器。 像 Sa…"}, {"id": "6969565166207762463", "title": "深度解析布局利器---Flex布局", "desc": "深入理解布局利器---flex布局 前言 基本知识 先举个例子： 我们可以给父元素添加display: flex属性，这样就开启了Flex布局。而开启Flex布局的元素......"}, {"id": "6981379801227460645", "title": "CSS3 新增属性（边框，背景，文字，颜色属性）", "desc": "CSS3 新增属性 ：边框属性 ，背景属性 ，文字属性 ，颜色属性 border-radius 创建圆角边框 box-shadow 为元素添加阴影 border-image 使用图片来绘制边框"}, {"id": "6844903696493445128", "title": "有人考了我一道CSS题目", "desc": "前段时间@快叫我韩大人私信我考了我下面这个CSS题目：在不改变HTML结构，同时保留元素高度前提下，实现某一个布局效果……我觉得还挺有意思的，在征得其同意的前提下输出了这篇文章，大家若有兴趣，也可以进来看看，自己能不能实现相关需求。"}, {"id": "6844903937120665608", "title": "【译】我最喜欢的CSS hack", "desc": "这是我最喜欢的发明之一。 2014年，我首次在Quora上分享了它（What are the most interesting HTML/JS/DOM/CSS hacks that most web developers don't know about?），现在，我每天仍然收…"}, {"id": "6844903535289565198", "title": "怎样做一个圆环放大的动画", "desc": "这个圆圈是用border-radius: 50%画出来的，所以width/height变大的时候，圆圈的半径就会变大，但是在变化的过程中变形了。如果改成用padding做动画，效果也一样，那怎么办呢？一个方法是把动画时间调小一点，这样看起来会减轻，但终究不是根本解决办法。 我在…"}, {"id": "6995146672535928869", "title": "CSS 权重计算", "desc": "印象中 CSS 选择器的权重计算规则很简单，没有特别的地方，今天有空看了几篇博客，发现跟我认为的竟然有不一样的，所以记录整理一下。 结论 先说结论： PS： 图片英文拼写错了，应该是 pseudo-c"}, {"id": "6844903570664341512", "title": "使用React搭建个人博客", "desc": "以前我是用 hexo + next 来搭建自己的博客，但最近学习了 React 后，深深地被它的组件化开发思想所吸引，刚好寒假放假有时间，所以我就用 React 搭建了一个自己的博客。React 实际上只是对应 MVC 中的视图层，要想搭建一个完整的应用，仅有 React 是不…"}, {"id": "6844903918686699534", "title": "CSS重置文档/reset.css", "desc": "reset.css文档就是一个普通的层叠样式表文档，就是css文档，一个网站一般会用三种css文档来设定网站的样式。重置样式(reset.css)(重置默认的css样式)；公共样式 (common.css)(一系列页面共用共享的样式，如：头部底部样式)；独立样式(每个页面单独使…"}, {"id": "6844903815758479373", "title": "理解 CSS 布局和 BFC", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 CSS布局中有一些概念，一旦你理解了它们，就能真正提高你的 CSS 布局能力。本文是关于块格式化上下文(BFC)的。你可能从未听说过这个术语，但是如果你曾经用CSS做过布局，你可能知道它是什么，理解什么是 BF…"}, {"id": "6844903938932621325", "title": "【css3进阶】less实现星空动画", "desc": "效果动图如下：预览链接和代码在我的codepen：https://codepen.io/lio-mengxiang/pen/YzKrEde知识点预览这篇文章的less技巧+css技巧知识点包括：les"}, {"id": "6969085340338356260", "title": "盒子模型", "desc": "1.看透网页布局的本质 网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？ 1.1.看透网页布局的本质： 首先利用CSS设置好盒子的大小，然后摆放盒子的位置。 最后把网"}, {"id": "6844903864999608333", "title": "CSS进阶（2）—— width,height如此高深,难道你真懂得", "desc": "HTML中只有两种元素，块级元素和内联元素。块级元素拥有“换行”的特性，一般用于结构（骨架），内联元素能够同行显示，一般用于内容展示。需要注意的是，块级元素并不是指“display:block”的元素，同样的，内联元素也不单单是“display:inline\"的元素。但是，这两…"}, {"id": "6844903795659390983", "title": "纯 CSS 实现多行文字截断", "desc": "基于上述的准则，下面我就讲介绍各种技巧实现截断效果，并根据上述的评判标准得出最优解。 文本溢出我们经常用到的应该就是 text-overflow: ellipsis 了，相信大家也很熟悉，只需轻松几行代码就可以实现单行文本截断。 属性浏览器原生支持，各大浏览器兼容性好，缺点就是…"}, {"id": "6870025920347340807", "title": "《深入解析css》—CSS基础", "desc": "层叠指的就是这一系列规则。它决定了如何解决冲突。当声明冲突时，层叠会依据三种条件解决冲突： 样式表的来源：样式是从哪里来的，包括你的样式和浏览器默认样式等。 选择器优先级：哪些选择器比另一些选择器更重要。 源码顺序：样式在样式表里的声明顺序。 优先级比较规则：选择器ID数量多者…"}, {"id": "6846687604541227015", "title": "CSS篇：Flex布局", "desc": "CSS 弹性盒子布局是 CSS 的模块之一，定义了一种针对用户界面设计而优化的 CSS 盒子模型。在弹性布局模型中，弹性容器的子元素可以在任何方向上排布，也可以“弹性伸缩”其尺寸，既可以增加尺寸以填满未使用的空间，也可以收缩尺寸以避免父元素溢出。子元素的水平对齐和垂直对齐都能很…"}, {"id": "6972806807118938148", "title": "CSS | css怎么画各种四边形的思路解析", "desc": "这是我参与更文挑战的第4天，活动详情查看 更文挑战 关于四边形的实现。在之前的文章【CSS | 4句CSS送你一个小月牙】中，汇总了很多经常用到的css形状，本篇文章主要是分析一下四边形系列的实现思路"}, {"id": "6844904033870675981", "title": "CSS3 新特性", "desc": "其中意思不必解释就可以明白。如果不进行设置的话，默认是padding-box，即以padding的左上角为原点。 background-size用以设置背景图片大小。单张图片的背景大小可以使用以下三种方法中的一种来规定： 设定指定的宽度和高度值想必不用多加介绍。contain和…"}, {"id": "6967696741416042527", "title": "关于 CSS Flex 笔记", "desc": "在学习 CSS Flex 的过程中遇到的一些疑问，将其记录下来。 将元素的 style 属性 display 设置成 flex ，那么改容器就变成了一个 flex 容器 当一个元素被设置为 flex "}, {"id": "6844904199709261832", "title": "CSS :is()和 :where() 即将出现在浏览器中", "desc": "现在，Safari（技术预览版106）和Firefox（版本78）的预览版均支持新的CSS :is() 和 :where() 伪类。 Chrome的实施仍然落后。 你可以使用 :is() 伪类来删除选择器列表中的重复项。 此功能主要在未处理的标准CSS代码中有用。如果使用Sas…"}, {"id": "6974205132204425252", "title": "一文搞懂transform: skew", "desc": "目录 &quot;理解坐标系&quot; &quot;复合变换&quot; 如何理解斜切 skew，先看一个 demo。在下面的 demo 中，有 4 个正方形，分别是 红色：不做 skew 变换， "}, {"id": "6951268494348386312", "title": "一文看懂 box-shadow", "desc": "box-shadow 可以向盒子模型添加一个或者多个阴影，那么阴影的各个参数该如何理解呢？本文带你清晰解读。"}, {"id": "6844903612804497421", "title": "从实践中寻找webpack4最优配置", "desc": "笔者最近在准备给fle-cli升级到webpack4版本，觉得有必要将探索过程的经验分享给大家，遂决定写这篇文章。（不知道fle-cli？看这里） webpack本身及社区工具存在或多或少的问题，未经时间沉淀，维护成本高。 然而现在，笔者认为以上这些已经成熟，是时候来一波升级了…"}, {"id": "6844903576112726029", "title": "typescript-react-webpack4 起手与踩坑", "desc": "webpack4正式版发布也有一段时间了, 为了从实际中感受变化, 于是以typescript, react, 结合之前翻译的一篇文章webpack-4.0更新日志（翻译）, 搭建一个可供项目使用的框架. ...... 我是由另一个项目升级过来的, 因为原项目没用babel, …"}, {"id": "6999297967974776863", "title": "CSS的两个动画总结", "desc": "关于transition的总结 transition就是过渡的意思，作用就是一个动画开头和结尾中间添加一个过渡的效果。 属性值 其中过渡函数，有如下几种： liner ：匀速 ease-in：加速 e"}, {"id": "6844903698317967374", "title": "基于gulp的前端自动化方案", "desc": "本文需要安装node（自行安装），并了解过gulp入门。gulp脚本下载：https://github.com/youhunwl/gulp 欢迎star。 首先初始化npm依赖项与基本信息，使用命令npm init一直回车，生成package.json文件，也可以直接去上边gi…"}, {"id": "6974334026324639774", "title": "前端知识点-Css 篇", "desc": "Css 批量改变样式 css表达式使用一次性表达式(但最好避免css表达式) 三角箭头 盒子模型 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 盒模型允"}, {"id": "6993338290258608141", "title": "css in js 解决css样式重复原理", "desc": "css in js css in js 的核心思想是：用一个JS对象来描述样式，而不是css样式表 例如下面的对象就是一个用于描述样式的对象： 由于这种描述样式的方式根本就不存在类名，自然不会有类名冲"}, {"id": "6844903985078337543", "title": "利用scss公共库实现样式和业务组件解耦， 快速提高开发效率！", "desc": "2、公共样式（ellipsis）。 我们发现虽然我们可以引入公共样式来减少我们的代码量。但是公共样式只能针对一些特定的要求去引，比如 超过长度省略ellipsis，或者一些全局公共的样式。如果是结合业务UI的需求，并不能很好满足。 这是一个很普遍的问题，其实也是一个痛点。因为这…"}, {"id": "6844904048919838734", "title": "书本无限翻页动画", "desc": "我们需要将两张图合成一张有正反两面。这里需要将反面沿着 y 轴反转一下就可以正确的显示了。使用 transform:scale(-1,1) 原本左侧这张图是正面看时的视角，右侧图是反面看的视角 将两张图合成一张时通过定位将图重叠在一起。 发现旋转时无论转了多少角度都只能看见图二…"}, {"id": "6844903639203446798", "title": " 基于virtual dom 的canvas渲染", "desc": "起初，在公司做一些活动页的时候，经常需要用到截图分享的千人千面的功能，而且这种需求并不止一两次，而是经常会出现在各种各样的截图场景。第一次碰到这种需求的时候，基本上都会去手撸canvasAPI去做渲染功能，这种情况的步骤大致如下： 面临的主要问题是复用性太差，其次是性能上也有问…"}, {"id": "6844903582668439559", "title": "如何培养良好的编程实践", "desc": "1. UI层的松耦合 很多设计模式是为了解决紧耦合的问题。如何做到松耦合，当修改一个组件而不需要更改其它地方的组件的时候，我们可以说这就是做到了松耦合，也是提高代码可维护性的关键所在。 1-1. 将JS从Css中抽离出来 1-2. 将CSS从JS中抽离出来 当需要通过js来修改…"}, {"id": "6968681098221977607", "title": "sass的基本使用", "desc": "是什么 sass是css的扩展语言。用来写css的。 解决css缺点： sass专门用来解决这个问题的。甚至，可以像写编程语言一样去写css。可以写判断，可以写循环，可以写函数，导入语法，继承语法 ."}, {"id": "6908640811710152717", "title": "记Flex布局", "desc": "flex也就是我们常说的Flexible Box（\"弹性\"布局），我对\"弹性\"的理解是定义为display:flex为容器内的元素在\"弹性\"空间内可一放大或者缩小，flexbox是一种一维的布局，它提供了十分强大的空间分布和对齐能力，但是只能处理一行或者一列的一个纬度上的元素布…"}, {"id": "6844904030318116871", "title": "Flex网页布局一CSS弹性伸缩盒子语法教程", "desc": "网页布局（layout）是 CSS 的一个重点应用。 布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。 2009年，W3C 提出了一种新的方案----Flex …"}, {"id": "6945064165518082085", "title": "SCSS", "desc": "语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。 Sass 支持两种不同的语法。两种语法可以互相加载。 （1）变量名使用中划线或下划线都是指向同一变量的。 （2）后定义的…"}, {"id": "6993326608350183437", "title": "使用单选按钮切换 CSS 自定义属性", "desc": "我们有一组单选按钮，分别切换不同的背景颜色，其主要结构如下： 以往，我们可以使用 JavaScript 来检测用户何时与单选按钮交互并相应地附加一个类。 然后，我们为每个类添加 CSS backgro"}, {"id": "6994279593989373989", "title": "markdown 风格的 css 样式", "desc": "markdown 风格的 css 样式。基于typo.css设计的个人化css样式，实现局部渲染效果。"}, {"id": "6986278125789904903", "title": "html5手机端顶部标题栏三分样式", "desc": "<a href=\"./home.<a class=\"title-center\"><img class=\"logo\" src=\"../img/logo....title-box img..."}, {"id": "6920483337488302093", "title": "纯css实现水平方向分屏和垂直方向分屏", "desc": "最近开发有这样一个需求，水平/垂直方向上的能够拖动。最开始采用操作dom的方式，但是卡顿现象明显，体验太差。思考问题是不是操作太频繁，导致卡顿，于是又尝试防抖与节流，效果还是不明显。突发想到，css有"}, {"id": "6994061021950246926", "title": "CSS选择器", "desc": "一、简单选择器 元素选择器 element id选择器 #id 类选择器 .class 通用选择器 * 分组选择器 element1,element2... 二、组合选择器 后代选择器 element"}, {"id": "6844904014958739470", "title": "禁止web页面缩放解决方案", "desc": "前言1.获取系统类型2.监听方法兼容写法3.校正浏览器缩放比例4.监听页面缩放5.初始化页面比例6.全部代码7.使用"}, {"id": "6998468738978676744", "title": "CSS-Flex布局-Grid布局", "desc": "总结Flex与Grid布局，Flex总结较为全面 参考以下网址： https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html http://ww"}, {"id": "6844903999775178766", "title": "详细解读 CSS 优先级，终于忘不掉了", "desc": "1、优先级就是分配给指定的 CSS 声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。 2、而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。 3、当同一个元素有多个声明的时候，优先级才会有意义。因为每一个…"}, {"id": "6844903614834540551", "title": "前端缓存机制", "desc": "1）浏览器在加载资源时，先根据这个资源的一些http header判断它是否命中强缓存，强缓存如果命中，浏览器直接从自己的缓存中读取资源，不会发请求到服务器。比如某个css文件，如果浏览器在加载它所在的网页时，这个css文件的缓存配置命中了强缓存，浏览器就直接从缓存中加载这个c…"}, {"id": "6844903750457360397", "title": "记一次h5动画之旅", "desc": "1. 动画相关主要内容： 2. css3动画语法 3. 示例 https://github.com/hytStart/React_chouchou/blob/master/src/components/home/ui/action/action.scss 4. 动画总结 5. …"}, {"id": "6966245423237300255", "title": "【不一样的CSS】实现等分布局的 4 种方式", "desc": "【不一样的CSS】实现等分布局的 4 种方式 等分布局就是将一个容器平均分成几等份，这里以 4 等分为例，主要介绍4种方法。"}, {"id": "6844903991579525133", "title": "[译]使用 CSS 实现具有方向感知的幽灵按钮", "desc": "Ghost Buttons：幽灵按钮是指具备基本的按钮形状的透明按钮，有细实线的边框。在悬停时背景填充颜色以突出按钮。 direction aware：方向感知这里主要说的是能够判断鼠标是从按钮哪个方向过来的。 本文中，我们将构建一个幽灵按钮，实现按钮很简单，但有趣而棘手的部分…"}, {"id": "6844903826370084877", "title": "css奇技淫巧-色彩渐变与动态渐变", "desc": "CSS 中设置的渐变是 gradient 数据类型，它是一种特别的image数据类型。使用background-image设置，可叠加设置多个； 渐变的实现由两部分组成：渐变线和色标。渐变线用来控制发生渐变的方向；色标包含一个颜色值和一个位置，用来控制渐变的颜色变化。浏览器从每…"}, {"id": "6915656500400619528", "title": "换一种思维去编写css代码", "desc": "每个前端开发者都经常根据业务的进行写着大量重复的 css 样式，写时一时爽，维护火葬场。 随着业务的发展，css 代码会变得越来越多越来越难以维护。 经常会出现 important 强行改变 css 的样式，这样做的唯一好处就是能够符合当前业务需求，但是自己挖的坑，可能是别人哭…"}, {"id": "6994091130132365348", "title": "CSS-弹性布局flex", "desc": "flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content"}, {"id": "6992086726487310349", "title": "css-实现鼠标移至图片上显示遮罩层", "desc": "1、将遮罩层html代码与图片放在一个div 我是放在 .img_div里。 2、为图片及遮罩层添加样式 图片：relative 遮罩层：absolute 使两者样式重合。 鼠标不在图片上时，遮罩层不"}, {"id": "6992010442847551501", "title": "动态REM", "desc": "em 和 rem em 和 rem 都是众多长度单位的中的一种，MDN 给出的定义分别是 其他的长度单位还有px(像素)、vw(100vw == 视口宽度)、vh(100vh == 视口高度)等等。 "}, {"id": "6955644394208755719", "title": "css3线性渐变", "desc": "css3线性渐变 定义与用法 linear-gradient() 函数用于创建一个线性渐变的 \"图像\"。 为了创建一个线性渐变，你需要设置一个起始点和一个方向（指定为一个角度）的渐变效果。你还要定义终"}, {"id": "6956403183438528549", "title": "如何给标签伪元素after和before添加鼠标事件", "desc": "伪元素不是真实元素，不存在于DOM树中，那么该如何给伪元素添加鼠标事件呢？什么？你说不用伪元素，换成真实元素标签？确实可行嗷~但是抱歉，这个牛角，我钻了！"}, {"id": "6844903540729577486", "title": "[译]使用 CSS Grid：以兼容不支持栅格化布局的浏览器", "desc": "当使用任何 CSS 的新特性的时候，浏览器的兼容问题都必须去解决。与 Flexbox 和 CSS Grid 一样，在使用 CSS 新特性布局时，兼容性比性能增强更值得考虑。 在这篇文章中，我将探索现今处理浏览器兼容问题的方法。为了让我们现在就用上 CSS 的新特性，我们可以做出…"}, {"id": "6970885478967050254", "title": "CSS3-transition过渡动画详解", "desc": "基本了解 ​ css中实现动画有两种方式：transition过渡动画、 animation自定义动画。 ​ 本文主要讲解transition过渡动画的使用，若要了解animation动画请前往……"}, {"id": "6946231151874801695", "title": "都 2021 年了，你还不知道这 10 个 CSS 功能？", "desc": "没有 CSS，现代 Web 应用程序将无法实现。标记语言（译者注：这是样式表语言……）负责让网站有良好的视觉体验、令人愉悦的布局，并且每个元素都各居其位。但是，你知道新的 CSS 特性一直在出现吗？ 多年来，CSS 已经超越了单纯设置背景色、边框、文本样式、边距和盒模型的范畴。…"}, {"id": "6996818832929062925", "title": "css3学习第二天", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：更文挑战 盒子阴影和文字阴影 参数用空格隔开 box-shadow: 右偏移量   下偏移量   模糊半径  延伸量(可以省略)  颜色; 举例： 一个"}, {"id": "6970577633658535972", "title": "两种纯CSS实现瀑布流布局", "desc": "Multi-columns 首先最早尝试使用纯CSS方法解决瀑布流布局的是CSS3 的Multi-columns。其最早只是用来用来实现文本多列排列（类似报纸杂志样的文本排列）。但对于前端同学来说，他"}, {"id": "6985480302030225415", "title": "CSS 系列 -- 块级元素靠右的实现方式", "desc": "原文地址 HTML CSS 使用 margin 属性 将 margin-left 设为 auto 后, 元素左边的 margin 会被尽可能的撑大, 所以自然就把元素挤到右边去了 使用 positio"}, {"id": "6995500195337207822", "title": "纯CSS输出渐变色背景图案 | linear-gradient", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 CSS渐变色逃不过的一个函数就是linear-gradient MDN官方文档：https://developer.mozilla.org"}, {"id": "6995159650753019918", "title": "【盲目分析系列】为什么img与img之间不能过度亲密", "desc": "说：为什么img之间总是有间隔，横向或者纵向上的，都不能靠在一起，显得亲密点。难道是因为同性相斥吗?"}, {"id": "6987311258793934855", "title": "CSS中几种常用的选择器", "desc": "CSS是一种定义样式结构如字体、颜色、位置等的语言，本文介绍了CSS中常用的几个选择器，并利用实例详细分析了各个选择器的特点和异同，最后说明了各选择器之间的优先级关系和规则"}, {"id": "6844903660875415565", "title": "[贝聊科技]不简单的自适应高度输入框", "desc": "前段时间在项目开发中遇到这样一个需求——文本输入框的高度要随着框内文本所占高度而变化。 下面讲一下实现方案的探索过程。 首先想到的方法，是使用 HTML 5 中新增的contenteditable属性。它可以把元素变成可编辑状态，同时让其保留原有的特性（如元素高度根据元素内容所…"}, {"id": "6940188260949819399", "title": "css脑洞艺术", "desc": "挺长时间没有写技术文章了，最近要给小组内做一次分享，准备做一次css相关的，那必然用到上一次css的文章 像滤镜一样改变字体颜色 ，怎么能敷衍的支撑到半小时，单靠一篇文章应该是不够的。 再来讲讲最基础的原理，上一次讲到了文字滤镜，先从最简单的情况考虑，拆分一个文字。代码：css…"}, {"id": "6995520244567506951", "title": "CSS 动画开发参考笔记", "desc": "过渡可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。比如在不同的伪元素之间切换，像是 :hover，:active 或者通过 JavaScript 实现的状态变化。 animation 属性用来指定一组或多组动画，每组之间用逗号相隔。 @keyframes 通过沿动画…"}, {"id": "6993902300091645965", "title": "CSS样式之BFC和IFC的用法", "desc": "BFC 1、BFC的布局规则 2、触发BFC的元素 3、BFC的作用和原理 IFC IFC的布局规则 一、BFC Block Formatting Contexts (BFC，块级格式化上下文)"}, {"id": "6887564455744372743", "title": "不用找UI， CSS也能搞定图片效果", "desc": "一. 实现图片的等比缩放 object-fit属性你了解多少呢？下面听我详细介绍下。 根据MDN（object-fill）的介绍， 「object-fit」 CSS 属性指定可替换元素的内容应该如何适应到其使用的高度和宽度确定的框。 也就是说盒子固定宽高， 图片在这个盒子里面会…"}, {"id": "6844903903645925389", "title": "前端动画专题（二）：输入框特效", "desc": ":before 和 :after伪元素指定了一个元素文档树内容之前和之后的内容。由于input标签不是可插入内容的容器。所以这里下划线无法通过伪元素来实现。需要借助其他 dom 节点。 包裹在外的父元素div应该设置成inline-block，否则宽度会满屏。 span标签实现…"}, {"id": "6844903721793486855", "title": "[盘点] 项目中可以怎么优化图片", "desc": "每一个开发者在开发项目中，不可避免要和图片打交道，优化图片似乎也成了一个必修课。图片优化也不仅仅是性能上的优化，还要进行体验上的优化。至于怎么优化图片，没有固定的方式，只能具体场景，具体分析，选择合适的方案。不多说，下面也简单介绍下自己处理过，了解过的一些方式。如果大家有补充，…"}, {"id": "6997052363890491400", "title": "CSS outline 属性", "desc": "CSS outline（轮廓）是一个简写属性，用于围绕元素外部绘制一条线。它与 a:focus 选择器结合使用特别有用，可以更加强调链接或其他元素。 outline 与 border 相似，不同之处在"}, {"id": "6978872264133443592", "title": "🔥如何实现左右宽度固定，中间宽度自适应(圣杯布局)？各有什么优缺？", "desc": "前言 这是我们很常见的一个应用场景。场景要求左右宽度固定，中间宽度自适应。就是我们常说的圣杯布局。如图: flex布局 float全部float:left) 这种float布局是最难理解的，主要是浮动"}, {"id": "6990179290386186247", "title": "CSS的盒子模型(一)", "desc": "盒子的概念 我们的网页是由一个一个的标签元素组成的，这些标签在CSS的体系中可以理解成一个一个的盒子，一个标签就是一个盒子，理解这些盒子的原理有助于我们更好的实现CSS的布局和排版。 CSS中广泛使用"}, {"id": "6971317295104819237", "title": "5分钟实现气泡浮动背景特效 html+css", "desc": "这是我参与更文挑战的第7天 先看效果： 更长看视频 实现： 添加标签底层盒子，再直接暴力添加10个气泡标签： 添加底层盒子样式，宽高等： position: fixed; 相对于浏览器窗口进行定位。 "}, {"id": "6991734344708521992", "title": "纯CSS实现气泡框和内凹的圆角｜ 8月更文挑战", "desc": "气泡框 气泡框的小三角可以通过伪元素 ::before ::after 来实现： html代码： css部分： 内凹的圆角 我在刚开始工作的时候实现内凹的圆角一般用SVG来实现，虽然效果也不错，但是当"}, {"id": "6950087464945975326", "title": "css的几个拷问项(慢慢会是N个🤔)", "desc": "在这段时间的春招，有发现一些css问题经常被提及，所以在这里总结一些关于css的知识(这段时间我遇到的这里总结下)，这里也不完全，只是作者找的一些，麻烦各位大佬，提出一些，大家可以一起学习，我会实时更"}, {"id": "6983155920066838558", "title": "css中那些和布局相关的问题你会了吗？", "desc": "1. display: none，opcity: 0，visibility: hidden的区别 这三者都可以隐藏元素，区别在于： 特性 display: none visibility: hidde"}, {"id": "6991230535691403271", "title": "Day 01 纯CSS实现文字颜色渐变动画 | 8月更文挑战", "desc": "每天一个小挑战 纯css实现文字颜色渐变动画 需要background-cli、 text-fill-color属性"}, {"id": "6983557619969425421", "title": "文字超出指定区域隐藏", "desc": "通过css实现文字溢出一省略号的形式隐藏文字，有当行文本隐藏和多行文本隐藏，一共有三种文本隐藏效果。"}, {"id": "6953145161895378951", "title": "position:sticky 粘性定位的几种巧妙应用", "desc": "粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。例如： 设置了以上样式的元素，在 viewport 视口滚动到元素 top 距离小于 10px 之前，元素"}, {"id": "6844903917348732936", "title": "如何把css'content的操作跟价值发挥到最大💢", "desc": "1. 普通字符 2. unicode 3. attr函数 4. url函数 5. counter函数 6. css变量 1. 当a标签内容为空时，显示其href属性里面的值： 2. 面包屑跟分隔符 3. 进度条 4. tooltip提示 5. 计算checkbox选中的个数 6…"}, {"id": "7000986452188200973", "title": "【动画消消乐｜CSS】调皮逃跑的小方块 077", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 前言 效果展示 来个特写 Demo代码 HTML CSS 原理详解 步骤1 从效果图中可以看出 整个动画含有两个部分：白色方块+深色阴影 "}, {"id": "6844903599894446093", "title": "利用CSS变量实现令人震惊的悬浮效果", "desc": "最近，我从 Grover网站上发现以一个好玩儿的悬停动画，也有了些自己的灵感。这个动画是将鼠标移动到订阅按钮上移动光标会显示相应的彩色渐变。这个想法很简单，但是它能使这个按钮脱颖而出，人们一下子就注意到它了，增加了点击的概率。 怎样才能达到这个效果，使我们的网站脱颖而出呢？其实…"}, {"id": "6894070137218203656", "title": "工作中常用的css整理", "desc": "1. 文字超出部分显示省略号 2. 文字垂直居中 3. 首行缩进 4. 首字下沉 5. 中英文自动换行 6. 文字阴影 text-shadow 为网页字体添加阴影，通过对text-shadow属性设置相关的属性值。 X-offset:指阴影居于字体水平偏移的位置。 Y-offs…"}, {"id": "6974633866858348581", "title": "一文读懂CSS布局（一） -- Grid布局", "desc": "Grid布局是css中非常重要的一种布局方式，这篇文章将会图文结合，生动的解释每个属性的用法，助你完全掌握grid布局"}, {"id": "6914862587863629831", "title": "CSS水波纹效果实现", "desc": "CSS水波纹实现，使用了border-radius属性，构造一个接近圆的不规则图形，然后使用动画，让其绕Z轴不断旋转，以达到一种波浪运动的视觉效果。"}, {"id": "6844903956443824135", "title": "我和我亲爱的祖国（用CSS来为祖国母亲庆生）", "desc": "“我和我的祖国一刻也不能分割，无论我走到哪里都流出一首赞歌。” 相信大家最近已经被 《我和我的祖国》 这首歌给刷屏了，鱼头每次在听到这首歌的时候，总会感慨万千，我们伟大的新中国，这70年真的经历了太多太多了。 但是就是在一代又一代的人不懈的努力下，如今的中国，已经成为了各个国家…"}, {"id": "6992137880747376647", "title": "无框架从零实现一个轮播图 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第3天，活动详情查看：8月更文挑战 既然前端大佬们说，“一个合格的前端至少也要能够达到会写轮播图”，作为前端小白怎么不就动手实现一下呢？ 实现思路是仿照着一个大佬的文章做的：产"}, {"id": "6987208246436053028", "title": "49 个在工作中常用且容易遗忘的 CSS 样式清单整理", "desc": "喜欢的点赞收藏，关注我不定时分享更多精彩内容。 来源：Web前端开发 1、文字超出部分显示省略号 单行文本的溢出显示省略号（一定要有宽度） 多行文本溢出显示省略号 2、中英文自动换行 word-bre"}, {"id": "6994073798517456932", "title": "less学习指南第五期 |  合并和转义", "desc": "LESS是一个CSS预处理器，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，"}, {"id": "6989428254989877261", "title": "「HTML+CSS」自定义加载动画【048】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为24px 背景色：红色 步骤2 span标签圆角化 步骤3 为span添加动画 使用box-s"}, {"id": "6844903810125529101", "title": "CSS面试题整理", "desc": "答案基本是自己整理的。并不是全部题目都有。 会有很多自己的啰嗦，还有很多乱七八糟的补充，请见谅。 盒子模型有两种：IE 盒子模型(IE5.5及以下)，W3C标准盒子模型。 内容(content)、填充(padding)、边框(border)、边界(margin) 。 IE盒模型…"}, {"id": "6994023925936046093", "title": "TailwindCSS 基本介绍与最佳实践", "desc": "一个功能类优先的 CSS 框架，用于快速构建定制的用户界面。这是来自 TailwindCss 官方定义。"}, {"id": "6844903741494296590", "title": "不怕你用不上！CSS 列表项布局技巧", "desc": "4. 完整代码：元素宽度已知，所有元素都在一个容器 本文由创宇前端作者授权发布，版权属于作者，创宇前端出品。文章链接：https://knownsec-fed.com/2018-12-13-css-lie-biao-xiang-bu-ju-ji-qiao/ 想要订阅更多来自知道…"}, {"id": "7000682058095788046", "title": "css定位（position）", "desc": "定位能够让我们把一个元素从它原本在正常布局流(normal flow)中应该在的位置移动到另一个位置。定位并不是一种用来给你做主要页面布局的方式，它更像是让你去管理和微调页面中的一个特殊项的位置。 一"}, {"id": "6878982139111702536", "title": "一起学重绘和回流 | 掘金技术征文-双节特别篇", "desc": "Hello，大家好，我是Symbol卢，最近也比较忙，原本打算继续更新用大白话轻松搞定正则（上） 的文章，收到了大家的反馈帮助到了一些同学（一同学习的朋友），也是真的很开心😄 但是刚好遇见这次的征文由于某些原因就先写了这篇文章（偷偷的说：“用大白话轻松搞定正则 的下 也快写完…"}, {"id": "6976235935587368991", "title": "彻底搞懂css中的尺寸单位", "desc": "这是我参与更文挑战的第13天，活动详情查看 更文挑战 单位是前端开发中很重要的一个元素，我们的CSS中至少有10个不同的度量单位，每个单位都有自己的特定用途，在不同的情况使用不同的单位，可以让你的网页"}, {"id": "6844903513768755214", "title": "不炫技，SVG+CSS3 旋转动画属性就能实现的梦幻效果", "desc": "CSS3的动画相关的基础的属性基本都涉猎过了，个人认为，其中最复杂的是d:path()路径变形动画，超过3D，而位移、轨迹、旋转、缩放、斜切什么的，相对简单一些，但作为非动画设计师而言，灵活的掌握这些基本的动画加以无穷无尽的变换，就已经能做出很多华丽丽的效果了，这篇呢，源于做一…"}, {"id": "7000237985530642469", "title": "CSS 加载方式及优先级", "desc": "CSS 样式加载有以下四种方式 行内样式 直接通过 HTML 元素的 style 属性声明样式 内部样式表 使用 <style></style> 标签声明样式 链入外部样式表 使用 link 标签来引"}, {"id": "7001765262324137992", "title": "CSS学习", "desc": "CSS单位 em em:为css的相对单位，参照其父元素的fontSize；等于父元素的fontSize*em值 如果没有设置父元素的font-size；则参照html元素的font-siz"}, {"id": "6844904168382005261", "title": "前端必须掌握的「CSS层叠上下文」讲解 | 纯手工示例，包教包会", "desc": "大部分人在初步学完css后，对z-index的印象大概处于“z-index就是用来描述定义一个元素在屏幕Z轴上的堆叠顺序”。例如，如果A元素和B元素重叠了，这么说有点枯燥，换个说法， 就是这么差别对待。既然拿上面那一段举栗子，那就代表这种理解有问题，至少是不严谨的。 z-ind…"}, {"id": "6844903696409722894", "title": "『前端干货篇』：你不知道的Stylus", "desc": "最近沉迷学习（其实大部分时间都在看英雄联盟S8总决赛），把这几天在学的Stylus做个总结。这篇文章对学习Stylus的新手来说应该会有帮助~ 为了让大家代码观赏性更好，这里的代码都以截图的方式呈现，用的IDE是VSCode。 Stylus是个非常优秀的CSS预编译器，算是前端…"}, {"id": "7000011852054790180", "title": "css之定位", "desc": "CSS的定位属性有三种，分别是绝对定位、相对定位、固定定位。 下面逐一介绍。 相对定位 相对定位：让元素相对于自己原来的位置，进行位置调整（可用于盒子的位置微调）。 我们之前学习的背景属性中，是通过如"}, {"id": "6983711455442894885", "title": "CSS基础", "desc": "完整的 CSS 盒模型应用于块级盒子，内联盒子只使用盒模型中定义的部分内容。模型定义了盒的每个部分 —— margin, border, padding, and content —— 合在一起就可以创建我们在页面上看到的内容。为了增加一些额外的复杂性，有一个标准的和替代（IE…"}, {"id": "6997295012916510727", "title": "css乱七八糟实用但八成记不住的功能", "desc": "css乱七八糟实用但八成记不住的功能 1.文字内容两端对齐，达成类似flex的space-between的效果"}, {"id": "6844903709730668552", "title": "一次内联元素错位引发对line-height的思考", "desc": "line-height 对于一个前端小可爱来说，应该是一个会经常碰面的老朋友了。可是有一天，我突然发现自己好像对他没那么了解，他也没有外表看起来的那么简单。 两个相邻的内联元素，字体一大一小，行高相同，由于第二段文字需要有字多情况就自动去下一行的效果，所以第二个span是inl…"}, {"id": "6997239714524692517", "title": "CSS 常见布局", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 布局原则 尽量不要写死width和height 尽量使用一些高级语法，如calc、nth-child、flex等（当然还是要考虑下兼容性的）"}, {"id": "6959831922872680478", "title": "【CSS】细说网页布局中的标准流、浮动流与定位流", "desc": "本文概要 1、网页布局 网页布局描述的是浏览器如何对网页中元素进行排版的。 前端布局方案主要有三种： 传统布局方案（标准流、浮动流、定位流） flex布局方案 grid布局方案"}, {"id": "6987393152332070920", "title": "五十音小游戏中的前端知识", "desc": "本文内容主要介绍小游戏开发流中程涉及到的前端知识的如深色模式、离线缓存、樱花动画、横屏判断等知识的归纳介绍和个人收获总结。"}, {"id": "6844904013050150925", "title": "CSS—形状就该随心所欲", "desc": "说到div的形状，基本上想到的都是圆形或者方形，这两种形状其实也已经符合了前端95%的应用场景(95%的数据从哪得来的 - - !)，但是作为一个不愿随波逐流的程序员，就是要搞事情。 (图片来源于网络)果然限制我们创造的不是想象力，而是兼容性。支持浏览器的版本偏高，如果你是做正…"}, {"id": "6844903717574017031", "title": "浅聊HTTP缓存 (HTTP Cache)", "desc": "HTTP缓存一直是一个老生常谈的问题，前端在日常发布、部署工作中，常常要面对。 项目会在静态资源（如:css,js）使用chunkHash来处理，因此能保证修改后与旧代码文件名字不会重复。以避免无法更新改动。 在该项目中部署后，进行代码进行一次location.reload，改…"}, {"id": "6844903586107916301", "title": "2018 CSS 大会多图见闻录", "desc": "CSS 之于前端有些像厦门之于 IT 界：耳熟能详却又略显小众。那么在厦门召开的第四届 CSS 大会是否能结合碰撞出新的火花呢？跟随着本兼职摄影师来看看吧~ 周六上午的巨幕影厅里，本届 CSS 大会正式拉开帷幕。在现在的前端圈技能树越点越多的大潮下，单单会写代码的前端或许已经不…"}, {"id": "6997195402068000775", "title": "了解CSS3背景新增的东西 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 在CSS3中，关于background新增了三个子属性 1. background-origin 2. background-clip 3"}, {"id": "6974580474475708424", "title": "前端考古笔记 - 03.从无到有的CSS", "desc": "相比于HTML的横空出世和Javascript的一锤定音，CSS的出现就要漫长的多。 时间回到1991年，当时伯纳斯-李开发HTML的时候忘记了一个东西"}, {"id": "6997006759722221598", "title": "梳理一下CSS3边框新增的东西 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 CSS3在边框上新增了一些属性，一起来看一下! 1. box-shadow用于设置盒子的阴影 格式：box-shadow: 阴影类型 X轴"}, {"id": "6844903731855785992", "title": "Hummingbird: 在Web上运行Flutter应用", "desc": "今天，我们在 Flutter Live 上宣布了一个消息：我们正尝试在 Web 上运行 Flutter。 这篇文章描述了我们应对挑战的方式，以及该技术的当前状态。 在文末，我们附上了协同工作和嵌入等问题的答案。 让我们快速回顾一下 Flutter 的架构。 Flutter 是一…"}, {"id": "6997247005370089508", "title": "CSS单位", "desc": "PX、EM、REM、%、VW、WH、VM等单位有什么区别？ 1.背景介绍 传统的项目开发中，我们只会用到px、%、em这几个单位，它可以适用于大部分的项目开发，并且拥有比较良好的兼容性。但是你知道吗？"}, {"id": "7005931735293067277", "title": "一次搞懂 CSS3 animation动画中forwards和both的区别", "desc": "平时会用 animation 实现动画效果，但一直没有留意 animation-fill-mode 中 forwards 和 both 动画的区别，今天自己动手实现了一下，终于搞懂了。"}, {"id": "7002791144958459934", "title": "圣杯布局&双飞翼布局", "desc": "1 圣杯布局 2 双飞翼布局 3 总结 使用float布局 两侧使用margin复制，以便和中间内容横向重叠 防止中间内容被覆盖，圣杯布局用padding，双飞翼布局margin"}, {"id": "6999158992404496415", "title": "【动画消消乐】HTML+CSS 白云飘动效果 072", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度、高度均为50px 背景色：白色"}, {"id": "6912374170743472135", "title": "什么？仅靠H5标签就能实现收拉效果？", "desc": "这有点类似于手风琴效果，但不一样的是很多手风琴效果是同一时间内只能有一个展开，而这个是各个部分独立的，你展不展开完全不会影响我的展开与否。其实这种效果简直再普遍不过了，网上随便一搜就出来一大堆。但不一样的是，我在接到这个需求的时候突然想起来很久以前看过张鑫旭大佬的一篇文章，模糊…"}, {"id": "6979231967476711460", "title": "🔥两栏布局如何实现？各有什么优缺？", "desc": "两栏布局的实现 一般两栏布局指的是左边一栏宽度固定，右边一栏宽度自适应，两栏布局的具体实现 利用浮动 原理：将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为2"}, {"id": "6977930500597874719", "title": "由于电费太贵，本博客提供云风扇服务", "desc": "你看这风扇！很凉快吧！点击一下，让你感受云的凉爽，此文号称全站最冷博文，绝非热榜文能媲美的，快来体验一下趴~"}, {"id": "6844903688029339655", "title": "实现前端弹簧动效", "desc": "它有一个弹闪的过程，一大一小交替缩放就像一个弹簧在弹动一样，而不是以往那种简单的线性变大。 如果使用CSS的animation-timing-function只是改变运动的速度，不能改变运动的方向。 是没有这种弹性动感的。 因为要实现一个弹簧振动效果，需要有两个参数，一个是阻尼…"}, {"id": "6844904116611727367", "title": "CSS揭秘实用技巧总结", "desc": "《css揭秘》中讲了47个css技巧，其中有很多日常编码中并不会用到，本文除了将书中部分实用技巧罗列出来之外，还尝试用帮助读者搞明白background、animation 等常用但是却掌握不牢固的知识点。所以阅读本文不仅可以学习一些实用技巧，也可以巩固自己的 css 基础知识…"}, {"id": "7001726354932629518", "title": "【动画消消乐｜CSS】079.单span标签实现自定义简易过渡动画", "desc": "这是我参与8月更文挑战的第29天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用一个span标签 设置为 宽度为20px 高度为12px 相对定位 "}, {"id": "6997414602610835464", "title": "CSS 绘制各种常见的形状（四）", "desc": "使用 CSS 可以绘制出许多形状，比如三角形、梯形、圆形、椭圆等等，并不只是可以绘制矩形，还可以绘制心形、钻石、鸡蛋、吃豆人、聊天框、图标等等。下面来看看怎么实现这些形状的吧。"}, {"id": "6987634668891963400", "title": "HTML5+CSS3学习总结(完结)", "desc": "一、HTML5 1）什么是HTML5 1. HTML5简介 万维网的核心语言、标准通用标记语言下的一个应用超文本标记语言(HTML)的第五次重大修改，作为HTML语言，具有新的元素、属性和行为。 2."}, {"id": "6844903721235808263", "title": "记一次前端面试的全过程", "desc": "接上一篇面试总结一年半经验，百度、有赞、阿里面试总结，把这段时间的面试总结结束一下吧。 本文主要记录一下当天面试的全过程（可能有遗漏，事隔三四天了，我已经尽量回忆了），答案亦为参考答案，仅供借鉴。 有赞一面结束后过了两天就收到了二面的邀请，我回复面试邀请的短信，说最近可能请假太…"}, {"id": "7002790375534379021", "title": "关于css三角形阴影", "desc": "问题 在为infoWindow的锚点anchor添加阴影时发现的问题：由于anchor的小三角是用css border边框写的，直接加box-shadow会导致三角外面的整个方形外框出现阴影效果。 解"}, {"id": "6962884494500036616", "title": "CSS轮播图详解 html+css", "desc": "效果（源码在最后）： 这个CSS轮播图效果是比较常见的了，b站一搜就有很多，不过视频对一些关键步骤一敲而过，不好理解，既然如此，我们也做一个~ 并不难的，详解如下： 实现（可一步一步实现）： 1. 老"}, {"id": "6959501104174333965", "title": "【得物技术】CSS书写规范和顺序", "desc": "CSS书写规范和顺序：命名规则说明&样式属性顺序&css样式书写规范&HTML5-语义化。1. 所有的命名最好都小写..."}, {"id": "6938003618280931335", "title": "前端页面布局学习神器", "desc": "csslayout.io 是一个由现代 CSS 功能，如flex和CSS网格，使用原生代码构建的包括91种最流行的布局页面的样例库，，通过组合它们，你可以拥有现实生活中存在的任何可能的布局。 csslayout.io 能够帮助你更好的系统的学习页面布局，将你学到的 CSS 知识…"}, {"id": "6844903716500439047", "title": "兄dei，听说你动画很卡？", "desc": "作为一个有追求的程序员！！！痛定思痛！！！同样的悲剧绝对不能在同一个技术面发生两次！！！流着泪写下该篇总结，希望可以给大家一些启发。 动画的实现原理，是利用了人眼的“视觉暂留”现象，在短时间内连续播放数幅静止的画面，使肉眼因视觉残象产生错觉，而误以为画面在“动”。 大多数设备的…"}, {"id": "6990343686592659487", "title": "前端动效探索(一)-动画介绍与方案推荐", "desc": "前端动画场景需求多，对众多动画场景的技术实现方案选择上比较模糊，现有动画库太多，不知道选哪个，下面首先让我们从各个角度来对动画整个体系进行分类，让我们清晰的了解动画整个体系。"}, {"id": "6844903671969349645", "title": "用微前端的方式搭建类单页应用", "desc": "微前端由ThoughtWorks 2016年提出，将后端微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。 美团已经是一家拥有几万人规模的大型互联网公司，提升整体效率至关重要，这需要很多内部和外部的管理系统来支撑。由于这些系统之…"}, {"id": "6844903790370357262", "title": "帧动画的多种实现方式与性能对比", "desc": "以上各种动画形式都可以制作出一种类型的动画，那就是帧动画，也叫序列帧动画，定格动画，逐帧动画等，这里我们统一用帧动画来表述。 帧动画一般用来实现稍微复杂一点的动画效果，同时希望动画更细腻，设计师更自由的发挥。他可以定义到每一个时间刻度上的展现内容，我们一般用帧动画来做页面的Lo…"}, {"id": "6976277912097914916", "title": "快速学习CSS浮动（一）加油🙌🏻", "desc": "快速学习css浮动，虽然内容很精简，但是会给你留下深刻印象。css浮动几个特性的再熟悉，再思考。💪"}, {"id": "6996968587005001742", "title": "记一次box-orient与stylelint冲突bug", "desc": "今天下午，同我提交了我的代码，但是过了一会看的时候，我发现界面一个css属性失效了 然后我检查了改动历史，发现提交的时候stylint把之前 改为了 这就很奇怪了，因为box-orient这个属性在各"}, {"id": "6844903508773175310", "title": "10 个独特的 CSS 背景视觉效果", "desc": "10 个独特的 CSS 背景视觉效果"}, {"id": "6982770082497691679", "title": "css常见问题总结，持续更新中...", "desc": "1、盒子模型 什么是盒子模型 所有HTML元素可以看作盒子，CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距（margin），边框(border)，填充(padding)，和实际内容"}, {"id": "6988366718343069703", "title": "最强CSS reset", "desc": "以上代码片断来自Eric Meyer的主页。 原文发布在个人的简书主页，是自己转载了自己的内容，写此博客备用。"}, {"id": "6844903551907397646", "title": "移动端自适应个人理解与收集——rem", "desc": "rem——更好的适配移动端。这个单位我一直想弄个究竟，今天终于看了个差不多。看了很多的博客。心中总算有自己的想法。（还有vh，vw这里我这个小白还没有弄明白就先不写了。） 1.rem可以在html，body下设置font-size的大小，然后根据 根元素的大小来进行兑换。eg：…"}, {"id": "6844903909169823757", "title": "css掩人耳目式海浪动效🌊，这可能是最简单的实现方式了吧？", "desc": "花里胡哨的canvas实现太过于繁琐，这就是本文存在的意义."}, {"id": "6921860208012558349", "title": "14 张有趣深动图解 FlexBox ！", "desc": "最近开源了一个 Vue 组件，还不够完善，欢迎大家来一起完善它，也希望大家能给个 star 支持一下，谢谢各位了。 2021 年了，我们在来重新复习一下 flexbox 的用法，还有一些用的比较少的属性，方便大家理解，这里使用有趣的图片来讲解。 flex-item在flex-c…"}, {"id": "6844904153613860878", "title": "几个不成熟的动画，求大神赐教了。", "desc": "emm~ 实在不太会写动画，求大家提提意见。我好优化优化。"}, {"id": "6995786935998529550", "title": "【动画消消乐】HTML+CSS 自定义加载动画：清新折叠方块效果 063（附源码及原理详解）", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为48px 背景色：棕色 相对定位"}, {"id": "6994031793947017246", "title": "CSS弹性盒子（1）", "desc": "这是我参与8月更文挑战的第8天，活动详情查看：8月更文挑战 弹性盒子 属性 flex-direction flex-wrap flex-flow justify-content align-items"}, {"id": "6844903507061932040", "title": "移动端字体放大问题的研究", "desc": "很多webview提供了调整页面字体大小的功能，例如手机QQ、微信、部分Android内置浏览器等。大部分浏览器调整字体只会导致字体显示大小发生改变，其他元素的大小不受影响。但对于结构稍微复杂一点的页面，字体大小的变动就足以导致页面布局乱掉，导致文本不居中、文字折行、布局混乱等…"}, {"id": "6844903822624555016", "title": "使用 JS 来动态操作 css ，你知道几种方法？", "desc": "JavaScript 可以说是交互之王，它作为脚本语言加上许多 Web Api 进一步扩展了它的特性集，更加丰富界面交互的可操作性。这类 API 的例子包括WebGL API、Canvas API、DOM API，还有一组不太为人所知的 CSS API。 由于JSX和无数JS框…"}, {"id": "6844903962500399118", "title": "《css大法》之使用伪元素实现超实用的图标库（附源码）", "desc": "今天我们来复盘一下前端中css伪元素的知识以及如何用css伪元素来减轻javascript的压力，做出一些脑洞大开的图形。 伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。伪元素主要有： 我个人觉得伪元素可以解释为元素的修饰，可以为元素带来额外的附加样…"}, {"id": "6988009235447562271", "title": "【翻译】CSS Selector 生成器方案对比", "desc": "由于最近团队需要建设一个可视化埋点的系统，在标记DOM元素唯一标识的问题上做了大量调研。其中，我查到一篇比较有意思的 blog，于是打算翻译一下。"}, {"id": "6877736796894003213", "title": "探索 CSS 的本质", "desc": "但是随着对CSS的深入使用才会发现：那些被我们津津乐道的“xx属性的奇淫技巧”这类东西都只不过是浮在CSS最表层的现象而已；这种对于CSS的使用方式在我看来无异于“盲人摸象”，即只能通过观察表面现象来总结使用方法，而不是从本质出发寻找解决方案，因此就可能会陷入永远只能借助表面现…"}, {"id": "6975027502360035359", "title": "一文读懂CSS布局（二） -- flex布局", "desc": "一文读懂CSS布局（二） -- flex布局，图文详细解析，完整思维导图，flex布局这一篇就足够了"}, {"id": "6927538463768051720", "title": "2021了，你还没用过 tailwindcss 吗", "desc": "春节将至，又一年就这样悄悄溜走了。 时值年末，总是会被各种年终总结刷屏。例如与前端开发者息息相关的state of js 2020和state of css 2020调查问卷都相继发出了统计报告，在后者的报告总结中，tailwindcss可以说是异军突起，实力抢眼。 今天就来聊…"}, {"id": "6956052214271967269", "title": "Grid布局", "desc": "Grid布局即网格布局，它是目前唯一一种CSS二维布局（flex布局是一维布局），是目前最强大的CSS布局方案"}, {"id": "6986443569770790925", "title": "回炉重造，css常规布局系统整理——实战开发后复盘小结", "desc": "1 基础css布局 1.1 position定位 ​ position用于规定如div等元素的定位方法的类型。 ​ 其包含static、relative、fixed、absolute、sticky这5"}, {"id": "6981840891082178567", "title": "CSS查漏补缺：CSS盒模型、外边距重叠、BFC", "desc": "本文为CSS知识的查漏补缺，盒模型、外边距重叠、BFC等知识点，也是面试重点知识。用大白话讲，一看就懂。"}, {"id": "7001759587414212615", "title": "css视觉格式化模型(标准流、浮动、三种定位、BFC)", "desc": "视觉格式化模型 视觉格式化模型的三种定位体系：常规流、浮动、绝对定位。 任何一个元素都必须属于其中的某一种定位体系。不同的定位体系中，元素在包含块中的尺寸和位置会有一些差异"}, {"id": "6968683715513810974", "title": "3分钟实现充电水波特效 html+css", "desc": "这是我参与更文挑战的第1天 先看效果： 前言： 这个思路是我在b站看up主Steven做的，觉得很不错，然后自己也弄了一个。（纯css） 实现： 定义标签，有三个水滴盒子，一个圆圈盒子显示数字，一个最"}, {"id": "6991258708634255373", "title": "「HTML+CSS」自定义加载动画【050】｜8月更文挑战", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为80px 背景色：黄色 圆角化 效果图如下 步骤2 利用span::after,设置 绝对定位（"}, {"id": "6844903811656450061", "title": "[译] 从没有人告诉过我的 CSS 小知识", "desc": "这篇文章绝对不是对任何一个曾经和我共事过的人的批判，仅仅是我最近在做一些个人研究的时候学到的关于 CSS 的一些要点。 有很多开发者并不怎么关注 CSS，我想这已经不是什么新鲜事了。通过网上的各种对话，或者与朋友和同事聊天的时候你都可以观察到这个现象。 然而，在社区中，我们学到…"}, {"id": "6996985786121846815", "title": "【动画消消乐】HTML+CSS 自定义加载动画：怦然心跳 066", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 前言 Demo Demo代码如下： HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度：8px 高度：40px 背景色：白"}, {"id": "6926872402307579911", "title": "轻松教你使用纯css实现H5-Doorin编辑器中的水波动画", "desc": "css3给我们前端开发带来了很便利, 我们可以使用css3 的新特性实现各种形状和动效, 接下来笔者就来带大家介绍如何用css3实现 H5-Dooring编辑器 中的水波动画. 由于生成gif的工具比较弱(在线求好用的mac版gif录频生成工具...), 我不得不上传个原图, …"}, {"id": "6844903870171201549", "title": "CSS 属性选择器的深入挖掘", "desc": "CSS 属性选择器，可以通过已经存在的属性名或属性值匹配元素。 属性选择器是在 CSS2 中引入的并且在 CSS3 中得到了很好拓展。本文将会比较全面的介绍属性选择器，尽可能的去挖掘这个选择器在不同场景下的不同用法。 [attr]：该选择器选择包含 attr 属性的所有元素，不…"}, {"id": "6974178102427697183", "title": "见微知著：分析一个loading，学会一类loading", "desc": "在市面上常见的loading中，其实很多都是同一类思路，只是渲染成了不同的效果，这篇文章就来剖析下一类loading的做法。"}, {"id": "6977936816510861326", "title": "css 属性之 will-change，人生不易之 will-change", "desc": "will-change CSS 属性 will-change 为web开发者提供了一种告知浏览器该元素会有哪些变化的方法"}, {"id": "6844903604126482440", "title": "如何让webpack打包的速度提升50%？", "desc": "随着前端应用包含的模块数量日益增长，代码打包的耗时也越来越长。公司很多项目打包耗时超过了10秒，对于一般人来说超过10秒的等待是比较难受的，虽然后续增量编辑的速度很快。于是我想结合实际开发环境提升一下首次打包的速度。 1. 实际开发环境 许多需求只涉及到js模块的修改，并不涉及…"}, {"id": "6844903709772611592", "title": "深入理解CSS选择器优先级", "desc": "这句话也是很抽象，暂且先不管它了。但是我们可以先看一个例子： 那最后文字是什么颜色呢？答案很简单：红色。这就涉及到了优先级问题，同一块内容，我们同时用了 ID选择器 和 类选择器,因为 ID选择器 优先级大于 类选择器 , 所以最终显示为红色。 但是，浏览器具体的优先级算法是怎…"}, {"id": "6993224617393389581", "title": "纯CSS实现轮播图", "desc": "这是我参与8月更文挑战的第6天，活动详情查看：8月更文挑战 在之前的文章：无框架从零实现一个轮播图 | 8月更文挑战，通过Javascript和CSS配置，实现了一个简单的轮播图。 后面通过：纯CSS"}, {"id": "6982560799294226445", "title": "谈谈CSS选择器（上）", "desc": "hello，各位小伙伴们大家好呀，我是白祁。对于前端工程师来说，常用的CSS选择器大家必然不会陌生，但是对于一部分平时不太会用到的选择器，你真的够了解吗？"}, {"id": "6991817797202345997", "title": "使用css制作圆弧形背景 | 8月更文挑战", "desc": "问题一 使用background制作制作一个类似下图的圆弧形渐变背景图 思路 需要在当前的基础上制作一个更大的盒子, 如下图红框部分所示 (比如设置width为150%). 然后通过设置盒子的bord"}, {"id": "6966274167717134344", "title": "渐变进阶指南 | 使用CSS gradient制作绚丽渐变纹理背景效果", "desc": "radial-gradient() CSS函数创建了一个图像。 该图像是由从原点发出的两种或者多种颜色之间的逐步过渡组成。 形状可以是圆形（circle）或椭圆形（ellipse）。 与其它渐变相同。"}, {"id": "6844903993651494925", "title": "2019年，是否可以抛弃 CSS 预处理器？", "desc": "随着前端工程化的不断完善，CSS 预处理器已经成为项目中不可缺少的部分，很多人在项目技术选型阶段就会先选择一个 CSS 预处理器，绝大部分前端工程的脚手架也内置了一系列的 CSS 预处理的模版，大家已经习惯了享受 CSS 预处理器带来的书写代码的灵活流畅，反而将原生的 CSS …"}, {"id": "6997248878974074916", "title": "【动画消消乐】HTML+CSS 自定义加载动画 067", "desc": "这是我参与8月更文挑战的第17天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度为8px 高度为48px 背景色"}, {"id": "6844903817536897032", "title": "css高级应用三种方法实现多行省略", "desc": "这是个老掉牙的需求啦，不过仍然有很多人在网上找解决方案，特别是搜索结果排名靠前的那些，都是些只会介绍兼容性不好的使用-webkit-line-clamp的方案。 如果你看到这篇文章，可能代表你正是从那么多千篇一律的文章中跳转过来的，想找更好地方案的。那恭喜你，没有更好的，只有更…"}, {"id": "6989160230898630664", "title": "css 实现正方体", "desc": "前言 今天和小伙伴们分享一下如何使用css实现正方体。文章会涉及到一些平时不常用到的css属性，分别是：perspective，perspective-origin，transform-style。 "}, {"id": "7001107227989770276", "title": "如何使用CSS制作动画效果 | 第三方库介绍以及animate.css的简单使用", "desc": "这是我参与8月更文挑战的第27天，活动详情查看：8月更文挑战 轮子 一个很重要的的准则：不要重复造轮子。 CSS制作动画从代码上来说并不简单，每个动画效果都涉及到许多参数，要达到合适的动画效果需要断地"}, {"id": "7005119398516260871", "title": "CSS相关 个人笔记(position,float,盒模型,z-index) 一", "desc": "关键字： static , absolute , relative , fixed ,sticky ...."}, {"id": "6844903876005462024", "title": "CSS优秀起来真没JS什么事", "desc": "最近我在CodePen上发现了一个纯CSS实现，具有渐变倒影和3D旋转效果的栅栏动画，他的实现方式是：利用10个<div>元素创建10个栅条，接着再复制整份<div>元素，并创建一个渐变遮罩形成渐变效果，以此作为栅栏的倒影。 这听起来有点像用左脚的脚趾去抓你的右耳背部（译者理解…"}, {"id": "6884971597498613768", "title": "移动端布局面试题 全面考察你的CSS功底(居中篇)", "desc": "由于移动互联网的飞速发展，现在基本没有哪个前端说自己只开发 PC 端，移动端什么的我不管。 布局可不仅仅只是把数据整齐的罗列在页面上这么简单，一个合适的布局可以令用户的操作非常顺畅。同时在不同的场景下也应选择不同的布局，如果选错布局的话很可能会导致用户对页面的操作不那么的丝滑，…"}, {"id": "6844903935719768072", "title": "真.1px边框,  🚀 支持任意数量边和圆角, 1 个万金油的方法", "desc": "🚀 由于现在手机都是\"高密度屏幕\", 我们写的1px到了手机上会用2/3个物理像素点去显示, 这样1px边框看起来就会比较粗, 所以如果你也觉得自己的1px边框比较粗, 那么请往下看. 其实如果你百度\"1px边框\"会有很多文章, 大部分都会说有7种方法, 不过其实经过我的测试…"}, {"id": "6968625219619520526", "title": "3 分钟搞定 CSS 的 4 种引入方式", "desc": "在 HTML 样式中有 4 种 CSS 引用方式，分别为：行内样式（行间样式、内联样式、行嵌样式）、内部样式、链入外部样式、导入外部样式。 行内样式（行间样式、内联样式、行嵌样式）： 在网页元素上通过"}, {"id": "6844903695042215944", "title": "幻术，一行代码实现镂空效果", "desc": "学习之前可以先看看酷炫的动画效果，想想怎么实现。 从最近在做的需求说起，一个优惠券样式，过设计稿的时候认为没什么大不了的，满口答应了。真正开始开发的时候遇到问题，主要是镂空效果实现方式上比较费劲。要求是背景可配，并且票身可以配背景图，然后镂空是真镂空。 设想并尝试了很多种方案，…"}, {"id": "6862187926849159182", "title": "吐血整理的前端代码规范系列 -- css规范", "desc": "BEM规范是一种主流的css命名规范，BEM分别对应的是block ， element 和 modifier，为的是结束混乱的命名方式，达到一个语义化的CSS命名方式。 在BEM规范中，block（块）表示一个组件的意思，假设你要写一个按钮的组件，只需要设置一个 .button…"}, {"id": "7002229313529446431", "title": "CSS动画-打字效果的实现 | 你知道ch是多长吗", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 问题起源 在电视上，我们都看到过一种很酷炫的视频效果，一般是重要的事件发生，电视荧屏上会出现：打字动画，并伴随着有节奏的打字机的声音，有效"}, {"id": "6909133332064239623", "title": "用神奇的 form 验证 API 来优化你的表单验证", "desc": "鱼头曾在 『极限版』不掺水，用纯 CSS 来实现超飒的表单验证功能 一文中分享过一个花里胡哨的 纯 CSS 的表单验证功能 。虽然仅仅依赖 CSS 是无法满足我们的日常开发需求的，但是配合着各种原生的 form 验证 **API ** ，情况又不一样了。 下面就让我们来了解一下…"}, {"id": "6975653973550170126", "title": "🍊透析BFC问题（宝，我输液了，输的想你的夜）", "desc": "一、BFC到底是什么？ BFC(Block Formatting Context)也叫\"块格式化上下文\"。 简单来说就是，BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局，"}, {"id": "6844903687362445326", "title": "微信小程序 bug 集中营", "desc": "2019-08-16 13:41:40 由于这篇文章可能比较久远，文章进行了微调，一些 bug 可能修复，或者其中一些链接坏了，请小伙伴们前往 GitHub 获取最新文章。 总结1: 在页面制作商，需要 3 周工作日（工作 15 天）搞定，前后端对接口另计。实际上，12 个工作…"}, {"id": "6943032791122575390", "title": "有意思！强大的 SVG 滤镜", "desc": "想写一篇关于 SVG 滤镜的文章已久，SVG 滤镜的存在，让本来就非常强大的 CSS 如虎添翼。让仅仅使用 CSS/HTML/SVG 创作的效果更上一层楼。题图为袁川老师使用 SVG 滤镜实现的云彩效果 -- CodePen Demo -- Cloud (SVG filter …"}, {"id": "6981623679415222302", "title": "flex大法：一网打尽所有常见布局", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 flex全称Flexible Box模型，顾名思义就是灵活的盒子，不过一般都叫弹性盒子，所有PC端及手机端现代浏览"}, {"id": "6844903993500499981", "title": "CSS的未来已来", "desc": "其实鱼头的脚手架里早就把postcss-cssnext换成了postcss-preset-env，不过一直没删，但是看到这句话之后，处于好奇，就去翻了翻PostCSS的官网，然后又思考了下这些年CSS的发展历程，遂有这篇文章的出炉。 随着互联网的发展，人们对网页的要求已经是从只…"}, {"id": "6995251216569597983", "title": "旋转导航动画", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 旋转导航动画：是指一开始隐藏导航栏，点击左上角图标后，文章向右旋转 30度 ，然后导航栏成 三角状 显露出来的一种动画效果"}, {"id": "6913725602428600334", "title": "使用纯 CSS 实现滚动阴影效果", "desc": "开门见山，有这样一种非常常见的情况，对于一些可滚动的元素而言。通常在滚动的时候会给垂直于滚动的一侧添加一个阴影，用于表明当前有元素被滚动给该滚出了可视区域，类似这样： 对于两侧的列在滚动的过程中，静止不动，吸附在边界的问题，通常 CSS 使用 position: sticky …"}, {"id": "6969441630289920008", "title": "一些css画的规则图案", "desc": "最近在看《css揭秘》这本书，顺便总结一下个人觉得不错的地方，主要总结一些在开发当中比较常见的规则图案。"}, {"id": "6973498080033243149", "title": "端午节用 css 做了个疑似粽子，结果哭了", "desc": "端午节开脑洞瞎折腾用 css 画的疑似粽子，最终的效果好不好看不知道，关键是告诫自己，不要瞎开脑洞，哭还不是问题，主要暴露智商~"}, {"id": "6918921604160290830", "title": "CSS 奇思妙想边框动画", "desc": "觉得它的风格很独特，尤其是其中一些边框。 嘿嘿，所以来一篇边框特辑，看看运用 CSS，可以在边框上整些什么花样。 谈到边框，首先会想到 border，我们最常用的莫过于 solid，dashed，上图中便出现了 dashed。 除了最常见的 solid，dashed，CSS b…"}, {"id": "6997224854554411045", "title": "CSS 奇思妙想 | 使用 resize 实现强大的图片拖拽切换预览功能", "desc": "本文将介绍一个非常有意思的功能，使用纯 CSS 利用 resize 实现强大的图片切换预览功能。类似于这样： 思路 首先，要实现这样一个效果如果不要求可以拖拽，其实有非常多的办法。 将两张图片叠加在一"}, {"id": "7001860784586227720", "title": "CSS预处理器，你还是只会嵌套么 ？", "desc": "这是我参与8月更文挑战的第12天，活动详情查看：8月更文挑战 前言 滴滴大佬：CSS预处理器有用过么？ 我：嗯嗯，用过SASS的嵌套。 佬：没了？ 我：...（尬住了） 不知道大家情况是不是和我一样，"}, {"id": "6941206439624966152", "title": "1.5 万字 CSS 基础拾遗（核心知识、常见需求）", "desc": "本篇文章围绕了 CSS 的核心知识点和项目中常见的需求来展开。虽然行文偏长，但较基础，适合初级中级前端阅读，阅读的时候请适当跳过已经掌握的部分。 这篇文章断断续续写了比较久，也参考了许多优秀的文章，但或许文章里还是存在不好或不对的地方，请多多指教，可以评论里直接提出来哈。 小t…"}, {"id": "7002114021201543204", "title": "前端样式那些事", "desc": "前言 CSS作为前端必备技能，他的上手比较容易，但深入缺难。 CSS不仅仅是一门科学，而是一门艺术。 您可以了解选择器的每种组合，并且可以成为每种样式属性的专家，但是仍然无法根据需要布置和样式化网站。"}, {"id": "7003667297986412581", "title": "HTML+CSS+JS 实现 全屏图片手风琴效果", "desc": "​ css样式： html : 大家可以点赞、收藏、关注、评论我啦 、需要完整文件随时联系我或交流哟~！ ​"}, {"id": "7007633705913188359", "title": "CSS的五种定位", "desc": "到目前为止，共有五种定位方式： static relative absolute fixed sticky"}, {"id": "7005088725923266567", "title": "React 小册 ｜ CSS 解决方案", "desc": "本篇主要记录 📝 一下 scss + css modules + antd 样式修改的问题 以及 styled-components这个库的使用 时光机 👾 React 小册 - 起步 JSX ✅ ✅"}, {"id": "7000504844209356836", "title": "学透CSS-仿掘金APP文章加载效果-文字渐变与动画", "desc": "在APP上点击阅读文章，在加载文章的时候会出现掘金两个字，并且带有渐变效果的效果的。大概就是下面这张图的效果。"}, {"id": "7007311095631183880", "title": "CSS备忘录（五）：animation ", "desc": "animation 01.过渡（transition） transition-property: transition-duration: transition-timing-function: （过"}, {"id": "7002217584296722463", "title": "学透CSS-7个场景让你深入理解min/max - width/height", "desc": "min/max - width/height 这几个我们不常用的属性，在某些时候还是能发挥奇效的。菜单动画，overflow:hidden失效等等！！"}, {"id": "6989017411261300750", "title": "CSS 进阶之熟悉又陌生的 content", "desc": "在开发中遇到类似清除浮动、小图标、替换内容等场景时不可避免会遇到 content 属性，一般就是百度下解决方案，甚少细究到底，在看《CSS 世界》这本书时看了下 content 章节，今天这里就"}, {"id": "6989513390636924936", "title": "每个前端都需要知道这些面向未来的CSS技术", "desc": "前端技术日新月异，我们需要不断学习来更新自己的前端知识并运用到自己的项目中。这次笔者整理一些未来普及或者现在同学们可能已经用到的CSS特性，包括SVG图标、滚动特性、CSS自定义属性、CSS"}, {"id": "7005838707651526663", "title": "CSS+JS实现土味中秋特效", "desc": "我正在参加中秋创意投稿大赛，详情请看：[中秋创意投稿大赛] 今天我们来实现一个元素颜色变换的动效.像这种颜色随机变换的动效可以设计的非常炫酷;你们也可以自由发挥试一下哦!希望大家多多支持哦!"}, {"id": "7004640004517396511", "title": "CSS 快速实现烟花绽放🎆", "desc": "最近项目上需要做一个烟花动画，要求是随机大小，不同地方出现，先看效果 一、选择合适的动画 什么样的场景决定使用什么样的动画。比如一些比较轻量、装饰性的动画，CSS 动画就足够了，而一些对动画要求比较高"}, {"id": "6999373569817837581", "title": "奇思妙想进度条大合辑，手把手 DIY 各种进度条", "desc": "本文用h5标签、css、svg 等几种技术实现长条进度条、环形进度条，并汇集一些打破你想象的进度条。"}, {"id": "6997951674660683806", "title": "学透CSS-5种暂停动画的方式，你都会？", "desc": "老板掏出了刀，我赶紧掏出了MDN，嘿，您猜怎么着，还真让我找到了， `animation-play-state`,这属性那叫一个管用哦。"}, {"id": "7000261375654101005", "title": "你不知道的CSS", "desc": "前言 Hello 大家好！ 我是前端 无名 ， 最近在看css新世界，对于忙于写业务的我，收获颇多。你不知道的css,快进来瞧瞧！"}, {"id": "7004611322222477326", "title": "🔥🔥 styleds-components 的原理你能讲一下吗？", "desc": "随着这些年前端技术的发展，陆陆续续涌现出很多优秀的技术，尤其是在CSS领域有各种不断的尝试，例如：CSS In JS 在这个领域中涌现出许许多多优秀的库， 例如：styled-components，E"}, {"id": "6994604265700327460", "title": "CSS 即将支持嵌套，SASS/LESS 等预处理器已无用武之地？", "desc": "最近，有一则非常振奋人心的消息，CSS 即将原生支持嵌套 -- Agenda+ to publish FPWD of Nesting，表示 CSS 嵌套规范即将进入规范的 FWPD 阶段。 目前对应的"}, {"id": "6844903849992388615", "title": "实现一个最小的 CSS 响应式布局系统", "desc": "响应式布局系统，在现在流行的 CSS 框架中已经非常常见了。它主要由容器类和约定一行列数的栅格系统组成，组成了一个框架的骨架。 在流行的前端框架 Bootstrap 和 Bulma CSS 中，就有体现。像 Bootstrap 的 .container、.row、.col；还有…"}, {"id": "6844903661340983304", "title": "【译】15个有趣的JS和CSS库（2018.7）", "desc": "Tutorialzine每月都会给我们精心挑选优秀的web开发资源，这些资源可以帮助我们解锁最新和最炫酷的网络开发姿势。前端er,让我们一起先睹为快吧！ polly是一个用于记录，重放和模拟HTTP交互的开源库。它提供了一套完善且易用的API来拦截、修改和附加事件，并更改配置来…"}, {"id": "6945618076087894052", "title": "前端CSS高频面试题---2.em/px/rem/vh/vw的区别", "desc": "传统的项目开发中，我么只会用到px、%、em这几个单位，它们可以适用于大部分的项目开发，并且具有良好的兼容性。 从CSS3开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了rem、vh、vw、vm等一些新的计量单位。 利用这些新的单位开发出比较良好的响应式页面，适应多种…"}, {"id": "6913727681439891464", "title": "项目没有 css 文件？tailwindcss 小程序实践", "desc": "什么是tailwindcss?在解释tailwindcss之前，我们先了解一下它的前身atomiccssatomiccss即原子css，它提倡并提供一套原子类，类名为其对应css的缩写例如：class"}, {"id": "6973960286189387789", "title": "【css动画】如何用纯css实现间隔动画", "desc": "通过纯css的方式实现一个有间隔的无限循环动画，并且动画需要加缓动函数。单纯的animation肯定实现不了，大家不要一直专注在各种属性的使用上，可以灵活通过其他元素配合，本文就通过css障眼法的方式"}, {"id": "6844903648674185223", "title": "[译] 用 30 分钟建立一个网站的方式来学习 Bootstrap 4", "desc": "Bootstrap 有不少版本，其中最新的是第四版。在这篇文章里我们就是要来用 Bootstrap 4 来构建一个网站。 你可以使用这行命令来安装 Bootstrap 4 —— npm install bootstrap。 通过下载这个 Bootstrap 4 代码库并在本地使…"}, {"id": "6992830940896559117", "title": "使用css实现打字效果", "desc": "等宽字体（monospaced font） 指字符宽度相同的电脑字体。 ch (character with) 表示数字 “0” 的宽度。 在等宽字体的前提下，一个英文字母的宽度为1ch。"}, {"id": "6844904032700481550", "title": "前端组件设计之一——设计原则", "desc": "一个组件的复杂度，主要来源就是自身的状态；即组件自身需要维护多少个不依赖于外部输入的状态。 组件开发中，如何将数据和UI解耦，是最重要的工作。 组件开发过程中，时刻谨记、思考是否符合以下的原则，可以帮助你开发一个更完善的通用组件。 如fetch请求和渲染逻辑，应该分离。因为fe…"}, {"id": "6844903694614396941", "title": "如何优雅地改善程序中for循环", "desc": "有点编程基础的童鞋，都可以很快想到上面的编写方法。那不知道大家是否会跟我一样对于写for循环时，功能是没毛病，但编写起来总会觉得很不优雅，例如还要定义对应的i变量（拿上述举例）以及还要自主控制i变量的变化，这样无疑会变得繁琐起来，也会让我们编写代码效率有所下降 到这里，ForE…"}, {"id": "6953969352504770590", "title": "玩转CSS的艺术之美-动画 | 小册免费学", "desc": "能用CSS实现很多动画，是一件很装逼的事情，所以必须得好好学！本文结合小册讲解内容及网上学习资料，分享了几种有趣且快速实现的动画案例。"}, {"id": "6844904186832748557", "title": "CSS实现Skeleton Screen（骨架屏）", "desc": "在加载网络数据时，为了提升用户体验，通常会使用一个转圈圈的loading动画，或者使用Skeleton Screen占位。相比与loading动画，Skeleton Screen的效果要更生动，实现起来来也很简单。利用CSS就可以实现一个简单的Skeleton Screen。 …"}, {"id": "6844903897421578253", "title": "一文搞懂CSS中的字体单位大小(px,em,rem...)", "desc": "在学习的过程中,发现CSS有很多可以描述单位的尺寸。比如px,em,rem,vw等等。平时也没有深究，一来是没时间，二来是在我学习清单中优先级过低。一直想彻底弄明白，一直耽搁到现在。现在花上一点时间来整理一下，彻底弄懂它。 绝对长度单位。 绝对长度单位表示为一个固定的值，不会改…"}, {"id": "6844903881772630024", "title": "面试之道之 CSS 布局", "desc": "浮动主要考察为什么清除浮动和如何清除浮动的问题。 浮动场景：通常对于块级元素我们是不设置高度的（天知道以后会不会加内容，另外设置了高度会带来显示问题），块级元素的高度是靠子元素内容撑开的。这时，子元素设置浮动，子元素就会脱离文档流，此时父元素的高度就不能靠子元素内容撑开了，就会…"}, {"id": "6844903896473665550", "title": "趣味CSS3效果挑战小汇总", "desc": "众所周知，在CSS3中产生了诸多优秀的特性，现在就来分享一下我这段时间对于这些特性的效果实践，希望对大家有所启发。 要画一个对话框，首先来学习做一个三角形。其实非常的简单。 利用skew特性，第一个参数为x轴倾斜的角度，第二个参数为y轴倾斜的角度。 大家可以自己动手试试。 那我…"}, {"id": "6844903914161045511", "title": "分享常用的CSS函数，助你写出更简洁的代码", "desc": "分享一些在项目中好用的一些CSS辅助函数，可以直接应用到你自己的样式代码中，传送门。这些函数当然不是CSS原生写法，有分为sass语法和less语法两套，大家可以自行选择复制或者下载。 下面罗列的均是scss语法。less语法请查看传送门 这个在移动端上就更有用了，推荐等级直接…"}, {"id": "6984808045490634765", "title": "flex响应式布局总结", "desc": "布局的传统解决方案，基于盒状模型，依赖display属性+position属性+float属性，它对于那些特殊布局非常不方便，比如垂直居中就不容易实现。而Flex布局，可以简便、完整、响应式完成布局。"}, {"id": "6844903805671178247", "title": "一些有趣的 CSS 魔法和布局（上）", "desc": "布局和样式，是每个前端的必修课。在日常的工作中，也会碰到一些特定场景的布局需求，配合上样式，就能实现一些神奇的效果。我搜罗了一些日常开发中遇到的布局，以及浏览各大网站时碰巧发现的神奇特效写法，在此做个分享。 由于篇幅原因，会分为 2 篇。今天，会先介绍一些有趣而又实用的布局的写…"}, {"id": "6994001899020091422", "title": "CSS的新功能", "desc": "display的gap属性 gap: 10px; 横向纵向的间隙 column-gap: 10px; 左右的间隙为10px; row-gap: 20px; 上下的间隙为20px; 设置的只是class"}, {"id": "6986099836684599333", "title": "css flex 布局 笔记", "desc": "flex 布局笔记 flex-direction 决定主轴的方向 flex-direction row row-reverse column column-reverse justify-conten"}, {"id": "6909405975850811400", "title": "H5移动端禁止长按保存图片", "desc": "最近在写一个海报分发证书的需求，用户信息是服务端接口请求展示，其他以img图片形式展现。在测试场景中发现长按页面，保存图片，但是保存的图片只是img图片，并没有服务端返回信息的整体渲染，所以考虑禁止长按保存图片功能。基于此做以下记录 给img标签添加css属性, 我这个海报连接…"}, {"id": "6991820278405791757", "title": "吸顶的几种实现方式 | 8月更文挑战", "desc": "吸顶是一种常见的设计样式，即组件一开始随着节目滚动，但触碰到某个边界后吸附在其上固定下来。比如百度首页的搜索框的吸顶效果。 滚动后的效果图如下所示： 那么对于这种很普遍的吸顶，有哪些实现方式呢？ po"}, {"id": "6991809500709650463", "title": "Css+Vue+Html 使用Animate.style展示过渡或延时动画", "desc": "一、摸鱼没有网址怎么行？ 使用这个动画的前提一定是先有这个动画的官网，地址我已经搬过来啦~ https://animate.style/#best-practices 二、有了网址不会安装如何痛快摸鱼"}, {"id": "6985097512449212453", "title": "css+js实现简单的tab选项卡效果", "desc": "简单的选项卡, 简单的css + js 实现 选项卡 代码: 效果如下:"}, {"id": "6970694281447079944", "title": "如何控制css鼠标样式以及扩大鼠标点击区域 ｜ 周末学习", "desc": "大多数人可能不知道，css是有自己鼠标样式的，从css2.1到css3.0，鼠标样式也在不断的拓展补充。鼠标指针的作用不仅仅只是表明当前用户即将操作的位置，更重要的是，它也能提示用户即将执行的动作……"}, {"id": "6868559388870311950", "title": "[css]为什么我们常说1px问题而不说2px😵", "desc": "前段时间看群里面有人问关于1px的问题,顿时群里就炸开了,好像很多人都对1px这个问题不太理解,什么是1px问题?为什么2px没有问题?1px问题怎么解决?看完这篇文章相信你对这些概念有本质上的认识。 首先需要明确一点在我们开发中,1px不是一定会出现的,比如pc基本不会出现,…"}, {"id": "6984252925741072391", "title": "css计数器语法小记", "desc": "CSS 计数器通过一个变量来设置，根据规则递增变量。其属性有 counter-reset 、counter-increment 、content的counter() / counters()方法。"}, {"id": "6969016951536353316", "title": "CSS 三大特性", "desc": "1. CSS层叠性 1.1.概念： 所谓层叠性是指多种CSS样式的叠加。 是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉 1."}, {"id": "6844904158043045895", "title": "利用高效的css 提高你的开发效率~（下）", "desc": "18。竖文排版 待续。。。。"}, {"id": "6987678339137814542", "title": "vertical-align的一些理解", "desc": "例子 首先看个具体的例子： 上面的代码中定义了一个父元素，里面包含了两个 inline-block 的子元素，效果如下： 有没有发现，我们没有定义父元素的高度，子元素也没有设置 margin-bott"}, {"id": "6919291370721001485", "title": "css小技巧:面积图效益", "desc": "数据单位：我们将在我们的HTML中使用无单位的数据（即无px，em，rem，%或任何其他单位）。--start和--end自定义属性将是0和1之间的数字。 列宽：我们不会为每个&#x3C;li>元素设置固定值的width或者%，因为我们不知道有多少列。每一列的宽度将基于父容器的…"}, {"id": "6874940963635232775", "title": "移动端1px解决方法知多少", "desc": "在移动端web开发中，如果UI设计稿中设置边框为1像素，前端在开发过程中如果出现border:1px，测试会发现在retina屏机型中，1px会比较粗，即是较经典的移动端1px像素问题。 设备像素比：dpr=window.devicePixelRatio，也就是设备的物理像素与…"}, {"id": "6961749021459218439", "title": "十三.CSS布局设计汇总（终极版）", "desc": "本文介绍了常用的7种方法写两列布局，三列布局（最右自适应）介绍了5种方案，双飞翼+中间自适应的三列布局写了6种方案；最后还补充了等分登高布局，剖析了小米商城的大概结构...."}, {"id": "6844903847580663822", "title": "如何在零JS代码情况下实现一个实时聊天功能❓", "desc": "前段时间在 github 上看到了一个很“trick”的项目：用纯 CSS（即不使用 JavaScript）实现一个聊天应用 —— css-only-chat。即下图所示效果。 在我们的印象里，实现一个简单的聊天应用（消息发送与多页面同步）并不困难 —— 这是在我们有 Java…"}, {"id": "6934239161545293831", "title": "学习 transform 属性 和 常用方式", "desc": "作用是修改元素的中心点。transform属性 的变换都是基于中心点来进行变换的，中心点修改，元素变换后的位置就会改变。 可以使用一个，两个或三个值来指定，中心点偏移量。 第一个值指定X轴偏移量，参数类型是css 长度单位、百分比 或 left, center, right, …"}, {"id": "6844904161151025160", "title": "你真的掌握了CSS水平垂直居中了吗？", "desc": "居中这个特点在网页中真的是随处可见，这是一个非常基础但又是非常重要的属性，所以面试官也经常会在面试中问到这个问题。我们要做的不是只掌握一两种，而是要尽可能多地掌握大部分方法。现在就让我们来看一看水平垂直居中都有哪一些常见的方法吧。 首先，让我们来看一下子元素宽高未知的居中方法。…"}, {"id": "6844903576972574734", "title": "用CSS实现Tab页切换效果", "desc": "最近切一个页面的时候涉及到了一个tab切换的部分，因为不想用js想着能不能用纯CSS的选择器来实现切换效果。搜了一下大致有下面三种写法。 缺点：因为锚点会将选中的元素滚动到页面最上面，每次切换位置都要移动，体验极差。 经过实验发现第三种方法达到的效果最好。所以下面讲一下第三种实…"}, {"id": "6844904162937815053", "title": "前端CSS必会知识点梳理（持续更新）", "desc": "让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。 权重相同的，后写的样式会覆盖前面写的样式。 px (pixel，像素):相对长度单位。像素px是相对于显示器屏幕分辨率而言的 em(相对长度单位，相对于当前对象内文本的字体尺寸):em是相对长度单位…"}, {"id": "6946370082092089351", "title": "理解 Css 的 Clip Path", "desc": "最近看一篇文章包含 clip-path 的应用，发现自己对这CSS属性一知半解，决定要好好了解一下它。在网上搜了下，看到一篇文章叫 Understanding Clip Path in CSS，浅白又不失深度介绍 clip-path，看完后决定把它翻译，补充我自己的见解，算是自…"}, {"id": "6844903896813420552", "title": "【动画】想怎么动就怎么动，在我的地盘你得听我的", "desc": "简单概述下上面的gif，布局采用了d3实现，针对这种需求常规的可视化图形插件(如ECharts、ichartjs等)，通过简单的配置可能已无法做到，就算能实现灵活度也必然受到了限制。熟悉d3的同学实现起来也不会太复杂，图中主要是数字的变化以及弧形的颜色渐变的效果应如何实现，以及…"}, {"id": "6844903957219934222", "title": "CSS偶有所得 - table 边框加圆角踩坑", "desc": "看到代码里，关于表格，大家不是很喜欢用原生的table，基本都是div来做。究其原因，大概是table的样式有时候难把控，不像直接操作div那么方便。比如：我们想做一个表格，然后希望这个表格带有边框，且最外层的边框是圆角的。 2. 实践采坑ing 表格之间之所以有空隙是因为ta…"}, {"id": "6912022280558084104", "title": "2020最后一场雪 纯CSS实现飘雪新年贺卡Demo 附源码", "desc": "What不多说，封面即效果图~访问地址：http://my-bucket-1252266428.cos-website.ap-guangzhou.myqcloud.com/https://codesa"}, {"id": "6903792503246290957", "title": "2020年的css周边之sass用法指南", "desc": "sass是一个样式表语言，只有语法和定义，需要对应的实现才能根据sass源码转化为css，sass对应于实现就类似于ecma262对应于v8。 现在最新的实现是dart-sass,之前还有一个实现是Node-Sass,后者已经废弃，引入dart实现版本的原因请参考Announc…"}, {"id": "6892288850694307854", "title": "CSS background 属性", "desc": "background-color设置的只是背景色，background设置的是整个背景。 当元素本身设置了background-image属性时，如果设置了background-color，图片不会被覆盖，background-color会在image底层；如果设置的是back…"}, {"id": "6961718483327385613", "title": "关于css中百分比的一些没啥营养的研究", "desc": "关于css中百分比的一些没啥营养的研究。最近逛掘金发现，掘金有了新的功能模块————创作者中心。。。"}, {"id": "6924835971129311240", "title": "【思考篇🤔】一个CSS实现引发的思考 ", "desc": "从业务中思考，从实现中进步。 当处理第四步：点击到中间middle，处理left的样式时：我才发现没有选择前面兄弟元素的选择器。 +兄弟选择器只会匹配它后面第一个兄弟元素。 ~兄弟选择器只会匹配它后面的所有兄弟元素。 无论是+选择器还是~选择器，它们都只能选择后面的兄弟元素。 …"}, {"id": "6844903818094706701", "title": "记一个头像高光动画的CSS实现", "desc": "为了使大家看清楚。我设了黑底，理论上如果切图的话是透明底PNG。 实现长方形和颜色渐变background: linear-gradient(90deg, transparent 15%, #fff);后，使其旋转transform: rotate(?deg);。多出来的部分会…"}, {"id": "6844903681008074765", "title": "精准操控的滚动体验，浅谈新标准 Scroll Snap", "desc": "在最近更新的 Chrome 69 稳定版中，全面支持了 CSS Scroll Snap 标准。该标准用于设置一个滚动捕捉点，让最终的滚动位置附着于就近或特定类型的捕捉点中，以达到更好的滚动体验。今天我们就来研究一下。 学过 CAD 系列软件的同学可能很清楚，我们在移动一个对象时…"}, {"id": "6995509135043199006", "title": "CSS备忘录（一）：选择器", "desc": "1.常用选择器 元素选择器：标签名{} id选择器：#id属性值{}，eg. #box1{color: red;} 类选择器: .class属性值{} 通配选择器：*{} 2.复合选择器 交集选择器 "}, {"id": "6960813981883858951", "title": "css布局", "desc": "Css 常用布局 两栏布局（边栏定宽主栏自适应） ​ 方法一：float + overflow（BFC 原理） ​ 方法二：float + margin ​ 方法三：flex 三栏布局（两侧栏定宽主栏"}, {"id": "6989744920202477576", "title": "CSS 盒子模型", "desc": "盒子模型： 盒子尺寸的计算： box-sizing：border-box 开启box-sizing：border-box 后是设置 width 和 height 的是最终的盒子宽度和高度，一样不算外边"}, {"id": "6844904016447553550", "title": "不可思议的CSS导航栏下划线跟随效果", "desc": "在继续阅读下文之前，你可以先缓一缓。尝试思考一下上面的效果或者动手尝试一下，不借助 JS ，能否巧妙的实现上述效果。 OK，继续。这个效果是我在业务开发的过程中遇到的一个类似的小问题。其实即便让我借助 Javascript ，我的第一反应也是，感觉很麻烦啊。所以我一直在想，有没…"}, {"id": "6992031142639566861", "title": "回流（reflow）和重绘（repaint）", "desc": "笔记笔记笔记来自 https://github.com/sisterAn/blog/issues/33"}, {"id": "6911009814206218254", "title": "一张图带你掌握CSS transform变形", "desc": "hello，大家好，我是zhengyaing。 因为前段时间停更了一段时间，近期会加速把把CSS的剩余模块都讲完。视频请转移至B站观看，这次还新增了实践模块！目前CheatSheet系列已经更新到了第12篇，欢迎大家去gayhub，给个star：前端CheatSheet 今天要…"}, {"id": "6974396479712526372", "title": "前端CSS3：transform形状变换(2D)&案例：用旋转和li画钟表的12根针", "desc": "1.2.3...<img src=\"./img/2.4.同样不能写两行，一行scaleX，一行scaleY，这样会覆盖，只保留后者的样式 设置scaleX(-0.transform: translate(200px, 200px) scaleX(-0.效果：水平方向翻转并缩小到原..."}, {"id": "6844903999058116615", "title": "2019再谈移动端position fixed", "desc": "最近在开发移动端页面的时候遇到固定顶部导航栏并添加搜索输入框的需求，第一反应就是用 position: fixed; 实现。但是这个属性在移动端总有各种奇怪的问题。早在2011年就有人问过这类似问题，但是都9102年了这个问题还有人提出。于是我决定在今年的新环境中再踩一遍 po…"}, {"id": "6982160960819560484", "title": "「HTML+CSS」--自定义加载动画【034】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 边框：4px 白色 solid 效果图如下 步骤2 将span标签设置为flex布局 "}, {"id": "6941234035712589832", "title": "移动端1px实现和问题踩坑", "desc": "目前主流的屏幕DPR=2或者3。拿2倍屏来说，设备的物理像素要实现1像素，而DPR=2， 所以css 像素只能是 0.5。"}, {"id": "6979175809265172511", "title": "简单实现瀑布流布局 html+css ", "desc": "这是我参与更文挑战的第26天 效果： 前言： 这个效果几行 css 代码就能搞定，但是其有个缺点是图顺序是从上到下排列再从左到右。没能实现从左到右再从上到下顺序排列。这样不利于最新图片优先显示的原则。"}, {"id": "6954265829525422087", "title": "BFC的触发及解决问题", "desc": "一、什么是BFC 二、怎样触发BFC(position、float、display、overflow) 三、BFC可以解决那些问题 1.使用Float后，高度塌陷问题 2、Margin边距重叠 3、两"}, {"id": "6944994575303835684", "title": "文字溢出部分显示为省略号", "desc": "|normal|连续的空白符会被合并，换行符会被当作空白符来处理。换行在填充「行框盒子(line boxes)」时是必要|| |nowrap|连续的空白符会被合并。但不允许换行|| |pre|连续的空白符会被保留。在遇到换行符或者&#x3C;br>元素时才会换行|| |pre-…"}, {"id": "6923105701812404232", "title": "创建在线样式指南(living style guide)/ 案例分析", "desc": "感谢 勾三股四 的推荐，FamilySearch 的工程师 Steven Lambert 在这篇文章 Creating A Living Style Guide: A Case Study 中现身说法分享了他的团队建立样式指南的开发过程，从需求到实施到发布详细地讲述了他们的经验…"}, {"id": "6922700945243504654", "title": "css学习（二）", "desc": "当元素显示为table-cell时不具备外边距属性，因此它们不会折叠。此外还有table-row和大部分其他表格显示类型，但不包括table、table-inline、table-caption 众多的元素浮动到同一侧，如果每个浮动盒子的高度不一样，布局也会千变万化。 BFC里…"}, {"id": "6844903619272114183", "title": "爬虫攻防之前端策略简析", "desc": "前端反爬，有点意思。前端搞反爬，更有意思"}, {"id": "6906721869828161550", "title": "CSS 知识点", "desc": "flex-shrink 属性指定了 flex 元素的收缩规则。 仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。 注意：如果元素不是弹性盒对象(flex)的元素，则 flex-shrink 属性不起作用。"}, {"id": "6844903961581846536", "title": "块格式化上下文BFC", "desc": "1. 什么是BFC 便与记忆的一种强行解释：创建一个独立的块级区域。 当子元素中使用了float后，子元素脱离文档流，父元素会无视该元素。因此会出现塌陷情况，将父元素变成BFC可解决该问题。 2. 将父元素转化为BFC overflow: hidden缺点：有副作用。 disp…"}, {"id": "6844903615610486797", "title": "通过生成内容和CSS网格布局为空单元格添加样式", "desc": "新手在使用网格布局时常见的一个问题是：如何对一个不包含任何内容的单元格添加样式。在当前的Level 1规范中还无法做到，因为无法选定空单元格或网格区域并对其添加样式。也就是说，想要设置样式必须插入一个元素。 本文我将会介绍如何使用CSS生成内容为空单元格添加样式，而不添加多余的…"}, {"id": "6844903774662705166", "title": "15 CSS Border Examples", "desc": "Collection of hand-picked free HTML and CSS border code examples. Try to have a dynamic and responsive table that has borders only between …"}, {"id": "6844903580982312974", "title": "CSS Grid中的陷阱和绊脚石", "desc": "CSS Grid是一种不同的布局方式，在大家开始使用规范的时候，有很多常见的问题。这篇文章的目的是回答其中的一些问题，并且将会是Smashing Magazine中有关于CSS Grid一系列文章中的一篇。"}, {"id": "6844903602549440519", "title": "未来样式篇：不断被挑战的预编译工具", "desc": "前端不断在进化，我们开发者也需要不断进化思维。"}, {"id": "6844904129433714701", "title": "使用 outline-offset 属性实现加号", "desc": "使用outline-offset属性实现加号假设有这么一个初始代码:其效果如下:然后再把这个outline-offset属性的值改为-118px,那么就会把边框变成一个加号当然我这里为了效果显著一些,"}, {"id": "6844903591963000845", "title": "CSS 自定义属性（变量）", "desc": "变量名区分大小写，变量值可以是颜色、字符串、多个值的组合。 在 JS 中可以通过 getPropertyValue() 和 setProperty() 来获取和修改 CSS 变量值。"}, {"id": "6844903636158545933", "title": "CSS魔法堂：更丰富的前端动效by CSS Animation", "desc": "在《CSS魔法堂：Transition就这么好玩》中我们了解到对于简单的补间动画，我们可以通过transition实现。那到底多简单的动画适合用transtion来实现呢？答案就是——我们只需定义动画起始和结束帧的状态的动画。一旦关键帧数大于2时，我们必须转向CSS Anima…"}, {"id": "6936134762377527326", "title": "关于css知识点的一些总结", "desc": "求一个div的offsetWidth就是求他的content+padding+bordermargin-right和margin-bottom若为负值，则自身不受影响，其右边的元素或者下边的元素会向左"}, {"id": "6901545087809880077", "title": "CSS-基础语法", "desc": "内联式：也叫内行式,在html标签上 style内直接书写。没有脱离html，只能给一个标签使用。 内嵌式：在head标签内有一个style标签，属性和选择器放在其中。实现了结构样式分离，但没有完全分离，节省了代码量，头重脚轻，不利于阅读。 外联式：head内部用link标签引…"}, {"id": "6844903503656124423", "title": "css常用的技巧", "desc": "大家好，今天我们将会介绍一些非常实用的CSS小技巧，让我们开始吧！混合模式 不久之前Firefox和Safari浏览器已经开始支持类似Photoshop的混合模式，但是在Chrome和Opera浏览器"}, {"id": "6844903731016777742", "title": "bootstrap3.x内less文件夹的文件内容及功能分析", "desc": "首先谈谈为什么要写这篇文章。在公司最近的项目中，被要求使用bootstrap进行样式的重构，然而我们又有自己的一套UIkit，样式的覆盖如果直接写在css中是非常痛苦的一件事，开发成本巨大。因为如此，萌生了改写bootstrap源码的想法。然而改源码并非一件易事。市面上关于bo…"}, {"id": "6898567294297997325", "title": "从浏览器渲染原理到CSS动画", "desc": "关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。 修改元素的“layout”属性，也就是改变了元素的几何属性（例如宽度、高度、左侧或顶部位置等），那么浏览器将必须检查所…"}, {"id": "6844903641430622222", "title": "CSS中的图像处理 —— clip-path", "desc": "Photoshop中用钢笔工具勾出轮廓，转为选取，然后反选，删去多余部分，最后只留下要选择的区域， 这一波操作想必是懂PS都非常熟悉的了，就像这样： 在CSS3中也有思思功能的属性：clip-path。顾名思义：裁剪路径， 该属性可以将方方正正的元素裁剪成几乎任何你想要的形状。…"}, {"id": "6844903882095591437", "title": "[译]CSS中黑暗模式的循序渐进指南", "desc": "在CSS中启用黑暗模式，允许网站访问者随时切换到对眼睛友好且节省资源的设计。 可以使用几种UX模式为网站添加黑暗主题。 在本教程中，我们将向展示如何将jQuery添加到页面顶部，以便用户可以轻松地打开和关闭黑暗模式。 我们的演示案例可以自响应缩放，所以从智能手机到台式机到大屏幕…"}, {"id": "6844903592801861646", "title": "DOM部分扩展", "desc": "对DOM的两个主要扩展是Selectors API和HTML5。 Selectors API致力于让浏览器原生支持CSS查询。在没有原生支持之前，只能通过javascript代码来完成查询操作。之后，解析和树查询操作可以在浏览器内部通过编译后的代码来完成，极大地改善了性能。 q…"}, {"id": "6976846868878000159", "title": "css  steps 函数实现图像精灵动画", "desc": "steps 函数初入门 steps()是一个timing function，允许我们将动画或者过渡分割成段，而不是从一种状态持续到另一种状态的过度"}, {"id": "6973225625708396558", "title": "纯css实现多行文本框内的斑马条纹效果", "desc": "事情要从今天工作群里产品的一句用户体验来说起，竟然说用户反馈我们某个产品的可拉伸的文本框内文本换行不明显，用户体验非常不好。我心想，这™还不明显？再说都做成文本框了，也输不了多少字......"}, {"id": "6844903671461838862", "title": "Vue与React比较", "desc": "提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。 1. 运行时性能比较 React 和 Vue 都是非常快的，所以速度并不是在它们之中做选择的决定性因素。对于具体的数据…"}, {"id": "6997645372021538846", "title": "【动画消消乐】HTML+CSS 自定义加载动画 068", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度为8px 高度为48px 背景色"}, {"id": "6982392773466914853", "title": "CSS动画之太极图案", "desc": "这是我参与新手入门的第二篇文章 道生一，一生二，二生三，三生万物。对于喜欢道教学说或者玄幻小说的人来说，这句话应该是不陌生的。本着对太极图案的喜爱，所以写了此篇文章。 主要知识点 既然标题是CSS动画"}, {"id": "6844903517073702926", "title": "Q：你了解异步编程、进程、单线程、多线程吗？", "desc": "同步：一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去。 异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。 进程：狭…"}, {"id": "6844903983253815303", "title": "能让你受益匪浅的10个css使用技巧", "desc": "1. Safari 3D变换会忽略z-index的层级 在Safari浏览器下(此Safari浏览器包括iOS的Safari，iPhone上的微信浏览器，以及Mac OS X系统的Safari浏览器)，当我们使用3D transform变换的时候，如果祖先元素没有overflo…"}, {"id": "6844904152594644999", "title": "9个适用于Web开发人员的CSS工具", "desc": "不管你是一个多么有经验的开发人员，你都想让你的生活尽可能的简单。正确的工具可以帮助您完成此任务。你的能力取决于你使用的工具，所以花点时间挑选适合你需要的工具是明智的。 在本文中，我将讨论每个web开发人员都可以使用的一些工具，以便使你的工作更轻松、更高效。 1. Transit…"}, {"id": "6972750471966490660", "title": "5分钟实现炫彩流光按钮 html+css", "desc": "这是我参与更文挑战的第11天 话不多，先上效果： 简介： 用基础css做一个有一点炫酷的流光按钮，不止按钮，只要是盒子就行。 具体步骤： 1.先定义一个盒子当做按钮，如我就用a标签： 2.先给a标签写"}, {"id": "6844903689094692871", "title": "可能是最全面最易懂的解析前端浮动的文章", "desc": "瞬间浮想联翩，一个女神，轻轻地漂浮在水中。开心的拍打着水花，哇靠。。。 我觉得很多人连float是啥意识都不知道，要知道很多特性的原理是和其命名的单词或者字母有密切关联的，不是随便命名的。从名字中可以看到一些当初设计的初衷。 其实我个人理解，浮动造成的最核心的问题就是破坏了文档…"}, {"id": "6844903569884184589", "title": "再聊移动端页面的适配", "desc": "前端圈真乱，这话一点不假。但乱也乱的好处，乱则生变，有变化才有进步。今天还是老调重谈，聊聊移动端页面的适配。因为对于一枚前端而言，天天和页面打交道（H5页面），那么布局的活总是少不了，这也将面临不同终端的适配问题。不知道你是否和我一样，页面布局总是或多或少会有一些蛋疼的事情发生…"}, {"id": "6975707028136132622", "title": "谈谈实现瀑布流布局的几种思路", "desc": "最近遇到这么一个需求，需要在手机上做一个两列的瀑布流布局，后来就把这个问题研究了一下，做个记录。 一般来讲，这种布局可以分为两种情况： 1. 图片的数量是一定的，不需要页面滚动到底部时，再动态加载图片"}, {"id": "6844903679607177229", "title": "webpack4打包vue前端多页面项目", "desc": "之前一直用的脚手架，这次自己搭建webpack前端项目，花费了不少心思，于是做个总结。 public文件夹存放一些静态文件，src文件夹存放源码。每个页面通过一个入口文件（page1.js，page2.js,..）生成vue实例，挂载到插件生成的html文件的#app元素上。 …"}, {"id": "6901124887847403527", "title": "巧用 currentColor 属性来实现自定义 checkbox 样式", "desc": "在 CSS3 中，有一个常被忽视的颜色属性值，叫做 “currentColor”。 它可以作为属性值作用于元素的 color、background-color、border 等属性中，也可以作用于 SVG 和 Canvas。 currentColor 的语义是表示将颜色设为当前…"}, {"id": "6844903933350150158", "title": "「干货」CSS 不定宽高的垂直水平居中（最全 9 种）", "desc": "垂直居中，在 CSS 中是一个老生常谈的问题，面试的时候也会时常被提及。所以，今天我们就来聊聊 9 种不同的居中方法。 有常见的 flex、transform、absolute 等等。也有 CSS3 的网格布局。还有伪元素的方法，是的，你没有看错，::after 和 ::bef…"}, {"id": "6844904062224171021", "title": "css布局篇——双栏布局与三栏布局", "desc": "本篇章主讲双栏布局和三栏布局的一些较为古老及实用的原理及实现。说它古老主要也是因为我们不会涉及 flex 这一类魔法一般的布局方式，虽然我也知道用 flex 就能轻松实现很多布局。 做这个文章，一方面也是自己做个学习记录，当做温习一番。另一方面，也希望能够帮助看到这篇文章的新手…"}, {"id": "6994741170102353956", "title": "关于CSS权重的一些详解", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 关于CSS中的权重 在我们日常的学习中，有没有仔细的想过css的样式规则是什么样子的呢，为什么我写了这个样式不会显示在网页上，这个就和权重"}, {"id": "6992020102254182431", "title": "css编译相关loader以及loader实现原理", "desc": "css编译相关loader以及loader实现原理 ( 编译less文件，需要哪些loader？)"}, {"id": "6989267488991084551", "title": "element-ui项目中引用字体图标并进行图标替换", "desc": "前言 今天在做公司的Vue项目，其中涉及到了字体图标的引用，以及对element-ui字体图标的修改，因为在之前的公司就是改改bug，很多东西虽然了解过但在项目中很少自己动手实践。因此有些简单的东西都"}, {"id": "6979034958660632613", "title": "el-popover修改样式不生效？", "desc": "el-popover如何修改样式？ 在使用element-ui的时候，有一个常用的组件，那就是el-popover，但是element-ui官方文档中样式跟用法都比较局限，在使用时都需要改动样式 但是"}, {"id": "6981621260929204237", "title": "前端探索 | 【CSS】", "desc": "一、CSS基础 1. 什么是CSS 层叠样式表 (Cascading Style Sheets，缩写为 CSS） 2. CSS的发明 1994年提出CSS概念，1994年哈坤·利提出了CSS的最初建议"}, {"id": "6844903929344606222", "title": "BFC的个人理解", "desc": "是用来处理文档并将它显示在视觉媒体上的机制（说白了，这个模型就是控制生成不同的盒子），视觉格式化模型定义了盒（Box）的生成，盒主要包括了块盒、行内盒、匿名盒（没有名字不能被选择器选中的盒）以及一些实验性的盒（未来可能添加到规范中）。盒的类型由display属性决定。 每个块级…"}, {"id": "6844903860100661256", "title": "[译] CSS Animations 的提示与技巧（MDN）", "desc": "CSS Animations 的出现让你在文档和应用上创建不可思议的动画效果成为了可能。但是，有一些你想实现的东西可能并非如此浅显，或者说你不能轻易的想出一种聪明的方式来完成它们。这篇文章包含了一系列的提示与技巧来使得你的工作更加容易，其中包括了如何让一个已经停止的动画重新运行…"}, {"id": "6844903550225514509", "title": "CSS Gird 布局 指南", "desc": "CSS网格布局是一个二维的基于网格的布局系统, 其目的在于完全改变我们设计基于网络的用户界面的方式。CSS一直用来布局我们的网页, 但是他从来没有做过很好的工作, 最开始我们使用表格,然后float, position和inline-block。但是这些本质上是css的hack…"}, {"id": "6969009259723882510", "title": "标签显示模式（display）", "desc": "1. 什么是标签显示模式 1.1. 什么是标签的显示模式？ 标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个 1.2. 作用： 我们网页的标签非常多，再不同地方会用到不"}, {"id": "6951778157171048479", "title": "「HTML+CSS」--自定义加载动画【009】", "desc": "前言效果展示Demo代码HTMLCSS原理解释动画的核心部分就是span和span::after，section仅作为提示框。步骤1将span元素设置为一个96✖️96px的正方形边框为10px，白色"}, {"id": "6981405639687815198", "title": "CSS 表格和表单", "desc": "表格 - table 我们想要在 html 中制造出这样的表格，就需要使用 table，tr，td，caption，th 这些标签 为了更深一层对表格进行语义化，HTML 引入了 thead、tbod"}, {"id": "6931332668290236430", "title": "CSS 书写禅机", "desc": "注意：原文发表于2017-9-6，随着框架不断演进，部分内容可能已不适用。CSS日渐惹人憎恶。究其原因颇多，归根结底，皆因CSS给人的感觉总是飘渺迷蒙、变幻莫测。譬如微调某个样式后，却出乎意料地殃及一"}, {"id": "6898978696070168584", "title": "CSS常用样式", "desc": "100~900之间的整百数字。数字越大，文字显示的越粗。 其中400等价于normal，700等价于bold. 作用：设置文字是否斜体显示。 行高是文字真正占有的高度。 行高内部的文字是垂直居中于行高显示的。 实际应用中，行高的数值通过设计图获取，量取数值时需要使用一些辅助软件…"}, {"id": "6844903537927798791", "title": "关于BFC的一篇很好的文章", "desc": "面试被问了很多遍的BFC，每次都只是简单的回答了BFC能干什么，怎么样能生成一个BFC，没有去深入去了解BFC到底是个什么东西，这篇文章讲的挺好的"}, {"id": "6844903844715954184", "title": "【Hello CSS】第一章-CSS的语法与工作流", "desc": "在上一篇【Hello CSS】的序章CSS起源中介绍了CSS的诞生原因以及发展历史，了解了CSS的存在意义。从正篇篇开始将会正式开始介绍CSS这门语言的特点与功能。本篇则主要介绍CSS的语法与CSS是如何工作的。 1. 基本规则 选择器(selector)是开发者希望改变样式的…"}, {"id": "6844903593590390791", "title": "JS(requestAnimationFrame) 和 CSS 实现持续的动画效果", "desc": "逛论坛的时候看到一个问题, js是怎么实现持续的动画效果的? 第一时间想到的是定时器, 后来看到有同学提到了 requestAnimationFrame, 由于之前没有对相关方法有所了解, 于是便去查了下, 顺便也记录了下 animation 的使用."}, {"id": "6844903858540380174", "title": "CSS伪类——动态伪类（link/visited/hover/active/focus）", "desc": "对立面伪类（not。。） 2、对于div是没有focus的行为的，因为一个div没法用鼠标获得焦点，但是可以通过设置div的tabIndex。"}, {"id": "6946494277367103518", "title": "基本CSS技巧，可当作面经", "desc": "原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。 缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。 CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“b…"}, {"id": "6844903783214874638", "title": "[译] 如何学习 CSS", "desc": "摘要：你不需要强行记住每一个 CSS 属性和值，有很多地方可以方便你快速去查阅。但是记住一些基础的知识点会让你使用起来更加得心应手。本文旨在引导你如何学习 CSS。 我遇到很多人叫我给他们推荐 CSS 各个知识点的教程，或者问我应该怎么学习 CSS。我也看到很多人对 CSS 的…"}, {"id": "6974738213394972680", "title": "CSS提高篇（复合选择器）", "desc": "看样例代码： 运行效果： 看样例代码： 运行效果： 看样例代码： 运行效果： 写作不易，看完如果对你有帮助，感谢点赞支持！ 如果你是电脑端，右下角还有 \"一键三连\"，没错点它 [哈哈] 加油！ 共同努"}, {"id": "6946195475280166948", "title": "如何进行移动端适配", "desc": "老版本flexible.js会修改scale值，会产生一些问题。 clientWidth是根元素的可视宽度，如果viewport缩放scale=1.0，那么对于iPhone4的clientWidth=320px，如果scale=0.5，那么clientWidth=640px，无…"}, {"id": "6844903507070287880", "title": "如何不用构建工具开发Vue全家桶项目", "desc": "Vue是目前最流行的前端开发框架之一，与Vue-router和Vuex组成俗称的Vue全家桶，更是开发前端富交互应用的利器。配合webpack等构建工具，开发大型应用也可以得心应手。随着Vue的普及，可能一些老旧项目也希望能“渐进式”的使用Vue，或者有的项目想用Vue来做但不…"}, {"id": "6844903919013855239", "title": "仿去哪儿城市列表搞懂grid布局", "desc": "为什么要将其转到掘金？今天向一个朋友推荐掘金的文章，他问我为什么不在CSDN上进行博客发表，\"那里容易百度搜到、看到的人多......\"，他竟然没听过掘金，之后向他疯狂推荐了一波掘金，然后记起来我也尝试了一次CSDN使用（里面有很多高质量文章不否认，但是自己体验很是不好），50…"}, {"id": "6844903881239969805", "title": "关于css的小细节（黑魔法）", "desc": "html5 丰富了表单元素，提供了类似 required,email,tel 等表单元素属性。同样的，我们可以利用 :valid 和 :invalid 来做针对html5表单属性的校验。 你也这样来做，选择5-10的子元素。 记得刚开始写页面时候，被浏览器各种默认的 UI 样式…"}, {"id": "6844903638205202445", "title": "实力科普：为什么浮层或弹框一定要有叉叉关闭按钮？", "desc": "总结下，4个原因，依次权重我觉得越来越高！ 1. 视觉平衡（只针对弹框）； 2. 符合用户习惯； 3. 交互一致性； 4. 提高无障碍访问（尤其没有确定，取消按钮的特殊弹框）； 尤其没有确定，取消按钮的特殊弹框；或者确定和取消按钮无法focus响应的弹框，如果没有关闭按钮，对"}, {"id": "6844903895873880071", "title": "CSS 辐射渐变背景 radial-gradient", "desc": "1. 中心点 2. 边缘 就是椭圆或者圆的边缘。为什么要用边缘，而不用宽高呢，因为后面的几个关键概念，用的都是这个边缘。 3. 渐变颜色 跟线性渐变一样，一组颜色设定表示渐变过程。没什么好讲的，后面将统一用[red, #fff 99%, blue]这个渐变组合，表示从红色变换到…"}, {"id": "6844904073527820295", "title": "[译] 如何实现一个对角线布局", "desc": "本文讲述如何使用 CSS 转换（对应 transform 属性）实现对角线布局效果。 首先想到的是旋转（rorate）整个容器元素。但带来的问题是，100% 宽的 .diagonal-box 经旋转之后，不再能横向覆盖整个视口区域了。为此，我们需要增加宽度到 100% 之上来解…"}, {"id": "6844903903209717773", "title": "CSS 经典布局方式以及水平垂直居中技巧", "desc": "CSS，层叠样式表(英语：Cascading Style Sheets)，是一种用来为结构化文档 (如：HTML文档) 添加样式 (字体、颜色、间距等) 的计算机语言，由 W3C 定义和维护。当前最新的版本是 CSS2.1，为W3C的推荐标准。CSS3(2011年) 已经被现代…"}, {"id": "6971059519656820766", "title": "《CSS知识总结》", "desc": "CSS布局 float布局 使用float布局，不需要做响应式，因为手机上没有IE，float布局是专为IE的。 (*IE 6/7有margin变双倍的bug 解决办法：第一种：将错就错，针对IE 6"}, {"id": "6844904100727881742", "title": "面试官：说说对css效率的理解", "desc": "但是，这只不过是为了方便使用者书写，真正的解析顺序是反过来的，也就是从子节点搜索到根节点，原因很简单，因为查找次数将大大影响效率。一个个来说 如果到最后一个子节点仍然找不到的话，就是回到之前的父节点，继续查找其他的子节点，其实看起来也没毛病哈，那我们来个对比，看下css为什么选…"}, {"id": "6844903943311474696", "title": "文字处理之换行及word break和word wrap属性详解", "desc": "上一篇博客中介绍white-space属性时聊到了换行，这一篇介绍换行的细节。 浏览器的换行行为，对于中文和英文存在一些差别。 正如上一篇博客中所说的，中文换行比较简单，这一行放不下就换行。除了中文之外，韩文和日文的处理也是一样的。这三种文字合在一起就是MDN介绍word-br…"}, {"id": "6844903648560939015", "title": "CSS 字体新玩法之 Color Font", "desc": "如果你们设计师想在某些特别的专题活动中使用下图的字体作为标题字体进行展现，怎么办呢？做成图片咯。然后你可能会遇到这几个问题：不同屏幕下的适配，要是只做一种尺寸的图，放大或缩小后的效果都不太好。直接做成 SVG？好像不能复制到 Word 里面加粗啊，也就是说，这种做法使得这些“文…"}, {"id": "6844903549772513293", "title": "\"display:contents\"快要来了", "desc": "Yes,display:contentsisenabledbydefaultinBlinkandWebKitanditwillbeprobablyshippedinChrome65andSafari1"}, {"id": "6945067588292444197", "title": "CSS常用伪元素详解", "desc": "1. 伪元素概念 CSS 在渲染文档的时候，伪元素可以通过 css 给 HTML 添加一个元素（叫标签也行），这个元素在文档树中是找不到的。伪元素被当做 CSS 的样式来进行展现，用法和普通的元素用法是一样的。 2. 伪元素特点 不占用 DOM 节点，减少 DOM 节点数。 让…"}, {"id": "6844904138011049997", "title": "关于css3新增属性的考古文章,这种面试题是真的挺学究的", "desc": "又是第一反应, 这个回答是, 我不确定. background-repeat 属性的 space 和 round 值，还有支持两个值的语法。 background-attachment local 值。 CSS background-origin，background-size…"}, {"id": "6922258495496519694", "title": "CSS 盒模型详解 + 定位规则", "desc": "浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model）对html文档进行渲染，将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。 所有HTML元素可以看作盒子，在CSS中…"}, {"id": "6950100960622411807", "title": "2021前端知识点之HTML5、CSS篇", "desc": "目录两栏布局，右侧自适应，三栏布局，中间自适应HTML51.两栏布局，右侧自适应，三栏布局，中间自适应2.HTML530.实现元素的垂直水平居中31.隐藏页面元素的方式em/px/rem/vh/vw的"}, {"id": "6844903517505716232", "title": "常见的布局类问题及面经", "desc": "浮动。（注意：为了不影响其他元素，别忘了在父级上清除浮动） vw： viewport width。1vw = viewport 宽度的 1%, 100vw = viewport width, 同样的还有 vh： viewport height。1vw = viewport 高度…"}, {"id": "6844904112476127239", "title": "css 伪类和伪元素剖析", "desc": "伪类根据元素的名称、属性或内容以外的特征对元素进行分类，原则上，这些特征不能从文档树中推导出来。伪类可以是动态的，因为当用户与文档交互时，元素可能获得或丢失伪类。 css3规范中要求使用双冒号(::)表示伪元素，以此来区分于伪类，比如::before和::after等伪元素使用…"}, {"id": "6844903598464172039", "title": "web页面兼容性问题记录", "desc": "前几天，参与公司项目的后台管理员页面的二次开发，在项目中遇到了些兼容性问题，做个总结，记录下此文档方便以后查看，也欢迎大家提供更棒的解决方法哦。【ps:在项目中问题一个一个的暴露，有点小慌张】 我把line-height:34px修改成：line-height:30px;在火狐…"}, {"id": "6844904199407271943", "title": "常见空格一览", "desc": "查了一下，这是一个发宽空格，Unicode编码为U+200A。故借此把常见的普通和特殊空格整理一翻。 这是最常用的空格，拉丁文的空格，ASCII编码0x20。在英文输入法（和中文输入法半角状态）下，由键盘空格键直接输出。这个空格的宽度会受到所使用的字体的影响： 例如在上图所示的…"}, {"id": "6844903733302657032", "title": "Flexbox and Truncated Text | CSS-Tricks", "desc": "Situation: you have a single line of text in a flex child element. You don't want that text to wrap, you want it truncated with ellipsis (o…"}, {"id": "6976521785801965598", "title": "CSS之文本渲染", "desc": "浏览器是如何进行文本渲染，从字距调整到栅格化。不同浏览器之间字母排列方式略有不同的原因是，浏览器实现了不同的字距调整算法。"}, {"id": "6844903958448734221", "title": "CSS梳理之水平和垂直居中", "desc": "上面是统一的html和css设置。 1. absolute + margin margin： auto会根据元素的宽高自动计算其margin值，但是如果不加position，auto在计算时margin-top和margin-bottom的值是0，也就是等于margin：0 a…"}, {"id": "6844903779343695879", "title": "[英] 如何使用 CSS 里的 @supports 讲解", "desc": "CSS has a neat feature that allows us to test if the browser supports a particular property or property:value combination before applying a…"}, {"id": "6844903602482348045", "title": "理解CSS3 transform中的Matrix(矩阵)", "desc": "这是一篇转自的张鑫旭前辈的文章，详细介绍了transform中矩阵的使用方法，建议从第二节开始看“何为矩阵？”。"}, {"id": "6844903509159051278", "title": "uiw 1.2.14 发布，基于 React 16 的组件库", "desc": "发布， 高品质的UI工具包，React 16+的组件库。 🐞 Paging组调整样式解决默认样式导致排版问题. - 901e511 📝 docs:更新文档样式. - f773502 🐞 fix: 初始化所有组件初始字体大小. - daeda01 🐞 Checkbox组件…"}, {"id": "6844903517463789581", "title": "重构构建的平凡之路", "desc": "刚开始做前端的时候，一直以为切好页面是重构的全部职责，在切好页面的前提，增加页面交互，这样已经能到重构的顶峰。直到进入公司后发现参与的项目都有两个特点，项目复杂和参与人数的多，发现传统的方法已经不适用。主要介绍自己重构构建经历，如有问题欢迎指教！ 乀(ˉεˉ乀) 这里介绍自己以…"}, {"id": "6844903635109806093", "title": "【译】Airbnb CSS-in-JavaScript 风格指南", "desc": "Translated by FrankZhang. Use inline styles for styles that have a high cardinality (e.g. uses the value of a prop) and not for styles that…"}, {"id": "6844903728223354887", "title": "[英] CSS Shapes 介绍", "desc": "CSS Shapes allow us to make interesting and unique layouts by defining geometric shapes, images, and gradients that text content can flow a…"}, {"id": "6844903870108270605", "title": "CSS进阶（8）—— 内联元素的掌管者line-height和vertical-align（下）", "desc": "抛开inherit这类全局属性不谈，个人把vertical-align分成五类，作者将第一类和第二类总结成线类。 通常情况下，内联元素默认都是沿着字母x的下边缘对齐的，也就是vertical-align的默认值是baseline。但对于图片等替换元素，往往使用元素本身的下边缘作…"}, {"id": "6946167654570950664", "title": "《CSS 知识总结》", "desc": "\"文档流\"或\"流式布局\"是在对布局进行任何更改之前，在页面上显示\"块\"和\"内联\"元素的方式。 这个\"流\"本质上是一系列的事物，它们都在你的布局中一起工作，并且互相了解。 一旦某部分脱离了\"流\"，它就会独立地工作。 在文档流中，内联元素按内联方向显示，即词语在依据文件写作模式的句…"}, {"id": "6844903564926517261", "title": "The CSS3 Test", "desc": "逐个检测浏览器对CSS3属性的支持情况"}, {"id": "6844903907563438094", "title": "CSS权威指南（第四版）笔记（第一章：css和文档）", "desc": "层叠样式表 (Cascading Style Sheets，缩写为 CSS），是一种 样式表 语言，用来描述 HTML或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问…"}, {"id": "6916343765380628494", "title": "70个老司机技巧教你更好的进行CSS编程", "desc": "CSS 并不总是容易处理。 在你的能力和经验不够的时候，CSS编程会成为一个噩梦，特别是你不确定为页面元素中选择哪种选择器的时候。使用一个不常见的CSS属性以实现更好的语义化，没有比这个方法更好用的更简单的的实现减少代码复杂度的了。 我们研究了一些很有用的CSS窍门，提示，意见…"}, {"id": "6844903878987776008", "title": "【译】如何利用CSS网格布局和CSS自定义变量快速构建app原型", "desc": "CSS 网格布局和 CSS 自定义变量为前端开发人员带来了很大的好处。前者使我们创建网站布局非常简单，而后者则是我们可以在 CSS 样式表使用变量。 在本教程中，我将向你展示如何将它们结合使用以快速构建应用程序设计原型。 如果你不想阅读文章，想看录屏视频，看看我这门课的第15和…"}, {"id": "6844903576528125966", "title": "一些运用webpack的方法或者说策略", "desc": "运行npm install --save-dev extract-text-webpack-plugin安装抽取CSS文件的插件。 运行cnpm i optimize-css-assets-webpack-plugin --save-dev安装插件到开发依赖。 服务员，打包一个…"}, {"id": "6945335727446032398", "title": "今天教你CSS Flex布局", "desc": "之前做项目，关于布局方面没怎么深入研究过，好多页面都是能用定位就用定位，能用百分比就用百分比，导致很多地方，看似对齐了，但是就很别扭，这几天又被一个布局折磨了很久。于是痛定思痛，总结一下自己思想上的问题。 自己之前没把 CSS 的相关问题当回事，心里总是理所应当的认为，样式什么…"}, {"id": "6844903508987084813", "title": "CSS简史（译）", "desc": "一直觉得自己没学好css(事实上也许也是如此),经常听说js的历史，但是好像对css的历史却一无所知。虽然历史这类内容对实际的开发也许没有实际的帮助（不像学习了Flexbox,Grids就能马上用到布局中），但是总觉得这也是一个前端工程师应有的软知识。所以看到本文的英文原文的时…"}, {"id": "6844904151378313230", "title": "从倒影说起，谈谈 CSS 继承 inherit", "desc": "方法很多，但是我们当然要寻找最快最便捷的方法，至少得是无论图片怎么变化，div 大小怎么变化，我们都不用去改我们的代码。 这是一个十分新的 CSS 属性，使用起来十分简单，可以从各个方向反射我们内容。不过兼容性过于惨淡： box-reflect 有四个方向可以选，below |…"}, {"id": "6844903638733684743", "title": "实现一个jQuery的API", "desc": "jQuery的核心思想就是先选择后处理，jQuery构造函数的参数，主要是CSS选择器。选择一个参数，比如，需求1 是让 的class='red', 其中'div'就是要传入的参数。 使用document.querySelectorAll, 因为它遵循的是css选择器的规则，可…"}, {"id": "6844903941637931016", "title": "浏览器渲染及动画", "desc": "浏览器在渲染页面之前会先构建DOM树和CSSDOM树。 HTML会转换成文档对象模型DOM，CSS会转换成CSS对象模型CSSDOM。它们两个是互相独立的数据结构。 DOM和CSSDOM组合在一起形成渲染树。"}, {"id": "6844903544147951624", "title": "响应式图片srcset全新释义sizes属性w描述符", "desc": "旧文，但是作者刚更新了一下。"}, {"id": "6844903568504258574", "title": "[英] Third party CSS is not safe", "desc": "Jake Archibald 探讨第三方 CSS 文件发起攻击的途径，思路清奇，推荐一读"}, {"id": "6998156236784926734", "title": "用CSS画三角形", "desc": "在项目中，经常见到的下拉框或者对话框上的小凸起，通常是通过CSS模拟出来的，接下来就看下到底是如何通过CSS将三角形画出来的吧~"}, {"id": "6951043990183477278", "title": "css - BFC", "desc": "前置回顾先回顾前面的文章：总结，visual formatting model决定浏览器如何显示如何处理文档树。盒子类型和定位方案决定元素盒子如何在文档树中显示和放置。正常文档流 Normal flo"}, {"id": "6844904205346406414", "title": "DD每周前端七题详解-第六期", "desc": "你盼世界，我盼望你无bug。Hello 大家好！我是霖呆呆！ 呆呆每周都会分享七道前端题给大家，系列名称就是「DD每周七题」。 系列的形式主要是：3道JavaScript + 2道HTML + 2道CSS，帮助我们大家一起巩固前端基础。 所有题目也都会整合至 LinDaiDai…"}, {"id": "6991064008719597598", "title": "CSS优先级与继承", "desc": "CSS优先级与继承 CSS选择器类型（样式类型和选择器类型）， 权重计算规则， 优先级注意点， 权重叠加 可继承与不可继承属性"}, {"id": "6981620662649667615", "title": "不同样式tooltip对话框小三角的css实现", "desc": "贴图、border、矩形旋转、clip-path 四种方法实现小三角。日常开发中，border 方案基本满足需要了，偷懒的话也可以直接找设计要图。大家还用过其他方法吗？"}, {"id": "6844903661575880717", "title": "简单聊聊 GZIP 的压缩原理与日常应用", "desc": "在基于 HTTP 协议的网络传输中 GZip 经常被使用，Nginx 中也可以使用半行代码开启 GZip。GZip 压缩的原理是什么呢？本篇文章是我在网上阅读了一些文档后做的简单总结。 RFC 1952 是 GZIP file format specification vers…"}, {"id": "6892974106908557320", "title": "CSS 文本截断方法总结和原理分析", "desc": "虽然文本截断并不是什么很复杂的东西，但浏览器却没有较完善的原生支持。于是诞生了下面各种妖魔鬼怪的解决方案。每个方案都有各自的优缺点和适用场景，请根据自己的需要选择合适的方案。 white-space: nowrap; white-space 用于指定空白符（white spac…"}, {"id": "6844903613458825224", "title": "五月前端知识集锦（每月不可错过的文章集锦）", "desc": "PS：星号表示需要翻墙。"}, {"id": "6992167289323782152", "title": "来详细认识下flex子元素身上的属性", "desc": "flex: 项目（子元素） * flex-grow 意思就是比如三个子元素，每个设置为1，那么三个子元素均分，有一个设置的为2，那么它瓜分剩余空间的权重...."}, {"id": "6934567109632458766", "title": "transform 属性 实现旋转木马效果", "desc": "我们对方块设置了按Y轴进行旋转，看见的只是方块变小，没有按Y轴旋转。是因为现在还是处于2D视角，没有透视效果。 perspective 属性 指定了观察者与 z = 0 平面的距离，使具有三维位置变换的元素产生透视效果。 perspective 属性只影响 3D 转换元素。 透…"}, {"id": "6998043554366881805", "title": "tailwind使用指南——老项目迁移", "desc": "tailwind的特点在于灵活,改造老项目也很方便。老项目主要有以下几种场景：inline style，单样式的class，复杂样式的class，css或scss函数需要使用变量"}, {"id": "6844904193203896333", "title": "周末学习发现了 10 个好用JavaScript图像处理库", "desc": "用 JavaScript 处理图像可能非常困难且繁琐。 幸运的是，有许多库可以让这些变得简单得多。 下面介绍一些图像处理的库。 1. Pica pica 可在浏览器上实现高质量而且高性能的图片大小调整JS库，目标是在浏览器中以最快的速度进行高品质图像缩放。它会从web-work…"}, {"id": "6991446090214014983", "title": "使用伪元素添加不定长的下划线 | 8月更文挑战", "desc": "一种很常见的设计图样式如下图：要求一排“链接”或文字，当某一项处于选中状态或鼠标移动到其上方时，显示为红色，并且底部显示一定长度的下划线。 值得注意的是，这个下划线与TAB文字的长度并不相关。 在不了"}, {"id": "6965795957346664485", "title": "纯css实现各种优惠券(IE10+)", "desc": "纯css实现优惠券样式，支持任意比例大小,IE10+兼容。不过写法过于麻烦，如果复杂样式请自行使用图片和mask方案"}, {"id": "6972551777795178509", "title": "纯css实现炫酷的视频文本蒙版效果", "desc": "今天UI妹子给提了看似复杂的效果，谁能想到我只用了一个属性就能搞定呢？几分钟搞定它，来跟我一起基于这个属性来做一个炫酷的纯css视频文本蒙版效果吧~"}, {"id": "6993560288633028644", "title": "【动画消消乐】HTML+CSS 自定义加载动画 055", "desc": "这是我参与8月更文挑战的第7天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 相对定位 步骤2 利用sp"}, {"id": "6844904154830241800", "title": "《明日方舟》干员列表实现", "desc": "这是《明日方舟》的干员列表页面。 仔细观察一下，会发现元素排版从上倒下，如果空间不够，会挤到第二列。 而正常的元素排版是从左到右，如果空间不够，会挤到第二行。 再来个图演示一下效果。 虽然在平时开发中很少会遇到，但是还是有的，比如 bilibili 的菜单。 限制父元素高度。 …"}, {"id": "6844903764558610445", "title": "纯css模拟下雪效果", "desc": "效果如其名，想必都见过下雪（可能南方人除外哈哈），但下雪效果只是一类效果的名称，可以是红包雨等一些自由落体的运动效果，本文就是用纯css模拟下雪的效果。 由于公司产品的活动，需要模拟类似下雪的效果。浏览器实现动画无非css3和canvas（还有gif），对比下css3和canv…"}, {"id": "6913857621850062856", "title": "margin: auto 的魔法世界", "desc": "margin: auto 解决了 让一个 正常布局流(normal flow) 中 固定宽度 的 块 元素 水平 居中 的问题，其原理就是：在 writing-mode: horizontal-tb 和 direction: ltr 的前提下，当我们给一个块元素设置 margi…"}, {"id": "6913704404654751751", "title": "【你不一定知道的CSS】font-family 继承失效了？", "desc": "CSS 属性 font-family 允许您通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素设置字体。 奇怪的事情来了，浏览器竟然识别不出来这是一个无效的值，计算值的结果还是 test（这里猜测因为 font-family 可以通过 @font-face …"}, {"id": "6996135721060794405", "title": "BFC 学习进行时", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 父元素高度塌陷实例 正常情况，我会想让子元素撑起父元素，如图所示 但天有不测风云，某个开发同学需要把子元素的位置从左侧移动到右侧去，加了一"}, {"id": "7001300594698747912", "title": "浅谈 CSS3 新特性：多媒体查询", "desc": "使用 @media，可以指定一个媒体查询和一个 CSS 块，当且仅当该媒体查询与正在使用其内容的设备匹配时，该 CSS 块才能应用于该文档。"}, {"id": "6982104638744952845", "title": "🍊Flex布局——前端人不得不知的布局方式！", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 写在前面 1. 相遇——Flex布局是什么？ 任何一个容器都可以指定为Flex布局。 行内元素也可以使用Flex布"}, {"id": "6844903666361565191", "title": "深入理解贝塞尔曲线", "desc": "贝塞尔曲线于 1962 年，由法国工程师皮埃尔·贝济埃（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。 贝塞尔曲线主要用于二维图形应用程序中的数学曲线，曲线由起始点，终止点（也称锚点）和控制点组成，通过调整控制点，通过一定方式绘制的贝塞尔曲线形…"}, {"id": "6844903944259371016", "title": "关于带有\"显示更多\"按钮的多行文本截断思考😲", "desc": "刚好最近遇到这个小需求，记得很早之前都是用JS处理，毕竟那时候年少无知。切换类的操作可以用Checked伪类实现，成本会比较低一点，那么先来列一下功能要点： 疑问点：text-overflow: ellipsis不支持多行截断。按钮文字切换，CSS该如何切换文本? 按钮的出现条…"}, {"id": "6995973631238995998", "title": "配置stylelint自动书写css顺序", "desc": "为什么要用stylelint？ css的书写顺序很重要，会影响的渲染。正确的书写可以减少浏览器的回流，提升浏览器的dom渲染。"}, {"id": "6998875479008608269", "title": "DOM元素的scrollXXX与offsetXXX", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 问题起源 最近在做一个类似聊天界面的Web页面，如下图所示： 聊天窗口的特点是： 最新的消息总是在最下面： 这个特点很容易实现，只要我们将"}, {"id": "6844903657318645767", "title": "前端性能优化之雅虎35条军规", "desc": "本文主要考虑客户端性能、服务器端和网络性能，内容框架来自Yahoo Developer Network，包含 7 个类别共 35 条前端性能优化最佳实践，在此基础上补充了一些相关或者更符合主流技术的内容。 前端性能的一个重要指标是页面加载时间，不仅事关用户体验，也是搜索引擎排名…"}, {"id": "6979046436432740389", "title": "绝美的炫彩流光按钮效果", "desc": "今天来实现一个超级炫酷绝美的炫彩流光按钮，实现的方法也很简单，但是效果真的很好看，一起来学习一下吧！"}, {"id": "6986531351184801829", "title": "对角线分割的圆锥渐变式可变长宽比卡片", "desc": "我最近遇到了一个有趣的问题 —— 我需要实现一个具有可变纵横比（由用户决定）的卡片，且纵横比值定义在了 --ratio 这个自定义属性中。具有特定纵横比的卡片是 CSS 中的一个经典问题，也是近年来变"}, {"id": "6997012594401738783", "title": "重学前端 | CSS基础上部", "desc": "这节课程先从CSS的诞生背景和基础定义入手，初步认识CSS；然后介绍如何能够正确地学习CSS，最后推荐一些可以用于持续学习的参考资料。"}, {"id": "6999821541240225828", "title": "浅谈 CSS3 新特性：多列布局", "desc": "在以下情况使用多列布局： 你想要你的文本看起来想报纸那种排版布局。 您有一组要分成列的小项目。 你不需要单独为指定的列写样式。"}, {"id": "6844903672162304013", "title": "CSS — BEM 命名规范", "desc": "Bem 是块（block）、元素（element）、修饰符（modifier）的简写，由 Yandex 团队提出的一种前端 CSS 命名方法论。 BEM 是一个简单又非常有用的命名约定。让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。 bl…"}, {"id": "6844904119853924365", "title": "26 个 CSS 面试的高频考点助力金三银四", "desc": "CSS是**层叠样式表（ Cascading Style Sheets ）**的缩写，是一种样式表语言，用于描述以 HTML 之类的标记语言编写的文档的布局。 它是用于设计Web页面的三剑客之一，另外两位浩客是HTML和Javascript。 CSS 的设计目的是使样式和内容分…"}, {"id": "6908954433963425799", "title": "【Apple官网特效】iPhone 12 网页文字渐入效果", "desc": "大家好，我是 Steven。 苹果网站向来是前端学习的好途径，最新发布的 iPhone 12 的产品介绍网页上就有一个文字渐入效果，这次我们会介绍这个效果是如何实现的。 打开 CodePen 编辑器，先在 HTML 的部份加入一个标题。 然后就可以专注在 CSS 的部份，加入 …"}, {"id": "6844903497599549453", "title": "原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的", "desc": "hello~各位亲爱的看官老爷们大家好。估计大家都听过，尽量将CSS放头部，JS放底部，这样可以提高页面的性能。然而，为什么呢？大家有考虑过么？很长一段时间，我都是知其然而不知其所以然，强行背下来应付考核当然可以，但实际应用中必然一塌糊涂。因此洗（wang）心（yang）革（b…"}, {"id": "6999935097642156040", "title": "css伪元素", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战” 什么是伪元素？ CSS 伪元素用于设置元素指定部分的样式。 例如，它可用于： 设置元素的首字母、首行的样式 在元素的内容之前或之后插入内"}, {"id": "6946425207783424008", "title": "一行代码值200万？充满哲学与禅意的border-radius", "desc": "小米春季发布会，意外的让小米的logo和前端产生了碰撞，并成为大家讨论的热门话题。 “小米新LOGO的设计理念为“Alive”，即生命感设计... Alive理念是小米对智能互联时代转折点的思考与回应，它将东方哲学的思考融入了品牌视觉当中，从更高的维度重新思考科技与人的关系——…"}, {"id": "6988472482411839524", "title": "animate.css  自定义动画", "desc": "> 在使用animate.css 的时候 动画的高度超过了预期的高度 ![在这里插入图片描述](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85"}, {"id": "6997604352332398623", "title": "CSS 响应式布局总结", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 媒体查询(media query) 媒体查询就是对设备按照某些条件进行查询，使符合查询条件的设备显示对应的样式，从而达到不同设备显示不同样式"}, {"id": "6844903586971779080", "title": "快应用入门，看这篇就够了", "desc": "简单地说快应用是国内的十大主流手机厂商比如小米、华为、ov 等联合推出的一种新型应用。无需安装，秒开，体验媲美原生。还提供了像原生应用一样的入口：应用商店，搜索页等。 接下来会教大家如何搭建、启动、预览和调试快应用项目。和官方文档类似，这里我增加了一些我在这过程中遇到的坑及解决…"}, {"id": "6974718232284364836", "title": "通过js动态改变伪元素before或after的content值", "desc": "核心：使用 data-* 给html设置数据属性，接着在css中通过attr()获取html的属性值，再通过js修改属性值来改变content 1、dom部分 使用 data-* 在html元素上嵌入"}, {"id": "6989046090641178655", "title": "z-index 不生效的原因", "desc": "什么是 z-index？ 描述：用来设置元素的堆叠层级，拥有更高层级的元素显示在最前面。 注意: z-index 仅能在定位元素上有效 所以，如果 z-index 失效，极大可能是没有定位。 posi"}, {"id": "6915287680494338055", "title": "React -css in js框架-styled-components", "desc": "前端飞一般的发展中，衍生出各式各样的框架，框架的目的是减轻开发人员的开发难度，提高效率。以前网页开发的原则是关注点分离，意思是各种技术只负责自己的领域，不要混合在一起，形成耦合。如html、css、js代码分离。 React的出现，这个原则不在实用，React是组件结构，强制把…"}, {"id": "6844904112274817031", "title": "移动端适配-实践篇", "desc": "一般我们在做前端项目之前，都会先拿到视觉稿和交互稿，我们可以根据视觉稿上的尺寸、颜色等信息编写 CSS 样式，可以根据交互稿来写 JS。 每个公司的视觉规范不同，视觉稿也就不同。甚至在一些大公司里，每个部门都有自己的视觉规范。比如页面画布大小是以 640 为基准还是 750。最…"}, {"id": "6844903650901540872", "title": "CSS深入理解：overflow:hidden——溢出,坍塌,清除浮动", "desc": "overflow：hidden是overflow属性的一个神奇用法，它可以帮助我们隐藏溢出的元素，清除浮动和解除坍塌。当某一个属性拥有这么多的功能时，难免使人难以把握，不过不要怕，只要信：看完这篇文章，我相信你绝对能对overflow:hidden的用法熟练掌握。 当父 div…"}, {"id": "6844903585809956871", "title": "CSS3 transform 属性详解", "desc": "其中 x1、y1 为经过 Matrix 转换后的向量。由公式可知，Matrix 中 e, f 主要用于设置元素在 X轴和 Y轴上的平移。a, d 主要用于设置元素在 X轴和 Y轴上的缩放。a,b,c,d 用于设置元素在 XY 平面上的旋转。rotate/translate/sc…"}, {"id": "6972720660745289765", "title": "CSS特效3 - 爱心加载,背景渐变", "desc": "效果展示: 效果展示: 效果展示:使用css制作的一系列的动画效果,具有代表性,可以借鉴查阅,暂存在这里"}, {"id": "6844903519871467528", "title": "基于 Electron 的前端文件处理工具", "desc": "项目地址Github，欢迎Star~╰(´︶`)╯♡splice功能实现前端常用的文件处理功能：HTML：压缩html通过html中的注释来合并css/jsCSS：添加兼容性前缀压缩css图片转bas"}, {"id": "6844903582924275719", "title": "自动化生成 H5 骨架页面", "desc": "骨架页面（Skeleton Page）指的是当你打开一个 H5 页面，在页面解析和数据加载之前，首先给用户展示页面的大概样式。在骨架页面中，图片、文字、图标都将通过灰色矩形块来展示，在真实页面展示之前，用户能够感知到即将加载页面的基本 CSS 样式和页面布局。饿了么移动 web…"}, {"id": "6984782883722362917", "title": "【CSS】实现盒子居中对齐的七种方法", "desc": "0. 初始化两个盒子 方法1 定位 子绝父相 子绝父相 方法1.1 margin 纯计算（不推荐） 父盒子宽度的一半减去子盒子宽度的一半 500/2 - 200/2 = 150 父盒子高度的一半减去子"}, {"id": "6844903721097232392", "title": "【译文】CSS 与网络性能", "desc": "承蒙抬爱，我被称为 CSS 魔术师已经十多年了，但最近在博客上，CSS 相关的文章却不多。那就结合 CSS 与性能这两大主题，为大家带来一篇文章吧。 CSS 是页面渲染的关键因素之一，（当页面存在外链 CSS 时，）浏览器会等待全部的 CSS 下载及解析完成后再渲染页面。关键路…"}, {"id": "6844903567275327496", "title": "reflow和repaint引发的性能问题", "desc": "reflow 回流，或者叫重排都可以。回流(reflow)这个名词指的是浏览器为了重新渲染部分或全部的文档而重新计算文档中元素的位置和几何结构的过程。 简单来说就是当页面布局或者几何属性改变时就需要reflow。 repaint重绘，当页面中的元素只需要更新样式风格不影响布局，…"}, {"id": "6844903774494933000", "title": "如何使用css绘制钻石", "desc": "听说你想要钻石💎？买不起，还是用css来画一个吧，但你敢送给自己女朋友，不保证不被打。 先看下效果吧，想一想怎么构图先。 上图是已经完成的效果。钻石整体都是由三角形构成，上五下三。上边是五个等边三角形，其中有2个是倒扣过来填补三个之间的空缺。下边是一个等腰三角形和2个对称的钝…"}, {"id": "6844903544177295373", "title": "面向自己的2018前端开发指南（一）", "desc": "一份面向自己的2018前端开发指南"}, {"id": "6844903777208631310", "title": "[译] 设计一个页面原则上应该指的是编写 HTML 和 CSS", "desc": "在 90 年代后期的互联网泡沫期间，我做了一堆 Photoshop 切图工作。如你所知，设计师将 PSD 文件切片后交给切图仔拼接到 HTML 上，这很悲惨。 这些 mock 式的设计总是专注于像素的完美契合，但这却逐渐歪曲和偏离了 web 的本质。间隔像素，还记得吗？我们制作…"}, {"id": "6974409145449627656", "title": "CSS | 实用的css网页背景图全屏自适应", "desc": "这是我参与更文挑战的第8天，活动详情查看 更文挑战 页面设计的时候，设计师经常会给页面加上漂亮的背景图。代码实现的时候，我们既希望能够实现屏幕自适应，又希望不会变形，而且背景图还需要不随滚动条的滚动而"}, {"id": "6844904050756943879", "title": "2019 年知识总结-css 篇", "desc": "当用户手动导航或者 CSSOM scrolling API 触发滚动操作时，css 属性 scroll-behavior 为一个滚动框指定滚动行为，其他任何的滚动，例如那些由于用户行为而产生的滚动，不受这个属性的影响。在根元素中指定这个属性时，它反而适用于视窗。 表示一个元素获…"}, {"id": "6854573211741667342", "title": "每天一个小技巧：CSS clip-path 的妙用", "desc": "CSS 的 clip-path 属性是 clip 属性的升级版，它们的作用都是对元素进行 “剪裁”，不同的是 clip 只能作用于 position 为 absolute 和 fixed 的元素且剪裁区域只能是正方形，而 clip-path 更加强大，可以以任意形状去裁剪元素，…"}, {"id": "6923180396305711118", "title": "CSS clamp 函数 101", "desc": "响应式布局（Responsive Design）是大约十年前提出的一个概念，意在以一套代码适配不同终端设备——而不是为每个终端做一个特定的版本；它的目的是解决移动互联网时代不同设备分辨率繁多，而多版本 CSS 代码生产成本过高的难题。传统意义上，我们实现响应式布局，有如下两种方…"}, {"id": "6964620679316504613", "title": "css background-image 的应用", "desc": "css background-image 实现多背景叠加，三角形背景，背景图叠加渐变，背景颜色切换动画等效果"}, {"id": "6993176555044225031", "title": "height=100%不起作用", "desc": "某些情况下，div设置为width=100%会使该div宽度立刻扩展到窗口的整个横向宽度，但是设置height=100%却无法使该div撑满整个浏览器窗口的高度。"}, {"id": "6997064806213615623", "title": "【❤——七夕限定】", "desc": "前言 ❤的实现 最后为了效果看起来更好，我们可以为元素设置阴影及缩放的动画，使其看起来像是在扑通扑通的跳 代码如下 最终效果如下： https://grace-wx.github.io/Love-Yo"}, {"id": "6990639663576776717", "title": "css 修改 input[type=\"radio\"]中 选中后的圆点颜色", "desc": "1.css 修改 input[type=\"radio\"]中 选中后的圆点颜色 2.“+”是选择相邻兄弟，叫做“相邻兄弟选择器”"}, {"id": "6963511350114910239", "title": "CSS3 学习笔记", "desc": "一、CSS3新特性 选择器 盒模型 背景和边框：border-radius、box-shadow、border-image 文字特效：text-shadow、text-overflow、word-wr"}, {"id": "6992917266622857223", "title": "CSS定位布局-Static, Relative, Absolute, Fixed, Sticky & z-index", "desc": "属性值 描述 static 默认值。没有定位，元素出现在正常的文件流中。 relative 相对定位，脱离文件流，相对于元素原位置进行偏移，其他元素不会占空。 absolute 绝对定位，脱离文件流，"}, {"id": "6992917496923684878", "title": "快来结合实际案例学习flex吧", "desc": "需求分析 今天突然来了一个关于样式修改的需求，想着正好缺一题作为flex布局的收尾，首先我先介绍下需求 需求：布局调整，做的好看点 ...."}, {"id": "6847902216679292936", "title": "解决CSS样式冲突的几个办法", "desc": "1. 细化选择符 通过使用组合器（Combinator）将选择器的描述写得更加精确（参考CSS选择器 - MDN），例如对于下述代码片段，如果想给.cellphones中的.apple增加样式，只使用.apple，势必会对.fruit中的.apple也造成影响。 可以使用后代组…"}, {"id": "6992757306345652237", "title": "一篇文章带你了解CSS单位相关知识", "desc": "大家好，我是皮皮，今天给大家分享一些前端的知识。 一、了解 CSS 单位 测量长度的单位可以是绝对的，例如像素，点等，也可以是相对的，例如百分比（%）和 em 单位。 指定 CSS 单位对于非零值是必"}, {"id": "6919397632615923726", "title": "三种 Loading 制作方案", "desc": "Loading几乎是每个应用都会用到的一个组件。很多组件库都会提供相应的Loading组件，但是有的时候我们可能需要自定义Loading效果，掌握Loading组件制作的基础知识将变得非常必要。Loa"}, {"id": "6993202662367821838", "title": "css样式篇：常见选择器及权重", "desc": "在开始之前 在写前端样式的时候，CSS选择器是非常重要的。阮一峰老师的文章很全面的介绍了各种选择器，为了方便自己使用，本文章摘抄了部分在开发过程中最为常见的部分，又通过阅读其他文章补充了选择器的权重。"}, {"id": "6976206466227109896", "title": "如何用 CSS 实现酷炫的按钮霓虹灯效果", "desc": "如何用 CSS 实现酷炫的按钮霓虹灯效果 可以看到，在鼠标移入按钮的时候，会产生类似霓虹灯光的效果；在鼠标移出按钮的时候，会有一束光沿着固定的轨迹（按钮外围）运动。 霓虹灯光的实现 霓虹灯光的实现比较"}, {"id": "6844904025943441416", "title": "三行代码把单调的iconfont改成instagram风", "desc": "iconfont的图标，除非使用Symbol类型且下载多色图标，否则只能通过color赋给单色图标，如果引入的icon图标颜色单一，使用者马上就会觉得视觉疲劳。 因此现在许多的应用都用多色的svg来使图标丰富化。现在只要三行代码就能实现媲美多色svg的图标。 我们可以通过给整个…"}, {"id": "6844903585545715719", "title": "2017年前端工作小结，个人踩坑之旅，前端学习者的杂谈", "desc": "写多少项目就得写多少css，我曾一度轻视它，认为实现预期效果便是大胜利，滥用各类选择器，命名杂乱无章，为了解决bug，而写入行内式，然后在工作中顺利的发展成为一名css上的残障人士，偶尔面对曾经写过的css，总是无语凝噎，但这种情况在近期得到了控制。 BEM命名法：在初学前端时…"}, {"id": "6951657823893717022", "title": "CSS系列 -- flex布局", "desc": "flex布局被称为弹性布局，是CSS3中新增内容创建flex盒子flex-direction属性 决定主轴的方向（即项目的排列方向）flex-wrap属性 决定是否换行justify-content "}, {"id": "6992041395414368264", "title": "HTML5新增元素和css介绍", "desc": "HTML5新增元素和css介绍 主要内容 1、HTML5新增元素 2、CSS介绍 3、引入css的方式 4、CSS基础选择器 5、Div+CSS布局 学习目标 节数 知识点 要求 第一节 HTML5新"}, {"id": "6986845399399006245", "title": "css复习(一)", "desc": "CSS： 中文名：层叠样式表 英文名：Cascading Style Sheets 用途：用于设置和布局网页 CSS 语法： css是一门基于规则的语言，我们能定义用于自己网页中特定元素样式的一组规则"}, {"id": "6844904053437120526", "title": "CSS实现多层嵌套结构最外层旋转其它层不旋转效果📦", "desc": "css部分：对样式进行布局，实现旋转动画逻辑。"}, {"id": "6844903604394934279", "title": "滑向未来（现代 JavaScript 与 CSS 滚动实现指南）", "desc": "一些（网站）滚动的效果是如此令人着迷但你却不知该如何实现，本文将为你揭开它们的神秘面纱。我们将基于最新的技术与规范为你介绍最新的 JavaScript 与 CSS 特性，（当你付诸实践时，）将使你的页面滚动更平滑、美观且性能更好。 大多数的网页的内容都无法在一屏内全部展现，因而…"}, {"id": "6876067891393855496", "title": "前端变色方案", "desc": "随着IOS深色模式的普及，众多App支持了白天/深色主题。当然Web页面也可以做到。 懒人做法，可以通过改变&#x3C;html>标签即整个页面的输出亮度实现夜晚变暗的效果，值为0-1，0表示全黑。效果上其实就是加了个黑色带透明度的蒙层。 简单粗暴、效果单一，兼容性尚可。但是有…"}, {"id": "6900733901765869575", "title": "试着在你的css增加粘稠效果？", "desc": "在元素都有blur属性的情况下，上为父级无contrast（下文称1图），下为父级有contrast（下文称2图），当元素融合时，发现了吗1图也有融合的效果在里面！只是很不清晰，这都是blur（模糊）带来的，而contrast属性便能很好的对抗模糊，已达到2图的效果。"}, {"id": "6844903680529924110", "title": "Life of a Pixel：前端代码如何通过浏览器演化为屏幕显示的像素", "desc": "浏览器真正渲染的内容在红框内，之外的都是非渲染的部分。渲染的引擎可以看做是一个黑箱，在 Chromium 中，我们把它称为 Blink。 同时，在渲染时，我们需要调用图像处理的底层 API 去进行渲染，对于此，有官方的统一标准就是 openGL，但是，对于 Windows，可能…"}, {"id": "6992456561188847652", "title": "CSS必知必会备忘录（非常实用）", "desc": "CSS是用来表现HTML元素应该如何在网页上呈现的层叠样式表， 本文章将展示一些常用的CSS技巧技术，帮助您在网页设计与开发能力上得到提升。"}, {"id": "6869710838346252301", "title": "<css-doodle/>让你成为CSS艺术家", "desc": "说到css-doodle，那要追回到第五届CSS大会，那是袁川大佬在css大会首秀，属实惊艳。袁川大佬当时演讲的PPT：https://yuanchuan.dev/talk/generative-ar"}, {"id": "6877448842749575182", "title": "box-shadow的妙用", "desc": "前端开发过程中，`box-shadow`经常被用来作为“加特技”的手段，使一个盒子看起来有立体感。今天我们就来盘点一下`box-shadow`到底有哪些基础用法和独特用法。"}, {"id": "6844904062018650125", "title": "好玩儿的css", "desc": "其实很早就想写一篇关于 css 的文章了。（拖延症，一直没写。。。） css 发展到今天已经越来越强大了。其语法的日新月异，让很多以前完成不了的事情，现在可以非常轻松的做到。 超能陆战队中的大白，相信你一定不陌生吧。影片中的大白又萌又可爱，十分惹人喜欢。 大白主要是由大大小小的…"}, {"id": "6844904053529395207", "title": "[译] 给破碎图片添加样式", "desc": "我们可以在 <img> 元素上使用常规的排版相关样式。 这些样式会被应用到替换文本上（即 alt 属性值），如果图片正常显示了，这些样式也不会影响图片的渲染。 <img> 元素是替换元素。 这就表示“该类元素的外观和尺寸是受到外部资源控制的”（Sitepoint）。因为元素是受…"}, {"id": "6844904105362587661", "title": "🌈从0到1—CSS系列之flex布局（实例）", "desc": "默认所有元素 order 属性值为 0，所以我们可以设置子元素的 order 属性来控制他们的顺序。 自己对弹性布局早已闻其名，但却一直一知半解，此文为自己做个小总结💦💦。"}, {"id": "6918245852469264398", "title": "iOS 开关按钮", "desc": "大家好，我是 Steven。 点击一下会打开，再点击一下会关闭。但原来它还有一个小细节，就是长按的时候里面的圆形会拉长，放手后会变回圆形： 按钮的背景颜色就会改为深灰色。 在这个案例中，我们会学习到如何使用 CSS 建构这个按钮，过程中会运用到 CSS 的变数，以及如何判断系统…"}, {"id": "6992402991231811615", "title": "前端笔记-flex弹性盒｜8月更文挑战", "desc": "使用flexbox布局的文档区域称为flex容器。 是CSS中的又一种布局手段，它主要用来代替浮动来完成页面的布局flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变弹性容器，要使用弹性盒"}, {"id": "6992391619441868813", "title": "那些你经常用但又记不住的css", "desc": "1.设置input 的placeholder的字体样式 具体颜色可以根据需求来设置 Chrome Opera Safari中 Firefox 19+ IE 10+ Firefox 18- 2.设置in"}, {"id": "6844903696560553998", "title": "出来混总是要还的-JS正则常用的有四种操作： 验证、切分、提取、替换", "desc": "1. 验证"}, {"id": "6844903827376701453", "title": "css经典布局系列一——垂直居中布局", "desc": "将父元素的width和height设置的和子元素的大小一样，然后设置父元素parent的padding。此时padding会将子元素挤进父元素的中间位置； 绝对定位盒子模型有个特点：left+right+width+padding+margin=包含块的宽度；所以此时可以将le…"}, {"id": "6992186545994219534", "title": "CSS总结", "desc": "css由Håkon Wium Lie首先提出 体系化学习 学一门语言必须学会什么？ 语法（怎么写代码） 如何调试（怎么知道自己的代码写错了） 在哪查资料（抄代码） 标准制定者是谁 语法一：样式语法 例"}, {"id": "6916473795490349063", "title": "移动端适配方案实践-rem和vw", "desc": "我们常用的响应式布局方案是--利用rem单位，通过计算不同移动端下HTML根字体大小，来实现页面的适配。 首先让我们来了解一下什么是rem？rem是CSS3新增的一个相对单位（root em，根em），这个单位引起了广泛关注。它的相对是相对于HTML根元素来说的，假如我们设置H…"}, {"id": "6844903618030616589", "title": "webpack项目轻松混用css module", "desc": "本文讲述css-loader开启css模块功能之后，如何与引用的npm包中样式文件不产生冲突。 比如antd-mobilenpm包的引入。在不做特殊处理的前提下，样式文件将会被转译成css module。 以上代码片段，摘自webpack配置的module.rule。 可以看出…"}, {"id": "6844904102900563981", "title": "[译] CSS 滚动捕捉技术（Scroll Snapping）介绍", "desc": "CSS 滚动捕捉允许用户完成滚动之后将视口锁定到某个元素的位置。非常适合用来建立下面这样的应用： 实现滚动捕捉主要依靠两个属性：容器元素的 scroll-snap-type 属性，以及子元素的 scroll-snap-align 属性。最基本的使用方式如下： 第一版中定义的属性…"}, {"id": "6844903600624238600", "title": "三角形的 N 种画法与浏览器的开放世界", "desc": "最近，我完全沉迷在了任天堂 Switch 上的《塞尔达传说：荒野之息》里，以至于专栏都快要停更了（罪过罪过）。大概每个塞尔达玩家都会有这个疑问，那就是 这个游戏为什么这么好玩？！ 非常有意思的是，这个问题的答案似乎和「前端为什么这么日新月异」有着微妙的关系，这让我有了一些全新的…"}, {"id": "6954212446026334238", "title": "简述CSS盒模型", "desc": "盒模型 浏览器根据CSS 基础框盒模型（CSS basic box model），将元素表示成矩形的盒子，CSS 决定这些盒子的大小、位置以及属性。 每个盒子由四个区域组成"}, {"id": "6844903848805400590", "title": "前端引用字体@font-face的若干优化方法", "desc": "我们在页面展示时，为了更好的效果，一般使用了自定义的字体 @fant-face 。 之前在开发的时候使用了一些自定义字体，这里总结下自己寻找的的一些处理办法。 本文只列出了引入本地字体，网络的字体由于实践不多，这里介绍就少一些。 一般的中文字体都要8-10M，相对于整个工程来说…"}, {"id": "6844903550280024071", "title": "合格前端系列第九弹-前端面试那些事", "desc": "选一个你觉得印象最深的项目讲一讲，然后会从项目里面切入到 web 基础（html/css/js），这一块大概会聊 20-30 分钟，所以一定要提前选好一个自己做过的得意的项目，花一点时间捋一捋你觉得项目中出色的点，用到了比较 hack，比较酷炫的方法解决了哪些痛点。 this：…"}, {"id": "6989902961493164040", "title": "【常用CSS】搜罗天下之常用的CSS特效,总有一款用的着", "desc": "实用 CSS 特效 四角边框/ 渐变边框/ 特效按钮/在查阅文档时, 经常看到这个分享图标, 鼠标移上去还会动,很是可爱有没有! 很多复杂特效其实很简单, 恰是看起来简单的特效却很复杂!"}, {"id": "6982780540919234573", "title": "【Vue Style】scoped原理，嵌套情况，v-deep原理", "desc": "“写vue项目时，style标签应当加scoped，防止样式污染” 这句话，新人在进入vue时，都应该知道这个指导。。。那就需要明白使用scoped发生了，::v-deep又改变了什么。"}, {"id": "6997772331217223716", "title": "CSS动画及用HTML+CSS动画实现波纹效果和奔跑的大熊", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战  动画概念 动画（animation）是CSS3中具有颠覆性的特征之一，可通过设置多个节点来控制一个或一组动画。常用来实现复杂的动画效果。"}, {"id": "7000198782482808869", "title": "浅谈 CSS3 新特性：控制用户界面", "desc": "在 CSS3 中, 增加了一些新的特性来调整用户界面。 resize 允许你控制一个元素的可调整大小性，box-sizing 定义元素大小的计算方式，outline-offset 设置元素边缘距离。"}, {"id": "7000173885287055373", "title": "深入CSS浮动模型 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 今天我们来聊聊浮动模型float 通过属性float:left/right 可以让元素站队，左浮动或者右浮动； 浮动模型的本质是：浮动元素"}, {"id": "6999574299161919495", "title": "CSS揭秘——灵活的背景定位", "desc": "对于容器内的背景图做偏移定位，在 CSS 2.1 中，只能指定距离左上角的偏移量，或者完全偏移到其他三个角，没有空隙会让视觉感受上就不友好。这篇就是来看看在新的 CSS 特性中有什么好的解决方法。"}, {"id": "6998925491797229599", "title": "CSS中 块级元素、行内元素、行内块元素区别", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 元素是文档结构的基础，在 css 里面，每个元素生成了包含内容的框（box）, 大家都叫“盒子”。但是不同的元素显示方式是不同的，有占据一"}, {"id": "6997982948553130015", "title": "搞清CSS3中的Flex布局 | 8月更文挑战", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 在传统的布局中，我们常常使用定位position、margin、浮动float等来实现页面的布局，虽然功能可以实现没有问题，但是它有缺点不"}, {"id": "6878192439732109326", "title": "画物语——CSS动画之美 | 掘金技术征文-双节特别篇", "desc": "大家好，这里是CSS魔法使——alphardex。 我对动画创作有着巨大的兴趣，平时你们能够经常在掘金的沸点上看到我创作的各种各样的动画作品。于是乎，我就决定将我所使用的各种技巧总结起来，让大家也能愉快地玩耍CSS动画。 好了，话不多说。让我们一起进入CSS动画这个领域吧！ 平…"}, {"id": "6844903634849759239", "title": "一篇全面的CSS布局学习指南 [译]", "desc": "无论你是一个想要学习CSS布局的新手，还是一个比较有经验但想要进一步巩固与了解最新CSS布局知识的前端开发者，这篇指南都能帮你全面了解如今CSS布局发展的现状。 在过去的许多年中，正如翻天覆地的前端开发一般，CSS布局也产生了巨大的变化。现在我们有需要可选的CSS布局方式来开发…"}, {"id": "7000744463228207118", "title": "HTML中元素的显示模式，块元素，行内元素及行内块元素", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 什么是元素显示模式 在了解元素显示模式前，我们先来举个不恰当的例子：比如在世界上的人有成万上亿，那么归根结底只有两种人就是男人和女人，偶尔"}, {"id": "6844903904711278605", "title": "前端动画专题（三）：撩人的按钮特效", "desc": "因为 button 元素可以使用 before/after 伪元素，所以借助伪元素，可以实现动态图中的遮盖层。 为了避免回流重绘，滑箱的运动方向是垂直方向，所以使用scaleY属性。对于动画的方向，需要借助transform-origin改变动画原点。 果冻特效可以分割成 5 …"}, {"id": "6983121149127294989", "title": "CSS实现吃豆豆动画", "desc": "在此之前啊，看到一个吃豆豆的游戏。那我们今天就用css3来搞一个吃豆豆的动画啊。 其实实现的方法也很简单。使"}, {"id": "6995100552833007623", "title": "【前端--CSS】知识点（八）—— 给男朋友总结的CSS知识点（二）", "desc": "不知道昨天的css知识点男朋友们记住了多少，今天继续昨天知识点的补充，男朋友们在空闲时间接着回顾哦！"}, {"id": "6997784989324541982", "title": "Element 2 组件源码剖析之响应式(媒体查询)", "desc": "`媒体查询`是建立响应式设计的最常见方法。 本文将对其深入分析， 耐心读完， 相信会对您有所帮助。"}, {"id": "6966036468619804679", "title": "CSS filter 有哪些神奇用途", "desc": "复古、版画、油画、漫画、液化、老照片、性冷淡、莫兰迪、赛博朋克、旺达幻视风格通通都可以实现！本篇文章只是简单列举了几种使用 `CSS filter` 常用的页面效果，其实 `filter` 的每一种内"}, {"id": "6844903661743636494", "title": "两周撸一个掘金微信小程序", "desc": "这并不是掘金官方小程序（貌似没有搜到掘金 APP 对应的官方小程序），完全为第三方开发者开发，仅用于学习交流，禁止用于其他用途。若要使用官方正版，可访问掘金 官方网站，或下载掘金官方 APP，或访问掘金官方其他途径。 该小程序所有 API 均来自掘金官方 web 网站和官方 A…"}, {"id": "6844904169313140749", "title": "Sass.vs.Less | 简介与比较", "desc": "CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。 CSS仅仅是一个标记语言，不可以自定义变量，不可以引用。 没有变量和合理的样式复用机制，使…"}, {"id": "6844903661726859272", "title": "Vue项目骨架屏注入实践", "desc": "相比于早些年前后端代码紧密耦合、后端工程师还得写前端代码的时代，如今已发展到前后端分离，这种开发方式大大提升了前后端项目的可维护性与开发效率，让前后端工程师关注于自己的主业。然而在带来便利的同时，也带来了一些弊端，比如首屏渲染时间(FCP)因为首屏需要请求更多内容，比原来多了更…"}, {"id": "6968302500487102501", "title": "小程序轻量级点赞动画，基于CSS背景图实现", "desc": "本文中会包含一个点赞动画的轻量级实现，会先对比现有Canvas动画的小问题，再分析行业的方案，最后给出我自己的动画调优方案。"}, {"id": "6844903912760147982", "title": "Web 字体 font-family 再探秘", "desc": "你该知道的字体 font-family。 该篇文章基本没有太多移动端的字体选择及分析。并且过了这么久，如今的 Web 字体又有了一些新的东西，遂有此文。 正文从这里开始。 作为前端的一个习惯，浏览各个网站的时候总是喜欢打开开发者工具时不时审查元素一下。看了一下一些比较出名的网站…"}, {"id": "6994320769736146980", "title": "Css变量的巧思妙用", "desc": "样式变量 css 变量对我来说是个陌生的领域。主要是前端框架支持Sass，Less等css框架，使得其原有的变量就用的特别少。 Sass里面用的是变量符号$,Less中用的变量符号是@,原生css里面"}, {"id": "6965380594914033700", "title": "你不知道的「 CSS 容器查询 」", "desc": "背景 今天PM过来问我: 蛋总，有些用户反馈他们屏幕太小了，需要滑动， 操作不方便。 我们的系统能不能改成自适应布局啊? 我顿时虎躯一震：woc, 要把一个迭代了一年多的固定设计的产品，改成自适应布局"}, {"id": "6986823439952822285", "title": "移动端适配方案 - Rem", "desc": "解释: 它是CSS3中新增加的一个尺寸（度量）单位，根节点（html）的font-size决定了rem的"}, {"id": "6844904162447081485", "title": "我发现了7个关于 CSS backgroundImage 好用的技巧", "desc": "背景图像可能是我们所有前端开发人员在我们的职业生涯中至少使用过几次的CSS属性之一。大多数人认为背景图像不可能有任何不寻常的地方，但经过研究，答案并非如此。所以本文收集了七个我认为最有用的技巧，并创建了一些代码示例。 另一个很酷的背景特效就是三角形背景，当我们想展示某些完全不同…"}, {"id": "6844904035254960135", "title": "css容易使人蒙圈的几个经典问题", "desc": "本文摘自这一年来自己在工作中经历的几个比较好的CSS问题（不一定复杂，但个人觉得都挺值得一说），这些CSS问题平时很少遇到，即使遇到后也不一定知道解决方案，即使知道解决方案也不一定知道产生的原理，同时也准备了2个JS问题（之前有整理过一篇较长的JS问题文章，在此不做推新）。本文…"}, {"id": "6992428132263264264", "title": "CSS Modules 特性与项目实践", "desc": "CSS Modules 本身比较简单，还要写它的原因是我发现网上很多关于 CSS Modules 的教程或实践文章都已经过时，会存在某些使用方式现今已不可行的情况。"}, {"id": "6844903974491930637", "title": "IOS刘海屏H5 CSS适配", "desc": "cover 网页内容完全覆盖可视窗口，即页面完全充满屏幕，右图。适配关键！ 适配的核心是：通过 constant() 可以获取到非安全边距，再结合 padding 或 margin 来控制页面元素避开非安全区域。 Webkit在iOS11中新增CSS Functions: en…"}, {"id": "6844904161243299854", "title": "px rem em vh vw之间的区别到底是啥？", "desc": "px是像素值，是一个固定的长度，比如我们的米，厘米一样。 固定长度已经不能满足我们现在的需求了。 🌰举例：比如我们在缩小我们屏幕的时候，我们不仅仅是需要缩小我们的盒子的宽高，我们还想要让我们字体大小也随之缩小，这样用户体验会更好一点。 如果自己元素上面没有设置font-siz…"}, {"id": "6844903967701336072", "title": "Grid网格布局实例", "desc": "马上都 2020 年了，你还没有使用网格布局吗？虽然这些年 js 发展的势头正劲，盖过了 css 的发展风头，但其实 css 也是有很大进步的。弹性布局、网格布局相继被各大主流浏览器支持，大大方便了我们切图仔，再也不需要用 bootstrap 的栅格系统了，网格布局原生支持！S…"}, {"id": "6989475614809915400", "title": "使用CSS原子类来简化样式代码", "desc": "CSS原子类并不是什么新的特性，也不是什么预编译SCSS或LESS的语法，而是一种写法，其特点就是一个类名对应一个样式，从而通过在标签上附加不同的类名来生成对应的效果，可以有效的减少CSS的相关代码。"}, {"id": "6995126156496207903", "title": "纯CSS控制input在弹出输入提示时不变色", "desc": "这是我参与8月更文挑战的第11天，活动详情查看：8月更文挑战 问题起源 最近在做的一个网站的登录页面，本来设计好好的，时间测试的时候却发现了一个比较严重的问题。 如下图所示，因为Chrome的用户名与"}, {"id": "6996973174986375199", "title": "纯CSS生成平行四边形", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 毛玻璃效果后续 在介绍如何生成平行四边形之前，之前我的一篇文章纯CSS生成毛玻璃效果，有用户评论说backdrop-filter: blu"}, {"id": "6984186731348099086", "title": "【源码】optimal-select——如何获取到 HTML 元素指纹（CSS Selector）", "desc": "前言 最近在做一个项目，要求获取到一个 HTML 元素指纹。本文就 optimal-select 讲一下是如何实现的？"}, {"id": "6844904154633076744", "title": "利用高效的css 提高你的开发效率~（上）", "desc": "display:-webkit-box;必须结合的属性，将对象作为弹性伸缩盒子模型显示。 -webkit-box-orient;必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式。 text-overflow:ellipsis;可选属性，可以用来多行文本的情况下，用省略号“…"}, {"id": "6844903505006854152", "title": "实用的 Visual Studio Code 插件", "desc": "1.vscode-color-highlight------颜色代码高亮插件。（sublime text也有） 2.vscode-Open in Browser------右键在浏览器打开。（sublime text也有） 3.vscode-Path Intellisense-…"}, {"id": "6946172814512799752", "title": "为什么使用Tailwind Css框架?", "desc": "在还没有前端开发这个概念的时代，CSS 其实作为一个比较简单的 DSL 还相对凑合够用，但随着前端项目越来越复杂，前端各种开发模式都在随着项目规模扩大的需求而不断进化，比如前端服务上我们由服务端直出变为简单的前后端分离再慢慢的升级成前后端融合的 serverless，再比如 J…"}, {"id": "6886367930523746312", "title": "[CSS] 栅格化布局", "desc": "栅格化布局帮助你更容易构建复杂的网页设计。它会将HTML元素转换为网格的容器（有行有列）。你可以在网格里面添加你想要的子元素。 将一个HTML元素转换为网格的容器，只需要对其设置display: grid即可。display: grid告诉我们，可以使用CSS Grid的相关属…"}, {"id": "6844904090611220493", "title": "CSS变量实现暗黑模式，我的小铺页面已经支持", "desc": "最近微信被苹果逼的开发了暗黑模式，越来越多的网站和应用开始支持了暗黑模式，许多人也喜欢为网站选择暗模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何实现一个自动的 CSS 暗模式，根据你的访客的主题来改变。 我在自己的博客页面我的小铺页面实践了…"}, {"id": "6992226686578196488", "title": "css工程化概述", "desc": "css工程化概述 {ignore} css的问题 类名冲突的问题 当你写一个css类的时候，你是写全局的类呢，还是写多个层级选择后的类呢？ 你会发现，怎么都不好 过深的层级不利于编写、阅读、压缩、复用"}, {"id": "6844903504817946637", "title": "表格布局display: table的妙用", "desc": "说到表格布局，相信大家首先想到的是<table>标签，其实，在CSS2中还提供了一种表格布局：display: table，今天刚好用到，就有必要来深究一下了！ 虽然CSS3已经出现了display： flex（Flex布局）和display: grid（CSS：Grid布局）…"}, {"id": "6909350285680836622", "title": "css揭秘 - 多重边框+边框内圆角", "desc": "多重边框随着多重背景的兴起，多重边框在平时开发中使用的频率也越来越高了，我们肯定是希望在一个元素的基础上通过css代码去灵活的实现这一需求，接下来我们一起看看实例吧~box-shadow解决方案box"}, {"id": "6989437757877649439", "title": "编程入门：来了解HTML和CSS", "desc": "HTML和CSS之间的关系： 入门编程的伙伴，我们先从HTML和CSS这两个简单的语言开始入门，简单的语言能够提升我们对编程的兴趣，学习起来并不会感觉枯燥无味。 CSS是控制HTML内标签显示不同布局"}, {"id": "6844903788587941896", "title": "如何理解CSS中的BFC特性", "desc": "css中的 BFC 特性是在css2.1规范中引入的块渲染规则，利用这些规则可以帮助我们处理页面中的布局等问题。比如：在清除浮动方案中我们可以在父容器中加入 overflow:hidden，这就是利用了 BFC 特性。同时也是面试中一个常问的知识点，所以深入理解 BFC 很重要…"}, {"id": "6844903509800779783", "title": "iPhone X 适配 手Q H5页面通用解决方案", "desc": "来自腾讯 ISUX 社交用户体验设计中心 设计师 对于 iPhone X 适配 H5 页面的解决方案。 目前的 H5 页面可以分为通栏页面和非通栏页面两种，每种页面都可能有底部操作栏，具体如下： 顶部通栏 某些业务的一级页面多数使用了顶部通栏 banner 的效果，由于 iPh…"}, {"id": "6879423589616091144", "title": "星级评分——纯CSS实现（单选框的个性化使用）", "desc": "一、展示二、构思基本元素input单选框+伪类空星+选中后的星—>iconfont实现效果鼠标悬停效果点击效果以上两个效果发生时联动其前面的星星发生相同的效果三、实现html部分双层结构（rate-c"}, {"id": "6844903535901949966", "title": "【只发精品】匠心打造Vue侧滑菜单组件", "desc": "谷歌官方把这种布局叫做DrawerLayout（抽屉式导航栏）。那么我们要如何实现呢，好了正片开始！ 页面结构很简单，一个抽屉，一个主容器，内容可以利用slot支持外部自行定制。 那么，手指滑动的距离就是nowX - startX，当前drawer的位置为startPos + …"}, {"id": "6983873019311554573", "title": "flex深入理解", "desc": "flex flex-basis:0%表示建议支持是0 flex-basis:auto表示固定尺寸由内容决定，由于元素不具有弹性，因此，元素内的内容不会换行，最终尺寸通常表现为最大内容宽度。 initi"}, {"id": "6844904003793338375", "title": "老板的手机收到一个红包，为什么红包没居中？", "desc": "如何让一个子元素在父容器里水平垂直居中？这个问题必考，在实战开发中，也应用得非常多。 你也许能顺手写出好几种实现方法。但大部分人的写法不够规范，经不起千锤百炼。换句话说：这些人也就面试的时候夸夸其谈，但真的上战场的时候，他们不敢这么写，也不知道怎么写最靠谱。 这篇文章中，我们来…"}, {"id": "6984427164170977287", "title": "「HTML+CSS」--自定义加载动画【036】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置 宽度、高度均为96px 背景色：rgba(255, 255, 255, .2) 效果图如下 步骤2 设置spa"}, {"id": "6878216523983355918", "title": "css 实现 '凹凸曼' 等图形 👀", "desc": "这里感觉loading 的图形的实现方式可能还有其他（渐变 加 mask 。。。 ） 第一个的‘凹凸曼’例子 来自张鑫旭老师的 《css世界》, 很棒的书籍。"}, {"id": "6844903968556974093", "title": "我总结的 CSS 变量知识点", "desc": "最近读到一篇文章《Everything you need to know about CSS Variables》，让我对 CSS 变量有了新的认识。下面将整理出来的跟自己感悟的地方与大家分享，希望能帮助到对 CSS 变量还一知半解的同学。 声明 CSS 变量的时候，发现跟使用…"}, {"id": "6995367141507596302", "title": "CSS解决网页HTML元素DIV等无法居中的方法", "desc": "CSS3解决网页web前端HTML元素DIV、a标签、h标签等无法居中的方法：1.水平居中 2.水平垂直居中 （1）绝对定位水平垂直居中 （3）flex弹性布局垂直水平居中"}, {"id": "6915236832405897223", "title": "【Ten Mins Effect】 - 07 荧光按钮效果", "desc": "大家好，这里是初心Yearth，欢迎来到 10 mins css，每天花 10 分钟，实现一个简单精美的 css 效果。 而在上述关键点中，后两点都在前面的文章中已经提过如何实现，感兴趣的读者可以看看这里。 那么本文的重点就是前两点，下面依次分析实现。 我们知道，要给一个元素添…"}, {"id": "6920268463395045384", "title": "前端不同尺寸单位的区别", "desc": "前言无意中看到一个面试题为px、em、rem的区别，正好借此将前端常见的尺寸单位整理出来，总结一下他们的用法和不同之初前端那些尺寸单位一般来说笔者见到的尺寸单位有一下几种px、rpx、em、rem、%"}, {"id": "6844904191048040461", "title": "初谈 CSS 预处理器", "desc": "没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。 归结起来就是抽象能力。所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。这不是锦上添花，而恰恰是雪中送炭。 但是，…"}, {"id": "6905260258101788680", "title": "冷知识之CSS篇【文字竖向排列】", "desc": "我们要定义竹简的书写方式前，首先回顾下 CSS writing-mode 属性，它是定义文本在水平或垂直方向上如何排列。 horizontal-tb：水平方向自上而下的书写方式。 vertical-rl：垂直方向自右而左的书写方式。 vertical-lr：垂直方向内内容从上到…"}, {"id": "6907059197678977032", "title": "详解 linear-gradient 和 radial-gradient 的使用", "desc": "今天就来好好总结下它的使用方法，也方便以后查阅。 首先我们来看下什么是 linear-gradient()，根据 MDN的定义,它是图片，我们可以通过 linear-gradient() 函数创建几种颜色过渡生成的图片。 既然函数生成的是图片，我们也可以通过 backgroun…"}, {"id": "6844904114887852046", "title": "CSS filter与前端滤镜", "desc": "第一行对非IE浏览器生效，第二行是对IE浏览器生效（emmm...似乎浏览器就分为两种），本质上都是使用filter的grayscale属性，实现灰阶效果，灰阶是一种常用的图片滤镜。打开PS可以看到多种滤镜可选择： 而通过CSS的filter能够实现其中的一些滤镜效果，如灰阶，…"}, {"id": "6844903902840619022", "title": "一个更高效的 CSS-IN-JS 方案", "desc": "在这个文件中，我们 \"似乎没有引入任何库\"，就好像写内联样式一样，把样式描述、媒体查询、伪类都实现了, 并且可自定义样式名，如 bg、radius。 cssin 是一个高度可定制的低级 CSS-In-JS 框架，它为您提供构建定制设计所需的所有构建模块，而无需任何令人讨厌的样式…"}, {"id": "6844903601479876622", "title": "【基础】这15种CSS居中的方式，你都用过哪几种？", "desc": "CSS居中是前端工程师经常要面对的问题，也是基本技能之一。今天有时间把CSS居中的方案汇编整理了一下，目前包括水平居中，垂直居中及水平垂直居中方案共15种。如有漏掉的，还会陆续的补充进来，算做是一个备忘录吧。 利用 text-align: center 可以实现在块级元素内部的…"}, {"id": "6844904167719305229", "title": "px/em/rem的区别与应用", "desc": "PC端分辨率一样的情况下，屏幕尺寸越大，显示的越模糊(因为dpi越小)。 我们可以调整网页在移动端上的缩放比例，这个值就是viewport。默认情况下，移动端浏览器会将 viewport 宽度设为980px（也有可能是1024px 或其它值），也就是说1px = 设备屏幕宽度的…"}, {"id": "6916680274243911694", "title": "纯css实现太极阴阳鱼动画", "desc": "把2d静态的太极图改成了3d，阴极和阳极分到了两个平面里实现旋转效果，这个好实现，重点是实现它的透明效果，平面太极图显示出两极是用另加的块元素挡住底面的颜色，但如果上图的两极用遮挡来实现效果的话并不能实现透明，将遮挡的块设为透明又会显示出底面原本的样子，所以这个思路不对。那就只…"}, {"id": "6844903906070233102", "title": "Web技巧（16）", "desc": "上个周末因为自己要写PPT而没来得急整理，所以又错过了一期。在这一期中，大部分内容将围绕着@Bill Mei的《Top 10 most deadly CSS mistakes made by new and experienced developers》文章中提到观点来展开。这…"}, {"id": "6844903593741385741", "title": "webpack优化之HappyPack 实战", "desc": "由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。 我们需要Webpack 能同一时间处理多个任务，发挥多核 CPU 电脑的威力，HappyPack 就能让 Webpack 做到这点，它把任…"}, {"id": "6844903876798185486", "title": "Vscode配置stylelint", "desc": "在 Taro 中尺寸单位建议使用 px、 百分比 %，Taro 默认会对所有单位进行转换。当前忽略单个属性的最简单的方法，就是 px 单位使用大写字母Px or PX。"}, {"id": "6888304951311728653", "title": "CSS系列，你了解伪元素吗", "desc": "前言说起伪元素，很容易和伪类混淆，他们的使用方法非常相似标准写法伪类是用一个:，例如:hover而伪元素则是::，例如：::before，虽然一个:也会生效，但是不推荐常用的伪元素目前兼容性达到可用的"}, {"id": "6844903778122989582", "title": "[CSS] 自定义变量带你随心所欲，一键换肤", "desc": "其实CSS自定义属性还有很多小名，比如CSS变量、原生变量、CSS自定义属性级联变量，这些指的都是同个东西。 那既然SCSS就能做到的东西，我们还有这个所谓的CSS自定义变量干什么呢？人家自然有它的独到之处。 在这几个方面，预处理器完全被CSS自定义变量KO了。 语法很简单，分…"}, {"id": "6960209592530206728", "title": "      12.CSS3的Transform详解", "desc": "==transform==字面上就是变形，改变的意思。在css3中transform主要包括以下几种：旋转rotate、扭曲skew、缩放scale和移动translate以及矩阵变形matrix。 "}, {"id": "6971008680003125255", "title": "div实现可以滚动但不显示滚动条（纯CSS实现）", "desc": "想要的效果 想实现滚动效果但是又不想显示滚动条，如下面两个图所示： 实现效果的核心代码 参考链接：https://www.cnblogs.com/dinghaoran/p/11322455.html"}, {"id": "6985131531341660190", "title": "CSS 实现水平垂直居中的总结", "desc": "水平垂直居中 HTML 1. 绝对定位 + 负margin 缺点：需要固定居中元素的宽高。 2. 绝对定位 + margin: auto 缺点：需要固定居中元素的宽高，否则其宽高会被设为100% 3."}, {"id": "6968650931562872868", "title": "display 和 visibility的区别", "desc": "1. 占位 | 不占位 2. 重绘 & 回流 2.1 浏览器的渲染流程 2.2 复合图层和渲染图层 2.3 文档流"}, {"id": "6925210147925000206", "title": "css之粘性sticky布局（题头定位在顶部）", "desc": "1.首先想到的是fixed布局就是题头到一定距离的时候就固定在屏幕的顶部。 （可以实现，但是过程不是很丝滑） 2.计算出每道题目的题头距离屏幕顶部的高度，并组成一个数组。 3.滑动监听到的距离和获取到的题头进行一个比较，选择定位的题头。"}, {"id": "6844903813774589959", "title": "CSS 中的 Flex 布局 完全指南", "desc": "Flex 弹性盒子布局是很强大的布局，它可以很方便的控制元素在垂直和水平方向上的行为。 要使用 Flex，首选需要一个 Flex 容器（flex container）。使用display: flex;创建，flex 是一个 CSS 的display属性中新添加一个值，而容器下的…"}, {"id": "6989093021090316301", "title": "CSS/CSS3 | xx-浮动float简介<01>", "desc": "type: synchronization 1. 概念 浮动(英语:float) 是指元素设置float属性时的状态,特征 通过浮动可以使一个元素向其父元素的左侧或者右侧移动。 2. 设置浮动 可以使"}, {"id": "6844903774650122247", "title": "【译】通过css，用一个div做一个芝士汉堡", "desc": "我喜欢用奇怪的编程思想挑战自己。这是获得乐趣和学习新事物的好方法。这次的挑战是使用一个空 div 在 CSS 中绘制一个芝士汉堡。 经过大量的试验和错误，我最终得到了这个。 这可能不是有史以来最好看的汉堡，但对我来说是印象最深刻的。这表明我们有可能用一个 div 绘制像这样复杂…"}, {"id": "6997008186611859464", "title": "【JavaWeb基础 · CSS样式--字体】", "desc": "“这是我参与8月更文挑战的第16天，活动详情查看： 8月更文挑战” font属性 font 简写属性在一个声明中设置所有字体属性。 可设置的属性是（按顺序）： \"font-style font-var"}, {"id": "6922717159646822408", "title": "图解 5 种布局掌握 CSS Grid", "desc": "网格是一个工具，你可以使用它来帮助你的网站创建布局。如果你需要考虑不同元素的位置、层次或大小，它就特别有用。 网格是复杂的，有很多东西要学习。但好消息是，你不需要一下子知道所有的事情。 在本教程中，我们将使用 CSS Grid 构建 5 种不同的布局(下面将解释为 5 个独立的…"}, {"id": "6844903713555873799", "title": "Web移动端适配总结", "desc": "一. 1px边框问题 想必各位无论在面试中，还是工作中，应该遇到过1px边框的问题。不知道也没关系，现在我们就来复习一下（知道的朋友可以跳过去看第二部分了）。 1px边框，顾名思义就是前端画出1px的线，这里的1px,指的是屏幕1px大小。那么屏幕的1px和css中的1px有什…"}, {"id": "6844903844355244039", "title": "[实践总结]纯css实现动态边框", "desc": "看到这个效果，我首先想到的是设置元素的border属性，可惜border不能设置长度，无法实现动效。另外一种实现思路是添加四个div来分别实现上下左右的边框效果，虽然可行，但是要添加四个额外元素，有点儿得不偿失的感觉。难道就没有更好的解决方案了... 就在我绞尽脑汁的时候，灵光…"}, {"id": "6844903613798547469", "title": "你知道我们平时在CSS中写的%都是相对于谁吗？", "desc": "在我们编写CSS的时候，经常会用到百分比赋值（%）实现自适应。像我们最常使用的流式布局设计模式，基本所有的column的宽度都是通过%来取值的。或者比如经常会遇到的元素水平垂直居中问题，我们常常会使用下面这样的CSS代码加以实现（absolute+transform思路）： 大…"}, {"id": "6862107135707185165", "title": "提升布局能力！理解 CSS 的多种背景及使用场景和技巧", "desc": "CSS background是最常用的CSS属性之一。然而，并不是所有开发人员都知道使用多种背景。这段时间都在关注使用多种背景场景。在本文中，会详细介绍background-image`属性，并结合图形来解释多个背景使用方式以及其实际好处。 如果你还了解 CSS backgro…"}, {"id": "6992376567368253471", "title": "前端常用的样式封装css篇（一）", "desc": "这是我参与8月更文挑战的第4天，活动详情查看：8月更文挑战 前言 我们在开发页面样式的时候时常会有一些知道而有想不起来或者奇怪的样式功能，重新去找或重新写实在过多占用我们摸鱼的时间，所以我们日常要养成"}, {"id": "6994252442439254024", "title": "【动画消消乐】HTML+CSS 自定义加载动画 057+058", "desc": "这是我参与8月更文挑战的第9天，活动详情查看：8月更文挑战 前言 效果展示 - 1 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 宽度、高度均为48px 背景色：白色 效"}, {"id": "6844903998508498958", "title": "这一次终于弄懂了 CSS BFC、清除浮动、外边距折叠", "desc": "块格式化上下文（Block Formatting Context，BFC） 是 Web 页面的可视化 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 块格式化上下文对浮动定位（参见 float）与清除浮动（参见 clear）都很重要。 高…"}, {"id": "6967655448128258056", "title": "CSS格式化上下文之GFC、FFC", "desc": "在前面两篇文章分别介绍了BFC、IFC，这两个都是CSS2里的规范和概念，这篇文章接续上两篇文章来说说CSS3规范里的GFC、FFC，至此这一序列的总结文章也就结束了。"}, {"id": "6844903697135173645", "title": "如何修改placeholder样式", "desc": "项目用经常遇到修改input的placeholder的颜色的需求，这里来看一下placeholder如何用css设置。"}, {"id": "6844903728751837192", "title": "PostCSS真的太好用了！", "desc": "在PostCSS官网有着这样的对PostCSS特性介绍，箭头后面是对应功能的插件及其github地址。 PostCSS是一款使用插件去转换CSS的工具，有许多非常好用的插件，例如autoprefixer,cssnext以及CSS Modules。而上面列举出的这些特性，都是由对…"}, {"id": "6844903794321391623", "title": "面试之CSS篇 - 边距重叠与BFC", "desc": "在 标准盒子模型中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。 边界重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界。…"}, {"id": "6889234341264949255", "title": "使用 tabindex 配合 focus-within 巧妙实现父选择器", "desc": "本文将介绍一个不太实用的小技巧，使用 tabindex 配合 :focus-within 巧妙实现父选择器。 这是一个非常经典的问题，到目前为止，CSS 没有真正意义上被广泛实现的父选择器，这和浏览器的渲染机制有关。 当然，这不代表 CSS 完全无法通过子元素去控制父元素，通过…"}, {"id": "6844904182156115982", "title": "『前端面试100问』之弹性盒子中 flex: 0 1 auto 表示什么意思", "desc": "flex Box 布局（Flexible Box）旨在提供一种更有效的方式来布局、对齐和分配容器中项目之间的空间，即使它们的大小是未知的或动态改变的。其主要思想是让容器能根据可用空间的大小来动态地改变其元素的宽度和高度。 flex CSS 属性设置的是，flex 元素如何根据其…"}, {"id": "6983502332700917768", "title": "基础选择器", "desc": "标签选择器 使用标签名进行索引 （把某一类标签全部选出，无论标签的深度如何 id选择器 样式用#定义，结构用id调用，只能调用一次，别人不能使用. 复合选择器 后代选择器 各种选择器以空格隔开表示选择"}, {"id": "6982734436081074213", "title": "css相关的面试题", "desc": "前端css常见的面试题，css基础、页面布局、定位与浮动几个大的分类，伪类和伪元素的区别、BFC机制、盒模型的概念、display属性、css选择器、flex布局、css高度坍塌"}, {"id": "6981047136817250334", "title": "前端--网站换色方案", "desc": "一，开发环境 框架：vue css：less 二，前言 最近在处理业务的时候，遇到一个需求，要求前端能够根据接口返回类型，更改网站配色方案，思考了一下，市面上有许多换色的案例（如：花裤衩大佬的vue-"}, {"id": "6989029028120231950", "title": "[ HTML5 ] WEB 常用页面布局梳理和分析", "desc": "页面布局实现的方法有许多种，但是我个人习惯是会只用一种自己比较习惯的方法，只要不是出现了兼容性问题一般也不会去使用其他的方法，但是也是要知道有哪一些方法可以实现，确实忘记了我就使用搜索快速解决问题。下"}, {"id": "6844904151101472782", "title": "移动web必会技能-图片居中处理", "desc": "图片在上传后，会有不同的大小，有的是长图（长大于宽），有的是宽图（宽大于长），或者是一些接近正方形的图片。 在保证图片原本长宽比的情况下，要想将图片显示在一个正方形的区域内，或者是固定长宽的区域内，是必须要截取一部分图片展示的。 采用CSS或者JavaScript都可以实现这种…"}, {"id": "6844903670618800136", "title": "原生JS实现轮播图--第二章动画实现", "desc": "样式构成与上一节相似，这里稍做调整，便不再赘述。 轮播图的动画效果，就是图片按照规定的方向，不停滚动以展示每一张图片，同时还可以通过点击以改变原本的展示顺序。实现有一下几点： 功能整合。 图片自行滚动务必就要使用到定时器setInterval或者setTimeout，使得移动函…"}, {"id": "6844903583331123214", "title": "前端布局基础概述", "desc": "（点击上方公众号，可快速关注） 本文来自（作者蔡剑涛）的投稿 https://mp.weixin.qq.com/s/-LcNZWFFty2lWuND6uuNNA 1. 前言 前端圈有个“梗”：在面试时，问个css的position属性能刷掉一半人，其中不乏工作四五年的同学。在公…"}, {"id": "6943062740281851935", "title": "TailwindCSS", "desc": "Tailwind CSS 是一个可定制化的 CSS 框架，最大的特点是功能类优先，和我们知道的bootstrap，element ui，antd，veui等框架一样。将一些CSS样式封装好，用来加速我们开发的一个工具。 简单理解 TailwindCSS 就是 CSS 的 lod…"}, {"id": "7002992375551393828", "title": "打造高性能css动画，你该怎么做？", "desc": "你一定知道 JS 动画的优先级 < css 动画。即使必要，用 JS 操作class的优先级也一定 > 用 JS 直接修改具体样式。 但是如果问到：“你了解css动画的性能么？如何优化？”你该怎么解决"}, {"id": "6844904020318896142", "title": "b站全灰，原来仅需一行css代码——css 滤镜", "desc": "今天打开b站，看见一片灰色。对于公祭日，我们每一个人都应该为此默哀、纪念历史，都要铭记历史、热爱祖国、砥砺前行 首先，职业下意识就打开了控制台。为什么呢？是想看看怎么实现的，是css自定义属性吗？是引入一份css吗？是预处理器修改全局变量吗？结果，打开控制台，浏览了一下，最后定…"}, {"id": "6990652014862532622", "title": "【重磅升级！】写给前端非科班的「计算机组成原理」！！！", "desc": "之前写过一篇类似的文章（ 非科班前端注意了！ 计算机组成原理知识已送到你嘴边! )，但是已经是1年前的事了，今年我觉得自己又成长了很多，再次总结一次，其内容丰富程度远超上篇文章！废话不多说！上车吧！ "}, {"id": "6861725116938747917", "title": "深色模式适配指南", "desc": "随着 iOS 13 的发布，深色模式（Dark Mode）越来越多地出现在大众的视野中，支持深色模式已经成为现代移动应用和网站的一个潮流，前段时间更是因为微信的适配再度引起热议。 深色模式不仅可以大幅减少电量的消耗，减弱强光对比 ，还能提供更好的可视性和沉浸感。 随着深色模式的…"}, {"id": "6892766734995226631", "title": "打造自适应网站只用一个CSS属性就够了", "desc": "用一个CSS属性创建一个响应式网站，让我们来看看它是如何做到的。🤔 以这个模板为例，没有应用css属性。🖥 使用 clamp() CSS函数，我们可以创建仅具有一个属性的响应式网站。 clamp() 的工作原理是“夹紧”或限制一个灵活的值，使其处于最小和最大范围之间。 在此…"}, {"id": "6998586655992971295", "title": "主流的3D按钮效果", "desc": "这是我参与8月更文挑战的第21天，活动详情查看：8月更文挑战 背景 按钮 是我们 编程 中使用频率最多的几个 交互元素 之一"}, {"id": "7003543859800047630", "title": "切图仔的自我修养", "desc": "是你需要的 meta viewport吗？日常css奇淫技巧大集合，margin塌陷、margin合并 高度自适应"}, {"id": "6953405751104634916", "title": "深入解析 CSS 选择器", "desc": "一、前言 ​ CSS 选择器对 HTML 页面中的元素实现一对一，一对多或者多对一的控制，从而给指定元素添加样式。同时还要考虑一个元素被赋予多个样式时如何生效的问题，这个就和选择器优先级相关了。 ​ "}, {"id": "6915763034069663752", "title": "【CSS】骨架屏 Skeleton 效果", "desc": "大家好，我是 Steven。 这个效果中文叫作骨架屏，英文叫 Skeleton，今期会跟大家分享在 CSS 上实现这个效果的方法。 打开 CodePen 编辑器，在 HTML 的部份加入一些结构，例如是一张卡片。 新增一个 &#x3C;div> 标签，class 名为 card…"}, {"id": "6970307196068315150", "title": "学习 CSS 文本溢出显示省略号", "desc": "这是我参与更文挑战的第5天，活动详情查看： 更文挑战 在开发中经常会用到文本溢出省略打点，为了更好的记住它，现在开始深入了解。 单行文本显示省略号 使用white-space属性设置不换行、overf"}, {"id": "6986629782666477599", "title": "深入了解::before 和 ::after 伪元素", "desc": "「本文已参与好文召集令活动，点击查看：后端、大前端双赛道投稿，2万元奖池等你挑战！」 本文从最简单的开始，解释如何理解和使用::before和::after。然后再在实际使用场景中去应用它。 ::be"}, {"id": "6970979674092634120", "title": " 纯css实现：仿掘金账户密码登录时，小熊猫捂眼动作切换的小彩蛋", "desc": "今天在浏览器登录掘金的时候，发现使用 “账密登录” 时，掘金小熊猫会随着当前鼠标焦点不同而改变，这个小彩蛋看起来很有意思的样子……"}, {"id": "7002236490654859278", "title": "分享按钮设计", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 背景 按钮 是我们 编程 中使用频率最多的几个 交互元素 之一，点击它会产生其描述的动作。如果一个按钮上写着 提交 ，点击它很可能会 提交"}, {"id": "6847902221779238920", "title": "如何用一行 CSS 分别实现 10 种现代布局？", "desc": "周日在家看 web.dev 的 2020 三天 live，发现不少有意思的东西，其中有一项是关于 CSS 的，主播是 Una Kravets（chrome team 成员）。虽然我已经好几个月没有深入研究 CSS 的东西了，不过以前的底子还在（有兴趣的可以看我一年前发布的关于 …"}, {"id": "7006205253443928095", "title": "单标签CSS实现自嗨兔（简陋版）", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 以前一直没有在意单标签实现一些动画的原理，这次刚好蹭活动，同时补习一下。 做出来的自嗨兔效果： 附上源码库：https://gitee.com/"}, {"id": "6945794591513657358", "title": "不会吧不会吧，都 1202 年了，你还不知道这些检查 CSS 的工具？？？", "desc": "检查 CSS 在开发者的日常生活中并不是一项常见的任务，但有时我们却不得不去做。也许这是性能检查的一部分，以确定有问题的 CSS 或删去未使用的选择器。也许是努力提高可访问性的一部分，在代码库中使用的所有颜色都要进行对比评估。甚至可能是为了加强一致性。 不管是什么情况，每当需要…"}, {"id": "6994580720807051301", "title": "谁动了我的选择器？深入理解CSS选择器优先级", "desc": "😏序言 在前端的面试中，有一道很普遍的题目，就是CSS选择器的优先级。原来周一觉得这个东西好像蛮简单的，就是认知里面的类选择器、id选择器和标签，然后就没了。但是殊不知很多时候我们都输给了“我以为”，"}, {"id": "6971261516284690468", "title": "CSS 实现支持渐变的提示框（tooltips）", "desc": "今天来看一种十分常见的交互：提示框（tooltips）。通常提示框都是纯色的。本文将介绍3种方式来实现支持渐变色的提示框，分别是 clip-path 、mask和 CSS paint，一起学习吧"}, {"id": "6845166890516480013", "title": "CSS Viewport 单位，很多人还不知道使用它来快速布局！", "desc": "**CSS Viewport units(视口单位)**在过去几年已经出现了，随着时间的推移，越来越多的开发人员开始使用它们。它们的好处在于为我们提供了一种不需要使用J avaScript 就能以动态的方式调整大小的方法。而且，如果它失效，也有很多备用方案。 在本文中，我们将学…"}, {"id": "6992184390210027527", "title": "如何优雅地画一像素的细线", "desc": "如何用CSS画一条一像素的细线，这个问题是很多开发者开发过程中常见的问题，也是前端同学在面试的时候常见的问题之一。本篇文章为大家介绍如何优雅地画一像素的细线。"}, {"id": "7002917118366728200", "title": "css架构设计-笔记", "desc": "前言 大家好,我是作曲家种太阳 最近忙于新业务,没有写文章,学习进度也是缓慢,接下来我会以笔记为主,做一些输出,沉淀一段时间 本篇是学习某课网的css架构蘑菇街的学习笔记,了解css架构设计理念和分层"}, {"id": "6983939983720022053", "title": "CSS 计数器实现九宫格自动提示超出数量", "desc": "经常在某些 app 中看到这样的九宫格设计。当缩略图不足 9 张时，正常排列，当超过 9 张时，会提示还剩多少张。 如何使用纯 CSS 实现这一效果呢？一起来看看吧"}, {"id": "7006932684182126599", "title": "看完这篇总该搞懂flex布局了吧", "desc": "一. flex布局概念 flex布局是CSS3新增的一种布局方式，弹性布局能给盒子模型的布局提供很大的灵活性。把一个元素盒子的display值声明为flex后，该盒子就是弹性盒子，作为flex容器，且"}, {"id": "7000570872750669838", "title": "彩虹跑马灯边框效果 ", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 背景 彩虹跑马灯边框效果：彩虹跑马灯边框是常用的一种 CSS 边框效果，相比于其他单色边框，主要起到 突出按钮 或者 某一特定区域内内容 "}, {"id": "6999854478778171405", "title": "把富文本封装在 shadow DOM 中，要注意些啥？", "desc": "在富文本编辑器的使用过程中，是否常常因为全局 CSS 污染的问题让你很难受，并且在这个点上你了解到了 shadow DOM，你多半会有把富文本放在 shadow DOM 中的可爱想法。"}, {"id": "7002408739013656584", "title": "【CSS基础】背景图片定位", "desc": "这是我参与8月更文挑战的第31天，活动详情查看：8月更文挑战 背景 在学习 CSS 的过程中，大家肯定会遇到一个背景图片不知道 如何快速定位 的问题，但是大部分基础的 CSS 教程并没有提及如何解决这"}, {"id": "6869659680496041991", "title": "那些你总是记不住但又总是要用的css", "desc": "有没有经常遇到一些样式每次写都要用百度呢？我收集了一些我平时经常要用到的但又总是记不住的样式。有错误的地方欢迎指正。转载请注明出处。一、设置input的placeholder的字体样式设置input聚"}, {"id": "7002754807538647054", "title": "同学请讲一下CSS的盒模型", "desc": "CSS盒子模型仅仅是一个形象的比喻，HTML中所有的标签都是盒子。在HTML中所有的标签都可以设置如下属性："}, {"id": "6996107620998184997", "title": "学透CSS-border的小兄弟不规则的轮廓outline 连载中", "desc": "日常开发中，我们经常使用border来给元素增加一些美感，但是由于盒子模型的存在，border有时候会影响我们的判断，所以今天介绍outline."}, {"id": "7004437810769838110", "title": "css渲染甜点阅读（浏览器输入链接后会发生什么？——渲染篇）", "desc": "有个流传已久的面试题：从浏览器输入url到页面出现会发生什么？ 这里面有很多可以说的东西，基本属于自由发挥，本篇就一起来聊聊最“看得见”的一环。"}, {"id": "6986827061461516324", "title": "CSS 实现Chrome标签栏的技巧", "desc": "这次来看一个带特殊圆角导航栏布局，如下谷歌浏览器的标签栏： 这样一个布局如何实现呢？下面介绍几种方法 一、伪元素拼接 假设有这样一个 HTML 结构 首先可以考虑的一种方式就利用两个伪元素拼接 中间的"}, {"id": "7001268204253216781", "title": "变速加载动画", "desc": "这是我参与8月更文挑战的第28天，活动详情查看：8月更文挑战 背景 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。"}, {"id": "7004379703255498759", "title": "彻底弄懂css filter滤镜", "desc": "HSL色彩模型 色相（HUE）：在基础色轮上分布的颜色，也称为纯色，纯色是不含黑白灰的颜色。 饱和度（SATURATION）：是指颜色的鲜亮程度，在纯色中加入灰色，就会降低色彩的饱和度。 明暗度（LI"}, {"id": "6987565731881680903", "title": " 写了这么多年 CSS，initial 和 inherit 以及 unset 和 revert 还傻傻分不清楚？", "desc": "经常会碰到，问一个 CSS 属性，例如 position 有多少取值。 通常的回答是 static、relative、absolute 和 fixed 。当然，还有一个稍微生僻的 sticky 。其实"}, {"id": "6937559206413205512", "title": "手把手带你把项目改为移动端适配｜技术点评 ", "desc": "前言 不知道大家在工作中是否遇到需要把一个非移动端的项目快速改造成为移动端适配的需求 此篇以 理论+实战演示 快速分析改造一个项目使其能进行移动端适配 同时对移动端适配方案也进行了总结 妈妈再也不用担"}, {"id": "6970212158026022942", "title": "5分钟实现赛博朋克风格按钮 html+css", "desc": "这是我参与更文挑战的第4天 先看效果： 前言： 这个思路是我在b站看up主Steven做的，觉得很不错，然后自己也弄了一个。（纯css），下面是详细过程。最后面有完整代码。 实现： 1. 首先定义一个"}, {"id": "7001705125672648712", "title": "你听说过css的【motion path】吗？", "desc": "【motion path】翻译过来就是运动路径，它是一个规范，其中定义了元素如何进行运动的属性。我们利用它可以控制元素按照特定的路径进行位置变换并且这个路径可以是非常复杂的一条路径"}, {"id": "7003997843019202597", "title": "当面试题问：用纯CSS实现三角形、圆角三角形、圆形...", "desc": "最近在看各大厂的面试题时发现大多数都在考察css基础时都喜欢让面试者用纯CSS实现三角形、圆形等各种图形，因此写下这篇笔记记录一下 纯CSS实现三角形 border 先来看看当宽高为0，bord"}, {"id": "6951640002526707743", "title": "【译】z-index 特喵到底是什么？", "desc": "带你探索 CSS 层叠上下文， CSS 中头号误导人的机制。 在 CSS 中，我们都明确的知道用 z-index 可以来控制 HTML 的层级顺序。元素有着越大的指数将会排在页面的最顶部"}, {"id": "6953054569819537415", "title": "新时代布局中一些有意思的特性", "desc": "拥抱新时代布局，看看在最新的 chrome 版本中，有什么新奇有趣的属性功能得到了支持，在未来，我们又可以使用什么有意思的属性~"}, {"id": "6996646964293189663", "title": "单行／多行文本溢出的省略样式", "desc": "1. 单行文本溢出 text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本 white-space：设置文字在一行显示，不能换行 overflow：文字长度超出限定宽度，则隐藏超"}, {"id": "6911960239298314248", "title": "用CSS实现一个抽奖转盘", "desc": "基本是用CSS实现的，没有用图片，加一丢丢JS。完全没有考虑兼容性。 效果如下，配色什么的不要在意，可能比较丑。。。 然后写抽奖指针的小箭头，用CSS画三角形是一个比较常见的问题，通过设置width和height为0，然后用border实现。 如图，矩形是由四个三角形边框组成的…"}, {"id": "6996644134488375332", "title": "CSS background 属性", "desc": "background 是一个 CSS 简写属性，用于设置任何元素的背景效果。它控制元素内容下方的绘制内容。 以下示例显示了可指定为元素创建任何背景效果的属性的完整列表： background 简写形式"}, {"id": "6844904198346113038", "title": "迈向 Grid 二维布局时代", "desc": "为什么需要 Grid。Grid Line 在生产环境中怎么安全的使用 Grid 介绍 Gird 基本概念。 开始学习使用 Gird。 在生产环境中怎么安全的使用 Grid。 目前我们有很多种布局方案，比如最初我们使用表格布局，后面使用 float, position 和 inl…"}, {"id": "6895598441146105863", "title": "初识pc端和mobile端CSS适配利器—vw+rem+CSS locks", "desc": "大概五月份的时候，我下定决心写自己的博客系统，于是断断续续花了近一个月的时间琢磨Nestjs，写完了接口部分。六月份因为工作的原因就搁置了，说来也惭愧，直到九月中旬，才将它拾起。半个月后，后台部分基本功能完成，开始着手写网站。 一股脑儿又写了半个月，基础功能，自动化部署都顺利完…"}, {"id": "6844904022961291277", "title": "有幸评为2019年最具影响力作者", "desc": "有幸评为2019年人民邮电出版社最具影响力作者。 上个月的事情啦。 之所以专门写篇文章是想安利下《CSS世界》这本书，CSS体系进阶必读，且需要反复阅读，细节很多，理解深刻。 去年IT类书籍新书销量Number 1，是读者的认可；现在“最有影响力作者”是出版社对本书的认可。 另…"}, {"id": "6949015537682759694", "title": "技术周报 · 2021-04-09", "desc": "小编推荐通过字节码保护 Node.js 源码之原理篇H5 小说阅读器左右翻页研究JavaScriptBabel 是如何转换 async/await 的？浅探 Web Worker 与 JavaScri"}, {"id": "6897133639004323847", "title": "CSS动画：Transitions, Transforms和Animation使用", "desc": "CSS动画相关的几个属性是：transition,transform,animation;可以分别理解为过渡，变换，动画。虽意义相近，但具体角色不一。就像是SHE组合，虽然都是三个女生，都唱同一首歌，但有负责高音，和擅长低音的，具体工作于角色还是有差异的。 transition…"}, {"id": "6882302893848952839", "title": "Flex 布局", "desc": "1. flex 基本概念 Flex 是一种已经不算新的布局方式了，兼容性已经相当不错（至少比起遥不可及的 grid 布局而言）。现在被广泛应用在网页设计中，成为了主流的布局方式。 无论是在 flex 布局中，还是在 grid 布局中都有容器的概念。容器类似于一个黑盒，容器内部采…"}, {"id": "6844903635004948488", "title": "如何更愉快地使用em —— 别说你懂CSS相对单位", "desc": "前段时间试译了Keith J.Grant的CSS好书《CSS in Depth》，其中的第二章《Working with relative units》，书中对relative units的讲解和举例可以说相当全面，看完之后发现自己并不太懂CSS相对单位，也希望分享给大家，所以…"}, {"id": "6997787838339088415", "title": "【CSS】从盒模型介绍展开", "desc": "这是我参与8月更文挑战的第18天，活动详情查看：8月更文挑战 01. 盒子模型介绍 释义：一个用来盛放HTML元素的容器 包括： content：内容本身 padding：内边距 border：边框 "}, {"id": "6984717472423215134", "title": "行高和垂直对齐(行级元素在行盒内的摆放)", "desc": "笔记整理自 学堂在线的刘强老师的视频教学 课程十分清晰、课件简明且附件可以自由下载 超赞！适合初学者也适合有开发者查漏补缺 Web前端攻城狮(2021春) line box Font Metrics "}, {"id": "6844904178813255687", "title": "postcss 插件开发：批量自动化移动端1px解决方案", "desc": "移动端web项目越来越多，设计师对于UI的要求也越来越高，比如1px 的边框。在高清屏下，移动端的1px 会很粗。现如今已经有许多优秀的1px解决方案 缺点：需要额外编写伪元素样式。对于我这种懒癌往期用户来说，真的头疼； 缺点：需要调用封装好的less函数。对于不懂less的同…"}, {"id": "6844903733042610184", "title": "css中的px、em、rem 详解", "desc": "是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果px要换算成物理长度，需要指定精度DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。Windows系统默认是96dpi，Apple系统默认是72dpi。 是一个相对长度单位，最初是指字母…"}, {"id": "6844903698447990798", "title": "使用CSS自定义属性构建骨架屏", "desc": "设计Web上的加载状态常常被忽略或被认为是事后考虑。性能不仅是前端开发人员的职责，构建与慢速连接一起工作的体验也是设计挑战。 虽然前端开发人员需要注意一些事情，比如压缩和缓存，但是设计人员必须考虑UI处于“加载”或“离线”状态时的外观和行为。 随着我们对移动体验的期望发生变化，…"}, {"id": "6898278714312753159", "title": "BFC总结", "desc": "BFC的中文名称是块级格式上下文，Block Formatting Context的简称，而具有BFC特性的元素可以看出一个独立的隔绝容器，里面的元素不会影响外面的元素。在一个块格式化上下文中，盒在竖直方向一个接一个地放置，从包含块的顶部开始。 1. 父子元素 margin 重…"}, {"id": "6971712941728989198", "title": "让我们再学一下less", "desc": "less之前看过很多文章，也写过，但是只是记住一些常用用法，很多时候又得去网上翻找资料才记得，所以今天我打算把less重温一遍，把安装，"}, {"id": "6971974558886658078", "title": "你真的了解background么？", "desc": "只知道背景图片是用background实现，可以设置平铺，位置，大小。。。 一直没去详细了解下他每个配置项具体是什么含义，都怎么使用... 趁着今天天气不错，跟着小鱼儿.一起来进入background"}, {"id": "6990322942810947598", "title": "Sass 入门知识", "desc": "什么是 Sass ？ Sass，英文全称 “ Syntactically Awesome StyleSheets ”，是对 CSS 的扩展。它添加了一些 CSS 语法不具有的新特性。Sass 让开发者"}, {"id": "6844903919059992584", "title": "CSS实现镂空遮罩", "desc": "虽然这种方式处理定位有一些麻烦，并且不适合页面有滚动的情况，滚动的时候可能出现错位。 但是当时怎么也应该答出这种方式，但是确实一面试就紧张，脑子不转了，就想着添加一个伪元素，但是不知道怎么穿透。 可以使用强大的Canvas实现，当然使用Cavnas就需要使用脚本来编写了，虽然有…"}, {"id": "6963258892193103902", "title": "【不一样的CSS】实现居中布局的 8 种方式", "desc": "【不一样的CSS】实现居中布局的 8 种方式 使用 text-align 属性 定宽块级元素水平居中(方法一)"}, {"id": "6844903705540558856", "title": "写给自己看的display: grid布局教程", "desc": "本文详尽介绍了display:grid布局的各个属性，最大的优点在于所有grid相关属性值的样式表现都是实时渲染的，点击不同的属性值，就可以立即实时看到不同的布局效果，非常直观。同时，很多属性的规则描述要比现有的很多文章介绍的要更详尽，对于初学者一定是一个很不错的网格布局学习教程"}, {"id": "6844903613278470152", "title": "浏览器原理", "desc": "0. 前言 身为前端，打交道最多的就是浏览器和node了，也是我们必须熟悉的。接下来我们讲一下浏览器工作原理和工作过程。从url到页面的过程，......，我们直接来到收到服务器返回内容部分开始。 浏览器引擎：在用户界面和呈现引擎之间传送指令。 渲染引擎：负责显示请求的内容。如…"}, {"id": "6968457812598849566", "title": "‘展开收起’ CSS & JS方案", "desc": "常规业务需求中大前端的工作者应该都遇到过类似需求，固定展示 N 行，句末显示 展开 ，点击展示 全部 ，可进行 收起 操作。 目标 方案 纯CSS方案或纯JS 方案的共享"}, {"id": "6844903918741225479", "title": "使用 CSS Grid Generator来快速使用及学习 Grid 布局", "desc": "大家都说简历没项目写，我就帮大家找了一个项目，还附赠【搭建教程】。 CSS Grid Generator是一个由Sarah Drasner创建的免费工具。它是一个可视化设计工具，允许咱们创建一个基本的 grid 布局，然后就可以使用生成对应的代码，帮助咱们快速布局。 当我正在学…"}, {"id": "6844903974408028167", "title": "前端深入之css篇丨2020年，彻底掌握css动画【animation】", "desc": "说起来css动画是一个很尬的事，一方面因为公司用css动画比较少，另一方面大部分开发者习惯了用JavaScript来做动画，所以就导致了许多程序员比较排斥来学习css动画（至少我是），但是一个不懂css动画的前端工程师不能称之为掌握css3，其实当你真正学习css动画之后，你会…"}, {"id": "6994813468054896647", "title": "快使用CSS变量哼哼哈嘿（var）", "desc": "前端在还原设计稿的时候，一般会定义一些 CSS 变量，因为页面配色规则是固定的，把这些搭配做成变量方便后期快速调整，达到升级 UI 甚至换肤的目的。"}, {"id": "6844903520689192967", "title": "css3实现多个元素依次显示", "desc": "如上图所示，在许多的活动宣传html5中会经常需要用到这样的一个动画效果。特别是快到年底了，也许有同学正在为了公司的活动页面而忙碌，get到这样一个小技能说不定刚好对你有帮助哦。 在css3中，我们使用animation与keyframes结合，可以给元素添加各种各样的动画效果…"}, {"id": "6844903498136420366", "title": "前端编码规范", "desc": "开发灵活，稳定，可维护的 HTML, CSS 和 JavaScript 代码的规范 通过分析github代码库总结出来的工程师代码书写习惯"}, {"id": "6844904038056607752", "title": "移动端适配-Rem 布局篇", "desc": "前面写过一篇移动端适配实践的文章，很长，内容太多，看得容易凌乱，重新写个通熟易懂版的。 比如，对于一个移动端页面，设计师给的视觉稿画布宽 750，视觉稿中的一个黄色区块的尺寸是 702 x 300，并在画板中居中。我们希望在任何一个设备中的呈现比例都与视觉稿中一样，根据布局视口…"}, {"id": "6844903905768275982", "title": "《面试系列》之什么是BFC?", "desc": "面试时常常会被问到有关BFC的问题，虽然网上有关讲解BFC的文章很多，基本大篇理论知识，虽收获不少，但面对面试时，却不知如何回答，不能条理清晰、简单明了的回答出面试官想考察的内容，容易导致回答着把自己都给弄晕了(尤其在紧张的情绪下，非常容易导致越说越“乱”，从而造成面试官觉得你…"}, {"id": "6875576860462448648", "title": "十分钟学会SASS和LESS语法", "desc": "SASS语法要点LESS语法要点对比之处"}, {"id": "6967731870863720456", "title": "Vertical-Align 你应该知道的事情", "desc": "引言 说起vertical-align大家都知道他是用在对相邻的文字和内联元素上，比如常见的将一个图标和相邻的文字居中对齐。但是当你不了解他的机制时候经常会让你抓狂，因此我们一次来攻克这个规则的玄机，"}, {"id": "6844903850713808910", "title": "[译] 如何用 CSS Animations 实现滑动图片展现文字的效果", "desc": "在这篇文章中，我希望能带领大家了解一下 CSS animation property，以及详细地解释我的个人网站中的一个效果：让文字在移动的物体后出现。如果你想要看最后的成果，这里有一个例子。 这里请查看 Jesper Ekstrom 的 Revealing Text Anim…"}, {"id": "6985542925421641742", "title": "《图解CSS》水平垂直居中", "desc": "在面试的过程中，经常会被问到有关CSS的一个问题，那便是居中问题。 首先是如何进行水平居中，然后如何进行垂直居中，最后如何进行水平垂直居中。 接下来，一个问题一个问题研究~ 水平居中，是基于两个或多个"}, {"id": "6844904007794704398", "title": "css水平居中 垂直居中 水平垂直居中", "desc": "https://blog.csdn.net/freshlover/article/details/11579669水平居中行内元素：text-align:center;flex布局：display:f"}, {"id": "6844903648258949127", "title": "让工作与（vue）音乐相伴", "desc": "最近在自学vue,打算自己仿一个项目来实战一下，由于本人很喜欢听歌，所以就选择了网易云音乐，在这与大家分享一下自己所遇到的问题，其中也有些不足之处也希望大家提一些宝贵的意见，互相学习，一起进步。 由于时间有限，只是做了个页面的播放功能，其中用到了网易云音乐的API网易云，有兴趣…"}, {"id": "6844903503891038215", "title": "Vue 指令基本使用大全", "desc": "本文的主要內容是vue 指令基本使用大全如果有对有vue 指令基本使用大全有问题的朋友可以了解下。"}, {"id": "6844903789460193288", "title": "用CSS画一个带阴影的三角形", "desc": "1. 思路 2. 设计 我们再定义一个与容器颜色相同的盒子, 将上半部分盖住就可以啦. 3. 最终解决方案代码"}, {"id": "6900733901765869575", "title": "试着在你的css增加粘稠效果？", "desc": "在元素都有blur属性的情况下，上为父级无contrast（下文称1图），下为父级有contrast（下文称2图），当元素融合时，发现了吗1图也有融合的效果在里面！只是很不清晰，这都是blur（模糊）带来的，而contrast属性便能很好的对抗模糊，已达到2图的效果。"}, {"id": "6928591871992135688", "title": "CSS实现各种Loading效果附带解析", "desc": "两个子元素 div 实现半透明的圆形，设置绝对定位重叠在一起，然后设置相同的动画通过不同的延迟时间交替放大缩小。 在类名为 spinner 元素下有五个 div 实现的长方形元素，设置Y轴的缩放，通过不同的延迟时间来达到依次变化的效果。 两个子元素实现白色的方块，添加动画属性，…"}, {"id": "6967661252428431367", "title": "「HTML+CSS」--自定义加载动画【017】", "desc": "前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签作为表盘的白色部分，并设置 宽度、高度均为96px 边框：5px 白色 solid 效果图如下 步骤2 使用span:"}, {"id": "6844903918267269134", "title": "安利一波无外链的CSS开发策略", "desc": "如果你的项目不需要兼容IE8浏览器，则试试贯彻下面这条CSS开发策略。 也就是不要有任何的http/https请求从CSS文件中发出。 原本外链的图形全部内联。 1. 页面渲染速度更快 素材内联，更少的http/https请求，一定要比很多请求更快。如今这个时代，小文件的性能瓶…"}, {"id": "6977255250545606669", "title": "CSS之Web字体", "desc": "如果我们想使用一种不是预先安装在用户设备上的字体，我们可以下载并使用自定义Web字体！本文介绍几种实现方式..."}, {"id": "6984680566985588767", "title": "CSS实现圆角三角形、多边形", "desc": "实现方法肯定有很多，今天也是有幸看到一篇文章，很不错，所以借鉴下顺便实现下，用css实现有趣的图案，"}, {"id": "6844904135901315085", "title": "我用过的几种移动端适配", "desc": "我最开始接触到的是经理让我把一个PC官网写到它的自适应，即写到是屏幕自适应到宽320的尺寸。我当时用到的是@media screen。 优点 : 无需插件,能够适应各种窗口大小，只需在CSS中添加@media screen属性。 紧接着我开始接触移动端的适配。 这个方法是CSD…"}, {"id": "6922062483196903438", "title": "向阮一峰老师学习Grid布局", "desc": "它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。 Flex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指…"}, {"id": "6974963454574592014", "title": "CSS性能优化", "desc": "1、避免使用@import 在CSS模块化的时候有说到可以通过 @import来实现CSS模块化，但是这种方式是不建议使用的。 因为我们使用@import来引入css文件，会使得页面在加载的时候增加延"}, {"id": "6957916432474570766", "title": "flex学习笔记", "desc": "Flex布局 flex布局是为是提供一种更有效的方式来布置，对齐和项目之间在一个容器中分配空间。 主要是适应所有类型的显示设备和屏幕尺寸，flex容器会扩展项目以填充可用的可用空间，或收缩它们以防止溢"}, {"id": "7004476276291403812", "title": "flex布局", "desc": "flex布局后容器内的子元素可以认为默认是内联块元素 父级属性 属性名：flex-direction/flex-wrap/justify-content/align-items/align-conte"}, {"id": "6967530166520119332", "title": "css 加载阻塞问题", "desc": "css 加载会阻塞 DOM 树的解析渲染吗 ？ css 并不会阻塞 dom 树的解析 css 会阻塞 dom 树的渲染 2. css 加载会阻塞 js 运行吗 ？"}, {"id": "6844903560056930311", "title": "CSS in Typescript", "desc": "使用typescript无非就是因为它的代码约束和提示能力. 以react为例: 正如一开始所说, 使用typescript无非就是因为它的代码约束和提示能力, 那么, 第三种才是我们的最优解. typings-for-css-modules-loader是一个webpack …"}, {"id": "6920038802215927821", "title": "div水平布局两边对齐", "desc": "方法一父容器div使用position:relative;,子div使用position:absolute;定位，注意边距问题htmlcss方法二推荐父容器div使用display:flex;just"}, {"id": "6961671338016636942", "title": "对min-width/height和max-width/height的探索", "desc": "和width/height相比，min-width/height和max-width/height有以下四点不同： 1、min-width/max-width是为流而生的，像width/height这"}, {"id": "6844904152238129165", "title": "有 width 不就够了吗，为什么还要 flex-basis 呢？", "desc": "Flex 布局中，我们知道 flex-basis 属性是用来设置 Flex 项目的初始主轴尺寸（initial main size）的。 但通过实践发现，在 Flex 项目上使用 flex-basis 和 width 属性时，得到的效果是一样的。 等宽列：在 .item 设置 …"}, {"id": "6844903686569721869", "title": "webpack4.0 入门篇 - 构建前端开发的基本环境", "desc": "自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。 构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。 入口(entry point): 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的…"}, {"id": "6967737753983254564", "title": "深入理解CSS中的z-index", "desc": "在 HTML中, 所有的盒模型元素都处于三维坐标系中。元素可以沿着“z 轴”层叠摆放， 当他们相互覆盖时，z-index属性可让你在渲染内容时调整对象分层."}, {"id": "6968993559449960456", "title": "《CSS揭秘》精读笔记（一）背景与边框", "desc": "本文为《CSS揭秘》的背景与边框章节的一个总结，介绍了半透明边框、多重边框、灵活背景定位、边框内圆角、条纹背景、复杂的背景图案、伪随机背景、连续的图像边框的实现~"}, {"id": "6876949988258086926", "title": "[笔记整理]几个有点重要的知识点", "desc": "最近看的东西杂七杂八的。也做了一些笔记，发现有些知识点，面试或者项目开发上可能会遇到的比较多，或者比较重要，就整理出来发篇文章。每个知识点不会很全面，只是针对某一个方面进行稍微深入的记录，或者换一个角度记录。如果有错或者其他建议，欢迎评论区留言 可能很多人都会被问到过，浏览器解…"}, {"id": "6844903589639372807", "title": "拒绝烂大街——Flexbox布局演示站了解一下", "desc": "最近学到Flexbox布局，当时就感觉真是一个布局的神器。终于摆脱了利用各种定位浮动布局的日子。想写文章总结一下吧，发现介绍Flexbox布局类的文章都被写烂了，各种大神写的也是生动形象，单单写一个布局用法感觉除了自己记录方便本地查并没有什么意义，于是就想到了之前在一个视频中看…"}, {"id": "7006978541988347941", "title": "通过一个例子学习css层叠上下文", "desc": "渲染树被绘制到画布上的顺序是根据层叠上下文来描述的。层叠上下文可以包含更多的层叠上下文。从父层叠上下文的角度来看，层叠上下文是原子的；其他层叠上下文中"}, {"id": "6999418363239727111", "title": "CSS为什么这么难学\b？方法很重要！", "desc": "CSS语法这么多、这么杂！很多同学都说CSS似乎不比JavaScript难学，其实可能是方法没掌握对，本文带你了解如何正确学习CSS"}, {"id": "7007221025729413128", "title": "💗中秋💗CSS动画 | 嫦娥奔月", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛。 中秋特制：💗中秋💗CSS动画 | 嫦娥奔月 大家一起来看看前端啦！！！"}, {"id": "7006638197790736421", "title": "CSS中添加元素边框的三种方法", "desc": "在CSS中，有时候边框并不是真正的边框。 在这篇文章中，我们会介绍下面三种添加边框方法的区别 border outline box-shadow 也会讨论每个方法的使用场景。 复习一下CSS的盒模型 "}, {"id": "6981673766178783262", "title": "写给中高级前端关于性能优化的9大策略和6大指标 | 网易四年实践", "desc": "所有的性能优化都围绕着两大层面两小层面实现，核心层面是网络层面和渲染层面，辅助层面是时间层面和体积层面，而辅助层面则充满在核心层面里，笔者通过本文整理出关于前端性能优化的九大策略和六大指标"}, {"id": "7007288677831278628", "title": "使用CSS实现中秋民风民俗-拜月", "desc": "拜月，在我国是一种十分古老的习俗，实际上是源自我国一些地方古人对“月神”的一种崇拜活动。中秋节是上古天象崇拜——敬月习俗的遗痕，祭月作为中秋节重要的祭礼之一，从古代延续至今，逐渐演化为民间的赏月、颂月"}, {"id": "6986453616517185567", "title": "产品经理：能不能让这串数字滚动起来？", "desc": "在很多场景下我们需要展示一串数字，这串数字可以是写死固定在页面上的，也可以是动态刷新实时请求的，还有一些是根据用户的交互产生变化的数字。之前我们网站在数字发生变化时是用 anime.js 做的类似于…"}, {"id": "7000963575573381134", "title": "前端游戏巨制! CSS居然可以做3D游戏了", "desc": "偶然接触到CSS的3D属性, 就萌生了一种做3D游戏的想法. 今天我就来带大家玩一个从未有过的全新3D体验. CSS的3D属性很少,即使只有沙盒, 也有「我的世界」这种神作..."}, {"id": "7005059844164026382", "title": "高级前端工程师如何避免写出屎一样的代码（二）？", "desc": "scss是一个很好用的css预处理器语言 今天给大家分享一些高效实用的书写技巧 如何更优雅高效地使用SCSS 嵌套规范 选择器嵌套 属性嵌套 变量 混合(mixin) 根据功能定义模块，然后在需要使用"}, {"id": "7006228556833357860", "title": "如何用CSS实现一个搜索引擎？", "desc": "欢迎加入人类高质量前端框架研究群，带飞 大家好，我卡颂。 在CSS中，我们通过selector（选择器）选择样式片段： 简而言之，选择器title对应样式color: red; 换个角度，我们也可以说"}, {"id": "6979042510400126983", "title": "产品经理：鸿蒙那个开场动画挺帅的 给咱们页面也整一个呗", "desc": "有一天开会，产品经理问：大家都升鸿蒙系统了么？紧接着一群人答：我们都用iPhone… 当然哈，我自己用的是安卓，不过也不是华为(留下了没钱的泪水)… 听了他这么一问我还以为这是要让我们开发鸿蒙应用了呢"}, {"id": "6999801808637919239", "title": "奇思妙想 CSS 3D 动画 | 仅使用 CSS 能制作出多惊艳的动画？", "desc": "本文将从比较多的方面详细阐述如何利用 CSS 3D 的特性，实现各类有趣、酷炫的动画效果。认真读完，你将会收获到： 了解 CSS 3D 的各种用途 激发你新的灵感，感受动画之美 对于提升 CSS 动画"}, {"id": "7004622232378966046", "title": "彻底理解CSS Flexbox布局，看这一篇就够了！", "desc": "Flexbox布局的概念 Flexbox布局也叫Flex布局，弹性盒子布局。它的目标是提供一个更有效地布局、对齐方式，并且能够使父元素在子元素的大小未知或动态变化情况下仍然能够分配好子元素之间的间"}, {"id": "7007381533195501576", "title": "纯CSS绘制一个美美哒月亮", "desc": "我正在参加中秋创意投稿大赛，详情请看：中秋创意投稿大赛 大佬们各显神通，绘制的月亮和动画一个比一个漂亮，特来学习一下，相关参考链接留在文章底部。 圆月基调 月亮是晚上出现的，所以背景自然是黑色。 画圆"}, {"id": "7001529656188862494", "title": "Console 3000字完整指南，让你不只会用console.log !", "desc": "为啥会突然想起写一篇关于console的文章？笔者接触JS也不少时间了，其实大部分时间都在使用console.log()方法来输出一些或者调试程序，但是log的能力是有限的，并不能满足所有的场景。"}, {"id": "7002049748295221285", "title": "面试官：三栏布局你会几种？", "desc": "三栏布局的六种实现方法 点滴虽小，重在积累 前端工程师在日常开发的过程中，第一步便是布局了，不论是一个网站，还是一个后台的管理系统，我们大多离不开两栏布局，三栏布局，双飞翼布局，单列布局，一栏布局，等"}, {"id": "7007336931092594701", "title": "一起了解一下css新特性@property", "desc": "@property是一个新增的CSS @规则(CSS at-rule)， 它允许开发者显式地定义css自定义属性，并允许进行属性类型检查、设定默认值以及定义该自定义属性是否可以被继承"}, {"id": "7004742284033916941", "title": "HTML+CSS+JS实现 宇宙星球旋转动画特效", "desc": "​  ​HTML+CSS+JS实现 ❤️ 宇宙星球旋转动画特效❤️ ​ css样式： html : js文件在上面截图可以看到 需要引进来。 ​ ​"}, {"id": "7007057795119841311", "title": "悟空打月亮简单动画——中秋快乐", "desc": "参加中秋月亮主题活动：小悟空龟派气功打月亮——一个通过CSS简单实现的小动画，小小创意，重在参与，各位中秋快乐！"}, {"id": "7007775088674078757", "title": "CSS知识总结", "desc": "CSS基础概念 1.元素的显示与隐藏（补充） display: none; 隐藏元素，不再保留原来的位置，会被后面标准流覆盖。 display: block; 将元素转换为块级元素，同时也表示元素可见"}, {"id": "6844903929533169677", "title": "开发效率创新高，只因收下了这波  CSS 操作", "desc": "1. 快速重置表单元素 unset 原始的 button 按钮要重置挺麻烦的。洋洋洒洒的要设置好几个属性，就像下面这样： 文本省略号是非常常见的需求，而省略号展示又通常分为俩种情况折行和不折行。不折行： 通常我们写页面的时候会直接固定好元素的宽高，后面才会在接着设置 paddi…"}, {"id": "6989060618997694501", "title": "CSS中的变量", "desc": "CSS中的变量 定义 在MDN的定义下，CSS变量即自定义属性--*，指的是带有--前缀的属性名，比如--example,表示的是带有值的自定义属性，其可以通过var函数在全文档范围内使用。 语法 v"}, {"id": "6866931666061885453", "title": "使用这种技巧，可以大大地提高前端布局效率", "desc": "在布局中，对于每块功能的 DOM 结构，我们一般使用一个带有 wrapper 类元素把它包裹起来，让代码或者网页内容更易于阅读。为此，我们一般使用wrapper 或者 container。在CSS 中使用wrapper可能有多种方式，这些方式中，有些会带来一些问题。 在本文中，…"}, {"id": "6967177565458923557", "title": "flex: 1 flex: auto flex: none flex: 0到底有什么 区别 ？使用场景？", "desc": "flex: 1 flex: auto flex: none flex: 0到底有什么区别？在什么时候使用？flex简写设置了项目如何增大或缩小以适应在容器中可用的空间。"}, {"id": "6964749108556857351", "title": "【不一样的CSS】实现两列布局的 6 种方式", "desc": "【不一样的CSS】实现两列布局的 6 种方式 所谓的两列布局就是一列定宽(也有可能由子元素决定宽度)，一列自适应的布局。"}, {"id": "6998517223560069157", "title": "CSS的设计模式（三）ITCSS", "desc": "大家好，今天我们要聊的是CSS的设计模式中的ITCSS和ACSS，废话不多说，开干。 CSS的设计模式 ITCSS 分层：七层 与SMA"}, {"id": "6997011443967066143", "title": "【CSS】关于滚动条样式", "desc": "这是我参与8月更文挑战的第16天，活动详情查看：8月更文挑战 关于滚动条 本篇文章主要介绍CSS中滚动条样式的设置"}, {"id": "6931729552003891207", "title": "原生JS实现折叠面板", "desc": "在平常业务开发中产品和UI经常会把文字较多或者一些订单信息设置成卡片然后以折叠的形式展现，目的是为了让首屏的可视空间加大。 实现思路：主要是控制盒子的高度配合溢出隐藏以及添加过渡效果，便可实现折叠面板。 动态高度主要是设置在最外层的盒子，中间两块一个是标题以显示的形式展现，另一…"}, {"id": "6844903891079790600", "title": "CSS Grid网格布局全攻略", "desc": "几乎从我们踏入前端开发这个领域开始，就不停地接触不同的布局技术。从常见的浮动到表格布局，再到如今大行其道的flex布局，css布局技术一直在不断地推陈出新。其中网格布局(grid)作为css3的产物，它更加贴近网页设计师所使用的布局策略，学习并利用好它可以让我们免受很多布局困扰…"}, {"id": "6991734330078789663", "title": "什么是 BFC？", "desc": "BFC 没有明确的定义 MDN 对 BFC 的描述 CSS规范中对 BFC 的描述 张鑫旭对 BFC 的描述 从以上描述中，我们知道了： BFC 的全称是Block Formatting Contex"}, {"id": "6969128755067355143", "title": "如何把css渐变背景玩出花样来", "desc": "不得不说，随着蓝湖，摹客等UI设计共享平台的发展，前端一些css的样式手写的时候也变得生疏起来。相对于选中某个设计图的元素，直接就能复制css代码来说，前端开发自己手写css变得低效。并且前段时间……"}, {"id": "6995788357565415438", "title": "css下的盛世美颜", "desc": "：明天之前我要六张不同分隔的姑姑，不能丑化，不能裁剪，不能加人 ：好的，没问题（内心：我想给你六个巴掌不知可否）"}, {"id": "6992409409032831013", "title": "关于浮动的一点学习！~", "desc": "最近上课又翻车了，讲到浮动的时候本来信誓旦旦想讲两节课内容，结果发现只用了半节课就结束了，归根结底还是对浮动理解不深入。"}, {"id": "6997020797323706404", "title": "实现元素水平垂直居中的 N 种方式 ", "desc": "![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23824fca034d49ffaadbabe2097bd174~tplv-k3u1fbp"}, {"id": "6844904202339090440", "title": "🎉 CSS 基础拾遗 | 整理了数十万字资料，分享给你这些 CSS 干货", "desc": "虽说实际编程水平是才最重要的，但是夯实基础，才能走得更远。仿生狮子最近在准备面试，这个礼拜看了一堆 CSS 相关的内容。整理了数十万字资料后，给你带来这些 CSS 知识点分享。 世界宽广而宏大，我们的知识只是汪洋里的一叶扁舟。组织语言，用博客和书本输出内容，自然受到语言这种媒介…"}, {"id": "7000191882265362462", "title": "【动画消消乐 】一个小清新类型的全局网页过渡动画 075", "desc": "这是我参与8月更文挑战的第25天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用一个div作为包含四个小方块的大容器 其中每个小方块也是用一个div"}, {"id": "6981278222285537317", "title": "这一次，彻底弄懂line-height和vertical-align", "desc": "前言 line-height和vertical-align在 CSS 开发中是比较常用的，但用起来也并不简单，比如在使用中常常会碰到某些特殊字体进行混排或文字对齐图标的情况，也许会发现，无论使用哪种方"}, {"id": "6947634489740754981", "title": " 基于CSS3-perspective的视差滚动", "desc": "如图所示，紫div和蓝div的滚动速度是不同的，比如用户滚动了300px，但蓝div按1:2,只滚动了150px，而紫色div按1:1，滚动了300px。 是不是比起普通网站多了一层酷炫？想知道如何实现吗？接下来我们进入part2。 1.建立一个容器元素，设置 overflow…"}, {"id": "6995567418168836133", "title": "记录css的优化", "desc": "本文记录一些自己对CSS选择器及一些省略的语法,便于以后复习,在项目优化中,基本CSS也算是关键的一部分"}, {"id": "6919452754716934152", "title": "震惊，type=_range_ 居然可以实现评星功能", "desc": "像上面这种评星是一种很常见的需求，我原来是借助JS实现的，没有遇到多大的挑战。 后来张老师在code review我这段代码的时候，顺便提了一嘴type=\"range\"应该可以实现，当时的我想破脑袋也想不出来，脑子是蒙的。 后来我根据文彬的建议，继续优化我的代码，我很开心的和他…"}, {"id": "6996238892231819277", "title": "【动画消消乐】HTML+CSS 自定义加载动画 064（currentColor的妙用！）", "desc": "这是我参与8月更文挑战的第14天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签，设置为 相对定位 宽度、高度均为24px 背景色：cu"}, {"id": "6984683129768247303", "title": "使用纯css实效tab、投诉列表效果（附小程序代码片段）", "desc": "利用radio、checkbox选中的属性选择器，实现tab效果、多选列表功能；使用纯css实现，代码逻辑更简洁。"}, {"id": "6996241953671086117", "title": "CSS Grid 布局(Grid Layout)完全指南 #flight.Archives003", "desc": "A Complete Guide to CSS Grid Layout. 最简约高效的前端教程 //表达最张狂的个性 ---- 忘我思考 proudly by @flightmakers"}, {"id": "6844903713195163655", "title": "用Vue开发仿旅游站webapp项目总结 （上）", "desc": "此文章，仅是做完项目后的个人觉得可以总结下来的操作/思路，接触vue不久的朋友应该会有收获。此项目也才是萌新做的第二个Vue项目，使用了脚手架工具（ vue-cli 2.x 非 3 ），前辈老手们有时间看的话，有写得不好的地方还请多多指导！~ 仅实现项目首页、项目详情页、城市列…"}, {"id": "6989084798262181924", "title": "CSS进行布局-盒模基础点", "desc": "盒模型 每个元素的盒子都有一些决定该元素所占空间及其外观的要素。可以使用 CSS 分别控制各个要素。在默认情况下，宽度和高度仅定义内容区域的尺寸。背景会延伸到边框的后面(个人学习笔记）"}, {"id": "6949195949923106847", "title": "经常问到的CSS BFC 和 IFC 是什么？", "desc": "什么是BFC？什么作用？Block Formatting Context==块盒子布局发生的区域，浮动元素和其他元素交互的区域==浮动定位和清除浮动的时候只会应用于同一个BFC内的元素。浮动不会影响其"}, {"id": "6919683863492952072", "title": "2021年，是时候用mask-image来展示你炫酷的渐变图标了", "desc": "MDN是这样来表述mask-image的。关于它的兼容性，你可以在这里看到Can i use mask-image。 而使用了mask-image之后，上述问题都不复存在。mask-image十分灵活，它支持一个特别炫酷的特性，就是渐变色（本质是背景叠加），它的表现原理类似于P…"}, {"id": "6991070383159902221", "title": "清除浮动", "desc": "清除浮动， 为什么CSS要清除浮动？ 清除浮动的本质： 清除浮动的策略是: 清除浮动的方法："}, {"id": "6919640525129809927", "title": "每天弄懂一个CSS知识点 （各类居中）", "desc": "原理和第一种是差不多的。 设置top:0，left:0，right:0，bottom:0本质目的，是让子盒子四边与父容器间距为0，而子盒子没有明确宽高，自然被拉伸到完全填满父容器了。"}, {"id": "6844904031769329678", "title": "重整旗鼓，2019自结前端面试小册【CSS + HTML】", "desc": "临近2019年的尾声，是不是该为了更好的2020年再战一回呢？ ‘胜败兵家事不期，包羞忍耻是男儿。江东子弟多才俊，卷土重来未可知’，那些在秋招失利的人，难道就心甘情愿放弃吗！ 此文总结2019年以来本人经历以及浏览文章中，较热门的一些面试题，涵盖从CSS到JS再到Vue再到网络…"}, {"id": "6995406270040080391", "title": "浮动以及定位", "desc": "浮动(float) 浮动最典型的应用：可以让掉个块级元素一行内排列显示 网页布局第一准则：多个块级元素纵向排列找准标准流，横行排列找浮动 设置浮动(float)的元素最重要特性： 脱离标准普通流的控制"}, {"id": "6954374661945688101", "title": "有点儿皮的页面滚动效果库", "desc": "前段时间刚给大家推荐了一个强大易用的跨平台 CSS3 动画库 Animate.css，内置了很多常用的 CSS 动画，可以一行代码让页面动起来。 今天再推荐它的堂弟，WOW.js，一个有点儿皮的页面滚"}, {"id": "6945100539822604302", "title": "【CSS】让不进脑子的BFC知识点强行进脑 | 面试系列", "desc": "BFC即Block Formatting Contexts，块级格式上下文。这个概念听起来就是非常不容易进脑子，所以简单拆分一下关键字分别进行理解一下。 块级：顾名思义就是块级元素，比如最常见的div，p等块级标签。 格式化 :通过一个非常简单的例子来说明一下什么是格式化，以下…"}, {"id": "6961801671189987359", "title": "十四.CSS变形（transform）、过渡（transition）、动画（animation）详解", "desc": "通过 CSS3 变形属性，我们能够对元素进行移动、缩放、转动、拉长或拉伸。CSS过渡在一段时间内把css属性的初始值变为另一个值，既`逐渐变化`，不那么突兀。css动画的效果则更加强大，可以自动播放。"}, {"id": "6844903973678219277", "title": "巧用 display: contents 增强页面语义", "desc": "display: contents 是一个比较陌生的属性，虽然属于 display 这个基本上是最常见的 CSS 属性，但是 contents 这个取值基本不会用到。但是它早在 2016 年就已经得到了 Firefox 的支持。 本文将深入一下这个有意思的属性值。 根据 W3C…"}, {"id": "6844904186732085261", "title": "【译】小智在这3年开发中遇到的 CSS 问题及解决方案，有大佬帮他总结好了 ！", "desc": "在浏览器中实现用户界面时，请尽可能减少浏览器带来的差异，以使用户界面具有可预测性。 跟踪所有这些差异很困难，因此，我整理了一些常见问题及其解决方案方便大家查看。 添加一个按钮时，重置它的背景，否则它会在不同的浏览器中看起来不同。在下面的例子中，同样的按钮在 Chrome 和 S…"}, {"id": "6844903895001464846", "title": "详解瀑布流布局的5种实现方式及object-fit", "desc": "最近项目中需要处理与图片相关的布局，不得不说图片这玩意真想要得到完美的展示效果还真是要费些力气。因为图片的尺寸或者比例各不相同。所以想要不同尺寸的图片有好的显示效果，你就需要找到适合的方式。 而且图片往往是不可或缺元素。毕竟一图胜千言，有时候图片能给带来非常好的效果。 比如我们…"}, {"id": "6844903729401954318", "title": "Web全屏模式轻松掌握[局部元素全屏展示]", "desc": "我第一次对网页全屏模式有概念，是那种网页播放视频的全屏播 放的那种。感觉很强，前几个星期有个需求也是关于全屏模式的，接触之后才知道全屏模式并不神秘，是个很容易掌握的技能... 进去看看，玩一下，本文将结合这个demo一起进行讲解。 我把全屏模式封装在一个类里面，在代码中有详细的…"}, {"id": "6844903695012855815", "title": "移动端适配方案-让分辨率来的更猛烈些吧！", "desc": "公司许多的业务都还停留在使用px和弹性布局来进行样式处理的阶段，有些时候是因为视觉要求，有些时候是害怕线上问题，所谓破而后立。 移动端适配方案是一个老生常谈的话题，但是对于不同的项目、不同的业务场景可能会需要不同的适配方案来进行移动端适配，向下兼容的baseline也需要提前订…"}, {"id": "6983661263465218061", "title": "谈谈CSS选择器（下）", "desc": "hello，各位小伙伴们大家好呀，我是白祁。对于前端工程师来说，常用的CSS选择器大家必然不会陌生，但是对于一部分平时不太会用到的选择器，你真的够了解吗？"}, {"id": "6844903855176548365", "title": "grid布局指南", "desc": "Grid Layout是CSS的一种新的布局模型，它具有强大的功能来控制框及其内容的大小和位置。与单轴布局的Flexible Box Layout不同，Grid Layout可以在两个轴（列和行）中对齐内容。 设计一个如图的模块，划分为5个区域：游戏标题，排行榜，分数栏，游戏区…"}, {"id": "6876481514964516877", "title": "解决了困扰了很久的margin的传递问题 原来是bfc ", "desc": "bfc的应用场景在子元素里面加margin会在父元素外边生效margin的传递问题没有触发bfc之前：在父级元素触发了bfc设置了bfc里面的元素在怎么折腾也不会影响到外边独立的个体margin叠加问"}, {"id": "6844903645125804040", "title": "用 Promise + 递归实现灌酒动画", "desc": "世界杯期间公司拉了一批啤酒的赞助，有一个邀请（pian）好友来领（mai）会员灌啤酒的分享活动，达到8瓶酒就可以得一箱。听起来很是诱人，毕竟世界上最惬意的事情莫过于看看球，喝喝酒，撩撩妹（并没有）。 我的任务呢就是把灌酒的这个操作弄的炫酷一点，毕竟我也是个有艺术细菌的人，立马就…"}, {"id": "6968745671490797599", "title": "CSS文字文本样式---CSS外观属性", "desc": "1. color:文本颜色 1.1. 作用： color属性用于定义文本的颜色， 1.2. 其取值方式有如下3种： 表示表示 属性值 预定义的颜色值 red，green，blue，还有我们的御用色 p"}, {"id": "6968743654022381604", "title": "CSS文字文本样式---font字体", "desc": "1. font-size:大小 1.1. 作用： font-size属性用于设置字号 1.2. 单位： 可以使用相对长度单位，也可以使用绝对长度单位。 相对长度单位比较常用，推荐使用像素单位px，绝对"}, {"id": "6844903844720148494", "title": "【Hello CSS】第四章-HTML的标签与语意", "desc": "上一篇分享了CSS的逻辑属性与盒子模型中分享了一些有关设备屏幕的知识以及浏览器视口的坐标构成。本篇则会分享HTML相关的一些知识。 我们在序章的开头就简单的讲解了HTML的诞生历史，本篇不作详细讲解，有兴趣的可以去看wikipedia。 1997年1月14日HTML 3.2作为…"}, {"id": "6844903694509555726", "title": " 你不知道的 CSS - 层叠样式表", "desc": "你或许知道 CSS 是 Cascading Style Sheets（层叠样式表）的缩写。但你不一定真正的理解了其中层叠的含义。 你可能会以为层叠指的是选择器的优先级，但这是不准确的。 用户代理即是指浏览器，https://cs.chromium.org/chromium/sr…"}, {"id": "6844903638507192327", "title": "纯 Css 绘制扇形", "desc": "在此分享如何纯 Css 打造圆环进度条。阅读此文需具备基本数学知识：圆心角、弧度制、三角函数。 此物乃 2 + 1 夹心饼干，蓝绿色部分为果酱。显而易见饼干为两个削成了圆形的 div，我们重点演示果酱是怎么制作的： 如图所示，大扇形由 6 个小扇形构成，每一小扇形占整个圆饼的 …"}, {"id": "6956144043931729950", "title": "如何自动引入css?", "desc": "一、前言 在读layer.js的源码时发现作者用了一个巧妙的方法自动的引入了layer的css,使用者只需要引入layer.js即可，不需要要手动引入css文件。在此也把整个实现方式自己实现了一下，记"}, {"id": "6844903943311458317", "title": "文字处理之空白字符及white space属性详解", "desc": "p标签中插入一段文字，是非常常见的需求，但是仔细分析，这里面有很多需要注意的细节。这篇和下篇博客，主要讲对于文本内容显示的处理，这篇主要介绍空白字符和white-space属性。 浏览器支持4种空白字符：空格、制表符、回车、换行。默认情况下，有以下几点： 插入的是换行符，但是最…"}, {"id": "6857523061424881672", "title": "CSS你不知道的那些事", "desc": "前言    CSS，对于一个web开发者来说再熟悉不过了，即便是后端也能帮前端开发者调调样式。正是因为它的简单易懂，让很多程序员（包括我自己）觉得不用去花时间系统学习。记得有一次在项目中，按照UI设计"}, {"id": "6844903824503603208", "title": "（04）CSS 值和单位 | CSS", "desc": "前言： 本篇也是一篇纯基础、纯理论文章，但重要性毋庸置疑。 在利用 CSS 能做的几乎所有工作中，其基础都是“单位”，这是影响所有属性的“颜色”、“距离”和“大小”的一种元素。如果理解了本篇介绍的相关知识，你就能更快地学习和使用 CSS 的余下内容。 对于“颜色”的学习，让我们…"}, {"id": "6844903757705117709", "title": "组织css代码", "desc": "本文主要描述的组织css的问题，文章内容整理自《前端架构设计》的读书笔记。 上面这样写样式有很大的问题，主要是我们在样式书写时默认的继承到了之前的样式，但在特殊化的样式时，为了让自己的样式生效，又要新写样式进行覆盖。 在之前的章节中，我们讲到了css不同的模块化方案，那么对于上…"}, {"id": "6844903550493917191", "title": "深入CSS优先级", "desc": "现在越来越多的CSS框架，比如Bootstrap，flat UI等等。当我们使用这些UI框架时，由于审美不一样或某些爱好，我们或多或少会去修改一些样式，当然，直接修改源文件是一个方法，但这是一个笨方法，并不推荐。这时，我们就需要自己写一些样式去覆盖，有时你会发现无效或只是一部分…"}, {"id": "6901327897923944461", "title": "【每日一问】如何通过css伸缩文字？", "desc": "此时，如果你需要缩放的文字只有一行，并且整行文字都是缩放文字时。我们的缩放之旅也告一段落，我们只要按照文字的比例，调整x、y轴的缩放比即可。 🤔我们发现了一丝丝的不对。。。这个缩放的文字架在了其它文字上！！ 接着通过设置transform-orgin在y轴上的偏移量为字体的两…"}, {"id": "6933493396094844935", "title": "熬夜整理了一万多字的line-height总结,你还看不懂那我真的要跪了!", "desc": "注意：line-height属性不允许使用负值。 那么在了解行高之前,我们就必须要先掌握这几个概念: 顶线、中线、基线、底线、x-height、ex、内联盒模型、行距等.. 就是因为不同的字体在行元素中的位置是不一样的!中线位置也不一样，所以说对齐方式也不一样。 ex 在css…"}, {"id": "6844903801145524238", "title": "WebGL 3D 入门与实践 --- 坐标系变换 ：基本变换原理与算法实现", "desc": "上一节我们讲了 WebGL 坐标系的分类以及它们之间的转换方式，本节开始详细介绍坐标系基本变换的算法实现，图形学中实现变换的主要数学工具是矩阵，所以在讲解坐标系变换之前，我们先温习一下矩阵。 所使用的向量是行向量还是列向量。 如果是行向量，按照数学领域中矩阵相乘的规则，向量要放…"}, {"id": "6844904117681258510", "title": "BFC 解说，也许是目前为止最接地气的一篇", "desc": "为什么要写这篇文章，因为网上一搜你会发现，除了雷同，更多的是乏味，难懂，概念满天飞。我不否认这样写的好处，但也请允许我为 BFC 添盐加醋，即使依旧乏味，好歹也算一出。 这里分成三分部来讲解 BFC 。BFC 不是什么遥远的东西，只要你做前端，它一直都在你身旁，只是很多时候，你…"}, {"id": "6984971102397136910", "title": "背景尺寸", "desc": "背景尺寸 background-size属性用来设置背景图片的尺寸，css3新增属性 兼容到IE9； background-size:10px (宽度） 10px (高度）； 参数值也可以是百分数来设"}, {"id": "6844903506801852429", "title": "影子节点ShadowDOM", "desc": "上面这是最简单的视屏标签，里面有默认的音量等按键。在源代码中根本没有一点痕迹。那这些节点是从哪里来的？ 简而言之，Shadow DOM 是一个 HTML 的新规范，其允许开发者封装HTML组件（类似vue组件，将html，css，js独立部分提取）。 非常的简单好用，但是这些东…"}, {"id": "7000553821319462949", "title": "【动画消消乐｜CSS】 单span标签实现自定义简易过渡动画 076", "desc": "这是我参与8月更文挑战的第26天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 原理详解 步骤1 使用span标签 设置为 相对定位 宽度、高度均为5px 背景色：白色 "}, {"id": "6991656063162384415", "title": "Day 02 CSS加javascript实现衣服搭配效果 | 8月更文挑战", "desc": "绘制衣架区域 html code css code 绘制衣服条纹区域 html code css code 添加动态效果 js code 主要涉及css说明 1、径向渐变 radial-gradien"}, {"id": "6984365925168316447", "title": "CSS 浮动布局放弃float，拥抱flex（详解）", "desc": "CSS 浮动布局放弃float，拥抱flex（详解） 博客说明 说明 在写前端代码的时候，写一排的float:left, float: right，最后再来个clear:both;有的时候一旦忘记清除"}, {"id": "6999630189319684127", "title": "CSS｜图片碎片消失效果2", "desc": "图像碎片效果 上一篇使用了CSS遮罩(mask)和自定义属性(@property)创建了一个图像碎片效果，这次使用一个新的API：CSS Painting API来实现同样的效果。 首先我们了解一下什"}, {"id": "6998097386983653389", "title": "纯CSS绘制弯曲曲线图形", "desc": "这是我参与8月更文挑战的第19天，活动详情查看：8月更文挑战 问题起源 就在昨天，我们通过文章纯CSS绘制五角星简单介绍了CSS中的一个截取属性值：clip-path可以按照指定的方式截取指定形状的图"}, {"id": "6991366638612250637", "title": "CSS BEM 命名规范 | 8月更文挑战", "desc": "BEM 是一种前端项目开发的方法学，由 Yandex 公司提出。 BEM 的名称来源于该方法学的三个组成部分的英文首字母，分别是块（Block）、元素（Element）和修饰符（Modifier）。 "}, {"id": "6992928791706206238", "title": "一个初级前端结合css、div谈一谈屏幕尺寸、分辨率、缩放（显示文本、应用等项目的大小）概念", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 写在前面： 本章你将能学到： 结合css、div布局对屏幕尺寸、分辨率、缩放有更深一层的理解。 这几个小知识点，也许我们在日常中，经常有所耳"}, {"id": "6844903610019512328", "title": "浅谈 2018 移动端跨平台开发方案", "desc": "“一次编写，到处运行”，这是 SUN 公司用来展示 Java 语言跨平台特性的 slogan，它意味着 Java 可以在任何平台上进行开发，编译后就可以在任何安装有 Java 虚拟机（JVM）的设备上运行。 最近这两年，在移动端各种跨平台的开发方案如雨后春笋般涌现，一方面是因为…"}, {"id": "6994677078033448968", "title": "【动画消消乐】HTML+CSS 自定义加载动画 060", "desc": "这是我参与8月更文挑战的第10天，活动详情查看：8月更文挑战 前言 效果展示 Demo代码 HTML CSS 涉及知识点（需了解） transform属性中的 translate：定义 2D 转换 r"}, {"id": "6990329776862920734", "title": "两种方式实现css取消页面鼠标双击选中文字或单击拖动选中文字的效果", "desc": "问题描述 我们知道浏览器页面上的文字正常情况下我们是可以双击选中、或者单击鼠标横向拖动也能选中的，选中以后可以右击出现面板然后去复制什么的。但是有的时候，这种效果我们并不想要的，比如用户点快了的时候，"}, {"id": "6934537458436554766", "title": "超简易图片放大镜", "desc": "大家好，我是 Steven。 我们试试用最少的 JavaScript，尽量使用 CSS 以及最简单的 HTML 结构去实现，那我们就开始啦。 打开 CodePen 编辑器，在 HTML 的部份加入一个 &#x3C;div>，id 名为 image。 去到 CSS 的部份，新增 …"}, {"id": "6993620457614213133", "title": "CSS选择符的使用", "desc": "CSS选择符常用的有这几个，后代选择符空格( )，子选择符箭头(>)，相邻兄弟选择符加号(+)，随后兄弟选择符波浪号(~)，本文主要介绍它们的区别和作用。"}, {"id": "6844904070679887886", "title": "面试官：CSS如何实现固定宽高比？", "desc": "对于这个问题，你可能还没有过相关需求，或者还没有在面试的时候被问到过，但是歪马相信你终将有需要。 这个问题说起来也是老生常谈，歪马今天再次提起也是希望有朝一日当你被问到的时候，能够答得漂亮。 听到这个的时候你一定不要盲目的说出答案。因为这么问的话，题目并不明确。所以你可以帮面试…"}, {"id": "6992480888357388325", "title": "css opacity 的妙用｜ 8月更文挑战", "desc": "最近项目中遇到这样一个需求：实现鼠标移入，显示操作图标 这是一个树形控件，用过vue的小伙伴们第一想到的可能就是v-show/v-if，"}, {"id": "7000325965024854047", "title": "H5活动开发必备之动效实践", "desc": "本文为网易LOFTER近期开发的一款H5动效活动的相关技术总结和分享。旨在分享前端常见的H5动效方案原理及使用场景，以及一些H5活动开发的适配和优化技巧。"}, {"id": "6844903961812549646", "title": "图解直到今天也没什么人知道的原生dialog标签😑", "desc": "在html5中，新增了很多语义化的标签。如footer、header之类的，今天的主角是dialog标签😂 顾名思义，就是用来定义对话框的。目前只有Chrome和Safari支持该标签，所以用的不多，不过确实挺好用的🤞 别担心，有官方的polyfill。 1. 基础的用法 …"}, {"id": "6844903870045356040", "title": "用 CSS 写一个商城卡券需要几步", "desc": "交给测试后，我们来分析下 CSS 卡券。 background是可以设置多个图片的，遵循background: [background-color] [background-image] [background-repeat] [background-attachment] […"}, {"id": "6844903897413189640", "title": "[译] CSS 开发必知必会的 16 个调试工具技巧", "desc": "大多数开发者基本都使用浏览器的开发者工具调试前端，但即使用了好几年 Chrome 的开发者工具，我仍然会遇到从未见过的技巧和功能。 在本文中，我写了许多在开发者工具中与 CSS 相关的功能和技巧，我认为它们将把你的 CSS 开发水平提升至一个新的台阶。其中一些技巧不仅仅针对 C…"}, {"id": "6999432943202467853", "title": "CSS中的一些知识点", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 css盒模型 就是用来装页面上的元素的矩形区域。CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。 box-sizing(有3个值"}, {"id": "6972515785268789284", "title": "CSS |  纯css画三角形的思路解析", "desc": "这是我参与更文挑战的第3天，活动详情查看 更文挑战 关于三角形的实现。在之前的文章【CSS | 4句CSS送你一个小月牙】中，汇总了很多经常用到的css形状，本篇文章主要是分析一下三角形系列的实现思路"}, {"id": "6982396940717654047", "title": "你不知道的CSS骚操作", "desc": "你不知道的CSS骚操作 本文介绍有关css的一些技巧以及一些比较另类的用法，有些情景完全可以避开使用Javascript，单纯的css就可以完美实现"}, {"id": "6969483139701800974", "title": "纯 css 实现翻转（flip）效果", "desc": "这是我参与更文挑战的第3天，活动详情查看： 更文挑战 实现效果 触发 hover 时，卡片翻转，实现正反切换 关键 动画效果：添加 transition 过度 正反重叠：最外层相对定位，内部正反两面绝"}, {"id": "6844904145766334472", "title": "CSS 中重要的层叠概念", "desc": "1. 层叠上下文 (Stacking Context) 层叠上下文 (堆叠上下文, Stacking Context)，是HTML中一个三维的概念。在CSS2.1规范中，每个元素的位置是三维的，当元素发生层叠，这时它可能覆盖了其他元素或者被其他元素覆盖；排在z轴越靠上的位置，距…"}, {"id": "6975449974670622757", "title": "3分钟快速学习CSS层叠（精简版）🧜‍♂️", "desc": "又一次重温了css层叠，发现其实它很简单，只是自己没有系统的去看，去理解。现在我又重新去写了一下。😊"}, {"id": "6844904024542543880", "title": "《前端实战总结》之使用纯css实现网站换肤和焦点图切换动画", "desc": "今天我们来继续复盘一些工作中常用的css技巧和知识,以便我们可以更加优雅的用css实现富有动感的网站. 以上几个方案都可以实现一定程度上的换肤效果,但是如果是一些基础性的换肤,比如网站的背景样式,某个按钮的样式,某块内容区域的样式等等这种局部的换肤,我们能不能直接用css来实现…"}, {"id": "6844903881948839943", "title": "【前端词典】几个有益的 CSS 小知识", "desc": "今天偷个懒，不长篇大论，分享几个你可能不知道的 CSS 小知识。 答案你们应该是知道的。 样式选择器中间的空格是什么？它的名字是 —— 后代选择器。 耗能与否取决于项目的体积，但不建议使用没有意义的后代选择器。例如： 因为浏览器首先会找到所有 p 标签，然后再向上查找包含 cl…"}, {"id": "6944761771152375815", "title": "从box-shadow属性望见前端未来", "desc": "从MDN对于box-shadow的描述，则认为通常的 box-shadow属性有，阴影效果在X&#x26;Y轴的偏移量，其次是模糊度半径、扩散度半径和阴影颜色。 轻拟物，在于一个“轻”字，区别于完全的拟物，是一种轻量化的趋近真实物体的视觉表达。 毋庸置疑，轻拟物风格，给用户传达…"}, {"id": "6844903501953237006", "title": "浏览器渲染过程与性能优化", "desc": "大家都知道万维网的应用层使用了HTTP协议，并且用浏览器作为入口访问网络上的资源。用户在使用浏览器访问一个网站时需要先通过HTTP协议向服务器发送请求，之后服务器返回HTML文件与响应信息。这时，浏览器会根据HTML文件来进行解析与渲染（该阶段还包括向服务器请求非内联的CSS文…"}, {"id": "6954306568414298142", "title": "技术周报 · 2021-04-23", "desc": "小编推荐 和工业聚一起聊聊技术与写作 Node.js 16.0.0 正式发布 WeGame 暗色模式实践总结 深入学习 通过源码分析 nodejs 原理 Web 前端 WebRTC 攻略(三) 传输协"}, {"id": "6994734659405873189", "title": "CSS 动画", "desc": "动画 定义 由许多静止的画面（帧） 以一定的速度（如每秒30张）连续播放时 肉眼因视觉残象产生错觉 而误以为是活动的画面 概念 帧：每个静止的画面都叫做帧 播放速度：每秒24帧（影视）或者每秒30帧（"}, {"id": "6995806256514465805", "title": "浏览器滚动条导致的页面闪烁问题", "desc": "浏览器滚动条出现导致的页面闪烁问题。 1. 添加滚动条宽度的左内边距 2. 保持滚动条始终展示 3. 滚动条消失时适当增加margin-right大小 4. 使用display:none;隐藏滚动条"}, {"id": "6844903693020758029", "title": "rem, vw, 还是...? 各凭本事的移动端适配方案", "desc": "2018年最后的法定假期都已经结束了，我相信大部分正在进行或曾经进行过移动端页面开发的同学都或多或少的了解过使用rem进行移动端页面适配的方案以及使用vw的方案，(没了解过的同学可以参见大漠老师的这两篇文章 使用Flexible实现手淘H5页面的终端适配和再聊移动端页面的适配)…"}, {"id": "6844903519636422664", "title": "禁止蒙层底部页面跟随滚动", "desc": "弹窗是一种常见的交互方式，而蒙层是弹窗必不可少的元素，用于隔断页面与弹窗区块，暂时阻断页面的交互。但是，在蒙层元素中滑动的时候，滑到内容的尽头时，再继续滑动，蒙层底部的页面会开始滚动，显然这不是我们想要的效果，因此需要阻止这种行为。 关闭蒙层时，移除以上样式。 简单方便，只需添…"}, {"id": "6844903687173701645", "title": "[译] 什么是模块化 CSS？", "desc": "模块化 CSS 是一组编写代码的原则，基于这个原则编写的代码具有高性能和可维护性。它起源于雅虎和 Yandex 的开发人员，目的是迎接维护大型代码库带来的挑战。有些规则在提出之初稍有争议，但后来被认为是最佳实践。 （偷偷告诉你：如果你对这篇文章的篇幅感到不知所措，观看视频可能更…"}, {"id": "6854573213230317576", "title": "【CSS系列】你可能不知道的Animation动画技巧与细节", "desc": "在大多数需求中，css3的 transition / animation 都能满足我们的需求，并且相对于js实现，可以大大提升我们的开发效率，降低开发成本。 它的值是一个数列，数与数之间用逗号或者空白隔开，指定短划线(50px)和缺口(50px)的长度。 设置 stroke-d…"}, {"id": "6999275803523416071", "title": "CSS 基础+布局（新手友好）", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 下雨天，标签和CSS在一起布局更配哦~ ​ CSS 基础 盒子模型 首先说到布局，不得不提的就是盒子模型，盒子的话顾名思义就是我们放东西的"}, {"id": "6993991820103385125", "title": "CSS回顾（三）", "desc": "CSS知识回顾（三） css布局，响应式相关知识 注：这一篇我引人了自己做的demo、可是不能在掘金中看到，详情可以参考我的个人博客： http://www.11qiaolj.github.io 传统"}, {"id": "6844904164435181581", "title": "可食用的「css布局干货」,纯Html示例，可调试 | 水平、垂直、多列", "desc": "本篇文章仅整理常用的水平居中、垂直居中及多列等布局，不求全部涉及，只考虑常用并且可以顺手拿来使用。若有其他精妙的方案，欢迎在评论中指出，我会及时补充至文档内。 本文中所有示例均为 html 渲染构成，没有图片及外链demo，所以可以直接选中示例在控制台调试，推荐自己动手试试文章…"}, {"id": "6844903614280892429", "title": "进一步了解flex布局—来实现这些常见布局吧", "desc": "flex布局具有便捷、灵活的特点，熟练的运用flex布局能解决大部分布局问题，这里对一些常用布局场景做一些总结。 flex:0 0 25%,相当于flex-basis:25%，使得每一个列表项的宽度占外层容器(本例中的ul元素)的25%，因此每行最多能够排开四个列表项。 各大U…"}, {"id": "6844903745248034829", "title": "CSS实现镂空效果", "desc": "每一层渐变都可被当做一张背景图，也就是说每一层渐变都可以指定其position、size、repeat。玩过PS的的同学应该知道图层的概念，咱们的背景图层叠原理也类似（当然，渐变也可以当背景图），控制渐变的大小，哪里需要镂空，以及需要显示的位置、是否平铺，就可以实现大多数场景下…"}, {"id": "6991364380021489701", "title": "【基础】 CSS自定义对勾，选中和未选中状态 | 8月更文挑战", "desc": "复选框未选中时灰色小圆环，选中时显示有颜色的圆环以及圆环中的小对勾，利用伪类选择器，纯css开发制作，拿走即用。"}, {"id": "7001673547170512910", "title": "CSS 图片样式", "desc": "介绍图片大小、边框、图片对齐、文字环绕图片的方式，并给出使用 vertical-align 使图片垂直对齐的方式。"}, {"id": "6844903871995707405", "title": "Web 仿 App 动画竟然引出了“性能杀手”", "desc": "在我参与开发的对话小说项目过程中，我们发现创意类的活动对拉升转化数据很有帮助。经过调研，这款对话式小说产品的用户群体大多数都是比较年轻的 90-95 后，所以最后结论是希望以目前业界年轻化 APP 流行的交互形式 —— 《滑卡片》对推书活动做一次改版，也同时希望这个页面能和产品…"}, {"id": "7002412372505657381", "title": "CSS布局基础", "desc": "前言 本文的阅读对象主要是针对CSS零基础的设计与测试人员，帮助学习者快速了解一些CSS基础布局，有助于与开发进行良好的协作与沟通。"}, {"id": "7006491264111607845", "title": "CSS预处理器 之 sass", "desc": "sass的常用命令 后续持续将补充。。。 @mixin 循环指令： @for @while @each"}, {"id": "6966387853483835429", "title": "用5个示例理解 CSS 变量", "desc": "随着 Web应用程序变得越来越大，CSS变得越来越大，越来越冗长，而且混乱不堪。 在良好的上下文中使用CSS变量，可为我们提供重用和轻松更改重复出现的CSS属性的机制。"}, {"id": "6844903688469741576", "title": "CSS实现footer“吸底”效果", "desc": "一是无论内容的多少，我们都希望使按钮，固定于可视窗口的底部，且内容区是可滚动的。 二是当内容区的内容较少时，页脚区不是随着内容区排布，而是始终显示在屏幕的最下方；当内容区的内容较多时，页脚能随着内容区的增高而撑开，始终显示在页面的最底部。 谈到“吸底”效果的实现，大家可能较多了…"}, {"id": "6991037465624576014", "title": "CSS 水平居中、垂直居中、水平垂直居中", "desc": "1、水平居中 1.1 行内元素水平居中 1.2 块级元素水平居中 2、垂直居中 2.1单行文本垂直居中 2.2多行文本垂直居中 2.3 块级元素水平垂直居中"}, {"id": "6844903653795446792", "title": "前端er怎样操作剪切复制以及禁止复制+破解等", "desc": "有时候我们经常会碰到这些场景：玩掘金、知乎的时候复制一段文字，总是会在内容后面加上一些版权信息，以及像小说网站等都有禁止选中，禁止复制这种功能，还有点击自动复制账号的功能。 我也经常遇到这些场景，有时候会去想这后面到底是怎么做，周末趁着有空去研究了一下，然后发现这些都跟操作剪贴…"}, {"id": "6866789805615742989", "title": "CSS进阶知识扫盲", "desc": "CSS其实远比我们想象的更复杂、他的任意一个点拿出来可能都可以写出一篇篇幅不小的文章，往往就能见微知著。所以CSS不仅仅局限于他的名字，层叠样式表，更像是一个世界，一个网页中必不可少的重要组成。 围绕着上面的CSS体系，当然上面的图可能还不够全面，但是也能说明CSS的主要构成了…"}, {"id": "6991147394960359455", "title": "【css基础】居中对齐｜8月更文挑战", "desc": "我们在学习 CSS 时，一定会遇到各种块元素和行内元素的居中对齐问题，但大部分的 CSS 基础教程都没有对居中对齐进行过系统的归纳总结，所以今天笔者就带大家一起来系统地归纳总结一下"}, {"id": "6844904186572701710", "title": "19个前端开发人员的救生工具", "desc": "在本文中，我为前端Web开发人员汇总了30种顶级工具，从代码编辑器和代码游乐场到CSS生成器，JS库等等。 你是否曾经尝试记住如何声明渐变，文本阴影，Flexbox或Grid的CSS属性，仅举几例？不容易。除非你一再使用某些CSS功能及其属性，否则很难记住所有这些功能。但是，即…"}, {"id": "7002104220664987685", "title": "【动画消消乐｜CSS】080.单span标签实现自定义简易过渡动画", "desc": "这是我参与8月更文挑战的第30天，活动详情查看：8月更文挑战 前言 效果展示 难度 🌟 Demo代码 HTML CSS 原理详解 步骤1 使用一个span标签 设置为 相对定位 宽度为100% 高度为"}, {"id": "6996191082690117646", "title": "CSS控制html元素、文字的各种居中", "desc": "这是我参与8月更文挑战的第1天，活动详情查看：8月更文挑战 CSS水平居中 1. 居中行内元素或者行内块元素（水平居中文字）。 可以对其父元素添加text-align属性：center。也可以将tex"}, {"id": "7006496560842276895", "title": "css background属性", "desc": "css的background属性 第一种写法 [background-image background-position / background-size] 第二种写法 在scss中定义混入和使用混"}, {"id": "6993332511149391908", "title": "less学习指南第三期【重要】 | 混合和继承", "desc": "LESS是一个CSS预处理器，它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，"}, {"id": "7001408501675196423", "title": "使用Less实现变量样式", "desc": "今天在根据UI进行页面还原时遇到需要很多微调的地方 margin padding 某个数量的值，有10px 8px 20px 这些，往往为了微调一个样式写一个样式修比较麻烦，通过调研发现直接引入les"}, {"id": "6844903630655471624", "title": "响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）", "desc": "简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。 在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽…"}, {"id": "6989421143341924360", "title": "模仿小米官方的轮播图", "desc": "有轮播需求的小伙伴可以参考下。直接上干货 HTML部分 CSS部分 JS部分。小米官网轮播，小米官网轮播图，小米官网轮播图"}, {"id": "6844903736289001485", "title": "【译】22个必备的CSS小技巧", "desc": "不久之前Firefox和Safari浏览器已经开始支持类似Photoshop的混合模式，但是在Chrome和Opera浏览器中需要添加前缀。举个栗子： 现在，你甚至可以在边框中使用渐变。 具体的例子可以看这里，或者看这里使用的是background-clip和backgroun…"}, {"id": "6844903634862342158", "title": "从零开始学前端动画 —— 简单的特效登录", "desc": "最近忽然对canvas动画感兴趣，然后就心血来潮的看了一些文章，事先声明，部分原创，我只是代码的搬运工。我先上一下截图，然后再说下我的想法。 还是那句话，我只是代码的搬运工，首先是雪花飘落的场景。参考文章点击这里 —— canvas实现雪花飘落,文章上来就贴了代码，直接就能用，…"}, {"id": "6862274734373994509", "title": "深色模式在 Web 端的适配方案", "desc": "随着 Mac OS、iOS 系统发布了深色外观，手机 APP 的深色模式开始出现在了大众视野，越来越多的原生 APP 为增强体验去适配 Dark Mode 深色模式。 起点读书 APP 也在近期进行了适配，包括原生页面以及 内嵌Web 端的页面 。那我们应该如何适配，才能满足既…"}, {"id": "6844903798436003854", "title": "记一次移动端使用 rem 的兼容性问题", "desc": "更新：感谢各位评论区大佬提醒，我发现关于 rem 布局思路的用法最初是由手淘团队的 flexible 方案引入的。本文大家随便看不看都行，真正有技术含量的内容一定请看：使用Flexible实现手淘H5页面的终端适配，再聊移动端页面的适配。 在移动端使用 rem 进行切图适配应该…"}, {"id": "6994811991185424398", "title": "css 布局规则 (盒模型，文档流，BFC)", "desc": "弄明白 css 布局规则，理论上我们就可以随心所欲的布局了 css 盒模型 从 css 角度可以把 HTML 元素看成是一个个盒子的排"}, {"id": "6992121370666762271", "title": "css模块化实现教程", "desc": "css模块化实现教程 大家都知道，CSS的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。 我们想要做css Module(模块化)呢，原理就是使用一个唯一的class的名字，不会与其他选择"}, {"id": "6999435051440177183", "title": "基础知识常被5：CSS样式表属性最佳书写顺序是怎样的？", "desc": "(基础知识常被5：CSS样式表属性最佳书写顺序是怎样的？) 自己在写demo的时候不用考虑代码的优化，能测试出效果就可以了，但是在实际工作中，企业工作中，必须提高性能，优化代码，让客户拥有一个极高的体"}, {"id": "6967222005129019400", "title": "使用vw+rem做移动端适配", "desc": "375px = 100vw --> 1vw = 3.75px px -> vw = 100px/3.75px = 26.666vw"}, {"id": "6844903649978630158", "title": "React 工程的 VS Code 插件及配置", "desc": "在安装时推荐勾选如图两个选项，这样右键文件夹或文件就可以直接使用 VS Code 打开了，非常方便。 如图点击左侧 EXTENSION 菜单，点击 ... 按钮，选择“从 VSIX 安装...” 即可安装。 感觉自带的代码格式化功能基本够用了，就没安装 Prettier 和 B…"}, {"id": "6953547414150053925", "title": "Styled Components和Tailwind配置以及使用方法", "desc": "这是一篇主要介绍Tailwind配置以及使用方法的文章，本文总结了Tailwind类名的十大命名规律，希望能进一步减轻初学者的记忆负担，同时引入了styled Components结合使用。 Part"}, {"id": "6908713053789896712", "title": "自动增长Textareas的最干净技巧", "desc": "想法是使 &#x3C;textarea> 更像 &#x3C;div>，因此它的高度可以扩展以包含当前值。这几乎是奇怪的，没有一个简单的原生解决方案，不是吗？ 现在我得到了一个非常好的原生解决方案。 诀窍是，你要准确地将 &#x3C;textarea> 的内容复制到一个可以自动展…"}, {"id": "6909393635557507086", "title": "探究 position-sticky 失效问题", "desc": "CSS 的 position 值中，有一个非常有用的值 -- position: sticky，通常会被用于各种吸顶，吸底，吸边的效果中。 如果你对 sticky 还不太熟悉，可以先看看我的这篇文章：使用 position:sticky 实现粘性布局，当然，这篇文章里面有稍微探…"}, {"id": "6844903715023880199", "title": "一次性搞定 Iconfont", "desc": "可以方便地将任何 CSS 效果应用于它们。 因为它们是矢量图形，所以它们是可伸缩的。这意味着我们可以在不降低质量的情况下伸缩它们。 我们只需要发送一个或少量 HTTP 请求来加载它们，而不是像图片，可能需要多个 HTTP 请求。 由于尺寸小，它们加载速度快。 它们在所有浏览器中…"}, {"id": "6999426456661000199", "title": "CSS 基础（新手友好）", "desc": "这是我参与8月更文挑战的第23天，活动详情查看：8月更文挑战 CSS 概念 首先，什么是CSS？cascading style sheets    汉译层叠样式表，WEB标准中的表现标准语言,表现标准"}, {"id": "6979763969217003550", "title": "CSS基础复习第五天", "desc": "这是我参与更文挑战的第30天，活动详情查看：更文挑战 background background-color 背景颜色。 除了之前学习三种的色值表示法，还可以使用rgba()透明度 backgroun"}, {"id": "6844903661693304845", "title": "从红芯事件聊聊浏览器内核（一）", "desc": "正巧我多年一直在收集各种浏览器的资料和趣闻，就让我们来看下浏览器内核到底是什么，以及难度如何。 在IT界的洪荒年代（1992年），人们在互联网上还是只能看黑白屏幕上一行又一行的字符的时候，伊利诺斯州大学（NCSA）的马克·安德森 就突发奇想的搞出一个名为 Mosaic 的浏览器…"}, {"id": "7001470686346608676", "title": "checkbox默认样式修改，自定义样式加scoped不生效", "desc": "checkbox默认样式修改，自定义样式加scoped不生效 <checkbox-group></checkbox-group>"}, {"id": "6988386005128577038", "title": "左侧宽度固定，右侧自适应的两栏布局", "desc": "HTML结构和基本样式 HTML的结构为最外层一个div，内层两个div分别代表左右两个div。 给最外层div加上边框。左侧div宽度固定为200px。 之后的所有样式都在这个样式的基础上进行修改。"}, {"id": "6844903506021728263", "title": "Rem布局的原理解析", "desc": "Rem布局的原理解析"}, {"id": "7004991088071032868", "title": "CSS浮动笔记", "desc": "DOM文档排版的特点 块级元素只能垂直排版，行内元素只能水平排版。 块级元素可以设置宽高属性，行内元素没有宽高属性，只能被内部元素撑起来，水平放置不下时会换行继续排版。 CSS 浮动 浮动就是让文档脱"}, {"id": "6844903544760336398", "title": "Tree-Shaking性能优化实践 - 实践篇", "desc": "三. tree-shaking实践 webpack2 发布，宣布支持tree-shaking，webpack 3发布，支持作用域提升，生成的bundle文件更小。 再没有升级webpack之前，增幻想我们的性能又要大幅提升了，对升级充满了期待。实际上事实是这样的 升级完之后，b…"}, {"id": "7003532765194878983", "title": "前端-HTML和css八股文篇", "desc": "h5-css3常见面试题.准备找实习了,整理一下八股文,基本上比较常见的都收录了,都是个人理解和看一些资料结合的,有错误希望指出."}, {"id": "6993715359480021005", "title": "CSS面试手册", "desc": "CSS面试手册，帮助各位读者，过五关斩六将，斩获大厂Offer！一起学习CSS，一起巩固CSS知识点。"}, {"id": "6844904116141948936", "title": "深度解析 CSS Flexbox 布局 - 2020年最新版", "desc": "在 CSS flexbox 布局出现以前，如果要控制 HTML 元素的布局，要用到很多种奇葩的方式。在水平方向上得用float控制左右对齐，稍一不注意，就会有浮动的元素飞来飞去~。在垂直方向上就更是百家争鸣了：要么手动计算高度然后算出中心点，要么用 line-height 和 …"}, {"id": "7000567864813944862", "title": "CSS备忘录（四）font & background", "desc": "一、字体 font 1.字体（font） 2.图标字体（iconfont） 3.使用阿里字体库iconfont"}, {"id": "6999177416547516424", "title": "【CSS】过渡、转换与动画", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 本篇文章主要介绍CSS3中的过渡、2D转换、3D转换、动画属性的一些使用方法"}, {"id": "6865193653603434504", "title": "思路分享：如何尝试创建自己的CSS框架？", "desc": "在2019年，我创建了一个CSS框架并将其命名为Rotala.css。经过一些重构和修改，我终于在2020年发布了 \"玩具 \"框架。但它仍在原型设计中，因为我认为我的解决方案还不优雅。 我构建此框架的原因很简单：我自己想要一个CSS框架。 我知道从头开始构建它会花费很多时间。因…"}, {"id": "6850037265461149703", "title": "『真香警告』这33个超级好用的CSS选择器，你可能见都没见过。", "desc": "CSS 选择器是 CSS 世界中非常重要的一环。 在 CSS 2 之后，所有的 CSS 属性都是按模块去维护的。 CSS 选择器也是如此，然而如今也已经发布了第四版 —— CSS Selectors Level 4 ，这一版最早的草案发布于2011年09月29日，最后更新是20…"}, {"id": "6930232291612426253", "title": "CSS实现TikTok文字抖动效果", "desc": "前端同学在日常开发中精彩会因为一些动效和设计争的面红耳赤，设计希望用代码实现，前端要设计出gif图，最后谁也不让谁，设计走了，留下了前端独自加班...... CSS技术是前端必须掌握的一项技能，不仅要掌握，而且要精通。现在前端框架横行的趋势，程序员写样式的机会也越来越少，组件式…"}, {"id": "6994726115403120648", "title": "前端CSS必知：BFC及其触发条件", "desc": "1. bfc的理解（块级格式化上下文） 可以看作是隔离了的独立容器，内部元素的布局，不会影响外部元素。 可通过css属性触发。 2. 触发bfc的方式 定位、浮动、overflow: hidden.."}, {"id": "7002628556945621023", "title": "CSS ｜自制⏰", "desc": "每天学习一个css小技巧：简约风⏰ 效果图： 代码： html: css: css的思路就是表盘，指针，中心点，刻度等分开完成基本上都是用过的属性，当然也有几个第一次见：grid-column、gri"}, {"id": "6966257308787539998", "title": "css图标文字居中对齐的几种方法", "desc": "引言 图标文字对齐在平时的工作中是最常见的了，最早学习时候一般都是用vertical-align，但是由于inline-block元素在和文字对齐时候的一些很麻烦的表现，大家应该都经历过那种行框高度高"}, {"id": "6965808560735256607", "title": "不会吧不会吧，都 1202 年了，你还不知道这些检查 CSS 的工具？？？", "desc": "在开发者的日常工作中检查 CSS 并不是一项常见的任务，但有时却不得不做。或许这是性能检查的一部分，用来排查有问题的 CSS 或删去未使用的选择器。也许是努力提高可访问性的一部分，在代码库中使用的所有"}, {"id": "6844903633109139464", "title": "React拾遗：从10种现在流行的 CSS 解决方案谈谈我的最爱 （上）", "desc": "不得不承认 Vue 的css解决方式非常自然简洁，相比之下 css 一直是 React 的痛。 从旧宠 css modules 到 JSS 的各种衍生，到新宠 styled-components。几十种的解决方式，上百篇的教程和比较，已经说明了一切。大家一直在寻找最好的最适合自…"}, {"id": "6986197111423385613", "title": "【知识梳理】CSS中的动画三剑客", "desc": "梳理一下使用 CSS 书写动画的方法。之前一直很模糊，等到使用的时候，都是使用搜索大法解决，这样以后还是不会。"}, {"id": "6935090806210428959", "title": "[译]自适应 CSS 栅格：自由布局的最终版本｜技术点评", "desc": "CSS 栅格布局（Grid）是一种全新的在 Web 上创建二维布局的方法。我们仅需几行 CSS，就可以创建一个之前不用 JavaScript 根本不可能实现的栅格布局。我们不需要任何插件或复杂的安装步骤，不需要繁琐的附加文件，同时也不需要局限于 12 列的栅格布局（译者注：指 …"}, {"id": "6979602307138715679", "title": "scss语法：用scss的理由", "desc": "相信学习过一段时间`css`的小伙伴，都不会对css的预编译器`sass`感到陌生，有点类似编程语言，但实际上是提供了一些有效的处理方法，有效`减轻css的开发负担`，`提升开发效率`，`增加开发愉悦"}, {"id": "6985190429285154823", "title": "客户端字体最佳实践", "desc": "客户端字体如果没有进行优化，会非常影响性能： 延迟文本渲染：如果字体没有加载完成，浏览器不会显示文本，而是等待字体加载完成，会阻塞浏览器进行首次内容绘制。 布局转换：字体间的切换会导致布局改变，因为字"}, {"id": "6984703571509903373", "title": "CS3手写新拟态vue3组件", "desc": "CS3手写新拟态vue3组件 按钮的拟态组件效果 下拉框拟态组件 在父组件中可以这样引用 拟态头像框"}, {"id": "7000006806911057956", "title": "clip-path的一个重要的函数path所引入的曲线绘制问题", "desc": "这是我参与8月更文挑战的第24天，活动详情查看：8月更文挑战 问题起源 问题起源于最近的生产环境的一个项目，需要在页面上绘制几条曲线，想让美工帮我直接抠图做背景，结果被拒绝了，OK，我自己画，哼~ 生"}, {"id": "6999257108197670925", "title": "纯CSS制作一个小动画", "desc": "这是我参与8月更文挑战的第22天，活动详情查看：8月更文挑战 问题起源 前几天不知道写什么，在沸点上问XDM前端CSS还有什么画起来有点儿意思的： CSS不知道写啥了，兄弟们给出道题目吧 几位好兄弟说"}, {"id": "6844904015646425096", "title": "纯CSS实现简单骨骼动画", "desc": "某天设计师来找我说，“这个心愿牌傻傻地挂在那不好看，加个动效呗，就左右摆动一下就行，很简单的！”，我一想，行呀，提升用户视觉体验，开搞。 十分钟后，🥶不对呀，这个左右摆动好假，不像现实中风吹的效果。 冷静思考🤔，为啥这个摆动会没有灵魂。于是拿起工卡开始摆动，看看现实中的摆动…"}, {"id": "6844903604839514125", "title": "chrome开发者工具各种骚技巧", "desc": "对于每个前端从业者来说，除了F5键之外，用的最多的另外一个键就是F12了。 今天，大神（@小鱼二）推荐我一个网站，才知道chrome还有各种骚姿势。 所有的我都看了，这里随便列举几个个人之前不了解，觉得挺有用的。 多的就不列举了，可以看看开头的网站。看了有几个功能我电脑（win…"}, {"id": "6952665769209495566", "title": "【工程化】深入浅出 CSS Modules", "desc": "CSS Modules 是什么？官方文档的介绍如下：所有的类名和动画名称默认都有各自的作用域的 CSS 文件。CSS Modules 并不是 CSS 官方的标准，也不是浏览器的特性，而是使用一些构建工"}, {"id": "7000566540978356255", "title": "浅谈 CSS3 新特性：图片进阶", "desc": "利用 CSS3 的新特性，可以做卡片式图片、响应式图片/图库、添加滤镜、图片预览窗（Modal）等等"}, {"id": "6947866495309316104", "title": "CSS 文字装饰 text-decoration & text-emphasis", "desc": "在 CSS 中，文字算是我们天天会打交道的一大类了，有了文字，则必不可少一些文字装饰。 本文将讲讲两个比较新的文字装饰的概念 text-decoration 与 text-emphasis，在最后，还会讲解使用 background 模拟文字下划线的一些有趣的动效。 text-…"}, {"id": "6844903871509184520", "title": "【译】一行css代码搞定响应式布局", "desc": "在这篇文章中，我将教你如何使用 CSS Grid 来创建一个超酷的图像网格图，它将根据屏幕的宽度来改变列的数量。最精彩的地方在于：所有的响应特性被添加到了一行 css 代码中。这意味着我们不必将 HTML 与丑陋的类名(如col-sm-4, col-md-8)混杂在一起，也不必…"}, {"id": "7004435505739726885", "title": "css盒子模型", "desc": "css盒子模型（标准盒子模型（W3C盒子模型），怪异盒子模型（IE盒子模型），弹性盒子模型（flex））"}, {"id": "7001708480155353125", "title": "一场'img'引发的'惨案'", "desc": "这是我参与8月更文挑战的第5天，活动详情查看：8月更文挑战 为什么图片总是对不齐呢？ 当别人问起来这个问题的时候，我先是一愣，随后直接google.com一个链接，转发过去，完事儿！ 但是话说回来了，"}, {"id": "6868099832175820808", "title": "教你使用CSS3实现新拟态UI", "desc": "新拟态的英文名称是“Neumorphism”，是New+Skeuomorphism的组合词，同时也叫“Soft UI”。简单讲，新拟态是一种图形样式，其原理是通过模拟真实物体来为界面的UI元素赋予真实感。 在今年上半年，新拟态的UI设计风靡一时，它被誉为2020年最火的UI设计…"}, {"id": "6987687201341440037", "title": "fixed 固定底部组件的一个样式写法小技巧", "desc": "正文 某次修改一个页面的逻辑，页面布局比较简答，整个页面 overflow-y: auto;，页面的底部放置一个 position: fixed;的固定按钮，如下： 为了避免页面主体内容被底部的固定按"}, {"id": "6844903636963688456", "title": "手写一个webpack4.0配置", "desc": "确认过眼神，你还是没有准备秋招的人？时间仓促。自京东6月8号开启管培生的招聘，就意味着秋招的开始。然而你还在等着秋天的到来？今年形势应该更为严峻，随着各大技术(vue,webpack，react，微信小程序)生态越来越成熟，这也意味着我们要更加深入的去了解他们，掌握他们。比如你…"}, {"id": "6966482130020859912", "title": "6分钟实现CSS炫光倒影按钮", "desc": "话不多，先看效果：  回归老本行，继续分享简单有趣的CSS创意特效，放松放松心情~ 实现过程（完整源码在最后）： 1 老样子，定义基本样式： font-family: 'fangsong'; 仿宋字体"}, {"id": "7000340820163313695", "title": "【babylonjs】babylonjs实践（九）-- 元素合体移动旋转缩放", "desc": "【babylonjs】babylonjs实践（九）-- 元素合体移动旋转缩放。涉及mergeMesh，scale，postion和rotation"}, {"id": "7002079213217906696", "title": "background那些事儿", "desc": "background：混合属性 background-image: 指定一个图片文件或渐变颜色作为背景图片 background-position: 背景图片的初始位置 background-size"}, {"id": "6844903908440014861", "title": "你所不知道的 CSS 负值技巧与细节", "desc": "写本文的起因是，一天在群里有同学说误打误撞下，使用负的 outline-offset 实现了加号。嗯？好奇的我马上也动手尝试了下，到底是如何使用负的 outline-offset 实现加号呢？ 修改 outline-offset 到一个合适的负值 ，那么在恰当的时候，outli…"}, {"id": "6844904088891555847", "title": "拒绝JavaScript，这三个CSS技巧你一定用的上", "desc": "本文介绍三个非常棒棒的CSS技巧，完全可以在你的项目中代替JavaScript，一起来看看这些技巧吧。 1. :active伪类与CSS数据上报 此时，当点击按钮的时候，相关行为数据就会上报给服务器，这种上报就算把JavaScript禁用掉也无法阻止，方便快捷，特别适合A/B测…"}, {"id": "6953430560333103135", "title": "css动画之360首页四字移动动画", "desc": "点这儿查看效果~ 无意中打开了360首页，想找找有什么优秀的网站（比如7k7k、4399小游戏之类的）。咳咳~~~ 突然看到一个好看的玩意： 从事前端之后会有两个毛病，一个是编辑完一句话之后习惯ctr"}, {"id": "7001141962631806984", "title": "CSS 之背景属性(background)", "desc": "CSS 可以添加背景颜色和背景图片，以及来进行图片设置。 background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 属性"}, {"id": "6846687592692318221", "title": "CSS 之使用径向渐变实现卡券效果", "desc": "前几天，同事接到一个积分商城项目，其中有一个卡券兑换礼品功能。我想了一会没什么好的思路，就忙自己的项目去了。但想到以后自己可能也会遇到类似的需求，所以周末学习整理了下几种卡券效果的实现。"}, {"id": "6995611151350366221", "title": "惊艳的彩虹进度条", "desc": "这是我参与8月更文挑战的第13天，活动详情查看：8月更文挑战 在用户心目中，优秀的应用、工具、网站都应该是制作精良且能快速响应他们需求的产品。以前我在发布一款产品的第一版时，登录验证的 load"}, {"id": "6844903792295542797", "title": "【译】Css Grid VS Flexbox: 实践比较", "desc": "在不久前，所有 HTML 页面的布局都是通过table、float和其他 CSS 属性来完成的，但其实这些属性并不适合设计复杂的网页。 紧接着，出现了flexbox ——一种专门为创建强大的响应式页面而设计的布局模式。 使得元素和内容的正确对齐变得很容易，现在是大多数网页开发者…"}, {"id": "6904067117788692488", "title": "蒲公英 · JELLY技术周刊 Vol.33: 前端基础课堂开课啦～", "desc": "浏览器执行javascript脚本是单线程的，当执行一些耗时较长的任务时，本来响应用户操作的任务会阻塞；一个解决方法是把这些耗时长的任务改造成异步操作，但在一些不好改造的任务，如图片像素分析或处理等，可以使用WebWorker处理，以让出主线程响应用户界面操作。 使用自定义字体…"}, {"id": "6844903774310383623", "title": "如何使用 css 绘制心形", "desc": "常遇到心形图案，比如点赞和取消点赞的使用场景。之前的使用方式是图片接入，作为img 或 backgroundImage 插入到 dom 中去。现在自己动手用css绘制一个心形图案。 现在它应该是一个宽50px,高40px的矩形，没跑了。现在开始操作伪元素 emmm... 形状无…"}, {"id": "6981073811160432648", "title": "Css实现盒子在网页内垂直居中的常用方式", "desc": "将如图的盒子在页面内垂直水平居中的几种常用方式 定位法+margin(知道盒子实际宽高) 2.定位+transform(无需知道盒子实际宽高) 3.flex布局(父元素) 4.display: tab"}, {"id": "6844903780236918798", "title": "前端面试之盒模型", "desc": "当你对一个文档进行布局(laying out)时候, 浏览器引擎会根据CSS-Box模型将所有元素描述为一个盒子, CSS会决定这些盒子的大小, 位置, 属性(颜色, 边框...)。 盒模型分为两类: IE盒模型和标准盒模型。 可见demo1与demo2的外边距为20px。而不…"}, {"id": "6998482502918602766", "title": "Flex布局—实例", "desc": "一、骰子的布局 骰子的一面，最多可以放置9个点。 下面，就来看看Flex如何实现，从1个点到9个点的布局。 如果不加说明，本节的HTML模板一律如下。 上面代码中，div元素（代表骰子的一个面）是Fl"}, {"id": "6971010647492395044", "title": "你了解flex: 1，flex: auto，flex: 0，flex: none的区别吗？", "desc": "越来越多的人已经在使用flex布局了，flex的属性都很实用，垂直居中，水平居中，分分钟搞定。今天看到有个flex属性，它的值可以是1"}, {"id": "6904871537950916621", "title": "修改Element-ui 中 table 表格的背景色以及鼠标经过某一行背景色发生改变", "desc": "1.修改表格表头以及每一行的颜色在标签中加入未修改情况下默认样式是这样的在样式文件中添加如下代码即可实现鼠标经过某一行更改其背景色"}, {"id": "6844903891063029773", "title": "【Hello CSS】第九章-如何画一个体验更好的动画？", "desc": "在上一节中， 不走心 地画了一些 CSS图案 ，本节就继续不走心地 画动画 。 | animation-delay | 设置动画在启动前的延迟间隔。 | | animation-iteration-count | 定义动画的播放次数。 | | animation-directi…"}, {"id": "6909718170215399431", "title": "网页字体加载优化 ", "desc": "最近工作中，遇到一个页面。需要使用设计提供字体，但因字体过大导致页面加载速度很慢。梳理了一下解决方案 异步加载字体, 使用 preload，加载完成后把 link 的 ref 修改为 stylesheet，浏览器会开始重绘，重绘使用这个字体的 DOM 之前才会触发 font 的…"}, {"id": "6844904114040602632", "title": "前端基础之CSS选择器", "desc": "最近写页面感觉有些选择器已经忘了，于是乎重新整理了一遍css选择器。你们还记得多少种选择器呢，每一种选择器的用法都还记得吗 以#加id名来表示, id是唯一的，同一个页面里不允许多个ID相同的元素。一般只用来强调某个页面或者某个模块，多个功能相同的模块建议使用类选择器。 直接标…"}, {"id": "6992091389521575949", "title": "vue-cli2中less全局引用", "desc": "项目框架：vue-cli2 + antd-vue antd-vue自定义主题 新建myTheme.less文件，在main.js中引用 上诉并不可用于全局，每次使用时则需要在style中@import"}, {"id": "6844903583536644109", "title": "[译] 热爱 JavaScript，但是讨厌 CSS ？", "desc": "一个读者留言说他自己写起 JS 和 React 来觉得很有趣，但是当要处理样式的时候，他就很沮丧。 编程是有趣的，解决问题也是有趣的。当你经历千辛万苦让你的程序正确运行的时候，这种感觉，简直不可思议。 然而，哦，糟糕，是 CSS。你的 App 运行得很好，就是样式有点糟糕，那么…"}, {"id": "6989147095735369765", "title": "【1】「2021」前端总结CSS之Flex篇（二）", "desc": "1、Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。 Flex六个属性 2、flex-direction属性 3、flex-wrap属性 4、flex"}, {"id": "6989140762587824159", "title": "CSS盒子模型(Box Model)", "desc": "所有HTML元素可以看作盒子，在CSS中，\"box model\"这一术语是用来设计和布局时使用。 CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 盒模型允"}, {"id": "6844903954229231629", "title": "Grid 布局学习", "desc": "Grid布局是微软在2010年提出来的一种新的布局方式，到2016年的时候提交了该布局的草案，经过这三四年的发展，grid布局慢慢变的成熟，兼容性也越来越好，可以适当学起来用起来了本次学习的几个点：在"}, {"id": "6941242335443288077", "title": "CSS 实现的无限轮播", "desc": "轮播是常见的展示多图和多文字的方式，有很多种类，比如离散周期播放和连续无限播放。 有很多库封装了这一组件，这些库的功能非常强大，可以适应很多场景。但是如果理解了轮播的原理，可以使用 CSS 实现，对于业务中应对多变的需求有很大的帮助。 这篇文章想分享下一个用纯 CSS 实现的无…"}, {"id": "6844903561390718989", "title": "clip实现圆环进度条", "desc": "怎么实现这样一个圆环进度条的效果呢，可以使用canvas、svg、GIF等等方式，今天我们来说下使用css3怎么来实现。 圆环很简单，一行cssborder-radius:50%即可实现，而且没有兼容性问题，什么，你说IE，让它滚... 我们这里需要三个圆环，一个整的，两个半的…"}, {"id": "6844903507305185294", "title": "Web网页布局的主要方式", "desc": "即传统Web设计，网页上的所有元素的尺寸一律使用px作为单位。 不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。常规的pc的网站都是静态（定宽度）布局的，也就是设置了min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加…"}, {"id": "6844903631842443277", "title": "如何更好的去除谷歌浏览器中input自动填充背景？", "desc": "input可能是平时网页中使用最多的标签之一了，但凡需要输入的地方都少不了。 比较好理解，当自动填充时会激活:-internal-autofill-selected伪类，然后就变成了淡紫色。 虽然样式覆盖了，然而并没有什么用，仍然是默认的淡紫色（要是起作用的话就不会专门去研究这…"}]